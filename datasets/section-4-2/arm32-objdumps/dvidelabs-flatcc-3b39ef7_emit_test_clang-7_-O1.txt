
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

000123c8 <.init>:
   123c8:	push	{r3, lr}
   123cc:	bl	124fc <_start@@Base+0x3c>
   123d0:	pop	{r3, pc}

Disassembly of section .plt:

000123d4 <printf@plt-0x14>:
   123d4:	push	{lr}		; (str lr, [sp, #-4]!)
   123d8:	ldr	lr, [pc, #4]	; 123e4 <printf@plt-0x4>
   123dc:	add	lr, pc, lr
   123e0:	ldr	pc, [lr, #8]!
   123e4:	andeq	r6, r1, ip, lsl ip

000123e8 <printf@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #90112	; 0x16000
   123f0:	ldr	pc, [ip, #3100]!	; 0xc1c

000123f4 <free@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #90112	; 0x16000
   123fc:	ldr	pc, [ip, #3092]!	; 0xc14

00012400 <memcpy@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #90112	; 0x16000
   12408:	ldr	pc, [ip, #3084]!	; 0xc0c

0001240c <memcmp@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #90112	; 0x16000
   12414:	ldr	pc, [ip, #3076]!	; 0xc04

00012418 <realloc@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #90112	; 0x16000
   12420:	ldr	pc, [ip, #3068]!	; 0xbfc

00012424 <fwrite@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #90112	; 0x16000
   1242c:	ldr	pc, [ip, #3060]!	; 0xbf4

00012430 <puts@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #90112	; 0x16000
   12438:	ldr	pc, [ip, #3052]!	; 0xbec

0001243c <malloc@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #90112	; 0x16000
   12444:	ldr	pc, [ip, #3044]!	; 0xbe4

00012448 <__libc_start_main@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #90112	; 0x16000
   12450:	ldr	pc, [ip, #3036]!	; 0xbdc

00012454 <__gmon_start__@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #90112	; 0x16000
   1245c:	ldr	pc, [ip, #3028]!	; 0xbd4

00012460 <strlen@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #90112	; 0x16000
   12468:	ldr	pc, [ip, #3020]!	; 0xbcc

0001246c <fprintf@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #90112	; 0x16000
   12474:	ldr	pc, [ip, #3012]!	; 0xbc4

00012478 <posix_memalign@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #90112	; 0x16000
   12480:	ldr	pc, [ip, #3004]!	; 0xbbc

00012484 <memset@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #90112	; 0x16000
   1248c:	ldr	pc, [ip, #2996]!	; 0xbb4

00012490 <memchr@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #90112	; 0x16000
   12498:	ldr	pc, [ip, #2988]!	; 0xbac

0001249c <fputc@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #90112	; 0x16000
   124a4:	ldr	pc, [ip, #2980]!	; 0xba4

000124a8 <abort@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #90112	; 0x16000
   124b0:	ldr	pc, [ip, #2972]!	; 0xb9c

000124b4 <__assert_fail@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #90112	; 0x16000
   124bc:	ldr	pc, [ip, #2964]!	; 0xb94

Disassembly of section .text:

000124c0 <_start@@Base>:
   124c0:	mov	fp, #0
   124c4:	mov	lr, #0
   124c8:	pop	{r1}		; (ldr r1, [sp], #4)
   124cc:	mov	r2, sp
   124d0:	push	{r2}		; (str r2, [sp, #-4]!)
   124d4:	push	{r0}		; (str r0, [sp, #-4]!)
   124d8:	ldr	ip, [pc, #16]	; 124f0 <_start@@Base+0x30>
   124dc:	push	{ip}		; (str ip, [sp, #-4]!)
   124e0:	ldr	r0, [pc, #12]	; 124f4 <_start@@Base+0x34>
   124e4:	ldr	r3, [pc, #12]	; 124f8 <_start@@Base+0x38>
   124e8:	bl	12448 <__libc_start_main@plt>
   124ec:	bl	124a8 <abort@plt>
   124f0:	andeq	r6, r1, ip, asr r9
   124f4:	ldrdeq	r2, [r1], -ip
   124f8:	strdeq	r6, [r1], -ip
   124fc:	ldr	r3, [pc, #20]	; 12518 <_start@@Base+0x58>
   12500:	ldr	r2, [pc, #20]	; 1251c <_start@@Base+0x5c>
   12504:	add	r3, pc, r3
   12508:	ldr	r2, [r3, r2]
   1250c:	cmp	r2, #0
   12510:	bxeq	lr
   12514:	b	12454 <__gmon_start__@plt>
   12518:	strdeq	r6, [r1], -r4
   1251c:	andeq	r0, r0, r4, asr r0
   12520:	ldr	r0, [pc, #24]	; 12540 <_start@@Base+0x80>
   12524:	ldr	r3, [pc, #24]	; 12544 <_start@@Base+0x84>
   12528:	cmp	r3, r0
   1252c:	bxeq	lr
   12530:	ldr	r3, [pc, #16]	; 12548 <_start@@Base+0x88>
   12534:	cmp	r3, #0
   12538:	bxeq	lr
   1253c:	bx	r3
   12540:	andeq	r9, r2, r0, rrx
   12544:	andeq	r9, r2, r0, rrx
   12548:	andeq	r0, r0, r0
   1254c:	ldr	r0, [pc, #36]	; 12578 <_start@@Base+0xb8>
   12550:	ldr	r1, [pc, #36]	; 1257c <_start@@Base+0xbc>
   12554:	sub	r1, r1, r0
   12558:	asr	r1, r1, #2
   1255c:	add	r1, r1, r1, lsr #31
   12560:	asrs	r1, r1, #1
   12564:	bxeq	lr
   12568:	ldr	r3, [pc, #16]	; 12580 <_start@@Base+0xc0>
   1256c:	cmp	r3, #0
   12570:	bxeq	lr
   12574:	bx	r3
   12578:	andeq	r9, r2, r0, rrx
   1257c:	andeq	r9, r2, r0, rrx
   12580:	andeq	r0, r0, r0
   12584:	push	{r4, lr}
   12588:	ldr	r4, [pc, #24]	; 125a8 <_start@@Base+0xe8>
   1258c:	ldrb	r3, [r4]
   12590:	cmp	r3, #0
   12594:	popne	{r4, pc}
   12598:	bl	12520 <_start@@Base+0x60>
   1259c:	mov	r3, #1
   125a0:	strb	r3, [r4]
   125a4:	pop	{r4, pc}
   125a8:	andeq	r9, r2, r4, rrx
   125ac:	b	1254c <_start@@Base+0x8c>

000125b0 <dbg_emitter@@Base>:
   125b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125b4:	add	fp, sp, #24
   125b8:	mov	r4, r3
   125bc:	mov	r5, r2
   125c0:	mov	r6, r1
   125c4:	ldr	r3, [fp, #8]
   125c8:	movw	r0, #26996	; 0x6974
   125cc:	movt	r0, #1
   125d0:	mov	r1, r2
   125d4:	mov	r2, r4
   125d8:	bl	123e8 <printf@plt>
   125dc:	cmp	r5, #1
   125e0:	blt	12658 <dbg_emitter@@Base+0xa8>
   125e4:	add	r6, r6, #4
   125e8:	movw	r7, #28160	; 0x6e00
   125ec:	movt	r7, #1
   125f0:	movw	r8, #27045	; 0x69a5
   125f4:	movt	r8, #1
   125f8:	movw	r9, #27078	; 0x69c6
   125fc:	movt	r9, #1
   12600:	b	12634 <dbg_emitter@@Base+0x84>
   12604:	ldr	r2, [r6]
   12608:	mov	r0, r8
   1260c:	mov	r1, r4
   12610:	bl	123e8 <printf@plt>
   12614:	ldr	r0, [r6, #-4]
   12618:	cmp	r0, #0
   1261c:	bne	12648 <dbg_emitter@@Base+0x98>
   12620:	ldr	r2, [r6]
   12624:	mov	r0, r9
   12628:	mov	r1, r4
   1262c:	bl	123e8 <printf@plt>
   12630:	b	12648 <dbg_emitter@@Base+0x98>
   12634:	ldr	r0, [r6, #-4]
   12638:	cmp	r0, r7
   1263c:	beq	12604 <dbg_emitter@@Base+0x54>
   12640:	cmp	r0, #0
   12644:	beq	12620 <dbg_emitter@@Base+0x70>
   12648:	ldr	r0, [r6], #8
   1264c:	add	r4, r0, r4
   12650:	subs	r5, r5, #1
   12654:	bne	12634 <dbg_emitter@@Base+0x84>
   12658:	mov	r0, #0
   1265c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012660 <debug_test@@Base>:
   12660:	push	{r4, r5, r6, r7, fp, lr}
   12664:	add	fp, sp, #16
   12668:	sub	sp, sp, #280	; 0x118
   1266c:	vmov.i32	q8, #0	; 0x00000000
   12670:	add	r4, sp, #8
   12674:	add	r0, r4, #16
   12678:	vst1.64	{d16-d17}, [r0]
   1267c:	mov	r0, #36	; 0x24
   12680:	mov	r1, r4
   12684:	vst1.64	{d16-d17}, [r1], r0
   12688:	mov	r5, #0
   1268c:	str	r5, [r1]
   12690:	str	r5, [sp, #40]	; 0x28
   12694:	movw	r0, #28064	; 0x6da0
   12698:	movt	r0, #1
   1269c:	bl	12430 <puts@plt>
   126a0:	str	r5, [sp]
   126a4:	add	r5, sp, #48	; 0x30
   126a8:	movw	r1, #9648	; 0x25b0
   126ac:	movt	r1, #1
   126b0:	mov	r0, r5
   126b4:	mov	r2, #0
   126b8:	mov	r3, #0
   126bc:	bl	13024 <flatcc_builder_custom_init@@Base>
   126c0:	mov	r0, r5
   126c4:	mov	r1, r4
   126c8:	mov	r2, #10
   126cc:	bl	12728 <debug_test@@Base+0xc8>
   126d0:	mov	r1, r0
   126d4:	mov	r0, r5
   126d8:	bl	126f0 <debug_test@@Base+0x90>
   126dc:	mov	r0, r5
   126e0:	bl	13208 <flatcc_builder_clear@@Base>
   126e4:	mov	r0, #0
   126e8:	sub	sp, fp, #16
   126ec:	pop	{r4, r5, r6, r7, fp, pc}
   126f0:	push	{r4, r5, fp, lr}
   126f4:	add	fp, sp, #8
   126f8:	mov	r5, r1
   126fc:	mov	r4, r0
   12700:	bl	12cf0 <main@@Base+0x14>
   12704:	cmp	r0, #0
   12708:	popne	{r4, r5, fp, pc}
   1270c:	mov	r0, r4
   12710:	mov	r1, r5
   12714:	bl	12d04 <main@@Base+0x28>
   12718:	mov	r1, r0
   1271c:	mov	r0, r4
   12720:	pop	{r4, r5, fp, lr}
   12724:	b	12d00 <main@@Base+0x24>
   12728:	push	{fp, lr}
   1272c:	mov	fp, sp
   12730:	sub	sp, sp, #8
   12734:	mvn	ip, #-1073741824	; 0xc0000000
   12738:	mov	r3, #4
   1273c:	stm	sp, {r3, ip}
   12740:	mov	r3, #4
   12744:	bl	14ef4 <flatcc_builder_create_vector@@Base>
   12748:	mov	sp, fp
   1274c:	pop	{fp, pc}

00012750 <emit_test@@Base>:
   12750:	push	{r4, r5, r6, sl, fp, lr}
   12754:	add	fp, sp, #16
   12758:	sub	sp, sp, #256	; 0x100
   1275c:	movw	r0, #28048	; 0x6d90
   12760:	movt	r0, #1
   12764:	vld1.64	{d16-d17}, [r0]
   12768:	mov	r4, sp
   1276c:	vst1.64	{d16-d17}, [r4]
   12770:	add	r6, sp, #20
   12774:	mov	r0, r6
   12778:	bl	13090 <flatcc_builder_init@@Base>
   1277c:	mov	r0, r6
   12780:	bl	16128 <flatcc_builder_get_emit_context@@Base>
   12784:	mov	r5, r0
   12788:	mov	r0, r6
   1278c:	mov	r1, r4
   12790:	mov	r2, #4
   12794:	bl	12728 <debug_test@@Base+0xc8>
   12798:	mov	r1, r0
   1279c:	mov	r0, r6
   127a0:	bl	126f0 <debug_test@@Base+0x90>
   127a4:	sub	r1, fp, #20
   127a8:	mov	r0, r5
   127ac:	bl	129ac <emit_test@@Base+0x25c>
   127b0:	cmp	r0, #0
   127b4:	mvneq	r0, #0
   127b8:	subeq	sp, fp, #16
   127bc:	popeq	{r4, r5, r6, sl, fp, pc}
   127c0:	mov	r4, r0
   127c4:	ldr	r6, [fp, #-20]	; 0xffffffec
   127c8:	mov	r0, r5
   127cc:	bl	129dc <emit_test@@Base+0x28c>
   127d0:	cmp	r6, r0
   127d4:	bne	128a8 <emit_test@@Base+0x158>
   127d8:	add	r0, sp, #20
   127dc:	bl	15e84 <flatcc_builder_get_buffer_size@@Base>
   127e0:	cmp	r6, r0
   127e4:	bne	128c8 <emit_test@@Base+0x178>
   127e8:	movw	r5, #36960	; 0x9060
   127ec:	movt	r5, #2
   127f0:	ldr	r0, [r5]
   127f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   127f8:	movw	r1, #27215	; 0x6a4f
   127fc:	movt	r1, #1
   12800:	bl	1246c <fprintf@plt>
   12804:	ldr	r2, [r5]
   12808:	ldr	r1, [fp, #-20]	; 0xffffffec
   1280c:	mov	r0, r4
   12810:	bl	129e4 <emit_test@@Base+0x294>
   12814:	ldr	r2, [fp, #-20]	; 0xffffffec
   12818:	cmp	r2, #58	; 0x3a
   1281c:	bne	128e8 <emit_test@@Base+0x198>
   12820:	movw	r1, #27984	; 0x6d50
   12824:	movt	r1, #1
   12828:	mov	r0, r4
   1282c:	bl	1240c <memcmp@plt>
   12830:	cmp	r0, #0
   12834:	bne	12908 <emit_test@@Base+0x1b8>
   12838:	mov	r0, r4
   1283c:	bl	12b10 <emit_test@@Base+0x3c0>
   12840:	mov	r4, r0
   12844:	bl	12b34 <emit_test@@Base+0x3e4>
   12848:	eor	r0, r0, #42	; 0x2a
   1284c:	orrs	r0, r0, r1
   12850:	bne	12928 <emit_test@@Base+0x1d8>
   12854:	mov	r0, r4
   12858:	bl	12ba8 <emit_test@@Base+0x458>
   1285c:	cmp	r0, #1
   12860:	bne	12948 <emit_test@@Base+0x1f8>
   12864:	mov	r0, r4
   12868:	bl	12c1c <emit_test@@Base+0x4cc>
   1286c:	bl	12c18 <emit_test@@Base+0x4c8>
   12870:	cmp	r0, #4
   12874:	bne	12968 <emit_test@@Base+0x218>
   12878:	mov	r0, r4
   1287c:	bl	12c1c <emit_test@@Base+0x4cc>
   12880:	bl	12c98 <emit_test@@Base+0x548>
   12884:	vldr	s2, [pc, #284]	; 129a8 <emit_test@@Base+0x258>
   12888:	vcmp.f32	s0, s2
   1288c:	vmrs	APSR_nzcv, fpscr
   12890:	bne	12988 <emit_test@@Base+0x238>
   12894:	add	r0, sp, #20
   12898:	bl	13208 <flatcc_builder_clear@@Base>
   1289c:	mov	r0, #0
   128a0:	sub	sp, fp, #16
   128a4:	pop	{r4, r5, r6, sl, fp, pc}
   128a8:	movw	r0, #33208	; 0x81b8
   128ac:	movt	r0, #1
   128b0:	movw	r1, #27124	; 0x69f4
   128b4:	movt	r1, #1
   128b8:	movw	r3, #27199	; 0x6a3f
   128bc:	movt	r3, #1
   128c0:	mov	r2, #100	; 0x64
   128c4:	bl	124b4 <__assert_fail@plt>
   128c8:	movw	r0, #33208	; 0x81b8
   128cc:	movt	r0, #1
   128d0:	movw	r1, #27124	; 0x69f4
   128d4:	movt	r1, #1
   128d8:	movw	r3, #27199	; 0x6a3f
   128dc:	movt	r3, #1
   128e0:	mov	r2, #101	; 0x65
   128e4:	bl	124b4 <__assert_fail@plt>
   128e8:	movw	r0, #33208	; 0x81b8
   128ec:	movt	r0, #1
   128f0:	movw	r1, #27124	; 0x69f4
   128f4:	movt	r1, #1
   128f8:	movw	r3, #27199	; 0x6a3f
   128fc:	movt	r3, #1
   12900:	mov	r2, #106	; 0x6a
   12904:	bl	124b4 <__assert_fail@plt>
   12908:	movw	r0, #33208	; 0x81b8
   1290c:	movt	r0, #1
   12910:	movw	r1, #27124	; 0x69f4
   12914:	movt	r1, #1
   12918:	movw	r3, #27199	; 0x6a3f
   1291c:	movt	r3, #1
   12920:	mov	r2, #108	; 0x6c
   12924:	bl	124b4 <__assert_fail@plt>
   12928:	movw	r0, #33208	; 0x81b8
   1292c:	movt	r0, #1
   12930:	movw	r1, #27124	; 0x69f4
   12934:	movt	r1, #1
   12938:	movw	r3, #27199	; 0x6a3f
   1293c:	movt	r3, #1
   12940:	mov	r2, #112	; 0x70
   12944:	bl	124b4 <__assert_fail@plt>
   12948:	movw	r0, #33208	; 0x81b8
   1294c:	movt	r0, #1
   12950:	movw	r1, #27124	; 0x69f4
   12954:	movt	r1, #1
   12958:	movw	r3, #27199	; 0x6a3f
   1295c:	movt	r3, #1
   12960:	mov	r2, #113	; 0x71
   12964:	bl	124b4 <__assert_fail@plt>
   12968:	movw	r0, #33208	; 0x81b8
   1296c:	movt	r0, #1
   12970:	movw	r1, #27124	; 0x69f4
   12974:	movt	r1, #1
   12978:	movw	r3, #27199	; 0x6a3f
   1297c:	movt	r3, #1
   12980:	mov	r2, #114	; 0x72
   12984:	bl	124b4 <__assert_fail@plt>
   12988:	movw	r0, #33208	; 0x81b8
   1298c:	movt	r0, #1
   12990:	movw	r1, #27124	; 0x69f4
   12994:	movt	r1, #1
   12998:	movw	r3, #27199	; 0x6a3f
   1299c:	movt	r3, #1
   129a0:	mov	r2, #115	; 0x73
   129a4:	bl	124b4 <__assert_fail@plt>
   129a8:	svccc	0x0099999a
   129ac:	ldm	r0, {r2, r3}
   129b0:	cmp	r2, r3
   129b4:	beq	129c8 <emit_test@@Base+0x278>
   129b8:	mov	r0, #0
   129bc:	cmp	r1, #0
   129c0:	strne	r0, [r1]
   129c4:	bx	lr
   129c8:	cmp	r1, #0
   129cc:	ldrne	r2, [r0, #24]
   129d0:	strne	r2, [r1]
   129d4:	ldr	r0, [r0, #8]
   129d8:	bx	lr
   129dc:	ldr	r0, [r0, #24]
   129e0:	bx	lr
   129e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129e8:	add	fp, sp, #28
   129ec:	sub	sp, sp, #20
   129f0:	mov	r4, r2
   129f4:	mov	r5, r1
   129f8:	mov	r6, r0
   129fc:	movw	r1, #27488	; 0x6b60
   12a00:	movt	r1, #1
   12a04:	movw	r2, #27232	; 0x6a60
   12a08:	movt	r2, #1
   12a0c:	mov	r0, r4
   12a10:	bl	1246c <fprintf@plt>
   12a14:	cmp	r5, #0
   12a18:	beq	12af4 <emit_test@@Base+0x3a4>
   12a1c:	add	r7, sp, #3
   12a20:	movw	sl, #27507	; 0x6b73
   12a24:	movt	sl, #1
   12a28:	mov	r8, #0
   12a2c:	ands	r9, r8, #15
   12a30:	beq	12a4c <emit_test@@Base+0x2fc>
   12a34:	tst	r8, #7
   12a38:	bne	12a7c <emit_test@@Base+0x32c>
   12a3c:	mov	r0, #32
   12a40:	mov	r1, r4
   12a44:	bl	1249c <fputc@plt>
   12a48:	b	12a7c <emit_test@@Base+0x32c>
   12a4c:	cmp	r8, #0
   12a50:	beq	12a68 <emit_test@@Base+0x318>
   12a54:	mov	r0, r4
   12a58:	movw	r1, #27493	; 0x6b65
   12a5c:	movt	r1, #1
   12a60:	mov	r2, r7
   12a64:	bl	1246c <fprintf@plt>
   12a68:	mov	r0, r4
   12a6c:	movw	r1, #27499	; 0x6b6b
   12a70:	movt	r1, #1
   12a74:	mov	r2, r8
   12a78:	bl	1246c <fprintf@plt>
   12a7c:	ldrb	r2, [r6, r8]
   12a80:	mov	r0, r4
   12a84:	mov	r1, sl
   12a88:	bl	1246c <fprintf@plt>
   12a8c:	ldrb	r0, [r6, r8]
   12a90:	sub	r1, r0, #32
   12a94:	uxtb	r1, r1
   12a98:	cmp	r1, #94	; 0x5e
   12a9c:	movwhi	r0, #46	; 0x2e
   12aa0:	strb	r0, [r7, r9]
   12aa4:	add	r0, r7, r9
   12aa8:	mov	r1, #0
   12aac:	strb	r1, [r0, #1]
   12ab0:	add	r8, r8, #1
   12ab4:	cmp	r5, r8
   12ab8:	bne	12a2c <emit_test@@Base+0x2dc>
   12abc:	tst	r5, #15
   12ac0:	beq	12af4 <emit_test@@Base+0x3a4>
   12ac4:	add	r6, r5, #1
   12ac8:	movw	r5, #27513	; 0x6b79
   12acc:	movt	r5, #1
   12ad0:	mov	r0, r5
   12ad4:	mov	r1, #3
   12ad8:	mov	r2, #1
   12adc:	mov	r3, r4
   12ae0:	bl	12424 <fwrite@plt>
   12ae4:	add	r0, r6, #1
   12ae8:	tst	r6, #15
   12aec:	mov	r6, r0
   12af0:	bne	12ad0 <emit_test@@Base+0x380>
   12af4:	movw	r1, #27493	; 0x6b65
   12af8:	movt	r1, #1
   12afc:	add	r2, sp, #3
   12b00:	mov	r0, r4
   12b04:	bl	1246c <fprintf@plt>
   12b08:	sub	sp, fp, #28
   12b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b10:	cmp	r0, #0
   12b14:	moveq	r0, #0
   12b18:	bxeq	lr
   12b1c:	push	{r4, sl, fp, lr}
   12b20:	add	fp, sp, #8
   12b24:	mov	r4, r0
   12b28:	bl	12e7c <main@@Base+0x1a0>
   12b2c:	add	r0, r4, r0
   12b30:	pop	{r4, sl, fp, pc}
   12b34:	push	{r4, r5, fp, lr}
   12b38:	add	fp, sp, #8
   12b3c:	cmp	r0, #0
   12b40:	beq	12b88 <emit_test@@Base+0x438>
   12b44:	mov	r4, r0
   12b48:	bl	12e88 <main@@Base+0x1ac>
   12b4c:	sub	r5, r4, r0
   12b50:	mov	r0, r5
   12b54:	bl	12e90 <main@@Base+0x1b4>
   12b58:	cmp	r0, #6
   12b5c:	bcc	12b7c <emit_test@@Base+0x42c>
   12b60:	add	r0, r5, #4
   12b64:	bl	12e90 <main@@Base+0x1b4>
   12b68:	cmp	r0, #0
   12b6c:	beq	12b7c <emit_test@@Base+0x42c>
   12b70:	add	r0, r4, r0
   12b74:	pop	{r4, r5, fp, lr}
   12b78:	b	12e98 <main@@Base+0x1bc>
   12b7c:	mov	r0, #0
   12b80:	mov	r1, #0
   12b84:	pop	{r4, r5, fp, pc}
   12b88:	movw	r0, #27517	; 0x6b7d
   12b8c:	movt	r0, #1
   12b90:	movw	r1, #27555	; 0x6ba3
   12b94:	movt	r1, #1
   12b98:	movw	r3, #27647	; 0x6bff
   12b9c:	movt	r3, #1
   12ba0:	mov	r2, #41	; 0x29
   12ba4:	bl	124b4 <__assert_fail@plt>
   12ba8:	push	{r4, r5, fp, lr}
   12bac:	add	fp, sp, #8
   12bb0:	cmp	r0, #0
   12bb4:	beq	12bf8 <emit_test@@Base+0x4a8>
   12bb8:	mov	r4, r0
   12bbc:	bl	12e88 <main@@Base+0x1ac>
   12bc0:	sub	r5, r4, r0
   12bc4:	mov	r0, r5
   12bc8:	bl	12e90 <main@@Base+0x1b4>
   12bcc:	cmp	r0, #8
   12bd0:	bcc	12bf0 <emit_test@@Base+0x4a0>
   12bd4:	add	r0, r5, #6
   12bd8:	bl	12e90 <main@@Base+0x1b4>
   12bdc:	cmp	r0, #0
   12be0:	beq	12bf0 <emit_test@@Base+0x4a0>
   12be4:	add	r0, r4, r0
   12be8:	pop	{r4, r5, fp, lr}
   12bec:	b	12eac <main@@Base+0x1d0>
   12bf0:	mov	r0, #0
   12bf4:	pop	{r4, r5, fp, pc}
   12bf8:	movw	r0, #27517	; 0x6b7d
   12bfc:	movt	r0, #1
   12c00:	movw	r1, #27555	; 0x6ba3
   12c04:	movt	r1, #1
   12c08:	movw	r3, #27679	; 0x6c1f
   12c0c:	movt	r3, #1
   12c10:	mov	r2, #42	; 0x2a
   12c14:	bl	124b4 <__assert_fail@plt>
   12c18:	b	12eb8 <main@@Base+0x1dc>
   12c1c:	push	{r4, r5, r6, sl, fp, lr}
   12c20:	add	fp, sp, #16
   12c24:	cmp	r0, #0
   12c28:	beq	12c78 <emit_test@@Base+0x528>
   12c2c:	mov	r4, r0
   12c30:	bl	12e88 <main@@Base+0x1ac>
   12c34:	sub	r6, r4, r0
   12c38:	mov	r0, r6
   12c3c:	bl	12e90 <main@@Base+0x1b4>
   12c40:	mov	r5, #0
   12c44:	cmp	r0, #10
   12c48:	bcc	12c70 <emit_test@@Base+0x520>
   12c4c:	add	r0, r6, #8
   12c50:	bl	12e90 <main@@Base+0x1b4>
   12c54:	cmp	r0, #0
   12c58:	beq	12c70 <emit_test@@Base+0x520>
   12c5c:	add	r4, r4, r0
   12c60:	mov	r0, r4
   12c64:	bl	12e7c <main@@Base+0x1a0>
   12c68:	add	r0, r4, r0
   12c6c:	add	r5, r0, #4
   12c70:	mov	r0, r5
   12c74:	pop	{r4, r5, r6, sl, fp, pc}
   12c78:	movw	r0, #27517	; 0x6b7d
   12c7c:	movt	r0, #1
   12c80:	movw	r1, #27555	; 0x6ba3
   12c84:	movt	r1, #1
   12c88:	movw	r3, #27713	; 0x6c41
   12c8c:	movt	r3, #1
   12c90:	mov	r2, #43	; 0x2b
   12c94:	bl	124b4 <__assert_fail@plt>
   12c98:	push	{r4, sl, fp, lr}
   12c9c:	add	fp, sp, #8
   12ca0:	mov	r4, r0
   12ca4:	bl	12eb8 <main@@Base+0x1dc>
   12ca8:	cmp	r0, #2
   12cac:	bls	12cbc <emit_test@@Base+0x56c>
   12cb0:	add	r0, r4, #8
   12cb4:	pop	{r4, sl, fp, lr}
   12cb8:	b	12ecc <main@@Base+0x1f0>
   12cbc:	movw	r0, #27764	; 0x6c74
   12cc0:	movt	r0, #1
   12cc4:	movw	r1, #27819	; 0x6cab
   12cc8:	movt	r1, #1
   12ccc:	movw	r3, #27920	; 0x6d10
   12cd0:	movt	r3, #1
   12cd4:	movw	r2, #403	; 0x193
   12cd8:	bl	124b4 <__assert_fail@plt>

00012cdc <main@@Base>:
   12cdc:	push	{fp, lr}
   12ce0:	mov	fp, sp
   12ce4:	bl	12660 <debug_test@@Base>
   12ce8:	pop	{fp, lr}
   12cec:	b	12750 <emit_test@@Base>
   12cf0:	mov	r1, #0
   12cf4:	mov	r2, #0
   12cf8:	mov	r3, #0
   12cfc:	b	139a0 <flatcc_builder_start_buffer@@Base>
   12d00:	b	13b54 <flatcc_builder_end_buffer@@Base>
   12d04:	push	{r4, r5, fp, lr}
   12d08:	add	fp, sp, #8
   12d0c:	mov	r5, r1
   12d10:	mov	r4, r0
   12d14:	bl	12d68 <main@@Base+0x8c>
   12d18:	cmp	r0, #0
   12d1c:	bne	12d54 <main@@Base+0x78>
   12d20:	mov	r0, r4
   12d24:	bl	12d70 <main@@Base+0x94>
   12d28:	cmp	r0, #0
   12d2c:	bne	12d54 <main@@Base+0x78>
   12d30:	mov	r0, r4
   12d34:	mov	r1, r5
   12d38:	bl	12da8 <main@@Base+0xcc>
   12d3c:	cmp	r0, #0
   12d40:	bne	12d54 <main@@Base+0x78>
   12d44:	mov	r0, r4
   12d48:	bl	12ddc <main@@Base+0x100>
   12d4c:	cmp	r0, #0
   12d50:	beq	12d5c <main@@Base+0x80>
   12d54:	mov	r0, #0
   12d58:	pop	{r4, r5, fp, pc}
   12d5c:	mov	r0, r4
   12d60:	pop	{r4, r5, fp, lr}
   12d64:	b	12e0c <main@@Base+0x130>
   12d68:	mov	r1, #3
   12d6c:	b	14688 <flatcc_builder_start_table@@Base>
   12d70:	push	{r4, sl, fp, lr}
   12d74:	add	fp, sp, #8
   12d78:	mov	r4, #0
   12d7c:	mov	r1, #0
   12d80:	mov	r2, #8
   12d84:	mov	r3, #8
   12d88:	bl	1549c <flatcc_builder_table_add@@Base>
   12d8c:	cmp	r0, #0
   12d90:	mvneq	r4, #0
   12d94:	moveq	r0, r4
   12d98:	popeq	{r4, sl, fp, pc}
   12d9c:	bl	12e5c <main@@Base+0x180>
   12da0:	mov	r0, r4
   12da4:	pop	{r4, sl, fp, pc}
   12da8:	push	{r4, r5, fp, lr}
   12dac:	add	fp, sp, #8
   12db0:	mvn	r4, #0
   12db4:	cmp	r1, #0
   12db8:	beq	12dd4 <main@@Base+0xf8>
   12dbc:	mov	r5, r1
   12dc0:	mov	r1, #2
   12dc4:	bl	153d8 <flatcc_builder_table_add_offset@@Base>
   12dc8:	cmp	r0, #0
   12dcc:	strne	r5, [r0]
   12dd0:	movne	r4, #0
   12dd4:	mov	r0, r4
   12dd8:	pop	{r4, r5, fp, pc}
   12ddc:	push	{fp, lr}
   12de0:	mov	fp, sp
   12de4:	mov	r1, #1
   12de8:	mov	r2, #1
   12dec:	mov	r3, #1
   12df0:	bl	1549c <flatcc_builder_table_add@@Base>
   12df4:	cmp	r0, #0
   12df8:	mvneq	r0, #0
   12dfc:	popeq	{fp, pc}
   12e00:	bl	12e70 <main@@Base+0x194>
   12e04:	mov	r0, #0
   12e08:	pop	{fp, pc}
   12e0c:	push	{r4, sl, fp, lr}
   12e10:	add	fp, sp, #8
   12e14:	mov	r4, r0
   12e18:	movw	r1, #28044	; 0x6d8c
   12e1c:	movt	r1, #1
   12e20:	mov	r2, #0
   12e24:	bl	14d18 <flatcc_builder_check_required@@Base>
   12e28:	cmp	r0, #0
   12e2c:	beq	12e3c <main@@Base+0x160>
   12e30:	mov	r0, r4
   12e34:	pop	{r4, sl, fp, lr}
   12e38:	b	14da8 <flatcc_builder_end_table@@Base>
   12e3c:	movw	r0, #27242	; 0x6a6a
   12e40:	movt	r0, #1
   12e44:	movw	r1, #27350	; 0x6ad6
   12e48:	movt	r1, #1
   12e4c:	movw	r3, #27443	; 0x6b33
   12e50:	movt	r3, #1
   12e54:	mov	r2, #21
   12e58:	bl	124b4 <__assert_fail@plt>
   12e5c:	mov	r1, #0
   12e60:	mov	r2, #42	; 0x2a
   12e64:	str	r2, [r0]
   12e68:	str	r1, [r0, #4]
   12e6c:	bx	lr
   12e70:	mov	r1, #1
   12e74:	strb	r1, [r0]
   12e78:	bx	lr
   12e7c:	ldr	r0, [r0]
   12e80:	b	12e84 <main@@Base+0x1a8>
   12e84:	bx	lr
   12e88:	ldr	r0, [r0]
   12e8c:	b	12ea0 <main@@Base+0x1c4>
   12e90:	ldrh	r0, [r0]
   12e94:	b	12ea4 <main@@Base+0x1c8>
   12e98:	ldrd	r0, [r0]
   12e9c:	b	12ea8 <main@@Base+0x1cc>
   12ea0:	bx	lr
   12ea4:	bx	lr
   12ea8:	bx	lr
   12eac:	ldrb	r0, [r0]
   12eb0:	b	12eb4 <main@@Base+0x1d8>
   12eb4:	bx	lr
   12eb8:	cmp	r0, #0
   12ebc:	moveq	r0, #0
   12ec0:	bxeq	lr
   12ec4:	sub	r0, r0, #4
   12ec8:	b	12e7c <main@@Base+0x1a0>
   12ecc:	vldr	s0, [r0]
   12ed0:	b	12ed4 <main@@Base+0x1f8>
   12ed4:	bx	lr

00012ed8 <flatcc_builder_default_alloc@@Base>:
   12ed8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12edc:	add	fp, sp, #24
   12ee0:	mov	r4, r1
   12ee4:	cmp	r2, #0
   12ee8:	beq	12f30 <flatcc_builder_default_alloc@@Base+0x58>
   12eec:	mov	r8, r3
   12ef0:	ldr	r0, [fp, #8]
   12ef4:	sub	r1, r0, #1
   12ef8:	cmp	r1, #6
   12efc:	bhi	12f5c <flatcc_builder_default_alloc@@Base+0x84>
   12f00:	mov	r0, #256	; 0x100
   12f04:	add	r3, pc, #0
   12f08:	ldr	pc, [r3, r1, lsl #2]
   12f0c:	andeq	r2, r1, r0, ror pc
   12f10:	andeq	r2, r1, ip, asr pc
   12f14:	andeq	r2, r1, ip, asr pc
   12f18:	andeq	r2, r1, r8, lsr #30
   12f1c:	andeq	r2, r1, r4, ror #30
   12f20:	andeq	r2, r1, ip, asr pc
   12f24:	andeq	r2, r1, ip, ror #30
   12f28:	mov	r0, #288	; 0x120
   12f2c:	b	12f70 <flatcc_builder_default_alloc@@Base+0x98>
   12f30:	ldr	r0, [r4]
   12f34:	cmp	r0, #0
   12f38:	moveq	r6, #0
   12f3c:	moveq	r0, r6
   12f40:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f44:	bl	123f4 <free@plt>
   12f48:	mov	r6, #0
   12f4c:	str	r6, [r4]
   12f50:	str	r6, [r4, #4]
   12f54:	mov	r0, r6
   12f58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f5c:	mov	r0, #32
   12f60:	b	12f70 <flatcc_builder_default_alloc@@Base+0x98>
   12f64:	mov	r0, r2
   12f68:	b	12f70 <flatcc_builder_default_alloc@@Base+0x98>
   12f6c:	mov	r0, #64	; 0x40
   12f70:	mov	r7, r0
   12f74:	lsl	r0, r0, #1
   12f78:	cmp	r7, r2
   12f7c:	bcc	12f70 <flatcc_builder_default_alloc@@Base+0x98>
   12f80:	ldr	r0, [r4, #4]
   12f84:	mov	r6, #0
   12f88:	cmp	r0, r2
   12f8c:	lsrcs	r0, r0, #1
   12f90:	cmpcs	r0, r7
   12f94:	bcs	12fcc <flatcc_builder_default_alloc@@Base+0xf4>
   12f98:	ldr	r0, [r4]
   12f9c:	mov	r1, r7
   12fa0:	bl	12418 <realloc@plt>
   12fa4:	cmp	r0, #0
   12fa8:	mvneq	r6, #0
   12fac:	moveq	r0, r6
   12fb0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fb4:	mov	r5, r0
   12fb8:	cmp	r8, #0
   12fbc:	ldrne	r1, [r4, #4]
   12fc0:	cmpne	r7, r1
   12fc4:	bhi	12fd4 <flatcc_builder_default_alloc@@Base+0xfc>
   12fc8:	stm	r4, {r5, r7}
   12fcc:	mov	r0, r6
   12fd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fd4:	add	r0, r5, r1
   12fd8:	sub	r2, r7, r1
   12fdc:	mov	r1, #0
   12fe0:	bl	12484 <memset@plt>
   12fe4:	b	12fc8 <flatcc_builder_default_alloc@@Base+0xf0>

00012fe8 <flatcc_builder_flush_vtable_cache@@Base>:
   12fe8:	push	{r4, r5, fp, lr}
   12fec:	add	fp, sp, #8
   12ff0:	mov	r4, r0
   12ff4:	ldr	r0, [r0, #116]	; 0x74
   12ff8:	cmp	r0, #0
   12ffc:	popeq	{r4, r5, fp, pc}
   13000:	ldr	r0, [r4, #92]	; 0x5c
   13004:	ldr	r2, [r4, #96]	; 0x60
   13008:	mov	r5, #0
   1300c:	mov	r1, #0
   13010:	bl	12484 <memset@plt>
   13014:	mov	r0, #16
   13018:	str	r5, [r4, #120]	; 0x78
   1301c:	str	r0, [r4, #124]	; 0x7c
   13020:	pop	{r4, r5, fp, pc}

00013024 <flatcc_builder_custom_init@@Base>:
   13024:	push	{r4, r5, r6, r7, fp, lr}
   13028:	add	fp, sp, #16
   1302c:	mov	r5, r3
   13030:	mov	r6, r2
   13034:	mov	r7, r1
   13038:	mov	r4, r0
   1303c:	mov	r1, #0
   13040:	mov	r2, #232	; 0xe8
   13044:	bl	12484 <memset@plt>
   13048:	ldr	r0, [fp, #8]
   1304c:	cmp	r7, #0
   13050:	bne	13068 <flatcc_builder_custom_init@@Base+0x44>
   13054:	mov	r1, #1
   13058:	str	r1, [r4, #184]	; 0xb8
   1305c:	add	r6, r4, #188	; 0xbc
   13060:	movw	r7, #25596	; 0x63fc
   13064:	movt	r7, #1
   13068:	movw	r1, #11992	; 0x2ed8
   1306c:	movt	r1, #1
   13070:	cmp	r5, #0
   13074:	movne	r1, r5
   13078:	str	r6, [r4, #36]	; 0x24
   1307c:	str	r0, [r4, #40]	; 0x28
   13080:	str	r7, [r4, #44]	; 0x2c
   13084:	str	r1, [r4, #48]	; 0x30
   13088:	mov	r0, #0
   1308c:	pop	{r4, r5, r6, r7, fp, pc}

00013090 <flatcc_builder_init@@Base>:
   13090:	push	{fp, lr}
   13094:	mov	fp, sp
   13098:	sub	sp, sp, #8
   1309c:	mov	r1, #0
   130a0:	str	r1, [sp]
   130a4:	mov	r1, #0
   130a8:	mov	r2, #0
   130ac:	mov	r3, #0
   130b0:	bl	13024 <flatcc_builder_custom_init@@Base>
   130b4:	mov	r0, #0
   130b8:	mov	sp, fp
   130bc:	pop	{fp, pc}

000130c0 <flatcc_builder_custom_reset@@Base>:
   130c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130c4:	add	fp, sp, #24
   130c8:	sub	sp, sp, #8
   130cc:	mov	r9, r2
   130d0:	mov	r8, r1
   130d4:	mov	r4, r0
   130d8:	add	r7, r0, #52	; 0x34
   130dc:	mov	r5, #0
   130e0:	ldr	r0, [r7]
   130e4:	cmp	r0, #0
   130e8:	beq	1312c <flatcc_builder_custom_reset@@Base+0x6c>
   130ec:	cmp	r9, #0
   130f0:	cmpne	r5, #5
   130f4:	beq	1311c <flatcc_builder_custom_reset@@Base+0x5c>
   130f8:	ldr	r0, [r4, #40]	; 0x28
   130fc:	ldr	r6, [r4, #48]	; 0x30
   13100:	str	r5, [sp]
   13104:	mov	r1, r7
   13108:	mov	r2, #1
   1310c:	mov	r3, #1
   13110:	blx	r6
   13114:	cmp	r0, #0
   13118:	bne	131cc <flatcc_builder_custom_reset@@Base+0x10c>
   1311c:	ldm	r7, {r0, r2}
   13120:	mov	r1, #0
   13124:	bl	12484 <memset@plt>
   13128:	b	13138 <flatcc_builder_custom_reset@@Base+0x78>
   1312c:	ldr	r0, [r7, #4]
   13130:	cmp	r0, #0
   13134:	bne	131dc <flatcc_builder_custom_reset@@Base+0x11c>
   13138:	add	r7, r7, #8
   1313c:	add	r5, r5, #1
   13140:	cmp	r5, #8
   13144:	bcc	130e0 <flatcc_builder_custom_reset@@Base+0x20>
   13148:	mov	r0, #0
   1314c:	str	r0, [r4, #120]	; 0x78
   13150:	ldr	r1, [r4, #124]	; 0x7c
   13154:	cmp	r1, #0
   13158:	movne	r1, #16
   1315c:	strne	r1, [r4, #124]	; 0x7c
   13160:	vmov.i32	q8, #0	; 0x00000000
   13164:	strh	r0, [r4, #128]	; 0x80
   13168:	str	r0, [r4, #136]	; 0x88
   1316c:	str	r0, [r4, #140]	; 0x8c
   13170:	str	r0, [r4, #32]
   13174:	add	r1, r4, #148	; 0x94
   13178:	vst1.32	{d16-d17}, [r1]
   1317c:	ldr	r1, [r4, #52]	; 0x34
   13180:	ldr	r2, [r4, #60]	; 0x3c
   13184:	ldr	r3, [r4, #76]	; 0x4c
   13188:	str	r2, [r4, #16]
   1318c:	str	r0, [r4, #20]
   13190:	str	r0, [r4, #24]
   13194:	str	r3, [r4]
   13198:	str	r1, [r4, #4]
   1319c:	cmp	r8, #0
   131a0:	movne	r0, #0
   131a4:	strne	r0, [r4, #172]	; 0xac
   131a8:	strne	r0, [r4, #176]	; 0xb0
   131ac:	strne	r0, [r4, #180]	; 0xb4
   131b0:	ldr	r0, [r4, #184]	; 0xb8
   131b4:	mov	r5, #0
   131b8:	cmp	r0, #0
   131bc:	beq	131d0 <flatcc_builder_custom_reset@@Base+0x110>
   131c0:	add	r0, r4, #188	; 0xbc
   131c4:	bl	162dc <flatcc_emitter_reset@@Base>
   131c8:	b	131d0 <flatcc_builder_custom_reset@@Base+0x110>
   131cc:	mvn	r5, #0
   131d0:	mov	r0, r5
   131d4:	sub	sp, fp, #24
   131d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131dc:	movw	r0, #28672	; 0x7000
   131e0:	movt	r0, #1
   131e4:	movw	r1, #28690	; 0x7012
   131e8:	movt	r1, #1
   131ec:	movw	r3, #28760	; 0x7058
   131f0:	movt	r3, #1
   131f4:	movw	r2, #434	; 0x1b2
   131f8:	bl	124b4 <__assert_fail@plt>

000131fc <flatcc_builder_reset@@Base>:
   131fc:	mov	r1, #0
   13200:	mov	r2, #0
   13204:	b	130c0 <flatcc_builder_custom_reset@@Base>

00013208 <flatcc_builder_clear@@Base>:
   13208:	push	{r4, r5, r6, r7, fp, lr}
   1320c:	add	fp, sp, #16
   13210:	sub	sp, sp, #8
   13214:	mov	r7, r0
   13218:	add	r5, r0, #52	; 0x34
   1321c:	mov	r6, #0
   13220:	ldr	r0, [r7, #40]	; 0x28
   13224:	ldr	r4, [r7, #48]	; 0x30
   13228:	str	r6, [sp]
   1322c:	mov	r1, r5
   13230:	mov	r2, #0
   13234:	mov	r3, #0
   13238:	blx	r4
   1323c:	add	r5, r5, #8
   13240:	add	r6, r6, #1
   13244:	cmp	r6, #8
   13248:	bne	13220 <flatcc_builder_clear@@Base+0x18>
   1324c:	ldr	r0, [r7, #184]	; 0xb8
   13250:	cmp	r0, #0
   13254:	beq	13260 <flatcc_builder_clear@@Base+0x58>
   13258:	add	r0, r7, #188	; 0xbc
   1325c:	bl	16398 <flatcc_emitter_clear@@Base>
   13260:	mov	r0, r7
   13264:	mov	r1, #0
   13268:	mov	r2, #232	; 0xe8
   1326c:	sub	sp, fp, #16
   13270:	pop	{r4, r5, r6, r7, fp, lr}
   13274:	b	12484 <memset@plt>

00013278 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13278:	push	{r4, r5, r6, r7, fp, lr}
   1327c:	add	fp, sp, #16
   13280:	sub	sp, sp, #8
   13284:	mov	r4, r0
   13288:	ldr	r2, [r0, #228]	; 0xe4
   1328c:	mov	r7, #0
   13290:	str	r7, [sp]
   13294:	add	r0, r1, #7
   13298:	bic	r5, r0, #3
   1329c:	mov	r0, r4
   132a0:	mov	r1, #7
   132a4:	mov	r3, r5
   132a8:	bl	132f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   132ac:	cmp	r0, #0
   132b0:	beq	132e4 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   132b4:	mov	r6, r0
   132b8:	mov	r1, #0
   132bc:	mov	r2, r5
   132c0:	bl	12484 <memset@plt>
   132c4:	ldr	r0, [r4, #224]	; 0xe0
   132c8:	str	r0, [r6], #4
   132cc:	ldr	r0, [r4, #228]	; 0xe4
   132d0:	add	r1, r0, #4
   132d4:	add	r0, r0, r5
   132d8:	str	r1, [r4, #224]	; 0xe0
   132dc:	str	r0, [r4, #228]	; 0xe4
   132e0:	mov	r7, r6
   132e4:	mov	r0, r7
   132e8:	sub	sp, fp, #16
   132ec:	pop	{r4, r5, r6, r7, fp, pc}
   132f0:	push	{r4, r5, fp, lr}
   132f4:	add	fp, sp, #8
   132f8:	sub	sp, sp, #8
   132fc:	mov	r4, r2
   13300:	add	r2, r3, r2
   13304:	add	r3, r0, r1, lsl #3
   13308:	add	r5, r3, #52	; 0x34
   1330c:	ldr	r3, [r3, #56]	; 0x38
   13310:	cmp	r2, r3
   13314:	bls	1333c <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13318:	ldr	r3, [fp, #8]
   1331c:	ldr	ip, [r0, #40]	; 0x28
   13320:	ldr	lr, [r0, #48]	; 0x30
   13324:	str	r1, [sp]
   13328:	mov	r0, ip
   1332c:	mov	r1, r5
   13330:	blx	lr
   13334:	cmp	r0, #0
   13338:	bne	1334c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   1333c:	ldr	r0, [r5]
   13340:	add	r0, r0, r4
   13344:	sub	sp, fp, #8
   13348:	pop	{r4, r5, fp, pc}
   1334c:	movw	r0, #33208	; 0x81b8
   13350:	movt	r0, #1
   13354:	movw	r1, #28690	; 0x7012
   13358:	movt	r1, #1
   1335c:	movw	r3, #32754	; 0x7ff2
   13360:	movt	r3, #1
   13364:	mov	r2, #308	; 0x134
   13368:	bl	124b4 <__assert_fail@plt>

0001336c <flatcc_builder_enter_user_frame@@Base>:
   1336c:	push	{r4, r5, r6, r7, fp, lr}
   13370:	add	fp, sp, #16
   13374:	sub	sp, sp, #8
   13378:	mov	r4, r0
   1337c:	ldr	r2, [r0, #228]	; 0xe4
   13380:	mov	r6, #0
   13384:	str	r6, [sp]
   13388:	add	r0, r1, #7
   1338c:	bic	r5, r0, #3
   13390:	mov	r0, r4
   13394:	mov	r1, #7
   13398:	mov	r3, r5
   1339c:	bl	132f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   133a0:	cmp	r0, #0
   133a4:	beq	133d4 <flatcc_builder_enter_user_frame@@Base+0x68>
   133a8:	mov	r7, r0
   133ac:	mov	r1, #0
   133b0:	mov	r2, r5
   133b4:	bl	12484 <memset@plt>
   133b8:	ldr	r0, [r4, #224]	; 0xe0
   133bc:	str	r0, [r7]
   133c0:	ldr	r0, [r4, #228]	; 0xe4
   133c4:	add	r6, r0, #4
   133c8:	add	r0, r0, r5
   133cc:	str	r6, [r4, #224]	; 0xe0
   133d0:	str	r0, [r4, #228]	; 0xe4
   133d4:	mov	r0, r6
   133d8:	sub	sp, fp, #16
   133dc:	pop	{r4, r5, r6, r7, fp, pc}

000133e0 <flatcc_builder_exit_user_frame@@Base>:
   133e0:	ldr	r1, [r0, #224]	; 0xe0
   133e4:	cmp	r1, #0
   133e8:	subne	r2, r1, #4
   133ec:	strne	r2, [r0, #228]	; 0xe4
   133f0:	ldrne	r2, [r0, #108]	; 0x6c
   133f4:	addne	r1, r2, r1
   133f8:	ldrne	r1, [r1, #-4]
   133fc:	strne	r1, [r0, #224]	; 0xe0
   13400:	movne	r0, r1
   13404:	bxne	lr
   13408:	push	{fp, lr}
   1340c:	mov	fp, sp
   13410:	movw	r0, #28822	; 0x7096
   13414:	movt	r0, #1
   13418:	movw	r1, #28690	; 0x7012
   1341c:	movt	r1, #1
   13420:	movw	r3, #28847	; 0x70af
   13424:	movt	r3, #1
   13428:	movw	r2, #542	; 0x21e
   1342c:	bl	124b4 <__assert_fail@plt>

00013430 <flatcc_builder_exit_user_frame_at@@Base>:
   13430:	ldr	r2, [r0, #224]	; 0xe0
   13434:	cmp	r2, r1
   13438:	bcc	13444 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   1343c:	str	r1, [r0, #224]	; 0xe0
   13440:	b	133e0 <flatcc_builder_exit_user_frame@@Base>
   13444:	push	{fp, lr}
   13448:	mov	fp, sp
   1344c:	movw	r0, #28905	; 0x70e9
   13450:	movt	r0, #1
   13454:	movw	r1, #28690	; 0x7012
   13458:	movt	r1, #1
   1345c:	movw	r3, #28936	; 0x7108
   13460:	movt	r3, #1
   13464:	movw	r2, #551	; 0x227
   13468:	bl	124b4 <__assert_fail@plt>

0001346c <flatcc_builder_get_current_user_frame@@Base>:
   1346c:	ldr	r0, [r0, #224]	; 0xe0
   13470:	bx	lr

00013474 <flatcc_builder_get_user_frame_ptr@@Base>:
   13474:	ldr	r0, [r0, #108]	; 0x6c
   13478:	add	r0, r0, r1
   1347c:	bx	lr

00013480 <flatcc_builder_embed_buffer@@Base>:
   13480:	push	{r4, r5, r6, r7, fp, lr}
   13484:	add	fp, sp, #16
   13488:	sub	sp, sp, #80	; 0x50
   1348c:	mov	r5, r3
   13490:	mov	r6, r2
   13494:	mov	r2, r1
   13498:	mov	r4, r0
   1349c:	ldr	r0, [fp, #8]
   134a0:	strh	r0, [fp, #-18]	; 0xffffffee
   134a4:	ldr	r3, [r4, #152]	; 0x98
   134a8:	cmp	r3, #0
   134ac:	movwne	r3, #1
   134b0:	sub	r1, fp, #18
   134b4:	mov	r0, r4
   134b8:	bl	1358c <flatcc_builder_embed_buffer@@Base+0x10c>
   134bc:	ldr	r0, [fp, #12]
   134c0:	and	r0, r0, #2
   134c4:	add	r1, r5, r0, lsl #1
   134c8:	ldrh	r2, [fp, #-18]	; 0xffffffee
   134cc:	mov	r0, r4
   134d0:	bl	13648 <flatcc_builder_embed_buffer@@Base+0x1c8>
   134d4:	mov	r7, r0
   134d8:	add	r0, r0, r5
   134dc:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   134e0:	mov	r1, #0
   134e4:	str	r1, [sp]
   134e8:	str	r0, [fp, #-24]	; 0xffffffe8
   134ec:	str	r1, [sp, #4]
   134f0:	ldr	r0, [r4, #152]	; 0x98
   134f4:	cmp	r0, #0
   134f8:	beq	13518 <flatcc_builder_embed_buffer@@Base+0x98>
   134fc:	sub	r0, fp, #24
   13500:	str	r0, [sp, #8]
   13504:	mov	r0, #4
   13508:	str	r0, [sp]
   1350c:	str	r0, [sp, #12]
   13510:	mov	r0, #1
   13514:	str	r0, [sp, #4]
   13518:	cmp	r5, #0
   1351c:	beq	13544 <flatcc_builder_embed_buffer@@Base+0xc4>
   13520:	ldm	sp, {r0, r1}
   13524:	add	r0, r0, r5
   13528:	str	r0, [sp]
   1352c:	mov	r0, sp
   13530:	add	r0, r0, r1, lsl #3
   13534:	str	r6, [r0, #8]
   13538:	str	r5, [r0, #12]
   1353c:	add	r0, r1, #1
   13540:	str	r0, [sp, #4]
   13544:	cmp	r7, #0
   13548:	beq	13578 <flatcc_builder_embed_buffer@@Base+0xf8>
   1354c:	ldm	sp, {r0, r1}
   13550:	add	r0, r0, r7
   13554:	str	r0, [sp]
   13558:	mov	r0, sp
   1355c:	add	r0, r0, r1, lsl #3
   13560:	movw	r2, #28160	; 0x6e00
   13564:	movt	r2, #1
   13568:	str	r2, [r0, #8]
   1356c:	str	r7, [r0, #12]
   13570:	add	r0, r1, #1
   13574:	str	r0, [sp, #4]
   13578:	mov	r1, sp
   1357c:	mov	r0, r4
   13580:	bl	13660 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13584:	sub	sp, fp, #16
   13588:	pop	{r4, r5, r6, r7, fp, pc}
   1358c:	push	{r4, r5, r6, r7, fp, lr}
   13590:	add	fp, sp, #16
   13594:	sub	sp, sp, #72	; 0x48
   13598:	mov	r6, r3
   1359c:	mov	r5, r2
   135a0:	mov	r7, r1
   135a4:	mov	r4, r0
   135a8:	cmp	r2, #0
   135ac:	bne	135bc <flatcc_builder_embed_buffer@@Base+0x13c>
   135b0:	ldrh	r5, [r4, #132]	; 0x84
   135b4:	cmp	r5, #0
   135b8:	movweq	r5, #1
   135bc:	mov	r0, r7
   135c0:	mov	r1, #4
   135c4:	bl	14434 <flatcc_builder_start_vector@@Base+0x80>
   135c8:	mov	r0, r7
   135cc:	mov	r1, r5
   135d0:	bl	14434 <flatcc_builder_start_vector@@Base+0x80>
   135d4:	cmp	r6, #0
   135d8:	bne	13620 <flatcc_builder_embed_buffer@@Base+0x1a0>
   135dc:	mov	r0, r4
   135e0:	mov	r1, r5
   135e4:	bl	16130 <flatcc_builder_get_emit_context@@Base+0x8>
   135e8:	cmp	r0, #0
   135ec:	beq	13620 <flatcc_builder_embed_buffer@@Base+0x1a0>
   135f0:	movw	r1, #28160	; 0x6e00
   135f4:	movt	r1, #1
   135f8:	str	r1, [sp, #8]
   135fc:	str	r0, [sp]
   13600:	str	r0, [sp, #12]
   13604:	mov	r0, #1
   13608:	str	r0, [sp, #4]
   1360c:	mov	r1, sp
   13610:	mov	r0, r4
   13614:	bl	147c0 <flatcc_builder_create_vtable@@Base+0x80>
   13618:	cmp	r0, #0
   1361c:	beq	13628 <flatcc_builder_embed_buffer@@Base+0x1a8>
   13620:	sub	sp, fp, #16
   13624:	pop	{r4, r5, r6, r7, fp, pc}
   13628:	movw	r0, #33208	; 0x81b8
   1362c:	movt	r0, #1
   13630:	movw	r1, #28690	; 0x7012
   13634:	movt	r1, #1
   13638:	movw	r3, #32821	; 0x8035
   1363c:	movt	r3, #1
   13640:	movw	r2, #702	; 0x2be
   13644:	bl	124b4 <__assert_fail@plt>
   13648:	ldr	r0, [r0, #136]	; 0x88
   1364c:	sub	r0, r0, r1
   13650:	sub	r1, r2, #1
   13654:	and	r0, r0, r1
   13658:	bx	lr
   1365c:	bx	lr
   13660:	push	{r4, r5, fp, lr}
   13664:	add	fp, sp, #8
   13668:	sub	sp, sp, #8
   1366c:	ldr	r3, [r1]
   13670:	cmp	r3, #0
   13674:	ble	136d4 <flatcc_builder_embed_buffer@@Base+0x254>
   13678:	mov	r4, r0
   1367c:	ldr	r0, [r0, #136]	; 0x88
   13680:	sub	r5, r0, r3
   13684:	ldr	r2, [r1, #4]
   13688:	ldr	r0, [r4, #36]	; 0x24
   1368c:	ldr	ip, [r4, #44]	; 0x2c
   13690:	str	r3, [sp]
   13694:	add	r1, r1, #8
   13698:	mov	r3, r5
   1369c:	blx	ip
   136a0:	cmp	r0, #0
   136a4:	streq	r5, [r4, #136]	; 0x88
   136a8:	moveq	r0, r5
   136ac:	subeq	sp, fp, #8
   136b0:	popeq	{r4, r5, fp, pc}
   136b4:	movw	r0, #33208	; 0x81b8
   136b8:	movt	r0, #1
   136bc:	movw	r1, #28690	; 0x7012
   136c0:	movt	r1, #1
   136c4:	movw	r3, #32887	; 0x8077
   136c8:	movt	r3, #1
   136cc:	movw	r2, #651	; 0x28b
   136d0:	bl	124b4 <__assert_fail@plt>
   136d4:	movw	r0, #33208	; 0x81b8
   136d8:	movt	r0, #1
   136dc:	movw	r1, #28690	; 0x7012
   136e0:	movt	r1, #1
   136e4:	movw	r3, #32887	; 0x8077
   136e8:	movt	r3, #1
   136ec:	movw	r2, #647	; 0x287
   136f0:	bl	124b4 <__assert_fail@plt>

000136f4 <flatcc_builder_create_buffer@@Base>:
   136f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136f8:	add	fp, sp, #28
   136fc:	sub	sp, sp, #92	; 0x5c
   13700:	mov	r6, r3
   13704:	mov	r7, r1
   13708:	mov	r4, r0
   1370c:	ldr	r0, [fp, #8]
   13710:	strh	r0, [fp, #-30]	; 0xffffffe2
   13714:	mov	r0, #0
   13718:	str	r0, [sp, #4]
   1371c:	ldr	sl, [fp, #12]
   13720:	and	r9, sl, #1
   13724:	sub	r1, fp, #30
   13728:	mov	r0, r4
   1372c:	mov	r3, r9
   13730:	bl	1358c <flatcc_builder_embed_buffer@@Base+0x10c>
   13734:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   13738:	mov	r0, r4
   1373c:	mov	r1, r5
   13740:	bl	138c4 <flatcc_builder_create_buffer@@Base+0x1d0>
   13744:	cmp	r7, #0
   13748:	str	r6, [sp]
   1374c:	beq	13768 <flatcc_builder_create_buffer@@Base+0x74>
   13750:	ldr	r7, [r7]
   13754:	mov	r0, r7
   13758:	bl	138d4 <flatcc_builder_create_buffer@@Base+0x1e0>
   1375c:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   13760:	str	r7, [sp, #4]
   13764:	b	1376c <flatcc_builder_create_buffer@@Base+0x78>
   13768:	ldr	r7, [sp, #4]
   1376c:	mov	r8, #4
   13770:	and	r0, r8, sl, lsl #1
   13774:	cmp	r7, #0
   13778:	mov	r6, r7
   1377c:	movwne	r6, #1
   13780:	add	r0, r0, r6, lsl #2
   13784:	add	r1, r0, #4
   13788:	mov	r0, r4
   1378c:	mov	r2, r5
   13790:	bl	13648 <flatcc_builder_embed_buffer@@Base+0x1c8>
   13794:	mov	r1, #0
   13798:	str	r1, [sp, #8]
   1379c:	str	r1, [sp, #12]
   137a0:	ands	ip, sl, #3
   137a4:	beq	137c0 <flatcc_builder_create_buffer@@Base+0xcc>
   137a8:	sub	r1, fp, #40	; 0x28
   137ac:	str	r1, [sp, #16]
   137b0:	str	r8, [sp, #8]
   137b4:	str	r8, [sp, #20]
   137b8:	mov	r1, #1
   137bc:	str	r1, [sp, #12]
   137c0:	ldr	r1, [sp, #8]
   137c4:	ldr	r3, [sp, #12]
   137c8:	add	r5, r1, #4
   137cc:	str	r5, [sp, #8]
   137d0:	add	lr, sp, #8
   137d4:	add	r1, lr, r3, lsl #3
   137d8:	sub	r2, fp, #36	; 0x24
   137dc:	str	r2, [r1, #8]
   137e0:	str	r8, [r1, #12]
   137e4:	add	r1, r3, #1
   137e8:	str	r1, [sp, #12]
   137ec:	cmp	r7, #0
   137f0:	beq	13818 <flatcc_builder_create_buffer@@Base+0x124>
   137f4:	lsl	r2, r6, #2
   137f8:	add	r5, r5, r2
   137fc:	str	r5, [sp, #8]
   13800:	add	r1, lr, r1, lsl #3
   13804:	add	r5, sp, #4
   13808:	str	r5, [r1, #8]
   1380c:	str	r2, [r1, #12]
   13810:	add	r1, r3, #2
   13814:	str	r1, [sp, #12]
   13818:	cmp	r0, #0
   1381c:	beq	1384c <flatcc_builder_create_buffer@@Base+0x158>
   13820:	ldr	r1, [sp, #8]
   13824:	ldr	r2, [sp, #12]
   13828:	add	r1, r1, r0
   1382c:	str	r1, [sp, #8]
   13830:	add	r1, lr, r2, lsl #3
   13834:	movw	r3, #28160	; 0x6e00
   13838:	movt	r3, #1
   1383c:	str	r3, [r1, #8]
   13840:	str	r0, [r1, #12]
   13844:	add	r0, r2, #1
   13848:	str	r0, [sp, #12]
   1384c:	ldr	r0, [r4, #136]	; 0x88
   13850:	ldr	r1, [sp, #8]
   13854:	sub	r5, r0, r1
   13858:	cmp	ip, #0
   1385c:	addne	r5, r5, #4
   13860:	mov	r0, #144	; 0x90
   13864:	cmp	r9, #0
   13868:	movweq	r0, #140	; 0x8c
   1386c:	ldr	r0, [r4, r0]
   13870:	sub	r0, r0, r5
   13874:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   13878:	str	r0, [fp, #-40]	; 0xffffffd8
   1387c:	ldr	r0, [sp]
   13880:	sub	r0, r0, r5
   13884:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   13888:	str	r0, [fp, #-36]	; 0xffffffdc
   1388c:	add	r1, sp, #8
   13890:	mov	r0, r4
   13894:	bl	13660 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13898:	cmp	r0, #0
   1389c:	subne	sp, fp, #28
   138a0:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a4:	movw	r0, #33208	; 0x81b8
   138a8:	movt	r0, #1
   138ac:	movw	r1, #28690	; 0x7012
   138b0:	movt	r1, #1
   138b4:	movw	r3, #29005	; 0x714d
   138b8:	movt	r3, #1
   138bc:	mov	r2, #772	; 0x304
   138c0:	bl	124b4 <__assert_fail@plt>
   138c4:	ldrh	r2, [r0, #128]	; 0x80
   138c8:	cmp	r2, r1
   138cc:	strhcc	r1, [r0, #128]	; 0x80
   138d0:	bx	lr
   138d4:	bx	lr

000138d8 <flatcc_builder_create_struct@@Base>:
   138d8:	push	{r4, r5, r6, r7, fp, lr}
   138dc:	add	fp, sp, #16
   138e0:	sub	sp, sp, #72	; 0x48
   138e4:	cmp	r3, #0
   138e8:	beq	13980 <flatcc_builder_create_struct@@Base+0xa8>
   138ec:	mov	r7, r3
   138f0:	mov	r5, r2
   138f4:	mov	r6, r1
   138f8:	mov	r4, r0
   138fc:	mov	r1, r3
   13900:	bl	138c4 <flatcc_builder_create_buffer@@Base+0x1d0>
   13904:	mov	r0, r4
   13908:	mov	r1, r5
   1390c:	mov	r2, r7
   13910:	bl	13648 <flatcc_builder_embed_buffer@@Base+0x1c8>
   13914:	mov	r1, #0
   13918:	str	r1, [sp]
   1391c:	str	r1, [sp, #4]
   13920:	cmp	r5, #0
   13924:	strne	r6, [sp, #8]
   13928:	strne	r5, [sp]
   1392c:	strne	r5, [sp, #12]
   13930:	movne	r1, #1
   13934:	strne	r1, [sp, #4]
   13938:	cmp	r0, #0
   1393c:	beq	1396c <flatcc_builder_create_struct@@Base+0x94>
   13940:	ldm	sp, {r1, r2}
   13944:	add	r1, r1, r0
   13948:	str	r1, [sp]
   1394c:	mov	r1, sp
   13950:	add	r1, r1, r2, lsl #3
   13954:	movw	r3, #28160	; 0x6e00
   13958:	movt	r3, #1
   1395c:	str	r3, [r1, #8]
   13960:	str	r0, [r1, #12]
   13964:	add	r0, r2, #1
   13968:	str	r0, [sp, #4]
   1396c:	mov	r1, sp
   13970:	mov	r0, r4
   13974:	bl	13660 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13978:	sub	sp, fp, #16
   1397c:	pop	{r4, r5, r6, r7, fp, pc}
   13980:	movw	r0, #29136	; 0x71d0
   13984:	movt	r0, #1
   13988:	movw	r1, #28690	; 0x7012
   1398c:	movt	r1, #1
   13990:	movw	r3, #29147	; 0x71db
   13994:	movt	r3, #1
   13998:	movw	r2, #783	; 0x30f
   1399c:	bl	124b4 <__assert_fail@plt>

000139a0 <flatcc_builder_start_buffer@@Base>:
   139a0:	push	{r4, r5, r6, r7, fp, lr}
   139a4:	add	fp, sp, #16
   139a8:	mov	r6, r3
   139ac:	mov	r7, r2
   139b0:	mov	r5, r1
   139b4:	mov	r4, r0
   139b8:	ldrh	r1, [r0, #128]	; 0x80
   139bc:	bl	13a5c <flatcc_builder_start_buffer@@Base+0xbc>
   139c0:	mov	r1, r0
   139c4:	mvn	r0, #0
   139c8:	cmp	r1, #0
   139cc:	popne	{r4, r5, r6, r7, fp, pc}
   139d0:	mov	r0, #1
   139d4:	strh	r0, [r4, #128]	; 0x80
   139d8:	ldrh	r1, [r4, #132]	; 0x84
   139dc:	ldr	r2, [r4, #32]
   139e0:	strh	r1, [r2, #34]	; 0x22
   139e4:	strh	r7, [r4, #132]	; 0x84
   139e8:	ldrh	r1, [r4, #164]	; 0xa4
   139ec:	ldr	r2, [r4, #32]
   139f0:	strh	r1, [r2, #32]
   139f4:	strh	r6, [r4, #164]	; 0xa4
   139f8:	ldr	r1, [r4, #32]
   139fc:	ldr	r2, [r4, #144]	; 0x90
   13a00:	str	r2, [r1, #20]
   13a04:	ldr	r1, [r4, #32]
   13a08:	ldr	r2, [r4, #152]	; 0x98
   13a0c:	str	r2, [r1, #28]
   13a10:	ldr	r1, [r4, #32]
   13a14:	ldr	r2, [r4, #136]	; 0x88
   13a18:	ldr	r3, [r4, #148]	; 0x94
   13a1c:	ldr	r7, [r4, #168]	; 0xa8
   13a20:	add	r6, r3, #1
   13a24:	str	r2, [r4, #144]	; 0x90
   13a28:	str	r6, [r4, #148]	; 0x94
   13a2c:	str	r3, [r4, #152]	; 0x98
   13a30:	str	r7, [r1, #16]
   13a34:	movw	r1, #28160	; 0x6e00
   13a38:	movt	r1, #1
   13a3c:	cmp	r5, #0
   13a40:	movne	r1, r5
   13a44:	ldr	r1, [r1]
   13a48:	str	r1, [r4, #168]	; 0xa8
   13a4c:	ldr	r1, [r4, #32]
   13a50:	strh	r0, [r1, #14]
   13a54:	mov	r0, #0
   13a58:	pop	{r4, r5, r6, r7, fp, pc}
   13a5c:	push	{r4, r5, r6, sl, fp, lr}
   13a60:	add	fp, sp, #16
   13a64:	sub	sp, sp, #8
   13a68:	mov	r5, r1
   13a6c:	mov	r4, r0
   13a70:	ldr	r1, [r0, #156]	; 0x9c
   13a74:	ldr	r2, [r0, #160]	; 0xa0
   13a78:	add	r0, r1, #1
   13a7c:	str	r0, [r4, #156]	; 0x9c
   13a80:	cmp	r1, r2
   13a84:	bge	13a98 <flatcc_builder_start_buffer@@Base+0xf8>
   13a88:	ldr	r0, [r4, #32]
   13a8c:	add	r0, r0, #36	; 0x24
   13a90:	str	r0, [r4, #32]
   13a94:	b	13b0c <flatcc_builder_start_buffer@@Base+0x16c>
   13a98:	ldr	r2, [r4, #176]	; 0xb0
   13a9c:	mvn	r6, #0
   13aa0:	cmp	r2, #1
   13aa4:	cmpge	r1, r2
   13aa8:	bge	13b48 <flatcc_builder_start_buffer@@Base+0x1a8>
   13aac:	mov	r1, #0
   13ab0:	str	r1, [sp]
   13ab4:	add	r0, r0, r0, lsl #3
   13ab8:	mvn	r1, #35	; 0x23
   13abc:	add	r2, r1, r0, lsl #2
   13ac0:	mov	r0, r4
   13ac4:	mov	r1, #4
   13ac8:	mov	r3, #36	; 0x24
   13acc:	bl	132f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13ad0:	str	r0, [r4, #32]
   13ad4:	cmp	r0, #0
   13ad8:	beq	13b48 <flatcc_builder_start_buffer@@Base+0x1a8>
   13adc:	ldr	r0, [r4, #88]	; 0x58
   13ae0:	ldr	r1, [r4, #176]	; 0xb0
   13ae4:	movw	r2, #36409	; 0x8e39
   13ae8:	movt	r2, #14563	; 0x38e3
   13aec:	umull	r0, r2, r0, r2
   13af0:	lsr	r0, r2, #3
   13af4:	cmp	r1, r2, lsr #3
   13af8:	mov	r2, r0
   13afc:	movlt	r2, r1
   13b00:	cmp	r1, #0
   13b04:	movle	r2, r0
   13b08:	str	r2, [r4, #160]	; 0xa0
   13b0c:	ldr	r0, [r4, #20]
   13b10:	ldr	r1, [r4, #32]
   13b14:	str	r0, [r1, #8]
   13b18:	ldrh	r2, [r4, #130]	; 0x82
   13b1c:	strh	r2, [r1, #12]
   13b20:	strh	r5, [r4, #130]	; 0x82
   13b24:	ldr	r2, [r4, #28]
   13b28:	mvn	r3, #3
   13b2c:	stm	r1, {r2, r3}
   13b30:	mov	r6, #0
   13b34:	str	r6, [r4, #20]
   13b38:	add	r0, r0, r2
   13b3c:	add	r0, r0, #7
   13b40:	bic	r0, r0, #7
   13b44:	str	r0, [r4, #28]
   13b48:	mov	r0, r6
   13b4c:	sub	sp, fp, #16
   13b50:	pop	{r4, r5, r6, sl, fp, pc}

00013b54 <flatcc_builder_end_buffer@@Base>:
   13b54:	push	{r4, r5, r6, r7, fp, lr}
   13b58:	add	fp, sp, #16
   13b5c:	sub	sp, sp, #8
   13b60:	mov	r4, r0
   13b64:	ldr	r0, [r0, #32]
   13b68:	ldrh	r0, [r0, #14]
   13b6c:	cmp	r0, #1
   13b70:	bne	13bfc <flatcc_builder_end_buffer@@Base+0xa8>
   13b74:	mov	r5, r1
   13b78:	ldr	r6, [r4, #152]	; 0x98
   13b7c:	ldrh	r7, [r4, #164]	; 0xa4
   13b80:	ldrh	r1, [r4, #132]	; 0x84
   13b84:	mov	r0, r4
   13b88:	bl	138c4 <flatcc_builder_create_buffer@@Base+0x1d0>
   13b8c:	and	r0, r7, #2
   13b90:	cmp	r6, #0
   13b94:	orrne	r0, r0, #1
   13b98:	ldrh	r2, [r4, #132]	; 0x84
   13b9c:	ldrh	r1, [r4, #128]	; 0x80
   13ba0:	str	r1, [sp]
   13ba4:	str	r0, [sp, #4]
   13ba8:	add	r1, r4, #168	; 0xa8
   13bac:	mov	r0, r4
   13bb0:	mov	r3, r5
   13bb4:	bl	136f4 <flatcc_builder_create_buffer@@Base>
   13bb8:	mov	r5, r0
   13bbc:	cmp	r0, #0
   13bc0:	beq	13bf0 <flatcc_builder_end_buffer@@Base+0x9c>
   13bc4:	ldr	r0, [r4, #32]
   13bc8:	ldr	r1, [r0, #20]
   13bcc:	str	r1, [r4, #144]	; 0x90
   13bd0:	ldr	r1, [r0, #28]
   13bd4:	str	r1, [r4, #152]	; 0x98
   13bd8:	ldr	r1, [r0, #16]
   13bdc:	str	r1, [r4, #168]	; 0xa8
   13be0:	ldrh	r0, [r0, #32]
   13be4:	strh	r0, [r4, #164]	; 0xa4
   13be8:	mov	r0, r4
   13bec:	bl	13c1c <flatcc_builder_end_buffer@@Base+0xc8>
   13bf0:	mov	r0, r5
   13bf4:	sub	sp, fp, #16
   13bf8:	pop	{r4, r5, r6, r7, fp, pc}
   13bfc:	movw	r0, #29249	; 0x7241
   13c00:	movt	r0, #1
   13c04:	movw	r1, #28690	; 0x7012
   13c08:	movt	r1, #1
   13c0c:	movw	r3, #29293	; 0x726d
   13c10:	movt	r3, #1
   13c14:	movw	r2, #838	; 0x346
   13c18:	bl	124b4 <__assert_fail@plt>
   13c1c:	push	{r4, sl, fp, lr}
   13c20:	add	fp, sp, #8
   13c24:	mov	r4, r0
   13c28:	ldr	r0, [r0, #16]
   13c2c:	ldr	r2, [r4, #20]
   13c30:	mov	r1, #0
   13c34:	bl	12484 <memset@plt>
   13c38:	ldr	r0, [r4, #32]
   13c3c:	ldr	r1, [r0, #8]
   13c40:	str	r1, [r4, #20]
   13c44:	ldr	r1, [r0]
   13c48:	str	r1, [r4, #28]
   13c4c:	ldr	r1, [r0, #4]
   13c50:	mov	r0, r4
   13c54:	bl	13cd4 <flatcc_builder_start_struct@@Base+0x4c>
   13c58:	ldrh	r1, [r4, #130]	; 0x82
   13c5c:	mov	r0, r4
   13c60:	bl	138c4 <flatcc_builder_create_buffer@@Base+0x1d0>
   13c64:	ldr	r0, [r4, #32]
   13c68:	ldr	r1, [r4, #156]	; 0x9c
   13c6c:	ldrh	r2, [r0, #12]
   13c70:	sub	r0, r0, #36	; 0x24
   13c74:	str	r0, [r4, #32]
   13c78:	sub	r0, r1, #1
   13c7c:	str	r0, [r4, #156]	; 0x9c
   13c80:	strh	r2, [r4, #130]	; 0x82
   13c84:	pop	{r4, sl, fp, pc}

00013c88 <flatcc_builder_start_struct@@Base>:
   13c88:	push	{r4, r5, fp, lr}
   13c8c:	add	fp, sp, #8
   13c90:	mov	r4, r1
   13c94:	mov	r5, r0
   13c98:	mov	r1, r2
   13c9c:	bl	13a5c <flatcc_builder_start_buffer@@Base+0xbc>
   13ca0:	cmp	r0, #0
   13ca4:	movne	r0, #0
   13ca8:	popne	{r4, r5, fp, pc}
   13cac:	ldr	r0, [r5, #32]
   13cb0:	mov	r1, #2
   13cb4:	strh	r1, [r0, #14]
   13cb8:	mov	r0, r5
   13cbc:	mvn	r1, #3
   13cc0:	bl	13cd4 <flatcc_builder_start_struct@@Base+0x4c>
   13cc4:	mov	r0, r5
   13cc8:	mov	r1, r4
   13ccc:	pop	{r4, r5, fp, lr}
   13cd0:	b	13d0c <flatcc_builder_start_struct@@Base+0x84>
   13cd4:	push	{fp, lr}
   13cd8:	mov	fp, sp
   13cdc:	ldr	r2, [r0, #28]
   13ce0:	ldr	ip, [r0, #32]
   13ce4:	ldr	r3, [r0, #60]	; 0x3c
   13ce8:	ldr	lr, [r0, #64]	; 0x40
   13cec:	add	r3, r3, r2
   13cf0:	str	r3, [r0, #16]
   13cf4:	sub	r2, lr, r2
   13cf8:	cmp	r2, r1
   13cfc:	movhi	r2, r1
   13d00:	str	r2, [r0, #24]
   13d04:	str	r1, [ip, #4]
   13d08:	pop	{fp, pc}
   13d0c:	push	{r4, r5, fp, lr}
   13d10:	add	fp, sp, #8
   13d14:	mov	r4, r0
   13d18:	ldr	r5, [r0, #20]
   13d1c:	ldr	r2, [r0, #24]
   13d20:	add	r0, r5, r1
   13d24:	str	r0, [r4, #20]
   13d28:	cmp	r0, r2
   13d2c:	bcc	13d50 <flatcc_builder_start_struct@@Base+0xc8>
   13d30:	add	r1, r0, #1
   13d34:	mov	r0, r4
   13d38:	mvn	r2, #3
   13d3c:	bl	16140 <flatcc_builder_get_emit_context@@Base+0x18>
   13d40:	mov	r1, r0
   13d44:	mov	r0, #0
   13d48:	cmp	r1, #0
   13d4c:	popne	{r4, r5, fp, pc}
   13d50:	ldr	r0, [r4, #16]
   13d54:	add	r0, r0, r5
   13d58:	pop	{r4, r5, fp, pc}

00013d5c <flatcc_builder_struct_edit@@Base>:
   13d5c:	ldr	r0, [r0, #16]
   13d60:	bx	lr

00013d64 <flatcc_builder_end_struct@@Base>:
   13d64:	push	{r4, r5, fp, lr}
   13d68:	add	fp, sp, #8
   13d6c:	mov	r4, r0
   13d70:	ldr	r0, [r0, #32]
   13d74:	ldrh	r0, [r0, #14]
   13d78:	cmp	r0, #2
   13d7c:	bne	13dac <flatcc_builder_end_struct@@Base+0x48>
   13d80:	ldrh	r3, [r4, #130]	; 0x82
   13d84:	ldr	r1, [r4, #16]
   13d88:	ldr	r2, [r4, #20]
   13d8c:	mov	r0, r4
   13d90:	bl	138d8 <flatcc_builder_create_struct@@Base>
   13d94:	mov	r5, r0
   13d98:	cmp	r0, #0
   13d9c:	movne	r0, r4
   13da0:	blne	13c1c <flatcc_builder_end_buffer@@Base+0xc8>
   13da4:	mov	r0, r5
   13da8:	pop	{r4, r5, fp, pc}
   13dac:	movw	r0, #29382	; 0x72c6
   13db0:	movt	r0, #1
   13db4:	movw	r1, #28690	; 0x7012
   13db8:	movt	r1, #1
   13dbc:	movw	r3, #29426	; 0x72f2
   13dc0:	movt	r3, #1
   13dc4:	mov	r2, #872	; 0x368
   13dc8:	bl	124b4 <__assert_fail@plt>

00013dcc <flatcc_builder_extend_vector@@Base>:
   13dcc:	push	{r4, r5, fp, lr}
   13dd0:	add	fp, sp, #8
   13dd4:	mov	r5, r1
   13dd8:	mov	r4, r0
   13ddc:	ldr	r0, [r0, #32]
   13de0:	ldr	r2, [r0, #24]
   13de4:	mov	r0, r4
   13de8:	bl	13e10 <flatcc_builder_extend_vector@@Base+0x44>
   13dec:	cmp	r0, #0
   13df0:	movne	r0, #0
   13df4:	popne	{r4, r5, fp, pc}
   13df8:	ldr	r0, [r4, #32]
   13dfc:	ldr	r0, [r0, #16]
   13e00:	mul	r1, r0, r5
   13e04:	mov	r0, r4
   13e08:	pop	{r4, r5, fp, lr}
   13e0c:	b	13d0c <flatcc_builder_start_struct@@Base+0x84>
   13e10:	ldr	r0, [r0, #32]
   13e14:	ldr	r3, [r0, #20]
   13e18:	adds	r1, r3, r1
   13e1c:	bcs	13e30 <flatcc_builder_extend_vector@@Base+0x64>
   13e20:	cmp	r1, r2
   13e24:	strls	r1, [r0, #20]
   13e28:	movls	r0, #0
   13e2c:	bxls	lr
   13e30:	push	{fp, lr}
   13e34:	mov	fp, sp
   13e38:	movw	r0, #32961	; 0x80c1
   13e3c:	movt	r0, #1
   13e40:	movw	r1, #28690	; 0x7012
   13e44:	movt	r1, #1
   13e48:	movw	r3, #32988	; 0x80dc
   13e4c:	movt	r3, #1
   13e50:	mov	r2, #892	; 0x37c
   13e54:	bl	124b4 <__assert_fail@plt>

00013e58 <flatcc_builder_vector_push@@Base>:
   13e58:	push	{fp, lr}
   13e5c:	mov	fp, sp
   13e60:	ldr	r2, [r0, #32]
   13e64:	ldrh	r3, [r2, #14]
   13e68:	cmp	r3, #4
   13e6c:	bne	13e98 <flatcc_builder_vector_push@@Base+0x40>
   13e70:	ldr	ip, [r2, #20]
   13e74:	ldr	r3, [r2, #24]
   13e78:	cmp	ip, r3
   13e7c:	bhi	13eb8 <flatcc_builder_vector_push@@Base+0x60>
   13e80:	add	r3, ip, #1
   13e84:	str	r3, [r2, #20]
   13e88:	ldr	r2, [r0, #32]
   13e8c:	ldr	r2, [r2, #16]
   13e90:	pop	{fp, lr}
   13e94:	b	13ed8 <flatcc_builder_vector_push@@Base+0x80>
   13e98:	movw	r0, #29493	; 0x7335
   13e9c:	movt	r0, #1
   13ea0:	movw	r1, #28690	; 0x7012
   13ea4:	movt	r1, #1
   13ea8:	movw	r3, #29537	; 0x7361
   13eac:	movt	r3, #1
   13eb0:	movw	r2, #907	; 0x38b
   13eb4:	bl	124b4 <__assert_fail@plt>
   13eb8:	movw	r0, #29604	; 0x73a4
   13ebc:	movt	r0, #1
   13ec0:	movw	r1, #28690	; 0x7012
   13ec4:	movt	r1, #1
   13ec8:	movw	r3, #29537	; 0x7361
   13ecc:	movt	r3, #1
   13ed0:	mov	r2, #908	; 0x38c
   13ed4:	bl	124b4 <__assert_fail@plt>
   13ed8:	push	{r4, r5, r6, sl, fp, lr}
   13edc:	add	fp, sp, #16
   13ee0:	mov	r4, r2
   13ee4:	mov	r5, r1
   13ee8:	mov	r1, r2
   13eec:	bl	13d0c <flatcc_builder_start_struct@@Base+0x84>
   13ef0:	mov	r6, r0
   13ef4:	cmp	r0, #0
   13ef8:	beq	13f0c <flatcc_builder_vector_push@@Base+0xb4>
   13efc:	mov	r0, r6
   13f00:	mov	r1, r5
   13f04:	mov	r2, r4
   13f08:	bl	12400 <memcpy@plt>
   13f0c:	mov	r0, r6
   13f10:	pop	{r4, r5, r6, sl, fp, pc}

00013f14 <flatcc_builder_append_vector@@Base>:
   13f14:	push	{r4, r5, r6, sl, fp, lr}
   13f18:	add	fp, sp, #16
   13f1c:	mov	r4, r1
   13f20:	mov	r6, r0
   13f24:	ldr	r0, [r0, #32]
   13f28:	ldrh	r1, [r0, #14]
   13f2c:	cmp	r1, #4
   13f30:	bne	13f70 <flatcc_builder_append_vector@@Base+0x5c>
   13f34:	mov	r5, r2
   13f38:	ldr	r2, [r0, #24]
   13f3c:	mov	r0, r6
   13f40:	mov	r1, r5
   13f44:	bl	13e10 <flatcc_builder_extend_vector@@Base+0x44>
   13f48:	cmp	r0, #0
   13f4c:	movne	r0, #0
   13f50:	popne	{r4, r5, r6, sl, fp, pc}
   13f54:	ldr	r0, [r6, #32]
   13f58:	ldr	r0, [r0, #16]
   13f5c:	mul	r2, r0, r5
   13f60:	mov	r0, r6
   13f64:	mov	r1, r4
   13f68:	pop	{r4, r5, r6, sl, fp, lr}
   13f6c:	b	13ed8 <flatcc_builder_vector_push@@Base+0x80>
   13f70:	movw	r0, #29493	; 0x7335
   13f74:	movt	r0, #1
   13f78:	movw	r1, #28690	; 0x7012
   13f7c:	movt	r1, #1
   13f80:	movw	r3, #29665	; 0x73e1
   13f84:	movt	r3, #1
   13f88:	movw	r2, #915	; 0x393
   13f8c:	bl	124b4 <__assert_fail@plt>

00013f90 <flatcc_builder_extend_offset_vector@@Base>:
   13f90:	push	{r4, r5, fp, lr}
   13f94:	add	fp, sp, #8
   13f98:	mov	r5, r1
   13f9c:	mov	r4, r0
   13fa0:	mvn	r2, #-1073741824	; 0xc0000000
   13fa4:	bl	13e10 <flatcc_builder_extend_vector@@Base+0x44>
   13fa8:	mov	r1, r0
   13fac:	mov	r0, #0
   13fb0:	cmp	r1, #0
   13fb4:	popne	{r4, r5, fp, pc}
   13fb8:	lsl	r1, r5, #2
   13fbc:	mov	r0, r4
   13fc0:	bl	13d0c <flatcc_builder_start_struct@@Base+0x84>
   13fc4:	pop	{r4, r5, fp, pc}

00013fc8 <flatcc_builder_offset_vector_push@@Base>:
   13fc8:	push	{r4, r5, fp, lr}
   13fcc:	add	fp, sp, #8
   13fd0:	mov	r4, r1
   13fd4:	ldr	r1, [r0, #32]
   13fd8:	ldrh	r2, [r1, #14]
   13fdc:	cmp	r2, #5
   13fe0:	bne	14018 <flatcc_builder_offset_vector_push@@Base+0x50>
   13fe4:	ldr	r2, [r1, #20]
   13fe8:	mov	r5, #0
   13fec:	cmn	r2, #-1073741823	; 0xc0000001
   13ff0:	beq	14010 <flatcc_builder_offset_vector_push@@Base+0x48>
   13ff4:	add	r2, r2, #1
   13ff8:	str	r2, [r1, #20]
   13ffc:	mov	r1, #4
   14000:	bl	13d0c <flatcc_builder_start_struct@@Base+0x84>
   14004:	cmp	r0, #0
   14008:	strne	r4, [r0]
   1400c:	movne	r5, r0
   14010:	mov	r0, r5
   14014:	pop	{r4, r5, fp, pc}
   14018:	movw	r0, #29742	; 0x742e
   1401c:	movt	r0, #1
   14020:	movw	r1, #28690	; 0x7012
   14024:	movt	r1, #1
   14028:	movw	r3, #29793	; 0x7461
   1402c:	movt	r3, #1
   14030:	movw	r2, #934	; 0x3a6
   14034:	bl	124b4 <__assert_fail@plt>

00014038 <flatcc_builder_append_offset_vector@@Base>:
   14038:	push	{r4, r5, r6, sl, fp, lr}
   1403c:	add	fp, sp, #16
   14040:	mov	r6, r0
   14044:	ldr	r0, [r0, #32]
   14048:	ldrh	r0, [r0, #14]
   1404c:	cmp	r0, #5
   14050:	bne	14090 <flatcc_builder_append_offset_vector@@Base+0x58>
   14054:	mov	r5, r2
   14058:	mov	r4, r1
   1405c:	mov	r0, r6
   14060:	mov	r1, r2
   14064:	mvn	r2, #-1073741824	; 0xc0000000
   14068:	bl	13e10 <flatcc_builder_extend_vector@@Base+0x44>
   1406c:	mov	r1, r0
   14070:	mov	r0, #0
   14074:	cmp	r1, #0
   14078:	popne	{r4, r5, r6, sl, fp, pc}
   1407c:	lsl	r2, r5, #2
   14080:	mov	r0, r6
   14084:	mov	r1, r4
   14088:	bl	13ed8 <flatcc_builder_vector_push@@Base+0x80>
   1408c:	pop	{r4, r5, r6, sl, fp, pc}
   14090:	movw	r0, #29742	; 0x742e
   14094:	movt	r0, #1
   14098:	movw	r1, #28690	; 0x7012
   1409c:	movt	r1, #1
   140a0:	movw	r3, #29891	; 0x74c3
   140a4:	movt	r3, #1
   140a8:	mov	r2, #948	; 0x3b4
   140ac:	bl	124b4 <__assert_fail@plt>

000140b0 <flatcc_builder_extend_string@@Base>:
   140b0:	push	{r4, r5, fp, lr}
   140b4:	add	fp, sp, #8
   140b8:	mov	r5, r0
   140bc:	ldr	r0, [r0, #32]
   140c0:	ldrh	r0, [r0, #14]
   140c4:	cmp	r0, #6
   140c8:	bne	140f8 <flatcc_builder_extend_string@@Base+0x48>
   140cc:	mov	r4, r1
   140d0:	mov	r0, r5
   140d4:	mvn	r2, #0
   140d8:	bl	13e10 <flatcc_builder_extend_vector@@Base+0x44>
   140dc:	cmp	r0, #0
   140e0:	movne	r0, #0
   140e4:	popne	{r4, r5, fp, pc}
   140e8:	mov	r0, r5
   140ec:	mov	r1, r4
   140f0:	pop	{r4, r5, fp, lr}
   140f4:	b	13d0c <flatcc_builder_start_struct@@Base+0x84>
   140f8:	movw	r0, #30007	; 0x7537
   140fc:	movt	r0, #1
   14100:	movw	r1, #28690	; 0x7012
   14104:	movt	r1, #1
   14108:	movw	r3, #30051	; 0x7563
   1410c:	movt	r3, #1
   14110:	movw	r2, #957	; 0x3bd
   14114:	bl	124b4 <__assert_fail@plt>

00014118 <flatcc_builder_append_string@@Base>:
   14118:	push	{r4, r5, r6, sl, fp, lr}
   1411c:	add	fp, sp, #16
   14120:	mov	r6, r0
   14124:	ldr	r0, [r0, #32]
   14128:	ldrh	r0, [r0, #14]
   1412c:	cmp	r0, #6
   14130:	bne	1416c <flatcc_builder_append_string@@Base+0x54>
   14134:	mov	r4, r2
   14138:	mov	r5, r1
   1413c:	mov	r0, r6
   14140:	mov	r1, r2
   14144:	mvn	r2, #0
   14148:	bl	13e10 <flatcc_builder_extend_vector@@Base+0x44>
   1414c:	cmp	r0, #0
   14150:	movne	r0, #0
   14154:	popne	{r4, r5, r6, sl, fp, pc}
   14158:	mov	r0, r6
   1415c:	mov	r1, r5
   14160:	mov	r2, r4
   14164:	pop	{r4, r5, r6, sl, fp, lr}
   14168:	b	13ed8 <flatcc_builder_vector_push@@Base+0x80>
   1416c:	movw	r0, #30007	; 0x7537
   14170:	movt	r0, #1
   14174:	movw	r1, #28690	; 0x7012
   14178:	movt	r1, #1
   1417c:	movw	r3, #30114	; 0x75a2
   14180:	movt	r3, #1
   14184:	movw	r2, #966	; 0x3c6
   14188:	bl	124b4 <__assert_fail@plt>

0001418c <flatcc_builder_append_string_str@@Base>:
   1418c:	push	{r4, r5, fp, lr}
   14190:	add	fp, sp, #8
   14194:	mov	r4, r1
   14198:	mov	r5, r0
   1419c:	mov	r0, r1
   141a0:	bl	12460 <strlen@plt>
   141a4:	mov	r2, r0
   141a8:	mov	r0, r5
   141ac:	mov	r1, r4
   141b0:	pop	{r4, r5, fp, lr}
   141b4:	b	14118 <flatcc_builder_append_string@@Base>

000141b8 <flatcc_builder_append_string_strn@@Base>:
   141b8:	push	{r4, r5, fp, lr}
   141bc:	add	fp, sp, #8
   141c0:	mov	r4, r1
   141c4:	mov	r5, r0
   141c8:	mov	r0, r1
   141cc:	mov	r1, r2
   141d0:	bl	141e8 <flatcc_builder_append_string_strn@@Base+0x30>
   141d4:	mov	r2, r0
   141d8:	mov	r0, r5
   141dc:	mov	r1, r4
   141e0:	pop	{r4, r5, fp, lr}
   141e4:	b	14118 <flatcc_builder_append_string@@Base>
   141e8:	push	{r4, r5, fp, lr}
   141ec:	add	fp, sp, #8
   141f0:	mov	r4, r1
   141f4:	mov	r5, r0
   141f8:	mov	r1, #0
   141fc:	mov	r2, r4
   14200:	bl	12490 <memchr@plt>
   14204:	cmp	r0, #0
   14208:	subne	r4, r0, r5
   1420c:	mov	r0, r4
   14210:	pop	{r4, r5, fp, pc}

00014214 <flatcc_builder_truncate_vector@@Base>:
   14214:	push	{fp, lr}
   14218:	mov	fp, sp
   1421c:	ldr	r2, [r0, #32]
   14220:	ldrh	r3, [r2, #14]
   14224:	cmp	r3, #4
   14228:	bne	14258 <flatcc_builder_truncate_vector@@Base+0x44>
   1422c:	ldr	r3, [r2, #20]
   14230:	cmp	r3, r1
   14234:	bcc	14278 <flatcc_builder_truncate_vector@@Base+0x64>
   14238:	sub	r3, r3, r1
   1423c:	str	r3, [r2, #20]
   14240:	ldr	r2, [r0, #32]
   14244:	ldr	r2, [r2, #16]
   14248:	mul	r1, r2, r1
   1424c:	bl	14298 <flatcc_builder_truncate_vector@@Base+0x84>
   14250:	mov	r0, #0
   14254:	pop	{fp, pc}
   14258:	movw	r0, #29493	; 0x7335
   1425c:	movt	r0, #1
   14260:	movw	r1, #28690	; 0x7012
   14264:	movt	r1, #1
   14268:	movw	r3, #30191	; 0x75ef
   1426c:	movt	r3, #1
   14270:	movw	r2, #985	; 0x3d9
   14274:	bl	124b4 <__assert_fail@plt>
   14278:	movw	r0, #30254	; 0x762e
   1427c:	movt	r0, #1
   14280:	movw	r1, #28690	; 0x7012
   14284:	movt	r1, #1
   14288:	movw	r3, #30191	; 0x75ef
   1428c:	movt	r3, #1
   14290:	movw	r2, #986	; 0x3da
   14294:	bl	124b4 <__assert_fail@plt>
   14298:	mov	r2, r1
   1429c:	ldr	r1, [r0, #16]
   142a0:	ldr	r3, [r0, #20]
   142a4:	sub	r3, r3, r2
   142a8:	str	r3, [r0, #20]
   142ac:	add	r0, r1, r3
   142b0:	mov	r1, #0
   142b4:	b	12484 <memset@plt>

000142b8 <flatcc_builder_truncate_offset_vector@@Base>:
   142b8:	push	{fp, lr}
   142bc:	mov	fp, sp
   142c0:	ldr	r2, [r0, #32]
   142c4:	ldrh	r3, [r2, #14]
   142c8:	cmp	r3, #5
   142cc:	bne	142fc <flatcc_builder_truncate_offset_vector@@Base+0x44>
   142d0:	ldr	r3, [r2, #20]
   142d4:	cmp	r3, r1
   142d8:	bcc	1431c <flatcc_builder_truncate_offset_vector@@Base+0x64>
   142dc:	sub	r3, r3, r1
   142e0:	str	r3, [r2, #20]
   142e4:	ldr	r2, [r0, #32]
   142e8:	ldr	r2, [r2, #16]
   142ec:	mul	r1, r2, r1
   142f0:	bl	14298 <flatcc_builder_truncate_vector@@Base+0x84>
   142f4:	mov	r0, #0
   142f8:	pop	{fp, pc}
   142fc:	movw	r0, #29742	; 0x742e
   14300:	movt	r0, #1
   14304:	movw	r1, #28690	; 0x7012
   14308:	movt	r1, #1
   1430c:	movw	r3, #30290	; 0x7652
   14310:	movt	r3, #1
   14314:	movw	r2, #994	; 0x3e2
   14318:	bl	124b4 <__assert_fail@plt>
   1431c:	movw	r0, #30360	; 0x7698
   14320:	movt	r0, #1
   14324:	movw	r1, #28690	; 0x7012
   14328:	movt	r1, #1
   1432c:	movw	r3, #30290	; 0x7652
   14330:	movt	r3, #1
   14334:	movw	r2, #995	; 0x3e3
   14338:	bl	124b4 <__assert_fail@plt>

0001433c <flatcc_builder_truncate_string@@Base>:
   1433c:	push	{fp, lr}
   14340:	mov	fp, sp
   14344:	ldr	r2, [r0, #32]
   14348:	ldrh	r3, [r2, #14]
   1434c:	cmp	r3, #6
   14350:	bne	14374 <flatcc_builder_truncate_string@@Base+0x38>
   14354:	ldr	r3, [r2, #20]
   14358:	cmp	r3, r1
   1435c:	bcc	14394 <flatcc_builder_truncate_string@@Base+0x58>
   14360:	sub	r3, r3, r1
   14364:	str	r3, [r2, #20]
   14368:	bl	14298 <flatcc_builder_truncate_vector@@Base+0x84>
   1436c:	mov	r0, #0
   14370:	pop	{fp, pc}
   14374:	movw	r0, #30007	; 0x7537
   14378:	movt	r0, #1
   1437c:	movw	r1, #28690	; 0x7012
   14380:	movt	r1, #1
   14384:	movw	r3, #30419	; 0x76d3
   14388:	movt	r3, #1
   1438c:	movw	r2, #1003	; 0x3eb
   14390:	bl	124b4 <__assert_fail@plt>
   14394:	movw	r0, #30482	; 0x7712
   14398:	movt	r0, #1
   1439c:	movw	r1, #28690	; 0x7012
   143a0:	movt	r1, #1
   143a4:	movw	r3, #30419	; 0x76d3
   143a8:	movt	r3, #1
   143ac:	mov	r2, #1004	; 0x3ec
   143b0:	bl	124b4 <__assert_fail@plt>

000143b4 <flatcc_builder_start_vector@@Base>:
   143b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143b8:	add	fp, sp, #24
   143bc:	sub	sp, sp, #8
   143c0:	mov	r5, r3
   143c4:	mov	r6, r1
   143c8:	mov	r4, r0
   143cc:	strh	r2, [sp, #6]
   143d0:	add	r0, sp, #6
   143d4:	mov	r8, #4
   143d8:	mov	r1, #4
   143dc:	bl	14434 <flatcc_builder_start_vector@@Base+0x80>
   143e0:	ldrh	r1, [sp, #6]
   143e4:	mov	r0, r4
   143e8:	bl	13a5c <flatcc_builder_start_buffer@@Base+0xbc>
   143ec:	mvn	r7, #0
   143f0:	cmp	r0, #0
   143f4:	bne	14428 <flatcc_builder_start_vector@@Base+0x74>
   143f8:	ldr	r0, [r4, #32]
   143fc:	str	r6, [r0, #16]
   14400:	ldr	r0, [r4, #32]
   14404:	mov	r7, #0
   14408:	str	r7, [r0, #20]
   1440c:	ldr	r0, [r4, #32]
   14410:	str	r5, [r0, #24]
   14414:	ldr	r0, [r4, #32]
   14418:	strh	r8, [r0, #14]
   1441c:	mov	r0, r4
   14420:	mvn	r1, #3
   14424:	bl	13cd4 <flatcc_builder_start_struct@@Base+0x4c>
   14428:	mov	r0, r7
   1442c:	sub	sp, fp, #24
   14430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14434:	ldrh	r2, [r0]
   14438:	cmp	r2, r1
   1443c:	strhcc	r1, [r0]
   14440:	bx	lr

00014444 <flatcc_builder_start_offset_vector@@Base>:
   14444:	push	{r4, r5, r6, sl, fp, lr}
   14448:	add	fp, sp, #16
   1444c:	mov	r4, r0
   14450:	mov	r6, #4
   14454:	mov	r1, #4
   14458:	bl	13a5c <flatcc_builder_start_buffer@@Base+0xbc>
   1445c:	mvn	r5, #0
   14460:	cmp	r0, #0
   14464:	beq	14470 <flatcc_builder_start_offset_vector@@Base+0x2c>
   14468:	mov	r0, r5
   1446c:	pop	{r4, r5, r6, sl, fp, pc}
   14470:	ldr	r0, [r4, #32]
   14474:	str	r6, [r0, #16]
   14478:	ldr	r0, [r4, #32]
   1447c:	mov	r5, #0
   14480:	str	r5, [r0, #20]
   14484:	ldr	r0, [r4, #32]
   14488:	mov	r1, #5
   1448c:	strh	r1, [r0, #14]
   14490:	mov	r0, r4
   14494:	mvn	r1, #3
   14498:	bl	13cd4 <flatcc_builder_start_struct@@Base+0x4c>
   1449c:	mov	r0, r5
   144a0:	pop	{r4, r5, r6, sl, fp, pc}

000144a4 <flatcc_builder_create_offset_vector@@Base>:
   144a4:	push	{r4, r5, r6, sl, fp, lr}
   144a8:	add	fp, sp, #16
   144ac:	mov	r6, r2
   144b0:	mov	r5, r1
   144b4:	mov	r4, r0
   144b8:	bl	14444 <flatcc_builder_start_offset_vector@@Base>
   144bc:	cmp	r0, #0
   144c0:	beq	144cc <flatcc_builder_create_offset_vector@@Base+0x28>
   144c4:	mov	r0, #0
   144c8:	pop	{r4, r5, r6, sl, fp, pc}
   144cc:	mov	r0, r4
   144d0:	mov	r1, r6
   144d4:	bl	13f90 <flatcc_builder_extend_offset_vector@@Base>
   144d8:	cmp	r0, #0
   144dc:	beq	144c4 <flatcc_builder_create_offset_vector@@Base+0x20>
   144e0:	lsl	r2, r6, #2
   144e4:	mov	r1, r5
   144e8:	bl	12400 <memcpy@plt>
   144ec:	mov	r0, r4
   144f0:	pop	{r4, r5, r6, sl, fp, lr}
   144f4:	b	144f8 <flatcc_builder_end_offset_vector@@Base>

000144f8 <flatcc_builder_end_offset_vector@@Base>:
   144f8:	push	{r4, r5, fp, lr}
   144fc:	add	fp, sp, #8
   14500:	mov	r4, r0
   14504:	ldr	r0, [r0, #32]
   14508:	ldrh	r1, [r0, #14]
   1450c:	cmp	r1, #5
   14510:	bne	1453c <flatcc_builder_end_offset_vector@@Base+0x44>
   14514:	ldr	r2, [r0, #20]
   14518:	ldr	r1, [r4, #16]
   1451c:	mov	r0, r4
   14520:	bl	15098 <flatcc_builder_create_offset_vector_direct@@Base>
   14524:	mov	r5, r0
   14528:	cmp	r0, #0
   1452c:	movne	r0, r4
   14530:	blne	13c1c <flatcc_builder_end_buffer@@Base+0xc8>
   14534:	mov	r0, r5
   14538:	pop	{r4, r5, fp, pc}
   1453c:	movw	r0, #29742	; 0x742e
   14540:	movt	r0, #1
   14544:	movw	r1, #28690	; 0x7012
   14548:	movt	r1, #1
   1454c:	movw	r3, #31325	; 0x7a5d
   14550:	movt	r3, #1
   14554:	movw	r2, #1480	; 0x5c8
   14558:	bl	124b4 <__assert_fail@plt>

0001455c <flatcc_builder_start_string@@Base>:
   1455c:	push	{r4, r5, r6, sl, fp, lr}
   14560:	add	fp, sp, #16
   14564:	mov	r4, r0
   14568:	mov	r6, #1
   1456c:	mov	r1, #1
   14570:	bl	13a5c <flatcc_builder_start_buffer@@Base+0xbc>
   14574:	mvn	r5, #0
   14578:	cmp	r0, #0
   1457c:	beq	14588 <flatcc_builder_start_string@@Base+0x2c>
   14580:	mov	r0, r5
   14584:	pop	{r4, r5, r6, sl, fp, pc}
   14588:	ldr	r0, [r4, #32]
   1458c:	str	r6, [r0, #16]
   14590:	ldr	r0, [r4, #32]
   14594:	mov	r5, #0
   14598:	str	r5, [r0, #20]
   1459c:	ldr	r0, [r4, #32]
   145a0:	mov	r1, #6
   145a4:	strh	r1, [r0, #14]
   145a8:	mov	r0, r4
   145ac:	mvn	r1, #3
   145b0:	bl	13cd4 <flatcc_builder_start_struct@@Base+0x4c>
   145b4:	mov	r0, r5
   145b8:	pop	{r4, r5, r6, sl, fp, pc}

000145bc <flatcc_builder_reserve_table@@Base>:
   145bc:	cmn	r1, #1
   145c0:	ble	145c8 <flatcc_builder_reserve_table@@Base+0xc>
   145c4:	b	145f0 <flatcc_builder_reserve_table@@Base+0x34>
   145c8:	push	{fp, lr}
   145cc:	mov	fp, sp
   145d0:	movw	r0, #30581	; 0x7775
   145d4:	movt	r0, #1
   145d8:	movw	r1, #28690	; 0x7012
   145dc:	movt	r1, #1
   145e0:	movw	r3, #30516	; 0x7734
   145e4:	movt	r3, #1
   145e8:	movw	r2, #1065	; 0x429
   145ec:	bl	124b4 <__assert_fail@plt>
   145f0:	push	{r4, r5, r6, sl, fp, lr}
   145f4:	add	fp, sp, #16
   145f8:	sub	sp, sp, #8
   145fc:	mov	r6, r1
   14600:	mov	r4, r0
   14604:	ldr	r0, [r0, #32]
   14608:	ldrh	r1, [r0, #28]
   1460c:	ldr	r0, [r0, #16]
   14610:	mov	r2, #1
   14614:	str	r2, [sp]
   14618:	mov	r2, #4
   1461c:	add	r3, r2, r6, lsl #1
   14620:	add	r2, r0, r1, lsl #1
   14624:	mov	r5, #0
   14628:	mov	r0, r4
   1462c:	mov	r1, #0
   14630:	bl	132f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14634:	str	r0, [r4, #4]
   14638:	cmp	r0, #0
   1463c:	beq	14678 <flatcc_builder_reserve_table@@Base+0xbc>
   14640:	lsl	r1, r6, #1
   14644:	add	r0, r0, #4
   14648:	str	r0, [r4, #4]
   1464c:	ldr	r0, [r4, #32]
   14650:	ldr	r2, [r0, #20]
   14654:	str	r5, [sp]
   14658:	orr	r3, r1, #1
   1465c:	mov	r0, r4
   14660:	mov	r1, #3
   14664:	bl	132f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14668:	str	r0, [r4]
   1466c:	cmp	r0, #0
   14670:	mvneq	r5, #0
   14674:	b	1467c <flatcc_builder_reserve_table@@Base+0xc0>
   14678:	mvn	r5, #0
   1467c:	mov	r0, r5
   14680:	sub	sp, fp, #16
   14684:	pop	{r4, r5, r6, sl, fp, pc}

00014688 <flatcc_builder_start_table@@Base>:
   14688:	push	{r4, r5, r6, sl, fp, lr}
   1468c:	add	fp, sp, #16
   14690:	mov	r6, r1
   14694:	mov	r4, r0
   14698:	mov	r1, #4
   1469c:	bl	13a5c <flatcc_builder_start_buffer@@Base+0xbc>
   146a0:	mvn	r5, #0
   146a4:	cmp	r0, #0
   146a8:	bne	14720 <flatcc_builder_start_table@@Base+0x98>
   146ac:	ldr	r0, [r4, #4]
   146b0:	ldr	r1, [r4, #32]
   146b4:	ldr	r2, [r4, #52]	; 0x34
   146b8:	sub	r0, r0, r2
   146bc:	str	r0, [r1, #16]
   146c0:	ldr	r0, [r4]
   146c4:	ldr	r1, [r4, #32]
   146c8:	ldr	r2, [r4, #76]	; 0x4c
   146cc:	sub	r0, r0, r2
   146d0:	str	r0, [r1, #20]
   146d4:	ldr	r0, [r4, #12]
   146d8:	ldr	r1, [r4, #32]
   146dc:	str	r0, [r1, #24]
   146e0:	ldr	r0, [r4, #32]
   146e4:	ldrh	r1, [r4, #8]
   146e8:	strh	r1, [r0, #28]
   146ec:	mov	r0, #0
   146f0:	strh	r0, [r4, #8]
   146f4:	movw	r0, #15186	; 0x3b52
   146f8:	movt	r0, #12137	; 0x2f69
   146fc:	str	r0, [r4, #12]
   14700:	ldr	r0, [r4, #32]
   14704:	mov	r1, #3
   14708:	strh	r1, [r0, #14]
   1470c:	mov	r0, r4
   14710:	mov	r1, r6
   14714:	bl	145f0 <flatcc_builder_reserve_table@@Base+0x34>
   14718:	cmp	r0, #0
   1471c:	beq	14728 <flatcc_builder_start_table@@Base+0xa0>
   14720:	mov	r0, r5
   14724:	pop	{r4, r5, r6, sl, fp, pc}
   14728:	mov	r0, r4
   1472c:	movw	r1, #65532	; 0xfffc
   14730:	bl	13cd4 <flatcc_builder_start_struct@@Base+0x4c>
   14734:	mov	r5, #0
   14738:	mov	r0, r5
   1473c:	pop	{r4, r5, r6, sl, fp, pc}

00014740 <flatcc_builder_create_vtable@@Base>:
   14740:	push	{fp, lr}
   14744:	mov	fp, sp
   14748:	sub	sp, sp, #72	; 0x48
   1474c:	mov	r3, #0
   14750:	str	r3, [sp, #4]
   14754:	str	r3, [sp]
   14758:	cmp	r2, #0
   1475c:	strne	r1, [sp, #8]
   14760:	strne	r2, [sp]
   14764:	strne	r2, [sp, #12]
   14768:	movne	r1, #1
   1476c:	strne	r1, [sp, #4]
   14770:	ldr	r1, [r0, #152]	; 0x98
   14774:	cmp	r1, #0
   14778:	bne	14788 <flatcc_builder_create_vtable@@Base+0x48>
   1477c:	ldr	r1, [r0, #180]	; 0xb4
   14780:	cmp	r1, #0
   14784:	beq	147a4 <flatcc_builder_create_vtable@@Base+0x64>
   14788:	mov	r1, sp
   1478c:	bl	13660 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14790:	cmp	r0, #0
   14794:	beq	147b4 <flatcc_builder_create_vtable@@Base+0x74>
   14798:	add	r0, r0, #1
   1479c:	mov	sp, fp
   147a0:	pop	{fp, pc}
   147a4:	mov	r1, sp
   147a8:	bl	147c0 <flatcc_builder_create_vtable@@Base+0x80>
   147ac:	cmp	r0, #0
   147b0:	bne	1479c <flatcc_builder_create_vtable@@Base+0x5c>
   147b4:	mov	r0, #0
   147b8:	mov	sp, fp
   147bc:	pop	{fp, pc}
   147c0:	push	{r4, sl, fp, lr}
   147c4:	add	fp, sp, #8
   147c8:	sub	sp, sp, #8
   147cc:	ldr	r4, [r0, #140]	; 0x8c
   147d0:	ldr	r3, [r1]
   147d4:	add	r2, r3, r4
   147d8:	str	r2, [r0, #140]	; 0x8c
   147dc:	cmn	r3, #1
   147e0:	ble	14834 <flatcc_builder_create_vtable@@Base+0xf4>
   147e4:	ldr	r2, [r1, #4]
   147e8:	ldr	ip, [r0, #36]	; 0x24
   147ec:	ldr	lr, [r0, #44]	; 0x2c
   147f0:	str	r3, [sp]
   147f4:	add	r1, r1, #8
   147f8:	mov	r0, ip
   147fc:	mov	r3, r4
   14800:	blx	lr
   14804:	cmp	r0, #0
   14808:	addeq	r0, r4, #1
   1480c:	subeq	sp, fp, #8
   14810:	popeq	{r4, sl, fp, pc}
   14814:	movw	r0, #33208	; 0x81b8
   14818:	movt	r0, #1
   1481c:	movw	r1, #28690	; 0x7012
   14820:	movt	r1, #1
   14824:	movw	r3, #33075	; 0x8133
   14828:	movt	r3, #1
   1482c:	movw	r2, #677	; 0x2a5
   14830:	bl	124b4 <__assert_fail@plt>
   14834:	movw	r0, #33208	; 0x81b8
   14838:	movt	r0, #1
   1483c:	movw	r1, #28690	; 0x7012
   14840:	movt	r1, #1
   14844:	movw	r3, #33075	; 0x8133
   14848:	movt	r3, #1
   1484c:	movw	r2, #673	; 0x2a1
   14850:	bl	124b4 <__assert_fail@plt>

00014854 <flatcc_builder_create_cached_vtable@@Base>:
   14854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14858:	add	fp, sp, #28
   1485c:	sub	sp, sp, #20
   14860:	mov	r4, r2
   14864:	mov	r9, r1
   14868:	mov	sl, r0
   1486c:	mov	r1, r3
   14870:	bl	14a48 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   14874:	cmp	r0, #0
   14878:	beq	1499c <flatcc_builder_create_cached_vtable@@Base+0x148>
   1487c:	mov	r7, r0
   14880:	ldr	r6, [r0]
   14884:	mov	r5, #0
   14888:	cmp	r6, #0
   1488c:	mov	r8, #0
   14890:	beq	14928 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   14894:	ldr	r5, [sl, #68]	; 0x44
   14898:	str	sl, [sp, #16]
   1489c:	ldr	sl, [sl, #100]	; 0x64
   148a0:	mov	r0, #0
   148a4:	str	r7, [sp, #8]
   148a8:	str	r0, [sp, #12]
   148ac:	add	r8, sl, r6
   148b0:	ldr	r0, [r8, #8]
   148b4:	mov	r1, r5
   148b8:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   148bc:	cmp	r0, r4
   148c0:	bne	148d8 <flatcc_builder_create_cached_vtable@@Base+0x84>
   148c4:	mov	r0, r9
   148c8:	mov	r2, r4
   148cc:	bl	1240c <memcmp@plt>
   148d0:	cmp	r0, #0
   148d4:	beq	148ec <flatcc_builder_create_cached_vtable@@Base+0x98>
   148d8:	ldr	r6, [r8, #12]!
   148dc:	cmp	r6, #0
   148e0:	mov	r7, r8
   148e4:	bne	148ac <flatcc_builder_create_cached_vtable@@Base+0x58>
   148e8:	b	14918 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   148ec:	ldr	r0, [sp, #16]
   148f0:	ldr	r0, [r0, #152]	; 0x98
   148f4:	ldr	r1, [r8, #4]
   148f8:	cmp	r1, r0
   148fc:	beq	14a24 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14900:	mov	r7, r8
   14904:	ldr	r6, [r7, #12]!
   14908:	cmp	r6, #0
   1490c:	mov	r0, r8
   14910:	bne	148a8 <flatcc_builder_create_cached_vtable@@Base+0x54>
   14914:	b	1491c <flatcc_builder_create_cached_vtable@@Base+0xc8>
   14918:	ldr	r8, [sp, #12]
   1491c:	ldr	sl, [sp, #16]
   14920:	mov	r5, #0
   14924:	ldr	r7, [sp, #8]
   14928:	ldr	r2, [sl, #124]	; 0x7c
   1492c:	str	r5, [sp]
   14930:	mov	r0, sl
   14934:	mov	r1, #6
   14938:	mov	r3, #16
   1493c:	bl	132f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14940:	cmp	r0, #0
   14944:	beq	14a10 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14948:	mov	r6, r0
   1494c:	ldr	r0, [sl, #124]	; 0x7c
   14950:	ldr	r1, [sl, #152]	; 0x98
   14954:	add	r2, r0, #16
   14958:	str	r2, [sl, #124]	; 0x7c
   1495c:	str	r1, [r6, #4]
   14960:	ldr	r1, [r7]
   14964:	str	r1, [r6, #12]
   14968:	str	r0, [r7]
   1496c:	mov	r0, sl
   14970:	mov	r1, r9
   14974:	mov	r2, r4
   14978:	bl	14740 <flatcc_builder_create_vtable@@Base>
   1497c:	str	r0, [r6]
   14980:	cmp	r0, #0
   14984:	beq	14a10 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14988:	cmp	r8, #0
   1498c:	beq	149a4 <flatcc_builder_create_cached_vtable@@Base+0x150>
   14990:	ldr	r0, [r8, #8]
   14994:	str	r0, [r6, #8]
   14998:	b	14a0c <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   1499c:	mov	r5, #0
   149a0:	b	14a10 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   149a4:	ldr	r0, [sl, #172]	; 0xac
   149a8:	cmp	r0, #0
   149ac:	beq	149cc <flatcc_builder_create_cached_vtable@@Base+0x178>
   149b0:	ldr	r1, [sl, #120]	; 0x78
   149b4:	add	r1, r1, r4
   149b8:	cmp	r0, r1
   149bc:	bcs	149cc <flatcc_builder_create_cached_vtable@@Base+0x178>
   149c0:	mov	r0, sl
   149c4:	bl	12fe8 <flatcc_builder_flush_vtable_cache@@Base>
   149c8:	b	14a0c <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   149cc:	ldr	r2, [sl, #120]	; 0x78
   149d0:	mov	r0, #0
   149d4:	str	r0, [sp]
   149d8:	mov	r0, sl
   149dc:	mov	r1, #2
   149e0:	mov	r3, r4
   149e4:	bl	132f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   149e8:	cmp	r0, #0
   149ec:	beq	14a1c <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   149f0:	ldr	r1, [sl, #120]	; 0x78
   149f4:	str	r1, [r6, #8]
   149f8:	add	r1, r1, r4
   149fc:	str	r1, [sl, #120]	; 0x78
   14a00:	mov	r1, r9
   14a04:	mov	r2, r4
   14a08:	bl	12400 <memcpy@plt>
   14a0c:	ldr	r5, [r6]
   14a10:	mov	r0, r5
   14a14:	sub	sp, fp, #28
   14a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a1c:	mvn	r5, #0
   14a20:	b	14a10 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14a24:	ldr	r1, [sp, #8]
   14a28:	cmp	r7, r1
   14a2c:	ldrne	r0, [r8, #12]
   14a30:	strne	r0, [r7]
   14a34:	ldrne	r0, [r1]
   14a38:	strne	r0, [r8, #12]
   14a3c:	strne	r6, [r1]
   14a40:	ldr	r5, [r8]
   14a44:	b	14a10 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   14a48:	push	{r4, r5, fp, lr}
   14a4c:	add	fp, sp, #8
   14a50:	mov	r4, r1
   14a54:	mov	r5, r0
   14a58:	ldr	r0, [r0, #116]	; 0x74
   14a5c:	cmp	r0, #0
   14a60:	bne	14a7c <flatcc_builder_create_cached_vtable@@Base+0x228>
   14a64:	mov	r0, r5
   14a68:	bl	161a8 <flatcc_builder_get_emit_context@@Base+0x80>
   14a6c:	mov	r1, r0
   14a70:	mov	r0, #0
   14a74:	cmp	r1, #0
   14a78:	popne	{r4, r5, fp, pc}
   14a7c:	ldr	r0, [r5, #92]	; 0x5c
   14a80:	ldr	r1, [r5, #116]	; 0x74
   14a84:	rsb	r1, r1, #32
   14a88:	lsr	r1, r4, r1
   14a8c:	add	r0, r0, r1, lsl #2
   14a90:	pop	{r4, r5, fp, pc}

00014a94 <flatcc_builder_create_table@@Base>:
   14a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a98:	add	fp, sp, #28
   14a9c:	sub	sp, sp, #84	; 0x54
   14aa0:	strh	r3, [fp, #-30]	; 0xffffffe2
   14aa4:	ldr	r4, [fp, #12]
   14aa8:	cmn	r4, #1
   14aac:	ble	14bdc <flatcc_builder_create_table@@Base+0x148>
   14ab0:	ldr	r8, [fp, #16]
   14ab4:	tst	r8, #1
   14ab8:	beq	14bfc <flatcc_builder_create_table@@Base+0x168>
   14abc:	mov	sl, r2
   14ac0:	mov	r6, r1
   14ac4:	mov	r5, r0
   14ac8:	sub	r0, fp, #30
   14acc:	mov	r1, #4
   14ad0:	bl	14434 <flatcc_builder_start_vector@@Base+0x80>
   14ad4:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   14ad8:	mov	r0, r5
   14adc:	mov	r1, r7
   14ae0:	bl	138c4 <flatcc_builder_create_buffer@@Base+0x1d0>
   14ae4:	mov	r0, r5
   14ae8:	mov	r1, sl
   14aec:	mov	r2, r7
   14af0:	bl	13648 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14af4:	mov	r9, r0
   14af8:	mvn	r0, #3
   14afc:	sub	r0, r0, sl
   14b00:	sub	r0, r0, r9
   14b04:	str	r5, [sp]
   14b08:	ldr	r1, [r5, #136]	; 0x88
   14b0c:	add	r5, r0, r1
   14b10:	rsb	r0, r8, #1
   14b14:	add	r0, r0, r5
   14b18:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   14b1c:	str	r0, [fp, #-36]	; 0xffffffdc
   14b20:	cmp	r4, #1
   14b24:	blt	14b54 <flatcc_builder_create_table@@Base+0xc0>
   14b28:	mvn	r0, #3
   14b2c:	ldr	r7, [fp, #8]
   14b30:	sub	r5, r0, r5
   14b34:	ldrh	r8, [r7], #2
   14b38:	ldr	r0, [r8, r6]
   14b3c:	add	r0, r5, r0
   14b40:	sub	r0, r0, r8
   14b44:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   14b48:	str	r0, [r8, r6]
   14b4c:	subs	r4, r4, #1
   14b50:	bne	14b34 <flatcc_builder_create_table@@Base+0xa0>
   14b54:	sub	r0, fp, #36	; 0x24
   14b58:	str	r0, [sp, #12]
   14b5c:	mov	r0, #4
   14b60:	str	r0, [sp, #4]
   14b64:	str	r0, [sp, #16]
   14b68:	mov	r0, #1
   14b6c:	str	r0, [sp, #8]
   14b70:	cmp	sl, #0
   14b74:	beq	14b90 <flatcc_builder_create_table@@Base+0xfc>
   14b78:	str	r6, [sp, #20]
   14b7c:	str	sl, [sp, #24]
   14b80:	mov	r0, #2
   14b84:	str	r0, [sp, #8]
   14b88:	add	r0, sl, #4
   14b8c:	str	r0, [sp, #4]
   14b90:	cmp	r9, #0
   14b94:	ldr	r0, [sp]
   14b98:	beq	14bcc <flatcc_builder_create_table@@Base+0x138>
   14b9c:	ldr	r2, [sp, #4]
   14ba0:	ldr	r1, [sp, #8]
   14ba4:	add	r2, r2, r9
   14ba8:	str	r2, [sp, #4]
   14bac:	add	r2, sp, #4
   14bb0:	add	r3, r2, r1, lsl #3
   14bb4:	movw	r2, #28160	; 0x6e00
   14bb8:	movt	r2, #1
   14bbc:	str	r2, [r3, #8]
   14bc0:	str	r9, [r3, #12]
   14bc4:	add	r1, r1, #1
   14bc8:	str	r1, [sp, #8]
   14bcc:	add	r1, sp, #4
   14bd0:	bl	13660 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14bd4:	sub	sp, fp, #28
   14bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bdc:	movw	r0, #30574	; 0x776e
   14be0:	movt	r0, #1
   14be4:	movw	r1, #28690	; 0x7012
   14be8:	movt	r1, #1
   14bec:	movw	r3, #30592	; 0x7780
   14bf0:	movt	r3, #1
   14bf4:	movw	r2, #1237	; 0x4d5
   14bf8:	bl	124b4 <__assert_fail@plt>
   14bfc:	movw	r0, #30748	; 0x781c
   14c00:	movt	r0, #1
   14c04:	movw	r1, #28690	; 0x7012
   14c08:	movt	r1, #1
   14c0c:	movw	r3, #30592	; 0x7780
   14c10:	movt	r3, #1
   14c14:	movw	r2, #1243	; 0x4db
   14c18:	bl	124b4 <__assert_fail@plt>

00014c1c <flatcc_builder_check_required_field@@Base>:
   14c1c:	ldr	r2, [r0, #32]
   14c20:	ldrh	r2, [r2, #14]
   14c24:	cmp	r2, #3
   14c28:	bne	14c58 <flatcc_builder_check_required_field@@Base+0x3c>
   14c2c:	ldrh	r3, [r0, #8]
   14c30:	mov	r2, #0
   14c34:	cmp	r3, r1
   14c38:	bls	14c50 <flatcc_builder_check_required_field@@Base+0x34>
   14c3c:	ldr	r0, [r0, #4]
   14c40:	add	r0, r0, r1, lsl #1
   14c44:	ldrh	r2, [r0]
   14c48:	cmp	r2, #0
   14c4c:	movwne	r2, #1
   14c50:	mov	r0, r2
   14c54:	bx	lr
   14c58:	push	{fp, lr}
   14c5c:	mov	fp, sp
   14c60:	movw	r0, #30759	; 0x7827
   14c64:	movt	r0, #1
   14c68:	movw	r1, #28690	; 0x7012
   14c6c:	movt	r1, #1
   14c70:	movw	r3, #30802	; 0x7852
   14c74:	movt	r3, #1
   14c78:	movw	r2, #1272	; 0x4f8
   14c7c:	bl	124b4 <__assert_fail@plt>

00014c80 <flatcc_builder_check_union_field@@Base>:
   14c80:	mov	r2, r0
   14c84:	ldr	r0, [r0, #32]
   14c88:	ldrh	r0, [r0, #14]
   14c8c:	cmp	r0, #3
   14c90:	bne	14cf0 <flatcc_builder_check_union_field@@Base+0x70>
   14c94:	mov	r0, #0
   14c98:	cmp	r1, #0
   14c9c:	ldrhne	r3, [r2, #8]
   14ca0:	cmpne	r3, r1
   14ca4:	bhi	14cac <flatcc_builder_check_union_field@@Base+0x2c>
   14ca8:	bx	lr
   14cac:	ldr	r0, [r2, #4]
   14cb0:	add	r0, r0, r1, lsl #1
   14cb4:	ldrh	r1, [r0, #-2]
   14cb8:	cmp	r1, #0
   14cbc:	beq	14ce0 <flatcc_builder_check_union_field@@Base+0x60>
   14cc0:	ldr	r2, [r2, #16]
   14cc4:	ldrb	r1, [r2, r1]
   14cc8:	ldrh	r0, [r0]
   14ccc:	cmp	r1, #0
   14cd0:	beq	14ce4 <flatcc_builder_check_union_field@@Base+0x64>
   14cd4:	cmp	r0, #0
   14cd8:	movwne	r0, #1
   14cdc:	bx	lr
   14ce0:	ldrh	r0, [r0]
   14ce4:	clz	r0, r0
   14ce8:	lsr	r0, r0, #5
   14cec:	bx	lr
   14cf0:	push	{fp, lr}
   14cf4:	mov	fp, sp
   14cf8:	movw	r0, #30759	; 0x7827
   14cfc:	movt	r0, #1
   14d00:	movw	r1, #28690	; 0x7012
   14d04:	movt	r1, #1
   14d08:	movw	r3, #30885	; 0x78a5
   14d0c:	movt	r3, #1
   14d10:	movw	r2, #1279	; 0x4ff
   14d14:	bl	124b4 <__assert_fail@plt>

00014d18 <flatcc_builder_check_required@@Base>:
   14d18:	push	{fp, lr}
   14d1c:	mov	fp, sp
   14d20:	mov	r3, r0
   14d24:	ldr	r0, [r0, #32]
   14d28:	ldrh	r0, [r0, #14]
   14d2c:	cmp	r0, #3
   14d30:	bne	14d88 <flatcc_builder_check_required@@Base+0x70>
   14d34:	ldrh	ip, [r3, #8]
   14d38:	mov	r0, #0
   14d3c:	cmp	ip, r2
   14d40:	movge	r0, #1
   14d44:	cmpge	r2, #1
   14d48:	bge	14d50 <flatcc_builder_check_required@@Base+0x38>
   14d4c:	pop	{fp, pc}
   14d50:	ldr	ip, [r3, #4]
   14d54:	mov	lr, #0
   14d58:	b	14d6c <flatcc_builder_check_required@@Base+0x54>
   14d5c:	add	lr, lr, #1
   14d60:	add	r1, r1, #2
   14d64:	cmp	lr, r2
   14d68:	popge	{fp, pc}
   14d6c:	ldrh	r3, [r1]
   14d70:	add	r3, ip, r3, lsl #1
   14d74:	ldrh	r3, [r3]
   14d78:	cmp	r3, #0
   14d7c:	bne	14d5c <flatcc_builder_check_required@@Base+0x44>
   14d80:	mov	r0, #0
   14d84:	pop	{fp, pc}
   14d88:	movw	r0, #30759	; 0x7827
   14d8c:	movt	r0, #1
   14d90:	movw	r1, #28690	; 0x7012
   14d94:	movt	r1, #1
   14d98:	movw	r3, #30965	; 0x78f5
   14d9c:	movt	r3, #1
   14da0:	movw	r2, #1297	; 0x511
   14da4:	bl	124b4 <__assert_fail@plt>

00014da8 <flatcc_builder_end_table@@Base>:
   14da8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14dac:	add	fp, sp, #24
   14db0:	sub	sp, sp, #16
   14db4:	mov	r4, r0
   14db8:	ldr	r0, [r0, #32]
   14dbc:	ldrh	r0, [r0, #14]
   14dc0:	cmp	r0, #3
   14dc4:	bne	14ed4 <flatcc_builder_end_table@@Base+0x12c>
   14dc8:	ldrh	r0, [r4, #8]
   14dcc:	mov	r1, #4
   14dd0:	add	r0, r1, r0, lsl #1
   14dd4:	ldr	r6, [r4, #4]
   14dd8:	strh	r0, [r6, #-4]!
   14ddc:	ldrh	r1, [r4, #20]
   14de0:	add	r1, r1, #4
   14de4:	strh	r1, [r6, #2]
   14de8:	uxth	r5, r0
   14dec:	ldr	r0, [r4, #12]
   14df0:	eor	r0, r0, r5
   14df4:	movw	r2, #31153	; 0x79b1
   14df8:	movt	r2, #40503	; 0x9e37
   14dfc:	mul	r0, r0, r2
   14e00:	uxth	r1, r1
   14e04:	eor	r0, r0, r1
   14e08:	mul	r3, r0, r2
   14e0c:	str	r3, [r4, #12]
   14e10:	mov	r0, r4
   14e14:	mov	r1, r6
   14e18:	mov	r2, r5
   14e1c:	bl	14854 <flatcc_builder_create_cached_vtable@@Base>
   14e20:	cmp	r0, #0
   14e24:	beq	14ec4 <flatcc_builder_end_table@@Base+0x11c>
   14e28:	mov	r7, r0
   14e2c:	mov	r8, #0
   14e30:	mov	r0, r6
   14e34:	mov	r1, #0
   14e38:	mov	r2, r5
   14e3c:	bl	12484 <memset@plt>
   14e40:	ldrh	r3, [r4, #130]	; 0x82
   14e44:	ldr	r0, [r4, #76]	; 0x4c
   14e48:	ldr	r6, [r4]
   14e4c:	ldr	r1, [r4, #16]
   14e50:	ldr	r2, [r4, #20]
   14e54:	ldr	r5, [r4, #32]
   14e58:	ldr	r5, [r5, #20]
   14e5c:	add	r0, r0, r5
   14e60:	sub	r6, r6, r0
   14e64:	asr	r6, r6, #1
   14e68:	stm	sp, {r0, r6, r7}
   14e6c:	mov	r0, r4
   14e70:	bl	14a94 <flatcc_builder_create_table@@Base>
   14e74:	cmp	r0, #0
   14e78:	beq	14ec8 <flatcc_builder_end_table@@Base+0x120>
   14e7c:	mov	r5, r0
   14e80:	ldr	r0, [r4, #32]
   14e84:	ldr	r1, [r4, #52]	; 0x34
   14e88:	ldr	r2, [r4, #76]	; 0x4c
   14e8c:	ldr	r3, [r0, #24]
   14e90:	str	r3, [r4, #12]
   14e94:	ldrh	r3, [r0, #28]
   14e98:	strh	r3, [r4, #8]
   14e9c:	ldr	r3, [r0, #16]
   14ea0:	add	r1, r1, r3
   14ea4:	str	r1, [r4, #4]
   14ea8:	ldr	r0, [r0, #20]
   14eac:	add	r0, r2, r0
   14eb0:	str	r0, [r4]
   14eb4:	mov	r0, r4
   14eb8:	bl	13c1c <flatcc_builder_end_buffer@@Base+0xc8>
   14ebc:	mov	r8, r5
   14ec0:	b	14ec8 <flatcc_builder_end_table@@Base+0x120>
   14ec4:	mov	r8, #0
   14ec8:	mov	r0, r8
   14ecc:	sub	sp, fp, #24
   14ed0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ed4:	movw	r0, #30759	; 0x7827
   14ed8:	movt	r0, #1
   14edc:	movw	r1, #28690	; 0x7012
   14ee0:	movt	r1, #1
   14ee4:	movw	r3, #31055	; 0x794f
   14ee8:	movt	r3, #1
   14eec:	movw	r2, #1317	; 0x525
   14ef0:	bl	124b4 <__assert_fail@plt>

00014ef4 <flatcc_builder_create_vector@@Base>:
   14ef4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14ef8:	add	fp, sp, #24
   14efc:	sub	sp, sp, #80	; 0x50
   14f00:	mov	r4, r0
   14f04:	ldr	r0, [fp, #8]
   14f08:	strh	r0, [fp, #-26]	; 0xffffffe6
   14f0c:	ldr	r0, [fp, #12]
   14f10:	cmp	r2, r0
   14f14:	bhi	14fe4 <flatcc_builder_create_vector@@Base+0xf0>
   14f18:	mov	r6, r3
   14f1c:	mov	r7, r2
   14f20:	mov	r8, r1
   14f24:	sub	r0, fp, #26
   14f28:	mov	r9, #4
   14f2c:	mov	r1, #4
   14f30:	bl	14434 <flatcc_builder_start_vector@@Base+0x80>
   14f34:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   14f38:	mov	r0, r4
   14f3c:	mov	r1, r5
   14f40:	bl	138c4 <flatcc_builder_create_buffer@@Base+0x1d0>
   14f44:	mov	r0, r7
   14f48:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   14f4c:	str	r7, [fp, #-32]	; 0xffffffe0
   14f50:	mul	r6, r6, r7
   14f54:	mov	r0, r4
   14f58:	mov	r1, r6
   14f5c:	mov	r2, r5
   14f60:	bl	13648 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14f64:	str	r9, [sp]
   14f68:	sub	r1, fp, #32
   14f6c:	str	r1, [sp, #8]
   14f70:	str	r9, [sp, #12]
   14f74:	mov	r1, #1
   14f78:	str	r1, [sp, #4]
   14f7c:	cmp	r6, #0
   14f80:	beq	14f9c <flatcc_builder_create_vector@@Base+0xa8>
   14f84:	str	r8, [sp, #16]
   14f88:	str	r6, [sp, #20]
   14f8c:	mov	r1, #2
   14f90:	str	r1, [sp, #4]
   14f94:	add	r1, r6, #4
   14f98:	str	r1, [sp]
   14f9c:	cmp	r0, #0
   14fa0:	beq	14fd0 <flatcc_builder_create_vector@@Base+0xdc>
   14fa4:	ldm	sp, {r1, r2}
   14fa8:	add	r1, r1, r0
   14fac:	str	r1, [sp]
   14fb0:	mov	r1, sp
   14fb4:	add	r1, r1, r2, lsl #3
   14fb8:	movw	r3, #28160	; 0x6e00
   14fbc:	movt	r3, #1
   14fc0:	str	r3, [r1, #8]
   14fc4:	str	r0, [r1, #12]
   14fc8:	add	r0, r2, #1
   14fcc:	str	r0, [sp, #4]
   14fd0:	mov	r1, sp
   14fd4:	mov	r0, r4
   14fd8:	bl	13660 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14fdc:	sub	sp, fp, #24
   14fe0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14fe4:	movw	r0, #31121	; 0x7991
   14fe8:	movt	r0, #1
   14fec:	movw	r1, #28690	; 0x7012
   14ff0:	movt	r1, #1
   14ff4:	movw	r3, #31140	; 0x79a4
   14ff8:	movt	r3, #1
   14ffc:	movw	r2, #1365	; 0x555
   15000:	bl	124b4 <__assert_fail@plt>

00015004 <flatcc_builder_end_vector@@Base>:
   15004:	push	{r4, r5, fp, lr}
   15008:	add	fp, sp, #8
   1500c:	sub	sp, sp, #8
   15010:	mov	r4, r0
   15014:	ldr	r0, [r0, #32]
   15018:	ldrh	r1, [r0, #14]
   1501c:	cmp	r1, #4
   15020:	bne	15064 <flatcc_builder_end_vector@@Base+0x60>
   15024:	ldr	r1, [r4, #16]
   15028:	ldrh	r5, [r4, #130]	; 0x82
   1502c:	ldr	r3, [r0, #16]
   15030:	ldr	r2, [r0, #20]
   15034:	ldr	r0, [r0, #24]
   15038:	str	r5, [sp]
   1503c:	str	r0, [sp, #4]
   15040:	mov	r0, r4
   15044:	bl	14ef4 <flatcc_builder_create_vector@@Base>
   15048:	mov	r5, r0
   1504c:	cmp	r0, #0
   15050:	movne	r0, r4
   15054:	blne	13c1c <flatcc_builder_end_buffer@@Base+0xc8>
   15058:	mov	r0, r5
   1505c:	sub	sp, fp, #8
   15060:	pop	{r4, r5, fp, pc}
   15064:	movw	r0, #29493	; 0x7335
   15068:	movt	r0, #1
   1506c:	movw	r1, #28690	; 0x7012
   15070:	movt	r1, #1
   15074:	movw	r3, #31258	; 0x7a1a
   15078:	movt	r3, #1
   1507c:	movw	r2, #1400	; 0x578
   15080:	bl	124b4 <__assert_fail@plt>

00015084 <flatcc_builder_vector_count@@Base>:
   15084:	ldr	r0, [r0, #32]
   15088:	ldr	r0, [r0, #20]
   1508c:	bx	lr

00015090 <flatcc_builder_vector_edit@@Base>:
   15090:	ldr	r0, [r0, #16]
   15094:	bx	lr

00015098 <flatcc_builder_create_offset_vector_direct@@Base>:
   15098:	mov	r3, #0
   1509c:	b	150a0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   150a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150a4:	add	fp, sp, #24
   150a8:	sub	sp, sp, #80	; 0x50
   150ac:	mov	r8, r0
   150b0:	mov	r0, #0
   150b4:	cmn	r2, #-1073741823	; 0xc0000001
   150b8:	bhi	151e8 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   150bc:	mov	r5, r3
   150c0:	mov	r9, r2
   150c4:	mov	r7, r1
   150c8:	mov	r6, #4
   150cc:	mov	r0, r8
   150d0:	mov	r1, #4
   150d4:	bl	138c4 <flatcc_builder_create_buffer@@Base+0x1d0>
   150d8:	mov	r0, r9
   150dc:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   150e0:	str	r9, [fp, #-28]	; 0xffffffe4
   150e4:	lsl	r4, r9, #2
   150e8:	mov	r0, r8
   150ec:	mov	r1, r4
   150f0:	mov	r2, #4
   150f4:	bl	13648 <flatcc_builder_embed_buffer@@Base+0x1c8>
   150f8:	str	r6, [sp, #4]
   150fc:	sub	r1, fp, #28
   15100:	str	r1, [sp, #12]
   15104:	str	r6, [sp, #16]
   15108:	mov	r1, #1
   1510c:	str	r1, [sp, #8]
   15110:	mov	r1, #0
   15114:	cmp	r1, r9, lsl #2
   15118:	beq	15134 <flatcc_builder_create_offset_vector_direct@@Base+0x9c>
   1511c:	str	r7, [sp, #20]
   15120:	str	r4, [sp, #24]
   15124:	mov	r1, #2
   15128:	str	r1, [sp, #8]
   1512c:	add	r1, r4, #4
   15130:	str	r1, [sp, #4]
   15134:	cmp	r0, #0
   15138:	beq	15168 <flatcc_builder_create_offset_vector_direct@@Base+0xd0>
   1513c:	ldmib	sp, {r1, r2}
   15140:	add	r1, r1, r0
   15144:	str	r1, [sp, #4]
   15148:	add	r1, sp, #4
   1514c:	add	r1, r1, r2, lsl #3
   15150:	movw	r3, #28160	; 0x6e00
   15154:	movt	r3, #1
   15158:	str	r3, [r1, #8]
   1515c:	str	r0, [r1, #12]
   15160:	add	r0, r2, #1
   15164:	str	r0, [sp, #8]
   15168:	cmp	r9, #0
   1516c:	beq	151dc <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   15170:	ldr	r0, [r8, #136]	; 0x88
   15174:	mvn	r1, #3
   15178:	sub	r0, r1, r0
   1517c:	ldr	r1, [sp, #4]
   15180:	add	r4, r0, r1
   15184:	mov	r6, #0
   15188:	ldr	r0, [r7, r6, lsl #2]
   1518c:	cmp	r0, #0
   15190:	beq	151b8 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15194:	add	r0, r4, r0
   15198:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   1519c:	str	r0, [r7, r6, lsl #2]
   151a0:	cmp	r5, #0
   151a4:	beq	151cc <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   151a8:	ldrb	r0, [r5, r6]
   151ac:	cmp	r0, #0
   151b0:	bne	151cc <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   151b4:	b	151f0 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   151b8:	cmp	r5, #0
   151bc:	beq	15210 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   151c0:	ldrb	r0, [r5, r6]
   151c4:	cmp	r0, #0
   151c8:	bne	15230 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   151cc:	sub	r4, r4, #4
   151d0:	add	r6, r6, #1
   151d4:	cmp	r6, r9
   151d8:	bcc	15188 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   151dc:	add	r1, sp, #4
   151e0:	mov	r0, r8
   151e4:	bl	13660 <flatcc_builder_embed_buffer@@Base+0x1e0>
   151e8:	sub	sp, fp, #24
   151ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151f0:	movw	r0, #33196	; 0x81ac
   151f4:	movt	r0, #1
   151f8:	movw	r1, #28690	; 0x7012
   151fc:	movt	r1, #1
   15200:	movw	r3, #33210	; 0x81ba
   15204:	movt	r3, #1
   15208:	movw	r2, #1457	; 0x5b1
   1520c:	bl	124b4 <__assert_fail@plt>
   15210:	movw	r0, #33208	; 0x81b8
   15214:	movt	r0, #1
   15218:	movw	r1, #28690	; 0x7012
   1521c:	movt	r1, #1
   15220:	movw	r3, #33210	; 0x81ba
   15224:	movt	r3, #1
   15228:	movw	r2, #1463	; 0x5b7
   1522c:	bl	124b4 <__assert_fail@plt>
   15230:	movw	r0, #33341	; 0x823d
   15234:	movt	r0, #1
   15238:	movw	r1, #28690	; 0x7012
   1523c:	movt	r1, #1
   15240:	movw	r3, #33210	; 0x81ba
   15244:	movt	r3, #1
   15248:	movw	r2, #1461	; 0x5b5
   1524c:	bl	124b4 <__assert_fail@plt>

00015250 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15250:	push	{r4, r5, fp, lr}
   15254:	add	fp, sp, #8
   15258:	mov	r3, r1
   1525c:	mov	r4, r0
   15260:	ldr	r0, [r0, #32]
   15264:	ldrh	r1, [r0, #14]
   15268:	cmp	r1, #5
   1526c:	bne	15298 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   15270:	ldr	r2, [r0, #20]
   15274:	ldr	r1, [r4, #16]
   15278:	mov	r0, r4
   1527c:	bl	150a0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15280:	mov	r5, r0
   15284:	cmp	r0, #0
   15288:	movne	r0, r4
   1528c:	blne	13c1c <flatcc_builder_end_buffer@@Base+0xc8>
   15290:	mov	r0, r5
   15294:	pop	{r4, r5, fp, pc}
   15298:	movw	r0, #29742	; 0x742e
   1529c:	movt	r0, #1
   152a0:	movw	r1, #28690	; 0x7012
   152a4:	movt	r1, #1
   152a8:	movw	r3, #31399	; 0x7aa7
   152ac:	movt	r3, #1
   152b0:	movw	r2, #1493	; 0x5d5
   152b4:	bl	124b4 <__assert_fail@plt>

000152b8 <flatcc_builder_offset_vector_edit@@Base>:
   152b8:	ldr	r0, [r0, #16]
   152bc:	bx	lr

000152c0 <flatcc_builder_offset_vector_count@@Base>:
   152c0:	ldr	r0, [r0, #32]
   152c4:	ldr	r0, [r0, #20]
   152c8:	bx	lr

000152cc <flatcc_builder_table_add_union@@Base>:
   152cc:	push	{r4, r5, r6, r7, fp, lr}
   152d0:	add	fp, sp, #16
   152d4:	mov	r5, r0
   152d8:	ldr	r0, [r0, #32]
   152dc:	ldrh	r0, [r0, #14]
   152e0:	cmp	r0, #3
   152e4:	bne	15358 <flatcc_builder_table_add_union@@Base+0x8c>
   152e8:	mov	r7, r3
   152ec:	mov	r6, r1
   152f0:	uxtb	r4, r2
   152f4:	cmp	r3, #0
   152f8:	beq	15304 <flatcc_builder_table_add_union@@Base+0x38>
   152fc:	cmp	r4, #0
   15300:	beq	15378 <flatcc_builder_table_add_union@@Base+0xac>
   15304:	cmp	r7, #0
   15308:	beq	15324 <flatcc_builder_table_add_union@@Base+0x58>
   1530c:	mov	r0, r5
   15310:	mov	r1, r6
   15314:	bl	153d8 <flatcc_builder_table_add_offset@@Base>
   15318:	cmp	r0, #0
   1531c:	beq	153b8 <flatcc_builder_table_add_union@@Base+0xec>
   15320:	str	r7, [r0]
   15324:	sub	r1, r6, #1
   15328:	mov	r0, r5
   1532c:	mov	r2, #1
   15330:	mov	r3, #1
   15334:	bl	1549c <flatcc_builder_table_add@@Base>
   15338:	cmp	r0, #0
   1533c:	beq	15398 <flatcc_builder_table_add_union@@Base+0xcc>
   15340:	mov	r5, r0
   15344:	mov	r0, r4
   15348:	bl	1557c <flatcc_builder_table_add@@Base+0xe0>
   1534c:	strb	r4, [r5]
   15350:	mov	r0, #0
   15354:	pop	{r4, r5, r6, r7, fp, pc}
   15358:	movw	r0, #30759	; 0x7827
   1535c:	movt	r0, #1
   15360:	movw	r1, #28690	; 0x7012
   15364:	movt	r1, #1
   15368:	movw	r3, #31513	; 0x7b19
   1536c:	movt	r3, #1
   15370:	movw	r2, #1518	; 0x5ee
   15374:	bl	124b4 <__assert_fail@plt>
   15378:	movw	r0, #31601	; 0x7b71
   1537c:	movt	r0, #1
   15380:	movw	r1, #28690	; 0x7012
   15384:	movt	r1, #1
   15388:	movw	r3, #31513	; 0x7b19
   1538c:	movt	r3, #1
   15390:	movw	r2, #1519	; 0x5ef
   15394:	bl	124b4 <__assert_fail@plt>
   15398:	movw	r0, #31645	; 0x7b9d
   1539c:	movt	r0, #1
   153a0:	movw	r1, #28690	; 0x7012
   153a4:	movt	r1, #1
   153a8:	movw	r3, #31513	; 0x7b19
   153ac:	movt	r3, #1
   153b0:	movw	r2, #1526	; 0x5f6
   153b4:	bl	124b4 <__assert_fail@plt>
   153b8:	movw	r0, #31635	; 0x7b93
   153bc:	movt	r0, #1
   153c0:	movw	r1, #28690	; 0x7012
   153c4:	movt	r1, #1
   153c8:	movw	r3, #31513	; 0x7b19
   153cc:	movt	r3, #1
   153d0:	movw	r2, #1522	; 0x5f2
   153d4:	bl	124b4 <__assert_fail@plt>

000153d8 <flatcc_builder_table_add_offset@@Base>:
   153d8:	push	{fp, lr}
   153dc:	mov	fp, sp
   153e0:	ldr	r2, [r0, #32]
   153e4:	ldrh	r2, [r2, #14]
   153e8:	cmp	r2, #3
   153ec:	bne	1543c <flatcc_builder_table_add_offset@@Base+0x64>
   153f0:	movw	r2, #32765	; 0x7ffd
   153f4:	cmp	r1, r2
   153f8:	bcs	1545c <flatcc_builder_table_add_offset@@Base+0x84>
   153fc:	ldr	r2, [r0, #4]
   15400:	add	r2, r2, r1, lsl #1
   15404:	ldrh	r2, [r2]
   15408:	cmp	r2, #0
   1540c:	bne	1547c <flatcc_builder_table_add_offset@@Base+0xa4>
   15410:	ldr	r2, [r0, #12]
   15414:	eor	r2, r2, r1
   15418:	movw	r3, #31153	; 0x79b1
   1541c:	movt	r3, #40503	; 0x9e37
   15420:	mul	r2, r2, r3
   15424:	eor	r2, r2, #4
   15428:	mul	r2, r2, r3
   1542c:	str	r2, [r0, #12]
   15430:	uxth	r1, r1
   15434:	pop	{fp, lr}
   15438:	b	15da8 <flatcc_builder_table_add_copy@@Base+0x40>
   1543c:	movw	r0, #30759	; 0x7827
   15440:	movt	r0, #1
   15444:	movw	r1, #28690	; 0x7012
   15448:	movt	r1, #1
   1544c:	movw	r3, #32539	; 0x7f1b
   15450:	movt	r3, #1
   15454:	movw	r2, #1811	; 0x713
   15458:	bl	124b4 <__assert_fail@plt>
   1545c:	movw	r0, #32411	; 0x7e9b
   15460:	movt	r0, #1
   15464:	movw	r1, #28690	; 0x7012
   15468:	movt	r1, #1
   1546c:	movw	r3, #32539	; 0x7f1b
   15470:	movt	r3, #1
   15474:	movw	r2, #1812	; 0x714
   15478:	bl	124b4 <__assert_fail@plt>
   1547c:	movw	r0, #33208	; 0x81b8
   15480:	movt	r0, #1
   15484:	movw	r1, #28690	; 0x7012
   15488:	movt	r1, #1
   1548c:	movw	r3, #32539	; 0x7f1b
   15490:	movt	r3, #1
   15494:	movw	r2, #1819	; 0x71b
   15498:	bl	124b4 <__assert_fail@plt>

0001549c <flatcc_builder_table_add@@Base>:
   1549c:	push	{fp, lr}
   154a0:	mov	fp, sp
   154a4:	mov	ip, r3
   154a8:	ldr	r3, [r0, #32]
   154ac:	ldrh	r3, [r3, #14]
   154b0:	cmp	r3, #3
   154b4:	bne	1551c <flatcc_builder_table_add@@Base+0x80>
   154b8:	movw	r3, #32765	; 0x7ffd
   154bc:	cmp	r1, r3
   154c0:	bcs	1553c <flatcc_builder_table_add@@Base+0xa0>
   154c4:	mov	lr, r2
   154c8:	ldrh	r3, [r0, #130]	; 0x82
   154cc:	cmp	r3, ip
   154d0:	strhcc	ip, [r0, #130]	; 0x82
   154d4:	ldr	r3, [r0, #4]
   154d8:	add	r3, r3, r1, lsl #1
   154dc:	ldrh	r3, [r3]
   154e0:	cmp	r3, #0
   154e4:	bne	1555c <flatcc_builder_table_add@@Base+0xc0>
   154e8:	ldr	r3, [r0, #12]
   154ec:	eor	r3, r3, r1
   154f0:	movw	r2, #31153	; 0x79b1
   154f4:	movt	r2, #40503	; 0x9e37
   154f8:	mul	r3, r3, r2
   154fc:	eor	r3, r3, lr
   15500:	mul	r2, r3, r2
   15504:	str	r2, [r0, #12]
   15508:	uxth	r3, r1
   1550c:	mov	r1, lr
   15510:	mov	r2, ip
   15514:	pop	{fp, lr}
   15518:	b	15c9c <flatcc_builder_string_len@@Base+0xc>
   1551c:	movw	r0, #30759	; 0x7827
   15520:	movt	r0, #1
   15524:	movw	r1, #28690	; 0x7012
   15528:	movt	r1, #1
   1552c:	movw	r3, #32337	; 0x7e51
   15530:	movt	r3, #1
   15534:	movw	r2, #1773	; 0x6ed
   15538:	bl	124b4 <__assert_fail@plt>
   1553c:	movw	r0, #32411	; 0x7e9b
   15540:	movt	r0, #1
   15544:	movw	r1, #28690	; 0x7012
   15548:	movt	r1, #1
   1554c:	movw	r3, #32337	; 0x7e51
   15550:	movt	r3, #1
   15554:	movw	r2, #1774	; 0x6ee
   15558:	bl	124b4 <__assert_fail@plt>
   1555c:	movw	r0, #33208	; 0x81b8
   15560:	movt	r0, #1
   15564:	movw	r1, #28690	; 0x7012
   15568:	movt	r1, #1
   1556c:	movw	r3, #32337	; 0x7e51
   15570:	movt	r3, #1
   15574:	movw	r2, #1784	; 0x6f8
   15578:	bl	124b4 <__assert_fail@plt>
   1557c:	bx	lr

00015580 <flatcc_builder_table_add_union_vector@@Base>:
   15580:	push	{r4, r5, r6, r7, fp, lr}
   15584:	add	fp, sp, #16
   15588:	mov	r6, r0
   1558c:	ldr	r0, [r0, #32]
   15590:	ldrh	r0, [r0, #14]
   15594:	cmp	r0, #3
   15598:	bne	15600 <flatcc_builder_table_add_union_vector@@Base+0x80>
   1559c:	mov	r4, r3
   155a0:	mov	r7, r2
   155a4:	mov	r5, r1
   155a8:	clz	r0, r3
   155ac:	lsr	r0, r0, #5
   155b0:	clz	r1, r2
   155b4:	lsr	r1, r1, #5
   155b8:	cmp	r1, r0
   155bc:	bne	15620 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   155c0:	cmp	r7, #0
   155c4:	beq	155f8 <flatcc_builder_table_add_union_vector@@Base+0x78>
   155c8:	sub	r1, r5, #1
   155cc:	mov	r0, r6
   155d0:	bl	153d8 <flatcc_builder_table_add_offset@@Base>
   155d4:	cmp	r0, #0
   155d8:	beq	15640 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   155dc:	str	r7, [r0]
   155e0:	mov	r0, r6
   155e4:	mov	r1, r5
   155e8:	bl	153d8 <flatcc_builder_table_add_offset@@Base>
   155ec:	cmp	r0, #0
   155f0:	beq	15660 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   155f4:	str	r4, [r0]
   155f8:	mov	r0, #0
   155fc:	pop	{r4, r5, r6, r7, fp, pc}
   15600:	movw	r0, #30759	; 0x7827
   15604:	movt	r0, #1
   15608:	movw	r1, #28690	; 0x7012
   1560c:	movt	r1, #1
   15610:	movw	r3, #31657	; 0x7ba9
   15614:	movt	r3, #1
   15618:	mov	r2, #1536	; 0x600
   1561c:	bl	124b4 <__assert_fail@plt>
   15620:	movw	r0, #31756	; 0x7c0c
   15624:	movt	r0, #1
   15628:	movw	r1, #28690	; 0x7012
   1562c:	movt	r1, #1
   15630:	movw	r3, #31657	; 0x7ba9
   15634:	movt	r3, #1
   15638:	movw	r2, #1537	; 0x601
   1563c:	bl	124b4 <__assert_fail@plt>
   15640:	movw	r0, #31635	; 0x7b93
   15644:	movt	r0, #1
   15648:	movw	r1, #28690	; 0x7012
   1564c:	movt	r1, #1
   15650:	movw	r3, #31657	; 0x7ba9
   15654:	movt	r3, #1
   15658:	movw	r2, #1540	; 0x604
   1565c:	bl	124b4 <__assert_fail@plt>
   15660:	movw	r0, #31635	; 0x7b93
   15664:	movt	r0, #1
   15668:	movw	r1, #28690	; 0x7012
   1566c:	movt	r1, #1
   15670:	movw	r3, #31657	; 0x7ba9
   15674:	movt	r3, #1
   15678:	movw	r2, #1544	; 0x608
   1567c:	bl	124b4 <__assert_fail@plt>

00015680 <flatcc_builder_create_union_vector@@Base>:
   15680:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15684:	add	fp, sp, #24
   15688:	sub	sp, sp, #16
   1568c:	mov	r6, r3
   15690:	mov	r7, r2
   15694:	mov	r4, r1
   15698:	mov	r5, r0
   1569c:	mov	r0, #0
   156a0:	str	r0, [r5]
   156a4:	str	r0, [r5, #4]
   156a8:	mov	r0, r1
   156ac:	bl	14444 <flatcc_builder_start_offset_vector@@Base>
   156b0:	cmp	r0, #0
   156b4:	beq	156c0 <flatcc_builder_create_union_vector@@Base+0x40>
   156b8:	sub	sp, fp, #24
   156bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156c0:	mov	r0, r4
   156c4:	mov	r1, r6
   156c8:	bl	13f90 <flatcc_builder_extend_offset_vector@@Base>
   156cc:	cmp	r0, #0
   156d0:	beq	156b8 <flatcc_builder_create_union_vector@@Base+0x38>
   156d4:	mov	r0, r4
   156d8:	mov	r1, r6
   156dc:	bl	13d0c <flatcc_builder_start_struct@@Base+0x84>
   156e0:	cmp	r0, #0
   156e4:	beq	156b8 <flatcc_builder_create_union_vector@@Base+0x38>
   156e8:	mov	r8, r0
   156ec:	mov	r0, r4
   156f0:	bl	152b8 <flatcc_builder_offset_vector_edit@@Base>
   156f4:	mov	ip, r0
   156f8:	cmp	r6, #0
   156fc:	beq	1572c <flatcc_builder_create_union_vector@@Base+0xac>
   15700:	add	r0, r7, #4
   15704:	mov	r1, r6
   15708:	mov	r2, ip
   1570c:	mov	r7, r8
   15710:	ldrb	r3, [r0, #-4]
   15714:	strb	r3, [r7], #1
   15718:	ldr	r3, [r0]
   1571c:	str	r3, [r2], #4
   15720:	add	r0, r0, #8
   15724:	subs	r1, r1, #1
   15728:	bne	15710 <flatcc_builder_create_union_vector@@Base+0x90>
   1572c:	str	r6, [sp]
   15730:	add	r0, sp, #8
   15734:	mov	r1, r4
   15738:	mov	r2, r8
   1573c:	mov	r3, ip
   15740:	bl	15760 <flatcc_builder_create_union_vector_direct@@Base>
   15744:	ldr	r0, [sp, #8]
   15748:	ldr	r1, [sp, #12]
   1574c:	stm	r5, {r0, r1}
   15750:	mov	r0, r4
   15754:	bl	13c1c <flatcc_builder_end_buffer@@Base+0xc8>
   15758:	sub	sp, fp, #24
   1575c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00015760 <flatcc_builder_create_union_vector_direct@@Base>:
   15760:	push	{r4, r5, r6, r7, fp, lr}
   15764:	add	fp, sp, #16
   15768:	sub	sp, sp, #8
   1576c:	mov	r5, r2
   15770:	mov	r6, r1
   15774:	mov	r4, r0
   15778:	mov	r0, #0
   1577c:	str	r0, [r4]
   15780:	str	r0, [r4, #4]
   15784:	ldr	r7, [fp, #8]
   15788:	mov	r0, r1
   1578c:	mov	r1, r3
   15790:	mov	r2, r7
   15794:	mov	r3, r5
   15798:	bl	150a0 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1579c:	str	r0, [r4, #4]
   157a0:	cmp	r0, #0
   157a4:	beq	157d0 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   157a8:	mvn	r0, #0
   157ac:	mov	r1, #1
   157b0:	str	r1, [sp]
   157b4:	str	r0, [sp, #4]
   157b8:	mov	r0, r6
   157bc:	mov	r1, r5
   157c0:	mov	r2, r7
   157c4:	mov	r3, #1
   157c8:	bl	14ef4 <flatcc_builder_create_vector@@Base>
   157cc:	str	r0, [r4]
   157d0:	sub	sp, fp, #16
   157d4:	pop	{r4, r5, r6, r7, fp, pc}

000157d8 <flatcc_builder_start_union_vector@@Base>:
   157d8:	push	{r4, r5, fp, lr}
   157dc:	add	fp, sp, #8
   157e0:	mov	r4, r0
   157e4:	mov	r1, #4
   157e8:	bl	13a5c <flatcc_builder_start_buffer@@Base+0xbc>
   157ec:	mvn	r5, #0
   157f0:	cmp	r0, #0
   157f4:	beq	15800 <flatcc_builder_start_union_vector@@Base+0x28>
   157f8:	mov	r0, r5
   157fc:	pop	{r4, r5, fp, pc}
   15800:	ldr	r0, [r4, #32]
   15804:	mov	r1, #8
   15808:	str	r1, [r0, #16]
   1580c:	ldr	r0, [r4, #32]
   15810:	mov	r5, #0
   15814:	str	r5, [r0, #20]
   15818:	ldr	r0, [r4, #32]
   1581c:	mov	r1, #7
   15820:	strh	r1, [r0, #14]
   15824:	mov	r0, r4
   15828:	mvn	r1, #3
   1582c:	bl	13cd4 <flatcc_builder_start_struct@@Base+0x4c>
   15830:	mov	r0, r5
   15834:	pop	{r4, r5, fp, pc}

00015838 <flatcc_builder_end_union_vector@@Base>:
   15838:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1583c:	add	fp, sp, #24
   15840:	sub	sp, sp, #16
   15844:	mov	r9, r0
   15848:	mov	r0, #0
   1584c:	str	r0, [r9]
   15850:	str	r0, [r9, #4]
   15854:	ldr	r0, [r1, #32]
   15858:	ldrh	r0, [r0, #14]
   1585c:	cmp	r0, #7
   15860:	bne	15900 <flatcc_builder_end_union_vector@@Base+0xc8>
   15864:	mov	r4, r1
   15868:	mov	r0, r1
   1586c:	bl	15920 <flatcc_builder_union_vector_count@@Base>
   15870:	mov	r6, r0
   15874:	add	r1, r0, r0, lsl #2
   15878:	mov	r0, r4
   1587c:	bl	13d0c <flatcc_builder_start_struct@@Base+0x84>
   15880:	cmp	r0, #0
   15884:	beq	158f8 <flatcc_builder_end_union_vector@@Base+0xc0>
   15888:	mov	r7, r0
   1588c:	add	r8, r0, r6, lsl #2
   15890:	mov	r0, r4
   15894:	bl	1592c <flatcc_builder_union_vector_edit@@Base>
   15898:	cmp	r6, #0
   1589c:	beq	158cc <flatcc_builder_end_union_vector@@Base+0x94>
   158a0:	add	r0, r0, #4
   158a4:	mov	r1, r6
   158a8:	mov	r2, r7
   158ac:	mov	r3, r8
   158b0:	ldrb	r5, [r0, #-4]
   158b4:	strb	r5, [r3], #1
   158b8:	ldr	r5, [r0]
   158bc:	str	r5, [r2], #4
   158c0:	add	r0, r0, #8
   158c4:	subs	r1, r1, #1
   158c8:	bne	158b0 <flatcc_builder_end_union_vector@@Base+0x78>
   158cc:	str	r6, [sp]
   158d0:	add	r0, sp, #8
   158d4:	mov	r1, r4
   158d8:	mov	r2, r8
   158dc:	mov	r3, r7
   158e0:	bl	15760 <flatcc_builder_create_union_vector_direct@@Base>
   158e4:	ldr	r0, [sp, #8]
   158e8:	ldr	r1, [sp, #12]
   158ec:	stm	r9, {r0, r1}
   158f0:	mov	r0, r4
   158f4:	bl	13c1c <flatcc_builder_end_buffer@@Base+0xc8>
   158f8:	sub	sp, fp, #24
   158fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15900:	movw	r0, #31796	; 0x7c34
   15904:	movt	r0, #1
   15908:	movw	r1, #28690	; 0x7012
   1590c:	movt	r1, #1
   15910:	movw	r3, #31846	; 0x7c66
   15914:	movt	r3, #1
   15918:	movw	r2, #1617	; 0x651
   1591c:	bl	124b4 <__assert_fail@plt>

00015920 <flatcc_builder_union_vector_count@@Base>:
   15920:	ldr	r0, [r0, #32]
   15924:	ldr	r0, [r0, #20]
   15928:	bx	lr

0001592c <flatcc_builder_union_vector_edit@@Base>:
   1592c:	ldr	r0, [r0, #16]
   15930:	bx	lr

00015934 <flatcc_builder_extend_union_vector@@Base>:
   15934:	push	{r4, r5, fp, lr}
   15938:	add	fp, sp, #8
   1593c:	mov	r5, r1
   15940:	mov	r4, r0
   15944:	mvn	r2, #-536870912	; 0xe0000000
   15948:	bl	13e10 <flatcc_builder_extend_vector@@Base+0x44>
   1594c:	mov	r1, r0
   15950:	mov	r0, #0
   15954:	cmp	r1, #0
   15958:	popne	{r4, r5, fp, pc}
   1595c:	lsl	r1, r5, #3
   15960:	mov	r0, r4
   15964:	bl	13d0c <flatcc_builder_start_struct@@Base+0x84>
   15968:	pop	{r4, r5, fp, pc}

0001596c <flatcc_builder_truncate_union_vector@@Base>:
   1596c:	push	{fp, lr}
   15970:	mov	fp, sp
   15974:	ldr	r2, [r0, #32]
   15978:	ldrh	r3, [r2, #14]
   1597c:	cmp	r3, #7
   15980:	bne	159b0 <flatcc_builder_truncate_union_vector@@Base+0x44>
   15984:	ldr	r3, [r2, #20]
   15988:	cmp	r3, r1
   1598c:	bcc	159d0 <flatcc_builder_truncate_union_vector@@Base+0x64>
   15990:	sub	r3, r3, r1
   15994:	str	r3, [r2, #20]
   15998:	ldr	r2, [r0, #32]
   1599c:	ldr	r2, [r2, #16]
   159a0:	mul	r1, r2, r1
   159a4:	bl	14298 <flatcc_builder_truncate_vector@@Base+0x84>
   159a8:	mov	r0, #0
   159ac:	pop	{fp, pc}
   159b0:	movw	r0, #31796	; 0x7c34
   159b4:	movt	r0, #1
   159b8:	movw	r1, #28690	; 0x7012
   159bc:	movt	r1, #1
   159c0:	movw	r3, #31929	; 0x7cb9
   159c4:	movt	r3, #1
   159c8:	movw	r2, #1665	; 0x681
   159cc:	bl	124b4 <__assert_fail@plt>
   159d0:	movw	r0, #30360	; 0x7698
   159d4:	movt	r0, #1
   159d8:	movw	r1, #28690	; 0x7012
   159dc:	movt	r1, #1
   159e0:	movw	r3, #31929	; 0x7cb9
   159e4:	movt	r3, #1
   159e8:	movw	r2, #1666	; 0x682
   159ec:	bl	124b4 <__assert_fail@plt>

000159f0 <flatcc_builder_union_vector_push@@Base>:
   159f0:	push	{r4, r5, r6, sl, fp, lr}
   159f4:	add	fp, sp, #16
   159f8:	mov	r4, r2
   159fc:	mov	r5, r1
   15a00:	ldr	r1, [r0, #32]
   15a04:	ldrh	r2, [r1, #14]
   15a08:	cmp	r2, #7
   15a0c:	bne	15a48 <flatcc_builder_union_vector_push@@Base+0x58>
   15a10:	ldr	r2, [r1, #20]
   15a14:	mov	r6, #0
   15a18:	cmn	r2, #-536870911	; 0xe0000001
   15a1c:	beq	15a40 <flatcc_builder_union_vector_push@@Base+0x50>
   15a20:	add	r2, r2, #1
   15a24:	str	r2, [r1, #20]
   15a28:	mov	r1, #8
   15a2c:	bl	13d0c <flatcc_builder_start_struct@@Base+0x84>
   15a30:	cmp	r0, #0
   15a34:	strne	r5, [r0]
   15a38:	strne	r4, [r0, #4]
   15a3c:	movne	r6, r0
   15a40:	mov	r0, r6
   15a44:	pop	{r4, r5, r6, sl, fp, pc}
   15a48:	movw	r0, #31796	; 0x7c34
   15a4c:	movt	r0, #1
   15a50:	movw	r1, #28690	; 0x7012
   15a54:	movt	r1, #1
   15a58:	movw	r3, #31998	; 0x7cfe
   15a5c:	movt	r3, #1
   15a60:	movw	r2, #1677	; 0x68d
   15a64:	bl	124b4 <__assert_fail@plt>

00015a68 <flatcc_builder_append_union_vector@@Base>:
   15a68:	push	{r4, r5, r6, sl, fp, lr}
   15a6c:	add	fp, sp, #16
   15a70:	mov	r6, r0
   15a74:	ldr	r0, [r0, #32]
   15a78:	ldrh	r0, [r0, #14]
   15a7c:	cmp	r0, #7
   15a80:	bne	15ac0 <flatcc_builder_append_union_vector@@Base+0x58>
   15a84:	mov	r5, r2
   15a88:	mov	r4, r1
   15a8c:	mov	r0, r6
   15a90:	mov	r1, r2
   15a94:	mvn	r2, #-536870912	; 0xe0000000
   15a98:	bl	13e10 <flatcc_builder_extend_vector@@Base+0x44>
   15a9c:	mov	r1, r0
   15aa0:	mov	r0, #0
   15aa4:	cmp	r1, #0
   15aa8:	popne	{r4, r5, r6, sl, fp, pc}
   15aac:	lsl	r2, r5, #3
   15ab0:	mov	r0, r6
   15ab4:	mov	r1, r4
   15ab8:	bl	13ed8 <flatcc_builder_vector_push@@Base+0x80>
   15abc:	pop	{r4, r5, r6, sl, fp, pc}
   15ac0:	movw	r0, #31796	; 0x7c34
   15ac4:	movt	r0, #1
   15ac8:	movw	r1, #28690	; 0x7012
   15acc:	movt	r1, #1
   15ad0:	movw	r3, #32107	; 0x7d6b
   15ad4:	movt	r3, #1
   15ad8:	movw	r2, #1692	; 0x69c
   15adc:	bl	124b4 <__assert_fail@plt>

00015ae0 <flatcc_builder_create_string@@Base>:
   15ae0:	push	{r4, r5, r6, r7, fp, lr}
   15ae4:	add	fp, sp, #16
   15ae8:	sub	sp, sp, #80	; 0x50
   15aec:	mov	r5, r2
   15af0:	mov	r6, r1
   15af4:	mov	r4, r0
   15af8:	mov	r0, r2
   15afc:	bl	1365c <flatcc_builder_embed_buffer@@Base+0x1dc>
   15b00:	str	r5, [fp, #-20]	; 0xffffffec
   15b04:	add	r1, r5, #1
   15b08:	mov	r7, #4
   15b0c:	mov	r0, r4
   15b10:	mov	r2, #4
   15b14:	bl	13648 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15b18:	str	r7, [sp, #4]
   15b1c:	sub	r1, fp, #20
   15b20:	str	r1, [sp, #12]
   15b24:	str	r7, [sp, #16]
   15b28:	mov	r1, #1
   15b2c:	str	r1, [sp, #8]
   15b30:	add	r0, r0, #1
   15b34:	cmp	r5, #0
   15b38:	beq	15b54 <flatcc_builder_create_string@@Base+0x74>
   15b3c:	str	r6, [sp, #20]
   15b40:	str	r5, [sp, #24]
   15b44:	mov	r1, #2
   15b48:	str	r1, [sp, #8]
   15b4c:	add	r1, r5, #4
   15b50:	str	r1, [sp, #4]
   15b54:	cmp	r0, #0
   15b58:	beq	15b88 <flatcc_builder_create_string@@Base+0xa8>
   15b5c:	ldmib	sp, {r1, r2}
   15b60:	add	r1, r1, r0
   15b64:	str	r1, [sp, #4]
   15b68:	add	r1, sp, #4
   15b6c:	add	r1, r1, r2, lsl #3
   15b70:	movw	r3, #28160	; 0x6e00
   15b74:	movt	r3, #1
   15b78:	str	r3, [r1, #8]
   15b7c:	str	r0, [r1, #12]
   15b80:	add	r0, r2, #1
   15b84:	str	r0, [sp, #8]
   15b88:	add	r1, sp, #4
   15b8c:	mov	r0, r4
   15b90:	bl	13660 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15b94:	sub	sp, fp, #16
   15b98:	pop	{r4, r5, r6, r7, fp, pc}

00015b9c <flatcc_builder_create_string_str@@Base>:
   15b9c:	push	{r4, r5, fp, lr}
   15ba0:	add	fp, sp, #8
   15ba4:	mov	r4, r1
   15ba8:	mov	r5, r0
   15bac:	mov	r0, r1
   15bb0:	bl	12460 <strlen@plt>
   15bb4:	mov	r2, r0
   15bb8:	mov	r0, r5
   15bbc:	mov	r1, r4
   15bc0:	pop	{r4, r5, fp, lr}
   15bc4:	b	15ae0 <flatcc_builder_create_string@@Base>

00015bc8 <flatcc_builder_create_string_strn@@Base>:
   15bc8:	push	{r4, r5, fp, lr}
   15bcc:	add	fp, sp, #8
   15bd0:	mov	r4, r1
   15bd4:	mov	r5, r0
   15bd8:	mov	r0, r1
   15bdc:	mov	r1, r2
   15be0:	bl	141e8 <flatcc_builder_append_string_strn@@Base+0x30>
   15be4:	mov	r2, r0
   15be8:	mov	r0, r5
   15bec:	mov	r1, r4
   15bf0:	pop	{r4, r5, fp, lr}
   15bf4:	b	15ae0 <flatcc_builder_create_string@@Base>

00015bf8 <flatcc_builder_end_string@@Base>:
   15bf8:	push	{r4, r5, fp, lr}
   15bfc:	add	fp, sp, #8
   15c00:	mov	r4, r0
   15c04:	ldr	r0, [r0, #32]
   15c08:	ldrh	r1, [r0, #14]
   15c0c:	cmp	r1, #6
   15c10:	bne	15c48 <flatcc_builder_end_string@@Base+0x50>
   15c14:	ldr	r2, [r4, #20]
   15c18:	ldr	r0, [r0, #20]
   15c1c:	cmp	r0, r2
   15c20:	bne	15c68 <flatcc_builder_end_string@@Base+0x70>
   15c24:	ldr	r1, [r4, #16]
   15c28:	mov	r0, r4
   15c2c:	bl	15ae0 <flatcc_builder_create_string@@Base>
   15c30:	mov	r5, r0
   15c34:	cmp	r0, #0
   15c38:	movne	r0, r4
   15c3c:	blne	13c1c <flatcc_builder_end_buffer@@Base+0xc8>
   15c40:	mov	r0, r5
   15c44:	pop	{r4, r5, fp, pc}
   15c48:	movw	r0, #30007	; 0x7537
   15c4c:	movt	r0, #1
   15c50:	movw	r1, #28690	; 0x7012
   15c54:	movt	r1, #1
   15c58:	movw	r3, #32234	; 0x7dea
   15c5c:	movt	r3, #1
   15c60:	movw	r2, #1732	; 0x6c4
   15c64:	bl	124b4 <__assert_fail@plt>
   15c68:	movw	r0, #32301	; 0x7e2d
   15c6c:	movt	r0, #1
   15c70:	movw	r1, #28690	; 0x7012
   15c74:	movt	r1, #1
   15c78:	movw	r3, #32234	; 0x7dea
   15c7c:	movt	r3, #1
   15c80:	movw	r2, #1733	; 0x6c5
   15c84:	bl	124b4 <__assert_fail@plt>

00015c88 <flatcc_builder_string_edit@@Base>:
   15c88:	ldr	r0, [r0, #16]
   15c8c:	bx	lr

00015c90 <flatcc_builder_string_len@@Base>:
   15c90:	ldr	r0, [r0, #32]
   15c94:	ldr	r0, [r0, #20]
   15c98:	bx	lr
   15c9c:	push	{r4, r5, r6, sl, fp, lr}
   15ca0:	add	fp, sp, #16
   15ca4:	mov	r5, r3
   15ca8:	mov	r4, r0
   15cac:	ldr	r0, [r0, #20]
   15cb0:	ldr	r3, [r4, #24]
   15cb4:	add	r0, r2, r0
   15cb8:	sub	r0, r0, #1
   15cbc:	rsb	r2, r2, #0
   15cc0:	and	r6, r0, r2
   15cc4:	add	r0, r6, r1
   15cc8:	str	r0, [r4, #20]
   15ccc:	cmp	r0, r3
   15cd0:	bcc	15cf4 <flatcc_builder_string_len@@Base+0x64>
   15cd4:	add	r1, r0, #1
   15cd8:	mov	r0, r4
   15cdc:	movw	r2, #65532	; 0xfffc
   15ce0:	bl	16140 <flatcc_builder_get_emit_context@@Base+0x18>
   15ce4:	mov	r1, r0
   15ce8:	mov	r0, #0
   15cec:	cmp	r1, #0
   15cf0:	popne	{r4, r5, r6, sl, fp, pc}
   15cf4:	ldr	r0, [r4, #4]
   15cf8:	add	r0, r0, r5, lsl #1
   15cfc:	add	r1, r6, #4
   15d00:	strh	r1, [r0]
   15d04:	ldrh	r0, [r4, #8]
   15d08:	cmp	r0, r5
   15d0c:	addls	r0, r5, #1
   15d10:	strhls	r0, [r4, #8]
   15d14:	ldr	r0, [r4, #16]
   15d18:	add	r0, r0, r6
   15d1c:	pop	{r4, r5, r6, sl, fp, pc}

00015d20 <flatcc_builder_table_edit@@Base>:
   15d20:	ldr	r2, [r0, #32]
   15d24:	ldrh	r2, [r2, #14]
   15d28:	cmp	r2, #3
   15d2c:	ldreq	r2, [r0, #16]
   15d30:	ldreq	r0, [r0, #20]
   15d34:	addeq	r0, r2, r0
   15d38:	subeq	r0, r0, r1
   15d3c:	bxeq	lr
   15d40:	push	{fp, lr}
   15d44:	mov	fp, sp
   15d48:	movw	r0, #30759	; 0x7827
   15d4c:	movt	r0, #1
   15d50:	movw	r1, #28690	; 0x7012
   15d54:	movt	r1, #1
   15d58:	movw	r3, #32479	; 0x7edf
   15d5c:	movt	r3, #1
   15d60:	movw	r2, #1794	; 0x702
   15d64:	bl	124b4 <__assert_fail@plt>

00015d68 <flatcc_builder_table_add_copy@@Base>:
   15d68:	push	{r4, r5, r6, sl, fp, lr}
   15d6c:	add	fp, sp, #16
   15d70:	mov	r4, r3
   15d74:	mov	r5, r2
   15d78:	ldr	r3, [fp, #8]
   15d7c:	mov	r2, r4
   15d80:	bl	1549c <flatcc_builder_table_add@@Base>
   15d84:	mov	r6, r0
   15d88:	cmp	r0, #0
   15d8c:	beq	15da0 <flatcc_builder_table_add_copy@@Base+0x38>
   15d90:	mov	r0, r6
   15d94:	mov	r1, r5
   15d98:	mov	r2, r4
   15d9c:	bl	12400 <memcpy@plt>
   15da0:	mov	r0, r6
   15da4:	pop	{r4, r5, r6, sl, fp, pc}
   15da8:	push	{r4, r5, r6, r7, fp, lr}
   15dac:	add	fp, sp, #16
   15db0:	mov	r5, r1
   15db4:	mov	r4, r0
   15db8:	ldr	r0, [r0, #20]
   15dbc:	ldr	r1, [r4, #24]
   15dc0:	add	r0, r0, #3
   15dc4:	bic	r7, r0, #3
   15dc8:	add	r6, r7, #4
   15dcc:	str	r6, [r4, #20]
   15dd0:	cmp	r6, r1
   15dd4:	bls	15df8 <flatcc_builder_table_add_copy@@Base+0x90>
   15dd8:	mov	r0, r4
   15ddc:	mov	r1, r6
   15de0:	movw	r2, #65532	; 0xfffc
   15de4:	bl	16140 <flatcc_builder_get_emit_context@@Base+0x18>
   15de8:	mov	r1, r0
   15dec:	mov	r0, #0
   15df0:	cmp	r1, #0
   15df4:	popne	{r4, r5, r6, r7, fp, pc}
   15df8:	ldr	r0, [r4, #4]
   15dfc:	add	r0, r0, r5, lsl #1
   15e00:	strh	r6, [r0]
   15e04:	ldrh	r0, [r4, #8]
   15e08:	cmp	r0, r5
   15e0c:	addls	r0, r5, #1
   15e10:	strhls	r0, [r4, #8]
   15e14:	ldr	r0, [r4]
   15e18:	add	r1, r0, #2
   15e1c:	str	r1, [r4]
   15e20:	strh	r7, [r0]
   15e24:	ldr	r0, [r4, #16]
   15e28:	add	r0, r0, r7
   15e2c:	pop	{r4, r5, r6, r7, fp, pc}

00015e30 <flatcc_builder_push_buffer_alignment@@Base>:
   15e30:	ldrh	r1, [r0, #128]	; 0x80
   15e34:	mov	r2, #4
   15e38:	strh	r2, [r0, #128]	; 0x80
   15e3c:	mov	r0, r1
   15e40:	bx	lr

00015e44 <flatcc_builder_pop_buffer_alignment@@Base>:
   15e44:	b	138c4 <flatcc_builder_create_buffer@@Base+0x1d0>

00015e48 <flatcc_builder_get_buffer_alignment@@Base>:
   15e48:	ldrh	r0, [r0, #128]	; 0x80
   15e4c:	bx	lr

00015e50 <flatcc_builder_set_vtable_clustering@@Base>:
   15e50:	clz	r1, r1
   15e54:	lsr	r1, r1, #5
   15e58:	str	r1, [r0, #180]	; 0xb4
   15e5c:	bx	lr

00015e60 <flatcc_builder_set_block_align@@Base>:
   15e60:	strh	r1, [r0, #132]	; 0x84
   15e64:	bx	lr

00015e68 <flatcc_builder_get_level@@Base>:
   15e68:	ldr	r0, [r0, #156]	; 0x9c
   15e6c:	bx	lr

00015e70 <flatcc_builder_set_max_level@@Base>:
   15e70:	str	r1, [r0, #176]	; 0xb0
   15e74:	ldr	r2, [r0, #160]	; 0xa0
   15e78:	cmp	r2, r1
   15e7c:	strlt	r1, [r0, #160]	; 0xa0
   15e80:	bx	lr

00015e84 <flatcc_builder_get_buffer_size@@Base>:
   15e84:	ldr	r1, [r0, #136]	; 0x88
   15e88:	ldr	r0, [r0, #140]	; 0x8c
   15e8c:	sub	r0, r0, r1
   15e90:	bx	lr

00015e94 <flatcc_builder_get_buffer_start@@Base>:
   15e94:	ldr	r0, [r0, #136]	; 0x88
   15e98:	bx	lr

00015e9c <flatcc_builder_get_buffer_end@@Base>:
   15e9c:	ldr	r0, [r0, #140]	; 0x8c
   15ea0:	bx	lr

00015ea4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   15ea4:	str	r1, [r0, #172]	; 0xac
   15ea8:	bx	lr

00015eac <flatcc_builder_set_identifier@@Base>:
   15eac:	movw	r2, #28160	; 0x6e00
   15eb0:	movt	r2, #1
   15eb4:	cmp	r1, #0
   15eb8:	movne	r2, r1
   15ebc:	ldr	r1, [r2]
   15ec0:	str	r1, [r0, #168]	; 0xa8
   15ec4:	bx	lr

00015ec8 <flatcc_builder_get_type@@Base>:
   15ec8:	ldr	r0, [r0, #32]
   15ecc:	cmp	r0, #0
   15ed0:	ldrhne	r0, [r0, #14]
   15ed4:	moveq	r0, #0
   15ed8:	bx	lr

00015edc <flatcc_builder_get_type_at@@Base>:
   15edc:	mov	r2, r0
   15ee0:	mov	r0, #0
   15ee4:	cmp	r1, #1
   15ee8:	ldrge	r3, [r2, #156]	; 0x9c
   15eec:	cmpge	r3, r1
   15ef0:	bge	15ef8 <flatcc_builder_get_type_at@@Base+0x1c>
   15ef4:	bx	lr
   15ef8:	sub	r0, r1, r3
   15efc:	add	r0, r0, r0, lsl #3
   15f00:	ldr	r1, [r2, #32]
   15f04:	add	r0, r1, r0, lsl #2
   15f08:	ldrh	r0, [r0, #14]
   15f0c:	bx	lr

00015f10 <flatcc_builder_get_direct_buffer@@Base>:
   15f10:	ldr	r2, [r0, #184]	; 0xb8
   15f14:	cmp	r2, #0
   15f18:	beq	15f24 <flatcc_builder_get_direct_buffer@@Base+0x14>
   15f1c:	add	r0, r0, #188	; 0xbc
   15f20:	b	15f38 <flatcc_builder_get_direct_buffer@@Base+0x28>
   15f24:	cmp	r1, #0
   15f28:	movne	r0, #0
   15f2c:	strne	r0, [r1]
   15f30:	mov	r0, #0
   15f34:	bx	lr
   15f38:	ldm	r0, {r2, r3}
   15f3c:	cmp	r2, r3
   15f40:	beq	15f54 <flatcc_builder_get_direct_buffer@@Base+0x44>
   15f44:	mov	r0, #0
   15f48:	cmp	r1, #0
   15f4c:	strne	r0, [r1]
   15f50:	bx	lr
   15f54:	cmp	r1, #0
   15f58:	ldrne	r2, [r0, #24]
   15f5c:	strne	r2, [r1]
   15f60:	ldr	r0, [r0, #8]
   15f64:	bx	lr

00015f68 <flatcc_builder_copy_buffer@@Base>:
   15f68:	push	{fp, lr}
   15f6c:	mov	fp, sp
   15f70:	ldr	r3, [r0, #184]	; 0xb8
   15f74:	cmp	r3, #0
   15f78:	beq	15fac <flatcc_builder_copy_buffer@@Base+0x44>
   15f7c:	add	r0, r0, #188	; 0xbc
   15f80:	bl	16684 <flatcc_emitter_copy_buffer@@Base>
   15f84:	cmp	r0, #0
   15f88:	popne	{fp, pc}
   15f8c:	movw	r0, #29286	; 0x7266
   15f90:	movt	r0, #1
   15f94:	movw	r1, #28690	; 0x7012
   15f98:	movt	r1, #1
   15f9c:	movw	r3, #32618	; 0x7f6a
   15fa0:	movt	r3, #1
   15fa4:	movw	r2, #1926	; 0x786
   15fa8:	bl	124b4 <__assert_fail@plt>
   15fac:	mov	r0, #0
   15fb0:	pop	{fp, pc}

00015fb4 <flatcc_builder_finalize_buffer@@Base>:
   15fb4:	push	{r4, r5, r6, sl, fp, lr}
   15fb8:	add	fp, sp, #16
   15fbc:	mov	r6, r1
   15fc0:	mov	r4, r0
   15fc4:	bl	15e84 <flatcc_builder_get_buffer_size@@Base>
   15fc8:	mov	r5, r0
   15fcc:	cmp	r6, #0
   15fd0:	strne	r5, [r6]
   15fd4:	mov	r0, r5
   15fd8:	bl	1243c <malloc@plt>
   15fdc:	cmp	r0, #0
   15fe0:	beq	16024 <flatcc_builder_finalize_buffer@@Base+0x70>
   15fe4:	mov	r6, r0
   15fe8:	mov	r0, r4
   15fec:	mov	r1, r6
   15ff0:	mov	r2, r5
   15ff4:	bl	15f68 <flatcc_builder_copy_buffer@@Base>
   15ff8:	cmp	r0, #0
   15ffc:	movne	r0, r6
   16000:	popne	{r4, r5, r6, sl, fp, pc}
   16004:	movw	r0, #33208	; 0x81b8
   16008:	movt	r0, #1
   1600c:	movw	r1, #28690	; 0x7012
   16010:	movt	r1, #1
   16014:	movw	r3, #32687	; 0x7faf
   16018:	movt	r3, #1
   1601c:	movw	r2, #1948	; 0x79c
   16020:	bl	124b4 <__assert_fail@plt>
   16024:	movw	r0, #33208	; 0x81b8
   16028:	movt	r0, #1
   1602c:	movw	r1, #28690	; 0x7012
   16030:	movt	r1, #1
   16034:	movw	r3, #32687	; 0x7faf
   16038:	movt	r3, #1
   1603c:	movw	r2, #1944	; 0x798
   16040:	bl	124b4 <__assert_fail@plt>

00016044 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16044:	push	{r4, r5, r6, r7, fp, lr}
   16048:	add	fp, sp, #16
   1604c:	mov	r4, r1
   16050:	mov	r5, r0
   16054:	bl	15e84 <flatcc_builder_get_buffer_size@@Base>
   16058:	mov	r6, r0
   1605c:	cmp	r4, #0
   16060:	strne	r6, [r4]
   16064:	mov	r0, r5
   16068:	bl	15e48 <flatcc_builder_get_buffer_alignment@@Base>
   1606c:	add	r1, r6, r0
   16070:	sub	r1, r1, #1
   16074:	rsb	r2, r0, #0
   16078:	and	r7, r1, r2
   1607c:	mov	r1, r7
   16080:	bl	160cc <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   16084:	cmp	r0, #0
   16088:	beq	160b8 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   1608c:	mov	r6, r0
   16090:	mov	r0, r5
   16094:	mov	r1, r6
   16098:	mov	r2, r7
   1609c:	bl	15f68 <flatcc_builder_copy_buffer@@Base>
   160a0:	cmp	r0, #0
   160a4:	beq	160b0 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   160a8:	mov	r0, r6
   160ac:	pop	{r4, r5, r6, r7, fp, pc}
   160b0:	mov	r0, r6
   160b4:	bl	123f4 <free@plt>
   160b8:	mov	r6, #0
   160bc:	cmp	r4, #0
   160c0:	strne	r6, [r4]
   160c4:	mov	r0, r6
   160c8:	pop	{r4, r5, r6, r7, fp, pc}
   160cc:	push	{fp, lr}
   160d0:	mov	fp, sp
   160d4:	sub	sp, sp, #8
   160d8:	mov	r2, r1
   160dc:	mov	r1, r0
   160e0:	mov	r0, #0
   160e4:	str	r0, [sp, #4]
   160e8:	cmp	r1, #4
   160ec:	movls	r1, #4
   160f0:	add	r0, sp, #4
   160f4:	bl	12478 <posix_memalign@plt>
   160f8:	cmp	r0, #0
   160fc:	ldrne	r0, [sp, #4]
   16100:	cmpne	r0, #0
   16104:	beq	16114 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   16108:	bl	123f4 <free@plt>
   1610c:	mov	r0, #0
   16110:	str	r0, [sp, #4]
   16114:	ldr	r0, [sp, #4]
   16118:	mov	sp, fp
   1611c:	pop	{fp, pc}

00016120 <flatcc_builder_aligned_alloc@@Base>:
   16120:	b	160cc <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00016124 <flatcc_builder_aligned_free@@Base>:
   16124:	b	123f4 <free@plt>

00016128 <flatcc_builder_get_emit_context@@Base>:
   16128:	ldr	r0, [r0, #36]	; 0x24
   1612c:	bx	lr
   16130:	ldr	r0, [r0, #140]	; 0x8c
   16134:	sub	r1, r1, #1
   16138:	and	r0, r0, r1
   1613c:	bx	lr
   16140:	push	{r4, r5, r6, sl, fp, lr}
   16144:	add	fp, sp, #16
   16148:	sub	sp, sp, #8
   1614c:	mov	r6, r2
   16150:	mov	r5, r0
   16154:	ldr	r2, [r0, #28]
   16158:	ldr	r0, [r0, #40]	; 0x28
   1615c:	ldr	r4, [r5, #48]	; 0x30
   16160:	mov	r3, #1
   16164:	str	r3, [sp]
   16168:	add	r2, r2, r1
   1616c:	add	r1, r5, #60	; 0x3c
   16170:	mov	r3, #1
   16174:	blx	r4
   16178:	mov	r1, r0
   1617c:	mvn	r0, #0
   16180:	cmp	r1, #0
   16184:	beq	16190 <flatcc_builder_get_emit_context@@Base+0x68>
   16188:	sub	sp, fp, #16
   1618c:	pop	{r4, r5, r6, sl, fp, pc}
   16190:	mov	r0, r5
   16194:	mov	r1, r6
   16198:	bl	13cd4 <flatcc_builder_start_struct@@Base+0x4c>
   1619c:	mov	r0, #0
   161a0:	sub	sp, fp, #16
   161a4:	pop	{r4, r5, r6, sl, fp, pc}
   161a8:	push	{r4, r5, r6, sl, fp, lr}
   161ac:	add	fp, sp, #16
   161b0:	sub	sp, sp, #8
   161b4:	ldr	r2, [r0, #124]	; 0x7c
   161b8:	cmp	r2, #0
   161bc:	bne	1625c <flatcc_builder_get_emit_context@@Base+0x134>
   161c0:	mov	r4, r0
   161c4:	mov	r0, #0
   161c8:	str	r0, [sp]
   161cc:	mov	r6, #16
   161d0:	mov	r0, r4
   161d4:	mov	r1, #6
   161d8:	mov	r3, #16
   161dc:	bl	132f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   161e0:	mvn	r5, #0
   161e4:	cmp	r0, #0
   161e8:	beq	16250 <flatcc_builder_get_emit_context@@Base+0x128>
   161ec:	add	r1, r4, #92	; 0x5c
   161f0:	str	r6, [r4, #124]	; 0x7c
   161f4:	ldr	r0, [r4, #40]	; 0x28
   161f8:	ldr	ip, [r4, #48]	; 0x30
   161fc:	mov	r2, #5
   16200:	str	r2, [sp]
   16204:	mov	r6, #256	; 0x100
   16208:	mov	r2, #256	; 0x100
   1620c:	mov	r3, #1
   16210:	blx	ip
   16214:	cmp	r0, #0
   16218:	bne	16250 <flatcc_builder_get_emit_context@@Base+0x128>
   1621c:	ldr	r0, [r4, #96]	; 0x60
   16220:	mov	r1, r6
   16224:	lsl	r6, r6, #1
   16228:	cmp	r0, r1, lsl #1
   1622c:	bcs	16220 <flatcc_builder_get_emit_context@@Base+0xf8>
   16230:	lsr	r1, r1, #2
   16234:	mvn	r0, #0
   16238:	mov	r2, #1
   1623c:	add	r0, r0, #1
   16240:	cmp	r1, r2, lsl r0
   16244:	bhi	1623c <flatcc_builder_get_emit_context@@Base+0x114>
   16248:	str	r0, [r4, #116]	; 0x74
   1624c:	mov	r5, #0
   16250:	mov	r0, r5
   16254:	sub	sp, fp, #16
   16258:	pop	{r4, r5, r6, sl, fp, pc}
   1625c:	movw	r0, #33148	; 0x817c
   16260:	movt	r0, #1
   16264:	movw	r1, #28690	; 0x7012
   16268:	movt	r1, #1
   1626c:	movw	r3, #33163	; 0x818b
   16270:	movt	r3, #1
   16274:	movw	r2, #342	; 0x156
   16278:	bl	124b4 <__assert_fail@plt>

0001627c <flatcc_emitter_recycle_page@@Base>:
   1627c:	ldr	ip, [r0]
   16280:	mvn	r2, #0
   16284:	cmp	ip, r1
   16288:	ldrne	r3, [r0, #4]
   1628c:	cmpne	r3, r1
   16290:	bne	1629c <flatcc_emitter_recycle_page@@Base+0x20>
   16294:	mov	r0, r2
   16298:	bx	lr
   1629c:	ldr	r2, [r1, #2944]	; 0xb80
   162a0:	ldr	r3, [r1, #2948]	; 0xb84
   162a4:	str	r3, [r2, #2948]	; 0xb84
   162a8:	ldr	r2, [r1, #2944]	; 0xb80
   162ac:	ldr	r3, [r1, #2948]	; 0xb84
   162b0:	str	r2, [r3, #2944]	; 0xb80
   162b4:	ldr	r2, [ip, #2948]	; 0xb84
   162b8:	str	r2, [r1, #2948]	; 0xb84
   162bc:	ldr	r0, [r0]
   162c0:	str	r0, [r1, #2944]	; 0xb80
   162c4:	str	r1, [r2, #2944]	; 0xb80
   162c8:	ldr	r0, [r1, #2944]	; 0xb80
   162cc:	str	r1, [r0, #2948]	; 0xb84
   162d0:	mov	r2, #0
   162d4:	mov	r0, r2
   162d8:	bx	lr

000162dc <flatcc_emitter_reset@@Base>:
   162dc:	push	{r4, sl, fp, lr}
   162e0:	add	fp, sp, #8
   162e4:	mov	r4, r0
   162e8:	ldr	r0, [r0]
   162ec:	cmp	r0, #0
   162f0:	beq	16394 <flatcc_emitter_reset@@Base+0xb8>
   162f4:	mov	r1, #1472	; 0x5c0
   162f8:	add	r2, r0, #1472	; 0x5c0
   162fc:	stmib	r4, {r0, r2}
   16300:	str	r1, [r4, #12]
   16304:	str	r2, [r4, #16]
   16308:	str	r1, [r4, #20]
   1630c:	movw	r1, #64064	; 0xfa40
   16310:	movt	r1, #65535	; 0xffff
   16314:	str	r1, [r0, #2952]	; 0xb88
   16318:	ldr	r0, [r4, #32]
   1631c:	cmp	r0, #0
   16320:	ldreq	r0, [r4, #24]
   16324:	streq	r0, [r4, #32]
   16328:	add	r2, r4, #24
   1632c:	ldm	r2, {r0, r1, r2}
   16330:	mov	r3, #0
   16334:	str	r3, [r4, #24]
   16338:	add	r2, r2, r2, lsl #1
   1633c:	lsr	r2, r2, #2
   16340:	add	r0, r2, r0, lsr #2
   16344:	str	r0, [r4, #32]
   16348:	cmp	r1, r0, lsl #1
   1634c:	bls	16394 <flatcc_emitter_reset@@Base+0xb8>
   16350:	ldr	r2, [r4]
   16354:	ldr	r1, [r4, #4]
   16358:	ldr	r0, [r1, #2944]	; 0xb80
   1635c:	cmp	r0, r2
   16360:	popeq	{r4, sl, fp, pc}
   16364:	ldr	r2, [r0, #2944]	; 0xb80
   16368:	str	r2, [r1, #2944]	; 0xb80
   1636c:	ldr	r1, [r0, #2944]	; 0xb80
   16370:	ldr	r2, [r4, #4]
   16374:	str	r2, [r1, #2948]	; 0xb84
   16378:	bl	123f4 <free@plt>
   1637c:	ldr	r0, [r4, #28]
   16380:	ldr	r1, [r4, #32]
   16384:	sub	r0, r0, #2944	; 0xb80
   16388:	str	r0, [r4, #28]
   1638c:	cmp	r0, r1, lsl #1
   16390:	bhi	16350 <flatcc_emitter_reset@@Base+0x74>
   16394:	pop	{r4, sl, fp, pc}

00016398 <flatcc_emitter_clear@@Base>:
   16398:	push	{r4, r5, r6, sl, fp, lr}
   1639c:	add	fp, sp, #16
   163a0:	ldr	r5, [r0]
   163a4:	cmp	r5, #0
   163a8:	popeq	{r4, r5, r6, sl, fp, pc}
   163ac:	mov	r4, r0
   163b0:	ldr	r0, [r5, #2948]	; 0xb84
   163b4:	mov	r6, #0
   163b8:	str	r6, [r0, #2944]	; 0xb80
   163bc:	b	163cc <flatcc_emitter_clear@@Base+0x34>
   163c0:	mov	r5, r0
   163c4:	ldr	r0, [r0, #2948]	; 0xb84
   163c8:	bl	123f4 <free@plt>
   163cc:	ldr	r0, [r5, #2944]	; 0xb80
   163d0:	cmp	r0, #0
   163d4:	bne	163c0 <flatcc_emitter_clear@@Base+0x28>
   163d8:	mov	r0, r5
   163dc:	bl	123f4 <free@plt>
   163e0:	vmov.i32	q8, #0	; 0x00000000
   163e4:	add	r0, r4, #16
   163e8:	vst1.32	{d16-d17}, [r0]
   163ec:	mov	r0, #32
   163f0:	vst1.32	{d16-d17}, [r4], r0
   163f4:	str	r6, [r4]
   163f8:	pop	{r4, r5, r6, sl, fp, pc}

000163fc <flatcc_emitter@@Base>:
   163fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16400:	add	fp, sp, #24
   16404:	mov	r4, r2
   16408:	mov	r5, r1
   1640c:	mov	r6, r0
   16410:	ldr	r1, [r0, #24]
   16414:	ldr	r0, [fp, #8]
   16418:	add	r1, r1, r0
   1641c:	str	r1, [r6, #24]
   16420:	mov	r1, r6
   16424:	cmn	r3, #1
   16428:	ble	16468 <flatcc_emitter@@Base+0x6c>
   1642c:	ldr	r2, [r1, #20]!
   16430:	cmp	r2, r0
   16434:	bcs	164b0 <flatcc_emitter@@Base+0xb4>
   16438:	mov	r8, #0
   1643c:	cmp	r4, #0
   16440:	beq	16500 <flatcc_emitter@@Base+0x104>
   16444:	ldm	r5, {r1, r2}
   16448:	mov	r0, r6
   1644c:	bl	165cc <flatcc_emitter@@Base+0x1d0>
   16450:	cmp	r0, #0
   16454:	bne	164a4 <flatcc_emitter@@Base+0xa8>
   16458:	subs	r4, r4, #1
   1645c:	add	r5, r5, #8
   16460:	bne	16444 <flatcc_emitter@@Base+0x48>
   16464:	b	16500 <flatcc_emitter@@Base+0x104>
   16468:	ldr	r2, [r1, #12]!
   1646c:	cmp	r2, r0
   16470:	bcs	164c0 <flatcc_emitter@@Base+0xc4>
   16474:	add	r0, r5, r4, lsl #3
   16478:	sub	r5, r0, #4
   1647c:	rsb	r4, r4, #1
   16480:	cmp	r4, #1
   16484:	beq	16508 <flatcc_emitter@@Base+0x10c>
   16488:	ldmda	r5, {r1, r2}
   1648c:	mov	r0, r6
   16490:	bl	16514 <flatcc_emitter@@Base+0x118>
   16494:	sub	r5, r5, #8
   16498:	add	r4, r4, #1
   1649c:	cmp	r0, #0
   164a0:	beq	16480 <flatcc_emitter@@Base+0x84>
   164a4:	mvn	r8, #0
   164a8:	mov	r0, r8
   164ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   164b0:	ldr	r7, [r6, #16]
   164b4:	add	r3, r7, r0
   164b8:	str	r3, [r6, #16]
   164bc:	b	164cc <flatcc_emitter@@Base+0xd0>
   164c0:	ldr	r3, [r6, #8]
   164c4:	sub	r7, r3, r0
   164c8:	str	r7, [r6, #8]
   164cc:	sub	r0, r2, r0
   164d0:	str	r0, [r1]
   164d4:	mov	r8, #0
   164d8:	cmp	r4, #0
   164dc:	beq	16500 <flatcc_emitter@@Base+0x104>
   164e0:	ldm	r5, {r1, r2}
   164e4:	mov	r0, r7
   164e8:	bl	12400 <memcpy@plt>
   164ec:	ldr	r0, [r5, #4]
   164f0:	add	r7, r7, r0
   164f4:	add	r5, r5, #8
   164f8:	subs	r4, r4, #1
   164fc:	bne	164e0 <flatcc_emitter@@Base+0xe4>
   16500:	mov	r0, r8
   16504:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16508:	mov	r8, #0
   1650c:	mov	r0, r8
   16510:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16514:	push	{r4, r5, r6, r7, fp, lr}
   16518:	add	fp, sp, #16
   1651c:	cmp	r2, #0
   16520:	moveq	r0, #0
   16524:	popeq	{r4, r5, r6, r7, fp, pc}
   16528:	mov	r4, r2
   1652c:	mov	r5, r0
   16530:	clz	r0, r2
   16534:	lsr	r7, r0, #5
   16538:	add	r6, r1, r2
   1653c:	b	16578 <flatcc_emitter@@Base+0x17c>
   16540:	sub	r0, r0, r7
   16544:	str	r0, [r5, #12]
   16548:	ldr	r0, [r5, #8]
   1654c:	sub	r0, r0, r7
   16550:	str	r0, [r5, #8]
   16554:	sub	r6, r6, r7
   16558:	mov	r1, r6
   1655c:	mov	r2, r7
   16560:	bl	12400 <memcpy@plt>
   16564:	subs	r4, r4, r7
   16568:	clz	r0, r4
   1656c:	lsr	r7, r0, #5
   16570:	moveq	r0, #0
   16574:	popeq	{r4, r5, r6, r7, fp, pc}
   16578:	ldr	r0, [r5, #12]
   1657c:	cmp	r4, r0
   16580:	bls	165b0 <flatcc_emitter@@Base+0x1b4>
   16584:	cmp	r0, #0
   16588:	bne	165b8 <flatcc_emitter@@Base+0x1bc>
   1658c:	mov	r0, r5
   16590:	bl	16740 <flatcc_emitter_copy_buffer@@Base+0xbc>
   16594:	cmp	r0, #0
   16598:	mov	r1, r0
   1659c:	movwne	r1, #1
   165a0:	orr	r1, r1, r7
   165a4:	tst	r1, #1
   165a8:	beq	16578 <flatcc_emitter@@Base+0x17c>
   165ac:	b	165c0 <flatcc_emitter@@Base+0x1c4>
   165b0:	mov	r7, r4
   165b4:	b	16540 <flatcc_emitter@@Base+0x144>
   165b8:	mov	r7, r0
   165bc:	b	16540 <flatcc_emitter@@Base+0x144>
   165c0:	cmp	r0, #0
   165c4:	mvnne	r0, #0
   165c8:	pop	{r4, r5, r6, r7, fp, pc}
   165cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   165d0:	add	fp, sp, #24
   165d4:	cmp	r2, #0
   165d8:	moveq	r0, #0
   165dc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   165e0:	mov	r4, r2
   165e4:	mov	r8, r1
   165e8:	mov	r6, r0
   165ec:	clz	r0, r2
   165f0:	lsr	r5, r0, #5
   165f4:	b	16638 <flatcc_emitter@@Base+0x23c>
   165f8:	ldr	r0, [r6, #16]
   165fc:	mov	r1, r8
   16600:	mov	r2, r7
   16604:	bl	12400 <memcpy@plt>
   16608:	ldr	r0, [r6, #16]
   1660c:	ldr	r1, [r6, #20]
   16610:	add	r0, r0, r7
   16614:	sub	r1, r1, r7
   16618:	str	r0, [r6, #16]
   1661c:	str	r1, [r6, #20]
   16620:	add	r8, r8, r7
   16624:	subs	r4, r4, r7
   16628:	clz	r0, r4
   1662c:	lsr	r5, r0, #5
   16630:	moveq	r0, #0
   16634:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16638:	ldr	r7, [r6, #20]
   1663c:	cmp	r4, r7
   16640:	bls	16670 <flatcc_emitter@@Base+0x274>
   16644:	cmp	r7, #0
   16648:	bne	165f8 <flatcc_emitter@@Base+0x1fc>
   1664c:	mov	r0, r6
   16650:	bl	1682c <flatcc_emitter_copy_buffer@@Base+0x1a8>
   16654:	cmp	r0, #0
   16658:	mov	r1, r0
   1665c:	movwne	r1, #1
   16660:	orr	r1, r1, r5
   16664:	tst	r1, #1
   16668:	beq	16638 <flatcc_emitter@@Base+0x23c>
   1666c:	b	16678 <flatcc_emitter@@Base+0x27c>
   16670:	mov	r7, r4
   16674:	b	165f8 <flatcc_emitter@@Base+0x1fc>
   16678:	cmp	r0, #0
   1667c:	mvnne	r0, #0
   16680:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016684 <flatcc_emitter_copy_buffer@@Base>:
   16684:	push	{r4, r5, r6, sl, fp, lr}
   16688:	add	fp, sp, #16
   1668c:	mov	r3, r2
   16690:	ldr	r2, [r0, #24]
   16694:	mov	r5, #0
   16698:	cmp	r2, r3
   1669c:	bhi	16724 <flatcc_emitter_copy_buffer@@Base+0xa0>
   166a0:	mov	r4, r0
   166a4:	ldr	r0, [r0]
   166a8:	cmp	r0, #0
   166ac:	beq	16724 <flatcc_emitter_copy_buffer@@Base+0xa0>
   166b0:	mov	r6, r1
   166b4:	ldr	r1, [r4, #4]
   166b8:	cmp	r0, r1
   166bc:	beq	1672c <flatcc_emitter_copy_buffer@@Base+0xa8>
   166c0:	ldr	r1, [r4, #8]
   166c4:	ldr	r0, [r4, #12]
   166c8:	rsb	r5, r0, #2944	; 0xb80
   166cc:	mov	r0, r6
   166d0:	mov	r2, r5
   166d4:	bl	12400 <memcpy@plt>
   166d8:	add	r5, r6, r5
   166dc:	ldm	r4, {r0, r1}
   166e0:	ldr	r6, [r0, #2944]	; 0xb80
   166e4:	cmp	r6, r1
   166e8:	beq	16710 <flatcc_emitter_copy_buffer@@Base+0x8c>
   166ec:	mov	r0, r5
   166f0:	mov	r1, r6
   166f4:	mov	r2, #2944	; 0xb80
   166f8:	bl	12400 <memcpy@plt>
   166fc:	add	r5, r5, #2944	; 0xb80
   16700:	ldr	r6, [r6, #2944]	; 0xb80
   16704:	ldr	r0, [r4, #4]
   16708:	cmp	r6, r0
   1670c:	bne	166ec <flatcc_emitter_copy_buffer@@Base+0x68>
   16710:	ldr	r0, [r4, #20]
   16714:	rsb	r2, r0, #2944	; 0xb80
   16718:	mov	r0, r5
   1671c:	mov	r1, r6
   16720:	bl	12400 <memcpy@plt>
   16724:	mov	r0, r5
   16728:	pop	{r4, r5, r6, sl, fp, pc}
   1672c:	ldr	r1, [r4, #8]
   16730:	mov	r0, r6
   16734:	bl	12400 <memcpy@plt>
   16738:	mov	r0, r6
   1673c:	pop	{r4, r5, r6, sl, fp, pc}
   16740:	push	{r4, r5, fp, lr}
   16744:	add	fp, sp, #8
   16748:	mov	r4, r0
   1674c:	ldr	r5, [r0]
   16750:	cmp	r5, #0
   16754:	beq	1677c <flatcc_emitter_copy_buffer@@Base+0xf8>
   16758:	ldr	r0, [r5, #2948]	; 0xb84
   1675c:	ldr	r1, [r4, #4]
   16760:	cmp	r0, r1
   16764:	beq	1677c <flatcc_emitter_copy_buffer@@Base+0xf8>
   16768:	ldr	r1, [r5, #2952]	; 0xb88
   1676c:	sub	r1, r1, #2944	; 0xb80
   16770:	str	r1, [r0, #2952]	; 0xb88
   16774:	ldr	r0, [r5, #2948]	; 0xb84
   16778:	b	167bc <flatcc_emitter_copy_buffer@@Base+0x138>
   1677c:	movw	r0, #2956	; 0xb8c
   16780:	bl	1243c <malloc@plt>
   16784:	cmp	r0, #0
   16788:	mvneq	r0, #0
   1678c:	popeq	{r4, r5, fp, pc}
   16790:	ldr	r1, [r4, #28]
   16794:	add	r1, r1, #2944	; 0xb80
   16798:	str	r1, [r4, #28]
   1679c:	cmp	r5, #0
   167a0:	beq	167ec <flatcc_emitter_copy_buffer@@Base+0x168>
   167a4:	ldm	r4, {r1, r2}
   167a8:	str	r1, [r0, #2944]	; 0xb80
   167ac:	str	r2, [r0, #2948]	; 0xb84
   167b0:	str	r0, [r1, #2948]	; 0xb84
   167b4:	ldr	r1, [r4, #4]
   167b8:	str	r0, [r1, #2944]	; 0xb80
   167bc:	str	r0, [r4]
   167c0:	mov	r0, #2944	; 0xb80
   167c4:	ldr	r1, [r4]
   167c8:	add	r2, r1, #2944	; 0xb80
   167cc:	str	r2, [r4, #8]
   167d0:	str	r0, [r4, #12]
   167d4:	ldr	r0, [r1, #2944]	; 0xb80
   167d8:	ldr	r0, [r0, #2952]	; 0xb88
   167dc:	sub	r0, r0, #2944	; 0xb80
   167e0:	str	r0, [r1, #2952]	; 0xb88
   167e4:	mov	r0, #0
   167e8:	pop	{r4, r5, fp, pc}
   167ec:	str	r0, [r4, #4]
   167f0:	str	r0, [r4]
   167f4:	mov	r1, #1472	; 0x5c0
   167f8:	str	r1, [r4, #12]
   167fc:	str	r1, [r4, #20]
   16800:	ldr	r1, [r4]
   16804:	add	r1, r1, #1472	; 0x5c0
   16808:	str	r1, [r4, #8]
   1680c:	str	r1, [r4, #16]
   16810:	movw	r1, #64064	; 0xfa40
   16814:	movt	r1, #65535	; 0xffff
   16818:	str	r0, [r0, #2944]	; 0xb80
   1681c:	str	r0, [r0, #2948]	; 0xb84
   16820:	str	r1, [r0, #2952]	; 0xb88
   16824:	mov	r0, #0
   16828:	pop	{r4, r5, fp, pc}
   1682c:	push	{r4, r5, fp, lr}
   16830:	add	fp, sp, #8
   16834:	mov	r4, r0
   16838:	ldr	r5, [r0, #4]
   1683c:	cmp	r5, #0
   16840:	beq	16854 <flatcc_emitter_copy_buffer@@Base+0x1d0>
   16844:	ldr	r0, [r5, #2944]	; 0xb80
   16848:	ldr	r1, [r4]
   1684c:	cmp	r0, r1
   16850:	bne	16890 <flatcc_emitter_copy_buffer@@Base+0x20c>
   16854:	movw	r0, #2956	; 0xb8c
   16858:	bl	1243c <malloc@plt>
   1685c:	cmp	r0, #0
   16860:	mvneq	r0, #0
   16864:	popeq	{r4, r5, fp, pc}
   16868:	ldr	r1, [r4, #28]
   1686c:	add	r1, r1, #2944	; 0xb80
   16870:	str	r1, [r4, #28]
   16874:	cmp	r5, #0
   16878:	beq	168bc <flatcc_emitter_copy_buffer@@Base+0x238>
   1687c:	ldr	r1, [r4]
   16880:	str	r1, [r0, #2944]	; 0xb80
   16884:	str	r5, [r0, #2948]	; 0xb84
   16888:	str	r0, [r1, #2948]	; 0xb84
   1688c:	str	r0, [r5, #2944]	; 0xb80
   16890:	str	r0, [r4, #4]
   16894:	mov	r0, #2944	; 0xb80
   16898:	ldr	r1, [r4, #4]
   1689c:	str	r1, [r4, #16]
   168a0:	str	r0, [r4, #20]
   168a4:	ldr	r0, [r1, #2948]	; 0xb84
   168a8:	ldr	r0, [r0, #2952]	; 0xb88
   168ac:	add	r0, r0, #2944	; 0xb80
   168b0:	str	r0, [r1, #2952]	; 0xb88
   168b4:	mov	r0, #0
   168b8:	pop	{r4, r5, fp, pc}
   168bc:	str	r0, [r4, #4]
   168c0:	str	r0, [r4]
   168c4:	mov	r1, #1472	; 0x5c0
   168c8:	str	r1, [r4, #12]
   168cc:	str	r1, [r4, #20]
   168d0:	ldr	r1, [r4]
   168d4:	add	r1, r1, #1472	; 0x5c0
   168d8:	str	r1, [r4, #8]
   168dc:	str	r1, [r4, #16]
   168e0:	movw	r1, #64064	; 0xfa40
   168e4:	movt	r1, #65535	; 0xffff
   168e8:	str	r0, [r0, #2944]	; 0xb80
   168ec:	str	r0, [r0, #2948]	; 0xb84
   168f0:	str	r1, [r0, #2952]	; 0xb88
   168f4:	mov	r0, #0
   168f8:	pop	{r4, r5, fp, pc}

000168fc <__libc_csu_init@@Base>:
   168fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16900:	mov	r7, r0
   16904:	ldr	r6, [pc, #72]	; 16954 <__libc_csu_init@@Base+0x58>
   16908:	ldr	r5, [pc, #72]	; 16958 <__libc_csu_init@@Base+0x5c>
   1690c:	add	r6, pc, r6
   16910:	add	r5, pc, r5
   16914:	sub	r6, r6, r5
   16918:	mov	r8, r1
   1691c:	mov	r9, r2
   16920:	bl	123c8 <printf@plt-0x20>
   16924:	asrs	r6, r6, #2
   16928:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1692c:	mov	r4, #0
   16930:	add	r4, r4, #1
   16934:	ldr	r3, [r5], #4
   16938:	mov	r2, r9
   1693c:	mov	r1, r8
   16940:	mov	r0, r7
   16944:	blx	r3
   16948:	cmp	r6, r4
   1694c:	bne	16930 <__libc_csu_init@@Base+0x34>
   16950:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16954:	strdeq	r2, [r1], -r8
   16958:	strdeq	r2, [r1], -r0

0001695c <__libc_csu_fini@@Base>:
   1695c:	bx	lr

Disassembly of section .fini:

00016960 <.fini>:
   16960:	push	{r3, lr}
   16964:	pop	{r3, pc}
