
../repos/coreutils/src/mknod:     file format elf32-littlearm


Disassembly of section .init:

00011468 <.init>:
   11468:	push	{r3, lr}
   1146c:	bl	120ec <__assert_fail@plt+0x820>
   11470:	pop	{r3, pc}

Disassembly of section .plt:

00011474 <fstatfs64@plt-0x14>:
   11474:	push	{lr}		; (str lr, [sp, #-4]!)
   11478:	ldr	lr, [pc, #4]	; 11484 <fstatfs64@plt-0x4>
   1147c:	add	lr, pc, lr
   11480:	ldr	pc, [lr, #8]!
   11484:	andeq	sl, r1, ip, ror fp

00011488 <fstatfs64@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #106496	; 0x1a000
   11490:	ldr	pc, [ip, #2940]!	; 0xb7c

00011494 <selabel_lookup@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #106496	; 0x1a000
   1149c:	ldr	pc, [ip, #2932]!	; 0xb74

000114a0 <calloc@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #106496	; 0x1a000
   114a8:	ldr	pc, [ip, #2924]!	; 0xb6c

000114ac <fputs_unlocked@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #106496	; 0x1a000
   114b4:	ldr	pc, [ip, #2916]!	; 0xb64

000114b8 <raise@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114c4 <is_selinux_enabled@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #106496	; 0x1a000
   114cc:	ldr	pc, [ip, #2900]!	; 0xb54

000114d0 <strcmp@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #106496	; 0x1a000
   114d8:	ldr	pc, [ip, #2892]!	; 0xb4c

000114dc <context_type_get@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #106496	; 0x1a000
   114e4:	ldr	pc, [ip, #2884]!	; 0xb44

000114e8 <fflush@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #106496	; 0x1a000
   114f0:	ldr	pc, [ip, #2876]!	; 0xb3c

000114f4 <lsetfilecon@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #106496	; 0x1a000
   114fc:	ldr	pc, [ip, #2868]!	; 0xb34

00011500 <memmove@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #106496	; 0x1a000
   11508:	ldr	pc, [ip, #2860]!	; 0xb2c

0001150c <free@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #106496	; 0x1a000
   11514:	ldr	pc, [ip, #2852]!	; 0xb24

00011518 <faccessat@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #106496	; 0x1a000
   11520:	ldr	pc, [ip, #2844]!	; 0xb1c

00011524 <_exit@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #106496	; 0x1a000
   1152c:	ldr	pc, [ip, #2836]!	; 0xb14

00011530 <memcpy@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #106496	; 0x1a000
   11538:	ldr	pc, [ip, #2828]!	; 0xb0c

0001153c <__strtoull_internal@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #106496	; 0x1a000
   11544:	ldr	pc, [ip, #2820]!	; 0xb04

00011548 <mbsinit@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #106496	; 0x1a000
   11550:	ldr	pc, [ip, #2812]!	; 0xafc

00011554 <context_new@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #106496	; 0x1a000
   1155c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011560 <memcmp@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #106496	; 0x1a000
   11568:	ldr	pc, [ip, #2796]!	; 0xaec

0001156c <fputc_unlocked@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #106496	; 0x1a000
   11574:	ldr	pc, [ip, #2788]!	; 0xae4

00011578 <dcgettext@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #106496	; 0x1a000
   11580:	ldr	pc, [ip, #2780]!	; 0xadc

00011584 <context_type_set@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #106496	; 0x1a000
   1158c:	ldr	pc, [ip, #2772]!	; 0xad4

00011590 <realloc@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #106496	; 0x1a000
   11598:	ldr	pc, [ip, #2764]!	; 0xacc

0001159c <fgetfilecon@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #106496	; 0x1a000
   115a4:	ldr	pc, [ip, #2756]!	; 0xac4

000115a8 <textdomain@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #106496	; 0x1a000
   115b0:	ldr	pc, [ip, #2748]!	; 0xabc

000115b4 <rawmemchr@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #106496	; 0x1a000
   115bc:	ldr	pc, [ip, #2740]!	; 0xab4

000115c0 <__fxstatat64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #106496	; 0x1a000
   115c8:	ldr	pc, [ip, #2732]!	; 0xaac

000115cc <iswprint@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #106496	; 0x1a000
   115d4:	ldr	pc, [ip, #2724]!	; 0xaa4

000115d8 <__fxstat64@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #106496	; 0x1a000
   115e0:	ldr	pc, [ip, #2716]!	; 0xa9c

000115e4 <readlink@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #106496	; 0x1a000
   115ec:	ldr	pc, [ip, #2708]!	; 0xa94

000115f0 <fwrite@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #106496	; 0x1a000
   115f8:	ldr	pc, [ip, #2700]!	; 0xa8c

000115fc <lseek64@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #106496	; 0x1a000
   11604:	ldr	pc, [ip, #2692]!	; 0xa84

00011608 <__ctype_get_mb_cur_max@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #106496	; 0x1a000
   11610:	ldr	pc, [ip, #2684]!	; 0xa7c

00011614 <getcon@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #106496	; 0x1a000
   1161c:	ldr	pc, [ip, #2676]!	; 0xa74

00011620 <__fpending@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #106496	; 0x1a000
   11628:	ldr	pc, [ip, #2668]!	; 0xa6c

0001162c <mbrtowc@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #106496	; 0x1a000
   11634:	ldr	pc, [ip, #2660]!	; 0xa64

00011638 <error@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #106496	; 0x1a000
   11640:	ldr	pc, [ip, #2652]!	; 0xa5c

00011644 <open64@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #106496	; 0x1a000
   1164c:	ldr	pc, [ip, #2644]!	; 0xa54

00011650 <lgetfilecon@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #106496	; 0x1a000
   11658:	ldr	pc, [ip, #2636]!	; 0xa4c

0001165c <malloc@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #106496	; 0x1a000
   11664:	ldr	pc, [ip, #2628]!	; 0xa44

00011668 <__libc_start_main@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #106496	; 0x1a000
   11670:	ldr	pc, [ip, #2620]!	; 0xa3c

00011674 <__freading@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #106496	; 0x1a000
   1167c:	ldr	pc, [ip, #2612]!	; 0xa34

00011680 <__gmon_start__@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #106496	; 0x1a000
   11688:	ldr	pc, [ip, #2604]!	; 0xa2c

0001168c <context_free@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #106496	; 0x1a000
   11694:	ldr	pc, [ip, #2596]!	; 0xa24

00011698 <mempcpy@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #106496	; 0x1a000
   116a0:	ldr	pc, [ip, #2588]!	; 0xa1c

000116a4 <getopt_long@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #106496	; 0x1a000
   116ac:	ldr	pc, [ip, #2580]!	; 0xa14

000116b0 <__ctype_b_loc@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #106496	; 0x1a000
   116b8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116bc <getcwd@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #106496	; 0x1a000
   116c4:	ldr	pc, [ip, #2564]!	; 0xa04

000116c8 <exit@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #106496	; 0x1a000
   116d0:	ldr	pc, [ip, #2556]!	; 0x9fc

000116d4 <getfilecon@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #106496	; 0x1a000
   116dc:	ldr	pc, [ip, #2548]!	; 0x9f4

000116e0 <strlen@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #106496	; 0x1a000
   116e8:	ldr	pc, [ip, #2540]!	; 0x9ec

000116ec <selabel_open@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #106496	; 0x1a000
   116f4:	ldr	pc, [ip, #2532]!	; 0x9e4

000116f8 <strchr@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #106496	; 0x1a000
   11700:	ldr	pc, [ip, #2524]!	; 0x9dc

00011704 <openat64@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #106496	; 0x1a000
   1170c:	ldr	pc, [ip, #2516]!	; 0x9d4

00011710 <setfscreatecon@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #106496	; 0x1a000
   11718:	ldr	pc, [ip, #2508]!	; 0x9cc

0001171c <__errno_location@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #106496	; 0x1a000
   11724:	ldr	pc, [ip, #2500]!	; 0x9c4

00011728 <__sprintf_chk@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #106496	; 0x1a000
   11730:	ldr	pc, [ip, #2492]!	; 0x9bc

00011734 <__cxa_atexit@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #106496	; 0x1a000
   1173c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011740 <memset@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #106496	; 0x1a000
   11748:	ldr	pc, [ip, #2476]!	; 0x9ac

0001174c <__printf_chk@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #106496	; 0x1a000
   11754:	ldr	pc, [ip, #2468]!	; 0x9a4

00011758 <fileno@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #106496	; 0x1a000
   11760:	ldr	pc, [ip, #2460]!	; 0x99c

00011764 <__fprintf_chk@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #106496	; 0x1a000
   1176c:	ldr	pc, [ip, #2452]!	; 0x994

00011770 <fclose@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #106496	; 0x1a000
   11778:	ldr	pc, [ip, #2444]!	; 0x98c

0001177c <fseeko64@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #106496	; 0x1a000
   11784:	ldr	pc, [ip, #2436]!	; 0x984

00011788 <fcntl64@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #106496	; 0x1a000
   11790:	ldr	pc, [ip, #2428]!	; 0x97c

00011794 <setlocale@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #106496	; 0x1a000
   1179c:	ldr	pc, [ip, #2420]!	; 0x974

000117a0 <fsetfilecon@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #106496	; 0x1a000
   117a8:	ldr	pc, [ip, #2412]!	; 0x96c

000117ac <strrchr@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #106496	; 0x1a000
   117b4:	ldr	pc, [ip, #2404]!	; 0x964

000117b8 <nl_langinfo@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #106496	; 0x1a000
   117c0:	ldr	pc, [ip, #2396]!	; 0x95c

000117c4 <readdir64@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #106496	; 0x1a000
   117cc:	ldr	pc, [ip, #2388]!	; 0x954

000117d0 <fdopendir@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #106496	; 0x1a000
   117d8:	ldr	pc, [ip, #2380]!	; 0x94c

000117dc <security_compute_create@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #106496	; 0x1a000
   117e4:	ldr	pc, [ip, #2372]!	; 0x944

000117e8 <dirfd@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #106496	; 0x1a000
   117f0:	ldr	pc, [ip, #2364]!	; 0x93c

000117f4 <fchdir@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #106496	; 0x1a000
   117fc:	ldr	pc, [ip, #2356]!	; 0x934

00011800 <qsort@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #106496	; 0x1a000
   11808:	ldr	pc, [ip, #2348]!	; 0x92c

0001180c <freecon@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #106496	; 0x1a000
   11814:	ldr	pc, [ip, #2340]!	; 0x924

00011818 <bindtextdomain@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #106496	; 0x1a000
   11820:	ldr	pc, [ip, #2332]!	; 0x91c

00011824 <getfscreatecon@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #106496	; 0x1a000
   1182c:	ldr	pc, [ip, #2324]!	; 0x914

00011830 <umask@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #106496	; 0x1a000
   11838:	ldr	pc, [ip, #2316]!	; 0x90c

0001183c <context_str@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #106496	; 0x1a000
   11844:	ldr	pc, [ip, #2308]!	; 0x904

00011848 <chmod@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #106496	; 0x1a000
   11850:	ldr	pc, [ip, #2300]!	; 0x8fc

00011854 <__xstat64@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #106496	; 0x1a000
   1185c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011860 <__xmknod@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #106496	; 0x1a000
   11868:	ldr	pc, [ip, #2284]!	; 0x8ec

0001186c <strncmp@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #106496	; 0x1a000
   11874:	ldr	pc, [ip, #2276]!	; 0x8e4

00011878 <abort@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #106496	; 0x1a000
   11880:	ldr	pc, [ip, #2268]!	; 0x8dc

00011884 <close@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #106496	; 0x1a000
   1188c:	ldr	pc, [ip, #2260]!	; 0x8d4

00011890 <__lxstat64@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #106496	; 0x1a000
   11898:	ldr	pc, [ip, #2252]!	; 0x8cc

0001189c <mkfifo@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #106496	; 0x1a000
   118a4:	ldr	pc, [ip, #2244]!	; 0x8c4

000118a8 <mode_to_security_class@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #106496	; 0x1a000
   118b0:	ldr	pc, [ip, #2236]!	; 0x8bc

000118b4 <closedir@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #106496	; 0x1a000
   118bc:	ldr	pc, [ip, #2228]!	; 0x8b4

000118c0 <strspn@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #106496	; 0x1a000
   118c8:	ldr	pc, [ip, #2220]!	; 0x8ac

000118cc <__assert_fail@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #106496	; 0x1a000
   118d4:	ldr	pc, [ip, #2212]!	; 0x8a4

Disassembly of section .text:

000118d8 <lchmod@@Base-0x4e58>:
   118d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118dc:	mov	r5, r0
   118e0:	sub	sp, sp, #84	; 0x54
   118e4:	ldr	r0, [r1]
   118e8:	mov	fp, r1
   118ec:	bl	16de8 <lchmod@@Base+0x6b8>
   118f0:	ldr	r1, [pc, #1840]	; 12028 <__assert_fail@plt+0x75c>
   118f4:	mov	r0, #6
   118f8:	bl	11794 <setlocale@plt>
   118fc:	mov	r9, #0
   11900:	ldr	r1, [pc, #1828]	; 1202c <__assert_fail@plt+0x760>
   11904:	ldr	r0, [pc, #1828]	; 12030 <__assert_fail@plt+0x764>
   11908:	ldr	r7, [pc, #1828]	; 12034 <__assert_fail@plt+0x768>
   1190c:	ldr	r6, [pc, #1828]	; 12038 <__assert_fail@plt+0x76c>
   11910:	ldr	r8, [pc, #1828]	; 1203c <__assert_fail@plt+0x770>
   11914:	bl	11818 <bindtextdomain@plt>
   11918:	mov	sl, r9
   1191c:	ldr	r0, [pc, #1804]	; 12030 <__assert_fail@plt+0x764>
   11920:	mov	r4, r9
   11924:	bl	115a8 <textdomain@plt>
   11928:	ldr	r0, [pc, #1808]	; 12040 <__assert_fail@plt+0x774>
   1192c:	bl	1af34 <lchmod@@Base+0x4804>
   11930:	str	r9, [sp, #8]
   11934:	str	r4, [sp]
   11938:	mov	r3, r7
   1193c:	mov	r2, r6
   11940:	mov	r1, fp
   11944:	mov	r0, r5
   11948:	bl	116a4 <getopt_long@plt>
   1194c:	cmn	r0, #1
   11950:	beq	11adc <__assert_fail@plt+0x210>
   11954:	cmn	r0, #2
   11958:	beq	11aa4 <__assert_fail@plt+0x1d8>
   1195c:	ble	119dc <__assert_fail@plt+0x110>
   11960:	cmp	r0, #90	; 0x5a
   11964:	beq	11978 <__assert_fail@plt+0xac>
   11968:	cmp	r0, #109	; 0x6d
   1196c:	bne	11a9c <__assert_fail@plt+0x1d0>
   11970:	ldr	sl, [r8]
   11974:	b	11934 <__assert_fail@plt+0x68>
   11978:	bl	114c4 <is_selinux_enabled@plt>
   1197c:	cmp	r0, #0
   11980:	ble	11aac <__assert_fail@plt+0x1e0>
   11984:	ldr	r1, [r8]
   11988:	cmp	r1, #0
   1198c:	strne	r1, [sp, #8]
   11990:	bne	11934 <__assert_fail@plt+0x68>
   11994:	mov	r2, r4
   11998:	mov	r0, r1
   1199c:	bl	116ec <selabel_open@plt>
   119a0:	subs	r9, r0, #0
   119a4:	bne	11934 <__assert_fail@plt+0x68>
   119a8:	bl	1171c <__errno_location@plt>
   119ac:	mov	r2, #5
   119b0:	ldr	r1, [pc, #1676]	; 12044 <__assert_fail@plt+0x778>
   119b4:	ldr	r3, [r0]
   119b8:	mov	r0, r4
   119bc:	str	r3, [sp, #16]
   119c0:	bl	11578 <dcgettext@plt>
   119c4:	ldr	r3, [sp, #16]
   119c8:	mov	r1, r3
   119cc:	mov	r2, r0
   119d0:	mov	r0, r4
   119d4:	bl	11638 <error@plt>
   119d8:	b	11934 <__assert_fail@plt+0x68>
   119dc:	cmn	r0, #3
   119e0:	bne	11a9c <__assert_fail@plt+0x1d0>
   119e4:	ldr	r1, [pc, #1628]	; 12048 <__assert_fail@plt+0x77c>
   119e8:	ldr	r3, [pc, #1628]	; 1204c <__assert_fail@plt+0x780>
   119ec:	ldr	r2, [pc, #1628]	; 12050 <__assert_fail@plt+0x784>
   119f0:	str	r4, [sp, #4]
   119f4:	ldr	r0, [r1]
   119f8:	ldr	r3, [r3]
   119fc:	ldr	r1, [pc, #1616]	; 12054 <__assert_fail@plt+0x788>
   11a00:	str	r2, [sp]
   11a04:	ldr	r2, [pc, #1612]	; 12058 <__assert_fail@plt+0x78c>
   11a08:	bl	19328 <lchmod@@Base+0x2bf8>
   11a0c:	mov	r0, #0
   11a10:	bl	116c8 <exit@plt>
   11a14:	sub	r3, r5, r3
   11a18:	cmp	r3, #1
   11a1c:	bls	11f2c <__assert_fail@plt+0x660>
   11a20:	cmp	r3, #2
   11a24:	bls	11b84 <__assert_fail@plt+0x2b8>
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #1576]	; 1205c <__assert_fail@plt+0x790>
   11a30:	mov	r0, #0
   11a34:	bl	11578 <dcgettext@plt>
   11a38:	ldr	r3, [r6]
   11a3c:	add	r3, r3, #2
   11a40:	mov	r4, r0
   11a44:	ldr	r0, [fp, r3, lsl #2]
   11a48:	bl	18ca8 <lchmod@@Base+0x2578>
   11a4c:	mov	r1, #0
   11a50:	mov	r2, r4
   11a54:	mov	r3, r0
   11a58:	mov	r0, r1
   11a5c:	bl	11638 <error@plt>
   11a60:	ldr	r3, [r6]
   11a64:	sub	r5, r5, r3
   11a68:	cmp	r5, #4
   11a6c:	bne	11a9c <__assert_fail@plt+0x1d0>
   11a70:	ldr	r3, [pc, #1512]	; 12060 <__assert_fail@plt+0x794>
   11a74:	ldr	r1, [pc, #1512]	; 12064 <__assert_fail@plt+0x798>
   11a78:	mov	r2, #5
   11a7c:	mov	r0, #0
   11a80:	ldr	r4, [r3]
   11a84:	bl	11578 <dcgettext@plt>
   11a88:	ldr	r2, [pc, #1496]	; 12068 <__assert_fail@plt+0x79c>
   11a8c:	mov	r1, #1
   11a90:	mov	r3, r0
   11a94:	mov	r0, r4
   11a98:	bl	11764 <__fprintf_chk@plt>
   11a9c:	mov	r0, #1
   11aa0:	bl	121d8 <__assert_fail@plt+0x90c>
   11aa4:	mov	r0, #0
   11aa8:	bl	121d8 <__assert_fail@plt+0x90c>
   11aac:	ldr	r3, [r8]
   11ab0:	cmp	r3, #0
   11ab4:	beq	11934 <__assert_fail@plt+0x68>
   11ab8:	mov	r2, #5
   11abc:	ldr	r1, [pc, #1448]	; 1206c <__assert_fail@plt+0x7a0>
   11ac0:	mov	r0, r4
   11ac4:	bl	11578 <dcgettext@plt>
   11ac8:	mov	r1, r4
   11acc:	mov	r2, r0
   11ad0:	mov	r0, #0
   11ad4:	bl	11638 <error@plt>
   11ad8:	b	11934 <__assert_fail@plt+0x68>
   11adc:	cmp	sl, #0
   11ae0:	beq	11df4 <__assert_fail@plt+0x528>
   11ae4:	mov	r0, sl
   11ae8:	bl	1683c <lchmod@@Base+0x10c>
   11aec:	subs	r6, r0, #0
   11af0:	moveq	r2, #5
   11af4:	ldreq	r1, [pc, #1396]	; 12070 <__assert_fail@plt+0x7a4>
   11af8:	beq	11eb0 <__assert_fail@plt+0x5e4>
   11afc:	mov	r0, #0
   11b00:	bl	11830 <umask@plt>
   11b04:	mov	r7, r0
   11b08:	bl	11830 <umask@plt>
   11b0c:	mov	r2, r7
   11b10:	mov	r3, r6
   11b14:	mov	r1, #0
   11b18:	str	r4, [sp]
   11b1c:	ldr	r0, [pc, #1360]	; 12074 <__assert_fail@plt+0x7a8>
   11b20:	bl	16c2c <lchmod@@Base+0x4fc>
   11b24:	mov	r7, r0
   11b28:	mov	r0, r6
   11b2c:	bl	1349c <__assert_fail@plt+0x1bd0>
   11b30:	bic	r3, r7, #508	; 0x1fc
   11b34:	bic	r3, r3, #3
   11b38:	cmp	r3, #0
   11b3c:	bne	11ea4 <__assert_fail@plt+0x5d8>
   11b40:	ldr	r6, [pc, #1328]	; 12078 <__assert_fail@plt+0x7ac>
   11b44:	ldr	r3, [r6]
   11b48:	cmp	r5, r3
   11b4c:	ble	11a14 <__assert_fail@plt+0x148>
   11b50:	add	r2, r3, #1
   11b54:	cmp	r5, r2
   11b58:	movle	r4, #4
   11b5c:	ble	11b74 <__assert_fail@plt+0x2a8>
   11b60:	ldr	r2, [fp, r2, lsl #2]
   11b64:	ldrb	r4, [r2]
   11b68:	cmp	r4, #112	; 0x70
   11b6c:	movne	r4, #4
   11b70:	moveq	r4, #2
   11b74:	sub	r3, r5, r3
   11b78:	cmp	r4, r3
   11b7c:	bhi	11f9c <__assert_fail@plt+0x6d0>
   11b80:	bcc	11e60 <__assert_fail@plt+0x594>
   11b84:	ldr	r0, [sp, #8]
   11b88:	cmp	r0, #0
   11b8c:	beq	11b9c <__assert_fail@plt+0x2d0>
   11b90:	bl	11710 <setfscreatecon@plt>
   11b94:	cmp	r0, #0
   11b98:	blt	11ff8 <__assert_fail@plt+0x72c>
   11b9c:	ldr	r3, [r6]
   11ba0:	add	r3, r3, #1
   11ba4:	ldr	r2, [fp, r3, lsl #2]
   11ba8:	lsl	r3, r3, #2
   11bac:	ldrb	r2, [r2]
   11bb0:	cmp	r2, #99	; 0x63
   11bb4:	beq	11bcc <__assert_fail@plt+0x300>
   11bb8:	bls	11dac <__assert_fail@plt+0x4e0>
   11bbc:	cmp	r2, #112	; 0x70
   11bc0:	beq	11dfc <__assert_fail@plt+0x530>
   11bc4:	cmp	r2, #117	; 0x75
   11bc8:	bne	11db8 <__assert_fail@plt+0x4ec>
   11bcc:	mov	r8, #8192	; 0x2000
   11bd0:	add	ip, fp, r3
   11bd4:	ldr	r4, [pc, #1100]	; 12028 <__assert_fail@plt+0x75c>
   11bd8:	ldr	r0, [ip, #4]
   11bdc:	mov	r2, #0
   11be0:	str	r4, [sp]
   11be4:	ldr	ip, [ip, #8]
   11be8:	mov	r1, r2
   11bec:	add	r3, sp, #56	; 0x38
   11bf0:	str	ip, [sp, #36]	; 0x24
   11bf4:	str	r0, [sp, #52]	; 0x34
   11bf8:	bl	19ac4 <lchmod@@Base+0x3394>
   11bfc:	subs	ip, r0, #0
   11c00:	bne	11f80 <__assert_fail@plt+0x6b4>
   11c04:	ldrd	r0, [sp, #56]	; 0x38
   11c08:	mov	r3, #0
   11c0c:	cmp	r3, r1
   11c10:	cmpeq	r0, r0
   11c14:	bne	11f80 <__assert_fail@plt+0x6b4>
   11c18:	add	r3, sp, #64	; 0x40
   11c1c:	str	r4, [sp]
   11c20:	mov	r2, ip
   11c24:	mov	r1, ip
   11c28:	ldr	r0, [sp, #36]	; 0x24
   11c2c:	bl	19ac4 <lchmod@@Base+0x3394>
   11c30:	subs	r3, r0, #0
   11c34:	str	r3, [sp, #48]	; 0x30
   11c38:	bne	11f50 <__assert_fail@plt+0x684>
   11c3c:	ldrd	r2, [sp, #64]	; 0x40
   11c40:	mov	r5, #0
   11c44:	mov	r4, r2
   11c48:	cmp	r5, r3
   11c4c:	cmpeq	r2, r2
   11c50:	strd	r4, [sp, #16]
   11c54:	bne	11f50 <__assert_fail@plt+0x684>
   11c58:	ldr	ip, [sp, #60]	; 0x3c
   11c5c:	ldr	r1, [sp, #56]	; 0x38
   11c60:	mov	r4, #0
   11c64:	mov	r5, #0
   11c68:	lsl	r3, ip, #8
   11c6c:	strd	r4, [sp, #8]
   11c70:	ldr	r4, [pc, #1028]	; 1207c <__assert_fail@plt+0x7b0>
   11c74:	orr	r3, r3, r1, lsr #24
   11c78:	lsl	r2, r1, #8
   11c7c:	str	r1, [sp, #28]
   11c80:	mov	r5, #0
   11c84:	ldr	r1, [sp, #48]	; 0x30
   11c88:	and	r4, r4, r2
   11c8c:	and	r5, r5, r3
   11c90:	str	r1, [sp, #24]
   11c94:	strd	r4, [sp, #40]	; 0x28
   11c98:	ldrd	r4, [sp, #24]
   11c9c:	ldr	r3, [pc, #988]	; 12080 <__assert_fail@plt+0x7b4>
   11ca0:	mov	r2, #0
   11ca4:	ldr	r1, [sp, #20]
   11ca8:	and	r4, r4, r2
   11cac:	and	r5, r5, r3
   11cb0:	mov	r2, r4
   11cb4:	mov	r3, r5
   11cb8:	ldrd	r4, [sp, #40]	; 0x28
   11cbc:	lsl	r1, r1, #12
   11cc0:	str	r1, [sp, #12]
   11cc4:	orr	r4, r4, r2
   11cc8:	ldr	r1, [sp, #16]
   11ccc:	orr	r5, r5, r3
   11cd0:	ldr	ip, [sp, #12]
   11cd4:	mov	r2, r4
   11cd8:	mov	r3, r5
   11cdc:	ldrd	r4, [sp, #16]
   11ce0:	orr	r1, ip, r1, lsr #20
   11ce4:	str	r1, [sp, #12]
   11ce8:	uxtb	r1, r4
   11cec:	lsl	ip, r4, #12
   11cf0:	orr	r2, r2, r1
   11cf4:	str	ip, [sp, #8]
   11cf8:	add	r5, pc, #800	; 0x320
   11cfc:	ldrd	r4, [r5]
   11d00:	strd	r2, [sp, #16]
   11d04:	ldrd	r2, [sp, #8]
   11d08:	and	r2, r2, r4
   11d0c:	and	r3, r3, r5
   11d10:	mov	r4, r2
   11d14:	mov	r5, r3
   11d18:	ldrd	r2, [sp, #16]
   11d1c:	orr	r3, r3, r5
   11d20:	orr	r2, r2, r4
   11d24:	mov	r5, r3
   11d28:	mvn	r3, #0
   11d2c:	mov	r4, r2
   11d30:	cmp	r5, r3
   11d34:	mvn	r2, #0
   11d38:	cmpeq	r4, r2
   11d3c:	beq	11ec4 <__assert_fail@plt+0x5f8>
   11d40:	cmp	r9, #0
   11d44:	beq	11d5c <__assert_fail@plt+0x490>
   11d48:	ldr	r3, [r6]
   11d4c:	mov	r0, r9
   11d50:	mov	r2, r8
   11d54:	ldr	r1, [fp, r3, lsl #2]
   11d58:	bl	127e8 <__assert_fail@plt+0xf1c>
   11d5c:	ldr	r1, [r6]
   11d60:	add	r3, sp, #80	; 0x50
   11d64:	orr	r2, r7, r8
   11d68:	ldr	r1, [fp, r1, lsl #2]
   11d6c:	strd	r4, [r3, #-8]!
   11d70:	mov	r0, #1
   11d74:	bl	11860 <__xmknod@plt>
   11d78:	cmp	r0, #0
   11d7c:	bne	11e30 <__assert_fail@plt+0x564>
   11d80:	cmp	sl, #0
   11d84:	beq	11da0 <__assert_fail@plt+0x4d4>
   11d88:	ldr	r3, [r6]
   11d8c:	mov	r1, r7
   11d90:	ldr	r0, [fp, r3, lsl #2]
   11d94:	bl	16730 <lchmod@@Base>
   11d98:	cmp	r0, #0
   11d9c:	bne	11eec <__assert_fail@plt+0x620>
   11da0:	mov	r0, #0
   11da4:	add	sp, sp, #84	; 0x54
   11da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dac:	cmp	r2, #98	; 0x62
   11db0:	moveq	r8, #24576	; 0x6000
   11db4:	beq	11bd0 <__assert_fail@plt+0x304>
   11db8:	mov	r2, #5
   11dbc:	ldr	r1, [pc, #704]	; 12084 <__assert_fail@plt+0x7b8>
   11dc0:	mov	r0, #0
   11dc4:	bl	11578 <dcgettext@plt>
   11dc8:	ldr	r3, [r6]
   11dcc:	add	r3, r3, #1
   11dd0:	mov	r4, r0
   11dd4:	ldr	r0, [fp, r3, lsl #2]
   11dd8:	bl	18ca8 <lchmod@@Base+0x2578>
   11ddc:	mov	r1, #0
   11de0:	mov	r2, r4
   11de4:	mov	r3, r0
   11de8:	mov	r0, r1
   11dec:	bl	11638 <error@plt>
   11df0:	b	11a9c <__assert_fail@plt+0x1d0>
   11df4:	ldr	r7, [pc, #632]	; 12074 <__assert_fail@plt+0x7a8>
   11df8:	b	11b40 <__assert_fail@plt+0x274>
   11dfc:	cmp	r9, #0
   11e00:	beq	11e18 <__assert_fail@plt+0x54c>
   11e04:	add	r3, fp, r3
   11e08:	mov	r0, r9
   11e0c:	ldr	r1, [r3, #-4]
   11e10:	mov	r2, #4096	; 0x1000
   11e14:	bl	127e8 <__assert_fail@plt+0xf1c>
   11e18:	ldr	r3, [r6]
   11e1c:	mov	r1, r7
   11e20:	ldr	r0, [fp, r3, lsl #2]
   11e24:	bl	1189c <mkfifo@plt>
   11e28:	cmp	r0, #0
   11e2c:	beq	11d80 <__assert_fail@plt+0x4b4>
   11e30:	bl	1171c <__errno_location@plt>
   11e34:	ldr	r3, [r6]
   11e38:	mov	r1, #3
   11e3c:	ldr	r2, [fp, r3, lsl #2]
   11e40:	ldr	r4, [r0]
   11e44:	mov	r0, #0
   11e48:	bl	18b24 <lchmod@@Base+0x23f4>
   11e4c:	mov	r1, r4
   11e50:	ldr	r2, [pc, #560]	; 12088 <__assert_fail@plt+0x7bc>
   11e54:	mov	r3, r0
   11e58:	mov	r0, #1
   11e5c:	bl	11638 <error@plt>
   11e60:	mov	r2, #5
   11e64:	ldr	r1, [pc, #496]	; 1205c <__assert_fail@plt+0x790>
   11e68:	mov	r0, #0
   11e6c:	bl	11578 <dcgettext@plt>
   11e70:	ldr	r3, [r6]
   11e74:	add	r3, r4, r3
   11e78:	mov	r7, r0
   11e7c:	ldr	r0, [fp, r3, lsl #2]
   11e80:	bl	18ca8 <lchmod@@Base+0x2578>
   11e84:	mov	r1, #0
   11e88:	mov	r2, r7
   11e8c:	mov	r3, r0
   11e90:	mov	r0, r1
   11e94:	bl	11638 <error@plt>
   11e98:	cmp	r4, #2
   11e9c:	bne	11a9c <__assert_fail@plt+0x1d0>
   11ea0:	b	11a60 <__assert_fail@plt+0x194>
   11ea4:	ldr	r1, [pc, #480]	; 1208c <__assert_fail@plt+0x7c0>
   11ea8:	mov	r2, #5
   11eac:	mov	r0, #0
   11eb0:	bl	11578 <dcgettext@plt>
   11eb4:	mov	r1, #0
   11eb8:	mov	r2, r0
   11ebc:	mov	r0, #1
   11ec0:	bl	11638 <error@plt>
   11ec4:	mov	r2, #5
   11ec8:	ldr	r1, [pc, #448]	; 12090 <__assert_fail@plt+0x7c4>
   11ecc:	bl	11578 <dcgettext@plt>
   11ed0:	ldr	r3, [sp, #36]	; 0x24
   11ed4:	ldr	r1, [sp, #48]	; 0x30
   11ed8:	str	r3, [sp]
   11edc:	ldr	r3, [sp, #52]	; 0x34
   11ee0:	mov	r2, r0
   11ee4:	mov	r0, #1
   11ee8:	bl	11638 <error@plt>
   11eec:	bl	1171c <__errno_location@plt>
   11ef0:	ldr	r1, [pc, #412]	; 12094 <__assert_fail@plt+0x7c8>
   11ef4:	mov	r2, #5
   11ef8:	ldr	r4, [r0]
   11efc:	mov	r0, #0
   11f00:	bl	11578 <dcgettext@plt>
   11f04:	ldr	r3, [r6]
   11f08:	ldr	r1, [fp, r3, lsl #2]
   11f0c:	mov	r5, r0
   11f10:	mov	r0, #4
   11f14:	bl	18a68 <lchmod@@Base+0x2338>
   11f18:	mov	r3, r0
   11f1c:	mov	r2, r5
   11f20:	mov	r1, r4
   11f24:	mov	r0, #1
   11f28:	bl	11638 <error@plt>
   11f2c:	mov	r2, #5
   11f30:	ldr	r1, [pc, #352]	; 12098 <__assert_fail@plt+0x7cc>
   11f34:	mov	r0, #0
   11f38:	bl	11578 <dcgettext@plt>
   11f3c:	mov	r1, #0
   11f40:	mov	r2, r0
   11f44:	mov	r0, r1
   11f48:	bl	11638 <error@plt>
   11f4c:	b	11a9c <__assert_fail@plt+0x1d0>
   11f50:	mov	r2, #5
   11f54:	ldr	r1, [pc, #320]	; 1209c <__assert_fail@plt+0x7d0>
   11f58:	mov	r0, #0
   11f5c:	bl	11578 <dcgettext@plt>
   11f60:	mov	r4, r0
   11f64:	ldr	r0, [sp, #36]	; 0x24
   11f68:	bl	18ca8 <lchmod@@Base+0x2578>
   11f6c:	mov	r2, r4
   11f70:	mov	r1, #0
   11f74:	mov	r3, r0
   11f78:	mov	r0, #1
   11f7c:	bl	11638 <error@plt>
   11f80:	mov	r2, #5
   11f84:	ldr	r1, [pc, #276]	; 120a0 <__assert_fail@plt+0x7d4>
   11f88:	mov	r0, #0
   11f8c:	bl	11578 <dcgettext@plt>
   11f90:	mov	r4, r0
   11f94:	ldr	r0, [sp, #52]	; 0x34
   11f98:	b	11f68 <__assert_fail@plt+0x69c>
   11f9c:	mov	r2, #5
   11fa0:	ldr	r1, [pc, #252]	; 120a4 <__assert_fail@plt+0x7d8>
   11fa4:	mov	r0, #0
   11fa8:	bl	11578 <dcgettext@plt>
   11fac:	sub	r3, r5, #-1073741823	; 0xc0000001
   11fb0:	mov	r7, r0
   11fb4:	ldr	r0, [fp, r3, lsl #2]
   11fb8:	bl	18ca8 <lchmod@@Base+0x2578>
   11fbc:	mov	r1, #0
   11fc0:	mov	r2, r7
   11fc4:	mov	r3, r0
   11fc8:	mov	r0, r1
   11fcc:	bl	11638 <error@plt>
   11fd0:	cmp	r4, #4
   11fd4:	bne	11a9c <__assert_fail@plt+0x1d0>
   11fd8:	ldr	r3, [r6]
   11fdc:	sub	r5, r5, r3
   11fe0:	cmp	r5, #2
   11fe4:	bne	11a9c <__assert_fail@plt+0x1d0>
   11fe8:	ldr	r3, [pc, #112]	; 12060 <__assert_fail@plt+0x794>
   11fec:	mov	r2, #5
   11ff0:	ldr	r1, [pc, #176]	; 120a8 <__assert_fail@plt+0x7dc>
   11ff4:	b	11a7c <__assert_fail@plt+0x1b0>
   11ff8:	bl	1171c <__errno_location@plt>
   11ffc:	mov	r2, #5
   12000:	ldr	r1, [pc, #164]	; 120ac <__assert_fail@plt+0x7e0>
   12004:	ldr	r4, [r0]
   12008:	mov	r0, #0
   1200c:	bl	11578 <dcgettext@plt>
   12010:	mov	r5, r0
   12014:	ldr	r0, [sp, #8]
   12018:	bl	18ca8 <lchmod@@Base+0x2578>
   1201c:	b	11f18 <__assert_fail@plt+0x64c>
   12020:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   12024:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12028:	strdeq	fp, [r1], -r4
   1202c:	andeq	fp, r1, r8, ror r5
   12030:	ldrdeq	fp, [r1], -r0
   12034:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12038:	andeq	fp, r1, r8, lsl #12
   1203c:	andeq	ip, r2, r8, ror #3
   12040:	andeq	r3, r1, r4, lsr #4
   12044:	muleq	r1, r0, r5
   12048:	andeq	ip, r2, r4, ror #3
   1204c:	andeq	ip, r2, r8, lsl #3
   12050:	strdeq	fp, [r1], -r8
   12054:	andeq	sl, r1, r0, ror #31
   12058:	andeq	fp, r1, ip, asr #9
   1205c:	andeq	fp, r1, ip, lsr #13
   12060:	andeq	ip, r2, r0, ror #3
   12064:	andeq	fp, r1, r0, asr #13
   12068:	andeq	fp, r1, r0, asr sl
   1206c:	andeq	fp, r1, ip, lsr #11
   12070:	andeq	fp, r1, ip, lsl #12
   12074:			; <UNDEFINED> instruction: 0x000001b6
   12078:	ldrdeq	ip, [r2], -r8
   1207c:	andeq	pc, pc, r0, lsl #30
   12080:			; <UNDEFINED> instruction: 0xfffff000
   12084:	andeq	fp, r1, r0, lsl #15
   12088:	andeq	fp, r1, r8, asr r8
   1208c:	andeq	fp, r1, ip, lsl r6
   12090:	andeq	fp, r1, r8, ror #14
   12094:	muleq	r1, r8, r7
   12098:	andeq	fp, r1, r8, asr #12
   1209c:	andeq	fp, r1, r8, asr #14
   120a0:	andeq	fp, r1, r8, lsr #14
   120a4:	andeq	fp, r1, r8, asr r6
   120a8:	andeq	fp, r1, r4, ror r6
   120ac:	strdeq	fp, [r1], -r4
   120b0:	mov	fp, #0
   120b4:	mov	lr, #0
   120b8:	pop	{r1}		; (ldr r1, [sp], #4)
   120bc:	mov	r2, sp
   120c0:	push	{r2}		; (str r2, [sp, #-4]!)
   120c4:	push	{r0}		; (str r0, [sp, #-4]!)
   120c8:	ldr	ip, [pc, #16]	; 120e0 <__assert_fail@plt+0x814>
   120cc:	push	{ip}		; (str ip, [sp, #-4]!)
   120d0:	ldr	r0, [pc, #12]	; 120e4 <__assert_fail@plt+0x818>
   120d4:	ldr	r3, [pc, #12]	; 120e8 <__assert_fail@plt+0x81c>
   120d8:	bl	11668 <__libc_start_main@plt>
   120dc:	bl	11878 <abort@plt>
   120e0:	andeq	sl, r1, r0, lsr pc
   120e4:	ldrdeq	r1, [r1], -r8
   120e8:	ldrdeq	sl, [r1], -r0
   120ec:	ldr	r3, [pc, #20]	; 12108 <__assert_fail@plt+0x83c>
   120f0:	ldr	r2, [pc, #20]	; 1210c <__assert_fail@plt+0x840>
   120f4:	add	r3, pc, r3
   120f8:	ldr	r2, [r3, r2]
   120fc:	cmp	r2, #0
   12100:	bxeq	lr
   12104:	b	11680 <__gmon_start__@plt>
   12108:	andeq	r9, r1, r4, lsl #30
   1210c:	andeq	r0, r0, ip, ror r1
   12110:	ldr	r3, [pc, #28]	; 12134 <__assert_fail@plt+0x868>
   12114:	ldr	r0, [pc, #28]	; 12138 <__assert_fail@plt+0x86c>
   12118:	sub	r3, r3, r0
   1211c:	cmp	r3, #6
   12120:	bxls	lr
   12124:	ldr	r3, [pc, #16]	; 1213c <__assert_fail@plt+0x870>
   12128:	cmp	r3, #0
   1212c:	bxeq	lr
   12130:	bx	r3
   12134:	ldrdeq	ip, [r2], -r3
   12138:	ldrdeq	ip, [r2], -r0
   1213c:	andeq	r0, r0, r0
   12140:	ldr	r1, [pc, #36]	; 1216c <__assert_fail@plt+0x8a0>
   12144:	ldr	r0, [pc, #36]	; 12170 <__assert_fail@plt+0x8a4>
   12148:	sub	r1, r1, r0
   1214c:	asr	r1, r1, #2
   12150:	add	r1, r1, r1, lsr #31
   12154:	asrs	r1, r1, #1
   12158:	bxeq	lr
   1215c:	ldr	r3, [pc, #16]	; 12174 <__assert_fail@plt+0x8a8>
   12160:	cmp	r3, #0
   12164:	bxeq	lr
   12168:	bx	r3
   1216c:	ldrdeq	ip, [r2], -r0
   12170:	ldrdeq	ip, [r2], -r0
   12174:	andeq	r0, r0, r0
   12178:	push	{r4, lr}
   1217c:	ldr	r4, [pc, #24]	; 1219c <__assert_fail@plt+0x8d0>
   12180:	ldrb	r3, [r4]
   12184:	cmp	r3, #0
   12188:	popne	{r4, pc}
   1218c:	bl	12110 <__assert_fail@plt+0x844>
   12190:	mov	r3, #1
   12194:	strb	r3, [r4]
   12198:	pop	{r4, pc}
   1219c:	andeq	ip, r2, ip, ror #3
   121a0:	ldr	r0, [pc, #40]	; 121d0 <__assert_fail@plt+0x904>
   121a4:	ldr	r3, [r0]
   121a8:	cmp	r3, #0
   121ac:	bne	121b4 <__assert_fail@plt+0x8e8>
   121b0:	b	12140 <__assert_fail@plt+0x874>
   121b4:	ldr	r3, [pc, #24]	; 121d4 <__assert_fail@plt+0x908>
   121b8:	cmp	r3, #0
   121bc:	beq	121b0 <__assert_fail@plt+0x8e4>
   121c0:	push	{r4, lr}
   121c4:	blx	r3
   121c8:	pop	{r4, lr}
   121cc:	b	12140 <__assert_fail@plt+0x874>
   121d0:	andeq	fp, r2, ip, lsl #30
   121d4:	andeq	r0, r0, r0
   121d8:	subs	r5, r0, #0
   121dc:	push	{r7, lr}
   121e0:	sub	sp, sp, #56	; 0x38
   121e4:	beq	12220 <__assert_fail@plt+0x954>
   121e8:	ldr	r3, [pc, #764]	; 124ec <__assert_fail@plt+0xc20>
   121ec:	mov	r2, #5
   121f0:	ldr	r1, [pc, #760]	; 124f0 <__assert_fail@plt+0xc24>
   121f4:	mov	r0, #0
   121f8:	ldr	r4, [r3]
   121fc:	bl	11578 <dcgettext@plt>
   12200:	ldr	r3, [pc, #748]	; 124f4 <__assert_fail@plt+0xc28>
   12204:	mov	r1, #1
   12208:	ldr	r3, [r3]
   1220c:	mov	r2, r0
   12210:	mov	r0, r4
   12214:	bl	11764 <__fprintf_chk@plt>
   12218:	mov	r0, r5
   1221c:	bl	116c8 <exit@plt>
   12220:	mov	r2, #5
   12224:	ldr	r1, [pc, #716]	; 124f8 <__assert_fail@plt+0xc2c>
   12228:	bl	11578 <dcgettext@plt>
   1222c:	ldr	r3, [pc, #704]	; 124f4 <__assert_fail@plt+0xc28>
   12230:	ldr	r7, [pc, #708]	; 124fc <__assert_fail@plt+0xc30>
   12234:	ldr	r4, [pc, #708]	; 12500 <__assert_fail@plt+0xc34>
   12238:	ldr	r2, [r3]
   1223c:	mov	r1, r0
   12240:	mov	r0, #1
   12244:	bl	1174c <__printf_chk@plt>
   12248:	mov	r2, #5
   1224c:	ldr	r1, [pc, #688]	; 12504 <__assert_fail@plt+0xc38>
   12250:	mov	r0, r5
   12254:	bl	11578 <dcgettext@plt>
   12258:	ldr	r1, [r7]
   1225c:	bl	114ac <fputs_unlocked@plt>
   12260:	mov	r2, #5
   12264:	ldr	r1, [pc, #668]	; 12508 <__assert_fail@plt+0xc3c>
   12268:	mov	r0, r5
   1226c:	bl	11578 <dcgettext@plt>
   12270:	ldr	r1, [r7]
   12274:	bl	114ac <fputs_unlocked@plt>
   12278:	mov	r2, #5
   1227c:	ldr	r1, [pc, #648]	; 1250c <__assert_fail@plt+0xc40>
   12280:	mov	r0, r5
   12284:	bl	11578 <dcgettext@plt>
   12288:	ldr	r1, [r7]
   1228c:	bl	114ac <fputs_unlocked@plt>
   12290:	mov	r2, #5
   12294:	ldr	r1, [pc, #628]	; 12510 <__assert_fail@plt+0xc44>
   12298:	mov	r0, r5
   1229c:	bl	11578 <dcgettext@plt>
   122a0:	ldr	r1, [r7]
   122a4:	bl	114ac <fputs_unlocked@plt>
   122a8:	mov	r2, #5
   122ac:	ldr	r1, [pc, #608]	; 12514 <__assert_fail@plt+0xc48>
   122b0:	mov	r0, r5
   122b4:	bl	11578 <dcgettext@plt>
   122b8:	ldr	r1, [r7]
   122bc:	bl	114ac <fputs_unlocked@plt>
   122c0:	mov	r2, #5
   122c4:	ldr	r1, [pc, #588]	; 12518 <__assert_fail@plt+0xc4c>
   122c8:	mov	r0, r5
   122cc:	bl	11578 <dcgettext@plt>
   122d0:	ldr	r1, [r7]
   122d4:	bl	114ac <fputs_unlocked@plt>
   122d8:	mov	r2, #5
   122dc:	ldr	r1, [pc, #568]	; 1251c <__assert_fail@plt+0xc50>
   122e0:	mov	r0, r5
   122e4:	bl	11578 <dcgettext@plt>
   122e8:	ldr	r1, [r7]
   122ec:	bl	114ac <fputs_unlocked@plt>
   122f0:	mov	r2, #5
   122f4:	ldr	r1, [pc, #548]	; 12520 <__assert_fail@plt+0xc54>
   122f8:	mov	r0, r5
   122fc:	bl	11578 <dcgettext@plt>
   12300:	ldr	r1, [r7]
   12304:	bl	114ac <fputs_unlocked@plt>
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #528]	; 12524 <__assert_fail@plt+0xc58>
   12310:	mov	r0, r5
   12314:	bl	11578 <dcgettext@plt>
   12318:	ldr	r2, [pc, #520]	; 12528 <__assert_fail@plt+0xc5c>
   1231c:	mov	r1, r0
   12320:	mov	r0, #1
   12324:	bl	1174c <__printf_chk@plt>
   12328:	ldm	r4!, {r0, r1, r2, r3}
   1232c:	mov	lr, sp
   12330:	stmia	lr!, {r0, r1, r2, r3}
   12334:	ldm	r4!, {r0, r1, r2, r3}
   12338:	ldr	ip, [sp]
   1233c:	stmia	lr!, {r0, r1, r2, r3}
   12340:	cmp	ip, #0
   12344:	ldm	r4!, {r0, r1, r2, r3}
   12348:	stmia	lr!, {r0, r1, r2, r3}
   1234c:	ldm	r4, {r0, r1}
   12350:	moveq	r4, sp
   12354:	stm	lr, {r0, r1}
   12358:	beq	12388 <__assert_fail@plt+0xabc>
   1235c:	ldr	r6, [pc, #452]	; 12528 <__assert_fail@plt+0xc5c>
   12360:	mov	r4, sp
   12364:	b	12374 <__assert_fail@plt+0xaa8>
   12368:	ldr	ip, [r4, #8]!
   1236c:	cmp	ip, #0
   12370:	beq	12388 <__assert_fail@plt+0xabc>
   12374:	mov	r1, ip
   12378:	mov	r0, r6
   1237c:	bl	114d0 <strcmp@plt>
   12380:	cmp	r0, #0
   12384:	bne	12368 <__assert_fail@plt+0xa9c>
   12388:	ldr	r4, [r4, #4]
   1238c:	mov	r2, #5
   12390:	cmp	r4, #0
   12394:	ldr	r1, [pc, #400]	; 1252c <__assert_fail@plt+0xc60>
   12398:	beq	12440 <__assert_fail@plt+0xb74>
   1239c:	mov	r0, #0
   123a0:	bl	11578 <dcgettext@plt>
   123a4:	ldr	r3, [pc, #388]	; 12530 <__assert_fail@plt+0xc64>
   123a8:	ldr	r2, [pc, #388]	; 12534 <__assert_fail@plt+0xc68>
   123ac:	mov	r1, r0
   123b0:	mov	r0, #1
   123b4:	bl	1174c <__printf_chk@plt>
   123b8:	mov	r1, #0
   123bc:	mov	r0, #5
   123c0:	bl	11794 <setlocale@plt>
   123c4:	cmp	r0, #0
   123c8:	ldreq	r6, [pc, #344]	; 12528 <__assert_fail@plt+0xc5c>
   123cc:	beq	123e8 <__assert_fail@plt+0xb1c>
   123d0:	mov	r2, #3
   123d4:	ldr	r1, [pc, #348]	; 12538 <__assert_fail@plt+0xc6c>
   123d8:	bl	1186c <strncmp@plt>
   123dc:	ldr	r6, [pc, #324]	; 12528 <__assert_fail@plt+0xc5c>
   123e0:	cmp	r0, #0
   123e4:	bne	124d0 <__assert_fail@plt+0xc04>
   123e8:	mov	r2, #5
   123ec:	ldr	r1, [pc, #328]	; 1253c <__assert_fail@plt+0xc70>
   123f0:	mov	r0, #0
   123f4:	bl	11578 <dcgettext@plt>
   123f8:	ldr	r3, [pc, #296]	; 12528 <__assert_fail@plt+0xc5c>
   123fc:	ldr	r2, [pc, #300]	; 12530 <__assert_fail@plt+0xc64>
   12400:	mov	r1, r0
   12404:	mov	r0, #1
   12408:	bl	1174c <__printf_chk@plt>
   1240c:	mov	r2, #5
   12410:	ldr	r1, [pc, #296]	; 12540 <__assert_fail@plt+0xc74>
   12414:	mov	r0, #0
   12418:	bl	11578 <dcgettext@plt>
   1241c:	ldr	r2, [pc, #288]	; 12544 <__assert_fail@plt+0xc78>
   12420:	cmp	r4, r6
   12424:	ldr	r3, [pc, #284]	; 12548 <__assert_fail@plt+0xc7c>
   12428:	movne	r3, r2
   1242c:	mov	r1, r0
   12430:	mov	r2, r4
   12434:	mov	r0, #1
   12438:	bl	1174c <__printf_chk@plt>
   1243c:	b	12218 <__assert_fail@plt+0x94c>
   12440:	mov	r0, r4
   12444:	bl	11578 <dcgettext@plt>
   12448:	ldr	r3, [pc, #224]	; 12530 <__assert_fail@plt+0xc64>
   1244c:	ldr	r2, [pc, #224]	; 12534 <__assert_fail@plt+0xc68>
   12450:	mov	r1, r0
   12454:	mov	r0, #1
   12458:	bl	1174c <__printf_chk@plt>
   1245c:	mov	r1, r4
   12460:	mov	r0, #5
   12464:	bl	11794 <setlocale@plt>
   12468:	cmp	r0, #0
   1246c:	beq	12484 <__assert_fail@plt+0xbb8>
   12470:	mov	r2, #3
   12474:	ldr	r1, [pc, #188]	; 12538 <__assert_fail@plt+0xc6c>
   12478:	bl	1186c <strncmp@plt>
   1247c:	cmp	r0, #0
   12480:	bne	124c8 <__assert_fail@plt+0xbfc>
   12484:	mov	r2, #5
   12488:	ldr	r1, [pc, #172]	; 1253c <__assert_fail@plt+0xc70>
   1248c:	mov	r0, #0
   12490:	bl	11578 <dcgettext@plt>
   12494:	ldr	r3, [pc, #140]	; 12528 <__assert_fail@plt+0xc5c>
   12498:	ldr	r2, [pc, #144]	; 12530 <__assert_fail@plt+0xc64>
   1249c:	mov	r4, r3
   124a0:	mov	r1, r0
   124a4:	mov	r0, #1
   124a8:	bl	1174c <__printf_chk@plt>
   124ac:	ldr	r1, [pc, #140]	; 12540 <__assert_fail@plt+0xc74>
   124b0:	mov	r2, #5
   124b4:	mov	r0, #0
   124b8:	bl	11578 <dcgettext@plt>
   124bc:	ldr	r3, [pc, #132]	; 12548 <__assert_fail@plt+0xc7c>
   124c0:	mov	r1, r0
   124c4:	b	12430 <__assert_fail@plt+0xb64>
   124c8:	ldr	r6, [pc, #88]	; 12528 <__assert_fail@plt+0xc5c>
   124cc:	mov	r4, r6
   124d0:	mov	r2, #5
   124d4:	ldr	r1, [pc, #112]	; 1254c <__assert_fail@plt+0xc80>
   124d8:	mov	r0, #0
   124dc:	bl	11578 <dcgettext@plt>
   124e0:	ldr	r1, [r7]
   124e4:	bl	114ac <fputs_unlocked@plt>
   124e8:	b	123e8 <__assert_fail@plt+0xb1c>
   124ec:	andeq	ip, r2, r0, ror #3
   124f0:	andeq	sl, r1, r8, ror #31
   124f4:	strdeq	ip, [r2], -r8
   124f8:	andeq	fp, r1, r0, lsl r0
   124fc:	andeq	ip, r2, r4, ror #3
   12500:	andeq	sl, r1, r8, asr pc
   12504:	andeq	fp, r1, r0, asr #32
   12508:	andeq	fp, r1, r4, ror r0
   1250c:	andeq	fp, r1, r0, asr #1
   12510:	andeq	fp, r1, ip, lsl #2
   12514:	ldrdeq	fp, [r1], -ip
   12518:	andeq	fp, r1, ip, lsl #4
   1251c:	andeq	fp, r1, r4, asr #4
   12520:	andeq	fp, r1, ip, asr #6
   12524:	andeq	fp, r1, ip, asr #7
   12528:	andeq	sl, r1, r0, ror #31
   1252c:	andeq	fp, r1, ip, lsl #9
   12530:	andeq	fp, r1, r4, lsr #9
   12534:	andeq	fp, r1, ip, asr #9
   12538:	ldrdeq	fp, [r1], -ip
   1253c:	andeq	fp, r1, r8, lsr #10
   12540:	andeq	fp, r1, r4, asr #10
   12544:	strdeq	fp, [r1], -r4
   12548:	andeq	fp, r1, r0, asr #15
   1254c:	andeq	fp, r1, r0, ror #9
   12550:	push	{r4, r5, r6, r7, r8, r9, lr}
   12554:	sub	sp, sp, #116	; 0x74
   12558:	mov	r4, #0
   1255c:	subs	r9, r0, #0
   12560:	mov	r6, r1
   12564:	str	r4, [sp]
   12568:	str	r4, [sp, #4]
   1256c:	beq	12714 <__assert_fail@plt+0xe48>
   12570:	mov	r1, #32768	; 0x8000
   12574:	mov	r0, r6
   12578:	bl	11644 <open64@plt>
   1257c:	cmn	r0, #1
   12580:	mov	r5, r0
   12584:	beq	1263c <__assert_fail@plt+0xd70>
   12588:	mov	r1, r0
   1258c:	add	r2, sp, #8
   12590:	mov	r0, #3
   12594:	bl	115d8 <__fxstat64@plt>
   12598:	cmp	r0, #0
   1259c:	blt	126ac <__assert_fail@plt+0xde0>
   125a0:	bl	1171c <__errno_location@plt>
   125a4:	mov	r7, r0
   125a8:	mov	r0, r9
   125ac:	ldr	r3, [sp, #24]
   125b0:	mov	r2, r6
   125b4:	mov	r1, sp
   125b8:	bl	11494 <selabel_lookup@plt>
   125bc:	cmp	r0, #0
   125c0:	blt	12688 <__assert_fail@plt+0xdbc>
   125c4:	ldr	r0, [sp]
   125c8:	bl	11554 <context_new@plt>
   125cc:	subs	r9, r0, #0
   125d0:	beq	12778 <__assert_fail@plt+0xeac>
   125d4:	cmn	r5, #1
   125d8:	add	r1, sp, #4
   125dc:	beq	126e8 <__assert_fail@plt+0xe1c>
   125e0:	mov	r0, r5
   125e4:	bl	18eb0 <lchmod@@Base+0x2780>
   125e8:	cmp	r0, #0
   125ec:	blt	1276c <__assert_fail@plt+0xea0>
   125f0:	ldr	r0, [sp, #4]
   125f4:	bl	11554 <context_new@plt>
   125f8:	subs	r4, r0, #0
   125fc:	beq	127c0 <__assert_fail@plt+0xef4>
   12600:	mov	r0, r9
   12604:	bl	114dc <context_type_get@plt>
   12608:	subs	r1, r0, #0
   1260c:	beq	12620 <__assert_fail@plt+0xd54>
   12610:	mov	r0, r4
   12614:	bl	11584 <context_type_set@plt>
   12618:	cmp	r0, #0
   1261c:	beq	12784 <__assert_fail@plt+0xeb8>
   12620:	ldr	r8, [r7]
   12624:	cmn	r5, #1
   12628:	beq	12654 <__assert_fail@plt+0xd88>
   1262c:	mvn	r6, #0
   12630:	mov	r0, r5
   12634:	bl	11884 <close@plt>
   12638:	b	12658 <__assert_fail@plt+0xd8c>
   1263c:	bl	1171c <__errno_location@plt>
   12640:	ldr	r8, [r0]
   12644:	mov	r7, r0
   12648:	cmp	r8, #40	; 0x28
   1264c:	movne	r9, r4
   12650:	beq	126c4 <__assert_fail@plt+0xdf8>
   12654:	mov	r6, r5
   12658:	mov	r0, r9
   1265c:	bl	1168c <context_free@plt>
   12660:	mov	r0, r4
   12664:	bl	1168c <context_free@plt>
   12668:	ldr	r0, [sp]
   1266c:	bl	1180c <freecon@plt>
   12670:	ldr	r0, [sp, #4]
   12674:	bl	1180c <freecon@plt>
   12678:	str	r8, [r7]
   1267c:	mov	r0, r6
   12680:	add	sp, sp, #116	; 0x74
   12684:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12688:	ldr	r8, [r7]
   1268c:	cmp	r8, #2
   12690:	movne	r4, #0
   12694:	movne	r9, r4
   12698:	moveq	r8, #61	; 0x3d
   1269c:	moveq	r4, #0
   126a0:	streq	r8, [r7]
   126a4:	moveq	r9, r4
   126a8:	b	12624 <__assert_fail@plt+0xd58>
   126ac:	bl	1171c <__errno_location@plt>
   126b0:	mov	r9, r4
   126b4:	mvn	r6, #0
   126b8:	mov	r7, r0
   126bc:	ldr	r8, [r7]
   126c0:	b	12630 <__assert_fail@plt+0xd64>
   126c4:	add	r2, sp, #8
   126c8:	mov	r1, r6
   126cc:	mov	r0, #3
   126d0:	bl	11890 <__lxstat64@plt>
   126d4:	cmp	r0, #0
   126d8:	bge	125a8 <__assert_fail@plt+0xcdc>
   126dc:	mov	r9, r4
   126e0:	ldr	r8, [r7]
   126e4:	b	12654 <__assert_fail@plt+0xd88>
   126e8:	mov	r0, r6
   126ec:	bl	18e98 <lchmod@@Base+0x2768>
   126f0:	cmp	r0, #0
   126f4:	blt	12760 <__assert_fail@plt+0xe94>
   126f8:	ldr	r0, [sp, #4]
   126fc:	bl	11554 <context_new@plt>
   12700:	subs	r4, r0, #0
   12704:	moveq	r6, r5
   12708:	ldreq	r8, [r7]
   1270c:	beq	12658 <__assert_fail@plt+0xd8c>
   12710:	b	12600 <__assert_fail@plt+0xd34>
   12714:	add	r0, sp, #4
   12718:	bl	11824 <getfscreatecon@plt>
   1271c:	cmp	r0, r4
   12720:	blt	127e0 <__assert_fail@plt+0xf14>
   12724:	ldr	r1, [sp, #4]
   12728:	cmp	r1, r4
   1272c:	beq	127cc <__assert_fail@plt+0xf00>
   12730:	mov	r0, r6
   12734:	bl	114f4 <lsetfilecon@plt>
   12738:	mov	r6, r0
   1273c:	bl	1171c <__errno_location@plt>
   12740:	mov	r4, r0
   12744:	ldr	r0, [sp, #4]
   12748:	ldr	r5, [r4]
   1274c:	bl	1180c <freecon@plt>
   12750:	mov	r0, r6
   12754:	str	r5, [r4]
   12758:	add	sp, sp, #116	; 0x74
   1275c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12760:	ldr	r8, [r7]
   12764:	mov	r4, #0
   12768:	b	12654 <__assert_fail@plt+0xd88>
   1276c:	mov	r4, #0
   12770:	mvn	r6, #0
   12774:	b	126bc <__assert_fail@plt+0xdf0>
   12778:	ldr	r8, [r7]
   1277c:	mov	r4, r9
   12780:	b	12624 <__assert_fail@plt+0xd58>
   12784:	mov	r0, r4
   12788:	bl	1183c <context_str@plt>
   1278c:	subs	r1, r0, #0
   12790:	beq	12620 <__assert_fail@plt+0xd54>
   12794:	cmn	r5, #1
   12798:	beq	127ac <__assert_fail@plt+0xee0>
   1279c:	mov	r0, r5
   127a0:	bl	117a0 <fsetfilecon@plt>
   127a4:	mov	r6, r0
   127a8:	b	126bc <__assert_fail@plt+0xdf0>
   127ac:	mov	r0, r6
   127b0:	bl	114f4 <lsetfilecon@plt>
   127b4:	ldr	r8, [r7]
   127b8:	mov	r5, r0
   127bc:	b	12654 <__assert_fail@plt+0xd88>
   127c0:	ldr	r8, [r7]
   127c4:	mvn	r6, #0
   127c8:	b	12630 <__assert_fail@plt+0xd64>
   127cc:	bl	1171c <__errno_location@plt>
   127d0:	mov	r3, #61	; 0x3d
   127d4:	mvn	r6, #0
   127d8:	str	r3, [r0]
   127dc:	b	1267c <__assert_fail@plt+0xdb0>
   127e0:	mvn	r6, #0
   127e4:	b	1267c <__assert_fail@plt+0xdb0>
   127e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   127ec:	mov	r4, r1
   127f0:	ldrb	r1, [r1]
   127f4:	sub	sp, sp, #20
   127f8:	mov	r3, #0
   127fc:	cmp	r1, #47	; 0x2f
   12800:	mov	r7, r0
   12804:	mov	r5, r2
   12808:	str	r3, [sp]
   1280c:	str	r3, [sp, #4]
   12810:	beq	129ac <__assert_fail@plt+0x10e0>
   12814:	mov	r0, r4
   12818:	mov	r1, #2
   1281c:	bl	12b38 <__assert_fail@plt+0x126c>
   12820:	subs	r6, r0, #0
   12824:	movne	r4, r6
   12828:	beq	12a08 <__assert_fail@plt+0x113c>
   1282c:	mov	r0, r7
   12830:	mov	r3, r5
   12834:	mov	r2, r4
   12838:	mov	r1, sp
   1283c:	bl	11494 <selabel_lookup@plt>
   12840:	cmp	r0, #0
   12844:	blt	12974 <__assert_fail@plt+0x10a8>
   12848:	mov	r0, r4
   1284c:	mov	r4, #0
   12850:	str	r4, [sp, #8]
   12854:	str	r4, [sp, #12]
   12858:	bl	13308 <__assert_fail@plt+0x1a3c>
   1285c:	mov	r7, r0
   12860:	add	r0, sp, #8
   12864:	bl	11614 <getcon@plt>
   12868:	cmp	r0, r4
   1286c:	blt	129b4 <__assert_fail@plt+0x10e8>
   12870:	add	r1, sp, #12
   12874:	mov	r0, r7
   12878:	bl	18e80 <lchmod@@Base+0x2750>
   1287c:	cmp	r0, #0
   12880:	blt	129b4 <__assert_fail@plt+0x10e8>
   12884:	mov	r0, r5
   12888:	bl	118a8 <mode_to_security_class@plt>
   1288c:	subs	r2, r0, #0
   12890:	beq	129b4 <__assert_fail@plt+0x10e8>
   12894:	add	r3, sp, #4
   12898:	ldr	r1, [sp, #12]
   1289c:	ldr	r0, [sp, #8]
   128a0:	bl	117dc <security_compute_create@plt>
   128a4:	mov	r8, r0
   128a8:	bl	1171c <__errno_location@plt>
   128ac:	mov	r9, r0
   128b0:	mov	r0, r7
   128b4:	ldr	r5, [r9]
   128b8:	bl	1349c <__assert_fail@plt+0x1bd0>
   128bc:	ldr	r0, [sp, #8]
   128c0:	bl	1180c <freecon@plt>
   128c4:	ldr	r0, [sp, #12]
   128c8:	bl	1180c <freecon@plt>
   128cc:	cmp	r8, #0
   128d0:	str	r5, [r9]
   128d4:	movlt	r7, r4
   128d8:	mvnlt	r8, #0
   128dc:	blt	1293c <__assert_fail@plt+0x1070>
   128e0:	ldr	r0, [sp]
   128e4:	bl	11554 <context_new@plt>
   128e8:	subs	r7, r0, #0
   128ec:	beq	129f8 <__assert_fail@plt+0x112c>
   128f0:	ldr	r0, [sp, #4]
   128f4:	bl	11554 <context_new@plt>
   128f8:	subs	r4, r0, #0
   128fc:	beq	129ec <__assert_fail@plt+0x1120>
   12900:	mov	r0, r7
   12904:	bl	114dc <context_type_get@plt>
   12908:	subs	r1, r0, #0
   1290c:	beq	129ec <__assert_fail@plt+0x1120>
   12910:	mov	r0, r4
   12914:	bl	11584 <context_type_set@plt>
   12918:	cmp	r0, #0
   1291c:	bne	129ec <__assert_fail@plt+0x1120>
   12920:	mov	r0, r4
   12924:	bl	1183c <context_str@plt>
   12928:	cmp	r0, #0
   1292c:	beq	129ec <__assert_fail@plt+0x1120>
   12930:	bl	11710 <setfscreatecon@plt>
   12934:	ldr	r5, [r9]
   12938:	mov	r8, r0
   1293c:	mov	r0, r7
   12940:	bl	1168c <context_free@plt>
   12944:	mov	r0, r4
   12948:	bl	1168c <context_free@plt>
   1294c:	ldr	r0, [sp]
   12950:	bl	1180c <freecon@plt>
   12954:	ldr	r0, [sp, #4]
   12958:	bl	1180c <freecon@plt>
   1295c:	mov	r0, r6
   12960:	bl	1349c <__assert_fail@plt+0x1bd0>
   12964:	mov	r0, r8
   12968:	str	r5, [r9]
   1296c:	add	sp, sp, #20
   12970:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12974:	bl	1171c <__errno_location@plt>
   12978:	ldr	r5, [r0]
   1297c:	mov	r9, r0
   12980:	cmp	r5, #2
   12984:	movne	r4, #0
   12988:	movne	r7, r4
   1298c:	mvnne	r8, #0
   12990:	bne	1293c <__assert_fail@plt+0x1070>
   12994:	mov	r5, #61	; 0x3d
   12998:	mov	r4, #0
   1299c:	str	r5, [r0]
   129a0:	mov	r7, r4
   129a4:	mvn	r8, #0
   129a8:	b	1293c <__assert_fail@plt+0x1070>
   129ac:	mov	r6, r3
   129b0:	b	1282c <__assert_fail@plt+0xf60>
   129b4:	bl	1171c <__errno_location@plt>
   129b8:	mov	r4, #0
   129bc:	mvn	r8, #0
   129c0:	mov	r9, r0
   129c4:	mov	r0, r7
   129c8:	ldr	r5, [r9]
   129cc:	bl	1349c <__assert_fail@plt+0x1bd0>
   129d0:	ldr	r0, [sp, #8]
   129d4:	bl	1180c <freecon@plt>
   129d8:	ldr	r0, [sp, #12]
   129dc:	bl	1180c <freecon@plt>
   129e0:	mov	r7, r4
   129e4:	str	r5, [r9]
   129e8:	b	1293c <__assert_fail@plt+0x1070>
   129ec:	ldr	r5, [r9]
   129f0:	mvn	r8, #0
   129f4:	b	1293c <__assert_fail@plt+0x1070>
   129f8:	ldr	r5, [r9]
   129fc:	mov	r4, r7
   12a00:	mvn	r8, #0
   12a04:	b	1293c <__assert_fail@plt+0x1070>
   12a08:	bl	1171c <__errno_location@plt>
   12a0c:	mov	r4, r6
   12a10:	mov	r7, r6
   12a14:	mvn	r8, #0
   12a18:	mov	r9, r0
   12a1c:	ldr	r5, [r0]
   12a20:	b	1293c <__assert_fail@plt+0x1070>
   12a24:	push	{r4, r5, r6, r7, r8, lr}
   12a28:	mov	r3, r1
   12a2c:	ldrb	r1, [r1]
   12a30:	sub	sp, sp, #8
   12a34:	mov	r5, r0
   12a38:	cmp	r1, #47	; 0x2f
   12a3c:	mov	r4, r2
   12a40:	beq	12aec <__assert_fail@plt+0x1220>
   12a44:	mov	r0, r3
   12a48:	mov	r1, #2
   12a4c:	bl	12b38 <__assert_fail@plt+0x126c>
   12a50:	subs	r8, r0, #0
   12a54:	beq	12b30 <__assert_fail@plt+0x1264>
   12a58:	cmp	r4, #0
   12a5c:	mov	r3, r8
   12a60:	beq	12af8 <__assert_fail@plt+0x122c>
   12a64:	mov	r2, #0
   12a68:	mov	r1, #16
   12a6c:	mov	r0, sp
   12a70:	str	r3, [sp]
   12a74:	str	r2, [sp, #4]
   12a78:	mov	r7, r2
   12a7c:	bl	199ac <lchmod@@Base+0x327c>
   12a80:	mov	r4, r0
   12a84:	bl	1171c <__errno_location@plt>
   12a88:	mov	r6, r0
   12a8c:	b	12aa0 <__assert_fail@plt+0x11d4>
   12a90:	ldr	r1, [r4, #24]
   12a94:	bl	12550 <__assert_fail@plt+0xc84>
   12a98:	cmp	r0, #0
   12a9c:	ldrlt	r7, [r6]
   12aa0:	mov	r0, r4
   12aa4:	bl	14dc8 <__assert_fail@plt+0x34fc>
   12aa8:	cmp	r0, #0
   12aac:	mov	r0, r5
   12ab0:	bne	12a90 <__assert_fail@plt+0x11c4>
   12ab4:	mov	r0, r4
   12ab8:	ldr	r4, [r6]
   12abc:	bl	14c68 <__assert_fail@plt+0x339c>
   12ac0:	cmp	r4, #0
   12ac4:	moveq	r4, r7
   12ac8:	cmp	r0, #0
   12acc:	mov	r0, r8
   12ad0:	ldrne	r4, [r6]
   12ad4:	bl	1349c <__assert_fail@plt+0x1bd0>
   12ad8:	clz	r4, r4
   12adc:	lsr	r4, r4, #5
   12ae0:	mov	r0, r4
   12ae4:	add	sp, sp, #8
   12ae8:	pop	{r4, r5, r6, r7, r8, pc}
   12aec:	cmp	r4, #0
   12af0:	mov	r8, #0
   12af4:	bne	12a64 <__assert_fail@plt+0x1198>
   12af8:	mov	r1, r3
   12afc:	mov	r0, r5
   12b00:	bl	12550 <__assert_fail@plt+0xc84>
   12b04:	adds	r4, r0, #1
   12b08:	movne	r4, #1
   12b0c:	bl	1171c <__errno_location@plt>
   12b10:	mov	r5, r0
   12b14:	mov	r0, r8
   12b18:	ldr	r6, [r5]
   12b1c:	bl	1349c <__assert_fail@plt+0x1bd0>
   12b20:	mov	r0, r4
   12b24:	str	r6, [r5]
   12b28:	add	sp, sp, #8
   12b2c:	pop	{r4, r5, r6, r7, r8, pc}
   12b30:	mov	r4, r8
   12b34:	b	12ae0 <__assert_fail@plt+0x1214>
   12b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b3c:	and	r9, r1, #3
   12b40:	sub	r3, r9, #1
   12b44:	sub	sp, sp, #3232	; 0xca0
   12b48:	tst	r3, r9
   12b4c:	sub	sp, sp, #12
   12b50:	bne	12d30 <__assert_fail@plt+0x1464>
   12b54:	cmp	r0, #0
   12b58:	mov	r8, r0
   12b5c:	beq	12d30 <__assert_fail@plt+0x1464>
   12b60:	ldrb	r6, [r0]
   12b64:	cmp	r6, #0
   12b68:	beq	12d6c <__assert_fail@plt+0x14a0>
   12b6c:	add	fp, sp, #2208	; 0x8a0
   12b70:	mov	r5, r1
   12b74:	add	r3, sp, #1184	; 0x4a0
   12b78:	mov	r1, #1024	; 0x400
   12b7c:	add	fp, fp, #8
   12b80:	add	sl, sp, #152	; 0x98
   12b84:	cmp	r6, #47	; 0x2f
   12b88:	str	r3, [sp, #1176]	; 0x498
   12b8c:	str	r1, [sp, #1180]	; 0x49c
   12b90:	str	r1, [sp, #2212]	; 0x8a4
   12b94:	str	r1, [sp, #148]	; 0x94
   12b98:	str	fp, [sp, #2208]	; 0x8a0
   12b9c:	str	sl, [sp, #144]	; 0x90
   12ba0:	beq	12c4c <__assert_fail@plt+0x1380>
   12ba4:	mov	r4, sl
   12ba8:	sub	r6, sl, #8
   12bac:	mov	r0, r4
   12bb0:	bl	116bc <getcwd@plt>
   12bb4:	cmp	r0, #0
   12bb8:	bne	12f18 <__assert_fail@plt+0x164c>
   12bbc:	bl	1171c <__errno_location@plt>
   12bc0:	ldr	r3, [r0]
   12bc4:	cmp	r3, #12
   12bc8:	beq	12d2c <__assert_fail@plt+0x1460>
   12bcc:	cmp	r3, #34	; 0x22
   12bd0:	beq	12c30 <__assert_fail@plt+0x1364>
   12bd4:	mov	r5, r4
   12bd8:	mov	r6, #1
   12bdc:	ldr	r0, [sp, #1176]	; 0x498
   12be0:	add	r3, sp, #1184	; 0x4a0
   12be4:	cmp	r0, r3
   12be8:	beq	12bf0 <__assert_fail@plt+0x1324>
   12bec:	bl	1349c <__assert_fail@plt+0x1bd0>
   12bf0:	ldr	r0, [sp, #2208]	; 0x8a0
   12bf4:	cmp	r0, fp
   12bf8:	beq	12c00 <__assert_fail@plt+0x1334>
   12bfc:	bl	1349c <__assert_fail@plt+0x1bd0>
   12c00:	cmp	r6, #0
   12c04:	beq	12d50 <__assert_fail@plt+0x1484>
   12c08:	ldr	r0, [sp, #144]	; 0x90
   12c0c:	cmp	r0, sl
   12c10:	moveq	r6, #0
   12c14:	beq	12c20 <__assert_fail@plt+0x1354>
   12c18:	bl	1349c <__assert_fail@plt+0x1bd0>
   12c1c:	mov	r6, #0
   12c20:	mov	r0, r6
   12c24:	add	sp, sp, #3232	; 0xca0
   12c28:	add	sp, sp, #12
   12c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c30:	mov	r0, r6
   12c34:	bl	18d10 <lchmod@@Base+0x25e0>
   12c38:	cmp	r0, #0
   12c3c:	beq	12d2c <__assert_fail@plt+0x1460>
   12c40:	ldr	r4, [sp, #144]	; 0x90
   12c44:	ldr	r1, [sp, #148]	; 0x94
   12c48:	b	12bac <__assert_fail@plt+0x12e0>
   12c4c:	mov	r4, sl
   12c50:	add	r0, sl, #1
   12c54:	strb	r6, [sp, #152]	; 0x98
   12c58:	mov	r3, #0
   12c5c:	and	r2, r5, #4
   12c60:	str	r3, [sp, #24]
   12c64:	str	r2, [sp, #8]
   12c68:	str	r3, [sp, #12]
   12c6c:	str	r3, [sp, #16]
   12c70:	str	r9, [sp, #20]
   12c74:	cmp	r6, #0
   12c78:	beq	1307c <__assert_fail@plt+0x17b0>
   12c7c:	cmp	r6, #47	; 0x2f
   12c80:	bne	12c98 <__assert_fail@plt+0x13cc>
   12c84:	ldrb	r6, [r8, #1]!
   12c88:	cmp	r6, #47	; 0x2f
   12c8c:	beq	12c84 <__assert_fail@plt+0x13b8>
   12c90:	cmp	r6, #0
   12c94:	beq	1307c <__assert_fail@plt+0x17b0>
   12c98:	mov	r5, r8
   12c9c:	ldrb	r3, [r5, #1]!
   12ca0:	cmp	r3, #0
   12ca4:	cmpne	r3, #47	; 0x2f
   12ca8:	bne	12c9c <__assert_fail@plt+0x13d0>
   12cac:	subs	r7, r5, r8
   12cb0:	beq	1307c <__assert_fail@plt+0x17b0>
   12cb4:	cmp	r7, #1
   12cb8:	beq	12e3c <__assert_fail@plt+0x1570>
   12cbc:	cmp	r7, #2
   12cc0:	cmpeq	r6, #46	; 0x2e
   12cc4:	beq	12d7c <__assert_fail@plt+0x14b0>
   12cc8:	ldrb	r3, [r0, #-1]
   12ccc:	add	r6, r7, #2
   12cd0:	cmp	r3, #47	; 0x2f
   12cd4:	movne	r3, #47	; 0x2f
   12cd8:	strbne	r3, [r0]
   12cdc:	ldr	r3, [sp, #148]	; 0x94
   12ce0:	addne	r0, r0, #1
   12ce4:	add	r3, r4, r3
   12ce8:	sub	r3, r3, r0
   12cec:	cmp	r3, r6
   12cf0:	bcs	12dd4 <__assert_fail@plt+0x1508>
   12cf4:	mov	r9, r0
   12cf8:	b	12d18 <__assert_fail@plt+0x144c>
   12cfc:	ldr	r3, [sp, #148]	; 0x94
   12d00:	ldr	r4, [sp, #144]	; 0x90
   12d04:	sub	r3, r3, r9
   12d08:	cmp	r3, r6
   12d0c:	add	r9, r4, r9
   12d10:	mov	r0, r9
   12d14:	bcs	12dd4 <__assert_fail@plt+0x1508>
   12d18:	add	r0, sp, #144	; 0x90
   12d1c:	bl	18d7c <lchmod@@Base+0x264c>
   12d20:	sub	r9, r9, r4
   12d24:	cmp	r0, #0
   12d28:	bne	12cfc <__assert_fail@plt+0x1430>
   12d2c:	bl	1996c <lchmod@@Base+0x323c>
   12d30:	bl	1171c <__errno_location@plt>
   12d34:	mov	r6, #0
   12d38:	mov	r3, #22
   12d3c:	str	r3, [r0]
   12d40:	mov	r0, r6
   12d44:	add	sp, sp, #3232	; 0xca0
   12d48:	add	sp, sp, #12
   12d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d50:	strb	r6, [r4], #1
   12d54:	sub	r0, sl, #8
   12d58:	sub	r1, r4, r5
   12d5c:	bl	18cc0 <lchmod@@Base+0x2590>
   12d60:	subs	r6, r0, #0
   12d64:	bne	12c20 <__assert_fail@plt+0x1354>
   12d68:	b	12d2c <__assert_fail@plt+0x1460>
   12d6c:	bl	1171c <__errno_location@plt>
   12d70:	mov	r3, #2
   12d74:	str	r3, [r0]
   12d78:	b	12c20 <__assert_fail@plt+0x1354>
   12d7c:	ldrb	r3, [r8, #1]
   12d80:	cmp	r3, #46	; 0x2e
   12d84:	bne	12cc8 <__assert_fail@plt+0x13fc>
   12d88:	add	r3, r4, #1
   12d8c:	cmp	r0, r3
   12d90:	bls	12dc8 <__assert_fail@plt+0x14fc>
   12d94:	sub	r3, r0, #1
   12d98:	cmp	r4, r3
   12d9c:	bcs	131dc <__assert_fail@plt+0x1910>
   12da0:	ldrb	r2, [r0, #-2]
   12da4:	cmp	r2, #47	; 0x2f
   12da8:	beq	131dc <__assert_fail@plt+0x1910>
   12dac:	sub	r3, r0, #2
   12db0:	cmp	r3, r4
   12db4:	mov	r0, r3
   12db8:	beq	12dc8 <__assert_fail@plt+0x14fc>
   12dbc:	ldrb	r2, [r3, #-1]!
   12dc0:	cmp	r2, #47	; 0x2f
   12dc4:	bne	12db0 <__assert_fail@plt+0x14e4>
   12dc8:	ldrb	r6, [r5]
   12dcc:	mov	r8, r5
   12dd0:	b	12c74 <__assert_fail@plt+0x13a8>
   12dd4:	mov	r2, r7
   12dd8:	mov	r1, r8
   12ddc:	bl	11698 <mempcpy@plt>
   12de0:	ldr	r3, [sp, #8]
   12de4:	cmp	r3, #0
   12de8:	mov	r3, #0
   12dec:	str	r0, [sp, #28]
   12df0:	strb	r3, [r0]
   12df4:	bne	12e48 <__assert_fail@plt+0x157c>
   12df8:	sub	r3, fp, #8
   12dfc:	mov	r9, r3
   12e00:	str	r5, [sp, #32]
   12e04:	ldr	r6, [sp, #2212]	; 0x8a4
   12e08:	ldr	r5, [sp, #2208]	; 0x8a0
   12e0c:	sub	r6, r6, #1
   12e10:	mov	r2, r6
   12e14:	mov	r1, r5
   12e18:	mov	r0, r4
   12e1c:	bl	115e4 <readlink@plt>
   12e20:	cmp	r6, r0
   12e24:	bgt	12f2c <__assert_fail@plt+0x1660>
   12e28:	mov	r0, r9
   12e2c:	bl	18d10 <lchmod@@Base+0x25e0>
   12e30:	cmp	r0, #0
   12e34:	bne	12e04 <__assert_fail@plt+0x1538>
   12e38:	b	12d2c <__assert_fail@plt+0x1460>
   12e3c:	cmp	r6, #46	; 0x2e
   12e40:	bne	12cc8 <__assert_fail@plt+0x13fc>
   12e44:	b	12dc8 <__assert_fail@plt+0x14fc>
   12e48:	ldr	r3, [sp, #20]
   12e4c:	cmp	r3, #2
   12e50:	beq	12f10 <__assert_fail@plt+0x1644>
   12e54:	ldrb	r2, [r5]
   12e58:	mov	r3, r5
   12e5c:	mov	r1, r2
   12e60:	cmp	r1, #47	; 0x2f
   12e64:	beq	12e70 <__assert_fail@plt+0x15a4>
   12e68:	b	12eb8 <__assert_fail@plt+0x15ec>
   12e6c:	mov	r3, r0
   12e70:	ldrb	r1, [r3, #1]
   12e74:	add	r0, r3, #1
   12e78:	cmp	r1, #47	; 0x2f
   12e7c:	beq	12e6c <__assert_fail@plt+0x15a0>
   12e80:	cmp	r1, #0
   12e84:	add	r3, r3, #2
   12e88:	beq	13150 <__assert_fail@plt+0x1884>
   12e8c:	cmp	r1, #46	; 0x2e
   12e90:	bne	12eb8 <__assert_fail@plt+0x15ec>
   12e94:	ldrb	r1, [r0, #1]
   12e98:	cmp	r1, #0
   12e9c:	beq	13150 <__assert_fail@plt+0x1884>
   12ea0:	cmp	r1, #46	; 0x2e
   12ea4:	bne	12e60 <__assert_fail@plt+0x1594>
   12ea8:	ldrb	r3, [r0, #2]
   12eac:	cmp	r3, #47	; 0x2f
   12eb0:	cmpne	r3, #0
   12eb4:	beq	13150 <__assert_fail@plt+0x1884>
   12eb8:	ldr	r3, [sp, #8]
   12ebc:	cmp	r3, #0
   12ec0:	bne	13190 <__assert_fail@plt+0x18c4>
   12ec4:	bl	1171c <__errno_location@plt>
   12ec8:	ldr	r6, [r0]
   12ecc:	subs	r6, r6, #22
   12ed0:	movne	r6, #1
   12ed4:	cmp	r6, #0
   12ed8:	beq	12f10 <__assert_fail@plt+0x1644>
   12edc:	ldr	r3, [sp, #20]
   12ee0:	cmp	r3, #1
   12ee4:	bne	131e4 <__assert_fail@plt+0x1918>
   12ee8:	bl	1171c <__errno_location@plt>
   12eec:	ldr	r3, [r0]
   12ef0:	cmp	r3, #2
   12ef4:	bne	131e4 <__assert_fail@plt+0x1918>
   12ef8:	ldr	r1, [pc, #752]	; 131f0 <__assert_fail@plt+0x1924>
   12efc:	mov	r0, r5
   12f00:	bl	118c0 <strspn@plt>
   12f04:	ldrb	r3, [r5, r0]
   12f08:	cmp	r3, #0
   12f0c:	bne	131e4 <__assert_fail@plt+0x1918>
   12f10:	ldr	r0, [sp, #28]
   12f14:	b	12dc8 <__assert_fail@plt+0x14fc>
   12f18:	mov	r1, #0
   12f1c:	mov	r0, r4
   12f20:	bl	115b4 <rawmemchr@plt>
   12f24:	ldrb	r6, [r8]
   12f28:	b	12c58 <__assert_fail@plt+0x138c>
   12f2c:	cmp	r0, #0
   12f30:	mov	r9, r5
   12f34:	mov	r6, r0
   12f38:	ldr	r5, [sp, #32]
   12f3c:	blt	12e48 <__assert_fail@plt+0x157c>
   12f40:	ldr	r3, [sp, #16]
   12f44:	cmp	r3, #19
   12f48:	addle	r3, r3, #1
   12f4c:	strle	r3, [sp, #16]
   12f50:	ble	13014 <__assert_fail@plt+0x1748>
   12f54:	ldrb	r3, [r8]
   12f58:	cmp	r3, #0
   12f5c:	beq	13014 <__assert_fail@plt+0x1748>
   12f60:	ldr	r2, [sp, #28]
   12f64:	rsb	r7, r7, #0
   12f68:	mov	r3, #0
   12f6c:	strb	r3, [r2, r7]
   12f70:	ldrb	r1, [r4]
   12f74:	add	r3, sp, #40	; 0x28
   12f78:	mov	r2, r3
   12f7c:	cmp	r1, #0
   12f80:	ldr	r3, [pc, #620]	; 131f4 <__assert_fail@plt+0x1928>
   12f84:	movne	r3, r4
   12f88:	mov	r1, r3
   12f8c:	mov	r0, #3
   12f90:	bl	11854 <__xstat64@plt>
   12f94:	cmp	r0, #0
   12f98:	bne	12fe4 <__assert_fail@plt+0x1718>
   12f9c:	ldrb	r3, [r8]
   12fa0:	ldr	r1, [sp, #24]
   12fa4:	ldr	r2, [sp, #28]
   12fa8:	cmp	r1, #0
   12fac:	strb	r3, [r2, r7]
   12fb0:	beq	131a0 <__assert_fail@plt+0x18d4>
   12fb4:	add	r2, sp, #40	; 0x28
   12fb8:	mov	r1, r8
   12fbc:	ldr	r0, [sp, #24]
   12fc0:	bl	13454 <__assert_fail@plt+0x1b88>
   12fc4:	cmp	r0, #0
   12fc8:	beq	13004 <__assert_fail@plt+0x1738>
   12fcc:	ldr	r3, [sp, #20]
   12fd0:	cmp	r3, #2
   12fd4:	beq	12f10 <__assert_fail@plt+0x1644>
   12fd8:	bl	1171c <__errno_location@plt>
   12fdc:	mov	r3, #40	; 0x28
   12fe0:	str	r3, [r0]
   12fe4:	mov	r5, r4
   12fe8:	ldr	r4, [sp, #28]
   12fec:	mov	r6, #1
   12ff0:	ldr	r0, [sp, #24]
   12ff4:	cmp	r0, #0
   12ff8:	beq	12bdc <__assert_fail@plt+0x1310>
   12ffc:	bl	16094 <__assert_fail@plt+0x47c8>
   13000:	b	12bdc <__assert_fail@plt+0x1310>
   13004:	add	r2, sp, #40	; 0x28
   13008:	mov	r1, r8
   1300c:	ldr	r0, [sp, #24]
   13010:	bl	133ec <__assert_fail@plt+0x1b20>
   13014:	ldr	r2, [sp, #12]
   13018:	mov	r3, #0
   1301c:	cmp	r2, r3
   13020:	strb	r3, [r9, r6]
   13024:	ldr	r8, [sp, #1176]	; 0x498
   13028:	ldreq	r3, [sp, #12]
   1302c:	subne	r3, r5, r8
   13030:	mov	r0, r5
   13034:	str	r3, [sp, #36]	; 0x24
   13038:	bl	116e0 <strlen@plt>
   1303c:	adds	r7, r6, r0
   13040:	str	r0, [sp, #32]
   13044:	bcs	12d2c <__assert_fail@plt+0x1460>
   13048:	ldr	r3, [sp, #1180]	; 0x49c
   1304c:	cmp	r3, r7
   13050:	bls	13064 <__assert_fail@plt+0x1798>
   13054:	b	130a8 <__assert_fail@plt+0x17dc>
   13058:	ldr	r3, [sp, #1180]	; 0x49c
   1305c:	cmp	r7, r3
   13060:	bcc	130a4 <__assert_fail@plt+0x17d8>
   13064:	add	r0, sp, #1168	; 0x490
   13068:	add	r0, r0, #8
   1306c:	bl	18d7c <lchmod@@Base+0x264c>
   13070:	cmp	r0, #0
   13074:	bne	13058 <__assert_fail@plt+0x178c>
   13078:	b	12d2c <__assert_fail@plt+0x1460>
   1307c:	add	r3, r4, #1
   13080:	cmp	r0, r3
   13084:	bls	13140 <__assert_fail@plt+0x1874>
   13088:	ldrb	r3, [r0, #-1]
   1308c:	mov	r5, r4
   13090:	mov	r6, #0
   13094:	cmp	r3, #47	; 0x2f
   13098:	subeq	r4, r0, #1
   1309c:	movne	r4, r0
   130a0:	b	12ff0 <__assert_fail@plt+0x1724>
   130a4:	ldr	r8, [sp, #1176]	; 0x498
   130a8:	ldr	r3, [sp, #12]
   130ac:	add	r0, r8, r6
   130b0:	cmp	r3, #0
   130b4:	ldrne	r3, [sp, #36]	; 0x24
   130b8:	addne	r5, r8, r3
   130bc:	ldr	r3, [sp, #32]
   130c0:	mov	r1, r5
   130c4:	add	r2, r3, #1
   130c8:	bl	11500 <memmove@plt>
   130cc:	mov	r2, r6
   130d0:	mov	r1, r9
   130d4:	mov	r0, r8
   130d8:	bl	11530 <memcpy@plt>
   130dc:	ldrb	r3, [r9]
   130e0:	cmp	r3, #47	; 0x2f
   130e4:	mov	r5, r0
   130e8:	beq	131c8 <__assert_fail@plt+0x18fc>
   130ec:	ldr	r2, [sp, #28]
   130f0:	add	r3, r4, #1
   130f4:	cmp	r2, r3
   130f8:	bls	13180 <__assert_fail@plt+0x18b4>
   130fc:	sub	r0, r2, #1
   13100:	cmp	r0, r4
   13104:	bls	13134 <__assert_fail@plt+0x1868>
   13108:	ldrb	r3, [r2, #-2]
   1310c:	cmp	r3, #47	; 0x2f
   13110:	beq	13134 <__assert_fail@plt+0x1868>
   13114:	sub	r3, r2, #2
   13118:	cmp	r4, r3
   1311c:	mov	r0, r3
   13120:	beq	13134 <__assert_fail@plt+0x1868>
   13124:	ldrb	r2, [r3, #-1]
   13128:	sub	r3, r3, #1
   1312c:	cmp	r2, #47	; 0x2f
   13130:	bne	13118 <__assert_fail@plt+0x184c>
   13134:	mov	r3, #1
   13138:	str	r3, [sp, #12]
   1313c:	b	12dc8 <__assert_fail@plt+0x14fc>
   13140:	mov	r5, r4
   13144:	mov	r6, #0
   13148:	mov	r4, r0
   1314c:	b	12ff0 <__assert_fail@plt+0x1724>
   13150:	ldr	r3, [pc, #152]	; 131f0 <__assert_fail@plt+0x1924>
   13154:	ldr	r0, [sp, #28]
   13158:	mov	r2, #0
   1315c:	ldrh	r1, [r3]
   13160:	mov	r3, #512	; 0x200
   13164:	strh	r1, [r0]
   13168:	mov	r1, r4
   1316c:	mvn	r0, #99	; 0x63
   13170:	bl	11518 <faccessat@plt>
   13174:	adds	r6, r0, #0
   13178:	movne	r6, #1
   1317c:	b	12ed4 <__assert_fail@plt+0x1608>
   13180:	mov	r3, #1
   13184:	ldr	r0, [sp, #28]
   13188:	str	r3, [sp, #12]
   1318c:	b	12dc8 <__assert_fail@plt+0x14fc>
   13190:	cmp	r2, #0
   13194:	bne	12f10 <__assert_fail@plt+0x1644>
   13198:	mov	r3, #512	; 0x200
   1319c:	b	13168 <__assert_fail@plt+0x189c>
   131a0:	ldr	r3, [pc, #80]	; 131f8 <__assert_fail@plt+0x192c>
   131a4:	ldr	r2, [pc, #80]	; 131fc <__assert_fail@plt+0x1930>
   131a8:	str	r3, [sp]
   131ac:	mov	r0, #7
   131b0:	ldr	r3, [pc, #72]	; 13200 <__assert_fail@plt+0x1934>
   131b4:	bl	15e98 <__assert_fail@plt+0x45cc>
   131b8:	subs	r3, r0, #0
   131bc:	str	r3, [sp, #24]
   131c0:	bne	12fb4 <__assert_fail@plt+0x16e8>
   131c4:	b	12d2c <__assert_fail@plt+0x1460>
   131c8:	strb	r3, [r4]
   131cc:	mov	r3, #1
   131d0:	add	r0, r4, #1
   131d4:	str	r3, [sp, #12]
   131d8:	b	12dc8 <__assert_fail@plt+0x14fc>
   131dc:	mov	r0, r3
   131e0:	b	12dc8 <__assert_fail@plt+0x14fc>
   131e4:	mov	r5, r4
   131e8:	ldr	r4, [sp, #28]
   131ec:	b	12ff0 <__assert_fail@plt+0x1724>
   131f0:	andeq	fp, r1, r4, asr #16
   131f4:	andeq	fp, r1, r8, lsr #13
   131f8:	andeq	r6, r1, r4, asr r6
   131fc:	ldrdeq	r6, [r1], -r0
   13200:	andeq	r6, r1, r8, lsl #12
   13204:	ldr	r3, [pc, #4]	; 13210 <__assert_fail@plt+0x1944>
   13208:	str	r0, [r3]
   1320c:	bx	lr
   13210:	strdeq	ip, [r2], -r0
   13214:	ldr	r3, [pc, #4]	; 13220 <__assert_fail@plt+0x1954>
   13218:	strb	r0, [r3, #4]
   1321c:	bx	lr
   13220:	strdeq	ip, [r2], -r0
   13224:	ldr	r3, [pc, #192]	; 132ec <__assert_fail@plt+0x1a20>
   13228:	push	{r4, r5, r6, lr}
   1322c:	sub	sp, sp, #8
   13230:	ldr	r0, [r3]
   13234:	bl	1a1e8 <lchmod@@Base+0x3ab8>
   13238:	cmp	r0, #0
   1323c:	beq	13260 <__assert_fail@plt+0x1994>
   13240:	ldr	r4, [pc, #168]	; 132f0 <__assert_fail@plt+0x1a24>
   13244:	ldrb	r3, [r4, #4]
   13248:	cmp	r3, #0
   1324c:	beq	1327c <__assert_fail@plt+0x19b0>
   13250:	bl	1171c <__errno_location@plt>
   13254:	ldr	r3, [r0]
   13258:	cmp	r3, #32
   1325c:	bne	1327c <__assert_fail@plt+0x19b0>
   13260:	ldr	r3, [pc, #140]	; 132f4 <__assert_fail@plt+0x1a28>
   13264:	ldr	r0, [r3]
   13268:	bl	1a1e8 <lchmod@@Base+0x3ab8>
   1326c:	cmp	r0, #0
   13270:	bne	132c4 <__assert_fail@plt+0x19f8>
   13274:	add	sp, sp, #8
   13278:	pop	{r4, r5, r6, pc}
   1327c:	mov	r2, #5
   13280:	ldr	r1, [pc, #112]	; 132f8 <__assert_fail@plt+0x1a2c>
   13284:	mov	r0, #0
   13288:	bl	11578 <dcgettext@plt>
   1328c:	ldr	r4, [r4]
   13290:	cmp	r4, #0
   13294:	mov	r5, r0
   13298:	beq	132d0 <__assert_fail@plt+0x1a04>
   1329c:	bl	1171c <__errno_location@plt>
   132a0:	ldr	r6, [r0]
   132a4:	mov	r0, r4
   132a8:	bl	18b10 <lchmod@@Base+0x23e0>
   132ac:	mov	r1, r6
   132b0:	str	r5, [sp]
   132b4:	ldr	r2, [pc, #64]	; 132fc <__assert_fail@plt+0x1a30>
   132b8:	mov	r3, r0
   132bc:	mov	r0, #0
   132c0:	bl	11638 <error@plt>
   132c4:	ldr	r3, [pc, #52]	; 13300 <__assert_fail@plt+0x1a34>
   132c8:	ldr	r0, [r3]
   132cc:	bl	11524 <_exit@plt>
   132d0:	bl	1171c <__errno_location@plt>
   132d4:	mov	r3, r5
   132d8:	ldr	r2, [pc, #36]	; 13304 <__assert_fail@plt+0x1a38>
   132dc:	ldr	r1, [r0]
   132e0:	mov	r0, r4
   132e4:	bl	11638 <error@plt>
   132e8:	b	132c4 <__assert_fail@plt+0x19f8>
   132ec:	andeq	ip, r2, r4, ror #3
   132f0:	strdeq	ip, [r2], -r0
   132f4:	andeq	ip, r2, r0, ror #3
   132f8:	andeq	fp, r1, r8, asr #16
   132fc:	andeq	fp, r1, r4, asr r8
   13300:	andeq	ip, r2, ip, lsl #3
   13304:	andeq	fp, r1, r8, asr r8
   13308:	push	{r4, lr}
   1330c:	bl	13394 <__assert_fail@plt+0x1ac8>
   13310:	cmp	r0, #0
   13314:	popne	{r4, pc}
   13318:	bl	1996c <lchmod@@Base+0x323c>
   1331c:	push	{r4, r5, r6, lr}
   13320:	mov	r5, r0
   13324:	ldrb	r4, [r0]
   13328:	bl	1a13c <lchmod@@Base+0x3a0c>
   1332c:	sub	r4, r4, #47	; 0x2f
   13330:	clz	r4, r4
   13334:	lsr	r4, r4, #5
   13338:	sub	r0, r0, r5
   1333c:	cmp	r0, r4
   13340:	bls	1338c <__assert_fail@plt+0x1ac0>
   13344:	sub	r3, r0, #1
   13348:	add	r2, r5, r3
   1334c:	ldrb	r1, [r5, r3]
   13350:	cmp	r1, #47	; 0x2f
   13354:	beq	13370 <__assert_fail@plt+0x1aa4>
   13358:	b	1338c <__assert_fail@plt+0x1ac0>
   1335c:	ldrb	r1, [r2, #-1]!
   13360:	sub	r0, r3, #1
   13364:	cmp	r1, #47	; 0x2f
   13368:	bne	13380 <__assert_fail@plt+0x1ab4>
   1336c:	mov	r3, r0
   13370:	cmp	r4, r3
   13374:	bne	1335c <__assert_fail@plt+0x1a90>
   13378:	mov	r0, r4
   1337c:	pop	{r4, r5, r6, pc}
   13380:	mov	r4, r3
   13384:	mov	r0, r4
   13388:	pop	{r4, r5, r6, pc}
   1338c:	mov	r4, r0
   13390:	b	13378 <__assert_fail@plt+0x1aac>
   13394:	push	{r4, r5, r6, lr}
   13398:	mov	r6, r0
   1339c:	bl	1331c <__assert_fail@plt+0x1a50>
   133a0:	add	r3, r0, #1
   133a4:	mov	r4, r0
   133a8:	cmp	r0, #0
   133ac:	movne	r0, r3
   133b0:	addeq	r0, r3, #1
   133b4:	bl	1a0b4 <lchmod@@Base+0x3984>
   133b8:	subs	r5, r0, #0
   133bc:	beq	133e4 <__assert_fail@plt+0x1b18>
   133c0:	mov	r2, r4
   133c4:	mov	r1, r6
   133c8:	bl	11530 <memcpy@plt>
   133cc:	cmp	r4, #0
   133d0:	moveq	r3, #46	; 0x2e
   133d4:	moveq	r4, #1
   133d8:	strbeq	r3, [r5]
   133dc:	mov	r3, #0
   133e0:	strb	r3, [r5, r4]
   133e4:	mov	r0, r5
   133e8:	pop	{r4, r5, r6, pc}
   133ec:	push	{r4, r5, r6, r7, r8, lr}
   133f0:	subs	r8, r0, #0
   133f4:	popeq	{r4, r5, r6, r7, r8, pc}
   133f8:	mov	r0, #24
   133fc:	mov	r4, r1
   13400:	mov	r7, r2
   13404:	bl	19424 <lchmod@@Base+0x2cf4>
   13408:	mov	r6, r0
   1340c:	mov	r0, r4
   13410:	bl	19950 <lchmod@@Base+0x3220>
   13414:	ldrd	r4, [r7, #96]	; 0x60
   13418:	ldrd	r2, [r7]
   1341c:	mov	r1, r6
   13420:	strd	r4, [r6, #8]
   13424:	strd	r2, [r6, #16]
   13428:	str	r0, [r6]
   1342c:	mov	r0, r8
   13430:	bl	1648c <__assert_fail@plt+0x4bc0>
   13434:	cmp	r0, #0
   13438:	beq	13450 <__assert_fail@plt+0x1b84>
   1343c:	cmp	r6, r0
   13440:	popeq	{r4, r5, r6, r7, r8, pc}
   13444:	mov	r0, r6
   13448:	pop	{r4, r5, r6, r7, r8, lr}
   1344c:	b	16654 <__assert_fail@plt+0x4d88>
   13450:	bl	1996c <lchmod@@Base+0x323c>
   13454:	subs	r3, r0, #0
   13458:	beq	13494 <__assert_fail@plt+0x1bc8>
   1345c:	push	{r4, r5, lr}
   13460:	sub	sp, sp, #28
   13464:	ldrd	r4, [r2, #96]	; 0x60
   13468:	ldrd	r2, [r2]
   1346c:	mov	ip, r1
   13470:	mov	r1, sp
   13474:	str	ip, [sp]
   13478:	strd	r4, [sp, #8]
   1347c:	strd	r2, [sp, #16]
   13480:	bl	15bf8 <__assert_fail@plt+0x432c>
   13484:	adds	r0, r0, #0
   13488:	movne	r0, #1
   1348c:	add	sp, sp, #28
   13490:	pop	{r4, r5, pc}
   13494:	mov	r0, r3
   13498:	bx	lr
   1349c:	push	{r4, r5, lr}
   134a0:	sub	sp, sp, #12
   134a4:	mov	r5, r0
   134a8:	bl	1171c <__errno_location@plt>
   134ac:	mov	r2, #0
   134b0:	mov	r4, r0
   134b4:	ldr	r3, [r0]
   134b8:	str	r2, [r4]
   134bc:	mov	r0, r5
   134c0:	str	r3, [sp]
   134c4:	str	r3, [sp, #4]
   134c8:	bl	1150c <free@plt>
   134cc:	ldr	r3, [r4]
   134d0:	add	r2, sp, #8
   134d4:	cmp	r3, #0
   134d8:	moveq	r3, #4
   134dc:	movne	r3, #0
   134e0:	add	r3, r2, r3
   134e4:	ldr	r3, [r3, #-8]
   134e8:	str	r3, [r4]
   134ec:	add	sp, sp, #12
   134f0:	pop	{r4, r5, pc}
   134f4:	ldrd	r2, [r1, #8]
   134f8:	push	{r4, r5}
   134fc:	ldrd	r4, [r0, #8]
   13500:	cmp	r5, r3
   13504:	cmpeq	r4, r2
   13508:	movne	r0, #0
   1350c:	beq	13518 <__assert_fail@plt+0x1c4c>
   13510:	pop	{r4, r5}
   13514:	bx	lr
   13518:	ldrd	r4, [r0]
   1351c:	ldrd	r2, [r1]
   13520:	cmp	r5, r3
   13524:	cmpeq	r4, r2
   13528:	moveq	r0, #1
   1352c:	movne	r0, #0
   13530:	pop	{r4, r5}
   13534:	bx	lr
   13538:	push	{r4, lr}
   1353c:	mov	r2, r1
   13540:	mov	r3, #0
   13544:	ldrd	r0, [r0, #8]
   13548:	bl	1ad5c <lchmod@@Base+0x462c>
   1354c:	mov	r0, r2
   13550:	pop	{r4, pc}
   13554:	push	{r4, lr}
   13558:	mov	r2, r1
   1355c:	mov	r3, #0
   13560:	ldrd	r0, [r0]
   13564:	bl	1ad5c <lchmod@@Base+0x462c>
   13568:	mov	r0, r2
   1356c:	pop	{r4, pc}
   13570:	push	{r4, r5}
   13574:	ldrd	r2, [r1]
   13578:	ldrd	r4, [r0]
   1357c:	cmp	r5, r3
   13580:	cmpeq	r4, r2
   13584:	moveq	r0, #1
   13588:	movne	r0, #0
   1358c:	pop	{r4, r5}
   13590:	bx	lr
   13594:	ldr	r2, [r0]
   13598:	ldr	r3, [r1]
   1359c:	ldrd	r0, [r2, #160]	; 0xa0
   135a0:	ldrd	r2, [r3, #160]	; 0xa0
   135a4:	cmp	r1, r3
   135a8:	cmpeq	r0, r2
   135ac:	movhi	r0, #1
   135b0:	movls	r0, #0
   135b4:	movcc	r3, #1
   135b8:	movcs	r3, #0
   135bc:	sub	r0, r0, r3
   135c0:	bx	lr
   135c4:	ldr	r3, [r0, #40]	; 0x28
   135c8:	push	{r4, r5, r6, r7, r8, lr}
   135cc:	cmp	r3, r2
   135d0:	mov	r6, r0
   135d4:	mov	r5, r2
   135d8:	mov	r4, r1
   135dc:	ldr	r7, [r0, #44]	; 0x2c
   135e0:	bcc	13658 <__assert_fail@plt+0x1d8c>
   135e4:	ldr	r0, [r0, #8]
   135e8:	cmp	r4, #0
   135ec:	movne	r2, r0
   135f0:	beq	13604 <__assert_fail@plt+0x1d38>
   135f4:	str	r4, [r2], #4
   135f8:	ldr	r4, [r4, #8]
   135fc:	cmp	r4, #0
   13600:	bne	135f4 <__assert_fail@plt+0x1d28>
   13604:	mov	r3, r7
   13608:	mov	r2, #4
   1360c:	mov	r1, r5
   13610:	bl	11800 <qsort@plt>
   13614:	ldr	lr, [r6, #8]
   13618:	subs	r3, r5, #1
   1361c:	ldr	r0, [lr]
   13620:	beq	1369c <__assert_fail@plt+0x1dd0>
   13624:	mov	r2, lr
   13628:	mov	ip, r0
   1362c:	b	13634 <__assert_fail@plt+0x1d68>
   13630:	ldr	ip, [r2, #4]!
   13634:	ldr	r1, [r2, #4]
   13638:	subs	r3, r3, #1
   1363c:	str	r1, [ip, #8]
   13640:	bne	13630 <__assert_fail@plt+0x1d64>
   13644:	add	r5, lr, r5, lsl #2
   13648:	ldr	r2, [r5, #-4]
   1364c:	mov	r3, #0
   13650:	str	r3, [r2, #8]
   13654:	pop	{r4, r5, r6, r7, r8, pc}
   13658:	add	r1, r2, #40	; 0x28
   1365c:	cmn	r1, #-1073741823	; 0xc0000001
   13660:	str	r1, [r0, #40]	; 0x28
   13664:	bhi	13680 <__assert_fail@plt+0x1db4>
   13668:	lsl	r1, r1, #2
   1366c:	ldr	r0, [r0, #8]
   13670:	bl	1a0e0 <lchmod@@Base+0x39b0>
   13674:	cmp	r0, #0
   13678:	strne	r0, [r6, #8]
   1367c:	bne	135e8 <__assert_fail@plt+0x1d1c>
   13680:	ldr	r0, [r6, #8]
   13684:	bl	1349c <__assert_fail@plt+0x1bd0>
   13688:	mov	r3, #0
   1368c:	mov	r0, r4
   13690:	str	r3, [r6, #8]
   13694:	str	r3, [r6, #40]	; 0x28
   13698:	pop	{r4, r5, r6, r7, r8, pc}
   1369c:	mov	r2, r0
   136a0:	b	1364c <__assert_fail@plt+0x1d80>
   136a4:	add	r3, r2, #176	; 0xb0
   136a8:	push	{r4, r5, r6, r7, r8, lr}
   136ac:	mov	r6, r0
   136b0:	bic	r0, r3, #7
   136b4:	mov	r5, r2
   136b8:	mov	r7, r1
   136bc:	bl	1a0b4 <lchmod@@Base+0x3984>
   136c0:	subs	r4, r0, #0
   136c4:	beq	13710 <__assert_fail@plt+0x1e44>
   136c8:	mov	r1, r7
   136cc:	mov	r2, r5
   136d0:	add	r0, r4, #168	; 0xa8
   136d4:	bl	11530 <memcpy@plt>
   136d8:	add	r0, r4, r5
   136dc:	ldr	r1, [r6, #24]
   136e0:	mov	r3, #0
   136e4:	mov	r2, #3
   136e8:	strb	r3, [r0, #168]	; 0xa8
   136ec:	str	r3, [r4, #32]
   136f0:	str	r3, [r4, #12]
   136f4:	strh	r3, [r4, #58]	; 0x3a
   136f8:	str	r3, [r4, #16]
   136fc:	str	r3, [r4, #20]
   13700:	str	r5, [r4, #52]	; 0x34
   13704:	str	r6, [r4, #44]	; 0x2c
   13708:	str	r1, [r4, #28]
   1370c:	strh	r2, [r4, #60]	; 0x3c
   13710:	mov	r0, r4
   13714:	pop	{r4, r5, r6, r7, r8, pc}
   13718:	push	{r4, r5, r6, lr}
   1371c:	subs	r4, r0, #0
   13720:	popeq	{r4, r5, r6, pc}
   13724:	ldr	r3, [r4, #12]
   13728:	ldr	r5, [r4, #8]
   1372c:	subs	r0, r3, #0
   13730:	beq	13738 <__assert_fail@plt+0x1e6c>
   13734:	bl	118b4 <closedir@plt>
   13738:	mov	r0, r4
   1373c:	bl	1349c <__assert_fail@plt+0x1bd0>
   13740:	subs	r4, r5, #0
   13744:	bne	13724 <__assert_fail@plt+0x1e58>
   13748:	pop	{r4, r5, r6, pc}
   1374c:	push	{r4, lr}
   13750:	mov	r4, r0
   13754:	b	13764 <__assert_fail@plt+0x1e98>
   13758:	bl	166e8 <__assert_fail@plt+0x4e1c>
   1375c:	cmp	r0, #0
   13760:	bge	1377c <__assert_fail@plt+0x1eb0>
   13764:	mov	r0, r4
   13768:	bl	1669c <__assert_fail@plt+0x4dd0>
   1376c:	cmp	r0, #0
   13770:	mov	r0, r4
   13774:	beq	13758 <__assert_fail@plt+0x1e8c>
   13778:	pop	{r4, pc}
   1377c:	bl	11884 <close@plt>
   13780:	b	13764 <__assert_fail@plt+0x1e98>
   13784:	push	{r4, r5, r6, r7, lr}
   13788:	sub	sp, sp, #100	; 0x64
   1378c:	ldr	r4, [r0, #44]	; 0x2c
   13790:	ldr	r3, [r4, #48]	; 0x30
   13794:	tst	r3, #512	; 0x200
   13798:	beq	1380c <__assert_fail@plt+0x1f40>
   1379c:	ldr	r6, [r4, #52]	; 0x34
   137a0:	mov	r7, r1
   137a4:	cmp	r6, #0
   137a8:	mov	r5, r0
   137ac:	beq	137d8 <__assert_fail@plt+0x1f0c>
   137b0:	ldrd	r2, [r5, #64]	; 0x40
   137b4:	add	r1, sp, #96	; 0x60
   137b8:	mov	r0, r6
   137bc:	strd	r2, [r1, #-88]!	; 0xffffffa8
   137c0:	bl	15bf8 <__assert_fail@plt+0x432c>
   137c4:	cmp	r0, #0
   137c8:	beq	13804 <__assert_fail@plt+0x1f38>
   137cc:	ldr	r0, [r0, #8]
   137d0:	add	sp, sp, #100	; 0x64
   137d4:	pop	{r4, r5, r6, r7, pc}
   137d8:	ldr	r3, [pc, #168]	; 13888 <__assert_fail@plt+0x1fbc>
   137dc:	mov	r1, r6
   137e0:	str	r3, [sp]
   137e4:	ldr	r2, [pc, #160]	; 1388c <__assert_fail@plt+0x1fc0>
   137e8:	ldr	r3, [pc, #160]	; 13890 <__assert_fail@plt+0x1fc4>
   137ec:	mov	r0, #13
   137f0:	bl	15e98 <__assert_fail@plt+0x45cc>
   137f4:	cmp	r0, #0
   137f8:	mov	r6, r0
   137fc:	str	r0, [r4, #52]	; 0x34
   13800:	bne	137b0 <__assert_fail@plt+0x1ee4>
   13804:	cmp	r7, #0
   13808:	bge	13818 <__assert_fail@plt+0x1f4c>
   1380c:	mov	r0, #0
   13810:	add	sp, sp, #100	; 0x64
   13814:	pop	{r4, r5, r6, r7, pc}
   13818:	mov	r0, r7
   1381c:	add	r1, sp, #8
   13820:	bl	11488 <fstatfs64@plt>
   13824:	cmp	r0, #0
   13828:	bne	1380c <__assert_fail@plt+0x1f40>
   1382c:	cmp	r6, #0
   13830:	beq	1387c <__assert_fail@plt+0x1fb0>
   13834:	mov	r0, #16
   13838:	bl	1a0b4 <lchmod@@Base+0x3984>
   1383c:	subs	r4, r0, #0
   13840:	beq	1387c <__assert_fail@plt+0x1fb0>
   13844:	ldrd	r2, [r5, #64]	; 0x40
   13848:	ldr	r1, [sp, #8]
   1384c:	mov	r0, r6
   13850:	str	r1, [r4, #8]
   13854:	strd	r2, [r4]
   13858:	mov	r1, r4
   1385c:	bl	1648c <__assert_fail@plt+0x4bc0>
   13860:	cmp	r0, #0
   13864:	beq	13874 <__assert_fail@plt+0x1fa8>
   13868:	cmp	r4, r0
   1386c:	beq	1387c <__assert_fail@plt+0x1fb0>
   13870:	bl	11878 <abort@plt>
   13874:	mov	r0, r4
   13878:	bl	1349c <__assert_fail@plt+0x1bd0>
   1387c:	ldr	r0, [sp, #8]
   13880:	add	sp, sp, #100	; 0x64
   13884:	pop	{r4, r5, r6, r7, pc}
   13888:	muleq	r1, ip, r4
   1388c:	andeq	r3, r1, r4, asr r5
   13890:	andeq	r3, r1, r0, ror r5
   13894:	push	{r4, r5, r6, lr}
   13898:	mov	r5, r1
   1389c:	ldr	r1, [r0, #32]
   138a0:	cmn	r1, #100	; 0x64
   138a4:	sub	r3, r1, r5
   138a8:	clz	r3, r3
   138ac:	lsr	r3, r3, #5
   138b0:	moveq	r3, #0
   138b4:	cmp	r3, #0
   138b8:	bne	13910 <__assert_fail@plt+0x2044>
   138bc:	cmp	r2, #0
   138c0:	mov	r4, r0
   138c4:	bne	138f8 <__assert_fail@plt+0x202c>
   138c8:	ldr	r3, [r0, #48]	; 0x30
   138cc:	lsr	r3, r3, #2
   138d0:	eor	r3, r3, #1
   138d4:	cmp	r1, #0
   138d8:	movlt	r3, #0
   138dc:	andge	r3, r3, #1
   138e0:	cmp	r3, #0
   138e4:	beq	138f0 <__assert_fail@plt+0x2024>
   138e8:	mov	r0, r1
   138ec:	bl	11884 <close@plt>
   138f0:	str	r5, [r4, #32]
   138f4:	pop	{r4, r5, r6, pc}
   138f8:	add	r0, r0, #60	; 0x3c
   138fc:	bl	166a4 <__assert_fail@plt+0x4dd8>
   13900:	cmp	r0, #0
   13904:	bge	138ec <__assert_fail@plt+0x2020>
   13908:	str	r5, [r4, #32]
   1390c:	pop	{r4, r5, r6, pc}
   13910:	bl	11878 <abort@plt>
   13914:	ldr	r3, [r0, #48]	; 0x30
   13918:	push	{r4, r5, r6, lr}
   1391c:	ands	r5, r3, #4
   13920:	mov	r4, r0
   13924:	movne	r5, #0
   13928:	bne	13944 <__assert_fail@plt+0x2078>
   1392c:	tst	r3, #512	; 0x200
   13930:	bne	13954 <__assert_fail@plt+0x2088>
   13934:	ldr	r0, [r0, #28]
   13938:	bl	117f4 <fchdir@plt>
   1393c:	adds	r5, r0, #0
   13940:	movne	r5, #1
   13944:	add	r0, r4, #60	; 0x3c
   13948:	bl	1374c <__assert_fail@plt+0x1e80>
   1394c:	mov	r0, r5
   13950:	pop	{r4, r5, r6, pc}
   13954:	mov	r2, #1
   13958:	mvn	r1, #99	; 0x63
   1395c:	bl	13894 <__assert_fail@plt+0x1fc8>
   13960:	b	13944 <__assert_fail@plt+0x2078>
   13964:	push	{r4, r5, r6, lr}
   13968:	mov	r4, r2
   1396c:	ldr	r2, [r2, #48]	; 0x30
   13970:	sub	sp, sp, #8
   13974:	cmp	r2, #0
   13978:	add	r5, r4, #64	; 0x40
   1397c:	bne	139d4 <__assert_fail@plt+0x2108>
   13980:	tst	r1, #1
   13984:	beq	139d4 <__assert_fail@plt+0x2108>
   13988:	mov	r2, r5
   1398c:	ldr	r1, [r4, #24]
   13990:	mov	r0, #3
   13994:	bl	11854 <__xstat64@plt>
   13998:	cmp	r0, #0
   1399c:	beq	13a10 <__assert_fail@plt+0x2144>
   139a0:	bl	1171c <__errno_location@plt>
   139a4:	ldr	r3, [r0]
   139a8:	mov	r6, r0
   139ac:	cmp	r3, #2
   139b0:	beq	13a88 <__assert_fail@plt+0x21bc>
   139b4:	str	r3, [r4, #32]
   139b8:	mov	r0, r5
   139bc:	mov	r2, #104	; 0x68
   139c0:	mov	r1, #0
   139c4:	bl	11740 <memset@plt>
   139c8:	mov	r0, #10
   139cc:	add	sp, sp, #8
   139d0:	pop	{r4, r5, r6, pc}
   139d4:	lsl	r1, r1, #30
   139d8:	orrs	r3, r3, r1, lsr #31
   139dc:	bne	13988 <__assert_fail@plt+0x20bc>
   139e0:	mov	r3, #256	; 0x100
   139e4:	ldr	r2, [r4, #24]
   139e8:	mov	r1, r0
   139ec:	str	r3, [sp]
   139f0:	mov	r0, #3
   139f4:	mov	r3, r5
   139f8:	bl	115c0 <__fxstatat64@plt>
   139fc:	cmp	r0, #0
   13a00:	beq	13a10 <__assert_fail@plt+0x2144>
   13a04:	bl	1171c <__errno_location@plt>
   13a08:	ldr	r3, [r0]
   13a0c:	b	139b4 <__assert_fail@plt+0x20e8>
   13a10:	ldr	r0, [r4, #80]	; 0x50
   13a14:	and	r0, r0, #61440	; 0xf000
   13a18:	cmp	r0, #16384	; 0x4000
   13a1c:	beq	13a40 <__assert_fail@plt+0x2174>
   13a20:	cmp	r0, #40960	; 0xa000
   13a24:	moveq	r0, #12
   13a28:	beq	139cc <__assert_fail@plt+0x2100>
   13a2c:	cmp	r0, #32768	; 0x8000
   13a30:	movne	r0, #3
   13a34:	moveq	r0, #8
   13a38:	add	sp, sp, #8
   13a3c:	pop	{r4, r5, r6, pc}
   13a40:	ldrb	r3, [r4, #168]	; 0xa8
   13a44:	cmp	r3, #46	; 0x2e
   13a48:	beq	13a54 <__assert_fail@plt+0x2188>
   13a4c:	mov	r0, #1
   13a50:	b	139cc <__assert_fail@plt+0x2100>
   13a54:	ldrb	r3, [r4, #169]	; 0xa9
   13a58:	cmp	r3, #0
   13a5c:	beq	13a74 <__assert_fail@plt+0x21a8>
   13a60:	ldr	r3, [r4, #168]	; 0xa8
   13a64:	bic	r3, r3, #-16777216	; 0xff000000
   13a68:	bic	r3, r3, #255	; 0xff
   13a6c:	cmp	r3, #11776	; 0x2e00
   13a70:	bne	13a4c <__assert_fail@plt+0x2180>
   13a74:	ldr	r0, [r4, #48]	; 0x30
   13a78:	cmp	r0, #0
   13a7c:	movne	r0, #5
   13a80:	moveq	r0, #1
   13a84:	b	139cc <__assert_fail@plt+0x2100>
   13a88:	mov	r2, r5
   13a8c:	ldr	r1, [r4, #24]
   13a90:	mov	r0, #3
   13a94:	bl	11890 <__lxstat64@plt>
   13a98:	cmp	r0, #0
   13a9c:	streq	r0, [r6]
   13aa0:	moveq	r0, #13
   13aa4:	beq	139cc <__assert_fail@plt+0x2100>
   13aa8:	ldr	r3, [r6]
   13aac:	b	139b4 <__assert_fail@plt+0x20e8>
   13ab0:	push	{r4, r5, r6, lr}
   13ab4:	mov	r5, r0
   13ab8:	ldr	r0, [r1]
   13abc:	add	r3, r0, #256	; 0x100
   13ac0:	add	r2, r3, r2
   13ac4:	cmp	r0, r2
   13ac8:	bhi	13af4 <__assert_fail@plt+0x2228>
   13acc:	str	r2, [r1]
   13ad0:	ldr	r0, [r5]
   13ad4:	mov	r1, r2
   13ad8:	bl	1a0e0 <lchmod@@Base+0x39b0>
   13adc:	subs	r4, r0, #0
   13ae0:	movne	r3, #1
   13ae4:	strne	r4, [r5]
   13ae8:	beq	13b1c <__assert_fail@plt+0x2250>
   13aec:	mov	r0, r3
   13af0:	pop	{r4, r5, r6, pc}
   13af4:	ldr	r0, [r5]
   13af8:	mov	r4, #0
   13afc:	bl	1349c <__assert_fail@plt+0x1bd0>
   13b00:	str	r4, [r5]
   13b04:	bl	1171c <__errno_location@plt>
   13b08:	mov	r2, #36	; 0x24
   13b0c:	mov	r3, r4
   13b10:	str	r2, [r0]
   13b14:	mov	r0, r3
   13b18:	pop	{r4, r5, r6, pc}
   13b1c:	ldr	r0, [r5]
   13b20:	bl	1349c <__assert_fail@plt+0x1bd0>
   13b24:	str	r4, [r5]
   13b28:	mov	r3, r4
   13b2c:	b	13aec <__assert_fail@plt+0x2220>
   13b30:	ldr	r3, [pc, #104]	; 13ba0 <__assert_fail@plt+0x22d4>
   13b34:	push	{r4, lr}
   13b38:	and	r3, r3, r0
   13b3c:	cmp	r3, #0
   13b40:	sub	sp, sp, #8
   13b44:	mov	r4, r1
   13b48:	beq	13b7c <__assert_fail@plt+0x22b0>
   13b4c:	ldr	r2, [pc, #80]	; 13ba4 <__assert_fail@plt+0x22d8>
   13b50:	ldr	r3, [pc, #80]	; 13ba8 <__assert_fail@plt+0x22dc>
   13b54:	str	r2, [sp]
   13b58:	mov	r1, #0
   13b5c:	ldr	r2, [pc, #72]	; 13bac <__assert_fail@plt+0x22e0>
   13b60:	mov	r0, #31
   13b64:	bl	15e98 <__assert_fail@plt+0x45cc>
   13b68:	str	r0, [r4]
   13b6c:	adds	r0, r0, #0
   13b70:	movne	r0, #1
   13b74:	add	sp, sp, #8
   13b78:	pop	{r4, pc}
   13b7c:	mov	r0, #32
   13b80:	bl	1a0b4 <lchmod@@Base+0x3984>
   13b84:	cmp	r0, #0
   13b88:	str	r0, [r4]
   13b8c:	beq	13b74 <__assert_fail@plt+0x22a8>
   13b90:	bl	1a264 <lchmod@@Base+0x3b34>
   13b94:	mov	r0, #1
   13b98:	add	sp, sp, #8
   13b9c:	pop	{r4, pc}
   13ba0:	andeq	r0, r0, r2, lsl #2
   13ba4:	muleq	r1, ip, r4
   13ba8:	strdeq	r3, [r1], -r4
   13bac:	andeq	r3, r1, r8, lsr r5
   13bb0:	ldr	ip, [pc, #44]	; 13be4 <__assert_fail@plt+0x2318>
   13bb4:	tst	r1, #16
   13bb8:	ldr	r3, [pc, #40]	; 13be8 <__assert_fail@plt+0x231c>
   13bbc:	moveq	r3, ip
   13bc0:	tst	r1, #512	; 0x200
   13bc4:	mov	ip, r2
   13bc8:	bne	13bd8 <__assert_fail@plt+0x230c>
   13bcc:	mov	r1, r3
   13bd0:	mov	r0, r2
   13bd4:	b	1a5c8 <lchmod@@Base+0x3e98>
   13bd8:	mov	r2, r3
   13bdc:	mov	r1, ip
   13be0:	b	16d5c <lchmod@@Base+0x62c>
   13be4:	andeq	r4, r8, r0, lsl #18
   13be8:	andeq	ip, r8, r0, lsl #18
   13bec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bf0:	subs	sl, r3, #0
   13bf4:	sub	sp, sp, #104	; 0x68
   13bf8:	mov	r5, r0
   13bfc:	mov	r6, r1
   13c00:	mov	r4, r2
   13c04:	ldr	r9, [r0, #48]	; 0x30
   13c08:	beq	13c5c <__assert_fail@plt+0x2390>
   13c0c:	ldr	r1, [pc, #432]	; 13dc4 <__assert_fail@plt+0x24f8>
   13c10:	mov	r0, sl
   13c14:	bl	114d0 <strcmp@plt>
   13c18:	cmp	r0, #0
   13c1c:	bne	13c5c <__assert_fail@plt+0x2390>
   13c20:	tst	r9, #4
   13c24:	bne	13c64 <__assert_fail@plt+0x2398>
   13c28:	cmp	r4, #0
   13c2c:	bge	13db0 <__assert_fail@plt+0x24e4>
   13c30:	tst	r9, #512	; 0x200
   13c34:	bne	13d50 <__assert_fail@plt+0x2484>
   13c38:	mov	r8, #1
   13c3c:	mov	r1, r9
   13c40:	mov	r2, sl
   13c44:	ldr	r0, [r5, #32]
   13c48:	bl	13bb0 <__assert_fail@plt+0x22e4>
   13c4c:	subs	r7, r0, #0
   13c50:	blt	13da8 <__assert_fail@plt+0x24dc>
   13c54:	ldr	r9, [r5, #48]	; 0x30
   13c58:	b	13c98 <__assert_fail@plt+0x23cc>
   13c5c:	ands	r8, r9, #4
   13c60:	beq	13c8c <__assert_fail@plt+0x23c0>
   13c64:	mvn	r3, r4
   13c68:	lsr	r3, r3, #31
   13c6c:	ands	r9, r3, r9, lsr #9
   13c70:	beq	13c80 <__assert_fail@plt+0x23b4>
   13c74:	mov	r0, r4
   13c78:	bl	11884 <close@plt>
   13c7c:	mov	r9, #0
   13c80:	mov	r0, r9
   13c84:	add	sp, sp, #104	; 0x68
   13c88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c8c:	cmp	r4, #0
   13c90:	movge	r7, r4
   13c94:	blt	13c3c <__assert_fail@plt+0x2370>
   13c98:	tst	r9, #2
   13c9c:	bne	13cbc <__assert_fail@plt+0x23f0>
   13ca0:	cmp	sl, #0
   13ca4:	beq	13d14 <__assert_fail@plt+0x2448>
   13ca8:	mov	r0, sl
   13cac:	ldr	r1, [pc, #272]	; 13dc4 <__assert_fail@plt+0x24f8>
   13cb0:	bl	114d0 <strcmp@plt>
   13cb4:	cmp	r0, #0
   13cb8:	bne	13d14 <__assert_fail@plt+0x2448>
   13cbc:	mov	r2, sp
   13cc0:	mov	r1, r7
   13cc4:	mov	r0, #3
   13cc8:	bl	115d8 <__fxstat64@plt>
   13ccc:	cmp	r0, #0
   13cd0:	beq	13d2c <__assert_fail@plt+0x2460>
   13cd4:	mvn	r9, #0
   13cd8:	cmp	r4, #0
   13cdc:	bge	13c80 <__assert_fail@plt+0x23b4>
   13ce0:	bl	1171c <__errno_location@plt>
   13ce4:	mov	r4, r0
   13ce8:	mov	r0, r7
   13cec:	ldr	r5, [r4]
   13cf0:	bl	11884 <close@plt>
   13cf4:	str	r5, [r4]
   13cf8:	b	13c80 <__assert_fail@plt+0x23b4>
   13cfc:	ldrd	r0, [r6, #160]	; 0xa0
   13d00:	ldrd	r2, [sp, #96]	; 0x60
   13d04:	cmp	r1, r3
   13d08:	cmpeq	r0, r2
   13d0c:	bne	13d40 <__assert_fail@plt+0x2474>
   13d10:	ldr	r9, [r5, #48]	; 0x30
   13d14:	tst	r9, #512	; 0x200
   13d18:	bne	13d8c <__assert_fail@plt+0x24c0>
   13d1c:	mov	r0, r7
   13d20:	bl	117f4 <fchdir@plt>
   13d24:	mov	r9, r0
   13d28:	b	13cd8 <__assert_fail@plt+0x240c>
   13d2c:	ldrd	r0, [r6, #64]	; 0x40
   13d30:	ldrd	r2, [sp]
   13d34:	cmp	r1, r3
   13d38:	cmpeq	r0, r2
   13d3c:	beq	13cfc <__assert_fail@plt+0x2430>
   13d40:	bl	1171c <__errno_location@plt>
   13d44:	mov	r3, #2
   13d48:	str	r3, [r0]
   13d4c:	b	13cd4 <__assert_fail@plt+0x2408>
   13d50:	add	r7, r5, #60	; 0x3c
   13d54:	mov	r0, r7
   13d58:	bl	1669c <__assert_fail@plt+0x4dd0>
   13d5c:	subs	r8, r0, #0
   13d60:	bne	13c3c <__assert_fail@plt+0x2370>
   13d64:	mov	r0, r7
   13d68:	bl	166e8 <__assert_fail@plt+0x4e1c>
   13d6c:	ldr	r9, [r5, #48]	; 0x30
   13d70:	subs	r7, r0, #0
   13d74:	blt	13c38 <__assert_fail@plt+0x236c>
   13d78:	tst	r9, #2
   13d7c:	mov	r4, r7
   13d80:	mov	r8, #1
   13d84:	beq	13d14 <__assert_fail@plt+0x2448>
   13d88:	b	13cbc <__assert_fail@plt+0x23f0>
   13d8c:	eor	r2, r8, #1
   13d90:	mov	r1, r7
   13d94:	uxtb	r2, r2
   13d98:	mov	r0, r5
   13d9c:	bl	13894 <__assert_fail@plt+0x1fc8>
   13da0:	mov	r9, #0
   13da4:	b	13c80 <__assert_fail@plt+0x23b4>
   13da8:	mvn	r9, #0
   13dac:	b	13c80 <__assert_fail@plt+0x23b4>
   13db0:	tst	r9, #2
   13db4:	mov	r7, r4
   13db8:	mov	r8, #1
   13dbc:	beq	13ca8 <__assert_fail@plt+0x23dc>
   13dc0:	b	13cbc <__assert_fail@plt+0x23f0>
   13dc4:	andeq	fp, r1, ip, lsl #17
   13dc8:	ldr	r3, [pc, #164]	; 13e74 <__assert_fail@plt+0x25a8>
   13dcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13dd0:	and	r3, r3, r0
   13dd4:	cmp	r3, #0
   13dd8:	mov	sl, r1
   13ddc:	mov	r8, r2
   13de0:	beq	13e48 <__assert_fail@plt+0x257c>
   13de4:	mov	r0, #24
   13de8:	bl	1a0b4 <lchmod@@Base+0x3984>
   13dec:	subs	r9, r0, #0
   13df0:	beq	13e6c <__assert_fail@plt+0x25a0>
   13df4:	ldrd	r4, [r8, #160]	; 0xa0
   13df8:	ldrd	r6, [r8, #64]	; 0x40
   13dfc:	str	r8, [r9, #16]
   13e00:	strd	r4, [r9, #8]
   13e04:	ldr	r0, [sl]
   13e08:	strd	r6, [r9]
   13e0c:	mov	r1, r9
   13e10:	bl	1648c <__assert_fail@plt+0x4bc0>
   13e14:	cmp	r9, r0
   13e18:	mov	r4, r0
   13e1c:	beq	13e40 <__assert_fail@plt+0x2574>
   13e20:	mov	r0, r9
   13e24:	bl	1349c <__assert_fail@plt+0x1bd0>
   13e28:	cmp	r4, #0
   13e2c:	beq	13e6c <__assert_fail@plt+0x25a0>
   13e30:	ldr	r2, [r4, #16]
   13e34:	mov	r3, #2
   13e38:	str	r2, [r8]
   13e3c:	strh	r3, [r8, #56]	; 0x38
   13e40:	mov	r0, #1
   13e44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e48:	ldr	r0, [r1]
   13e4c:	add	r1, r2, #64	; 0x40
   13e50:	bl	1a288 <lchmod@@Base+0x3b58>
   13e54:	cmp	r0, #0
   13e58:	beq	13e40 <__assert_fail@plt+0x2574>
   13e5c:	mov	r3, #2
   13e60:	str	r8, [r8]
   13e64:	strh	r3, [r8, #56]	; 0x38
   13e68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e6c:	mov	r0, #0
   13e70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e74:	andeq	r0, r0, r2, lsl #2
   13e78:	ldr	r3, [pc, #172]	; 13f2c <__assert_fail@plt+0x2660>
   13e7c:	push	{r4, r5, lr}
   13e80:	and	r3, r3, r0
   13e84:	cmp	r3, #0
   13e88:	sub	sp, sp, #28
   13e8c:	bne	13ed4 <__assert_fail@plt+0x2608>
   13e90:	ldr	r3, [r2, #4]
   13e94:	cmp	r3, #0
   13e98:	beq	13ecc <__assert_fail@plt+0x2600>
   13e9c:	ldr	r0, [r3, #48]	; 0x30
   13ea0:	cmp	r0, #0
   13ea4:	blt	13ecc <__assert_fail@plt+0x2600>
   13ea8:	ldr	ip, [r1]
   13eac:	ldrd	r0, [ip, #16]
   13eb0:	orrs	r1, r0, r1
   13eb4:	beq	13f28 <__assert_fail@plt+0x265c>
   13eb8:	ldrd	r4, [ip]
   13ebc:	ldrd	r0, [r2, #160]	; 0xa0
   13ec0:	cmp	r5, r1
   13ec4:	cmpeq	r4, r0
   13ec8:	beq	13f04 <__assert_fail@plt+0x2638>
   13ecc:	add	sp, sp, #28
   13ed0:	pop	{r4, r5, pc}
   13ed4:	ldrd	r4, [r2, #64]	; 0x40
   13ed8:	ldrd	r2, [r2, #160]	; 0xa0
   13edc:	ldr	r0, [r1]
   13ee0:	mov	r1, sp
   13ee4:	strd	r4, [sp]
   13ee8:	strd	r2, [sp, #8]
   13eec:	bl	164c4 <__assert_fail@plt+0x4bf8>
   13ef0:	cmp	r0, #0
   13ef4:	beq	13f28 <__assert_fail@plt+0x265c>
   13ef8:	bl	1349c <__assert_fail@plt+0x1bd0>
   13efc:	add	sp, sp, #28
   13f00:	pop	{r4, r5, pc}
   13f04:	ldrd	r0, [ip, #8]
   13f08:	ldrd	r4, [r2, #64]	; 0x40
   13f0c:	cmp	r1, r5
   13f10:	cmpeq	r0, r4
   13f14:	ldrdeq	r0, [r3, #64]	; 0x40
   13f18:	ldrdeq	r2, [r3, #160]	; 0xa0
   13f1c:	strdeq	r0, [ip, #8]
   13f20:	strdeq	r2, [ip]
   13f24:	b	13ecc <__assert_fail@plt+0x2600>
   13f28:	bl	11878 <abort@plt>
   13f2c:	andeq	r0, r0, r2, lsl #2
   13f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f34:	sub	sp, sp, #68	; 0x44
   13f38:	ldr	sl, [r0]
   13f3c:	mov	r5, r0
   13f40:	str	r1, [sp, #40]	; 0x28
   13f44:	ldr	r3, [sl, #12]
   13f48:	cmp	r3, #0
   13f4c:	str	r3, [sp, #44]	; 0x2c
   13f50:	beq	14314 <__assert_fail@plt+0x2a48>
   13f54:	mov	r0, r3
   13f58:	bl	117e8 <dirfd@plt>
   13f5c:	cmp	r0, #0
   13f60:	str	r0, [sp, #60]	; 0x3c
   13f64:	blt	146f0 <__assert_fail@plt+0x2e24>
   13f68:	ldr	r3, [r5, #44]	; 0x2c
   13f6c:	cmp	r3, #0
   13f70:	beq	1488c <__assert_fail@plt+0x2fc0>
   13f74:	mvn	r3, #0
   13f78:	str	r3, [sp, #20]
   13f7c:	ldr	r0, [r5, #48]	; 0x30
   13f80:	mov	r3, #1
   13f84:	str	r3, [sp, #52]	; 0x34
   13f88:	ldr	r3, [sl, #40]	; 0x28
   13f8c:	ldr	r2, [sl, #28]
   13f90:	mov	r1, r3
   13f94:	sub	r3, r3, #1
   13f98:	str	sl, [sp, #12]
   13f9c:	ldrb	r2, [r2, r3]
   13fa0:	cmp	r2, #47	; 0x2f
   13fa4:	moveq	r1, r3
   13fa8:	ands	r0, r0, #4
   13fac:	mov	r2, r1
   13fb0:	ldrne	r3, [r5, #24]
   13fb4:	movne	r0, r2
   13fb8:	str	r1, [sp, #32]
   13fbc:	addne	r2, r3, r2
   13fc0:	movne	r1, #47	; 0x2f
   13fc4:	strbne	r1, [r3, r0]
   13fc8:	addne	r3, r2, #1
   13fcc:	ldr	r2, [sp, #32]
   13fd0:	strne	r3, [sp, #28]
   13fd4:	add	r2, r2, #1
   13fd8:	ldr	r3, [sl, #48]	; 0x30
   13fdc:	ldr	fp, [r5, #36]	; 0x24
   13fe0:	mov	r1, r2
   13fe4:	str	r2, [sp, #8]
   13fe8:	sub	r1, fp, r1
   13fec:	mov	r2, #0
   13ff0:	add	r3, r3, #1
   13ff4:	streq	r0, [sp, #28]
   13ff8:	str	r2, [sp, #48]	; 0x30
   13ffc:	str	r1, [sp, #16]
   14000:	str	r3, [sp, #24]
   14004:	str	r2, [sp, #36]	; 0x24
   14008:	mov	r7, r2
   1400c:	str	r2, [sp, #4]
   14010:	mov	r8, r2
   14014:	mov	sl, r2
   14018:	b	14098 <__assert_fail@plt+0x27cc>
   1401c:	tst	r3, #251	; 0xfb
   14020:	beq	1416c <__assert_fail@plt+0x28a0>
   14024:	lsr	r2, r2, #4
   14028:	cmp	r3, #10
   1402c:	orrne	r2, r2, #1
   14030:	tst	r2, #1
   14034:	beq	1443c <__assert_fail@plt+0x2b70>
   14038:	sub	r3, r3, #1
   1403c:	mov	r2, #11
   14040:	cmp	r3, #11
   14044:	strh	r2, [r4, #56]	; 0x38
   14048:	bhi	1487c <__assert_fail@plt+0x2fb0>
   1404c:	ldr	r2, [pc, #2128]	; 148a4 <__assert_fail@plt+0x2fd8>
   14050:	ldr	r1, [r2, r3, lsl #2]
   14054:	mov	r2, #1
   14058:	mov	r3, #0
   1405c:	str	r1, [r4, #80]	; 0x50
   14060:	strd	r2, [r4, #112]	; 0x70
   14064:	ldr	r3, [sp, #4]
   14068:	str	r8, [r4, #8]
   1406c:	cmp	r3, #0
   14070:	ldr	r3, [pc, #2096]	; 148a8 <__assert_fail@plt+0x2fdc>
   14074:	strne	r4, [sl, #8]
   14078:	streq	r4, [sp, #4]
   1407c:	cmp	r7, r3
   14080:	beq	14284 <__assert_fail@plt+0x29b8>
   14084:	ldr	r3, [sp, #20]
   14088:	add	r7, r7, #1
   1408c:	cmp	r7, r3
   14090:	bcs	146b8 <__assert_fail@plt+0x2dec>
   14094:	mov	sl, r4
   14098:	ldr	r3, [sp, #12]
   1409c:	ldr	r4, [r3, #12]
   140a0:	cmp	r4, #0
   140a4:	beq	1450c <__assert_fail@plt+0x2c40>
   140a8:	bl	1171c <__errno_location@plt>
   140ac:	mov	r9, r0
   140b0:	mov	r0, r4
   140b4:	str	r8, [r9]
   140b8:	bl	117c4 <readdir64@plt>
   140bc:	subs	fp, r0, #0
   140c0:	beq	145e4 <__assert_fail@plt+0x2d18>
   140c4:	ldr	r2, [r5, #48]	; 0x30
   140c8:	tst	r2, #32
   140cc:	bne	140dc <__assert_fail@plt+0x2810>
   140d0:	ldrb	r2, [fp, #19]
   140d4:	cmp	r2, #46	; 0x2e
   140d8:	beq	142ec <__assert_fail@plt+0x2a20>
   140dc:	add	r4, fp, #19
   140e0:	mov	r0, r4
   140e4:	bl	116e0 <strlen@plt>
   140e8:	mov	r1, r4
   140ec:	mov	r2, r0
   140f0:	mov	r6, r0
   140f4:	mov	r0, r5
   140f8:	bl	136a4 <__assert_fail@plt+0x1dd8>
   140fc:	subs	r4, r0, #0
   14100:	beq	144bc <__assert_fail@plt+0x2bf0>
   14104:	ldr	r3, [sp, #16]
   14108:	cmp	r3, r6
   1410c:	bls	141a4 <__assert_fail@plt+0x28d8>
   14110:	ldr	r3, [sp, #8]
   14114:	adds	r6, r3, r6
   14118:	bcs	14210 <__assert_fail@plt+0x2944>
   1411c:	ldrd	r0, [fp]
   14120:	ldr	r2, [r5, #48]	; 0x30
   14124:	ldr	ip, [r5]
   14128:	tst	r2, #4
   1412c:	ldr	r3, [sp, #24]
   14130:	strd	r0, [r4, #160]	; 0xa0
   14134:	addeq	r1, r4, #168	; 0xa8
   14138:	str	r3, [r4, #48]	; 0x30
   1413c:	str	ip, [r4, #4]
   14140:	str	r6, [r4, #40]	; 0x28
   14144:	streq	r1, [r4, #24]
   14148:	bne	14260 <__assert_fail@plt+0x2994>
   1414c:	ldr	r1, [r5, #44]	; 0x2c
   14150:	cmp	r1, #0
   14154:	beq	14160 <__assert_fail@plt+0x2894>
   14158:	tst	r2, #1024	; 0x400
   1415c:	beq	142d0 <__assert_fail@plt+0x2a04>
   14160:	tst	r2, #8
   14164:	ldrb	r3, [fp, #18]
   14168:	bne	1401c <__assert_fail@plt+0x2750>
   1416c:	sub	r3, r3, #1
   14170:	cmp	r3, #11
   14174:	mov	r2, #11
   14178:	strh	r2, [r4, #56]	; 0x38
   1417c:	strhi	r8, [r4, #80]	; 0x50
   14180:	movhi	r2, #2
   14184:	movhi	r3, #0
   14188:	bhi	14060 <__assert_fail@plt+0x2794>
   1418c:	ldr	r2, [pc, #1808]	; 148a4 <__assert_fail@plt+0x2fd8>
   14190:	ldr	r1, [r2, r3, lsl #2]
   14194:	mov	r2, #2
   14198:	mov	r3, #0
   1419c:	str	r1, [r4, #80]	; 0x50
   141a0:	b	14060 <__assert_fail@plt+0x2794>
   141a4:	ldr	r3, [sp, #32]
   141a8:	add	r1, r5, #36	; 0x24
   141ac:	add	r2, r3, #2
   141b0:	ldr	r3, [r5, #24]
   141b4:	add	r2, r2, r6
   141b8:	add	r0, r5, #24
   141bc:	str	r3, [sp, #16]
   141c0:	bl	13ab0 <__assert_fail@plt+0x21e4>
   141c4:	cmp	r0, #0
   141c8:	beq	144bc <__assert_fail@plt+0x2bf0>
   141cc:	ldr	r2, [r5, #24]
   141d0:	ldr	r3, [sp, #16]
   141d4:	cmp	r3, r2
   141d8:	beq	1430c <__assert_fail@plt+0x2a40>
   141dc:	ldr	r1, [r5, #48]	; 0x30
   141e0:	tst	r1, #4
   141e4:	ldrne	r3, [sp, #8]
   141e8:	addne	r3, r2, r3
   141ec:	strne	r3, [sp, #28]
   141f0:	ldr	r3, [r5, #36]	; 0x24
   141f4:	ldr	r2, [sp, #8]
   141f8:	str	r0, [sp, #36]	; 0x24
   141fc:	sub	r3, r3, r2
   14200:	str	r3, [sp, #16]
   14204:	ldr	r3, [sp, #8]
   14208:	adds	r6, r3, r6
   1420c:	bcc	1411c <__assert_fail@plt+0x2850>
   14210:	ldr	sl, [sp, #12]
   14214:	mov	r0, r4
   14218:	bl	1349c <__assert_fail@plt+0x1bd0>
   1421c:	ldr	r0, [sp, #4]
   14220:	bl	13718 <__assert_fail@plt+0x1e4c>
   14224:	ldr	r0, [sl, #12]
   14228:	bl	118b4 <closedir@plt>
   1422c:	ldr	r3, [r5, #48]	; 0x30
   14230:	mov	r2, #0
   14234:	orr	r3, r3, #8192	; 0x2000
   14238:	mov	r0, #7
   1423c:	mov	r1, #36	; 0x24
   14240:	str	r2, [sp, #4]
   14244:	strh	r0, [sl, #56]	; 0x38
   14248:	str	r2, [sl, #12]
   1424c:	ldr	r0, [sp, #4]
   14250:	str	r3, [r5, #48]	; 0x30
   14254:	str	r1, [r9]
   14258:	add	sp, sp, #68	; 0x44
   1425c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14260:	ldr	r1, [r4, #28]
   14264:	ldr	r2, [r4, #52]	; 0x34
   14268:	str	r1, [r4, #24]
   1426c:	add	r2, r2, #1
   14270:	add	r1, r4, #168	; 0xa8
   14274:	ldr	r0, [sp, #28]
   14278:	bl	11500 <memmove@plt>
   1427c:	ldr	r2, [r5, #48]	; 0x30
   14280:	b	1414c <__assert_fail@plt+0x2880>
   14284:	ldr	r3, [r5, #44]	; 0x2c
   14288:	cmp	r3, #0
   1428c:	bne	14084 <__assert_fail@plt+0x27b8>
   14290:	ldr	r1, [sp, #60]	; 0x3c
   14294:	ldr	r0, [sp, #12]
   14298:	bl	13784 <__assert_fail@plt+0x1eb8>
   1429c:	ldr	r3, [pc, #1544]	; 148ac <__assert_fail@plt+0x2fe0>
   142a0:	cmp	r0, r3
   142a4:	beq	142c8 <__assert_fail@plt+0x29fc>
   142a8:	ldr	r3, [pc, #1536]	; 148b0 <__assert_fail@plt+0x2fe4>
   142ac:	cmp	r0, r3
   142b0:	beq	142c8 <__assert_fail@plt+0x29fc>
   142b4:	ldr	r3, [pc, #1528]	; 148b4 <__assert_fail@plt+0x2fe8>
   142b8:	cmp	r0, r3
   142bc:	movne	r3, #1
   142c0:	strne	r3, [sp, #48]	; 0x30
   142c4:	bne	14084 <__assert_fail@plt+0x27b8>
   142c8:	str	r8, [sp, #48]	; 0x30
   142cc:	b	14084 <__assert_fail@plt+0x27b8>
   142d0:	mov	r1, r2
   142d4:	mov	r3, r8
   142d8:	mov	r2, r4
   142dc:	ldr	r0, [r5, #32]
   142e0:	bl	13964 <__assert_fail@plt+0x2098>
   142e4:	strh	r0, [r4, #56]	; 0x38
   142e8:	b	14064 <__assert_fail@plt+0x2798>
   142ec:	ldrb	r2, [fp, #20]
   142f0:	cmp	r2, #0
   142f4:	beq	14304 <__assert_fail@plt+0x2a38>
   142f8:	ldrh	r2, [fp, #20]
   142fc:	cmp	r2, #46	; 0x2e
   14300:	bne	140dc <__assert_fail@plt+0x2810>
   14304:	mov	r4, sl
   14308:	b	14094 <__assert_fail@plt+0x27c8>
   1430c:	ldr	r0, [sp, #36]	; 0x24
   14310:	b	141f0 <__assert_fail@plt+0x2924>
   14314:	ldr	r3, [r0, #48]	; 0x30
   14318:	ldr	r1, [sl, #24]
   1431c:	and	r2, r3, #516	; 0x204
   14320:	cmp	r2, #512	; 0x200
   14324:	mvnne	r0, #99	; 0x63
   14328:	ldreq	r0, [r0, #32]
   1432c:	ands	r2, r3, #16
   14330:	bne	1444c <__assert_fail@plt+0x2b80>
   14334:	add	r3, sp, #60	; 0x3c
   14338:	bl	16d94 <lchmod@@Base+0x664>
   1433c:	cmp	r0, #0
   14340:	mov	r4, r0
   14344:	str	r0, [sl, #12]
   14348:	beq	147a4 <__assert_fail@plt+0x2ed8>
   1434c:	ldrh	r3, [sl, #56]	; 0x38
   14350:	cmp	r3, #11
   14354:	beq	147cc <__assert_fail@plt+0x2f00>
   14358:	ldr	r0, [r5, #48]	; 0x30
   1435c:	tst	r0, #256	; 0x100
   14360:	bne	1446c <__assert_fail@plt+0x2ba0>
   14364:	ldr	r2, [r5, #44]	; 0x2c
   14368:	ldr	r3, [pc, #1352]	; 148b8 <__assert_fail@plt+0x2fec>
   1436c:	cmp	r2, #0
   14370:	mvnne	r3, #0
   14374:	str	r3, [sp, #20]
   14378:	ldr	r3, [sp, #40]	; 0x28
   1437c:	cmp	r3, #2
   14380:	beq	14760 <__assert_fail@plt+0x2e94>
   14384:	ldr	r3, [r5, #48]	; 0x30
   14388:	and	r3, r3, #56	; 0x38
   1438c:	cmp	r3, #24
   14390:	beq	147e8 <__assert_fail@plt+0x2f1c>
   14394:	ldr	r3, [sp, #40]	; 0x28
   14398:	mov	r4, #1
   1439c:	sub	r6, r3, #3
   143a0:	clz	r6, r6
   143a4:	lsr	r6, r6, #5
   143a8:	ldr	r3, [r5, #48]	; 0x30
   143ac:	tst	r3, #512	; 0x200
   143b0:	bne	14788 <__assert_fail@plt+0x2ebc>
   143b4:	ldr	r2, [sp, #60]	; 0x3c
   143b8:	cmp	r2, #0
   143bc:	blt	143d8 <__assert_fail@plt+0x2b0c>
   143c0:	mov	r3, #0
   143c4:	mov	r1, sl
   143c8:	mov	r0, r5
   143cc:	bl	13bec <__assert_fail@plt+0x2320>
   143d0:	cmp	r0, #0
   143d4:	beq	13f7c <__assert_fail@plt+0x26b0>
   143d8:	tst	r4, r6
   143dc:	beq	143ec <__assert_fail@plt+0x2b20>
   143e0:	bl	1171c <__errno_location@plt>
   143e4:	ldr	r3, [r0]
   143e8:	str	r3, [sl, #32]
   143ec:	ldrh	r3, [sl, #58]	; 0x3a
   143f0:	ldr	r0, [sl, #12]
   143f4:	orr	r3, r3, #1
   143f8:	strh	r3, [sl, #58]	; 0x3a
   143fc:	bl	118b4 <closedir@plt>
   14400:	ldr	r0, [r5, #48]	; 0x30
   14404:	mov	r3, #0
   14408:	tst	r0, #512	; 0x200
   1440c:	str	r3, [sl, #12]
   14410:	beq	1442c <__assert_fail@plt+0x2b60>
   14414:	ldr	r3, [sp, #60]	; 0x3c
   14418:	cmp	r3, #0
   1441c:	blt	1442c <__assert_fail@plt+0x2b60>
   14420:	mov	r0, r3
   14424:	bl	11884 <close@plt>
   14428:	ldr	r0, [r5, #48]	; 0x30
   1442c:	mov	r3, #0
   14430:	str	r3, [sl, #12]
   14434:	str	r3, [sp, #52]	; 0x34
   14438:	b	13f88 <__assert_fail@plt+0x26bc>
   1443c:	mov	r3, #11
   14440:	strh	r3, [r4, #56]	; 0x38
   14444:	mov	r3, #9
   14448:	b	1418c <__assert_fail@plt+0x28c0>
   1444c:	tst	r3, #1
   14450:	moveq	r2, #32768	; 0x8000
   14454:	beq	14334 <__assert_fail@plt+0x2a68>
   14458:	ldr	r2, [sl, #48]	; 0x30
   1445c:	cmp	r2, #0
   14460:	movne	r2, #32768	; 0x8000
   14464:	moveq	r2, #0
   14468:	b	14334 <__assert_fail@plt+0x2a68>
   1446c:	add	r4, r5, #56	; 0x38
   14470:	mov	r1, r4
   14474:	mov	r2, sl
   14478:	bl	13e78 <__assert_fail@plt+0x25ac>
   1447c:	mov	r3, #0
   14480:	mov	r2, sl
   14484:	ldr	r1, [r5, #48]	; 0x30
   14488:	ldr	r0, [r5, #32]
   1448c:	bl	13964 <__assert_fail@plt+0x2098>
   14490:	mov	r1, r4
   14494:	mov	r2, sl
   14498:	ldr	r0, [r5, #48]	; 0x30
   1449c:	bl	13dc8 <__assert_fail@plt+0x24fc>
   144a0:	subs	r4, r0, #0
   144a4:	bne	14364 <__assert_fail@plt+0x2a98>
   144a8:	bl	1171c <__errno_location@plt>
   144ac:	mov	r3, #12
   144b0:	str	r4, [sp, #4]
   144b4:	str	r3, [r0]
   144b8:	b	14500 <__assert_fail@plt+0x2c34>
   144bc:	ldr	sl, [sp, #12]
   144c0:	mov	r0, r4
   144c4:	ldr	r4, [r9]
   144c8:	bl	1349c <__assert_fail@plt+0x1bd0>
   144cc:	ldr	r0, [sp, #4]
   144d0:	bl	13718 <__assert_fail@plt+0x1e4c>
   144d4:	ldr	r0, [sl, #12]
   144d8:	bl	118b4 <closedir@plt>
   144dc:	ldr	r3, [r5, #48]	; 0x30
   144e0:	mov	r2, #0
   144e4:	orr	r3, r3, #8192	; 0x2000
   144e8:	mov	r1, #7
   144ec:	str	r2, [sl, #12]
   144f0:	strh	r1, [sl, #56]	; 0x38
   144f4:	str	r2, [sp, #4]
   144f8:	str	r3, [r5, #48]	; 0x30
   144fc:	str	r4, [r9]
   14500:	ldr	r0, [sp, #4]
   14504:	add	sp, sp, #68	; 0x44
   14508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1450c:	mov	sl, r3
   14510:	ldr	r3, [sp, #36]	; 0x24
   14514:	cmp	r3, #0
   14518:	bne	14634 <__assert_fail@plt+0x2d68>
   1451c:	ldr	r3, [r5, #48]	; 0x30
   14520:	tst	r3, #4
   14524:	beq	14550 <__assert_fail@plt+0x2c84>
   14528:	ldr	r3, [r5, #36]	; 0x24
   1452c:	ldr	r2, [sp, #8]
   14530:	cmp	r7, #0
   14534:	cmpne	r3, r2
   14538:	ldreq	r3, [sp, #28]
   1453c:	subeq	r3, r3, #1
   14540:	streq	r3, [sp, #28]
   14544:	ldr	r2, [sp, #28]
   14548:	mov	r3, #0
   1454c:	strb	r3, [r2]
   14550:	ldr	r3, [sp, #52]	; 0x34
   14554:	ldr	r2, [sp, #44]	; 0x2c
   14558:	cmp	r2, #0
   1455c:	movne	r3, #0
   14560:	andeq	r3, r3, #1
   14564:	cmp	r3, #0
   14568:	beq	145a0 <__assert_fail@plt+0x2cd4>
   1456c:	ldr	r3, [sp, #40]	; 0x28
   14570:	cmp	r7, #0
   14574:	cmpne	r3, #1
   14578:	bne	145a8 <__assert_fail@plt+0x2cdc>
   1457c:	ldr	r3, [sl, #48]	; 0x30
   14580:	cmp	r3, #0
   14584:	bne	14720 <__assert_fail@plt+0x2e54>
   14588:	mov	r0, r5
   1458c:	bl	13914 <__assert_fail@plt+0x2048>
   14590:	adds	r0, r0, #0
   14594:	movne	r0, #1
   14598:	cmp	r0, #0
   1459c:	bne	14840 <__assert_fail@plt+0x2f74>
   145a0:	cmp	r7, #0
   145a4:	beq	14740 <__assert_fail@plt+0x2e74>
   145a8:	ldr	r3, [sp, #48]	; 0x30
   145ac:	cmp	r3, #0
   145b0:	bne	146c0 <__assert_fail@plt+0x2df4>
   145b4:	ldr	r3, [r5, #44]	; 0x2c
   145b8:	cmp	r3, #0
   145bc:	cmpne	r7, #1
   145c0:	bls	14500 <__assert_fail@plt+0x2c34>
   145c4:	mov	r2, r7
   145c8:	ldr	r1, [sp, #4]
   145cc:	mov	r0, r5
   145d0:	bl	135c4 <__assert_fail@plt+0x1cf8>
   145d4:	str	r0, [sp, #4]
   145d8:	ldr	r0, [sp, #4]
   145dc:	add	sp, sp, #68	; 0x44
   145e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145e4:	ldr	r3, [r9]
   145e8:	ldr	sl, [sp, #12]
   145ec:	cmp	r3, #0
   145f0:	beq	14610 <__assert_fail@plt+0x2d44>
   145f4:	ldr	r2, [sp, #44]	; 0x2c
   145f8:	str	r3, [sl, #32]
   145fc:	cmp	r7, #0
   14600:	cmpeq	r2, #0
   14604:	moveq	r2, #4
   14608:	movne	r2, #7
   1460c:	strh	r2, [sl, #56]	; 0x38
   14610:	ldr	r0, [sl, #12]
   14614:	cmp	r0, #0
   14618:	beq	14510 <__assert_fail@plt+0x2c44>
   1461c:	bl	118b4 <closedir@plt>
   14620:	mov	r3, #0
   14624:	str	r3, [sl, #12]
   14628:	ldr	r3, [sp, #36]	; 0x24
   1462c:	cmp	r3, #0
   14630:	beq	1451c <__assert_fail@plt+0x2c50>
   14634:	ldr	r1, [r5, #4]
   14638:	ldr	r0, [r5, #24]
   1463c:	cmp	r1, #0
   14640:	beq	14670 <__assert_fail@plt+0x2da4>
   14644:	ldr	r3, [r1, #24]
   14648:	add	r2, r1, #168	; 0xa8
   1464c:	cmp	r3, r2
   14650:	ldrne	r2, [r1, #28]
   14654:	str	r0, [r1, #28]
   14658:	subne	r3, r3, r2
   1465c:	addne	r3, r0, r3
   14660:	strne	r3, [r1, #24]
   14664:	ldr	r1, [r1, #8]
   14668:	cmp	r1, #0
   1466c:	bne	14644 <__assert_fail@plt+0x2d78>
   14670:	ldr	r3, [sp, #4]
   14674:	b	146a4 <__assert_fail@plt+0x2dd8>
   14678:	ldr	r2, [r3, #24]
   1467c:	cmp	r2, r1
   14680:	ldrne	r1, [r3, #28]
   14684:	str	r0, [r3, #28]
   14688:	subne	r2, r2, r1
   1468c:	addne	r2, r0, r2
   14690:	strne	r2, [r3, #24]
   14694:	ldr	r2, [r3, #8]
   14698:	cmp	r2, #0
   1469c:	ldreq	r2, [r3, #4]
   146a0:	mov	r3, r2
   146a4:	ldr	r2, [r3, #48]	; 0x30
   146a8:	add	r1, r3, #168	; 0xa8
   146ac:	cmp	r2, #0
   146b0:	bge	14678 <__assert_fail@plt+0x2dac>
   146b4:	b	1451c <__assert_fail@plt+0x2c50>
   146b8:	ldr	sl, [sp, #12]
   146bc:	b	14510 <__assert_fail@plt+0x2c44>
   146c0:	ldr	r3, [pc, #500]	; 148bc <__assert_fail@plt+0x2ff0>
   146c4:	mov	r2, r7
   146c8:	str	r3, [r5, #44]	; 0x2c
   146cc:	ldr	r1, [sp, #4]
   146d0:	mov	r0, r5
   146d4:	bl	135c4 <__assert_fail@plt+0x1cf8>
   146d8:	mov	r3, #0
   146dc:	str	r3, [r5, #44]	; 0x2c
   146e0:	str	r0, [sp, #4]
   146e4:	ldr	r0, [sp, #4]
   146e8:	add	sp, sp, #68	; 0x44
   146ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146f0:	ldr	r0, [sl, #12]
   146f4:	bl	118b4 <closedir@plt>
   146f8:	ldr	r3, [sp, #40]	; 0x28
   146fc:	mov	r4, #0
   14700:	cmp	r3, #3
   14704:	str	r4, [sl, #12]
   14708:	beq	147b0 <__assert_fail@plt+0x2ee4>
   1470c:	mov	r3, #0
   14710:	str	r3, [sp, #4]
   14714:	ldr	r0, [sp, #4]
   14718:	add	sp, sp, #68	; 0x44
   1471c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14720:	ldr	r3, [pc, #408]	; 148c0 <__assert_fail@plt+0x2ff4>
   14724:	mvn	r2, #0
   14728:	ldr	r1, [sl, #4]
   1472c:	mov	r0, r5
   14730:	bl	13bec <__assert_fail@plt+0x2320>
   14734:	adds	r0, r0, #0
   14738:	movne	r0, #1
   1473c:	b	14598 <__assert_fail@plt+0x2ccc>
   14740:	ldr	r3, [sp, #40]	; 0x28
   14744:	cmp	r3, #3
   14748:	beq	14770 <__assert_fail@plt+0x2ea4>
   1474c:	ldr	r0, [sp, #4]
   14750:	bl	13718 <__assert_fail@plt+0x1e4c>
   14754:	mov	r3, #0
   14758:	str	r3, [sp, #4]
   1475c:	b	14500 <__assert_fail@plt+0x2c34>
   14760:	mov	r3, #0
   14764:	str	r3, [sp, #52]	; 0x34
   14768:	ldr	r0, [r5, #48]	; 0x30
   1476c:	b	13f88 <__assert_fail@plt+0x26bc>
   14770:	ldrh	r3, [sl, #56]	; 0x38
   14774:	cmp	r3, #4
   14778:	cmpne	r3, #7
   1477c:	movne	r3, #6
   14780:	strhne	r3, [sl, #56]	; 0x38
   14784:	b	1474c <__assert_fail@plt+0x2e80>
   14788:	mov	r2, #3
   1478c:	ldr	r1, [pc, #304]	; 148c4 <__assert_fail@plt+0x2ff8>
   14790:	ldr	r0, [sp, #60]	; 0x3c
   14794:	bl	1a3f4 <lchmod@@Base+0x3cc4>
   14798:	mov	r2, r0
   1479c:	str	r0, [sp, #60]	; 0x3c
   147a0:	b	143b8 <__assert_fail@plt+0x2aec>
   147a4:	ldr	r3, [sp, #40]	; 0x28
   147a8:	cmp	r3, #3
   147ac:	bne	1470c <__assert_fail@plt+0x2e40>
   147b0:	mov	r3, #4
   147b4:	strh	r3, [sl, #56]	; 0x38
   147b8:	bl	1171c <__errno_location@plt>
   147bc:	str	r4, [sp, #4]
   147c0:	ldr	r3, [r0]
   147c4:	str	r3, [sl, #32]
   147c8:	b	14500 <__assert_fail@plt+0x2c34>
   147cc:	mov	r3, #0
   147d0:	mov	r2, sl
   147d4:	ldr	r1, [r5, #48]	; 0x30
   147d8:	ldr	r0, [r5, #32]
   147dc:	bl	13964 <__assert_fail@plt+0x2098>
   147e0:	strh	r0, [sl, #56]	; 0x38
   147e4:	b	14364 <__assert_fail@plt+0x2a98>
   147e8:	ldr	r3, [sl, #84]	; 0x54
   147ec:	cmp	r3, #2
   147f0:	bne	14394 <__assert_fail@plt+0x2ac8>
   147f4:	ldr	r1, [sp, #60]	; 0x3c
   147f8:	mov	r0, sl
   147fc:	bl	13784 <__assert_fail@plt+0x1eb8>
   14800:	ldr	r3, [pc, #164]	; 148ac <__assert_fail@plt+0x2fe0>
   14804:	cmp	r0, r3
   14808:	beq	14394 <__assert_fail@plt+0x2ac8>
   1480c:	bgt	14860 <__assert_fail@plt+0x2f94>
   14810:	ldr	r3, [pc, #156]	; 148b4 <__assert_fail@plt+0x2fe8>
   14814:	cmp	r0, r3
   14818:	beq	14394 <__assert_fail@plt+0x2ac8>
   1481c:	cmp	r0, #0
   14820:	beq	14394 <__assert_fail@plt+0x2ac8>
   14824:	ldr	r3, [sp, #40]	; 0x28
   14828:	cmp	r3, #3
   1482c:	moveq	r6, #1
   14830:	movne	r6, #0
   14834:	bne	14760 <__assert_fail@plt+0x2e94>
   14838:	mov	r4, #0
   1483c:	b	143a8 <__assert_fail@plt+0x2adc>
   14840:	ldr	r3, [r5, #48]	; 0x30
   14844:	mov	r2, #7
   14848:	orr	r3, r3, #8192	; 0x2000
   1484c:	strh	r2, [sl, #56]	; 0x38
   14850:	ldr	r0, [sp, #4]
   14854:	str	r3, [r5, #48]	; 0x30
   14858:	bl	13718 <__assert_fail@plt+0x1e4c>
   1485c:	b	1470c <__assert_fail@plt+0x2e40>
   14860:	ldr	r3, [pc, #96]	; 148c8 <__assert_fail@plt+0x2ffc>
   14864:	cmp	r0, r3
   14868:	beq	14394 <__assert_fail@plt+0x2ac8>
   1486c:	ldr	r3, [pc, #88]	; 148cc <__assert_fail@plt+0x3000>
   14870:	cmp	r0, r3
   14874:	bne	14824 <__assert_fail@plt+0x2f58>
   14878:	b	14394 <__assert_fail@plt+0x2ac8>
   1487c:	str	r8, [r4, #80]	; 0x50
   14880:	mov	r2, #1
   14884:	mov	r3, #0
   14888:	b	14060 <__assert_fail@plt+0x2794>
   1488c:	ldr	r3, [pc, #36]	; 148b8 <__assert_fail@plt+0x2fec>
   14890:	ldr	r0, [r5, #48]	; 0x30
   14894:	str	r3, [sp, #20]
   14898:	mov	r3, #1
   1489c:	str	r3, [sp, #52]	; 0x34
   148a0:	b	13f88 <__assert_fail@plt+0x26bc>
   148a4:	andeq	fp, r1, ip, asr r8
   148a8:	andeq	r2, r0, r0, lsl r7
   148ac:	andeq	r6, r0, r9, ror #18
   148b0:			; <UNDEFINED> instruction: 0x01021994
   148b4:			; <UNDEFINED> instruction: 0xff534d42
   148b8:	andeq	r8, r1, r0, lsr #13
   148bc:	muleq	r1, r4, r5
   148c0:	andeq	fp, r1, ip, lsl #17
   148c4:	andeq	r0, r0, r6, lsl #8
   148c8:	andeq	r9, r0, r0, lsr #31
   148cc:	movtpl	r4, #24911	; 0x614f
   148d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148d4:	bic	r5, r1, #4080	; 0xff0
   148d8:	bic	r5, r5, #15
   148dc:	cmp	r5, #0
   148e0:	sub	sp, sp, #20
   148e4:	bne	14c1c <__assert_fail@plt+0x3350>
   148e8:	and	r3, r1, #516	; 0x204
   148ec:	cmp	r3, #516	; 0x204
   148f0:	mov	r6, r1
   148f4:	beq	14bbc <__assert_fail@plt+0x32f0>
   148f8:	ands	r5, r1, #18
   148fc:	beq	14bbc <__assert_fail@plt+0x32f0>
   14900:	mov	r7, r0
   14904:	mov	r1, #96	; 0x60
   14908:	mov	r0, #1
   1490c:	mov	r9, r2
   14910:	bl	1a06c <lchmod@@Base+0x393c>
   14914:	subs	r5, r0, #0
   14918:	beq	14b64 <__assert_fail@plt+0x3298>
   1491c:	tst	r6, #2
   14920:	bicne	r3, r6, #512	; 0x200
   14924:	orrne	r3, r3, #4
   14928:	strne	r3, [r5, #48]	; 0x30
   1492c:	ldr	r3, [r7]
   14930:	streq	r6, [r5, #48]	; 0x30
   14934:	mvn	r2, #99	; 0x63
   14938:	cmp	r3, #0
   1493c:	str	r9, [r5, #44]	; 0x2c
   14940:	str	r2, [r5, #32]
   14944:	beq	14c50 <__assert_fail@plt+0x3384>
   14948:	mov	r8, r7
   1494c:	mov	r4, #0
   14950:	mov	r0, r3
   14954:	bl	116e0 <strlen@plt>
   14958:	ldr	r3, [r8, #4]!
   1495c:	cmp	r4, r0
   14960:	movcc	r4, r0
   14964:	cmp	r3, #0
   14968:	bne	14950 <__assert_fail@plt+0x3084>
   1496c:	add	r2, r4, #1
   14970:	cmp	r2, #4096	; 0x1000
   14974:	movcc	r2, #4096	; 0x1000
   14978:	add	r1, r5, #36	; 0x24
   1497c:	add	r0, r5, #24
   14980:	bl	13ab0 <__assert_fail@plt+0x21e4>
   14984:	subs	r3, r0, #0
   14988:	str	r3, [sp, #4]
   1498c:	beq	14ba4 <__assert_fail@plt+0x32d8>
   14990:	ldr	r4, [r7]
   14994:	cmp	r4, #0
   14998:	beq	14bd4 <__assert_fail@plt+0x3308>
   1499c:	mov	r2, #0
   149a0:	ldr	r1, [pc, #696]	; 14c60 <__assert_fail@plt+0x3394>
   149a4:	mov	r0, r5
   149a8:	bl	136a4 <__assert_fail@plt+0x1dd8>
   149ac:	subs	fp, r0, #0
   149b0:	beq	14b9c <__assert_fail@plt+0x32d0>
   149b4:	mvn	r3, #0
   149b8:	cmp	r9, #0
   149bc:	str	r3, [fp, #48]	; 0x30
   149c0:	ldr	r4, [r7]
   149c4:	beq	149d8 <__assert_fail@plt+0x310c>
   149c8:	ldr	r3, [r5, #48]	; 0x30
   149cc:	lsr	r3, r3, #10
   149d0:	and	r3, r3, #1
   149d4:	str	r3, [sp, #4]
   149d8:	cmp	r4, #0
   149dc:	beq	14c58 <__assert_fail@plt+0x338c>
   149e0:	lsr	r6, r6, #11
   149e4:	mov	r3, #0
   149e8:	eor	r6, r6, #1
   149ec:	mov	sl, r3
   149f0:	str	r3, [sp, #12]
   149f4:	and	r3, r6, #1
   149f8:	str	r3, [sp, #8]
   149fc:	mov	r8, sl
   14a00:	mov	r6, sl
   14a04:	b	14a3c <__assert_fail@plt+0x3170>
   14a08:	mov	r3, #11
   14a0c:	strh	r3, [r4, #56]	; 0x38
   14a10:	mov	r2, #2
   14a14:	mov	r3, #0
   14a18:	cmp	r9, #0
   14a1c:	strd	r2, [r4, #112]	; 0x70
   14a20:	beq	14ad0 <__assert_fail@plt+0x3204>
   14a24:	str	r6, [r4, #8]
   14a28:	mov	r6, r4
   14a2c:	ldr	r4, [r7, #4]!
   14a30:	add	r8, r8, #1
   14a34:	cmp	r4, #0
   14a38:	beq	14afc <__assert_fail@plt+0x3230>
   14a3c:	mov	r0, r4
   14a40:	bl	116e0 <strlen@plt>
   14a44:	ldr	r3, [sp, #8]
   14a48:	cmp	r0, #2
   14a4c:	movls	r3, #0
   14a50:	andhi	r3, r3, #1
   14a54:	cmp	r3, #0
   14a58:	mov	r2, r0
   14a5c:	beq	14a74 <__assert_fail@plt+0x31a8>
   14a60:	sub	r1, r0, #1
   14a64:	add	r3, r4, r1
   14a68:	ldrb	r1, [r4, r1]
   14a6c:	cmp	r1, #47	; 0x2f
   14a70:	beq	14b70 <__assert_fail@plt+0x32a4>
   14a74:	mov	r1, r4
   14a78:	mov	r0, r5
   14a7c:	bl	136a4 <__assert_fail@plt+0x1dd8>
   14a80:	subs	r4, r0, #0
   14a84:	beq	14b8c <__assert_fail@plt+0x32c0>
   14a88:	ldr	r3, [sp, #4]
   14a8c:	str	sl, [r4, #48]	; 0x30
   14a90:	cmp	r6, #0
   14a94:	moveq	r3, #0
   14a98:	andne	r3, r3, #1
   14a9c:	cmp	r3, #0
   14aa0:	add	r3, r4, #168	; 0xa8
   14aa4:	str	fp, [r4, #4]
   14aa8:	str	r3, [r4, #24]
   14aac:	bne	14a08 <__assert_fail@plt+0x313c>
   14ab0:	mov	r3, sl
   14ab4:	mov	r2, r4
   14ab8:	ldr	r1, [r5, #48]	; 0x30
   14abc:	ldr	r0, [r5, #32]
   14ac0:	bl	13964 <__assert_fail@plt+0x2098>
   14ac4:	cmp	r9, #0
   14ac8:	strh	r0, [r4, #56]	; 0x38
   14acc:	bne	14a24 <__assert_fail@plt+0x3158>
   14ad0:	cmp	r6, #0
   14ad4:	str	r9, [r4, #8]
   14ad8:	ldrne	r3, [sp, #12]
   14adc:	streq	r4, [sp, #12]
   14ae0:	strne	r4, [sp, #12]
   14ae4:	strne	r4, [r3, #8]
   14ae8:	moveq	r6, r4
   14aec:	ldr	r4, [r7, #4]!
   14af0:	add	r8, r8, #1
   14af4:	cmp	r4, #0
   14af8:	bne	14a3c <__assert_fail@plt+0x3170>
   14afc:	cmp	r9, #0
   14b00:	cmpne	r8, #1
   14b04:	bhi	14c38 <__assert_fail@plt+0x336c>
   14b08:	mov	r2, #0
   14b0c:	ldr	r1, [pc, #332]	; 14c60 <__assert_fail@plt+0x3394>
   14b10:	mov	r0, r5
   14b14:	bl	136a4 <__assert_fail@plt+0x1dd8>
   14b18:	cmp	r0, #0
   14b1c:	str	r0, [r5]
   14b20:	beq	14b8c <__assert_fail@plt+0x32c0>
   14b24:	mov	r2, #1
   14b28:	mov	r3, #9
   14b2c:	str	r6, [r0, #8]
   14b30:	str	r2, [r0, #48]	; 0x30
   14b34:	strh	r3, [r0, #56]	; 0x38
   14b38:	add	r1, r5, #56	; 0x38
   14b3c:	ldr	r0, [r5, #48]	; 0x30
   14b40:	bl	13b30 <__assert_fail@plt+0x2264>
   14b44:	cmp	r0, #0
   14b48:	beq	14b8c <__assert_fail@plt+0x32c0>
   14b4c:	ldr	r1, [r5, #48]	; 0x30
   14b50:	tst	r1, #516	; 0x204
   14b54:	beq	14bec <__assert_fail@plt+0x3320>
   14b58:	mvn	r1, #0
   14b5c:	add	r0, r5, #60	; 0x3c
   14b60:	bl	16670 <__assert_fail@plt+0x4da4>
   14b64:	mov	r0, r5
   14b68:	add	sp, sp, #20
   14b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b70:	ldrb	r1, [r3, #-1]!
   14b74:	cmp	r1, #47	; 0x2f
   14b78:	bne	14a74 <__assert_fail@plt+0x31a8>
   14b7c:	sub	r2, r2, #1
   14b80:	cmp	r2, #1
   14b84:	bne	14b70 <__assert_fail@plt+0x32a4>
   14b88:	b	14a74 <__assert_fail@plt+0x31a8>
   14b8c:	mov	r0, r6
   14b90:	bl	13718 <__assert_fail@plt+0x1e4c>
   14b94:	mov	r0, fp
   14b98:	bl	1349c <__assert_fail@plt+0x1bd0>
   14b9c:	ldr	r0, [r5, #24]
   14ba0:	bl	1349c <__assert_fail@plt+0x1bd0>
   14ba4:	mov	r0, r5
   14ba8:	bl	1349c <__assert_fail@plt+0x1bd0>
   14bac:	mov	r5, #0
   14bb0:	mov	r0, r5
   14bb4:	add	sp, sp, #20
   14bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bbc:	bl	1171c <__errno_location@plt>
   14bc0:	mov	r3, #22
   14bc4:	str	r3, [r0]
   14bc8:	mov	r0, r5
   14bcc:	add	sp, sp, #20
   14bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bd4:	cmp	r9, #0
   14bd8:	movne	fp, r4
   14bdc:	bne	149c8 <__assert_fail@plt+0x30fc>
   14be0:	mov	fp, r9
   14be4:	mov	r6, r9
   14be8:	b	14b08 <__assert_fail@plt+0x323c>
   14bec:	ldr	r2, [pc, #112]	; 14c64 <__assert_fail@plt+0x3398>
   14bf0:	ldr	r0, [r5, #32]
   14bf4:	bl	13bb0 <__assert_fail@plt+0x22e4>
   14bf8:	mvn	r1, #0
   14bfc:	cmp	r0, #0
   14c00:	str	r0, [r5, #28]
   14c04:	ldrlt	r3, [r5, #48]	; 0x30
   14c08:	add	r0, r5, #60	; 0x3c
   14c0c:	orrlt	r3, r3, #4
   14c10:	strlt	r3, [r5, #48]	; 0x30
   14c14:	bl	16670 <__assert_fail@plt+0x4da4>
   14c18:	b	14b64 <__assert_fail@plt+0x3298>
   14c1c:	bl	1171c <__errno_location@plt>
   14c20:	mov	r5, #0
   14c24:	mov	r3, #22
   14c28:	str	r3, [r0]
   14c2c:	mov	r0, r5
   14c30:	add	sp, sp, #20
   14c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c38:	mov	r1, r6
   14c3c:	mov	r2, r8
   14c40:	mov	r0, r5
   14c44:	bl	135c4 <__assert_fail@plt+0x1cf8>
   14c48:	mov	r6, r0
   14c4c:	b	14b08 <__assert_fail@plt+0x323c>
   14c50:	mov	r2, #4096	; 0x1000
   14c54:	b	14978 <__assert_fail@plt+0x30ac>
   14c58:	mov	r6, r4
   14c5c:	b	14b08 <__assert_fail@plt+0x323c>
   14c60:	strdeq	fp, [r1], -r4
   14c64:	andeq	fp, r1, r8, lsr #13
   14c68:	ldr	r3, [r0]
   14c6c:	push	{r4, r5, r6, lr}
   14c70:	cmp	r3, #0
   14c74:	mov	r5, r0
   14c78:	beq	14cb4 <__assert_fail@plt+0x33e8>
   14c7c:	ldr	r2, [r3, #48]	; 0x30
   14c80:	cmp	r2, #0
   14c84:	blt	14da4 <__assert_fail@plt+0x34d8>
   14c88:	ldr	r4, [r3, #8]
   14c8c:	mov	r0, r3
   14c90:	cmp	r4, #0
   14c94:	ldreq	r4, [r3, #4]
   14c98:	bl	1349c <__assert_fail@plt+0x1bd0>
   14c9c:	mov	r3, r4
   14ca0:	ldr	r2, [r4, #48]	; 0x30
   14ca4:	cmp	r2, #0
   14ca8:	bge	14c88 <__assert_fail@plt+0x33bc>
   14cac:	mov	r0, r4
   14cb0:	bl	1349c <__assert_fail@plt+0x1bd0>
   14cb4:	ldr	r0, [r5, #4]
   14cb8:	cmp	r0, #0
   14cbc:	beq	14cc4 <__assert_fail@plt+0x33f8>
   14cc0:	bl	13718 <__assert_fail@plt+0x1e4c>
   14cc4:	ldr	r0, [r5, #8]
   14cc8:	bl	1349c <__assert_fail@plt+0x1bd0>
   14ccc:	ldr	r0, [r5, #24]
   14cd0:	bl	1349c <__assert_fail@plt+0x1bd0>
   14cd4:	ldr	r3, [r5, #48]	; 0x30
   14cd8:	tst	r3, #512	; 0x200
   14cdc:	beq	14d50 <__assert_fail@plt+0x3484>
   14ce0:	ldr	r0, [r5, #32]
   14ce4:	cmp	r0, #0
   14ce8:	blt	14cf8 <__assert_fail@plt+0x342c>
   14cec:	bl	11884 <close@plt>
   14cf0:	cmp	r0, #0
   14cf4:	bne	14d90 <__assert_fail@plt+0x34c4>
   14cf8:	mov	r4, #0
   14cfc:	add	r0, r5, #60	; 0x3c
   14d00:	bl	1374c <__assert_fail@plt+0x1e80>
   14d04:	ldr	r0, [r5, #52]	; 0x34
   14d08:	cmp	r0, #0
   14d0c:	beq	14d14 <__assert_fail@plt+0x3448>
   14d10:	bl	16094 <__assert_fail@plt+0x47c8>
   14d14:	ldr	r2, [r5, #48]	; 0x30
   14d18:	ldr	r3, [pc, #164]	; 14dc4 <__assert_fail@plt+0x34f8>
   14d1c:	ldr	r0, [r5, #56]	; 0x38
   14d20:	and	r3, r3, r2
   14d24:	cmp	r3, #0
   14d28:	beq	14d9c <__assert_fail@plt+0x34d0>
   14d2c:	cmp	r0, #0
   14d30:	beq	14d38 <__assert_fail@plt+0x346c>
   14d34:	bl	16094 <__assert_fail@plt+0x47c8>
   14d38:	mov	r0, r5
   14d3c:	bl	1349c <__assert_fail@plt+0x1bd0>
   14d40:	cmp	r4, #0
   14d44:	bne	14db4 <__assert_fail@plt+0x34e8>
   14d48:	mov	r0, r4
   14d4c:	pop	{r4, r5, r6, pc}
   14d50:	tst	r3, #4
   14d54:	bne	14cf8 <__assert_fail@plt+0x342c>
   14d58:	ldr	r0, [r5, #28]
   14d5c:	bl	117f4 <fchdir@plt>
   14d60:	cmp	r0, #0
   14d64:	beq	14dac <__assert_fail@plt+0x34e0>
   14d68:	bl	1171c <__errno_location@plt>
   14d6c:	ldr	r4, [r0]
   14d70:	ldr	r0, [r5, #28]
   14d74:	bl	11884 <close@plt>
   14d78:	clz	r3, r4
   14d7c:	lsr	r3, r3, #5
   14d80:	cmp	r0, #0
   14d84:	moveq	r3, #0
   14d88:	cmp	r3, #0
   14d8c:	beq	14cfc <__assert_fail@plt+0x3430>
   14d90:	bl	1171c <__errno_location@plt>
   14d94:	ldr	r4, [r0]
   14d98:	b	14cfc <__assert_fail@plt+0x3430>
   14d9c:	bl	1349c <__assert_fail@plt+0x1bd0>
   14da0:	b	14d38 <__assert_fail@plt+0x346c>
   14da4:	mov	r4, r3
   14da8:	b	14cac <__assert_fail@plt+0x33e0>
   14dac:	ldr	r0, [r5, #28]
   14db0:	b	14cec <__assert_fail@plt+0x3420>
   14db4:	bl	1171c <__errno_location@plt>
   14db8:	str	r4, [r0]
   14dbc:	mvn	r4, #0
   14dc0:	b	14d48 <__assert_fail@plt+0x347c>
   14dc4:	andeq	r0, r0, r2, lsl #2
   14dc8:	push	{r4, r5, r6, r7, r8, lr}
   14dcc:	ldr	r5, [r0]
   14dd0:	cmp	r5, #0
   14dd4:	beq	14f08 <__assert_fail@plt+0x363c>
   14dd8:	ldr	r1, [r0, #48]	; 0x30
   14ddc:	ands	r3, r1, #8192	; 0x2000
   14de0:	bne	14f08 <__assert_fail@plt+0x363c>
   14de4:	ldrh	r2, [r5, #60]	; 0x3c
   14de8:	mov	r8, r0
   14dec:	mov	r0, #3
   14df0:	cmp	r2, #1
   14df4:	strh	r0, [r5, #60]	; 0x3c
   14df8:	beq	15174 <__assert_fail@plt+0x38a8>
   14dfc:	cmp	r2, #2
   14e00:	ldrh	r3, [r5, #56]	; 0x38
   14e04:	beq	14f14 <__assert_fail@plt+0x3648>
   14e08:	cmp	r3, #1
   14e0c:	bne	14e44 <__assert_fail@plt+0x3578>
   14e10:	cmp	r2, #4
   14e14:	bne	14f28 <__assert_fail@plt+0x365c>
   14e18:	b	14f44 <__assert_fail@plt+0x3678>
   14e1c:	mov	r0, r5
   14e20:	str	r4, [r8]
   14e24:	bl	1349c <__assert_fail@plt+0x1bd0>
   14e28:	ldr	r5, [r4, #48]	; 0x30
   14e2c:	cmp	r5, #0
   14e30:	beq	14f8c <__assert_fail@plt+0x36c0>
   14e34:	ldrh	r3, [r4, #60]	; 0x3c
   14e38:	mov	r5, r4
   14e3c:	cmp	r3, #4
   14e40:	bne	15088 <__assert_fail@plt+0x37bc>
   14e44:	ldr	r4, [r5, #8]
   14e48:	cmp	r4, #0
   14e4c:	bne	14e1c <__assert_fail@plt+0x3550>
   14e50:	ldr	r4, [r5, #4]
   14e54:	ldr	r3, [r4, #12]
   14e58:	cmp	r3, #0
   14e5c:	bne	15304 <__assert_fail@plt+0x3a38>
   14e60:	str	r4, [r8]
   14e64:	mov	r0, r5
   14e68:	bl	1349c <__assert_fail@plt+0x1bd0>
   14e6c:	ldr	r3, [r4, #48]	; 0x30
   14e70:	cmn	r3, #1
   14e74:	beq	15240 <__assert_fail@plt+0x3974>
   14e78:	ldrh	r3, [r4, #56]	; 0x38
   14e7c:	cmp	r3, #11
   14e80:	beq	150fc <__assert_fail@plt+0x3830>
   14e84:	ldr	r3, [r4, #40]	; 0x28
   14e88:	ldr	r2, [r8, #24]
   14e8c:	mov	r1, #0
   14e90:	strb	r1, [r2, r3]
   14e94:	ldr	r3, [r4, #48]	; 0x30
   14e98:	cmp	r3, r1
   14e9c:	beq	151cc <__assert_fail@plt+0x3900>
   14ea0:	ldrh	r3, [r4, #58]	; 0x3a
   14ea4:	tst	r3, #2
   14ea8:	beq	1518c <__assert_fail@plt+0x38c0>
   14eac:	ldr	r3, [r8, #48]	; 0x30
   14eb0:	tst	r3, #4
   14eb4:	beq	151f0 <__assert_fail@plt+0x3924>
   14eb8:	ldr	r0, [r4, #36]	; 0x24
   14ebc:	bl	11884 <close@plt>
   14ec0:	ldr	r3, [r8, #48]	; 0x30
   14ec4:	ldrh	r2, [r4, #56]	; 0x38
   14ec8:	cmp	r2, #2
   14ecc:	beq	14f00 <__assert_fail@plt+0x3634>
   14ed0:	ldr	r2, [r4, #32]
   14ed4:	cmp	r2, #0
   14ed8:	movne	r2, #7
   14edc:	strhne	r2, [r4, #56]	; 0x38
   14ee0:	bne	14f00 <__assert_fail@plt+0x3634>
   14ee4:	mov	r2, #6
   14ee8:	mov	r0, r3
   14eec:	strh	r2, [r4, #56]	; 0x38
   14ef0:	add	r1, r8, #56	; 0x38
   14ef4:	mov	r2, r4
   14ef8:	bl	13e78 <__assert_fail@plt+0x25ac>
   14efc:	ldr	r3, [r8, #48]	; 0x30
   14f00:	tst	r3, #8192	; 0x2000
   14f04:	beq	14f84 <__assert_fail@plt+0x36b8>
   14f08:	mov	r4, #0
   14f0c:	mov	r0, r4
   14f10:	pop	{r4, r5, r6, r7, r8, pc}
   14f14:	sub	r2, r3, #12
   14f18:	cmp	r2, #1
   14f1c:	bls	1520c <__assert_fail@plt+0x3940>
   14f20:	cmp	r3, #1
   14f24:	bne	14e44 <__assert_fail@plt+0x3578>
   14f28:	tst	r1, #64	; 0x40
   14f2c:	beq	15100 <__assert_fail@plt+0x3834>
   14f30:	ldrd	r6, [r5, #64]	; 0x40
   14f34:	ldrd	r2, [r8, #16]
   14f38:	cmp	r7, r3
   14f3c:	cmpeq	r6, r2
   14f40:	beq	15100 <__assert_fail@plt+0x3834>
   14f44:	ldrh	r3, [r5, #58]	; 0x3a
   14f48:	tst	r3, #2
   14f4c:	bne	152f8 <__assert_fail@plt+0x3a2c>
   14f50:	ldr	r0, [r8, #4]
   14f54:	cmp	r0, #0
   14f58:	beq	14f68 <__assert_fail@plt+0x369c>
   14f5c:	bl	13718 <__assert_fail@plt+0x1e4c>
   14f60:	mov	r3, #0
   14f64:	str	r3, [r8, #4]
   14f68:	mov	r3, #6
   14f6c:	strh	r3, [r5, #56]	; 0x38
   14f70:	mov	r2, r5
   14f74:	add	r1, r8, #56	; 0x38
   14f78:	ldr	r0, [r8, #48]	; 0x30
   14f7c:	mov	r4, r5
   14f80:	bl	13e78 <__assert_fail@plt+0x25ac>
   14f84:	mov	r0, r4
   14f88:	pop	{r4, r5, r6, r7, r8, pc}
   14f8c:	mov	r0, r8
   14f90:	bl	13914 <__assert_fail@plt+0x2048>
   14f94:	cmp	r0, #0
   14f98:	bne	152e4 <__assert_fail@plt+0x3a18>
   14f9c:	ldr	r2, [r8, #48]	; 0x30
   14fa0:	ldr	r3, [pc, #1228]	; 15474 <__assert_fail@plt+0x3ba8>
   14fa4:	ldr	r0, [r8, #56]	; 0x38
   14fa8:	and	r3, r3, r2
   14fac:	cmp	r3, #0
   14fb0:	beq	15260 <__assert_fail@plt+0x3994>
   14fb4:	cmp	r0, #0
   14fb8:	beq	14fc0 <__assert_fail@plt+0x36f4>
   14fbc:	bl	16094 <__assert_fail@plt+0x47c8>
   14fc0:	ldr	r2, [r4, #52]	; 0x34
   14fc4:	add	r6, r4, #168	; 0xa8
   14fc8:	str	r2, [r4, #40]	; 0x28
   14fcc:	mov	r1, r6
   14fd0:	add	r2, r2, #1
   14fd4:	ldr	r0, [r8, #24]
   14fd8:	bl	11500 <memmove@plt>
   14fdc:	mov	r0, r6
   14fe0:	mov	r1, #47	; 0x2f
   14fe4:	bl	117ac <strrchr@plt>
   14fe8:	cmp	r0, #0
   14fec:	beq	1501c <__assert_fail@plt+0x3750>
   14ff0:	cmp	r6, r0
   14ff4:	beq	152d4 <__assert_fail@plt+0x3a08>
   14ff8:	add	r5, r0, #1
   14ffc:	mov	r0, r5
   15000:	bl	116e0 <strlen@plt>
   15004:	mov	r1, r5
   15008:	mov	r7, r0
   1500c:	add	r2, r7, #1
   15010:	mov	r0, r6
   15014:	bl	11500 <memmove@plt>
   15018:	str	r7, [r4, #52]	; 0x34
   1501c:	ldr	r3, [r8, #24]
   15020:	add	r1, r8, #56	; 0x38
   15024:	str	r3, [r4, #28]
   15028:	str	r3, [r4, #24]
   1502c:	ldr	r0, [r8, #48]	; 0x30
   15030:	bl	13b30 <__assert_fail@plt+0x2264>
   15034:	ldrh	r3, [r4, #56]	; 0x38
   15038:	cmp	r3, #11
   1503c:	str	r4, [r8]
   15040:	beq	150e0 <__assert_fail@plt+0x3814>
   15044:	cmp	r3, #1
   15048:	bne	14f84 <__assert_fail@plt+0x36b8>
   1504c:	ldr	r3, [r4, #48]	; 0x30
   15050:	cmp	r3, #0
   15054:	ldrdeq	r2, [r4, #64]	; 0x40
   15058:	strdeq	r2, [r8, #16]
   1505c:	mov	r2, r4
   15060:	add	r1, r8, #56	; 0x38
   15064:	ldr	r0, [r8, #48]	; 0x30
   15068:	bl	13dc8 <__assert_fail@plt+0x24fc>
   1506c:	subs	r5, r0, #0
   15070:	bne	14f84 <__assert_fail@plt+0x36b8>
   15074:	bl	1171c <__errno_location@plt>
   15078:	mov	r3, #12
   1507c:	mov	r4, r5
   15080:	str	r3, [r0]
   15084:	b	14f84 <__assert_fail@plt+0x36b8>
   15088:	cmp	r3, #2
   1508c:	beq	15338 <__assert_fail@plt+0x3a6c>
   15090:	ldr	r3, [r4, #4]
   15094:	mov	ip, #47	; 0x2f
   15098:	ldr	r2, [r8, #24]
   1509c:	ldr	r0, [r3, #40]	; 0x28
   150a0:	ldr	lr, [r3, #28]
   150a4:	sub	r3, r0, #1
   150a8:	add	r1, r4, #168	; 0xa8
   150ac:	ldrb	lr, [lr, r3]
   150b0:	cmp	lr, ip
   150b4:	movne	r3, r0
   150b8:	add	r0, r2, r3
   150bc:	strb	ip, [r2, r3]
   150c0:	ldr	r2, [r4, #52]	; 0x34
   150c4:	add	r0, r0, #1
   150c8:	add	r2, r2, #1
   150cc:	bl	11500 <memmove@plt>
   150d0:	ldrh	r3, [r4, #56]	; 0x38
   150d4:	str	r4, [r8]
   150d8:	cmp	r3, #11
   150dc:	bne	15044 <__assert_fail@plt+0x3778>
   150e0:	ldrd	r2, [r4, #112]	; 0x70
   150e4:	cmp	r3, #0
   150e8:	cmpeq	r2, #2
   150ec:	beq	15364 <__assert_fail@plt+0x3a98>
   150f0:	cmp	r3, #0
   150f4:	cmpeq	r2, #1
   150f8:	beq	14f84 <__assert_fail@plt+0x36b8>
   150fc:	bl	11878 <abort@plt>
   15100:	ldr	r0, [r8, #4]
   15104:	cmp	r0, #0
   15108:	beq	1527c <__assert_fail@plt+0x39b0>
   1510c:	tst	r1, #4096	; 0x1000
   15110:	bne	15268 <__assert_fail@plt+0x399c>
   15114:	ldr	r3, [r5, #24]
   15118:	mvn	r2, #0
   1511c:	mov	r1, r5
   15120:	mov	r0, r8
   15124:	bl	13bec <__assert_fail@plt+0x2320>
   15128:	cmp	r0, #0
   1512c:	beq	151e0 <__assert_fail@plt+0x3914>
   15130:	bl	1171c <__errno_location@plt>
   15134:	ldrh	r3, [r5, #58]	; 0x3a
   15138:	ldr	r4, [r8, #4]
   1513c:	orr	r3, r3, #1
   15140:	cmp	r4, #0
   15144:	ldr	r2, [r0]
   15148:	strh	r3, [r5, #58]	; 0x3a
   1514c:	str	r2, [r5, #32]
   15150:	beq	151e4 <__assert_fail@plt+0x3918>
   15154:	mov	r3, r4
   15158:	ldr	r2, [r3, #4]
   1515c:	ldr	r2, [r2, #24]
   15160:	str	r2, [r3, #24]
   15164:	ldr	r3, [r3, #8]
   15168:	cmp	r3, #0
   1516c:	bne	15158 <__assert_fail@plt+0x388c>
   15170:	b	151e4 <__assert_fail@plt+0x3918>
   15174:	ldr	r0, [r8, #32]
   15178:	mov	r2, r5
   1517c:	bl	13964 <__assert_fail@plt+0x2098>
   15180:	mov	r4, r5
   15184:	strh	r0, [r5, #56]	; 0x38
   15188:	b	14f84 <__assert_fail@plt+0x36b8>
   1518c:	tst	r3, #1
   15190:	bne	14ec0 <__assert_fail@plt+0x35f4>
   15194:	ldr	r3, [pc, #732]	; 15478 <__assert_fail@plt+0x3bac>
   15198:	mvn	r2, #0
   1519c:	ldr	r1, [r4, #4]
   151a0:	mov	r0, r8
   151a4:	bl	13bec <__assert_fail@plt+0x2320>
   151a8:	cmp	r0, #0
   151ac:	beq	14ec0 <__assert_fail@plt+0x35f4>
   151b0:	bl	1171c <__errno_location@plt>
   151b4:	ldr	r3, [r8, #48]	; 0x30
   151b8:	orr	r3, r3, #8192	; 0x2000
   151bc:	ldr	r2, [r0]
   151c0:	str	r2, [r4, #32]
   151c4:	str	r3, [r8, #48]	; 0x30
   151c8:	b	14ec4 <__assert_fail@plt+0x35f8>
   151cc:	mov	r0, r8
   151d0:	bl	13914 <__assert_fail@plt+0x2048>
   151d4:	cmp	r0, #0
   151d8:	bne	151b0 <__assert_fail@plt+0x38e4>
   151dc:	b	14ec0 <__assert_fail@plt+0x35f4>
   151e0:	ldr	r4, [r8, #4]
   151e4:	mov	r3, #0
   151e8:	str	r3, [r8, #4]
   151ec:	b	15090 <__assert_fail@plt+0x37c4>
   151f0:	tst	r3, #512	; 0x200
   151f4:	beq	15384 <__assert_fail@plt+0x3ab8>
   151f8:	mov	r2, #1
   151fc:	ldr	r1, [r4, #36]	; 0x24
   15200:	mov	r0, r8
   15204:	bl	13894 <__assert_fail@plt+0x1fc8>
   15208:	b	14eb8 <__assert_fail@plt+0x35ec>
   1520c:	mov	r3, #1
   15210:	mov	r2, r5
   15214:	ldr	r0, [r8, #32]
   15218:	bl	13964 <__assert_fail@plt+0x2098>
   1521c:	cmp	r0, #1
   15220:	mov	r3, r0
   15224:	strh	r0, [r5, #56]	; 0x38
   15228:	beq	153c4 <__assert_fail@plt+0x3af8>
   1522c:	cmp	r0, #11
   15230:	mov	r4, r5
   15234:	str	r5, [r8]
   15238:	bne	14f84 <__assert_fail@plt+0x36b8>
   1523c:	b	150e0 <__assert_fail@plt+0x3814>
   15240:	mov	r0, r4
   15244:	bl	1349c <__assert_fail@plt+0x1bd0>
   15248:	bl	1171c <__errno_location@plt>
   1524c:	mov	r3, #0
   15250:	mov	r4, r3
   15254:	str	r3, [r0]
   15258:	str	r3, [r8]
   1525c:	b	14f84 <__assert_fail@plt+0x36b8>
   15260:	bl	1349c <__assert_fail@plt+0x1bd0>
   15264:	b	14fc0 <__assert_fail@plt+0x36f4>
   15268:	bic	r1, r1, #4096	; 0x1000
   1526c:	str	r1, [r8, #48]	; 0x30
   15270:	bl	13718 <__assert_fail@plt+0x1e4c>
   15274:	mov	r3, #0
   15278:	str	r3, [r8, #4]
   1527c:	mov	r1, #3
   15280:	mov	r0, r8
   15284:	bl	13f30 <__assert_fail@plt+0x2664>
   15288:	cmp	r0, #0
   1528c:	mov	r4, r0
   15290:	str	r0, [r8, #4]
   15294:	bne	151e4 <__assert_fail@plt+0x3918>
   15298:	ldr	r0, [r8, #48]	; 0x30
   1529c:	tst	r0, #8192	; 0x2000
   152a0:	bne	14f08 <__assert_fail@plt+0x363c>
   152a4:	ldr	r3, [r5, #32]
   152a8:	cmp	r3, #0
   152ac:	beq	152c0 <__assert_fail@plt+0x39f4>
   152b0:	ldrh	r3, [r5, #56]	; 0x38
   152b4:	cmp	r3, #4
   152b8:	movne	r3, #7
   152bc:	strhne	r3, [r5, #56]	; 0x38
   152c0:	add	r1, r8, #56	; 0x38
   152c4:	mov	r2, r5
   152c8:	bl	13e78 <__assert_fail@plt+0x25ac>
   152cc:	mov	r4, r5
   152d0:	b	14f84 <__assert_fail@plt+0x36b8>
   152d4:	ldrb	r3, [r4, #169]	; 0xa9
   152d8:	cmp	r3, #0
   152dc:	bne	14ff8 <__assert_fail@plt+0x372c>
   152e0:	b	1501c <__assert_fail@plt+0x3750>
   152e4:	ldr	r3, [r8, #48]	; 0x30
   152e8:	mov	r4, r5
   152ec:	orr	r3, r3, #8192	; 0x2000
   152f0:	str	r3, [r8, #48]	; 0x30
   152f4:	b	14f84 <__assert_fail@plt+0x36b8>
   152f8:	ldr	r0, [r5, #36]	; 0x24
   152fc:	bl	11884 <close@plt>
   15300:	b	14f50 <__assert_fail@plt+0x3684>
   15304:	ldr	r3, [r4, #40]	; 0x28
   15308:	ldr	r2, [r8, #24]
   1530c:	mov	r0, #0
   15310:	str	r4, [r8]
   15314:	mov	r1, #3
   15318:	strb	r0, [r2, r3]
   1531c:	mov	r0, r8
   15320:	bl	13f30 <__assert_fail@plt+0x2664>
   15324:	subs	r4, r0, #0
   15328:	beq	153b0 <__assert_fail@plt+0x3ae4>
   1532c:	mov	r0, r5
   15330:	bl	1349c <__assert_fail@plt+0x1bd0>
   15334:	b	15090 <__assert_fail@plt+0x37c4>
   15338:	mov	r3, #1
   1533c:	mov	r2, r4
   15340:	ldr	r1, [r8, #48]	; 0x30
   15344:	ldr	r0, [r8, #32]
   15348:	bl	13964 <__assert_fail@plt+0x2098>
   1534c:	cmp	r0, #1
   15350:	strh	r0, [r4, #56]	; 0x38
   15354:	beq	153dc <__assert_fail@plt+0x3b10>
   15358:	mov	r3, #3
   1535c:	strh	r3, [r4, #60]	; 0x3c
   15360:	b	15090 <__assert_fail@plt+0x37c4>
   15364:	mov	r3, #0
   15368:	mov	r2, r4
   1536c:	ldr	r1, [r8, #48]	; 0x30
   15370:	ldr	r0, [r8, #32]
   15374:	bl	13964 <__assert_fail@plt+0x2098>
   15378:	mov	r3, r0
   1537c:	strh	r0, [r4, #56]	; 0x38
   15380:	b	15044 <__assert_fail@plt+0x3778>
   15384:	ldr	r0, [r4, #36]	; 0x24
   15388:	bl	117f4 <fchdir@plt>
   1538c:	cmp	r0, #0
   15390:	beq	14eb8 <__assert_fail@plt+0x35ec>
   15394:	bl	1171c <__errno_location@plt>
   15398:	ldr	r3, [r8, #48]	; 0x30
   1539c:	orr	r3, r3, #8192	; 0x2000
   153a0:	ldr	r2, [r0]
   153a4:	str	r2, [r4, #32]
   153a8:	str	r3, [r8, #48]	; 0x30
   153ac:	b	14eb8 <__assert_fail@plt+0x35ec>
   153b0:	ldr	r3, [r8, #48]	; 0x30
   153b4:	tst	r3, #8192	; 0x2000
   153b8:	bne	14f08 <__assert_fail@plt+0x363c>
   153bc:	ldr	r4, [r5, #4]
   153c0:	b	14e60 <__assert_fail@plt+0x3594>
   153c4:	ldr	r1, [r8, #48]	; 0x30
   153c8:	tst	r1, #4
   153cc:	beq	15410 <__assert_fail@plt+0x3b44>
   153d0:	str	r5, [r8]
   153d4:	mov	r4, r5
   153d8:	b	15044 <__assert_fail@plt+0x3778>
   153dc:	ldr	r1, [r8, #48]	; 0x30
   153e0:	tst	r1, #4
   153e4:	bne	15358 <__assert_fail@plt+0x3a8c>
   153e8:	ldr	r2, [pc, #140]	; 1547c <__assert_fail@plt+0x3bb0>
   153ec:	ldr	r0, [r8, #32]
   153f0:	bl	13bb0 <__assert_fail@plt+0x22e4>
   153f4:	cmp	r0, #0
   153f8:	str	r0, [r4, #36]	; 0x24
   153fc:	blt	15440 <__assert_fail@plt+0x3b74>
   15400:	ldrh	r3, [r4, #58]	; 0x3a
   15404:	orr	r3, r3, #2
   15408:	strh	r3, [r4, #58]	; 0x3a
   1540c:	b	15358 <__assert_fail@plt+0x3a8c>
   15410:	ldr	r2, [pc, #100]	; 1547c <__assert_fail@plt+0x3bb0>
   15414:	ldr	r0, [r8, #32]
   15418:	bl	13bb0 <__assert_fail@plt+0x22e4>
   1541c:	cmp	r0, #0
   15420:	str	r0, [r5, #36]	; 0x24
   15424:	blt	15458 <__assert_fail@plt+0x3b8c>
   15428:	ldrh	r2, [r5, #58]	; 0x3a
   1542c:	ldrh	r3, [r5, #56]	; 0x38
   15430:	mov	r4, r5
   15434:	orr	r2, r2, #2
   15438:	strh	r2, [r5, #58]	; 0x3a
   1543c:	b	15038 <__assert_fail@plt+0x376c>
   15440:	bl	1171c <__errno_location@plt>
   15444:	mov	r2, #7
   15448:	ldr	r3, [r0]
   1544c:	strh	r2, [r4, #56]	; 0x38
   15450:	str	r3, [r4, #32]
   15454:	b	15358 <__assert_fail@plt+0x3a8c>
   15458:	bl	1171c <__errno_location@plt>
   1545c:	mov	r2, #7
   15460:	mov	r3, r2
   15464:	ldr	r1, [r0]
   15468:	strh	r2, [r5, #56]	; 0x38
   1546c:	str	r1, [r5, #32]
   15470:	b	153d0 <__assert_fail@plt+0x3b04>
   15474:	andeq	r0, r0, r2, lsl #2
   15478:	andeq	fp, r1, ip, lsl #17
   1547c:	andeq	fp, r1, r8, lsr #13
   15480:	cmp	r2, #4
   15484:	bhi	15498 <__assert_fail@plt+0x3bcc>
   15488:	mov	r3, #0
   1548c:	strh	r2, [r1, #60]	; 0x3c
   15490:	mov	r0, r3
   15494:	bx	lr
   15498:	push	{r4, lr}
   1549c:	bl	1171c <__errno_location@plt>
   154a0:	mov	r2, #22
   154a4:	mov	r3, #1
   154a8:	str	r2, [r0]
   154ac:	mov	r0, r3
   154b0:	pop	{r4, pc}
   154b4:	push	{r4, r5, r6, r7, r8, lr}
   154b8:	bics	r8, r1, #4096	; 0x1000
   154bc:	bne	155bc <__assert_fail@plt+0x3cf0>
   154c0:	mov	r5, r0
   154c4:	mov	r4, r1
   154c8:	bl	1171c <__errno_location@plt>
   154cc:	ldr	r6, [r5]
   154d0:	str	r8, [r0]
   154d4:	ldr	r3, [r5, #48]	; 0x30
   154d8:	mov	r7, r0
   154dc:	ands	r3, r3, #8192	; 0x2000
   154e0:	bne	155d4 <__assert_fail@plt+0x3d08>
   154e4:	ldrh	r2, [r6, #56]	; 0x38
   154e8:	cmp	r2, #9
   154ec:	ldreq	r3, [r6, #8]
   154f0:	beq	15560 <__assert_fail@plt+0x3c94>
   154f4:	cmp	r2, #1
   154f8:	bne	15560 <__assert_fail@plt+0x3c94>
   154fc:	ldr	r0, [r5, #4]
   15500:	cmp	r0, #0
   15504:	beq	1550c <__assert_fail@plt+0x3c40>
   15508:	bl	13718 <__assert_fail@plt+0x1e4c>
   1550c:	cmp	r4, #4096	; 0x1000
   15510:	moveq	r8, #2
   15514:	ldreq	r3, [r5, #48]	; 0x30
   15518:	movne	r8, #1
   1551c:	orreq	r3, r3, #4096	; 0x1000
   15520:	streq	r3, [r5, #48]	; 0x30
   15524:	ldr	r3, [r6, #48]	; 0x30
   15528:	cmp	r3, #0
   1552c:	bne	1554c <__assert_fail@plt+0x3c80>
   15530:	ldr	r3, [r6, #24]
   15534:	ldrb	r3, [r3]
   15538:	cmp	r3, #47	; 0x2f
   1553c:	beq	1554c <__assert_fail@plt+0x3c80>
   15540:	ldr	r1, [r5, #48]	; 0x30
   15544:	ands	r4, r1, #4
   15548:	beq	15568 <__assert_fail@plt+0x3c9c>
   1554c:	mov	r1, r8
   15550:	mov	r0, r5
   15554:	bl	13f30 <__assert_fail@plt+0x2664>
   15558:	mov	r3, r0
   1555c:	str	r0, [r5, #4]
   15560:	mov	r0, r3
   15564:	pop	{r4, r5, r6, r7, r8, pc}
   15568:	ldr	r2, [pc, #160]	; 15610 <__assert_fail@plt+0x3d44>
   1556c:	ldr	r0, [r5, #32]
   15570:	bl	13bb0 <__assert_fail@plt+0x22e4>
   15574:	subs	r6, r0, #0
   15578:	strlt	r4, [r5, #4]
   1557c:	movlt	r3, r4
   15580:	blt	15560 <__assert_fail@plt+0x3c94>
   15584:	mov	r1, r8
   15588:	mov	r0, r5
   1558c:	bl	13f30 <__assert_fail@plt+0x2664>
   15590:	ldr	r3, [r5, #48]	; 0x30
   15594:	ands	r4, r3, #512	; 0x200
   15598:	str	r0, [r5, #4]
   1559c:	beq	155dc <__assert_fail@plt+0x3d10>
   155a0:	mov	r1, r6
   155a4:	mov	r2, #1
   155a8:	mov	r0, r5
   155ac:	bl	13894 <__assert_fail@plt+0x1fc8>
   155b0:	ldr	r3, [r5, #4]
   155b4:	mov	r0, r3
   155b8:	pop	{r4, r5, r6, r7, r8, pc}
   155bc:	bl	1171c <__errno_location@plt>
   155c0:	mov	r2, #22
   155c4:	mov	r3, #0
   155c8:	str	r2, [r0]
   155cc:	mov	r0, r3
   155d0:	pop	{r4, r5, r6, r7, r8, pc}
   155d4:	mov	r3, r8
   155d8:	b	15560 <__assert_fail@plt+0x3c94>
   155dc:	mov	r0, r6
   155e0:	bl	117f4 <fchdir@plt>
   155e4:	cmp	r0, #0
   155e8:	bne	155f8 <__assert_fail@plt+0x3d2c>
   155ec:	mov	r0, r6
   155f0:	bl	11884 <close@plt>
   155f4:	b	155b0 <__assert_fail@plt+0x3ce4>
   155f8:	ldr	r5, [r7]
   155fc:	mov	r0, r6
   15600:	bl	11884 <close@plt>
   15604:	str	r5, [r7]
   15608:	mov	r3, r4
   1560c:	b	15560 <__assert_fail@plt+0x3c94>
   15610:	andeq	fp, r1, r8, lsr #13
   15614:	andeq	r0, r0, r0
   15618:	cmp	r0, #10
   1561c:	movcc	r0, #10
   15620:	push	{r4, r5, r6, r7, r8, lr}
   15624:	orr	r7, r0, #1
   15628:	cmn	r7, #1
   1562c:	ldrne	r8, [pc, #132]	; 156b8 <__assert_fail@plt+0x3dec>
   15630:	beq	156a8 <__assert_fail@plt+0x3ddc>
   15634:	cmp	r7, #9
   15638:	bls	156b0 <__assert_fail@plt+0x3de4>
   1563c:	umull	r2, r3, r8, r7
   15640:	lsr	r3, r3, #1
   15644:	add	r3, r3, r3, lsl #1
   15648:	cmp	r7, r3
   1564c:	beq	1569c <__assert_fail@plt+0x3dd0>
   15650:	mov	r6, #16
   15654:	mov	r5, #9
   15658:	mov	r4, #3
   1565c:	b	15670 <__assert_fail@plt+0x3da4>
   15660:	bl	1aafc <lchmod@@Base+0x43cc>
   15664:	add	r6, r6, #8
   15668:	cmp	r1, #0
   1566c:	beq	1569c <__assert_fail@plt+0x3dd0>
   15670:	add	r5, r5, r6
   15674:	add	r4, r4, #2
   15678:	cmp	r5, r7
   1567c:	mov	r0, r7
   15680:	mov	r1, r4
   15684:	bcc	15660 <__assert_fail@plt+0x3d94>
   15688:	mov	r1, r4
   1568c:	mov	r0, r7
   15690:	bl	1aafc <lchmod@@Base+0x43cc>
   15694:	cmp	r1, #0
   15698:	bne	156a8 <__assert_fail@plt+0x3ddc>
   1569c:	add	r7, r7, #2
   156a0:	cmn	r7, #1
   156a4:	bne	15634 <__assert_fail@plt+0x3d68>
   156a8:	mov	r0, r7
   156ac:	pop	{r4, r5, r6, r7, r8, pc}
   156b0:	mov	r4, #3
   156b4:	b	15688 <__assert_fail@plt+0x3dbc>
   156b8:	bge	feac016c <optarg@@GLIBC_2.4+0xfea93f84>
   156bc:	push	{r4, lr}
   156c0:	ror	r0, r0, #3
   156c4:	bl	1aafc <lchmod@@Base+0x43cc>
   156c8:	mov	r0, r1
   156cc:	pop	{r4, pc}
   156d0:	sub	r0, r1, r0
   156d4:	clz	r0, r0
   156d8:	lsr	r0, r0, #5
   156dc:	bx	lr
   156e0:	push	{r4, lr}
   156e4:	mov	r4, r0
   156e8:	mov	r0, r1
   156ec:	ldr	r3, [r4, #24]
   156f0:	ldr	r1, [r4, #8]
   156f4:	blx	r3
   156f8:	ldr	r3, [r4, #8]
   156fc:	cmp	r0, r3
   15700:	bcs	15710 <__assert_fail@plt+0x3e44>
   15704:	ldr	r3, [r4]
   15708:	add	r0, r3, r0, lsl #3
   1570c:	pop	{r4, pc}
   15710:	bl	11878 <abort@plt>
   15714:	push	{r4, r5, r6, r7, r8, lr}
   15718:	mov	r7, r2
   1571c:	mov	r8, r3
   15720:	mov	r6, r0
   15724:	mov	r5, r1
   15728:	bl	156e0 <__assert_fail@plt+0x3e14>
   1572c:	str	r0, [r7]
   15730:	ldr	r3, [r0]
   15734:	cmp	r3, #0
   15738:	beq	157d0 <__assert_fail@plt+0x3f04>
   1573c:	cmp	r5, r3
   15740:	mov	r4, r0
   15744:	beq	15764 <__assert_fail@plt+0x3e98>
   15748:	mov	r1, r3
   1574c:	mov	r0, r5
   15750:	ldr	r3, [r6, #28]
   15754:	blx	r3
   15758:	cmp	r0, #0
   1575c:	beq	157c4 <__assert_fail@plt+0x3ef8>
   15760:	ldr	r3, [r4]
   15764:	cmp	r8, #0
   15768:	beq	15794 <__assert_fail@plt+0x3ec8>
   1576c:	ldr	r2, [r4, #4]
   15770:	cmp	r2, #0
   15774:	movne	ip, #0
   15778:	ldmne	r2, {r0, r1}
   1577c:	streq	r2, [r4]
   15780:	stmne	r4, {r0, r1}
   15784:	strne	ip, [r2]
   15788:	ldrne	r1, [r6, #36]	; 0x24
   1578c:	strne	r1, [r2, #4]
   15790:	strne	r2, [r6, #36]	; 0x24
   15794:	mov	r0, r3
   15798:	pop	{r4, r5, r6, r7, r8, pc}
   1579c:	ldr	r3, [r2]
   157a0:	cmp	r5, r3
   157a4:	beq	157e4 <__assert_fail@plt+0x3f18>
   157a8:	mov	r1, r3
   157ac:	mov	r0, r5
   157b0:	ldr	r3, [r6, #28]
   157b4:	blx	r3
   157b8:	cmp	r0, #0
   157bc:	bne	157dc <__assert_fail@plt+0x3f10>
   157c0:	ldr	r4, [r4, #4]
   157c4:	ldr	r2, [r4, #4]
   157c8:	cmp	r2, #0
   157cc:	bne	1579c <__assert_fail@plt+0x3ed0>
   157d0:	mov	r3, #0
   157d4:	mov	r0, r3
   157d8:	pop	{r4, r5, r6, r7, r8, pc}
   157dc:	ldr	r2, [r4, #4]
   157e0:	ldr	r3, [r2]
   157e4:	cmp	r8, #0
   157e8:	beq	15794 <__assert_fail@plt+0x3ec8>
   157ec:	ldr	r0, [r2, #4]
   157f0:	mov	r1, #0
   157f4:	str	r0, [r4, #4]
   157f8:	str	r1, [r2]
   157fc:	ldr	r1, [r6, #36]	; 0x24
   15800:	mov	r0, r3
   15804:	str	r1, [r2, #4]
   15808:	str	r2, [r6, #36]	; 0x24
   1580c:	pop	{r4, r5, r6, r7, r8, pc}
   15810:	ldr	r2, [pc, #164]	; 158bc <__assert_fail@plt+0x3ff0>
   15814:	ldr	r3, [r0]
   15818:	cmp	r3, r2
   1581c:	beq	158a4 <__assert_fail@plt+0x3fd8>
   15820:	vldr	s15, [r3, #8]
   15824:	vldr	s14, [pc, #128]	; 158ac <__assert_fail@plt+0x3fe0>
   15828:	vcmpe.f32	s15, s14
   1582c:	vmrs	APSR_nzcv, fpscr
   15830:	ble	15898 <__assert_fail@plt+0x3fcc>
   15834:	vldr	s13, [pc, #116]	; 158b0 <__assert_fail@plt+0x3fe4>
   15838:	vcmpe.f32	s15, s13
   1583c:	vmrs	APSR_nzcv, fpscr
   15840:	bpl	15898 <__assert_fail@plt+0x3fcc>
   15844:	vldr	s13, [pc, #104]	; 158b4 <__assert_fail@plt+0x3fe8>
   15848:	vldr	s12, [r3, #12]
   1584c:	vcmpe.f32	s12, s13
   15850:	vmrs	APSR_nzcv, fpscr
   15854:	ble	15898 <__assert_fail@plt+0x3fcc>
   15858:	vldr	s13, [r3]
   1585c:	vcmpe.f32	s13, #0.0
   15860:	vmrs	APSR_nzcv, fpscr
   15864:	blt	15898 <__assert_fail@plt+0x3fcc>
   15868:	vadd.f32	s14, s13, s14
   1586c:	vldr	s13, [r3, #4]
   15870:	vcmpe.f32	s14, s13
   15874:	vmrs	APSR_nzcv, fpscr
   15878:	bpl	15898 <__assert_fail@plt+0x3fcc>
   1587c:	vldr	s12, [pc, #52]	; 158b8 <__assert_fail@plt+0x3fec>
   15880:	vcmpe.f32	s13, s12
   15884:	vmrs	APSR_nzcv, fpscr
   15888:	bhi	15898 <__assert_fail@plt+0x3fcc>
   1588c:	vcmpe.f32	s15, s14
   15890:	vmrs	APSR_nzcv, fpscr
   15894:	bgt	158a4 <__assert_fail@plt+0x3fd8>
   15898:	str	r2, [r0]
   1589c:	mov	r0, #0
   158a0:	bx	lr
   158a4:	mov	r0, #1
   158a8:	bx	lr
   158ac:	stclcc	12, cr12, [ip, #820]	; 0x334
   158b0:	svccc	0x00666666
   158b4:	svccc	0x008ccccd
   158b8:	svccc	0x00800000
   158bc:	muleq	r1, r0, r8
   158c0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158c4:	ldm	r1, {r6, ip}
   158c8:	cmp	r6, ip
   158cc:	bcs	15988 <__assert_fail@plt+0x40bc>
   158d0:	mov	sl, r2
   158d4:	mov	r5, r0
   158d8:	mov	r8, r1
   158dc:	add	r6, r6, #8
   158e0:	mov	r9, #0
   158e4:	ldr	fp, [r6, #-8]
   158e8:	mov	r7, r6
   158ec:	cmp	fp, #0
   158f0:	beq	1597c <__assert_fail@plt+0x40b0>
   158f4:	ldr	r4, [r6, #-4]
   158f8:	cmp	r4, #0
   158fc:	bne	1591c <__assert_fail@plt+0x4050>
   15900:	b	1596c <__assert_fail@plt+0x40a0>
   15904:	ldr	r3, [r0, #4]
   15908:	cmp	r2, #0
   1590c:	str	r3, [r4, #4]
   15910:	str	r4, [r0, #4]
   15914:	mov	r4, r2
   15918:	beq	15968 <__assert_fail@plt+0x409c>
   1591c:	ldr	fp, [r4]
   15920:	mov	r0, r5
   15924:	mov	r1, fp
   15928:	bl	156e0 <__assert_fail@plt+0x3e14>
   1592c:	ldr	r2, [r4, #4]
   15930:	ldr	r1, [r0]
   15934:	cmp	r1, #0
   15938:	bne	15904 <__assert_fail@plt+0x4038>
   1593c:	ldr	ip, [r5, #12]
   15940:	str	fp, [r0]
   15944:	add	r3, ip, #1
   15948:	str	r3, [r5, #12]
   1594c:	str	r1, [r4]
   15950:	ldr	r3, [r5, #36]	; 0x24
   15954:	cmp	r2, #0
   15958:	str	r3, [r4, #4]
   1595c:	str	r4, [r5, #36]	; 0x24
   15960:	mov	r4, r2
   15964:	bne	1591c <__assert_fail@plt+0x4050>
   15968:	ldr	fp, [r6, #-8]
   1596c:	cmp	sl, #0
   15970:	str	r9, [r6, #-4]
   15974:	beq	15990 <__assert_fail@plt+0x40c4>
   15978:	ldr	ip, [r8, #4]
   1597c:	cmp	ip, r7
   15980:	add	r6, r6, #8
   15984:	bhi	158e4 <__assert_fail@plt+0x4018>
   15988:	mov	r0, #1
   1598c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15990:	mov	r1, fp
   15994:	mov	r0, r5
   15998:	bl	156e0 <__assert_fail@plt+0x3e14>
   1599c:	ldr	r2, [r0]
   159a0:	mov	r4, r0
   159a4:	cmp	r2, #0
   159a8:	beq	159f4 <__assert_fail@plt+0x4128>
   159ac:	ldr	r0, [r5, #36]	; 0x24
   159b0:	cmp	r0, #0
   159b4:	beq	15a08 <__assert_fail@plt+0x413c>
   159b8:	ldr	r2, [r0, #4]
   159bc:	str	r2, [r5, #36]	; 0x24
   159c0:	ldr	r2, [r4, #4]
   159c4:	str	fp, [r0]
   159c8:	str	r2, [r0, #4]
   159cc:	str	r0, [r4, #4]
   159d0:	str	r9, [r6, #-8]
   159d4:	ldr	r3, [r8, #12]
   159d8:	ldr	ip, [r8, #4]
   159dc:	sub	r3, r3, #1
   159e0:	cmp	ip, r7
   159e4:	str	r3, [r8, #12]
   159e8:	add	r6, r6, #8
   159ec:	bhi	158e4 <__assert_fail@plt+0x4018>
   159f0:	b	15988 <__assert_fail@plt+0x40bc>
   159f4:	ldr	r2, [r5, #12]
   159f8:	str	fp, [r0]
   159fc:	add	r3, r2, #1
   15a00:	str	r3, [r5, #12]
   15a04:	b	159d0 <__assert_fail@plt+0x4104>
   15a08:	mov	r0, #8
   15a0c:	bl	1a0b4 <lchmod@@Base+0x3984>
   15a10:	cmp	r0, #0
   15a14:	bne	159c0 <__assert_fail@plt+0x40f4>
   15a18:	mov	r0, sl
   15a1c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a20:	ldr	r0, [r0, #8]
   15a24:	bx	lr
   15a28:	ldr	r0, [r0, #12]
   15a2c:	bx	lr
   15a30:	ldr	r0, [r0, #16]
   15a34:	bx	lr
   15a38:	ldm	r0, {r1, ip}
   15a3c:	mov	r0, #0
   15a40:	cmp	r1, ip
   15a44:	bcs	15a8c <__assert_fail@plt+0x41c0>
   15a48:	ldr	r3, [r1]
   15a4c:	cmp	r3, #0
   15a50:	beq	15a7c <__assert_fail@plt+0x41b0>
   15a54:	ldr	r3, [r1, #4]
   15a58:	mov	r2, #1
   15a5c:	cmp	r3, #0
   15a60:	beq	15a74 <__assert_fail@plt+0x41a8>
   15a64:	ldr	r3, [r3, #4]
   15a68:	add	r2, r2, #1
   15a6c:	cmp	r3, #0
   15a70:	bne	15a64 <__assert_fail@plt+0x4198>
   15a74:	cmp	r0, r2
   15a78:	movcc	r0, r2
   15a7c:	add	r1, r1, #8
   15a80:	cmp	r1, ip
   15a84:	bcc	15a48 <__assert_fail@plt+0x417c>
   15a88:	bx	lr
   15a8c:	bx	lr
   15a90:	push	{lr}		; (str lr, [sp, #-4]!)
   15a94:	mov	r2, #0
   15a98:	ldm	r0, {r1, lr}
   15a9c:	mov	ip, r2
   15aa0:	cmp	r1, lr
   15aa4:	bcs	15ae4 <__assert_fail@plt+0x4218>
   15aa8:	ldr	r3, [r1]
   15aac:	cmp	r3, #0
   15ab0:	beq	15ad8 <__assert_fail@plt+0x420c>
   15ab4:	ldr	r3, [r1, #4]
   15ab8:	add	ip, ip, #1
   15abc:	cmp	r3, #0
   15ac0:	add	r2, r2, #1
   15ac4:	beq	15ad8 <__assert_fail@plt+0x420c>
   15ac8:	ldr	r3, [r3, #4]
   15acc:	add	r2, r2, #1
   15ad0:	cmp	r3, #0
   15ad4:	bne	15ac8 <__assert_fail@plt+0x41fc>
   15ad8:	add	r1, r1, #8
   15adc:	cmp	r1, lr
   15ae0:	bcc	15aa8 <__assert_fail@plt+0x41dc>
   15ae4:	ldr	r3, [r0, #12]
   15ae8:	cmp	r3, ip
   15aec:	ldreq	r0, [r0, #16]
   15af0:	subeq	r0, r0, r2
   15af4:	clzeq	r0, r0
   15af8:	lsreq	r0, r0, #5
   15afc:	movne	r0, #0
   15b00:	pop	{pc}		; (ldr pc, [sp], #4)
   15b04:	push	{r4, r5, r6, r7, lr}
   15b08:	mov	r5, r1
   15b0c:	ldm	r0, {ip, lr}
   15b10:	sub	sp, sp, #12
   15b14:	ldr	r3, [r0, #16]
   15b18:	cmp	ip, lr
   15b1c:	mov	r4, #0
   15b20:	ldr	r6, [r0, #8]
   15b24:	ldr	r7, [r0, #12]
   15b28:	bcs	15b6c <__assert_fail@plt+0x42a0>
   15b2c:	ldr	r2, [ip]
   15b30:	cmp	r2, #0
   15b34:	beq	15b60 <__assert_fail@plt+0x4294>
   15b38:	ldr	r2, [ip, #4]
   15b3c:	mov	r1, #1
   15b40:	cmp	r2, #0
   15b44:	beq	15b58 <__assert_fail@plt+0x428c>
   15b48:	ldr	r2, [r2, #4]
   15b4c:	add	r1, r1, #1
   15b50:	cmp	r2, #0
   15b54:	bne	15b48 <__assert_fail@plt+0x427c>
   15b58:	cmp	r4, r1
   15b5c:	movcc	r4, r1
   15b60:	add	ip, ip, #8
   15b64:	cmp	ip, lr
   15b68:	bcc	15b2c <__assert_fail@plt+0x4260>
   15b6c:	ldr	r2, [pc, #116]	; 15be8 <__assert_fail@plt+0x431c>
   15b70:	mov	r1, #1
   15b74:	mov	r0, r5
   15b78:	bl	11764 <__fprintf_chk@plt>
   15b7c:	mov	r3, r6
   15b80:	ldr	r2, [pc, #100]	; 15bec <__assert_fail@plt+0x4320>
   15b84:	mov	r1, #1
   15b88:	mov	r0, r5
   15b8c:	bl	11764 <__fprintf_chk@plt>
   15b90:	vmov	s15, r7
   15b94:	vldr	d5, [pc, #68]	; 15be0 <__assert_fail@plt+0x4314>
   15b98:	mov	r3, r7
   15b9c:	ldr	r2, [pc, #76]	; 15bf0 <__assert_fail@plt+0x4324>
   15ba0:	vcvt.f64.u32	d6, s15
   15ba4:	vmov	s15, r6
   15ba8:	mov	r1, #1
   15bac:	mov	r0, r5
   15bb0:	vcvt.f64.u32	d7, s15
   15bb4:	vmul.f64	d6, d6, d5
   15bb8:	vdiv.f64	d5, d6, d7
   15bbc:	vstr	d5, [sp]
   15bc0:	bl	11764 <__fprintf_chk@plt>
   15bc4:	mov	r3, r4
   15bc8:	mov	r0, r5
   15bcc:	ldr	r2, [pc, #32]	; 15bf4 <__assert_fail@plt+0x4328>
   15bd0:	mov	r1, #1
   15bd4:	add	sp, sp, #12
   15bd8:	pop	{r4, r5, r6, r7, lr}
   15bdc:	b	11764 <__fprintf_chk@plt>
   15be0:	andeq	r0, r0, r0
   15be4:	subsmi	r0, r9, r0
   15be8:	andeq	fp, r1, r4, lsr #17
   15bec:			; <UNDEFINED> instruction: 0x0001b8bc
   15bf0:	ldrdeq	fp, [r1], -r4
   15bf4:	strdeq	fp, [r1], -r8
   15bf8:	push	{r4, r5, r6, lr}
   15bfc:	mov	r6, r0
   15c00:	mov	r5, r1
   15c04:	bl	156e0 <__assert_fail@plt+0x3e14>
   15c08:	ldr	r3, [r0]
   15c0c:	cmp	r3, #0
   15c10:	movne	r4, r0
   15c14:	bne	15c20 <__assert_fail@plt+0x4354>
   15c18:	b	15c4c <__assert_fail@plt+0x4380>
   15c1c:	ldr	r3, [r4]
   15c20:	cmp	r5, r3
   15c24:	mov	r1, r3
   15c28:	mov	r0, r5
   15c2c:	beq	15c54 <__assert_fail@plt+0x4388>
   15c30:	ldr	r3, [r6, #28]
   15c34:	blx	r3
   15c38:	cmp	r0, #0
   15c3c:	bne	15c5c <__assert_fail@plt+0x4390>
   15c40:	ldr	r4, [r4, #4]
   15c44:	cmp	r4, #0
   15c48:	bne	15c1c <__assert_fail@plt+0x4350>
   15c4c:	mov	r0, #0
   15c50:	pop	{r4, r5, r6, pc}
   15c54:	mov	r0, r5
   15c58:	pop	{r4, r5, r6, pc}
   15c5c:	ldr	r0, [r4]
   15c60:	pop	{r4, r5, r6, pc}
   15c64:	ldr	r3, [r0, #16]
   15c68:	cmp	r3, #0
   15c6c:	beq	15ca0 <__assert_fail@plt+0x43d4>
   15c70:	ldr	r3, [r0]
   15c74:	ldr	r2, [r0, #4]
   15c78:	cmp	r3, r2
   15c7c:	bcc	15c90 <__assert_fail@plt+0x43c4>
   15c80:	b	15ca8 <__assert_fail@plt+0x43dc>
   15c84:	add	r3, r3, #8
   15c88:	cmp	r3, r2
   15c8c:	bcs	15ca8 <__assert_fail@plt+0x43dc>
   15c90:	ldr	r0, [r3]
   15c94:	cmp	r0, #0
   15c98:	beq	15c84 <__assert_fail@plt+0x43b8>
   15c9c:	bx	lr
   15ca0:	mov	r0, r3
   15ca4:	bx	lr
   15ca8:	push	{r4, lr}
   15cac:	bl	11878 <abort@plt>
   15cb0:	push	{r4, r5, r6, lr}
   15cb4:	mov	r5, r0
   15cb8:	mov	r4, r1
   15cbc:	bl	156e0 <__assert_fail@plt+0x3e14>
   15cc0:	mov	r2, r0
   15cc4:	mov	r3, r0
   15cc8:	b	15cd4 <__assert_fail@plt+0x4408>
   15ccc:	cmp	r3, #0
   15cd0:	beq	15ce8 <__assert_fail@plt+0x441c>
   15cd4:	ldm	r3, {r1, r3}
   15cd8:	cmp	r4, r1
   15cdc:	bne	15ccc <__assert_fail@plt+0x4400>
   15ce0:	cmp	r3, #0
   15ce4:	bne	15d10 <__assert_fail@plt+0x4444>
   15ce8:	ldr	r3, [r5, #4]
   15cec:	b	15cfc <__assert_fail@plt+0x4430>
   15cf0:	ldr	r0, [r2]
   15cf4:	cmp	r0, #0
   15cf8:	popne	{r4, r5, r6, pc}
   15cfc:	add	r2, r2, #8
   15d00:	cmp	r2, r3
   15d04:	bcc	15cf0 <__assert_fail@plt+0x4424>
   15d08:	mov	r0, #0
   15d0c:	pop	{r4, r5, r6, pc}
   15d10:	ldr	r0, [r3]
   15d14:	pop	{r4, r5, r6, pc}
   15d18:	push	{r4, r5, r6, lr}
   15d1c:	ldm	r0, {r5, lr}
   15d20:	cmp	r5, lr
   15d24:	bcs	15da8 <__assert_fail@plt+0x44dc>
   15d28:	add	r5, r5, #8
   15d2c:	mov	ip, #0
   15d30:	ldr	r3, [r5, #-8]
   15d34:	mov	r6, r5
   15d38:	cmp	r3, #0
   15d3c:	beq	15d88 <__assert_fail@plt+0x44bc>
   15d40:	cmp	r2, ip
   15d44:	bls	15d94 <__assert_fail@plt+0x44c8>
   15d48:	str	r3, [r1, ip, lsl #2]
   15d4c:	ldr	r3, [r5, #-4]
   15d50:	add	r4, ip, #1
   15d54:	cmp	r3, #0
   15d58:	add	lr, r1, ip, lsl #2
   15d5c:	beq	15d9c <__assert_fail@plt+0x44d0>
   15d60:	mov	ip, r4
   15d64:	cmp	r2, ip
   15d68:	beq	15d94 <__assert_fail@plt+0x44c8>
   15d6c:	ldr	r4, [r3]
   15d70:	add	ip, ip, #1
   15d74:	str	r4, [lr, #4]!
   15d78:	ldr	r3, [r3, #4]
   15d7c:	cmp	r3, #0
   15d80:	bne	15d64 <__assert_fail@plt+0x4498>
   15d84:	ldr	lr, [r0, #4]
   15d88:	cmp	lr, r6
   15d8c:	add	r5, r5, #8
   15d90:	bhi	15d30 <__assert_fail@plt+0x4464>
   15d94:	mov	r0, ip
   15d98:	pop	{r4, r5, r6, pc}
   15d9c:	ldr	lr, [r0, #4]
   15da0:	mov	ip, r4
   15da4:	b	15d88 <__assert_fail@plt+0x44bc>
   15da8:	mov	ip, #0
   15dac:	b	15d94 <__assert_fail@plt+0x44c8>
   15db0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15db4:	ldr	r3, [r0, #4]
   15db8:	ldr	r8, [r0]
   15dbc:	cmp	r8, r3
   15dc0:	bcs	15e24 <__assert_fail@plt+0x4558>
   15dc4:	mov	r7, r2
   15dc8:	mov	r6, r1
   15dcc:	mov	r9, r0
   15dd0:	mov	r5, #0
   15dd4:	ldr	r0, [r8]
   15dd8:	cmp	r0, #0
   15ddc:	beq	15e10 <__assert_fail@plt+0x4544>
   15de0:	mov	r4, r8
   15de4:	b	15dec <__assert_fail@plt+0x4520>
   15de8:	ldr	r0, [r4]
   15dec:	mov	r1, r7
   15df0:	blx	r6
   15df4:	cmp	r0, #0
   15df8:	beq	15e1c <__assert_fail@plt+0x4550>
   15dfc:	ldr	r4, [r4, #4]
   15e00:	add	r5, r5, #1
   15e04:	cmp	r4, #0
   15e08:	bne	15de8 <__assert_fail@plt+0x451c>
   15e0c:	ldr	r3, [r9, #4]
   15e10:	add	r8, r8, #8
   15e14:	cmp	r3, r8
   15e18:	bhi	15dd4 <__assert_fail@plt+0x4508>
   15e1c:	mov	r0, r5
   15e20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e24:	mov	r5, #0
   15e28:	b	15e1c <__assert_fail@plt+0x4550>
   15e2c:	push	{r4, r5, r6, lr}
   15e30:	mov	r4, r0
   15e34:	ldrb	r0, [r0]
   15e38:	cmp	r0, #0
   15e3c:	beq	15e6c <__assert_fail@plt+0x45a0>
   15e40:	mov	r5, r1
   15e44:	mov	r1, #0
   15e48:	rsb	r1, r1, r1, lsl #5
   15e4c:	add	r0, r1, r0
   15e50:	mov	r1, r5
   15e54:	bl	1aafc <lchmod@@Base+0x43cc>
   15e58:	ldrb	r0, [r4, #1]!
   15e5c:	cmp	r0, #0
   15e60:	bne	15e48 <__assert_fail@plt+0x457c>
   15e64:	mov	r0, r1
   15e68:	pop	{r4, r5, r6, pc}
   15e6c:	mov	r1, r0
   15e70:	b	15e64 <__assert_fail@plt+0x4598>
   15e74:	push	{lr}		; (str lr, [sp, #-4]!)
   15e78:	mov	ip, r0
   15e7c:	ldr	lr, [pc, #16]	; 15e94 <__assert_fail@plt+0x45c8>
   15e80:	ldm	lr!, {r0, r1, r2, r3}
   15e84:	ldr	lr, [lr]
   15e88:	stmia	ip!, {r0, r1, r2, r3}
   15e8c:	str	lr, [ip]
   15e90:	pop	{pc}		; (ldr pc, [sp], #4)
   15e94:	muleq	r1, r0, r8
   15e98:	push	{r4, r5, r6, r7, lr}
   15e9c:	sub	sp, sp, #12
   15ea0:	cmp	r2, #0
   15ea4:	str	r0, [sp, #4]
   15ea8:	ldr	r6, [pc, #304]	; 15fe0 <__assert_fail@plt+0x4714>
   15eac:	mov	r0, #40	; 0x28
   15eb0:	movne	r6, r2
   15eb4:	cmp	r3, #0
   15eb8:	ldr	r7, [pc, #292]	; 15fe4 <__assert_fail@plt+0x4718>
   15ebc:	mov	r5, r1
   15ec0:	movne	r7, r3
   15ec4:	bl	1a0b4 <lchmod@@Base+0x3984>
   15ec8:	subs	r4, r0, #0
   15ecc:	beq	15f64 <__assert_fail@plt+0x4698>
   15ed0:	cmp	r5, #0
   15ed4:	beq	15fb8 <__assert_fail@plt+0x46ec>
   15ed8:	mov	r0, r4
   15edc:	str	r5, [r0, #20]!
   15ee0:	bl	15810 <__assert_fail@plt+0x3f44>
   15ee4:	cmp	r0, #0
   15ee8:	beq	15fa0 <__assert_fail@plt+0x46d4>
   15eec:	ldrb	r3, [r5, #16]
   15ef0:	cmp	r3, #0
   15ef4:	beq	15f70 <__assert_fail@plt+0x46a4>
   15ef8:	ldr	r0, [sp, #4]
   15efc:	bl	15618 <__assert_fail@plt+0x3d4c>
   15f00:	lsrs	r2, r0, #30
   15f04:	movne	r5, #1
   15f08:	moveq	r5, #0
   15f0c:	tst	r0, #536870912	; 0x20000000
   15f10:	bne	15f98 <__assert_fail@plt+0x46cc>
   15f14:	cmp	r5, #0
   15f18:	bne	15f98 <__assert_fail@plt+0x46cc>
   15f1c:	cmp	r0, #0
   15f20:	str	r0, [r4, #8]
   15f24:	beq	15fa0 <__assert_fail@plt+0x46d4>
   15f28:	mov	r1, #8
   15f2c:	bl	1a06c <lchmod@@Base+0x393c>
   15f30:	cmp	r0, #0
   15f34:	str	r0, [r4]
   15f38:	beq	15fa0 <__assert_fail@plt+0x46d4>
   15f3c:	ldr	r3, [r4, #8]
   15f40:	str	r5, [r4, #12]
   15f44:	str	r5, [r4, #16]
   15f48:	add	r0, r0, r3, lsl #3
   15f4c:	ldr	r3, [sp, #32]
   15f50:	str	r6, [r4, #24]
   15f54:	str	r7, [r4, #28]
   15f58:	str	r3, [r4, #32]
   15f5c:	str	r5, [r4, #36]	; 0x24
   15f60:	str	r0, [r4, #4]
   15f64:	mov	r0, r4
   15f68:	add	sp, sp, #12
   15f6c:	pop	{r4, r5, r6, r7, pc}
   15f70:	vldr	s12, [r5, #8]
   15f74:	vldr	s15, [sp, #4]
   15f78:	vldr	s14, [pc, #88]	; 15fd8 <__assert_fail@plt+0x470c>
   15f7c:	vcvt.f32.u32	s13, s15
   15f80:	vdiv.f32	s15, s13, s12
   15f84:	vcmpe.f32	s15, s14
   15f88:	vmrs	APSR_nzcv, fpscr
   15f8c:	vcvtlt.u32.f32	s15, s15
   15f90:	vstrlt	s15, [sp, #4]
   15f94:	blt	15ef8 <__assert_fail@plt+0x462c>
   15f98:	mov	r3, #0
   15f9c:	str	r3, [r4, #8]
   15fa0:	mov	r0, r4
   15fa4:	bl	1349c <__assert_fail@plt+0x1bd0>
   15fa8:	mov	r4, #0
   15fac:	mov	r0, r4
   15fb0:	add	sp, sp, #12
   15fb4:	pop	{r4, r5, r6, r7, pc}
   15fb8:	ldr	r3, [pc, #40]	; 15fe8 <__assert_fail@plt+0x471c>
   15fbc:	mov	r0, r4
   15fc0:	str	r3, [r0, #20]!
   15fc4:	bl	15810 <__assert_fail@plt+0x3f44>
   15fc8:	cmp	r0, #0
   15fcc:	vldrne	s12, [pc, #8]	; 15fdc <__assert_fail@plt+0x4710>
   15fd0:	bne	15f74 <__assert_fail@plt+0x46a8>
   15fd4:	b	15fa0 <__assert_fail@plt+0x46d4>
   15fd8:	svcmi	0x00800000
   15fdc:	svccc	0x004ccccd
   15fe0:			; <UNDEFINED> instruction: 0x000156bc
   15fe4:	ldrdeq	r5, [r1], -r0
   15fe8:	muleq	r1, r0, r8
   15fec:	push	{r4, r5, r6, r7, r8, lr}
   15ff0:	mov	r5, r0
   15ff4:	ldr	r7, [r0]
   15ff8:	ldr	r3, [r0, #4]
   15ffc:	cmp	r7, r3
   16000:	addcc	r7, r7, #8
   16004:	movcc	r6, #0
   16008:	bcs	16084 <__assert_fail@plt+0x47b8>
   1600c:	ldr	r2, [r7, #-8]
   16010:	mov	r8, r7
   16014:	cmp	r2, #0
   16018:	beq	16078 <__assert_fail@plt+0x47ac>
   1601c:	ldr	r4, [r7, #-4]
   16020:	ldr	r2, [r5, #32]
   16024:	cmp	r4, #0
   16028:	beq	1605c <__assert_fail@plt+0x4790>
   1602c:	cmp	r2, #0
   16030:	beq	16040 <__assert_fail@plt+0x4774>
   16034:	ldr	r0, [r4]
   16038:	blx	r2
   1603c:	ldr	r2, [r5, #32]
   16040:	ldr	r3, [r4, #4]
   16044:	ldr	r1, [r5, #36]	; 0x24
   16048:	str	r6, [r4]
   1604c:	str	r1, [r4, #4]
   16050:	str	r4, [r5, #36]	; 0x24
   16054:	subs	r4, r3, #0
   16058:	bne	1602c <__assert_fail@plt+0x4760>
   1605c:	cmp	r2, #0
   16060:	beq	1606c <__assert_fail@plt+0x47a0>
   16064:	ldr	r0, [r7, #-8]
   16068:	blx	r2
   1606c:	str	r6, [r7, #-8]
   16070:	str	r6, [r7, #-4]
   16074:	ldr	r3, [r5, #4]
   16078:	cmp	r3, r8
   1607c:	add	r7, r7, #8
   16080:	bhi	1600c <__assert_fail@plt+0x4740>
   16084:	mov	r3, #0
   16088:	str	r3, [r5, #12]
   1608c:	str	r3, [r5, #16]
   16090:	pop	{r4, r5, r6, r7, r8, pc}
   16094:	ldr	r3, [r0, #32]
   16098:	push	{r4, r5, r6, lr}
   1609c:	cmp	r3, #0
   160a0:	mov	r5, r0
   160a4:	beq	16104 <__assert_fail@plt+0x4838>
   160a8:	ldr	r3, [r0, #16]
   160ac:	cmp	r3, #0
   160b0:	beq	16104 <__assert_fail@plt+0x4838>
   160b4:	ldr	r6, [r0]
   160b8:	ldr	r3, [r0, #4]
   160bc:	cmp	r6, r3
   160c0:	bcs	16140 <__assert_fail@plt+0x4874>
   160c4:	ldr	r0, [r6]
   160c8:	cmp	r0, #0
   160cc:	movne	r4, r6
   160d0:	bne	160dc <__assert_fail@plt+0x4810>
   160d4:	b	160f4 <__assert_fail@plt+0x4828>
   160d8:	ldr	r0, [r4]
   160dc:	ldr	r3, [r5, #32]
   160e0:	blx	r3
   160e4:	ldr	r4, [r4, #4]
   160e8:	cmp	r4, #0
   160ec:	bne	160d8 <__assert_fail@plt+0x480c>
   160f0:	ldr	r3, [r5, #4]
   160f4:	add	r6, r6, #8
   160f8:	cmp	r3, r6
   160fc:	bhi	160c4 <__assert_fail@plt+0x47f8>
   16100:	b	16108 <__assert_fail@plt+0x483c>
   16104:	ldr	r3, [r5, #4]
   16108:	ldr	r6, [r5]
   1610c:	cmp	r3, r6
   16110:	bls	16140 <__assert_fail@plt+0x4874>
   16114:	ldr	r0, [r6, #4]
   16118:	cmp	r0, #0
   1611c:	beq	16134 <__assert_fail@plt+0x4868>
   16120:	ldr	r4, [r0, #4]
   16124:	bl	1349c <__assert_fail@plt+0x1bd0>
   16128:	subs	r0, r4, #0
   1612c:	bne	16120 <__assert_fail@plt+0x4854>
   16130:	ldr	r3, [r5, #4]
   16134:	add	r6, r6, #8
   16138:	cmp	r3, r6
   1613c:	bhi	16114 <__assert_fail@plt+0x4848>
   16140:	ldr	r0, [r5, #36]	; 0x24
   16144:	cmp	r0, #0
   16148:	beq	1615c <__assert_fail@plt+0x4890>
   1614c:	ldr	r4, [r0, #4]
   16150:	bl	1349c <__assert_fail@plt+0x1bd0>
   16154:	subs	r0, r4, #0
   16158:	bne	1614c <__assert_fail@plt+0x4880>
   1615c:	ldr	r0, [r5]
   16160:	bl	1349c <__assert_fail@plt+0x1bd0>
   16164:	mov	r0, r5
   16168:	pop	{r4, r5, r6, lr}
   1616c:	b	1349c <__assert_fail@plt+0x1bd0>
   16170:	ldr	r3, [r0, #20]
   16174:	push	{r4, r5, r6, r7, lr}
   16178:	sub	sp, sp, #52	; 0x34
   1617c:	ldrb	r2, [r3, #16]
   16180:	mov	r5, r0
   16184:	str	r1, [sp, #4]
   16188:	cmp	r2, #0
   1618c:	bne	161b8 <__assert_fail@plt+0x48ec>
   16190:	vmov	s15, r1
   16194:	vldr	s13, [r3, #8]
   16198:	vldr	s14, [pc, #352]	; 16300 <__assert_fail@plt+0x4a34>
   1619c:	vcvt.f32.u32	s12, s15
   161a0:	vdiv.f32	s15, s12, s13
   161a4:	vcmpe.f32	s15, s14
   161a8:	vmrs	APSR_nzcv, fpscr
   161ac:	bge	162bc <__assert_fail@plt+0x49f0>
   161b0:	vcvt.u32.f32	s15, s15
   161b4:	vstr	s15, [sp, #4]
   161b8:	ldr	r0, [sp, #4]
   161bc:	bl	15618 <__assert_fail@plt+0x3d4c>
   161c0:	lsrs	r3, r0, #30
   161c4:	movne	r2, #1
   161c8:	moveq	r2, #0
   161cc:	tst	r0, #536870912	; 0x20000000
   161d0:	movne	r2, #1
   161d4:	cmp	r0, #0
   161d8:	movne	r4, r2
   161dc:	orreq	r4, r2, #1
   161e0:	cmp	r4, #0
   161e4:	mov	r6, r0
   161e8:	bne	162bc <__assert_fail@plt+0x49f0>
   161ec:	ldr	r3, [r5, #8]
   161f0:	cmp	r3, r0
   161f4:	beq	162ac <__assert_fail@plt+0x49e0>
   161f8:	mov	r1, #8
   161fc:	bl	1a06c <lchmod@@Base+0x393c>
   16200:	cmp	r0, #0
   16204:	str	r0, [sp, #8]
   16208:	beq	162bc <__assert_fail@plt+0x49f0>
   1620c:	ldr	r1, [r5, #24]
   16210:	ldr	r7, [r5, #20]
   16214:	ldr	lr, [r5, #28]
   16218:	ldr	ip, [r5, #32]
   1621c:	add	r0, r0, r6, lsl #3
   16220:	ldr	r3, [r5, #36]	; 0x24
   16224:	str	r0, [sp, #12]
   16228:	mov	r2, r4
   1622c:	str	r1, [sp, #32]
   16230:	add	r0, sp, #8
   16234:	mov	r1, r5
   16238:	str	r4, [sp, #20]
   1623c:	str	r4, [sp, #24]
   16240:	str	r6, [sp, #16]
   16244:	str	r7, [sp, #28]
   16248:	str	lr, [sp, #36]	; 0x24
   1624c:	str	ip, [sp, #40]	; 0x28
   16250:	str	r3, [sp, #44]	; 0x2c
   16254:	bl	158c0 <__assert_fail@plt+0x3ff4>
   16258:	subs	r4, r0, #0
   1625c:	bne	162cc <__assert_fail@plt+0x4a00>
   16260:	ldr	r3, [sp, #44]	; 0x2c
   16264:	mov	r2, #1
   16268:	str	r3, [r5, #36]	; 0x24
   1626c:	add	r1, sp, #8
   16270:	mov	r0, r5
   16274:	bl	158c0 <__assert_fail@plt+0x3ff4>
   16278:	cmp	r0, #0
   1627c:	beq	162fc <__assert_fail@plt+0x4a30>
   16280:	add	r1, sp, #8
   16284:	mov	r0, r5
   16288:	mov	r2, r4
   1628c:	bl	158c0 <__assert_fail@plt+0x3ff4>
   16290:	cmp	r0, #0
   16294:	beq	162fc <__assert_fail@plt+0x4a30>
   16298:	ldr	r0, [sp, #8]
   1629c:	bl	1349c <__assert_fail@plt+0x1bd0>
   162a0:	mov	r0, r4
   162a4:	add	sp, sp, #52	; 0x34
   162a8:	pop	{r4, r5, r6, r7, pc}
   162ac:	mov	r4, #1
   162b0:	mov	r0, r4
   162b4:	add	sp, sp, #52	; 0x34
   162b8:	pop	{r4, r5, r6, r7, pc}
   162bc:	mov	r4, #0
   162c0:	mov	r0, r4
   162c4:	add	sp, sp, #52	; 0x34
   162c8:	pop	{r4, r5, r6, r7, pc}
   162cc:	ldr	r0, [r5]
   162d0:	bl	1349c <__assert_fail@plt+0x1bd0>
   162d4:	add	r0, sp, #12
   162d8:	ldr	ip, [sp, #8]
   162dc:	ldm	r0, {r0, r1, r2}
   162e0:	ldr	r3, [sp, #44]	; 0x2c
   162e4:	str	ip, [r5]
   162e8:	stmib	r5, {r0, r1, r2}
   162ec:	mov	r0, r4
   162f0:	str	r3, [r5, #36]	; 0x24
   162f4:	add	sp, sp, #52	; 0x34
   162f8:	pop	{r4, r5, r6, r7, pc}
   162fc:	bl	11878 <abort@plt>
   16300:	svcmi	0x00800000
   16304:	push	{r4, r5, r6, lr}
   16308:	subs	r6, r1, #0
   1630c:	sub	sp, sp, #8
   16310:	beq	16444 <__assert_fail@plt+0x4b78>
   16314:	mov	r4, r2
   16318:	mov	r3, #0
   1631c:	add	r2, sp, #4
   16320:	mov	r5, r0
   16324:	bl	15714 <__assert_fail@plt+0x3e48>
   16328:	cmp	r0, #0
   1632c:	beq	16348 <__assert_fail@plt+0x4a7c>
   16330:	cmp	r4, #0
   16334:	moveq	r0, r4
   16338:	strne	r0, [r4]
   1633c:	movne	r0, #0
   16340:	add	sp, sp, #8
   16344:	pop	{r4, r5, r6, pc}
   16348:	vldr	s15, [r5, #8]
   1634c:	ldr	r3, [r5, #20]
   16350:	vldr	s14, [r5, #12]
   16354:	vcvt.f32.u32	s15, s15
   16358:	vldr	s13, [r3, #8]
   1635c:	vcvt.f32.u32	s14, s14
   16360:	vmul.f32	s15, s15, s13
   16364:	vcmpe.f32	s14, s15
   16368:	vmrs	APSR_nzcv, fpscr
   1636c:	bgt	163bc <__assert_fail@plt+0x4af0>
   16370:	ldr	r2, [sp, #4]
   16374:	ldr	r3, [r2]
   16378:	cmp	r3, #0
   1637c:	beq	16448 <__assert_fail@plt+0x4b7c>
   16380:	ldr	r3, [r5, #36]	; 0x24
   16384:	cmp	r3, #0
   16388:	beq	1646c <__assert_fail@plt+0x4ba0>
   1638c:	ldr	r1, [r3, #4]
   16390:	str	r1, [r5, #36]	; 0x24
   16394:	ldr	r1, [r5, #16]
   16398:	ldr	r0, [r2, #4]
   1639c:	add	r1, r1, #1
   163a0:	str	r0, [r3, #4]
   163a4:	str	r6, [r3]
   163a8:	mov	r0, #1
   163ac:	str	r3, [r2, #4]
   163b0:	str	r1, [r5, #16]
   163b4:	add	sp, sp, #8
   163b8:	pop	{r4, r5, r6, pc}
   163bc:	add	r0, r5, #20
   163c0:	bl	15810 <__assert_fail@plt+0x3f44>
   163c4:	vldr	s15, [r5, #8]
   163c8:	ldr	r3, [r5, #20]
   163cc:	vldr	s14, [r5, #12]
   163d0:	vcvt.f32.u32	s15, s15
   163d4:	vldr	s13, [r3, #8]
   163d8:	vcvt.f32.u32	s14, s14
   163dc:	vmul.f32	s12, s13, s15
   163e0:	vcmpe.f32	s14, s12
   163e4:	vmrs	APSR_nzcv, fpscr
   163e8:	ble	16370 <__assert_fail@plt+0x4aa4>
   163ec:	vldr	s14, [r3, #12]
   163f0:	ldrb	r2, [r3, #16]
   163f4:	vmul.f32	s15, s15, s14
   163f8:	cmp	r2, #0
   163fc:	vldr	s14, [pc, #132]	; 16488 <__assert_fail@plt+0x4bbc>
   16400:	vmuleq.f32	s15, s15, s13
   16404:	vcmpe.f32	s15, s14
   16408:	vmrs	APSR_nzcv, fpscr
   1640c:	bge	16480 <__assert_fail@plt+0x4bb4>
   16410:	vcvt.u32.f32	s15, s15
   16414:	mov	r0, r5
   16418:	vmov	r1, s15
   1641c:	bl	16170 <__assert_fail@plt+0x48a4>
   16420:	cmp	r0, #0
   16424:	beq	16480 <__assert_fail@plt+0x4bb4>
   16428:	add	r2, sp, #4
   1642c:	mov	r3, #0
   16430:	mov	r1, r6
   16434:	mov	r0, r5
   16438:	bl	15714 <__assert_fail@plt+0x3e48>
   1643c:	cmp	r0, #0
   16440:	beq	16370 <__assert_fail@plt+0x4aa4>
   16444:	bl	11878 <abort@plt>
   16448:	ldr	r1, [r5, #16]
   1644c:	ldr	r3, [r5, #12]
   16450:	add	r1, r1, #1
   16454:	add	r3, r3, #1
   16458:	str	r6, [r2]
   1645c:	mov	r0, #1
   16460:	str	r1, [r5, #16]
   16464:	str	r3, [r5, #12]
   16468:	b	16340 <__assert_fail@plt+0x4a74>
   1646c:	mov	r0, #8
   16470:	bl	1a0b4 <lchmod@@Base+0x3984>
   16474:	subs	r3, r0, #0
   16478:	ldrne	r2, [sp, #4]
   1647c:	bne	16394 <__assert_fail@plt+0x4ac8>
   16480:	mvn	r0, #0
   16484:	b	16340 <__assert_fail@plt+0x4a74>
   16488:	svcmi	0x00800000
   1648c:	push	{r4, lr}
   16490:	sub	sp, sp, #8
   16494:	add	r2, sp, #4
   16498:	mov	r4, r1
   1649c:	bl	16304 <__assert_fail@plt+0x4a38>
   164a0:	cmn	r0, #1
   164a4:	beq	164bc <__assert_fail@plt+0x4bf0>
   164a8:	cmp	r0, #0
   164ac:	movne	r0, r4
   164b0:	ldreq	r0, [sp, #4]
   164b4:	add	sp, sp, #8
   164b8:	pop	{r4, pc}
   164bc:	mov	r0, #0
   164c0:	b	164b4 <__assert_fail@plt+0x4be8>
   164c4:	push	{r4, r5, r6, lr}
   164c8:	sub	sp, sp, #8
   164cc:	mov	r3, #1
   164d0:	add	r2, sp, #4
   164d4:	mov	r4, r0
   164d8:	bl	15714 <__assert_fail@plt+0x3e48>
   164dc:	subs	r5, r0, #0
   164e0:	beq	16500 <__assert_fail@plt+0x4c34>
   164e4:	ldr	r2, [sp, #4]
   164e8:	ldr	r3, [r4, #16]
   164ec:	ldr	r2, [r2]
   164f0:	sub	r3, r3, #1
   164f4:	cmp	r2, #0
   164f8:	str	r3, [r4, #16]
   164fc:	beq	1650c <__assert_fail@plt+0x4c40>
   16500:	mov	r0, r5
   16504:	add	sp, sp, #8
   16508:	pop	{r4, r5, r6, pc}
   1650c:	vldr	s15, [r4, #8]
   16510:	ldr	r3, [r4, #12]
   16514:	ldr	r2, [r4, #20]
   16518:	sub	r3, r3, #1
   1651c:	vcvt.f32.u32	s14, s15
   16520:	vldr	s13, [r2]
   16524:	vmov	s15, r3
   16528:	str	r3, [r4, #12]
   1652c:	vcvt.f32.u32	s15, s15
   16530:	vmul.f32	s14, s14, s13
   16534:	vcmpe.f32	s15, s14
   16538:	vmrs	APSR_nzcv, fpscr
   1653c:	bpl	16500 <__assert_fail@plt+0x4c34>
   16540:	add	r0, r4, #20
   16544:	bl	15810 <__assert_fail@plt+0x3f44>
   16548:	vldr	s15, [r4, #8]
   1654c:	ldr	r3, [r4, #20]
   16550:	vldr	s13, [r4, #12]
   16554:	vcvt.f32.u32	s15, s15
   16558:	vldr	s14, [r3]
   1655c:	vcvt.f32.u32	s13, s13
   16560:	vmul.f32	s14, s15, s14
   16564:	vcmpe.f32	s13, s14
   16568:	vmrs	APSR_nzcv, fpscr
   1656c:	bpl	16500 <__assert_fail@plt+0x4c34>
   16570:	ldrb	r2, [r3, #16]
   16574:	mov	r0, r4
   16578:	cmp	r2, #0
   1657c:	vldreq	s13, [r3, #4]
   16580:	vldrne	s14, [r3, #4]
   16584:	vldreq	s14, [r3, #8]
   16588:	vmuleq.f32	s15, s15, s13
   1658c:	vmul.f32	s15, s15, s14
   16590:	vcvt.u32.f32	s15, s15
   16594:	vmov	r1, s15
   16598:	bl	16170 <__assert_fail@plt+0x48a4>
   1659c:	cmp	r0, #0
   165a0:	bne	16500 <__assert_fail@plt+0x4c34>
   165a4:	ldr	r0, [r4, #36]	; 0x24
   165a8:	cmp	r0, #0
   165ac:	beq	165c0 <__assert_fail@plt+0x4cf4>
   165b0:	ldr	r6, [r0, #4]
   165b4:	bl	1349c <__assert_fail@plt+0x1bd0>
   165b8:	subs	r0, r6, #0
   165bc:	bne	165b0 <__assert_fail@plt+0x4ce4>
   165c0:	mov	r3, #0
   165c4:	str	r3, [r4, #36]	; 0x24
   165c8:	b	16500 <__assert_fail@plt+0x4c34>
   165cc:	b	164c4 <__assert_fail@plt+0x4bf8>
   165d0:	push	{r4, r5, r6, lr}
   165d4:	mov	r4, r0
   165d8:	ldr	r0, [r0]
   165dc:	mov	r6, r1
   165e0:	bl	1a700 <lchmod@@Base+0x3fd0>
   165e4:	ldrd	r4, [r4, #8]
   165e8:	mov	r2, r6
   165ec:	mov	r3, #0
   165f0:	eor	r4, r4, r0
   165f4:	mov	r0, r4
   165f8:	mov	r1, r5
   165fc:	bl	1ad5c <lchmod@@Base+0x462c>
   16600:	mov	r0, r2
   16604:	pop	{r4, r5, r6, pc}
   16608:	ldrd	r2, [r1, #8]
   1660c:	push	{r4, r5, r6, lr}
   16610:	ldrd	r4, [r0, #8]
   16614:	cmp	r5, r3
   16618:	cmpeq	r4, r2
   1661c:	beq	16628 <__assert_fail@plt+0x4d5c>
   16620:	mov	r0, #0
   16624:	pop	{r4, r5, r6, pc}
   16628:	ldrd	r4, [r0, #16]
   1662c:	ldrd	r2, [r1, #16]
   16630:	cmp	r5, r3
   16634:	cmpeq	r4, r2
   16638:	bne	16620 <__assert_fail@plt+0x4d54>
   1663c:	ldr	r1, [r1]
   16640:	ldr	r0, [r0]
   16644:	bl	114d0 <strcmp@plt>
   16648:	clz	r0, r0
   1664c:	lsr	r0, r0, #5
   16650:	pop	{r4, r5, r6, pc}
   16654:	push	{r4, lr}
   16658:	mov	r4, r0
   1665c:	ldr	r0, [r0]
   16660:	bl	1349c <__assert_fail@plt+0x1bd0>
   16664:	mov	r0, r4
   16668:	pop	{r4, lr}
   1666c:	b	1349c <__assert_fail@plt+0x1bd0>
   16670:	mov	r3, #0
   16674:	mov	r2, #1
   16678:	str	r1, [r0]
   1667c:	str	r1, [r0, #4]
   16680:	str	r1, [r0, #8]
   16684:	str	r1, [r0, #12]
   16688:	str	r1, [r0, #16]
   1668c:	strb	r2, [r0, #28]
   16690:	str	r3, [r0, #20]
   16694:	str	r3, [r0, #24]
   16698:	bx	lr
   1669c:	ldrb	r0, [r0, #28]
   166a0:	bx	lr
   166a4:	ldrb	ip, [r0, #28]
   166a8:	ldr	r3, [r0, #20]
   166ac:	mov	r2, r0
   166b0:	eor	ip, ip, #1
   166b4:	add	r3, ip, r3
   166b8:	and	r3, r3, #3
   166bc:	ldr	r0, [r0, r3, lsl #2]
   166c0:	str	r1, [r2, r3, lsl #2]
   166c4:	ldr	r1, [r2, #24]
   166c8:	str	r3, [r2, #20]
   166cc:	cmp	r3, r1
   166d0:	addeq	r3, ip, r3
   166d4:	andeq	r3, r3, #3
   166d8:	streq	r3, [r2, #24]
   166dc:	mov	r3, #0
   166e0:	strb	r3, [r2, #28]
   166e4:	bx	lr
   166e8:	ldrb	r3, [r0, #28]
   166ec:	cmp	r3, #0
   166f0:	bne	16728 <__assert_fail@plt+0x4e5c>
   166f4:	ldr	r3, [r0, #20]
   166f8:	ldr	r1, [r0, #16]
   166fc:	ldr	r2, [r0, r3, lsl #2]
   16700:	str	r1, [r0, r3, lsl #2]
   16704:	ldr	r1, [r0, #24]
   16708:	cmp	r3, r1
   1670c:	addne	r3, r3, #3
   16710:	moveq	r3, #1
   16714:	andne	r3, r3, #3
   16718:	strbeq	r3, [r0, #28]
   1671c:	strne	r3, [r0, #20]
   16720:	mov	r0, r2
   16724:	bx	lr
   16728:	push	{r4, lr}
   1672c:	bl	11878 <abort@plt>

00016730 <lchmod@@Base>:
   16730:	push	{r4, r5, r6, r7, r8, lr}
   16734:	mov	r6, r1
   16738:	sub	sp, sp, #144	; 0x90
   1673c:	mov	r1, #2654208	; 0x288000
   16740:	mov	r8, r0
   16744:	bl	11644 <open64@plt>
   16748:	subs	r4, r0, #0
   1674c:	movlt	r5, r4
   16750:	blt	167d8 <lchmod@@Base+0xa8>
   16754:	mov	r3, #4096	; 0x1000
   16758:	str	r3, [sp]
   1675c:	ldr	r2, [pc, #208]	; 16834 <lchmod@@Base+0x104>
   16760:	add	r3, sp, #40	; 0x28
   16764:	mov	r1, r4
   16768:	mov	r0, #3
   1676c:	bl	115c0 <__fxstatat64@plt>
   16770:	cmp	r0, #0
   16774:	bne	167f8 <lchmod@@Base+0xc8>
   16778:	ldr	r3, [sp, #56]	; 0x38
   1677c:	and	r3, r3, #61440	; 0xf000
   16780:	cmp	r3, #40960	; 0xa000
   16784:	beq	16818 <lchmod@@Base+0xe8>
   16788:	ldr	r3, [pc, #168]	; 16838 <lchmod@@Base+0x108>
   1678c:	mov	r2, #26
   16790:	str	r4, [sp]
   16794:	mov	r1, #1
   16798:	add	r0, sp, #12
   1679c:	bl	11728 <__sprintf_chk@plt>
   167a0:	mov	r1, r6
   167a4:	add	r0, sp, #12
   167a8:	bl	11848 <chmod@plt>
   167ac:	mov	r5, r0
   167b0:	bl	1171c <__errno_location@plt>
   167b4:	mov	r7, r0
   167b8:	mov	r0, r4
   167bc:	ldr	r4, [r7]
   167c0:	bl	11884 <close@plt>
   167c4:	cmp	r5, #0
   167c8:	beq	167d8 <lchmod@@Base+0xa8>
   167cc:	cmp	r4, #2
   167d0:	strne	r4, [r7]
   167d4:	beq	167e4 <lchmod@@Base+0xb4>
   167d8:	mov	r0, r5
   167dc:	add	sp, sp, #144	; 0x90
   167e0:	pop	{r4, r5, r6, r7, r8, pc}
   167e4:	mov	r1, r6
   167e8:	mov	r0, r8
   167ec:	bl	11848 <chmod@plt>
   167f0:	mov	r5, r0
   167f4:	b	167d8 <lchmod@@Base+0xa8>
   167f8:	bl	1171c <__errno_location@plt>
   167fc:	mvn	r5, #0
   16800:	mov	r6, r0
   16804:	mov	r0, r4
   16808:	ldr	r4, [r6]
   1680c:	bl	11884 <close@plt>
   16810:	str	r4, [r6]
   16814:	b	167d8 <lchmod@@Base+0xa8>
   16818:	mov	r0, r4
   1681c:	bl	11884 <close@plt>
   16820:	bl	1171c <__errno_location@plt>
   16824:	mov	r3, #95	; 0x5f
   16828:	mvn	r5, #0
   1682c:	str	r3, [r0]
   16830:	b	167d8 <lchmod@@Base+0xa8>
   16834:	strdeq	fp, [r1], -r4
   16838:	andeq	fp, r1, r0, lsl r9
   1683c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16840:	mov	r4, r0
   16844:	ldrb	r3, [r0]
   16848:	sub	r2, r3, #48	; 0x30
   1684c:	cmp	r2, #7
   16850:	bls	168e8 <lchmod@@Base+0x1b8>
   16854:	cmp	r3, #0
   16858:	moveq	r0, #1
   1685c:	beq	1688c <lchmod@@Base+0x15c>
   16860:	mov	r1, r4
   16864:	mov	r0, #1
   16868:	and	r2, r3, #239	; 0xef
   1686c:	cmp	r3, #43	; 0x2b
   16870:	cmpne	r2, #45	; 0x2d
   16874:	ldrb	r3, [r1, #1]!
   16878:	moveq	r2, #1
   1687c:	movne	r2, #0
   16880:	cmp	r3, #0
   16884:	add	r0, r0, r2
   16888:	bne	16868 <lchmod@@Base+0x138>
   1688c:	mov	r1, #16
   16890:	ldr	r6, [pc, #816]	; 16bc8 <lchmod@@Base+0x498>
   16894:	bl	1950c <lchmod@@Base+0x2ddc>
   16898:	mov	r8, #3
   1689c:	mov	ip, #0
   168a0:	mov	r9, #1
   168a4:	mov	sl, #2
   168a8:	mov	fp, #0
   168ac:	ldrb	r5, [r4]
   168b0:	mov	r1, r4
   168b4:	add	r4, r4, #1
   168b8:	cmp	r5, #97	; 0x61
   168bc:	beq	16b30 <lchmod@@Base+0x400>
   168c0:	bls	16930 <lchmod@@Base+0x200>
   168c4:	cmp	r5, #111	; 0x6f
   168c8:	beq	16b38 <lchmod@@Base+0x408>
   168cc:	cmp	r5, #117	; 0x75
   168d0:	beq	16928 <lchmod@@Base+0x1f8>
   168d4:	cmp	r5, #103	; 0x67
   168d8:	beq	16b44 <lchmod@@Base+0x414>
   168dc:	bl	1349c <__assert_fail@plt+0x1bd0>
   168e0:	mov	r0, #0
   168e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168e8:	add	r1, r0, #1
   168ec:	mov	r5, #0
   168f0:	ldr	ip, [pc, #720]	; 16bc8 <lchmod@@Base+0x498>
   168f4:	b	1690c <lchmod@@Base+0x1dc>
   168f8:	ldrb	r3, [r2], #1
   168fc:	sub	r0, r3, #48	; 0x30
   16900:	cmp	r0, #7
   16904:	bhi	16b50 <lchmod@@Base+0x420>
   16908:	mov	r1, r2
   1690c:	add	r5, r3, r5, lsl #3
   16910:	sub	r5, r5, #48	; 0x30
   16914:	cmp	r5, ip
   16918:	mov	r2, r1
   1691c:	bls	168f8 <lchmod@@Base+0x1c8>
   16920:	mov	r0, #0
   16924:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16928:	orr	fp, fp, #2496	; 0x9c0
   1692c:	b	168ac <lchmod@@Base+0x17c>
   16930:	cmp	r5, #45	; 0x2d
   16934:	beq	16948 <lchmod@@Base+0x218>
   16938:	cmp	r5, #61	; 0x3d
   1693c:	beq	16948 <lchmod@@Base+0x218>
   16940:	cmp	r5, #43	; 0x2b
   16944:	bne	168dc <lchmod@@Base+0x1ac>
   16948:	add	r7, ip, #1
   1694c:	add	ip, r0, ip, lsl #4
   16950:	b	169b0 <lchmod@@Base+0x280>
   16954:	cmp	r3, #111	; 0x6f
   16958:	beq	16b1c <lchmod@@Base+0x3ec>
   1695c:	cmp	r3, #117	; 0x75
   16960:	bne	16a48 <lchmod@@Base+0x318>
   16964:	ldrb	r3, [r1, #2]
   16968:	mov	r4, r8
   1696c:	add	r1, r1, #2
   16970:	mov	r2, #448	; 0x1c0
   16974:	cmp	fp, #0
   16978:	strb	r5, [ip]
   1697c:	str	r2, [ip, #8]
   16980:	mov	r5, r3
   16984:	andne	r2, r2, fp
   16988:	strb	r4, [ip, #1]
   1698c:	str	fp, [ip, #4]
   16990:	and	lr, r3, #239	; 0xef
   16994:	cmp	r3, #43	; 0x2b
   16998:	cmpne	lr, #45	; 0x2d
   1699c:	str	r2, [ip, #12]
   169a0:	add	r2, r7, #1
   169a4:	add	ip, ip, #16
   169a8:	bne	16ba4 <lchmod@@Base+0x474>
   169ac:	mov	r7, r2
   169b0:	ldrb	r3, [r1, #1]
   169b4:	add	r2, r1, #1
   169b8:	cmp	r3, #103	; 0x67
   169bc:	beq	16a34 <lchmod@@Base+0x304>
   169c0:	bhi	16954 <lchmod@@Base+0x224>
   169c4:	sub	lr, r3, #48	; 0x30
   169c8:	cmp	lr, #7
   169cc:	addls	lr, r1, #2
   169d0:	movls	r2, #0
   169d4:	bhi	16a48 <lchmod@@Base+0x318>
   169d8:	add	r2, r3, r2, lsl #3
   169dc:	sub	r2, r2, #48	; 0x30
   169e0:	cmp	r2, r6
   169e4:	mov	r1, lr
   169e8:	bhi	168dc <lchmod@@Base+0x1ac>
   169ec:	ldrb	r3, [lr]
   169f0:	add	lr, lr, #1
   169f4:	sub	r4, r3, #48	; 0x30
   169f8:	cmp	r4, #7
   169fc:	bls	169d8 <lchmod@@Base+0x2a8>
   16a00:	cmp	fp, #0
   16a04:	bne	168dc <lchmod@@Base+0x1ac>
   16a08:	cmp	r3, #0
   16a0c:	cmpne	r3, #44	; 0x2c
   16a10:	bne	168dc <lchmod@@Base+0x1ac>
   16a14:	ldr	fp, [pc, #428]	; 16bc8 <lchmod@@Base+0x498>
   16a18:	strb	r5, [ip]
   16a1c:	str	r2, [ip, #8]
   16a20:	strb	r9, [ip, #1]
   16a24:	str	r6, [ip, #4]
   16a28:	mov	r2, fp
   16a2c:	mov	r5, r3
   16a30:	b	16990 <lchmod@@Base+0x260>
   16a34:	ldrb	r3, [r1, #2]
   16a38:	mov	r4, r8
   16a3c:	add	r1, r1, #2
   16a40:	mov	r2, #56	; 0x38
   16a44:	b	16974 <lchmod@@Base+0x244>
   16a48:	mov	r1, r2
   16a4c:	mov	r4, r9
   16a50:	mov	r2, #0
   16a54:	sub	lr, r3, #88	; 0x58
   16a58:	cmp	lr, #32
   16a5c:	ldrls	pc, [pc, lr, lsl #2]
   16a60:	b	16974 <lchmod@@Base+0x244>
   16a64:	andeq	r6, r1, r8, ror #21
   16a68:	andeq	r6, r1, r4, ror r9
   16a6c:	andeq	r6, r1, r4, ror r9
   16a70:	andeq	r6, r1, r4, ror r9
   16a74:	andeq	r6, r1, r4, ror r9
   16a78:	andeq	r6, r1, r4, ror r9
   16a7c:	andeq	r6, r1, r4, ror r9
   16a80:	andeq	r6, r1, r4, ror r9
   16a84:	andeq	r6, r1, r4, ror r9
   16a88:	andeq	r6, r1, r4, ror r9
   16a8c:	andeq	r6, r1, r4, ror r9
   16a90:	andeq	r6, r1, r4, ror r9
   16a94:	andeq	r6, r1, r4, ror r9
   16a98:	andeq	r6, r1, r4, ror r9
   16a9c:	andeq	r6, r1, r4, ror r9
   16aa0:	andeq	r6, r1, r4, ror r9
   16aa4:	andeq	r6, r1, r4, ror r9
   16aa8:	andeq	r6, r1, r4, ror r9
   16aac:	andeq	r6, r1, r4, ror r9
   16ab0:	andeq	r6, r1, r4, ror r9
   16ab4:	andeq	r6, r1, r4, ror r9
   16ab8:	andeq	r6, r1, r4, ror r9
   16abc:	andeq	r6, r1, r4, ror r9
   16ac0:	andeq	r6, r1, r4, ror r9
   16ac4:	andeq	r6, r1, r4, ror r9
   16ac8:	andeq	r6, r1, r4, ror r9
   16acc:	andeq	r6, r1, r4, lsl fp
   16ad0:	andeq	r6, r1, ip, lsl #22
   16ad4:	andeq	r6, r1, r4, lsl #22
   16ad8:	andeq	r6, r1, r4, ror r9
   16adc:	andeq	r6, r1, r4, ror r9
   16ae0:	strdeq	r6, [r1], -ip
   16ae4:	strdeq	r6, [r1], -r4
   16ae8:	mov	r4, sl
   16aec:	ldrb	r3, [r1, #1]!
   16af0:	b	16a54 <lchmod@@Base+0x324>
   16af4:	orr	r2, r2, #73	; 0x49
   16af8:	b	16aec <lchmod@@Base+0x3bc>
   16afc:	orr	r2, r2, #146	; 0x92
   16b00:	b	16aec <lchmod@@Base+0x3bc>
   16b04:	orr	r2, r2, #512	; 0x200
   16b08:	b	16aec <lchmod@@Base+0x3bc>
   16b0c:	orr	r2, r2, #3072	; 0xc00
   16b10:	b	16aec <lchmod@@Base+0x3bc>
   16b14:	orr	r2, r2, #292	; 0x124
   16b18:	b	16aec <lchmod@@Base+0x3bc>
   16b1c:	ldrb	r3, [r1, #2]
   16b20:	mov	r4, r8
   16b24:	add	r1, r1, #2
   16b28:	mov	r2, #7
   16b2c:	b	16974 <lchmod@@Base+0x244>
   16b30:	ldr	fp, [pc, #144]	; 16bc8 <lchmod@@Base+0x498>
   16b34:	b	168ac <lchmod@@Base+0x17c>
   16b38:	orr	fp, fp, #516	; 0x204
   16b3c:	orr	fp, fp, #3
   16b40:	b	168ac <lchmod@@Base+0x17c>
   16b44:	orr	fp, fp, #1072	; 0x430
   16b48:	orr	fp, fp, #8
   16b4c:	b	168ac <lchmod@@Base+0x17c>
   16b50:	cmp	r3, #0
   16b54:	bne	16920 <lchmod@@Base+0x1f0>
   16b58:	sub	r1, r1, r4
   16b5c:	cmp	r1, #4
   16b60:	andle	r4, r5, #3072	; 0xc00
   16b64:	mov	r0, #32
   16b68:	mvnle	r4, r4, lsr #10
   16b6c:	ldrgt	r4, [pc, #84]	; 16bc8 <lchmod@@Base+0x498>
   16b70:	mvnle	r4, r4, lsl #10
   16b74:	bl	19424 <lchmod@@Base+0x2cf4>
   16b78:	ldr	r2, [pc, #72]	; 16bc8 <lchmod@@Base+0x498>
   16b7c:	mov	ip, #61	; 0x3d
   16b80:	mov	r1, #1
   16b84:	mov	r3, #0
   16b88:	str	r5, [r0, #8]
   16b8c:	str	r4, [r0, #12]
   16b90:	strb	ip, [r0]
   16b94:	strb	r1, [r0, #1]
   16b98:	str	r2, [r0, #4]
   16b9c:	strb	r3, [r0, #17]
   16ba0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ba4:	cmp	r3, #44	; 0x2c
   16ba8:	addeq	r4, r1, #1
   16bac:	moveq	ip, r7
   16bb0:	beq	168a8 <lchmod@@Base+0x178>
   16bb4:	cmp	r3, #0
   16bb8:	bne	168dc <lchmod@@Base+0x1ac>
   16bbc:	add	r7, r0, r7, lsl #4
   16bc0:	strb	r3, [r7, #1]
   16bc4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bc8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16bcc:	push	{r4, r5, lr}
   16bd0:	sub	sp, sp, #108	; 0x6c
   16bd4:	mov	r1, r0
   16bd8:	mov	r2, sp
   16bdc:	mov	r0, #3
   16be0:	bl	11854 <__xstat64@plt>
   16be4:	subs	r4, r0, #0
   16be8:	movne	r0, #0
   16bec:	bne	16c20 <lchmod@@Base+0x4f0>
   16bf0:	mov	r0, #32
   16bf4:	ldr	r5, [sp, #16]
   16bf8:	bl	19424 <lchmod@@Base+0x2cf4>
   16bfc:	ldr	r3, [pc, #36]	; 16c28 <lchmod@@Base+0x4f8>
   16c00:	mov	r1, #61	; 0x3d
   16c04:	mov	r2, #1
   16c08:	str	r5, [r0, #8]
   16c0c:	strb	r4, [r0, #17]
   16c10:	strb	r1, [r0]
   16c14:	strb	r2, [r0, #1]
   16c18:	str	r3, [r0, #4]
   16c1c:	str	r3, [r0, #12]
   16c20:	add	sp, sp, #108	; 0x6c
   16c24:	pop	{r4, r5, pc}
   16c28:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16c2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c30:	ldrb	r8, [r3, #1]
   16c34:	ldr	r6, [pc, #284]	; 16d58 <lchmod@@Base+0x628>
   16c38:	ldr	r7, [sp, #32]
   16c3c:	cmp	r8, #0
   16c40:	and	r0, r0, r6
   16c44:	beq	16d50 <lchmod@@Base+0x620>
   16c48:	cmp	r1, #0
   16c4c:	add	r3, r3, #16
   16c50:	mvn	r2, r2
   16c54:	movne	r5, #3072	; 0xc00
   16c58:	moveq	r5, #0
   16c5c:	mov	r4, #0
   16c60:	b	16ce4 <lchmod@@Base+0x5b4>
   16c64:	cmp	r8, #3
   16c68:	bne	16ca0 <lchmod@@Base+0x570>
   16c6c:	and	ip, ip, r0
   16c70:	tst	ip, #292	; 0x124
   16c74:	movne	r8, #292	; 0x124
   16c78:	moveq	r8, #0
   16c7c:	tst	ip, #146	; 0x92
   16c80:	movne	sl, #146	; 0x92
   16c84:	moveq	sl, #0
   16c88:	tst	ip, #73	; 0x49
   16c8c:	orr	sl, r8, sl
   16c90:	movne	r8, #73	; 0x49
   16c94:	moveq	r8, #0
   16c98:	orr	r8, r8, sl
   16c9c:	orr	ip, r8, ip
   16ca0:	ldrb	r8, [r3, #-16]
   16ca4:	cmp	lr, #0
   16ca8:	movne	sl, lr
   16cac:	moveq	sl, r2
   16cb0:	bic	ip, ip, r9
   16cb4:	cmp	r8, #45	; 0x2d
   16cb8:	and	ip, ip, sl
   16cbc:	beq	16d44 <lchmod@@Base+0x614>
   16cc0:	cmp	r8, #61	; 0x3d
   16cc4:	beq	16d0c <lchmod@@Base+0x5dc>
   16cc8:	cmp	r8, #43	; 0x2b
   16ccc:	orreq	r4, r4, ip
   16cd0:	orreq	r0, r0, ip
   16cd4:	add	r3, r3, #16
   16cd8:	ldrb	r8, [r3, #-15]
   16cdc:	cmp	r8, #0
   16ce0:	beq	16d38 <lchmod@@Base+0x608>
   16ce4:	ldr	lr, [r3, #-4]
   16ce8:	cmp	r8, #2
   16cec:	bic	r9, r5, lr
   16cf0:	ldr	ip, [r3, #-8]
   16cf4:	ldr	lr, [r3, #-12]
   16cf8:	bne	16c64 <lchmod@@Base+0x534>
   16cfc:	and	r8, r0, #73	; 0x49
   16d00:	orrs	r8, r8, r1
   16d04:	orrne	ip, ip, #73	; 0x49
   16d08:	b	16ca0 <lchmod@@Base+0x570>
   16d0c:	add	r3, r3, #16
   16d10:	cmp	lr, #0
   16d14:	ldrb	r8, [r3, #-15]
   16d18:	mvnne	lr, lr
   16d1c:	orr	lr, lr, r9
   16d20:	and	r0, r0, lr
   16d24:	cmp	r8, #0
   16d28:	bic	lr, r6, lr
   16d2c:	orr	r0, ip, r0
   16d30:	orr	r4, r4, lr
   16d34:	bne	16ce4 <lchmod@@Base+0x5b4>
   16d38:	cmp	r7, #0
   16d3c:	strne	r4, [r7]
   16d40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d44:	orr	r4, r4, ip
   16d48:	bic	r0, r0, ip
   16d4c:	b	16cd4 <lchmod@@Base+0x5a4>
   16d50:	mov	r4, r8
   16d54:	b	16d38 <lchmod@@Base+0x608>
   16d58:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16d5c:	push	{r2, r3}
   16d60:	push	{lr}		; (str lr, [sp, #-4]!)
   16d64:	sub	sp, sp, #12
   16d68:	ldr	r2, [sp, #16]
   16d6c:	ands	r3, r2, #64	; 0x40
   16d70:	addne	r3, sp, #20
   16d74:	strne	r3, [sp, #4]
   16d78:	ldrne	r3, [sp, #20]
   16d7c:	bl	11704 <openat64@plt>
   16d80:	bl	18ec8 <lchmod@@Base+0x2798>
   16d84:	add	sp, sp, #12
   16d88:	pop	{lr}		; (ldr lr, [sp], #4)
   16d8c:	add	sp, sp, #8
   16d90:	bx	lr
   16d94:	orr	r2, r2, #540672	; 0x84000
   16d98:	push	{r4, r5, r6, lr}
   16d9c:	orr	r2, r2, #2304	; 0x900
   16da0:	mov	r6, r3
   16da4:	bl	16d5c <lchmod@@Base+0x62c>
   16da8:	subs	r5, r0, #0
   16dac:	blt	16de0 <lchmod@@Base+0x6b0>
   16db0:	bl	117d0 <fdopendir@plt>
   16db4:	subs	r4, r0, #0
   16db8:	beq	16dc8 <lchmod@@Base+0x698>
   16dbc:	str	r5, [r6]
   16dc0:	mov	r0, r4
   16dc4:	pop	{r4, r5, r6, pc}
   16dc8:	bl	1171c <__errno_location@plt>
   16dcc:	mov	r6, r0
   16dd0:	mov	r0, r5
   16dd4:	ldr	r5, [r6]
   16dd8:	bl	11884 <close@plt>
   16ddc:	b	16dbc <lchmod@@Base+0x68c>
   16de0:	mov	r4, #0
   16de4:	b	16dc0 <lchmod@@Base+0x690>
   16de8:	push	{r4, r5, r6, lr}
   16dec:	subs	r4, r0, #0
   16df0:	beq	16e64 <lchmod@@Base+0x734>
   16df4:	mov	r1, #47	; 0x2f
   16df8:	bl	117ac <strrchr@plt>
   16dfc:	subs	r5, r0, #0
   16e00:	beq	16e50 <lchmod@@Base+0x720>
   16e04:	add	r6, r5, #1
   16e08:	sub	r3, r6, r4
   16e0c:	cmp	r3, #6
   16e10:	ble	16e50 <lchmod@@Base+0x720>
   16e14:	mov	r2, #7
   16e18:	ldr	r1, [pc, #96]	; 16e80 <lchmod@@Base+0x750>
   16e1c:	sub	r0, r5, #6
   16e20:	bl	1186c <strncmp@plt>
   16e24:	cmp	r0, #0
   16e28:	bne	16e50 <lchmod@@Base+0x720>
   16e2c:	mov	r2, #3
   16e30:	ldr	r1, [pc, #76]	; 16e84 <lchmod@@Base+0x754>
   16e34:	mov	r0, r6
   16e38:	bl	1186c <strncmp@plt>
   16e3c:	cmp	r0, #0
   16e40:	movne	r4, r6
   16e44:	ldreq	r3, [pc, #60]	; 16e88 <lchmod@@Base+0x758>
   16e48:	addeq	r4, r5, #4
   16e4c:	streq	r4, [r3]
   16e50:	ldr	r2, [pc, #52]	; 16e8c <lchmod@@Base+0x75c>
   16e54:	ldr	r3, [pc, #52]	; 16e90 <lchmod@@Base+0x760>
   16e58:	str	r4, [r2]
   16e5c:	str	r4, [r3]
   16e60:	pop	{r4, r5, r6, pc}
   16e64:	ldr	r3, [pc, #40]	; 16e94 <lchmod@@Base+0x764>
   16e68:	mov	r2, #55	; 0x37
   16e6c:	mov	r1, #1
   16e70:	ldr	r3, [r3]
   16e74:	ldr	r0, [pc, #28]	; 16e98 <lchmod@@Base+0x768>
   16e78:	bl	115f0 <fwrite@plt>
   16e7c:	bl	11878 <abort@plt>
   16e80:	andeq	fp, r1, ip, asr r9
   16e84:	andeq	fp, r1, r4, ror #18
   16e88:	ldrdeq	ip, [r2], -r0
   16e8c:	strdeq	ip, [r2], -r8
   16e90:	ldrdeq	ip, [r2], -r4
   16e94:	andeq	ip, r2, r0, ror #3
   16e98:	andeq	fp, r1, r4, lsr #18
   16e9c:	push	{r4, r5, r6, lr}
   16ea0:	mov	r2, #48	; 0x30
   16ea4:	mov	r4, r1
   16ea8:	mov	r1, #0
   16eac:	mov	r5, r0
   16eb0:	bl	11740 <memset@plt>
   16eb4:	cmp	r4, #10
   16eb8:	beq	16ec8 <lchmod@@Base+0x798>
   16ebc:	str	r4, [r5]
   16ec0:	mov	r0, r5
   16ec4:	pop	{r4, r5, r6, pc}
   16ec8:	bl	11878 <abort@plt>
   16ecc:	push	{r4, r5, r6, lr}
   16ed0:	mov	r4, r0
   16ed4:	mov	r5, r1
   16ed8:	bl	1a73c <lchmod@@Base+0x400c>
   16edc:	ldrb	r3, [r0]
   16ee0:	bic	r3, r3, #32
   16ee4:	cmp	r3, #85	; 0x55
   16ee8:	bne	16f48 <lchmod@@Base+0x818>
   16eec:	ldrb	r3, [r0, #1]
   16ef0:	bic	r3, r3, #32
   16ef4:	cmp	r3, #84	; 0x54
   16ef8:	bne	16f84 <lchmod@@Base+0x854>
   16efc:	ldrb	r3, [r0, #2]
   16f00:	bic	r3, r3, #32
   16f04:	cmp	r3, #70	; 0x46
   16f08:	bne	16f84 <lchmod@@Base+0x854>
   16f0c:	ldrb	r3, [r0, #3]
   16f10:	cmp	r3, #45	; 0x2d
   16f14:	bne	16f84 <lchmod@@Base+0x854>
   16f18:	ldrb	r3, [r0, #4]
   16f1c:	cmp	r3, #56	; 0x38
   16f20:	bne	16f84 <lchmod@@Base+0x854>
   16f24:	ldrb	r3, [r0, #5]
   16f28:	cmp	r3, #0
   16f2c:	bne	16f84 <lchmod@@Base+0x854>
   16f30:	ldrb	r2, [r4]
   16f34:	ldr	r3, [pc, #152]	; 16fd4 <lchmod@@Base+0x8a4>
   16f38:	ldr	r0, [pc, #152]	; 16fd8 <lchmod@@Base+0x8a8>
   16f3c:	cmp	r2, #96	; 0x60
   16f40:	movne	r0, r3
   16f44:	pop	{r4, r5, r6, pc}
   16f48:	cmp	r3, #71	; 0x47
   16f4c:	bne	16f84 <lchmod@@Base+0x854>
   16f50:	ldrb	r3, [r0, #1]
   16f54:	bic	r3, r3, #32
   16f58:	cmp	r3, #66	; 0x42
   16f5c:	bne	16f84 <lchmod@@Base+0x854>
   16f60:	ldrb	r3, [r0, #2]
   16f64:	cmp	r3, #49	; 0x31
   16f68:	bne	16f84 <lchmod@@Base+0x854>
   16f6c:	ldrb	r3, [r0, #3]
   16f70:	cmp	r3, #56	; 0x38
   16f74:	bne	16f84 <lchmod@@Base+0x854>
   16f78:	ldrb	r3, [r0, #4]
   16f7c:	cmp	r3, #48	; 0x30
   16f80:	beq	16f98 <lchmod@@Base+0x868>
   16f84:	ldr	r3, [pc, #80]	; 16fdc <lchmod@@Base+0x8ac>
   16f88:	cmp	r5, #9
   16f8c:	ldr	r0, [pc, #76]	; 16fe0 <lchmod@@Base+0x8b0>
   16f90:	movne	r0, r3
   16f94:	pop	{r4, r5, r6, pc}
   16f98:	ldrb	r3, [r0, #5]
   16f9c:	cmp	r3, #51	; 0x33
   16fa0:	bne	16f84 <lchmod@@Base+0x854>
   16fa4:	ldrb	r3, [r0, #6]
   16fa8:	cmp	r3, #48	; 0x30
   16fac:	bne	16f84 <lchmod@@Base+0x854>
   16fb0:	ldrb	r3, [r0, #7]
   16fb4:	cmp	r3, #0
   16fb8:	bne	16f84 <lchmod@@Base+0x854>
   16fbc:	ldrb	r2, [r4]
   16fc0:	ldr	r3, [pc, #28]	; 16fe4 <lchmod@@Base+0x8b4>
   16fc4:	ldr	r0, [pc, #28]	; 16fe8 <lchmod@@Base+0x8b8>
   16fc8:	cmp	r2, #96	; 0x60
   16fcc:	movne	r0, r3
   16fd0:	pop	{r4, r5, r6, pc}
   16fd4:	andeq	fp, r1, r0, asr #19
   16fd8:			; <UNDEFINED> instruction: 0x0001b9bc
   16fdc:	ldrdeq	fp, [r1], -r0
   16fe0:	andeq	fp, r1, ip, asr #19
   16fe4:	andeq	fp, r1, r8, asr #19
   16fe8:	andeq	fp, r1, r4, asr #19
   16fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ff0:	sub	sp, sp, #116	; 0x74
   16ff4:	mov	sl, r0
   16ff8:	str	r3, [sp, #24]
   16ffc:	mov	r3, #1
   17000:	mov	r8, r1
   17004:	str	r2, [sp, #56]	; 0x38
   17008:	str	r3, [sp, #36]	; 0x24
   1700c:	bl	11608 <__ctype_get_mb_cur_max@plt>
   17010:	ldr	r3, [sp, #156]	; 0x9c
   17014:	mov	fp, r8
   17018:	mov	r2, #0
   1701c:	lsr	r3, r3, #1
   17020:	and	r3, r3, #1
   17024:	str	r2, [sp, #68]	; 0x44
   17028:	str	r3, [sp, #28]
   1702c:	str	r2, [sp, #40]	; 0x28
   17030:	str	r2, [sp, #44]	; 0x2c
   17034:	str	r2, [sp, #52]	; 0x34
   17038:	str	r2, [sp, #64]	; 0x40
   1703c:	str	r2, [sp, #72]	; 0x48
   17040:	str	sl, [sp, #32]
   17044:	str	r0, [sp, #76]	; 0x4c
   17048:	ldr	r3, [sp, #152]	; 0x98
   1704c:	cmp	r3, #10
   17050:	ldrls	pc, [pc, r3, lsl #2]
   17054:	b	18214 <lchmod@@Base+0x1ae4>
   17058:	andeq	r7, r1, r4, lsl #1
   1705c:	andeq	r7, r1, ip, ror #6
   17060:	muleq	r1, r0, r3
   17064:			; <UNDEFINED> instruction: 0x000173b4
   17068:	andeq	r7, r1, r0, ror #9
   1706c:			; <UNDEFINED> instruction: 0x000174b4
   17070:	andeq	r7, r1, ip, lsl #9
   17074:	andeq	r7, r1, r8, asr #7
   17078:	andeq	r7, r1, r0, ror #7
   1707c:	andeq	r7, r1, r0, ror #7
   17080:	andeq	r7, r1, r0, ror #7
   17084:	mov	r3, #0
   17088:	mov	r7, r3
   1708c:	str	r3, [sp, #28]
   17090:	ldr	r3, [sp, #44]	; 0x2c
   17094:	mov	sl, #0
   17098:	eor	r3, r3, #1
   1709c:	str	r3, [sp, #60]	; 0x3c
   170a0:	ldr	r3, [sp, #24]
   170a4:	cmn	r3, #1
   170a8:	beq	1760c <lchmod@@Base+0xedc>
   170ac:	ldr	r3, [sp, #24]
   170b0:	subs	r5, r3, sl
   170b4:	movne	r5, #1
   170b8:	cmp	r5, #0
   170bc:	beq	17624 <lchmod@@Base+0xef4>
   170c0:	ldr	r3, [sp, #152]	; 0x98
   170c4:	ldr	r8, [sp, #44]	; 0x2c
   170c8:	cmp	r3, #2
   170cc:	moveq	r8, #0
   170d0:	andne	r8, r8, #1
   170d4:	ldr	r3, [sp, #52]	; 0x34
   170d8:	adds	r9, r3, #0
   170dc:	movne	r9, #1
   170e0:	ands	r6, r9, r8
   170e4:	beq	17a8c <lchmod@@Base+0x135c>
   170e8:	ldr	r2, [sp, #52]	; 0x34
   170ec:	ldr	r1, [sp, #24]
   170f0:	cmp	r2, #1
   170f4:	mov	r3, r2
   170f8:	movls	r3, #0
   170fc:	movhi	r3, #1
   17100:	cmn	r1, #1
   17104:	movne	r3, #0
   17108:	cmp	r3, #0
   1710c:	add	r4, sl, r2
   17110:	beq	17120 <lchmod@@Base+0x9f0>
   17114:	ldr	r0, [sp, #56]	; 0x38
   17118:	bl	116e0 <strlen@plt>
   1711c:	str	r0, [sp, #24]
   17120:	ldr	r3, [sp, #24]
   17124:	cmp	r3, r4
   17128:	ldr	r3, [sp, #56]	; 0x38
   1712c:	add	r3, r3, sl
   17130:	str	r3, [sp, #48]	; 0x30
   17134:	bcc	17a98 <lchmod@@Base+0x1368>
   17138:	mov	r0, r3
   1713c:	ldr	r2, [sp, #52]	; 0x34
   17140:	ldr	r1, [sp, #64]	; 0x40
   17144:	bl	11560 <memcmp@plt>
   17148:	cmp	r0, #0
   1714c:	bne	17a98 <lchmod@@Base+0x1368>
   17150:	ldr	r3, [sp, #28]
   17154:	cmp	r3, #0
   17158:	bne	18314 <lchmod@@Base+0x1be4>
   1715c:	ldr	r3, [sp, #48]	; 0x30
   17160:	ldrb	r4, [r3]
   17164:	cmp	r4, #126	; 0x7e
   17168:	ldrls	pc, [pc, r4, lsl #2]
   1716c:	b	17a2c <lchmod@@Base+0x12fc>
   17170:	andeq	r7, r1, r0, asr r8
   17174:	andeq	r7, r1, ip, lsr #20
   17178:	andeq	r7, r1, ip, lsr #20
   1717c:	andeq	r7, r1, ip, lsr #20
   17180:	andeq	r7, r1, ip, lsr #20
   17184:	andeq	r7, r1, ip, lsr #20
   17188:	andeq	r7, r1, ip, lsr #20
   1718c:	andeq	r7, r1, r4, lsr r8
   17190:	andeq	r7, r1, r8, lsl r8
   17194:	andeq	r7, r1, r4, lsl sl
   17198:	andeq	r7, r1, r8, ror r7
   1719c:	andeq	r7, r1, ip, asr r7
   171a0:	strdeq	r7, [r1], -r0
   171a4:	andeq	r7, r1, ip, asr #19
   171a8:	andeq	r7, r1, ip, lsr #20
   171ac:	andeq	r7, r1, ip, lsr #20
   171b0:	andeq	r7, r1, ip, lsr #20
   171b4:	andeq	r7, r1, ip, lsr #20
   171b8:	andeq	r7, r1, ip, lsr #20
   171bc:	andeq	r7, r1, ip, lsr #20
   171c0:	andeq	r7, r1, ip, lsr #20
   171c4:	andeq	r7, r1, ip, lsr #20
   171c8:	andeq	r7, r1, ip, lsr #20
   171cc:	andeq	r7, r1, ip, lsr #20
   171d0:	andeq	r7, r1, ip, lsr #20
   171d4:	andeq	r7, r1, ip, lsr #20
   171d8:	andeq	r7, r1, ip, lsr #20
   171dc:	andeq	r7, r1, ip, lsr #20
   171e0:	andeq	r7, r1, ip, lsr #20
   171e4:	andeq	r7, r1, ip, lsr #20
   171e8:	andeq	r7, r1, ip, lsr #20
   171ec:	andeq	r7, r1, ip, lsr #20
   171f0:	andeq	r7, r1, ip, lsl #20
   171f4:	andeq	r7, r1, r0, asr #18
   171f8:	andeq	r7, r1, r0, asr #18
   171fc:	andeq	r7, r1, r0, asr r5
   17200:	andeq	r7, r1, r0, asr #18
   17204:	ldrdeq	r7, [r1], -r8
   17208:	andeq	r7, r1, r0, asr #18
   1720c:	andeq	r7, r1, ip, lsr #19
   17210:	andeq	r7, r1, r0, asr #18
   17214:	andeq	r7, r1, r0, asr #18
   17218:	andeq	r7, r1, r0, asr #18
   1721c:	ldrdeq	r7, [r1], -r8
   17220:	ldrdeq	r7, [r1], -r8
   17224:	ldrdeq	r7, [r1], -r8
   17228:	ldrdeq	r7, [r1], -r8
   1722c:	ldrdeq	r7, [r1], -r8
   17230:	ldrdeq	r7, [r1], -r8
   17234:	ldrdeq	r7, [r1], -r8
   17238:	ldrdeq	r7, [r1], -r8
   1723c:	ldrdeq	r7, [r1], -r8
   17240:	ldrdeq	r7, [r1], -r8
   17244:	ldrdeq	r7, [r1], -r8
   17248:	ldrdeq	r7, [r1], -r8
   1724c:	ldrdeq	r7, [r1], -r8
   17250:	ldrdeq	r7, [r1], -r8
   17254:	ldrdeq	r7, [r1], -r8
   17258:	ldrdeq	r7, [r1], -r8
   1725c:	andeq	r7, r1, r0, asr #18
   17260:	andeq	r7, r1, r0, asr #18
   17264:	andeq	r7, r1, r0, asr #18
   17268:	andeq	r7, r1, r0, asr #18
   1726c:	andeq	r7, r1, ip, ror r9
   17270:	andeq	r7, r1, ip, lsr #20
   17274:	ldrdeq	r7, [r1], -r8
   17278:	ldrdeq	r7, [r1], -r8
   1727c:	ldrdeq	r7, [r1], -r8
   17280:	ldrdeq	r7, [r1], -r8
   17284:	ldrdeq	r7, [r1], -r8
   17288:	ldrdeq	r7, [r1], -r8
   1728c:	ldrdeq	r7, [r1], -r8
   17290:	ldrdeq	r7, [r1], -r8
   17294:	ldrdeq	r7, [r1], -r8
   17298:	ldrdeq	r7, [r1], -r8
   1729c:	ldrdeq	r7, [r1], -r8
   172a0:	ldrdeq	r7, [r1], -r8
   172a4:	ldrdeq	r7, [r1], -r8
   172a8:	ldrdeq	r7, [r1], -r8
   172ac:	ldrdeq	r7, [r1], -r8
   172b0:	ldrdeq	r7, [r1], -r8
   172b4:	ldrdeq	r7, [r1], -r8
   172b8:	ldrdeq	r7, [r1], -r8
   172bc:	ldrdeq	r7, [r1], -r8
   172c0:	ldrdeq	r7, [r1], -r8
   172c4:	ldrdeq	r7, [r1], -r8
   172c8:	ldrdeq	r7, [r1], -r8
   172cc:	ldrdeq	r7, [r1], -r8
   172d0:	ldrdeq	r7, [r1], -r8
   172d4:	ldrdeq	r7, [r1], -r8
   172d8:	ldrdeq	r7, [r1], -r8
   172dc:	andeq	r7, r1, r0, asr #18
   172e0:	muleq	r1, ip, r6
   172e4:	ldrdeq	r7, [r1], -r8
   172e8:	andeq	r7, r1, r0, asr #18
   172ec:	ldrdeq	r7, [r1], -r8
   172f0:	andeq	r7, r1, r0, asr #18
   172f4:	ldrdeq	r7, [r1], -r8
   172f8:	ldrdeq	r7, [r1], -r8
   172fc:	ldrdeq	r7, [r1], -r8
   17300:	ldrdeq	r7, [r1], -r8
   17304:	ldrdeq	r7, [r1], -r8
   17308:	ldrdeq	r7, [r1], -r8
   1730c:	ldrdeq	r7, [r1], -r8
   17310:	ldrdeq	r7, [r1], -r8
   17314:	ldrdeq	r7, [r1], -r8
   17318:	ldrdeq	r7, [r1], -r8
   1731c:	ldrdeq	r7, [r1], -r8
   17320:	ldrdeq	r7, [r1], -r8
   17324:	ldrdeq	r7, [r1], -r8
   17328:	ldrdeq	r7, [r1], -r8
   1732c:	ldrdeq	r7, [r1], -r8
   17330:	ldrdeq	r7, [r1], -r8
   17334:	ldrdeq	r7, [r1], -r8
   17338:	ldrdeq	r7, [r1], -r8
   1733c:	ldrdeq	r7, [r1], -r8
   17340:	ldrdeq	r7, [r1], -r8
   17344:	ldrdeq	r7, [r1], -r8
   17348:	ldrdeq	r7, [r1], -r8
   1734c:	ldrdeq	r7, [r1], -r8
   17350:	ldrdeq	r7, [r1], -r8
   17354:	ldrdeq	r7, [r1], -r8
   17358:	ldrdeq	r7, [r1], -r8
   1735c:	andeq	r7, r1, r0, lsr r5
   17360:	andeq	r7, r1, r0, asr #18
   17364:	andeq	r7, r1, r0, lsr r5
   17368:	andeq	r7, r1, r0, asr r5
   1736c:	mov	r3, #1
   17370:	str	r3, [sp, #28]
   17374:	str	r3, [sp, #52]	; 0x34
   17378:	ldr	r3, [pc, #4000]	; 18320 <lchmod@@Base+0x1bf0>
   1737c:	mov	r7, #0
   17380:	str	r3, [sp, #64]	; 0x40
   17384:	mov	r3, #2
   17388:	str	r3, [sp, #152]	; 0x98
   1738c:	b	17090 <lchmod@@Base+0x960>
   17390:	ldr	r3, [sp, #28]
   17394:	cmp	r3, #0
   17398:	beq	174f4 <lchmod@@Base+0xdc4>
   1739c:	mov	r3, #1
   173a0:	str	r3, [sp, #52]	; 0x34
   173a4:	ldr	r3, [pc, #3956]	; 18320 <lchmod@@Base+0x1bf0>
   173a8:	mov	r7, #0
   173ac:	str	r3, [sp, #64]	; 0x40
   173b0:	b	17090 <lchmod@@Base+0x960>
   173b4:	mov	r3, #1
   173b8:	str	r3, [sp, #44]	; 0x2c
   173bc:	str	r3, [sp, #52]	; 0x34
   173c0:	str	r3, [sp, #28]
   173c4:	b	17378 <lchmod@@Base+0xc48>
   173c8:	mov	r3, #0
   173cc:	str	r3, [sp, #28]
   173d0:	mov	r3, #1
   173d4:	str	r3, [sp, #44]	; 0x2c
   173d8:	mov	r7, #0
   173dc:	b	17090 <lchmod@@Base+0x960>
   173e0:	ldr	r3, [sp, #152]	; 0x98
   173e4:	cmp	r3, #10
   173e8:	beq	1742c <lchmod@@Base+0xcfc>
   173ec:	mov	r2, #5
   173f0:	ldr	r1, [pc, #3884]	; 18324 <lchmod@@Base+0x1bf4>
   173f4:	mov	r0, #0
   173f8:	bl	11578 <dcgettext@plt>
   173fc:	ldr	r2, [pc, #3872]	; 18324 <lchmod@@Base+0x1bf4>
   17400:	cmp	r0, r2
   17404:	str	r0, [sp, #164]	; 0xa4
   17408:	beq	18410 <lchmod@@Base+0x1ce0>
   1740c:	mov	r2, #5
   17410:	ldr	r1, [pc, #3848]	; 18320 <lchmod@@Base+0x1bf0>
   17414:	mov	r0, #0
   17418:	bl	11578 <dcgettext@plt>
   1741c:	ldr	r2, [pc, #3836]	; 18320 <lchmod@@Base+0x1bf0>
   17420:	cmp	r0, r2
   17424:	str	r0, [sp, #168]	; 0xa8
   17428:	beq	18400 <lchmod@@Base+0x1cd0>
   1742c:	ldr	r7, [sp, #28]
   17430:	cmp	r7, #0
   17434:	movne	r7, #0
   17438:	bne	1746c <lchmod@@Base+0xd3c>
   1743c:	ldr	r3, [sp, #164]	; 0xa4
   17440:	ldrb	r3, [r3]
   17444:	cmp	r3, #0
   17448:	beq	18420 <lchmod@@Base+0x1cf0>
   1744c:	ldr	r2, [sp, #164]	; 0xa4
   17450:	ldr	r1, [sp, #32]
   17454:	cmp	fp, r7
   17458:	strbhi	r3, [r1, r7]
   1745c:	ldrb	r3, [r2, #1]!
   17460:	add	r7, r7, #1
   17464:	cmp	r3, #0
   17468:	bne	17454 <lchmod@@Base+0xd24>
   1746c:	ldr	r0, [sp, #168]	; 0xa8
   17470:	bl	116e0 <strlen@plt>
   17474:	ldr	r3, [sp, #168]	; 0xa8
   17478:	str	r3, [sp, #64]	; 0x40
   1747c:	mov	r3, #1
   17480:	str	r3, [sp, #44]	; 0x2c
   17484:	str	r0, [sp, #52]	; 0x34
   17488:	b	17090 <lchmod@@Base+0x960>
   1748c:	mov	r3, #1
   17490:	str	r3, [sp, #44]	; 0x2c
   17494:	str	r3, [sp, #52]	; 0x34
   17498:	str	r3, [sp, #28]
   1749c:	ldr	r3, [pc, #3716]	; 18328 <lchmod@@Base+0x1bf8>
   174a0:	mov	r7, #0
   174a4:	str	r3, [sp, #64]	; 0x40
   174a8:	mov	r3, #5
   174ac:	str	r3, [sp, #152]	; 0x98
   174b0:	b	17090 <lchmod@@Base+0x960>
   174b4:	ldr	r3, [sp, #28]
   174b8:	cmp	r3, #0
   174bc:	beq	181bc <lchmod@@Base+0x1a8c>
   174c0:	ldr	r3, [sp, #28]
   174c4:	mov	r7, #0
   174c8:	str	r3, [sp, #44]	; 0x2c
   174cc:	mov	r3, #1
   174d0:	str	r3, [sp, #52]	; 0x34
   174d4:	ldr	r3, [pc, #3660]	; 18328 <lchmod@@Base+0x1bf8>
   174d8:	str	r3, [sp, #64]	; 0x40
   174dc:	b	17090 <lchmod@@Base+0x960>
   174e0:	ldr	r3, [sp, #28]
   174e4:	cmp	r3, #0
   174e8:	mov	r3, #1
   174ec:	streq	r3, [sp, #44]	; 0x2c
   174f0:	bne	17374 <lchmod@@Base+0xc44>
   174f4:	cmp	fp, #0
   174f8:	beq	181ec <lchmod@@Base+0x1abc>
   174fc:	ldr	r3, [sp, #32]
   17500:	mov	r2, #39	; 0x27
   17504:	mov	r7, #1
   17508:	strb	r2, [r3]
   1750c:	mov	r3, #0
   17510:	str	r3, [sp, #28]
   17514:	mov	r3, #1
   17518:	str	r3, [sp, #52]	; 0x34
   1751c:	ldr	r3, [pc, #3580]	; 18320 <lchmod@@Base+0x1bf0>
   17520:	str	r3, [sp, #64]	; 0x40
   17524:	mov	r3, #2
   17528:	str	r3, [sp, #152]	; 0x98
   1752c:	b	17090 <lchmod@@Base+0x960>
   17530:	ldr	r3, [sp, #24]
   17534:	cmn	r3, #1
   17538:	beq	18150 <lchmod@@Base+0x1a20>
   1753c:	ldr	r3, [sp, #24]
   17540:	subs	r3, r3, #1
   17544:	movne	r3, #1
   17548:	cmp	r3, #0
   1754c:	bne	17558 <lchmod@@Base+0xe28>
   17550:	cmp	sl, #0
   17554:	beq	17944 <lchmod@@Base+0x1214>
   17558:	ldr	r3, [sp, #152]	; 0x98
   1755c:	mov	r5, #0
   17560:	sub	r2, r3, #2
   17564:	mov	r8, r5
   17568:	clz	r2, r2
   1756c:	lsr	r2, r2, #5
   17570:	ldr	r3, [sp, #60]	; 0x3c
   17574:	ldr	r1, [sp, #28]
   17578:	orr	r3, r2, r3
   1757c:	eor	r3, r3, #1
   17580:	orr	r3, r1, r3
   17584:	tst	r3, #255	; 0xff
   17588:	bne	17cb4 <lchmod@@Base+0x1584>
   1758c:	cmp	r6, #0
   17590:	bne	176e0 <lchmod@@Base+0xfb0>
   17594:	ldr	r3, [sp, #40]	; 0x28
   17598:	eor	r8, r8, #1
   1759c:	and	r8, r8, r3
   175a0:	add	sl, sl, #1
   175a4:	uxtb	r6, r8
   175a8:	cmp	r6, #0
   175ac:	beq	175e0 <lchmod@@Base+0xeb0>
   175b0:	cmp	fp, r7
   175b4:	movhi	r2, #39	; 0x27
   175b8:	ldrhi	r3, [sp, #32]
   175bc:	strbhi	r2, [r3, r7]
   175c0:	add	r3, r7, #1
   175c4:	cmp	fp, r3
   175c8:	movhi	r1, #39	; 0x27
   175cc:	ldrhi	r2, [sp, #32]
   175d0:	add	r7, r7, #2
   175d4:	strbhi	r1, [r2, r3]
   175d8:	mov	r3, #0
   175dc:	str	r3, [sp, #40]	; 0x28
   175e0:	cmp	r7, fp
   175e4:	ldrcc	r3, [sp, #32]
   175e8:	strbcc	r4, [r3, r7]
   175ec:	ldr	r3, [sp, #36]	; 0x24
   175f0:	cmp	r5, #0
   175f4:	moveq	r3, #0
   175f8:	str	r3, [sp, #36]	; 0x24
   175fc:	ldr	r3, [sp, #24]
   17600:	add	r7, r7, #1
   17604:	cmn	r3, #1
   17608:	bne	170ac <lchmod@@Base+0x97c>
   1760c:	ldr	r3, [sp, #56]	; 0x38
   17610:	ldrb	r5, [r3, sl]
   17614:	adds	r5, r5, #0
   17618:	movne	r5, #1
   1761c:	cmp	r5, #0
   17620:	bne	170c0 <lchmod@@Base+0x990>
   17624:	ldr	r3, [sp, #152]	; 0x98
   17628:	ldr	r1, [sp, #28]
   1762c:	sub	r3, r3, #2
   17630:	clz	r3, r3
   17634:	lsr	r3, r3, #5
   17638:	and	r9, r1, r3
   1763c:	cmp	r7, #0
   17640:	movne	r2, #0
   17644:	andeq	r2, r9, #1
   17648:	cmp	r2, #0
   1764c:	bne	18028 <lchmod@@Base+0x18f8>
   17650:	eor	r2, r1, #1
   17654:	ands	r3, r3, r2
   17658:	beq	184e4 <lchmod@@Base+0x1db4>
   1765c:	ldr	r2, [sp, #68]	; 0x44
   17660:	cmp	r2, #0
   17664:	beq	184d0 <lchmod@@Base+0x1da0>
   17668:	ldr	r3, [sp, #36]	; 0x24
   1766c:	cmp	r3, #0
   17670:	bne	18488 <lchmod@@Base+0x1d58>
   17674:	ldr	r2, [sp, #72]	; 0x48
   17678:	clz	r3, fp
   1767c:	cmp	r2, #0
   17680:	lsr	r3, r3, #5
   17684:	moveq	r3, #0
   17688:	cmp	r3, #0
   1768c:	beq	18428 <lchmod@@Base+0x1cf8>
   17690:	str	r3, [sp, #68]	; 0x44
   17694:	ldr	fp, [sp, #72]	; 0x48
   17698:	b	17048 <lchmod@@Base+0x918>
   1769c:	ldr	r3, [sp, #152]	; 0x98
   176a0:	cmp	r3, #2
   176a4:	beq	17cf8 <lchmod@@Base+0x15c8>
   176a8:	ldr	r3, [sp, #44]	; 0x2c
   176ac:	ldr	r2, [sp, #28]
   176b0:	and	r2, r3, r2
   176b4:	ands	r2, r9, r2
   176b8:	bne	17d04 <lchmod@@Base+0x15d4>
   176bc:	mov	r4, #92	; 0x5c
   176c0:	mov	r3, r4
   176c4:	ldr	r1, [sp, #44]	; 0x2c
   176c8:	cmp	r1, #0
   176cc:	moveq	r5, #0
   176d0:	moveq	r8, r1
   176d4:	beq	17570 <lchmod@@Base+0xe40>
   176d8:	mov	r4, r3
   176dc:	mov	r5, #0
   176e0:	ldr	r3, [sp, #28]
   176e4:	cmp	r3, #0
   176e8:	bne	17cec <lchmod@@Base+0x15bc>
   176ec:	ldr	r3, [sp, #40]	; 0x28
   176f0:	eor	r9, r3, #1
   176f4:	and	r9, r9, r2
   176f8:	ands	r9, r9, #255	; 0xff
   176fc:	beq	17740 <lchmod@@Base+0x1010>
   17700:	cmp	fp, r7
   17704:	movhi	r2, #39	; 0x27
   17708:	ldrhi	r3, [sp, #32]
   1770c:	str	r9, [sp, #40]	; 0x28
   17710:	strbhi	r2, [r3, r7]
   17714:	add	r3, r7, #1
   17718:	cmp	fp, r3
   1771c:	movhi	r1, #36	; 0x24
   17720:	ldrhi	r2, [sp, #32]
   17724:	strbhi	r1, [r2, r3]
   17728:	add	r3, r7, #2
   1772c:	cmp	fp, r3
   17730:	add	r7, r7, #3
   17734:	ldrhi	r2, [sp, #32]
   17738:	movhi	r1, #39	; 0x27
   1773c:	strbhi	r1, [r2, r3]
   17740:	cmp	fp, r7
   17744:	movhi	r2, #92	; 0x5c
   17748:	ldrhi	r3, [sp, #32]
   1774c:	add	sl, sl, #1
   17750:	strbhi	r2, [r3, r7]
   17754:	add	r7, r7, #1
   17758:	b	175e0 <lchmod@@Base+0xeb0>
   1775c:	ldr	r3, [sp, #152]	; 0x98
   17760:	mov	r4, #11
   17764:	sub	r2, r3, #2
   17768:	mov	r3, #118	; 0x76
   1776c:	clz	r2, r2
   17770:	lsr	r2, r2, #5
   17774:	b	176c4 <lchmod@@Base+0xf94>
   17778:	mov	r4, #10
   1777c:	mov	r3, #110	; 0x6e
   17780:	ldr	r2, [sp, #152]	; 0x98
   17784:	ldr	r1, [sp, #28]
   17788:	sub	r2, r2, #2
   1778c:	clz	r2, r2
   17790:	lsr	r2, r2, #5
   17794:	ands	r1, r1, r2
   17798:	beq	176c4 <lchmod@@Base+0xf94>
   1779c:	ldr	sl, [sp, #32]
   177a0:	mov	r8, fp
   177a4:	mov	r2, r1
   177a8:	mov	r3, #2
   177ac:	str	r3, [sp, #152]	; 0x98
   177b0:	ldr	r9, [sp, #44]	; 0x2c
   177b4:	ldr	r3, [sp, #152]	; 0x98
   177b8:	and	r9, r9, r2
   177bc:	tst	r9, #255	; 0xff
   177c0:	movne	r3, #4
   177c4:	str	r3, [sp, #152]	; 0x98
   177c8:	ldr	r3, [sp, #156]	; 0x9c
   177cc:	mov	ip, #0
   177d0:	bic	r3, r3, #2
   177d4:	str	r3, [sp, #4]
   177d8:	ldr	r3, [sp, #168]	; 0xa8
   177dc:	ldr	r2, [sp, #56]	; 0x38
   177e0:	str	r3, [sp, #16]
   177e4:	ldr	r3, [sp, #164]	; 0xa4
   177e8:	mov	r1, r8
   177ec:	str	r3, [sp, #12]
   177f0:	ldr	r3, [sp, #152]	; 0x98
   177f4:	mov	r0, sl
   177f8:	str	r3, [sp]
   177fc:	str	ip, [sp, #8]
   17800:	ldr	r3, [sp, #24]
   17804:	bl	16fec <lchmod@@Base+0x8bc>
   17808:	mov	fp, r0
   1780c:	mov	r0, fp
   17810:	add	sp, sp, #116	; 0x74
   17814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17818:	ldr	r3, [sp, #152]	; 0x98
   1781c:	mov	r4, #8
   17820:	sub	r2, r3, #2
   17824:	mov	r3, #98	; 0x62
   17828:	clz	r2, r2
   1782c:	lsr	r2, r2, #5
   17830:	b	176c4 <lchmod@@Base+0xf94>
   17834:	ldr	r3, [sp, #152]	; 0x98
   17838:	mov	r4, #7
   1783c:	sub	r2, r3, #2
   17840:	mov	r3, #97	; 0x61
   17844:	clz	r2, r2
   17848:	lsr	r2, r2, #5
   1784c:	b	176c4 <lchmod@@Base+0xf94>
   17850:	ldr	r3, [sp, #44]	; 0x2c
   17854:	cmp	r3, #0
   17858:	beq	1803c <lchmod@@Base+0x190c>
   1785c:	ldr	r3, [sp, #28]
   17860:	cmp	r3, #0
   17864:	bne	18314 <lchmod@@Base+0x1be4>
   17868:	ldr	r3, [sp, #152]	; 0x98
   1786c:	sub	r2, r3, #2
   17870:	ldr	r3, [sp, #40]	; 0x28
   17874:	clz	r2, r2
   17878:	eor	r3, r3, #1
   1787c:	lsr	r2, r2, #5
   17880:	ands	r3, r2, r3
   17884:	moveq	r1, r7
   17888:	beq	178cc <lchmod@@Base+0x119c>
   1788c:	cmp	fp, r7
   17890:	movhi	r0, #39	; 0x27
   17894:	ldrhi	r1, [sp, #32]
   17898:	str	r3, [sp, #40]	; 0x28
   1789c:	strbhi	r0, [r1, r7]
   178a0:	add	r1, r7, #1
   178a4:	cmp	fp, r1
   178a8:	movhi	ip, #36	; 0x24
   178ac:	ldrhi	r0, [sp, #32]
   178b0:	strbhi	ip, [r0, r1]
   178b4:	add	r1, r7, #2
   178b8:	cmp	fp, r1
   178bc:	movhi	ip, #39	; 0x27
   178c0:	ldrhi	r0, [sp, #32]
   178c4:	strbhi	ip, [r0, r1]
   178c8:	add	r1, r7, #3
   178cc:	cmp	fp, r1
   178d0:	movhi	r0, #92	; 0x5c
   178d4:	ldrhi	r3, [sp, #32]
   178d8:	add	r7, r1, #1
   178dc:	strbhi	r0, [r3, r1]
   178e0:	cmp	r8, #0
   178e4:	beq	18228 <lchmod@@Base+0x1af8>
   178e8:	ldr	r0, [sp, #24]
   178ec:	add	r3, sl, #1
   178f0:	cmp	r3, r0
   178f4:	bcs	18164 <lchmod@@Base+0x1a34>
   178f8:	ldr	r0, [sp, #56]	; 0x38
   178fc:	ldrb	r3, [r0, r3]
   17900:	sub	r3, r3, #48	; 0x30
   17904:	cmp	r3, #9
   17908:	bhi	18164 <lchmod@@Base+0x1a34>
   1790c:	cmp	fp, r7
   17910:	movhi	r3, #48	; 0x30
   17914:	ldrhi	r0, [sp, #32]
   17918:	ldr	r5, [sp, #28]
   1791c:	mov	r4, #48	; 0x30
   17920:	strbhi	r3, [r0, r7]
   17924:	add	r3, r1, #2
   17928:	cmp	fp, r3
   1792c:	movhi	r0, #48	; 0x30
   17930:	ldrhi	ip, [sp, #32]
   17934:	add	r7, r1, #3
   17938:	strbhi	r0, [ip, r3]
   1793c:	b	17570 <lchmod@@Base+0xe40>
   17940:	mov	r5, #0
   17944:	ldr	r3, [sp, #152]	; 0x98
   17948:	sub	r2, r3, #2
   1794c:	ldr	r3, [sp, #28]
   17950:	clz	r2, r2
   17954:	lsr	r2, r2, #5
   17958:	ands	r8, r3, r2
   1795c:	beq	17570 <lchmod@@Base+0xe40>
   17960:	mov	r3, r8
   17964:	mov	r2, r3
   17968:	mov	r3, #2
   1796c:	ldr	sl, [sp, #32]
   17970:	mov	r8, fp
   17974:	str	r3, [sp, #152]	; 0x98
   17978:	b	177b0 <lchmod@@Base+0x1080>
   1797c:	ldr	r3, [sp, #152]	; 0x98
   17980:	cmp	r3, #2
   17984:	beq	180a8 <lchmod@@Base+0x1978>
   17988:	cmp	r3, #5
   1798c:	beq	18068 <lchmod@@Base+0x1938>
   17990:	mov	r5, #0
   17994:	sub	r2, r3, #2
   17998:	mov	r8, r5
   1799c:	clz	r2, r2
   179a0:	mov	r4, #63	; 0x3f
   179a4:	lsr	r2, r2, #5
   179a8:	b	17570 <lchmod@@Base+0xe40>
   179ac:	ldr	r3, [sp, #152]	; 0x98
   179b0:	cmp	r3, #2
   179b4:	beq	180c8 <lchmod@@Base+0x1998>
   179b8:	mov	r2, #0
   179bc:	str	r5, [sp, #68]	; 0x44
   179c0:	mov	r8, r2
   179c4:	mov	r4, #39	; 0x27
   179c8:	b	17570 <lchmod@@Base+0xe40>
   179cc:	mov	r4, #13
   179d0:	mov	r3, #114	; 0x72
   179d4:	b	17780 <lchmod@@Base+0x1050>
   179d8:	ldr	r3, [sp, #152]	; 0x98
   179dc:	mov	r8, #0
   179e0:	sub	r2, r3, #2
   179e4:	clz	r2, r2
   179e8:	lsr	r2, r2, #5
   179ec:	b	17570 <lchmod@@Base+0xe40>
   179f0:	ldr	r3, [sp, #152]	; 0x98
   179f4:	mov	r4, #12
   179f8:	sub	r2, r3, #2
   179fc:	mov	r3, #102	; 0x66
   17a00:	clz	r2, r2
   17a04:	lsr	r2, r2, #5
   17a08:	b	176c4 <lchmod@@Base+0xf94>
   17a0c:	mov	r5, r6
   17a10:	b	17944 <lchmod@@Base+0x1214>
   17a14:	ldr	r3, [sp, #152]	; 0x98
   17a18:	sub	r2, r3, #2
   17a1c:	mov	r3, #116	; 0x74
   17a20:	clz	r2, r2
   17a24:	lsr	r2, r2, #5
   17a28:	b	176c4 <lchmod@@Base+0xf94>
   17a2c:	ldr	r8, [sp, #76]	; 0x4c
   17a30:	cmp	r8, #1
   17a34:	bne	17ee4 <lchmod@@Base+0x17b4>
   17a38:	bl	116b0 <__ctype_b_loc@plt>
   17a3c:	sxth	r3, r4
   17a40:	mov	ip, r8
   17a44:	lsl	r3, r3, #1
   17a48:	ldr	r2, [r0]
   17a4c:	ldrh	r3, [r2, r3]
   17a50:	and	r3, r3, #16384	; 0x4000
   17a54:	cmp	r3, #0
   17a58:	movne	r5, #1
   17a5c:	moveq	r5, #0
   17a60:	moveq	r3, #1
   17a64:	movne	r3, #0
   17a68:	ldr	r2, [sp, #44]	; 0x2c
   17a6c:	and	r3, r3, r2
   17a70:	ands	r8, r3, #255	; 0xff
   17a74:	bne	17d78 <lchmod@@Base+0x1648>
   17a78:	ldr	r3, [sp, #152]	; 0x98
   17a7c:	sub	r2, r3, #2
   17a80:	clz	r2, r2
   17a84:	lsr	r2, r2, #5
   17a88:	b	17570 <lchmod@@Base+0xe40>
   17a8c:	ldr	r3, [sp, #56]	; 0x38
   17a90:	add	r3, r3, sl
   17a94:	str	r3, [sp, #48]	; 0x30
   17a98:	ldr	r3, [sp, #48]	; 0x30
   17a9c:	mov	r6, #0
   17aa0:	ldrb	r4, [r3]
   17aa4:	cmp	r4, #126	; 0x7e
   17aa8:	ldrls	pc, [pc, r4, lsl #2]
   17aac:	b	17a2c <lchmod@@Base+0x12fc>
   17ab0:	andeq	r7, r1, r0, asr r8
   17ab4:	andeq	r7, r1, ip, lsr #20
   17ab8:	andeq	r7, r1, ip, lsr #20
   17abc:	andeq	r7, r1, ip, lsr #20
   17ac0:	andeq	r7, r1, ip, lsr #20
   17ac4:	andeq	r7, r1, ip, lsr #20
   17ac8:	andeq	r7, r1, ip, lsr #20
   17acc:	andeq	r7, r1, r4, lsr r8
   17ad0:	andeq	r7, r1, r8, lsl r8
   17ad4:	andeq	r7, r1, ip, lsr #25
   17ad8:	andeq	r7, r1, r8, ror r7
   17adc:	andeq	r7, r1, ip, asr r7
   17ae0:	strdeq	r7, [r1], -r0
   17ae4:	andeq	r7, r1, ip, asr #19
   17ae8:	andeq	r7, r1, ip, lsr #20
   17aec:	andeq	r7, r1, ip, lsr #20
   17af0:	andeq	r7, r1, ip, lsr #20
   17af4:	andeq	r7, r1, ip, lsr #20
   17af8:	andeq	r7, r1, ip, lsr #20
   17afc:	andeq	r7, r1, ip, lsr #20
   17b00:	andeq	r7, r1, ip, lsr #20
   17b04:	andeq	r7, r1, ip, lsr #20
   17b08:	andeq	r7, r1, ip, lsr #20
   17b0c:	andeq	r7, r1, ip, lsr #20
   17b10:	andeq	r7, r1, ip, lsr #20
   17b14:	andeq	r7, r1, ip, lsr #20
   17b18:	andeq	r7, r1, ip, lsr #20
   17b1c:	andeq	r7, r1, ip, lsr #20
   17b20:	andeq	r7, r1, ip, lsr #20
   17b24:	andeq	r7, r1, ip, lsr #20
   17b28:	andeq	r7, r1, ip, lsr #20
   17b2c:	andeq	r7, r1, ip, lsr #20
   17b30:	andeq	r7, r1, r4, asr #18
   17b34:	andeq	r7, r1, r0, asr #18
   17b38:	andeq	r7, r1, r0, asr #18
   17b3c:	andeq	r7, r1, r0, asr r5
   17b40:	andeq	r7, r1, r0, asr #18
   17b44:	ldrdeq	r7, [r1], -r8
   17b48:	andeq	r7, r1, r0, asr #18
   17b4c:	andeq	r7, r1, ip, lsr #19
   17b50:	andeq	r7, r1, r0, asr #18
   17b54:	andeq	r7, r1, r0, asr #18
   17b58:	andeq	r7, r1, r0, asr #18
   17b5c:	ldrdeq	r7, [r1], -r8
   17b60:	ldrdeq	r7, [r1], -r8
   17b64:	ldrdeq	r7, [r1], -r8
   17b68:	ldrdeq	r7, [r1], -r8
   17b6c:	ldrdeq	r7, [r1], -r8
   17b70:	ldrdeq	r7, [r1], -r8
   17b74:	ldrdeq	r7, [r1], -r8
   17b78:	ldrdeq	r7, [r1], -r8
   17b7c:	ldrdeq	r7, [r1], -r8
   17b80:	ldrdeq	r7, [r1], -r8
   17b84:	ldrdeq	r7, [r1], -r8
   17b88:	ldrdeq	r7, [r1], -r8
   17b8c:	ldrdeq	r7, [r1], -r8
   17b90:	ldrdeq	r7, [r1], -r8
   17b94:	ldrdeq	r7, [r1], -r8
   17b98:	ldrdeq	r7, [r1], -r8
   17b9c:	andeq	r7, r1, r0, asr #18
   17ba0:	andeq	r7, r1, r0, asr #18
   17ba4:	andeq	r7, r1, r0, asr #18
   17ba8:	andeq	r7, r1, r0, asr #18
   17bac:	andeq	r7, r1, ip, ror r9
   17bb0:	andeq	r7, r1, ip, lsr #20
   17bb4:	ldrdeq	r7, [r1], -r8
   17bb8:	ldrdeq	r7, [r1], -r8
   17bbc:	ldrdeq	r7, [r1], -r8
   17bc0:	ldrdeq	r7, [r1], -r8
   17bc4:	ldrdeq	r7, [r1], -r8
   17bc8:	ldrdeq	r7, [r1], -r8
   17bcc:	ldrdeq	r7, [r1], -r8
   17bd0:	ldrdeq	r7, [r1], -r8
   17bd4:	ldrdeq	r7, [r1], -r8
   17bd8:	ldrdeq	r7, [r1], -r8
   17bdc:	ldrdeq	r7, [r1], -r8
   17be0:	ldrdeq	r7, [r1], -r8
   17be4:	ldrdeq	r7, [r1], -r8
   17be8:	ldrdeq	r7, [r1], -r8
   17bec:	ldrdeq	r7, [r1], -r8
   17bf0:	ldrdeq	r7, [r1], -r8
   17bf4:	ldrdeq	r7, [r1], -r8
   17bf8:	ldrdeq	r7, [r1], -r8
   17bfc:	ldrdeq	r7, [r1], -r8
   17c00:	ldrdeq	r7, [r1], -r8
   17c04:	ldrdeq	r7, [r1], -r8
   17c08:	ldrdeq	r7, [r1], -r8
   17c0c:	ldrdeq	r7, [r1], -r8
   17c10:	ldrdeq	r7, [r1], -r8
   17c14:	ldrdeq	r7, [r1], -r8
   17c18:	ldrdeq	r7, [r1], -r8
   17c1c:	andeq	r7, r1, r0, asr #18
   17c20:	muleq	r1, ip, r6
   17c24:	ldrdeq	r7, [r1], -r8
   17c28:	andeq	r7, r1, r0, asr #18
   17c2c:	ldrdeq	r7, [r1], -r8
   17c30:	andeq	r7, r1, r0, asr #18
   17c34:	ldrdeq	r7, [r1], -r8
   17c38:	ldrdeq	r7, [r1], -r8
   17c3c:	ldrdeq	r7, [r1], -r8
   17c40:	ldrdeq	r7, [r1], -r8
   17c44:	ldrdeq	r7, [r1], -r8
   17c48:	ldrdeq	r7, [r1], -r8
   17c4c:	ldrdeq	r7, [r1], -r8
   17c50:	ldrdeq	r7, [r1], -r8
   17c54:	ldrdeq	r7, [r1], -r8
   17c58:	ldrdeq	r7, [r1], -r8
   17c5c:	ldrdeq	r7, [r1], -r8
   17c60:	ldrdeq	r7, [r1], -r8
   17c64:	ldrdeq	r7, [r1], -r8
   17c68:	ldrdeq	r7, [r1], -r8
   17c6c:	ldrdeq	r7, [r1], -r8
   17c70:	ldrdeq	r7, [r1], -r8
   17c74:	ldrdeq	r7, [r1], -r8
   17c78:	ldrdeq	r7, [r1], -r8
   17c7c:	ldrdeq	r7, [r1], -r8
   17c80:	ldrdeq	r7, [r1], -r8
   17c84:	ldrdeq	r7, [r1], -r8
   17c88:	ldrdeq	r7, [r1], -r8
   17c8c:	ldrdeq	r7, [r1], -r8
   17c90:	ldrdeq	r7, [r1], -r8
   17c94:	ldrdeq	r7, [r1], -r8
   17c98:	ldrdeq	r7, [r1], -r8
   17c9c:	andeq	r7, r1, r0, lsr r5
   17ca0:	andeq	r7, r1, r0, asr #18
   17ca4:	andeq	r7, r1, r0, lsr r5
   17ca8:	andeq	r7, r1, r0, asr r5
   17cac:	mov	r3, #116	; 0x74
   17cb0:	b	17780 <lchmod@@Base+0x1050>
   17cb4:	ldr	r3, [sp, #160]	; 0xa0
   17cb8:	cmp	r3, #0
   17cbc:	beq	1758c <lchmod@@Base+0xe5c>
   17cc0:	lsr	r3, r4, #5
   17cc4:	ldr	r0, [sp, #160]	; 0xa0
   17cc8:	uxtb	r3, r3
   17ccc:	and	r1, r4, #31
   17cd0:	ldr	r0, [r0, r3, lsl #2]
   17cd4:	lsr	r3, r0, r1
   17cd8:	tst	r3, #1
   17cdc:	beq	1758c <lchmod@@Base+0xe5c>
   17ce0:	ldr	r3, [sp, #28]
   17ce4:	cmp	r3, #0
   17ce8:	beq	176ec <lchmod@@Base+0xfbc>
   17cec:	ldr	sl, [sp, #32]
   17cf0:	mov	r8, fp
   17cf4:	b	177b0 <lchmod@@Base+0x1080>
   17cf8:	ldr	r3, [sp, #28]
   17cfc:	cmp	r3, #0
   17d00:	bne	18254 <lchmod@@Base+0x1b24>
   17d04:	add	sl, sl, #1
   17d08:	ldr	r6, [sp, #40]	; 0x28
   17d0c:	mov	r5, #0
   17d10:	mov	r4, #92	; 0x5c
   17d14:	b	175a8 <lchmod@@Base+0xe78>
   17d18:	cmp	r9, r8
   17d1c:	bne	17f8c <lchmod@@Base+0x185c>
   17d20:	ldr	r0, [sp, #100]	; 0x64
   17d24:	bl	115cc <iswprint@plt>
   17d28:	add	r5, r5, r4
   17d2c:	cmp	r0, #0
   17d30:	add	r0, sp, #104	; 0x68
   17d34:	moveq	r6, #0
   17d38:	bl	11548 <mbsinit@plt>
   17d3c:	cmp	r0, #0
   17d40:	beq	17f20 <lchmod@@Base+0x17f0>
   17d44:	mov	r2, r6
   17d48:	mov	ip, r5
   17d4c:	eor	r5, r2, #1
   17d50:	ldr	r4, [sp, #80]	; 0x50
   17d54:	ldr	r6, [sp, #84]	; 0x54
   17d58:	ldr	r7, [sp, #88]	; 0x58
   17d5c:	uxtb	r5, r5
   17d60:	cmp	ip, #1
   17d64:	bls	18264 <lchmod@@Base+0x1b34>
   17d68:	ldr	r3, [sp, #44]	; 0x2c
   17d6c:	and	r8, r3, r5
   17d70:	mov	r5, r2
   17d74:	uxtb	r8, r8
   17d78:	add	r2, sl, ip
   17d7c:	ldr	r0, [sp, #48]	; 0x30
   17d80:	mov	r1, #0
   17d84:	str	r5, [sp, #48]	; 0x30
   17d88:	ldr	r9, [sp, #28]
   17d8c:	ldr	ip, [sp, #40]	; 0x28
   17d90:	ldr	r3, [sp, #32]
   17d94:	ldr	r5, [sp, #152]	; 0x98
   17d98:	b	17e54 <lchmod@@Base+0x1724>
   17d9c:	cmp	r9, #0
   17da0:	bne	18178 <lchmod@@Base+0x1a48>
   17da4:	eor	r1, ip, #1
   17da8:	cmp	r5, #2
   17dac:	movne	r1, #0
   17db0:	andeq	r1, r1, #1
   17db4:	cmp	r1, #0
   17db8:	beq	17df0 <lchmod@@Base+0x16c0>
   17dbc:	cmp	fp, r7
   17dc0:	movhi	ip, #39	; 0x27
   17dc4:	strbhi	ip, [r3, r7]
   17dc8:	add	ip, r7, #1
   17dcc:	cmp	fp, ip
   17dd0:	movhi	lr, #36	; 0x24
   17dd4:	strbhi	lr, [r3, ip]
   17dd8:	add	ip, r7, #2
   17ddc:	cmp	fp, ip
   17de0:	movhi	lr, #39	; 0x27
   17de4:	strbhi	lr, [r3, ip]
   17de8:	add	r7, r7, #3
   17dec:	mov	ip, r1
   17df0:	cmp	fp, r7
   17df4:	movhi	r1, #92	; 0x5c
   17df8:	strbhi	r1, [r3, r7]
   17dfc:	add	r1, r7, #1
   17e00:	cmp	fp, r1
   17e04:	lsrhi	lr, r4, #6
   17e08:	addhi	lr, lr, #48	; 0x30
   17e0c:	strbhi	lr, [r3, r1]
   17e10:	add	lr, r7, #2
   17e14:	cmp	fp, lr
   17e18:	lsrhi	r1, r4, #3
   17e1c:	andhi	r1, r1, #7
   17e20:	addhi	r1, r1, #48	; 0x30
   17e24:	add	sl, sl, #1
   17e28:	strbhi	r1, [r3, lr]
   17e2c:	and	r4, r4, #7
   17e30:	cmp	r2, sl
   17e34:	add	r4, r4, #48	; 0x30
   17e38:	add	r7, r7, #3
   17e3c:	bls	1819c <lchmod@@Base+0x1a6c>
   17e40:	mov	r1, r8
   17e44:	cmp	fp, r7
   17e48:	strbhi	r4, [r3, r7]
   17e4c:	ldrb	r4, [r0, #1]!
   17e50:	add	r7, r7, #1
   17e54:	cmp	r8, #0
   17e58:	bne	17d9c <lchmod@@Base+0x166c>
   17e5c:	cmp	r6, #0
   17e60:	bne	17eb0 <lchmod@@Base+0x1780>
   17e64:	eor	r6, r1, #1
   17e68:	and	r6, r6, ip
   17e6c:	add	sl, sl, #1
   17e70:	cmp	r2, sl
   17e74:	uxtb	r6, r6
   17e78:	bls	17ed8 <lchmod@@Base+0x17a8>
   17e7c:	cmp	r6, #0
   17e80:	beq	17e44 <lchmod@@Base+0x1714>
   17e84:	cmp	fp, r7
   17e88:	movhi	ip, #39	; 0x27
   17e8c:	strbhi	ip, [r3, r7]
   17e90:	add	ip, r7, #1
   17e94:	cmp	fp, ip
   17e98:	movhi	lr, #39	; 0x27
   17e9c:	strbhi	lr, [r3, ip]
   17ea0:	add	r7, r7, #2
   17ea4:	mov	r6, r8
   17ea8:	mov	ip, r8
   17eac:	b	17e44 <lchmod@@Base+0x1714>
   17eb0:	cmp	fp, r7
   17eb4:	eor	r6, r1, #1
   17eb8:	movhi	lr, #92	; 0x5c
   17ebc:	and	r6, r6, ip
   17ec0:	add	sl, sl, #1
   17ec4:	strbhi	lr, [r3, r7]
   17ec8:	cmp	r2, sl
   17ecc:	add	r7, r7, #1
   17ed0:	uxtb	r6, r6
   17ed4:	bhi	17e7c <lchmod@@Base+0x174c>
   17ed8:	str	ip, [sp, #40]	; 0x28
   17edc:	ldr	r5, [sp, #48]	; 0x30
   17ee0:	b	175a8 <lchmod@@Base+0xe78>
   17ee4:	ldr	r3, [sp, #24]
   17ee8:	cmn	r3, #1
   17eec:	mov	r3, #0
   17ef0:	str	r3, [sp, #104]	; 0x68
   17ef4:	str	r3, [sp, #108]	; 0x6c
   17ef8:	beq	18218 <lchmod@@Base+0x1ae8>
   17efc:	mov	r2, r5
   17f00:	mov	r3, #0
   17f04:	str	r7, [sp, #88]	; 0x58
   17f08:	ldr	r7, [sp, #152]	; 0x98
   17f0c:	str	r5, [sp, #92]	; 0x5c
   17f10:	str	r6, [sp, #84]	; 0x54
   17f14:	mov	r5, r3
   17f18:	mov	r6, r2
   17f1c:	str	r4, [sp, #80]	; 0x50
   17f20:	ldr	r3, [sp, #56]	; 0x38
   17f24:	add	r9, sl, r5
   17f28:	add	r8, r3, r9
   17f2c:	ldr	r3, [sp, #24]
   17f30:	mov	r1, r8
   17f34:	sub	r2, r3, r9
   17f38:	add	r0, sp, #100	; 0x64
   17f3c:	add	r3, sp, #104	; 0x68
   17f40:	bl	1a770 <lchmod@@Base+0x4040>
   17f44:	subs	r4, r0, #0
   17f48:	beq	182f0 <lchmod@@Base+0x1bc0>
   17f4c:	cmn	r4, #1
   17f50:	beq	182d0 <lchmod@@Base+0x1ba0>
   17f54:	cmn	r4, #2
   17f58:	beq	18270 <lchmod@@Base+0x1b40>
   17f5c:	ldr	r2, [sp, #28]
   17f60:	cmp	r7, #2
   17f64:	movne	r2, #0
   17f68:	andeq	r2, r2, #1
   17f6c:	cmp	r2, #0
   17f70:	beq	17d20 <lchmod@@Base+0x15f0>
   17f74:	cmp	r4, #1
   17f78:	beq	17d20 <lchmod@@Base+0x15f0>
   17f7c:	sub	r3, r4, #1
   17f80:	add	r9, r3, r9
   17f84:	ldr	r3, [sp, #56]	; 0x38
   17f88:	add	r9, r3, r9
   17f8c:	ldrb	r3, [r8, #1]!
   17f90:	sub	r3, r3, #91	; 0x5b
   17f94:	cmp	r3, #33	; 0x21
   17f98:	ldrls	pc, [pc, r3, lsl #2]
   17f9c:	b	17d18 <lchmod@@Base+0x15e8>
   17fa0:	andeq	r8, r1, r8, lsr #32
   17fa4:	andeq	r8, r1, r8, lsr #32
   17fa8:	andeq	r7, r1, r8, lsl sp
   17fac:	andeq	r8, r1, r8, lsr #32
   17fb0:	andeq	r7, r1, r8, lsl sp
   17fb4:	andeq	r8, r1, r8, lsr #32
   17fb8:	andeq	r7, r1, r8, lsl sp
   17fbc:	andeq	r7, r1, r8, lsl sp
   17fc0:	andeq	r7, r1, r8, lsl sp
   17fc4:	andeq	r7, r1, r8, lsl sp
   17fc8:	andeq	r7, r1, r8, lsl sp
   17fcc:	andeq	r7, r1, r8, lsl sp
   17fd0:	andeq	r7, r1, r8, lsl sp
   17fd4:	andeq	r7, r1, r8, lsl sp
   17fd8:	andeq	r7, r1, r8, lsl sp
   17fdc:	andeq	r7, r1, r8, lsl sp
   17fe0:	andeq	r7, r1, r8, lsl sp
   17fe4:	andeq	r7, r1, r8, lsl sp
   17fe8:	andeq	r7, r1, r8, lsl sp
   17fec:	andeq	r7, r1, r8, lsl sp
   17ff0:	andeq	r7, r1, r8, lsl sp
   17ff4:	andeq	r7, r1, r8, lsl sp
   17ff8:	andeq	r7, r1, r8, lsl sp
   17ffc:	andeq	r7, r1, r8, lsl sp
   18000:	andeq	r7, r1, r8, lsl sp
   18004:	andeq	r7, r1, r8, lsl sp
   18008:	andeq	r7, r1, r8, lsl sp
   1800c:	andeq	r7, r1, r8, lsl sp
   18010:	andeq	r7, r1, r8, lsl sp
   18014:	andeq	r7, r1, r8, lsl sp
   18018:	andeq	r7, r1, r8, lsl sp
   1801c:	andeq	r7, r1, r8, lsl sp
   18020:	andeq	r7, r1, r8, lsl sp
   18024:	andeq	r8, r1, r8, lsr #32
   18028:	mov	r3, #2
   1802c:	ldr	sl, [sp, #32]
   18030:	mov	r8, fp
   18034:	str	r3, [sp, #152]	; 0x98
   18038:	b	177b0 <lchmod@@Base+0x1080>
   1803c:	ldr	r3, [sp, #156]	; 0x9c
   18040:	tst	r3, #1
   18044:	bne	18170 <lchmod@@Base+0x1a40>
   18048:	ldr	r3, [sp, #152]	; 0x98
   1804c:	ldr	r4, [sp, #44]	; 0x2c
   18050:	sub	r2, r3, #2
   18054:	mov	r5, #0
   18058:	clz	r2, r2
   1805c:	mov	r8, r4
   18060:	lsr	r2, r2, #5
   18064:	b	17570 <lchmod@@Base+0xe40>
   18068:	ldr	r3, [sp, #156]	; 0x9c
   1806c:	ands	r9, r3, #4
   18070:	beq	181a8 <lchmod@@Base+0x1a78>
   18074:	ldr	r2, [sp, #24]
   18078:	add	r3, sl, #2
   1807c:	cmp	r3, r2
   18080:	bcs	18094 <lchmod@@Base+0x1964>
   18084:	ldr	r2, [sp, #48]	; 0x30
   18088:	ldrb	r4, [r2, #1]
   1808c:	cmp	r4, #63	; 0x3f
   18090:	beq	18330 <lchmod@@Base+0x1c00>
   18094:	mov	r2, #0
   18098:	mov	r8, r2
   1809c:	mov	r5, r2
   180a0:	mov	r4, #63	; 0x3f
   180a4:	b	17570 <lchmod@@Base+0xe40>
   180a8:	ldr	r3, [sp, #28]
   180ac:	cmp	r3, #0
   180b0:	bne	183d4 <lchmod@@Base+0x1ca4>
   180b4:	mov	r2, r5
   180b8:	mov	r8, r3
   180bc:	mov	r5, #0
   180c0:	mov	r4, #63	; 0x3f
   180c4:	b	17570 <lchmod@@Base+0xe40>
   180c8:	ldr	r3, [sp, #28]
   180cc:	cmp	r3, #0
   180d0:	bne	183d4 <lchmod@@Base+0x1ca4>
   180d4:	ldr	r2, [sp, #72]	; 0x48
   180d8:	adds	r3, fp, #0
   180dc:	movne	r3, #1
   180e0:	cmp	r2, #0
   180e4:	movne	r3, #0
   180e8:	cmp	r3, #0
   180ec:	strne	fp, [sp, #72]	; 0x48
   180f0:	movne	fp, #0
   180f4:	bne	18130 <lchmod@@Base+0x1a00>
   180f8:	cmp	fp, r7
   180fc:	movhi	r2, #39	; 0x27
   18100:	ldrhi	r3, [sp, #32]
   18104:	strbhi	r2, [r3, r7]
   18108:	add	r3, r7, #1
   1810c:	cmp	fp, r3
   18110:	movhi	r1, #92	; 0x5c
   18114:	ldrhi	r2, [sp, #32]
   18118:	strbhi	r1, [r2, r3]
   1811c:	add	r3, r7, #2
   18120:	cmp	fp, r3
   18124:	movhi	r1, #39	; 0x27
   18128:	ldrhi	r2, [sp, #32]
   1812c:	strbhi	r1, [r2, r3]
   18130:	ldr	r3, [sp, #28]
   18134:	add	r7, r7, #3
   18138:	mov	r2, r5
   1813c:	mov	r8, r3
   18140:	str	r5, [sp, #68]	; 0x44
   18144:	str	r3, [sp, #40]	; 0x28
   18148:	mov	r4, #39	; 0x27
   1814c:	b	17570 <lchmod@@Base+0xe40>
   18150:	ldr	r3, [sp, #56]	; 0x38
   18154:	ldrb	r3, [r3, #1]
   18158:	adds	r3, r3, #0
   1815c:	movne	r3, #1
   18160:	b	17548 <lchmod@@Base+0xe18>
   18164:	ldr	r5, [sp, #28]
   18168:	mov	r4, #48	; 0x30
   1816c:	b	17570 <lchmod@@Base+0xe40>
   18170:	add	sl, sl, #1
   18174:	b	170a0 <lchmod@@Base+0x970>
   18178:	mov	sl, r3
   1817c:	ldr	r3, [sp, #28]
   18180:	mov	r8, fp
   18184:	str	r3, [sp, #44]	; 0x2c
   18188:	ldr	r3, [sp, #152]	; 0x98
   1818c:	sub	r2, r3, #2
   18190:	clz	r2, r2
   18194:	lsr	r2, r2, #5
   18198:	b	177b0 <lchmod@@Base+0x1080>
   1819c:	str	ip, [sp, #40]	; 0x28
   181a0:	ldr	r5, [sp, #48]	; 0x30
   181a4:	b	175e0 <lchmod@@Base+0xeb0>
   181a8:	mov	r2, r9
   181ac:	mov	r8, r9
   181b0:	mov	r5, #0
   181b4:	mov	r4, #63	; 0x3f
   181b8:	b	17570 <lchmod@@Base+0xe40>
   181bc:	cmp	fp, #0
   181c0:	beq	18238 <lchmod@@Base+0x1b08>
   181c4:	ldr	r1, [sp, #32]
   181c8:	mov	r3, #34	; 0x22
   181cc:	mov	r2, #1
   181d0:	strb	r3, [r1]
   181d4:	ldr	r3, [pc, #332]	; 18328 <lchmod@@Base+0x1bf8>
   181d8:	str	r2, [sp, #52]	; 0x34
   181dc:	mov	r7, r2
   181e0:	str	r2, [sp, #44]	; 0x2c
   181e4:	str	r3, [sp, #64]	; 0x40
   181e8:	b	17090 <lchmod@@Base+0x960>
   181ec:	ldr	r3, [pc, #300]	; 18320 <lchmod@@Base+0x1bf0>
   181f0:	str	r3, [sp, #64]	; 0x40
   181f4:	mov	r3, #0
   181f8:	str	r3, [sp, #28]
   181fc:	mov	r3, #1
   18200:	str	r3, [sp, #52]	; 0x34
   18204:	mov	r7, r3
   18208:	mov	r3, #2
   1820c:	str	r3, [sp, #152]	; 0x98
   18210:	b	17090 <lchmod@@Base+0x960>
   18214:	bl	11878 <abort@plt>
   18218:	ldr	r0, [sp, #56]	; 0x38
   1821c:	bl	116e0 <strlen@plt>
   18220:	str	r0, [sp, #24]
   18224:	b	17efc <lchmod@@Base+0x17cc>
   18228:	mov	r5, r8
   1822c:	mov	r4, #48	; 0x30
   18230:	ldr	r8, [sp, #44]	; 0x2c
   18234:	b	17570 <lchmod@@Base+0xe40>
   18238:	mov	r3, #1
   1823c:	str	r3, [sp, #52]	; 0x34
   18240:	mov	r7, r3
   18244:	str	r3, [sp, #44]	; 0x2c
   18248:	ldr	r3, [pc, #216]	; 18328 <lchmod@@Base+0x1bf8>
   1824c:	str	r3, [sp, #64]	; 0x40
   18250:	b	17090 <lchmod@@Base+0x960>
   18254:	ldr	sl, [sp, #32]
   18258:	mov	r8, fp
   1825c:	mov	r2, r3
   18260:	b	177b0 <lchmod@@Base+0x1080>
   18264:	mov	r3, r5
   18268:	mov	r5, r2
   1826c:	b	17a68 <lchmod@@Base+0x1338>
   18270:	ldr	r1, [sp, #24]
   18274:	mov	r2, r5
   18278:	cmp	r1, r9
   1827c:	mov	ip, r5
   18280:	ldr	r4, [sp, #80]	; 0x50
   18284:	ldr	r5, [sp, #92]	; 0x5c
   18288:	ldr	r6, [sp, #84]	; 0x54
   1828c:	ldr	r7, [sp, #88]	; 0x58
   18290:	bls	182c4 <lchmod@@Base+0x1b94>
   18294:	ldrb	r3, [r8]
   18298:	cmp	r3, #0
   1829c:	bne	182b0 <lchmod@@Base+0x1b80>
   182a0:	b	182c8 <lchmod@@Base+0x1b98>
   182a4:	ldrb	r3, [r8, #1]!
   182a8:	cmp	r3, #0
   182ac:	beq	183c8 <lchmod@@Base+0x1c98>
   182b0:	add	r2, r2, #1
   182b4:	add	r3, sl, r2
   182b8:	cmp	r1, r3
   182bc:	bhi	182a4 <lchmod@@Base+0x1b74>
   182c0:	mov	ip, r2
   182c4:	mov	r3, #0
   182c8:	mov	r2, r3
   182cc:	b	17d60 <lchmod@@Base+0x1630>
   182d0:	mov	r3, #0
   182d4:	mov	ip, r5
   182d8:	ldr	r4, [sp, #80]	; 0x50
   182dc:	ldr	r5, [sp, #92]	; 0x5c
   182e0:	ldr	r6, [sp, #84]	; 0x54
   182e4:	ldr	r7, [sp, #88]	; 0x58
   182e8:	mov	r2, r3
   182ec:	b	17d60 <lchmod@@Base+0x1630>
   182f0:	mov	r3, r6
   182f4:	mov	ip, r5
   182f8:	eor	r5, r3, #1
   182fc:	mov	r2, r6
   18300:	ldr	r4, [sp, #80]	; 0x50
   18304:	ldr	r6, [sp, #84]	; 0x54
   18308:	ldr	r7, [sp, #88]	; 0x58
   1830c:	uxtb	r5, r5
   18310:	b	17d60 <lchmod@@Base+0x1630>
   18314:	ldr	sl, [sp, #32]
   18318:	mov	r8, fp
   1831c:	b	18184 <lchmod@@Base+0x1a54>
   18320:	ldrdeq	fp, [r1], -r0
   18324:	ldrdeq	fp, [r1], -r4
   18328:	andeq	fp, r1, ip, asr #19
   1832c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   18330:	ldr	r2, [sp, #56]	; 0x38
   18334:	ldrb	r1, [r2, r3]
   18338:	sub	r2, r1, #33	; 0x21
   1833c:	uxtb	r2, r2
   18340:	cmp	r2, #29
   18344:	bhi	183e4 <lchmod@@Base+0x1cb4>
   18348:	ldr	r0, [pc, #-36]	; 1832c <lchmod@@Base+0x1bfc>
   1834c:	mov	ip, #1
   18350:	ands	r2, r0, ip, lsl r2
   18354:	beq	183f4 <lchmod@@Base+0x1cc4>
   18358:	ldr	r2, [sp, #28]
   1835c:	cmp	r2, #0
   18360:	bne	184f4 <lchmod@@Base+0x1dc4>
   18364:	cmp	fp, r7
   18368:	ldr	r8, [sp, #28]
   1836c:	ldrhi	r2, [sp, #32]
   18370:	mov	sl, r3
   18374:	mov	r5, r8
   18378:	strbhi	r4, [r2, r7]
   1837c:	add	r2, r7, #1
   18380:	cmp	fp, r2
   18384:	movhi	r0, #34	; 0x22
   18388:	ldrhi	ip, [sp, #32]
   1838c:	mov	r4, r1
   18390:	strbhi	r0, [ip, r2]
   18394:	add	r2, r7, #2
   18398:	cmp	fp, r2
   1839c:	movhi	r0, #34	; 0x22
   183a0:	ldrhi	ip, [sp, #32]
   183a4:	strbhi	r0, [ip, r2]
   183a8:	add	r2, r7, #3
   183ac:	cmp	fp, r2
   183b0:	movhi	r0, #63	; 0x3f
   183b4:	ldrhi	ip, [sp, #32]
   183b8:	add	r7, r7, #4
   183bc:	strbhi	r0, [ip, r2]
   183c0:	mov	r2, r8
   183c4:	b	17570 <lchmod@@Base+0xe40>
   183c8:	mov	ip, r2
   183cc:	mov	r2, r3
   183d0:	b	17d60 <lchmod@@Base+0x1630>
   183d4:	ldr	sl, [sp, #32]
   183d8:	mov	r8, fp
   183dc:	ldr	r2, [sp, #28]
   183e0:	b	177b0 <lchmod@@Base+0x1080>
   183e4:	mov	r2, #0
   183e8:	mov	r8, r2
   183ec:	mov	r5, r2
   183f0:	b	17570 <lchmod@@Base+0xe40>
   183f4:	mov	r8, r2
   183f8:	mov	r5, #0
   183fc:	b	17570 <lchmod@@Base+0xe40>
   18400:	ldr	r1, [sp, #152]	; 0x98
   18404:	bl	16ecc <lchmod@@Base+0x79c>
   18408:	str	r0, [sp, #168]	; 0xa8
   1840c:	b	1742c <lchmod@@Base+0xcfc>
   18410:	ldr	r1, [sp, #152]	; 0x98
   18414:	bl	16ecc <lchmod@@Base+0x79c>
   18418:	str	r0, [sp, #164]	; 0xa4
   1841c:	b	1740c <lchmod@@Base+0xcdc>
   18420:	ldr	r7, [sp, #28]
   18424:	b	1746c <lchmod@@Base+0xd3c>
   18428:	ldr	sl, [sp, #32]
   1842c:	ldr	r2, [sp, #68]	; 0x44
   18430:	mov	r8, fp
   18434:	mov	fp, r7
   18438:	ldr	r3, [sp, #64]	; 0x40
   1843c:	cmp	r3, #0
   18440:	moveq	r2, #0
   18444:	andne	r2, r2, #1
   18448:	cmp	r2, #0
   1844c:	beq	18478 <lchmod@@Base+0x1d48>
   18450:	mov	r2, r3
   18454:	ldrb	r3, [r3]
   18458:	cmp	r3, #0
   1845c:	beq	18478 <lchmod@@Base+0x1d48>
   18460:	cmp	r8, fp
   18464:	strbhi	r3, [sl, fp]
   18468:	ldrb	r3, [r2, #1]!
   1846c:	add	fp, fp, #1
   18470:	cmp	r3, #0
   18474:	bne	18460 <lchmod@@Base+0x1d30>
   18478:	cmp	r8, fp
   1847c:	movhi	r3, #0
   18480:	strbhi	r3, [sl, fp]
   18484:	b	1780c <lchmod@@Base+0x10dc>
   18488:	ldr	r3, [sp, #168]	; 0xa8
   1848c:	ldr	sl, [sp, #32]
   18490:	str	r3, [sp, #16]
   18494:	ldr	r3, [sp, #164]	; 0xa4
   18498:	mov	ip, #5
   1849c:	str	r3, [sp, #12]
   184a0:	ldr	r3, [sp, #160]	; 0xa0
   184a4:	ldr	r2, [sp, #56]	; 0x38
   184a8:	str	r3, [sp, #8]
   184ac:	ldr	r3, [sp, #156]	; 0x9c
   184b0:	ldr	r1, [sp, #72]	; 0x48
   184b4:	str	r3, [sp, #4]
   184b8:	mov	r0, sl
   184bc:	ldr	r3, [sp, #24]
   184c0:	str	ip, [sp]
   184c4:	bl	16fec <lchmod@@Base+0x8bc>
   184c8:	mov	fp, r0
   184cc:	b	1780c <lchmod@@Base+0x10dc>
   184d0:	mov	r8, fp
   184d4:	ldr	sl, [sp, #32]
   184d8:	mov	fp, r7
   184dc:	mov	r2, r3
   184e0:	b	18438 <lchmod@@Base+0x1d08>
   184e4:	mov	r8, fp
   184e8:	ldr	sl, [sp, #32]
   184ec:	mov	fp, r7
   184f0:	b	18438 <lchmod@@Base+0x1d08>
   184f4:	ldr	sl, [sp, #32]
   184f8:	mov	r8, fp
   184fc:	b	177c8 <lchmod@@Base+0x1098>
   18500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18504:	sub	sp, sp, #52	; 0x34
   18508:	mov	r4, r0
   1850c:	mov	r5, r3
   18510:	mov	sl, r1
   18514:	mov	fp, r2
   18518:	bl	1171c <__errno_location@plt>
   1851c:	ldr	r7, [pc, #412]	; 186c0 <lchmod@@Base+0x1f90>
   18520:	cmn	r4, #-2147483647	; 0x80000001
   18524:	ldr	r6, [r7]
   18528:	mov	r8, r0
   1852c:	movne	r0, #0
   18530:	moveq	r0, #1
   18534:	ldr	r3, [r8]
   18538:	orrs	r0, r0, r4, lsr #31
   1853c:	str	r3, [sp, #24]
   18540:	bne	186bc <lchmod@@Base+0x1f8c>
   18544:	ldr	r2, [r7, #4]
   18548:	cmp	r4, r2
   1854c:	blt	185ac <lchmod@@Base+0x1e7c>
   18550:	add	r9, r7, #8
   18554:	cmp	r6, r9
   18558:	str	r2, [sp, #44]	; 0x2c
   1855c:	beq	1868c <lchmod@@Base+0x1f5c>
   18560:	mov	r3, #8
   18564:	sub	r2, r4, r2
   18568:	mov	r0, r6
   1856c:	str	r3, [sp]
   18570:	add	r2, r2, #1
   18574:	mvn	r3, #-2147483648	; 0x80000000
   18578:	add	r1, sp, #44	; 0x2c
   1857c:	bl	195b0 <lchmod@@Base+0x2e80>
   18580:	mov	r6, r0
   18584:	str	r0, [r7]
   18588:	ldr	r0, [r7, #4]
   1858c:	ldr	r2, [sp, #44]	; 0x2c
   18590:	mov	r1, #0
   18594:	sub	r2, r2, r0
   18598:	add	r0, r6, r0, lsl #3
   1859c:	lsl	r2, r2, #3
   185a0:	bl	11740 <memset@plt>
   185a4:	ldr	r3, [sp, #44]	; 0x2c
   185a8:	str	r3, [r7, #4]
   185ac:	add	r3, r6, r4, lsl #3
   185b0:	ldr	r1, [r5, #4]
   185b4:	ldr	r7, [r3, #4]
   185b8:	ldr	r9, [r6, r4, lsl #3]
   185bc:	ldr	r2, [r5, #40]	; 0x28
   185c0:	ldr	ip, [r5, #44]	; 0x2c
   185c4:	add	r0, r5, #8
   185c8:	str	r3, [sp, #28]
   185cc:	ldr	r3, [r5]
   185d0:	orr	r1, r1, #1
   185d4:	mov	lr, r0
   185d8:	str	r1, [sp, #32]
   185dc:	str	r0, [sp, #36]	; 0x24
   185e0:	str	r1, [sp, #4]
   185e4:	str	r2, [sp, #12]
   185e8:	str	r3, [sp]
   185ec:	mov	r0, r7
   185f0:	mov	r1, r9
   185f4:	str	ip, [sp, #16]
   185f8:	str	lr, [sp, #8]
   185fc:	mov	r3, fp
   18600:	mov	r2, sl
   18604:	bl	16fec <lchmod@@Base+0x8bc>
   18608:	cmp	r9, r0
   1860c:	bhi	18678 <lchmod@@Base+0x1f48>
   18610:	ldr	r3, [pc, #172]	; 186c4 <lchmod@@Base+0x1f94>
   18614:	add	r9, r0, #1
   18618:	cmp	r7, r3
   1861c:	str	r9, [r6, r4, lsl #3]
   18620:	beq	1862c <lchmod@@Base+0x1efc>
   18624:	mov	r0, r7
   18628:	bl	1349c <__assert_fail@plt+0x1bd0>
   1862c:	mov	r0, r9
   18630:	bl	1944c <lchmod@@Base+0x2d1c>
   18634:	ldr	lr, [sp, #28]
   18638:	ldr	ip, [r5, #44]	; 0x2c
   1863c:	ldr	r4, [r5, #40]	; 0x28
   18640:	mov	r3, fp
   18644:	mov	r2, sl
   18648:	mov	r1, r9
   1864c:	str	r0, [lr, #4]
   18650:	ldr	lr, [r5]
   18654:	ldr	r5, [sp, #36]	; 0x24
   18658:	str	ip, [sp, #16]
   1865c:	str	r5, [sp, #8]
   18660:	ldr	r5, [sp, #32]
   18664:	str	r4, [sp, #12]
   18668:	str	r5, [sp, #4]
   1866c:	str	lr, [sp]
   18670:	mov	r7, r0
   18674:	bl	16fec <lchmod@@Base+0x8bc>
   18678:	ldr	r3, [sp, #24]
   1867c:	mov	r0, r7
   18680:	str	r3, [r8]
   18684:	add	sp, sp, #52	; 0x34
   18688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1868c:	mov	r3, #8
   18690:	sub	r2, r4, r2
   18694:	str	r3, [sp]
   18698:	add	r1, sp, #44	; 0x2c
   1869c:	add	r2, r2, #1
   186a0:	mvn	r3, #-2147483648	; 0x80000000
   186a4:	bl	195b0 <lchmod@@Base+0x2e80>
   186a8:	mov	r6, r0
   186ac:	ldm	r9, {r0, r1}
   186b0:	str	r6, [r7]
   186b4:	stm	r6, {r0, r1}
   186b8:	b	18588 <lchmod@@Base+0x1e58>
   186bc:	bl	11878 <abort@plt>
   186c0:	muleq	r2, r0, r1
   186c4:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   186c8:	push	{r4, r5, r6, lr}
   186cc:	mov	r5, r0
   186d0:	bl	1171c <__errno_location@plt>
   186d4:	cmp	r5, #0
   186d8:	mov	r1, #48	; 0x30
   186dc:	mov	r4, r0
   186e0:	ldr	r0, [pc, #16]	; 186f8 <lchmod@@Base+0x1fc8>
   186e4:	ldr	r6, [r4]
   186e8:	movne	r0, r5
   186ec:	bl	198ac <lchmod@@Base+0x317c>
   186f0:	str	r6, [r4]
   186f4:	pop	{r4, r5, r6, pc}
   186f8:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   186fc:	ldr	r3, [pc, #12]	; 18710 <lchmod@@Base+0x1fe0>
   18700:	cmp	r0, #0
   18704:	moveq	r0, r3
   18708:	ldr	r0, [r0]
   1870c:	bx	lr
   18710:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18714:	ldr	r3, [pc, #12]	; 18728 <lchmod@@Base+0x1ff8>
   18718:	cmp	r0, #0
   1871c:	moveq	r0, r3
   18720:	str	r1, [r0]
   18724:	bx	lr
   18728:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1872c:	ldr	r3, [pc, #52]	; 18768 <lchmod@@Base+0x2038>
   18730:	cmp	r0, #0
   18734:	moveq	r0, r3
   18738:	add	r3, r0, #8
   1873c:	push	{lr}		; (str lr, [sp, #-4]!)
   18740:	lsr	lr, r1, #5
   18744:	and	r1, r1, #31
   18748:	ldr	ip, [r3, lr, lsl #2]
   1874c:	lsr	r0, ip, r1
   18750:	eor	r2, r2, r0
   18754:	and	r2, r2, #1
   18758:	and	r0, r0, #1
   1875c:	eor	r1, ip, r2, lsl r1
   18760:	str	r1, [r3, lr, lsl #2]
   18764:	pop	{pc}		; (ldr pc, [sp], #4)
   18768:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1876c:	ldr	r3, [pc, #16]	; 18784 <lchmod@@Base+0x2054>
   18770:	cmp	r0, #0
   18774:	movne	r3, r0
   18778:	ldr	r0, [r3, #4]
   1877c:	str	r1, [r3, #4]
   18780:	bx	lr
   18784:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18788:	ldr	r3, [pc, #44]	; 187bc <lchmod@@Base+0x208c>
   1878c:	cmp	r0, #0
   18790:	moveq	r0, r3
   18794:	mov	ip, #10
   18798:	cmp	r2, #0
   1879c:	cmpne	r1, #0
   187a0:	str	ip, [r0]
   187a4:	beq	187b4 <lchmod@@Base+0x2084>
   187a8:	str	r1, [r0, #40]	; 0x28
   187ac:	str	r2, [r0, #44]	; 0x2c
   187b0:	bx	lr
   187b4:	push	{r4, lr}
   187b8:	bl	11878 <abort@plt>
   187bc:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   187c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   187c4:	sub	sp, sp, #24
   187c8:	ldr	ip, [pc, #108]	; 1883c <lchmod@@Base+0x210c>
   187cc:	ldr	r4, [sp, #56]	; 0x38
   187d0:	mov	r9, r2
   187d4:	cmp	r4, #0
   187d8:	moveq	r4, ip
   187dc:	mov	sl, r3
   187e0:	mov	r7, r0
   187e4:	mov	r8, r1
   187e8:	bl	1171c <__errno_location@plt>
   187ec:	ldr	r3, [r4, #44]	; 0x2c
   187f0:	mov	r1, r8
   187f4:	ldr	r6, [r0]
   187f8:	str	r3, [sp, #16]
   187fc:	ldr	r2, [r4, #40]	; 0x28
   18800:	add	r3, r4, #8
   18804:	str	r3, [sp, #8]
   18808:	str	r2, [sp, #12]
   1880c:	ldr	r2, [r4, #4]
   18810:	mov	r5, r0
   18814:	str	r2, [sp, #4]
   18818:	ldr	ip, [r4]
   1881c:	mov	r3, sl
   18820:	mov	r2, r9
   18824:	mov	r0, r7
   18828:	str	ip, [sp]
   1882c:	bl	16fec <lchmod@@Base+0x8bc>
   18830:	str	r6, [r5]
   18834:	add	sp, sp, #24
   18838:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1883c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18844:	cmp	r3, #0
   18848:	sub	sp, sp, #44	; 0x2c
   1884c:	ldr	r4, [pc, #192]	; 18914 <lchmod@@Base+0x21e4>
   18850:	mov	r6, r2
   18854:	movne	r4, r3
   18858:	mov	r9, r1
   1885c:	mov	r8, r0
   18860:	bl	1171c <__errno_location@plt>
   18864:	ldr	r3, [r4, #44]	; 0x2c
   18868:	ldr	r5, [r4, #4]
   1886c:	add	sl, r4, #8
   18870:	cmp	r6, #0
   18874:	orreq	r5, r5, #1
   18878:	mov	r1, #0
   1887c:	ldr	r2, [r0]
   18880:	str	r3, [sp, #16]
   18884:	ldr	r3, [r4, #40]	; 0x28
   18888:	stmib	sp, {r5, sl}
   1888c:	str	r3, [sp, #12]
   18890:	ldr	r3, [r4]
   18894:	mov	r7, r0
   18898:	str	r2, [sp, #28]
   1889c:	str	r3, [sp]
   188a0:	mov	r2, r8
   188a4:	mov	r3, r9
   188a8:	mov	r0, r1
   188ac:	bl	16fec <lchmod@@Base+0x8bc>
   188b0:	add	r1, r0, #1
   188b4:	mov	fp, r0
   188b8:	mov	r0, r1
   188bc:	str	r1, [sp, #36]	; 0x24
   188c0:	bl	1944c <lchmod@@Base+0x2d1c>
   188c4:	ldr	r3, [r4, #44]	; 0x2c
   188c8:	mov	r2, r8
   188cc:	str	r3, [sp, #16]
   188d0:	ldr	r3, [r4, #40]	; 0x28
   188d4:	str	r5, [sp, #4]
   188d8:	str	r3, [sp, #12]
   188dc:	str	sl, [sp, #8]
   188e0:	ldr	ip, [r4]
   188e4:	ldr	r1, [sp, #36]	; 0x24
   188e8:	mov	r3, r9
   188ec:	str	ip, [sp]
   188f0:	str	r0, [sp, #32]
   188f4:	bl	16fec <lchmod@@Base+0x8bc>
   188f8:	ldr	r2, [sp, #28]
   188fc:	cmp	r6, #0
   18900:	str	r2, [r7]
   18904:	ldr	r0, [sp, #32]
   18908:	strne	fp, [r6]
   1890c:	add	sp, sp, #44	; 0x2c
   18910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18914:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18918:	mov	r3, r2
   1891c:	mov	r2, #0
   18920:	b	18840 <lchmod@@Base+0x2110>
   18924:	push	{r4, r5, r6, r7, r8, lr}
   18928:	ldr	r6, [pc, #116]	; 189a4 <lchmod@@Base+0x2274>
   1892c:	ldr	r3, [r6, #4]
   18930:	ldr	r7, [r6]
   18934:	cmp	r3, #1
   18938:	movgt	r5, r7
   1893c:	movgt	r4, #1
   18940:	ble	18960 <lchmod@@Base+0x2230>
   18944:	ldr	r0, [r5, #12]
   18948:	bl	1349c <__assert_fail@plt+0x1bd0>
   1894c:	ldr	r3, [r6, #4]
   18950:	add	r4, r4, #1
   18954:	cmp	r3, r4
   18958:	add	r5, r5, #8
   1895c:	bgt	18944 <lchmod@@Base+0x2214>
   18960:	ldr	r0, [r7, #4]
   18964:	ldr	r4, [pc, #60]	; 189a8 <lchmod@@Base+0x2278>
   18968:	cmp	r0, r4
   1896c:	beq	18980 <lchmod@@Base+0x2250>
   18970:	bl	1349c <__assert_fail@plt+0x1bd0>
   18974:	mov	r3, #256	; 0x100
   18978:	str	r4, [r6, #12]
   1897c:	str	r3, [r6, #8]
   18980:	ldr	r4, [pc, #36]	; 189ac <lchmod@@Base+0x227c>
   18984:	cmp	r7, r4
   18988:	beq	18998 <lchmod@@Base+0x2268>
   1898c:	mov	r0, r7
   18990:	bl	1349c <__assert_fail@plt+0x1bd0>
   18994:	str	r4, [r6]
   18998:	mov	r3, #1
   1899c:	str	r3, [r6, #4]
   189a0:	pop	{r4, r5, r6, r7, r8, pc}
   189a4:	muleq	r2, r0, r1
   189a8:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   189ac:	muleq	r2, r8, r1
   189b0:	ldr	r3, [pc, #4]	; 189bc <lchmod@@Base+0x228c>
   189b4:	mvn	r2, #0
   189b8:	b	18500 <lchmod@@Base+0x1dd0>
   189bc:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   189c0:	ldr	r3, [pc]	; 189c8 <lchmod@@Base+0x2298>
   189c4:	b	18500 <lchmod@@Base+0x1dd0>
   189c8:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   189cc:	mov	r1, r0
   189d0:	ldr	r3, [pc, #8]	; 189e0 <lchmod@@Base+0x22b0>
   189d4:	mvn	r2, #0
   189d8:	mov	r0, #0
   189dc:	b	18500 <lchmod@@Base+0x1dd0>
   189e0:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   189e4:	mov	r2, r1
   189e8:	ldr	r3, [pc, #8]	; 189f8 <lchmod@@Base+0x22c8>
   189ec:	mov	r1, r0
   189f0:	mov	r0, #0
   189f4:	b	18500 <lchmod@@Base+0x1dd0>
   189f8:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   189fc:	push	{r4, r5, lr}
   18a00:	sub	sp, sp, #52	; 0x34
   18a04:	mov	r5, r2
   18a08:	mov	r4, r0
   18a0c:	mov	r0, sp
   18a10:	bl	16e9c <lchmod@@Base+0x76c>
   18a14:	mov	r3, sp
   18a18:	mov	r1, r5
   18a1c:	mov	r0, r4
   18a20:	mvn	r2, #0
   18a24:	bl	18500 <lchmod@@Base+0x1dd0>
   18a28:	add	sp, sp, #52	; 0x34
   18a2c:	pop	{r4, r5, pc}
   18a30:	push	{r4, r5, r6, lr}
   18a34:	sub	sp, sp, #48	; 0x30
   18a38:	mov	r5, r2
   18a3c:	mov	r6, r3
   18a40:	mov	r4, r0
   18a44:	mov	r0, sp
   18a48:	bl	16e9c <lchmod@@Base+0x76c>
   18a4c:	mov	r3, sp
   18a50:	mov	r2, r6
   18a54:	mov	r1, r5
   18a58:	mov	r0, r4
   18a5c:	bl	18500 <lchmod@@Base+0x1dd0>
   18a60:	add	sp, sp, #48	; 0x30
   18a64:	pop	{r4, r5, r6, pc}
   18a68:	mov	r2, r1
   18a6c:	mov	r1, r0
   18a70:	mov	r0, #0
   18a74:	b	189fc <lchmod@@Base+0x22cc>
   18a78:	mov	r3, r2
   18a7c:	mov	r2, r1
   18a80:	mov	r1, r0
   18a84:	mov	r0, #0
   18a88:	b	18a30 <lchmod@@Base+0x2300>
   18a8c:	push	{r4, r5, r6, r7, r8, lr}
   18a90:	mov	r7, r0
   18a94:	ldr	lr, [pc, #100]	; 18b00 <lchmod@@Base+0x23d0>
   18a98:	mov	r8, r1
   18a9c:	mov	r4, r2
   18aa0:	ldm	lr!, {r0, r1, r2, r3}
   18aa4:	sub	sp, sp, #48	; 0x30
   18aa8:	mov	ip, sp
   18aac:	lsr	r5, r4, #5
   18ab0:	stmia	ip!, {r0, r1, r2, r3}
   18ab4:	add	r6, sp, #8
   18ab8:	ldm	lr!, {r0, r1, r2, r3}
   18abc:	and	r4, r4, #31
   18ac0:	stmia	ip!, {r0, r1, r2, r3}
   18ac4:	ldm	lr, {r0, r1, r2, r3}
   18ac8:	stm	ip, {r0, r1, r2, r3}
   18acc:	mov	r2, r8
   18ad0:	ldr	lr, [r6, r5, lsl #2]
   18ad4:	mov	r1, r7
   18ad8:	mov	r3, sp
   18adc:	lsr	ip, lr, r4
   18ae0:	eor	ip, ip, #1
   18ae4:	and	ip, ip, #1
   18ae8:	mov	r0, #0
   18aec:	eor	r4, lr, ip, lsl r4
   18af0:	str	r4, [r6, r5, lsl #2]
   18af4:	bl	18500 <lchmod@@Base+0x1dd0>
   18af8:	add	sp, sp, #48	; 0x30
   18afc:	pop	{r4, r5, r6, r7, r8, pc}
   18b00:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18b04:	mov	r2, r1
   18b08:	mvn	r1, #0
   18b0c:	b	18a8c <lchmod@@Base+0x235c>
   18b10:	mov	r2, #58	; 0x3a
   18b14:	mvn	r1, #0
   18b18:	b	18a8c <lchmod@@Base+0x235c>
   18b1c:	mov	r2, #58	; 0x3a
   18b20:	b	18a8c <lchmod@@Base+0x235c>
   18b24:	push	{r4, r5, r6, r7, lr}
   18b28:	sub	sp, sp, #100	; 0x64
   18b2c:	mov	r6, r0
   18b30:	mov	r0, sp
   18b34:	mov	r7, r2
   18b38:	bl	16e9c <lchmod@@Base+0x76c>
   18b3c:	mov	ip, sp
   18b40:	add	lr, sp, #48	; 0x30
   18b44:	ldm	ip!, {r0, r1, r2, r3}
   18b48:	stmia	lr!, {r0, r1, r2, r3}
   18b4c:	ldm	ip!, {r0, r1, r2, r3}
   18b50:	ldr	r5, [sp, #60]	; 0x3c
   18b54:	stmia	lr!, {r0, r1, r2, r3}
   18b58:	mvn	r4, r5
   18b5c:	ldm	ip, {r0, r1, r2, r3}
   18b60:	and	ip, r4, #67108864	; 0x4000000
   18b64:	eor	ip, ip, r5
   18b68:	str	ip, [sp, #60]	; 0x3c
   18b6c:	stm	lr, {r0, r1, r2, r3}
   18b70:	mov	r1, r7
   18b74:	mov	r0, r6
   18b78:	add	r3, sp, #48	; 0x30
   18b7c:	mvn	r2, #0
   18b80:	bl	18500 <lchmod@@Base+0x1dd0>
   18b84:	add	sp, sp, #100	; 0x64
   18b88:	pop	{r4, r5, r6, r7, pc}
   18b8c:	push	{r4, r5, r6, r7, r8, lr}
   18b90:	mov	r5, r1
   18b94:	ldr	lr, [pc, #100]	; 18c00 <lchmod@@Base+0x24d0>
   18b98:	mov	r4, r2
   18b9c:	mov	r7, r0
   18ba0:	mov	r8, r3
   18ba4:	ldm	lr!, {r0, r1, r2, r3}
   18ba8:	sub	sp, sp, #48	; 0x30
   18bac:	mov	ip, sp
   18bb0:	mov	r6, #10
   18bb4:	stmia	ip!, {r0, r1, r2, r3}
   18bb8:	cmp	r4, #0
   18bbc:	cmpne	r5, #0
   18bc0:	ldm	lr!, {r0, r1, r2, r3}
   18bc4:	str	r6, [sp]
   18bc8:	stmia	ip!, {r0, r1, r2, r3}
   18bcc:	ldm	lr, {r0, r1, r2, r3}
   18bd0:	stm	ip, {r0, r1, r2, r3}
   18bd4:	beq	18bfc <lchmod@@Base+0x24cc>
   18bd8:	mov	r3, sp
   18bdc:	mov	r1, r8
   18be0:	mov	r0, r7
   18be4:	ldr	r2, [sp, #72]	; 0x48
   18be8:	str	r5, [sp, #40]	; 0x28
   18bec:	str	r4, [sp, #44]	; 0x2c
   18bf0:	bl	18500 <lchmod@@Base+0x1dd0>
   18bf4:	add	sp, sp, #48	; 0x30
   18bf8:	pop	{r4, r5, r6, r7, r8, pc}
   18bfc:	bl	11878 <abort@plt>
   18c00:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18c04:	push	{lr}		; (str lr, [sp, #-4]!)
   18c08:	sub	sp, sp, #12
   18c0c:	mvn	ip, #0
   18c10:	str	ip, [sp]
   18c14:	bl	18b8c <lchmod@@Base+0x245c>
   18c18:	add	sp, sp, #12
   18c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c20:	push	{lr}		; (str lr, [sp, #-4]!)
   18c24:	sub	sp, sp, #12
   18c28:	mvn	ip, #0
   18c2c:	mov	r3, r2
   18c30:	str	ip, [sp]
   18c34:	mov	r2, r1
   18c38:	mov	r1, r0
   18c3c:	mov	r0, #0
   18c40:	bl	18b8c <lchmod@@Base+0x245c>
   18c44:	add	sp, sp, #12
   18c48:	pop	{pc}		; (ldr pc, [sp], #4)
   18c4c:	push	{lr}		; (str lr, [sp, #-4]!)
   18c50:	sub	sp, sp, #12
   18c54:	str	r3, [sp]
   18c58:	mov	r3, r2
   18c5c:	mov	r2, r1
   18c60:	mov	r1, r0
   18c64:	mov	r0, #0
   18c68:	bl	18b8c <lchmod@@Base+0x245c>
   18c6c:	add	sp, sp, #12
   18c70:	pop	{pc}		; (ldr pc, [sp], #4)
   18c74:	ldr	r3, [pc]	; 18c7c <lchmod@@Base+0x254c>
   18c78:	b	18500 <lchmod@@Base+0x1dd0>
   18c7c:	andeq	ip, r2, r0, lsr #3
   18c80:	mov	r2, r1
   18c84:	ldr	r3, [pc, #8]	; 18c94 <lchmod@@Base+0x2564>
   18c88:	mov	r1, r0
   18c8c:	mov	r0, #0
   18c90:	b	18500 <lchmod@@Base+0x1dd0>
   18c94:	andeq	ip, r2, r0, lsr #3
   18c98:	ldr	r3, [pc, #4]	; 18ca4 <lchmod@@Base+0x2574>
   18c9c:	mvn	r2, #0
   18ca0:	b	18500 <lchmod@@Base+0x1dd0>
   18ca4:	andeq	ip, r2, r0, lsr #3
   18ca8:	mov	r1, r0
   18cac:	ldr	r3, [pc, #8]	; 18cbc <lchmod@@Base+0x258c>
   18cb0:	mvn	r2, #0
   18cb4:	mov	r0, #0
   18cb8:	b	18500 <lchmod@@Base+0x1dd0>
   18cbc:	andeq	ip, r2, r0, lsr #3
   18cc0:	push	{r4, r5, r6, lr}
   18cc4:	ldr	r4, [r0], #8
   18cc8:	cmp	r4, r0
   18ccc:	beq	18cec <lchmod@@Base+0x25bc>
   18cd0:	mov	r0, r4
   18cd4:	bl	1a0e0 <lchmod@@Base+0x39b0>
   18cd8:	cmp	r0, #0
   18cdc:	movne	r3, r0
   18ce0:	moveq	r3, r4
   18ce4:	mov	r0, r3
   18ce8:	pop	{r4, r5, r6, pc}
   18cec:	mov	r0, r1
   18cf0:	mov	r5, r1
   18cf4:	bl	1a0b4 <lchmod@@Base+0x3984>
   18cf8:	subs	r3, r0, #0
   18cfc:	beq	18ce4 <lchmod@@Base+0x25b4>
   18d00:	mov	r2, r5
   18d04:	mov	r1, r4
   18d08:	pop	{r4, r5, r6, lr}
   18d0c:	b	11530 <memcpy@plt>
   18d10:	push	{r4, r5, r6, lr}
   18d14:	mov	r5, r0
   18d18:	ldr	r3, [r0, #4]
   18d1c:	mov	r4, r0
   18d20:	ldr	r0, [r5], #8
   18d24:	lsl	r6, r3, #1
   18d28:	cmp	r0, r5
   18d2c:	beq	18d38 <lchmod@@Base+0x2608>
   18d30:	bl	1349c <__assert_fail@plt+0x1bd0>
   18d34:	ldr	r3, [r4, #4]
   18d38:	cmp	r6, r3
   18d3c:	bcc	18d5c <lchmod@@Base+0x262c>
   18d40:	mov	r0, r6
   18d44:	bl	1a0b4 <lchmod@@Base+0x3984>
   18d48:	subs	r3, r0, #0
   18d4c:	beq	18d68 <lchmod@@Base+0x2638>
   18d50:	mov	r0, #1
   18d54:	stm	r4, {r3, r6}
   18d58:	pop	{r4, r5, r6, pc}
   18d5c:	bl	1171c <__errno_location@plt>
   18d60:	mov	r3, #12
   18d64:	str	r3, [r0]
   18d68:	mov	r3, #1024	; 0x400
   18d6c:	str	r5, [r4]
   18d70:	str	r3, [r4, #4]
   18d74:	mov	r0, #0
   18d78:	pop	{r4, r5, r6, pc}
   18d7c:	push	{r4, r5, r6, r7, r8, lr}
   18d80:	mov	r5, r0
   18d84:	ldr	r3, [r0, #4]
   18d88:	ldr	r8, [r5], #8
   18d8c:	mov	r4, r0
   18d90:	cmp	r8, r5
   18d94:	lsl	r7, r3, #1
   18d98:	beq	18df0 <lchmod@@Base+0x26c0>
   18d9c:	cmp	r3, r7
   18da0:	bhi	18dc8 <lchmod@@Base+0x2698>
   18da4:	mov	r0, r8
   18da8:	mov	r1, r7
   18dac:	bl	1a0e0 <lchmod@@Base+0x39b0>
   18db0:	subs	r6, r0, #0
   18db4:	ldreq	r8, [r4]
   18db8:	beq	18dd4 <lchmod@@Base+0x26a4>
   18dbc:	stm	r4, {r6, r7}
   18dc0:	mov	r0, #1
   18dc4:	pop	{r4, r5, r6, r7, r8, pc}
   18dc8:	bl	1171c <__errno_location@plt>
   18dcc:	mov	r3, #12
   18dd0:	str	r3, [r0]
   18dd4:	mov	r0, r8
   18dd8:	bl	1349c <__assert_fail@plt+0x1bd0>
   18ddc:	mov	r3, #1024	; 0x400
   18de0:	str	r5, [r4]
   18de4:	str	r3, [r4, #4]
   18de8:	mov	r0, #0
   18dec:	pop	{r4, r5, r6, r7, r8, pc}
   18df0:	mov	r0, r7
   18df4:	bl	1a0b4 <lchmod@@Base+0x3984>
   18df8:	subs	r6, r0, #0
   18dfc:	beq	18de8 <lchmod@@Base+0x26b8>
   18e00:	mov	r1, r8
   18e04:	ldr	r2, [r4, #4]
   18e08:	bl	11530 <memcpy@plt>
   18e0c:	b	18dbc <lchmod@@Base+0x268c>
   18e10:	push	{r4, r5, r6, r7, r8, lr}
   18e14:	subs	r4, r0, #0
   18e18:	beq	18e68 <lchmod@@Base+0x2738>
   18e1c:	cmp	r4, #10
   18e20:	beq	18e2c <lchmod@@Base+0x26fc>
   18e24:	mov	r0, r4
   18e28:	pop	{r4, r5, r6, r7, r8, pc}
   18e2c:	ldr	r6, [r1]
   18e30:	mov	r5, r1
   18e34:	mov	r0, r6
   18e38:	ldr	r1, [pc, #60]	; 18e7c <lchmod@@Base+0x274c>
   18e3c:	bl	114d0 <strcmp@plt>
   18e40:	subs	r7, r0, #0
   18e44:	bne	18e24 <lchmod@@Base+0x26f4>
   18e48:	mov	r0, r6
   18e4c:	bl	1180c <freecon@plt>
   18e50:	str	r7, [r5]
   18e54:	bl	1171c <__errno_location@plt>
   18e58:	mov	r3, #61	; 0x3d
   18e5c:	mvn	r4, #0
   18e60:	str	r3, [r0]
   18e64:	b	18e24 <lchmod@@Base+0x26f4>
   18e68:	bl	1171c <__errno_location@plt>
   18e6c:	mov	r3, #95	; 0x5f
   18e70:	mvn	r4, #0
   18e74:	str	r3, [r0]
   18e78:	b	18e24 <lchmod@@Base+0x26f4>
   18e7c:	andeq	fp, r1, ip, lsr sl
   18e80:	push	{r4, lr}
   18e84:	mov	r4, r1
   18e88:	bl	116d4 <getfilecon@plt>
   18e8c:	mov	r1, r4
   18e90:	pop	{r4, lr}
   18e94:	b	18e10 <lchmod@@Base+0x26e0>
   18e98:	push	{r4, lr}
   18e9c:	mov	r4, r1
   18ea0:	bl	11650 <lgetfilecon@plt>
   18ea4:	mov	r1, r4
   18ea8:	pop	{r4, lr}
   18eac:	b	18e10 <lchmod@@Base+0x26e0>
   18eb0:	push	{r4, lr}
   18eb4:	mov	r4, r1
   18eb8:	bl	1159c <fgetfilecon@plt>
   18ebc:	mov	r1, r4
   18ec0:	pop	{r4, lr}
   18ec4:	b	18e10 <lchmod@@Base+0x26e0>
   18ec8:	cmp	r0, #2
   18ecc:	push	{r4, r5, r6, r7, r8, lr}
   18ed0:	mov	r4, r0
   18ed4:	bhi	18efc <lchmod@@Base+0x27cc>
   18ed8:	bl	1a810 <lchmod@@Base+0x40e0>
   18edc:	mov	r7, r0
   18ee0:	bl	1171c <__errno_location@plt>
   18ee4:	mov	r5, r0
   18ee8:	mov	r0, r4
   18eec:	ldr	r6, [r5]
   18ef0:	mov	r4, r7
   18ef4:	bl	11884 <close@plt>
   18ef8:	str	r6, [r5]
   18efc:	mov	r0, r4
   18f00:	pop	{r4, r5, r6, r7, r8, pc}
   18f04:	push	{r4, r5, r6, lr}
   18f08:	sub	sp, sp, #32
   18f0c:	cmp	r1, #0
   18f10:	mov	r4, r0
   18f14:	ldr	r5, [sp, #48]	; 0x30
   18f18:	ldr	r6, [sp, #52]	; 0x34
   18f1c:	beq	19234 <lchmod@@Base+0x2b04>
   18f20:	stm	sp, {r2, r3}
   18f24:	mov	r3, r1
   18f28:	ldr	r2, [pc, #808]	; 19258 <lchmod@@Base+0x2b28>
   18f2c:	mov	r1, #1
   18f30:	bl	11764 <__fprintf_chk@plt>
   18f34:	mov	r2, #5
   18f38:	ldr	r1, [pc, #796]	; 1925c <lchmod@@Base+0x2b2c>
   18f3c:	mov	r0, #0
   18f40:	bl	11578 <dcgettext@plt>
   18f44:	ldr	r3, [pc, #788]	; 19260 <lchmod@@Base+0x2b30>
   18f48:	ldr	r2, [pc, #788]	; 19264 <lchmod@@Base+0x2b34>
   18f4c:	str	r3, [sp]
   18f50:	mov	r1, #1
   18f54:	mov	r3, r0
   18f58:	mov	r0, r4
   18f5c:	bl	11764 <__fprintf_chk@plt>
   18f60:	mov	r1, r4
   18f64:	mov	r0, #10
   18f68:	bl	1156c <fputc_unlocked@plt>
   18f6c:	mov	r2, #5
   18f70:	ldr	r1, [pc, #752]	; 19268 <lchmod@@Base+0x2b38>
   18f74:	mov	r0, #0
   18f78:	bl	11578 <dcgettext@plt>
   18f7c:	mov	r1, #1
   18f80:	ldr	r3, [pc, #740]	; 1926c <lchmod@@Base+0x2b3c>
   18f84:	mov	r2, r0
   18f88:	mov	r0, r4
   18f8c:	bl	11764 <__fprintf_chk@plt>
   18f90:	mov	r1, r4
   18f94:	mov	r0, #10
   18f98:	bl	1156c <fputc_unlocked@plt>
   18f9c:	cmp	r6, #9
   18fa0:	ldrls	pc, [pc, r6, lsl #2]
   18fa4:	b	1924c <lchmod@@Base+0x2b1c>
   18fa8:	andeq	r9, r1, ip, lsr #32
   18fac:	andeq	r9, r1, r4, lsr r0
   18fb0:	andeq	r9, r1, r0, rrx
   18fb4:	muleq	r1, r4, r0
   18fb8:	ldrdeq	r9, [r1], -r0
   18fbc:	andeq	r9, r1, ip, lsl #2
   18fc0:	andeq	r9, r1, r8, asr #2
   18fc4:	andeq	r9, r1, ip, lsl #3
   18fc8:	ldrdeq	r9, [r1], -ip
   18fcc:	ldrdeq	r8, [r1], -r0
   18fd0:	ldr	r1, [pc, #664]	; 19270 <lchmod@@Base+0x2b40>
   18fd4:	mov	r2, #5
   18fd8:	mov	r0, #0
   18fdc:	bl	11578 <dcgettext@plt>
   18fe0:	ldr	ip, [r5, #32]
   18fe4:	ldr	r1, [r5, #28]
   18fe8:	ldr	r2, [r5, #24]
   18fec:	ldr	r3, [r5]
   18ff0:	ldr	r6, [r5, #20]
   18ff4:	str	ip, [sp, #28]
   18ff8:	ldr	lr, [r5, #16]
   18ffc:	str	r1, [sp, #24]
   19000:	ldr	ip, [r5, #12]
   19004:	str	r2, [sp, #20]
   19008:	ldr	r1, [r5, #8]
   1900c:	ldr	r2, [r5, #4]
   19010:	str	r6, [sp, #16]
   19014:	stmib	sp, {r1, ip, lr}
   19018:	mov	r1, #1
   1901c:	str	r2, [sp]
   19020:	mov	r2, r0
   19024:	mov	r0, r4
   19028:	bl	11764 <__fprintf_chk@plt>
   1902c:	add	sp, sp, #32
   19030:	pop	{r4, r5, r6, pc}
   19034:	mov	r2, #5
   19038:	ldr	r1, [pc, #564]	; 19274 <lchmod@@Base+0x2b44>
   1903c:	mov	r0, #0
   19040:	bl	11578 <dcgettext@plt>
   19044:	ldr	r3, [r5]
   19048:	mov	r1, #1
   1904c:	mov	r2, r0
   19050:	mov	r0, r4
   19054:	add	sp, sp, #32
   19058:	pop	{r4, r5, r6, lr}
   1905c:	b	11764 <__fprintf_chk@plt>
   19060:	mov	r2, #5
   19064:	ldr	r1, [pc, #524]	; 19278 <lchmod@@Base+0x2b48>
   19068:	mov	r0, #0
   1906c:	bl	11578 <dcgettext@plt>
   19070:	ldr	r2, [r5, #4]
   19074:	ldr	r3, [r5]
   19078:	mov	r1, #1
   1907c:	str	r2, [sp, #48]	; 0x30
   19080:	mov	r2, r0
   19084:	mov	r0, r4
   19088:	add	sp, sp, #32
   1908c:	pop	{r4, r5, r6, lr}
   19090:	b	11764 <__fprintf_chk@plt>
   19094:	mov	r2, #5
   19098:	ldr	r1, [pc, #476]	; 1927c <lchmod@@Base+0x2b4c>
   1909c:	mov	r0, #0
   190a0:	bl	11578 <dcgettext@plt>
   190a4:	ldr	r1, [r5, #8]
   190a8:	ldr	r2, [r5, #4]
   190ac:	ldr	r3, [r5]
   190b0:	str	r1, [sp, #52]	; 0x34
   190b4:	str	r2, [sp, #48]	; 0x30
   190b8:	mov	r1, #1
   190bc:	mov	r2, r0
   190c0:	mov	r0, r4
   190c4:	add	sp, sp, #32
   190c8:	pop	{r4, r5, r6, lr}
   190cc:	b	11764 <__fprintf_chk@plt>
   190d0:	mov	r2, #5
   190d4:	ldr	r1, [pc, #420]	; 19280 <lchmod@@Base+0x2b50>
   190d8:	mov	r0, #0
   190dc:	bl	11578 <dcgettext@plt>
   190e0:	ldr	r1, [r5, #8]
   190e4:	ldr	ip, [r5, #12]
   190e8:	ldr	r2, [r5, #4]
   190ec:	ldr	r3, [r5]
   190f0:	stmib	sp, {r1, ip}
   190f4:	str	r2, [sp]
   190f8:	mov	r1, #1
   190fc:	mov	r2, r0
   19100:	mov	r0, r4
   19104:	bl	11764 <__fprintf_chk@plt>
   19108:	b	1902c <lchmod@@Base+0x28fc>
   1910c:	mov	r2, #5
   19110:	ldr	r1, [pc, #364]	; 19284 <lchmod@@Base+0x2b54>
   19114:	mov	r0, #0
   19118:	bl	11578 <dcgettext@plt>
   1911c:	add	r1, r5, #8
   19120:	ldr	r2, [r5, #4]
   19124:	ldm	r1, {r1, ip, lr}
   19128:	ldr	r3, [r5]
   1912c:	str	r2, [sp]
   19130:	stmib	sp, {r1, ip, lr}
   19134:	mov	r1, #1
   19138:	mov	r2, r0
   1913c:	mov	r0, r4
   19140:	bl	11764 <__fprintf_chk@plt>
   19144:	b	1902c <lchmod@@Base+0x28fc>
   19148:	mov	r2, #5
   1914c:	ldr	r1, [pc, #308]	; 19288 <lchmod@@Base+0x2b58>
   19150:	mov	r0, #0
   19154:	bl	11578 <dcgettext@plt>
   19158:	add	r1, r5, #8
   1915c:	ldr	r2, [r5, #4]
   19160:	ldm	r1, {r1, ip, lr}
   19164:	ldr	r6, [r5, #20]
   19168:	ldr	r3, [r5]
   1916c:	stmib	sp, {r1, ip, lr}
   19170:	mov	r1, #1
   19174:	str	r2, [sp]
   19178:	str	r6, [sp, #16]
   1917c:	mov	r2, r0
   19180:	mov	r0, r4
   19184:	bl	11764 <__fprintf_chk@plt>
   19188:	b	1902c <lchmod@@Base+0x28fc>
   1918c:	mov	r2, #5
   19190:	ldr	r1, [pc, #244]	; 1928c <lchmod@@Base+0x2b5c>
   19194:	mov	r0, #0
   19198:	bl	11578 <dcgettext@plt>
   1919c:	ldr	r2, [r5, #24]
   191a0:	ldr	r3, [r5]
   191a4:	ldr	r6, [r5, #20]
   191a8:	ldr	lr, [r5, #16]
   191ac:	ldr	ip, [r5, #12]
   191b0:	str	r2, [sp, #20]
   191b4:	ldr	r1, [r5, #8]
   191b8:	ldr	r2, [r5, #4]
   191bc:	str	r6, [sp, #16]
   191c0:	stmib	sp, {r1, ip, lr}
   191c4:	mov	r1, #1
   191c8:	str	r2, [sp]
   191cc:	mov	r2, r0
   191d0:	mov	r0, r4
   191d4:	bl	11764 <__fprintf_chk@plt>
   191d8:	b	1902c <lchmod@@Base+0x28fc>
   191dc:	mov	r2, #5
   191e0:	ldr	r1, [pc, #168]	; 19290 <lchmod@@Base+0x2b60>
   191e4:	mov	r0, #0
   191e8:	bl	11578 <dcgettext@plt>
   191ec:	ldr	r1, [r5, #28]
   191f0:	ldr	r2, [r5, #24]
   191f4:	ldr	r3, [r5]
   191f8:	ldr	r6, [r5, #20]
   191fc:	ldr	lr, [r5, #16]
   19200:	str	r1, [sp, #24]
   19204:	ldr	ip, [r5, #12]
   19208:	str	r2, [sp, #20]
   1920c:	ldr	r1, [r5, #8]
   19210:	ldr	r2, [r5, #4]
   19214:	str	r6, [sp, #16]
   19218:	stmib	sp, {r1, ip, lr}
   1921c:	mov	r1, #1
   19220:	str	r2, [sp]
   19224:	mov	r2, r0
   19228:	mov	r0, r4
   1922c:	bl	11764 <__fprintf_chk@plt>
   19230:	b	1902c <lchmod@@Base+0x28fc>
   19234:	str	r3, [sp]
   19238:	mov	r1, #1
   1923c:	mov	r3, r2
   19240:	ldr	r2, [pc, #76]	; 19294 <lchmod@@Base+0x2b64>
   19244:	bl	11764 <__fprintf_chk@plt>
   19248:	b	18f34 <lchmod@@Base+0x2804>
   1924c:	mov	r2, #5
   19250:	ldr	r1, [pc, #64]	; 19298 <lchmod@@Base+0x2b68>
   19254:	b	18fd8 <lchmod@@Base+0x28a8>
   19258:	andeq	fp, r1, r8, asr #20
   1925c:	andeq	fp, r1, ip, asr sl
   19260:	andeq	r0, r0, r6, ror #15
   19264:	andeq	fp, r1, r4, lsr sp
   19268:	andeq	fp, r1, r0, ror #20
   1926c:	andeq	fp, r1, ip, lsl #22
   19270:	andeq	fp, r1, ip, lsr ip
   19274:	andeq	fp, r1, r0, lsr fp
   19278:	andeq	fp, r1, r0, asr #22
   1927c:	andeq	fp, r1, r8, asr fp
   19280:	andeq	fp, r1, r4, ror fp
   19284:	muleq	r1, r4, fp
   19288:			; <UNDEFINED> instruction: 0x0001bbb8
   1928c:	andeq	fp, r1, r0, ror #23
   19290:	andeq	fp, r1, ip, lsl #24
   19294:	andeq	fp, r1, r4, asr sl
   19298:	andeq	fp, r1, r0, ror ip
   1929c:	push	{r4, r5, lr}
   192a0:	sub	sp, sp, #12
   192a4:	ldr	r5, [sp, #24]
   192a8:	ldr	ip, [r5]
   192ac:	cmp	ip, #0
   192b0:	beq	192cc <lchmod@@Base+0x2b9c>
   192b4:	mov	lr, r5
   192b8:	mov	ip, #0
   192bc:	ldr	r4, [lr, #4]!
   192c0:	add	ip, ip, #1
   192c4:	cmp	r4, #0
   192c8:	bne	192bc <lchmod@@Base+0x2b8c>
   192cc:	stm	sp, {r5, ip}
   192d0:	bl	18f04 <lchmod@@Base+0x27d4>
   192d4:	add	sp, sp, #12
   192d8:	pop	{r4, r5, pc}
   192dc:	push	{r4, r5, lr}
   192e0:	sub	sp, sp, #52	; 0x34
   192e4:	add	r5, sp, #4
   192e8:	ldr	r4, [sp, #64]	; 0x40
   192ec:	mov	ip, #0
   192f0:	sub	r4, r4, #4
   192f4:	ldr	lr, [r4, #4]!
   192f8:	cmp	lr, #0
   192fc:	str	lr, [r5, #4]!
   19300:	beq	19310 <lchmod@@Base+0x2be0>
   19304:	add	ip, ip, #1
   19308:	cmp	ip, #10
   1930c:	bne	192f4 <lchmod@@Base+0x2bc4>
   19310:	add	lr, sp, #8
   19314:	str	ip, [sp, #4]
   19318:	str	lr, [sp]
   1931c:	bl	18f04 <lchmod@@Base+0x27d4>
   19320:	add	sp, sp, #52	; 0x34
   19324:	pop	{r4, r5, pc}
   19328:	push	{r3}		; (str r3, [sp, #-4]!)
   1932c:	push	{r4, lr}
   19330:	sub	sp, sp, #60	; 0x3c
   19334:	add	lr, sp, #56	; 0x38
   19338:	add	r3, sp, #72	; 0x48
   1933c:	str	r3, [lr, #-44]!	; 0xffffffd4
   19340:	add	r4, sp, #68	; 0x44
   19344:	mov	r3, #0
   19348:	ldr	ip, [r4, #4]!
   1934c:	cmp	ip, #0
   19350:	str	ip, [lr, #4]!
   19354:	beq	19364 <lchmod@@Base+0x2c34>
   19358:	add	r3, r3, #1
   1935c:	cmp	r3, #10
   19360:	bne	19348 <lchmod@@Base+0x2c18>
   19364:	add	ip, sp, #16
   19368:	str	r3, [sp, #4]
   1936c:	str	ip, [sp]
   19370:	ldr	r3, [sp, #68]	; 0x44
   19374:	bl	18f04 <lchmod@@Base+0x27d4>
   19378:	add	sp, sp, #60	; 0x3c
   1937c:	pop	{r4, lr}
   19380:	add	sp, sp, #4
   19384:	bx	lr
   19388:	ldr	r3, [pc, #116]	; 19404 <lchmod@@Base+0x2cd4>
   1938c:	push	{r4, lr}
   19390:	mov	r0, #10
   19394:	ldr	r1, [r3]
   19398:	bl	1156c <fputc_unlocked@plt>
   1939c:	mov	r2, #5
   193a0:	ldr	r1, [pc, #96]	; 19408 <lchmod@@Base+0x2cd8>
   193a4:	mov	r0, #0
   193a8:	bl	11578 <dcgettext@plt>
   193ac:	ldr	r2, [pc, #88]	; 1940c <lchmod@@Base+0x2cdc>
   193b0:	mov	r1, r0
   193b4:	mov	r0, #1
   193b8:	bl	1174c <__printf_chk@plt>
   193bc:	mov	r2, #5
   193c0:	ldr	r1, [pc, #72]	; 19410 <lchmod@@Base+0x2ce0>
   193c4:	mov	r0, #0
   193c8:	bl	11578 <dcgettext@plt>
   193cc:	ldr	r3, [pc, #64]	; 19414 <lchmod@@Base+0x2ce4>
   193d0:	ldr	r2, [pc, #64]	; 19418 <lchmod@@Base+0x2ce8>
   193d4:	mov	r1, r0
   193d8:	mov	r0, #1
   193dc:	bl	1174c <__printf_chk@plt>
   193e0:	mov	r2, #5
   193e4:	ldr	r1, [pc, #48]	; 1941c <lchmod@@Base+0x2cec>
   193e8:	mov	r0, #0
   193ec:	bl	11578 <dcgettext@plt>
   193f0:	ldr	r2, [pc, #40]	; 19420 <lchmod@@Base+0x2cf0>
   193f4:	pop	{r4, lr}
   193f8:	mov	r1, r0
   193fc:	mov	r0, #1
   19400:	b	1174c <__printf_chk@plt>
   19404:	andeq	ip, r2, r4, ror #3
   19408:	andeq	fp, r1, ip, lsr #25
   1940c:	andeq	fp, r1, r0, asr #25
   19410:	ldrdeq	fp, [r1], -r8
   19414:	andeq	fp, r1, r4, lsr #9
   19418:	andeq	fp, r1, ip, asr #9
   1941c:	andeq	fp, r1, ip, ror #25
   19420:	andeq	fp, r1, r4, lsl sp
   19424:	push	{r4, lr}
   19428:	bl	1a0b4 <lchmod@@Base+0x3984>
   1942c:	cmp	r0, #0
   19430:	popne	{r4, pc}
   19434:	bl	1996c <lchmod@@Base+0x323c>
   19438:	push	{r4, lr}
   1943c:	bl	1a0b4 <lchmod@@Base+0x3984>
   19440:	cmp	r0, #0
   19444:	popne	{r4, pc}
   19448:	bl	1996c <lchmod@@Base+0x323c>
   1944c:	push	{r4, lr}
   19450:	bl	1a0b4 <lchmod@@Base+0x3984>
   19454:	cmp	r0, #0
   19458:	popne	{r4, pc}
   1945c:	bl	1996c <lchmod@@Base+0x323c>
   19460:	push	{r4, r5, r6, lr}
   19464:	mov	r5, r0
   19468:	mov	r4, r1
   1946c:	bl	1a0e0 <lchmod@@Base+0x39b0>
   19470:	cmp	r0, #0
   19474:	popne	{r4, r5, r6, pc}
   19478:	adds	r4, r4, #0
   1947c:	movne	r4, #1
   19480:	cmp	r5, #0
   19484:	orreq	r4, r4, #1
   19488:	cmp	r4, #0
   1948c:	popeq	{r4, r5, r6, pc}
   19490:	bl	1996c <lchmod@@Base+0x323c>
   19494:	push	{r4, lr}
   19498:	cmp	r1, #0
   1949c:	orreq	r1, r1, #1
   194a0:	bl	1a0e0 <lchmod@@Base+0x39b0>
   194a4:	cmp	r0, #0
   194a8:	popne	{r4, pc}
   194ac:	bl	1996c <lchmod@@Base+0x323c>
   194b0:	push	{r4, r5, r6, lr}
   194b4:	mov	r6, r0
   194b8:	mov	r5, r1
   194bc:	mov	r4, r2
   194c0:	bl	1a7c4 <lchmod@@Base+0x4094>
   194c4:	cmp	r0, #0
   194c8:	popne	{r4, r5, r6, pc}
   194cc:	cmp	r6, #0
   194d0:	beq	194e0 <lchmod@@Base+0x2db0>
   194d4:	cmp	r5, #0
   194d8:	cmpne	r4, #0
   194dc:	popeq	{r4, r5, r6, pc}
   194e0:	bl	1996c <lchmod@@Base+0x323c>
   194e4:	b	194b0 <lchmod@@Base+0x2d80>
   194e8:	cmp	r2, #0
   194ec:	cmpne	r1, #0
   194f0:	moveq	r2, #1
   194f4:	moveq	r1, r2
   194f8:	push	{r4, lr}
   194fc:	bl	1a7c4 <lchmod@@Base+0x4094>
   19500:	cmp	r0, #0
   19504:	popne	{r4, pc}
   19508:	bl	1996c <lchmod@@Base+0x323c>
   1950c:	mov	r2, r1
   19510:	mov	r1, r0
   19514:	mov	r0, #0
   19518:	b	194b0 <lchmod@@Base+0x2d80>
   1951c:	mov	r2, r1
   19520:	mov	r1, r0
   19524:	mov	r0, #0
   19528:	b	194e8 <lchmod@@Base+0x2db8>
   1952c:	push	{r4, r5, r6, lr}
   19530:	subs	r6, r0, #0
   19534:	sub	sp, sp, #8
   19538:	mov	r5, r1
   1953c:	ldr	r4, [r1]
   19540:	beq	1957c <lchmod@@Base+0x2e4c>
   19544:	lsr	r1, r4, #1
   19548:	add	r3, r1, #1
   1954c:	mvn	r3, r3
   19550:	cmp	r4, r3
   19554:	bhi	19578 <lchmod@@Base+0x2e48>
   19558:	add	r4, r4, #1
   1955c:	add	r4, r4, r1
   19560:	mov	r0, r6
   19564:	mov	r1, r4
   19568:	bl	194b0 <lchmod@@Base+0x2d80>
   1956c:	str	r4, [r5]
   19570:	add	sp, sp, #8
   19574:	pop	{r4, r5, r6, pc}
   19578:	bl	1996c <lchmod@@Base+0x323c>
   1957c:	cmp	r4, #0
   19580:	bne	19560 <lchmod@@Base+0x2e30>
   19584:	mov	r1, r2
   19588:	mov	r0, #64	; 0x40
   1958c:	str	r2, [sp, #4]
   19590:	bl	1a910 <lchmod@@Base+0x41e0>
   19594:	ldr	r2, [sp, #4]
   19598:	cmp	r0, #0
   1959c:	movne	r4, r0
   195a0:	addeq	r4, r0, #1
   195a4:	b	19560 <lchmod@@Base+0x2e30>
   195a8:	mov	r2, #1
   195ac:	b	1952c <lchmod@@Base+0x2dfc>
   195b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195b4:	sub	sp, sp, #12
   195b8:	ldr	r6, [r1]
   195bc:	mov	sl, r1
   195c0:	mov	r9, r0
   195c4:	asrs	r4, r6, #1
   195c8:	mov	r5, r2
   195cc:	mov	fp, r3
   195d0:	ldr	r7, [sp, #48]	; 0x30
   195d4:	bmi	19740 <lchmod@@Base+0x3010>
   195d8:	mvn	r3, #-2147483648	; 0x80000000
   195dc:	sub	r3, r3, r4
   195e0:	cmp	r6, r3
   195e4:	movle	r3, #0
   195e8:	movgt	r3, #1
   195ec:	mvn	r8, fp
   195f0:	cmp	r3, #0
   195f4:	addeq	r4, r4, r6
   195f8:	mvnne	r4, #-2147483648	; 0x80000000
   195fc:	lsr	r8, r8, #31
   19600:	cmp	fp, r4
   19604:	movge	r3, #0
   19608:	andlt	r3, r8, #1
   1960c:	cmp	r3, #0
   19610:	beq	196f8 <lchmod@@Base+0x2fc8>
   19614:	cmp	r7, #0
   19618:	blt	197c8 <lchmod@@Base+0x3098>
   1961c:	bne	197c0 <lchmod@@Base+0x3090>
   19620:	mov	r2, #64	; 0x40
   19624:	mov	r1, r7
   19628:	mov	r0, r2
   1962c:	str	r2, [sp, #4]
   19630:	bl	1ab1c <lchmod@@Base+0x43ec>
   19634:	ldr	r2, [sp, #4]
   19638:	mov	r1, r7
   1963c:	mov	r4, r0
   19640:	mov	r0, r2
   19644:	bl	1ad3c <lchmod@@Base+0x460c>
   19648:	ldr	r2, [sp, #4]
   1964c:	sub	r1, r2, r1
   19650:	cmp	r9, #0
   19654:	sub	r3, r4, r6
   19658:	streq	r9, [sl]
   1965c:	cmp	r3, r5
   19660:	bge	196e4 <lchmod@@Base+0x2fb4>
   19664:	cmp	r5, #0
   19668:	blt	19754 <lchmod@@Base+0x3024>
   1966c:	cmp	r6, #0
   19670:	blt	19690 <lchmod@@Base+0x2f60>
   19674:	mvn	r3, #-2147483648	; 0x80000000
   19678:	sub	r3, r3, r5
   1967c:	cmp	r6, r3
   19680:	movle	r3, #0
   19684:	movgt	r3, #1
   19688:	cmp	r3, #0
   1968c:	bne	19850 <lchmod@@Base+0x3120>
   19690:	add	r5, r6, r5
   19694:	cmp	fp, r5
   19698:	movge	r8, #0
   1969c:	andlt	r8, r8, #1
   196a0:	cmp	r8, #0
   196a4:	mov	r4, r5
   196a8:	bne	19850 <lchmod@@Base+0x3120>
   196ac:	cmp	r7, #0
   196b0:	blt	19768 <lchmod@@Base+0x3038>
   196b4:	beq	196e0 <lchmod@@Base+0x2fb0>
   196b8:	cmp	r5, #0
   196bc:	blt	19810 <lchmod@@Base+0x30e0>
   196c0:	mov	r1, r7
   196c4:	mvn	r0, #-2147483648	; 0x80000000
   196c8:	bl	1ab1c <lchmod@@Base+0x43ec>
   196cc:	cmp	r5, r0
   196d0:	movle	r0, #0
   196d4:	movgt	r0, #1
   196d8:	cmp	r0, #0
   196dc:	bne	19850 <lchmod@@Base+0x3120>
   196e0:	mul	r1, r5, r7
   196e4:	mov	r0, r9
   196e8:	bl	19460 <lchmod@@Base+0x2d30>
   196ec:	str	r4, [sl]
   196f0:	add	sp, sp, #12
   196f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196f8:	cmp	r7, #0
   196fc:	blt	19794 <lchmod@@Base+0x3064>
   19700:	beq	19620 <lchmod@@Base+0x2ef0>
   19704:	cmp	r4, #0
   19708:	blt	197d0 <lchmod@@Base+0x30a0>
   1970c:	mov	r1, r7
   19710:	mvn	r0, #-2147483648	; 0x80000000
   19714:	bl	1ab1c <lchmod@@Base+0x43ec>
   19718:	cmp	r0, r4
   1971c:	movge	r0, #0
   19720:	movlt	r0, #1
   19724:	cmp	r0, #0
   19728:	mvnne	r2, #-2147483648	; 0x80000000
   1972c:	bne	19624 <lchmod@@Base+0x2ef4>
   19730:	mul	r1, r7, r4
   19734:	cmp	r1, #63	; 0x3f
   19738:	bgt	19650 <lchmod@@Base+0x2f20>
   1973c:	b	19620 <lchmod@@Base+0x2ef0>
   19740:	rsb	r3, r4, #-2147483648	; 0x80000000
   19744:	cmp	r6, r3
   19748:	movge	r3, #0
   1974c:	movlt	r3, #1
   19750:	b	195ec <lchmod@@Base+0x2ebc>
   19754:	rsb	r3, r5, #-2147483648	; 0x80000000
   19758:	cmp	r6, r3
   1975c:	movge	r3, #0
   19760:	movlt	r3, #1
   19764:	b	19688 <lchmod@@Base+0x2f58>
   19768:	cmp	r5, #0
   1976c:	blt	197f4 <lchmod@@Base+0x30c4>
   19770:	cmn	r7, #1
   19774:	beq	196e0 <lchmod@@Base+0x2fb0>
   19778:	mov	r1, r7
   1977c:	mov	r0, #-2147483648	; 0x80000000
   19780:	bl	1ab1c <lchmod@@Base+0x43ec>
   19784:	cmp	r5, r0
   19788:	movle	r0, #0
   1978c:	movgt	r0, #1
   19790:	b	196d8 <lchmod@@Base+0x2fa8>
   19794:	cmp	r4, #0
   19798:	blt	19834 <lchmod@@Base+0x3104>
   1979c:	cmn	r7, #1
   197a0:	beq	19730 <lchmod@@Base+0x3000>
   197a4:	mov	r1, r7
   197a8:	mov	r0, #-2147483648	; 0x80000000
   197ac:	bl	1ab1c <lchmod@@Base+0x43ec>
   197b0:	cmp	r0, r4
   197b4:	movge	r0, #0
   197b8:	movlt	r0, #1
   197bc:	b	19724 <lchmod@@Base+0x2ff4>
   197c0:	mov	r4, fp
   197c4:	b	1970c <lchmod@@Base+0x2fdc>
   197c8:	mov	r4, fp
   197cc:	b	1979c <lchmod@@Base+0x306c>
   197d0:	cmn	r4, #1
   197d4:	beq	19730 <lchmod@@Base+0x3000>
   197d8:	mov	r1, r4
   197dc:	mov	r0, #-2147483648	; 0x80000000
   197e0:	bl	1ab1c <lchmod@@Base+0x43ec>
   197e4:	cmp	r7, r0
   197e8:	movle	r0, #0
   197ec:	movgt	r0, #1
   197f0:	b	19724 <lchmod@@Base+0x2ff4>
   197f4:	mov	r1, r7
   197f8:	mvn	r0, #-2147483648	; 0x80000000
   197fc:	bl	1ab1c <lchmod@@Base+0x43ec>
   19800:	cmp	r5, r0
   19804:	movge	r0, #0
   19808:	movlt	r0, #1
   1980c:	b	196d8 <lchmod@@Base+0x2fa8>
   19810:	cmn	r5, #1
   19814:	beq	196e0 <lchmod@@Base+0x2fb0>
   19818:	mov	r1, r5
   1981c:	mov	r0, #-2147483648	; 0x80000000
   19820:	bl	1ab1c <lchmod@@Base+0x43ec>
   19824:	cmp	r7, r0
   19828:	movle	r0, #0
   1982c:	movgt	r0, #1
   19830:	b	196d8 <lchmod@@Base+0x2fa8>
   19834:	mov	r1, r7
   19838:	mvn	r0, #-2147483648	; 0x80000000
   1983c:	bl	1ab1c <lchmod@@Base+0x43ec>
   19840:	cmp	r0, r4
   19844:	movle	r0, #0
   19848:	movgt	r0, #1
   1984c:	b	19724 <lchmod@@Base+0x2ff4>
   19850:	bl	1996c <lchmod@@Base+0x323c>
   19854:	push	{r4, lr}
   19858:	mov	r1, #1
   1985c:	bl	1a06c <lchmod@@Base+0x393c>
   19860:	cmp	r0, #0
   19864:	popne	{r4, pc}
   19868:	bl	1996c <lchmod@@Base+0x323c>
   1986c:	push	{r4, lr}
   19870:	mov	r1, #1
   19874:	bl	1a06c <lchmod@@Base+0x393c>
   19878:	cmp	r0, #0
   1987c:	popne	{r4, pc}
   19880:	bl	1996c <lchmod@@Base+0x323c>
   19884:	push	{r4, lr}
   19888:	bl	1a06c <lchmod@@Base+0x393c>
   1988c:	cmp	r0, #0
   19890:	popne	{r4, pc}
   19894:	bl	1996c <lchmod@@Base+0x323c>
   19898:	push	{r4, lr}
   1989c:	bl	1a06c <lchmod@@Base+0x393c>
   198a0:	cmp	r0, #0
   198a4:	popne	{r4, pc}
   198a8:	bl	1996c <lchmod@@Base+0x323c>
   198ac:	push	{r4, r5, r6, lr}
   198b0:	mov	r6, r0
   198b4:	mov	r0, r1
   198b8:	mov	r4, r1
   198bc:	bl	1a0b4 <lchmod@@Base+0x3984>
   198c0:	subs	r5, r0, #0
   198c4:	beq	198dc <lchmod@@Base+0x31ac>
   198c8:	mov	r2, r4
   198cc:	mov	r1, r6
   198d0:	bl	11530 <memcpy@plt>
   198d4:	mov	r0, r5
   198d8:	pop	{r4, r5, r6, pc}
   198dc:	bl	1996c <lchmod@@Base+0x323c>
   198e0:	push	{r4, r5, r6, lr}
   198e4:	mov	r6, r0
   198e8:	mov	r0, r1
   198ec:	mov	r4, r1
   198f0:	bl	1a0b4 <lchmod@@Base+0x3984>
   198f4:	subs	r5, r0, #0
   198f8:	beq	19910 <lchmod@@Base+0x31e0>
   198fc:	mov	r2, r4
   19900:	mov	r1, r6
   19904:	bl	11530 <memcpy@plt>
   19908:	mov	r0, r5
   1990c:	pop	{r4, r5, r6, pc}
   19910:	bl	1996c <lchmod@@Base+0x323c>
   19914:	push	{r4, r5, r6, lr}
   19918:	mov	r6, r0
   1991c:	add	r0, r1, #1
   19920:	mov	r4, r1
   19924:	bl	1a0b4 <lchmod@@Base+0x3984>
   19928:	subs	r5, r0, #0
   1992c:	beq	1994c <lchmod@@Base+0x321c>
   19930:	mov	r3, #0
   19934:	mov	r1, r6
   19938:	strb	r3, [r5, r4]
   1993c:	mov	r2, r4
   19940:	bl	11530 <memcpy@plt>
   19944:	mov	r0, r5
   19948:	pop	{r4, r5, r6, pc}
   1994c:	bl	1996c <lchmod@@Base+0x323c>
   19950:	push	{r4, lr}
   19954:	mov	r4, r0
   19958:	bl	116e0 <strlen@plt>
   1995c:	add	r1, r0, #1
   19960:	mov	r0, r4
   19964:	pop	{r4, lr}
   19968:	b	198ac <lchmod@@Base+0x317c>
   1996c:	ldr	r3, [pc, #44]	; 199a0 <lchmod@@Base+0x3270>
   19970:	push	{r4, lr}
   19974:	mov	r2, #5
   19978:	ldr	r1, [pc, #36]	; 199a4 <lchmod@@Base+0x3274>
   1997c:	mov	r0, #0
   19980:	ldr	r4, [r3]
   19984:	bl	11578 <dcgettext@plt>
   19988:	ldr	r2, [pc, #24]	; 199a8 <lchmod@@Base+0x3278>
   1998c:	mov	r1, #0
   19990:	mov	r3, r0
   19994:	mov	r0, r4
   19998:	bl	11638 <error@plt>
   1999c:	bl	11878 <abort@plt>
   199a0:	andeq	ip, r2, ip, lsl #3
   199a4:	andeq	fp, r1, r4, ror #26
   199a8:	andeq	fp, r1, r8, asr r8
   199ac:	push	{r4, lr}
   199b0:	orr	r1, r1, #512	; 0x200
   199b4:	bl	148d0 <__assert_fail@plt+0x3004>
   199b8:	cmp	r0, #0
   199bc:	popne	{r4, pc}
   199c0:	bl	1171c <__errno_location@plt>
   199c4:	ldr	r3, [r0]
   199c8:	cmp	r3, #22
   199cc:	beq	199d4 <lchmod@@Base+0x32a4>
   199d0:	bl	1996c <lchmod@@Base+0x323c>
   199d4:	ldr	r3, [pc, #12]	; 199e8 <lchmod@@Base+0x32b8>
   199d8:	mov	r2, #41	; 0x29
   199dc:	ldr	r1, [pc, #8]	; 199ec <lchmod@@Base+0x32bc>
   199e0:	ldr	r0, [pc, #8]	; 199f0 <lchmod@@Base+0x32c0>
   199e4:	bl	118cc <__assert_fail@plt>
   199e8:	andeq	fp, r1, r8, ror sp
   199ec:	andeq	fp, r1, r4, lsl #27
   199f0:	muleq	r1, r0, sp
   199f4:	ldr	r3, [r0, #48]	; 0x30
   199f8:	and	r3, r3, #17
   199fc:	cmp	r3, #16
   19a00:	beq	19a24 <lchmod@@Base+0x32f4>
   19a04:	cmp	r3, #17
   19a08:	beq	19a14 <lchmod@@Base+0x32e4>
   19a0c:	mov	r0, #0
   19a10:	bx	lr
   19a14:	ldr	r0, [r1, #48]	; 0x30
   19a18:	adds	r0, r0, #0
   19a1c:	movne	r0, #1
   19a20:	bx	lr
   19a24:	mov	r0, #1
   19a28:	bx	lr
   19a2c:	push	{r4, r5, r6, r7, r8, lr}
   19a30:	subs	r5, r1, #0
   19a34:	mov	r4, r0
   19a38:	blt	19aac <lchmod@@Base+0x337c>
   19a3c:	moveq	r6, #0
   19a40:	moveq	r7, #0
   19a44:	bne	19a6c <lchmod@@Base+0x333c>
   19a48:	ldr	r2, [r4]
   19a4c:	ldr	r1, [r4, #4]
   19a50:	mov	r0, #0
   19a54:	mul	ip, r2, r7
   19a58:	umull	r2, r3, r2, r5
   19a5c:	mla	r5, r5, r1, ip
   19a60:	add	r3, r5, r3
   19a64:	strd	r2, [r4]
   19a68:	pop	{r4, r5, r6, r7, r8, pc}
   19a6c:	asr	r7, r5, #31
   19a70:	mov	r2, r5
   19a74:	mov	r3, r7
   19a78:	mvn	r0, #0
   19a7c:	mvn	r1, #0
   19a80:	bl	1ad5c <lchmod@@Base+0x462c>
   19a84:	ldrd	r2, [r4]
   19a88:	mov	r6, r5
   19a8c:	cmp	r1, r3
   19a90:	cmpeq	r0, r2
   19a94:	bcs	19a48 <lchmod@@Base+0x3318>
   19a98:	mvn	r2, #0
   19a9c:	mvn	r3, #0
   19aa0:	mov	r0, #1
   19aa4:	strd	r2, [r4]
   19aa8:	pop	{r4, r5, r6, r7, r8, pc}
   19aac:	ldrd	r2, [r0]
   19ab0:	orrs	r3, r2, r3
   19ab4:	moveq	r6, r5
   19ab8:	asreq	r7, r6, #31
   19abc:	bne	19a98 <lchmod@@Base+0x3368>
   19ac0:	b	19a48 <lchmod@@Base+0x3318>
   19ac4:	cmp	r2, #36	; 0x24
   19ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19acc:	sub	sp, sp, #20
   19ad0:	bhi	1a044 <lchmod@@Base+0x3914>
   19ad4:	cmp	r1, #0
   19ad8:	mov	r8, r2
   19adc:	mov	r7, r0
   19ae0:	mov	r5, r1
   19ae4:	mov	r6, r3
   19ae8:	addeq	r5, sp, #4
   19aec:	bl	1171c <__errno_location@plt>
   19af0:	mov	r3, #0
   19af4:	str	r3, [r0]
   19af8:	mov	r9, r0
   19afc:	bl	116b0 <__ctype_b_loc@plt>
   19b00:	ldrb	r3, [r7]
   19b04:	mov	r2, r7
   19b08:	ldr	r0, [r0]
   19b0c:	b	19b14 <lchmod@@Base+0x33e4>
   19b10:	ldrb	r3, [r2, #1]!
   19b14:	lsl	r1, r3, #1
   19b18:	ldrh	r4, [r0, r1]
   19b1c:	ands	r4, r4, #8192	; 0x2000
   19b20:	bne	19b10 <lchmod@@Base+0x33e0>
   19b24:	cmp	r3, #45	; 0x2d
   19b28:	bne	19b3c <lchmod@@Base+0x340c>
   19b2c:	mov	r4, #4
   19b30:	mov	r0, r4
   19b34:	add	sp, sp, #20
   19b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b3c:	mov	r2, r8
   19b40:	mov	r3, r4
   19b44:	mov	r1, r5
   19b48:	mov	r0, r7
   19b4c:	bl	1153c <__strtoull_internal@plt>
   19b50:	ldr	r8, [r5]
   19b54:	cmp	r7, r8
   19b58:	mov	r2, r0
   19b5c:	str	r0, [sp, #8]
   19b60:	str	r1, [sp, #12]
   19b64:	beq	19bb0 <lchmod@@Base+0x3480>
   19b68:	ldr	r4, [r9]
   19b6c:	cmp	r4, #0
   19b70:	bne	19ba0 <lchmod@@Base+0x3470>
   19b74:	ldr	r3, [sp, #56]	; 0x38
   19b78:	cmp	r3, #0
   19b7c:	beq	19b8c <lchmod@@Base+0x345c>
   19b80:	ldrb	r9, [r8]
   19b84:	cmp	r9, #0
   19b88:	bne	19be8 <lchmod@@Base+0x34b8>
   19b8c:	mov	r0, r4
   19b90:	str	r2, [r6]
   19b94:	str	r1, [r6, #4]
   19b98:	add	sp, sp, #20
   19b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ba0:	cmp	r4, #34	; 0x22
   19ba4:	bne	19b2c <lchmod@@Base+0x33fc>
   19ba8:	mov	r4, #1
   19bac:	b	19b74 <lchmod@@Base+0x3444>
   19bb0:	ldr	r3, [sp, #56]	; 0x38
   19bb4:	cmp	r3, #0
   19bb8:	beq	19b2c <lchmod@@Base+0x33fc>
   19bbc:	ldrb	r1, [r8]
   19bc0:	cmp	r1, #0
   19bc4:	beq	19b2c <lchmod@@Base+0x33fc>
   19bc8:	mov	r0, r3
   19bcc:	bl	116f8 <strchr@plt>
   19bd0:	cmp	r0, #0
   19bd4:	beq	19b2c <lchmod@@Base+0x33fc>
   19bd8:	ldrb	r9, [r8]
   19bdc:	mov	r2, #1
   19be0:	mov	r3, #0
   19be4:	strd	r2, [sp, #8]
   19be8:	mov	r1, r9
   19bec:	ldr	r0, [sp, #56]	; 0x38
   19bf0:	bl	116f8 <strchr@plt>
   19bf4:	cmp	r0, #0
   19bf8:	beq	1a000 <lchmod@@Base+0x38d0>
   19bfc:	sub	r3, r9, #69	; 0x45
   19c00:	cmp	r3, #47	; 0x2f
   19c04:	ldrls	pc, [pc, r3, lsl #2]
   19c08:	b	19ccc <lchmod@@Base+0x359c>
   19c0c:			; <UNDEFINED> instruction: 0x00019dbc
   19c10:	andeq	r9, r1, ip, asr #25
   19c14:			; <UNDEFINED> instruction: 0x00019dbc
   19c18:	andeq	r9, r1, ip, asr #25
   19c1c:	andeq	r9, r1, ip, asr #25
   19c20:	andeq	r9, r1, ip, asr #25
   19c24:			; <UNDEFINED> instruction: 0x00019dbc
   19c28:	andeq	r9, r1, ip, asr #25
   19c2c:			; <UNDEFINED> instruction: 0x00019dbc
   19c30:	andeq	r9, r1, ip, asr #25
   19c34:	andeq	r9, r1, ip, asr #25
   19c38:			; <UNDEFINED> instruction: 0x00019dbc
   19c3c:	andeq	r9, r1, ip, asr #25
   19c40:	andeq	r9, r1, ip, asr #25
   19c44:	andeq	r9, r1, ip, asr #25
   19c48:			; <UNDEFINED> instruction: 0x00019dbc
   19c4c:	andeq	r9, r1, ip, asr #25
   19c50:	andeq	r9, r1, ip, asr #25
   19c54:	andeq	r9, r1, ip, asr #25
   19c58:	andeq	r9, r1, ip, asr #25
   19c5c:			; <UNDEFINED> instruction: 0x00019dbc
   19c60:			; <UNDEFINED> instruction: 0x00019dbc
   19c64:	andeq	r9, r1, ip, asr #25
   19c68:	andeq	r9, r1, ip, asr #25
   19c6c:	andeq	r9, r1, ip, asr #25
   19c70:	andeq	r9, r1, ip, asr #25
   19c74:	andeq	r9, r1, ip, asr #25
   19c78:	andeq	r9, r1, ip, asr #25
   19c7c:	andeq	r9, r1, ip, asr #25
   19c80:	andeq	r9, r1, ip, asr #25
   19c84:	andeq	r9, r1, ip, asr #25
   19c88:	andeq	r9, r1, ip, asr #25
   19c8c:	andeq	r9, r1, ip, asr #25
   19c90:	andeq	r9, r1, ip, asr #25
   19c94:			; <UNDEFINED> instruction: 0x00019dbc
   19c98:	andeq	r9, r1, ip, asr #25
   19c9c:	andeq	r9, r1, ip, asr #25
   19ca0:	andeq	r9, r1, ip, asr #25
   19ca4:			; <UNDEFINED> instruction: 0x00019dbc
   19ca8:	andeq	r9, r1, ip, asr #25
   19cac:			; <UNDEFINED> instruction: 0x00019dbc
   19cb0:	andeq	r9, r1, ip, asr #25
   19cb4:	andeq	r9, r1, ip, asr #25
   19cb8:	andeq	r9, r1, ip, asr #25
   19cbc:	andeq	r9, r1, ip, asr #25
   19cc0:	andeq	r9, r1, ip, asr #25
   19cc4:	andeq	r9, r1, ip, asr #25
   19cc8:			; <UNDEFINED> instruction: 0x00019dbc
   19ccc:	mov	r7, #1
   19cd0:	mov	sl, #1024	; 0x400
   19cd4:	sub	r9, r9, #66	; 0x42
   19cd8:	cmp	r9, #53	; 0x35
   19cdc:	ldrls	pc, [pc, r9, lsl #2]
   19ce0:	b	1a000 <lchmod@@Base+0x38d0>
   19ce4:	andeq	r9, r1, ip, asr #30
   19ce8:	andeq	sl, r1, r0
   19cec:	andeq	sl, r1, r0
   19cf0:	andeq	r9, r1, r4, lsr #30
   19cf4:	andeq	sl, r1, r0
   19cf8:	strdeq	r9, [r1], -ip
   19cfc:	andeq	sl, r1, r0
   19d00:	andeq	sl, r1, r0
   19d04:	andeq	sl, r1, r0
   19d08:	ldrdeq	r9, [r1], -ip
   19d0c:	andeq	sl, r1, r0
   19d10:	andeq	r9, r1, r8, lsr #31
   19d14:	andeq	sl, r1, r0
   19d18:	andeq	sl, r1, r0
   19d1c:	andeq	r9, r1, r0, lsl #31
   19d20:	andeq	sl, r1, r0
   19d24:	andeq	sl, r1, r0
   19d28:	andeq	sl, r1, r0
   19d2c:	ldrdeq	r9, [r1], -r8
   19d30:	andeq	sl, r1, r0
   19d34:	andeq	sl, r1, r0
   19d38:	andeq	sl, r1, r0
   19d3c:	andeq	sl, r1, r0
   19d40:			; <UNDEFINED> instruction: 0x00019eb4
   19d44:	andeq	r9, r1, r0, lsl #29
   19d48:	andeq	sl, r1, r0
   19d4c:	andeq	sl, r1, r0
   19d50:	andeq	sl, r1, r0
   19d54:	andeq	sl, r1, r0
   19d58:	andeq	sl, r1, r0
   19d5c:	andeq	sl, r1, r0
   19d60:	andeq	sl, r1, r0
   19d64:	andeq	r9, r1, ip, asr #28
   19d68:	andeq	r9, r1, ip, lsr lr
   19d6c:	andeq	sl, r1, r0
   19d70:	andeq	sl, r1, r0
   19d74:	andeq	sl, r1, r0
   19d78:	strdeq	r9, [r1], -ip
   19d7c:	andeq	sl, r1, r0
   19d80:	andeq	sl, r1, r0
   19d84:	andeq	sl, r1, r0
   19d88:	ldrdeq	r9, [r1], -ip
   19d8c:	andeq	sl, r1, r0
   19d90:	andeq	r9, r1, r8, lsr #31
   19d94:	andeq	sl, r1, r0
   19d98:	andeq	sl, r1, r0
   19d9c:	andeq	sl, r1, r0
   19da0:	andeq	sl, r1, r0
   19da4:	andeq	sl, r1, r0
   19da8:	andeq	sl, r1, r0
   19dac:	ldrdeq	r9, [r1], -r8
   19db0:	andeq	sl, r1, r0
   19db4:	andeq	sl, r1, r0
   19db8:	strdeq	r9, [r1], -r8
   19dbc:	mov	r1, #48	; 0x30
   19dc0:	ldr	r0, [sp, #56]	; 0x38
   19dc4:	bl	116f8 <strchr@plt>
   19dc8:	cmp	r0, #0
   19dcc:	beq	19ccc <lchmod@@Base+0x359c>
   19dd0:	ldrb	r3, [r8, #1]
   19dd4:	cmp	r3, #68	; 0x44
   19dd8:	beq	19dec <lchmod@@Base+0x36bc>
   19ddc:	cmp	r3, #105	; 0x69
   19de0:	beq	1a010 <lchmod@@Base+0x38e0>
   19de4:	cmp	r3, #66	; 0x42
   19de8:	bne	19ccc <lchmod@@Base+0x359c>
   19dec:	mov	r7, #2
   19df0:	mov	sl, #1000	; 0x3e8
   19df4:	b	19cd4 <lchmod@@Base+0x35a4>
   19df8:	ldrd	r2, [sp, #8]
   19dfc:	cmp	r2, #0
   19e00:	sbcs	r1, r3, #0
   19e04:	blt	1a028 <lchmod@@Base+0x38f8>
   19e08:	adds	r2, r2, r2
   19e0c:	adc	r3, r3, r3
   19e10:	mov	r1, r3
   19e14:	mov	r9, #0
   19e18:	str	r2, [sp, #8]
   19e1c:	str	r3, [sp, #12]
   19e20:	add	r3, r8, r7
   19e24:	str	r3, [r5]
   19e28:	ldrb	r3, [r8, r7]
   19e2c:	orr	r4, r4, r9
   19e30:	cmp	r3, #0
   19e34:	orrne	r4, r4, #2
   19e38:	b	19b8c <lchmod@@Base+0x345c>
   19e3c:	ldr	r2, [sp, #8]
   19e40:	ldr	r1, [sp, #12]
   19e44:	mov	r9, #0
   19e48:	b	19e20 <lchmod@@Base+0x36f0>
   19e4c:	ldrd	r2, [sp, #8]
   19e50:	ldr	r1, [pc, #512]	; 1a058 <lchmod@@Base+0x3928>
   19e54:	mvn	r0, #0
   19e58:	cmp	r3, r1
   19e5c:	cmpeq	r2, r0
   19e60:	bhi	1a028 <lchmod@@Base+0x38f8>
   19e64:	lsl	r1, r3, #9
   19e68:	orr	r1, r1, r2, lsr #23
   19e6c:	lsl	r2, r2, #9
   19e70:	str	r1, [sp, #12]
   19e74:	str	r2, [sp, #8]
   19e78:	mov	r9, #0
   19e7c:	b	19e20 <lchmod@@Base+0x36f0>
   19e80:	mov	fp, #7
   19e84:	mov	r9, #0
   19e88:	add	r8, sp, #8
   19e8c:	mov	r1, sl
   19e90:	mov	r0, r8
   19e94:	bl	19a2c <lchmod@@Base+0x32fc>
   19e98:	subs	fp, fp, #1
   19e9c:	orr	r9, r9, r0
   19ea0:	bne	19e8c <lchmod@@Base+0x375c>
   19ea4:	ldr	r8, [r5]
   19ea8:	ldr	r2, [sp, #8]
   19eac:	ldr	r1, [sp, #12]
   19eb0:	b	19e20 <lchmod@@Base+0x36f0>
   19eb4:	mov	fp, #8
   19eb8:	mov	r9, #0
   19ebc:	add	r8, sp, fp
   19ec0:	mov	r1, sl
   19ec4:	mov	r0, r8
   19ec8:	bl	19a2c <lchmod@@Base+0x32fc>
   19ecc:	subs	fp, fp, #1
   19ed0:	orr	r9, r9, r0
   19ed4:	bne	19ec0 <lchmod@@Base+0x3790>
   19ed8:	b	19ea4 <lchmod@@Base+0x3774>
   19edc:	mov	r1, sl
   19ee0:	add	r0, sp, #8
   19ee4:	bl	19a2c <lchmod@@Base+0x32fc>
   19ee8:	ldr	r8, [r5]
   19eec:	ldr	r2, [sp, #8]
   19ef0:	ldr	r1, [sp, #12]
   19ef4:	mov	r9, r0
   19ef8:	b	19e20 <lchmod@@Base+0x36f0>
   19efc:	mov	fp, #3
   19f00:	mov	r9, #0
   19f04:	add	r8, sp, #8
   19f08:	mov	r1, sl
   19f0c:	mov	r0, r8
   19f10:	bl	19a2c <lchmod@@Base+0x32fc>
   19f14:	subs	fp, fp, #1
   19f18:	orr	r9, r9, r0
   19f1c:	bne	19f08 <lchmod@@Base+0x37d8>
   19f20:	b	19ea4 <lchmod@@Base+0x3774>
   19f24:	mov	fp, #6
   19f28:	mov	r9, #0
   19f2c:	add	r8, sp, #8
   19f30:	mov	r1, sl
   19f34:	mov	r0, r8
   19f38:	bl	19a2c <lchmod@@Base+0x32fc>
   19f3c:	subs	fp, fp, #1
   19f40:	orr	r9, r9, r0
   19f44:	bne	19f30 <lchmod@@Base+0x3800>
   19f48:	b	19ea4 <lchmod@@Base+0x3774>
   19f4c:	ldrd	r0, [sp, #8]
   19f50:	ldr	r3, [pc, #260]	; 1a05c <lchmod@@Base+0x392c>
   19f54:	mvn	r2, #0
   19f58:	cmp	r1, r3
   19f5c:	cmpeq	r0, r2
   19f60:	bhi	1a028 <lchmod@@Base+0x38f8>
   19f64:	lsl	r1, r1, #10
   19f68:	orr	r1, r1, r0, lsr #22
   19f6c:	lsl	r2, r0, #10
   19f70:	str	r1, [sp, #12]
   19f74:	str	r2, [sp, #8]
   19f78:	mov	r9, #0
   19f7c:	b	19e20 <lchmod@@Base+0x36f0>
   19f80:	mov	fp, #5
   19f84:	mov	r9, #0
   19f88:	add	r8, sp, #8
   19f8c:	mov	r1, sl
   19f90:	mov	r0, r8
   19f94:	bl	19a2c <lchmod@@Base+0x32fc>
   19f98:	subs	fp, fp, #1
   19f9c:	orr	r9, r9, r0
   19fa0:	bne	19f8c <lchmod@@Base+0x385c>
   19fa4:	b	19ea4 <lchmod@@Base+0x3774>
   19fa8:	mov	r1, sl
   19fac:	add	r0, sp, #8
   19fb0:	bl	19a2c <lchmod@@Base+0x32fc>
   19fb4:	mov	r1, sl
   19fb8:	mov	r9, r0
   19fbc:	add	r0, sp, #8
   19fc0:	bl	19a2c <lchmod@@Base+0x32fc>
   19fc4:	ldr	r8, [r5]
   19fc8:	ldr	r2, [sp, #8]
   19fcc:	ldr	r1, [sp, #12]
   19fd0:	orr	r9, r9, r0
   19fd4:	b	19e20 <lchmod@@Base+0x36f0>
   19fd8:	mov	fp, #4
   19fdc:	mov	r9, #0
   19fe0:	add	r8, sp, #8
   19fe4:	mov	r1, sl
   19fe8:	mov	r0, r8
   19fec:	bl	19a2c <lchmod@@Base+0x32fc>
   19ff0:	subs	fp, fp, #1
   19ff4:	orr	r9, r9, r0
   19ff8:	bne	19fe4 <lchmod@@Base+0x38b4>
   19ffc:	b	19ea4 <lchmod@@Base+0x3774>
   1a000:	ldrd	r2, [sp, #8]
   1a004:	orr	r4, r4, #2
   1a008:	strd	r2, [r6]
   1a00c:	b	19b30 <lchmod@@Base+0x3400>
   1a010:	ldrb	r7, [r8, #2]
   1a014:	mov	sl, #1024	; 0x400
   1a018:	cmp	r7, #66	; 0x42
   1a01c:	movne	r7, #1
   1a020:	moveq	r7, #3
   1a024:	b	19cd4 <lchmod@@Base+0x35a4>
   1a028:	mvn	r1, #0
   1a02c:	mvn	r0, #0
   1a030:	mvn	r2, #0
   1a034:	strd	r0, [sp, #8]
   1a038:	mov	r9, #1
   1a03c:	mov	r1, r2
   1a040:	b	19e20 <lchmod@@Base+0x36f0>
   1a044:	ldr	r3, [pc, #20]	; 1a060 <lchmod@@Base+0x3930>
   1a048:	mov	r2, #85	; 0x55
   1a04c:	ldr	r1, [pc, #16]	; 1a064 <lchmod@@Base+0x3934>
   1a050:	ldr	r0, [pc, #16]	; 1a068 <lchmod@@Base+0x3938>
   1a054:	bl	118cc <__assert_fail@plt>
   1a058:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1a05c:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1a060:	andeq	fp, r1, r0, lsr #27
   1a064:	andeq	fp, r1, ip, lsr #27
   1a068:			; <UNDEFINED> instruction: 0x0001bdbc
   1a06c:	cmp	r1, #0
   1a070:	cmpne	r0, #0
   1a074:	moveq	r1, #1
   1a078:	moveq	r0, r1
   1a07c:	umull	r2, r3, r0, r1
   1a080:	adds	r3, r3, #0
   1a084:	movne	r3, #1
   1a088:	cmp	r2, #0
   1a08c:	blt	1a09c <lchmod@@Base+0x396c>
   1a090:	cmp	r3, #0
   1a094:	bne	1a09c <lchmod@@Base+0x396c>
   1a098:	b	114a0 <calloc@plt>
   1a09c:	push	{r4, lr}
   1a0a0:	bl	1171c <__errno_location@plt>
   1a0a4:	mov	r3, #12
   1a0a8:	str	r3, [r0]
   1a0ac:	mov	r0, #0
   1a0b0:	pop	{r4, pc}
   1a0b4:	cmp	r0, #0
   1a0b8:	moveq	r0, #1
   1a0bc:	cmp	r0, #0
   1a0c0:	blt	1a0c8 <lchmod@@Base+0x3998>
   1a0c4:	b	1165c <malloc@plt>
   1a0c8:	push	{r4, lr}
   1a0cc:	bl	1171c <__errno_location@plt>
   1a0d0:	mov	r3, #12
   1a0d4:	str	r3, [r0]
   1a0d8:	mov	r0, #0
   1a0dc:	pop	{r4, pc}
   1a0e0:	cmp	r0, #0
   1a0e4:	beq	1a108 <lchmod@@Base+0x39d8>
   1a0e8:	cmp	r1, #0
   1a0ec:	push	{lr}		; (str lr, [sp, #-4]!)
   1a0f0:	sub	sp, sp, #12
   1a0f4:	beq	1a110 <lchmod@@Base+0x39e0>
   1a0f8:	blt	1a128 <lchmod@@Base+0x39f8>
   1a0fc:	add	sp, sp, #12
   1a100:	pop	{lr}		; (ldr lr, [sp], #4)
   1a104:	b	11590 <realloc@plt>
   1a108:	mov	r0, r1
   1a10c:	b	1a0b4 <lchmod@@Base+0x3984>
   1a110:	str	r1, [sp, #4]
   1a114:	bl	1349c <__assert_fail@plt+0x1bd0>
   1a118:	ldr	r3, [sp, #4]
   1a11c:	mov	r0, r3
   1a120:	add	sp, sp, #12
   1a124:	pop	{pc}		; (ldr pc, [sp], #4)
   1a128:	bl	1171c <__errno_location@plt>
   1a12c:	mov	r2, #12
   1a130:	mov	r3, #0
   1a134:	str	r2, [r0]
   1a138:	b	1a11c <lchmod@@Base+0x39ec>
   1a13c:	ldrb	r3, [r0]
   1a140:	cmp	r3, #47	; 0x2f
   1a144:	bne	1a154 <lchmod@@Base+0x3a24>
   1a148:	ldrb	r3, [r0, #1]!
   1a14c:	cmp	r3, #47	; 0x2f
   1a150:	beq	1a148 <lchmod@@Base+0x3a18>
   1a154:	cmp	r3, #0
   1a158:	bxeq	lr
   1a15c:	mov	r2, #0
   1a160:	push	{lr}		; (str lr, [sp, #-4]!)
   1a164:	mov	ip, r2
   1a168:	mov	r1, r0
   1a16c:	mov	lr, #1
   1a170:	cmp	r3, #47	; 0x2f
   1a174:	moveq	r2, lr
   1a178:	beq	1a188 <lchmod@@Base+0x3a58>
   1a17c:	cmp	r2, #0
   1a180:	movne	r0, r1
   1a184:	movne	r2, ip
   1a188:	ldrb	r3, [r1, #1]!
   1a18c:	cmp	r3, #0
   1a190:	bne	1a170 <lchmod@@Base+0x3a40>
   1a194:	pop	{pc}		; (ldr pc, [sp], #4)
   1a198:	push	{r4, lr}
   1a19c:	mov	r4, r0
   1a1a0:	bl	116e0 <strlen@plt>
   1a1a4:	cmp	r0, #1
   1a1a8:	popls	{r4, pc}
   1a1ac:	sub	r3, r0, #1
   1a1b0:	add	r2, r4, r3
   1a1b4:	ldrb	r1, [r4, r3]
   1a1b8:	cmp	r1, #47	; 0x2f
   1a1bc:	popne	{r4, pc}
   1a1c0:	cmp	r3, #1
   1a1c4:	beq	1a1d8 <lchmod@@Base+0x3aa8>
   1a1c8:	ldrb	r1, [r2, #-1]!
   1a1cc:	sub	r0, r3, #1
   1a1d0:	cmp	r1, #47	; 0x2f
   1a1d4:	beq	1a1e0 <lchmod@@Base+0x3ab0>
   1a1d8:	mov	r0, r3
   1a1dc:	pop	{r4, pc}
   1a1e0:	mov	r3, r0
   1a1e4:	b	1a1c0 <lchmod@@Base+0x3a90>
   1a1e8:	push	{r4, r5, r6, lr}
   1a1ec:	mov	r4, r0
   1a1f0:	bl	11620 <__fpending@plt>
   1a1f4:	ldr	r5, [r4]
   1a1f8:	and	r5, r5, #32
   1a1fc:	mov	r6, r0
   1a200:	mov	r0, r4
   1a204:	bl	1a354 <lchmod@@Base+0x3c24>
   1a208:	cmp	r5, #0
   1a20c:	mov	r4, r0
   1a210:	bne	1a230 <lchmod@@Base+0x3b00>
   1a214:	cmp	r0, #0
   1a218:	beq	1a228 <lchmod@@Base+0x3af8>
   1a21c:	cmp	r6, #0
   1a220:	beq	1a24c <lchmod@@Base+0x3b1c>
   1a224:	mvn	r4, #0
   1a228:	mov	r0, r4
   1a22c:	pop	{r4, r5, r6, pc}
   1a230:	cmp	r0, #0
   1a234:	bne	1a224 <lchmod@@Base+0x3af4>
   1a238:	bl	1171c <__errno_location@plt>
   1a23c:	str	r4, [r0]
   1a240:	mvn	r4, #0
   1a244:	mov	r0, r4
   1a248:	pop	{r4, r5, r6, pc}
   1a24c:	bl	1171c <__errno_location@plt>
   1a250:	ldr	r4, [r0]
   1a254:	subs	r4, r4, #9
   1a258:	mvnne	r4, #0
   1a25c:	mov	r0, r4
   1a260:	pop	{r4, r5, r6, pc}
   1a264:	push	{r4, r5}
   1a268:	mov	r4, #0
   1a26c:	mov	r5, #0
   1a270:	ldr	r3, [pc, #12]	; 1a284 <lchmod@@Base+0x3b54>
   1a274:	strd	r4, [r0, #16]
   1a278:	str	r3, [r0, #24]
   1a27c:	pop	{r4, r5}
   1a280:	bx	lr
   1a284:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1a288:	ldr	r3, [pc, #180]	; 1a344 <lchmod@@Base+0x3c14>
   1a28c:	ldr	r2, [r0, #24]
   1a290:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a294:	cmp	r2, r3
   1a298:	bne	1a330 <lchmod@@Base+0x3c00>
   1a29c:	ldrd	r6, [r0, #16]
   1a2a0:	orrs	r3, r6, r7
   1a2a4:	bne	1a2d0 <lchmod@@Base+0x3ba0>
   1a2a8:	mov	r2, #1
   1a2ac:	mov	r3, #0
   1a2b0:	ldrd	r8, [r1, #96]	; 0x60
   1a2b4:	strd	r2, [r0, #16]
   1a2b8:	ldrd	r2, [r1]
   1a2bc:	mov	r1, #0
   1a2c0:	strd	r8, [r0]
   1a2c4:	strd	r2, [r0, #8]
   1a2c8:	mov	r0, r1
   1a2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a2d0:	ldrd	r8, [r1, #96]	; 0x60
   1a2d4:	ldrd	r2, [r0]
   1a2d8:	cmp	r9, r3
   1a2dc:	cmpeq	r8, r2
   1a2e0:	beq	1a318 <lchmod@@Base+0x3be8>
   1a2e4:	adds	r2, r6, #1
   1a2e8:	adc	r3, r7, #0
   1a2ec:	and	r6, r6, r2
   1a2f0:	and	r7, r7, r3
   1a2f4:	orrs	ip, r6, r7
   1a2f8:	strd	r2, [r0, #16]
   1a2fc:	movne	r1, #0
   1a300:	bne	1a2c8 <lchmod@@Base+0x3b98>
   1a304:	orrs	r3, r2, r3
   1a308:	bne	1a2b8 <lchmod@@Base+0x3b88>
   1a30c:	mov	r1, #1
   1a310:	mov	r0, r1
   1a314:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a318:	ldrd	r4, [r1]
   1a31c:	ldrd	r2, [r0, #8]
   1a320:	cmp	r5, r3
   1a324:	cmpeq	r4, r2
   1a328:	bne	1a2e4 <lchmod@@Base+0x3bb4>
   1a32c:	b	1a30c <lchmod@@Base+0x3bdc>
   1a330:	ldr	r3, [pc, #16]	; 1a348 <lchmod@@Base+0x3c18>
   1a334:	mov	r2, #60	; 0x3c
   1a338:	ldr	r1, [pc, #12]	; 1a34c <lchmod@@Base+0x3c1c>
   1a33c:	ldr	r0, [pc, #12]	; 1a350 <lchmod@@Base+0x3c20>
   1a340:	bl	118cc <__assert_fail@plt>
   1a344:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1a348:	andeq	fp, r1, r4, ror #27
   1a34c:	strdeq	fp, [r1], -r0
   1a350:	andeq	fp, r1, r4, lsl #28
   1a354:	push	{r4, r5, lr}
   1a358:	sub	sp, sp, #12
   1a35c:	mov	r4, r0
   1a360:	bl	11758 <fileno@plt>
   1a364:	cmp	r0, #0
   1a368:	mov	r0, r4
   1a36c:	blt	1a3e8 <lchmod@@Base+0x3cb8>
   1a370:	bl	11674 <__freading@plt>
   1a374:	cmp	r0, #0
   1a378:	bne	1a3b4 <lchmod@@Base+0x3c84>
   1a37c:	mov	r0, r4
   1a380:	bl	1a600 <lchmod@@Base+0x3ed0>
   1a384:	cmp	r0, #0
   1a388:	beq	1a3e4 <lchmod@@Base+0x3cb4>
   1a38c:	bl	1171c <__errno_location@plt>
   1a390:	mov	r5, r0
   1a394:	mov	r0, r4
   1a398:	ldr	r4, [r5]
   1a39c:	bl	11770 <fclose@plt>
   1a3a0:	cmp	r4, #0
   1a3a4:	mvnne	r0, #0
   1a3a8:	strne	r4, [r5]
   1a3ac:	add	sp, sp, #12
   1a3b0:	pop	{r4, r5, pc}
   1a3b4:	mov	r0, r4
   1a3b8:	bl	11758 <fileno@plt>
   1a3bc:	mov	r3, #1
   1a3c0:	str	r3, [sp]
   1a3c4:	mov	r2, #0
   1a3c8:	mov	r3, #0
   1a3cc:	bl	115fc <lseek64@plt>
   1a3d0:	mvn	r3, #0
   1a3d4:	mvn	r2, #0
   1a3d8:	cmp	r1, r3
   1a3dc:	cmpeq	r0, r2
   1a3e0:	bne	1a37c <lchmod@@Base+0x3c4c>
   1a3e4:	mov	r0, r4
   1a3e8:	add	sp, sp, #12
   1a3ec:	pop	{r4, r5, lr}
   1a3f0:	b	11770 <fclose@plt>
   1a3f4:	push	{r1, r2, r3}
   1a3f8:	push	{r4, r5, r6, r7, lr}
   1a3fc:	sub	sp, sp, #8
   1a400:	add	r3, sp, #32
   1a404:	ldr	r1, [sp, #28]
   1a408:	str	r3, [sp, #4]
   1a40c:	cmp	r1, #0
   1a410:	beq	1a4a8 <lchmod@@Base+0x3d78>
   1a414:	ldr	r2, [pc, #412]	; 1a5b8 <lchmod@@Base+0x3e88>
   1a418:	mov	r5, r0
   1a41c:	cmp	r1, r2
   1a420:	bne	1a46c <lchmod@@Base+0x3d3c>
   1a424:	ldr	r6, [pc, #400]	; 1a5bc <lchmod@@Base+0x3e8c>
   1a428:	ldr	r7, [r3]
   1a42c:	add	r2, sp, #36	; 0x24
   1a430:	ldr	r3, [r6]
   1a434:	str	r2, [sp, #4]
   1a438:	cmp	r3, #0
   1a43c:	mov	r2, r7
   1a440:	blt	1a56c <lchmod@@Base+0x3e3c>
   1a444:	bl	11788 <fcntl64@plt>
   1a448:	subs	r4, r0, #0
   1a44c:	blt	1a4f0 <lchmod@@Base+0x3dc0>
   1a450:	mov	r3, #1
   1a454:	str	r3, [r6]
   1a458:	mov	r0, r4
   1a45c:	add	sp, sp, #8
   1a460:	pop	{r4, r5, r6, r7, lr}
   1a464:	add	sp, sp, #12
   1a468:	bx	lr
   1a46c:	cmp	r1, #11
   1a470:	beq	1a498 <lchmod@@Base+0x3d68>
   1a474:	bgt	1a4b8 <lchmod@@Base+0x3d88>
   1a478:	cmp	r1, #3
   1a47c:	beq	1a498 <lchmod@@Base+0x3d68>
   1a480:	ble	1a5ac <lchmod@@Base+0x3e7c>
   1a484:	cmp	r1, #8
   1a488:	beq	1a4d8 <lchmod@@Base+0x3da8>
   1a48c:	ble	1a4d8 <lchmod@@Base+0x3da8>
   1a490:	cmp	r1, #9
   1a494:	bne	1a4d8 <lchmod@@Base+0x3da8>
   1a498:	mov	r0, r5
   1a49c:	bl	11788 <fcntl64@plt>
   1a4a0:	mov	r4, r0
   1a4a4:	b	1a458 <lchmod@@Base+0x3d28>
   1a4a8:	ldr	r2, [sp, #32]
   1a4ac:	bl	11788 <fcntl64@plt>
   1a4b0:	mov	r4, r0
   1a4b4:	b	1a458 <lchmod@@Base+0x3d28>
   1a4b8:	ldr	r3, [pc, #256]	; 1a5c0 <lchmod@@Base+0x3e90>
   1a4bc:	cmp	r1, r3
   1a4c0:	bgt	1a58c <lchmod@@Base+0x3e5c>
   1a4c4:	cmp	r1, r2
   1a4c8:	bge	1a4d8 <lchmod@@Base+0x3da8>
   1a4cc:	sub	r3, r3, #6
   1a4d0:	cmp	r1, r3
   1a4d4:	beq	1a498 <lchmod@@Base+0x3d68>
   1a4d8:	ldr	r3, [sp, #4]
   1a4dc:	mov	r0, r5
   1a4e0:	ldr	r2, [r3]
   1a4e4:	bl	11788 <fcntl64@plt>
   1a4e8:	mov	r4, r0
   1a4ec:	b	1a458 <lchmod@@Base+0x3d28>
   1a4f0:	bl	1171c <__errno_location@plt>
   1a4f4:	ldr	r3, [r0]
   1a4f8:	cmp	r3, #22
   1a4fc:	bne	1a450 <lchmod@@Base+0x3d20>
   1a500:	mov	r2, r7
   1a504:	mov	r0, r5
   1a508:	mov	r1, #0
   1a50c:	bl	11788 <fcntl64@plt>
   1a510:	subs	r4, r0, #0
   1a514:	blt	1a458 <lchmod@@Base+0x3d28>
   1a518:	mvn	r3, #0
   1a51c:	str	r3, [r6]
   1a520:	mov	r1, #1
   1a524:	mov	r0, r4
   1a528:	bl	11788 <fcntl64@plt>
   1a52c:	subs	r2, r0, #0
   1a530:	blt	1a54c <lchmod@@Base+0x3e1c>
   1a534:	orr	r2, r2, #1
   1a538:	mov	r1, #2
   1a53c:	mov	r0, r4
   1a540:	bl	11788 <fcntl64@plt>
   1a544:	cmn	r0, #1
   1a548:	bne	1a458 <lchmod@@Base+0x3d28>
   1a54c:	bl	1171c <__errno_location@plt>
   1a550:	mov	r5, r0
   1a554:	mov	r0, r4
   1a558:	ldr	r6, [r5]
   1a55c:	mvn	r4, #0
   1a560:	bl	11884 <close@plt>
   1a564:	str	r6, [r5]
   1a568:	b	1a458 <lchmod@@Base+0x3d28>
   1a56c:	mov	r1, #0
   1a570:	bl	11788 <fcntl64@plt>
   1a574:	subs	r4, r0, #0
   1a578:	blt	1a458 <lchmod@@Base+0x3d28>
   1a57c:	ldr	r3, [r6]
   1a580:	cmn	r3, #1
   1a584:	beq	1a520 <lchmod@@Base+0x3df0>
   1a588:	b	1a458 <lchmod@@Base+0x3d28>
   1a58c:	ldr	r3, [pc, #48]	; 1a5c4 <lchmod@@Base+0x3e94>
   1a590:	cmp	r1, r3
   1a594:	beq	1a4d8 <lchmod@@Base+0x3da8>
   1a598:	blt	1a498 <lchmod@@Base+0x3d68>
   1a59c:	add	r3, r3, #1
   1a5a0:	cmp	r1, r3
   1a5a4:	bne	1a4d8 <lchmod@@Base+0x3da8>
   1a5a8:	b	1a498 <lchmod@@Base+0x3d68>
   1a5ac:	cmp	r1, #1
   1a5b0:	bne	1a4d8 <lchmod@@Base+0x3da8>
   1a5b4:	b	1a498 <lchmod@@Base+0x3d68>
   1a5b8:	andeq	r0, r0, r6, lsl #8
   1a5bc:	andeq	ip, r2, ip, lsr #6
   1a5c0:	andeq	r0, r0, r7, lsl #8
   1a5c4:	andeq	r0, r0, r9, lsl #8
   1a5c8:	push	{r1, r2, r3}
   1a5cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a5d0:	sub	sp, sp, #8
   1a5d4:	ldr	r1, [sp, #12]
   1a5d8:	ands	r2, r1, #64	; 0x40
   1a5dc:	addne	r3, sp, #16
   1a5e0:	ldrne	r2, [sp, #16]
   1a5e4:	strne	r3, [sp, #4]
   1a5e8:	bl	11644 <open64@plt>
   1a5ec:	bl	18ec8 <lchmod@@Base+0x2798>
   1a5f0:	add	sp, sp, #8
   1a5f4:	pop	{lr}		; (ldr lr, [sp], #4)
   1a5f8:	add	sp, sp, #12
   1a5fc:	bx	lr
   1a600:	push	{r4, lr}
   1a604:	subs	r4, r0, #0
   1a608:	sub	sp, sp, #8
   1a60c:	beq	1a628 <lchmod@@Base+0x3ef8>
   1a610:	bl	11674 <__freading@plt>
   1a614:	cmp	r0, #0
   1a618:	beq	1a628 <lchmod@@Base+0x3ef8>
   1a61c:	ldr	r3, [r4]
   1a620:	tst	r3, #256	; 0x100
   1a624:	bne	1a638 <lchmod@@Base+0x3f08>
   1a628:	mov	r0, r4
   1a62c:	add	sp, sp, #8
   1a630:	pop	{r4, lr}
   1a634:	b	114e8 <fflush@plt>
   1a638:	mov	r3, #1
   1a63c:	str	r3, [sp]
   1a640:	mov	r2, #0
   1a644:	mov	r3, #0
   1a648:	mov	r0, r4
   1a64c:	bl	1a660 <lchmod@@Base+0x3f30>
   1a650:	mov	r0, r4
   1a654:	add	sp, sp, #8
   1a658:	pop	{r4, lr}
   1a65c:	b	114e8 <fflush@plt>
   1a660:	push	{r4, r5, r6, r7, r8, lr}
   1a664:	sub	sp, sp, #8
   1a668:	ldmib	r0, {ip, lr}
   1a66c:	mov	r4, r0
   1a670:	ldr	r5, [sp, #32]
   1a674:	cmp	lr, ip
   1a678:	beq	1a690 <lchmod@@Base+0x3f60>
   1a67c:	str	r5, [sp, #32]
   1a680:	mov	r0, r4
   1a684:	add	sp, sp, #8
   1a688:	pop	{r4, r5, r6, r7, r8, lr}
   1a68c:	b	1177c <fseeko64@plt>
   1a690:	ldr	lr, [r0, #20]
   1a694:	ldr	ip, [r0, #16]
   1a698:	cmp	lr, ip
   1a69c:	bne	1a67c <lchmod@@Base+0x3f4c>
   1a6a0:	ldr	r8, [r0, #36]	; 0x24
   1a6a4:	cmp	r8, #0
   1a6a8:	bne	1a67c <lchmod@@Base+0x3f4c>
   1a6ac:	mov	r6, r2
   1a6b0:	mov	r7, r3
   1a6b4:	bl	11758 <fileno@plt>
   1a6b8:	mov	r2, r6
   1a6bc:	mov	r3, r7
   1a6c0:	str	r5, [sp]
   1a6c4:	bl	115fc <lseek64@plt>
   1a6c8:	mvn	r3, #0
   1a6cc:	mvn	r2, #0
   1a6d0:	cmp	r1, r3
   1a6d4:	cmpeq	r0, r2
   1a6d8:	beq	1a6f8 <lchmod@@Base+0x3fc8>
   1a6dc:	ldr	r3, [r4]
   1a6e0:	strd	r0, [r4, #80]	; 0x50
   1a6e4:	mov	r0, r8
   1a6e8:	bic	r3, r3, #16
   1a6ec:	str	r3, [r4]
   1a6f0:	add	sp, sp, #8
   1a6f4:	pop	{r4, r5, r6, r7, r8, pc}
   1a6f8:	mvn	r0, #0
   1a6fc:	b	1a6f0 <lchmod@@Base+0x3fc0>
   1a700:	ldrb	r3, [r0]
   1a704:	cmp	r3, #0
   1a708:	beq	1a734 <lchmod@@Base+0x4004>
   1a70c:	mov	r2, r0
   1a710:	mov	r0, #0
   1a714:	push	{r4, lr}
   1a718:	add	r0, r3, r0, ror #23
   1a71c:	ldrb	r3, [r2, #1]!
   1a720:	cmp	r3, #0
   1a724:	bne	1a718 <lchmod@@Base+0x3fe8>
   1a728:	bl	1aafc <lchmod@@Base+0x43cc>
   1a72c:	mov	r0, r1
   1a730:	pop	{r4, pc}
   1a734:	mov	r0, r3
   1a738:	bx	lr
   1a73c:	push	{r4, lr}
   1a740:	mov	r0, #14
   1a744:	bl	117b8 <nl_langinfo@plt>
   1a748:	cmp	r0, #0
   1a74c:	beq	1a764 <lchmod@@Base+0x4034>
   1a750:	ldrb	r2, [r0]
   1a754:	ldr	r3, [pc, #16]	; 1a76c <lchmod@@Base+0x403c>
   1a758:	cmp	r2, #0
   1a75c:	moveq	r0, r3
   1a760:	pop	{r4, pc}
   1a764:	ldr	r0, [pc]	; 1a76c <lchmod@@Base+0x403c>
   1a768:	pop	{r4, pc}
   1a76c:	andeq	fp, r1, ip, lsl lr
   1a770:	push	{r4, r5, r6, r7, lr}
   1a774:	subs	r6, r0, #0
   1a778:	sub	sp, sp, #12
   1a77c:	addeq	r6, sp, #4
   1a780:	mov	r0, r6
   1a784:	mov	r5, r2
   1a788:	mov	r7, r1
   1a78c:	bl	1162c <mbrtowc@plt>
   1a790:	cmp	r5, #0
   1a794:	cmnne	r0, #3
   1a798:	mov	r4, r0
   1a79c:	bls	1a7b8 <lchmod@@Base+0x4088>
   1a7a0:	mov	r0, #0
   1a7a4:	bl	1a81c <lchmod@@Base+0x40ec>
   1a7a8:	cmp	r0, #0
   1a7ac:	moveq	r4, #1
   1a7b0:	ldrbeq	r3, [r7]
   1a7b4:	streq	r3, [r6]
   1a7b8:	mov	r0, r4
   1a7bc:	add	sp, sp, #12
   1a7c0:	pop	{r4, r5, r6, r7, pc}
   1a7c4:	push	{r4, r5, r6, lr}
   1a7c8:	subs	r4, r2, #0
   1a7cc:	mov	r6, r0
   1a7d0:	mov	r5, r1
   1a7d4:	beq	1a800 <lchmod@@Base+0x40d0>
   1a7d8:	mov	r1, r4
   1a7dc:	mvn	r0, #0
   1a7e0:	bl	1a910 <lchmod@@Base+0x41e0>
   1a7e4:	cmp	r0, r5
   1a7e8:	bcs	1a800 <lchmod@@Base+0x40d0>
   1a7ec:	bl	1171c <__errno_location@plt>
   1a7f0:	mov	r3, #12
   1a7f4:	str	r3, [r0]
   1a7f8:	mov	r0, #0
   1a7fc:	pop	{r4, r5, r6, pc}
   1a800:	mul	r1, r5, r4
   1a804:	mov	r0, r6
   1a808:	pop	{r4, r5, r6, lr}
   1a80c:	b	1a0e0 <lchmod@@Base+0x39b0>
   1a810:	mov	r2, #3
   1a814:	mov	r1, #0
   1a818:	b	1a3f4 <lchmod@@Base+0x3cc4>
   1a81c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a820:	sub	sp, sp, #268	; 0x10c
   1a824:	add	r1, sp, #4
   1a828:	ldr	r2, [pc, #60]	; 1a86c <lchmod@@Base+0x413c>
   1a82c:	bl	1a878 <lchmod@@Base+0x4148>
   1a830:	cmp	r0, #0
   1a834:	movne	r0, #0
   1a838:	bne	1a864 <lchmod@@Base+0x4134>
   1a83c:	ldr	r1, [pc, #44]	; 1a870 <lchmod@@Base+0x4140>
   1a840:	add	r0, sp, #4
   1a844:	bl	114d0 <strcmp@plt>
   1a848:	cmp	r0, #0
   1a84c:	beq	1a864 <lchmod@@Base+0x4134>
   1a850:	add	r0, sp, #4
   1a854:	ldr	r1, [pc, #24]	; 1a874 <lchmod@@Base+0x4144>
   1a858:	bl	114d0 <strcmp@plt>
   1a85c:	adds	r0, r0, #0
   1a860:	movne	r0, #1
   1a864:	add	sp, sp, #268	; 0x10c
   1a868:	pop	{pc}		; (ldr pc, [sp], #4)
   1a86c:	andeq	r0, r0, r1, lsl #2
   1a870:	andeq	fp, r1, r4, lsr #28
   1a874:	andeq	fp, r1, r8, lsr #28
   1a878:	push	{r4, r5, r6, lr}
   1a87c:	mov	r5, r1
   1a880:	mov	r1, #0
   1a884:	mov	r4, r2
   1a888:	bl	11794 <setlocale@plt>
   1a88c:	subs	r6, r0, #0
   1a890:	beq	1a8ec <lchmod@@Base+0x41bc>
   1a894:	bl	116e0 <strlen@plt>
   1a898:	cmp	r4, r0
   1a89c:	bhi	1a8d4 <lchmod@@Base+0x41a4>
   1a8a0:	cmp	r4, #0
   1a8a4:	bne	1a8b0 <lchmod@@Base+0x4180>
   1a8a8:	mov	r0, #34	; 0x22
   1a8ac:	pop	{r4, r5, r6, pc}
   1a8b0:	sub	r4, r4, #1
   1a8b4:	mov	r1, r6
   1a8b8:	mov	r2, r4
   1a8bc:	mov	r0, r5
   1a8c0:	bl	11530 <memcpy@plt>
   1a8c4:	mov	r3, #0
   1a8c8:	strb	r3, [r5, r4]
   1a8cc:	mov	r0, #34	; 0x22
   1a8d0:	pop	{r4, r5, r6, pc}
   1a8d4:	add	r2, r0, #1
   1a8d8:	mov	r1, r6
   1a8dc:	mov	r0, r5
   1a8e0:	bl	11530 <memcpy@plt>
   1a8e4:	mov	r0, #0
   1a8e8:	pop	{r4, r5, r6, pc}
   1a8ec:	cmp	r4, #0
   1a8f0:	beq	1a900 <lchmod@@Base+0x41d0>
   1a8f4:	strb	r6, [r5]
   1a8f8:	mov	r0, #22
   1a8fc:	pop	{r4, r5, r6, pc}
   1a900:	mov	r0, #22
   1a904:	pop	{r4, r5, r6, pc}
   1a908:	mov	r1, #0
   1a90c:	b	11794 <setlocale@plt>
   1a910:	subs	r2, r1, #1
   1a914:	bxeq	lr
   1a918:	bcc	1aaf0 <lchmod@@Base+0x43c0>
   1a91c:	cmp	r0, r1
   1a920:	bls	1aad4 <lchmod@@Base+0x43a4>
   1a924:	tst	r1, r2
   1a928:	beq	1aae0 <lchmod@@Base+0x43b0>
   1a92c:	clz	r3, r0
   1a930:	clz	r2, r1
   1a934:	sub	r3, r2, r3
   1a938:	rsbs	r3, r3, #31
   1a93c:	addne	r3, r3, r3, lsl #1
   1a940:	mov	r2, #0
   1a944:	addne	pc, pc, r3, lsl #2
   1a948:	nop			; (mov r0, r0)
   1a94c:	cmp	r0, r1, lsl #31
   1a950:	adc	r2, r2, r2
   1a954:	subcs	r0, r0, r1, lsl #31
   1a958:	cmp	r0, r1, lsl #30
   1a95c:	adc	r2, r2, r2
   1a960:	subcs	r0, r0, r1, lsl #30
   1a964:	cmp	r0, r1, lsl #29
   1a968:	adc	r2, r2, r2
   1a96c:	subcs	r0, r0, r1, lsl #29
   1a970:	cmp	r0, r1, lsl #28
   1a974:	adc	r2, r2, r2
   1a978:	subcs	r0, r0, r1, lsl #28
   1a97c:	cmp	r0, r1, lsl #27
   1a980:	adc	r2, r2, r2
   1a984:	subcs	r0, r0, r1, lsl #27
   1a988:	cmp	r0, r1, lsl #26
   1a98c:	adc	r2, r2, r2
   1a990:	subcs	r0, r0, r1, lsl #26
   1a994:	cmp	r0, r1, lsl #25
   1a998:	adc	r2, r2, r2
   1a99c:	subcs	r0, r0, r1, lsl #25
   1a9a0:	cmp	r0, r1, lsl #24
   1a9a4:	adc	r2, r2, r2
   1a9a8:	subcs	r0, r0, r1, lsl #24
   1a9ac:	cmp	r0, r1, lsl #23
   1a9b0:	adc	r2, r2, r2
   1a9b4:	subcs	r0, r0, r1, lsl #23
   1a9b8:	cmp	r0, r1, lsl #22
   1a9bc:	adc	r2, r2, r2
   1a9c0:	subcs	r0, r0, r1, lsl #22
   1a9c4:	cmp	r0, r1, lsl #21
   1a9c8:	adc	r2, r2, r2
   1a9cc:	subcs	r0, r0, r1, lsl #21
   1a9d0:	cmp	r0, r1, lsl #20
   1a9d4:	adc	r2, r2, r2
   1a9d8:	subcs	r0, r0, r1, lsl #20
   1a9dc:	cmp	r0, r1, lsl #19
   1a9e0:	adc	r2, r2, r2
   1a9e4:	subcs	r0, r0, r1, lsl #19
   1a9e8:	cmp	r0, r1, lsl #18
   1a9ec:	adc	r2, r2, r2
   1a9f0:	subcs	r0, r0, r1, lsl #18
   1a9f4:	cmp	r0, r1, lsl #17
   1a9f8:	adc	r2, r2, r2
   1a9fc:	subcs	r0, r0, r1, lsl #17
   1aa00:	cmp	r0, r1, lsl #16
   1aa04:	adc	r2, r2, r2
   1aa08:	subcs	r0, r0, r1, lsl #16
   1aa0c:	cmp	r0, r1, lsl #15
   1aa10:	adc	r2, r2, r2
   1aa14:	subcs	r0, r0, r1, lsl #15
   1aa18:	cmp	r0, r1, lsl #14
   1aa1c:	adc	r2, r2, r2
   1aa20:	subcs	r0, r0, r1, lsl #14
   1aa24:	cmp	r0, r1, lsl #13
   1aa28:	adc	r2, r2, r2
   1aa2c:	subcs	r0, r0, r1, lsl #13
   1aa30:	cmp	r0, r1, lsl #12
   1aa34:	adc	r2, r2, r2
   1aa38:	subcs	r0, r0, r1, lsl #12
   1aa3c:	cmp	r0, r1, lsl #11
   1aa40:	adc	r2, r2, r2
   1aa44:	subcs	r0, r0, r1, lsl #11
   1aa48:	cmp	r0, r1, lsl #10
   1aa4c:	adc	r2, r2, r2
   1aa50:	subcs	r0, r0, r1, lsl #10
   1aa54:	cmp	r0, r1, lsl #9
   1aa58:	adc	r2, r2, r2
   1aa5c:	subcs	r0, r0, r1, lsl #9
   1aa60:	cmp	r0, r1, lsl #8
   1aa64:	adc	r2, r2, r2
   1aa68:	subcs	r0, r0, r1, lsl #8
   1aa6c:	cmp	r0, r1, lsl #7
   1aa70:	adc	r2, r2, r2
   1aa74:	subcs	r0, r0, r1, lsl #7
   1aa78:	cmp	r0, r1, lsl #6
   1aa7c:	adc	r2, r2, r2
   1aa80:	subcs	r0, r0, r1, lsl #6
   1aa84:	cmp	r0, r1, lsl #5
   1aa88:	adc	r2, r2, r2
   1aa8c:	subcs	r0, r0, r1, lsl #5
   1aa90:	cmp	r0, r1, lsl #4
   1aa94:	adc	r2, r2, r2
   1aa98:	subcs	r0, r0, r1, lsl #4
   1aa9c:	cmp	r0, r1, lsl #3
   1aaa0:	adc	r2, r2, r2
   1aaa4:	subcs	r0, r0, r1, lsl #3
   1aaa8:	cmp	r0, r1, lsl #2
   1aaac:	adc	r2, r2, r2
   1aab0:	subcs	r0, r0, r1, lsl #2
   1aab4:	cmp	r0, r1, lsl #1
   1aab8:	adc	r2, r2, r2
   1aabc:	subcs	r0, r0, r1, lsl #1
   1aac0:	cmp	r0, r1
   1aac4:	adc	r2, r2, r2
   1aac8:	subcs	r0, r0, r1
   1aacc:	mov	r0, r2
   1aad0:	bx	lr
   1aad4:	moveq	r0, #1
   1aad8:	movne	r0, #0
   1aadc:	bx	lr
   1aae0:	clz	r2, r1
   1aae4:	rsb	r2, r2, #31
   1aae8:	lsr	r0, r0, r2
   1aaec:	bx	lr
   1aaf0:	cmp	r0, #0
   1aaf4:	mvnne	r0, #0
   1aaf8:	b	1ad98 <lchmod@@Base+0x4668>
   1aafc:	cmp	r1, #0
   1ab00:	beq	1aaf0 <lchmod@@Base+0x43c0>
   1ab04:	push	{r0, r1, lr}
   1ab08:	bl	1a910 <lchmod@@Base+0x41e0>
   1ab0c:	pop	{r1, r2, lr}
   1ab10:	mul	r3, r2, r0
   1ab14:	sub	r1, r1, r3
   1ab18:	bx	lr
   1ab1c:	cmp	r1, #0
   1ab20:	beq	1ad2c <lchmod@@Base+0x45fc>
   1ab24:	eor	ip, r0, r1
   1ab28:	rsbmi	r1, r1, #0
   1ab2c:	subs	r2, r1, #1
   1ab30:	beq	1acf8 <lchmod@@Base+0x45c8>
   1ab34:	movs	r3, r0
   1ab38:	rsbmi	r3, r0, #0
   1ab3c:	cmp	r3, r1
   1ab40:	bls	1ad04 <lchmod@@Base+0x45d4>
   1ab44:	tst	r1, r2
   1ab48:	beq	1ad14 <lchmod@@Base+0x45e4>
   1ab4c:	clz	r2, r3
   1ab50:	clz	r0, r1
   1ab54:	sub	r2, r0, r2
   1ab58:	rsbs	r2, r2, #31
   1ab5c:	addne	r2, r2, r2, lsl #1
   1ab60:	mov	r0, #0
   1ab64:	addne	pc, pc, r2, lsl #2
   1ab68:	nop			; (mov r0, r0)
   1ab6c:	cmp	r3, r1, lsl #31
   1ab70:	adc	r0, r0, r0
   1ab74:	subcs	r3, r3, r1, lsl #31
   1ab78:	cmp	r3, r1, lsl #30
   1ab7c:	adc	r0, r0, r0
   1ab80:	subcs	r3, r3, r1, lsl #30
   1ab84:	cmp	r3, r1, lsl #29
   1ab88:	adc	r0, r0, r0
   1ab8c:	subcs	r3, r3, r1, lsl #29
   1ab90:	cmp	r3, r1, lsl #28
   1ab94:	adc	r0, r0, r0
   1ab98:	subcs	r3, r3, r1, lsl #28
   1ab9c:	cmp	r3, r1, lsl #27
   1aba0:	adc	r0, r0, r0
   1aba4:	subcs	r3, r3, r1, lsl #27
   1aba8:	cmp	r3, r1, lsl #26
   1abac:	adc	r0, r0, r0
   1abb0:	subcs	r3, r3, r1, lsl #26
   1abb4:	cmp	r3, r1, lsl #25
   1abb8:	adc	r0, r0, r0
   1abbc:	subcs	r3, r3, r1, lsl #25
   1abc0:	cmp	r3, r1, lsl #24
   1abc4:	adc	r0, r0, r0
   1abc8:	subcs	r3, r3, r1, lsl #24
   1abcc:	cmp	r3, r1, lsl #23
   1abd0:	adc	r0, r0, r0
   1abd4:	subcs	r3, r3, r1, lsl #23
   1abd8:	cmp	r3, r1, lsl #22
   1abdc:	adc	r0, r0, r0
   1abe0:	subcs	r3, r3, r1, lsl #22
   1abe4:	cmp	r3, r1, lsl #21
   1abe8:	adc	r0, r0, r0
   1abec:	subcs	r3, r3, r1, lsl #21
   1abf0:	cmp	r3, r1, lsl #20
   1abf4:	adc	r0, r0, r0
   1abf8:	subcs	r3, r3, r1, lsl #20
   1abfc:	cmp	r3, r1, lsl #19
   1ac00:	adc	r0, r0, r0
   1ac04:	subcs	r3, r3, r1, lsl #19
   1ac08:	cmp	r3, r1, lsl #18
   1ac0c:	adc	r0, r0, r0
   1ac10:	subcs	r3, r3, r1, lsl #18
   1ac14:	cmp	r3, r1, lsl #17
   1ac18:	adc	r0, r0, r0
   1ac1c:	subcs	r3, r3, r1, lsl #17
   1ac20:	cmp	r3, r1, lsl #16
   1ac24:	adc	r0, r0, r0
   1ac28:	subcs	r3, r3, r1, lsl #16
   1ac2c:	cmp	r3, r1, lsl #15
   1ac30:	adc	r0, r0, r0
   1ac34:	subcs	r3, r3, r1, lsl #15
   1ac38:	cmp	r3, r1, lsl #14
   1ac3c:	adc	r0, r0, r0
   1ac40:	subcs	r3, r3, r1, lsl #14
   1ac44:	cmp	r3, r1, lsl #13
   1ac48:	adc	r0, r0, r0
   1ac4c:	subcs	r3, r3, r1, lsl #13
   1ac50:	cmp	r3, r1, lsl #12
   1ac54:	adc	r0, r0, r0
   1ac58:	subcs	r3, r3, r1, lsl #12
   1ac5c:	cmp	r3, r1, lsl #11
   1ac60:	adc	r0, r0, r0
   1ac64:	subcs	r3, r3, r1, lsl #11
   1ac68:	cmp	r3, r1, lsl #10
   1ac6c:	adc	r0, r0, r0
   1ac70:	subcs	r3, r3, r1, lsl #10
   1ac74:	cmp	r3, r1, lsl #9
   1ac78:	adc	r0, r0, r0
   1ac7c:	subcs	r3, r3, r1, lsl #9
   1ac80:	cmp	r3, r1, lsl #8
   1ac84:	adc	r0, r0, r0
   1ac88:	subcs	r3, r3, r1, lsl #8
   1ac8c:	cmp	r3, r1, lsl #7
   1ac90:	adc	r0, r0, r0
   1ac94:	subcs	r3, r3, r1, lsl #7
   1ac98:	cmp	r3, r1, lsl #6
   1ac9c:	adc	r0, r0, r0
   1aca0:	subcs	r3, r3, r1, lsl #6
   1aca4:	cmp	r3, r1, lsl #5
   1aca8:	adc	r0, r0, r0
   1acac:	subcs	r3, r3, r1, lsl #5
   1acb0:	cmp	r3, r1, lsl #4
   1acb4:	adc	r0, r0, r0
   1acb8:	subcs	r3, r3, r1, lsl #4
   1acbc:	cmp	r3, r1, lsl #3
   1acc0:	adc	r0, r0, r0
   1acc4:	subcs	r3, r3, r1, lsl #3
   1acc8:	cmp	r3, r1, lsl #2
   1accc:	adc	r0, r0, r0
   1acd0:	subcs	r3, r3, r1, lsl #2
   1acd4:	cmp	r3, r1, lsl #1
   1acd8:	adc	r0, r0, r0
   1acdc:	subcs	r3, r3, r1, lsl #1
   1ace0:	cmp	r3, r1
   1ace4:	adc	r0, r0, r0
   1ace8:	subcs	r3, r3, r1
   1acec:	cmp	ip, #0
   1acf0:	rsbmi	r0, r0, #0
   1acf4:	bx	lr
   1acf8:	teq	ip, r0
   1acfc:	rsbmi	r0, r0, #0
   1ad00:	bx	lr
   1ad04:	movcc	r0, #0
   1ad08:	asreq	r0, ip, #31
   1ad0c:	orreq	r0, r0, #1
   1ad10:	bx	lr
   1ad14:	clz	r2, r1
   1ad18:	rsb	r2, r2, #31
   1ad1c:	cmp	ip, #0
   1ad20:	lsr	r0, r3, r2
   1ad24:	rsbmi	r0, r0, #0
   1ad28:	bx	lr
   1ad2c:	cmp	r0, #0
   1ad30:	mvngt	r0, #-2147483648	; 0x80000000
   1ad34:	movlt	r0, #-2147483648	; 0x80000000
   1ad38:	b	1ad98 <lchmod@@Base+0x4668>
   1ad3c:	cmp	r1, #0
   1ad40:	beq	1ad2c <lchmod@@Base+0x45fc>
   1ad44:	push	{r0, r1, lr}
   1ad48:	bl	1ab24 <lchmod@@Base+0x43f4>
   1ad4c:	pop	{r1, r2, lr}
   1ad50:	mul	r3, r2, r0
   1ad54:	sub	r1, r1, r3
   1ad58:	bx	lr
   1ad5c:	cmp	r3, #0
   1ad60:	cmpeq	r2, #0
   1ad64:	bne	1ad7c <lchmod@@Base+0x464c>
   1ad68:	cmp	r1, #0
   1ad6c:	cmpeq	r0, #0
   1ad70:	mvnne	r1, #0
   1ad74:	mvnne	r0, #0
   1ad78:	b	1ad98 <lchmod@@Base+0x4668>
   1ad7c:	sub	sp, sp, #8
   1ad80:	push	{sp, lr}
   1ad84:	bl	1ada8 <lchmod@@Base+0x4678>
   1ad88:	ldr	lr, [sp, #4]
   1ad8c:	add	sp, sp, #8
   1ad90:	pop	{r2, r3}
   1ad94:	bx	lr
   1ad98:	push	{r1, lr}
   1ad9c:	mov	r0, #8
   1ada0:	bl	114b8 <raise@plt>
   1ada4:	pop	{r1, pc}
   1ada8:	cmp	r1, r3
   1adac:	push	{r4, r5, r6, r7, r8, r9, lr}
   1adb0:	cmpeq	r0, r2
   1adb4:	mov	r4, r0
   1adb8:	mov	r5, r1
   1adbc:	ldr	r9, [sp, #28]
   1adc0:	movcc	r0, #0
   1adc4:	movcc	r1, #0
   1adc8:	bcc	1aec0 <lchmod@@Base+0x4790>
   1adcc:	cmp	r3, #0
   1add0:	clzeq	ip, r2
   1add4:	clzne	ip, r3
   1add8:	addeq	ip, ip, #32
   1addc:	cmp	r5, #0
   1ade0:	clzeq	r1, r4
   1ade4:	addeq	r1, r1, #32
   1ade8:	clzne	r1, r5
   1adec:	sub	ip, ip, r1
   1adf0:	sub	lr, ip, #32
   1adf4:	lsl	r7, r3, ip
   1adf8:	rsb	r8, ip, #32
   1adfc:	orr	r7, r7, r2, lsl lr
   1ae00:	orr	r7, r7, r2, lsr r8
   1ae04:	lsl	r6, r2, ip
   1ae08:	cmp	r5, r7
   1ae0c:	cmpeq	r4, r6
   1ae10:	movcc	r0, #0
   1ae14:	movcc	r1, #0
   1ae18:	bcc	1ae34 <lchmod@@Base+0x4704>
   1ae1c:	mov	r3, #1
   1ae20:	subs	r4, r4, r6
   1ae24:	lsl	r1, r3, lr
   1ae28:	lsl	r0, r3, ip
   1ae2c:	orr	r1, r1, r3, lsr r8
   1ae30:	sbc	r5, r5, r7
   1ae34:	cmp	ip, #0
   1ae38:	beq	1aec0 <lchmod@@Base+0x4790>
   1ae3c:	lsrs	r3, r7, #1
   1ae40:	rrx	r2, r6
   1ae44:	mov	r6, ip
   1ae48:	b	1ae6c <lchmod@@Base+0x473c>
   1ae4c:	subs	r4, r4, r2
   1ae50:	sbc	r5, r5, r3
   1ae54:	adds	r4, r4, r4
   1ae58:	adc	r5, r5, r5
   1ae5c:	adds	r4, r4, #1
   1ae60:	adc	r5, r5, #0
   1ae64:	subs	r6, r6, #1
   1ae68:	beq	1ae88 <lchmod@@Base+0x4758>
   1ae6c:	cmp	r5, r3
   1ae70:	cmpeq	r4, r2
   1ae74:	bcs	1ae4c <lchmod@@Base+0x471c>
   1ae78:	adds	r4, r4, r4
   1ae7c:	adc	r5, r5, r5
   1ae80:	subs	r6, r6, #1
   1ae84:	bne	1ae6c <lchmod@@Base+0x473c>
   1ae88:	lsr	r6, r4, ip
   1ae8c:	lsr	r7, r5, ip
   1ae90:	orr	r6, r6, r5, lsl r8
   1ae94:	adds	r2, r0, r4
   1ae98:	orr	r6, r6, r5, lsr lr
   1ae9c:	adc	r3, r1, r5
   1aea0:	lsl	r1, r7, ip
   1aea4:	orr	r1, r1, r6, lsl lr
   1aea8:	lsl	r0, r6, ip
   1aeac:	orr	r1, r1, r6, lsr r8
   1aeb0:	subs	r0, r2, r0
   1aeb4:	mov	r4, r6
   1aeb8:	mov	r5, r7
   1aebc:	sbc	r1, r3, r1
   1aec0:	cmp	r9, #0
   1aec4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1aec8:	strd	r4, [r9]
   1aecc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1aed0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aed4:	mov	r7, r0
   1aed8:	ldr	r6, [pc, #72]	; 1af28 <lchmod@@Base+0x47f8>
   1aedc:	ldr	r5, [pc, #72]	; 1af2c <lchmod@@Base+0x47fc>
   1aee0:	add	r6, pc, r6
   1aee4:	add	r5, pc, r5
   1aee8:	sub	r6, r6, r5
   1aeec:	mov	r8, r1
   1aef0:	mov	r9, r2
   1aef4:	bl	11468 <fstatfs64@plt-0x20>
   1aef8:	asrs	r6, r6, #2
   1aefc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af00:	mov	r4, #0
   1af04:	add	r4, r4, #1
   1af08:	ldr	r3, [r5], #4
   1af0c:	mov	r2, r9
   1af10:	mov	r1, r8
   1af14:	mov	r0, r7
   1af18:	blx	r3
   1af1c:	cmp	r6, r4
   1af20:	bne	1af04 <lchmod@@Base+0x47d4>
   1af24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1af28:	andeq	r1, r1, r0, lsr #32
   1af2c:	andeq	r1, r1, r8, lsl r0
   1af30:	bx	lr
   1af34:	ldr	r3, [pc, #12]	; 1af48 <lchmod@@Base+0x4818>
   1af38:	mov	r1, #0
   1af3c:	add	r3, pc, r3
   1af40:	ldr	r2, [r3]
   1af44:	b	11734 <__cxa_atexit@plt>
   1af48:	andeq	r1, r1, r0, asr #4

Disassembly of section .fini:

0001af4c <.fini>:
   1af4c:	push	{r3, lr}
   1af50:	pop	{r3, pc}
