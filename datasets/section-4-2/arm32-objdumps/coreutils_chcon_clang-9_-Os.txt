
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011494 <.init>:
   11494:	push	{r3, lr}
   11498:	bl	118d4 <__assert_fail@plt+0x48>
   1149c:	pop	{r3, pc}

Disassembly of section .plt:

000114a0 <fstatfs64@plt-0x14>:
   114a0:	push	{lr}		; (str lr, [sp, #-4]!)
   114a4:	ldr	lr, [pc, #4]	; 114b0 <fstatfs64@plt-0x4>
   114a8:	add	lr, pc, lr
   114ac:	ldr	pc, [lr, #8]!
   114b0:	andeq	r9, r1, r0, asr fp

000114b4 <fstatfs64@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #102400	; 0x19000
   114bc:	ldr	pc, [ip, #2896]!	; 0xb50

000114c0 <calloc@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #102400	; 0x19000
   114c8:	ldr	pc, [ip, #2888]!	; 0xb48

000114cc <fputs_unlocked@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #102400	; 0x19000
   114d4:	ldr	pc, [ip, #2880]!	; 0xb40

000114d8 <raise@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #102400	; 0x19000
   114e0:	ldr	pc, [ip, #2872]!	; 0xb38

000114e4 <is_selinux_enabled@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #102400	; 0x19000
   114ec:	ldr	pc, [ip, #2864]!	; 0xb30

000114f0 <strcmp@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #102400	; 0x19000
   114f8:	ldr	pc, [ip, #2856]!	; 0xb28

000114fc <fflush@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #102400	; 0x19000
   11504:	ldr	pc, [ip, #2848]!	; 0xb20

00011508 <lsetfilecon@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #102400	; 0x19000
   11510:	ldr	pc, [ip, #2840]!	; 0xb18

00011514 <memmove@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #102400	; 0x19000
   1151c:	ldr	pc, [ip, #2832]!	; 0xb10

00011520 <free@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #102400	; 0x19000
   11528:	ldr	pc, [ip, #2824]!	; 0xb08

0001152c <_exit@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #102400	; 0x19000
   11534:	ldr	pc, [ip, #2816]!	; 0xb00

00011538 <memcpy@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #102400	; 0x19000
   11540:	ldr	pc, [ip, #2808]!	; 0xaf8

00011544 <mbsinit@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #102400	; 0x19000
   1154c:	ldr	pc, [ip, #2800]!	; 0xaf0

00011550 <context_new@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #102400	; 0x19000
   11558:	ldr	pc, [ip, #2792]!	; 0xae8

0001155c <context_role_set@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #102400	; 0x19000
   11564:	ldr	pc, [ip, #2784]!	; 0xae0

00011568 <dcgettext@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #102400	; 0x19000
   11570:	ldr	pc, [ip, #2776]!	; 0xad8

00011574 <context_type_set@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #102400	; 0x19000
   1157c:	ldr	pc, [ip, #2768]!	; 0xad0

00011580 <realloc@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #102400	; 0x19000
   11588:	ldr	pc, [ip, #2760]!	; 0xac8

0001158c <fgetfilecon@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #102400	; 0x19000
   11594:	ldr	pc, [ip, #2752]!	; 0xac0

00011598 <textdomain@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #102400	; 0x19000
   115a0:	ldr	pc, [ip, #2744]!	; 0xab8

000115a4 <chdir@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #102400	; 0x19000
   115ac:	ldr	pc, [ip, #2736]!	; 0xab0

000115b0 <__fxstatat64@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #102400	; 0x19000
   115b8:	ldr	pc, [ip, #2728]!	; 0xaa8

000115bc <iswprint@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #102400	; 0x19000
   115c4:	ldr	pc, [ip, #2720]!	; 0xaa0

000115c8 <__fxstat64@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #102400	; 0x19000
   115d0:	ldr	pc, [ip, #2712]!	; 0xa98

000115d4 <lseek64@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #102400	; 0x19000
   115dc:	ldr	pc, [ip, #2704]!	; 0xa90

000115e0 <__ctype_get_mb_cur_max@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #102400	; 0x19000
   115e8:	ldr	pc, [ip, #2696]!	; 0xa88

000115ec <strcpy@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #102400	; 0x19000
   115f4:	ldr	pc, [ip, #2688]!	; 0xa80

000115f8 <__fpending@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #102400	; 0x19000
   11600:	ldr	pc, [ip, #2680]!	; 0xa78

00011604 <ferror_unlocked@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #102400	; 0x19000
   1160c:	ldr	pc, [ip, #2672]!	; 0xa70

00011610 <mbrtowc@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #102400	; 0x19000
   11618:	ldr	pc, [ip, #2664]!	; 0xa68

0001161c <error@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #102400	; 0x19000
   11624:	ldr	pc, [ip, #2656]!	; 0xa60

00011628 <security_check_context@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #102400	; 0x19000
   11630:	ldr	pc, [ip, #2648]!	; 0xa58

00011634 <open64@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #102400	; 0x19000
   1163c:	ldr	pc, [ip, #2640]!	; 0xa50

00011640 <lgetfilecon@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #102400	; 0x19000
   11648:	ldr	pc, [ip, #2632]!	; 0xa48

0001164c <malloc@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #102400	; 0x19000
   11654:	ldr	pc, [ip, #2624]!	; 0xa40

00011658 <__libc_start_main@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #102400	; 0x19000
   11660:	ldr	pc, [ip, #2616]!	; 0xa38

00011664 <__freading@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #102400	; 0x19000
   1166c:	ldr	pc, [ip, #2608]!	; 0xa30

00011670 <__gmon_start__@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #102400	; 0x19000
   11678:	ldr	pc, [ip, #2600]!	; 0xa28

0001167c <context_free@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #102400	; 0x19000
   11684:	ldr	pc, [ip, #2592]!	; 0xa20

00011688 <getopt_long@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #102400	; 0x19000
   11690:	ldr	pc, [ip, #2584]!	; 0xa18

00011694 <__ctype_b_loc@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #102400	; 0x19000
   1169c:	ldr	pc, [ip, #2576]!	; 0xa10

000116a0 <getcwd@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #102400	; 0x19000
   116a8:	ldr	pc, [ip, #2568]!	; 0xa08

000116ac <exit@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #102400	; 0x19000
   116b4:	ldr	pc, [ip, #2560]!	; 0xa00

000116b8 <context_user_set@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #102400	; 0x19000
   116c0:	ldr	pc, [ip, #2552]!	; 0x9f8

000116c4 <getfilecon@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #102400	; 0x19000
   116cc:	ldr	pc, [ip, #2544]!	; 0x9f0

000116d0 <bcmp@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #102400	; 0x19000
   116d8:	ldr	pc, [ip, #2536]!	; 0x9e8

000116dc <strlen@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #102400	; 0x19000
   116e4:	ldr	pc, [ip, #2528]!	; 0x9e0

000116e8 <openat64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #102400	; 0x19000
   116f0:	ldr	pc, [ip, #2520]!	; 0x9d8

000116f4 <memrchr@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #102400	; 0x19000
   116fc:	ldr	pc, [ip, #2512]!	; 0x9d0

00011700 <__errno_location@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #102400	; 0x19000
   11708:	ldr	pc, [ip, #2504]!	; 0x9c8

0001170c <__sprintf_chk@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #102400	; 0x19000
   11714:	ldr	pc, [ip, #2496]!	; 0x9c0

00011718 <__cxa_atexit@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #102400	; 0x19000
   11720:	ldr	pc, [ip, #2488]!	; 0x9b8

00011724 <memset@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #102400	; 0x19000
   1172c:	ldr	pc, [ip, #2480]!	; 0x9b0

00011730 <__printf_chk@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #102400	; 0x19000
   11738:	ldr	pc, [ip, #2472]!	; 0x9a8

0001173c <fileno@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #102400	; 0x19000
   11744:	ldr	pc, [ip, #2464]!	; 0x9a0

00011748 <__fprintf_chk@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #102400	; 0x19000
   11750:	ldr	pc, [ip, #2456]!	; 0x998

00011754 <memchr@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #102400	; 0x19000
   1175c:	ldr	pc, [ip, #2448]!	; 0x990

00011760 <setfilecon@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #102400	; 0x19000
   11768:	ldr	pc, [ip, #2440]!	; 0x988

0001176c <access@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #102400	; 0x19000
   11774:	ldr	pc, [ip, #2432]!	; 0x980

00011778 <fclose@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #102400	; 0x19000
   11780:	ldr	pc, [ip, #2424]!	; 0x978

00011784 <fseeko64@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #102400	; 0x19000
   1178c:	ldr	pc, [ip, #2416]!	; 0x970

00011790 <fcntl64@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #102400	; 0x19000
   11798:	ldr	pc, [ip, #2408]!	; 0x968

0001179c <setlocale@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #102400	; 0x19000
   117a4:	ldr	pc, [ip, #2400]!	; 0x960

000117a8 <strrchr@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #102400	; 0x19000
   117b0:	ldr	pc, [ip, #2392]!	; 0x958

000117b4 <nl_langinfo@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #102400	; 0x19000
   117bc:	ldr	pc, [ip, #2384]!	; 0x950

000117c0 <readdir64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #102400	; 0x19000
   117c8:	ldr	pc, [ip, #2376]!	; 0x948

000117cc <fdopendir@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #102400	; 0x19000
   117d4:	ldr	pc, [ip, #2368]!	; 0x940

000117d8 <dirfd@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #102400	; 0x19000
   117e0:	ldr	pc, [ip, #2360]!	; 0x938

000117e4 <fchdir@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #102400	; 0x19000
   117ec:	ldr	pc, [ip, #2352]!	; 0x930

000117f0 <qsort@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #102400	; 0x19000
   117f8:	ldr	pc, [ip, #2344]!	; 0x928

000117fc <freecon@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #102400	; 0x19000
   11804:	ldr	pc, [ip, #2336]!	; 0x920

00011808 <bindtextdomain@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #102400	; 0x19000
   11810:	ldr	pc, [ip, #2328]!	; 0x918

00011814 <context_range_set@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #102400	; 0x19000
   1181c:	ldr	pc, [ip, #2320]!	; 0x910

00011820 <context_str@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #102400	; 0x19000
   11828:	ldr	pc, [ip, #2312]!	; 0x908

0001182c <__xstat64@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #102400	; 0x19000
   11834:	ldr	pc, [ip, #2304]!	; 0x900

00011838 <fputs@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #102400	; 0x19000
   11840:	ldr	pc, [ip, #2296]!	; 0x8f8

00011844 <strncmp@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #102400	; 0x19000
   1184c:	ldr	pc, [ip, #2288]!	; 0x8f0

00011850 <abort@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #102400	; 0x19000
   11858:	ldr	pc, [ip, #2280]!	; 0x8e8

0001185c <close@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #102400	; 0x19000
   11864:	ldr	pc, [ip, #2272]!	; 0x8e0

00011868 <__lxstat64@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #102400	; 0x19000
   11870:	ldr	pc, [ip, #2264]!	; 0x8d8

00011874 <closedir@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #102400	; 0x19000
   1187c:	ldr	pc, [ip, #2256]!	; 0x8d0

00011880 <strspn@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #102400	; 0x19000
   11888:	ldr	pc, [ip, #2248]!	; 0x8c8

0001188c <__assert_fail@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #102400	; 0x19000
   11894:	ldr	pc, [ip, #2240]!	; 0x8c0

Disassembly of section .text:

00011898 <.text>:
   11898:	mov	fp, #0
   1189c:	mov	lr, #0
   118a0:	pop	{r1}		; (ldr r1, [sp], #4)
   118a4:	mov	r2, sp
   118a8:	push	{r2}		; (str r2, [sp, #-4]!)
   118ac:	push	{r0}		; (str r0, [sp, #-4]!)
   118b0:	ldr	ip, [pc, #16]	; 118c8 <__assert_fail@plt+0x3c>
   118b4:	push	{ip}		; (str ip, [sp, #-4]!)
   118b8:	ldr	r0, [pc, #12]	; 118cc <__assert_fail@plt+0x40>
   118bc:	ldr	r3, [pc, #12]	; 118d0 <__assert_fail@plt+0x44>
   118c0:	bl	11658 <__libc_start_main@plt>
   118c4:	bl	11850 <abort@plt>
   118c8:	andeq	r9, r1, r4, lsr #19
   118cc:	muleq	r1, r4, ip
   118d0:	andeq	r9, r1, r4, asr #18
   118d4:	ldr	r3, [pc, #20]	; 118f0 <__assert_fail@plt+0x64>
   118d8:	ldr	r2, [pc, #20]	; 118f4 <__assert_fail@plt+0x68>
   118dc:	add	r3, pc, r3
   118e0:	ldr	r2, [r3, r2]
   118e4:	cmp	r2, #0
   118e8:	bxeq	lr
   118ec:	b	11670 <__gmon_start__@plt>
   118f0:	andeq	r9, r1, ip, lsl r7
   118f4:	andeq	r0, r0, r8, asr r1
   118f8:	ldr	r0, [pc, #24]	; 11918 <__assert_fail@plt+0x8c>
   118fc:	ldr	r3, [pc, #24]	; 1191c <__assert_fail@plt+0x90>
   11900:	cmp	r3, r0
   11904:	bxeq	lr
   11908:	ldr	r3, [pc, #16]	; 11920 <__assert_fail@plt+0x94>
   1190c:	cmp	r3, #0
   11910:	bxeq	lr
   11914:	bx	r3
   11918:			; <UNDEFINED> instruction: 0x0002b1b0
   1191c:			; <UNDEFINED> instruction: 0x0002b1b0
   11920:	andeq	r0, r0, r0
   11924:	ldr	r0, [pc, #36]	; 11950 <__assert_fail@plt+0xc4>
   11928:	ldr	r1, [pc, #36]	; 11954 <__assert_fail@plt+0xc8>
   1192c:	sub	r1, r1, r0
   11930:	asr	r1, r1, #2
   11934:	add	r1, r1, r1, lsr #31
   11938:	asrs	r1, r1, #1
   1193c:	bxeq	lr
   11940:	ldr	r3, [pc, #16]	; 11958 <__assert_fail@plt+0xcc>
   11944:	cmp	r3, #0
   11948:	bxeq	lr
   1194c:	bx	r3
   11950:			; <UNDEFINED> instruction: 0x0002b1b0
   11954:			; <UNDEFINED> instruction: 0x0002b1b0
   11958:	andeq	r0, r0, r0
   1195c:	push	{r4, lr}
   11960:	ldr	r4, [pc, #24]	; 11980 <__assert_fail@plt+0xf4>
   11964:	ldrb	r3, [r4]
   11968:	cmp	r3, #0
   1196c:	popne	{r4, pc}
   11970:	bl	118f8 <__assert_fail@plt+0x6c>
   11974:	mov	r3, #1
   11978:	strb	r3, [r4]
   1197c:	pop	{r4, pc}
   11980:	andeq	fp, r2, ip, asr #3
   11984:	b	11924 <__assert_fail@plt+0x98>
   11988:	push	{fp, lr}
   1198c:	mov	fp, sp
   11990:	sub	sp, sp, #64	; 0x40
   11994:	mov	r8, r0
   11998:	cmp	r0, #0
   1199c:	bne	11c54 <__assert_fail@plt+0x3c8>
   119a0:	movw	r1, #39499	; 0x9a4b
   119a4:	mov	r0, #0
   119a8:	mov	r2, #5
   119ac:	movt	r1, #1
   119b0:	bl	11568 <dcgettext@plt>
   119b4:	mov	r1, r0
   119b8:	movw	r0, #45580	; 0xb20c
   119bc:	movt	r0, #2
   119c0:	ldr	r2, [r0]
   119c4:	mov	r0, #1
   119c8:	mov	r3, r2
   119cc:	str	r2, [sp]
   119d0:	bl	11730 <__printf_chk@plt>
   119d4:	movw	r1, #39657	; 0x9ae9
   119d8:	mov	r0, #0
   119dc:	mov	r2, #5
   119e0:	movt	r1, #1
   119e4:	bl	11568 <dcgettext@plt>
   119e8:	movw	r9, #45508	; 0xb1c4
   119ec:	movt	r9, #2
   119f0:	ldr	r1, [r9]
   119f4:	bl	114cc <fputs_unlocked@plt>
   119f8:	movw	r1, #41584	; 0xa270
   119fc:	mov	r0, #0
   11a00:	mov	r2, #5
   11a04:	movt	r1, #1
   11a08:	bl	11568 <dcgettext@plt>
   11a0c:	ldr	r1, [r9]
   11a10:	bl	114cc <fputs_unlocked@plt>
   11a14:	movw	r1, #39796	; 0x9b74
   11a18:	mov	r0, #0
   11a1c:	mov	r2, #5
   11a20:	movt	r1, #1
   11a24:	bl	11568 <dcgettext@plt>
   11a28:	ldr	r1, [r9]
   11a2c:	bl	114cc <fputs_unlocked@plt>
   11a30:	movw	r1, #40027	; 0x9c5b
   11a34:	mov	r0, #0
   11a38:	mov	r2, #5
   11a3c:	movt	r1, #1
   11a40:	bl	11568 <dcgettext@plt>
   11a44:	ldr	r1, [r9]
   11a48:	bl	114cc <fputs_unlocked@plt>
   11a4c:	movw	r1, #40310	; 0x9d76
   11a50:	mov	r0, #0
   11a54:	mov	r2, #5
   11a58:	movt	r1, #1
   11a5c:	bl	11568 <dcgettext@plt>
   11a60:	ldr	r1, [r9]
   11a64:	bl	114cc <fputs_unlocked@plt>
   11a68:	movw	r1, #40438	; 0x9df6
   11a6c:	mov	r0, #0
   11a70:	mov	r2, #5
   11a74:	movt	r1, #1
   11a78:	bl	11568 <dcgettext@plt>
   11a7c:	ldr	r1, [r9]
   11a80:	bl	114cc <fputs_unlocked@plt>
   11a84:	movw	r1, #40557	; 0x9e6d
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	11568 <dcgettext@plt>
   11a98:	ldr	r1, [r9]
   11a9c:	bl	114cc <fputs_unlocked@plt>
   11aa0:	movw	r1, #40628	; 0x9eb4
   11aa4:	mov	r0, #0
   11aa8:	mov	r2, #5
   11aac:	movt	r1, #1
   11ab0:	bl	11568 <dcgettext@plt>
   11ab4:	ldr	r1, [r9]
   11ab8:	bl	114cc <fputs_unlocked@plt>
   11abc:	movw	r1, #40699	; 0x9efb
   11ac0:	mov	r0, #0
   11ac4:	mov	r2, #5
   11ac8:	movt	r1, #1
   11acc:	bl	11568 <dcgettext@plt>
   11ad0:	ldr	r1, [r9]
   11ad4:	bl	114cc <fputs_unlocked@plt>
   11ad8:	movw	r1, #41164	; 0xa0cc
   11adc:	mov	r0, #0
   11ae0:	mov	r2, #5
   11ae4:	movt	r1, #1
   11ae8:	bl	11568 <dcgettext@plt>
   11aec:	ldr	r1, [r9]
   11af0:	bl	114cc <fputs_unlocked@plt>
   11af4:	movw	r1, #41209	; 0xa0f9
   11af8:	mov	r0, #0
   11afc:	mov	r2, #5
   11b00:	movt	r1, #1
   11b04:	bl	11568 <dcgettext@plt>
   11b08:	ldr	r1, [r9]
   11b0c:	bl	114cc <fputs_unlocked@plt>
   11b10:	movw	r0, #42904	; 0xa798
   11b14:	add	r6, sp, #8
   11b18:	movt	r0, #1
   11b1c:	mov	r1, r6
   11b20:	ldm	r0!, {r2, r3, r4, r5}
   11b24:	stmia	r1!, {r2, r3, r4, r5}
   11b28:	ldm	r0!, {r2, r3, r4, r5, r7}
   11b2c:	stmia	r1!, {r2, r3, r4, r5, r7}
   11b30:	ldm	r0, {r2, r3, r4, r5, r7}
   11b34:	stm	r1, {r2, r3, r4, r5, r7}
   11b38:	movw	r1, #41659	; 0xa2bb
   11b3c:	movw	r5, #41263	; 0xa12f
   11b40:	movt	r1, #1
   11b44:	movt	r5, #1
   11b48:	mov	r0, r5
   11b4c:	bl	114f0 <strcmp@plt>
   11b50:	cmp	r0, #0
   11b54:	ldrne	r1, [r6, #8]!
   11b58:	cmpne	r1, #0
   11b5c:	bne	11b48 <__assert_fail@plt+0x2bc>
   11b60:	movw	r1, #41754	; 0xa31a
   11b64:	ldr	r6, [r6, #4]
   11b68:	mov	r0, #0
   11b6c:	mov	r2, #5
   11b70:	movt	r1, #1
   11b74:	bl	11568 <dcgettext@plt>
   11b78:	movw	r2, #41308	; 0xa15c
   11b7c:	movw	r3, #41777	; 0xa331
   11b80:	mov	r1, r0
   11b84:	mov	r0, #1
   11b88:	movt	r2, #1
   11b8c:	movt	r3, #1
   11b90:	bl	11730 <__printf_chk@plt>
   11b94:	cmp	r6, #0
   11b98:	mov	r0, #5
   11b9c:	mov	r1, #0
   11ba0:	moveq	r6, r5
   11ba4:	bl	1179c <setlocale@plt>
   11ba8:	cmp	r0, #0
   11bac:	beq	11be4 <__assert_fail@plt+0x358>
   11bb0:	movw	r1, #41817	; 0xa359
   11bb4:	mov	r2, #3
   11bb8:	movt	r1, #1
   11bbc:	bl	11844 <strncmp@plt>
   11bc0:	cmp	r0, #0
   11bc4:	beq	11be4 <__assert_fail@plt+0x358>
   11bc8:	movw	r1, #41821	; 0xa35d
   11bcc:	mov	r0, #0
   11bd0:	mov	r2, #5
   11bd4:	movt	r1, #1
   11bd8:	bl	11568 <dcgettext@plt>
   11bdc:	ldr	r1, [r9]
   11be0:	bl	114cc <fputs_unlocked@plt>
   11be4:	movw	r1, #41892	; 0xa3a4
   11be8:	mov	r0, #0
   11bec:	mov	r2, #5
   11bf0:	movt	r1, #1
   11bf4:	bl	11568 <dcgettext@plt>
   11bf8:	movw	r2, #41777	; 0xa331
   11bfc:	mov	r1, r0
   11c00:	mov	r0, #1
   11c04:	mov	r3, r5
   11c08:	movt	r2, #1
   11c0c:	bl	11730 <__printf_chk@plt>
   11c10:	movw	r1, #41919	; 0xa3bf
   11c14:	mov	r0, #0
   11c18:	mov	r2, #5
   11c1c:	movt	r1, #1
   11c20:	bl	11568 <dcgettext@plt>
   11c24:	mov	r1, r0
   11c28:	movw	r0, #41687	; 0xa2d7
   11c2c:	movw	r3, #41163	; 0xa0cb
   11c30:	cmp	r6, r5
   11c34:	mov	r2, r6
   11c38:	movt	r0, #1
   11c3c:	movt	r3, #1
   11c40:	moveq	r3, r0
   11c44:	mov	r0, #1
   11c48:	bl	11730 <__printf_chk@plt>
   11c4c:	mov	r0, r8
   11c50:	bl	116ac <exit@plt>
   11c54:	movw	r0, #45504	; 0xb1c0
   11c58:	movw	r1, #39460	; 0x9a24
   11c5c:	mov	r2, #5
   11c60:	movt	r0, #2
   11c64:	movt	r1, #1
   11c68:	ldr	r5, [r0]
   11c6c:	mov	r0, #0
   11c70:	bl	11568 <dcgettext@plt>
   11c74:	mov	r2, r0
   11c78:	movw	r0, #45580	; 0xb20c
   11c7c:	mov	r1, #1
   11c80:	movt	r0, #2
   11c84:	ldr	r3, [r0]
   11c88:	mov	r0, r5
   11c8c:	bl	11748 <__fprintf_chk@plt>
   11c90:	b	11c4c <__assert_fail@plt+0x3c0>
   11c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c98:	add	fp, sp, #28
   11c9c:	sub	sp, sp, #36	; 0x24
   11ca0:	mov	r5, r0
   11ca4:	ldr	r0, [r1]
   11ca8:	mov	r4, r1
   11cac:	bl	15d7c <__assert_fail@plt+0x44f0>
   11cb0:	movw	r1, #41163	; 0xa0cb
   11cb4:	mov	r0, #6
   11cb8:	movt	r1, #1
   11cbc:	bl	1179c <setlocale@plt>
   11cc0:	movw	r6, #41312	; 0xa160
   11cc4:	movw	r1, #41269	; 0xa135
   11cc8:	movt	r6, #1
   11ccc:	movt	r1, #1
   11cd0:	mov	r0, r6
   11cd4:	bl	11808 <bindtextdomain@plt>
   11cd8:	mov	r0, r6
   11cdc:	bl	11598 <textdomain@plt>
   11ce0:	movw	r0, #11152	; 0x2b90
   11ce4:	movt	r0, #1
   11ce8:	bl	199a8 <__assert_fail@plt+0x811c>
   11cec:	movw	r7, #41293	; 0xa14d
   11cf0:	movw	r6, #42680	; 0xa6b8
   11cf4:	mov	r0, #16
   11cf8:	mov	r8, #0
   11cfc:	mvn	r9, #0
   11d00:	mov	sl, #0
   11d04:	str	r0, [sp, #24]
   11d08:	mov	r0, #0
   11d0c:	movt	r7, #1
   11d10:	movt	r6, #1
   11d14:	str	r0, [sp, #20]
   11d18:	mov	r0, #0
   11d1c:	str	r0, [sp, #16]
   11d20:	mov	r0, r5
   11d24:	mov	r1, r4
   11d28:	mov	r2, r7
   11d2c:	mov	r3, r6
   11d30:	str	r8, [sp]
   11d34:	bl	11688 <getopt_long@plt>
   11d38:	cmp	r0, #81	; 0x51
   11d3c:	ble	11da0 <__assert_fail@plt+0x514>
   11d40:	sub	r1, r0, #102	; 0x66
   11d44:	cmp	r1, #16
   11d48:	bhi	11dc4 <__assert_fail@plt+0x538>
   11d4c:	add	r0, pc, #0
   11d50:	ldr	pc, [r0, r1, lsl #2]
   11d54:	andeq	r1, r1, r0, lsr #26
   11d58:	strdeq	r2, [r1], -ip
   11d5c:	muleq	r1, r8, sp
   11d60:	strdeq	r2, [r1], -ip
   11d64:	strdeq	r2, [r1], -ip
   11d68:	strdeq	r2, [r1], -ip
   11d6c:	andeq	r1, r1, r8, lsr lr
   11d70:	strdeq	r2, [r1], -ip
   11d74:	strdeq	r2, [r1], -ip
   11d78:	strdeq	r2, [r1], -ip
   11d7c:	strdeq	r2, [r1], -ip
   11d80:	strdeq	r2, [r1], -ip
   11d84:	andeq	r1, r1, r8, lsl lr
   11d88:	strdeq	r2, [r1], -ip
   11d8c:	strdeq	r1, [r1], -r0
   11d90:	andeq	r1, r1, r0, ror #28
   11d94:	andeq	r1, r1, ip, asr #28
   11d98:	mov	r9, #0
   11d9c:	b	11d20 <__assert_fail@plt+0x494>
   11da0:	cmp	r0, #71	; 0x47
   11da4:	ble	11ebc <__assert_fail@plt+0x630>
   11da8:	cmp	r0, #72	; 0x48
   11dac:	beq	11e8c <__assert_fail@plt+0x600>
   11db0:	cmp	r0, #76	; 0x4c
   11db4:	bne	11e98 <__assert_fail@plt+0x60c>
   11db8:	mov	r0, #2
   11dbc:	str	r0, [sp, #24]
   11dc0:	b	11d20 <__assert_fail@plt+0x494>
   11dc4:	sub	r1, r0, #256	; 0x100
   11dc8:	cmp	r1, #3
   11dcc:	bhi	11e04 <__assert_fail@plt+0x578>
   11dd0:	add	r0, pc, #0
   11dd4:	ldr	pc, [r0, r1, lsl #2]
   11dd8:	andeq	r1, r1, r8, ror #27
   11ddc:	andeq	r1, r1, r0, lsl #29
   11de0:	andeq	r1, r1, ip, lsr #28
   11de4:	andeq	r1, r1, ip, lsr #29
   11de8:	mov	r9, #1
   11dec:	b	11d20 <__assert_fail@plt+0x494>
   11df0:	movw	r0, #45512	; 0xb1c8
   11df4:	movw	r1, #45532	; 0xb1dc
   11df8:	movt	r0, #2
   11dfc:	movt	r1, #2
   11e00:	b	11e70 <__assert_fail@plt+0x5e4>
   11e04:	cmp	r0, #82	; 0x52
   11e08:	bne	12afc <__assert_fail@plt+0x1270>
   11e0c:	movw	r0, #45520	; 0xb1d0
   11e10:	movt	r0, #2
   11e14:	b	11e54 <__assert_fail@plt+0x5c8>
   11e18:	movw	r0, #45512	; 0xb1c8
   11e1c:	movw	r1, #45528	; 0xb1d8
   11e20:	movt	r0, #2
   11e24:	movt	r1, #2
   11e28:	b	11e70 <__assert_fail@plt+0x5e4>
   11e2c:	mov	r0, #1
   11e30:	str	r0, [sp, #20]
   11e34:	b	11d20 <__assert_fail@plt+0x494>
   11e38:	movw	r0, #45512	; 0xb1c8
   11e3c:	movw	r1, #45536	; 0xb1e0
   11e40:	movt	r0, #2
   11e44:	movt	r1, #2
   11e48:	b	11e70 <__assert_fail@plt+0x5e4>
   11e4c:	movw	r0, #45521	; 0xb1d1
   11e50:	movt	r0, #2
   11e54:	mov	r1, #1
   11e58:	strb	r1, [r0]
   11e5c:	b	11d20 <__assert_fail@plt+0x494>
   11e60:	movw	r0, #45512	; 0xb1c8
   11e64:	movw	r1, #45524	; 0xb1d4
   11e68:	movt	r0, #2
   11e6c:	movt	r1, #2
   11e70:	ldr	r0, [r0]
   11e74:	str	r0, [r1]
   11e78:	mov	sl, #1
   11e7c:	b	11d20 <__assert_fail@plt+0x494>
   11e80:	mov	r0, #0
   11e84:	str	r0, [sp, #20]
   11e88:	b	11d20 <__assert_fail@plt+0x494>
   11e8c:	mov	r0, #17
   11e90:	str	r0, [sp, #24]
   11e94:	b	11d20 <__assert_fail@plt+0x494>
   11e98:	cmp	r0, #80	; 0x50
   11e9c:	bne	12afc <__assert_fail@plt+0x1270>
   11ea0:	mov	r0, #16
   11ea4:	str	r0, [sp, #24]
   11ea8:	b	11d20 <__assert_fail@plt+0x494>
   11eac:	movw	r0, #45512	; 0xb1c8
   11eb0:	movt	r0, #2
   11eb4:	ldr	r0, [r0]
   11eb8:	b	11d1c <__assert_fail@plt+0x490>
   11ebc:	cmn	r0, #1
   11ec0:	bne	129e8 <__assert_fail@plt+0x115c>
   11ec4:	movw	r0, #45520	; 0xb1d0
   11ec8:	ldr	r7, [sp, #24]
   11ecc:	movt	r0, #2
   11ed0:	ldrb	r0, [r0]
   11ed4:	cmp	r0, #1
   11ed8:	bne	11ef8 <__assert_fail@plt+0x66c>
   11edc:	cmp	r7, #16
   11ee0:	bne	11f10 <__assert_fail@plt+0x684>
   11ee4:	cmp	r9, #1
   11ee8:	beq	12b04 <__assert_fail@plt+0x1278>
   11eec:	mov	r7, #16
   11ef0:	mov	r0, #0
   11ef4:	b	11f08 <__assert_fail@plt+0x67c>
   11ef8:	cmp	r9, #0
   11efc:	mov	r7, #16
   11f00:	movwne	r9, #1
   11f04:	mov	r0, r9
   11f08:	ldr	r6, [sp, #16]
   11f0c:	b	11f20 <__assert_fail@plt+0x694>
   11f10:	ldr	r6, [sp, #16]
   11f14:	mov	r0, #1
   11f18:	cmp	r9, #0
   11f1c:	beq	12b10 <__assert_fail@plt+0x1284>
   11f20:	movw	r1, #45540	; 0xb1e4
   11f24:	movw	r8, #45496	; 0xb1b8
   11f28:	cmp	r6, #0
   11f2c:	movt	r1, #2
   11f30:	movt	r8, #2
   11f34:	strb	r0, [r1]
   11f38:	ldr	r0, [r8]
   11f3c:	mov	r1, #2
   11f40:	movwne	r1, #1
   11f44:	tst	sl, #1
   11f48:	movwne	r1, #1
   11f4c:	sub	r2, r5, r0
   11f50:	cmp	r2, r1
   11f54:	blt	12a54 <__assert_fail@plt+0x11c8>
   11f58:	cmp	r6, #0
   11f5c:	beq	11fa0 <__assert_fail@plt+0x714>
   11f60:	mov	r0, #0
   11f64:	add	r1, sp, #28
   11f68:	str	r0, [sp, #28]
   11f6c:	mov	r0, r6
   11f70:	bl	17fe0 <__assert_fail@plt+0x6754>
   11f74:	cmn	r0, #1
   11f78:	ble	12a98 <__assert_fail@plt+0x120c>
   11f7c:	ldr	r0, [sp, #28]
   11f80:	movw	r1, #45544	; 0xb1e8
   11f84:	tst	sl, #1
   11f88:	movt	r1, #2
   11f8c:	str	r0, [r1]
   11f90:	beq	11fe8 <__assert_fail@plt+0x75c>
   11f94:	movw	r1, #41507	; 0xa223
   11f98:	movt	r1, #1
   11f9c:	b	12ae0 <__assert_fail@plt+0x1254>
   11fa0:	movw	r5, #45544	; 0xb1e8
   11fa4:	tst	sl, #1
   11fa8:	movt	r5, #2
   11fac:	beq	11fbc <__assert_fail@plt+0x730>
   11fb0:	mov	r0, #0
   11fb4:	str	r0, [r5]
   11fb8:	b	11fe8 <__assert_fail@plt+0x75c>
   11fbc:	add	r1, r0, #1
   11fc0:	str	r1, [r8]
   11fc4:	ldr	r0, [r4, r0, lsl #2]
   11fc8:	str	r0, [r5]
   11fcc:	bl	114e4 <is_selinux_enabled@plt>
   11fd0:	cmp	r0, #1
   11fd4:	blt	11fe8 <__assert_fail@plt+0x75c>
   11fd8:	ldr	r0, [r5]
   11fdc:	bl	11628 <security_check_context@plt>
   11fe0:	cmn	r0, #1
   11fe4:	ble	12b34 <__assert_fail@plt+0x12a8>
   11fe8:	movw	r0, #45520	; 0xb1d0
   11fec:	ldr	r1, [sp, #20]
   11ff0:	movw	r5, #45568	; 0xb200
   11ff4:	movt	r0, #2
   11ff8:	movt	r5, #2
   11ffc:	ldrb	r0, [r0]
   12000:	and	r0, r1, r0
   12004:	tst	r0, #1
   12008:	beq	12054 <__assert_fail@plt+0x7c8>
   1200c:	movw	r0, #45552	; 0xb1f0
   12010:	movt	r0, #2
   12014:	bl	178b4 <__assert_fail@plt+0x6028>
   12018:	cmp	r0, #0
   1201c:	str	r0, [r5]
   12020:	bne	1205c <__assert_fail@plt+0x7d0>
   12024:	bl	11700 <__errno_location@plt>
   12028:	movw	r1, #41553	; 0xa251
   1202c:	ldr	r4, [r0]
   12030:	mov	r0, #0
   12034:	mov	r2, #5
   12038:	movt	r1, #1
   1203c:	bl	11568 <dcgettext@plt>
   12040:	movw	r1, #44397	; 0xad6d
   12044:	mov	r5, r0
   12048:	mov	r0, #4
   1204c:	movt	r1, #1
   12050:	b	12ac0 <__assert_fail@plt+0x1234>
   12054:	mov	r0, #0
   12058:	str	r0, [r5]
   1205c:	ldr	r0, [r8]
   12060:	orr	r1, r7, #8
   12064:	mov	r2, #0
   12068:	add	r0, r4, r0, lsl #2
   1206c:	bl	18a1c <__assert_fail@plt+0x7190>
   12070:	str	r0, [sp, #24]
   12074:	bl	13548 <__assert_fail@plt+0x1cbc>
   12078:	cmp	r0, #0
   1207c:	beq	12960 <__assert_fail@plt+0x10d4>
   12080:	mov	r8, r0
   12084:	mov	r7, #1
   12088:	ldrh	r0, [r8, #56]	; 0x38
   1208c:	str	r7, [sp, #20]
   12090:	add	r4, r8, #64	; 0x40
   12094:	add	sl, r8, #160	; 0xa0
   12098:	ldr	r9, [r8, #24]
   1209c:	ldr	r6, [r8, #28]
   120a0:	sub	r1, r0, #1
   120a4:	cmp	r1, #9
   120a8:	bhi	124c4 <__assert_fail@plt+0xc38>
   120ac:	add	r2, pc, #4
   120b0:	mov	r7, #1
   120b4:	ldr	pc, [r2, r1, lsl #2]
   120b8:	andeq	r2, r1, r0, ror #1
   120bc:	andeq	r2, r1, r4, lsl r2
   120c0:			; <UNDEFINED> instruction: 0x000122bc
   120c4:	andeq	r2, r1, ip, lsr #3
   120c8:			; <UNDEFINED> instruction: 0x000122bc
   120cc:	andeq	r2, r1, ip, ror #4
   120d0:	andeq	r2, r1, r8, lsl #5
   120d4:			; <UNDEFINED> instruction: 0x000122bc
   120d8:			; <UNDEFINED> instruction: 0x000122bc
   120dc:	andeq	r2, r1, r0, asr #3
   120e0:	movw	r0, #45520	; 0xb1d0
   120e4:	movt	r0, #2
   120e8:	ldrb	r0, [r0]
   120ec:	cmp	r0, #1
   120f0:	bne	1238c <__assert_fail@plt+0xb00>
   120f4:	movw	r0, #45568	; 0xb200
   120f8:	mov	r7, #1
   120fc:	movt	r0, #2
   12100:	ldr	r0, [r0]
   12104:	cmp	r0, #0
   12108:	beq	128bc <__assert_fail@plt+0x1030>
   1210c:	ldrd	r2, [r0]
   12110:	ldm	sl, {r1, r5}
   12114:	eor	r3, r5, r3
   12118:	eor	r1, r1, r2
   1211c:	orrs	r1, r1, r3
   12120:	bne	128bc <__assert_fail@plt+0x1030>
   12124:	ldrd	r0, [r0, #8]
   12128:	ldrd	r2, [r4]
   1212c:	eor	r1, r3, r1
   12130:	eor	r0, r2, r0
   12134:	orrs	r0, r0, r1
   12138:	bne	128bc <__assert_fail@plt+0x1030>
   1213c:	movw	r4, #44397	; 0xad6d
   12140:	mov	r0, r6
   12144:	movt	r4, #1
   12148:	mov	r1, r4
   1214c:	bl	114f0 <strcmp@plt>
   12150:	cmp	r0, #0
   12154:	beq	128e0 <__assert_fail@plt+0x1054>
   12158:	movw	r1, #42132	; 0xa494
   1215c:	mov	r0, #0
   12160:	mov	r2, #5
   12164:	movt	r1, #1
   12168:	bl	11568 <dcgettext@plt>
   1216c:	mov	r5, r0
   12170:	mov	r0, #0
   12174:	mov	r1, #4
   12178:	mov	r2, r6
   1217c:	bl	17388 <__assert_fail@plt+0x5afc>
   12180:	mov	r7, r0
   12184:	mov	r0, #1
   12188:	mov	r1, #4
   1218c:	mov	r2, r4
   12190:	bl	17388 <__assert_fail@plt+0x5afc>
   12194:	str	r0, [sp]
   12198:	mov	r0, #0
   1219c:	mov	r1, #0
   121a0:	mov	r2, r5
   121a4:	mov	r3, r7
   121a8:	b	12914 <__assert_fail@plt+0x1088>
   121ac:	ldr	r5, [r8, #32]
   121b0:	movw	r1, #42256	; 0xa510
   121b4:	mov	r0, #0
   121b8:	movt	r1, #1
   121bc:	b	121e8 <__assert_fail@plt+0x95c>
   121c0:	ldr	r0, [r8, #48]	; 0x30
   121c4:	cmp	r0, #0
   121c8:	bne	121d8 <__assert_fail@plt+0x94c>
   121cc:	ldr	r0, [r8, #16]
   121d0:	cmp	r0, #0
   121d4:	beq	127f8 <__assert_fail@plt+0xf6c>
   121d8:	ldr	r5, [r8, #32]
   121dc:	movw	r1, #42239	; 0xa4ff
   121e0:	mov	r0, #0
   121e4:	movt	r1, #1
   121e8:	mov	r2, #5
   121ec:	bl	11568 <dcgettext@plt>
   121f0:	mov	r7, r0
   121f4:	mov	r0, #4
   121f8:	mov	r1, r6
   121fc:	bl	17430 <__assert_fail@plt+0x5ba4>
   12200:	mov	r3, r0
   12204:	mov	r0, #0
   12208:	mov	r1, r5
   1220c:	mov	r2, r7
   12210:	b	122b0 <__assert_fail@plt+0xa24>
   12214:	ldr	r0, [sp, #24]
   12218:	mov	r1, r8
   1221c:	bl	18a68 <__assert_fail@plt+0x71dc>
   12220:	cmp	r0, #0
   12224:	beq	1238c <__assert_fail@plt+0xb00>
   12228:	movw	r1, #42281	; 0xa529
   1222c:	mov	r0, #0
   12230:	mov	r2, #5
   12234:	mov	r7, #0
   12238:	movt	r1, #1
   1223c:	bl	11568 <dcgettext@plt>
   12240:	mov	r5, r0
   12244:	mov	r0, #0
   12248:	mov	r1, #3
   1224c:	mov	r2, r6
   12250:	bl	175d4 <__assert_fail@plt+0x5d48>
   12254:	mov	r3, r0
   12258:	mov	r0, #0
   1225c:	mov	r1, #0
   12260:	mov	r2, r5
   12264:	bl	1161c <error@plt>
   12268:	b	128bc <__assert_fail@plt+0x1030>
   1226c:	movw	r0, #45520	; 0xb1d0
   12270:	mov	r7, #1
   12274:	movt	r0, #2
   12278:	ldrb	r0, [r0]
   1227c:	cmp	r0, #0
   12280:	bne	122c4 <__assert_fail@plt+0xa38>
   12284:	b	128bc <__assert_fail@plt+0x1030>
   12288:	ldr	r5, [r8, #32]
   1228c:	mov	r0, #0
   12290:	mov	r1, #3
   12294:	mov	r2, r6
   12298:	bl	175d4 <__assert_fail@plt+0x5d48>
   1229c:	movw	r2, #42991	; 0xa7ef
   122a0:	mov	r3, r0
   122a4:	mov	r0, #0
   122a8:	mov	r1, r5
   122ac:	movt	r2, #1
   122b0:	bl	1161c <error@plt>
   122b4:	ldrh	r0, [r8, #56]	; 0x38
   122b8:	mov	r7, #0
   122bc:	cmp	r0, #6
   122c0:	bne	12380 <__assert_fail@plt+0xaf4>
   122c4:	cmp	r7, #0
   122c8:	beq	12380 <__assert_fail@plt+0xaf4>
   122cc:	movw	r0, #45568	; 0xb200
   122d0:	movt	r0, #2
   122d4:	ldr	r0, [r0]
   122d8:	cmp	r0, #0
   122dc:	beq	12380 <__assert_fail@plt+0xaf4>
   122e0:	ldrd	r2, [r0]
   122e4:	ldm	sl, {r1, r5}
   122e8:	eor	r3, r5, r3
   122ec:	eor	r1, r1, r2
   122f0:	orrs	r1, r1, r3
   122f4:	bne	1238c <__assert_fail@plt+0xb00>
   122f8:	ldrd	r0, [r0, #8]
   122fc:	ldrd	r2, [r4]
   12300:	eor	r1, r3, r1
   12304:	eor	r0, r2, r0
   12308:	orrs	r0, r0, r1
   1230c:	bne	1238c <__assert_fail@plt+0xb00>
   12310:	movw	r4, #44397	; 0xad6d
   12314:	mov	r0, r6
   12318:	movt	r4, #1
   1231c:	mov	r1, r4
   12320:	bl	114f0 <strcmp@plt>
   12324:	cmp	r0, #0
   12328:	beq	12834 <__assert_fail@plt+0xfa8>
   1232c:	movw	r1, #42132	; 0xa494
   12330:	mov	r0, #0
   12334:	mov	r2, #5
   12338:	movt	r1, #1
   1233c:	bl	11568 <dcgettext@plt>
   12340:	mov	r5, r0
   12344:	mov	r0, #0
   12348:	mov	r1, #4
   1234c:	mov	r2, r6
   12350:	bl	17388 <__assert_fail@plt+0x5afc>
   12354:	mov	r7, r0
   12358:	mov	r0, #1
   1235c:	mov	r1, #4
   12360:	mov	r2, r4
   12364:	bl	17388 <__assert_fail@plt+0x5afc>
   12368:	str	r0, [sp]
   1236c:	mov	r0, #0
   12370:	mov	r1, #0
   12374:	mov	r2, r5
   12378:	mov	r3, r7
   1237c:	b	12868 <__assert_fail@plt+0xfdc>
   12380:	mov	r4, #0
   12384:	cmp	r7, #0
   12388:	beq	12894 <__assert_fail@plt+0x1008>
   1238c:	movw	r0, #45521	; 0xb1d1
   12390:	movt	r0, #2
   12394:	ldrb	r0, [r0]
   12398:	cmp	r0, #1
   1239c:	bne	123d4 <__assert_fail@plt+0xb48>
   123a0:	movw	r1, #42467	; 0xa5e3
   123a4:	mov	r0, #0
   123a8:	mov	r2, #5
   123ac:	movt	r1, #1
   123b0:	bl	11568 <dcgettext@plt>
   123b4:	mov	r5, r0
   123b8:	mov	r0, #4
   123bc:	mov	r1, r6
   123c0:	bl	17430 <__assert_fail@plt+0x5ba4>
   123c4:	mov	r2, r0
   123c8:	mov	r0, #1
   123cc:	mov	r1, r5
   123d0:	bl	11730 <__printf_chk@plt>
   123d4:	ldr	r0, [sp, #24]
   123d8:	mov	r4, r9
   123dc:	ldr	r5, [r0, #32]
   123e0:	mov	r0, #0
   123e4:	str	r0, [sp, #32]
   123e8:	movw	r0, #45544	; 0xb1e8
   123ec:	movt	r0, #2
   123f0:	ldr	r7, [r0]
   123f4:	cmp	r7, #0
   123f8:	beq	12424 <__assert_fail@plt+0xb98>
   123fc:	movw	r0, #45540	; 0xb1e4
   12400:	movt	r0, #2
   12404:	ldrb	r0, [r0]
   12408:	cmp	r0, #0
   1240c:	beq	1244c <__assert_fail@plt+0xbc0>
   12410:	mov	r0, r5
   12414:	mov	r1, r4
   12418:	mov	r2, r7
   1241c:	bl	17c70 <__assert_fail@plt+0x63e4>
   12420:	b	1245c <__assert_fail@plt+0xbd0>
   12424:	movw	r0, #45540	; 0xb1e4
   12428:	movt	r0, #2
   1242c:	ldrb	r0, [r0]
   12430:	cmp	r0, #0
   12434:	beq	124cc <__assert_fail@plt+0xc40>
   12438:	mov	r0, r5
   1243c:	mov	r1, r4
   12440:	add	r2, sp, #32
   12444:	bl	17900 <__assert_fail@plt+0x6074>
   12448:	b	124dc <__assert_fail@plt+0xc50>
   1244c:	mov	r0, r5
   12450:	mov	r1, r4
   12454:	mov	r2, r7
   12458:	bl	17e28 <__assert_fail@plt+0x659c>
   1245c:	cmp	r0, #0
   12460:	beq	12750 <__assert_fail@plt+0xec4>
   12464:	bl	11700 <__errno_location@plt>
   12468:	movw	r1, #42549	; 0xa635
   1246c:	ldr	r5, [r0]
   12470:	mov	r0, #0
   12474:	mov	r2, #5
   12478:	movt	r1, #1
   1247c:	bl	11568 <dcgettext@plt>
   12480:	mov	r6, r0
   12484:	mov	r0, #0
   12488:	mov	r1, #4
   1248c:	mov	r2, r4
   12490:	bl	17388 <__assert_fail@plt+0x5afc>
   12494:	mov	sl, r0
   12498:	mov	r0, #1
   1249c:	mov	r1, r7
   124a0:	mov	r4, #1
   124a4:	bl	17758 <__assert_fail@plt+0x5ecc>
   124a8:	str	r0, [sp]
   124ac:	mov	r0, #0
   124b0:	mov	r1, r5
   124b4:	mov	r2, r6
   124b8:	mov	r3, sl
   124bc:	bl	1161c <error@plt>
   124c0:	b	12754 <__assert_fail@plt+0xec8>
   124c4:	mov	r7, #1
   124c8:	b	122bc <__assert_fail@plt+0xa30>
   124cc:	mov	r0, r5
   124d0:	mov	r1, r4
   124d4:	add	r2, sp, #32
   124d8:	bl	17ab8 <__assert_fail@plt+0x622c>
   124dc:	cmn	r0, #1
   124e0:	bgt	124f4 <__assert_fail@plt+0xc68>
   124e4:	bl	11700 <__errno_location@plt>
   124e8:	ldr	r7, [r0]
   124ec:	cmp	r7, #61	; 0x3d
   124f0:	bne	127bc <__assert_fail@plt+0xf30>
   124f4:	ldr	r7, [sp, #32]
   124f8:	cmp	r7, #0
   124fc:	beq	126ec <__assert_fail@plt+0xe60>
   12500:	mov	r0, r7
   12504:	bl	11550 <context_new@plt>
   12508:	cmp	r0, #0
   1250c:	beq	12780 <__assert_fail@plt+0xef4>
   12510:	str	r0, [sp, #16]
   12514:	movw	r0, #45524	; 0xb1d4
   12518:	mov	r9, #1
   1251c:	movt	r0, #2
   12520:	ldr	r1, [r0]
   12524:	cmp	r1, #0
   12528:	beq	1258c <__assert_fail@plt+0xd00>
   1252c:	ldr	r0, [sp, #16]
   12530:	bl	116b8 <context_user_set@plt>
   12534:	cmp	r0, #0
   12538:	beq	1258c <__assert_fail@plt+0xd00>
   1253c:	bl	11700 <__errno_location@plt>
   12540:	movw	r1, #42624	; 0xa680
   12544:	ldr	r6, [r0]
   12548:	mov	r0, #0
   1254c:	mov	r2, #5
   12550:	mov	r9, #0
   12554:	movt	r1, #1
   12558:	bl	11568 <dcgettext@plt>
   1255c:	mov	r7, r0
   12560:	movw	r0, #45524	; 0xb1d4
   12564:	movt	r0, #2
   12568:	ldr	r0, [r0]
   1256c:	bl	17768 <__assert_fail@plt+0x5edc>
   12570:	movw	r3, #42012	; 0xa41c
   12574:	str	r0, [sp]
   12578:	mov	r0, #0
   1257c:	mov	r1, r6
   12580:	mov	r2, r7
   12584:	movt	r3, #1
   12588:	bl	1161c <error@plt>
   1258c:	movw	r0, #45536	; 0xb1e0
   12590:	movt	r0, #2
   12594:	ldr	r1, [r0]
   12598:	cmp	r1, #0
   1259c:	beq	12600 <__assert_fail@plt+0xd74>
   125a0:	ldr	r0, [sp, #16]
   125a4:	bl	11814 <context_range_set@plt>
   125a8:	cmp	r0, #0
   125ac:	beq	12600 <__assert_fail@plt+0xd74>
   125b0:	bl	11700 <__errno_location@plt>
   125b4:	movw	r1, #42624	; 0xa680
   125b8:	ldr	r6, [r0]
   125bc:	mov	r0, #0
   125c0:	mov	r2, #5
   125c4:	mov	r9, #0
   125c8:	movt	r1, #1
   125cc:	bl	11568 <dcgettext@plt>
   125d0:	mov	r7, r0
   125d4:	movw	r0, #45536	; 0xb1e0
   125d8:	movt	r0, #2
   125dc:	ldr	r0, [r0]
   125e0:	bl	17768 <__assert_fail@plt+0x5edc>
   125e4:	movw	r3, #42027	; 0xa42b
   125e8:	str	r0, [sp]
   125ec:	mov	r0, #0
   125f0:	mov	r1, r6
   125f4:	mov	r2, r7
   125f8:	movt	r3, #1
   125fc:	bl	1161c <error@plt>
   12600:	movw	r0, #45528	; 0xb1d8
   12604:	movt	r0, #2
   12608:	ldr	r1, [r0]
   1260c:	cmp	r1, #0
   12610:	beq	12674 <__assert_fail@plt+0xde8>
   12614:	ldr	r0, [sp, #16]
   12618:	bl	1155c <context_role_set@plt>
   1261c:	cmp	r0, #0
   12620:	beq	12674 <__assert_fail@plt+0xde8>
   12624:	bl	11700 <__errno_location@plt>
   12628:	movw	r1, #42624	; 0xa680
   1262c:	ldr	r6, [r0]
   12630:	mov	r0, #0
   12634:	mov	r2, #5
   12638:	mov	r9, #0
   1263c:	movt	r1, #1
   12640:	bl	11568 <dcgettext@plt>
   12644:	mov	r7, r0
   12648:	movw	r0, #45528	; 0xb1d8
   1264c:	movt	r0, #2
   12650:	ldr	r0, [r0]
   12654:	bl	17768 <__assert_fail@plt+0x5edc>
   12658:	movw	r3, #42017	; 0xa421
   1265c:	str	r0, [sp]
   12660:	mov	r0, #0
   12664:	mov	r1, r6
   12668:	mov	r2, r7
   1266c:	movt	r3, #1
   12670:	bl	1161c <error@plt>
   12674:	movw	r0, #45532	; 0xb1dc
   12678:	movt	r0, #2
   1267c:	ldr	r1, [r0]
   12680:	cmp	r1, #0
   12684:	beq	12720 <__assert_fail@plt+0xe94>
   12688:	ldr	r0, [sp, #16]
   1268c:	bl	11574 <context_type_set@plt>
   12690:	cmp	r0, #0
   12694:	beq	12720 <__assert_fail@plt+0xe94>
   12698:	bl	11700 <__errno_location@plt>
   1269c:	movw	r1, #42624	; 0xa680
   126a0:	ldr	r6, [r0]
   126a4:	mov	r5, r0
   126a8:	mov	r0, #0
   126ac:	mov	r2, #5
   126b0:	movt	r1, #1
   126b4:	bl	11568 <dcgettext@plt>
   126b8:	mov	r7, r0
   126bc:	movw	r0, #45532	; 0xb1dc
   126c0:	movt	r0, #2
   126c4:	ldr	r0, [r0]
   126c8:	bl	17768 <__assert_fail@plt+0x5edc>
   126cc:	movw	r3, #42022	; 0xa426
   126d0:	str	r0, [sp]
   126d4:	mov	r0, #0
   126d8:	mov	r1, r6
   126dc:	mov	r2, r7
   126e0:	movt	r3, #1
   126e4:	bl	1161c <error@plt>
   126e8:	b	1281c <__assert_fail@plt+0xf90>
   126ec:	movw	r1, #42500	; 0xa604
   126f0:	mov	r0, #0
   126f4:	mov	r2, #5
   126f8:	movt	r1, #1
   126fc:	bl	11568 <dcgettext@plt>
   12700:	mov	r5, r0
   12704:	mov	r0, #4
   12708:	mov	r1, r4
   1270c:	bl	17430 <__assert_fail@plt+0x5ba4>
   12710:	mov	r3, r0
   12714:	mov	r0, #0
   12718:	mov	r1, #0
   1271c:	b	127ec <__assert_fail@plt+0xf60>
   12720:	cmp	r9, #0
   12724:	beq	12814 <__assert_fail@plt+0xf88>
   12728:	ldr	r0, [sp, #16]
   1272c:	bl	11820 <context_str@plt>
   12730:	ldr	r1, [sp, #32]
   12734:	mov	r7, r0
   12738:	cmp	r1, #0
   1273c:	beq	123fc <__assert_fail@plt+0xb70>
   12740:	mov	r0, r7
   12744:	bl	114f0 <strcmp@plt>
   12748:	cmp	r0, #0
   1274c:	bne	123fc <__assert_fail@plt+0xb70>
   12750:	mov	r4, #0
   12754:	movw	r0, #45544	; 0xb1e8
   12758:	movt	r0, #2
   1275c:	ldr	r0, [r0]
   12760:	cmp	r0, #0
   12764:	bne	12778 <__assert_fail@plt+0xeec>
   12768:	ldr	r0, [sp, #16]
   1276c:	bl	1167c <context_free@plt>
   12770:	ldr	r0, [sp, #32]
   12774:	bl	117fc <freecon@plt>
   12778:	eor	r4, r4, #1
   1277c:	b	12894 <__assert_fail@plt+0x1008>
   12780:	bl	11700 <__errno_location@plt>
   12784:	movw	r1, #42586	; 0xa65a
   12788:	ldr	r5, [r0]
   1278c:	mov	r0, #0
   12790:	mov	r2, #5
   12794:	movt	r1, #1
   12798:	bl	11568 <dcgettext@plt>
   1279c:	mov	r6, r0
   127a0:	mov	r0, r7
   127a4:	bl	17768 <__assert_fail@plt+0x5edc>
   127a8:	mov	r3, r0
   127ac:	mov	r0, #0
   127b0:	mov	r1, r5
   127b4:	mov	r2, r6
   127b8:	b	127f0 <__assert_fail@plt+0xf64>
   127bc:	movw	r1, #41450	; 0xa1ea
   127c0:	mov	r0, #0
   127c4:	mov	r2, #5
   127c8:	movt	r1, #1
   127cc:	bl	11568 <dcgettext@plt>
   127d0:	mov	r5, r0
   127d4:	mov	r0, #4
   127d8:	mov	r1, r4
   127dc:	bl	17430 <__assert_fail@plt+0x5ba4>
   127e0:	mov	r3, r0
   127e4:	mov	r0, #0
   127e8:	mov	r1, r7
   127ec:	mov	r2, r5
   127f0:	bl	1161c <error@plt>
   127f4:	b	1282c <__assert_fail@plt+0xfa0>
   127f8:	ldr	r0, [sp, #24]
   127fc:	mov	r7, #1
   12800:	mov	r1, r8
   12804:	mov	r2, #1
   12808:	str	r7, [r8, #16]
   1280c:	bl	14920 <__assert_fail@plt+0x3094>
   12810:	b	128bc <__assert_fail@plt+0x1030>
   12814:	bl	11700 <__errno_location@plt>
   12818:	mov	r5, r0
   1281c:	ldr	r0, [sp, #16]
   12820:	ldr	r4, [r5]
   12824:	bl	1167c <context_free@plt>
   12828:	str	r4, [r5]
   1282c:	mov	r4, #0
   12830:	b	12894 <__assert_fail@plt+0x1008>
   12834:	movw	r1, #42087	; 0xa467
   12838:	mov	r0, #0
   1283c:	mov	r2, #5
   12840:	movt	r1, #1
   12844:	bl	11568 <dcgettext@plt>
   12848:	mov	r5, r0
   1284c:	mov	r0, #4
   12850:	mov	r1, r6
   12854:	bl	17430 <__assert_fail@plt+0x5ba4>
   12858:	mov	r3, r0
   1285c:	mov	r0, #0
   12860:	mov	r1, #0
   12864:	mov	r2, r5
   12868:	bl	1161c <error@plt>
   1286c:	movw	r1, #42190	; 0xa4ce
   12870:	mov	r0, #0
   12874:	mov	r2, #5
   12878:	mov	r4, #0
   1287c:	movt	r1, #1
   12880:	bl	11568 <dcgettext@plt>
   12884:	mov	r2, r0
   12888:	mov	r0, #0
   1288c:	mov	r1, #0
   12890:	bl	1161c <error@plt>
   12894:	movw	r0, #45520	; 0xb1d0
   12898:	movt	r0, #2
   1289c:	ldrb	r0, [r0]
   128a0:	cmp	r0, #0
   128a4:	bne	128b8 <__assert_fail@plt+0x102c>
   128a8:	ldr	r0, [sp, #24]
   128ac:	mov	r1, r8
   128b0:	mov	r2, #4
   128b4:	bl	14920 <__assert_fail@plt+0x3094>
   128b8:	mov	r7, r4
   128bc:	ldr	r0, [sp, #20]
   128c0:	and	r0, r0, r7
   128c4:	mov	r7, r0
   128c8:	ldr	r0, [sp, #24]
   128cc:	bl	13548 <__assert_fail@plt+0x1cbc>
   128d0:	mov	r8, r0
   128d4:	cmp	r0, #0
   128d8:	bne	12088 <__assert_fail@plt+0x7fc>
   128dc:	b	12964 <__assert_fail@plt+0x10d8>
   128e0:	movw	r1, #42087	; 0xa467
   128e4:	mov	r0, #0
   128e8:	mov	r2, #5
   128ec:	movt	r1, #1
   128f0:	bl	11568 <dcgettext@plt>
   128f4:	mov	r5, r0
   128f8:	mov	r0, #4
   128fc:	mov	r1, r6
   12900:	bl	17430 <__assert_fail@plt+0x5ba4>
   12904:	mov	r3, r0
   12908:	mov	r0, #0
   1290c:	mov	r1, #0
   12910:	mov	r2, r5
   12914:	bl	1161c <error@plt>
   12918:	movw	r1, #42190	; 0xa4ce
   1291c:	mov	r0, #0
   12920:	mov	r2, #5
   12924:	mov	r7, #0
   12928:	movt	r1, #1
   1292c:	bl	11568 <dcgettext@plt>
   12930:	mov	r2, r0
   12934:	mov	r0, #0
   12938:	mov	r1, #0
   1293c:	bl	1161c <error@plt>
   12940:	ldr	r4, [sp, #24]
   12944:	mov	r1, r8
   12948:	mov	r2, #4
   1294c:	mov	r0, r4
   12950:	bl	14920 <__assert_fail@plt+0x3094>
   12954:	mov	r0, r4
   12958:	bl	13548 <__assert_fail@plt+0x1cbc>
   1295c:	b	128bc <__assert_fail@plt+0x1030>
   12960:	mov	r7, #1
   12964:	bl	11700 <__errno_location@plt>
   12968:	ldr	r6, [r0]
   1296c:	mov	r5, r0
   12970:	cmp	r6, #0
   12974:	beq	129a0 <__assert_fail@plt+0x1114>
   12978:	movw	r1, #42054	; 0xa446
   1297c:	mov	r0, #0
   12980:	mov	r2, #5
   12984:	mov	r7, #0
   12988:	movt	r1, #1
   1298c:	bl	11568 <dcgettext@plt>
   12990:	mov	r2, r0
   12994:	mov	r0, #0
   12998:	mov	r1, r6
   1299c:	bl	1161c <error@plt>
   129a0:	ldr	r0, [sp, #24]
   129a4:	bl	133c0 <__assert_fail@plt+0x1b34>
   129a8:	cmp	r0, #0
   129ac:	beq	129dc <__assert_fail@plt+0x1150>
   129b0:	movw	r1, #42070	; 0xa456
   129b4:	ldr	r4, [r5]
   129b8:	mov	r0, #0
   129bc:	mov	r2, #5
   129c0:	mov	r7, #0
   129c4:	movt	r1, #1
   129c8:	bl	11568 <dcgettext@plt>
   129cc:	mov	r2, r0
   129d0:	mov	r0, #0
   129d4:	mov	r1, r4
   129d8:	bl	1161c <error@plt>
   129dc:	eor	r0, r7, #1
   129e0:	sub	sp, fp, #28
   129e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129e8:	cmn	r0, #3
   129ec:	bne	12a44 <__assert_fail@plt+0x11b8>
   129f0:	movw	r0, #45416	; 0xb168
   129f4:	movw	r2, #41336	; 0xa178
   129f8:	mov	r1, #0
   129fc:	movw	r7, #41322	; 0xa16a
   12a00:	movt	r0, #2
   12a04:	movt	r2, #1
   12a08:	str	r1, [sp, #8]
   12a0c:	movw	r1, #41263	; 0xa12f
   12a10:	movt	r7, #1
   12a14:	movt	r1, #1
   12a18:	ldr	r3, [r0]
   12a1c:	movw	r0, #45508	; 0xb1c4
   12a20:	str	r2, [sp, #4]
   12a24:	movw	r2, #41308	; 0xa15c
   12a28:	str	r7, [sp]
   12a2c:	movt	r0, #2
   12a30:	movt	r2, #1
   12a34:	ldr	r0, [r0]
   12a38:	bl	184a4 <__assert_fail@plt+0x6c18>
   12a3c:	mov	r0, #0
   12a40:	bl	116ac <exit@plt>
   12a44:	cmn	r0, #2
   12a48:	bne	12afc <__assert_fail@plt+0x1270>
   12a4c:	mov	r0, #0
   12a50:	bl	11988 <__assert_fail@plt+0xfc>
   12a54:	cmp	r0, r5
   12a58:	bge	12ad8 <__assert_fail@plt+0x124c>
   12a5c:	movw	r1, #41425	; 0xa1d1
   12a60:	mov	r0, #0
   12a64:	mov	r2, #5
   12a68:	movt	r1, #1
   12a6c:	bl	11568 <dcgettext@plt>
   12a70:	mov	r6, r0
   12a74:	add	r0, r4, r5, lsl #2
   12a78:	ldr	r0, [r0, #-4]
   12a7c:	bl	17768 <__assert_fail@plt+0x5edc>
   12a80:	mov	r3, r0
   12a84:	mov	r0, #0
   12a88:	mov	r1, #0
   12a8c:	mov	r2, r6
   12a90:	bl	1161c <error@plt>
   12a94:	b	12afc <__assert_fail@plt+0x1270>
   12a98:	bl	11700 <__errno_location@plt>
   12a9c:	movw	r1, #41450	; 0xa1ea
   12aa0:	ldr	r4, [r0]
   12aa4:	mov	r0, #0
   12aa8:	mov	r2, #5
   12aac:	movt	r1, #1
   12ab0:	bl	11568 <dcgettext@plt>
   12ab4:	mov	r5, r0
   12ab8:	mov	r0, #4
   12abc:	mov	r1, r6
   12ac0:	bl	17430 <__assert_fail@plt+0x5ba4>
   12ac4:	mov	r3, r0
   12ac8:	mov	r0, #1
   12acc:	mov	r1, r4
   12ad0:	mov	r2, r5
   12ad4:	bl	1161c <error@plt>
   12ad8:	movw	r1, #41409	; 0xa1c1
   12adc:	movt	r1, #1
   12ae0:	mov	r0, #0
   12ae4:	mov	r2, #5
   12ae8:	bl	11568 <dcgettext@plt>
   12aec:	mov	r2, r0
   12af0:	mov	r0, #0
   12af4:	mov	r1, #0
   12af8:	bl	1161c <error@plt>
   12afc:	mov	r0, #1
   12b00:	bl	11988 <__assert_fail@plt+0xfc>
   12b04:	movw	r1, #41349	; 0xa185
   12b08:	movt	r1, #1
   12b0c:	b	12b18 <__assert_fail@plt+0x128c>
   12b10:	movw	r1, #41391	; 0xa1af
   12b14:	movt	r1, #1
   12b18:	mov	r0, #0
   12b1c:	mov	r2, #5
   12b20:	bl	11568 <dcgettext@plt>
   12b24:	mov	r2, r0
   12b28:	mov	r0, #1
   12b2c:	mov	r1, #0
   12b30:	bl	1161c <error@plt>
   12b34:	bl	11700 <__errno_location@plt>
   12b38:	movw	r1, #41487	; 0xa20f
   12b3c:	ldr	r4, [r0]
   12b40:	mov	r0, #0
   12b44:	mov	r2, #5
   12b48:	movt	r1, #1
   12b4c:	bl	11568 <dcgettext@plt>
   12b50:	mov	r6, r0
   12b54:	ldr	r0, [r5]
   12b58:	bl	17768 <__assert_fail@plt+0x5edc>
   12b5c:	mov	r3, r0
   12b60:	mov	r0, #1
   12b64:	mov	r1, r4
   12b68:	mov	r2, r6
   12b6c:	bl	1161c <error@plt>
   12b70:	movw	r1, #45572	; 0xb204
   12b74:	movt	r1, #2
   12b78:	str	r0, [r1]
   12b7c:	bx	lr
   12b80:	movw	r1, #45576	; 0xb208
   12b84:	movt	r1, #2
   12b88:	strb	r0, [r1]
   12b8c:	bx	lr
   12b90:	push	{r4, r5, r6, sl, fp, lr}
   12b94:	add	fp, sp, #16
   12b98:	sub	sp, sp, #8
   12b9c:	movw	r0, #45508	; 0xb1c4
   12ba0:	movt	r0, #2
   12ba4:	ldr	r0, [r0]
   12ba8:	bl	18c90 <__assert_fail@plt+0x7404>
   12bac:	cmp	r0, #0
   12bb0:	beq	12bd8 <__assert_fail@plt+0x134c>
   12bb4:	movw	r0, #45576	; 0xb208
   12bb8:	movt	r0, #2
   12bbc:	ldrb	r0, [r0]
   12bc0:	cmp	r0, #0
   12bc4:	beq	12bf8 <__assert_fail@plt+0x136c>
   12bc8:	bl	11700 <__errno_location@plt>
   12bcc:	ldr	r0, [r0]
   12bd0:	cmp	r0, #32
   12bd4:	bne	12bf8 <__assert_fail@plt+0x136c>
   12bd8:	movw	r0, #45504	; 0xb1c0
   12bdc:	movt	r0, #2
   12be0:	ldr	r0, [r0]
   12be4:	bl	18c90 <__assert_fail@plt+0x7404>
   12be8:	cmp	r0, #0
   12bec:	subeq	sp, fp, #16
   12bf0:	popeq	{r4, r5, r6, sl, fp, pc}
   12bf4:	b	12c68 <__assert_fail@plt+0x13dc>
   12bf8:	movw	r1, #42975	; 0xa7df
   12bfc:	mov	r0, #0
   12c00:	mov	r2, #5
   12c04:	movt	r1, #1
   12c08:	bl	11568 <dcgettext@plt>
   12c0c:	mov	r4, r0
   12c10:	movw	r0, #45572	; 0xb204
   12c14:	movt	r0, #2
   12c18:	ldr	r6, [r0]
   12c1c:	bl	11700 <__errno_location@plt>
   12c20:	ldr	r5, [r0]
   12c24:	cmp	r6, #0
   12c28:	bne	12c44 <__assert_fail@plt+0x13b8>
   12c2c:	movw	r2, #42991	; 0xa7ef
   12c30:	mov	r0, #0
   12c34:	mov	r1, r5
   12c38:	mov	r3, r4
   12c3c:	movt	r2, #1
   12c40:	b	12c64 <__assert_fail@plt+0x13d8>
   12c44:	mov	r0, r6
   12c48:	bl	17528 <__assert_fail@plt+0x5c9c>
   12c4c:	movw	r2, #42987	; 0xa7eb
   12c50:	mov	r3, r0
   12c54:	str	r4, [sp]
   12c58:	mov	r0, #0
   12c5c:	mov	r1, r5
   12c60:	movt	r2, #1
   12c64:	bl	1161c <error@plt>
   12c68:	movw	r0, #45420	; 0xb16c
   12c6c:	movt	r0, #2
   12c70:	ldr	r0, [r0]
   12c74:	bl	1152c <_exit@plt>
   12c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c7c:	add	fp, sp, #28
   12c80:	sub	sp, sp, #12
   12c84:	cmp	r1, #4096	; 0x1000
   12c88:	bcs	12ca4 <__assert_fail@plt+0x1418>
   12c8c:	mov	r6, r0
   12c90:	and	r0, r1, #516	; 0x204
   12c94:	mov	r5, r1
   12c98:	cmp	r0, #516	; 0x204
   12c9c:	tstne	r5, #18
   12ca0:	bne	12cc0 <__assert_fail@plt+0x1434>
   12ca4:	bl	11700 <__errno_location@plt>
   12ca8:	mov	r1, #22
   12cac:	str	r1, [r0]
   12cb0:	mov	r8, #0
   12cb4:	mov	r0, r8
   12cb8:	sub	sp, fp, #28
   12cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cc0:	mov	r0, #1
   12cc4:	mov	r1, #96	; 0x60
   12cc8:	mov	r9, r2
   12ccc:	bl	18a98 <__assert_fail@plt+0x720c>
   12cd0:	cmp	r0, #0
   12cd4:	beq	12cb0 <__assert_fail@plt+0x1424>
   12cd8:	mov	r8, r0
   12cdc:	mvn	r0, #99	; 0x63
   12ce0:	tst	r5, #2
   12ce4:	mov	r1, r5
   12ce8:	str	r0, [r8, #32]
   12cec:	bic	r0, r5, #516	; 0x204
   12cf0:	str	r9, [r8, #44]	; 0x2c
   12cf4:	orrne	r1, r0, #4
   12cf8:	str	r1, [r8, #48]	; 0x30
   12cfc:	ldr	r0, [r6]
   12d00:	cmp	r0, #0
   12d04:	beq	12d38 <__assert_fail@plt+0x14ac>
   12d08:	add	r4, r6, #4
   12d0c:	mov	r7, #0
   12d10:	bl	116dc <strlen@plt>
   12d14:	cmp	r0, r7
   12d18:	movhi	r7, r0
   12d1c:	ldr	r0, [r4], #4
   12d20:	cmp	r0, #0
   12d24:	bne	12d10 <__assert_fail@plt+0x1484>
   12d28:	add	r1, r7, #1
   12d2c:	cmp	r1, #4096	; 0x1000
   12d30:	movls	r1, #4096	; 0x1000
   12d34:	b	12d3c <__assert_fail@plt+0x14b0>
   12d38:	mov	r1, #4096	; 0x1000
   12d3c:	mov	r0, r8
   12d40:	bl	12fa0 <__assert_fail@plt+0x1714>
   12d44:	cmp	r0, #0
   12d48:	beq	12f94 <__assert_fail@plt+0x1708>
   12d4c:	ldr	r0, [r6]
   12d50:	cmp	r0, #0
   12d54:	beq	12d84 <__assert_fail@plt+0x14f8>
   12d58:	movw	r1, #41163	; 0xa0cb
   12d5c:	mov	r0, r8
   12d60:	mov	r2, #0
   12d64:	movt	r1, #1
   12d68:	bl	13014 <__assert_fail@plt+0x1788>
   12d6c:	cmp	r0, #0
   12d70:	beq	12f8c <__assert_fail@plt+0x1700>
   12d74:	mov	r4, r0
   12d78:	mvn	r0, #0
   12d7c:	str	r0, [r4, #48]	; 0x30
   12d80:	b	12d88 <__assert_fail@plt+0x14fc>
   12d84:	mov	r4, #0
   12d88:	cmp	r9, #0
   12d8c:	beq	12d9c <__assert_fail@plt+0x1510>
   12d90:	ldrb	r0, [r8, #49]	; 0x31
   12d94:	ubfx	r0, r0, #2, #1
   12d98:	b	12da0 <__assert_fail@plt+0x1514>
   12d9c:	mov	r0, #1
   12da0:	ldr	r7, [r6]
   12da4:	cmp	r7, #0
   12da8:	beq	12ec8 <__assert_fail@plt+0x163c>
   12dac:	eor	r0, r0, #1
   12db0:	and	r1, r5, #2048	; 0x800
   12db4:	mov	sl, #0
   12db8:	mov	r5, #0
   12dbc:	str	r0, [sp, #4]
   12dc0:	mov	r0, #0
   12dc4:	str	r1, [sp, #8]
   12dc8:	str	r0, [sp]
   12dcc:	mov	r0, r7
   12dd0:	bl	116dc <strlen@plt>
   12dd4:	mov	r2, r0
   12dd8:	ldr	r0, [sp, #8]
   12ddc:	cmp	r0, #0
   12de0:	bne	12e18 <__assert_fail@plt+0x158c>
   12de4:	cmp	r2, #3
   12de8:	bcc	12e18 <__assert_fail@plt+0x158c>
   12dec:	add	r0, r2, r7
   12df0:	ldrb	r0, [r0, #-1]
   12df4:	cmp	r0, #47	; 0x2f
   12df8:	bne	12e18 <__assert_fail@plt+0x158c>
   12dfc:	sub	r0, r7, #2
   12e00:	ldrb	r1, [r0, r2]
   12e04:	cmp	r1, #47	; 0x2f
   12e08:	bne	12e18 <__assert_fail@plt+0x158c>
   12e0c:	sub	r2, r2, #1
   12e10:	cmp	r2, #1
   12e14:	bhi	12e00 <__assert_fail@plt+0x1574>
   12e18:	mov	r0, r8
   12e1c:	mov	r1, r7
   12e20:	bl	13014 <__assert_fail@plt+0x1788>
   12e24:	cmp	r0, #0
   12e28:	beq	12f7c <__assert_fail@plt+0x16f0>
   12e2c:	mov	r1, #0
   12e30:	ldr	r2, [sp, #4]
   12e34:	str	r4, [r0, #4]
   12e38:	mov	r7, r0
   12e3c:	str	r1, [r0, #48]	; 0x30
   12e40:	add	r0, r0, #168	; 0xa8
   12e44:	str	r0, [r7, #24]
   12e48:	clz	r0, sl
   12e4c:	lsr	r0, r0, #5
   12e50:	orrs	r0, r2, r0
   12e54:	bne	12e68 <__assert_fail@plt+0x15dc>
   12e58:	mov	r0, #2
   12e5c:	strd	r0, [r7, #112]	; 0x70
   12e60:	mov	r0, #11
   12e64:	b	12e7c <__assert_fail@plt+0x15f0>
   12e68:	mov	r0, r8
   12e6c:	mov	r1, r7
   12e70:	mov	r2, #0
   12e74:	bl	13094 <__assert_fail@plt+0x1808>
   12e78:	mov	r1, #0
   12e7c:	cmp	r9, #0
   12e80:	strh	r0, [r7, #56]	; 0x38
   12e84:	beq	12e94 <__assert_fail@plt+0x1608>
   12e88:	str	sl, [r7, #8]
   12e8c:	mov	sl, r7
   12e90:	b	12eac <__assert_fail@plt+0x1620>
   12e94:	cmp	sl, #0
   12e98:	str	r1, [r7, #8]
   12e9c:	beq	12ec0 <__assert_fail@plt+0x1634>
   12ea0:	ldr	r0, [sp]
   12ea4:	str	r7, [sp]
   12ea8:	str	r7, [r0, #8]
   12eac:	ldr	r7, [r6, #4]!
   12eb0:	add	r5, r5, #1
   12eb4:	cmp	r7, #0
   12eb8:	bne	12dcc <__assert_fail@plt+0x1540>
   12ebc:	b	12ed0 <__assert_fail@plt+0x1644>
   12ec0:	str	r7, [sp]
   12ec4:	b	12e8c <__assert_fail@plt+0x1600>
   12ec8:	mov	sl, #0
   12ecc:	b	12ef4 <__assert_fail@plt+0x1668>
   12ed0:	cmp	r9, #0
   12ed4:	beq	12ef4 <__assert_fail@plt+0x1668>
   12ed8:	cmp	r5, #2
   12edc:	bcc	12ef4 <__assert_fail@plt+0x1668>
   12ee0:	mov	r0, r8
   12ee4:	mov	r1, sl
   12ee8:	mov	r2, r5
   12eec:	bl	131d0 <__assert_fail@plt+0x1944>
   12ef0:	mov	sl, r0
   12ef4:	movw	r1, #41163	; 0xa0cb
   12ef8:	mov	r0, r8
   12efc:	mov	r2, #0
   12f00:	movt	r1, #1
   12f04:	bl	13014 <__assert_fail@plt+0x1788>
   12f08:	cmp	r0, #0
   12f0c:	str	r0, [r8]
   12f10:	beq	12f7c <__assert_fail@plt+0x16f0>
   12f14:	mov	r1, #9
   12f18:	strh	r1, [r0, #56]	; 0x38
   12f1c:	mov	r1, #1
   12f20:	str	sl, [r0, #8]
   12f24:	str	r1, [r0, #48]	; 0x30
   12f28:	mov	r0, r8
   12f2c:	bl	132c4 <__assert_fail@plt+0x1a38>
   12f30:	cmp	r0, #0
   12f34:	beq	12f7c <__assert_fail@plt+0x16f0>
   12f38:	ldrh	r0, [r8, #48]	; 0x30
   12f3c:	tst	r0, #516	; 0x204
   12f40:	bne	12f6c <__assert_fail@plt+0x16e0>
   12f44:	movw	r1, #42995	; 0xa7f3
   12f48:	mov	r0, r8
   12f4c:	movt	r1, #1
   12f50:	bl	13350 <__assert_fail@plt+0x1ac4>
   12f54:	cmn	r0, #1
   12f58:	str	r0, [r8, #28]
   12f5c:	bgt	12f6c <__assert_fail@plt+0x16e0>
   12f60:	ldr	r0, [r8, #48]	; 0x30
   12f64:	orr	r0, r0, #4
   12f68:	str	r0, [r8, #48]	; 0x30
   12f6c:	add	r0, r8, #60	; 0x3c
   12f70:	mvn	r1, #0
   12f74:	bl	15c14 <__assert_fail@plt+0x4388>
   12f78:	b	12cb4 <__assert_fail@plt+0x1428>
   12f7c:	mov	r0, sl
   12f80:	bl	13380 <__assert_fail@plt+0x1af4>
   12f84:	mov	r0, r4
   12f88:	bl	19108 <__assert_fail@plt+0x787c>
   12f8c:	ldr	r0, [r8, #24]
   12f90:	bl	19108 <__assert_fail@plt+0x787c>
   12f94:	mov	r0, r8
   12f98:	bl	19108 <__assert_fail@plt+0x787c>
   12f9c:	b	12cb0 <__assert_fail@plt+0x1424>
   12fa0:	push	{r4, r5, fp, lr}
   12fa4:	add	fp, sp, #8
   12fa8:	mov	r4, r0
   12fac:	ldr	r0, [r0, #36]	; 0x24
   12fb0:	add	r1, r1, #256	; 0x100
   12fb4:	adds	r1, r1, r0
   12fb8:	bcc	12fdc <__assert_fail@plt+0x1750>
   12fbc:	ldr	r0, [r4, #24]
   12fc0:	bl	19108 <__assert_fail@plt+0x787c>
   12fc4:	mov	r5, #0
   12fc8:	str	r5, [r4, #24]
   12fcc:	bl	11700 <__errno_location@plt>
   12fd0:	mov	r1, #36	; 0x24
   12fd4:	str	r1, [r0]
   12fd8:	b	1300c <__assert_fail@plt+0x1780>
   12fdc:	str	r1, [r4, #36]	; 0x24
   12fe0:	ldr	r0, [r4, #24]
   12fe4:	bl	18b1c <__assert_fail@plt+0x7290>
   12fe8:	cmp	r0, #0
   12fec:	beq	12ffc <__assert_fail@plt+0x1770>
   12ff0:	mov	r5, #1
   12ff4:	str	r0, [r4, #24]
   12ff8:	b	1300c <__assert_fail@plt+0x1780>
   12ffc:	ldr	r0, [r4, #24]
   13000:	bl	19108 <__assert_fail@plt+0x787c>
   13004:	mov	r5, #0
   13008:	str	r5, [r4, #24]
   1300c:	mov	r0, r5
   13010:	pop	{r4, r5, fp, pc}
   13014:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13018:	add	fp, sp, #24
   1301c:	mov	r5, r0
   13020:	add	r0, r2, #176	; 0xb0
   13024:	mov	r6, r2
   13028:	mov	r8, r1
   1302c:	bic	r0, r0, #7
   13030:	bl	18aec <__assert_fail@plt+0x7260>
   13034:	cmp	r0, #0
   13038:	beq	13088 <__assert_fail@plt+0x17fc>
   1303c:	add	r7, r0, #168	; 0xa8
   13040:	mov	r4, r0
   13044:	mov	r1, r8
   13048:	mov	r2, r6
   1304c:	mov	r0, r7
   13050:	bl	11538 <memcpy@plt>
   13054:	mov	r0, #0
   13058:	mov	r2, #196608	; 0x30000
   1305c:	strb	r0, [r7, r6]
   13060:	str	r6, [r4, #52]	; 0x34
   13064:	str	r5, [r4, #44]	; 0x2c
   13068:	ldr	r1, [r5, #24]
   1306c:	str	r0, [r4, #12]
   13070:	str	r0, [r4, #16]
   13074:	str	r0, [r4, #20]
   13078:	str	r2, [r4, #58]	; 0x3a
   1307c:	str	r1, [r4, #28]
   13080:	str	r0, [r4, #32]
   13084:	b	1308c <__assert_fail@plt+0x1800>
   13088:	mov	r4, #0
   1308c:	mov	r0, r4
   13090:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13094:	push	{r4, r5, r6, sl, fp, lr}
   13098:	add	fp, sp, #16
   1309c:	mov	r4, r1
   130a0:	ldr	r1, [r0, #48]	; 0x30
   130a4:	ldr	r3, [r4, #48]	; 0x30
   130a8:	add	r5, r4, #64	; 0x40
   130ac:	cmp	r3, #0
   130b0:	andeq	r3, r1, #1
   130b4:	orreq	r2, r3, r2
   130b8:	cmp	r2, #0
   130bc:	andseq	r1, r1, #2
   130c0:	beq	13110 <__assert_fail@plt+0x1884>
   130c4:	ldr	r0, [r4, #24]
   130c8:	mov	r1, r5
   130cc:	bl	199c0 <__assert_fail@plt+0x8134>
   130d0:	cmp	r0, #0
   130d4:	beq	13154 <__assert_fail@plt+0x18c8>
   130d8:	bl	11700 <__errno_location@plt>
   130dc:	mov	r6, r0
   130e0:	ldr	r0, [r0]
   130e4:	cmp	r0, #2
   130e8:	bne	13138 <__assert_fail@plt+0x18ac>
   130ec:	ldr	r0, [r4, #24]
   130f0:	mov	r1, r5
   130f4:	bl	199e0 <__assert_fail@plt+0x8154>
   130f8:	cmp	r0, #0
   130fc:	bne	13134 <__assert_fail@plt+0x18a8>
   13100:	mov	r0, #0
   13104:	str	r0, [r6]
   13108:	mov	r0, #13
   1310c:	pop	{r4, r5, r6, sl, fp, pc}
   13110:	ldr	r1, [r4, #24]
   13114:	ldr	r0, [r0, #32]
   13118:	mov	r2, r5
   1311c:	mov	r3, #256	; 0x100
   13120:	bl	199f0 <__assert_fail@plt+0x8164>
   13124:	cmp	r0, #0
   13128:	beq	13154 <__assert_fail@plt+0x18c8>
   1312c:	bl	11700 <__errno_location@plt>
   13130:	mov	r6, r0
   13134:	ldr	r0, [r6]
   13138:	str	r0, [r4, #32]
   1313c:	mov	r0, r5
   13140:	mov	r1, #0
   13144:	mov	r2, #104	; 0x68
   13148:	bl	11724 <memset@plt>
   1314c:	mov	r0, #10
   13150:	pop	{r4, r5, r6, sl, fp, pc}
   13154:	ldr	r0, [r4, #80]	; 0x50
   13158:	and	r0, r0, #61440	; 0xf000
   1315c:	cmp	r0, #40960	; 0xa000
   13160:	beq	131b8 <__assert_fail@plt+0x192c>
   13164:	cmp	r0, #32768	; 0x8000
   13168:	beq	131c0 <__assert_fail@plt+0x1934>
   1316c:	cmp	r0, #16384	; 0x4000
   13170:	bne	131c8 <__assert_fail@plt+0x193c>
   13174:	ldrb	r1, [r4, #168]	; 0xa8
   13178:	mov	r0, #1
   1317c:	cmp	r1, #46	; 0x2e
   13180:	bne	131cc <__assert_fail@plt+0x1940>
   13184:	ldrb	r1, [r4, #169]	; 0xa9
   13188:	cmp	r1, #0
   1318c:	beq	131a4 <__assert_fail@plt+0x1918>
   13190:	cmp	r1, #46	; 0x2e
   13194:	bne	131cc <__assert_fail@plt+0x1940>
   13198:	ldrb	r1, [r4, #170]	; 0xaa
   1319c:	cmp	r1, #0
   131a0:	popne	{r4, r5, r6, sl, fp, pc}
   131a4:	ldr	r1, [r4, #48]	; 0x30
   131a8:	mov	r0, #5
   131ac:	cmp	r1, #0
   131b0:	movweq	r0, #1
   131b4:	pop	{r4, r5, r6, sl, fp, pc}
   131b8:	mov	r0, #12
   131bc:	pop	{r4, r5, r6, sl, fp, pc}
   131c0:	mov	r0, #8
   131c4:	pop	{r4, r5, r6, sl, fp, pc}
   131c8:	mov	r0, #3
   131cc:	pop	{r4, r5, r6, sl, fp, pc}
   131d0:	push	{r4, r5, r6, r7, fp, lr}
   131d4:	add	fp, sp, #16
   131d8:	mov	r6, r0
   131dc:	ldr	r7, [r0, #44]	; 0x2c
   131e0:	ldr	r0, [r0, #40]	; 0x28
   131e4:	mov	r5, r2
   131e8:	mov	r4, r1
   131ec:	cmp	r0, r2
   131f0:	bcs	13220 <__assert_fail@plt+0x1994>
   131f4:	add	r1, r5, #40	; 0x28
   131f8:	cmn	r1, #-1073741823	; 0xc0000001
   131fc:	str	r1, [r6, #40]	; 0x28
   13200:	bhi	13294 <__assert_fail@plt+0x1a08>
   13204:	ldr	r0, [r6, #8]
   13208:	lsl	r1, r1, #2
   1320c:	bl	18b1c <__assert_fail@plt+0x7290>
   13210:	cmp	r0, #0
   13214:	beq	13294 <__assert_fail@plt+0x1a08>
   13218:	str	r0, [r6, #8]
   1321c:	b	13224 <__assert_fail@plt+0x1998>
   13220:	ldr	r0, [r6, #8]
   13224:	cmp	r4, #0
   13228:	beq	13240 <__assert_fail@plt+0x19b4>
   1322c:	str	r4, [r0], #4
   13230:	ldr	r4, [r4, #8]
   13234:	cmp	r4, #0
   13238:	bne	1322c <__assert_fail@plt+0x19a0>
   1323c:	ldr	r0, [r6, #8]
   13240:	mov	r1, r5
   13244:	mov	r2, #4
   13248:	mov	r3, r7
   1324c:	bl	117f0 <qsort@plt>
   13250:	ldr	r0, [r6, #8]
   13254:	cmp	r5, #1
   13258:	ldr	r4, [r0]
   1325c:	mov	r1, r4
   13260:	beq	132b4 <__assert_fail@plt+0x1a28>
   13264:	ldr	r1, [r0, #4]!
   13268:	str	r1, [r4, #8]
   1326c:	subs	r1, r5, #2
   13270:	beq	132ac <__assert_fail@plt+0x1a20>
   13274:	mov	r2, r0
   13278:	ldr	r3, [r2, #4]!
   1327c:	ldr	r0, [r0]
   13280:	subs	r1, r1, #1
   13284:	str	r3, [r0, #8]
   13288:	mov	r0, r2
   1328c:	bne	13278 <__assert_fail@plt+0x19ec>
   13290:	b	132b0 <__assert_fail@plt+0x1a24>
   13294:	ldr	r0, [r6, #8]
   13298:	bl	19108 <__assert_fail@plt+0x787c>
   1329c:	mov	r0, #0
   132a0:	str	r0, [r6, #40]	; 0x28
   132a4:	str	r0, [r6, #8]
   132a8:	b	132bc <__assert_fail@plt+0x1a30>
   132ac:	mov	r2, r0
   132b0:	ldr	r1, [r2]
   132b4:	mov	r0, #0
   132b8:	str	r0, [r1, #8]
   132bc:	mov	r0, r4
   132c0:	pop	{r4, r5, r6, r7, fp, pc}
   132c4:	push	{r4, r5, fp, lr}
   132c8:	add	fp, sp, #8
   132cc:	sub	sp, sp, #8
   132d0:	mov	r4, r0
   132d4:	ldrh	r0, [r0, #48]	; 0x30
   132d8:	movw	r1, #258	; 0x102
   132dc:	tst	r0, r1
   132e0:	beq	13320 <__assert_fail@plt+0x1a94>
   132e4:	movw	r0, #37128	; 0x9108
   132e8:	movw	r2, #19128	; 0x4ab8
   132ec:	movw	r3, #19160	; 0x4ad8
   132f0:	mov	r1, #0
   132f4:	mov	r5, #0
   132f8:	movt	r0, #1
   132fc:	movt	r2, #1
   13300:	movt	r3, #1
   13304:	str	r0, [sp]
   13308:	mov	r0, #31
   1330c:	bl	15144 <__assert_fail@plt+0x38b8>
   13310:	cmp	r0, #0
   13314:	str	r0, [r4, #56]	; 0x38
   13318:	movne	r5, #1
   1331c:	b	13344 <__assert_fail@plt+0x1ab8>
   13320:	mov	r0, #32
   13324:	bl	18aec <__assert_fail@plt+0x7260>
   13328:	cmp	r0, #0
   1332c:	str	r0, [r4, #56]	; 0x38
   13330:	beq	13340 <__assert_fail@plt+0x1ab4>
   13334:	bl	18d10 <__assert_fail@plt+0x7484>
   13338:	mov	r5, #1
   1333c:	b	13344 <__assert_fail@plt+0x1ab8>
   13340:	mov	r5, #0
   13344:	mov	r0, r5
   13348:	sub	sp, fp, #8
   1334c:	pop	{r4, r5, fp, pc}
   13350:	ldr	r3, [r0, #48]	; 0x30
   13354:	mov	r2, #32768	; 0x8000
   13358:	and	r2, r2, r3, lsl #11
   1335c:	tst	r3, #512	; 0x200
   13360:	orr	r2, r2, #18688	; 0x4900
   13364:	orr	r2, r2, #524288	; 0x80000
   13368:	bne	13378 <__assert_fail@plt+0x1aec>
   1336c:	mov	r0, r1
   13370:	mov	r1, r2
   13374:	b	19070 <__assert_fail@plt+0x77e4>
   13378:	ldr	r0, [r0, #32]
   1337c:	b	15ce4 <__assert_fail@plt+0x4458>
   13380:	push	{r4, r6, r7, sl, fp, lr}
   13384:	add	fp, sp, #16
   13388:	cmp	r0, #0
   1338c:	beq	133bc <__assert_fail@plt+0x1b30>
   13390:	mov	r4, r0
   13394:	ldrd	r6, [r4, #8]
   13398:	cmp	r7, #0
   1339c:	beq	133a8 <__assert_fail@plt+0x1b1c>
   133a0:	mov	r0, r7
   133a4:	bl	11874 <closedir@plt>
   133a8:	mov	r0, r4
   133ac:	bl	19108 <__assert_fail@plt+0x787c>
   133b0:	cmp	r6, #0
   133b4:	mov	r4, r6
   133b8:	bne	13394 <__assert_fail@plt+0x1b08>
   133bc:	pop	{r4, r6, r7, sl, fp, pc}
   133c0:	push	{r4, r5, fp, lr}
   133c4:	add	fp, sp, #8
   133c8:	mov	r4, r0
   133cc:	ldr	r0, [r0]
   133d0:	cmp	r0, #0
   133d4:	beq	13414 <__assert_fail@plt+0x1b88>
   133d8:	ldr	r1, [r0, #48]	; 0x30
   133dc:	cmp	r1, #0
   133e0:	bmi	13408 <__assert_fail@plt+0x1b7c>
   133e4:	ldr	r5, [r0, #8]
   133e8:	cmp	r5, #0
   133ec:	ldreq	r5, [r0, #4]
   133f0:	bl	19108 <__assert_fail@plt+0x787c>
   133f4:	ldr	r0, [r5, #48]	; 0x30
   133f8:	cmn	r0, #1
   133fc:	mov	r0, r5
   13400:	bgt	133e4 <__assert_fail@plt+0x1b58>
   13404:	b	1340c <__assert_fail@plt+0x1b80>
   13408:	mov	r5, r0
   1340c:	mov	r0, r5
   13410:	bl	19108 <__assert_fail@plt+0x787c>
   13414:	ldr	r0, [r4, #4]
   13418:	cmp	r0, #0
   1341c:	blne	13380 <__assert_fail@plt+0x1af4>
   13420:	ldr	r0, [r4, #8]
   13424:	bl	19108 <__assert_fail@plt+0x787c>
   13428:	ldr	r0, [r4, #24]
   1342c:	bl	19108 <__assert_fail@plt+0x787c>
   13430:	ldr	r0, [r4, #48]	; 0x30
   13434:	tst	r0, #512	; 0x200
   13438:	bne	13464 <__assert_fail@plt+0x1bd8>
   1343c:	mov	r5, #0
   13440:	tst	r0, #4
   13444:	bne	134a0 <__assert_fail@plt+0x1c14>
   13448:	ldr	r0, [r4, #28]
   1344c:	bl	117e4 <fchdir@plt>
   13450:	cmp	r0, #0
   13454:	beq	1347c <__assert_fail@plt+0x1bf0>
   13458:	bl	11700 <__errno_location@plt>
   1345c:	ldr	r5, [r0]
   13460:	b	13480 <__assert_fail@plt+0x1bf4>
   13464:	ldr	r0, [r4, #32]
   13468:	mov	r5, #0
   1346c:	cmp	r0, #0
   13470:	bmi	134a0 <__assert_fail@plt+0x1c14>
   13474:	bl	1185c <close@plt>
   13478:	b	13490 <__assert_fail@plt+0x1c04>
   1347c:	mov	r5, #0
   13480:	ldr	r0, [r4, #28]
   13484:	bl	1185c <close@plt>
   13488:	cmp	r5, #0
   1348c:	bne	134a0 <__assert_fail@plt+0x1c14>
   13490:	cmp	r0, #0
   13494:	beq	134a0 <__assert_fail@plt+0x1c14>
   13498:	bl	11700 <__errno_location@plt>
   1349c:	ldr	r5, [r0]
   134a0:	add	r0, r4, #60	; 0x3c
   134a4:	bl	134e8 <__assert_fail@plt+0x1c5c>
   134a8:	ldr	r0, [r4, #52]	; 0x34
   134ac:	cmp	r0, #0
   134b0:	beq	134b8 <__assert_fail@plt+0x1c2c>
   134b4:	bl	15470 <__assert_fail@plt+0x3be4>
   134b8:	mov	r0, r4
   134bc:	bl	13520 <__assert_fail@plt+0x1c94>
   134c0:	mov	r0, r4
   134c4:	bl	19108 <__assert_fail@plt+0x787c>
   134c8:	cmp	r5, #0
   134cc:	beq	134e0 <__assert_fail@plt+0x1c54>
   134d0:	bl	11700 <__errno_location@plt>
   134d4:	str	r5, [r0]
   134d8:	mvn	r0, #0
   134dc:	pop	{r4, r5, fp, pc}
   134e0:	mov	r0, #0
   134e4:	pop	{r4, r5, fp, pc}
   134e8:	push	{r4, sl, fp, lr}
   134ec:	add	fp, sp, #8
   134f0:	mov	r4, r0
   134f4:	bl	15c38 <__assert_fail@plt+0x43ac>
   134f8:	cmp	r0, #0
   134fc:	bne	1351c <__assert_fail@plt+0x1c90>
   13500:	mov	r0, r4
   13504:	bl	15c8c <__assert_fail@plt+0x4400>
   13508:	cmp	r0, #0
   1350c:	bmi	13514 <__assert_fail@plt+0x1c88>
   13510:	bl	1185c <close@plt>
   13514:	mov	r0, r4
   13518:	b	134f4 <__assert_fail@plt+0x1c68>
   1351c:	pop	{r4, sl, fp, pc}
   13520:	ldrh	r1, [r0, #48]	; 0x30
   13524:	movw	r2, #258	; 0x102
   13528:	tst	r1, r2
   1352c:	beq	13540 <__assert_fail@plt+0x1cb4>
   13530:	ldr	r0, [r0, #56]	; 0x38
   13534:	cmp	r0, #0
   13538:	bxeq	lr
   1353c:	b	15470 <__assert_fail@plt+0x3be4>
   13540:	ldr	r0, [r0, #56]	; 0x38
   13544:	b	19108 <__assert_fail@plt+0x787c>
   13548:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1354c:	add	fp, sp, #24
   13550:	ldr	r6, [r0]
   13554:	mov	r5, #0
   13558:	cmp	r6, #0
   1355c:	beq	13b4c <__assert_fail@plt+0x22c0>
   13560:	ldr	r1, [r0, #48]	; 0x30
   13564:	mov	r4, r0
   13568:	tst	r1, #8192	; 0x2000
   1356c:	bne	13b4c <__assert_fail@plt+0x22c0>
   13570:	ldrh	r0, [r6, #60]	; 0x3c
   13574:	mov	r2, #3
   13578:	strh	r2, [r6, #60]	; 0x3c
   1357c:	cmp	r0, #1
   13580:	beq	135f0 <__assert_fail@plt+0x1d64>
   13584:	cmp	r0, #2
   13588:	bne	13608 <__assert_fail@plt+0x1d7c>
   1358c:	ldrh	r2, [r6, #56]	; 0x38
   13590:	bic	r3, r2, #1
   13594:	cmp	r3, #12
   13598:	bne	1360c <__assert_fail@plt+0x1d80>
   1359c:	mov	r0, r4
   135a0:	mov	r1, r6
   135a4:	mov	r2, #1
   135a8:	bl	13094 <__assert_fail@plt+0x1808>
   135ac:	cmp	r0, #1
   135b0:	strh	r0, [r6, #56]	; 0x38
   135b4:	bne	139a0 <__assert_fail@plt+0x2114>
   135b8:	ldrb	r0, [r4, #48]	; 0x30
   135bc:	tst	r0, #4
   135c0:	bne	139a0 <__assert_fail@plt+0x2114>
   135c4:	movw	r1, #42995	; 0xa7f3
   135c8:	mov	r0, r4
   135cc:	movt	r1, #1
   135d0:	bl	13350 <__assert_fail@plt+0x1ac4>
   135d4:	cmn	r0, #1
   135d8:	str	r0, [r6, #36]	; 0x24
   135dc:	ble	1398c <__assert_fail@plt+0x2100>
   135e0:	ldrh	r0, [r6, #58]	; 0x3a
   135e4:	orr	r0, r0, #2
   135e8:	strh	r0, [r6, #58]	; 0x3a
   135ec:	b	139a0 <__assert_fail@plt+0x2114>
   135f0:	mov	r0, r4
   135f4:	mov	r1, r6
   135f8:	mov	r2, #0
   135fc:	bl	13094 <__assert_fail@plt+0x1808>
   13600:	strh	r0, [r6, #56]	; 0x38
   13604:	b	1365c <__assert_fail@plt+0x1dd0>
   13608:	ldrh	r2, [r6, #56]	; 0x38
   1360c:	cmp	r2, #1
   13610:	bne	13664 <__assert_fail@plt+0x1dd8>
   13614:	cmp	r0, #4
   13618:	bne	136f4 <__assert_fail@plt+0x1e68>
   1361c:	ldrb	r0, [r6, #58]	; 0x3a
   13620:	tst	r0, #2
   13624:	beq	13630 <__assert_fail@plt+0x1da4>
   13628:	ldr	r0, [r6, #36]	; 0x24
   1362c:	bl	1185c <close@plt>
   13630:	ldr	r0, [r4, #4]
   13634:	cmp	r0, #0
   13638:	beq	13648 <__assert_fail@plt+0x1dbc>
   1363c:	bl	13380 <__assert_fail@plt+0x1af4>
   13640:	mov	r0, #0
   13644:	str	r0, [r4, #4]
   13648:	mov	r0, #6
   1364c:	strh	r0, [r6, #56]	; 0x38
   13650:	mov	r0, r4
   13654:	mov	r1, r6
   13658:	bl	13b58 <__assert_fail@plt+0x22cc>
   1365c:	mov	r5, r6
   13660:	b	13b4c <__assert_fail@plt+0x22c0>
   13664:	ldr	r5, [r6, #8]
   13668:	cmp	r5, #0
   1366c:	beq	1378c <__assert_fail@plt+0x1f00>
   13670:	mov	r0, r6
   13674:	str	r5, [r4]
   13678:	bl	19108 <__assert_fail@plt+0x787c>
   1367c:	ldr	r0, [r5, #48]	; 0x30
   13680:	cmp	r0, #0
   13684:	beq	137d8 <__assert_fail@plt+0x1f4c>
   13688:	ldrh	r0, [r5, #60]	; 0x3c
   1368c:	mov	r6, r5
   13690:	cmp	r0, #4
   13694:	beq	13664 <__assert_fail@plt+0x1dd8>
   13698:	cmp	r0, #2
   1369c:	bne	13a34 <__assert_fail@plt+0x21a8>
   136a0:	mov	r0, r4
   136a4:	mov	r1, r5
   136a8:	mov	r2, #1
   136ac:	bl	13094 <__assert_fail@plt+0x1808>
   136b0:	cmp	r0, #1
   136b4:	strh	r0, [r5, #56]	; 0x38
   136b8:	bne	13a2c <__assert_fail@plt+0x21a0>
   136bc:	ldrb	r0, [r4, #48]	; 0x30
   136c0:	tst	r0, #4
   136c4:	bne	13a2c <__assert_fail@plt+0x21a0>
   136c8:	movw	r1, #42995	; 0xa7f3
   136cc:	mov	r0, r4
   136d0:	movt	r1, #1
   136d4:	bl	13350 <__assert_fail@plt+0x1ac4>
   136d8:	cmn	r0, #1
   136dc:	str	r0, [r5, #36]	; 0x24
   136e0:	ble	13a18 <__assert_fail@plt+0x218c>
   136e4:	ldrh	r0, [r5, #58]	; 0x3a
   136e8:	orr	r0, r0, #2
   136ec:	strh	r0, [r5, #58]	; 0x3a
   136f0:	b	13a2c <__assert_fail@plt+0x21a0>
   136f4:	tst	r1, #64	; 0x40
   136f8:	beq	1371c <__assert_fail@plt+0x1e90>
   136fc:	ldr	r0, [r4, #16]
   13700:	ldr	r2, [r6, #64]	; 0x40
   13704:	ldr	r3, [r4, #20]
   13708:	ldr	r5, [r6, #68]	; 0x44
   1370c:	eor	r3, r5, r3
   13710:	eor	r0, r2, r0
   13714:	orrs	r0, r0, r3
   13718:	bne	1361c <__assert_fail@plt+0x1d90>
   1371c:	ldr	r0, [r4, #4]
   13720:	cmp	r0, #0
   13724:	beq	13898 <__assert_fail@plt+0x200c>
   13728:	tst	r1, #4096	; 0x1000
   1372c:	bne	13884 <__assert_fail@plt+0x1ff8>
   13730:	ldr	r3, [r6, #24]
   13734:	mov	r0, r4
   13738:	mov	r1, r6
   1373c:	mvn	r2, #0
   13740:	bl	13c30 <__assert_fail@plt+0x23a4>
   13744:	cmp	r0, #0
   13748:	beq	138b0 <__assert_fail@plt+0x2024>
   1374c:	bl	11700 <__errno_location@plt>
   13750:	ldr	r0, [r0]
   13754:	str	r0, [r6, #32]
   13758:	ldrh	r0, [r6, #58]	; 0x3a
   1375c:	orr	r0, r0, #1
   13760:	strh	r0, [r6, #58]	; 0x3a
   13764:	ldr	r0, [r4, #4]
   13768:	cmp	r0, #0
   1376c:	beq	138b0 <__assert_fail@plt+0x2024>
   13770:	ldmib	r0, {r1, r2}
   13774:	cmp	r2, #0
   13778:	ldr	r1, [r1, #24]
   1377c:	str	r1, [r0, #24]
   13780:	mov	r0, r2
   13784:	bne	13770 <__assert_fail@plt+0x1ee4>
   13788:	b	138b0 <__assert_fail@plt+0x2024>
   1378c:	ldr	r5, [r6, #4]
   13790:	ldr	r0, [r5, #12]
   13794:	cmp	r0, #0
   13798:	beq	13900 <__assert_fail@plt+0x2074>
   1379c:	str	r5, [r4]
   137a0:	ldr	r1, [r5, #40]	; 0x28
   137a4:	ldr	r0, [r4, #24]
   137a8:	mov	r5, #0
   137ac:	strb	r5, [r0, r1]
   137b0:	mov	r0, r4
   137b4:	mov	r1, #3
   137b8:	bl	13e10 <__assert_fail@plt+0x2584>
   137bc:	cmp	r0, #0
   137c0:	beq	138f0 <__assert_fail@plt+0x2064>
   137c4:	mov	r7, r0
   137c8:	mov	r0, r6
   137cc:	bl	19108 <__assert_fail@plt+0x787c>
   137d0:	mov	r5, r7
   137d4:	b	13a34 <__assert_fail@plt+0x21a8>
   137d8:	mov	r0, r4
   137dc:	bl	147a0 <__assert_fail@plt+0x2f14>
   137e0:	cmp	r0, #0
   137e4:	beq	137fc <__assert_fail@plt+0x1f70>
   137e8:	ldr	r0, [r4, #48]	; 0x30
   137ec:	mov	r5, #0
   137f0:	orr	r0, r0, #8192	; 0x2000
   137f4:	str	r0, [r4, #48]	; 0x30
   137f8:	b	13b4c <__assert_fail@plt+0x22c0>
   137fc:	mov	r0, r4
   13800:	bl	13520 <__assert_fail@plt+0x1c94>
   13804:	ldr	r1, [r5, #52]	; 0x34
   13808:	add	r6, r5, #168	; 0xa8
   1380c:	str	r1, [r5, #40]	; 0x28
   13810:	add	r2, r1, #1
   13814:	mov	r1, r6
   13818:	ldr	r0, [r4, #24]
   1381c:	bl	11514 <memmove@plt>
   13820:	mov	r0, r6
   13824:	mov	r1, #47	; 0x2f
   13828:	bl	117a8 <strrchr@plt>
   1382c:	cmp	r0, #0
   13830:	beq	1386c <__assert_fail@plt+0x1fe0>
   13834:	cmp	r0, r6
   13838:	bne	13848 <__assert_fail@plt+0x1fbc>
   1383c:	ldrb	r1, [r5, #169]	; 0xa9
   13840:	cmp	r1, #0
   13844:	beq	1386c <__assert_fail@plt+0x1fe0>
   13848:	add	r7, r0, #1
   1384c:	mov	r0, r7
   13850:	bl	116dc <strlen@plt>
   13854:	mov	r8, r0
   13858:	add	r2, r0, #1
   1385c:	mov	r0, r6
   13860:	mov	r1, r7
   13864:	bl	11514 <memmove@plt>
   13868:	str	r8, [r5, #52]	; 0x34
   1386c:	ldr	r0, [r4, #24]
   13870:	str	r0, [r5, #24]
   13874:	str	r0, [r5, #28]
   13878:	mov	r0, r4
   1387c:	bl	132c4 <__assert_fail@plt+0x1a38>
   13880:	b	13a70 <__assert_fail@plt+0x21e4>
   13884:	bic	r1, r1, #4096	; 0x1000
   13888:	str	r1, [r4, #48]	; 0x30
   1388c:	bl	13380 <__assert_fail@plt+0x1af4>
   13890:	mov	r0, #0
   13894:	str	r0, [r4, #4]
   13898:	mov	r0, r4
   1389c:	mov	r1, #3
   138a0:	bl	13e10 <__assert_fail@plt+0x2584>
   138a4:	cmp	r0, #0
   138a8:	str	r0, [r4, #4]
   138ac:	beq	138c0 <__assert_fail@plt+0x2034>
   138b0:	ldr	r5, [r4, #4]
   138b4:	mov	r0, #0
   138b8:	str	r0, [r4, #4]
   138bc:	b	13a34 <__assert_fail@plt+0x21a8>
   138c0:	ldrb	r0, [r4, #49]	; 0x31
   138c4:	mov	r5, #0
   138c8:	tst	r0, #32
   138cc:	bne	13b4c <__assert_fail@plt+0x22c0>
   138d0:	ldr	r0, [r6, #32]
   138d4:	cmp	r0, #0
   138d8:	beq	13650 <__assert_fail@plt+0x1dc4>
   138dc:	ldrh	r0, [r6, #56]	; 0x38
   138e0:	cmp	r0, #4
   138e4:	beq	13650 <__assert_fail@plt+0x1dc4>
   138e8:	mov	r0, #7
   138ec:	b	1364c <__assert_fail@plt+0x1dc0>
   138f0:	ldrb	r0, [r4, #49]	; 0x31
   138f4:	tst	r0, #32
   138f8:	bne	13b4c <__assert_fail@plt+0x22c0>
   138fc:	ldr	r5, [r6, #4]
   13900:	mov	r0, r6
   13904:	str	r5, [r4]
   13908:	bl	19108 <__assert_fail@plt+0x787c>
   1390c:	ldr	r0, [r5, #48]	; 0x30
   13910:	cmn	r0, #1
   13914:	beq	13970 <__assert_fail@plt+0x20e4>
   13918:	ldrh	r0, [r5, #56]	; 0x38
   1391c:	cmp	r0, #11
   13920:	beq	13b54 <__assert_fail@plt+0x22c8>
   13924:	ldr	r0, [r5, #40]	; 0x28
   13928:	ldr	r1, [r4, #24]
   1392c:	mov	r2, #0
   13930:	strb	r2, [r1, r0]
   13934:	ldr	r0, [r5, #48]	; 0x30
   13938:	cmp	r0, #0
   1393c:	beq	139a8 <__assert_fail@plt+0x211c>
   13940:	ldrh	r0, [r5, #58]	; 0x3a
   13944:	tst	r0, #2
   13948:	bne	139d4 <__assert_fail@plt+0x2148>
   1394c:	tst	r0, #1
   13950:	bne	13b10 <__assert_fail@plt+0x2284>
   13954:	ldr	r1, [r5, #4]
   13958:	movw	r3, #42994	; 0xa7f2
   1395c:	mov	r0, r4
   13960:	mvn	r2, #0
   13964:	movt	r3, #1
   13968:	bl	13c30 <__assert_fail@plt+0x23a4>
   1396c:	b	139b0 <__assert_fail@plt+0x2124>
   13970:	mov	r0, r5
   13974:	bl	19108 <__assert_fail@plt+0x787c>
   13978:	bl	11700 <__errno_location@plt>
   1397c:	mov	r5, #0
   13980:	str	r5, [r0]
   13984:	str	r5, [r4]
   13988:	b	13b4c <__assert_fail@plt+0x22c0>
   1398c:	bl	11700 <__errno_location@plt>
   13990:	ldr	r0, [r0]
   13994:	mov	r1, #7
   13998:	strh	r1, [r6, #56]	; 0x38
   1399c:	str	r0, [r6, #32]
   139a0:	mov	r5, r6
   139a4:	b	13a70 <__assert_fail@plt+0x21e4>
   139a8:	mov	r0, r4
   139ac:	bl	147a0 <__assert_fail@plt+0x2f14>
   139b0:	cmp	r0, #0
   139b4:	beq	13b10 <__assert_fail@plt+0x2284>
   139b8:	bl	11700 <__errno_location@plt>
   139bc:	ldr	r0, [r0]
   139c0:	str	r0, [r5, #32]
   139c4:	ldr	r0, [r4, #48]	; 0x30
   139c8:	orr	r0, r0, #8192	; 0x2000
   139cc:	str	r0, [r4, #48]	; 0x30
   139d0:	b	13b10 <__assert_fail@plt+0x2284>
   139d4:	ldr	r0, [r4, #48]	; 0x30
   139d8:	tst	r0, #4
   139dc:	bne	13b08 <__assert_fail@plt+0x227c>
   139e0:	ldr	r1, [r5, #36]	; 0x24
   139e4:	tst	r0, #512	; 0x200
   139e8:	bne	13afc <__assert_fail@plt+0x2270>
   139ec:	mov	r0, r1
   139f0:	bl	117e4 <fchdir@plt>
   139f4:	cmp	r0, #0
   139f8:	beq	13b08 <__assert_fail@plt+0x227c>
   139fc:	bl	11700 <__errno_location@plt>
   13a00:	ldr	r0, [r0]
   13a04:	str	r0, [r5, #32]
   13a08:	ldr	r0, [r4, #48]	; 0x30
   13a0c:	orr	r0, r0, #8192	; 0x2000
   13a10:	str	r0, [r4, #48]	; 0x30
   13a14:	b	13b08 <__assert_fail@plt+0x227c>
   13a18:	bl	11700 <__errno_location@plt>
   13a1c:	ldr	r0, [r0]
   13a20:	mov	r1, #7
   13a24:	strh	r1, [r5, #56]	; 0x38
   13a28:	str	r0, [r5, #32]
   13a2c:	mov	r0, #3
   13a30:	strh	r0, [r5, #60]	; 0x3c
   13a34:	ldr	r0, [r5, #4]
   13a38:	ldr	r1, [r0, #28]
   13a3c:	ldr	r0, [r0, #40]	; 0x28
   13a40:	sub	r2, r0, #1
   13a44:	ldrb	r1, [r1, r2]
   13a48:	cmp	r1, #47	; 0x2f
   13a4c:	ldr	r1, [r4, #24]
   13a50:	moveq	r0, r2
   13a54:	mov	r2, #47	; 0x2f
   13a58:	strb	r2, [r1, r0]!
   13a5c:	ldr	r2, [r5, #52]	; 0x34
   13a60:	add	r0, r1, #1
   13a64:	add	r1, r5, #168	; 0xa8
   13a68:	add	r2, r2, #1
   13a6c:	bl	11514 <memmove@plt>
   13a70:	str	r5, [r4]
   13a74:	ldrh	r0, [r5, #56]	; 0x38
   13a78:	cmp	r0, #11
   13a7c:	bne	13ab4 <__assert_fail@plt+0x2228>
   13a80:	add	r0, r5, #112	; 0x70
   13a84:	ldrd	r0, [r0]
   13a88:	eor	r2, r0, #1
   13a8c:	orrs	r2, r2, r1
   13a90:	beq	13b4c <__assert_fail@plt+0x22c0>
   13a94:	eor	r0, r0, #2
   13a98:	orrs	r0, r0, r1
   13a9c:	bne	13b54 <__assert_fail@plt+0x22c8>
   13aa0:	mov	r0, r4
   13aa4:	mov	r1, r5
   13aa8:	mov	r2, #0
   13aac:	bl	13094 <__assert_fail@plt+0x1808>
   13ab0:	strh	r0, [r5, #56]	; 0x38
   13ab4:	cmp	r0, #1
   13ab8:	bne	13b4c <__assert_fail@plt+0x22c0>
   13abc:	ldr	r0, [r5, #48]	; 0x30
   13ac0:	cmp	r0, #0
   13ac4:	bne	13ad4 <__assert_fail@plt+0x2248>
   13ac8:	add	r0, r5, #64	; 0x40
   13acc:	ldrd	r0, [r0]
   13ad0:	strd	r0, [r4, #16]
   13ad4:	mov	r0, r4
   13ad8:	mov	r1, r5
   13adc:	bl	147fc <__assert_fail@plt+0x2f70>
   13ae0:	cmp	r0, #0
   13ae4:	bne	13b4c <__assert_fail@plt+0x22c0>
   13ae8:	bl	11700 <__errno_location@plt>
   13aec:	mov	r1, #12
   13af0:	mov	r5, #0
   13af4:	str	r1, [r0]
   13af8:	b	13b4c <__assert_fail@plt+0x22c0>
   13afc:	mov	r0, r4
   13b00:	mov	r2, #1
   13b04:	bl	148b8 <__assert_fail@plt+0x302c>
   13b08:	ldr	r0, [r5, #36]	; 0x24
   13b0c:	bl	1185c <close@plt>
   13b10:	ldrh	r0, [r5, #56]	; 0x38
   13b14:	cmp	r0, #2
   13b18:	beq	13b40 <__assert_fail@plt+0x22b4>
   13b1c:	ldr	r0, [r5, #32]
   13b20:	mov	r1, #7
   13b24:	cmp	r0, #0
   13b28:	movweq	r1, #6
   13b2c:	strh	r1, [r5, #56]	; 0x38
   13b30:	bne	13b40 <__assert_fail@plt+0x22b4>
   13b34:	mov	r0, r4
   13b38:	mov	r1, r5
   13b3c:	bl	13b58 <__assert_fail@plt+0x22cc>
   13b40:	ldrb	r0, [r4, #49]	; 0x31
   13b44:	tst	r0, #32
   13b48:	movne	r5, #0
   13b4c:	mov	r0, r5
   13b50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b54:	bl	11850 <abort@plt>
   13b58:	push	{r4, r5, r7, sl, fp, lr}
   13b5c:	add	fp, sp, #16
   13b60:	sub	sp, sp, #24
   13b64:	ldrh	r2, [r0, #48]	; 0x30
   13b68:	movw	r3, #258	; 0x102
   13b6c:	add	lr, r1, #64	; 0x40
   13b70:	add	r4, r1, #160	; 0xa0
   13b74:	tst	r2, r3
   13b78:	beq	13bb0 <__assert_fail@plt+0x2324>
   13b7c:	ldrd	r2, [lr]
   13b80:	mov	r1, sp
   13b84:	stm	sp, {r2, r3}
   13b88:	ldrd	r2, [r4]
   13b8c:	str	r3, [sp, #12]
   13b90:	str	r2, [sp, #8]
   13b94:	ldr	r0, [r0, #56]	; 0x38
   13b98:	bl	15b00 <__assert_fail@plt+0x4274>
   13b9c:	cmp	r0, #0
   13ba0:	beq	13c2c <__assert_fail@plt+0x23a0>
   13ba4:	bl	19108 <__assert_fail@plt+0x787c>
   13ba8:	sub	sp, fp, #16
   13bac:	pop	{r4, r5, r7, sl, fp, pc}
   13bb0:	ldr	r1, [r1, #4]
   13bb4:	cmp	r1, #0
   13bb8:	beq	13ba8 <__assert_fail@plt+0x231c>
   13bbc:	ldr	r2, [r1, #48]	; 0x30
   13bc0:	cmp	r2, #0
   13bc4:	bmi	13ba8 <__assert_fail@plt+0x231c>
   13bc8:	ldr	ip, [r0, #56]	; 0x38
   13bcc:	ldrd	r2, [ip, #16]
   13bd0:	orrs	r2, r2, r3
   13bd4:	beq	13c2c <__assert_fail@plt+0x23a0>
   13bd8:	ldrd	r2, [r4]
   13bdc:	ldrd	r4, [ip]
   13be0:	eor	r3, r5, r3
   13be4:	eor	r2, r4, r2
   13be8:	orrs	r2, r2, r3
   13bec:	bne	13ba8 <__assert_fail@plt+0x231c>
   13bf0:	add	r3, ip, #8
   13bf4:	ldm	lr, {r2, r5}
   13bf8:	ldm	r3, {r4, r7}
   13bfc:	eor	r7, r7, r5
   13c00:	eor	r2, r4, r2
   13c04:	orrs	r2, r2, r7
   13c08:	bne	13ba8 <__assert_fail@plt+0x231c>
   13c0c:	add	r2, r1, #64	; 0x40
   13c10:	add	r1, r1, #160	; 0xa0
   13c14:	ldm	r2, {r2, r5}
   13c18:	stm	r3, {r2, r5}
   13c1c:	ldr	r0, [r0, #56]	; 0x38
   13c20:	ldrd	r2, [r1]
   13c24:	strd	r2, [r0]
   13c28:	b	13ba8 <__assert_fail@plt+0x231c>
   13c2c:	bl	11850 <abort@plt>
   13c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c34:	add	fp, sp, #28
   13c38:	sub	sp, sp, #108	; 0x6c
   13c3c:	mov	r7, r3
   13c40:	mov	r4, r2
   13c44:	mov	r8, r1
   13c48:	mov	sl, r0
   13c4c:	cmp	r3, #0
   13c50:	beq	13c74 <__assert_fail@plt+0x23e8>
   13c54:	movw	r1, #42994	; 0xa7f2
   13c58:	mov	r0, r7
   13c5c:	movt	r1, #1
   13c60:	bl	114f0 <strcmp@plt>
   13c64:	cmp	r0, #0
   13c68:	mov	r6, r0
   13c6c:	movwne	r6, #1
   13c70:	b	13c78 <__assert_fail@plt+0x23ec>
   13c74:	mov	r6, #1
   13c78:	ldr	r0, [sl, #48]	; 0x30
   13c7c:	tst	r0, #4
   13c80:	bne	13cd8 <__assert_fail@plt+0x244c>
   13c84:	cmn	r4, #1
   13c88:	mov	r1, #0
   13c8c:	mov	r9, #0
   13c90:	movwgt	r1, #1
   13c94:	orrs	r1, r1, r6
   13c98:	bne	13cf8 <__assert_fail@plt+0x246c>
   13c9c:	ands	r0, r0, #512	; 0x200
   13ca0:	beq	13cf8 <__assert_fail@plt+0x246c>
   13ca4:	add	r4, sl, #60	; 0x3c
   13ca8:	mov	r0, r4
   13cac:	bl	15c38 <__assert_fail@plt+0x43ac>
   13cb0:	cmp	r0, #0
   13cb4:	bne	13d00 <__assert_fail@plt+0x2474>
   13cb8:	mov	r0, r4
   13cbc:	bl	15c8c <__assert_fail@plt+0x4400>
   13cc0:	cmn	r0, #1
   13cc4:	ble	13d00 <__assert_fail@plt+0x2474>
   13cc8:	mov	r4, r0
   13ccc:	mov	r9, #0
   13cd0:	mov	r7, #0
   13cd4:	b	13d1c <__assert_fail@plt+0x2490>
   13cd8:	mov	r5, #0
   13cdc:	cmp	r4, #0
   13ce0:	bmi	13e04 <__assert_fail@plt+0x2578>
   13ce4:	ands	r0, r0, #512	; 0x200
   13ce8:	beq	13e04 <__assert_fail@plt+0x2578>
   13cec:	mov	r0, r4
   13cf0:	bl	1185c <close@plt>
   13cf4:	b	13e04 <__assert_fail@plt+0x2578>
   13cf8:	cmn	r4, #1
   13cfc:	bgt	13d1c <__assert_fail@plt+0x2490>
   13d00:	mov	r0, sl
   13d04:	mov	r1, r7
   13d08:	bl	13350 <__assert_fail@plt+0x1ac4>
   13d0c:	cmp	r0, #0
   13d10:	bmi	13db4 <__assert_fail@plt+0x2528>
   13d14:	mov	r4, r0
   13d18:	mov	r9, #1
   13d1c:	ldr	r5, [sl, #48]	; 0x30
   13d20:	tst	r5, #2
   13d24:	bne	13d48 <__assert_fail@plt+0x24bc>
   13d28:	cmp	r7, #0
   13d2c:	beq	13d9c <__assert_fail@plt+0x2510>
   13d30:	movw	r1, #42994	; 0xa7f2
   13d34:	mov	r0, r7
   13d38:	movt	r1, #1
   13d3c:	bl	114f0 <strcmp@plt>
   13d40:	cmp	r0, #0
   13d44:	bne	13d9c <__assert_fail@plt+0x2510>
   13d48:	mov	r1, sp
   13d4c:	mov	r0, r4
   13d50:	bl	199d0 <__assert_fail@plt+0x8144>
   13d54:	cmp	r0, #0
   13d58:	bne	13de0 <__assert_fail@plt+0x2554>
   13d5c:	add	r0, r8, #64	; 0x40
   13d60:	ldm	sp, {r2, r3}
   13d64:	ldrd	r0, [r0]
   13d68:	eor	r1, r1, r3
   13d6c:	eor	r0, r0, r2
   13d70:	orrs	r0, r0, r1
   13d74:	bne	13dd4 <__assert_fail@plt+0x2548>
   13d78:	add	r0, r8, #160	; 0xa0
   13d7c:	ldr	r2, [sp, #96]	; 0x60
   13d80:	ldr	r3, [sp, #100]	; 0x64
   13d84:	ldrd	r0, [r0]
   13d88:	eor	r1, r1, r3
   13d8c:	eor	r0, r0, r2
   13d90:	orrs	r0, r0, r1
   13d94:	bne	13dd4 <__assert_fail@plt+0x2548>
   13d98:	ldr	r5, [sl, #48]	; 0x30
   13d9c:	tst	r5, #512	; 0x200
   13da0:	bne	13dbc <__assert_fail@plt+0x2530>
   13da4:	mov	r0, r4
   13da8:	bl	117e4 <fchdir@plt>
   13dac:	mov	r5, r0
   13db0:	b	13de4 <__assert_fail@plt+0x2558>
   13db4:	mvn	r5, #0
   13db8:	b	13e04 <__assert_fail@plt+0x2578>
   13dbc:	mov	r0, sl
   13dc0:	mov	r1, r4
   13dc4:	mov	r2, r6
   13dc8:	bl	148b8 <__assert_fail@plt+0x302c>
   13dcc:	mov	r5, #0
   13dd0:	b	13e04 <__assert_fail@plt+0x2578>
   13dd4:	bl	11700 <__errno_location@plt>
   13dd8:	mov	r1, #2
   13ddc:	str	r1, [r0]
   13de0:	mvn	r5, #0
   13de4:	cmp	r9, #0
   13de8:	beq	13e04 <__assert_fail@plt+0x2578>
   13dec:	bl	11700 <__errno_location@plt>
   13df0:	ldr	r7, [r0]
   13df4:	mov	r6, r0
   13df8:	mov	r0, r4
   13dfc:	bl	1185c <close@plt>
   13e00:	str	r7, [r6]
   13e04:	mov	r0, r5
   13e08:	sub	sp, fp, #28
   13e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e14:	add	fp, sp, #28
   13e18:	sub	sp, sp, #68	; 0x44
   13e1c:	ldr	sl, [r0]
   13e20:	mov	r4, r1
   13e24:	str	r0, [fp, #-36]	; 0xffffffdc
   13e28:	ldr	r9, [sl, #12]
   13e2c:	cmp	r9, #0
   13e30:	beq	13e74 <__assert_fail@plt+0x25e8>
   13e34:	mov	r0, r9
   13e38:	bl	117d8 <dirfd@plt>
   13e3c:	cmn	r0, #1
   13e40:	str	r0, [fp, #-32]	; 0xffffffe0
   13e44:	ble	13eac <__assert_fail@plt+0x2620>
   13e48:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13e4c:	mov	ip, #0
   13e50:	mov	r1, r7
   13e54:	ldr	r0, [r1, #44]!	; 0x2c
   13e58:	str	r1, [sp, #24]
   13e5c:	mvn	r1, #0
   13e60:	cmp	r0, #0
   13e64:	movweq	r1, #34464	; 0x86a0
   13e68:	movteq	r1, #1
   13e6c:	str	r1, [sp, #32]
   13e70:	b	14114 <__assert_fail@plt+0x2888>
   13e74:	ldr	r3, [r0, #48]	; 0x30
   13e78:	mov	r2, r0
   13e7c:	mvn	r0, #99	; 0x63
   13e80:	and	r1, r3, #516	; 0x204
   13e84:	cmp	r1, #512	; 0x200
   13e88:	ldr	r1, [sl, #24]
   13e8c:	ldreq	r0, [r2, #32]
   13e90:	mov	r2, #0
   13e94:	tst	r3, #16
   13e98:	beq	13ecc <__assert_fail@plt+0x2640>
   13e9c:	tst	r3, #1
   13ea0:	bne	13ec0 <__assert_fail@plt+0x2634>
   13ea4:	mov	r2, #32768	; 0x8000
   13ea8:	b	13ecc <__assert_fail@plt+0x2640>
   13eac:	ldr	r0, [sl, #12]
   13eb0:	bl	11874 <closedir@plt>
   13eb4:	mov	r5, #0
   13eb8:	str	r5, [sl, #12]
   13ebc:	b	13f0c <__assert_fail@plt+0x2680>
   13ec0:	ldr	r3, [sl, #48]	; 0x30
   13ec4:	cmp	r3, #0
   13ec8:	movne	r2, #32768	; 0x8000
   13ecc:	sub	r3, fp, #32
   13ed0:	bl	15d1c <__assert_fail@plt+0x4490>
   13ed4:	cmp	r0, #0
   13ed8:	str	r0, [sl, #12]
   13edc:	beq	13f08 <__assert_fail@plt+0x267c>
   13ee0:	ldrh	r0, [sl, #56]	; 0x38
   13ee4:	cmp	r0, #11
   13ee8:	bne	13f2c <__assert_fail@plt+0x26a0>
   13eec:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13ef0:	mov	r1, sl
   13ef4:	mov	r2, #0
   13ef8:	mov	r0, r7
   13efc:	bl	13094 <__assert_fail@plt+0x1808>
   13f00:	strh	r0, [sl, #56]	; 0x38
   13f04:	b	13f74 <__assert_fail@plt+0x26e8>
   13f08:	mov	r5, #0
   13f0c:	cmp	r4, #3
   13f10:	bne	14794 <__assert_fail@plt+0x2f08>
   13f14:	mov	r0, #4
   13f18:	strh	r0, [sl, #56]	; 0x38
   13f1c:	bl	11700 <__errno_location@plt>
   13f20:	ldr	r0, [r0]
   13f24:	str	r0, [sl, #32]
   13f28:	b	14794 <__assert_fail@plt+0x2f08>
   13f2c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13f30:	ldrb	r0, [r7, #49]	; 0x31
   13f34:	tst	r0, #1
   13f38:	beq	13f74 <__assert_fail@plt+0x26e8>
   13f3c:	mov	r0, r7
   13f40:	mov	r1, sl
   13f44:	bl	13b58 <__assert_fail@plt+0x22cc>
   13f48:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13f4c:	mov	r1, sl
   13f50:	mov	r2, #0
   13f54:	mov	r5, #0
   13f58:	bl	13094 <__assert_fail@plt+0x1808>
   13f5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13f60:	mov	r1, sl
   13f64:	bl	147fc <__assert_fail@plt+0x2f70>
   13f68:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13f6c:	cmp	r0, #0
   13f70:	beq	14018 <__assert_fail@plt+0x278c>
   13f74:	mov	r1, r7
   13f78:	ldr	r0, [r1, #44]!	; 0x2c
   13f7c:	str	r1, [sp, #24]
   13f80:	mvn	r1, #0
   13f84:	cmp	r0, #0
   13f88:	movweq	r1, #34464	; 0x86a0
   13f8c:	movteq	r1, #1
   13f90:	cmp	r4, #2
   13f94:	str	r1, [sp, #32]
   13f98:	bne	13fb8 <__assert_fail@plt+0x272c>
   13f9c:	mov	ip, #1
   13fa0:	cmp	r4, #3
   13fa4:	bne	14114 <__assert_fail@plt+0x2888>
   13fa8:	sub	r0, r4, #3
   13fac:	mov	r8, r4
   13fb0:	mov	r5, #0
   13fb4:	b	1404c <__assert_fail@plt+0x27c0>
   13fb8:	ldr	r0, [r7, #48]	; 0x30
   13fbc:	and	r0, r0, #56	; 0x38
   13fc0:	cmp	r0, #24
   13fc4:	bne	14040 <__assert_fail@plt+0x27b4>
   13fc8:	ldr	r0, [sl, #84]	; 0x54
   13fcc:	cmp	r0, #2
   13fd0:	bne	14040 <__assert_fail@plt+0x27b4>
   13fd4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13fd8:	mov	r0, sl
   13fdc:	bl	14b58 <__assert_fail@plt+0x32cc>
   13fe0:	movw	r1, #26984	; 0x6968
   13fe4:	cmp	r0, r1
   13fe8:	ble	14028 <__assert_fail@plt+0x279c>
   13fec:	movw	r1, #26985	; 0x6969
   13ff0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13ff4:	cmp	r0, r1
   13ff8:	movwne	r1, #16719	; 0x414f
   13ffc:	movtne	r1, #21318	; 0x5346
   14000:	cmpne	r0, r1
   14004:	beq	14040 <__assert_fail@plt+0x27b4>
   14008:	movw	r1, #40864	; 0x9fa0
   1400c:	cmp	r0, r1
   14010:	beq	14040 <__assert_fail@plt+0x27b4>
   14014:	b	13f9c <__assert_fail@plt+0x2710>
   14018:	bl	11700 <__errno_location@plt>
   1401c:	mov	r1, #12
   14020:	str	r1, [r0]
   14024:	b	14794 <__assert_fail@plt+0x2f08>
   14028:	movw	r1, #19778	; 0x4d42
   1402c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14030:	movt	r1, #65363	; 0xff53
   14034:	cmp	r0, r1
   14038:	cmpne	r0, #0
   1403c:	bne	13f9c <__assert_fail@plt+0x2710>
   14040:	sub	r0, r4, #3
   14044:	mov	r8, r4
   14048:	mov	r5, #1
   1404c:	clz	r0, r0
   14050:	lsr	r4, r0, #5
   14054:	ldrb	r0, [r7, #49]	; 0x31
   14058:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1405c:	tst	r0, #2
   14060:	beq	14080 <__assert_fail@plt+0x27f4>
   14064:	mov	r0, r2
   14068:	movw	r1, #1030	; 0x406
   1406c:	mov	r2, #3
   14070:	bl	18e98 <__assert_fail@plt+0x760c>
   14074:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14078:	mov	r2, r0
   1407c:	str	r0, [fp, #-32]	; 0xffffffe0
   14080:	cmp	r2, #0
   14084:	bmi	140a4 <__assert_fail@plt+0x2818>
   14088:	mov	r0, r7
   1408c:	mov	r1, sl
   14090:	mov	r3, #0
   14094:	bl	13c30 <__assert_fail@plt+0x23a4>
   14098:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1409c:	cmp	r0, #0
   140a0:	beq	1410c <__assert_fail@plt+0x2880>
   140a4:	and	r0, r4, r5
   140a8:	cmp	r0, #1
   140ac:	bne	140bc <__assert_fail@plt+0x2830>
   140b0:	bl	11700 <__errno_location@plt>
   140b4:	ldr	r0, [r0]
   140b8:	str	r0, [sl, #32]
   140bc:	ldrh	r0, [sl, #58]	; 0x3a
   140c0:	orr	r0, r0, #1
   140c4:	strh	r0, [sl, #58]	; 0x3a
   140c8:	ldr	r0, [sl, #12]
   140cc:	bl	11874 <closedir@plt>
   140d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   140d4:	mov	r4, #0
   140d8:	str	r4, [sl, #12]
   140dc:	ldrb	r0, [r7, #49]	; 0x31
   140e0:	tst	r0, #2
   140e4:	beq	140fc <__assert_fail@plt+0x2870>
   140e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   140ec:	cmp	r0, #0
   140f0:	bmi	140fc <__assert_fail@plt+0x2870>
   140f4:	bl	1185c <close@plt>
   140f8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   140fc:	str	r4, [sl, #12]
   14100:	mov	ip, #1
   14104:	mov	r4, r8
   14108:	b	14114 <__assert_fail@plt+0x2888>
   1410c:	mov	r4, r8
   14110:	mov	ip, #0
   14114:	ldr	r0, [sl, #40]	; 0x28
   14118:	ldr	r1, [sl, #28]
   1411c:	mov	r5, #0
   14120:	str	r4, [sp, #12]
   14124:	sub	r2, r0, #1
   14128:	ldrb	r1, [r1, r2]
   1412c:	cmp	r1, #47	; 0x2f
   14130:	ldrb	r1, [r7, #48]	; 0x30
   14134:	moveq	r0, r2
   14138:	tst	r1, #4
   1413c:	mov	r1, #0
   14140:	str	r1, [sp, #40]	; 0x28
   14144:	beq	1415c <__assert_fail@plt+0x28d0>
   14148:	ldr	r1, [r7, #24]
   1414c:	mov	r2, #47	; 0x2f
   14150:	strb	r2, [r1, r0]!
   14154:	add	r1, r1, #1
   14158:	str	r1, [sp, #40]	; 0x28
   1415c:	ldr	r4, [sl, #12]
   14160:	add	r1, r0, #1
   14164:	str	r1, [sp, #48]	; 0x30
   14168:	cmp	r4, #0
   1416c:	beq	144b0 <__assert_fail@plt+0x2c24>
   14170:	ldr	r0, [sl, #48]	; 0x30
   14174:	str	ip, [sp, #4]
   14178:	str	r9, [sp, #8]
   1417c:	add	r0, r0, #1
   14180:	str	r0, [sp, #28]
   14184:	ldr	r0, [r7, #36]	; 0x24
   14188:	sub	r0, r0, r1
   1418c:	str	r0, [fp, #-44]	; 0xffffffd4
   14190:	bl	11700 <__errno_location@plt>
   14194:	str	r0, [sp, #36]	; 0x24
   14198:	mov	r0, #0
   1419c:	mov	r1, #0
   141a0:	mov	r5, #0
   141a4:	mov	r8, #0
   141a8:	mov	r9, #0
   141ac:	str	r0, [sp, #20]
   141b0:	mov	r0, #0
   141b4:	str	r0, [sp, #16]
   141b8:	ldr	r0, [sp, #36]	; 0x24
   141bc:	str	r5, [fp, #-40]	; 0xffffffd8
   141c0:	mov	r5, sl
   141c4:	str	r1, [r0]
   141c8:	mov	r0, r4
   141cc:	bl	117c0 <readdir64@plt>
   141d0:	cmp	r0, #0
   141d4:	beq	1450c <__assert_fail@plt+0x2c80>
   141d8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   141dc:	mov	sl, r0
   141e0:	ldrb	r0, [r7, #48]	; 0x30
   141e4:	tst	r0, #32
   141e8:	bne	14218 <__assert_fail@plt+0x298c>
   141ec:	ldrb	r0, [sl, #19]
   141f0:	cmp	r0, #46	; 0x2e
   141f4:	bne	14218 <__assert_fail@plt+0x298c>
   141f8:	ldrb	r0, [sl, #20]
   141fc:	cmp	r0, #0
   14200:	beq	14454 <__assert_fail@plt+0x2bc8>
   14204:	cmp	r0, #46	; 0x2e
   14208:	bne	14218 <__assert_fail@plt+0x298c>
   1420c:	ldrb	r0, [sl, #21]
   14210:	cmp	r0, #0
   14214:	beq	14454 <__assert_fail@plt+0x2bc8>
   14218:	add	r6, sl, #19
   1421c:	str	r9, [sp, #44]	; 0x2c
   14220:	mov	r0, r6
   14224:	bl	116dc <strlen@plt>
   14228:	mov	r4, r0
   1422c:	mov	r0, r7
   14230:	mov	r1, r6
   14234:	mov	r2, r4
   14238:	bl	13014 <__assert_fail@plt+0x1788>
   1423c:	mov	r9, r0
   14240:	cmp	r0, #0
   14244:	beq	144c4 <__assert_fail@plt+0x2c38>
   14248:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1424c:	cmp	r4, r0
   14250:	bcs	14264 <__assert_fail@plt+0x29d8>
   14254:	ldr	r2, [sp, #48]	; 0x30
   14258:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1425c:	add	r4, r4, r2
   14260:	b	142c4 <__assert_fail@plt+0x2a38>
   14264:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14268:	ldr	r0, [sp, #48]	; 0x30
   1426c:	ldr	r6, [r7, #24]
   14270:	add	r4, r4, r0
   14274:	mov	r0, r7
   14278:	add	r1, r4, #1
   1427c:	bl	12fa0 <__assert_fail@plt+0x1714>
   14280:	cmp	r0, #0
   14284:	beq	144c4 <__assert_fail@plt+0x2c38>
   14288:	ldr	r0, [r7, #24]
   1428c:	cmp	r6, r0
   14290:	beq	142b8 <__assert_fail@plt+0x2a2c>
   14294:	ldrb	r1, [r7, #48]	; 0x30
   14298:	ldr	r2, [sp, #48]	; 0x30
   1429c:	tst	r1, #4
   142a0:	ldr	r1, [sp, #40]	; 0x28
   142a4:	addne	r1, r0, r2
   142a8:	mov	r0, #1
   142ac:	str	r1, [sp, #40]	; 0x28
   142b0:	str	r0, [sp, #16]
   142b4:	b	142bc <__assert_fail@plt+0x2a30>
   142b8:	ldr	r2, [sp, #48]	; 0x30
   142bc:	ldr	r0, [r7, #36]	; 0x24
   142c0:	sub	r0, r0, r2
   142c4:	cmp	r4, r2
   142c8:	bcc	14568 <__assert_fail@plt+0x2cdc>
   142cc:	ldr	r1, [sp, #28]
   142d0:	str	r0, [fp, #-44]	; 0xffffffd4
   142d4:	add	r0, r9, #160	; 0xa0
   142d8:	str	r1, [r9, #48]	; 0x30
   142dc:	ldr	r1, [r7]
   142e0:	str	r4, [r9, #40]	; 0x28
   142e4:	str	r1, [r9, #4]
   142e8:	ldrd	r2, [sl]
   142ec:	strd	r2, [r0]
   142f0:	ldrb	r0, [r7, #48]	; 0x30
   142f4:	tst	r0, #4
   142f8:	bne	14308 <__assert_fail@plt+0x2a7c>
   142fc:	add	r0, r9, #168	; 0xa8
   14300:	str	r0, [r9, #24]
   14304:	b	14328 <__assert_fail@plt+0x2a9c>
   14308:	ldr	r0, [r9, #28]
   1430c:	ldr	r2, [r9, #52]	; 0x34
   14310:	add	r1, r9, #168	; 0xa8
   14314:	str	r0, [r9, #24]
   14318:	ldr	r0, [sp, #40]	; 0x28
   1431c:	add	r2, r2, #1
   14320:	bl	11514 <memmove@plt>
   14324:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14328:	ldr	r0, [r7, #44]	; 0x2c
   1432c:	ldr	r2, [r7, #48]	; 0x30
   14330:	cmp	r0, #0
   14334:	beq	14368 <__assert_fail@plt+0x2adc>
   14338:	ands	r0, r2, #1024	; 0x400
   1433c:	bne	14368 <__assert_fail@plt+0x2adc>
   14340:	mov	r0, r7
   14344:	mov	r1, r9
   14348:	mov	r2, #0
   1434c:	bl	13094 <__assert_fail@plt+0x1808>
   14350:	mov	sl, r5
   14354:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14358:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1435c:	mov	r1, #0
   14360:	strh	r0, [r9, #56]	; 0x38
   14364:	b	143e8 <__assert_fail@plt+0x2b5c>
   14368:	ldrb	r3, [sl, #18]
   1436c:	mov	r0, #0
   14370:	tst	r2, #8
   14374:	mov	r1, #0
   14378:	beq	1439c <__assert_fail@plt+0x2b10>
   1437c:	orr	r1, r3, #4
   14380:	cmp	r1, #4
   14384:	mov	r1, #0
   14388:	beq	1439c <__assert_fail@plt+0x2b10>
   1438c:	eor	r1, r3, #10
   14390:	and	r2, r2, #16
   14394:	orrs	r1, r2, r1
   14398:	movwne	r1, #1
   1439c:	mov	r6, #11
   143a0:	mov	sl, r5
   143a4:	sub	r3, r3, #1
   143a8:	ldr	r5, [fp, #-40]	; 0xffffffd8
   143ac:	add	r2, r9, #112	; 0x70
   143b0:	strh	r6, [r9, #56]	; 0x38
   143b4:	uxtb	r6, r3
   143b8:	cmp	r6, #11
   143bc:	bhi	143d0 <__assert_fail@plt+0x2b44>
   143c0:	sxtb	r0, r3
   143c4:	movw	r3, #43000	; 0xa7f8
   143c8:	movt	r3, #1
   143cc:	ldr	r0, [r3, r0, lsl #2]
   143d0:	cmp	r1, #0
   143d4:	str	r0, [r9, #80]	; 0x50
   143d8:	mov	r0, #2
   143dc:	mov	r1, #0
   143e0:	movwne	r0, #1
   143e4:	strd	r0, [r2]
   143e8:	cmp	r5, #0
   143ec:	str	r1, [r9, #8]
   143f0:	mov	r4, r9
   143f4:	ldrne	r0, [sp, #44]	; 0x2c
   143f8:	movne	r4, r5
   143fc:	strne	r9, [r0, #8]
   14400:	movw	r0, #10000	; 0x2710
   14404:	cmp	r8, r0
   14408:	bne	14480 <__assert_fail@plt+0x2bf4>
   1440c:	ldr	r0, [sp, #24]
   14410:	ldr	r0, [r0]
   14414:	cmp	r0, #0
   14418:	bne	14480 <__assert_fail@plt+0x2bf4>
   1441c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14420:	mov	r0, sl
   14424:	bl	14b58 <__assert_fail@plt+0x32cc>
   14428:	mov	r1, #0
   1442c:	str	r1, [sp, #20]
   14430:	movw	r1, #19778	; 0x4d42
   14434:	movt	r1, #65363	; 0xff53
   14438:	cmp	r0, r1
   1443c:	movwne	r1, #26985	; 0x6969
   14440:	cmpne	r0, r1
   14444:	bne	14464 <__assert_fail@plt+0x2bd8>
   14448:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1444c:	mov	r1, #0
   14450:	b	14480 <__assert_fail@plt+0x2bf4>
   14454:	mov	sl, r5
   14458:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1445c:	mov	r1, #0
   14460:	b	14494 <__assert_fail@plt+0x2c08>
   14464:	movw	r1, #6548	; 0x1994
   14468:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1446c:	movt	r1, #258	; 0x102
   14470:	cmp	r0, r1
   14474:	mov	r1, #0
   14478:	movne	r0, #1
   1447c:	strne	r0, [sp, #20]
   14480:	ldr	r0, [sp, #32]
   14484:	add	r8, r8, #1
   14488:	cmp	r0, r8
   1448c:	bls	145b0 <__assert_fail@plt+0x2d24>
   14490:	mov	r5, r4
   14494:	ldr	r4, [sl, #12]
   14498:	cmp	r4, #0
   1449c:	bne	141b8 <__assert_fail@plt+0x292c>
   144a0:	ldr	r0, [sp, #16]
   144a4:	ldr	r4, [sp, #12]
   144a8:	ldr	r9, [sp, #8]
   144ac:	b	1455c <__assert_fail@plt+0x2cd0>
   144b0:	ldr	r4, [sp, #12]
   144b4:	mov	r8, #0
   144b8:	mov	r0, #0
   144bc:	str	r0, [sp, #20]
   144c0:	b	14658 <__assert_fail@plt+0x2dcc>
   144c4:	ldr	r6, [sp, #36]	; 0x24
   144c8:	mov	r0, r9
   144cc:	ldr	r4, [r6]
   144d0:	bl	19108 <__assert_fail@plt+0x787c>
   144d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   144d8:	bl	13380 <__assert_fail@plt+0x1af4>
   144dc:	ldr	r0, [r5, #12]
   144e0:	mov	r8, r5
   144e4:	bl	11874 <closedir@plt>
   144e8:	mov	r0, #7
   144ec:	strh	r0, [r5, #56]	; 0x38
   144f0:	mov	r5, #0
   144f4:	str	r5, [r8, #12]
   144f8:	ldr	r0, [r7, #48]	; 0x30
   144fc:	orr	r0, r0, #8192	; 0x2000
   14500:	str	r0, [r7, #48]	; 0x30
   14504:	str	r4, [r6]
   14508:	b	14794 <__assert_fail@plt+0x2f08>
   1450c:	ldr	r0, [sp, #36]	; 0x24
   14510:	ldr	r9, [sp, #8]
   14514:	mov	sl, r5
   14518:	ldr	r0, [r0]
   1451c:	cmp	r0, #0
   14520:	beq	14538 <__assert_fail@plt+0x2cac>
   14524:	str	r0, [sl, #32]
   14528:	orrs	r0, r9, r8
   1452c:	mov	r0, #4
   14530:	movwne	r0, #7
   14534:	strh	r0, [sl, #56]	; 0x38
   14538:	ldr	r0, [sl, #12]
   1453c:	ldr	r4, [sp, #12]
   14540:	ldr	r5, [fp, #-40]	; 0xffffffd8
   14544:	cmp	r0, #0
   14548:	beq	14558 <__assert_fail@plt+0x2ccc>
   1454c:	bl	11874 <closedir@plt>
   14550:	mov	r0, #0
   14554:	str	r0, [sl, #12]
   14558:	ldr	r0, [sp, #16]
   1455c:	tst	r0, #1
   14560:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14564:	b	145c4 <__assert_fail@plt+0x2d38>
   14568:	mov	r0, r9
   1456c:	bl	19108 <__assert_fail@plt+0x787c>
   14570:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14574:	bl	13380 <__assert_fail@plt+0x1af4>
   14578:	ldr	r0, [r5, #12]
   1457c:	mov	r8, r5
   14580:	bl	11874 <closedir@plt>
   14584:	mov	r0, #7
   14588:	ldr	r1, [sp, #36]	; 0x24
   1458c:	strh	r0, [r5, #56]	; 0x38
   14590:	mov	r5, #0
   14594:	str	r5, [r8, #12]
   14598:	ldr	r0, [r7, #48]	; 0x30
   1459c:	orr	r0, r0, #8192	; 0x2000
   145a0:	str	r0, [r7, #48]	; 0x30
   145a4:	mov	r0, #36	; 0x24
   145a8:	str	r0, [r1]
   145ac:	b	14794 <__assert_fail@plt+0x2f08>
   145b0:	ldr	r0, [sp, #16]
   145b4:	mov	r5, r4
   145b8:	ldr	r4, [sp, #12]
   145bc:	ldr	r9, [sp, #8]
   145c0:	tst	r0, #1
   145c4:	ldr	ip, [sp, #4]
   145c8:	beq	14658 <__assert_fail@plt+0x2dcc>
   145cc:	ldr	r1, [r7, #4]
   145d0:	ldr	r0, [r7, #24]
   145d4:	cmp	r1, #0
   145d8:	beq	14608 <__assert_fail@plt+0x2d7c>
   145dc:	ldr	r2, [r1, #24]
   145e0:	add	r3, r1, #168	; 0xa8
   145e4:	cmp	r2, r3
   145e8:	beq	145fc <__assert_fail@plt+0x2d70>
   145ec:	ldr	r3, [r1, #28]
   145f0:	sub	r2, r2, r3
   145f4:	add	r2, r0, r2
   145f8:	str	r2, [r1, #24]
   145fc:	str	r0, [r1, #28]
   14600:	ldr	r1, [r1, #8]
   14604:	b	145d4 <__assert_fail@plt+0x2d48>
   14608:	ldr	r1, [r5, #48]	; 0x30
   1460c:	cmp	r1, #0
   14610:	bmi	14658 <__assert_fail@plt+0x2dcc>
   14614:	mov	r1, r5
   14618:	ldr	r2, [r1, #24]
   1461c:	add	r3, r1, #168	; 0xa8
   14620:	cmp	r2, r3
   14624:	beq	14638 <__assert_fail@plt+0x2dac>
   14628:	ldr	r3, [r1, #28]
   1462c:	sub	r2, r2, r3
   14630:	add	r2, r0, r2
   14634:	str	r2, [r1, #24]
   14638:	str	r0, [r1, #28]
   1463c:	ldr	r2, [r1, #8]
   14640:	cmp	r2, #0
   14644:	ldreq	r2, [r1, #4]
   14648:	ldr	r1, [r2, #48]	; 0x30
   1464c:	cmn	r1, #1
   14650:	mov	r1, r2
   14654:	bgt	14618 <__assert_fail@plt+0x2d8c>
   14658:	ldrb	r0, [r7, #48]	; 0x30
   1465c:	tst	r0, #4
   14660:	beq	1468c <__assert_fail@plt+0x2e00>
   14664:	ldr	r2, [sp, #40]	; 0x28
   14668:	ldr	r0, [r7, #36]	; 0x24
   1466c:	ldr	r3, [sp, #48]	; 0x30
   14670:	cmp	r3, r0
   14674:	sub	r1, r2, #1
   14678:	mov	r0, #0
   1467c:	moveq	r2, r1
   14680:	cmp	r8, #0
   14684:	moveq	r2, r1
   14688:	strb	r0, [r2]
   1468c:	cmp	r9, #0
   14690:	movwne	r9, #1
   14694:	orrs	r0, r9, ip
   14698:	beq	146c4 <__assert_fail@plt+0x2e38>
   1469c:	cmp	r8, #0
   146a0:	bne	146f8 <__assert_fail@plt+0x2e6c>
   146a4:	cmp	r4, #3
   146a8:	bne	14788 <__assert_fail@plt+0x2efc>
   146ac:	ldrh	r0, [sl, #56]	; 0x38
   146b0:	cmp	r0, #4
   146b4:	cmpne	r0, #7
   146b8:	movne	r0, #6
   146bc:	strhne	r0, [sl, #56]	; 0x38
   146c0:	b	14788 <__assert_fail@plt+0x2efc>
   146c4:	cmp	r4, #1
   146c8:	cmpne	r8, #0
   146cc:	bne	146f8 <__assert_fail@plt+0x2e6c>
   146d0:	ldr	r0, [sl, #48]	; 0x30
   146d4:	cmp	r0, #0
   146d8:	beq	14760 <__assert_fail@plt+0x2ed4>
   146dc:	ldr	r1, [sl, #4]
   146e0:	movw	r3, #42994	; 0xa7f2
   146e4:	mov	r0, r7
   146e8:	mvn	r2, #0
   146ec:	movt	r3, #1
   146f0:	bl	13c30 <__assert_fail@plt+0x23a4>
   146f4:	b	14768 <__assert_fail@plt+0x2edc>
   146f8:	ldr	r0, [sp, #20]
   146fc:	tst	r0, #1
   14700:	beq	14730 <__assert_fail@plt+0x2ea4>
   14704:	movw	r0, #19232	; 0x4b20
   14708:	mov	r1, r5
   1470c:	mov	r2, r8
   14710:	movt	r0, #1
   14714:	str	r0, [r7, #44]	; 0x2c
   14718:	mov	r0, r7
   1471c:	bl	131d0 <__assert_fail@plt+0x1944>
   14720:	mov	r5, r0
   14724:	mov	r0, #0
   14728:	str	r0, [r7, #44]	; 0x2c
   1472c:	b	14794 <__assert_fail@plt+0x2f08>
   14730:	cmp	r8, #2
   14734:	bcc	14794 <__assert_fail@plt+0x2f08>
   14738:	ldr	r0, [sp, #24]
   1473c:	ldr	r0, [r0]
   14740:	cmp	r0, #0
   14744:	beq	14794 <__assert_fail@plt+0x2f08>
   14748:	mov	r0, r7
   1474c:	mov	r1, r5
   14750:	mov	r2, r8
   14754:	bl	131d0 <__assert_fail@plt+0x1944>
   14758:	mov	r5, r0
   1475c:	b	14794 <__assert_fail@plt+0x2f08>
   14760:	mov	r0, r7
   14764:	bl	147a0 <__assert_fail@plt+0x2f14>
   14768:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1476c:	cmp	r0, #0
   14770:	beq	1469c <__assert_fail@plt+0x2e10>
   14774:	mov	r0, #7
   14778:	strh	r0, [sl, #56]	; 0x38
   1477c:	ldr	r0, [r7, #48]	; 0x30
   14780:	orr	r0, r0, #8192	; 0x2000
   14784:	str	r0, [r7, #48]	; 0x30
   14788:	mov	r0, r5
   1478c:	bl	13380 <__assert_fail@plt+0x1af4>
   14790:	mov	r5, #0
   14794:	mov	r0, r5
   14798:	sub	sp, fp, #28
   1479c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147a0:	push	{r4, r5, fp, lr}
   147a4:	add	fp, sp, #8
   147a8:	mov	r4, r0
   147ac:	ldr	r0, [r0, #48]	; 0x30
   147b0:	mov	r5, #0
   147b4:	tst	r0, #4
   147b8:	bne	147ec <__assert_fail@plt+0x2f60>
   147bc:	tst	r0, #512	; 0x200
   147c0:	bne	147dc <__assert_fail@plt+0x2f50>
   147c4:	ldr	r0, [r4, #28]
   147c8:	bl	117e4 <fchdir@plt>
   147cc:	cmp	r0, #0
   147d0:	mov	r5, r0
   147d4:	movwne	r5, #1
   147d8:	b	147ec <__assert_fail@plt+0x2f60>
   147dc:	mov	r0, r4
   147e0:	mvn	r1, #99	; 0x63
   147e4:	mov	r2, #1
   147e8:	bl	148b8 <__assert_fail@plt+0x302c>
   147ec:	add	r0, r4, #60	; 0x3c
   147f0:	bl	134e8 <__assert_fail@plt+0x1c5c>
   147f4:	mov	r0, r5
   147f8:	pop	{r4, r5, fp, pc}
   147fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14800:	add	fp, sp, #24
   14804:	mov	r6, r0
   14808:	ldrh	r0, [r0, #48]	; 0x30
   1480c:	mov	r4, r1
   14810:	add	r5, r1, #64	; 0x40
   14814:	movw	r1, #258	; 0x102
   14818:	tst	r0, r1
   1481c:	beq	14890 <__assert_fail@plt+0x3004>
   14820:	mov	r0, #24
   14824:	bl	18aec <__assert_fail@plt+0x7260>
   14828:	mov	r8, #0
   1482c:	cmp	r0, #0
   14830:	beq	148b0 <__assert_fail@plt+0x3024>
   14834:	ldrd	r2, [r5]
   14838:	mov	r7, r0
   1483c:	add	r0, r4, #160	; 0xa0
   14840:	stm	r7, {r2, r3}
   14844:	add	r2, r7, #8
   14848:	ldrd	r0, [r0]
   1484c:	stm	r2, {r0, r1, r4}
   14850:	mov	r1, r7
   14854:	ldr	r0, [r6, #56]	; 0x38
   14858:	bl	15ac0 <__assert_fail@plt+0x4234>
   1485c:	cmp	r0, r7
   14860:	beq	14888 <__assert_fail@plt+0x2ffc>
   14864:	mov	r5, r0
   14868:	mov	r0, r7
   1486c:	bl	19108 <__assert_fail@plt+0x787c>
   14870:	cmp	r5, #0
   14874:	beq	148b0 <__assert_fail@plt+0x3024>
   14878:	ldr	r0, [r5, #16]
   1487c:	mov	r1, #2
   14880:	strh	r1, [r4, #56]	; 0x38
   14884:	str	r0, [r4]
   14888:	mov	r8, #1
   1488c:	b	148b0 <__assert_fail@plt+0x3024>
   14890:	ldr	r0, [r6, #56]	; 0x38
   14894:	mov	r1, r5
   14898:	bl	18d2c <__assert_fail@plt+0x74a0>
   1489c:	cmp	r0, #0
   148a0:	mov	r8, #1
   148a4:	movne	r0, #2
   148a8:	strhne	r0, [r4, #56]	; 0x38
   148ac:	strne	r4, [r4]
   148b0:	mov	r0, r8
   148b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148b8:	push	{r4, r5, fp, lr}
   148bc:	add	fp, sp, #8
   148c0:	mov	r4, r1
   148c4:	ldr	r1, [r0, #32]
   148c8:	mov	r5, r0
   148cc:	cmp	r1, r4
   148d0:	bne	148dc <__assert_fail@plt+0x3050>
   148d4:	cmn	r1, #100	; 0x64
   148d8:	bne	1491c <__assert_fail@plt+0x3090>
   148dc:	cmp	r2, #0
   148e0:	beq	148f8 <__assert_fail@plt+0x306c>
   148e4:	add	r0, r5, #60	; 0x3c
   148e8:	bl	15c40 <__assert_fail@plt+0x43b4>
   148ec:	cmp	r0, #0
   148f0:	bpl	14910 <__assert_fail@plt+0x3084>
   148f4:	b	14914 <__assert_fail@plt+0x3088>
   148f8:	cmp	r1, #0
   148fc:	bmi	14914 <__assert_fail@plt+0x3088>
   14900:	ldr	r0, [r5, #48]	; 0x30
   14904:	ands	r0, r0, #4
   14908:	bne	14914 <__assert_fail@plt+0x3088>
   1490c:	mov	r0, r1
   14910:	bl	1185c <close@plt>
   14914:	str	r4, [r5, #32]
   14918:	pop	{r4, r5, fp, pc}
   1491c:	bl	11850 <abort@plt>
   14920:	push	{fp, lr}
   14924:	mov	fp, sp
   14928:	cmp	r2, #5
   1492c:	bcc	14944 <__assert_fail@plt+0x30b8>
   14930:	bl	11700 <__errno_location@plt>
   14934:	mov	r1, #22
   14938:	str	r1, [r0]
   1493c:	mov	r0, #1
   14940:	pop	{fp, pc}
   14944:	mov	r0, #0
   14948:	strh	r2, [r1, #60]	; 0x3c
   1494c:	pop	{fp, pc}
   14950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14954:	add	fp, sp, #28
   14958:	sub	sp, sp, #4
   1495c:	mov	r5, r0
   14960:	mvn	r0, #4096	; 0x1000
   14964:	tst	r1, r0
   14968:	beq	14980 <__assert_fail@plt+0x30f4>
   1496c:	bl	11700 <__errno_location@plt>
   14970:	mov	r1, #22
   14974:	mov	r4, #0
   14978:	str	r1, [r0]
   1497c:	b	14a7c <__assert_fail@plt+0x31f0>
   14980:	ldr	r6, [r5]
   14984:	mov	r7, r1
   14988:	bl	11700 <__errno_location@plt>
   1498c:	mov	r4, #0
   14990:	mov	sl, r0
   14994:	str	r4, [r0]
   14998:	ldrb	r0, [r5, #49]	; 0x31
   1499c:	tst	r0, #32
   149a0:	bne	14a7c <__assert_fail@plt+0x31f0>
   149a4:	ldrh	r0, [r6, #56]	; 0x38
   149a8:	cmp	r0, #1
   149ac:	beq	149bc <__assert_fail@plt+0x3130>
   149b0:	cmp	r0, #9
   149b4:	ldreq	r4, [r6, #8]
   149b8:	b	14a7c <__assert_fail@plt+0x31f0>
   149bc:	ldr	r0, [r5, #4]
   149c0:	cmp	r0, #0
   149c4:	blne	13380 <__assert_fail@plt+0x1af4>
   149c8:	mov	r9, #1
   149cc:	cmp	r7, #4096	; 0x1000
   149d0:	bne	149e4 <__assert_fail@plt+0x3158>
   149d4:	ldr	r0, [r5, #48]	; 0x30
   149d8:	mov	r9, #2
   149dc:	orr	r0, r0, #4096	; 0x1000
   149e0:	str	r0, [r5, #48]	; 0x30
   149e4:	ldr	r0, [r6, #48]	; 0x30
   149e8:	cmp	r0, #0
   149ec:	bne	14a68 <__assert_fail@plt+0x31dc>
   149f0:	ldr	r0, [r6, #24]
   149f4:	ldrb	r0, [r0]
   149f8:	cmp	r0, #47	; 0x2f
   149fc:	beq	14a68 <__assert_fail@plt+0x31dc>
   14a00:	ldrb	r0, [r5, #48]	; 0x30
   14a04:	tst	r0, #4
   14a08:	bne	14a68 <__assert_fail@plt+0x31dc>
   14a0c:	movw	r1, #42995	; 0xa7f3
   14a10:	mov	r0, r5
   14a14:	movt	r1, #1
   14a18:	bl	13350 <__assert_fail@plt+0x1ac4>
   14a1c:	cmn	r0, #1
   14a20:	ble	14a88 <__assert_fail@plt+0x31fc>
   14a24:	mov	r8, r0
   14a28:	mov	r0, r5
   14a2c:	mov	r1, r9
   14a30:	bl	13e10 <__assert_fail@plt+0x2584>
   14a34:	str	r0, [r5, #4]
   14a38:	ldrb	r0, [r5, #49]	; 0x31
   14a3c:	tst	r0, #2
   14a40:	bne	14a94 <__assert_fail@plt+0x3208>
   14a44:	mov	r0, r8
   14a48:	bl	117e4 <fchdir@plt>
   14a4c:	cmp	r0, #0
   14a50:	beq	14aa8 <__assert_fail@plt+0x321c>
   14a54:	ldr	r5, [sl]
   14a58:	mov	r0, r8
   14a5c:	bl	1185c <close@plt>
   14a60:	str	r5, [sl]
   14a64:	b	14a7c <__assert_fail@plt+0x31f0>
   14a68:	mov	r0, r5
   14a6c:	mov	r1, r9
   14a70:	bl	13e10 <__assert_fail@plt+0x2584>
   14a74:	mov	r4, r0
   14a78:	str	r0, [r5, #4]
   14a7c:	mov	r0, r4
   14a80:	sub	sp, fp, #28
   14a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a88:	mov	r4, #0
   14a8c:	str	r4, [r5, #4]
   14a90:	b	14a7c <__assert_fail@plt+0x31f0>
   14a94:	mov	r0, r5
   14a98:	mov	r1, r8
   14a9c:	mov	r2, #1
   14aa0:	bl	148b8 <__assert_fail@plt+0x302c>
   14aa4:	b	14ab0 <__assert_fail@plt+0x3224>
   14aa8:	mov	r0, r8
   14aac:	bl	1185c <close@plt>
   14ab0:	ldr	r4, [r5, #4]
   14ab4:	b	14a7c <__assert_fail@plt+0x31f0>
   14ab8:	push	{fp, lr}
   14abc:	mov	fp, sp
   14ac0:	mov	r2, r1
   14ac4:	ldrd	r0, [r0, #8]
   14ac8:	mov	r3, #0
   14acc:	bl	197d0 <__assert_fail@plt+0x7f44>
   14ad0:	mov	r0, r2
   14ad4:	pop	{fp, pc}
   14ad8:	push	{r4, r5, fp, lr}
   14adc:	add	fp, sp, #8
   14ae0:	ldrd	r2, [r1, #8]
   14ae4:	ldrd	r4, [r0, #8]
   14ae8:	eor	r3, r5, r3
   14aec:	eor	r2, r4, r2
   14af0:	orrs	r2, r2, r3
   14af4:	mov	r2, #0
   14af8:	bne	14b18 <__assert_fail@plt+0x328c>
   14afc:	ldrd	r2, [r1]
   14b00:	ldrd	r0, [r0]
   14b04:	eor	r1, r1, r3
   14b08:	eor	r0, r0, r2
   14b0c:	orr	r0, r0, r1
   14b10:	clz	r0, r0
   14b14:	lsr	r2, r0, #5
   14b18:	mov	r0, r2
   14b1c:	pop	{r4, r5, fp, pc}
   14b20:	push	{r4, r5, fp, lr}
   14b24:	add	fp, sp, #8
   14b28:	ldr	r0, [r0]
   14b2c:	ldrd	r2, [r0, #160]	; 0xa0
   14b30:	ldr	r0, [r1]
   14b34:	ldrd	r4, [r0, #160]	; 0xa0
   14b38:	mov	r0, #0
   14b3c:	subs	r1, r4, r2
   14b40:	sbcs	r1, r5, r3
   14b44:	movwcc	r0, #1
   14b48:	subs	r1, r2, r4
   14b4c:	sbcs	r1, r3, r5
   14b50:	subcc	r0, r0, #1
   14b54:	pop	{r4, r5, fp, pc}
   14b58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b5c:	add	fp, sp, #24
   14b60:	sub	sp, sp, #96	; 0x60
   14b64:	ldr	r7, [r0, #44]	; 0x2c
   14b68:	mov	r4, r0
   14b6c:	mov	r5, #0
   14b70:	ldrb	r0, [r7, #49]	; 0x31
   14b74:	tst	r0, #2
   14b78:	beq	14c6c <__assert_fail@plt+0x33e0>
   14b7c:	ldr	r6, [r7, #52]	; 0x34
   14b80:	mov	r9, r1
   14b84:	cmp	r6, #0
   14b88:	bne	14bc8 <__assert_fail@plt+0x333c>
   14b8c:	movw	r0, #37128	; 0x9108
   14b90:	movw	r2, #19576	; 0x4c78
   14b94:	movw	r3, #19608	; 0x4c98
   14b98:	mov	r1, #0
   14b9c:	mov	r8, #0
   14ba0:	movt	r0, #1
   14ba4:	movt	r2, #1
   14ba8:	movt	r3, #1
   14bac:	str	r0, [sp]
   14bb0:	mov	r0, #13
   14bb4:	bl	15144 <__assert_fail@plt+0x38b8>
   14bb8:	mov	r6, r0
   14bbc:	cmp	r0, #0
   14bc0:	str	r0, [r7, #52]	; 0x34
   14bc4:	beq	14bf8 <__assert_fail@plt+0x336c>
   14bc8:	ldrd	r0, [r4, #64]	; 0x40
   14bcc:	str	r1, [sp, #12]
   14bd0:	str	r0, [sp, #8]
   14bd4:	add	r1, sp, #8
   14bd8:	mov	r0, r6
   14bdc:	bl	14e90 <__assert_fail@plt+0x3604>
   14be0:	cmp	r0, #0
   14be4:	beq	14bf0 <__assert_fail@plt+0x3364>
   14be8:	ldr	r5, [r0, #8]
   14bec:	b	14c6c <__assert_fail@plt+0x33e0>
   14bf0:	mov	r8, #1
   14bf4:	b	14bfc <__assert_fail@plt+0x3370>
   14bf8:	mov	r6, #0
   14bfc:	cmp	r9, #0
   14c00:	bmi	14c6c <__assert_fail@plt+0x33e0>
   14c04:	add	r1, sp, #8
   14c08:	mov	r0, r9
   14c0c:	bl	114b4 <fstatfs64@plt>
   14c10:	cmp	r0, #0
   14c14:	bne	14c6c <__assert_fail@plt+0x33e0>
   14c18:	cmp	r8, #0
   14c1c:	beq	14c68 <__assert_fail@plt+0x33dc>
   14c20:	mov	r0, #16
   14c24:	bl	18aec <__assert_fail@plt+0x7260>
   14c28:	cmp	r0, #0
   14c2c:	beq	14c68 <__assert_fail@plt+0x33dc>
   14c30:	mov	r5, r0
   14c34:	ldrd	r0, [r4, #64]	; 0x40
   14c38:	ldr	r2, [sp, #8]
   14c3c:	stm	r5, {r0, r1, r2}
   14c40:	mov	r0, r6
   14c44:	mov	r1, r5
   14c48:	bl	15ac0 <__assert_fail@plt+0x4234>
   14c4c:	cmp	r0, #0
   14c50:	beq	14c60 <__assert_fail@plt+0x33d4>
   14c54:	cmp	r0, r5
   14c58:	beq	14c68 <__assert_fail@plt+0x33dc>
   14c5c:	bl	11850 <abort@plt>
   14c60:	mov	r0, r5
   14c64:	bl	19108 <__assert_fail@plt+0x787c>
   14c68:	ldr	r5, [sp, #8]
   14c6c:	mov	r0, r5
   14c70:	sub	sp, fp, #24
   14c74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c78:	push	{fp, lr}
   14c7c:	mov	fp, sp
   14c80:	mov	r2, r1
   14c84:	ldrd	r0, [r0]
   14c88:	mov	r3, #0
   14c8c:	bl	197d0 <__assert_fail@plt+0x7f44>
   14c90:	mov	r0, r2
   14c94:	pop	{fp, pc}
   14c98:	ldrd	r2, [r1]
   14c9c:	ldrd	r0, [r0]
   14ca0:	eor	r1, r1, r3
   14ca4:	eor	r0, r0, r2
   14ca8:	orr	r0, r0, r1
   14cac:	clz	r0, r0
   14cb0:	lsr	r0, r0, #5
   14cb4:	bx	lr
   14cb8:	ldr	r0, [r0, #8]
   14cbc:	bx	lr
   14cc0:	ldr	r0, [r0, #12]
   14cc4:	bx	lr
   14cc8:	ldr	r0, [r0, #16]
   14ccc:	bx	lr
   14cd0:	ldm	r0, {r2, ip}
   14cd4:	mov	r0, #0
   14cd8:	cmp	r2, ip
   14cdc:	bxcs	lr
   14ce0:	mov	r0, #0
   14ce4:	ldr	r1, [r2]
   14ce8:	cmp	r1, #0
   14cec:	beq	14d10 <__assert_fail@plt+0x3484>
   14cf0:	mov	r3, #0
   14cf4:	mov	r1, r2
   14cf8:	ldr	r1, [r1, #4]
   14cfc:	add	r3, r3, #1
   14d00:	cmp	r1, #0
   14d04:	bne	14cf8 <__assert_fail@plt+0x346c>
   14d08:	cmp	r3, r0
   14d0c:	movhi	r0, r3
   14d10:	add	r2, r2, #8
   14d14:	cmp	r2, ip
   14d18:	bcc	14ce4 <__assert_fail@plt+0x3458>
   14d1c:	bx	lr
   14d20:	push	{fp, lr}
   14d24:	mov	fp, sp
   14d28:	ldm	r0, {r3, ip}
   14d2c:	mov	lr, #0
   14d30:	mov	r1, #0
   14d34:	cmp	r3, ip
   14d38:	bcs	14d74 <__assert_fail@plt+0x34e8>
   14d3c:	mov	r1, #0
   14d40:	mov	lr, #0
   14d44:	ldr	r2, [r3]
   14d48:	cmp	r2, #0
   14d4c:	beq	14d68 <__assert_fail@plt+0x34dc>
   14d50:	mov	r2, r3
   14d54:	ldr	r2, [r2, #4]
   14d58:	add	r1, r1, #1
   14d5c:	cmp	r2, #0
   14d60:	bne	14d54 <__assert_fail@plt+0x34c8>
   14d64:	add	lr, lr, #1
   14d68:	add	r3, r3, #8
   14d6c:	cmp	r3, ip
   14d70:	bcc	14d44 <__assert_fail@plt+0x34b8>
   14d74:	ldr	r2, [r0, #12]
   14d78:	cmp	lr, r2
   14d7c:	bne	14d94 <__assert_fail@plt+0x3508>
   14d80:	ldr	r2, [r0, #16]
   14d84:	mov	r0, #1
   14d88:	cmp	r1, r2
   14d8c:	movne	r0, #0
   14d90:	pop	{fp, pc}
   14d94:	mov	r0, #0
   14d98:	pop	{fp, pc}
   14d9c:	nop	{0}
   14da0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14da4:	add	fp, sp, #24
   14da8:	sub	sp, sp, #8
   14dac:	ldr	r6, [r0]
   14db0:	ldmib	r0, {r2, r7, r8}
   14db4:	ldr	r3, [r0, #16]
   14db8:	mov	r4, r1
   14dbc:	mov	r5, #0
   14dc0:	cmp	r6, r2
   14dc4:	bcs	14e04 <__assert_fail@plt+0x3578>
   14dc8:	mov	r5, #0
   14dcc:	ldr	r0, [r6]
   14dd0:	cmp	r0, #0
   14dd4:	beq	14df8 <__assert_fail@plt+0x356c>
   14dd8:	mov	r0, #0
   14ddc:	mov	r1, r6
   14de0:	ldr	r1, [r1, #4]
   14de4:	add	r0, r0, #1
   14de8:	cmp	r1, #0
   14dec:	bne	14de0 <__assert_fail@plt+0x3554>
   14df0:	cmp	r0, r5
   14df4:	movhi	r5, r0
   14df8:	add	r6, r6, #8
   14dfc:	cmp	r6, r2
   14e00:	bcc	14dcc <__assert_fail@plt+0x3540>
   14e04:	movw	r2, #43048	; 0xa828
   14e08:	mov	r0, r4
   14e0c:	mov	r1, #1
   14e10:	movt	r2, #1
   14e14:	bl	11748 <__fprintf_chk@plt>
   14e18:	movw	r2, #43072	; 0xa840
   14e1c:	mov	r0, r4
   14e20:	mov	r1, #1
   14e24:	mov	r3, r7
   14e28:	movt	r2, #1
   14e2c:	bl	11748 <__fprintf_chk@plt>
   14e30:	vmov	s0, r8
   14e34:	vldr	d16, [pc, #76]	; 14e88 <__assert_fail@plt+0x35fc>
   14e38:	movw	r2, #43096	; 0xa858
   14e3c:	mov	r0, r4
   14e40:	mov	r1, #1
   14e44:	mov	r3, r8
   14e48:	movt	r2, #1
   14e4c:	vcvt.f64.u32	d17, s0
   14e50:	vmov	s0, r7
   14e54:	vcvt.f64.u32	d18, s0
   14e58:	vmul.f64	d16, d17, d16
   14e5c:	vdiv.f64	d16, d16, d18
   14e60:	vstr	d16, [sp]
   14e64:	bl	11748 <__fprintf_chk@plt>
   14e68:	movw	r2, #43129	; 0xa879
   14e6c:	mov	r0, r4
   14e70:	mov	r1, #1
   14e74:	mov	r3, r5
   14e78:	movt	r2, #1
   14e7c:	sub	sp, fp, #24
   14e80:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e84:	b	11748 <__fprintf_chk@plt>
   14e88:	andeq	r0, r0, r0
   14e8c:	subsmi	r0, r9, r0
   14e90:	push	{r4, r5, r6, r7, fp, lr}
   14e94:	add	fp, sp, #16
   14e98:	mov	r4, r1
   14e9c:	ldr	r1, [r0, #8]
   14ea0:	ldr	r2, [r0, #24]
   14ea4:	mov	r5, r0
   14ea8:	mov	r0, r4
   14eac:	blx	r2
   14eb0:	ldr	r1, [r5, #8]
   14eb4:	cmp	r0, r1
   14eb8:	bcs	14f18 <__assert_fail@plt+0x368c>
   14ebc:	ldr	r7, [r5]
   14ec0:	mov	r6, #0
   14ec4:	ldr	r1, [r7, r0, lsl #3]!
   14ec8:	cmp	r1, #0
   14ecc:	cmpne	r7, #0
   14ed0:	bne	14f00 <__assert_fail@plt+0x3674>
   14ed4:	mov	r0, r6
   14ed8:	pop	{r4, r5, r6, r7, fp, pc}
   14edc:	ldr	r2, [r5, #28]
   14ee0:	mov	r0, r4
   14ee4:	blx	r2
   14ee8:	cmp	r0, #0
   14eec:	bne	14f10 <__assert_fail@plt+0x3684>
   14ef0:	ldr	r7, [r7, #4]
   14ef4:	cmp	r7, #0
   14ef8:	beq	14ed4 <__assert_fail@plt+0x3648>
   14efc:	ldr	r1, [r7]
   14f00:	cmp	r1, r4
   14f04:	bne	14edc <__assert_fail@plt+0x3650>
   14f08:	mov	r6, r4
   14f0c:	b	14ed4 <__assert_fail@plt+0x3648>
   14f10:	ldr	r6, [r7]
   14f14:	b	14ed4 <__assert_fail@plt+0x3648>
   14f18:	bl	11850 <abort@plt>
   14f1c:	push	{fp, lr}
   14f20:	mov	fp, sp
   14f24:	ldr	r1, [r0, #16]
   14f28:	cmp	r1, #0
   14f2c:	beq	14f4c <__assert_fail@plt+0x36c0>
   14f30:	ldm	r0, {r1, r2}
   14f34:	cmp	r1, r2
   14f38:	bcs	14f54 <__assert_fail@plt+0x36c8>
   14f3c:	ldr	r0, [r1], #8
   14f40:	cmp	r0, #0
   14f44:	beq	14f34 <__assert_fail@plt+0x36a8>
   14f48:	pop	{fp, pc}
   14f4c:	mov	r0, #0
   14f50:	pop	{fp, pc}
   14f54:	bl	11850 <abort@plt>
   14f58:	push	{r4, r5, fp, lr}
   14f5c:	add	fp, sp, #8
   14f60:	mov	r5, r1
   14f64:	ldr	r1, [r0, #8]
   14f68:	ldr	r2, [r0, #24]
   14f6c:	mov	r4, r0
   14f70:	mov	r0, r5
   14f74:	blx	r2
   14f78:	ldr	r1, [r4, #8]
   14f7c:	cmp	r0, r1
   14f80:	bcs	14fe4 <__assert_fail@plt+0x3758>
   14f84:	ldr	r1, [r4]
   14f88:	add	r2, r1, r0, lsl #3
   14f8c:	ldr	r3, [r2]
   14f90:	ldr	r2, [r2, #4]
   14f94:	cmp	r3, r5
   14f98:	beq	14fa8 <__assert_fail@plt+0x371c>
   14f9c:	cmp	r2, #0
   14fa0:	bne	14f8c <__assert_fail@plt+0x3700>
   14fa4:	b	14fb8 <__assert_fail@plt+0x372c>
   14fa8:	cmp	r2, #0
   14fac:	beq	14fb8 <__assert_fail@plt+0x372c>
   14fb0:	ldr	r0, [r2]
   14fb4:	pop	{r4, r5, fp, pc}
   14fb8:	ldr	r2, [r4, #4]
   14fbc:	add	r0, r1, r0, lsl #3
   14fc0:	add	r1, r0, #8
   14fc4:	cmp	r1, r2
   14fc8:	bcs	14fdc <__assert_fail@plt+0x3750>
   14fcc:	ldr	r0, [r1], #8
   14fd0:	cmp	r0, #0
   14fd4:	beq	14fc4 <__assert_fail@plt+0x3738>
   14fd8:	pop	{r4, r5, fp, pc}
   14fdc:	mov	r0, #0
   14fe0:	pop	{r4, r5, fp, pc}
   14fe4:	bl	11850 <abort@plt>
   14fe8:	push	{r4, r5, fp, lr}
   14fec:	add	fp, sp, #8
   14ff0:	ldm	r0, {r5, lr}
   14ff4:	mov	ip, r0
   14ff8:	mov	r0, #0
   14ffc:	cmp	r5, lr
   15000:	popcs	{r4, r5, fp, pc}
   15004:	mov	r0, #0
   15008:	ldr	r3, [r5]
   1500c:	cmp	r3, #0
   15010:	cmpne	r5, #0
   15014:	bne	15028 <__assert_fail@plt+0x379c>
   15018:	add	r5, r5, #8
   1501c:	cmp	r5, lr
   15020:	bcc	15008 <__assert_fail@plt+0x377c>
   15024:	b	15054 <__assert_fail@plt+0x37c8>
   15028:	mov	r3, r5
   1502c:	cmp	r0, r2
   15030:	bcs	15054 <__assert_fail@plt+0x37c8>
   15034:	ldr	r4, [r3]
   15038:	str	r4, [r1, r0, lsl #2]
   1503c:	add	r0, r0, #1
   15040:	ldr	r3, [r3, #4]
   15044:	cmp	r3, #0
   15048:	bne	1502c <__assert_fail@plt+0x37a0>
   1504c:	ldr	lr, [ip, #4]
   15050:	b	15018 <__assert_fail@plt+0x378c>
   15054:	pop	{r4, r5, fp, pc}
   15058:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1505c:	add	fp, sp, #24
   15060:	mov	r5, r1
   15064:	ldr	r4, [r0]
   15068:	ldr	r1, [r0, #4]
   1506c:	mov	r6, #0
   15070:	cmp	r4, r1
   15074:	bcs	150e8 <__assert_fail@plt+0x385c>
   15078:	mov	r9, r2
   1507c:	mov	r8, r0
   15080:	mov	r6, #0
   15084:	ldr	r0, [r4]
   15088:	cmp	r0, #0
   1508c:	cmpne	r4, #0
   15090:	bne	150a4 <__assert_fail@plt+0x3818>
   15094:	add	r4, r4, #8
   15098:	cmp	r4, r1
   1509c:	bcc	15084 <__assert_fail@plt+0x37f8>
   150a0:	b	150e8 <__assert_fail@plt+0x385c>
   150a4:	mov	r1, r9
   150a8:	blx	r5
   150ac:	cmp	r0, #0
   150b0:	beq	150e8 <__assert_fail@plt+0x385c>
   150b4:	mov	r7, r4
   150b8:	ldr	r7, [r7, #4]
   150bc:	add	r6, r6, #1
   150c0:	cmp	r7, #0
   150c4:	beq	150e0 <__assert_fail@plt+0x3854>
   150c8:	ldr	r0, [r7]
   150cc:	mov	r1, r9
   150d0:	blx	r5
   150d4:	cmp	r0, #0
   150d8:	bne	150b8 <__assert_fail@plt+0x382c>
   150dc:	b	150e8 <__assert_fail@plt+0x385c>
   150e0:	ldr	r1, [r8, #4]
   150e4:	b	15094 <__assert_fail@plt+0x3808>
   150e8:	mov	r0, r6
   150ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   150f0:	ldrb	r2, [r0]
   150f4:	cmp	r2, #0
   150f8:	moveq	r0, #0
   150fc:	bxeq	lr
   15100:	add	r3, r0, #1
   15104:	mov	r0, #0
   15108:	rsb	r0, r0, r0, lsl #5
   1510c:	uxtab	r0, r0, r2
   15110:	udiv	r2, r0, r1
   15114:	mls	r0, r2, r1, r0
   15118:	ldrb	r2, [r3], #1
   1511c:	cmp	r2, #0
   15120:	bne	15108 <__assert_fail@plt+0x387c>
   15124:	bx	lr
   15128:	movw	r1, #43160	; 0xa898
   1512c:	movt	r1, #1
   15130:	vld1.32	{d16-d17}, [r1]!
   15134:	ldr	r1, [r1]
   15138:	vst1.32	{d16-d17}, [r0]!
   1513c:	str	r1, [r0]
   15140:	bx	lr
   15144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15148:	add	fp, sp, #28
   1514c:	sub	sp, sp, #4
   15150:	movw	sl, #21048	; 0x5238
   15154:	cmp	r3, #0
   15158:	movw	r5, #21028	; 0x5224
   1515c:	mov	r8, r0
   15160:	mov	r0, #40	; 0x28
   15164:	mov	r7, r1
   15168:	movt	sl, #1
   1516c:	movne	sl, r3
   15170:	cmp	r2, #0
   15174:	movt	r5, #1
   15178:	movne	r5, r2
   1517c:	bl	18aec <__assert_fail@plt+0x7260>
   15180:	mov	r9, #0
   15184:	cmp	r0, #0
   15188:	beq	15218 <__assert_fail@plt+0x398c>
   1518c:	movw	r6, #43160	; 0xa898
   15190:	cmp	r7, #0
   15194:	mov	r4, r0
   15198:	movt	r6, #1
   1519c:	movne	r6, r7
   151a0:	str	r6, [r0, #20]
   151a4:	bl	15248 <__assert_fail@plt+0x39bc>
   151a8:	cmp	r0, #0
   151ac:	beq	15210 <__assert_fail@plt+0x3984>
   151b0:	mov	r0, r8
   151b4:	mov	r1, r6
   151b8:	bl	152f4 <__assert_fail@plt+0x3a68>
   151bc:	cmp	r0, #0
   151c0:	str	r0, [r4, #8]
   151c4:	beq	15210 <__assert_fail@plt+0x3984>
   151c8:	mov	r1, #8
   151cc:	bl	18a98 <__assert_fail@plt+0x720c>
   151d0:	cmp	r0, #0
   151d4:	str	r0, [r4]
   151d8:	beq	15210 <__assert_fail@plt+0x3984>
   151dc:	ldr	r1, [fp, #8]
   151e0:	mov	r2, #0
   151e4:	str	r5, [r4, #24]
   151e8:	str	sl, [r4, #28]
   151ec:	mov	r9, r4
   151f0:	str	r1, [r4, #32]
   151f4:	str	r2, [r4, #36]	; 0x24
   151f8:	str	r2, [r4, #12]
   151fc:	str	r2, [r4, #16]
   15200:	ldr	r1, [r4, #8]
   15204:	add	r0, r0, r1, lsl #3
   15208:	str	r0, [r4, #4]
   1520c:	b	15218 <__assert_fail@plt+0x398c>
   15210:	mov	r0, r4
   15214:	bl	19108 <__assert_fail@plt+0x787c>
   15218:	mov	r0, r9
   1521c:	sub	sp, fp, #28
   15220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15224:	ror	r2, r0, #3
   15228:	udiv	r2, r2, r1
   1522c:	mul	r1, r2, r1
   15230:	rsb	r0, r1, r0, ror #3
   15234:	bx	lr
   15238:	sub	r0, r0, r1
   1523c:	clz	r0, r0
   15240:	lsr	r0, r0, #5
   15244:	bx	lr
   15248:	ldr	r3, [r0, #20]
   1524c:	movw	r2, #43160	; 0xa898
   15250:	mov	r1, r0
   15254:	mov	r0, #1
   15258:	movt	r2, #1
   1525c:	cmp	r3, r2
   15260:	beq	152e4 <__assert_fail@plt+0x3a58>
   15264:	vldr	s2, [pc, #124]	; 152e8 <__assert_fail@plt+0x3a5c>
   15268:	vldr	s0, [r3, #8]
   1526c:	vcmpe.f32	s0, s2
   15270:	vmrs	APSR_nzcv, fpscr
   15274:	ble	152dc <__assert_fail@plt+0x3a50>
   15278:	vldr	s4, [pc, #108]	; 152ec <__assert_fail@plt+0x3a60>
   1527c:	vcmpe.f32	s0, s4
   15280:	vmrs	APSR_nzcv, fpscr
   15284:	bpl	152dc <__assert_fail@plt+0x3a50>
   15288:	vldr	s4, [pc, #96]	; 152f0 <__assert_fail@plt+0x3a64>
   1528c:	vldr	s6, [r3, #12]
   15290:	vcmpe.f32	s6, s4
   15294:	vmrs	APSR_nzcv, fpscr
   15298:	ble	152dc <__assert_fail@plt+0x3a50>
   1529c:	vldr	s4, [r3]
   152a0:	vcmpe.f32	s4, #0.0
   152a4:	vmrs	APSR_nzcv, fpscr
   152a8:	blt	152dc <__assert_fail@plt+0x3a50>
   152ac:	vadd.f32	s2, s4, s2
   152b0:	vcmpe.f32	s2, s0
   152b4:	vmrs	APSR_nzcv, fpscr
   152b8:	bpl	152dc <__assert_fail@plt+0x3a50>
   152bc:	vldr	s0, [r3, #4]
   152c0:	vmov.f32	s4, #112	; 0x3f800000  1.0
   152c4:	vcmpe.f32	s0, s4
   152c8:	vmrs	APSR_nzcv, fpscr
   152cc:	bhi	152dc <__assert_fail@plt+0x3a50>
   152d0:	vcmpe.f32	s2, s0
   152d4:	vmrs	APSR_nzcv, fpscr
   152d8:	bxmi	lr
   152dc:	mov	r0, #0
   152e0:	str	r2, [r1, #20]
   152e4:	bx	lr
   152e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   152ec:	svccc	0x00666666
   152f0:	svccc	0x008ccccd
   152f4:	ldrb	r2, [r1, #16]
   152f8:	cmp	r2, #0
   152fc:	bne	1532c <__assert_fail@plt+0x3aa0>
   15300:	vmov	s2, r0
   15304:	vldr	s0, [r1, #8]
   15308:	vldr	s4, [pc, #156]	; 153ac <__assert_fail@plt+0x3b20>
   1530c:	mov	r0, #0
   15310:	vcvt.f32.u32	s2, s2
   15314:	vdiv.f32	s2, s2, s0
   15318:	vcmpe.f32	s2, s4
   1531c:	vcvt.u32.f32	s0, s2
   15320:	vmrs	APSR_nzcv, fpscr
   15324:	bxge	lr
   15328:	vmov	r0, s0
   1532c:	cmp	r0, #10
   15330:	movls	r0, #10
   15334:	orr	r0, r0, #1
   15338:	cmn	r0, #1
   1533c:	beq	15398 <__assert_fail@plt+0x3b0c>
   15340:	mov	r1, #3
   15344:	cmp	r0, #10
   15348:	bcc	15380 <__assert_fail@plt+0x3af4>
   1534c:	mov	r1, #3
   15350:	mov	ip, #9
   15354:	mov	r2, #12
   15358:	udiv	r3, r0, r1
   1535c:	mls	r3, r3, r1, r0
   15360:	cmp	r3, #0
   15364:	beq	15380 <__assert_fail@plt+0x3af4>
   15368:	add	r3, ip, r2
   1536c:	add	r2, r2, #8
   15370:	add	r1, r1, #2
   15374:	add	ip, r3, #4
   15378:	cmp	ip, r0
   1537c:	bcc	15358 <__assert_fail@plt+0x3acc>
   15380:	udiv	r2, r0, r1
   15384:	mls	r1, r2, r1, r0
   15388:	cmp	r1, #0
   1538c:	bne	153a0 <__assert_fail@plt+0x3b14>
   15390:	add	r0, r0, #2
   15394:	b	15338 <__assert_fail@plt+0x3aac>
   15398:	mov	r0, #0
   1539c:	bx	lr
   153a0:	cmp	r0, #536870912	; 0x20000000
   153a4:	movcs	r0, #0
   153a8:	bx	lr
   153ac:	svcmi	0x00800000
   153b0:	push	{r4, r5, r6, r7, fp, lr}
   153b4:	add	fp, sp, #16
   153b8:	mov	r4, r0
   153bc:	ldr	r5, [r0]
   153c0:	ldr	r0, [r0, #4]
   153c4:	cmp	r5, r0
   153c8:	bcs	15460 <__assert_fail@plt+0x3bd4>
   153cc:	mov	r6, #0
   153d0:	ldr	r1, [r5]
   153d4:	cmp	r1, #0
   153d8:	beq	15454 <__assert_fail@plt+0x3bc8>
   153dc:	ldr	r1, [r4, #32]
   153e0:	ldr	r7, [r5, #4]
   153e4:	cmp	r1, #0
   153e8:	mov	r0, r1
   153ec:	movwne	r0, #1
   153f0:	cmp	r7, #0
   153f4:	beq	15438 <__assert_fail@plt+0x3bac>
   153f8:	tst	r0, #1
   153fc:	beq	1540c <__assert_fail@plt+0x3b80>
   15400:	ldr	r0, [r7]
   15404:	blx	r1
   15408:	ldr	r1, [r4, #32]
   1540c:	str	r6, [r7]
   15410:	cmp	r1, #0
   15414:	ldr	r2, [r7, #4]
   15418:	ldr	r0, [r4, #36]	; 0x24
   1541c:	str	r0, [r7, #4]
   15420:	mov	r0, r1
   15424:	str	r7, [r4, #36]	; 0x24
   15428:	movwne	r0, #1
   1542c:	cmp	r2, #0
   15430:	mov	r7, r2
   15434:	bne	153f8 <__assert_fail@plt+0x3b6c>
   15438:	cmp	r0, #0
   1543c:	beq	15448 <__assert_fail@plt+0x3bbc>
   15440:	ldr	r0, [r5]
   15444:	blx	r1
   15448:	str	r6, [r5]
   1544c:	str	r6, [r5, #4]
   15450:	ldr	r0, [r4, #4]
   15454:	add	r5, r5, #8
   15458:	cmp	r5, r0
   1545c:	bcc	153d0 <__assert_fail@plt+0x3b44>
   15460:	mov	r0, #0
   15464:	str	r0, [r4, #12]
   15468:	str	r0, [r4, #16]
   1546c:	pop	{r4, r5, r6, r7, fp, pc}
   15470:	push	{r4, r5, r6, sl, fp, lr}
   15474:	add	fp, sp, #16
   15478:	mov	r4, r0
   1547c:	ldr	r0, [r0, #32]
   15480:	cmp	r0, #0
   15484:	beq	154e8 <__assert_fail@plt+0x3c5c>
   15488:	ldr	r0, [r4, #16]
   1548c:	cmp	r0, #0
   15490:	beq	154e8 <__assert_fail@plt+0x3c5c>
   15494:	ldr	r5, [r4]
   15498:	ldr	r1, [r4, #4]
   1549c:	cmp	r5, r1
   154a0:	bcs	154e8 <__assert_fail@plt+0x3c5c>
   154a4:	ldr	r0, [r5]
   154a8:	cmp	r0, #0
   154ac:	cmpne	r5, #0
   154b0:	beq	154e0 <__assert_fail@plt+0x3c54>
   154b4:	ldr	r1, [r4, #32]
   154b8:	blx	r1
   154bc:	ldr	r6, [r5, #4]
   154c0:	cmp	r6, #0
   154c4:	beq	154dc <__assert_fail@plt+0x3c50>
   154c8:	ldr	r1, [r4, #32]
   154cc:	ldr	r0, [r6]
   154d0:	blx	r1
   154d4:	ldr	r6, [r6, #4]
   154d8:	b	154c0 <__assert_fail@plt+0x3c34>
   154dc:	ldr	r1, [r4, #4]
   154e0:	add	r5, r5, #8
   154e4:	b	1549c <__assert_fail@plt+0x3c10>
   154e8:	ldr	r5, [r4]
   154ec:	ldr	r1, [r4, #4]
   154f0:	cmp	r5, r1
   154f4:	bcs	15524 <__assert_fail@plt+0x3c98>
   154f8:	ldr	r0, [r5, #4]
   154fc:	cmp	r0, #0
   15500:	beq	1551c <__assert_fail@plt+0x3c90>
   15504:	ldr	r6, [r0, #4]
   15508:	bl	19108 <__assert_fail@plt+0x787c>
   1550c:	cmp	r6, #0
   15510:	mov	r0, r6
   15514:	bne	15504 <__assert_fail@plt+0x3c78>
   15518:	ldr	r1, [r4, #4]
   1551c:	add	r5, r5, #8
   15520:	b	154f0 <__assert_fail@plt+0x3c64>
   15524:	ldr	r0, [r4, #36]	; 0x24
   15528:	cmp	r0, #0
   1552c:	beq	15544 <__assert_fail@plt+0x3cb8>
   15530:	ldr	r5, [r0, #4]
   15534:	bl	19108 <__assert_fail@plt+0x787c>
   15538:	cmp	r5, #0
   1553c:	mov	r0, r5
   15540:	bne	15530 <__assert_fail@plt+0x3ca4>
   15544:	ldr	r0, [r4]
   15548:	bl	19108 <__assert_fail@plt+0x787c>
   1554c:	mov	r0, r4
   15550:	pop	{r4, r5, r6, sl, fp, lr}
   15554:	b	19108 <__assert_fail@plt+0x787c>
   15558:	push	{r4, r5, r6, r7, fp, lr}
   1555c:	add	fp, sp, #16
   15560:	sub	sp, sp, #40	; 0x28
   15564:	mov	r7, r0
   15568:	mov	r2, r1
   1556c:	mov	r4, r0
   15570:	ldr	r1, [r7, #20]!
   15574:	mov	r0, r2
   15578:	bl	152f4 <__assert_fail@plt+0x3a68>
   1557c:	mov	r5, #0
   15580:	cmp	r0, #0
   15584:	beq	15618 <__assert_fail@plt+0x3d8c>
   15588:	mov	r6, r0
   1558c:	ldr	r0, [r4, #8]
   15590:	cmp	r6, r0
   15594:	beq	15614 <__assert_fail@plt+0x3d88>
   15598:	mov	r0, r6
   1559c:	mov	r1, #8
   155a0:	bl	18a98 <__assert_fail@plt+0x720c>
   155a4:	cmp	r0, #0
   155a8:	str	r0, [sp]
   155ac:	beq	15618 <__assert_fail@plt+0x3d8c>
   155b0:	add	r0, r0, r6, lsl #3
   155b4:	mov	r1, #0
   155b8:	mov	r5, sp
   155bc:	mov	r2, #0
   155c0:	str	r1, [sp, #16]
   155c4:	str	r1, [sp, #12]
   155c8:	str	r6, [sp, #8]
   155cc:	mov	r1, r4
   155d0:	str	r0, [sp, #4]
   155d4:	add	r0, r5, #20
   155d8:	vld1.32	{d16-d17}, [r7]
   155dc:	vst1.32	{d16-d17}, [r0]
   155e0:	ldr	r0, [r4, #36]	; 0x24
   155e4:	str	r0, [sp, #36]	; 0x24
   155e8:	mov	r0, r5
   155ec:	bl	15670 <__assert_fail@plt+0x3de4>
   155f0:	cmp	r0, #0
   155f4:	beq	15624 <__assert_fail@plt+0x3d98>
   155f8:	ldr	r0, [r4]
   155fc:	bl	19108 <__assert_fail@plt+0x787c>
   15600:	mov	r0, #36	; 0x24
   15604:	vld1.32	{d16-d17}, [r5], r0
   15608:	vst1.32	{d16-d17}, [r4], r0
   1560c:	ldr	r0, [r5]
   15610:	str	r0, [r4]
   15614:	mov	r5, #1
   15618:	mov	r0, r5
   1561c:	sub	sp, fp, #16
   15620:	pop	{r4, r5, r6, r7, fp, pc}
   15624:	ldr	r0, [sp, #36]	; 0x24
   15628:	mov	r1, sp
   1562c:	mov	r2, #1
   15630:	str	r0, [r4, #36]	; 0x24
   15634:	mov	r0, r4
   15638:	bl	15670 <__assert_fail@plt+0x3de4>
   1563c:	cmp	r0, #0
   15640:	beq	1566c <__assert_fail@plt+0x3de0>
   15644:	mov	r1, sp
   15648:	mov	r0, r4
   1564c:	mov	r2, #0
   15650:	mov	r5, #0
   15654:	bl	15670 <__assert_fail@plt+0x3de4>
   15658:	cmp	r0, #0
   1565c:	beq	1566c <__assert_fail@plt+0x3de0>
   15660:	ldr	r0, [sp]
   15664:	bl	19108 <__assert_fail@plt+0x787c>
   15668:	b	15618 <__assert_fail@plt+0x3d8c>
   1566c:	bl	11850 <abort@plt>
   15670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15674:	add	fp, sp, #28
   15678:	sub	sp, sp, #12
   1567c:	ldr	sl, [r1]
   15680:	str	r1, [sp, #8]
   15684:	ldr	r1, [r1, #4]
   15688:	mov	r7, r0
   1568c:	mov	r0, #1
   15690:	str	r2, [sp, #4]
   15694:	cmp	sl, r1
   15698:	bcs	157ec <__assert_fail@plt+0x3f60>
   1569c:	add	r8, r7, #36	; 0x24
   156a0:	mov	r9, #0
   156a4:	ldr	r4, [sl]
   156a8:	cmp	r4, #0
   156ac:	beq	157d4 <__assert_fail@plt+0x3f48>
   156b0:	ldr	r5, [sl, #4]
   156b4:	cmp	r5, #0
   156b8:	beq	15730 <__assert_fail@plt+0x3ea4>
   156bc:	ldr	r1, [r7, #8]
   156c0:	ldr	r4, [r5]
   156c4:	ldr	r2, [r7, #24]
   156c8:	mov	r0, r4
   156cc:	blx	r2
   156d0:	ldr	r1, [r7, #8]
   156d4:	cmp	r0, r1
   156d8:	bcs	157fc <__assert_fail@plt+0x3f70>
   156dc:	ldr	r3, [r7]
   156e0:	ldr	r2, [r5, #4]
   156e4:	ldr	r6, [r3, r0, lsl #3]
   156e8:	cmp	r6, #0
   156ec:	beq	156fc <__assert_fail@plt+0x3e70>
   156f0:	add	r0, r3, r0, lsl #3
   156f4:	add	r0, r0, #4
   156f8:	b	15714 <__assert_fail@plt+0x3e88>
   156fc:	str	r4, [r3, r0, lsl #3]
   15700:	ldr	r0, [r7, #12]
   15704:	add	r0, r0, #1
   15708:	str	r0, [r7, #12]
   1570c:	mov	r0, r8
   15710:	str	r9, [r5]
   15714:	ldr	r3, [r0]
   15718:	cmp	r2, #0
   1571c:	str	r3, [r5, #4]
   15720:	str	r5, [r0]
   15724:	mov	r5, r2
   15728:	bne	156c0 <__assert_fail@plt+0x3e34>
   1572c:	ldr	r4, [sl]
   15730:	ldr	r0, [sp, #4]
   15734:	str	r9, [sl, #4]
   15738:	cmp	r0, #0
   1573c:	bne	157d4 <__assert_fail@plt+0x3f48>
   15740:	ldr	r1, [r7, #8]
   15744:	ldr	r2, [r7, #24]
   15748:	mov	r0, r4
   1574c:	blx	r2
   15750:	mov	r5, r0
   15754:	ldr	r0, [r7, #8]
   15758:	cmp	r5, r0
   1575c:	bcs	157fc <__assert_fail@plt+0x3f70>
   15760:	ldr	r6, [r7]
   15764:	ldr	r0, [r6, r5, lsl #3]
   15768:	cmp	r0, #0
   1576c:	beq	15788 <__assert_fail@plt+0x3efc>
   15770:	ldr	r0, [r8]
   15774:	cmp	r0, #0
   15778:	beq	1579c <__assert_fail@plt+0x3f10>
   1577c:	ldr	r1, [r0, #4]
   15780:	str	r1, [r8]
   15784:	b	157ac <__assert_fail@plt+0x3f20>
   15788:	str	r4, [r6, r5, lsl #3]
   1578c:	ldr	r0, [r7, #12]
   15790:	add	r0, r0, #1
   15794:	str	r0, [r7, #12]
   15798:	b	157c0 <__assert_fail@plt+0x3f34>
   1579c:	mov	r0, #8
   157a0:	bl	18aec <__assert_fail@plt+0x7260>
   157a4:	cmp	r0, #0
   157a8:	beq	157f4 <__assert_fail@plt+0x3f68>
   157ac:	add	r1, r6, r5, lsl #3
   157b0:	str	r4, [r0]
   157b4:	ldr	r2, [r1, #4]
   157b8:	str	r2, [r0, #4]
   157bc:	str	r0, [r1, #4]
   157c0:	ldr	r1, [sp, #8]
   157c4:	str	r9, [sl]
   157c8:	ldr	r0, [r1, #12]
   157cc:	sub	r0, r0, #1
   157d0:	str	r0, [r1, #12]
   157d4:	ldr	r0, [sp, #8]
   157d8:	add	sl, sl, #8
   157dc:	ldr	r0, [r0, #4]
   157e0:	cmp	sl, r0
   157e4:	bcc	156a4 <__assert_fail@plt+0x3e18>
   157e8:	mov	r0, #1
   157ec:	sub	sp, fp, #28
   157f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f4:	mov	r0, #0
   157f8:	b	157ec <__assert_fail@plt+0x3f60>
   157fc:	bl	11850 <abort@plt>
   15800:	push	{r4, r5, r6, r7, fp, lr}
   15804:	add	fp, sp, #16
   15808:	sub	sp, sp, #8
   1580c:	cmp	r1, #0
   15810:	beq	15988 <__assert_fail@plt+0x40fc>
   15814:	mov	r7, r2
   15818:	add	r2, sp, #4
   1581c:	mov	r3, #0
   15820:	mov	r5, r1
   15824:	mov	r4, r0
   15828:	mov	r6, #0
   1582c:	bl	15990 <__assert_fail@plt+0x4104>
   15830:	cmp	r0, #0
   15834:	beq	15844 <__assert_fail@plt+0x3fb8>
   15838:	cmp	r7, #0
   1583c:	strne	r0, [r7]
   15840:	b	15974 <__assert_fail@plt+0x40e8>
   15844:	vldr	s0, [r4, #8]
   15848:	ldr	r0, [r4, #20]
   1584c:	vldr	s2, [r4, #12]
   15850:	vldr	s4, [r0, #8]
   15854:	vcvt.f32.u32	s0, s0
   15858:	vcvt.f32.u32	s2, s2
   1585c:	vmul.f32	s0, s4, s0
   15860:	vcmpe.f32	s0, s2
   15864:	vmrs	APSR_nzcv, fpscr
   15868:	bpl	158fc <__assert_fail@plt+0x4070>
   1586c:	mov	r0, r4
   15870:	bl	15248 <__assert_fail@plt+0x39bc>
   15874:	vldr	s0, [r4, #8]
   15878:	ldr	r0, [r4, #20]
   1587c:	vldr	s4, [r4, #12]
   15880:	vcvt.f32.u32	s2, s0
   15884:	vldr	s0, [r0, #8]
   15888:	vcvt.f32.u32	s4, s4
   1588c:	vmul.f32	s6, s0, s2
   15890:	vcmpe.f32	s6, s4
   15894:	vmrs	APSR_nzcv, fpscr
   15898:	bpl	158fc <__assert_fail@plt+0x4070>
   1589c:	vldr	s4, [r0, #12]
   158a0:	ldrb	r0, [r0, #16]
   158a4:	mvn	r6, #0
   158a8:	cmp	r0, #0
   158ac:	vmul.f32	s2, s4, s2
   158b0:	vldr	s4, [pc, #212]	; 1598c <__assert_fail@plt+0x4100>
   158b4:	vmul.f32	s0, s0, s2
   158b8:	vseleq.f32	s0, s0, s2
   158bc:	vcmpe.f32	s0, s4
   158c0:	vmrs	APSR_nzcv, fpscr
   158c4:	bge	15974 <__assert_fail@plt+0x40e8>
   158c8:	vcvt.u32.f32	s0, s0
   158cc:	mov	r0, r4
   158d0:	vmov	r1, s0
   158d4:	bl	15558 <__assert_fail@plt+0x3ccc>
   158d8:	cmp	r0, #0
   158dc:	beq	15974 <__assert_fail@plt+0x40e8>
   158e0:	add	r2, sp, #4
   158e4:	mov	r0, r4
   158e8:	mov	r1, r5
   158ec:	mov	r3, #0
   158f0:	bl	15990 <__assert_fail@plt+0x4104>
   158f4:	cmp	r0, #0
   158f8:	bne	15988 <__assert_fail@plt+0x40fc>
   158fc:	ldr	r6, [sp, #4]
   15900:	ldr	r0, [r6]
   15904:	cmp	r0, #0
   15908:	beq	15924 <__assert_fail@plt+0x4098>
   1590c:	ldr	r0, [r4, #36]	; 0x24
   15910:	cmp	r0, #0
   15914:	beq	15944 <__assert_fail@plt+0x40b8>
   15918:	ldr	r1, [r0, #4]
   1591c:	str	r1, [r4, #36]	; 0x24
   15920:	b	15954 <__assert_fail@plt+0x40c8>
   15924:	str	r5, [r6]
   15928:	ldr	r0, [r4, #12]
   1592c:	ldr	r1, [r4, #16]
   15930:	add	r0, r0, #1
   15934:	add	r1, r1, #1
   15938:	str	r0, [r4, #12]
   1593c:	str	r1, [r4, #16]
   15940:	b	15970 <__assert_fail@plt+0x40e4>
   15944:	mov	r0, #8
   15948:	bl	18aec <__assert_fail@plt+0x7260>
   1594c:	cmp	r0, #0
   15950:	beq	15980 <__assert_fail@plt+0x40f4>
   15954:	str	r5, [r0]
   15958:	ldr	r1, [r6, #4]
   1595c:	str	r1, [r0, #4]
   15960:	str	r0, [r6, #4]
   15964:	ldr	r0, [r4, #16]
   15968:	add	r0, r0, #1
   1596c:	str	r0, [r4, #16]
   15970:	mov	r6, #1
   15974:	mov	r0, r6
   15978:	sub	sp, fp, #16
   1597c:	pop	{r4, r5, r6, r7, fp, pc}
   15980:	mvn	r6, #0
   15984:	b	15974 <__assert_fail@plt+0x40e8>
   15988:	bl	11850 <abort@plt>
   1598c:	svcmi	0x00800000
   15990:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15994:	add	fp, sp, #24
   15998:	mov	r7, r2
   1599c:	mov	r4, r1
   159a0:	ldr	r1, [r0, #8]
   159a4:	ldr	r2, [r0, #24]
   159a8:	mov	r5, r0
   159ac:	mov	r8, r3
   159b0:	mov	r0, r4
   159b4:	blx	r2
   159b8:	ldr	r1, [r5, #8]
   159bc:	cmp	r0, r1
   159c0:	bcs	15abc <__assert_fail@plt+0x4230>
   159c4:	ldr	r1, [r5]
   159c8:	add	r6, r1, r0, lsl #3
   159cc:	str	r6, [r7]
   159d0:	ldr	r1, [r1, r0, lsl #3]
   159d4:	cmp	r1, #0
   159d8:	beq	15a70 <__assert_fail@plt+0x41e4>
   159dc:	cmp	r1, r4
   159e0:	beq	159fc <__assert_fail@plt+0x4170>
   159e4:	ldr	r2, [r5, #28]
   159e8:	mov	r0, r4
   159ec:	blx	r2
   159f0:	cmp	r0, #0
   159f4:	beq	15a30 <__assert_fail@plt+0x41a4>
   159f8:	ldr	r4, [r6]
   159fc:	cmp	r8, #0
   15a00:	beq	15a74 <__assert_fail@plt+0x41e8>
   15a04:	ldr	r0, [r6, #4]
   15a08:	cmp	r0, #0
   15a0c:	beq	15a7c <__assert_fail@plt+0x41f0>
   15a10:	ldm	r0, {r1, r2}
   15a14:	stm	r6, {r1, r2}
   15a18:	mov	r1, #0
   15a1c:	str	r1, [r0]
   15a20:	ldr	r1, [r5, #36]	; 0x24
   15a24:	str	r1, [r0, #4]
   15a28:	str	r0, [r5, #36]	; 0x24
   15a2c:	b	15a74 <__assert_fail@plt+0x41e8>
   15a30:	ldr	r0, [r6, #4]!
   15a34:	cmp	r0, #0
   15a38:	beq	15a70 <__assert_fail@plt+0x41e4>
   15a3c:	ldr	r1, [r0]
   15a40:	cmp	r1, r4
   15a44:	beq	15a88 <__assert_fail@plt+0x41fc>
   15a48:	ldr	r2, [r5, #28]
   15a4c:	mov	r0, r4
   15a50:	blx	r2
   15a54:	ldr	r1, [r6]
   15a58:	cmp	r0, #0
   15a5c:	bne	15a90 <__assert_fail@plt+0x4204>
   15a60:	ldr	r0, [r1, #4]!
   15a64:	mov	r6, r1
   15a68:	cmp	r0, #0
   15a6c:	bne	15a3c <__assert_fail@plt+0x41b0>
   15a70:	mov	r4, #0
   15a74:	mov	r0, r4
   15a78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a7c:	mov	r0, #0
   15a80:	str	r0, [r6]
   15a84:	b	15a74 <__assert_fail@plt+0x41e8>
   15a88:	mov	r1, r0
   15a8c:	b	15a94 <__assert_fail@plt+0x4208>
   15a90:	ldr	r4, [r1]
   15a94:	cmp	r8, #0
   15a98:	beq	15a74 <__assert_fail@plt+0x41e8>
   15a9c:	ldr	r0, [r1, #4]
   15aa0:	str	r0, [r6]
   15aa4:	mov	r0, #0
   15aa8:	str	r0, [r1]
   15aac:	ldr	r0, [r5, #36]	; 0x24
   15ab0:	str	r0, [r1, #4]
   15ab4:	str	r1, [r5, #36]	; 0x24
   15ab8:	b	15a74 <__assert_fail@plt+0x41e8>
   15abc:	bl	11850 <abort@plt>
   15ac0:	push	{r4, sl, fp, lr}
   15ac4:	add	fp, sp, #8
   15ac8:	sub	sp, sp, #8
   15acc:	add	r2, sp, #4
   15ad0:	mov	r4, r1
   15ad4:	bl	15800 <__assert_fail@plt+0x3f74>
   15ad8:	cmn	r0, #1
   15adc:	beq	15af0 <__assert_fail@plt+0x4264>
   15ae0:	ldr	r1, [sp, #4]
   15ae4:	cmp	r0, #0
   15ae8:	moveq	r4, r1
   15aec:	b	15af4 <__assert_fail@plt+0x4268>
   15af0:	mov	r4, #0
   15af4:	mov	r0, r4
   15af8:	sub	sp, fp, #8
   15afc:	pop	{r4, sl, fp, pc}
   15b00:	push	{r4, r5, r6, sl, fp, lr}
   15b04:	add	fp, sp, #16
   15b08:	sub	sp, sp, #8
   15b0c:	add	r2, sp, #4
   15b10:	mov	r3, #1
   15b14:	mov	r4, r0
   15b18:	bl	15990 <__assert_fail@plt+0x4104>
   15b1c:	mov	r5, r0
   15b20:	cmp	r0, #0
   15b24:	beq	15c04 <__assert_fail@plt+0x4378>
   15b28:	ldr	r0, [r4, #16]
   15b2c:	sub	r0, r0, #1
   15b30:	str	r0, [r4, #16]
   15b34:	ldr	r0, [sp, #4]
   15b38:	ldr	r0, [r0]
   15b3c:	cmp	r0, #0
   15b40:	bne	15c04 <__assert_fail@plt+0x4378>
   15b44:	ldr	r0, [r4, #12]
   15b48:	vldr	s0, [r4, #8]
   15b4c:	sub	r0, r0, #1
   15b50:	str	r0, [r4, #12]
   15b54:	vmov	s4, r0
   15b58:	ldr	r1, [r4, #20]
   15b5c:	vldr	s2, [r1]
   15b60:	vcvt.f32.u32	s0, s0
   15b64:	vcvt.f32.u32	s4, s4
   15b68:	vmul.f32	s0, s2, s0
   15b6c:	vcmpe.f32	s0, s4
   15b70:	vmrs	APSR_nzcv, fpscr
   15b74:	ble	15c04 <__assert_fail@plt+0x4378>
   15b78:	mov	r0, r4
   15b7c:	bl	15248 <__assert_fail@plt+0x39bc>
   15b80:	vldr	s0, [r4, #8]
   15b84:	ldr	r0, [r4, #20]
   15b88:	vldr	s2, [r4, #12]
   15b8c:	vcvt.f32.u32	s0, s0
   15b90:	vldr	s4, [r0]
   15b94:	vcvt.f32.u32	s2, s2
   15b98:	vmul.f32	s4, s4, s0
   15b9c:	vcmpe.f32	s4, s2
   15ba0:	vmrs	APSR_nzcv, fpscr
   15ba4:	ble	15c04 <__assert_fail@plt+0x4378>
   15ba8:	vldr	s2, [r0, #4]
   15bac:	ldrb	r1, [r0, #16]
   15bb0:	cmp	r1, #0
   15bb4:	vmul.f32	s0, s2, s0
   15bb8:	bne	15bc4 <__assert_fail@plt+0x4338>
   15bbc:	vldr	s2, [r0, #8]
   15bc0:	vmul.f32	s0, s0, s2
   15bc4:	vcvt.u32.f32	s0, s0
   15bc8:	mov	r0, r4
   15bcc:	vmov	r1, s0
   15bd0:	bl	15558 <__assert_fail@plt+0x3ccc>
   15bd4:	cmp	r0, #0
   15bd8:	bne	15c04 <__assert_fail@plt+0x4378>
   15bdc:	ldr	r0, [r4, #36]	; 0x24
   15be0:	cmp	r0, #0
   15be4:	beq	15bfc <__assert_fail@plt+0x4370>
   15be8:	ldr	r6, [r0, #4]
   15bec:	bl	19108 <__assert_fail@plt+0x787c>
   15bf0:	cmp	r6, #0
   15bf4:	mov	r0, r6
   15bf8:	bne	15be8 <__assert_fail@plt+0x435c>
   15bfc:	mov	r0, #0
   15c00:	str	r0, [r4, #36]	; 0x24
   15c04:	mov	r0, r5
   15c08:	sub	sp, fp, #16
   15c0c:	pop	{r4, r5, r6, sl, fp, pc}
   15c10:	b	15b00 <__assert_fail@plt+0x4274>
   15c14:	vdup.32	q8, r1
   15c18:	mov	r2, #0
   15c1c:	str	r2, [r0, #20]
   15c20:	str	r2, [r0, #24]
   15c24:	mov	r2, #1
   15c28:	strb	r2, [r0, #28]
   15c2c:	vst1.32	{d16-d17}, [r0]!
   15c30:	str	r1, [r0]
   15c34:	bx	lr
   15c38:	ldrb	r0, [r0, #28]
   15c3c:	bx	lr
   15c40:	push	{fp, lr}
   15c44:	mov	fp, sp
   15c48:	ldrb	r3, [r0, #28]
   15c4c:	ldr	r2, [r0, #20]
   15c50:	eor	lr, r3, #1
   15c54:	add	r2, r2, lr
   15c58:	and	r3, r2, #3
   15c5c:	ldr	ip, [r0, r3, lsl #2]
   15c60:	str	r1, [r0, r3, lsl #2]
   15c64:	str	r3, [r0, #20]
   15c68:	ldr	r1, [r0, #24]
   15c6c:	cmp	r3, r1
   15c70:	addeq	r1, r2, lr
   15c74:	andeq	r1, r1, #3
   15c78:	streq	r1, [r0, #24]
   15c7c:	mov	r1, #0
   15c80:	strb	r1, [r0, #28]
   15c84:	mov	r0, ip
   15c88:	pop	{fp, pc}
   15c8c:	push	{fp, lr}
   15c90:	mov	fp, sp
   15c94:	ldrb	r1, [r0, #28]
   15c98:	cmp	r1, #0
   15c9c:	bne	15ce0 <__assert_fail@plt+0x4454>
   15ca0:	ldr	r3, [r0, #20]
   15ca4:	ldr	r2, [r0, #16]
   15ca8:	ldr	r1, [r0, r3, lsl #2]
   15cac:	str	r2, [r0, r3, lsl #2]
   15cb0:	ldr	r2, [r0, #20]
   15cb4:	ldr	r3, [r0, #24]
   15cb8:	cmp	r2, r3
   15cbc:	bne	15ccc <__assert_fail@plt+0x4440>
   15cc0:	mov	r2, #1
   15cc4:	strb	r2, [r0, #28]
   15cc8:	b	15cd8 <__assert_fail@plt+0x444c>
   15ccc:	sub	r2, r2, #1
   15cd0:	and	r2, r2, #3
   15cd4:	str	r2, [r0, #20]
   15cd8:	mov	r0, r1
   15cdc:	pop	{fp, pc}
   15ce0:	bl	11850 <abort@plt>
   15ce4:	sub	sp, sp, #4
   15ce8:	push	{fp, lr}
   15cec:	mov	fp, sp
   15cf0:	sub	sp, sp, #4
   15cf4:	str	r3, [fp, #8]
   15cf8:	tst	r2, #64	; 0x40
   15cfc:	mov	r3, #0
   15d00:	ldrne	r3, [fp, #8]
   15d04:	bl	116e8 <openat64@plt>
   15d08:	bl	180a4 <__assert_fail@plt+0x6818>
   15d0c:	mov	sp, fp
   15d10:	pop	{fp, lr}
   15d14:	add	sp, sp, #4
   15d18:	bx	lr
   15d1c:	push	{r4, r5, r6, sl, fp, lr}
   15d20:	add	fp, sp, #16
   15d24:	orr	r2, r2, #18688	; 0x4900
   15d28:	mov	r4, r3
   15d2c:	orr	r2, r2, #524288	; 0x80000
   15d30:	bl	15ce4 <__assert_fail@plt+0x4458>
   15d34:	mov	r5, r0
   15d38:	mov	r0, #0
   15d3c:	cmp	r5, #0
   15d40:	bmi	15d78 <__assert_fail@plt+0x44ec>
   15d44:	mov	r0, r5
   15d48:	bl	117cc <fdopendir@plt>
   15d4c:	cmp	r0, #0
   15d50:	beq	15d5c <__assert_fail@plt+0x44d0>
   15d54:	str	r5, [r4]
   15d58:	pop	{r4, r5, r6, sl, fp, pc}
   15d5c:	bl	11700 <__errno_location@plt>
   15d60:	ldr	r6, [r0]
   15d64:	mov	r4, r0
   15d68:	mov	r0, r5
   15d6c:	bl	1185c <close@plt>
   15d70:	mov	r0, #0
   15d74:	str	r6, [r4]
   15d78:	pop	{r4, r5, r6, sl, fp, pc}
   15d7c:	push	{r4, r5, fp, lr}
   15d80:	add	fp, sp, #8
   15d84:	cmp	r0, #0
   15d88:	beq	15e1c <__assert_fail@plt+0x4590>
   15d8c:	mov	r1, #47	; 0x2f
   15d90:	mov	r4, r0
   15d94:	bl	117a8 <strrchr@plt>
   15d98:	cmp	r0, #0
   15d9c:	mov	r5, r4
   15da0:	addne	r5, r0, #1
   15da4:	sub	r0, r5, r4
   15da8:	cmp	r0, #7
   15dac:	blt	15e00 <__assert_fail@plt+0x4574>
   15db0:	movw	r1, #43236	; 0xa8e4
   15db4:	sub	r0, r5, #7
   15db8:	mov	r2, #7
   15dbc:	movt	r1, #1
   15dc0:	bl	11844 <strncmp@plt>
   15dc4:	cmp	r0, #0
   15dc8:	bne	15e00 <__assert_fail@plt+0x4574>
   15dcc:	movw	r1, #43244	; 0xa8ec
   15dd0:	mov	r0, r5
   15dd4:	mov	r2, #3
   15dd8:	movt	r1, #1
   15ddc:	bl	11844 <strncmp@plt>
   15de0:	cmp	r0, #0
   15de4:	beq	15df0 <__assert_fail@plt+0x4564>
   15de8:	mov	r4, r5
   15dec:	b	15e00 <__assert_fail@plt+0x4574>
   15df0:	movw	r0, #45488	; 0xb1b0
   15df4:	add	r4, r5, #3
   15df8:	movt	r0, #2
   15dfc:	str	r4, [r0]
   15e00:	movw	r0, #45492	; 0xb1b4
   15e04:	movt	r0, #2
   15e08:	str	r4, [r0]
   15e0c:	movw	r0, #45580	; 0xb20c
   15e10:	movt	r0, #2
   15e14:	str	r4, [r0]
   15e18:	pop	{r4, r5, fp, pc}
   15e1c:	movw	r0, #45504	; 0xb1c0
   15e20:	movt	r0, #2
   15e24:	ldr	r1, [r0]
   15e28:	movw	r0, #43180	; 0xa8ac
   15e2c:	movt	r0, #1
   15e30:	bl	11838 <fputs@plt>
   15e34:	bl	11850 <abort@plt>
   15e38:	push	{r4, r5, r6, sl, fp, lr}
   15e3c:	add	fp, sp, #16
   15e40:	mov	r4, r0
   15e44:	movw	r0, #45584	; 0xb210
   15e48:	movt	r0, #2
   15e4c:	cmp	r4, #0
   15e50:	moveq	r4, r0
   15e54:	bl	11700 <__errno_location@plt>
   15e58:	ldr	r6, [r0]
   15e5c:	mov	r5, r0
   15e60:	mov	r0, r4
   15e64:	mov	r1, #48	; 0x30
   15e68:	bl	188fc <__assert_fail@plt+0x7070>
   15e6c:	str	r6, [r5]
   15e70:	pop	{r4, r5, r6, sl, fp, pc}
   15e74:	movw	r1, #45584	; 0xb210
   15e78:	cmp	r0, #0
   15e7c:	movt	r1, #2
   15e80:	movne	r1, r0
   15e84:	ldr	r0, [r1]
   15e88:	bx	lr
   15e8c:	movw	r2, #45584	; 0xb210
   15e90:	cmp	r0, #0
   15e94:	movt	r2, #2
   15e98:	movne	r2, r0
   15e9c:	str	r1, [r2]
   15ea0:	bx	lr
   15ea4:	movw	r3, #45584	; 0xb210
   15ea8:	cmp	r0, #0
   15eac:	and	r2, r2, #1
   15eb0:	movt	r3, #2
   15eb4:	movne	r3, r0
   15eb8:	ubfx	r0, r1, #5, #3
   15ebc:	and	r1, r1, #31
   15ec0:	add	ip, r3, r0, lsl #2
   15ec4:	mov	r0, #1
   15ec8:	ldr	r3, [ip, #8]
   15ecc:	and	r0, r0, r3, lsr r1
   15ed0:	eor	r2, r0, r2
   15ed4:	eor	r1, r3, r2, lsl r1
   15ed8:	str	r1, [ip, #8]
   15edc:	bx	lr
   15ee0:	movw	r2, #45584	; 0xb210
   15ee4:	cmp	r0, #0
   15ee8:	movt	r2, #2
   15eec:	movne	r2, r0
   15ef0:	ldr	r0, [r2, #4]
   15ef4:	str	r1, [r2, #4]
   15ef8:	bx	lr
   15efc:	push	{fp, lr}
   15f00:	mov	fp, sp
   15f04:	movw	r3, #45584	; 0xb210
   15f08:	cmp	r0, #0
   15f0c:	movt	r3, #2
   15f10:	movne	r3, r0
   15f14:	cmp	r1, #0
   15f18:	mov	r0, #10
   15f1c:	cmpne	r2, #0
   15f20:	str	r0, [r3]
   15f24:	bne	15f2c <__assert_fail@plt+0x46a0>
   15f28:	bl	11850 <abort@plt>
   15f2c:	str	r1, [r3, #40]	; 0x28
   15f30:	str	r2, [r3, #44]	; 0x2c
   15f34:	pop	{fp, pc}
   15f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f3c:	add	fp, sp, #28
   15f40:	sub	sp, sp, #20
   15f44:	mov	r7, r0
   15f48:	ldr	r0, [fp, #8]
   15f4c:	movw	r5, #45584	; 0xb210
   15f50:	mov	r8, r3
   15f54:	mov	r9, r2
   15f58:	mov	sl, r1
   15f5c:	movt	r5, #2
   15f60:	cmp	r0, #0
   15f64:	movne	r5, r0
   15f68:	bl	11700 <__errno_location@plt>
   15f6c:	ldr	r2, [r5, #40]	; 0x28
   15f70:	ldr	r3, [r5, #44]	; 0x2c
   15f74:	mov	r4, r0
   15f78:	ldm	r5, {r0, r1}
   15f7c:	add	r5, r5, #8
   15f80:	ldr	r6, [r4]
   15f84:	stm	sp, {r0, r1, r5}
   15f88:	mov	r0, r7
   15f8c:	mov	r1, sl
   15f90:	str	r2, [sp, #12]
   15f94:	str	r3, [sp, #16]
   15f98:	mov	r2, r9
   15f9c:	mov	r3, r8
   15fa0:	bl	15fb0 <__assert_fail@plt+0x4724>
   15fa4:	str	r6, [r4]
   15fa8:	sub	sp, fp, #28
   15fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fb4:	add	fp, sp, #28
   15fb8:	sub	sp, sp, #156	; 0x9c
   15fbc:	mov	r5, r0
   15fc0:	add	r0, r2, #1
   15fc4:	mov	r6, r1
   15fc8:	mov	sl, r3
   15fcc:	str	r2, [fp, #-80]	; 0xffffffb0
   15fd0:	str	r0, [sp, #72]	; 0x48
   15fd4:	ldr	r0, [fp, #12]
   15fd8:	and	r1, r0, #1
   15fdc:	str	r1, [sp, #32]
   15fe0:	and	r1, r0, #4
   15fe4:	str	r1, [sp, #28]
   15fe8:	ubfx	r9, r0, #1, #1
   15fec:	bl	115e0 <__ctype_get_mb_cur_max@plt>
   15ff0:	str	r0, [sp, #40]	; 0x28
   15ff4:	ldr	r0, [fp, #24]
   15ff8:	ldr	r7, [fp, #8]
   15ffc:	mov	r1, #0
   16000:	mov	lr, #0
   16004:	str	r5, [fp, #-84]	; 0xffffffac
   16008:	str	r1, [sp, #60]	; 0x3c
   1600c:	mov	r1, #1
   16010:	str	r1, [fp, #-48]	; 0xffffffd0
   16014:	str	r0, [sp, #80]	; 0x50
   16018:	ldr	r0, [fp, #20]
   1601c:	str	r0, [sp, #76]	; 0x4c
   16020:	mov	r0, #0
   16024:	str	r0, [sp, #56]	; 0x38
   16028:	mov	r0, #0
   1602c:	str	r0, [fp, #-88]	; 0xffffffa8
   16030:	mov	r0, #0
   16034:	str	r0, [fp, #-72]	; 0xffffffb8
   16038:	mov	r0, #0
   1603c:	cmp	r7, #10
   16040:	bhi	1701c <__assert_fail@plt+0x5790>
   16044:	add	r1, pc, #24
   16048:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1604c:	mov	ip, r6
   16050:	mov	r8, #0
   16054:	mov	r2, #1
   16058:	mov	r6, #0
   1605c:	mov	r3, sl
   16060:	ldr	pc, [r1, r7, lsl #2]
   16064:	andeq	r6, r1, r0, asr r1
   16068:	andeq	r6, r1, r4, lsr #3
   1606c:	andeq	r6, r1, r4, ror #2
   16070:	andeq	r6, r1, r8, asr #2
   16074:	muleq	r1, r8, r1
   16078:	andeq	r6, r1, ip, asr #3
   1607c:	andeq	r6, r1, r4, ror r1
   16080:	andeq	r6, r1, r0, asr r2
   16084:	muleq	r1, r0, r0
   16088:	muleq	r1, r0, r0
   1608c:	ldrdeq	r6, [r1], -r0
   16090:	movw	r0, #43326	; 0xa93e
   16094:	mov	r1, r7
   16098:	mov	r6, r5
   1609c:	mov	r4, ip
   160a0:	mov	r5, lr
   160a4:	movt	r0, #1
   160a8:	bl	17780 <__assert_fail@plt+0x5ef4>
   160ac:	str	r0, [sp, #76]	; 0x4c
   160b0:	movw	r0, #44673	; 0xae81
   160b4:	mov	r1, r7
   160b8:	movt	r0, #1
   160bc:	bl	17780 <__assert_fail@plt+0x5ef4>
   160c0:	mov	lr, r5
   160c4:	mov	r5, r6
   160c8:	mov	ip, r4
   160cc:	str	r0, [sp, #80]	; 0x50
   160d0:	mov	r8, #0
   160d4:	tst	r9, #1
   160d8:	str	lr, [sp, #44]	; 0x2c
   160dc:	bne	16114 <__assert_fail@plt+0x4888>
   160e0:	ldr	r0, [sp, #76]	; 0x4c
   160e4:	ldrb	r0, [r0]
   160e8:	cmp	r0, #0
   160ec:	beq	16114 <__assert_fail@plt+0x4888>
   160f0:	ldr	r1, [sp, #76]	; 0x4c
   160f4:	mov	r8, #0
   160f8:	add	r1, r1, #1
   160fc:	cmp	r8, ip
   16100:	strbcc	r0, [r5, r8]
   16104:	ldrb	r0, [r1, r8]
   16108:	add	r8, r8, #1
   1610c:	cmp	r0, #0
   16110:	bne	160fc <__assert_fail@plt+0x4870>
   16114:	ldr	r6, [sp, #80]	; 0x50
   16118:	mov	r4, ip
   1611c:	mov	r0, r6
   16120:	bl	116dc <strlen@plt>
   16124:	mov	ip, r4
   16128:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1612c:	ldr	lr, [sp, #44]	; 0x2c
   16130:	str	r6, [fp, #-88]	; 0xffffffa8
   16134:	str	r0, [fp, #-72]	; 0xffffffb8
   16138:	mov	r2, #1
   1613c:	mov	r6, r9
   16140:	mov	r3, sl
   16144:	b	16250 <__assert_fail@plt+0x49c4>
   16148:	mov	r0, #1
   1614c:	b	161a4 <__assert_fail@plt+0x4918>
   16150:	mov	r7, #0
   16154:	mov	r8, #0
   16158:	mov	r2, r0
   1615c:	mov	r6, #0
   16160:	b	16250 <__assert_fail@plt+0x49c4>
   16164:	tst	r9, #1
   16168:	bne	161a4 <__assert_fail@plt+0x4918>
   1616c:	mov	r2, r0
   16170:	b	161fc <__assert_fail@plt+0x4970>
   16174:	mov	r0, #1
   16178:	mov	r8, #0
   1617c:	mov	r7, #5
   16180:	mov	r2, #1
   16184:	str	r0, [fp, #-72]	; 0xffffffb8
   16188:	movw	r0, #43324	; 0xa93c
   1618c:	movt	r0, #1
   16190:	str	r0, [fp, #-88]	; 0xffffffa8
   16194:	b	161c4 <__assert_fail@plt+0x4938>
   16198:	mov	r2, #1
   1619c:	tst	r9, #1
   161a0:	beq	161fc <__assert_fail@plt+0x4970>
   161a4:	mov	r1, #1
   161a8:	mov	r8, #0
   161ac:	mov	r7, #2
   161b0:	mov	r2, r0
   161b4:	str	r1, [fp, #-72]	; 0xffffffb8
   161b8:	movw	r1, #44673	; 0xae81
   161bc:	movt	r1, #1
   161c0:	str	r1, [fp, #-88]	; 0xffffffa8
   161c4:	mov	r6, #1
   161c8:	b	16250 <__assert_fail@plt+0x49c4>
   161cc:	tst	r9, #1
   161d0:	beq	16220 <__assert_fail@plt+0x4994>
   161d4:	mov	r0, #1
   161d8:	mov	r8, #0
   161dc:	mov	r2, #1
   161e0:	mov	r6, #1
   161e4:	mov	r7, #5
   161e8:	str	r0, [fp, #-72]	; 0xffffffb8
   161ec:	movw	r0, #43324	; 0xa93c
   161f0:	movt	r0, #1
   161f4:	str	r0, [fp, #-88]	; 0xffffffa8
   161f8:	b	16250 <__assert_fail@plt+0x49c4>
   161fc:	cmp	ip, #0
   16200:	mov	r8, #1
   16204:	mov	r6, #0
   16208:	mov	r7, #2
   1620c:	movne	r0, #39	; 0x27
   16210:	strbne	r0, [r5]
   16214:	movw	r0, #44673	; 0xae81
   16218:	movt	r0, #1
   1621c:	b	16244 <__assert_fail@plt+0x49b8>
   16220:	cmp	ip, #0
   16224:	mov	r8, #1
   16228:	mov	r2, #1
   1622c:	mov	r7, #5
   16230:	mov	r6, #0
   16234:	movne	r0, #34	; 0x22
   16238:	strbne	r0, [r5]
   1623c:	movw	r0, #43324	; 0xa93c
   16240:	movt	r0, #1
   16244:	str	r0, [fp, #-88]	; 0xffffffa8
   16248:	mov	r0, #1
   1624c:	str	r0, [fp, #-72]	; 0xffffffb8
   16250:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16254:	str	r7, [fp, #-68]	; 0xffffffbc
   16258:	str	r6, [fp, #-76]	; 0xffffffb4
   1625c:	str	r2, [sp, #84]	; 0x54
   16260:	cmp	r0, #0
   16264:	movwne	r0, #1
   16268:	and	r1, r0, r6
   1626c:	and	r1, r2, r1
   16270:	str	r1, [sp, #48]	; 0x30
   16274:	sub	r1, r7, #2
   16278:	clz	r1, r1
   1627c:	lsr	r1, r1, #5
   16280:	and	r1, r1, r6
   16284:	str	r1, [sp, #64]	; 0x40
   16288:	subs	r1, r7, #2
   1628c:	eor	r7, r6, #1
   16290:	movwne	r1, #1
   16294:	str	r7, [sp, #92]	; 0x5c
   16298:	orr	r7, r1, r7
   1629c:	and	r1, r1, r2
   162a0:	and	r0, r0, r1
   162a4:	str	r7, [sp, #68]	; 0x44
   162a8:	mov	r7, #0
   162ac:	str	r0, [fp, #-60]	; 0xffffffc4
   162b0:	orr	r0, r1, r6
   162b4:	ldr	r1, [fp, #16]
   162b8:	eor	r0, r0, #1
   162bc:	clz	r1, r1
   162c0:	lsr	r1, r1, #5
   162c4:	orr	r0, r1, r0
   162c8:	str	r0, [fp, #-64]	; 0xffffffc0
   162cc:	eor	r0, r2, #1
   162d0:	str	r0, [sp, #52]	; 0x34
   162d4:	cmn	r3, #1
   162d8:	beq	162e8 <__assert_fail@plt+0x4a5c>
   162dc:	cmp	r7, r3
   162e0:	bne	162f4 <__assert_fail@plt+0x4a68>
   162e4:	b	16e50 <__assert_fail@plt+0x55c4>
   162e8:	ldrb	r0, [r4, r7]
   162ec:	cmp	r0, #0
   162f0:	beq	16e58 <__assert_fail@plt+0x55cc>
   162f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   162f8:	cmp	r0, #0
   162fc:	beq	16344 <__assert_fail@plt+0x4ab8>
   16300:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16304:	add	r5, r7, r0
   16308:	cmp	r0, #2
   1630c:	bcc	16358 <__assert_fail@plt+0x4acc>
   16310:	mov	r0, #0
   16314:	cmn	r3, #1
   16318:	str	r0, [fp, #-56]	; 0xffffffc8
   1631c:	bne	16360 <__assert_fail@plt+0x4ad4>
   16320:	mov	r0, r4
   16324:	mov	r4, ip
   16328:	mov	r6, lr
   1632c:	bl	116dc <strlen@plt>
   16330:	mov	ip, r4
   16334:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16338:	mov	lr, r6
   1633c:	mov	r3, r0
   16340:	b	16360 <__assert_fail@plt+0x4ad4>
   16344:	mov	r0, #0
   16348:	mov	sl, r3
   1634c:	str	r0, [fp, #-56]	; 0xffffffc8
   16350:	mov	r0, #0
   16354:	b	163cc <__assert_fail@plt+0x4b40>
   16358:	mov	r0, #0
   1635c:	str	r0, [fp, #-56]	; 0xffffffc8
   16360:	cmp	r5, r3
   16364:	bls	16378 <__assert_fail@plt+0x4aec>
   16368:	ldr	r5, [fp, #-84]	; 0xffffffac
   1636c:	mov	r0, #0
   16370:	mov	sl, r3
   16374:	b	163cc <__assert_fail@plt+0x4b40>
   16378:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1637c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16380:	add	r0, r4, r7
   16384:	mov	r5, lr
   16388:	mov	r6, ip
   1638c:	mov	sl, r3
   16390:	bl	116d0 <bcmp@plt>
   16394:	ldr	r2, [sp, #92]	; 0x5c
   16398:	cmp	r0, #0
   1639c:	ldr	r3, [fp, #-84]	; 0xffffffac
   163a0:	mov	r1, r0
   163a4:	movwne	r1, #1
   163a8:	orr	r1, r1, r2
   163ac:	tst	r1, #1
   163b0:	beq	16edc <__assert_fail@plt+0x5650>
   163b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   163b8:	clz	r0, r0
   163bc:	mov	lr, r5
   163c0:	mov	ip, r6
   163c4:	mov	r5, r3
   163c8:	lsr	r0, r0, #5
   163cc:	str	r0, [fp, #-52]	; 0xffffffcc
   163d0:	ldrb	r6, [r4, r7]
   163d4:	cmp	r6, #126	; 0x7e
   163d8:	bhi	16900 <__assert_fail@plt+0x5074>
   163dc:	add	r3, pc, #16
   163e0:	mov	r9, #1
   163e4:	mov	r2, #110	; 0x6e
   163e8:	mov	r0, #97	; 0x61
   163ec:	mov	r1, #0
   163f0:	ldr	pc, [r3, r6, lsl #2]
   163f4:	andeq	r6, r1, r4, ror #14
   163f8:	andeq	r6, r1, r0, lsl #18
   163fc:	andeq	r6, r1, r0, lsl #18
   16400:	andeq	r6, r1, r0, lsl #18
   16404:	andeq	r6, r1, r0, lsl #18
   16408:	andeq	r6, r1, r0, lsl #18
   1640c:	andeq	r6, r1, r0, lsl #18
   16410:	andeq	r6, r1, r0, lsl #19
   16414:	andeq	r6, r1, r4, asr #14
   16418:	andeq	r6, r1, ip, lsr r7
   1641c:	andeq	r6, r1, r0, asr r7
   16420:	andeq	r6, r1, r8, ror #16
   16424:	andeq	r6, r1, r4, lsr r7
   16428:	andeq	r6, r1, ip, asr #14
   1642c:	andeq	r6, r1, r0, lsl #18
   16430:	andeq	r6, r1, r0, lsl #18
   16434:	andeq	r6, r1, r0, lsl #18
   16438:	andeq	r6, r1, r0, lsl #18
   1643c:	andeq	r6, r1, r0, lsl #18
   16440:	andeq	r6, r1, r0, lsl #18
   16444:	andeq	r6, r1, r0, lsl #18
   16448:	andeq	r6, r1, r0, lsl #18
   1644c:	andeq	r6, r1, r0, lsl #18
   16450:	andeq	r6, r1, r0, lsl #18
   16454:	andeq	r6, r1, r0, lsl #18
   16458:	andeq	r6, r1, r0, lsl #18
   1645c:	andeq	r6, r1, r0, lsl #18
   16460:	andeq	r6, r1, r0, lsl #18
   16464:	andeq	r6, r1, r0, lsl #18
   16468:	andeq	r6, r1, r0, lsl #18
   1646c:	andeq	r6, r1, r0, lsl #18
   16470:	andeq	r6, r1, r0, lsl #18
   16474:	andeq	r6, r1, r4, ror #13
   16478:	andeq	r6, r1, r8, ror #13
   1647c:	andeq	r6, r1, r8, ror #13
   16480:	andeq	r6, r1, ip, asr #13
   16484:	andeq	r6, r1, r8, ror #13
   16488:	strdeq	r6, [r1], -r0
   1648c:	andeq	r6, r1, r8, ror #13
   16490:	andeq	r6, r1, r0, ror r8
   16494:	andeq	r6, r1, r8, ror #13
   16498:	andeq	r6, r1, r8, ror #13
   1649c:	andeq	r6, r1, r8, ror #13
   164a0:	strdeq	r6, [r1], -r0
   164a4:	strdeq	r6, [r1], -r0
   164a8:	strdeq	r6, [r1], -r0
   164ac:	strdeq	r6, [r1], -r0
   164b0:	strdeq	r6, [r1], -r0
   164b4:	strdeq	r6, [r1], -r0
   164b8:	strdeq	r6, [r1], -r0
   164bc:	strdeq	r6, [r1], -r0
   164c0:	strdeq	r6, [r1], -r0
   164c4:	strdeq	r6, [r1], -r0
   164c8:	strdeq	r6, [r1], -r0
   164cc:	strdeq	r6, [r1], -r0
   164d0:	strdeq	r6, [r1], -r0
   164d4:	strdeq	r6, [r1], -r0
   164d8:	strdeq	r6, [r1], -r0
   164dc:	strdeq	r6, [r1], -r0
   164e0:	andeq	r6, r1, r8, ror #13
   164e4:	andeq	r6, r1, r8, ror #13
   164e8:	andeq	r6, r1, r8, ror #13
   164ec:	andeq	r6, r1, r8, ror #13
   164f0:	andeq	r6, r1, ip, lsr r8
   164f4:	andeq	r6, r1, r0, lsl #18
   164f8:	strdeq	r6, [r1], -r0
   164fc:	strdeq	r6, [r1], -r0
   16500:	strdeq	r6, [r1], -r0
   16504:	strdeq	r6, [r1], -r0
   16508:	strdeq	r6, [r1], -r0
   1650c:	strdeq	r6, [r1], -r0
   16510:	strdeq	r6, [r1], -r0
   16514:	strdeq	r6, [r1], -r0
   16518:	strdeq	r6, [r1], -r0
   1651c:	strdeq	r6, [r1], -r0
   16520:	strdeq	r6, [r1], -r0
   16524:	strdeq	r6, [r1], -r0
   16528:	strdeq	r6, [r1], -r0
   1652c:	strdeq	r6, [r1], -r0
   16530:	strdeq	r6, [r1], -r0
   16534:	strdeq	r6, [r1], -r0
   16538:	strdeq	r6, [r1], -r0
   1653c:	strdeq	r6, [r1], -r0
   16540:	strdeq	r6, [r1], -r0
   16544:	strdeq	r6, [r1], -r0
   16548:	strdeq	r6, [r1], -r0
   1654c:	strdeq	r6, [r1], -r0
   16550:	strdeq	r6, [r1], -r0
   16554:	strdeq	r6, [r1], -r0
   16558:	strdeq	r6, [r1], -r0
   1655c:	strdeq	r6, [r1], -r0
   16560:	andeq	r6, r1, r8, ror #13
   16564:	andeq	r6, r1, r0, lsl r7
   16568:	strdeq	r6, [r1], -r0
   1656c:	andeq	r6, r1, r8, ror #13
   16570:	strdeq	r6, [r1], -r0
   16574:	andeq	r6, r1, r8, ror #13
   16578:	strdeq	r6, [r1], -r0
   1657c:	strdeq	r6, [r1], -r0
   16580:	strdeq	r6, [r1], -r0
   16584:	strdeq	r6, [r1], -r0
   16588:	strdeq	r6, [r1], -r0
   1658c:	strdeq	r6, [r1], -r0
   16590:	strdeq	r6, [r1], -r0
   16594:	strdeq	r6, [r1], -r0
   16598:	strdeq	r6, [r1], -r0
   1659c:	strdeq	r6, [r1], -r0
   165a0:	strdeq	r6, [r1], -r0
   165a4:	strdeq	r6, [r1], -r0
   165a8:	strdeq	r6, [r1], -r0
   165ac:	strdeq	r6, [r1], -r0
   165b0:	strdeq	r6, [r1], -r0
   165b4:	strdeq	r6, [r1], -r0
   165b8:	strdeq	r6, [r1], -r0
   165bc:	strdeq	r6, [r1], -r0
   165c0:	strdeq	r6, [r1], -r0
   165c4:	strdeq	r6, [r1], -r0
   165c8:	strdeq	r6, [r1], -r0
   165cc:	strdeq	r6, [r1], -r0
   165d0:	strdeq	r6, [r1], -r0
   165d4:	strdeq	r6, [r1], -r0
   165d8:	strdeq	r6, [r1], -r0
   165dc:	strdeq	r6, [r1], -r0
   165e0:	andeq	r6, r1, r4, lsr #13
   165e4:	andeq	r6, r1, r8, ror #13
   165e8:	andeq	r6, r1, r4, lsr #13
   165ec:	andeq	r6, r1, ip, asr #13
   165f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   165f4:	tst	r0, #1
   165f8:	bne	16624 <__assert_fail@plt+0x4d98>
   165fc:	ldr	r1, [fp, #16]
   16600:	ubfx	r0, r6, #5, #3
   16604:	mov	r2, #1
   16608:	ldr	r0, [r1, r0, lsl #2]
   1660c:	and	r1, r6, #31
   16610:	tst	r0, r2, lsl r1
   16614:	beq	16624 <__assert_fail@plt+0x4d98>
   16618:	mov	r0, r6
   1661c:	mov	r1, r9
   16620:	b	16638 <__assert_fail@plt+0x4dac>
   16624:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16628:	mov	r1, r9
   1662c:	cmp	r0, #0
   16630:	mov	r0, r6
   16634:	beq	16d84 <__assert_fail@plt+0x54f8>
   16638:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1663c:	tst	r2, #1
   16640:	bne	16f20 <__assert_fail@plt+0x5694>
   16644:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16648:	subs	r2, r2, #2
   1664c:	movwne	r2, #1
   16650:	orr	r2, r2, lr
   16654:	tst	r2, #1
   16658:	bne	16690 <__assert_fail@plt+0x4e04>
   1665c:	cmp	r8, ip
   16660:	mov	lr, #1
   16664:	movcc	r2, #39	; 0x27
   16668:	strbcc	r2, [r5, r8]
   1666c:	add	r2, r8, #1
   16670:	cmp	r2, ip
   16674:	movcc	r3, #36	; 0x24
   16678:	strbcc	r3, [r5, r2]
   1667c:	add	r2, r8, #2
   16680:	add	r8, r8, #3
   16684:	cmp	r2, ip
   16688:	movcc	r3, #39	; 0x27
   1668c:	strbcc	r3, [r5, r2]
   16690:	cmp	r8, ip
   16694:	movcc	r2, #92	; 0x5c
   16698:	strbcc	r2, [r5, r8]
   1669c:	add	r8, r8, #1
   166a0:	b	16dc4 <__assert_fail@plt+0x5538>
   166a4:	cmp	sl, #1
   166a8:	beq	166cc <__assert_fail@plt+0x4e40>
   166ac:	mov	r9, #0
   166b0:	cmn	sl, #1
   166b4:	bne	166d8 <__assert_fail@plt+0x4e4c>
   166b8:	ldrb	r0, [r4, #1]
   166bc:	cmp	r0, #0
   166c0:	beq	166cc <__assert_fail@plt+0x4e40>
   166c4:	mvn	sl, #0
   166c8:	b	166d8 <__assert_fail@plt+0x4e4c>
   166cc:	mov	r9, #0
   166d0:	cmp	r7, #0
   166d4:	beq	166e4 <__assert_fail@plt+0x4e58>
   166d8:	mov	r0, #0
   166dc:	str	r0, [fp, #-56]	; 0xffffffc8
   166e0:	b	165f0 <__assert_fail@plt+0x4d64>
   166e4:	mov	r1, #1
   166e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   166ec:	cmp	r0, #2
   166f0:	bne	16708 <__assert_fail@plt+0x4e7c>
   166f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   166f8:	mov	r9, r1
   166fc:	tst	r0, #1
   16700:	beq	165f0 <__assert_fail@plt+0x4d64>
   16704:	b	16f20 <__assert_fail@plt+0x5694>
   16708:	mov	r9, r1
   1670c:	b	165f0 <__assert_fail@plt+0x4d64>
   16710:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16714:	cmp	r0, #2
   16718:	bne	1695c <__assert_fail@plt+0x50d0>
   1671c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16720:	tst	r0, #1
   16724:	bne	16f20 <__assert_fail@plt+0x5694>
   16728:	mov	r0, #0
   1672c:	str	r0, [fp, #-56]	; 0xffffffc8
   16730:	b	16974 <__assert_fail@plt+0x50e8>
   16734:	mov	r0, #102	; 0x66
   16738:	b	16980 <__assert_fail@plt+0x50f4>
   1673c:	mov	r2, #116	; 0x74
   16740:	b	16750 <__assert_fail@plt+0x4ec4>
   16744:	mov	r0, #98	; 0x62
   16748:	b	16980 <__assert_fail@plt+0x50f4>
   1674c:	mov	r2, #114	; 0x72
   16750:	ldr	r0, [sp, #68]	; 0x44
   16754:	tst	r0, #1
   16758:	mov	r0, r2
   1675c:	bne	16980 <__assert_fail@plt+0x50f4>
   16760:	b	16f20 <__assert_fail@plt+0x5694>
   16764:	ldr	r0, [sp, #84]	; 0x54
   16768:	tst	r0, #1
   1676c:	beq	169a0 <__assert_fail@plt+0x5114>
   16770:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16774:	tst	r0, #1
   16778:	bne	1700c <__assert_fail@plt+0x5780>
   1677c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16780:	mov	r2, sl
   16784:	subs	r0, r0, #2
   16788:	movwne	r0, #1
   1678c:	orr	r0, r0, lr
   16790:	tst	r0, #1
   16794:	bne	167cc <__assert_fail@plt+0x4f40>
   16798:	cmp	r8, ip
   1679c:	mov	lr, #1
   167a0:	movcc	r0, #39	; 0x27
   167a4:	strbcc	r0, [r5, r8]
   167a8:	add	r0, r8, #1
   167ac:	cmp	r0, ip
   167b0:	movcc	r1, #36	; 0x24
   167b4:	strbcc	r1, [r5, r0]
   167b8:	add	r0, r8, #2
   167bc:	add	r8, r8, #3
   167c0:	cmp	r0, ip
   167c4:	movcc	r1, #39	; 0x27
   167c8:	strbcc	r1, [r5, r0]
   167cc:	mov	r1, #1
   167d0:	cmp	r8, ip
   167d4:	mov	r9, #0
   167d8:	mov	r6, #48	; 0x30
   167dc:	str	r1, [fp, #-56]	; 0xffffffc8
   167e0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   167e4:	movcc	r0, #92	; 0x5c
   167e8:	strbcc	r0, [r5, r8]
   167ec:	add	r0, r8, #1
   167f0:	cmp	r1, #2
   167f4:	beq	16afc <__assert_fail@plt+0x5270>
   167f8:	add	r1, r7, #1
   167fc:	cmp	r1, r2
   16800:	bcs	16afc <__assert_fail@plt+0x5270>
   16804:	ldrb	r1, [r4, r1]
   16808:	sub	r1, r1, #48	; 0x30
   1680c:	uxtb	r1, r1
   16810:	cmp	r1, #9
   16814:	bhi	16afc <__assert_fail@plt+0x5270>
   16818:	cmp	r0, ip
   1681c:	movcc	r1, #48	; 0x30
   16820:	strbcc	r1, [r5, r0]
   16824:	add	r0, r8, #2
   16828:	add	r8, r8, #3
   1682c:	cmp	r0, ip
   16830:	movcc	r1, #48	; 0x30
   16834:	strbcc	r1, [r5, r0]
   16838:	b	165f0 <__assert_fail@plt+0x4d64>
   1683c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16840:	mov	r6, #63	; 0x3f
   16844:	cmp	r0, #5
   16848:	beq	16b04 <__assert_fail@plt+0x5278>
   1684c:	mov	r1, #0
   16850:	cmp	r0, #2
   16854:	str	r1, [fp, #-56]	; 0xffffffc8
   16858:	bne	16bb8 <__assert_fail@plt+0x532c>
   1685c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16860:	mov	r9, #0
   16864:	b	166fc <__assert_fail@plt+0x4e70>
   16868:	mov	r0, #118	; 0x76
   1686c:	b	16980 <__assert_fail@plt+0x50f4>
   16870:	mov	r0, #1
   16874:	mov	r6, #39	; 0x27
   16878:	str	r0, [sp, #60]	; 0x3c
   1687c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16880:	cmp	r0, #2
   16884:	bne	168f8 <__assert_fail@plt+0x506c>
   16888:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1688c:	tst	r0, #1
   16890:	bne	16f20 <__assert_fail@plt+0x5694>
   16894:	ldr	r2, [sp, #56]	; 0x38
   16898:	clz	r1, ip
   1689c:	mov	lr, #0
   168a0:	lsr	r1, r1, #5
   168a4:	cmp	r2, #0
   168a8:	mov	r0, r2
   168ac:	movwne	r0, #1
   168b0:	orrs	r0, r0, r1
   168b4:	moveq	r2, ip
   168b8:	moveq	ip, r0
   168bc:	cmp	r8, ip
   168c0:	str	r2, [sp, #56]	; 0x38
   168c4:	movcc	r0, #39	; 0x27
   168c8:	strbcc	r0, [r5, r8]
   168cc:	add	r0, r8, #1
   168d0:	cmp	r0, ip
   168d4:	movcc	r1, #92	; 0x5c
   168d8:	strbcc	r1, [r5, r0]
   168dc:	add	r0, r8, #2
   168e0:	add	r8, r8, #3
   168e4:	cmp	r0, ip
   168e8:	movcc	r1, #39	; 0x27
   168ec:	strbcc	r1, [r5, r0]
   168f0:	mov	r0, #0
   168f4:	str	r0, [fp, #-56]	; 0xffffffc8
   168f8:	mov	r9, #1
   168fc:	b	165f0 <__assert_fail@plt+0x4d64>
   16900:	ldr	r0, [sp, #40]	; 0x28
   16904:	str	lr, [sp, #44]	; 0x2c
   16908:	str	ip, [sp, #88]	; 0x58
   1690c:	cmp	r0, #1
   16910:	bne	169c0 <__assert_fail@plt+0x5134>
   16914:	str	sl, [sp, #36]	; 0x24
   16918:	bl	11694 <__ctype_b_loc@plt>
   1691c:	ldr	r0, [r0]
   16920:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16924:	mov	r1, #1
   16928:	add	r0, r0, r6, lsl #1
   1692c:	ldrb	r0, [r0, #1]
   16930:	ubfx	r9, r0, #6, #1
   16934:	ldr	r0, [sp, #52]	; 0x34
   16938:	ldr	lr, [sp, #44]	; 0x2c
   1693c:	cmp	r1, #1
   16940:	orr	r3, r9, r0
   16944:	bhi	16bc0 <__assert_fail@plt+0x5334>
   16948:	tst	r3, #1
   1694c:	beq	16bc0 <__assert_fail@plt+0x5334>
   16950:	ldr	sl, [sp, #36]	; 0x24
   16954:	ldr	ip, [sp, #88]	; 0x58
   16958:	b	165f0 <__assert_fail@plt+0x4d64>
   1695c:	ldr	r1, [sp, #48]	; 0x30
   16960:	mov	r0, #0
   16964:	str	r0, [fp, #-56]	; 0xffffffc8
   16968:	mov	r0, #92	; 0x5c
   1696c:	cmp	r1, #0
   16970:	beq	16980 <__assert_fail@plt+0x50f4>
   16974:	mov	r6, #92	; 0x5c
   16978:	mov	r9, #0
   1697c:	b	16d84 <__assert_fail@plt+0x54f8>
   16980:	mov	r1, #0
   16984:	mov	r9, #0
   16988:	str	r1, [fp, #-56]	; 0xffffffc8
   1698c:	ldr	r1, [sp, #84]	; 0x54
   16990:	tst	r1, #1
   16994:	mov	r1, #0
   16998:	beq	165f0 <__assert_fail@plt+0x4d64>
   1699c:	b	16638 <__assert_fail@plt+0x4dac>
   169a0:	ldr	r0, [sp, #32]
   169a4:	mov	r6, #0
   169a8:	mov	r9, #0
   169ac:	cmp	r0, #0
   169b0:	mov	r0, #0
   169b4:	str	r0, [fp, #-56]	; 0xffffffc8
   169b8:	beq	165f0 <__assert_fail@plt+0x4d64>
   169bc:	b	16ddc <__assert_fail@plt+0x5550>
   169c0:	mov	r0, #0
   169c4:	cmn	sl, #1
   169c8:	sub	r3, fp, #40	; 0x28
   169cc:	str	r0, [fp, #-36]	; 0xffffffdc
   169d0:	str	r0, [fp, #-40]	; 0xffffffd8
   169d4:	bne	169ec <__assert_fail@plt+0x5160>
   169d8:	mov	r0, r4
   169dc:	bl	116dc <strlen@plt>
   169e0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   169e4:	sub	r3, fp, #40	; 0x28
   169e8:	mov	sl, r0
   169ec:	ldr	r0, [sp, #72]	; 0x48
   169f0:	mov	r9, #1
   169f4:	mov	r1, #0
   169f8:	str	sl, [sp, #36]	; 0x24
   169fc:	add	r0, r0, r7
   16a00:	str	r0, [sp, #20]
   16a04:	add	r0, r1, r7
   16a08:	str	r1, [sp, #24]
   16a0c:	add	r1, r4, r0
   16a10:	mov	r4, r0
   16a14:	sub	r2, sl, r0
   16a18:	sub	r0, fp, #44	; 0x2c
   16a1c:	bl	1920c <__assert_fail@plt+0x7980>
   16a20:	cmp	r0, #0
   16a24:	beq	16e30 <__assert_fail@plt+0x55a4>
   16a28:	cmn	r0, #1
   16a2c:	beq	16de8 <__assert_fail@plt+0x555c>
   16a30:	ldr	r2, [sp, #36]	; 0x24
   16a34:	cmn	r0, #2
   16a38:	beq	16df0 <__assert_fail@plt+0x5564>
   16a3c:	ldr	r2, [sp, #64]	; 0x40
   16a40:	ldr	ip, [sp, #88]	; 0x58
   16a44:	ldr	r4, [sp, #84]	; 0x54
   16a48:	ldr	lr, [fp, #-48]	; 0xffffffd0
   16a4c:	cmp	r0, #2
   16a50:	mov	r1, #0
   16a54:	movwcc	r1, #1
   16a58:	eor	r2, r2, #1
   16a5c:	orrs	r1, r2, r1
   16a60:	bne	16ab0 <__assert_fail@plt+0x5224>
   16a64:	ldr	r1, [sp, #24]
   16a68:	ldr	r2, [sp, #20]
   16a6c:	add	r1, r2, r1
   16a70:	sub	r2, r0, #1
   16a74:	ldrb	r3, [r1]
   16a78:	sub	r5, r3, #94	; 0x5e
   16a7c:	cmp	r5, #30
   16a80:	bhi	16a98 <__assert_fail@plt+0x520c>
   16a84:	mov	r4, #1
   16a88:	mov	sl, #1073741829	; 0x40000005
   16a8c:	tst	sl, r4, lsl r5
   16a90:	ldr	r4, [sp, #84]	; 0x54
   16a94:	bne	16ef8 <__assert_fail@plt+0x566c>
   16a98:	sub	r3, r3, #91	; 0x5b
   16a9c:	cmp	r3, #2
   16aa0:	bcc	16ef8 <__assert_fail@plt+0x566c>
   16aa4:	add	r1, r1, #1
   16aa8:	subs	r2, r2, #1
   16aac:	bne	16a74 <__assert_fail@plt+0x51e8>
   16ab0:	ldr	r5, [sp, #24]
   16ab4:	str	lr, [fp, #-48]	; 0xffffffd0
   16ab8:	add	r5, r0, r5
   16abc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16ac0:	bl	115bc <iswprint@plt>
   16ac4:	cmp	r0, #0
   16ac8:	sub	r4, fp, #40	; 0x28
   16acc:	movwne	r0, #1
   16ad0:	and	r9, r9, r0
   16ad4:	mov	r0, r4
   16ad8:	bl	11544 <mbsinit@plt>
   16adc:	mov	r1, r5
   16ae0:	mov	r3, r4
   16ae4:	ldr	sl, [sp, #36]	; 0x24
   16ae8:	ldr	r5, [fp, #-84]	; 0xffffffac
   16aec:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16af0:	cmp	r0, #0
   16af4:	beq	16a04 <__assert_fail@plt+0x5178>
   16af8:	b	16934 <__assert_fail@plt+0x50a8>
   16afc:	mov	r8, r0
   16b00:	b	165f0 <__assert_fail@plt+0x4d64>
   16b04:	mov	r0, #0
   16b08:	str	r0, [fp, #-56]	; 0xffffffc8
   16b0c:	ldr	r0, [sp, #28]
   16b10:	cmp	r0, #0
   16b14:	beq	16bb8 <__assert_fail@plt+0x532c>
   16b18:	add	r0, r7, #2
   16b1c:	mov	r1, sl
   16b20:	cmp	r0, sl
   16b24:	bcs	16bb8 <__assert_fail@plt+0x532c>
   16b28:	add	r1, r7, r4
   16b2c:	ldrb	r1, [r1, #1]
   16b30:	cmp	r1, #63	; 0x3f
   16b34:	bne	16bb8 <__assert_fail@plt+0x532c>
   16b38:	ldrb	r9, [r4, r0]
   16b3c:	sub	r2, r9, #33	; 0x21
   16b40:	cmp	r2, #29
   16b44:	bhi	16bb8 <__assert_fail@plt+0x532c>
   16b48:	mov	r1, r4
   16b4c:	movw	r4, #20929	; 0x51c1
   16b50:	mov	r3, #1
   16b54:	movt	r4, #14336	; 0x3800
   16b58:	tst	r4, r3, lsl r2
   16b5c:	beq	16e44 <__assert_fail@plt+0x55b8>
   16b60:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16b64:	tst	r2, #1
   16b68:	bne	17014 <__assert_fail@plt+0x5788>
   16b6c:	cmp	r8, ip
   16b70:	mov	r4, r1
   16b74:	mov	r7, r0
   16b78:	mov	r6, r9
   16b7c:	movcc	r2, #63	; 0x3f
   16b80:	strbcc	r2, [r5, r8]
   16b84:	add	r2, r8, #1
   16b88:	cmp	r2, ip
   16b8c:	movcc	r3, #34	; 0x22
   16b90:	strbcc	r3, [r5, r2]
   16b94:	add	r2, r8, #2
   16b98:	cmp	r2, ip
   16b9c:	movcc	r3, #34	; 0x22
   16ba0:	strbcc	r3, [r5, r2]
   16ba4:	add	r2, r8, #3
   16ba8:	add	r8, r8, #4
   16bac:	cmp	r2, ip
   16bb0:	movcc	r3, #63	; 0x3f
   16bb4:	strbcc	r3, [r5, r2]
   16bb8:	mov	r9, #0
   16bbc:	b	165f0 <__assert_fail@plt+0x4d64>
   16bc0:	ldr	sl, [sp, #36]	; 0x24
   16bc4:	add	r0, r1, r7
   16bc8:	mov	r2, #0
   16bcc:	str	r3, [sp, #24]
   16bd0:	str	r0, [fp, #-56]	; 0xffffffc8
   16bd4:	tst	r3, #1
   16bd8:	beq	16c04 <__assert_fail@plt+0x5378>
   16bdc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16be0:	tst	r0, #1
   16be4:	beq	16ccc <__assert_fail@plt+0x5440>
   16be8:	ldr	r1, [sp, #88]	; 0x58
   16bec:	mov	r0, r3
   16bf0:	cmp	r8, r1
   16bf4:	movcc	r1, #92	; 0x5c
   16bf8:	strbcc	r1, [r5, r8]
   16bfc:	add	r8, r8, #1
   16c00:	b	16cd0 <__assert_fail@plt+0x5444>
   16c04:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16c08:	tst	r1, #1
   16c0c:	bne	16f1c <__assert_fail@plt+0x5690>
   16c10:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16c14:	subs	r2, r1, #2
   16c18:	movwne	r2, #1
   16c1c:	orr	r2, r2, lr
   16c20:	tst	r2, #1
   16c24:	bne	16c68 <__assert_fail@plt+0x53dc>
   16c28:	ldr	r1, [sp, #88]	; 0x58
   16c2c:	add	r2, r8, #1
   16c30:	mov	lr, #1
   16c34:	cmp	r8, r1
   16c38:	movcc	r1, #39	; 0x27
   16c3c:	strbcc	r1, [r5, r8]
   16c40:	ldr	r1, [sp, #88]	; 0x58
   16c44:	cmp	r2, r1
   16c48:	movcc	r1, #36	; 0x24
   16c4c:	strbcc	r1, [r5, r2]
   16c50:	ldr	r1, [sp, #88]	; 0x58
   16c54:	add	r2, r8, #2
   16c58:	add	r8, r8, #3
   16c5c:	cmp	r2, r1
   16c60:	movcc	r1, #39	; 0x27
   16c64:	strbcc	r1, [r5, r2]
   16c68:	ldr	r1, [sp, #88]	; 0x58
   16c6c:	add	r2, r8, #1
   16c70:	mov	r0, r3
   16c74:	cmp	r8, r1
   16c78:	movcc	r1, #92	; 0x5c
   16c7c:	strbcc	r1, [r5, r8]
   16c80:	ldr	r1, [sp, #88]	; 0x58
   16c84:	cmp	r2, r1
   16c88:	bcs	16c9c <__assert_fail@plt+0x5410>
   16c8c:	uxtb	r3, r6
   16c90:	mov	r1, #48	; 0x30
   16c94:	orr	r3, r1, r3, lsr #6
   16c98:	strb	r3, [r5, r2]
   16c9c:	ldr	r1, [sp, #88]	; 0x58
   16ca0:	add	r2, r8, #2
   16ca4:	add	r8, r8, #3
   16ca8:	cmp	r2, r1
   16cac:	lsrcc	r3, r6, #3
   16cb0:	movcc	r1, #6
   16cb4:	bficc	r3, r1, #3, #29
   16cb8:	mov	r1, #6
   16cbc:	bfi	r6, r1, #3, #29
   16cc0:	strbcc	r3, [r5, r2]
   16cc4:	mov	r2, #1
   16cc8:	b	16cd8 <__assert_fail@plt+0x544c>
   16ccc:	mov	r0, r3
   16cd0:	mov	r1, #0
   16cd4:	str	r1, [fp, #-52]	; 0xffffffcc
   16cd8:	mov	ip, r2
   16cdc:	and	r1, r2, #1
   16ce0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16ce4:	add	r3, r7, #1
   16ce8:	cmp	r2, r3
   16cec:	bls	16d74 <__assert_fail@plt+0x54e8>
   16cf0:	cmp	r1, #0
   16cf4:	mvn	r5, lr
   16cf8:	movwne	r1, #1
   16cfc:	orr	r5, r5, r1
   16d00:	tst	r5, #1
   16d04:	bne	16d48 <__assert_fail@plt+0x54bc>
   16d08:	ldr	r1, [sp, #88]	; 0x58
   16d0c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16d10:	mov	r2, r4
   16d14:	ldr	r4, [sp, #88]	; 0x58
   16d18:	ldr	r0, [sp, #24]
   16d1c:	mov	lr, #0
   16d20:	cmp	r8, r1
   16d24:	movcc	r1, #39	; 0x27
   16d28:	strbcc	r1, [r5, r8]
   16d2c:	add	r1, r8, #1
   16d30:	add	r8, r8, #2
   16d34:	cmp	r1, r4
   16d38:	movcc	r4, #39	; 0x27
   16d3c:	strbcc	r4, [r5, r1]
   16d40:	mov	r4, r2
   16d44:	b	16d4c <__assert_fail@plt+0x54c0>
   16d48:	ldr	r5, [fp, #-84]	; 0xffffffac
   16d4c:	ldr	r1, [sp, #88]	; 0x58
   16d50:	mov	r2, ip
   16d54:	cmp	r8, r1
   16d58:	ldr	r1, [sp, #72]	; 0x48
   16d5c:	strbcc	r6, [r5, r8]
   16d60:	add	r8, r8, #1
   16d64:	ldrb	r6, [r1, r7]
   16d68:	mov	r7, r3
   16d6c:	mov	r3, r0
   16d70:	b	16bd4 <__assert_fail@plt+0x5348>
   16d74:	ldr	ip, [sp, #88]	; 0x58
   16d78:	cmp	r1, #0
   16d7c:	movwne	r1, #1
   16d80:	str	r1, [fp, #-56]	; 0xffffffc8
   16d84:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16d88:	cmp	r0, #0
   16d8c:	bne	16dbc <__assert_fail@plt+0x5530>
   16d90:	tst	lr, #1
   16d94:	beq	16dbc <__assert_fail@plt+0x5530>
   16d98:	cmp	r8, ip
   16d9c:	mov	lr, #0
   16da0:	movcc	r0, #39	; 0x27
   16da4:	strbcc	r0, [r5, r8]
   16da8:	add	r0, r8, #1
   16dac:	add	r8, r8, #2
   16db0:	cmp	r0, ip
   16db4:	movcc	r1, #39	; 0x27
   16db8:	strbcc	r1, [r5, r0]
   16dbc:	mov	r1, r9
   16dc0:	mov	r0, r6
   16dc4:	cmp	r8, ip
   16dc8:	strbcc	r0, [r5, r8]
   16dcc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16dd0:	add	r8, r8, #1
   16dd4:	and	r0, r0, r1
   16dd8:	str	r0, [fp, #-48]	; 0xffffffd0
   16ddc:	mov	r3, sl
   16de0:	add	r7, r7, #1
   16de4:	b	162d4 <__assert_fail@plt+0x4a48>
   16de8:	mov	r9, #0
   16dec:	b	16e30 <__assert_fail@plt+0x55a4>
   16df0:	mov	r9, #0
   16df4:	cmp	r2, r4
   16df8:	bls	16e30 <__assert_fail@plt+0x55a4>
   16dfc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16e00:	ldr	r1, [sp, #24]
   16e04:	add	r0, r4, r7
   16e08:	mov	r3, r1
   16e0c:	ldrb	r1, [r0, r1]
   16e10:	cmp	r1, #0
   16e14:	beq	16e3c <__assert_fail@plt+0x55b0>
   16e18:	add	r3, r3, #1
   16e1c:	add	r1, r7, r3
   16e20:	cmp	r1, r2
   16e24:	mov	r1, r3
   16e28:	bcc	16e08 <__assert_fail@plt+0x557c>
   16e2c:	b	16934 <__assert_fail@plt+0x50a8>
   16e30:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16e34:	ldr	r1, [sp, #24]
   16e38:	b	16934 <__assert_fail@plt+0x50a8>
   16e3c:	mov	r1, r3
   16e40:	b	16934 <__assert_fail@plt+0x50a8>
   16e44:	mov	r9, #0
   16e48:	mov	r4, r1
   16e4c:	b	165f0 <__assert_fail@plt+0x4d64>
   16e50:	mov	sl, r7
   16e54:	b	16e5c <__assert_fail@plt+0x55d0>
   16e58:	mvn	sl, #0
   16e5c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16e60:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16e64:	eor	r0, r1, #2
   16e68:	orr	r0, r0, r8
   16e6c:	clz	r0, r0
   16e70:	lsr	r0, r0, #5
   16e74:	tst	r2, r0
   16e78:	bne	16f20 <__assert_fail@plt+0x5694>
   16e7c:	subs	r0, r1, #2
   16e80:	movwne	r0, #1
   16e84:	orr	r0, r2, r0
   16e88:	tst	r0, #1
   16e8c:	ldreq	r0, [sp, #60]	; 0x3c
   16e90:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   16e94:	eoreq	r0, r0, #1
   16e98:	tsteq	r0, #1
   16e9c:	bne	16fb4 <__assert_fail@plt+0x5728>
   16ea0:	tst	r1, #1
   16ea4:	bne	16f80 <__assert_fail@plt+0x56f4>
   16ea8:	ldr	r6, [sp, #56]	; 0x38
   16eac:	mov	r9, #0
   16eb0:	cmp	r6, #0
   16eb4:	beq	16fac <__assert_fail@plt+0x5720>
   16eb8:	ldr	r0, [sp, #84]	; 0x54
   16ebc:	mov	r1, #0
   16ec0:	mov	r7, #2
   16ec4:	cmp	ip, #0
   16ec8:	str	r1, [fp, #-48]	; 0xffffffd0
   16ecc:	mov	r1, #0
   16ed0:	str	r1, [fp, #-76]	; 0xffffffb4
   16ed4:	beq	1603c <__assert_fail@plt+0x47b0>
   16ed8:	b	16fb4 <__assert_fail@plt+0x5728>
   16edc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16ee0:	ldr	r1, [fp, #12]
   16ee4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16ee8:	mov	r5, r3
   16eec:	mov	ip, r6
   16ef0:	mov	r3, sl
   16ef4:	b	16f44 <__assert_fail@plt+0x56b8>
   16ef8:	tst	r4, #1
   16efc:	ldr	r5, [fp, #-84]	; 0xffffffac
   16f00:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16f04:	ldr	r1, [fp, #12]
   16f08:	ldr	r3, [sp, #36]	; 0x24
   16f0c:	mov	r0, #2
   16f10:	movwne	r0, #4
   16f14:	mov	r2, r0
   16f18:	b	16f44 <__assert_fail@plt+0x56b8>
   16f1c:	ldr	ip, [sp, #88]	; 0x58
   16f20:	ldr	r1, [sp, #84]	; 0x54
   16f24:	mov	r0, #2
   16f28:	tst	r1, #1
   16f2c:	movwne	r0, #4
   16f30:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16f34:	ldr	r1, [fp, #12]
   16f38:	mov	r3, sl
   16f3c:	cmp	r2, #2
   16f40:	moveq	r2, r0
   16f44:	mov	r0, #0
   16f48:	bic	r1, r1, #2
   16f4c:	str	r2, [sp]
   16f50:	mov	r2, r4
   16f54:	str	r0, [sp, #8]
   16f58:	ldr	r0, [sp, #76]	; 0x4c
   16f5c:	str	r1, [sp, #4]
   16f60:	mov	r1, ip
   16f64:	str	r0, [sp, #12]
   16f68:	ldr	r0, [sp, #80]	; 0x50
   16f6c:	str	r0, [sp, #16]
   16f70:	mov	r0, r5
   16f74:	bl	15fb0 <__assert_fail@plt+0x4724>
   16f78:	mov	r8, r0
   16f7c:	b	17000 <__assert_fail@plt+0x5774>
   16f80:	mov	r0, #5
   16f84:	ldr	r1, [sp, #56]	; 0x38
   16f88:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16f8c:	mov	r3, sl
   16f90:	str	r0, [sp]
   16f94:	ldr	r0, [fp, #12]
   16f98:	str	r0, [sp, #4]
   16f9c:	ldr	r0, [fp, #16]
   16fa0:	str	r0, [sp, #8]
   16fa4:	ldr	r0, [sp, #76]	; 0x4c
   16fa8:	b	16f64 <__assert_fail@plt+0x56d8>
   16fac:	mov	r0, #0
   16fb0:	str	r0, [fp, #-76]	; 0xffffffb4
   16fb4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16fb8:	cmp	r1, #0
   16fbc:	beq	16ff4 <__assert_fail@plt+0x5768>
   16fc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16fc4:	tst	r0, #1
   16fc8:	bne	16ff4 <__assert_fail@plt+0x5768>
   16fcc:	ldrb	r0, [r1]
   16fd0:	cmp	r0, #0
   16fd4:	beq	16ff4 <__assert_fail@plt+0x5768>
   16fd8:	add	r1, r1, #1
   16fdc:	cmp	r8, ip
   16fe0:	strbcc	r0, [r5, r8]
   16fe4:	add	r8, r8, #1
   16fe8:	ldrb	r0, [r1], #1
   16fec:	cmp	r0, #0
   16ff0:	bne	16fdc <__assert_fail@plt+0x5750>
   16ff4:	cmp	r8, ip
   16ff8:	movcc	r0, #0
   16ffc:	strbcc	r0, [r5, r8]
   17000:	mov	r0, r8
   17004:	sub	sp, fp, #28
   17008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1700c:	mov	r0, #4
   17010:	b	16f30 <__assert_fail@plt+0x56a4>
   17014:	mov	r4, r1
   17018:	b	16f20 <__assert_fail@plt+0x5694>
   1701c:	bl	11850 <abort@plt>
   17020:	mov	r3, r2
   17024:	mov	r2, #0
   17028:	b	1702c <__assert_fail@plt+0x57a0>
   1702c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17030:	add	fp, sp, #28
   17034:	sub	sp, sp, #36	; 0x24
   17038:	movw	r8, #45584	; 0xb210
   1703c:	cmp	r3, #0
   17040:	mov	r4, r2
   17044:	str	r2, [sp, #24]
   17048:	mov	r5, r1
   1704c:	mov	r6, r0
   17050:	str	r0, [sp, #20]
   17054:	movt	r8, #2
   17058:	movne	r8, r3
   1705c:	bl	11700 <__errno_location@plt>
   17060:	str	r0, [sp, #28]
   17064:	ldr	r1, [r8, #40]	; 0x28
   17068:	ldr	r2, [r8, #44]	; 0x2c
   1706c:	ldr	r7, [r0]
   17070:	cmp	r4, #0
   17074:	add	sl, r8, #8
   17078:	mov	r0, #0
   1707c:	ldm	r8, {r3, r9}
   17080:	orreq	r9, r9, #1
   17084:	stm	sp, {r3, r9, sl}
   17088:	str	r1, [sp, #12]
   1708c:	str	r2, [sp, #16]
   17090:	mov	r1, #0
   17094:	mov	r2, r6
   17098:	mov	r3, r5
   1709c:	str	r7, [sp, #32]
   170a0:	mov	r7, r5
   170a4:	bl	15fb0 <__assert_fail@plt+0x4724>
   170a8:	add	r4, r0, #1
   170ac:	mov	r5, r0
   170b0:	mov	r0, r4
   170b4:	bl	185dc <__assert_fail@plt+0x6d50>
   170b8:	mov	r6, r0
   170bc:	ldr	r0, [r8]
   170c0:	ldr	r2, [r8, #44]	; 0x2c
   170c4:	ldr	r1, [r8, #40]	; 0x28
   170c8:	mov	r3, r7
   170cc:	stm	sp, {r0, r9, sl}
   170d0:	str	r2, [sp, #16]
   170d4:	ldr	r2, [sp, #20]
   170d8:	str	r1, [sp, #12]
   170dc:	mov	r0, r6
   170e0:	mov	r1, r4
   170e4:	bl	15fb0 <__assert_fail@plt+0x4724>
   170e8:	ldr	r0, [sp, #24]
   170ec:	ldr	r1, [sp, #32]
   170f0:	ldr	r2, [sp, #28]
   170f4:	cmp	r0, #0
   170f8:	str	r1, [r2]
   170fc:	strne	r5, [r0]
   17100:	mov	r0, r6
   17104:	sub	sp, fp, #28
   17108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1710c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17110:	add	fp, sp, #24
   17114:	movw	r5, #45428	; 0xb174
   17118:	movw	r8, #45424	; 0xb170
   1711c:	movt	r5, #2
   17120:	movt	r8, #2
   17124:	ldr	r0, [r5]
   17128:	ldr	r4, [r8]
   1712c:	cmp	r0, #2
   17130:	blt	1715c <__assert_fail@plt+0x58d0>
   17134:	add	r7, r4, #12
   17138:	mov	r6, #0
   1713c:	ldr	r0, [r7, r6, lsl #3]
   17140:	bl	19108 <__assert_fail@plt+0x787c>
   17144:	ldr	r1, [r5]
   17148:	add	r2, r6, #2
   1714c:	add	r0, r6, #1
   17150:	mov	r6, r0
   17154:	cmp	r2, r1
   17158:	blt	1713c <__assert_fail@plt+0x58b0>
   1715c:	ldr	r0, [r4, #4]
   17160:	movw	r9, #45632	; 0xb240
   17164:	movw	r7, #45432	; 0xb178
   17168:	movt	r9, #2
   1716c:	movt	r7, #2
   17170:	cmp	r0, r9
   17174:	beq	17184 <__assert_fail@plt+0x58f8>
   17178:	bl	19108 <__assert_fail@plt+0x787c>
   1717c:	mov	r0, #256	; 0x100
   17180:	stm	r7, {r0, r9}
   17184:	cmp	r4, r7
   17188:	beq	17198 <__assert_fail@plt+0x590c>
   1718c:	mov	r0, r4
   17190:	bl	19108 <__assert_fail@plt+0x787c>
   17194:	str	r7, [r8]
   17198:	mov	r0, #1
   1719c:	str	r0, [r5]
   171a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   171a4:	movw	r3, #45584	; 0xb210
   171a8:	mvn	r2, #0
   171ac:	movt	r3, #2
   171b0:	b	171b4 <__assert_fail@plt+0x5928>
   171b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171b8:	add	fp, sp, #28
   171bc:	sub	sp, sp, #44	; 0x2c
   171c0:	mov	r7, r3
   171c4:	str	r2, [sp, #36]	; 0x24
   171c8:	str	r1, [sp, #32]
   171cc:	mov	r5, r0
   171d0:	bl	11700 <__errno_location@plt>
   171d4:	cmp	r5, #0
   171d8:	bmi	17348 <__assert_fail@plt+0x5abc>
   171dc:	cmn	r5, #-2147483647	; 0x80000001
   171e0:	beq	17348 <__assert_fail@plt+0x5abc>
   171e4:	movw	r8, #45428	; 0xb174
   171e8:	movw	r4, #45424	; 0xb170
   171ec:	str	r0, [sp, #28]
   171f0:	ldr	r0, [r0]
   171f4:	movt	r8, #2
   171f8:	movt	r4, #2
   171fc:	ldr	r1, [r8]
   17200:	ldr	r6, [r4]
   17204:	str	r0, [sp, #24]
   17208:	cmp	r1, r5
   1720c:	ble	17218 <__assert_fail@plt+0x598c>
   17210:	mov	sl, r6
   17214:	b	17284 <__assert_fail@plt+0x59f8>
   17218:	movw	r9, #45432	; 0xb178
   1721c:	mov	r0, #8
   17220:	str	r1, [fp, #-32]	; 0xffffffe0
   17224:	sub	r1, r5, r1
   17228:	mvn	r3, #-2147483648	; 0x80000000
   1722c:	movt	r9, #2
   17230:	str	r0, [sp]
   17234:	add	r2, r1, #1
   17238:	sub	r1, fp, #32
   1723c:	subs	r0, r6, r9
   17240:	movne	r0, r6
   17244:	bl	1870c <__assert_fail@plt+0x6e80>
   17248:	mov	sl, r0
   1724c:	cmp	r6, r9
   17250:	str	r0, [r4]
   17254:	bne	17260 <__assert_fail@plt+0x59d4>
   17258:	ldrd	r0, [r9]
   1725c:	stm	sl, {r0, r1}
   17260:	ldr	r1, [r8]
   17264:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17268:	add	r0, sl, r1, lsl #3
   1726c:	sub	r1, r2, r1
   17270:	lsl	r2, r1, #3
   17274:	mov	r1, #0
   17278:	bl	11724 <memset@plt>
   1727c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17280:	str	r0, [r8]
   17284:	mov	r9, sl
   17288:	ldm	r7, {r0, r1}
   1728c:	orr	r8, r1, #1
   17290:	add	r1, r7, #8
   17294:	ldr	r2, [r7, #40]	; 0x28
   17298:	ldr	r3, [r7, #44]	; 0x2c
   1729c:	ldr	r6, [r9, r5, lsl #3]!
   172a0:	str	r1, [sp, #20]
   172a4:	ldr	r4, [r9, #4]!
   172a8:	stm	sp, {r0, r8}
   172ac:	add	r0, sp, #8
   172b0:	stm	r0, {r1, r2, r3}
   172b4:	ldr	r2, [sp, #32]
   172b8:	ldr	r3, [sp, #36]	; 0x24
   172bc:	mov	r1, r6
   172c0:	mov	r0, r4
   172c4:	bl	15fb0 <__assert_fail@plt+0x4724>
   172c8:	cmp	r6, r0
   172cc:	bhi	17330 <__assert_fail@plt+0x5aa4>
   172d0:	add	r6, r0, #1
   172d4:	movw	r0, #45632	; 0xb240
   172d8:	movt	r0, #2
   172dc:	str	r6, [sl, r5, lsl #3]
   172e0:	cmp	r4, r0
   172e4:	beq	172f0 <__assert_fail@plt+0x5a64>
   172e8:	mov	r0, r4
   172ec:	bl	19108 <__assert_fail@plt+0x787c>
   172f0:	mov	r0, r6
   172f4:	bl	185dc <__assert_fail@plt+0x6d50>
   172f8:	str	r0, [r9]
   172fc:	mov	r4, r0
   17300:	add	r3, sp, #8
   17304:	ldr	r0, [r7]
   17308:	ldr	r1, [r7, #40]	; 0x28
   1730c:	ldr	r2, [r7, #44]	; 0x2c
   17310:	stm	sp, {r0, r8}
   17314:	ldr	r0, [sp, #20]
   17318:	stm	r3, {r0, r1, r2}
   1731c:	ldr	r2, [sp, #32]
   17320:	ldr	r3, [sp, #36]	; 0x24
   17324:	mov	r0, r4
   17328:	mov	r1, r6
   1732c:	bl	15fb0 <__assert_fail@plt+0x4724>
   17330:	ldr	r0, [sp, #28]
   17334:	ldr	r1, [sp, #24]
   17338:	str	r1, [r0]
   1733c:	mov	r0, r4
   17340:	sub	sp, fp, #28
   17344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17348:	bl	11850 <abort@plt>
   1734c:	movw	r3, #45584	; 0xb210
   17350:	movt	r3, #2
   17354:	b	171b4 <__assert_fail@plt+0x5928>
   17358:	movw	r3, #45584	; 0xb210
   1735c:	mov	r1, r0
   17360:	mov	r0, #0
   17364:	mvn	r2, #0
   17368:	movt	r3, #2
   1736c:	b	171b4 <__assert_fail@plt+0x5928>
   17370:	movw	r3, #45584	; 0xb210
   17374:	mov	r2, r1
   17378:	mov	r1, r0
   1737c:	mov	r0, #0
   17380:	movt	r3, #2
   17384:	b	171b4 <__assert_fail@plt+0x5928>
   17388:	push	{fp, lr}
   1738c:	mov	fp, sp
   17390:	sub	sp, sp, #48	; 0x30
   17394:	vmov.i32	q8, #0	; 0x00000000
   17398:	mov	ip, #32
   1739c:	mov	r3, sp
   173a0:	mov	lr, r2
   173a4:	cmp	r1, #10
   173a8:	add	r2, r3, #16
   173ac:	vst1.64	{d16-d17}, [r3], ip
   173b0:	vst1.64	{d16-d17}, [r2]
   173b4:	vst1.64	{d16-d17}, [r3]
   173b8:	beq	173d8 <__assert_fail@plt+0x5b4c>
   173bc:	str	r1, [sp]
   173c0:	mov	r3, sp
   173c4:	mov	r1, lr
   173c8:	mvn	r2, #0
   173cc:	bl	171b4 <__assert_fail@plt+0x5928>
   173d0:	mov	sp, fp
   173d4:	pop	{fp, pc}
   173d8:	bl	11850 <abort@plt>
   173dc:	push	{r4, sl, fp, lr}
   173e0:	add	fp, sp, #8
   173e4:	sub	sp, sp, #48	; 0x30
   173e8:	vmov.i32	q8, #0	; 0x00000000
   173ec:	mov	ip, r3
   173f0:	mov	r3, sp
   173f4:	mov	lr, #32
   173f8:	cmp	r1, #10
   173fc:	add	r4, r3, #16
   17400:	vst1.64	{d16-d17}, [r3], lr
   17404:	vst1.64	{d16-d17}, [r4]
   17408:	vst1.64	{d16-d17}, [r3]
   1740c:	beq	1742c <__assert_fail@plt+0x5ba0>
   17410:	str	r1, [sp]
   17414:	mov	r1, r2
   17418:	mov	r3, sp
   1741c:	mov	r2, ip
   17420:	bl	171b4 <__assert_fail@plt+0x5928>
   17424:	sub	sp, fp, #8
   17428:	pop	{r4, sl, fp, pc}
   1742c:	bl	11850 <abort@plt>
   17430:	mov	r2, r1
   17434:	mov	r1, r0
   17438:	mov	r0, #0
   1743c:	b	17388 <__assert_fail@plt+0x5afc>
   17440:	mov	r3, r2
   17444:	mov	r2, r1
   17448:	mov	r1, r0
   1744c:	mov	r0, #0
   17450:	b	173dc <__assert_fail@plt+0x5b50>
   17454:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17458:	add	fp, sp, #24
   1745c:	sub	sp, sp, #48	; 0x30
   17460:	movw	r8, #45584	; 0xb210
   17464:	mov	lr, r0
   17468:	mov	r3, sp
   1746c:	mov	ip, r1
   17470:	movt	r8, #2
   17474:	mov	r1, r3
   17478:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1747c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   17480:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   17484:	stm	r1, {r0, r4, r5, r6, r7, r9}
   17488:	ubfx	r0, r2, #5, #3
   1748c:	and	r2, r2, #31
   17490:	mov	r4, #1
   17494:	add	r0, r3, r0, lsl #2
   17498:	ldr	r1, [r0, #8]
   1749c:	bic	r4, r4, r1, lsr r2
   174a0:	eor	r1, r1, r4, lsl r2
   174a4:	mov	r2, ip
   174a8:	str	r1, [r0, #8]
   174ac:	mov	r0, #0
   174b0:	mov	r1, lr
   174b4:	bl	171b4 <__assert_fail@plt+0x5928>
   174b8:	sub	sp, fp, #24
   174bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   174c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   174c4:	add	fp, sp, #24
   174c8:	sub	sp, sp, #48	; 0x30
   174cc:	movw	lr, #45584	; 0xb210
   174d0:	mov	ip, r0
   174d4:	mov	r3, sp
   174d8:	movt	lr, #2
   174dc:	mov	r2, r3
   174e0:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   174e4:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   174e8:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   174ec:	stm	r2, {r0, r4, r5, r6, r7, r8}
   174f0:	ubfx	r0, r1, #5, #3
   174f4:	and	r1, r1, #31
   174f8:	mov	r7, #1
   174fc:	add	r0, r3, r0, lsl #2
   17500:	ldr	r2, [r0, #8]
   17504:	bic	r7, r7, r2, lsr r1
   17508:	eor	r1, r2, r7, lsl r1
   1750c:	mvn	r2, #0
   17510:	str	r1, [r0, #8]
   17514:	mov	r0, #0
   17518:	mov	r1, ip
   1751c:	bl	171b4 <__assert_fail@plt+0x5928>
   17520:	sub	sp, fp, #24
   17524:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17528:	push	{r4, r5, r6, r7, fp, lr}
   1752c:	add	fp, sp, #16
   17530:	sub	sp, sp, #48	; 0x30
   17534:	movw	lr, #45584	; 0xb210
   17538:	mov	ip, r0
   1753c:	mov	r3, sp
   17540:	movt	lr, #2
   17544:	mov	r2, r3
   17548:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   1754c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17550:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   17554:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17558:	mov	r1, ip
   1755c:	mvn	r2, #0
   17560:	ldr	r0, [sp, #12]
   17564:	orr	r0, r0, #67108864	; 0x4000000
   17568:	str	r0, [sp, #12]
   1756c:	mov	r0, #0
   17570:	bl	171b4 <__assert_fail@plt+0x5928>
   17574:	sub	sp, fp, #16
   17578:	pop	{r4, r5, r6, r7, fp, pc}
   1757c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17580:	add	fp, sp, #24
   17584:	sub	sp, sp, #48	; 0x30
   17588:	movw	r8, #45584	; 0xb210
   1758c:	mov	ip, r1
   17590:	mov	lr, r0
   17594:	mov	r3, sp
   17598:	movt	r8, #2
   1759c:	mov	r2, r3
   175a0:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   175a4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   175a8:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   175ac:	stm	r2, {r0, r1, r4, r5, r6, r7}
   175b0:	mov	r1, lr
   175b4:	mov	r2, ip
   175b8:	ldr	r0, [sp, #12]
   175bc:	orr	r0, r0, #67108864	; 0x4000000
   175c0:	str	r0, [sp, #12]
   175c4:	mov	r0, #0
   175c8:	bl	171b4 <__assert_fail@plt+0x5928>
   175cc:	sub	sp, fp, #24
   175d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   175d8:	add	fp, sp, #24
   175dc:	sub	sp, sp, #96	; 0x60
   175e0:	vmov.i32	q8, #0	; 0x00000000
   175e4:	mov	lr, sp
   175e8:	mov	ip, r2
   175ec:	cmp	r1, #10
   175f0:	add	r3, lr, #16
   175f4:	mov	r2, lr
   175f8:	vst1.64	{d16-d17}, [r3]
   175fc:	mov	r3, #28
   17600:	vst1.64	{d16-d17}, [r2], r3
   17604:	vst1.32	{d16-d17}, [r2]
   17608:	beq	17648 <__assert_fail@plt+0x5dbc>
   1760c:	str	r1, [sp, #48]	; 0x30
   17610:	add	r3, sp, #48	; 0x30
   17614:	ldm	lr!, {r2, r4, r5, r6, r7}
   17618:	add	r1, r3, #4
   1761c:	stmia	r1!, {r2, r4, r5, r6, r7}
   17620:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   17624:	stm	r1, {r2, r4, r5, r6, r7, r8}
   17628:	mvn	r2, #0
   1762c:	ldr	r1, [sp, #60]	; 0x3c
   17630:	orr	r1, r1, #67108864	; 0x4000000
   17634:	str	r1, [sp, #60]	; 0x3c
   17638:	mov	r1, ip
   1763c:	bl	171b4 <__assert_fail@plt+0x5928>
   17640:	sub	sp, fp, #24
   17644:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17648:	bl	11850 <abort@plt>
   1764c:	push	{fp, lr}
   17650:	mov	fp, sp
   17654:	sub	sp, sp, #8
   17658:	mvn	ip, #0
   1765c:	str	ip, [sp]
   17660:	bl	1766c <__assert_fail@plt+0x5de0>
   17664:	mov	sp, fp
   17668:	pop	{fp, pc}
   1766c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17670:	add	fp, sp, #24
   17674:	sub	sp, sp, #48	; 0x30
   17678:	movw	ip, #45584	; 0xb210
   1767c:	mov	lr, r3
   17680:	mov	r3, sp
   17684:	cmp	r1, #0
   17688:	movt	ip, #2
   1768c:	cmpne	r2, #0
   17690:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   17694:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   17698:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1769c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   176a0:	mov	r3, #10
   176a4:	str	r3, [sp]
   176a8:	bne	176b0 <__assert_fail@plt+0x5e24>
   176ac:	bl	11850 <abort@plt>
   176b0:	ldr	ip, [fp, #8]
   176b4:	str	r2, [sp, #44]	; 0x2c
   176b8:	str	r1, [sp, #40]	; 0x28
   176bc:	mov	r3, sp
   176c0:	mov	r1, lr
   176c4:	mov	r2, ip
   176c8:	bl	171b4 <__assert_fail@plt+0x5928>
   176cc:	sub	sp, fp, #24
   176d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   176d4:	push	{fp, lr}
   176d8:	mov	fp, sp
   176dc:	sub	sp, sp, #8
   176e0:	mov	r3, r2
   176e4:	mov	r2, r1
   176e8:	mov	r1, r0
   176ec:	mvn	r0, #0
   176f0:	str	r0, [sp]
   176f4:	mov	r0, #0
   176f8:	bl	1766c <__assert_fail@plt+0x5de0>
   176fc:	mov	sp, fp
   17700:	pop	{fp, pc}
   17704:	push	{fp, lr}
   17708:	mov	fp, sp
   1770c:	sub	sp, sp, #8
   17710:	mov	ip, r2
   17714:	mov	r2, r1
   17718:	mov	r1, r0
   1771c:	str	r3, [sp]
   17720:	mov	r0, #0
   17724:	mov	r3, ip
   17728:	bl	1766c <__assert_fail@plt+0x5de0>
   1772c:	mov	sp, fp
   17730:	pop	{fp, pc}
   17734:	movw	r3, #45440	; 0xb180
   17738:	movt	r3, #2
   1773c:	b	171b4 <__assert_fail@plt+0x5928>
   17740:	movw	r3, #45440	; 0xb180
   17744:	mov	r2, r1
   17748:	mov	r1, r0
   1774c:	mov	r0, #0
   17750:	movt	r3, #2
   17754:	b	171b4 <__assert_fail@plt+0x5928>
   17758:	movw	r3, #45440	; 0xb180
   1775c:	mvn	r2, #0
   17760:	movt	r3, #2
   17764:	b	171b4 <__assert_fail@plt+0x5928>
   17768:	movw	r3, #45440	; 0xb180
   1776c:	mov	r1, r0
   17770:	mov	r0, #0
   17774:	mvn	r2, #0
   17778:	movt	r3, #2
   1777c:	b	171b4 <__assert_fail@plt+0x5928>
   17780:	push	{r4, r5, fp, lr}
   17784:	add	fp, sp, #8
   17788:	mov	r5, r0
   1778c:	mov	r4, r1
   17790:	mov	r0, #0
   17794:	mov	r2, #5
   17798:	mov	r1, r5
   1779c:	bl	11568 <dcgettext@plt>
   177a0:	cmp	r0, r5
   177a4:	popne	{r4, r5, fp, pc}
   177a8:	bl	191d4 <__assert_fail@plt+0x7948>
   177ac:	ldrb	r1, [r0]
   177b0:	and	r1, r1, #223	; 0xdf
   177b4:	cmp	r1, #71	; 0x47
   177b8:	beq	17820 <__assert_fail@plt+0x5f94>
   177bc:	cmp	r1, #85	; 0x55
   177c0:	bne	17878 <__assert_fail@plt+0x5fec>
   177c4:	ldrb	r1, [r0, #1]
   177c8:	and	r1, r1, #223	; 0xdf
   177cc:	cmp	r1, #84	; 0x54
   177d0:	bne	17878 <__assert_fail@plt+0x5fec>
   177d4:	ldrb	r1, [r0, #2]
   177d8:	and	r1, r1, #223	; 0xdf
   177dc:	cmp	r1, #70	; 0x46
   177e0:	bne	17878 <__assert_fail@plt+0x5fec>
   177e4:	ldrb	r1, [r0, #3]
   177e8:	cmp	r1, #45	; 0x2d
   177ec:	bne	17878 <__assert_fail@plt+0x5fec>
   177f0:	ldrb	r1, [r0, #4]
   177f4:	cmp	r1, #56	; 0x38
   177f8:	bne	17878 <__assert_fail@plt+0x5fec>
   177fc:	ldrb	r0, [r0, #5]
   17800:	cmp	r0, #0
   17804:	bne	17878 <__assert_fail@plt+0x5fec>
   17808:	ldrb	r1, [r5]
   1780c:	movw	r2, #43328	; 0xa940
   17810:	movw	r0, #43332	; 0xa944
   17814:	movt	r2, #1
   17818:	movt	r0, #1
   1781c:	b	178a8 <__assert_fail@plt+0x601c>
   17820:	ldrb	r1, [r0, #1]
   17824:	and	r1, r1, #223	; 0xdf
   17828:	cmp	r1, #66	; 0x42
   1782c:	bne	17878 <__assert_fail@plt+0x5fec>
   17830:	ldrb	r1, [r0, #2]
   17834:	cmp	r1, #49	; 0x31
   17838:	bne	17878 <__assert_fail@plt+0x5fec>
   1783c:	ldrb	r1, [r0, #3]
   17840:	cmp	r1, #56	; 0x38
   17844:	bne	17878 <__assert_fail@plt+0x5fec>
   17848:	ldrb	r1, [r0, #4]
   1784c:	cmp	r1, #48	; 0x30
   17850:	bne	17878 <__assert_fail@plt+0x5fec>
   17854:	ldrb	r1, [r0, #5]
   17858:	cmp	r1, #51	; 0x33
   1785c:	bne	17878 <__assert_fail@plt+0x5fec>
   17860:	ldrb	r1, [r0, #6]
   17864:	cmp	r1, #48	; 0x30
   17868:	bne	17878 <__assert_fail@plt+0x5fec>
   1786c:	ldrb	r0, [r0, #7]
   17870:	cmp	r0, #0
   17874:	beq	17894 <__assert_fail@plt+0x6008>
   17878:	movw	r1, #43324	; 0xa93c
   1787c:	movw	r0, #44673	; 0xae81
   17880:	cmp	r4, #9
   17884:	movt	r1, #1
   17888:	movt	r0, #1
   1788c:	moveq	r0, r1
   17890:	pop	{r4, r5, fp, pc}
   17894:	ldrb	r1, [r5]
   17898:	movw	r2, #43336	; 0xa948
   1789c:	movw	r0, #43340	; 0xa94c
   178a0:	movt	r2, #1
   178a4:	movt	r0, #1
   178a8:	cmp	r1, #96	; 0x60
   178ac:	moveq	r0, r2
   178b0:	pop	{r4, r5, fp, pc}
   178b4:	push	{r4, sl, fp, lr}
   178b8:	add	fp, sp, #8
   178bc:	sub	sp, sp, #104	; 0x68
   178c0:	mov	r4, r0
   178c4:	movw	r0, #44397	; 0xad6d
   178c8:	mov	r1, sp
   178cc:	movt	r0, #1
   178d0:	bl	199e0 <__assert_fail@plt+0x8154>
   178d4:	mov	r1, r0
   178d8:	mov	r0, #0
   178dc:	cmp	r1, #0
   178e0:	bne	178f8 <__assert_fail@plt+0x606c>
   178e4:	ldr	r0, [sp, #96]	; 0x60
   178e8:	ldr	r1, [sp, #100]	; 0x64
   178ec:	ldm	sp, {r2, r3}
   178f0:	stm	r4, {r0, r1, r2, r3}
   178f4:	mov	r0, r4
   178f8:	sub	sp, fp, #8
   178fc:	pop	{r4, sl, fp, pc}
   17900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17904:	add	fp, sp, #28
   17908:	sub	sp, sp, #964	; 0x3c4
   1790c:	sub	sp, sp, #3072	; 0xc00
   17910:	mov	r4, r2
   17914:	mov	r5, r1
   17918:	cmn	r0, #100	; 0x64
   1791c:	beq	17930 <__assert_fail@plt+0x60a4>
   17920:	mov	r7, r0
   17924:	ldrb	r0, [r5]
   17928:	cmp	r0, #47	; 0x2f
   1792c:	bne	17944 <__assert_fail@plt+0x60b8>
   17930:	mov	r0, r5
   17934:	mov	r1, r4
   17938:	sub	sp, fp, #28
   1793c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17940:	b	17fe0 <__assert_fail@plt+0x6754>
   17944:	mov	sl, sp
   17948:	mov	r1, r7
   1794c:	mov	r2, r5
   17950:	mov	r0, sl
   17954:	bl	18b6c <__assert_fail@plt+0x72e0>
   17958:	cmp	r0, #0
   1795c:	beq	179d8 <__assert_fail@plt+0x614c>
   17960:	mov	r1, r4
   17964:	mov	r6, r0
   17968:	bl	17fe0 <__assert_fail@plt+0x6754>
   1796c:	mov	r9, r0
   17970:	bl	11700 <__errno_location@plt>
   17974:	ldr	r3, [r0]
   17978:	mov	r8, r0
   1797c:	cmp	r6, sl
   17980:	beq	17994 <__assert_fail@plt+0x6108>
   17984:	mov	r0, r6
   17988:	mov	r6, r3
   1798c:	bl	19108 <__assert_fail@plt+0x787c>
   17990:	mov	r3, r6
   17994:	cmn	r9, #1
   17998:	bne	17a94 <__assert_fail@plt+0x6208>
   1799c:	sub	r0, r3, #13
   179a0:	cmp	r0, #25
   179a4:	bls	179c4 <__assert_fail@plt+0x6138>
   179a8:	sub	r0, r3, #1
   179ac:	cmp	r0, #2
   179b0:	bcc	179d8 <__assert_fail@plt+0x614c>
   179b4:	cmp	r3, #95	; 0x5f
   179b8:	beq	179d8 <__assert_fail@plt+0x614c>
   179bc:	str	r3, [r8]
   179c0:	b	17a94 <__assert_fail@plt+0x6208>
   179c4:	movw	r2, #129	; 0x81
   179c8:	mov	r1, #1
   179cc:	movt	r2, #512	; 0x200
   179d0:	tst	r2, r1, lsl r0
   179d4:	beq	179a8 <__assert_fail@plt+0x611c>
   179d8:	mov	r0, sp
   179dc:	bl	1932c <__assert_fail@plt+0x7aa0>
   179e0:	cmp	r0, #0
   179e4:	bne	17aa0 <__assert_fail@plt+0x6214>
   179e8:	cmp	r7, #0
   179ec:	bmi	17a18 <__assert_fail@plt+0x618c>
   179f0:	ldr	r0, [sp]
   179f4:	cmp	r0, r7
   179f8:	bne	17a18 <__assert_fail@plt+0x618c>
   179fc:	mov	r0, sp
   17a00:	bl	1939c <__assert_fail@plt+0x7b10>
   17a04:	bl	11700 <__errno_location@plt>
   17a08:	mov	r1, #9
   17a0c:	mvn	r9, #0
   17a10:	str	r1, [r0]
   17a14:	b	17a94 <__assert_fail@plt+0x6208>
   17a18:	mov	r0, r7
   17a1c:	bl	117e4 <fchdir@plt>
   17a20:	cmp	r0, #0
   17a24:	beq	17a48 <__assert_fail@plt+0x61bc>
   17a28:	bl	11700 <__errno_location@plt>
   17a2c:	ldr	r5, [r0]
   17a30:	mov	r4, r0
   17a34:	mov	r0, sp
   17a38:	bl	1939c <__assert_fail@plt+0x7b10>
   17a3c:	str	r5, [r4]
   17a40:	mvn	r9, #0
   17a44:	b	17a94 <__assert_fail@plt+0x6208>
   17a48:	mov	r0, r5
   17a4c:	mov	r1, r4
   17a50:	bl	17fe0 <__assert_fail@plt+0x6754>
   17a54:	mov	r9, r0
   17a58:	mov	r4, #0
   17a5c:	cmn	r0, #1
   17a60:	bne	17a6c <__assert_fail@plt+0x61e0>
   17a64:	bl	11700 <__errno_location@plt>
   17a68:	ldr	r4, [r0]
   17a6c:	mov	r0, sp
   17a70:	bl	19380 <__assert_fail@plt+0x7af4>
   17a74:	cmp	r0, #0
   17a78:	bne	17aac <__assert_fail@plt+0x6220>
   17a7c:	mov	r0, sp
   17a80:	bl	1939c <__assert_fail@plt+0x7b10>
   17a84:	cmp	r4, #0
   17a88:	beq	17a94 <__assert_fail@plt+0x6208>
   17a8c:	bl	11700 <__errno_location@plt>
   17a90:	str	r4, [r0]
   17a94:	mov	r0, r9
   17a98:	sub	sp, fp, #28
   17a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aa0:	bl	11700 <__errno_location@plt>
   17aa4:	ldr	r0, [r0]
   17aa8:	bl	19270 <__assert_fail@plt+0x79e4>
   17aac:	bl	11700 <__errno_location@plt>
   17ab0:	ldr	r0, [r0]
   17ab4:	bl	192b0 <__assert_fail@plt+0x7a24>
   17ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17abc:	add	fp, sp, #28
   17ac0:	sub	sp, sp, #964	; 0x3c4
   17ac4:	sub	sp, sp, #3072	; 0xc00
   17ac8:	mov	r4, r2
   17acc:	mov	r5, r1
   17ad0:	cmn	r0, #100	; 0x64
   17ad4:	beq	17ae8 <__assert_fail@plt+0x625c>
   17ad8:	mov	r7, r0
   17adc:	ldrb	r0, [r5]
   17ae0:	cmp	r0, #47	; 0x2f
   17ae4:	bne	17afc <__assert_fail@plt+0x6270>
   17ae8:	mov	r0, r5
   17aec:	mov	r1, r4
   17af0:	sub	sp, fp, #28
   17af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17af8:	b	1806c <__assert_fail@plt+0x67e0>
   17afc:	mov	sl, sp
   17b00:	mov	r1, r7
   17b04:	mov	r2, r5
   17b08:	mov	r0, sl
   17b0c:	bl	18b6c <__assert_fail@plt+0x72e0>
   17b10:	cmp	r0, #0
   17b14:	beq	17b90 <__assert_fail@plt+0x6304>
   17b18:	mov	r1, r4
   17b1c:	mov	r6, r0
   17b20:	bl	1806c <__assert_fail@plt+0x67e0>
   17b24:	mov	r9, r0
   17b28:	bl	11700 <__errno_location@plt>
   17b2c:	ldr	r3, [r0]
   17b30:	mov	r8, r0
   17b34:	cmp	r6, sl
   17b38:	beq	17b4c <__assert_fail@plt+0x62c0>
   17b3c:	mov	r0, r6
   17b40:	mov	r6, r3
   17b44:	bl	19108 <__assert_fail@plt+0x787c>
   17b48:	mov	r3, r6
   17b4c:	cmn	r9, #1
   17b50:	bne	17c4c <__assert_fail@plt+0x63c0>
   17b54:	sub	r0, r3, #13
   17b58:	cmp	r0, #25
   17b5c:	bls	17b7c <__assert_fail@plt+0x62f0>
   17b60:	sub	r0, r3, #1
   17b64:	cmp	r0, #2
   17b68:	bcc	17b90 <__assert_fail@plt+0x6304>
   17b6c:	cmp	r3, #95	; 0x5f
   17b70:	beq	17b90 <__assert_fail@plt+0x6304>
   17b74:	str	r3, [r8]
   17b78:	b	17c4c <__assert_fail@plt+0x63c0>
   17b7c:	movw	r2, #129	; 0x81
   17b80:	mov	r1, #1
   17b84:	movt	r2, #512	; 0x200
   17b88:	tst	r2, r1, lsl r0
   17b8c:	beq	17b60 <__assert_fail@plt+0x62d4>
   17b90:	mov	r0, sp
   17b94:	bl	1932c <__assert_fail@plt+0x7aa0>
   17b98:	cmp	r0, #0
   17b9c:	bne	17c58 <__assert_fail@plt+0x63cc>
   17ba0:	cmp	r7, #0
   17ba4:	bmi	17bd0 <__assert_fail@plt+0x6344>
   17ba8:	ldr	r0, [sp]
   17bac:	cmp	r0, r7
   17bb0:	bne	17bd0 <__assert_fail@plt+0x6344>
   17bb4:	mov	r0, sp
   17bb8:	bl	1939c <__assert_fail@plt+0x7b10>
   17bbc:	bl	11700 <__errno_location@plt>
   17bc0:	mov	r1, #9
   17bc4:	mvn	r9, #0
   17bc8:	str	r1, [r0]
   17bcc:	b	17c4c <__assert_fail@plt+0x63c0>
   17bd0:	mov	r0, r7
   17bd4:	bl	117e4 <fchdir@plt>
   17bd8:	cmp	r0, #0
   17bdc:	beq	17c00 <__assert_fail@plt+0x6374>
   17be0:	bl	11700 <__errno_location@plt>
   17be4:	ldr	r5, [r0]
   17be8:	mov	r4, r0
   17bec:	mov	r0, sp
   17bf0:	bl	1939c <__assert_fail@plt+0x7b10>
   17bf4:	str	r5, [r4]
   17bf8:	mvn	r9, #0
   17bfc:	b	17c4c <__assert_fail@plt+0x63c0>
   17c00:	mov	r0, r5
   17c04:	mov	r1, r4
   17c08:	bl	1806c <__assert_fail@plt+0x67e0>
   17c0c:	mov	r9, r0
   17c10:	mov	r4, #0
   17c14:	cmn	r0, #1
   17c18:	bne	17c24 <__assert_fail@plt+0x6398>
   17c1c:	bl	11700 <__errno_location@plt>
   17c20:	ldr	r4, [r0]
   17c24:	mov	r0, sp
   17c28:	bl	19380 <__assert_fail@plt+0x7af4>
   17c2c:	cmp	r0, #0
   17c30:	bne	17c64 <__assert_fail@plt+0x63d8>
   17c34:	mov	r0, sp
   17c38:	bl	1939c <__assert_fail@plt+0x7b10>
   17c3c:	cmp	r4, #0
   17c40:	beq	17c4c <__assert_fail@plt+0x63c0>
   17c44:	bl	11700 <__errno_location@plt>
   17c48:	str	r4, [r0]
   17c4c:	mov	r0, r9
   17c50:	sub	sp, fp, #28
   17c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c58:	bl	11700 <__errno_location@plt>
   17c5c:	ldr	r0, [r0]
   17c60:	bl	19270 <__assert_fail@plt+0x79e4>
   17c64:	bl	11700 <__errno_location@plt>
   17c68:	ldr	r0, [r0]
   17c6c:	bl	192b0 <__assert_fail@plt+0x7a24>
   17c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c74:	add	fp, sp, #28
   17c78:	sub	sp, sp, #964	; 0x3c4
   17c7c:	sub	sp, sp, #3072	; 0xc00
   17c80:	mov	r4, r2
   17c84:	mov	r5, r1
   17c88:	cmn	r0, #100	; 0x64
   17c8c:	beq	17ca0 <__assert_fail@plt+0x6414>
   17c90:	mov	r7, r0
   17c94:	ldrb	r0, [r5]
   17c98:	cmp	r0, #47	; 0x2f
   17c9c:	bne	17cb4 <__assert_fail@plt+0x6428>
   17ca0:	mov	r0, r5
   17ca4:	mov	r1, r4
   17ca8:	sub	sp, fp, #28
   17cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cb0:	b	11760 <setfilecon@plt>
   17cb4:	mov	sl, sp
   17cb8:	mov	r1, r7
   17cbc:	mov	r2, r5
   17cc0:	mov	r0, sl
   17cc4:	bl	18b6c <__assert_fail@plt+0x72e0>
   17cc8:	cmp	r0, #0
   17ccc:	beq	17d48 <__assert_fail@plt+0x64bc>
   17cd0:	mov	r1, r4
   17cd4:	mov	r6, r0
   17cd8:	bl	11760 <setfilecon@plt>
   17cdc:	mov	r9, r0
   17ce0:	bl	11700 <__errno_location@plt>
   17ce4:	ldr	r3, [r0]
   17ce8:	mov	r8, r0
   17cec:	cmp	r6, sl
   17cf0:	beq	17d04 <__assert_fail@plt+0x6478>
   17cf4:	mov	r0, r6
   17cf8:	mov	r6, r3
   17cfc:	bl	19108 <__assert_fail@plt+0x787c>
   17d00:	mov	r3, r6
   17d04:	cmn	r9, #1
   17d08:	bne	17e04 <__assert_fail@plt+0x6578>
   17d0c:	sub	r0, r3, #13
   17d10:	cmp	r0, #25
   17d14:	bls	17d34 <__assert_fail@plt+0x64a8>
   17d18:	sub	r0, r3, #1
   17d1c:	cmp	r0, #2
   17d20:	bcc	17d48 <__assert_fail@plt+0x64bc>
   17d24:	cmp	r3, #95	; 0x5f
   17d28:	beq	17d48 <__assert_fail@plt+0x64bc>
   17d2c:	str	r3, [r8]
   17d30:	b	17e04 <__assert_fail@plt+0x6578>
   17d34:	movw	r2, #129	; 0x81
   17d38:	mov	r1, #1
   17d3c:	movt	r2, #512	; 0x200
   17d40:	tst	r2, r1, lsl r0
   17d44:	beq	17d18 <__assert_fail@plt+0x648c>
   17d48:	mov	r0, sp
   17d4c:	bl	1932c <__assert_fail@plt+0x7aa0>
   17d50:	cmp	r0, #0
   17d54:	bne	17e10 <__assert_fail@plt+0x6584>
   17d58:	cmp	r7, #0
   17d5c:	bmi	17d88 <__assert_fail@plt+0x64fc>
   17d60:	ldr	r0, [sp]
   17d64:	cmp	r0, r7
   17d68:	bne	17d88 <__assert_fail@plt+0x64fc>
   17d6c:	mov	r0, sp
   17d70:	bl	1939c <__assert_fail@plt+0x7b10>
   17d74:	bl	11700 <__errno_location@plt>
   17d78:	mov	r1, #9
   17d7c:	mvn	r9, #0
   17d80:	str	r1, [r0]
   17d84:	b	17e04 <__assert_fail@plt+0x6578>
   17d88:	mov	r0, r7
   17d8c:	bl	117e4 <fchdir@plt>
   17d90:	cmp	r0, #0
   17d94:	beq	17db8 <__assert_fail@plt+0x652c>
   17d98:	bl	11700 <__errno_location@plt>
   17d9c:	ldr	r5, [r0]
   17da0:	mov	r4, r0
   17da4:	mov	r0, sp
   17da8:	bl	1939c <__assert_fail@plt+0x7b10>
   17dac:	str	r5, [r4]
   17db0:	mvn	r9, #0
   17db4:	b	17e04 <__assert_fail@plt+0x6578>
   17db8:	mov	r0, r5
   17dbc:	mov	r1, r4
   17dc0:	bl	11760 <setfilecon@plt>
   17dc4:	mov	r9, r0
   17dc8:	mov	r4, #0
   17dcc:	cmn	r0, #1
   17dd0:	bne	17ddc <__assert_fail@plt+0x6550>
   17dd4:	bl	11700 <__errno_location@plt>
   17dd8:	ldr	r4, [r0]
   17ddc:	mov	r0, sp
   17de0:	bl	19380 <__assert_fail@plt+0x7af4>
   17de4:	cmp	r0, #0
   17de8:	bne	17e1c <__assert_fail@plt+0x6590>
   17dec:	mov	r0, sp
   17df0:	bl	1939c <__assert_fail@plt+0x7b10>
   17df4:	cmp	r4, #0
   17df8:	beq	17e04 <__assert_fail@plt+0x6578>
   17dfc:	bl	11700 <__errno_location@plt>
   17e00:	str	r4, [r0]
   17e04:	mov	r0, r9
   17e08:	sub	sp, fp, #28
   17e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e10:	bl	11700 <__errno_location@plt>
   17e14:	ldr	r0, [r0]
   17e18:	bl	19270 <__assert_fail@plt+0x79e4>
   17e1c:	bl	11700 <__errno_location@plt>
   17e20:	ldr	r0, [r0]
   17e24:	bl	192b0 <__assert_fail@plt+0x7a24>
   17e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e2c:	add	fp, sp, #28
   17e30:	sub	sp, sp, #964	; 0x3c4
   17e34:	sub	sp, sp, #3072	; 0xc00
   17e38:	mov	r4, r2
   17e3c:	mov	r5, r1
   17e40:	cmn	r0, #100	; 0x64
   17e44:	beq	17e58 <__assert_fail@plt+0x65cc>
   17e48:	mov	r7, r0
   17e4c:	ldrb	r0, [r5]
   17e50:	cmp	r0, #47	; 0x2f
   17e54:	bne	17e6c <__assert_fail@plt+0x65e0>
   17e58:	mov	r0, r5
   17e5c:	mov	r1, r4
   17e60:	sub	sp, fp, #28
   17e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e68:	b	11508 <lsetfilecon@plt>
   17e6c:	mov	sl, sp
   17e70:	mov	r1, r7
   17e74:	mov	r2, r5
   17e78:	mov	r0, sl
   17e7c:	bl	18b6c <__assert_fail@plt+0x72e0>
   17e80:	cmp	r0, #0
   17e84:	beq	17f00 <__assert_fail@plt+0x6674>
   17e88:	mov	r1, r4
   17e8c:	mov	r6, r0
   17e90:	bl	11508 <lsetfilecon@plt>
   17e94:	mov	r9, r0
   17e98:	bl	11700 <__errno_location@plt>
   17e9c:	ldr	r3, [r0]
   17ea0:	mov	r8, r0
   17ea4:	cmp	r6, sl
   17ea8:	beq	17ebc <__assert_fail@plt+0x6630>
   17eac:	mov	r0, r6
   17eb0:	mov	r6, r3
   17eb4:	bl	19108 <__assert_fail@plt+0x787c>
   17eb8:	mov	r3, r6
   17ebc:	cmn	r9, #1
   17ec0:	bne	17fbc <__assert_fail@plt+0x6730>
   17ec4:	sub	r0, r3, #13
   17ec8:	cmp	r0, #25
   17ecc:	bls	17eec <__assert_fail@plt+0x6660>
   17ed0:	sub	r0, r3, #1
   17ed4:	cmp	r0, #2
   17ed8:	bcc	17f00 <__assert_fail@plt+0x6674>
   17edc:	cmp	r3, #95	; 0x5f
   17ee0:	beq	17f00 <__assert_fail@plt+0x6674>
   17ee4:	str	r3, [r8]
   17ee8:	b	17fbc <__assert_fail@plt+0x6730>
   17eec:	movw	r2, #129	; 0x81
   17ef0:	mov	r1, #1
   17ef4:	movt	r2, #512	; 0x200
   17ef8:	tst	r2, r1, lsl r0
   17efc:	beq	17ed0 <__assert_fail@plt+0x6644>
   17f00:	mov	r0, sp
   17f04:	bl	1932c <__assert_fail@plt+0x7aa0>
   17f08:	cmp	r0, #0
   17f0c:	bne	17fc8 <__assert_fail@plt+0x673c>
   17f10:	cmp	r7, #0
   17f14:	bmi	17f40 <__assert_fail@plt+0x66b4>
   17f18:	ldr	r0, [sp]
   17f1c:	cmp	r0, r7
   17f20:	bne	17f40 <__assert_fail@plt+0x66b4>
   17f24:	mov	r0, sp
   17f28:	bl	1939c <__assert_fail@plt+0x7b10>
   17f2c:	bl	11700 <__errno_location@plt>
   17f30:	mov	r1, #9
   17f34:	mvn	r9, #0
   17f38:	str	r1, [r0]
   17f3c:	b	17fbc <__assert_fail@plt+0x6730>
   17f40:	mov	r0, r7
   17f44:	bl	117e4 <fchdir@plt>
   17f48:	cmp	r0, #0
   17f4c:	beq	17f70 <__assert_fail@plt+0x66e4>
   17f50:	bl	11700 <__errno_location@plt>
   17f54:	ldr	r5, [r0]
   17f58:	mov	r4, r0
   17f5c:	mov	r0, sp
   17f60:	bl	1939c <__assert_fail@plt+0x7b10>
   17f64:	str	r5, [r4]
   17f68:	mvn	r9, #0
   17f6c:	b	17fbc <__assert_fail@plt+0x6730>
   17f70:	mov	r0, r5
   17f74:	mov	r1, r4
   17f78:	bl	11508 <lsetfilecon@plt>
   17f7c:	mov	r9, r0
   17f80:	mov	r4, #0
   17f84:	cmn	r0, #1
   17f88:	bne	17f94 <__assert_fail@plt+0x6708>
   17f8c:	bl	11700 <__errno_location@plt>
   17f90:	ldr	r4, [r0]
   17f94:	mov	r0, sp
   17f98:	bl	19380 <__assert_fail@plt+0x7af4>
   17f9c:	cmp	r0, #0
   17fa0:	bne	17fd4 <__assert_fail@plt+0x6748>
   17fa4:	mov	r0, sp
   17fa8:	bl	1939c <__assert_fail@plt+0x7b10>
   17fac:	cmp	r4, #0
   17fb0:	beq	17fbc <__assert_fail@plt+0x6730>
   17fb4:	bl	11700 <__errno_location@plt>
   17fb8:	str	r4, [r0]
   17fbc:	mov	r0, r9
   17fc0:	sub	sp, fp, #28
   17fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fc8:	bl	11700 <__errno_location@plt>
   17fcc:	ldr	r0, [r0]
   17fd0:	bl	19270 <__assert_fail@plt+0x79e4>
   17fd4:	bl	11700 <__errno_location@plt>
   17fd8:	ldr	r0, [r0]
   17fdc:	bl	192b0 <__assert_fail@plt+0x7a24>
   17fe0:	push	{r4, sl, fp, lr}
   17fe4:	add	fp, sp, #8
   17fe8:	mov	r4, r1
   17fec:	bl	116c4 <getfilecon@plt>
   17ff0:	mov	r1, r4
   17ff4:	pop	{r4, sl, fp, lr}
   17ff8:	b	17ffc <__assert_fail@plt+0x6770>
   17ffc:	push	{r4, r5, fp, lr}
   18000:	add	fp, sp, #8
   18004:	cmp	r0, #10
   18008:	beq	18020 <__assert_fail@plt+0x6794>
   1800c:	cmp	r0, #0
   18010:	bne	18068 <__assert_fail@plt+0x67dc>
   18014:	bl	11700 <__errno_location@plt>
   18018:	mov	r1, #95	; 0x5f
   1801c:	b	18060 <__assert_fail@plt+0x67d4>
   18020:	ldr	r5, [r1]
   18024:	mov	r4, r1
   18028:	movw	r1, #43428	; 0xa9a4
   1802c:	movt	r1, #1
   18030:	mov	r0, r5
   18034:	bl	114f0 <strcmp@plt>
   18038:	mov	r1, r0
   1803c:	mov	r0, #10
   18040:	cmp	r1, #0
   18044:	popne	{r4, r5, fp, pc}
   18048:	mov	r0, r5
   1804c:	bl	117fc <freecon@plt>
   18050:	mov	r0, #0
   18054:	str	r0, [r4]
   18058:	bl	11700 <__errno_location@plt>
   1805c:	mov	r1, #61	; 0x3d
   18060:	str	r1, [r0]
   18064:	mvn	r0, #0
   18068:	pop	{r4, r5, fp, pc}
   1806c:	push	{r4, sl, fp, lr}
   18070:	add	fp, sp, #8
   18074:	mov	r4, r1
   18078:	bl	11640 <lgetfilecon@plt>
   1807c:	mov	r1, r4
   18080:	pop	{r4, sl, fp, lr}
   18084:	b	17ffc <__assert_fail@plt+0x6770>
   18088:	push	{r4, sl, fp, lr}
   1808c:	add	fp, sp, #8
   18090:	mov	r4, r1
   18094:	bl	1158c <fgetfilecon@plt>
   18098:	mov	r1, r4
   1809c:	pop	{r4, sl, fp, lr}
   180a0:	b	17ffc <__assert_fail@plt+0x6770>
   180a4:	push	{r4, r5, r6, r7, fp, lr}
   180a8:	add	fp, sp, #16
   180ac:	mov	r4, r0
   180b0:	cmp	r0, #2
   180b4:	bhi	180e4 <__assert_fail@plt+0x6858>
   180b8:	mov	r0, r4
   180bc:	bl	193c4 <__assert_fail@plt+0x7b38>
   180c0:	mov	r5, r0
   180c4:	bl	11700 <__errno_location@plt>
   180c8:	ldr	r7, [r0]
   180cc:	mov	r6, r0
   180d0:	mov	r0, r4
   180d4:	bl	1185c <close@plt>
   180d8:	mov	r0, r5
   180dc:	str	r7, [r6]
   180e0:	pop	{r4, r5, r6, r7, fp, pc}
   180e4:	mov	r0, r4
   180e8:	pop	{r4, r5, r6, r7, fp, pc}
   180ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   180f0:	add	fp, sp, #24
   180f4:	sub	sp, sp, #32
   180f8:	ldr	r6, [fp, #12]
   180fc:	ldr	r7, [fp, #8]
   18100:	mov	r4, r2
   18104:	mov	r8, r0
   18108:	cmp	r1, #0
   1810c:	beq	18134 <__assert_fail@plt+0x68a8>
   18110:	movw	r2, #43438	; 0xa9ae
   18114:	mov	r5, r1
   18118:	str	r3, [sp, #4]
   1811c:	str	r4, [sp]
   18120:	mov	r0, r8
   18124:	mov	r1, #1
   18128:	movt	r2, #1
   1812c:	mov	r3, r5
   18130:	b	1814c <__assert_fail@plt+0x68c0>
   18134:	movw	r2, #43450	; 0xa9ba
   18138:	str	r3, [sp]
   1813c:	mov	r0, r8
   18140:	mov	r1, #1
   18144:	mov	r3, r4
   18148:	movt	r2, #1
   1814c:	bl	11748 <__fprintf_chk@plt>
   18150:	movw	r1, #43457	; 0xa9c1
   18154:	mov	r0, #0
   18158:	mov	r2, #5
   1815c:	movt	r1, #1
   18160:	bl	11568 <dcgettext@plt>
   18164:	movw	r2, #44175	; 0xac8f
   18168:	mov	r3, r0
   1816c:	movw	r0, #2022	; 0x7e6
   18170:	mov	r1, #1
   18174:	movt	r2, #1
   18178:	str	r0, [sp]
   1817c:	mov	r0, r8
   18180:	bl	11748 <__fprintf_chk@plt>
   18184:	movw	r4, #41162	; 0xa0ca
   18188:	mov	r1, r8
   1818c:	movt	r4, #1
   18190:	mov	r0, r4
   18194:	bl	114cc <fputs_unlocked@plt>
   18198:	movw	r1, #43461	; 0xa9c5
   1819c:	mov	r0, #0
   181a0:	mov	r2, #5
   181a4:	movt	r1, #1
   181a8:	bl	11568 <dcgettext@plt>
   181ac:	movw	r3, #43632	; 0xaa70
   181b0:	mov	r2, r0
   181b4:	mov	r0, r8
   181b8:	mov	r1, #1
   181bc:	movt	r3, #1
   181c0:	bl	11748 <__fprintf_chk@plt>
   181c4:	mov	r0, r4
   181c8:	mov	r1, r8
   181cc:	bl	114cc <fputs_unlocked@plt>
   181d0:	cmp	r6, #9
   181d4:	bhi	18238 <__assert_fail@plt+0x69ac>
   181d8:	add	r0, pc, #0
   181dc:	ldr	pc, [r0, r6, lsl #2]
   181e0:	andeq	r8, r1, r0, lsl r4
   181e4:	andeq	r8, r1, r8, lsl #4
   181e8:	andeq	r8, r1, r4, asr #4
   181ec:	andeq	r8, r1, ip, ror #4
   181f0:	muleq	r1, r4, r2
   181f4:			; <UNDEFINED> instruction: 0x000182bc
   181f8:	andeq	r8, r1, r4, ror #5
   181fc:	andeq	r8, r1, ip, lsl r3
   18200:			; <UNDEFINED> instruction: 0x000183bc
   18204:	andeq	r8, r1, r4, ror #6
   18208:	movw	r1, #43666	; 0xaa92
   1820c:	mov	r0, #0
   18210:	mov	r2, #5
   18214:	movt	r1, #1
   18218:	bl	11568 <dcgettext@plt>
   1821c:	ldr	r3, [r7]
   18220:	mov	r2, r0
   18224:	mov	r0, r8
   18228:	mov	r1, #1
   1822c:	sub	sp, fp, #24
   18230:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18234:	b	11748 <__fprintf_chk@plt>
   18238:	movw	r1, #43985	; 0xabd1
   1823c:	movt	r1, #1
   18240:	b	1836c <__assert_fail@plt+0x6ae0>
   18244:	movw	r1, #43682	; 0xaaa2
   18248:	mov	r0, #0
   1824c:	mov	r2, #5
   18250:	movt	r1, #1
   18254:	bl	11568 <dcgettext@plt>
   18258:	mov	r2, r0
   1825c:	ldr	r3, [r7]
   18260:	ldr	r0, [r7, #4]
   18264:	str	r0, [sp]
   18268:	b	18358 <__assert_fail@plt+0x6acc>
   1826c:	movw	r1, #43705	; 0xaab9
   18270:	mov	r0, #0
   18274:	mov	r2, #5
   18278:	movt	r1, #1
   1827c:	bl	11568 <dcgettext@plt>
   18280:	mov	r2, r0
   18284:	ldr	r3, [r7]
   18288:	ldmib	r7, {r0, r1}
   1828c:	stm	sp, {r0, r1}
   18290:	b	18358 <__assert_fail@plt+0x6acc>
   18294:	movw	r1, #43733	; 0xaad5
   18298:	mov	r0, #0
   1829c:	mov	r2, #5
   182a0:	movt	r1, #1
   182a4:	bl	11568 <dcgettext@plt>
   182a8:	ldr	r3, [r7]
   182ac:	mov	r2, r0
   182b0:	ldmib	r7, {r0, r1, r7}
   182b4:	stm	sp, {r0, r1, r7}
   182b8:	b	18358 <__assert_fail@plt+0x6acc>
   182bc:	movw	r1, #43765	; 0xaaf5
   182c0:	mov	r0, #0
   182c4:	mov	r2, #5
   182c8:	movt	r1, #1
   182cc:	bl	11568 <dcgettext@plt>
   182d0:	ldr	r3, [r7]
   182d4:	mov	r2, r0
   182d8:	ldmib	r7, {r0, r1, r6, r7}
   182dc:	stm	sp, {r0, r1, r6, r7}
   182e0:	b	18358 <__assert_fail@plt+0x6acc>
   182e4:	movw	r1, #43801	; 0xab19
   182e8:	mov	r0, #0
   182ec:	mov	r2, #5
   182f0:	movt	r1, #1
   182f4:	bl	11568 <dcgettext@plt>
   182f8:	mov	r2, r0
   182fc:	ldr	r3, [r7]
   18300:	ldmib	r7, {r0, r1, r6}
   18304:	ldr	r5, [r7, #16]
   18308:	ldr	r7, [r7, #20]
   1830c:	stm	sp, {r0, r1, r6}
   18310:	str	r5, [sp, #12]
   18314:	str	r7, [sp, #16]
   18318:	b	18358 <__assert_fail@plt+0x6acc>
   1831c:	movw	r1, #43841	; 0xab41
   18320:	mov	r0, #0
   18324:	mov	r2, #5
   18328:	movt	r1, #1
   1832c:	bl	11568 <dcgettext@plt>
   18330:	mov	r2, r0
   18334:	ldr	r3, [r7]
   18338:	ldmib	r7, {r0, r1, r6}
   1833c:	ldr	r5, [r7, #16]
   18340:	ldr	r4, [r7, #20]
   18344:	ldr	r7, [r7, #24]
   18348:	stm	sp, {r0, r1, r6}
   1834c:	str	r5, [sp, #12]
   18350:	str	r4, [sp, #16]
   18354:	str	r7, [sp, #20]
   18358:	mov	r0, r8
   1835c:	mov	r1, #1
   18360:	b	1840c <__assert_fail@plt+0x6b80>
   18364:	movw	r1, #43933	; 0xab9d
   18368:	movt	r1, #1
   1836c:	mov	r0, #0
   18370:	mov	r2, #5
   18374:	bl	11568 <dcgettext@plt>
   18378:	mov	ip, r0
   1837c:	ldr	r3, [r7]
   18380:	ldr	r0, [r7, #4]
   18384:	ldr	r1, [r7, #8]
   18388:	ldr	r6, [r7, #12]
   1838c:	ldr	r5, [r7, #16]
   18390:	ldr	r4, [r7, #20]
   18394:	ldr	r2, [r7, #24]
   18398:	ldr	lr, [r7, #28]
   1839c:	ldr	r7, [r7, #32]
   183a0:	stm	sp, {r0, r1, r6}
   183a4:	str	r5, [sp, #12]
   183a8:	str	r4, [sp, #16]
   183ac:	str	r2, [sp, #20]
   183b0:	str	lr, [sp, #24]
   183b4:	str	r7, [sp, #28]
   183b8:	b	18400 <__assert_fail@plt+0x6b74>
   183bc:	movw	r1, #43885	; 0xab6d
   183c0:	mov	r0, #0
   183c4:	mov	r2, #5
   183c8:	movt	r1, #1
   183cc:	bl	11568 <dcgettext@plt>
   183d0:	mov	ip, r0
   183d4:	ldr	r3, [r7]
   183d8:	ldmib	r7, {r0, r1, r6}
   183dc:	ldr	r5, [r7, #16]
   183e0:	ldr	r4, [r7, #20]
   183e4:	ldr	r2, [r7, #24]
   183e8:	ldr	r7, [r7, #28]
   183ec:	stm	sp, {r0, r1, r6}
   183f0:	str	r5, [sp, #12]
   183f4:	str	r4, [sp, #16]
   183f8:	str	r2, [sp, #20]
   183fc:	str	r7, [sp, #24]
   18400:	mov	r0, r8
   18404:	mov	r1, #1
   18408:	mov	r2, ip
   1840c:	bl	11748 <__fprintf_chk@plt>
   18410:	sub	sp, fp, #24
   18414:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18418:	push	{r4, sl, fp, lr}
   1841c:	add	fp, sp, #8
   18420:	sub	sp, sp, #8
   18424:	ldr	ip, [fp, #8]
   18428:	mov	lr, #0
   1842c:	ldr	r4, [ip, lr, lsl #2]
   18430:	add	lr, lr, #1
   18434:	cmp	r4, #0
   18438:	bne	1842c <__assert_fail@plt+0x6ba0>
   1843c:	sub	r4, lr, #1
   18440:	str	ip, [sp]
   18444:	str	r4, [sp, #4]
   18448:	bl	180ec <__assert_fail@plt+0x6860>
   1844c:	sub	sp, fp, #8
   18450:	pop	{r4, sl, fp, pc}
   18454:	push	{r4, r5, fp, lr}
   18458:	add	fp, sp, #8
   1845c:	sub	sp, sp, #48	; 0x30
   18460:	ldr	r4, [fp, #8]
   18464:	mov	ip, #0
   18468:	add	lr, sp, #8
   1846c:	ldr	r5, [r4]
   18470:	cmp	r5, #0
   18474:	str	r5, [lr, ip, lsl #2]
   18478:	beq	18490 <__assert_fail@plt+0x6c04>
   1847c:	add	ip, ip, #1
   18480:	add	r4, r4, #4
   18484:	cmp	ip, #10
   18488:	bne	1846c <__assert_fail@plt+0x6be0>
   1848c:	mov	ip, #10
   18490:	str	lr, [sp]
   18494:	str	ip, [sp, #4]
   18498:	bl	180ec <__assert_fail@plt+0x6860>
   1849c:	sub	sp, fp, #8
   184a0:	pop	{r4, r5, fp, pc}
   184a4:	push	{fp, lr}
   184a8:	mov	fp, sp
   184ac:	sub	sp, sp, #8
   184b0:	add	ip, fp, #8
   184b4:	str	ip, [sp, #4]
   184b8:	str	ip, [sp]
   184bc:	bl	18454 <__assert_fail@plt+0x6bc8>
   184c0:	mov	sp, fp
   184c4:	pop	{fp, pc}
   184c8:	push	{fp, lr}
   184cc:	mov	fp, sp
   184d0:	movw	r0, #45508	; 0xb1c4
   184d4:	movt	r0, #2
   184d8:	ldr	r1, [r0]
   184dc:	movw	r0, #41162	; 0xa0ca
   184e0:	movt	r0, #1
   184e4:	bl	114cc <fputs_unlocked@plt>
   184e8:	movw	r1, #44045	; 0xac0d
   184ec:	mov	r0, #0
   184f0:	mov	r2, #5
   184f4:	movt	r1, #1
   184f8:	bl	11568 <dcgettext@plt>
   184fc:	movw	r2, #44065	; 0xac21
   18500:	mov	r1, r0
   18504:	mov	r0, #1
   18508:	movt	r2, #1
   1850c:	bl	11730 <__printf_chk@plt>
   18510:	movw	r1, #44087	; 0xac37
   18514:	mov	r0, #0
   18518:	mov	r2, #5
   1851c:	movt	r1, #1
   18520:	bl	11568 <dcgettext@plt>
   18524:	movw	r2, #41308	; 0xa15c
   18528:	movw	r3, #41777	; 0xa331
   1852c:	mov	r1, r0
   18530:	mov	r0, #1
   18534:	movt	r2, #1
   18538:	movt	r3, #1
   1853c:	bl	11730 <__printf_chk@plt>
   18540:	movw	r1, #44107	; 0xac4b
   18544:	mov	r0, #0
   18548:	mov	r2, #5
   1854c:	movt	r1, #1
   18550:	bl	11568 <dcgettext@plt>
   18554:	movw	r2, #44146	; 0xac72
   18558:	mov	r1, r0
   1855c:	mov	r0, #1
   18560:	movt	r2, #1
   18564:	pop	{fp, lr}
   18568:	b	11730 <__printf_chk@plt>
   1856c:	b	18570 <__assert_fail@plt+0x6ce4>
   18570:	push	{r4, r5, r6, sl, fp, lr}
   18574:	add	fp, sp, #16
   18578:	mov	r4, r2
   1857c:	mov	r5, r1
   18580:	mov	r6, r0
   18584:	bl	192f0 <__assert_fail@plt+0x7a64>
   18588:	cmp	r0, #0
   1858c:	popne	{r4, r5, r6, sl, fp, pc}
   18590:	cmp	r6, #0
   18594:	beq	185a8 <__assert_fail@plt+0x6d1c>
   18598:	cmp	r5, #0
   1859c:	cmpne	r4, #0
   185a0:	bne	185a8 <__assert_fail@plt+0x6d1c>
   185a4:	pop	{r4, r5, r6, sl, fp, pc}
   185a8:	bl	189d8 <__assert_fail@plt+0x714c>
   185ac:	push	{fp, lr}
   185b0:	mov	fp, sp
   185b4:	bl	18aec <__assert_fail@plt+0x7260>
   185b8:	cmp	r0, #0
   185bc:	popne	{fp, pc}
   185c0:	bl	189d8 <__assert_fail@plt+0x714c>
   185c4:	push	{fp, lr}
   185c8:	mov	fp, sp
   185cc:	bl	18aec <__assert_fail@plt+0x7260>
   185d0:	cmp	r0, #0
   185d4:	popne	{fp, pc}
   185d8:	bl	189d8 <__assert_fail@plt+0x714c>
   185dc:	push	{fp, lr}
   185e0:	mov	fp, sp
   185e4:	bl	18aec <__assert_fail@plt+0x7260>
   185e8:	cmp	r0, #0
   185ec:	popne	{fp, pc}
   185f0:	bl	189d8 <__assert_fail@plt+0x714c>
   185f4:	push	{r4, r5, fp, lr}
   185f8:	add	fp, sp, #8
   185fc:	mov	r4, r1
   18600:	mov	r5, r0
   18604:	bl	18b1c <__assert_fail@plt+0x7290>
   18608:	cmp	r0, #0
   1860c:	popne	{r4, r5, fp, pc}
   18610:	cmp	r5, #0
   18614:	beq	18624 <__assert_fail@plt+0x6d98>
   18618:	cmp	r4, #0
   1861c:	bne	18624 <__assert_fail@plt+0x6d98>
   18620:	pop	{r4, r5, fp, pc}
   18624:	bl	189d8 <__assert_fail@plt+0x714c>
   18628:	push	{fp, lr}
   1862c:	mov	fp, sp
   18630:	cmp	r1, #0
   18634:	orreq	r1, r1, #1
   18638:	bl	18b1c <__assert_fail@plt+0x7290>
   1863c:	cmp	r0, #0
   18640:	popne	{fp, pc}
   18644:	bl	189d8 <__assert_fail@plt+0x714c>
   18648:	push	{fp, lr}
   1864c:	mov	fp, sp
   18650:	clz	r3, r2
   18654:	lsr	ip, r3, #5
   18658:	clz	r3, r1
   1865c:	lsr	r3, r3, #5
   18660:	orrs	r3, r3, ip
   18664:	movwne	r1, #1
   18668:	movwne	r2, #1
   1866c:	bl	192f0 <__assert_fail@plt+0x7a64>
   18670:	cmp	r0, #0
   18674:	popne	{fp, pc}
   18678:	bl	189d8 <__assert_fail@plt+0x714c>
   1867c:	push	{fp, lr}
   18680:	mov	fp, sp
   18684:	mov	r2, r1
   18688:	mov	r1, r0
   1868c:	mov	r0, #0
   18690:	bl	192f0 <__assert_fail@plt+0x7a64>
   18694:	cmp	r0, #0
   18698:	popne	{fp, pc}
   1869c:	bl	189d8 <__assert_fail@plt+0x714c>
   186a0:	mov	r2, r1
   186a4:	mov	r1, r0
   186a8:	mov	r0, #0
   186ac:	b	18648 <__assert_fail@plt+0x6dbc>
   186b0:	mov	r2, #1
   186b4:	b	186b8 <__assert_fail@plt+0x6e2c>
   186b8:	push	{r4, r5, fp, lr}
   186bc:	add	fp, sp, #8
   186c0:	ldr	r5, [r1]
   186c4:	mov	r4, r1
   186c8:	cmp	r0, #0
   186cc:	beq	186e4 <__assert_fail@plt+0x6e58>
   186d0:	mov	r1, #1
   186d4:	add	r1, r1, r5, lsr #1
   186d8:	adds	r5, r5, r1
   186dc:	bcc	186fc <__assert_fail@plt+0x6e70>
   186e0:	bl	189d8 <__assert_fail@plt+0x714c>
   186e4:	cmp	r5, #0
   186e8:	bne	186fc <__assert_fail@plt+0x6e70>
   186ec:	mov	r1, #64	; 0x40
   186f0:	cmp	r2, #64	; 0x40
   186f4:	udiv	r5, r1, r2
   186f8:	addhi	r5, r5, #1
   186fc:	mov	r1, r5
   18700:	bl	18570 <__assert_fail@plt+0x6ce4>
   18704:	str	r5, [r4]
   18708:	pop	{r4, r5, fp, pc}
   1870c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18710:	add	fp, sp, #24
   18714:	ldr	r6, [r1]
   18718:	mov	r8, r1
   1871c:	ldr	r4, [fp, #8]
   18720:	add	r1, r6, r6, asr #1
   18724:	cmp	r1, r6
   18728:	mvnvs	r1, #-2147483648	; 0x80000000
   1872c:	cmp	r1, r3
   18730:	mov	r5, r1
   18734:	movgt	r5, r3
   18738:	cmn	r3, #1
   1873c:	movle	r5, r1
   18740:	cmn	r4, #1
   18744:	ble	18764 <__assert_fail@plt+0x6ed8>
   18748:	cmp	r4, #0
   1874c:	beq	187b8 <__assert_fail@plt+0x6f2c>
   18750:	cmn	r5, #1
   18754:	ble	1878c <__assert_fail@plt+0x6f00>
   18758:	mvn	r7, #-2147483648	; 0x80000000
   1875c:	udiv	r1, r7, r4
   18760:	b	18780 <__assert_fail@plt+0x6ef4>
   18764:	cmn	r5, #1
   18768:	ble	187a8 <__assert_fail@plt+0x6f1c>
   1876c:	cmn	r4, #1
   18770:	beq	187b8 <__assert_fail@plt+0x6f2c>
   18774:	mov	r1, #-2147483648	; 0x80000000
   18778:	mvn	r7, #-2147483648	; 0x80000000
   1877c:	sdiv	r1, r1, r4
   18780:	cmp	r1, r5
   18784:	bge	187b8 <__assert_fail@plt+0x6f2c>
   18788:	b	187c8 <__assert_fail@plt+0x6f3c>
   1878c:	beq	187b8 <__assert_fail@plt+0x6f2c>
   18790:	mov	r1, #-2147483648	; 0x80000000
   18794:	mvn	r7, #-2147483648	; 0x80000000
   18798:	sdiv	r1, r1, r5
   1879c:	cmp	r1, r4
   187a0:	bge	187b8 <__assert_fail@plt+0x6f2c>
   187a4:	b	187c8 <__assert_fail@plt+0x6f3c>
   187a8:	mvn	r7, #-2147483648	; 0x80000000
   187ac:	sdiv	r1, r7, r4
   187b0:	cmp	r5, r1
   187b4:	blt	187c8 <__assert_fail@plt+0x6f3c>
   187b8:	mul	r1, r5, r4
   187bc:	mov	r7, #64	; 0x40
   187c0:	cmp	r1, #63	; 0x3f
   187c4:	bgt	187d0 <__assert_fail@plt+0x6f44>
   187c8:	sdiv	r5, r7, r4
   187cc:	mul	r1, r5, r4
   187d0:	cmp	r0, #0
   187d4:	moveq	r7, #0
   187d8:	streq	r7, [r8]
   187dc:	sub	r7, r5, r6
   187e0:	cmp	r7, r2
   187e4:	bge	18888 <__assert_fail@plt+0x6ffc>
   187e8:	add	r5, r6, r2
   187ec:	mov	r2, #0
   187f0:	mov	r1, #0
   187f4:	cmp	r5, r3
   187f8:	movwgt	r2, #1
   187fc:	cmn	r3, #1
   18800:	movwgt	r1, #1
   18804:	cmp	r5, r6
   18808:	bvs	18870 <__assert_fail@plt+0x6fe4>
   1880c:	ands	r1, r1, r2
   18810:	bne	18870 <__assert_fail@plt+0x6fe4>
   18814:	cmn	r4, #1
   18818:	ble	18838 <__assert_fail@plt+0x6fac>
   1881c:	cmp	r4, #0
   18820:	beq	18884 <__assert_fail@plt+0x6ff8>
   18824:	cmn	r5, #1
   18828:	ble	1885c <__assert_fail@plt+0x6fd0>
   1882c:	mvn	r1, #-2147483648	; 0x80000000
   18830:	udiv	r1, r1, r4
   18834:	b	18850 <__assert_fail@plt+0x6fc4>
   18838:	cmn	r5, #1
   1883c:	ble	18874 <__assert_fail@plt+0x6fe8>
   18840:	cmn	r4, #1
   18844:	beq	18884 <__assert_fail@plt+0x6ff8>
   18848:	mov	r1, #-2147483648	; 0x80000000
   1884c:	sdiv	r1, r1, r4
   18850:	cmp	r1, r5
   18854:	bge	18884 <__assert_fail@plt+0x6ff8>
   18858:	b	18870 <__assert_fail@plt+0x6fe4>
   1885c:	beq	18884 <__assert_fail@plt+0x6ff8>
   18860:	mov	r1, #-2147483648	; 0x80000000
   18864:	sdiv	r1, r1, r5
   18868:	cmp	r1, r4
   1886c:	bge	18884 <__assert_fail@plt+0x6ff8>
   18870:	bl	189d8 <__assert_fail@plt+0x714c>
   18874:	mvn	r1, #-2147483648	; 0x80000000
   18878:	sdiv	r1, r1, r4
   1887c:	cmp	r5, r1
   18880:	blt	18870 <__assert_fail@plt+0x6fe4>
   18884:	mul	r1, r5, r4
   18888:	bl	185f4 <__assert_fail@plt+0x6d68>
   1888c:	str	r5, [r8]
   18890:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18894:	push	{fp, lr}
   18898:	mov	fp, sp
   1889c:	mov	r1, #1
   188a0:	bl	18a98 <__assert_fail@plt+0x720c>
   188a4:	cmp	r0, #0
   188a8:	popne	{fp, pc}
   188ac:	bl	189d8 <__assert_fail@plt+0x714c>
   188b0:	push	{fp, lr}
   188b4:	mov	fp, sp
   188b8:	bl	18a98 <__assert_fail@plt+0x720c>
   188bc:	cmp	r0, #0
   188c0:	popne	{fp, pc}
   188c4:	bl	189d8 <__assert_fail@plt+0x714c>
   188c8:	push	{fp, lr}
   188cc:	mov	fp, sp
   188d0:	mov	r1, #1
   188d4:	bl	18a98 <__assert_fail@plt+0x720c>
   188d8:	cmp	r0, #0
   188dc:	popne	{fp, pc}
   188e0:	bl	189d8 <__assert_fail@plt+0x714c>
   188e4:	push	{fp, lr}
   188e8:	mov	fp, sp
   188ec:	bl	18a98 <__assert_fail@plt+0x720c>
   188f0:	cmp	r0, #0
   188f4:	popne	{fp, pc}
   188f8:	bl	189d8 <__assert_fail@plt+0x714c>
   188fc:	push	{r4, r5, fp, lr}
   18900:	add	fp, sp, #8
   18904:	mov	r5, r0
   18908:	mov	r0, r1
   1890c:	mov	r4, r1
   18910:	bl	18aec <__assert_fail@plt+0x7260>
   18914:	cmp	r0, #0
   18918:	beq	1892c <__assert_fail@plt+0x70a0>
   1891c:	mov	r1, r5
   18920:	mov	r2, r4
   18924:	pop	{r4, r5, fp, lr}
   18928:	b	11538 <memcpy@plt>
   1892c:	bl	189d8 <__assert_fail@plt+0x714c>
   18930:	push	{r4, r5, fp, lr}
   18934:	add	fp, sp, #8
   18938:	mov	r5, r0
   1893c:	mov	r0, r1
   18940:	mov	r4, r1
   18944:	bl	18aec <__assert_fail@plt+0x7260>
   18948:	cmp	r0, #0
   1894c:	beq	18960 <__assert_fail@plt+0x70d4>
   18950:	mov	r1, r5
   18954:	mov	r2, r4
   18958:	pop	{r4, r5, fp, lr}
   1895c:	b	11538 <memcpy@plt>
   18960:	bl	189d8 <__assert_fail@plt+0x714c>
   18964:	push	{r4, r5, fp, lr}
   18968:	add	fp, sp, #8
   1896c:	mov	r5, r0
   18970:	add	r0, r1, #1
   18974:	mov	r4, r1
   18978:	bl	18aec <__assert_fail@plt+0x7260>
   1897c:	cmp	r0, #0
   18980:	beq	1899c <__assert_fail@plt+0x7110>
   18984:	mov	r1, #0
   18988:	mov	r2, r4
   1898c:	strb	r1, [r0, r4]
   18990:	mov	r1, r5
   18994:	pop	{r4, r5, fp, lr}
   18998:	b	11538 <memcpy@plt>
   1899c:	bl	189d8 <__assert_fail@plt+0x714c>
   189a0:	push	{r4, r5, fp, lr}
   189a4:	add	fp, sp, #8
   189a8:	mov	r4, r0
   189ac:	bl	116dc <strlen@plt>
   189b0:	add	r5, r0, #1
   189b4:	mov	r0, r5
   189b8:	bl	18aec <__assert_fail@plt+0x7260>
   189bc:	cmp	r0, #0
   189c0:	beq	189d4 <__assert_fail@plt+0x7148>
   189c4:	mov	r1, r4
   189c8:	mov	r2, r5
   189cc:	pop	{r4, r5, fp, lr}
   189d0:	b	11538 <memcpy@plt>
   189d4:	bl	189d8 <__assert_fail@plt+0x714c>
   189d8:	push	{fp, lr}
   189dc:	mov	fp, sp
   189e0:	movw	r0, #45420	; 0xb16c
   189e4:	movw	r1, #44222	; 0xacbe
   189e8:	mov	r2, #5
   189ec:	movt	r0, #2
   189f0:	movt	r1, #1
   189f4:	ldr	r4, [r0]
   189f8:	mov	r0, #0
   189fc:	bl	11568 <dcgettext@plt>
   18a00:	movw	r2, #42991	; 0xa7ef
   18a04:	mov	r3, r0
   18a08:	mov	r0, r4
   18a0c:	mov	r1, #0
   18a10:	movt	r2, #1
   18a14:	bl	1161c <error@plt>
   18a18:	bl	11850 <abort@plt>
   18a1c:	push	{fp, lr}
   18a20:	mov	fp, sp
   18a24:	orr	r1, r1, #512	; 0x200
   18a28:	bl	12c78 <__assert_fail@plt+0x13ec>
   18a2c:	cmp	r0, #0
   18a30:	popne	{fp, pc}
   18a34:	bl	11700 <__errno_location@plt>
   18a38:	ldr	r0, [r0]
   18a3c:	cmp	r0, #22
   18a40:	bne	18a64 <__assert_fail@plt+0x71d8>
   18a44:	movw	r0, #44239	; 0xaccf
   18a48:	movw	r1, #44255	; 0xacdf
   18a4c:	movw	r3, #44266	; 0xacea
   18a50:	mov	r2, #41	; 0x29
   18a54:	movt	r0, #1
   18a58:	movt	r1, #1
   18a5c:	movt	r3, #1
   18a60:	bl	1188c <__assert_fail@plt>
   18a64:	bl	189d8 <__assert_fail@plt+0x714c>
   18a68:	ldr	r0, [r0, #48]	; 0x30
   18a6c:	and	r0, r0, #17
   18a70:	cmp	r0, #16
   18a74:	moveq	r0, #1
   18a78:	bxeq	lr
   18a7c:	cmp	r0, #17
   18a80:	movne	r0, #0
   18a84:	bxne	lr
   18a88:	ldr	r0, [r1, #48]	; 0x30
   18a8c:	cmp	r0, #0
   18a90:	movwne	r0, #1
   18a94:	bx	lr
   18a98:	clz	r2, r1
   18a9c:	clz	r3, r0
   18aa0:	lsr	r2, r2, #5
   18aa4:	lsr	r3, r3, #5
   18aa8:	orrs	r2, r3, r2
   18aac:	movwne	r1, #1
   18ab0:	movwne	r0, #1
   18ab4:	cmp	r1, #0
   18ab8:	beq	18ae8 <__assert_fail@plt+0x725c>
   18abc:	mvn	r2, #-2147483648	; 0x80000000
   18ac0:	udiv	r2, r2, r1
   18ac4:	cmp	r2, r0
   18ac8:	bcs	18ae8 <__assert_fail@plt+0x725c>
   18acc:	push	{fp, lr}
   18ad0:	mov	fp, sp
   18ad4:	bl	11700 <__errno_location@plt>
   18ad8:	mov	r1, #12
   18adc:	str	r1, [r0]
   18ae0:	mov	r0, #0
   18ae4:	pop	{fp, pc}
   18ae8:	b	114c0 <calloc@plt>
   18aec:	cmp	r0, #0
   18af0:	movweq	r0, #1
   18af4:	cmn	r0, #1
   18af8:	ble	18b00 <__assert_fail@plt+0x7274>
   18afc:	b	1164c <malloc@plt>
   18b00:	push	{fp, lr}
   18b04:	mov	fp, sp
   18b08:	bl	11700 <__errno_location@plt>
   18b0c:	mov	r1, #12
   18b10:	str	r1, [r0]
   18b14:	mov	r0, #0
   18b18:	pop	{fp, pc}
   18b1c:	push	{fp, lr}
   18b20:	mov	fp, sp
   18b24:	cmp	r0, #0
   18b28:	beq	18b44 <__assert_fail@plt+0x72b8>
   18b2c:	cmp	r1, #0
   18b30:	beq	18b50 <__assert_fail@plt+0x72c4>
   18b34:	cmn	r1, #1
   18b38:	ble	18b58 <__assert_fail@plt+0x72cc>
   18b3c:	pop	{fp, lr}
   18b40:	b	11580 <realloc@plt>
   18b44:	mov	r0, r1
   18b48:	pop	{fp, lr}
   18b4c:	b	18aec <__assert_fail@plt+0x7260>
   18b50:	bl	19108 <__assert_fail@plt+0x787c>
   18b54:	b	18b64 <__assert_fail@plt+0x72d8>
   18b58:	bl	11700 <__errno_location@plt>
   18b5c:	mov	r1, #12
   18b60:	str	r1, [r0]
   18b64:	mov	r0, #0
   18b68:	pop	{fp, pc}
   18b6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18b70:	add	fp, sp, #24
   18b74:	sub	sp, sp, #40	; 0x28
   18b78:	mov	r5, r0
   18b7c:	ldrb	r0, [r2]
   18b80:	cmp	r0, #0
   18b84:	beq	18c68 <__assert_fail@plt+0x73dc>
   18b88:	movw	r9, #45888	; 0xb340
   18b8c:	mov	r4, r2
   18b90:	mov	r6, r1
   18b94:	movt	r9, #2
   18b98:	ldr	r0, [r9]
   18b9c:	cmp	r0, #0
   18ba0:	bne	18c0c <__assert_fail@plt+0x7380>
   18ba4:	movw	r0, #44344	; 0xad38
   18ba8:	movw	r1, #18688	; 0x4900
   18bac:	movt	r0, #1
   18bb0:	movt	r1, #8
   18bb4:	bl	11634 <open64@plt>
   18bb8:	cmn	r0, #1
   18bbc:	ble	18c80 <__assert_fail@plt+0x73f4>
   18bc0:	movw	r3, #44358	; 0xad46
   18bc4:	add	r8, sp, #8
   18bc8:	mov	r7, r0
   18bcc:	str	r0, [sp]
   18bd0:	mov	r1, #1
   18bd4:	mov	r2, #32
   18bd8:	movt	r3, #1
   18bdc:	mov	r0, r8
   18be0:	bl	1170c <__sprintf_chk@plt>
   18be4:	mov	r0, r8
   18be8:	mov	r1, #0
   18bec:	bl	1176c <access@plt>
   18bf0:	cmp	r0, #0
   18bf4:	mvn	r1, #0
   18bf8:	mov	r0, r7
   18bfc:	movweq	r1, #1
   18c00:	str	r1, [r9]
   18c04:	bl	1185c <close@plt>
   18c08:	ldr	r0, [r9]
   18c0c:	mov	r7, #0
   18c10:	cmp	r0, #0
   18c14:	bmi	18c74 <__assert_fail@plt+0x73e8>
   18c18:	mov	r0, r4
   18c1c:	bl	116dc <strlen@plt>
   18c20:	add	r0, r0, #27
   18c24:	cmp	r0, #4032	; 0xfc0
   18c28:	bls	18c3c <__assert_fail@plt+0x73b0>
   18c2c:	bl	18aec <__assert_fail@plt+0x7260>
   18c30:	mov	r5, r0
   18c34:	cmp	r0, #0
   18c38:	beq	18c74 <__assert_fail@plt+0x73e8>
   18c3c:	movw	r3, #44381	; 0xad5d
   18c40:	mov	r0, r5
   18c44:	mov	r1, #1
   18c48:	mvn	r2, #0
   18c4c:	str	r6, [sp]
   18c50:	movt	r3, #1
   18c54:	bl	1170c <__sprintf_chk@plt>
   18c58:	add	r0, r5, r0
   18c5c:	mov	r1, r4
   18c60:	bl	115ec <strcpy@plt>
   18c64:	b	18c70 <__assert_fail@plt+0x73e4>
   18c68:	mov	r0, #0
   18c6c:	strb	r0, [r5]
   18c70:	mov	r7, r5
   18c74:	mov	r0, r7
   18c78:	sub	sp, fp, #24
   18c7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18c80:	mvn	r0, #0
   18c84:	mov	r7, #0
   18c88:	str	r0, [r9]
   18c8c:	b	18c74 <__assert_fail@plt+0x73e8>
   18c90:	push	{r4, r5, r6, sl, fp, lr}
   18c94:	add	fp, sp, #16
   18c98:	mov	r4, r0
   18c9c:	bl	115f8 <__fpending@plt>
   18ca0:	mov	r5, r0
   18ca4:	mov	r0, r4
   18ca8:	bl	11604 <ferror_unlocked@plt>
   18cac:	mov	r6, r0
   18cb0:	mov	r0, r4
   18cb4:	bl	18dfc <__assert_fail@plt+0x7570>
   18cb8:	cmp	r6, #0
   18cbc:	beq	18cdc <__assert_fail@plt+0x7450>
   18cc0:	mvn	r4, #0
   18cc4:	cmp	r0, #0
   18cc8:	bne	18d08 <__assert_fail@plt+0x747c>
   18ccc:	bl	11700 <__errno_location@plt>
   18cd0:	mov	r1, #0
   18cd4:	str	r1, [r0]
   18cd8:	b	18d08 <__assert_fail@plt+0x747c>
   18cdc:	cmp	r0, #0
   18ce0:	mov	r4, r0
   18ce4:	mvnne	r4, #0
   18ce8:	cmp	r5, #0
   18cec:	bne	18d08 <__assert_fail@plt+0x747c>
   18cf0:	cmp	r0, #0
   18cf4:	beq	18d08 <__assert_fail@plt+0x747c>
   18cf8:	bl	11700 <__errno_location@plt>
   18cfc:	ldr	r0, [r0]
   18d00:	subs	r4, r0, #9
   18d04:	mvnne	r4, #0
   18d08:	mov	r0, r4
   18d0c:	pop	{r4, r5, r6, sl, fp, pc}
   18d10:	movw	r2, #62998	; 0xf616
   18d14:	mov	r1, #0
   18d18:	movt	r2, #149	; 0x95
   18d1c:	str	r1, [r0, #16]
   18d20:	str	r1, [r0, #20]
   18d24:	str	r2, [r0, #24]
   18d28:	bx	lr
   18d2c:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   18d30:	add	fp, sp, #24
   18d34:	ldr	r2, [r0, #24]
   18d38:	movw	r3, #62998	; 0xf616
   18d3c:	movt	r3, #149	; 0x95
   18d40:	cmp	r2, r3
   18d44:	bne	18ddc <__assert_fail@plt+0x7550>
   18d48:	add	r3, r0, #16
   18d4c:	add	ip, r0, #8
   18d50:	ldrd	r4, [r3]
   18d54:	orrs	r2, r4, r5
   18d58:	beq	18d94 <__assert_fail@plt+0x7508>
   18d5c:	ldr	r6, [r1, #96]	; 0x60
   18d60:	ldr	r9, [r1, #100]	; 0x64
   18d64:	ldm	r0, {r2, r7}
   18d68:	eor	r7, r9, r7
   18d6c:	eor	r2, r6, r2
   18d70:	orrs	r2, r2, r7
   18d74:	bne	18d94 <__assert_fail@plt+0x7508>
   18d78:	ldm	ip, {r2, r7}
   18d7c:	ldm	r1, {r6, r9}
   18d80:	eor	r7, r9, r7
   18d84:	eor	r2, r6, r2
   18d88:	orrs	r2, r2, r7
   18d8c:	mov	r2, #1
   18d90:	beq	18dd4 <__assert_fail@plt+0x7548>
   18d94:	adds	r6, r4, #1
   18d98:	adc	r7, r5, #0
   18d9c:	and	r2, r6, r4
   18da0:	strd	r6, [r3]
   18da4:	and	r3, r7, r5
   18da8:	orrs	r2, r2, r3
   18dac:	mov	r2, #0
   18db0:	bne	18dd4 <__assert_fail@plt+0x7548>
   18db4:	orrs	r3, r6, r7
   18db8:	beq	18dd0 <__assert_fail@plt+0x7544>
   18dbc:	ldrd	r4, [r1]
   18dc0:	strd	r4, [ip]
   18dc4:	ldrd	r4, [r1, #96]	; 0x60
   18dc8:	strd	r4, [r0]
   18dcc:	b	18dd4 <__assert_fail@plt+0x7548>
   18dd0:	mov	r2, #1
   18dd4:	mov	r0, r2
   18dd8:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   18ddc:	movw	r0, #44399	; 0xad6f
   18de0:	movw	r1, #44423	; 0xad87
   18de4:	movw	r3, #44441	; 0xad99
   18de8:	mov	r2, #60	; 0x3c
   18dec:	movt	r0, #1
   18df0:	movt	r1, #1
   18df4:	movt	r3, #1
   18df8:	bl	1188c <__assert_fail@plt>
   18dfc:	push	{r4, r5, r6, sl, fp, lr}
   18e00:	add	fp, sp, #16
   18e04:	sub	sp, sp, #8
   18e08:	mov	r4, r0
   18e0c:	bl	1173c <fileno@plt>
   18e10:	cmn	r0, #1
   18e14:	ble	18e88 <__assert_fail@plt+0x75fc>
   18e18:	mov	r0, r4
   18e1c:	bl	11664 <__freading@plt>
   18e20:	cmp	r0, #0
   18e24:	beq	18e50 <__assert_fail@plt+0x75c4>
   18e28:	mov	r0, r4
   18e2c:	bl	1173c <fileno@plt>
   18e30:	mov	r1, #1
   18e34:	mov	r2, #0
   18e38:	mov	r3, #0
   18e3c:	str	r1, [sp]
   18e40:	bl	115d4 <lseek64@plt>
   18e44:	and	r0, r0, r1
   18e48:	cmn	r0, #1
   18e4c:	beq	18e88 <__assert_fail@plt+0x75fc>
   18e50:	mov	r0, r4
   18e54:	bl	190ac <__assert_fail@plt+0x7820>
   18e58:	cmp	r0, #0
   18e5c:	beq	18e88 <__assert_fail@plt+0x75fc>
   18e60:	bl	11700 <__errno_location@plt>
   18e64:	ldr	r6, [r0]
   18e68:	mov	r5, r0
   18e6c:	mov	r0, r4
   18e70:	bl	11778 <fclose@plt>
   18e74:	cmp	r6, #0
   18e78:	strne	r6, [r5]
   18e7c:	mvnne	r0, #0
   18e80:	sub	sp, fp, #16
   18e84:	pop	{r4, r5, r6, sl, fp, pc}
   18e88:	mov	r0, r4
   18e8c:	sub	sp, fp, #16
   18e90:	pop	{r4, r5, r6, sl, fp, lr}
   18e94:	b	11778 <fclose@plt>
   18e98:	sub	sp, sp, #8
   18e9c:	push	{r4, r5, r6, r7, fp, lr}
   18ea0:	add	fp, sp, #16
   18ea4:	sub	sp, sp, #8
   18ea8:	mov	r5, r0
   18eac:	add	r0, fp, #8
   18eb0:	cmp	r1, #11
   18eb4:	str	r2, [fp, #8]
   18eb8:	str	r3, [fp, #12]
   18ebc:	str	r0, [sp, #4]
   18ec0:	bhi	18efc <__assert_fail@plt+0x7670>
   18ec4:	mov	r0, #1
   18ec8:	movw	r2, #1300	; 0x514
   18ecc:	tst	r2, r0, lsl r1
   18ed0:	bne	18fb4 <__assert_fail@plt+0x7728>
   18ed4:	movw	r2, #2570	; 0xa0a
   18ed8:	tst	r2, r0, lsl r1
   18edc:	bne	18f24 <__assert_fail@plt+0x7698>
   18ee0:	cmp	r1, #0
   18ee4:	bne	18efc <__assert_fail@plt+0x7670>
   18ee8:	ldr	r0, [sp, #4]
   18eec:	add	r1, r0, #4
   18ef0:	str	r1, [sp, #4]
   18ef4:	mov	r1, #0
   18ef8:	b	18fc0 <__assert_fail@plt+0x7734>
   18efc:	sub	r0, r1, #1024	; 0x400
   18f00:	cmp	r0, #10
   18f04:	bhi	18fb4 <__assert_fail@plt+0x7728>
   18f08:	mov	r2, #1
   18f0c:	movw	r3, #645	; 0x285
   18f10:	tst	r3, r2, lsl r0
   18f14:	bne	18fb4 <__assert_fail@plt+0x7728>
   18f18:	movw	r3, #1282	; 0x502
   18f1c:	tst	r3, r2, lsl r0
   18f20:	beq	18f30 <__assert_fail@plt+0x76a4>
   18f24:	mov	r0, r5
   18f28:	bl	11790 <fcntl64@plt>
   18f2c:	b	18fcc <__assert_fail@plt+0x7740>
   18f30:	cmp	r0, #6
   18f34:	bne	18fb4 <__assert_fail@plt+0x7728>
   18f38:	ldr	r0, [sp, #4]
   18f3c:	movw	r7, #45892	; 0xb344
   18f40:	movt	r7, #2
   18f44:	add	r1, r0, #4
   18f48:	str	r1, [sp, #4]
   18f4c:	ldr	r6, [r0]
   18f50:	ldr	r0, [r7]
   18f54:	cmp	r0, #0
   18f58:	bmi	18ff0 <__assert_fail@plt+0x7764>
   18f5c:	mov	r0, r5
   18f60:	movw	r1, #1030	; 0x406
   18f64:	mov	r2, r6
   18f68:	bl	11790 <fcntl64@plt>
   18f6c:	mov	r4, r0
   18f70:	cmn	r0, #1
   18f74:	bgt	18fe4 <__assert_fail@plt+0x7758>
   18f78:	bl	11700 <__errno_location@plt>
   18f7c:	ldr	r0, [r0]
   18f80:	cmp	r0, #22
   18f84:	bne	18fe4 <__assert_fail@plt+0x7758>
   18f88:	mov	r0, r5
   18f8c:	mov	r1, #0
   18f90:	mov	r2, r6
   18f94:	bl	11790 <fcntl64@plt>
   18f98:	mov	r4, r0
   18f9c:	cmp	r0, #0
   18fa0:	bmi	18fd0 <__assert_fail@plt+0x7744>
   18fa4:	mvn	r0, #0
   18fa8:	str	r0, [r7]
   18fac:	mov	r0, #1
   18fb0:	b	19014 <__assert_fail@plt+0x7788>
   18fb4:	ldr	r0, [sp, #4]
   18fb8:	add	r2, r0, #4
   18fbc:	str	r2, [sp, #4]
   18fc0:	ldr	r2, [r0]
   18fc4:	mov	r0, r5
   18fc8:	bl	11790 <fcntl64@plt>
   18fcc:	mov	r4, r0
   18fd0:	mov	r0, r4
   18fd4:	sub	sp, fp, #16
   18fd8:	pop	{r4, r5, r6, r7, fp, lr}
   18fdc:	add	sp, sp, #8
   18fe0:	bx	lr
   18fe4:	mov	r0, #1
   18fe8:	str	r0, [r7]
   18fec:	b	18fd0 <__assert_fail@plt+0x7744>
   18ff0:	mov	r0, r5
   18ff4:	mov	r1, #0
   18ff8:	mov	r2, r6
   18ffc:	bl	11790 <fcntl64@plt>
   19000:	mov	r4, r0
   19004:	ldr	r0, [r7]
   19008:	add	r0, r0, #1
   1900c:	clz	r0, r0
   19010:	lsr	r0, r0, #5
   19014:	cmp	r0, #0
   19018:	beq	18fd0 <__assert_fail@plt+0x7744>
   1901c:	cmp	r4, #0
   19020:	bmi	18fd0 <__assert_fail@plt+0x7744>
   19024:	mov	r0, r4
   19028:	mov	r1, #1
   1902c:	bl	11790 <fcntl64@plt>
   19030:	cmp	r0, #0
   19034:	bmi	19050 <__assert_fail@plt+0x77c4>
   19038:	orr	r2, r0, #1
   1903c:	mov	r0, r4
   19040:	mov	r1, #2
   19044:	bl	11790 <fcntl64@plt>
   19048:	cmn	r0, #1
   1904c:	bne	18fd0 <__assert_fail@plt+0x7744>
   19050:	bl	11700 <__errno_location@plt>
   19054:	ldr	r6, [r0]
   19058:	mov	r5, r0
   1905c:	mov	r0, r4
   19060:	bl	1185c <close@plt>
   19064:	str	r6, [r5]
   19068:	mvn	r4, #0
   1906c:	b	18fd0 <__assert_fail@plt+0x7744>
   19070:	sub	sp, sp, #8
   19074:	push	{fp, lr}
   19078:	mov	fp, sp
   1907c:	sub	sp, sp, #8
   19080:	str	r2, [fp, #8]
   19084:	str	r3, [fp, #12]
   19088:	tst	r1, #64	; 0x40
   1908c:	mov	r2, #0
   19090:	ldrne	r2, [fp, #8]
   19094:	bl	11634 <open64@plt>
   19098:	bl	180a4 <__assert_fail@plt+0x6818>
   1909c:	mov	sp, fp
   190a0:	pop	{fp, lr}
   190a4:	add	sp, sp, #8
   190a8:	bx	lr
   190ac:	push	{r4, sl, fp, lr}
   190b0:	add	fp, sp, #8
   190b4:	sub	sp, sp, #8
   190b8:	mov	r4, r0
   190bc:	cmp	r0, #0
   190c0:	beq	190f8 <__assert_fail@plt+0x786c>
   190c4:	mov	r0, r4
   190c8:	bl	11664 <__freading@plt>
   190cc:	cmp	r0, #0
   190d0:	beq	190f8 <__assert_fail@plt+0x786c>
   190d4:	ldrb	r0, [r4, #1]
   190d8:	tst	r0, #1
   190dc:	beq	190f8 <__assert_fail@plt+0x786c>
   190e0:	mov	r0, #1
   190e4:	mov	r2, #0
   190e8:	mov	r3, #0
   190ec:	str	r0, [sp]
   190f0:	mov	r0, r4
   190f4:	bl	19130 <__assert_fail@plt+0x78a4>
   190f8:	mov	r0, r4
   190fc:	sub	sp, fp, #8
   19100:	pop	{r4, sl, fp, lr}
   19104:	b	114fc <fflush@plt>
   19108:	push	{r4, r5, r6, sl, fp, lr}
   1910c:	add	fp, sp, #16
   19110:	mov	r4, r0
   19114:	bl	11700 <__errno_location@plt>
   19118:	ldr	r6, [r0]
   1911c:	mov	r5, r0
   19120:	mov	r0, r4
   19124:	bl	11520 <free@plt>
   19128:	str	r6, [r5]
   1912c:	pop	{r4, r5, r6, sl, fp, pc}
   19130:	push	{r4, r5, r6, r7, fp, lr}
   19134:	add	fp, sp, #16
   19138:	sub	sp, sp, #8
   1913c:	mov	r4, r0
   19140:	ldr	r0, [r0, #4]
   19144:	mov	r5, r3
   19148:	mov	r6, r2
   1914c:	ldr	r1, [r4, #8]
   19150:	cmp	r1, r0
   19154:	bne	19170 <__assert_fail@plt+0x78e4>
   19158:	ldrd	r0, [r4, #16]
   1915c:	cmp	r1, r0
   19160:	bne	19170 <__assert_fail@plt+0x78e4>
   19164:	ldr	r0, [r4, #36]	; 0x24
   19168:	cmp	r0, #0
   1916c:	beq	19188 <__assert_fail@plt+0x78fc>
   19170:	mov	r0, r4
   19174:	mov	r2, r6
   19178:	mov	r3, r5
   1917c:	sub	sp, fp, #16
   19180:	pop	{r4, r5, r6, r7, fp, lr}
   19184:	b	11784 <fseeko64@plt>
   19188:	ldr	r7, [fp, #8]
   1918c:	mov	r0, r4
   19190:	bl	1173c <fileno@plt>
   19194:	mov	r2, r6
   19198:	mov	r3, r5
   1919c:	str	r7, [sp]
   191a0:	bl	115d4 <lseek64@plt>
   191a4:	and	r2, r0, r1
   191a8:	cmn	r2, #1
   191ac:	beq	191c8 <__assert_fail@plt+0x793c>
   191b0:	strd	r0, [r4, #80]	; 0x50
   191b4:	ldr	r0, [r4]
   191b8:	bic	r0, r0, #16
   191bc:	str	r0, [r4]
   191c0:	mov	r0, #0
   191c4:	b	191cc <__assert_fail@plt+0x7940>
   191c8:	mvn	r0, #0
   191cc:	sub	sp, fp, #16
   191d0:	pop	{r4, r5, r6, r7, fp, pc}
   191d4:	push	{fp, lr}
   191d8:	mov	fp, sp
   191dc:	mov	r0, #14
   191e0:	bl	117b4 <nl_langinfo@plt>
   191e4:	movw	r1, #41163	; 0xa0cb
   191e8:	cmp	r0, #0
   191ec:	movt	r1, #1
   191f0:	movne	r1, r0
   191f4:	movw	r0, #44508	; 0xaddc
   191f8:	ldrb	r2, [r1]
   191fc:	movt	r0, #1
   19200:	cmp	r2, #0
   19204:	movne	r0, r1
   19208:	pop	{fp, pc}
   1920c:	push	{r4, r5, r6, r7, fp, lr}
   19210:	add	fp, sp, #16
   19214:	sub	sp, sp, #8
   19218:	cmp	r0, #0
   1921c:	add	r5, sp, #4
   19220:	mov	r7, r2
   19224:	mov	r4, r1
   19228:	movne	r5, r0
   1922c:	mov	r0, r5
   19230:	bl	11610 <mbrtowc@plt>
   19234:	mov	r6, r0
   19238:	cmp	r7, #0
   1923c:	beq	19264 <__assert_fail@plt+0x79d8>
   19240:	cmn	r6, #2
   19244:	bcc	19264 <__assert_fail@plt+0x79d8>
   19248:	mov	r0, #0
   1924c:	bl	196d0 <__assert_fail@plt+0x7e44>
   19250:	cmp	r0, #0
   19254:	bne	19264 <__assert_fail@plt+0x79d8>
   19258:	ldrb	r0, [r4]
   1925c:	mov	r6, #1
   19260:	str	r0, [r5]
   19264:	mov	r0, r6
   19268:	sub	sp, fp, #16
   1926c:	pop	{r4, r5, r6, r7, fp, pc}
   19270:	push	{fp, lr}
   19274:	mov	fp, sp
   19278:	mov	r4, r0
   1927c:	movw	r0, #45420	; 0xb16c
   19280:	movw	r1, #44514	; 0xade2
   19284:	mov	r2, #5
   19288:	movt	r0, #2
   1928c:	movt	r1, #1
   19290:	ldr	r5, [r0]
   19294:	mov	r0, #0
   19298:	bl	11568 <dcgettext@plt>
   1929c:	mov	r2, r0
   192a0:	mov	r0, r5
   192a4:	mov	r1, r4
   192a8:	bl	1161c <error@plt>
   192ac:	bl	11850 <abort@plt>
   192b0:	push	{fp, lr}
   192b4:	mov	fp, sp
   192b8:	mov	r4, r0
   192bc:	movw	r0, #45420	; 0xb16c
   192c0:	movw	r1, #44557	; 0xae0d
   192c4:	mov	r2, #5
   192c8:	movt	r0, #2
   192cc:	movt	r1, #1
   192d0:	ldr	r5, [r0]
   192d4:	mov	r0, #0
   192d8:	bl	11568 <dcgettext@plt>
   192dc:	mov	r2, r0
   192e0:	mov	r0, r5
   192e4:	mov	r1, r4
   192e8:	bl	1161c <error@plt>
   192ec:	bl	11850 <abort@plt>
   192f0:	cmp	r2, #0
   192f4:	beq	19324 <__assert_fail@plt+0x7a98>
   192f8:	mvn	r3, #0
   192fc:	udiv	r3, r3, r2
   19300:	cmp	r3, r1
   19304:	bcs	19324 <__assert_fail@plt+0x7a98>
   19308:	push	{fp, lr}
   1930c:	mov	fp, sp
   19310:	bl	11700 <__errno_location@plt>
   19314:	mov	r1, #12
   19318:	str	r1, [r0]
   1931c:	mov	r0, #0
   19320:	pop	{fp, pc}
   19324:	mul	r1, r2, r1
   19328:	b	18b1c <__assert_fail@plt+0x7290>
   1932c:	push	{r4, r5, fp, lr}
   19330:	add	fp, sp, #8
   19334:	mov	r4, #0
   19338:	mov	r5, r0
   1933c:	mov	r1, #524288	; 0x80000
   19340:	str	r4, [r0, #4]
   19344:	movw	r0, #42995	; 0xa7f3
   19348:	movt	r0, #1
   1934c:	bl	19070 <__assert_fail@plt+0x77e4>
   19350:	cmn	r0, #1
   19354:	str	r0, [r5]
   19358:	bgt	19378 <__assert_fail@plt+0x7aec>
   1935c:	mov	r0, #0
   19360:	mov	r1, #0
   19364:	mov	r4, #0
   19368:	bl	116a0 <getcwd@plt>
   1936c:	cmp	r0, #0
   19370:	str	r0, [r5, #4]
   19374:	mvneq	r4, #0
   19378:	mov	r0, r4
   1937c:	pop	{r4, r5, fp, pc}
   19380:	ldr	r1, [r0]
   19384:	cmp	r1, #0
   19388:	bmi	19394 <__assert_fail@plt+0x7b08>
   1938c:	mov	r0, r1
   19390:	b	117e4 <fchdir@plt>
   19394:	ldr	r0, [r0, #4]
   19398:	b	193d0 <__assert_fail@plt+0x7b44>
   1939c:	push	{r4, sl, fp, lr}
   193a0:	add	fp, sp, #8
   193a4:	mov	r4, r0
   193a8:	ldr	r0, [r0]
   193ac:	cmp	r0, #0
   193b0:	bmi	193b8 <__assert_fail@plt+0x7b2c>
   193b4:	bl	1185c <close@plt>
   193b8:	ldr	r0, [r4, #4]
   193bc:	pop	{r4, sl, fp, lr}
   193c0:	b	19108 <__assert_fail@plt+0x787c>
   193c4:	mov	r1, #0
   193c8:	mov	r2, #3
   193cc:	b	18e98 <__assert_fail@plt+0x760c>
   193d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193d4:	add	fp, sp, #28
   193d8:	sub	sp, sp, #4
   193dc:	mov	r5, r0
   193e0:	bl	115a4 <chdir@plt>
   193e4:	cmp	r0, #0
   193e8:	beq	195bc <__assert_fail@plt+0x7d30>
   193ec:	mov	r6, r0
   193f0:	bl	11700 <__errno_location@plt>
   193f4:	mov	r9, r0
   193f8:	ldr	r0, [r0]
   193fc:	cmp	r0, #36	; 0x24
   19400:	bne	195c0 <__assert_fail@plt+0x7d34>
   19404:	mov	r0, r5
   19408:	bl	116dc <strlen@plt>
   1940c:	mov	r6, r0
   19410:	mvn	r0, #99	; 0x63
   19414:	cmp	r6, #0
   19418:	str	r0, [sp]
   1941c:	beq	195e4 <__assert_fail@plt+0x7d58>
   19420:	mov	r0, #0
   19424:	cmp	r0, r6, lsr #12
   19428:	beq	195fc <__assert_fail@plt+0x7d70>
   1942c:	movw	r1, #44397	; 0xad6d
   19430:	mov	r0, r5
   19434:	movt	r1, #1
   19438:	bl	11880 <strspn@plt>
   1943c:	cmp	r0, #0
   19440:	mov	r7, r5
   19444:	beq	194cc <__assert_fail@plt+0x7c40>
   19448:	mov	r4, r0
   1944c:	cmp	r0, #2
   19450:	bne	194b0 <__assert_fail@plt+0x7c24>
   19454:	add	r0, r5, #3
   19458:	sub	r2, r6, #3
   1945c:	mov	r1, #47	; 0x2f
   19460:	mov	r7, #47	; 0x2f
   19464:	bl	11754 <memchr@plt>
   19468:	cmp	r0, #0
   1946c:	beq	195a4 <__assert_fail@plt+0x7d18>
   19470:	mov	r4, r0
   19474:	mov	r0, #0
   19478:	mov	r1, r5
   1947c:	strb	r0, [r4]
   19480:	mov	r0, sp
   19484:	bl	1964c <__assert_fail@plt+0x7dc0>
   19488:	cmp	r0, #0
   1948c:	strb	r7, [r4]
   19490:	bne	19590 <__assert_fail@plt+0x7d04>
   19494:	movw	r1, #44397	; 0xad6d
   19498:	add	r4, r4, #1
   1949c:	movt	r1, #1
   194a0:	mov	r0, r4
   194a4:	bl	11880 <strspn@plt>
   194a8:	add	r7, r4, r0
   194ac:	b	194cc <__assert_fail@plt+0x7c40>
   194b0:	movw	r1, #44397	; 0xad6d
   194b4:	mov	r0, sp
   194b8:	movt	r1, #1
   194bc:	bl	1964c <__assert_fail@plt+0x7dc0>
   194c0:	cmp	r0, #0
   194c4:	bne	19590 <__assert_fail@plt+0x7d04>
   194c8:	add	r7, r5, r4
   194cc:	ldrb	r0, [r7]
   194d0:	cmp	r0, #47	; 0x2f
   194d4:	beq	19614 <__assert_fail@plt+0x7d88>
   194d8:	add	r5, r5, r6
   194dc:	cmp	r7, r5
   194e0:	bhi	1962c <__assert_fail@plt+0x7da0>
   194e4:	sub	r0, r5, r7
   194e8:	cmp	r0, #4096	; 0x1000
   194ec:	blt	19564 <__assert_fail@plt+0x7cd8>
   194f0:	movw	r8, #44397	; 0xad6d
   194f4:	mov	sl, sp
   194f8:	movt	r8, #1
   194fc:	mov	r0, r7
   19500:	mov	r1, #47	; 0x2f
   19504:	mov	r2, #4096	; 0x1000
   19508:	bl	116f4 <memrchr@plt>
   1950c:	cmp	r0, #0
   19510:	beq	195a4 <__assert_fail@plt+0x7d18>
   19514:	mov	r1, #0
   19518:	mov	r6, r0
   1951c:	strb	r1, [r0], -r7
   19520:	cmp	r0, #4096	; 0x1000
   19524:	bge	195cc <__assert_fail@plt+0x7d40>
   19528:	mov	r0, sl
   1952c:	mov	r1, r7
   19530:	bl	1964c <__assert_fail@plt+0x7dc0>
   19534:	mov	r1, #47	; 0x2f
   19538:	cmp	r0, #0
   1953c:	strb	r1, [r6]
   19540:	bne	19590 <__assert_fail@plt+0x7d04>
   19544:	add	r4, r6, #1
   19548:	mov	r1, r8
   1954c:	mov	r0, r4
   19550:	bl	11880 <strspn@plt>
   19554:	add	r7, r4, r0
   19558:	sub	r0, r5, r7
   1955c:	cmp	r0, #4096	; 0x1000
   19560:	bge	194fc <__assert_fail@plt+0x7c70>
   19564:	cmp	r7, r5
   19568:	bcs	19580 <__assert_fail@plt+0x7cf4>
   1956c:	mov	r0, sp
   19570:	mov	r1, r7
   19574:	bl	1964c <__assert_fail@plt+0x7dc0>
   19578:	cmp	r0, #0
   1957c:	bne	19590 <__assert_fail@plt+0x7d04>
   19580:	ldr	r0, [sp]
   19584:	bl	117e4 <fchdir@plt>
   19588:	cmp	r0, #0
   1958c:	beq	195b4 <__assert_fail@plt+0x7d28>
   19590:	ldr	r4, [r9]
   19594:	mov	r0, sp
   19598:	bl	1968c <__assert_fail@plt+0x7e00>
   1959c:	str	r4, [r9]
   195a0:	b	195ac <__assert_fail@plt+0x7d20>
   195a4:	mov	r0, #36	; 0x24
   195a8:	str	r0, [r9]
   195ac:	mvn	r6, #0
   195b0:	b	195c0 <__assert_fail@plt+0x7d34>
   195b4:	mov	r0, sp
   195b8:	bl	1968c <__assert_fail@plt+0x7e00>
   195bc:	mov	r6, #0
   195c0:	mov	r0, r6
   195c4:	sub	sp, fp, #28
   195c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195cc:	movw	r0, #44690	; 0xae92
   195d0:	movw	r1, #44611	; 0xae43
   195d4:	movw	r3, #44628	; 0xae54
   195d8:	mov	r2, #179	; 0xb3
   195dc:	movt	r0, #1
   195e0:	b	19640 <__assert_fail@plt+0x7db4>
   195e4:	movw	r0, #44603	; 0xae3b
   195e8:	movw	r1, #44611	; 0xae43
   195ec:	movw	r3, #44628	; 0xae54
   195f0:	mov	r2, #126	; 0x7e
   195f4:	movt	r0, #1
   195f8:	b	19640 <__assert_fail@plt+0x7db4>
   195fc:	movw	r0, #44651	; 0xae6b
   19600:	movw	r1, #44611	; 0xae43
   19604:	movw	r3, #44628	; 0xae54
   19608:	mov	r2, #127	; 0x7f
   1960c:	movt	r0, #1
   19610:	b	19640 <__assert_fail@plt+0x7db4>
   19614:	movw	r0, #44663	; 0xae77
   19618:	movw	r1, #44611	; 0xae43
   1961c:	movw	r3, #44628	; 0xae54
   19620:	mov	r2, #162	; 0xa2
   19624:	movt	r0, #1
   19628:	b	19640 <__assert_fail@plt+0x7db4>
   1962c:	movw	r0, #44675	; 0xae83
   19630:	movw	r1, #44611	; 0xae43
   19634:	movw	r3, #44628	; 0xae54
   19638:	mov	r2, #163	; 0xa3
   1963c:	movt	r0, #1
   19640:	movt	r1, #1
   19644:	movt	r3, #1
   19648:	bl	1188c <__assert_fail@plt>
   1964c:	push	{r4, r5, fp, lr}
   19650:	add	fp, sp, #8
   19654:	mov	r4, r0
   19658:	ldr	r0, [r0]
   1965c:	mov	r2, #18688	; 0x4900
   19660:	bl	116e8 <openat64@plt>
   19664:	cmp	r0, #0
   19668:	bmi	19684 <__assert_fail@plt+0x7df8>
   1966c:	mov	r5, r0
   19670:	mov	r0, r4
   19674:	bl	1968c <__assert_fail@plt+0x7e00>
   19678:	mov	r0, #0
   1967c:	str	r5, [r4]
   19680:	pop	{r4, r5, fp, pc}
   19684:	mvn	r0, #0
   19688:	pop	{r4, r5, fp, pc}
   1968c:	push	{fp, lr}
   19690:	mov	fp, sp
   19694:	ldr	r0, [r0]
   19698:	cmp	r0, #0
   1969c:	popmi	{fp, pc}
   196a0:	bl	1185c <close@plt>
   196a4:	cmp	r0, #0
   196a8:	bne	196b0 <__assert_fail@plt+0x7e24>
   196ac:	pop	{fp, pc}
   196b0:	movw	r0, #44709	; 0xaea5
   196b4:	movw	r1, #44611	; 0xae43
   196b8:	movw	r3, #44722	; 0xaeb2
   196bc:	mov	r2, #64	; 0x40
   196c0:	movt	r0, #1
   196c4:	movt	r1, #1
   196c8:	movt	r3, #1
   196cc:	bl	1188c <__assert_fail@plt>
   196d0:	push	{r4, sl, fp, lr}
   196d4:	add	fp, sp, #8
   196d8:	sub	sp, sp, #264	; 0x108
   196dc:	add	r1, sp, #7
   196e0:	movw	r2, #257	; 0x101
   196e4:	bl	1973c <__assert_fail@plt+0x7eb0>
   196e8:	mov	r4, #0
   196ec:	cmp	r0, #0
   196f0:	bne	19730 <__assert_fail@plt+0x7ea4>
   196f4:	movw	r1, #44759	; 0xaed7
   196f8:	add	r0, sp, #7
   196fc:	mov	r2, #2
   19700:	movt	r1, #1
   19704:	bl	116d0 <bcmp@plt>
   19708:	cmp	r0, #0
   1970c:	beq	19730 <__assert_fail@plt+0x7ea4>
   19710:	movw	r1, #44761	; 0xaed9
   19714:	add	r0, sp, #7
   19718:	mov	r2, #6
   1971c:	movt	r1, #1
   19720:	bl	116d0 <bcmp@plt>
   19724:	cmp	r0, #0
   19728:	mov	r4, r0
   1972c:	movwne	r4, #1
   19730:	mov	r0, r4
   19734:	sub	sp, fp, #8
   19738:	pop	{r4, sl, fp, pc}
   1973c:	push	{r4, r5, r6, r7, fp, lr}
   19740:	add	fp, sp, #16
   19744:	mov	r4, r1
   19748:	mov	r1, #0
   1974c:	mov	r6, r2
   19750:	bl	1179c <setlocale@plt>
   19754:	cmp	r0, #0
   19758:	beq	19784 <__assert_fail@plt+0x7ef8>
   1975c:	mov	r7, r0
   19760:	bl	116dc <strlen@plt>
   19764:	cmp	r0, r6
   19768:	bcs	19798 <__assert_fail@plt+0x7f0c>
   1976c:	add	r2, r0, #1
   19770:	mov	r0, r4
   19774:	mov	r1, r7
   19778:	bl	11538 <memcpy@plt>
   1977c:	mov	r5, #0
   19780:	b	197c0 <__assert_fail@plt+0x7f34>
   19784:	cmp	r6, #0
   19788:	mov	r5, #22
   1978c:	movne	r0, #0
   19790:	strbne	r0, [r4]
   19794:	b	197c0 <__assert_fail@plt+0x7f34>
   19798:	mov	r5, #34	; 0x22
   1979c:	cmp	r6, #0
   197a0:	beq	197c0 <__assert_fail@plt+0x7f34>
   197a4:	sub	r6, r6, #1
   197a8:	mov	r0, r4
   197ac:	mov	r1, r7
   197b0:	mov	r2, r6
   197b4:	bl	11538 <memcpy@plt>
   197b8:	mov	r0, #0
   197bc:	strb	r0, [r4, r6]
   197c0:	mov	r0, r5
   197c4:	pop	{r4, r5, r6, r7, fp, pc}
   197c8:	mov	r1, #0
   197cc:	b	1179c <setlocale@plt>
   197d0:	cmp	r3, #0
   197d4:	cmpeq	r2, #0
   197d8:	bne	197f0 <__assert_fail@plt+0x7f64>
   197dc:	cmp	r1, #0
   197e0:	cmpeq	r0, #0
   197e4:	mvnne	r1, #0
   197e8:	mvnne	r0, #0
   197ec:	b	1980c <__assert_fail@plt+0x7f80>
   197f0:	sub	sp, sp, #8
   197f4:	push	{sp, lr}
   197f8:	bl	1981c <__assert_fail@plt+0x7f90>
   197fc:	ldr	lr, [sp, #4]
   19800:	add	sp, sp, #8
   19804:	pop	{r2, r3}
   19808:	bx	lr
   1980c:	push	{r1, lr}
   19810:	mov	r0, #8
   19814:	bl	114d8 <raise@plt>
   19818:	pop	{r1, pc}
   1981c:	cmp	r1, r3
   19820:	cmpeq	r0, r2
   19824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19828:	mov	r4, r0
   1982c:	movcc	r0, #0
   19830:	mov	r5, r1
   19834:	ldr	lr, [sp, #36]	; 0x24
   19838:	movcc	r1, r0
   1983c:	bcc	19938 <__assert_fail@plt+0x80ac>
   19840:	cmp	r3, #0
   19844:	clzeq	ip, r2
   19848:	clzne	ip, r3
   1984c:	addeq	ip, ip, #32
   19850:	cmp	r5, #0
   19854:	clzeq	r1, r4
   19858:	addeq	r1, r1, #32
   1985c:	clzne	r1, r5
   19860:	sub	ip, ip, r1
   19864:	sub	sl, ip, #32
   19868:	lsl	r9, r3, ip
   1986c:	rsb	fp, ip, #32
   19870:	orr	r9, r9, r2, lsl sl
   19874:	orr	r9, r9, r2, lsr fp
   19878:	lsl	r8, r2, ip
   1987c:	cmp	r5, r9
   19880:	cmpeq	r4, r8
   19884:	movcc	r0, #0
   19888:	movcc	r1, r0
   1988c:	bcc	198a8 <__assert_fail@plt+0x801c>
   19890:	mov	r0, #1
   19894:	subs	r4, r4, r8
   19898:	lsl	r1, r0, sl
   1989c:	orr	r1, r1, r0, lsr fp
   198a0:	lsl	r0, r0, ip
   198a4:	sbc	r5, r5, r9
   198a8:	cmp	ip, #0
   198ac:	beq	19938 <__assert_fail@plt+0x80ac>
   198b0:	lsr	r6, r8, #1
   198b4:	orr	r6, r6, r9, lsl #31
   198b8:	lsr	r7, r9, #1
   198bc:	mov	r2, ip
   198c0:	b	198e4 <__assert_fail@plt+0x8058>
   198c4:	subs	r3, r4, r6
   198c8:	sbc	r8, r5, r7
   198cc:	adds	r3, r3, r3
   198d0:	adc	r8, r8, r8
   198d4:	adds	r4, r3, #1
   198d8:	adc	r5, r8, #0
   198dc:	subs	r2, r2, #1
   198e0:	beq	19900 <__assert_fail@plt+0x8074>
   198e4:	cmp	r5, r7
   198e8:	cmpeq	r4, r6
   198ec:	bcs	198c4 <__assert_fail@plt+0x8038>
   198f0:	adds	r4, r4, r4
   198f4:	adc	r5, r5, r5
   198f8:	subs	r2, r2, #1
   198fc:	bne	198e4 <__assert_fail@plt+0x8058>
   19900:	lsr	r3, r4, ip
   19904:	orr	r3, r3, r5, lsl fp
   19908:	lsr	r2, r5, ip
   1990c:	orr	r3, r3, r5, lsr sl
   19910:	adds	r0, r0, r4
   19914:	mov	r4, r3
   19918:	lsl	r3, r2, ip
   1991c:	orr	r3, r3, r4, lsl sl
   19920:	lsl	ip, r4, ip
   19924:	orr	r3, r3, r4, lsr fp
   19928:	adc	r1, r1, r5
   1992c:	subs	r0, r0, ip
   19930:	mov	r5, r2
   19934:	sbc	r1, r1, r3
   19938:	cmp	lr, #0
   1993c:	strdne	r4, [lr]
   19940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19944:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19948:	mov	r7, r0
   1994c:	ldr	r6, [pc, #72]	; 1999c <__assert_fail@plt+0x8110>
   19950:	ldr	r5, [pc, #72]	; 199a0 <__assert_fail@plt+0x8114>
   19954:	add	r6, pc, r6
   19958:	add	r5, pc, r5
   1995c:	sub	r6, r6, r5
   19960:	mov	r8, r1
   19964:	mov	r9, r2
   19968:	bl	11494 <fstatfs64@plt-0x20>
   1996c:	asrs	r6, r6, #2
   19970:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19974:	mov	r4, #0
   19978:	add	r4, r4, #1
   1997c:	ldr	r3, [r5], #4
   19980:	mov	r2, r9
   19984:	mov	r1, r8
   19988:	mov	r0, r7
   1998c:	blx	r3
   19990:	cmp	r6, r4
   19994:	bne	19978 <__assert_fail@plt+0x80ec>
   19998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1999c:	andeq	r1, r1, r8, lsr #11
   199a0:	andeq	r1, r1, r0, lsr #11
   199a4:	bx	lr
   199a8:	ldr	r3, [pc, #12]	; 199bc <__assert_fail@plt+0x8130>
   199ac:	mov	r1, #0
   199b0:	add	r3, pc, r3
   199b4:	ldr	r2, [r3]
   199b8:	b	11718 <__cxa_atexit@plt>
   199bc:	andeq	r1, r1, ip, lsr #15
   199c0:	mov	r2, r1
   199c4:	mov	r1, r0
   199c8:	mov	r0, #3
   199cc:	b	1182c <__xstat64@plt>
   199d0:	mov	r2, r1
   199d4:	mov	r1, r0
   199d8:	mov	r0, #3
   199dc:	b	115c8 <__fxstat64@plt>
   199e0:	mov	r2, r1
   199e4:	mov	r1, r0
   199e8:	mov	r0, #3
   199ec:	b	11868 <__lxstat64@plt>
   199f0:	push	{lr}		; (str lr, [sp, #-4]!)
   199f4:	sub	sp, sp, #12
   199f8:	str	r3, [sp]
   199fc:	mov	r3, r2
   19a00:	mov	r2, r1
   19a04:	mov	r1, r0
   19a08:	mov	r0, #3
   19a0c:	bl	115b0 <__fxstatat64@plt>
   19a10:	add	sp, sp, #12
   19a14:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019a18 <.fini>:
   19a18:	push	{r3, lr}
   19a1c:	pop	{r3, pc}
