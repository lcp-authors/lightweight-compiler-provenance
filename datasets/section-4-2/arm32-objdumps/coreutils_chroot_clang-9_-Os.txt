
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

000110c0 <.init>:
   110c0:	push	{r3, lr}
   110c4:	bl	1141c <__assert_fail@plt+0x48>
   110c8:	pop	{r3, pc}

Disassembly of section .plt:

000110cc <calloc@plt-0x14>:
   110cc:	push	{lr}		; (str lr, [sp, #-4]!)
   110d0:	ldr	lr, [pc, #4]	; 110dc <calloc@plt-0x4>
   110d4:	add	lr, pc, lr
   110d8:	ldr	pc, [lr, #8]!
   110dc:	andeq	r5, r1, r4, lsr #30

000110e0 <calloc@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #3876]!	; 0xf24

000110ec <endgrent@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #3868]!	; 0xf1c

000110f8 <fputs_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #3860]!	; 0xf14

00011104 <raise@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011110 <getpwnam@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #3844]!	; 0xf04

0001111c <strcmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #3836]!	; 0xefc

00011128 <getpwuid@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #86016	; 0x15000
   11130:	ldr	pc, [ip, #3828]!	; 0xef4

00011134 <fflush@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #86016	; 0x15000
   1113c:	ldr	pc, [ip, #3820]!	; 0xeec

00011140 <free@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #86016	; 0x15000
   11148:	ldr	pc, [ip, #3812]!	; 0xee4

0001114c <_exit@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #86016	; 0x15000
   11154:	ldr	pc, [ip, #3804]!	; 0xedc

00011158 <memcpy@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #86016	; 0x15000
   11160:	ldr	pc, [ip, #3796]!	; 0xed4

00011164 <execvp@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #86016	; 0x15000
   1116c:	ldr	pc, [ip, #3788]!	; 0xecc

00011170 <mbsinit@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #86016	; 0x15000
   11178:	ldr	pc, [ip, #3780]!	; 0xec4

0001117c <dcgettext@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #86016	; 0x15000
   11184:	ldr	pc, [ip, #3772]!	; 0xebc

00011188 <realloc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #86016	; 0x15000
   11190:	ldr	pc, [ip, #3764]!	; 0xeb4

00011194 <textdomain@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #86016	; 0x15000
   1119c:	ldr	pc, [ip, #3756]!	; 0xeac

000111a0 <chdir@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #86016	; 0x15000
   111a8:	ldr	pc, [ip, #3748]!	; 0xea4

000111ac <iswprint@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #86016	; 0x15000
   111b4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111b8 <setgroups@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #86016	; 0x15000
   111c0:	ldr	pc, [ip, #3732]!	; 0xe94

000111c4 <lseek64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #86016	; 0x15000
   111cc:	ldr	pc, [ip, #3724]!	; 0xe8c

000111d0 <__ctype_get_mb_cur_max@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #86016	; 0x15000
   111d8:	ldr	pc, [ip, #3716]!	; 0xe84

000111dc <chroot@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #86016	; 0x15000
   111e4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111e8 <__fpending@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #86016	; 0x15000
   111f0:	ldr	pc, [ip, #3700]!	; 0xe74

000111f4 <ferror_unlocked@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #86016	; 0x15000
   111fc:	ldr	pc, [ip, #3692]!	; 0xe6c

00011200 <mbrtowc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #86016	; 0x15000
   11208:	ldr	pc, [ip, #3684]!	; 0xe64

0001120c <error@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #86016	; 0x15000
   11214:	ldr	pc, [ip, #3676]!	; 0xe5c

00011218 <getenv@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #86016	; 0x15000
   11220:	ldr	pc, [ip, #3668]!	; 0xe54

00011224 <setgid@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #86016	; 0x15000
   1122c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011230 <malloc@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #86016	; 0x15000
   11238:	ldr	pc, [ip, #3652]!	; 0xe44

0001123c <__libc_start_main@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #86016	; 0x15000
   11244:	ldr	pc, [ip, #3644]!	; 0xe3c

00011248 <__freading@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #86016	; 0x15000
   11250:	ldr	pc, [ip, #3636]!	; 0xe34

00011254 <__gmon_start__@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #86016	; 0x15000
   1125c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011260 <getopt_long@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #86016	; 0x15000
   11268:	ldr	pc, [ip, #3620]!	; 0xe24

0001126c <__ctype_b_loc@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #86016	; 0x15000
   11274:	ldr	pc, [ip, #3612]!	; 0xe1c

00011278 <exit@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #86016	; 0x15000
   11280:	ldr	pc, [ip, #3604]!	; 0xe14

00011284 <bcmp@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #86016	; 0x15000
   1128c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011290 <strtoul@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #86016	; 0x15000
   11298:	ldr	pc, [ip, #3588]!	; 0xe04

0001129c <strlen@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #86016	; 0x15000
   112a4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112a8 <strchr@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #86016	; 0x15000
   112b0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112b4 <__errno_location@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #86016	; 0x15000
   112bc:	ldr	pc, [ip, #3564]!	; 0xdec

000112c0 <__cxa_atexit@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #86016	; 0x15000
   112c8:	ldr	pc, [ip, #3556]!	; 0xde4

000112cc <getgrouplist@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #86016	; 0x15000
   112d4:	ldr	pc, [ip, #3548]!	; 0xddc

000112d8 <memset@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #86016	; 0x15000
   112e0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112e4 <__printf_chk@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #86016	; 0x15000
   112ec:	ldr	pc, [ip, #3532]!	; 0xdcc

000112f0 <fileno@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #86016	; 0x15000
   112f8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112fc <strtoumax@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #86016	; 0x15000
   11304:	ldr	pc, [ip, #3516]!	; 0xdbc

00011308 <__fprintf_chk@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #86016	; 0x15000
   11310:	ldr	pc, [ip, #3508]!	; 0xdb4

00011314 <fclose@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #86016	; 0x15000
   1131c:	ldr	pc, [ip, #3500]!	; 0xdac

00011320 <fseeko64@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #86016	; 0x15000
   11328:	ldr	pc, [ip, #3492]!	; 0xda4

0001132c <strtok@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #86016	; 0x15000
   11334:	ldr	pc, [ip, #3484]!	; 0xd9c

00011338 <setlocale@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #86016	; 0x15000
   11340:	ldr	pc, [ip, #3476]!	; 0xd94

00011344 <endpwent@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #86016	; 0x15000
   1134c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011350 <strrchr@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #86016	; 0x15000
   11358:	ldr	pc, [ip, #3460]!	; 0xd84

0001135c <nl_langinfo@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #86016	; 0x15000
   11364:	ldr	pc, [ip, #3452]!	; 0xd7c

00011368 <setuid@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #86016	; 0x15000
   11370:	ldr	pc, [ip, #3444]!	; 0xd74

00011374 <getgroups@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #86016	; 0x15000
   1137c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011380 <canonicalize_file_name@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #86016	; 0x15000
   11388:	ldr	pc, [ip, #3428]!	; 0xd64

0001138c <bindtextdomain@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #86016	; 0x15000
   11394:	ldr	pc, [ip, #3420]!	; 0xd5c

00011398 <fputs@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #86016	; 0x15000
   113a0:	ldr	pc, [ip, #3412]!	; 0xd54

000113a4 <strncmp@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #86016	; 0x15000
   113ac:	ldr	pc, [ip, #3404]!	; 0xd4c

000113b0 <abort@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #86016	; 0x15000
   113b8:	ldr	pc, [ip, #3396]!	; 0xd44

000113bc <getgrgid@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #86016	; 0x15000
   113c4:	ldr	pc, [ip, #3388]!	; 0xd3c

000113c8 <getgrnam@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #86016	; 0x15000
   113d0:	ldr	pc, [ip, #3380]!	; 0xd34

000113d4 <__assert_fail@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #86016	; 0x15000
   113dc:	ldr	pc, [ip, #3372]!	; 0xd2c

Disassembly of section .text:

000113e0 <.text>:
   113e0:	mov	fp, #0
   113e4:	mov	lr, #0
   113e8:	pop	{r1}		; (ldr r1, [sp], #4)
   113ec:	mov	r2, sp
   113f0:	push	{r2}		; (str r2, [sp, #-4]!)
   113f4:	push	{r0}		; (str r0, [sp, #-4]!)
   113f8:	ldr	ip, [pc, #16]	; 11410 <__assert_fail@plt+0x3c>
   113fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11400:	ldr	r0, [pc, #12]	; 11414 <__assert_fail@plt+0x40>
   11404:	ldr	r3, [pc, #12]	; 11418 <__assert_fail@plt+0x44>
   11408:	bl	1123c <__libc_start_main@plt>
   1140c:	bl	113b0 <abort@plt>
   11410:	strdeq	r5, [r1], -ip
   11414:	andeq	r1, r1, r4, lsl #15
   11418:	muleq	r1, ip, sp
   1141c:	ldr	r3, [pc, #20]	; 11438 <__assert_fail@plt+0x64>
   11420:	ldr	r2, [pc, #20]	; 1143c <__assert_fail@plt+0x68>
   11424:	add	r3, pc, r3
   11428:	ldr	r2, [r3, r2]
   1142c:	cmp	r2, #0
   11430:	bxeq	lr
   11434:	b	11254 <__gmon_start__@plt>
   11438:	ldrdeq	r5, [r1], -r4
   1143c:	andeq	r0, r0, ip, lsl #2
   11440:	ldr	r0, [pc, #24]	; 11460 <__assert_fail@plt+0x8c>
   11444:	ldr	r3, [pc, #24]	; 11464 <__assert_fail@plt+0x90>
   11448:	cmp	r3, r0
   1144c:	bxeq	lr
   11450:	ldr	r3, [pc, #16]	; 11468 <__assert_fail@plt+0x94>
   11454:	cmp	r3, #0
   11458:	bxeq	lr
   1145c:	bx	r3
   11460:	andeq	r7, r2, r0, ror #2
   11464:	andeq	r7, r2, r0, ror #2
   11468:	andeq	r0, r0, r0
   1146c:	ldr	r0, [pc, #36]	; 11498 <__assert_fail@plt+0xc4>
   11470:	ldr	r1, [pc, #36]	; 1149c <__assert_fail@plt+0xc8>
   11474:	sub	r1, r1, r0
   11478:	asr	r1, r1, #2
   1147c:	add	r1, r1, r1, lsr #31
   11480:	asrs	r1, r1, #1
   11484:	bxeq	lr
   11488:	ldr	r3, [pc, #16]	; 114a0 <__assert_fail@plt+0xcc>
   1148c:	cmp	r3, #0
   11490:	bxeq	lr
   11494:	bx	r3
   11498:	andeq	r7, r2, r0, ror #2
   1149c:	andeq	r7, r2, r0, ror #2
   114a0:	andeq	r0, r0, r0
   114a4:	push	{r4, lr}
   114a8:	ldr	r4, [pc, #24]	; 114c8 <__assert_fail@plt+0xf4>
   114ac:	ldrb	r3, [r4]
   114b0:	cmp	r3, #0
   114b4:	popne	{r4, pc}
   114b8:	bl	11440 <__assert_fail@plt+0x6c>
   114bc:	mov	r3, #1
   114c0:	strb	r3, [r4]
   114c4:	pop	{r4, pc}
   114c8:	andeq	r7, r2, ip, ror r1
   114cc:	b	1146c <__assert_fail@plt+0x98>
   114d0:	push	{fp, lr}
   114d4:	mov	fp, sp
   114d8:	sub	sp, sp, #56	; 0x38
   114dc:	mov	r8, r0
   114e0:	cmp	r0, #0
   114e4:	bne	11744 <__assert_fail@plt+0x370>
   114e8:	movw	r1, #24139	; 0x5e4b
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	movt	r1, #1
   114f8:	bl	1117c <dcgettext@plt>
   114fc:	mov	r1, r0
   11500:	movw	r0, #29064	; 0x7188
   11504:	movt	r0, #2
   11508:	ldr	r2, [r0]
   1150c:	mov	r0, #1
   11510:	mov	r3, r2
   11514:	bl	112e4 <__printf_chk@plt>
   11518:	movw	r1, #24203	; 0x5e8b
   1151c:	mov	r0, #0
   11520:	mov	r2, #5
   11524:	movt	r1, #1
   11528:	bl	1117c <dcgettext@plt>
   1152c:	movw	r9, #29044	; 0x7174
   11530:	movt	r9, #2
   11534:	ldr	r1, [r9]
   11538:	bl	110f8 <fputs_unlocked@plt>
   1153c:	movw	r1, #24253	; 0x5ebd
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	movt	r1, #1
   1154c:	bl	1117c <dcgettext@plt>
   11550:	ldr	r1, [r9]
   11554:	bl	110f8 <fputs_unlocked@plt>
   11558:	movw	r1, #24327	; 0x5f07
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	movt	r1, #1
   11568:	bl	1117c <dcgettext@plt>
   1156c:	ldr	r1, [r9]
   11570:	bl	110f8 <fputs_unlocked@plt>
   11574:	movw	r1, #24400	; 0x5f50
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	movt	r1, #1
   11584:	bl	1117c <dcgettext@plt>
   11588:	movw	r1, #26627	; 0x6803
   1158c:	mov	r5, r0
   11590:	mov	r0, #4
   11594:	movt	r1, #1
   11598:	bl	1384c <__assert_fail@plt+0x2478>
   1159c:	mov	r2, r0
   115a0:	mov	r0, #1
   115a4:	mov	r1, r5
   115a8:	bl	112e4 <__printf_chk@plt>
   115ac:	movw	r1, #24468	; 0x5f94
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	movt	r1, #1
   115bc:	bl	1117c <dcgettext@plt>
   115c0:	ldr	r1, [r9]
   115c4:	bl	110f8 <fputs_unlocked@plt>
   115c8:	movw	r1, #24513	; 0x5fc1
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	movt	r1, #1
   115d8:	bl	1117c <dcgettext@plt>
   115dc:	ldr	r1, [r9]
   115e0:	bl	110f8 <fputs_unlocked@plt>
   115e4:	movw	r1, #24567	; 0x5ff7
   115e8:	mov	r0, #0
   115ec:	mov	r2, #5
   115f0:	movt	r1, #1
   115f4:	bl	1117c <dcgettext@plt>
   115f8:	ldr	r1, [r9]
   115fc:	bl	110f8 <fputs_unlocked@plt>
   11600:	movw	r0, #25512	; 0x63a8
   11604:	mov	r6, sp
   11608:	movt	r0, #1
   1160c:	mov	r1, r6
   11610:	ldm	r0!, {r2, r3, r4, r5}
   11614:	stmia	r1!, {r2, r3, r4, r5}
   11618:	ldm	r0!, {r2, r3, r4, r5, r7}
   1161c:	stmia	r1!, {r2, r3, r4, r5, r7}
   11620:	ldm	r0, {r2, r3, r4, r5, r7}
   11624:	stm	r1, {r2, r3, r4, r5, r7}
   11628:	movw	r1, #25030	; 0x61c6
   1162c:	movw	r5, #24636	; 0x603c
   11630:	movt	r1, #1
   11634:	movt	r5, #1
   11638:	mov	r0, r5
   1163c:	bl	1111c <strcmp@plt>
   11640:	cmp	r0, #0
   11644:	ldrne	r1, [r6, #8]!
   11648:	cmpne	r1, #0
   1164c:	bne	11638 <__assert_fail@plt+0x264>
   11650:	movw	r1, #25125	; 0x6225
   11654:	ldr	r6, [r6, #4]
   11658:	mov	r0, #0
   1165c:	mov	r2, #5
   11660:	movt	r1, #1
   11664:	bl	1117c <dcgettext@plt>
   11668:	movw	r2, #24669	; 0x605d
   1166c:	movw	r3, #25148	; 0x623c
   11670:	mov	r1, r0
   11674:	mov	r0, #1
   11678:	movt	r2, #1
   1167c:	movt	r3, #1
   11680:	bl	112e4 <__printf_chk@plt>
   11684:	cmp	r6, #0
   11688:	mov	r0, #5
   1168c:	mov	r1, #0
   11690:	moveq	r6, r5
   11694:	bl	11338 <setlocale@plt>
   11698:	cmp	r0, #0
   1169c:	beq	116d4 <__assert_fail@plt+0x300>
   116a0:	movw	r1, #25188	; 0x6264
   116a4:	mov	r2, #3
   116a8:	movt	r1, #1
   116ac:	bl	113a4 <strncmp@plt>
   116b0:	cmp	r0, #0
   116b4:	beq	116d4 <__assert_fail@plt+0x300>
   116b8:	movw	r1, #25192	; 0x6268
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #1
   116c8:	bl	1117c <dcgettext@plt>
   116cc:	ldr	r1, [r9]
   116d0:	bl	110f8 <fputs_unlocked@plt>
   116d4:	movw	r1, #25263	; 0x62af
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #1
   116e4:	bl	1117c <dcgettext@plt>
   116e8:	movw	r2, #25148	; 0x623c
   116ec:	mov	r1, r0
   116f0:	mov	r0, #1
   116f4:	mov	r3, r5
   116f8:	movt	r2, #1
   116fc:	bl	112e4 <__printf_chk@plt>
   11700:	movw	r1, #25290	; 0x62ca
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	1117c <dcgettext@plt>
   11714:	mov	r1, r0
   11718:	movw	r0, #25058	; 0x61e2
   1171c:	movw	r3, #24252	; 0x5ebc
   11720:	cmp	r6, r5
   11724:	mov	r2, r6
   11728:	movt	r0, #1
   1172c:	movt	r3, #1
   11730:	moveq	r3, r0
   11734:	mov	r0, #1
   11738:	bl	112e4 <__printf_chk@plt>
   1173c:	mov	r0, r8
   11740:	bl	11278 <exit@plt>
   11744:	movw	r0, #29040	; 0x7170
   11748:	movw	r1, #24100	; 0x5e24
   1174c:	mov	r2, #5
   11750:	movt	r0, #2
   11754:	movt	r1, #1
   11758:	ldr	r5, [r0]
   1175c:	mov	r0, #0
   11760:	bl	1117c <dcgettext@plt>
   11764:	mov	r2, r0
   11768:	movw	r0, #29064	; 0x7188
   1176c:	mov	r1, #1
   11770:	movt	r0, #2
   11774:	ldr	r3, [r0]
   11778:	mov	r0, r5
   1177c:	bl	11308 <__fprintf_chk@plt>
   11780:	b	1173c <__assert_fail@plt+0x368>
   11784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11788:	add	fp, sp, #28
   1178c:	sub	sp, sp, #36	; 0x24
   11790:	mov	r8, #0
   11794:	mov	r6, r0
   11798:	mvn	r0, #0
   1179c:	mov	r4, r1
   117a0:	str	r0, [sp, #32]
   117a4:	str	r0, [sp, #28]
   117a8:	str	r8, [sp, #24]
   117ac:	str	r8, [sp, #20]
   117b0:	ldr	r0, [r1]
   117b4:	bl	12198 <__assert_fail@plt+0xdc4>
   117b8:	movw	r1, #24252	; 0x5ebc
   117bc:	mov	r0, #6
   117c0:	movt	r1, #1
   117c4:	bl	11338 <setlocale@plt>
   117c8:	movw	r5, #24673	; 0x6061
   117cc:	movw	r1, #24643	; 0x6043
   117d0:	movt	r5, #1
   117d4:	movt	r1, #1
   117d8:	mov	r0, r5
   117dc:	bl	1138c <bindtextdomain@plt>
   117e0:	mov	r0, r5
   117e4:	bl	11194 <textdomain@plt>
   117e8:	movw	r0, #28956	; 0x711c
   117ec:	mov	r1, #125	; 0x7d
   117f0:	movt	r0, #2
   117f4:	str	r1, [r0]
   117f8:	movw	r0, #8328	; 0x2088
   117fc:	movt	r0, #1
   11800:	bl	15e00 <__assert_fail@plt+0x4a2c>
   11804:	movw	r5, #24667	; 0x605b
   11808:	movw	r7, #25416	; 0x6348
   1180c:	mov	r0, #0
   11810:	mov	r9, #0
   11814:	mov	sl, #0
   11818:	movt	r5, #1
   1181c:	movt	r7, #1
   11820:	str	r0, [sp, #12]
   11824:	mov	r0, r6
   11828:	mov	r1, r4
   1182c:	mov	r2, r5
   11830:	mov	r3, r7
   11834:	str	r8, [sp]
   11838:	bl	11260 <getopt_long@plt>
   1183c:	cmp	r0, #255	; 0xff
   11840:	ble	118b0 <__assert_fail@plt+0x4dc>
   11844:	cmp	r0, #256	; 0x100
   11848:	beq	11864 <__assert_fail@plt+0x490>
   1184c:	movw	r1, #258	; 0x102
   11850:	cmp	r0, r1
   11854:	bne	11874 <__assert_fail@plt+0x4a0>
   11858:	mov	r0, #1
   1185c:	str	r0, [sp, #12]
   11860:	b	11824 <__assert_fail@plt+0x450>
   11864:	movw	r0, #29048	; 0x7178
   11868:	movt	r0, #2
   1186c:	ldr	r9, [r0]
   11870:	b	11824 <__assert_fail@plt+0x450>
   11874:	movw	r1, #257	; 0x101
   11878:	cmp	r0, r1
   1187c:	bne	11d64 <__assert_fail@plt+0x990>
   11880:	movw	r0, #29048	; 0x7178
   11884:	movt	r0, #2
   11888:	ldr	sl, [r0]
   1188c:	mov	r0, sl
   11890:	bl	1129c <strlen@plt>
   11894:	cmp	r0, #0
   11898:	beq	11824 <__assert_fail@plt+0x450>
   1189c:	sub	r0, r0, #1
   118a0:	ldrb	r1, [sl, r0]
   118a4:	cmp	r1, #58	; 0x3a
   118a8:	strbeq	r8, [sl, r0]
   118ac:	b	11824 <__assert_fail@plt+0x450>
   118b0:	cmn	r0, #1
   118b4:	bne	11ca0 <__assert_fail@plt+0x8cc>
   118b8:	movw	r0, #29032	; 0x7168
   118bc:	movt	r0, #2
   118c0:	ldr	r0, [r0]
   118c4:	cmp	r0, r6
   118c8:	bge	11d00 <__assert_fail@plt+0x92c>
   118cc:	ldr	r8, [r4, r0, lsl #2]
   118d0:	mov	r0, r8
   118d4:	bl	11380 <canonicalize_file_name@plt>
   118d8:	mov	r7, r0
   118dc:	cmp	r0, #0
   118e0:	beq	11900 <__assert_fail@plt+0x52c>
   118e4:	movw	r0, #26627	; 0x6803
   118e8:	mov	r1, r7
   118ec:	movt	r0, #1
   118f0:	bl	1111c <strcmp@plt>
   118f4:	clz	r0, r0
   118f8:	lsr	r5, r0, #5
   118fc:	b	11904 <__assert_fail@plt+0x530>
   11900:	mov	r5, #0
   11904:	mov	r0, r7
   11908:	bl	12170 <__assert_fail@plt+0xd9c>
   1190c:	cmp	r5, #0
   11910:	bne	11924 <__assert_fail@plt+0x550>
   11914:	ldr	r0, [sp, #12]
   11918:	eor	r0, r0, #1
   1191c:	tst	r0, #1
   11920:	beq	11d28 <__assert_fail@plt+0x954>
   11924:	mov	r7, #0
   11928:	cmp	r5, #0
   1192c:	bne	119f0 <__assert_fail@plt+0x61c>
   11930:	cmp	sl, #0
   11934:	beq	11954 <__assert_fail@plt+0x580>
   11938:	mov	r0, #0
   1193c:	add	r1, sp, #32
   11940:	add	r2, sp, #28
   11944:	mov	r3, #0
   11948:	str	r0, [sp]
   1194c:	mov	r0, sl
   11950:	bl	13cd0 <__assert_fail@plt+0x28fc>
   11954:	ldr	r0, [sp, #32]
   11958:	cmn	r0, #1
   1195c:	beq	1199c <__assert_fail@plt+0x5c8>
   11960:	cmp	r9, #0
   11964:	ldrne	r1, [sp, #28]
   11968:	movne	r7, #0
   1196c:	cmnne	r1, #1
   11970:	bne	119a8 <__assert_fail@plt+0x5d4>
   11974:	bl	11128 <getpwuid@plt>
   11978:	cmp	r0, #0
   1197c:	beq	1199c <__assert_fail@plt+0x5c8>
   11980:	ldr	r1, [sp, #28]
   11984:	cmn	r1, #1
   11988:	bne	11994 <__assert_fail@plt+0x5c0>
   1198c:	ldr	r1, [r0, #12]
   11990:	str	r1, [sp, #28]
   11994:	ldr	r7, [r0]
   11998:	b	119a0 <__assert_fail@plt+0x5cc>
   1199c:	mov	r7, #0
   119a0:	cmp	r9, #0
   119a4:	beq	119cc <__assert_fail@plt+0x5f8>
   119a8:	ldrb	r0, [r9]
   119ac:	cmp	r0, #0
   119b0:	beq	119f0 <__assert_fail@plt+0x61c>
   119b4:	add	r1, sp, #24
   119b8:	add	r2, sp, #20
   119bc:	mov	r0, r9
   119c0:	mov	r3, #0
   119c4:	bl	11e44 <__assert_fail@plt+0xa70>
   119c8:	b	119f0 <__assert_fail@plt+0x61c>
   119cc:	cmp	r7, #0
   119d0:	ldrne	r1, [sp, #28]
   119d4:	cmnne	r1, #1
   119d8:	beq	119f0 <__assert_fail@plt+0x61c>
   119dc:	add	r2, sp, #24
   119e0:	mov	r0, r7
   119e4:	bl	14998 <__assert_fail@plt+0x35c4>
   119e8:	cmp	r0, #1
   119ec:	strge	r0, [sp, #20]
   119f0:	mov	r0, r8
   119f4:	bl	111dc <chroot@plt>
   119f8:	cmp	r0, #0
   119fc:	bne	11d6c <__assert_fail@plt+0x998>
   11a00:	ldr	r0, [sp, #12]
   11a04:	tst	r0, #1
   11a08:	bne	11a20 <__assert_fail@plt+0x64c>
   11a0c:	movw	r0, #26627	; 0x6803
   11a10:	movt	r0, #1
   11a14:	bl	111a0 <chdir@plt>
   11a18:	cmp	r0, #0
   11a1c:	bne	11de8 <__assert_fail@plt+0xa14>
   11a20:	movw	r0, #29032	; 0x7168
   11a24:	movt	r0, #2
   11a28:	ldr	r0, [r0]
   11a2c:	add	r0, r0, #1
   11a30:	cmp	r0, r6
   11a34:	bne	11a70 <__assert_fail@plt+0x69c>
   11a38:	movw	r0, #24836	; 0x6104
   11a3c:	movt	r0, #1
   11a40:	bl	11218 <getenv@plt>
   11a44:	movw	r2, #24850	; 0x6112
   11a48:	movw	r3, #24842	; 0x610a
   11a4c:	cmp	r0, #0
   11a50:	mov	r1, #0
   11a54:	movt	r2, #1
   11a58:	movt	r3, #1
   11a5c:	movne	r3, r0
   11a60:	str	r3, [r4]
   11a64:	str	r2, [r4, #4]
   11a68:	str	r1, [r4, #8]
   11a6c:	b	11a74 <__assert_fail@plt+0x6a0>
   11a70:	add	r4, r4, r0, lsl #2
   11a74:	cmp	sl, #0
   11a78:	beq	11ad8 <__assert_fail@plt+0x704>
   11a7c:	mov	r0, #0
   11a80:	add	r1, sp, #32
   11a84:	add	r2, sp, #28
   11a88:	mov	r3, #0
   11a8c:	str	r0, [sp]
   11a90:	mov	r0, sl
   11a94:	bl	13cd0 <__assert_fail@plt+0x28fc>
   11a98:	cmp	r0, #0
   11a9c:	beq	11ad8 <__assert_fail@plt+0x704>
   11aa0:	mov	r5, r0
   11aa4:	ldr	r0, [sp, #32]
   11aa8:	cmn	r0, #1
   11aac:	bne	11ae4 <__assert_fail@plt+0x710>
   11ab0:	ldr	r0, [sp, #28]
   11ab4:	cmn	r0, #1
   11ab8:	bne	11b34 <__assert_fail@plt+0x760>
   11abc:	bl	112b4 <__errno_location@plt>
   11ac0:	ldr	r1, [r0]
   11ac4:	movw	r2, #25599	; 0x63ff
   11ac8:	mov	r0, #125	; 0x7d
   11acc:	mov	r3, r5
   11ad0:	movt	r2, #1
   11ad4:	bl	1120c <error@plt>
   11ad8:	ldr	r0, [sp, #32]
   11adc:	cmn	r0, #1
   11ae0:	beq	11b34 <__assert_fail@plt+0x760>
   11ae4:	cmp	r9, #0
   11ae8:	ldrne	r1, [sp, #28]
   11aec:	cmnne	r1, #1
   11af0:	bne	11b1c <__assert_fail@plt+0x748>
   11af4:	bl	11128 <getpwuid@plt>
   11af8:	ldr	r1, [sp, #28]
   11afc:	cmp	r0, #0
   11b00:	beq	11b2c <__assert_fail@plt+0x758>
   11b04:	cmn	r1, #1
   11b08:	bne	11b14 <__assert_fail@plt+0x740>
   11b0c:	ldr	r1, [r0, #12]
   11b10:	str	r1, [sp, #28]
   11b14:	ldr	r7, [r0]
   11b18:	b	11b34 <__assert_fail@plt+0x760>
   11b1c:	ldr	r5, [sp, #24]
   11b20:	mov	r0, #0
   11b24:	str	r0, [sp, #16]
   11b28:	b	11b48 <__assert_fail@plt+0x774>
   11b2c:	cmn	r1, #1
   11b30:	beq	11e14 <__assert_fail@plt+0xa40>
   11b34:	ldr	r5, [sp, #24]
   11b38:	mov	r0, #0
   11b3c:	cmp	r9, #0
   11b40:	str	r0, [sp, #16]
   11b44:	beq	11b8c <__assert_fail@plt+0x7b8>
   11b48:	ldrb	r0, [r9]
   11b4c:	cmp	r0, #0
   11b50:	beq	11bb0 <__assert_fail@plt+0x7dc>
   11b54:	ldr	r0, [sp, #20]
   11b58:	add	r1, sp, #16
   11b5c:	add	r2, sp, #20
   11b60:	clz	r0, r0
   11b64:	lsr	r3, r0, #5
   11b68:	mov	r0, r9
   11b6c:	bl	11e44 <__assert_fail@plt+0xa70>
   11b70:	cmp	r0, #0
   11b74:	beq	11bac <__assert_fail@plt+0x7d8>
   11b78:	ldr	r0, [sp, #20]
   11b7c:	cmp	r0, #0
   11b80:	bne	11bb0 <__assert_fail@plt+0x7dc>
   11b84:	mov	r0, #125	; 0x7d
   11b88:	b	11c58 <__assert_fail@plt+0x884>
   11b8c:	cmp	r7, #0
   11b90:	ldrne	r1, [sp, #28]
   11b94:	cmnne	r1, #1
   11b98:	bne	11c60 <__assert_fail@plt+0x88c>
   11b9c:	ldr	r0, [sp, #32]
   11ba0:	cmn	r0, #1
   11ba4:	bne	11bb0 <__assert_fail@plt+0x7dc>
   11ba8:	b	11bc4 <__assert_fail@plt+0x7f0>
   11bac:	ldr	r5, [sp, #16]
   11bb0:	ldr	r0, [sp, #20]
   11bb4:	mov	r1, r5
   11bb8:	bl	111b8 <setgroups@plt>
   11bbc:	cmp	r0, #0
   11bc0:	bne	11dac <__assert_fail@plt+0x9d8>
   11bc4:	ldr	r0, [sp, #16]
   11bc8:	bl	12170 <__assert_fail@plt+0xd9c>
   11bcc:	ldr	r0, [sp, #24]
   11bd0:	bl	12170 <__assert_fail@plt+0xd9c>
   11bd4:	ldr	r0, [sp, #28]
   11bd8:	cmn	r0, #1
   11bdc:	beq	11bec <__assert_fail@plt+0x818>
   11be0:	bl	11224 <setgid@plt>
   11be4:	cmp	r0, #0
   11be8:	bne	11dc0 <__assert_fail@plt+0x9ec>
   11bec:	ldr	r0, [sp, #32]
   11bf0:	cmn	r0, #1
   11bf4:	beq	11c04 <__assert_fail@plt+0x830>
   11bf8:	bl	11368 <setuid@plt>
   11bfc:	cmp	r0, #0
   11c00:	bne	11dd4 <__assert_fail@plt+0xa00>
   11c04:	ldr	r0, [r4]
   11c08:	mov	r1, r4
   11c0c:	bl	11164 <execvp@plt>
   11c10:	bl	112b4 <__errno_location@plt>
   11c14:	movw	r1, #25005	; 0x61ad
   11c18:	ldr	r5, [r0]
   11c1c:	mov	r0, #0
   11c20:	mov	r2, #5
   11c24:	movt	r1, #1
   11c28:	bl	1117c <dcgettext@plt>
   11c2c:	mov	r6, r0
   11c30:	ldr	r0, [r4]
   11c34:	bl	13b84 <__assert_fail@plt+0x27b0>
   11c38:	mov	r3, r0
   11c3c:	mov	r0, #0
   11c40:	mov	r1, r5
   11c44:	mov	r2, r6
   11c48:	bl	1120c <error@plt>
   11c4c:	cmp	r5, #2
   11c50:	mov	r0, #126	; 0x7e
   11c54:	movweq	r0, #127	; 0x7f
   11c58:	sub	sp, fp, #28
   11c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c60:	add	r2, sp, #16
   11c64:	mov	r0, r7
   11c68:	bl	14998 <__assert_fail@plt+0x35c4>
   11c6c:	cmp	r0, #0
   11c70:	ble	11c80 <__assert_fail@plt+0x8ac>
   11c74:	ldr	r5, [sp, #16]
   11c78:	str	r0, [sp, #20]
   11c7c:	b	11b9c <__assert_fail@plt+0x7c8>
   11c80:	ldr	r0, [sp, #20]
   11c84:	cmp	r0, #0
   11c88:	bne	11b9c <__assert_fail@plt+0x7c8>
   11c8c:	bl	112b4 <__errno_location@plt>
   11c90:	ldr	r4, [r0]
   11c94:	movw	r1, #24892	; 0x613c
   11c98:	movt	r1, #1
   11c9c:	b	11df8 <__assert_fail@plt+0xa24>
   11ca0:	cmn	r0, #3
   11ca4:	bne	11cf0 <__assert_fail@plt+0x91c>
   11ca8:	movw	r0, #28952	; 0x7118
   11cac:	movw	r2, #24683	; 0x606b
   11cb0:	mov	r1, #0
   11cb4:	movt	r0, #2
   11cb8:	movt	r2, #1
   11cbc:	str	r1, [sp, #4]
   11cc0:	movw	r1, #24636	; 0x603c
   11cc4:	movt	r1, #1
   11cc8:	ldr	r3, [r0]
   11ccc:	movw	r0, #29044	; 0x7174
   11cd0:	str	r2, [sp]
   11cd4:	movw	r2, #24669	; 0x605d
   11cd8:	movt	r0, #2
   11cdc:	movt	r2, #1
   11ce0:	ldr	r0, [r0]
   11ce4:	bl	14420 <__assert_fail@plt+0x304c>
   11ce8:	mov	r0, #0
   11cec:	bl	11278 <exit@plt>
   11cf0:	cmn	r0, #2
   11cf4:	bne	11d64 <__assert_fail@plt+0x990>
   11cf8:	mov	r0, #0
   11cfc:	bl	114d0 <__assert_fail@plt+0xfc>
   11d00:	movw	r1, #24698	; 0x607a
   11d04:	mov	r0, #0
   11d08:	mov	r2, #5
   11d0c:	movt	r1, #1
   11d10:	bl	1117c <dcgettext@plt>
   11d14:	mov	r2, r0
   11d18:	mov	r0, #0
   11d1c:	mov	r1, #0
   11d20:	bl	1120c <error@plt>
   11d24:	b	11d64 <__assert_fail@plt+0x990>
   11d28:	movw	r1, #24714	; 0x608a
   11d2c:	mov	r0, #0
   11d30:	mov	r2, #5
   11d34:	movt	r1, #1
   11d38:	bl	1117c <dcgettext@plt>
   11d3c:	movw	r1, #26627	; 0x6803
   11d40:	mov	r4, r0
   11d44:	mov	r0, #4
   11d48:	movt	r1, #1
   11d4c:	bl	1384c <__assert_fail@plt+0x2478>
   11d50:	mov	r3, r0
   11d54:	mov	r0, #0
   11d58:	mov	r1, #0
   11d5c:	mov	r2, r4
   11d60:	bl	1120c <error@plt>
   11d64:	mov	r0, #125	; 0x7d
   11d68:	bl	114d0 <__assert_fail@plt+0xfc>
   11d6c:	bl	112b4 <__errno_location@plt>
   11d70:	movw	r1, #24770	; 0x60c2
   11d74:	ldr	r4, [r0]
   11d78:	mov	r0, #0
   11d7c:	mov	r2, #5
   11d80:	movt	r1, #1
   11d84:	bl	1117c <dcgettext@plt>
   11d88:	mov	r6, r0
   11d8c:	mov	r0, #4
   11d90:	mov	r1, r8
   11d94:	bl	1384c <__assert_fail@plt+0x2478>
   11d98:	mov	r3, r0
   11d9c:	mov	r0, #125	; 0x7d
   11da0:	mov	r1, r4
   11da4:	mov	r2, r6
   11da8:	bl	1120c <error@plt>
   11dac:	bl	112b4 <__errno_location@plt>
   11db0:	ldr	r4, [r0]
   11db4:	movw	r1, #24926	; 0x615e
   11db8:	movt	r1, #1
   11dbc:	b	11df8 <__assert_fail@plt+0xa24>
   11dc0:	bl	112b4 <__errno_location@plt>
   11dc4:	ldr	r4, [r0]
   11dc8:	movw	r1, #24960	; 0x6180
   11dcc:	movt	r1, #1
   11dd0:	b	11df8 <__assert_fail@plt+0xa24>
   11dd4:	bl	112b4 <__errno_location@plt>
   11dd8:	ldr	r4, [r0]
   11ddc:	movw	r1, #24983	; 0x6197
   11de0:	movt	r1, #1
   11de4:	b	11df8 <__assert_fail@plt+0xa24>
   11de8:	bl	112b4 <__errno_location@plt>
   11dec:	ldr	r4, [r0]
   11df0:	movw	r1, #24805	; 0x60e5
   11df4:	movt	r1, #1
   11df8:	mov	r0, #0
   11dfc:	mov	r2, #5
   11e00:	bl	1117c <dcgettext@plt>
   11e04:	mov	r2, r0
   11e08:	mov	r0, #125	; 0x7d
   11e0c:	mov	r1, r4
   11e10:	bl	1120c <error@plt>
   11e14:	bl	112b4 <__errno_location@plt>
   11e18:	movw	r1, #24853	; 0x6115
   11e1c:	ldr	r4, [r0]
   11e20:	mov	r0, #0
   11e24:	mov	r2, #5
   11e28:	movt	r1, #1
   11e2c:	bl	1117c <dcgettext@plt>
   11e30:	ldr	r3, [sp, #32]
   11e34:	mov	r2, r0
   11e38:	mov	r0, #125	; 0x7d
   11e3c:	mov	r1, r4
   11e40:	bl	1120c <error@plt>
   11e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e48:	add	fp, sp, #28
   11e4c:	sub	sp, sp, #36	; 0x24
   11e50:	mov	r8, #0
   11e54:	str	r3, [sp, #20]
   11e58:	str	r2, [sp, #4]
   11e5c:	str	r1, [sp, #12]
   11e60:	str	r0, [sp, #8]
   11e64:	str	r8, [sp, #32]
   11e68:	bl	1491c <__assert_fail@plt+0x3548>
   11e6c:	movw	r1, #25374	; 0x631e
   11e70:	str	r0, [sp, #16]
   11e74:	movt	r1, #1
   11e78:	bl	1132c <strtok@plt>
   11e7c:	cmp	r0, #0
   11e80:	beq	11fd4 <__assert_fail@plt+0xc00>
   11e84:	movw	r7, #24252	; 0x5ebc
   11e88:	mov	r4, r0
   11e8c:	mov	r6, #0
   11e90:	add	r5, sp, #24
   11e94:	mov	sl, #0
   11e98:	mov	r9, #0
   11e9c:	mov	r8, #0
   11ea0:	movt	r7, #1
   11ea4:	mov	r0, r4
   11ea8:	mov	r1, #0
   11eac:	mov	r2, #10
   11eb0:	mov	r3, r5
   11eb4:	str	r7, [sp]
   11eb8:	bl	14e38 <__assert_fail@plt+0x3a64>
   11ebc:	cmp	r0, #0
   11ec0:	ldreq	r0, [sp, #28]
   11ec4:	cmpeq	r0, #0
   11ec8:	beq	11eec <__assert_fail@plt+0xb18>
   11ecc:	mov	r0, r4
   11ed0:	bl	113c8 <getgrnam@plt>
   11ed4:	cmp	r0, #0
   11ed8:	beq	11f54 <__assert_fail@plt+0xb80>
   11edc:	ldr	r0, [r0, #8]
   11ee0:	str	r6, [sp, #28]
   11ee4:	str	r0, [sp, #24]
   11ee8:	b	11f24 <__assert_fail@plt+0xb50>
   11eec:	sub	r4, r4, #1
   11ef0:	bl	1126c <__ctype_b_loc@plt>
   11ef4:	ldr	r0, [r0]
   11ef8:	ldrb	r1, [r4, #1]!
   11efc:	add	r2, r0, r1, lsl #1
   11f00:	ldrb	r2, [r2, #1]
   11f04:	tst	r2, #32
   11f08:	bne	11ef8 <__assert_fail@plt+0xb24>
   11f0c:	cmp	r1, #43	; 0x2b
   11f10:	beq	11f24 <__assert_fail@plt+0xb50>
   11f14:	mov	r0, r4
   11f18:	bl	113c8 <getgrnam@plt>
   11f1c:	cmp	r0, #0
   11f20:	bne	11edc <__assert_fail@plt+0xb08>
   11f24:	ldr	r0, [sp, #32]
   11f28:	cmp	r8, r0
   11f2c:	bne	11f44 <__assert_fail@plt+0xb70>
   11f30:	mov	r0, r9
   11f34:	add	r1, sp, #32
   11f38:	mov	r2, #4
   11f3c:	bl	14634 <__assert_fail@plt+0x3260>
   11f40:	mov	r9, r0
   11f44:	ldr	r0, [sp, #24]
   11f48:	str	r0, [r9, r8, lsl #2]
   11f4c:	add	r8, r8, #1
   11f50:	b	11fb4 <__assert_fail@plt+0xbe0>
   11f54:	ldr	r0, [sp, #20]
   11f58:	cmp	r0, #0
   11f5c:	beq	12028 <__assert_fail@plt+0xc54>
   11f60:	bl	112b4 <__errno_location@plt>
   11f64:	movw	r1, #25376	; 0x6320
   11f68:	mov	sl, r5
   11f6c:	mov	r5, r7
   11f70:	ldr	r7, [r0]
   11f74:	mov	r0, #0
   11f78:	mov	r2, #5
   11f7c:	movt	r1, #1
   11f80:	bl	1117c <dcgettext@plt>
   11f84:	mov	r6, r0
   11f88:	mov	r0, r4
   11f8c:	bl	13b84 <__assert_fail@plt+0x27b0>
   11f90:	mov	r3, r0
   11f94:	mov	r1, r7
   11f98:	mov	r2, r6
   11f9c:	mov	r0, #0
   11fa0:	mov	r7, r5
   11fa4:	mov	r5, sl
   11fa8:	mov	r6, #0
   11fac:	bl	1120c <error@plt>
   11fb0:	mvn	sl, #0
   11fb4:	movw	r1, #25374	; 0x631e
   11fb8:	mov	r0, #0
   11fbc:	movt	r1, #1
   11fc0:	bl	1132c <strtok@plt>
   11fc4:	mov	r4, r0
   11fc8:	cmp	r0, #0
   11fcc:	bne	11ea4 <__assert_fail@plt+0xad0>
   11fd0:	b	11fdc <__assert_fail@plt+0xc08>
   11fd4:	mov	r9, #0
   11fd8:	mov	sl, #0
   11fdc:	orrs	r0, sl, r8
   11fe0:	mvneq	sl, #0
   11fe4:	bne	12038 <__assert_fail@plt+0xc64>
   11fe8:	ldr	r0, [sp, #20]
   11fec:	cmp	r0, #0
   11ff0:	beq	12038 <__assert_fail@plt+0xc64>
   11ff4:	movw	r1, #25393	; 0x6331
   11ff8:	mov	r0, #0
   11ffc:	mov	r2, #5
   12000:	movt	r1, #1
   12004:	bl	1117c <dcgettext@plt>
   12008:	mov	r4, r0
   1200c:	ldr	r0, [sp, #8]
   12010:	bl	13b84 <__assert_fail@plt+0x27b0>
   12014:	mov	r3, r0
   12018:	mov	r0, #0
   1201c:	mov	r1, #0
   12020:	mov	r2, r4
   12024:	bl	1120c <error@plt>
   12028:	ldr	r0, [sp, #12]
   1202c:	mvn	sl, #0
   12030:	str	r9, [r0]
   12034:	b	12054 <__assert_fail@plt+0xc80>
   12038:	ldr	r0, [sp, #12]
   1203c:	cmp	sl, #0
   12040:	str	r9, [r0]
   12044:	bne	12054 <__assert_fail@plt+0xc80>
   12048:	ldr	r0, [sp, #4]
   1204c:	mov	sl, #0
   12050:	str	r8, [r0]
   12054:	ldr	r0, [sp, #16]
   12058:	bl	12170 <__assert_fail@plt+0xd9c>
   1205c:	mov	r0, sl
   12060:	sub	sp, fp, #28
   12064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12068:	movw	r1, #29056	; 0x7180
   1206c:	movt	r1, #2
   12070:	str	r0, [r1]
   12074:	bx	lr
   12078:	movw	r1, #29060	; 0x7184
   1207c:	movt	r1, #2
   12080:	strb	r0, [r1]
   12084:	bx	lr
   12088:	push	{r4, r5, r6, sl, fp, lr}
   1208c:	add	fp, sp, #16
   12090:	sub	sp, sp, #8
   12094:	movw	r0, #29044	; 0x7174
   12098:	movt	r0, #2
   1209c:	ldr	r0, [r0]
   120a0:	bl	155c8 <__assert_fail@plt+0x41f4>
   120a4:	cmp	r0, #0
   120a8:	beq	120d0 <__assert_fail@plt+0xcfc>
   120ac:	movw	r0, #29060	; 0x7184
   120b0:	movt	r0, #2
   120b4:	ldrb	r0, [r0]
   120b8:	cmp	r0, #0
   120bc:	beq	120f0 <__assert_fail@plt+0xd1c>
   120c0:	bl	112b4 <__errno_location@plt>
   120c4:	ldr	r0, [r0]
   120c8:	cmp	r0, #32
   120cc:	bne	120f0 <__assert_fail@plt+0xd1c>
   120d0:	movw	r0, #29040	; 0x7170
   120d4:	movt	r0, #2
   120d8:	ldr	r0, [r0]
   120dc:	bl	155c8 <__assert_fail@plt+0x41f4>
   120e0:	cmp	r0, #0
   120e4:	subeq	sp, fp, #16
   120e8:	popeq	{r4, r5, r6, sl, fp, pc}
   120ec:	b	12160 <__assert_fail@plt+0xd8c>
   120f0:	movw	r1, #25583	; 0x63ef
   120f4:	mov	r0, #0
   120f8:	mov	r2, #5
   120fc:	movt	r1, #1
   12100:	bl	1117c <dcgettext@plt>
   12104:	mov	r4, r0
   12108:	movw	r0, #29056	; 0x7180
   1210c:	movt	r0, #2
   12110:	ldr	r6, [r0]
   12114:	bl	112b4 <__errno_location@plt>
   12118:	ldr	r5, [r0]
   1211c:	cmp	r6, #0
   12120:	bne	1213c <__assert_fail@plt+0xd68>
   12124:	movw	r2, #25599	; 0x63ff
   12128:	mov	r0, #0
   1212c:	mov	r1, r5
   12130:	mov	r3, r4
   12134:	movt	r2, #1
   12138:	b	1215c <__assert_fail@plt+0xd88>
   1213c:	mov	r0, r6
   12140:	bl	13944 <__assert_fail@plt+0x2570>
   12144:	movw	r2, #25595	; 0x63fb
   12148:	mov	r3, r0
   1214c:	str	r4, [sp]
   12150:	mov	r0, #0
   12154:	mov	r1, r5
   12158:	movt	r2, #1
   1215c:	bl	1120c <error@plt>
   12160:	movw	r0, #28956	; 0x711c
   12164:	movt	r0, #2
   12168:	ldr	r0, [r0]
   1216c:	bl	1114c <_exit@plt>
   12170:	push	{r4, r5, r6, sl, fp, lr}
   12174:	add	fp, sp, #16
   12178:	mov	r4, r0
   1217c:	bl	112b4 <__errno_location@plt>
   12180:	ldr	r6, [r0]
   12184:	mov	r5, r0
   12188:	mov	r0, r4
   1218c:	bl	11140 <free@plt>
   12190:	str	r6, [r5]
   12194:	pop	{r4, r5, r6, sl, fp, pc}
   12198:	push	{r4, r5, fp, lr}
   1219c:	add	fp, sp, #8
   121a0:	cmp	r0, #0
   121a4:	beq	12238 <__assert_fail@plt+0xe64>
   121a8:	mov	r1, #47	; 0x2f
   121ac:	mov	r4, r0
   121b0:	bl	11350 <strrchr@plt>
   121b4:	cmp	r0, #0
   121b8:	mov	r5, r4
   121bc:	addne	r5, r0, #1
   121c0:	sub	r0, r5, r4
   121c4:	cmp	r0, #7
   121c8:	blt	1221c <__assert_fail@plt+0xe48>
   121cc:	movw	r1, #25658	; 0x643a
   121d0:	sub	r0, r5, #7
   121d4:	mov	r2, #7
   121d8:	movt	r1, #1
   121dc:	bl	113a4 <strncmp@plt>
   121e0:	cmp	r0, #0
   121e4:	bne	1221c <__assert_fail@plt+0xe48>
   121e8:	movw	r1, #25666	; 0x6442
   121ec:	mov	r0, r5
   121f0:	mov	r2, #3
   121f4:	movt	r1, #1
   121f8:	bl	113a4 <strncmp@plt>
   121fc:	cmp	r0, #0
   12200:	beq	1220c <__assert_fail@plt+0xe38>
   12204:	mov	r4, r5
   12208:	b	1221c <__assert_fail@plt+0xe48>
   1220c:	movw	r0, #29024	; 0x7160
   12210:	add	r4, r5, #3
   12214:	movt	r0, #2
   12218:	str	r4, [r0]
   1221c:	movw	r0, #29028	; 0x7164
   12220:	movt	r0, #2
   12224:	str	r4, [r0]
   12228:	movw	r0, #29064	; 0x7188
   1222c:	movt	r0, #2
   12230:	str	r4, [r0]
   12234:	pop	{r4, r5, fp, pc}
   12238:	movw	r0, #29040	; 0x7170
   1223c:	movt	r0, #2
   12240:	ldr	r1, [r0]
   12244:	movw	r0, #25602	; 0x6402
   12248:	movt	r0, #1
   1224c:	bl	11398 <fputs@plt>
   12250:	bl	113b0 <abort@plt>
   12254:	push	{r4, r5, r6, sl, fp, lr}
   12258:	add	fp, sp, #16
   1225c:	mov	r4, r0
   12260:	movw	r0, #29072	; 0x7190
   12264:	movt	r0, #2
   12268:	cmp	r4, #0
   1226c:	moveq	r4, r0
   12270:	bl	112b4 <__errno_location@plt>
   12274:	ldr	r6, [r0]
   12278:	mov	r5, r0
   1227c:	mov	r0, r4
   12280:	mov	r1, #48	; 0x30
   12284:	bl	14878 <__assert_fail@plt+0x34a4>
   12288:	str	r6, [r5]
   1228c:	pop	{r4, r5, r6, sl, fp, pc}
   12290:	movw	r1, #29072	; 0x7190
   12294:	cmp	r0, #0
   12298:	movt	r1, #2
   1229c:	movne	r1, r0
   122a0:	ldr	r0, [r1]
   122a4:	bx	lr
   122a8:	movw	r2, #29072	; 0x7190
   122ac:	cmp	r0, #0
   122b0:	movt	r2, #2
   122b4:	movne	r2, r0
   122b8:	str	r1, [r2]
   122bc:	bx	lr
   122c0:	movw	r3, #29072	; 0x7190
   122c4:	cmp	r0, #0
   122c8:	and	r2, r2, #1
   122cc:	movt	r3, #2
   122d0:	movne	r3, r0
   122d4:	ubfx	r0, r1, #5, #3
   122d8:	and	r1, r1, #31
   122dc:	add	ip, r3, r0, lsl #2
   122e0:	mov	r0, #1
   122e4:	ldr	r3, [ip, #8]
   122e8:	and	r0, r0, r3, lsr r1
   122ec:	eor	r2, r0, r2
   122f0:	eor	r1, r3, r2, lsl r1
   122f4:	str	r1, [ip, #8]
   122f8:	bx	lr
   122fc:	movw	r2, #29072	; 0x7190
   12300:	cmp	r0, #0
   12304:	movt	r2, #2
   12308:	movne	r2, r0
   1230c:	ldr	r0, [r2, #4]
   12310:	str	r1, [r2, #4]
   12314:	bx	lr
   12318:	push	{fp, lr}
   1231c:	mov	fp, sp
   12320:	movw	r3, #29072	; 0x7190
   12324:	cmp	r0, #0
   12328:	movt	r3, #2
   1232c:	movne	r3, r0
   12330:	cmp	r1, #0
   12334:	mov	r0, #10
   12338:	cmpne	r2, #0
   1233c:	str	r0, [r3]
   12340:	bne	12348 <__assert_fail@plt+0xf74>
   12344:	bl	113b0 <abort@plt>
   12348:	str	r1, [r3, #40]	; 0x28
   1234c:	str	r2, [r3, #44]	; 0x2c
   12350:	pop	{fp, pc}
   12354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12358:	add	fp, sp, #28
   1235c:	sub	sp, sp, #20
   12360:	mov	r7, r0
   12364:	ldr	r0, [fp, #8]
   12368:	movw	r5, #29072	; 0x7190
   1236c:	mov	r8, r3
   12370:	mov	r9, r2
   12374:	mov	sl, r1
   12378:	movt	r5, #2
   1237c:	cmp	r0, #0
   12380:	movne	r5, r0
   12384:	bl	112b4 <__errno_location@plt>
   12388:	ldr	r2, [r5, #40]	; 0x28
   1238c:	ldr	r3, [r5, #44]	; 0x2c
   12390:	mov	r4, r0
   12394:	ldm	r5, {r0, r1}
   12398:	add	r5, r5, #8
   1239c:	ldr	r6, [r4]
   123a0:	stm	sp, {r0, r1, r5}
   123a4:	mov	r0, r7
   123a8:	mov	r1, sl
   123ac:	str	r2, [sp, #12]
   123b0:	str	r3, [sp, #16]
   123b4:	mov	r2, r9
   123b8:	mov	r3, r8
   123bc:	bl	123cc <__assert_fail@plt+0xff8>
   123c0:	str	r6, [r4]
   123c4:	sub	sp, fp, #28
   123c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d0:	add	fp, sp, #28
   123d4:	sub	sp, sp, #156	; 0x9c
   123d8:	mov	r5, r0
   123dc:	add	r0, r2, #1
   123e0:	mov	r6, r1
   123e4:	mov	sl, r3
   123e8:	str	r2, [fp, #-80]	; 0xffffffb0
   123ec:	str	r0, [sp, #72]	; 0x48
   123f0:	ldr	r0, [fp, #12]
   123f4:	and	r1, r0, #1
   123f8:	str	r1, [sp, #32]
   123fc:	and	r1, r0, #4
   12400:	str	r1, [sp, #28]
   12404:	ubfx	r9, r0, #1, #1
   12408:	bl	111d0 <__ctype_get_mb_cur_max@plt>
   1240c:	str	r0, [sp, #40]	; 0x28
   12410:	ldr	r0, [fp, #24]
   12414:	ldr	r7, [fp, #8]
   12418:	mov	r1, #0
   1241c:	mov	lr, #0
   12420:	str	r5, [fp, #-84]	; 0xffffffac
   12424:	str	r1, [sp, #60]	; 0x3c
   12428:	mov	r1, #1
   1242c:	str	r1, [fp, #-48]	; 0xffffffd0
   12430:	str	r0, [sp, #80]	; 0x50
   12434:	ldr	r0, [fp, #20]
   12438:	str	r0, [sp, #76]	; 0x4c
   1243c:	mov	r0, #0
   12440:	str	r0, [sp, #56]	; 0x38
   12444:	mov	r0, #0
   12448:	str	r0, [fp, #-88]	; 0xffffffa8
   1244c:	mov	r0, #0
   12450:	str	r0, [fp, #-72]	; 0xffffffb8
   12454:	mov	r0, #0
   12458:	cmp	r7, #10
   1245c:	bhi	13438 <__assert_fail@plt+0x2064>
   12460:	add	r1, pc, #24
   12464:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12468:	mov	ip, r6
   1246c:	mov	r8, #0
   12470:	mov	r2, #1
   12474:	mov	r6, #0
   12478:	mov	r3, sl
   1247c:	ldr	pc, [r1, r7, lsl #2]
   12480:	andeq	r2, r1, ip, ror #10
   12484:	andeq	r2, r1, r0, asr #11
   12488:	andeq	r2, r1, r0, lsl #11
   1248c:	andeq	r2, r1, r4, ror #10
   12490:			; <UNDEFINED> instruction: 0x000125b4
   12494:	andeq	r2, r1, r8, ror #11
   12498:	muleq	r1, r0, r5
   1249c:	andeq	r2, r1, ip, ror #12
   124a0:	andeq	r2, r1, ip, lsr #9
   124a4:	andeq	r2, r1, ip, lsr #9
   124a8:	andeq	r2, r1, ip, ror #9
   124ac:	movw	r0, #25748	; 0x6494
   124b0:	mov	r1, r7
   124b4:	mov	r6, r5
   124b8:	mov	r4, ip
   124bc:	mov	r5, lr
   124c0:	movt	r0, #1
   124c4:	bl	13b9c <__assert_fail@plt+0x27c8>
   124c8:	str	r0, [sp, #76]	; 0x4c
   124cc:	movw	r0, #25750	; 0x6496
   124d0:	mov	r1, r7
   124d4:	movt	r0, #1
   124d8:	bl	13b9c <__assert_fail@plt+0x27c8>
   124dc:	mov	lr, r5
   124e0:	mov	r5, r6
   124e4:	mov	ip, r4
   124e8:	str	r0, [sp, #80]	; 0x50
   124ec:	mov	r8, #0
   124f0:	tst	r9, #1
   124f4:	str	lr, [sp, #44]	; 0x2c
   124f8:	bne	12530 <__assert_fail@plt+0x115c>
   124fc:	ldr	r0, [sp, #76]	; 0x4c
   12500:	ldrb	r0, [r0]
   12504:	cmp	r0, #0
   12508:	beq	12530 <__assert_fail@plt+0x115c>
   1250c:	ldr	r1, [sp, #76]	; 0x4c
   12510:	mov	r8, #0
   12514:	add	r1, r1, #1
   12518:	cmp	r8, ip
   1251c:	strbcc	r0, [r5, r8]
   12520:	ldrb	r0, [r1, r8]
   12524:	add	r8, r8, #1
   12528:	cmp	r0, #0
   1252c:	bne	12518 <__assert_fail@plt+0x1144>
   12530:	ldr	r6, [sp, #80]	; 0x50
   12534:	mov	r4, ip
   12538:	mov	r0, r6
   1253c:	bl	1129c <strlen@plt>
   12540:	mov	ip, r4
   12544:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12548:	ldr	lr, [sp, #44]	; 0x2c
   1254c:	str	r6, [fp, #-88]	; 0xffffffa8
   12550:	str	r0, [fp, #-72]	; 0xffffffb8
   12554:	mov	r2, #1
   12558:	mov	r6, r9
   1255c:	mov	r3, sl
   12560:	b	1266c <__assert_fail@plt+0x1298>
   12564:	mov	r0, #1
   12568:	b	125c0 <__assert_fail@plt+0x11ec>
   1256c:	mov	r7, #0
   12570:	mov	r8, #0
   12574:	mov	r2, r0
   12578:	mov	r6, #0
   1257c:	b	1266c <__assert_fail@plt+0x1298>
   12580:	tst	r9, #1
   12584:	bne	125c0 <__assert_fail@plt+0x11ec>
   12588:	mov	r2, r0
   1258c:	b	12618 <__assert_fail@plt+0x1244>
   12590:	mov	r0, #1
   12594:	mov	r8, #0
   12598:	mov	r7, #5
   1259c:	mov	r2, #1
   125a0:	str	r0, [fp, #-72]	; 0xffffffb8
   125a4:	movw	r0, #25746	; 0x6492
   125a8:	movt	r0, #1
   125ac:	str	r0, [fp, #-88]	; 0xffffffa8
   125b0:	b	125e0 <__assert_fail@plt+0x120c>
   125b4:	mov	r2, #1
   125b8:	tst	r9, #1
   125bc:	beq	12618 <__assert_fail@plt+0x1244>
   125c0:	mov	r1, #1
   125c4:	mov	r8, #0
   125c8:	mov	r7, #2
   125cc:	mov	r2, r0
   125d0:	str	r1, [fp, #-72]	; 0xffffffb8
   125d4:	movw	r1, #25750	; 0x6496
   125d8:	movt	r1, #1
   125dc:	str	r1, [fp, #-88]	; 0xffffffa8
   125e0:	mov	r6, #1
   125e4:	b	1266c <__assert_fail@plt+0x1298>
   125e8:	tst	r9, #1
   125ec:	beq	1263c <__assert_fail@plt+0x1268>
   125f0:	mov	r0, #1
   125f4:	mov	r8, #0
   125f8:	mov	r2, #1
   125fc:	mov	r6, #1
   12600:	mov	r7, #5
   12604:	str	r0, [fp, #-72]	; 0xffffffb8
   12608:	movw	r0, #25746	; 0x6492
   1260c:	movt	r0, #1
   12610:	str	r0, [fp, #-88]	; 0xffffffa8
   12614:	b	1266c <__assert_fail@plt+0x1298>
   12618:	cmp	ip, #0
   1261c:	mov	r8, #1
   12620:	mov	r6, #0
   12624:	mov	r7, #2
   12628:	movne	r0, #39	; 0x27
   1262c:	strbne	r0, [r5]
   12630:	movw	r0, #25750	; 0x6496
   12634:	movt	r0, #1
   12638:	b	12660 <__assert_fail@plt+0x128c>
   1263c:	cmp	ip, #0
   12640:	mov	r8, #1
   12644:	mov	r2, #1
   12648:	mov	r7, #5
   1264c:	mov	r6, #0
   12650:	movne	r0, #34	; 0x22
   12654:	strbne	r0, [r5]
   12658:	movw	r0, #25746	; 0x6492
   1265c:	movt	r0, #1
   12660:	str	r0, [fp, #-88]	; 0xffffffa8
   12664:	mov	r0, #1
   12668:	str	r0, [fp, #-72]	; 0xffffffb8
   1266c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12670:	str	r7, [fp, #-68]	; 0xffffffbc
   12674:	str	r6, [fp, #-76]	; 0xffffffb4
   12678:	str	r2, [sp, #84]	; 0x54
   1267c:	cmp	r0, #0
   12680:	movwne	r0, #1
   12684:	and	r1, r0, r6
   12688:	and	r1, r2, r1
   1268c:	str	r1, [sp, #48]	; 0x30
   12690:	sub	r1, r7, #2
   12694:	clz	r1, r1
   12698:	lsr	r1, r1, #5
   1269c:	and	r1, r1, r6
   126a0:	str	r1, [sp, #64]	; 0x40
   126a4:	subs	r1, r7, #2
   126a8:	eor	r7, r6, #1
   126ac:	movwne	r1, #1
   126b0:	str	r7, [sp, #92]	; 0x5c
   126b4:	orr	r7, r1, r7
   126b8:	and	r1, r1, r2
   126bc:	and	r0, r0, r1
   126c0:	str	r7, [sp, #68]	; 0x44
   126c4:	mov	r7, #0
   126c8:	str	r0, [fp, #-60]	; 0xffffffc4
   126cc:	orr	r0, r1, r6
   126d0:	ldr	r1, [fp, #16]
   126d4:	eor	r0, r0, #1
   126d8:	clz	r1, r1
   126dc:	lsr	r1, r1, #5
   126e0:	orr	r0, r1, r0
   126e4:	str	r0, [fp, #-64]	; 0xffffffc0
   126e8:	eor	r0, r2, #1
   126ec:	str	r0, [sp, #52]	; 0x34
   126f0:	cmn	r3, #1
   126f4:	beq	12704 <__assert_fail@plt+0x1330>
   126f8:	cmp	r7, r3
   126fc:	bne	12710 <__assert_fail@plt+0x133c>
   12700:	b	1326c <__assert_fail@plt+0x1e98>
   12704:	ldrb	r0, [r4, r7]
   12708:	cmp	r0, #0
   1270c:	beq	13274 <__assert_fail@plt+0x1ea0>
   12710:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12714:	cmp	r0, #0
   12718:	beq	12760 <__assert_fail@plt+0x138c>
   1271c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12720:	add	r5, r7, r0
   12724:	cmp	r0, #2
   12728:	bcc	12774 <__assert_fail@plt+0x13a0>
   1272c:	mov	r0, #0
   12730:	cmn	r3, #1
   12734:	str	r0, [fp, #-56]	; 0xffffffc8
   12738:	bne	1277c <__assert_fail@plt+0x13a8>
   1273c:	mov	r0, r4
   12740:	mov	r4, ip
   12744:	mov	r6, lr
   12748:	bl	1129c <strlen@plt>
   1274c:	mov	ip, r4
   12750:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12754:	mov	lr, r6
   12758:	mov	r3, r0
   1275c:	b	1277c <__assert_fail@plt+0x13a8>
   12760:	mov	r0, #0
   12764:	mov	sl, r3
   12768:	str	r0, [fp, #-56]	; 0xffffffc8
   1276c:	mov	r0, #0
   12770:	b	127e8 <__assert_fail@plt+0x1414>
   12774:	mov	r0, #0
   12778:	str	r0, [fp, #-56]	; 0xffffffc8
   1277c:	cmp	r5, r3
   12780:	bls	12794 <__assert_fail@plt+0x13c0>
   12784:	ldr	r5, [fp, #-84]	; 0xffffffac
   12788:	mov	r0, #0
   1278c:	mov	sl, r3
   12790:	b	127e8 <__assert_fail@plt+0x1414>
   12794:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12798:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1279c:	add	r0, r4, r7
   127a0:	mov	r5, lr
   127a4:	mov	r6, ip
   127a8:	mov	sl, r3
   127ac:	bl	11284 <bcmp@plt>
   127b0:	ldr	r2, [sp, #92]	; 0x5c
   127b4:	cmp	r0, #0
   127b8:	ldr	r3, [fp, #-84]	; 0xffffffac
   127bc:	mov	r1, r0
   127c0:	movwne	r1, #1
   127c4:	orr	r1, r1, r2
   127c8:	tst	r1, #1
   127cc:	beq	132f8 <__assert_fail@plt+0x1f24>
   127d0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   127d4:	clz	r0, r0
   127d8:	mov	lr, r5
   127dc:	mov	ip, r6
   127e0:	mov	r5, r3
   127e4:	lsr	r0, r0, #5
   127e8:	str	r0, [fp, #-52]	; 0xffffffcc
   127ec:	ldrb	r6, [r4, r7]
   127f0:	cmp	r6, #126	; 0x7e
   127f4:	bhi	12d1c <__assert_fail@plt+0x1948>
   127f8:	add	r3, pc, #16
   127fc:	mov	r9, #1
   12800:	mov	r2, #110	; 0x6e
   12804:	mov	r0, #97	; 0x61
   12808:	mov	r1, #0
   1280c:	ldr	pc, [r3, r6, lsl #2]
   12810:	andeq	r2, r1, r0, lsl #23
   12814:	andeq	r2, r1, ip, lsl sp
   12818:	andeq	r2, r1, ip, lsl sp
   1281c:	andeq	r2, r1, ip, lsl sp
   12820:	andeq	r2, r1, ip, lsl sp
   12824:	andeq	r2, r1, ip, lsl sp
   12828:	andeq	r2, r1, ip, lsl sp
   1282c:	muleq	r1, ip, sp
   12830:	andeq	r2, r1, r0, ror #22
   12834:	andeq	r2, r1, r8, asr fp
   12838:	andeq	r2, r1, ip, ror #22
   1283c:	andeq	r2, r1, r4, lsl #25
   12840:	andeq	r2, r1, r0, asr fp
   12844:	andeq	r2, r1, r8, ror #22
   12848:	andeq	r2, r1, ip, lsl sp
   1284c:	andeq	r2, r1, ip, lsl sp
   12850:	andeq	r2, r1, ip, lsl sp
   12854:	andeq	r2, r1, ip, lsl sp
   12858:	andeq	r2, r1, ip, lsl sp
   1285c:	andeq	r2, r1, ip, lsl sp
   12860:	andeq	r2, r1, ip, lsl sp
   12864:	andeq	r2, r1, ip, lsl sp
   12868:	andeq	r2, r1, ip, lsl sp
   1286c:	andeq	r2, r1, ip, lsl sp
   12870:	andeq	r2, r1, ip, lsl sp
   12874:	andeq	r2, r1, ip, lsl sp
   12878:	andeq	r2, r1, ip, lsl sp
   1287c:	andeq	r2, r1, ip, lsl sp
   12880:	andeq	r2, r1, ip, lsl sp
   12884:	andeq	r2, r1, ip, lsl sp
   12888:	andeq	r2, r1, ip, lsl sp
   1288c:	andeq	r2, r1, ip, lsl sp
   12890:	andeq	r2, r1, r0, lsl #22
   12894:	andeq	r2, r1, r4, lsl #22
   12898:	andeq	r2, r1, r4, lsl #22
   1289c:	andeq	r2, r1, r8, ror #21
   128a0:	andeq	r2, r1, r4, lsl #22
   128a4:	andeq	r2, r1, ip, lsl #20
   128a8:	andeq	r2, r1, r4, lsl #22
   128ac:	andeq	r2, r1, ip, lsl #25
   128b0:	andeq	r2, r1, r4, lsl #22
   128b4:	andeq	r2, r1, r4, lsl #22
   128b8:	andeq	r2, r1, r4, lsl #22
   128bc:	andeq	r2, r1, ip, lsl #20
   128c0:	andeq	r2, r1, ip, lsl #20
   128c4:	andeq	r2, r1, ip, lsl #20
   128c8:	andeq	r2, r1, ip, lsl #20
   128cc:	andeq	r2, r1, ip, lsl #20
   128d0:	andeq	r2, r1, ip, lsl #20
   128d4:	andeq	r2, r1, ip, lsl #20
   128d8:	andeq	r2, r1, ip, lsl #20
   128dc:	andeq	r2, r1, ip, lsl #20
   128e0:	andeq	r2, r1, ip, lsl #20
   128e4:	andeq	r2, r1, ip, lsl #20
   128e8:	andeq	r2, r1, ip, lsl #20
   128ec:	andeq	r2, r1, ip, lsl #20
   128f0:	andeq	r2, r1, ip, lsl #20
   128f4:	andeq	r2, r1, ip, lsl #20
   128f8:	andeq	r2, r1, ip, lsl #20
   128fc:	andeq	r2, r1, r4, lsl #22
   12900:	andeq	r2, r1, r4, lsl #22
   12904:	andeq	r2, r1, r4, lsl #22
   12908:	andeq	r2, r1, r4, lsl #22
   1290c:	andeq	r2, r1, r8, asr ip
   12910:	andeq	r2, r1, ip, lsl sp
   12914:	andeq	r2, r1, ip, lsl #20
   12918:	andeq	r2, r1, ip, lsl #20
   1291c:	andeq	r2, r1, ip, lsl #20
   12920:	andeq	r2, r1, ip, lsl #20
   12924:	andeq	r2, r1, ip, lsl #20
   12928:	andeq	r2, r1, ip, lsl #20
   1292c:	andeq	r2, r1, ip, lsl #20
   12930:	andeq	r2, r1, ip, lsl #20
   12934:	andeq	r2, r1, ip, lsl #20
   12938:	andeq	r2, r1, ip, lsl #20
   1293c:	andeq	r2, r1, ip, lsl #20
   12940:	andeq	r2, r1, ip, lsl #20
   12944:	andeq	r2, r1, ip, lsl #20
   12948:	andeq	r2, r1, ip, lsl #20
   1294c:	andeq	r2, r1, ip, lsl #20
   12950:	andeq	r2, r1, ip, lsl #20
   12954:	andeq	r2, r1, ip, lsl #20
   12958:	andeq	r2, r1, ip, lsl #20
   1295c:	andeq	r2, r1, ip, lsl #20
   12960:	andeq	r2, r1, ip, lsl #20
   12964:	andeq	r2, r1, ip, lsl #20
   12968:	andeq	r2, r1, ip, lsl #20
   1296c:	andeq	r2, r1, ip, lsl #20
   12970:	andeq	r2, r1, ip, lsl #20
   12974:	andeq	r2, r1, ip, lsl #20
   12978:	andeq	r2, r1, ip, lsl #20
   1297c:	andeq	r2, r1, r4, lsl #22
   12980:	andeq	r2, r1, ip, lsr #22
   12984:	andeq	r2, r1, ip, lsl #20
   12988:	andeq	r2, r1, r4, lsl #22
   1298c:	andeq	r2, r1, ip, lsl #20
   12990:	andeq	r2, r1, r4, lsl #22
   12994:	andeq	r2, r1, ip, lsl #20
   12998:	andeq	r2, r1, ip, lsl #20
   1299c:	andeq	r2, r1, ip, lsl #20
   129a0:	andeq	r2, r1, ip, lsl #20
   129a4:	andeq	r2, r1, ip, lsl #20
   129a8:	andeq	r2, r1, ip, lsl #20
   129ac:	andeq	r2, r1, ip, lsl #20
   129b0:	andeq	r2, r1, ip, lsl #20
   129b4:	andeq	r2, r1, ip, lsl #20
   129b8:	andeq	r2, r1, ip, lsl #20
   129bc:	andeq	r2, r1, ip, lsl #20
   129c0:	andeq	r2, r1, ip, lsl #20
   129c4:	andeq	r2, r1, ip, lsl #20
   129c8:	andeq	r2, r1, ip, lsl #20
   129cc:	andeq	r2, r1, ip, lsl #20
   129d0:	andeq	r2, r1, ip, lsl #20
   129d4:	andeq	r2, r1, ip, lsl #20
   129d8:	andeq	r2, r1, ip, lsl #20
   129dc:	andeq	r2, r1, ip, lsl #20
   129e0:	andeq	r2, r1, ip, lsl #20
   129e4:	andeq	r2, r1, ip, lsl #20
   129e8:	andeq	r2, r1, ip, lsl #20
   129ec:	andeq	r2, r1, ip, lsl #20
   129f0:	andeq	r2, r1, ip, lsl #20
   129f4:	andeq	r2, r1, ip, lsl #20
   129f8:	andeq	r2, r1, ip, lsl #20
   129fc:	andeq	r2, r1, r0, asr #21
   12a00:	andeq	r2, r1, r4, lsl #22
   12a04:	andeq	r2, r1, r0, asr #21
   12a08:	andeq	r2, r1, r8, ror #21
   12a0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a10:	tst	r0, #1
   12a14:	bne	12a40 <__assert_fail@plt+0x166c>
   12a18:	ldr	r1, [fp, #16]
   12a1c:	ubfx	r0, r6, #5, #3
   12a20:	mov	r2, #1
   12a24:	ldr	r0, [r1, r0, lsl #2]
   12a28:	and	r1, r6, #31
   12a2c:	tst	r0, r2, lsl r1
   12a30:	beq	12a40 <__assert_fail@plt+0x166c>
   12a34:	mov	r0, r6
   12a38:	mov	r1, r9
   12a3c:	b	12a54 <__assert_fail@plt+0x1680>
   12a40:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12a44:	mov	r1, r9
   12a48:	cmp	r0, #0
   12a4c:	mov	r0, r6
   12a50:	beq	131a0 <__assert_fail@plt+0x1dcc>
   12a54:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12a58:	tst	r2, #1
   12a5c:	bne	1333c <__assert_fail@plt+0x1f68>
   12a60:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12a64:	subs	r2, r2, #2
   12a68:	movwne	r2, #1
   12a6c:	orr	r2, r2, lr
   12a70:	tst	r2, #1
   12a74:	bne	12aac <__assert_fail@plt+0x16d8>
   12a78:	cmp	r8, ip
   12a7c:	mov	lr, #1
   12a80:	movcc	r2, #39	; 0x27
   12a84:	strbcc	r2, [r5, r8]
   12a88:	add	r2, r8, #1
   12a8c:	cmp	r2, ip
   12a90:	movcc	r3, #36	; 0x24
   12a94:	strbcc	r3, [r5, r2]
   12a98:	add	r2, r8, #2
   12a9c:	add	r8, r8, #3
   12aa0:	cmp	r2, ip
   12aa4:	movcc	r3, #39	; 0x27
   12aa8:	strbcc	r3, [r5, r2]
   12aac:	cmp	r8, ip
   12ab0:	movcc	r2, #92	; 0x5c
   12ab4:	strbcc	r2, [r5, r8]
   12ab8:	add	r8, r8, #1
   12abc:	b	131e0 <__assert_fail@plt+0x1e0c>
   12ac0:	cmp	sl, #1
   12ac4:	beq	12ae8 <__assert_fail@plt+0x1714>
   12ac8:	mov	r9, #0
   12acc:	cmn	sl, #1
   12ad0:	bne	12af4 <__assert_fail@plt+0x1720>
   12ad4:	ldrb	r0, [r4, #1]
   12ad8:	cmp	r0, #0
   12adc:	beq	12ae8 <__assert_fail@plt+0x1714>
   12ae0:	mvn	sl, #0
   12ae4:	b	12af4 <__assert_fail@plt+0x1720>
   12ae8:	mov	r9, #0
   12aec:	cmp	r7, #0
   12af0:	beq	12b00 <__assert_fail@plt+0x172c>
   12af4:	mov	r0, #0
   12af8:	str	r0, [fp, #-56]	; 0xffffffc8
   12afc:	b	12a0c <__assert_fail@plt+0x1638>
   12b00:	mov	r1, #1
   12b04:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b08:	cmp	r0, #2
   12b0c:	bne	12b24 <__assert_fail@plt+0x1750>
   12b10:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b14:	mov	r9, r1
   12b18:	tst	r0, #1
   12b1c:	beq	12a0c <__assert_fail@plt+0x1638>
   12b20:	b	1333c <__assert_fail@plt+0x1f68>
   12b24:	mov	r9, r1
   12b28:	b	12a0c <__assert_fail@plt+0x1638>
   12b2c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b30:	cmp	r0, #2
   12b34:	bne	12d78 <__assert_fail@plt+0x19a4>
   12b38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b3c:	tst	r0, #1
   12b40:	bne	1333c <__assert_fail@plt+0x1f68>
   12b44:	mov	r0, #0
   12b48:	str	r0, [fp, #-56]	; 0xffffffc8
   12b4c:	b	12d90 <__assert_fail@plt+0x19bc>
   12b50:	mov	r0, #102	; 0x66
   12b54:	b	12d9c <__assert_fail@plt+0x19c8>
   12b58:	mov	r2, #116	; 0x74
   12b5c:	b	12b6c <__assert_fail@plt+0x1798>
   12b60:	mov	r0, #98	; 0x62
   12b64:	b	12d9c <__assert_fail@plt+0x19c8>
   12b68:	mov	r2, #114	; 0x72
   12b6c:	ldr	r0, [sp, #68]	; 0x44
   12b70:	tst	r0, #1
   12b74:	mov	r0, r2
   12b78:	bne	12d9c <__assert_fail@plt+0x19c8>
   12b7c:	b	1333c <__assert_fail@plt+0x1f68>
   12b80:	ldr	r0, [sp, #84]	; 0x54
   12b84:	tst	r0, #1
   12b88:	beq	12dbc <__assert_fail@plt+0x19e8>
   12b8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b90:	tst	r0, #1
   12b94:	bne	13428 <__assert_fail@plt+0x2054>
   12b98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b9c:	mov	r2, sl
   12ba0:	subs	r0, r0, #2
   12ba4:	movwne	r0, #1
   12ba8:	orr	r0, r0, lr
   12bac:	tst	r0, #1
   12bb0:	bne	12be8 <__assert_fail@plt+0x1814>
   12bb4:	cmp	r8, ip
   12bb8:	mov	lr, #1
   12bbc:	movcc	r0, #39	; 0x27
   12bc0:	strbcc	r0, [r5, r8]
   12bc4:	add	r0, r8, #1
   12bc8:	cmp	r0, ip
   12bcc:	movcc	r1, #36	; 0x24
   12bd0:	strbcc	r1, [r5, r0]
   12bd4:	add	r0, r8, #2
   12bd8:	add	r8, r8, #3
   12bdc:	cmp	r0, ip
   12be0:	movcc	r1, #39	; 0x27
   12be4:	strbcc	r1, [r5, r0]
   12be8:	mov	r1, #1
   12bec:	cmp	r8, ip
   12bf0:	mov	r9, #0
   12bf4:	mov	r6, #48	; 0x30
   12bf8:	str	r1, [fp, #-56]	; 0xffffffc8
   12bfc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12c00:	movcc	r0, #92	; 0x5c
   12c04:	strbcc	r0, [r5, r8]
   12c08:	add	r0, r8, #1
   12c0c:	cmp	r1, #2
   12c10:	beq	12f18 <__assert_fail@plt+0x1b44>
   12c14:	add	r1, r7, #1
   12c18:	cmp	r1, r2
   12c1c:	bcs	12f18 <__assert_fail@plt+0x1b44>
   12c20:	ldrb	r1, [r4, r1]
   12c24:	sub	r1, r1, #48	; 0x30
   12c28:	uxtb	r1, r1
   12c2c:	cmp	r1, #9
   12c30:	bhi	12f18 <__assert_fail@plt+0x1b44>
   12c34:	cmp	r0, ip
   12c38:	movcc	r1, #48	; 0x30
   12c3c:	strbcc	r1, [r5, r0]
   12c40:	add	r0, r8, #2
   12c44:	add	r8, r8, #3
   12c48:	cmp	r0, ip
   12c4c:	movcc	r1, #48	; 0x30
   12c50:	strbcc	r1, [r5, r0]
   12c54:	b	12a0c <__assert_fail@plt+0x1638>
   12c58:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c5c:	mov	r6, #63	; 0x3f
   12c60:	cmp	r0, #5
   12c64:	beq	12f20 <__assert_fail@plt+0x1b4c>
   12c68:	mov	r1, #0
   12c6c:	cmp	r0, #2
   12c70:	str	r1, [fp, #-56]	; 0xffffffc8
   12c74:	bne	12fd4 <__assert_fail@plt+0x1c00>
   12c78:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c7c:	mov	r9, #0
   12c80:	b	12b18 <__assert_fail@plt+0x1744>
   12c84:	mov	r0, #118	; 0x76
   12c88:	b	12d9c <__assert_fail@plt+0x19c8>
   12c8c:	mov	r0, #1
   12c90:	mov	r6, #39	; 0x27
   12c94:	str	r0, [sp, #60]	; 0x3c
   12c98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c9c:	cmp	r0, #2
   12ca0:	bne	12d14 <__assert_fail@plt+0x1940>
   12ca4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ca8:	tst	r0, #1
   12cac:	bne	1333c <__assert_fail@plt+0x1f68>
   12cb0:	ldr	r2, [sp, #56]	; 0x38
   12cb4:	clz	r1, ip
   12cb8:	mov	lr, #0
   12cbc:	lsr	r1, r1, #5
   12cc0:	cmp	r2, #0
   12cc4:	mov	r0, r2
   12cc8:	movwne	r0, #1
   12ccc:	orrs	r0, r0, r1
   12cd0:	moveq	r2, ip
   12cd4:	moveq	ip, r0
   12cd8:	cmp	r8, ip
   12cdc:	str	r2, [sp, #56]	; 0x38
   12ce0:	movcc	r0, #39	; 0x27
   12ce4:	strbcc	r0, [r5, r8]
   12ce8:	add	r0, r8, #1
   12cec:	cmp	r0, ip
   12cf0:	movcc	r1, #92	; 0x5c
   12cf4:	strbcc	r1, [r5, r0]
   12cf8:	add	r0, r8, #2
   12cfc:	add	r8, r8, #3
   12d00:	cmp	r0, ip
   12d04:	movcc	r1, #39	; 0x27
   12d08:	strbcc	r1, [r5, r0]
   12d0c:	mov	r0, #0
   12d10:	str	r0, [fp, #-56]	; 0xffffffc8
   12d14:	mov	r9, #1
   12d18:	b	12a0c <__assert_fail@plt+0x1638>
   12d1c:	ldr	r0, [sp, #40]	; 0x28
   12d20:	str	lr, [sp, #44]	; 0x2c
   12d24:	str	ip, [sp, #88]	; 0x58
   12d28:	cmp	r0, #1
   12d2c:	bne	12ddc <__assert_fail@plt+0x1a08>
   12d30:	str	sl, [sp, #36]	; 0x24
   12d34:	bl	1126c <__ctype_b_loc@plt>
   12d38:	ldr	r0, [r0]
   12d3c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12d40:	mov	r1, #1
   12d44:	add	r0, r0, r6, lsl #1
   12d48:	ldrb	r0, [r0, #1]
   12d4c:	ubfx	r9, r0, #6, #1
   12d50:	ldr	r0, [sp, #52]	; 0x34
   12d54:	ldr	lr, [sp, #44]	; 0x2c
   12d58:	cmp	r1, #1
   12d5c:	orr	r3, r9, r0
   12d60:	bhi	12fdc <__assert_fail@plt+0x1c08>
   12d64:	tst	r3, #1
   12d68:	beq	12fdc <__assert_fail@plt+0x1c08>
   12d6c:	ldr	sl, [sp, #36]	; 0x24
   12d70:	ldr	ip, [sp, #88]	; 0x58
   12d74:	b	12a0c <__assert_fail@plt+0x1638>
   12d78:	ldr	r1, [sp, #48]	; 0x30
   12d7c:	mov	r0, #0
   12d80:	str	r0, [fp, #-56]	; 0xffffffc8
   12d84:	mov	r0, #92	; 0x5c
   12d88:	cmp	r1, #0
   12d8c:	beq	12d9c <__assert_fail@plt+0x19c8>
   12d90:	mov	r6, #92	; 0x5c
   12d94:	mov	r9, #0
   12d98:	b	131a0 <__assert_fail@plt+0x1dcc>
   12d9c:	mov	r1, #0
   12da0:	mov	r9, #0
   12da4:	str	r1, [fp, #-56]	; 0xffffffc8
   12da8:	ldr	r1, [sp, #84]	; 0x54
   12dac:	tst	r1, #1
   12db0:	mov	r1, #0
   12db4:	beq	12a0c <__assert_fail@plt+0x1638>
   12db8:	b	12a54 <__assert_fail@plt+0x1680>
   12dbc:	ldr	r0, [sp, #32]
   12dc0:	mov	r6, #0
   12dc4:	mov	r9, #0
   12dc8:	cmp	r0, #0
   12dcc:	mov	r0, #0
   12dd0:	str	r0, [fp, #-56]	; 0xffffffc8
   12dd4:	beq	12a0c <__assert_fail@plt+0x1638>
   12dd8:	b	131f8 <__assert_fail@plt+0x1e24>
   12ddc:	mov	r0, #0
   12de0:	cmn	sl, #1
   12de4:	sub	r3, fp, #40	; 0x28
   12de8:	str	r0, [fp, #-36]	; 0xffffffdc
   12dec:	str	r0, [fp, #-40]	; 0xffffffd8
   12df0:	bne	12e08 <__assert_fail@plt+0x1a34>
   12df4:	mov	r0, r4
   12df8:	bl	1129c <strlen@plt>
   12dfc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12e00:	sub	r3, fp, #40	; 0x28
   12e04:	mov	sl, r0
   12e08:	ldr	r0, [sp, #72]	; 0x48
   12e0c:	mov	r9, #1
   12e10:	mov	r1, #0
   12e14:	str	sl, [sp, #36]	; 0x24
   12e18:	add	r0, r0, r7
   12e1c:	str	r0, [sp, #20]
   12e20:	add	r0, r1, r7
   12e24:	str	r1, [sp, #24]
   12e28:	add	r1, r4, r0
   12e2c:	mov	r4, r0
   12e30:	sub	r2, sl, r0
   12e34:	sub	r0, fp, #44	; 0x2c
   12e38:	bl	15878 <__assert_fail@plt+0x44a4>
   12e3c:	cmp	r0, #0
   12e40:	beq	1324c <__assert_fail@plt+0x1e78>
   12e44:	cmn	r0, #1
   12e48:	beq	13204 <__assert_fail@plt+0x1e30>
   12e4c:	ldr	r2, [sp, #36]	; 0x24
   12e50:	cmn	r0, #2
   12e54:	beq	1320c <__assert_fail@plt+0x1e38>
   12e58:	ldr	r2, [sp, #64]	; 0x40
   12e5c:	ldr	ip, [sp, #88]	; 0x58
   12e60:	ldr	r4, [sp, #84]	; 0x54
   12e64:	ldr	lr, [fp, #-48]	; 0xffffffd0
   12e68:	cmp	r0, #2
   12e6c:	mov	r1, #0
   12e70:	movwcc	r1, #1
   12e74:	eor	r2, r2, #1
   12e78:	orrs	r1, r2, r1
   12e7c:	bne	12ecc <__assert_fail@plt+0x1af8>
   12e80:	ldr	r1, [sp, #24]
   12e84:	ldr	r2, [sp, #20]
   12e88:	add	r1, r2, r1
   12e8c:	sub	r2, r0, #1
   12e90:	ldrb	r3, [r1]
   12e94:	sub	r5, r3, #94	; 0x5e
   12e98:	cmp	r5, #30
   12e9c:	bhi	12eb4 <__assert_fail@plt+0x1ae0>
   12ea0:	mov	r4, #1
   12ea4:	mov	sl, #1073741829	; 0x40000005
   12ea8:	tst	sl, r4, lsl r5
   12eac:	ldr	r4, [sp, #84]	; 0x54
   12eb0:	bne	13314 <__assert_fail@plt+0x1f40>
   12eb4:	sub	r3, r3, #91	; 0x5b
   12eb8:	cmp	r3, #2
   12ebc:	bcc	13314 <__assert_fail@plt+0x1f40>
   12ec0:	add	r1, r1, #1
   12ec4:	subs	r2, r2, #1
   12ec8:	bne	12e90 <__assert_fail@plt+0x1abc>
   12ecc:	ldr	r5, [sp, #24]
   12ed0:	str	lr, [fp, #-48]	; 0xffffffd0
   12ed4:	add	r5, r0, r5
   12ed8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12edc:	bl	111ac <iswprint@plt>
   12ee0:	cmp	r0, #0
   12ee4:	sub	r4, fp, #40	; 0x28
   12ee8:	movwne	r0, #1
   12eec:	and	r9, r9, r0
   12ef0:	mov	r0, r4
   12ef4:	bl	11170 <mbsinit@plt>
   12ef8:	mov	r1, r5
   12efc:	mov	r3, r4
   12f00:	ldr	sl, [sp, #36]	; 0x24
   12f04:	ldr	r5, [fp, #-84]	; 0xffffffac
   12f08:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12f0c:	cmp	r0, #0
   12f10:	beq	12e20 <__assert_fail@plt+0x1a4c>
   12f14:	b	12d50 <__assert_fail@plt+0x197c>
   12f18:	mov	r8, r0
   12f1c:	b	12a0c <__assert_fail@plt+0x1638>
   12f20:	mov	r0, #0
   12f24:	str	r0, [fp, #-56]	; 0xffffffc8
   12f28:	ldr	r0, [sp, #28]
   12f2c:	cmp	r0, #0
   12f30:	beq	12fd4 <__assert_fail@plt+0x1c00>
   12f34:	add	r0, r7, #2
   12f38:	mov	r1, sl
   12f3c:	cmp	r0, sl
   12f40:	bcs	12fd4 <__assert_fail@plt+0x1c00>
   12f44:	add	r1, r7, r4
   12f48:	ldrb	r1, [r1, #1]
   12f4c:	cmp	r1, #63	; 0x3f
   12f50:	bne	12fd4 <__assert_fail@plt+0x1c00>
   12f54:	ldrb	r9, [r4, r0]
   12f58:	sub	r2, r9, #33	; 0x21
   12f5c:	cmp	r2, #29
   12f60:	bhi	12fd4 <__assert_fail@plt+0x1c00>
   12f64:	mov	r1, r4
   12f68:	movw	r4, #20929	; 0x51c1
   12f6c:	mov	r3, #1
   12f70:	movt	r4, #14336	; 0x3800
   12f74:	tst	r4, r3, lsl r2
   12f78:	beq	13260 <__assert_fail@plt+0x1e8c>
   12f7c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f80:	tst	r2, #1
   12f84:	bne	13430 <__assert_fail@plt+0x205c>
   12f88:	cmp	r8, ip
   12f8c:	mov	r4, r1
   12f90:	mov	r7, r0
   12f94:	mov	r6, r9
   12f98:	movcc	r2, #63	; 0x3f
   12f9c:	strbcc	r2, [r5, r8]
   12fa0:	add	r2, r8, #1
   12fa4:	cmp	r2, ip
   12fa8:	movcc	r3, #34	; 0x22
   12fac:	strbcc	r3, [r5, r2]
   12fb0:	add	r2, r8, #2
   12fb4:	cmp	r2, ip
   12fb8:	movcc	r3, #34	; 0x22
   12fbc:	strbcc	r3, [r5, r2]
   12fc0:	add	r2, r8, #3
   12fc4:	add	r8, r8, #4
   12fc8:	cmp	r2, ip
   12fcc:	movcc	r3, #63	; 0x3f
   12fd0:	strbcc	r3, [r5, r2]
   12fd4:	mov	r9, #0
   12fd8:	b	12a0c <__assert_fail@plt+0x1638>
   12fdc:	ldr	sl, [sp, #36]	; 0x24
   12fe0:	add	r0, r1, r7
   12fe4:	mov	r2, #0
   12fe8:	str	r3, [sp, #24]
   12fec:	str	r0, [fp, #-56]	; 0xffffffc8
   12ff0:	tst	r3, #1
   12ff4:	beq	13020 <__assert_fail@plt+0x1c4c>
   12ff8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12ffc:	tst	r0, #1
   13000:	beq	130e8 <__assert_fail@plt+0x1d14>
   13004:	ldr	r1, [sp, #88]	; 0x58
   13008:	mov	r0, r3
   1300c:	cmp	r8, r1
   13010:	movcc	r1, #92	; 0x5c
   13014:	strbcc	r1, [r5, r8]
   13018:	add	r8, r8, #1
   1301c:	b	130ec <__assert_fail@plt+0x1d18>
   13020:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13024:	tst	r1, #1
   13028:	bne	13338 <__assert_fail@plt+0x1f64>
   1302c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13030:	subs	r2, r1, #2
   13034:	movwne	r2, #1
   13038:	orr	r2, r2, lr
   1303c:	tst	r2, #1
   13040:	bne	13084 <__assert_fail@plt+0x1cb0>
   13044:	ldr	r1, [sp, #88]	; 0x58
   13048:	add	r2, r8, #1
   1304c:	mov	lr, #1
   13050:	cmp	r8, r1
   13054:	movcc	r1, #39	; 0x27
   13058:	strbcc	r1, [r5, r8]
   1305c:	ldr	r1, [sp, #88]	; 0x58
   13060:	cmp	r2, r1
   13064:	movcc	r1, #36	; 0x24
   13068:	strbcc	r1, [r5, r2]
   1306c:	ldr	r1, [sp, #88]	; 0x58
   13070:	add	r2, r8, #2
   13074:	add	r8, r8, #3
   13078:	cmp	r2, r1
   1307c:	movcc	r1, #39	; 0x27
   13080:	strbcc	r1, [r5, r2]
   13084:	ldr	r1, [sp, #88]	; 0x58
   13088:	add	r2, r8, #1
   1308c:	mov	r0, r3
   13090:	cmp	r8, r1
   13094:	movcc	r1, #92	; 0x5c
   13098:	strbcc	r1, [r5, r8]
   1309c:	ldr	r1, [sp, #88]	; 0x58
   130a0:	cmp	r2, r1
   130a4:	bcs	130b8 <__assert_fail@plt+0x1ce4>
   130a8:	uxtb	r3, r6
   130ac:	mov	r1, #48	; 0x30
   130b0:	orr	r3, r1, r3, lsr #6
   130b4:	strb	r3, [r5, r2]
   130b8:	ldr	r1, [sp, #88]	; 0x58
   130bc:	add	r2, r8, #2
   130c0:	add	r8, r8, #3
   130c4:	cmp	r2, r1
   130c8:	lsrcc	r3, r6, #3
   130cc:	movcc	r1, #6
   130d0:	bficc	r3, r1, #3, #29
   130d4:	mov	r1, #6
   130d8:	bfi	r6, r1, #3, #29
   130dc:	strbcc	r3, [r5, r2]
   130e0:	mov	r2, #1
   130e4:	b	130f4 <__assert_fail@plt+0x1d20>
   130e8:	mov	r0, r3
   130ec:	mov	r1, #0
   130f0:	str	r1, [fp, #-52]	; 0xffffffcc
   130f4:	mov	ip, r2
   130f8:	and	r1, r2, #1
   130fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13100:	add	r3, r7, #1
   13104:	cmp	r2, r3
   13108:	bls	13190 <__assert_fail@plt+0x1dbc>
   1310c:	cmp	r1, #0
   13110:	mvn	r5, lr
   13114:	movwne	r1, #1
   13118:	orr	r5, r5, r1
   1311c:	tst	r5, #1
   13120:	bne	13164 <__assert_fail@plt+0x1d90>
   13124:	ldr	r1, [sp, #88]	; 0x58
   13128:	ldr	r5, [fp, #-84]	; 0xffffffac
   1312c:	mov	r2, r4
   13130:	ldr	r4, [sp, #88]	; 0x58
   13134:	ldr	r0, [sp, #24]
   13138:	mov	lr, #0
   1313c:	cmp	r8, r1
   13140:	movcc	r1, #39	; 0x27
   13144:	strbcc	r1, [r5, r8]
   13148:	add	r1, r8, #1
   1314c:	add	r8, r8, #2
   13150:	cmp	r1, r4
   13154:	movcc	r4, #39	; 0x27
   13158:	strbcc	r4, [r5, r1]
   1315c:	mov	r4, r2
   13160:	b	13168 <__assert_fail@plt+0x1d94>
   13164:	ldr	r5, [fp, #-84]	; 0xffffffac
   13168:	ldr	r1, [sp, #88]	; 0x58
   1316c:	mov	r2, ip
   13170:	cmp	r8, r1
   13174:	ldr	r1, [sp, #72]	; 0x48
   13178:	strbcc	r6, [r5, r8]
   1317c:	add	r8, r8, #1
   13180:	ldrb	r6, [r1, r7]
   13184:	mov	r7, r3
   13188:	mov	r3, r0
   1318c:	b	12ff0 <__assert_fail@plt+0x1c1c>
   13190:	ldr	ip, [sp, #88]	; 0x58
   13194:	cmp	r1, #0
   13198:	movwne	r1, #1
   1319c:	str	r1, [fp, #-56]	; 0xffffffc8
   131a0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   131a4:	cmp	r0, #0
   131a8:	bne	131d8 <__assert_fail@plt+0x1e04>
   131ac:	tst	lr, #1
   131b0:	beq	131d8 <__assert_fail@plt+0x1e04>
   131b4:	cmp	r8, ip
   131b8:	mov	lr, #0
   131bc:	movcc	r0, #39	; 0x27
   131c0:	strbcc	r0, [r5, r8]
   131c4:	add	r0, r8, #1
   131c8:	add	r8, r8, #2
   131cc:	cmp	r0, ip
   131d0:	movcc	r1, #39	; 0x27
   131d4:	strbcc	r1, [r5, r0]
   131d8:	mov	r1, r9
   131dc:	mov	r0, r6
   131e0:	cmp	r8, ip
   131e4:	strbcc	r0, [r5, r8]
   131e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   131ec:	add	r8, r8, #1
   131f0:	and	r0, r0, r1
   131f4:	str	r0, [fp, #-48]	; 0xffffffd0
   131f8:	mov	r3, sl
   131fc:	add	r7, r7, #1
   13200:	b	126f0 <__assert_fail@plt+0x131c>
   13204:	mov	r9, #0
   13208:	b	1324c <__assert_fail@plt+0x1e78>
   1320c:	mov	r9, #0
   13210:	cmp	r2, r4
   13214:	bls	1324c <__assert_fail@plt+0x1e78>
   13218:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1321c:	ldr	r1, [sp, #24]
   13220:	add	r0, r4, r7
   13224:	mov	r3, r1
   13228:	ldrb	r1, [r0, r1]
   1322c:	cmp	r1, #0
   13230:	beq	13258 <__assert_fail@plt+0x1e84>
   13234:	add	r3, r3, #1
   13238:	add	r1, r7, r3
   1323c:	cmp	r1, r2
   13240:	mov	r1, r3
   13244:	bcc	13224 <__assert_fail@plt+0x1e50>
   13248:	b	12d50 <__assert_fail@plt+0x197c>
   1324c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13250:	ldr	r1, [sp, #24]
   13254:	b	12d50 <__assert_fail@plt+0x197c>
   13258:	mov	r1, r3
   1325c:	b	12d50 <__assert_fail@plt+0x197c>
   13260:	mov	r9, #0
   13264:	mov	r4, r1
   13268:	b	12a0c <__assert_fail@plt+0x1638>
   1326c:	mov	sl, r7
   13270:	b	13278 <__assert_fail@plt+0x1ea4>
   13274:	mvn	sl, #0
   13278:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1327c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13280:	eor	r0, r1, #2
   13284:	orr	r0, r0, r8
   13288:	clz	r0, r0
   1328c:	lsr	r0, r0, #5
   13290:	tst	r2, r0
   13294:	bne	1333c <__assert_fail@plt+0x1f68>
   13298:	subs	r0, r1, #2
   1329c:	movwne	r0, #1
   132a0:	orr	r0, r2, r0
   132a4:	tst	r0, #1
   132a8:	ldreq	r0, [sp, #60]	; 0x3c
   132ac:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   132b0:	eoreq	r0, r0, #1
   132b4:	tsteq	r0, #1
   132b8:	bne	133d0 <__assert_fail@plt+0x1ffc>
   132bc:	tst	r1, #1
   132c0:	bne	1339c <__assert_fail@plt+0x1fc8>
   132c4:	ldr	r6, [sp, #56]	; 0x38
   132c8:	mov	r9, #0
   132cc:	cmp	r6, #0
   132d0:	beq	133c8 <__assert_fail@plt+0x1ff4>
   132d4:	ldr	r0, [sp, #84]	; 0x54
   132d8:	mov	r1, #0
   132dc:	mov	r7, #2
   132e0:	cmp	ip, #0
   132e4:	str	r1, [fp, #-48]	; 0xffffffd0
   132e8:	mov	r1, #0
   132ec:	str	r1, [fp, #-76]	; 0xffffffb4
   132f0:	beq	12458 <__assert_fail@plt+0x1084>
   132f4:	b	133d0 <__assert_fail@plt+0x1ffc>
   132f8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   132fc:	ldr	r1, [fp, #12]
   13300:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13304:	mov	r5, r3
   13308:	mov	ip, r6
   1330c:	mov	r3, sl
   13310:	b	13360 <__assert_fail@plt+0x1f8c>
   13314:	tst	r4, #1
   13318:	ldr	r5, [fp, #-84]	; 0xffffffac
   1331c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13320:	ldr	r1, [fp, #12]
   13324:	ldr	r3, [sp, #36]	; 0x24
   13328:	mov	r0, #2
   1332c:	movwne	r0, #4
   13330:	mov	r2, r0
   13334:	b	13360 <__assert_fail@plt+0x1f8c>
   13338:	ldr	ip, [sp, #88]	; 0x58
   1333c:	ldr	r1, [sp, #84]	; 0x54
   13340:	mov	r0, #2
   13344:	tst	r1, #1
   13348:	movwne	r0, #4
   1334c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13350:	ldr	r1, [fp, #12]
   13354:	mov	r3, sl
   13358:	cmp	r2, #2
   1335c:	moveq	r2, r0
   13360:	mov	r0, #0
   13364:	bic	r1, r1, #2
   13368:	str	r2, [sp]
   1336c:	mov	r2, r4
   13370:	str	r0, [sp, #8]
   13374:	ldr	r0, [sp, #76]	; 0x4c
   13378:	str	r1, [sp, #4]
   1337c:	mov	r1, ip
   13380:	str	r0, [sp, #12]
   13384:	ldr	r0, [sp, #80]	; 0x50
   13388:	str	r0, [sp, #16]
   1338c:	mov	r0, r5
   13390:	bl	123cc <__assert_fail@plt+0xff8>
   13394:	mov	r8, r0
   13398:	b	1341c <__assert_fail@plt+0x2048>
   1339c:	mov	r0, #5
   133a0:	ldr	r1, [sp, #56]	; 0x38
   133a4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   133a8:	mov	r3, sl
   133ac:	str	r0, [sp]
   133b0:	ldr	r0, [fp, #12]
   133b4:	str	r0, [sp, #4]
   133b8:	ldr	r0, [fp, #16]
   133bc:	str	r0, [sp, #8]
   133c0:	ldr	r0, [sp, #76]	; 0x4c
   133c4:	b	13380 <__assert_fail@plt+0x1fac>
   133c8:	mov	r0, #0
   133cc:	str	r0, [fp, #-76]	; 0xffffffb4
   133d0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   133d4:	cmp	r1, #0
   133d8:	beq	13410 <__assert_fail@plt+0x203c>
   133dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   133e0:	tst	r0, #1
   133e4:	bne	13410 <__assert_fail@plt+0x203c>
   133e8:	ldrb	r0, [r1]
   133ec:	cmp	r0, #0
   133f0:	beq	13410 <__assert_fail@plt+0x203c>
   133f4:	add	r1, r1, #1
   133f8:	cmp	r8, ip
   133fc:	strbcc	r0, [r5, r8]
   13400:	add	r8, r8, #1
   13404:	ldrb	r0, [r1], #1
   13408:	cmp	r0, #0
   1340c:	bne	133f8 <__assert_fail@plt+0x2024>
   13410:	cmp	r8, ip
   13414:	movcc	r0, #0
   13418:	strbcc	r0, [r5, r8]
   1341c:	mov	r0, r8
   13420:	sub	sp, fp, #28
   13424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13428:	mov	r0, #4
   1342c:	b	1334c <__assert_fail@plt+0x1f78>
   13430:	mov	r4, r1
   13434:	b	1333c <__assert_fail@plt+0x1f68>
   13438:	bl	113b0 <abort@plt>
   1343c:	mov	r3, r2
   13440:	mov	r2, #0
   13444:	b	13448 <__assert_fail@plt+0x2074>
   13448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1344c:	add	fp, sp, #28
   13450:	sub	sp, sp, #36	; 0x24
   13454:	movw	r8, #29072	; 0x7190
   13458:	cmp	r3, #0
   1345c:	mov	r4, r2
   13460:	str	r2, [sp, #24]
   13464:	mov	r5, r1
   13468:	mov	r6, r0
   1346c:	str	r0, [sp, #20]
   13470:	movt	r8, #2
   13474:	movne	r8, r3
   13478:	bl	112b4 <__errno_location@plt>
   1347c:	str	r0, [sp, #28]
   13480:	ldr	r1, [r8, #40]	; 0x28
   13484:	ldr	r2, [r8, #44]	; 0x2c
   13488:	ldr	r7, [r0]
   1348c:	cmp	r4, #0
   13490:	add	sl, r8, #8
   13494:	mov	r0, #0
   13498:	ldm	r8, {r3, r9}
   1349c:	orreq	r9, r9, #1
   134a0:	stm	sp, {r3, r9, sl}
   134a4:	str	r1, [sp, #12]
   134a8:	str	r2, [sp, #16]
   134ac:	mov	r1, #0
   134b0:	mov	r2, r6
   134b4:	mov	r3, r5
   134b8:	str	r7, [sp, #32]
   134bc:	mov	r7, r5
   134c0:	bl	123cc <__assert_fail@plt+0xff8>
   134c4:	add	r4, r0, #1
   134c8:	mov	r5, r0
   134cc:	mov	r0, r4
   134d0:	bl	14558 <__assert_fail@plt+0x3184>
   134d4:	mov	r6, r0
   134d8:	ldr	r0, [r8]
   134dc:	ldr	r2, [r8, #44]	; 0x2c
   134e0:	ldr	r1, [r8, #40]	; 0x28
   134e4:	mov	r3, r7
   134e8:	stm	sp, {r0, r9, sl}
   134ec:	str	r2, [sp, #16]
   134f0:	ldr	r2, [sp, #20]
   134f4:	str	r1, [sp, #12]
   134f8:	mov	r0, r6
   134fc:	mov	r1, r4
   13500:	bl	123cc <__assert_fail@plt+0xff8>
   13504:	ldr	r0, [sp, #24]
   13508:	ldr	r1, [sp, #32]
   1350c:	ldr	r2, [sp, #28]
   13510:	cmp	r0, #0
   13514:	str	r1, [r2]
   13518:	strne	r5, [r0]
   1351c:	mov	r0, r6
   13520:	sub	sp, fp, #28
   13524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13528:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1352c:	add	fp, sp, #24
   13530:	movw	r5, #28964	; 0x7124
   13534:	movw	r8, #28960	; 0x7120
   13538:	movt	r5, #2
   1353c:	movt	r8, #2
   13540:	ldr	r0, [r5]
   13544:	ldr	r4, [r8]
   13548:	cmp	r0, #2
   1354c:	blt	13578 <__assert_fail@plt+0x21a4>
   13550:	add	r7, r4, #12
   13554:	mov	r6, #0
   13558:	ldr	r0, [r7, r6, lsl #3]
   1355c:	bl	12170 <__assert_fail@plt+0xd9c>
   13560:	ldr	r1, [r5]
   13564:	add	r2, r6, #2
   13568:	add	r0, r6, #1
   1356c:	mov	r6, r0
   13570:	cmp	r2, r1
   13574:	blt	13558 <__assert_fail@plt+0x2184>
   13578:	ldr	r0, [r4, #4]
   1357c:	movw	r9, #29120	; 0x71c0
   13580:	movw	r7, #28968	; 0x7128
   13584:	movt	r9, #2
   13588:	movt	r7, #2
   1358c:	cmp	r0, r9
   13590:	beq	135a0 <__assert_fail@plt+0x21cc>
   13594:	bl	12170 <__assert_fail@plt+0xd9c>
   13598:	mov	r0, #256	; 0x100
   1359c:	stm	r7, {r0, r9}
   135a0:	cmp	r4, r7
   135a4:	beq	135b4 <__assert_fail@plt+0x21e0>
   135a8:	mov	r0, r4
   135ac:	bl	12170 <__assert_fail@plt+0xd9c>
   135b0:	str	r7, [r8]
   135b4:	mov	r0, #1
   135b8:	str	r0, [r5]
   135bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135c0:	movw	r3, #29072	; 0x7190
   135c4:	mvn	r2, #0
   135c8:	movt	r3, #2
   135cc:	b	135d0 <__assert_fail@plt+0x21fc>
   135d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135d4:	add	fp, sp, #28
   135d8:	sub	sp, sp, #44	; 0x2c
   135dc:	mov	r7, r3
   135e0:	str	r2, [sp, #36]	; 0x24
   135e4:	str	r1, [sp, #32]
   135e8:	mov	r5, r0
   135ec:	bl	112b4 <__errno_location@plt>
   135f0:	cmp	r5, #0
   135f4:	bmi	13764 <__assert_fail@plt+0x2390>
   135f8:	cmn	r5, #-2147483647	; 0x80000001
   135fc:	beq	13764 <__assert_fail@plt+0x2390>
   13600:	movw	r8, #28964	; 0x7124
   13604:	movw	r4, #28960	; 0x7120
   13608:	str	r0, [sp, #28]
   1360c:	ldr	r0, [r0]
   13610:	movt	r8, #2
   13614:	movt	r4, #2
   13618:	ldr	r1, [r8]
   1361c:	ldr	r6, [r4]
   13620:	str	r0, [sp, #24]
   13624:	cmp	r1, r5
   13628:	ble	13634 <__assert_fail@plt+0x2260>
   1362c:	mov	sl, r6
   13630:	b	136a0 <__assert_fail@plt+0x22cc>
   13634:	movw	r9, #28968	; 0x7128
   13638:	mov	r0, #8
   1363c:	str	r1, [fp, #-32]	; 0xffffffe0
   13640:	sub	r1, r5, r1
   13644:	mvn	r3, #-2147483648	; 0x80000000
   13648:	movt	r9, #2
   1364c:	str	r0, [sp]
   13650:	add	r2, r1, #1
   13654:	sub	r1, fp, #32
   13658:	subs	r0, r6, r9
   1365c:	movne	r0, r6
   13660:	bl	14688 <__assert_fail@plt+0x32b4>
   13664:	mov	sl, r0
   13668:	cmp	r6, r9
   1366c:	str	r0, [r4]
   13670:	bne	1367c <__assert_fail@plt+0x22a8>
   13674:	ldrd	r0, [r9]
   13678:	stm	sl, {r0, r1}
   1367c:	ldr	r1, [r8]
   13680:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13684:	add	r0, sl, r1, lsl #3
   13688:	sub	r1, r2, r1
   1368c:	lsl	r2, r1, #3
   13690:	mov	r1, #0
   13694:	bl	112d8 <memset@plt>
   13698:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1369c:	str	r0, [r8]
   136a0:	mov	r9, sl
   136a4:	ldm	r7, {r0, r1}
   136a8:	orr	r8, r1, #1
   136ac:	add	r1, r7, #8
   136b0:	ldr	r2, [r7, #40]	; 0x28
   136b4:	ldr	r3, [r7, #44]	; 0x2c
   136b8:	ldr	r6, [r9, r5, lsl #3]!
   136bc:	str	r1, [sp, #20]
   136c0:	ldr	r4, [r9, #4]!
   136c4:	stm	sp, {r0, r8}
   136c8:	add	r0, sp, #8
   136cc:	stm	r0, {r1, r2, r3}
   136d0:	ldr	r2, [sp, #32]
   136d4:	ldr	r3, [sp, #36]	; 0x24
   136d8:	mov	r1, r6
   136dc:	mov	r0, r4
   136e0:	bl	123cc <__assert_fail@plt+0xff8>
   136e4:	cmp	r6, r0
   136e8:	bhi	1374c <__assert_fail@plt+0x2378>
   136ec:	add	r6, r0, #1
   136f0:	movw	r0, #29120	; 0x71c0
   136f4:	movt	r0, #2
   136f8:	str	r6, [sl, r5, lsl #3]
   136fc:	cmp	r4, r0
   13700:	beq	1370c <__assert_fail@plt+0x2338>
   13704:	mov	r0, r4
   13708:	bl	12170 <__assert_fail@plt+0xd9c>
   1370c:	mov	r0, r6
   13710:	bl	14558 <__assert_fail@plt+0x3184>
   13714:	str	r0, [r9]
   13718:	mov	r4, r0
   1371c:	add	r3, sp, #8
   13720:	ldr	r0, [r7]
   13724:	ldr	r1, [r7, #40]	; 0x28
   13728:	ldr	r2, [r7, #44]	; 0x2c
   1372c:	stm	sp, {r0, r8}
   13730:	ldr	r0, [sp, #20]
   13734:	stm	r3, {r0, r1, r2}
   13738:	ldr	r2, [sp, #32]
   1373c:	ldr	r3, [sp, #36]	; 0x24
   13740:	mov	r0, r4
   13744:	mov	r1, r6
   13748:	bl	123cc <__assert_fail@plt+0xff8>
   1374c:	ldr	r0, [sp, #28]
   13750:	ldr	r1, [sp, #24]
   13754:	str	r1, [r0]
   13758:	mov	r0, r4
   1375c:	sub	sp, fp, #28
   13760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13764:	bl	113b0 <abort@plt>
   13768:	movw	r3, #29072	; 0x7190
   1376c:	movt	r3, #2
   13770:	b	135d0 <__assert_fail@plt+0x21fc>
   13774:	movw	r3, #29072	; 0x7190
   13778:	mov	r1, r0
   1377c:	mov	r0, #0
   13780:	mvn	r2, #0
   13784:	movt	r3, #2
   13788:	b	135d0 <__assert_fail@plt+0x21fc>
   1378c:	movw	r3, #29072	; 0x7190
   13790:	mov	r2, r1
   13794:	mov	r1, r0
   13798:	mov	r0, #0
   1379c:	movt	r3, #2
   137a0:	b	135d0 <__assert_fail@plt+0x21fc>
   137a4:	push	{fp, lr}
   137a8:	mov	fp, sp
   137ac:	sub	sp, sp, #48	; 0x30
   137b0:	vmov.i32	q8, #0	; 0x00000000
   137b4:	mov	ip, #32
   137b8:	mov	r3, sp
   137bc:	mov	lr, r2
   137c0:	cmp	r1, #10
   137c4:	add	r2, r3, #16
   137c8:	vst1.64	{d16-d17}, [r3], ip
   137cc:	vst1.64	{d16-d17}, [r2]
   137d0:	vst1.64	{d16-d17}, [r3]
   137d4:	beq	137f4 <__assert_fail@plt+0x2420>
   137d8:	str	r1, [sp]
   137dc:	mov	r3, sp
   137e0:	mov	r1, lr
   137e4:	mvn	r2, #0
   137e8:	bl	135d0 <__assert_fail@plt+0x21fc>
   137ec:	mov	sp, fp
   137f0:	pop	{fp, pc}
   137f4:	bl	113b0 <abort@plt>
   137f8:	push	{r4, sl, fp, lr}
   137fc:	add	fp, sp, #8
   13800:	sub	sp, sp, #48	; 0x30
   13804:	vmov.i32	q8, #0	; 0x00000000
   13808:	mov	ip, r3
   1380c:	mov	r3, sp
   13810:	mov	lr, #32
   13814:	cmp	r1, #10
   13818:	add	r4, r3, #16
   1381c:	vst1.64	{d16-d17}, [r3], lr
   13820:	vst1.64	{d16-d17}, [r4]
   13824:	vst1.64	{d16-d17}, [r3]
   13828:	beq	13848 <__assert_fail@plt+0x2474>
   1382c:	str	r1, [sp]
   13830:	mov	r1, r2
   13834:	mov	r3, sp
   13838:	mov	r2, ip
   1383c:	bl	135d0 <__assert_fail@plt+0x21fc>
   13840:	sub	sp, fp, #8
   13844:	pop	{r4, sl, fp, pc}
   13848:	bl	113b0 <abort@plt>
   1384c:	mov	r2, r1
   13850:	mov	r1, r0
   13854:	mov	r0, #0
   13858:	b	137a4 <__assert_fail@plt+0x23d0>
   1385c:	mov	r3, r2
   13860:	mov	r2, r1
   13864:	mov	r1, r0
   13868:	mov	r0, #0
   1386c:	b	137f8 <__assert_fail@plt+0x2424>
   13870:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13874:	add	fp, sp, #24
   13878:	sub	sp, sp, #48	; 0x30
   1387c:	movw	r8, #29072	; 0x7190
   13880:	mov	lr, r0
   13884:	mov	r3, sp
   13888:	mov	ip, r1
   1388c:	movt	r8, #2
   13890:	mov	r1, r3
   13894:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13898:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   1389c:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   138a0:	stm	r1, {r0, r4, r5, r6, r7, r9}
   138a4:	ubfx	r0, r2, #5, #3
   138a8:	and	r2, r2, #31
   138ac:	mov	r4, #1
   138b0:	add	r0, r3, r0, lsl #2
   138b4:	ldr	r1, [r0, #8]
   138b8:	bic	r4, r4, r1, lsr r2
   138bc:	eor	r1, r1, r4, lsl r2
   138c0:	mov	r2, ip
   138c4:	str	r1, [r0, #8]
   138c8:	mov	r0, #0
   138cc:	mov	r1, lr
   138d0:	bl	135d0 <__assert_fail@plt+0x21fc>
   138d4:	sub	sp, fp, #24
   138d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   138dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138e0:	add	fp, sp, #24
   138e4:	sub	sp, sp, #48	; 0x30
   138e8:	movw	lr, #29072	; 0x7190
   138ec:	mov	ip, r0
   138f0:	mov	r3, sp
   138f4:	movt	lr, #2
   138f8:	mov	r2, r3
   138fc:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13900:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13904:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13908:	stm	r2, {r0, r4, r5, r6, r7, r8}
   1390c:	ubfx	r0, r1, #5, #3
   13910:	and	r1, r1, #31
   13914:	mov	r7, #1
   13918:	add	r0, r3, r0, lsl #2
   1391c:	ldr	r2, [r0, #8]
   13920:	bic	r7, r7, r2, lsr r1
   13924:	eor	r1, r2, r7, lsl r1
   13928:	mvn	r2, #0
   1392c:	str	r1, [r0, #8]
   13930:	mov	r0, #0
   13934:	mov	r1, ip
   13938:	bl	135d0 <__assert_fail@plt+0x21fc>
   1393c:	sub	sp, fp, #24
   13940:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13944:	push	{r4, r5, r6, r7, fp, lr}
   13948:	add	fp, sp, #16
   1394c:	sub	sp, sp, #48	; 0x30
   13950:	movw	lr, #29072	; 0x7190
   13954:	mov	ip, r0
   13958:	mov	r3, sp
   1395c:	movt	lr, #2
   13960:	mov	r2, r3
   13964:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13968:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1396c:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13970:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13974:	mov	r1, ip
   13978:	mvn	r2, #0
   1397c:	ldr	r0, [sp, #12]
   13980:	orr	r0, r0, #67108864	; 0x4000000
   13984:	str	r0, [sp, #12]
   13988:	mov	r0, #0
   1398c:	bl	135d0 <__assert_fail@plt+0x21fc>
   13990:	sub	sp, fp, #16
   13994:	pop	{r4, r5, r6, r7, fp, pc}
   13998:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1399c:	add	fp, sp, #24
   139a0:	sub	sp, sp, #48	; 0x30
   139a4:	movw	r8, #29072	; 0x7190
   139a8:	mov	ip, r1
   139ac:	mov	lr, r0
   139b0:	mov	r3, sp
   139b4:	movt	r8, #2
   139b8:	mov	r2, r3
   139bc:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   139c0:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   139c4:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   139c8:	stm	r2, {r0, r1, r4, r5, r6, r7}
   139cc:	mov	r1, lr
   139d0:	mov	r2, ip
   139d4:	ldr	r0, [sp, #12]
   139d8:	orr	r0, r0, #67108864	; 0x4000000
   139dc:	str	r0, [sp, #12]
   139e0:	mov	r0, #0
   139e4:	bl	135d0 <__assert_fail@plt+0x21fc>
   139e8:	sub	sp, fp, #24
   139ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   139f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139f4:	add	fp, sp, #24
   139f8:	sub	sp, sp, #96	; 0x60
   139fc:	vmov.i32	q8, #0	; 0x00000000
   13a00:	mov	lr, sp
   13a04:	mov	ip, r2
   13a08:	cmp	r1, #10
   13a0c:	add	r3, lr, #16
   13a10:	mov	r2, lr
   13a14:	vst1.64	{d16-d17}, [r3]
   13a18:	mov	r3, #28
   13a1c:	vst1.64	{d16-d17}, [r2], r3
   13a20:	vst1.32	{d16-d17}, [r2]
   13a24:	beq	13a64 <__assert_fail@plt+0x2690>
   13a28:	str	r1, [sp, #48]	; 0x30
   13a2c:	add	r3, sp, #48	; 0x30
   13a30:	ldm	lr!, {r2, r4, r5, r6, r7}
   13a34:	add	r1, r3, #4
   13a38:	stmia	r1!, {r2, r4, r5, r6, r7}
   13a3c:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13a40:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13a44:	mvn	r2, #0
   13a48:	ldr	r1, [sp, #60]	; 0x3c
   13a4c:	orr	r1, r1, #67108864	; 0x4000000
   13a50:	str	r1, [sp, #60]	; 0x3c
   13a54:	mov	r1, ip
   13a58:	bl	135d0 <__assert_fail@plt+0x21fc>
   13a5c:	sub	sp, fp, #24
   13a60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a64:	bl	113b0 <abort@plt>
   13a68:	push	{fp, lr}
   13a6c:	mov	fp, sp
   13a70:	sub	sp, sp, #8
   13a74:	mvn	ip, #0
   13a78:	str	ip, [sp]
   13a7c:	bl	13a88 <__assert_fail@plt+0x26b4>
   13a80:	mov	sp, fp
   13a84:	pop	{fp, pc}
   13a88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a8c:	add	fp, sp, #24
   13a90:	sub	sp, sp, #48	; 0x30
   13a94:	movw	ip, #29072	; 0x7190
   13a98:	mov	lr, r3
   13a9c:	mov	r3, sp
   13aa0:	cmp	r1, #0
   13aa4:	movt	ip, #2
   13aa8:	cmpne	r2, #0
   13aac:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13ab0:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13ab4:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13ab8:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13abc:	mov	r3, #10
   13ac0:	str	r3, [sp]
   13ac4:	bne	13acc <__assert_fail@plt+0x26f8>
   13ac8:	bl	113b0 <abort@plt>
   13acc:	ldr	ip, [fp, #8]
   13ad0:	str	r2, [sp, #44]	; 0x2c
   13ad4:	str	r1, [sp, #40]	; 0x28
   13ad8:	mov	r3, sp
   13adc:	mov	r1, lr
   13ae0:	mov	r2, ip
   13ae4:	bl	135d0 <__assert_fail@plt+0x21fc>
   13ae8:	sub	sp, fp, #24
   13aec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13af0:	push	{fp, lr}
   13af4:	mov	fp, sp
   13af8:	sub	sp, sp, #8
   13afc:	mov	r3, r2
   13b00:	mov	r2, r1
   13b04:	mov	r1, r0
   13b08:	mvn	r0, #0
   13b0c:	str	r0, [sp]
   13b10:	mov	r0, #0
   13b14:	bl	13a88 <__assert_fail@plt+0x26b4>
   13b18:	mov	sp, fp
   13b1c:	pop	{fp, pc}
   13b20:	push	{fp, lr}
   13b24:	mov	fp, sp
   13b28:	sub	sp, sp, #8
   13b2c:	mov	ip, r2
   13b30:	mov	r2, r1
   13b34:	mov	r1, r0
   13b38:	str	r3, [sp]
   13b3c:	mov	r0, #0
   13b40:	mov	r3, ip
   13b44:	bl	13a88 <__assert_fail@plt+0x26b4>
   13b48:	mov	sp, fp
   13b4c:	pop	{fp, pc}
   13b50:	movw	r3, #28976	; 0x7130
   13b54:	movt	r3, #2
   13b58:	b	135d0 <__assert_fail@plt+0x21fc>
   13b5c:	movw	r3, #28976	; 0x7130
   13b60:	mov	r2, r1
   13b64:	mov	r1, r0
   13b68:	mov	r0, #0
   13b6c:	movt	r3, #2
   13b70:	b	135d0 <__assert_fail@plt+0x21fc>
   13b74:	movw	r3, #28976	; 0x7130
   13b78:	mvn	r2, #0
   13b7c:	movt	r3, #2
   13b80:	b	135d0 <__assert_fail@plt+0x21fc>
   13b84:	movw	r3, #28976	; 0x7130
   13b88:	mov	r1, r0
   13b8c:	mov	r0, #0
   13b90:	mvn	r2, #0
   13b94:	movt	r3, #2
   13b98:	b	135d0 <__assert_fail@plt+0x21fc>
   13b9c:	push	{r4, r5, fp, lr}
   13ba0:	add	fp, sp, #8
   13ba4:	mov	r5, r0
   13ba8:	mov	r4, r1
   13bac:	mov	r0, #0
   13bb0:	mov	r2, #5
   13bb4:	mov	r1, r5
   13bb8:	bl	1117c <dcgettext@plt>
   13bbc:	cmp	r0, r5
   13bc0:	popne	{r4, r5, fp, pc}
   13bc4:	bl	15840 <__assert_fail@plt+0x446c>
   13bc8:	ldrb	r1, [r0]
   13bcc:	and	r1, r1, #223	; 0xdf
   13bd0:	cmp	r1, #71	; 0x47
   13bd4:	beq	13c3c <__assert_fail@plt+0x2868>
   13bd8:	cmp	r1, #85	; 0x55
   13bdc:	bne	13c94 <__assert_fail@plt+0x28c0>
   13be0:	ldrb	r1, [r0, #1]
   13be4:	and	r1, r1, #223	; 0xdf
   13be8:	cmp	r1, #84	; 0x54
   13bec:	bne	13c94 <__assert_fail@plt+0x28c0>
   13bf0:	ldrb	r1, [r0, #2]
   13bf4:	and	r1, r1, #223	; 0xdf
   13bf8:	cmp	r1, #70	; 0x46
   13bfc:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c00:	ldrb	r1, [r0, #3]
   13c04:	cmp	r1, #45	; 0x2d
   13c08:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c0c:	ldrb	r1, [r0, #4]
   13c10:	cmp	r1, #56	; 0x38
   13c14:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c18:	ldrb	r0, [r0, #5]
   13c1c:	cmp	r0, #0
   13c20:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c24:	ldrb	r1, [r5]
   13c28:	movw	r2, #25752	; 0x6498
   13c2c:	movw	r0, #25756	; 0x649c
   13c30:	movt	r2, #1
   13c34:	movt	r0, #1
   13c38:	b	13cc4 <__assert_fail@plt+0x28f0>
   13c3c:	ldrb	r1, [r0, #1]
   13c40:	and	r1, r1, #223	; 0xdf
   13c44:	cmp	r1, #66	; 0x42
   13c48:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c4c:	ldrb	r1, [r0, #2]
   13c50:	cmp	r1, #49	; 0x31
   13c54:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c58:	ldrb	r1, [r0, #3]
   13c5c:	cmp	r1, #56	; 0x38
   13c60:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c64:	ldrb	r1, [r0, #4]
   13c68:	cmp	r1, #48	; 0x30
   13c6c:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c70:	ldrb	r1, [r0, #5]
   13c74:	cmp	r1, #51	; 0x33
   13c78:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c7c:	ldrb	r1, [r0, #6]
   13c80:	cmp	r1, #48	; 0x30
   13c84:	bne	13c94 <__assert_fail@plt+0x28c0>
   13c88:	ldrb	r0, [r0, #7]
   13c8c:	cmp	r0, #0
   13c90:	beq	13cb0 <__assert_fail@plt+0x28dc>
   13c94:	movw	r1, #25746	; 0x6492
   13c98:	movw	r0, #25750	; 0x6496
   13c9c:	cmp	r4, #9
   13ca0:	movt	r1, #1
   13ca4:	movt	r0, #1
   13ca8:	moveq	r0, r1
   13cac:	pop	{r4, r5, fp, pc}
   13cb0:	ldrb	r1, [r5]
   13cb4:	movw	r2, #25760	; 0x64a0
   13cb8:	movw	r0, #25764	; 0x64a4
   13cbc:	movt	r2, #1
   13cc0:	movt	r0, #1
   13cc4:	cmp	r1, #96	; 0x60
   13cc8:	moveq	r0, r2
   13ccc:	pop	{r4, r5, fp, pc}
   13cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cd4:	add	fp, sp, #28
   13cd8:	sub	sp, sp, #12
   13cdc:	ldr	sl, [fp, #8]
   13ce0:	mov	r9, r3
   13ce4:	mov	r4, r2
   13ce8:	mov	r8, r1
   13cec:	mov	r7, r0
   13cf0:	cmp	r2, #0
   13cf4:	beq	13d0c <__assert_fail@plt+0x2938>
   13cf8:	mov	r0, r7
   13cfc:	mov	r1, #58	; 0x3a
   13d00:	bl	112a8 <strchr@plt>
   13d04:	mov	r6, r0
   13d08:	b	13d10 <__assert_fail@plt+0x293c>
   13d0c:	mov	r6, #0
   13d10:	mov	r0, r7
   13d14:	mov	r1, r6
   13d18:	mov	r2, r8
   13d1c:	mov	r3, r4
   13d20:	stm	sp, {r9, sl}
   13d24:	bl	13d88 <__assert_fail@plt+0x29b4>
   13d28:	mov	r5, r0
   13d2c:	cmp	r4, #0
   13d30:	beq	13d7c <__assert_fail@plt+0x29a8>
   13d34:	cmp	r6, #0
   13d38:	bne	13d7c <__assert_fail@plt+0x29a8>
   13d3c:	cmp	r5, #0
   13d40:	beq	13d7c <__assert_fail@plt+0x29a8>
   13d44:	mov	r0, r7
   13d48:	mov	r1, #46	; 0x2e
   13d4c:	bl	112a8 <strchr@plt>
   13d50:	cmp	r0, #0
   13d54:	beq	13d7c <__assert_fail@plt+0x29a8>
   13d58:	mov	r1, r0
   13d5c:	mov	r0, r7
   13d60:	mov	r2, r8
   13d64:	mov	r3, r4
   13d68:	stm	sp, {r9, sl}
   13d6c:	bl	13d88 <__assert_fail@plt+0x29b4>
   13d70:	cmp	r0, #0
   13d74:	movne	r0, r5
   13d78:	b	13d80 <__assert_fail@plt+0x29ac>
   13d7c:	mov	r0, r5
   13d80:	sub	sp, fp, #28
   13d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d8c:	add	fp, sp, #28
   13d90:	sub	sp, sp, #36	; 0x24
   13d94:	mov	sl, r3
   13d98:	mov	r9, r2
   13d9c:	ldr	r3, [r2]
   13da0:	ldr	r2, [fp, #8]
   13da4:	mov	r4, r1
   13da8:	cmp	sl, #0
   13dac:	beq	13db8 <__assert_fail@plt+0x29e4>
   13db0:	ldr	r1, [sl]
   13db4:	b	13dbc <__assert_fail@plt+0x29e8>
   13db8:	mvn	r1, #0
   13dbc:	ldr	r8, [fp, #12]
   13dc0:	cmp	r2, #0
   13dc4:	str	r1, [sp, #8]
   13dc8:	str	r3, [sp, #4]
   13dcc:	movne	r1, #0
   13dd0:	strne	r1, [r2]
   13dd4:	cmp	r8, #0
   13dd8:	movne	r1, #0
   13ddc:	strne	r1, [r8]
   13de0:	cmp	r4, #0
   13de4:	beq	13e18 <__assert_fail@plt+0x2a44>
   13de8:	subs	r5, r4, r0
   13dec:	beq	13ea8 <__assert_fail@plt+0x2ad4>
   13df0:	add	r1, r5, #1
   13df4:	bl	148ac <__assert_fail@plt+0x34d8>
   13df8:	mov	r7, r0
   13dfc:	mov	r0, #0
   13e00:	mov	r6, r4
   13e04:	strb	r0, [r7, r5]
   13e08:	ldrb	r0, [r6, #1]!
   13e0c:	cmp	r0, #0
   13e10:	moveq	r6, r0
   13e14:	b	13e30 <__assert_fail@plt+0x2a5c>
   13e18:	ldrb	r1, [r0]
   13e1c:	cmp	r1, #0
   13e20:	beq	13f24 <__assert_fail@plt+0x2b50>
   13e24:	bl	1491c <__assert_fail@plt+0x3548>
   13e28:	mov	r7, r0
   13e2c:	mov	r6, #0
   13e30:	ldrb	r0, [r7]
   13e34:	cmp	r0, #43	; 0x2b
   13e38:	beq	13e88 <__assert_fail@plt+0x2ab4>
   13e3c:	mov	r0, r7
   13e40:	bl	11110 <getpwnam@plt>
   13e44:	cmp	r0, #0
   13e48:	beq	13e88 <__assert_fail@plt+0x2ab4>
   13e4c:	ldr	r1, [r0, #8]
   13e50:	mov	r5, #0
   13e54:	cmp	r4, #0
   13e58:	str	r1, [sp, #4]
   13e5c:	beq	13ea0 <__assert_fail@plt+0x2acc>
   13e60:	cmp	r6, #0
   13e64:	bne	13ea0 <__assert_fail@plt+0x2acc>
   13e68:	ldr	r4, [r0, #12]
   13e6c:	mov	r0, r4
   13e70:	bl	113bc <getgrgid@plt>
   13e74:	cmp	r0, #0
   13e78:	str	r4, [sp, #8]
   13e7c:	beq	13f30 <__assert_fail@plt+0x2b5c>
   13e80:	ldr	r0, [r0]
   13e84:	b	13f40 <__assert_fail@plt+0x2b6c>
   13e88:	cmp	r4, #0
   13e8c:	beq	13ec8 <__assert_fail@plt+0x2af4>
   13e90:	cmp	r6, #0
   13e94:	bne	13ec8 <__assert_fail@plt+0x2af4>
   13e98:	movw	r5, #25879	; 0x6517
   13e9c:	movt	r5, #1
   13ea0:	mov	r4, #0
   13ea4:	b	13f4c <__assert_fail@plt+0x2b78>
   13ea8:	ldrb	r0, [r4, #1]!
   13eac:	mov	r7, #0
   13eb0:	mov	r5, #0
   13eb4:	cmp	r0, #0
   13eb8:	moveq	r4, r0
   13ebc:	mov	r6, r4
   13ec0:	mov	r4, #0
   13ec4:	b	13f50 <__assert_fail@plt+0x2b7c>
   13ec8:	movw	r0, #24252	; 0x5ebc
   13ecc:	add	r3, sp, #12
   13ed0:	mov	r1, #0
   13ed4:	mov	r2, #10
   13ed8:	mov	r4, #0
   13edc:	movt	r0, #1
   13ee0:	str	r0, [sp]
   13ee4:	mov	r0, r7
   13ee8:	bl	149cc <__assert_fail@plt+0x35f8>
   13eec:	ldr	r1, [sp, #12]
   13ef0:	mvn	r2, #0
   13ef4:	clz	r0, r0
   13ef8:	movw	r5, #25852	; 0x64fc
   13efc:	lsr	r0, r0, #5
   13f00:	movt	r5, #1
   13f04:	subs	r2, r1, r2
   13f08:	movwne	r2, #1
   13f0c:	ands	r0, r0, r2
   13f10:	ldr	r0, [sp, #4]
   13f14:	movne	r0, r1
   13f18:	movwne	r5, #0
   13f1c:	str	r0, [sp, #4]
   13f20:	b	13f4c <__assert_fail@plt+0x2b78>
   13f24:	mov	r4, #0
   13f28:	mov	r7, #0
   13f2c:	b	13ff8 <__assert_fail@plt+0x2c24>
   13f30:	add	r2, sp, #12
   13f34:	mov	r0, r4
   13f38:	mov	r1, #0
   13f3c:	bl	157e4 <__assert_fail@plt+0x4410>
   13f40:	bl	1491c <__assert_fail@plt+0x3548>
   13f44:	mov	r4, r0
   13f48:	bl	110ec <endgrent@plt>
   13f4c:	bl	11344 <endpwent@plt>
   13f50:	cmp	r6, #0
   13f54:	beq	13fec <__assert_fail@plt+0x2c18>
   13f58:	cmp	r5, #0
   13f5c:	bne	13fec <__assert_fail@plt+0x2c18>
   13f60:	ldrb	r0, [r6]
   13f64:	cmp	r0, #43	; 0x2b
   13f68:	beq	13f88 <__assert_fail@plt+0x2bb4>
   13f6c:	mov	r0, r6
   13f70:	bl	113c8 <getgrnam@plt>
   13f74:	cmp	r0, #0
   13f78:	beq	13f88 <__assert_fail@plt+0x2bb4>
   13f7c:	ldr	r0, [r0, #8]
   13f80:	mov	r5, #0
   13f84:	b	13fd8 <__assert_fail@plt+0x2c04>
   13f88:	movw	r0, #24252	; 0x5ebc
   13f8c:	add	r3, sp, #12
   13f90:	mov	r1, #0
   13f94:	mov	r2, #10
   13f98:	movt	r0, #1
   13f9c:	str	r0, [sp]
   13fa0:	mov	r0, r6
   13fa4:	bl	149cc <__assert_fail@plt+0x35f8>
   13fa8:	ldr	r1, [sp, #12]
   13fac:	mvn	r2, #0
   13fb0:	clz	r0, r0
   13fb4:	movw	r5, #25865	; 0x6509
   13fb8:	lsr	r0, r0, #5
   13fbc:	movt	r5, #1
   13fc0:	subs	r2, r1, r2
   13fc4:	movwne	r2, #1
   13fc8:	ands	r0, r0, r2
   13fcc:	ldr	r0, [sp, #8]
   13fd0:	movne	r0, r1
   13fd4:	movwne	r5, #0
   13fd8:	str	r0, [sp, #8]
   13fdc:	bl	110ec <endgrent@plt>
   13fe0:	mov	r0, r6
   13fe4:	bl	1491c <__assert_fail@plt+0x3548>
   13fe8:	mov	r4, r0
   13fec:	mov	r6, #0
   13ff0:	cmp	r5, #0
   13ff4:	bne	14034 <__assert_fail@plt+0x2c60>
   13ff8:	ldr	r0, [sp, #4]
   13ffc:	cmp	sl, #0
   14000:	mov	r6, #1
   14004:	str	r0, [r9]
   14008:	ldrne	r0, [sp, #8]
   1400c:	strne	r0, [sl]
   14010:	ldr	r0, [fp, #8]
   14014:	cmp	r0, #0
   14018:	strne	r7, [r0]
   1401c:	movne	r7, #0
   14020:	cmp	r8, #0
   14024:	moveq	r5, #0
   14028:	strne	r4, [r8]
   1402c:	movne	r5, #0
   14030:	movne	r4, #0
   14034:	mov	r0, r7
   14038:	bl	12170 <__assert_fail@plt+0xd9c>
   1403c:	mov	r0, r4
   14040:	bl	12170 <__assert_fail@plt+0xd9c>
   14044:	mov	r0, #0
   14048:	cmp	r6, #0
   1404c:	bne	14060 <__assert_fail@plt+0x2c8c>
   14050:	mov	r0, #0
   14054:	mov	r1, r5
   14058:	mov	r2, #5
   1405c:	bl	1117c <dcgettext@plt>
   14060:	sub	sp, fp, #28
   14064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14068:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1406c:	add	fp, sp, #24
   14070:	sub	sp, sp, #32
   14074:	ldr	r6, [fp, #12]
   14078:	ldr	r7, [fp, #8]
   1407c:	mov	r4, r2
   14080:	mov	r8, r0
   14084:	cmp	r1, #0
   14088:	beq	140b0 <__assert_fail@plt+0x2cdc>
   1408c:	movw	r2, #25892	; 0x6524
   14090:	mov	r5, r1
   14094:	str	r3, [sp, #4]
   14098:	str	r4, [sp]
   1409c:	mov	r0, r8
   140a0:	mov	r1, #1
   140a4:	movt	r2, #1
   140a8:	mov	r3, r5
   140ac:	b	140c8 <__assert_fail@plt+0x2cf4>
   140b0:	movw	r2, #25904	; 0x6530
   140b4:	str	r3, [sp]
   140b8:	mov	r0, r8
   140bc:	mov	r1, #1
   140c0:	mov	r3, r4
   140c4:	movt	r2, #1
   140c8:	bl	11308 <__fprintf_chk@plt>
   140cc:	movw	r1, #25911	; 0x6537
   140d0:	mov	r0, #0
   140d4:	mov	r2, #5
   140d8:	movt	r1, #1
   140dc:	bl	1117c <dcgettext@plt>
   140e0:	movw	r2, #26629	; 0x6805
   140e4:	mov	r3, r0
   140e8:	movw	r0, #2022	; 0x7e6
   140ec:	mov	r1, #1
   140f0:	movt	r2, #1
   140f4:	str	r0, [sp]
   140f8:	mov	r0, r8
   140fc:	bl	11308 <__fprintf_chk@plt>
   14100:	movw	r4, #24251	; 0x5ebb
   14104:	mov	r1, r8
   14108:	movt	r4, #1
   1410c:	mov	r0, r4
   14110:	bl	110f8 <fputs_unlocked@plt>
   14114:	movw	r1, #25915	; 0x653b
   14118:	mov	r0, #0
   1411c:	mov	r2, #5
   14120:	movt	r1, #1
   14124:	bl	1117c <dcgettext@plt>
   14128:	movw	r3, #26086	; 0x65e6
   1412c:	mov	r2, r0
   14130:	mov	r0, r8
   14134:	mov	r1, #1
   14138:	movt	r3, #1
   1413c:	bl	11308 <__fprintf_chk@plt>
   14140:	mov	r0, r4
   14144:	mov	r1, r8
   14148:	bl	110f8 <fputs_unlocked@plt>
   1414c:	cmp	r6, #9
   14150:	bhi	141b4 <__assert_fail@plt+0x2de0>
   14154:	add	r0, pc, #0
   14158:	ldr	pc, [r0, r6, lsl #2]
   1415c:	andeq	r4, r1, ip, lsl #7
   14160:	andeq	r4, r1, r4, lsl #3
   14164:	andeq	r4, r1, r0, asr #3
   14168:	andeq	r4, r1, r8, ror #3
   1416c:	andeq	r4, r1, r0, lsl r2
   14170:	andeq	r4, r1, r8, lsr r2
   14174:	andeq	r4, r1, r0, ror #4
   14178:	muleq	r1, r8, r2
   1417c:	andeq	r4, r1, r8, lsr r3
   14180:	andeq	r4, r1, r0, ror #5
   14184:	movw	r1, #26120	; 0x6608
   14188:	mov	r0, #0
   1418c:	mov	r2, #5
   14190:	movt	r1, #1
   14194:	bl	1117c <dcgettext@plt>
   14198:	ldr	r3, [r7]
   1419c:	mov	r2, r0
   141a0:	mov	r0, r8
   141a4:	mov	r1, #1
   141a8:	sub	sp, fp, #24
   141ac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   141b0:	b	11308 <__fprintf_chk@plt>
   141b4:	movw	r1, #26439	; 0x6747
   141b8:	movt	r1, #1
   141bc:	b	142e8 <__assert_fail@plt+0x2f14>
   141c0:	movw	r1, #26136	; 0x6618
   141c4:	mov	r0, #0
   141c8:	mov	r2, #5
   141cc:	movt	r1, #1
   141d0:	bl	1117c <dcgettext@plt>
   141d4:	mov	r2, r0
   141d8:	ldr	r3, [r7]
   141dc:	ldr	r0, [r7, #4]
   141e0:	str	r0, [sp]
   141e4:	b	142d4 <__assert_fail@plt+0x2f00>
   141e8:	movw	r1, #26159	; 0x662f
   141ec:	mov	r0, #0
   141f0:	mov	r2, #5
   141f4:	movt	r1, #1
   141f8:	bl	1117c <dcgettext@plt>
   141fc:	mov	r2, r0
   14200:	ldr	r3, [r7]
   14204:	ldmib	r7, {r0, r1}
   14208:	stm	sp, {r0, r1}
   1420c:	b	142d4 <__assert_fail@plt+0x2f00>
   14210:	movw	r1, #26187	; 0x664b
   14214:	mov	r0, #0
   14218:	mov	r2, #5
   1421c:	movt	r1, #1
   14220:	bl	1117c <dcgettext@plt>
   14224:	ldr	r3, [r7]
   14228:	mov	r2, r0
   1422c:	ldmib	r7, {r0, r1, r7}
   14230:	stm	sp, {r0, r1, r7}
   14234:	b	142d4 <__assert_fail@plt+0x2f00>
   14238:	movw	r1, #26219	; 0x666b
   1423c:	mov	r0, #0
   14240:	mov	r2, #5
   14244:	movt	r1, #1
   14248:	bl	1117c <dcgettext@plt>
   1424c:	ldr	r3, [r7]
   14250:	mov	r2, r0
   14254:	ldmib	r7, {r0, r1, r6, r7}
   14258:	stm	sp, {r0, r1, r6, r7}
   1425c:	b	142d4 <__assert_fail@plt+0x2f00>
   14260:	movw	r1, #26255	; 0x668f
   14264:	mov	r0, #0
   14268:	mov	r2, #5
   1426c:	movt	r1, #1
   14270:	bl	1117c <dcgettext@plt>
   14274:	mov	r2, r0
   14278:	ldr	r3, [r7]
   1427c:	ldmib	r7, {r0, r1, r6}
   14280:	ldr	r5, [r7, #16]
   14284:	ldr	r7, [r7, #20]
   14288:	stm	sp, {r0, r1, r6}
   1428c:	str	r5, [sp, #12]
   14290:	str	r7, [sp, #16]
   14294:	b	142d4 <__assert_fail@plt+0x2f00>
   14298:	movw	r1, #26295	; 0x66b7
   1429c:	mov	r0, #0
   142a0:	mov	r2, #5
   142a4:	movt	r1, #1
   142a8:	bl	1117c <dcgettext@plt>
   142ac:	mov	r2, r0
   142b0:	ldr	r3, [r7]
   142b4:	ldmib	r7, {r0, r1, r6}
   142b8:	ldr	r5, [r7, #16]
   142bc:	ldr	r4, [r7, #20]
   142c0:	ldr	r7, [r7, #24]
   142c4:	stm	sp, {r0, r1, r6}
   142c8:	str	r5, [sp, #12]
   142cc:	str	r4, [sp, #16]
   142d0:	str	r7, [sp, #20]
   142d4:	mov	r0, r8
   142d8:	mov	r1, #1
   142dc:	b	14388 <__assert_fail@plt+0x2fb4>
   142e0:	movw	r1, #26387	; 0x6713
   142e4:	movt	r1, #1
   142e8:	mov	r0, #0
   142ec:	mov	r2, #5
   142f0:	bl	1117c <dcgettext@plt>
   142f4:	mov	ip, r0
   142f8:	ldr	r3, [r7]
   142fc:	ldr	r0, [r7, #4]
   14300:	ldr	r1, [r7, #8]
   14304:	ldr	r6, [r7, #12]
   14308:	ldr	r5, [r7, #16]
   1430c:	ldr	r4, [r7, #20]
   14310:	ldr	r2, [r7, #24]
   14314:	ldr	lr, [r7, #28]
   14318:	ldr	r7, [r7, #32]
   1431c:	stm	sp, {r0, r1, r6}
   14320:	str	r5, [sp, #12]
   14324:	str	r4, [sp, #16]
   14328:	str	r2, [sp, #20]
   1432c:	str	lr, [sp, #24]
   14330:	str	r7, [sp, #28]
   14334:	b	1437c <__assert_fail@plt+0x2fa8>
   14338:	movw	r1, #26339	; 0x66e3
   1433c:	mov	r0, #0
   14340:	mov	r2, #5
   14344:	movt	r1, #1
   14348:	bl	1117c <dcgettext@plt>
   1434c:	mov	ip, r0
   14350:	ldr	r3, [r7]
   14354:	ldmib	r7, {r0, r1, r6}
   14358:	ldr	r5, [r7, #16]
   1435c:	ldr	r4, [r7, #20]
   14360:	ldr	r2, [r7, #24]
   14364:	ldr	r7, [r7, #28]
   14368:	stm	sp, {r0, r1, r6}
   1436c:	str	r5, [sp, #12]
   14370:	str	r4, [sp, #16]
   14374:	str	r2, [sp, #20]
   14378:	str	r7, [sp, #24]
   1437c:	mov	r0, r8
   14380:	mov	r1, #1
   14384:	mov	r2, ip
   14388:	bl	11308 <__fprintf_chk@plt>
   1438c:	sub	sp, fp, #24
   14390:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14394:	push	{r4, sl, fp, lr}
   14398:	add	fp, sp, #8
   1439c:	sub	sp, sp, #8
   143a0:	ldr	ip, [fp, #8]
   143a4:	mov	lr, #0
   143a8:	ldr	r4, [ip, lr, lsl #2]
   143ac:	add	lr, lr, #1
   143b0:	cmp	r4, #0
   143b4:	bne	143a8 <__assert_fail@plt+0x2fd4>
   143b8:	sub	r4, lr, #1
   143bc:	str	ip, [sp]
   143c0:	str	r4, [sp, #4]
   143c4:	bl	14068 <__assert_fail@plt+0x2c94>
   143c8:	sub	sp, fp, #8
   143cc:	pop	{r4, sl, fp, pc}
   143d0:	push	{r4, r5, fp, lr}
   143d4:	add	fp, sp, #8
   143d8:	sub	sp, sp, #48	; 0x30
   143dc:	ldr	r4, [fp, #8]
   143e0:	mov	ip, #0
   143e4:	add	lr, sp, #8
   143e8:	ldr	r5, [r4]
   143ec:	cmp	r5, #0
   143f0:	str	r5, [lr, ip, lsl #2]
   143f4:	beq	1440c <__assert_fail@plt+0x3038>
   143f8:	add	ip, ip, #1
   143fc:	add	r4, r4, #4
   14400:	cmp	ip, #10
   14404:	bne	143e8 <__assert_fail@plt+0x3014>
   14408:	mov	ip, #10
   1440c:	str	lr, [sp]
   14410:	str	ip, [sp, #4]
   14414:	bl	14068 <__assert_fail@plt+0x2c94>
   14418:	sub	sp, fp, #8
   1441c:	pop	{r4, r5, fp, pc}
   14420:	push	{fp, lr}
   14424:	mov	fp, sp
   14428:	sub	sp, sp, #8
   1442c:	add	ip, fp, #8
   14430:	str	ip, [sp, #4]
   14434:	str	ip, [sp]
   14438:	bl	143d0 <__assert_fail@plt+0x2ffc>
   1443c:	mov	sp, fp
   14440:	pop	{fp, pc}
   14444:	push	{fp, lr}
   14448:	mov	fp, sp
   1444c:	movw	r0, #29044	; 0x7174
   14450:	movt	r0, #2
   14454:	ldr	r1, [r0]
   14458:	movw	r0, #24251	; 0x5ebb
   1445c:	movt	r0, #1
   14460:	bl	110f8 <fputs_unlocked@plt>
   14464:	movw	r1, #26499	; 0x6783
   14468:	mov	r0, #0
   1446c:	mov	r2, #5
   14470:	movt	r1, #1
   14474:	bl	1117c <dcgettext@plt>
   14478:	movw	r2, #26519	; 0x6797
   1447c:	mov	r1, r0
   14480:	mov	r0, #1
   14484:	movt	r2, #1
   14488:	bl	112e4 <__printf_chk@plt>
   1448c:	movw	r1, #26541	; 0x67ad
   14490:	mov	r0, #0
   14494:	mov	r2, #5
   14498:	movt	r1, #1
   1449c:	bl	1117c <dcgettext@plt>
   144a0:	movw	r2, #24669	; 0x605d
   144a4:	movw	r3, #25148	; 0x623c
   144a8:	mov	r1, r0
   144ac:	mov	r0, #1
   144b0:	movt	r2, #1
   144b4:	movt	r3, #1
   144b8:	bl	112e4 <__printf_chk@plt>
   144bc:	movw	r1, #26561	; 0x67c1
   144c0:	mov	r0, #0
   144c4:	mov	r2, #5
   144c8:	movt	r1, #1
   144cc:	bl	1117c <dcgettext@plt>
   144d0:	movw	r2, #26600	; 0x67e8
   144d4:	mov	r1, r0
   144d8:	mov	r0, #1
   144dc:	movt	r2, #1
   144e0:	pop	{fp, lr}
   144e4:	b	112e4 <__printf_chk@plt>
   144e8:	b	144ec <__assert_fail@plt+0x3118>
   144ec:	push	{r4, r5, r6, sl, fp, lr}
   144f0:	add	fp, sp, #16
   144f4:	mov	r4, r2
   144f8:	mov	r5, r1
   144fc:	mov	r6, r0
   14500:	bl	15aec <__assert_fail@plt+0x4718>
   14504:	cmp	r0, #0
   14508:	popne	{r4, r5, r6, sl, fp, pc}
   1450c:	cmp	r6, #0
   14510:	beq	14524 <__assert_fail@plt+0x3150>
   14514:	cmp	r5, #0
   14518:	cmpne	r4, #0
   1451c:	bne	14524 <__assert_fail@plt+0x3150>
   14520:	pop	{r4, r5, r6, sl, fp, pc}
   14524:	bl	14954 <__assert_fail@plt+0x3580>
   14528:	push	{fp, lr}
   1452c:	mov	fp, sp
   14530:	bl	15548 <__assert_fail@plt+0x4174>
   14534:	cmp	r0, #0
   14538:	popne	{fp, pc}
   1453c:	bl	14954 <__assert_fail@plt+0x3580>
   14540:	push	{fp, lr}
   14544:	mov	fp, sp
   14548:	bl	15548 <__assert_fail@plt+0x4174>
   1454c:	cmp	r0, #0
   14550:	popne	{fp, pc}
   14554:	bl	14954 <__assert_fail@plt+0x3580>
   14558:	push	{fp, lr}
   1455c:	mov	fp, sp
   14560:	bl	15548 <__assert_fail@plt+0x4174>
   14564:	cmp	r0, #0
   14568:	popne	{fp, pc}
   1456c:	bl	14954 <__assert_fail@plt+0x3580>
   14570:	push	{r4, r5, fp, lr}
   14574:	add	fp, sp, #8
   14578:	mov	r4, r1
   1457c:	mov	r5, r0
   14580:	bl	15578 <__assert_fail@plt+0x41a4>
   14584:	cmp	r0, #0
   14588:	popne	{r4, r5, fp, pc}
   1458c:	cmp	r5, #0
   14590:	beq	145a0 <__assert_fail@plt+0x31cc>
   14594:	cmp	r4, #0
   14598:	bne	145a0 <__assert_fail@plt+0x31cc>
   1459c:	pop	{r4, r5, fp, pc}
   145a0:	bl	14954 <__assert_fail@plt+0x3580>
   145a4:	push	{fp, lr}
   145a8:	mov	fp, sp
   145ac:	cmp	r1, #0
   145b0:	orreq	r1, r1, #1
   145b4:	bl	15578 <__assert_fail@plt+0x41a4>
   145b8:	cmp	r0, #0
   145bc:	popne	{fp, pc}
   145c0:	bl	14954 <__assert_fail@plt+0x3580>
   145c4:	push	{fp, lr}
   145c8:	mov	fp, sp
   145cc:	clz	r3, r2
   145d0:	lsr	ip, r3, #5
   145d4:	clz	r3, r1
   145d8:	lsr	r3, r3, #5
   145dc:	orrs	r3, r3, ip
   145e0:	movwne	r1, #1
   145e4:	movwne	r2, #1
   145e8:	bl	15aec <__assert_fail@plt+0x4718>
   145ec:	cmp	r0, #0
   145f0:	popne	{fp, pc}
   145f4:	bl	14954 <__assert_fail@plt+0x3580>
   145f8:	push	{fp, lr}
   145fc:	mov	fp, sp
   14600:	mov	r2, r1
   14604:	mov	r1, r0
   14608:	mov	r0, #0
   1460c:	bl	15aec <__assert_fail@plt+0x4718>
   14610:	cmp	r0, #0
   14614:	popne	{fp, pc}
   14618:	bl	14954 <__assert_fail@plt+0x3580>
   1461c:	mov	r2, r1
   14620:	mov	r1, r0
   14624:	mov	r0, #0
   14628:	b	145c4 <__assert_fail@plt+0x31f0>
   1462c:	mov	r2, #1
   14630:	b	14634 <__assert_fail@plt+0x3260>
   14634:	push	{r4, r5, fp, lr}
   14638:	add	fp, sp, #8
   1463c:	ldr	r5, [r1]
   14640:	mov	r4, r1
   14644:	cmp	r0, #0
   14648:	beq	14660 <__assert_fail@plt+0x328c>
   1464c:	mov	r1, #1
   14650:	add	r1, r1, r5, lsr #1
   14654:	adds	r5, r5, r1
   14658:	bcc	14678 <__assert_fail@plt+0x32a4>
   1465c:	bl	14954 <__assert_fail@plt+0x3580>
   14660:	cmp	r5, #0
   14664:	bne	14678 <__assert_fail@plt+0x32a4>
   14668:	mov	r1, #64	; 0x40
   1466c:	cmp	r2, #64	; 0x40
   14670:	udiv	r5, r1, r2
   14674:	addhi	r5, r5, #1
   14678:	mov	r1, r5
   1467c:	bl	144ec <__assert_fail@plt+0x3118>
   14680:	str	r5, [r4]
   14684:	pop	{r4, r5, fp, pc}
   14688:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1468c:	add	fp, sp, #24
   14690:	ldr	r6, [r1]
   14694:	mov	r8, r1
   14698:	ldr	r4, [fp, #8]
   1469c:	add	r1, r6, r6, asr #1
   146a0:	cmp	r1, r6
   146a4:	mvnvs	r1, #-2147483648	; 0x80000000
   146a8:	cmp	r1, r3
   146ac:	mov	r5, r1
   146b0:	movgt	r5, r3
   146b4:	cmn	r3, #1
   146b8:	movle	r5, r1
   146bc:	cmn	r4, #1
   146c0:	ble	146e0 <__assert_fail@plt+0x330c>
   146c4:	cmp	r4, #0
   146c8:	beq	14734 <__assert_fail@plt+0x3360>
   146cc:	cmn	r5, #1
   146d0:	ble	14708 <__assert_fail@plt+0x3334>
   146d4:	mvn	r7, #-2147483648	; 0x80000000
   146d8:	udiv	r1, r7, r4
   146dc:	b	146fc <__assert_fail@plt+0x3328>
   146e0:	cmn	r5, #1
   146e4:	ble	14724 <__assert_fail@plt+0x3350>
   146e8:	cmn	r4, #1
   146ec:	beq	14734 <__assert_fail@plt+0x3360>
   146f0:	mov	r1, #-2147483648	; 0x80000000
   146f4:	mvn	r7, #-2147483648	; 0x80000000
   146f8:	sdiv	r1, r1, r4
   146fc:	cmp	r1, r5
   14700:	bge	14734 <__assert_fail@plt+0x3360>
   14704:	b	14744 <__assert_fail@plt+0x3370>
   14708:	beq	14734 <__assert_fail@plt+0x3360>
   1470c:	mov	r1, #-2147483648	; 0x80000000
   14710:	mvn	r7, #-2147483648	; 0x80000000
   14714:	sdiv	r1, r1, r5
   14718:	cmp	r1, r4
   1471c:	bge	14734 <__assert_fail@plt+0x3360>
   14720:	b	14744 <__assert_fail@plt+0x3370>
   14724:	mvn	r7, #-2147483648	; 0x80000000
   14728:	sdiv	r1, r7, r4
   1472c:	cmp	r5, r1
   14730:	blt	14744 <__assert_fail@plt+0x3370>
   14734:	mul	r1, r5, r4
   14738:	mov	r7, #64	; 0x40
   1473c:	cmp	r1, #63	; 0x3f
   14740:	bgt	1474c <__assert_fail@plt+0x3378>
   14744:	sdiv	r5, r7, r4
   14748:	mul	r1, r5, r4
   1474c:	cmp	r0, #0
   14750:	moveq	r7, #0
   14754:	streq	r7, [r8]
   14758:	sub	r7, r5, r6
   1475c:	cmp	r7, r2
   14760:	bge	14804 <__assert_fail@plt+0x3430>
   14764:	add	r5, r6, r2
   14768:	mov	r2, #0
   1476c:	mov	r1, #0
   14770:	cmp	r5, r3
   14774:	movwgt	r2, #1
   14778:	cmn	r3, #1
   1477c:	movwgt	r1, #1
   14780:	cmp	r5, r6
   14784:	bvs	147ec <__assert_fail@plt+0x3418>
   14788:	ands	r1, r1, r2
   1478c:	bne	147ec <__assert_fail@plt+0x3418>
   14790:	cmn	r4, #1
   14794:	ble	147b4 <__assert_fail@plt+0x33e0>
   14798:	cmp	r4, #0
   1479c:	beq	14800 <__assert_fail@plt+0x342c>
   147a0:	cmn	r5, #1
   147a4:	ble	147d8 <__assert_fail@plt+0x3404>
   147a8:	mvn	r1, #-2147483648	; 0x80000000
   147ac:	udiv	r1, r1, r4
   147b0:	b	147cc <__assert_fail@plt+0x33f8>
   147b4:	cmn	r5, #1
   147b8:	ble	147f0 <__assert_fail@plt+0x341c>
   147bc:	cmn	r4, #1
   147c0:	beq	14800 <__assert_fail@plt+0x342c>
   147c4:	mov	r1, #-2147483648	; 0x80000000
   147c8:	sdiv	r1, r1, r4
   147cc:	cmp	r1, r5
   147d0:	bge	14800 <__assert_fail@plt+0x342c>
   147d4:	b	147ec <__assert_fail@plt+0x3418>
   147d8:	beq	14800 <__assert_fail@plt+0x342c>
   147dc:	mov	r1, #-2147483648	; 0x80000000
   147e0:	sdiv	r1, r1, r5
   147e4:	cmp	r1, r4
   147e8:	bge	14800 <__assert_fail@plt+0x342c>
   147ec:	bl	14954 <__assert_fail@plt+0x3580>
   147f0:	mvn	r1, #-2147483648	; 0x80000000
   147f4:	sdiv	r1, r1, r4
   147f8:	cmp	r5, r1
   147fc:	blt	147ec <__assert_fail@plt+0x3418>
   14800:	mul	r1, r5, r4
   14804:	bl	14570 <__assert_fail@plt+0x319c>
   14808:	str	r5, [r8]
   1480c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14810:	push	{fp, lr}
   14814:	mov	fp, sp
   14818:	mov	r1, #1
   1481c:	bl	154f4 <__assert_fail@plt+0x4120>
   14820:	cmp	r0, #0
   14824:	popne	{fp, pc}
   14828:	bl	14954 <__assert_fail@plt+0x3580>
   1482c:	push	{fp, lr}
   14830:	mov	fp, sp
   14834:	bl	154f4 <__assert_fail@plt+0x4120>
   14838:	cmp	r0, #0
   1483c:	popne	{fp, pc}
   14840:	bl	14954 <__assert_fail@plt+0x3580>
   14844:	push	{fp, lr}
   14848:	mov	fp, sp
   1484c:	mov	r1, #1
   14850:	bl	154f4 <__assert_fail@plt+0x4120>
   14854:	cmp	r0, #0
   14858:	popne	{fp, pc}
   1485c:	bl	14954 <__assert_fail@plt+0x3580>
   14860:	push	{fp, lr}
   14864:	mov	fp, sp
   14868:	bl	154f4 <__assert_fail@plt+0x4120>
   1486c:	cmp	r0, #0
   14870:	popne	{fp, pc}
   14874:	bl	14954 <__assert_fail@plt+0x3580>
   14878:	push	{r4, r5, fp, lr}
   1487c:	add	fp, sp, #8
   14880:	mov	r5, r0
   14884:	mov	r0, r1
   14888:	mov	r4, r1
   1488c:	bl	15548 <__assert_fail@plt+0x4174>
   14890:	cmp	r0, #0
   14894:	beq	148a8 <__assert_fail@plt+0x34d4>
   14898:	mov	r1, r5
   1489c:	mov	r2, r4
   148a0:	pop	{r4, r5, fp, lr}
   148a4:	b	11158 <memcpy@plt>
   148a8:	bl	14954 <__assert_fail@plt+0x3580>
   148ac:	push	{r4, r5, fp, lr}
   148b0:	add	fp, sp, #8
   148b4:	mov	r5, r0
   148b8:	mov	r0, r1
   148bc:	mov	r4, r1
   148c0:	bl	15548 <__assert_fail@plt+0x4174>
   148c4:	cmp	r0, #0
   148c8:	beq	148dc <__assert_fail@plt+0x3508>
   148cc:	mov	r1, r5
   148d0:	mov	r2, r4
   148d4:	pop	{r4, r5, fp, lr}
   148d8:	b	11158 <memcpy@plt>
   148dc:	bl	14954 <__assert_fail@plt+0x3580>
   148e0:	push	{r4, r5, fp, lr}
   148e4:	add	fp, sp, #8
   148e8:	mov	r5, r0
   148ec:	add	r0, r1, #1
   148f0:	mov	r4, r1
   148f4:	bl	15548 <__assert_fail@plt+0x4174>
   148f8:	cmp	r0, #0
   148fc:	beq	14918 <__assert_fail@plt+0x3544>
   14900:	mov	r1, #0
   14904:	mov	r2, r4
   14908:	strb	r1, [r0, r4]
   1490c:	mov	r1, r5
   14910:	pop	{r4, r5, fp, lr}
   14914:	b	11158 <memcpy@plt>
   14918:	bl	14954 <__assert_fail@plt+0x3580>
   1491c:	push	{r4, r5, fp, lr}
   14920:	add	fp, sp, #8
   14924:	mov	r4, r0
   14928:	bl	1129c <strlen@plt>
   1492c:	add	r5, r0, #1
   14930:	mov	r0, r5
   14934:	bl	15548 <__assert_fail@plt+0x4174>
   14938:	cmp	r0, #0
   1493c:	beq	14950 <__assert_fail@plt+0x357c>
   14940:	mov	r1, r4
   14944:	mov	r2, r5
   14948:	pop	{r4, r5, fp, lr}
   1494c:	b	11158 <memcpy@plt>
   14950:	bl	14954 <__assert_fail@plt+0x3580>
   14954:	push	{fp, lr}
   14958:	mov	fp, sp
   1495c:	movw	r0, #28956	; 0x711c
   14960:	movw	r1, #26676	; 0x6834
   14964:	mov	r2, #5
   14968:	movt	r0, #2
   1496c:	movt	r1, #1
   14970:	ldr	r4, [r0]
   14974:	mov	r0, #0
   14978:	bl	1117c <dcgettext@plt>
   1497c:	movw	r2, #25599	; 0x63ff
   14980:	mov	r3, r0
   14984:	mov	r0, r4
   14988:	mov	r1, #0
   1498c:	movt	r2, #1
   14990:	bl	1120c <error@plt>
   14994:	bl	113b0 <abort@plt>
   14998:	push	{r4, sl, fp, lr}
   1499c:	add	fp, sp, #8
   149a0:	bl	158dc <__assert_fail@plt+0x4508>
   149a4:	mov	r4, r0
   149a8:	cmn	r0, #1
   149ac:	bne	149c0 <__assert_fail@plt+0x35ec>
   149b0:	bl	112b4 <__errno_location@plt>
   149b4:	ldr	r0, [r0]
   149b8:	cmp	r0, #12
   149bc:	beq	149c8 <__assert_fail@plt+0x35f4>
   149c0:	mov	r0, r4
   149c4:	pop	{r4, sl, fp, pc}
   149c8:	bl	14954 <__assert_fail@plt+0x3580>
   149cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d0:	add	fp, sp, #28
   149d4:	sub	sp, sp, #12
   149d8:	cmp	r2, #37	; 0x25
   149dc:	bcs	14e18 <__assert_fail@plt+0x3a44>
   149e0:	ldr	r9, [fp, #8]
   149e4:	mov	r7, r2
   149e8:	mov	r6, r1
   149ec:	mov	r4, r0
   149f0:	str	r3, [sp, #4]
   149f4:	bl	112b4 <__errno_location@plt>
   149f8:	mov	r5, r0
   149fc:	mov	r0, #0
   14a00:	str	r0, [r5]
   14a04:	bl	1126c <__ctype_b_loc@plt>
   14a08:	ldr	r1, [r0]
   14a0c:	mov	r2, r4
   14a10:	ldrb	r0, [r2], #1
   14a14:	add	r3, r1, r0, lsl #1
   14a18:	ldrb	r3, [r3, #1]
   14a1c:	tst	r3, #32
   14a20:	bne	14a10 <__assert_fail@plt+0x363c>
   14a24:	cmp	r6, #0
   14a28:	add	r8, sp, #8
   14a2c:	mov	sl, #4
   14a30:	movne	r8, r6
   14a34:	cmp	r0, #45	; 0x2d
   14a38:	beq	14e0c <__assert_fail@plt+0x3a38>
   14a3c:	mov	r0, r4
   14a40:	mov	r1, r8
   14a44:	mov	r2, r7
   14a48:	bl	11290 <strtoul@plt>
   14a4c:	ldr	r6, [r8]
   14a50:	cmp	r6, r4
   14a54:	beq	14a78 <__assert_fail@plt+0x36a4>
   14a58:	mov	r7, r0
   14a5c:	ldr	r0, [r5]
   14a60:	cmp	r0, #0
   14a64:	beq	14aa8 <__assert_fail@plt+0x36d4>
   14a68:	cmp	r0, #34	; 0x22
   14a6c:	bne	14e0c <__assert_fail@plt+0x3a38>
   14a70:	mov	sl, #1
   14a74:	b	14aac <__assert_fail@plt+0x36d8>
   14a78:	cmp	r9, #0
   14a7c:	beq	14e0c <__assert_fail@plt+0x3a38>
   14a80:	ldrb	r1, [r4]
   14a84:	cmp	r1, #0
   14a88:	beq	14e0c <__assert_fail@plt+0x3a38>
   14a8c:	mov	r0, r9
   14a90:	bl	112a8 <strchr@plt>
   14a94:	cmp	r0, #0
   14a98:	beq	14e0c <__assert_fail@plt+0x3a38>
   14a9c:	mov	r7, #1
   14aa0:	mov	sl, #0
   14aa4:	b	14ab4 <__assert_fail@plt+0x36e0>
   14aa8:	mov	sl, r0
   14aac:	cmp	r9, #0
   14ab0:	beq	14e04 <__assert_fail@plt+0x3a30>
   14ab4:	ldrb	r4, [r6]
   14ab8:	cmp	r4, #0
   14abc:	beq	14e04 <__assert_fail@plt+0x3a30>
   14ac0:	mov	r0, r9
   14ac4:	mov	r1, r4
   14ac8:	bl	112a8 <strchr@plt>
   14acc:	cmp	r0, #0
   14ad0:	beq	14d8c <__assert_fail@plt+0x39b8>
   14ad4:	sub	r0, r4, #69	; 0x45
   14ad8:	mov	r3, #1
   14adc:	mov	r5, #1024	; 0x400
   14ae0:	cmp	r0, #21
   14ae4:	bhi	14afc <__assert_fail@plt+0x3728>
   14ae8:	movw	r2, #35141	; 0x8945
   14aec:	mov	r1, #1
   14af0:	movt	r2, #48	; 0x30
   14af4:	tst	r2, r1, lsl r0
   14af8:	bne	14b18 <__assert_fail@plt+0x3744>
   14afc:	sub	r0, r4, #103	; 0x67
   14b00:	cmp	r0, #13
   14b04:	bhi	14b68 <__assert_fail@plt+0x3794>
   14b08:	mov	r1, #1
   14b0c:	movw	r2, #8273	; 0x2051
   14b10:	tst	r2, r1, lsl r0
   14b14:	beq	14b68 <__assert_fail@plt+0x3794>
   14b18:	mov	r0, r9
   14b1c:	mov	r1, #48	; 0x30
   14b20:	bl	112a8 <strchr@plt>
   14b24:	cmp	r0, #0
   14b28:	beq	14b64 <__assert_fail@plt+0x3790>
   14b2c:	ldrb	r0, [r6, #1]
   14b30:	cmp	r0, #66	; 0x42
   14b34:	cmpne	r0, #68	; 0x44
   14b38:	bne	14b48 <__assert_fail@plt+0x3774>
   14b3c:	mov	r3, #2
   14b40:	mov	r5, #1000	; 0x3e8
   14b44:	b	14b68 <__assert_fail@plt+0x3794>
   14b48:	cmp	r0, #105	; 0x69
   14b4c:	bne	14b64 <__assert_fail@plt+0x3790>
   14b50:	ldrb	r0, [r6, #2]
   14b54:	mov	r3, #1
   14b58:	cmp	r0, #66	; 0x42
   14b5c:	movweq	r3, #3
   14b60:	b	14b68 <__assert_fail@plt+0x3794>
   14b64:	mov	r3, #1
   14b68:	cmp	r4, #89	; 0x59
   14b6c:	bgt	14bdc <__assert_fail@plt+0x3808>
   14b70:	sub	r0, r4, #66	; 0x42
   14b74:	cmp	r0, #14
   14b78:	bhi	14c50 <__assert_fail@plt+0x387c>
   14b7c:	add	r1, pc, #0
   14b80:	ldr	pc, [r1, r0, lsl #2]
   14b84:	andeq	r4, r1, r0, asr #23
   14b88:	andeq	r4, r1, ip, lsl #27
   14b8c:	andeq	r4, r1, ip, lsl #27
   14b90:	muleq	r1, r8, sp
   14b94:	andeq	r4, r1, ip, lsl #27
   14b98:			; <UNDEFINED> instruction: 0x00014cb0
   14b9c:	andeq	r4, r1, ip, lsl #27
   14ba0:	andeq	r4, r1, ip, lsl #27
   14ba4:	andeq	r4, r1, ip, lsl #27
   14ba8:	ldrdeq	r4, [r1], -ip
   14bac:	andeq	r4, r1, ip, lsl #27
   14bb0:	andeq	r4, r1, r0, lsl #26
   14bb4:	andeq	r4, r1, ip, lsl #27
   14bb8:	andeq	r4, r1, ip, lsl #27
   14bbc:	andeq	r4, r1, r4, asr #27
   14bc0:	mov	r1, #0
   14bc4:	lsr	r0, r7, #22
   14bc8:	cmp	r1, r7, lsr #22
   14bcc:	lsl	r7, r7, #10
   14bd0:	movwne	r0, #1
   14bd4:	mvnne	r7, #0
   14bd8:	b	14dec <__assert_fail@plt+0x3a18>
   14bdc:	cmp	r4, #115	; 0x73
   14be0:	bgt	14c8c <__assert_fail@plt+0x38b8>
   14be4:	sub	r1, r4, #98	; 0x62
   14be8:	cmp	r1, #11
   14bec:	bhi	14d58 <__assert_fail@plt+0x3984>
   14bf0:	add	r2, pc, #4
   14bf4:	mov	r0, #0
   14bf8:	ldr	pc, [r2, r1, lsl #2]
   14bfc:	andeq	r4, r1, ip, lsr #24
   14c00:	andeq	r4, r1, ip, ror #27
   14c04:	andeq	r4, r1, ip, lsl #27
   14c08:	andeq	r4, r1, ip, lsl #27
   14c0c:	andeq	r4, r1, ip, lsl #27
   14c10:			; <UNDEFINED> instruction: 0x00014cb0
   14c14:	andeq	r4, r1, ip, lsl #27
   14c18:	andeq	r4, r1, ip, lsl #27
   14c1c:	andeq	r4, r1, ip, lsl #27
   14c20:	ldrdeq	r4, [r1], -ip
   14c24:	andeq	r4, r1, ip, lsl #27
   14c28:	andeq	r4, r1, r0, lsl #26
   14c2c:	movw	r0, #65535	; 0xffff
   14c30:	movt	r0, #63	; 0x3f
   14c34:	orr	r1, r0, #4194304	; 0x400000
   14c38:	mov	r0, #0
   14c3c:	cmp	r7, r1
   14c40:	lsl	r7, r7, #9
   14c44:	movwhi	r0, #1
   14c48:	mvnhi	r7, #0
   14c4c:	b	14dec <__assert_fail@plt+0x3a18>
   14c50:	cmp	r4, #84	; 0x54
   14c54:	beq	14d2c <__assert_fail@plt+0x3958>
   14c58:	cmp	r4, #89	; 0x59
   14c5c:	bne	14d8c <__assert_fail@plt+0x39b8>
   14c60:	mvn	r0, #0
   14c64:	mvn	r2, #7
   14c68:	udiv	r1, r0, r5
   14c6c:	mov	r0, #0
   14c70:	cmp	r1, r7
   14c74:	mul	r7, r7, r5
   14c78:	orrcc	r0, r0, #1
   14c7c:	mvncc	r7, #0
   14c80:	adds	r2, r2, #1
   14c84:	bcc	14c70 <__assert_fail@plt+0x389c>
   14c88:	b	14dec <__assert_fail@plt+0x3a18>
   14c8c:	cmp	r4, #116	; 0x74
   14c90:	beq	14d2c <__assert_fail@plt+0x3958>
   14c94:	cmp	r4, #119	; 0x77
   14c98:	bne	14d8c <__assert_fail@plt+0x39b8>
   14c9c:	cmp	r7, #0
   14ca0:	lsl	r1, r7, #1
   14ca4:	lsr	r0, r7, #31
   14ca8:	mvnmi	r1, #0
   14cac:	b	14cf8 <__assert_fail@plt+0x3924>
   14cb0:	mvn	r0, #0
   14cb4:	mvn	r2, #2
   14cb8:	udiv	r1, r0, r5
   14cbc:	mov	r0, #0
   14cc0:	cmp	r1, r7
   14cc4:	mul	r7, r7, r5
   14cc8:	orrcc	r0, r0, #1
   14ccc:	mvncc	r7, #0
   14cd0:	adds	r2, r2, #1
   14cd4:	bcc	14cc0 <__assert_fail@plt+0x38ec>
   14cd8:	b	14dec <__assert_fail@plt+0x3a18>
   14cdc:	mvn	r0, #0
   14ce0:	mul	r1, r7, r5
   14ce4:	udiv	r0, r0, r5
   14ce8:	cmp	r0, r7
   14cec:	mov	r0, #0
   14cf0:	mvncc	r1, #0
   14cf4:	movwcc	r0, #1
   14cf8:	mov	r7, r1
   14cfc:	b	14dec <__assert_fail@plt+0x3a18>
   14d00:	mvn	r0, #0
   14d04:	mvn	r2, #1
   14d08:	udiv	r1, r0, r5
   14d0c:	mov	r0, #0
   14d10:	cmp	r1, r7
   14d14:	mul	r7, r7, r5
   14d18:	orrcc	r0, r0, #1
   14d1c:	mvncc	r7, #0
   14d20:	adds	r2, r2, #1
   14d24:	bcc	14d10 <__assert_fail@plt+0x393c>
   14d28:	b	14dec <__assert_fail@plt+0x3a18>
   14d2c:	mvn	r0, #0
   14d30:	mvn	r2, #3
   14d34:	udiv	r1, r0, r5
   14d38:	mov	r0, #0
   14d3c:	cmp	r1, r7
   14d40:	mul	r7, r7, r5
   14d44:	orrcc	r0, r0, #1
   14d48:	mvncc	r7, #0
   14d4c:	adds	r2, r2, #1
   14d50:	bcc	14d3c <__assert_fail@plt+0x3968>
   14d54:	b	14dec <__assert_fail@plt+0x3a18>
   14d58:	cmp	r4, #90	; 0x5a
   14d5c:	bne	14d8c <__assert_fail@plt+0x39b8>
   14d60:	mvn	r0, #0
   14d64:	mvn	r2, #6
   14d68:	udiv	r1, r0, r5
   14d6c:	mov	r0, #0
   14d70:	cmp	r1, r7
   14d74:	mul	r7, r7, r5
   14d78:	orrcc	r0, r0, #1
   14d7c:	mvncc	r7, #0
   14d80:	adds	r2, r2, #1
   14d84:	bcc	14d70 <__assert_fail@plt+0x399c>
   14d88:	b	14dec <__assert_fail@plt+0x3a18>
   14d8c:	ldr	r0, [sp, #4]
   14d90:	orr	sl, sl, #2
   14d94:	b	14e08 <__assert_fail@plt+0x3a34>
   14d98:	mvn	r0, #0
   14d9c:	mvn	r2, #5
   14da0:	udiv	r1, r0, r5
   14da4:	mov	r0, #0
   14da8:	cmp	r1, r7
   14dac:	mul	r7, r7, r5
   14db0:	orrcc	r0, r0, #1
   14db4:	mvncc	r7, #0
   14db8:	adds	r2, r2, #1
   14dbc:	bcc	14da8 <__assert_fail@plt+0x39d4>
   14dc0:	b	14dec <__assert_fail@plt+0x3a18>
   14dc4:	mvn	r0, #0
   14dc8:	mvn	r2, #4
   14dcc:	udiv	r1, r0, r5
   14dd0:	mov	r0, #0
   14dd4:	cmp	r1, r7
   14dd8:	mul	r7, r7, r5
   14ddc:	orrcc	r0, r0, #1
   14de0:	mvncc	r7, #0
   14de4:	adds	r2, r2, #1
   14de8:	bcc	14dd4 <__assert_fail@plt+0x3a00>
   14dec:	add	r1, r6, r3
   14df0:	orr	sl, r0, sl
   14df4:	str	r1, [r8]
   14df8:	ldrb	r1, [r6, r3]
   14dfc:	cmp	r1, #0
   14e00:	orrne	sl, sl, #2
   14e04:	ldr	r0, [sp, #4]
   14e08:	str	r7, [r0]
   14e0c:	mov	r0, sl
   14e10:	sub	sp, fp, #28
   14e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e18:	movw	r0, #26693	; 0x6845
   14e1c:	movw	r1, #26731	; 0x686b
   14e20:	movw	r3, #26747	; 0x687b
   14e24:	mov	r2, #85	; 0x55
   14e28:	movt	r0, #1
   14e2c:	movt	r1, #1
   14e30:	movt	r3, #1
   14e34:	bl	113d4 <__assert_fail@plt>
   14e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e3c:	add	fp, sp, #28
   14e40:	sub	sp, sp, #20
   14e44:	cmp	r2, #37	; 0x25
   14e48:	bcs	154d4 <__assert_fail@plt+0x4100>
   14e4c:	mov	r8, r3
   14e50:	mov	r5, r2
   14e54:	mov	r6, r1
   14e58:	mov	r4, r0
   14e5c:	bl	112b4 <__errno_location@plt>
   14e60:	mov	r7, r0
   14e64:	mov	r0, #0
   14e68:	str	r0, [r7]
   14e6c:	bl	1126c <__ctype_b_loc@plt>
   14e70:	ldr	r1, [r0]
   14e74:	mov	r2, r4
   14e78:	ldrb	r0, [r2], #1
   14e7c:	add	r3, r1, r0, lsl #1
   14e80:	ldrb	r3, [r3, #1]
   14e84:	tst	r3, #32
   14e88:	bne	14e78 <__assert_fail@plt+0x3aa4>
   14e8c:	cmp	r6, #0
   14e90:	add	sl, sp, #16
   14e94:	movne	sl, r6
   14e98:	mov	r6, #4
   14e9c:	cmp	r0, #45	; 0x2d
   14ea0:	beq	154c8 <__assert_fail@plt+0x40f4>
   14ea4:	mov	r0, r4
   14ea8:	mov	r1, sl
   14eac:	mov	r2, r5
   14eb0:	str	r8, [sp, #12]
   14eb4:	bl	112fc <strtoumax@plt>
   14eb8:	ldr	r5, [sl]
   14ebc:	cmp	r5, r4
   14ec0:	beq	14ee8 <__assert_fail@plt+0x3b14>
   14ec4:	mov	r8, r0
   14ec8:	ldr	r0, [r7]
   14ecc:	mov	r9, r1
   14ed0:	cmp	r0, #0
   14ed4:	beq	14f1c <__assert_fail@plt+0x3b48>
   14ed8:	cmp	r0, #34	; 0x22
   14edc:	bne	154c8 <__assert_fail@plt+0x40f4>
   14ee0:	mov	r6, #1
   14ee4:	b	14f20 <__assert_fail@plt+0x3b4c>
   14ee8:	ldr	r0, [fp, #8]
   14eec:	cmp	r0, #0
   14ef0:	beq	154c8 <__assert_fail@plt+0x40f4>
   14ef4:	ldrb	r1, [r4]
   14ef8:	cmp	r1, #0
   14efc:	beq	154c8 <__assert_fail@plt+0x40f4>
   14f00:	bl	112a8 <strchr@plt>
   14f04:	cmp	r0, #0
   14f08:	beq	154c8 <__assert_fail@plt+0x40f4>
   14f0c:	mov	r6, #0
   14f10:	mov	r8, #1
   14f14:	mov	r9, #0
   14f18:	b	14f2c <__assert_fail@plt+0x3b58>
   14f1c:	mov	r6, r0
   14f20:	ldr	r0, [fp, #8]
   14f24:	cmp	r0, #0
   14f28:	beq	154c0 <__assert_fail@plt+0x40ec>
   14f2c:	ldrb	r7, [r5]
   14f30:	cmp	r7, #0
   14f34:	beq	154c0 <__assert_fail@plt+0x40ec>
   14f38:	ldr	r0, [fp, #8]
   14f3c:	mov	r1, r7
   14f40:	bl	112a8 <strchr@plt>
   14f44:	cmp	r0, #0
   14f48:	beq	15050 <__assert_fail@plt+0x3c7c>
   14f4c:	sub	r0, r7, #69	; 0x45
   14f50:	mov	r1, #1
   14f54:	mov	r3, #0
   14f58:	mov	r4, #1024	; 0x400
   14f5c:	cmp	r0, #21
   14f60:	str	r1, [sp, #8]
   14f64:	bhi	14f7c <__assert_fail@plt+0x3ba8>
   14f68:	movw	r2, #35141	; 0x8945
   14f6c:	mov	r1, #1
   14f70:	movt	r2, #48	; 0x30
   14f74:	tst	r2, r1, lsl r0
   14f78:	bne	14f98 <__assert_fail@plt+0x3bc4>
   14f7c:	sub	r0, r7, #103	; 0x67
   14f80:	cmp	r0, #13
   14f84:	bhi	14fcc <__assert_fail@plt+0x3bf8>
   14f88:	mov	r1, #1
   14f8c:	movw	r2, #8273	; 0x2051
   14f90:	tst	r2, r1, lsl r0
   14f94:	beq	14fcc <__assert_fail@plt+0x3bf8>
   14f98:	ldr	r0, [fp, #8]
   14f9c:	mov	r1, #48	; 0x30
   14fa0:	bl	112a8 <strchr@plt>
   14fa4:	cmp	r0, #0
   14fa8:	beq	14fc8 <__assert_fail@plt+0x3bf4>
   14fac:	ldrb	r0, [r5, #1]
   14fb0:	cmp	r0, #66	; 0x42
   14fb4:	cmpne	r0, #68	; 0x44
   14fb8:	bne	150e0 <__assert_fail@plt+0x3d0c>
   14fbc:	mov	r4, #1000	; 0x3e8
   14fc0:	mov	r0, #2
   14fc4:	str	r0, [sp, #8]
   14fc8:	mov	r3, #0
   14fcc:	cmp	r7, #89	; 0x59
   14fd0:	stm	sp, {r5, r6}
   14fd4:	bgt	1505c <__assert_fail@plt+0x3c88>
   14fd8:	sub	r0, r7, #66	; 0x42
   14fdc:	cmp	r0, #14
   14fe0:	bhi	15104 <__assert_fail@plt+0x3d30>
   14fe4:	add	r1, pc, #0
   14fe8:	ldr	pc, [r1, r0, lsl #2]
   14fec:	andeq	r5, r1, r8, lsr #32
   14ff0:			; <UNDEFINED> instruction: 0x000153b4
   14ff4:			; <UNDEFINED> instruction: 0x000153b4
   14ff8:	andeq	r5, r1, r8, asr #7
   14ffc:			; <UNDEFINED> instruction: 0x000153b4
   15000:			; <UNDEFINED> instruction: 0x000151b8
   15004:			; <UNDEFINED> instruction: 0x000153b4
   15008:			; <UNDEFINED> instruction: 0x000153b4
   1500c:			; <UNDEFINED> instruction: 0x000153b4
   15010:	andeq	r5, r1, r4, lsr #4
   15014:			; <UNDEFINED> instruction: 0x000153b4
   15018:	andeq	r5, r1, r8, ror #4
   1501c:			; <UNDEFINED> instruction: 0x000153b4
   15020:			; <UNDEFINED> instruction: 0x000153b4
   15024:	andeq	r5, r1, r4, lsr r4
   15028:	mov	r1, #0
   1502c:	lsl	r3, r9, #10
   15030:	lsl	r0, r8, #10
   15034:	lsr	r2, r9, #22
   15038:	cmp	r1, r9, lsr #22
   1503c:	orr	r3, r3, r8, lsr #22
   15040:	mvnne	r0, #0
   15044:	movwne	r2, #1
   15048:	cmp	r1, r9, lsr #22
   1504c:	b	150d0 <__assert_fail@plt+0x3cfc>
   15050:	ldr	r0, [sp, #12]
   15054:	orr	r6, r6, #2
   15058:	b	154c4 <__assert_fail@plt+0x40f0>
   1505c:	cmp	r7, #115	; 0x73
   15060:	bgt	15180 <__assert_fail@plt+0x3dac>
   15064:	sub	r0, r7, #98	; 0x62
   15068:	cmp	r0, #11
   1506c:	bhi	15340 <__assert_fail@plt+0x3f6c>
   15070:	add	r1, pc, #4
   15074:	mov	r2, #0
   15078:	ldr	pc, [r1, r0, lsl #2]
   1507c:	andeq	r5, r1, ip, lsr #1
   15080:	muleq	r1, ip, r4
   15084:			; <UNDEFINED> instruction: 0x000153b4
   15088:			; <UNDEFINED> instruction: 0x000153b4
   1508c:			; <UNDEFINED> instruction: 0x000153b4
   15090:			; <UNDEFINED> instruction: 0x000151b8
   15094:			; <UNDEFINED> instruction: 0x000153b4
   15098:			; <UNDEFINED> instruction: 0x000153b4
   1509c:			; <UNDEFINED> instruction: 0x000153b4
   150a0:	andeq	r5, r1, r4, lsr #4
   150a4:			; <UNDEFINED> instruction: 0x000153b4
   150a8:	andeq	r5, r1, r8, ror #4
   150ac:	mov	r1, #0
   150b0:	lsl	r3, r9, #9
   150b4:	lsl	r0, r8, #9
   150b8:	lsr	r2, r9, #23
   150bc:	cmp	r1, r9, lsr #23
   150c0:	orr	r3, r3, r8, lsr #23
   150c4:	mvnne	r0, #0
   150c8:	movwne	r2, #1
   150cc:	cmp	r1, r9, lsr #23
   150d0:	mvnne	r3, #0
   150d4:	mov	r8, r0
   150d8:	mov	r9, r3
   150dc:	b	1549c <__assert_fail@plt+0x40c8>
   150e0:	cmp	r0, #105	; 0x69
   150e4:	mov	r3, #0
   150e8:	bne	14fcc <__assert_fail@plt+0x3bf8>
   150ec:	ldrb	r0, [r5, #2]
   150f0:	mov	r1, #1
   150f4:	cmp	r0, #66	; 0x42
   150f8:	movweq	r1, #3
   150fc:	str	r1, [sp, #8]
   15100:	b	14fcc <__assert_fail@plt+0x3bf8>
   15104:	cmp	r7, #84	; 0x54
   15108:	beq	152d4 <__assert_fail@plt+0x3f00>
   1510c:	cmp	r7, #89	; 0x59
   15110:	bne	153b4 <__assert_fail@plt+0x3fe0>
   15114:	mvn	r0, #0
   15118:	mvn	r1, #0
   1511c:	mov	r2, r4
   15120:	mov	r5, r3
   15124:	bl	15c28 <__assert_fail@plt+0x4854>
   15128:	mov	ip, r5
   1512c:	mvn	lr, #0
   15130:	mov	r2, #0
   15134:	mvn	r3, #7
   15138:	mov	r5, r8
   1513c:	mov	r7, r9
   15140:	umull	r8, r6, r5, r4
   15144:	mvn	r9, #0
   15148:	mla	r6, r5, ip, r6
   1514c:	subs	r5, r0, r5
   15150:	sbcs	r5, r1, r7
   15154:	mov	r5, #0
   15158:	movwcc	r5, #1
   1515c:	cmp	r5, #0
   15160:	mlaeq	r9, r7, r4, r6
   15164:	movne	r8, lr
   15168:	orrne	r2, r2, #1
   1516c:	adds	r3, r3, #1
   15170:	mov	r5, r8
   15174:	mov	r7, r9
   15178:	bcc	15140 <__assert_fail@plt+0x3d6c>
   1517c:	b	1549c <__assert_fail@plt+0x40c8>
   15180:	cmp	r7, #116	; 0x74
   15184:	beq	152d4 <__assert_fail@plt+0x3f00>
   15188:	cmp	r7, #119	; 0x77
   1518c:	bne	153b4 <__assert_fail@plt+0x3fe0>
   15190:	lsl	r1, r9, #1
   15194:	cmp	r9, #0
   15198:	lsl	r0, r8, #1
   1519c:	lsr	r2, r9, #31
   151a0:	orr	r1, r1, r8, lsr #31
   151a4:	mvnmi	r0, #0
   151a8:	mvnmi	r1, #0
   151ac:	mov	r8, r0
   151b0:	mov	r9, r1
   151b4:	b	1549c <__assert_fail@plt+0x40c8>
   151b8:	mvn	r0, #0
   151bc:	mvn	r1, #0
   151c0:	mov	r2, r4
   151c4:	mov	r5, r3
   151c8:	bl	15c28 <__assert_fail@plt+0x4854>
   151cc:	mov	ip, r5
   151d0:	mvn	lr, #0
   151d4:	mov	r2, #0
   151d8:	mvn	r3, #2
   151dc:	mov	r6, r8
   151e0:	mov	r5, r9
   151e4:	umull	r8, r7, r6, r4
   151e8:	mvn	r9, #0
   151ec:	mla	r7, r6, ip, r7
   151f0:	subs	r6, r0, r6
   151f4:	sbcs	r6, r1, r5
   151f8:	mov	r6, #0
   151fc:	movwcc	r6, #1
   15200:	cmp	r6, #0
   15204:	mlaeq	r9, r5, r4, r7
   15208:	movne	r8, lr
   1520c:	orrne	r2, r2, #1
   15210:	adds	r3, r3, #1
   15214:	mov	r6, r8
   15218:	mov	r5, r9
   1521c:	bcc	151e4 <__assert_fail@plt+0x3e10>
   15220:	b	1549c <__assert_fail@plt+0x40c8>
   15224:	mvn	r0, #0
   15228:	mvn	r1, #0
   1522c:	mov	r2, r4
   15230:	mov	r5, r3
   15234:	bl	15c28 <__assert_fail@plt+0x4854>
   15238:	subs	r0, r0, r8
   1523c:	mov	r2, #0
   15240:	sbcs	r0, r1, r9
   15244:	umull	r0, r1, r8, r4
   15248:	movwcc	r2, #1
   1524c:	cmp	r2, #0
   15250:	mla	r1, r8, r5, r1
   15254:	mvnne	r0, #0
   15258:	mla	r9, r9, r4, r1
   1525c:	mvnne	r9, #0
   15260:	mov	r8, r0
   15264:	b	1549c <__assert_fail@plt+0x40c8>
   15268:	mvn	r0, #0
   1526c:	mvn	r1, #0
   15270:	mov	r2, r4
   15274:	mov	r5, r3
   15278:	bl	15c28 <__assert_fail@plt+0x4854>
   1527c:	mov	ip, r5
   15280:	mvn	lr, #0
   15284:	mov	r2, #0
   15288:	mvn	r3, #1
   1528c:	mov	r6, r8
   15290:	mov	r5, r9
   15294:	umull	r8, r7, r6, r4
   15298:	mvn	r9, #0
   1529c:	mla	r7, r6, ip, r7
   152a0:	subs	r6, r0, r6
   152a4:	sbcs	r6, r1, r5
   152a8:	mov	r6, #0
   152ac:	movwcc	r6, #1
   152b0:	cmp	r6, #0
   152b4:	mlaeq	r9, r5, r4, r7
   152b8:	movne	r8, lr
   152bc:	orrne	r2, r2, #1
   152c0:	adds	r3, r3, #1
   152c4:	mov	r6, r8
   152c8:	mov	r5, r9
   152cc:	bcc	15294 <__assert_fail@plt+0x3ec0>
   152d0:	b	1549c <__assert_fail@plt+0x40c8>
   152d4:	mvn	r0, #0
   152d8:	mvn	r1, #0
   152dc:	mov	r2, r4
   152e0:	mov	r5, r3
   152e4:	bl	15c28 <__assert_fail@plt+0x4854>
   152e8:	mov	ip, r5
   152ec:	mvn	lr, #0
   152f0:	mov	r2, #0
   152f4:	mvn	r3, #3
   152f8:	mov	r6, r8
   152fc:	mov	r5, r9
   15300:	umull	r8, r7, r6, r4
   15304:	mvn	r9, #0
   15308:	mla	r7, r6, ip, r7
   1530c:	subs	r6, r0, r6
   15310:	sbcs	r6, r1, r5
   15314:	mov	r6, #0
   15318:	movwcc	r6, #1
   1531c:	cmp	r6, #0
   15320:	mlaeq	r9, r5, r4, r7
   15324:	movne	r8, lr
   15328:	orrne	r2, r2, #1
   1532c:	adds	r3, r3, #1
   15330:	mov	r6, r8
   15334:	mov	r5, r9
   15338:	bcc	15300 <__assert_fail@plt+0x3f2c>
   1533c:	b	1549c <__assert_fail@plt+0x40c8>
   15340:	cmp	r7, #90	; 0x5a
   15344:	bne	153b4 <__assert_fail@plt+0x3fe0>
   15348:	mvn	r0, #0
   1534c:	mvn	r1, #0
   15350:	mov	r2, r4
   15354:	mov	r5, r3
   15358:	bl	15c28 <__assert_fail@plt+0x4854>
   1535c:	mov	ip, r5
   15360:	mvn	lr, #0
   15364:	mov	r2, #0
   15368:	mvn	r3, #6
   1536c:	mov	r5, r8
   15370:	mov	r7, r9
   15374:	umull	r8, r6, r5, r4
   15378:	mvn	r9, #0
   1537c:	mla	r6, r5, ip, r6
   15380:	subs	r5, r0, r5
   15384:	sbcs	r5, r1, r7
   15388:	mov	r5, #0
   1538c:	movwcc	r5, #1
   15390:	cmp	r5, #0
   15394:	mlaeq	r9, r7, r4, r6
   15398:	movne	r8, lr
   1539c:	orrne	r2, r2, #1
   153a0:	adds	r3, r3, #1
   153a4:	mov	r5, r8
   153a8:	mov	r7, r9
   153ac:	bcc	15374 <__assert_fail@plt+0x3fa0>
   153b0:	b	1549c <__assert_fail@plt+0x40c8>
   153b4:	ldr	r0, [sp, #12]
   153b8:	strd	r8, [r0]
   153bc:	ldr	r6, [sp, #4]
   153c0:	orr	r6, r6, #2
   153c4:	b	154c8 <__assert_fail@plt+0x40f4>
   153c8:	mvn	r0, #0
   153cc:	mvn	r1, #0
   153d0:	mov	r2, r4
   153d4:	mov	r5, r3
   153d8:	bl	15c28 <__assert_fail@plt+0x4854>
   153dc:	mov	ip, r5
   153e0:	mvn	lr, #0
   153e4:	mov	r2, #0
   153e8:	mvn	r3, #5
   153ec:	mov	r5, r8
   153f0:	mov	r7, r9
   153f4:	umull	r8, r6, r5, r4
   153f8:	mvn	r9, #0
   153fc:	mla	r6, r5, ip, r6
   15400:	subs	r5, r0, r5
   15404:	sbcs	r5, r1, r7
   15408:	mov	r5, #0
   1540c:	movwcc	r5, #1
   15410:	cmp	r5, #0
   15414:	mlaeq	r9, r7, r4, r6
   15418:	movne	r8, lr
   1541c:	orrne	r2, r2, #1
   15420:	adds	r3, r3, #1
   15424:	mov	r5, r8
   15428:	mov	r7, r9
   1542c:	bcc	153f4 <__assert_fail@plt+0x4020>
   15430:	b	1549c <__assert_fail@plt+0x40c8>
   15434:	mvn	r0, #0
   15438:	mvn	r1, #0
   1543c:	mov	r2, r4
   15440:	mov	r5, r3
   15444:	bl	15c28 <__assert_fail@plt+0x4854>
   15448:	mov	ip, r5
   1544c:	mvn	lr, #0
   15450:	mov	r2, #0
   15454:	mvn	r3, #4
   15458:	mov	r5, r8
   1545c:	mov	r7, r9
   15460:	umull	r8, r6, r5, r4
   15464:	mvn	r9, #0
   15468:	mla	r6, r5, ip, r6
   1546c:	subs	r5, r0, r5
   15470:	sbcs	r5, r1, r7
   15474:	mov	r5, #0
   15478:	movwcc	r5, #1
   1547c:	cmp	r5, #0
   15480:	mlaeq	r9, r7, r4, r6
   15484:	movne	r8, lr
   15488:	orrne	r2, r2, #1
   1548c:	adds	r3, r3, #1
   15490:	mov	r5, r8
   15494:	mov	r7, r9
   15498:	bcc	15460 <__assert_fail@plt+0x408c>
   1549c:	ldr	r1, [sp]
   154a0:	ldr	r3, [sp, #8]
   154a4:	ldr	r6, [sp, #4]
   154a8:	add	r0, r1, r3
   154ac:	orr	r6, r2, r6
   154b0:	str	r0, [sl]
   154b4:	ldrb	r0, [r1, r3]
   154b8:	cmp	r0, #0
   154bc:	orrne	r6, r6, #2
   154c0:	ldr	r0, [sp, #12]
   154c4:	strd	r8, [r0]
   154c8:	mov	r0, r6
   154cc:	sub	sp, fp, #28
   154d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d4:	movw	r0, #26693	; 0x6845
   154d8:	movw	r1, #26731	; 0x686b
   154dc:	movw	r3, #26828	; 0x68cc
   154e0:	mov	r2, #85	; 0x55
   154e4:	movt	r0, #1
   154e8:	movt	r1, #1
   154ec:	movt	r3, #1
   154f0:	bl	113d4 <__assert_fail@plt>
   154f4:	clz	r2, r1
   154f8:	clz	r3, r0
   154fc:	lsr	r2, r2, #5
   15500:	lsr	r3, r3, #5
   15504:	orrs	r2, r3, r2
   15508:	movwne	r1, #1
   1550c:	movwne	r0, #1
   15510:	cmp	r1, #0
   15514:	beq	15544 <__assert_fail@plt+0x4170>
   15518:	mvn	r2, #-2147483648	; 0x80000000
   1551c:	udiv	r2, r2, r1
   15520:	cmp	r2, r0
   15524:	bcs	15544 <__assert_fail@plt+0x4170>
   15528:	push	{fp, lr}
   1552c:	mov	fp, sp
   15530:	bl	112b4 <__errno_location@plt>
   15534:	mov	r1, #12
   15538:	str	r1, [r0]
   1553c:	mov	r0, #0
   15540:	pop	{fp, pc}
   15544:	b	110e0 <calloc@plt>
   15548:	cmp	r0, #0
   1554c:	movweq	r0, #1
   15550:	cmn	r0, #1
   15554:	ble	1555c <__assert_fail@plt+0x4188>
   15558:	b	11230 <malloc@plt>
   1555c:	push	{fp, lr}
   15560:	mov	fp, sp
   15564:	bl	112b4 <__errno_location@plt>
   15568:	mov	r1, #12
   1556c:	str	r1, [r0]
   15570:	mov	r0, #0
   15574:	pop	{fp, pc}
   15578:	push	{fp, lr}
   1557c:	mov	fp, sp
   15580:	cmp	r0, #0
   15584:	beq	155a0 <__assert_fail@plt+0x41cc>
   15588:	cmp	r1, #0
   1558c:	beq	155ac <__assert_fail@plt+0x41d8>
   15590:	cmn	r1, #1
   15594:	ble	155b4 <__assert_fail@plt+0x41e0>
   15598:	pop	{fp, lr}
   1559c:	b	11188 <realloc@plt>
   155a0:	mov	r0, r1
   155a4:	pop	{fp, lr}
   155a8:	b	15548 <__assert_fail@plt+0x4174>
   155ac:	bl	12170 <__assert_fail@plt+0xd9c>
   155b0:	b	155c0 <__assert_fail@plt+0x41ec>
   155b4:	bl	112b4 <__errno_location@plt>
   155b8:	mov	r1, #12
   155bc:	str	r1, [r0]
   155c0:	mov	r0, #0
   155c4:	pop	{fp, pc}
   155c8:	push	{r4, r5, r6, sl, fp, lr}
   155cc:	add	fp, sp, #16
   155d0:	mov	r4, r0
   155d4:	bl	111e8 <__fpending@plt>
   155d8:	mov	r5, r0
   155dc:	mov	r0, r4
   155e0:	bl	111f4 <ferror_unlocked@plt>
   155e4:	mov	r6, r0
   155e8:	mov	r0, r4
   155ec:	bl	15648 <__assert_fail@plt+0x4274>
   155f0:	cmp	r6, #0
   155f4:	beq	15614 <__assert_fail@plt+0x4240>
   155f8:	mvn	r4, #0
   155fc:	cmp	r0, #0
   15600:	bne	15640 <__assert_fail@plt+0x426c>
   15604:	bl	112b4 <__errno_location@plt>
   15608:	mov	r1, #0
   1560c:	str	r1, [r0]
   15610:	b	15640 <__assert_fail@plt+0x426c>
   15614:	cmp	r0, #0
   15618:	mov	r4, r0
   1561c:	mvnne	r4, #0
   15620:	cmp	r5, #0
   15624:	bne	15640 <__assert_fail@plt+0x426c>
   15628:	cmp	r0, #0
   1562c:	beq	15640 <__assert_fail@plt+0x426c>
   15630:	bl	112b4 <__errno_location@plt>
   15634:	ldr	r0, [r0]
   15638:	subs	r4, r0, #9
   1563c:	mvnne	r4, #0
   15640:	mov	r0, r4
   15644:	pop	{r4, r5, r6, sl, fp, pc}
   15648:	push	{r4, r5, r6, sl, fp, lr}
   1564c:	add	fp, sp, #16
   15650:	sub	sp, sp, #8
   15654:	mov	r4, r0
   15658:	bl	112f0 <fileno@plt>
   1565c:	cmn	r0, #1
   15660:	ble	156d4 <__assert_fail@plt+0x4300>
   15664:	mov	r0, r4
   15668:	bl	11248 <__freading@plt>
   1566c:	cmp	r0, #0
   15670:	beq	1569c <__assert_fail@plt+0x42c8>
   15674:	mov	r0, r4
   15678:	bl	112f0 <fileno@plt>
   1567c:	mov	r1, #1
   15680:	mov	r2, #0
   15684:	mov	r3, #0
   15688:	str	r1, [sp]
   1568c:	bl	111c4 <lseek64@plt>
   15690:	and	r0, r0, r1
   15694:	cmn	r0, #1
   15698:	beq	156d4 <__assert_fail@plt+0x4300>
   1569c:	mov	r0, r4
   156a0:	bl	156e4 <__assert_fail@plt+0x4310>
   156a4:	cmp	r0, #0
   156a8:	beq	156d4 <__assert_fail@plt+0x4300>
   156ac:	bl	112b4 <__errno_location@plt>
   156b0:	ldr	r6, [r0]
   156b4:	mov	r5, r0
   156b8:	mov	r0, r4
   156bc:	bl	11314 <fclose@plt>
   156c0:	cmp	r6, #0
   156c4:	strne	r6, [r5]
   156c8:	mvnne	r0, #0
   156cc:	sub	sp, fp, #16
   156d0:	pop	{r4, r5, r6, sl, fp, pc}
   156d4:	mov	r0, r4
   156d8:	sub	sp, fp, #16
   156dc:	pop	{r4, r5, r6, sl, fp, lr}
   156e0:	b	11314 <fclose@plt>
   156e4:	push	{r4, sl, fp, lr}
   156e8:	add	fp, sp, #8
   156ec:	sub	sp, sp, #8
   156f0:	mov	r4, r0
   156f4:	cmp	r0, #0
   156f8:	beq	15730 <__assert_fail@plt+0x435c>
   156fc:	mov	r0, r4
   15700:	bl	11248 <__freading@plt>
   15704:	cmp	r0, #0
   15708:	beq	15730 <__assert_fail@plt+0x435c>
   1570c:	ldrb	r0, [r4, #1]
   15710:	tst	r0, #1
   15714:	beq	15730 <__assert_fail@plt+0x435c>
   15718:	mov	r0, #1
   1571c:	mov	r2, #0
   15720:	mov	r3, #0
   15724:	str	r0, [sp]
   15728:	mov	r0, r4
   1572c:	bl	15740 <__assert_fail@plt+0x436c>
   15730:	mov	r0, r4
   15734:	sub	sp, fp, #8
   15738:	pop	{r4, sl, fp, lr}
   1573c:	b	11134 <fflush@plt>
   15740:	push	{r4, r5, r6, r7, fp, lr}
   15744:	add	fp, sp, #16
   15748:	sub	sp, sp, #8
   1574c:	mov	r4, r0
   15750:	ldr	r0, [r0, #4]
   15754:	mov	r5, r3
   15758:	mov	r6, r2
   1575c:	ldr	r1, [r4, #8]
   15760:	cmp	r1, r0
   15764:	bne	15780 <__assert_fail@plt+0x43ac>
   15768:	ldrd	r0, [r4, #16]
   1576c:	cmp	r1, r0
   15770:	bne	15780 <__assert_fail@plt+0x43ac>
   15774:	ldr	r0, [r4, #36]	; 0x24
   15778:	cmp	r0, #0
   1577c:	beq	15798 <__assert_fail@plt+0x43c4>
   15780:	mov	r0, r4
   15784:	mov	r2, r6
   15788:	mov	r3, r5
   1578c:	sub	sp, fp, #16
   15790:	pop	{r4, r5, r6, r7, fp, lr}
   15794:	b	11320 <fseeko64@plt>
   15798:	ldr	r7, [fp, #8]
   1579c:	mov	r0, r4
   157a0:	bl	112f0 <fileno@plt>
   157a4:	mov	r2, r6
   157a8:	mov	r3, r5
   157ac:	str	r7, [sp]
   157b0:	bl	111c4 <lseek64@plt>
   157b4:	and	r2, r0, r1
   157b8:	cmn	r2, #1
   157bc:	beq	157d8 <__assert_fail@plt+0x4404>
   157c0:	strd	r0, [r4, #80]	; 0x50
   157c4:	ldr	r0, [r4]
   157c8:	bic	r0, r0, #16
   157cc:	str	r0, [r4]
   157d0:	mov	r0, #0
   157d4:	b	157dc <__assert_fail@plt+0x4408>
   157d8:	mvn	r0, #0
   157dc:	sub	sp, fp, #16
   157e0:	pop	{r4, r5, r6, r7, fp, pc}
   157e4:	push	{r4, r5, r6, sl, fp, lr}
   157e8:	add	fp, sp, #16
   157ec:	mov	r5, r0
   157f0:	mov	r0, #0
   157f4:	mov	r4, r1
   157f8:	add	r6, r2, #19
   157fc:	strb	r0, [r2, #20]
   15800:	mov	r0, r5
   15804:	mov	r1, r4
   15808:	mov	r2, #10
   1580c:	mov	r3, #0
   15810:	bl	15c28 <__assert_fail@plt+0x4854>
   15814:	add	r2, r0, r0, lsl #2
   15818:	sub	r2, r5, r2, lsl #1
   1581c:	orr	r2, r2, #48	; 0x30
   15820:	strb	r2, [r6], #-1
   15824:	rsbs	r2, r5, #9
   15828:	mov	r5, r0
   1582c:	rscs	r2, r4, #0
   15830:	mov	r4, r1
   15834:	bcc	15800 <__assert_fail@plt+0x442c>
   15838:	add	r0, r6, #1
   1583c:	pop	{r4, r5, r6, sl, fp, pc}
   15840:	push	{fp, lr}
   15844:	mov	fp, sp
   15848:	mov	r0, #14
   1584c:	bl	1135c <nl_langinfo@plt>
   15850:	movw	r1, #24252	; 0x5ebc
   15854:	cmp	r0, #0
   15858:	movt	r1, #1
   1585c:	movne	r1, r0
   15860:	movw	r0, #26907	; 0x691b
   15864:	ldrb	r2, [r1]
   15868:	movt	r0, #1
   1586c:	cmp	r2, #0
   15870:	movne	r0, r1
   15874:	pop	{fp, pc}
   15878:	push	{r4, r5, r6, r7, fp, lr}
   1587c:	add	fp, sp, #16
   15880:	sub	sp, sp, #8
   15884:	cmp	r0, #0
   15888:	add	r5, sp, #4
   1588c:	mov	r7, r2
   15890:	mov	r4, r1
   15894:	movne	r5, r0
   15898:	mov	r0, r5
   1589c:	bl	11200 <mbrtowc@plt>
   158a0:	mov	r6, r0
   158a4:	cmp	r7, #0
   158a8:	beq	158d0 <__assert_fail@plt+0x44fc>
   158ac:	cmn	r6, #2
   158b0:	bcc	158d0 <__assert_fail@plt+0x44fc>
   158b4:	mov	r0, #0
   158b8:	bl	15b28 <__assert_fail@plt+0x4754>
   158bc:	cmp	r0, #0
   158c0:	bne	158d0 <__assert_fail@plt+0x44fc>
   158c4:	ldrb	r0, [r4]
   158c8:	mov	r6, #1
   158cc:	str	r0, [r5]
   158d0:	mov	r0, r6
   158d4:	sub	sp, fp, #16
   158d8:	pop	{r4, r5, r6, r7, fp, pc}
   158dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158e0:	add	fp, sp, #28
   158e4:	sub	sp, sp, #12
   158e8:	mov	r5, r2
   158ec:	mov	sl, r1
   158f0:	cmp	r0, #0
   158f4:	beq	1597c <__assert_fail@plt+0x45a8>
   158f8:	mov	r7, r0
   158fc:	mov	r8, #10
   15900:	mov	r0, #0
   15904:	mov	r1, #40	; 0x28
   15908:	str	r8, [sp, #8]
   1590c:	bl	15578 <__assert_fail@plt+0x41a4>
   15910:	mvn	r9, #0
   15914:	cmp	r0, #0
   15918:	beq	15aac <__assert_fail@plt+0x46d8>
   1591c:	str	r5, [sp, #4]
   15920:	mov	r4, r0
   15924:	add	r5, sp, #8
   15928:	mov	r0, r7
   1592c:	mov	r1, sl
   15930:	mov	r2, r4
   15934:	mov	r3, r5
   15938:	bl	112cc <getgrouplist@plt>
   1593c:	ldr	r1, [sp, #8]
   15940:	mov	r6, r0
   15944:	cmn	r0, #1
   15948:	bgt	15958 <__assert_fail@plt+0x4584>
   1594c:	cmp	r8, r1
   15950:	lsleq	r1, r8, #1
   15954:	streq	r1, [sp, #8]
   15958:	mov	r0, r4
   1595c:	bl	15ac0 <__assert_fail@plt+0x46ec>
   15960:	cmp	r0, #0
   15964:	beq	15a44 <__assert_fail@plt+0x4670>
   15968:	cmn	r6, #1
   1596c:	bgt	15a4c <__assert_fail@plt+0x4678>
   15970:	ldr	r8, [sp, #8]
   15974:	mov	r4, r0
   15978:	b	15928 <__assert_fail@plt+0x4554>
   1597c:	mov	r0, #0
   15980:	mov	r1, #0
   15984:	bl	11374 <getgroups@plt>
   15988:	cmn	r0, #1
   1598c:	str	r0, [sp, #8]
   15990:	ble	15a5c <__assert_fail@plt+0x4688>
   15994:	mov	r4, r0
   15998:	cmn	sl, #1
   1599c:	bne	159a8 <__assert_fail@plt+0x45d4>
   159a0:	cmp	r4, #0
   159a4:	bne	159b0 <__assert_fail@plt+0x45dc>
   159a8:	add	r4, r4, #1
   159ac:	str	r4, [sp, #8]
   159b0:	mov	r0, #0
   159b4:	mov	r1, r4
   159b8:	bl	15ac0 <__assert_fail@plt+0x46ec>
   159bc:	cmp	r0, #0
   159c0:	beq	15a9c <__assert_fail@plt+0x46c8>
   159c4:	mvn	r9, #0
   159c8:	mov	r7, r0
   159cc:	subs	r1, sl, r9
   159d0:	movwne	r1, #1
   159d4:	sub	r0, r4, r1
   159d8:	add	r1, r7, r1, lsl #2
   159dc:	bl	11374 <getgroups@plt>
   159e0:	cmn	r0, #1
   159e4:	ble	15aa4 <__assert_fail@plt+0x46d0>
   159e8:	cmn	sl, #1
   159ec:	addne	r0, r0, #1
   159f0:	strne	sl, [r7]
   159f4:	str	r7, [r5]
   159f8:	cmp	r0, #2
   159fc:	blt	15ab8 <__assert_fail@plt+0x46e4>
   15a00:	mov	r2, r7
   15a04:	add	r1, r7, r0, lsl #2
   15a08:	mov	r9, r0
   15a0c:	ldr	r6, [r2], #4
   15a10:	mov	r3, r6
   15a14:	ldr	r0, [r2]
   15a18:	cmp	r0, r6
   15a1c:	cmpne	r0, r3
   15a20:	bne	15a2c <__assert_fail@plt+0x4658>
   15a24:	sub	r9, r9, #1
   15a28:	b	15a34 <__assert_fail@plt+0x4660>
   15a2c:	str	r0, [r7, #4]!
   15a30:	mov	r3, r0
   15a34:	add	r2, r2, #4
   15a38:	cmp	r2, r1
   15a3c:	bcc	15a14 <__assert_fail@plt+0x4640>
   15a40:	b	15aac <__assert_fail@plt+0x46d8>
   15a44:	mov	r0, r4
   15a48:	b	15aa8 <__assert_fail@plt+0x46d4>
   15a4c:	ldr	r1, [sp, #4]
   15a50:	str	r0, [r1]
   15a54:	ldr	r9, [sp, #8]
   15a58:	b	15aac <__assert_fail@plt+0x46d8>
   15a5c:	bl	112b4 <__errno_location@plt>
   15a60:	ldr	r0, [r0]
   15a64:	mvn	r9, #0
   15a68:	cmp	r0, #38	; 0x26
   15a6c:	bne	15aac <__assert_fail@plt+0x46d8>
   15a70:	mov	r0, #0
   15a74:	mov	r1, #4
   15a78:	bl	15578 <__assert_fail@plt+0x41a4>
   15a7c:	cmp	r0, #0
   15a80:	beq	15aac <__assert_fail@plt+0x46d8>
   15a84:	str	r0, [r5]
   15a88:	str	sl, [r0]
   15a8c:	mvn	r0, #0
   15a90:	subs	r9, sl, r0
   15a94:	movwne	r9, #1
   15a98:	b	15aac <__assert_fail@plt+0x46d8>
   15a9c:	mvn	r9, #0
   15aa0:	b	15aac <__assert_fail@plt+0x46d8>
   15aa4:	mov	r0, r7
   15aa8:	bl	12170 <__assert_fail@plt+0xd9c>
   15aac:	mov	r0, r9
   15ab0:	sub	sp, fp, #28
   15ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ab8:	mov	r9, r0
   15abc:	b	15aac <__assert_fail@plt+0x46d8>
   15ac0:	cmp	r1, #536870912	; 0x20000000
   15ac4:	bcc	15ae4 <__assert_fail@plt+0x4710>
   15ac8:	push	{fp, lr}
   15acc:	mov	fp, sp
   15ad0:	bl	112b4 <__errno_location@plt>
   15ad4:	mov	r1, #12
   15ad8:	str	r1, [r0]
   15adc:	mov	r0, #0
   15ae0:	pop	{fp, pc}
   15ae4:	lsl	r1, r1, #2
   15ae8:	b	15578 <__assert_fail@plt+0x41a4>
   15aec:	cmp	r2, #0
   15af0:	beq	15b20 <__assert_fail@plt+0x474c>
   15af4:	mvn	r3, #0
   15af8:	udiv	r3, r3, r2
   15afc:	cmp	r3, r1
   15b00:	bcs	15b20 <__assert_fail@plt+0x474c>
   15b04:	push	{fp, lr}
   15b08:	mov	fp, sp
   15b0c:	bl	112b4 <__errno_location@plt>
   15b10:	mov	r1, #12
   15b14:	str	r1, [r0]
   15b18:	mov	r0, #0
   15b1c:	pop	{fp, pc}
   15b20:	mul	r1, r2, r1
   15b24:	b	15578 <__assert_fail@plt+0x41a4>
   15b28:	push	{r4, sl, fp, lr}
   15b2c:	add	fp, sp, #8
   15b30:	sub	sp, sp, #264	; 0x108
   15b34:	add	r1, sp, #7
   15b38:	movw	r2, #257	; 0x101
   15b3c:	bl	15b94 <__assert_fail@plt+0x47c0>
   15b40:	mov	r4, #0
   15b44:	cmp	r0, #0
   15b48:	bne	15b88 <__assert_fail@plt+0x47b4>
   15b4c:	movw	r1, #26913	; 0x6921
   15b50:	add	r0, sp, #7
   15b54:	mov	r2, #2
   15b58:	movt	r1, #1
   15b5c:	bl	11284 <bcmp@plt>
   15b60:	cmp	r0, #0
   15b64:	beq	15b88 <__assert_fail@plt+0x47b4>
   15b68:	movw	r1, #26915	; 0x6923
   15b6c:	add	r0, sp, #7
   15b70:	mov	r2, #6
   15b74:	movt	r1, #1
   15b78:	bl	11284 <bcmp@plt>
   15b7c:	cmp	r0, #0
   15b80:	mov	r4, r0
   15b84:	movwne	r4, #1
   15b88:	mov	r0, r4
   15b8c:	sub	sp, fp, #8
   15b90:	pop	{r4, sl, fp, pc}
   15b94:	push	{r4, r5, r6, r7, fp, lr}
   15b98:	add	fp, sp, #16
   15b9c:	mov	r4, r1
   15ba0:	mov	r1, #0
   15ba4:	mov	r6, r2
   15ba8:	bl	11338 <setlocale@plt>
   15bac:	cmp	r0, #0
   15bb0:	beq	15bdc <__assert_fail@plt+0x4808>
   15bb4:	mov	r7, r0
   15bb8:	bl	1129c <strlen@plt>
   15bbc:	cmp	r0, r6
   15bc0:	bcs	15bf0 <__assert_fail@plt+0x481c>
   15bc4:	add	r2, r0, #1
   15bc8:	mov	r0, r4
   15bcc:	mov	r1, r7
   15bd0:	bl	11158 <memcpy@plt>
   15bd4:	mov	r5, #0
   15bd8:	b	15c18 <__assert_fail@plt+0x4844>
   15bdc:	cmp	r6, #0
   15be0:	mov	r5, #22
   15be4:	movne	r0, #0
   15be8:	strbne	r0, [r4]
   15bec:	b	15c18 <__assert_fail@plt+0x4844>
   15bf0:	mov	r5, #34	; 0x22
   15bf4:	cmp	r6, #0
   15bf8:	beq	15c18 <__assert_fail@plt+0x4844>
   15bfc:	sub	r6, r6, #1
   15c00:	mov	r0, r4
   15c04:	mov	r1, r7
   15c08:	mov	r2, r6
   15c0c:	bl	11158 <memcpy@plt>
   15c10:	mov	r0, #0
   15c14:	strb	r0, [r4, r6]
   15c18:	mov	r0, r5
   15c1c:	pop	{r4, r5, r6, r7, fp, pc}
   15c20:	mov	r1, #0
   15c24:	b	11338 <setlocale@plt>
   15c28:	cmp	r3, #0
   15c2c:	cmpeq	r2, #0
   15c30:	bne	15c48 <__assert_fail@plt+0x4874>
   15c34:	cmp	r1, #0
   15c38:	cmpeq	r0, #0
   15c3c:	mvnne	r1, #0
   15c40:	mvnne	r0, #0
   15c44:	b	15c64 <__assert_fail@plt+0x4890>
   15c48:	sub	sp, sp, #8
   15c4c:	push	{sp, lr}
   15c50:	bl	15c74 <__assert_fail@plt+0x48a0>
   15c54:	ldr	lr, [sp, #4]
   15c58:	add	sp, sp, #8
   15c5c:	pop	{r2, r3}
   15c60:	bx	lr
   15c64:	push	{r1, lr}
   15c68:	mov	r0, #8
   15c6c:	bl	11104 <raise@plt>
   15c70:	pop	{r1, pc}
   15c74:	cmp	r1, r3
   15c78:	cmpeq	r0, r2
   15c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c80:	mov	r4, r0
   15c84:	movcc	r0, #0
   15c88:	mov	r5, r1
   15c8c:	ldr	lr, [sp, #36]	; 0x24
   15c90:	movcc	r1, r0
   15c94:	bcc	15d90 <__assert_fail@plt+0x49bc>
   15c98:	cmp	r3, #0
   15c9c:	clzeq	ip, r2
   15ca0:	clzne	ip, r3
   15ca4:	addeq	ip, ip, #32
   15ca8:	cmp	r5, #0
   15cac:	clzeq	r1, r4
   15cb0:	addeq	r1, r1, #32
   15cb4:	clzne	r1, r5
   15cb8:	sub	ip, ip, r1
   15cbc:	sub	sl, ip, #32
   15cc0:	lsl	r9, r3, ip
   15cc4:	rsb	fp, ip, #32
   15cc8:	orr	r9, r9, r2, lsl sl
   15ccc:	orr	r9, r9, r2, lsr fp
   15cd0:	lsl	r8, r2, ip
   15cd4:	cmp	r5, r9
   15cd8:	cmpeq	r4, r8
   15cdc:	movcc	r0, #0
   15ce0:	movcc	r1, r0
   15ce4:	bcc	15d00 <__assert_fail@plt+0x492c>
   15ce8:	mov	r0, #1
   15cec:	subs	r4, r4, r8
   15cf0:	lsl	r1, r0, sl
   15cf4:	orr	r1, r1, r0, lsr fp
   15cf8:	lsl	r0, r0, ip
   15cfc:	sbc	r5, r5, r9
   15d00:	cmp	ip, #0
   15d04:	beq	15d90 <__assert_fail@plt+0x49bc>
   15d08:	lsr	r6, r8, #1
   15d0c:	orr	r6, r6, r9, lsl #31
   15d10:	lsr	r7, r9, #1
   15d14:	mov	r2, ip
   15d18:	b	15d3c <__assert_fail@plt+0x4968>
   15d1c:	subs	r3, r4, r6
   15d20:	sbc	r8, r5, r7
   15d24:	adds	r3, r3, r3
   15d28:	adc	r8, r8, r8
   15d2c:	adds	r4, r3, #1
   15d30:	adc	r5, r8, #0
   15d34:	subs	r2, r2, #1
   15d38:	beq	15d58 <__assert_fail@plt+0x4984>
   15d3c:	cmp	r5, r7
   15d40:	cmpeq	r4, r6
   15d44:	bcs	15d1c <__assert_fail@plt+0x4948>
   15d48:	adds	r4, r4, r4
   15d4c:	adc	r5, r5, r5
   15d50:	subs	r2, r2, #1
   15d54:	bne	15d3c <__assert_fail@plt+0x4968>
   15d58:	lsr	r3, r4, ip
   15d5c:	orr	r3, r3, r5, lsl fp
   15d60:	lsr	r2, r5, ip
   15d64:	orr	r3, r3, r5, lsr sl
   15d68:	adds	r0, r0, r4
   15d6c:	mov	r4, r3
   15d70:	lsl	r3, r2, ip
   15d74:	orr	r3, r3, r4, lsl sl
   15d78:	lsl	ip, r4, ip
   15d7c:	orr	r3, r3, r4, lsr fp
   15d80:	adc	r1, r1, r5
   15d84:	subs	r0, r0, ip
   15d88:	mov	r5, r2
   15d8c:	sbc	r1, r1, r3
   15d90:	cmp	lr, #0
   15d94:	strdne	r4, [lr]
   15d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15da0:	mov	r7, r0
   15da4:	ldr	r6, [pc, #72]	; 15df4 <__assert_fail@plt+0x4a20>
   15da8:	ldr	r5, [pc, #72]	; 15df8 <__assert_fail@plt+0x4a24>
   15dac:	add	r6, pc, r6
   15db0:	add	r5, pc, r5
   15db4:	sub	r6, r6, r5
   15db8:	mov	r8, r1
   15dbc:	mov	r9, r2
   15dc0:	bl	110c0 <calloc@plt-0x20>
   15dc4:	asrs	r6, r6, #2
   15dc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15dcc:	mov	r4, #0
   15dd0:	add	r4, r4, #1
   15dd4:	ldr	r3, [r5], #4
   15dd8:	mov	r2, r9
   15ddc:	mov	r1, r8
   15de0:	mov	r0, r7
   15de4:	blx	r3
   15de8:	cmp	r6, r4
   15dec:	bne	15dd0 <__assert_fail@plt+0x49fc>
   15df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15df4:	andeq	r1, r1, r8, asr r1
   15df8:	andeq	r1, r1, r0, asr r1
   15dfc:	bx	lr
   15e00:	ldr	r3, [pc, #12]	; 15e14 <__assert_fail@plt+0x4a40>
   15e04:	mov	r1, #0
   15e08:	add	r3, pc, r3
   15e0c:	ldr	r2, [r3]
   15e10:	b	112c0 <__cxa_atexit@plt>
   15e14:	andeq	r1, r1, r4, lsl #6

Disassembly of section .fini:

00015e18 <.fini>:
   15e18:	push	{r3, lr}
   15e1c:	pop	{r3, pc}
