
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011118 <.init>:
   11118:	push	{r3, lr}
   1111c:	bl	1148c <__assert_fail@plt+0x54>
   11120:	pop	{r3, pc}

Disassembly of section .plt:

00011124 <pthread_mutex_unlock@plt-0x14>:
   11124:	push	{lr}		; (str lr, [sp, #-4]!)
   11128:	ldr	lr, [pc, #4]	; 11134 <pthread_mutex_unlock@plt-0x4>
   1112c:	add	lr, pc, lr
   11130:	ldr	pc, [lr, #8]!
   11134:	andeq	r7, r3, ip, asr #29

00011138 <pthread_mutex_unlock@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #225280	; 0x37000
   11140:	ldr	pc, [ip, #3788]!	; 0xecc

00011144 <calloc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #225280	; 0x37000
   1114c:	ldr	pc, [ip, #3780]!	; 0xec4

00011150 <fputs_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #225280	; 0x37000
   11158:	ldr	pc, [ip, #3772]!	; 0xebc

0001115c <wctype@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #225280	; 0x37000
   11164:	ldr	pc, [ip, #3764]!	; 0xeb4

00011168 <wcrtomb@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #225280	; 0x37000
   11170:	ldr	pc, [ip, #3756]!	; 0xeac

00011174 <iswctype@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #225280	; 0x37000
   1117c:	ldr	pc, [ip, #3748]!	; 0xea4

00011180 <strcmp@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #225280	; 0x37000
   11188:	ldr	pc, [ip, #3740]!	; 0xe9c

0001118c <strcspn@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #225280	; 0x37000
   11194:	ldr	pc, [ip, #3732]!	; 0xe94

00011198 <pthread_mutex_destroy@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #225280	; 0x37000
   111a0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111a4 <fflush@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #225280	; 0x37000
   111ac:	ldr	pc, [ip, #3716]!	; 0xe84

000111b0 <wcwidth@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #225280	; 0x37000
   111b8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111bc <memmove@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #225280	; 0x37000
   111c4:	ldr	pc, [ip, #3700]!	; 0xe74

000111c8 <free@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #225280	; 0x37000
   111d0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111d4 <pthread_mutex_lock@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #225280	; 0x37000
   111dc:	ldr	pc, [ip, #3684]!	; 0xe64

000111e0 <_exit@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #225280	; 0x37000
   111e8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111ec <memcpy@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #225280	; 0x37000
   111f4:	ldr	pc, [ip, #3668]!	; 0xe54

000111f8 <pthread_mutex_init@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #225280	; 0x37000
   11200:	ldr	pc, [ip, #3660]!	; 0xe4c

00011204 <towlower@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #225280	; 0x37000
   1120c:	ldr	pc, [ip, #3652]!	; 0xe44

00011210 <mbsinit@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #225280	; 0x37000
   11218:	ldr	pc, [ip, #3644]!	; 0xe3c

0001121c <memcmp@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #225280	; 0x37000
   11224:	ldr	pc, [ip, #3636]!	; 0xe34

00011228 <dcgettext@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #225280	; 0x37000
   11230:	ldr	pc, [ip, #3628]!	; 0xe2c

00011234 <realloc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #225280	; 0x37000
   1123c:	ldr	pc, [ip, #3620]!	; 0xe24

00011240 <textdomain@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #225280	; 0x37000
   11248:	ldr	pc, [ip, #3612]!	; 0xe1c

0001124c <iswcntrl@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #225280	; 0x37000
   11254:	ldr	pc, [ip, #3604]!	; 0xe14

00011258 <iswprint@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #225280	; 0x37000
   11260:	ldr	pc, [ip, #3596]!	; 0xe0c

00011264 <fwrite@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #225280	; 0x37000
   1126c:	ldr	pc, [ip, #3588]!	; 0xe04

00011270 <lseek64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #225280	; 0x37000
   11278:	ldr	pc, [ip, #3580]!	; 0xdfc

0001127c <__ctype_get_mb_cur_max@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #225280	; 0x37000
   11284:	ldr	pc, [ip, #3572]!	; 0xdf4

00011288 <__fpending@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #225280	; 0x37000
   11290:	ldr	pc, [ip, #3564]!	; 0xdec

00011294 <mbrtowc@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #225280	; 0x37000
   1129c:	ldr	pc, [ip, #3556]!	; 0xde4

000112a0 <error@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #225280	; 0x37000
   112a8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ac <strcoll@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #225280	; 0x37000
   112b4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112b8 <puts@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #225280	; 0x37000
   112c0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112c4 <malloc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #225280	; 0x37000
   112cc:	ldr	pc, [ip, #3524]!	; 0xdc4

000112d0 <__libc_start_main@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #225280	; 0x37000
   112d8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112dc <__freading@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #225280	; 0x37000
   112e4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112e8 <__ctype_tolower_loc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #225280	; 0x37000
   112f0:	ldr	pc, [ip, #3500]!	; 0xdac

000112f4 <__ctype_toupper_loc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #225280	; 0x37000
   112fc:	ldr	pc, [ip, #3492]!	; 0xda4

00011300 <__gmon_start__@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #225280	; 0x37000
   11308:	ldr	pc, [ip, #3484]!	; 0xd9c

0001130c <getopt_long@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #225280	; 0x37000
   11314:	ldr	pc, [ip, #3476]!	; 0xd94

00011318 <__ctype_b_loc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #225280	; 0x37000
   11320:	ldr	pc, [ip, #3468]!	; 0xd8c

00011324 <exit@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #225280	; 0x37000
   1132c:	ldr	pc, [ip, #3460]!	; 0xd84

00011330 <strlen@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #225280	; 0x37000
   11338:	ldr	pc, [ip, #3452]!	; 0xd7c

0001133c <strchr@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #225280	; 0x37000
   11344:	ldr	pc, [ip, #3444]!	; 0xd74

00011348 <__errno_location@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #225280	; 0x37000
   11350:	ldr	pc, [ip, #3436]!	; 0xd6c

00011354 <iswalnum@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #225280	; 0x37000
   1135c:	ldr	pc, [ip, #3428]!	; 0xd64

00011360 <__cxa_atexit@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #225280	; 0x37000
   11368:	ldr	pc, [ip, #3420]!	; 0xd5c

0001136c <memset@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #225280	; 0x37000
   11374:	ldr	pc, [ip, #3412]!	; 0xd54

00011378 <btowc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #225280	; 0x37000
   11380:	ldr	pc, [ip, #3404]!	; 0xd4c

00011384 <__printf_chk@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #225280	; 0x37000
   1138c:	ldr	pc, [ip, #3396]!	; 0xd44

00011390 <fileno@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #225280	; 0x37000
   11398:	ldr	pc, [ip, #3388]!	; 0xd3c

0001139c <__fprintf_chk@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #225280	; 0x37000
   113a4:	ldr	pc, [ip, #3380]!	; 0xd34

000113a8 <memchr@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #225280	; 0x37000
   113b0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113b4 <fclose@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #225280	; 0x37000
   113bc:	ldr	pc, [ip, #3364]!	; 0xd24

000113c0 <fseeko64@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #225280	; 0x37000
   113c8:	ldr	pc, [ip, #3356]!	; 0xd1c

000113cc <__overflow@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #225280	; 0x37000
   113d4:	ldr	pc, [ip, #3348]!	; 0xd14

000113d8 <setlocale@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #225280	; 0x37000
   113e0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113e4 <strrchr@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #225280	; 0x37000
   113ec:	ldr	pc, [ip, #3332]!	; 0xd04

000113f0 <nl_langinfo@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #225280	; 0x37000
   113f8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113fc <bindtextdomain@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #225280	; 0x37000
   11404:	ldr	pc, [ip, #3316]!	; 0xcf4

00011408 <towupper@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #225280	; 0x37000
   11410:	ldr	pc, [ip, #3308]!	; 0xcec

00011414 <strncmp@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #225280	; 0x37000
   1141c:	ldr	pc, [ip, #3300]!	; 0xce4

00011420 <abort@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #225280	; 0x37000
   11428:	ldr	pc, [ip, #3292]!	; 0xcdc

0001142c <__mempcpy_chk@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #225280	; 0x37000
   11434:	ldr	pc, [ip, #3284]!	; 0xcd4

00011438 <__assert_fail@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #225280	; 0x37000
   11440:	ldr	pc, [ip, #3276]!	; 0xccc

Disassembly of section .text:

00011450 <.text>:
   11450:	mov	fp, #0
   11454:	mov	lr, #0
   11458:	pop	{r1}		; (ldr r1, [sp], #4)
   1145c:	mov	r2, sp
   11460:	push	{r2}		; (str r2, [sp, #-4]!)
   11464:	push	{r0}		; (str r0, [sp, #-4]!)
   11468:	ldr	ip, [pc, #16]	; 11480 <__assert_fail@plt+0x48>
   1146c:	push	{ip}		; (str ip, [sp, #-4]!)
   11470:	ldr	r0, [pc, #12]	; 11484 <__assert_fail@plt+0x4c>
   11474:	ldr	r3, [pc, #12]	; 11488 <__assert_fail@plt+0x50>
   11478:	bl	112d0 <__libc_start_main@plt>
   1147c:	bl	11420 <abort@plt>
   11480:	muleq	r3, ip, fp
   11484:	andeq	r1, r1, ip, ror r8
   11488:	andeq	r5, r3, ip, lsr fp
   1148c:	ldr	r3, [pc, #20]	; 114a8 <__assert_fail@plt+0x70>
   11490:	ldr	r2, [pc, #20]	; 114ac <__assert_fail@plt+0x74>
   11494:	add	r3, pc, r3
   11498:	ldr	r2, [r3, r2]
   1149c:	cmp	r2, #0
   114a0:	bxeq	lr
   114a4:	b	11300 <__gmon_start__@plt>
   114a8:	andeq	r7, r3, r4, ror #22
   114ac:	andeq	r0, r0, r0, lsl r1
   114b0:	ldr	r0, [pc, #24]	; 114d0 <__assert_fail@plt+0x98>
   114b4:	ldr	r3, [pc, #24]	; 114d4 <__assert_fail@plt+0x9c>
   114b8:	cmp	r3, r0
   114bc:	bxeq	lr
   114c0:	ldr	r3, [pc, #16]	; 114d8 <__assert_fail@plt+0xa0>
   114c4:	cmp	r3, #0
   114c8:	bxeq	lr
   114cc:	bx	r3
   114d0:	andeq	r9, r4, r0, ror r1
   114d4:	andeq	r9, r4, r0, ror r1
   114d8:	andeq	r0, r0, r0
   114dc:	ldr	r0, [pc, #36]	; 11508 <__assert_fail@plt+0xd0>
   114e0:	ldr	r1, [pc, #36]	; 1150c <__assert_fail@plt+0xd4>
   114e4:	sub	r1, r1, r0
   114e8:	asr	r1, r1, #2
   114ec:	add	r1, r1, r1, lsr #31
   114f0:	asrs	r1, r1, #1
   114f4:	bxeq	lr
   114f8:	ldr	r3, [pc, #16]	; 11510 <__assert_fail@plt+0xd8>
   114fc:	cmp	r3, #0
   11500:	bxeq	lr
   11504:	bx	r3
   11508:	andeq	r9, r4, r0, ror r1
   1150c:	andeq	r9, r4, r0, ror r1
   11510:	andeq	r0, r0, r0
   11514:	push	{r4, lr}
   11518:	ldr	r4, [pc, #24]	; 11538 <__assert_fail@plt+0x100>
   1151c:	ldrb	r3, [r4]
   11520:	cmp	r3, #0
   11524:	popne	{r4, pc}
   11528:	bl	114b0 <__assert_fail@plt+0x78>
   1152c:	mov	r3, #1
   11530:	strb	r3, [r4]
   11534:	pop	{r4, pc}
   11538:	andeq	r9, r4, ip, lsl #3
   1153c:	b	114dc <__assert_fail@plt+0xa4>
   11540:	push	{fp, lr}
   11544:	mov	fp, sp
   11548:	sub	sp, sp, #56	; 0x38
   1154c:	mov	r4, r0
   11550:	cmp	r0, #0
   11554:	bne	11838 <__assert_fail@plt+0x400>
   11558:	movw	r1, #23531	; 0x5beb
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	movt	r1, #3
   11568:	bl	11228 <dcgettext@plt>
   1156c:	mov	r1, r0
   11570:	movw	r0, #37276	; 0x919c
   11574:	movt	r0, #4
   11578:	ldr	r2, [r0]
   1157c:	mov	r0, #1
   11580:	mov	r3, r2
   11584:	bl	11384 <__printf_chk@plt>
   11588:	movw	r7, #37252	; 0x9184
   1158c:	movt	r7, #4
   11590:	ldr	r0, [r7]
   11594:	ldr	r1, [r0, #20]
   11598:	ldr	r2, [r0, #24]
   1159c:	cmp	r1, r2
   115a0:	bcs	1182c <__assert_fail@plt+0x3f4>
   115a4:	add	r2, r1, #1
   115a8:	str	r2, [r0, #20]
   115ac:	mov	r0, #10
   115b0:	strb	r0, [r1]
   115b4:	movw	r1, #23570	; 0x5c12
   115b8:	mov	r0, #0
   115bc:	mov	r2, #5
   115c0:	movt	r1, #3
   115c4:	bl	11228 <dcgettext@plt>
   115c8:	ldr	r1, [r7]
   115cc:	bl	11150 <fputs_unlocked@plt>
   115d0:	movw	r1, #23615	; 0x5c3f
   115d4:	mov	r0, #0
   115d8:	mov	r2, #5
   115dc:	movt	r1, #3
   115e0:	bl	11228 <dcgettext@plt>
   115e4:	ldr	r1, [r7]
   115e8:	bl	11150 <fputs_unlocked@plt>
   115ec:	movw	r1, #23669	; 0x5c75
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #3
   115fc:	bl	11228 <dcgettext@plt>
   11600:	ldr	r1, [r7]
   11604:	bl	11150 <fputs_unlocked@plt>
   11608:	movw	r1, #23943	; 0x5d87
   1160c:	mov	r0, #0
   11610:	mov	r2, #5
   11614:	movt	r1, #3
   11618:	bl	11228 <dcgettext@plt>
   1161c:	ldr	r1, [r7]
   11620:	bl	11150 <fputs_unlocked@plt>
   11624:	movw	r1, #24233	; 0x5ea9
   11628:	mov	r0, #0
   1162c:	mov	r2, #5
   11630:	movt	r1, #3
   11634:	bl	11228 <dcgettext@plt>
   11638:	ldr	r1, [r7]
   1163c:	bl	11150 <fputs_unlocked@plt>
   11640:	movw	r1, #24346	; 0x5f1a
   11644:	mov	r0, #0
   11648:	mov	r2, #5
   1164c:	movt	r1, #3
   11650:	bl	11228 <dcgettext@plt>
   11654:	ldr	r1, [r7]
   11658:	bl	11150 <fputs_unlocked@plt>
   1165c:	movw	r1, #24533	; 0x5fd5
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #3
   1166c:	bl	11228 <dcgettext@plt>
   11670:	ldr	r1, [r7]
   11674:	bl	11150 <fputs_unlocked@plt>
   11678:	movw	r1, #24843	; 0x610b
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	movt	r1, #3
   11688:	bl	11228 <dcgettext@plt>
   1168c:	ldr	r1, [r7]
   11690:	bl	11150 <fputs_unlocked@plt>
   11694:	movw	r1, #25044	; 0x61d4
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	movt	r1, #3
   116a4:	bl	11228 <dcgettext@plt>
   116a8:	ldr	r1, [r7]
   116ac:	bl	11150 <fputs_unlocked@plt>
   116b0:	movw	r1, #25336	; 0x62f8
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #3
   116c0:	bl	11228 <dcgettext@plt>
   116c4:	ldr	r1, [r7]
   116c8:	bl	11150 <fputs_unlocked@plt>
   116cc:	movw	r0, #26240	; 0x6680
   116d0:	mov	r2, #48	; 0x30
   116d4:	mov	r6, sp
   116d8:	movw	r5, #25492	; 0x6394
   116dc:	movt	r0, #3
   116e0:	movt	r5, #3
   116e4:	add	r1, r0, #32
   116e8:	add	r3, r0, #16
   116ec:	vld1.64	{d18-d19}, [r0], r2
   116f0:	vld1.64	{d16-d17}, [r1]
   116f4:	vld1.64	{d20-d21}, [r3]
   116f8:	add	r1, r6, #32
   116fc:	vldr	d22, [r0]
   11700:	add	r0, r6, #16
   11704:	vst1.64	{d16-d17}, [r1]
   11708:	movw	r1, #25645	; 0x642d
   1170c:	vst1.64	{d20-d21}, [r0]
   11710:	mov	r0, r6
   11714:	vst1.64	{d18-d19}, [r0], r2
   11718:	movt	r1, #3
   1171c:	vstr	d22, [r0]
   11720:	mov	r0, r5
   11724:	bl	11180 <strcmp@plt>
   11728:	cmp	r0, #0
   1172c:	ldrne	r1, [r6, #8]!
   11730:	cmpne	r1, #0
   11734:	bne	11720 <__assert_fail@plt+0x2e8>
   11738:	ldr	r6, [r6, #4]
   1173c:	movw	r1, #25740	; 0x648c
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #3
   1174c:	bl	11228 <dcgettext@plt>
   11750:	movw	r2, #25521	; 0x63b1
   11754:	movw	r3, #25763	; 0x64a3
   11758:	mov	r1, r0
   1175c:	mov	r0, #1
   11760:	movt	r2, #3
   11764:	movt	r3, #3
   11768:	bl	11384 <__printf_chk@plt>
   1176c:	cmp	r6, #0
   11770:	mov	r0, #5
   11774:	mov	r1, #0
   11778:	moveq	r6, r5
   1177c:	bl	113d8 <setlocale@plt>
   11780:	cmp	r0, #0
   11784:	beq	117bc <__assert_fail@plt+0x384>
   11788:	movw	r1, #25803	; 0x64cb
   1178c:	mov	r2, #3
   11790:	movt	r1, #3
   11794:	bl	11414 <strncmp@plt>
   11798:	cmp	r0, #0
   1179c:	beq	117bc <__assert_fail@plt+0x384>
   117a0:	movw	r1, #25807	; 0x64cf
   117a4:	mov	r0, #0
   117a8:	mov	r2, #5
   117ac:	movt	r1, #3
   117b0:	bl	11228 <dcgettext@plt>
   117b4:	ldr	r1, [r7]
   117b8:	bl	11150 <fputs_unlocked@plt>
   117bc:	movw	r1, #25878	; 0x6516
   117c0:	mov	r0, #0
   117c4:	mov	r2, #5
   117c8:	movt	r1, #3
   117cc:	bl	11228 <dcgettext@plt>
   117d0:	movw	r2, #25763	; 0x64a3
   117d4:	mov	r1, r0
   117d8:	mov	r0, #1
   117dc:	mov	r3, r5
   117e0:	movt	r2, #3
   117e4:	bl	11384 <__printf_chk@plt>
   117e8:	movw	r1, #25905	; 0x6531
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	movt	r1, #3
   117f8:	bl	11228 <dcgettext@plt>
   117fc:	movw	r3, #25955	; 0x6563
   11800:	mov	r1, r0
   11804:	movw	r0, #25673	; 0x6449
   11808:	cmp	r6, r5
   1180c:	mov	r2, r6
   11810:	movt	r0, #3
   11814:	movt	r3, #3
   11818:	moveq	r3, r0
   1181c:	mov	r0, #1
   11820:	bl	11384 <__printf_chk@plt>
   11824:	mov	r0, r4
   11828:	bl	11324 <exit@plt>
   1182c:	mov	r1, #10
   11830:	bl	113cc <__overflow@plt>
   11834:	b	115b4 <__assert_fail@plt+0x17c>
   11838:	movw	r0, #37248	; 0x9180
   1183c:	movw	r1, #23492	; 0x5bc4
   11840:	mov	r2, #5
   11844:	movt	r0, #4
   11848:	movt	r1, #3
   1184c:	ldr	r5, [r0]
   11850:	mov	r0, #0
   11854:	bl	11228 <dcgettext@plt>
   11858:	mov	r2, r0
   1185c:	movw	r0, #37276	; 0x919c
   11860:	mov	r1, #1
   11864:	movt	r0, #4
   11868:	ldr	r3, [r0]
   1186c:	mov	r0, r5
   11870:	bl	1139c <__fprintf_chk@plt>
   11874:	mov	r0, r4
   11878:	bl	11324 <exit@plt>
   1187c:	push	{r4, r5, r6, sl, fp, lr}
   11880:	add	fp, sp, #16
   11884:	sub	sp, sp, #24
   11888:	mov	r5, r0
   1188c:	ldr	r0, [r1]
   11890:	mov	r4, r1
   11894:	bl	2145c <__assert_fail@plt+0x10024>
   11898:	movw	r1, #25955	; 0x6563
   1189c:	mov	r0, #6
   118a0:	movt	r1, #3
   118a4:	bl	113d8 <setlocale@plt>
   118a8:	movw	r6, #25525	; 0x63b5
   118ac:	movw	r1, #25497	; 0x6399
   118b0:	movt	r6, #3
   118b4:	movt	r1, #3
   118b8:	mov	r0, r6
   118bc:	bl	113fc <bindtextdomain@plt>
   118c0:	mov	r0, r6
   118c4:	bl	11240 <textdomain@plt>
   118c8:	movw	r0, #37152	; 0x9120
   118cc:	mov	r1, #3
   118d0:	movt	r0, #4
   118d4:	str	r1, [r0]
   118d8:	movw	r0, #14212	; 0x3784
   118dc:	movt	r0, #1
   118e0:	bl	35ba0 <__assert_fail@plt+0x24768>
   118e4:	movw	r2, #25562	; 0x63da
   118e8:	movw	r3, #25550	; 0x63ce
   118ec:	movw	r6, #5440	; 0x1540
   118f0:	movw	r0, #25535	; 0x63bf
   118f4:	movw	r1, #25577	; 0x63e9
   118f8:	mov	ip, #0
   118fc:	movt	r2, #3
   11900:	movt	r3, #3
   11904:	movt	r6, #1
   11908:	movt	r0, #3
   1190c:	movt	r1, #3
   11910:	stm	sp, {r0, r6}
   11914:	str	r3, [sp, #8]
   11918:	movw	r3, #25521	; 0x63b1
   1191c:	str	r2, [sp, #12]
   11920:	movw	r2, #25492	; 0x6394
   11924:	str	r1, [sp, #16]
   11928:	mov	r0, r5
   1192c:	mov	r1, r4
   11930:	str	ip, [sp, #20]
   11934:	movt	r2, #3
   11938:	movt	r3, #3
   1193c:	bl	20f1c <__assert_fail@plt+0xfae4>
   11940:	cmp	r5, #2
   11944:	bcc	11a80 <__assert_fail@plt+0x648>
   11948:	mov	r6, r4
   1194c:	movw	r1, #25589	; 0x63f5
   11950:	ldr	r0, [r6, #4]!
   11954:	movt	r1, #3
   11958:	bl	11180 <strcmp@plt>
   1195c:	cmp	r0, #0
   11960:	bne	11974 <__assert_fail@plt+0x53c>
   11964:	sub	r0, r5, #1
   11968:	cmp	r0, #2
   1196c:	bcc	11a80 <__assert_fail@plt+0x648>
   11970:	add	r6, r4, #8
   11974:	movw	r5, #37264	; 0x9190
   11978:	mov	r0, #1
   1197c:	movt	r5, #4
   11980:	str	r6, [r5]
   11984:	bl	11aec <__assert_fail@plt+0x6b4>
   11988:	mov	r4, r0
   1198c:	ldr	r0, [r5]
   11990:	ldr	r0, [r0]
   11994:	cmp	r0, #0
   11998:	bne	11aac <__assert_fail@plt+0x674>
   1199c:	ldr	r0, [r4]
   119a0:	cmp	r0, #1
   119a4:	beq	119f0 <__assert_fail@plt+0x5b8>
   119a8:	cmp	r0, #0
   119ac:	bne	11a7c <__assert_fail@plt+0x644>
   119b0:	movw	r6, #37252	; 0x9184
   119b4:	add	r2, r4, #4
   119b8:	mov	r1, #10
   119bc:	mov	r5, #10
   119c0:	movt	r6, #4
   119c4:	ldr	r0, [r6]
   119c8:	bl	20504 <__assert_fail@plt+0xf0cc>
   119cc:	ldr	r0, [r6]
   119d0:	ldr	r1, [r0, #20]
   119d4:	ldr	r2, [r0, #24]
   119d8:	cmp	r1, r2
   119dc:	bcs	11a70 <__assert_fail@plt+0x638>
   119e0:	add	r2, r1, #1
   119e4:	str	r2, [r0, #20]
   119e8:	strb	r5, [r1]
   119ec:	b	119f8 <__assert_fail@plt+0x5c0>
   119f0:	ldr	r0, [r4, #4]
   119f4:	bl	112b8 <puts@plt>
   119f8:	ldr	r0, [r4]
   119fc:	cmp	r0, #1
   11a00:	beq	11a24 <__assert_fail@plt+0x5ec>
   11a04:	cmp	r0, #0
   11a08:	bne	11a7c <__assert_fail@plt+0x644>
   11a0c:	add	r0, r4, #4
   11a10:	bl	162c8 <__assert_fail@plt+0x4e90>
   11a14:	clz	r0, r0
   11a18:	lsr	r0, r0, #5
   11a1c:	sub	sp, fp, #16
   11a20:	pop	{r4, r5, r6, sl, fp, pc}
   11a24:	ldr	r1, [r4, #4]
   11a28:	mov	r0, #1
   11a2c:	ldrb	r2, [r1]
   11a30:	cmp	r2, #0
   11a34:	beq	11a5c <__assert_fail@plt+0x624>
   11a38:	cmp	r2, #45	; 0x2d
   11a3c:	addeq	r1, r1, #1
   11a40:	ldrb	r2, [r1], #1
   11a44:	uxtb	r2, r2
   11a48:	cmp	r2, #48	; 0x30
   11a4c:	bne	11a64 <__assert_fail@plt+0x62c>
   11a50:	ldrb	r2, [r1], #1
   11a54:	cmp	r2, #0
   11a58:	bne	11a44 <__assert_fail@plt+0x60c>
   11a5c:	sub	sp, fp, #16
   11a60:	pop	{r4, r5, r6, sl, fp, pc}
   11a64:	mov	r0, #0
   11a68:	sub	sp, fp, #16
   11a6c:	pop	{r4, r5, r6, sl, fp, pc}
   11a70:	mov	r1, #10
   11a74:	bl	113cc <__overflow@plt>
   11a78:	b	119f8 <__assert_fail@plt+0x5c0>
   11a7c:	bl	11420 <abort@plt>
   11a80:	movw	r1, #25592	; 0x63f8
   11a84:	mov	r0, #0
   11a88:	mov	r2, #5
   11a8c:	movt	r1, #3
   11a90:	bl	11228 <dcgettext@plt>
   11a94:	mov	r2, r0
   11a98:	mov	r0, #0
   11a9c:	mov	r1, #0
   11aa0:	bl	112a0 <error@plt>
   11aa4:	mov	r0, #2
   11aa8:	bl	11540 <__assert_fail@plt+0x108>
   11aac:	movw	r1, #25608	; 0x6408
   11ab0:	mov	r0, #0
   11ab4:	mov	r2, #5
   11ab8:	movt	r1, #3
   11abc:	bl	11228 <dcgettext@plt>
   11ac0:	mov	r4, r0
   11ac4:	ldr	r0, [r5]
   11ac8:	mov	r1, #8
   11acc:	ldr	r2, [r0]
   11ad0:	mov	r0, #0
   11ad4:	bl	22ac0 <__assert_fail@plt+0x11688>
   11ad8:	mov	r3, r0
   11adc:	mov	r0, #2
   11ae0:	mov	r1, #0
   11ae4:	mov	r2, r4
   11ae8:	bl	112a0 <error@plt>
   11aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11af0:	add	fp, sp, #28
   11af4:	sub	sp, sp, #4
   11af8:	mov	r4, r0
   11afc:	bl	11d4c <__assert_fail@plt+0x914>
   11b00:	movw	r9, #37264	; 0x9190
   11b04:	mov	r6, r0
   11b08:	movt	r9, #4
   11b0c:	ldr	r5, [r9]
   11b10:	ldr	r0, [r5]
   11b14:	cmp	r0, #0
   11b18:	beq	11d3c <__assert_fail@plt+0x904>
   11b1c:	movw	r8, #25956	; 0x6564
   11b20:	mov	sl, #0
   11b24:	movt	r8, #3
   11b28:	mov	r1, r8
   11b2c:	bl	11180 <strcmp@plt>
   11b30:	clz	r1, r0
   11b34:	cmp	r0, #0
   11b38:	lsr	r1, r1, #5
   11b3c:	add	r1, r5, r1, lsl #2
   11b40:	str	r1, [r9]
   11b44:	bne	11d3c <__assert_fail@plt+0x904>
   11b48:	mov	r0, #0
   11b4c:	cmp	r4, #0
   11b50:	beq	11bb4 <__assert_fail@plt+0x77c>
   11b54:	ldr	r1, [r6]
   11b58:	cmp	r1, #1
   11b5c:	beq	11b7c <__assert_fail@plt+0x744>
   11b60:	cmp	r1, #0
   11b64:	bne	11d48 <__assert_fail@plt+0x910>
   11b68:	add	r0, r6, #4
   11b6c:	bl	162c8 <__assert_fail@plt+0x4e90>
   11b70:	clz	r0, r0
   11b74:	lsr	r0, r0, #5
   11b78:	b	11bb4 <__assert_fail@plt+0x77c>
   11b7c:	ldr	r1, [r6, #4]
   11b80:	ldrb	r2, [r1]
   11b84:	cmp	r2, #0
   11b88:	beq	11bb0 <__assert_fail@plt+0x778>
   11b8c:	cmp	r2, #45	; 0x2d
   11b90:	addeq	r1, r1, #1
   11b94:	ldrb	r2, [r1], #1
   11b98:	uxtb	r2, r2
   11b9c:	cmp	r2, #48	; 0x30
   11ba0:	bne	11bb4 <__assert_fail@plt+0x77c>
   11ba4:	ldrb	r2, [r1], #1
   11ba8:	cmp	r2, #0
   11bac:	bne	11b98 <__assert_fail@plt+0x760>
   11bb0:	mov	r0, #1
   11bb4:	bl	11d4c <__assert_fail@plt+0x914>
   11bb8:	mov	r7, r0
   11bbc:	ldr	r0, [r6]
   11bc0:	cmp	r0, #0
   11bc4:	beq	11c0c <__assert_fail@plt+0x7d4>
   11bc8:	cmp	r0, #1
   11bcc:	bne	11d48 <__assert_fail@plt+0x910>
   11bd0:	mov	r0, r6
   11bd4:	ldr	r1, [r0, #4]!
   11bd8:	ldrb	r2, [r1]
   11bdc:	cmp	r2, #0
   11be0:	beq	11c5c <__assert_fail@plt+0x824>
   11be4:	cmp	r2, #45	; 0x2d
   11be8:	addeq	r1, r1, #1
   11bec:	ldrb	r2, [r1], #1
   11bf0:	uxtb	r2, r2
   11bf4:	cmp	r2, #48	; 0x30
   11bf8:	bne	11c20 <__assert_fail@plt+0x7e8>
   11bfc:	ldrb	r2, [r1], #1
   11c00:	cmp	r2, #0
   11c04:	bne	11bf0 <__assert_fail@plt+0x7b8>
   11c08:	b	11c5c <__assert_fail@plt+0x824>
   11c0c:	add	r5, r6, #4
   11c10:	mov	r0, r5
   11c14:	bl	162c8 <__assert_fail@plt+0x4e90>
   11c18:	cmp	r0, #0
   11c1c:	beq	11c4c <__assert_fail@plt+0x814>
   11c20:	mov	r0, r7
   11c24:	ldr	r1, [r0], #4
   11c28:	cmp	r1, #1
   11c2c:	bne	11c3c <__assert_fail@plt+0x804>
   11c30:	ldr	r0, [r0]
   11c34:	bl	1386c <__assert_fail@plt+0x2434>
   11c38:	b	11c40 <__assert_fail@plt+0x808>
   11c3c:	bl	15390 <__assert_fail@plt+0x3f58>
   11c40:	mov	r0, r7
   11c44:	bl	1386c <__assert_fail@plt+0x2434>
   11c48:	b	11d10 <__assert_fail@plt+0x8d8>
   11c4c:	mov	r0, r6
   11c50:	ldr	r1, [r0], #4
   11c54:	cmp	r1, #1
   11c58:	bne	11d24 <__assert_fail@plt+0x8ec>
   11c5c:	ldr	r0, [r0]
   11c60:	bl	1386c <__assert_fail@plt+0x2434>
   11c64:	mov	r0, r6
   11c68:	bl	1386c <__assert_fail@plt+0x2434>
   11c6c:	ldr	r0, [r7]
   11c70:	cmp	r0, #0
   11c74:	beq	11cbc <__assert_fail@plt+0x884>
   11c78:	cmp	r0, #1
   11c7c:	bne	11d48 <__assert_fail@plt+0x910>
   11c80:	mov	r0, r7
   11c84:	ldr	r1, [r0, #4]!
   11c88:	ldrb	r2, [r1]
   11c8c:	cmp	r2, #0
   11c90:	beq	11ce8 <__assert_fail@plt+0x8b0>
   11c94:	cmp	r2, #45	; 0x2d
   11c98:	addeq	r1, r1, #1
   11c9c:	ldrb	r2, [r1], #1
   11ca0:	uxtb	r2, r2
   11ca4:	cmp	r2, #48	; 0x30
   11ca8:	bne	11cd0 <__assert_fail@plt+0x898>
   11cac:	ldrb	r2, [r1], #1
   11cb0:	cmp	r2, #0
   11cb4:	bne	11ca0 <__assert_fail@plt+0x868>
   11cb8:	b	11ce8 <__assert_fail@plt+0x8b0>
   11cbc:	add	r5, r7, #4
   11cc0:	mov	r0, r5
   11cc4:	bl	162c8 <__assert_fail@plt+0x4e90>
   11cc8:	cmp	r0, #0
   11ccc:	beq	11cd8 <__assert_fail@plt+0x8a0>
   11cd0:	mov	r6, r7
   11cd4:	b	11d10 <__assert_fail@plt+0x8d8>
   11cd8:	mov	r0, r7
   11cdc:	ldr	r1, [r0], #4
   11ce0:	cmp	r1, #1
   11ce4:	bne	11d30 <__assert_fail@plt+0x8f8>
   11ce8:	ldr	r0, [r0]
   11cec:	bl	1386c <__assert_fail@plt+0x2434>
   11cf0:	mov	r0, r7
   11cf4:	bl	1386c <__assert_fail@plt+0x2434>
   11cf8:	mov	r0, #16
   11cfc:	bl	34f54 <__assert_fail@plt+0x23b1c>
   11d00:	mov	r6, r0
   11d04:	str	sl, [r0], #4
   11d08:	mov	r1, #0
   11d0c:	bl	1565c <__assert_fail@plt+0x4224>
   11d10:	ldr	r5, [r9]
   11d14:	ldr	r0, [r5]
   11d18:	cmp	r0, #0
   11d1c:	bne	11b28 <__assert_fail@plt+0x6f0>
   11d20:	b	11d3c <__assert_fail@plt+0x904>
   11d24:	mov	r0, r5
   11d28:	bl	15390 <__assert_fail@plt+0x3f58>
   11d2c:	b	11c64 <__assert_fail@plt+0x82c>
   11d30:	mov	r0, r5
   11d34:	bl	15390 <__assert_fail@plt+0x3f58>
   11d38:	b	11cf0 <__assert_fail@plt+0x8b8>
   11d3c:	mov	r0, r6
   11d40:	sub	sp, fp, #28
   11d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d48:	bl	11420 <abort@plt>
   11d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d50:	add	fp, sp, #28
   11d54:	sub	sp, sp, #4
   11d58:	mov	r4, r0
   11d5c:	bl	11fa0 <__assert_fail@plt+0xb68>
   11d60:	movw	r9, #37264	; 0x9190
   11d64:	mov	r6, r0
   11d68:	movt	r9, #4
   11d6c:	ldr	r5, [r9]
   11d70:	ldr	r0, [r5]
   11d74:	cmp	r0, #0
   11d78:	beq	11f90 <__assert_fail@plt+0xb58>
   11d7c:	movw	r8, #25958	; 0x6566
   11d80:	mov	sl, #0
   11d84:	movt	r8, #3
   11d88:	mov	r1, r8
   11d8c:	bl	11180 <strcmp@plt>
   11d90:	clz	r1, r0
   11d94:	cmp	r0, #0
   11d98:	lsr	r1, r1, #5
   11d9c:	add	r1, r5, r1, lsl #2
   11da0:	str	r1, [r9]
   11da4:	bne	11f90 <__assert_fail@plt+0xb58>
   11da8:	mov	r0, #0
   11dac:	cmp	r4, #0
   11db0:	beq	11e20 <__assert_fail@plt+0x9e8>
   11db4:	ldr	r0, [r6]
   11db8:	cmp	r0, #1
   11dbc:	beq	11ddc <__assert_fail@plt+0x9a4>
   11dc0:	cmp	r0, #0
   11dc4:	bne	11f9c <__assert_fail@plt+0xb64>
   11dc8:	add	r0, r6, #4
   11dcc:	bl	162c8 <__assert_fail@plt+0x4e90>
   11dd0:	clz	r0, r0
   11dd4:	lsr	r0, r0, #5
   11dd8:	b	11e1c <__assert_fail@plt+0x9e4>
   11ddc:	ldr	r1, [r6, #4]
   11de0:	mov	r0, #1
   11de4:	ldrb	r2, [r1]
   11de8:	cmp	r2, #0
   11dec:	beq	11e1c <__assert_fail@plt+0x9e4>
   11df0:	cmp	r2, #45	; 0x2d
   11df4:	addeq	r1, r1, #1
   11df8:	ldrb	r2, [r1], #1
   11dfc:	uxtb	r2, r2
   11e00:	cmp	r2, #48	; 0x30
   11e04:	bne	11e18 <__assert_fail@plt+0x9e0>
   11e08:	ldrb	r2, [r1], #1
   11e0c:	cmp	r2, #0
   11e10:	bne	11dfc <__assert_fail@plt+0x9c4>
   11e14:	b	11e1c <__assert_fail@plt+0x9e4>
   11e18:	mov	r0, #0
   11e1c:	eor	r0, r0, #1
   11e20:	bl	11fa0 <__assert_fail@plt+0xb68>
   11e24:	mov	r7, r0
   11e28:	ldr	r0, [r6]
   11e2c:	cmp	r0, #0
   11e30:	beq	11e74 <__assert_fail@plt+0xa3c>
   11e34:	cmp	r0, #1
   11e38:	bne	11f9c <__assert_fail@plt+0xb64>
   11e3c:	ldr	r0, [r6, #4]
   11e40:	ldrb	r1, [r0]
   11e44:	cmp	r1, #0
   11e48:	beq	11f04 <__assert_fail@plt+0xacc>
   11e4c:	cmp	r1, #45	; 0x2d
   11e50:	addeq	r0, r0, #1
   11e54:	ldrb	r1, [r0], #1
   11e58:	uxtb	r1, r1
   11e5c:	cmp	r1, #48	; 0x30
   11e60:	bne	11e84 <__assert_fail@plt+0xa4c>
   11e64:	ldrb	r1, [r0], #1
   11e68:	cmp	r1, #0
   11e6c:	bne	11e58 <__assert_fail@plt+0xa20>
   11e70:	b	11f04 <__assert_fail@plt+0xacc>
   11e74:	add	r0, r6, #4
   11e78:	bl	162c8 <__assert_fail@plt+0x4e90>
   11e7c:	cmp	r0, #0
   11e80:	beq	11f04 <__assert_fail@plt+0xacc>
   11e84:	ldr	r0, [r7]
   11e88:	cmp	r0, #0
   11e8c:	beq	11ed4 <__assert_fail@plt+0xa9c>
   11e90:	cmp	r0, #1
   11e94:	bne	11f9c <__assert_fail@plt+0xb64>
   11e98:	mov	r0, r7
   11e9c:	ldr	r1, [r0, #4]!
   11ea0:	ldrb	r2, [r1]
   11ea4:	cmp	r2, #0
   11ea8:	beq	11f04 <__assert_fail@plt+0xacc>
   11eac:	cmp	r2, #45	; 0x2d
   11eb0:	addeq	r1, r1, #1
   11eb4:	ldrb	r2, [r1], #1
   11eb8:	uxtb	r2, r2
   11ebc:	cmp	r2, #48	; 0x30
   11ec0:	bne	11ef8 <__assert_fail@plt+0xac0>
   11ec4:	ldrb	r2, [r1], #1
   11ec8:	cmp	r2, #0
   11ecc:	bne	11eb8 <__assert_fail@plt+0xa80>
   11ed0:	b	11f04 <__assert_fail@plt+0xacc>
   11ed4:	add	r5, r7, #4
   11ed8:	mov	r0, r5
   11edc:	bl	162c8 <__assert_fail@plt+0x4e90>
   11ee0:	cmp	r0, #0
   11ee4:	beq	11f04 <__assert_fail@plt+0xacc>
   11ee8:	mov	r0, r7
   11eec:	ldr	r1, [r0], #4
   11ef0:	cmp	r1, #1
   11ef4:	bne	11f70 <__assert_fail@plt+0xb38>
   11ef8:	ldr	r0, [r0]
   11efc:	bl	1386c <__assert_fail@plt+0x2434>
   11f00:	b	11f78 <__assert_fail@plt+0xb40>
   11f04:	mov	r0, r6
   11f08:	ldr	r1, [r0], #4
   11f0c:	cmp	r1, #1
   11f10:	bne	11f20 <__assert_fail@plt+0xae8>
   11f14:	ldr	r0, [r0]
   11f18:	bl	1386c <__assert_fail@plt+0x2434>
   11f1c:	b	11f24 <__assert_fail@plt+0xaec>
   11f20:	bl	15390 <__assert_fail@plt+0x3f58>
   11f24:	mov	r0, r6
   11f28:	bl	1386c <__assert_fail@plt+0x2434>
   11f2c:	mov	r0, r7
   11f30:	ldr	r1, [r0], #4
   11f34:	cmp	r1, #1
   11f38:	bne	11f48 <__assert_fail@plt+0xb10>
   11f3c:	ldr	r0, [r0]
   11f40:	bl	1386c <__assert_fail@plt+0x2434>
   11f44:	b	11f4c <__assert_fail@plt+0xb14>
   11f48:	bl	15390 <__assert_fail@plt+0x3f58>
   11f4c:	mov	r0, r7
   11f50:	bl	1386c <__assert_fail@plt+0x2434>
   11f54:	mov	r0, #16
   11f58:	bl	34f54 <__assert_fail@plt+0x23b1c>
   11f5c:	mov	r6, r0
   11f60:	str	sl, [r0], #4
   11f64:	mov	r1, #0
   11f68:	bl	1565c <__assert_fail@plt+0x4224>
   11f6c:	b	11f80 <__assert_fail@plt+0xb48>
   11f70:	mov	r0, r5
   11f74:	bl	15390 <__assert_fail@plt+0x3f58>
   11f78:	mov	r0, r7
   11f7c:	bl	1386c <__assert_fail@plt+0x2434>
   11f80:	ldr	r5, [r9]
   11f84:	ldr	r0, [r5]
   11f88:	cmp	r0, #0
   11f8c:	bne	11d88 <__assert_fail@plt+0x950>
   11f90:	mov	r0, r6
   11f94:	sub	sp, fp, #28
   11f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f9c:	bl	11420 <abort@plt>
   11fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa4:	add	fp, sp, #28
   11fa8:	push	{r0}		; (str r0, [sp, #-4]!)
   11fac:	bl	12368 <__assert_fail@plt+0xf30>
   11fb0:	movw	r7, #37264	; 0x9190
   11fb4:	mov	r5, r0
   11fb8:	movt	r7, #4
   11fbc:	ldr	r4, [r7]
   11fc0:	ldr	r0, [r4]
   11fc4:	cmp	r0, #0
   11fc8:	beq	12358 <__assert_fail@plt+0xf20>
   11fcc:	mvn	r8, #47	; 0x2f
   11fd0:	b	11fe4 <__assert_fail@plt+0xbac>
   11fd4:	mov	r4, #3
   11fd8:	b	1213c <__assert_fail@plt+0xd04>
   11fdc:	mov	r4, #4
   11fe0:	b	1213c <__assert_fail@plt+0xd04>
   11fe4:	movw	r1, #25960	; 0x6568
   11fe8:	movt	r1, #3
   11fec:	bl	11180 <strcmp@plt>
   11ff0:	clz	r1, r0
   11ff4:	cmp	r0, #0
   11ff8:	lsr	r1, r1, #5
   11ffc:	add	r6, r4, r1, lsl #2
   12000:	mov	r4, #0
   12004:	str	r6, [r7]
   12008:	beq	1213c <__assert_fail@plt+0xd04>
   1200c:	ldr	r0, [r6]
   12010:	cmp	r0, #0
   12014:	beq	12358 <__assert_fail@plt+0xf20>
   12018:	movw	r1, #25962	; 0x656a
   1201c:	movt	r1, #3
   12020:	bl	11180 <strcmp@plt>
   12024:	clz	r1, r0
   12028:	cmp	r0, #0
   1202c:	lsr	r1, r1, #5
   12030:	add	r4, r6, r1, lsl #2
   12034:	str	r4, [r7]
   12038:	beq	12138 <__assert_fail@plt+0xd00>
   1203c:	ldr	r0, [r4]
   12040:	cmp	r0, #0
   12044:	beq	12358 <__assert_fail@plt+0xf20>
   12048:	movw	r1, #25969	; 0x6571
   1204c:	movt	r1, #3
   12050:	bl	11180 <strcmp@plt>
   12054:	clz	r1, r0
   12058:	cmp	r0, #0
   1205c:	lsr	r1, r1, #5
   12060:	add	r6, r4, r1, lsl #2
   12064:	mov	r4, #2
   12068:	str	r6, [r7]
   1206c:	beq	1213c <__assert_fail@plt+0xd04>
   12070:	ldr	r0, [r6]
   12074:	cmp	r0, #0
   12078:	beq	12358 <__assert_fail@plt+0xf20>
   1207c:	movw	r1, #25965	; 0x656d
   12080:	movt	r1, #3
   12084:	bl	11180 <strcmp@plt>
   12088:	clz	r1, r0
   1208c:	cmp	r0, #0
   12090:	lsr	r1, r1, #5
   12094:	add	r6, r6, r1, lsl #2
   12098:	str	r6, [r7]
   1209c:	beq	1213c <__assert_fail@plt+0xd04>
   120a0:	ldr	r0, [r6]
   120a4:	cmp	r0, #0
   120a8:	beq	12358 <__assert_fail@plt+0xf20>
   120ac:	movw	r1, #25968	; 0x6570
   120b0:	movt	r1, #3
   120b4:	bl	11180 <strcmp@plt>
   120b8:	clz	r1, r0
   120bc:	cmp	r0, #0
   120c0:	lsr	r1, r1, #5
   120c4:	add	r4, r6, r1, lsl #2
   120c8:	str	r4, [r7]
   120cc:	beq	11fd4 <__assert_fail@plt+0xb9c>
   120d0:	ldr	r0, [r4]
   120d4:	cmp	r0, #0
   120d8:	beq	12358 <__assert_fail@plt+0xf20>
   120dc:	movw	r1, #25971	; 0x6573
   120e0:	movt	r1, #3
   120e4:	bl	11180 <strcmp@plt>
   120e8:	clz	r1, r0
   120ec:	cmp	r0, #0
   120f0:	lsr	r1, r1, #5
   120f4:	add	r4, r4, r1, lsl #2
   120f8:	str	r4, [r7]
   120fc:	beq	11fdc <__assert_fail@plt+0xba4>
   12100:	ldr	r0, [r4]
   12104:	cmp	r0, #0
   12108:	beq	12358 <__assert_fail@plt+0xf20>
   1210c:	movw	r1, #25974	; 0x6576
   12110:	movt	r1, #3
   12114:	bl	11180 <strcmp@plt>
   12118:	clz	r1, r0
   1211c:	cmp	r0, #0
   12120:	lsr	r1, r1, #5
   12124:	add	r1, r4, r1, lsl #2
   12128:	mov	r4, #5
   1212c:	str	r1, [r7]
   12130:	beq	1213c <__assert_fail@plt+0xd04>
   12134:	b	12358 <__assert_fail@plt+0xf20>
   12138:	mov	r4, #1
   1213c:	ldr	r6, [sp]
   12140:	mov	r0, r6
   12144:	bl	12368 <__assert_fail@plt+0xf30>
   12148:	mov	sl, r0
   1214c:	cmp	r6, #0
   12150:	beq	1223c <__assert_fail@plt+0xe04>
   12154:	ldr	r0, [r5]
   12158:	cmp	r0, #1
   1215c:	beq	12190 <__assert_fail@plt+0xd58>
   12160:	cmp	r0, #0
   12164:	bne	12364 <__assert_fail@plt+0xf2c>
   12168:	add	r7, r5, #4
   1216c:	mov	r0, #0
   12170:	mov	r1, #10
   12174:	mov	r2, r7
   12178:	bl	1fc10 <__assert_fail@plt+0xe7d8>
   1217c:	mov	r6, r0
   12180:	mov	r0, r7
   12184:	bl	15390 <__assert_fail@plt+0x3f58>
   12188:	mov	r0, #1
   1218c:	stm	r5, {r0, r6}
   12190:	ldr	r0, [sl]
   12194:	cmp	r0, #1
   12198:	beq	121cc <__assert_fail@plt+0xd94>
   1219c:	cmp	r0, #0
   121a0:	bne	12364 <__assert_fail@plt+0xf2c>
   121a4:	add	r6, sl, #4
   121a8:	mov	r0, #0
   121ac:	mov	r1, #10
   121b0:	mov	r2, r6
   121b4:	bl	1fc10 <__assert_fail@plt+0xe7d8>
   121b8:	mov	r7, r0
   121bc:	mov	r0, r6
   121c0:	bl	15390 <__assert_fail@plt+0x3f58>
   121c4:	mov	r0, #1
   121c8:	stm	sl, {r0, r7}
   121cc:	mov	r6, r5
   121d0:	ldr	r0, [r6, #4]!
   121d4:	mov	r1, r0
   121d8:	ldrb	r2, [r1], #1
   121dc:	cmp	r2, #45	; 0x2d
   121e0:	movne	r1, r0
   121e4:	ldrb	r2, [r1], #1
   121e8:	uxtab	r2, r8, r2
   121ec:	cmp	r2, #9
   121f0:	bhi	12248 <__assert_fail@plt+0xe10>
   121f4:	ldrb	r2, [r1], #1
   121f8:	cmp	r2, #0
   121fc:	bne	121e8 <__assert_fail@plt+0xdb0>
   12200:	mov	r7, sl
   12204:	ldr	r1, [r7, #4]!
   12208:	mov	r2, r1
   1220c:	ldrb	r3, [r2], #1
   12210:	cmp	r3, #45	; 0x2d
   12214:	movne	r2, r1
   12218:	ldrb	r3, [r2], #1
   1221c:	uxtab	r3, r8, r3
   12220:	cmp	r3, #9
   12224:	bhi	1224c <__assert_fail@plt+0xe14>
   12228:	ldrb	r3, [r2], #1
   1222c:	cmp	r3, #0
   12230:	bne	1221c <__assert_fail@plt+0xde4>
   12234:	bl	34648 <__assert_fail@plt+0x23210>
   12238:	b	12264 <__assert_fail@plt+0xe2c>
   1223c:	add	r6, r5, #4
   12240:	mov	r9, #0
   12244:	b	122d4 <__assert_fail@plt+0xe9c>
   12248:	add	r7, sl, #4
   1224c:	bl	11348 <__errno_location@plt>
   12250:	mov	r1, #0
   12254:	str	r1, [r0]
   12258:	ldr	r0, [r6]
   1225c:	ldr	r1, [r7]
   12260:	bl	112ac <strcoll@plt>
   12264:	mov	r9, r0
   12268:	cmp	r4, #5
   1226c:	bhi	12364 <__assert_fail@plt+0xf2c>
   12270:	add	r0, pc, #0
   12274:	ldr	pc, [r0, r4, lsl #2]
   12278:	muleq	r1, r0, r2
   1227c:	andeq	r2, r1, ip, lsr #5
   12280:	muleq	r1, r8, r2
   12284:			; <UNDEFINED> instruction: 0x000122bc
   12288:	andeq	r2, r1, r4, lsr #5
   1228c:	andeq	r2, r1, r8, asr #5
   12290:	lsr	r9, r9, #31
   12294:	b	122d4 <__assert_fail@plt+0xe9c>
   12298:	clz	r0, r9
   1229c:	lsr	r9, r0, #5
   122a0:	b	122d4 <__assert_fail@plt+0xe9c>
   122a4:	cmn	r9, #1
   122a8:	b	122cc <__assert_fail@plt+0xe94>
   122ac:	cmp	r9, #1
   122b0:	mov	r9, #0
   122b4:	movwlt	r9, #1
   122b8:	b	122d4 <__assert_fail@plt+0xe9c>
   122bc:	cmp	r9, #0
   122c0:	movwne	r9, #1
   122c4:	b	122d4 <__assert_fail@plt+0xe9c>
   122c8:	cmp	r9, #0
   122cc:	mov	r9, #0
   122d0:	movwgt	r9, #1
   122d4:	ldr	r0, [r5]
   122d8:	cmp	r0, #1
   122dc:	bne	122ec <__assert_fail@plt+0xeb4>
   122e0:	ldr	r0, [r6]
   122e4:	bl	1386c <__assert_fail@plt+0x2434>
   122e8:	b	122f4 <__assert_fail@plt+0xebc>
   122ec:	add	r0, r5, #4
   122f0:	bl	15390 <__assert_fail@plt+0x3f58>
   122f4:	mov	r0, r5
   122f8:	bl	1386c <__assert_fail@plt+0x2434>
   122fc:	mov	r0, sl
   12300:	ldr	r1, [r0], #4
   12304:	cmp	r1, #1
   12308:	bne	12318 <__assert_fail@plt+0xee0>
   1230c:	ldr	r0, [r0]
   12310:	bl	1386c <__assert_fail@plt+0x2434>
   12314:	b	1231c <__assert_fail@plt+0xee4>
   12318:	bl	15390 <__assert_fail@plt+0x3f58>
   1231c:	mov	r0, sl
   12320:	bl	1386c <__assert_fail@plt+0x2434>
   12324:	mov	r0, #16
   12328:	bl	34f54 <__assert_fail@plt+0x23b1c>
   1232c:	mov	r1, #0
   12330:	mov	r5, r0
   12334:	str	r1, [r0], #4
   12338:	mov	r1, r9
   1233c:	bl	1565c <__assert_fail@plt+0x4224>
   12340:	movw	r7, #37264	; 0x9190
   12344:	movt	r7, #4
   12348:	ldr	r4, [r7]
   1234c:	ldr	r0, [r4]
   12350:	cmp	r0, #0
   12354:	bne	11fe4 <__assert_fail@plt+0xbac>
   12358:	mov	r0, r5
   1235c:	sub	sp, fp, #28
   12360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12364:	bl	11420 <abort@plt>
   12368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1236c:	add	fp, sp, #28
   12370:	sub	sp, sp, #4
   12374:	mov	r4, r0
   12378:	bl	125a0 <__assert_fail@plt+0x1168>
   1237c:	movw	r8, #37264	; 0x9190
   12380:	str	r0, [sp]
   12384:	movt	r8, #4
   12388:	ldr	r5, [r8]
   1238c:	ldr	r0, [r5]
   12390:	cmp	r0, #0
   12394:	beq	12554 <__assert_fail@plt+0x111c>
   12398:	ldr	r1, [sp]
   1239c:	mvn	r9, #47	; 0x2f
   123a0:	add	r6, r1, #4
   123a4:	movw	r1, #25976	; 0x6578
   123a8:	movt	r1, #3
   123ac:	bl	11180 <strcmp@plt>
   123b0:	clz	r1, r0
   123b4:	cmp	r0, #0
   123b8:	mov	sl, #0
   123bc:	lsr	r1, r1, #5
   123c0:	add	r5, r5, r1, lsl #2
   123c4:	str	r5, [r8]
   123c8:	beq	12400 <__assert_fail@plt+0xfc8>
   123cc:	ldr	r0, [r5]
   123d0:	cmp	r0, #0
   123d4:	beq	12554 <__assert_fail@plt+0x111c>
   123d8:	movw	r1, #25590	; 0x63f6
   123dc:	movt	r1, #3
   123e0:	bl	11180 <strcmp@plt>
   123e4:	clz	r1, r0
   123e8:	mov	sl, #1
   123ec:	cmp	r0, #0
   123f0:	lsr	r1, r1, #5
   123f4:	add	r1, r5, r1, lsl #2
   123f8:	str	r1, [r8]
   123fc:	bne	12554 <__assert_fail@plt+0x111c>
   12400:	mov	r0, r4
   12404:	bl	125a0 <__assert_fail@plt+0x1168>
   12408:	mov	r7, r0
   1240c:	cmp	r4, #0
   12410:	beq	1251c <__assert_fail@plt+0x10e4>
   12414:	ldr	r0, [sp]
   12418:	ldr	r0, [r0]
   1241c:	cmp	r0, #0
   12420:	beq	12488 <__assert_fail@plt+0x1050>
   12424:	cmp	r0, #1
   12428:	bne	12584 <__assert_fail@plt+0x114c>
   1242c:	ldr	r5, [r6]
   12430:	mov	r0, r5
   12434:	ldrb	r1, [r0], #1
   12438:	cmp	r1, #45	; 0x2d
   1243c:	movne	r0, r5
   12440:	ldrb	r1, [r0], #1
   12444:	uxtab	r1, r9, r1
   12448:	cmp	r1, #9
   1244c:	bhi	12560 <__assert_fail@plt+0x1128>
   12450:	ldrb	r1, [r0], #1
   12454:	cmp	r1, #0
   12458:	bne	12444 <__assert_fail@plt+0x100c>
   1245c:	mov	r0, r6
   12460:	mov	r1, r5
   12464:	mov	r2, #10
   12468:	bl	204ec <__assert_fail@plt+0xf0b4>
   1246c:	cmp	r0, #0
   12470:	bne	12588 <__assert_fail@plt+0x1150>
   12474:	mov	r0, r5
   12478:	bl	1386c <__assert_fail@plt+0x2434>
   1247c:	ldr	r0, [sp]
   12480:	mov	r1, #0
   12484:	str	r1, [r0]
   12488:	ldr	r0, [r7]
   1248c:	cmp	r0, #0
   12490:	beq	124f4 <__assert_fail@plt+0x10bc>
   12494:	cmp	r0, #1
   12498:	bne	12584 <__assert_fail@plt+0x114c>
   1249c:	mov	r0, r7
   124a0:	ldr	r5, [r0, #4]!
   124a4:	mov	r1, r5
   124a8:	ldrb	r2, [r1], #1
   124ac:	cmp	r2, #45	; 0x2d
   124b0:	movne	r1, r5
   124b4:	ldrb	r2, [r1], #1
   124b8:	uxtab	r2, r9, r2
   124bc:	cmp	r2, #9
   124c0:	bhi	12560 <__assert_fail@plt+0x1128>
   124c4:	ldrb	r2, [r1], #1
   124c8:	cmp	r2, #0
   124cc:	bne	124b8 <__assert_fail@plt+0x1080>
   124d0:	mov	r1, r5
   124d4:	mov	r2, #10
   124d8:	bl	204ec <__assert_fail@plt+0xf0b4>
   124dc:	cmp	r0, #0
   124e0:	bne	12588 <__assert_fail@plt+0x1150>
   124e4:	mov	r0, r5
   124e8:	bl	1386c <__assert_fail@plt+0x2434>
   124ec:	mov	r0, #0
   124f0:	str	r0, [r7]
   124f4:	movw	r3, #28508	; 0x6f5c
   124f8:	movw	r0, #26496	; 0x6780
   124fc:	cmp	sl, #0
   12500:	add	r2, r7, #4
   12504:	mov	r1, r6
   12508:	movt	r3, #1
   1250c:	movt	r0, #1
   12510:	moveq	r3, r0
   12514:	mov	r0, r6
   12518:	blx	r3
   1251c:	mov	r0, r7
   12520:	ldr	r1, [r0], #4
   12524:	cmp	r1, #1
   12528:	bne	12538 <__assert_fail@plt+0x1100>
   1252c:	ldr	r0, [r0]
   12530:	bl	1386c <__assert_fail@plt+0x2434>
   12534:	b	1253c <__assert_fail@plt+0x1104>
   12538:	bl	15390 <__assert_fail@plt+0x3f58>
   1253c:	mov	r0, r7
   12540:	bl	1386c <__assert_fail@plt+0x2434>
   12544:	ldr	r5, [r8]
   12548:	ldr	r0, [r5]
   1254c:	cmp	r0, #0
   12550:	bne	123a4 <__assert_fail@plt+0xf6c>
   12554:	ldr	r0, [sp]
   12558:	sub	sp, fp, #28
   1255c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12560:	movw	r1, #25978	; 0x657a
   12564:	mov	r0, #0
   12568:	mov	r2, #5
   1256c:	movt	r1, #3
   12570:	bl	11228 <dcgettext@plt>
   12574:	mov	r2, r0
   12578:	mov	r0, #2
   1257c:	mov	r1, #0
   12580:	bl	112a0 <error@plt>
   12584:	bl	11420 <abort@plt>
   12588:	movw	r2, #26312	; 0x66c8
   1258c:	mov	r0, #3
   12590:	mov	r1, #34	; 0x22
   12594:	mov	r3, r5
   12598:	movt	r2, #3
   1259c:	bl	112a0 <error@plt>
   125a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125a4:	add	fp, sp, #28
   125a8:	sub	sp, sp, #12
   125ac:	mov	sl, r0
   125b0:	bl	12870 <__assert_fail@plt+0x1438>
   125b4:	movw	r4, #37264	; 0x9190
   125b8:	mov	r9, r0
   125bc:	movt	r4, #4
   125c0:	ldr	r5, [r4]
   125c4:	ldr	r0, [r5]
   125c8:	cmp	r0, #0
   125cc:	beq	12800 <__assert_fail@plt+0x13c8>
   125d0:	add	r1, r9, #4
   125d4:	mvn	r8, #47	; 0x2f
   125d8:	str	r9, [sp, #4]
   125dc:	str	r1, [sp, #8]
   125e0:	movw	r1, #25999	; 0x658f
   125e4:	movt	r1, #3
   125e8:	bl	11180 <strcmp@plt>
   125ec:	clz	r1, r0
   125f0:	cmp	r0, #0
   125f4:	mov	r6, #0
   125f8:	lsr	r1, r1, #5
   125fc:	add	r5, r5, r1, lsl #2
   12600:	str	r5, [r4]
   12604:	beq	12674 <__assert_fail@plt+0x123c>
   12608:	ldr	r0, [r5]
   1260c:	cmp	r0, #0
   12610:	beq	12800 <__assert_fail@plt+0x13c8>
   12614:	movw	r1, #32880	; 0x8070
   12618:	movt	r1, #3
   1261c:	bl	11180 <strcmp@plt>
   12620:	clz	r1, r0
   12624:	cmp	r0, #0
   12628:	lsr	r1, r1, #5
   1262c:	add	r5, r5, r1, lsl #2
   12630:	str	r5, [r4]
   12634:	beq	12670 <__assert_fail@plt+0x1238>
   12638:	ldr	r0, [r5]
   1263c:	cmp	r0, #0
   12640:	beq	12800 <__assert_fail@plt+0x13c8>
   12644:	movw	r1, #26001	; 0x6591
   12648:	movt	r1, #3
   1264c:	bl	11180 <strcmp@plt>
   12650:	clz	r1, r0
   12654:	mov	r6, #2
   12658:	cmp	r0, #0
   1265c:	lsr	r1, r1, #5
   12660:	add	r1, r5, r1, lsl #2
   12664:	str	r1, [r4]
   12668:	beq	12674 <__assert_fail@plt+0x123c>
   1266c:	b	12800 <__assert_fail@plt+0x13c8>
   12670:	mov	r6, #1
   12674:	mov	r0, sl
   12678:	bl	12870 <__assert_fail@plt+0x1438>
   1267c:	mov	r7, r0
   12680:	cmp	sl, #0
   12684:	beq	127c8 <__assert_fail@plt+0x1390>
   12688:	ldr	r0, [r9]
   1268c:	cmp	r0, #0
   12690:	beq	12704 <__assert_fail@plt+0x12cc>
   12694:	cmp	r0, #1
   12698:	bne	12830 <__assert_fail@plt+0x13f8>
   1269c:	ldr	r0, [sp, #8]
   126a0:	ldr	r9, [r0]
   126a4:	mov	r0, r9
   126a8:	ldrb	r1, [r0], #1
   126ac:	cmp	r1, #45	; 0x2d
   126b0:	movne	r0, r9
   126b4:	ldrb	r1, [r0], #1
   126b8:	uxtab	r1, r8, r1
   126bc:	cmp	r1, #9
   126c0:	bhi	1280c <__assert_fail@plt+0x13d4>
   126c4:	ldrb	r1, [r0], #1
   126c8:	cmp	r1, #0
   126cc:	bne	126b8 <__assert_fail@plt+0x1280>
   126d0:	ldr	r0, [sp, #8]
   126d4:	mov	r1, r9
   126d8:	mov	r2, #10
   126dc:	bl	204ec <__assert_fail@plt+0xf0b4>
   126e0:	cmp	r0, #0
   126e4:	bne	12834 <__assert_fail@plt+0x13fc>
   126e8:	mov	r0, r9
   126ec:	bl	1386c <__assert_fail@plt+0x2434>
   126f0:	ldr	r9, [sp, #4]
   126f4:	movw	r4, #37264	; 0x9190
   126f8:	mov	r0, #0
   126fc:	movt	r4, #4
   12700:	str	r0, [r9]
   12704:	ldr	r0, [r7]
   12708:	cmp	r0, #0
   1270c:	beq	1277c <__assert_fail@plt+0x1344>
   12710:	cmp	r0, #1
   12714:	bne	12830 <__assert_fail@plt+0x13f8>
   12718:	mov	r0, r7
   1271c:	ldr	r5, [r0, #4]!
   12720:	mov	r1, r5
   12724:	ldrb	r2, [r1], #1
   12728:	cmp	r2, #45	; 0x2d
   1272c:	movne	r1, r5
   12730:	ldrb	r2, [r1], #1
   12734:	uxtab	r2, r8, r2
   12738:	cmp	r2, #9
   1273c:	bhi	1280c <__assert_fail@plt+0x13d4>
   12740:	ldrb	r2, [r1], #1
   12744:	cmp	r2, #0
   12748:	bne	12734 <__assert_fail@plt+0x12fc>
   1274c:	mov	r1, r5
   12750:	mov	r2, #10
   12754:	bl	204ec <__assert_fail@plt+0xf0b4>
   12758:	cmp	r0, #0
   1275c:	bne	1284c <__assert_fail@plt+0x1414>
   12760:	mov	r0, r5
   12764:	bl	1386c <__assert_fail@plt+0x2434>
   12768:	ldr	r9, [sp, #4]
   1276c:	movw	r4, #37264	; 0x9190
   12770:	mov	r0, #0
   12774:	movt	r4, #4
   12778:	str	r0, [r7]
   1277c:	movw	r3, #29512	; 0x7348
   12780:	add	r5, r7, #4
   12784:	cmp	r6, #0
   12788:	movt	r3, #1
   1278c:	beq	127b8 <__assert_fail@plt+0x1380>
   12790:	mov	r0, r5
   12794:	bl	162c8 <__assert_fail@plt+0x4e90>
   12798:	cmp	r0, #0
   1279c:	beq	12864 <__assert_fail@plt+0x142c>
   127a0:	movw	r3, #33260	; 0x81ec
   127a4:	movw	r0, #33120	; 0x8160
   127a8:	cmp	r6, #1
   127ac:	movt	r3, #1
   127b0:	movt	r0, #1
   127b4:	moveq	r3, r0
   127b8:	ldr	r0, [sp, #8]
   127bc:	mov	r2, r5
   127c0:	mov	r1, r0
   127c4:	blx	r3
   127c8:	mov	r0, r7
   127cc:	ldr	r1, [r0], #4
   127d0:	cmp	r1, #1
   127d4:	bne	127e4 <__assert_fail@plt+0x13ac>
   127d8:	ldr	r0, [r0]
   127dc:	bl	1386c <__assert_fail@plt+0x2434>
   127e0:	b	127e8 <__assert_fail@plt+0x13b0>
   127e4:	bl	15390 <__assert_fail@plt+0x3f58>
   127e8:	mov	r0, r7
   127ec:	bl	1386c <__assert_fail@plt+0x2434>
   127f0:	ldr	r5, [r4]
   127f4:	ldr	r0, [r5]
   127f8:	cmp	r0, #0
   127fc:	bne	125e0 <__assert_fail@plt+0x11a8>
   12800:	mov	r0, r9
   12804:	sub	sp, fp, #28
   12808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1280c:	movw	r1, #25978	; 0x657a
   12810:	movt	r1, #3
   12814:	mov	r0, #0
   12818:	mov	r2, #5
   1281c:	bl	11228 <dcgettext@plt>
   12820:	mov	r2, r0
   12824:	mov	r0, #2
   12828:	mov	r1, #0
   1282c:	bl	112a0 <error@plt>
   12830:	bl	11420 <abort@plt>
   12834:	movw	r2, #26312	; 0x66c8
   12838:	mov	r0, #3
   1283c:	mov	r1, #34	; 0x22
   12840:	mov	r3, r9
   12844:	movt	r2, #3
   12848:	bl	112a0 <error@plt>
   1284c:	movw	r2, #26312	; 0x66c8
   12850:	mov	r0, #3
   12854:	mov	r1, #34	; 0x22
   12858:	mov	r3, r5
   1285c:	movt	r2, #3
   12860:	bl	112a0 <error@plt>
   12864:	movw	r1, #26003	; 0x6593
   12868:	movt	r1, #3
   1286c:	b	12814 <__assert_fail@plt+0x13dc>
   12870:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12874:	add	fp, sp, #24
   12878:	mov	r5, r0
   1287c:	bl	12954 <__assert_fail@plt+0x151c>
   12880:	movw	r9, #37264	; 0x9190
   12884:	mov	r6, r0
   12888:	movt	r9, #4
   1288c:	ldr	r4, [r9]
   12890:	ldr	r0, [r4]
   12894:	cmp	r0, #0
   12898:	beq	1294c <__assert_fail@plt+0x1514>
   1289c:	movw	r8, #26020	; 0x65a4
   128a0:	movt	r8, #3
   128a4:	mov	r1, r8
   128a8:	bl	11180 <strcmp@plt>
   128ac:	clz	r1, r0
   128b0:	cmp	r0, #0
   128b4:	lsr	r1, r1, #5
   128b8:	add	r1, r4, r1, lsl #2
   128bc:	str	r1, [r9]
   128c0:	bne	1294c <__assert_fail@plt+0x1514>
   128c4:	mov	r0, r5
   128c8:	bl	12954 <__assert_fail@plt+0x151c>
   128cc:	mov	r7, r0
   128d0:	cmp	r5, #0
   128d4:	beq	12914 <__assert_fail@plt+0x14dc>
   128d8:	mov	r0, r6
   128dc:	mov	r1, r7
   128e0:	bl	1344c <__assert_fail@plt+0x2014>
   128e4:	mov	r4, r0
   128e8:	mov	r0, r6
   128ec:	ldr	r1, [r0], #4
   128f0:	cmp	r1, #1
   128f4:	bne	12904 <__assert_fail@plt+0x14cc>
   128f8:	ldr	r0, [r0]
   128fc:	bl	1386c <__assert_fail@plt+0x2434>
   12900:	b	12908 <__assert_fail@plt+0x14d0>
   12904:	bl	15390 <__assert_fail@plt+0x3f58>
   12908:	mov	r0, r6
   1290c:	bl	1386c <__assert_fail@plt+0x2434>
   12910:	mov	r6, r4
   12914:	mov	r0, r7
   12918:	ldr	r1, [r0], #4
   1291c:	cmp	r1, #1
   12920:	bne	12930 <__assert_fail@plt+0x14f8>
   12924:	ldr	r0, [r0]
   12928:	bl	1386c <__assert_fail@plt+0x2434>
   1292c:	b	12934 <__assert_fail@plt+0x14fc>
   12930:	bl	15390 <__assert_fail@plt+0x3f58>
   12934:	mov	r0, r7
   12938:	bl	1386c <__assert_fail@plt+0x2434>
   1293c:	ldr	r4, [r9]
   12940:	ldr	r0, [r4]
   12944:	cmp	r0, #0
   12948:	bne	128a4 <__assert_fail@plt+0x146c>
   1294c:	mov	r0, r6
   12950:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12958:	add	fp, sp, #28
   1295c:	sub	sp, sp, #132	; 0x84
   12960:	movw	r6, #37264	; 0x9190
   12964:	mov	r4, r0
   12968:	movt	r6, #4
   1296c:	ldr	r5, [r6]
   12970:	ldr	r0, [r5]
   12974:	cmp	r0, #0
   12978:	beq	133c0 <__assert_fail@plt+0x1f88>
   1297c:	movw	r1, #25976	; 0x6578
   12980:	movt	r1, #3
   12984:	bl	11180 <strcmp@plt>
   12988:	clz	r1, r0
   1298c:	cmp	r0, #0
   12990:	lsr	r1, r1, #5
   12994:	add	r7, r5, r1, lsl #2
   12998:	str	r7, [r6]
   1299c:	ldr	r5, [r5, r1, lsl #2]
   129a0:	beq	12aec <__assert_fail@plt+0x16b4>
   129a4:	cmp	r5, #0
   129a8:	beq	133c0 <__assert_fail@plt+0x1f88>
   129ac:	movw	r1, #26022	; 0x65a6
   129b0:	mov	r0, r5
   129b4:	movt	r1, #3
   129b8:	bl	11180 <strcmp@plt>
   129bc:	clz	r1, r0
   129c0:	cmp	r0, #0
   129c4:	lsr	r1, r1, #5
   129c8:	add	r5, r7, r1, lsl #2
   129cc:	str	r5, [r6]
   129d0:	beq	12b20 <__assert_fail@plt+0x16e8>
   129d4:	ldr	r0, [r5]
   129d8:	cmp	r0, #0
   129dc:	beq	133c0 <__assert_fail@plt+0x1f88>
   129e0:	movw	r1, #26029	; 0x65ad
   129e4:	movt	r1, #3
   129e8:	bl	11180 <strcmp@plt>
   129ec:	clz	r1, r0
   129f0:	cmp	r0, #0
   129f4:	lsr	r1, r1, #5
   129f8:	add	r5, r5, r1, lsl #2
   129fc:	str	r5, [r6]
   12a00:	beq	12b4c <__assert_fail@plt+0x1714>
   12a04:	ldr	r0, [r5]
   12a08:	cmp	r0, #0
   12a0c:	beq	133c0 <__assert_fail@plt+0x1f88>
   12a10:	movw	r1, #26035	; 0x65b3
   12a14:	movt	r1, #3
   12a18:	bl	11180 <strcmp@plt>
   12a1c:	clz	r1, r0
   12a20:	cmp	r0, #0
   12a24:	lsr	r1, r1, #5
   12a28:	add	r5, r5, r1, lsl #2
   12a2c:	str	r5, [r6]
   12a30:	beq	12c00 <__assert_fail@plt+0x17c8>
   12a34:	ldr	r0, [r5]
   12a38:	cmp	r0, #0
   12a3c:	beq	133c0 <__assert_fail@plt+0x1f88>
   12a40:	movw	r1, #26041	; 0x65b9
   12a44:	movt	r1, #3
   12a48:	bl	11180 <strcmp@plt>
   12a4c:	clz	r1, r0
   12a50:	cmp	r0, #0
   12a54:	lsr	r1, r1, #5
   12a58:	add	r5, r5, r1, lsl #2
   12a5c:	str	r5, [r6]
   12a60:	beq	12c7c <__assert_fail@plt+0x1844>
   12a64:	ldr	r0, [r5]
   12a68:	cmp	r0, #0
   12a6c:	beq	133c0 <__assert_fail@plt+0x1f88>
   12a70:	movw	r1, #26088	; 0x65e8
   12a74:	movt	r1, #3
   12a78:	bl	11180 <strcmp@plt>
   12a7c:	clz	r1, r0
   12a80:	cmp	r0, #0
   12a84:	lsr	r1, r1, #5
   12a88:	add	r5, r5, r1, lsl #2
   12a8c:	str	r5, [r6]
   12a90:	beq	1300c <__assert_fail@plt+0x1bd4>
   12a94:	ldr	r0, [r5]
   12a98:	cmp	r0, #0
   12a9c:	beq	12ac4 <__assert_fail@plt+0x168c>
   12aa0:	movw	r1, #28792	; 0x7078
   12aa4:	movt	r1, #3
   12aa8:	bl	11180 <strcmp@plt>
   12aac:	clz	r1, r0
   12ab0:	cmp	r0, #0
   12ab4:	lsr	r1, r1, #5
   12ab8:	add	r5, r5, r1, lsl #2
   12abc:	str	r5, [r6]
   12ac0:	beq	13404 <__assert_fail@plt+0x1fcc>
   12ac4:	add	r0, r5, #4
   12ac8:	str	r0, [r6]
   12acc:	mov	r0, #16
   12ad0:	ldr	r4, [r5]
   12ad4:	bl	34f54 <__assert_fail@plt+0x23b1c>
   12ad8:	mov	r7, r0
   12adc:	mov	r0, #1
   12ae0:	str	r0, [r7]
   12ae4:	mov	r0, r4
   12ae8:	b	12b14 <__assert_fail@plt+0x16dc>
   12aec:	cmp	r5, #0
   12af0:	beq	133c0 <__assert_fail@plt+0x1f88>
   12af4:	add	r0, r7, #4
   12af8:	str	r0, [r6]
   12afc:	mov	r0, #16
   12b00:	bl	34f54 <__assert_fail@plt+0x23b1c>
   12b04:	mov	r7, r0
   12b08:	mov	r0, #1
   12b0c:	str	r0, [r7]
   12b10:	mov	r0, r5
   12b14:	bl	35474 <__assert_fail@plt+0x2403c>
   12b18:	str	r0, [r7, #4]
   12b1c:	b	13134 <__assert_fail@plt+0x1cfc>
   12b20:	mov	r0, r4
   12b24:	bl	12954 <__assert_fail@plt+0x151c>
   12b28:	mov	r4, r0
   12b2c:	ldr	r0, [r0]
   12b30:	cmp	r0, #0
   12b34:	beq	12b98 <__assert_fail@plt+0x1760>
   12b38:	cmp	r0, #1
   12b3c:	bne	13400 <__assert_fail@plt+0x1fc8>
   12b40:	mov	r5, r4
   12b44:	ldr	r6, [r5, #4]!
   12b48:	b	12bc0 <__assert_fail@plt+0x1788>
   12b4c:	mov	r0, r4
   12b50:	bl	12954 <__assert_fail@plt+0x151c>
   12b54:	mov	r6, r0
   12b58:	mov	r0, r4
   12b5c:	bl	12954 <__assert_fail@plt+0x151c>
   12b60:	mov	r5, r0
   12b64:	cmp	r4, #0
   12b68:	beq	12c74 <__assert_fail@plt+0x183c>
   12b6c:	mov	r0, r6
   12b70:	mov	r1, r5
   12b74:	bl	1344c <__assert_fail@plt+0x2014>
   12b78:	mov	r7, r0
   12b7c:	mov	r0, r6
   12b80:	ldr	r1, [r0], #4
   12b84:	cmp	r1, #1
   12b88:	bne	12fd8 <__assert_fail@plt+0x1ba0>
   12b8c:	ldr	r0, [r0]
   12b90:	bl	1386c <__assert_fail@plt+0x2434>
   12b94:	b	12fdc <__assert_fail@plt+0x1ba4>
   12b98:	add	r5, r4, #4
   12b9c:	mov	r0, #0
   12ba0:	mov	r1, #10
   12ba4:	mov	r2, r5
   12ba8:	bl	1fc10 <__assert_fail@plt+0xe7d8>
   12bac:	mov	r6, r0
   12bb0:	mov	r0, r5
   12bb4:	bl	15390 <__assert_fail@plt+0x3f58>
   12bb8:	mov	r0, #1
   12bbc:	stm	r4, {r0, r6}
   12bc0:	mov	r0, r6
   12bc4:	bl	2116c <__assert_fail@plt+0xfd34>
   12bc8:	mov	r6, r0
   12bcc:	mov	r0, #16
   12bd0:	bl	34f54 <__assert_fail@plt+0x23b1c>
   12bd4:	mov	r1, #0
   12bd8:	mov	r7, r0
   12bdc:	str	r1, [r0], #4
   12be0:	mov	r1, r6
   12be4:	bl	1565c <__assert_fail@plt+0x4224>
   12be8:	ldr	r0, [r4]
   12bec:	cmp	r0, #1
   12bf0:	bne	13124 <__assert_fail@plt+0x1cec>
   12bf4:	ldr	r0, [r5]
   12bf8:	bl	1386c <__assert_fail@plt+0x2434>
   12bfc:	b	1312c <__assert_fail@plt+0x1cf4>
   12c00:	mov	r0, r4
   12c04:	bl	12954 <__assert_fail@plt+0x151c>
   12c08:	mov	r8, r0
   12c0c:	mov	r0, r4
   12c10:	bl	12954 <__assert_fail@plt+0x151c>
   12c14:	mov	r4, r0
   12c18:	ldr	r0, [r8]
   12c1c:	cmp	r0, #1
   12c20:	beq	12c54 <__assert_fail@plt+0x181c>
   12c24:	cmp	r0, #0
   12c28:	bne	13400 <__assert_fail@plt+0x1fc8>
   12c2c:	add	r6, r8, #4
   12c30:	mov	r0, #0
   12c34:	mov	r1, #10
   12c38:	mov	r2, r6
   12c3c:	bl	1fc10 <__assert_fail@plt+0xe7d8>
   12c40:	mov	r7, r0
   12c44:	mov	r0, r6
   12c48:	bl	15390 <__assert_fail@plt+0x3f58>
   12c4c:	mov	r0, #1
   12c50:	stm	r8, {r0, r7}
   12c54:	ldr	r0, [r4]
   12c58:	cmp	r0, #0
   12c5c:	beq	12e00 <__assert_fail@plt+0x19c8>
   12c60:	cmp	r0, #1
   12c64:	bne	13400 <__assert_fail@plt+0x1fc8>
   12c68:	mov	r9, r4
   12c6c:	ldr	r7, [r9, #4]!
   12c70:	b	12e28 <__assert_fail@plt+0x19f0>
   12c74:	mov	r7, r6
   12c78:	b	12fe4 <__assert_fail@plt+0x1bac>
   12c7c:	mov	r0, r4
   12c80:	bl	12954 <__assert_fail@plt+0x151c>
   12c84:	mov	r9, r0
   12c88:	mov	r0, r4
   12c8c:	bl	12954 <__assert_fail@plt+0x151c>
   12c90:	mov	r8, r0
   12c94:	mov	r0, r4
   12c98:	bl	12954 <__assert_fail@plt+0x151c>
   12c9c:	mov	sl, r0
   12ca0:	ldr	r0, [r9]
   12ca4:	cmp	r0, #1
   12ca8:	beq	12cdc <__assert_fail@plt+0x18a4>
   12cac:	cmp	r0, #0
   12cb0:	bne	13400 <__assert_fail@plt+0x1fc8>
   12cb4:	add	r4, r9, #4
   12cb8:	mov	r0, #0
   12cbc:	mov	r1, #10
   12cc0:	mov	r2, r4
   12cc4:	bl	1fc10 <__assert_fail@plt+0xe7d8>
   12cc8:	mov	r5, r0
   12ccc:	mov	r0, r4
   12cd0:	bl	15390 <__assert_fail@plt+0x3f58>
   12cd4:	mov	r0, #1
   12cd8:	stm	r9, {r0, r5}
   12cdc:	ldr	r0, [r8]
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d4c <__assert_fail@plt+0x1914>
   12ce8:	cmp	r0, #1
   12cec:	bne	13400 <__assert_fail@plt+0x1fc8>
   12cf0:	mov	r0, r8
   12cf4:	ldr	r4, [r0, #4]!
   12cf8:	mov	r1, r4
   12cfc:	ldrb	r2, [r1], #1
   12d00:	cmp	r2, #45	; 0x2d
   12d04:	mvn	r2, #47	; 0x2f
   12d08:	movne	r1, r4
   12d0c:	ldrb	r3, [r1], #1
   12d10:	uxtab	r3, r2, r3
   12d14:	cmp	r3, #9
   12d18:	bhi	1308c <__assert_fail@plt+0x1c54>
   12d1c:	ldrb	r3, [r1], #1
   12d20:	cmp	r3, #0
   12d24:	bne	12d10 <__assert_fail@plt+0x18d8>
   12d28:	mov	r1, r4
   12d2c:	mov	r2, #10
   12d30:	bl	204ec <__assert_fail@plt+0xf0b4>
   12d34:	cmp	r0, #0
   12d38:	bne	13434 <__assert_fail@plt+0x1ffc>
   12d3c:	mov	r0, r4
   12d40:	bl	1386c <__assert_fail@plt+0x2434>
   12d44:	mov	r0, #0
   12d48:	str	r0, [r8]
   12d4c:	ldr	r0, [sl]
   12d50:	cmp	r0, #0
   12d54:	beq	12dbc <__assert_fail@plt+0x1984>
   12d58:	cmp	r0, #1
   12d5c:	bne	13400 <__assert_fail@plt+0x1fc8>
   12d60:	mov	r0, sl
   12d64:	ldr	r4, [r0, #4]!
   12d68:	mov	r1, r4
   12d6c:	ldrb	r2, [r1], #1
   12d70:	cmp	r2, #45	; 0x2d
   12d74:	mvn	r2, #47	; 0x2f
   12d78:	movne	r1, r4
   12d7c:	ldrb	r3, [r1], #1
   12d80:	uxtab	r3, r2, r3
   12d84:	cmp	r3, #9
   12d88:	bhi	1308c <__assert_fail@plt+0x1c54>
   12d8c:	ldrb	r3, [r1], #1
   12d90:	cmp	r3, #0
   12d94:	bne	12d80 <__assert_fail@plt+0x1948>
   12d98:	mov	r1, r4
   12d9c:	mov	r2, #10
   12da0:	bl	204ec <__assert_fail@plt+0xf0b4>
   12da4:	cmp	r0, #0
   12da8:	bne	13434 <__assert_fail@plt+0x1ffc>
   12dac:	mov	r0, r4
   12db0:	bl	1386c <__assert_fail@plt+0x2434>
   12db4:	mov	r0, #0
   12db8:	str	r0, [sl]
   12dbc:	add	r5, r8, #4
   12dc0:	mov	r0, r5
   12dc4:	bl	162c8 <__assert_fail@plt+0x4e90>
   12dc8:	mvn	r4, #0
   12dcc:	cmp	r0, #0
   12dd0:	mvn	r7, #0
   12dd4:	blt	13144 <__assert_fail@plt+0x1d0c>
   12dd8:	mov	r0, r5
   12ddc:	bl	158c8 <__assert_fail@plt+0x4490>
   12de0:	cmp	r0, #0
   12de4:	beq	13140 <__assert_fail@plt+0x1d08>
   12de8:	mov	r0, r5
   12dec:	bl	15ab0 <__assert_fail@plt+0x4678>
   12df0:	mov	r7, r0
   12df4:	cmn	r0, #1
   12df8:	mvneq	r7, #1
   12dfc:	b	13144 <__assert_fail@plt+0x1d0c>
   12e00:	add	r9, r4, #4
   12e04:	mov	r0, #0
   12e08:	mov	r1, #10
   12e0c:	mov	r2, r9
   12e10:	bl	1fc10 <__assert_fail@plt+0xe7d8>
   12e14:	mov	r7, r0
   12e18:	mov	r0, r9
   12e1c:	bl	15390 <__assert_fail@plt+0x3f58>
   12e20:	mov	r0, #1
   12e24:	stm	r4, {r0, r7}
   12e28:	mov	r5, r8
   12e2c:	ldrb	r0, [r7]
   12e30:	mov	sl, #0
   12e34:	ldr	r6, [r5, #4]!
   12e38:	cmp	r0, #0
   12e3c:	beq	130c8 <__assert_fail@plt+0x1c90>
   12e40:	bl	1127c <__ctype_get_mb_cur_max@plt>
   12e44:	cmp	r0, #2
   12e48:	bcc	13070 <__assert_fail@plt+0x1c38>
   12e4c:	mov	sl, #0
   12e50:	add	r0, sp, #76	; 0x4c
   12e54:	str	r4, [sp, #8]
   12e58:	str	r5, [sp, #4]
   12e5c:	str	r9, [sp, #12]
   12e60:	str	sl, [sp, #84]	; 0x54
   12e64:	str	sl, [sp, #80]	; 0x50
   12e68:	strb	sl, [sp, #76]	; 0x4c
   12e6c:	str	r6, [sp, #92]	; 0x5c
   12e70:	strb	sl, [sp, #88]	; 0x58
   12e74:	bl	21220 <__assert_fail@plt+0xfde8>
   12e78:	ldrb	r0, [sp, #100]	; 0x64
   12e7c:	cmp	r0, #0
   12e80:	beq	12e90 <__assert_fail@plt+0x1a58>
   12e84:	ldr	r0, [sp, #104]	; 0x68
   12e88:	cmp	r0, #0
   12e8c:	beq	130bc <__assert_fail@plt+0x1c84>
   12e90:	add	r4, sp, #20
   12e94:	mov	r9, #0
   12e98:	mov	r5, #0
   12e9c:	mov	sl, #0
   12ea0:	add	r0, r4, #4
   12ea4:	str	r0, [sp, #16]
   12ea8:	ldr	r0, [sp, #96]	; 0x60
   12eac:	add	r5, r5, #1
   12eb0:	cmp	r0, #1
   12eb4:	bne	12ed8 <__assert_fail@plt+0x1aa0>
   12eb8:	ldr	r6, [sp, #92]	; 0x5c
   12ebc:	mov	r0, r7
   12ec0:	ldrb	r1, [r6]
   12ec4:	bl	21094 <__assert_fail@plt+0xfc5c>
   12ec8:	mov	r1, #1
   12ecc:	cmp	r0, #0
   12ed0:	beq	12fa8 <__assert_fail@plt+0x1b70>
   12ed4:	b	130b8 <__assert_fail@plt+0x1c80>
   12ed8:	ldr	r0, [sp, #16]
   12edc:	strb	r9, [sp, #20]
   12ee0:	str	r7, [sp, #36]	; 0x24
   12ee4:	str	r9, [r0]
   12ee8:	str	r9, [r0, #4]
   12eec:	mov	r0, r4
   12ef0:	strb	r9, [sp, #32]
   12ef4:	bl	21220 <__assert_fail@plt+0xfde8>
   12ef8:	ldr	r0, [sp, #48]	; 0x30
   12efc:	ldrb	r1, [sp, #44]	; 0x2c
   12f00:	cmp	r0, #0
   12f04:	bne	12f10 <__assert_fail@plt+0x1ad8>
   12f08:	cmp	r1, #0
   12f0c:	bne	12fa0 <__assert_fail@plt+0x1b68>
   12f10:	clz	r1, r1
   12f14:	lsr	r1, r1, #5
   12f18:	tst	r1, #1
   12f1c:	bne	12f40 <__assert_fail@plt+0x1b08>
   12f20:	ldrb	r1, [sp, #100]	; 0x64
   12f24:	cmp	r1, #0
   12f28:	beq	12f40 <__assert_fail@plt+0x1b08>
   12f2c:	ldr	r1, [sp, #104]	; 0x68
   12f30:	cmp	r0, r1
   12f34:	beq	130b8 <__assert_fail@plt+0x1c80>
   12f38:	ldr	r6, [sp, #40]	; 0x28
   12f3c:	b	12f68 <__assert_fail@plt+0x1b30>
   12f40:	ldr	r6, [sp, #40]	; 0x28
   12f44:	ldr	r0, [sp, #96]	; 0x60
   12f48:	cmp	r6, r0
   12f4c:	bne	12f68 <__assert_fail@plt+0x1b30>
   12f50:	ldr	r1, [sp, #92]	; 0x5c
   12f54:	ldr	r0, [sp, #36]	; 0x24
   12f58:	mov	r2, r6
   12f5c:	bl	1121c <memcmp@plt>
   12f60:	cmp	r0, #0
   12f64:	beq	130b8 <__assert_fail@plt+0x1c80>
   12f68:	strb	r9, [sp, #32]
   12f6c:	ldr	r0, [sp, #36]	; 0x24
   12f70:	add	r0, r0, r6
   12f74:	str	r0, [sp, #36]	; 0x24
   12f78:	mov	r0, r4
   12f7c:	bl	21220 <__assert_fail@plt+0xfde8>
   12f80:	ldrb	r2, [sp, #44]	; 0x2c
   12f84:	clz	r0, r2
   12f88:	lsr	r1, r0, #5
   12f8c:	ldr	r0, [sp, #48]	; 0x30
   12f90:	cmp	r0, #0
   12f94:	bne	12f18 <__assert_fail@plt+0x1ae0>
   12f98:	cmp	r2, #0
   12f9c:	beq	12f18 <__assert_fail@plt+0x1ae0>
   12fa0:	ldr	r6, [sp, #92]	; 0x5c
   12fa4:	ldr	r1, [sp, #96]	; 0x60
   12fa8:	add	r0, r6, r1
   12fac:	strb	sl, [sp, #88]	; 0x58
   12fb0:	str	r0, [sp, #92]	; 0x5c
   12fb4:	add	r0, sp, #76	; 0x4c
   12fb8:	bl	21220 <__assert_fail@plt+0xfde8>
   12fbc:	ldrb	r0, [sp, #100]	; 0x64
   12fc0:	cmp	r0, #0
   12fc4:	beq	12ea8 <__assert_fail@plt+0x1a70>
   12fc8:	ldr	r0, [sp, #104]	; 0x68
   12fcc:	cmp	r0, #0
   12fd0:	bne	12ea8 <__assert_fail@plt+0x1a70>
   12fd4:	b	130bc <__assert_fail@plt+0x1c84>
   12fd8:	bl	15390 <__assert_fail@plt+0x3f58>
   12fdc:	mov	r0, r6
   12fe0:	bl	1386c <__assert_fail@plt+0x2434>
   12fe4:	mov	r0, r5
   12fe8:	ldr	r1, [r0], #4
   12fec:	cmp	r1, #1
   12ff0:	bne	13000 <__assert_fail@plt+0x1bc8>
   12ff4:	ldr	r0, [r0]
   12ff8:	bl	1386c <__assert_fail@plt+0x2434>
   12ffc:	b	13004 <__assert_fail@plt+0x1bcc>
   13000:	bl	15390 <__assert_fail@plt+0x3f58>
   13004:	mov	r0, r5
   13008:	b	13130 <__assert_fail@plt+0x1cf8>
   1300c:	mov	r0, r4
   13010:	bl	11aec <__assert_fail@plt+0x6b4>
   13014:	ldr	r4, [r6]
   13018:	mov	r7, r0
   1301c:	ldr	r0, [r4]
   13020:	cmp	r0, #0
   13024:	beq	13428 <__assert_fail@plt+0x1ff0>
   13028:	movw	r1, #28792	; 0x7078
   1302c:	movt	r1, #3
   13030:	bl	11180 <strcmp@plt>
   13034:	clz	r1, r0
   13038:	cmp	r0, #0
   1303c:	lsr	r1, r1, #5
   13040:	add	r1, r4, r1, lsl #2
   13044:	str	r1, [r6]
   13048:	beq	13134 <__assert_fail@plt+0x1cfc>
   1304c:	movw	r1, #26127	; 0x660f
   13050:	mov	r0, #0
   13054:	mov	r2, #5
   13058:	movt	r1, #3
   1305c:	bl	11228 <dcgettext@plt>
   13060:	mov	r4, r0
   13064:	ldr	r0, [r6]
   13068:	ldr	r2, [r0]
   1306c:	b	133e0 <__assert_fail@plt+0x1fa8>
   13070:	mov	r0, r6
   13074:	mov	r1, r7
   13078:	bl	1118c <strcspn@plt>
   1307c:	ldrb	sl, [r6, r0]
   13080:	cmp	sl, #0
   13084:	addne	sl, r0, #1
   13088:	b	130c8 <__assert_fail@plt+0x1c90>
   1308c:	mov	r0, #16
   13090:	bl	34f54 <__assert_fail@plt+0x23b1c>
   13094:	mov	r7, r0
   13098:	mov	r0, #1
   1309c:	str	r0, [r7]
   130a0:	movw	r0, #25955	; 0x6563
   130a4:	movt	r0, #3
   130a8:	bl	35474 <__assert_fail@plt+0x2403c>
   130ac:	str	r0, [r7, #4]
   130b0:	add	r5, r9, #4
   130b4:	b	13348 <__assert_fail@plt+0x1f10>
   130b8:	mov	sl, r5
   130bc:	ldr	r9, [sp, #12]
   130c0:	ldr	r5, [sp, #4]
   130c4:	ldr	r4, [sp, #8]
   130c8:	mov	r0, #16
   130cc:	bl	34f54 <__assert_fail@plt+0x23b1c>
   130d0:	mov	r1, #0
   130d4:	mov	r7, r0
   130d8:	str	r1, [r0], #4
   130dc:	mov	r1, sl
   130e0:	bl	1565c <__assert_fail@plt+0x4224>
   130e4:	ldr	r0, [r8]
   130e8:	cmp	r0, #1
   130ec:	bne	130fc <__assert_fail@plt+0x1cc4>
   130f0:	ldr	r0, [r5]
   130f4:	bl	1386c <__assert_fail@plt+0x2434>
   130f8:	b	13104 <__assert_fail@plt+0x1ccc>
   130fc:	mov	r0, r5
   13100:	bl	15390 <__assert_fail@plt+0x3f58>
   13104:	mov	r0, r8
   13108:	bl	1386c <__assert_fail@plt+0x2434>
   1310c:	ldr	r0, [r4]
   13110:	cmp	r0, #1
   13114:	bne	13124 <__assert_fail@plt+0x1cec>
   13118:	ldr	r0, [r9]
   1311c:	bl	1386c <__assert_fail@plt+0x2434>
   13120:	b	1312c <__assert_fail@plt+0x1cf4>
   13124:	add	r0, r4, #4
   13128:	bl	15390 <__assert_fail@plt+0x3f58>
   1312c:	mov	r0, r4
   13130:	bl	1386c <__assert_fail@plt+0x2434>
   13134:	mov	r0, r7
   13138:	sub	sp, fp, #28
   1313c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13140:	mvn	r7, #1
   13144:	add	r5, sl, #4
   13148:	str	r8, [sp, #16]
   1314c:	mov	r0, r5
   13150:	bl	162c8 <__assert_fail@plt+0x4e90>
   13154:	cmp	r0, #0
   13158:	blt	13188 <__assert_fail@plt+0x1d50>
   1315c:	mov	r0, r5
   13160:	bl	158c8 <__assert_fail@plt+0x4490>
   13164:	cmp	r0, #0
   13168:	beq	13184 <__assert_fail@plt+0x1d4c>
   1316c:	mov	r0, r5
   13170:	bl	15ab0 <__assert_fail@plt+0x4678>
   13174:	mov	r4, r0
   13178:	cmn	r0, #1
   1317c:	mvneq	r4, #1
   13180:	b	13188 <__assert_fail@plt+0x1d50>
   13184:	mvn	r4, #1
   13188:	mov	r5, r9
   1318c:	ldr	r6, [r5, #4]!
   13190:	mov	r0, r6
   13194:	bl	11330 <strlen@plt>
   13198:	mov	r8, r0
   1319c:	bl	1127c <__ctype_get_mb_cur_max@plt>
   131a0:	cmp	r0, #2
   131a4:	mov	r0, r8
   131a8:	bcc	131b4 <__assert_fail@plt+0x1d7c>
   131ac:	mov	r0, r6
   131b0:	bl	2116c <__assert_fail@plt+0xfd34>
   131b4:	add	r1, r4, #1
   131b8:	cmp	r1, #2
   131bc:	bcc	13214 <__assert_fail@plt+0x1ddc>
   131c0:	sub	r1, r7, #1
   131c4:	cmp	r1, r0
   131c8:	bcs	13214 <__assert_fail@plt+0x1ddc>
   131cc:	sub	r0, r0, r7
   131d0:	str	r5, [sp, #12]
   131d4:	add	r5, r0, #1
   131d8:	cmp	r5, r4
   131dc:	movhi	r5, r4
   131e0:	bl	1127c <__ctype_get_mb_cur_max@plt>
   131e4:	cmp	r0, #1
   131e8:	bne	1322c <__assert_fail@plt+0x1df4>
   131ec:	add	r0, r5, #1
   131f0:	add	r4, r6, r7
   131f4:	bl	34f54 <__assert_fail@plt+0x23b1c>
   131f8:	sub	r1, r4, #1
   131fc:	mov	r2, r5
   13200:	mvn	r3, #0
   13204:	mov	r6, r0
   13208:	bl	1142c <__mempcpy_chk@plt>
   1320c:	mov	r4, r0
   13210:	b	13310 <__assert_fail@plt+0x1ed8>
   13214:	movw	r0, #25955	; 0x6563
   13218:	movt	r0, #3
   1321c:	bl	35474 <__assert_fail@plt+0x2403c>
   13220:	ldr	r8, [sp, #16]
   13224:	mov	r6, r0
   13228:	b	13320 <__assert_fail@plt+0x1ee8>
   1322c:	add	r0, r8, #1
   13230:	str	sl, [sp, #4]
   13234:	bl	34f54 <__assert_fail@plt+0x23b1c>
   13238:	mov	r4, r0
   1323c:	mov	r0, #0
   13240:	str	r0, [sp, #84]	; 0x54
   13244:	str	r0, [sp, #80]	; 0x50
   13248:	strb	r0, [sp, #76]	; 0x4c
   1324c:	str	r6, [sp, #92]	; 0x5c
   13250:	strb	r0, [sp, #88]	; 0x58
   13254:	add	r0, sp, #76	; 0x4c
   13258:	bl	21220 <__assert_fail@plt+0xfde8>
   1325c:	ldr	r0, [sp, #104]	; 0x68
   13260:	str	r4, [sp, #8]
   13264:	cmp	r0, #0
   13268:	movwne	r0, #1
   1326c:	cmp	r5, #0
   13270:	beq	13308 <__assert_fail@plt+0x1ed0>
   13274:	ldrb	r1, [sp, #100]	; 0x64
   13278:	ldr	r4, [sp, #8]
   1327c:	clz	r1, r1
   13280:	lsr	r1, r1, #5
   13284:	orrs	r0, r1, r0
   13288:	beq	13308 <__assert_fail@plt+0x1ed0>
   1328c:	ldr	r4, [sp, #8]
   13290:	mov	r6, #1
   13294:	mov	sl, #0
   13298:	add	r8, sp, #76	; 0x4c
   1329c:	cmp	r6, r7
   132a0:	bcc	132c0 <__assert_fail@plt+0x1e88>
   132a4:	ldr	r1, [sp, #92]	; 0x5c
   132a8:	ldr	r2, [sp, #96]	; 0x60
   132ac:	mov	r0, r4
   132b0:	mvn	r3, #0
   132b4:	bl	1142c <__mempcpy_chk@plt>
   132b8:	mov	r4, r0
   132bc:	sub	r5, r5, #1
   132c0:	strb	sl, [sp, #88]	; 0x58
   132c4:	ldr	r0, [sp, #92]	; 0x5c
   132c8:	ldr	r1, [sp, #96]	; 0x60
   132cc:	add	r0, r0, r1
   132d0:	str	r0, [sp, #92]	; 0x5c
   132d4:	mov	r0, r8
   132d8:	bl	21220 <__assert_fail@plt+0xfde8>
   132dc:	ldr	r0, [sp, #104]	; 0x68
   132e0:	cmp	r0, #0
   132e4:	movwne	r0, #1
   132e8:	cmp	r5, #0
   132ec:	beq	13308 <__assert_fail@plt+0x1ed0>
   132f0:	ldrb	r1, [sp, #100]	; 0x64
   132f4:	add	r6, r6, #1
   132f8:	clz	r1, r1
   132fc:	lsr	r1, r1, #5
   13300:	orrs	r0, r1, r0
   13304:	bne	1329c <__assert_fail@plt+0x1e64>
   13308:	ldr	sl, [sp, #4]
   1330c:	ldr	r6, [sp, #8]
   13310:	ldr	r8, [sp, #16]
   13314:	ldr	r5, [sp, #12]
   13318:	mov	r0, #0
   1331c:	strb	r0, [r4]
   13320:	mov	r0, #16
   13324:	bl	34f54 <__assert_fail@plt+0x23b1c>
   13328:	mov	r7, r0
   1332c:	mov	r0, #1
   13330:	str	r0, [r7]
   13334:	mov	r0, r6
   13338:	bl	35474 <__assert_fail@plt+0x2403c>
   1333c:	str	r0, [r7, #4]
   13340:	mov	r0, r6
   13344:	bl	1386c <__assert_fail@plt+0x2434>
   13348:	ldr	r0, [r9]
   1334c:	cmp	r0, #1
   13350:	bne	13360 <__assert_fail@plt+0x1f28>
   13354:	ldr	r0, [r5]
   13358:	bl	1386c <__assert_fail@plt+0x2434>
   1335c:	b	13368 <__assert_fail@plt+0x1f30>
   13360:	add	r0, r9, #4
   13364:	bl	15390 <__assert_fail@plt+0x3f58>
   13368:	mov	r0, r9
   1336c:	bl	1386c <__assert_fail@plt+0x2434>
   13370:	mov	r0, r8
   13374:	ldr	r1, [r0], #4
   13378:	cmp	r1, #1
   1337c:	bne	1338c <__assert_fail@plt+0x1f54>
   13380:	ldr	r0, [r0]
   13384:	bl	1386c <__assert_fail@plt+0x2434>
   13388:	b	13390 <__assert_fail@plt+0x1f58>
   1338c:	bl	15390 <__assert_fail@plt+0x3f58>
   13390:	mov	r0, r8
   13394:	bl	1386c <__assert_fail@plt+0x2434>
   13398:	mov	r0, sl
   1339c:	ldr	r1, [r0], #4
   133a0:	cmp	r1, #1
   133a4:	bne	133b4 <__assert_fail@plt+0x1f7c>
   133a8:	ldr	r0, [r0]
   133ac:	bl	1386c <__assert_fail@plt+0x2434>
   133b0:	b	133b8 <__assert_fail@plt+0x1f80>
   133b4:	bl	15390 <__assert_fail@plt+0x3f58>
   133b8:	mov	r0, sl
   133bc:	b	13130 <__assert_fail@plt+0x1cf8>
   133c0:	movw	r1, #26048	; 0x65c0
   133c4:	movt	r1, #3
   133c8:	mov	r0, #0
   133cc:	mov	r2, #5
   133d0:	bl	11228 <dcgettext@plt>
   133d4:	mov	r4, r0
   133d8:	ldr	r0, [r6]
   133dc:	ldr	r2, [r0, #-4]
   133e0:	mov	r0, #0
   133e4:	mov	r1, #8
   133e8:	bl	22ac0 <__assert_fail@plt+0x11688>
   133ec:	mov	r3, r0
   133f0:	mov	r0, #2
   133f4:	mov	r1, #0
   133f8:	mov	r2, r4
   133fc:	bl	112a0 <error@plt>
   13400:	bl	11420 <abort@plt>
   13404:	movw	r1, #26169	; 0x6639
   13408:	mov	r0, #0
   1340c:	mov	r2, #5
   13410:	movt	r1, #3
   13414:	bl	11228 <dcgettext@plt>
   13418:	mov	r2, r0
   1341c:	mov	r0, #2
   13420:	mov	r1, #0
   13424:	bl	112a0 <error@plt>
   13428:	movw	r1, #26090	; 0x65ea
   1342c:	movt	r1, #3
   13430:	b	133c8 <__assert_fail@plt+0x1f90>
   13434:	movw	r2, #26312	; 0x66c8
   13438:	mov	r0, #3
   1343c:	mov	r1, #34	; 0x22
   13440:	mov	r3, r4
   13444:	movt	r2, #3
   13448:	bl	112a0 <error@plt>
   1344c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13450:	add	fp, sp, #24
   13454:	sub	sp, sp, #360	; 0x168
   13458:	mov	r4, r0
   1345c:	ldr	r0, [r0]
   13460:	mov	r5, r1
   13464:	cmp	r0, #1
   13468:	beq	1349c <__assert_fail@plt+0x2064>
   1346c:	cmp	r0, #0
   13470:	bne	13710 <__assert_fail@plt+0x22d8>
   13474:	add	r6, r4, #4
   13478:	mov	r0, #0
   1347c:	mov	r1, #10
   13480:	mov	r2, r6
   13484:	bl	1fc10 <__assert_fail@plt+0xe7d8>
   13488:	mov	r7, r0
   1348c:	mov	r0, r6
   13490:	bl	15390 <__assert_fail@plt+0x3f58>
   13494:	mov	r0, #1
   13498:	stm	r4, {r0, r7}
   1349c:	ldr	r0, [r5]
   134a0:	cmp	r0, #0
   134a4:	beq	134b8 <__assert_fail@plt+0x2080>
   134a8:	cmp	r0, #1
   134ac:	bne	13710 <__assert_fail@plt+0x22d8>
   134b0:	ldr	r6, [r5, #4]
   134b4:	b	134e0 <__assert_fail@plt+0x20a8>
   134b8:	add	r7, r5, #4
   134bc:	mov	r0, #0
   134c0:	mov	r1, #10
   134c4:	mov	r2, r7
   134c8:	bl	1fc10 <__assert_fail@plt+0xe7d8>
   134cc:	mov	r6, r0
   134d0:	mov	r0, r7
   134d4:	bl	15390 <__assert_fail@plt+0x3f58>
   134d8:	mov	r0, #1
   134dc:	stm	r5, {r0, r6}
   134e0:	movw	r0, #37584	; 0x92d0
   134e4:	movw	r1, #710	; 0x2c6
   134e8:	movt	r0, #4
   134ec:	str	r1, [r0]
   134f0:	mov	r0, #0
   134f4:	add	r1, sp, #16
   134f8:	str	r0, [sp, #8]
   134fc:	str	r0, [sp, #4]
   13500:	str	r0, [fp, #-112]	; 0xffffff90
   13504:	str	r0, [fp, #-108]	; 0xffffff94
   13508:	str	r1, [fp, #-96]	; 0xffffffa0
   1350c:	str	r0, [sp, #12]
   13510:	str	r0, [fp, #-92]	; 0xffffffa4
   13514:	mov	r0, r6
   13518:	bl	11330 <strlen@plt>
   1351c:	mov	r1, r0
   13520:	sub	r2, fp, #112	; 0x70
   13524:	mov	r0, r6
   13528:	bl	231d0 <__assert_fail@plt+0x11d98>
   1352c:	cmp	r0, #0
   13530:	bne	13714 <__assert_fail@plt+0x22dc>
   13534:	ldrb	r0, [fp, #-84]	; 0xffffffac
   13538:	and	r0, r0, #127	; 0x7f
   1353c:	strb	r0, [fp, #-84]	; 0xffffffac
   13540:	ldr	r5, [r4, #4]
   13544:	mov	r0, r5
   13548:	bl	11330 <strlen@plt>
   1354c:	mov	r2, r0
   13550:	add	r0, sp, #4
   13554:	mov	r1, r5
   13558:	mov	r3, #0
   1355c:	str	r0, [sp]
   13560:	sub	r0, fp, #112	; 0x70
   13564:	bl	27c48 <__assert_fail@plt+0x16810>
   13568:	mov	r5, r0
   1356c:	cmp	r0, #0
   13570:	blt	135c4 <__assert_fail@plt+0x218c>
   13574:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13578:	cmp	r0, #0
   1357c:	beq	135f8 <__assert_fail@plt+0x21c0>
   13580:	ldr	r0, [sp, #12]
   13584:	ldr	r0, [r0, #4]
   13588:	cmn	r0, #1
   1358c:	ble	136b4 <__assert_fail@plt+0x227c>
   13590:	ldr	r1, [r4, #4]
   13594:	mov	r2, #0
   13598:	strb	r2, [r1, r0]
   1359c:	ldr	r0, [sp, #8]
   135a0:	ldr	r5, [r4, #4]
   135a4:	ldr	r6, [r0, #4]
   135a8:	mov	r0, #16
   135ac:	bl	34f54 <__assert_fail@plt+0x23b1c>
   135b0:	mov	r4, r0
   135b4:	mov	r0, #1
   135b8:	str	r0, [r4]
   135bc:	add	r0, r5, r6
   135c0:	b	136d0 <__assert_fail@plt+0x2298>
   135c4:	cmn	r5, #1
   135c8:	bne	1372c <__assert_fail@plt+0x22f4>
   135cc:	ldr	r5, [fp, #-88]	; 0xffffffa8
   135d0:	mov	r0, #16
   135d4:	bl	34f54 <__assert_fail@plt+0x23b1c>
   135d8:	mov	r4, r0
   135dc:	cmp	r5, #0
   135e0:	bne	136c0 <__assert_fail@plt+0x2288>
   135e4:	mov	r1, #0
   135e8:	mov	r0, r4
   135ec:	str	r1, [r0], #4
   135f0:	mov	r1, #0
   135f4:	b	136ac <__assert_fail@plt+0x2274>
   135f8:	bl	1127c <__ctype_get_mb_cur_max@plt>
   135fc:	cmp	r0, #1
   13600:	mov	r6, r5
   13604:	beq	13694 <__assert_fail@plt+0x225c>
   13608:	ldr	r7, [r4, #4]
   1360c:	mov	r6, #0
   13610:	sub	r0, fp, #80	; 0x50
   13614:	str	r6, [fp, #-72]	; 0xffffffb8
   13618:	str	r6, [fp, #-76]	; 0xffffffb4
   1361c:	strb	r6, [fp, #-80]	; 0xffffffb0
   13620:	strb	r6, [fp, #-68]	; 0xffffffbc
   13624:	str	r7, [fp, #-64]	; 0xffffffc0
   13628:	bl	21220 <__assert_fail@plt+0xfde8>
   1362c:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   13630:	cmp	r0, #0
   13634:	beq	13644 <__assert_fail@plt+0x220c>
   13638:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1363c:	cmp	r0, #0
   13640:	beq	13694 <__assert_fail@plt+0x225c>
   13644:	mov	r8, #0
   13648:	sub	r4, fp, #80	; 0x50
   1364c:	mov	r6, #0
   13650:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13654:	sub	r1, r0, r7
   13658:	cmp	r1, r5
   1365c:	addcc	r6, r6, #1
   13660:	bcs	13694 <__assert_fail@plt+0x225c>
   13664:	strb	r8, [fp, #-68]	; 0xffffffbc
   13668:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1366c:	add	r0, r0, r1
   13670:	str	r0, [fp, #-64]	; 0xffffffc0
   13674:	mov	r0, r4
   13678:	bl	21220 <__assert_fail@plt+0xfde8>
   1367c:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   13680:	cmp	r0, #0
   13684:	beq	13650 <__assert_fail@plt+0x2218>
   13688:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1368c:	cmp	r0, #0
   13690:	bne	13650 <__assert_fail@plt+0x2218>
   13694:	mov	r0, #16
   13698:	bl	34f54 <__assert_fail@plt+0x23b1c>
   1369c:	mov	r1, #0
   136a0:	mov	r4, r0
   136a4:	str	r1, [r0], #4
   136a8:	mov	r1, r6
   136ac:	bl	1565c <__assert_fail@plt+0x4224>
   136b0:	b	136d8 <__assert_fail@plt+0x22a0>
   136b4:	mov	r0, #16
   136b8:	bl	34f54 <__assert_fail@plt+0x23b1c>
   136bc:	mov	r4, r0
   136c0:	mov	r0, #1
   136c4:	str	r0, [r4]
   136c8:	movw	r0, #25955	; 0x6563
   136cc:	movt	r0, #3
   136d0:	bl	35474 <__assert_fail@plt+0x2403c>
   136d4:	str	r0, [r4, #4]
   136d8:	ldr	r0, [sp, #4]
   136dc:	cmp	r0, #0
   136e0:	beq	136f4 <__assert_fail@plt+0x22bc>
   136e4:	ldr	r0, [sp, #8]
   136e8:	bl	1386c <__assert_fail@plt+0x2434>
   136ec:	ldr	r0, [sp, #12]
   136f0:	bl	1386c <__assert_fail@plt+0x2434>
   136f4:	mov	r0, #0
   136f8:	str	r0, [fp, #-96]	; 0xffffffa0
   136fc:	sub	r0, fp, #112	; 0x70
   13700:	bl	24d38 <__assert_fail@plt+0x13900>
   13704:	mov	r0, r4
   13708:	sub	sp, fp, #24
   1370c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13710:	bl	11420 <abort@plt>
   13714:	movw	r2, #26312	; 0x66c8
   13718:	mov	r3, r0
   1371c:	mov	r0, #2
   13720:	mov	r1, #0
   13724:	movt	r2, #3
   13728:	bl	112a0 <error@plt>
   1372c:	mov	r4, #75	; 0x4b
   13730:	cmn	r5, #2
   13734:	bne	13740 <__assert_fail@plt+0x2308>
   13738:	bl	11348 <__errno_location@plt>
   1373c:	ldr	r4, [r0]
   13740:	movw	r1, #26198	; 0x6656
   13744:	mov	r0, #0
   13748:	mov	r2, #5
   1374c:	movt	r1, #3
   13750:	bl	11228 <dcgettext@plt>
   13754:	mov	r2, r0
   13758:	mov	r0, #3
   1375c:	mov	r1, r4
   13760:	bl	112a0 <error@plt>
   13764:	movw	r1, #37268	; 0x9194
   13768:	movt	r1, #4
   1376c:	str	r0, [r1]
   13770:	bx	lr
   13774:	movw	r1, #37272	; 0x9198
   13778:	movt	r1, #4
   1377c:	strb	r0, [r1]
   13780:	bx	lr
   13784:	push	{r4, r5, r6, sl, fp, lr}
   13788:	add	fp, sp, #16
   1378c:	sub	sp, sp, #8
   13790:	movw	r0, #37252	; 0x9184
   13794:	movt	r0, #4
   13798:	ldr	r0, [r0]
   1379c:	bl	355d0 <__assert_fail@plt+0x24198>
   137a0:	cmp	r0, #0
   137a4:	beq	137cc <__assert_fail@plt+0x2394>
   137a8:	movw	r0, #37272	; 0x9198
   137ac:	movt	r0, #4
   137b0:	ldrb	r0, [r0]
   137b4:	cmp	r0, #0
   137b8:	beq	137ec <__assert_fail@plt+0x23b4>
   137bc:	bl	11348 <__errno_location@plt>
   137c0:	ldr	r0, [r0]
   137c4:	cmp	r0, #32
   137c8:	bne	137ec <__assert_fail@plt+0x23b4>
   137cc:	movw	r0, #37248	; 0x9180
   137d0:	movt	r0, #4
   137d4:	ldr	r0, [r0]
   137d8:	bl	355d0 <__assert_fail@plt+0x24198>
   137dc:	cmp	r0, #0
   137e0:	subeq	sp, fp, #16
   137e4:	popeq	{r4, r5, r6, sl, fp, pc}
   137e8:	b	1385c <__assert_fail@plt+0x2424>
   137ec:	movw	r1, #26296	; 0x66b8
   137f0:	mov	r0, #0
   137f4:	mov	r2, #5
   137f8:	movt	r1, #3
   137fc:	bl	11228 <dcgettext@plt>
   13800:	mov	r4, r0
   13804:	movw	r0, #37268	; 0x9194
   13808:	movt	r0, #4
   1380c:	ldr	r6, [r0]
   13810:	bl	11348 <__errno_location@plt>
   13814:	ldr	r5, [r0]
   13818:	cmp	r6, #0
   1381c:	bne	13838 <__assert_fail@plt+0x2400>
   13820:	movw	r2, #26312	; 0x66c8
   13824:	mov	r0, #0
   13828:	mov	r1, r5
   1382c:	mov	r3, r4
   13830:	movt	r2, #3
   13834:	b	13858 <__assert_fail@plt+0x2420>
   13838:	mov	r0, r6
   1383c:	bl	22d08 <__assert_fail@plt+0x118d0>
   13840:	movw	r2, #26308	; 0x66c4
   13844:	mov	r3, r0
   13848:	str	r4, [sp]
   1384c:	mov	r0, #0
   13850:	mov	r1, r5
   13854:	movt	r2, #3
   13858:	bl	112a0 <error@plt>
   1385c:	movw	r0, #37152	; 0x9120
   13860:	movt	r0, #4
   13864:	ldr	r0, [r0]
   13868:	bl	111e0 <_exit@plt>
   1386c:	push	{r4, r5, r6, sl, fp, lr}
   13870:	add	fp, sp, #16
   13874:	mov	r4, r0
   13878:	bl	11348 <__errno_location@plt>
   1387c:	ldr	r6, [r0]
   13880:	mov	r5, r0
   13884:	mov	r0, r4
   13888:	bl	111c8 <free@plt>
   1388c:	str	r6, [r5]
   13890:	pop	{r4, r5, r6, sl, fp, pc}
   13894:	andeq	r0, r0, r0
   13898:	cmp	r0, #0
   1389c:	movwne	r3, #37156	; 0x9124
   138a0:	movtne	r3, #4
   138a4:	ldrne	r3, [r3]
   138a8:	strne	r3, [r0]
   138ac:	cmp	r1, #0
   138b0:	movwne	r0, #37160	; 0x9128
   138b4:	movtne	r0, #4
   138b8:	ldrne	r0, [r0]
   138bc:	strne	r0, [r1]
   138c0:	cmp	r2, #0
   138c4:	movwne	r0, #37164	; 0x912c
   138c8:	movtne	r0, #4
   138cc:	ldrne	r0, [r0]
   138d0:	strne	r0, [r2]
   138d4:	bx	lr
   138d8:	movw	r3, #14712	; 0x3978
   138dc:	cmp	r1, #0
   138e0:	movt	r3, #1
   138e4:	movne	r3, r1
   138e8:	movw	r1, #37160	; 0x9128
   138ec:	cmp	r0, #0
   138f0:	movt	r1, #4
   138f4:	str	r3, [r1]
   138f8:	movw	r1, #14640	; 0x3930
   138fc:	movt	r1, #1
   13900:	movne	r1, r0
   13904:	movw	r0, #37156	; 0x9124
   13908:	cmp	r2, #0
   1390c:	movt	r0, #4
   13910:	str	r1, [r0]
   13914:	movw	r0, #14748	; 0x399c
   13918:	movw	r1, #37164	; 0x912c
   1391c:	movt	r0, #1
   13920:	movt	r1, #4
   13924:	movne	r0, r2
   13928:	str	r0, [r1]
   1392c:	bx	lr
   13930:	push	{fp, lr}
   13934:	mov	fp, sp
   13938:	cmp	r0, #0
   1393c:	beq	13958 <__assert_fail@plt+0x2520>
   13940:	bl	3554c <__assert_fail@plt+0x24114>
   13944:	cmp	r0, #0
   13948:	popne	{fp, pc}
   1394c:	movw	r0, #29050	; 0x717a
   13950:	movt	r0, #3
   13954:	bl	1b85c <__assert_fail@plt+0xa424>
   13958:	movw	r0, #29833	; 0x7489
   1395c:	movw	r1, #26324	; 0x66d4
   13960:	movw	r3, #29018	; 0x715a
   13964:	movw	r2, #291	; 0x123
   13968:	movt	r0, #3
   1396c:	movt	r1, #3
   13970:	movt	r3, #3
   13974:	bl	11438 <__assert_fail@plt>
   13978:	push	{fp, lr}
   1397c:	mov	fp, sp
   13980:	mov	r1, r2
   13984:	bl	3557c <__assert_fail@plt+0x24144>
   13988:	cmp	r0, #0
   1398c:	popne	{fp, pc}
   13990:	movw	r0, #29095	; 0x71a7
   13994:	movt	r0, #3
   13998:	bl	1b85c <__assert_fail@plt+0xa424>
   1399c:	b	1386c <__assert_fail@plt+0x2434>
   139a0:	cmp	r2, #1
   139a4:	blt	13a18 <__assert_fail@plt+0x25e0>
   139a8:	mov	ip, #0
   139ac:	cmp	r2, #4
   139b0:	bcc	139fc <__assert_fail@plt+0x25c4>
   139b4:	add	r3, r1, r2, lsl #2
   139b8:	cmp	r3, r0
   139bc:	addhi	r3, r0, r2, lsl #2
   139c0:	cmphi	r3, r1
   139c4:	bhi	139fc <__assert_fail@plt+0x25c4>
   139c8:	push	{r4, sl, fp, lr}
   139cc:	add	fp, sp, #8
   139d0:	bic	ip, r2, #3
   139d4:	mov	r3, r0
   139d8:	mov	r4, r1
   139dc:	mov	lr, ip
   139e0:	vld1.32	{d16-d17}, [r4]!
   139e4:	subs	lr, lr, #4
   139e8:	vst1.32	{d16-d17}, [r3]!
   139ec:	bne	139e0 <__assert_fail@plt+0x25a8>
   139f0:	cmp	ip, r2
   139f4:	pop	{r4, sl, fp, lr}
   139f8:	bxeq	lr
   139fc:	sub	r2, r2, ip
   13a00:	add	r0, r0, ip, lsl #2
   13a04:	add	r1, r1, ip, lsl #2
   13a08:	ldr	r3, [r1], #4
   13a0c:	subs	r2, r2, #1
   13a10:	str	r3, [r0], #4
   13a14:	bne	13a08 <__assert_fail@plt+0x25d0>
   13a18:	bx	lr
   13a1c:	push	{r4, r5, r6, sl, fp, lr}
   13a20:	add	fp, sp, #16
   13a24:	cmp	r2, #1
   13a28:	blt	13acc <__assert_fail@plt+0x2694>
   13a2c:	mvn	r3, r2
   13a30:	mvn	r5, #1
   13a34:	mvn	r6, #1
   13a38:	cmn	r3, #2
   13a3c:	movgt	r5, r3
   13a40:	add	r5, r5, r2
   13a44:	add	ip, r5, #2
   13a48:	cmp	ip, #4
   13a4c:	bcc	13aac <__assert_fail@plt+0x2674>
   13a50:	cmn	r3, #2
   13a54:	movle	r3, r6
   13a58:	sub	r3, r6, r3
   13a5c:	add	r6, r1, r2, lsl #2
   13a60:	add	r5, r0, r3, lsl #2
   13a64:	cmp	r5, r6
   13a68:	addcc	r6, r0, r2, lsl #2
   13a6c:	addcc	r3, r1, r3, lsl #2
   13a70:	cmpcc	r3, r6
   13a74:	bcc	13aac <__assert_fail@plt+0x2674>
   13a78:	mvn	lr, #15
   13a7c:	add	r4, lr, r2, lsl #2
   13a80:	add	r3, r1, r4
   13a84:	add	r5, r0, r4
   13a88:	bic	r4, ip, #3
   13a8c:	sub	r2, r2, r4
   13a90:	mov	r6, r4
   13a94:	vld1.32	{d16-d17}, [r3], lr
   13a98:	subs	r6, r6, #4
   13a9c:	vst1.32	{d16-d17}, [r5], lr
   13aa0:	bne	13a94 <__assert_fail@plt+0x265c>
   13aa4:	cmp	ip, r4
   13aa8:	popeq	{r4, r5, r6, sl, fp, pc}
   13aac:	sub	r2, r2, #1
   13ab0:	ldr	r3, [r1, r2, lsl #2]
   13ab4:	str	r3, [r0, r2, lsl #2]
   13ab8:	sub	r3, r2, #1
   13abc:	add	r2, r2, #1
   13ac0:	cmp	r2, #1
   13ac4:	mov	r2, r3
   13ac8:	bgt	13ab0 <__assert_fail@plt+0x2678>
   13acc:	pop	{r4, r5, r6, sl, fp, pc}
   13ad0:	sub	ip, r0, #4
   13ad4:	sub	r1, r1, #4
   13ad8:	cmp	r2, #1
   13adc:	movlt	r0, #0
   13ae0:	bxlt	lr
   13ae4:	sub	r3, r2, #1
   13ae8:	ldr	r0, [r1, r2, lsl #2]
   13aec:	ldr	r2, [ip, r2, lsl #2]
   13af0:	cmp	r2, r0
   13af4:	mov	r2, r3
   13af8:	beq	13ad8 <__assert_fail@plt+0x26a0>
   13afc:	mvn	r0, #0
   13b00:	movwhi	r0, #1
   13b04:	bx	lr
   13b08:	sub	r0, r0, #4
   13b0c:	mov	r2, r1
   13b10:	cmp	r1, #1
   13b14:	blt	13b28 <__assert_fail@plt+0x26f0>
   13b18:	ldr	r3, [r0, r2, lsl #2]
   13b1c:	sub	r1, r2, #1
   13b20:	cmp	r3, #0
   13b24:	beq	13b0c <__assert_fail@plt+0x26d4>
   13b28:	clz	r0, r2
   13b2c:	lsr	r0, r0, #5
   13b30:	bx	lr
   13b34:	cmp	r1, #1
   13b38:	bxlt	lr
   13b3c:	push	{fp, lr}
   13b40:	mov	fp, sp
   13b44:	mvn	r2, r1
   13b48:	mvn	r3, #1
   13b4c:	cmn	r2, #2
   13b50:	movle	r2, r3
   13b54:	sub	r3, r3, r2
   13b58:	add	r1, r2, r1
   13b5c:	mov	r2, #8
   13b60:	add	r2, r2, r1, lsl #2
   13b64:	add	r0, r0, r3, lsl #2
   13b68:	mov	r1, #0
   13b6c:	bl	1136c <memset@plt>
   13b70:	pop	{fp, lr}
   13b74:	bx	lr
   13b78:	push	{r4, sl, fp, lr}
   13b7c:	add	fp, sp, #8
   13b80:	cmp	r2, #1
   13b84:	blt	13bb8 <__assert_fail@plt+0x2780>
   13b88:	mov	ip, #0
   13b8c:	mov	lr, r3
   13b90:	ldr	r3, [r1], #4
   13b94:	adds	r4, r3, lr
   13b98:	adc	r3, ip, #0
   13b9c:	str	r4, [r0], #4
   13ba0:	subs	r2, r2, #1
   13ba4:	bne	13b8c <__assert_fail@plt+0x2754>
   13ba8:	mov	r0, #0
   13bac:	cmp	r4, lr
   13bb0:	movwcc	r0, #1
   13bb4:	pop	{r4, sl, fp, pc}
   13bb8:	movw	r0, #29650	; 0x73d2
   13bbc:	movw	r1, #26324	; 0x66d4
   13bc0:	movw	r3, #26341	; 0x66e5
   13bc4:	movw	r2, #442	; 0x1ba
   13bc8:	movt	r0, #3
   13bcc:	movt	r1, #3
   13bd0:	movt	r3, #3
   13bd4:	bl	11438 <__assert_fail@plt>
   13bd8:	push	{r4, r5, r6, sl, fp, lr}
   13bdc:	add	fp, sp, #16
   13be0:	cmp	r3, #1
   13be4:	movlt	ip, #0
   13be8:	movlt	r0, ip
   13bec:	poplt	{r4, r5, r6, sl, fp, pc}
   13bf0:	mov	lr, #0
   13bf4:	mov	ip, #0
   13bf8:	ldr	r5, [r1], #4
   13bfc:	ldr	r4, [r2], #4
   13c00:	adds	r6, r5, ip
   13c04:	adds	r4, r6, r4
   13c08:	adc	r6, lr, #0
   13c0c:	adds	r5, r5, ip
   13c10:	str	r4, [r0], #4
   13c14:	adc	ip, r6, #0
   13c18:	subs	r3, r3, #1
   13c1c:	bne	13bf8 <__assert_fail@plt+0x27c0>
   13c20:	mov	r0, ip
   13c24:	pop	{r4, r5, r6, sl, fp, pc}
   13c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c2c:	add	fp, sp, #28
   13c30:	sub	sp, sp, #4
   13c34:	ldr	lr, [fp, #8]
   13c38:	cmp	r2, lr
   13c3c:	blt	13cec <__assert_fail@plt+0x28b4>
   13c40:	mov	ip, r0
   13c44:	cmp	lr, #1
   13c48:	blt	13c98 <__assert_fail@plt+0x2860>
   13c4c:	mov	r8, #0
   13c50:	mov	r5, r1
   13c54:	mov	r6, ip
   13c58:	mov	r7, lr
   13c5c:	mov	r0, #0
   13c60:	ldr	sl, [r5], #4
   13c64:	ldr	r9, [r3], #4
   13c68:	adds	r4, sl, r0
   13c6c:	adds	r9, r4, r9
   13c70:	adc	r4, r8, #0
   13c74:	adds	r0, sl, r0
   13c78:	str	r9, [r6], #4
   13c7c:	adc	r0, r4, #0
   13c80:	subs	r7, r7, #1
   13c84:	bne	13c60 <__assert_fail@plt+0x2828>
   13c88:	cmp	r2, lr
   13c8c:	bgt	13ca4 <__assert_fail@plt+0x286c>
   13c90:	sub	sp, fp, #28
   13c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c98:	mov	r0, #0
   13c9c:	cmp	r2, lr
   13ca0:	ble	13c90 <__assert_fail@plt+0x2858>
   13ca4:	sub	r2, r2, lr
   13ca8:	cmp	r2, #1
   13cac:	blt	13d0c <__assert_fail@plt+0x28d4>
   13cb0:	add	r1, r1, lr, lsl #2
   13cb4:	add	r3, ip, lr, lsl #2
   13cb8:	mov	r7, #0
   13cbc:	mov	r6, r0
   13cc0:	ldr	r0, [r1], #4
   13cc4:	adds	r5, r0, r6
   13cc8:	adc	r0, r7, #0
   13ccc:	str	r5, [r3], #4
   13cd0:	subs	r2, r2, #1
   13cd4:	bne	13cbc <__assert_fail@plt+0x2884>
   13cd8:	mov	r0, #0
   13cdc:	cmp	r5, r6
   13ce0:	movwcc	r0, #1
   13ce4:	sub	sp, fp, #28
   13ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cec:	movw	r0, #26402	; 0x6722
   13cf0:	movw	r1, #26324	; 0x66d4
   13cf4:	movw	r3, #26411	; 0x672b
   13cf8:	mov	r2, #480	; 0x1e0
   13cfc:	movt	r0, #3
   13d00:	movt	r1, #3
   13d04:	movt	r3, #3
   13d08:	bl	11438 <__assert_fail@plt>
   13d0c:	movw	r0, #29650	; 0x73d2
   13d10:	movw	r1, #26324	; 0x66d4
   13d14:	movw	r3, #26341	; 0x66e5
   13d18:	movw	r2, #442	; 0x1ba
   13d1c:	movt	r0, #3
   13d20:	movt	r1, #3
   13d24:	movt	r3, #3
   13d28:	bl	11438 <__assert_fail@plt>
   13d2c:	push	{r4, sl, fp, lr}
   13d30:	add	fp, sp, #8
   13d34:	cmp	r2, #1
   13d38:	blt	13d70 <__assert_fail@plt+0x2938>
   13d3c:	ldr	lr, [r1], #4
   13d40:	mov	ip, r3
   13d44:	cmp	lr, r3
   13d48:	mov	r3, #0
   13d4c:	sub	r4, lr, ip
   13d50:	movwcc	r3, #1
   13d54:	str	r4, [r0], #4
   13d58:	subs	r2, r2, #1
   13d5c:	bne	13d3c <__assert_fail@plt+0x2904>
   13d60:	mov	r0, #0
   13d64:	cmp	lr, ip
   13d68:	movwcc	r0, #1
   13d6c:	pop	{r4, sl, fp, pc}
   13d70:	movw	r0, #29650	; 0x73d2
   13d74:	movw	r1, #26324	; 0x66d4
   13d78:	movw	r3, #26481	; 0x6771
   13d7c:	movw	r2, #493	; 0x1ed
   13d80:	movt	r0, #3
   13d84:	movt	r1, #3
   13d88:	movt	r3, #3
   13d8c:	bl	11438 <__assert_fail@plt>
   13d90:	push	{r4, r5, fp, lr}
   13d94:	add	fp, sp, #8
   13d98:	mov	ip, #0
   13d9c:	cmp	r3, #1
   13da0:	blt	13dd4 <__assert_fail@plt+0x299c>
   13da4:	ldr	r4, [r2], #4
   13da8:	ldr	lr, [r1], #4
   13dac:	adds	r5, r4, ip
   13db0:	cmp	lr, r5
   13db4:	mov	r5, #0
   13db8:	movwcc	r5, #1
   13dbc:	adds	r4, r4, ip
   13dc0:	adc	ip, r5, #0
   13dc4:	sub	r5, lr, r4
   13dc8:	subs	r3, r3, #1
   13dcc:	str	r5, [r0], #4
   13dd0:	bne	13da4 <__assert_fail@plt+0x296c>
   13dd4:	mov	r0, ip
   13dd8:	pop	{r4, r5, fp, pc}
   13ddc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13de0:	add	fp, sp, #24
   13de4:	ldr	lr, [fp, #8]
   13de8:	cmp	r2, lr
   13dec:	blt	13e8c <__assert_fail@plt+0x2a54>
   13df0:	mov	ip, r0
   13df4:	mov	r0, #0
   13df8:	cmp	lr, #1
   13dfc:	blt	13e3c <__assert_fail@plt+0x2a04>
   13e00:	mov	r4, r1
   13e04:	mov	r5, ip
   13e08:	mov	r6, lr
   13e0c:	ldr	r9, [r3], #4
   13e10:	ldr	r8, [r4], #4
   13e14:	adds	r7, r9, r0
   13e18:	cmp	r8, r7
   13e1c:	mov	r7, #0
   13e20:	movwcc	r7, #1
   13e24:	adds	r9, r9, r0
   13e28:	adc	r0, r7, #0
   13e2c:	sub	r7, r8, r9
   13e30:	subs	r6, r6, #1
   13e34:	str	r7, [r5], #4
   13e38:	bne	13e0c <__assert_fail@plt+0x29d4>
   13e3c:	cmp	r2, lr
   13e40:	pople	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e44:	sub	r2, r2, lr
   13e48:	cmp	r2, #1
   13e4c:	blt	13eac <__assert_fail@plt+0x2a74>
   13e50:	add	r1, r1, lr, lsl #2
   13e54:	add	r3, ip, lr, lsl #2
   13e58:	ldr	r5, [r1], #4
   13e5c:	mov	r6, r0
   13e60:	cmp	r5, r0
   13e64:	mov	r0, #0
   13e68:	sub	r7, r5, r6
   13e6c:	movwcc	r0, #1
   13e70:	str	r7, [r3], #4
   13e74:	subs	r2, r2, #1
   13e78:	bne	13e58 <__assert_fail@plt+0x2a20>
   13e7c:	mov	r0, #0
   13e80:	cmp	r5, r6
   13e84:	movwcc	r0, #1
   13e88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e8c:	movw	r0, #26402	; 0x6722
   13e90:	movw	r1, #26324	; 0x66d4
   13e94:	movw	r3, #26542	; 0x67ae
   13e98:	mov	r2, #532	; 0x214
   13e9c:	movt	r0, #3
   13ea0:	movt	r1, #3
   13ea4:	movt	r3, #3
   13ea8:	bl	11438 <__assert_fail@plt>
   13eac:	movw	r0, #29650	; 0x73d2
   13eb0:	movw	r1, #26324	; 0x66d4
   13eb4:	movw	r3, #26481	; 0x6771
   13eb8:	movw	r2, #493	; 0x1ed
   13ebc:	movt	r0, #3
   13ec0:	movt	r1, #3
   13ec4:	movt	r3, #3
   13ec8:	bl	11438 <__assert_fail@plt>
   13ecc:	push	{r4, r5, r6, r7, fp, lr}
   13ed0:	add	fp, sp, #16
   13ed4:	cmp	r2, #1
   13ed8:	blt	13f34 <__assert_fail@plt+0x2afc>
   13edc:	lsr	ip, r3, #16
   13ee0:	uxth	lr, r3
   13ee4:	mov	r3, #0
   13ee8:	ldr	r4, [r1], #4
   13eec:	uxth	r5, r4
   13ef0:	lsr	r4, r4, #16
   13ef4:	mul	r6, r5, ip
   13ef8:	mul	r5, r5, lr
   13efc:	mul	r7, r4, lr
   13f00:	mla	r6, r4, lr, r6
   13f04:	mul	r4, r4, ip
   13f08:	add	r6, r6, r5, lsr #16
   13f0c:	cmp	r6, r7
   13f10:	pkhbt	r5, r5, r6, lsl #16
   13f14:	addcc	r4, r4, #65536	; 0x10000
   13f18:	adds	r5, r5, r3
   13f1c:	adc	r3, r4, r6, lsr #16
   13f20:	str	r5, [r0], #4
   13f24:	subs	r2, r2, #1
   13f28:	bne	13ee8 <__assert_fail@plt+0x2ab0>
   13f2c:	mov	r0, r3
   13f30:	pop	{r4, r5, r6, r7, fp, pc}
   13f34:	movw	r0, #26881	; 0x6901
   13f38:	movw	r1, #26324	; 0x66d4
   13f3c:	movw	r3, #26612	; 0x67f4
   13f40:	movw	r2, #545	; 0x221
   13f44:	movt	r0, #3
   13f48:	movt	r1, #3
   13f4c:	movt	r3, #3
   13f50:	bl	11438 <__assert_fail@plt>
   13f54:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f58:	add	fp, sp, #24
   13f5c:	cmp	r2, #1
   13f60:	blt	13fd0 <__assert_fail@plt+0x2b98>
   13f64:	lsr	ip, r3, #16
   13f68:	uxth	lr, r3
   13f6c:	mov	r8, #0
   13f70:	mov	r3, #0
   13f74:	ldr	r5, [r1], #4
   13f78:	uxth	r6, r5
   13f7c:	lsr	r5, r5, #16
   13f80:	mul	r7, r6, ip
   13f84:	mul	r6, r6, lr
   13f88:	mul	r4, r5, lr
   13f8c:	mla	r7, r5, lr, r7
   13f90:	mul	r5, r5, ip
   13f94:	add	r7, r7, r6, lsr #16
   13f98:	cmp	r7, r4
   13f9c:	addcc	r5, r5, #65536	; 0x10000
   13fa0:	add	r4, r5, r7, lsr #16
   13fa4:	pkhbt	r5, r6, r7, lsl #16
   13fa8:	ldr	r6, [r0]
   13fac:	adds	r3, r5, r3
   13fb0:	adc	r5, r8, #0
   13fb4:	adds	r6, r3, r6
   13fb8:	adc	r3, r4, r5
   13fbc:	str	r6, [r0], #4
   13fc0:	subs	r2, r2, #1
   13fc4:	bne	13f74 <__assert_fail@plt+0x2b3c>
   13fc8:	mov	r0, r3
   13fcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fd0:	movw	r0, #26881	; 0x6901
   13fd4:	movw	r1, #26324	; 0x66d4
   13fd8:	movw	r3, #26673	; 0x6831
   13fdc:	mov	r2, #568	; 0x238
   13fe0:	movt	r0, #3
   13fe4:	movt	r1, #3
   13fe8:	movt	r3, #3
   13fec:	bl	11438 <__assert_fail@plt>
   13ff0:	push	{r4, r5, r6, r7, fp, lr}
   13ff4:	add	fp, sp, #16
   13ff8:	cmp	r2, #1
   13ffc:	blt	14070 <__assert_fail@plt+0x2c38>
   14000:	lsr	ip, r3, #16
   14004:	uxth	lr, r3
   14008:	mov	r3, #0
   1400c:	ldr	r4, [r1], #4
   14010:	uxth	r5, r4
   14014:	lsr	r4, r4, #16
   14018:	mul	r6, r5, ip
   1401c:	mul	r5, r5, lr
   14020:	mul	r7, r4, lr
   14024:	mla	r6, r4, lr, r6
   14028:	mul	r4, r4, ip
   1402c:	add	r6, r6, r5, lsr #16
   14030:	cmp	r6, r7
   14034:	pkhbt	r5, r5, r6, lsl #16
   14038:	addcc	r4, r4, #65536	; 0x10000
   1403c:	adds	r5, r5, r3
   14040:	add	r3, r4, r6, lsr #16
   14044:	adc	r7, r4, r6, lsr #16
   14048:	ldr	r4, [r0]
   1404c:	adc	r3, r3, #1
   14050:	cmp	r4, r5
   14054:	sub	r4, r4, r5
   14058:	movcs	r3, r7
   1405c:	str	r4, [r0], #4
   14060:	subs	r2, r2, #1
   14064:	bne	1400c <__assert_fail@plt+0x2bd4>
   14068:	mov	r0, r3
   1406c:	pop	{r4, r5, r6, r7, fp, pc}
   14070:	movw	r0, #26881	; 0x6901
   14074:	movw	r1, #26324	; 0x66d4
   14078:	movw	r3, #26737	; 0x6871
   1407c:	movw	r2, #594	; 0x252
   14080:	movt	r0, #3
   14084:	movt	r1, #3
   14088:	movt	r3, #3
   1408c:	bl	11438 <__assert_fail@plt>
   14090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14094:	add	fp, sp, #28
   14098:	sub	sp, sp, #12
   1409c:	ldr	lr, [fp, #8]
   140a0:	cmp	r2, lr
   140a4:	blt	141fc <__assert_fail@plt+0x2dc4>
   140a8:	cmp	lr, #0
   140ac:	ble	1421c <__assert_fail@plt+0x2de4>
   140b0:	add	r7, lr, r2
   140b4:	add	r6, r1, r2, lsl #2
   140b8:	add	r7, r0, r7, lsl #2
   140bc:	cmp	r6, r0
   140c0:	cmphi	r7, r1
   140c4:	bhi	1423c <__assert_fail@plt+0x2e04>
   140c8:	add	r6, r3, lr, lsl #2
   140cc:	cmp	r6, r0
   140d0:	cmphi	r7, r3
   140d4:	bhi	1425c <__assert_fail@plt+0x2e24>
   140d8:	cmp	r2, #1
   140dc:	blt	1427c <__assert_fail@plt+0x2e44>
   140e0:	ldr	r7, [r3]
   140e4:	mov	r6, #0
   140e8:	mov	ip, #0
   140ec:	lsr	r8, r7, #16
   140f0:	uxth	r9, r7
   140f4:	ldr	r7, [r1, r6, lsl #2]
   140f8:	uxth	r4, r7
   140fc:	lsr	r7, r7, #16
   14100:	mul	r5, r4, r8
   14104:	mul	r4, r4, r9
   14108:	mul	sl, r7, r9
   1410c:	mla	r5, r7, r9, r5
   14110:	mul	r7, r7, r8
   14114:	add	r5, r5, r4, lsr #16
   14118:	cmp	r5, sl
   1411c:	pkhbt	r4, r4, r5, lsl #16
   14120:	addcc	r7, r7, #65536	; 0x10000
   14124:	adds	r4, r4, ip
   14128:	str	r4, [r0, r6, lsl #2]
   1412c:	add	r6, r6, #1
   14130:	adc	ip, r7, r5, lsr #16
   14134:	cmp	r2, r6
   14138:	bne	140f4 <__assert_fail@plt+0x2cbc>
   1413c:	cmp	lr, #2
   14140:	str	ip, [r0, r2, lsl #2]
   14144:	blt	141f0 <__assert_fail@plt+0x2db8>
   14148:	mov	r9, #0
   1414c:	add	r7, r0, #4
   14150:	mov	r5, #0
   14154:	mov	ip, #0
   14158:	str	lr, [sp, #4]
   1415c:	str	r7, [sp]
   14160:	ldr	r7, [r3, #4]!
   14164:	lsr	sl, r7, #16
   14168:	uxth	r8, r7
   1416c:	str	r3, [sp, #8]
   14170:	ldr	r4, [r1, r5, lsl #2]
   14174:	uxth	r6, r4
   14178:	lsr	r4, r4, #16
   1417c:	mul	lr, r6, sl
   14180:	mul	r6, r6, r8
   14184:	mul	r7, r4, r8
   14188:	mla	r3, r4, r8, lr
   1418c:	mul	r4, r4, sl
   14190:	add	r3, r3, r6, lsr #16
   14194:	pkhbt	r6, r6, r3, lsl #16
   14198:	adds	lr, r6, ip
   1419c:	adc	ip, r9, #0
   141a0:	cmp	r3, r7
   141a4:	add	r7, r0, r5, lsl #2
   141a8:	add	r5, r5, #1
   141ac:	ldr	r6, [r7, #4]
   141b0:	addcc	r4, r4, #65536	; 0x10000
   141b4:	add	r3, r4, r3, lsr #16
   141b8:	adds	r6, lr, r6
   141bc:	adc	ip, r3, ip
   141c0:	cmp	r2, r5
   141c4:	str	r6, [r7, #4]
   141c8:	bne	14170 <__assert_fail@plt+0x2d38>
   141cc:	ldr	r3, [sp, #4]
   141d0:	ldr	r4, [sp]
   141d4:	sub	r0, r3, #1
   141d8:	cmp	r3, #2
   141dc:	ldr	r3, [sp, #8]
   141e0:	str	ip, [r4, r2, lsl #2]
   141e4:	mov	lr, r0
   141e8:	mov	r0, r4
   141ec:	bgt	1414c <__assert_fail@plt+0x2d14>
   141f0:	mov	r0, ip
   141f4:	sub	sp, fp, #28
   141f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141fc:	movw	r0, #26801	; 0x68b1
   14200:	movw	r1, #26324	; 0x66d4
   14204:	movw	r3, #26810	; 0x68ba
   14208:	movw	r2, #618	; 0x26a
   1420c:	movt	r0, #3
   14210:	movt	r1, #3
   14214:	movt	r3, #3
   14218:	bl	11438 <__assert_fail@plt>
   1421c:	movw	r0, #26880	; 0x6900
   14220:	movw	r1, #26324	; 0x66d4
   14224:	movw	r3, #26810	; 0x68ba
   14228:	movw	r2, #619	; 0x26b
   1422c:	movt	r0, #3
   14230:	movt	r1, #3
   14234:	movt	r3, #3
   14238:	bl	11438 <__assert_fail@plt>
   1423c:	movw	r0, #26888	; 0x6908
   14240:	movw	r1, #26324	; 0x66d4
   14244:	movw	r3, #26810	; 0x68ba
   14248:	mov	r2, #620	; 0x26c
   1424c:	movt	r0, #3
   14250:	movt	r1, #3
   14254:	movt	r3, #3
   14258:	bl	11438 <__assert_fail@plt>
   1425c:	movw	r0, #26928	; 0x6930
   14260:	movw	r1, #26324	; 0x66d4
   14264:	movw	r3, #26810	; 0x68ba
   14268:	movw	r2, #621	; 0x26d
   1426c:	movt	r0, #3
   14270:	movt	r1, #3
   14274:	movt	r3, #3
   14278:	bl	11438 <__assert_fail@plt>
   1427c:	movw	r0, #26881	; 0x6901
   14280:	movw	r1, #26324	; 0x66d4
   14284:	movw	r3, #26612	; 0x67f4
   14288:	movw	r2, #545	; 0x221
   1428c:	movt	r0, #3
   14290:	movt	r1, #3
   14294:	movt	r3, #3
   14298:	bl	11438 <__assert_fail@plt>
   1429c:	push	{fp, lr}
   142a0:	mov	fp, sp
   142a4:	sub	sp, sp, #8
   142a8:	mov	ip, r2
   142ac:	str	r3, [sp]
   142b0:	mov	r2, r3
   142b4:	mov	r3, ip
   142b8:	bl	14090 <__assert_fail@plt+0x2c58>
   142bc:	mov	sp, fp
   142c0:	pop	{fp, pc}
   142c4:	push	{fp, lr}
   142c8:	mov	fp, sp
   142cc:	sub	sp, sp, #8
   142d0:	mov	r3, r1
   142d4:	str	r2, [sp]
   142d8:	bl	14090 <__assert_fail@plt+0x2c58>
   142dc:	mov	sp, fp
   142e0:	pop	{fp, pc}
   142e4:	push	{r4, r5, r6, r7, fp, lr}
   142e8:	add	fp, sp, #16
   142ec:	cmp	r2, #0
   142f0:	ble	14350 <__assert_fail@plt+0x2f18>
   142f4:	cmp	r3, #0
   142f8:	beq	14370 <__assert_fail@plt+0x2f38>
   142fc:	cmp	r3, #32
   14300:	bcs	14390 <__assert_fail@plt+0x2f58>
   14304:	add	r5, r1, r2, lsl #2
   14308:	rsb	r7, r3, #32
   1430c:	cmp	r2, #1
   14310:	ldr	r5, [r5, #-4]
   14314:	lsl	lr, r5, r3
   14318:	lsr	ip, r5, r7
   1431c:	beq	14344 <__assert_fail@plt+0x2f0c>
   14320:	sub	r1, r1, #8
   14324:	sub	r5, r0, #4
   14328:	ldr	r6, [r1, r2, lsl #2]
   1432c:	orr	r4, lr, r6, lsr r7
   14330:	lsl	lr, r6, r3
   14334:	str	r4, [r5, r2, lsl #2]
   14338:	sub	r2, r2, #1
   1433c:	cmp	r2, #1
   14340:	bne	14328 <__assert_fail@plt+0x2ef0>
   14344:	str	lr, [r0]
   14348:	mov	r0, ip
   1434c:	pop	{r4, r5, r6, r7, fp, pc}
   14350:	movw	r0, #26881	; 0x6901
   14354:	movw	r1, #26324	; 0x66d4
   14358:	movw	r3, #26968	; 0x6958
   1435c:	movw	r2, #659	; 0x293
   14360:	movt	r0, #3
   14364:	movt	r1, #3
   14368:	movt	r3, #3
   1436c:	bl	11438 <__assert_fail@plt>
   14370:	movw	r0, #27033	; 0x6999
   14374:	movw	r1, #26324	; 0x66d4
   14378:	movw	r3, #26968	; 0x6958
   1437c:	mov	r2, #660	; 0x294
   14380:	movt	r0, #3
   14384:	movt	r1, #3
   14388:	movt	r3, #3
   1438c:	bl	11438 <__assert_fail@plt>
   14390:	movw	r0, #27042	; 0x69a2
   14394:	movw	r1, #26324	; 0x66d4
   14398:	movw	r3, #26968	; 0x6958
   1439c:	movw	r2, #661	; 0x295
   143a0:	movt	r0, #3
   143a4:	movt	r1, #3
   143a8:	movt	r3, #3
   143ac:	bl	11438 <__assert_fail@plt>
   143b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143b4:	add	fp, sp, #24
   143b8:	cmp	r2, #0
   143bc:	ble	1441c <__assert_fail@plt+0x2fe4>
   143c0:	cmp	r3, #0
   143c4:	beq	1443c <__assert_fail@plt+0x3004>
   143c8:	cmp	r3, #32
   143cc:	bcs	1445c <__assert_fail@plt+0x3024>
   143d0:	ldr	r6, [r1]
   143d4:	rsb	r4, r3, #32
   143d8:	subs	r8, r2, #1
   143dc:	lsr	lr, r6, r3
   143e0:	lsl	ip, r6, r4
   143e4:	beq	14410 <__assert_fail@plt+0x2fd8>
   143e8:	add	r1, r1, #4
   143ec:	rsb	r2, r2, #1
   143f0:	mov	r6, r0
   143f4:	ldr	r7, [r1], #4
   143f8:	adds	r2, r2, #1
   143fc:	orr	r5, lr, r7, lsl r4
   14400:	lsr	lr, r7, r3
   14404:	str	r5, [r6], #4
   14408:	bne	143f4 <__assert_fail@plt+0x2fbc>
   1440c:	add	r0, r0, r8, lsl #2
   14410:	str	lr, [r0]
   14414:	mov	r0, ip
   14418:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1441c:	movw	r0, #26881	; 0x6901
   14420:	movw	r1, #26324	; 0x66d4
   14424:	movw	r3, #27062	; 0x69b6
   14428:	movw	r2, #689	; 0x2b1
   1442c:	movt	r0, #3
   14430:	movt	r1, #3
   14434:	movt	r3, #3
   14438:	bl	11438 <__assert_fail@plt>
   1443c:	movw	r0, #27033	; 0x6999
   14440:	movw	r1, #26324	; 0x66d4
   14444:	movw	r3, #27062	; 0x69b6
   14448:	movw	r2, #690	; 0x2b2
   1444c:	movt	r0, #3
   14450:	movt	r1, #3
   14454:	movt	r3, #3
   14458:	bl	11438 <__assert_fail@plt>
   1445c:	movw	r0, #27042	; 0x69a2
   14460:	movw	r1, #26324	; 0x66d4
   14464:	movw	r3, #27062	; 0x69b6
   14468:	movw	r2, #691	; 0x2b3
   1446c:	movt	r0, #3
   14470:	movt	r1, #3
   14474:	movt	r3, #3
   14478:	bl	11438 <__assert_fail@plt>
   1447c:	lsr	ip, r1, #5
   14480:	and	r1, r1, #31
   14484:	mvn	r2, #0
   14488:	ldr	r3, [r0, ip, lsl #2]
   1448c:	and	r1, r3, r2, lsl r1
   14490:	cmp	r1, #0
   14494:	bne	144c4 <__assert_fail@plt+0x308c>
   14498:	add	r0, r0, ip, lsl #2
   1449c:	add	r3, r0, #4
   144a0:	mov	r0, #0
   144a4:	cmp	r0, #1
   144a8:	mvneq	r0, #0
   144ac:	bxeq	lr
   144b0:	ldr	r1, [r3, -r0, lsl #2]
   144b4:	sub	r0, r0, #1
   144b8:	cmp	r1, #0
   144bc:	beq	144a4 <__assert_fail@plt+0x306c>
   144c0:	sub	ip, ip, r0
   144c4:	rsb	r0, r1, #0
   144c8:	and	r1, r1, r0
   144cc:	mov	r0, #0
   144d0:	cmp	r0, r1, lsr #24
   144d4:	bne	144ec <__assert_fail@plt+0x30b4>
   144d8:	mov	r0, #0
   144dc:	lsl	r1, r1, #8
   144e0:	add	r0, r0, #8
   144e4:	cmp	r1, #16777216	; 0x1000000
   144e8:	bcc	144dc <__assert_fail@plt+0x30a4>
   144ec:	cmp	r1, #0
   144f0:	blt	14504 <__assert_fail@plt+0x30cc>
   144f4:	lsl	r1, r1, #1
   144f8:	add	r0, r0, #1
   144fc:	cmn	r1, #1
   14500:	bgt	144f4 <__assert_fail@plt+0x30bc>
   14504:	mov	r1, #31
   14508:	orr	r1, r1, ip, lsl #5
   1450c:	sub	r0, r1, r0
   14510:	bx	lr
   14514:	push	{r4, sl, fp, lr}
   14518:	add	fp, sp, #8
   1451c:	ldr	lr, [fp, #8]
   14520:	add	r4, lr, #1
   14524:	cmp	r4, #2
   14528:	bcs	145f0 <__assert_fail@plt+0x31b8>
   1452c:	cmp	r1, #0
   14530:	blt	145d0 <__assert_fail@plt+0x3198>
   14534:	cmp	r1, r3
   14538:	bgt	145d0 <__assert_fail@plt+0x3198>
   1453c:	cmp	r0, #0
   14540:	beq	1454c <__assert_fail@plt+0x3114>
   14544:	mov	ip, r1
   14548:	b	14570 <__assert_fail@plt+0x3138>
   1454c:	sub	r4, r3, #1
   14550:	cmp	r4, r1
   14554:	beq	145c0 <__assert_fail@plt+0x3188>
   14558:	add	r0, r2, r1, lsl #2
   1455c:	add	ip, r1, #1
   14560:	ldr	r0, [r0, #4]
   14564:	mov	r1, ip
   14568:	eors	r0, r0, lr
   1456c:	beq	14550 <__assert_fail@plt+0x3118>
   14570:	rsb	r1, r0, #0
   14574:	and	r1, r0, r1
   14578:	mov	r0, #0
   1457c:	cmp	r0, r1, lsr #24
   14580:	bne	14598 <__assert_fail@plt+0x3160>
   14584:	mov	r0, #0
   14588:	lsl	r1, r1, #8
   1458c:	add	r0, r0, #8
   14590:	cmp	r1, #16777216	; 0x1000000
   14594:	bcc	14588 <__assert_fail@plt+0x3150>
   14598:	cmp	r1, #0
   1459c:	blt	145b0 <__assert_fail@plt+0x3178>
   145a0:	lsl	r1, r1, #1
   145a4:	add	r0, r0, #1
   145a8:	cmn	r1, #1
   145ac:	bgt	145a0 <__assert_fail@plt+0x3168>
   145b0:	mov	r1, #31
   145b4:	orr	r1, r1, ip, lsl #5
   145b8:	sub	r0, r1, r0
   145bc:	pop	{r4, sl, fp, pc}
   145c0:	lsl	r0, r3, #5
   145c4:	cmp	lr, #0
   145c8:	mvneq	r0, #0
   145cc:	pop	{r4, sl, fp, pc}
   145d0:	movw	r0, #29255	; 0x7247
   145d4:	movw	r1, #26324	; 0x66d4
   145d8:	movw	r3, #29172	; 0x71f4
   145dc:	mov	r2, #716	; 0x2cc
   145e0:	movt	r0, #3
   145e4:	movt	r1, #3
   145e8:	movt	r3, #3
   145ec:	bl	11438 <__assert_fail@plt>
   145f0:	movw	r0, #29142	; 0x71d6
   145f4:	movw	r1, #26324	; 0x66d4
   145f8:	movw	r3, #29172	; 0x71f4
   145fc:	movw	r2, #715	; 0x2cb
   14600:	movt	r0, #3
   14604:	movt	r1, #3
   14608:	movt	r3, #3
   1460c:	bl	11438 <__assert_fail@plt>
   14610:	push	{fp, lr}
   14614:	mov	fp, sp
   14618:	lsr	ip, r1, #5
   1461c:	and	r3, r1, #31
   14620:	ldr	r2, [r0, ip, lsl #2]
   14624:	mvn	lr, r2
   14628:	mvn	r2, #0
   1462c:	and	r3, lr, r2, lsl r3
   14630:	cmp	r3, #0
   14634:	bne	14668 <__assert_fail@plt+0x3230>
   14638:	add	r0, r0, ip, lsl #2
   1463c:	add	r3, r0, #4
   14640:	mov	r0, #0
   14644:	cmp	r0, #1
   14648:	biceq	r0, r1, #31
   1464c:	popeq	{fp, pc}
   14650:	ldr	r2, [r3, -r0, lsl #2]
   14654:	sub	r0, r0, #1
   14658:	cmn	r2, #1
   1465c:	beq	14644 <__assert_fail@plt+0x320c>
   14660:	sub	ip, ip, r0
   14664:	mvn	r3, r2
   14668:	rsb	r0, r3, #0
   1466c:	and	r1, r3, r0
   14670:	mov	r0, #0
   14674:	cmp	r0, r1, lsr #24
   14678:	bne	14690 <__assert_fail@plt+0x3258>
   1467c:	mov	r0, #0
   14680:	lsl	r1, r1, #8
   14684:	add	r0, r0, #8
   14688:	cmp	r1, #16777216	; 0x1000000
   1468c:	bcc	14680 <__assert_fail@plt+0x3248>
   14690:	cmp	r1, #0
   14694:	blt	146a8 <__assert_fail@plt+0x3270>
   14698:	lsl	r1, r1, #1
   1469c:	add	r0, r0, #1
   146a0:	cmn	r1, #1
   146a4:	bgt	14698 <__assert_fail@plt+0x3260>
   146a8:	mov	r1, #31
   146ac:	orr	r1, r1, ip, lsl #5
   146b0:	sub	r0, r1, r0
   146b4:	pop	{fp, pc}
   146b8:	push	{r4, r5, fp, lr}
   146bc:	add	fp, sp, #8
   146c0:	cmp	r2, #1
   146c4:	blt	14768 <__assert_fail@plt+0x3330>
   146c8:	mvn	r3, r2
   146cc:	mvn	r4, #1
   146d0:	mvn	r5, #1
   146d4:	cmn	r3, #2
   146d8:	movgt	r4, r3
   146dc:	add	r4, r4, r2
   146e0:	add	lr, r4, #2
   146e4:	cmp	lr, #4
   146e8:	bcc	14744 <__assert_fail@plt+0x330c>
   146ec:	cmn	r3, #2
   146f0:	movgt	r5, r3
   146f4:	add	r3, r5, r2
   146f8:	add	r3, r3, #2
   146fc:	add	r5, r1, r3, lsl #2
   14700:	cmp	r5, r0
   14704:	addhi	r3, r0, r3, lsl #2
   14708:	cmphi	r3, r1
   1470c:	bhi	14744 <__assert_fail@plt+0x330c>
   14710:	bic	r4, lr, #3
   14714:	add	r3, r0, r4, lsl #2
   14718:	add	ip, r1, r4, lsl #2
   1471c:	sub	r2, r2, r4
   14720:	mov	r5, r4
   14724:	vld1.32	{d16-d17}, [r1]!
   14728:	subs	r5, r5, #4
   1472c:	vmvn	q8, q8
   14730:	vst1.32	{d16-d17}, [r0]!
   14734:	bne	14724 <__assert_fail@plt+0x32ec>
   14738:	cmp	lr, r4
   1473c:	popeq	{r4, r5, fp, pc}
   14740:	b	1474c <__assert_fail@plt+0x3314>
   14744:	mov	ip, r1
   14748:	mov	r3, r0
   1474c:	add	r0, r2, #1
   14750:	ldr	r1, [ip], #4
   14754:	sub	r0, r0, #1
   14758:	cmp	r0, #1
   1475c:	mvn	r1, r1
   14760:	str	r1, [r3], #4
   14764:	bgt	14750 <__assert_fail@plt+0x3318>
   14768:	pop	{r4, r5, fp, pc}
   1476c:	push	{r4, r5, r6, sl, fp, lr}
   14770:	add	fp, sp, #16
   14774:	ldr	r3, [r1]
   14778:	mov	lr, r0
   1477c:	cmp	r3, #0
   14780:	bne	147c4 <__assert_fail@plt+0x338c>
   14784:	mov	r0, #0
   14788:	mov	r5, #0
   1478c:	mov	r4, #0
   14790:	add	r3, r2, r4
   14794:	str	r0, [lr, -r4, lsl #2]
   14798:	cmp	r3, #1
   1479c:	beq	1487c <__assert_fail@plt+0x3444>
   147a0:	sub	r3, r1, r4, lsl #2
   147a4:	sub	r5, r5, #4
   147a8:	sub	r4, r4, #1
   147ac:	ldr	r3, [r3, #4]
   147b0:	cmp	r3, #0
   147b4:	beq	14790 <__assert_fail@plt+0x3358>
   147b8:	sub	lr, lr, r5
   147bc:	sub	r1, r1, r5
   147c0:	add	r2, r2, r4
   147c4:	rsb	r0, r3, #0
   147c8:	cmp	r2, #2
   147cc:	str	r0, [lr]
   147d0:	mov	r0, #1
   147d4:	blt	1487c <__assert_fail@plt+0x3444>
   147d8:	mvn	r3, r2
   147dc:	mvn	r6, #2
   147e0:	mvn	r4, #2
   147e4:	cmn	r3, #3
   147e8:	movgt	r6, r3
   147ec:	add	r6, r2, r6
   147f0:	add	ip, r6, #2
   147f4:	cmp	ip, #4
   147f8:	bcc	14858 <__assert_fail@plt+0x3420>
   147fc:	cmn	r3, #3
   14800:	movgt	r4, r3
   14804:	add	r3, r2, r4
   14808:	add	r4, lr, #4
   1480c:	add	r5, r3, #3
   14810:	add	r3, r1, #4
   14814:	add	r6, r1, r5, lsl #2
   14818:	cmp	r4, r6
   1481c:	addcc	r5, lr, r5, lsl #2
   14820:	cmpcc	r3, r5
   14824:	bcc	14858 <__assert_fail@plt+0x3420>
   14828:	bic	r5, ip, #3
   1482c:	add	lr, lr, r5, lsl #2
   14830:	add	r1, r1, r5, lsl #2
   14834:	sub	r2, r2, r5
   14838:	mov	r6, r5
   1483c:	vld1.32	{d16-d17}, [r3]!
   14840:	subs	r6, r6, #4
   14844:	vmvn	q8, q8
   14848:	vst1.32	{d16-d17}, [r4]!
   1484c:	bne	1483c <__assert_fail@plt+0x3404>
   14850:	cmp	ip, r5
   14854:	popeq	{r4, r5, r6, sl, fp, pc}
   14858:	add	r3, lr, #4
   1485c:	add	r1, r1, #4
   14860:	add	r2, r2, #1
   14864:	ldr	r6, [r1], #4
   14868:	sub	r2, r2, #1
   1486c:	cmp	r2, #2
   14870:	mvn	r6, r6
   14874:	str	r6, [r3], #4
   14878:	bgt	14864 <__assert_fail@plt+0x342c>
   1487c:	pop	{r4, r5, r6, sl, fp, pc}
   14880:	push	{r4, r5, r6, r7, fp, lr}
   14884:	add	fp, sp, #16
   14888:	lsr	r3, r0, #16
   1488c:	mvn	r4, r0
   14890:	uxth	r2, r0
   14894:	movw	ip, #65535	; 0xffff
   14898:	udiv	r6, r4, r3
   1489c:	mul	lr, r6, r2
   148a0:	mls	r2, r6, r3, r4
   148a4:	orr	r3, ip, r2, lsl #16
   148a8:	cmp	r3, lr
   148ac:	bcs	148d8 <__assert_fail@plt+0x34a0>
   148b0:	add	r3, r3, r0
   148b4:	sub	r4, r6, #1
   148b8:	cmp	r3, r0
   148bc:	bcc	148d4 <__assert_fail@plt+0x349c>
   148c0:	cmp	r3, lr
   148c4:	bcs	148d4 <__assert_fail@plt+0x349c>
   148c8:	add	r3, r3, r0
   148cc:	sub	r6, r6, #2
   148d0:	b	148d8 <__assert_fail@plt+0x34a0>
   148d4:	mov	r6, r4
   148d8:	sub	r2, r3, lr
   148dc:	lsr	r3, r2, #16
   148e0:	mla	r4, r3, r6, r2
   148e4:	mov	r3, #1
   148e8:	orr	r2, ip, r2, lsl #16
   148ec:	add	r5, r3, r4, lsr #16
   148f0:	mls	r3, r5, r0, r2
   148f4:	cmp	r3, r4, lsl #16
   148f8:	lsrcs	r5, r4, #16
   148fc:	addcs	r3, r3, r0
   14900:	add	r2, r5, r6, lsl #16
   14904:	mov	r6, #0
   14908:	cmp	r3, r0
   1490c:	movwcs	r6, #1
   14910:	cmp	r1, #0
   14914:	add	ip, r2, r6
   14918:	beq	149bc <__assert_fail@plt+0x3584>
   1491c:	mvn	r2, r3
   14920:	cmp	r3, r0
   14924:	add	r2, r2, r1
   14928:	addcs	r2, r2, r0
   1492c:	cmp	r2, r1
   14930:	bcs	14948 <__assert_fail@plt+0x3510>
   14934:	subs	r2, r2, r0
   14938:	mvn	r3, #1
   1493c:	mvncc	r3, #0
   14940:	subcs	r2, r2, r0
   14944:	add	ip, r3, ip
   14948:	uxth	r3, r1
   1494c:	lsr	r4, ip, #16
   14950:	uxth	r7, ip
   14954:	lsr	r5, r1, #16
   14958:	mul	r6, r4, r3
   1495c:	mul	lr, r7, r3
   14960:	mul	r4, r4, r5
   14964:	mla	r6, r7, r5, r6
   14968:	add	r3, r6, lr, lsr #16
   1496c:	mul	r6, r7, r5
   14970:	cmp	r3, r6
   14974:	addcc	r4, r4, #65536	; 0x10000
   14978:	add	r4, r4, r3, lsr #16
   1497c:	adds	r2, r4, r2
   14980:	bcc	149bc <__assert_fail@plt+0x3584>
   14984:	cmp	r2, r0
   14988:	mov	r5, #0
   1498c:	sub	r0, r2, r0
   14990:	pkhbt	r3, lr, r3, lsl #16
   14994:	mov	r4, #0
   14998:	clz	r0, r0
   1499c:	movwhi	r5, #1
   149a0:	cmp	r3, r1
   149a4:	movwhi	r4, #1
   149a8:	lsr	r0, r0, #5
   149ac:	and	r0, r4, r0
   149b0:	orr	r0, r5, r0
   149b4:	mvn	r0, r0
   149b8:	add	ip, ip, r0
   149bc:	mov	r0, ip
   149c0:	pop	{r4, r5, r6, r7, fp, pc}
   149c4:	push	{r4, sl, fp, lr}
   149c8:	add	fp, sp, #8
   149cc:	sub	sp, sp, #16
   149d0:	cmp	r3, #0
   149d4:	ble	14b38 <__assert_fail@plt+0x3700>
   149d8:	mov	ip, r2
   149dc:	add	r2, r2, r3, lsl #2
   149e0:	ldr	r2, [r2, #-4]
   149e4:	cmp	r2, #0
   149e8:	beq	14b58 <__assert_fail@plt+0x3720>
   149ec:	cmp	r1, #63	; 0x3f
   149f0:	bgt	14a90 <__assert_fail@plt+0x3658>
   149f4:	sub	r4, r1, #2
   149f8:	cmp	r4, #30
   149fc:	bhi	14ae8 <__assert_fail@plt+0x36b0>
   14a00:	add	r2, pc, #4
   14a04:	mov	lr, #1
   14a08:	ldr	pc, [r2, r4, lsl #2]
   14a0c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a10:	andeq	r4, r1, r8, ror #21
   14a14:	andeq	r4, r1, r8, lsl #21
   14a18:	andeq	r4, r1, r8, ror #21
   14a1c:	andeq	r4, r1, r8, ror #21
   14a20:	andeq	r4, r1, r8, ror #21
   14a24:			; <UNDEFINED> instruction: 0x00014ab8
   14a28:	andeq	r4, r1, r8, ror #21
   14a2c:	andeq	r4, r1, r8, ror #21
   14a30:	andeq	r4, r1, r8, ror #21
   14a34:	andeq	r4, r1, r8, ror #21
   14a38:	andeq	r4, r1, r8, ror #21
   14a3c:	andeq	r4, r1, r8, ror #21
   14a40:	andeq	r4, r1, r8, ror #21
   14a44:			; <UNDEFINED> instruction: 0x00014ab0
   14a48:	andeq	r4, r1, r8, ror #21
   14a4c:	andeq	r4, r1, r8, ror #21
   14a50:	andeq	r4, r1, r8, ror #21
   14a54:	andeq	r4, r1, r8, ror #21
   14a58:	andeq	r4, r1, r8, ror #21
   14a5c:	andeq	r4, r1, r8, ror #21
   14a60:	andeq	r4, r1, r8, ror #21
   14a64:	andeq	r4, r1, r8, ror #21
   14a68:	andeq	r4, r1, r8, ror #21
   14a6c:	andeq	r4, r1, r8, ror #21
   14a70:	andeq	r4, r1, r8, ror #21
   14a74:	andeq	r4, r1, r8, ror #21
   14a78:	andeq	r4, r1, r8, ror #21
   14a7c:	andeq	r4, r1, r8, ror #21
   14a80:	andeq	r4, r1, r8, ror #21
   14a84:	andeq	r4, r1, r0, asr #21
   14a88:	mov	lr, #2
   14a8c:	b	14ad4 <__assert_fail@plt+0x369c>
   14a90:	cmp	r1, #64	; 0x40
   14a94:	beq	14ac8 <__assert_fail@plt+0x3690>
   14a98:	cmp	r1, #128	; 0x80
   14a9c:	beq	14ad0 <__assert_fail@plt+0x3698>
   14aa0:	cmp	r1, #256	; 0x100
   14aa4:	bne	14ae8 <__assert_fail@plt+0x36b0>
   14aa8:	mov	lr, #8
   14aac:	b	14ad4 <__assert_fail@plt+0x369c>
   14ab0:	mov	lr, #4
   14ab4:	b	14ad4 <__assert_fail@plt+0x369c>
   14ab8:	mov	lr, #3
   14abc:	b	14ad4 <__assert_fail@plt+0x369c>
   14ac0:	mov	lr, #5
   14ac4:	b	14ad4 <__assert_fail@plt+0x369c>
   14ac8:	mov	lr, #6
   14acc:	b	14ad4 <__assert_fail@plt+0x369c>
   14ad0:	mov	lr, #7
   14ad4:	mov	r1, lr
   14ad8:	mov	r2, ip
   14adc:	sub	sp, fp, #8
   14ae0:	pop	{r4, sl, fp, lr}
   14ae4:	b	14b78 <__assert_fail@plt+0x3740>
   14ae8:	mvn	r2, #0
   14aec:	mov	r4, r1
   14af0:	udiv	lr, r2, r1
   14af4:	mov	r2, #1
   14af8:	cmp	lr, r1
   14afc:	bcc	14b18 <__assert_fail@plt+0x36e0>
   14b00:	mov	r2, #1
   14b04:	mov	r4, r1
   14b08:	mul	r4, r4, r1
   14b0c:	add	r2, r2, #1
   14b10:	cmp	r4, lr
   14b14:	bls	14b08 <__assert_fail@plt+0x36d0>
   14b18:	str	r4, [sp, #12]
   14b1c:	str	r2, [sp, #8]
   14b20:	str	r3, [sp]
   14b24:	add	r2, sp, #8
   14b28:	mov	r3, ip
   14b2c:	bl	14c74 <__assert_fail@plt+0x383c>
   14b30:	sub	sp, fp, #8
   14b34:	pop	{r4, sl, fp, pc}
   14b38:	movw	r0, #27127	; 0x69f7
   14b3c:	movw	r1, #26324	; 0x66d4
   14b40:	movw	r3, #27134	; 0x69fe
   14b44:	movw	r2, #1316	; 0x524
   14b48:	movt	r0, #3
   14b4c:	movt	r1, #3
   14b50:	movt	r3, #3
   14b54:	bl	11438 <__assert_fail@plt>
   14b58:	movw	r0, #27194	; 0x6a3a
   14b5c:	movw	r1, #26324	; 0x66d4
   14b60:	movw	r3, #27134	; 0x69fe
   14b64:	movw	r2, #1317	; 0x525
   14b68:	movt	r0, #3
   14b6c:	movt	r1, #3
   14b70:	movt	r3, #3
   14b74:	bl	11438 <__assert_fail@plt>
   14b78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b7c:	add	fp, sp, #24
   14b80:	sub	r4, r3, #1
   14b84:	ldr	lr, [r2, r4, lsl #2]
   14b88:	cmp	lr, #0
   14b8c:	beq	14c54 <__assert_fail@plt+0x381c>
   14b90:	mov	ip, #0
   14b94:	cmp	ip, lr, lsr #24
   14b98:	bne	14bb0 <__assert_fail@plt+0x3778>
   14b9c:	mov	ip, #0
   14ba0:	lsl	lr, lr, #8
   14ba4:	add	ip, ip, #8
   14ba8:	cmp	lr, #16777216	; 0x1000000
   14bac:	bcc	14ba0 <__assert_fail@plt+0x3768>
   14bb0:	lsl	r4, r4, #5
   14bb4:	cmp	lr, #0
   14bb8:	blt	14bcc <__assert_fail@plt+0x3794>
   14bbc:	lsl	lr, lr, #1
   14bc0:	add	ip, ip, #1
   14bc4:	cmn	lr, #1
   14bc8:	bgt	14bbc <__assert_fail@plt+0x3784>
   14bcc:	add	r7, r1, r4
   14bd0:	add	r7, r7, #31
   14bd4:	sub	r7, r7, ip
   14bd8:	udiv	ip, r7, r1
   14bdc:	cmp	r7, r1
   14be0:	bcc	14c4c <__assert_fail@plt+0x3814>
   14be4:	mvn	r7, #0
   14be8:	mov	r6, #255	; 0xff
   14bec:	mov	r5, #0
   14bf0:	mov	r4, ip
   14bf4:	mov	r8, #0
   14bf8:	eor	lr, r6, r7, lsl r1
   14bfc:	ldr	r7, [r2, r8, lsl #2]
   14c00:	add	r6, r5, r1
   14c04:	sub	r4, r4, #1
   14c08:	cmp	r6, #32
   14c0c:	lsr	r7, r7, r5
   14c10:	bcc	14c38 <__assert_fail@plt+0x3800>
   14c14:	add	r8, r8, #1
   14c18:	cmp	r8, r3
   14c1c:	bge	14c38 <__assert_fail@plt+0x3800>
   14c20:	ldr	r9, [r2, r8, lsl #2]
   14c24:	sub	r5, r6, #32
   14c28:	uxtb	r7, r7
   14c2c:	sub	r6, r1, r5
   14c30:	orr	r7, r7, r9, lsl r6
   14c34:	b	14c3c <__assert_fail@plt+0x3804>
   14c38:	mov	r5, r6
   14c3c:	and	r6, r7, lr
   14c40:	cmp	r4, #0
   14c44:	strb	r6, [r0, r4]
   14c48:	bne	14bfc <__assert_fail@plt+0x37c4>
   14c4c:	mov	r0, ip
   14c50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c54:	movw	r0, #31015	; 0x7927
   14c58:	movw	r1, #26324	; 0x66d4
   14c5c:	movw	r3, #31021	; 0x792d
   14c60:	movw	r2, #1210	; 0x4ba
   14c64:	movt	r0, #3
   14c68:	movt	r1, #3
   14c6c:	movt	r3, #3
   14c70:	bl	11438 <__assert_fail@plt>
   14c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c78:	add	fp, sp, #28
   14c7c:	sub	sp, sp, #44	; 0x2c
   14c80:	cmp	r1, #0
   14c84:	str	r3, [sp, #8]
   14c88:	beq	14f3c <__assert_fail@plt+0x3b04>
   14c8c:	mov	r6, r2
   14c90:	mov	r2, #0
   14c94:	mov	r4, r0
   14c98:	mov	r0, r1
   14c9c:	cmp	r2, r1, lsr #24
   14ca0:	bne	14cbc <__assert_fail@plt+0x3884>
   14ca4:	mov	r2, #0
   14ca8:	mov	r0, r1
   14cac:	lsl	r0, r0, #8
   14cb0:	add	r2, r2, #8
   14cb4:	cmp	r0, #16777216	; 0x1000000
   14cb8:	bcc	14cac <__assert_fail@plt+0x3874>
   14cbc:	cmp	r0, #0
   14cc0:	blt	14cd4 <__assert_fail@plt+0x389c>
   14cc4:	lsl	r0, r0, #1
   14cc8:	add	r2, r2, #1
   14ccc:	cmn	r0, #1
   14cd0:	bgt	14cc4 <__assert_fail@plt+0x388c>
   14cd4:	lsl	r0, r1, r2
   14cd8:	str	r2, [sp, #28]
   14cdc:	mvn	r2, r1, lsl r2
   14ce0:	ldr	r7, [fp, #8]
   14ce4:	movw	lr, #65535	; 0xffff
   14ce8:	lsr	r5, r0, #16
   14cec:	uxth	r3, r0
   14cf0:	str	r0, [sp, #32]
   14cf4:	udiv	r1, r2, r5
   14cf8:	mls	r5, r1, r5, r2
   14cfc:	mul	r3, r1, r3
   14d00:	orr	r5, lr, r5, lsl #16
   14d04:	cmp	r5, r3
   14d08:	bcs	14d34 <__assert_fail@plt+0x38fc>
   14d0c:	add	r5, r5, r0
   14d10:	sub	ip, r1, #1
   14d14:	cmp	r5, r0
   14d18:	bcc	14d30 <__assert_fail@plt+0x38f8>
   14d1c:	cmp	r5, r3
   14d20:	bcs	14d30 <__assert_fail@plt+0x38f8>
   14d24:	add	r5, r5, r0
   14d28:	sub	r1, r1, #2
   14d2c:	b	14d34 <__assert_fail@plt+0x38fc>
   14d30:	mov	r1, ip
   14d34:	sub	r3, r5, r3
   14d38:	mov	r2, #1
   14d3c:	mov	r8, #0
   14d40:	lsr	r5, r3, #16
   14d44:	mla	r5, r5, r1, r3
   14d48:	orr	r3, lr, r3, lsl #16
   14d4c:	add	r2, r2, r5, lsr #16
   14d50:	mls	r3, r2, r0, r3
   14d54:	cmp	r3, r5, lsl #16
   14d58:	lsrcs	r2, r5, #16
   14d5c:	addcs	r3, r3, r0
   14d60:	add	r1, r2, r1, lsl #16
   14d64:	cmp	r3, r0
   14d68:	addcs	r1, r1, #1
   14d6c:	cmp	r7, #2
   14d70:	str	r1, [sp, #40]	; 0x28
   14d74:	blt	14eec <__assert_fail@plt+0x3ab4>
   14d78:	ldr	r0, [r6, #4]
   14d7c:	cmp	r0, #0
   14d80:	beq	14f3c <__assert_fail@plt+0x3b04>
   14d84:	mov	r2, #0
   14d88:	mov	r1, r0
   14d8c:	cmp	r2, r0, lsr #24
   14d90:	bne	14dac <__assert_fail@plt+0x3974>
   14d94:	mov	r2, #0
   14d98:	mov	r1, r0
   14d9c:	lsl	r1, r1, #8
   14da0:	add	r2, r2, #8
   14da4:	cmp	r1, #16777216	; 0x1000000
   14da8:	bcc	14d9c <__assert_fail@plt+0x3964>
   14dac:	cmp	r1, #0
   14db0:	blt	14dc4 <__assert_fail@plt+0x398c>
   14db4:	lsl	r1, r1, #1
   14db8:	add	r2, r2, #1
   14dbc:	cmn	r1, #1
   14dc0:	bgt	14db4 <__assert_fail@plt+0x397c>
   14dc4:	lsl	r1, r0, r2
   14dc8:	str	r2, [sp, #12]
   14dcc:	mvn	r2, r0, lsl r2
   14dd0:	movw	lr, #65535	; 0xffff
   14dd4:	str	r4, [sp, #4]
   14dd8:	lsr	r5, r1, #16
   14ddc:	uxth	r3, r1
   14de0:	str	r1, [sp, #16]
   14de4:	udiv	r0, r2, r5
   14de8:	mls	r5, r0, r5, r2
   14dec:	mul	r3, r0, r3
   14df0:	orr	r5, lr, r5, lsl #16
   14df4:	cmp	r5, r3
   14df8:	bcs	14e24 <__assert_fail@plt+0x39ec>
   14dfc:	add	r5, r5, r1
   14e00:	sub	ip, r0, #1
   14e04:	cmp	r5, r1
   14e08:	bcc	14e20 <__assert_fail@plt+0x39e8>
   14e0c:	cmp	r5, r3
   14e10:	bcs	14e20 <__assert_fail@plt+0x39e8>
   14e14:	add	r5, r5, r1
   14e18:	sub	r0, r0, #2
   14e1c:	b	14e24 <__assert_fail@plt+0x39ec>
   14e20:	mov	r0, ip
   14e24:	sub	r3, r5, r3
   14e28:	mov	r2, #1
   14e2c:	mov	r9, #0
   14e30:	mov	r8, #0
   14e34:	lsr	r5, r3, #16
   14e38:	mla	r5, r5, r0, r3
   14e3c:	orr	r3, lr, r3, lsl #16
   14e40:	add	r2, r2, r5, lsr #16
   14e44:	mls	r3, r2, r1, r3
   14e48:	cmp	r3, r5, lsl #16
   14e4c:	lsrcs	r2, r5, #16
   14e50:	addcs	r3, r3, r1
   14e54:	add	r0, r2, r0, lsl #16
   14e58:	cmp	r3, r1
   14e5c:	addcs	r0, r0, #1
   14e60:	str	r0, [sp, #24]
   14e64:	ldr	r5, [sp, #8]
   14e68:	mov	r2, r7
   14e6c:	add	r3, sp, #12
   14e70:	mov	r0, r5
   14e74:	mov	r1, r5
   14e78:	bl	1f9d0 <__assert_fail@plt+0xe598>
   14e7c:	mov	r1, r0
   14e80:	ldr	r0, [sp, #4]
   14e84:	sub	sl, r7, #1
   14e88:	mov	r4, r7
   14e8c:	add	r2, sp, #28
   14e90:	ldr	r7, [r5, sl, lsl #2]
   14e94:	add	r5, r0, r8
   14e98:	mov	r0, r5
   14e9c:	bl	20a34 <__assert_fail@plt+0xf5fc>
   14ea0:	ldr	r1, [r6]
   14ea4:	cmp	r7, #0
   14ea8:	mov	r7, r4
   14eac:	moveq	r7, sl
   14eb0:	cmp	r0, r1
   14eb4:	bcs	14edc <__assert_fail@plt+0x3aa4>
   14eb8:	strb	r9, [r5, r0]
   14ebc:	add	r0, r0, #1
   14ec0:	ldr	r1, [r6]
   14ec4:	cmp	r0, r1
   14ec8:	bcc	14eb8 <__assert_fail@plt+0x3a80>
   14ecc:	add	r8, r8, r0
   14ed0:	cmp	r7, #1
   14ed4:	bgt	14e64 <__assert_fail@plt+0x3a2c>
   14ed8:	b	14ee8 <__assert_fail@plt+0x3ab0>
   14edc:	add	r8, r0, r8
   14ee0:	cmp	r7, #1
   14ee4:	bgt	14e64 <__assert_fail@plt+0x3a2c>
   14ee8:	ldr	r4, [sp, #4]
   14eec:	ldr	r1, [sp, #8]
   14ef0:	add	r0, r4, r8
   14ef4:	add	r2, sp, #28
   14ef8:	ldr	r1, [r1]
   14efc:	bl	20a34 <__assert_fail@plt+0xf5fc>
   14f00:	add	r0, r0, r8
   14f04:	cmp	r0, #2
   14f08:	bcc	14f34 <__assert_fail@plt+0x3afc>
   14f0c:	add	r1, r4, r0
   14f10:	mov	r2, #1
   14f14:	sub	r1, r1, #1
   14f18:	ldrb	r3, [r4]
   14f1c:	ldrb	r7, [r1]
   14f20:	add	r2, r2, #2
   14f24:	cmp	r2, r0
   14f28:	strb	r7, [r4], #1
   14f2c:	strb	r3, [r1], #-1
   14f30:	bcc	14f18 <__assert_fail@plt+0x3ae0>
   14f34:	sub	sp, fp, #28
   14f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f3c:	movw	r0, #31068	; 0x795c
   14f40:	movw	r1, #26324	; 0x66d4
   14f44:	movw	r3, #31074	; 0x7962
   14f48:	movw	r2, #902	; 0x386
   14f4c:	movt	r0, #3
   14f50:	movt	r1, #3
   14f54:	movt	r3, #3
   14f58:	bl	11438 <__assert_fail@plt>
   14f5c:	push	{r4, r5, fp, lr}
   14f60:	add	fp, sp, #8
   14f64:	sub	sp, sp, #16
   14f68:	cmp	r2, #0
   14f6c:	moveq	r0, #0
   14f70:	subeq	sp, fp, #8
   14f74:	popeq	{r4, r5, fp, pc}
   14f78:	cmp	r3, #63	; 0x3f
   14f7c:	bgt	1501c <__assert_fail@plt+0x3be4>
   14f80:	sub	r5, r3, #2
   14f84:	cmp	r5, #30
   14f88:	bhi	150e8 <__assert_fail@plt+0x3cb0>
   14f8c:	add	r4, pc, #4
   14f90:	mov	ip, #1
   14f94:	ldr	pc, [r4, r5, lsl #2]
   14f98:	andeq	r5, r1, r0, rrx
   14f9c:	andeq	r5, r1, r8, ror #1
   14fa0:	andeq	r5, r1, r4, lsl r0
   14fa4:	andeq	r5, r1, r8, ror #1
   14fa8:	andeq	r5, r1, r8, ror #1
   14fac:	andeq	r5, r1, r8, ror #1
   14fb0:	andeq	r5, r1, ip, lsr r0
   14fb4:	andeq	r5, r1, r8, ror #1
   14fb8:	andeq	r5, r1, r8, ror #1
   14fbc:	andeq	r5, r1, r8, ror #1
   14fc0:	andeq	r5, r1, r8, ror #1
   14fc4:	andeq	r5, r1, r8, ror #1
   14fc8:	andeq	r5, r1, r8, ror #1
   14fcc:	andeq	r5, r1, r8, ror #1
   14fd0:	andeq	r5, r1, r4, asr #32
   14fd4:	andeq	r5, r1, r8, ror #1
   14fd8:	andeq	r5, r1, r8, ror #1
   14fdc:	andeq	r5, r1, r8, ror #1
   14fe0:	andeq	r5, r1, r8, ror #1
   14fe4:	andeq	r5, r1, r8, ror #1
   14fe8:	andeq	r5, r1, r8, ror #1
   14fec:	andeq	r5, r1, r8, ror #1
   14ff0:	andeq	r5, r1, r8, ror #1
   14ff4:	andeq	r5, r1, r8, ror #1
   14ff8:	andeq	r5, r1, r8, ror #1
   14ffc:	andeq	r5, r1, r8, ror #1
   15000:	andeq	r5, r1, r8, ror #1
   15004:	andeq	r5, r1, r8, ror #1
   15008:	andeq	r5, r1, r8, ror #1
   1500c:	andeq	r5, r1, r8, ror #1
   15010:	andeq	r5, r1, ip, asr #32
   15014:	mov	ip, #2
   15018:	b	15060 <__assert_fail@plt+0x3c28>
   1501c:	cmp	r3, #64	; 0x40
   15020:	beq	15054 <__assert_fail@plt+0x3c1c>
   15024:	cmp	r3, #128	; 0x80
   15028:	beq	1505c <__assert_fail@plt+0x3c24>
   1502c:	cmp	r3, #256	; 0x100
   15030:	bne	150e8 <__assert_fail@plt+0x3cb0>
   15034:	mov	ip, #8
   15038:	b	15060 <__assert_fail@plt+0x3c28>
   1503c:	mov	ip, #3
   15040:	b	15060 <__assert_fail@plt+0x3c28>
   15044:	mov	ip, #4
   15048:	b	15060 <__assert_fail@plt+0x3c28>
   1504c:	mov	ip, #5
   15050:	b	15060 <__assert_fail@plt+0x3c28>
   15054:	mov	ip, #6
   15058:	b	15060 <__assert_fail@plt+0x3c28>
   1505c:	mov	ip, #7
   15060:	sub	lr, r1, #1
   15064:	mov	r3, #0
   15068:	mov	r4, #0
   1506c:	mov	r1, #0
   15070:	ldrb	r5, [lr, r2]
   15074:	orr	r4, r4, r5, lsl r3
   15078:	add	r3, r3, ip
   1507c:	sub	r5, r2, #1
   15080:	cmp	r3, #32
   15084:	bcc	150a0 <__assert_fail@plt+0x3c68>
   15088:	str	r4, [r0, r1, lsl #2]
   1508c:	sub	r3, r3, #32
   15090:	add	r1, r1, #1
   15094:	ldrb	r2, [lr, r2]
   15098:	sub	r4, ip, r3
   1509c:	lsr	r4, r2, r4
   150a0:	cmp	r5, #0
   150a4:	mov	r2, r5
   150a8:	bne	15070 <__assert_fail@plt+0x3c38>
   150ac:	cmp	r4, #0
   150b0:	strne	r4, [r0, r1, lsl #2]
   150b4:	addne	r0, r1, #1
   150b8:	subne	sp, fp, #8
   150bc:	popne	{r4, r5, fp, pc}
   150c0:	sub	r2, r0, #4
   150c4:	mov	r0, r1
   150c8:	cmp	r1, #1
   150cc:	blt	150e0 <__assert_fail@plt+0x3ca8>
   150d0:	ldr	r3, [r2, r0, lsl #2]
   150d4:	sub	r1, r0, #1
   150d8:	cmp	r3, #0
   150dc:	beq	150c4 <__assert_fail@plt+0x3c8c>
   150e0:	sub	sp, fp, #8
   150e4:	pop	{r4, r5, fp, pc}
   150e8:	mvn	r5, #0
   150ec:	mov	r4, #1
   150f0:	udiv	ip, r5, r3
   150f4:	mov	r5, r3
   150f8:	cmp	ip, r3
   150fc:	bcc	15118 <__assert_fail@plt+0x3ce0>
   15100:	mov	r4, #1
   15104:	mov	r5, r3
   15108:	mul	r5, r5, r3
   1510c:	add	r4, r4, #1
   15110:	cmp	r5, ip
   15114:	bls	15108 <__assert_fail@plt+0x3cd0>
   15118:	str	r5, [sp, #12]
   1511c:	add	r5, sp, #8
   15120:	str	r4, [sp, #8]
   15124:	str	r5, [sp]
   15128:	bl	15134 <__assert_fail@plt+0x3cfc>
   1512c:	sub	sp, fp, #8
   15130:	pop	{r4, r5, fp, pc}
   15134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15138:	add	fp, sp, #28
   1513c:	sub	sp, sp, #28
   15140:	cmp	r2, #0
   15144:	beq	15314 <__assert_fail@plt+0x3edc>
   15148:	ldr	r7, [fp, #8]
   1514c:	sub	r6, r2, #1
   15150:	mov	ip, #1
   15154:	mov	lr, #1
   15158:	ldr	r5, [r7]
   1515c:	udiv	r7, r6, r5
   15160:	str	r5, [sp, #16]
   15164:	mls	r6, r7, r5, r6
   15168:	ldrb	r7, [r1]
   1516c:	cmp	r6, #0
   15170:	beq	15188 <__assert_fail@plt+0x3d50>
   15174:	ldrb	r5, [r1, lr]
   15178:	subs	r6, r6, #1
   1517c:	add	lr, lr, #1
   15180:	mla	r7, r7, r3, r5
   15184:	bne	15174 <__assert_fail@plt+0x3d3c>
   15188:	cmp	lr, r2
   1518c:	str	r7, [r0]
   15190:	bcs	152c4 <__assert_fail@plt+0x3e8c>
   15194:	ldr	r5, [sp, #16]
   15198:	mov	r4, #1
   1519c:	add	r7, r1, lr
   151a0:	mov	ip, #1
   151a4:	str	r2, [sp, #12]
   151a8:	str	r1, [sp, #8]
   151ac:	add	r7, r7, #1
   151b0:	cmp	r5, #1
   151b4:	movhi	r4, r5
   151b8:	str	r4, [sp, #4]
   151bc:	sub	r4, r5, #1
   151c0:	str	r4, [sp]
   151c4:	ldr	r5, [sp, #16]
   151c8:	ldrb	r4, [r1, lr]
   151cc:	str	r7, [sp, #24]
   151d0:	cmp	r5, #2
   151d4:	bcc	151f8 <__assert_fail@plt+0x3dc0>
   151d8:	ldr	r6, [sp]
   151dc:	ldrb	r5, [r7], #1
   151e0:	subs	r6, r6, #1
   151e4:	mla	r4, r4, r3, r5
   151e8:	bne	151dc <__assert_fail@plt+0x3da4>
   151ec:	ldr	r5, [sp, #16]
   151f0:	add	lr, r5, lr
   151f4:	b	151fc <__assert_fail@plt+0x3dc4>
   151f8:	add	lr, lr, #1
   151fc:	cmp	ip, #1
   15200:	str	lr, [sp, #20]
   15204:	blt	152f4 <__assert_fail@plt+0x3ebc>
   15208:	ldr	r1, [fp, #8]
   1520c:	mov	lr, #0
   15210:	ldr	r2, [r1, #4]
   15214:	lsr	r8, r2, #16
   15218:	uxth	r9, r2
   1521c:	mov	r2, #0
   15220:	ldr	r5, [r0, r2, lsl #2]
   15224:	uxth	r7, r5
   15228:	lsr	r5, r5, #16
   1522c:	mul	r1, r7, r8
   15230:	mul	r7, r7, r9
   15234:	mul	sl, r5, r9
   15238:	mla	r1, r5, r9, r1
   1523c:	mul	r5, r5, r8
   15240:	add	r1, r1, r7, lsr #16
   15244:	cmp	r1, sl
   15248:	pkhbt	r7, r7, r1, lsl #16
   1524c:	addcc	r5, r5, #65536	; 0x10000
   15250:	adds	r7, r7, lr
   15254:	str	r7, [r0, r2, lsl #2]
   15258:	add	r2, r2, #1
   1525c:	adc	lr, r5, r1, lsr #16
   15260:	cmp	ip, r2
   15264:	bne	15220 <__assert_fail@plt+0x3de8>
   15268:	mov	r2, #0
   1526c:	mov	r6, #0
   15270:	ldr	r1, [r0, r2, lsl #2]
   15274:	mov	r7, r4
   15278:	adds	r5, r1, r4
   1527c:	str	r5, [r0, r2, lsl #2]
   15280:	add	r2, r2, #1
   15284:	adc	r4, r6, #0
   15288:	cmp	ip, r2
   1528c:	bne	15270 <__assert_fail@plt+0x3e38>
   15290:	cmp	r5, r7
   15294:	ldr	r7, [sp, #24]
   15298:	ldr	r2, [sp, #4]
   1529c:	ldr	r1, [sp, #8]
   152a0:	addcc	lr, lr, #1
   152a4:	cmp	lr, #0
   152a8:	strne	lr, [r0, ip, lsl #2]
   152ac:	ldr	lr, [sp, #20]
   152b0:	addne	ip, ip, #1
   152b4:	add	r7, r7, r2
   152b8:	ldr	r2, [sp, #12]
   152bc:	cmp	lr, r2
   152c0:	bcc	151c4 <__assert_fail@plt+0x3d8c>
   152c4:	cmp	lr, r2
   152c8:	moveq	r0, ip
   152cc:	subeq	sp, fp, #28
   152d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152d4:	movw	r0, #29531	; 0x735b
   152d8:	movw	r1, #26324	; 0x66d4
   152dc:	movw	r3, #29423	; 0x72ef
   152e0:	movw	r2, #1394	; 0x572
   152e4:	movt	r0, #3
   152e8:	movt	r1, #3
   152ec:	movt	r3, #3
   152f0:	bl	11438 <__assert_fail@plt>
   152f4:	movw	r0, #26881	; 0x6901
   152f8:	movw	r1, #26324	; 0x66d4
   152fc:	movw	r3, #26612	; 0x67f4
   15300:	movw	r2, #545	; 0x221
   15304:	movt	r0, #3
   15308:	movt	r1, #3
   1530c:	movt	r3, #3
   15310:	bl	11438 <__assert_fail@plt>
   15314:	movw	r0, #29416	; 0x72e8
   15318:	movw	r1, #26324	; 0x66d4
   1531c:	movw	r3, #29423	; 0x72ef
   15320:	movw	r2, #1370	; 0x55a
   15324:	movt	r0, #3
   15328:	movt	r1, #3
   1532c:	movt	r3, #3
   15330:	bl	11438 <__assert_fail@plt>
   15334:	movw	r2, #26320	; 0x66d0
   15338:	mov	r1, #0
   1533c:	movt	r2, #3
   15340:	str	r1, [r0]
   15344:	stmib	r0, {r1, r2}
   15348:	bx	lr
   1534c:	push	{r4, sl, fp, lr}
   15350:	add	fp, sp, #8
   15354:	cmp	r1, #0
   15358:	mov	r2, #1
   1535c:	mov	r4, r0
   15360:	mov	r0, #0
   15364:	subne	r1, r1, #1
   15368:	add	r1, r2, r1, lsr #5
   1536c:	str	r1, [r4]
   15370:	str	r0, [r4, #4]
   15374:	lsl	r0, r1, #2
   15378:	movw	r1, #37156	; 0x9124
   1537c:	movt	r1, #4
   15380:	ldr	r1, [r1]
   15384:	blx	r1
   15388:	str	r0, [r4, #8]
   1538c:	pop	{r4, sl, fp, pc}
   15390:	ldr	r1, [r0]
   15394:	cmp	r1, #0
   15398:	bxeq	lr
   1539c:	movw	r2, #37164	; 0x912c
   153a0:	ldr	r0, [r0, #8]
   153a4:	lsl	r1, r1, #2
   153a8:	movt	r2, #4
   153ac:	ldr	r2, [r2]
   153b0:	bx	r2
   153b4:	push	{r4, r5, fp, lr}
   153b8:	add	fp, sp, #8
   153bc:	mov	r5, r1
   153c0:	mov	r4, r0
   153c4:	cmp	r1, #0
   153c8:	blt	153e0 <__assert_fail@plt+0x3fa8>
   153cc:	moveq	r0, #0
   153d0:	streq	r0, [r4, #4]
   153d4:	popeq	{r4, r5, fp, pc}
   153d8:	mov	r0, #1
   153dc:	b	153e8 <__assert_fail@plt+0x3fb0>
   153e0:	mvn	r0, #0
   153e4:	rsb	r5, r5, #0
   153e8:	str	r0, [r4, #4]
   153ec:	ldr	r1, [r4]
   153f0:	cmp	r1, #0
   153f4:	ble	15404 <__assert_fail@plt+0x3fcc>
   153f8:	ldr	r0, [r4, #8]
   153fc:	str	r5, [r0]
   15400:	pop	{r4, r5, fp, pc}
   15404:	beq	15428 <__assert_fail@plt+0x3ff0>
   15408:	movw	r0, #37160	; 0x9128
   1540c:	lsl	r1, r1, #2
   15410:	mov	r2, #4
   15414:	movt	r0, #4
   15418:	ldr	r3, [r0]
   1541c:	ldr	r0, [r4, #8]
   15420:	blx	r3
   15424:	b	1543c <__assert_fail@plt+0x4004>
   15428:	movw	r0, #37156	; 0x9124
   1542c:	movt	r0, #4
   15430:	ldr	r1, [r0]
   15434:	mov	r0, #4
   15438:	blx	r1
   1543c:	mov	r1, #1
   15440:	str	r0, [r4, #8]
   15444:	str	r1, [r4]
   15448:	ldr	r1, [r4, #4]
   1544c:	cmp	r1, #0
   15450:	rsbmi	r1, r1, #0
   15454:	cmp	r1, #2
   15458:	movge	r1, #0
   1545c:	strge	r1, [r4, #4]
   15460:	strge	r5, [r0]
   15464:	popge	{r4, r5, fp, pc}
   15468:	str	r5, [r0]
   1546c:	pop	{r4, r5, fp, pc}
   15470:	push	{r4, r5, fp, lr}
   15474:	add	fp, sp, #8
   15478:	cmp	r1, #0
   1547c:	mov	r5, r0
   15480:	moveq	r0, #0
   15484:	streq	r0, [r5, #4]
   15488:	popeq	{r4, r5, fp, pc}
   1548c:	mov	r0, #1
   15490:	mov	r4, r1
   15494:	str	r0, [r5, #4]
   15498:	ldr	r1, [r5]
   1549c:	cmp	r1, #0
   154a0:	ble	154b0 <__assert_fail@plt+0x4078>
   154a4:	ldr	r0, [r5, #8]
   154a8:	str	r4, [r0]
   154ac:	pop	{r4, r5, fp, pc}
   154b0:	beq	154d4 <__assert_fail@plt+0x409c>
   154b4:	movw	r0, #37160	; 0x9128
   154b8:	lsl	r1, r1, #2
   154bc:	mov	r2, #4
   154c0:	movt	r0, #4
   154c4:	ldr	r3, [r0]
   154c8:	ldr	r0, [r5, #8]
   154cc:	blx	r3
   154d0:	b	154e8 <__assert_fail@plt+0x40b0>
   154d4:	movw	r0, #37156	; 0x9124
   154d8:	movt	r0, #4
   154dc:	ldr	r1, [r0]
   154e0:	mov	r0, #4
   154e4:	blx	r1
   154e8:	mov	r1, #1
   154ec:	str	r0, [r5, #8]
   154f0:	str	r1, [r5]
   154f4:	ldr	r1, [r5, #4]
   154f8:	cmp	r1, #0
   154fc:	rsbmi	r1, r1, #0
   15500:	cmp	r1, #2
   15504:	movge	r1, #0
   15508:	strge	r1, [r5, #4]
   1550c:	strge	r4, [r0]
   15510:	popge	{r4, r5, fp, pc}
   15514:	str	r4, [r0]
   15518:	pop	{r4, r5, fp, pc}
   1551c:	cmp	r0, r1
   15520:	bxeq	lr
   15524:	push	{r4, r5, r6, r7, fp, lr}
   15528:	add	fp, sp, #16
   1552c:	mov	r5, r1
   15530:	ldr	r1, [r0]
   15534:	mov	r4, r0
   15538:	ldr	r6, [r5, #4]
   1553c:	cmp	r6, #0
   15540:	rsbmi	r6, r6, #0
   15544:	cmp	r6, r1
   15548:	ble	15580 <__assert_fail@plt+0x4148>
   1554c:	cmp	r6, #1
   15550:	mov	r7, r6
   15554:	movle	r7, #1
   15558:	cmp	r1, #0
   1555c:	beq	15590 <__assert_fail@plt+0x4158>
   15560:	movw	r0, #37160	; 0x9128
   15564:	lsl	r1, r1, #2
   15568:	lsl	r2, r7, #2
   1556c:	movt	r0, #4
   15570:	ldr	r3, [r0]
   15574:	ldr	r0, [r4, #8]
   15578:	blx	r3
   1557c:	b	155a4 <__assert_fail@plt+0x416c>
   15580:	ldr	r0, [r4, #8]
   15584:	cmp	r6, #1
   15588:	bge	155cc <__assert_fail@plt+0x4194>
   1558c:	b	15634 <__assert_fail@plt+0x41fc>
   15590:	movw	r0, #37156	; 0x9124
   15594:	movt	r0, #4
   15598:	ldr	r1, [r0]
   1559c:	lsl	r0, r7, #2
   155a0:	blx	r1
   155a4:	str	r0, [r4, #8]
   155a8:	str	r7, [r4]
   155ac:	ldr	r1, [r4, #4]
   155b0:	cmp	r1, #0
   155b4:	rsbmi	r1, r1, #0
   155b8:	cmp	r1, r7
   155bc:	movgt	r1, #0
   155c0:	strgt	r1, [r4, #4]
   155c4:	cmp	r6, #1
   155c8:	blt	15634 <__assert_fail@plt+0x41fc>
   155cc:	ldr	ip, [r5, #8]
   155d0:	mov	r2, #0
   155d4:	cmp	r6, #4
   155d8:	bcc	15618 <__assert_fail@plt+0x41e0>
   155dc:	add	r1, ip, r6, lsl #2
   155e0:	cmp	r0, r1
   155e4:	addcc	r1, r0, r6, lsl #2
   155e8:	cmpcc	ip, r1
   155ec:	bcc	15618 <__assert_fail@plt+0x41e0>
   155f0:	bic	r2, r6, #-2147483645	; 0x80000003
   155f4:	mov	r7, r0
   155f8:	mov	r1, ip
   155fc:	mov	r3, r2
   15600:	vld1.32	{d16-d17}, [r1]!
   15604:	subs	r3, r3, #4
   15608:	vst1.32	{d16-d17}, [r7]!
   1560c:	bne	15600 <__assert_fail@plt+0x41c8>
   15610:	cmp	r6, r2
   15614:	beq	15634 <__assert_fail@plt+0x41fc>
   15618:	add	r1, ip, r2, lsl #2
   1561c:	add	r0, r0, r2, lsl #2
   15620:	sub	r2, r6, r2
   15624:	ldr	r3, [r1], #4
   15628:	subs	r2, r2, #1
   1562c:	str	r3, [r0], #4
   15630:	bne	15624 <__assert_fail@plt+0x41ec>
   15634:	ldr	r0, [r5, #4]
   15638:	str	r0, [r4, #4]
   1563c:	pop	{r4, r5, r6, r7, fp, lr}
   15640:	bx	lr
   15644:	movw	r3, #26320	; 0x66d0
   15648:	mov	r2, #0
   1564c:	movt	r3, #3
   15650:	str	r2, [r0]
   15654:	stmib	r0, {r2, r3}
   15658:	b	153b4 <__assert_fail@plt+0x3f7c>
   1565c:	push	{r4, r5, r6, sl, fp, lr}
   15660:	add	fp, sp, #16
   15664:	mov	r4, r1
   15668:	movw	r1, #26320	; 0x66d0
   1566c:	mov	r5, r0
   15670:	mov	r0, #0
   15674:	cmp	r4, #0
   15678:	movt	r1, #3
   1567c:	str	r0, [r5]
   15680:	stmib	r5, {r0, r1}
   15684:	streq	r0, [r5, #4]
   15688:	popeq	{r4, r5, r6, sl, fp, pc}
   1568c:	movw	r0, #37156	; 0x9124
   15690:	mov	r6, #1
   15694:	str	r6, [r5, #4]
   15698:	movt	r0, #4
   1569c:	ldr	r1, [r0]
   156a0:	mov	r0, #4
   156a4:	blx	r1
   156a8:	str	r0, [r5, #8]
   156ac:	str	r6, [r5]
   156b0:	ldr	r1, [r5, #4]
   156b4:	cmp	r1, #0
   156b8:	rsbmi	r1, r1, #0
   156bc:	cmp	r1, #2
   156c0:	movge	r1, #0
   156c4:	strge	r1, [r5, #4]
   156c8:	str	r4, [r0]
   156cc:	pop	{r4, r5, r6, sl, fp, pc}
   156d0:	push	{r4, r5, r6, r7, fp, lr}
   156d4:	add	fp, sp, #16
   156d8:	mov	r7, r1
   156dc:	mov	r4, r0
   156e0:	movw	r1, #26320	; 0x66d0
   156e4:	mov	r0, #0
   156e8:	cmp	r4, r7
   156ec:	movt	r1, #3
   156f0:	str	r0, [r4]
   156f4:	stmib	r4, {r0, r1}
   156f8:	popeq	{r4, r5, r6, r7, fp, pc}
   156fc:	ldr	r0, [r7, #4]
   15700:	cmp	r0, #0
   15704:	mov	r6, r0
   15708:	rsbmi	r6, r0, #0
   1570c:	cmp	r6, #1
   15710:	blt	157b8 <__assert_fail@plt+0x4380>
   15714:	movw	r0, #37156	; 0x9124
   15718:	movt	r0, #4
   1571c:	ldr	r1, [r0]
   15720:	lsl	r0, r6, #2
   15724:	blx	r1
   15728:	str	r0, [r4, #8]
   1572c:	str	r6, [r4]
   15730:	mov	r2, #0
   15734:	ldr	r1, [r4, #4]
   15738:	cmp	r1, #0
   1573c:	rsbmi	r1, r1, #0
   15740:	cmp	r1, r6
   15744:	movgt	r1, #0
   15748:	strgt	r1, [r4, #4]
   1574c:	cmp	r6, #4
   15750:	ldr	ip, [r7, #8]
   15754:	bcc	15798 <__assert_fail@plt+0x4360>
   15758:	add	r1, ip, r6, lsl #2
   1575c:	cmp	r0, r1
   15760:	bcs	15770 <__assert_fail@plt+0x4338>
   15764:	add	r1, r0, r6, lsl #2
   15768:	cmp	r1, ip
   1576c:	bhi	15798 <__assert_fail@plt+0x4360>
   15770:	bic	r2, r6, #-2147483645	; 0x80000003
   15774:	mov	r1, r0
   15778:	mov	r5, ip
   1577c:	mov	r3, r2
   15780:	vld1.32	{d16-d17}, [r5]!
   15784:	subs	r3, r3, #4
   15788:	vst1.32	{d16-d17}, [r1]!
   1578c:	bne	15780 <__assert_fail@plt+0x4348>
   15790:	cmp	r6, r2
   15794:	beq	157b4 <__assert_fail@plt+0x437c>
   15798:	add	r1, ip, r2, lsl #2
   1579c:	add	r0, r0, r2, lsl #2
   157a0:	sub	r2, r6, r2
   157a4:	ldr	r3, [r1], #4
   157a8:	subs	r2, r2, #1
   157ac:	str	r3, [r0], #4
   157b0:	bne	157a4 <__assert_fail@plt+0x436c>
   157b4:	ldr	r0, [r7, #4]
   157b8:	str	r0, [r4, #4]
   157bc:	pop	{r4, r5, r6, r7, fp, pc}
   157c0:	ldr	r3, [r0, #4]
   157c4:	mov	r1, r0
   157c8:	cmp	r3, #0
   157cc:	blt	1580c <__assert_fail@plt+0x43d4>
   157d0:	mov	r0, #0
   157d4:	cmp	r3, #1
   157d8:	bxgt	lr
   157dc:	cmp	r3, #0
   157e0:	mov	r3, #0
   157e4:	mov	r0, #0
   157e8:	mov	r2, #1
   157ec:	ldrne	r1, [r1, #8]
   157f0:	ldrne	r3, [r1]
   157f4:	mov	r1, #0
   157f8:	cmn	r3, #-2147483647	; 0x80000001
   157fc:	movwcc	r1, #1
   15800:	cmp	r1, r3, lsr #31
   15804:	movcs	r0, r2
   15808:	bx	lr
   1580c:	mov	r2, #0
   15810:	cmn	r3, #1
   15814:	beq	15820 <__assert_fail@plt+0x43e8>
   15818:	mov	r0, r2
   1581c:	bx	lr
   15820:	ldr	r0, [r1, #8]
   15824:	mov	r1, #1
   15828:	ldr	r0, [r0]
   1582c:	eor	r2, r1, r0, lsr #31
   15830:	cmp	r0, #-2147483648	; 0x80000000
   15834:	subhi	r2, r2, #1
   15838:	eor	r2, r1, r2, lsr #31
   1583c:	mov	r0, r2
   15840:	bx	lr
   15844:	ldr	r3, [r0, #4]
   15848:	mov	r2, r0
   1584c:	cmp	r1, #0
   15850:	blt	15890 <__assert_fail@plt+0x4458>
   15854:	cmp	r3, #0
   15858:	mvnlt	r0, #0
   1585c:	bxlt	lr
   15860:	mov	r0, #1
   15864:	cmp	r3, #1
   15868:	bgt	1589c <__assert_fail@plt+0x4464>
   1586c:	cmp	r3, #0
   15870:	mov	r3, #0
   15874:	mov	r0, #0
   15878:	ldrne	r2, [r2, #8]
   1587c:	ldrne	r3, [r2]
   15880:	cmp	r3, r1
   15884:	movwhi	r0, #1
   15888:	subcc	r0, r0, #1
   1588c:	bx	lr
   15890:	mov	r0, #1
   15894:	cmn	r3, #1
   15898:	ble	158a0 <__assert_fail@plt+0x4468>
   1589c:	bx	lr
   158a0:	mvn	r0, #0
   158a4:	bxne	lr
   158a8:	ldr	r0, [r2, #8]
   158ac:	rsb	r1, r1, #0
   158b0:	ldr	r2, [r0]
   158b4:	mov	r0, #0
   158b8:	cmp	r2, r1
   158bc:	movwcc	r0, #1
   158c0:	subhi	r0, r0, #1
   158c4:	bx	lr
   158c8:	ldr	r1, [r0, #4]
   158cc:	mov	r0, #0
   158d0:	cmp	r1, #2
   158d4:	movwcc	r0, #1
   158d8:	bx	lr
   158dc:	ldr	r3, [r0, #4]
   158e0:	mov	r1, r0
   158e4:	cmp	r3, #0
   158e8:	blt	15928 <__assert_fail@plt+0x44f0>
   158ec:	mov	r0, #0
   158f0:	cmp	r3, #1
   158f4:	bxgt	lr
   158f8:	cmp	r3, #0
   158fc:	mov	r3, #0
   15900:	mov	r0, #0
   15904:	mov	r2, #1
   15908:	ldrne	r1, [r1, #8]
   1590c:	ldrne	r3, [r1]
   15910:	mov	r1, #0
   15914:	cmn	r3, #-2147483647	; 0x80000001
   15918:	movwcc	r1, #1
   1591c:	cmp	r1, r3, lsr #31
   15920:	movcs	r0, r2
   15924:	bx	lr
   15928:	mov	r2, #0
   1592c:	cmn	r3, #1
   15930:	beq	1593c <__assert_fail@plt+0x4504>
   15934:	mov	r0, r2
   15938:	bx	lr
   1593c:	ldr	r0, [r1, #8]
   15940:	mov	r1, #1
   15944:	ldr	r0, [r0]
   15948:	eor	r2, r1, r0, lsr #31
   1594c:	cmp	r0, #-2147483648	; 0x80000000
   15950:	subhi	r2, r2, #1
   15954:	eor	r2, r1, r2, lsr #31
   15958:	mov	r0, r2
   1595c:	bx	lr
   15960:	ldr	r1, [r0, #4]
   15964:	mov	r0, #0
   15968:	cmp	r1, #2
   1596c:	movwcc	r0, #1
   15970:	bx	lr
   15974:	ldr	r3, [r0, #4]
   15978:	mov	ip, r0
   1597c:	mov	r0, #1
   15980:	cmp	r3, #0
   15984:	mov	r2, r3
   15988:	rsbmi	r2, r3, #0
   1598c:	cmp	r2, #1
   15990:	bxgt	lr
   15994:	cmp	r3, #0
   15998:	mov	r2, #0
   1599c:	mov	r0, #0
   159a0:	ldrne	r2, [ip, #8]
   159a4:	ldrne	r2, [r2]
   159a8:	cmp	r2, r1
   159ac:	movwhi	r0, #1
   159b0:	subcc	r0, r0, #1
   159b4:	bx	lr
   159b8:	ldr	r3, [r0, #4]
   159bc:	cmp	r3, #0
   159c0:	blt	159f4 <__assert_fail@plt+0x45bc>
   159c4:	mov	r1, #0
   159c8:	cmp	r3, #1
   159cc:	bgt	159ec <__assert_fail@plt+0x45b4>
   159d0:	mov	r2, #1
   159d4:	cmp	r3, #0
   159d8:	beq	15a20 <__assert_fail@plt+0x45e8>
   159dc:	ldr	r0, [r0, #8]
   159e0:	ldr	r0, [r0]
   159e4:	cmp	r0, #32768	; 0x8000
   159e8:	movcc	r1, r2
   159ec:	mov	r0, r1
   159f0:	bx	lr
   159f4:	mov	r2, #0
   159f8:	cmn	r3, #1
   159fc:	bne	15a20 <__assert_fail@plt+0x45e8>
   15a00:	ldr	r0, [r0, #8]
   15a04:	mov	r1, #0
   15a08:	ldr	r0, [r0]
   15a0c:	cmp	r0, #32768	; 0x8000
   15a10:	mov	r0, #1
   15a14:	movwcc	r1, #1
   15a18:	subhi	r1, r1, #1
   15a1c:	eor	r2, r0, r1, lsr #31
   15a20:	mov	r1, r2
   15a24:	mov	r0, r1
   15a28:	bx	lr
   15a2c:	ldr	r2, [r0, #4]
   15a30:	mov	r1, r0
   15a34:	mov	r0, #0
   15a38:	cmp	r2, #0
   15a3c:	bxlt	lr
   15a40:	cmp	r2, #1
   15a44:	bgt	15a68 <__assert_fail@plt+0x4630>
   15a48:	cmp	r2, #0
   15a4c:	moveq	r0, #1
   15a50:	bxeq	lr
   15a54:	ldr	r0, [r1, #8]
   15a58:	ldr	r1, [r0]
   15a5c:	mov	r0, #0
   15a60:	cmp	r1, #65536	; 0x10000
   15a64:	movwcc	r0, #1
   15a68:	bx	lr
   15a6c:	ldr	r1, [r0, #4]
   15a70:	cmp	r1, #0
   15a74:	beq	15a90 <__assert_fail@plt+0x4658>
   15a78:	ldr	r0, [r0, #8]
   15a7c:	cmn	r1, #1
   15a80:	ldr	r0, [r0]
   15a84:	ble	15a9c <__assert_fail@plt+0x4664>
   15a88:	bic	r0, r0, #-2147483648	; 0x80000000
   15a8c:	bx	lr
   15a90:	mov	r0, #0
   15a94:	bic	r0, r0, #-2147483648	; 0x80000000
   15a98:	bx	lr
   15a9c:	sub	r0, r0, #1
   15aa0:	mvn	r1, #-2147483648	; 0x80000000
   15aa4:	orr	r0, r0, #-2147483648	; 0x80000000
   15aa8:	eor	r0, r0, r1
   15aac:	bx	lr
   15ab0:	ldr	r1, [r0, #4]
   15ab4:	cmp	r1, #0
   15ab8:	moveq	r0, #0
   15abc:	ldrne	r0, [r0, #8]
   15ac0:	ldrne	r0, [r0]
   15ac4:	bx	lr
   15ac8:	ldr	r0, [r0, #4]
   15acc:	cmp	r0, #0
   15ad0:	rsbmi	r0, r0, #0
   15ad4:	bx	lr
   15ad8:	mov	r2, r0
   15adc:	mov	r0, #0
   15ae0:	cmp	r1, #0
   15ae4:	bxlt	lr
   15ae8:	ldr	r3, [r2, #4]
   15aec:	cmp	r3, #0
   15af0:	rsbmi	r3, r3, #0
   15af4:	cmp	r3, r1
   15af8:	ldrgt	r0, [r2, #8]
   15afc:	ldrgt	r0, [r0, r1, lsl #2]
   15b00:	bx	lr
   15b04:	push	{r4, r5, fp, lr}
   15b08:	add	fp, sp, #8
   15b0c:	cmp	r1, #0
   15b10:	mov	r4, r0
   15b14:	mov	r5, #1
   15b18:	subne	r1, r1, #1
   15b1c:	add	r0, r5, r1, lsr #5
   15b20:	ldr	r1, [r4]
   15b24:	cmp	r0, #1
   15b28:	movhi	r5, r0
   15b2c:	cmp	r1, #0
   15b30:	beq	15b54 <__assert_fail@plt+0x471c>
   15b34:	movw	r0, #37160	; 0x9128
   15b38:	lsl	r1, r1, #2
   15b3c:	lsl	r2, r5, #2
   15b40:	movt	r0, #4
   15b44:	ldr	r3, [r0]
   15b48:	ldr	r0, [r4, #8]
   15b4c:	blx	r3
   15b50:	b	15b68 <__assert_fail@plt+0x4730>
   15b54:	movw	r0, #37156	; 0x9124
   15b58:	movt	r0, #4
   15b5c:	ldr	r1, [r0]
   15b60:	lsl	r0, r5, #2
   15b64:	blx	r1
   15b68:	str	r0, [r4, #8]
   15b6c:	str	r5, [r4]
   15b70:	ldr	r0, [r4, #4]
   15b74:	cmp	r0, #0
   15b78:	rsbmi	r0, r0, #0
   15b7c:	cmp	r0, r5
   15b80:	movgt	r0, #0
   15b84:	strgt	r0, [r4, #4]
   15b88:	pop	{r4, r5, fp, pc}
   15b8c:	ldr	r0, [r0, #8]
   15b90:	bx	lr
   15b94:	push	{r4, r5, fp, lr}
   15b98:	add	fp, sp, #8
   15b9c:	cmp	r1, #0
   15ba0:	ble	15c2c <__assert_fail@plt+0x47f4>
   15ba4:	mov	r5, r1
   15ba8:	ldr	r1, [r0]
   15bac:	mov	r4, r0
   15bb0:	cmp	r1, r5
   15bb4:	bge	15be8 <__assert_fail@plt+0x47b0>
   15bb8:	cmp	r5, #1
   15bbc:	movle	r5, #1
   15bc0:	cmp	r1, #0
   15bc4:	beq	15bf0 <__assert_fail@plt+0x47b8>
   15bc8:	movw	r0, #37160	; 0x9128
   15bcc:	lsl	r1, r1, #2
   15bd0:	lsl	r2, r5, #2
   15bd4:	movt	r0, #4
   15bd8:	ldr	r3, [r0]
   15bdc:	ldr	r0, [r4, #8]
   15be0:	blx	r3
   15be4:	b	15c04 <__assert_fail@plt+0x47cc>
   15be8:	ldr	r0, [r4, #8]
   15bec:	pop	{r4, r5, fp, pc}
   15bf0:	movw	r0, #37156	; 0x9124
   15bf4:	movt	r0, #4
   15bf8:	ldr	r1, [r0]
   15bfc:	lsl	r0, r5, #2
   15c00:	blx	r1
   15c04:	str	r0, [r4, #8]
   15c08:	str	r5, [r4]
   15c0c:	ldr	r1, [r4, #4]
   15c10:	cmp	r1, #0
   15c14:	rsbmi	r1, r1, #0
   15c18:	cmp	r1, r5
   15c1c:	movgt	r1, #0
   15c20:	strgt	r1, [r4, #4]
   15c24:	popgt	{r4, r5, fp, pc}
   15c28:	pop	{r4, r5, fp, pc}
   15c2c:	movw	r0, #29650	; 0x73d2
   15c30:	movw	r1, #26324	; 0x66d4
   15c34:	movw	r3, #27207	; 0x6a47
   15c38:	movw	r2, #1663	; 0x67f
   15c3c:	movt	r0, #3
   15c40:	movt	r1, #3
   15c44:	movt	r3, #3
   15c48:	bl	11438 <__assert_fail@plt>
   15c4c:	push	{r4, r5, fp, lr}
   15c50:	add	fp, sp, #8
   15c54:	cmp	r1, #0
   15c58:	ble	15ce4 <__assert_fail@plt+0x48ac>
   15c5c:	mov	r5, r1
   15c60:	ldr	r1, [r0]
   15c64:	mov	r4, r0
   15c68:	cmp	r1, r5
   15c6c:	bge	15ca0 <__assert_fail@plt+0x4868>
   15c70:	cmp	r5, #1
   15c74:	movle	r5, #1
   15c78:	cmp	r1, #0
   15c7c:	beq	15ca8 <__assert_fail@plt+0x4870>
   15c80:	movw	r0, #37160	; 0x9128
   15c84:	lsl	r1, r1, #2
   15c88:	lsl	r2, r5, #2
   15c8c:	movt	r0, #4
   15c90:	ldr	r3, [r0]
   15c94:	ldr	r0, [r4, #8]
   15c98:	blx	r3
   15c9c:	b	15cbc <__assert_fail@plt+0x4884>
   15ca0:	ldr	r0, [r4, #8]
   15ca4:	pop	{r4, r5, fp, pc}
   15ca8:	movw	r0, #37156	; 0x9124
   15cac:	movt	r0, #4
   15cb0:	ldr	r1, [r0]
   15cb4:	lsl	r0, r5, #2
   15cb8:	blx	r1
   15cbc:	str	r0, [r4, #8]
   15cc0:	str	r5, [r4]
   15cc4:	ldr	r1, [r4, #4]
   15cc8:	cmp	r1, #0
   15ccc:	rsbmi	r1, r1, #0
   15cd0:	cmp	r1, r5
   15cd4:	movgt	r1, #0
   15cd8:	strgt	r1, [r4, #4]
   15cdc:	popgt	{r4, r5, fp, pc}
   15ce0:	pop	{r4, r5, fp, pc}
   15ce4:	movw	r0, #29650	; 0x73d2
   15ce8:	movw	r1, #26324	; 0x66d4
   15cec:	movw	r3, #27207	; 0x6a47
   15cf0:	movw	r2, #1663	; 0x67f
   15cf4:	movt	r0, #3
   15cf8:	movt	r1, #3
   15cfc:	movt	r3, #3
   15d00:	bl	11438 <__assert_fail@plt>
   15d04:	push	{fp, lr}
   15d08:	mov	fp, sp
   15d0c:	ldr	r2, [r0, #8]
   15d10:	cmp	r1, #0
   15d14:	mov	r3, r1
   15d18:	rsbmi	r3, r1, #0
   15d1c:	sub	ip, r2, #4
   15d20:	mov	r2, r3
   15d24:	cmp	r3, #1
   15d28:	blt	15d3c <__assert_fail@plt+0x4904>
   15d2c:	ldr	lr, [ip, r2, lsl #2]
   15d30:	sub	r3, r2, #1
   15d34:	cmp	lr, #0
   15d38:	beq	15d20 <__assert_fail@plt+0x48e8>
   15d3c:	cmp	r1, #0
   15d40:	rsblt	r2, r2, #0
   15d44:	str	r2, [r0, #4]
   15d48:	pop	{fp, pc}
   15d4c:	push	{fp, lr}
   15d50:	mov	fp, sp
   15d54:	mov	r3, #0
   15d58:	cmp	r2, #0
   15d5c:	sub	ip, r1, #4
   15d60:	str	r3, [r0]
   15d64:	mov	r3, r2
   15d68:	str	r2, [r0, #4]
   15d6c:	str	r1, [r0, #8]
   15d70:	rsbmi	r3, r2, #0
   15d74:	mov	r1, r3
   15d78:	cmp	r3, #1
   15d7c:	blt	15d90 <__assert_fail@plt+0x4958>
   15d80:	ldr	lr, [ip, r1, lsl #2]
   15d84:	sub	r3, r1, #1
   15d88:	cmp	lr, #0
   15d8c:	beq	15d74 <__assert_fail@plt+0x493c>
   15d90:	cmp	r2, #0
   15d94:	rsblt	r1, r1, #0
   15d98:	str	r1, [r0, #4]
   15d9c:	pop	{fp, pc}
   15da0:	push	{r4, r5, r6, sl, fp, lr}
   15da4:	add	fp, sp, #16
   15da8:	vpush	{d8-d11}
   15dac:	vcmpe.f64	d0, d0
   15db0:	mov	r4, r0
   15db4:	mov	r5, #0
   15db8:	vmrs	APSR_nzcv, fpscr
   15dbc:	bvs	15f18 <__assert_fail@plt+0x4ae0>
   15dc0:	vmov.f64	d16, #96	; 0x3f000000  0.5
   15dc4:	vmov.f64	d8, d0
   15dc8:	vmul.f64	d16, d0, d16
   15dcc:	vcmp.f64	d16, d0
   15dd0:	vmrs	APSR_nzcv, fpscr
   15dd4:	beq	15f18 <__assert_fail@plt+0x4ae0>
   15dd8:	vcmpe.f64	d8, #0.0
   15ddc:	vneg.f64	d16, d8
   15de0:	vmov.f64	d11, d8
   15de4:	vmov.f64	d9, #112	; 0x3f800000  1.0
   15de8:	vmrs	APSR_nzcv, fpscr
   15dec:	vmovmi.f64	d11, d16
   15df0:	vcmpe.f64	d11, d9
   15df4:	vmrs	APSR_nzcv, fpscr
   15df8:	bmi	15f18 <__assert_fail@plt+0x4ae0>
   15dfc:	vldr	d10, [pc, #356]	; 15f68 <__assert_fail@plt+0x4b30>
   15e00:	mov	r5, #1
   15e04:	vcmpe.f64	d11, d10
   15e08:	vmrs	APSR_nzcv, fpscr
   15e0c:	blt	15e2c <__assert_fail@plt+0x49f4>
   15e10:	vldr	d16, [pc, #344]	; 15f70 <__assert_fail@plt+0x4b38>
   15e14:	mov	r5, #1
   15e18:	vmul.f64	d11, d11, d16
   15e1c:	add	r5, r5, #1
   15e20:	vcmpe.f64	d11, d10
   15e24:	vmrs	APSR_nzcv, fpscr
   15e28:	bge	15e18 <__assert_fail@plt+0x49e0>
   15e2c:	ldr	r1, [r4]
   15e30:	cmp	r5, r1
   15e34:	ble	15e6c <__assert_fail@plt+0x4a34>
   15e38:	cmp	r5, #1
   15e3c:	mov	r6, r5
   15e40:	movls	r6, #1
   15e44:	cmp	r1, #0
   15e48:	beq	15e74 <__assert_fail@plt+0x4a3c>
   15e4c:	movw	r0, #37160	; 0x9128
   15e50:	lsl	r1, r1, #2
   15e54:	lsl	r2, r6, #2
   15e58:	movt	r0, #4
   15e5c:	ldr	r3, [r0]
   15e60:	ldr	r0, [r4, #8]
   15e64:	blx	r3
   15e68:	b	15e88 <__assert_fail@plt+0x4a50>
   15e6c:	ldr	r0, [r4, #8]
   15e70:	b	15ea8 <__assert_fail@plt+0x4a70>
   15e74:	movw	r0, #37156	; 0x9124
   15e78:	movt	r0, #4
   15e7c:	ldr	r1, [r0]
   15e80:	lsl	r0, r6, #2
   15e84:	blx	r1
   15e88:	str	r0, [r4, #8]
   15e8c:	str	r6, [r4]
   15e90:	ldr	r1, [r4, #4]
   15e94:	cmp	r1, #0
   15e98:	rsbmi	r1, r1, #0
   15e9c:	cmp	r1, r6
   15ea0:	movgt	r1, #0
   15ea4:	strgt	r1, [r4, #4]
   15ea8:	vcvt.u32.f64	s0, d11
   15eac:	vcvt.f64.u32	d16, s0
   15eb0:	vsub.f64	d16, d11, d16
   15eb4:	vcmpe.f64	d16, d9
   15eb8:	vmrs	APSR_nzcv, fpscr
   15ebc:	bpl	15f44 <__assert_fail@plt+0x4b0c>
   15ec0:	cmp	r5, #2
   15ec4:	vmov	r1, s0
   15ec8:	add	r2, r0, r5, lsl #2
   15ecc:	str	r1, [r2, #-4]
   15ed0:	blt	15f0c <__assert_fail@plt+0x4ad4>
   15ed4:	sub	r1, r5, #2
   15ed8:	vmul.f64	d16, d16, d10
   15edc:	vcvt.u32.f64	s0, d16
   15ee0:	vcvt.f64.u32	d17, s0
   15ee4:	vsub.f64	d16, d16, d17
   15ee8:	vcmpe.f64	d16, d9
   15eec:	vmrs	APSR_nzcv, fpscr
   15ef0:	bpl	15f24 <__assert_fail@plt+0x4aec>
   15ef4:	vmov	r2, s0
   15ef8:	cmp	r1, #0
   15efc:	str	r2, [r0, r1, lsl #2]
   15f00:	sub	r2, r1, #1
   15f04:	mov	r1, r2
   15f08:	bgt	15ed8 <__assert_fail@plt+0x4aa0>
   15f0c:	vcmpe.f64	d8, #0.0
   15f10:	vmrs	APSR_nzcv, fpscr
   15f14:	rsbmi	r5, r5, #0
   15f18:	str	r5, [r4, #4]
   15f1c:	vpop	{d8-d11}
   15f20:	pop	{r4, r5, r6, sl, fp, pc}
   15f24:	movw	r0, #27258	; 0x6a7a
   15f28:	movw	r1, #26324	; 0x66d4
   15f2c:	movw	r3, #27266	; 0x6a82
   15f30:	mov	r2, #1744	; 0x6d0
   15f34:	movt	r0, #3
   15f38:	movt	r1, #3
   15f3c:	movt	r3, #3
   15f40:	bl	11438 <__assert_fail@plt>
   15f44:	movw	r0, #27258	; 0x6a7a
   15f48:	movw	r1, #26324	; 0x66d4
   15f4c:	movw	r3, #27266	; 0x6a82
   15f50:	movw	r2, #1736	; 0x6c8
   15f54:	movt	r0, #3
   15f58:	movt	r1, #3
   15f5c:	movt	r3, #3
   15f60:	bl	11438 <__assert_fail@plt>
   15f64:	nop	{0}
   15f68:	andeq	r0, r0, r0
   15f6c:	mvnsmi	r0, r0
   15f70:	andeq	r0, r0, r0
   15f74:	ldclcc	0, cr0, [r0]
   15f78:	movw	r2, #26320	; 0x66d0
   15f7c:	mov	r1, #0
   15f80:	movt	r2, #3
   15f84:	str	r1, [r0]
   15f88:	stmib	r0, {r1, r2}
   15f8c:	b	15da0 <__assert_fail@plt+0x4968>
   15f90:	ldr	ip, [r0, #4]
   15f94:	cmp	ip, #0
   15f98:	mov	r2, ip
   15f9c:	rsbmi	r2, ip, #0
   15fa0:	cmp	r2, #0
   15fa4:	beq	16084 <__assert_fail@plt+0x4c4c>
   15fa8:	push	{r4, sl, fp, lr}
   15fac:	add	fp, sp, #8
   15fb0:	ldr	r0, [r0, #8]
   15fb4:	mov	r3, #0
   15fb8:	add	r1, r0, r2, lsl #2
   15fbc:	ldr	lr, [r1, #-4]
   15fc0:	cmp	r3, lr, lsr #24
   15fc4:	mov	r1, lr
   15fc8:	bne	15fe4 <__assert_fail@plt+0x4bac>
   15fcc:	mov	r3, #0
   15fd0:	mov	r1, lr
   15fd4:	lsl	r1, r1, #8
   15fd8:	add	r3, r3, #8
   15fdc:	cmp	r1, #16777216	; 0x1000000
   15fe0:	bcc	15fd4 <__assert_fail@plt+0x4b9c>
   15fe4:	cmp	r1, #0
   15fe8:	blt	15ffc <__assert_fail@plt+0x4bc4>
   15fec:	lsl	r1, r1, #1
   15ff0:	add	r3, r3, #1
   15ff4:	cmn	r1, #1
   15ff8:	bgt	15fec <__assert_fail@plt+0x4bb4>
   15ffc:	add	r4, r3, #21
   16000:	cmn	r4, #1
   16004:	bgt	16018 <__assert_fail@plt+0x4be0>
   16008:	mvn	r1, #20
   1600c:	sub	r1, r1, r3
   16010:	mvn	r3, #0
   16014:	and	lr, lr, r3, lsl r1
   16018:	vmov	s0, lr
   1601c:	cmp	r2, #2
   16020:	vcvt.f64.u32	d16, s0
   16024:	blt	16074 <__assert_fail@plt+0x4c3c>
   16028:	vldr	d17, [pc, #96]	; 16090 <__assert_fail@plt+0x4c58>
   1602c:	sub	r2, r2, #2
   16030:	mvn	lr, #0
   16034:	vmul.f64	d16, d16, d17
   16038:	cmp	r4, #1
   1603c:	blt	16064 <__assert_fail@plt+0x4c2c>
   16040:	ldr	r3, [r0, r2, lsl #2]
   16044:	sub	r1, r4, #32
   16048:	cmn	r1, #1
   1604c:	rsble	r4, r4, #32
   16050:	andle	r3, r3, lr, lsl r4
   16054:	mov	r4, r1
   16058:	vmov	s0, r3
   1605c:	vcvt.f64.u32	d18, s0
   16060:	vadd.f64	d16, d16, d18
   16064:	sub	r1, r2, #1
   16068:	cmp	r2, #0
   1606c:	mov	r2, r1
   16070:	bgt	16034 <__assert_fail@plt+0x4bfc>
   16074:	vneg.f64	d17, d16
   16078:	cmp	ip, #0
   1607c:	vselge.f64	d0, d16, d17
   16080:	pop	{r4, sl, fp, pc}
   16084:	vmov.i32	d0, #0	; 0x00000000
   16088:	bx	lr
   1608c:	nop	{0}
   16090:	andeq	r0, r0, r0
   16094:	mvnsmi	r0, r0
   16098:	ldr	r2, [r0, #4]
   1609c:	vcmpe.f64	d0, #0.0
   160a0:	vneg.f64	d16, d0
   160a4:	vmrs	APSR_nzcv, fpscr
   160a8:	vselge.f64	d16, d0, d16
   160ac:	cmp	r2, #0
   160b0:	beq	16134 <__assert_fail@plt+0x4cfc>
   160b4:	rsbmi	r2, r2, #0
   160b8:	mov	r1, r0
   160bc:	cmp	r2, #2
   160c0:	blt	160d8 <__assert_fail@plt+0x4ca0>
   160c4:	vldr	d17, [pc, #124]	; 16148 <__assert_fail@plt+0x4d10>
   160c8:	sub	r0, r2, #1
   160cc:	subs	r0, r0, #1
   160d0:	vmul.f64	d16, d16, d17
   160d4:	bne	160cc <__assert_fail@plt+0x4c94>
   160d8:	vldr	d17, [pc, #112]	; 16150 <__assert_fail@plt+0x4d18>
   160dc:	mvn	r0, #0
   160e0:	vcmpe.f64	d16, d17
   160e4:	vmrs	APSR_nzcv, fpscr
   160e8:	bge	16144 <__assert_fail@plt+0x4d0c>
   160ec:	cmp	r2, #1
   160f0:	blt	16134 <__assert_fail@plt+0x4cfc>
   160f4:	ldr	r1, [r1, #8]
   160f8:	sub	ip, r1, #4
   160fc:	vcvt.u32.f64	s0, d16
   16100:	ldr	r3, [ip, r2, lsl #2]
   16104:	vmov	r1, s0
   16108:	cmp	r3, r1
   1610c:	movhi	r0, #1
   16110:	bxhi	lr
   16114:	bxcc	lr
   16118:	sub	r2, r2, #1
   1611c:	vcvt.f64.u32	d18, s0
   16120:	vsub.f64	d16, d16, d18
   16124:	add	r1, r2, #1
   16128:	vmul.f64	d16, d16, d17
   1612c:	cmp	r1, #1
   16130:	bgt	160fc <__assert_fail@plt+0x4cc4>
   16134:	vcmpe.f64	d16, #0.0
   16138:	mov	r0, #0
   1613c:	vmrs	APSR_nzcv, fpscr
   16140:	mvngt	r0, #0
   16144:	bx	lr
   16148:	andeq	r0, r0, r0
   1614c:	ldclcc	0, cr0, [r0]
   16150:	andeq	r0, r0, r0
   16154:	mvnsmi	r0, r0
   16158:	ldr	r2, [r0, #4]
   1615c:	mov	r1, r0
   16160:	cmn	r2, #1
   16164:	ble	1620c <__assert_fail@plt+0x4dd4>
   16168:	vcmpe.f64	d0, #0.0
   1616c:	mov	r0, #1
   16170:	vmrs	APSR_nzcv, fpscr
   16174:	bmi	162a0 <__assert_fail@plt+0x4e68>
   16178:	vneg.f64	d16, d0
   1617c:	vselge.f64	d16, d0, d16
   16180:	cmp	r2, #0
   16184:	beq	161f8 <__assert_fail@plt+0x4dc0>
   16188:	cmp	r2, #2
   1618c:	blt	161a4 <__assert_fail@plt+0x4d6c>
   16190:	vldr	d17, [pc, #288]	; 162b8 <__assert_fail@plt+0x4e80>
   16194:	sub	r3, r2, #1
   16198:	subs	r3, r3, #1
   1619c:	vmul.f64	d16, d16, d17
   161a0:	bne	16198 <__assert_fail@plt+0x4d60>
   161a4:	vldr	d17, [pc, #276]	; 162c0 <__assert_fail@plt+0x4e88>
   161a8:	vcmpe.f64	d16, d17
   161ac:	vmrs	APSR_nzcv, fpscr
   161b0:	bge	162a4 <__assert_fail@plt+0x4e6c>
   161b4:	cmp	r2, #1
   161b8:	blt	161f8 <__assert_fail@plt+0x4dc0>
   161bc:	ldr	r1, [r1, #8]
   161c0:	sub	ip, r1, #4
   161c4:	vcvt.u32.f64	s0, d16
   161c8:	ldr	r3, [ip, r2, lsl #2]
   161cc:	vmov	r1, s0
   161d0:	cmp	r3, r1
   161d4:	bxhi	lr
   161d8:	bcc	162a4 <__assert_fail@plt+0x4e6c>
   161dc:	sub	r2, r2, #1
   161e0:	vcvt.f64.u32	d18, s0
   161e4:	vsub.f64	d16, d16, d18
   161e8:	add	r1, r2, #1
   161ec:	vmul.f64	d16, d16, d17
   161f0:	cmp	r1, #1
   161f4:	bgt	161c4 <__assert_fail@plt+0x4d8c>
   161f8:	vcmpe.f64	d16, #0.0
   161fc:	mov	r0, #0
   16200:	vmrs	APSR_nzcv, fpscr
   16204:	mvngt	r0, #0
   16208:	b	162a0 <__assert_fail@plt+0x4e68>
   1620c:	vcmpe.f64	d0, #0.0
   16210:	mvn	r0, #0
   16214:	vmrs	APSR_nzcv, fpscr
   16218:	bge	162a0 <__assert_fail@plt+0x4e68>
   1621c:	vneg.f64	d16, d0
   16220:	cmn	r2, #2
   16224:	bgt	1623c <__assert_fail@plt+0x4e04>
   16228:	vldr	d17, [pc, #136]	; 162b8 <__assert_fail@plt+0x4e80>
   1622c:	mvn	r3, r2
   16230:	subs	r3, r3, #1
   16234:	vmul.f64	d16, d16, d17
   16238:	bne	16230 <__assert_fail@plt+0x4df8>
   1623c:	vldr	d17, [pc, #124]	; 162c0 <__assert_fail@plt+0x4e88>
   16240:	vcmpe.f64	d16, d17
   16244:	vmrs	APSR_nzcv, fpscr
   16248:	bge	162ac <__assert_fail@plt+0x4e74>
   1624c:	ldr	ip, [r1, #8]
   16250:	mvn	r2, r2
   16254:	vcvt.u32.f64	s0, d16
   16258:	ldr	r3, [ip, r2, lsl #2]
   1625c:	vmov	r1, s0
   16260:	cmp	r3, r1
   16264:	bhi	162a0 <__assert_fail@plt+0x4e68>
   16268:	bcc	162ac <__assert_fail@plt+0x4e74>
   1626c:	vcvt.f64.u32	d18, s0
   16270:	sub	r1, r2, #1
   16274:	add	r2, r2, #1
   16278:	vsub.f64	d16, d16, d18
   1627c:	cmp	r2, #1
   16280:	mov	r2, r1
   16284:	vmul.f64	d16, d16, d17
   16288:	bgt	16254 <__assert_fail@plt+0x4e1c>
   1628c:	vcmpe.f64	d16, #0.0
   16290:	mov	r0, #0
   16294:	vmrs	APSR_nzcv, fpscr
   16298:	movwgt	r0, #1
   1629c:	bx	lr
   162a0:	bx	lr
   162a4:	mvn	r0, #0
   162a8:	bx	lr
   162ac:	mov	r0, #1
   162b0:	bx	lr
   162b4:	nop	{0}
   162b8:	andeq	r0, r0, r0
   162bc:	ldclcc	0, cr0, [r0]
   162c0:	andeq	r0, r0, r0
   162c4:	mvnsmi	r0, r0
   162c8:	ldr	r1, [r0, #4]
   162cc:	mov	r2, #1
   162d0:	asr	r0, r1, #31
   162d4:	cmp	r1, #0
   162d8:	addgt	r0, r2, r1, asr #31
   162dc:	bx	lr
   162e0:	ldr	r3, [r0, #4]
   162e4:	cmp	r3, #0
   162e8:	mvnlt	r0, #0
   162ec:	bxlt	lr
   162f0:	mov	r2, r0
   162f4:	mov	r0, #1
   162f8:	cmp	r3, #1
   162fc:	bxgt	lr
   16300:	cmp	r3, #0
   16304:	mov	r3, #0
   16308:	mov	r0, #0
   1630c:	ldrne	r2, [r2, #8]
   16310:	ldrne	r3, [r2]
   16314:	cmp	r3, r1
   16318:	movwhi	r0, #1
   1631c:	subcc	r0, r0, #1
   16320:	bx	lr
   16324:	ldr	r3, [r1, #4]
   16328:	ldr	r2, [r0, #4]
   1632c:	cmp	r2, r3
   16330:	bne	16370 <__assert_fail@plt+0x4f38>
   16334:	cmp	r2, #0
   16338:	blt	1637c <__assert_fail@plt+0x4f44>
   1633c:	ldr	r1, [r1, #8]
   16340:	ldr	r0, [r0, #8]
   16344:	sub	ip, r0, #4
   16348:	sub	r1, r1, #4
   1634c:	cmp	r2, #1
   16350:	blt	163bc <__assert_fail@plt+0x4f84>
   16354:	sub	r3, r2, #1
   16358:	ldr	r0, [r1, r2, lsl #2]
   1635c:	ldr	r2, [ip, r2, lsl #2]
   16360:	cmp	r2, r0
   16364:	mov	r2, r3
   16368:	beq	1634c <__assert_fail@plt+0x4f14>
   1636c:	b	163b0 <__assert_fail@plt+0x4f78>
   16370:	mov	r0, #1
   16374:	mvnlt	r0, #0
   16378:	bx	lr
   1637c:	ldr	r0, [r0, #8]
   16380:	ldr	r1, [r1, #8]
   16384:	rsb	r2, r2, #0
   16388:	sub	ip, r1, #4
   1638c:	sub	r0, r0, #4
   16390:	cmp	r2, #1
   16394:	blt	163bc <__assert_fail@plt+0x4f84>
   16398:	sub	r3, r2, #1
   1639c:	ldr	r1, [r0, r2, lsl #2]
   163a0:	ldr	r2, [ip, r2, lsl #2]
   163a4:	cmp	r2, r1
   163a8:	mov	r2, r3
   163ac:	beq	16390 <__assert_fail@plt+0x4f58>
   163b0:	mvn	r0, #0
   163b4:	movwhi	r0, #1
   163b8:	bx	lr
   163bc:	mov	r0, #0
   163c0:	bx	lr
   163c4:	ldr	r3, [r1, #4]
   163c8:	ldr	r2, [r1, #8]
   163cc:	ldr	r1, [r0, #4]
   163d0:	ldr	r0, [r0, #8]
   163d4:	cmp	r3, #0
   163d8:	rsbmi	r3, r3, #0
   163dc:	cmp	r1, #0
   163e0:	rsbmi	r1, r1, #0
   163e4:	cmp	r1, r3
   163e8:	bne	16424 <__assert_fail@plt+0x4fec>
   163ec:	sub	ip, r0, #4
   163f0:	sub	r2, r2, #4
   163f4:	cmp	r1, #1
   163f8:	movlt	r0, #0
   163fc:	bxlt	lr
   16400:	sub	r3, r1, #1
   16404:	ldr	r0, [r2, r1, lsl #2]
   16408:	ldr	r1, [ip, r1, lsl #2]
   1640c:	cmp	r1, r0
   16410:	mov	r1, r3
   16414:	beq	163f4 <__assert_fail@plt+0x4fbc>
   16418:	mvn	r0, #0
   1641c:	movwhi	r0, #1
   16420:	bx	lr
   16424:	mov	r0, #1
   16428:	mvnlt	r0, #0
   1642c:	bx	lr
   16430:	push	{r4, r5, r6, r7, fp, lr}
   16434:	add	fp, sp, #16
   16438:	mov	r4, r0
   1643c:	cmp	r0, r1
   16440:	beq	16494 <__assert_fail@plt+0x505c>
   16444:	mov	r5, r1
   16448:	ldr	r1, [r4]
   1644c:	ldr	r6, [r5, #4]
   16450:	cmp	r6, #0
   16454:	rsbmi	r6, r6, #0
   16458:	cmp	r6, r1
   1645c:	ble	1649c <__assert_fail@plt+0x5064>
   16460:	cmp	r6, #1
   16464:	mov	r7, r6
   16468:	movle	r7, #1
   1646c:	cmp	r1, #0
   16470:	beq	164ac <__assert_fail@plt+0x5074>
   16474:	movw	r0, #37160	; 0x9128
   16478:	lsl	r1, r1, #2
   1647c:	lsl	r2, r7, #2
   16480:	movt	r0, #4
   16484:	ldr	r3, [r0]
   16488:	ldr	r0, [r4, #8]
   1648c:	blx	r3
   16490:	b	164c0 <__assert_fail@plt+0x5088>
   16494:	ldr	r0, [r4, #4]!
   16498:	b	16558 <__assert_fail@plt+0x5120>
   1649c:	ldr	r0, [r4, #8]
   164a0:	cmp	r6, #1
   164a4:	bge	164e8 <__assert_fail@plt+0x50b0>
   164a8:	b	16550 <__assert_fail@plt+0x5118>
   164ac:	movw	r0, #37156	; 0x9124
   164b0:	movt	r0, #4
   164b4:	ldr	r1, [r0]
   164b8:	lsl	r0, r7, #2
   164bc:	blx	r1
   164c0:	str	r0, [r4, #8]
   164c4:	str	r7, [r4]
   164c8:	ldr	r1, [r4, #4]
   164cc:	cmp	r1, #0
   164d0:	rsbmi	r1, r1, #0
   164d4:	cmp	r1, r7
   164d8:	movgt	r1, #0
   164dc:	strgt	r1, [r4, #4]
   164e0:	cmp	r6, #1
   164e4:	blt	16550 <__assert_fail@plt+0x5118>
   164e8:	ldr	ip, [r5, #8]
   164ec:	mov	r2, #0
   164f0:	cmp	r6, #4
   164f4:	bcc	16534 <__assert_fail@plt+0x50fc>
   164f8:	add	r1, ip, r6, lsl #2
   164fc:	cmp	r0, r1
   16500:	addcc	r1, r0, r6, lsl #2
   16504:	cmpcc	ip, r1
   16508:	bcc	16534 <__assert_fail@plt+0x50fc>
   1650c:	bic	r2, r6, #-2147483645	; 0x80000003
   16510:	mov	r7, r0
   16514:	mov	r1, ip
   16518:	mov	r3, r2
   1651c:	vld1.32	{d16-d17}, [r1]!
   16520:	subs	r3, r3, #4
   16524:	vst1.32	{d16-d17}, [r7]!
   16528:	bne	1651c <__assert_fail@plt+0x50e4>
   1652c:	cmp	r6, r2
   16530:	beq	16550 <__assert_fail@plt+0x5118>
   16534:	add	r1, ip, r2, lsl #2
   16538:	add	r0, r0, r2, lsl #2
   1653c:	sub	r2, r6, r2
   16540:	ldr	r3, [r1], #4
   16544:	subs	r2, r2, #1
   16548:	str	r3, [r0], #4
   1654c:	bne	16540 <__assert_fail@plt+0x5108>
   16550:	ldr	r0, [r5, #4]
   16554:	str	r0, [r4, #4]!
   16558:	cmp	r0, #0
   1655c:	rsbmi	r0, r0, #0
   16560:	str	r0, [r4]
   16564:	pop	{r4, r5, r6, r7, fp, pc}
   16568:	push	{r4, r5, r6, r7, fp, lr}
   1656c:	add	fp, sp, #16
   16570:	mov	r4, r0
   16574:	cmp	r0, r1
   16578:	beq	165cc <__assert_fail@plt+0x5194>
   1657c:	mov	r5, r1
   16580:	ldr	r1, [r4]
   16584:	ldr	r6, [r5, #4]
   16588:	cmp	r6, #0
   1658c:	rsbmi	r6, r6, #0
   16590:	cmp	r6, r1
   16594:	ble	165d4 <__assert_fail@plt+0x519c>
   16598:	cmp	r6, #1
   1659c:	mov	r7, r6
   165a0:	movle	r7, #1
   165a4:	cmp	r1, #0
   165a8:	beq	165e4 <__assert_fail@plt+0x51ac>
   165ac:	movw	r0, #37160	; 0x9128
   165b0:	lsl	r1, r1, #2
   165b4:	lsl	r2, r7, #2
   165b8:	movt	r0, #4
   165bc:	ldr	r3, [r0]
   165c0:	ldr	r0, [r4, #8]
   165c4:	blx	r3
   165c8:	b	165f8 <__assert_fail@plt+0x51c0>
   165cc:	ldr	r0, [r4, #4]!
   165d0:	b	16690 <__assert_fail@plt+0x5258>
   165d4:	ldr	r0, [r4, #8]
   165d8:	cmp	r6, #1
   165dc:	bge	16620 <__assert_fail@plt+0x51e8>
   165e0:	b	16688 <__assert_fail@plt+0x5250>
   165e4:	movw	r0, #37156	; 0x9124
   165e8:	movt	r0, #4
   165ec:	ldr	r1, [r0]
   165f0:	lsl	r0, r7, #2
   165f4:	blx	r1
   165f8:	str	r0, [r4, #8]
   165fc:	str	r7, [r4]
   16600:	ldr	r1, [r4, #4]
   16604:	cmp	r1, #0
   16608:	rsbmi	r1, r1, #0
   1660c:	cmp	r1, r7
   16610:	movgt	r1, #0
   16614:	strgt	r1, [r4, #4]
   16618:	cmp	r6, #1
   1661c:	blt	16688 <__assert_fail@plt+0x5250>
   16620:	ldr	ip, [r5, #8]
   16624:	mov	r2, #0
   16628:	cmp	r6, #4
   1662c:	bcc	1666c <__assert_fail@plt+0x5234>
   16630:	add	r1, ip, r6, lsl #2
   16634:	cmp	r0, r1
   16638:	addcc	r1, r0, r6, lsl #2
   1663c:	cmpcc	ip, r1
   16640:	bcc	1666c <__assert_fail@plt+0x5234>
   16644:	bic	r2, r6, #-2147483645	; 0x80000003
   16648:	mov	r7, r0
   1664c:	mov	r1, ip
   16650:	mov	r3, r2
   16654:	vld1.32	{d16-d17}, [r1]!
   16658:	subs	r3, r3, #4
   1665c:	vst1.32	{d16-d17}, [r7]!
   16660:	bne	16654 <__assert_fail@plt+0x521c>
   16664:	cmp	r6, r2
   16668:	beq	16688 <__assert_fail@plt+0x5250>
   1666c:	add	r1, ip, r2, lsl #2
   16670:	add	r0, r0, r2, lsl #2
   16674:	sub	r2, r6, r2
   16678:	ldr	r3, [r1], #4
   1667c:	subs	r2, r2, #1
   16680:	str	r3, [r0], #4
   16684:	bne	16678 <__assert_fail@plt+0x5240>
   16688:	ldr	r0, [r5, #4]
   1668c:	str	r0, [r4, #4]!
   16690:	rsb	r0, r0, #0
   16694:	str	r0, [r4]
   16698:	pop	{r4, r5, r6, r7, fp, pc}
   1669c:	ldr	r2, [r0, #4]
   166a0:	ldr	r3, [r1, #4]
   166a4:	str	r3, [r0, #4]
   166a8:	str	r2, [r1, #4]
   166ac:	ldr	r2, [r0]
   166b0:	ldr	r3, [r1]
   166b4:	str	r3, [r0]
   166b8:	str	r2, [r1]
   166bc:	ldr	r2, [r0, #8]
   166c0:	ldr	r3, [r1, #8]
   166c4:	str	r3, [r0, #8]
   166c8:	str	r2, [r1, #8]
   166cc:	bx	lr
   166d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   166d4:	add	fp, sp, #24
   166d8:	sub	sp, sp, #16
   166dc:	mov	r4, r1
   166e0:	movw	r1, #26320	; 0x66d0
   166e4:	mov	r5, r0
   166e8:	mov	r0, #0
   166ec:	cmp	r2, #0
   166f0:	movt	r1, #3
   166f4:	str	r0, [sp, #8]
   166f8:	str	r0, [sp, #4]
   166fc:	str	r1, [sp, #12]
   16700:	beq	16764 <__assert_fail@plt+0x532c>
   16704:	movw	r0, #37156	; 0x9124
   16708:	mov	r8, #1
   1670c:	mov	r6, r2
   16710:	movt	r0, #4
   16714:	str	r8, [sp, #8]
   16718:	ldr	r1, [r0]
   1671c:	mov	r0, #4
   16720:	blx	r1
   16724:	str	r8, [sp, #4]
   16728:	str	r0, [sp, #12]
   1672c:	mov	r7, r0
   16730:	str	r6, [r0]
   16734:	add	r2, sp, #4
   16738:	mov	r0, r5
   1673c:	mov	r1, r4
   16740:	bl	16780 <__assert_fail@plt+0x5348>
   16744:	movw	r0, #37164	; 0x912c
   16748:	mov	r1, #4
   1674c:	movt	r0, #4
   16750:	ldr	r2, [r0]
   16754:	mov	r0, r7
   16758:	blx	r2
   1675c:	sub	sp, fp, #24
   16760:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16764:	str	r0, [sp, #8]
   16768:	add	r2, sp, #4
   1676c:	mov	r0, r5
   16770:	mov	r1, r4
   16774:	bl	16780 <__assert_fail@plt+0x5348>
   16778:	sub	sp, fp, #24
   1677c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16784:	add	fp, sp, #28
   16788:	sub	sp, sp, #20
   1678c:	ldr	r8, [r1, #4]
   16790:	ldr	sl, [r2, #4]
   16794:	mov	r7, r0
   16798:	mov	r6, r2
   1679c:	mov	r4, r1
   167a0:	eor	r0, sl, r8
   167a4:	cmp	r0, #0
   167a8:	blt	167f4 <__assert_fail@plt+0x53bc>
   167ac:	cmp	sl, #0
   167b0:	ldr	r1, [r7]
   167b4:	mov	r5, r4
   167b8:	rsbmi	sl, sl, #0
   167bc:	cmp	r8, #0
   167c0:	rsbmi	r8, r8, #0
   167c4:	mov	r9, sl
   167c8:	cmp	r8, sl
   167cc:	mov	r0, r8
   167d0:	movlt	r0, sl
   167d4:	movlt	r5, r6
   167d8:	movlt	r6, r4
   167dc:	movlt	r9, r8
   167e0:	cmp	r0, r1
   167e4:	stmib	sp, {r0, r4}
   167e8:	bge	16808 <__assert_fail@plt+0x53d0>
   167ec:	ldr	r0, [r7, #8]
   167f0:	b	16870 <__assert_fail@plt+0x5438>
   167f4:	mov	r0, r7
   167f8:	mov	r1, r4
   167fc:	mov	r2, r6
   16800:	bl	16b88 <__assert_fail@plt+0x5750>
   16804:	b	1694c <__assert_fail@plt+0x5514>
   16808:	add	r4, r0, #1
   1680c:	cmp	r4, #1
   16810:	movls	r4, #1
   16814:	cmp	r1, #0
   16818:	beq	1683c <__assert_fail@plt+0x5404>
   1681c:	movw	r0, #37160	; 0x9128
   16820:	lsl	r1, r1, #2
   16824:	lsl	r2, r4, #2
   16828:	movt	r0, #4
   1682c:	ldr	r3, [r0]
   16830:	ldr	r0, [r7, #8]
   16834:	blx	r3
   16838:	b	16850 <__assert_fail@plt+0x5418>
   1683c:	movw	r0, #37156	; 0x9124
   16840:	movt	r0, #4
   16844:	ldr	r1, [r0]
   16848:	lsl	r0, r4, #2
   1684c:	blx	r1
   16850:	str	r0, [r7, #8]
   16854:	str	r4, [r7]
   16858:	ldr	r1, [r7, #4]
   1685c:	cmp	r1, #0
   16860:	rsbmi	r1, r1, #0
   16864:	cmp	r1, r4
   16868:	movgt	r1, #0
   1686c:	strgt	r1, [r7, #4]
   16870:	ldr	r2, [r5, #8]
   16874:	cmp	r9, #1
   16878:	str	r7, [sp, #12]
   1687c:	str	r0, [sp, #16]
   16880:	str	r2, [sp]
   16884:	blt	168c8 <__assert_fail@plt+0x5490>
   16888:	ldr	r3, [r6, #8]
   1688c:	mov	lr, #0
   16890:	mov	r5, r0
   16894:	mov	r4, r9
   16898:	mov	r1, #0
   1689c:	ldr	r6, [r2], #4
   168a0:	ldr	r7, [r3], #4
   168a4:	adds	ip, r6, r1
   168a8:	adds	r7, ip, r7
   168ac:	adc	r0, lr, #0
   168b0:	adds	r1, r6, r1
   168b4:	str	r7, [r5], #4
   168b8:	adc	r1, r0, #0
   168bc:	subs	r4, r4, #1
   168c0:	bne	1689c <__assert_fail@plt+0x5464>
   168c4:	b	168cc <__assert_fail@plt+0x5494>
   168c8:	mov	r1, #0
   168cc:	ldr	ip, [sp, #4]
   168d0:	cmp	ip, r9
   168d4:	ble	16938 <__assert_fail@plt+0x5500>
   168d8:	sub	r0, ip, r9
   168dc:	cmp	r0, #1
   168e0:	blt	16964 <__assert_fail@plt+0x552c>
   168e4:	ldr	r0, [sp]
   168e8:	mvn	r7, sl
   168ec:	mov	r6, #0
   168f0:	add	r2, r0, r9, lsl #2
   168f4:	ldr	r0, [sp, #16]
   168f8:	add	r3, r0, r9, lsl #2
   168fc:	mvn	r0, r8
   16900:	cmp	r0, r7
   16904:	movgt	r7, r0
   16908:	add	r0, ip, r7
   1690c:	add	r7, r0, #1
   16910:	ldr	r0, [r2], #4
   16914:	mov	r5, r1
   16918:	adds	r4, r0, r1
   1691c:	adc	r1, r6, #0
   16920:	str	r4, [r3], #4
   16924:	subs	r7, r7, #1
   16928:	bne	16910 <__assert_fail@plt+0x54d8>
   1692c:	mov	r1, #0
   16930:	cmp	r4, r5
   16934:	movwcc	r1, #1
   16938:	ldr	r0, [sp, #16]
   1693c:	ldr	r7, [sp, #12]
   16940:	ldr	r4, [sp, #8]
   16944:	str	r1, [r0, ip, lsl #2]
   16948:	add	r0, r1, ip
   1694c:	ldr	r1, [r4, #4]
   16950:	cmn	r1, #1
   16954:	rsble	r0, r0, #0
   16958:	str	r0, [r7, #4]
   1695c:	sub	sp, fp, #28
   16960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16964:	movw	r0, #29650	; 0x73d2
   16968:	movw	r1, #26324	; 0x66d4
   1696c:	movw	r3, #26341	; 0x66e5
   16970:	movw	r2, #442	; 0x1ba
   16974:	movt	r0, #3
   16978:	movt	r1, #3
   1697c:	movt	r3, #3
   16980:	bl	11438 <__assert_fail@plt>
   16984:	push	{r4, sl, fp, lr}
   16988:	add	fp, sp, #8
   1698c:	mov	r3, r1
   16990:	mov	r1, r2
   16994:	mov	r4, r0
   16998:	mov	r2, r3
   1699c:	bl	169b0 <__assert_fail@plt+0x5578>
   169a0:	ldr	r0, [r4, #4]
   169a4:	rsb	r0, r0, #0
   169a8:	str	r0, [r4, #4]
   169ac:	pop	{r4, sl, fp, pc}
   169b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   169b4:	add	fp, sp, #24
   169b8:	sub	sp, sp, #16
   169bc:	mov	r8, r1
   169c0:	mov	r4, r0
   169c4:	cmp	r0, r2
   169c8:	beq	16a1c <__assert_fail@plt+0x55e4>
   169cc:	ldr	r7, [r2, #4]
   169d0:	ldr	r1, [r4]
   169d4:	mov	r6, r2
   169d8:	cmp	r7, #0
   169dc:	rsbmi	r7, r7, #0
   169e0:	cmp	r7, r1
   169e4:	ble	16a28 <__assert_fail@plt+0x55f0>
   169e8:	cmp	r7, #1
   169ec:	mov	r5, r7
   169f0:	movle	r5, #1
   169f4:	cmp	r1, #0
   169f8:	beq	16a38 <__assert_fail@plt+0x5600>
   169fc:	movw	r0, #37160	; 0x9128
   16a00:	lsl	r1, r1, #2
   16a04:	lsl	r2, r5, #2
   16a08:	movt	r0, #4
   16a0c:	ldr	r3, [r0]
   16a10:	ldr	r0, [r4, #8]
   16a14:	blx	r3
   16a18:	b	16a4c <__assert_fail@plt+0x5614>
   16a1c:	mov	r0, r4
   16a20:	ldr	r1, [r0, #4]!
   16a24:	b	16ae8 <__assert_fail@plt+0x56b0>
   16a28:	ldr	r0, [r4, #8]
   16a2c:	cmp	r7, #1
   16a30:	bge	16a74 <__assert_fail@plt+0x563c>
   16a34:	b	16adc <__assert_fail@plt+0x56a4>
   16a38:	movw	r0, #37156	; 0x9124
   16a3c:	movt	r0, #4
   16a40:	ldr	r1, [r0]
   16a44:	lsl	r0, r5, #2
   16a48:	blx	r1
   16a4c:	str	r0, [r4, #8]
   16a50:	str	r5, [r4]
   16a54:	ldr	r1, [r4, #4]
   16a58:	cmp	r1, #0
   16a5c:	rsbmi	r1, r1, #0
   16a60:	cmp	r1, r5
   16a64:	movgt	r1, #0
   16a68:	strgt	r1, [r4, #4]
   16a6c:	cmp	r7, #1
   16a70:	blt	16adc <__assert_fail@plt+0x56a4>
   16a74:	ldr	ip, [r6, #8]
   16a78:	mov	r2, #0
   16a7c:	cmp	r7, #4
   16a80:	bcc	16ac0 <__assert_fail@plt+0x5688>
   16a84:	add	r1, ip, r7, lsl #2
   16a88:	cmp	r0, r1
   16a8c:	addcc	r1, r0, r7, lsl #2
   16a90:	cmpcc	ip, r1
   16a94:	bcc	16ac0 <__assert_fail@plt+0x5688>
   16a98:	bic	r2, r7, #-2147483645	; 0x80000003
   16a9c:	mov	r5, r0
   16aa0:	mov	r1, ip
   16aa4:	mov	r3, r2
   16aa8:	vld1.32	{d16-d17}, [r1]!
   16aac:	subs	r3, r3, #4
   16ab0:	vst1.32	{d16-d17}, [r5]!
   16ab4:	bne	16aa8 <__assert_fail@plt+0x5670>
   16ab8:	cmp	r7, r2
   16abc:	beq	16adc <__assert_fail@plt+0x56a4>
   16ac0:	add	r1, ip, r2, lsl #2
   16ac4:	add	r0, r0, r2, lsl #2
   16ac8:	sub	r2, r7, r2
   16acc:	ldr	r3, [r1], #4
   16ad0:	subs	r2, r2, #1
   16ad4:	str	r3, [r0], #4
   16ad8:	bne	16acc <__assert_fail@plt+0x5694>
   16adc:	ldr	r1, [r6, #4]
   16ae0:	mov	r0, r4
   16ae4:	str	r1, [r0, #4]!
   16ae8:	rsb	r1, r1, #0
   16aec:	cmp	r8, #0
   16af0:	str	r1, [r0]
   16af4:	movw	r1, #26320	; 0x66d0
   16af8:	mov	r0, #0
   16afc:	movt	r1, #3
   16b00:	str	r0, [sp, #8]
   16b04:	str	r0, [sp, #4]
   16b08:	str	r1, [sp, #12]
   16b0c:	beq	16b6c <__assert_fail@plt+0x5734>
   16b10:	movw	r0, #37156	; 0x9124
   16b14:	mov	r5, #1
   16b18:	movt	r0, #4
   16b1c:	str	r5, [sp, #8]
   16b20:	ldr	r1, [r0]
   16b24:	mov	r0, #4
   16b28:	blx	r1
   16b2c:	str	r5, [sp, #4]
   16b30:	str	r0, [sp, #12]
   16b34:	mov	r6, r0
   16b38:	str	r8, [r0]
   16b3c:	add	r2, sp, #4
   16b40:	mov	r0, r4
   16b44:	mov	r1, r4
   16b48:	bl	16780 <__assert_fail@plt+0x5348>
   16b4c:	movw	r0, #37164	; 0x912c
   16b50:	mov	r1, #4
   16b54:	movt	r0, #4
   16b58:	ldr	r2, [r0]
   16b5c:	mov	r0, r6
   16b60:	blx	r2
   16b64:	sub	sp, fp, #24
   16b68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16b6c:	str	r0, [sp, #8]
   16b70:	add	r2, sp, #4
   16b74:	mov	r0, r4
   16b78:	mov	r1, r4
   16b7c:	bl	16780 <__assert_fail@plt+0x5348>
   16b80:	sub	sp, fp, #24
   16b84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b8c:	add	fp, sp, #28
   16b90:	sub	sp, sp, #4
   16b94:	mov	r5, r1
   16b98:	ldr	sl, [r2, #4]
   16b9c:	mov	r7, r0
   16ba0:	ldr	r0, [r2, #8]
   16ba4:	mov	r8, r2
   16ba8:	ldr	r9, [r5, #4]
   16bac:	ldr	r1, [r5, #8]
   16bb0:	cmp	sl, #0
   16bb4:	rsbmi	sl, sl, #0
   16bb8:	cmp	r9, #0
   16bbc:	rsbmi	r9, r9, #0
   16bc0:	cmp	r9, sl
   16bc4:	bne	16c38 <__assert_fail@plt+0x5800>
   16bc8:	sub	r1, r1, #4
   16bcc:	sub	r0, r0, #4
   16bd0:	mov	r2, r9
   16bd4:	cmp	r2, #1
   16bd8:	blt	16c7c <__assert_fail@plt+0x5844>
   16bdc:	sub	r3, r2, #1
   16be0:	ldr	r4, [r0, r2, lsl #2]
   16be4:	ldr	r2, [r1, r2, lsl #2]
   16be8:	cmp	r2, r4
   16bec:	mov	r2, r3
   16bf0:	beq	16bd4 <__assert_fail@plt+0x579c>
   16bf4:	bhi	16c3c <__assert_fail@plt+0x5804>
   16bf8:	ldr	r1, [r7]
   16bfc:	cmp	sl, r1
   16c00:	ble	16c88 <__assert_fail@plt+0x5850>
   16c04:	cmp	sl, #1
   16c08:	mov	r4, sl
   16c0c:	movle	r4, #1
   16c10:	cmp	r1, #0
   16c14:	beq	16ca8 <__assert_fail@plt+0x5870>
   16c18:	movw	r0, #37160	; 0x9128
   16c1c:	lsl	r1, r1, #2
   16c20:	lsl	r2, r4, #2
   16c24:	movt	r0, #4
   16c28:	ldr	r3, [r0]
   16c2c:	ldr	r0, [r7, #8]
   16c30:	blx	r3
   16c34:	b	16cbc <__assert_fail@plt+0x5884>
   16c38:	blt	16bf8 <__assert_fail@plt+0x57c0>
   16c3c:	ldr	r1, [r7]
   16c40:	cmp	r9, r1
   16c44:	ble	16c98 <__assert_fail@plt+0x5860>
   16c48:	cmp	r9, #1
   16c4c:	mov	r4, r9
   16c50:	movle	r4, #1
   16c54:	cmp	r1, #0
   16c58:	beq	16dc4 <__assert_fail@plt+0x598c>
   16c5c:	movw	r0, #37160	; 0x9128
   16c60:	lsl	r1, r1, #2
   16c64:	lsl	r2, r4, #2
   16c68:	movt	r0, #4
   16c6c:	ldr	r3, [r0]
   16c70:	ldr	r0, [r7, #8]
   16c74:	blx	r3
   16c78:	b	16dd8 <__assert_fail@plt+0x59a0>
   16c7c:	mov	r0, #0
   16c80:	sub	sp, fp, #28
   16c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c88:	ldr	r0, [r7, #8]
   16c8c:	cmp	sl, r9
   16c90:	bge	16ce4 <__assert_fail@plt+0x58ac>
   16c94:	b	16edc <__assert_fail@plt+0x5aa4>
   16c98:	ldr	r0, [r7, #8]
   16c9c:	cmp	r9, sl
   16ca0:	bge	16e00 <__assert_fail@plt+0x59c8>
   16ca4:	b	16edc <__assert_fail@plt+0x5aa4>
   16ca8:	movw	r0, #37156	; 0x9124
   16cac:	movt	r0, #4
   16cb0:	ldr	r1, [r0]
   16cb4:	lsl	r0, r4, #2
   16cb8:	blx	r1
   16cbc:	str	r0, [r7, #8]
   16cc0:	str	r4, [r7]
   16cc4:	ldr	r1, [r7, #4]
   16cc8:	cmp	r1, #0
   16ccc:	rsbmi	r1, r1, #0
   16cd0:	cmp	r1, r4
   16cd4:	movgt	r1, #0
   16cd8:	strgt	r1, [r7, #4]
   16cdc:	cmp	sl, r9
   16ce0:	blt	16edc <__assert_fail@plt+0x5aa4>
   16ce4:	ldr	ip, [r8, #8]
   16ce8:	cmp	r9, #1
   16cec:	blt	16d40 <__assert_fail@plt+0x5908>
   16cf0:	ldr	r3, [r5, #8]
   16cf4:	mov	r1, #0
   16cf8:	mov	r2, ip
   16cfc:	mov	r5, r0
   16d00:	mov	r4, r9
   16d04:	ldr	r7, [r3], #4
   16d08:	ldr	lr, [r2], #4
   16d0c:	adds	r6, r7, r1
   16d10:	cmp	lr, r6
   16d14:	mov	r6, #0
   16d18:	movwcc	r6, #1
   16d1c:	adds	r7, r7, r1
   16d20:	sub	r7, lr, r7
   16d24:	adc	r1, r6, #0
   16d28:	subs	r4, r4, #1
   16d2c:	str	r7, [r5], #4
   16d30:	bne	16d04 <__assert_fail@plt+0x58cc>
   16d34:	cmp	sl, r9
   16d38:	bgt	16d4c <__assert_fail@plt+0x5914>
   16d3c:	b	16d90 <__assert_fail@plt+0x5958>
   16d40:	mov	r1, #0
   16d44:	cmp	sl, r9
   16d48:	ble	16d90 <__assert_fail@plt+0x5958>
   16d4c:	sub	r2, sl, r9
   16d50:	cmp	r2, #1
   16d54:	blt	16f1c <__assert_fail@plt+0x5ae4>
   16d58:	add	r3, ip, r9, lsl #2
   16d5c:	add	r7, r0, r9, lsl #2
   16d60:	ldr	r5, [r3], #4
   16d64:	mov	r6, r1
   16d68:	cmp	r5, r1
   16d6c:	mov	r1, #0
   16d70:	sub	r4, r5, r6
   16d74:	movwcc	r1, #1
   16d78:	str	r4, [r7], #4
   16d7c:	subs	r2, r2, #1
   16d80:	bne	16d60 <__assert_fail@plt+0x5928>
   16d84:	mov	r1, #0
   16d88:	cmp	r5, r6
   16d8c:	movwcc	r1, #1
   16d90:	cmp	r1, #0
   16d94:	bne	16efc <__assert_fail@plt+0x5ac4>
   16d98:	sub	r0, r0, #4
   16d9c:	mov	r1, sl
   16da0:	cmp	sl, #1
   16da4:	blt	16db8 <__assert_fail@plt+0x5980>
   16da8:	ldr	r2, [r0, r1, lsl #2]
   16dac:	sub	sl, r1, #1
   16db0:	cmp	r2, #0
   16db4:	beq	16d9c <__assert_fail@plt+0x5964>
   16db8:	rsb	r0, r1, #0
   16dbc:	sub	sp, fp, #28
   16dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dc4:	movw	r0, #37156	; 0x9124
   16dc8:	movt	r0, #4
   16dcc:	ldr	r1, [r0]
   16dd0:	lsl	r0, r4, #2
   16dd4:	blx	r1
   16dd8:	str	r0, [r7, #8]
   16ddc:	str	r4, [r7]
   16de0:	ldr	r1, [r7, #4]
   16de4:	cmp	r1, #0
   16de8:	rsbmi	r1, r1, #0
   16dec:	cmp	r1, r4
   16df0:	movgt	r1, #0
   16df4:	strgt	r1, [r7, #4]
   16df8:	cmp	r9, sl
   16dfc:	blt	16edc <__assert_fail@plt+0x5aa4>
   16e00:	ldr	ip, [r5, #8]
   16e04:	cmp	sl, #1
   16e08:	blt	16e5c <__assert_fail@plt+0x5a24>
   16e0c:	ldr	r3, [r8, #8]
   16e10:	mov	r1, #0
   16e14:	mov	r2, ip
   16e18:	mov	r5, r0
   16e1c:	mov	r7, sl
   16e20:	ldr	r6, [r3], #4
   16e24:	ldr	lr, [r2], #4
   16e28:	adds	r4, r6, r1
   16e2c:	cmp	lr, r4
   16e30:	mov	r4, #0
   16e34:	movwcc	r4, #1
   16e38:	adds	r6, r6, r1
   16e3c:	sub	r6, lr, r6
   16e40:	adc	r1, r4, #0
   16e44:	subs	r7, r7, #1
   16e48:	str	r6, [r5], #4
   16e4c:	bne	16e20 <__assert_fail@plt+0x59e8>
   16e50:	cmp	r9, sl
   16e54:	bgt	16e68 <__assert_fail@plt+0x5a30>
   16e58:	b	16eac <__assert_fail@plt+0x5a74>
   16e5c:	mov	r1, #0
   16e60:	cmp	r9, sl
   16e64:	ble	16eac <__assert_fail@plt+0x5a74>
   16e68:	sub	r2, r9, sl
   16e6c:	cmp	r2, #1
   16e70:	blt	16f1c <__assert_fail@plt+0x5ae4>
   16e74:	add	r3, ip, sl, lsl #2
   16e78:	add	r7, r0, sl, lsl #2
   16e7c:	ldr	r4, [r3], #4
   16e80:	mov	r5, r1
   16e84:	cmp	r4, r1
   16e88:	mov	r1, #0
   16e8c:	sub	r6, r4, r5
   16e90:	movwcc	r1, #1
   16e94:	str	r6, [r7], #4
   16e98:	subs	r2, r2, #1
   16e9c:	bne	16e7c <__assert_fail@plt+0x5a44>
   16ea0:	mov	r1, #0
   16ea4:	cmp	r4, r5
   16ea8:	movwcc	r1, #1
   16eac:	cmp	r1, #0
   16eb0:	bne	16f3c <__assert_fail@plt+0x5b04>
   16eb4:	sub	r1, r0, #4
   16eb8:	mov	r0, r9
   16ebc:	cmp	r9, #1
   16ec0:	blt	16ed4 <__assert_fail@plt+0x5a9c>
   16ec4:	ldr	r2, [r1, r0, lsl #2]
   16ec8:	sub	r9, r0, #1
   16ecc:	cmp	r2, #0
   16ed0:	beq	16eb8 <__assert_fail@plt+0x5a80>
   16ed4:	sub	sp, fp, #28
   16ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16edc:	movw	r0, #26402	; 0x6722
   16ee0:	movw	r1, #26324	; 0x66d4
   16ee4:	movw	r3, #26542	; 0x67ae
   16ee8:	mov	r2, #532	; 0x214
   16eec:	movt	r0, #3
   16ef0:	movt	r1, #3
   16ef4:	movt	r3, #3
   16ef8:	bl	11438 <__assert_fail@plt>
   16efc:	movw	r0, #27305	; 0x6aa9
   16f00:	movw	r1, #26324	; 0x66d4
   16f04:	movw	r3, #29539	; 0x7363
   16f08:	movw	r2, #2012	; 0x7dc
   16f0c:	movt	r0, #3
   16f10:	movt	r1, #3
   16f14:	movt	r3, #3
   16f18:	bl	11438 <__assert_fail@plt>
   16f1c:	movw	r0, #29650	; 0x73d2
   16f20:	movw	r1, #26324	; 0x66d4
   16f24:	movw	r3, #26481	; 0x6771
   16f28:	movw	r2, #493	; 0x1ed
   16f2c:	movt	r0, #3
   16f30:	movt	r1, #3
   16f34:	movt	r3, #3
   16f38:	bl	11438 <__assert_fail@plt>
   16f3c:	movw	r0, #27305	; 0x6aa9
   16f40:	movw	r1, #26324	; 0x66d4
   16f44:	movw	r3, #29539	; 0x7363
   16f48:	movw	r2, #2006	; 0x7d6
   16f4c:	movt	r0, #3
   16f50:	movt	r1, #3
   16f54:	movt	r3, #3
   16f58:	bl	11438 <__assert_fail@plt>
   16f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f60:	add	fp, sp, #28
   16f64:	sub	sp, sp, #20
   16f68:	ldr	r8, [r1, #4]
   16f6c:	ldr	sl, [r2, #4]
   16f70:	mov	r5, r0
   16f74:	mov	r6, r2
   16f78:	mov	r9, r1
   16f7c:	eor	r0, sl, r8
   16f80:	cmp	r0, #0
   16f84:	blt	16f9c <__assert_fail@plt+0x5b64>
   16f88:	mov	r0, r5
   16f8c:	mov	r1, r9
   16f90:	mov	r2, r6
   16f94:	bl	16b88 <__assert_fail@plt+0x5750>
   16f98:	b	1713c <__assert_fail@plt+0x5d04>
   16f9c:	cmp	sl, #0
   16fa0:	ldr	r1, [r5]
   16fa4:	mov	r2, r9
   16fa8:	rsbmi	sl, sl, #0
   16fac:	cmp	r8, #0
   16fb0:	rsbmi	r8, r8, #0
   16fb4:	mov	r7, sl
   16fb8:	cmp	r8, sl
   16fbc:	mov	r0, r8
   16fc0:	movlt	r0, sl
   16fc4:	movlt	r2, r6
   16fc8:	movlt	r6, r9
   16fcc:	movlt	r7, r8
   16fd0:	cmp	r0, r1
   16fd4:	str	r0, [sp, #8]
   16fd8:	bge	16fe4 <__assert_fail@plt+0x5bac>
   16fdc:	ldr	r0, [r5, #8]
   16fe0:	b	17054 <__assert_fail@plt+0x5c1c>
   16fe4:	add	r4, r0, #1
   16fe8:	str	r2, [sp, #16]
   16fec:	cmp	r4, #1
   16ff0:	movls	r4, #1
   16ff4:	cmp	r1, #0
   16ff8:	beq	1701c <__assert_fail@plt+0x5be4>
   16ffc:	movw	r0, #37160	; 0x9128
   17000:	lsl	r1, r1, #2
   17004:	lsl	r2, r4, #2
   17008:	movt	r0, #4
   1700c:	ldr	r3, [r0]
   17010:	ldr	r0, [r5, #8]
   17014:	blx	r3
   17018:	b	17030 <__assert_fail@plt+0x5bf8>
   1701c:	movw	r0, #37156	; 0x9124
   17020:	movt	r0, #4
   17024:	ldr	r1, [r0]
   17028:	lsl	r0, r4, #2
   1702c:	blx	r1
   17030:	str	r0, [r5, #8]
   17034:	str	r4, [r5]
   17038:	ldr	r1, [r5, #4]
   1703c:	ldr	r2, [sp, #16]
   17040:	cmp	r1, #0
   17044:	rsbmi	r1, r1, #0
   17048:	cmp	r1, r4
   1704c:	movgt	r1, #0
   17050:	strgt	r1, [r5, #4]
   17054:	ldr	r2, [r2, #8]
   17058:	cmp	r7, #1
   1705c:	str	r5, [sp, #12]
   17060:	str	r0, [sp, #16]
   17064:	stm	sp, {r2, r7}
   17068:	blt	170ac <__assert_fail@plt+0x5c74>
   1706c:	ldr	r3, [r6, #8]
   17070:	mov	lr, #0
   17074:	mov	r5, r0
   17078:	mov	r4, r7
   1707c:	mov	r1, #0
   17080:	ldr	r6, [r2], #4
   17084:	ldr	r7, [r3], #4
   17088:	adds	ip, r6, r1
   1708c:	adds	r7, ip, r7
   17090:	adc	r0, lr, #0
   17094:	adds	r1, r6, r1
   17098:	str	r7, [r5], #4
   1709c:	adc	r1, r0, #0
   170a0:	subs	r4, r4, #1
   170a4:	bne	17080 <__assert_fail@plt+0x5c48>
   170a8:	b	170b0 <__assert_fail@plt+0x5c78>
   170ac:	mov	r1, #0
   170b0:	ldmib	sp, {r3, r6}
   170b4:	cmp	r6, r3
   170b8:	ble	1712c <__assert_fail@plt+0x5cf4>
   170bc:	sub	r0, r6, r3
   170c0:	cmp	r0, #1
   170c4:	blt	17154 <__assert_fail@plt+0x5d1c>
   170c8:	ldr	r0, [sp]
   170cc:	mvn	r7, sl
   170d0:	mov	ip, r6
   170d4:	add	r2, r0, r3, lsl #2
   170d8:	ldr	r0, [sp, #16]
   170dc:	add	r3, r0, r3, lsl #2
   170e0:	mvn	r0, r8
   170e4:	cmp	r0, r7
   170e8:	movgt	r7, r0
   170ec:	add	r0, r6, r7
   170f0:	mov	r6, #0
   170f4:	add	r7, r0, #1
   170f8:	ldr	r0, [r2], #4
   170fc:	mov	r5, r1
   17100:	adds	r4, r0, r1
   17104:	adc	r1, r6, #0
   17108:	str	r4, [r3], #4
   1710c:	subs	r7, r7, #1
   17110:	bne	170f8 <__assert_fail@plt+0x5cc0>
   17114:	cmp	r4, r5
   17118:	ldr	r5, [sp, #12]
   1711c:	mov	r1, #0
   17120:	mov	r6, ip
   17124:	movwcc	r1, #1
   17128:	b	17130 <__assert_fail@plt+0x5cf8>
   1712c:	ldr	r5, [sp, #12]
   17130:	ldr	r0, [sp, #16]
   17134:	str	r1, [r0, r6, lsl #2]
   17138:	add	r0, r1, r6
   1713c:	ldr	r1, [r9, #4]
   17140:	cmn	r1, #1
   17144:	rsble	r0, r0, #0
   17148:	str	r0, [r5, #4]
   1714c:	sub	sp, fp, #28
   17150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17154:	movw	r0, #29650	; 0x73d2
   17158:	movw	r1, #26324	; 0x66d4
   1715c:	movw	r3, #26341	; 0x66e5
   17160:	movw	r2, #442	; 0x1ba
   17164:	movt	r0, #3
   17168:	movt	r1, #3
   1716c:	movt	r3, #3
   17170:	bl	11438 <__assert_fail@plt>
   17174:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17178:	add	fp, sp, #24
   1717c:	sub	sp, sp, #16
   17180:	mov	r6, r2
   17184:	mov	r5, r1
   17188:	mov	r4, r0
   1718c:	cmn	r2, #1
   17190:	ble	17210 <__assert_fail@plt+0x5dd8>
   17194:	movw	r1, #26320	; 0x66d0
   17198:	mov	r0, #0
   1719c:	cmp	r6, #0
   171a0:	movt	r1, #3
   171a4:	str	r0, [sp, #8]
   171a8:	str	r0, [sp, #4]
   171ac:	str	r1, [sp, #12]
   171b0:	beq	1727c <__assert_fail@plt+0x5e44>
   171b4:	movw	r0, #37156	; 0x9124
   171b8:	mov	r8, #1
   171bc:	movt	r0, #4
   171c0:	str	r8, [sp, #8]
   171c4:	ldr	r1, [r0]
   171c8:	mov	r0, #4
   171cc:	blx	r1
   171d0:	str	r8, [sp, #4]
   171d4:	str	r0, [sp, #12]
   171d8:	mov	r7, r0
   171dc:	str	r6, [r0]
   171e0:	add	r2, sp, #4
   171e4:	mov	r0, r4
   171e8:	mov	r1, r5
   171ec:	bl	17348 <__assert_fail@plt+0x5f10>
   171f0:	movw	r0, #37164	; 0x912c
   171f4:	mov	r1, #4
   171f8:	movt	r0, #4
   171fc:	ldr	r2, [r0]
   17200:	mov	r0, r7
   17204:	blx	r2
   17208:	sub	sp, fp, #24
   1720c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17210:	movw	r0, #37156	; 0x9124
   17214:	mov	r8, #1
   17218:	movt	r0, #4
   1721c:	str	r8, [sp, #8]
   17220:	ldr	r1, [r0]
   17224:	mov	r0, #4
   17228:	blx	r1
   1722c:	str	r8, [sp, #4]
   17230:	mov	r7, r0
   17234:	str	r0, [sp, #12]
   17238:	rsb	r0, r6, #0
   1723c:	add	r2, sp, #4
   17240:	mov	r1, r5
   17244:	str	r0, [r7]
   17248:	mov	r0, r4
   1724c:	bl	17348 <__assert_fail@plt+0x5f10>
   17250:	movw	r0, #37164	; 0x912c
   17254:	mov	r1, #4
   17258:	movt	r0, #4
   1725c:	ldr	r2, [r0]
   17260:	mov	r0, r7
   17264:	blx	r2
   17268:	ldr	r0, [r4, #4]
   1726c:	rsb	r0, r0, #0
   17270:	str	r0, [r4, #4]
   17274:	sub	sp, fp, #24
   17278:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1727c:	str	r0, [sp, #8]
   17280:	add	r2, sp, #4
   17284:	mov	r0, r4
   17288:	mov	r1, r5
   1728c:	bl	17348 <__assert_fail@plt+0x5f10>
   17290:	sub	sp, fp, #24
   17294:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17298:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1729c:	add	fp, sp, #24
   172a0:	sub	sp, sp, #16
   172a4:	mov	r4, r1
   172a8:	movw	r1, #26320	; 0x66d0
   172ac:	mov	r5, r0
   172b0:	mov	r0, #0
   172b4:	cmp	r2, #0
   172b8:	movt	r1, #3
   172bc:	str	r0, [sp, #8]
   172c0:	str	r0, [sp, #4]
   172c4:	str	r1, [sp, #12]
   172c8:	beq	1732c <__assert_fail@plt+0x5ef4>
   172cc:	movw	r0, #37156	; 0x9124
   172d0:	mov	r8, #1
   172d4:	mov	r6, r2
   172d8:	movt	r0, #4
   172dc:	str	r8, [sp, #8]
   172e0:	ldr	r1, [r0]
   172e4:	mov	r0, #4
   172e8:	blx	r1
   172ec:	str	r8, [sp, #4]
   172f0:	str	r0, [sp, #12]
   172f4:	mov	r7, r0
   172f8:	str	r6, [r0]
   172fc:	add	r2, sp, #4
   17300:	mov	r0, r5
   17304:	mov	r1, r4
   17308:	bl	17348 <__assert_fail@plt+0x5f10>
   1730c:	movw	r0, #37164	; 0x912c
   17310:	mov	r1, #4
   17314:	movt	r0, #4
   17318:	ldr	r2, [r0]
   1731c:	mov	r0, r7
   17320:	blx	r2
   17324:	sub	sp, fp, #24
   17328:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1732c:	str	r0, [sp, #8]
   17330:	add	r2, sp, #4
   17334:	mov	r0, r5
   17338:	mov	r1, r4
   1733c:	bl	17348 <__assert_fail@plt+0x5f10>
   17340:	sub	sp, fp, #24
   17344:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1734c:	add	fp, sp, #28
   17350:	sub	sp, sp, #12
   17354:	ldr	sl, [r1, #4]
   17358:	mov	r4, r0
   1735c:	cmp	sl, #0
   17360:	ldrne	r5, [r2, #4]
   17364:	cmpne	r5, #0
   17368:	bne	1737c <__assert_fail@plt+0x5f44>
   1736c:	mov	r0, #0
   17370:	str	r0, [r4, #4]
   17374:	sub	sp, fp, #28
   17378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1737c:	cmp	sl, #0
   17380:	mov	r8, sl
   17384:	mov	r9, r5
   17388:	str	r2, [sp, #8]
   1738c:	mov	r2, #0
   17390:	mov	r6, r1
   17394:	mvn	r0, #0
   17398:	rsbmi	r8, sl, #0
   1739c:	cmp	r5, #0
   173a0:	rsbmi	r9, r5, #0
   173a4:	add	r7, r9, r8
   173a8:	lsl	r1, r7, #5
   173ac:	cmp	r2, r7, lsl #5
   173b0:	addne	r1, r0, r7, lsl #5
   173b4:	mov	r0, #1
   173b8:	add	r2, r0, r1, lsr #5
   173bc:	movw	r0, #37156	; 0x9124
   173c0:	movt	r0, #4
   173c4:	str	r2, [sp, #4]
   173c8:	ldr	r1, [r0]
   173cc:	lsl	r0, r2, #2
   173d0:	blx	r1
   173d4:	mov	r2, r0
   173d8:	eor	r5, r5, sl
   173dc:	cmp	r8, r9
   173e0:	bge	17404 <__assert_fail@plt+0x5fcc>
   173e4:	ldr	r0, [sp, #8]
   173e8:	ldr	r3, [r6, #8]
   173ec:	mov	r6, r2
   173f0:	ldr	r1, [r0, #8]
   173f4:	mov	r0, r2
   173f8:	mov	r2, r9
   173fc:	str	r8, [sp]
   17400:	b	17420 <__assert_fail@plt+0x5fe8>
   17404:	ldr	r0, [sp, #8]
   17408:	ldr	r1, [r6, #8]
   1740c:	mov	r6, r2
   17410:	ldr	r3, [r0, #8]
   17414:	mov	r0, r2
   17418:	str	r9, [sp]
   1741c:	mov	r2, r8
   17420:	bl	14090 <__assert_fail@plt+0x2c58>
   17424:	sub	r2, r7, #1
   17428:	ldr	r1, [r4]
   1742c:	ldr	r0, [r4, #8]
   17430:	ldr	r3, [r6, r2, lsl #2]
   17434:	cmp	r3, #0
   17438:	moveq	r7, r2
   1743c:	ldr	r2, [sp, #4]
   17440:	cmp	r5, #0
   17444:	rsblt	r7, r7, #0
   17448:	cmp	r1, #0
   1744c:	stm	r4, {r2, r7}
   17450:	str	r6, [r4, #8]
   17454:	beq	17374 <__assert_fail@plt+0x5f3c>
   17458:	movw	r2, #37164	; 0x912c
   1745c:	lsl	r1, r1, #2
   17460:	movt	r2, #4
   17464:	ldr	r2, [r2]
   17468:	sub	sp, fp, #28
   1746c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17470:	bx	r2
   17474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17478:	add	fp, sp, #28
   1747c:	sub	sp, sp, #4
   17480:	ldr	r5, [r1, #4]
   17484:	mov	r6, r1
   17488:	mov	sl, r0
   1748c:	cmp	r5, #0
   17490:	rsbmi	r5, r5, #0
   17494:	cmp	r5, #0
   17498:	beq	174f0 <__assert_fail@plt+0x60b8>
   1749c:	lsr	r9, r2, #5
   174a0:	ldr	r1, [sl]
   174a4:	mov	r4, #1
   174a8:	ands	r7, r2, #31
   174ac:	mov	r0, r9
   174b0:	addne	r0, r4, r2, lsr #5
   174b4:	add	r8, r0, r5
   174b8:	cmp	r8, r1
   174bc:	ble	174f8 <__assert_fail@plt+0x60c0>
   174c0:	cmp	r8, #1
   174c4:	movhi	r4, r8
   174c8:	cmp	r1, #0
   174cc:	beq	17500 <__assert_fail@plt+0x60c8>
   174d0:	movw	r0, #37160	; 0x9128
   174d4:	lsl	r1, r1, #2
   174d8:	lsl	r2, r4, #2
   174dc:	movt	r0, #4
   174e0:	ldr	r3, [r0]
   174e4:	ldr	r0, [sl, #8]
   174e8:	blx	r3
   174ec:	b	17514 <__assert_fail@plt+0x60dc>
   174f0:	mov	r8, #0
   174f4:	b	17654 <__assert_fail@plt+0x621c>
   174f8:	ldr	r0, [sl, #8]
   174fc:	b	17534 <__assert_fail@plt+0x60fc>
   17500:	movw	r0, #37156	; 0x9124
   17504:	movt	r0, #4
   17508:	ldr	r1, [r0]
   1750c:	lsl	r0, r4, #2
   17510:	blx	r1
   17514:	str	r0, [sl, #8]
   17518:	str	r4, [sl]
   1751c:	ldr	r1, [sl, #4]
   17520:	cmp	r1, #0
   17524:	rsbmi	r1, r1, #0
   17528:	cmp	r1, r4
   1752c:	movgt	r1, #0
   17530:	strgt	r1, [sl, #4]
   17534:	ldr	ip, [r6, #8]
   17538:	cmp	r7, #0
   1753c:	beq	175b4 <__assert_fail@plt+0x617c>
   17540:	cmp	r5, #0
   17544:	ble	17660 <__assert_fail@plt+0x6228>
   17548:	add	r1, ip, r5, lsl #2
   1754c:	rsb	r4, r7, #32
   17550:	cmp	r5, #1
   17554:	str	r6, [sp]
   17558:	ldr	r1, [r1, #-4]
   1755c:	lsl	r3, r1, r7
   17560:	lsr	lr, r1, r4
   17564:	beq	17590 <__assert_fail@plt+0x6158>
   17568:	add	r1, r0, r9, lsl #2
   1756c:	sub	r2, ip, #8
   17570:	sub	r1, r1, #4
   17574:	ldr	r6, [r2, r5, lsl #2]
   17578:	orr	r3, r3, r6, lsr r4
   1757c:	str	r3, [r1, r5, lsl #2]
   17580:	sub	r5, r5, #1
   17584:	lsl	r3, r6, r7
   17588:	cmp	r5, #1
   1758c:	bne	17574 <__assert_fail@plt+0x613c>
   17590:	ldr	r6, [sp]
   17594:	sub	r1, r8, #1
   17598:	cmp	lr, #0
   1759c:	str	r3, [r0, r9, lsl #2]
   175a0:	str	lr, [r0, r1, lsl #2]
   175a4:	moveq	r8, r1
   175a8:	cmp	r9, #0
   175ac:	bne	1763c <__assert_fail@plt+0x6204>
   175b0:	b	17648 <__assert_fail@plt+0x6210>
   175b4:	cmp	r5, #1
   175b8:	blt	17634 <__assert_fail@plt+0x61fc>
   175bc:	cmp	r5, #4
   175c0:	bcc	17614 <__assert_fail@plt+0x61dc>
   175c4:	add	r1, r5, r9
   175c8:	add	r3, ip, r5, lsl #2
   175cc:	add	r2, r0, r9, lsl #2
   175d0:	add	r1, r0, r1, lsl #2
   175d4:	cmp	r2, r3
   175d8:	cmpcc	ip, r1
   175dc:	bcc	17614 <__assert_fail@plt+0x61dc>
   175e0:	bic	lr, r5, #-2147483645	; 0x80000003
   175e4:	sub	r7, r3, #16
   175e8:	sub	r1, r1, #16
   175ec:	mvn	r4, #15
   175f0:	sub	r2, r5, lr
   175f4:	mov	r3, lr
   175f8:	vld1.32	{d16-d17}, [r7], r4
   175fc:	subs	r3, r3, #4
   17600:	vst1.32	{d16-d17}, [r1], r4
   17604:	bne	175f8 <__assert_fail@plt+0x61c0>
   17608:	cmp	r5, lr
   1760c:	bne	17618 <__assert_fail@plt+0x61e0>
   17610:	b	17634 <__assert_fail@plt+0x61fc>
   17614:	mov	r2, r5
   17618:	add	r1, r0, r9, lsl #2
   1761c:	sub	r3, ip, #4
   17620:	sub	r1, r1, #4
   17624:	ldr	r7, [r3, r2, lsl #2]
   17628:	str	r7, [r1, r2, lsl #2]
   1762c:	subs	r2, r2, #1
   17630:	bgt	17624 <__assert_fail@plt+0x61ec>
   17634:	cmp	r9, #0
   17638:	beq	17648 <__assert_fail@plt+0x6210>
   1763c:	lsl	r2, r9, #2
   17640:	mov	r1, #0
   17644:	bl	1136c <memset@plt>
   17648:	ldr	r0, [r6, #4]
   1764c:	cmp	r0, #0
   17650:	rsblt	r8, r8, #0
   17654:	str	r8, [sl, #4]
   17658:	sub	sp, fp, #28
   1765c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17660:	movw	r0, #26881	; 0x6901
   17664:	movw	r1, #26324	; 0x66d4
   17668:	movw	r3, #26968	; 0x6958
   1766c:	movw	r2, #659	; 0x293
   17670:	movt	r0, #3
   17674:	movt	r1, #3
   17678:	movt	r3, #3
   1767c:	bl	11438 <__assert_fail@plt>
   17680:	push	{r4, r5, r6, r7, fp, lr}
   17684:	add	fp, sp, #16
   17688:	sub	sp, sp, #16
   1768c:	mov	r5, r1
   17690:	movw	r1, #26320	; 0x66d0
   17694:	mov	r4, r0
   17698:	mov	r0, #0
   1769c:	cmp	r2, #0
   176a0:	movt	r1, #3
   176a4:	str	r0, [sp, #8]
   176a8:	str	r0, [sp, #4]
   176ac:	str	r1, [sp, #12]
   176b0:	beq	176e4 <__assert_fail@plt+0x62ac>
   176b4:	movw	r0, #37156	; 0x9124
   176b8:	mov	r7, #1
   176bc:	mov	r6, r2
   176c0:	movt	r0, #4
   176c4:	str	r7, [sp, #8]
   176c8:	ldr	r1, [r0]
   176cc:	mov	r0, #4
   176d0:	blx	r1
   176d4:	str	r7, [sp, #4]
   176d8:	str	r0, [sp, #12]
   176dc:	str	r6, [r0]
   176e0:	b	176e8 <__assert_fail@plt+0x62b0>
   176e4:	str	r0, [sp, #8]
   176e8:	add	r6, sp, #4
   176ec:	mov	r1, r5
   176f0:	mov	r0, r6
   176f4:	mov	r2, r6
   176f8:	bl	17348 <__assert_fail@plt+0x5f10>
   176fc:	mov	r0, r4
   17700:	mov	r1, r4
   17704:	mov	r2, r6
   17708:	bl	16780 <__assert_fail@plt+0x5348>
   1770c:	ldr	r0, [sp, #4]
   17710:	cmp	r0, #0
   17714:	beq	17730 <__assert_fail@plt+0x62f8>
   17718:	movw	r1, #37164	; 0x912c
   1771c:	movt	r1, #4
   17720:	ldr	r2, [r1]
   17724:	lsl	r1, r0, #2
   17728:	ldr	r0, [sp, #12]
   1772c:	blx	r2
   17730:	sub	sp, fp, #16
   17734:	pop	{r4, r5, r6, r7, fp, pc}
   17738:	push	{r4, r5, r6, r7, fp, lr}
   1773c:	add	fp, sp, #16
   17740:	sub	sp, sp, #16
   17744:	mov	r5, r1
   17748:	movw	r1, #26320	; 0x66d0
   1774c:	mov	r4, r0
   17750:	mov	r0, #0
   17754:	cmp	r2, #0
   17758:	movt	r1, #3
   1775c:	str	r0, [sp, #8]
   17760:	str	r0, [sp, #4]
   17764:	str	r1, [sp, #12]
   17768:	beq	1779c <__assert_fail@plt+0x6364>
   1776c:	movw	r0, #37156	; 0x9124
   17770:	mov	r7, #1
   17774:	mov	r6, r2
   17778:	movt	r0, #4
   1777c:	str	r7, [sp, #8]
   17780:	ldr	r1, [r0]
   17784:	mov	r0, #4
   17788:	blx	r1
   1778c:	str	r7, [sp, #4]
   17790:	str	r0, [sp, #12]
   17794:	str	r6, [r0]
   17798:	b	177a0 <__assert_fail@plt+0x6368>
   1779c:	str	r0, [sp, #8]
   177a0:	add	r6, sp, #4
   177a4:	mov	r1, r5
   177a8:	mov	r0, r6
   177ac:	mov	r2, r6
   177b0:	bl	17348 <__assert_fail@plt+0x5f10>
   177b4:	mov	r0, r4
   177b8:	mov	r1, r4
   177bc:	mov	r2, r6
   177c0:	bl	16f5c <__assert_fail@plt+0x5b24>
   177c4:	ldr	r0, [sp, #4]
   177c8:	cmp	r0, #0
   177cc:	beq	177e8 <__assert_fail@plt+0x63b0>
   177d0:	movw	r1, #37164	; 0x912c
   177d4:	movt	r1, #4
   177d8:	ldr	r2, [r1]
   177dc:	lsl	r1, r0, #2
   177e0:	ldr	r0, [sp, #12]
   177e4:	blx	r2
   177e8:	sub	sp, fp, #16
   177ec:	pop	{r4, r5, r6, r7, fp, pc}
   177f0:	push	{r4, r5, fp, lr}
   177f4:	add	fp, sp, #8
   177f8:	sub	sp, sp, #16
   177fc:	mov	r4, r0
   17800:	mov	r0, #0
   17804:	add	r5, sp, #4
   17808:	str	r0, [sp, #8]
   1780c:	str	r0, [sp, #4]
   17810:	movw	r0, #26320	; 0x66d0
   17814:	movt	r0, #3
   17818:	str	r0, [sp, #12]
   1781c:	mov	r0, r5
   17820:	bl	17348 <__assert_fail@plt+0x5f10>
   17824:	mov	r0, r4
   17828:	mov	r1, r4
   1782c:	mov	r2, r5
   17830:	bl	16780 <__assert_fail@plt+0x5348>
   17834:	ldr	r0, [sp, #4]
   17838:	cmp	r0, #0
   1783c:	beq	17858 <__assert_fail@plt+0x6420>
   17840:	movw	r1, #37164	; 0x912c
   17844:	movt	r1, #4
   17848:	ldr	r2, [r1]
   1784c:	lsl	r1, r0, #2
   17850:	ldr	r0, [sp, #12]
   17854:	blx	r2
   17858:	sub	sp, fp, #8
   1785c:	pop	{r4, r5, fp, pc}
   17860:	push	{r4, r5, fp, lr}
   17864:	add	fp, sp, #8
   17868:	sub	sp, sp, #16
   1786c:	mov	r4, r0
   17870:	mov	r0, #0
   17874:	add	r5, sp, #4
   17878:	str	r0, [sp, #8]
   1787c:	str	r0, [sp, #4]
   17880:	movw	r0, #26320	; 0x66d0
   17884:	movt	r0, #3
   17888:	str	r0, [sp, #12]
   1788c:	mov	r0, r5
   17890:	bl	17348 <__assert_fail@plt+0x5f10>
   17894:	mov	r0, r4
   17898:	mov	r1, r4
   1789c:	mov	r2, r5
   178a0:	bl	16f5c <__assert_fail@plt+0x5b24>
   178a4:	ldr	r0, [sp, #4]
   178a8:	cmp	r0, #0
   178ac:	beq	178c8 <__assert_fail@plt+0x6490>
   178b0:	movw	r1, #37164	; 0x912c
   178b4:	movt	r1, #4
   178b8:	ldr	r2, [r1]
   178bc:	lsl	r1, r0, #2
   178c0:	ldr	r0, [sp, #12]
   178c4:	blx	r2
   178c8:	sub	sp, fp, #8
   178cc:	pop	{r4, r5, fp, pc}
   178d0:	push	{fp, lr}
   178d4:	mov	fp, sp
   178d8:	sub	sp, sp, #8
   178dc:	mov	ip, #1
   178e0:	str	ip, [sp]
   178e4:	bl	178f0 <__assert_fail@plt+0x64b8>
   178e8:	mov	sp, fp
   178ec:	pop	{fp, pc}
   178f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178f4:	add	fp, sp, #28
   178f8:	sub	sp, sp, #84	; 0x54
   178fc:	mov	r6, r0
   17900:	ldr	r0, [r3, #4]
   17904:	cmp	r0, #0
   17908:	beq	1805c <__assert_fail@plt+0x6c24>
   1790c:	ldr	r7, [r2, #4]
   17910:	mov	r9, r2
   17914:	mov	r8, r1
   17918:	cmp	r7, #0
   1791c:	beq	17984 <__assert_fail@plt+0x654c>
   17920:	cmp	r0, #0
   17924:	mov	sl, r0
   17928:	ldr	r2, [fp, #8]
   1792c:	mov	r4, r7
   17930:	mov	r5, r3
   17934:	eor	r1, r0, r7
   17938:	rsbmi	sl, r0, #0
   1793c:	cmp	r7, #0
   17940:	rsbmi	r4, r7, #0
   17944:	cmp	r4, sl
   17948:	bge	179a0 <__assert_fail@plt+0x6568>
   1794c:	cmp	r2, #1
   17950:	bne	17a88 <__assert_fail@plt+0x6650>
   17954:	cmp	r1, #0
   17958:	blt	17a88 <__assert_fail@plt+0x6650>
   1795c:	cmp	r8, #0
   17960:	beq	17974 <__assert_fail@plt+0x653c>
   17964:	mov	r0, r8
   17968:	mov	r1, r9
   1796c:	mov	r2, r5
   17970:	bl	16f5c <__assert_fail@plt+0x5b24>
   17974:	cmp	r6, #0
   17978:	beq	17ad4 <__assert_fail@plt+0x669c>
   1797c:	mov	r0, #1
   17980:	b	17abc <__assert_fail@plt+0x6684>
   17984:	cmp	r6, #0
   17988:	mov	r5, #0
   1798c:	movne	r0, #0
   17990:	strne	r0, [r6, #4]
   17994:	cmp	r8, #0
   17998:	strne	r5, [r8, #4]
   1799c:	b	18050 <__assert_fail@plt+0x6c18>
   179a0:	mov	r2, #0
   179a4:	mov	r0, #0
   179a8:	str	r6, [sp, #40]	; 0x28
   179ac:	str	r1, [sp, #16]
   179b0:	str	r2, [sp, #48]	; 0x30
   179b4:	str	r0, [sp, #32]
   179b8:	movw	r0, #26320	; 0x66d0
   179bc:	str	r2, [sp, #44]	; 0x2c
   179c0:	add	r2, sp, #44	; 0x2c
   179c4:	movt	r0, #3
   179c8:	cmp	r2, r9
   179cc:	str	r0, [sp, #52]	; 0x34
   179d0:	beq	17b38 <__assert_fail@plt+0x6700>
   179d4:	cmp	r4, #1
   179d8:	blt	17b28 <__assert_fail@plt+0x66f0>
   179dc:	movw	r0, #37156	; 0x9124
   179e0:	movt	r0, #4
   179e4:	ldr	r1, [r0]
   179e8:	lsl	r0, r4, #2
   179ec:	blx	r1
   179f0:	str	r0, [sp, #52]	; 0x34
   179f4:	str	r4, [sp, #44]	; 0x2c
   179f8:	mov	lr, #0
   179fc:	ldr	r1, [sp, #48]	; 0x30
   17a00:	cmp	r1, #0
   17a04:	rsbmi	r1, r1, #0
   17a08:	cmp	r1, r4
   17a0c:	movgt	r1, #0
   17a10:	strgt	r1, [sp, #48]	; 0x30
   17a14:	cmp	r4, #4
   17a18:	ldr	ip, [r9, #8]
   17a1c:	bcc	17a60 <__assert_fail@plt+0x6628>
   17a20:	add	r1, ip, r4, lsl #2
   17a24:	cmp	r0, r1
   17a28:	bcs	17a38 <__assert_fail@plt+0x6600>
   17a2c:	add	r1, r0, r4, lsl #2
   17a30:	cmp	r1, ip
   17a34:	bhi	17a60 <__assert_fail@plt+0x6628>
   17a38:	bic	lr, r4, #-2147483645	; 0x80000003
   17a3c:	mov	r3, r0
   17a40:	mov	r1, ip
   17a44:	mov	r2, lr
   17a48:	vld1.32	{d16-d17}, [r1]!
   17a4c:	subs	r2, r2, #4
   17a50:	vst1.32	{d16-d17}, [r3]!
   17a54:	bne	17a48 <__assert_fail@plt+0x6610>
   17a58:	cmp	r4, lr
   17a5c:	beq	17a7c <__assert_fail@plt+0x6644>
   17a60:	add	r6, ip, lr, lsl #2
   17a64:	add	r2, r0, lr, lsl #2
   17a68:	sub	r1, r4, lr
   17a6c:	ldr	r3, [r6], #4
   17a70:	subs	r1, r1, #1
   17a74:	str	r3, [r2], #4
   17a78:	bne	17a6c <__assert_fail@plt+0x6634>
   17a7c:	ldr	r2, [r9, #4]
   17a80:	ldr	r6, [sp, #40]	; 0x28
   17a84:	b	17b34 <__assert_fail@plt+0x66fc>
   17a88:	cmp	r2, #0
   17a8c:	bne	17adc <__assert_fail@plt+0x66a4>
   17a90:	cmn	r1, #1
   17a94:	bgt	17adc <__assert_fail@plt+0x66a4>
   17a98:	cmp	r8, #0
   17a9c:	beq	17ab0 <__assert_fail@plt+0x6678>
   17aa0:	mov	r0, r8
   17aa4:	mov	r1, r9
   17aa8:	mov	r2, r5
   17aac:	bl	16780 <__assert_fail@plt+0x5348>
   17ab0:	cmp	r6, #0
   17ab4:	beq	17ad4 <__assert_fail@plt+0x669c>
   17ab8:	mvn	r0, #0
   17abc:	str	r0, [r6, #4]
   17ac0:	ldr	r1, [r6]
   17ac4:	cmp	r1, #0
   17ac8:	ble	17f1c <__assert_fail@plt+0x6ae4>
   17acc:	ldr	r0, [r6, #8]
   17ad0:	b	17f78 <__assert_fail@plt+0x6b40>
   17ad4:	mov	r5, #1
   17ad8:	b	18050 <__assert_fail@plt+0x6c18>
   17adc:	cmp	r8, r9
   17ae0:	cmpne	r8, #0
   17ae4:	beq	18040 <__assert_fail@plt+0x6c08>
   17ae8:	ldr	r1, [r8]
   17aec:	cmp	r4, r1
   17af0:	ble	17f84 <__assert_fail@plt+0x6b4c>
   17af4:	cmp	r4, #1
   17af8:	mov	r7, r4
   17afc:	movle	r7, #1
   17b00:	cmp	r1, #0
   17b04:	beq	17f94 <__assert_fail@plt+0x6b5c>
   17b08:	movw	r0, #37160	; 0x9128
   17b0c:	lsl	r1, r1, #2
   17b10:	lsl	r2, r7, #2
   17b14:	movt	r0, #4
   17b18:	ldr	r3, [r0]
   17b1c:	ldr	r0, [r8, #8]
   17b20:	blx	r3
   17b24:	b	17fa8 <__assert_fail@plt+0x6b70>
   17b28:	movw	r0, #26320	; 0x66d0
   17b2c:	mov	r2, r7
   17b30:	movt	r0, #3
   17b34:	str	r2, [sp, #48]	; 0x30
   17b38:	sub	r1, r4, sl
   17b3c:	str	r8, [sp, #28]
   17b40:	cmp	r6, #0
   17b44:	str	r0, [sp, #36]	; 0x24
   17b48:	add	r8, r1, #1
   17b4c:	mov	r0, r1
   17b50:	str	r1, [sp, #12]
   17b54:	beq	17b98 <__assert_fail@plt+0x6760>
   17b58:	mov	r0, #0
   17b5c:	mvn	r1, #0
   17b60:	lsl	r2, r8, #5
   17b64:	cmp	r0, r8, lsl #5
   17b68:	str	r0, [sp, #60]	; 0x3c
   17b6c:	mov	r0, #1
   17b70:	addne	r2, r1, r8, lsl #5
   17b74:	movw	r1, #37156	; 0x9124
   17b78:	movt	r1, #4
   17b7c:	add	r0, r0, r2, lsr #5
   17b80:	ldr	r1, [r1]
   17b84:	str	r0, [sp, #56]	; 0x38
   17b88:	lsl	r0, r0, #2
   17b8c:	blx	r1
   17b90:	str	r0, [sp, #32]
   17b94:	str	r0, [sp, #64]	; 0x40
   17b98:	cmp	sl, #0
   17b9c:	str	r4, [sp, #20]
   17ba0:	ble	18068 <__assert_fail@plt+0x6c30>
   17ba4:	ldr	r9, [r5, #8]
   17ba8:	sub	r4, fp, #44	; 0x2c
   17bac:	mov	r2, sl
   17bb0:	str	r5, [sp, #24]
   17bb4:	mov	r0, r4
   17bb8:	mov	r1, r9
   17bbc:	bl	1b888 <__assert_fail@plt+0xa450>
   17bc0:	cmp	sl, #3
   17bc4:	blt	17c88 <__assert_fail@plt+0x6850>
   17bc8:	ldr	r6, [fp, #-44]	; 0xffffffd4
   17bcc:	cmp	r6, #0
   17bd0:	beq	17c88 <__assert_fail@plt+0x6850>
   17bd4:	movw	r0, #37156	; 0x9124
   17bd8:	movt	r0, #4
   17bdc:	ldr	r1, [r0]
   17be0:	lsl	r0, sl, #2
   17be4:	str	r0, [sp, #8]
   17be8:	blx	r1
   17bec:	cmp	r6, #32
   17bf0:	bcs	18088 <__assert_fail@plt+0x6c50>
   17bf4:	mov	lr, r0
   17bf8:	add	r0, r9, sl, lsl #2
   17bfc:	sub	r3, r9, #8
   17c00:	rsb	r1, r6, #32
   17c04:	mov	r4, sl
   17c08:	ldr	ip, [r0, #-4]
   17c0c:	sub	r0, lr, #4
   17c10:	lsl	r2, ip, r6
   17c14:	ldr	r5, [r3, r4, lsl #2]
   17c18:	orr	r2, r2, r5, lsr r1
   17c1c:	str	r2, [r0, r4, lsl #2]
   17c20:	sub	r4, r4, #1
   17c24:	lsl	r2, r5, r6
   17c28:	cmp	r4, #1
   17c2c:	bne	17c14 <__assert_fail@plt+0x67dc>
   17c30:	mov	r0, #0
   17c34:	ldr	r9, [sp, #24]
   17c38:	str	r2, [lr]
   17c3c:	cmp	r0, ip, lsr r1
   17c40:	ldr	r1, [sp, #36]	; 0x24
   17c44:	bne	180a8 <__assert_fail@plt+0x6c70>
   17c48:	ldr	r4, [sp, #32]
   17c4c:	ldr	r2, [sp, #20]
   17c50:	sub	r0, fp, #44	; 0x2c
   17c54:	mov	r3, lr
   17c58:	str	sl, [sp]
   17c5c:	mov	r5, lr
   17c60:	str	r0, [sp, #4]
   17c64:	mov	r0, r4
   17c68:	bl	1bb08 <__assert_fail@plt+0xa6d0>
   17c6c:	movw	r0, #37164	; 0x912c
   17c70:	ldr	r1, [sp, #8]
   17c74:	movt	r0, #4
   17c78:	ldr	r2, [r0]
   17c7c:	mov	r0, r5
   17c80:	blx	r2
   17c84:	b	17cac <__assert_fail@plt+0x6874>
   17c88:	str	r4, [sp, #4]
   17c8c:	ldr	r4, [sp, #32]
   17c90:	ldr	r1, [sp, #36]	; 0x24
   17c94:	ldr	r2, [sp, #20]
   17c98:	mov	r3, r9
   17c9c:	str	sl, [sp]
   17ca0:	mov	r0, r4
   17ca4:	bl	1bb08 <__assert_fail@plt+0xa6d0>
   17ca8:	ldr	r9, [sp, #24]
   17cac:	ldr	r3, [sp, #16]
   17cb0:	cmp	r4, #0
   17cb4:	beq	17cdc <__assert_fail@plt+0x68a4>
   17cb8:	ldr	r0, [sp, #12]
   17cbc:	ldr	r0, [r4, r0, lsl #2]
   17cc0:	cmp	r0, #0
   17cc4:	subeq	r8, r8, #1
   17cc8:	cmp	r3, #0
   17ccc:	rsblt	r8, r8, #0
   17cd0:	rsb	r0, r8, #0
   17cd4:	str	r8, [sp, #60]	; 0x3c
   17cd8:	b	17ce0 <__assert_fail@plt+0x68a8>
   17cdc:	mov	r0, #0
   17ce0:	ldr	r1, [sp, #36]	; 0x24
   17ce4:	ldr	r6, [sp, #28]
   17ce8:	sub	r1, r1, #4
   17cec:	mov	r5, sl
   17cf0:	cmp	sl, #1
   17cf4:	blt	17d08 <__assert_fail@plt+0x68d0>
   17cf8:	ldr	r2, [r1, r5, lsl #2]
   17cfc:	sub	sl, r5, #1
   17d00:	cmp	r2, #0
   17d04:	beq	17cec <__assert_fail@plt+0x68b4>
   17d08:	cmp	r7, #0
   17d0c:	mov	r1, r5
   17d10:	rsblt	r1, r1, #0
   17d14:	str	r1, [sp, #48]	; 0x30
   17d18:	ldr	r1, [fp, #8]
   17d1c:	cmp	r1, #0
   17d20:	bne	17dc0 <__assert_fail@plt+0x6988>
   17d24:	cmn	r3, #1
   17d28:	bgt	17dc0 <__assert_fail@plt+0x6988>
   17d2c:	cmp	r5, #0
   17d30:	beq	17dc0 <__assert_fail@plt+0x6988>
   17d34:	ldr	r8, [sp, #40]	; 0x28
   17d38:	cmp	r8, #0
   17d3c:	beq	17da4 <__assert_fail@plt+0x696c>
   17d40:	str	r0, [sp, #60]	; 0x3c
   17d44:	movw	r0, #37156	; 0x9124
   17d48:	mov	r7, #1
   17d4c:	movt	r0, #4
   17d50:	str	r7, [fp, #-40]	; 0xffffffd8
   17d54:	ldr	r1, [r0]
   17d58:	mov	r0, #4
   17d5c:	blx	r1
   17d60:	str	r7, [fp, #-44]	; 0xffffffd4
   17d64:	str	r0, [fp, #-36]	; 0xffffffdc
   17d68:	mov	r4, r0
   17d6c:	str	r7, [r0]
   17d70:	add	r0, sp, #56	; 0x38
   17d74:	sub	r2, fp, #44	; 0x2c
   17d78:	mov	r1, r0
   17d7c:	bl	16780 <__assert_fail@plt+0x5348>
   17d80:	movw	r0, #37164	; 0x912c
   17d84:	mov	r1, #4
   17d88:	movt	r0, #4
   17d8c:	ldr	r2, [r0]
   17d90:	mov	r0, r4
   17d94:	blx	r2
   17d98:	ldr	r0, [sp, #60]	; 0x3c
   17d9c:	rsb	r0, r0, #0
   17da0:	str	r0, [sp, #60]	; 0x3c
   17da4:	cmp	r6, #0
   17da8:	beq	17e50 <__assert_fail@plt+0x6a18>
   17dac:	add	r0, sp, #44	; 0x2c
   17db0:	mov	r2, r9
   17db4:	mov	r1, r0
   17db8:	bl	16780 <__assert_fail@plt+0x5348>
   17dbc:	b	17e50 <__assert_fail@plt+0x6a18>
   17dc0:	cmp	r1, #1
   17dc4:	bne	17e50 <__assert_fail@plt+0x6a18>
   17dc8:	cmp	r3, #0
   17dcc:	blt	17e50 <__assert_fail@plt+0x6a18>
   17dd0:	cmp	r5, #0
   17dd4:	beq	17e50 <__assert_fail@plt+0x6a18>
   17dd8:	ldr	r8, [sp, #40]	; 0x28
   17ddc:	cmp	r8, #0
   17de0:	beq	17e38 <__assert_fail@plt+0x6a00>
   17de4:	movw	r0, #37156	; 0x9124
   17de8:	mov	r7, #1
   17dec:	movt	r0, #4
   17df0:	str	r7, [fp, #-40]	; 0xffffffd8
   17df4:	ldr	r1, [r0]
   17df8:	mov	r0, #4
   17dfc:	blx	r1
   17e00:	str	r7, [fp, #-44]	; 0xffffffd4
   17e04:	str	r0, [fp, #-36]	; 0xffffffdc
   17e08:	mov	r4, r0
   17e0c:	str	r7, [r0]
   17e10:	add	r0, sp, #56	; 0x38
   17e14:	sub	r2, fp, #44	; 0x2c
   17e18:	mov	r1, r0
   17e1c:	bl	16780 <__assert_fail@plt+0x5348>
   17e20:	movw	r0, #37164	; 0x912c
   17e24:	mov	r1, #4
   17e28:	movt	r0, #4
   17e2c:	ldr	r2, [r0]
   17e30:	mov	r0, r4
   17e34:	blx	r2
   17e38:	cmp	r6, #0
   17e3c:	beq	17e50 <__assert_fail@plt+0x6a18>
   17e40:	add	r0, sp, #44	; 0x2c
   17e44:	mov	r2, r9
   17e48:	mov	r1, r0
   17e4c:	bl	16f5c <__assert_fail@plt+0x5b24>
   17e50:	ldr	r3, [sp, #40]	; 0x28
   17e54:	cmp	r3, #0
   17e58:	beq	17ea8 <__assert_fail@plt+0x6a70>
   17e5c:	ldr	r0, [r3, #4]
   17e60:	ldr	r1, [sp, #60]	; 0x3c
   17e64:	str	r0, [sp, #60]	; 0x3c
   17e68:	str	r1, [r3, #4]
   17e6c:	ldr	r1, [r3]
   17e70:	ldr	r0, [sp, #56]	; 0x38
   17e74:	str	r1, [sp, #56]	; 0x38
   17e78:	str	r0, [r3]
   17e7c:	cmp	r1, #0
   17e80:	ldr	r0, [r3, #8]
   17e84:	ldr	r2, [sp, #64]	; 0x40
   17e88:	str	r0, [sp, #64]	; 0x40
   17e8c:	str	r2, [r3, #8]
   17e90:	beq	17ea8 <__assert_fail@plt+0x6a70>
   17e94:	movw	r2, #37164	; 0x912c
   17e98:	lsl	r1, r1, #2
   17e9c:	movt	r2, #4
   17ea0:	ldr	r2, [r2]
   17ea4:	blx	r2
   17ea8:	cmp	r6, #0
   17eac:	beq	17f0c <__assert_fail@plt+0x6ad4>
   17eb0:	ldr	r0, [r6, #4]
   17eb4:	ldr	r1, [sp, #48]	; 0x30
   17eb8:	str	r0, [sp, #48]	; 0x30
   17ebc:	str	r1, [r6, #4]
   17ec0:	ldr	r0, [r6]
   17ec4:	ldr	r1, [sp, #44]	; 0x2c
   17ec8:	str	r0, [sp, #44]	; 0x2c
   17ecc:	str	r1, [r6]
   17ed0:	ldr	r1, [r6, #8]
   17ed4:	ldr	r2, [sp, #52]	; 0x34
   17ed8:	str	r1, [sp, #52]	; 0x34
   17edc:	str	r2, [r6, #8]
   17ee0:	cmp	r0, #0
   17ee4:	beq	17f00 <__assert_fail@plt+0x6ac8>
   17ee8:	movw	r1, #37164	; 0x912c
   17eec:	movt	r1, #4
   17ef0:	ldr	r2, [r1]
   17ef4:	lsl	r1, r0, #2
   17ef8:	ldr	r0, [sp, #52]	; 0x34
   17efc:	blx	r2
   17f00:	cmp	r5, #0
   17f04:	movwne	r5, #1
   17f08:	b	18050 <__assert_fail@plt+0x6c18>
   17f0c:	ldr	r0, [sp, #44]	; 0x2c
   17f10:	cmp	r0, #0
   17f14:	bne	17ee8 <__assert_fail@plt+0x6ab0>
   17f18:	b	17f00 <__assert_fail@plt+0x6ac8>
   17f1c:	beq	17f40 <__assert_fail@plt+0x6b08>
   17f20:	movw	r0, #37160	; 0x9128
   17f24:	lsl	r1, r1, #2
   17f28:	mov	r2, #4
   17f2c:	movt	r0, #4
   17f30:	ldr	r3, [r0]
   17f34:	ldr	r0, [r6, #8]
   17f38:	blx	r3
   17f3c:	b	17f54 <__assert_fail@plt+0x6b1c>
   17f40:	movw	r0, #37156	; 0x9124
   17f44:	movt	r0, #4
   17f48:	ldr	r1, [r0]
   17f4c:	mov	r0, #4
   17f50:	blx	r1
   17f54:	mov	r1, #1
   17f58:	str	r0, [r6, #8]
   17f5c:	str	r1, [r6]
   17f60:	ldr	r1, [r6, #4]
   17f64:	cmp	r1, #0
   17f68:	rsbmi	r1, r1, #0
   17f6c:	cmp	r1, #2
   17f70:	movge	r1, #0
   17f74:	strge	r1, [r6, #4]
   17f78:	mov	r5, #1
   17f7c:	str	r5, [r0]
   17f80:	b	18050 <__assert_fail@plt+0x6c18>
   17f84:	ldr	r0, [r8, #8]
   17f88:	cmp	r4, #1
   17f8c:	bge	17fd0 <__assert_fail@plt+0x6b98>
   17f90:	b	18038 <__assert_fail@plt+0x6c00>
   17f94:	movw	r0, #37156	; 0x9124
   17f98:	movt	r0, #4
   17f9c:	ldr	r1, [r0]
   17fa0:	lsl	r0, r7, #2
   17fa4:	blx	r1
   17fa8:	str	r0, [r8, #8]
   17fac:	str	r7, [r8]
   17fb0:	ldr	r1, [r8, #4]
   17fb4:	cmp	r1, #0
   17fb8:	rsbmi	r1, r1, #0
   17fbc:	cmp	r1, r7
   17fc0:	movgt	r1, #0
   17fc4:	strgt	r1, [r8, #4]
   17fc8:	cmp	r4, #1
   17fcc:	blt	18038 <__assert_fail@plt+0x6c00>
   17fd0:	ldr	r5, [r9, #8]
   17fd4:	mov	r2, #0
   17fd8:	cmp	r4, #4
   17fdc:	bcc	1801c <__assert_fail@plt+0x6be4>
   17fe0:	add	r1, r5, r4, lsl #2
   17fe4:	cmp	r0, r1
   17fe8:	addcc	r1, r0, r4, lsl #2
   17fec:	cmpcc	r5, r1
   17ff0:	bcc	1801c <__assert_fail@plt+0x6be4>
   17ff4:	bic	r2, r4, #-2147483645	; 0x80000003
   17ff8:	mov	r7, r0
   17ffc:	mov	r1, r5
   18000:	mov	r3, r2
   18004:	vld1.32	{d16-d17}, [r1]!
   18008:	subs	r3, r3, #4
   1800c:	vst1.32	{d16-d17}, [r7]!
   18010:	bne	18004 <__assert_fail@plt+0x6bcc>
   18014:	cmp	r4, r2
   18018:	beq	18038 <__assert_fail@plt+0x6c00>
   1801c:	add	r1, r5, r2, lsl #2
   18020:	add	r0, r0, r2, lsl #2
   18024:	sub	r2, r4, r2
   18028:	ldr	r3, [r1], #4
   1802c:	subs	r2, r2, #1
   18030:	str	r3, [r0], #4
   18034:	bne	18028 <__assert_fail@plt+0x6bf0>
   18038:	ldr	r0, [r9, #4]
   1803c:	str	r0, [r8, #4]
   18040:	cmp	r6, #0
   18044:	mov	r5, #1
   18048:	movne	r0, #0
   1804c:	strne	r0, [r6, #4]
   18050:	mov	r0, r5
   18054:	sub	sp, fp, #28
   18058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1805c:	movw	r0, #29621	; 0x73b5
   18060:	movt	r0, #3
   18064:	bl	1b85c <__assert_fail@plt+0xa424>
   18068:	movw	r0, #29649	; 0x73d1
   1806c:	movw	r1, #26324	; 0x66d4
   18070:	movw	r3, #29656	; 0x73d8
   18074:	movw	r2, #1148	; 0x47c
   18078:	movt	r0, #3
   1807c:	movt	r1, #3
   18080:	movt	r3, #3
   18084:	bl	11438 <__assert_fail@plt>
   18088:	movw	r0, #27042	; 0x69a2
   1808c:	movw	r1, #26324	; 0x66d4
   18090:	movw	r3, #26968	; 0x6958
   18094:	movw	r2, #661	; 0x295
   18098:	movt	r0, #3
   1809c:	movt	r1, #3
   180a0:	movt	r3, #3
   180a4:	bl	11438 <__assert_fail@plt>
   180a8:	movw	r0, #27305	; 0x6aa9
   180ac:	movw	r1, #26324	; 0x66d4
   180b0:	movw	r3, #29656	; 0x73d8
   180b4:	movw	r2, #1155	; 0x483
   180b8:	movt	r0, #3
   180bc:	movt	r1, #3
   180c0:	movt	r3, #3
   180c4:	bl	11438 <__assert_fail@plt>
   180c8:	push	{fp, lr}
   180cc:	mov	fp, sp
   180d0:	sub	sp, sp, #8
   180d4:	mov	ip, #0
   180d8:	str	ip, [sp]
   180dc:	bl	178f0 <__assert_fail@plt+0x64b8>
   180e0:	mov	sp, fp
   180e4:	pop	{fp, pc}
   180e8:	push	{fp, lr}
   180ec:	mov	fp, sp
   180f0:	sub	sp, sp, #8
   180f4:	mov	ip, #2
   180f8:	str	ip, [sp]
   180fc:	bl	178f0 <__assert_fail@plt+0x64b8>
   18100:	mov	sp, fp
   18104:	pop	{fp, pc}
   18108:	push	{fp, lr}
   1810c:	mov	fp, sp
   18110:	sub	sp, sp, #8
   18114:	mov	r3, r2
   18118:	mov	r2, r1
   1811c:	mov	r1, #1
   18120:	str	r1, [sp]
   18124:	mov	r1, #0
   18128:	bl	178f0 <__assert_fail@plt+0x64b8>
   1812c:	mov	sp, fp
   18130:	pop	{fp, pc}
   18134:	push	{fp, lr}
   18138:	mov	fp, sp
   1813c:	sub	sp, sp, #8
   18140:	mov	r3, r2
   18144:	mov	r2, r1
   18148:	mov	r1, #0
   1814c:	str	r1, [sp]
   18150:	mov	r1, #0
   18154:	bl	178f0 <__assert_fail@plt+0x64b8>
   18158:	mov	sp, fp
   1815c:	pop	{fp, pc}
   18160:	push	{fp, lr}
   18164:	mov	fp, sp
   18168:	sub	sp, sp, #8
   1816c:	mov	r3, r2
   18170:	mov	r2, r1
   18174:	mov	r1, #2
   18178:	str	r1, [sp]
   1817c:	mov	r1, #0
   18180:	bl	178f0 <__assert_fail@plt+0x64b8>
   18184:	mov	sp, fp
   18188:	pop	{fp, pc}
   1818c:	push	{fp, lr}
   18190:	mov	fp, sp
   18194:	sub	sp, sp, #8
   18198:	mov	r3, r2
   1819c:	mov	r2, r1
   181a0:	mov	r1, r0
   181a4:	mov	r0, #1
   181a8:	str	r0, [sp]
   181ac:	mov	r0, #0
   181b0:	bl	178f0 <__assert_fail@plt+0x64b8>
   181b4:	mov	sp, fp
   181b8:	pop	{fp, pc}
   181bc:	push	{fp, lr}
   181c0:	mov	fp, sp
   181c4:	sub	sp, sp, #8
   181c8:	mov	r3, r2
   181cc:	mov	r2, r1
   181d0:	mov	r1, r0
   181d4:	mov	r0, #0
   181d8:	str	r0, [sp]
   181dc:	mov	r0, #0
   181e0:	bl	178f0 <__assert_fail@plt+0x64b8>
   181e4:	mov	sp, fp
   181e8:	pop	{fp, pc}
   181ec:	push	{fp, lr}
   181f0:	mov	fp, sp
   181f4:	sub	sp, sp, #8
   181f8:	mov	r3, r2
   181fc:	mov	r2, r1
   18200:	mov	r1, r0
   18204:	mov	r0, #2
   18208:	str	r0, [sp]
   1820c:	mov	r0, #0
   18210:	bl	178f0 <__assert_fail@plt+0x64b8>
   18214:	mov	sp, fp
   18218:	pop	{fp, pc}
   1821c:	push	{fp, lr}
   18220:	mov	fp, sp
   18224:	sub	sp, sp, #8
   18228:	mov	r3, r2
   1822c:	mov	r2, r1
   18230:	mov	r1, r0
   18234:	ldr	r0, [r3, #4]
   18238:	lsr	r0, r0, #31
   1823c:	str	r0, [sp]
   18240:	mov	r0, #0
   18244:	bl	178f0 <__assert_fail@plt+0x64b8>
   18248:	mov	sp, fp
   1824c:	pop	{fp, pc}
   18250:	mov	r3, #1
   18254:	b	18258 <__assert_fail@plt+0x6e20>
   18258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1825c:	add	fp, sp, #28
   18260:	sub	sp, sp, #20
   18264:	ldr	r9, [r1, #4]
   18268:	mov	r8, r0
   1826c:	cmp	r9, #0
   18270:	beq	18328 <__assert_fail@plt+0x6ef0>
   18274:	mov	r6, r9
   18278:	mov	r5, r1
   1827c:	mov	r1, #0
   18280:	mov	r0, #0
   18284:	and	r7, r2, #31
   18288:	lsr	lr, r2, #5
   1828c:	mov	r4, #0
   18290:	rsbmi	r6, r9, #0
   18294:	cmp	r9, #0
   18298:	movwgt	r1, #1
   1829c:	sub	sl, r6, r2, lsr #5
   182a0:	cmp	r1, r3
   182a4:	bne	182d8 <__assert_fail@plt+0x6ea0>
   182a8:	cmp	sl, #0
   182ac:	ble	18340 <__assert_fail@plt+0x6f08>
   182b0:	ldr	r1, [r5, #8]
   182b4:	mov	r3, lr
   182b8:	sub	r2, r1, #4
   182bc:	cmp	r3, #1
   182c0:	blt	18350 <__assert_fail@plt+0x6f18>
   182c4:	ldr	r4, [r2, r3, lsl #2]
   182c8:	sub	r3, r3, #1
   182cc:	cmp	r4, #0
   182d0:	beq	182bc <__assert_fail@plt+0x6e84>
   182d4:	mov	r4, #1
   182d8:	cmp	sl, #1
   182dc:	blt	1849c <__assert_fail@plt+0x7064>
   182e0:	ldr	r1, [r8]
   182e4:	cmp	sl, r1
   182e8:	ble	18338 <__assert_fail@plt+0x6f00>
   182ec:	str	r4, [sp, #4]
   182f0:	cmp	sl, #1
   182f4:	mov	r4, sl
   182f8:	str	lr, [sp]
   182fc:	movle	r4, #1
   18300:	cmp	r1, #0
   18304:	beq	18370 <__assert_fail@plt+0x6f38>
   18308:	movw	r0, #37160	; 0x9128
   1830c:	lsl	r1, r1, #2
   18310:	lsl	r2, r4, #2
   18314:	movt	r0, #4
   18318:	ldr	r3, [r0]
   1831c:	ldr	r0, [r8, #8]
   18320:	blx	r3
   18324:	b	18384 <__assert_fail@plt+0x6f4c>
   18328:	mov	r0, #0
   1832c:	str	r0, [r8, #4]
   18330:	sub	sp, fp, #28
   18334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18338:	ldr	r0, [r8, #8]
   1833c:	b	183ac <__assert_fail@plt+0x6f74>
   18340:	mov	r0, #0
   18344:	mov	r7, r8
   18348:	str	r0, [r7, #4]!
   1834c:	b	184ac <__assert_fail@plt+0x7074>
   18350:	ldr	r1, [r1, lr, lsl #2]
   18354:	mvn	r2, #0
   18358:	bic	r4, r1, r2, lsl r7
   1835c:	cmp	r4, #0
   18360:	movwne	r4, #1
   18364:	cmp	sl, #1
   18368:	bge	182e0 <__assert_fail@plt+0x6ea8>
   1836c:	b	1849c <__assert_fail@plt+0x7064>
   18370:	movw	r0, #37156	; 0x9124
   18374:	movt	r0, #4
   18378:	ldr	r1, [r0]
   1837c:	lsl	r0, r4, #2
   18380:	blx	r1
   18384:	str	r0, [r8, #8]
   18388:	str	r4, [r8]
   1838c:	ldr	r1, [r8, #4]
   18390:	ldr	lr, [sp]
   18394:	cmp	r1, #0
   18398:	rsbmi	r1, r1, #0
   1839c:	cmp	r1, r4
   183a0:	ldr	r4, [sp, #4]
   183a4:	movgt	r1, #0
   183a8:	strgt	r1, [r8, #4]
   183ac:	ldr	r1, [r5, #8]
   183b0:	cmp	r7, #0
   183b4:	add	r5, r1, lr, lsl #2
   183b8:	beq	18410 <__assert_fail@plt+0x6fd8>
   183bc:	ldr	r2, [r5]
   183c0:	subs	ip, sl, #1
   183c4:	lsr	r3, r2, r7
   183c8:	beq	18484 <__assert_fail@plt+0x704c>
   183cc:	mov	r2, lr
   183d0:	str	r4, [sp, #4]
   183d4:	rsb	r5, r7, #32
   183d8:	mov	r4, r0
   183dc:	add	r2, lr, #1
   183e0:	add	r1, r1, r2, lsl #2
   183e4:	sub	r2, r2, r6
   183e8:	ldr	r6, [r1], #4
   183ec:	adds	r2, r2, #1
   183f0:	orr	r3, r3, r6, lsl r5
   183f4:	str	r3, [r4], #4
   183f8:	lsr	r3, r6, r7
   183fc:	bne	183e8 <__assert_fail@plt+0x6fb0>
   18400:	ldr	r4, [sp, #4]
   18404:	add	r1, r0, ip, lsl #2
   18408:	mov	r0, r1
   1840c:	b	18488 <__assert_fail@plt+0x7050>
   18410:	sub	r2, r6, lr
   18414:	mov	r7, #0
   18418:	cmp	r2, #3
   1841c:	bls	18460 <__assert_fail@plt+0x7028>
   18420:	add	r3, r1, r6, lsl #2
   18424:	cmp	r0, r3
   18428:	addcc	r3, r0, r2, lsl #2
   1842c:	cmpcc	r5, r3
   18430:	bcc	18460 <__assert_fail@plt+0x7028>
   18434:	bic	r7, r2, #3
   18438:	mov	ip, r4
   1843c:	mov	r4, r0
   18440:	mov	r3, r7
   18444:	vld1.32	{d16-d17}, [r5]!
   18448:	subs	r3, r3, #4
   1844c:	vst1.32	{d16-d17}, [r4]!
   18450:	bne	18444 <__assert_fail@plt+0x700c>
   18454:	cmp	r2, r7
   18458:	mov	r4, ip
   1845c:	beq	18498 <__assert_fail@plt+0x7060>
   18460:	add	r3, r7, lr
   18464:	add	r0, r0, r7, lsl #2
   18468:	sub	r2, r2, r7
   1846c:	add	r1, r1, r3, lsl #2
   18470:	ldr	r3, [r1], #4
   18474:	subs	r2, r2, #1
   18478:	str	r3, [r0], #4
   1847c:	bne	18470 <__assert_fail@plt+0x7038>
   18480:	b	18498 <__assert_fail@plt+0x7060>
   18484:	add	r1, r0, ip, lsl #2
   18488:	str	r3, [r0]
   1848c:	ldr	r0, [r1]
   18490:	cmp	r0, #0
   18494:	moveq	sl, ip
   18498:	mov	r0, sl
   1849c:	mov	r7, r8
   184a0:	cmp	r4, #0
   184a4:	str	r0, [r7, #4]!
   184a8:	beq	18500 <__assert_fail@plt+0x70c8>
   184ac:	movw	r0, #37156	; 0x9124
   184b0:	mov	r4, #1
   184b4:	movt	r0, #4
   184b8:	str	r4, [sp, #12]
   184bc:	ldr	r1, [r0]
   184c0:	mov	r0, #4
   184c4:	blx	r1
   184c8:	str	r4, [sp, #8]
   184cc:	str	r0, [sp, #16]
   184d0:	mov	r5, r0
   184d4:	str	r4, [r0]
   184d8:	add	r2, sp, #8
   184dc:	mov	r0, r8
   184e0:	mov	r1, r8
   184e4:	bl	16780 <__assert_fail@plt+0x5348>
   184e8:	movw	r0, #37164	; 0x912c
   184ec:	mov	r1, #4
   184f0:	movt	r0, #4
   184f4:	ldr	r2, [r0]
   184f8:	mov	r0, r5
   184fc:	blx	r2
   18500:	cmn	r9, #1
   18504:	ldrle	r0, [r7]
   18508:	rsble	r0, r0, #0
   1850c:	strle	r0, [r7]
   18510:	sub	sp, fp, #28
   18514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18518:	mov	r3, #0
   1851c:	b	18258 <__assert_fail@plt+0x6e20>
   18520:	mov	r3, #2
   18524:	b	18258 <__assert_fail@plt+0x6e20>
   18528:	mov	r3, #1
   1852c:	b	18530 <__assert_fail@plt+0x70f8>
   18530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18534:	add	fp, sp, #28
   18538:	sub	sp, sp, #12
   1853c:	cmp	r2, #0
   18540:	mov	r5, r0
   18544:	mov	r0, #0
   18548:	ldrne	sl, [r1, #4]
   1854c:	movne	r7, r1
   18550:	cmpne	sl, #0
   18554:	beq	189d0 <__assert_fail@plt+0x7598>
   18558:	add	r8, r2, #31
   1855c:	mov	r0, #0
   18560:	mov	r6, r2
   18564:	cmp	r0, r8, lsr #5
   18568:	beq	189fc <__assert_fail@plt+0x75c4>
   1856c:	ldr	r1, [r5]
   18570:	lsr	r4, r8, #5
   18574:	cmp	r4, r1
   18578:	ble	185b4 <__assert_fail@plt+0x717c>
   1857c:	cmp	r4, #1
   18580:	mov	r9, r4
   18584:	str	r3, [sp, #8]
   18588:	movls	r9, #1
   1858c:	cmp	r1, #0
   18590:	beq	185bc <__assert_fail@plt+0x7184>
   18594:	movw	r0, #37160	; 0x9128
   18598:	lsl	r1, r1, #2
   1859c:	lsl	r2, r9, #2
   185a0:	movt	r0, #4
   185a4:	ldr	r3, [r0]
   185a8:	ldr	r0, [r5, #8]
   185ac:	blx	r3
   185b0:	b	185d0 <__assert_fail@plt+0x7198>
   185b4:	ldr	lr, [r5, #8]
   185b8:	b	185f8 <__assert_fail@plt+0x71c0>
   185bc:	movw	r0, #37156	; 0x9124
   185c0:	movt	r0, #4
   185c4:	ldr	r1, [r0]
   185c8:	lsl	r0, r9, #2
   185cc:	blx	r1
   185d0:	str	r0, [r5, #8]
   185d4:	str	r9, [r5]
   185d8:	mov	lr, r0
   185dc:	ldr	r0, [r5, #4]
   185e0:	ldr	r3, [sp, #8]
   185e4:	cmp	r0, #0
   185e8:	rsbmi	r0, r0, #0
   185ec:	cmp	r0, r9
   185f0:	movgt	r0, #0
   185f4:	strgt	r0, [r5, #4]
   185f8:	bic	r0, r8, #31
   185fc:	cmp	sl, #0
   18600:	mov	r1, sl
   18604:	mvn	r2, #0
   18608:	rsb	r9, sl, #0
   1860c:	rsbmi	r1, sl, #0
   18610:	sub	r0, r0, r6
   18614:	lsr	ip, r2, r0
   18618:	cmp	r4, r1
   1861c:	ble	18650 <__assert_fail@plt+0x7218>
   18620:	mov	r0, #0
   18624:	cmp	sl, #0
   18628:	movwgt	r0, #1
   1862c:	cmp	r0, r3
   18630:	bne	18764 <__assert_fail@plt+0x732c>
   18634:	ldr	r0, [r7, #8]
   18638:	ldr	r7, [r0]
   1863c:	cmp	r7, #0
   18640:	beq	187e8 <__assert_fail@plt+0x73b0>
   18644:	mov	r8, lr
   18648:	mov	r3, r1
   1864c:	b	18828 <__assert_fail@plt+0x73f0>
   18650:	ldr	r6, [r7, #8]
   18654:	str	r9, [sp, #8]
   18658:	mov	r9, r3
   1865c:	sub	r0, r4, #1
   18660:	cmp	r5, r7
   18664:	beq	186d4 <__assert_fail@plt+0x729c>
   18668:	cmp	r8, #64	; 0x40
   1866c:	bcc	186d4 <__assert_fail@plt+0x729c>
   18670:	mov	r2, #0
   18674:	cmp	r0, #4
   18678:	bcc	186b8 <__assert_fail@plt+0x7280>
   1867c:	add	r1, r6, r0, lsl #2
   18680:	cmp	lr, r1
   18684:	addcc	r1, lr, r0, lsl #2
   18688:	cmpcc	r6, r1
   1868c:	bcc	186b8 <__assert_fail@plt+0x7280>
   18690:	bic	r2, r0, #3
   18694:	mov	r7, lr
   18698:	mov	r1, r6
   1869c:	mov	r3, r2
   186a0:	vld1.32	{d16-d17}, [r1]!
   186a4:	subs	r3, r3, #4
   186a8:	vst1.32	{d16-d17}, [r7]!
   186ac:	bne	186a0 <__assert_fail@plt+0x7268>
   186b0:	cmp	r0, r2
   186b4:	beq	186d4 <__assert_fail@plt+0x729c>
   186b8:	add	r3, r6, r2, lsl #2
   186bc:	add	r7, lr, r2, lsl #2
   186c0:	sub	r2, r0, r2
   186c4:	ldr	r1, [r3], #4
   186c8:	subs	r2, r2, #1
   186cc:	str	r1, [r7], #4
   186d0:	bne	186c4 <__assert_fail@plt+0x728c>
   186d4:	ldr	r1, [r6, r0, lsl #2]
   186d8:	cmp	sl, #0
   186dc:	and	r1, r1, ip
   186e0:	str	r1, [lr, r0, lsl #2]
   186e4:	mov	r1, #0
   186e8:	movwgt	r1, #1
   186ec:	cmp	r1, r9
   186f0:	bne	187e0 <__assert_fail@plt+0x73a8>
   186f4:	ldr	r7, [lr]
   186f8:	ldr	r9, [sp, #8]
   186fc:	mov	r2, lr
   18700:	mov	r1, r4
   18704:	cmp	r7, #0
   18708:	bne	18730 <__assert_fail@plt+0x72f8>
   1870c:	mov	r3, #0
   18710:	mov	r1, r4
   18714:	mov	r2, lr
   18718:	subs	r1, r1, #1
   1871c:	str	r3, [r2]
   18720:	beq	18938 <__assert_fail@plt+0x7500>
   18724:	ldr	r7, [r2, #4]!
   18728:	cmp	r7, #0
   1872c:	beq	18718 <__assert_fail@plt+0x72e0>
   18730:	rsb	r3, r7, #0
   18734:	cmp	r1, #2
   18738:	str	r3, [r2]
   1873c:	blt	18938 <__assert_fail@plt+0x7500>
   18740:	mvn	r3, r1
   18744:	cmn	r3, #3
   18748:	mvnle	r3, #2
   1874c:	add	r3, r1, r3
   18750:	add	r7, r3, #2
   18754:	cmp	r7, #4
   18758:	bcs	188d4 <__assert_fail@plt+0x749c>
   1875c:	mov	r3, r2
   18760:	b	18914 <__assert_fail@plt+0x74dc>
   18764:	cmp	r5, r7
   18768:	beq	187dc <__assert_fail@plt+0x73a4>
   1876c:	cmp	r1, #1
   18770:	blt	187dc <__assert_fail@plt+0x73a4>
   18774:	ldr	r7, [r7, #8]
   18778:	mov	r2, #0
   1877c:	cmp	r1, #4
   18780:	bcc	187c8 <__assert_fail@plt+0x7390>
   18784:	add	r0, r7, r1, lsl #2
   18788:	cmp	lr, r0
   1878c:	addcc	r0, lr, r1, lsl #2
   18790:	cmpcc	r7, r0
   18794:	bcc	187c8 <__assert_fail@plt+0x7390>
   18798:	bic	r2, r1, #-2147483645	; 0x80000003
   1879c:	mov	r6, r5
   187a0:	mov	r5, lr
   187a4:	mov	r0, r7
   187a8:	mov	r3, r2
   187ac:	vld1.32	{d16-d17}, [r0]!
   187b0:	subs	r3, r3, #4
   187b4:	vst1.32	{d16-d17}, [r5]!
   187b8:	bne	187ac <__assert_fail@plt+0x7374>
   187bc:	cmp	r1, r2
   187c0:	mov	r5, r6
   187c4:	beq	187dc <__assert_fail@plt+0x73a4>
   187c8:	ldr	r0, [r7, r2, lsl #2]
   187cc:	str	r0, [lr, r2, lsl #2]
   187d0:	add	r2, r2, #1
   187d4:	cmp	r1, r2
   187d8:	bne	187c8 <__assert_fail@plt+0x7390>
   187dc:	mov	r4, r1
   187e0:	mov	r9, sl
   187e4:	b	189a8 <__assert_fail@plt+0x7570>
   187e8:	mov	r2, #0
   187ec:	mov	r3, #0
   187f0:	mov	r6, #0
   187f4:	add	r7, r1, r6
   187f8:	str	r2, [lr, -r6, lsl #2]
   187fc:	cmp	r7, #1
   18800:	beq	189dc <__assert_fail@plt+0x75a4>
   18804:	sub	r7, r0, r6, lsl #2
   18808:	sub	r3, r3, #4
   1880c:	sub	r6, r6, #1
   18810:	ldr	r7, [r7, #4]
   18814:	cmp	r7, #0
   18818:	beq	187f4 <__assert_fail@plt+0x73bc>
   1881c:	sub	r8, lr, r3
   18820:	sub	r0, r0, r3
   18824:	add	r3, r1, r6
   18828:	rsb	r2, r7, #0
   1882c:	cmp	r3, #2
   18830:	str	r2, [r8]
   18834:	blt	18974 <__assert_fail@plt+0x753c>
   18838:	mvn	r2, r3
   1883c:	mvn	r6, #2
   18840:	mov	sl, ip
   18844:	mvn	r7, #2
   18848:	cmn	r2, #3
   1884c:	movgt	r6, r2
   18850:	add	r6, r3, r6
   18854:	add	ip, r6, #2
   18858:	cmp	ip, #4
   1885c:	bcc	1894c <__assert_fail@plt+0x7514>
   18860:	cmn	r2, #3
   18864:	str	r5, [sp, #8]
   18868:	add	r6, r8, #4
   1886c:	movgt	r7, r2
   18870:	add	r2, r3, r7
   18874:	add	r7, r0, #4
   18878:	add	r2, r2, #3
   1887c:	add	r5, r0, r2, lsl #2
   18880:	cmp	r6, r5
   18884:	addcc	r2, r8, r2, lsl #2
   18888:	cmpcc	r7, r2
   1888c:	bcc	18948 <__assert_fail@plt+0x7510>
   18890:	ldr	r5, [sp, #8]
   18894:	str	lr, [sp, #4]
   18898:	bic	lr, ip, #3
   1889c:	add	r8, r8, lr, lsl #2
   188a0:	add	r0, r0, lr, lsl #2
   188a4:	sub	r3, r3, lr
   188a8:	mov	r2, lr
   188ac:	vld1.32	{d16-d17}, [r7]!
   188b0:	subs	r2, r2, #4
   188b4:	vmvn	q8, q8
   188b8:	vst1.32	{d16-d17}, [r6]!
   188bc:	bne	188ac <__assert_fail@plt+0x7474>
   188c0:	cmp	ip, lr
   188c4:	ldr	lr, [sp, #4]
   188c8:	mov	ip, sl
   188cc:	bne	18950 <__assert_fail@plt+0x7518>
   188d0:	b	18974 <__assert_fail@plt+0x753c>
   188d4:	mov	r8, ip
   188d8:	mov	ip, r5
   188dc:	bic	r5, r7, #3
   188e0:	add	r3, r2, r5, lsl #2
   188e4:	sub	r1, r1, r5
   188e8:	add	r2, r2, #4
   188ec:	mov	r6, r5
   188f0:	vld1.32	{d16-d17}, [r2]
   188f4:	subs	r6, r6, #4
   188f8:	vmvn	q8, q8
   188fc:	vst1.32	{d16-d17}, [r2]!
   18900:	bne	188f0 <__assert_fail@plt+0x74b8>
   18904:	cmp	r7, r5
   18908:	mov	r5, ip
   1890c:	mov	ip, r8
   18910:	beq	18938 <__assert_fail@plt+0x7500>
   18914:	add	r2, r3, #4
   18918:	add	r3, r3, #4
   1891c:	add	r1, r1, #1
   18920:	ldr	r7, [r3], #4
   18924:	sub	r1, r1, #1
   18928:	cmp	r1, #2
   1892c:	mvn	r7, r7
   18930:	str	r7, [r2], #4
   18934:	bgt	18920 <__assert_fail@plt+0x74e8>
   18938:	ldr	r1, [lr, r0, lsl #2]
   1893c:	and	r1, r1, ip
   18940:	str	r1, [lr, r0, lsl #2]
   18944:	b	189a8 <__assert_fail@plt+0x7570>
   18948:	ldr	r5, [sp, #8]
   1894c:	mov	ip, sl
   18950:	add	r2, r8, #4
   18954:	add	r0, r0, #4
   18958:	add	r3, r3, #1
   1895c:	ldr	r7, [r0], #4
   18960:	sub	r3, r3, #1
   18964:	cmp	r3, #2
   18968:	mvn	r7, r7
   1896c:	str	r7, [r2], #4
   18970:	bgt	1895c <__assert_fail@plt+0x7524>
   18974:	sub	r6, r4, #1
   18978:	cmp	r6, r1
   1897c:	ble	189a4 <__assert_fail@plt+0x756c>
   18980:	add	r0, lr, r1, lsl #2
   18984:	sub	r1, r6, r1
   18988:	mov	r8, lr
   1898c:	mov	r7, ip
   18990:	lsl	r2, r1, #2
   18994:	mov	r1, #255	; 0xff
   18998:	bl	1136c <memset@plt>
   1899c:	mov	ip, r7
   189a0:	mov	lr, r8
   189a4:	str	ip, [lr, r6, lsl #2]
   189a8:	sub	r1, lr, #4
   189ac:	mov	r0, r4
   189b0:	cmp	r4, #1
   189b4:	blt	189c8 <__assert_fail@plt+0x7590>
   189b8:	ldr	r2, [r1, r0, lsl #2]
   189bc:	sub	r4, r0, #1
   189c0:	cmp	r2, #0
   189c4:	beq	189ac <__assert_fail@plt+0x7574>
   189c8:	cmp	r9, #0
   189cc:	rsblt	r0, r0, #0
   189d0:	str	r0, [r5, #4]
   189d4:	sub	sp, fp, #28
   189d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189dc:	movw	r0, #27305	; 0x6aa9
   189e0:	movw	r1, #26324	; 0x66d4
   189e4:	movw	r3, #29730	; 0x7422
   189e8:	movw	r2, #2443	; 0x98b
   189ec:	movt	r0, #3
   189f0:	movt	r1, #3
   189f4:	movt	r3, #3
   189f8:	bl	11438 <__assert_fail@plt>
   189fc:	movw	r0, #28636	; 0x6fdc
   18a00:	movw	r1, #26324	; 0x66d4
   18a04:	movw	r3, #29730	; 0x7422
   18a08:	movw	r2, #2427	; 0x97b
   18a0c:	movt	r0, #3
   18a10:	movt	r1, #3
   18a14:	movt	r3, #3
   18a18:	bl	11438 <__assert_fail@plt>
   18a1c:	mov	r3, #0
   18a20:	b	18530 <__assert_fail@plt+0x70f8>
   18a24:	mov	r3, #2
   18a28:	b	18530 <__assert_fail@plt+0x70f8>
   18a2c:	push	{fp, lr}
   18a30:	mov	fp, sp
   18a34:	sub	sp, sp, #8
   18a38:	mov	r3, r2
   18a3c:	mov	r2, r1
   18a40:	mov	r1, #2
   18a44:	str	r1, [sp]
   18a48:	mov	r1, #0
   18a4c:	bl	178f0 <__assert_fail@plt+0x64b8>
   18a50:	cmp	r0, #0
   18a54:	moveq	sp, fp
   18a58:	popeq	{fp, pc}
   18a5c:	movw	r0, #27305	; 0x6aa9
   18a60:	movw	r1, #26324	; 0x66d4
   18a64:	movw	r3, #27315	; 0x6ab3
   18a68:	movw	r2, #2521	; 0x9d9
   18a6c:	movt	r0, #3
   18a70:	movt	r1, #3
   18a74:	movt	r3, #3
   18a78:	bl	11438 <__assert_fail@plt>
   18a7c:	push	{fp, lr}
   18a80:	mov	fp, sp
   18a84:	sub	sp, sp, #8
   18a88:	mov	r2, r0
   18a8c:	mov	r0, #2
   18a90:	mov	r3, r1
   18a94:	mov	r1, #0
   18a98:	str	r0, [sp]
   18a9c:	mov	r0, #0
   18aa0:	bl	178f0 <__assert_fail@plt+0x64b8>
   18aa4:	clz	r0, r0
   18aa8:	lsr	r0, r0, #5
   18aac:	mov	sp, fp
   18ab0:	pop	{fp, pc}
   18ab4:	push	{r4, r5, fp, lr}
   18ab8:	add	fp, sp, #8
   18abc:	sub	sp, sp, #16
   18ac0:	mov	r5, r2
   18ac4:	mov	r2, r1
   18ac8:	mov	r1, r0
   18acc:	mov	r3, #0
   18ad0:	mov	r4, #0
   18ad4:	ldr	r0, [r5, #4]
   18ad8:	cmp	r0, #0
   18adc:	movwgt	r3, #1
   18ae0:	cmp	r3, r0, lsr #31
   18ae4:	bne	18b34 <__assert_fail@plt+0x76fc>
   18ae8:	ldr	r0, [r1, #4]
   18aec:	ldr	r3, [r2, #4]
   18af0:	cmp	r0, r3
   18af4:	bne	18bdc <__assert_fail@plt+0x77a4>
   18af8:	cmp	r0, #0
   18afc:	blt	18ba0 <__assert_fail@plt+0x7768>
   18b00:	ldr	r1, [r1, #8]
   18b04:	ldr	r2, [r2, #8]
   18b08:	sub	r1, r1, #4
   18b0c:	sub	r2, r2, #4
   18b10:	cmp	r0, #1
   18b14:	blt	18bd8 <__assert_fail@plt+0x77a0>
   18b18:	sub	r3, r0, #1
   18b1c:	ldr	r5, [r2, r0, lsl #2]
   18b20:	ldr	r0, [r1, r0, lsl #2]
   18b24:	cmp	r0, r5
   18b28:	mov	r0, r3
   18b2c:	beq	18b10 <__assert_fail@plt+0x76d8>
   18b30:	b	18bdc <__assert_fail@plt+0x77a4>
   18b34:	movw	r0, #26320	; 0x66d0
   18b38:	str	r4, [sp, #8]
   18b3c:	str	r4, [sp, #4]
   18b40:	add	r4, sp, #4
   18b44:	movt	r0, #3
   18b48:	str	r0, [sp, #12]
   18b4c:	mov	r0, r4
   18b50:	bl	16f5c <__assert_fail@plt+0x5b24>
   18b54:	mov	r0, #2
   18b58:	mov	r1, #0
   18b5c:	mov	r2, r4
   18b60:	mov	r3, r5
   18b64:	str	r0, [sp]
   18b68:	mov	r0, #0
   18b6c:	bl	178f0 <__assert_fail@plt+0x64b8>
   18b70:	clz	r0, r0
   18b74:	lsr	r4, r0, #5
   18b78:	ldr	r0, [sp, #4]
   18b7c:	cmp	r0, #0
   18b80:	beq	18bdc <__assert_fail@plt+0x77a4>
   18b84:	movw	r1, #37164	; 0x912c
   18b88:	movt	r1, #4
   18b8c:	ldr	r2, [r1]
   18b90:	lsl	r1, r0, #2
   18b94:	ldr	r0, [sp, #12]
   18b98:	blx	r2
   18b9c:	b	18bdc <__assert_fail@plt+0x77a4>
   18ba0:	ldr	r1, [r1, #8]
   18ba4:	rsb	r3, r0, #0
   18ba8:	ldr	r0, [r2, #8]
   18bac:	sub	r0, r0, #4
   18bb0:	sub	r1, r1, #4
   18bb4:	cmp	r3, #1
   18bb8:	blt	18bd8 <__assert_fail@plt+0x77a0>
   18bbc:	sub	r2, r3, #1
   18bc0:	ldr	r5, [r1, r3, lsl #2]
   18bc4:	ldr	r3, [r0, r3, lsl #2]
   18bc8:	cmp	r3, r5
   18bcc:	mov	r3, r2
   18bd0:	beq	18bb4 <__assert_fail@plt+0x777c>
   18bd4:	b	18bdc <__assert_fail@plt+0x77a4>
   18bd8:	mov	r4, #1
   18bdc:	mov	r0, r4
   18be0:	sub	sp, fp, #8
   18be4:	pop	{r4, r5, fp, pc}
   18be8:	push	{fp, lr}
   18bec:	mov	fp, sp
   18bf0:	sub	sp, sp, #8
   18bf4:	mov	ip, #1
   18bf8:	str	ip, [sp]
   18bfc:	bl	18c08 <__assert_fail@plt+0x77d0>
   18c00:	mov	sp, fp
   18c04:	pop	{fp, pc}
   18c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c0c:	add	fp, sp, #28
   18c10:	sub	sp, sp, #28
   18c14:	ldr	r9, [fp, #8]
   18c18:	mov	r4, r1
   18c1c:	movw	r1, #26320	; 0x66d0
   18c20:	mov	r6, r0
   18c24:	mov	r0, #0
   18c28:	mov	r8, r2
   18c2c:	cmp	r3, #0
   18c30:	movt	r1, #3
   18c34:	str	r0, [sp, #20]
   18c38:	str	r0, [sp, #16]
   18c3c:	str	r0, [sp, #4]
   18c40:	str	r0, [sp, #8]
   18c44:	str	r1, [sp, #24]
   18c48:	str	r1, [sp, #12]
   18c4c:	beq	18cb4 <__assert_fail@plt+0x787c>
   18c50:	movw	r0, #37156	; 0x9124
   18c54:	mov	sl, #1
   18c58:	mov	r7, r3
   18c5c:	movt	r0, #4
   18c60:	str	sl, [sp, #8]
   18c64:	ldr	r1, [r0]
   18c68:	mov	r0, #4
   18c6c:	blx	r1
   18c70:	str	sl, [sp, #4]
   18c74:	str	r0, [sp, #12]
   18c78:	str	r7, [r0]
   18c7c:	mov	r5, r0
   18c80:	add	r1, sp, #16
   18c84:	add	r3, sp, #4
   18c88:	mov	r0, r6
   18c8c:	mov	r2, r8
   18c90:	str	r9, [sp]
   18c94:	bl	178f0 <__assert_fail@plt+0x64b8>
   18c98:	movw	r0, #37164	; 0x912c
   18c9c:	mov	r1, #4
   18ca0:	movt	r0, #4
   18ca4:	ldr	r2, [r0]
   18ca8:	mov	r0, r5
   18cac:	blx	r2
   18cb0:	b	18cd0 <__assert_fail@plt+0x7898>
   18cb4:	str	r0, [sp, #8]
   18cb8:	add	r1, sp, #16
   18cbc:	add	r3, sp, #4
   18cc0:	mov	r0, r6
   18cc4:	mov	r2, r8
   18cc8:	str	r9, [sp]
   18ccc:	bl	178f0 <__assert_fail@plt+0x64b8>
   18cd0:	ldr	r0, [sp, #20]
   18cd4:	cmp	r0, #0
   18cd8:	ldrne	r1, [sp, #24]
   18cdc:	ldrne	r5, [r1]
   18ce0:	moveq	r5, #0
   18ce4:	cmp	r4, #0
   18ce8:	beq	18d44 <__assert_fail@plt+0x790c>
   18cec:	ldr	r1, [r4, #4]
   18cf0:	str	r0, [r4, #4]
   18cf4:	str	r1, [sp, #20]
   18cf8:	ldr	r0, [r4]
   18cfc:	ldr	r1, [sp, #16]
   18d00:	str	r1, [r4]
   18d04:	str	r0, [sp, #16]
   18d08:	ldr	r1, [r4, #8]
   18d0c:	ldr	r2, [sp, #24]
   18d10:	str	r2, [r4, #8]
   18d14:	str	r1, [sp, #24]
   18d18:	cmp	r0, #0
   18d1c:	beq	18d38 <__assert_fail@plt+0x7900>
   18d20:	movw	r1, #37164	; 0x912c
   18d24:	movt	r1, #4
   18d28:	ldr	r2, [r1]
   18d2c:	lsl	r1, r0, #2
   18d30:	ldr	r0, [sp, #24]
   18d34:	blx	r2
   18d38:	mov	r0, r5
   18d3c:	sub	sp, fp, #28
   18d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d44:	ldr	r0, [sp, #16]
   18d48:	cmp	r0, #0
   18d4c:	bne	18d20 <__assert_fail@plt+0x78e8>
   18d50:	b	18d38 <__assert_fail@plt+0x7900>
   18d54:	push	{fp, lr}
   18d58:	mov	fp, sp
   18d5c:	sub	sp, sp, #8
   18d60:	mov	ip, #0
   18d64:	str	ip, [sp]
   18d68:	bl	18c08 <__assert_fail@plt+0x77d0>
   18d6c:	mov	sp, fp
   18d70:	pop	{fp, pc}
   18d74:	push	{fp, lr}
   18d78:	mov	fp, sp
   18d7c:	sub	sp, sp, #8
   18d80:	mov	ip, #2
   18d84:	str	ip, [sp]
   18d88:	bl	18c08 <__assert_fail@plt+0x77d0>
   18d8c:	mov	sp, fp
   18d90:	pop	{fp, pc}
   18d94:	push	{fp, lr}
   18d98:	mov	fp, sp
   18d9c:	sub	sp, sp, #8
   18da0:	mov	r3, r2
   18da4:	mov	r2, r1
   18da8:	mov	r1, #1
   18dac:	str	r1, [sp]
   18db0:	mov	r1, #0
   18db4:	bl	18c08 <__assert_fail@plt+0x77d0>
   18db8:	mov	sp, fp
   18dbc:	pop	{fp, pc}
   18dc0:	push	{fp, lr}
   18dc4:	mov	fp, sp
   18dc8:	sub	sp, sp, #8
   18dcc:	mov	r3, r2
   18dd0:	mov	r2, r1
   18dd4:	mov	r1, #0
   18dd8:	str	r1, [sp]
   18ddc:	mov	r1, #0
   18de0:	bl	18c08 <__assert_fail@plt+0x77d0>
   18de4:	mov	sp, fp
   18de8:	pop	{fp, pc}
   18dec:	push	{fp, lr}
   18df0:	mov	fp, sp
   18df4:	sub	sp, sp, #8
   18df8:	mov	r3, r2
   18dfc:	mov	r2, r1
   18e00:	mov	r1, #2
   18e04:	str	r1, [sp]
   18e08:	mov	r1, #0
   18e0c:	bl	18c08 <__assert_fail@plt+0x77d0>
   18e10:	mov	sp, fp
   18e14:	pop	{fp, pc}
   18e18:	push	{fp, lr}
   18e1c:	mov	fp, sp
   18e20:	sub	sp, sp, #8
   18e24:	mov	r3, r2
   18e28:	mov	r2, r1
   18e2c:	mov	r1, r0
   18e30:	mov	r0, #1
   18e34:	str	r0, [sp]
   18e38:	mov	r0, #0
   18e3c:	bl	18c08 <__assert_fail@plt+0x77d0>
   18e40:	mov	sp, fp
   18e44:	pop	{fp, pc}
   18e48:	push	{fp, lr}
   18e4c:	mov	fp, sp
   18e50:	sub	sp, sp, #8
   18e54:	mov	r3, r2
   18e58:	mov	r2, r1
   18e5c:	mov	r1, r0
   18e60:	mov	r0, #0
   18e64:	str	r0, [sp]
   18e68:	mov	r0, #0
   18e6c:	bl	18c08 <__assert_fail@plt+0x77d0>
   18e70:	mov	sp, fp
   18e74:	pop	{fp, pc}
   18e78:	push	{fp, lr}
   18e7c:	mov	fp, sp
   18e80:	sub	sp, sp, #8
   18e84:	mov	r3, r2
   18e88:	mov	r2, r1
   18e8c:	mov	r1, r0
   18e90:	mov	r0, #2
   18e94:	str	r0, [sp]
   18e98:	mov	r0, #0
   18e9c:	bl	18c08 <__assert_fail@plt+0x77d0>
   18ea0:	mov	sp, fp
   18ea4:	pop	{fp, pc}
   18ea8:	push	{fp, lr}
   18eac:	mov	fp, sp
   18eb0:	sub	sp, sp, #8
   18eb4:	mov	r2, r0
   18eb8:	mov	r0, #1
   18ebc:	mov	r3, r1
   18ec0:	mov	r1, #0
   18ec4:	str	r0, [sp]
   18ec8:	mov	r0, #0
   18ecc:	bl	18c08 <__assert_fail@plt+0x77d0>
   18ed0:	mov	sp, fp
   18ed4:	pop	{fp, pc}
   18ed8:	push	{fp, lr}
   18edc:	mov	fp, sp
   18ee0:	sub	sp, sp, #8
   18ee4:	mov	r2, r0
   18ee8:	mov	r0, #0
   18eec:	mov	r3, r1
   18ef0:	mov	r1, #0
   18ef4:	str	r0, [sp]
   18ef8:	mov	r0, #0
   18efc:	bl	18c08 <__assert_fail@plt+0x77d0>
   18f00:	mov	sp, fp
   18f04:	pop	{fp, pc}
   18f08:	push	{fp, lr}
   18f0c:	mov	fp, sp
   18f10:	sub	sp, sp, #8
   18f14:	mov	r2, r0
   18f18:	mov	r0, #2
   18f1c:	mov	r3, r1
   18f20:	mov	r1, #0
   18f24:	str	r0, [sp]
   18f28:	mov	r0, #0
   18f2c:	bl	18c08 <__assert_fail@plt+0x77d0>
   18f30:	mov	sp, fp
   18f34:	pop	{fp, pc}
   18f38:	push	{fp, lr}
   18f3c:	mov	fp, sp
   18f40:	sub	sp, sp, #8
   18f44:	mov	r3, r2
   18f48:	mov	r2, r1
   18f4c:	mov	r1, r0
   18f50:	mov	r0, #0
   18f54:	str	r0, [sp]
   18f58:	mov	r0, #0
   18f5c:	bl	18c08 <__assert_fail@plt+0x77d0>
   18f60:	mov	sp, fp
   18f64:	pop	{fp, pc}
   18f68:	push	{fp, lr}
   18f6c:	mov	fp, sp
   18f70:	sub	sp, sp, #8
   18f74:	mov	r3, r2
   18f78:	mov	r2, r1
   18f7c:	mov	r1, #2
   18f80:	str	r1, [sp]
   18f84:	mov	r1, #0
   18f88:	bl	18c08 <__assert_fail@plt+0x77d0>
   18f8c:	cmp	r0, #0
   18f90:	moveq	sp, fp
   18f94:	popeq	{fp, pc}
   18f98:	movw	r0, #27305	; 0x6aa9
   18f9c:	movw	r1, #26324	; 0x66d4
   18fa0:	movw	r3, #27393	; 0x6b01
   18fa4:	movw	r2, #2647	; 0xa57
   18fa8:	movt	r0, #3
   18fac:	movt	r1, #3
   18fb0:	movt	r3, #3
   18fb4:	bl	11438 <__assert_fail@plt>
   18fb8:	push	{fp, lr}
   18fbc:	mov	fp, sp
   18fc0:	sub	sp, sp, #8
   18fc4:	mov	r2, r0
   18fc8:	mov	r0, #2
   18fcc:	mov	r3, r1
   18fd0:	mov	r1, #0
   18fd4:	str	r0, [sp]
   18fd8:	mov	r0, #0
   18fdc:	bl	18c08 <__assert_fail@plt+0x77d0>
   18fe0:	clz	r0, r0
   18fe4:	lsr	r0, r0, #5
   18fe8:	mov	sp, fp
   18fec:	pop	{fp, pc}
   18ff0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18ff4:	add	fp, sp, #24
   18ff8:	sub	sp, sp, #16
   18ffc:	mov	r5, r0
   19000:	movw	r0, #26320	; 0x66d0
   19004:	mov	r4, #0
   19008:	mov	r6, r1
   1900c:	cmp	r2, #0
   19010:	movt	r0, #3
   19014:	str	r4, [sp, #8]
   19018:	str	r4, [sp, #4]
   1901c:	str	r0, [sp, #12]
   19020:	beq	190d4 <__assert_fail@plt+0x7c9c>
   19024:	movw	r0, #37156	; 0x9124
   19028:	mov	r8, #1
   1902c:	mov	r7, r2
   19030:	movt	r0, #4
   19034:	str	r8, [sp, #8]
   19038:	ldr	r1, [r0]
   1903c:	mov	r0, #4
   19040:	blx	r1
   19044:	str	r8, [sp, #4]
   19048:	str	r0, [sp, #12]
   1904c:	str	r7, [r0]
   19050:	add	r0, sp, #4
   19054:	mov	r1, r6
   19058:	mov	r2, r0
   1905c:	bl	19104 <__assert_fail@plt+0x7ccc>
   19060:	ldr	r0, [sp, #8]
   19064:	cmp	r0, #0
   19068:	ldrne	r0, [sp, #12]
   1906c:	ldrne	r4, [r0]
   19070:	cmp	r5, #0
   19074:	beq	190f4 <__assert_fail@plt+0x7cbc>
   19078:	ldr	r0, [r5, #4]
   1907c:	ldr	r1, [sp, #8]
   19080:	str	r0, [sp, #8]
   19084:	str	r1, [r5, #4]
   19088:	ldr	r0, [r5]
   1908c:	ldr	r1, [sp, #4]
   19090:	str	r0, [sp, #4]
   19094:	str	r1, [r5]
   19098:	ldr	r1, [r5, #8]
   1909c:	ldr	r2, [sp, #12]
   190a0:	str	r1, [sp, #12]
   190a4:	str	r2, [r5, #8]
   190a8:	cmp	r0, #0
   190ac:	beq	190c8 <__assert_fail@plt+0x7c90>
   190b0:	movw	r1, #37164	; 0x912c
   190b4:	movt	r1, #4
   190b8:	ldr	r2, [r1]
   190bc:	lsl	r1, r0, #2
   190c0:	ldr	r0, [sp, #12]
   190c4:	blx	r2
   190c8:	mov	r0, r4
   190cc:	sub	sp, fp, #24
   190d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   190d4:	add	r0, sp, #4
   190d8:	mov	r4, #0
   190dc:	mov	r1, r6
   190e0:	mov	r2, r0
   190e4:	str	r4, [sp, #8]
   190e8:	bl	19104 <__assert_fail@plt+0x7ccc>
   190ec:	cmp	r5, #0
   190f0:	bne	19078 <__assert_fail@plt+0x7c40>
   190f4:	ldr	r0, [sp, #4]
   190f8:	cmp	r0, #0
   190fc:	bne	190b0 <__assert_fail@plt+0x7c78>
   19100:	b	190c8 <__assert_fail@plt+0x7c90>
   19104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19108:	add	fp, sp, #28
   1910c:	sub	sp, sp, #28
   19110:	mov	r7, r1
   19114:	mov	r9, r2
   19118:	mov	r8, r0
   1911c:	ldr	r4, [r7, #4]!
   19120:	cmp	r4, #0
   19124:	beq	19310 <__assert_fail@plt+0x7ed8>
   19128:	ldr	r0, [r9, #4]
   1912c:	mov	r6, r1
   19130:	cmp	r0, #0
   19134:	beq	19368 <__assert_fail@plt+0x7f30>
   19138:	movw	r0, #26320	; 0x66d0
   1913c:	add	r2, sp, #16
   19140:	mov	r1, #0
   19144:	movt	r0, #3
   19148:	cmp	r2, r6
   1914c:	str	r1, [sp, #20]
   19150:	str	r1, [sp, #16]
   19154:	str	r1, [sp, #4]
   19158:	str	r1, [sp, #8]
   1915c:	str	r0, [sp, #24]
   19160:	str	r0, [sp, #12]
   19164:	beq	19adc <__assert_fail@plt+0x86a4>
   19168:	cmp	r4, #0
   1916c:	mov	r5, r4
   19170:	rsbmi	r5, r4, #0
   19174:	cmp	r5, #1
   19178:	blt	19220 <__assert_fail@plt+0x7de8>
   1917c:	movw	r0, #37156	; 0x9124
   19180:	movt	r0, #4
   19184:	ldr	r1, [r0]
   19188:	lsl	r0, r5, #2
   1918c:	blx	r1
   19190:	str	r0, [sp, #24]
   19194:	str	r5, [sp, #16]
   19198:	mov	r2, #0
   1919c:	ldr	r1, [sp, #20]
   191a0:	cmp	r1, #0
   191a4:	rsbmi	r1, r1, #0
   191a8:	cmp	r1, r5
   191ac:	movgt	r1, #0
   191b0:	strgt	r1, [sp, #20]
   191b4:	cmp	r5, #4
   191b8:	ldr	r4, [r6, #8]
   191bc:	bcc	19200 <__assert_fail@plt+0x7dc8>
   191c0:	add	r1, r4, r5, lsl #2
   191c4:	cmp	r0, r1
   191c8:	bcs	191d8 <__assert_fail@plt+0x7da0>
   191cc:	add	r1, r0, r5, lsl #2
   191d0:	cmp	r1, r4
   191d4:	bhi	19200 <__assert_fail@plt+0x7dc8>
   191d8:	bic	r2, r5, #-2147483645	; 0x80000003
   191dc:	mov	r6, r0
   191e0:	mov	r1, r4
   191e4:	mov	r3, r2
   191e8:	vld1.32	{d16-d17}, [r1]!
   191ec:	subs	r3, r3, #4
   191f0:	vst1.32	{d16-d17}, [r6]!
   191f4:	bne	191e8 <__assert_fail@plt+0x7db0>
   191f8:	cmp	r5, r2
   191fc:	beq	1921c <__assert_fail@plt+0x7de4>
   19200:	add	r1, r4, r2, lsl #2
   19204:	add	r3, r0, r2, lsl #2
   19208:	sub	r2, r5, r2
   1920c:	ldr	r6, [r1], #4
   19210:	subs	r2, r2, #1
   19214:	str	r6, [r3], #4
   19218:	bne	1920c <__assert_fail@plt+0x7dd4>
   1921c:	ldr	r4, [r7]
   19220:	rsb	r1, r4, #0
   19224:	cmp	r4, #0
   19228:	movge	r1, r4
   1922c:	cmp	r1, #0
   19230:	str	r1, [sp, #20]
   19234:	beq	19ae0 <__assert_fail@plt+0x86a8>
   19238:	ldr	r2, [r0]
   1923c:	mov	r1, #31
   19240:	cmp	r2, #0
   19244:	bne	19260 <__assert_fail@plt+0x7e28>
   19248:	add	r0, r0, #4
   1924c:	mov	r1, #31
   19250:	ldr	r2, [r0], #4
   19254:	add	r1, r1, #32
   19258:	cmp	r2, #0
   1925c:	beq	19250 <__assert_fail@plt+0x7e18>
   19260:	rsb	r0, r2, #0
   19264:	and	r2, r2, r0
   19268:	mov	r0, #0
   1926c:	cmp	r0, r2, lsr #24
   19270:	bne	19288 <__assert_fail@plt+0x7e50>
   19274:	mov	r0, #0
   19278:	lsl	r2, r2, #8
   1927c:	add	r0, r0, #8
   19280:	cmp	r2, #16777216	; 0x1000000
   19284:	bcc	19278 <__assert_fail@plt+0x7e40>
   19288:	cmp	r2, #0
   1928c:	blt	192a0 <__assert_fail@plt+0x7e68>
   19290:	lsl	r2, r2, #1
   19294:	add	r0, r0, #1
   19298:	cmn	r2, #1
   1929c:	bgt	19290 <__assert_fail@plt+0x7e58>
   192a0:	sub	r6, r1, r0
   192a4:	add	r0, sp, #16
   192a8:	mov	r3, #2
   192ac:	mov	r1, r0
   192b0:	mov	r2, r6
   192b4:	bl	18258 <__assert_fail@plt+0x6e20>
   192b8:	add	r0, sp, #4
   192bc:	cmp	r0, r9
   192c0:	beq	193b8 <__assert_fail@plt+0x7f80>
   192c4:	ldr	r4, [r9, #4]
   192c8:	ldr	r1, [sp, #4]
   192cc:	cmp	r4, #0
   192d0:	rsbmi	r4, r4, #0
   192d4:	cmp	r4, r1
   192d8:	ble	193c8 <__assert_fail@plt+0x7f90>
   192dc:	cmp	r4, #1
   192e0:	mov	r5, r4
   192e4:	movle	r5, #1
   192e8:	cmp	r1, #0
   192ec:	beq	19400 <__assert_fail@plt+0x7fc8>
   192f0:	movw	r0, #37160	; 0x9128
   192f4:	lsl	r1, r1, #2
   192f8:	lsl	r2, r5, #2
   192fc:	movt	r0, #4
   19300:	ldr	r3, [r0]
   19304:	ldr	r0, [sp, #12]
   19308:	blx	r3
   1930c:	b	19414 <__assert_fail@plt+0x7fdc>
   19310:	mov	r6, r9
   19314:	cmp	r8, r9
   19318:	ldr	r4, [r6, #4]!
   1931c:	beq	193c0 <__assert_fail@plt+0x7f88>
   19320:	ldr	r1, [r8]
   19324:	cmp	r4, #0
   19328:	rsbmi	r4, r4, #0
   1932c:	cmp	r4, r1
   19330:	ble	193d8 <__assert_fail@plt+0x7fa0>
   19334:	cmp	r4, #1
   19338:	mov	r5, r4
   1933c:	movle	r5, #1
   19340:	cmp	r1, #0
   19344:	beq	197e8 <__assert_fail@plt+0x83b0>
   19348:	movw	r0, #37160	; 0x9128
   1934c:	lsl	r1, r1, #2
   19350:	lsl	r2, r5, #2
   19354:	movt	r0, #4
   19358:	ldr	r3, [r0]
   1935c:	ldr	r0, [r8, #8]
   19360:	blx	r3
   19364:	b	197fc <__assert_fail@plt+0x83c4>
   19368:	cmp	r8, r6
   1936c:	beq	193e8 <__assert_fail@plt+0x7fb0>
   19370:	ldr	r1, [r8]
   19374:	cmp	r4, #0
   19378:	rsbmi	r4, r4, #0
   1937c:	cmp	r4, r1
   19380:	ble	193f0 <__assert_fail@plt+0x7fb8>
   19384:	cmp	r4, #1
   19388:	mov	r5, r4
   1938c:	movle	r5, #1
   19390:	cmp	r1, #0
   19394:	beq	19894 <__assert_fail@plt+0x845c>
   19398:	movw	r0, #37160	; 0x9128
   1939c:	lsl	r1, r1, #2
   193a0:	lsl	r2, r5, #2
   193a4:	movt	r0, #4
   193a8:	ldr	r3, [r0]
   193ac:	ldr	r0, [r8, #8]
   193b0:	blx	r3
   193b4:	b	198a8 <__assert_fail@plt+0x8470>
   193b8:	ldr	r0, [sp, #8]
   193bc:	b	194ac <__assert_fail@plt+0x8074>
   193c0:	mov	r8, r6
   193c4:	b	19940 <__assert_fail@plt+0x8508>
   193c8:	ldr	r0, [sp, #12]
   193cc:	cmp	r4, #1
   193d0:	bge	1943c <__assert_fail@plt+0x8004>
   193d4:	b	194a4 <__assert_fail@plt+0x806c>
   193d8:	ldr	r0, [r8, #8]
   193dc:	cmp	r4, #1
   193e0:	bge	19824 <__assert_fail@plt+0x83ec>
   193e4:	b	1988c <__assert_fail@plt+0x8454>
   193e8:	mov	r8, r7
   193ec:	b	19940 <__assert_fail@plt+0x8508>
   193f0:	ldr	r0, [r8, #8]
   193f4:	cmp	r4, #1
   193f8:	bge	198d0 <__assert_fail@plt+0x8498>
   193fc:	b	19938 <__assert_fail@plt+0x8500>
   19400:	movw	r0, #37156	; 0x9124
   19404:	movt	r0, #4
   19408:	ldr	r1, [r0]
   1940c:	lsl	r0, r5, #2
   19410:	blx	r1
   19414:	str	r0, [sp, #12]
   19418:	str	r5, [sp, #4]
   1941c:	ldr	r1, [sp, #8]
   19420:	cmp	r1, #0
   19424:	rsbmi	r1, r1, #0
   19428:	cmp	r1, r5
   1942c:	movgt	r1, #0
   19430:	strgt	r1, [sp, #8]
   19434:	cmp	r4, #1
   19438:	blt	194a4 <__assert_fail@plt+0x806c>
   1943c:	ldr	r5, [r9, #8]
   19440:	mov	r2, #0
   19444:	cmp	r4, #4
   19448:	bcc	19488 <__assert_fail@plt+0x8050>
   1944c:	add	r1, r5, r4, lsl #2
   19450:	cmp	r0, r1
   19454:	addcc	r1, r0, r4, lsl #2
   19458:	cmpcc	r5, r1
   1945c:	bcc	19488 <__assert_fail@plt+0x8050>
   19460:	bic	r2, r4, #-2147483645	; 0x80000003
   19464:	mov	r7, r0
   19468:	mov	r1, r5
   1946c:	mov	r3, r2
   19470:	vld1.32	{d16-d17}, [r1]!
   19474:	subs	r3, r3, #4
   19478:	vst1.32	{d16-d17}, [r7]!
   1947c:	bne	19470 <__assert_fail@plt+0x8038>
   19480:	cmp	r4, r2
   19484:	beq	194a4 <__assert_fail@plt+0x806c>
   19488:	add	r1, r5, r2, lsl #2
   1948c:	add	r0, r0, r2, lsl #2
   19490:	sub	r2, r4, r2
   19494:	ldr	r3, [r1], #4
   19498:	subs	r2, r2, #1
   1949c:	str	r3, [r0], #4
   194a0:	bne	19494 <__assert_fail@plt+0x805c>
   194a4:	ldr	r0, [r9, #4]
   194a8:	str	r0, [sp, #8]
   194ac:	cmp	r0, #0
   194b0:	rsbmi	r0, r0, #0
   194b4:	cmp	r0, #0
   194b8:	str	r0, [sp, #8]
   194bc:	ble	19ae0 <__assert_fail@plt+0x86a8>
   194c0:	ldr	r2, [sp, #12]
   194c4:	mov	r0, #31
   194c8:	ldr	r1, [r2]
   194cc:	cmp	r1, #0
   194d0:	bne	194ec <__assert_fail@plt+0x80b4>
   194d4:	add	r2, r2, #4
   194d8:	mov	r0, #31
   194dc:	ldr	r1, [r2], #4
   194e0:	add	r0, r0, #32
   194e4:	cmp	r1, #0
   194e8:	beq	194dc <__assert_fail@plt+0x80a4>
   194ec:	rsb	r2, r1, #0
   194f0:	and	r2, r1, r2
   194f4:	mov	r1, #0
   194f8:	cmp	r1, r2, lsr #24
   194fc:	bne	19514 <__assert_fail@plt+0x80dc>
   19500:	mov	r1, #0
   19504:	lsl	r2, r2, #8
   19508:	add	r1, r1, #8
   1950c:	cmp	r2, #16777216	; 0x1000000
   19510:	bcc	19504 <__assert_fail@plt+0x80cc>
   19514:	cmp	r2, #0
   19518:	blt	1952c <__assert_fail@plt+0x80f4>
   1951c:	lsl	r2, r2, #1
   19520:	add	r1, r1, #1
   19524:	cmn	r2, #1
   19528:	bgt	1951c <__assert_fail@plt+0x80e4>
   1952c:	sub	sl, r0, r1
   19530:	add	r0, sp, #4
   19534:	mov	r3, #2
   19538:	mov	r4, #2
   1953c:	mov	r1, r0
   19540:	mov	r2, sl
   19544:	bl	18258 <__assert_fail@plt+0x6e20>
   19548:	ldr	r0, [sp, #8]
   1954c:	ldr	r1, [sp, #20]
   19550:	cmp	r6, sl
   19554:	movcc	sl, r6
   19558:	cmp	r1, r0
   1955c:	bge	19588 <__assert_fail@plt+0x8150>
   19560:	str	r1, [sp, #8]
   19564:	str	r0, [sp, #20]
   19568:	ldr	r0, [sp, #16]
   1956c:	ldr	r1, [sp, #24]
   19570:	ldr	r2, [sp, #4]
   19574:	ldr	r3, [sp, #12]
   19578:	str	r2, [sp, #16]
   1957c:	str	r0, [sp, #4]
   19580:	str	r3, [sp, #24]
   19584:	str	r1, [sp, #12]
   19588:	add	r1, sp, #16
   1958c:	add	r3, sp, #4
   19590:	mov	r0, #0
   19594:	str	r4, [sp]
   19598:	mov	r2, r1
   1959c:	bl	178f0 <__assert_fail@plt+0x64b8>
   195a0:	ldr	r0, [sp, #20]
   195a4:	cmp	r0, #0
   195a8:	beq	19758 <__assert_fail@plt+0x8320>
   195ac:	cmp	r0, #1
   195b0:	blt	19ae0 <__assert_fail@plt+0x86a8>
   195b4:	add	r9, sp, #16
   195b8:	add	r5, sp, #4
   195bc:	ldr	r2, [sp, #24]
   195c0:	mov	r0, #31
   195c4:	ldr	r1, [r2]
   195c8:	cmp	r1, #0
   195cc:	bne	195e8 <__assert_fail@plt+0x81b0>
   195d0:	add	r2, r2, #4
   195d4:	mov	r0, #31
   195d8:	ldr	r1, [r2], #4
   195dc:	add	r0, r0, #32
   195e0:	cmp	r1, #0
   195e4:	beq	195d8 <__assert_fail@plt+0x81a0>
   195e8:	rsb	r2, r1, #0
   195ec:	and	r2, r1, r2
   195f0:	mov	r1, #0
   195f4:	cmp	r1, r2, lsr #24
   195f8:	bne	19610 <__assert_fail@plt+0x81d8>
   195fc:	mov	r1, #0
   19600:	lsl	r2, r2, #8
   19604:	add	r1, r1, #8
   19608:	cmp	r2, #16777216	; 0x1000000
   1960c:	bcc	19600 <__assert_fail@plt+0x81c8>
   19610:	cmp	r2, #0
   19614:	blt	19628 <__assert_fail@plt+0x81f0>
   19618:	lsl	r2, r2, #1
   1961c:	add	r1, r1, #1
   19620:	cmn	r2, #1
   19624:	bgt	19618 <__assert_fail@plt+0x81e0>
   19628:	sub	r2, r0, r1
   1962c:	mov	r0, r9
   19630:	mov	r1, r9
   19634:	mov	r3, #2
   19638:	bl	18258 <__assert_fail@plt+0x6e20>
   1963c:	ldr	r7, [sp, #8]
   19640:	ldr	r1, [sp, #20]
   19644:	cmp	r1, r7
   19648:	bne	19694 <__assert_fail@plt+0x825c>
   1964c:	cmp	r1, #0
   19650:	blt	196f8 <__assert_fail@plt+0x82c0>
   19654:	ldr	r3, [sp, #12]
   19658:	ldr	r2, [sp, #24]
   1965c:	mov	ip, r5
   19660:	mov	r0, r1
   19664:	sub	r4, r3, #4
   19668:	subs	r5, r0, #1
   1966c:	blt	1972c <__assert_fail@plt+0x82f4>
   19670:	ldr	r6, [r4, r0, lsl #2]
   19674:	add	r0, r2, r0, lsl #2
   19678:	ldr	r0, [r0, #-4]
   1967c:	cmp	r0, r6
   19680:	mov	r0, r5
   19684:	beq	19668 <__assert_fail@plt+0x8230>
   19688:	mov	r5, ip
   1968c:	bls	196a0 <__assert_fail@plt+0x8268>
   19690:	b	196d0 <__assert_fail@plt+0x8298>
   19694:	bge	196cc <__assert_fail@plt+0x8294>
   19698:	ldr	r3, [sp, #12]
   1969c:	ldr	r2, [sp, #24]
   196a0:	str	r1, [sp, #8]
   196a4:	str	r2, [sp, #12]
   196a8:	str	r7, [sp, #20]
   196ac:	str	r3, [sp, #24]
   196b0:	ldr	r0, [sp, #16]
   196b4:	ldr	r2, [sp, #4]
   196b8:	str	r2, [sp, #16]
   196bc:	str	r0, [sp, #4]
   196c0:	cmp	r1, #1
   196c4:	bne	196d8 <__assert_fail@plt+0x82a0>
   196c8:	b	19954 <__assert_fail@plt+0x851c>
   196cc:	mov	r1, r7
   196d0:	cmp	r1, #1
   196d4:	beq	19954 <__assert_fail@plt+0x851c>
   196d8:	mov	r0, r9
   196dc:	mov	r1, r9
   196e0:	mov	r2, r5
   196e4:	bl	16f5c <__assert_fail@plt+0x5b24>
   196e8:	ldr	r0, [sp, #20]
   196ec:	cmp	r0, #0
   196f0:	bgt	195bc <__assert_fail@plt+0x8184>
   196f4:	b	19ae0 <__assert_fail@plt+0x86a8>
   196f8:	ldr	r2, [sp, #24]
   196fc:	ldr	r3, [sp, #12]
   19700:	mvn	r4, r1
   19704:	add	r0, r4, #1
   19708:	cmp	r0, #1
   1970c:	blt	1972c <__assert_fail@plt+0x82f4>
   19710:	ldr	r0, [r2, r4, lsl #2]
   19714:	ldr	r6, [r3, r4, lsl #2]
   19718:	sub	r4, r4, #1
   1971c:	cmp	r6, r0
   19720:	beq	19704 <__assert_fail@plt+0x82cc>
   19724:	bls	196a0 <__assert_fail@plt+0x8268>
   19728:	b	196d0 <__assert_fail@plt+0x8298>
   1972c:	ldr	r0, [r8, #4]
   19730:	str	r1, [r8, #4]
   19734:	str	r0, [sp, #20]
   19738:	ldr	r0, [r8]
   1973c:	ldr	r1, [sp, #16]
   19740:	str	r1, [r8]
   19744:	str	r0, [sp, #16]
   19748:	ldr	r0, [r8, #8]
   1974c:	str	r2, [r8, #8]
   19750:	str	r0, [sp, #24]
   19754:	b	19788 <__assert_fail@plt+0x8350>
   19758:	ldr	r0, [r8, #4]
   1975c:	ldr	r1, [sp, #8]
   19760:	str	r1, [r8, #4]
   19764:	str	r0, [sp, #8]
   19768:	ldr	r0, [r8]
   1976c:	ldr	r1, [sp, #4]
   19770:	str	r1, [r8]
   19774:	str	r0, [sp, #4]
   19778:	ldr	r0, [r8, #8]
   1977c:	ldr	r1, [sp, #12]
   19780:	str	r1, [r8, #8]
   19784:	str	r0, [sp, #12]
   19788:	ldr	r0, [sp, #16]
   1978c:	cmp	r0, #0
   19790:	beq	197ac <__assert_fail@plt+0x8374>
   19794:	movw	r1, #37164	; 0x912c
   19798:	movt	r1, #4
   1979c:	ldr	r2, [r1]
   197a0:	lsl	r1, r0, #2
   197a4:	ldr	r0, [sp, #24]
   197a8:	blx	r2
   197ac:	ldr	r0, [sp, #4]
   197b0:	cmp	r0, #0
   197b4:	beq	197d0 <__assert_fail@plt+0x8398>
   197b8:	movw	r1, #37164	; 0x912c
   197bc:	movt	r1, #4
   197c0:	ldr	r2, [r1]
   197c4:	lsl	r1, r0, #2
   197c8:	ldr	r0, [sp, #12]
   197cc:	blx	r2
   197d0:	mov	r0, r8
   197d4:	mov	r1, r8
   197d8:	mov	r2, sl
   197dc:	bl	17474 <__assert_fail@plt+0x603c>
   197e0:	sub	sp, fp, #28
   197e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197e8:	movw	r0, #37156	; 0x9124
   197ec:	movt	r0, #4
   197f0:	ldr	r1, [r0]
   197f4:	lsl	r0, r5, #2
   197f8:	blx	r1
   197fc:	str	r0, [r8, #8]
   19800:	str	r5, [r8]
   19804:	ldr	r1, [r8, #4]
   19808:	cmp	r1, #0
   1980c:	rsbmi	r1, r1, #0
   19810:	cmp	r1, r5
   19814:	movgt	r1, #0
   19818:	strgt	r1, [r8, #4]
   1981c:	cmp	r4, #1
   19820:	blt	1988c <__assert_fail@plt+0x8454>
   19824:	ldr	r5, [r9, #8]
   19828:	mov	r2, #0
   1982c:	cmp	r4, #4
   19830:	bcc	19870 <__assert_fail@plt+0x8438>
   19834:	add	r1, r5, r4, lsl #2
   19838:	cmp	r0, r1
   1983c:	addcc	r1, r0, r4, lsl #2
   19840:	cmpcc	r5, r1
   19844:	bcc	19870 <__assert_fail@plt+0x8438>
   19848:	bic	r2, r4, #-2147483645	; 0x80000003
   1984c:	mov	r7, r0
   19850:	mov	r1, r5
   19854:	mov	r3, r2
   19858:	vld1.32	{d16-d17}, [r1]!
   1985c:	subs	r3, r3, #4
   19860:	vst1.32	{d16-d17}, [r7]!
   19864:	bne	19858 <__assert_fail@plt+0x8420>
   19868:	cmp	r4, r2
   1986c:	beq	1988c <__assert_fail@plt+0x8454>
   19870:	add	r1, r5, r2, lsl #2
   19874:	add	r0, r0, r2, lsl #2
   19878:	sub	r2, r4, r2
   1987c:	ldr	r3, [r1], #4
   19880:	subs	r2, r2, #1
   19884:	str	r3, [r0], #4
   19888:	bne	1987c <__assert_fail@plt+0x8444>
   1988c:	ldr	r4, [r6]
   19890:	b	1993c <__assert_fail@plt+0x8504>
   19894:	movw	r0, #37156	; 0x9124
   19898:	movt	r0, #4
   1989c:	ldr	r1, [r0]
   198a0:	lsl	r0, r5, #2
   198a4:	blx	r1
   198a8:	str	r0, [r8, #8]
   198ac:	str	r5, [r8]
   198b0:	ldr	r1, [r8, #4]
   198b4:	cmp	r1, #0
   198b8:	rsbmi	r1, r1, #0
   198bc:	cmp	r1, r5
   198c0:	movgt	r1, #0
   198c4:	strgt	r1, [r8, #4]
   198c8:	cmp	r4, #1
   198cc:	blt	19938 <__assert_fail@plt+0x8500>
   198d0:	ldr	r5, [r6, #8]
   198d4:	mov	r2, #0
   198d8:	cmp	r4, #4
   198dc:	bcc	1991c <__assert_fail@plt+0x84e4>
   198e0:	add	r1, r5, r4, lsl #2
   198e4:	cmp	r0, r1
   198e8:	addcc	r1, r0, r4, lsl #2
   198ec:	cmpcc	r5, r1
   198f0:	bcc	1991c <__assert_fail@plt+0x84e4>
   198f4:	bic	r2, r4, #-2147483645	; 0x80000003
   198f8:	mov	r6, r0
   198fc:	mov	r1, r5
   19900:	mov	r3, r2
   19904:	vld1.32	{d16-d17}, [r1]!
   19908:	subs	r3, r3, #4
   1990c:	vst1.32	{d16-d17}, [r6]!
   19910:	bne	19904 <__assert_fail@plt+0x84cc>
   19914:	cmp	r4, r2
   19918:	beq	19938 <__assert_fail@plt+0x8500>
   1991c:	add	r1, r5, r2, lsl #2
   19920:	add	r0, r0, r2, lsl #2
   19924:	sub	r2, r4, r2
   19928:	ldr	r3, [r1], #4
   1992c:	subs	r2, r2, #1
   19930:	str	r3, [r0], #4
   19934:	bne	19928 <__assert_fail@plt+0x84f0>
   19938:	ldr	r4, [r7]
   1993c:	str	r4, [r8, #4]!
   19940:	cmp	r4, #0
   19944:	rsbmi	r4, r4, #0
   19948:	str	r4, [r8]
   1994c:	sub	sp, fp, #28
   19950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19954:	mov	r0, #2
   19958:	add	r1, sp, #16
   1995c:	add	r3, sp, #4
   19960:	str	r0, [sp]
   19964:	mov	r0, #0
   19968:	mov	r2, r1
   1996c:	bl	178f0 <__assert_fail@plt+0x64b8>
   19970:	ldr	r1, [r8]
   19974:	cmp	r1, #0
   19978:	ble	19984 <__assert_fail@plt+0x854c>
   1997c:	ldr	r0, [r8, #8]
   19980:	b	199e0 <__assert_fail@plt+0x85a8>
   19984:	beq	199a8 <__assert_fail@plt+0x8570>
   19988:	movw	r0, #37160	; 0x9128
   1998c:	lsl	r1, r1, #2
   19990:	mov	r2, #4
   19994:	movt	r0, #4
   19998:	ldr	r3, [r0]
   1999c:	ldr	r0, [r8, #8]
   199a0:	blx	r3
   199a4:	b	199bc <__assert_fail@plt+0x8584>
   199a8:	movw	r0, #37156	; 0x9124
   199ac:	movt	r0, #4
   199b0:	ldr	r1, [r0]
   199b4:	mov	r0, #4
   199b8:	blx	r1
   199bc:	mov	r1, #1
   199c0:	str	r0, [r8, #8]
   199c4:	str	r1, [r8]
   199c8:	ldr	r1, [r8, #4]
   199cc:	cmp	r1, #0
   199d0:	rsbmi	r1, r1, #0
   199d4:	cmp	r1, #2
   199d8:	movge	r1, #0
   199dc:	strge	r1, [r8, #4]
   199e0:	ldr	r1, [sp, #24]
   199e4:	ldr	r2, [sp, #12]
   199e8:	ldr	r1, [r1]
   199ec:	ldr	r2, [r2]
   199f0:	orrs	r3, r2, r1
   199f4:	beq	19b00 <__assert_fail@plt+0x86c8>
   199f8:	cmp	r1, #0
   199fc:	beq	19ac8 <__assert_fail@plt+0x8690>
   19a00:	cmp	r2, #0
   19a04:	beq	19ac4 <__assert_fail@plt+0x868c>
   19a08:	rsb	r7, r3, #0
   19a0c:	and	r7, r3, r7
   19a10:	mov	r3, #0
   19a14:	cmp	r3, r7, lsr #24
   19a18:	bne	19a30 <__assert_fail@plt+0x85f8>
   19a1c:	mov	r3, #0
   19a20:	lsl	r7, r7, #8
   19a24:	add	r3, r3, #8
   19a28:	cmp	r7, #16777216	; 0x1000000
   19a2c:	bcc	19a20 <__assert_fail@plt+0x85e8>
   19a30:	cmp	r7, #0
   19a34:	blt	19a48 <__assert_fail@plt+0x8610>
   19a38:	lsl	r7, r7, #1
   19a3c:	add	r3, r3, #1
   19a40:	cmn	r7, #1
   19a44:	bgt	19a38 <__assert_fail@plt+0x8600>
   19a48:	rsb	r3, r3, #31
   19a4c:	mov	r7, #1
   19a50:	and	r6, r7, r1, lsr r3
   19a54:	lsr	r2, r2, r3
   19a58:	cmp	r6, #0
   19a5c:	mov	r4, r2
   19a60:	lsreq	r4, r1, r3
   19a64:	mov	r7, r4
   19a68:	lsr	r4, r4, #1
   19a6c:	tst	r7, #1
   19a70:	beq	19a64 <__assert_fail@plt+0x862c>
   19a74:	cmp	r6, #0
   19a78:	lsrne	r2, r1, r3
   19a7c:	b	19ab4 <__assert_fail@plt+0x867c>
   19a80:	cmp	r2, r7
   19a84:	bls	19aa0 <__assert_fail@plt+0x8668>
   19a88:	sub	r1, r2, r7
   19a8c:	lsr	r2, r1, #1
   19a90:	tst	r1, #2
   19a94:	mov	r1, r2
   19a98:	beq	19a8c <__assert_fail@plt+0x8654>
   19a9c:	b	19ab4 <__assert_fail@plt+0x867c>
   19aa0:	sub	r1, r7, r2
   19aa4:	lsr	r7, r1, #1
   19aa8:	tst	r1, #2
   19aac:	mov	r1, r7
   19ab0:	beq	19aa4 <__assert_fail@plt+0x866c>
   19ab4:	cmp	r2, r7
   19ab8:	bne	19a80 <__assert_fail@plt+0x8648>
   19abc:	lsl	r2, r7, r3
   19ac0:	b	19ac8 <__assert_fail@plt+0x8690>
   19ac4:	mov	r2, r1
   19ac8:	cmp	r2, #0
   19acc:	str	r2, [r0]
   19ad0:	movwne	r2, #1
   19ad4:	str	r2, [r8, #4]
   19ad8:	b	19788 <__assert_fail@plt+0x8350>
   19adc:	str	r1, [sp, #20]
   19ae0:	movw	r0, #29826	; 0x7482
   19ae4:	movw	r1, #26324	; 0x66d4
   19ae8:	movw	r3, #29842	; 0x7492
   19aec:	movw	r2, #2723	; 0xaa3
   19af0:	movt	r0, #3
   19af4:	movt	r1, #3
   19af8:	movt	r3, #3
   19afc:	bl	11438 <__assert_fail@plt>
   19b00:	movw	r0, #29883	; 0x74bb
   19b04:	movw	r1, #26324	; 0x66d4
   19b08:	movw	r3, #29895	; 0x74c7
   19b0c:	movw	r2, #2663	; 0xa67
   19b10:	movt	r0, #3
   19b14:	movt	r1, #3
   19b18:	movt	r3, #3
   19b1c:	bl	11438 <__assert_fail@plt>
   19b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b24:	add	fp, sp, #28
   19b28:	sub	sp, sp, #100	; 0x64
   19b2c:	ldr	r5, [fp, #8]
   19b30:	mov	r7, r3
   19b34:	mov	r9, r2
   19b38:	mov	ip, r0
   19b3c:	ldr	r4, [r7, #4]!
   19b40:	mov	sl, r5
   19b44:	ldr	r6, [sl, #4]!
   19b48:	cmp	r4, #0
   19b4c:	beq	19d78 <__assert_fail@plt+0x8940>
   19b50:	mov	r8, r3
   19b54:	cmp	r6, #0
   19b58:	beq	19de4 <__assert_fail@plt+0x89ac>
   19b5c:	movw	r0, #26320	; 0x66d0
   19b60:	sub	r2, fp, #40	; 0x28
   19b64:	str	r1, [sp, #20]
   19b68:	mov	r1, #0
   19b6c:	movt	r0, #3
   19b70:	cmp	r2, r8
   19b74:	str	r1, [fp, #-36]	; 0xffffffdc
   19b78:	str	r1, [fp, #-40]	; 0xffffffd8
   19b7c:	str	r1, [fp, #-52]	; 0xffffffcc
   19b80:	str	r1, [fp, #-48]	; 0xffffffd0
   19b84:	str	r1, [sp, #64]	; 0x40
   19b88:	str	r1, [sp, #68]	; 0x44
   19b8c:	str	r1, [sp, #52]	; 0x34
   19b90:	str	r1, [sp, #56]	; 0x38
   19b94:	str	r1, [sp, #40]	; 0x28
   19b98:	str	r1, [sp, #44]	; 0x2c
   19b9c:	str	r1, [sp, #28]
   19ba0:	str	r1, [sp, #32]
   19ba4:	str	r0, [fp, #-32]	; 0xffffffe0
   19ba8:	str	r0, [fp, #-44]	; 0xffffffd4
   19bac:	str	r0, [sp, #72]	; 0x48
   19bb0:	str	r0, [sp, #60]	; 0x3c
   19bb4:	str	r0, [sp, #48]	; 0x30
   19bb8:	str	r0, [sp, #36]	; 0x24
   19bbc:	beq	1aa4c <__assert_fail@plt+0x9614>
   19bc0:	cmp	r4, #0
   19bc4:	mov	r6, r4
   19bc8:	rsbmi	r6, r4, #0
   19bcc:	cmp	r6, #1
   19bd0:	blt	19c84 <__assert_fail@plt+0x884c>
   19bd4:	movw	r0, #37156	; 0x9124
   19bd8:	mov	r4, ip
   19bdc:	movt	r0, #4
   19be0:	ldr	r1, [r0]
   19be4:	lsl	r0, r6, #2
   19be8:	blx	r1
   19bec:	str	r0, [fp, #-32]	; 0xffffffe0
   19bf0:	str	r6, [fp, #-40]	; 0xffffffd8
   19bf4:	mov	ip, r4
   19bf8:	mov	r2, #0
   19bfc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19c00:	cmp	r1, #0
   19c04:	rsbmi	r1, r1, #0
   19c08:	cmp	r1, r6
   19c0c:	movgt	r1, #0
   19c10:	strgt	r1, [fp, #-36]	; 0xffffffdc
   19c14:	cmp	r6, #4
   19c18:	ldr	r5, [r8, #8]
   19c1c:	bcc	19c60 <__assert_fail@plt+0x8828>
   19c20:	add	r1, r5, r6, lsl #2
   19c24:	cmp	r0, r1
   19c28:	bcs	19c38 <__assert_fail@plt+0x8800>
   19c2c:	add	r1, r0, r6, lsl #2
   19c30:	cmp	r1, r5
   19c34:	bhi	19c60 <__assert_fail@plt+0x8828>
   19c38:	bic	r2, r6, #-2147483645	; 0x80000003
   19c3c:	mov	r4, r0
   19c40:	mov	r1, r5
   19c44:	mov	r3, r2
   19c48:	vld1.32	{d16-d17}, [r1]!
   19c4c:	subs	r3, r3, #4
   19c50:	vst1.32	{d16-d17}, [r4]!
   19c54:	bne	19c48 <__assert_fail@plt+0x8810>
   19c58:	cmp	r6, r2
   19c5c:	beq	19c7c <__assert_fail@plt+0x8844>
   19c60:	add	r1, r5, r2, lsl #2
   19c64:	add	r3, r0, r2, lsl #2
   19c68:	sub	r2, r6, r2
   19c6c:	ldr	r6, [r1], #4
   19c70:	subs	r2, r2, #1
   19c74:	str	r6, [r3], #4
   19c78:	bne	19c6c <__assert_fail@plt+0x8834>
   19c7c:	ldr	r4, [r7]
   19c80:	ldr	r5, [fp, #8]
   19c84:	rsb	r1, r4, #0
   19c88:	cmp	r4, #0
   19c8c:	movge	r1, r4
   19c90:	cmp	r1, #0
   19c94:	str	r1, [fp, #-36]	; 0xffffffdc
   19c98:	beq	1aa50 <__assert_fail@plt+0x9618>
   19c9c:	ldr	r2, [r0]
   19ca0:	mov	r1, #31
   19ca4:	cmp	r2, #0
   19ca8:	bne	19cc4 <__assert_fail@plt+0x888c>
   19cac:	add	r0, r0, #4
   19cb0:	mov	r1, #31
   19cb4:	ldr	r2, [r0], #4
   19cb8:	add	r1, r1, #32
   19cbc:	cmp	r2, #0
   19cc0:	beq	19cb4 <__assert_fail@plt+0x887c>
   19cc4:	rsb	r0, r2, #0
   19cc8:	and	r2, r2, r0
   19ccc:	mov	r0, #0
   19cd0:	cmp	r0, r2, lsr #24
   19cd4:	bne	19cec <__assert_fail@plt+0x88b4>
   19cd8:	mov	r0, #0
   19cdc:	lsl	r2, r2, #8
   19ce0:	add	r0, r0, #8
   19ce4:	cmp	r2, #16777216	; 0x1000000
   19ce8:	bcc	19cdc <__assert_fail@plt+0x88a4>
   19cec:	cmp	r2, #0
   19cf0:	str	ip, [sp, #12]
   19cf4:	blt	19d08 <__assert_fail@plt+0x88d0>
   19cf8:	lsl	r2, r2, #1
   19cfc:	add	r0, r0, #1
   19d00:	cmn	r2, #1
   19d04:	bgt	19cf8 <__assert_fail@plt+0x88c0>
   19d08:	sub	r4, r1, r0
   19d0c:	sub	r0, fp, #40	; 0x28
   19d10:	mov	r3, #2
   19d14:	mov	r1, r0
   19d18:	mov	r2, r4
   19d1c:	bl	18258 <__assert_fail@plt+0x6e20>
   19d20:	sub	r0, fp, #52	; 0x34
   19d24:	cmp	r0, r5
   19d28:	beq	19e50 <__assert_fail@plt+0x8a18>
   19d2c:	ldr	r6, [sl]
   19d30:	ldr	r1, [fp, #-52]	; 0xffffffcc
   19d34:	cmp	r6, #0
   19d38:	rsbmi	r6, r6, #0
   19d3c:	cmp	r6, r1
   19d40:	ble	19e60 <__assert_fail@plt+0x8a28>
   19d44:	cmp	r6, #1
   19d48:	mov	r7, r6
   19d4c:	movle	r7, #1
   19d50:	cmp	r1, #0
   19d54:	beq	19e98 <__assert_fail@plt+0x8a60>
   19d58:	movw	r0, #37160	; 0x9128
   19d5c:	lsl	r1, r1, #2
   19d60:	lsl	r2, r7, #2
   19d64:	movt	r0, #4
   19d68:	ldr	r3, [r0]
   19d6c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19d70:	blx	r3
   19d74:	b	19eac <__assert_fail@plt+0x8a74>
   19d78:	mov	r0, #1
   19d7c:	asr	r8, r6, #31
   19d80:	cmp	r6, #0
   19d84:	addgt	r8, r0, r6, asr #31
   19d88:	cmp	ip, r5
   19d8c:	beq	19e58 <__assert_fail@plt+0x8a20>
   19d90:	str	r9, [sp, #24]
   19d94:	mov	r9, r1
   19d98:	ldr	r1, [ip]
   19d9c:	cmp	r6, #0
   19da0:	rsbmi	r6, r6, #0
   19da4:	cmp	r6, r1
   19da8:	ble	19e70 <__assert_fail@plt+0x8a38>
   19dac:	cmp	r6, #1
   19db0:	mov	r7, r6
   19db4:	movle	r7, #1
   19db8:	cmp	r1, #0
   19dbc:	beq	1a824 <__assert_fail@plt+0x93ec>
   19dc0:	movw	r0, #37160	; 0x9128
   19dc4:	lsl	r1, r1, #2
   19dc8:	lsl	r2, r7, #2
   19dcc:	mov	r4, ip
   19dd0:	movt	r0, #4
   19dd4:	ldr	r3, [r0]
   19dd8:	ldr	r0, [ip, #8]
   19ddc:	blx	r3
   19de0:	b	1a83c <__assert_fail@plt+0x9404>
   19de4:	mov	r0, #1
   19de8:	asr	sl, r4, #31
   19dec:	cmp	r4, #0
   19df0:	addgt	sl, r0, r4, asr #31
   19df4:	cmp	ip, r8
   19df8:	beq	19e80 <__assert_fail@plt+0x8a48>
   19dfc:	str	r9, [sp, #24]
   19e00:	mov	r9, r1
   19e04:	ldr	r1, [ip]
   19e08:	cmp	r4, #0
   19e0c:	rsbmi	r4, r4, #0
   19e10:	cmp	r4, r1
   19e14:	ble	19e88 <__assert_fail@plt+0x8a50>
   19e18:	cmp	r4, #1
   19e1c:	mov	r6, r4
   19e20:	movle	r6, #1
   19e24:	cmp	r1, #0
   19e28:	beq	1a914 <__assert_fail@plt+0x94dc>
   19e2c:	movw	r0, #37160	; 0x9128
   19e30:	lsl	r1, r1, #2
   19e34:	lsl	r2, r6, #2
   19e38:	mov	r5, ip
   19e3c:	movt	r0, #4
   19e40:	ldr	r3, [r0]
   19e44:	ldr	r0, [ip, #8]
   19e48:	blx	r3
   19e4c:	b	1a92c <__assert_fail@plt+0x94f4>
   19e50:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19e54:	b	19f48 <__assert_fail@plt+0x8b10>
   19e58:	mov	ip, sl
   19e5c:	b	1a8e0 <__assert_fail@plt+0x94a8>
   19e60:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19e64:	cmp	r6, #1
   19e68:	bge	19ed4 <__assert_fail@plt+0x8a9c>
   19e6c:	b	19f40 <__assert_fail@plt+0x8b08>
   19e70:	ldr	r0, [ip, #8]
   19e74:	cmp	r6, #1
   19e78:	bge	1a868 <__assert_fail@plt+0x9430>
   19e7c:	b	1a8d0 <__assert_fail@plt+0x9498>
   19e80:	mov	ip, r7
   19e84:	b	1a9d0 <__assert_fail@plt+0x9598>
   19e88:	ldr	r0, [ip, #8]
   19e8c:	cmp	r4, #1
   19e90:	bge	1a958 <__assert_fail@plt+0x9520>
   19e94:	b	1a9c0 <__assert_fail@plt+0x9588>
   19e98:	movw	r0, #37156	; 0x9124
   19e9c:	movt	r0, #4
   19ea0:	ldr	r1, [r0]
   19ea4:	lsl	r0, r7, #2
   19ea8:	blx	r1
   19eac:	str	r0, [fp, #-44]	; 0xffffffd4
   19eb0:	str	r7, [fp, #-52]	; 0xffffffcc
   19eb4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   19eb8:	cmp	r1, #0
   19ebc:	rsbmi	r1, r1, #0
   19ec0:	cmp	r1, r7
   19ec4:	movgt	r1, #0
   19ec8:	strgt	r1, [fp, #-48]	; 0xffffffd0
   19ecc:	cmp	r6, #1
   19ed0:	blt	19f40 <__assert_fail@plt+0x8b08>
   19ed4:	ldr	r1, [fp, #8]
   19ed8:	mov	r2, #0
   19edc:	cmp	r6, #4
   19ee0:	ldr	r5, [r1, #8]
   19ee4:	bcc	19f24 <__assert_fail@plt+0x8aec>
   19ee8:	add	r1, r5, r6, lsl #2
   19eec:	cmp	r0, r1
   19ef0:	addcc	r1, r0, r6, lsl #2
   19ef4:	cmpcc	r5, r1
   19ef8:	bcc	19f24 <__assert_fail@plt+0x8aec>
   19efc:	bic	r2, r6, #-2147483645	; 0x80000003
   19f00:	mov	r7, r0
   19f04:	mov	r1, r5
   19f08:	mov	r3, r2
   19f0c:	vld1.32	{d16-d17}, [r1]!
   19f10:	subs	r3, r3, #4
   19f14:	vst1.32	{d16-d17}, [r7]!
   19f18:	bne	19f0c <__assert_fail@plt+0x8ad4>
   19f1c:	cmp	r6, r2
   19f20:	beq	19f40 <__assert_fail@plt+0x8b08>
   19f24:	add	r1, r5, r2, lsl #2
   19f28:	add	r0, r0, r2, lsl #2
   19f2c:	sub	r2, r6, r2
   19f30:	ldr	r3, [r1], #4
   19f34:	subs	r2, r2, #1
   19f38:	str	r3, [r0], #4
   19f3c:	bne	19f30 <__assert_fail@plt+0x8af8>
   19f40:	ldr	r0, [sl]
   19f44:	str	r0, [fp, #-48]	; 0xffffffd0
   19f48:	cmp	r0, #0
   19f4c:	rsbmi	r0, r0, #0
   19f50:	cmp	r0, #0
   19f54:	str	r0, [fp, #-48]	; 0xffffffd0
   19f58:	ble	1aa50 <__assert_fail@plt+0x9618>
   19f5c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   19f60:	mov	r0, #31
   19f64:	ldr	r1, [r2]
   19f68:	cmp	r1, #0
   19f6c:	bne	19f88 <__assert_fail@plt+0x8b50>
   19f70:	add	r2, r2, #4
   19f74:	mov	r0, #31
   19f78:	ldr	r1, [r2], #4
   19f7c:	add	r0, r0, #32
   19f80:	cmp	r1, #0
   19f84:	beq	19f78 <__assert_fail@plt+0x8b40>
   19f88:	rsb	r2, r1, #0
   19f8c:	and	r2, r1, r2
   19f90:	mov	r1, #0
   19f94:	cmp	r1, r2, lsr #24
   19f98:	bne	19fb0 <__assert_fail@plt+0x8b78>
   19f9c:	mov	r1, #0
   19fa0:	lsl	r2, r2, #8
   19fa4:	add	r1, r1, #8
   19fa8:	cmp	r2, #16777216	; 0x1000000
   19fac:	bcc	19fa0 <__assert_fail@plt+0x8b68>
   19fb0:	cmp	r2, #0
   19fb4:	str	r9, [sp, #24]
   19fb8:	blt	19fcc <__assert_fail@plt+0x8b94>
   19fbc:	lsl	r2, r2, #1
   19fc0:	add	r1, r1, #1
   19fc4:	cmn	r2, #1
   19fc8:	bgt	19fbc <__assert_fail@plt+0x8b84>
   19fcc:	sub	r5, r0, r1
   19fd0:	sub	r0, fp, #52	; 0x34
   19fd4:	mov	r3, #2
   19fd8:	mov	r6, #2
   19fdc:	mov	r1, r0
   19fe0:	mov	r2, r5
   19fe4:	bl	18258 <__assert_fail@plt+0x6e20>
   19fe8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   19fec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   19ff0:	cmp	r4, r5
   19ff4:	mov	sl, r5
   19ff8:	movcc	sl, r4
   19ffc:	sub	r9, r5, sl
   1a000:	sub	r0, r4, sl
   1a004:	cmp	r2, r1
   1a008:	bge	1a04c <__assert_fail@plt+0x8c14>
   1a00c:	str	r2, [fp, #-48]	; 0xffffffd0
   1a010:	str	r1, [fp, #-36]	; 0xffffffdc
   1a014:	mov	r4, r0
   1a018:	ldr	r0, [sp, #20]
   1a01c:	ldr	r5, [fp, #8]
   1a020:	str	r8, [sp, #16]
   1a024:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1a028:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a02c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1a030:	ldr	r7, [fp, #-44]	; 0xffffffd4
   1a034:	str	r0, [sp, #8]
   1a038:	str	r3, [fp, #-40]	; 0xffffffd8
   1a03c:	str	r1, [fp, #-52]	; 0xffffffcc
   1a040:	str	r7, [fp, #-32]	; 0xffffffe0
   1a044:	str	r2, [fp, #-44]	; 0xffffffd4
   1a048:	b	1a070 <__assert_fail@plt+0x8c38>
   1a04c:	mov	r4, r9
   1a050:	mov	r9, r0
   1a054:	ldr	r0, [fp, #8]
   1a058:	mov	r5, r8
   1a05c:	str	r0, [sp, #16]
   1a060:	ldr	r0, [sp, #24]
   1a064:	str	r0, [sp, #8]
   1a068:	ldr	r0, [sp, #20]
   1a06c:	str	r0, [sp, #24]
   1a070:	str	r6, [sp]
   1a074:	add	r6, sp, #28
   1a078:	sub	r1, fp, #40	; 0x28
   1a07c:	sub	r3, fp, #52	; 0x34
   1a080:	mov	r0, r6
   1a084:	mov	r2, r1
   1a088:	bl	178f0 <__assert_fail@plt+0x64b8>
   1a08c:	mov	r0, r6
   1a090:	mov	r1, r6
   1a094:	mov	r2, r9
   1a098:	bl	17474 <__assert_fail@plt+0x603c>
   1a09c:	ldr	r0, [sp, #56]	; 0x38
   1a0a0:	str	r5, [sp, #20]
   1a0a4:	cmp	r0, #0
   1a0a8:	mov	r1, r0
   1a0ac:	rsbmi	r1, r0, #0
   1a0b0:	cmp	r1, r4, lsr #5
   1a0b4:	ble	1a134 <__assert_fail@plt+0x8cfc>
   1a0b8:	ldr	r3, [sp, #60]	; 0x3c
   1a0bc:	lsr	r5, r4, #5
   1a0c0:	and	r7, r4, #31
   1a0c4:	mov	r1, #1
   1a0c8:	cmn	r0, #1
   1a0cc:	ldr	r6, [r3, r5, lsl #2]
   1a0d0:	and	r1, r1, r6, lsr r7
   1a0d4:	bgt	1a110 <__assert_fail@plt+0x8cd8>
   1a0d8:	cmp	r7, #0
   1a0dc:	beq	1a0f0 <__assert_fail@plt+0x8cb8>
   1a0e0:	rsb	r2, r7, #32
   1a0e4:	mov	r7, #0
   1a0e8:	cmp	r7, r6, lsl r2
   1a0ec:	bne	1a10c <__assert_fail@plt+0x8cd4>
   1a0f0:	sub	r3, r3, #4
   1a0f4:	subs	r2, r5, #1
   1a0f8:	blt	1a110 <__assert_fail@plt+0x8cd8>
   1a0fc:	ldr	r7, [r3, r5, lsl #2]
   1a100:	mov	r5, r2
   1a104:	cmp	r7, #0
   1a108:	beq	1a0f4 <__assert_fail@plt+0x8cbc>
   1a10c:	eor	r1, r1, #1
   1a110:	ldr	r5, [sp, #20]
   1a114:	cmp	r1, #0
   1a118:	bne	1a150 <__assert_fail@plt+0x8d18>
   1a11c:	cmp	r0, #0
   1a120:	blt	1a144 <__assert_fail@plt+0x8d0c>
   1a124:	add	r0, sp, #52	; 0x34
   1a128:	mov	r1, r4
   1a12c:	bl	1e6a4 <__assert_fail@plt+0xd26c>
   1a130:	b	1a150 <__assert_fail@plt+0x8d18>
   1a134:	lsr	r1, r0, #31
   1a138:	cmp	r1, #0
   1a13c:	bne	1a150 <__assert_fail@plt+0x8d18>
   1a140:	b	1a11c <__assert_fail@plt+0x8ce4>
   1a144:	add	r0, sp, #52	; 0x34
   1a148:	mov	r1, r4
   1a14c:	bl	1e884 <__assert_fail@plt+0xd44c>
   1a150:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a154:	add	r8, r9, r4
   1a158:	cmp	r0, #1
   1a15c:	blt	1a454 <__assert_fail@plt+0x901c>
   1a160:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a164:	mov	r0, #31
   1a168:	ldr	r1, [r2]
   1a16c:	cmp	r1, #0
   1a170:	bne	1a18c <__assert_fail@plt+0x8d54>
   1a174:	add	r2, r2, #4
   1a178:	mov	r0, #31
   1a17c:	ldr	r1, [r2], #4
   1a180:	add	r0, r0, #32
   1a184:	cmp	r1, #0
   1a188:	beq	1a17c <__assert_fail@plt+0x8d44>
   1a18c:	rsb	r2, r1, #0
   1a190:	and	r2, r1, r2
   1a194:	mov	r1, #0
   1a198:	cmp	r1, r2, lsr #24
   1a19c:	bne	1a1b4 <__assert_fail@plt+0x8d7c>
   1a1a0:	mov	r1, #0
   1a1a4:	lsl	r2, r2, #8
   1a1a8:	add	r1, r1, #8
   1a1ac:	cmp	r2, #16777216	; 0x1000000
   1a1b0:	bcc	1a1a4 <__assert_fail@plt+0x8d6c>
   1a1b4:	cmp	r2, #0
   1a1b8:	blt	1a1cc <__assert_fail@plt+0x8d94>
   1a1bc:	lsl	r2, r2, #1
   1a1c0:	add	r1, r1, #1
   1a1c4:	cmn	r2, #1
   1a1c8:	bgt	1a1bc <__assert_fail@plt+0x8d84>
   1a1cc:	sub	r4, r0, r1
   1a1d0:	sub	r6, fp, #40	; 0x28
   1a1d4:	mov	r3, #2
   1a1d8:	mov	r0, r6
   1a1dc:	mov	r1, r6
   1a1e0:	mov	r2, r4
   1a1e4:	bl	18258 <__assert_fail@plt+0x6e20>
   1a1e8:	add	r5, sp, #40	; 0x28
   1a1ec:	add	r1, r4, r9
   1a1f0:	mov	r0, r5
   1a1f4:	bl	1e6a4 <__assert_fail@plt+0xd26c>
   1a1f8:	ldr	r9, [sp, #24]
   1a1fc:	add	r8, r4, r8
   1a200:	add	r7, sp, #52	; 0x34
   1a204:	b	1a214 <__assert_fail@plt+0x8ddc>
   1a208:	mov	r2, r4
   1a20c:	bl	17474 <__assert_fail@plt+0x603c>
   1a210:	add	r8, r4, r8
   1a214:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1a218:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a21c:	cmp	r0, r1
   1a220:	bne	1a25c <__assert_fail@plt+0x8e24>
   1a224:	cmp	r0, #0
   1a228:	blt	1a33c <__assert_fail@plt+0x8f04>
   1a22c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1a230:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a234:	sub	r1, r1, #4
   1a238:	sub	r2, r2, #4
   1a23c:	subs	r3, r0, #1
   1a240:	blt	1a44c <__assert_fail@plt+0x9014>
   1a244:	ldr	r4, [r2, r0, lsl #2]
   1a248:	ldr	r0, [r1, r0, lsl #2]
   1a24c:	cmp	r0, r4
   1a250:	mov	r0, r3
   1a254:	beq	1a23c <__assert_fail@plt+0x8e04>
   1a258:	b	1a36c <__assert_fail@plt+0x8f34>
   1a25c:	bge	1a370 <__assert_fail@plt+0x8f38>
   1a260:	sub	r0, fp, #52	; 0x34
   1a264:	mov	r2, r6
   1a268:	mov	r1, r0
   1a26c:	bl	16f5c <__assert_fail@plt+0x5b24>
   1a270:	mov	r0, r5
   1a274:	mov	r1, r5
   1a278:	add	r2, sp, #28
   1a27c:	bl	16780 <__assert_fail@plt+0x5348>
   1a280:	add	r0, sp, #64	; 0x40
   1a284:	mov	r2, r7
   1a288:	mov	r1, r0
   1a28c:	bl	16780 <__assert_fail@plt+0x5348>
   1a290:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a294:	cmp	r0, #0
   1a298:	ble	1aa50 <__assert_fail@plt+0x9618>
   1a29c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a2a0:	mov	r0, #31
   1a2a4:	ldr	r1, [r2]
   1a2a8:	cmp	r1, #0
   1a2ac:	bne	1a2c8 <__assert_fail@plt+0x8e90>
   1a2b0:	add	r2, r2, #4
   1a2b4:	mov	r0, #31
   1a2b8:	ldr	r1, [r2], #4
   1a2bc:	add	r0, r0, #32
   1a2c0:	cmp	r1, #0
   1a2c4:	beq	1a2b8 <__assert_fail@plt+0x8e80>
   1a2c8:	rsb	r2, r1, #0
   1a2cc:	and	r2, r1, r2
   1a2d0:	mov	r1, #0
   1a2d4:	cmp	r1, r2, lsr #24
   1a2d8:	bne	1a2f0 <__assert_fail@plt+0x8eb8>
   1a2dc:	mov	r1, #0
   1a2e0:	lsl	r2, r2, #8
   1a2e4:	add	r1, r1, #8
   1a2e8:	cmp	r2, #16777216	; 0x1000000
   1a2ec:	bcc	1a2e0 <__assert_fail@plt+0x8ea8>
   1a2f0:	cmp	r2, #0
   1a2f4:	blt	1a308 <__assert_fail@plt+0x8ed0>
   1a2f8:	lsl	r2, r2, #1
   1a2fc:	add	r1, r1, #1
   1a300:	cmn	r2, #1
   1a304:	bgt	1a2f8 <__assert_fail@plt+0x8ec0>
   1a308:	sub	r4, r0, r1
   1a30c:	sub	r0, fp, #52	; 0x34
   1a310:	mov	r3, #2
   1a314:	mov	r1, r0
   1a318:	mov	r2, r4
   1a31c:	bl	18258 <__assert_fail@plt+0x6e20>
   1a320:	add	r0, sp, #28
   1a324:	mov	r2, r4
   1a328:	mov	r1, r0
   1a32c:	bl	17474 <__assert_fail@plt+0x603c>
   1a330:	mov	r0, r7
   1a334:	mov	r1, r7
   1a338:	b	1a208 <__assert_fail@plt+0x8dd0>
   1a33c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a340:	rsb	r1, r0, #0
   1a344:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a348:	sub	r0, r0, #4
   1a34c:	sub	r2, r2, #4
   1a350:	subs	r3, r1, #1
   1a354:	blt	1a44c <__assert_fail@plt+0x9014>
   1a358:	ldr	r4, [r2, r1, lsl #2]
   1a35c:	ldr	r1, [r0, r1, lsl #2]
   1a360:	cmp	r1, r4
   1a364:	mov	r1, r3
   1a368:	beq	1a350 <__assert_fail@plt+0x8f18>
   1a36c:	bls	1a260 <__assert_fail@plt+0x8e28>
   1a370:	mov	r0, r6
   1a374:	mov	r1, r6
   1a378:	sub	r2, fp, #52	; 0x34
   1a37c:	bl	16f5c <__assert_fail@plt+0x5b24>
   1a380:	add	r0, sp, #28
   1a384:	mov	r1, r5
   1a388:	mov	r2, r0
   1a38c:	bl	16780 <__assert_fail@plt+0x5348>
   1a390:	mov	r0, r7
   1a394:	add	r1, sp, #64	; 0x40
   1a398:	mov	r2, r7
   1a39c:	bl	16780 <__assert_fail@plt+0x5348>
   1a3a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a3a4:	cmp	r0, #0
   1a3a8:	ble	1aa50 <__assert_fail@plt+0x9618>
   1a3ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a3b0:	mov	r0, #31
   1a3b4:	ldr	r1, [r2]
   1a3b8:	cmp	r1, #0
   1a3bc:	bne	1a3d8 <__assert_fail@plt+0x8fa0>
   1a3c0:	add	r2, r2, #4
   1a3c4:	mov	r0, #31
   1a3c8:	ldr	r1, [r2], #4
   1a3cc:	add	r0, r0, #32
   1a3d0:	cmp	r1, #0
   1a3d4:	beq	1a3c8 <__assert_fail@plt+0x8f90>
   1a3d8:	rsb	r2, r1, #0
   1a3dc:	and	r2, r1, r2
   1a3e0:	mov	r1, #0
   1a3e4:	cmp	r1, r2, lsr #24
   1a3e8:	bne	1a400 <__assert_fail@plt+0x8fc8>
   1a3ec:	mov	r1, #0
   1a3f0:	lsl	r2, r2, #8
   1a3f4:	add	r1, r1, #8
   1a3f8:	cmp	r2, #16777216	; 0x1000000
   1a3fc:	bcc	1a3f0 <__assert_fail@plt+0x8fb8>
   1a400:	cmp	r2, #0
   1a404:	blt	1a418 <__assert_fail@plt+0x8fe0>
   1a408:	lsl	r2, r2, #1
   1a40c:	add	r1, r1, #1
   1a410:	cmn	r2, #1
   1a414:	bgt	1a408 <__assert_fail@plt+0x8fd0>
   1a418:	sub	r4, r0, r1
   1a41c:	mov	r0, r6
   1a420:	mov	r1, r6
   1a424:	mov	r3, #2
   1a428:	mov	r2, r4
   1a42c:	bl	18258 <__assert_fail@plt+0x6e20>
   1a430:	mov	r0, r5
   1a434:	mov	r1, r5
   1a438:	mov	r2, r4
   1a43c:	bl	17474 <__assert_fail@plt+0x603c>
   1a440:	add	r0, sp, #64	; 0x40
   1a444:	mov	r1, r0
   1a448:	b	1a208 <__assert_fail@plt+0x8dd0>
   1a44c:	ldr	r5, [sp, #20]
   1a450:	b	1a464 <__assert_fail@plt+0x902c>
   1a454:	add	r0, sp, #40	; 0x28
   1a458:	mov	r1, r9
   1a45c:	bl	1e6a4 <__assert_fail@plt+0xd26c>
   1a460:	ldr	r9, [sp, #24]
   1a464:	sub	r4, fp, #52	; 0x34
   1a468:	mov	r2, sl
   1a46c:	mov	r0, r4
   1a470:	mov	r1, r4
   1a474:	bl	17474 <__assert_fail@plt+0x603c>
   1a478:	ldr	r0, [sp, #68]	; 0x44
   1a47c:	ldr	r2, [sp, #16]
   1a480:	mov	r1, #0
   1a484:	mov	r3, r4
   1a488:	rsb	r6, r0, #0
   1a48c:	mov	r0, #2
   1a490:	str	r0, [sp]
   1a494:	add	r0, sp, #52	; 0x34
   1a498:	str	r6, [sp, #68]	; 0x44
   1a49c:	bl	178f0 <__assert_fail@plt+0x64b8>
   1a4a0:	cmp	r0, #0
   1a4a4:	bne	1aa2c <__assert_fail@plt+0x95f4>
   1a4a8:	ldr	r0, [sp, #56]	; 0x38
   1a4ac:	sub	r3, fp, #52	; 0x34
   1a4b0:	mov	r1, #0
   1a4b4:	mov	r2, r5
   1a4b8:	cmp	r0, #0
   1a4bc:	rsbmi	r0, r0, #0
   1a4c0:	str	r0, [sp, #56]	; 0x38
   1a4c4:	mov	r0, #2
   1a4c8:	str	r0, [sp]
   1a4cc:	add	r0, sp, #28
   1a4d0:	bl	178f0 <__assert_fail@plt+0x64b8>
   1a4d4:	cmp	r0, #0
   1a4d8:	bne	1aa2c <__assert_fail@plt+0x95f4>
   1a4dc:	ldr	r0, [sp, #32]
   1a4e0:	cmp	r0, #0
   1a4e4:	rsbmi	r0, r0, #0
   1a4e8:	cmp	r8, #0
   1a4ec:	str	r0, [sp, #32]
   1a4f0:	beq	1a5cc <__assert_fail@plt+0x9194>
   1a4f4:	add	r4, sp, #64	; 0x40
   1a4f8:	add	r5, sp, #40	; 0x28
   1a4fc:	add	sl, sp, #52	; 0x34
   1a500:	add	r7, sp, #28
   1a504:	ldr	r0, [sp, #72]	; 0x48
   1a508:	cmp	r6, #0
   1a50c:	movwne	r6, #1
   1a510:	ldr	r0, [r0]
   1a514:	tst	r0, r6
   1a518:	bne	1a53c <__assert_fail@plt+0x9104>
   1a51c:	ldr	r1, [sp, #48]	; 0x30
   1a520:	ldr	r0, [sp, #44]	; 0x2c
   1a524:	ldr	r1, [r1]
   1a528:	cmp	r0, #0
   1a52c:	mov	r2, r0
   1a530:	movwne	r2, #1
   1a534:	tst	r1, r2
   1a538:	beq	1a568 <__assert_fail@plt+0x9130>
   1a53c:	mov	r0, r4
   1a540:	mov	r1, r4
   1a544:	mov	r2, sl
   1a548:	bl	16f5c <__assert_fail@plt+0x5b24>
   1a54c:	mov	r0, r5
   1a550:	mov	r1, r5
   1a554:	mov	r2, r7
   1a558:	bl	16780 <__assert_fail@plt+0x5348>
   1a55c:	ldr	r1, [sp, #48]	; 0x30
   1a560:	ldr	r0, [sp, #44]	; 0x2c
   1a564:	ldr	r1, [r1]
   1a568:	cmp	r0, #0
   1a56c:	movwne	r0, #1
   1a570:	tst	r1, r0
   1a574:	bne	1aa0c <__assert_fail@plt+0x95d4>
   1a578:	ldr	r1, [sp, #72]	; 0x48
   1a57c:	ldr	r0, [sp, #68]	; 0x44
   1a580:	ldr	r1, [r1]
   1a584:	cmp	r0, #0
   1a588:	movwne	r0, #1
   1a58c:	tst	r1, r0
   1a590:	bne	1aa0c <__assert_fail@plt+0x95d4>
   1a594:	mov	r0, r4
   1a598:	mov	r1, r4
   1a59c:	mov	r2, #1
   1a5a0:	mov	r3, #2
   1a5a4:	sub	r8, r8, #1
   1a5a8:	bl	18258 <__assert_fail@plt+0x6e20>
   1a5ac:	mov	r0, r5
   1a5b0:	mov	r1, r5
   1a5b4:	mov	r2, #1
   1a5b8:	mov	r3, #2
   1a5bc:	bl	18258 <__assert_fail@plt+0x6e20>
   1a5c0:	ldr	r6, [sp, #68]	; 0x44
   1a5c4:	cmp	r8, #0
   1a5c8:	bne	1a504 <__assert_fail@plt+0x90cc>
   1a5cc:	add	r0, sp, #52	; 0x34
   1a5d0:	add	r1, sp, #64	; 0x40
   1a5d4:	mov	r2, r0
   1a5d8:	bl	16780 <__assert_fail@plt+0x5348>
   1a5dc:	ldr	sl, [sp, #56]	; 0x38
   1a5e0:	cmp	r6, #0
   1a5e4:	mov	r1, r6
   1a5e8:	ldr	r8, [sp, #60]	; 0x3c
   1a5ec:	ldr	r5, [sp, #12]
   1a5f0:	ldr	r0, [sp, #72]	; 0x48
   1a5f4:	rsbmi	r1, r6, #0
   1a5f8:	cmp	sl, #0
   1a5fc:	mov	r2, sl
   1a600:	rsbmi	r2, sl, #0
   1a604:	cmp	r1, r2
   1a608:	bne	1a644 <__assert_fail@plt+0x920c>
   1a60c:	sub	r2, r0, #4
   1a610:	sub	r3, r8, #4
   1a614:	cmp	r1, #1
   1a618:	blt	1a638 <__assert_fail@plt+0x9200>
   1a61c:	sub	r7, r1, #1
   1a620:	ldr	r4, [r3, r1, lsl #2]
   1a624:	ldr	r1, [r2, r1, lsl #2]
   1a628:	cmp	r1, r4
   1a62c:	mov	r1, r7
   1a630:	beq	1a614 <__assert_fail@plt+0x91dc>
   1a634:	bhi	1a648 <__assert_fail@plt+0x9210>
   1a638:	mov	r8, r0
   1a63c:	mov	sl, r6
   1a640:	b	1a678 <__assert_fail@plt+0x9240>
   1a644:	blt	1a638 <__assert_fail@plt+0x9200>
   1a648:	str	sl, [sp, #68]	; 0x44
   1a64c:	str	r8, [sp, #72]	; 0x48
   1a650:	str	r6, [sp, #56]	; 0x38
   1a654:	str	r0, [sp, #60]	; 0x3c
   1a658:	add	r2, sp, #28
   1a65c:	ldr	r0, [sp, #64]	; 0x40
   1a660:	ldr	r1, [sp, #52]	; 0x34
   1a664:	str	r0, [sp, #52]	; 0x34
   1a668:	add	r0, sp, #40	; 0x28
   1a66c:	str	r1, [sp, #64]	; 0x40
   1a670:	mov	r1, r0
   1a674:	bl	16f5c <__assert_fail@plt+0x5b24>
   1a678:	ldr	r0, [sp, #20]
   1a67c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1a680:	ldr	r3, [sp, #8]
   1a684:	ldr	r0, [r0, #4]
   1a688:	cmn	r0, #1
   1a68c:	ldr	r0, [sp, #16]
   1a690:	rsble	sl, sl, #0
   1a694:	strle	sl, [sp, #68]	; 0x44
   1a698:	ldr	r0, [r0, #4]
   1a69c:	cmn	r0, #1
   1a6a0:	ldrle	r0, [sp, #44]	; 0x2c
   1a6a4:	rsble	r0, r0, #0
   1a6a8:	strle	r0, [sp, #44]	; 0x2c
   1a6ac:	cmp	r9, #0
   1a6b0:	ldr	r0, [r5, #4]
   1a6b4:	str	r1, [r5, #4]
   1a6b8:	str	r0, [fp, #-48]	; 0xffffffd0
   1a6bc:	ldr	r0, [r5]
   1a6c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a6c4:	str	r1, [r5]
   1a6c8:	str	r0, [fp, #-52]	; 0xffffffcc
   1a6cc:	ldr	r1, [r5, #8]
   1a6d0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a6d4:	str	r2, [r5, #8]
   1a6d8:	str	r1, [fp, #-44]	; 0xffffffd4
   1a6dc:	beq	1a70c <__assert_fail@plt+0x92d4>
   1a6e0:	ldr	r1, [r9, #4]
   1a6e4:	str	sl, [r9, #4]
   1a6e8:	str	r1, [sp, #68]	; 0x44
   1a6ec:	ldr	r1, [r9]
   1a6f0:	ldr	r2, [sp, #64]	; 0x40
   1a6f4:	str	r2, [r9]
   1a6f8:	str	r1, [sp, #64]	; 0x40
   1a6fc:	ldr	r1, [r9, #8]
   1a700:	str	r8, [r9, #8]
   1a704:	mov	r8, r1
   1a708:	str	r1, [sp, #72]	; 0x48
   1a70c:	cmp	r3, #0
   1a710:	beq	1a744 <__assert_fail@plt+0x930c>
   1a714:	ldr	r1, [r3, #4]
   1a718:	ldr	r2, [sp, #44]	; 0x2c
   1a71c:	str	r2, [r3, #4]
   1a720:	str	r1, [sp, #44]	; 0x2c
   1a724:	ldr	r1, [r3]
   1a728:	ldr	r2, [sp, #40]	; 0x28
   1a72c:	str	r2, [r3]
   1a730:	str	r1, [sp, #40]	; 0x28
   1a734:	ldr	r1, [r3, #8]
   1a738:	ldr	r2, [sp, #48]	; 0x30
   1a73c:	str	r2, [r3, #8]
   1a740:	str	r1, [sp, #48]	; 0x30
   1a744:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1a748:	cmp	r1, #0
   1a74c:	beq	1a76c <__assert_fail@plt+0x9334>
   1a750:	movw	r0, #37164	; 0x912c
   1a754:	lsl	r1, r1, #2
   1a758:	movt	r0, #4
   1a75c:	ldr	r2, [r0]
   1a760:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a764:	blx	r2
   1a768:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a76c:	cmp	r0, #0
   1a770:	beq	1a78c <__assert_fail@plt+0x9354>
   1a774:	movw	r1, #37164	; 0x912c
   1a778:	movt	r1, #4
   1a77c:	ldr	r2, [r1]
   1a780:	lsl	r1, r0, #2
   1a784:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a788:	blx	r2
   1a78c:	ldr	r0, [sp, #64]	; 0x40
   1a790:	cmp	r0, #0
   1a794:	beq	1a7b0 <__assert_fail@plt+0x9378>
   1a798:	movw	r1, #37164	; 0x912c
   1a79c:	movt	r1, #4
   1a7a0:	ldr	r2, [r1]
   1a7a4:	lsl	r1, r0, #2
   1a7a8:	mov	r0, r8
   1a7ac:	blx	r2
   1a7b0:	ldr	r0, [sp, #52]	; 0x34
   1a7b4:	cmp	r0, #0
   1a7b8:	beq	1a7d4 <__assert_fail@plt+0x939c>
   1a7bc:	movw	r1, #37164	; 0x912c
   1a7c0:	movt	r1, #4
   1a7c4:	ldr	r2, [r1]
   1a7c8:	lsl	r1, r0, #2
   1a7cc:	ldr	r0, [sp, #60]	; 0x3c
   1a7d0:	blx	r2
   1a7d4:	ldr	r0, [sp, #40]	; 0x28
   1a7d8:	cmp	r0, #0
   1a7dc:	beq	1a7f8 <__assert_fail@plt+0x93c0>
   1a7e0:	movw	r1, #37164	; 0x912c
   1a7e4:	movt	r1, #4
   1a7e8:	ldr	r2, [r1]
   1a7ec:	lsl	r1, r0, #2
   1a7f0:	ldr	r0, [sp, #48]	; 0x30
   1a7f4:	blx	r2
   1a7f8:	ldr	r0, [sp, #28]
   1a7fc:	cmp	r0, #0
   1a800:	beq	1aa04 <__assert_fail@plt+0x95cc>
   1a804:	movw	r1, #37164	; 0x912c
   1a808:	movt	r1, #4
   1a80c:	ldr	r2, [r1]
   1a810:	lsl	r1, r0, #2
   1a814:	ldr	r0, [sp, #36]	; 0x24
   1a818:	blx	r2
   1a81c:	sub	sp, fp, #28
   1a820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a824:	movw	r0, #37156	; 0x9124
   1a828:	mov	r4, ip
   1a82c:	movt	r0, #4
   1a830:	ldr	r1, [r0]
   1a834:	lsl	r0, r7, #2
   1a838:	blx	r1
   1a83c:	str	r0, [r4, #8]
   1a840:	str	r7, [r4]
   1a844:	mov	ip, r4
   1a848:	ldr	r1, [r4, #4]
   1a84c:	cmp	r1, #0
   1a850:	rsbmi	r1, r1, #0
   1a854:	cmp	r1, r7
   1a858:	movgt	r1, #0
   1a85c:	strgt	r1, [ip, #4]
   1a860:	cmp	r6, #1
   1a864:	blt	1a8d0 <__assert_fail@plt+0x9498>
   1a868:	ldr	r4, [r5, #8]
   1a86c:	mov	r2, #0
   1a870:	cmp	r6, #4
   1a874:	bcc	1a8b4 <__assert_fail@plt+0x947c>
   1a878:	add	r1, r4, r6, lsl #2
   1a87c:	cmp	r0, r1
   1a880:	addcc	r1, r0, r6, lsl #2
   1a884:	cmpcc	r4, r1
   1a888:	bcc	1a8b4 <__assert_fail@plt+0x947c>
   1a88c:	bic	r2, r6, #-2147483645	; 0x80000003
   1a890:	mov	r7, r0
   1a894:	mov	r1, r4
   1a898:	mov	r3, r2
   1a89c:	vld1.32	{d16-d17}, [r1]!
   1a8a0:	subs	r3, r3, #4
   1a8a4:	vst1.32	{d16-d17}, [r7]!
   1a8a8:	bne	1a89c <__assert_fail@plt+0x9464>
   1a8ac:	cmp	r6, r2
   1a8b0:	beq	1a8d0 <__assert_fail@plt+0x9498>
   1a8b4:	add	r1, r4, r2, lsl #2
   1a8b8:	add	r0, r0, r2, lsl #2
   1a8bc:	sub	r2, r6, r2
   1a8c0:	ldr	r3, [r1], #4
   1a8c4:	subs	r2, r2, #1
   1a8c8:	str	r3, [r0], #4
   1a8cc:	bne	1a8c0 <__assert_fail@plt+0x9488>
   1a8d0:	ldr	r6, [sl]
   1a8d4:	mov	r1, r9
   1a8d8:	ldr	r9, [sp, #24]
   1a8dc:	str	r6, [ip, #4]!
   1a8e0:	cmp	r6, #0
   1a8e4:	rsbmi	r6, r6, #0
   1a8e8:	cmp	r1, #0
   1a8ec:	movne	r0, #0
   1a8f0:	str	r6, [ip]
   1a8f4:	strne	r0, [r1, #4]
   1a8f8:	cmp	r9, #0
   1a8fc:	beq	1aa04 <__assert_fail@plt+0x95cc>
   1a900:	mov	r0, r9
   1a904:	mov	r1, r8
   1a908:	bl	153b4 <__assert_fail@plt+0x3f7c>
   1a90c:	sub	sp, fp, #28
   1a910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a914:	movw	r0, #37156	; 0x9124
   1a918:	mov	r5, ip
   1a91c:	movt	r0, #4
   1a920:	ldr	r1, [r0]
   1a924:	lsl	r0, r6, #2
   1a928:	blx	r1
   1a92c:	str	r0, [r5, #8]
   1a930:	str	r6, [r5]
   1a934:	mov	ip, r5
   1a938:	ldr	r1, [r5, #4]
   1a93c:	cmp	r1, #0
   1a940:	rsbmi	r1, r1, #0
   1a944:	cmp	r1, r6
   1a948:	movgt	r1, #0
   1a94c:	strgt	r1, [ip, #4]
   1a950:	cmp	r4, #1
   1a954:	blt	1a9c0 <__assert_fail@plt+0x9588>
   1a958:	ldr	r5, [r8, #8]
   1a95c:	mov	r2, #0
   1a960:	cmp	r4, #4
   1a964:	bcc	1a9a4 <__assert_fail@plt+0x956c>
   1a968:	add	r1, r5, r4, lsl #2
   1a96c:	cmp	r0, r1
   1a970:	addcc	r1, r0, r4, lsl #2
   1a974:	cmpcc	r5, r1
   1a978:	bcc	1a9a4 <__assert_fail@plt+0x956c>
   1a97c:	bic	r2, r4, #-2147483645	; 0x80000003
   1a980:	mov	r6, r0
   1a984:	mov	r1, r5
   1a988:	mov	r3, r2
   1a98c:	vld1.32	{d16-d17}, [r1]!
   1a990:	subs	r3, r3, #4
   1a994:	vst1.32	{d16-d17}, [r6]!
   1a998:	bne	1a98c <__assert_fail@plt+0x9554>
   1a99c:	cmp	r4, r2
   1a9a0:	beq	1a9c0 <__assert_fail@plt+0x9588>
   1a9a4:	add	r1, r5, r2, lsl #2
   1a9a8:	add	r0, r0, r2, lsl #2
   1a9ac:	sub	r2, r4, r2
   1a9b0:	ldr	r3, [r1], #4
   1a9b4:	subs	r2, r2, #1
   1a9b8:	str	r3, [r0], #4
   1a9bc:	bne	1a9b0 <__assert_fail@plt+0x9578>
   1a9c0:	ldr	r4, [r7]
   1a9c4:	mov	r1, r9
   1a9c8:	ldr	r9, [sp, #24]
   1a9cc:	str	r4, [ip, #4]!
   1a9d0:	cmp	r4, #0
   1a9d4:	rsbmi	r4, r4, #0
   1a9d8:	cmp	r1, #0
   1a9dc:	str	r4, [ip]
   1a9e0:	beq	1a9f0 <__assert_fail@plt+0x95b8>
   1a9e4:	mov	r0, r1
   1a9e8:	mov	r1, sl
   1a9ec:	bl	153b4 <__assert_fail@plt+0x3f7c>
   1a9f0:	cmp	r9, #0
   1a9f4:	movne	r0, #0
   1a9f8:	strne	r0, [r9, #4]
   1a9fc:	subne	sp, fp, #28
   1aa00:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa04:	sub	sp, fp, #28
   1aa08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa0c:	movw	r0, #27467	; 0x6b4b
   1aa10:	movw	r1, #26324	; 0x66d4
   1aa14:	movw	r3, #27502	; 0x6b6e
   1aa18:	movw	r2, #2950	; 0xb86
   1aa1c:	movt	r0, #3
   1aa20:	movt	r1, #3
   1aa24:	movt	r3, #3
   1aa28:	bl	11438 <__assert_fail@plt>
   1aa2c:	movw	r0, #27305	; 0x6aa9
   1aa30:	movw	r1, #26324	; 0x66d4
   1aa34:	movw	r3, #27315	; 0x6ab3
   1aa38:	movw	r2, #2521	; 0x9d9
   1aa3c:	movt	r0, #3
   1aa40:	movt	r1, #3
   1aa44:	movt	r3, #3
   1aa48:	bl	11438 <__assert_fail@plt>
   1aa4c:	str	r1, [fp, #-36]	; 0xffffffdc
   1aa50:	movw	r0, #29826	; 0x7482
   1aa54:	movw	r1, #26324	; 0x66d4
   1aa58:	movw	r3, #29842	; 0x7492
   1aa5c:	movw	r2, #2723	; 0xaa3
   1aa60:	movt	r0, #3
   1aa64:	movt	r1, #3
   1aa68:	movt	r3, #3
   1aa6c:	bl	11438 <__assert_fail@plt>
   1aa70:	ldr	r2, [r0, #4]
   1aa74:	cmp	r2, #0
   1aa78:	mov	r3, r2
   1aa7c:	rsbmi	r3, r2, #0
   1aa80:	push	{r4, r5, r6, sl, fp, lr}
   1aa84:	add	fp, sp, #16
   1aa88:	cmp	r3, r1, lsr #5
   1aa8c:	ble	1aaec <__assert_fail@plt+0x96b4>
   1aa90:	ldr	lr, [r0, #8]
   1aa94:	lsr	r6, r1, #5
   1aa98:	and	r5, r1, #31
   1aa9c:	mov	r3, #1
   1aaa0:	cmn	r2, #1
   1aaa4:	ldr	r4, [lr, r6, lsl #2]
   1aaa8:	and	ip, r3, r4, lsr r5
   1aaac:	bgt	1aaf0 <__assert_fail@plt+0x96b8>
   1aab0:	cmp	r5, #0
   1aab4:	beq	1aac8 <__assert_fail@plt+0x9690>
   1aab8:	rsb	r3, r5, #32
   1aabc:	mov	r5, #0
   1aac0:	cmp	r5, r4, lsl r3
   1aac4:	bne	1aae4 <__assert_fail@plt+0x96ac>
   1aac8:	sub	r4, lr, #4
   1aacc:	subs	r3, r6, #1
   1aad0:	blt	1aaf0 <__assert_fail@plt+0x96b8>
   1aad4:	ldr	r6, [r4, r6, lsl #2]
   1aad8:	cmp	r6, #0
   1aadc:	mov	r6, r3
   1aae0:	beq	1aacc <__assert_fail@plt+0x9694>
   1aae4:	eor	ip, ip, #1
   1aae8:	b	1aaf0 <__assert_fail@plt+0x96b8>
   1aaec:	lsr	ip, r2, #31
   1aaf0:	cmp	ip, #0
   1aaf4:	pop	{r4, r5, r6, sl, fp, lr}
   1aaf8:	bxne	lr
   1aafc:	cmp	r2, #0
   1ab00:	blt	1ab08 <__assert_fail@plt+0x96d0>
   1ab04:	b	1e6a4 <__assert_fail@plt+0xd26c>
   1ab08:	b	1e884 <__assert_fail@plt+0xd44c>
   1ab0c:	push	{r4, r5, r6, r7, fp, lr}
   1ab10:	add	fp, sp, #16
   1ab14:	sub	sp, sp, #16
   1ab18:	mov	r4, r0
   1ab1c:	ldr	r0, [r1, #4]
   1ab20:	cmp	r0, #0
   1ab24:	beq	1abcc <__assert_fail@plt+0x9794>
   1ab28:	ldr	r0, [r2, #4]
   1ab2c:	mov	r5, r2
   1ab30:	cmp	r0, #0
   1ab34:	beq	1abcc <__assert_fail@plt+0x9794>
   1ab38:	mov	r0, #0
   1ab3c:	add	r7, sp, #4
   1ab40:	mov	r2, r5
   1ab44:	mov	r6, r1
   1ab48:	str	r0, [sp, #8]
   1ab4c:	str	r0, [sp, #4]
   1ab50:	movw	r0, #26320	; 0x66d0
   1ab54:	movt	r0, #3
   1ab58:	str	r0, [sp, #12]
   1ab5c:	mov	r0, r7
   1ab60:	bl	19104 <__assert_fail@plt+0x7ccc>
   1ab64:	mov	r0, #2
   1ab68:	mov	r1, #0
   1ab6c:	mov	r2, r6
   1ab70:	mov	r3, r7
   1ab74:	str	r0, [sp]
   1ab78:	mov	r0, r7
   1ab7c:	bl	178f0 <__assert_fail@plt+0x64b8>
   1ab80:	cmp	r0, #0
   1ab84:	bne	1abdc <__assert_fail@plt+0x97a4>
   1ab88:	add	r1, sp, #4
   1ab8c:	mov	r0, r4
   1ab90:	mov	r2, r5
   1ab94:	bl	17348 <__assert_fail@plt+0x5f10>
   1ab98:	ldr	r0, [sp, #4]
   1ab9c:	cmp	r0, #0
   1aba0:	beq	1abbc <__assert_fail@plt+0x9784>
   1aba4:	movw	r1, #37164	; 0x912c
   1aba8:	movt	r1, #4
   1abac:	ldr	r2, [r1]
   1abb0:	lsl	r1, r0, #2
   1abb4:	ldr	r0, [sp, #12]
   1abb8:	blx	r2
   1abbc:	ldr	r0, [r4, #4]
   1abc0:	cmp	r0, #0
   1abc4:	rsbmi	r0, r0, #0
   1abc8:	b	1abd0 <__assert_fail@plt+0x9798>
   1abcc:	mov	r0, #0
   1abd0:	str	r0, [r4, #4]
   1abd4:	sub	sp, fp, #16
   1abd8:	pop	{r4, r5, r6, r7, fp, pc}
   1abdc:	movw	r0, #27305	; 0x6aa9
   1abe0:	movw	r1, #26324	; 0x66d4
   1abe4:	movw	r3, #27315	; 0x6ab3
   1abe8:	movw	r2, #2521	; 0x9d9
   1abec:	movt	r0, #3
   1abf0:	movt	r1, #3
   1abf4:	movt	r3, #3
   1abf8:	bl	11438 <__assert_fail@plt>
   1abfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac00:	add	fp, sp, #28
   1ac04:	sub	sp, sp, #12
   1ac08:	mov	r4, r0
   1ac0c:	cmp	r2, #0
   1ac10:	beq	1acd0 <__assert_fail@plt+0x9898>
   1ac14:	ldr	r0, [r1, #4]
   1ac18:	mov	r5, r1
   1ac1c:	cmp	r0, #0
   1ac20:	beq	1acd0 <__assert_fail@plt+0x9898>
   1ac24:	movw	r9, #37156	; 0x9124
   1ac28:	mov	r7, #1
   1ac2c:	mov	r0, #4
   1ac30:	mov	r6, r2
   1ac34:	movt	r9, #4
   1ac38:	str	r7, [sp, #4]
   1ac3c:	ldr	r1, [r9]
   1ac40:	blx	r1
   1ac44:	str	r7, [sp]
   1ac48:	str	r0, [sp, #8]
   1ac4c:	str	r6, [r0]
   1ac50:	mov	r0, sp
   1ac54:	mov	r1, r5
   1ac58:	mov	r2, r0
   1ac5c:	bl	19104 <__assert_fail@plt+0x7ccc>
   1ac60:	ldr	r0, [sp, #4]
   1ac64:	cmp	r0, #0
   1ac68:	ldrne	r0, [sp, #8]
   1ac6c:	ldrne	r8, [r0]
   1ac70:	ldr	r0, [sp]
   1ac74:	moveq	r8, #0
   1ac78:	cmp	r0, #0
   1ac7c:	beq	1ac98 <__assert_fail@plt+0x9860>
   1ac80:	movw	r1, #37164	; 0x912c
   1ac84:	movt	r1, #4
   1ac88:	ldr	r2, [r1]
   1ac8c:	lsl	r1, r0, #2
   1ac90:	ldr	r0, [sp, #8]
   1ac94:	blx	r2
   1ac98:	movw	r1, #26320	; 0x66d0
   1ac9c:	mov	r0, #0
   1aca0:	cmp	r8, r6
   1aca4:	movt	r1, #3
   1aca8:	str	r0, [sp, #4]
   1acac:	str	r0, [sp]
   1acb0:	str	r1, [sp, #8]
   1acb4:	bls	1acd8 <__assert_fail@plt+0x98a0>
   1acb8:	str	r0, [sp, #4]
   1acbc:	mov	r2, sp
   1acc0:	mov	r0, r4
   1acc4:	mov	r1, r5
   1acc8:	bl	17348 <__assert_fail@plt+0x5f10>
   1accc:	b	1ad28 <__assert_fail@plt+0x98f0>
   1acd0:	mov	r0, #0
   1acd4:	b	1ad34 <__assert_fail@plt+0x98fc>
   1acd8:	ldr	r1, [r9]
   1acdc:	mov	sl, #1
   1ace0:	mov	r0, #4
   1ace4:	str	sl, [sp, #4]
   1ace8:	blx	r1
   1acec:	str	sl, [sp]
   1acf0:	mov	r7, r0
   1acf4:	str	r0, [sp, #8]
   1acf8:	udiv	r0, r6, r8
   1acfc:	mov	r2, sp
   1ad00:	mov	r1, r5
   1ad04:	str	r0, [r7]
   1ad08:	mov	r0, r4
   1ad0c:	bl	17348 <__assert_fail@plt+0x5f10>
   1ad10:	movw	r0, #37164	; 0x912c
   1ad14:	mov	r1, #4
   1ad18:	movt	r0, #4
   1ad1c:	ldr	r2, [r0]
   1ad20:	mov	r0, r7
   1ad24:	blx	r2
   1ad28:	ldr	r0, [r4, #4]
   1ad2c:	cmp	r0, #0
   1ad30:	rsbmi	r0, r0, #0
   1ad34:	str	r0, [r4, #4]
   1ad38:	sub	sp, fp, #28
   1ad3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad40:	push	{r4, r5, r6, sl, fp, lr}
   1ad44:	add	fp, sp, #16
   1ad48:	sub	sp, sp, #32
   1ad4c:	mov	r4, r0
   1ad50:	ldr	r0, [r1, #4]
   1ad54:	mov	r5, #0
   1ad58:	cmp	r0, #0
   1ad5c:	beq	1aebc <__assert_fail@plt+0x9a84>
   1ad60:	ldr	r0, [r2, #4]
   1ad64:	mov	r3, r1
   1ad68:	mov	r6, r2
   1ad6c:	cmp	r0, #0
   1ad70:	mov	r1, r0
   1ad74:	rsbmi	r1, r0, #0
   1ad78:	cmp	r1, #1
   1ad7c:	bgt	1ad98 <__assert_fail@plt+0x9960>
   1ad80:	cmp	r0, #0
   1ad84:	beq	1aebc <__assert_fail@plt+0x9a84>
   1ad88:	ldr	r0, [r6, #8]
   1ad8c:	ldr	r0, [r0]
   1ad90:	cmp	r0, #2
   1ad94:	bcc	1aebc <__assert_fail@plt+0x9a84>
   1ad98:	movw	r0, #26320	; 0x66d0
   1ad9c:	mov	r5, #0
   1ada0:	add	r1, sp, #8
   1ada4:	mov	r2, #0
   1ada8:	str	r6, [sp]
   1adac:	movt	r0, #3
   1adb0:	str	r5, [sp, #24]
   1adb4:	str	r5, [sp, #20]
   1adb8:	str	r5, [sp, #8]
   1adbc:	str	r5, [sp, #12]
   1adc0:	str	r0, [sp, #28]
   1adc4:	str	r0, [sp, #16]
   1adc8:	add	r0, sp, #20
   1adcc:	bl	19b20 <__assert_fail@plt+0x86e8>
   1add0:	ldr	r0, [sp, #24]
   1add4:	cmp	r0, #1
   1add8:	bne	1ae74 <__assert_fail@plt+0x9a3c>
   1addc:	ldr	r0, [sp, #28]
   1ade0:	mov	r1, #0
   1ade4:	mov	r5, #0
   1ade8:	ldr	r0, [r0]
   1adec:	cmp	r0, #1
   1adf0:	clz	r0, r0
   1adf4:	movwhi	r1, #1
   1adf8:	lsr	r0, r0, #5
   1adfc:	teq	r1, r0
   1ae00:	bne	1ae74 <__assert_fail@plt+0x9a3c>
   1ae04:	ldr	r0, [sp, #12]
   1ae08:	cmn	r0, #1
   1ae0c:	bgt	1ae40 <__assert_fail@plt+0x9a08>
   1ae10:	ldr	r0, [r6, #4]
   1ae14:	cmp	r0, #0
   1ae18:	blt	1ae30 <__assert_fail@plt+0x99f8>
   1ae1c:	add	r0, sp, #8
   1ae20:	mov	r2, r6
   1ae24:	mov	r1, r0
   1ae28:	bl	16780 <__assert_fail@plt+0x5348>
   1ae2c:	b	1ae40 <__assert_fail@plt+0x9a08>
   1ae30:	add	r0, sp, #8
   1ae34:	mov	r2, r6
   1ae38:	mov	r1, r0
   1ae3c:	bl	16f5c <__assert_fail@plt+0x5b24>
   1ae40:	ldr	r0, [r4, #4]
   1ae44:	ldr	r1, [sp, #12]
   1ae48:	mov	r5, #1
   1ae4c:	str	r1, [r4, #4]
   1ae50:	str	r0, [sp, #12]
   1ae54:	ldr	r0, [r4]
   1ae58:	ldr	r1, [sp, #8]
   1ae5c:	str	r1, [r4]
   1ae60:	str	r0, [sp, #8]
   1ae64:	ldr	r0, [r4, #8]
   1ae68:	ldr	r1, [sp, #16]
   1ae6c:	str	r1, [r4, #8]
   1ae70:	str	r0, [sp, #16]
   1ae74:	ldr	r0, [sp, #20]
   1ae78:	cmp	r0, #0
   1ae7c:	beq	1ae98 <__assert_fail@plt+0x9a60>
   1ae80:	movw	r1, #37164	; 0x912c
   1ae84:	movt	r1, #4
   1ae88:	ldr	r2, [r1]
   1ae8c:	lsl	r1, r0, #2
   1ae90:	ldr	r0, [sp, #28]
   1ae94:	blx	r2
   1ae98:	ldr	r0, [sp, #8]
   1ae9c:	cmp	r0, #0
   1aea0:	beq	1aebc <__assert_fail@plt+0x9a84>
   1aea4:	movw	r1, #37164	; 0x912c
   1aea8:	movt	r1, #4
   1aeac:	ldr	r2, [r1]
   1aeb0:	lsl	r1, r0, #2
   1aeb4:	ldr	r0, [sp, #16]
   1aeb8:	blx	r2
   1aebc:	mov	r0, r5
   1aec0:	sub	sp, fp, #16
   1aec4:	pop	{r4, r5, r6, sl, fp, pc}
   1aec8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1aecc:	add	fp, sp, #24
   1aed0:	sub	sp, sp, #16
   1aed4:	mov	r8, r0
   1aed8:	movw	r0, #37156	; 0x9124
   1aedc:	mov	r9, r1
   1aee0:	mov	r4, #1
   1aee4:	mov	r5, r2
   1aee8:	movt	r0, #4
   1aeec:	str	r4, [sp, #8]
   1aef0:	ldr	r1, [r0]
   1aef4:	mov	r0, #4
   1aef8:	blx	r1
   1aefc:	str	r4, [sp, #4]
   1af00:	str	r0, [sp, #12]
   1af04:	str	r4, [r0]
   1af08:	mov	r4, #-2147483648	; 0x80000000
   1af0c:	add	r7, sp, #4
   1af10:	mov	r6, #0
   1af14:	mov	r0, r7
   1af18:	mov	r1, r7
   1af1c:	mov	r2, r7
   1af20:	bl	17348 <__assert_fail@plt+0x5f10>
   1af24:	tst	r4, r5
   1af28:	beq	1af3c <__assert_fail@plt+0x9b04>
   1af2c:	mov	r0, r7
   1af30:	mov	r1, r7
   1af34:	mov	r2, r9
   1af38:	bl	17348 <__assert_fail@plt+0x5f10>
   1af3c:	lsr	r0, r4, #1
   1af40:	cmp	r6, r4, lsr #1
   1af44:	mov	r4, r0
   1af48:	bne	1af14 <__assert_fail@plt+0x9adc>
   1af4c:	ldr	r0, [r8, #4]
   1af50:	ldr	r1, [sp, #8]
   1af54:	str	r1, [r8, #4]
   1af58:	str	r0, [sp, #8]
   1af5c:	ldr	r1, [r8]
   1af60:	ldr	r0, [sp, #4]
   1af64:	str	r0, [r8]
   1af68:	str	r1, [sp, #4]
   1af6c:	cmp	r1, #0
   1af70:	ldr	r0, [r8, #8]
   1af74:	ldr	r2, [sp, #12]
   1af78:	str	r2, [r8, #8]
   1af7c:	str	r0, [sp, #12]
   1af80:	beq	1af98 <__assert_fail@plt+0x9b60>
   1af84:	movw	r2, #37164	; 0x912c
   1af88:	lsl	r1, r1, #2
   1af8c:	movt	r2, #4
   1af90:	ldr	r2, [r2]
   1af94:	blx	r2
   1af98:	sub	sp, fp, #24
   1af9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1afa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afa4:	add	fp, sp, #28
   1afa8:	sub	sp, sp, #28
   1afac:	mov	sl, r0
   1afb0:	movw	r0, #26320	; 0x66d0
   1afb4:	mov	r9, #0
   1afb8:	mov	r6, r2
   1afbc:	cmp	r1, #0
   1afc0:	movt	r0, #3
   1afc4:	str	r9, [sp, #8]
   1afc8:	str	r9, [sp, #4]
   1afcc:	str	r0, [sp, #12]
   1afd0:	beq	1b004 <__assert_fail@plt+0x9bcc>
   1afd4:	movw	r0, #37156	; 0x9124
   1afd8:	mov	r4, r1
   1afdc:	mov	r9, #1
   1afe0:	movt	r0, #4
   1afe4:	str	r9, [sp, #8]
   1afe8:	ldr	r1, [r0]
   1afec:	mov	r0, #4
   1aff0:	blx	r1
   1aff4:	str	r0, [sp, #12]
   1aff8:	stm	sp, {r0, r9}
   1affc:	str	r4, [r0]
   1b000:	b	1b00c <__assert_fail@plt+0x9bd4>
   1b004:	str	r0, [sp]
   1b008:	str	r9, [sp, #8]
   1b00c:	movw	r0, #37156	; 0x9124
   1b010:	mov	r4, #1
   1b014:	movt	r0, #4
   1b018:	str	r4, [sp, #20]
   1b01c:	ldr	r1, [r0]
   1b020:	mov	r0, #4
   1b024:	blx	r1
   1b028:	str	r4, [sp, #16]
   1b02c:	str	r0, [sp, #24]
   1b030:	str	r4, [r0]
   1b034:	mov	r5, #-2147483648	; 0x80000000
   1b038:	add	r7, sp, #16
   1b03c:	mov	r8, #0
   1b040:	add	r4, sp, #4
   1b044:	mov	r0, r7
   1b048:	mov	r1, r7
   1b04c:	mov	r2, r7
   1b050:	bl	17348 <__assert_fail@plt+0x5f10>
   1b054:	tst	r5, r6
   1b058:	beq	1b06c <__assert_fail@plt+0x9c34>
   1b05c:	mov	r0, r7
   1b060:	mov	r1, r7
   1b064:	mov	r2, r4
   1b068:	bl	17348 <__assert_fail@plt+0x5f10>
   1b06c:	lsr	r0, r5, #1
   1b070:	cmp	r8, r5, lsr #1
   1b074:	mov	r5, r0
   1b078:	bne	1b044 <__assert_fail@plt+0x9c0c>
   1b07c:	ldr	r0, [sl, #4]
   1b080:	ldr	r1, [sp, #20]
   1b084:	str	r1, [sl, #4]
   1b088:	str	r0, [sp, #20]
   1b08c:	ldr	r1, [sl]
   1b090:	ldr	r0, [sp, #16]
   1b094:	str	r0, [sl]
   1b098:	str	r1, [sp, #16]
   1b09c:	cmp	r1, #0
   1b0a0:	ldr	r0, [sl, #8]
   1b0a4:	ldr	r2, [sp, #24]
   1b0a8:	str	r2, [sl, #8]
   1b0ac:	str	r0, [sp, #24]
   1b0b0:	beq	1b0c8 <__assert_fail@plt+0x9c90>
   1b0b4:	movw	r2, #37164	; 0x912c
   1b0b8:	lsl	r1, r1, #2
   1b0bc:	movt	r2, #4
   1b0c0:	ldr	r2, [r2]
   1b0c4:	blx	r2
   1b0c8:	cmp	r9, #0
   1b0cc:	beq	1b0e8 <__assert_fail@plt+0x9cb0>
   1b0d0:	movw	r0, #37164	; 0x912c
   1b0d4:	lsl	r1, r9, #2
   1b0d8:	movt	r0, #4
   1b0dc:	ldr	r2, [r0]
   1b0e0:	ldr	r0, [sp]
   1b0e4:	blx	r2
   1b0e8:	sub	sp, fp, #28
   1b0ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0f4:	add	fp, sp, #28
   1b0f8:	sub	sp, sp, #84	; 0x54
   1b0fc:	str	r2, [sp, #24]
   1b100:	mov	r5, r0
   1b104:	ldr	r4, [r3, #4]
   1b108:	mov	sl, r3
   1b10c:	mov	r8, r1
   1b110:	ldr	r0, [sp, #24]
   1b114:	cmp	r4, #0
   1b118:	ldr	r0, [r0, #4]
   1b11c:	rsbmi	r4, r4, #0
   1b120:	cmp	r0, #0
   1b124:	rsbmi	r0, r0, #0
   1b128:	cmp	r4, #0
   1b12c:	beq	1b7b0 <__assert_fail@plt+0xa378>
   1b130:	cmp	r0, #0
   1b134:	beq	1b214 <__assert_fail@plt+0x9ddc>
   1b138:	ldr	r7, [sl, #8]
   1b13c:	str	r0, [sp, #32]
   1b140:	add	r0, sp, #44	; 0x2c
   1b144:	mov	r2, r4
   1b148:	str	r5, [sp, #12]
   1b14c:	mov	r1, r7
   1b150:	bl	1b888 <__assert_fail@plt+0xa450>
   1b154:	ldr	r5, [sp, #44]	; 0x2c
   1b158:	mov	r9, #0
   1b15c:	mov	r0, #0
   1b160:	cmp	r5, #0
   1b164:	str	r5, [sp, #20]
   1b168:	beq	1b230 <__assert_fail@plt+0x9df8>
   1b16c:	str	r0, [sp, #44]	; 0x2c
   1b170:	movw	r0, #37156	; 0x9124
   1b174:	movt	r0, #4
   1b178:	ldr	r1, [r0]
   1b17c:	lsl	r0, r4, #2
   1b180:	blx	r1
   1b184:	cmp	r4, #0
   1b188:	str	r0, [sp, #16]
   1b18c:	ble	1b7bc <__assert_fail@plt+0xa384>
   1b190:	cmp	r5, #32
   1b194:	bcs	1b7dc <__assert_fail@plt+0xa3a4>
   1b198:	add	r0, r7, r4, lsl #2
   1b19c:	rsb	r2, r5, #32
   1b1a0:	cmp	r4, #1
   1b1a4:	ldr	r0, [r0, #-4]
   1b1a8:	lsl	r1, r0, r5
   1b1ac:	lsr	r0, r0, r2
   1b1b0:	beq	1b1e4 <__assert_fail@plt+0x9dac>
   1b1b4:	sub	r3, r7, #8
   1b1b8:	ldr	r7, [sp, #16]
   1b1bc:	mov	r6, r4
   1b1c0:	sub	r5, r7, #4
   1b1c4:	ldr	r7, [r3, r6, lsl #2]
   1b1c8:	orr	r1, r1, r7, lsr r2
   1b1cc:	str	r1, [r5, r6, lsl #2]
   1b1d0:	ldr	r1, [sp, #20]
   1b1d4:	sub	r6, r6, #1
   1b1d8:	cmp	r6, #1
   1b1dc:	lsl	r1, r7, r1
   1b1e0:	bne	1b1c4 <__assert_fail@plt+0x9d8c>
   1b1e4:	ldr	r7, [sp, #16]
   1b1e8:	cmp	r0, #0
   1b1ec:	str	r1, [r7]
   1b1f0:	beq	1b234 <__assert_fail@plt+0x9dfc>
   1b1f4:	movw	r0, #27305	; 0x6aa9
   1b1f8:	movw	r1, #26324	; 0x66d4
   1b1fc:	movw	r3, #27633	; 0x6bf1
   1b200:	movw	r2, #3116	; 0xc2c
   1b204:	movt	r0, #3
   1b208:	movt	r1, #3
   1b20c:	movt	r3, #3
   1b210:	bl	11438 <__assert_fail@plt>
   1b214:	mov	r0, #1
   1b218:	str	r0, [r5, #4]
   1b21c:	ldr	r1, [r5]
   1b220:	cmp	r1, #0
   1b224:	ble	1b364 <__assert_fail@plt+0x9f2c>
   1b228:	ldr	r0, [r5, #8]
   1b22c:	b	1b468 <__assert_fail@plt+0xa030>
   1b230:	str	r0, [sp, #16]
   1b234:	ldr	r0, [sp, #24]
   1b238:	movw	r1, #26320	; 0x66d0
   1b23c:	str	r9, [fp, #-48]	; 0xffffffd0
   1b240:	str	r9, [fp, #-52]	; 0xffffffcc
   1b244:	str	r4, [sp, #40]	; 0x28
   1b248:	str	r7, [sp, #36]	; 0x24
   1b24c:	movt	r1, #3
   1b250:	str	r1, [fp, #-44]	; 0xffffffd4
   1b254:	ldr	r0, [r0, #4]
   1b258:	cmn	r0, #1
   1b25c:	sub	r0, fp, #52	; 0x34
   1b260:	ble	1b338 <__assert_fail@plt+0x9f00>
   1b264:	cmp	r0, r8
   1b268:	beq	1b35c <__assert_fail@plt+0x9f24>
   1b26c:	ldr	r0, [r8, #4]
   1b270:	cmp	r0, #0
   1b274:	mov	r5, r0
   1b278:	rsbmi	r5, r0, #0
   1b27c:	cmp	r5, #1
   1b280:	blt	1b388 <__assert_fail@plt+0x9f50>
   1b284:	movw	r0, #37156	; 0x9124
   1b288:	movt	r0, #4
   1b28c:	ldr	r1, [r0]
   1b290:	lsl	r0, r5, #2
   1b294:	blx	r1
   1b298:	str	r0, [fp, #-44]	; 0xffffffd4
   1b29c:	str	r5, [fp, #-52]	; 0xffffffcc
   1b2a0:	mov	r1, r0
   1b2a4:	mov	r2, #0
   1b2a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1b2ac:	cmp	r0, #0
   1b2b0:	rsbmi	r0, r0, #0
   1b2b4:	cmp	r0, r5
   1b2b8:	movgt	r0, #0
   1b2bc:	strgt	r0, [fp, #-48]	; 0xffffffd0
   1b2c0:	cmp	r5, #4
   1b2c4:	ldr	r6, [r8, #8]
   1b2c8:	bcc	1b30c <__assert_fail@plt+0x9ed4>
   1b2cc:	add	r0, r6, r5, lsl #2
   1b2d0:	cmp	r1, r0
   1b2d4:	bcs	1b2e4 <__assert_fail@plt+0x9eac>
   1b2d8:	add	r0, r1, r5, lsl #2
   1b2dc:	cmp	r0, r6
   1b2e0:	bhi	1b30c <__assert_fail@plt+0x9ed4>
   1b2e4:	bic	r2, r5, #-2147483645	; 0x80000003
   1b2e8:	mov	r7, r1
   1b2ec:	mov	r0, r6
   1b2f0:	mov	r3, r2
   1b2f4:	vld1.32	{d16-d17}, [r0]!
   1b2f8:	subs	r3, r3, #4
   1b2fc:	vst1.32	{d16-d17}, [r7]!
   1b300:	bne	1b2f4 <__assert_fail@plt+0x9ebc>
   1b304:	cmp	r5, r2
   1b308:	beq	1b328 <__assert_fail@plt+0x9ef0>
   1b30c:	add	r0, r6, r2, lsl #2
   1b310:	add	r3, r1, r2, lsl #2
   1b314:	sub	r2, r5, r2
   1b318:	ldr	r7, [r0], #4
   1b31c:	subs	r2, r2, #1
   1b320:	str	r7, [r3], #4
   1b324:	bne	1b318 <__assert_fail@plt+0x9ee0>
   1b328:	ldr	r0, [r8, #4]
   1b32c:	ldr	r7, [sp, #36]	; 0x24
   1b330:	rsb	r9, r0, #0
   1b334:	b	1b394 <__assert_fail@plt+0x9f5c>
   1b338:	mov	r1, r8
   1b33c:	mov	r2, sl
   1b340:	bl	1ad40 <__assert_fail@plt+0x9908>
   1b344:	ldr	r5, [sp, #32]
   1b348:	cmp	r0, #0
   1b34c:	bne	1b5ac <__assert_fail@plt+0xa174>
   1b350:	movw	r0, #27729	; 0x6c51
   1b354:	movt	r0, #3
   1b358:	bl	1b85c <__assert_fail@plt+0xa424>
   1b35c:	mov	r9, #0
   1b360:	b	1b3a0 <__assert_fail@plt+0x9f68>
   1b364:	beq	1b430 <__assert_fail@plt+0x9ff8>
   1b368:	movw	r0, #37160	; 0x9128
   1b36c:	lsl	r1, r1, #2
   1b370:	mov	r2, #4
   1b374:	movt	r0, #4
   1b378:	ldr	r3, [r0]
   1b37c:	ldr	r0, [r5, #8]
   1b380:	blx	r3
   1b384:	b	1b444 <__assert_fail@plt+0xa00c>
   1b388:	movw	r1, #26320	; 0x66d0
   1b38c:	rsb	r9, r0, #0
   1b390:	movt	r1, #3
   1b394:	cmp	r0, #0
   1b398:	str	r0, [fp, #-48]	; 0xffffffd0
   1b39c:	movge	r9, r0
   1b3a0:	cmp	r9, r4
   1b3a4:	mov	sl, r9
   1b3a8:	str	r9, [fp, #-48]	; 0xffffffd0
   1b3ac:	blt	1b3d0 <__assert_fail@plt+0x9f98>
   1b3b0:	ldr	sl, [sp, #40]	; 0x28
   1b3b4:	add	r0, sp, #44	; 0x2c
   1b3b8:	mov	r2, r9
   1b3bc:	mov	r3, r7
   1b3c0:	str	r0, [sp, #4]
   1b3c4:	mov	r0, #0
   1b3c8:	str	sl, [sp]
   1b3cc:	bl	1bb08 <__assert_fail@plt+0xa6d0>
   1b3d0:	ldr	r0, [r8, #4]
   1b3d4:	cmp	r0, #0
   1b3d8:	blt	1b3e8 <__assert_fail@plt+0x9fb0>
   1b3dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b3e0:	ldr	r5, [sp, #32]
   1b3e4:	b	1b584 <__assert_fail@plt+0xa14c>
   1b3e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1b3ec:	ldr	r6, [sp, #40]	; 0x28
   1b3f0:	cmp	r6, r1
   1b3f4:	ble	1b428 <__assert_fail@plt+0x9ff0>
   1b3f8:	cmp	r6, #1
   1b3fc:	movle	r6, #1
   1b400:	cmp	r1, #0
   1b404:	beq	1b478 <__assert_fail@plt+0xa040>
   1b408:	movw	r0, #37160	; 0x9128
   1b40c:	lsl	r1, r1, #2
   1b410:	lsl	r2, r6, #2
   1b414:	movt	r0, #4
   1b418:	ldr	r3, [r0]
   1b41c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b420:	blx	r3
   1b424:	b	1b48c <__assert_fail@plt+0xa054>
   1b428:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b42c:	b	1b4ac <__assert_fail@plt+0xa074>
   1b430:	movw	r0, #37156	; 0x9124
   1b434:	movt	r0, #4
   1b438:	ldr	r1, [r0]
   1b43c:	mov	r0, #4
   1b440:	blx	r1
   1b444:	mov	r1, #1
   1b448:	str	r0, [r5, #8]
   1b44c:	str	r1, [r5]
   1b450:	ldr	r1, [r5, #4]
   1b454:	cmp	r1, #0
   1b458:	rsbmi	r1, r1, #0
   1b45c:	cmp	r1, #2
   1b460:	movge	r1, #0
   1b464:	strge	r1, [r5, #4]
   1b468:	mov	r1, #1
   1b46c:	str	r1, [r0]
   1b470:	sub	sp, fp, #28
   1b474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b478:	movw	r0, #37156	; 0x9124
   1b47c:	movt	r0, #4
   1b480:	ldr	r1, [r0]
   1b484:	lsl	r0, r6, #2
   1b488:	blx	r1
   1b48c:	str	r0, [fp, #-44]	; 0xffffffd4
   1b490:	str	r6, [fp, #-52]	; 0xffffffcc
   1b494:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1b498:	cmp	r1, #0
   1b49c:	rsbmi	r1, r1, #0
   1b4a0:	cmp	r1, r6
   1b4a4:	movgt	r1, #0
   1b4a8:	strgt	r1, [fp, #-48]	; 0xffffffd0
   1b4ac:	ldr	r1, [sp, #40]	; 0x28
   1b4b0:	cmp	r1, sl
   1b4b4:	blt	1b7fc <__assert_fail@plt+0xa3c4>
   1b4b8:	mov	r1, #0
   1b4bc:	cmp	sl, #1
   1b4c0:	blt	1b500 <__assert_fail@plt+0xa0c8>
   1b4c4:	mov	r2, r7
   1b4c8:	mov	r3, r0
   1b4cc:	mov	r7, sl
   1b4d0:	ldr	r5, [r3]
   1b4d4:	ldr	r6, [r2], #4
   1b4d8:	adds	r4, r5, r1
   1b4dc:	cmp	r6, r4
   1b4e0:	mov	r4, #0
   1b4e4:	movwcc	r4, #1
   1b4e8:	adds	r5, r5, r1
   1b4ec:	sub	r6, r6, r5
   1b4f0:	adc	r1, r4, #0
   1b4f4:	subs	r7, r7, #1
   1b4f8:	str	r6, [r3], #4
   1b4fc:	bne	1b4d0 <__assert_fail@plt+0xa098>
   1b500:	ldr	r5, [sp, #40]	; 0x28
   1b504:	cmp	r5, sl
   1b508:	ble	1b574 <__assert_fail@plt+0xa13c>
   1b50c:	sub	r2, r5, sl
   1b510:	cmp	r2, #1
   1b514:	ldr	r2, [sp, #36]	; 0x24
   1b518:	blt	1b83c <__assert_fail@plt+0xa404>
   1b51c:	mvn	r7, r9
   1b520:	mvn	r6, r5
   1b524:	add	r2, r2, sl, lsl #2
   1b528:	add	r3, r0, sl, lsl #2
   1b52c:	mov	sl, r5
   1b530:	cmp	r7, r6
   1b534:	movgt	r6, r7
   1b538:	add	r7, r5, r6
   1b53c:	add	r7, r7, #1
   1b540:	ldr	r5, [r2], #4
   1b544:	mov	r6, r1
   1b548:	cmp	r5, r1
   1b54c:	mov	r1, #0
   1b550:	sub	r4, r5, r6
   1b554:	movwcc	r1, #1
   1b558:	str	r4, [r3], #4
   1b55c:	subs	r7, r7, #1
   1b560:	bne	1b540 <__assert_fail@plt+0xa108>
   1b564:	mov	r1, #0
   1b568:	cmp	r5, r6
   1b56c:	movwcc	r1, #1
   1b570:	b	1b578 <__assert_fail@plt+0xa140>
   1b574:	mov	sl, r5
   1b578:	ldr	r5, [sp, #32]
   1b57c:	cmp	r1, #0
   1b580:	bne	1b81c <__assert_fail@plt+0xa3e4>
   1b584:	sub	r0, r0, #4
   1b588:	mov	r1, sl
   1b58c:	cmp	sl, #1
   1b590:	blt	1b5a4 <__assert_fail@plt+0xa16c>
   1b594:	ldr	r2, [r0, r1, lsl #2]
   1b598:	sub	sl, r1, #1
   1b59c:	cmp	r2, #0
   1b5a0:	beq	1b588 <__assert_fail@plt+0xa150>
   1b5a4:	ldr	r4, [sp, #40]	; 0x28
   1b5a8:	str	r1, [fp, #-48]	; 0xffffffd0
   1b5ac:	movw	r0, #37156	; 0x9124
   1b5b0:	mov	r6, #1
   1b5b4:	movt	r0, #4
   1b5b8:	str	r6, [fp, #-36]	; 0xffffffdc
   1b5bc:	ldr	r1, [r0]
   1b5c0:	mov	r0, #4
   1b5c4:	blx	r1
   1b5c8:	cmp	r5, #1
   1b5cc:	str	r6, [fp, #-40]	; 0xffffffd8
   1b5d0:	str	r0, [fp, #-32]	; 0xffffffe0
   1b5d4:	str	r6, [r0]
   1b5d8:	blt	1b6a8 <__assert_fail@plt+0xa270>
   1b5dc:	sub	r7, fp, #40	; 0x28
   1b5e0:	mov	r9, #0
   1b5e4:	ldr	r0, [sp, #24]
   1b5e8:	ldr	r1, [sp, #32]
   1b5ec:	mov	r5, #-2147483648	; 0x80000000
   1b5f0:	ldr	r0, [r0, #8]
   1b5f4:	str	r1, [sp, #28]
   1b5f8:	sub	r1, r1, #1
   1b5fc:	str	r1, [sp, #32]
   1b600:	ldr	r8, [r0, r1, lsl #2]
   1b604:	mov	r0, r7
   1b608:	mov	r1, r7
   1b60c:	mov	r2, r7
   1b610:	bl	17348 <__assert_fail@plt+0x5f10>
   1b614:	tst	r5, r8
   1b618:	beq	1b62c <__assert_fail@plt+0xa1f4>
   1b61c:	mov	r0, r7
   1b620:	mov	r1, r7
   1b624:	sub	r2, fp, #52	; 0x34
   1b628:	bl	17348 <__assert_fail@plt+0x5f10>
   1b62c:	ldr	r6, [fp, #-36]	; 0xffffffdc
   1b630:	cmp	r6, r4
   1b634:	ble	1b68c <__assert_fail@plt+0xa254>
   1b638:	ldr	r0, [sp, #40]	; 0x28
   1b63c:	ldr	sl, [fp, #-32]	; 0xffffffe0
   1b640:	ldr	r3, [sp, #36]	; 0x24
   1b644:	mov	r2, r6
   1b648:	str	r0, [sp]
   1b64c:	add	r0, sp, #44	; 0x2c
   1b650:	mov	r1, sl
   1b654:	str	r0, [sp, #4]
   1b658:	mov	r0, #0
   1b65c:	bl	1bb08 <__assert_fail@plt+0xa6d0>
   1b660:	ldr	r4, [sp, #40]	; 0x28
   1b664:	sub	r0, sl, #4
   1b668:	mov	r1, r4
   1b66c:	mov	r6, r1
   1b670:	cmp	r1, #1
   1b674:	blt	1b688 <__assert_fail@plt+0xa250>
   1b678:	ldr	r2, [r0, r6, lsl #2]
   1b67c:	sub	r1, r6, #1
   1b680:	cmp	r2, #0
   1b684:	beq	1b66c <__assert_fail@plt+0xa234>
   1b688:	str	r6, [fp, #-36]	; 0xffffffdc
   1b68c:	lsr	r0, r5, #1
   1b690:	cmp	r9, r5, lsr #1
   1b694:	mov	r5, r0
   1b698:	bne	1b604 <__assert_fail@plt+0xa1cc>
   1b69c:	ldr	r0, [sp, #28]
   1b6a0:	cmp	r0, #2
   1b6a4:	bge	1b5e4 <__assert_fail@plt+0xa1ac>
   1b6a8:	cmp	r6, r4
   1b6ac:	bge	1b6c4 <__assert_fail@plt+0xa28c>
   1b6b0:	ldr	r5, [sp, #12]
   1b6b4:	ldr	r0, [sp, #16]
   1b6b8:	cmp	r0, #0
   1b6bc:	bne	1b728 <__assert_fail@plt+0xa2f0>
   1b6c0:	b	1b73c <__assert_fail@plt+0xa304>
   1b6c4:	ldr	r0, [sp, #20]
   1b6c8:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1b6cc:	ldr	r3, [sp, #36]	; 0x24
   1b6d0:	mov	r2, r6
   1b6d4:	str	r4, [sp]
   1b6d8:	str	r0, [sp, #44]	; 0x2c
   1b6dc:	add	r0, sp, #44	; 0x2c
   1b6e0:	mov	r1, r5
   1b6e4:	str	r0, [sp, #4]
   1b6e8:	mov	r0, #0
   1b6ec:	bl	1bb08 <__assert_fail@plt+0xa6d0>
   1b6f0:	sub	r3, r5, #4
   1b6f4:	ldr	r5, [sp, #12]
   1b6f8:	ldr	r0, [sp, #16]
   1b6fc:	mov	r1, r4
   1b700:	mov	r6, r1
   1b704:	cmp	r1, #1
   1b708:	blt	1b71c <__assert_fail@plt+0xa2e4>
   1b70c:	ldr	r2, [r3, r6, lsl #2]
   1b710:	sub	r1, r6, #1
   1b714:	cmp	r2, #0
   1b718:	beq	1b700 <__assert_fail@plt+0xa2c8>
   1b71c:	str	r6, [fp, #-36]	; 0xffffffdc
   1b720:	cmp	r0, #0
   1b724:	beq	1b73c <__assert_fail@plt+0xa304>
   1b728:	movw	r1, #37164	; 0x912c
   1b72c:	movt	r1, #4
   1b730:	ldr	r2, [r1]
   1b734:	lsl	r1, r4, #2
   1b738:	blx	r2
   1b73c:	ldr	r0, [r5, #4]
   1b740:	str	r6, [r5, #4]
   1b744:	str	r0, [fp, #-36]	; 0xffffffdc
   1b748:	ldr	r1, [r5]
   1b74c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b750:	str	r0, [r5]
   1b754:	str	r1, [fp, #-40]	; 0xffffffd8
   1b758:	cmp	r1, #0
   1b75c:	ldr	r0, [r5, #8]
   1b760:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b764:	str	r2, [r5, #8]
   1b768:	str	r0, [fp, #-32]	; 0xffffffe0
   1b76c:	beq	1b784 <__assert_fail@plt+0xa34c>
   1b770:	movw	r2, #37164	; 0x912c
   1b774:	lsl	r1, r1, #2
   1b778:	movt	r2, #4
   1b77c:	ldr	r2, [r2]
   1b780:	blx	r2
   1b784:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1b788:	cmp	r0, #0
   1b78c:	beq	1b7a8 <__assert_fail@plt+0xa370>
   1b790:	movw	r1, #37164	; 0x912c
   1b794:	movt	r1, #4
   1b798:	ldr	r2, [r1]
   1b79c:	lsl	r1, r0, #2
   1b7a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b7a4:	blx	r2
   1b7a8:	sub	sp, fp, #28
   1b7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7b0:	movw	r0, #27610	; 0x6bda
   1b7b4:	movt	r0, #3
   1b7b8:	bl	1b85c <__assert_fail@plt+0xa424>
   1b7bc:	movw	r0, #26881	; 0x6901
   1b7c0:	movw	r1, #26324	; 0x66d4
   1b7c4:	movw	r3, #26968	; 0x6958
   1b7c8:	movw	r2, #659	; 0x293
   1b7cc:	movt	r0, #3
   1b7d0:	movt	r1, #3
   1b7d4:	movt	r3, #3
   1b7d8:	bl	11438 <__assert_fail@plt>
   1b7dc:	movw	r0, #27042	; 0x69a2
   1b7e0:	movw	r1, #26324	; 0x66d4
   1b7e4:	movw	r3, #26968	; 0x6958
   1b7e8:	movw	r2, #661	; 0x295
   1b7ec:	movt	r0, #3
   1b7f0:	movt	r1, #3
   1b7f4:	movt	r3, #3
   1b7f8:	bl	11438 <__assert_fail@plt>
   1b7fc:	movw	r0, #26402	; 0x6722
   1b800:	movw	r1, #26324	; 0x66d4
   1b804:	movw	r3, #26542	; 0x67ae
   1b808:	mov	r2, #532	; 0x214
   1b80c:	movt	r0, #3
   1b810:	movt	r1, #3
   1b814:	movt	r3, #3
   1b818:	bl	11438 <__assert_fail@plt>
   1b81c:	movw	r0, #27305	; 0x6aa9
   1b820:	movw	r1, #26324	; 0x66d4
   1b824:	movw	r3, #27633	; 0x6bf1
   1b828:	movw	r2, #3145	; 0xc49
   1b82c:	movt	r0, #3
   1b830:	movt	r1, #3
   1b834:	movt	r3, #3
   1b838:	bl	11438 <__assert_fail@plt>
   1b83c:	movw	r0, #29650	; 0x73d2
   1b840:	movw	r1, #26324	; 0x66d4
   1b844:	movw	r3, #26481	; 0x6771
   1b848:	movw	r2, #493	; 0x1ed
   1b84c:	movt	r0, #3
   1b850:	movt	r1, #3
   1b854:	movt	r3, #3
   1b858:	bl	11438 <__assert_fail@plt>
   1b85c:	push	{fp, lr}
   1b860:	mov	fp, sp
   1b864:	mov	r3, r0
   1b868:	movw	r0, #37248	; 0x9180
   1b86c:	movw	r2, #32153	; 0x7d99
   1b870:	mov	r1, #1
   1b874:	movt	r0, #4
   1b878:	movt	r2, #3
   1b87c:	ldr	r0, [r0]
   1b880:	bl	1139c <__fprintf_chk@plt>
   1b884:	bl	11420 <abort@plt>
   1b888:	push	{r4, r5, fp, lr}
   1b88c:	add	fp, sp, #8
   1b890:	cmp	r2, #0
   1b894:	ble	1ba88 <__assert_fail@plt+0xa650>
   1b898:	mov	r5, r0
   1b89c:	cmp	r2, #2
   1b8a0:	beq	1b950 <__assert_fail@plt+0xa518>
   1b8a4:	cmp	r2, #1
   1b8a8:	bne	1b9bc <__assert_fail@plt+0xa584>
   1b8ac:	ldr	r0, [r1]
   1b8b0:	cmp	r0, #0
   1b8b4:	beq	1baa8 <__assert_fail@plt+0xa670>
   1b8b8:	mov	r2, #0
   1b8bc:	mov	r1, r0
   1b8c0:	cmp	r2, r0, lsr #24
   1b8c4:	bne	1b8e0 <__assert_fail@plt+0xa4a8>
   1b8c8:	mov	r2, #0
   1b8cc:	mov	r1, r0
   1b8d0:	lsl	r1, r1, #8
   1b8d4:	add	r2, r2, #8
   1b8d8:	cmp	r1, #16777216	; 0x1000000
   1b8dc:	bcc	1b8d0 <__assert_fail@plt+0xa498>
   1b8e0:	cmp	r1, #0
   1b8e4:	blt	1b8f8 <__assert_fail@plt+0xa4c0>
   1b8e8:	lsl	r1, r1, #1
   1b8ec:	add	r2, r2, #1
   1b8f0:	cmn	r1, #1
   1b8f4:	bgt	1b8e8 <__assert_fail@plt+0xa4b0>
   1b8f8:	lsl	r1, r0, r2
   1b8fc:	str	r2, [r5]
   1b900:	mvn	r2, r0, lsl r2
   1b904:	movw	ip, #65535	; 0xffff
   1b908:	lsr	r4, r1, #16
   1b90c:	uxth	r3, r1
   1b910:	str	r1, [r5, #4]
   1b914:	udiv	r0, r2, r4
   1b918:	mls	r2, r0, r4, r2
   1b91c:	mul	r3, r0, r3
   1b920:	orr	r2, ip, r2, lsl #16
   1b924:	cmp	r2, r3
   1b928:	bcs	1ba4c <__assert_fail@plt+0xa614>
   1b92c:	add	r2, r2, r1
   1b930:	sub	lr, r0, #1
   1b934:	cmp	r2, r1
   1b938:	bcc	1ba48 <__assert_fail@plt+0xa610>
   1b93c:	cmp	r2, r3
   1b940:	bcs	1ba48 <__assert_fail@plt+0xa610>
   1b944:	add	r2, r2, r1
   1b948:	sub	r0, r0, #2
   1b94c:	b	1ba4c <__assert_fail@plt+0xa614>
   1b950:	ldr	r0, [r1, #4]
   1b954:	cmp	r0, #0
   1b958:	beq	1bac8 <__assert_fail@plt+0xa690>
   1b95c:	ldr	r1, [r1]
   1b960:	mov	r2, #0
   1b964:	mov	r3, r0
   1b968:	cmp	r2, r0, lsr #24
   1b96c:	bne	1b988 <__assert_fail@plt+0xa550>
   1b970:	mov	r2, #0
   1b974:	mov	r3, r0
   1b978:	lsl	r3, r3, #8
   1b97c:	add	r2, r2, #8
   1b980:	cmp	r3, #16777216	; 0x1000000
   1b984:	bcc	1b978 <__assert_fail@plt+0xa540>
   1b988:	cmp	r3, #0
   1b98c:	blt	1b9a0 <__assert_fail@plt+0xa568>
   1b990:	lsl	r3, r3, #1
   1b994:	add	r2, r2, #1
   1b998:	cmn	r3, #1
   1b99c:	bgt	1b990 <__assert_fail@plt+0xa558>
   1b9a0:	cmp	r2, #0
   1b9a4:	str	r2, [r5]
   1b9a8:	rsbne	r3, r2, #32
   1b9ac:	lsrne	r3, r1, r3
   1b9b0:	lslne	r1, r1, r2
   1b9b4:	orrne	r0, r3, r0, lsl r2
   1b9b8:	b	1ba34 <__assert_fail@plt+0xa5fc>
   1b9bc:	add	ip, r1, r2, lsl #2
   1b9c0:	ldr	r0, [ip, #-4]
   1b9c4:	cmp	r0, #0
   1b9c8:	beq	1bae8 <__assert_fail@plt+0xa6b0>
   1b9cc:	ldr	r1, [ip, #-8]
   1b9d0:	mov	r3, #0
   1b9d4:	mov	r2, r0
   1b9d8:	cmp	r3, r0, lsr #24
   1b9dc:	bne	1b9f8 <__assert_fail@plt+0xa5c0>
   1b9e0:	mov	r3, #0
   1b9e4:	mov	r2, r0
   1b9e8:	lsl	r2, r2, #8
   1b9ec:	add	r3, r3, #8
   1b9f0:	cmp	r2, #16777216	; 0x1000000
   1b9f4:	bcc	1b9e8 <__assert_fail@plt+0xa5b0>
   1b9f8:	cmp	r2, #0
   1b9fc:	blt	1ba10 <__assert_fail@plt+0xa5d8>
   1ba00:	lsl	r2, r2, #1
   1ba04:	add	r3, r3, #1
   1ba08:	cmn	r2, #1
   1ba0c:	bgt	1ba00 <__assert_fail@plt+0xa5c8>
   1ba10:	cmp	r3, #0
   1ba14:	str	r3, [r5]
   1ba18:	beq	1ba34 <__assert_fail@plt+0xa5fc>
   1ba1c:	rsb	r2, r3, #32
   1ba20:	lsr	r4, r1, r2
   1ba24:	orr	r0, r4, r0, lsl r3
   1ba28:	ldr	r4, [ip, #-12]
   1ba2c:	lsr	r2, r4, r2
   1ba30:	orr	r1, r2, r1, lsl r3
   1ba34:	str	r0, [r5, #4]
   1ba38:	str	r1, [r5, #8]
   1ba3c:	bl	14880 <__assert_fail@plt+0x3448>
   1ba40:	str	r0, [r5, #12]
   1ba44:	pop	{r4, r5, fp, pc}
   1ba48:	mov	r0, lr
   1ba4c:	sub	r2, r2, r3
   1ba50:	mov	r4, #1
   1ba54:	lsr	r3, r2, #16
   1ba58:	mla	r3, r3, r0, r2
   1ba5c:	orr	r2, ip, r2, lsl #16
   1ba60:	add	r4, r4, r3, lsr #16
   1ba64:	mls	r2, r4, r1, r2
   1ba68:	cmp	r2, r3, lsl #16
   1ba6c:	lsrcs	r4, r3, #16
   1ba70:	addcs	r2, r2, r1
   1ba74:	add	r0, r4, r0, lsl #16
   1ba78:	cmp	r2, r1
   1ba7c:	addcs	r0, r0, #1
   1ba80:	str	r0, [r5, #12]
   1ba84:	pop	{r4, r5, fp, pc}
   1ba88:	movw	r0, #29649	; 0x73d1
   1ba8c:	movw	r1, #26324	; 0x66d4
   1ba90:	movw	r3, #29938	; 0x74f2
   1ba94:	mov	r2, #932	; 0x3a4
   1ba98:	movt	r0, #3
   1ba9c:	movt	r1, #3
   1baa0:	movt	r3, #3
   1baa4:	bl	11438 <__assert_fail@plt>
   1baa8:	movw	r0, #31068	; 0x795c
   1baac:	movw	r1, #26324	; 0x66d4
   1bab0:	movw	r3, #31074	; 0x7962
   1bab4:	movw	r2, #902	; 0x386
   1bab8:	movt	r0, #3
   1babc:	movt	r1, #3
   1bac0:	movt	r3, #3
   1bac4:	bl	11438 <__assert_fail@plt>
   1bac8:	movw	r0, #30009	; 0x7539
   1bacc:	movw	r1, #26324	; 0x66d4
   1bad0:	movw	r3, #30016	; 0x7540
   1bad4:	movw	r2, #915	; 0x393
   1bad8:	movt	r0, #3
   1badc:	movt	r1, #3
   1bae0:	movt	r3, #3
   1bae4:	bl	11438 <__assert_fail@plt>
   1bae8:	movw	r0, #30009	; 0x7539
   1baec:	movw	r1, #26324	; 0x66d4
   1baf0:	movw	r3, #29938	; 0x74f2
   1baf4:	movw	r2, #945	; 0x3b1
   1baf8:	movt	r0, #3
   1bafc:	movt	r1, #3
   1bb00:	movt	r3, #3
   1bb04:	bl	11438 <__assert_fail@plt>
   1bb08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb0c:	add	fp, sp, #28
   1bb10:	sub	sp, sp, #52	; 0x34
   1bb14:	ldr	r9, [fp, #8]
   1bb18:	cmp	r9, #0
   1bb1c:	ble	1bed8 <__assert_fail@plt+0xaaa0>
   1bb20:	cmp	r2, r9
   1bb24:	blt	1bef8 <__assert_fail@plt+0xaac0>
   1bb28:	ldr	ip, [fp, #12]
   1bb2c:	mov	r4, r1
   1bb30:	mov	r6, r0
   1bb34:	cmp	r9, #2
   1bb38:	beq	1bb60 <__assert_fail@plt+0xa728>
   1bb3c:	cmp	r9, #1
   1bb40:	bne	1bbe8 <__assert_fail@plt+0xa7b0>
   1bb44:	mov	r0, r6
   1bb48:	mov	r1, r4
   1bb4c:	mov	r3, ip
   1bb50:	bl	1f9d0 <__assert_fail@plt+0xe598>
   1bb54:	str	r0, [r4]
   1bb58:	sub	sp, fp, #28
   1bb5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb60:	cmp	r2, #1
   1bb64:	ble	1bf38 <__assert_fail@plt+0xab00>
   1bb68:	ldm	ip, {r0, r1}
   1bb6c:	ldr	r9, [ip, #8]
   1bb70:	ldr	r8, [ip, #12]
   1bb74:	cmp	r0, #0
   1bb78:	str	r1, [fp, #-36]	; 0xffffffdc
   1bb7c:	str	r0, [sp, #16]
   1bb80:	beq	1bcf8 <__assert_fail@plt+0xa8c0>
   1bb84:	cmp	r0, #32
   1bb88:	str	r9, [fp, #-32]	; 0xffffffe0
   1bb8c:	bcs	1bf18 <__assert_fail@plt+0xaae0>
   1bb90:	add	r1, r4, r2, lsl #2
   1bb94:	sub	lr, r2, #1
   1bb98:	rsb	r3, r0, #32
   1bb9c:	mov	r7, r2
   1bba0:	ldr	r9, [r1, #-4]
   1bba4:	mov	r1, r4
   1bba8:	sub	r4, r4, #8
   1bbac:	mov	sl, r1
   1bbb0:	sub	r1, r1, #4
   1bbb4:	lsl	r5, r9, r0
   1bbb8:	ldr	ip, [r4, r7, lsl #2]
   1bbbc:	orr	r5, r5, ip, lsr r3
   1bbc0:	str	r5, [r1, r7, lsl #2]
   1bbc4:	sub	r7, r7, #1
   1bbc8:	lsl	r5, ip, r0
   1bbcc:	cmp	r7, #1
   1bbd0:	bne	1bbb8 <__assert_fail@plt+0xa780>
   1bbd4:	lsr	r1, r9, r3
   1bbd8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1bbdc:	mov	r4, sl
   1bbe0:	str	r5, [sl]
   1bbe4:	b	1bd00 <__assert_fail@plt+0xa8c8>
   1bbe8:	sub	r8, r9, #1
   1bbec:	ldr	r1, [ip, #4]
   1bbf0:	ldr	r0, [r3, r8, lsl #2]
   1bbf4:	cmp	r1, r0
   1bbf8:	bne	1bf58 <__assert_fail@plt+0xab20>
   1bbfc:	add	r0, r3, r9, lsl #2
   1bc00:	ldr	r7, [ip, #8]
   1bc04:	ldr	r0, [r0, #-8]
   1bc08:	cmp	r7, r0
   1bc0c:	bne	1bf78 <__assert_fail@plt+0xab40>
   1bc10:	cmp	r1, #0
   1bc14:	bge	1bf98 <__assert_fail@plt+0xab60>
   1bc18:	ldr	sl, [ip]
   1bc1c:	mov	lr, r6
   1bc20:	cmp	sl, #0
   1bc24:	beq	1beb4 <__assert_fail@plt+0xaa7c>
   1bc28:	cmp	r2, #0
   1bc2c:	ble	1bfb8 <__assert_fail@plt+0xab80>
   1bc30:	cmp	sl, #32
   1bc34:	bcs	1bf18 <__assert_fail@plt+0xaae0>
   1bc38:	add	r6, r4, r2, lsl #2
   1bc3c:	rsb	r7, sl, #32
   1bc40:	cmp	r2, #1
   1bc44:	str	r4, [sp, #40]	; 0x28
   1bc48:	ldr	r0, [r6, #-4]!
   1bc4c:	lsl	r1, r0, sl
   1bc50:	lsr	r0, r0, r7
   1bc54:	str	r0, [fp, #-32]	; 0xffffffe0
   1bc58:	beq	1bc84 <__assert_fail@plt+0xa84c>
   1bc5c:	rsb	r4, r2, #2
   1bc60:	mov	r5, r6
   1bc64:	ldr	r0, [r5, #-4]!
   1bc68:	add	r4, r4, #1
   1bc6c:	cmp	r4, #1
   1bc70:	orr	r1, r1, r0, lsr r7
   1bc74:	str	r1, [r6]
   1bc78:	lsl	r1, r0, sl
   1bc7c:	mov	r6, r5
   1bc80:	bne	1bc64 <__assert_fail@plt+0xa82c>
   1bc84:	ldr	r4, [sp, #40]	; 0x28
   1bc88:	str	r1, [r4]
   1bc8c:	mov	r1, r4
   1bc90:	ldr	r0, [ip, #12]
   1bc94:	stm	sp, {r3, r9}
   1bc98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bc9c:	str	r0, [sp, #8]
   1bca0:	mov	r0, lr
   1bca4:	bl	20b2c <__assert_fail@plt+0xf6f4>
   1bca8:	ldr	r0, [r4]
   1bcac:	cmp	r8, #0
   1bcb0:	lsr	r1, r0, sl
   1bcb4:	lsl	r0, r0, r7
   1bcb8:	beq	1bce4 <__assert_fail@plt+0xa8ac>
   1bcbc:	add	r2, r4, #4
   1bcc0:	rsb	r3, r9, #1
   1bcc4:	ldr	r6, [r2]
   1bcc8:	adds	r3, r3, #1
   1bccc:	orr	r1, r1, r6, lsl r7
   1bcd0:	str	r1, [r2, #-4]
   1bcd4:	lsr	r1, r6, sl
   1bcd8:	add	r2, r2, #4
   1bcdc:	bne	1bcc4 <__assert_fail@plt+0xa88c>
   1bce0:	add	r4, r4, r8, lsl #2
   1bce4:	cmp	r0, #0
   1bce8:	str	r1, [r4]
   1bcec:	bne	1bfd8 <__assert_fail@plt+0xaba0>
   1bcf0:	sub	sp, fp, #28
   1bcf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcf8:	sub	lr, r2, #1
   1bcfc:	mov	r1, #0
   1bd00:	lsr	r0, r9, #16
   1bd04:	ldr	r5, [r4, lr, lsl #2]
   1bd08:	str	r4, [sp, #40]	; 0x28
   1bd0c:	str	r6, [sp, #36]	; 0x24
   1bd10:	str	r0, [sp, #32]
   1bd14:	uxth	r0, r9
   1bd18:	ldr	lr, [sp, #32]
   1bd1c:	str	r0, [sp, #28]
   1bd20:	lsr	r0, r8, #16
   1bd24:	str	r0, [sp, #24]
   1bd28:	uxth	r0, r8
   1bd2c:	sub	r8, r2, #2
   1bd30:	str	r0, [sp, #20]
   1bd34:	ldr	r2, [sp, #24]
   1bd38:	ldr	r0, [sp, #20]
   1bd3c:	uxth	r4, r1
   1bd40:	lsr	r7, r1, #16
   1bd44:	mov	ip, r9
   1bd48:	mul	r6, r4, r2
   1bd4c:	mul	r4, r4, r0
   1bd50:	mla	r6, r7, r0, r6
   1bd54:	mul	r0, r7, r0
   1bd58:	mul	r7, r7, r2
   1bd5c:	ldr	r2, [sp, #28]
   1bd60:	add	r6, r6, r4, lsr #16
   1bd64:	cmp	r6, r0
   1bd68:	add	r0, r1, r6, lsr #16
   1bd6c:	pkhbt	r1, r4, r6, lsl #16
   1bd70:	addcc	r7, r7, #65536	; 0x10000
   1bd74:	adds	r1, r1, r5
   1bd78:	adc	r4, r0, r7
   1bd7c:	str	r1, [fp, #-32]	; 0xffffffe0
   1bd80:	add	r0, r0, r7
   1bd84:	lsr	r1, r4, #16
   1bd88:	uxth	r9, r4
   1bd8c:	sbc	r0, r0, #0
   1bd90:	mul	r6, r1, r2
   1bd94:	mul	sl, r9, r2
   1bd98:	mul	r3, r9, lr
   1bd9c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1bda0:	mul	r1, r1, lr
   1bda4:	mla	r6, r9, lr, r6
   1bda8:	mov	r9, ip
   1bdac:	add	r6, r6, sl, lsr #16
   1bdb0:	cmp	r6, r3
   1bdb4:	ldr	r3, [sp, #40]	; 0x28
   1bdb8:	addcc	r1, r1, #65536	; 0x10000
   1bdbc:	sub	r5, r5, r2
   1bdc0:	ldr	r3, [r3, r8, lsl #2]
   1bdc4:	cmp	r3, ip
   1bdc8:	sub	r3, r3, ip
   1bdcc:	subcc	r5, r5, #1
   1bdd0:	mls	r5, r4, r2, r5
   1bdd4:	sub	r5, r5, r6, lsr #16
   1bdd8:	sub	r7, r5, r1
   1bddc:	pkhbt	r1, sl, r6, lsl #16
   1bde0:	ldr	r6, [fp, #-32]	; 0xffffffe0
   1bde4:	mov	r5, #0
   1bde8:	cmp	r3, r1
   1bdec:	sub	r1, r3, r1
   1bdf0:	subcc	r7, r7, #1
   1bdf4:	cmp	r7, r6
   1bdf8:	mvncs	r5, #0
   1bdfc:	and	ip, r2, r5
   1be00:	and	r5, r9, r5
   1be04:	adds	r5, r5, r1
   1be08:	adc	r1, ip, r7
   1be0c:	cmp	r7, r6
   1be10:	movcc	r0, r4
   1be14:	cmp	r1, r2
   1be18:	add	r4, r0, #1
   1be1c:	bcs	1be28 <__assert_fail@plt+0xa9f0>
   1be20:	ldr	r6, [sp, #36]	; 0x24
   1be24:	b	1be60 <__assert_fail@plt+0xaa28>
   1be28:	ldr	r6, [sp, #36]	; 0x24
   1be2c:	cmp	r5, r9
   1be30:	bcs	1be40 <__assert_fail@plt+0xaa08>
   1be34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1be38:	cmp	r1, r0
   1be3c:	bls	1be60 <__assert_fail@plt+0xaa28>
   1be40:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1be44:	cmp	r5, r9
   1be48:	mov	r0, #0
   1be4c:	sub	r5, r5, r9
   1be50:	add	r4, r4, #1
   1be54:	mvncc	r0, #0
   1be58:	sub	r0, r0, r3
   1be5c:	add	r1, r0, r1
   1be60:	cmp	r6, #0
   1be64:	sub	r0, r8, #1
   1be68:	strne	r4, [r6, r8, lsl #2]
   1be6c:	cmp	r8, #0
   1be70:	mov	r8, r0
   1be74:	bgt	1bd34 <__assert_fail@plt+0xa8fc>
   1be78:	ldr	r3, [sp, #16]
   1be7c:	cmp	r3, #0
   1be80:	beq	1bea0 <__assert_fail@plt+0xaa68>
   1be84:	rsb	r0, r3, #32
   1be88:	mvn	r2, #0
   1be8c:	tst	r5, r2, lsr r0
   1be90:	bne	1bff8 <__assert_fail@plt+0xabc0>
   1be94:	lsl	r0, r1, r0
   1be98:	lsr	r1, r1, r3
   1be9c:	orr	r5, r0, r5, lsr r3
   1bea0:	ldr	r0, [sp, #40]	; 0x28
   1bea4:	str	r5, [r0]
   1bea8:	str	r1, [r0, #4]
   1beac:	sub	sp, fp, #28
   1beb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1beb4:	ldr	r0, [ip, #12]
   1beb8:	stm	sp, {r3, r9}
   1bebc:	mov	r1, r4
   1bec0:	mov	r3, #0
   1bec4:	str	r0, [sp, #8]
   1bec8:	mov	r0, lr
   1becc:	bl	20b2c <__assert_fail@plt+0xf6f4>
   1bed0:	sub	sp, fp, #28
   1bed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bed8:	movw	r0, #29649	; 0x73d1
   1bedc:	movw	r1, #26324	; 0x66d4
   1bee0:	movw	r3, #30089	; 0x7589
   1bee4:	movw	r2, #1113	; 0x459
   1bee8:	movt	r0, #3
   1beec:	movt	r1, #3
   1bef0:	movt	r3, #3
   1bef4:	bl	11438 <__assert_fail@plt>
   1bef8:	movw	r0, #29721	; 0x7419
   1befc:	movw	r1, #26324	; 0x66d4
   1bf00:	movw	r3, #30089	; 0x7589
   1bf04:	movw	r2, #1114	; 0x45a
   1bf08:	movt	r0, #3
   1bf0c:	movt	r1, #3
   1bf10:	movt	r3, #3
   1bf14:	bl	11438 <__assert_fail@plt>
   1bf18:	movw	r0, #27042	; 0x69a2
   1bf1c:	movw	r1, #26324	; 0x66d4
   1bf20:	movw	r3, #26968	; 0x6958
   1bf24:	movw	r2, #661	; 0x295
   1bf28:	movt	r0, #3
   1bf2c:	movt	r1, #3
   1bf30:	movt	r3, #3
   1bf34:	bl	11438 <__assert_fail@plt>
   1bf38:	movw	r0, #30267	; 0x763b
   1bf3c:	movw	r1, #26324	; 0x66d4
   1bf40:	movw	r3, #30275	; 0x7643
   1bf44:	movw	r2, #1009	; 0x3f1
   1bf48:	movt	r0, #3
   1bf4c:	movt	r1, #3
   1bf50:	movt	r3, #3
   1bf54:	bl	11438 <__assert_fail@plt>
   1bf58:	movw	r0, #30193	; 0x75f1
   1bf5c:	movw	r1, #26324	; 0x66d4
   1bf60:	movw	r3, #30089	; 0x7589
   1bf64:	movw	r2, #1125	; 0x465
   1bf68:	movt	r0, #3
   1bf6c:	movt	r1, #3
   1bf70:	movt	r3, #3
   1bf74:	bl	11438 <__assert_fail@plt>
   1bf78:	movw	r0, #30213	; 0x7605
   1bf7c:	movw	r1, #26324	; 0x66d4
   1bf80:	movw	r3, #30089	; 0x7589
   1bf84:	movw	r2, #1126	; 0x466
   1bf88:	movt	r0, #3
   1bf8c:	movt	r1, #3
   1bf90:	movt	r3, #3
   1bf94:	bl	11438 <__assert_fail@plt>
   1bf98:	movw	r0, #30233	; 0x7619
   1bf9c:	movw	r1, #26324	; 0x66d4
   1bfa0:	movw	r3, #30089	; 0x7589
   1bfa4:	movw	r2, #1127	; 0x467
   1bfa8:	movt	r0, #3
   1bfac:	movt	r1, #3
   1bfb0:	movt	r3, #3
   1bfb4:	bl	11438 <__assert_fail@plt>
   1bfb8:	movw	r0, #26881	; 0x6901
   1bfbc:	movw	r1, #26324	; 0x66d4
   1bfc0:	movw	r3, #26968	; 0x6958
   1bfc4:	movw	r2, #659	; 0x293
   1bfc8:	movt	r0, #3
   1bfcc:	movt	r1, #3
   1bfd0:	movt	r3, #3
   1bfd4:	bl	11438 <__assert_fail@plt>
   1bfd8:	movw	r0, #27305	; 0x6aa9
   1bfdc:	movw	r1, #26324	; 0x66d4
   1bfe0:	movw	r3, #30089	; 0x7589
   1bfe4:	movw	r2, #1138	; 0x472
   1bfe8:	movt	r0, #3
   1bfec:	movt	r1, #3
   1bff0:	movt	r3, #3
   1bff4:	bl	11438 <__assert_fail@plt>
   1bff8:	movw	r0, #30359	; 0x7697
   1bffc:	movw	r1, #26324	; 0x66d4
   1c000:	movw	r3, #30275	; 0x7643
   1c004:	movw	r2, #1036	; 0x40c
   1c008:	movt	r0, #3
   1c00c:	movt	r1, #3
   1c010:	movt	r3, #3
   1c014:	bl	11438 <__assert_fail@plt>
   1c018:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c01c:	add	fp, sp, #24
   1c020:	sub	sp, sp, #16
   1c024:	mov	r5, r1
   1c028:	movw	r1, #26320	; 0x66d0
   1c02c:	mov	r6, r0
   1c030:	mov	r0, #0
   1c034:	mov	r8, r3
   1c038:	cmp	r2, #0
   1c03c:	movt	r1, #3
   1c040:	str	r0, [sp, #8]
   1c044:	str	r0, [sp, #4]
   1c048:	str	r1, [sp, #12]
   1c04c:	beq	1c0b4 <__assert_fail@plt+0xac7c>
   1c050:	movw	r0, #37156	; 0x9124
   1c054:	mov	r9, #1
   1c058:	mov	r7, r2
   1c05c:	movt	r0, #4
   1c060:	str	r9, [sp, #8]
   1c064:	ldr	r1, [r0]
   1c068:	mov	r0, #4
   1c06c:	blx	r1
   1c070:	str	r9, [sp, #4]
   1c074:	str	r0, [sp, #12]
   1c078:	mov	r4, r0
   1c07c:	str	r7, [r0]
   1c080:	add	r2, sp, #4
   1c084:	mov	r0, r6
   1c088:	mov	r1, r5
   1c08c:	mov	r3, r8
   1c090:	bl	1b0f0 <__assert_fail@plt+0x9cb8>
   1c094:	movw	r0, #37164	; 0x912c
   1c098:	mov	r1, #4
   1c09c:	movt	r0, #4
   1c0a0:	ldr	r2, [r0]
   1c0a4:	mov	r0, r4
   1c0a8:	blx	r2
   1c0ac:	sub	sp, fp, #24
   1c0b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c0b4:	str	r0, [sp, #8]
   1c0b8:	add	r2, sp, #4
   1c0bc:	mov	r0, r6
   1c0c0:	mov	r1, r5
   1c0c4:	mov	r3, r8
   1c0c8:	bl	1b0f0 <__assert_fail@plt+0x9cb8>
   1c0cc:	sub	sp, fp, #24
   1c0d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c0d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0d8:	add	fp, sp, #28
   1c0dc:	sub	sp, sp, #84	; 0x54
   1c0e0:	ldr	r5, [r2, #4]
   1c0e4:	mov	r6, r0
   1c0e8:	mvn	r0, r3
   1c0ec:	tst	r0, r5, lsr #31
   1c0f0:	bne	1c820 <__assert_fail@plt+0xb3e8>
   1c0f4:	mov	r7, r3
   1c0f8:	cmp	r3, #0
   1c0fc:	beq	1c82c <__assert_fail@plt+0xb3f4>
   1c100:	cmp	r5, #0
   1c104:	mov	r4, r5
   1c108:	mov	sl, r2
   1c10c:	mov	r8, r1
   1c110:	rsbmi	r4, r5, #0
   1c114:	cmp	r4, #1
   1c118:	bgt	1c174 <__assert_fail@plt+0xad3c>
   1c11c:	cmp	r5, #0
   1c120:	beq	1c134 <__assert_fail@plt+0xacfc>
   1c124:	ldr	r0, [sl, #8]
   1c128:	ldr	r0, [r0]
   1c12c:	cmp	r0, #1
   1c130:	bhi	1c174 <__assert_fail@plt+0xad3c>
   1c134:	cmp	r6, #0
   1c138:	cmpne	r6, sl
   1c13c:	beq	1c804 <__assert_fail@plt+0xb3cc>
   1c140:	ldr	r1, [r6]
   1c144:	cmp	r4, r1
   1c148:	ble	1c744 <__assert_fail@plt+0xb30c>
   1c14c:	cmp	r1, #0
   1c150:	beq	1c754 <__assert_fail@plt+0xb31c>
   1c154:	movw	r0, #37160	; 0x9128
   1c158:	lsl	r1, r1, #2
   1c15c:	mov	r2, #4
   1c160:	movt	r0, #4
   1c164:	ldr	r3, [r0]
   1c168:	ldr	r0, [r6, #8]
   1c16c:	blx	r3
   1c170:	b	1c768 <__assert_fail@plt+0xb330>
   1c174:	movw	r1, #26320	; 0x66d0
   1c178:	mov	r0, #0
   1c17c:	cmp	r4, #0
   1c180:	movt	r1, #3
   1c184:	str	r0, [sp, #52]	; 0x34
   1c188:	str	r0, [sp, #48]	; 0x30
   1c18c:	str	r0, [fp, #-52]	; 0xffffffcc
   1c190:	str	r0, [fp, #-48]	; 0xffffffd0
   1c194:	str	r1, [sp, #56]	; 0x38
   1c198:	str	r1, [fp, #-44]	; 0xffffffd4
   1c19c:	beq	1c1f8 <__assert_fail@plt+0xadc0>
   1c1a0:	ldr	r0, [sl, #8]
   1c1a4:	sub	r2, r4, #1
   1c1a8:	ldr	r0, [r0, r2, lsl #2]
   1c1ac:	cmp	r0, #0
   1c1b0:	beq	1c838 <__assert_fail@plt+0xb400>
   1c1b4:	mov	r1, #0
   1c1b8:	cmp	r1, r0, lsr #24
   1c1bc:	bne	1c1d4 <__assert_fail@plt+0xad9c>
   1c1c0:	mov	r1, #0
   1c1c4:	lsl	r0, r0, #8
   1c1c8:	add	r1, r1, #8
   1c1cc:	cmp	r0, #16777216	; 0x1000000
   1c1d0:	bcc	1c1c4 <__assert_fail@plt+0xad8c>
   1c1d4:	lsl	r2, r2, #5
   1c1d8:	cmp	r0, #0
   1c1dc:	blt	1c1f0 <__assert_fail@plt+0xadb8>
   1c1e0:	lsl	r0, r0, #1
   1c1e4:	add	r1, r1, #1
   1c1e8:	cmn	r0, #1
   1c1ec:	bgt	1c1e0 <__assert_fail@plt+0xada8>
   1c1f0:	orr	r0, r2, #31
   1c1f4:	sub	r0, r0, r1
   1c1f8:	udiv	r0, r0, r7
   1c1fc:	add	r1, r0, #1
   1c200:	sub	r0, fp, #52	; 0x34
   1c204:	bl	1e6a4 <__assert_fail@plt+0xd26c>
   1c208:	cmp	r7, #2
   1c20c:	str	r7, [sp, #32]
   1c210:	str	r6, [sp, #12]
   1c214:	str	r8, [sp, #8]
   1c218:	bne	1c324 <__assert_fail@plt+0xaeec>
   1c21c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1c220:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c224:	movw	r2, #26320	; 0x66d0
   1c228:	mov	r3, #0
   1c22c:	mov	r8, #2
   1c230:	sub	r4, fp, #52	; 0x34
   1c234:	add	r9, sp, #48	; 0x30
   1c238:	mov	r7, #0
   1c23c:	movt	r2, #3
   1c240:	str	r7, [fp, #-48]	; 0xffffffd0
   1c244:	str	r1, [sp, #52]	; 0x34
   1c248:	mov	r6, r1
   1c24c:	mov	r5, r0
   1c250:	str	r0, [sp, #56]	; 0x38
   1c254:	mov	r0, r4
   1c258:	str	r8, [sp]
   1c25c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1c260:	str	r3, [fp, #-52]	; 0xffffffcc
   1c264:	str	r2, [fp, #-44]	; 0xffffffd4
   1c268:	mov	r2, sl
   1c26c:	mov	r3, r9
   1c270:	str	r1, [sp, #24]
   1c274:	str	r1, [sp, #48]	; 0x30
   1c278:	mov	r1, #0
   1c27c:	bl	178f0 <__assert_fail@plt+0x64b8>
   1c280:	mov	r0, r4
   1c284:	mov	r1, r4
   1c288:	mov	r2, r9
   1c28c:	bl	16780 <__assert_fail@plt+0x5348>
   1c290:	mov	r0, r4
   1c294:	mov	r1, r4
   1c298:	mov	r2, #1
   1c29c:	mov	r3, #2
   1c2a0:	bl	18258 <__assert_fail@plt+0x6e20>
   1c2a4:	cmp	r6, #0
   1c2a8:	str	r6, [sp, #28]
   1c2ac:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1c2b0:	mov	r3, r6
   1c2b4:	mov	lr, r5
   1c2b8:	ldrmi	r0, [sp, #28]
   1c2bc:	mov	r2, r1
   1c2c0:	rsbmi	r3, r0, #0
   1c2c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c2c8:	cmp	r1, #0
   1c2cc:	rsbmi	r2, r1, #0
   1c2d0:	cmp	r2, r3
   1c2d4:	bne	1c310 <__assert_fail@plt+0xaed8>
   1c2d8:	sub	r3, r0, #4
   1c2dc:	sub	r7, lr, #4
   1c2e0:	subs	r6, r2, #1
   1c2e4:	blt	1c5d0 <__assert_fail@plt+0xb198>
   1c2e8:	ldr	r5, [r7, r2, lsl #2]
   1c2ec:	ldr	r2, [r3, r2, lsl #2]
   1c2f0:	cmp	r2, r5
   1c2f4:	mov	r2, r6
   1c2f8:	beq	1c2e0 <__assert_fail@plt+0xaea8>
   1c2fc:	ldr	r3, [sp, #24]
   1c300:	ldr	r7, [sp, #28]
   1c304:	mov	r2, lr
   1c308:	bls	1c240 <__assert_fail@plt+0xae08>
   1c30c:	b	1c5d0 <__assert_fail@plt+0xb198>
   1c310:	ldr	r3, [sp, #24]
   1c314:	ldr	r7, [sp, #28]
   1c318:	mov	r2, lr
   1c31c:	blt	1c240 <__assert_fail@plt+0xae08>
   1c320:	b	1c5d0 <__assert_fail@plt+0xb198>
   1c324:	movw	r0, #26320	; 0x66d0
   1c328:	mov	r4, #0
   1c32c:	cmn	r5, #1
   1c330:	movw	r2, #26320	; 0x66d0
   1c334:	sub	r9, r7, #1
   1c338:	sub	r5, fp, #40	; 0x28
   1c33c:	add	r8, sp, #48	; 0x30
   1c340:	mov	r3, #0
   1c344:	mov	r7, #0
   1c348:	str	sl, [sp, #16]
   1c34c:	movt	r0, #3
   1c350:	str	r4, [sp, #40]	; 0x28
   1c354:	str	r4, [sp, #36]	; 0x24
   1c358:	movt	r2, #3
   1c35c:	str	r0, [sp, #44]	; 0x2c
   1c360:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1c364:	rsble	r0, r0, #0
   1c368:	strle	r0, [fp, #-48]	; 0xffffffd0
   1c36c:	ldr	ip, [fp, #-44]	; 0xffffffd4
   1c370:	str	r7, [fp, #-48]	; 0xffffffd0
   1c374:	str	r0, [sp, #52]	; 0x34
   1c378:	str	r0, [sp, #28]
   1c37c:	str	ip, [sp, #56]	; 0x38
   1c380:	mov	r6, #1
   1c384:	str	ip, [sp, #20]
   1c388:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1c38c:	str	r3, [fp, #-52]	; 0xffffffcc
   1c390:	str	r2, [fp, #-44]	; 0xffffffd4
   1c394:	str	r6, [fp, #-36]	; 0xffffffdc
   1c398:	str	r0, [sp, #24]
   1c39c:	str	r0, [sp, #48]	; 0x30
   1c3a0:	movw	r0, #37156	; 0x9124
   1c3a4:	movt	r0, #4
   1c3a8:	ldr	r1, [r0]
   1c3ac:	mov	r0, #4
   1c3b0:	blx	r1
   1c3b4:	str	r6, [fp, #-40]	; 0xffffffd8
   1c3b8:	str	r0, [fp, #-32]	; 0xffffffe0
   1c3bc:	str	r6, [r0]
   1c3c0:	mov	r6, #-2147483648	; 0x80000000
   1c3c4:	mov	r0, r5
   1c3c8:	mov	r1, r5
   1c3cc:	mov	r2, r5
   1c3d0:	bl	17348 <__assert_fail@plt+0x5f10>
   1c3d4:	tst	r6, r9
   1c3d8:	beq	1c3ec <__assert_fail@plt+0xafb4>
   1c3dc:	mov	r0, r5
   1c3e0:	mov	r1, r5
   1c3e4:	mov	r2, r8
   1c3e8:	bl	17348 <__assert_fail@plt+0x5f10>
   1c3ec:	lsr	r0, r6, #1
   1c3f0:	cmp	r4, r6, lsr #1
   1c3f4:	mov	r6, r0
   1c3f8:	bne	1c3c4 <__assert_fail@plt+0xaf8c>
   1c3fc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1c400:	sub	r7, fp, #44	; 0x2c
   1c404:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c408:	ldm	r7, {r0, r3, r7}
   1c40c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   1c410:	cmp	r1, #0
   1c414:	str	r2, [fp, #-36]	; 0xffffffdc
   1c418:	str	r1, [fp, #-40]	; 0xffffffd8
   1c41c:	str	r7, [fp, #-48]	; 0xffffffd0
   1c420:	str	r3, [fp, #-52]	; 0xffffffcc
   1c424:	str	r6, [fp, #-44]	; 0xffffffd4
   1c428:	str	r0, [fp, #-32]	; 0xffffffe0
   1c42c:	beq	1c444 <__assert_fail@plt+0xb00c>
   1c430:	movw	r2, #37164	; 0x912c
   1c434:	lsl	r1, r1, #2
   1c438:	movt	r2, #4
   1c43c:	ldr	r2, [r2]
   1c440:	blx	r2
   1c444:	mov	r0, #2
   1c448:	mov	r1, #0
   1c44c:	mov	r2, sl
   1c450:	str	r0, [sp]
   1c454:	sub	r0, fp, #52	; 0x34
   1c458:	mov	r3, r0
   1c45c:	bl	178f0 <__assert_fail@plt+0x64b8>
   1c460:	ldr	sl, [sp, #32]
   1c464:	movw	r0, #26320	; 0x66d0
   1c468:	cmp	r9, #0
   1c46c:	str	r4, [fp, #-36]	; 0xffffffdc
   1c470:	str	r4, [fp, #-40]	; 0xffffffd8
   1c474:	movt	r0, #3
   1c478:	str	r0, [fp, #-32]	; 0xffffffe0
   1c47c:	beq	1c4e4 <__assert_fail@plt+0xb0ac>
   1c480:	movw	r0, #37156	; 0x9124
   1c484:	mov	r7, #1
   1c488:	movt	r0, #4
   1c48c:	str	r7, [fp, #-36]	; 0xffffffdc
   1c490:	ldr	r1, [r0]
   1c494:	mov	r0, #4
   1c498:	blx	r1
   1c49c:	str	r7, [fp, #-40]	; 0xffffffd8
   1c4a0:	add	r7, sp, #36	; 0x24
   1c4a4:	mov	r6, sl
   1c4a8:	str	r0, [fp, #-32]	; 0xffffffe0
   1c4ac:	mov	sl, r0
   1c4b0:	str	r9, [r0]
   1c4b4:	mov	r1, r8
   1c4b8:	mov	r2, r5
   1c4bc:	mov	r0, r7
   1c4c0:	bl	17348 <__assert_fail@plt+0x5f10>
   1c4c4:	movw	r0, #37164	; 0x912c
   1c4c8:	mov	r1, #4
   1c4cc:	movt	r0, #4
   1c4d0:	ldr	r2, [r0]
   1c4d4:	mov	r0, sl
   1c4d8:	mov	sl, r6
   1c4dc:	blx	r2
   1c4e0:	b	1c4fc <__assert_fail@plt+0xb0c4>
   1c4e4:	add	r7, sp, #36	; 0x24
   1c4e8:	mov	r1, r8
   1c4ec:	mov	r2, r5
   1c4f0:	str	r4, [fp, #-36]	; 0xffffffdc
   1c4f4:	mov	r0, r7
   1c4f8:	bl	17348 <__assert_fail@plt+0x5f10>
   1c4fc:	sub	r6, fp, #52	; 0x34
   1c500:	mov	r2, r7
   1c504:	mov	r0, r6
   1c508:	mov	r1, r6
   1c50c:	bl	16780 <__assert_fail@plt+0x5348>
   1c510:	mov	r0, #2
   1c514:	mov	r1, #0
   1c518:	mov	r2, r6
   1c51c:	mov	r3, sl
   1c520:	str	r0, [sp]
   1c524:	mov	r0, r6
   1c528:	bl	18c08 <__assert_fail@plt+0x77d0>
   1c52c:	ldr	r3, [sp, #28]
   1c530:	ldr	ip, [fp, #-44]	; 0xffffffd4
   1c534:	ldr	sl, [sp, #16]
   1c538:	ldr	lr, [sp, #20]
   1c53c:	cmp	r3, #0
   1c540:	ldrmi	r0, [sp, #28]
   1c544:	rsbmi	r3, r0, #0
   1c548:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1c54c:	cmp	r0, #0
   1c550:	mov	r2, r0
   1c554:	rsbmi	r2, r0, #0
   1c558:	cmp	r2, r3
   1c55c:	bne	1c598 <__assert_fail@plt+0xb160>
   1c560:	sub	r3, ip, #4
   1c564:	sub	r7, lr, #4
   1c568:	subs	r6, r2, #1
   1c56c:	blt	1c5a8 <__assert_fail@plt+0xb170>
   1c570:	ldr	r1, [r7, r2, lsl #2]
   1c574:	ldr	r2, [r3, r2, lsl #2]
   1c578:	cmp	r2, r1
   1c57c:	mov	r2, r6
   1c580:	beq	1c568 <__assert_fail@plt+0xb130>
   1c584:	ldr	r3, [sp, #24]
   1c588:	ldr	r7, [sp, #28]
   1c58c:	mov	r2, lr
   1c590:	bls	1c370 <__assert_fail@plt+0xaf38>
   1c594:	b	1c5a8 <__assert_fail@plt+0xb170>
   1c598:	ldr	r3, [sp, #24]
   1c59c:	ldr	r7, [sp, #28]
   1c5a0:	mov	r2, lr
   1c5a4:	blt	1c370 <__assert_fail@plt+0xaf38>
   1c5a8:	ldr	r0, [sp, #36]	; 0x24
   1c5ac:	cmp	r0, #0
   1c5b0:	beq	1c5d0 <__assert_fail@plt+0xb198>
   1c5b4:	movw	r1, #37164	; 0x912c
   1c5b8:	movt	r1, #4
   1c5bc:	ldr	r2, [r1]
   1c5c0:	lsl	r1, r0, #2
   1c5c4:	ldr	r0, [sp, #44]	; 0x2c
   1c5c8:	blx	r2
   1c5cc:	ldr	lr, [sp, #20]
   1c5d0:	ldr	r9, [sp, #8]
   1c5d4:	ldr	r8, [sp, #12]
   1c5d8:	cmp	r9, #0
   1c5dc:	beq	1c6b4 <__assert_fail@plt+0xb27c>
   1c5e0:	movw	r0, #37156	; 0x9124
   1c5e4:	mov	r4, #1
   1c5e8:	str	lr, [sp, #20]
   1c5ec:	movt	r0, #4
   1c5f0:	str	r4, [fp, #-36]	; 0xffffffdc
   1c5f4:	ldr	r1, [r0]
   1c5f8:	mov	r0, #4
   1c5fc:	blx	r1
   1c600:	str	r4, [fp, #-40]	; 0xffffffd8
   1c604:	str	r0, [fp, #-32]	; 0xffffffe0
   1c608:	str	r4, [r0]
   1c60c:	mov	r6, #-2147483648	; 0x80000000
   1c610:	sub	r4, fp, #40	; 0x28
   1c614:	mov	r7, #0
   1c618:	add	r5, sp, #48	; 0x30
   1c61c:	mov	r0, r4
   1c620:	mov	r1, r4
   1c624:	mov	r2, r4
   1c628:	bl	17348 <__assert_fail@plt+0x5f10>
   1c62c:	ldr	r0, [sp, #32]
   1c630:	tst	r6, r0
   1c634:	beq	1c648 <__assert_fail@plt+0xb210>
   1c638:	mov	r0, r4
   1c63c:	mov	r1, r4
   1c640:	mov	r2, r5
   1c644:	bl	17348 <__assert_fail@plt+0x5f10>
   1c648:	lsr	r0, r6, #1
   1c64c:	cmp	r7, r6, lsr #1
   1c650:	mov	r6, r0
   1c654:	bne	1c61c <__assert_fail@plt+0xb1e4>
   1c658:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1c65c:	sub	r7, fp, #44	; 0x2c
   1c660:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c664:	ldm	r7, {r0, r3, r7}
   1c668:	ldr	r6, [fp, #-32]	; 0xffffffe0
   1c66c:	cmp	r1, #0
   1c670:	str	r2, [fp, #-36]	; 0xffffffdc
   1c674:	str	r1, [fp, #-40]	; 0xffffffd8
   1c678:	str	r7, [fp, #-48]	; 0xffffffd0
   1c67c:	str	r3, [fp, #-52]	; 0xffffffcc
   1c680:	str	r6, [fp, #-44]	; 0xffffffd4
   1c684:	str	r0, [fp, #-32]	; 0xffffffe0
   1c688:	beq	1c6a0 <__assert_fail@plt+0xb268>
   1c68c:	movw	r2, #37164	; 0x912c
   1c690:	lsl	r1, r1, #2
   1c694:	movt	r2, #4
   1c698:	ldr	r2, [r2]
   1c69c:	blx	r2
   1c6a0:	sub	r2, fp, #52	; 0x34
   1c6a4:	mov	r0, r9
   1c6a8:	mov	r1, sl
   1c6ac:	bl	16f5c <__assert_fail@plt+0x5b24>
   1c6b0:	ldr	lr, [sp, #20]
   1c6b4:	cmp	r8, #0
   1c6b8:	beq	1c730 <__assert_fail@plt+0xb2f8>
   1c6bc:	ldr	r0, [r8, #4]
   1c6c0:	ldr	r1, [sp, #28]
   1c6c4:	str	r1, [r8, #4]
   1c6c8:	str	r0, [sp, #52]	; 0x34
   1c6cc:	ldr	r0, [sp, #24]
   1c6d0:	ldr	r1, [r8]
   1c6d4:	str	r0, [r8]
   1c6d8:	str	r1, [sp, #48]	; 0x30
   1c6dc:	ldr	r0, [r8, #8]
   1c6e0:	str	lr, [r8, #8]
   1c6e4:	str	r0, [sp, #56]	; 0x38
   1c6e8:	cmp	r1, #0
   1c6ec:	beq	1c704 <__assert_fail@plt+0xb2cc>
   1c6f0:	movw	r2, #37164	; 0x912c
   1c6f4:	lsl	r1, r1, #2
   1c6f8:	movt	r2, #4
   1c6fc:	ldr	r2, [r2]
   1c700:	blx	r2
   1c704:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1c708:	cmp	r0, #0
   1c70c:	beq	1c728 <__assert_fail@plt+0xb2f0>
   1c710:	movw	r1, #37164	; 0x912c
   1c714:	movt	r1, #4
   1c718:	ldr	r2, [r1]
   1c71c:	lsl	r1, r0, #2
   1c720:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c724:	blx	r2
   1c728:	sub	sp, fp, #28
   1c72c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c730:	ldr	r1, [sp, #24]
   1c734:	mov	r0, lr
   1c738:	cmp	r1, #0
   1c73c:	bne	1c6f0 <__assert_fail@plt+0xb2b8>
   1c740:	b	1c704 <__assert_fail@plt+0xb2cc>
   1c744:	ldr	r0, [r6, #8]
   1c748:	cmp	r4, #1
   1c74c:	bge	1c794 <__assert_fail@plt+0xb35c>
   1c750:	b	1c7fc <__assert_fail@plt+0xb3c4>
   1c754:	movw	r0, #37156	; 0x9124
   1c758:	movt	r0, #4
   1c75c:	ldr	r1, [r0]
   1c760:	mov	r0, #4
   1c764:	blx	r1
   1c768:	mov	r1, #1
   1c76c:	str	r0, [r6, #8]
   1c770:	str	r1, [r6]
   1c774:	ldr	r1, [r6, #4]
   1c778:	cmp	r1, #0
   1c77c:	rsbmi	r1, r1, #0
   1c780:	cmp	r1, #2
   1c784:	movge	r1, #0
   1c788:	strge	r1, [r6, #4]
   1c78c:	cmp	r4, #1
   1c790:	blt	1c7fc <__assert_fail@plt+0xb3c4>
   1c794:	ldr	r5, [sl, #8]
   1c798:	mov	r2, #0
   1c79c:	cmp	r4, #4
   1c7a0:	bcc	1c7e0 <__assert_fail@plt+0xb3a8>
   1c7a4:	add	r1, r5, r4, lsl #2
   1c7a8:	cmp	r0, r1
   1c7ac:	addcc	r1, r0, r4, lsl #2
   1c7b0:	cmpcc	r5, r1
   1c7b4:	bcc	1c7e0 <__assert_fail@plt+0xb3a8>
   1c7b8:	bic	r2, r4, #-2147483645	; 0x80000003
   1c7bc:	mov	r7, r0
   1c7c0:	mov	r1, r5
   1c7c4:	mov	r3, r2
   1c7c8:	vld1.32	{d16-d17}, [r1]!
   1c7cc:	subs	r3, r3, #4
   1c7d0:	vst1.32	{d16-d17}, [r7]!
   1c7d4:	bne	1c7c8 <__assert_fail@plt+0xb390>
   1c7d8:	cmp	r4, r2
   1c7dc:	beq	1c7fc <__assert_fail@plt+0xb3c4>
   1c7e0:	add	r1, r5, r2, lsl #2
   1c7e4:	add	r0, r0, r2, lsl #2
   1c7e8:	sub	r2, r4, r2
   1c7ec:	ldr	r3, [r1], #4
   1c7f0:	subs	r2, r2, #1
   1c7f4:	str	r3, [r0], #4
   1c7f8:	bne	1c7ec <__assert_fail@plt+0xb3b4>
   1c7fc:	ldr	r0, [sl, #4]
   1c800:	str	r0, [r6, #4]
   1c804:	cmp	r8, #0
   1c808:	movne	r0, #0
   1c80c:	strne	r0, [r8, #4]
   1c810:	subne	sp, fp, #28
   1c814:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c818:	sub	sp, fp, #28
   1c81c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c820:	movw	r0, #27782	; 0x6c86
   1c824:	movt	r0, #3
   1c828:	bl	1b85c <__assert_fail@plt+0xa424>
   1c82c:	movw	r0, #27830	; 0x6cb6
   1c830:	movt	r0, #3
   1c834:	bl	1b85c <__assert_fail@plt+0xa424>
   1c838:	movw	r0, #31015	; 0x7927
   1c83c:	movw	r1, #26324	; 0x66d4
   1c840:	movw	r3, #31021	; 0x792d
   1c844:	movw	r2, #1210	; 0x4ba
   1c848:	movt	r0, #3
   1c84c:	movt	r1, #3
   1c850:	movt	r3, #3
   1c854:	bl	11438 <__assert_fail@plt>
   1c858:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c85c:	add	fp, sp, #24
   1c860:	sub	sp, sp, #16
   1c864:	cmp	r1, #1
   1c868:	ble	1cb88 <__assert_fail@plt+0xb750>
   1c86c:	mov	r5, r1
   1c870:	cmp	r1, #63	; 0x3f
   1c874:	bge	1cba8 <__assert_fail@plt+0xb770>
   1c878:	ldr	r4, [r0, #4]
   1c87c:	cmp	r4, #0
   1c880:	rsbmi	r4, r4, #0
   1c884:	cmp	r4, #0
   1c888:	beq	1c980 <__assert_fail@plt+0xb548>
   1c88c:	ldr	r9, [r0, #8]
   1c890:	sub	r0, r4, #1
   1c894:	ldr	r2, [r9, r0, lsl #2]
   1c898:	cmp	r2, #0
   1c89c:	beq	1cbc8 <__assert_fail@plt+0xb790>
   1c8a0:	mov	r1, #0
   1c8a4:	cmp	r1, r2, lsr #24
   1c8a8:	bne	1c8c0 <__assert_fail@plt+0xb488>
   1c8ac:	mov	r1, #0
   1c8b0:	lsl	r2, r2, #8
   1c8b4:	add	r1, r1, #8
   1c8b8:	cmp	r2, #16777216	; 0x1000000
   1c8bc:	bcc	1c8b0 <__assert_fail@plt+0xb478>
   1c8c0:	cmp	r2, #0
   1c8c4:	blt	1c8d8 <__assert_fail@plt+0xb4a0>
   1c8c8:	lsl	r2, r2, #1
   1c8cc:	add	r1, r1, #1
   1c8d0:	cmn	r2, #1
   1c8d4:	bgt	1c8c8 <__assert_fail@plt+0xb490>
   1c8d8:	sub	r2, r5, #2
   1c8dc:	cmp	r2, #30
   1c8e0:	bhi	1c988 <__assert_fail@plt+0xb550>
   1c8e4:	lsl	r0, r0, #5
   1c8e8:	rsb	r1, r1, #32
   1c8ec:	add	r6, r1, r0
   1c8f0:	add	r0, pc, #0
   1c8f4:	ldr	pc, [r0, r2, lsl #2]
   1c8f8:	andeq	ip, r1, ip, ror fp
   1c8fc:	andeq	ip, r1, r8, lsl #19
   1c900:	andeq	ip, r1, r4, ror r9
   1c904:	andeq	ip, r1, r8, lsl #19
   1c908:	andeq	ip, r1, r8, lsl #19
   1c90c:	andeq	ip, r1, r8, lsl #19
   1c910:			; <UNDEFINED> instruction: 0x0001cab4
   1c914:	andeq	ip, r1, r8, lsl #19
   1c918:	andeq	ip, r1, r8, lsl #19
   1c91c:	andeq	ip, r1, r8, lsl #19
   1c920:	andeq	ip, r1, r8, lsl #19
   1c924:	andeq	ip, r1, r8, lsl #19
   1c928:	andeq	ip, r1, r8, lsl #19
   1c92c:	andeq	ip, r1, r8, lsl #19
   1c930:	andeq	ip, r1, ip, asr #21
   1c934:	andeq	ip, r1, r8, lsl #19
   1c938:	andeq	ip, r1, r8, lsl #19
   1c93c:	andeq	ip, r1, r8, lsl #19
   1c940:	andeq	ip, r1, r8, lsl #19
   1c944:	andeq	ip, r1, r8, lsl #19
   1c948:	andeq	ip, r1, r8, lsl #19
   1c94c:	andeq	ip, r1, r8, lsl #19
   1c950:	andeq	ip, r1, r8, lsl #19
   1c954:	andeq	ip, r1, r8, lsl #19
   1c958:	andeq	ip, r1, r8, lsl #19
   1c95c:	andeq	ip, r1, r8, lsl #19
   1c960:	andeq	ip, r1, r8, lsl #19
   1c964:	andeq	ip, r1, r8, lsl #19
   1c968:	andeq	ip, r1, r8, lsl #19
   1c96c:	andeq	ip, r1, r8, lsl #19
   1c970:	ldrdeq	ip, [r1], -r8
   1c974:	add	r0, r6, #1
   1c978:	lsr	r6, r0, #1
   1c97c:	b	1cb7c <__assert_fail@plt+0xb744>
   1c980:	mov	r6, #1
   1c984:	b	1cb7c <__assert_fail@plt+0xb744>
   1c988:	movw	r0, #37156	; 0x9124
   1c98c:	lsl	r8, r4, #2
   1c990:	movt	r0, #4
   1c994:	ldr	r1, [r0]
   1c998:	mov	r0, r8
   1c99c:	blx	r1
   1c9a0:	mov	r7, r0
   1c9a4:	cmp	r4, #1
   1c9a8:	blt	1ca14 <__assert_fail@plt+0xb5dc>
   1c9ac:	mov	r0, #0
   1c9b0:	cmp	r4, #4
   1c9b4:	bcc	1c9f8 <__assert_fail@plt+0xb5c0>
   1c9b8:	add	r1, r9, r4, lsl #2
   1c9bc:	cmp	r7, r1
   1c9c0:	bcs	1c9d0 <__assert_fail@plt+0xb598>
   1c9c4:	add	r1, r7, r4, lsl #2
   1c9c8:	cmp	r1, r9
   1c9cc:	bhi	1c9f8 <__assert_fail@plt+0xb5c0>
   1c9d0:	bic	r0, r4, #-2147483645	; 0x80000003
   1c9d4:	mov	r2, r7
   1c9d8:	mov	r3, r9
   1c9dc:	mov	r1, r0
   1c9e0:	vld1.32	{d16-d17}, [r3]!
   1c9e4:	subs	r1, r1, #4
   1c9e8:	vst1.32	{d16-d17}, [r2]!
   1c9ec:	bne	1c9e0 <__assert_fail@plt+0xb5a8>
   1c9f0:	cmp	r4, r0
   1c9f4:	beq	1ca14 <__assert_fail@plt+0xb5dc>
   1c9f8:	add	r1, r9, r0, lsl #2
   1c9fc:	add	r2, r7, r0, lsl #2
   1ca00:	sub	r0, r4, r0
   1ca04:	ldr	r3, [r1], #4
   1ca08:	subs	r0, r0, #1
   1ca0c:	str	r3, [r2], #4
   1ca10:	bne	1ca04 <__assert_fail@plt+0xb5cc>
   1ca14:	cmp	r5, #0
   1ca18:	beq	1cbe8 <__assert_fail@plt+0xb7b0>
   1ca1c:	mov	r1, #0
   1ca20:	mov	r0, r5
   1ca24:	cmp	r1, r5, lsr #24
   1ca28:	bne	1ca44 <__assert_fail@plt+0xb60c>
   1ca2c:	mov	r1, #0
   1ca30:	mov	r0, r5
   1ca34:	lsl	r0, r0, #8
   1ca38:	add	r1, r1, #8
   1ca3c:	cmp	r0, #16777216	; 0x1000000
   1ca40:	bcc	1ca34 <__assert_fail@plt+0xb5fc>
   1ca44:	cmp	r0, #0
   1ca48:	blt	1ca5c <__assert_fail@plt+0xb624>
   1ca4c:	lsl	r0, r0, #1
   1ca50:	add	r1, r1, #1
   1ca54:	cmn	r0, #1
   1ca58:	bgt	1ca4c <__assert_fail@plt+0xb614>
   1ca5c:	lsl	r0, r5, r1
   1ca60:	mvn	r2, r5, lsl r1
   1ca64:	str	r1, [sp]
   1ca68:	lsr	r6, r0, #16
   1ca6c:	uxth	r3, r0
   1ca70:	str	r0, [sp, #4]
   1ca74:	udiv	r1, r2, r6
   1ca78:	mls	r6, r1, r6, r2
   1ca7c:	movw	r2, #65535	; 0xffff
   1ca80:	mul	r3, r1, r3
   1ca84:	orr	r6, r2, r6, lsl #16
   1ca88:	cmp	r6, r3
   1ca8c:	bcs	1caf4 <__assert_fail@plt+0xb6bc>
   1ca90:	add	r6, r6, r0
   1ca94:	sub	r5, r1, #1
   1ca98:	cmp	r6, r0
   1ca9c:	bcc	1caf0 <__assert_fail@plt+0xb6b8>
   1caa0:	cmp	r6, r3
   1caa4:	bcs	1caf0 <__assert_fail@plt+0xb6b8>
   1caa8:	add	r6, r6, r0
   1caac:	sub	r1, r1, #2
   1cab0:	b	1caf4 <__assert_fail@plt+0xb6bc>
   1cab4:	movw	r1, #43691	; 0xaaab
   1cab8:	add	r0, r6, #2
   1cabc:	movt	r1, #43690	; 0xaaaa
   1cac0:	umull	r0, r1, r0, r1
   1cac4:	lsr	r6, r1, #1
   1cac8:	b	1cb7c <__assert_fail@plt+0xb744>
   1cacc:	add	r0, r6, #3
   1cad0:	lsr	r6, r0, #2
   1cad4:	b	1cb7c <__assert_fail@plt+0xb744>
   1cad8:	movw	r1, #52429	; 0xcccd
   1cadc:	add	r0, r6, #4
   1cae0:	movt	r1, #52428	; 0xcccc
   1cae4:	umull	r0, r1, r0, r1
   1cae8:	lsr	r6, r1, #2
   1caec:	b	1cb7c <__assert_fail@plt+0xb744>
   1caf0:	mov	r1, r5
   1caf4:	sub	r3, r6, r3
   1caf8:	mov	r5, #1
   1cafc:	lsr	r6, r3, #16
   1cb00:	orr	r2, r2, r3, lsl #16
   1cb04:	mla	r6, r6, r1, r3
   1cb08:	add	r5, r5, r6, lsr #16
   1cb0c:	mls	r2, r5, r0, r2
   1cb10:	cmp	r2, r6, lsl #16
   1cb14:	lsrcs	r5, r6, #16
   1cb18:	addcs	r2, r2, r0
   1cb1c:	mov	r6, #0
   1cb20:	add	r1, r5, r1, lsl #16
   1cb24:	cmp	r2, r0
   1cb28:	mov	r5, sp
   1cb2c:	addcs	r1, r1, #1
   1cb30:	str	r1, [sp, #12]
   1cb34:	mov	r0, r7
   1cb38:	mov	r1, r7
   1cb3c:	mov	r2, r4
   1cb40:	mov	r3, r5
   1cb44:	bl	1f9d0 <__assert_fail@plt+0xe598>
   1cb48:	sub	r0, r4, #1
   1cb4c:	add	r6, r6, #1
   1cb50:	ldr	r1, [r7, r0, lsl #2]
   1cb54:	cmp	r1, #0
   1cb58:	moveq	r4, r0
   1cb5c:	cmp	r4, #0
   1cb60:	bgt	1cb34 <__assert_fail@plt+0xb6fc>
   1cb64:	movw	r0, #37164	; 0x912c
   1cb68:	mov	r1, r8
   1cb6c:	movt	r0, #4
   1cb70:	ldr	r2, [r0]
   1cb74:	mov	r0, r7
   1cb78:	blx	r2
   1cb7c:	mov	r0, r6
   1cb80:	sub	sp, fp, #24
   1cb84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cb88:	movw	r0, #28376	; 0x6ed8
   1cb8c:	movw	r1, #26324	; 0x66d4
   1cb90:	movw	r3, #28386	; 0x6ee2
   1cb94:	movw	r2, #4191	; 0x105f
   1cb98:	movt	r0, #3
   1cb9c:	movt	r1, #3
   1cba0:	movt	r3, #3
   1cba4:	bl	11438 <__assert_fail@plt>
   1cba8:	movw	r0, #28435	; 0x6f13
   1cbac:	movw	r1, #26324	; 0x66d4
   1cbb0:	movw	r3, #28386	; 0x6ee2
   1cbb4:	movw	r2, #4192	; 0x1060
   1cbb8:	movt	r0, #3
   1cbbc:	movt	r1, #3
   1cbc0:	movt	r3, #3
   1cbc4:	bl	11438 <__assert_fail@plt>
   1cbc8:	movw	r0, #31015	; 0x7927
   1cbcc:	movw	r1, #26324	; 0x66d4
   1cbd0:	movw	r3, #31021	; 0x792d
   1cbd4:	movw	r2, #1210	; 0x4ba
   1cbd8:	movt	r0, #3
   1cbdc:	movt	r1, #3
   1cbe0:	movt	r3, #3
   1cbe4:	bl	11438 <__assert_fail@plt>
   1cbe8:	movw	r0, #31068	; 0x795c
   1cbec:	movw	r1, #26324	; 0x66d4
   1cbf0:	movw	r3, #31074	; 0x7962
   1cbf4:	movw	r2, #902	; 0x386
   1cbf8:	movt	r0, #3
   1cbfc:	movt	r1, #3
   1cc00:	movt	r3, #3
   1cc04:	bl	11438 <__assert_fail@plt>
   1cc08:	push	{r4, sl, fp, lr}
   1cc0c:	add	fp, sp, #8
   1cc10:	sub	sp, sp, #16
   1cc14:	mov	r3, r2
   1cc18:	mov	r2, r1
   1cc1c:	mov	r1, #0
   1cc20:	str	r1, [sp, #8]
   1cc24:	str	r1, [sp, #4]
   1cc28:	movw	r1, #26320	; 0x66d0
   1cc2c:	movt	r1, #3
   1cc30:	str	r1, [sp, #12]
   1cc34:	add	r1, sp, #4
   1cc38:	bl	1c0d4 <__assert_fail@plt+0xac9c>
   1cc3c:	ldmib	sp, {r0, r1}
   1cc40:	clz	r1, r1
   1cc44:	cmp	r0, #0
   1cc48:	lsr	r4, r1, #5
   1cc4c:	beq	1cc68 <__assert_fail@plt+0xb830>
   1cc50:	movw	r1, #37164	; 0x912c
   1cc54:	movt	r1, #4
   1cc58:	ldr	r2, [r1]
   1cc5c:	lsl	r1, r0, #2
   1cc60:	ldr	r0, [sp, #12]
   1cc64:	blx	r2
   1cc68:	mov	r0, r4
   1cc6c:	sub	sp, fp, #8
   1cc70:	pop	{r4, sl, fp, pc}
   1cc74:	mov	r3, #2
   1cc78:	b	1c0d4 <__assert_fail@plt+0xac9c>
   1cc7c:	mov	r2, r1
   1cc80:	mov	r1, #0
   1cc84:	mov	r3, #2
   1cc88:	b	1c0d4 <__assert_fail@plt+0xac9c>
   1cc8c:	push	{r4, sl, fp, lr}
   1cc90:	add	fp, sp, #8
   1cc94:	sub	sp, sp, #16
   1cc98:	ldr	r4, [r0, #4]
   1cc9c:	cmp	r4, #1
   1cca0:	blt	1ccf4 <__assert_fail@plt+0xb8bc>
   1cca4:	mov	r2, r0
   1cca8:	mov	r0, #0
   1ccac:	add	r1, sp, #4
   1ccb0:	mov	r3, #2
   1ccb4:	str	r0, [sp, #8]
   1ccb8:	str	r0, [sp, #4]
   1ccbc:	movw	r0, #26320	; 0x66d0
   1ccc0:	movt	r0, #3
   1ccc4:	str	r0, [sp, #12]
   1ccc8:	mov	r0, #0
   1cccc:	bl	1c0d4 <__assert_fail@plt+0xac9c>
   1ccd0:	ldmib	sp, {r0, r4}
   1ccd4:	cmp	r0, #0
   1ccd8:	beq	1ccf4 <__assert_fail@plt+0xb8bc>
   1ccdc:	movw	r1, #37164	; 0x912c
   1cce0:	movt	r1, #4
   1cce4:	ldr	r2, [r1]
   1cce8:	lsl	r1, r0, #2
   1ccec:	ldr	r0, [sp, #12]
   1ccf0:	blx	r2
   1ccf4:	clz	r0, r4
   1ccf8:	lsr	r0, r0, #5
   1ccfc:	sub	sp, fp, #8
   1cd00:	pop	{r4, sl, fp, pc}
   1cd04:	push	{r4, sl, fp, lr}
   1cd08:	add	fp, sp, #8
   1cd0c:	sub	sp, sp, #24
   1cd10:	cmp	r1, #0
   1cd14:	ble	1cd98 <__assert_fail@plt+0xb960>
   1cd18:	add	r2, r0, r1, lsl #2
   1cd1c:	ldr	r2, [r2, #-4]
   1cd20:	cmp	r2, #0
   1cd24:	beq	1cdb8 <__assert_fail@plt+0xb980>
   1cd28:	str	r0, [sp, #8]
   1cd2c:	mov	r0, #0
   1cd30:	mov	r2, sp
   1cd34:	mov	r3, #2
   1cd38:	stm	sp, {r0, r1}
   1cd3c:	str	r0, [sp, #16]
   1cd40:	str	r0, [sp, #12]
   1cd44:	movw	r0, #26320	; 0x66d0
   1cd48:	add	r1, sp, #12
   1cd4c:	movt	r0, #3
   1cd50:	str	r0, [sp, #20]
   1cd54:	mov	r0, #0
   1cd58:	bl	1c0d4 <__assert_fail@plt+0xac9c>
   1cd5c:	ldr	r1, [sp, #16]
   1cd60:	ldr	r0, [sp, #12]
   1cd64:	clz	r1, r1
   1cd68:	cmp	r0, #0
   1cd6c:	lsr	r4, r1, #5
   1cd70:	beq	1cd8c <__assert_fail@plt+0xb954>
   1cd74:	movw	r1, #37164	; 0x912c
   1cd78:	movt	r1, #4
   1cd7c:	ldr	r2, [r1]
   1cd80:	lsl	r1, r0, #2
   1cd84:	ldr	r0, [sp, #20]
   1cd88:	blx	r2
   1cd8c:	mov	r0, r4
   1cd90:	sub	sp, fp, #8
   1cd94:	pop	{r4, sl, fp, pc}
   1cd98:	movw	r0, #29650	; 0x73d2
   1cd9c:	movw	r1, #26324	; 0x66d4
   1cda0:	movw	r3, #27856	; 0x6cd0
   1cda4:	movw	r2, #3302	; 0xce6
   1cda8:	movt	r0, #3
   1cdac:	movt	r1, #3
   1cdb0:	movt	r3, #3
   1cdb4:	bl	11438 <__assert_fail@plt>
   1cdb8:	movw	r0, #27903	; 0x6cff
   1cdbc:	movw	r1, #26324	; 0x66d4
   1cdc0:	movw	r3, #27856	; 0x6cd0
   1cdc4:	movw	r2, #3303	; 0xce7
   1cdc8:	movt	r0, #3
   1cdcc:	movt	r1, #3
   1cdd0:	movt	r3, #3
   1cdd4:	bl	11438 <__assert_fail@plt>
   1cdd8:	push	{r4, r5, r6, r7, fp, lr}
   1cddc:	add	fp, sp, #16
   1cde0:	sub	sp, sp, #40	; 0x28
   1cde4:	cmp	r3, #0
   1cde8:	ble	1d01c <__assert_fail@plt+0xbbe4>
   1cdec:	mov	r5, r0
   1cdf0:	add	r0, r2, r3, lsl #2
   1cdf4:	mov	r6, r3
   1cdf8:	ldr	r0, [r0, #-4]
   1cdfc:	cmp	r0, #0
   1ce00:	beq	1d03c <__assert_fail@plt+0xbc04>
   1ce04:	mov	r4, r1
   1ce08:	movw	r1, #26320	; 0x66d0
   1ce0c:	mov	r0, #0
   1ce10:	str	r2, [sp, #12]
   1ce14:	add	r2, sp, #4
   1ce18:	mov	r3, #2
   1ce1c:	movt	r1, #3
   1ce20:	str	r0, [sp, #20]
   1ce24:	str	r0, [sp, #16]
   1ce28:	str	r0, [sp, #28]
   1ce2c:	str	r0, [sp, #32]
   1ce30:	str	r1, [sp, #24]
   1ce34:	str	r1, [sp, #36]	; 0x24
   1ce38:	stmib	sp, {r0, r6}
   1ce3c:	add	r0, sp, #28
   1ce40:	add	r1, sp, #16
   1ce44:	bl	1c0d4 <__assert_fail@plt+0xac9c>
   1ce48:	ldr	r1, [sp, #32]
   1ce4c:	add	r0, r6, #1
   1ce50:	add	r0, r0, r0, lsr #31
   1ce54:	cmp	r1, r0, asr #1
   1ce58:	bne	1d05c <__assert_fail@plt+0xbc24>
   1ce5c:	ldr	r0, [sp, #36]	; 0x24
   1ce60:	cmp	r1, #1
   1ce64:	blt	1cf08 <__assert_fail@plt+0xbad0>
   1ce68:	mvn	r2, r1
   1ce6c:	mvn	r7, #1
   1ce70:	mvn	r3, #1
   1ce74:	cmn	r2, #2
   1ce78:	movgt	r7, r2
   1ce7c:	add	r7, r1, r7
   1ce80:	add	lr, r7, #2
   1ce84:	cmp	lr, #4
   1ce88:	bcc	1cee8 <__assert_fail@plt+0xbab0>
   1ce8c:	cmn	r2, #2
   1ce90:	movle	r2, r3
   1ce94:	sub	r2, r3, r2
   1ce98:	add	r3, r0, r1, lsl #2
   1ce9c:	add	r7, r5, r2, lsl #2
   1cea0:	cmp	r7, r3
   1cea4:	addcc	r3, r5, r1, lsl #2
   1cea8:	addcc	r2, r0, r2, lsl #2
   1ceac:	cmpcc	r2, r3
   1ceb0:	bcc	1cee8 <__assert_fail@plt+0xbab0>
   1ceb4:	mvn	r3, #15
   1ceb8:	bic	ip, lr, #3
   1cebc:	add	r2, r3, r1, lsl #2
   1cec0:	sub	r1, r1, ip
   1cec4:	mov	r7, ip
   1cec8:	add	r6, r0, r2
   1cecc:	add	r2, r5, r2
   1ced0:	vld1.32	{d16-d17}, [r6], r3
   1ced4:	subs	r7, r7, #4
   1ced8:	vst1.32	{d16-d17}, [r2], r3
   1cedc:	bne	1ced0 <__assert_fail@plt+0xba98>
   1cee0:	cmp	lr, ip
   1cee4:	beq	1cf08 <__assert_fail@plt+0xbad0>
   1cee8:	sub	r1, r1, #1
   1ceec:	ldr	r2, [r0, r1, lsl #2]
   1cef0:	str	r2, [r5, r1, lsl #2]
   1cef4:	sub	r2, r1, #1
   1cef8:	add	r1, r1, #1
   1cefc:	cmp	r1, #1
   1cf00:	mov	r1, r2
   1cf04:	bgt	1ceec <__assert_fail@plt+0xbab4>
   1cf08:	ldr	r1, [sp, #28]
   1cf0c:	cmp	r1, #0
   1cf10:	beq	1cf28 <__assert_fail@plt+0xbaf0>
   1cf14:	movw	r2, #37164	; 0x912c
   1cf18:	lsl	r1, r1, #2
   1cf1c:	movt	r2, #4
   1cf20:	ldr	r2, [r2]
   1cf24:	blx	r2
   1cf28:	ldr	r5, [sp, #20]
   1cf2c:	cmp	r4, #0
   1cf30:	beq	1cfec <__assert_fail@plt+0xbbb4>
   1cf34:	cmp	r5, #1
   1cf38:	blt	1cfec <__assert_fail@plt+0xbbb4>
   1cf3c:	mvn	r1, r5
   1cf40:	mvn	r2, #1
   1cf44:	ldr	r0, [sp, #24]
   1cf48:	mvn	r3, #1
   1cf4c:	cmn	r1, #2
   1cf50:	movgt	r2, r1
   1cf54:	add	r2, r5, r2
   1cf58:	add	lr, r2, #2
   1cf5c:	mov	r2, r5
   1cf60:	cmp	lr, #4
   1cf64:	bcc	1cfcc <__assert_fail@plt+0xbb94>
   1cf68:	cmn	r1, #2
   1cf6c:	add	r2, r0, r5, lsl #2
   1cf70:	movle	r1, r3
   1cf74:	sub	r1, r3, r1
   1cf78:	add	r3, r4, r1, lsl #2
   1cf7c:	cmp	r3, r2
   1cf80:	bcs	1cf98 <__assert_fail@plt+0xbb60>
   1cf84:	add	r2, r4, r5, lsl #2
   1cf88:	add	r1, r0, r1, lsl #2
   1cf8c:	cmp	r1, r2
   1cf90:	mov	r2, r5
   1cf94:	bcc	1cfcc <__assert_fail@plt+0xbb94>
   1cf98:	mvn	r3, #15
   1cf9c:	bic	ip, lr, #3
   1cfa0:	add	r1, r3, r5, lsl #2
   1cfa4:	sub	r2, r5, ip
   1cfa8:	mov	r7, ip
   1cfac:	add	r6, r0, r1
   1cfb0:	add	r1, r4, r1
   1cfb4:	vld1.32	{d16-d17}, [r6], r3
   1cfb8:	subs	r7, r7, #4
   1cfbc:	vst1.32	{d16-d17}, [r1], r3
   1cfc0:	bne	1cfb4 <__assert_fail@plt+0xbb7c>
   1cfc4:	cmp	lr, ip
   1cfc8:	beq	1cfec <__assert_fail@plt+0xbbb4>
   1cfcc:	sub	r1, r2, #1
   1cfd0:	ldr	r2, [r0, r1, lsl #2]
   1cfd4:	str	r2, [r4, r1, lsl #2]
   1cfd8:	sub	r2, r1, #1
   1cfdc:	add	r1, r1, #1
   1cfe0:	cmp	r1, #1
   1cfe4:	mov	r1, r2
   1cfe8:	bgt	1cfd0 <__assert_fail@plt+0xbb98>
   1cfec:	ldr	r0, [sp, #16]
   1cff0:	cmp	r0, #0
   1cff4:	beq	1d010 <__assert_fail@plt+0xbbd8>
   1cff8:	movw	r1, #37164	; 0x912c
   1cffc:	movt	r1, #4
   1d000:	ldr	r2, [r1]
   1d004:	lsl	r1, r0, #2
   1d008:	ldr	r0, [sp, #24]
   1d00c:	blx	r2
   1d010:	mov	r0, r5
   1d014:	sub	sp, fp, #16
   1d018:	pop	{r4, r5, r6, r7, fp, pc}
   1d01c:	movw	r0, #29650	; 0x73d2
   1d020:	movw	r1, #26324	; 0x66d4
   1d024:	movw	r3, #27916	; 0x6d0c
   1d028:	movw	r2, #3313	; 0xcf1
   1d02c:	movt	r0, #3
   1d030:	movt	r1, #3
   1d034:	movt	r3, #3
   1d038:	bl	11438 <__assert_fail@plt>
   1d03c:	movw	r0, #27903	; 0x6cff
   1d040:	movw	r1, #26324	; 0x66d4
   1d044:	movw	r3, #27916	; 0x6d0c
   1d048:	movw	r2, #3314	; 0xcf2
   1d04c:	movt	r0, #3
   1d050:	movt	r1, #3
   1d054:	movt	r3, #3
   1d058:	bl	11438 <__assert_fail@plt>
   1d05c:	movw	r0, #27976	; 0x6d48
   1d060:	movw	r1, #26324	; 0x66d4
   1d064:	movw	r3, #27916	; 0x6d0c
   1d068:	movw	r2, #3320	; 0xcf8
   1d06c:	movt	r0, #3
   1d070:	movt	r1, #3
   1d074:	movt	r3, #3
   1d078:	bl	11438 <__assert_fail@plt>
   1d07c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d080:	add	fp, sp, #28
   1d084:	sub	sp, sp, #20
   1d088:	cmp	r1, #0
   1d08c:	mov	r4, r1
   1d090:	mov	r5, r1
   1d094:	mov	r6, r0
   1d098:	str	r2, [sp, #4]
   1d09c:	addeq	r4, r4, #1
   1d0a0:	cmp	r4, #0
   1d0a4:	beq	1d0c4 <__assert_fail@plt+0xbc8c>
   1d0a8:	mov	r0, #1
   1d0ac:	str	r0, [r6, #4]
   1d0b0:	ldr	r1, [r6]
   1d0b4:	cmp	r1, #0
   1d0b8:	ble	1d0d0 <__assert_fail@plt+0xbc98>
   1d0bc:	ldr	r0, [r6, #8]
   1d0c0:	b	1d130 <__assert_fail@plt+0xbcf8>
   1d0c4:	mov	r0, #0
   1d0c8:	str	r0, [r6, #4]
   1d0cc:	b	1d134 <__assert_fail@plt+0xbcfc>
   1d0d0:	beq	1d0f4 <__assert_fail@plt+0xbcbc>
   1d0d4:	movw	r0, #37160	; 0x9128
   1d0d8:	lsl	r1, r1, #2
   1d0dc:	mov	r2, #4
   1d0e0:	movt	r0, #4
   1d0e4:	ldr	r3, [r0]
   1d0e8:	ldr	r0, [r6, #8]
   1d0ec:	blx	r3
   1d0f0:	b	1d108 <__assert_fail@plt+0xbcd0>
   1d0f4:	movw	r0, #37156	; 0x9124
   1d0f8:	movt	r0, #4
   1d0fc:	ldr	r1, [r0]
   1d100:	mov	r0, #4
   1d104:	blx	r1
   1d108:	mov	r1, #1
   1d10c:	str	r0, [r6, #8]
   1d110:	str	r1, [r6]
   1d114:	ldr	r1, [r6, #4]
   1d118:	cmp	r1, #0
   1d11c:	rsbmi	r1, r1, #0
   1d120:	cmp	r1, #2
   1d124:	blt	1d130 <__assert_fail@plt+0xbcf8>
   1d128:	mov	r1, #0
   1d12c:	str	r1, [r6, #4]
   1d130:	str	r4, [r0]
   1d134:	ldr	r0, [sp, #4]
   1d138:	add	r7, r0, #1
   1d13c:	cmp	r7, #2
   1d140:	bcc	1d200 <__assert_fail@plt+0xbdc8>
   1d144:	cmp	r7, r5
   1d148:	bcs	1d200 <__assert_fail@plt+0xbdc8>
   1d14c:	ldr	r0, [sp, #4]
   1d150:	mov	r8, #0
   1d154:	mov	sl, #1
   1d158:	rsb	r0, r0, #0
   1d15c:	str	r0, [sp]
   1d160:	movw	r0, #26320	; 0x66d0
   1d164:	str	r8, [sp, #12]
   1d168:	str	r8, [sp, #8]
   1d16c:	movt	r0, #3
   1d170:	str	r0, [sp, #16]
   1d174:	ldr	r0, [sp]
   1d178:	adds	r9, r0, r5
   1d17c:	ldr	r0, [sp, #4]
   1d180:	sub	r5, r5, r0
   1d184:	beq	1d1e4 <__assert_fail@plt+0xbdac>
   1d188:	movw	r0, #37156	; 0x9124
   1d18c:	str	sl, [sp, #12]
   1d190:	movt	r0, #4
   1d194:	ldr	r1, [r0]
   1d198:	mov	r0, #4
   1d19c:	blx	r1
   1d1a0:	str	sl, [sp, #8]
   1d1a4:	str	r0, [sp, #16]
   1d1a8:	mov	r4, r0
   1d1ac:	str	r9, [r0]
   1d1b0:	mov	r0, r6
   1d1b4:	mov	r1, r6
   1d1b8:	add	r2, sp, #8
   1d1bc:	bl	17348 <__assert_fail@plt+0x5f10>
   1d1c0:	movw	r0, #37164	; 0x912c
   1d1c4:	mov	r1, #4
   1d1c8:	movt	r0, #4
   1d1cc:	ldr	r2, [r0]
   1d1d0:	mov	r0, r4
   1d1d4:	blx	r2
   1d1d8:	cmp	r5, r7
   1d1dc:	bhi	1d160 <__assert_fail@plt+0xbd28>
   1d1e0:	b	1d200 <__assert_fail@plt+0xbdc8>
   1d1e4:	mov	r0, r6
   1d1e8:	mov	r1, r6
   1d1ec:	add	r2, sp, #8
   1d1f0:	str	r8, [sp, #12]
   1d1f4:	bl	17348 <__assert_fail@plt+0x5f10>
   1d1f8:	cmp	r5, r7
   1d1fc:	bhi	1d160 <__assert_fail@plt+0xbd28>
   1d200:	sub	sp, fp, #28
   1d204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d208:	mov	r2, #2
   1d20c:	b	1d07c <__assert_fail@plt+0xbc44>
   1d210:	mov	r2, #1
   1d214:	b	1d07c <__assert_fail@plt+0xbc44>
   1d218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d21c:	add	fp, sp, #28
   1d220:	sub	sp, sp, #28
   1d224:	cmp	r1, r2
   1d228:	mov	r4, #0
   1d22c:	mov	r9, r0
   1d230:	mov	r5, r2
   1d234:	mov	r6, r1
   1d238:	mov	r0, #0
   1d23c:	movwcs	r4, #1
   1d240:	bcc	1d260 <__assert_fail@plt+0xbe28>
   1d244:	mov	r0, #1
   1d248:	str	r0, [r9, #4]
   1d24c:	ldr	r1, [r9]
   1d250:	cmp	r1, #0
   1d254:	ble	1d268 <__assert_fail@plt+0xbe30>
   1d258:	ldr	r0, [r9, #8]
   1d25c:	b	1d2c8 <__assert_fail@plt+0xbe90>
   1d260:	str	r0, [r9, #4]
   1d264:	b	1d2cc <__assert_fail@plt+0xbe94>
   1d268:	beq	1d28c <__assert_fail@plt+0xbe54>
   1d26c:	movw	r0, #37160	; 0x9128
   1d270:	lsl	r1, r1, #2
   1d274:	mov	r2, #4
   1d278:	movt	r0, #4
   1d27c:	ldr	r3, [r0]
   1d280:	ldr	r0, [r9, #8]
   1d284:	blx	r3
   1d288:	b	1d2a0 <__assert_fail@plt+0xbe68>
   1d28c:	movw	r0, #37156	; 0x9124
   1d290:	movt	r0, #4
   1d294:	ldr	r1, [r0]
   1d298:	mov	r0, #4
   1d29c:	blx	r1
   1d2a0:	mov	r1, #1
   1d2a4:	str	r0, [r9, #8]
   1d2a8:	str	r1, [r9]
   1d2ac:	ldr	r1, [r9, #4]
   1d2b0:	cmp	r1, #0
   1d2b4:	rsbmi	r1, r1, #0
   1d2b8:	cmp	r1, #2
   1d2bc:	blt	1d2c8 <__assert_fail@plt+0xbe90>
   1d2c0:	mov	r1, #0
   1d2c4:	str	r1, [r9, #4]
   1d2c8:	str	r4, [r0]
   1d2cc:	movw	r0, #26320	; 0x66d0
   1d2d0:	mov	r4, #0
   1d2d4:	cmp	r6, r5
   1d2d8:	mov	r2, #1
   1d2dc:	mov	sl, #1
   1d2e0:	movt	r0, #3
   1d2e4:	str	r4, [sp, #8]
   1d2e8:	str	r4, [sp, #4]
   1d2ec:	str	r0, [sp, #12]
   1d2f0:	mov	r0, r6
   1d2f4:	movcc	r0, r5
   1d2f8:	cmp	r5, r6, lsr #1
   1d2fc:	subhi	r5, r0, r5
   1d300:	add	r0, sp, #4
   1d304:	mov	r1, r5
   1d308:	bl	1d07c <__assert_fail@plt+0xbc44>
   1d30c:	cmp	r5, #0
   1d310:	beq	1d3a8 <__assert_fail@plt+0xbf70>
   1d314:	add	r8, sp, #16
   1d318:	movw	r0, #26320	; 0x66d0
   1d31c:	cmp	r6, #0
   1d320:	str	r4, [sp, #20]
   1d324:	str	r4, [sp, #16]
   1d328:	movt	r0, #3
   1d32c:	str	r0, [sp, #24]
   1d330:	beq	1d388 <__assert_fail@plt+0xbf50>
   1d334:	movw	r0, #37156	; 0x9124
   1d338:	str	sl, [sp, #20]
   1d33c:	movt	r0, #4
   1d340:	ldr	r1, [r0]
   1d344:	mov	r0, #4
   1d348:	blx	r1
   1d34c:	str	sl, [sp, #16]
   1d350:	str	r0, [sp, #24]
   1d354:	mov	r7, r0
   1d358:	str	r6, [r0]
   1d35c:	mov	r0, r9
   1d360:	mov	r1, r9
   1d364:	mov	r2, r8
   1d368:	bl	17348 <__assert_fail@plt+0x5f10>
   1d36c:	movw	r0, #37164	; 0x912c
   1d370:	mov	r1, #4
   1d374:	movt	r0, #4
   1d378:	ldr	r2, [r0]
   1d37c:	mov	r0, r7
   1d380:	blx	r2
   1d384:	b	1d39c <__assert_fail@plt+0xbf64>
   1d388:	mov	r0, r9
   1d38c:	mov	r1, r9
   1d390:	mov	r2, r8
   1d394:	str	r4, [sp, #20]
   1d398:	bl	17348 <__assert_fail@plt+0x5f10>
   1d39c:	sub	r6, r6, #1
   1d3a0:	subs	r5, r5, #1
   1d3a4:	bne	1d318 <__assert_fail@plt+0xbee0>
   1d3a8:	mov	r0, #2
   1d3ac:	add	r3, sp, #4
   1d3b0:	mov	r1, #0
   1d3b4:	mov	r2, r9
   1d3b8:	str	r0, [sp]
   1d3bc:	mov	r0, r9
   1d3c0:	bl	178f0 <__assert_fail@plt+0x64b8>
   1d3c4:	cmp	r0, #0
   1d3c8:	bne	1d3f8 <__assert_fail@plt+0xbfc0>
   1d3cc:	ldr	r0, [sp, #4]
   1d3d0:	cmp	r0, #0
   1d3d4:	beq	1d3f0 <__assert_fail@plt+0xbfb8>
   1d3d8:	movw	r1, #37164	; 0x912c
   1d3dc:	movt	r1, #4
   1d3e0:	ldr	r2, [r1]
   1d3e4:	lsl	r1, r0, #2
   1d3e8:	ldr	r0, [sp, #12]
   1d3ec:	blx	r2
   1d3f0:	sub	sp, fp, #28
   1d3f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3f8:	movw	r0, #27305	; 0x6aa9
   1d3fc:	movw	r1, #26324	; 0x66d4
   1d400:	movw	r3, #27315	; 0x6ab3
   1d404:	movw	r2, #2521	; 0x9d9
   1d408:	movt	r0, #3
   1d40c:	movt	r1, #3
   1d410:	movt	r3, #3
   1d414:	bl	11438 <__assert_fail@plt>
   1d418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d41c:	add	fp, sp, #28
   1d420:	sub	sp, sp, #116	; 0x74
   1d424:	mov	sl, r0
   1d428:	mov	r8, r1
   1d42c:	ldr	r0, [r0, #4]
   1d430:	ldr	r1, [sl, #8]
   1d434:	cmp	r0, #0
   1d438:	mov	r2, r0
   1d43c:	ldr	r1, [r1]
   1d440:	movwne	r2, #1
   1d444:	tst	r1, r2
   1d448:	beq	1d480 <__assert_fail@plt+0xc048>
   1d44c:	cmp	r0, #0
   1d450:	beq	1e2c4 <__assert_fail@plt+0xce8c>
   1d454:	rsbmi	r0, r0, #0
   1d458:	cmp	r0, #1
   1d45c:	bgt	1d4b4 <__assert_fail@plt+0xc07c>
   1d460:	cmp	r1, #63	; 0x3f
   1d464:	bhi	1d4b4 <__assert_fail@plt+0xc07c>
   1d468:	lsr	r0, r1, #1
   1d46c:	movw	r1, #38620	; 0x96dc
   1d470:	mov	r2, #2
   1d474:	movt	r1, #51561	; 0xc969
   1d478:	and	r7, r2, r1, lsr r0
   1d47c:	b	1e298 <__assert_fail@plt+0xce60>
   1d480:	cmp	r0, #0
   1d484:	mov	r2, r0
   1d488:	mov	r7, #0
   1d48c:	rsbmi	r2, r0, #0
   1d490:	cmp	r2, #1
   1d494:	bgt	1e298 <__assert_fail@plt+0xce60>
   1d498:	sub	r1, r1, #2
   1d49c:	cmp	r0, #0
   1d4a0:	clz	r1, r1
   1d4a4:	lsr	r1, r1, #5
   1d4a8:	lslne	r0, r1, #1
   1d4ac:	mov	r7, r0
   1d4b0:	b	1e298 <__assert_fail@plt+0xce60>
   1d4b4:	movw	r0, #37156	; 0x9124
   1d4b8:	mov	r4, #1
   1d4bc:	movt	r0, #4
   1d4c0:	str	r4, [fp, #-36]	; 0xffffffdc
   1d4c4:	ldr	r1, [r0]
   1d4c8:	mov	r0, #4
   1d4cc:	blx	r1
   1d4d0:	movw	r1, #55191	; 0xd797
   1d4d4:	str	r4, [fp, #-40]	; 0xffffffd8
   1d4d8:	str	r0, [fp, #-32]	; 0xffffffe0
   1d4dc:	movt	r1, #49359	; 0xc0cf
   1d4e0:	str	r1, [r0]
   1d4e4:	sub	r0, fp, #40	; 0x28
   1d4e8:	mov	r1, sl
   1d4ec:	mov	r2, r0
   1d4f0:	bl	19104 <__assert_fail@plt+0x7ccc>
   1d4f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d4f8:	cmp	r0, #0
   1d4fc:	ldrne	r0, [fp, #-32]	; 0xffffffe0
   1d500:	ldrne	r5, [r0]
   1d504:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1d508:	moveq	r5, #0
   1d50c:	cmp	r0, #0
   1d510:	beq	1d52c <__assert_fail@plt+0xc0f4>
   1d514:	movw	r1, #37164	; 0x912c
   1d518:	movt	r1, #4
   1d51c:	ldr	r2, [r1]
   1d520:	lsl	r1, r0, #2
   1d524:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d528:	blx	r2
   1d52c:	mov	r7, #0
   1d530:	cmp	r5, #1
   1d534:	bne	1e298 <__assert_fail@plt+0xce60>
   1d538:	ldr	r1, [sl, #4]
   1d53c:	cmp	r1, #0
   1d540:	mov	r6, r1
   1d544:	rsbmi	r6, r1, #0
   1d548:	cmp	r6, #1
   1d54c:	bgt	1d56c <__assert_fail@plt+0xc134>
   1d550:	mov	r7, #2
   1d554:	cmp	r1, #0
   1d558:	beq	1e298 <__assert_fail@plt+0xce60>
   1d55c:	ldr	r0, [sl, #8]
   1d560:	ldr	r0, [r0]
   1d564:	cmp	r0, #960	; 0x3c0
   1d568:	bls	1e298 <__assert_fail@plt+0xce60>
   1d56c:	movw	r0, #26320	; 0x66d0
   1d570:	add	r2, sp, #56	; 0x38
   1d574:	mov	r5, #0
   1d578:	cmp	r2, sl
   1d57c:	movt	r0, #3
   1d580:	mov	r2, #0
   1d584:	str	r5, [sp, #60]	; 0x3c
   1d588:	str	r5, [sp, #56]	; 0x38
   1d58c:	str	r5, [sp, #44]	; 0x2c
   1d590:	str	r5, [sp, #48]	; 0x30
   1d594:	str	r0, [sp, #64]	; 0x40
   1d598:	str	r0, [sp, #52]	; 0x34
   1d59c:	beq	1d674 <__assert_fail@plt+0xc23c>
   1d5a0:	cmp	r6, #1
   1d5a4:	blt	1d65c <__assert_fail@plt+0xc224>
   1d5a8:	movw	r1, #37156	; 0x9124
   1d5ac:	mov	r7, r6
   1d5b0:	movt	r1, #4
   1d5b4:	movle	r7, #1
   1d5b8:	ldr	r1, [r1]
   1d5bc:	lsl	r0, r7, #2
   1d5c0:	blx	r1
   1d5c4:	str	r0, [sp, #64]	; 0x40
   1d5c8:	str	r7, [sp, #56]	; 0x38
   1d5cc:	mov	r2, #0
   1d5d0:	ldr	r1, [sp, #60]	; 0x3c
   1d5d4:	cmp	r1, #0
   1d5d8:	rsbmi	r1, r1, #0
   1d5dc:	cmp	r1, r7
   1d5e0:	movgt	r1, #0
   1d5e4:	strgt	r1, [sp, #60]	; 0x3c
   1d5e8:	cmp	r6, #4
   1d5ec:	ldr	ip, [sl, #8]
   1d5f0:	bcc	1d634 <__assert_fail@plt+0xc1fc>
   1d5f4:	add	r1, ip, r6, lsl #2
   1d5f8:	cmp	r0, r1
   1d5fc:	bcs	1d60c <__assert_fail@plt+0xc1d4>
   1d600:	add	r1, r0, r6, lsl #2
   1d604:	cmp	r1, ip
   1d608:	bhi	1d634 <__assert_fail@plt+0xc1fc>
   1d60c:	bic	r2, r6, #-2147483645	; 0x80000003
   1d610:	mov	r7, r0
   1d614:	mov	r1, ip
   1d618:	mov	r3, r2
   1d61c:	vld1.32	{d16-d17}, [r1]!
   1d620:	subs	r3, r3, #4
   1d624:	vst1.32	{d16-d17}, [r7]!
   1d628:	bne	1d61c <__assert_fail@plt+0xc1e4>
   1d62c:	cmp	r6, r2
   1d630:	beq	1d650 <__assert_fail@plt+0xc218>
   1d634:	add	r1, ip, r2, lsl #2
   1d638:	add	r3, r0, r2, lsl #2
   1d63c:	sub	r2, r6, r2
   1d640:	ldr	r7, [r1], #4
   1d644:	subs	r2, r2, #1
   1d648:	str	r7, [r3], #4
   1d64c:	bne	1d640 <__assert_fail@plt+0xc208>
   1d650:	ldr	r1, [sl, #4]
   1d654:	rsb	r2, r1, #0
   1d658:	b	1d668 <__assert_fail@plt+0xc230>
   1d65c:	movw	r0, #26320	; 0x66d0
   1d660:	rsb	r2, r1, #0
   1d664:	movt	r0, #3
   1d668:	cmp	r1, #0
   1d66c:	str	r1, [sp, #60]	; 0x3c
   1d670:	movge	r2, r1
   1d674:	str	r2, [sp, #60]	; 0x3c
   1d678:	ldr	r1, [r0]
   1d67c:	subs	r1, r1, #1
   1d680:	str	r1, [r0]
   1d684:	bne	1d6a0 <__assert_fail@plt+0xc268>
   1d688:	add	r0, r0, #4
   1d68c:	mov	r5, #0
   1d690:	ldr	r1, [r0, r5, lsl #2]
   1d694:	add	r5, r5, #1
   1d698:	cmp	r1, #0
   1d69c:	beq	1d690 <__assert_fail@plt+0xc258>
   1d6a0:	rsb	r0, r1, #0
   1d6a4:	and	r1, r1, r0
   1d6a8:	mov	r0, #0
   1d6ac:	cmp	r0, r1, lsr #24
   1d6b0:	bne	1d6c8 <__assert_fail@plt+0xc290>
   1d6b4:	mov	r0, #0
   1d6b8:	lsl	r1, r1, #8
   1d6bc:	add	r0, r0, #8
   1d6c0:	cmp	r1, #16777216	; 0x1000000
   1d6c4:	bcc	1d6b8 <__assert_fail@plt+0xc280>
   1d6c8:	cmp	r1, #0
   1d6cc:	blt	1d6e0 <__assert_fail@plt+0xc2a8>
   1d6d0:	lsl	r1, r1, #1
   1d6d4:	add	r0, r0, #1
   1d6d8:	cmn	r1, #1
   1d6dc:	bgt	1d6d0 <__assert_fail@plt+0xc298>
   1d6e0:	mov	r1, #31
   1d6e4:	mov	r3, #2
   1d6e8:	orr	r1, r1, r5, lsl #5
   1d6ec:	sub	r2, r1, r0
   1d6f0:	add	r0, sp, #44	; 0x2c
   1d6f4:	add	r1, sp, #56	; 0x38
   1d6f8:	str	r2, [sp, #24]
   1d6fc:	bl	18258 <__assert_fail@plt+0x6e20>
   1d700:	movw	r5, #26320	; 0x66d0
   1d704:	mov	r0, #0
   1d708:	mov	r4, #1
   1d70c:	movt	r5, #3
   1d710:	str	r5, [sp, #40]	; 0x28
   1d714:	str	r0, [sp, #32]
   1d718:	movw	r0, #37156	; 0x9124
   1d71c:	str	r4, [sp, #36]	; 0x24
   1d720:	movt	r0, #4
   1d724:	ldr	r1, [r0]
   1d728:	mov	r0, #4
   1d72c:	blx	r1
   1d730:	str	r0, [sp, #40]	; 0x28
   1d734:	str	r4, [sp, #32]
   1d738:	add	r2, sp, #32
   1d73c:	add	r3, sp, #44	; 0x2c
   1d740:	ldr	r1, [sp, #36]	; 0x24
   1d744:	cmp	r1, #0
   1d748:	rsbmi	r1, r1, #0
   1d74c:	cmp	r1, #2
   1d750:	movge	r1, #0
   1d754:	strge	r1, [sp, #36]	; 0x24
   1d758:	mov	r1, #2
   1d75c:	str	r1, [r0]
   1d760:	ldr	r0, [sp, #24]
   1d764:	add	r1, sp, #56	; 0x38
   1d768:	str	r0, [sp]
   1d76c:	mov	r0, sl
   1d770:	bl	1e404 <__assert_fail@plt+0xcfcc>
   1d774:	mov	r1, #0
   1d778:	cmp	r0, #0
   1d77c:	mov	r7, #0
   1d780:	beq	1e0b0 <__assert_fail@plt+0xcc78>
   1d784:	ldmib	sl, {r0, r1}
   1d788:	mov	r2, #0
   1d78c:	str	r2, [sp, #68]	; 0x44
   1d790:	cmp	r0, #0
   1d794:	mov	r2, r0
   1d798:	str	r1, [sp, #76]	; 0x4c
   1d79c:	rsbmi	r2, r0, #0
   1d7a0:	cmp	r0, #0
   1d7a4:	str	r2, [sp, #72]	; 0x48
   1d7a8:	movwne	r0, #1
   1d7ac:	ldr	r1, [r1]
   1d7b0:	tst	r1, r0
   1d7b4:	beq	1e2e4 <__assert_fail@plt+0xceac>
   1d7b8:	mov	r7, #0
   1d7bc:	add	r0, sp, #32
   1d7c0:	sub	r1, fp, #52	; 0x34
   1d7c4:	add	r2, sp, #68	; 0x44
   1d7c8:	mov	r3, #2
   1d7cc:	str	r8, [sp, #12]
   1d7d0:	str	r7, [fp, #-48]	; 0xffffffd0
   1d7d4:	str	r7, [fp, #-52]	; 0xffffffcc
   1d7d8:	str	r5, [fp, #-44]	; 0xffffffd4
   1d7dc:	bl	1c0d4 <__assert_fail@plt+0xac9c>
   1d7e0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1d7e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1d7e8:	cmp	r0, #0
   1d7ec:	beq	1d808 <__assert_fail@plt+0xc3d0>
   1d7f0:	movw	r1, #37164	; 0x912c
   1d7f4:	movt	r1, #4
   1d7f8:	ldr	r2, [r1]
   1d7fc:	lsl	r1, r0, #2
   1d800:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d804:	blx	r2
   1d808:	cmp	r5, #0
   1d80c:	beq	1e0a8 <__assert_fail@plt+0xcc70>
   1d810:	ldr	r0, [sp, #36]	; 0x24
   1d814:	mvn	r8, #0
   1d818:	mov	r6, #3
   1d81c:	mov	r9, #2
   1d820:	add	r4, sp, #68	; 0x44
   1d824:	cmp	r0, #1
   1d828:	ldreq	r0, [sp, #40]	; 0x28
   1d82c:	ldreq	r0, [r0]
   1d830:	subeq	r8, r0, #1
   1d834:	cmp	r6, r8
   1d838:	bcs	1da7c <__assert_fail@plt+0xc644>
   1d83c:	add	r6, r6, #2
   1d840:	mov	r0, #0
   1d844:	mov	r1, #0
   1d848:	mov	r2, r4
   1d84c:	str	r9, [sp]
   1d850:	mov	r7, #0
   1d854:	mov	r3, r6
   1d858:	bl	18c08 <__assert_fail@plt+0x77d0>
   1d85c:	cmp	r0, #0
   1d860:	beq	1e0a8 <__assert_fail@plt+0xcc70>
   1d864:	rsb	r1, r0, #0
   1d868:	mov	r3, #0
   1d86c:	and	r1, r0, r1
   1d870:	cmp	r3, r1, lsr #24
   1d874:	bne	1d88c <__assert_fail@plt+0xc454>
   1d878:	mov	r3, #0
   1d87c:	lsl	r1, r1, #8
   1d880:	add	r3, r3, #8
   1d884:	cmp	r1, #16777216	; 0x1000000
   1d888:	bcc	1d87c <__assert_fail@plt+0xc444>
   1d88c:	cmp	r1, #0
   1d890:	blt	1d8a4 <__assert_fail@plt+0xc46c>
   1d894:	lsl	r1, r1, #1
   1d898:	add	r3, r3, #1
   1d89c:	cmn	r1, #1
   1d8a0:	bgt	1d894 <__assert_fail@plt+0xc45c>
   1d8a4:	lsr	r2, r0, #1
   1d8a8:	lsr	r5, r6, #1
   1d8ac:	rsb	r3, r3, #31
   1d8b0:	mov	r0, #0
   1d8b4:	b	1d8bc <__assert_fail@plt+0xc484>
   1d8b8:	rsb	r3, r3, #32
   1d8bc:	eor	r7, r5, r5, lsr #1
   1d8c0:	lsr	r1, r2, r3
   1d8c4:	cmp	r5, r2, lsr r3
   1d8c8:	and	r7, r7, r3
   1d8cc:	eor	r0, r7, r0
   1d8d0:	bls	1d8f0 <__assert_fail@plt+0xc4b8>
   1d8d4:	cmp	r1, #0
   1d8d8:	beq	1d93c <__assert_fail@plt+0xc504>
   1d8dc:	and	r3, r1, r5
   1d8e0:	sub	r2, r5, r1
   1d8e4:	mov	r5, r1
   1d8e8:	eor	r0, r0, r3
   1d8ec:	b	1d8f8 <__assert_fail@plt+0xc4c0>
   1d8f0:	subs	r2, r1, r5
   1d8f4:	beq	1e2a4 <__assert_fail@plt+0xce6c>
   1d8f8:	rsb	r1, r2, #0
   1d8fc:	mov	r3, #0
   1d900:	and	r7, r2, r1
   1d904:	cmp	r3, r7, lsr #24
   1d908:	bne	1d920 <__assert_fail@plt+0xc4e8>
   1d90c:	mov	r3, #0
   1d910:	lsl	r7, r7, #8
   1d914:	add	r3, r3, #8
   1d918:	cmp	r7, #16777216	; 0x1000000
   1d91c:	bcc	1d910 <__assert_fail@plt+0xc4d8>
   1d920:	cmp	r7, #0
   1d924:	blt	1d8b8 <__assert_fail@plt+0xc480>
   1d928:	lsl	r7, r7, #1
   1d92c:	add	r3, r3, #1
   1d930:	cmn	r7, #1
   1d934:	bgt	1d928 <__assert_fail@plt+0xc4f0>
   1d938:	b	1d8b8 <__assert_fail@plt+0xc480>
   1d93c:	tst	r0, #1
   1d940:	beq	1d834 <__assert_fail@plt+0xc3fc>
   1d944:	ldr	ip, [sp, #72]	; 0x48
   1d948:	movw	r0, #26320	; 0x66d0
   1d94c:	mov	r5, #0
   1d950:	movt	r0, #3
   1d954:	str	r5, [fp, #-60]	; 0xffffffc4
   1d958:	str	r5, [fp, #-64]	; 0xffffffc0
   1d95c:	str	r0, [fp, #-56]	; 0xffffffc8
   1d960:	cmp	ip, #0
   1d964:	blt	1e324 <__assert_fail@plt+0xceec>
   1d968:	ldr	r2, [sp, #76]	; 0x4c
   1d96c:	ldr	r0, [r2]
   1d970:	cmn	r0, #1
   1d974:	mov	r1, r0
   1d978:	bne	1d9a4 <__assert_fail@plt+0xc56c>
   1d97c:	add	r7, r2, #4
   1d980:	sub	r3, ip, #1
   1d984:	mov	r2, #0
   1d988:	cmp	r3, r2
   1d98c:	beq	1daa8 <__assert_fail@plt+0xc670>
   1d990:	ldr	r1, [r7, r2, lsl #2]
   1d994:	add	r5, r2, #1
   1d998:	mov	r2, r5
   1d99c:	cmn	r1, #1
   1d9a0:	beq	1d988 <__assert_fail@plt+0xc550>
   1d9a4:	add	r2, r1, #1
   1d9a8:	mov	r3, #0
   1d9ac:	bic	r7, r2, r1
   1d9b0:	cmp	r3, r7, lsr #24
   1d9b4:	bne	1d9cc <__assert_fail@plt+0xc594>
   1d9b8:	mov	r3, #0
   1d9bc:	lsl	r7, r7, #8
   1d9c0:	add	r3, r3, #8
   1d9c4:	cmp	r7, #16777216	; 0x1000000
   1d9c8:	bcc	1d9bc <__assert_fail@plt+0xc584>
   1d9cc:	cmp	r7, #0
   1d9d0:	blt	1d9e4 <__assert_fail@plt+0xc5ac>
   1d9d4:	lsl	r7, r7, #1
   1d9d8:	add	r3, r3, #1
   1d9dc:	cmn	r7, #1
   1d9e0:	bgt	1d9d4 <__assert_fail@plt+0xc59c>
   1d9e4:	mov	r1, #31
   1d9e8:	orr	r1, r1, r5, lsl #5
   1d9ec:	sub	r7, r1, r3
   1d9f0:	mov	r2, #1
   1d9f4:	mov	r1, #0
   1d9f8:	tst	r6, #2
   1d9fc:	add	r5, r2, r6, lsr #2
   1da00:	subeq	r5, r1, r6, lsr #2
   1da04:	cmp	r7, #0
   1da08:	beq	1e344 <__assert_fail@plt+0xcf0c>
   1da0c:	cmp	r5, #1073741825	; 0x40000001
   1da10:	bge	1e364 <__assert_fail@plt+0xcf2c>
   1da14:	cmp	r5, #-1073741824	; 0xc0000000
   1da18:	ble	1e384 <__assert_fail@plt+0xcf4c>
   1da1c:	cmp	ip, #1
   1da20:	bgt	1da34 <__assert_fail@plt+0xc5fc>
   1da24:	cmp	r0, #5
   1da28:	bcc	1e3a4 <__assert_fail@plt+0xcf6c>
   1da2c:	cmp	ip, #0
   1da30:	beq	1e3a4 <__assert_fail@plt+0xcf6c>
   1da34:	tst	r0, #1
   1da38:	beq	1e3c4 <__assert_fail@plt+0xcf8c>
   1da3c:	movw	r0, #37156	; 0x9124
   1da40:	mov	r4, #1
   1da44:	movt	r0, #4
   1da48:	str	r4, [fp, #-36]	; 0xffffffdc
   1da4c:	ldr	r1, [r0]
   1da50:	mov	r0, #4
   1da54:	blx	r1
   1da58:	str	r4, [fp, #-40]	; 0xffffffd8
   1da5c:	str	r0, [fp, #-32]	; 0xffffffe0
   1da60:	str	r4, [r0]
   1da64:	str	r4, [fp, #-60]	; 0xffffffc4
   1da68:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1da6c:	cmp	r1, #0
   1da70:	ble	1da84 <__assert_fail@plt+0xc64c>
   1da74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1da78:	b	1dae8 <__assert_fail@plt+0xc6b0>
   1da7c:	mov	r7, #1
   1da80:	b	1e0a8 <__assert_fail@plt+0xcc70>
   1da84:	beq	1dab0 <__assert_fail@plt+0xc678>
   1da88:	movw	r0, #37160	; 0x9128
   1da8c:	lsl	r1, r1, #2
   1da90:	mov	r2, #4
   1da94:	movt	r0, #4
   1da98:	ldr	r3, [r0]
   1da9c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1daa0:	blx	r3
   1daa4:	b	1dac4 <__assert_fail@plt+0xc68c>
   1daa8:	lsl	r7, ip, #5
   1daac:	b	1d9f0 <__assert_fail@plt+0xc5b8>
   1dab0:	movw	r0, #37156	; 0x9124
   1dab4:	movt	r0, #4
   1dab8:	ldr	r1, [r0]
   1dabc:	mov	r0, #4
   1dac0:	blx	r1
   1dac4:	mov	r1, #1
   1dac8:	str	r0, [fp, #-56]	; 0xffffffc8
   1dacc:	str	r1, [fp, #-64]	; 0xffffffc0
   1dad0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1dad4:	cmp	r1, #0
   1dad8:	rsbmi	r1, r1, #0
   1dadc:	cmp	r1, #2
   1dae0:	movge	r1, #0
   1dae4:	strge	r1, [fp, #-60]	; 0xffffffc4
   1dae8:	mov	r1, #1
   1daec:	cmp	r5, #0
   1daf0:	str	r1, [r0]
   1daf4:	blt	1db18 <__assert_fail@plt+0xc6e0>
   1daf8:	beq	1db38 <__assert_fail@plt+0xc700>
   1dafc:	mov	r0, #1
   1db00:	str	r0, [sp, #36]	; 0x24
   1db04:	ldr	r1, [sp, #32]
   1db08:	cmp	r1, #0
   1db0c:	ble	1db44 <__assert_fail@plt+0xc70c>
   1db10:	ldr	r0, [sp, #40]	; 0x28
   1db14:	b	1dbc8 <__assert_fail@plt+0xc790>
   1db18:	mvn	r0, #0
   1db1c:	rsb	r4, r5, #0
   1db20:	str	r0, [sp, #36]	; 0x24
   1db24:	ldr	r1, [sp, #32]
   1db28:	cmp	r1, #0
   1db2c:	ble	1db68 <__assert_fail@plt+0xc730>
   1db30:	ldr	r0, [sp, #40]	; 0x28
   1db34:	b	1dc08 <__assert_fail@plt+0xc7d0>
   1db38:	mov	r0, #0
   1db3c:	str	r0, [sp, #36]	; 0x24
   1db40:	b	1dc0c <__assert_fail@plt+0xc7d4>
   1db44:	beq	1db8c <__assert_fail@plt+0xc754>
   1db48:	movw	r0, #37160	; 0x9128
   1db4c:	lsl	r1, r1, #2
   1db50:	mov	r2, #4
   1db54:	movt	r0, #4
   1db58:	ldr	r3, [r0]
   1db5c:	ldr	r0, [sp, #40]	; 0x28
   1db60:	blx	r3
   1db64:	b	1dba0 <__assert_fail@plt+0xc768>
   1db68:	beq	1dbd0 <__assert_fail@plt+0xc798>
   1db6c:	movw	r0, #37160	; 0x9128
   1db70:	lsl	r1, r1, #2
   1db74:	mov	r2, #4
   1db78:	movt	r0, #4
   1db7c:	ldr	r3, [r0]
   1db80:	ldr	r0, [sp, #40]	; 0x28
   1db84:	blx	r3
   1db88:	b	1dbe4 <__assert_fail@plt+0xc7ac>
   1db8c:	movw	r0, #37156	; 0x9124
   1db90:	movt	r0, #4
   1db94:	ldr	r1, [r0]
   1db98:	mov	r0, #4
   1db9c:	blx	r1
   1dba0:	mov	r1, #1
   1dba4:	str	r1, [sp, #32]
   1dba8:	str	r0, [sp, #40]	; 0x28
   1dbac:	ldr	r1, [sp, #36]	; 0x24
   1dbb0:	cmp	r1, #0
   1dbb4:	rsbmi	r1, r1, #0
   1dbb8:	cmp	r1, #2
   1dbbc:	blt	1dbc8 <__assert_fail@plt+0xc790>
   1dbc0:	mov	r1, #0
   1dbc4:	str	r1, [sp, #36]	; 0x24
   1dbc8:	str	r5, [r0]
   1dbcc:	b	1dc0c <__assert_fail@plt+0xc7d4>
   1dbd0:	movw	r0, #37156	; 0x9124
   1dbd4:	movt	r0, #4
   1dbd8:	ldr	r1, [r0]
   1dbdc:	mov	r0, #4
   1dbe0:	blx	r1
   1dbe4:	mov	r1, #1
   1dbe8:	str	r1, [sp, #32]
   1dbec:	str	r0, [sp, #40]	; 0x28
   1dbf0:	ldr	r1, [sp, #36]	; 0x24
   1dbf4:	cmp	r1, #0
   1dbf8:	rsbmi	r1, r1, #0
   1dbfc:	cmp	r1, #2
   1dc00:	movge	r1, #0
   1dc04:	strge	r1, [sp, #36]	; 0x24
   1dc08:	str	r4, [r0]
   1dc0c:	ldr	r0, [sp, #72]	; 0x48
   1dc10:	cmp	r0, #0
   1dc14:	rsbmi	r0, r0, #0
   1dc18:	cmp	r0, #0
   1dc1c:	beq	1dc90 <__assert_fail@plt+0xc858>
   1dc20:	sub	r2, r0, #1
   1dc24:	ldr	r0, [sp, #76]	; 0x4c
   1dc28:	ldr	r0, [r0, r2, lsl #2]
   1dc2c:	cmp	r0, #0
   1dc30:	beq	1e3e4 <__assert_fail@plt+0xcfac>
   1dc34:	mov	r1, #0
   1dc38:	cmp	r1, r0, lsr #24
   1dc3c:	bne	1dc54 <__assert_fail@plt+0xc81c>
   1dc40:	mov	r1, #0
   1dc44:	lsl	r0, r0, #8
   1dc48:	add	r1, r1, #8
   1dc4c:	cmp	r0, #16777216	; 0x1000000
   1dc50:	bcc	1dc44 <__assert_fail@plt+0xc80c>
   1dc54:	lsl	r2, r2, #5
   1dc58:	cmp	r0, #0
   1dc5c:	blt	1dc70 <__assert_fail@plt+0xc838>
   1dc60:	lsl	r0, r0, #1
   1dc64:	add	r1, r1, #1
   1dc68:	cmn	r0, #1
   1dc6c:	bgt	1dc60 <__assert_fail@plt+0xc828>
   1dc70:	mvn	r0, r1
   1dc74:	orr	r1, r2, #31
   1dc78:	add	r9, r1, r0
   1dc7c:	cmp	r9, r7
   1dc80:	bcs	1dc94 <__assert_fail@plt+0xc85c>
   1dc84:	mov	r0, #1
   1dc88:	mov	r5, #0
   1dc8c:	b	1df60 <__assert_fail@plt+0xcb28>
   1dc90:	mvn	r9, #0
   1dc94:	mov	r0, #0
   1dc98:	str	r7, [sp, #28]
   1dc9c:	sub	r4, fp, #40	; 0x28
   1dca0:	sub	r8, fp, #64	; 0x40
   1dca4:	add	r7, sp, #32
   1dca8:	str	sl, [sp, #8]
   1dcac:	str	r5, [sp, #20]
   1dcb0:	sub	r0, r0, r5, lsl #1
   1dcb4:	str	r0, [sp, #16]
   1dcb8:	b	1dd0c <__assert_fail@plt+0xc8d4>
   1dcbc:	cmp	r3, #0
   1dcc0:	beq	1dcdc <__assert_fail@plt+0xc8a4>
   1dcc4:	rsb	r2, r3, #32
   1dcc8:	mov	r3, #0
   1dccc:	cmp	r3, r4, lsl r2
   1dcd0:	beq	1dcdc <__assert_fail@plt+0xc8a4>
   1dcd4:	eor	r0, r0, #1
   1dcd8:	b	1de2c <__assert_fail@plt+0xc9f4>
   1dcdc:	sub	r2, ip, #4
   1dce0:	sub	r4, fp, #40	; 0x28
   1dce4:	subs	r3, r1, #1
   1dce8:	blt	1de40 <__assert_fail@plt+0xca08>
   1dcec:	ldr	r1, [r2, r1, lsl #2]
   1dcf0:	cmp	r1, #0
   1dcf4:	mov	r1, r3
   1dcf8:	beq	1dce4 <__assert_fail@plt+0xc8ac>
   1dcfc:	eor	r0, r0, #1
   1dd00:	cmp	r0, #0
   1dd04:	bne	1de48 <__assert_fail@plt+0xca10>
   1dd08:	b	1df18 <__assert_fail@plt+0xcae0>
   1dd0c:	mov	r0, r4
   1dd10:	mov	r1, r4
   1dd14:	mov	r2, r8
   1dd18:	bl	17348 <__assert_fail@plt+0x5f10>
   1dd1c:	ldr	r0, [sp, #72]	; 0x48
   1dd20:	mov	r1, r7
   1dd24:	mov	r2, r7
   1dd28:	add	r3, sp, #68	; 0x44
   1dd2c:	lsr	r0, r0, #31
   1dd30:	str	r0, [sp]
   1dd34:	mov	r0, #0
   1dd38:	bl	178f0 <__assert_fail@plt+0x64b8>
   1dd3c:	mov	r0, r8
   1dd40:	mov	r1, r8
   1dd44:	mov	r2, r8
   1dd48:	bl	17348 <__assert_fail@plt+0x5f10>
   1dd4c:	movw	r0, #37156	; 0x9124
   1dd50:	mov	sl, #1
   1dd54:	movt	r0, #4
   1dd58:	str	sl, [fp, #-48]	; 0xffffffd0
   1dd5c:	ldr	r1, [r0]
   1dd60:	mov	r0, #4
   1dd64:	blx	r1
   1dd68:	sub	r6, fp, #52	; 0x34
   1dd6c:	mov	r5, #2
   1dd70:	str	sl, [fp, #-52]	; 0xffffffcc
   1dd74:	str	r0, [fp, #-44]	; 0xffffffd4
   1dd78:	mov	r1, r7
   1dd7c:	str	r5, [r0]
   1dd80:	mov	r0, r6
   1dd84:	mov	r2, r6
   1dd88:	bl	17348 <__assert_fail@plt+0x5f10>
   1dd8c:	mov	r0, r8
   1dd90:	mov	r1, r8
   1dd94:	mov	r2, r6
   1dd98:	bl	16f5c <__assert_fail@plt+0x5b24>
   1dd9c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1dda0:	cmp	r0, #0
   1dda4:	beq	1ddc0 <__assert_fail@plt+0xc988>
   1dda8:	movw	r1, #37164	; 0x912c
   1ddac:	movt	r1, #4
   1ddb0:	ldr	r2, [r1]
   1ddb4:	lsl	r1, r0, #2
   1ddb8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ddbc:	blx	r2
   1ddc0:	mov	r0, #0
   1ddc4:	mov	r1, r8
   1ddc8:	mov	r2, r8
   1ddcc:	add	r3, sp, #68	; 0x44
   1ddd0:	str	r5, [sp]
   1ddd4:	bl	178f0 <__assert_fail@plt+0x64b8>
   1ddd8:	mov	r0, r7
   1dddc:	mov	r1, r7
   1dde0:	mov	r2, r7
   1dde4:	bl	17348 <__assert_fail@plt+0x5f10>
   1dde8:	ldr	r0, [sp, #28]
   1ddec:	cmp	r9, r0
   1ddf0:	beq	1de48 <__assert_fail@plt+0xca10>
   1ddf4:	ldr	r2, [sp, #72]	; 0x48
   1ddf8:	cmp	r2, #0
   1ddfc:	mov	r0, r2
   1de00:	rsbmi	r0, r2, #0
   1de04:	cmp	r0, r9, lsr #5
   1de08:	ble	1de3c <__assert_fail@plt+0xca04>
   1de0c:	ldr	ip, [sp, #76]	; 0x4c
   1de10:	lsr	r1, r9, #5
   1de14:	and	r3, r9, #31
   1de18:	mov	r0, #1
   1de1c:	cmn	r2, #1
   1de20:	ldr	r4, [ip, r1, lsl #2]
   1de24:	and	r0, r0, r4, lsr r3
   1de28:	ble	1dcbc <__assert_fail@plt+0xc884>
   1de2c:	sub	r4, fp, #40	; 0x28
   1de30:	cmp	r0, #0
   1de34:	bne	1de48 <__assert_fail@plt+0xca10>
   1de38:	b	1df18 <__assert_fail@plt+0xcae0>
   1de3c:	lsr	r0, r2, #31
   1de40:	cmp	r0, #0
   1de44:	beq	1df18 <__assert_fail@plt+0xcae0>
   1de48:	ldr	r2, [sp, #20]
   1de4c:	mov	r0, r7
   1de50:	mov	r1, r7
   1de54:	mov	sl, r7
   1de58:	bl	17174 <__assert_fail@plt+0x5d3c>
   1de5c:	sub	r2, fp, #40	; 0x28
   1de60:	sub	r5, fp, #64	; 0x40
   1de64:	ldm	r2, {r0, r1, r2}
   1de68:	ldm	r5, {r3, r4, r5}
   1de6c:	str	r4, [fp, #-36]	; 0xffffffdc
   1de70:	str	r3, [fp, #-40]	; 0xffffffd8
   1de74:	sub	r4, fp, #40	; 0x28
   1de78:	sub	r3, fp, #64	; 0x40
   1de7c:	str	r5, [fp, #-32]	; 0xffffffe0
   1de80:	stm	r3, {r0, r1, r2}
   1de84:	mov	r0, r4
   1de88:	mov	r1, r4
   1de8c:	mov	r2, r8
   1de90:	bl	16780 <__assert_fail@plt+0x5348>
   1de94:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1de98:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1de9c:	ldr	r1, [r1]
   1dea0:	cmp	r0, #0
   1dea4:	movwne	r0, #1
   1dea8:	tst	r1, r0
   1deac:	beq	1dec0 <__assert_fail@plt+0xca88>
   1deb0:	mov	r0, r4
   1deb4:	mov	r1, r4
   1deb8:	add	r2, sp, #68	; 0x44
   1debc:	bl	16780 <__assert_fail@plt+0x5348>
   1dec0:	mov	r0, r4
   1dec4:	mov	r1, r4
   1dec8:	mov	r2, #1
   1decc:	mov	r3, #2
   1ded0:	bl	18258 <__assert_fail@plt+0x6e20>
   1ded4:	ldr	r2, [sp, #16]
   1ded8:	mov	r0, r8
   1dedc:	mov	r1, r8
   1dee0:	bl	17174 <__assert_fail@plt+0x5d3c>
   1dee4:	mov	r0, r8
   1dee8:	mov	r1, r4
   1deec:	mov	r2, r8
   1def0:	bl	16780 <__assert_fail@plt+0x5348>
   1def4:	mov	r0, #2
   1def8:	mov	r1, r8
   1defc:	mov	r2, r8
   1df00:	add	r3, sp, #68	; 0x44
   1df04:	str	r0, [sp]
   1df08:	mov	r0, #0
   1df0c:	bl	178f0 <__assert_fail@plt+0x64b8>
   1df10:	mov	r7, sl
   1df14:	mov	r5, #2
   1df18:	mov	r0, #0
   1df1c:	mov	r1, r4
   1df20:	mov	r2, r4
   1df24:	add	r3, sp, #68	; 0x44
   1df28:	str	r5, [sp]
   1df2c:	bl	178f0 <__assert_fail@plt+0x64b8>
   1df30:	ldr	r0, [sp, #28]
   1df34:	sub	r9, r9, #1
   1df38:	cmp	r9, r0
   1df3c:	bcs	1dd0c <__assert_fail@plt+0xc8d4>
   1df40:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1df44:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1df48:	ldr	sl, [sp, #8]
   1df4c:	ldr	r7, [sp, #28]
   1df50:	clz	r1, r1
   1df54:	cmp	r0, #0
   1df58:	lsr	r5, r1, #5
   1df5c:	beq	1df78 <__assert_fail@plt+0xcb40>
   1df60:	movw	r1, #37164	; 0x912c
   1df64:	movt	r1, #4
   1df68:	ldr	r2, [r1]
   1df6c:	lsl	r1, r0, #2
   1df70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1df74:	blx	r2
   1df78:	cmp	r5, #0
   1df7c:	bne	1e07c <__assert_fail@plt+0xcc44>
   1df80:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1df84:	cmp	r0, #0
   1df88:	beq	1e07c <__assert_fail@plt+0xcc44>
   1df8c:	add	r5, sp, #32
   1df90:	sub	r6, fp, #64	; 0x40
   1df94:	mov	r9, #1
   1df98:	mov	r8, #2
   1df9c:	sub	r4, fp, #40	; 0x28
   1dfa0:	subs	r7, r7, #1
   1dfa4:	beq	1e078 <__assert_fail@plt+0xcc40>
   1dfa8:	ldr	r0, [sp, #72]	; 0x48
   1dfac:	mov	r1, r5
   1dfb0:	mov	r2, r5
   1dfb4:	add	r3, sp, #68	; 0x44
   1dfb8:	lsr	r0, r0, #31
   1dfbc:	str	r0, [sp]
   1dfc0:	mov	r0, #0
   1dfc4:	bl	178f0 <__assert_fail@plt+0x64b8>
   1dfc8:	mov	r0, r6
   1dfcc:	mov	r1, r6
   1dfd0:	mov	r2, r6
   1dfd4:	bl	17348 <__assert_fail@plt+0x5f10>
   1dfd8:	movw	r0, #37156	; 0x9124
   1dfdc:	str	r9, [fp, #-36]	; 0xffffffdc
   1dfe0:	movt	r0, #4
   1dfe4:	ldr	r1, [r0]
   1dfe8:	mov	r0, #4
   1dfec:	blx	r1
   1dff0:	str	r9, [fp, #-40]	; 0xffffffd8
   1dff4:	str	r0, [fp, #-32]	; 0xffffffe0
   1dff8:	str	r8, [r0]
   1dffc:	mov	r0, r4
   1e000:	mov	r1, r5
   1e004:	mov	r2, r4
   1e008:	bl	17348 <__assert_fail@plt+0x5f10>
   1e00c:	mov	r0, r6
   1e010:	mov	r1, r6
   1e014:	mov	r2, r4
   1e018:	bl	16f5c <__assert_fail@plt+0x5b24>
   1e01c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e020:	cmp	r0, #0
   1e024:	beq	1e040 <__assert_fail@plt+0xcc08>
   1e028:	movw	r1, #37164	; 0x912c
   1e02c:	movt	r1, #4
   1e030:	ldr	r2, [r1]
   1e034:	lsl	r1, r0, #2
   1e038:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e03c:	blx	r2
   1e040:	mov	r0, #0
   1e044:	mov	r1, r6
   1e048:	mov	r2, r6
   1e04c:	add	r3, sp, #68	; 0x44
   1e050:	str	r8, [sp]
   1e054:	bl	178f0 <__assert_fail@plt+0x64b8>
   1e058:	mov	r0, r5
   1e05c:	mov	r1, r5
   1e060:	mov	r2, r5
   1e064:	bl	17348 <__assert_fail@plt+0x5f10>
   1e068:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1e06c:	cmp	r0, #0
   1e070:	bne	1dfa0 <__assert_fail@plt+0xcb68>
   1e074:	b	1e07c <__assert_fail@plt+0xcc44>
   1e078:	mov	r7, #0
   1e07c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e080:	cmp	r0, #0
   1e084:	beq	1e0a0 <__assert_fail@plt+0xcc68>
   1e088:	movw	r1, #37164	; 0x912c
   1e08c:	movt	r1, #4
   1e090:	ldr	r2, [r1]
   1e094:	lsl	r1, r0, #2
   1e098:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e09c:	blx	r2
   1e0a0:	cmp	r7, #0
   1e0a4:	movwne	r7, #1
   1e0a8:	ldr	r8, [sp, #12]
   1e0ac:	mov	r1, #0
   1e0b0:	cmp	r8, #24
   1e0b4:	movwgt	r1, #1
   1e0b8:	tst	r7, r1
   1e0bc:	beq	1e22c <__assert_fail@plt+0xcdf4>
   1e0c0:	sub	r5, r8, #24
   1e0c4:	mov	r6, #0
   1e0c8:	add	r9, sp, #56	; 0x38
   1e0cc:	mov	r8, #1
   1e0d0:	mla	r0, r6, r6, r6
   1e0d4:	adds	r4, r0, #41	; 0x29
   1e0d8:	beq	1e0f8 <__assert_fail@plt+0xccc0>
   1e0dc:	str	r8, [sp, #36]	; 0x24
   1e0e0:	ldr	r1, [sp, #32]
   1e0e4:	cmp	r1, #0
   1e0e8:	ble	1e104 <__assert_fail@plt+0xcccc>
   1e0ec:	ldr	r0, [sp, #40]	; 0x28
   1e0f0:	mov	r1, #1
   1e0f4:	b	1e164 <__assert_fail@plt+0xcd2c>
   1e0f8:	mov	r1, #0
   1e0fc:	str	r1, [sp, #36]	; 0x24
   1e100:	b	1e168 <__assert_fail@plt+0xcd30>
   1e104:	beq	1e128 <__assert_fail@plt+0xccf0>
   1e108:	movw	r0, #37160	; 0x9128
   1e10c:	lsl	r1, r1, #2
   1e110:	mov	r2, #4
   1e114:	movt	r0, #4
   1e118:	ldr	r3, [r0]
   1e11c:	ldr	r0, [sp, #40]	; 0x28
   1e120:	blx	r3
   1e124:	b	1e13c <__assert_fail@plt+0xcd04>
   1e128:	movw	r0, #37156	; 0x9124
   1e12c:	movt	r0, #4
   1e130:	ldr	r1, [r0]
   1e134:	mov	r0, #4
   1e138:	blx	r1
   1e13c:	str	r8, [sp, #32]
   1e140:	str	r0, [sp, #40]	; 0x28
   1e144:	ldr	r1, [sp, #36]	; 0x24
   1e148:	cmp	r1, #0
   1e14c:	mov	r2, r1
   1e150:	rsbmi	r2, r1, #0
   1e154:	cmp	r2, #2
   1e158:	blt	1e164 <__assert_fail@plt+0xcd2c>
   1e15c:	mov	r1, #0
   1e160:	str	r1, [sp, #36]	; 0x24
   1e164:	str	r4, [r0]
   1e168:	ldr	r0, [sp, #60]	; 0x3c
   1e16c:	cmp	r1, r0
   1e170:	bne	1e1ac <__assert_fail@plt+0xcd74>
   1e174:	cmp	r1, #0
   1e178:	blt	1e1b4 <__assert_fail@plt+0xcd7c>
   1e17c:	ldr	r0, [sp, #40]	; 0x28
   1e180:	ldr	r2, [sp, #64]	; 0x40
   1e184:	sub	r0, r0, #4
   1e188:	sub	r2, r2, #4
   1e18c:	subs	r3, r1, #1
   1e190:	blt	1e224 <__assert_fail@plt+0xcdec>
   1e194:	ldr	r4, [r2, r1, lsl #2]
   1e198:	ldr	r1, [r0, r1, lsl #2]
   1e19c:	cmp	r1, r4
   1e1a0:	mov	r1, r3
   1e1a4:	beq	1e18c <__assert_fail@plt+0xcd54>
   1e1a8:	b	1e1e4 <__assert_fail@plt+0xcdac>
   1e1ac:	blt	1e1e8 <__assert_fail@plt+0xcdb0>
   1e1b0:	b	1e224 <__assert_fail@plt+0xcdec>
   1e1b4:	ldr	r0, [sp, #64]	; 0x40
   1e1b8:	ldr	r2, [sp, #40]	; 0x28
   1e1bc:	rsb	r1, r1, #0
   1e1c0:	sub	r0, r0, #4
   1e1c4:	sub	r2, r2, #4
   1e1c8:	subs	r3, r1, #1
   1e1cc:	blt	1e224 <__assert_fail@plt+0xcdec>
   1e1d0:	ldr	r4, [r2, r1, lsl #2]
   1e1d4:	ldr	r1, [r0, r1, lsl #2]
   1e1d8:	cmp	r1, r4
   1e1dc:	mov	r1, r3
   1e1e0:	beq	1e1c8 <__assert_fail@plt+0xcd90>
   1e1e4:	bhi	1e224 <__assert_fail@plt+0xcdec>
   1e1e8:	ldr	r0, [sp, #24]
   1e1ec:	mov	r1, r9
   1e1f0:	add	r2, sp, #32
   1e1f4:	add	r3, sp, #44	; 0x2c
   1e1f8:	str	r0, [sp]
   1e1fc:	mov	r0, sl
   1e200:	bl	1e404 <__assert_fail@plt+0xcfcc>
   1e204:	add	r6, r6, #1
   1e208:	mov	r7, r0
   1e20c:	mov	r0, #0
   1e210:	cmp	r6, r5
   1e214:	movwlt	r0, #1
   1e218:	tst	r7, r0
   1e21c:	bne	1e0d0 <__assert_fail@plt+0xcc98>
   1e220:	b	1e22c <__assert_fail@plt+0xcdf4>
   1e224:	cmp	r6, #29
   1e228:	bls	1e304 <__assert_fail@plt+0xcecc>
   1e22c:	ldr	r0, [sp, #56]	; 0x38
   1e230:	cmp	r0, #0
   1e234:	beq	1e250 <__assert_fail@plt+0xce18>
   1e238:	movw	r1, #37164	; 0x912c
   1e23c:	movt	r1, #4
   1e240:	ldr	r2, [r1]
   1e244:	lsl	r1, r0, #2
   1e248:	ldr	r0, [sp, #64]	; 0x40
   1e24c:	blx	r2
   1e250:	ldr	r0, [sp, #44]	; 0x2c
   1e254:	cmp	r0, #0
   1e258:	beq	1e274 <__assert_fail@plt+0xce3c>
   1e25c:	movw	r1, #37164	; 0x912c
   1e260:	movt	r1, #4
   1e264:	ldr	r2, [r1]
   1e268:	lsl	r1, r0, #2
   1e26c:	ldr	r0, [sp, #52]	; 0x34
   1e270:	blx	r2
   1e274:	ldr	r0, [sp, #32]
   1e278:	cmp	r0, #0
   1e27c:	beq	1e298 <__assert_fail@plt+0xce60>
   1e280:	movw	r1, #37164	; 0x912c
   1e284:	movt	r1, #4
   1e288:	ldr	r2, [r1]
   1e28c:	lsl	r1, r0, #2
   1e290:	ldr	r0, [sp, #40]	; 0x28
   1e294:	blx	r2
   1e298:	mov	r0, r7
   1e29c:	sub	sp, fp, #28
   1e2a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2a4:	movw	r0, #30778	; 0x783a
   1e2a8:	movw	r1, #26324	; 0x66d4
   1e2ac:	movw	r3, #30733	; 0x780d
   1e2b0:	movw	r2, #3410	; 0xd52
   1e2b4:	movt	r0, #3
   1e2b8:	movt	r1, #3
   1e2bc:	movt	r3, #3
   1e2c0:	bl	11438 <__assert_fail@plt>
   1e2c4:	movw	r0, #27999	; 0x6d5f
   1e2c8:	movw	r1, #26324	; 0x66d4
   1e2cc:	movw	r3, #28016	; 0x6d70
   1e2d0:	movw	r2, #3590	; 0xe06
   1e2d4:	movt	r0, #3
   1e2d8:	movt	r1, #3
   1e2dc:	movt	r3, #3
   1e2e0:	bl	11438 <__assert_fail@plt>
   1e2e4:	movw	r0, #30661	; 0x77c5
   1e2e8:	movw	r1, #26324	; 0x66d4
   1e2ec:	movw	r3, #30675	; 0x77d3
   1e2f0:	mov	r2, #3504	; 0xdb0
   1e2f4:	movt	r0, #3
   1e2f8:	movt	r1, #3
   1e2fc:	movt	r3, #3
   1e300:	bl	11438 <__assert_fail@plt>
   1e304:	movw	r0, #28066	; 0x6da2
   1e308:	movw	r1, #26324	; 0x66d4
   1e30c:	movw	r3, #28016	; 0x6d70
   1e310:	movw	r2, #3629	; 0xe2d
   1e314:	movt	r0, #3
   1e318:	movt	r1, #3
   1e31c:	movt	r3, #3
   1e320:	bl	11438 <__assert_fail@plt>
   1e324:	movw	r0, #29255	; 0x7247
   1e328:	movw	r1, #26324	; 0x66d4
   1e32c:	movw	r3, #29172	; 0x71f4
   1e330:	mov	r2, #716	; 0x2cc
   1e334:	movt	r0, #3
   1e338:	movt	r1, #3
   1e33c:	movt	r3, #3
   1e340:	bl	11438 <__assert_fail@plt>
   1e344:	movw	r0, #30785	; 0x7841
   1e348:	movw	r1, #26324	; 0x66d4
   1e34c:	movw	r3, #30792	; 0x7848
   1e350:	movw	r2, #3442	; 0xd72
   1e354:	movt	r0, #3
   1e358:	movt	r1, #3
   1e35c:	movt	r3, #3
   1e360:	bl	11438 <__assert_fail@plt>
   1e364:	movw	r0, #30883	; 0x78a3
   1e368:	movw	r1, #26324	; 0x66d4
   1e36c:	movw	r3, #30792	; 0x7848
   1e370:	movw	r2, #3443	; 0xd73
   1e374:	movt	r0, #3
   1e378:	movt	r1, #3
   1e37c:	movt	r3, #3
   1e380:	bl	11438 <__assert_fail@plt>
   1e384:	movw	r0, #30905	; 0x78b9
   1e388:	movw	r1, #26324	; 0x66d4
   1e38c:	movw	r3, #30792	; 0x7848
   1e390:	movw	r2, #3444	; 0xd74
   1e394:	movt	r0, #3
   1e398:	movt	r1, #3
   1e39c:	movt	r3, #3
   1e3a0:	bl	11438 <__assert_fail@plt>
   1e3a4:	movw	r0, #30927	; 0x78cf
   1e3a8:	movw	r1, #26324	; 0x66d4
   1e3ac:	movw	r3, #30792	; 0x7848
   1e3b0:	movw	r2, #3445	; 0xd75
   1e3b4:	movt	r0, #3
   1e3b8:	movt	r1, #3
   1e3bc:	movt	r3, #3
   1e3c0:	bl	11438 <__assert_fail@plt>
   1e3c4:	movw	r0, #30661	; 0x77c5
   1e3c8:	movw	r1, #26324	; 0x66d4
   1e3cc:	movw	r3, #30792	; 0x7848
   1e3d0:	movw	r2, #3446	; 0xd76
   1e3d4:	movt	r0, #3
   1e3d8:	movt	r1, #3
   1e3dc:	movt	r3, #3
   1e3e0:	bl	11438 <__assert_fail@plt>
   1e3e4:	movw	r0, #31015	; 0x7927
   1e3e8:	movw	r1, #26324	; 0x66d4
   1e3ec:	movw	r3, #31021	; 0x792d
   1e3f0:	movw	r2, #1210	; 0x4ba
   1e3f4:	movt	r0, #3
   1e3f8:	movt	r1, #3
   1e3fc:	movt	r3, #3
   1e400:	bl	11438 <__assert_fail@plt>
   1e404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e408:	add	fp, sp, #28
   1e40c:	sub	sp, sp, #12
   1e410:	ldr	r6, [fp, #8]
   1e414:	cmp	r6, #0
   1e418:	beq	1e600 <__assert_fail@plt+0xd1c8>
   1e41c:	mov	r9, r0
   1e420:	mov	r5, r1
   1e424:	mov	r4, r2
   1e428:	mov	r0, r2
   1e42c:	mov	r1, r2
   1e430:	mov	r2, r3
   1e434:	mov	r3, r9
   1e438:	bl	1b0f0 <__assert_fail@plt+0x9cb8>
   1e43c:	ldr	r0, [r4, #4]
   1e440:	cmp	r0, #0
   1e444:	blt	1e480 <__assert_fail@plt+0xd048>
   1e448:	cmp	r0, #1
   1e44c:	bgt	1e480 <__assert_fail@plt+0xd048>
   1e450:	cmp	r0, #0
   1e454:	beq	1e480 <__assert_fail@plt+0xd048>
   1e458:	ldr	r1, [r4, #8]
   1e45c:	mov	r2, #0
   1e460:	mov	sl, #1
   1e464:	ldr	r1, [r1]
   1e468:	cmp	r1, #1
   1e46c:	clz	r1, r1
   1e470:	movwhi	r2, #1
   1e474:	lsr	r1, r1, #5
   1e478:	cmp	r2, r1
   1e47c:	beq	1e5f4 <__assert_fail@plt+0xd1bc>
   1e480:	ldr	r1, [r5, #4]
   1e484:	cmp	r0, r1
   1e488:	bne	1e4fc <__assert_fail@plt+0xd0c4>
   1e48c:	cmp	r0, #0
   1e490:	blt	1e4c8 <__assert_fail@plt+0xd090>
   1e494:	ldr	r1, [r4, #8]
   1e498:	ldr	r2, [r5, #8]
   1e49c:	sub	r1, r1, #4
   1e4a0:	sub	r2, r2, #4
   1e4a4:	cmp	r0, #1
   1e4a8:	blt	1e5f0 <__assert_fail@plt+0xd1b8>
   1e4ac:	sub	r3, r0, #1
   1e4b0:	ldr	r7, [r2, r0, lsl #2]
   1e4b4:	ldr	r0, [r1, r0, lsl #2]
   1e4b8:	cmp	r0, r7
   1e4bc:	mov	r0, r3
   1e4c0:	beq	1e4a4 <__assert_fail@plt+0xd06c>
   1e4c4:	b	1e4fc <__assert_fail@plt+0xd0c4>
   1e4c8:	ldr	r2, [r4, #8]
   1e4cc:	rsb	r1, r0, #0
   1e4d0:	ldr	r0, [r5, #8]
   1e4d4:	sub	r0, r0, #4
   1e4d8:	sub	r2, r2, #4
   1e4dc:	cmp	r1, #1
   1e4e0:	blt	1e5f0 <__assert_fail@plt+0xd1b8>
   1e4e4:	sub	r3, r1, #1
   1e4e8:	ldr	r7, [r2, r1, lsl #2]
   1e4ec:	ldr	r1, [r0, r1, lsl #2]
   1e4f0:	cmp	r1, r7
   1e4f4:	mov	r1, r3
   1e4f8:	beq	1e4dc <__assert_fail@plt+0xd0a4>
   1e4fc:	subs	r7, r6, #1
   1e500:	mov	sl, #0
   1e504:	beq	1e5f4 <__assert_fail@plt+0xd1bc>
   1e508:	mov	r8, #1
   1e50c:	movw	r0, #37156	; 0x9124
   1e510:	str	r8, [sp, #4]
   1e514:	movt	r0, #4
   1e518:	ldr	r1, [r0]
   1e51c:	mov	r0, #4
   1e520:	blx	r1
   1e524:	str	r8, [sp]
   1e528:	mov	r6, r0
   1e52c:	str	r0, [sp, #8]
   1e530:	mov	r0, #2
   1e534:	mov	r1, r4
   1e538:	mov	r2, sp
   1e53c:	mov	r3, r9
   1e540:	str	r0, [r6]
   1e544:	mov	r0, r4
   1e548:	bl	1b0f0 <__assert_fail@plt+0x9cb8>
   1e54c:	movw	r0, #37164	; 0x912c
   1e550:	mov	r1, #4
   1e554:	movt	r0, #4
   1e558:	ldr	r2, [r0]
   1e55c:	mov	r0, r6
   1e560:	blx	r2
   1e564:	ldr	r0, [r4, #4]
   1e568:	ldr	r1, [r5, #4]
   1e56c:	cmp	r0, r1
   1e570:	bne	1e5e4 <__assert_fail@plt+0xd1ac>
   1e574:	cmp	r0, #0
   1e578:	blt	1e5b0 <__assert_fail@plt+0xd178>
   1e57c:	ldr	r1, [r4, #8]
   1e580:	ldr	r2, [r5, #8]
   1e584:	sub	r1, r1, #4
   1e588:	sub	r2, r2, #4
   1e58c:	cmp	r0, #1
   1e590:	blt	1e5f0 <__assert_fail@plt+0xd1b8>
   1e594:	sub	r3, r0, #1
   1e598:	ldr	r6, [r2, r0, lsl #2]
   1e59c:	ldr	r0, [r1, r0, lsl #2]
   1e5a0:	cmp	r0, r6
   1e5a4:	mov	r0, r3
   1e5a8:	beq	1e58c <__assert_fail@plt+0xd154>
   1e5ac:	b	1e5e4 <__assert_fail@plt+0xd1ac>
   1e5b0:	ldr	r2, [r4, #8]
   1e5b4:	rsb	r1, r0, #0
   1e5b8:	ldr	r0, [r5, #8]
   1e5bc:	sub	r0, r0, #4
   1e5c0:	sub	r2, r2, #4
   1e5c4:	cmp	r1, #1
   1e5c8:	blt	1e5f0 <__assert_fail@plt+0xd1b8>
   1e5cc:	sub	r3, r1, #1
   1e5d0:	ldr	r6, [r2, r1, lsl #2]
   1e5d4:	ldr	r1, [r0, r1, lsl #2]
   1e5d8:	cmp	r1, r6
   1e5dc:	mov	r1, r3
   1e5e0:	beq	1e5c4 <__assert_fail@plt+0xd18c>
   1e5e4:	subs	r7, r7, #1
   1e5e8:	bne	1e50c <__assert_fail@plt+0xd0d4>
   1e5ec:	b	1e5f4 <__assert_fail@plt+0xd1bc>
   1e5f0:	mov	sl, #1
   1e5f4:	mov	r0, sl
   1e5f8:	sub	sp, fp, #28
   1e5fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e600:	movw	r0, #30540	; 0x774c
   1e604:	movw	r1, #26324	; 0x66d4
   1e608:	movw	r3, #30546	; 0x7752
   1e60c:	movw	r2, #3550	; 0xdde
   1e610:	movt	r0, #3
   1e614:	movt	r1, #3
   1e618:	movt	r3, #3
   1e61c:	bl	11438 <__assert_fail@plt>
   1e620:	ldr	r3, [r0, #4]
   1e624:	cmp	r3, #0
   1e628:	mov	r2, r3
   1e62c:	rsbmi	r2, r3, #0
   1e630:	push	{fp, lr}
   1e634:	mov	fp, sp
   1e638:	cmp	r2, r1, lsr #5
   1e63c:	lsrle	r0, r3, #31
   1e640:	pople	{fp, pc}
   1e644:	ldr	ip, [r0, #8]
   1e648:	lsr	r2, r1, #5
   1e64c:	and	r1, r1, #31
   1e650:	mov	r0, #1
   1e654:	cmn	r3, #1
   1e658:	ldr	lr, [ip, r2, lsl #2]
   1e65c:	and	r0, r0, lr, lsr r1
   1e660:	ble	1e668 <__assert_fail@plt+0xd230>
   1e664:	pop	{fp, pc}
   1e668:	cmp	r1, #0
   1e66c:	beq	1e680 <__assert_fail@plt+0xd248>
   1e670:	rsb	r1, r1, #32
   1e674:	mov	r3, #0
   1e678:	cmp	r3, lr, lsl r1
   1e67c:	bne	1e69c <__assert_fail@plt+0xd264>
   1e680:	sub	r1, ip, #4
   1e684:	subs	r3, r2, #1
   1e688:	poplt	{fp, pc}
   1e68c:	ldr	r2, [r1, r2, lsl #2]
   1e690:	cmp	r2, #0
   1e694:	mov	r2, r3
   1e698:	beq	1e684 <__assert_fail@plt+0xd24c>
   1e69c:	eor	r0, r0, #1
   1e6a0:	pop	{fp, pc}
   1e6a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6a8:	add	fp, sp, #28
   1e6ac:	sub	sp, sp, #4
   1e6b0:	mov	sl, r0
   1e6b4:	and	r0, r1, #31
   1e6b8:	mov	r2, #1
   1e6bc:	lsr	r7, r1, #5
   1e6c0:	lsl	r6, r2, r0
   1e6c4:	ldr	r2, [sl, #4]
   1e6c8:	cmp	r2, #0
   1e6cc:	mov	r5, r2
   1e6d0:	rsbmi	r5, r2, #0
   1e6d4:	cmp	r5, r1, lsr #5
   1e6d8:	ble	1e760 <__assert_fail@plt+0xd328>
   1e6dc:	sub	r0, r5, r7
   1e6e0:	cmp	r0, #1
   1e6e4:	blt	1e864 <__assert_fail@plt+0xd42c>
   1e6e8:	ldr	r0, [sl, #8]
   1e6ec:	mov	r1, #0
   1e6f0:	mov	r3, r6
   1e6f4:	ldr	r6, [r0, r7, lsl #2]
   1e6f8:	adds	r4, r6, r3
   1e6fc:	str	r4, [r0, r7, lsl #2]
   1e700:	add	r7, r7, #1
   1e704:	adc	r6, r1, #0
   1e708:	cmp	r5, r7
   1e70c:	bne	1e6f0 <__assert_fail@plt+0xd2b8>
   1e710:	mov	r6, #0
   1e714:	cmp	r4, r3
   1e718:	movwcc	r6, #1
   1e71c:	bcs	1e7ac <__assert_fail@plt+0xd374>
   1e720:	ldr	r1, [sl]
   1e724:	add	r8, r5, #1
   1e728:	cmp	r5, r1
   1e72c:	blt	1e84c <__assert_fail@plt+0xd414>
   1e730:	cmp	r8, #1
   1e734:	mov	r7, r8
   1e738:	movls	r7, #1
   1e73c:	cmp	r1, #0
   1e740:	beq	1e814 <__assert_fail@plt+0xd3dc>
   1e744:	movw	r2, #37160	; 0x9128
   1e748:	lsl	r1, r1, #2
   1e74c:	movt	r2, #4
   1e750:	ldr	r3, [r2]
   1e754:	lsl	r2, r7, #2
   1e758:	blx	r3
   1e75c:	b	1e828 <__assert_fail@plt+0xd3f0>
   1e760:	ldr	r1, [sl]
   1e764:	add	r8, r7, #1
   1e768:	cmp	r7, r1
   1e76c:	bge	1e778 <__assert_fail@plt+0xd340>
   1e770:	ldr	r0, [sl, #8]
   1e774:	b	1e7ec <__assert_fail@plt+0xd3b4>
   1e778:	cmp	r8, #1
   1e77c:	mov	r9, r8
   1e780:	movls	r9, #1
   1e784:	cmp	r1, #0
   1e788:	beq	1e7b4 <__assert_fail@plt+0xd37c>
   1e78c:	movw	r0, #37160	; 0x9128
   1e790:	lsl	r1, r1, #2
   1e794:	lsl	r2, r9, #2
   1e798:	movt	r0, #4
   1e79c:	ldr	r3, [r0]
   1e7a0:	ldr	r0, [sl, #8]
   1e7a4:	blx	r3
   1e7a8:	b	1e7c8 <__assert_fail@plt+0xd390>
   1e7ac:	mov	r8, r5
   1e7b0:	b	1e850 <__assert_fail@plt+0xd418>
   1e7b4:	movw	r0, #37156	; 0x9124
   1e7b8:	movt	r0, #4
   1e7bc:	ldr	r1, [r0]
   1e7c0:	lsl	r0, r9, #2
   1e7c4:	blx	r1
   1e7c8:	str	r0, [sl, #8]
   1e7cc:	str	r9, [sl]
   1e7d0:	ldr	r2, [sl, #4]
   1e7d4:	cmp	r2, #0
   1e7d8:	mov	r1, r2
   1e7dc:	rsbmi	r1, r2, #0
   1e7e0:	cmp	r1, r9
   1e7e4:	movgt	r2, #0
   1e7e8:	strgt	r2, [sl, #4]
   1e7ec:	cmp	r5, r7
   1e7f0:	str	r6, [r0, r7, lsl #2]
   1e7f4:	bcs	1e850 <__assert_fail@plt+0xd418>
   1e7f8:	sub	r1, r7, r5
   1e7fc:	add	r0, r0, r5, lsl #2
   1e800:	lsl	r2, r1, #2
   1e804:	mov	r1, #0
   1e808:	bl	1136c <memset@plt>
   1e80c:	ldr	r2, [sl, #4]
   1e810:	b	1e850 <__assert_fail@plt+0xd418>
   1e814:	movw	r0, #37156	; 0x9124
   1e818:	movt	r0, #4
   1e81c:	ldr	r1, [r0]
   1e820:	lsl	r0, r7, #2
   1e824:	blx	r1
   1e828:	str	r0, [sl, #8]
   1e82c:	str	r7, [sl]
   1e830:	ldr	r2, [sl, #4]
   1e834:	cmp	r2, #0
   1e838:	mov	r1, r2
   1e83c:	rsbmi	r1, r2, #0
   1e840:	cmp	r1, r7
   1e844:	movgt	r2, #0
   1e848:	strgt	r2, [sl, #4]
   1e84c:	str	r6, [r0, r5, lsl #2]
   1e850:	cmp	r2, #0
   1e854:	rsblt	r8, r8, #0
   1e858:	str	r8, [sl, #4]
   1e85c:	sub	sp, fp, #28
   1e860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e864:	movw	r0, #29650	; 0x73d2
   1e868:	movw	r1, #26324	; 0x66d4
   1e86c:	movw	r3, #26341	; 0x66e5
   1e870:	movw	r2, #442	; 0x1ba
   1e874:	movt	r0, #3
   1e878:	movt	r1, #3
   1e87c:	movt	r3, #3
   1e880:	bl	11438 <__assert_fail@plt>
   1e884:	push	{r4, r5, r6, r7, fp, lr}
   1e888:	add	fp, sp, #16
   1e88c:	ldr	lr, [r0, #4]
   1e890:	ldr	ip, [r0, #8]
   1e894:	cmp	lr, #0
   1e898:	mov	r3, lr
   1e89c:	rsbmi	r3, lr, #0
   1e8a0:	cmp	r3, r1, lsr #5
   1e8a4:	ble	1e924 <__assert_fail@plt+0xd4ec>
   1e8a8:	lsr	r4, r1, #5
   1e8ac:	sub	r2, r3, r4
   1e8b0:	cmp	r2, #1
   1e8b4:	blt	1e944 <__assert_fail@plt+0xd50c>
   1e8b8:	and	r1, r1, #31
   1e8bc:	mov	r5, #1
   1e8c0:	add	r4, ip, r4, lsl #2
   1e8c4:	lsl	r1, r5, r1
   1e8c8:	ldr	r6, [r4]
   1e8cc:	mov	r5, r1
   1e8d0:	cmp	r6, r1
   1e8d4:	mov	r1, #0
   1e8d8:	sub	r7, r6, r5
   1e8dc:	movwcc	r1, #1
   1e8e0:	str	r7, [r4], #4
   1e8e4:	subs	r2, r2, #1
   1e8e8:	bne	1e8c8 <__assert_fail@plt+0xd490>
   1e8ec:	cmp	r6, r5
   1e8f0:	bcc	1e964 <__assert_fail@plt+0xd52c>
   1e8f4:	sub	r2, ip, #4
   1e8f8:	mov	r1, r3
   1e8fc:	cmp	r3, #1
   1e900:	blt	1e914 <__assert_fail@plt+0xd4dc>
   1e904:	ldr	r7, [r2, r1, lsl #2]
   1e908:	sub	r3, r1, #1
   1e90c:	cmp	r7, #0
   1e910:	beq	1e8f8 <__assert_fail@plt+0xd4c0>
   1e914:	cmp	lr, #0
   1e918:	rsblt	r1, r1, #0
   1e91c:	str	r1, [r0, #4]
   1e920:	pop	{r4, r5, r6, r7, fp, pc}
   1e924:	movw	r0, #30949	; 0x78e5
   1e928:	movw	r1, #26324	; 0x66d4
   1e92c:	movw	r3, #30965	; 0x78f5
   1e930:	movw	r2, #3753	; 0xea9
   1e934:	movt	r0, #3
   1e938:	movt	r1, #3
   1e93c:	movt	r3, #3
   1e940:	bl	11438 <__assert_fail@plt>
   1e944:	movw	r0, #29650	; 0x73d2
   1e948:	movw	r1, #26324	; 0x66d4
   1e94c:	movw	r3, #26481	; 0x6771
   1e950:	movw	r2, #493	; 0x1ed
   1e954:	movt	r0, #3
   1e958:	movt	r1, #3
   1e95c:	movt	r3, #3
   1e960:	bl	11438 <__assert_fail@plt>
   1e964:	movw	r0, #27305	; 0x6aa9
   1e968:	movw	r1, #26324	; 0x66d4
   1e96c:	movw	r3, #30965	; 0x78f5
   1e970:	movw	r2, #3756	; 0xeac
   1e974:	movt	r0, #3
   1e978:	movt	r1, #3
   1e97c:	movt	r3, #3
   1e980:	bl	11438 <__assert_fail@plt>
   1e984:	ldr	r2, [r0, #4]
   1e988:	cmp	r2, #0
   1e98c:	mov	r3, r2
   1e990:	rsbmi	r3, r2, #0
   1e994:	push	{r4, r5, r6, sl, fp, lr}
   1e998:	add	fp, sp, #16
   1e99c:	cmp	r3, r1, lsr #5
   1e9a0:	ble	1ea00 <__assert_fail@plt+0xd5c8>
   1e9a4:	ldr	lr, [r0, #8]
   1e9a8:	lsr	r6, r1, #5
   1e9ac:	and	r5, r1, #31
   1e9b0:	mov	r3, #1
   1e9b4:	cmn	r2, #1
   1e9b8:	ldr	r4, [lr, r6, lsl #2]
   1e9bc:	and	ip, r3, r4, lsr r5
   1e9c0:	bgt	1ea04 <__assert_fail@plt+0xd5cc>
   1e9c4:	cmp	r5, #0
   1e9c8:	beq	1e9dc <__assert_fail@plt+0xd5a4>
   1e9cc:	rsb	r3, r5, #32
   1e9d0:	mov	r5, #0
   1e9d4:	cmp	r5, r4, lsl r3
   1e9d8:	bne	1e9f8 <__assert_fail@plt+0xd5c0>
   1e9dc:	sub	r4, lr, #4
   1e9e0:	subs	r3, r6, #1
   1e9e4:	blt	1ea04 <__assert_fail@plt+0xd5cc>
   1e9e8:	ldr	r6, [r4, r6, lsl #2]
   1e9ec:	cmp	r6, #0
   1e9f0:	mov	r6, r3
   1e9f4:	beq	1e9e0 <__assert_fail@plt+0xd5a8>
   1e9f8:	eor	ip, ip, #1
   1e9fc:	b	1ea04 <__assert_fail@plt+0xd5cc>
   1ea00:	lsr	ip, r2, #31
   1ea04:	cmp	ip, #0
   1ea08:	pop	{r4, r5, r6, sl, fp, lr}
   1ea0c:	bxeq	lr
   1ea10:	cmp	r2, #0
   1ea14:	blt	1ea1c <__assert_fail@plt+0xd5e4>
   1ea18:	b	1e884 <__assert_fail@plt+0xd44c>
   1ea1c:	b	1e6a4 <__assert_fail@plt+0xd26c>
   1ea20:	ldr	r2, [r0, #4]
   1ea24:	cmp	r2, #0
   1ea28:	mov	r3, r2
   1ea2c:	rsbmi	r3, r2, #0
   1ea30:	push	{r4, r5, r6, sl, fp, lr}
   1ea34:	add	fp, sp, #16
   1ea38:	cmp	r3, r1, lsr #5
   1ea3c:	ble	1ea9c <__assert_fail@plt+0xd664>
   1ea40:	ldr	lr, [r0, #8]
   1ea44:	lsr	r6, r1, #5
   1ea48:	and	r5, r1, #31
   1ea4c:	mov	r3, #1
   1ea50:	cmn	r2, #1
   1ea54:	ldr	r4, [lr, r6, lsl #2]
   1ea58:	and	ip, r3, r4, lsr r5
   1ea5c:	bgt	1eaa0 <__assert_fail@plt+0xd668>
   1ea60:	cmp	r5, #0
   1ea64:	beq	1ea78 <__assert_fail@plt+0xd640>
   1ea68:	rsb	r3, r5, #32
   1ea6c:	mov	r5, #0
   1ea70:	cmp	r5, r4, lsl r3
   1ea74:	bne	1ea94 <__assert_fail@plt+0xd65c>
   1ea78:	sub	r4, lr, #4
   1ea7c:	subs	r3, r6, #1
   1ea80:	blt	1eaa0 <__assert_fail@plt+0xd668>
   1ea84:	ldr	r6, [r4, r6, lsl #2]
   1ea88:	cmp	r6, #0
   1ea8c:	mov	r6, r3
   1ea90:	beq	1ea7c <__assert_fail@plt+0xd644>
   1ea94:	eor	ip, ip, #1
   1ea98:	b	1eaa0 <__assert_fail@plt+0xd668>
   1ea9c:	lsr	ip, r2, #31
   1eaa0:	cmp	ip, r2, lsr #31
   1eaa4:	pop	{r4, r5, r6, sl, fp, lr}
   1eaa8:	bne	1eab0 <__assert_fail@plt+0xd678>
   1eaac:	b	1e6a4 <__assert_fail@plt+0xd26c>
   1eab0:	b	1e884 <__assert_fail@plt+0xd44c>
   1eab4:	push	{r4, r5, r6, r7, fp, lr}
   1eab8:	add	fp, sp, #16
   1eabc:	sub	sp, sp, #16
   1eac0:	mov	r5, r0
   1eac4:	movw	r0, #37156	; 0x9124
   1eac8:	mov	r4, r1
   1eacc:	mov	r7, #1
   1ead0:	movt	r0, #4
   1ead4:	str	r7, [sp, #8]
   1ead8:	ldr	r1, [r0]
   1eadc:	mov	r0, #4
   1eae0:	blx	r1
   1eae4:	str	r7, [sp, #4]
   1eae8:	str	r0, [sp, #12]
   1eaec:	mov	r6, r0
   1eaf0:	str	r7, [r0]
   1eaf4:	add	r2, sp, #4
   1eaf8:	mov	r0, r5
   1eafc:	mov	r1, r4
   1eb00:	bl	16780 <__assert_fail@plt+0x5348>
   1eb04:	movw	r0, #37164	; 0x912c
   1eb08:	mov	r1, #4
   1eb0c:	movt	r0, #4
   1eb10:	ldr	r2, [r0]
   1eb14:	mov	r0, r6
   1eb18:	blx	r2
   1eb1c:	ldr	r0, [r5, #4]
   1eb20:	rsb	r0, r0, #0
   1eb24:	str	r0, [r5, #4]
   1eb28:	sub	sp, fp, #16
   1eb2c:	pop	{r4, r5, r6, r7, fp, pc}
   1eb30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb34:	add	fp, sp, #28
   1eb38:	sub	sp, sp, #36	; 0x24
   1eb3c:	mov	r4, r0
   1eb40:	ldr	r0, [r2, #4]
   1eb44:	mov	r5, r2
   1eb48:	ldr	r2, [r1, #4]
   1eb4c:	mov	r7, r1
   1eb50:	cmp	r0, #0
   1eb54:	rsbmi	r0, r0, #0
   1eb58:	cmp	r2, #0
   1eb5c:	rsbmi	r2, r2, #0
   1eb60:	cmp	r2, r0
   1eb64:	movlt	r7, r5
   1eb68:	movlt	r5, r1
   1eb6c:	mov	r1, r0
   1eb70:	movlt	r1, r2
   1eb74:	cmp	r1, #0
   1eb78:	beq	1ebe8 <__assert_fail@plt+0xd7b0>
   1eb7c:	ldr	r8, [r5, #4]
   1eb80:	cmp	r2, r0
   1eb84:	ldr	r3, [r7, #4]
   1eb88:	str	r1, [sp]
   1eb8c:	movlt	r2, r0
   1eb90:	mov	r0, #0
   1eb94:	cmp	r0, r8, asr #31
   1eb98:	and	r9, r8, r3
   1eb9c:	moveq	r2, r1
   1eba0:	ldr	r1, [r4]
   1eba4:	add	r6, r2, r9, lsr #31
   1eba8:	str	r2, [sp, #12]
   1ebac:	cmp	r6, r1
   1ebb0:	ble	1ebf0 <__assert_fail@plt+0xd7b8>
   1ebb4:	cmp	r6, #1
   1ebb8:	mov	sl, r3
   1ebbc:	movls	r6, #1
   1ebc0:	cmp	r1, #0
   1ebc4:	beq	1ebf8 <__assert_fail@plt+0xd7c0>
   1ebc8:	movw	r0, #37160	; 0x9128
   1ebcc:	lsl	r1, r1, #2
   1ebd0:	lsl	r2, r6, #2
   1ebd4:	movt	r0, #4
   1ebd8:	ldr	r3, [r0]
   1ebdc:	ldr	r0, [r4, #8]
   1ebe0:	blx	r3
   1ebe4:	b	1ec0c <__assert_fail@plt+0xd7d4>
   1ebe8:	mov	r0, #0
   1ebec:	b	1ed9c <__assert_fail@plt+0xd964>
   1ebf0:	ldr	r0, [r4, #8]
   1ebf4:	b	1ec30 <__assert_fail@plt+0xd7f8>
   1ebf8:	movw	r0, #37156	; 0x9124
   1ebfc:	movt	r0, #4
   1ec00:	ldr	r1, [r0]
   1ec04:	lsl	r0, r6, #2
   1ec08:	blx	r1
   1ec0c:	str	r0, [r4, #8]
   1ec10:	str	r6, [r4]
   1ec14:	mov	r3, sl
   1ec18:	ldr	r1, [r4, #4]
   1ec1c:	cmp	r1, #0
   1ec20:	rsbmi	r1, r1, #0
   1ec24:	cmp	r1, r6
   1ec28:	movgt	r1, #0
   1ec2c:	strgt	r1, [r4, #4]
   1ec30:	asr	r2, r3, #31
   1ec34:	asr	r1, r9, #31
   1ec38:	lsr	sl, r9, #31
   1ec3c:	ldr	r9, [sp]
   1ec40:	str	r4, [sp, #16]
   1ec44:	lsr	r4, r3, #31
   1ec48:	mov	r3, #0
   1ec4c:	mov	r6, r0
   1ec50:	str	r0, [sp, #8]
   1ec54:	str	r2, [sp, #24]
   1ec58:	ldr	r2, [r5, #8]
   1ec5c:	str	r1, [sp, #32]
   1ec60:	asr	r1, r8, #31
   1ec64:	ldr	r5, [r7, #8]
   1ec68:	mov	r7, #0
   1ec6c:	str	sl, [sp, #4]
   1ec70:	str	r1, [sp, #28]
   1ec74:	lsr	r1, r8, #31
   1ec78:	str	r2, [sp, #20]
   1ec7c:	ldr	r2, [sp, #28]
   1ec80:	mov	r8, r1
   1ec84:	ldr	r0, [r5], #4
   1ec88:	ldr	r1, [sp, #24]
   1ec8c:	mov	ip, sl
   1ec90:	eor	r0, r0, r1
   1ec94:	ldr	r1, [sp, #20]
   1ec98:	adds	r0, r0, r4
   1ec9c:	adc	r4, r3, #0
   1eca0:	ldr	r1, [r1, r7, lsl #2]
   1eca4:	add	r7, r7, #1
   1eca8:	eor	r1, r1, r2
   1ecac:	adds	lr, r1, r8
   1ecb0:	ldr	r1, [sp, #32]
   1ecb4:	and	r0, lr, r0
   1ecb8:	eor	r0, r0, r1
   1ecbc:	adc	r1, r3, #0
   1ecc0:	adds	r0, r0, sl
   1ecc4:	adc	sl, r3, #0
   1ecc8:	str	r0, [r6], #4
   1eccc:	cmp	r7, r9
   1ecd0:	bcc	1ec80 <__assert_fail@plt+0xd848>
   1ecd4:	ldr	sl, [sp, #24]
   1ecd8:	ldr	r9, [sp, #28]
   1ecdc:	ldr	r2, [sp, #32]
   1ece0:	mov	r1, #0
   1ece4:	cmp	r0, ip
   1ece8:	movwcc	r1, #1
   1ecec:	cmp	lr, r8
   1ecf0:	bcc	1eda8 <__assert_fail@plt+0xd970>
   1ecf4:	ldr	ip, [sp, #12]
   1ecf8:	cmp	r7, ip
   1ecfc:	bge	1ed50 <__assert_fail@plt+0xd918>
   1ed00:	mov	lr, r2
   1ed04:	mov	r8, #0
   1ed08:	mov	r3, ip
   1ed0c:	ldr	r0, [r5], #4
   1ed10:	mov	r2, r1
   1ed14:	and	r1, r4, #1
   1ed18:	sub	r3, r3, #1
   1ed1c:	eor	r0, r0, sl
   1ed20:	adds	r0, r0, r1
   1ed24:	and	r0, r0, r9
   1ed28:	adc	r4, r8, #0
   1ed2c:	eor	r0, r0, lr
   1ed30:	adds	r0, r0, r2
   1ed34:	adc	r1, r8, #0
   1ed38:	str	r0, [r6], #4
   1ed3c:	cmp	r7, r3
   1ed40:	bne	1ed0c <__assert_fail@plt+0xd8d4>
   1ed44:	mov	r1, #0
   1ed48:	cmp	r0, r2
   1ed4c:	movwcc	r1, #1
   1ed50:	ldr	r4, [sp, #16]
   1ed54:	cmp	r1, #0
   1ed58:	beq	1ed6c <__assert_fail@plt+0xd934>
   1ed5c:	ldr	r0, [sp, #8]
   1ed60:	str	r1, [r0, ip, lsl #2]
   1ed64:	add	r0, ip, #1
   1ed68:	b	1ed90 <__assert_fail@plt+0xd958>
   1ed6c:	ldr	r0, [sp, #8]
   1ed70:	sub	r1, r0, #4
   1ed74:	mov	r0, ip
   1ed78:	cmp	ip, #1
   1ed7c:	blt	1ed90 <__assert_fail@plt+0xd958>
   1ed80:	ldr	r2, [r1, r0, lsl #2]
   1ed84:	sub	ip, r0, #1
   1ed88:	cmp	r2, #0
   1ed8c:	beq	1ed74 <__assert_fail@plt+0xd93c>
   1ed90:	ldr	r1, [sp, #4]
   1ed94:	cmp	r1, #0
   1ed98:	rsbne	r0, r0, #0
   1ed9c:	str	r0, [r4, #4]
   1eda0:	sub	sp, fp, #28
   1eda4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eda8:	movw	r0, #28074	; 0x6daa
   1edac:	movw	r1, #26324	; 0x66d4
   1edb0:	movw	r3, #28082	; 0x6db2
   1edb4:	movw	r2, #3854	; 0xf0e
   1edb8:	movt	r0, #3
   1edbc:	movt	r1, #3
   1edc0:	movt	r3, #3
   1edc4:	bl	11438 <__assert_fail@plt>
   1edc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edcc:	add	fp, sp, #28
   1edd0:	sub	sp, sp, #36	; 0x24
   1edd4:	mov	r8, r0
   1edd8:	ldr	r0, [r2, #4]
   1eddc:	mov	r6, r2
   1ede0:	ldr	r2, [r1, #4]
   1ede4:	mov	sl, r1
   1ede8:	cmp	r0, #0
   1edec:	rsbmi	r0, r0, #0
   1edf0:	cmp	r2, #0
   1edf4:	rsbmi	r2, r2, #0
   1edf8:	cmp	r2, r0
   1edfc:	movlt	sl, r6
   1ee00:	movlt	r6, r1
   1ee04:	mov	r1, r0
   1ee08:	movlt	r1, r2
   1ee0c:	cmp	r1, #0
   1ee10:	beq	1ee7c <__assert_fail@plt+0xda44>
   1ee14:	ldr	r4, [r6, #4]
   1ee18:	cmp	r2, r0
   1ee1c:	ldr	r5, [sl, #4]
   1ee20:	str	r1, [sp, #20]
   1ee24:	movlt	r2, r0
   1ee28:	mov	r0, #0
   1ee2c:	cmp	r0, r4, asr #31
   1ee30:	orr	r7, r4, r5
   1ee34:	movne	r2, r1
   1ee38:	ldr	r1, [r8]
   1ee3c:	add	r9, r2, r7, lsr #31
   1ee40:	str	r2, [sp, #8]
   1ee44:	cmp	r9, r1
   1ee48:	ble	1eed0 <__assert_fail@plt+0xda98>
   1ee4c:	cmp	r9, #1
   1ee50:	movls	r9, #1
   1ee54:	cmp	r1, #0
   1ee58:	beq	1eed8 <__assert_fail@plt+0xdaa0>
   1ee5c:	movw	r0, #37160	; 0x9128
   1ee60:	lsl	r1, r1, #2
   1ee64:	lsl	r2, r9, #2
   1ee68:	movt	r0, #4
   1ee6c:	ldr	r3, [r0]
   1ee70:	ldr	r0, [r8, #8]
   1ee74:	blx	r3
   1ee78:	b	1eeec <__assert_fail@plt+0xdab4>
   1ee7c:	cmp	sl, r8
   1ee80:	beq	1f140 <__assert_fail@plt+0xdd08>
   1ee84:	ldr	r5, [sl, #4]
   1ee88:	ldr	r1, [r8]
   1ee8c:	cmp	r5, #0
   1ee90:	rsbmi	r5, r5, #0
   1ee94:	cmp	r5, r1
   1ee98:	ble	1f084 <__assert_fail@plt+0xdc4c>
   1ee9c:	cmp	r5, #1
   1eea0:	mov	r4, r5
   1eea4:	movle	r4, #1
   1eea8:	cmp	r1, #0
   1eeac:	beq	1f094 <__assert_fail@plt+0xdc5c>
   1eeb0:	movw	r0, #37160	; 0x9128
   1eeb4:	lsl	r1, r1, #2
   1eeb8:	lsl	r2, r4, #2
   1eebc:	movt	r0, #4
   1eec0:	ldr	r3, [r0]
   1eec4:	ldr	r0, [r8, #8]
   1eec8:	blx	r3
   1eecc:	b	1f0a8 <__assert_fail@plt+0xdc70>
   1eed0:	ldr	r0, [r8, #8]
   1eed4:	b	1ef0c <__assert_fail@plt+0xdad4>
   1eed8:	movw	r0, #37156	; 0x9124
   1eedc:	movt	r0, #4
   1eee0:	ldr	r1, [r0]
   1eee4:	lsl	r0, r9, #2
   1eee8:	blx	r1
   1eeec:	str	r0, [r8, #8]
   1eef0:	str	r9, [r8]
   1eef4:	ldr	r1, [r8, #4]
   1eef8:	cmp	r1, #0
   1eefc:	rsbmi	r1, r1, #0
   1ef00:	cmp	r1, r9
   1ef04:	movgt	r1, #0
   1ef08:	strgt	r1, [r8, #4]
   1ef0c:	asr	r2, r4, #31
   1ef10:	asr	r1, r7, #31
   1ef14:	lsr	ip, r4, #31
   1ef18:	mov	r3, #0
   1ef1c:	mov	r4, #0
   1ef20:	str	r8, [sp, #12]
   1ef24:	str	r0, [sp, #4]
   1ef28:	str	r2, [sp, #28]
   1ef2c:	asr	r2, r5, #31
   1ef30:	str	r1, [sp, #32]
   1ef34:	lsr	r1, r7, #31
   1ef38:	lsr	r5, r5, #31
   1ef3c:	mov	r7, r0
   1ef40:	str	r2, [sp, #24]
   1ef44:	ldr	r2, [r6, #8]
   1ef48:	ldr	r6, [sl, #8]
   1ef4c:	mov	sl, r1
   1ef50:	str	r1, [sp]
   1ef54:	str	r2, [sp, #16]
   1ef58:	ldr	r2, [sp, #28]
   1ef5c:	ldr	r0, [r6], #4
   1ef60:	ldr	r1, [sp, #24]
   1ef64:	mov	r8, ip
   1ef68:	mov	r9, sl
   1ef6c:	eor	r0, r0, r1
   1ef70:	ldr	r1, [sp, #16]
   1ef74:	adds	r0, r0, r5
   1ef78:	adc	r5, r3, #0
   1ef7c:	ldr	r1, [r1, r4, lsl #2]
   1ef80:	add	r4, r4, #1
   1ef84:	eor	r1, r1, r2
   1ef88:	adds	lr, r1, ip
   1ef8c:	ldr	r1, [sp, #32]
   1ef90:	orr	r0, lr, r0
   1ef94:	adc	ip, r3, #0
   1ef98:	eor	r0, r0, r1
   1ef9c:	ldr	r1, [sp, #20]
   1efa0:	adds	r0, r0, sl
   1efa4:	adc	sl, r3, #0
   1efa8:	str	r0, [r7], #4
   1efac:	cmp	r4, r1
   1efb0:	bcc	1ef5c <__assert_fail@plt+0xdb24>
   1efb4:	ldr	r2, [sp, #24]
   1efb8:	ldr	sl, [sp, #28]
   1efbc:	ldr	r1, [sp, #32]
   1efc0:	mov	ip, #0
   1efc4:	cmp	r0, r9
   1efc8:	movwcc	ip, #1
   1efcc:	cmp	lr, r8
   1efd0:	bcc	1f148 <__assert_fail@plt+0xdd10>
   1efd4:	ldr	lr, [sp, #8]
   1efd8:	cmp	r4, lr
   1efdc:	bge	1f038 <__assert_fail@plt+0xdc00>
   1efe0:	mov	r8, #0
   1efe4:	mov	r3, lr
   1efe8:	mov	r9, r2
   1efec:	ldr	r0, [r6], #4
   1eff0:	mov	r2, ip
   1eff4:	sub	r3, r3, #1
   1eff8:	eor	ip, r0, r9
   1effc:	mov	r0, r1
   1f000:	and	r1, r5, #1
   1f004:	adds	ip, ip, r1
   1f008:	mov	r1, r0
   1f00c:	orr	r0, ip, sl
   1f010:	adc	r5, r8, #0
   1f014:	eor	r0, r0, r1
   1f018:	adds	r0, r0, r2
   1f01c:	adc	ip, r8, #0
   1f020:	str	r0, [r7], #4
   1f024:	cmp	r4, r3
   1f028:	bne	1efec <__assert_fail@plt+0xdbb4>
   1f02c:	mov	ip, #0
   1f030:	cmp	r0, r2
   1f034:	movwcc	ip, #1
   1f038:	ldr	r8, [sp, #12]
   1f03c:	ldr	r0, [sp, #4]
   1f040:	cmp	ip, #0
   1f044:	beq	1f054 <__assert_fail@plt+0xdc1c>
   1f048:	str	ip, [r0, lr, lsl #2]
   1f04c:	add	r0, lr, #1
   1f050:	b	1f074 <__assert_fail@plt+0xdc3c>
   1f054:	sub	r1, r0, #4
   1f058:	mov	r0, lr
   1f05c:	cmp	lr, #1
   1f060:	blt	1f074 <__assert_fail@plt+0xdc3c>
   1f064:	ldr	r2, [r1, r0, lsl #2]
   1f068:	sub	lr, r0, #1
   1f06c:	cmp	r2, #0
   1f070:	beq	1f058 <__assert_fail@plt+0xdc20>
   1f074:	ldr	r1, [sp]
   1f078:	cmp	r1, #0
   1f07c:	rsbne	r0, r0, #0
   1f080:	b	1f13c <__assert_fail@plt+0xdd04>
   1f084:	ldr	r0, [r8, #8]
   1f088:	cmp	r5, #1
   1f08c:	bge	1f0d0 <__assert_fail@plt+0xdc98>
   1f090:	b	1f138 <__assert_fail@plt+0xdd00>
   1f094:	movw	r0, #37156	; 0x9124
   1f098:	movt	r0, #4
   1f09c:	ldr	r1, [r0]
   1f0a0:	lsl	r0, r4, #2
   1f0a4:	blx	r1
   1f0a8:	str	r0, [r8, #8]
   1f0ac:	str	r4, [r8]
   1f0b0:	ldr	r1, [r8, #4]
   1f0b4:	cmp	r1, #0
   1f0b8:	rsbmi	r1, r1, #0
   1f0bc:	cmp	r1, r4
   1f0c0:	movgt	r1, #0
   1f0c4:	strgt	r1, [r8, #4]
   1f0c8:	cmp	r5, #1
   1f0cc:	blt	1f138 <__assert_fail@plt+0xdd00>
   1f0d0:	ldr	r6, [sl, #8]
   1f0d4:	mov	r2, #0
   1f0d8:	cmp	r5, #4
   1f0dc:	bcc	1f11c <__assert_fail@plt+0xdce4>
   1f0e0:	add	r1, r6, r5, lsl #2
   1f0e4:	cmp	r0, r1
   1f0e8:	addcc	r1, r0, r5, lsl #2
   1f0ec:	cmpcc	r6, r1
   1f0f0:	bcc	1f11c <__assert_fail@plt+0xdce4>
   1f0f4:	bic	r2, r5, #-2147483645	; 0x80000003
   1f0f8:	mov	r7, r0
   1f0fc:	mov	r1, r6
   1f100:	mov	r3, r2
   1f104:	vld1.32	{d16-d17}, [r1]!
   1f108:	subs	r3, r3, #4
   1f10c:	vst1.32	{d16-d17}, [r7]!
   1f110:	bne	1f104 <__assert_fail@plt+0xdccc>
   1f114:	cmp	r5, r2
   1f118:	beq	1f138 <__assert_fail@plt+0xdd00>
   1f11c:	add	r1, r6, r2, lsl #2
   1f120:	add	r0, r0, r2, lsl #2
   1f124:	sub	r2, r5, r2
   1f128:	ldr	r3, [r1], #4
   1f12c:	subs	r2, r2, #1
   1f130:	str	r3, [r0], #4
   1f134:	bne	1f128 <__assert_fail@plt+0xdcf0>
   1f138:	ldr	r0, [sl, #4]
   1f13c:	str	r0, [r8, #4]
   1f140:	sub	sp, fp, #28
   1f144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f148:	movw	r0, #28074	; 0x6daa
   1f14c:	movw	r1, #26324	; 0x66d4
   1f150:	movw	r3, #28155	; 0x6dfb
   1f154:	movw	r2, #3927	; 0xf57
   1f158:	movt	r0, #3
   1f15c:	movt	r1, #3
   1f160:	movt	r3, #3
   1f164:	bl	11438 <__assert_fail@plt>
   1f168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f16c:	add	fp, sp, #28
   1f170:	sub	sp, sp, #36	; 0x24
   1f174:	ldr	r7, [r2, #4]
   1f178:	mov	r8, r0
   1f17c:	ldr	r0, [r1, #4]
   1f180:	mov	r5, r2
   1f184:	mov	sl, r1
   1f188:	cmp	r7, #0
   1f18c:	rsbmi	r7, r7, #0
   1f190:	cmp	r0, #0
   1f194:	rsbmi	r0, r0, #0
   1f198:	cmp	r0, r7
   1f19c:	mov	r2, r0
   1f1a0:	movlt	r2, r7
   1f1a4:	movlt	r7, r0
   1f1a8:	movlt	sl, r5
   1f1ac:	movlt	r5, r1
   1f1b0:	cmp	r7, #0
   1f1b4:	beq	1f20c <__assert_fail@plt+0xddd4>
   1f1b8:	ldr	r3, [sl, #4]
   1f1bc:	ldr	r6, [r5, #4]
   1f1c0:	ldr	r1, [r8]
   1f1c4:	str	r2, [sp, #8]
   1f1c8:	eor	r4, r6, r3
   1f1cc:	add	r9, r2, r4, lsr #31
   1f1d0:	cmp	r9, r1
   1f1d4:	ble	1f260 <__assert_fail@plt+0xde28>
   1f1d8:	cmp	r9, #1
   1f1dc:	str	r3, [sp, #32]
   1f1e0:	movls	r9, #1
   1f1e4:	cmp	r1, #0
   1f1e8:	beq	1f26c <__assert_fail@plt+0xde34>
   1f1ec:	movw	r0, #37160	; 0x9128
   1f1f0:	lsl	r1, r1, #2
   1f1f4:	lsl	r2, r9, #2
   1f1f8:	movt	r0, #4
   1f1fc:	ldr	r3, [r0]
   1f200:	ldr	r0, [r8, #8]
   1f204:	blx	r3
   1f208:	b	1f280 <__assert_fail@plt+0xde48>
   1f20c:	cmp	sl, r8
   1f210:	beq	1f4c8 <__assert_fail@plt+0xe090>
   1f214:	ldr	r4, [sl, #4]
   1f218:	ldr	r1, [r8]
   1f21c:	cmp	r4, #0
   1f220:	rsbmi	r4, r4, #0
   1f224:	cmp	r4, r1
   1f228:	ble	1f40c <__assert_fail@plt+0xdfd4>
   1f22c:	cmp	r4, #1
   1f230:	mov	r5, r4
   1f234:	movle	r5, #1
   1f238:	cmp	r1, #0
   1f23c:	beq	1f41c <__assert_fail@plt+0xdfe4>
   1f240:	movw	r0, #37160	; 0x9128
   1f244:	lsl	r1, r1, #2
   1f248:	lsl	r2, r5, #2
   1f24c:	movt	r0, #4
   1f250:	ldr	r3, [r0]
   1f254:	ldr	r0, [r8, #8]
   1f258:	blx	r3
   1f25c:	b	1f430 <__assert_fail@plt+0xdff8>
   1f260:	ldr	r0, [r8, #8]
   1f264:	str	r0, [sp, #32]
   1f268:	b	1f2a8 <__assert_fail@plt+0xde70>
   1f26c:	movw	r0, #37156	; 0x9124
   1f270:	movt	r0, #4
   1f274:	ldr	r1, [r0]
   1f278:	lsl	r0, r9, #2
   1f27c:	blx	r1
   1f280:	str	r0, [r8, #8]
   1f284:	str	r9, [r8]
   1f288:	ldr	r1, [r8, #4]
   1f28c:	ldr	r3, [sp, #32]
   1f290:	str	r0, [sp, #32]
   1f294:	cmp	r1, #0
   1f298:	rsbmi	r1, r1, #0
   1f29c:	cmp	r1, r9
   1f2a0:	movgt	r0, #0
   1f2a4:	strgt	r0, [r8, #4]
   1f2a8:	asr	r0, r4, #31
   1f2ac:	lsr	ip, r4, #31
   1f2b0:	lsr	r1, r6, #31
   1f2b4:	asr	r9, r3, #31
   1f2b8:	str	r8, [sp, #12]
   1f2bc:	str	r0, [sp, #24]
   1f2c0:	asr	r0, r6, #31
   1f2c4:	lsr	r6, r3, #31
   1f2c8:	mov	r3, #0
   1f2cc:	str	ip, [sp, #4]
   1f2d0:	str	r0, [sp, #20]
   1f2d4:	ldr	r0, [r5, #8]
   1f2d8:	mov	r5, #0
   1f2dc:	str	r0, [sp, #16]
   1f2e0:	ldr	r0, [sl, #8]
   1f2e4:	str	r0, [sp, #28]
   1f2e8:	mov	sl, r1
   1f2ec:	ldr	r1, [sp, #28]
   1f2f0:	ldr	r4, [sp, #24]
   1f2f4:	ldr	r2, [sp, #16]
   1f2f8:	mov	r0, ip
   1f2fc:	ldr	r1, [r1, r5, lsl #2]
   1f300:	eor	r1, r1, r9
   1f304:	adds	r1, r1, r6
   1f308:	eor	r1, r1, r4
   1f30c:	mov	r4, r7
   1f310:	ldr	r7, [r2, r5, lsl #2]
   1f314:	ldr	r2, [sp, #20]
   1f318:	adc	r6, r3, #0
   1f31c:	eor	r7, r7, r2
   1f320:	ldr	r2, [sp, #32]
   1f324:	adds	r8, r7, sl
   1f328:	eor	r7, r1, r8
   1f32c:	adc	r1, r3, #0
   1f330:	adds	lr, r7, ip
   1f334:	mov	r7, r4
   1f338:	str	lr, [r2, r5, lsl #2]
   1f33c:	add	r5, r5, #1
   1f340:	adc	ip, r3, #0
   1f344:	cmp	r5, r4
   1f348:	bcc	1f2e8 <__assert_fail@plt+0xdeb0>
   1f34c:	ldr	r2, [sp, #28]
   1f350:	mov	r4, #0
   1f354:	cmp	lr, r0
   1f358:	movwcc	r4, #1
   1f35c:	cmp	r8, sl
   1f360:	bcc	1f4d0 <__assert_fail@plt+0xe098>
   1f364:	ldr	r1, [sp, #8]
   1f368:	ldr	lr, [sp, #32]
   1f36c:	cmp	r5, r1
   1f370:	bge	1f3d0 <__assert_fail@plt+0xdf98>
   1f374:	ldr	r8, [sp, #12]
   1f378:	mov	ip, #0
   1f37c:	ldr	r0, [r2, r5, lsl #2]
   1f380:	and	r7, r6, #1
   1f384:	mov	r3, r4
   1f388:	eor	r0, r0, r9
   1f38c:	adds	r0, r0, r7
   1f390:	eor	r0, r0, r9
   1f394:	adc	r6, ip, #0
   1f398:	adds	r7, r0, r4
   1f39c:	str	r7, [lr, r5, lsl #2]
   1f3a0:	add	r5, r5, #1
   1f3a4:	adc	r4, ip, #0
   1f3a8:	cmp	r5, r1
   1f3ac:	blt	1f37c <__assert_fail@plt+0xdf44>
   1f3b0:	mov	r4, #0
   1f3b4:	cmp	r7, r3
   1f3b8:	movwcc	r4, #1
   1f3bc:	cmp	r4, #0
   1f3c0:	beq	1f3dc <__assert_fail@plt+0xdfa4>
   1f3c4:	str	r4, [lr, r1, lsl #2]
   1f3c8:	add	r0, r1, #1
   1f3cc:	b	1f3fc <__assert_fail@plt+0xdfc4>
   1f3d0:	ldr	r8, [sp, #12]
   1f3d4:	cmp	r4, #0
   1f3d8:	bne	1f3c4 <__assert_fail@plt+0xdf8c>
   1f3dc:	sub	r3, lr, #4
   1f3e0:	mov	r0, r1
   1f3e4:	cmp	r1, #1
   1f3e8:	blt	1f3fc <__assert_fail@plt+0xdfc4>
   1f3ec:	ldr	r2, [r3, r0, lsl #2]
   1f3f0:	sub	r1, r0, #1
   1f3f4:	cmp	r2, #0
   1f3f8:	beq	1f3e0 <__assert_fail@plt+0xdfa8>
   1f3fc:	ldr	r1, [sp, #4]
   1f400:	cmp	r1, #0
   1f404:	rsbne	r0, r0, #0
   1f408:	b	1f4c4 <__assert_fail@plt+0xe08c>
   1f40c:	ldr	r0, [r8, #8]
   1f410:	cmp	r4, #1
   1f414:	bge	1f458 <__assert_fail@plt+0xe020>
   1f418:	b	1f4c0 <__assert_fail@plt+0xe088>
   1f41c:	movw	r0, #37156	; 0x9124
   1f420:	movt	r0, #4
   1f424:	ldr	r1, [r0]
   1f428:	lsl	r0, r5, #2
   1f42c:	blx	r1
   1f430:	str	r0, [r8, #8]
   1f434:	str	r5, [r8]
   1f438:	ldr	r1, [r8, #4]
   1f43c:	cmp	r1, #0
   1f440:	rsbmi	r1, r1, #0
   1f444:	cmp	r1, r5
   1f448:	movgt	r1, #0
   1f44c:	strgt	r1, [r8, #4]
   1f450:	cmp	r4, #1
   1f454:	blt	1f4c0 <__assert_fail@plt+0xe088>
   1f458:	ldr	r6, [sl, #8]
   1f45c:	mov	r2, #0
   1f460:	cmp	r4, #4
   1f464:	bcc	1f4a4 <__assert_fail@plt+0xe06c>
   1f468:	add	r1, r6, r4, lsl #2
   1f46c:	cmp	r0, r1
   1f470:	addcc	r1, r0, r4, lsl #2
   1f474:	cmpcc	r6, r1
   1f478:	bcc	1f4a4 <__assert_fail@plt+0xe06c>
   1f47c:	bic	r2, r4, #-2147483645	; 0x80000003
   1f480:	mov	r7, r0
   1f484:	mov	r1, r6
   1f488:	mov	r3, r2
   1f48c:	vld1.32	{d16-d17}, [r1]!
   1f490:	subs	r3, r3, #4
   1f494:	vst1.32	{d16-d17}, [r7]!
   1f498:	bne	1f48c <__assert_fail@plt+0xe054>
   1f49c:	cmp	r4, r2
   1f4a0:	beq	1f4c0 <__assert_fail@plt+0xe088>
   1f4a4:	add	r1, r6, r2, lsl #2
   1f4a8:	add	r0, r0, r2, lsl #2
   1f4ac:	sub	r2, r4, r2
   1f4b0:	ldr	r3, [r1], #4
   1f4b4:	subs	r2, r2, #1
   1f4b8:	str	r3, [r0], #4
   1f4bc:	bne	1f4b0 <__assert_fail@plt+0xe078>
   1f4c0:	ldr	r0, [sl, #4]
   1f4c4:	str	r0, [r8, #4]
   1f4c8:	sub	sp, fp, #28
   1f4cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4d0:	movw	r0, #28074	; 0x6daa
   1f4d4:	movw	r1, #26324	; 0x66d4
   1f4d8:	movw	r3, #28228	; 0x6e44
   1f4dc:	movw	r2, #3996	; 0xf9c
   1f4e0:	movt	r0, #3
   1f4e4:	movt	r1, #3
   1f4e8:	movt	r3, #3
   1f4ec:	bl	11438 <__assert_fail@plt>
   1f4f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f4f4:	add	fp, sp, #24
   1f4f8:	cmp	r1, #1
   1f4fc:	movlt	ip, #0
   1f500:	movlt	r0, ip
   1f504:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f508:	mov	lr, #0
   1f50c:	movw	r2, #21845	; 0x5555
   1f510:	movw	r3, #13107	; 0x3333
   1f514:	mov	ip, #0
   1f518:	mov	r8, #0
   1f51c:	b	1f534 <__assert_fail@plt+0xe0fc>
   1f520:	add	r8, r8, #1
   1f524:	add	ip, r6, ip
   1f528:	cmp	r8, r1
   1f52c:	moveq	r0, ip
   1f530:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f534:	ldr	r5, [r0, r8, lsl #2]
   1f538:	mov	r6, #0
   1f53c:	cmp	r5, #0
   1f540:	beq	1f520 <__assert_fail@plt+0xe0e8>
   1f544:	mov	r6, #0
   1f548:	and	r7, r2, r5, lsr #1
   1f54c:	cmp	lr, r5, lsr #16
   1f550:	sub	r7, r5, r7
   1f554:	and	r4, r7, r3
   1f558:	and	r7, r3, r7, lsr #2
   1f55c:	add	r4, r7, r4
   1f560:	add	r4, r4, r4, lsr #4
   1f564:	and	r7, r4, #15
   1f568:	ubfx	r4, r4, #8, #4
   1f56c:	add	r6, r7, r6
   1f570:	add	r6, r6, r4
   1f574:	lsr	r4, r5, #16
   1f578:	mov	r5, r4
   1f57c:	bne	1f548 <__assert_fail@plt+0xe110>
   1f580:	b	1f520 <__assert_fail@plt+0xe0e8>
   1f584:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f588:	add	fp, sp, #24
   1f58c:	ldr	lr, [r0, #4]
   1f590:	cmp	lr, #0
   1f594:	mvnlt	r0, #0
   1f598:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f59c:	moveq	r0, #0
   1f5a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f5a4:	ldr	ip, [r0, #8]
   1f5a8:	mov	r3, #0
   1f5ac:	movw	r2, #21845	; 0x5555
   1f5b0:	movw	r1, #13107	; 0x3333
   1f5b4:	mov	r0, #0
   1f5b8:	mov	r8, #0
   1f5bc:	b	1f5d0 <__assert_fail@plt+0xe198>
   1f5c0:	add	r8, r8, #1
   1f5c4:	add	r0, r6, r0
   1f5c8:	cmp	r8, lr
   1f5cc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f5d0:	ldr	r5, [ip, r8, lsl #2]
   1f5d4:	mov	r6, #0
   1f5d8:	cmp	r5, #0
   1f5dc:	beq	1f5c0 <__assert_fail@plt+0xe188>
   1f5e0:	mov	r6, #0
   1f5e4:	and	r7, r2, r5, lsr #1
   1f5e8:	cmp	r3, r5, lsr #16
   1f5ec:	sub	r7, r5, r7
   1f5f0:	and	r4, r7, r1
   1f5f4:	and	r7, r1, r7, lsr #2
   1f5f8:	add	r4, r7, r4
   1f5fc:	add	r4, r4, r4, lsr #4
   1f600:	and	r7, r4, #15
   1f604:	ubfx	r4, r4, #8, #4
   1f608:	add	r6, r7, r6
   1f60c:	add	r6, r6, r4
   1f610:	lsr	r4, r5, #16
   1f614:	mov	r5, r4
   1f618:	bne	1f5e4 <__assert_fail@plt+0xe1ac>
   1f61c:	b	1f5c0 <__assert_fail@plt+0xe188>
   1f620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f624:	add	fp, sp, #28
   1f628:	sub	sp, sp, #36	; 0x24
   1f62c:	ldr	r3, [r0, #4]
   1f630:	ldr	ip, [r1, #4]
   1f634:	eor	r7, ip, r3
   1f638:	cmp	r7, #0
   1f63c:	mvnlt	r0, #0
   1f640:	sublt	sp, fp, #28
   1f644:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f648:	cmn	r3, #1
   1f64c:	ble	1f658 <__assert_fail@plt+0xe220>
   1f650:	mov	r7, r3
   1f654:	b	1f668 <__assert_fail@plt+0xe230>
   1f658:	cmp	ip, #0
   1f65c:	bge	1f854 <__assert_fail@plt+0xe41c>
   1f660:	rsb	ip, ip, #0
   1f664:	rsb	r7, r3, #0
   1f668:	asr	r2, r3, #31
   1f66c:	cmp	r7, ip
   1f670:	mov	lr, r7
   1f674:	lsr	r9, r3, #31
   1f678:	str	r2, [sp, #28]
   1f67c:	ldr	r2, [r0, #8]
   1f680:	ldr	r0, [r1, #8]
   1f684:	movlt	lr, ip
   1f688:	movlt	ip, r7
   1f68c:	mov	r1, r0
   1f690:	movlt	r1, r2
   1f694:	movlt	r2, r0
   1f698:	cmp	ip, #1
   1f69c:	str	r1, [sp, #20]
   1f6a0:	str	r2, [sp, #24]
   1f6a4:	blt	1f820 <__assert_fail@plt+0xe3e8>
   1f6a8:	mov	r5, #0
   1f6ac:	movw	r6, #21845	; 0x5555
   1f6b0:	movw	r7, #13107	; 0x3333
   1f6b4:	mov	r0, #0
   1f6b8:	mov	r4, #0
   1f6bc:	mov	r8, r9
   1f6c0:	str	lr, [sp, #4]
   1f6c4:	ldr	r1, [sp, #20]
   1f6c8:	ldr	r2, [sp, #28]
   1f6cc:	str	r8, [sp, #16]
   1f6d0:	mov	sl, #0
   1f6d4:	str	r9, [sp, #12]
   1f6d8:	ldr	r1, [r1, r4, lsl #2]
   1f6dc:	eor	r1, r1, r2
   1f6e0:	adds	r3, r1, r9
   1f6e4:	adc	r1, r5, #0
   1f6e8:	str	r3, [sp, #8]
   1f6ec:	str	r1, [sp, #32]
   1f6f0:	ldr	r1, [sp, #24]
   1f6f4:	ldr	r1, [r1, r4, lsl #2]
   1f6f8:	eor	r1, r1, r2
   1f6fc:	adds	r2, r1, r8
   1f700:	eor	lr, r3, r2
   1f704:	adc	r8, r5, #0
   1f708:	cmp	lr, #0
   1f70c:	beq	1f74c <__assert_fail@plt+0xe314>
   1f710:	mov	sl, #0
   1f714:	and	r9, r6, lr, lsr #1
   1f718:	cmp	r5, lr, lsr #16
   1f71c:	sub	r3, lr, r9
   1f720:	and	r1, r3, r7
   1f724:	and	r3, r7, r3, lsr #2
   1f728:	add	r1, r3, r1
   1f72c:	add	r1, r1, r1, lsr #4
   1f730:	and	r3, r1, #15
   1f734:	ubfx	r1, r1, #8, #4
   1f738:	add	r3, r3, sl
   1f73c:	add	sl, r3, r1
   1f740:	lsr	r1, lr, #16
   1f744:	mov	lr, r1
   1f748:	bne	1f714 <__assert_fail@plt+0xe2dc>
   1f74c:	ldr	r9, [sp, #32]
   1f750:	add	r4, r4, #1
   1f754:	add	r0, sl, r0
   1f758:	cmp	r4, ip
   1f75c:	blt	1f6c4 <__assert_fail@plt+0xe28c>
   1f760:	ldr	r1, [sp, #12]
   1f764:	ldr	r3, [sp, #8]
   1f768:	ldr	lr, [sp, #4]
   1f76c:	mov	r9, #0
   1f770:	cmp	r3, r1
   1f774:	ldr	r3, [sp, #16]
   1f778:	mov	r1, #0
   1f77c:	movwcc	r1, #1
   1f780:	cmp	r2, r3
   1f784:	movwcc	r9, #1
   1f788:	cmp	r1, #0
   1f78c:	bne	1f834 <__assert_fail@plt+0xe3fc>
   1f790:	cmp	ip, lr
   1f794:	bge	1f818 <__assert_fail@plt+0xe3e0>
   1f798:	movw	r1, #21845	; 0x5555
   1f79c:	movw	r4, #13107	; 0x3333
   1f7a0:	mov	r3, #0
   1f7a4:	ldr	r2, [sp, #24]
   1f7a8:	mov	r6, #0
   1f7ac:	ldr	r7, [r2, ip, lsl #2]
   1f7b0:	ldr	r2, [sp, #28]
   1f7b4:	eor	r7, r7, r2
   1f7b8:	adds	r7, r7, r9
   1f7bc:	eor	r7, r7, r2
   1f7c0:	adc	r9, r3, #0
   1f7c4:	cmp	r7, #0
   1f7c8:	beq	1f808 <__assert_fail@plt+0xe3d0>
   1f7cc:	mov	r6, #0
   1f7d0:	and	r5, r1, r7, lsr #1
   1f7d4:	cmp	r3, r7, lsr #16
   1f7d8:	sub	r5, r7, r5
   1f7dc:	and	r2, r5, r4
   1f7e0:	and	r5, r4, r5, lsr #2
   1f7e4:	add	r2, r5, r2
   1f7e8:	add	r2, r2, r2, lsr #4
   1f7ec:	and	r5, r2, #15
   1f7f0:	ubfx	r2, r2, #8, #4
   1f7f4:	add	r6, r5, r6
   1f7f8:	add	r6, r6, r2
   1f7fc:	lsr	r2, r7, #16
   1f800:	mov	r7, r2
   1f804:	bne	1f7d0 <__assert_fail@plt+0xe398>
   1f808:	add	ip, ip, #1
   1f80c:	add	r0, r6, r0
   1f810:	cmp	ip, lr
   1f814:	blt	1f7a4 <__assert_fail@plt+0xe36c>
   1f818:	sub	sp, fp, #28
   1f81c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f820:	mov	ip, #0
   1f824:	mov	r1, r9
   1f828:	mov	r0, #0
   1f82c:	cmp	r1, #0
   1f830:	beq	1f790 <__assert_fail@plt+0xe358>
   1f834:	movw	r0, #28074	; 0x6daa
   1f838:	movw	r1, #26324	; 0x66d4
   1f83c:	movw	r3, #28308	; 0x6e94
   1f840:	movw	r2, #4100	; 0x1004
   1f844:	movt	r0, #3
   1f848:	movt	r1, #3
   1f84c:	movt	r3, #3
   1f850:	bl	11438 <__assert_fail@plt>
   1f854:	movw	r0, #28301	; 0x6e8d
   1f858:	movw	r1, #26324	; 0x66d4
   1f85c:	movw	r3, #28308	; 0x6e94
   1f860:	movw	r2, #4079	; 0xfef
   1f864:	movt	r0, #3
   1f868:	movt	r1, #3
   1f86c:	movt	r3, #3
   1f870:	bl	11438 <__assert_fail@plt>
   1f874:	push	{r4, r5, r6, sl, fp, lr}
   1f878:	add	fp, sp, #16
   1f87c:	sub	sp, sp, #8
   1f880:	ldr	r4, [r0, #4]
   1f884:	cmp	r4, #0
   1f888:	mov	r3, r4
   1f88c:	rsbmi	r3, r4, #0
   1f890:	cmp	r3, r1, lsr #5
   1f894:	ble	1f914 <__assert_fail@plt+0xe4dc>
   1f898:	ldr	r2, [r0, #8]
   1f89c:	lsr	ip, r1, #5
   1f8a0:	mov	lr, #0
   1f8a4:	cmp	r1, #0
   1f8a8:	ldr	r0, [r2, ip, lsl #2]
   1f8ac:	beq	1f900 <__assert_fail@plt+0xe4c8>
   1f8b0:	cmn	r4, #1
   1f8b4:	bgt	1f8f4 <__assert_fail@plt+0xe4bc>
   1f8b8:	sub	lr, r2, #4
   1f8bc:	mov	r5, ip
   1f8c0:	mov	r4, r5
   1f8c4:	cmp	r5, #1
   1f8c8:	blt	1f8dc <__assert_fail@plt+0xe4a4>
   1f8cc:	ldr	r6, [lr, r4, lsl #2]
   1f8d0:	sub	r5, r4, #1
   1f8d4:	cmp	r6, #0
   1f8d8:	beq	1f8c0 <__assert_fail@plt+0xe488>
   1f8dc:	clz	r6, r4
   1f8e0:	mvn	r0, r0
   1f8e4:	mov	lr, #0
   1f8e8:	lsr	r6, r6, #5
   1f8ec:	adds	r0, r6, r0
   1f8f0:	mvncc	lr, #0
   1f8f4:	and	r1, r1, #31
   1f8f8:	mvn	r4, #0
   1f8fc:	and	r0, r0, r4, lsl r1
   1f900:	mov	r1, ip
   1f904:	str	lr, [sp]
   1f908:	bl	14514 <__assert_fail@plt+0x30dc>
   1f90c:	sub	sp, fp, #16
   1f910:	pop	{r4, r5, r6, sl, fp, pc}
   1f914:	cmn	r4, #1
   1f918:	mvngt	r1, #0
   1f91c:	mov	r0, r1
   1f920:	sub	sp, fp, #16
   1f924:	pop	{r4, r5, r6, sl, fp, pc}
   1f928:	push	{r4, r5, r6, r7, fp, lr}
   1f92c:	add	fp, sp, #16
   1f930:	sub	sp, sp, #8
   1f934:	ldr	r2, [r0, #4]
   1f938:	mov	r5, #1
   1f93c:	cmp	r2, #0
   1f940:	mov	r3, r2
   1f944:	eor	r4, r5, r2, lsr #31
   1f948:	rsbmi	r3, r2, #0
   1f94c:	cmp	r3, r1, lsr #5
   1f950:	ble	1f9bc <__assert_fail@plt+0xe584>
   1f954:	ldr	r2, [r0, #8]
   1f958:	lsr	ip, r1, #5
   1f95c:	rsb	lr, r4, #0
   1f960:	cmp	r4, #0
   1f964:	ldr	r0, [r2, ip, lsl #2]
   1f968:	eor	r0, r0, lr
   1f96c:	bne	1f99c <__assert_fail@plt+0xe564>
   1f970:	sub	r4, r2, #4
   1f974:	mov	r6, ip
   1f978:	mov	r5, r6
   1f97c:	cmp	r6, #1
   1f980:	blt	1f994 <__assert_fail@plt+0xe55c>
   1f984:	ldr	r7, [r4, r5, lsl #2]
   1f988:	sub	r6, r5, #1
   1f98c:	cmp	r7, #0
   1f990:	beq	1f978 <__assert_fail@plt+0xe540>
   1f994:	cmp	r5, #0
   1f998:	subeq	r0, r0, #1
   1f99c:	and	r1, r1, #31
   1f9a0:	mvn	r7, #0
   1f9a4:	str	lr, [sp]
   1f9a8:	and	r0, r0, r7, lsl r1
   1f9ac:	mov	r1, ip
   1f9b0:	bl	14514 <__assert_fail@plt+0x30dc>
   1f9b4:	sub	sp, fp, #16
   1f9b8:	pop	{r4, r5, r6, r7, fp, pc}
   1f9bc:	cmp	r4, #0
   1f9c0:	mvneq	r1, #0
   1f9c4:	mov	r0, r1
   1f9c8:	sub	sp, fp, #16
   1f9cc:	pop	{r4, r5, r6, r7, fp, pc}
   1f9d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9d4:	add	fp, sp, #28
   1f9d8:	sub	sp, sp, #20
   1f9dc:	ldr	ip, [r3]
   1f9e0:	mov	sl, r2
   1f9e4:	mov	r9, r1
   1f9e8:	mov	r8, r0
   1f9ec:	cmp	ip, #0
   1f9f0:	beq	1fa90 <__assert_fail@plt+0xe658>
   1f9f4:	mov	r1, #0
   1f9f8:	cmp	r8, #0
   1f9fc:	mov	r0, r8
   1fa00:	bne	1fa28 <__assert_fail@plt+0xe5f0>
   1fa04:	movw	r0, #37156	; 0x9124
   1fa08:	mov	r4, r3
   1fa0c:	movt	r0, #4
   1fa10:	ldr	r1, [r0]
   1fa14:	lsl	r0, sl, #2
   1fa18:	blx	r1
   1fa1c:	ldr	ip, [r4]
   1fa20:	mov	r3, r4
   1fa24:	mov	r1, sl
   1fa28:	cmp	sl, #0
   1fa2c:	ble	1fbb0 <__assert_fail@plt+0xe778>
   1fa30:	cmp	ip, #0
   1fa34:	beq	1fbd0 <__assert_fail@plt+0xe798>
   1fa38:	cmp	ip, #32
   1fa3c:	bcs	1fbf0 <__assert_fail@plt+0xe7b8>
   1fa40:	str	r1, [sp, #16]
   1fa44:	add	r1, r9, sl, lsl #2
   1fa48:	rsb	r2, ip, #32
   1fa4c:	cmp	sl, #1
   1fa50:	ldr	r7, [r1, #-4]
   1fa54:	lsl	r1, r7, ip
   1fa58:	lsr	r4, r7, r2
   1fa5c:	beq	1faa4 <__assert_fail@plt+0xe66c>
   1fa60:	sub	lr, r9, #8
   1fa64:	mov	r9, r0
   1fa68:	sub	r6, r0, #4
   1fa6c:	mov	r7, sl
   1fa70:	ldr	r5, [lr, r7, lsl #2]
   1fa74:	orr	r1, r1, r5, lsr r2
   1fa78:	str	r1, [r6, r7, lsl #2]
   1fa7c:	sub	r7, r7, #1
   1fa80:	lsl	r1, r5, ip
   1fa84:	cmp	r7, #1
   1fa88:	bne	1fa70 <__assert_fail@plt+0xe638>
   1fa8c:	b	1faa8 <__assert_fail@plt+0xe670>
   1fa90:	mov	ip, #0
   1fa94:	mov	r1, #0
   1fa98:	mov	r0, #0
   1fa9c:	mov	r4, #0
   1faa0:	b	1fab4 <__assert_fail@plt+0xe67c>
   1faa4:	mov	r9, r0
   1faa8:	str	r1, [r9]
   1faac:	ldr	r1, [sp, #16]
   1fab0:	mov	r0, r9
   1fab4:	cmp	sl, #1
   1fab8:	str	r0, [sp, #4]
   1fabc:	str	r1, [sp, #16]
   1fac0:	str	ip, [sp, #12]
   1fac4:	str	r3, [sp, #8]
   1fac8:	blt	1fb74 <__assert_fail@plt+0xe73c>
   1facc:	ldr	r2, [r3, #12]
   1fad0:	ldr	r0, [r3, #4]
   1fad4:	sub	r1, sl, #1
   1fad8:	lsr	sl, r2, #16
   1fadc:	uxth	lr, r2
   1fae0:	uxth	r5, r4
   1fae4:	lsr	r7, r4, #16
   1fae8:	mul	r6, r5, sl
   1faec:	mul	r5, r5, lr
   1faf0:	mul	ip, r7, lr
   1faf4:	mla	r6, r7, lr, r6
   1faf8:	mul	r7, r7, sl
   1fafc:	add	r6, r6, r5, lsr #16
   1fb00:	add	r4, r4, r6, lsr #16
   1fb04:	cmp	r6, ip
   1fb08:	pkhbt	r6, r5, r6, lsl #16
   1fb0c:	ldr	r5, [r9, r1, lsl #2]
   1fb10:	addcc	r7, r7, #65536	; 0x10000
   1fb14:	add	r4, r4, #1
   1fb18:	adds	r2, r5, r6
   1fb1c:	adc	r6, r4, r7
   1fb20:	mls	r7, r6, r0, r5
   1fb24:	mov	r5, #0
   1fb28:	cmp	r7, r2
   1fb2c:	mvnhi	r5, #0
   1fb30:	and	r2, r0, r5
   1fb34:	add	r7, r2, r7
   1fb38:	subs	r4, r7, r0
   1fb3c:	movcc	r4, r7
   1fb40:	cmp	r8, #0
   1fb44:	beq	1fb60 <__assert_fail@plt+0xe728>
   1fb48:	cmp	r7, r0
   1fb4c:	mov	r2, #0
   1fb50:	add	r7, r6, r5
   1fb54:	movwcs	r2, #1
   1fb58:	add	r2, r7, r2
   1fb5c:	str	r2, [r8, r1, lsl #2]
   1fb60:	sub	r2, r1, #1
   1fb64:	add	r1, r1, #1
   1fb68:	cmp	r1, #1
   1fb6c:	mov	r1, r2
   1fb70:	bgt	1fae0 <__assert_fail@plt+0xe6a8>
   1fb74:	ldr	r1, [sp, #16]
   1fb78:	ldr	r0, [sp, #12]
   1fb7c:	cmp	r1, #0
   1fb80:	beq	1fba4 <__assert_fail@plt+0xe76c>
   1fb84:	movw	r0, #37164	; 0x912c
   1fb88:	lsl	r1, r1, #2
   1fb8c:	movt	r0, #4
   1fb90:	ldr	r2, [r0]
   1fb94:	ldr	r0, [sp, #4]
   1fb98:	blx	r2
   1fb9c:	ldr	r0, [sp, #8]
   1fba0:	ldr	r0, [r0]
   1fba4:	lsr	r0, r4, r0
   1fba8:	sub	sp, fp, #28
   1fbac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbb0:	movw	r0, #26881	; 0x6901
   1fbb4:	movw	r1, #26324	; 0x66d4
   1fbb8:	movw	r3, #26968	; 0x6958
   1fbbc:	movw	r2, #659	; 0x293
   1fbc0:	movt	r0, #3
   1fbc4:	movt	r1, #3
   1fbc8:	movt	r3, #3
   1fbcc:	bl	11438 <__assert_fail@plt>
   1fbd0:	movw	r0, #27033	; 0x6999
   1fbd4:	movw	r1, #26324	; 0x66d4
   1fbd8:	movw	r3, #26968	; 0x6958
   1fbdc:	mov	r2, #660	; 0x294
   1fbe0:	movt	r0, #3
   1fbe4:	movt	r1, #3
   1fbe8:	movt	r3, #3
   1fbec:	bl	11438 <__assert_fail@plt>
   1fbf0:	movw	r0, #27042	; 0x69a2
   1fbf4:	movw	r1, #26324	; 0x66d4
   1fbf8:	movw	r3, #26968	; 0x6958
   1fbfc:	movw	r2, #661	; 0x295
   1fc00:	movt	r0, #3
   1fc04:	movt	r1, #3
   1fc08:	movt	r3, #3
   1fc0c:	bl	11438 <__assert_fail@plt>
   1fc10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc14:	add	fp, sp, #28
   1fc18:	sub	sp, sp, #20
   1fc1c:	mov	r7, r2
   1fc20:	mov	r6, r1
   1fc24:	mov	r4, r0
   1fc28:	cmp	r1, #2
   1fc2c:	blt	1fc44 <__assert_fail@plt+0xe80c>
   1fc30:	cmp	r6, #37	; 0x25
   1fc34:	bge	1fc5c <__assert_fail@plt+0xe824>
   1fc38:	movw	r9, #28509	; 0x6f5d
   1fc3c:	movt	r9, #3
   1fc40:	b	1fc84 <__assert_fail@plt+0xe84c>
   1fc44:	movw	r9, #28446	; 0x6f1e
   1fc48:	cmn	r6, #2
   1fc4c:	movt	r9, #3
   1fc50:	ble	1fc74 <__assert_fail@plt+0xe83c>
   1fc54:	mov	r6, #10
   1fc58:	b	1fc84 <__assert_fail@plt+0xe84c>
   1fc5c:	mov	r0, #0
   1fc60:	cmp	r6, #62	; 0x3e
   1fc64:	bgt	1fe30 <__assert_fail@plt+0xe9f8>
   1fc68:	movw	r9, #28446	; 0x6f1e
   1fc6c:	movt	r9, #3
   1fc70:	b	1fc84 <__assert_fail@plt+0xe84c>
   1fc74:	mov	r0, #0
   1fc78:	cmn	r6, #36	; 0x24
   1fc7c:	blt	1fe30 <__assert_fail@plt+0xe9f8>
   1fc80:	rsb	r6, r6, #0
   1fc84:	mov	r0, r7
   1fc88:	mov	r1, r6
   1fc8c:	bl	1c858 <__assert_fail@plt+0xb420>
   1fc90:	mov	r8, #0
   1fc94:	cmp	r4, #0
   1fc98:	bne	1fcb8 <__assert_fail@plt+0xe880>
   1fc9c:	movw	r1, #37156	; 0x9124
   1fca0:	add	r8, r0, #2
   1fca4:	movt	r1, #4
   1fca8:	mov	r0, r8
   1fcac:	ldr	r1, [r1]
   1fcb0:	blx	r1
   1fcb4:	mov	r4, r0
   1fcb8:	ldr	r0, [r7, #4]
   1fcbc:	cmp	r0, #0
   1fcc0:	mov	r5, r0
   1fcc4:	rsbmi	r5, r0, #0
   1fcc8:	cmp	r5, #0
   1fccc:	beq	1fd88 <__assert_fail@plt+0xe950>
   1fcd0:	cmn	r0, #1
   1fcd4:	mov	sl, #0
   1fcd8:	movle	r0, #45	; 0x2d
   1fcdc:	movle	sl, #1
   1fce0:	strble	r0, [r4]
   1fce4:	cmp	r6, #63	; 0x3f
   1fce8:	bgt	1fd98 <__assert_fail@plt+0xe960>
   1fcec:	sub	r0, r6, #2
   1fcf0:	cmp	r0, #30
   1fcf4:	bhi	1fe58 <__assert_fail@plt+0xea20>
   1fcf8:	add	r2, pc, #4
   1fcfc:	mov	r1, #1
   1fd00:	ldr	pc, [r2, r0, lsl #2]
   1fd04:	ldrdeq	pc, [r1], -ip
   1fd08:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd0c:	andeq	pc, r1, r0, lsl #27
   1fd10:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd14:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd18:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd1c:			; <UNDEFINED> instruction: 0x0001fdb8
   1fd20:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd24:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd28:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd2c:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd30:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd34:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd38:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd3c:	andeq	pc, r1, r0, asr #27
   1fd40:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd44:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd48:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd4c:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd50:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd54:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd58:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd5c:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd60:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd64:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd68:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd6c:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd70:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd74:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd78:	andeq	pc, r1, r8, asr lr	; <UNPREDICTABLE>
   1fd7c:	andeq	pc, r1, r8, asr #27
   1fd80:	mov	r1, #2
   1fd84:	b	1fddc <__assert_fail@plt+0xe9a4>
   1fd88:	mov	r0, #48	; 0x30
   1fd8c:	strb	r0, [r4]
   1fd90:	mov	r0, #1
   1fd94:	b	1fe14 <__assert_fail@plt+0xe9dc>
   1fd98:	cmp	r6, #64	; 0x40
   1fd9c:	beq	1fdd0 <__assert_fail@plt+0xe998>
   1fda0:	cmp	r6, #128	; 0x80
   1fda4:	beq	1fdd8 <__assert_fail@plt+0xe9a0>
   1fda8:	cmp	r6, #256	; 0x100
   1fdac:	bne	1fe58 <__assert_fail@plt+0xea20>
   1fdb0:	mov	r1, #8
   1fdb4:	b	1fddc <__assert_fail@plt+0xe9a4>
   1fdb8:	mov	r1, #3
   1fdbc:	b	1fddc <__assert_fail@plt+0xe9a4>
   1fdc0:	mov	r1, #4
   1fdc4:	b	1fddc <__assert_fail@plt+0xe9a4>
   1fdc8:	mov	r1, #5
   1fdcc:	b	1fddc <__assert_fail@plt+0xe9a4>
   1fdd0:	mov	r1, #6
   1fdd4:	b	1fddc <__assert_fail@plt+0xe9a4>
   1fdd8:	mov	r1, #7
   1fddc:	ldr	r2, [r7, #8]
   1fde0:	add	r0, r4, sl
   1fde4:	mov	r3, r5
   1fde8:	bl	14b78 <__assert_fail@plt+0x3740>
   1fdec:	mov	r5, r0
   1fdf0:	add	r0, r5, sl
   1fdf4:	cmp	sl, r0
   1fdf8:	bcs	1fe14 <__assert_fail@plt+0xe9dc>
   1fdfc:	add	r1, r4, sl
   1fe00:	ldrb	r2, [r1]
   1fe04:	subs	r5, r5, #1
   1fe08:	ldrb	r2, [r9, r2]
   1fe0c:	strb	r2, [r1], #1
   1fe10:	bne	1fe00 <__assert_fail@plt+0xe9c8>
   1fe14:	cmp	r8, #0
   1fe18:	mov	r1, #0
   1fe1c:	addne	r2, r0, #1
   1fe20:	strb	r1, [r4, r0]
   1fe24:	cmpne	r8, r2
   1fe28:	bne	1fe38 <__assert_fail@plt+0xea00>
   1fe2c:	mov	r0, r4
   1fe30:	sub	sp, fp, #28
   1fe34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe38:	movw	r0, #37160	; 0x9128
   1fe3c:	mov	r1, r8
   1fe40:	movt	r0, #4
   1fe44:	ldr	r3, [r0]
   1fe48:	mov	r0, r4
   1fe4c:	sub	sp, fp, #28
   1fe50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe54:	bx	r3
   1fe58:	mvn	r0, #0
   1fe5c:	mov	r2, r6
   1fe60:	udiv	r1, r0, r6
   1fe64:	mov	r0, #1
   1fe68:	cmp	r1, r6
   1fe6c:	bcc	1fe88 <__assert_fail@plt+0xea50>
   1fe70:	mov	r0, #1
   1fe74:	mov	r2, r6
   1fe78:	mul	r2, r2, r6
   1fe7c:	add	r0, r0, #1
   1fe80:	cmp	r2, r1
   1fe84:	bls	1fe78 <__assert_fail@plt+0xea40>
   1fe88:	str	r2, [sp, #16]
   1fe8c:	str	r0, [sp, #12]
   1fe90:	movw	r0, #37156	; 0x9124
   1fe94:	movt	r0, #4
   1fe98:	ldr	r1, [r0]
   1fe9c:	lsl	r0, r5, #2
   1fea0:	str	r0, [sp, #8]
   1fea4:	blx	r1
   1fea8:	mov	ip, r0
   1feac:	cmp	r5, #1
   1feb0:	blt	1ff20 <__assert_fail@plt+0xeae8>
   1feb4:	ldr	r7, [r7, #8]
   1feb8:	mov	r1, #0
   1febc:	cmp	r5, #4
   1fec0:	bcc	1ff04 <__assert_fail@plt+0xeacc>
   1fec4:	add	r0, r7, r5, lsl #2
   1fec8:	cmp	ip, r0
   1fecc:	bcs	1fedc <__assert_fail@plt+0xeaa4>
   1fed0:	add	r0, ip, r5, lsl #2
   1fed4:	cmp	r0, r7
   1fed8:	bhi	1ff04 <__assert_fail@plt+0xeacc>
   1fedc:	bic	r1, r5, #-2147483645	; 0x80000003
   1fee0:	mov	r3, ip
   1fee4:	mov	r0, r7
   1fee8:	mov	r2, r1
   1feec:	vld1.32	{d16-d17}, [r0]!
   1fef0:	subs	r2, r2, #4
   1fef4:	vst1.32	{d16-d17}, [r3]!
   1fef8:	bne	1feec <__assert_fail@plt+0xeab4>
   1fefc:	cmp	r5, r1
   1ff00:	beq	1ff20 <__assert_fail@plt+0xeae8>
   1ff04:	add	r0, r7, r1, lsl #2
   1ff08:	add	r2, ip, r1, lsl #2
   1ff0c:	sub	r1, r5, r1
   1ff10:	ldr	r3, [r0], #4
   1ff14:	subs	r1, r1, #1
   1ff18:	str	r3, [r2], #4
   1ff1c:	bne	1ff10 <__assert_fail@plt+0xead8>
   1ff20:	mov	r1, r6
   1ff24:	add	r0, r4, sl
   1ff28:	add	r2, sp, #12
   1ff2c:	mov	r3, ip
   1ff30:	str	r5, [sp]
   1ff34:	mov	r6, ip
   1ff38:	bl	14c74 <__assert_fail@plt+0x383c>
   1ff3c:	mov	r5, r0
   1ff40:	movw	r0, #37164	; 0x912c
   1ff44:	ldr	r1, [sp, #8]
   1ff48:	movt	r0, #4
   1ff4c:	ldr	r2, [r0]
   1ff50:	mov	r0, r6
   1ff54:	blx	r2
   1ff58:	b	1fdf0 <__assert_fail@plt+0xe9b8>
   1ff5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff60:	add	fp, sp, #28
   1ff64:	sub	sp, sp, #20
   1ff68:	mov	r5, r2
   1ff6c:	cmp	r2, #0
   1ff70:	mov	r8, r0
   1ff74:	subne	r0, r5, #2
   1ff78:	cmpne	r0, #60	; 0x3c
   1ff7c:	bhi	2048c <__assert_fail@plt+0xf054>
   1ff80:	sub	r6, r1, #1
   1ff84:	bl	11318 <__ctype_b_loc@plt>
   1ff88:	mov	r4, r0
   1ff8c:	ldr	r0, [r0]
   1ff90:	ldrb	sl, [r6, #1]!
   1ff94:	add	r1, r0, sl, lsl #1
   1ff98:	ldrb	r1, [r1, #1]
   1ff9c:	tst	r1, #32
   1ffa0:	bne	1ff90 <__assert_fail@plt+0xeb58>
   1ffa4:	sub	r0, sl, #45	; 0x2d
   1ffa8:	cmp	r5, #0
   1ffac:	clz	r0, r0
   1ffb0:	lsr	r1, r0, #5
   1ffb4:	add	r7, r6, r1
   1ffb8:	beq	20164 <__assert_fail@plt+0xed2c>
   1ffbc:	ldrb	r0, [r7]
   1ffc0:	cmp	r0, #0
   1ffc4:	beq	201a4 <__assert_fail@plt+0xed6c>
   1ffc8:	mov	r0, r7
   1ffcc:	str	r8, [sp, #8]
   1ffd0:	bl	11330 <strlen@plt>
   1ffd4:	movw	r6, #37156	; 0x9124
   1ffd8:	str	r0, [sp, #4]
   1ffdc:	movt	r6, #4
   1ffe0:	ldr	r1, [r6]
   1ffe4:	blx	r1
   1ffe8:	ldrb	r2, [r7]
   1ffec:	mov	r9, r0
   1fff0:	cmp	r2, #0
   1fff4:	beq	20140 <__assert_fail@plt+0xed08>
   1fff8:	mvn	r0, #86	; 0x56
   1fffc:	cmp	r5, #36	; 0x24
   20000:	add	r1, r7, #1
   20004:	mov	r8, #0
   20008:	mvngt	r0, #60	; 0x3c
   2000c:	ldr	r7, [r4]
   20010:	uxtb	r3, r2
   20014:	add	r7, r7, r3, lsl #1
   20018:	ldrb	r7, [r7, #1]
   2001c:	tst	r7, #32
   20020:	bne	20088 <__assert_fail@plt+0xec50>
   20024:	sub	r7, r2, #48	; 0x30
   20028:	uxtb	r7, r7
   2002c:	cmp	r7, #9
   20030:	bhi	20044 <__assert_fail@plt+0xec0c>
   20034:	sub	r2, r3, #48	; 0x30
   20038:	cmp	r2, r5
   2003c:	bcc	20080 <__assert_fail@plt+0xec48>
   20040:	b	20140 <__assert_fail@plt+0xed08>
   20044:	sub	r7, r2, #97	; 0x61
   20048:	uxtb	r7, r7
   2004c:	cmp	r7, #25
   20050:	bhi	20064 <__assert_fail@plt+0xec2c>
   20054:	add	r2, r0, r3
   20058:	cmp	r2, r5
   2005c:	bcc	20080 <__assert_fail@plt+0xec48>
   20060:	b	20140 <__assert_fail@plt+0xed08>
   20064:	sub	r2, r2, #65	; 0x41
   20068:	uxtb	r2, r2
   2006c:	cmp	r2, #25
   20070:	bhi	20140 <__assert_fail@plt+0xed08>
   20074:	sub	r2, r3, #55	; 0x37
   20078:	cmp	r2, r5
   2007c:	bcs	20140 <__assert_fail@plt+0xed08>
   20080:	strb	r2, [r9, r8]
   20084:	add	r8, r8, #1
   20088:	ldrb	r2, [r1], #1
   2008c:	cmp	r2, #0
   20090:	bne	2000c <__assert_fail@plt+0xebd4>
   20094:	cmp	r8, #0
   20098:	beq	20140 <__assert_fail@plt+0xed08>
   2009c:	cmp	r5, #63	; 0x3f
   200a0:	bgt	201d8 <__assert_fail@plt+0xeda0>
   200a4:	sub	r0, r5, #2
   200a8:	cmp	r0, #30
   200ac:	bhi	20340 <__assert_fail@plt+0xef08>
   200b0:	add	r1, pc, #4
   200b4:	mov	r4, #1
   200b8:	ldr	pc, [r1, r0, lsl #2]
   200bc:	andeq	r0, r2, ip, lsl r2
   200c0:	andeq	r0, r2, r0, asr #6
   200c4:	andeq	r0, r2, r8, lsr r1
   200c8:	andeq	r0, r2, r0, asr #6
   200cc:	andeq	r0, r2, r0, asr #6
   200d0:	andeq	r0, r2, r0, asr #6
   200d4:	andeq	r0, r2, r0, lsl #4
   200d8:	andeq	r0, r2, r0, asr #6
   200dc:	andeq	r0, r2, r0, asr #6
   200e0:	andeq	r0, r2, r0, asr #6
   200e4:	andeq	r0, r2, r0, asr #6
   200e8:	andeq	r0, r2, r0, asr #6
   200ec:	andeq	r0, r2, r0, asr #6
   200f0:	andeq	r0, r2, r0, asr #6
   200f4:	strdeq	r0, [r2], -r8
   200f8:	andeq	r0, r2, r0, asr #6
   200fc:	andeq	r0, r2, r0, asr #6
   20100:	andeq	r0, r2, r0, asr #6
   20104:	andeq	r0, r2, r0, asr #6
   20108:	andeq	r0, r2, r0, asr #6
   2010c:	andeq	r0, r2, r0, asr #6
   20110:	andeq	r0, r2, r0, asr #6
   20114:	andeq	r0, r2, r0, asr #6
   20118:	andeq	r0, r2, r0, asr #6
   2011c:	andeq	r0, r2, r0, asr #6
   20120:	andeq	r0, r2, r0, asr #6
   20124:	andeq	r0, r2, r0, asr #6
   20128:	andeq	r0, r2, r0, asr #6
   2012c:	andeq	r0, r2, r0, asr #6
   20130:	andeq	r0, r2, r0, asr #6
   20134:	andeq	r0, r2, r8, lsl #4
   20138:	mov	r4, #2
   2013c:	b	2021c <__assert_fail@plt+0xede4>
   20140:	movw	r0, #37164	; 0x912c
   20144:	ldr	r1, [sp, #4]
   20148:	movt	r0, #4
   2014c:	ldr	r2, [r0]
   20150:	mov	r0, r9
   20154:	blx	r2
   20158:	mvn	r0, #0
   2015c:	mov	r4, #0
   20160:	b	2047c <__assert_fail@plt+0xf044>
   20164:	ldrb	r0, [r6, r1]
   20168:	cmp	r0, #48	; 0x30
   2016c:	bne	20198 <__assert_fail@plt+0xed60>
   20170:	add	r0, r6, r1
   20174:	ldrb	r1, [r0, #1]
   20178:	cmp	r1, #97	; 0x61
   2017c:	bgt	201b0 <__assert_fail@plt+0xed78>
   20180:	cmp	r1, #66	; 0x42
   20184:	beq	201cc <__assert_fail@plt+0xed94>
   20188:	cmp	r1, #88	; 0x58
   2018c:	beq	201c0 <__assert_fail@plt+0xed88>
   20190:	mov	r5, #8
   20194:	b	1ffc8 <__assert_fail@plt+0xeb90>
   20198:	mov	r5, #10
   2019c:	cmp	r0, #0
   201a0:	bne	1ffc8 <__assert_fail@plt+0xeb90>
   201a4:	mvn	r0, #0
   201a8:	mov	r4, #0
   201ac:	b	20480 <__assert_fail@plt+0xf048>
   201b0:	cmp	r1, #98	; 0x62
   201b4:	beq	201cc <__assert_fail@plt+0xed94>
   201b8:	cmp	r1, #120	; 0x78
   201bc:	bne	20190 <__assert_fail@plt+0xed58>
   201c0:	add	r7, r0, #2
   201c4:	mov	r5, #16
   201c8:	b	1ffbc <__assert_fail@plt+0xeb84>
   201cc:	add	r7, r0, #2
   201d0:	mov	r5, #2
   201d4:	b	1ffbc <__assert_fail@plt+0xeb84>
   201d8:	cmp	r5, #64	; 0x40
   201dc:	beq	20210 <__assert_fail@plt+0xedd8>
   201e0:	cmp	r5, #128	; 0x80
   201e4:	beq	20218 <__assert_fail@plt+0xede0>
   201e8:	cmp	r5, #256	; 0x100
   201ec:	bne	20340 <__assert_fail@plt+0xef08>
   201f0:	mov	r4, #8
   201f4:	b	2021c <__assert_fail@plt+0xede4>
   201f8:	mov	r4, #4
   201fc:	b	2021c <__assert_fail@plt+0xede4>
   20200:	mov	r4, #3
   20204:	b	2021c <__assert_fail@plt+0xede4>
   20208:	mov	r4, #5
   2020c:	b	2021c <__assert_fail@plt+0xede4>
   20210:	mov	r4, #6
   20214:	b	2021c <__assert_fail@plt+0xede4>
   20218:	mov	r4, #7
   2021c:	ldr	r2, [sp, #8]
   20220:	mul	r0, r4, r8
   20224:	add	r0, r0, #31
   20228:	lsr	ip, r0, #5
   2022c:	ldr	r1, [r2]
   20230:	cmp	r1, r0, lsr #5
   20234:	bge	20274 <__assert_fail@plt+0xee3c>
   20238:	cmp	ip, #1
   2023c:	mov	r5, ip
   20240:	mov	r7, ip
   20244:	movls	r5, #1
   20248:	cmp	r1, #0
   2024c:	beq	2027c <__assert_fail@plt+0xee44>
   20250:	ldr	r6, [sp, #8]
   20254:	movw	r0, #37160	; 0x9128
   20258:	lsl	r1, r1, #2
   2025c:	lsl	r2, r5, #2
   20260:	movt	r0, #4
   20264:	ldr	r3, [r0]
   20268:	ldr	r0, [r6, #8]
   2026c:	blx	r3
   20270:	b	2028c <__assert_fail@plt+0xee54>
   20274:	ldr	r0, [r2, #8]
   20278:	b	202b4 <__assert_fail@plt+0xee7c>
   2027c:	ldr	r1, [r6]
   20280:	lsl	r0, r5, #2
   20284:	blx	r1
   20288:	ldr	r6, [sp, #8]
   2028c:	str	r0, [r6, #8]
   20290:	str	r5, [r6]
   20294:	mov	ip, r7
   20298:	ldr	r1, [r6, #4]
   2029c:	cmp	r1, #0
   202a0:	rsbmi	r1, r1, #0
   202a4:	cmp	r1, r5
   202a8:	ldrgt	r2, [sp, #8]
   202ac:	movgt	r1, #0
   202b0:	strgt	r1, [r2, #4]
   202b4:	sub	r2, r9, #1
   202b8:	mov	r3, #0
   202bc:	mov	r5, #0
   202c0:	mov	r1, #0
   202c4:	ldrb	r7, [r2, r8]
   202c8:	orr	r5, r5, r7, lsl r3
   202cc:	add	r3, r3, r4
   202d0:	sub	r7, r8, #1
   202d4:	cmp	r3, #32
   202d8:	bcc	202f4 <__assert_fail@plt+0xeebc>
   202dc:	str	r5, [r0, r1, lsl #2]
   202e0:	sub	r3, r3, #32
   202e4:	add	r1, r1, #1
   202e8:	ldrb	r5, [r2, r8]
   202ec:	sub	r6, r4, r3
   202f0:	lsr	r5, r5, r6
   202f4:	cmp	r7, #0
   202f8:	mov	r8, r7
   202fc:	bne	202c4 <__assert_fail@plt+0xee8c>
   20300:	cmp	r5, #0
   20304:	beq	2031c <__assert_fail@plt+0xeee4>
   20308:	str	r5, [r0, r1, lsl #2]
   2030c:	add	r4, r1, #1
   20310:	cmp	r4, ip
   20314:	ble	20458 <__assert_fail@plt+0xf020>
   20318:	b	204ac <__assert_fail@plt+0xf074>
   2031c:	sub	r0, r0, #4
   20320:	mov	r4, r1
   20324:	cmp	r1, #1
   20328:	blt	20450 <__assert_fail@plt+0xf018>
   2032c:	ldr	r2, [r0, r4, lsl #2]
   20330:	sub	r1, r4, #1
   20334:	cmp	r2, #0
   20338:	beq	20320 <__assert_fail@plt+0xeee8>
   2033c:	b	20450 <__assert_fail@plt+0xf018>
   20340:	mvn	r0, #0
   20344:	mov	r2, r5
   20348:	udiv	r1, r0, r5
   2034c:	mov	r0, #1
   20350:	cmp	r1, r5
   20354:	bcc	20370 <__assert_fail@plt+0xef38>
   20358:	mov	r0, #1
   2035c:	mov	r2, r5
   20360:	mul	r2, r2, r5
   20364:	add	r0, r0, #1
   20368:	cmp	r2, r1
   2036c:	bls	20360 <__assert_fail@plt+0xef28>
   20370:	add	r1, r8, r0
   20374:	str	r2, [sp, #16]
   20378:	str	r0, [sp, #12]
   2037c:	sub	r1, r1, #1
   20380:	udiv	r4, r1, r0
   20384:	ldr	r0, [sp, #8]
   20388:	ldr	r1, [r0]
   2038c:	cmp	r4, r1
   20390:	ble	203cc <__assert_fail@plt+0xef94>
   20394:	cmp	r4, #1
   20398:	mov	r7, r4
   2039c:	movle	r4, #1
   203a0:	cmp	r1, #0
   203a4:	beq	203d8 <__assert_fail@plt+0xefa0>
   203a8:	ldr	r6, [sp, #8]
   203ac:	movw	r0, #37160	; 0x9128
   203b0:	lsl	r1, r1, #2
   203b4:	lsl	r2, r4, #2
   203b8:	movt	r0, #4
   203bc:	ldr	r3, [r0]
   203c0:	ldr	r0, [r6, #8]
   203c4:	blx	r3
   203c8:	b	203e8 <__assert_fail@plt+0xefb0>
   203cc:	ldr	r6, [r0, #8]
   203d0:	mov	r7, r4
   203d4:	b	20414 <__assert_fail@plt+0xefdc>
   203d8:	ldr	r1, [r6]
   203dc:	lsl	r0, r4, #2
   203e0:	blx	r1
   203e4:	ldr	r6, [sp, #8]
   203e8:	str	r0, [r6, #8]
   203ec:	str	r4, [r6]
   203f0:	mov	r1, r0
   203f4:	ldr	r0, [r6, #4]
   203f8:	mov	r6, r1
   203fc:	cmp	r0, #0
   20400:	rsbmi	r0, r0, #0
   20404:	cmp	r0, r4
   20408:	ldrgt	r1, [sp, #8]
   2040c:	movgt	r0, #0
   20410:	strgt	r0, [r1, #4]
   20414:	add	r0, sp, #12
   20418:	mov	r1, r9
   2041c:	mov	r2, r8
   20420:	mov	r3, r5
   20424:	str	r0, [sp]
   20428:	mov	r0, r6
   2042c:	bl	15134 <__assert_fail@plt+0x3cfc>
   20430:	cmp	r0, #0
   20434:	ble	204cc <__assert_fail@plt+0xf094>
   20438:	mov	r4, r0
   2043c:	sub	r0, r0, #1
   20440:	mov	ip, r7
   20444:	ldr	r1, [r6, r0, lsl #2]
   20448:	cmp	r1, #0
   2044c:	moveq	r4, r0
   20450:	cmp	r4, ip
   20454:	bgt	204ac <__assert_fail@plt+0xf074>
   20458:	movw	r0, #37164	; 0x912c
   2045c:	ldr	r1, [sp, #4]
   20460:	movt	r0, #4
   20464:	ldr	r2, [r0]
   20468:	mov	r0, r9
   2046c:	blx	r2
   20470:	cmp	sl, #45	; 0x2d
   20474:	mov	r0, #0
   20478:	rsbeq	r4, r4, #0
   2047c:	ldr	r8, [sp, #8]
   20480:	str	r4, [r8, #4]
   20484:	sub	sp, fp, #28
   20488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2048c:	movw	r0, #28546	; 0x6f82
   20490:	movw	r1, #26324	; 0x66d4
   20494:	movw	r3, #28585	; 0x6fa9
   20498:	movw	r2, #4320	; 0x10e0
   2049c:	movt	r0, #3
   204a0:	movt	r1, #3
   204a4:	movt	r3, #3
   204a8:	bl	11438 <__assert_fail@plt>
   204ac:	movw	r0, #28643	; 0x6fe3
   204b0:	movw	r1, #26324	; 0x66d4
   204b4:	movw	r3, #28585	; 0x6fa9
   204b8:	movw	r2, #4408	; 0x1138
   204bc:	movt	r0, #3
   204c0:	movt	r1, #3
   204c4:	movt	r3, #3
   204c8:	bl	11438 <__assert_fail@plt>
   204cc:	movw	r0, #28636	; 0x6fdc
   204d0:	movw	r1, #26324	; 0x66d4
   204d4:	movw	r3, #28585	; 0x6fa9
   204d8:	movw	r2, #4405	; 0x1135
   204dc:	movt	r0, #3
   204e0:	movt	r1, #3
   204e4:	movt	r3, #3
   204e8:	bl	11438 <__assert_fail@plt>
   204ec:	movw	ip, #26320	; 0x66d0
   204f0:	mov	r3, #0
   204f4:	movt	ip, #3
   204f8:	str	r3, [r0]
   204fc:	stmib	r0, {r3, ip}
   20500:	b	1ff5c <__assert_fail@plt+0xeb24>
   20504:	push	{r4, r5, r6, sl, fp, lr}
   20508:	add	fp, sp, #16
   2050c:	mov	r5, r0
   20510:	mov	r0, #0
   20514:	bl	1fc10 <__assert_fail@plt+0xe7d8>
   20518:	cmp	r0, #0
   2051c:	moveq	r0, #0
   20520:	popeq	{r4, r5, r6, sl, fp, pc}
   20524:	mov	r4, r0
   20528:	bl	11330 <strlen@plt>
   2052c:	mov	r6, r0
   20530:	mov	r0, r4
   20534:	mov	r1, #1
   20538:	mov	r3, r5
   2053c:	mov	r2, r6
   20540:	bl	11264 <fwrite@plt>
   20544:	mov	r5, r0
   20548:	movw	r0, #37164	; 0x912c
   2054c:	add	r1, r6, #1
   20550:	movt	r0, #4
   20554:	ldr	r2, [r0]
   20558:	mov	r0, r4
   2055c:	blx	r2
   20560:	mov	r0, r5
   20564:	pop	{r4, r5, r6, sl, fp, pc}
   20568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2056c:	add	fp, sp, #28
   20570:	sub	sp, sp, #12
   20574:	mov	r9, r1
   20578:	ldr	r1, [fp, #12]
   2057c:	cmp	r1, #0
   20580:	bne	20758 <__assert_fail@plt+0xf320>
   20584:	cmn	r2, #1
   20588:	mov	r8, r3
   2058c:	cmpne	r2, #1
   20590:	bne	20764 <__assert_fail@plt+0xf32c>
   20594:	ldr	r5, [fp, #8]
   20598:	add	r1, r5, #1
   2059c:	cmp	r1, #3
   205a0:	bcs	20784 <__assert_fail@plt+0xf34c>
   205a4:	cmp	r5, #0
   205a8:	ldr	sl, [fp, #16]
   205ac:	str	r0, [sp, #4]
   205b0:	mvneq	r5, #0
   205b4:	subs	r6, r5, r2
   205b8:	lslne	r6, r8, #1
   205bc:	cmp	r2, #1
   205c0:	subeq	r1, r9, #1
   205c4:	rsbeq	r6, r6, #0
   205c8:	mlaeq	sl, r1, r8, sl
   205cc:	cmp	r5, #1
   205d0:	add	r1, sl, r8
   205d4:	subeq	sl, r1, #1
   205d8:	mul	r1, r8, r9
   205dc:	add	r2, r1, #3
   205e0:	ldr	r1, [r0]
   205e4:	lsr	r7, r2, #2
   205e8:	cmp	r1, r2, lsr #2
   205ec:	bge	20624 <__assert_fail@plt+0xf1ec>
   205f0:	cmp	r7, #1
   205f4:	mov	r4, r7
   205f8:	movls	r4, #1
   205fc:	cmp	r1, #0
   20600:	beq	2062c <__assert_fail@plt+0xf1f4>
   20604:	movw	r2, #37160	; 0x9128
   20608:	ldr	r0, [r0, #8]
   2060c:	lsl	r1, r1, #2
   20610:	movt	r2, #4
   20614:	ldr	r3, [r2]
   20618:	lsl	r2, r4, #2
   2061c:	blx	r3
   20620:	b	20640 <__assert_fail@plt+0xf208>
   20624:	ldr	r0, [r0, #8]
   20628:	b	20664 <__assert_fail@plt+0xf22c>
   2062c:	movw	r0, #37156	; 0x9124
   20630:	movt	r0, #4
   20634:	ldr	r1, [r0]
   20638:	lsl	r0, r4, #2
   2063c:	blx	r1
   20640:	ldr	r2, [sp, #4]
   20644:	str	r0, [r2, #8]
   20648:	str	r4, [r2]
   2064c:	ldr	r1, [r2, #4]
   20650:	cmp	r1, #0
   20654:	rsbmi	r1, r1, #0
   20658:	cmp	r1, r4
   2065c:	movgt	r1, #0
   20660:	strgt	r1, [r2, #4]
   20664:	cmp	r9, #0
   20668:	str	r7, [sp]
   2066c:	beq	206f0 <__assert_fail@plt+0xf2b8>
   20670:	mul	r1, r5, r8
   20674:	rsb	r4, r5, #0
   20678:	mov	lr, #0
   2067c:	mov	r3, #0
   20680:	mov	r2, #0
   20684:	rsb	r1, r1, #0
   20688:	str	r1, [sp, #8]
   2068c:	cmp	r8, #0
   20690:	beq	206e0 <__assert_fail@plt+0xf2a8>
   20694:	mov	ip, r6
   20698:	mov	r5, r8
   2069c:	mov	r7, sl
   206a0:	ldrb	r6, [r7]
   206a4:	lsl	r1, r3, #3
   206a8:	add	r3, r3, #1
   206ac:	cmp	r3, #4
   206b0:	orr	r2, r2, r6, lsl r1
   206b4:	bne	206c8 <__assert_fail@plt+0xf290>
   206b8:	str	r2, [r0, lr, lsl #2]
   206bc:	add	lr, lr, #1
   206c0:	mov	r2, #0
   206c4:	mov	r3, #0
   206c8:	add	r7, r7, r4
   206cc:	subs	r5, r5, #1
   206d0:	bne	206a0 <__assert_fail@plt+0xf268>
   206d4:	ldr	r1, [sp, #8]
   206d8:	mov	r6, ip
   206dc:	add	sl, sl, r1
   206e0:	add	sl, sl, r6
   206e4:	subs	r9, r9, #1
   206e8:	bne	2068c <__assert_fail@plt+0xf254>
   206ec:	b	206fc <__assert_fail@plt+0xf2c4>
   206f0:	mov	r2, #0
   206f4:	mov	r3, #0
   206f8:	mov	lr, #0
   206fc:	cmp	r3, #0
   20700:	ldr	r3, [sp]
   20704:	add	r7, lr, #1
   20708:	mov	r1, lr
   2070c:	movne	r1, r7
   20710:	cmp	r1, r3
   20714:	bne	207a4 <__assert_fail@plt+0xf36c>
   20718:	ldr	r3, [sp, #4]
   2071c:	cmp	r2, #0
   20720:	beq	2072c <__assert_fail@plt+0xf2f4>
   20724:	str	r2, [r0, lr, lsl #2]
   20728:	b	2074c <__assert_fail@plt+0xf314>
   2072c:	sub	r0, r0, #4
   20730:	mov	r7, lr
   20734:	cmp	lr, #1
   20738:	blt	2074c <__assert_fail@plt+0xf314>
   2073c:	ldr	r1, [r0, r7, lsl #2]
   20740:	sub	lr, r7, #1
   20744:	cmp	r1, #0
   20748:	beq	20730 <__assert_fail@plt+0xf2f8>
   2074c:	str	r7, [r3, #4]
   20750:	sub	sp, fp, #28
   20754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20758:	movw	r0, #28655	; 0x6fef
   2075c:	movt	r0, #3
   20760:	bl	1b85c <__assert_fail@plt+0xa424>
   20764:	movw	r0, #28688	; 0x7010
   20768:	movw	r1, #26324	; 0x66d4
   2076c:	movw	r3, #28714	; 0x702a
   20770:	movw	r2, #4468	; 0x1174
   20774:	movt	r0, #3
   20778:	movt	r1, #3
   2077c:	movt	r3, #3
   20780:	bl	11438 <__assert_fail@plt>
   20784:	movw	r0, #28794	; 0x707a
   20788:	movw	r1, #26324	; 0x66d4
   2078c:	movw	r3, #28714	; 0x702a
   20790:	movw	r2, #4469	; 0x1175
   20794:	movt	r0, #3
   20798:	movt	r1, #3
   2079c:	movt	r3, #3
   207a0:	bl	11438 <__assert_fail@plt>
   207a4:	movw	r0, #28822	; 0x7096
   207a8:	movw	r1, #26324	; 0x66d4
   207ac:	movw	r3, #28714	; 0x702a
   207b0:	movw	r2, #4507	; 0x119b
   207b4:	movt	r0, #3
   207b8:	movt	r1, #3
   207bc:	movt	r3, #3
   207c0:	bl	11438 <__assert_fail@plt>
   207c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207c8:	add	fp, sp, #28
   207cc:	sub	sp, sp, #12
   207d0:	mov	r4, r2
   207d4:	ldr	r2, [fp, #12]
   207d8:	cmp	r2, #0
   207dc:	bne	209a8 <__assert_fail@plt+0xf570>
   207e0:	cmn	r4, #1
   207e4:	mov	r8, r3
   207e8:	cmpne	r4, #1
   207ec:	bne	209b4 <__assert_fail@plt+0xf57c>
   207f0:	ldr	r5, [fp, #8]
   207f4:	add	r2, r5, #1
   207f8:	cmp	r2, #3
   207fc:	bcs	209d4 <__assert_fail@plt+0xf59c>
   20800:	ldr	r9, [fp, #16]
   20804:	cmp	r8, #0
   20808:	ldr	r7, [r9, #4]
   2080c:	beq	20968 <__assert_fail@plt+0xf530>
   20810:	cmp	r7, #0
   20814:	beq	20994 <__assert_fail@plt+0xf55c>
   20818:	ldr	r2, [r9, #8]
   2081c:	rsbmi	r7, r7, #0
   20820:	add	r2, r2, r7, lsl #2
   20824:	ldr	r3, [r2, #-4]
   20828:	cmp	r3, #0
   2082c:	beq	209f4 <__assert_fail@plt+0xf5bc>
   20830:	str	r1, [sp, #4]
   20834:	add	r1, r8, r7, lsl #2
   20838:	sub	r6, r1, #5
   2083c:	mov	r1, #0
   20840:	lsr	r2, r3, #8
   20844:	cmp	r1, r3, lsr #8
   20848:	add	r6, r6, #1
   2084c:	mov	r3, r2
   20850:	bne	20840 <__assert_fail@plt+0xf408>
   20854:	udiv	sl, r6, r8
   20858:	cmp	r0, #0
   2085c:	bne	20874 <__assert_fail@plt+0xf43c>
   20860:	movw	r1, #37156	; 0x9124
   20864:	mul	r0, sl, r8
   20868:	movt	r1, #4
   2086c:	ldr	r1, [r1]
   20870:	blx	r1
   20874:	cmp	r5, #0
   20878:	str	r0, [sp]
   2087c:	mov	r3, #0
   20880:	mvneq	r5, #0
   20884:	subs	lr, r5, r4
   20888:	lslne	lr, r8, #1
   2088c:	cmp	r4, #1
   20890:	subeq	r1, sl, #1
   20894:	rsbeq	lr, lr, #0
   20898:	mlaeq	r0, r1, r8, r0
   2089c:	cmp	r6, r8
   208a0:	mov	r6, #0
   208a4:	bcc	20934 <__assert_fail@plt+0xf4fc>
   208a8:	sub	r1, r8, #1
   208ac:	cmp	r5, #1
   208b0:	mov	r6, #0
   208b4:	mov	r4, #0
   208b8:	mov	r3, #0
   208bc:	addeq	r0, r0, r1
   208c0:	mul	r1, r5, r8
   208c4:	rsb	r1, r1, #0
   208c8:	str	r1, [sp, #8]
   208cc:	rsb	r1, r5, #0
   208d0:	mov	r5, #0
   208d4:	cmp	r8, #0
   208d8:	beq	20924 <__assert_fail@plt+0xf4ec>
   208dc:	mov	ip, sl
   208e0:	mov	sl, r8
   208e4:	mov	r2, r0
   208e8:	cmp	r4, #0
   208ec:	bne	20904 <__assert_fail@plt+0xf4cc>
   208f0:	cmp	r6, r7
   208f4:	mov	r4, #4
   208f8:	ldrlt	r5, [r9, #8]
   208fc:	ldrlt	r5, [r5, r6, lsl #2]
   20900:	addlt	r6, r6, #1
   20904:	strb	r5, [r2], r1
   20908:	subs	sl, sl, #1
   2090c:	sub	r4, r4, #1
   20910:	lsr	r5, r5, #8
   20914:	bne	208e8 <__assert_fail@plt+0xf4b0>
   20918:	ldr	r2, [sp, #8]
   2091c:	mov	sl, ip
   20920:	add	r0, r0, r2
   20924:	add	r3, r3, #1
   20928:	add	r0, r0, lr
   2092c:	cmp	r3, sl
   20930:	bcc	208d4 <__assert_fail@plt+0xf49c>
   20934:	cmp	r6, r7
   20938:	bne	20a14 <__assert_fail@plt+0xf5dc>
   2093c:	ldm	sp, {r0, r1}
   20940:	cmp	r3, sl
   20944:	beq	20998 <__assert_fail@plt+0xf560>
   20948:	movw	r0, #29007	; 0x714f
   2094c:	movw	r1, #26324	; 0x66d4
   20950:	movw	r3, #28877	; 0x70cd
   20954:	movw	r2, #4612	; 0x1204
   20958:	movt	r0, #3
   2095c:	movt	r1, #3
   20960:	movt	r3, #3
   20964:	bl	11438 <__assert_fail@plt>
   20968:	mov	sl, #0
   2096c:	cmp	r7, #0
   20970:	beq	20998 <__assert_fail@plt+0xf560>
   20974:	movw	r0, #28960	; 0x7120
   20978:	movw	r1, #26324	; 0x66d4
   2097c:	movw	r3, #28877	; 0x70cd
   20980:	movw	r2, #4528	; 0x11b0
   20984:	movt	r0, #3
   20988:	movt	r1, #3
   2098c:	movt	r3, #3
   20990:	bl	11438 <__assert_fail@plt>
   20994:	mov	sl, #0
   20998:	cmp	r1, #0
   2099c:	strne	sl, [r1]
   209a0:	sub	sp, fp, #28
   209a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209a8:	movw	r0, #28844	; 0x70ac
   209ac:	movt	r0, #3
   209b0:	bl	1b85c <__assert_fail@plt+0xa424>
   209b4:	movw	r0, #28688	; 0x7010
   209b8:	movw	r1, #26324	; 0x66d4
   209bc:	movw	r3, #28877	; 0x70cd
   209c0:	movw	r2, #4526	; 0x11ae
   209c4:	movt	r0, #3
   209c8:	movt	r1, #3
   209cc:	movt	r3, #3
   209d0:	bl	11438 <__assert_fail@plt>
   209d4:	movw	r0, #28794	; 0x707a
   209d8:	movw	r1, #26324	; 0x66d4
   209dc:	movw	r3, #28877	; 0x70cd
   209e0:	movw	r2, #4527	; 0x11af
   209e4:	movt	r0, #3
   209e8:	movt	r1, #3
   209ec:	movt	r3, #3
   209f0:	bl	11438 <__assert_fail@plt>
   209f4:	movw	r0, #28989	; 0x713d
   209f8:	movw	r1, #26324	; 0x66d4
   209fc:	movw	r3, #28877	; 0x70cd
   20a00:	movw	r2, #4548	; 0x11c4
   20a04:	movt	r0, #3
   20a08:	movt	r1, #3
   20a0c:	movt	r3, #3
   20a10:	bl	11438 <__assert_fail@plt>
   20a14:	movw	r0, #28999	; 0x7147
   20a18:	movw	r1, #26324	; 0x66d4
   20a1c:	movw	r3, #28877	; 0x70cd
   20a20:	movw	r2, #4611	; 0x1203
   20a24:	movt	r0, #3
   20a28:	movt	r1, #3
   20a2c:	movt	r3, #3
   20a30:	bl	11438 <__assert_fail@plt>
   20a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a38:	add	fp, sp, #28
   20a3c:	sub	sp, sp, #4
   20a40:	cmp	r1, #0
   20a44:	moveq	r0, #0
   20a48:	subeq	sp, fp, #28
   20a4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a50:	mov	lr, r0
   20a54:	mov	r0, #0
   20a58:	b	20a84 <__assert_fail@plt+0xf64c>
   20a5c:	lsr	r3, r5, r4
   20a60:	cmp	r7, ip
   20a64:	add	r1, r6, r1
   20a68:	strb	r3, [lr, r0]
   20a6c:	mov	r3, #0
   20a70:	add	r0, r0, #1
   20a74:	movwcs	r3, #1
   20a78:	adds	r1, r1, r3
   20a7c:	subeq	sp, fp, #28
   20a80:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a84:	ldm	r2, {r4, ip}
   20a88:	ldr	r5, [r2, #12]
   20a8c:	rsb	r8, r4, #32
   20a90:	lsr	r9, r5, #16
   20a94:	uxth	r5, r5
   20a98:	lsr	r6, r1, r8
   20a9c:	lsr	r7, r6, #16
   20aa0:	uxth	r6, r6
   20aa4:	mul	sl, r6, r9
   20aa8:	mul	r6, r6, r5
   20aac:	mla	sl, r7, r5, sl
   20ab0:	mul	r5, r7, r5
   20ab4:	mul	r7, r7, r9
   20ab8:	add	r3, sl, r6, lsr #16
   20abc:	cmp	r3, r5
   20ac0:	lsr	r5, r3, #16
   20ac4:	pkhbt	r3, r6, r3, lsl #16
   20ac8:	add	r5, r5, r1, lsr r8
   20acc:	addcc	r7, r7, #65536	; 0x10000
   20ad0:	adds	r3, r3, r1, lsl r4
   20ad4:	add	r5, r5, #1
   20ad8:	adc	r6, r5, r7
   20adc:	mul	r5, r6, ip
   20ae0:	rsb	r5, r5, r1, lsl r4
   20ae4:	mov	r1, #0
   20ae8:	cmp	r5, r3
   20aec:	mvnhi	r1, #0
   20af0:	and	r3, ip, r1
   20af4:	add	r7, r3, r5
   20af8:	mvn	r3, #0
   20afc:	subs	r5, r7, ip
   20b00:	movcc	r5, r7
   20b04:	tst	r5, r3, lsr r8
   20b08:	beq	20a5c <__assert_fail@plt+0xf624>
   20b0c:	movw	r0, #29273	; 0x7259
   20b10:	movw	r1, #26324	; 0x66d4
   20b14:	movw	r3, #29332	; 0x7294
   20b18:	movw	r2, #1259	; 0x4eb
   20b1c:	movt	r0, #3
   20b20:	movt	r1, #3
   20b24:	movt	r3, #3
   20b28:	bl	11438 <__assert_fail@plt>
   20b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b30:	add	fp, sp, #28
   20b34:	sub	sp, sp, #60	; 0x3c
   20b38:	ldr	r6, [fp, #12]
   20b3c:	cmp	r6, #2
   20b40:	ble	20ebc <__assert_fail@plt+0xfa84>
   20b44:	cmp	r2, r6
   20b48:	blt	20edc <__assert_fail@plt+0xfaa4>
   20b4c:	ldr	r5, [fp, #8]
   20b50:	sub	r7, r6, #1
   20b54:	str	r7, [fp, #-36]	; 0xffffffdc
   20b58:	ldr	sl, [r5, r7, lsl #2]
   20b5c:	cmp	sl, #0
   20b60:	bge	20efc <__assert_fail@plt+0xfac4>
   20b64:	sub	r4, r6, #2
   20b68:	ldr	r7, [fp, #16]
   20b6c:	add	r8, r1, r2, lsl #2
   20b70:	sub	ip, r2, r6
   20b74:	str	r1, [fp, #-40]	; 0xffffffd8
   20b78:	str	r0, [sp, #24]
   20b7c:	str	sl, [sp, #44]	; 0x2c
   20b80:	ldr	r5, [r5, r4, lsl #2]
   20b84:	str	r4, [sp, #20]
   20b88:	lsr	r2, r5, #16
   20b8c:	str	r5, [fp, #-32]	; 0xffffffe0
   20b90:	str	r2, [sp, #16]
   20b94:	uxth	r2, r5
   20b98:	str	r2, [sp, #12]
   20b9c:	lsr	r2, r7, #16
   20ba0:	str	r2, [sp, #8]
   20ba4:	uxth	r2, r7
   20ba8:	str	r2, [sp, #4]
   20bac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   20bb0:	cmp	r3, sl
   20bb4:	add	lr, ip, r2
   20bb8:	ldreq	r2, [fp, #-32]	; 0xffffffe0
   20bbc:	ldr	r9, [r1, lr, lsl #2]
   20bc0:	cmpeq	r9, r2
   20bc4:	beq	20cd8 <__assert_fail@plt+0xf8a0>
   20bc8:	ldr	r7, [sp, #8]
   20bcc:	ldr	r5, [sp, #4]
   20bd0:	uxth	r0, r3
   20bd4:	lsr	r2, r3, #16
   20bd8:	mov	r1, sl
   20bdc:	mov	sl, ip
   20be0:	ldr	ip, [sp, #16]
   20be4:	mul	r6, r0, r7
   20be8:	mul	r0, r0, r5
   20bec:	mla	r6, r2, r5, r6
   20bf0:	add	r4, r6, r0, lsr #16
   20bf4:	mul	r6, r2, r5
   20bf8:	mul	r5, r2, r7
   20bfc:	ldr	r7, [sp, #12]
   20c00:	cmp	r4, r6
   20c04:	pkhbt	r0, r0, r4, lsl #16
   20c08:	add	r3, r3, r4, lsr #16
   20c0c:	addcc	r5, r5, #65536	; 0x10000
   20c10:	adds	r0, r0, r9
   20c14:	adc	r2, r3, r5
   20c18:	str	r0, [sp, #40]	; 0x28
   20c1c:	add	r3, r3, r5
   20c20:	lsr	r0, r2, #16
   20c24:	uxth	r4, r2
   20c28:	sbc	r5, r3, #0
   20c2c:	sub	r3, r9, r1
   20c30:	ldr	r9, [sp, #40]	; 0x28
   20c34:	mul	r6, r0, r7
   20c38:	mul	lr, r4, r7
   20c3c:	mul	r7, r4, ip
   20c40:	mul	r0, r0, ip
   20c44:	mls	r3, r2, r1, r3
   20c48:	mla	r6, r4, ip, r6
   20c4c:	mov	r4, r1
   20c50:	ldr	r1, [fp, #-40]	; 0xffffffd8
   20c54:	mov	ip, sl
   20c58:	add	r6, r6, lr, lsr #16
   20c5c:	cmp	r6, r7
   20c60:	sub	r3, r3, r6, lsr #16
   20c64:	addcc	r0, r0, #65536	; 0x10000
   20c68:	sub	r3, r3, r0
   20c6c:	ldr	r0, [sp, #20]
   20c70:	add	r0, sl, r0
   20c74:	ldr	r7, [r1, r0, lsl #2]
   20c78:	ldr	r1, [fp, #-32]	; 0xffffffe0
   20c7c:	str	r0, [sp, #36]	; 0x24
   20c80:	pkhbt	r0, lr, r6, lsl #16
   20c84:	mov	r6, #0
   20c88:	cmp	r7, r1
   20c8c:	sub	r7, r7, r1
   20c90:	subcc	r3, r3, #1
   20c94:	cmp	r7, r0
   20c98:	sub	r0, r7, r0
   20c9c:	subcc	r3, r3, #1
   20ca0:	cmp	r3, r9
   20ca4:	mvncs	r6, #0
   20ca8:	and	lr, r4, r6
   20cac:	and	r6, r1, r6
   20cb0:	adds	sl, r6, r0
   20cb4:	adc	r6, lr, r3
   20cb8:	cmp	r3, r9
   20cbc:	movcc	r5, r2
   20cc0:	cmp	r6, r4
   20cc4:	add	r3, r5, #1
   20cc8:	bcs	20d4c <__assert_fail@plt+0xf914>
   20ccc:	ldr	r7, [fp, #12]
   20cd0:	ldr	r2, [fp, #8]
   20cd4:	b	20d64 <__assert_fail@plt+0xf92c>
   20cd8:	ldr	r6, [fp, #12]
   20cdc:	ldr	r2, [fp, #8]
   20ce0:	mov	r3, #0
   20ce4:	ldr	r7, [r2], #4
   20ce8:	lsr	r5, r7, #16
   20cec:	lsl	r5, r5, #16
   20cf0:	sub	r5, r5, r7, lsr #16
   20cf4:	uxth	r7, r7
   20cf8:	rsb	r7, r7, r7, lsl #16
   20cfc:	add	r4, r5, r7
   20d00:	add	r4, r4, r7, lsr #16
   20d04:	cmp	r4, r5
   20d08:	pkhbt	r7, r7, r4, lsl #16
   20d0c:	addcc	r5, r5, #65536	; 0x10000
   20d10:	adds	sl, r7, r3
   20d14:	ldr	r7, [r8, -r6, lsl #2]
   20d18:	adc	r9, r5, r4, lsr #16
   20d1c:	sub	r3, r7, sl
   20d20:	str	r3, [r8, -r6, lsl #2]
   20d24:	add	r3, r5, r4, lsr #16
   20d28:	adc	r3, r3, #1
   20d2c:	cmp	r7, sl
   20d30:	movcs	r3, r9
   20d34:	subs	r6, r6, #1
   20d38:	bne	20ce4 <__assert_fail@plt+0xf8ac>
   20d3c:	ldr	r3, [r1, lr, lsl #2]
   20d40:	ldr	sl, [sp, #44]	; 0x2c
   20d44:	mvn	r2, #0
   20d48:	b	20e90 <__assert_fail@plt+0xfa58>
   20d4c:	ldr	r7, [fp, #12]
   20d50:	ldr	r2, [fp, #8]
   20d54:	cmp	sl, r1
   20d58:	bcs	20d6c <__assert_fail@plt+0xf934>
   20d5c:	cmp	r6, r4
   20d60:	bhi	20d6c <__assert_fail@plt+0xf934>
   20d64:	str	sl, [sp, #28]
   20d68:	b	20d8c <__assert_fail@plt+0xf954>
   20d6c:	cmp	sl, r1
   20d70:	mov	r0, #0
   20d74:	sub	sl, sl, r1
   20d78:	add	r3, r3, #1
   20d7c:	mvncc	r0, #0
   20d80:	str	sl, [sp, #28]
   20d84:	sub	r0, r0, r4
   20d88:	add	r6, r0, r6
   20d8c:	str	r6, [sp, #32]
   20d90:	lsr	sl, r3, #16
   20d94:	uxth	r9, r3
   20d98:	mov	r1, #0
   20d9c:	mov	r0, r2
   20da0:	str	r3, [sp, #40]	; 0x28
   20da4:	ldr	r5, [r0], #4
   20da8:	ldr	r2, [r8, -r7, lsl #2]
   20dac:	uxth	r6, r5
   20db0:	lsr	r5, r5, #16
   20db4:	mul	r3, r6, sl
   20db8:	mul	r6, r6, r9
   20dbc:	mul	lr, r5, r9
   20dc0:	mla	r3, r5, r9, r3
   20dc4:	mul	r5, r5, sl
   20dc8:	add	r3, r3, r6, lsr #16
   20dcc:	cmp	r3, lr
   20dd0:	pkhbt	r6, r6, r3, lsl #16
   20dd4:	addcc	r5, r5, #65536	; 0x10000
   20dd8:	adds	r6, r6, r1
   20ddc:	sub	r1, r2, r6
   20de0:	adc	r4, r5, r3, lsr #16
   20de4:	str	r1, [r8, -r7, lsl #2]
   20de8:	add	r1, r5, r3, lsr #16
   20dec:	sub	r7, r7, #1
   20df0:	adc	r1, r1, #1
   20df4:	cmp	r2, r6
   20df8:	movcs	r1, r4
   20dfc:	cmp	r7, #2
   20e00:	bne	20da4 <__assert_fail@plt+0xf96c>
   20e04:	ldr	r0, [sp, #28]
   20e08:	ldr	r2, [sp, #36]	; 0x24
   20e0c:	subs	r0, r0, r1
   20e10:	ldr	r1, [fp, #-40]	; 0xffffffd8
   20e14:	str	r0, [r1, r2, lsl #2]
   20e18:	ldr	r2, [sp, #32]
   20e1c:	mov	r0, #0
   20e20:	movwcc	r0, #1
   20e24:	subs	r3, r2, r0
   20e28:	bcs	20e84 <__assert_fail@plt+0xfa4c>
   20e2c:	ldr	r4, [fp, #8]
   20e30:	ldr	r2, [fp, #12]
   20e34:	ldr	r0, [sp, #24]
   20e38:	ldr	sl, [sp, #44]	; 0x2c
   20e3c:	mov	r6, #0
   20e40:	mov	r9, #0
   20e44:	ldr	r7, [r8, -r2, lsl #2]
   20e48:	ldr	lr, [r4], #4
   20e4c:	adds	r5, r7, r6
   20e50:	adds	lr, r5, lr
   20e54:	adc	r5, r9, #0
   20e58:	adds	r6, r7, r6
   20e5c:	str	lr, [r8, -r2, lsl #2]
   20e60:	sub	r2, r2, #1
   20e64:	adc	r6, r5, #0
   20e68:	cmp	r2, #1
   20e6c:	bne	20e44 <__assert_fail@plt+0xfa0c>
   20e70:	add	r2, r3, sl
   20e74:	add	r3, r2, r6
   20e78:	ldr	r2, [sp, #40]	; 0x28
   20e7c:	sub	r2, r2, #1
   20e80:	b	20e90 <__assert_fail@plt+0xfa58>
   20e84:	ldr	r0, [sp, #24]
   20e88:	ldr	sl, [sp, #44]	; 0x2c
   20e8c:	ldr	r2, [sp, #40]	; 0x28
   20e90:	cmp	r0, #0
   20e94:	sub	r8, r8, #4
   20e98:	strne	r2, [r0, ip, lsl #2]
   20e9c:	sub	r2, ip, #1
   20ea0:	cmp	ip, #0
   20ea4:	mov	ip, r2
   20ea8:	bgt	20bac <__assert_fail@plt+0xf774>
   20eac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   20eb0:	str	r3, [r1, r0, lsl #2]
   20eb4:	sub	sp, fp, #28
   20eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ebc:	movw	r0, #30413	; 0x76cd
   20ec0:	movw	r1, #26324	; 0x66d4
   20ec4:	movw	r3, #30420	; 0x76d4
   20ec8:	movw	r2, #1057	; 0x421
   20ecc:	movt	r0, #3
   20ed0:	movt	r1, #3
   20ed4:	movt	r3, #3
   20ed8:	bl	11438 <__assert_fail@plt>
   20edc:	movw	r0, #29721	; 0x7419
   20ee0:	movw	r1, #26324	; 0x66d4
   20ee4:	movw	r3, #30420	; 0x76d4
   20ee8:	movw	r2, #1058	; 0x422
   20eec:	movt	r0, #3
   20ef0:	movt	r1, #3
   20ef4:	movt	r3, #3
   20ef8:	bl	11438 <__assert_fail@plt>
   20efc:	movw	r0, #30511	; 0x772f
   20f00:	movw	r1, #26324	; 0x66d4
   20f04:	movw	r3, #30420	; 0x76d4
   20f08:	movw	r2, #1063	; 0x427
   20f0c:	movt	r0, #3
   20f10:	movt	r1, #3
   20f14:	movt	r3, #3
   20f18:	bl	11438 <__assert_fail@plt>
   20f1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20f20:	add	fp, sp, #24
   20f24:	sub	sp, sp, #8
   20f28:	movw	r6, #37256	; 0x9188
   20f2c:	mov	r4, #0
   20f30:	cmp	r0, #2
   20f34:	movt	r6, #4
   20f38:	ldr	r7, [r6]
   20f3c:	str	r4, [r6]
   20f40:	bne	20fb4 <__assert_fail@plt+0xfb7c>
   20f44:	mov	r8, r3
   20f48:	movw	r3, #31152	; 0x79b0
   20f4c:	mov	r5, r2
   20f50:	movw	r2, #25976	; 0x6578
   20f54:	mov	r0, #2
   20f58:	str	r4, [sp]
   20f5c:	movt	r2, #3
   20f60:	movt	r3, #3
   20f64:	bl	1130c <getopt_long@plt>
   20f68:	cmp	r0, #104	; 0x68
   20f6c:	beq	20fa8 <__assert_fail@plt+0xfb70>
   20f70:	cmp	r0, #118	; 0x76
   20f74:	bne	20fb4 <__assert_fail@plt+0xfb7c>
   20f78:	movw	r0, #37252	; 0x9184
   20f7c:	ldr	r3, [fp, #8]
   20f80:	add	r1, fp, #16
   20f84:	mov	r2, r8
   20f88:	movt	r0, #4
   20f8c:	str	r1, [sp, #4]
   20f90:	str	r1, [sp]
   20f94:	mov	r1, r5
   20f98:	ldr	r0, [r0]
   20f9c:	bl	34c0c <__assert_fail@plt+0x237d4>
   20fa0:	mov	r0, #0
   20fa4:	bl	11324 <exit@plt>
   20fa8:	ldr	r1, [fp, #12]
   20fac:	mov	r0, #0
   20fb0:	blx	r1
   20fb4:	movw	r0, #37240	; 0x9178
   20fb8:	str	r7, [r6]
   20fbc:	movt	r0, #4
   20fc0:	str	r4, [r0]
   20fc4:	sub	sp, fp, #24
   20fc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20fcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20fd0:	add	fp, sp, #24
   20fd4:	sub	sp, sp, #8
   20fd8:	movw	r6, #37256	; 0x9188
   20fdc:	mov	r8, r3
   20fe0:	ldr	r3, [fp, #12]
   20fe4:	mov	r5, r2
   20fe8:	mov	r2, #1
   20fec:	movw	r4, #25955	; 0x6563
   20ff0:	movt	r6, #4
   20ff4:	movt	r4, #3
   20ff8:	ldr	r7, [r6]
   20ffc:	str	r2, [r6]
   21000:	mov	r2, #0
   21004:	str	r2, [sp]
   21008:	movw	r2, #25976	; 0x6578
   2100c:	cmp	r3, #0
   21010:	movt	r2, #3
   21014:	movw	r3, #31152	; 0x79b0
   21018:	movne	r2, r4
   2101c:	movt	r3, #3
   21020:	bl	1130c <getopt_long@plt>
   21024:	cmn	r0, #1
   21028:	beq	21058 <__assert_fail@plt+0xfc20>
   2102c:	ldr	r1, [fp, #16]
   21030:	cmp	r0, #104	; 0x68
   21034:	beq	21050 <__assert_fail@plt+0xfc18>
   21038:	cmp	r0, #118	; 0x76
   2103c:	beq	21064 <__assert_fail@plt+0xfc2c>
   21040:	movw	r0, #37152	; 0x9120
   21044:	movt	r0, #4
   21048:	ldr	r0, [r0]
   2104c:	b	21054 <__assert_fail@plt+0xfc1c>
   21050:	mov	r0, #0
   21054:	blx	r1
   21058:	str	r7, [r6]
   2105c:	sub	sp, fp, #24
   21060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21064:	movw	r0, #37252	; 0x9184
   21068:	ldr	r3, [fp, #8]
   2106c:	add	r1, fp, #20
   21070:	mov	r2, r8
   21074:	movt	r0, #4
   21078:	str	r1, [sp, #4]
   2107c:	str	r1, [sp]
   21080:	mov	r1, r5
   21084:	ldr	r0, [r0]
   21088:	bl	34c0c <__assert_fail@plt+0x237d4>
   2108c:	mov	r0, #0
   21090:	bl	11324 <exit@plt>
   21094:	push	{r4, r5, r6, sl, fp, lr}
   21098:	add	fp, sp, #16
   2109c:	sub	sp, sp, #56	; 0x38
   210a0:	mov	r5, r1
   210a4:	mov	r6, r0
   210a8:	and	r4, r1, #240	; 0xf0
   210ac:	bl	1127c <__ctype_get_mb_cur_max@plt>
   210b0:	cmp	r4, #48	; 0x30
   210b4:	cmpcs	r0, #2
   210b8:	bcs	210d0 <__assert_fail@plt+0xfc98>
   210bc:	mov	r0, r6
   210c0:	mov	r1, r5
   210c4:	sub	sp, fp, #16
   210c8:	pop	{r4, r5, r6, sl, fp, lr}
   210cc:	b	1133c <strchr@plt>
   210d0:	mov	r4, #0
   210d4:	mov	r0, sp
   210d8:	str	r4, [sp, #8]
   210dc:	str	r4, [sp, #4]
   210e0:	strb	r4, [sp]
   210e4:	str	r6, [sp, #16]
   210e8:	strb	r4, [sp, #12]
   210ec:	bl	21220 <__assert_fail@plt+0xfde8>
   210f0:	ldrb	r0, [sp, #24]
   210f4:	cmp	r0, #0
   210f8:	beq	21108 <__assert_fail@plt+0xfcd0>
   210fc:	ldr	r0, [sp, #28]
   21100:	cmp	r0, #0
   21104:	beq	21160 <__assert_fail@plt+0xfd28>
   21108:	uxtb	r6, r5
   2110c:	mov	r5, sp
   21110:	mov	r4, #0
   21114:	ldr	r1, [sp, #20]
   21118:	ldr	r0, [sp, #16]
   2111c:	cmp	r1, #1
   21120:	ldrbeq	r2, [r0]
   21124:	cmpeq	r2, r6
   21128:	beq	2115c <__assert_fail@plt+0xfd24>
   2112c:	add	r0, r0, r1
   21130:	strb	r4, [sp, #12]
   21134:	str	r0, [sp, #16]
   21138:	mov	r0, r5
   2113c:	bl	21220 <__assert_fail@plt+0xfde8>
   21140:	ldrb	r0, [sp, #24]
   21144:	cmp	r0, #0
   21148:	beq	21114 <__assert_fail@plt+0xfcdc>
   2114c:	ldr	r0, [sp, #28]
   21150:	cmp	r0, #0
   21154:	bne	21114 <__assert_fail@plt+0xfcdc>
   21158:	b	21160 <__assert_fail@plt+0xfd28>
   2115c:	mov	r4, r0
   21160:	mov	r0, r4
   21164:	sub	sp, fp, #16
   21168:	pop	{r4, r5, r6, sl, fp, pc}
   2116c:	push	{r4, r5, r6, sl, fp, lr}
   21170:	add	fp, sp, #16
   21174:	sub	sp, sp, #56	; 0x38
   21178:	mov	r5, r0
   2117c:	bl	1127c <__ctype_get_mb_cur_max@plt>
   21180:	cmp	r0, #2
   21184:	bcc	21210 <__assert_fail@plt+0xfdd8>
   21188:	mov	r4, #0
   2118c:	mov	r0, sp
   21190:	str	r4, [sp, #8]
   21194:	str	r4, [sp, #4]
   21198:	strb	r4, [sp]
   2119c:	str	r5, [sp, #16]
   211a0:	strb	r4, [sp, #12]
   211a4:	bl	21220 <__assert_fail@plt+0xfde8>
   211a8:	ldrb	r0, [sp, #24]
   211ac:	cmp	r0, #0
   211b0:	beq	211c0 <__assert_fail@plt+0xfd88>
   211b4:	ldr	r0, [sp, #28]
   211b8:	cmp	r0, #0
   211bc:	beq	21204 <__assert_fail@plt+0xfdcc>
   211c0:	mov	r6, #0
   211c4:	mov	r5, sp
   211c8:	mov	r4, #0
   211cc:	strb	r6, [sp, #12]
   211d0:	ldr	r0, [sp, #16]
   211d4:	ldr	r1, [sp, #20]
   211d8:	add	r0, r0, r1
   211dc:	str	r0, [sp, #16]
   211e0:	mov	r0, r5
   211e4:	bl	21220 <__assert_fail@plt+0xfde8>
   211e8:	ldrb	r1, [sp, #24]
   211ec:	ldr	r0, [sp, #28]
   211f0:	add	r4, r4, #1
   211f4:	cmp	r1, #0
   211f8:	beq	211cc <__assert_fail@plt+0xfd94>
   211fc:	cmp	r0, #0
   21200:	bne	211cc <__assert_fail@plt+0xfd94>
   21204:	mov	r0, r4
   21208:	sub	sp, fp, #16
   2120c:	pop	{r4, r5, r6, sl, fp, pc}
   21210:	mov	r0, r5
   21214:	sub	sp, fp, #16
   21218:	pop	{r4, r5, r6, sl, fp, lr}
   2121c:	b	11330 <strlen@plt>
   21220:	push	{r4, r5, r6, r7, fp, lr}
   21224:	add	fp, sp, #16
   21228:	mov	r4, r0
   2122c:	ldrb	r0, [r0, #12]
   21230:	cmp	r0, #0
   21234:	popne	{r4, r5, r6, r7, fp, pc}
   21238:	ldrb	r0, [r4]
   2123c:	ldr	r6, [r4, #16]
   21240:	cmp	r0, #0
   21244:	beq	212a4 <__assert_fail@plt+0xfe6c>
   21248:	add	r5, r4, #4
   2124c:	bl	1127c <__ctype_get_mb_cur_max@plt>
   21250:	mov	r1, r0
   21254:	mov	r0, r6
   21258:	bl	34618 <__assert_fail@plt+0x231e0>
   2125c:	add	r7, r4, #28
   21260:	mov	r2, r0
   21264:	mov	r1, r6
   21268:	mov	r3, r5
   2126c:	mov	r0, r7
   21270:	bl	35998 <__assert_fail@plt+0x24560>
   21274:	cmn	r0, #2
   21278:	str	r0, [r4, #20]
   2127c:	beq	21320 <__assert_fail@plt+0xfee8>
   21280:	cmp	r0, #0
   21284:	beq	212dc <__assert_fail@plt+0xfea4>
   21288:	cmn	r0, #1
   2128c:	bne	21300 <__assert_fail@plt+0xfec8>
   21290:	mov	r0, #0
   21294:	strb	r0, [r4, #24]
   21298:	mov	r0, #1
   2129c:	str	r0, [r4, #20]
   212a0:	b	21334 <__assert_fail@plt+0xfefc>
   212a4:	ldrb	r0, [r6]
   212a8:	movw	r2, #32952	; 0x80b8
   212ac:	movt	r2, #3
   212b0:	ubfx	r1, r0, #5, #3
   212b4:	ldr	r1, [r2, r1, lsl #2]
   212b8:	and	r2, r0, #31
   212bc:	mov	r0, #1
   212c0:	tst	r1, r0, lsl r2
   212c4:	beq	21340 <__assert_fail@plt+0xff08>
   212c8:	str	r0, [r4, #20]
   212cc:	ldrb	r1, [r6]
   212d0:	strb	r0, [r4, #24]
   212d4:	str	r1, [r4, #28]
   212d8:	b	21334 <__assert_fail@plt+0xfefc>
   212dc:	mov	r0, #1
   212e0:	str	r0, [r4, #20]
   212e4:	ldr	r0, [r4, #16]
   212e8:	ldrb	r0, [r0]
   212ec:	cmp	r0, #0
   212f0:	bne	21360 <__assert_fail@plt+0xff28>
   212f4:	ldr	r0, [r7]
   212f8:	cmp	r0, #0
   212fc:	bne	21380 <__assert_fail@plt+0xff48>
   21300:	mov	r0, #1
   21304:	strb	r0, [r4, #24]
   21308:	mov	r0, r5
   2130c:	bl	11210 <mbsinit@plt>
   21310:	cmp	r0, #0
   21314:	movne	r0, #0
   21318:	strbne	r0, [r4]
   2131c:	b	21334 <__assert_fail@plt+0xfefc>
   21320:	ldr	r0, [r4, #16]
   21324:	bl	11330 <strlen@plt>
   21328:	str	r0, [r4, #20]
   2132c:	mov	r0, #0
   21330:	strb	r0, [r4, #24]
   21334:	mov	r0, #1
   21338:	strb	r0, [r4, #12]
   2133c:	pop	{r4, r5, r6, r7, fp, pc}
   21340:	add	r5, r4, #4
   21344:	mov	r0, r5
   21348:	bl	11210 <mbsinit@plt>
   2134c:	cmp	r0, #0
   21350:	beq	213a0 <__assert_fail@plt+0xff68>
   21354:	mov	r0, #1
   21358:	strb	r0, [r4]
   2135c:	b	2124c <__assert_fail@plt+0xfe14>
   21360:	movw	r0, #31287	; 0x7a37
   21364:	movw	r1, #31223	; 0x79f7
   21368:	movw	r3, #31239	; 0x7a07
   2136c:	mov	r2, #171	; 0xab
   21370:	movt	r0, #3
   21374:	movt	r1, #3
   21378:	movt	r3, #3
   2137c:	bl	11438 <__assert_fail@plt>
   21380:	movw	r0, #31310	; 0x7a4e
   21384:	movw	r1, #31223	; 0x79f7
   21388:	movw	r3, #31239	; 0x7a07
   2138c:	mov	r2, #172	; 0xac
   21390:	movt	r0, #3
   21394:	movt	r1, #3
   21398:	movt	r3, #3
   2139c:	bl	11438 <__assert_fail@plt>
   213a0:	movw	r0, #31200	; 0x79e0
   213a4:	movw	r1, #31223	; 0x79f7
   213a8:	movw	r3, #31239	; 0x7a07
   213ac:	mov	r2, #143	; 0x8f
   213b0:	movt	r0, #3
   213b4:	movt	r1, #3
   213b8:	movt	r3, #3
   213bc:	bl	11438 <__assert_fail@plt>
   213c0:	ldr	r2, [r0, #16]
   213c4:	add	r1, r2, r1
   213c8:	str	r1, [r0, #16]
   213cc:	bx	lr
   213d0:	push	{r4, r5, r6, sl, fp, lr}
   213d4:	add	fp, sp, #16
   213d8:	mov	r5, r1
   213dc:	ldrb	r1, [r1]
   213e0:	mov	r4, r0
   213e4:	strb	r1, [r0], #4
   213e8:	cmp	r1, #0
   213ec:	beq	213fc <__assert_fail@plt+0xffc4>
   213f0:	ldmib	r5, {r1, r2}
   213f4:	stm	r0, {r1, r2}
   213f8:	b	21408 <__assert_fail@plt+0xffd0>
   213fc:	mov	r1, #0
   21400:	str	r1, [r0]
   21404:	str	r1, [r0, #4]
   21408:	ldrb	r0, [r5, #12]
   2140c:	strb	r0, [r4, #12]
   21410:	add	r0, r5, #32
   21414:	ldr	r1, [r5, #16]
   21418:	cmp	r1, r0
   2141c:	beq	21428 <__assert_fail@plt+0xfff0>
   21420:	mov	r6, r1
   21424:	b	21438 <__assert_fail@plt+0x10000>
   21428:	ldr	r2, [r5, #20]
   2142c:	add	r6, r4, #32
   21430:	mov	r0, r6
   21434:	bl	111ec <memcpy@plt>
   21438:	str	r6, [r4, #16]
   2143c:	ldr	r0, [r5, #20]
   21440:	str	r0, [r4, #20]
   21444:	ldrb	r0, [r5, #24]
   21448:	strb	r0, [r4, #24]
   2144c:	cmp	r0, #0
   21450:	ldrne	r0, [r5, #28]
   21454:	strne	r0, [r4, #28]
   21458:	pop	{r4, r5, r6, sl, fp, pc}
   2145c:	push	{r4, r5, fp, lr}
   21460:	add	fp, sp, #8
   21464:	cmp	r0, #0
   21468:	beq	214fc <__assert_fail@plt+0x100c4>
   2146c:	mov	r1, #47	; 0x2f
   21470:	mov	r4, r0
   21474:	bl	113e4 <strrchr@plt>
   21478:	cmp	r0, #0
   2147c:	mov	r5, r4
   21480:	addne	r5, r0, #1
   21484:	sub	r0, r5, r4
   21488:	cmp	r0, #7
   2148c:	blt	214e0 <__assert_fail@plt+0x100a8>
   21490:	movw	r1, #31384	; 0x7a98
   21494:	sub	r0, r5, #7
   21498:	mov	r2, #7
   2149c:	movt	r1, #3
   214a0:	bl	11414 <strncmp@plt>
   214a4:	cmp	r0, #0
   214a8:	bne	214e0 <__assert_fail@plt+0x100a8>
   214ac:	movw	r1, #31392	; 0x7aa0
   214b0:	mov	r0, r5
   214b4:	mov	r2, #3
   214b8:	movt	r1, #3
   214bc:	bl	11414 <strncmp@plt>
   214c0:	cmp	r0, #0
   214c4:	beq	214d0 <__assert_fail@plt+0x10098>
   214c8:	mov	r4, r5
   214cc:	b	214e0 <__assert_fail@plt+0x100a8>
   214d0:	movw	r0, #37232	; 0x9170
   214d4:	add	r4, r5, #3
   214d8:	movt	r0, #4
   214dc:	str	r4, [r0]
   214e0:	movw	r0, #37236	; 0x9174
   214e4:	movt	r0, #4
   214e8:	str	r4, [r0]
   214ec:	movw	r0, #37276	; 0x919c
   214f0:	movt	r0, #4
   214f4:	str	r4, [r0]
   214f8:	pop	{r4, r5, fp, pc}
   214fc:	movw	r0, #37248	; 0x9180
   21500:	mov	r1, #55	; 0x37
   21504:	mov	r2, #1
   21508:	movt	r0, #4
   2150c:	ldr	r3, [r0]
   21510:	movw	r0, #31328	; 0x7a60
   21514:	movt	r0, #3
   21518:	bl	11264 <fwrite@plt>
   2151c:	bl	11420 <abort@plt>
   21520:	push	{r4, r5, r6, sl, fp, lr}
   21524:	add	fp, sp, #16
   21528:	mov	r4, r0
   2152c:	movw	r0, #37280	; 0x91a0
   21530:	movt	r0, #4
   21534:	cmp	r4, #0
   21538:	moveq	r4, r0
   2153c:	bl	11348 <__errno_location@plt>
   21540:	ldr	r6, [r0]
   21544:	mov	r5, r0
   21548:	mov	r0, r4
   2154c:	mov	r1, #48	; 0x30
   21550:	bl	353b4 <__assert_fail@plt+0x23f7c>
   21554:	str	r6, [r5]
   21558:	pop	{r4, r5, r6, sl, fp, pc}
   2155c:	movw	r1, #37280	; 0x91a0
   21560:	cmp	r0, #0
   21564:	movt	r1, #4
   21568:	movne	r1, r0
   2156c:	ldr	r0, [r1]
   21570:	bx	lr
   21574:	movw	r2, #37280	; 0x91a0
   21578:	cmp	r0, #0
   2157c:	movt	r2, #4
   21580:	movne	r2, r0
   21584:	str	r1, [r2]
   21588:	bx	lr
   2158c:	movw	r3, #37280	; 0x91a0
   21590:	cmp	r0, #0
   21594:	movt	r3, #4
   21598:	movne	r3, r0
   2159c:	ubfx	r0, r1, #5, #3
   215a0:	and	r1, r1, #31
   215a4:	add	r0, r3, r0, lsl #2
   215a8:	ldr	r3, [r0, #8]
   215ac:	eor	r2, r2, r3, lsr r1
   215b0:	and	r2, r2, #1
   215b4:	eor	r2, r3, r2, lsl r1
   215b8:	str	r2, [r0, #8]
   215bc:	mov	r0, #1
   215c0:	and	r0, r0, r3, lsr r1
   215c4:	bx	lr
   215c8:	movw	r2, #37280	; 0x91a0
   215cc:	cmp	r0, #0
   215d0:	movt	r2, #4
   215d4:	movne	r2, r0
   215d8:	ldr	r0, [r2, #4]
   215dc:	str	r1, [r2, #4]
   215e0:	bx	lr
   215e4:	movw	r3, #37280	; 0x91a0
   215e8:	cmp	r0, #0
   215ec:	movt	r3, #4
   215f0:	movne	r3, r0
   215f4:	cmp	r1, #0
   215f8:	mov	r0, #10
   215fc:	cmpne	r2, #0
   21600:	str	r0, [r3]
   21604:	bne	21614 <__assert_fail@plt+0x101dc>
   21608:	push	{fp, lr}
   2160c:	mov	fp, sp
   21610:	bl	11420 <abort@plt>
   21614:	str	r1, [r3, #40]	; 0x28
   21618:	str	r2, [r3, #44]	; 0x2c
   2161c:	bx	lr
   21620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21624:	add	fp, sp, #28
   21628:	sub	sp, sp, #20
   2162c:	mov	r7, r0
   21630:	ldr	r0, [fp, #8]
   21634:	movw	r5, #37280	; 0x91a0
   21638:	mov	r8, r3
   2163c:	mov	r9, r2
   21640:	mov	sl, r1
   21644:	movt	r5, #4
   21648:	cmp	r0, #0
   2164c:	movne	r5, r0
   21650:	bl	11348 <__errno_location@plt>
   21654:	mov	r4, r0
   21658:	ldm	r5, {r0, r1}
   2165c:	ldr	r2, [r5, #40]	; 0x28
   21660:	ldr	r3, [r5, #44]	; 0x2c
   21664:	add	r5, r5, #8
   21668:	ldr	r6, [r4]
   2166c:	stm	sp, {r0, r1, r5}
   21670:	str	r2, [sp, #12]
   21674:	str	r3, [sp, #16]
   21678:	mov	r0, r7
   2167c:	mov	r1, sl
   21680:	mov	r2, r9
   21684:	mov	r3, r8
   21688:	bl	21698 <__assert_fail@plt+0x10260>
   2168c:	str	r6, [r4]
   21690:	sub	sp, fp, #28
   21694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2169c:	add	fp, sp, #28
   216a0:	sub	sp, sp, #156	; 0x9c
   216a4:	str	r0, [sp, #80]	; 0x50
   216a8:	ldr	r0, [fp, #12]
   216ac:	mov	r6, r1
   216b0:	mov	r9, r3
   216b4:	str	r2, [fp, #-84]	; 0xffffffac
   216b8:	and	r1, r0, #4
   216bc:	str	r1, [sp, #32]
   216c0:	and	r1, r0, #1
   216c4:	str	r1, [sp, #36]	; 0x24
   216c8:	ubfx	r4, r0, #1, #1
   216cc:	bl	1127c <__ctype_get_mb_cur_max@plt>
   216d0:	str	r0, [sp, #40]	; 0x28
   216d4:	ldr	r0, [fp, #24]
   216d8:	ldr	r7, [fp, #8]
   216dc:	mov	r1, #0
   216e0:	mov	r5, #1
   216e4:	str	r1, [fp, #-56]	; 0xffffffc8
   216e8:	mov	r1, #0
   216ec:	str	r1, [sp, #60]	; 0x3c
   216f0:	str	r0, [sp, #76]	; 0x4c
   216f4:	ldr	r0, [fp, #20]
   216f8:	str	r0, [sp, #72]	; 0x48
   216fc:	mov	r0, #0
   21700:	str	r0, [sp, #56]	; 0x38
   21704:	mov	r0, #0
   21708:	str	r0, [sp, #92]	; 0x5c
   2170c:	mov	r0, #0
   21710:	str	r0, [fp, #-76]	; 0xffffffb4
   21714:	mov	r0, #0
   21718:	cmp	r7, #10
   2171c:	bhi	2269c <__assert_fail@plt+0x11264>
   21720:	add	r1, pc, #28
   21724:	mov	sl, r6
   21728:	ldr	r6, [sp, #80]	; 0x50
   2172c:	ldr	ip, [fp, #-84]	; 0xffffffac
   21730:	mov	r8, #0
   21734:	mov	r2, #1
   21738:	mov	r3, #0
   2173c:	mov	lr, r9
   21740:	ldr	pc, [r1, r7, lsl #2]
   21744:	andeq	r1, r2, r8, lsr #16
   21748:	andeq	r1, r2, r4, asr r8
   2174c:	andeq	r1, r2, r8, lsl r8
   21750:	andeq	r1, r2, r0, lsl r8
   21754:	andeq	r1, r2, r8, asr #16
   21758:	muleq	r2, ip, r8
   2175c:	andeq	r1, r2, r8, lsr r8
   21760:	strdeq	r1, [r2], -r8
   21764:	andeq	r1, r2, r0, ror r7
   21768:	andeq	r1, r2, r0, ror r7
   2176c:	muleq	r2, r8, r7
   21770:	movw	r0, #31474	; 0x7af2
   21774:	mov	r1, r7
   21778:	movt	r0, #3
   2177c:	bl	230a8 <__assert_fail@plt+0x11c70>
   21780:	str	r0, [sp, #72]	; 0x48
   21784:	movw	r0, #26196	; 0x6654
   21788:	mov	r1, r7
   2178c:	movt	r0, #3
   21790:	bl	230a8 <__assert_fail@plt+0x11c70>
   21794:	str	r0, [sp, #76]	; 0x4c
   21798:	str	r5, [fp, #-48]	; 0xffffffd0
   2179c:	mov	r8, #0
   217a0:	mov	r5, r7
   217a4:	tst	r4, #1
   217a8:	bne	217e0 <__assert_fail@plt+0x103a8>
   217ac:	ldr	r0, [sp, #72]	; 0x48
   217b0:	ldrb	r0, [r0]
   217b4:	cmp	r0, #0
   217b8:	beq	217e0 <__assert_fail@plt+0x103a8>
   217bc:	ldr	r1, [sp, #72]	; 0x48
   217c0:	mov	r8, #0
   217c4:	add	r1, r1, #1
   217c8:	cmp	r8, sl
   217cc:	strbcc	r0, [r6, r8]
   217d0:	ldrb	r0, [r1, r8]
   217d4:	add	r8, r8, #1
   217d8:	cmp	r0, #0
   217dc:	bne	217c8 <__assert_fail@plt+0x10390>
   217e0:	ldr	r7, [sp, #76]	; 0x4c
   217e4:	mov	r0, r7
   217e8:	bl	11330 <strlen@plt>
   217ec:	str	r7, [sp, #92]	; 0x5c
   217f0:	mov	r7, r5
   217f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   217f8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   217fc:	str	r0, [fp, #-76]	; 0xffffffb4
   21800:	mov	r2, #1
   21804:	mov	r3, r4
   21808:	mov	lr, r9
   2180c:	b	218f8 <__assert_fail@plt+0x104c0>
   21810:	mov	r0, #1
   21814:	b	21854 <__assert_fail@plt+0x1041c>
   21818:	tst	r4, #1
   2181c:	bne	21854 <__assert_fail@plt+0x1041c>
   21820:	mov	r2, r0
   21824:	b	2187c <__assert_fail@plt+0x10444>
   21828:	mov	r7, #0
   2182c:	mov	r8, #0
   21830:	mov	r2, r0
   21834:	b	218f4 <__assert_fail@plt+0x104bc>
   21838:	mov	r0, #1
   2183c:	mov	r8, #0
   21840:	mov	r7, #5
   21844:	b	218b0 <__assert_fail@plt+0x10478>
   21848:	mov	r2, #1
   2184c:	tst	r4, #1
   21850:	beq	2187c <__assert_fail@plt+0x10444>
   21854:	mov	r1, #1
   21858:	mov	r8, #0
   2185c:	mov	r7, #2
   21860:	mov	r2, r0
   21864:	mov	r3, #1
   21868:	str	r1, [fp, #-76]	; 0xffffffb4
   2186c:	movw	r1, #26196	; 0x6654
   21870:	movt	r1, #3
   21874:	str	r1, [sp, #92]	; 0x5c
   21878:	b	218f8 <__assert_fail@plt+0x104c0>
   2187c:	cmp	sl, #0
   21880:	mov	r8, #1
   21884:	mov	r7, #2
   21888:	movne	r0, #39	; 0x27
   2188c:	strbne	r0, [r6]
   21890:	movw	r0, #26196	; 0x6654
   21894:	movt	r0, #3
   21898:	b	218e8 <__assert_fail@plt+0x104b0>
   2189c:	mov	r7, #5
   218a0:	tst	r4, #1
   218a4:	beq	218cc <__assert_fail@plt+0x10494>
   218a8:	mov	r0, #1
   218ac:	mov	r8, #0
   218b0:	str	r0, [fp, #-76]	; 0xffffffb4
   218b4:	movw	r0, #31472	; 0x7af0
   218b8:	mov	r2, #1
   218bc:	mov	r3, #1
   218c0:	movt	r0, #3
   218c4:	str	r0, [sp, #92]	; 0x5c
   218c8:	b	218f8 <__assert_fail@plt+0x104c0>
   218cc:	cmp	sl, #0
   218d0:	mov	r8, #1
   218d4:	mov	r2, #1
   218d8:	movne	r0, #34	; 0x22
   218dc:	strbne	r0, [r6]
   218e0:	movw	r0, #31472	; 0x7af0
   218e4:	movt	r0, #3
   218e8:	str	r0, [sp, #92]	; 0x5c
   218ec:	mov	r0, #1
   218f0:	str	r0, [fp, #-76]	; 0xffffffb4
   218f4:	mov	r3, #0
   218f8:	ldr	r0, [fp, #16]
   218fc:	str	r3, [fp, #-72]	; 0xffffffb8
   21900:	str	r7, [fp, #-64]	; 0xffffffc0
   21904:	str	r2, [sp, #84]	; 0x54
   21908:	cmp	r0, #0
   2190c:	movwne	r0, #1
   21910:	and	r0, r0, r3
   21914:	str	r0, [fp, #-88]	; 0xffffffa8
   21918:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2191c:	cmp	r0, #0
   21920:	movwne	r0, #1
   21924:	subs	r4, r7, #2
   21928:	mov	r7, #0
   2192c:	and	r1, r0, r3
   21930:	str	r4, [fp, #-80]	; 0xffffffb0
   21934:	and	r1, r2, r1
   21938:	str	r1, [sp, #48]	; 0x30
   2193c:	clz	r1, r4
   21940:	lsr	r1, r1, #5
   21944:	and	r1, r1, r3
   21948:	eor	r3, r3, #1
   2194c:	str	r1, [sp, #64]	; 0x40
   21950:	mov	r1, r4
   21954:	str	r3, [sp, #88]	; 0x58
   21958:	movwne	r1, #1
   2195c:	orr	r3, r1, r3
   21960:	and	r1, r1, r2
   21964:	and	r0, r0, r1
   21968:	str	r3, [sp, #68]	; 0x44
   2196c:	str	r1, [fp, #-68]	; 0xffffffbc
   21970:	str	r0, [fp, #-60]	; 0xffffffc4
   21974:	eor	r0, r2, #1
   21978:	str	r0, [sp, #52]	; 0x34
   2197c:	cmn	lr, #1
   21980:	beq	21990 <__assert_fail@plt+0x10558>
   21984:	cmp	r7, lr
   21988:	bne	2199c <__assert_fail@plt+0x10564>
   2198c:	b	224c4 <__assert_fail@plt+0x1108c>
   21990:	ldrb	r0, [ip, r7]
   21994:	cmp	r0, #0
   21998:	beq	224cc <__assert_fail@plt+0x11094>
   2199c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   219a0:	mov	r9, #0
   219a4:	str	r5, [fp, #-48]	; 0xffffffd0
   219a8:	cmp	r0, #0
   219ac:	beq	219e0 <__assert_fail@plt+0x105a8>
   219b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   219b4:	add	r4, r7, r0
   219b8:	cmp	r0, #2
   219bc:	bcc	219d8 <__assert_fail@plt+0x105a0>
   219c0:	cmn	lr, #1
   219c4:	bne	219d8 <__assert_fail@plt+0x105a0>
   219c8:	mov	r0, ip
   219cc:	bl	11330 <strlen@plt>
   219d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   219d4:	mov	lr, r0
   219d8:	cmp	r4, lr
   219dc:	bls	219e8 <__assert_fail@plt+0x105b0>
   219e0:	mov	r0, #0
   219e4:	b	21a28 <__assert_fail@plt+0x105f0>
   219e8:	ldr	r1, [sp, #92]	; 0x5c
   219ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   219f0:	add	r0, ip, r7
   219f4:	mov	r4, lr
   219f8:	bl	1121c <memcmp@plt>
   219fc:	ldr	r2, [sp, #88]	; 0x58
   21a00:	cmp	r0, #0
   21a04:	mov	r1, r0
   21a08:	movwne	r1, #1
   21a0c:	orr	r1, r1, r2
   21a10:	tst	r1, #1
   21a14:	beq	2255c <__assert_fail@plt+0x11124>
   21a18:	ldr	ip, [fp, #-84]	; 0xffffffac
   21a1c:	clz	r0, r0
   21a20:	mov	lr, r4
   21a24:	lsr	r0, r0, #5
   21a28:	str	r0, [fp, #-52]	; 0xffffffcc
   21a2c:	ldrb	r5, [ip, r7]
   21a30:	cmp	r5, #126	; 0x7e
   21a34:	bhi	21dec <__assert_fail@plt+0x109b4>
   21a38:	add	r3, pc, #16
   21a3c:	mov	r4, #1
   21a40:	mov	r2, #110	; 0x6e
   21a44:	mov	r0, #97	; 0x61
   21a48:	mov	r1, #0
   21a4c:	ldr	pc, [r3, r5, lsl #2]
   21a50:	andeq	r1, r2, r8, ror #25
   21a54:	andeq	r1, r2, ip, ror #27
   21a58:	andeq	r1, r2, ip, ror #27
   21a5c:	andeq	r1, r2, ip, ror #27
   21a60:	andeq	r1, r2, ip, ror #27
   21a64:	andeq	r1, r2, ip, ror #27
   21a68:	andeq	r1, r2, ip, ror #27
   21a6c:	andeq	r1, r2, r0, lsr #29
   21a70:	andeq	r1, r2, r8, asr #25
   21a74:	andeq	r1, r2, r0, asr #25
   21a78:	ldrdeq	r1, [r2], -r4
   21a7c:	andeq	r1, r2, r4, asr sp
   21a80:			; <UNDEFINED> instruction: 0x00021cb8
   21a84:	ldrdeq	r1, [r2], -r0
   21a88:	andeq	r1, r2, ip, ror #27
   21a8c:	andeq	r1, r2, ip, ror #27
   21a90:	andeq	r1, r2, ip, ror #27
   21a94:	andeq	r1, r2, ip, ror #27
   21a98:	andeq	r1, r2, ip, ror #27
   21a9c:	andeq	r1, r2, ip, ror #27
   21aa0:	andeq	r1, r2, ip, ror #27
   21aa4:	andeq	r1, r2, ip, ror #27
   21aa8:	andeq	r1, r2, ip, ror #27
   21aac:	andeq	r1, r2, ip, ror #27
   21ab0:	andeq	r1, r2, ip, ror #27
   21ab4:	andeq	r1, r2, ip, ror #27
   21ab8:	andeq	r1, r2, ip, ror #27
   21abc:	andeq	r1, r2, ip, ror #27
   21ac0:	andeq	r1, r2, ip, ror #27
   21ac4:	andeq	r1, r2, ip, ror #27
   21ac8:	andeq	r1, r2, ip, ror #27
   21acc:	andeq	r1, r2, ip, ror #27
   21ad0:	andeq	r1, r2, r8, asr lr
   21ad4:	andeq	r1, r2, ip, asr lr
   21ad8:	andeq	r1, r2, ip, asr lr
   21adc:	andeq	r1, r2, r0, ror #24
   21ae0:	andeq	r1, r2, ip, asr lr
   21ae4:	andeq	r1, r2, ip, asr #24
   21ae8:	andeq	r1, r2, ip, asr lr
   21aec:	andeq	r1, r2, ip, asr sp
   21af0:	andeq	r1, r2, ip, asr lr
   21af4:	andeq	r1, r2, ip, asr lr
   21af8:	andeq	r1, r2, ip, asr lr
   21afc:	andeq	r1, r2, ip, asr #24
   21b00:	andeq	r1, r2, ip, asr #24
   21b04:	andeq	r1, r2, ip, asr #24
   21b08:	andeq	r1, r2, ip, asr #24
   21b0c:	andeq	r1, r2, ip, asr #24
   21b10:	andeq	r1, r2, ip, asr #24
   21b14:	andeq	r1, r2, ip, asr #24
   21b18:	andeq	r1, r2, ip, asr #24
   21b1c:	andeq	r1, r2, ip, asr #24
   21b20:	andeq	r1, r2, ip, asr #24
   21b24:	andeq	r1, r2, ip, asr #24
   21b28:	andeq	r1, r2, ip, asr #24
   21b2c:	andeq	r1, r2, ip, asr #24
   21b30:	andeq	r1, r2, ip, asr #24
   21b34:	andeq	r1, r2, ip, asr #24
   21b38:	andeq	r1, r2, ip, asr #24
   21b3c:	andeq	r1, r2, ip, asr lr
   21b40:	andeq	r1, r2, ip, asr lr
   21b44:	andeq	r1, r2, ip, asr lr
   21b48:	andeq	r1, r2, ip, asr lr
   21b4c:	andeq	r1, r2, r8, lsr #26
   21b50:	andeq	r1, r2, ip, ror #27
   21b54:	andeq	r1, r2, ip, asr #24
   21b58:	andeq	r1, r2, ip, asr #24
   21b5c:	andeq	r1, r2, ip, asr #24
   21b60:	andeq	r1, r2, ip, asr #24
   21b64:	andeq	r1, r2, ip, asr #24
   21b68:	andeq	r1, r2, ip, asr #24
   21b6c:	andeq	r1, r2, ip, asr #24
   21b70:	andeq	r1, r2, ip, asr #24
   21b74:	andeq	r1, r2, ip, asr #24
   21b78:	andeq	r1, r2, ip, asr #24
   21b7c:	andeq	r1, r2, ip, asr #24
   21b80:	andeq	r1, r2, ip, asr #24
   21b84:	andeq	r1, r2, ip, asr #24
   21b88:	andeq	r1, r2, ip, asr #24
   21b8c:	andeq	r1, r2, ip, asr #24
   21b90:	andeq	r1, r2, ip, asr #24
   21b94:	andeq	r1, r2, ip, asr #24
   21b98:	andeq	r1, r2, ip, asr #24
   21b9c:	andeq	r1, r2, ip, asr #24
   21ba0:	andeq	r1, r2, ip, asr #24
   21ba4:	andeq	r1, r2, ip, asr #24
   21ba8:	andeq	r1, r2, ip, asr #24
   21bac:	andeq	r1, r2, ip, asr #24
   21bb0:	andeq	r1, r2, ip, asr #24
   21bb4:	andeq	r1, r2, ip, asr #24
   21bb8:	andeq	r1, r2, ip, asr #24
   21bbc:	andeq	r1, r2, ip, asr lr
   21bc0:	muleq	r2, r4, ip
   21bc4:	andeq	r1, r2, ip, asr #24
   21bc8:	andeq	r1, r2, ip, asr lr
   21bcc:	andeq	r1, r2, ip, asr #24
   21bd0:	andeq	r1, r2, ip, asr lr
   21bd4:	andeq	r1, r2, ip, asr #24
   21bd8:	andeq	r1, r2, ip, asr #24
   21bdc:	andeq	r1, r2, ip, asr #24
   21be0:	andeq	r1, r2, ip, asr #24
   21be4:	andeq	r1, r2, ip, asr #24
   21be8:	andeq	r1, r2, ip, asr #24
   21bec:	andeq	r1, r2, ip, asr #24
   21bf0:	andeq	r1, r2, ip, asr #24
   21bf4:	andeq	r1, r2, ip, asr #24
   21bf8:	andeq	r1, r2, ip, asr #24
   21bfc:	andeq	r1, r2, ip, asr #24
   21c00:	andeq	r1, r2, ip, asr #24
   21c04:	andeq	r1, r2, ip, asr #24
   21c08:	andeq	r1, r2, ip, asr #24
   21c0c:	andeq	r1, r2, ip, asr #24
   21c10:	andeq	r1, r2, ip, asr #24
   21c14:	andeq	r1, r2, ip, asr #24
   21c18:	andeq	r1, r2, ip, asr #24
   21c1c:	andeq	r1, r2, ip, asr #24
   21c20:	andeq	r1, r2, ip, asr #24
   21c24:	andeq	r1, r2, ip, asr #24
   21c28:	andeq	r1, r2, ip, asr #24
   21c2c:	andeq	r1, r2, ip, asr #24
   21c30:	andeq	r1, r2, ip, asr #24
   21c34:	andeq	r1, r2, ip, asr #24
   21c38:	andeq	r1, r2, ip, asr #24
   21c3c:	andeq	r1, r2, r4, ror ip
   21c40:	andeq	r1, r2, ip, asr lr
   21c44:	andeq	r1, r2, r4, ror ip
   21c48:	andeq	r1, r2, r0, ror #24
   21c4c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   21c50:	cmp	r0, #0
   21c54:	beq	21eb4 <__assert_fail@plt+0x10a7c>
   21c58:	ldr	r0, [fp, #16]
   21c5c:	b	21eb8 <__assert_fail@plt+0x10a80>
   21c60:	mov	r4, #0
   21c64:	cmp	r7, #0
   21c68:	beq	21e58 <__assert_fail@plt+0x10a20>
   21c6c:	mov	r9, #0
   21c70:	b	21c4c <__assert_fail@plt+0x10814>
   21c74:	mov	r4, #0
   21c78:	cmn	lr, #1
   21c7c:	beq	21e3c <__assert_fail@plt+0x10a04>
   21c80:	cmp	r7, #0
   21c84:	bne	21c6c <__assert_fail@plt+0x10834>
   21c88:	cmp	lr, #1
   21c8c:	beq	21e58 <__assert_fail@plt+0x10a20>
   21c90:	b	21c6c <__assert_fail@plt+0x10834>
   21c94:	ldr	r0, [fp, #-64]	; 0xffffffc0
   21c98:	cmp	r0, #2
   21c9c:	bne	21e7c <__assert_fail@plt+0x10a44>
   21ca0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   21ca4:	tst	r0, #1
   21ca8:	bne	22578 <__assert_fail@plt+0x11140>
   21cac:	mov	r9, #0
   21cb0:	mov	r0, #92	; 0x5c
   21cb4:	b	21e90 <__assert_fail@plt+0x10a58>
   21cb8:	mov	r0, #102	; 0x66
   21cbc:	b	21ea0 <__assert_fail@plt+0x10a68>
   21cc0:	mov	r2, #116	; 0x74
   21cc4:	b	21cd4 <__assert_fail@plt+0x1089c>
   21cc8:	mov	r0, #98	; 0x62
   21ccc:	b	21ea0 <__assert_fail@plt+0x10a68>
   21cd0:	mov	r2, #114	; 0x72
   21cd4:	ldr	r0, [sp, #68]	; 0x44
   21cd8:	tst	r0, #1
   21cdc:	mov	r0, r2
   21ce0:	bne	21ea0 <__assert_fail@plt+0x10a68>
   21ce4:	b	22578 <__assert_fail@plt+0x11140>
   21ce8:	ldr	r0, [sp, #84]	; 0x54
   21cec:	tst	r0, #1
   21cf0:	beq	21f90 <__assert_fail@plt+0x10b58>
   21cf4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   21cf8:	tst	r0, #1
   21cfc:	bne	22688 <__assert_fail@plt+0x11250>
   21d00:	ldr	r0, [fp, #-64]	; 0xffffffc0
   21d04:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21d08:	cmp	r0, #2
   21d0c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   21d10:	movwne	r0, #1
   21d14:	orr	r0, r0, r2
   21d18:	tst	r0, #1
   21d1c:	beq	22360 <__assert_fail@plt+0x10f28>
   21d20:	mov	r0, r8
   21d24:	b	22394 <__assert_fail@plt+0x10f5c>
   21d28:	ldr	r0, [fp, #-64]	; 0xffffffc0
   21d2c:	mov	r9, #0
   21d30:	mov	r5, #63	; 0x3f
   21d34:	cmp	r0, #5
   21d38:	beq	22144 <__assert_fail@plt+0x10d0c>
   21d3c:	cmp	r0, #2
   21d40:	bne	221e8 <__assert_fail@plt+0x10db0>
   21d44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   21d48:	tst	r0, #1
   21d4c:	beq	221ec <__assert_fail@plt+0x10db4>
   21d50:	b	22578 <__assert_fail@plt+0x11140>
   21d54:	mov	r0, #118	; 0x76
   21d58:	b	21ea0 <__assert_fail@plt+0x10a68>
   21d5c:	mov	r0, #1
   21d60:	mov	r5, #39	; 0x27
   21d64:	str	r0, [sp, #60]	; 0x3c
   21d68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   21d6c:	cmp	r0, #2
   21d70:	bne	21de4 <__assert_fail@plt+0x109ac>
   21d74:	ldr	r0, [fp, #-72]	; 0xffffffb8
   21d78:	tst	r0, #1
   21d7c:	bne	22578 <__assert_fail@plt+0x11140>
   21d80:	ldr	r2, [sp, #56]	; 0x38
   21d84:	clz	r1, sl
   21d88:	mov	r9, #0
   21d8c:	lsr	r1, r1, #5
   21d90:	cmp	r2, #0
   21d94:	mov	r0, r2
   21d98:	movwne	r0, #1
   21d9c:	orrs	r0, r0, r1
   21da0:	moveq	r2, sl
   21da4:	moveq	sl, r0
   21da8:	cmp	r8, sl
   21dac:	str	r2, [sp, #56]	; 0x38
   21db0:	movcc	r0, #39	; 0x27
   21db4:	strbcc	r0, [r6, r8]
   21db8:	add	r0, r8, #1
   21dbc:	cmp	r0, sl
   21dc0:	movcc	r1, #92	; 0x5c
   21dc4:	strbcc	r1, [r6, r0]
   21dc8:	add	r0, r8, #2
   21dcc:	add	r8, r8, #3
   21dd0:	cmp	r0, sl
   21dd4:	movcc	r1, #39	; 0x27
   21dd8:	strbcc	r1, [r6, r0]
   21ddc:	mov	r0, #0
   21de0:	str	r0, [fp, #-56]	; 0xffffffc8
   21de4:	mov	r4, #1
   21de8:	b	21c4c <__assert_fail@plt+0x10814>
   21dec:	ldr	r0, [sp, #40]	; 0x28
   21df0:	cmp	r0, #1
   21df4:	bne	21fbc <__assert_fail@plt+0x10b84>
   21df8:	str	lr, [sp, #28]
   21dfc:	bl	11318 <__ctype_b_loc@plt>
   21e00:	ldr	r0, [r0]
   21e04:	ldr	ip, [fp, #-84]	; 0xffffffac
   21e08:	mov	r1, #1
   21e0c:	add	r0, r0, r5, lsl #1
   21e10:	ldrb	r0, [r0, #1]
   21e14:	ubfx	r4, r0, #6, #1
   21e18:	ldr	r0, [sp, #52]	; 0x34
   21e1c:	mov	r2, r1
   21e20:	cmp	r1, #1
   21e24:	orr	r0, r4, r0
   21e28:	bhi	221f4 <__assert_fail@plt+0x10dbc>
   21e2c:	tst	r0, #1
   21e30:	beq	221f4 <__assert_fail@plt+0x10dbc>
   21e34:	ldr	lr, [sp, #28]
   21e38:	b	21c4c <__assert_fail@plt+0x10814>
   21e3c:	cmp	r7, #0
   21e40:	ldrbeq	r0, [ip, #1]
   21e44:	cmpeq	r0, #0
   21e48:	beq	21e58 <__assert_fail@plt+0x10a20>
   21e4c:	mvn	lr, #0
   21e50:	mov	r9, #0
   21e54:	b	21c4c <__assert_fail@plt+0x10814>
   21e58:	mov	r1, #1
   21e5c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   21e60:	cmp	r0, #2
   21e64:	bne	21e74 <__assert_fail@plt+0x10a3c>
   21e68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   21e6c:	tst	r0, #1
   21e70:	bne	22578 <__assert_fail@plt+0x11140>
   21e74:	mov	r4, r1
   21e78:	b	21c4c <__assert_fail@plt+0x10814>
   21e7c:	ldr	r1, [sp, #48]	; 0x30
   21e80:	mov	r9, #0
   21e84:	mov	r0, #92	; 0x5c
   21e88:	cmp	r1, #0
   21e8c:	beq	21ea0 <__assert_fail@plt+0x10a68>
   21e90:	mov	r4, #0
   21e94:	cmp	r9, #0
   21e98:	beq	2242c <__assert_fail@plt+0x10ff4>
   21e9c:	b	22468 <__assert_fail@plt+0x11030>
   21ea0:	ldr	r1, [sp, #84]	; 0x54
   21ea4:	mov	r4, #0
   21ea8:	mov	r9, #0
   21eac:	tst	r1, #1
   21eb0:	bne	21ef0 <__assert_fail@plt+0x10ab8>
   21eb4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   21eb8:	cmp	r0, #0
   21ebc:	mov	r0, r5
   21ec0:	beq	21ee4 <__assert_fail@plt+0x10aac>
   21ec4:	ldr	r1, [fp, #16]
   21ec8:	ubfx	r0, r5, #5, #3
   21ecc:	mov	r2, #1
   21ed0:	ldr	r0, [r1, r0, lsl #2]
   21ed4:	and	r1, r5, #31
   21ed8:	tst	r0, r2, lsl r1
   21edc:	mov	r0, r5
   21ee0:	bne	21ef0 <__assert_fail@plt+0x10ab8>
   21ee4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   21ee8:	cmp	r1, #0
   21eec:	beq	22424 <__assert_fail@plt+0x10fec>
   21ef0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   21ef4:	tst	r1, #1
   21ef8:	bne	22550 <__assert_fail@plt+0x11118>
   21efc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   21f00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21f04:	cmp	r1, #2
   21f08:	ldr	r1, [fp, #-80]	; 0xffffffb0
   21f0c:	movwne	r1, #1
   21f10:	orr	r1, r1, r2
   21f14:	tst	r1, #1
   21f18:	beq	21f24 <__assert_fail@plt+0x10aec>
   21f1c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   21f20:	b	21f60 <__assert_fail@plt+0x10b28>
   21f24:	cmp	r8, sl
   21f28:	ldr	r5, [fp, #-48]	; 0xffffffd0
   21f2c:	movcc	r1, #39	; 0x27
   21f30:	strbcc	r1, [r6, r8]
   21f34:	add	r1, r8, #1
   21f38:	cmp	r1, sl
   21f3c:	movcc	r2, #36	; 0x24
   21f40:	strbcc	r2, [r6, r1]
   21f44:	add	r1, r8, #2
   21f48:	add	r8, r8, #3
   21f4c:	cmp	r1, sl
   21f50:	movcc	r2, #39	; 0x27
   21f54:	strbcc	r2, [r6, r1]
   21f58:	mov	r1, #1
   21f5c:	str	r1, [fp, #-56]	; 0xffffffc8
   21f60:	cmp	r8, sl
   21f64:	movcc	r1, #92	; 0x5c
   21f68:	strbcc	r1, [r6, r8]
   21f6c:	add	r8, r8, #1
   21f70:	cmp	r8, sl
   21f74:	and	r5, r5, r4
   21f78:	add	r7, r7, #1
   21f7c:	strbcc	r0, [r6, r8]
   21f80:	add	r8, r8, #1
   21f84:	cmn	lr, #1
   21f88:	bne	21984 <__assert_fail@plt+0x1054c>
   21f8c:	b	21990 <__assert_fail@plt+0x10558>
   21f90:	ldr	r0, [sp, #36]	; 0x24
   21f94:	mov	r4, #0
   21f98:	mov	r9, #0
   21f9c:	mov	r5, #0
   21fa0:	cmp	r0, #0
   21fa4:	beq	21eb4 <__assert_fail@plt+0x10a7c>
   21fa8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   21fac:	add	r7, r7, #1
   21fb0:	cmn	lr, #1
   21fb4:	bne	21984 <__assert_fail@plt+0x1054c>
   21fb8:	b	21990 <__assert_fail@plt+0x10558>
   21fbc:	mov	r0, #0
   21fc0:	cmn	lr, #1
   21fc4:	str	r0, [fp, #-36]	; 0xffffffdc
   21fc8:	str	r0, [fp, #-40]	; 0xffffffd8
   21fcc:	bne	21fe0 <__assert_fail@plt+0x10ba8>
   21fd0:	mov	r0, ip
   21fd4:	bl	11330 <strlen@plt>
   21fd8:	ldr	ip, [fp, #-84]	; 0xffffffac
   21fdc:	mov	lr, r0
   21fe0:	add	r0, ip, r7
   21fe4:	mov	r4, #1
   21fe8:	mov	r6, #0
   21fec:	str	lr, [sp, #28]
   21ff0:	str	r0, [sp, #24]
   21ff4:	sub	r0, fp, #40	; 0x28
   21ff8:	mov	r3, r0
   21ffc:	str	r6, [sp, #44]	; 0x2c
   22000:	add	r6, r6, r7
   22004:	sub	r0, fp, #44	; 0x2c
   22008:	add	r1, ip, r6
   2200c:	sub	r2, lr, r6
   22010:	bl	35998 <__assert_fail@plt+0x24560>
   22014:	cmp	r0, #0
   22018:	beq	224b0 <__assert_fail@plt+0x11078>
   2201c:	cmn	r0, #1
   22020:	beq	22470 <__assert_fail@plt+0x11038>
   22024:	ldr	lr, [sp, #28]
   22028:	cmn	r0, #2
   2202c:	beq	22478 <__assert_fail@plt+0x11040>
   22030:	ldr	r2, [sp, #64]	; 0x40
   22034:	cmp	r0, #2
   22038:	mov	r1, #0
   2203c:	movwcc	r1, #1
   22040:	eor	r2, r2, #1
   22044:	orrs	r1, r2, r1
   22048:	bne	22108 <__assert_fail@plt+0x10cd0>
   2204c:	ldr	r1, [sp, #44]	; 0x2c
   22050:	ldr	r2, [sp, #24]
   22054:	add	r1, r2, r1
   22058:	mov	r2, #1
   2205c:	ldrb	r3, [r1, r2]
   22060:	sub	r3, r3, #91	; 0x5b
   22064:	cmp	r3, #33	; 0x21
   22068:	bhi	220fc <__assert_fail@plt+0x10cc4>
   2206c:	add	r6, pc, #0
   22070:	ldr	pc, [r6, r3, lsl #2]
   22074:	andeq	r2, r2, r0, ror r5
   22078:	andeq	r2, r2, r0, ror r5
   2207c:	strdeq	r2, [r2], -ip
   22080:	andeq	r2, r2, r0, ror r5
   22084:	strdeq	r2, [r2], -ip
   22088:	andeq	r2, r2, r0, ror r5
   2208c:	strdeq	r2, [r2], -ip
   22090:	strdeq	r2, [r2], -ip
   22094:	strdeq	r2, [r2], -ip
   22098:	strdeq	r2, [r2], -ip
   2209c:	strdeq	r2, [r2], -ip
   220a0:	strdeq	r2, [r2], -ip
   220a4:	strdeq	r2, [r2], -ip
   220a8:	strdeq	r2, [r2], -ip
   220ac:	strdeq	r2, [r2], -ip
   220b0:	strdeq	r2, [r2], -ip
   220b4:	strdeq	r2, [r2], -ip
   220b8:	strdeq	r2, [r2], -ip
   220bc:	strdeq	r2, [r2], -ip
   220c0:	strdeq	r2, [r2], -ip
   220c4:	strdeq	r2, [r2], -ip
   220c8:	strdeq	r2, [r2], -ip
   220cc:	strdeq	r2, [r2], -ip
   220d0:	strdeq	r2, [r2], -ip
   220d4:	strdeq	r2, [r2], -ip
   220d8:	strdeq	r2, [r2], -ip
   220dc:	strdeq	r2, [r2], -ip
   220e0:	strdeq	r2, [r2], -ip
   220e4:	strdeq	r2, [r2], -ip
   220e8:	strdeq	r2, [r2], -ip
   220ec:	strdeq	r2, [r2], -ip
   220f0:	strdeq	r2, [r2], -ip
   220f4:	strdeq	r2, [r2], -ip
   220f8:	andeq	r2, r2, r0, ror r5
   220fc:	add	r2, r2, #1
   22100:	cmp	r2, r0
   22104:	bcc	2205c <__assert_fail@plt+0x10c24>
   22108:	ldr	r6, [sp, #44]	; 0x2c
   2210c:	add	r6, r0, r6
   22110:	ldr	r0, [fp, #-44]	; 0xffffffd4
   22114:	bl	11258 <iswprint@plt>
   22118:	cmp	r0, #0
   2211c:	movwne	r0, #1
   22120:	and	r4, r4, r0
   22124:	sub	r0, fp, #40	; 0x28
   22128:	bl	11210 <mbsinit@plt>
   2212c:	ldr	lr, [sp, #28]
   22130:	ldr	ip, [fp, #-84]	; 0xffffffac
   22134:	sub	r3, fp, #40	; 0x28
   22138:	cmp	r0, #0
   2213c:	beq	21ffc <__assert_fail@plt+0x10bc4>
   22140:	b	224b8 <__assert_fail@plt+0x11080>
   22144:	ldr	r0, [sp, #32]
   22148:	cmp	r0, #0
   2214c:	beq	221e8 <__assert_fail@plt+0x10db0>
   22150:	add	r0, r7, #2
   22154:	cmp	r0, lr
   22158:	bcs	221e8 <__assert_fail@plt+0x10db0>
   2215c:	add	r1, ip, r7
   22160:	ldrb	r1, [r1, #1]
   22164:	cmp	r1, #63	; 0x3f
   22168:	bne	221e8 <__assert_fail@plt+0x10db0>
   2216c:	ldrb	r5, [ip, r0]
   22170:	sub	r1, r5, #33	; 0x21
   22174:	cmp	r1, #29
   22178:	bhi	221e8 <__assert_fail@plt+0x10db0>
   2217c:	movw	r3, #20929	; 0x51c1
   22180:	mov	r2, #1
   22184:	movt	r3, #14336	; 0x3800
   22188:	tst	r3, r2, lsl r1
   2218c:	beq	221e8 <__assert_fail@plt+0x10db0>
   22190:	ldr	r1, [fp, #-72]	; 0xffffffb8
   22194:	tst	r1, #1
   22198:	bne	22690 <__assert_fail@plt+0x11258>
   2219c:	cmp	r8, sl
   221a0:	mov	r7, r0
   221a4:	mov	r4, #0
   221a8:	movcc	r1, #63	; 0x3f
   221ac:	strbcc	r1, [r6, r8]
   221b0:	add	r1, r8, #1
   221b4:	cmp	r1, sl
   221b8:	movcc	r2, #34	; 0x22
   221bc:	strbcc	r2, [r6, r1]
   221c0:	add	r1, r8, #2
   221c4:	cmp	r1, sl
   221c8:	movcc	r2, #34	; 0x22
   221cc:	strbcc	r2, [r6, r1]
   221d0:	add	r1, r8, #3
   221d4:	add	r8, r8, #4
   221d8:	cmp	r1, sl
   221dc:	movcc	r2, #63	; 0x3f
   221e0:	strbcc	r2, [r6, r1]
   221e4:	b	21c4c <__assert_fail@plt+0x10814>
   221e8:	mov	r5, #63	; 0x3f
   221ec:	mov	r4, #0
   221f0:	b	21c4c <__assert_fail@plt+0x10814>
   221f4:	add	r1, r2, r7
   221f8:	ldr	lr, [sp, #28]
   221fc:	mov	r3, #0
   22200:	str	r1, [sp, #44]	; 0x2c
   22204:	add	r1, r7, #1
   22208:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2220c:	tst	r0, #1
   22210:	bne	222e4 <__assert_fail@plt+0x10eac>
   22214:	ldr	r2, [fp, #-72]	; 0xffffffb8
   22218:	tst	r2, #1
   2221c:	bne	225d8 <__assert_fail@plt+0x111a0>
   22220:	ldr	r3, [fp, #-80]	; 0xffffffb0
   22224:	ldr	r2, [fp, #-56]	; 0xffffffc8
   22228:	cmp	r7, #2
   2222c:	movwne	r3, #1
   22230:	orr	r3, r3, r2
   22234:	tst	r3, #1
   22238:	bne	22274 <__assert_fail@plt+0x10e3c>
   2223c:	cmp	r8, sl
   22240:	add	r3, r8, #1
   22244:	movcc	r2, #39	; 0x27
   22248:	strbcc	r2, [r6, r8]
   2224c:	cmp	r3, sl
   22250:	movcc	r2, #36	; 0x24
   22254:	strbcc	r2, [r6, r3]
   22258:	add	r3, r8, #2
   2225c:	add	r8, r8, #3
   22260:	cmp	r3, sl
   22264:	movcc	r2, #39	; 0x27
   22268:	strbcc	r2, [r6, r3]
   2226c:	mov	r2, #1
   22270:	str	r2, [fp, #-56]	; 0xffffffc8
   22274:	cmp	r8, sl
   22278:	movcc	r3, #92	; 0x5c
   2227c:	strbcc	r3, [r6, r8]
   22280:	add	r3, r8, #1
   22284:	cmp	r3, sl
   22288:	andcc	r7, r5, #192	; 0xc0
   2228c:	movcc	r2, #48	; 0x30
   22290:	orrcc	r7, r2, r7, lsr #6
   22294:	strbcc	r7, [r6, r3]
   22298:	add	r3, r8, #2
   2229c:	add	r8, r8, #3
   222a0:	cmp	r3, sl
   222a4:	lsrcc	r7, r5, #3
   222a8:	movcc	r2, #6
   222ac:	bficc	r7, r2, #3, #29
   222b0:	mov	r2, #6
   222b4:	strbcc	r7, [r6, r3]
   222b8:	bfi	r5, r2, #3, #29
   222bc:	mov	r3, #1
   222c0:	b	22308 <__assert_fail@plt+0x10ed0>
   222c4:	cmp	r8, sl
   222c8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   222cc:	strbcc	r5, [r6, r8]
   222d0:	add	r8, r8, #1
   222d4:	ldrb	r5, [ip, r1]
   222d8:	add	r1, r1, #1
   222dc:	tst	r0, #1
   222e0:	beq	22214 <__assert_fail@plt+0x10ddc>
   222e4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   222e8:	tst	r2, #1
   222ec:	beq	22300 <__assert_fail@plt+0x10ec8>
   222f0:	cmp	r8, sl
   222f4:	movcc	r7, #92	; 0x5c
   222f8:	strbcc	r7, [r6, r8]
   222fc:	add	r8, r8, #1
   22300:	mov	r2, #0
   22304:	str	r2, [fp, #-52]	; 0xffffffcc
   22308:	ldr	r2, [sp, #44]	; 0x2c
   2230c:	and	r9, r3, #1
   22310:	cmp	r2, r1
   22314:	bls	22414 <__assert_fail@plt+0x10fdc>
   22318:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2231c:	cmp	r9, #0
   22320:	movwne	r9, #1
   22324:	mvn	r7, r2
   22328:	orr	r7, r7, r9
   2232c:	tst	r7, #1
   22330:	bne	222c4 <__assert_fail@plt+0x10e8c>
   22334:	cmp	r8, sl
   22338:	movcc	r7, #39	; 0x27
   2233c:	strbcc	r7, [r6, r8]
   22340:	add	r7, r8, #1
   22344:	add	r8, r8, #2
   22348:	cmp	r7, sl
   2234c:	movcc	r2, #39	; 0x27
   22350:	strbcc	r2, [r6, r7]
   22354:	mov	r2, #0
   22358:	str	r2, [fp, #-56]	; 0xffffffc8
   2235c:	b	222c4 <__assert_fail@plt+0x10e8c>
   22360:	cmp	r8, sl
   22364:	mov	r2, #1
   22368:	movcc	r0, #39	; 0x27
   2236c:	strbcc	r0, [r6, r8]
   22370:	add	r0, r8, #1
   22374:	cmp	r0, sl
   22378:	movcc	r1, #36	; 0x24
   2237c:	strbcc	r1, [r6, r0]
   22380:	add	r0, r8, #2
   22384:	cmp	r0, sl
   22388:	movcc	r1, #39	; 0x27
   2238c:	strbcc	r1, [r6, r0]
   22390:	add	r0, r8, #3
   22394:	cmp	r0, sl
   22398:	add	r8, r0, #1
   2239c:	str	r2, [fp, #-56]	; 0xffffffc8
   223a0:	movcc	r1, #92	; 0x5c
   223a4:	strbcc	r1, [r6, r0]
   223a8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   223ac:	cmp	r1, #2
   223b0:	beq	22404 <__assert_fail@plt+0x10fcc>
   223b4:	add	r1, r7, #1
   223b8:	mov	r4, #0
   223bc:	mov	r9, #1
   223c0:	mov	r5, #48	; 0x30
   223c4:	cmp	r1, lr
   223c8:	bcs	21c4c <__assert_fail@plt+0x10814>
   223cc:	ldrb	r1, [ip, r1]
   223d0:	sub	r1, r1, #48	; 0x30
   223d4:	uxtb	r1, r1
   223d8:	cmp	r1, #9
   223dc:	bhi	21c4c <__assert_fail@plt+0x10814>
   223e0:	cmp	r8, sl
   223e4:	movcc	r1, #48	; 0x30
   223e8:	strbcc	r1, [r6, r8]
   223ec:	add	r1, r0, #2
   223f0:	add	r8, r0, #3
   223f4:	cmp	r1, sl
   223f8:	movcc	r2, #48	; 0x30
   223fc:	strbcc	r2, [r6, r1]
   22400:	b	21c4c <__assert_fail@plt+0x10814>
   22404:	mov	r0, #48	; 0x30
   22408:	mov	r9, #1
   2240c:	mov	r4, #0
   22410:	b	21ee4 <__assert_fail@plt+0x10aac>
   22414:	cmp	r9, #0
   22418:	sub	r7, r1, #1
   2241c:	mov	r0, r5
   22420:	movwne	r9, #1
   22424:	cmp	r9, #0
   22428:	bne	22468 <__assert_fail@plt+0x11030>
   2242c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   22430:	tst	r1, #1
   22434:	beq	22468 <__assert_fail@plt+0x11030>
   22438:	cmp	r8, sl
   2243c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   22440:	movcc	r1, #39	; 0x27
   22444:	strbcc	r1, [r6, r8]
   22448:	add	r1, r8, #1
   2244c:	add	r8, r8, #2
   22450:	cmp	r1, sl
   22454:	movcc	r2, #39	; 0x27
   22458:	strbcc	r2, [r6, r1]
   2245c:	mov	r1, #0
   22460:	str	r1, [fp, #-56]	; 0xffffffc8
   22464:	b	21f70 <__assert_fail@plt+0x10b38>
   22468:	ldr	r5, [fp, #-48]	; 0xffffffd0
   2246c:	b	21f70 <__assert_fail@plt+0x10b38>
   22470:	mov	r4, #0
   22474:	b	224b0 <__assert_fail@plt+0x11078>
   22478:	mov	r4, #0
   2247c:	cmp	lr, r6
   22480:	bls	224b0 <__assert_fail@plt+0x11078>
   22484:	ldr	ip, [fp, #-84]	; 0xffffffac
   22488:	ldr	r6, [sp, #44]	; 0x2c
   2248c:	ldr	r0, [sp, #24]
   22490:	ldrb	r0, [r0, r6]
   22494:	cmp	r0, #0
   22498:	beq	224b8 <__assert_fail@plt+0x11080>
   2249c:	add	r6, r6, #1
   224a0:	add	r0, r7, r6
   224a4:	cmp	r0, lr
   224a8:	bcc	2248c <__assert_fail@plt+0x11054>
   224ac:	b	224b8 <__assert_fail@plt+0x11080>
   224b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   224b4:	ldr	r6, [sp, #44]	; 0x2c
   224b8:	mov	r1, r6
   224bc:	ldr	r6, [sp, #80]	; 0x50
   224c0:	b	21e18 <__assert_fail@plt+0x109e0>
   224c4:	mov	lr, r7
   224c8:	b	224d0 <__assert_fail@plt+0x11098>
   224cc:	mvn	lr, #0
   224d0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   224d4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   224d8:	eor	r0, r7, #2
   224dc:	orr	r0, r0, r8
   224e0:	clz	r0, r0
   224e4:	lsr	r0, r0, #5
   224e8:	tst	r1, r0
   224ec:	bne	22578 <__assert_fail@plt+0x11140>
   224f0:	mov	r0, r1
   224f4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   224f8:	cmp	r7, #2
   224fc:	movwne	r1, #1
   22500:	orr	r0, r0, r1
   22504:	tst	r0, #1
   22508:	ldreq	r0, [sp, #60]	; 0x3c
   2250c:	eoreq	r0, r0, #1
   22510:	tsteq	r0, #1
   22514:	bne	22624 <__assert_fail@plt+0x111ec>
   22518:	mov	r9, lr
   2251c:	tst	r5, #1
   22520:	bne	225e0 <__assert_fail@plt+0x111a8>
   22524:	ldr	r6, [sp, #56]	; 0x38
   22528:	mov	r4, #0
   2252c:	cmp	r6, #0
   22530:	beq	2261c <__assert_fail@plt+0x111e4>
   22534:	ldr	r0, [sp, #84]	; 0x54
   22538:	mov	r1, #0
   2253c:	cmp	sl, #0
   22540:	mov	r5, #0
   22544:	str	r1, [fp, #-72]	; 0xffffffb8
   22548:	beq	21718 <__assert_fail@plt+0x102e0>
   2254c:	b	22624 <__assert_fail@plt+0x111ec>
   22550:	ldr	r7, [fp, #-64]	; 0xffffffc0
   22554:	ldr	r2, [sp, #84]	; 0x54
   22558:	b	22580 <__assert_fail@plt+0x11148>
   2255c:	ldr	ip, [fp, #-84]	; 0xffffffac
   22560:	mov	r2, #1
   22564:	mov	lr, r4
   22568:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2256c:	b	22580 <__assert_fail@plt+0x11148>
   22570:	ldr	r6, [sp, #80]	; 0x50
   22574:	ldr	ip, [fp, #-84]	; 0xffffffac
   22578:	ldr	r2, [sp, #84]	; 0x54
   2257c:	mov	r7, #2
   22580:	mov	r0, #0
   22584:	ldr	r1, [fp, #12]
   22588:	tst	r2, #1
   2258c:	mov	r2, r7
   22590:	mov	r3, lr
   22594:	str	r0, [sp, #8]
   22598:	ldr	r0, [sp, #72]	; 0x48
   2259c:	movwne	r2, #4
   225a0:	cmp	r7, #2
   225a4:	movne	r2, r7
   225a8:	str	r2, [sp]
   225ac:	mov	r2, ip
   225b0:	bic	r1, r1, #2
   225b4:	str	r0, [sp, #12]
   225b8:	ldr	r0, [sp, #76]	; 0x4c
   225bc:	str	r1, [sp, #4]
   225c0:	mov	r1, sl
   225c4:	str	r0, [sp, #16]
   225c8:	mov	r0, r6
   225cc:	bl	21698 <__assert_fail@plt+0x10260>
   225d0:	mov	r8, r0
   225d4:	b	2267c <__assert_fail@plt+0x11244>
   225d8:	ldr	r2, [sp, #84]	; 0x54
   225dc:	b	22580 <__assert_fail@plt+0x11148>
   225e0:	mov	r0, #5
   225e4:	ldr	r1, [sp, #56]	; 0x38
   225e8:	ldr	r2, [fp, #-84]	; 0xffffffac
   225ec:	mov	r3, r9
   225f0:	str	r0, [sp]
   225f4:	ldr	r0, [fp, #12]
   225f8:	str	r0, [sp, #4]
   225fc:	ldr	r0, [fp, #16]
   22600:	str	r0, [sp, #8]
   22604:	ldr	r0, [sp, #72]	; 0x48
   22608:	str	r0, [sp, #12]
   2260c:	ldr	r0, [sp, #76]	; 0x4c
   22610:	str	r0, [sp, #16]
   22614:	ldr	r0, [sp, #80]	; 0x50
   22618:	b	225cc <__assert_fail@plt+0x11194>
   2261c:	mov	r0, #0
   22620:	str	r0, [fp, #-72]	; 0xffffffb8
   22624:	ldr	r1, [sp, #92]	; 0x5c
   22628:	cmp	r1, #0
   2262c:	beq	2266c <__assert_fail@plt+0x11234>
   22630:	ldr	r0, [fp, #-72]	; 0xffffffb8
   22634:	ldr	r2, [sp, #80]	; 0x50
   22638:	tst	r0, #1
   2263c:	bne	22670 <__assert_fail@plt+0x11238>
   22640:	ldrb	r0, [r1]
   22644:	cmp	r0, #0
   22648:	beq	22670 <__assert_fail@plt+0x11238>
   2264c:	add	r1, r1, #1
   22650:	cmp	r8, sl
   22654:	strbcc	r0, [r2, r8]
   22658:	add	r8, r8, #1
   2265c:	ldrb	r0, [r1], #1
   22660:	cmp	r0, #0
   22664:	bne	22650 <__assert_fail@plt+0x11218>
   22668:	b	22670 <__assert_fail@plt+0x11238>
   2266c:	ldr	r2, [sp, #80]	; 0x50
   22670:	cmp	r8, sl
   22674:	movcc	r0, #0
   22678:	strbcc	r0, [r2, r8]
   2267c:	mov	r0, r8
   22680:	sub	sp, fp, #28
   22684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22688:	mov	r2, #1
   2268c:	b	22568 <__assert_fail@plt+0x11130>
   22690:	ldr	r2, [sp, #84]	; 0x54
   22694:	mov	r7, #5
   22698:	b	22580 <__assert_fail@plt+0x11148>
   2269c:	bl	11420 <abort@plt>
   226a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226a4:	add	fp, sp, #28
   226a8:	sub	sp, sp, #28
   226ac:	movw	r5, #37280	; 0x91a0
   226b0:	cmp	r2, #0
   226b4:	mov	r4, r1
   226b8:	mov	r7, r0
   226bc:	str	r0, [sp, #20]
   226c0:	movt	r5, #4
   226c4:	movne	r5, r2
   226c8:	bl	11348 <__errno_location@plt>
   226cc:	mov	sl, r0
   226d0:	ldm	r5, {r0, r1}
   226d4:	ldr	r2, [r5, #40]	; 0x28
   226d8:	ldr	r3, [r5, #44]	; 0x2c
   226dc:	add	r9, r5, #8
   226e0:	ldr	r6, [sl]
   226e4:	orr	r8, r1, #1
   226e8:	mov	r1, #0
   226ec:	str	r6, [sp, #24]
   226f0:	stm	sp, {r0, r8, r9}
   226f4:	str	r2, [sp, #12]
   226f8:	str	r3, [sp, #16]
   226fc:	mov	r0, #0
   22700:	mov	r2, r7
   22704:	mov	r3, r4
   22708:	mov	r6, r4
   2270c:	bl	21698 <__assert_fail@plt+0x10260>
   22710:	add	r7, r0, #1
   22714:	mov	r0, r7
   22718:	bl	34f84 <__assert_fail@plt+0x23b4c>
   2271c:	mov	r4, r0
   22720:	ldr	r0, [r5]
   22724:	ldr	r2, [r5, #44]	; 0x2c
   22728:	ldr	r1, [r5, #40]	; 0x28
   2272c:	mov	r3, r6
   22730:	stm	sp, {r0, r8, r9}
   22734:	str	r2, [sp, #16]
   22738:	str	r1, [sp, #12]
   2273c:	mov	r0, r4
   22740:	mov	r1, r7
   22744:	ldr	r2, [sp, #20]
   22748:	bl	21698 <__assert_fail@plt+0x10260>
   2274c:	ldr	r0, [sp, #24]
   22750:	str	r0, [sl]
   22754:	mov	r0, r4
   22758:	sub	sp, fp, #28
   2275c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22764:	add	fp, sp, #28
   22768:	sub	sp, sp, #36	; 0x24
   2276c:	movw	r8, #37280	; 0x91a0
   22770:	cmp	r3, #0
   22774:	mov	r4, r2
   22778:	str	r2, [sp, #24]
   2277c:	mov	r5, r1
   22780:	mov	r6, r0
   22784:	str	r0, [sp, #20]
   22788:	movt	r8, #4
   2278c:	movne	r8, r3
   22790:	bl	11348 <__errno_location@plt>
   22794:	str	r0, [sp, #28]
   22798:	cmp	r4, #0
   2279c:	add	sl, r8, #8
   227a0:	ldm	r8, {r3, r9}
   227a4:	ldr	r7, [r0]
   227a8:	ldr	r1, [r8, #40]	; 0x28
   227ac:	ldr	r2, [r8, #44]	; 0x2c
   227b0:	mov	r0, #0
   227b4:	orreq	r9, r9, #1
   227b8:	str	r7, [sp, #32]
   227bc:	mov	r7, r5
   227c0:	stm	sp, {r3, r9, sl}
   227c4:	str	r1, [sp, #12]
   227c8:	str	r2, [sp, #16]
   227cc:	mov	r1, #0
   227d0:	mov	r2, r6
   227d4:	mov	r3, r5
   227d8:	bl	21698 <__assert_fail@plt+0x10260>
   227dc:	add	r4, r0, #1
   227e0:	mov	r5, r0
   227e4:	mov	r0, r4
   227e8:	bl	34f84 <__assert_fail@plt+0x23b4c>
   227ec:	mov	r6, r0
   227f0:	ldr	r0, [r8]
   227f4:	ldr	r2, [r8, #44]	; 0x2c
   227f8:	ldr	r1, [r8, #40]	; 0x28
   227fc:	mov	r3, r7
   22800:	stm	sp, {r0, r9, sl}
   22804:	str	r2, [sp, #16]
   22808:	str	r1, [sp, #12]
   2280c:	mov	r0, r6
   22810:	mov	r1, r4
   22814:	ldr	r2, [sp, #20]
   22818:	bl	21698 <__assert_fail@plt+0x10260>
   2281c:	ldr	r0, [sp, #24]
   22820:	ldr	r1, [sp, #32]
   22824:	ldr	r2, [sp, #28]
   22828:	cmp	r0, #0
   2282c:	str	r1, [r2]
   22830:	strne	r5, [r0]
   22834:	mov	r0, r6
   22838:	sub	sp, fp, #28
   2283c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22840:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22844:	add	fp, sp, #24
   22848:	movw	r5, #37172	; 0x9134
   2284c:	movw	r8, #37168	; 0x9130
   22850:	movt	r5, #4
   22854:	movt	r8, #4
   22858:	ldr	r0, [r5]
   2285c:	ldr	r4, [r8]
   22860:	cmp	r0, #2
   22864:	blt	22890 <__assert_fail@plt+0x11458>
   22868:	add	r7, r4, #12
   2286c:	mov	r6, #0
   22870:	ldr	r0, [r7, r6, lsl #3]
   22874:	bl	1386c <__assert_fail@plt+0x2434>
   22878:	ldr	r1, [r5]
   2287c:	add	r2, r6, #2
   22880:	add	r0, r6, #1
   22884:	mov	r6, r0
   22888:	cmp	r2, r1
   2288c:	blt	22870 <__assert_fail@plt+0x11438>
   22890:	ldr	r0, [r4, #4]
   22894:	movw	r7, #37328	; 0x91d0
   22898:	movt	r7, #4
   2289c:	cmp	r0, r7
   228a0:	beq	228b8 <__assert_fail@plt+0x11480>
   228a4:	bl	1386c <__assert_fail@plt+0x2434>
   228a8:	movw	r0, #37176	; 0x9138
   228ac:	mov	r6, #256	; 0x100
   228b0:	movt	r0, #4
   228b4:	strd	r6, [r0]
   228b8:	movw	r6, #37176	; 0x9138
   228bc:	movt	r6, #4
   228c0:	cmp	r4, r6
   228c4:	beq	228d4 <__assert_fail@plt+0x1149c>
   228c8:	mov	r0, r4
   228cc:	bl	1386c <__assert_fail@plt+0x2434>
   228d0:	str	r6, [r8]
   228d4:	mov	r0, #1
   228d8:	str	r0, [r5]
   228dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   228e0:	movw	r3, #37280	; 0x91a0
   228e4:	mvn	r2, #0
   228e8:	movt	r3, #4
   228ec:	b	228f0 <__assert_fail@plt+0x114b8>
   228f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228f4:	add	fp, sp, #28
   228f8:	sub	sp, sp, #44	; 0x2c
   228fc:	mov	r7, r3
   22900:	str	r2, [sp, #36]	; 0x24
   22904:	str	r1, [sp, #32]
   22908:	mov	r5, r0
   2290c:	bl	11348 <__errno_location@plt>
   22910:	cmp	r5, #0
   22914:	blt	22a80 <__assert_fail@plt+0x11648>
   22918:	cmn	r5, #-2147483647	; 0x80000001
   2291c:	beq	22a80 <__assert_fail@plt+0x11648>
   22920:	movw	r8, #37172	; 0x9134
   22924:	movw	r4, #37168	; 0x9130
   22928:	str	r0, [sp, #28]
   2292c:	ldr	r0, [r0]
   22930:	movt	r8, #4
   22934:	movt	r4, #4
   22938:	ldr	r1, [r8]
   2293c:	ldr	r6, [r4]
   22940:	str	r0, [sp, #24]
   22944:	cmp	r1, r5
   22948:	ble	22954 <__assert_fail@plt+0x1151c>
   2294c:	mov	sl, r6
   22950:	b	229bc <__assert_fail@plt+0x11584>
   22954:	movw	r9, #37176	; 0x9138
   22958:	mov	r0, #8
   2295c:	add	r2, r5, #1
   22960:	str	r1, [fp, #-32]	; 0xffffffe0
   22964:	mvn	r3, #-2147483648	; 0x80000000
   22968:	movt	r9, #4
   2296c:	str	r0, [sp]
   22970:	sub	r2, r2, r1
   22974:	sub	r1, fp, #32
   22978:	subs	r0, r6, r9
   2297c:	movne	r0, r6
   22980:	bl	35184 <__assert_fail@plt+0x23d4c>
   22984:	cmp	r6, r9
   22988:	mov	sl, r0
   2298c:	str	r0, [r4]
   22990:	ldrdeq	r0, [r9]
   22994:	stmeq	sl, {r0, r1}
   22998:	ldr	r1, [r8]
   2299c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   229a0:	add	r0, sl, r1, lsl #3
   229a4:	sub	r1, r2, r1
   229a8:	lsl	r2, r1, #3
   229ac:	mov	r1, #0
   229b0:	bl	1136c <memset@plt>
   229b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   229b8:	str	r0, [r8]
   229bc:	mov	r9, sl
   229c0:	ldr	r6, [r9, r5, lsl #3]!
   229c4:	ldr	r4, [r9, #4]!
   229c8:	ldm	r7, {r0, r1}
   229cc:	ldr	r2, [r7, #40]	; 0x28
   229d0:	ldr	r3, [r7, #44]	; 0x2c
   229d4:	orr	r8, r1, #1
   229d8:	add	r1, r7, #8
   229dc:	stm	sp, {r0, r8}
   229e0:	add	r0, sp, #8
   229e4:	str	r1, [sp, #20]
   229e8:	stm	r0, {r1, r2, r3}
   229ec:	mov	r0, r4
   229f0:	mov	r1, r6
   229f4:	ldr	r2, [sp, #32]
   229f8:	ldr	r3, [sp, #36]	; 0x24
   229fc:	bl	21698 <__assert_fail@plt+0x10260>
   22a00:	cmp	r6, r0
   22a04:	bhi	22a68 <__assert_fail@plt+0x11630>
   22a08:	add	r6, r0, #1
   22a0c:	movw	r0, #37328	; 0x91d0
   22a10:	movt	r0, #4
   22a14:	str	r6, [sl, r5, lsl #3]
   22a18:	cmp	r4, r0
   22a1c:	beq	22a28 <__assert_fail@plt+0x115f0>
   22a20:	mov	r0, r4
   22a24:	bl	1386c <__assert_fail@plt+0x2434>
   22a28:	mov	r0, r6
   22a2c:	bl	34f84 <__assert_fail@plt+0x23b4c>
   22a30:	str	r0, [r9]
   22a34:	mov	r4, r0
   22a38:	add	r3, sp, #8
   22a3c:	ldr	r0, [r7]
   22a40:	ldr	r1, [r7, #40]	; 0x28
   22a44:	ldr	r2, [r7, #44]	; 0x2c
   22a48:	stm	sp, {r0, r8}
   22a4c:	ldr	r0, [sp, #20]
   22a50:	stm	r3, {r0, r1, r2}
   22a54:	mov	r0, r4
   22a58:	mov	r1, r6
   22a5c:	ldr	r2, [sp, #32]
   22a60:	ldr	r3, [sp, #36]	; 0x24
   22a64:	bl	21698 <__assert_fail@plt+0x10260>
   22a68:	ldr	r0, [sp, #28]
   22a6c:	ldr	r1, [sp, #24]
   22a70:	str	r1, [r0]
   22a74:	mov	r0, r4
   22a78:	sub	sp, fp, #28
   22a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a80:	bl	11420 <abort@plt>
   22a84:	movw	r3, #37280	; 0x91a0
   22a88:	movt	r3, #4
   22a8c:	b	228f0 <__assert_fail@plt+0x114b8>
   22a90:	movw	r3, #37280	; 0x91a0
   22a94:	mov	r1, r0
   22a98:	mov	r0, #0
   22a9c:	mvn	r2, #0
   22aa0:	movt	r3, #4
   22aa4:	b	228f0 <__assert_fail@plt+0x114b8>
   22aa8:	movw	r3, #37280	; 0x91a0
   22aac:	mov	r2, r1
   22ab0:	mov	r1, r0
   22ab4:	mov	r0, #0
   22ab8:	movt	r3, #4
   22abc:	b	228f0 <__assert_fail@plt+0x114b8>
   22ac0:	push	{fp, lr}
   22ac4:	mov	fp, sp
   22ac8:	sub	sp, sp, #48	; 0x30
   22acc:	vmov.i32	q8, #0	; 0x00000000
   22ad0:	mov	ip, #32
   22ad4:	mov	r3, sp
   22ad8:	mov	lr, r2
   22adc:	cmp	r1, #10
   22ae0:	add	r2, r3, #16
   22ae4:	vst1.64	{d16-d17}, [r3], ip
   22ae8:	vst1.64	{d16-d17}, [r3]
   22aec:	vst1.64	{d16-d17}, [r2]
   22af0:	beq	22b10 <__assert_fail@plt+0x116d8>
   22af4:	str	r1, [sp]
   22af8:	mov	r3, sp
   22afc:	mov	r1, lr
   22b00:	mvn	r2, #0
   22b04:	bl	228f0 <__assert_fail@plt+0x114b8>
   22b08:	mov	sp, fp
   22b0c:	pop	{fp, pc}
   22b10:	bl	11420 <abort@plt>
   22b14:	push	{r4, sl, fp, lr}
   22b18:	add	fp, sp, #8
   22b1c:	sub	sp, sp, #48	; 0x30
   22b20:	mov	ip, r3
   22b24:	mov	r3, sp
   22b28:	vmov.i32	q8, #0	; 0x00000000
   22b2c:	mov	lr, #32
   22b30:	cmp	r1, #10
   22b34:	add	r4, r3, #16
   22b38:	vst1.64	{d16-d17}, [r3], lr
   22b3c:	vst1.64	{d16-d17}, [r3]
   22b40:	vst1.64	{d16-d17}, [r4]
   22b44:	beq	22b64 <__assert_fail@plt+0x1172c>
   22b48:	str	r1, [sp]
   22b4c:	mov	r1, r2
   22b50:	mov	r3, sp
   22b54:	mov	r2, ip
   22b58:	bl	228f0 <__assert_fail@plt+0x114b8>
   22b5c:	sub	sp, fp, #8
   22b60:	pop	{r4, sl, fp, pc}
   22b64:	bl	11420 <abort@plt>
   22b68:	push	{fp, lr}
   22b6c:	mov	fp, sp
   22b70:	sub	sp, sp, #48	; 0x30
   22b74:	mov	r3, sp
   22b78:	vmov.i32	q8, #0	; 0x00000000
   22b7c:	mov	ip, #32
   22b80:	cmp	r0, #10
   22b84:	add	r2, r3, #16
   22b88:	vst1.64	{d16-d17}, [r3], ip
   22b8c:	vst1.64	{d16-d17}, [r3]
   22b90:	vst1.64	{d16-d17}, [r2]
   22b94:	beq	22bb4 <__assert_fail@plt+0x1177c>
   22b98:	str	r0, [sp]
   22b9c:	mov	r3, sp
   22ba0:	mov	r0, #0
   22ba4:	mvn	r2, #0
   22ba8:	bl	228f0 <__assert_fail@plt+0x114b8>
   22bac:	mov	sp, fp
   22bb0:	pop	{fp, pc}
   22bb4:	bl	11420 <abort@plt>
   22bb8:	push	{fp, lr}
   22bbc:	mov	fp, sp
   22bc0:	sub	sp, sp, #48	; 0x30
   22bc4:	mov	r3, sp
   22bc8:	vmov.i32	q8, #0	; 0x00000000
   22bcc:	mov	ip, #32
   22bd0:	cmp	r0, #10
   22bd4:	add	lr, r3, #16
   22bd8:	vst1.64	{d16-d17}, [r3], ip
   22bdc:	vst1.64	{d16-d17}, [r3]
   22be0:	vst1.64	{d16-d17}, [lr]
   22be4:	beq	22c00 <__assert_fail@plt+0x117c8>
   22be8:	str	r0, [sp]
   22bec:	mov	r3, sp
   22bf0:	mov	r0, #0
   22bf4:	bl	228f0 <__assert_fail@plt+0x114b8>
   22bf8:	mov	sp, fp
   22bfc:	pop	{fp, pc}
   22c00:	bl	11420 <abort@plt>
   22c04:	push	{r4, sl, fp, lr}
   22c08:	add	fp, sp, #8
   22c0c:	sub	sp, sp, #48	; 0x30
   22c10:	mov	lr, r0
   22c14:	movw	r0, #37280	; 0x91a0
   22c18:	mov	r3, #32
   22c1c:	mov	ip, r1
   22c20:	mov	r4, #1
   22c24:	movt	r0, #4
   22c28:	add	r1, r0, #16
   22c2c:	vld1.64	{d16-d17}, [r0], r3
   22c30:	mov	r3, sp
   22c34:	vld1.64	{d18-d19}, [r1]
   22c38:	add	r1, r3, #16
   22c3c:	vld1.64	{d20-d21}, [r0]
   22c40:	add	r0, r3, #32
   22c44:	vst1.64	{d18-d19}, [r1]
   22c48:	mov	r1, r3
   22c4c:	vst1.64	{d20-d21}, [r0]
   22c50:	mov	r0, #28
   22c54:	and	r0, r0, r2, lsr #3
   22c58:	and	r2, r2, #31
   22c5c:	vst1.64	{d16-d17}, [r1], r0
   22c60:	ldr	r0, [r1, #8]
   22c64:	bic	r4, r4, r0, lsr r2
   22c68:	eor	r0, r0, r4, lsl r2
   22c6c:	mov	r2, ip
   22c70:	str	r0, [r1, #8]
   22c74:	mov	r0, #0
   22c78:	mov	r1, lr
   22c7c:	bl	228f0 <__assert_fail@plt+0x114b8>
   22c80:	sub	sp, fp, #8
   22c84:	pop	{r4, sl, fp, pc}
   22c88:	push	{fp, lr}
   22c8c:	mov	fp, sp
   22c90:	sub	sp, sp, #48	; 0x30
   22c94:	mov	ip, r0
   22c98:	movw	r0, #37280	; 0x91a0
   22c9c:	mov	r3, #32
   22ca0:	movt	r0, #4
   22ca4:	add	r2, r0, #16
   22ca8:	vld1.64	{d16-d17}, [r0], r3
   22cac:	mov	r3, sp
   22cb0:	vld1.64	{d18-d19}, [r2]
   22cb4:	add	r2, r3, #16
   22cb8:	vld1.64	{d20-d21}, [r0]
   22cbc:	add	r0, r3, #32
   22cc0:	vst1.64	{d18-d19}, [r2]
   22cc4:	mov	r2, r3
   22cc8:	vst1.64	{d20-d21}, [r0]
   22ccc:	mov	r0, #28
   22cd0:	and	r0, r0, r1, lsr #3
   22cd4:	and	r1, r1, #31
   22cd8:	vst1.64	{d16-d17}, [r2], r0
   22cdc:	mov	r0, #1
   22ce0:	ldr	lr, [r2, #8]
   22ce4:	bic	r0, r0, lr, lsr r1
   22ce8:	eor	r0, lr, r0, lsl r1
   22cec:	mov	r1, ip
   22cf0:	str	r0, [r2, #8]
   22cf4:	mov	r0, #0
   22cf8:	mvn	r2, #0
   22cfc:	bl	228f0 <__assert_fail@plt+0x114b8>
   22d00:	mov	sp, fp
   22d04:	pop	{fp, pc}
   22d08:	push	{fp, lr}
   22d0c:	mov	fp, sp
   22d10:	sub	sp, sp, #48	; 0x30
   22d14:	movw	r2, #37280	; 0x91a0
   22d18:	mov	r3, #32
   22d1c:	mov	r1, r0
   22d20:	movt	r2, #4
   22d24:	add	r0, r2, #16
   22d28:	vld1.64	{d16-d17}, [r2], r3
   22d2c:	mov	r3, sp
   22d30:	vld1.64	{d18-d19}, [r0]
   22d34:	add	r0, r3, #16
   22d38:	vld1.64	{d20-d21}, [r2]
   22d3c:	mov	r2, r3
   22d40:	vst1.64	{d18-d19}, [r0]
   22d44:	add	r0, r3, #32
   22d48:	vst1.64	{d20-d21}, [r0]
   22d4c:	mov	r0, #12
   22d50:	vst1.64	{d16-d17}, [r2], r0
   22d54:	ldr	r0, [r2]
   22d58:	orr	r0, r0, #67108864	; 0x4000000
   22d5c:	str	r0, [r2]
   22d60:	mov	r0, #0
   22d64:	mvn	r2, #0
   22d68:	bl	228f0 <__assert_fail@plt+0x114b8>
   22d6c:	mov	sp, fp
   22d70:	pop	{fp, pc}
   22d74:	push	{fp, lr}
   22d78:	mov	fp, sp
   22d7c:	sub	sp, sp, #48	; 0x30
   22d80:	mov	ip, r1
   22d84:	mov	r1, r0
   22d88:	movw	r0, #37280	; 0x91a0
   22d8c:	mov	r3, #32
   22d90:	movt	r0, #4
   22d94:	add	r2, r0, #16
   22d98:	vld1.64	{d16-d17}, [r0], r3
   22d9c:	mov	r3, sp
   22da0:	vld1.64	{d18-d19}, [r2]
   22da4:	add	r2, r3, #16
   22da8:	vld1.64	{d20-d21}, [r0]
   22dac:	add	r0, r3, #32
   22db0:	vst1.64	{d18-d19}, [r2]
   22db4:	mov	r2, r3
   22db8:	vst1.64	{d20-d21}, [r0]
   22dbc:	mov	r0, #12
   22dc0:	vst1.64	{d16-d17}, [r2], r0
   22dc4:	ldr	r0, [r2]
   22dc8:	orr	r0, r0, #67108864	; 0x4000000
   22dcc:	str	r0, [r2]
   22dd0:	mov	r0, #0
   22dd4:	mov	r2, ip
   22dd8:	bl	228f0 <__assert_fail@plt+0x114b8>
   22ddc:	mov	sp, fp
   22de0:	pop	{fp, pc}
   22de4:	push	{r4, sl, fp, lr}
   22de8:	add	fp, sp, #8
   22dec:	sub	sp, sp, #96	; 0x60
   22df0:	mov	ip, r2
   22df4:	mov	r2, sp
   22df8:	vmov.i32	q8, #0	; 0x00000000
   22dfc:	mov	r4, #28
   22e00:	cmp	r1, #10
   22e04:	mov	r3, r2
   22e08:	add	lr, r2, #16
   22e0c:	vst1.64	{d16-d17}, [r3], r4
   22e10:	vst1.64	{d16-d17}, [lr]
   22e14:	vst1.32	{d16-d17}, [r3]
   22e18:	beq	22e68 <__assert_fail@plt+0x11a30>
   22e1c:	vld1.64	{d16-d17}, [r2], r4
   22e20:	vld1.64	{d18-d19}, [lr]
   22e24:	add	r3, sp, #48	; 0x30
   22e28:	add	r4, r3, #4
   22e2c:	vld1.32	{d20-d21}, [r2]
   22e30:	add	r2, r3, #20
   22e34:	vst1.32	{d16-d17}, [r4]
   22e38:	vst1.32	{d18-d19}, [r2]
   22e3c:	add	r2, r3, #32
   22e40:	vst1.32	{d20-d21}, [r2]
   22e44:	str	r1, [sp, #48]	; 0x30
   22e48:	mvn	r2, #0
   22e4c:	ldr	r1, [sp, #60]	; 0x3c
   22e50:	orr	r1, r1, #67108864	; 0x4000000
   22e54:	str	r1, [sp, #60]	; 0x3c
   22e58:	mov	r1, ip
   22e5c:	bl	228f0 <__assert_fail@plt+0x114b8>
   22e60:	sub	sp, fp, #8
   22e64:	pop	{r4, sl, fp, pc}
   22e68:	bl	11420 <abort@plt>
   22e6c:	push	{r4, r5, fp, lr}
   22e70:	add	fp, sp, #8
   22e74:	sub	sp, sp, #48	; 0x30
   22e78:	mov	ip, r3
   22e7c:	movw	r3, #37280	; 0x91a0
   22e80:	mov	lr, #32
   22e84:	cmp	r1, #0
   22e88:	mov	r5, sp
   22e8c:	movt	r3, #4
   22e90:	cmpne	r2, #0
   22e94:	add	r4, r3, #16
   22e98:	vld1.64	{d16-d17}, [r3], lr
   22e9c:	vld1.64	{d18-d19}, [r4]
   22ea0:	add	r4, r5, #16
   22ea4:	vld1.64	{d20-d21}, [r3]
   22ea8:	vst1.64	{d16-d17}, [r5], lr
   22eac:	mov	r3, #10
   22eb0:	vst1.64	{d18-d19}, [r4]
   22eb4:	vst1.64	{d20-d21}, [r5]
   22eb8:	str	r3, [sp]
   22ebc:	bne	22ec4 <__assert_fail@plt+0x11a8c>
   22ec0:	bl	11420 <abort@plt>
   22ec4:	str	r2, [sp, #44]	; 0x2c
   22ec8:	str	r1, [sp, #40]	; 0x28
   22ecc:	mov	r3, sp
   22ed0:	mov	r1, ip
   22ed4:	mvn	r2, #0
   22ed8:	bl	228f0 <__assert_fail@plt+0x114b8>
   22edc:	sub	sp, fp, #8
   22ee0:	pop	{r4, r5, fp, pc}
   22ee4:	push	{r4, r5, fp, lr}
   22ee8:	add	fp, sp, #8
   22eec:	sub	sp, sp, #48	; 0x30
   22ef0:	mov	lr, r3
   22ef4:	movw	r3, #37280	; 0x91a0
   22ef8:	mov	ip, #32
   22efc:	cmp	r1, #0
   22f00:	mov	r5, sp
   22f04:	movt	r3, #4
   22f08:	cmpne	r2, #0
   22f0c:	add	r4, r3, #16
   22f10:	vld1.64	{d16-d17}, [r3], ip
   22f14:	vld1.64	{d18-d19}, [r4]
   22f18:	add	r4, r5, #16
   22f1c:	vld1.64	{d20-d21}, [r3]
   22f20:	vst1.64	{d16-d17}, [r5], ip
   22f24:	mov	r3, #10
   22f28:	vst1.64	{d18-d19}, [r4]
   22f2c:	vst1.64	{d20-d21}, [r5]
   22f30:	str	r3, [sp]
   22f34:	bne	22f3c <__assert_fail@plt+0x11b04>
   22f38:	bl	11420 <abort@plt>
   22f3c:	ldr	ip, [fp, #8]
   22f40:	str	r2, [sp, #44]	; 0x2c
   22f44:	str	r1, [sp, #40]	; 0x28
   22f48:	mov	r3, sp
   22f4c:	mov	r1, lr
   22f50:	mov	r2, ip
   22f54:	bl	228f0 <__assert_fail@plt+0x114b8>
   22f58:	sub	sp, fp, #8
   22f5c:	pop	{r4, r5, fp, pc}
   22f60:	push	{r4, sl, fp, lr}
   22f64:	add	fp, sp, #8
   22f68:	sub	sp, sp, #48	; 0x30
   22f6c:	mov	ip, r2
   22f70:	movw	r2, #37280	; 0x91a0
   22f74:	mov	lr, #32
   22f78:	cmp	r0, #0
   22f7c:	mov	r4, sp
   22f80:	movt	r2, #4
   22f84:	cmpne	r1, #0
   22f88:	add	r3, r2, #16
   22f8c:	vld1.64	{d16-d17}, [r2], lr
   22f90:	vld1.64	{d18-d19}, [r3]
   22f94:	add	r3, r4, #16
   22f98:	vld1.64	{d20-d21}, [r2]
   22f9c:	vst1.64	{d16-d17}, [r4], lr
   22fa0:	mov	r2, #10
   22fa4:	vst1.64	{d18-d19}, [r3]
   22fa8:	vst1.64	{d20-d21}, [r4]
   22fac:	str	r2, [sp]
   22fb0:	bne	22fb8 <__assert_fail@plt+0x11b80>
   22fb4:	bl	11420 <abort@plt>
   22fb8:	str	r1, [sp, #44]	; 0x2c
   22fbc:	str	r0, [sp, #40]	; 0x28
   22fc0:	mov	r3, sp
   22fc4:	mov	r0, #0
   22fc8:	mov	r1, ip
   22fcc:	mvn	r2, #0
   22fd0:	bl	228f0 <__assert_fail@plt+0x114b8>
   22fd4:	sub	sp, fp, #8
   22fd8:	pop	{r4, sl, fp, pc}
   22fdc:	push	{r4, r5, fp, lr}
   22fe0:	add	fp, sp, #8
   22fe4:	sub	sp, sp, #48	; 0x30
   22fe8:	mov	lr, r2
   22fec:	movw	r2, #37280	; 0x91a0
   22ff0:	mov	ip, r3
   22ff4:	mov	r3, #32
   22ff8:	cmp	r0, #0
   22ffc:	mov	r5, sp
   23000:	movt	r2, #4
   23004:	cmpne	r1, #0
   23008:	add	r4, r2, #16
   2300c:	vld1.64	{d16-d17}, [r2], r3
   23010:	vld1.64	{d18-d19}, [r4]
   23014:	add	r4, r5, #16
   23018:	vld1.64	{d20-d21}, [r2]
   2301c:	vst1.64	{d16-d17}, [r5], r3
   23020:	mov	r2, #10
   23024:	vst1.64	{d18-d19}, [r4]
   23028:	vst1.64	{d20-d21}, [r5]
   2302c:	str	r2, [sp]
   23030:	bne	23038 <__assert_fail@plt+0x11c00>
   23034:	bl	11420 <abort@plt>
   23038:	str	r1, [sp, #44]	; 0x2c
   2303c:	str	r0, [sp, #40]	; 0x28
   23040:	mov	r3, sp
   23044:	mov	r0, #0
   23048:	mov	r1, lr
   2304c:	mov	r2, ip
   23050:	bl	228f0 <__assert_fail@plt+0x114b8>
   23054:	sub	sp, fp, #8
   23058:	pop	{r4, r5, fp, pc}
   2305c:	movw	r3, #37184	; 0x9140
   23060:	movt	r3, #4
   23064:	b	228f0 <__assert_fail@plt+0x114b8>
   23068:	movw	r3, #37184	; 0x9140
   2306c:	mov	r2, r1
   23070:	mov	r1, r0
   23074:	mov	r0, #0
   23078:	movt	r3, #4
   2307c:	b	228f0 <__assert_fail@plt+0x114b8>
   23080:	movw	r3, #37184	; 0x9140
   23084:	mvn	r2, #0
   23088:	movt	r3, #4
   2308c:	b	228f0 <__assert_fail@plt+0x114b8>
   23090:	movw	r3, #37184	; 0x9140
   23094:	mov	r1, r0
   23098:	mov	r0, #0
   2309c:	mvn	r2, #0
   230a0:	movt	r3, #4
   230a4:	b	228f0 <__assert_fail@plt+0x114b8>
   230a8:	push	{r4, r5, fp, lr}
   230ac:	add	fp, sp, #8
   230b0:	mov	r5, r0
   230b4:	mov	r4, r1
   230b8:	mov	r0, #0
   230bc:	mov	r2, #5
   230c0:	mov	r1, r5
   230c4:	bl	11228 <dcgettext@plt>
   230c8:	cmp	r0, r5
   230cc:	popne	{r4, r5, fp, pc}
   230d0:	bl	358b0 <__assert_fail@plt+0x24478>
   230d4:	ldrb	r1, [r0]
   230d8:	and	r1, r1, #223	; 0xdf
   230dc:	cmp	r1, #71	; 0x47
   230e0:	beq	23148 <__assert_fail@plt+0x11d10>
   230e4:	cmp	r1, #85	; 0x55
   230e8:	bne	2316c <__assert_fail@plt+0x11d34>
   230ec:	ldrb	r1, [r0, #1]
   230f0:	and	r1, r1, #223	; 0xdf
   230f4:	cmp	r1, #84	; 0x54
   230f8:	bne	2316c <__assert_fail@plt+0x11d34>
   230fc:	ldrb	r1, [r0, #2]
   23100:	and	r1, r1, #223	; 0xdf
   23104:	cmp	r1, #70	; 0x46
   23108:	ldrbeq	r1, [r0, #3]
   2310c:	cmpeq	r1, #45	; 0x2d
   23110:	bne	2316c <__assert_fail@plt+0x11d34>
   23114:	ldrb	r1, [r0, #4]
   23118:	cmp	r1, #56	; 0x38
   2311c:	ldrbeq	r0, [r0, #5]
   23120:	cmpeq	r0, #0
   23124:	bne	2316c <__assert_fail@plt+0x11d34>
   23128:	ldrb	r1, [r5]
   2312c:	movw	r2, #31476	; 0x7af4
   23130:	movw	r0, #31480	; 0x7af8
   23134:	movt	r2, #3
   23138:	movt	r0, #3
   2313c:	cmp	r1, #96	; 0x60
   23140:	moveq	r0, r2
   23144:	pop	{r4, r5, fp, pc}
   23148:	ldrb	r1, [r0, #1]
   2314c:	and	r1, r1, #223	; 0xdf
   23150:	cmp	r1, #66	; 0x42
   23154:	bne	2316c <__assert_fail@plt+0x11d34>
   23158:	ldrb	r1, [r0, #2]
   2315c:	cmp	r1, #49	; 0x31
   23160:	ldrbeq	r1, [r0, #3]
   23164:	cmpeq	r1, #56	; 0x38
   23168:	beq	23188 <__assert_fail@plt+0x11d50>
   2316c:	movw	r1, #31472	; 0x7af0
   23170:	movw	r0, #26196	; 0x6654
   23174:	cmp	r4, #9
   23178:	movt	r1, #3
   2317c:	movt	r0, #3
   23180:	moveq	r0, r1
   23184:	pop	{r4, r5, fp, pc}
   23188:	ldrb	r1, [r0, #4]
   2318c:	cmp	r1, #48	; 0x30
   23190:	ldrbeq	r1, [r0, #5]
   23194:	cmpeq	r1, #51	; 0x33
   23198:	bne	2316c <__assert_fail@plt+0x11d34>
   2319c:	ldrb	r1, [r0, #6]
   231a0:	cmp	r1, #48	; 0x30
   231a4:	ldrbeq	r0, [r0, #7]
   231a8:	cmpeq	r0, #0
   231ac:	bne	2316c <__assert_fail@plt+0x11d34>
   231b0:	ldrb	r1, [r5]
   231b4:	movw	r2, #31484	; 0x7afc
   231b8:	movw	r0, #31488	; 0x7b00
   231bc:	movt	r2, #3
   231c0:	movt	r0, #3
   231c4:	b	2313c <__assert_fail@plt+0x11d04>
	...
   231d0:	push	{fp, lr}
   231d4:	mov	fp, sp
   231d8:	mov	lr, r0
   231dc:	movw	r0, #37584	; 0x92d0
   231e0:	mov	ip, r1
   231e4:	ldrb	r1, [r2, #28]
   231e8:	movt	r0, #4
   231ec:	ldr	r3, [r0]
   231f0:	mov	r0, #16
   231f4:	and	r1, r1, #111	; 0x6f
   231f8:	and	r0, r0, r3, lsr #21
   231fc:	orr	r0, r1, r0
   23200:	mov	r1, lr
   23204:	orr	r0, r0, #128	; 0x80
   23208:	strb	r0, [r2, #28]
   2320c:	mov	r0, r2
   23210:	mov	r2, ip
   23214:	bl	23250 <__assert_fail@plt+0x11e18>
   23218:	cmp	r0, #0
   2321c:	moveq	r0, #0
   23220:	popeq	{fp, pc}
   23224:	movw	r1, #31960	; 0x7cd8
   23228:	mov	r2, #5
   2322c:	movt	r1, #3
   23230:	ldr	r0, [r1, r0, lsl #2]
   23234:	movw	r1, #31576	; 0x7b58
   23238:	movt	r1, #3
   2323c:	add	r1, r1, r0
   23240:	mov	r0, #0
   23244:	pop	{fp, lr}
   23248:	b	11228 <dcgettext@plt>
   2324c:	nop	{0}
   23250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23254:	add	fp, sp, #28
   23258:	sub	sp, sp, #140	; 0x8c
   2325c:	mov	r9, r0
   23260:	mov	r0, #0
   23264:	str	r1, [sp, #20]
   23268:	str	r3, [sp, #24]
   2326c:	mov	sl, r2
   23270:	str	r0, [fp, #-52]	; 0xffffffcc
   23274:	str	r0, [r9, #8]
   23278:	str	r3, [r9, #12]
   2327c:	str	r0, [r9, #24]
   23280:	ldrb	r0, [r9, #28]
   23284:	and	r0, r0, #144	; 0x90
   23288:	strb	r0, [r9, #28]
   2328c:	ldm	r9, {r0, r1}
   23290:	cmp	r1, #159	; 0x9f
   23294:	bls	239e0 <__assert_fail@plt+0x125a8>
   23298:	mov	r1, #160	; 0xa0
   2329c:	mov	r2, #160	; 0xa0
   232a0:	str	r0, [sp, #28]
   232a4:	str	r1, [r9, #8]
   232a8:	mov	r1, #0
   232ac:	bl	1136c <memset@plt>
   232b0:	ldr	r3, [sp, #28]
   232b4:	mov	r0, #31
   232b8:	str	r0, [r3, #64]	; 0x40
   232bc:	movw	r0, #43689	; 0xaaa9
   232c0:	movt	r0, #2730	; 0xaaa
   232c4:	cmp	sl, r0
   232c8:	bhi	23454 <__assert_fail@plt+0x1201c>
   232cc:	add	r5, sl, #1
   232d0:	mov	r4, r3
   232d4:	lsl	r0, r5, #3
   232d8:	str	r5, [r3, #4]
   232dc:	bl	3554c <__assert_fail@plt+0x24114>
   232e0:	str	r0, [r4]
   232e4:	mov	r0, #1
   232e8:	mov	r4, r0
   232ec:	lsl	r0, r0, #1
   232f0:	cmp	r4, sl
   232f4:	bls	232e8 <__assert_fail@plt+0x11eb0>
   232f8:	mov	r0, #12
   232fc:	mov	r1, r4
   23300:	str	r5, [sp, #12]
   23304:	bl	354f8 <__assert_fail@plt+0x240c0>
   23308:	ldr	r5, [sp, #28]
   2330c:	str	r0, [r5, #32]
   23310:	sub	r0, r4, #1
   23314:	str	r0, [r5, #68]	; 0x44
   23318:	bl	1127c <__ctype_get_mb_cur_max@plt>
   2331c:	str	r0, [r5, #92]	; 0x5c
   23320:	mov	r0, #14
   23324:	bl	113f0 <nl_langinfo@plt>
   23328:	ldrb	r1, [r0]
   2332c:	orr	r1, r1, #32
   23330:	cmp	r1, #117	; 0x75
   23334:	bne	23388 <__assert_fail@plt+0x11f50>
   23338:	ldrb	r1, [r0, #1]
   2333c:	orr	r1, r1, #32
   23340:	cmp	r1, #116	; 0x74
   23344:	bne	23388 <__assert_fail@plt+0x11f50>
   23348:	ldrb	r1, [r0, #2]
   2334c:	orr	r1, r1, #32
   23350:	cmp	r1, #102	; 0x66
   23354:	bne	23388 <__assert_fail@plt+0x11f50>
   23358:	ldrb	r1, [r0, #3]!
   2335c:	cmp	r1, #45	; 0x2d
   23360:	movw	r1, #32076	; 0x7d4c
   23364:	addeq	r0, r0, #1
   23368:	movt	r1, #3
   2336c:	bl	11180 <strcmp@plt>
   23370:	cmp	r0, #0
   23374:	bne	23388 <__assert_fail@plt+0x11f50>
   23378:	ldr	r1, [sp, #28]
   2337c:	ldrb	r0, [r1, #88]	; 0x58
   23380:	orr	r0, r0, #4
   23384:	strb	r0, [r1, #88]	; 0x58
   23388:	ldr	r3, [sp, #28]
   2338c:	ldrb	r0, [r3, #88]	; 0x58
   23390:	and	r1, r0, #247	; 0xf7
   23394:	strb	r1, [r3, #88]	; 0x58
   23398:	ldr	r1, [r3, #92]	; 0x5c
   2339c:	cmp	r1, #2
   233a0:	blt	23440 <__assert_fail@plt+0x12008>
   233a4:	tst	r0, #4
   233a8:	bne	23434 <__assert_fail@plt+0x11ffc>
   233ac:	mov	r0, #32
   233b0:	mov	r1, #1
   233b4:	mov	r5, #1
   233b8:	bl	354f8 <__assert_fail@plt+0x240c0>
   233bc:	ldr	r3, [sp, #28]
   233c0:	cmp	r0, #0
   233c4:	str	r0, [r3, #60]	; 0x3c
   233c8:	beq	23454 <__assert_fail@plt+0x1201c>
   233cc:	mov	r6, #0
   233d0:	mov	r7, #0
   233d4:	mov	r8, #0
   233d8:	add	r4, r6, r8
   233dc:	mov	r0, r4
   233e0:	bl	11378 <btowc@plt>
   233e4:	ldr	r3, [sp, #28]
   233e8:	cmn	r0, #1
   233ec:	ldrne	r1, [r3, #60]	; 0x3c
   233f0:	ldrne	r2, [r1, r7, lsl #2]
   233f4:	orrne	r2, r2, r5, lsl r8
   233f8:	strne	r2, [r1, r7, lsl #2]
   233fc:	cmp	r4, #127	; 0x7f
   23400:	bhi	23414 <__assert_fail@plt+0x11fdc>
   23404:	cmp	r4, r0
   23408:	ldrbne	r0, [r3, #88]	; 0x58
   2340c:	orrne	r0, r0, #8
   23410:	strbne	r0, [r3, #88]	; 0x58
   23414:	add	r8, r8, #1
   23418:	cmp	r8, #32
   2341c:	bne	233d8 <__assert_fail@plt+0x11fa0>
   23420:	add	r7, r7, #1
   23424:	add	r6, r6, #32
   23428:	cmp	r7, #8
   2342c:	bne	233d4 <__assert_fail@plt+0x11f9c>
   23430:	b	23440 <__assert_fail@plt+0x12008>
   23434:	movw	r0, #32028	; 0x7d1c
   23438:	movt	r0, #3
   2343c:	str	r0, [r3, #60]	; 0x3c
   23440:	ldr	r0, [r3]
   23444:	cmp	r0, #0
   23448:	ldrne	r0, [r3, #32]
   2344c:	cmpne	r0, #0
   23450:	bne	23474 <__assert_fail@plt+0x1203c>
   23454:	mov	r4, #12
   23458:	mov	r0, r3
   2345c:	str	r4, [fp, #-52]	; 0xffffffcc
   23460:	bl	24da0 <__assert_fail@plt+0x13968>
   23464:	mov	r0, #0
   23468:	str	r0, [r9]
   2346c:	str	r0, [r9, #4]
   23470:	b	24610 <__assert_fail@plt+0x131d8>
   23474:	movw	r0, #0
   23478:	movw	r1, #0
   2347c:	mov	r4, #0
   23480:	movt	r0, #0
   23484:	movt	r1, #0
   23488:	str	r4, [fp, #-52]	; 0xffffffcc
   2348c:	orrs	r0, r1, r0
   23490:	str	r0, [sp, #8]
   23494:	beq	234b0 <__assert_fail@plt+0x12078>
   23498:	add	r0, r3, #136	; 0x88
   2349c:	mov	r1, #0
   234a0:	bl	111f8 <pthread_mutex_init@plt>
   234a4:	ldr	r3, [sp, #28]
   234a8:	cmp	r0, #0
   234ac:	bne	23454 <__assert_fail@plt+0x1201c>
   234b0:	add	r1, sp, #32
   234b4:	vmov.i32	q8, #0	; 0x00000000
   234b8:	ldr	r5, [r9, #20]
   234bc:	ldr	r7, [sp, #20]
   234c0:	ldr	r2, [sp, #24]
   234c4:	add	r0, r1, #64	; 0x40
   234c8:	vst1.32	{d16-d17}, [r0]
   234cc:	add	r0, r1, #52	; 0x34
   234d0:	vst1.32	{d16-d17}, [r0]
   234d4:	add	r0, r1, #36	; 0x24
   234d8:	vst1.32	{d16-d17}, [r0]
   234dc:	add	r0, r1, #20
   234e0:	vst1.32	{d16-d17}, [r0]
   234e4:	add	r0, r1, #4
   234e8:	add	r1, r1, #44	; 0x2c
   234ec:	vst1.32	{d16-d17}, [r0]
   234f0:	str	r7, [sp, #32]
   234f4:	ubfx	r0, r2, #22, #1
   234f8:	vdup.32	q8, sl
   234fc:	strb	r0, [sp, #104]	; 0x68
   23500:	and	r0, r2, #4194304	; 0x400000
   23504:	str	r5, [sp, #96]	; 0x60
   23508:	orrs	r6, r0, r5
   2350c:	str	r0, [sp, #16]
   23510:	movwne	r6, #1
   23514:	cmp	sl, #1
   23518:	strb	r6, [sp, #107]	; 0x6b
   2351c:	ldr	r0, [r3, #92]	; 0x5c
   23520:	str	r0, [sp, #112]	; 0x70
   23524:	ldrb	r2, [r3, #88]	; 0x58
   23528:	vst1.32	{d16-d17}, [r1]
   2352c:	ubfx	r1, r2, #3, #1
   23530:	strb	r1, [sp, #106]	; 0x6a
   23534:	ubfx	r1, r2, #2, #1
   23538:	strb	r1, [sp, #105]	; 0x69
   2353c:	blt	235c0 <__assert_fail@plt+0x12188>
   23540:	cmp	r0, #2
   23544:	blt	23578 <__assert_fail@plt+0x12140>
   23548:	ldr	r0, [sp, #12]
   2354c:	mov	r8, #12
   23550:	cmn	r0, #-1073741823	; 0xc0000001
   23554:	bhi	239d8 <__assert_fail@plt+0x125a0>
   23558:	lsl	r1, r0, #2
   2355c:	mov	r0, #0
   23560:	bl	3557c <__assert_fail@plt+0x24144>
   23564:	ldr	r3, [sp, #28]
   23568:	cmp	r0, #0
   2356c:	beq	239d8 <__assert_fail@plt+0x125a0>
   23570:	ldr	r7, [sp, #20]
   23574:	str	r0, [sp, #40]	; 0x28
   23578:	ldr	r8, [sp, #12]
   2357c:	cmp	r6, #0
   23580:	mov	r4, #0
   23584:	mov	r6, #0
   23588:	beq	235b4 <__assert_fail@plt+0x1217c>
   2358c:	mov	r0, #0
   23590:	mov	r1, r8
   23594:	bl	3557c <__assert_fail@plt+0x24144>
   23598:	cmp	r0, #0
   2359c:	beq	239d4 <__assert_fail@plt+0x1259c>
   235a0:	ldr	r3, [sp, #28]
   235a4:	ldr	r7, [sp, #20]
   235a8:	mov	r4, r0
   235ac:	mov	r6, #1
   235b0:	str	r0, [sp, #36]	; 0x24
   235b4:	str	r8, [sp, #68]	; 0x44
   235b8:	ldr	r0, [r3, #92]	; 0x5c
   235bc:	b	235c4 <__assert_fail@plt+0x1218c>
   235c0:	mov	r8, #0
   235c4:	ldr	r1, [sp, #16]
   235c8:	cmp	r6, #0
   235cc:	moveq	r4, r7
   235d0:	str	r4, [sp, #36]	; 0x24
   235d4:	cmp	r1, #0
   235d8:	beq	236bc <__assert_fail@plt+0x12284>
   235dc:	cmp	r0, #2
   235e0:	blt	236d0 <__assert_fail@plt+0x12298>
   235e4:	add	r0, sp, #32
   235e8:	bl	28360 <__assert_fail@plt+0x16f28>
   235ec:	cmp	r0, #0
   235f0:	bne	236b4 <__assert_fail@plt+0x1227c>
   235f4:	ldr	r1, [sp, #28]
   235f8:	add	r5, sp, #32
   235fc:	ldr	r0, [sp, #64]	; 0x40
   23600:	cmp	r0, sl
   23604:	bge	237c0 <__assert_fail@plt+0x12388>
   23608:	ldr	r0, [r1, #92]	; 0x5c
   2360c:	ldr	r2, [sp, #60]	; 0x3c
   23610:	ldr	r1, [sp, #68]	; 0x44
   23614:	add	r0, r0, r2
   23618:	cmp	r1, r0
   2361c:	bgt	237c0 <__assert_fail@plt+0x12388>
   23620:	ldr	r0, [sp, #112]	; 0x70
   23624:	lsl	r6, r1, #1
   23628:	cmp	r0, #2
   2362c:	blt	23678 <__assert_fail@plt+0x12240>
   23630:	mov	r8, #12
   23634:	cmn	r6, #-1073741823	; 0xc0000001
   23638:	bhi	239d8 <__assert_fail@plt+0x125a0>
   2363c:	ldr	r0, [sp, #40]	; 0x28
   23640:	lsl	r4, r1, #3
   23644:	mov	r1, r4
   23648:	bl	3557c <__assert_fail@plt+0x24144>
   2364c:	cmp	r0, #0
   23650:	beq	239d8 <__assert_fail@plt+0x125a0>
   23654:	str	r0, [sp, #40]	; 0x28
   23658:	ldr	r0, [sp, #44]	; 0x2c
   2365c:	cmp	r0, #0
   23660:	beq	23678 <__assert_fail@plt+0x12240>
   23664:	mov	r1, r4
   23668:	bl	3557c <__assert_fail@plt+0x24144>
   2366c:	cmp	r0, #0
   23670:	beq	239d8 <__assert_fail@plt+0x125a0>
   23674:	str	r0, [sp, #44]	; 0x2c
   23678:	ldrb	r0, [sp, #107]	; 0x6b
   2367c:	cmp	r0, #0
   23680:	beq	2369c <__assert_fail@plt+0x12264>
   23684:	ldr	r0, [sp, #36]	; 0x24
   23688:	mov	r1, r6
   2368c:	bl	3557c <__assert_fail@plt+0x24144>
   23690:	cmp	r0, #0
   23694:	beq	239d4 <__assert_fail@plt+0x1259c>
   23698:	str	r0, [sp, #36]	; 0x24
   2369c:	mov	r0, r5
   236a0:	str	r6, [sp, #68]	; 0x44
   236a4:	bl	28360 <__assert_fail@plt+0x16f28>
   236a8:	ldr	r1, [sp, #28]
   236ac:	cmp	r0, #0
   236b0:	beq	235fc <__assert_fail@plt+0x121c4>
   236b4:	mov	r8, r0
   236b8:	b	239d8 <__assert_fail@plt+0x125a0>
   236bc:	cmp	r0, #2
   236c0:	blt	2373c <__assert_fail@plt+0x12304>
   236c4:	add	r0, sp, #32
   236c8:	bl	28a20 <__assert_fail@plt+0x175e8>
   236cc:	b	237c0 <__assert_fail@plt+0x12388>
   236d0:	cmp	r8, sl
   236d4:	movgt	r8, sl
   236d8:	cmp	r8, #1
   236dc:	blt	237a4 <__assert_fail@plt+0x1236c>
   236e0:	mov	r0, #0
   236e4:	mov	r4, #0
   236e8:	b	236f8 <__assert_fail@plt+0x122c0>
   236ec:	ldr	r7, [sp, #32]
   236f0:	ldr	r0, [sp, #56]	; 0x38
   236f4:	ldr	r5, [sp, #96]	; 0x60
   236f8:	add	r0, r7, r0
   236fc:	cmp	r5, #0
   23700:	ldrb	r6, [r0, r4]
   23704:	ldrbne	r6, [r5, r6]
   23708:	add	r0, r6, #128	; 0x80
   2370c:	lsr	r0, r0, #7
   23710:	cmp	r0, #2
   23714:	bhi	23724 <__assert_fail@plt+0x122ec>
   23718:	bl	112f4 <__ctype_toupper_loc@plt>
   2371c:	ldr	r0, [r0]
   23720:	ldr	r6, [r0, r6, lsl #2]
   23724:	ldr	r0, [sp, #36]	; 0x24
   23728:	strb	r6, [r0, r4]
   2372c:	add	r4, r4, #1
   23730:	cmp	r4, r8
   23734:	blt	236ec <__assert_fail@plt+0x122b4>
   23738:	b	237a8 <__assert_fail@plt+0x12370>
   2373c:	cmp	r5, #0
   23740:	beq	237a8 <__assert_fail@plt+0x12370>
   23744:	cmp	r8, sl
   23748:	movgt	r8, sl
   2374c:	cmp	r8, #1
   23750:	blt	237b4 <__assert_fail@plt+0x1237c>
   23754:	ldrb	r0, [r7]
   23758:	cmp	r8, #1
   2375c:	ldrb	r0, [r5, r0]
   23760:	strb	r0, [r4]
   23764:	mov	r0, #1
   23768:	beq	237b8 <__assert_fail@plt+0x12380>
   2376c:	mov	r0, #1
   23770:	ldr	r1, [sp, #32]
   23774:	ldr	r3, [sp, #56]	; 0x38
   23778:	ldr	r7, [sp, #96]	; 0x60
   2377c:	ldr	r2, [sp, #36]	; 0x24
   23780:	add	r1, r1, r3
   23784:	ldrb	r1, [r1, r0]
   23788:	ldrb	r1, [r7, r1]
   2378c:	strb	r1, [r2, r0]
   23790:	add	r0, r0, #1
   23794:	cmp	r0, r8
   23798:	blt	23770 <__assert_fail@plt+0x12338>
   2379c:	mov	r0, r8
   237a0:	b	237b8 <__assert_fail@plt+0x12380>
   237a4:	mov	r8, #0
   237a8:	str	r8, [sp, #64]	; 0x40
   237ac:	str	r8, [sp, #60]	; 0x3c
   237b0:	b	237c0 <__assert_fail@plt+0x12388>
   237b4:	mov	r0, #0
   237b8:	str	r0, [sp, #64]	; 0x40
   237bc:	str	r0, [sp, #60]	; 0x3c
   237c0:	mov	r5, #0
   237c4:	ldr	r4, [sp, #24]
   237c8:	sub	r8, fp, #48	; 0x30
   237cc:	add	r6, sp, #32
   237d0:	str	r5, [fp, #-52]	; 0xffffffcc
   237d4:	str	r5, [r9, #24]
   237d8:	mov	r0, r8
   237dc:	mov	r1, r6
   237e0:	ldr	r7, [r9]
   237e4:	orr	r2, r4, #8388608	; 0x800000
   237e8:	str	r4, [r7, #128]	; 0x80
   237ec:	bl	28e6c <__assert_fail@plt+0x17a34>
   237f0:	ldr	r1, [sp, #72]	; 0x48
   237f4:	mov	r2, r8
   237f8:	mov	r3, r4
   237fc:	str	r5, [sp]
   23800:	add	r0, r1, r0
   23804:	mov	r1, r9
   23808:	str	r0, [sp, #72]	; 0x48
   2380c:	sub	r0, fp, #52	; 0x34
   23810:	str	r0, [sp, #4]
   23814:	mov	r0, r6
   23818:	bl	28bfc <__assert_fail@plt+0x177c4>
   2381c:	ldr	r5, [sp, #28]
   23820:	mov	r4, r0
   23824:	cmp	r0, #0
   23828:	bne	23838 <__assert_fail@plt+0x12400>
   2382c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23830:	cmp	r0, #0
   23834:	bne	23a64 <__assert_fail@plt+0x1262c>
   23838:	ldr	r1, [r7, #64]	; 0x40
   2383c:	cmp	r1, #31
   23840:	beq	239fc <__assert_fail@plt+0x125c4>
   23844:	ldr	r0, [r7, #56]	; 0x38
   23848:	add	r2, r1, #1
   2384c:	add	r0, r0, r1, lsl #5
   23850:	mov	r1, #0
   23854:	vmov.i32	q8, #0	; 0x00000000
   23858:	str	r2, [r7, #64]	; 0x40
   2385c:	add	r6, r0, #4
   23860:	mov	r2, #2
   23864:	str	r1, [r0, #20]
   23868:	str	r1, [r0, #24]
   2386c:	str	r2, [r0, #28]
   23870:	mov	r0, #28
   23874:	mov	r1, r6
   23878:	vst1.32	{d16-d17}, [r1], r0
   2387c:	mvn	r0, #0
   23880:	str	r0, [r1]
   23884:	cmp	r4, #0
   23888:	mov	r0, r6
   2388c:	beq	238e0 <__assert_fail@plt+0x124a8>
   23890:	ldr	r1, [r7, #64]	; 0x40
   23894:	cmp	r1, #31
   23898:	beq	23a30 <__assert_fail@plt+0x125f8>
   2389c:	ldr	r0, [r7, #56]	; 0x38
   238a0:	add	r2, r1, #1
   238a4:	add	r0, r0, r1, lsl #5
   238a8:	mov	r1, #0
   238ac:	mvn	r3, #0
   238b0:	cmp	r6, #0
   238b4:	str	r2, [r7, #64]	; 0x40
   238b8:	str	r1, [r0, #4]!
   238bc:	mov	r2, #16
   238c0:	add	ip, r0, #20
   238c4:	stmib	r0, {r4, r6}
   238c8:	str	r1, [r0, #12]
   238cc:	str	r1, [r0, #16]
   238d0:	stm	ip, {r1, r2, r3}
   238d4:	str	r0, [r4]
   238d8:	beq	23a5c <__assert_fail@plt+0x12624>
   238dc:	str	r0, [r6]
   238e0:	cmp	r6, #0
   238e4:	cmpne	r0, #0
   238e8:	beq	23a5c <__assert_fail@plt+0x12624>
   238ec:	str	r0, [r5, #52]	; 0x34
   238f0:	ldr	sl, [r9]
   238f4:	ldr	r0, [sl, #4]
   238f8:	lsl	r0, r0, #2
   238fc:	bl	3554c <__assert_fail@plt+0x24114>
   23900:	str	r0, [sl, #12]
   23904:	ldr	r0, [sl, #4]
   23908:	lsl	r0, r0, #2
   2390c:	bl	3554c <__assert_fail@plt+0x24114>
   23910:	str	r0, [sl, #16]
   23914:	ldr	r0, [sl, #4]
   23918:	add	r0, r0, r0, lsl #1
   2391c:	lsl	r0, r0, #2
   23920:	bl	3554c <__assert_fail@plt+0x24114>
   23924:	str	r0, [sl, #20]
   23928:	ldr	r0, [sl, #4]
   2392c:	add	r0, r0, r0, lsl #1
   23930:	lsl	r0, r0, #2
   23934:	bl	3554c <__assert_fail@plt+0x24114>
   23938:	str	r0, [sl, #24]
   2393c:	ldr	r1, [sl, #12]
   23940:	cmp	r1, #0
   23944:	ldrne	r1, [sl, #16]
   23948:	cmpne	r1, #0
   2394c:	beq	23960 <__assert_fail@plt+0x12528>
   23950:	cmp	r0, #0
   23954:	ldrne	r0, [sl, #20]
   23958:	cmpne	r0, #0
   2395c:	bne	2396c <__assert_fail@plt+0x12534>
   23960:	mov	r0, #12
   23964:	str	r0, [fp, #-52]	; 0xffffffcc
   23968:	b	23a6c <__assert_fail@plt+0x12634>
   2396c:	ldr	r0, [r9, #24]
   23970:	lsl	r0, r0, #2
   23974:	bl	3554c <__assert_fail@plt+0x24114>
   23978:	cmp	r0, #0
   2397c:	str	r0, [sl, #132]	; 0x84
   23980:	beq	239cc <__assert_fail@plt+0x12594>
   23984:	ldr	r1, [r9, #24]
   23988:	cmp	r1, #0
   2398c:	beq	23b24 <__assert_fail@plt+0x126ec>
   23990:	mov	r2, #0
   23994:	cmp	r1, #4
   23998:	bcc	23b14 <__assert_fail@plt+0x126dc>
   2399c:	add	r3, pc, #876	; 0x36c
   239a0:	bic	r2, r1, #3
   239a4:	vmov.i32	q8, #4	; 0x00000004
   239a8:	mov	r7, r0
   239ac:	vld1.64	{d18-d19}, [r3 :128]
   239b0:	mov	r3, r2
   239b4:	vadd.i32	q10, q9, q8
   239b8:	vst1.32	{d18-d19}, [r7]!
   239bc:	subs	r3, r3, #4
   239c0:	vorr	q9, q10, q10
   239c4:	bne	239b4 <__assert_fail@plt+0x1257c>
   239c8:	b	23b1c <__assert_fail@plt+0x126e4>
   239cc:	add	r8, sl, #52	; 0x34
   239d0:	b	23cdc <__assert_fail@plt+0x128a4>
   239d4:	mov	r8, #12
   239d8:	str	r8, [fp, #-52]	; 0xffffffcc
   239dc:	b	23a6c <__assert_fail@plt+0x12634>
   239e0:	mov	r1, #160	; 0xa0
   239e4:	mov	r4, #160	; 0xa0
   239e8:	bl	3557c <__assert_fail@plt+0x24144>
   239ec:	cmp	r0, #0
   239f0:	beq	23a28 <__assert_fail@plt+0x125f0>
   239f4:	stm	r9, {r0, r4}
   239f8:	b	23298 <__assert_fail@plt+0x11e60>
   239fc:	mov	r0, #996	; 0x3e4
   23a00:	bl	3554c <__assert_fail@plt+0x24114>
   23a04:	cmp	r0, #0
   23a08:	beq	23b08 <__assert_fail@plt+0x126d0>
   23a0c:	ldr	r1, [r7, #56]	; 0x38
   23a10:	ldr	r5, [sp, #28]
   23a14:	str	r1, [r0]
   23a18:	mov	r1, #0
   23a1c:	str	r1, [r7, #64]	; 0x40
   23a20:	str	r0, [r7, #56]	; 0x38
   23a24:	b	23848 <__assert_fail@plt+0x12410>
   23a28:	mov	r4, #12
   23a2c:	b	24610 <__assert_fail@plt+0x131d8>
   23a30:	mov	r0, #996	; 0x3e4
   23a34:	bl	3554c <__assert_fail@plt+0x24114>
   23a38:	ldr	r5, [sp, #28]
   23a3c:	cmp	r0, #0
   23a40:	beq	23a5c <__assert_fail@plt+0x12624>
   23a44:	ldr	r1, [r7, #56]	; 0x38
   23a48:	str	r1, [r0]
   23a4c:	mov	r1, #0
   23a50:	str	r1, [r7, #64]	; 0x40
   23a54:	str	r0, [r7, #56]	; 0x38
   23a58:	b	238a0 <__assert_fail@plt+0x12468>
   23a5c:	mov	r0, #12
   23a60:	str	r0, [fp, #-52]	; 0xffffffcc
   23a64:	mov	r0, #0
   23a68:	str	r0, [r5, #52]	; 0x34
   23a6c:	ldr	r4, [r9]
   23a70:	ldr	r0, [r4, #56]	; 0x38
   23a74:	cmp	r0, #0
   23a78:	beq	23a90 <__assert_fail@plt+0x12658>
   23a7c:	ldr	r5, [r0]
   23a80:	bl	1386c <__assert_fail@plt+0x2434>
   23a84:	cmp	r5, #0
   23a88:	mov	r0, r5
   23a8c:	bne	23a7c <__assert_fail@plt+0x12644>
   23a90:	mov	r0, #31
   23a94:	mov	r5, #0
   23a98:	str	r0, [r4, #64]	; 0x40
   23a9c:	str	r5, [r4, #52]	; 0x34
   23aa0:	str	r5, [r4, #56]	; 0x38
   23aa4:	ldr	r0, [r4, #16]
   23aa8:	bl	1386c <__assert_fail@plt+0x2434>
   23aac:	str	r5, [r4, #16]
   23ab0:	ldr	r0, [sp, #40]	; 0x28
   23ab4:	bl	1386c <__assert_fail@plt+0x2434>
   23ab8:	ldr	r0, [sp, #44]	; 0x2c
   23abc:	bl	1386c <__assert_fail@plt+0x2434>
   23ac0:	ldrb	r0, [sp, #107]	; 0x6b
   23ac4:	cmp	r0, #0
   23ac8:	beq	23ad4 <__assert_fail@plt+0x1269c>
   23acc:	ldr	r0, [sp, #36]	; 0x24
   23ad0:	bl	1386c <__assert_fail@plt+0x2434>
   23ad4:	ldr	r0, [sp, #8]
   23ad8:	cmp	r0, #0
   23adc:	beq	23aec <__assert_fail@plt+0x126b4>
   23ae0:	ldr	r0, [sp, #28]
   23ae4:	add	r0, r0, #136	; 0x88
   23ae8:	bl	11198 <pthread_mutex_destroy@plt>
   23aec:	ldr	r0, [sp, #28]
   23af0:	bl	24da0 <__assert_fail@plt+0x13968>
   23af4:	mov	r0, #0
   23af8:	str	r0, [r9]
   23afc:	str	r0, [r9, #4]
   23b00:	ldr	r4, [fp, #-52]	; 0xffffffcc
   23b04:	b	24610 <__assert_fail@plt+0x131d8>
   23b08:	ldr	r5, [sp, #28]
   23b0c:	mov	r6, #0
   23b10:	b	23884 <__assert_fail@plt+0x1244c>
   23b14:	str	r2, [r0, r2, lsl #2]
   23b18:	add	r2, r2, #1
   23b1c:	cmp	r1, r2
   23b20:	bne	23b14 <__assert_fail@plt+0x126dc>
   23b24:	mov	r8, sl
   23b28:	ldr	r2, [r8, #52]!	; 0x34
   23b2c:	ldrb	r1, [r2, #24]
   23b30:	cmp	r1, #17
   23b34:	beq	23b60 <__assert_fail@plt+0x12728>
   23b38:	cmp	r1, #4
   23b3c:	bne	23bb0 <__assert_fail@plt+0x12778>
   23b40:	ldr	r1, [r2, #20]
   23b44:	mov	r3, #1
   23b48:	ldr	r0, [r0, r1, lsl #2]
   23b4c:	str	r0, [r2, #20]
   23b50:	ldr	r1, [sl, #80]	; 0x50
   23b54:	orr	r0, r1, r3, lsl r0
   23b58:	str	r0, [sl, #80]	; 0x50
   23b5c:	b	23bb0 <__assert_fail@plt+0x12778>
   23b60:	ldr	r1, [r2, #4]
   23b64:	cmp	r1, #0
   23b68:	beq	23bb0 <__assert_fail@plt+0x12778>
   23b6c:	ldrb	r3, [r1, #24]
   23b70:	cmp	r3, #17
   23b74:	bne	23bb0 <__assert_fail@plt+0x12778>
   23b78:	ldr	r3, [r1, #4]
   23b7c:	ldr	r1, [r1, #20]
   23b80:	cmp	r3, #0
   23b84:	str	r3, [r2, #4]
   23b88:	strne	r2, [r3]
   23b8c:	cmp	r1, #31
   23b90:	ldr	r3, [r2, #20]
   23b94:	ldr	r3, [r0, r3, lsl #2]
   23b98:	str	r3, [r0, r1, lsl #2]
   23b9c:	bgt	23bb0 <__assert_fail@plt+0x12778>
   23ba0:	ldr	r0, [sl, #80]	; 0x50
   23ba4:	mov	r3, #1
   23ba8:	bic	r0, r0, r3, lsl r1
   23bac:	b	23b58 <__assert_fail@plt+0x12720>
   23bb0:	mov	r0, #1
   23bb4:	b	23bc0 <__assert_fail@plt+0x12788>
   23bb8:	str	r1, [sl, #80]	; 0x50
   23bbc:	mov	r2, r7
   23bc0:	ldr	r7, [r2, #4]
   23bc4:	cmp	r7, #0
   23bc8:	bne	23bf8 <__assert_fail@plt+0x127c0>
   23bcc:	mov	r3, #0
   23bd0:	ldr	r7, [r2, #8]
   23bd4:	mov	r1, r2
   23bd8:	cmp	r7, r3
   23bdc:	cmpne	r7, #0
   23be0:	bne	23bf8 <__assert_fail@plt+0x127c0>
   23be4:	ldr	r2, [r1]
   23be8:	mov	r3, r1
   23bec:	cmp	r2, #0
   23bf0:	bne	23bd0 <__assert_fail@plt+0x12798>
   23bf4:	b	23c94 <__assert_fail@plt+0x1285c>
   23bf8:	ldrb	r1, [r7, #24]
   23bfc:	cmp	r1, #17
   23c00:	beq	23c38 <__assert_fail@plt+0x12800>
   23c04:	cmp	r1, #4
   23c08:	mov	r2, r7
   23c0c:	bne	23bc0 <__assert_fail@plt+0x12788>
   23c10:	ldr	r1, [sl, #132]	; 0x84
   23c14:	mov	r2, r7
   23c18:	cmp	r1, #0
   23c1c:	beq	23bc0 <__assert_fail@plt+0x12788>
   23c20:	ldr	r2, [r7, #20]
   23c24:	ldr	r1, [r1, r2, lsl #2]
   23c28:	str	r1, [r7, #20]
   23c2c:	ldr	r2, [sl, #80]	; 0x50
   23c30:	orr	r1, r2, r0, lsl r1
   23c34:	b	23bb8 <__assert_fail@plt+0x12780>
   23c38:	ldr	r3, [r7, #4]
   23c3c:	mov	r2, r7
   23c40:	cmp	r3, #0
   23c44:	beq	23bc0 <__assert_fail@plt+0x12788>
   23c48:	ldrb	r1, [r3, #24]
   23c4c:	mov	r2, r7
   23c50:	cmp	r1, #17
   23c54:	bne	23bc0 <__assert_fail@plt+0x12788>
   23c58:	ldr	r1, [r3, #4]
   23c5c:	ldr	r3, [r3, #20]
   23c60:	cmp	r1, #0
   23c64:	str	r1, [r7, #4]
   23c68:	strne	r7, [r1]
   23c6c:	cmp	r3, #31
   23c70:	ldr	r1, [r7, #20]
   23c74:	ldr	r2, [sl, #132]	; 0x84
   23c78:	ldr	r1, [r2, r1, lsl #2]
   23c7c:	str	r1, [r2, r3, lsl #2]
   23c80:	mov	r2, r7
   23c84:	bgt	23bc0 <__assert_fail@plt+0x12788>
   23c88:	ldr	r1, [sl, #80]	; 0x50
   23c8c:	bic	r1, r1, r0, lsl r3
   23c90:	b	23bb8 <__assert_fail@plt+0x12780>
   23c94:	ldr	r1, [r9, #24]
   23c98:	cmp	r1, #0
   23c9c:	beq	23ccc <__assert_fail@plt+0x12894>
   23ca0:	ldr	r0, [sl, #132]	; 0x84
   23ca4:	mov	r2, #0
   23ca8:	ldr	r3, [r0, r2, lsl #2]
   23cac:	cmp	r2, r3
   23cb0:	bne	23cc0 <__assert_fail@plt+0x12888>
   23cb4:	add	r2, r2, #1
   23cb8:	cmp	r2, r1
   23cbc:	bcc	23ca8 <__assert_fail@plt+0x12870>
   23cc0:	cmp	r2, r1
   23cc4:	beq	23cd0 <__assert_fail@plt+0x12898>
   23cc8:	b	23cdc <__assert_fail@plt+0x128a4>
   23ccc:	ldr	r0, [sl, #132]	; 0x84
   23cd0:	bl	1386c <__assert_fail@plt+0x2434>
   23cd4:	mov	r0, #0
   23cd8:	str	r0, [sl, #132]	; 0x84
   23cdc:	ldr	r0, [r8]
   23ce0:	mov	r7, #0
   23ce4:	sub	r5, fp, #48	; 0x30
   23ce8:	mov	r4, r0
   23cec:	ldr	r0, [r0, #4]
   23cf0:	cmp	r0, #0
   23cf4:	bne	23ce8 <__assert_fail@plt+0x128b0>
   23cf8:	ldr	r0, [r4, #8]
   23cfc:	cmp	r0, #0
   23d00:	bne	23ce8 <__assert_fail@plt+0x128b0>
   23d04:	mov	r2, #0
   23d08:	b	23d28 <__assert_fail@plt+0x128f0>
   23d0c:	nop	{0}
   23d10:	andeq	r0, r0, r0
   23d14:	andeq	r0, r0, r1
   23d18:	andeq	r0, r0, r2
   23d1c:	andeq	r0, r0, r3
   23d20:	ldr	r2, [r1, #4]
   23d24:	mov	r4, r1
   23d28:	cmp	r2, #0
   23d2c:	str	r7, [fp, #-48]	; 0xffffffd0
   23d30:	beq	23d58 <__assert_fail@plt+0x12920>
   23d34:	ldrb	r0, [r2, #24]
   23d38:	cmp	r0, #17
   23d3c:	bne	23d58 <__assert_fail@plt+0x12920>
   23d40:	mov	r0, r5
   23d44:	mov	r1, r9
   23d48:	bl	2d074 <__assert_fail@plt+0x1bc3c>
   23d4c:	cmp	r0, #0
   23d50:	str	r0, [r4, #4]
   23d54:	strne	r4, [r0]
   23d58:	ldr	r2, [r4, #8]
   23d5c:	cmp	r2, #0
   23d60:	beq	23d88 <__assert_fail@plt+0x12950>
   23d64:	ldrb	r0, [r2, #24]
   23d68:	cmp	r0, #17
   23d6c:	bne	23d88 <__assert_fail@plt+0x12950>
   23d70:	mov	r0, r5
   23d74:	mov	r1, r9
   23d78:	bl	2d074 <__assert_fail@plt+0x1bc3c>
   23d7c:	cmp	r0, #0
   23d80:	str	r0, [r4, #8]
   23d84:	strne	r4, [r0]
   23d88:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23d8c:	cmp	r0, #0
   23d90:	bne	23964 <__assert_fail@plt+0x1252c>
   23d94:	ldr	r1, [r4]
   23d98:	cmp	r1, #0
   23d9c:	beq	23db4 <__assert_fail@plt+0x1297c>
   23da0:	ldr	r0, [r1, #8]
   23da4:	cmp	r0, r4
   23da8:	cmpne	r0, #0
   23dac:	beq	23d20 <__assert_fail@plt+0x128e8>
   23db0:	b	23ce8 <__assert_fail@plt+0x128b0>
   23db4:	ldr	r0, [sl, #52]	; 0x34
   23db8:	mov	r4, r0
   23dbc:	ldr	r0, [r0, #4]
   23dc0:	cmp	r0, #0
   23dc4:	bne	23db8 <__assert_fail@plt+0x12980>
   23dc8:	ldr	r0, [r4, #8]
   23dcc:	cmp	r0, #0
   23dd0:	bne	23db8 <__assert_fail@plt+0x12980>
   23dd4:	ldr	r2, [r4, #24]
   23dd8:	uxtb	r0, r2
   23ddc:	cmp	r0, #16
   23de0:	bne	23dfc <__assert_fail@plt+0x129c4>
   23de4:	ldr	r0, [r4, #4]
   23de8:	ldr	r1, [r0, #12]
   23dec:	str	r1, [r4, #12]
   23df0:	ldr	r0, [r0, #28]
   23df4:	str	r0, [r4, #28]
   23df8:	b	23e3c <__assert_fail@plt+0x12a04>
   23dfc:	str	r4, [r4, #12]
   23e00:	mov	r0, sl
   23e04:	ldr	r1, [r4, #20]
   23e08:	bl	2d330 <__assert_fail@plt+0x1bef8>
   23e0c:	cmn	r0, #1
   23e10:	str	r0, [r4, #28]
   23e14:	beq	23960 <__assert_fail@plt+0x12528>
   23e18:	ldrb	r1, [r4, #24]
   23e1c:	cmp	r1, #12
   23e20:	bne	23e3c <__assert_fail@plt+0x12a04>
   23e24:	ldr	r1, [sl]
   23e28:	ldr	r2, [r4, #20]
   23e2c:	add	r0, r1, r0, lsl #3
   23e30:	ldr	r1, [r0, #4]
   23e34:	bfi	r1, r2, #8, #10
   23e38:	str	r1, [r0, #4]
   23e3c:	ldr	r1, [r4]
   23e40:	cmp	r1, #0
   23e44:	beq	23e68 <__assert_fail@plt+0x12a30>
   23e48:	ldr	r0, [r1, #8]
   23e4c:	cmp	r0, r4
   23e50:	mov	r4, r1
   23e54:	beq	23dd4 <__assert_fail@plt+0x1299c>
   23e58:	cmp	r0, #0
   23e5c:	mov	r4, r1
   23e60:	beq	23dd4 <__assert_fail@plt+0x1299c>
   23e64:	b	23db8 <__assert_fail@plt+0x12980>
   23e68:	ldr	r4, [r8]
   23e6c:	ldrb	r0, [r4, #24]
   23e70:	cmp	r0, #16
   23e74:	beq	23e8c <__assert_fail@plt+0x12a54>
   23e78:	cmp	r0, #11
   23e7c:	bne	23e9c <__assert_fail@plt+0x12a64>
   23e80:	ldr	r0, [r4, #4]
   23e84:	str	r4, [r0, #16]
   23e88:	b	23ec0 <__assert_fail@plt+0x12a88>
   23e8c:	ldmib	r4, {r0, r1}
   23e90:	ldr	r2, [r1, #12]
   23e94:	str	r2, [r0, #16]
   23e98:	b	23eb8 <__assert_fail@plt+0x12a80>
   23e9c:	ldr	r0, [r4, #4]
   23ea0:	cmp	r0, #0
   23ea4:	ldrne	r1, [r4, #16]
   23ea8:	strne	r1, [r0, #16]
   23eac:	ldr	r1, [r4, #8]
   23eb0:	cmp	r1, #0
   23eb4:	beq	23ec0 <__assert_fail@plt+0x12a88>
   23eb8:	ldr	r2, [r4, #16]
   23ebc:	str	r2, [r1, #16]
   23ec0:	mov	r1, r4
   23ec4:	b	23ee4 <__assert_fail@plt+0x12aac>
   23ec8:	ldr	r3, [r1, #16]
   23ecc:	str	r3, [r2, #16]
   23ed0:	b	23ee4 <__assert_fail@plt+0x12aac>
   23ed4:	ldmib	r1, {r0, r2}
   23ed8:	ldr	r3, [r2, #12]
   23edc:	str	r3, [r0, #16]
   23ee0:	b	23ec8 <__assert_fail@plt+0x12a90>
   23ee4:	cmp	r0, #0
   23ee8:	bne	23f18 <__assert_fail@plt+0x12ae0>
   23eec:	mov	r3, #0
   23ef0:	ldr	r0, [r1, #8]
   23ef4:	mov	r2, r1
   23ef8:	cmp	r0, r3
   23efc:	cmpne	r0, #0
   23f00:	bne	23f18 <__assert_fail@plt+0x12ae0>
   23f04:	ldr	r1, [r2]
   23f08:	mov	r3, r2
   23f0c:	cmp	r1, #0
   23f10:	bne	23ef0 <__assert_fail@plt+0x12ab8>
   23f14:	b	23f5c <__assert_fail@plt+0x12b24>
   23f18:	mov	r1, r0
   23f1c:	ldrb	r0, [r0, #24]
   23f20:	cmp	r0, #16
   23f24:	beq	23ed4 <__assert_fail@plt+0x12a9c>
   23f28:	cmp	r0, #11
   23f2c:	bne	23f3c <__assert_fail@plt+0x12b04>
   23f30:	ldr	r0, [r1, #4]
   23f34:	str	r1, [r0, #16]
   23f38:	b	23ee4 <__assert_fail@plt+0x12aac>
   23f3c:	ldr	r0, [r1, #4]
   23f40:	cmp	r0, #0
   23f44:	ldrne	r2, [r1, #16]
   23f48:	strne	r2, [r0, #16]
   23f4c:	ldr	r2, [r1, #8]
   23f50:	cmp	r2, #0
   23f54:	beq	23ee4 <__assert_fail@plt+0x12aac>
   23f58:	b	23ec8 <__assert_fail@plt+0x12a90>
   23f5c:	mov	r0, sl
   23f60:	mov	r1, r4
   23f64:	bl	2cedc <__assert_fail@plt+0x1baa4>
   23f68:	cmp	r0, #0
   23f6c:	bne	23964 <__assert_fail@plt+0x1252c>
   23f70:	ldr	r7, [r4, #4]
   23f74:	cmp	r7, #0
   23f78:	bne	23fa8 <__assert_fail@plt+0x12b70>
   23f7c:	mov	r1, #0
   23f80:	ldr	r7, [r4, #8]
   23f84:	mov	r0, r4
   23f88:	cmp	r7, r1
   23f8c:	cmpne	r7, #0
   23f90:	bne	23fa8 <__assert_fail@plt+0x12b70>
   23f94:	ldr	r4, [r0]
   23f98:	mov	r1, r0
   23f9c:	cmp	r4, #0
   23fa0:	bne	23f80 <__assert_fail@plt+0x12b48>
   23fa4:	b	23fc4 <__assert_fail@plt+0x12b8c>
   23fa8:	mov	r0, sl
   23fac:	mov	r1, r7
   23fb0:	bl	2cedc <__assert_fail@plt+0x1baa4>
   23fb4:	cmp	r0, #0
   23fb8:	mov	r4, r7
   23fbc:	beq	23f70 <__assert_fail@plt+0x12b38>
   23fc0:	b	23964 <__assert_fail@plt+0x1252c>
   23fc4:	ldr	r0, [sl, #8]
   23fc8:	cmp	r0, #0
   23fcc:	beq	24070 <__assert_fail@plt+0x12c38>
   23fd0:	mov	r5, #0
   23fd4:	sub	r4, fp, #48	; 0x30
   23fd8:	mov	r7, #0
   23fdc:	ldr	r0, [sl, #24]
   23fe0:	add	r6, r7, r7, lsl #1
   23fe4:	add	r0, r0, r6, lsl #2
   23fe8:	ldr	r0, [r0, #4]
   23fec:	cmp	r0, #0
   23ff0:	beq	23ffc <__assert_fail@plt+0x12bc4>
   23ff4:	mov	r1, r5
   23ff8:	b	2403c <__assert_fail@plt+0x12c04>
   23ffc:	mov	r0, r4
   24000:	mov	r1, sl
   24004:	mov	r2, r7
   24008:	mov	r3, #1
   2400c:	bl	2d500 <__assert_fail@plt+0x1c0c8>
   24010:	cmp	r0, #0
   24014:	bne	23964 <__assert_fail@plt+0x1252c>
   24018:	ldr	r0, [sl, #24]
   2401c:	mov	r1, r5
   24020:	add	r0, r0, r6, lsl #2
   24024:	ldr	r0, [r0, #4]
   24028:	cmp	r0, #0
   2402c:	bne	2403c <__assert_fail@plt+0x12c04>
   24030:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24034:	bl	1386c <__assert_fail@plt+0x2434>
   24038:	mov	r1, #1
   2403c:	ldr	r2, [sl, #8]
   24040:	add	r0, r7, #1
   24044:	subs	r3, r0, r2
   24048:	mov	r7, r3
   2404c:	movwne	r3, #1
   24050:	movne	r7, r0
   24054:	tst	r1, #1
   24058:	and	r5, r1, r3
   2405c:	cmpeq	r0, r2
   24060:	bne	23fdc <__assert_fail@plt+0x12ba4>
   24064:	add	r0, r0, r0, lsl #1
   24068:	lsl	r0, r0, #2
   2406c:	b	24074 <__assert_fail@plt+0x12c3c>
   24070:	mov	r0, #0
   24074:	ldrb	r1, [r9, #28]
   24078:	str	r9, [sp, #12]
   2407c:	tst	r1, #16
   24080:	bne	2409c <__assert_fail@plt+0x12c64>
   24084:	ldr	r1, [sp, #12]
   24088:	ldr	r1, [r1, #24]
   2408c:	cmp	r1, #0
   24090:	ldrbne	r1, [sl, #88]	; 0x58
   24094:	tstne	r1, #1
   24098:	bne	240a8 <__assert_fail@plt+0x12c70>
   2409c:	ldr	r1, [sl, #76]	; 0x4c
   240a0:	cmp	r1, #0
   240a4:	beq	241e0 <__assert_fail@plt+0x12da8>
   240a8:	bl	3554c <__assert_fail@plt+0x24114>
   240ac:	cmp	r0, #0
   240b0:	str	r0, [sl, #28]
   240b4:	beq	2461c <__assert_fail@plt+0x131e4>
   240b8:	ldr	r1, [sl, #8]
   240bc:	cmp	r1, #0
   240c0:	beq	241e0 <__assert_fail@plt+0x12da8>
   240c4:	mov	r1, #0
   240c8:	str	r1, [r0]
   240cc:	str	r1, [r0, #4]
   240d0:	str	r1, [r0, #8]
   240d4:	ldr	r0, [sl, #8]
   240d8:	cmp	r0, #2
   240dc:	bcc	2410c <__assert_fail@plt+0x12cd4>
   240e0:	mov	r2, #1
   240e4:	mov	r3, #12
   240e8:	ldr	r0, [sl, #28]
   240ec:	add	r2, r2, #1
   240f0:	str	r1, [r0, r3]!
   240f4:	add	r3, r3, #12
   240f8:	str	r1, [r0, #4]
   240fc:	str	r1, [r0, #8]
   24100:	ldr	r0, [sl, #8]
   24104:	cmp	r2, r0
   24108:	bcc	240e8 <__assert_fail@plt+0x12cb0>
   2410c:	cmp	r0, #0
   24110:	beq	241e0 <__assert_fail@plt+0x12da8>
   24114:	ldr	ip, [sl, #24]
   24118:	mov	r6, #0
   2411c:	add	lr, r6, r6, lsl #1
   24120:	add	r2, ip, lr, lsl #2
   24124:	ldr	r3, [r2, #4]
   24128:	cmp	r3, #1
   2412c:	blt	241d4 <__assert_fail@plt+0x12d9c>
   24130:	ldr	r1, [r2, #8]
   24134:	mov	r5, #0
   24138:	str	lr, [sp, #24]
   2413c:	str	r1, [sp, #20]
   24140:	ldr	r0, [r1, r5, lsl #2]
   24144:	ldr	r4, [sl, #28]
   24148:	add	r0, r0, r0, lsl #1
   2414c:	mov	r3, r4
   24150:	ldr	r7, [r3, r0, lsl #2]!
   24154:	mov	r8, r3
   24158:	ldr	r2, [r8, #4]!
   2415c:	cmp	r7, r2
   24160:	bne	241a8 <__assert_fail@plt+0x12d70>
   24164:	mov	r1, #2
   24168:	mov	r9, sl
   2416c:	add	sl, r4, r0, lsl #2
   24170:	add	r1, r1, r7, lsl #1
   24174:	str	r1, [r3]
   24178:	lsl	r1, r1, #2
   2417c:	ldr	r0, [sl, #8]!
   24180:	bl	3557c <__assert_fail@plt+0x24144>
   24184:	cmp	r0, #0
   24188:	beq	2461c <__assert_fail@plt+0x131e4>
   2418c:	str	r0, [sl]
   24190:	ldr	lr, [sp, #24]
   24194:	ldr	r1, [sp, #20]
   24198:	mov	sl, r9
   2419c:	ldr	ip, [r9, #24]
   241a0:	ldr	r2, [r8]
   241a4:	b	241b0 <__assert_fail@plt+0x12d78>
   241a8:	add	r0, r4, r0, lsl #2
   241ac:	ldr	r0, [r0, #8]
   241b0:	add	r3, r2, #1
   241b4:	add	r5, r5, #1
   241b8:	str	r3, [r8]
   241bc:	str	r6, [r0, r2, lsl #2]
   241c0:	add	r0, ip, lr, lsl #2
   241c4:	ldr	r0, [r0, #4]
   241c8:	cmp	r5, r0
   241cc:	blt	24140 <__assert_fail@plt+0x12d08>
   241d0:	ldr	r0, [sl, #8]
   241d4:	add	r6, r6, #1
   241d8:	cmp	r6, r0
   241dc:	bcc	2411c <__assert_fail@plt+0x12ce4>
   241e0:	mov	r0, #0
   241e4:	str	r0, [fp, #-52]	; 0xffffffcc
   241e8:	ldr	r0, [sp, #16]
   241ec:	cmp	r0, #0
   241f0:	bne	2433c <__assert_fail@plt+0x12f04>
   241f4:	ldr	r0, [sp, #28]
   241f8:	ldrb	r2, [r0, #88]	; 0x58
   241fc:	ands	r0, r2, #4
   24200:	beq	2433c <__assert_fail@plt+0x12f04>
   24204:	ldr	r0, [sp, #12]
   24208:	ldr	r0, [r0, #20]
   2420c:	cmp	r0, #0
   24210:	bne	2433c <__assert_fail@plt+0x12f04>
   24214:	ldr	r5, [sp, #28]
   24218:	mov	r9, #0
   2421c:	ldr	r7, [r5, #8]
   24220:	cmp	r7, #0
   24224:	beq	24310 <__assert_fail@plt+0x12ed8>
   24228:	ldr	r3, [r5]
   2422c:	mov	r8, #0
   24230:	mov	ip, #1
   24234:	mov	lr, #139	; 0x8b
   24238:	mov	r6, #0
   2423c:	mov	r4, #0
   24240:	add	r5, r3, r4, lsl #3
   24244:	ldrb	r1, [r5, #4]
   24248:	sub	r1, r1, #1
   2424c:	cmp	r1, #11
   24250:	bhi	246f8 <__assert_fail@plt+0x132c0>
   24254:	add	r0, pc, #0
   24258:	ldr	pc, [r0, r1, lsl #2]
   2425c:	strdeq	r4, [r2], -r0
   24260:	andeq	r4, r2, ip, lsl #5
   24264:	muleq	r2, ip, r2
   24268:	andeq	r4, r2, ip, lsl #5
   2426c:	andeq	r4, r2, r8, lsl #6
   24270:	andeq	r4, r2, ip, lsr r3
   24274:	strdeq	r4, [r2], -r8
   24278:	andeq	r4, r2, ip, lsl #5
   2427c:	andeq	r4, r2, ip, lsl #5
   24280:	andeq	r4, r2, ip, lsl #5
   24284:	andeq	r4, r2, ip, lsl #5
   24288:	ldrdeq	r4, [r2], -r0
   2428c:	add	r4, r4, #1
   24290:	cmp	r4, r7
   24294:	bcc	24240 <__assert_fail@plt+0x12e08>
   24298:	b	24634 <__assert_fail@plt+0x131fc>
   2429c:	ldr	r5, [r3, r4, lsl #3]
   242a0:	ldr	r0, [r5, #16]
   242a4:	cmp	r0, #0
   242a8:	bne	2433c <__assert_fail@plt+0x12f04>
   242ac:	ldr	r0, [r5, #20]
   242b0:	cmp	r0, #0
   242b4:	ldreq	r0, [r5, #24]
   242b8:	cmpeq	r0, #0
   242bc:	bne	2433c <__assert_fail@plt+0x12f04>
   242c0:	ldr	r0, [r5, #28]
   242c4:	cmp	r0, #0
   242c8:	beq	2428c <__assert_fail@plt+0x12e54>
   242cc:	b	2433c <__assert_fail@plt+0x12f04>
   242d0:	ldr	r0, [r3, r4, lsl #3]
   242d4:	sub	r0, r0, #16
   242d8:	ror	r1, r0, #4
   242dc:	cmp	r1, #7
   242e0:	bhi	2433c <__assert_fail@plt+0x12f04>
   242e4:	tst	lr, ip, lsl r1
   242e8:	bne	2428c <__assert_fail@plt+0x12e54>
   242ec:	b	2433c <__assert_fail@plt+0x12f04>
   242f0:	ldrsb	r0, [r5]
   242f4:	cmp	r0, #0
   242f8:	mov	r0, #0
   242fc:	movwlt	r0, #1
   24300:	orr	r6, r6, r0
   24304:	b	2428c <__assert_fail@plt+0x12e54>
   24308:	mov	r8, #1
   2430c:	b	2428c <__assert_fail@plt+0x12e54>
   24310:	mov	r8, #0
   24314:	mov	r0, #1
   24318:	and	r1, r2, #249	; 0xf9
   2431c:	str	r0, [r5, #92]	; 0x5c
   24320:	ldr	r0, [r5, #76]	; 0x4c
   24324:	cmp	r0, #0
   24328:	movwgt	r9, #1
   2432c:	orr	r0, r8, r9
   24330:	and	r0, r0, #1
   24334:	orr	r0, r1, r0, lsl #1
   24338:	strb	r0, [r5, #88]	; 0x58
   2433c:	ldr	r1, [sp, #28]
   24340:	ldr	r2, [r1, #52]	; 0x34
   24344:	ldr	r0, [r1, #24]
   24348:	ldr	r2, [r2, #12]
   2434c:	ldr	r2, [r2, #28]
   24350:	str	r2, [r1, #72]	; 0x48
   24354:	add	r2, r2, r2, lsl #1
   24358:	add	r5, r0, r2, lsl #2
   2435c:	mov	r4, r5
   24360:	ldr	sl, [r4, #4]!
   24364:	str	sl, [fp, #-44]	; 0xffffffd4
   24368:	ldr	r0, [r4]
   2436c:	cmp	r0, #1
   24370:	blt	244bc <__assert_fail@plt+0x13084>
   24374:	lsl	r0, sl, #2
   24378:	str	sl, [fp, #-48]	; 0xffffffd0
   2437c:	bl	3554c <__assert_fail@plt+0x24114>
   24380:	cmp	r0, #0
   24384:	str	r0, [fp, #-40]	; 0xffffffd8
   24388:	beq	246dc <__assert_fail@plt+0x132a4>
   2438c:	mov	r6, r0
   24390:	ldr	r0, [r4]
   24394:	ldr	r1, [r5, #8]
   24398:	lsl	r2, r0, #2
   2439c:	mov	r0, r6
   243a0:	bl	111ec <memcpy@plt>
   243a4:	ldr	r1, [sp, #28]
   243a8:	mov	r0, #0
   243ac:	cmp	sl, #1
   243b0:	str	r0, [fp, #-32]	; 0xffffffe0
   243b4:	ldrge	r0, [r1, #76]	; 0x4c
   243b8:	cmpge	r0, #1
   243bc:	blt	244d0 <__assert_fail@plt+0x13098>
   243c0:	mov	ip, #0
   243c4:	sub	r8, fp, #48	; 0x30
   243c8:	mov	r9, #1
   243cc:	b	243d4 <__assert_fail@plt+0x12f9c>
   243d0:	ldr	r6, [fp, #-40]	; 0xffffffd8
   243d4:	ldr	r7, [r6, ip, lsl #2]
   243d8:	ldr	r2, [r1]
   243dc:	add	r3, r2, r7, lsl #3
   243e0:	ldrb	r3, [r3, #4]
   243e4:	cmp	r3, #4
   243e8:	bne	244ac <__assert_fail@plt+0x13074>
   243ec:	mov	r3, #0
   243f0:	cmp	sl, #1
   243f4:	blt	24428 <__assert_fail@plt+0x12ff0>
   243f8:	ldr	r5, [r6, r3, lsl #2]
   243fc:	add	r4, r2, r5, lsl #3
   24400:	ldrb	r4, [r4, #4]
   24404:	cmp	r4, #9
   24408:	bne	2441c <__assert_fail@plt+0x12fe4>
   2440c:	ldr	r4, [r2, r7, lsl #3]
   24410:	ldr	r5, [r2, r5, lsl #3]
   24414:	cmp	r5, r4
   24418:	beq	24428 <__assert_fail@plt+0x12ff0>
   2441c:	add	r3, r3, #1
   24420:	cmp	r3, sl
   24424:	blt	243f8 <__assert_fail@plt+0x12fc0>
   24428:	cmp	r3, sl
   2442c:	beq	244ac <__assert_fail@plt+0x13074>
   24430:	ldr	r2, [r1, #20]
   24434:	add	r0, r7, r7, lsl #1
   24438:	cmp	sl, #1
   2443c:	add	r0, r2, r0, lsl #2
   24440:	ldr	r0, [r0, #8]
   24444:	ldr	r0, [r0]
   24448:	blt	24484 <__assert_fail@plt+0x1304c>
   2444c:	mov	r2, #0
   24450:	subs	r3, sl, #1
   24454:	beq	24478 <__assert_fail@plt+0x13040>
   24458:	add	r5, r2, r3
   2445c:	lsr	r4, r5, #1
   24460:	ldr	r7, [r6, r4, lsl #2]
   24464:	cmp	r7, r0
   24468:	movge	r3, r4
   2446c:	addlt	r2, r9, r5, lsr #1
   24470:	cmp	r2, r3
   24474:	bcc	24458 <__assert_fail@plt+0x13020>
   24478:	ldr	r2, [r6, r2, lsl #2]
   2447c:	cmp	r2, r0
   24480:	beq	244ac <__assert_fail@plt+0x13074>
   24484:	ldr	r2, [r1, #24]
   24488:	add	r1, r0, r0, lsl #1
   2448c:	mov	r0, r8
   24490:	add	r1, r2, r1, lsl #2
   24494:	bl	2dbd0 <__assert_fail@plt+0x1c798>
   24498:	cmp	r0, #0
   2449c:	bne	2462c <__assert_fail@plt+0x131f4>
   244a0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   244a4:	ldr	r1, [sp, #28]
   244a8:	mov	ip, #0
   244ac:	add	ip, ip, #1
   244b0:	cmp	ip, sl
   244b4:	blt	243d0 <__assert_fail@plt+0x12f98>
   244b8:	b	244d0 <__assert_fail@plt+0x13098>
   244bc:	mov	r0, #0
   244c0:	str	r0, [fp, #-44]	; 0xffffffd4
   244c4:	str	r0, [fp, #-48]	; 0xffffffd0
   244c8:	str	r0, [fp, #-40]	; 0xffffffd8
   244cc:	str	r0, [fp, #-32]	; 0xffffffe0
   244d0:	sub	r0, fp, #32
   244d4:	sub	r2, fp, #48	; 0x30
   244d8:	mov	r3, #0
   244dc:	bl	2de9c <__assert_fail@plt+0x1ca64>
   244e0:	ldr	r1, [sp, #28]
   244e4:	ldr	r7, [sp, #12]
   244e8:	cmp	r0, #0
   244ec:	str	r0, [r1, #36]	; 0x24
   244f0:	beq	24578 <__assert_fail@plt+0x13140>
   244f4:	ldrsb	r2, [r0, #52]	; 0x34
   244f8:	cmn	r2, #1
   244fc:	ble	24510 <__assert_fail@plt+0x130d8>
   24500:	str	r0, [r1, #40]	; 0x28
   24504:	str	r0, [r1, #44]	; 0x2c
   24508:	str	r0, [r1, #48]	; 0x30
   2450c:	b	2458c <__assert_fail@plt+0x13154>
   24510:	sub	r4, fp, #32
   24514:	sub	r6, fp, #48	; 0x30
   24518:	mov	r3, #1
   2451c:	mov	r0, r4
   24520:	mov	r2, r6
   24524:	bl	2de9c <__assert_fail@plt+0x1ca64>
   24528:	ldr	r1, [sp, #28]
   2452c:	mov	r2, r6
   24530:	mov	r3, #2
   24534:	str	r0, [r1, #40]	; 0x28
   24538:	ldr	r1, [sp, #28]
   2453c:	mov	r0, r4
   24540:	bl	2de9c <__assert_fail@plt+0x1ca64>
   24544:	ldr	r1, [sp, #28]
   24548:	mov	r2, r6
   2454c:	mov	r3, #6
   24550:	str	r0, [r1, #44]	; 0x2c
   24554:	ldr	r1, [sp, #28]
   24558:	mov	r0, r4
   2455c:	bl	2de9c <__assert_fail@plt+0x1ca64>
   24560:	ldr	r2, [sp, #28]
   24564:	str	r0, [r2, #48]	; 0x30
   24568:	ldr	r1, [r2, #40]	; 0x28
   2456c:	cmp	r1, #0
   24570:	cmpne	r0, #0
   24574:	bne	24580 <__assert_fail@plt+0x13148>
   24578:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2457c:	b	24598 <__assert_fail@plt+0x13160>
   24580:	ldr	r0, [r2, #44]	; 0x2c
   24584:	cmp	r0, #0
   24588:	beq	24578 <__assert_fail@plt+0x13140>
   2458c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24590:	bl	1386c <__assert_fail@plt+0x2434>
   24594:	mov	r0, #0
   24598:	str	r0, [fp, #-52]	; 0xffffffcc
   2459c:	ldr	r5, [r7]
   245a0:	ldr	r0, [r5, #56]	; 0x38
   245a4:	cmp	r0, #0
   245a8:	beq	245c0 <__assert_fail@plt+0x13188>
   245ac:	ldr	r4, [r0]
   245b0:	bl	1386c <__assert_fail@plt+0x2434>
   245b4:	cmp	r4, #0
   245b8:	mov	r0, r4
   245bc:	bne	245ac <__assert_fail@plt+0x13174>
   245c0:	mov	r0, #31
   245c4:	mov	r4, #0
   245c8:	str	r0, [r5, #64]	; 0x40
   245cc:	str	r4, [r5, #52]	; 0x34
   245d0:	str	r4, [r5, #56]	; 0x38
   245d4:	ldr	r0, [r5, #16]
   245d8:	bl	1386c <__assert_fail@plt+0x2434>
   245dc:	str	r4, [r5, #16]
   245e0:	ldr	r0, [sp, #40]	; 0x28
   245e4:	bl	1386c <__assert_fail@plt+0x2434>
   245e8:	ldr	r0, [sp, #44]	; 0x2c
   245ec:	bl	1386c <__assert_fail@plt+0x2434>
   245f0:	ldrb	r0, [sp, #107]	; 0x6b
   245f4:	cmp	r0, #0
   245f8:	beq	24604 <__assert_fail@plt+0x131cc>
   245fc:	ldr	r0, [sp, #36]	; 0x24
   24600:	bl	1386c <__assert_fail@plt+0x2434>
   24604:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24608:	cmp	r0, #0
   2460c:	bne	246ac <__assert_fail@plt+0x13274>
   24610:	mov	r0, r4
   24614:	sub	sp, fp, #28
   24618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2461c:	ldr	r9, [sp, #12]
   24620:	mov	r0, #12
   24624:	str	r0, [fp, #-52]	; 0xffffffcc
   24628:	b	23a6c <__assert_fail@plt+0x12634>
   2462c:	ldr	r7, [sp, #12]
   24630:	b	24598 <__assert_fail@plt+0x13160>
   24634:	orr	r0, r6, r8
   24638:	tst	r0, #1
   2463c:	beq	246a4 <__assert_fail@plt+0x1326c>
   24640:	ldr	r5, [sp, #28]
   24644:	mov	r2, #0
   24648:	mov	r7, #7
   2464c:	b	24654 <__assert_fail@plt+0x1321c>
   24650:	ldr	r3, [r5]
   24654:	add	r3, r3, r2, lsl #3
   24658:	ldr	r6, [r3, #4]
   2465c:	uxtb	r1, r6
   24660:	cmp	r1, #5
   24664:	beq	24684 <__assert_fail@plt+0x1324c>
   24668:	cmp	r1, #1
   2466c:	bne	2468c <__assert_fail@plt+0x13254>
   24670:	ldrsb	r0, [r3]
   24674:	cmn	r0, #1
   24678:	bicle	r0, r6, #2097152	; 0x200000
   2467c:	strle	r0, [r3, #4]
   24680:	b	2468c <__assert_fail@plt+0x13254>
   24684:	bfi	r6, r7, #0, #8
   24688:	str	r6, [r3, #4]
   2468c:	ldr	r0, [r5, #8]
   24690:	add	r2, r2, #1
   24694:	cmp	r2, r0
   24698:	bcc	24650 <__assert_fail@plt+0x13218>
   2469c:	ldrb	r2, [r5, #88]	; 0x58
   246a0:	b	24314 <__assert_fail@plt+0x12edc>
   246a4:	ldr	r5, [sp, #28]
   246a8:	b	24314 <__assert_fail@plt+0x12edc>
   246ac:	ldr	r0, [sp, #8]
   246b0:	cmp	r0, #0
   246b4:	beq	246c4 <__assert_fail@plt+0x1328c>
   246b8:	ldr	r0, [sp, #28]
   246bc:	add	r0, r0, #136	; 0x88
   246c0:	bl	11198 <pthread_mutex_destroy@plt>
   246c4:	ldr	r0, [sp, #28]
   246c8:	bl	24da0 <__assert_fail@plt+0x13968>
   246cc:	mov	r0, #0
   246d0:	str	r0, [r7]
   246d4:	str	r0, [r7, #4]
   246d8:	b	23b00 <__assert_fail@plt+0x126c8>
   246dc:	ldr	r7, [sp, #12]
   246e0:	mov	r0, #0
   246e4:	str	r0, [fp, #-48]	; 0xffffffd0
   246e8:	str	r0, [fp, #-44]	; 0xffffffd4
   246ec:	mov	r0, #12
   246f0:	str	r0, [fp, #-32]	; 0xffffffe0
   246f4:	b	24598 <__assert_fail@plt+0x13160>
   246f8:	bl	11420 <abort@plt>
   246fc:	movw	r2, #37584	; 0x92d0
   24700:	movt	r2, #4
   24704:	ldr	r1, [r2]
   24708:	str	r0, [r2]
   2470c:	mov	r0, r1
   24710:	bx	lr
   24714:	push	{r4, r5, r6, sl, fp, lr}
   24718:	add	fp, sp, #16
   2471c:	ldr	r5, [r0, #16]
   24720:	ldr	r6, [r0]
   24724:	mov	r4, r0
   24728:	mov	r1, #0
   2472c:	mov	r2, #256	; 0x100
   24730:	mov	r0, r5
   24734:	bl	1136c <memset@plt>
   24738:	ldr	r1, [r6, #36]	; 0x24
   2473c:	mov	r0, r4
   24740:	mov	r2, r5
   24744:	bl	247b0 <__assert_fail@plt+0x13378>
   24748:	ldr	r0, [r6, #36]	; 0x24
   2474c:	ldr	r1, [r6, #40]	; 0x28
   24750:	cmp	r0, r1
   24754:	beq	24768 <__assert_fail@plt+0x13330>
   24758:	mov	r0, r4
   2475c:	mov	r2, r5
   24760:	bl	247b0 <__assert_fail@plt+0x13378>
   24764:	ldr	r0, [r6, #36]	; 0x24
   24768:	ldr	r1, [r6, #44]	; 0x2c
   2476c:	cmp	r0, r1
   24770:	beq	24784 <__assert_fail@plt+0x1334c>
   24774:	mov	r0, r4
   24778:	mov	r2, r5
   2477c:	bl	247b0 <__assert_fail@plt+0x13378>
   24780:	ldr	r0, [r6, #36]	; 0x24
   24784:	ldr	r1, [r6, #48]	; 0x30
   24788:	cmp	r0, r1
   2478c:	beq	2479c <__assert_fail@plt+0x13364>
   24790:	mov	r0, r4
   24794:	mov	r2, r5
   24798:	bl	247b0 <__assert_fail@plt+0x13378>
   2479c:	ldrb	r0, [r4, #28]
   247a0:	orr	r0, r0, #8
   247a4:	strb	r0, [r4, #28]
   247a8:	mov	r0, #0
   247ac:	pop	{r4, r5, r6, sl, fp, pc}
   247b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247b4:	add	fp, sp, #28
   247b8:	sub	sp, sp, #316	; 0x13c
   247bc:	ldr	r8, [r0]
   247c0:	str	r0, [sp, #20]
   247c4:	mov	r3, #0
   247c8:	str	r2, [sp, #36]	; 0x24
   247cc:	ldr	r0, [r8, #92]	; 0x5c
   247d0:	cmp	r0, #1
   247d4:	ldreq	r0, [sp, #20]
   247d8:	ldrbeq	r0, [r0, #14]
   247dc:	ubfxeq	r3, r0, #6, #1
   247e0:	ldr	r0, [r1, #8]
   247e4:	cmp	r0, #1
   247e8:	blt	24b7c <__assert_fail@plt+0x13744>
   247ec:	add	r0, sp, #40	; 0x28
   247f0:	mov	r4, #1
   247f4:	mov	r2, #0
   247f8:	str	r3, [sp, #32]
   247fc:	str	r1, [sp, #12]
   24800:	str	r8, [sp, #24]
   24804:	add	r0, r0, #1
   24808:	str	r0, [sp, #8]
   2480c:	movw	r0, #1
   24810:	movt	r0, #32
   24814:	add	r0, r0, #254	; 0xfe
   24818:	str	r0, [sp, #4]
   2481c:	ldr	r0, [r1, #12]
   24820:	str	r2, [sp, #16]
   24824:	ldr	sl, [r0, r2, lsl #2]
   24828:	ldr	r0, [r8]
   2482c:	add	r1, r0, sl, lsl #3
   24830:	ldrb	r5, [r1, #4]
   24834:	sub	r1, r5, #1
   24838:	cmp	r1, #6
   2483c:	bhi	24b64 <__assert_fail@plt+0x1372c>
   24840:	add	r2, pc, #0
   24844:	ldr	pc, [r2, r1, lsl #2]
   24848:	andeq	r4, r2, r4, ror #16
   2484c:	andeq	r4, r2, r4, lsl #23
   24850:	andeq	r4, r2, r4, ror r9
   24854:	andeq	r4, r2, r4, ror #22
   24858:	andeq	r4, r2, r4, lsl #23
   2485c:	andeq	r4, r2, r8, lsl sl
   24860:	andeq	r4, r2, r4, lsl #23
   24864:	ldrb	r5, [r0, sl, lsl #3]
   24868:	ldr	r0, [sp, #36]	; 0x24
   2486c:	cmp	r3, #0
   24870:	strb	r4, [r0, r5]
   24874:	beq	24890 <__assert_fail@plt+0x13458>
   24878:	bl	112e8 <__ctype_tolower_loc@plt>
   2487c:	ldr	r0, [r0]
   24880:	ldr	r3, [sp, #32]
   24884:	ldr	r1, [sp, #36]	; 0x24
   24888:	ldr	r0, [r0, r5, lsl #2]
   2488c:	strb	r4, [r1, r0]
   24890:	ldr	r0, [sp, #20]
   24894:	ldrb	r0, [r0, #14]
   24898:	tst	r0, #64	; 0x40
   2489c:	beq	24b64 <__assert_fail@plt+0x1372c>
   248a0:	ldr	r0, [r8, #92]	; 0x5c
   248a4:	cmp	r0, #2
   248a8:	blt	24b64 <__assert_fail@plt+0x1372c>
   248ac:	ldr	r0, [r8]
   248b0:	add	r1, sl, #1
   248b4:	ldr	r5, [sp, #4]
   248b8:	movw	r6, #1
   248bc:	add	r9, sp, #40	; 0x28
   248c0:	mov	r7, #0
   248c4:	movt	r6, #32
   248c8:	ldrb	r0, [r0, sl, lsl #3]
   248cc:	strb	r0, [sp, #40]	; 0x28
   248d0:	ldr	r0, [r8, #8]
   248d4:	cmp	r1, r0
   248d8:	ldr	r0, [sp, #8]
   248dc:	bcs	2491c <__assert_fail@plt+0x134e4>
   248e0:	ldr	r0, [sp, #8]
   248e4:	ldr	r1, [r8]
   248e8:	add	r1, r1, sl, lsl #3
   248ec:	ldr	r2, [r1, #12]
   248f0:	and	r2, r2, r5
   248f4:	cmp	r2, r6
   248f8:	bne	2491c <__assert_fail@plt+0x134e4>
   248fc:	ldrb	r1, [r1, #8]
   24900:	add	r3, sl, #2
   24904:	strb	r1, [r0], #1
   24908:	add	r1, sl, #1
   2490c:	ldr	r2, [r8, #8]
   24910:	mov	sl, r1
   24914:	cmp	r3, r2
   24918:	bcc	248e4 <__assert_fail@plt+0x134ac>
   2491c:	sub	r6, r0, r9
   24920:	sub	r5, fp, #48	; 0x30
   24924:	sub	r0, fp, #36	; 0x24
   24928:	mov	r1, r9
   2492c:	str	r7, [fp, #-44]	; 0xffffffd4
   24930:	str	r7, [fp, #-48]	; 0xffffffd0
   24934:	mov	r2, r6
   24938:	mov	r3, r5
   2493c:	bl	35998 <__assert_fail@plt+0x24560>
   24940:	cmp	r0, r6
   24944:	bne	24a94 <__assert_fail@plt+0x1365c>
   24948:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2494c:	bl	11204 <towlower@plt>
   24950:	mov	r1, r0
   24954:	mov	r0, r9
   24958:	mov	r2, r5
   2495c:	bl	11168 <wcrtomb@plt>
   24960:	cmn	r0, #1
   24964:	ldrbne	r0, [sp, #40]	; 0x28
   24968:	ldrne	r1, [sp, #36]	; 0x24
   2496c:	strbne	r4, [r1, r0]
   24970:	b	24a94 <__assert_fail@plt+0x1365c>
   24974:	ldr	r5, [sp, #36]	; 0x24
   24978:	mov	r7, #0
   2497c:	mov	r6, #0
   24980:	mov	r9, #0
   24984:	str	sl, [sp, #28]
   24988:	b	2499c <__assert_fail@plt+0x13564>
   2498c:	ldr	r0, [r8]
   24990:	add	r7, r7, #128	; 0x80
   24994:	add	r5, r5, #32
   24998:	add	r6, r6, #32
   2499c:	ldr	r0, [r0, sl, lsl #3]
   249a0:	mov	sl, #0
   249a4:	ldr	r8, [r0, r9, lsl #2]
   249a8:	tst	r8, r4, lsl sl
   249ac:	beq	249f4 <__assert_fail@plt+0x135bc>
   249b0:	mov	r0, r5
   249b4:	cmp	r3, #0
   249b8:	strb	r4, [r0, sl]!
   249bc:	beq	249f4 <__assert_fail@plt+0x135bc>
   249c0:	add	r1, r6, sl
   249c4:	add	r1, r1, #128	; 0x80
   249c8:	lsr	r1, r1, #7
   249cc:	cmp	r1, #2
   249d0:	bhi	249f0 <__assert_fail@plt+0x135b8>
   249d4:	bl	112e8 <__ctype_tolower_loc@plt>
   249d8:	ldr	r0, [r0]
   249dc:	ldr	r1, [sp, #36]	; 0x24
   249e0:	ldr	r3, [sp, #32]
   249e4:	add	r0, r0, r7
   249e8:	ldr	r0, [r0, sl, lsl #2]
   249ec:	add	r0, r1, r0
   249f0:	strb	r4, [r0]
   249f4:	add	sl, sl, #1
   249f8:	cmp	sl, #32
   249fc:	bne	249a8 <__assert_fail@plt+0x13570>
   24a00:	ldr	r8, [sp, #24]
   24a04:	ldr	sl, [sp, #28]
   24a08:	add	r9, r9, #1
   24a0c:	cmp	r9, #8
   24a10:	bne	2498c <__assert_fail@plt+0x13554>
   24a14:	b	24b64 <__assert_fail@plt+0x1372c>
   24a18:	ldr	r6, [r0, sl, lsl #3]
   24a1c:	ldr	r0, [r8, #92]	; 0x5c
   24a20:	cmp	r0, #2
   24a24:	blt	24a9c <__assert_fail@plt+0x13664>
   24a28:	ldr	r0, [r6, #36]	; 0x24
   24a2c:	cmp	r0, #0
   24a30:	bne	24a48 <__assert_fail@plt+0x13610>
   24a34:	ldrb	r0, [r6, #16]
   24a38:	tst	r0, #1
   24a3c:	ldreq	r0, [r6, #32]
   24a40:	cmpeq	r0, #0
   24a44:	beq	24a9c <__assert_fail@plt+0x13664>
   24a48:	mov	r6, #0
   24a4c:	add	r5, sp, #40	; 0x28
   24a50:	sub	r7, fp, #48	; 0x30
   24a54:	strb	r6, [fp, #-48]	; 0xffffffd0
   24a58:	mov	r0, #0
   24a5c:	mov	r1, r7
   24a60:	mov	r2, #1
   24a64:	mov	r3, r5
   24a68:	str	r6, [sp, #44]	; 0x2c
   24a6c:	str	r6, [sp, #40]	; 0x28
   24a70:	bl	35998 <__assert_fail@plt+0x24560>
   24a74:	cmn	r0, #2
   24a78:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   24a7c:	ldreq	r0, [sp, #36]	; 0x24
   24a80:	strbeq	r4, [r0, r1]
   24a84:	add	r0, r1, #1
   24a88:	tst	r0, #255	; 0xff
   24a8c:	strb	r0, [fp, #-48]	; 0xffffffd0
   24a90:	bne	24a58 <__assert_fail@plt+0x13620>
   24a94:	ldr	r3, [sp, #32]
   24a98:	b	24b64 <__assert_fail@plt+0x1372c>
   24a9c:	ldr	r0, [r6, #20]
   24aa0:	cmp	r0, #1
   24aa4:	blt	24b64 <__assert_fail@plt+0x1372c>
   24aa8:	mov	r9, #0
   24aac:	mov	r0, #0
   24ab0:	add	r7, sp, #40	; 0x28
   24ab4:	sub	r2, fp, #48	; 0x30
   24ab8:	str	r0, [fp, #-44]	; 0xffffffd4
   24abc:	str	r0, [fp, #-48]	; 0xffffffd0
   24ac0:	ldr	r0, [r6]
   24ac4:	ldr	r1, [r0, r9, lsl #2]
   24ac8:	mov	r0, r7
   24acc:	bl	11168 <wcrtomb@plt>
   24ad0:	ldr	r3, [sp, #32]
   24ad4:	cmn	r0, #1
   24ad8:	beq	24b08 <__assert_fail@plt+0x136d0>
   24adc:	ldrb	r5, [sp, #40]	; 0x28
   24ae0:	ldr	r0, [sp, #36]	; 0x24
   24ae4:	cmp	r3, #0
   24ae8:	strb	r4, [r0, r5]
   24aec:	beq	24b08 <__assert_fail@plt+0x136d0>
   24af0:	bl	112e8 <__ctype_tolower_loc@plt>
   24af4:	ldr	r0, [r0]
   24af8:	ldr	r3, [sp, #32]
   24afc:	ldr	r1, [sp, #36]	; 0x24
   24b00:	ldr	r0, [r0, r5, lsl #2]
   24b04:	strb	r4, [r1, r0]
   24b08:	ldr	r0, [sp, #20]
   24b0c:	ldrb	r0, [r0, #14]
   24b10:	tst	r0, #64	; 0x40
   24b14:	beq	24b54 <__assert_fail@plt+0x1371c>
   24b18:	ldr	r0, [r8, #92]	; 0x5c
   24b1c:	cmp	r0, #2
   24b20:	blt	24b54 <__assert_fail@plt+0x1371c>
   24b24:	ldr	r0, [r6]
   24b28:	ldr	r0, [r0, r9, lsl #2]
   24b2c:	bl	11204 <towlower@plt>
   24b30:	mov	r1, r0
   24b34:	mov	r0, r7
   24b38:	sub	r2, fp, #48	; 0x30
   24b3c:	bl	11168 <wcrtomb@plt>
   24b40:	cmn	r0, #1
   24b44:	ldr	r3, [sp, #32]
   24b48:	ldrbne	r0, [sp, #40]	; 0x28
   24b4c:	ldrne	r1, [sp, #36]	; 0x24
   24b50:	strbne	r4, [r1, r0]
   24b54:	ldr	r0, [r6, #20]
   24b58:	add	r9, r9, #1
   24b5c:	cmp	r9, r0
   24b60:	blt	24aac <__assert_fail@plt+0x13674>
   24b64:	ldr	r1, [sp, #12]
   24b68:	ldr	r2, [sp, #16]
   24b6c:	ldr	r0, [r1, #8]
   24b70:	add	r2, r2, #1
   24b74:	cmp	r2, r0
   24b78:	blt	2481c <__assert_fail@plt+0x133e4>
   24b7c:	sub	sp, fp, #28
   24b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b84:	ldr	r0, [sp, #36]	; 0x24
   24b88:	mov	r1, #1
   24b8c:	mov	r2, #256	; 0x100
   24b90:	bl	1136c <memset@plt>
   24b94:	cmp	r5, #2
   24b98:	ldreq	r1, [sp, #20]
   24b9c:	ldrbeq	r0, [r1, #28]
   24ba0:	orreq	r0, r0, #1
   24ba4:	strbeq	r0, [r1, #28]
   24ba8:	sub	sp, fp, #28
   24bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24bb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24bb4:	add	fp, sp, #24
   24bb8:	mov	r4, r0
   24bbc:	mov	r0, #0
   24bc0:	mov	r6, r2
   24bc4:	mov	r8, r1
   24bc8:	str	r0, [r4]
   24bcc:	str	r0, [r4, #4]
   24bd0:	str	r0, [r4, #8]
   24bd4:	mov	r0, #256	; 0x100
   24bd8:	bl	3554c <__assert_fail@plt+0x24114>
   24bdc:	cmp	r0, #0
   24be0:	str	r0, [r4, #16]
   24be4:	beq	24c94 <__assert_fail@plt+0x1385c>
   24be8:	movw	r0, #45820	; 0xb2fc
   24bec:	tst	r6, #1
   24bf0:	and	r1, r6, #2
   24bf4:	movt	r0, #3
   24bf8:	movweq	r0, #710	; 0x2c6
   24bfc:	movteq	r0, #257	; 0x101
   24c00:	tst	r6, #4
   24c04:	orr	r5, r0, r1, lsl #21
   24c08:	bne	24c1c <__assert_fail@plt+0x137e4>
   24c0c:	ldrb	r0, [r4, #28]
   24c10:	and	r0, r0, #127	; 0x7f
   24c14:	strb	r0, [r4, #28]
   24c18:	b	24c3c <__assert_fail@plt+0x13804>
   24c1c:	ldrb	r0, [r4, #28]
   24c20:	mvn	r1, #127	; 0x7f
   24c24:	orr	r0, r0, r1
   24c28:	movw	r1, #45758	; 0xb2be
   24c2c:	movt	r1, #323	; 0x143
   24c30:	strb	r0, [r4, #28]
   24c34:	and	r1, r5, r1
   24c38:	orr	r5, r1, #256	; 0x100
   24c3c:	and	r1, r6, #8
   24c40:	and	r0, r0, #239	; 0xef
   24c44:	mov	r7, #0
   24c48:	orr	r0, r0, r1, lsl #1
   24c4c:	str	r7, [r4, #20]
   24c50:	strb	r0, [r4, #28]
   24c54:	mov	r0, r8
   24c58:	bl	11330 <strlen@plt>
   24c5c:	mov	r2, r0
   24c60:	mov	r0, r4
   24c64:	mov	r1, r8
   24c68:	mov	r3, r5
   24c6c:	bl	23250 <__assert_fail@plt+0x11e18>
   24c70:	mov	r5, r0
   24c74:	cmp	r0, #16
   24c78:	movweq	r5, #8
   24c7c:	cmp	r5, #0
   24c80:	bne	24ca0 <__assert_fail@plt+0x13868>
   24c84:	mov	r0, r4
   24c88:	bl	24714 <__assert_fail@plt+0x132dc>
   24c8c:	mov	r0, r7
   24c90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24c94:	mov	r7, #12
   24c98:	mov	r0, r7
   24c9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24ca0:	ldr	r0, [r4, #16]
   24ca4:	bl	1386c <__assert_fail@plt+0x2434>
   24ca8:	mov	r0, r5
   24cac:	str	r7, [r4, #16]
   24cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24cb4:	push	{r4, r5, r6, r7, fp, lr}
   24cb8:	add	fp, sp, #16
   24cbc:	cmp	r0, #17
   24cc0:	bcs	24d34 <__assert_fail@plt+0x138fc>
   24cc4:	movw	r1, #31960	; 0x7cd8
   24cc8:	mov	r4, r2
   24ccc:	mov	r2, #5
   24cd0:	mov	r5, r3
   24cd4:	movt	r1, #3
   24cd8:	ldr	r0, [r1, r0, lsl #2]
   24cdc:	movw	r1, #31576	; 0x7b58
   24ce0:	movt	r1, #3
   24ce4:	add	r1, r1, r0
   24ce8:	mov	r0, #0
   24cec:	bl	11228 <dcgettext@plt>
   24cf0:	mov	r6, r0
   24cf4:	bl	11330 <strlen@plt>
   24cf8:	add	r7, r0, #1
   24cfc:	cmp	r5, #0
   24d00:	beq	24d1c <__assert_fail@plt+0x138e4>
   24d04:	cmp	r7, r5
   24d08:	mov	r2, r7
   24d0c:	bhi	24d24 <__assert_fail@plt+0x138ec>
   24d10:	mov	r0, r4
   24d14:	mov	r1, r6
   24d18:	bl	111ec <memcpy@plt>
   24d1c:	mov	r0, r7
   24d20:	pop	{r4, r5, r6, r7, fp, pc}
   24d24:	sub	r2, r5, #1
   24d28:	mov	r0, #0
   24d2c:	strb	r0, [r4, r2]
   24d30:	b	24d10 <__assert_fail@plt+0x138d8>
   24d34:	bl	11420 <abort@plt>
   24d38:	push	{r4, r5, fp, lr}
   24d3c:	add	fp, sp, #8
   24d40:	ldr	r5, [r0]
   24d44:	mov	r4, r0
   24d48:	cmp	r5, #0
   24d4c:	beq	24d78 <__assert_fail@plt+0x13940>
   24d50:	movw	r0, #0
   24d54:	movw	r1, #0
   24d58:	movt	r0, #0
   24d5c:	movt	r1, #0
   24d60:	orrs	r0, r1, r0
   24d64:	beq	24d70 <__assert_fail@plt+0x13938>
   24d68:	add	r0, r5, #136	; 0x88
   24d6c:	bl	11198 <pthread_mutex_destroy@plt>
   24d70:	mov	r0, r5
   24d74:	bl	24da0 <__assert_fail@plt+0x13968>
   24d78:	mov	r5, #0
   24d7c:	str	r5, [r4]
   24d80:	str	r5, [r4, #4]
   24d84:	ldr	r0, [r4, #16]
   24d88:	bl	1386c <__assert_fail@plt+0x2434>
   24d8c:	str	r5, [r4, #16]
   24d90:	ldr	r0, [r4, #20]
   24d94:	bl	1386c <__assert_fail@plt+0x2434>
   24d98:	str	r5, [r4, #20]
   24d9c:	pop	{r4, r5, fp, pc}
   24da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24da4:	add	fp, sp, #28
   24da8:	sub	sp, sp, #4
   24dac:	mov	sl, r0
   24db0:	ldr	r0, [r0]
   24db4:	cmp	r0, #0
   24db8:	ldrne	r1, [sl, #8]
   24dbc:	cmpne	r1, #0
   24dc0:	beq	24e38 <__assert_fail@plt+0x13a00>
   24dc4:	movw	r7, #255	; 0xff
   24dc8:	mov	r6, #0
   24dcc:	movt	r7, #4
   24dd0:	b	24dd8 <__assert_fail@plt+0x139a0>
   24dd4:	ldr	r0, [sl]
   24dd8:	add	r1, r0, r6, lsl #3
   24ddc:	ldr	r1, [r1, #4]
   24de0:	and	r1, r1, r7
   24de4:	cmp	r1, #3
   24de8:	beq	24e20 <__assert_fail@plt+0x139e8>
   24dec:	cmp	r1, #6
   24df0:	bne	24e28 <__assert_fail@plt+0x139f0>
   24df4:	ldr	r5, [r0, r6, lsl #3]
   24df8:	ldr	r0, [r5]
   24dfc:	bl	1386c <__assert_fail@plt+0x2434>
   24e00:	ldr	r0, [r5, #4]
   24e04:	bl	1386c <__assert_fail@plt+0x2434>
   24e08:	ldr	r0, [r5, #8]
   24e0c:	bl	1386c <__assert_fail@plt+0x2434>
   24e10:	ldr	r0, [r5, #12]
   24e14:	bl	1386c <__assert_fail@plt+0x2434>
   24e18:	mov	r0, r5
   24e1c:	b	24e24 <__assert_fail@plt+0x139ec>
   24e20:	ldr	r0, [r0, r6, lsl #3]
   24e24:	bl	1386c <__assert_fail@plt+0x2434>
   24e28:	ldr	r0, [sl, #8]
   24e2c:	add	r6, r6, #1
   24e30:	cmp	r6, r0
   24e34:	bcc	24dd4 <__assert_fail@plt+0x1399c>
   24e38:	ldr	r0, [sl, #12]
   24e3c:	bl	1386c <__assert_fail@plt+0x2434>
   24e40:	ldr	r0, [sl, #8]
   24e44:	cmp	r0, #0
   24e48:	beq	24eb4 <__assert_fail@plt+0x13a7c>
   24e4c:	add	r7, sl, #20
   24e50:	add	r8, sl, #28
   24e54:	add	r9, sl, #24
   24e58:	mov	r5, #0
   24e5c:	mov	r6, #8
   24e60:	ldr	r0, [r9]
   24e64:	cmp	r0, #0
   24e68:	beq	24e74 <__assert_fail@plt+0x13a3c>
   24e6c:	ldr	r0, [r0, r6]
   24e70:	bl	1386c <__assert_fail@plt+0x2434>
   24e74:	ldr	r0, [r8]
   24e78:	cmp	r0, #0
   24e7c:	beq	24e88 <__assert_fail@plt+0x13a50>
   24e80:	ldr	r0, [r0, r6]
   24e84:	bl	1386c <__assert_fail@plt+0x2434>
   24e88:	ldr	r0, [r7]
   24e8c:	cmp	r0, #0
   24e90:	beq	24e9c <__assert_fail@plt+0x13a64>
   24e94:	ldr	r0, [r0, r6]
   24e98:	bl	1386c <__assert_fail@plt+0x2434>
   24e9c:	ldr	r0, [sl, #8]
   24ea0:	add	r5, r5, #1
   24ea4:	add	r6, r6, #12
   24ea8:	cmp	r5, r0
   24eac:	bcc	24e60 <__assert_fail@plt+0x13a28>
   24eb0:	b	24ec0 <__assert_fail@plt+0x13a88>
   24eb4:	add	r8, sl, #28
   24eb8:	add	r9, sl, #24
   24ebc:	add	r7, sl, #20
   24ec0:	ldr	r0, [r7]
   24ec4:	bl	1386c <__assert_fail@plt+0x2434>
   24ec8:	ldr	r0, [r9]
   24ecc:	bl	1386c <__assert_fail@plt+0x2434>
   24ed0:	ldr	r0, [r8]
   24ed4:	bl	1386c <__assert_fail@plt+0x2434>
   24ed8:	ldr	r0, [sl]
   24edc:	bl	1386c <__assert_fail@plt+0x2434>
   24ee0:	ldr	r5, [sl, #32]
   24ee4:	cmp	r5, #0
   24ee8:	beq	24f48 <__assert_fail@plt+0x13b10>
   24eec:	mov	r6, #0
   24ef0:	b	24efc <__assert_fail@plt+0x13ac4>
   24ef4:	ldr	r5, [sl, #32]
   24ef8:	add	r6, r6, #1
   24efc:	add	r0, r6, r6, lsl #1
   24f00:	ldr	r0, [r5, r0, lsl #2]!
   24f04:	add	r7, r5, #8
   24f08:	cmp	r0, #1
   24f0c:	blt	24f30 <__assert_fail@plt+0x13af8>
   24f10:	mov	r4, #0
   24f14:	ldr	r0, [r7]
   24f18:	ldr	r0, [r0, r4, lsl #2]
   24f1c:	bl	282fc <__assert_fail@plt+0x16ec4>
   24f20:	ldr	r0, [r5]
   24f24:	add	r4, r4, #1
   24f28:	cmp	r4, r0
   24f2c:	blt	24f14 <__assert_fail@plt+0x13adc>
   24f30:	ldr	r0, [r7]
   24f34:	bl	1386c <__assert_fail@plt+0x2434>
   24f38:	ldr	r0, [sl, #68]	; 0x44
   24f3c:	cmp	r6, r0
   24f40:	bcc	24ef4 <__assert_fail@plt+0x13abc>
   24f44:	ldr	r5, [sl, #32]
   24f48:	mov	r0, r5
   24f4c:	bl	1386c <__assert_fail@plt+0x2434>
   24f50:	ldr	r0, [sl, #60]	; 0x3c
   24f54:	movw	r1, #32028	; 0x7d1c
   24f58:	movt	r1, #3
   24f5c:	cmp	r0, r1
   24f60:	beq	24f68 <__assert_fail@plt+0x13b30>
   24f64:	bl	1386c <__assert_fail@plt+0x2434>
   24f68:	ldr	r0, [sl, #132]	; 0x84
   24f6c:	bl	1386c <__assert_fail@plt+0x2434>
   24f70:	mov	r0, sl
   24f74:	sub	sp, fp, #28
   24f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f7c:	b	1386c <__assert_fail@plt+0x2434>
   24f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f84:	add	fp, sp, #28
   24f88:	sub	sp, sp, #28
   24f8c:	ldr	sl, [fp, #8]
   24f90:	mov	r7, #2
   24f94:	cmp	sl, #7
   24f98:	bhi	2506c <__assert_fail@plt+0x13c34>
   24f9c:	mov	r5, r0
   24fa0:	ldr	r0, [r0]
   24fa4:	mov	r6, r3
   24fa8:	mov	r9, r2
   24fac:	mov	r4, r1
   24fb0:	tst	sl, #4
   24fb4:	str	r0, [sp, #24]
   24fb8:	bne	24fd0 <__assert_fail@plt+0x13b98>
   24fbc:	mov	r0, r4
   24fc0:	bl	11330 <strlen@plt>
   24fc4:	mov	r7, r0
   24fc8:	mov	r8, #0
   24fcc:	b	24fd8 <__assert_fail@plt+0x13ba0>
   24fd0:	ldr	r8, [r6]
   24fd4:	ldr	r7, [r6, #4]
   24fd8:	movw	r0, #0
   24fdc:	movw	r1, #0
   24fe0:	movt	r0, #0
   24fe4:	movt	r1, #0
   24fe8:	orrs	r0, r1, r0
   24fec:	str	r0, [sp, #20]
   24ff0:	beq	25000 <__assert_fail@plt+0x13bc8>
   24ff4:	ldr	r0, [sp, #24]
   24ff8:	add	r0, r0, #136	; 0x88
   24ffc:	bl	111d4 <pthread_mutex_lock@plt>
   25000:	ldrb	r0, [r5, #28]
   25004:	tst	r0, #16
   25008:	bne	2501c <__assert_fail@plt+0x13be4>
   2500c:	str	r7, [sp]
   25010:	stmib	sp, {r7, r9}
   25014:	str	r6, [sp, #12]
   25018:	b	25030 <__assert_fail@plt+0x13bf8>
   2501c:	mov	r0, #0
   25020:	str	r7, [sp]
   25024:	str	r7, [sp, #4]
   25028:	str	r0, [sp, #8]
   2502c:	str	r0, [sp, #12]
   25030:	mov	r0, r5
   25034:	mov	r1, r4
   25038:	mov	r2, r7
   2503c:	mov	r3, r8
   25040:	str	sl, [sp, #16]
   25044:	bl	25078 <__assert_fail@plt+0x13c40>
   25048:	mov	r7, r0
   2504c:	ldr	r0, [sp, #20]
   25050:	cmp	r0, #0
   25054:	beq	25064 <__assert_fail@plt+0x13c2c>
   25058:	ldr	r0, [sp, #24]
   2505c:	add	r0, r0, #136	; 0x88
   25060:	bl	11138 <pthread_mutex_unlock@plt>
   25064:	cmp	r7, #0
   25068:	movwne	r7, #1
   2506c:	mov	r0, r7
   25070:	sub	sp, fp, #28
   25074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25078:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2507c:	add	fp, sp, #28
   25080:	sub	sp, sp, #412	; 0x19c
   25084:	ldr	r8, [r0]
   25088:	str	r2, [sp, #68]	; 0x44
   2508c:	str	r1, [sp, #100]	; 0x64
   25090:	mov	sl, r0
   25094:	add	r0, sp, #104	; 0x68
   25098:	mov	r1, #0
   2509c:	mov	r2, #136	; 0x88
   250a0:	mov	r6, r3
   250a4:	mov	r4, #0
   250a8:	bl	1136c <memset@plt>
   250ac:	str	r8, [sp, #188]	; 0xbc
   250b0:	ldr	r0, [fp, #8]
   250b4:	mov	ip, #0
   250b8:	ldr	r1, [sl, #16]
   250bc:	cmp	r1, #0
   250c0:	beq	250dc <__assert_fail@plt+0x13ca4>
   250c4:	ldrb	r2, [sl, #28]
   250c8:	and	r2, r2, #9
   250cc:	cmp	r2, #8
   250d0:	movne	r1, #0
   250d4:	subs	ip, r6, r0
   250d8:	movne	ip, r1
   250dc:	ldr	r2, [sl, #24]
   250e0:	ldr	r7, [fp, #16]
   250e4:	ldr	r1, [sl, #8]
   250e8:	mov	r9, #1
   250ec:	mvn	r3, r2
   250f0:	cmp	r2, r7
   250f4:	addcc	r4, r3, r7
   250f8:	cmp	r1, #0
   250fc:	str	r4, [sp, #32]
   25100:	beq	27ad0 <__assert_fail@plt+0x16698>
   25104:	ldr	r1, [r8, #36]	; 0x24
   25108:	cmp	r1, #0
   2510c:	ldrne	r2, [r8, #40]	; 0x28
   25110:	cmpne	r2, #0
   25114:	beq	27ad0 <__assert_fail@plt+0x16698>
   25118:	ldr	r3, [r8, #44]	; 0x2c
   2511c:	cmp	r3, #0
   25120:	ldrne	r7, [r8, #48]	; 0x30
   25124:	cmpne	r7, #0
   25128:	beq	27ad0 <__assert_fail@plt+0x16698>
   2512c:	ldr	r1, [r1, #8]
   25130:	ldr	r7, [sl, #20]
   25134:	cmp	r1, #0
   25138:	bne	25148 <__assert_fail@plt+0x13d10>
   2513c:	ldr	r1, [r2, #8]
   25140:	cmp	r1, #0
   25144:	beq	26cd0 <__assert_fail@plt+0x15898>
   25148:	str	r0, [sp, #76]	; 0x4c
   2514c:	ldr	r0, [sp, #32]
   25150:	ldr	r1, [fp, #16]
   25154:	subs	lr, r1, r0
   25158:	mov	r0, #1
   2515c:	str	r0, [sp, #44]	; 0x2c
   25160:	bne	25174 <__assert_fail@plt+0x13d3c>
   25164:	ldr	r0, [r8, #76]	; 0x4c
   25168:	cmp	r0, #0
   2516c:	movwne	r0, #1
   25170:	str	r0, [sp, #44]	; 0x2c
   25174:	ldr	r0, [sl, #12]
   25178:	ldr	r2, [r8, #92]	; 0x5c
   2517c:	ldr	r3, [sp, #100]	; 0x64
   25180:	ldr	r1, [r8, #8]
   25184:	str	r7, [sp, #168]	; 0xa8
   25188:	str	sl, [sp, #80]	; 0x50
   2518c:	str	r3, [sp, #104]	; 0x68
   25190:	str	r2, [sp, #184]	; 0xb8
   25194:	ubfx	r3, r0, #22, #1
   25198:	and	r0, r0, #4194304	; 0x400000
   2519c:	ldr	r4, [sp, #68]	; 0x44
   251a0:	add	r5, r1, #1
   251a4:	orrs	sl, r7, r0
   251a8:	strb	r3, [sp, #176]	; 0xb0
   251ac:	add	r3, sp, #104	; 0x68
   251b0:	movwne	sl, #1
   251b4:	add	r3, r3, #44	; 0x2c
   251b8:	cmp	r2, r5
   251bc:	strb	sl, [sp, #179]	; 0xb3
   251c0:	movgt	r5, r2
   251c4:	ldrb	r0, [r8, #88]	; 0x58
   251c8:	vdup.32	q8, r4
   251cc:	vst1.32	{d16-d17}, [r3]
   251d0:	ubfx	r3, r0, #3, #1
   251d4:	strb	r3, [sp, #178]	; 0xb2
   251d8:	ubfx	r0, r0, #2, #1
   251dc:	str	r8, [sp, #96]	; 0x60
   251e0:	str	ip, [sp, #88]	; 0x58
   251e4:	str	r7, [sp, #84]	; 0x54
   251e8:	strb	r0, [sp, #177]	; 0xb1
   251ec:	add	r0, r4, #1
   251f0:	cmp	r0, r5
   251f4:	movlt	r5, r0
   251f8:	cmp	r2, #2
   251fc:	blt	25238 <__assert_fail@plt+0x13e00>
   25200:	mov	r9, #12
   25204:	cmn	r5, #-1073741823	; 0xc0000001
   25208:	bhi	27a7c <__assert_fail@plt+0x16644>
   2520c:	lsl	r1, r5, #2
   25210:	mov	r0, #0
   25214:	mov	r4, lr
   25218:	bl	3557c <__assert_fail@plt+0x24144>
   2521c:	ldr	r7, [sp, #84]	; 0x54
   25220:	ldr	ip, [sp, #88]	; 0x58
   25224:	cmp	r0, #0
   25228:	beq	27a7c <__assert_fail@plt+0x16644>
   2522c:	ldr	r8, [sp, #96]	; 0x60
   25230:	mov	lr, r4
   25234:	str	r0, [sp, #112]	; 0x70
   25238:	cmp	sl, #0
   2523c:	ldr	sl, [sp, #80]	; 0x50
   25240:	mov	r4, #1
   25244:	beq	25274 <__assert_fail@plt+0x13e3c>
   25248:	mov	r0, #0
   2524c:	mov	r1, r5
   25250:	mov	r9, lr
   25254:	mov	r4, #0
   25258:	bl	3557c <__assert_fail@plt+0x24144>
   2525c:	cmp	r0, #0
   25260:	beq	278a8 <__assert_fail@plt+0x16470>
   25264:	ldr	ip, [sp, #88]	; 0x58
   25268:	ldr	r7, [sp, #84]	; 0x54
   2526c:	mov	lr, r9
   25270:	str	r0, [sp, #108]	; 0x6c
   25274:	add	r1, r8, #96	; 0x60
   25278:	str	r5, [sp, #140]	; 0x8c
   2527c:	ldr	r0, [fp, #12]
   25280:	cmp	r4, #0
   25284:	str	r1, [sp, #172]	; 0xac
   25288:	ldrb	r1, [r8, #88]	; 0x58
   2528c:	ubfx	r1, r1, #4, #1
   25290:	strb	r1, [sp, #182]	; 0xb6
   25294:	mov	r1, #0
   25298:	beq	252b4 <__assert_fail@plt+0x13e7c>
   2529c:	ldr	r1, [sp, #100]	; 0x64
   252a0:	str	r1, [sp, #108]	; 0x6c
   252a4:	ldr	r1, [r8, #92]	; 0x5c
   252a8:	cmp	r1, #1
   252ac:	ldr	r1, [sp, #68]	; 0x44
   252b0:	movwgt	r1, #0
   252b4:	str	r1, [sp, #136]	; 0x88
   252b8:	str	r1, [sp, #132]	; 0x84
   252bc:	str	r0, [sp, #160]	; 0xa0
   252c0:	str	r0, [sp, #156]	; 0x9c
   252c4:	str	lr, [sp, #92]	; 0x5c
   252c8:	ldrb	r0, [sl, #28]
   252cc:	lsr	r0, r0, #7
   252d0:	strb	r0, [sp, #181]	; 0xb5
   252d4:	mvn	r0, #0
   252d8:	ldr	r8, [r8, #76]	; 0x4c
   252dc:	str	r0, [sp, #196]	; 0xc4
   252e0:	ldr	r0, [fp, #24]
   252e4:	lsl	sl, r8, #1
   252e8:	cmp	r8, #1
   252ec:	str	r0, [sp, #192]	; 0xc0
   252f0:	blt	25348 <__assert_fail@plt+0x13f10>
   252f4:	movw	r0, #43690	; 0xaaaa
   252f8:	mov	r9, #12
   252fc:	movt	r0, #2730	; 0xaaa
   25300:	cmp	sl, r0
   25304:	bhi	27a7c <__assert_fail@plt+0x16644>
   25308:	add	r0, r8, r8, lsl #1
   2530c:	mov	r4, r5
   25310:	lsl	r0, r0, #4
   25314:	bl	3554c <__assert_fail@plt+0x24114>
   25318:	mov	r5, r0
   2531c:	str	r0, [sp, #220]	; 0xdc
   25320:	lsl	r0, r8, #3
   25324:	bl	3554c <__assert_fail@plt+0x24114>
   25328:	cmp	r0, #0
   2532c:	str	r0, [sp, #236]	; 0xec
   25330:	beq	27a7c <__assert_fail@plt+0x16644>
   25334:	add	lr, sp, #84	; 0x54
   25338:	cmp	r5, #0
   2533c:	mov	r5, r4
   25340:	ldm	lr, {r7, ip, lr}
   25344:	beq	27a7c <__assert_fail@plt+0x16644>
   25348:	mov	r0, #1
   2534c:	cmp	lr, #1
   25350:	str	r0, [sp, #224]	; 0xe0
   25354:	str	sl, [sp, #216]	; 0xd8
   25358:	str	sl, [sp, #232]	; 0xe8
   2535c:	bhi	25370 <__assert_fail@plt+0x13f38>
   25360:	ldr	r0, [sp, #96]	; 0x60
   25364:	ldrb	r0, [r0, #88]	; 0x58
   25368:	tst	r0, #2
   2536c:	beq	2539c <__assert_fail@plt+0x13f64>
   25370:	mov	r9, #12
   25374:	cmn	r5, #-1073741822	; 0xc0000002
   25378:	bhi	27a7c <__assert_fail@plt+0x16644>
   2537c:	mov	r0, #4
   25380:	add	r0, r0, r5, lsl #2
   25384:	bl	3554c <__assert_fail@plt+0x24114>
   25388:	ldr	r7, [sp, #84]	; 0x54
   2538c:	ldr	ip, [sp, #88]	; 0x58
   25390:	cmp	r0, #0
   25394:	str	r0, [sp, #204]	; 0xcc
   25398:	beq	27a7c <__assert_fail@plt+0x16644>
   2539c:	ldr	r1, [fp, #24]
   253a0:	ldr	r2, [sp, #76]	; 0x4c
   253a4:	str	r6, [fp, #-200]	; 0xffffff38
   253a8:	mov	r8, #1
   253ac:	mov	r5, r6
   253b0:	mov	r0, #4
   253b4:	tst	r1, #1
   253b8:	mov	r1, #4
   253bc:	mov	r4, r2
   253c0:	movweq	r1, #6
   253c4:	cmp	r2, r6
   253c8:	str	r1, [sp, #164]	; 0xa4
   253cc:	ldr	r1, [sp, #96]	; 0x60
   253d0:	mvnlt	r8, #0
   253d4:	movlt	r4, r6
   253d8:	movlt	r5, r2
   253dc:	cmp	ip, #0
   253e0:	ldr	r1, [r1, #92]	; 0x5c
   253e4:	str	r1, [sp, #60]	; 0x3c
   253e8:	beq	2542c <__assert_fail@plt+0x13ff4>
   253ec:	cmp	r1, #1
   253f0:	beq	25410 <__assert_fail@plt+0x13fd8>
   253f4:	ldr	r0, [sp, #80]	; 0x50
   253f8:	ldr	r0, [r0, #12]
   253fc:	and	r0, r0, #4194304	; 0x400000
   25400:	orr	r0, r7, r0
   25404:	clz	r0, r0
   25408:	lsr	r0, r0, #5
   2540c:	lsl	r0, r0, #2
   25410:	cmp	r7, #0
   25414:	mov	r1, r7
   25418:	movwne	r1, #1
   2541c:	cmp	r2, r6
   25420:	orrge	r1, r1, #2
   25424:	orr	r0, r1, r0
   25428:	b	25430 <__assert_fail@plt+0x13ff8>
   2542c:	mov	r0, #8
   25430:	add	r1, sp, #104	; 0x68
   25434:	cmp	r2, r6
   25438:	sub	r0, r0, #4
   2543c:	str	r4, [sp, #52]	; 0x34
   25440:	str	r5, [sp, #48]	; 0x30
   25444:	str	r8, [sp, #64]	; 0x40
   25448:	add	r1, r1, #32
   2544c:	str	r0, [sp, #76]	; 0x4c
   25450:	str	r1, [sp, #24]
   25454:	sub	r1, fp, #200	; 0xc8
   25458:	movwlt	r1, #0
   2545c:	cmp	r1, #0
   25460:	str	r1, [sp, #36]	; 0x24
   25464:	movwne	r1, #1
   25468:	str	r1, [sp, #40]	; 0x28
   2546c:	sub	r1, fp, #192	; 0xc0
   25470:	add	r1, r1, #16
   25474:	str	r1, [sp, #28]
   25478:	b	25b48 <__assert_fail@plt+0x14710>
   2547c:	mov	r1, #0
   25480:	sub	r0, fp, #188	; 0xbc
   25484:	str	r8, [fp, #-192]	; 0xffffff40
   25488:	stm	r0, {r1, r6, sl}
   2548c:	ldr	r0, [sp, #28]
   25490:	str	r1, [r0]
   25494:	str	r1, [r0, #4]
   25498:	str	r1, [r0, #8]
   2549c:	add	r0, sp, #104	; 0x68
   254a0:	sub	r1, fp, #192	; 0xc0
   254a4:	bl	32bf0 <__assert_fail@plt+0x217b8>
   254a8:	mov	r9, r0
   254ac:	mov	r0, #0
   254b0:	bl	1386c <__assert_fail@plt+0x2434>
   254b4:	cmp	r9, #0
   254b8:	bne	255b8 <__assert_fail@plt+0x14180>
   254bc:	ldr	r0, [r8]
   254c0:	mov	r4, #0
   254c4:	cmp	r0, #0
   254c8:	beq	25978 <__assert_fail@plt+0x14540>
   254cc:	b	26af8 <__assert_fail@plt+0x156c0>
   254d0:	mov	r9, r0
   254d4:	b	26ae8 <__assert_fail@plt+0x156b0>
   254d8:	sxtb	r0, r0
   254dc:	cmn	r0, #1
   254e0:	ble	25538 <__assert_fail@plt+0x14100>
   254e4:	ldr	r0, [sp, #44]	; 0x2c
   254e8:	mov	lr, #1
   254ec:	mov	r9, sl
   254f0:	cmp	r0, #0
   254f4:	bne	25ec4 <__assert_fail@plt+0x14a8c>
   254f8:	mov	r9, sl
   254fc:	ldr	r8, [sp, #64]	; 0x40
   25500:	mov	sl, r5
   25504:	cmn	r9, #1
   25508:	beq	2598c <__assert_fail@plt+0x14554>
   2550c:	b	267d0 <__assert_fail@plt+0x15398>
   25510:	ldr	r0, [r8, #8]
   25514:	cmp	r0, #1
   25518:	blt	25abc <__assert_fail@plt+0x14684>
   2551c:	ldr	r4, [sp, #188]	; 0xbc
   25520:	mov	r9, #0
   25524:	b	25a28 <__assert_fail@plt+0x145f0>
   25528:	ldr	r0, [sp, #192]	; 0xc0
   2552c:	and	r0, r0, #2
   25530:	eor	r3, r0, #10
   25534:	b	26850 <__assert_fail@plt+0x15418>
   25538:	cmn	sl, #1
   2553c:	ble	2557c <__assert_fail@plt+0x14144>
   25540:	ldr	r0, [sp, #152]	; 0x98
   25544:	cmp	r0, sl
   25548:	beq	25b00 <__assert_fail@plt+0x146c8>
   2554c:	ldr	r0, [sp, #184]	; 0xb8
   25550:	cmp	r0, #2
   25554:	blt	25584 <__assert_fail@plt+0x1414c>
   25558:	ldr	r0, [sp, #112]	; 0x70
   2555c:	mov	r1, sl
   25560:	ldr	r4, [r0, r1, lsl #2]
   25564:	cmn	r4, #1
   25568:	bne	25600 <__assert_fail@plt+0x141c8>
   2556c:	sub	r2, r1, #1
   25570:	cmp	r1, #0
   25574:	mov	r1, r2
   25578:	bgt	25560 <__assert_fail@plt+0x14128>
   2557c:	ldr	r3, [sp, #164]	; 0xa4
   25580:	b	25624 <__assert_fail@plt+0x141ec>
   25584:	ldr	r0, [sp, #108]	; 0x6c
   25588:	ldr	r1, [sp, #172]	; 0xac
   2558c:	mov	r3, #1
   25590:	ldrb	r0, [r0, sl]
   25594:	ubfx	r2, r0, #5, #3
   25598:	ldr	r1, [r1, r2, lsl #2]
   2559c:	and	r2, r0, #31
   255a0:	tst	r1, r3, lsl r2
   255a4:	bne	25624 <__assert_fail@plt+0x141ec>
   255a8:	mov	r3, #0
   255ac:	cmp	r0, #10
   255b0:	beq	25618 <__assert_fail@plt+0x141e0>
   255b4:	b	25624 <__assert_fail@plt+0x141ec>
   255b8:	mov	r0, #0
   255bc:	str	r0, [sp, #56]	; 0x38
   255c0:	b	259cc <__assert_fail@plt+0x14594>
   255c4:	mov	r0, r4
   255c8:	bl	11354 <iswalnum@plt>
   255cc:	mov	r3, #1
   255d0:	cmp	r4, #95	; 0x5f
   255d4:	beq	268c4 <__assert_fail@plt+0x1548c>
   255d8:	cmp	r0, #0
   255dc:	beq	268ac <__assert_fail@plt+0x15474>
   255e0:	b	268c4 <__assert_fail@plt+0x1548c>
   255e4:	mov	r0, r5
   255e8:	bl	11354 <iswalnum@plt>
   255ec:	cmp	r5, #95	; 0x5f
   255f0:	beq	25e78 <__assert_fail@plt+0x14a40>
   255f4:	cmp	r0, #0
   255f8:	beq	25ddc <__assert_fail@plt+0x149a4>
   255fc:	b	25e78 <__assert_fail@plt+0x14a40>
   25600:	ldrb	r0, [sp, #182]	; 0xb6
   25604:	cmp	r0, #0
   25608:	bne	25b10 <__assert_fail@plt+0x146d8>
   2560c:	mov	r3, #0
   25610:	cmp	r4, #10
   25614:	bne	25624 <__assert_fail@plt+0x141ec>
   25618:	ldrb	r3, [sp, #181]	; 0xb5
   2561c:	cmp	r3, #0
   25620:	movwne	r3, #2
   25624:	ldr	r0, [r8, #8]
   25628:	cmp	r0, #1
   2562c:	blt	256d8 <__assert_fail@plt+0x142a0>
   25630:	ldr	r6, [sp, #188]	; 0xbc
   25634:	str	r7, [sp, #16]
   25638:	ldr	r7, [r8, #12]
   2563c:	str	sl, [sp, #20]
   25640:	and	ip, r3, #8
   25644:	and	sl, r3, #2
   25648:	and	r3, r3, #1
   2564c:	mov	r2, #0
   25650:	ldr	r6, [r6]
   25654:	ldr	r1, [r7, r2, lsl #2]
   25658:	add	r4, r6, r1, lsl #3
   2565c:	mov	lr, r1
   25660:	ldr	r4, [r4, #4]
   25664:	uxtb	r1, r4
   25668:	cmp	r1, #2
   2566c:	bne	256bc <__assert_fail@plt+0x14284>
   25670:	movw	r1, #65280	; 0xff00
   25674:	movt	r1, #3
   25678:	tst	r4, r1
   2567c:	beq	256e0 <__assert_fail@plt+0x142a8>
   25680:	cmp	r3, #0
   25684:	bne	25690 <__assert_fail@plt+0x14258>
   25688:	ands	r1, r4, #1024	; 0x400
   2568c:	bne	256bc <__assert_fail@plt+0x14284>
   25690:	cmp	r3, #0
   25694:	andsne	r1, r4, #2048	; 0x800
   25698:	bne	256bc <__assert_fail@plt+0x14284>
   2569c:	cmp	sl, #0
   256a0:	bne	256ac <__assert_fail@plt+0x14274>
   256a4:	ands	r1, r4, #8192	; 0x2000
   256a8:	bne	256bc <__assert_fail@plt+0x14284>
   256ac:	cmp	ip, #0
   256b0:	bne	256e0 <__assert_fail@plt+0x142a8>
   256b4:	ands	r1, r4, #32768	; 0x8000
   256b8:	beq	256e0 <__assert_fail@plt+0x142a8>
   256bc:	add	r2, r2, #1
   256c0:	mov	lr, #0
   256c4:	cmp	r2, r0
   256c8:	blt	25654 <__assert_fail@plt+0x1421c>
   256cc:	ldr	sl, [sp, #20]
   256d0:	ldr	r7, [sp, #16]
   256d4:	b	25ec4 <__assert_fail@plt+0x14a8c>
   256d8:	mov	lr, #0
   256dc:	b	25ec4 <__assert_fail@plt+0x14a8c>
   256e0:	ldr	sl, [sp, #20]
   256e4:	ldr	r1, [sp, #44]	; 0x2c
   256e8:	clz	r0, lr
   256ec:	ldr	r7, [sp, #16]
   256f0:	cmp	lr, #0
   256f4:	lsr	r0, r0, #5
   256f8:	movwne	lr, #1
   256fc:	mov	r9, sl
   25700:	orr	r0, r1, r0
   25704:	mvneq	r9, #0
   25708:	cmp	r0, #0
   2570c:	beq	254f8 <__assert_fail@plt+0x140c0>
   25710:	b	25ec4 <__assert_fail@plt+0x14a8c>
   25714:	ldr	r3, [sp, #164]	; 0xa4
   25718:	movw	r9, #65280	; 0xff00
   2571c:	movt	r9, #3
   25720:	b	25864 <__assert_fail@plt+0x1442c>
   25724:	ldr	r0, [sp, #192]	; 0xc0
   25728:	and	r0, r0, #2
   2572c:	eor	r3, r0, #10
   25730:	b	25864 <__assert_fail@plt+0x1442c>
   25734:	mov	r0, r7
   25738:	bl	11354 <iswalnum@plt>
   2573c:	mov	r3, #1
   25740:	cmp	r7, #95	; 0x5f
   25744:	beq	25718 <__assert_fail@plt+0x142e0>
   25748:	movw	r9, #65280	; 0xff00
   2574c:	cmp	r0, #0
   25750:	movt	r9, #3
   25754:	beq	2584c <__assert_fail@plt+0x14414>
   25758:	b	25864 <__assert_fail@plt+0x1442c>
   2575c:	ldr	r1, [r4]
   25760:	cmp	r1, #0
   25764:	bne	26a44 <__assert_fail@plt+0x1560c>
   25768:	cmp	sl, #1
   2576c:	blt	25978 <__assert_fail@plt+0x14540>
   25770:	ldr	r0, [sp, #204]	; 0xcc
   25774:	str	r4, [sp, #56]	; 0x38
   25778:	lsl	r4, sl, #2
   2577c:	mov	r5, sl
   25780:	sub	r0, r0, #4
   25784:	ldr	r6, [r0, r5, lsl #2]
   25788:	cmp	r6, #0
   2578c:	ldrbne	r1, [r6, #52]	; 0x34
   25790:	tstne	r1, #16
   25794:	bne	257b0 <__assert_fail@plt+0x14378>
   25798:	sub	r5, r5, #1
   2579c:	sub	r4, r4, #4
   257a0:	add	r1, r5, #1
   257a4:	cmp	r1, #2
   257a8:	bge	25784 <__assert_fail@plt+0x1434c>
   257ac:	b	25974 <__assert_fail@plt+0x1453c>
   257b0:	cmp	r5, #0
   257b4:	ble	25714 <__assert_fail@plt+0x142dc>
   257b8:	ldr	r0, [sp, #152]	; 0x98
   257bc:	movw	r9, #65280	; 0xff00
   257c0:	movt	r9, #3
   257c4:	add	r0, r0, #1
   257c8:	cmp	r0, r5
   257cc:	beq	25724 <__assert_fail@plt+0x142ec>
   257d0:	ldr	r0, [sp, #184]	; 0xb8
   257d4:	cmp	r0, #2
   257d8:	blt	25808 <__assert_fail@plt+0x143d0>
   257dc:	ldr	r0, [sp, #112]	; 0x70
   257e0:	mov	r1, r5
   257e4:	sub	r0, r0, #4
   257e8:	ldr	r7, [r0, r1, lsl #2]
   257ec:	cmn	r7, #1
   257f0:	bne	25840 <__assert_fail@plt+0x14408>
   257f4:	sub	r1, r1, #1
   257f8:	cmp	r1, #0
   257fc:	bgt	257e8 <__assert_fail@plt+0x143b0>
   25800:	ldr	r3, [sp, #164]	; 0xa4
   25804:	b	25864 <__assert_fail@plt+0x1442c>
   25808:	ldr	r0, [sp, #108]	; 0x6c
   2580c:	ldr	r1, [sp, #172]	; 0xac
   25810:	mov	r3, #1
   25814:	add	r0, r0, r5
   25818:	ldrb	r0, [r0, #-1]
   2581c:	ubfx	r2, r0, #5, #3
   25820:	ldr	r1, [r1, r2, lsl #2]
   25824:	and	r2, r0, #31
   25828:	tst	r1, r3, lsl r2
   2582c:	bne	25864 <__assert_fail@plt+0x1442c>
   25830:	mov	r3, #0
   25834:	cmp	r0, #10
   25838:	beq	25858 <__assert_fail@plt+0x14420>
   2583c:	b	25864 <__assert_fail@plt+0x1442c>
   25840:	ldrb	r0, [sp, #182]	; 0xb6
   25844:	cmp	r0, #0
   25848:	bne	25734 <__assert_fail@plt+0x142fc>
   2584c:	mov	r3, #0
   25850:	cmp	r7, #10
   25854:	bne	25864 <__assert_fail@plt+0x1442c>
   25858:	ldrb	r3, [sp, #181]	; 0xb5
   2585c:	cmp	r3, #0
   25860:	movwne	r3, #2
   25864:	ldr	r0, [r6, #8]
   25868:	sub	sl, r5, #1
   2586c:	cmp	r0, #1
   25870:	blt	25908 <__assert_fail@plt+0x144d0>
   25874:	and	r1, r3, #8
   25878:	ldr	r7, [r6, #12]
   2587c:	and	lr, r3, #1
   25880:	mov	r2, #0
   25884:	str	r1, [sp, #16]
   25888:	and	r1, r3, #2
   2588c:	str	r1, [sp, #20]
   25890:	ldr	r1, [sp, #188]	; 0xbc
   25894:	ldr	r1, [r1]
   25898:	ldr	r6, [r7, r2, lsl #2]
   2589c:	add	r3, r1, r6, lsl #3
   258a0:	ldr	ip, [r3, #4]
   258a4:	uxtb	r3, ip
   258a8:	cmp	r3, #2
   258ac:	bne	258fc <__assert_fail@plt+0x144c4>
   258b0:	tst	ip, r9
   258b4:	beq	2590c <__assert_fail@plt+0x144d4>
   258b8:	cmp	lr, #0
   258bc:	bne	258c8 <__assert_fail@plt+0x14490>
   258c0:	ands	r3, ip, #1024	; 0x400
   258c4:	bne	258fc <__assert_fail@plt+0x144c4>
   258c8:	cmp	lr, #0
   258cc:	andsne	r3, ip, #2048	; 0x800
   258d0:	bne	258fc <__assert_fail@plt+0x144c4>
   258d4:	ldr	r3, [sp, #20]
   258d8:	cmp	r3, #0
   258dc:	bne	258e8 <__assert_fail@plt+0x144b0>
   258e0:	ands	r3, ip, #8192	; 0x2000
   258e4:	bne	258fc <__assert_fail@plt+0x144c4>
   258e8:	ldr	r3, [sp, #16]
   258ec:	cmp	r3, #0
   258f0:	bne	2590c <__assert_fail@plt+0x144d4>
   258f4:	ands	r3, ip, #32768	; 0x8000
   258f8:	beq	2590c <__assert_fail@plt+0x144d4>
   258fc:	add	r2, r2, #1
   25900:	cmp	r2, r0
   25904:	blt	25898 <__assert_fail@plt+0x14460>
   25908:	mov	r6, #0
   2590c:	ldr	r0, [sp, #56]	; 0x38
   25910:	mov	r2, r4
   25914:	mov	r1, #0
   25918:	mov	r4, r0
   2591c:	bl	1136c <memset@plt>
   25920:	sub	r0, fp, #188	; 0xbc
   25924:	str	r8, [fp, #-192]	; 0xffffff40
   25928:	mov	r1, #0
   2592c:	stm	r0, {r4, r6, sl}
   25930:	ldr	r0, [sp, #28]
   25934:	str	r1, [r0]
   25938:	str	r1, [r0, #4]
   2593c:	str	r1, [r0, #8]
   25940:	add	r0, sp, #104	; 0x68
   25944:	sub	r1, fp, #192	; 0xc0
   25948:	bl	32bf0 <__assert_fail@plt+0x217b8>
   2594c:	mov	r9, r0
   25950:	mov	r0, #0
   25954:	bl	1386c <__assert_fail@plt+0x2434>
   25958:	cmp	r9, #0
   2595c:	bne	259c8 <__assert_fail@plt+0x14590>
   25960:	ldr	r0, [r8]
   25964:	cmp	r0, #0
   25968:	beq	2575c <__assert_fail@plt+0x14324>
   2596c:	sub	sl, r5, #1
   25970:	b	26a44 <__assert_fail@plt+0x1560c>
   25974:	ldr	r4, [sp, #56]	; 0x38
   25978:	mov	r0, r8
   2597c:	bl	1386c <__assert_fail@plt+0x2434>
   25980:	mov	r0, r4
   25984:	bl	1386c <__assert_fail@plt+0x2434>
   25988:	ldr	r8, [sp, #64]	; 0x40
   2598c:	add	r0, sp, #104	; 0x68
   25990:	bl	2ee28 <__assert_fail@plt+0x1d9f0>
   25994:	ldr	r0, [fp, #-200]	; 0xffffff38
   25998:	ldr	r5, [sp, #48]	; 0x30
   2599c:	ldr	r4, [sp, #52]	; 0x34
   259a0:	mov	r9, #1
   259a4:	add	r6, r0, r8
   259a8:	cmp	r6, r5
   259ac:	str	r6, [fp, #-200]	; 0xffffff38
   259b0:	blt	27a7c <__assert_fail@plt+0x16644>
   259b4:	ldr	ip, [sp, #88]	; 0x58
   259b8:	ldr	r7, [sp, #84]	; 0x54
   259bc:	cmp	r4, r6
   259c0:	bge	25b48 <__assert_fail@plt+0x14710>
   259c4:	b	27a7c <__assert_fail@plt+0x16644>
   259c8:	str	r4, [sp, #56]	; 0x38
   259cc:	mov	r0, r8
   259d0:	bl	1386c <__assert_fail@plt+0x2434>
   259d4:	ldr	r0, [sp, #56]	; 0x38
   259d8:	bl	1386c <__assert_fail@plt+0x2434>
   259dc:	ldr	r8, [sp, #96]	; 0x60
   259e0:	ldr	sl, [sp, #92]	; 0x5c
   259e4:	ldr	r5, [sp, #80]	; 0x50
   259e8:	cmp	r9, #0
   259ec:	sub	r6, fp, #48	; 0x30
   259f0:	beq	26b2c <__assert_fail@plt+0x156f4>
   259f4:	ldr	r8, [sp, #64]	; 0x40
   259f8:	cmp	r9, #1
   259fc:	beq	2598c <__assert_fail@plt+0x14554>
   25a00:	b	27a7c <__assert_fail@plt+0x16644>
   25a04:	ldr	r0, [sp, #236]	; 0xec
   25a08:	lsl	r1, r7, #3
   25a0c:	bl	3557c <__assert_fail@plt+0x24144>
   25a10:	cmp	r0, #0
   25a14:	beq	25af4 <__assert_fail@plt+0x146bc>
   25a18:	str	r0, [sp, #236]	; 0xec
   25a1c:	lsl	r0, r7, #1
   25a20:	str	r0, [sp, #232]	; 0xe8
   25a24:	b	25a70 <__assert_fail@plt+0x14638>
   25a28:	ldr	r1, [r8, #12]
   25a2c:	ldr	r6, [r1, r9, lsl #2]
   25a30:	ldr	r1, [r4]
   25a34:	add	r2, r1, r6, lsl #3
   25a38:	ldrb	r2, [r2, #4]
   25a3c:	cmp	r2, #8
   25a40:	bne	25ab0 <__assert_fail@plt+0x14678>
   25a44:	ldr	r1, [r1, r6, lsl #3]
   25a48:	cmp	r1, #31
   25a4c:	bgt	25ab0 <__assert_fail@plt+0x14678>
   25a50:	ldr	r2, [r4, #80]	; 0x50
   25a54:	mov	r3, #1
   25a58:	tst	r2, r3, lsl r1
   25a5c:	beq	25ab0 <__assert_fail@plt+0x14678>
   25a60:	ldr	r7, [sp, #228]	; 0xe4
   25a64:	ldr	r0, [sp, #232]	; 0xe8
   25a68:	cmp	r7, r0
   25a6c:	beq	25a04 <__assert_fail@plt+0x145cc>
   25a70:	mov	r0, #1
   25a74:	mov	r1, #24
   25a78:	bl	354f8 <__assert_fail@plt+0x240c0>
   25a7c:	ldr	r1, [sp, #228]	; 0xe4
   25a80:	ldr	r2, [sp, #236]	; 0xec
   25a84:	str	r0, [r2, r1, lsl #2]
   25a88:	ldr	r0, [sp, #236]	; 0xec
   25a8c:	ldr	r0, [r0, r1, lsl #2]
   25a90:	cmp	r0, #0
   25a94:	beq	25af4 <__assert_fail@plt+0x146bc>
   25a98:	add	r1, r1, #1
   25a9c:	str	r6, [r0, #4]
   25aa0:	str	r1, [sp, #228]	; 0xe4
   25aa4:	mov	r1, #0
   25aa8:	str	r1, [r0]
   25aac:	ldr	r0, [r8, #8]
   25ab0:	add	r9, r9, #1
   25ab4:	cmp	r9, r0
   25ab8:	blt	25a28 <__assert_fail@plt+0x145f0>
   25abc:	mov	r7, #0
   25ac0:	str	r7, [fp, #-196]	; 0xffffff3c
   25ac4:	ldrb	r0, [r8, #52]	; 0x34
   25ac8:	tst	r0, #64	; 0x40
   25acc:	beq	25eb0 <__assert_fail@plt+0x14a78>
   25ad0:	add	r1, r8, #4
   25ad4:	add	r0, sp, #104	; 0x68
   25ad8:	bl	2efcc <__assert_fail@plt+0x1db94>
   25adc:	mov	r7, #0
   25ae0:	cmp	r0, #0
   25ae4:	str	r0, [fp, #-196]	; 0xffffff3c
   25ae8:	beq	25eb0 <__assert_fail@plt+0x14a78>
   25aec:	mov	r9, r0
   25af0:	b	254fc <__assert_fail@plt+0x140c4>
   25af4:	mov	r9, #12
   25af8:	mov	sl, r5
   25afc:	b	267d8 <__assert_fail@plt+0x153a0>
   25b00:	ldr	r0, [sp, #192]	; 0xc0
   25b04:	and	r0, r0, #2
   25b08:	eor	r3, r0, #10
   25b0c:	b	25624 <__assert_fail@plt+0x141ec>
   25b10:	mov	r0, r4
   25b14:	mov	r6, r7
   25b18:	bl	11354 <iswalnum@plt>
   25b1c:	mov	r3, #1
   25b20:	cmp	r4, #95	; 0x5f
   25b24:	beq	25b3c <__assert_fail@plt+0x14704>
   25b28:	ldr	r5, [sp, #92]	; 0x5c
   25b2c:	cmp	r0, #0
   25b30:	mov	r7, r6
   25b34:	beq	2560c <__assert_fail@plt+0x141d4>
   25b38:	b	25624 <__assert_fail@plt+0x141ec>
   25b3c:	ldr	r5, [sp, #92]	; 0x5c
   25b40:	mov	r7, r6
   25b44:	b	25624 <__assert_fail@plt+0x141ec>
   25b48:	ldr	r1, [sp, #76]	; 0x4c
   25b4c:	cmp	r1, #4
   25b50:	bhi	25c54 <__assert_fail@plt+0x1481c>
   25b54:	add	r0, pc, #0
   25b58:	ldr	pc, [r0, r1, lsl #2]
   25b5c:	andeq	r5, r2, r0, ror fp
   25b60:	andeq	r5, r2, r0, ror fp
   25b64:			; <UNDEFINED> instruction: 0x00025bbc
   25b68:	andeq	r5, r2, ip, ror #23
   25b6c:	ldrdeq	r5, [r2], -ip
   25b70:	mov	r9, #1
   25b74:	cmp	r6, r5
   25b78:	blt	27a7c <__assert_fail@plt+0x16644>
   25b7c:	ldr	r1, [sp, #68]	; 0x44
   25b80:	mov	r0, #0
   25b84:	cmp	r6, r1
   25b88:	ldrlt	r0, [sp, #100]	; 0x64
   25b8c:	ldrblt	r0, [r0, r6]
   25b90:	cmp	r7, #0
   25b94:	ldrbne	r0, [r7, r0]
   25b98:	ldrb	r0, [ip, r0]
   25b9c:	cmp	r0, #0
   25ba0:	bne	25cdc <__assert_fail@plt+0x148a4>
   25ba4:	sub	r0, r6, #1
   25ba8:	cmp	r6, r5
   25bac:	mov	r6, r0
   25bb0:	str	r0, [fp, #-200]	; 0xffffff38
   25bb4:	bgt	25b80 <__assert_fail@plt+0x14748>
   25bb8:	b	27a7c <__assert_fail@plt+0x16644>
   25bbc:	ldr	r1, [sp, #100]	; 0x64
   25bc0:	cmp	r6, r4
   25bc4:	bge	25c1c <__assert_fail@plt+0x147e4>
   25bc8:	ldrb	r0, [r1, r6]
   25bcc:	ldrb	r0, [ip, r0]
   25bd0:	cmp	r0, #0
   25bd4:	bne	25c1c <__assert_fail@plt+0x147e4>
   25bd8:	add	r6, r6, #1
   25bdc:	cmp	r6, r4
   25be0:	str	r6, [fp, #-200]	; 0xffffff38
   25be4:	blt	25bc8 <__assert_fail@plt+0x14790>
   25be8:	b	25c1c <__assert_fail@plt+0x147e4>
   25bec:	cmp	r6, r4
   25bf0:	bge	25c1c <__assert_fail@plt+0x147e4>
   25bf4:	ldr	r1, [sp, #100]	; 0x64
   25bf8:	ldrb	r0, [r1, r6]
   25bfc:	ldrb	r0, [r7, r0]
   25c00:	ldrb	r0, [ip, r0]
   25c04:	cmp	r0, #0
   25c08:	bne	25c1c <__assert_fail@plt+0x147e4>
   25c0c:	add	r6, r6, #1
   25c10:	cmp	r6, r4
   25c14:	str	r6, [fp, #-200]	; 0xffffff38
   25c18:	blt	25bf8 <__assert_fail@plt+0x147c0>
   25c1c:	cmp	r6, r4
   25c20:	bne	25cdc <__assert_fail@plt+0x148a4>
   25c24:	ldr	r1, [sp, #68]	; 0x44
   25c28:	mov	r0, #0
   25c2c:	mov	r6, r4
   25c30:	cmp	r4, r1
   25c34:	ldr	r1, [sp, #100]	; 0x64
   25c38:	ldrblt	r0, [r1, r4]
   25c3c:	cmp	r7, #0
   25c40:	ldrbne	r0, [r7, r0]
   25c44:	ldrb	r0, [ip, r0]
   25c48:	cmp	r0, #0
   25c4c:	bne	25cdc <__assert_fail@plt+0x148a4>
   25c50:	b	27c24 <__assert_fail@plt+0x167ec>
   25c54:	ldr	r0, [sp, #128]	; 0x80
   25c58:	ldr	r2, [sp, #136]	; 0x88
   25c5c:	sub	r1, r6, r0
   25c60:	cmp	r1, r2
   25c64:	bcs	25ca8 <__assert_fail@plt+0x14870>
   25c68:	ldr	r3, [sp, #132]	; 0x84
   25c6c:	mov	r2, #0
   25c70:	cmp	r1, r3
   25c74:	ldrcc	r2, [sp, #108]	; 0x6c
   25c78:	ldrbcc	r2, [r2, r1]
   25c7c:	ldrb	r1, [ip, r2]
   25c80:	cmp	r1, #0
   25c84:	bne	25cdc <__assert_fail@plt+0x148a4>
   25c88:	add	r6, r6, r8
   25c8c:	mov	r9, #1
   25c90:	cmp	r6, r5
   25c94:	str	r6, [fp, #-200]	; 0xffffff38
   25c98:	blt	27a7c <__assert_fail@plt+0x16644>
   25c9c:	cmp	r6, r4
   25ca0:	ble	25c58 <__assert_fail@plt+0x14820>
   25ca4:	b	27a7c <__assert_fail@plt+0x16644>
   25ca8:	ldr	r2, [fp, #24]
   25cac:	add	r0, sp, #104	; 0x68
   25cb0:	mov	r1, r6
   25cb4:	bl	2e41c <__assert_fail@plt+0x1cfe4>
   25cb8:	cmp	r0, #0
   25cbc:	bne	278bc <__assert_fail@plt+0x16484>
   25cc0:	ldr	r0, [sp, #128]	; 0x80
   25cc4:	ldr	r6, [fp, #-200]	; 0xffffff38
   25cc8:	ldr	ip, [sp, #88]	; 0x58
   25ccc:	ldr	r4, [sp, #52]	; 0x34
   25cd0:	ldr	r5, [sp, #48]	; 0x30
   25cd4:	sub	r1, r6, r0
   25cd8:	b	25c68 <__assert_fail@plt+0x14830>
   25cdc:	ldr	r2, [fp, #24]
   25ce0:	add	r0, sp, #104	; 0x68
   25ce4:	mov	r1, r6
   25ce8:	bl	2e41c <__assert_fail@plt+0x1cfe4>
   25cec:	cmp	r0, #0
   25cf0:	bne	278bc <__assert_fail@plt+0x16484>
   25cf4:	ldr	r0, [sp, #60]	; 0x3c
   25cf8:	cmp	r0, #1
   25cfc:	ldrne	r0, [sp, #132]	; 0x84
   25d00:	cmpne	r0, #0
   25d04:	bne	25d8c <__assert_fail@plt+0x14954>
   25d08:	mov	r0, #0
   25d0c:	str	r0, [sp, #212]	; 0xd4
   25d10:	str	r0, [sp, #224]	; 0xe0
   25d14:	str	r0, [sp, #208]	; 0xd0
   25d18:	str	r0, [fp, #-196]	; 0xffffff3c
   25d1c:	ldr	r4, [sp, #188]	; 0xbc
   25d20:	ldr	sl, [sp, #144]	; 0x90
   25d24:	ldr	r8, [r4, #36]	; 0x24
   25d28:	ldrsb	r0, [r8, #52]	; 0x34
   25d2c:	cmn	r0, #1
   25d30:	bgt	25e7c <__assert_fail@plt+0x14a44>
   25d34:	cmp	sl, #0
   25d38:	ble	25d7c <__assert_fail@plt+0x14944>
   25d3c:	ldr	r1, [sp, #152]	; 0x98
   25d40:	sub	r0, sl, #1
   25d44:	cmp	r1, r0
   25d48:	beq	25e64 <__assert_fail@plt+0x14a2c>
   25d4c:	ldr	r1, [sp, #184]	; 0xb8
   25d50:	cmp	r1, #2
   25d54:	blt	25da0 <__assert_fail@plt+0x14968>
   25d58:	ldr	r0, [sp, #112]	; 0x70
   25d5c:	mov	r1, sl
   25d60:	sub	r0, r0, #4
   25d64:	ldr	r5, [r0, r1, lsl #2]
   25d68:	cmn	r5, #1
   25d6c:	bne	25dd0 <__assert_fail@plt+0x14998>
   25d70:	sub	r1, r1, #1
   25d74:	cmp	r1, #0
   25d78:	bgt	25d64 <__assert_fail@plt+0x1492c>
   25d7c:	ldr	r3, [sp, #164]	; 0xa4
   25d80:	tst	r3, #1
   25d84:	beq	25df8 <__assert_fail@plt+0x149c0>
   25d88:	b	25e78 <__assert_fail@plt+0x14a40>
   25d8c:	ldr	r0, [sp, #112]	; 0x70
   25d90:	ldr	r0, [r0]
   25d94:	cmn	r0, #1
   25d98:	bne	25d08 <__assert_fail@plt+0x148d0>
   25d9c:	b	25994 <__assert_fail@plt+0x1455c>
   25da0:	ldr	r1, [sp, #108]	; 0x6c
   25da4:	ldr	r2, [sp, #172]	; 0xac
   25da8:	mov	r3, #1
   25dac:	ldrb	r0, [r1, r0]
   25db0:	ubfx	r1, r0, #5, #3
   25db4:	ldr	r1, [r2, r1, lsl #2]
   25db8:	and	r2, r0, #31
   25dbc:	tst	r1, r3, lsl r2
   25dc0:	bne	25e78 <__assert_fail@plt+0x14a40>
   25dc4:	cmp	r0, #10
   25dc8:	beq	25de4 <__assert_fail@plt+0x149ac>
   25dcc:	b	25e7c <__assert_fail@plt+0x14a44>
   25dd0:	ldrb	r0, [sp, #182]	; 0xb6
   25dd4:	cmp	r0, #0
   25dd8:	bne	255e4 <__assert_fail@plt+0x141ac>
   25ddc:	cmp	r5, #10
   25de0:	bne	25e7c <__assert_fail@plt+0x14a44>
   25de4:	ldrb	r3, [sp, #181]	; 0xb5
   25de8:	cmp	r3, #0
   25dec:	movwne	r3, #2
   25df0:	tst	r3, #1
   25df4:	bne	25e78 <__assert_fail@plt+0x14a40>
   25df8:	cmp	r3, #0
   25dfc:	beq	25e7c <__assert_fail@plt+0x14a44>
   25e00:	ands	r1, r3, #2
   25e04:	and	r0, r3, #4
   25e08:	cmpne	r0, #0
   25e0c:	bne	25e44 <__assert_fail@plt+0x14a0c>
   25e10:	cmp	r1, #0
   25e14:	bne	25e54 <__assert_fail@plt+0x14a1c>
   25e18:	ldr	r8, [r4, #36]	; 0x24
   25e1c:	cmp	r0, #0
   25e20:	beq	25e7c <__assert_fail@plt+0x14a44>
   25e24:	ldr	r2, [r8, #40]	; 0x28
   25e28:	sub	r0, fp, #196	; 0xc4
   25e2c:	mov	r1, r4
   25e30:	bl	2de9c <__assert_fail@plt+0x1ca64>
   25e34:	mov	r8, r0
   25e38:	cmp	r8, #0
   25e3c:	bne	25e84 <__assert_fail@plt+0x14a4c>
   25e40:	b	278a8 <__assert_fail@plt+0x16470>
   25e44:	ldr	r8, [r4, #48]	; 0x30
   25e48:	cmp	r8, #0
   25e4c:	bne	25e84 <__assert_fail@plt+0x14a4c>
   25e50:	b	278a8 <__assert_fail@plt+0x16470>
   25e54:	ldr	r8, [r4, #44]	; 0x2c
   25e58:	cmp	r8, #0
   25e5c:	bne	25e84 <__assert_fail@plt+0x14a4c>
   25e60:	b	278a8 <__assert_fail@plt+0x16470>
   25e64:	ldr	r0, [sp, #192]	; 0xc0
   25e68:	and	r0, r0, #2
   25e6c:	eor	r3, r0, #10
   25e70:	tst	r3, #1
   25e74:	beq	25df8 <__assert_fail@plt+0x149c0>
   25e78:	ldr	r8, [r4, #40]	; 0x28
   25e7c:	cmp	r8, #0
   25e80:	beq	278a8 <__assert_fail@plt+0x16470>
   25e84:	ldr	r0, [sp, #204]	; 0xcc
   25e88:	ldr	r1, [sp, #40]	; 0x28
   25e8c:	ldr	r5, [sp, #92]	; 0x5c
   25e90:	cmp	r0, #0
   25e94:	mov	r7, r1
   25e98:	beq	25eb0 <__assert_fail@plt+0x14a78>
   25e9c:	str	r8, [r0, sl, lsl #2]
   25ea0:	mov	r7, r1
   25ea4:	ldr	r0, [r4, #76]	; 0x4c
   25ea8:	cmp	r0, #0
   25eac:	bne	25510 <__assert_fail@plt+0x140d8>
   25eb0:	ldrb	r0, [r8, #52]	; 0x34
   25eb4:	mov	lr, #0
   25eb8:	mvn	r9, #0
   25ebc:	tst	r0, #16
   25ec0:	bne	254d8 <__assert_fail@plt+0x140a0>
   25ec4:	ldr	r0, [sp, #144]	; 0x90
   25ec8:	ldr	r1, [sp, #160]	; 0xa0
   25ecc:	str	lr, [sp, #56]	; 0x38
   25ed0:	cmp	r1, r0
   25ed4:	ble	267a4 <__assert_fail@plt+0x1536c>
   25ed8:	ldr	r1, [sp, #36]	; 0x24
   25edc:	str	r1, [sp, #72]	; 0x48
   25ee0:	b	26690 <__assert_fail@plt+0x15258>
   25ee4:	ldr	r0, [fp, #-196]	; 0xffffff3c
   25ee8:	cmp	r0, #0
   25eec:	bne	278a8 <__assert_fail@plt+0x16470>
   25ef0:	ldr	r0, [sp, #56]	; 0x38
   25ef4:	ldr	r1, [sp, #44]	; 0x2c
   25ef8:	clz	r0, r0
   25efc:	lsr	r0, r0, #5
   25f00:	orr	r0, r1, r0
   25f04:	cmp	r0, #1
   25f08:	bne	267ac <__assert_fail@plt+0x15374>
   25f0c:	ldr	r0, [sp, #204]	; 0xcc
   25f10:	cmp	r0, #0
   25f14:	bne	25f6c <__assert_fail@plt+0x14b34>
   25f18:	b	267ac <__assert_fail@plt+0x15374>
   25f1c:	ldr	r0, [sp, #144]	; 0x90
   25f20:	cmn	r0, #1
   25f24:	ble	25f60 <__assert_fail@plt+0x14b28>
   25f28:	ldr	r1, [sp, #152]	; 0x98
   25f2c:	cmp	r1, r0
   25f30:	beq	265f4 <__assert_fail@plt+0x151bc>
   25f34:	ldr	r1, [sp, #184]	; 0xb8
   25f38:	cmp	r1, #2
   25f3c:	blt	25fc8 <__assert_fail@plt+0x14b90>
   25f40:	ldr	r1, [sp, #112]	; 0x70
   25f44:	ldr	r4, [r1, r0, lsl #2]
   25f48:	cmn	r4, #1
   25f4c:	bne	25ffc <__assert_fail@plt+0x14bc4>
   25f50:	sub	r2, r0, #1
   25f54:	cmp	r0, #0
   25f58:	mov	r0, r2
   25f5c:	bgt	25f44 <__assert_fail@plt+0x14b0c>
   25f60:	ldr	r3, [sp, #164]	; 0xa4
   25f64:	b	26020 <__assert_fail@plt+0x14be8>
   25f68:	ldr	r0, [sp, #204]	; 0xcc
   25f6c:	ldr	r2, [sp, #144]	; 0x90
   25f70:	ldr	r1, [sp, #208]	; 0xd0
   25f74:	add	r2, r2, #1
   25f78:	sub	r3, r2, #1
   25f7c:	cmp	r3, r1
   25f80:	bge	267ac <__assert_fail@plt+0x15374>
   25f84:	str	r2, [sp, #144]	; 0x90
   25f88:	ldr	r3, [r0, r2, lsl #2]
   25f8c:	add	r2, r2, #1
   25f90:	cmp	r3, #0
   25f94:	beq	25f78 <__assert_fail@plt+0x14b40>
   25f98:	sub	r0, fp, #196	; 0xc4
   25f9c:	add	r1, sp, #104	; 0x68
   25fa0:	mov	r2, #0
   25fa4:	bl	2fb60 <__assert_fail@plt+0x1e728>
   25fa8:	cmp	r0, #0
   25fac:	mov	r8, r0
   25fb0:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   25fb4:	cmpeq	r0, #0
   25fb8:	beq	25f68 <__assert_fail@plt+0x14b30>
   25fbc:	cmp	r8, #0
   25fc0:	bne	26744 <__assert_fail@plt+0x1530c>
   25fc4:	b	267ac <__assert_fail@plt+0x15374>
   25fc8:	ldr	r1, [sp, #108]	; 0x6c
   25fcc:	ldr	r2, [sp, #172]	; 0xac
   25fd0:	mov	r3, #1
   25fd4:	ldrb	r0, [r1, r0]
   25fd8:	ubfx	r1, r0, #5, #3
   25fdc:	ldr	r1, [r2, r1, lsl #2]
   25fe0:	and	r2, r0, #31
   25fe4:	tst	r1, r3, lsl r2
   25fe8:	bne	26020 <__assert_fail@plt+0x14be8>
   25fec:	mov	r3, #0
   25ff0:	cmp	r0, #10
   25ff4:	beq	26014 <__assert_fail@plt+0x14bdc>
   25ff8:	b	26020 <__assert_fail@plt+0x14be8>
   25ffc:	ldrb	r0, [sp, #182]	; 0xb6
   26000:	cmp	r0, #0
   26004:	bne	2661c <__assert_fail@plt+0x151e4>
   26008:	mov	r3, #0
   2600c:	cmp	r4, #10
   26010:	bne	26020 <__assert_fail@plt+0x14be8>
   26014:	ldrb	r3, [sp, #181]	; 0xb5
   26018:	cmp	r3, #0
   2601c:	movwne	r3, #2
   26020:	ldr	r0, [r8, #8]
   26024:	cmp	r0, #1
   26028:	blt	26790 <__assert_fail@plt+0x15358>
   2602c:	ldr	r1, [sp, #188]	; 0xbc
   26030:	ldr	r6, [r8, #12]
   26034:	and	ip, r3, #8
   26038:	and	lr, r3, #2
   2603c:	and	r3, r3, #1
   26040:	mov	r4, #0
   26044:	str	r7, [sp, #16]
   26048:	str	sl, [sp, #20]
   2604c:	ldr	r5, [r1]
   26050:	ldr	r1, [r6, r4, lsl #2]
   26054:	add	r7, r5, r1, lsl #3
   26058:	ldr	r7, [r7, #4]
   2605c:	uxtb	r2, r7
   26060:	cmp	r2, #2
   26064:	bne	260b4 <__assert_fail@plt+0x14c7c>
   26068:	movw	r2, #65280	; 0xff00
   2606c:	movt	r2, #3
   26070:	tst	r7, r2
   26074:	beq	260cc <__assert_fail@plt+0x14c94>
   26078:	cmp	r3, #0
   2607c:	bne	26088 <__assert_fail@plt+0x14c50>
   26080:	ands	r2, r7, #1024	; 0x400
   26084:	bne	260b4 <__assert_fail@plt+0x14c7c>
   26088:	cmp	r3, #0
   2608c:	andsne	r2, r7, #2048	; 0x800
   26090:	bne	260b4 <__assert_fail@plt+0x14c7c>
   26094:	cmp	lr, #0
   26098:	bne	260a4 <__assert_fail@plt+0x14c6c>
   2609c:	ands	r2, r7, #8192	; 0x2000
   260a0:	bne	260b4 <__assert_fail@plt+0x14c7c>
   260a4:	cmp	ip, #0
   260a8:	bne	260cc <__assert_fail@plt+0x14c94>
   260ac:	ands	r2, r7, #32768	; 0x8000
   260b0:	beq	260cc <__assert_fail@plt+0x14c94>
   260b4:	add	r4, r4, #1
   260b8:	cmp	r4, r0
   260bc:	blt	26050 <__assert_fail@plt+0x14c18>
   260c0:	ldr	sl, [sp, #20]
   260c4:	ldr	r7, [sp, #16]
   260c8:	b	26790 <__assert_fail@plt+0x15358>
   260cc:	ldr	sl, [sp, #20]
   260d0:	ldr	r7, [sp, #16]
   260d4:	cmp	r1, #0
   260d8:	bne	26770 <__assert_fail@plt+0x15338>
   260dc:	b	26790 <__assert_fail@plt+0x15358>
   260e0:	ldr	r0, [r5, #8]
   260e4:	cmp	r0, #1
   260e8:	blt	26518 <__assert_fail@plt+0x150e0>
   260ec:	ldr	lr, [sp, #188]	; 0xbc
   260f0:	mov	r3, #0
   260f4:	str	sl, [sp, #20]
   260f8:	str	r7, [sp, #16]
   260fc:	str	lr, [sp, #4]
   26100:	b	264e4 <__assert_fail@plt+0x150ac>
   26104:	movw	r0, #65280	; 0xff00
   26108:	str	r3, [sp, #8]
   2610c:	movt	r0, #3
   26110:	tst	r6, r0
   26114:	beq	26228 <__assert_fail@plt+0x14df0>
   26118:	ldr	r0, [sp, #144]	; 0x90
   2611c:	cmn	r0, #1
   26120:	ble	26164 <__assert_fail@plt+0x14d2c>
   26124:	ldr	r1, [sp, #152]	; 0x98
   26128:	cmp	r1, r0
   2612c:	beq	2643c <__assert_fail@plt+0x15004>
   26130:	ldr	r1, [sp, #184]	; 0xb8
   26134:	cmp	r1, #2
   26138:	blt	2616c <__assert_fail@plt+0x14d34>
   2613c:	ldr	r1, [sp, #112]	; 0x70
   26140:	ldr	sl, [sp, #20]
   26144:	ldr	r3, [sp, #8]
   26148:	ldr	r8, [r1, r0, lsl #2]
   2614c:	cmn	r8, #1
   26150:	bne	261ac <__assert_fail@plt+0x14d74>
   26154:	sub	r2, r0, #1
   26158:	cmp	r0, #0
   2615c:	mov	r0, r2
   26160:	bgt	26148 <__assert_fail@plt+0x14d10>
   26164:	ldr	r1, [sp, #164]	; 0xa4
   26168:	b	261d0 <__assert_fail@plt+0x14d98>
   2616c:	ldr	r1, [sp, #108]	; 0x6c
   26170:	ldr	r2, [sp, #172]	; 0xac
   26174:	mov	ip, #0
   26178:	ldrb	r0, [r1, r0]
   2617c:	ubfx	r1, r0, #5, #3
   26180:	ldr	sl, [sp, #20]
   26184:	ldr	r3, [r2, r1, lsl #2]
   26188:	and	r2, r0, #31
   2618c:	mov	r1, #1
   26190:	tst	r3, r1, lsl r2
   26194:	ldr	r3, [sp, #8]
   26198:	bne	261e8 <__assert_fail@plt+0x14db0>
   2619c:	mov	r1, #0
   261a0:	cmp	r0, #10
   261a4:	beq	261c4 <__assert_fail@plt+0x14d8c>
   261a8:	b	261d0 <__assert_fail@plt+0x14d98>
   261ac:	ldrb	r0, [sp, #182]	; 0xb6
   261b0:	cmp	r0, #0
   261b4:	bne	26470 <__assert_fail@plt+0x15038>
   261b8:	mov	r1, #0
   261bc:	cmp	r8, #10
   261c0:	bne	261d0 <__assert_fail@plt+0x14d98>
   261c4:	ldrb	r1, [sp, #181]	; 0xb5
   261c8:	cmp	r1, #0
   261cc:	movwne	r1, #2
   261d0:	and	r0, r1, #1
   261d4:	tst	r6, #1024	; 0x400
   261d8:	eor	ip, r0, #1
   261dc:	beq	261e8 <__assert_fail@plt+0x14db0>
   261e0:	cmp	r0, #0
   261e4:	beq	26508 <__assert_fail@plt+0x150d0>
   261e8:	ldr	r0, [lr]
   261ec:	ldr	r2, [sp, #12]
   261f0:	cmp	ip, #0
   261f4:	add	r0, r0, r2, lsl #3
   261f8:	ldr	r0, [r0, #4]
   261fc:	bne	26208 <__assert_fail@plt+0x14dd0>
   26200:	ands	r2, r0, #2048	; 0x800
   26204:	bne	26508 <__assert_fail@plt+0x150d0>
   26208:	tst	r1, #2
   2620c:	bne	26218 <__assert_fail@plt+0x14de0>
   26210:	ands	r2, r0, #8192	; 0x2000
   26214:	bne	26508 <__assert_fail@plt+0x150d0>
   26218:	tst	r1, #8
   2621c:	bne	26228 <__assert_fail@plt+0x14df0>
   26220:	ands	r0, r0, #32768	; 0x8000
   26224:	bne	26508 <__assert_fail@plt+0x150d0>
   26228:	ldr	r3, [sp, #144]	; 0x90
   2622c:	ldr	r1, [sp, #12]
   26230:	mov	r0, lr
   26234:	add	r2, sp, #104	; 0x68
   26238:	bl	315f0 <__assert_fail@plt+0x201b8>
   2623c:	ldr	r3, [sp, #8]
   26240:	ldr	lr, [sp, #4]
   26244:	ldr	r7, [sp, #16]
   26248:	cmp	r0, #0
   2624c:	beq	26508 <__assert_fail@plt+0x150d0>
   26250:	ldr	r1, [sp, #224]	; 0xe0
   26254:	cmp	r1, r0
   26258:	movlt	r1, r0
   2625c:	str	r1, [sp, #224]	; 0xe0
   26260:	ldr	r3, [sp, #144]	; 0x90
   26264:	ldr	r2, [sp, #140]	; 0x8c
   26268:	ldr	r1, [sp, #152]	; 0x98
   2626c:	ldr	r7, [sp, #208]	; 0xd0
   26270:	add	r6, r3, r0
   26274:	cmp	r2, r6
   26278:	cmple	r2, r1
   2627c:	blt	26290 <__assert_fail@plt+0x14e58>
   26280:	ldr	r0, [sp, #132]	; 0x84
   26284:	cmp	r0, r6
   26288:	cmple	r0, r1
   2628c:	bge	262a8 <__assert_fail@plt+0x14e70>
   26290:	add	r1, r6, #1
   26294:	add	r0, sp, #104	; 0x68
   26298:	bl	2f958 <__assert_fail@plt+0x1e520>
   2629c:	ldr	lr, [sp, #4]
   262a0:	cmp	r0, #0
   262a4:	bne	26604 <__assert_fail@plt+0x151cc>
   262a8:	cmp	r6, r7
   262ac:	ble	262d4 <__assert_fail@plt+0x14e9c>
   262b0:	sub	r0, r6, r7
   262b4:	mov	r1, #0
   262b8:	lsl	r2, r0, #2
   262bc:	ldr	r0, [sp, #204]	; 0xcc
   262c0:	add	r0, r0, r7, lsl #2
   262c4:	add	r0, r0, #4
   262c8:	bl	1136c <memset@plt>
   262cc:	ldr	lr, [sp, #4]
   262d0:	str	r6, [sp, #208]	; 0xd0
   262d4:	mov	r0, #0
   262d8:	ldr	r2, [sp, #12]
   262dc:	str	r0, [fp, #-48]	; 0xffffffd0
   262e0:	ldr	r0, [sp, #204]	; 0xcc
   262e4:	ldr	r1, [lr, #24]
   262e8:	ldr	r7, [r0, r6, lsl #2]
   262ec:	ldr	r0, [lr, #12]
   262f0:	ldr	r0, [r0, r2, lsl #2]
   262f4:	cmp	r7, #0
   262f8:	add	r0, r0, r0, lsl #1
   262fc:	add	r2, r1, r0, lsl #2
   26300:	beq	26324 <__assert_fail@plt+0x14eec>
   26304:	ldr	r1, [r7, #40]	; 0x28
   26308:	sub	r0, fp, #192	; 0xc0
   2630c:	bl	2fd74 <__assert_fail@plt+0x1e93c>
   26310:	ldr	sl, [sp, #20]
   26314:	cmp	r0, #0
   26318:	str	r0, [fp, #-48]	; 0xffffffd0
   2631c:	beq	26338 <__assert_fail@plt+0x14f00>
   26320:	b	26608 <__assert_fail@plt+0x151d0>
   26324:	vldr	d16, [r2]
   26328:	ldr	r0, [r2, #8]
   2632c:	ldr	sl, [sp, #20]
   26330:	str	r0, [fp, #-184]	; 0xffffff48
   26334:	vstr	d16, [fp, #-192]	; 0xffffff40
   26338:	cmp	r6, #0
   2633c:	ble	26454 <__assert_fail@plt+0x1501c>
   26340:	ldr	r1, [sp, #152]	; 0x98
   26344:	sub	r0, r6, #1
   26348:	cmp	r1, r0
   2634c:	ldr	r1, [sp, #4]
   26350:	beq	26460 <__assert_fail@plt+0x15028>
   26354:	ldr	r2, [sp, #184]	; 0xb8
   26358:	cmp	r2, #2
   2635c:	blt	2638c <__assert_fail@plt+0x14f54>
   26360:	ldr	r0, [sp, #112]	; 0x70
   26364:	mov	r2, r6
   26368:	sub	r0, r0, #4
   2636c:	ldr	r8, [r0, r2, lsl #2]
   26370:	cmn	r8, #1
   26374:	bne	263c8 <__assert_fail@plt+0x14f90>
   26378:	sub	r2, r2, #1
   2637c:	cmp	r2, #0
   26380:	bgt	2636c <__assert_fail@plt+0x14f34>
   26384:	ldr	r3, [sp, #164]	; 0xa4
   26388:	b	263ec <__assert_fail@plt+0x14fb4>
   2638c:	ldr	r3, [sp, #108]	; 0x6c
   26390:	ldr	r2, [sp, #172]	; 0xac
   26394:	mov	ip, r7
   26398:	ldrb	r0, [r3, r0]
   2639c:	ubfx	r3, r0, #5, #3
   263a0:	ldr	r7, [r2, r3, lsl #2]
   263a4:	and	r2, r0, #31
   263a8:	mov	r3, #1
   263ac:	tst	r7, r3, lsl r2
   263b0:	mov	r7, ip
   263b4:	bne	263ec <__assert_fail@plt+0x14fb4>
   263b8:	mov	r3, #0
   263bc:	cmp	r0, #10
   263c0:	beq	263e0 <__assert_fail@plt+0x14fa8>
   263c4:	b	263ec <__assert_fail@plt+0x14fb4>
   263c8:	ldrb	r0, [sp, #182]	; 0xb6
   263cc:	cmp	r0, #0
   263d0:	bne	264a0 <__assert_fail@plt+0x15068>
   263d4:	mov	r3, #0
   263d8:	cmp	r8, #10
   263dc:	bne	263ec <__assert_fail@plt+0x14fb4>
   263e0:	ldrb	r3, [sp, #181]	; 0xb5
   263e4:	cmp	r3, #0
   263e8:	movwne	r3, #2
   263ec:	sub	r0, fp, #48	; 0x30
   263f0:	sub	r2, fp, #192	; 0xc0
   263f4:	bl	2de9c <__assert_fail@plt+0x1ca64>
   263f8:	ldr	r1, [sp, #204]	; 0xcc
   263fc:	cmp	r7, #0
   26400:	str	r0, [r1, r6, lsl #2]
   26404:	beq	26410 <__assert_fail@plt+0x14fd8>
   26408:	ldr	r0, [fp, #-184]	; 0xffffff48
   2640c:	bl	1386c <__assert_fail@plt+0x2434>
   26410:	ldr	r0, [sp, #204]	; 0xcc
   26414:	ldr	r7, [sp, #16]
   26418:	ldr	lr, [sp, #4]
   2641c:	ldr	r3, [sp, #8]
   26420:	ldr	r0, [r0, r6, lsl #2]
   26424:	cmp	r0, #0
   26428:	bne	26508 <__assert_fail@plt+0x150d0>
   2642c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   26430:	cmp	r0, #0
   26434:	beq	26508 <__assert_fail@plt+0x150d0>
   26438:	b	26610 <__assert_fail@plt+0x151d8>
   2643c:	ldr	r0, [sp, #192]	; 0xc0
   26440:	ldr	sl, [sp, #20]
   26444:	ldr	r3, [sp, #8]
   26448:	and	r0, r0, #2
   2644c:	eor	r1, r0, #10
   26450:	b	261d0 <__assert_fail@plt+0x14d98>
   26454:	ldr	r3, [sp, #164]	; 0xa4
   26458:	ldr	r1, [sp, #4]
   2645c:	b	263ec <__assert_fail@plt+0x14fb4>
   26460:	ldr	r0, [sp, #192]	; 0xc0
   26464:	and	r0, r0, #2
   26468:	eor	r3, r0, #10
   2646c:	b	263ec <__assert_fail@plt+0x14fb4>
   26470:	mov	r0, r8
   26474:	bl	11354 <iswalnum@plt>
   26478:	mov	r1, #1
   2647c:	mov	ip, #0
   26480:	cmp	r8, #95	; 0x5f
   26484:	beq	264c8 <__assert_fail@plt+0x15090>
   26488:	ldr	sl, [sp, #20]
   2648c:	ldr	lr, [sp, #4]
   26490:	ldr	r3, [sp, #8]
   26494:	cmp	r0, #0
   26498:	beq	261b8 <__assert_fail@plt+0x14d80>
   2649c:	b	261e8 <__assert_fail@plt+0x14db0>
   264a0:	mov	r0, r8
   264a4:	bl	11354 <iswalnum@plt>
   264a8:	mov	r3, #1
   264ac:	cmp	r8, #95	; 0x5f
   264b0:	beq	264d8 <__assert_fail@plt+0x150a0>
   264b4:	ldr	sl, [sp, #20]
   264b8:	ldr	r1, [sp, #4]
   264bc:	cmp	r0, #0
   264c0:	beq	263d4 <__assert_fail@plt+0x14f9c>
   264c4:	b	263ec <__assert_fail@plt+0x14fb4>
   264c8:	ldr	sl, [sp, #20]
   264cc:	ldr	lr, [sp, #4]
   264d0:	ldr	r3, [sp, #8]
   264d4:	b	261e8 <__assert_fail@plt+0x14db0>
   264d8:	ldr	sl, [sp, #20]
   264dc:	ldr	r1, [sp, #4]
   264e0:	b	263ec <__assert_fail@plt+0x14fb4>
   264e4:	ldr	r0, [r5, #12]
   264e8:	ldr	r2, [r0, r3, lsl #2]
   264ec:	ldr	r0, [lr]
   264f0:	add	r0, r0, r2, lsl #3
   264f4:	mov	r1, r2
   264f8:	str	r2, [sp, #12]
   264fc:	ldr	r6, [r0, #4]
   26500:	tst	r6, #1048576	; 0x100000
   26504:	bne	26104 <__assert_fail@plt+0x14ccc>
   26508:	ldr	r0, [r5, #8]
   2650c:	add	r3, r3, #1
   26510:	cmp	r3, r0
   26514:	blt	264e4 <__assert_fail@plt+0x150ac>
   26518:	mov	r0, #0
   2651c:	str	r0, [fp, #-196]	; 0xffffff3c
   26520:	b	266d0 <__assert_fail@plt+0x15298>
   26524:	add	r1, r0, #2
   26528:	add	r0, sp, #104	; 0x68
   2652c:	bl	2f958 <__assert_fail@plt+0x1e520>
   26530:	cmp	r0, #0
   26534:	str	r0, [fp, #-196]	; 0xffffff3c
   26538:	beq	266c4 <__assert_fail@plt+0x1528c>
   2653c:	b	278a8 <__assert_fail@plt+0x16470>
   26540:	ldr	r0, [sp, #144]	; 0x90
   26544:	cmp	r0, #0
   26548:	ble	26588 <__assert_fail@plt+0x15150>
   2654c:	ldr	r2, [sp, #152]	; 0x98
   26550:	sub	r1, r0, #1
   26554:	cmp	r2, r1
   26558:	beq	2664c <__assert_fail@plt+0x15214>
   2655c:	ldr	r2, [sp, #184]	; 0xb8
   26560:	cmp	r2, #2
   26564:	blt	26590 <__assert_fail@plt+0x15158>
   26568:	ldr	r1, [sp, #112]	; 0x70
   2656c:	sub	r1, r1, #4
   26570:	ldr	r8, [r1, r0, lsl #2]
   26574:	cmn	r8, #1
   26578:	bne	265c4 <__assert_fail@plt+0x1518c>
   2657c:	sub	r0, r0, #1
   26580:	cmp	r0, #0
   26584:	bgt	26570 <__assert_fail@plt+0x15138>
   26588:	ldr	r1, [sp, #164]	; 0xa4
   2658c:	b	265e8 <__assert_fail@plt+0x151b0>
   26590:	ldr	r0, [sp, #108]	; 0x6c
   26594:	ldr	r2, [sp, #172]	; 0xac
   26598:	ldrb	r0, [r0, r1]
   2659c:	ubfx	r1, r0, #5, #3
   265a0:	ldr	ip, [r2, r1, lsl #2]
   265a4:	and	r2, r0, #31
   265a8:	mov	r1, #1
   265ac:	tst	ip, r1, lsl r2
   265b0:	bne	265e8 <__assert_fail@plt+0x151b0>
   265b4:	mov	r1, #0
   265b8:	cmp	r0, #10
   265bc:	beq	265dc <__assert_fail@plt+0x151a4>
   265c0:	b	265e8 <__assert_fail@plt+0x151b0>
   265c4:	ldrb	r0, [sp, #182]	; 0xb6
   265c8:	cmp	r0, #0
   265cc:	bne	26654 <__assert_fail@plt+0x1521c>
   265d0:	mov	r1, #0
   265d4:	cmp	r8, #10
   265d8:	bne	265e8 <__assert_fail@plt+0x151b0>
   265dc:	ldrb	r1, [sp, #181]	; 0xb5
   265e0:	cmp	r1, #0
   265e4:	movwne	r1, #2
   265e8:	bfi	r6, r1, #8, #1
   265ec:	ldr	r8, [r3, r6, lsl #2]
   265f0:	b	2671c <__assert_fail@plt+0x152e4>
   265f4:	ldr	r0, [sp, #192]	; 0xc0
   265f8:	and	r0, r0, #2
   265fc:	eor	r3, r0, #10
   26600:	b	26020 <__assert_fail@plt+0x14be8>
   26604:	str	r0, [fp, #-48]	; 0xffffffd0
   26608:	ldr	sl, [sp, #20]
   2660c:	ldr	r7, [sp, #16]
   26610:	mov	r8, #0
   26614:	str	r0, [fp, #-196]	; 0xffffff3c
   26618:	b	2671c <__assert_fail@plt+0x152e4>
   2661c:	mov	r0, r4
   26620:	mov	r5, r7
   26624:	bl	11354 <iswalnum@plt>
   26628:	mov	r3, #1
   2662c:	cmp	r4, #95	; 0x5f
   26630:	beq	26644 <__assert_fail@plt+0x1520c>
   26634:	cmp	r0, #0
   26638:	mov	r7, r5
   2663c:	beq	26008 <__assert_fail@plt+0x14bd0>
   26640:	b	26020 <__assert_fail@plt+0x14be8>
   26644:	mov	r7, r5
   26648:	b	26020 <__assert_fail@plt+0x14be8>
   2664c:	mov	r1, #10
   26650:	b	265e8 <__assert_fail@plt+0x151b0>
   26654:	mov	r0, r8
   26658:	str	r3, [sp, #12]
   2665c:	str	r7, [sp, #16]
   26660:	bl	11354 <iswalnum@plt>
   26664:	mov	r1, #1
   26668:	cmp	r8, #95	; 0x5f
   2666c:	beq	26684 <__assert_fail@plt+0x1524c>
   26670:	ldr	r7, [sp, #16]
   26674:	ldr	r3, [sp, #12]
   26678:	cmp	r0, #0
   2667c:	beq	265d0 <__assert_fail@plt+0x15198>
   26680:	b	265e8 <__assert_fail@plt+0x151b0>
   26684:	ldr	r7, [sp, #16]
   26688:	ldr	r3, [sp, #12]
   2668c:	b	265e8 <__assert_fail@plt+0x151b0>
   26690:	ldr	r2, [sp, #140]	; 0x8c
   26694:	ldr	r1, [sp, #152]	; 0x98
   26698:	add	r4, r0, #1
   2669c:	mov	r5, r8
   266a0:	cmp	r4, r2
   266a4:	blt	266b0 <__assert_fail@plt+0x15278>
   266a8:	cmp	r2, r1
   266ac:	blt	26524 <__assert_fail@plt+0x150ec>
   266b0:	ldr	r2, [sp, #132]	; 0x84
   266b4:	cmp	r4, r2
   266b8:	blt	266c4 <__assert_fail@plt+0x1528c>
   266bc:	cmp	r2, r1
   266c0:	blt	26524 <__assert_fail@plt+0x150ec>
   266c4:	ldrb	r0, [r5, #52]	; 0x34
   266c8:	tst	r0, #32
   266cc:	bne	260e0 <__assert_fail@plt+0x14ca8>
   266d0:	ldr	r1, [sp, #144]	; 0x90
   266d4:	ldr	r0, [sp, #108]	; 0x6c
   266d8:	add	r2, r1, #1
   266dc:	str	r2, [sp, #144]	; 0x90
   266e0:	ldrb	r6, [r0, r1]
   266e4:	ldr	r0, [r5, #44]	; 0x2c
   266e8:	cmp	r0, #0
   266ec:	bne	26718 <__assert_fail@plt+0x152e0>
   266f0:	ldr	r3, [r5, #48]	; 0x30
   266f4:	cmp	r3, #0
   266f8:	bne	26540 <__assert_fail@plt+0x15108>
   266fc:	ldr	r0, [sp, #188]	; 0xbc
   26700:	mov	r1, r5
   26704:	bl	31af4 <__assert_fail@plt+0x206bc>
   26708:	cmp	r0, #0
   2670c:	bne	266e4 <__assert_fail@plt+0x152ac>
   26710:	mov	r0, #12
   26714:	b	26610 <__assert_fail@plt+0x151d8>
   26718:	ldr	r8, [r0, r6, lsl #2]
   2671c:	ldr	r0, [sp, #204]	; 0xcc
   26720:	cmp	r0, #0
   26724:	beq	2673c <__assert_fail@plt+0x15304>
   26728:	sub	r0, fp, #196	; 0xc4
   2672c:	add	r1, sp, #104	; 0x68
   26730:	mov	r2, r8
   26734:	bl	2fb60 <__assert_fail@plt+0x1e728>
   26738:	mov	r8, r0
   2673c:	cmp	r8, #0
   26740:	beq	25ee4 <__assert_fail@plt+0x14aac>
   26744:	sub	r0, r5, r8
   26748:	clz	r0, r0
   2674c:	lsr	r0, r0, #5
   26750:	ands	r7, r7, r0
   26754:	ldrb	r0, [r8, #52]	; 0x34
   26758:	movne	sl, r4
   2675c:	tst	r0, #16
   26760:	beq	26790 <__assert_fail@plt+0x15358>
   26764:	sxtb	r0, r0
   26768:	cmn	r0, #1
   2676c:	ble	25f1c <__assert_fail@plt+0x14ae4>
   26770:	ldr	r0, [sp, #44]	; 0x2c
   26774:	ldr	r9, [sp, #144]	; 0x90
   26778:	cmp	r0, #0
   2677c:	beq	267c0 <__assert_fail@plt+0x15388>
   26780:	mov	r0, #0
   26784:	str	r0, [sp, #72]	; 0x48
   26788:	mov	r0, #1
   2678c:	str	r0, [sp, #56]	; 0x38
   26790:	ldr	r0, [sp, #144]	; 0x90
   26794:	ldr	r1, [sp, #160]	; 0xa0
   26798:	cmp	r1, r0
   2679c:	bgt	26690 <__assert_fail@plt+0x15258>
   267a0:	b	267ac <__assert_fail@plt+0x15374>
   267a4:	ldr	r0, [sp, #36]	; 0x24
   267a8:	str	r0, [sp, #72]	; 0x48
   267ac:	ldr	r1, [sp, #72]	; 0x48
   267b0:	cmp	r1, #0
   267b4:	ldrne	r0, [r1]
   267b8:	addne	r0, r0, sl
   267bc:	strne	r0, [r1]
   267c0:	ldr	sl, [sp, #92]	; 0x5c
   267c4:	ldr	r8, [sp, #64]	; 0x40
   267c8:	cmn	r9, #1
   267cc:	beq	2598c <__assert_fail@plt+0x14554>
   267d0:	cmn	r9, #2
   267d4:	beq	278a8 <__assert_fail@plt+0x16470>
   267d8:	ldr	r5, [sp, #80]	; 0x50
   267dc:	str	r9, [sp, #196]	; 0xc4
   267e0:	ldr	r8, [sp, #96]	; 0x60
   267e4:	cmp	sl, #2
   267e8:	ldrb	r0, [r5, #28]
   267ec:	bcc	267f8 <__assert_fail@plt+0x153c0>
   267f0:	ands	r1, r0, #16
   267f4:	beq	26804 <__assert_fail@plt+0x153cc>
   267f8:	ldr	r1, [r8, #76]	; 0x4c
   267fc:	cmp	r1, #0
   26800:	beq	26964 <__assert_fail@plt+0x1552c>
   26804:	ldr	r0, [sp, #204]	; 0xcc
   26808:	cmn	r9, #1
   2680c:	ldr	r5, [r0, r9, lsl #2]
   26810:	ble	2684c <__assert_fail@plt+0x15414>
   26814:	ldr	r0, [sp, #152]	; 0x98
   26818:	cmp	r0, r9
   2681c:	beq	25528 <__assert_fail@plt+0x140f0>
   26820:	ldr	r0, [sp, #184]	; 0xb8
   26824:	cmp	r0, #2
   26828:	blt	2685c <__assert_fail@plt+0x15424>
   2682c:	ldr	r0, [sp, #112]	; 0x70
   26830:	ldr	r4, [r0, r9, lsl #2]
   26834:	cmn	r4, #1
   26838:	bne	26898 <__assert_fail@plt+0x15460>
   2683c:	sub	r1, r9, #1
   26840:	cmp	r9, #0
   26844:	mov	r9, r1
   26848:	bgt	26830 <__assert_fail@plt+0x153f8>
   2684c:	ldr	r3, [sp, #164]	; 0xa4
   26850:	movw	r9, #65280	; 0xff00
   26854:	movt	r9, #3
   26858:	b	268c4 <__assert_fail@plt+0x1548c>
   2685c:	ldr	r0, [sp, #108]	; 0x6c
   26860:	ldr	r1, [sp, #172]	; 0xac
   26864:	mov	r3, #1
   26868:	ldrb	r0, [r0, r9]
   2686c:	movw	r9, #65280	; 0xff00
   26870:	movt	r9, #3
   26874:	ubfx	r2, r0, #5, #3
   26878:	ldr	r1, [r1, r2, lsl #2]
   2687c:	and	r2, r0, #31
   26880:	tst	r1, r3, lsl r2
   26884:	bne	268c4 <__assert_fail@plt+0x1548c>
   26888:	mov	r3, #0
   2688c:	cmp	r0, #10
   26890:	beq	268b8 <__assert_fail@plt+0x15480>
   26894:	b	268c4 <__assert_fail@plt+0x1548c>
   26898:	ldrb	r0, [sp, #182]	; 0xb6
   2689c:	movw	r9, #65280	; 0xff00
   268a0:	movt	r9, #3
   268a4:	cmp	r0, #0
   268a8:	bne	255c4 <__assert_fail@plt+0x1418c>
   268ac:	mov	r3, #0
   268b0:	cmp	r4, #10
   268b4:	bne	268c4 <__assert_fail@plt+0x1548c>
   268b8:	ldrb	r3, [sp, #181]	; 0xb5
   268bc:	cmp	r3, #0
   268c0:	movwne	r3, #2
   268c4:	ldr	r0, [r5, #8]
   268c8:	cmp	r0, #1
   268cc:	blt	26954 <__assert_fail@plt+0x1551c>
   268d0:	ldr	r1, [sp, #188]	; 0xbc
   268d4:	ldr	r6, [r5, #12]
   268d8:	and	ip, r3, #8
   268dc:	and	lr, r3, #2
   268e0:	and	r3, r3, #1
   268e4:	mov	r4, #0
   268e8:	ldr	r5, [r1]
   268ec:	ldr	r7, [r6, r4, lsl #2]
   268f0:	add	r1, r5, r7, lsl #3
   268f4:	ldr	r1, [r1, #4]
   268f8:	uxtb	r2, r1
   268fc:	cmp	r2, #2
   26900:	bne	26948 <__assert_fail@plt+0x15510>
   26904:	tst	r1, r9
   26908:	beq	26958 <__assert_fail@plt+0x15520>
   2690c:	cmp	r3, #0
   26910:	bne	2691c <__assert_fail@plt+0x154e4>
   26914:	ands	r2, r1, #1024	; 0x400
   26918:	bne	26948 <__assert_fail@plt+0x15510>
   2691c:	cmp	r3, #0
   26920:	andsne	r2, r1, #2048	; 0x800
   26924:	bne	26948 <__assert_fail@plt+0x15510>
   26928:	cmp	lr, #0
   2692c:	bne	26938 <__assert_fail@plt+0x15500>
   26930:	ands	r2, r1, #8192	; 0x2000
   26934:	bne	26948 <__assert_fail@plt+0x15510>
   26938:	cmp	ip, #0
   2693c:	bne	26958 <__assert_fail@plt+0x15520>
   26940:	ands	r1, r1, #32768	; 0x8000
   26944:	beq	26958 <__assert_fail@plt+0x15520>
   26948:	add	r4, r4, #1
   2694c:	cmp	r4, r0
   26950:	blt	268ec <__assert_fail@plt+0x154b4>
   26954:	mov	r7, #0
   26958:	ldr	r5, [sp, #80]	; 0x50
   2695c:	str	r7, [sp, #200]	; 0xc8
   26960:	ldrb	r0, [r5, #28]
   26964:	sub	r6, fp, #48	; 0x30
   26968:	cmp	sl, #2
   2696c:	bcc	26984 <__assert_fail@plt+0x1554c>
   26970:	ands	r0, r0, #16
   26974:	bne	26984 <__assert_fail@plt+0x1554c>
   26978:	ldrb	r0, [r8, #88]	; 0x58
   2697c:	tst	r0, #1
   26980:	bne	26990 <__assert_fail@plt+0x15558>
   26984:	ldr	r0, [r8, #76]	; 0x4c
   26988:	cmp	r0, #0
   2698c:	beq	26b2c <__assert_fail@plt+0x156f4>
   26990:	ldr	sl, [sp, #196]	; 0xc4
   26994:	cmn	sl, #-1073741823	; 0xc0000001
   26998:	bcs	278a8 <__assert_fail@plt+0x16470>
   2699c:	ldr	r0, [sp, #188]	; 0xbc
   269a0:	ldr	r6, [sp, #200]	; 0xc8
   269a4:	str	r0, [sp, #72]	; 0x48
   269a8:	mov	r0, #4
   269ac:	add	r4, r0, sl, lsl #2
   269b0:	mov	r0, r4
   269b4:	bl	3554c <__assert_fail@plt+0x24114>
   269b8:	mov	r8, r0
   269bc:	cmp	r0, #0
   269c0:	beq	27adc <__assert_fail@plt+0x166a4>
   269c4:	ldr	r0, [sp, #72]	; 0x48
   269c8:	ldr	r0, [r0, #76]	; 0x4c
   269cc:	cmp	r0, #0
   269d0:	beq	2547c <__assert_fail@plt+0x14044>
   269d4:	mov	r0, r4
   269d8:	bl	3554c <__assert_fail@plt+0x24114>
   269dc:	cmp	r0, #0
   269e0:	beq	27adc <__assert_fail@plt+0x166a4>
   269e4:	mov	r1, #0
   269e8:	mov	r2, r4
   269ec:	mov	r5, r0
   269f0:	bl	1136c <memset@plt>
   269f4:	sub	r0, fp, #188	; 0xbc
   269f8:	str	r8, [fp, #-192]	; 0xffffff40
   269fc:	mov	r1, #0
   26a00:	stm	r0, {r5, r6, sl}
   26a04:	ldr	r0, [sp, #28]
   26a08:	str	r1, [r0]
   26a0c:	str	r1, [r0, #4]
   26a10:	str	r1, [r0, #8]
   26a14:	add	r0, sp, #104	; 0x68
   26a18:	sub	r1, fp, #192	; 0xc0
   26a1c:	bl	32bf0 <__assert_fail@plt+0x217b8>
   26a20:	mov	r9, r0
   26a24:	mov	r0, #0
   26a28:	bl	1386c <__assert_fail@plt+0x2434>
   26a2c:	cmp	r9, #0
   26a30:	mov	r4, r5
   26a34:	bne	259c8 <__assert_fail@plt+0x14590>
   26a38:	ldr	r0, [r8]
   26a3c:	cmp	r0, #0
   26a40:	beq	2575c <__assert_fail@plt+0x14324>
   26a44:	mov	r1, #0
   26a48:	cmp	sl, #0
   26a4c:	mov	r9, #0
   26a50:	str	r1, [sp, #56]	; 0x38
   26a54:	blt	26ae8 <__assert_fail@plt+0x156b0>
   26a58:	mov	r7, #0
   26a5c:	b	26a70 <__assert_fail@plt+0x15638>
   26a60:	add	r0, r8, r7, lsl #2
   26a64:	add	r1, r7, #1
   26a68:	ldr	r0, [r0, #4]
   26a6c:	mov	r7, r1
   26a70:	ldr	r2, [r4, r7, lsl #2]
   26a74:	cmp	r0, #0
   26a78:	beq	26ad8 <__assert_fail@plt+0x156a0>
   26a7c:	cmp	r2, #0
   26a80:	beq	26acc <__assert_fail@plt+0x15694>
   26a84:	sub	r5, fp, #48	; 0x30
   26a88:	add	r1, r0, #4
   26a8c:	add	r2, r2, #4
   26a90:	mov	r0, r5
   26a94:	bl	2fd74 <__assert_fail@plt+0x1e93c>
   26a98:	cmp	r0, #0
   26a9c:	str	r0, [fp, #-196]	; 0xffffff3c
   26aa0:	bne	254d0 <__assert_fail@plt+0x14098>
   26aa4:	ldr	r1, [sp, #72]	; 0x48
   26aa8:	sub	r0, fp, #196	; 0xc4
   26aac:	mov	r2, r5
   26ab0:	bl	31360 <__assert_fail@plt+0x1ff28>
   26ab4:	str	r0, [r8, r7, lsl #2]
   26ab8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26abc:	bl	1386c <__assert_fail@plt+0x2434>
   26ac0:	ldr	r9, [fp, #-196]	; 0xffffff3c
   26ac4:	cmp	r9, #0
   26ac8:	bne	26ae8 <__assert_fail@plt+0x156b0>
   26acc:	cmp	r7, sl
   26ad0:	blt	26a60 <__assert_fail@plt+0x15628>
   26ad4:	b	26ae4 <__assert_fail@plt+0x156ac>
   26ad8:	str	r2, [r8, r7, lsl #2]
   26adc:	cmp	r7, sl
   26ae0:	blt	26a60 <__assert_fail@plt+0x15628>
   26ae4:	mov	r9, #0
   26ae8:	mov	r0, r4
   26aec:	bl	1386c <__assert_fail@plt+0x2434>
   26af0:	cmp	r9, #0
   26af4:	bne	259cc <__assert_fail@plt+0x14594>
   26af8:	ldr	r0, [sp, #204]	; 0xcc
   26afc:	bl	1386c <__assert_fail@plt+0x2434>
   26b00:	mov	r0, #0
   26b04:	str	r6, [sp, #200]	; 0xc8
   26b08:	str	r8, [sp, #204]	; 0xcc
   26b0c:	str	sl, [sp, #196]	; 0xc4
   26b10:	bl	1386c <__assert_fail@plt+0x2434>
   26b14:	mov	r0, #0
   26b18:	bl	1386c <__assert_fail@plt+0x2434>
   26b1c:	ldr	r8, [sp, #96]	; 0x60
   26b20:	ldr	sl, [sp, #92]	; 0x5c
   26b24:	ldr	r5, [sp, #80]	; 0x50
   26b28:	sub	r6, fp, #48	; 0x30
   26b2c:	cmp	sl, #0
   26b30:	beq	27a78 <__assert_fail@plt+0x16640>
   26b34:	ldr	r4, [sp, #32]
   26b38:	cmp	sl, #1
   26b3c:	beq	26b60 <__assert_fail@plt+0x15728>
   26b40:	ldr	r1, [fp, #16]
   26b44:	mvn	r0, r4
   26b48:	add	r0, r0, r1
   26b4c:	mov	r1, #255	; 0xff
   26b50:	lsl	r2, r0, #3
   26b54:	ldr	r0, [fp, #20]
   26b58:	add	r0, r0, #8
   26b5c:	bl	1136c <memset@plt>
   26b60:	ldr	r0, [sp, #196]	; 0xc4
   26b64:	ldr	r1, [fp, #20]
   26b68:	mov	r9, #0
   26b6c:	cmp	sl, #2
   26b70:	str	r9, [r1]
   26b74:	str	r0, [r1, #4]
   26b78:	bcc	27958 <__assert_fail@plt+0x16520>
   26b7c:	ldrb	r0, [r5, #28]
   26b80:	ands	r0, r0, #16
   26b84:	bne	27958 <__assert_fail@plt+0x16520>
   26b88:	ldrb	r1, [r8, #88]	; 0x58
   26b8c:	mov	r0, #0
   26b90:	tst	r1, #1
   26b94:	mov	r1, #0
   26b98:	beq	26bac <__assert_fail@plt+0x15774>
   26b9c:	ldr	r2, [r8, #76]	; 0x4c
   26ba0:	mov	r1, #0
   26ba4:	cmp	r2, #0
   26ba8:	movwgt	r1, #1
   26bac:	movw	r2, #32064	; 0x7d40
   26bb0:	ldr	r7, [r5]
   26bb4:	cmp	r1, #0
   26bb8:	mov	r1, #0
   26bbc:	movt	r2, #3
   26bc0:	vldr	d16, [r2]
   26bc4:	ldr	r2, [r2, #8]
   26bc8:	str	r2, [fp, #-40]	; 0xffffffd8
   26bcc:	mov	r2, #16
   26bd0:	vstr	d16, [fp, #-48]	; 0xffffffd0
   26bd4:	str	r2, [fp, #-188]	; 0xffffff44
   26bd8:	sub	r2, fp, #192	; 0xc0
   26bdc:	str	r0, [fp, #-192]	; 0xffffff40
   26be0:	add	r5, r2, #12
   26be4:	str	r5, [fp, #-184]	; 0xffffff48
   26be8:	beq	26c08 <__assert_fail@plt+0x157d0>
   26bec:	mov	r0, #48	; 0x30
   26bf0:	bl	3554c <__assert_fail@plt+0x24114>
   26bf4:	cmp	r0, #0
   26bf8:	str	r0, [fp, #-40]	; 0xffffffd8
   26bfc:	beq	278a8 <__assert_fail@plt+0x16470>
   26c00:	ldr	r0, [fp, #-192]	; 0xffffff40
   26c04:	mov	r1, r6
   26c08:	str	r7, [sp, #68]	; 0x44
   26c0c:	ldr	r7, [r7, #72]	; 0x48
   26c10:	cmp	r0, sl
   26c14:	str	r5, [sp, #76]	; 0x4c
   26c18:	str	r1, [sp, #80]	; 0x50
   26c1c:	bcs	26d08 <__assert_fail@plt+0x158d0>
   26c20:	ldr	r2, [sp, #76]	; 0x4c
   26c24:	sub	r0, fp, #192	; 0xc0
   26c28:	mov	r1, sl
   26c2c:	mov	r3, #8
   26c30:	bl	35654 <__assert_fail@plt+0x2421c>
   26c34:	cmp	r0, #0
   26c38:	bne	26d0c <__assert_fail@plt+0x158d4>
   26c3c:	ldr	r0, [fp, #-184]	; 0xffffff48
   26c40:	ldr	r1, [sp, #76]	; 0x4c
   26c44:	cmp	r0, r1
   26c48:	beq	26c50 <__assert_fail@plt+0x15818>
   26c4c:	bl	1386c <__assert_fail@plt+0x2434>
   26c50:	mov	r0, #16
   26c54:	mov	r9, #12
   26c58:	str	r0, [fp, #-188]	; 0xffffff44
   26c5c:	mov	r0, #0
   26c60:	str	r0, [fp, #-192]	; 0xffffff40
   26c64:	ldr	r0, [sp, #76]	; 0x4c
   26c68:	str	r0, [fp, #-184]	; 0xffffff48
   26c6c:	ldr	r0, [sp, #80]	; 0x50
   26c70:	cmp	r0, #0
   26c74:	beq	27a7c <__assert_fail@plt+0x16644>
   26c78:	ldr	r0, [sp, #80]	; 0x50
   26c7c:	ldr	r1, [r0]
   26c80:	ldr	r0, [r0, #8]
   26c84:	cmp	r1, #1
   26c88:	blt	27b84 <__assert_fail@plt+0x1674c>
   26c8c:	ldr	r4, [sp, #80]	; 0x50
   26c90:	mov	r5, #0
   26c94:	mov	r6, #0
   26c98:	add	r0, r0, r5
   26c9c:	ldr	r0, [r0, #20]
   26ca0:	bl	1386c <__assert_fail@plt+0x2434>
   26ca4:	ldr	r0, [r4, #8]
   26ca8:	add	r0, r0, r5
   26cac:	ldr	r0, [r0, #8]
   26cb0:	bl	1386c <__assert_fail@plt+0x2434>
   26cb4:	ldr	r1, [r4]
   26cb8:	ldr	r0, [r4, #8]
   26cbc:	add	r6, r6, #1
   26cc0:	add	r5, r5, #24
   26cc4:	cmp	r6, r1
   26cc8:	blt	26c98 <__assert_fail@plt+0x15860>
   26ccc:	b	27b84 <__assert_fail@plt+0x1674c>
   26cd0:	ldr	r1, [r3, #8]
   26cd4:	cmp	r1, #0
   26cd8:	beq	26ce8 <__assert_fail@plt+0x158b0>
   26cdc:	ldrsb	r1, [sl, #28]
   26ce0:	cmp	r1, #0
   26ce4:	blt	25148 <__assert_fail@plt+0x13d10>
   26ce8:	mov	r1, #0
   26cec:	cmp	r6, #0
   26cf0:	str	r1, [sp, #76]	; 0x4c
   26cf4:	beq	278a0 <__assert_fail@plt+0x16468>
   26cf8:	cmp	r0, #0
   26cfc:	mov	r6, #0
   26d00:	bne	27ad0 <__assert_fail@plt+0x16698>
   26d04:	b	2514c <__assert_fail@plt+0x13d14>
   26d08:	str	sl, [fp, #-192]	; 0xffffff40
   26d0c:	ldr	r5, [fp, #20]
   26d10:	ldr	r0, [fp, #-184]	; 0xffffff48
   26d14:	lsl	r2, sl, #3
   26d18:	str	r2, [sp, #56]	; 0x38
   26d1c:	mov	r1, r5
   26d20:	str	r0, [sp, #60]	; 0x3c
   26d24:	bl	111ec <memcpy@plt>
   26d28:	ldr	r6, [r5]
   26d2c:	ldr	r0, [r5, #4]
   26d30:	mov	ip, #0
   26d34:	cmp	r6, r0
   26d38:	ble	26dc8 <__assert_fail@plt+0x15990>
   26d3c:	mov	r0, ip
   26d40:	bl	1386c <__assert_fail@plt+0x2434>
   26d44:	ldr	r0, [fp, #-184]	; 0xffffff48
   26d48:	ldr	r5, [sp, #76]	; 0x4c
   26d4c:	cmp	r0, r5
   26d50:	beq	26d58 <__assert_fail@plt+0x15920>
   26d54:	bl	1386c <__assert_fail@plt+0x2434>
   26d58:	ldr	r6, [sp, #80]	; 0x50
   26d5c:	mov	r0, #16
   26d60:	str	r0, [fp, #-188]	; 0xffffff44
   26d64:	mov	r0, #0
   26d68:	str	r0, [fp, #-192]	; 0xffffff40
   26d6c:	str	r5, [fp, #-184]	; 0xffffff48
   26d70:	cmp	r6, #0
   26d74:	beq	27958 <__assert_fail@plt+0x16520>
   26d78:	ldr	r1, [r6]
   26d7c:	ldr	r0, [r6, #8]
   26d80:	cmp	r1, #1
   26d84:	blt	27950 <__assert_fail@plt+0x16518>
   26d88:	mov	r4, #0
   26d8c:	mov	r5, #0
   26d90:	add	r0, r0, r4
   26d94:	ldr	r0, [r0, #20]
   26d98:	bl	1386c <__assert_fail@plt+0x2434>
   26d9c:	ldr	r0, [r6, #8]
   26da0:	add	r0, r0, r4
   26da4:	ldr	r0, [r0, #8]
   26da8:	bl	1386c <__assert_fail@plt+0x2434>
   26dac:	ldr	r1, [r6]
   26db0:	ldr	r0, [r6, #8]
   26db4:	add	r5, r5, #1
   26db8:	add	r4, r4, #24
   26dbc:	cmp	r5, r1
   26dc0:	blt	26d90 <__assert_fail@plt+0x15958>
   26dc4:	b	27950 <__assert_fail@plt+0x16518>
   26dc8:	lsl	r0, sl, #4
   26dcc:	mov	lr, #1
   26dd0:	mov	r1, #0
   26dd4:	mov	ip, #0
   26dd8:	str	r0, [sp, #48]	; 0x30
   26ddc:	mov	r0, #0
   26de0:	str	r0, [sp, #52]	; 0x34
   26de4:	ldr	r0, [sp, #68]	; 0x44
   26de8:	mov	r5, r1
   26dec:	ldr	r0, [r0]
   26df0:	add	r1, r0, r7, lsl #3
   26df4:	ldr	r3, [r1, #4]
   26df8:	uxtb	r2, r3
   26dfc:	cmp	r2, #9
   26e00:	beq	26e30 <__assert_fail@plt+0x159f8>
   26e04:	cmp	r2, #8
   26e08:	bne	26ea4 <__assert_fail@plt+0x15a6c>
   26e0c:	ldr	r0, [r0, r7, lsl #3]
   26e10:	add	r0, r0, #1
   26e14:	cmp	r0, sl
   26e18:	bge	26ea4 <__assert_fail@plt+0x15a6c>
   26e1c:	ldr	r1, [fp, #20]
   26e20:	str	r6, [r1, r0, lsl #3]!
   26e24:	mvn	r0, #0
   26e28:	str	r0, [r1, #4]
   26e2c:	b	26ea4 <__assert_fail@plt+0x15a6c>
   26e30:	ldr	r0, [r0, r7, lsl #3]
   26e34:	add	r0, r0, #1
   26e38:	cmp	r0, sl
   26e3c:	bge	26ea4 <__assert_fail@plt+0x15a6c>
   26e40:	ldr	r1, [fp, #20]
   26e44:	ldr	r2, [r1, r0, lsl #3]
   26e48:	cmp	r2, r6
   26e4c:	bge	26e60 <__assert_fail@plt+0x15a28>
   26e50:	add	r0, r1, r0, lsl #3
   26e54:	str	r6, [r0, #4]
   26e58:	ldr	r0, [sp, #60]	; 0x3c
   26e5c:	b	26e80 <__assert_fail@plt+0x15a48>
   26e60:	tst	r3, #524288	; 0x80000
   26e64:	beq	26e98 <__assert_fail@plt+0x15a60>
   26e68:	ldr	r1, [sp, #60]	; 0x3c
   26e6c:	ldr	r1, [r1, r0, lsl #3]
   26e70:	cmn	r1, #1
   26e74:	beq	26e98 <__assert_fail@plt+0x15a60>
   26e78:	ldr	r0, [fp, #20]
   26e7c:	ldr	r1, [sp, #60]	; 0x3c
   26e80:	ldr	r2, [sp, #56]	; 0x38
   26e84:	str	ip, [sp, #64]	; 0x40
   26e88:	bl	111ec <memcpy@plt>
   26e8c:	ldr	ip, [sp, #64]	; 0x40
   26e90:	mov	lr, #1
   26e94:	b	26ea4 <__assert_fail@plt+0x15a6c>
   26e98:	ldr	r1, [fp, #20]
   26e9c:	add	r0, r1, r0, lsl #3
   26ea0:	str	r6, [r0, #4]
   26ea4:	ldr	r0, [fp, #20]
   26ea8:	ldr	r0, [r0, #4]
   26eac:	cmp	r6, r0
   26eb0:	ldreq	r0, [sp, #200]	; 0xc8
   26eb4:	cmpeq	r7, r0
   26eb8:	beq	26f14 <__assert_fail@plt+0x15adc>
   26ebc:	ldr	r0, [sp, #80]	; 0x50
   26ec0:	cmp	r0, #0
   26ec4:	beq	26f58 <__assert_fail@plt+0x15b20>
   26ec8:	mov	r2, r5
   26ecc:	cmp	r5, #1
   26ed0:	blt	26ff4 <__assert_fail@plt+0x15bbc>
   26ed4:	mov	r0, #0
   26ed8:	subs	r1, r2, #1
   26edc:	str	r6, [sp, #72]	; 0x48
   26ee0:	beq	26f04 <__assert_fail@plt+0x15acc>
   26ee4:	add	r2, r0, r1
   26ee8:	lsr	r3, r2, #1
   26eec:	ldr	r6, [ip, r3, lsl #2]
   26ef0:	cmp	r6, r7
   26ef4:	movge	r1, r3
   26ef8:	addlt	r0, lr, r2, lsr #1
   26efc:	cmp	r0, r1
   26f00:	bcc	26ee4 <__assert_fail@plt+0x15aac>
   26f04:	ldr	r0, [ip, r0, lsl #2]
   26f08:	ldr	r6, [sp, #72]	; 0x48
   26f0c:	cmp	r0, r7
   26f10:	bne	26f58 <__assert_fail@plt+0x15b20>
   26f14:	ldr	r6, [sp, #80]	; 0x50
   26f18:	cmp	r6, #0
   26f1c:	beq	278cc <__assert_fail@plt+0x16494>
   26f20:	ldr	r5, [sp, #76]	; 0x4c
   26f24:	mov	r0, #0
   26f28:	ldr	r2, [fp, #20]
   26f2c:	ldr	r1, [r2, r0, lsl #3]
   26f30:	cmp	r1, #0
   26f34:	blt	26f48 <__assert_fail@plt+0x15b10>
   26f38:	add	r1, r2, r0, lsl #3
   26f3c:	ldr	r1, [r1, #4]
   26f40:	cmn	r1, #1
   26f44:	beq	26f60 <__assert_fail@plt+0x15b28>
   26f48:	add	r0, r0, #1
   26f4c:	cmp	r0, sl
   26f50:	bcc	26f28 <__assert_fail@plt+0x15af0>
   26f54:	b	278d0 <__assert_fail@plt+0x16498>
   26f58:	mov	r2, r5
   26f5c:	b	26ff4 <__assert_fail@plt+0x15bbc>
   26f60:	ldr	r0, [r6]
   26f64:	cmp	r0, #0
   26f68:	beq	278d0 <__assert_fail@plt+0x16498>
   26f6c:	sub	r0, r0, #1
   26f70:	ldr	r7, [sp, #56]	; 0x38
   26f74:	str	ip, [sp, #64]	; 0x40
   26f78:	str	r0, [r6]
   26f7c:	add	r5, r0, r0, lsl #1
   26f80:	ldr	r4, [r6, #8]
   26f84:	mov	r2, r7
   26f88:	ldr	r0, [r4, r5, lsl #3]!
   26f8c:	str	r0, [sp, #72]	; 0x48
   26f90:	ldr	r1, [r4, #8]
   26f94:	ldr	r0, [fp, #20]
   26f98:	bl	111ec <memcpy@plt>
   26f9c:	ldr	r0, [r4, #8]
   26fa0:	mov	r2, r7
   26fa4:	add	r1, r0, sl, lsl #3
   26fa8:	ldr	r0, [sp, #60]	; 0x3c
   26fac:	bl	111ec <memcpy@plt>
   26fb0:	ldr	r0, [sp, #64]	; 0x40
   26fb4:	bl	1386c <__assert_fail@plt+0x2434>
   26fb8:	ldr	r0, [r6, #8]
   26fbc:	add	r0, r0, r5, lsl #3
   26fc0:	ldr	r0, [r0, #8]
   26fc4:	bl	1386c <__assert_fail@plt+0x2434>
   26fc8:	ldr	r0, [r6, #8]
   26fcc:	add	r0, r0, r5, lsl #3
   26fd0:	ldr	r7, [r0, #4]
   26fd4:	ldr	ip, [r0, #20]
   26fd8:	cmn	r7, #1
   26fdc:	ble	278c4 <__assert_fail@plt+0x1648c>
   26fe0:	ldr	r1, [r0, #12]
   26fe4:	ldr	r2, [r0, #16]
   26fe8:	ldr	r6, [sp, #72]	; 0x48
   26fec:	mov	lr, #1
   26ff0:	str	r1, [sp, #52]	; 0x34
   26ff4:	ldr	r5, [sp, #188]	; 0xbc
   26ff8:	ldr	r0, [r5]
   26ffc:	add	r1, r0, r7, lsl #3
   27000:	ldr	r1, [r1, #4]
   27004:	tst	r1, #8
   27008:	bne	270a8 <__assert_fail@plt+0x15c70>
   2700c:	tst	r1, #1048576	; 0x100000
   27010:	bne	27130 <__assert_fail@plt+0x15cf8>
   27014:	uxtb	r1, r1
   27018:	cmp	r1, #4
   2701c:	bne	27164 <__assert_fail@plt+0x15d2c>
   27020:	ldr	r0, [r0, r7, lsl #3]
   27024:	mov	r4, #0
   27028:	add	r0, r0, #1
   2702c:	cmp	r0, sl
   27030:	bge	2704c <__assert_fail@plt+0x15c14>
   27034:	ldr	r1, [fp, #20]
   27038:	mov	r3, r2
   2703c:	ldr	r2, [r1, r0, lsl #3]!
   27040:	ldr	r1, [r1, #4]
   27044:	sub	r4, r1, r2
   27048:	mov	r2, r3
   2704c:	ldr	r1, [sp, #80]	; 0x50
   27050:	cmp	r1, #0
   27054:	beq	274a0 <__assert_fail@plt+0x16068>
   27058:	cmp	r0, sl
   2705c:	bge	270a0 <__assert_fail@plt+0x15c68>
   27060:	mov	r3, r2
   27064:	ldr	r2, [fp, #20]
   27068:	ldr	r1, [r2, r0, lsl #3]
   2706c:	cmn	r1, #1
   27070:	beq	270a0 <__assert_fail@plt+0x15c68>
   27074:	add	r0, r2, r0, lsl #3
   27078:	ldr	r0, [r0, #4]
   2707c:	cmn	r0, #1
   27080:	beq	270a0 <__assert_fail@plt+0x15c68>
   27084:	cmp	r4, #0
   27088:	mov	r2, r3
   2708c:	beq	274c4 <__assert_fail@plt+0x1608c>
   27090:	ldr	r0, [sp, #132]	; 0x84
   27094:	sub	r0, r0, r6
   27098:	cmp	r0, r4
   2709c:	bge	276a4 <__assert_fail@plt+0x1626c>
   270a0:	ldr	r7, [sp, #80]	; 0x50
   270a4:	b	2733c <__assert_fail@plt+0x15f04>
   270a8:	ldr	r0, [sp, #204]	; 0xcc
   270ac:	ldr	r4, [r5, #20]
   270b0:	cmp	r2, #1
   270b4:	ldr	r0, [r0, r6, lsl #2]
   270b8:	str	r0, [sp, #88]	; 0x58
   270bc:	blt	27110 <__assert_fail@plt+0x15cd8>
   270c0:	str	r4, [sp, #100]	; 0x64
   270c4:	mov	r5, r6
   270c8:	mov	r4, r2
   270cc:	mov	r0, #0
   270d0:	subs	r1, r2, #1
   270d4:	beq	270f8 <__assert_fail@plt+0x15cc0>
   270d8:	add	r2, r0, r1
   270dc:	lsr	r3, r2, #1
   270e0:	ldr	r6, [ip, r3, lsl #2]
   270e4:	cmp	r6, r7
   270e8:	movge	r1, r3
   270ec:	addlt	r0, lr, r2, lsr #1
   270f0:	cmp	r0, r1
   270f4:	bcc	270d8 <__assert_fail@plt+0x15ca0>
   270f8:	ldr	r0, [ip, r0, lsl #2]
   270fc:	mov	r2, r4
   27100:	ldr	r4, [sp, #100]	; 0x64
   27104:	mov	r6, r5
   27108:	cmp	r0, r7
   2710c:	beq	27244 <__assert_fail@plt+0x15e0c>
   27110:	ldr	r0, [sp, #52]	; 0x34
   27114:	cmp	r0, #0
   27118:	beq	27220 <__assert_fail@plt+0x15de8>
   2711c:	cmp	r2, #0
   27120:	bne	276ec <__assert_fail@plt+0x162b4>
   27124:	str	r7, [ip]
   27128:	mov	r2, #1
   2712c:	b	27244 <__assert_fail@plt+0x15e0c>
   27130:	mov	r0, r5
   27134:	mov	r1, r7
   27138:	add	r2, sp, #104	; 0x68
   2713c:	mov	r3, r6
   27140:	str	r5, [sp, #100]	; 0x64
   27144:	mov	r4, ip
   27148:	bl	315f0 <__assert_fail@plt+0x201b8>
   2714c:	mov	lr, #1
   27150:	mov	ip, r4
   27154:	mov	r1, r0
   27158:	ldr	r5, [sp, #100]	; 0x64
   2715c:	cmp	r1, #0
   27160:	bne	27190 <__assert_fail@plt+0x15d58>
   27164:	ldr	r0, [r5]
   27168:	mov	r2, r6
   2716c:	mov	r4, ip
   27170:	add	r1, r0, r7, lsl #3
   27174:	add	r0, sp, #104	; 0x68
   27178:	bl	318e4 <__assert_fail@plt+0x204ac>
   2717c:	mov	lr, #1
   27180:	mov	ip, r4
   27184:	mov	r1, #1
   27188:	cmp	r0, #0
   2718c:	beq	27330 <__assert_fail@plt+0x15ef8>
   27190:	ldr	r0, [r5, #12]
   27194:	add	r6, r1, r6
   27198:	ldr	r5, [r0, r7, lsl #2]
   2719c:	ldr	r7, [sp, #80]	; 0x50
   271a0:	cmp	r7, #0
   271a4:	beq	273dc <__assert_fail@plt+0x15fa4>
   271a8:	ldr	r0, [sp, #196]	; 0xc4
   271ac:	cmp	r6, r0
   271b0:	bgt	2733c <__assert_fail@plt+0x15f04>
   271b4:	ldr	r0, [sp, #204]	; 0xcc
   271b8:	ldr	r0, [r0, r6, lsl #2]
   271bc:	cmp	r0, #0
   271c0:	beq	2733c <__assert_fail@plt+0x15f04>
   271c4:	ldr	r1, [r0, #8]
   271c8:	cmp	r1, #1
   271cc:	blt	2733c <__assert_fail@plt+0x15f04>
   271d0:	ldr	r0, [r0, #12]
   271d4:	mov	r4, r6
   271d8:	subs	r1, r1, #1
   271dc:	mov	r2, #0
   271e0:	beq	27208 <__assert_fail@plt+0x15dd0>
   271e4:	mov	r2, #0
   271e8:	add	r3, r2, r1
   271ec:	lsr	r7, r3, #1
   271f0:	ldr	r6, [r0, r7, lsl #2]
   271f4:	cmp	r6, r5
   271f8:	movge	r1, r7
   271fc:	addlt	r2, lr, r3, lsr #1
   27200:	cmp	r2, r1
   27204:	bcc	271e8 <__assert_fail@plt+0x15db0>
   27208:	ldr	r0, [r0, r2, lsl #2]
   2720c:	mov	r6, r4
   27210:	mov	r1, #0
   27214:	cmp	r0, r5
   27218:	beq	275bc <__assert_fail@plt+0x16184>
   2721c:	b	27330 <__assert_fail@plt+0x15ef8>
   27220:	mov	r0, #4
   27224:	bl	3554c <__assert_fail@plt+0x24114>
   27228:	cmp	r0, #0
   2722c:	beq	27c2c <__assert_fail@plt+0x167f4>
   27230:	mov	ip, r0
   27234:	str	r7, [r0]
   27238:	mov	r0, #1
   2723c:	mov	r2, #1
   27240:	str	r0, [sp, #52]	; 0x34
   27244:	add	r0, r7, r7, lsl #1
   27248:	add	r1, r4, r0, lsl #2
   2724c:	ldr	lr, [r1, #4]
   27250:	cmp	lr, #1
   27254:	blt	27330 <__assert_fail@plt+0x15ef8>
   27258:	ldr	r0, [r1, #8]
   2725c:	str	r2, [sp, #44]	; 0x2c
   27260:	str	r6, [sp, #72]	; 0x48
   27264:	mov	r6, #0
   27268:	mvn	r5, #0
   2726c:	str	ip, [sp, #64]	; 0x40
   27270:	str	r0, [sp, #84]	; 0x54
   27274:	ldr	r0, [sp, #88]	; 0x58
   27278:	ldr	r2, [r0, #8]
   2727c:	sub	r1, r2, #1
   27280:	cmp	r2, #1
   27284:	blt	27304 <__assert_fail@plt+0x15ecc>
   27288:	ldr	r0, [sp, #84]	; 0x54
   2728c:	str	r5, [sp, #100]	; 0x64
   27290:	mov	r5, #0
   27294:	cmp	r1, #0
   27298:	ldr	r7, [r0, r6, lsl #2]
   2729c:	ldr	r0, [sp, #88]	; 0x58
   272a0:	ldr	r4, [r0, #12]
   272a4:	beq	272d0 <__assert_fail@plt+0x15e98>
   272a8:	mov	r3, r1
   272ac:	mov	ip, #1
   272b0:	add	r0, r5, r3
   272b4:	lsr	r8, r0, #1
   272b8:	ldr	sl, [r4, r8, lsl #2]
   272bc:	cmp	sl, r7
   272c0:	movge	r3, r8
   272c4:	addlt	r5, ip, r0, lsr #1
   272c8:	cmp	r5, r3
   272cc:	bcc	272b0 <__assert_fail@plt+0x15e78>
   272d0:	ldr	r0, [r4, r5, lsl #2]
   272d4:	cmp	r0, r7
   272d8:	bne	272f8 <__assert_fail@plt+0x15ec0>
   272dc:	ldr	r4, [sp, #100]	; 0x64
   272e0:	ldr	r8, [sp, #96]	; 0x60
   272e4:	ldr	sl, [sp, #92]	; 0x5c
   272e8:	cmn	r4, #1
   272ec:	bne	273ec <__assert_fail@plt+0x15fb4>
   272f0:	mov	r5, r7
   272f4:	b	27304 <__assert_fail@plt+0x15ecc>
   272f8:	ldr	r8, [sp, #96]	; 0x60
   272fc:	ldr	sl, [sp, #92]	; 0x5c
   27300:	ldr	r5, [sp, #100]	; 0x64
   27304:	add	r6, r6, #1
   27308:	cmp	r6, lr
   2730c:	blt	27280 <__assert_fail@plt+0x15e48>
   27310:	ldr	ip, [sp, #64]	; 0x40
   27314:	ldr	r6, [sp, #72]	; 0x48
   27318:	ldr	r1, [sp, #44]	; 0x2c
   2731c:	mov	lr, #1
   27320:	cmn	r5, #1
   27324:	bgt	275c4 <__assert_fail@plt+0x1618c>
   27328:	cmn	r5, #2
   2732c:	beq	27b90 <__assert_fail@plt+0x16758>
   27330:	ldr	r7, [sp, #80]	; 0x50
   27334:	cmp	r7, #0
   27338:	beq	27af4 <__assert_fail@plt+0x166bc>
   2733c:	ldr	r0, [r7]
   27340:	mov	r4, #0
   27344:	cmp	r0, #0
   27348:	beq	27af8 <__assert_fail@plt+0x166c0>
   2734c:	sub	r0, r0, #1
   27350:	ldr	r5, [sp, #56]	; 0x38
   27354:	str	ip, [sp, #64]	; 0x40
   27358:	str	r0, [r7]
   2735c:	add	r6, r0, r0, lsl #1
   27360:	ldr	r4, [r7, #8]
   27364:	mov	r2, r5
   27368:	ldr	r0, [r4, r6, lsl #3]!
   2736c:	str	r0, [sp, #72]	; 0x48
   27370:	ldr	r1, [r4, #8]
   27374:	ldr	r0, [fp, #20]
   27378:	bl	111ec <memcpy@plt>
   2737c:	ldr	r0, [r4, #8]
   27380:	mov	r2, r5
   27384:	add	r1, r0, sl, lsl #3
   27388:	ldr	r0, [sp, #60]	; 0x3c
   2738c:	bl	111ec <memcpy@plt>
   27390:	ldr	r0, [sp, #64]	; 0x40
   27394:	bl	1386c <__assert_fail@plt+0x2434>
   27398:	ldr	r0, [r7, #8]
   2739c:	add	r0, r0, r6, lsl #3
   273a0:	ldr	r0, [r0, #8]
   273a4:	bl	1386c <__assert_fail@plt+0x2434>
   273a8:	ldr	r0, [r7, #8]
   273ac:	add	r0, r0, r6, lsl #3
   273b0:	ldr	r7, [r0, #4]
   273b4:	ldr	ip, [r0, #20]
   273b8:	cmn	r7, #1
   273bc:	ble	278b0 <__assert_fail@plt+0x16478>
   273c0:	ldr	r1, [r0, #12]
   273c4:	ldr	r4, [sp, #32]
   273c8:	ldr	r6, [sp, #72]	; 0x48
   273cc:	mov	lr, #1
   273d0:	str	r1, [sp, #52]	; 0x34
   273d4:	ldr	r1, [r0, #16]
   273d8:	b	275cc <__assert_fail@plt+0x16194>
   273dc:	mov	r1, #0
   273e0:	cmn	r5, #1
   273e4:	bgt	275c4 <__assert_fail@plt+0x1618c>
   273e8:	b	27328 <__assert_fail@plt+0x15ef0>
   273ec:	ldr	r1, [sp, #44]	; 0x2c
   273f0:	ldr	ip, [sp, #64]	; 0x40
   273f4:	mov	lr, #1
   273f8:	cmp	r1, #1
   273fc:	blt	27450 <__assert_fail@plt+0x16018>
   27400:	mov	r0, #0
   27404:	subs	r1, r1, #1
   27408:	beq	2742c <__assert_fail@plt+0x15ff4>
   2740c:	add	r2, r0, r1
   27410:	lsr	r3, r2, #1
   27414:	ldr	r6, [ip, r3, lsl #2]
   27418:	cmp	r6, r4
   2741c:	movge	r1, r3
   27420:	addlt	r0, lr, r2, lsr #1
   27424:	cmp	r0, r1
   27428:	bcc	2740c <__assert_fail@plt+0x15fd4>
   2742c:	ldr	r0, [ip, r0, lsl #2]
   27430:	ldr	r1, [sp, #44]	; 0x2c
   27434:	cmp	r0, r4
   27438:	bne	27450 <__assert_fail@plt+0x16018>
   2743c:	ldr	r6, [sp, #72]	; 0x48
   27440:	mov	r5, r7
   27444:	cmn	r5, #1
   27448:	bgt	275c4 <__assert_fail@plt+0x1618c>
   2744c:	b	27328 <__assert_fail@plt+0x15ef0>
   27450:	ldr	r5, [sp, #80]	; 0x50
   27454:	cmp	r5, #0
   27458:	beq	275b4 <__assert_fail@plt+0x1617c>
   2745c:	ldr	r6, [r5]
   27460:	ldr	r0, [r5, #4]
   27464:	add	r1, r6, #1
   27468:	cmp	r1, r0
   2746c:	str	r1, [r5]
   27470:	bne	274e8 <__assert_fail@plt+0x160b0>
   27474:	ldr	r0, [r5, #8]
   27478:	add	r1, r1, r1, lsl #1
   2747c:	lsl	r1, r1, #4
   27480:	bl	3557c <__assert_fail@plt+0x24144>
   27484:	cmp	r0, #0
   27488:	beq	27b8c <__assert_fail@plt+0x16754>
   2748c:	str	r0, [r5, #8]
   27490:	ldr	r1, [r5, #4]
   27494:	lsl	r1, r1, #1
   27498:	str	r1, [r5, #4]
   2749c:	b	274ec <__assert_fail@plt+0x160b4>
   274a0:	cmp	r4, #0
   274a4:	beq	274c4 <__assert_fail@plt+0x1608c>
   274a8:	ldr	r0, [r5, #12]
   274ac:	add	r6, r4, r6
   274b0:	mov	r1, #0
   274b4:	ldr	r5, [r0, r7, lsl #2]
   274b8:	cmn	r5, #1
   274bc:	bgt	275c4 <__assert_fail@plt+0x1618c>
   274c0:	b	27328 <__assert_fail@plt+0x15ef0>
   274c4:	ldr	r0, [sp, #52]	; 0x34
   274c8:	str	r5, [sp, #100]	; 0x64
   274cc:	cmp	r0, #0
   274d0:	beq	275e0 <__assert_fail@plt+0x161a8>
   274d4:	cmp	r2, #0
   274d8:	bne	277c4 <__assert_fail@plt+0x1638c>
   274dc:	str	r7, [ip]
   274e0:	mov	r5, #1
   274e4:	b	27608 <__assert_fail@plt+0x161d0>
   274e8:	ldr	r0, [r5, #8]
   274ec:	ldr	r1, [sp, #72]	; 0x48
   274f0:	add	r6, r6, r6, lsl #1
   274f4:	str	r1, [r0, r6, lsl #3]!
   274f8:	str	r7, [r0, #4]
   274fc:	ldr	r0, [sp, #48]	; 0x30
   27500:	bl	3554c <__assert_fail@plt+0x24114>
   27504:	ldr	r1, [r5, #8]
   27508:	cmp	r0, #0
   2750c:	add	r4, r1, r6, lsl #3
   27510:	str	r0, [r4, #8]!
   27514:	beq	27b8c <__assert_fail@plt+0x16754>
   27518:	ldr	r7, [sp, #56]	; 0x38
   2751c:	ldr	r1, [fp, #20]
   27520:	mov	r2, r7
   27524:	bl	111ec <memcpy@plt>
   27528:	ldr	r0, [r4]
   2752c:	ldr	r1, [sp, #60]	; 0x3c
   27530:	mov	r2, r7
   27534:	add	r0, r0, sl, lsl #3
   27538:	bl	111ec <memcpy@plt>
   2753c:	ldr	r0, [r5, #8]
   27540:	ldr	r1, [sp, #44]	; 0x2c
   27544:	add	r6, r0, r6, lsl #3
   27548:	cmp	r1, #1
   2754c:	mov	r5, r6
   27550:	str	r1, [r5, #16]!
   27554:	sub	r4, r5, #4
   27558:	blt	2759c <__assert_fail@plt+0x16164>
   2755c:	lsl	r7, r1, #2
   27560:	str	r1, [r4]
   27564:	mov	r0, r7
   27568:	bl	3554c <__assert_fail@plt+0x24114>
   2756c:	cmp	r0, #0
   27570:	str	r0, [r6, #20]
   27574:	beq	27c34 <__assert_fail@plt+0x167fc>
   27578:	ldr	r4, [sp, #64]	; 0x40
   2757c:	mov	r2, r7
   27580:	mov	r1, r4
   27584:	bl	111ec <memcpy@plt>
   27588:	ldr	r6, [sp, #72]	; 0x48
   2758c:	ldr	r1, [sp, #44]	; 0x2c
   27590:	ldr	r5, [sp, #100]	; 0x64
   27594:	mov	ip, r4
   27598:	b	2731c <__assert_fail@plt+0x15ee4>
   2759c:	ldr	ip, [sp, #64]	; 0x40
   275a0:	mov	r0, #0
   275a4:	mov	lr, #1
   275a8:	str	r0, [r4]
   275ac:	str	r0, [r4, #4]
   275b0:	str	r0, [r4, #8]
   275b4:	ldr	r6, [sp, #72]	; 0x48
   275b8:	ldr	r5, [sp, #100]	; 0x64
   275bc:	cmn	r5, #1
   275c0:	ble	27328 <__assert_fail@plt+0x15ef0>
   275c4:	ldr	r4, [sp, #32]
   275c8:	mov	r7, r5
   275cc:	ldr	r0, [fp, #20]
   275d0:	ldr	r0, [r0, #4]
   275d4:	cmp	r6, r0
   275d8:	ble	26de4 <__assert_fail@plt+0x159ac>
   275dc:	b	26d3c <__assert_fail@plt+0x15904>
   275e0:	mov	r0, #4
   275e4:	bl	3554c <__assert_fail@plt+0x24114>
   275e8:	cmp	r0, #0
   275ec:	beq	27c2c <__assert_fail@plt+0x167f4>
   275f0:	mov	ip, r0
   275f4:	str	r7, [r0]
   275f8:	mov	r0, #1
   275fc:	mov	r5, #1
   27600:	mov	lr, #1
   27604:	str	r0, [sp, #52]	; 0x34
   27608:	ldr	r0, [sp, #204]	; 0xcc
   2760c:	ldr	r0, [r0, r6, lsl #2]
   27610:	ldr	r1, [r0, #8]
   27614:	cmp	r1, #1
   27618:	blt	2769c <__assert_fail@plt+0x16264>
   2761c:	ldr	r2, [sp, #100]	; 0x64
   27620:	add	r3, r7, r7, lsl #1
   27624:	str	r5, [sp, #44]	; 0x2c
   27628:	ldr	r0, [r0, #12]
   2762c:	str	r4, [sp, #88]	; 0x58
   27630:	str	r6, [sp, #72]	; 0x48
   27634:	ldr	r2, [r2, #20]
   27638:	add	r2, r2, r3, lsl #2
   2763c:	ldr	r2, [r2, #8]
   27640:	ldr	r5, [r2]
   27644:	subs	r2, r1, #1
   27648:	mov	r1, #0
   2764c:	beq	27678 <__assert_fail@plt+0x16240>
   27650:	add	r3, r1, r2
   27654:	mov	r4, r5
   27658:	lsr	r6, r3, #1
   2765c:	ldr	r5, [r0, r6, lsl #2]
   27660:	cmp	r5, r4
   27664:	mov	r5, r4
   27668:	movge	r2, r6
   2766c:	addlt	r1, lr, r3, lsr #1
   27670:	cmp	r1, r2
   27674:	bcc	27650 <__assert_fail@plt+0x16218>
   27678:	ldr	r0, [r0, r1, lsl #2]
   2767c:	ldr	r6, [sp, #72]	; 0x48
   27680:	ldr	r1, [sp, #88]	; 0x58
   27684:	cmp	r0, r5
   27688:	bne	27158 <__assert_fail@plt+0x15d20>
   2768c:	ldr	r1, [sp, #44]	; 0x2c
   27690:	cmn	r5, #1
   27694:	bgt	275c4 <__assert_fail@plt+0x1618c>
   27698:	b	27328 <__assert_fail@plt+0x15ef0>
   2769c:	ldr	r5, [sp, #100]	; 0x64
   276a0:	b	27164 <__assert_fail@plt+0x15d2c>
   276a4:	ldr	r2, [sp, #108]	; 0x6c
   276a8:	str	ip, [sp, #64]	; 0x40
   276ac:	add	r0, r2, r1
   276b0:	add	r1, r2, r6
   276b4:	mov	r2, r4
   276b8:	bl	1121c <memcmp@plt>
   276bc:	cmp	r0, #0
   276c0:	beq	276d0 <__assert_fail@plt+0x16298>
   276c4:	ldr	r7, [sp, #80]	; 0x50
   276c8:	ldr	ip, [sp, #64]	; 0x40
   276cc:	b	2733c <__assert_fail@plt+0x15f04>
   276d0:	ldr	r0, [r5, #12]
   276d4:	ldr	ip, [sp, #64]	; 0x40
   276d8:	add	r6, r4, r6
   276dc:	mov	lr, #1
   276e0:	ldr	r5, [r0, r7, lsl #2]
   276e4:	ldr	r7, [sp, #80]	; 0x50
   276e8:	b	271a8 <__assert_fail@plt+0x15d70>
   276ec:	ldr	r0, [sp, #52]	; 0x34
   276f0:	mov	r8, r2
   276f4:	str	r4, [sp, #100]	; 0x64
   276f8:	cmp	r0, r2
   276fc:	bne	27730 <__assert_fail@plt+0x162f8>
   27700:	lsl	r1, r8, #3
   27704:	mov	r0, ip
   27708:	mov	r4, r8
   2770c:	mov	r5, ip
   27710:	bl	3557c <__assert_fail@plt+0x24144>
   27714:	mov	ip, r5
   27718:	cmp	r0, #0
   2771c:	beq	27b90 <__assert_fail@plt+0x16758>
   27720:	mov	r1, r8
   27724:	mov	ip, r0
   27728:	lsl	r1, r8, #1
   2772c:	str	r1, [sp, #52]	; 0x34
   27730:	ldr	r0, [ip]
   27734:	mov	r2, r8
   27738:	cmp	r0, r7
   2773c:	ble	27778 <__assert_fail@plt+0x16340>
   27740:	cmp	r8, #1
   27744:	blt	277a8 <__assert_fail@plt+0x16370>
   27748:	mov	r0, r8
   2774c:	add	r1, ip, r8, lsl #2
   27750:	add	r0, r8, #1
   27754:	mov	r2, r1
   27758:	ldr	r3, [r2, #-4]!
   2775c:	sub	r0, r0, #1
   27760:	cmp	r0, #1
   27764:	str	r3, [r1]
   27768:	mov	r1, r2
   2776c:	bgt	27758 <__assert_fail@plt+0x16320>
   27770:	sub	r2, r0, #1
   27774:	b	277a8 <__assert_fail@plt+0x16370>
   27778:	add	r0, ip, r8, lsl #2
   2777c:	ldr	r1, [r0, #-4]
   27780:	cmp	r1, r7
   27784:	ble	277a8 <__assert_fail@plt+0x16370>
   27788:	sub	r2, r8, #2
   2778c:	str	r1, [r0]
   27790:	sub	r2, r2, #1
   27794:	ldr	r1, [r0, #-8]
   27798:	sub	r0, r0, #4
   2779c:	cmp	r1, r7
   277a0:	bgt	2778c <__assert_fail@plt+0x16354>
   277a4:	add	r2, r2, #2
   277a8:	str	r7, [ip, r2, lsl #2]
   277ac:	mov	r2, r8
   277b0:	ldr	sl, [sp, #92]	; 0x5c
   277b4:	ldr	r4, [sp, #100]	; 0x64
   277b8:	add	r2, r8, #1
   277bc:	ldr	r8, [sp, #96]	; 0x60
   277c0:	b	27244 <__assert_fail@plt+0x15e0c>
   277c4:	ldr	r0, [sp, #52]	; 0x34
   277c8:	mov	r8, r2
   277cc:	str	r4, [sp, #88]	; 0x58
   277d0:	cmp	r0, r2
   277d4:	bne	27808 <__assert_fail@plt+0x163d0>
   277d8:	lsl	r1, r8, #3
   277dc:	mov	r0, ip
   277e0:	mov	r5, r8
   277e4:	mov	r4, ip
   277e8:	bl	3557c <__assert_fail@plt+0x24144>
   277ec:	mov	ip, r4
   277f0:	cmp	r0, #0
   277f4:	beq	27b90 <__assert_fail@plt+0x16758>
   277f8:	mov	r1, r8
   277fc:	mov	ip, r0
   27800:	lsl	r1, r8, #1
   27804:	str	r1, [sp, #52]	; 0x34
   27808:	ldr	r0, [ip]
   2780c:	mov	r2, r8
   27810:	cmp	r0, r7
   27814:	ble	27850 <__assert_fail@plt+0x16418>
   27818:	cmp	r8, #1
   2781c:	blt	27880 <__assert_fail@plt+0x16448>
   27820:	mov	r0, r8
   27824:	add	r1, ip, r8, lsl #2
   27828:	add	r0, r8, #1
   2782c:	mov	r2, r1
   27830:	ldr	r3, [r2, #-4]!
   27834:	sub	r0, r0, #1
   27838:	cmp	r0, #1
   2783c:	str	r3, [r1]
   27840:	mov	r1, r2
   27844:	bgt	27830 <__assert_fail@plt+0x163f8>
   27848:	sub	r2, r0, #1
   2784c:	b	27880 <__assert_fail@plt+0x16448>
   27850:	add	r0, ip, r8, lsl #2
   27854:	ldr	r1, [r0, #-4]
   27858:	cmp	r1, r7
   2785c:	ble	27880 <__assert_fail@plt+0x16448>
   27860:	sub	r2, r8, #2
   27864:	str	r1, [r0]
   27868:	sub	r2, r2, #1
   2786c:	ldr	r1, [r0, #-8]
   27870:	sub	r0, r0, #4
   27874:	cmp	r1, r7
   27878:	bgt	27864 <__assert_fail@plt+0x1642c>
   2787c:	add	r2, r2, #2
   27880:	mov	r5, r8
   27884:	ldr	sl, [sp, #92]	; 0x5c
   27888:	ldr	r4, [sp, #88]	; 0x58
   2788c:	mov	lr, #1
   27890:	str	r7, [ip, r2, lsl #2]
   27894:	add	r5, r8, #1
   27898:	ldr	r8, [sp, #96]	; 0x60
   2789c:	b	27608 <__assert_fail@plt+0x161d0>
   278a0:	mov	r6, #0
   278a4:	b	2514c <__assert_fail@plt+0x13d14>
   278a8:	mov	r9, #12
   278ac:	b	27a7c <__assert_fail@plt+0x16644>
   278b0:	ldr	r7, [sp, #80]	; 0x50
   278b4:	mov	r4, #0
   278b8:	b	27af8 <__assert_fail@plt+0x166c0>
   278bc:	mov	r9, r0
   278c0:	b	27a7c <__assert_fail@plt+0x16644>
   278c4:	ldr	r4, [sp, #32]
   278c8:	ldr	r6, [sp, #80]	; 0x50
   278cc:	ldr	r5, [sp, #76]	; 0x4c
   278d0:	mov	r0, ip
   278d4:	bl	1386c <__assert_fail@plt+0x2434>
   278d8:	ldr	r0, [fp, #-184]	; 0xffffff48
   278dc:	cmp	r0, r5
   278e0:	beq	278e8 <__assert_fail@plt+0x164b0>
   278e4:	bl	1386c <__assert_fail@plt+0x2434>
   278e8:	mov	r0, #16
   278ec:	cmp	r6, #0
   278f0:	str	r0, [fp, #-188]	; 0xffffff44
   278f4:	mov	r0, #0
   278f8:	str	r0, [fp, #-192]	; 0xffffff40
   278fc:	str	r5, [fp, #-184]	; 0xffffff48
   27900:	beq	27958 <__assert_fail@plt+0x16520>
   27904:	ldr	r1, [r6]
   27908:	ldr	r0, [r6, #8]
   2790c:	cmp	r1, #1
   27910:	blt	27950 <__assert_fail@plt+0x16518>
   27914:	mov	r4, #0
   27918:	mov	r5, #0
   2791c:	add	r0, r0, r4
   27920:	ldr	r0, [r0, #20]
   27924:	bl	1386c <__assert_fail@plt+0x2434>
   27928:	ldr	r0, [r6, #8]
   2792c:	add	r0, r0, r4
   27930:	ldr	r0, [r0, #8]
   27934:	bl	1386c <__assert_fail@plt+0x2434>
   27938:	ldr	r1, [r6]
   2793c:	ldr	r0, [r6, #8]
   27940:	add	r5, r5, #1
   27944:	add	r4, r4, #24
   27948:	cmp	r5, r1
   2794c:	blt	2791c <__assert_fail@plt+0x164e4>
   27950:	bl	1386c <__assert_fail@plt+0x2434>
   27954:	ldr	r4, [sp, #32]
   27958:	ldr	r0, [fp, #20]
   2795c:	ldrb	r1, [sp, #180]	; 0xb4
   27960:	ldr	r2, [fp, #16]
   27964:	add	r0, r0, #4
   27968:	b	279b0 <__assert_fail@plt+0x16578>
   2796c:	ldr	r7, [sp, #132]	; 0x84
   27970:	ldr	r6, [sp, #24]
   27974:	ldr	ip, [sp, #116]	; 0x74
   27978:	cmp	r3, r7
   2797c:	mov	r5, r6
   27980:	addne	r5, ip, r3, lsl #2
   27984:	ldr	r3, [r5]
   27988:	str	r3, [r0, #-4]
   2798c:	ldr	r5, [r0]
   27990:	cmp	r5, r7
   27994:	addne	r6, ip, r5, lsl #2
   27998:	ldr	r7, [r6]
   2799c:	ldr	r6, [fp, #20]
   279a0:	add	r6, r6, r9, lsl #3
   279a4:	str	r7, [r0]
   279a8:	add	r6, r6, #4
   279ac:	b	279cc <__assert_fail@plt+0x16594>
   279b0:	ldr	r3, [r0, #-4]
   279b4:	cmn	r3, #1
   279b8:	beq	279e0 <__assert_fail@plt+0x165a8>
   279bc:	cmp	r1, #0
   279c0:	bne	2796c <__assert_fail@plt+0x16534>
   279c4:	ldr	r7, [r0]
   279c8:	mov	r6, r0
   279cc:	ldr	r5, [fp, #-200]	; 0xffffff38
   279d0:	add	r3, r3, r5
   279d4:	str	r3, [r0, #-4]
   279d8:	add	r3, r7, r5
   279dc:	str	r3, [r6]
   279e0:	sub	r2, r2, #1
   279e4:	add	r0, r0, #8
   279e8:	add	r9, r9, #1
   279ec:	cmp	r4, r2
   279f0:	bne	279b0 <__assert_fail@plt+0x16578>
   279f4:	cmp	r4, #1
   279f8:	blt	27a10 <__assert_fail@plt+0x165d8>
   279fc:	ldr	r0, [fp, #20]
   27a00:	lsl	r2, r4, #3
   27a04:	mov	r1, #255	; 0xff
   27a08:	add	r0, r0, sl, lsl #3
   27a0c:	bl	1136c <memset@plt>
   27a10:	ldr	r0, [r8, #132]	; 0x84
   27a14:	mov	r9, #0
   27a18:	cmp	r0, #0
   27a1c:	beq	27a7c <__assert_fail@plt+0x16644>
   27a20:	cmp	sl, #2
   27a24:	bcc	27a7c <__assert_fail@plt+0x16644>
   27a28:	ldr	r1, [fp, #16]
   27a2c:	ldr	r2, [sp, #32]
   27a30:	ldr	r6, [fp, #20]
   27a34:	sub	r1, r1, #1
   27a38:	sub	r1, r1, r2
   27a3c:	mov	r2, #0
   27a40:	ldr	r3, [r0, r2, lsl #2]
   27a44:	cmp	r2, r3
   27a48:	beq	27a6c <__assert_fail@plt+0x16634>
   27a4c:	add	r3, r6, r3, lsl #3
   27a50:	add	r7, r6, r2, lsl #3
   27a54:	ldr	r3, [r3, #8]
   27a58:	str	r3, [r7, #8]
   27a5c:	ldr	r3, [r0, r2, lsl #2]
   27a60:	add	r3, r6, r3, lsl #3
   27a64:	ldr	r3, [r3, #12]
   27a68:	str	r3, [r7, #12]
   27a6c:	add	r2, r2, #1
   27a70:	cmp	r1, r2
   27a74:	bne	27a40 <__assert_fail@plt+0x16608>
   27a78:	mov	r9, #0
   27a7c:	ldr	r0, [sp, #204]	; 0xcc
   27a80:	bl	1386c <__assert_fail@plt+0x2434>
   27a84:	ldr	r0, [sp, #96]	; 0x60
   27a88:	ldr	r0, [r0, #76]	; 0x4c
   27a8c:	cmp	r0, #0
   27a90:	beq	27aac <__assert_fail@plt+0x16674>
   27a94:	add	r0, sp, #104	; 0x68
   27a98:	bl	2ee28 <__assert_fail@plt+0x1d9f0>
   27a9c:	ldr	r0, [sp, #236]	; 0xec
   27aa0:	bl	1386c <__assert_fail@plt+0x2434>
   27aa4:	ldr	r0, [sp, #220]	; 0xdc
   27aa8:	bl	1386c <__assert_fail@plt+0x2434>
   27aac:	ldr	r0, [sp, #112]	; 0x70
   27ab0:	bl	1386c <__assert_fail@plt+0x2434>
   27ab4:	ldr	r0, [sp, #116]	; 0x74
   27ab8:	bl	1386c <__assert_fail@plt+0x2434>
   27abc:	ldrb	r0, [sp, #179]	; 0xb3
   27ac0:	cmp	r0, #0
   27ac4:	beq	27ad0 <__assert_fail@plt+0x16698>
   27ac8:	ldr	r0, [sp, #108]	; 0x6c
   27acc:	bl	1386c <__assert_fail@plt+0x2434>
   27ad0:	mov	r0, r9
   27ad4:	sub	sp, fp, #28
   27ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27adc:	mov	r0, r8
   27ae0:	bl	1386c <__assert_fail@plt+0x2434>
   27ae4:	mov	r0, #0
   27ae8:	bl	1386c <__assert_fail@plt+0x2434>
   27aec:	mov	r9, #12
   27af0:	b	27a7c <__assert_fail@plt+0x16644>
   27af4:	mov	r4, #1
   27af8:	mov	r0, ip
   27afc:	bl	1386c <__assert_fail@plt+0x2434>
   27b00:	ldr	r0, [fp, #-184]	; 0xffffff48
   27b04:	ldr	r1, [sp, #76]	; 0x4c
   27b08:	cmp	r0, r1
   27b0c:	beq	27b14 <__assert_fail@plt+0x166dc>
   27b10:	bl	1386c <__assert_fail@plt+0x2434>
   27b14:	mov	r0, #16
   27b18:	mov	r9, #1
   27b1c:	cmp	r4, #0
   27b20:	str	r0, [fp, #-188]	; 0xffffff44
   27b24:	mov	r0, #0
   27b28:	str	r0, [fp, #-192]	; 0xffffff40
   27b2c:	ldr	r0, [sp, #76]	; 0x4c
   27b30:	str	r0, [fp, #-184]	; 0xffffff48
   27b34:	bne	27a7c <__assert_fail@plt+0x16644>
   27b38:	ldr	r1, [r7]
   27b3c:	ldr	r0, [r7, #8]
   27b40:	cmp	r1, #1
   27b44:	blt	27b84 <__assert_fail@plt+0x1674c>
   27b48:	mov	r5, #0
   27b4c:	mov	r6, #0
   27b50:	add	r0, r0, r5
   27b54:	ldr	r0, [r0, #20]
   27b58:	bl	1386c <__assert_fail@plt+0x2434>
   27b5c:	ldr	r0, [r7, #8]
   27b60:	add	r0, r0, r5
   27b64:	ldr	r0, [r0, #8]
   27b68:	bl	1386c <__assert_fail@plt+0x2434>
   27b6c:	ldr	r1, [r7]
   27b70:	ldr	r0, [r7, #8]
   27b74:	add	r6, r6, #1
   27b78:	add	r5, r5, #24
   27b7c:	cmp	r6, r1
   27b80:	blt	27b50 <__assert_fail@plt+0x16718>
   27b84:	bl	1386c <__assert_fail@plt+0x2434>
   27b88:	b	27a7c <__assert_fail@plt+0x16644>
   27b8c:	ldr	ip, [sp, #64]	; 0x40
   27b90:	mov	r0, ip
   27b94:	bl	1386c <__assert_fail@plt+0x2434>
   27b98:	ldr	r0, [fp, #-184]	; 0xffffff48
   27b9c:	ldr	r4, [sp, #76]	; 0x4c
   27ba0:	cmp	r0, r4
   27ba4:	beq	27bac <__assert_fail@plt+0x16774>
   27ba8:	bl	1386c <__assert_fail@plt+0x2434>
   27bac:	mov	r0, #16
   27bb0:	mov	r9, #12
   27bb4:	str	r0, [fp, #-188]	; 0xffffff44
   27bb8:	mov	r0, #0
   27bbc:	str	r0, [fp, #-192]	; 0xffffff40
   27bc0:	ldr	r0, [sp, #80]	; 0x50
   27bc4:	str	r4, [fp, #-184]	; 0xffffff48
   27bc8:	cmp	r0, #0
   27bcc:	beq	27a7c <__assert_fail@plt+0x16644>
   27bd0:	ldr	r1, [r0]
   27bd4:	ldr	r0, [r0, #8]
   27bd8:	cmp	r1, #1
   27bdc:	blt	27b84 <__assert_fail@plt+0x1674c>
   27be0:	ldr	r4, [sp, #80]	; 0x50
   27be4:	mov	r5, #0
   27be8:	mov	r6, #0
   27bec:	add	r0, r0, r5
   27bf0:	ldr	r0, [r0, #20]
   27bf4:	bl	1386c <__assert_fail@plt+0x2434>
   27bf8:	ldr	r0, [r4, #8]
   27bfc:	add	r0, r0, r5
   27c00:	ldr	r0, [r0, #8]
   27c04:	bl	1386c <__assert_fail@plt+0x2434>
   27c08:	ldr	r1, [r4]
   27c0c:	ldr	r0, [r4, #8]
   27c10:	add	r6, r6, #1
   27c14:	add	r5, r5, #24
   27c18:	cmp	r6, r1
   27c1c:	blt	27bec <__assert_fail@plt+0x167b4>
   27c20:	b	27b84 <__assert_fail@plt+0x1674c>
   27c24:	mov	r9, #1
   27c28:	b	27a7c <__assert_fail@plt+0x16644>
   27c2c:	mov	ip, #0
   27c30:	b	27b90 <__assert_fail@plt+0x16758>
   27c34:	ldr	ip, [sp, #64]	; 0x40
   27c38:	mov	r0, #0
   27c3c:	str	r0, [r5]
   27c40:	str	r0, [r4]
   27c44:	b	27b90 <__assert_fail@plt+0x16758>
   27c48:	push	{fp, lr}
   27c4c:	mov	fp, sp
   27c50:	sub	sp, sp, #16
   27c54:	mov	ip, #1
   27c58:	str	r2, [sp, #4]
   27c5c:	str	ip, [sp, #12]
   27c60:	mov	ip, #0
   27c64:	str	ip, [sp]
   27c68:	ldr	ip, [fp, #8]
   27c6c:	str	ip, [sp, #8]
   27c70:	bl	27c7c <__assert_fail@plt+0x16844>
   27c74:	mov	sp, fp
   27c78:	pop	{fp, pc}
   27c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c80:	add	fp, sp, #28
   27c84:	sub	sp, sp, #44	; 0x2c
   27c88:	mvn	r6, #0
   27c8c:	cmp	r3, #0
   27c90:	blt	27df8 <__assert_fail@plt+0x169c0>
   27c94:	mov	r5, r3
   27c98:	mov	r9, r2
   27c9c:	cmp	r3, r2
   27ca0:	bgt	27df8 <__assert_fail@plt+0x169c0>
   27ca4:	mov	r7, r0
   27ca8:	ldr	r0, [fp, #8]
   27cac:	mov	r8, r9
   27cb0:	mov	sl, r1
   27cb4:	movw	r1, #0
   27cb8:	ldr	r6, [r7]
   27cbc:	movt	r1, #0
   27cc0:	add	r0, r0, r5
   27cc4:	cmp	r0, r9
   27cc8:	bicle	r8, r0, r0, asr #31
   27ccc:	movw	r0, #0
   27cd0:	movt	r0, #0
   27cd4:	orrs	r4, r1, r0
   27cd8:	beq	27ce4 <__assert_fail@plt+0x168ac>
   27cdc:	add	r0, r6, #136	; 0x88
   27ce0:	bl	111d4 <pthread_mutex_lock@plt>
   27ce4:	ldrb	r0, [r7, #28]
   27ce8:	str	r6, [sp, #24]
   27cec:	ldr	r6, [fp, #16]
   27cf0:	cmp	r8, r5
   27cf4:	ubfx	r1, r0, #5, #2
   27cf8:	str	r4, [sp, #36]	; 0x24
   27cfc:	str	sl, [sp, #32]
   27d00:	str	r1, [sp, #28]
   27d04:	ble	27d28 <__assert_fail@plt+0x168f0>
   27d08:	tst	r0, #8
   27d0c:	bne	27d28 <__assert_fail@plt+0x168f0>
   27d10:	ldr	r1, [r7, #16]
   27d14:	cmp	r1, #0
   27d18:	beq	27d28 <__assert_fail@plt+0x168f0>
   27d1c:	mov	r0, r7
   27d20:	bl	24714 <__assert_fail@plt+0x132dc>
   27d24:	ldrb	r0, [r7, #28]
   27d28:	mov	sl, #1
   27d2c:	mov	r4, #0
   27d30:	cmp	r6, #0
   27d34:	str	r7, [fp, #-32]	; 0xffffffe0
   27d38:	beq	27d84 <__assert_fail@plt+0x1694c>
   27d3c:	ands	r1, r0, #16
   27d40:	bne	27d84 <__assert_fail@plt+0x1694c>
   27d44:	and	r0, r0, #6
   27d48:	cmp	r0, #4
   27d4c:	bne	27d74 <__assert_fail@plt+0x1693c>
   27d50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27d54:	ldr	sl, [r6]
   27d58:	ldr	r0, [r0, #24]
   27d5c:	cmp	sl, r0
   27d60:	bhi	27d7c <__assert_fail@plt+0x16944>
   27d64:	cmp	sl, #1
   27d68:	movwlt	r6, #0
   27d6c:	movwlt	sl, #1
   27d70:	b	27d80 <__assert_fail@plt+0x16948>
   27d74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27d78:	ldr	r0, [r0, #24]
   27d7c:	add	sl, r0, #1
   27d80:	mov	r4, r6
   27d84:	lsl	r0, sl, #3
   27d88:	bl	3554c <__assert_fail@plt+0x24114>
   27d8c:	cmp	r0, #0
   27d90:	beq	2800c <__assert_fail@plt+0x16bd4>
   27d94:	mov	r7, r0
   27d98:	ldr	r0, [fp, #12]
   27d9c:	str	r8, [sp]
   27da0:	mov	r2, r9
   27da4:	mov	r3, r5
   27da8:	stmib	sp, {r0, sl}
   27dac:	str	r7, [sp, #12]
   27db0:	ldr	r0, [sp, #28]
   27db4:	ldr	r1, [sp, #32]
   27db8:	str	r0, [sp, #16]
   27dbc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27dc0:	bl	25078 <__assert_fail@plt+0x13c40>
   27dc4:	cmp	r0, #0
   27dc8:	beq	27e04 <__assert_fail@plt+0x169cc>
   27dcc:	mvn	r6, #1
   27dd0:	cmp	r0, #1
   27dd4:	mvneq	r6, #0
   27dd8:	ldr	r4, [sp, #36]	; 0x24
   27ddc:	mov	r0, r7
   27de0:	bl	1386c <__assert_fail@plt+0x2434>
   27de4:	cmp	r4, #0
   27de8:	beq	27df8 <__assert_fail@plt+0x169c0>
   27dec:	ldr	r0, [sp, #24]
   27df0:	add	r0, r0, #136	; 0x88
   27df4:	bl	11138 <pthread_mutex_unlock@plt>
   27df8:	mov	r0, r6
   27dfc:	sub	sp, fp, #28
   27e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e04:	cmp	r4, #0
   27e08:	str	r5, [sp, #32]
   27e0c:	beq	27f28 <__assert_fail@plt+0x16af0>
   27e10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27e14:	add	r9, sl, #1
   27e18:	ldrb	r0, [r0, #28]
   27e1c:	ubfx	r0, r0, #1, #2
   27e20:	cmp	r0, #1
   27e24:	beq	27e84 <__assert_fail@plt+0x16a4c>
   27e28:	mov	ip, #2
   27e2c:	cmp	r0, #0
   27e30:	bne	27e94 <__assert_fail@plt+0x16a5c>
   27e34:	mov	r5, r7
   27e38:	lsl	r7, r9, #2
   27e3c:	mov	r0, r7
   27e40:	bl	3554c <__assert_fail@plt+0x24114>
   27e44:	mov	r6, #0
   27e48:	cmp	r0, #0
   27e4c:	str	r0, [r4, #4]
   27e50:	beq	28020 <__assert_fail@plt+0x16be8>
   27e54:	mov	r0, r7
   27e58:	bl	3554c <__assert_fail@plt+0x24114>
   27e5c:	cmp	r0, #0
   27e60:	str	r0, [r4, #8]
   27e64:	beq	28080 <__assert_fail@plt+0x16c48>
   27e68:	str	r9, [r4]
   27e6c:	mov	ip, #1
   27e70:	mov	r7, r5
   27e74:	cmp	sl, #1
   27e78:	bge	27e9c <__assert_fail@plt+0x16a64>
   27e7c:	mov	sl, #0
   27e80:	b	27edc <__assert_fail@plt+0x16aa4>
   27e84:	ldr	r0, [r4]
   27e88:	mov	ip, #1
   27e8c:	cmp	r9, r0
   27e90:	bhi	28028 <__assert_fail@plt+0x16bf0>
   27e94:	cmp	sl, #1
   27e98:	blt	27e7c <__assert_fail@plt+0x16a44>
   27e9c:	mov	r8, r7
   27ea0:	ldmib	r4, {r6, r7}
   27ea4:	mov	r2, #0
   27ea8:	cmp	sl, #3
   27eac:	bhi	27f54 <__assert_fail@plt+0x16b1c>
   27eb0:	add	r0, r8, r2, lsl #3
   27eb4:	add	r0, r0, #4
   27eb8:	ldr	r1, [r0, #-4]
   27ebc:	str	r1, [r6, r2, lsl #2]
   27ec0:	ldr	r1, [r0]
   27ec4:	add	r0, r0, #8
   27ec8:	str	r1, [r7, r2, lsl #2]
   27ecc:	add	r2, r2, #1
   27ed0:	cmp	sl, r2
   27ed4:	bne	27eb8 <__assert_fail@plt+0x16a80>
   27ed8:	mov	r7, r8
   27edc:	ldr	r0, [r4]
   27ee0:	cmp	sl, r0
   27ee4:	bcs	27f08 <__assert_fail@plt+0x16ad0>
   27ee8:	ldmib	r4, {r0, r1}
   27eec:	mvn	r2, #0
   27ef0:	str	r2, [r1, sl, lsl #2]
   27ef4:	str	r2, [r0, sl, lsl #2]
   27ef8:	add	sl, sl, #1
   27efc:	ldr	r3, [r4]
   27f00:	cmp	sl, r3
   27f04:	bcc	27ef0 <__assert_fail@plt+0x16ab8>
   27f08:	mov	r6, ip
   27f0c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   27f10:	cmp	r6, #0
   27f14:	ldrb	r0, [r1, #28]
   27f18:	and	r0, r0, #249	; 0xf9
   27f1c:	orr	r0, r0, r6, lsl #1
   27f20:	strb	r0, [r1, #28]
   27f24:	beq	27f4c <__assert_fail@plt+0x16b14>
   27f28:	ldr	r0, [fp, #20]
   27f2c:	cmp	r0, #0
   27f30:	beq	27f44 <__assert_fail@plt+0x16b0c>
   27f34:	ldr	r0, [r7, #4]
   27f38:	ldr	r1, [sp, #32]
   27f3c:	sub	r6, r0, r1
   27f40:	b	27dd8 <__assert_fail@plt+0x169a0>
   27f44:	ldr	r6, [r7]
   27f48:	b	27dd8 <__assert_fail@plt+0x169a0>
   27f4c:	mvn	r6, #1
   27f50:	b	27dd8 <__assert_fail@plt+0x169a0>
   27f54:	str	ip, [sp, #28]
   27f58:	add	ip, r7, sl, lsl #2
   27f5c:	mov	lr, #0
   27f60:	add	r5, r8, sl, lsl #3
   27f64:	mov	r9, #0
   27f68:	add	r3, r6, sl, lsl #2
   27f6c:	mov	r1, #0
   27f70:	mov	r0, r8
   27f74:	mov	r2, #0
   27f78:	cmp	r8, ip
   27f7c:	mov	r0, #0
   27f80:	movwcc	lr, #1
   27f84:	cmp	r5, r7
   27f88:	movwhi	r9, #1
   27f8c:	cmp	r8, r3
   27f90:	movwcc	r1, #1
   27f94:	cmp	r5, r6
   27f98:	mov	r5, #0
   27f9c:	movwhi	r5, #1
   27fa0:	cmp	r7, r3
   27fa4:	mov	r3, #0
   27fa8:	movwcc	r3, #1
   27fac:	cmp	r6, ip
   27fb0:	movwcc	r0, #1
   27fb4:	tst	r0, r3
   27fb8:	bne	28004 <__assert_fail@plt+0x16bcc>
   27fbc:	ands	r0, r5, r1
   27fc0:	bne	28004 <__assert_fail@plt+0x16bcc>
   27fc4:	ldr	ip, [sp, #28]
   27fc8:	ands	r0, r9, lr
   27fcc:	bne	27eb0 <__assert_fail@plt+0x16a78>
   27fd0:	bic	r2, sl, #3
   27fd4:	mov	r1, r7
   27fd8:	mov	r0, r6
   27fdc:	mov	r5, r8
   27fe0:	mov	r3, r2
   27fe4:	vld2.32	{d16-d19}, [r5]!
   27fe8:	subs	r3, r3, #4
   27fec:	vst1.32	{d16-d17}, [r0]!
   27ff0:	vst1.32	{d18-d19}, [r1]!
   27ff4:	bne	27fe4 <__assert_fail@plt+0x16bac>
   27ff8:	cmp	sl, r2
   27ffc:	bne	27eb0 <__assert_fail@plt+0x16a78>
   28000:	b	27ed8 <__assert_fail@plt+0x16aa0>
   28004:	ldr	ip, [sp, #28]
   28008:	b	27eb0 <__assert_fail@plt+0x16a78>
   2800c:	ldr	r4, [sp, #36]	; 0x24
   28010:	mvn	r6, #1
   28014:	cmp	r4, #0
   28018:	bne	27dec <__assert_fail@plt+0x169b4>
   2801c:	b	27df8 <__assert_fail@plt+0x169c0>
   28020:	mov	r7, r5
   28024:	b	27f0c <__assert_fail@plt+0x16ad4>
   28028:	ldr	r0, [r4, #4]
   2802c:	mov	r8, r7
   28030:	lsl	r7, r9, #2
   28034:	mov	r1, r7
   28038:	bl	3557c <__assert_fail@plt+0x24144>
   2803c:	mov	r6, #0
   28040:	cmp	r0, #0
   28044:	beq	28090 <__assert_fail@plt+0x16c58>
   28048:	mov	r5, r0
   2804c:	ldr	r0, [r4, #8]
   28050:	mov	r1, r7
   28054:	bl	3557c <__assert_fail@plt+0x24144>
   28058:	cmp	r0, #0
   2805c:	beq	28098 <__assert_fail@plt+0x16c60>
   28060:	mov	r7, r8
   28064:	mov	ip, #1
   28068:	str	r9, [r4]
   2806c:	str	r5, [r4, #4]
   28070:	str	r0, [r4, #8]
   28074:	cmp	sl, #1
   28078:	bge	27e9c <__assert_fail@plt+0x16a64>
   2807c:	b	27e7c <__assert_fail@plt+0x16a44>
   28080:	ldr	r0, [r4, #4]
   28084:	bl	1386c <__assert_fail@plt+0x2434>
   28088:	mov	r7, r5
   2808c:	b	27f0c <__assert_fail@plt+0x16ad4>
   28090:	mov	r7, r8
   28094:	b	27f0c <__assert_fail@plt+0x16ad4>
   28098:	mov	r0, r5
   2809c:	bl	1386c <__assert_fail@plt+0x2434>
   280a0:	mov	r7, r8
   280a4:	b	27f0c <__assert_fail@plt+0x16ad4>
   280a8:	push	{fp, lr}
   280ac:	mov	fp, sp
   280b0:	sub	sp, sp, #16
   280b4:	mov	ip, #0
   280b8:	str	r2, [sp, #4]
   280bc:	str	ip, [sp, #12]
   280c0:	ldr	ip, [fp, #12]
   280c4:	str	ip, [sp, #8]
   280c8:	ldr	ip, [fp, #8]
   280cc:	str	ip, [sp]
   280d0:	bl	27c7c <__assert_fail@plt+0x16844>
   280d4:	mov	sp, fp
   280d8:	pop	{fp, pc}
   280dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   280e0:	add	fp, sp, #28
   280e4:	sub	sp, sp, #20
   280e8:	ldr	r4, [fp, #8]
   280ec:	mov	r8, r1
   280f0:	mov	r1, r0
   280f4:	mov	r6, r2
   280f8:	orr	r0, r4, r2
   280fc:	ldr	r2, [fp, #20]
   28100:	orr	r0, r0, r2
   28104:	cmp	r0, #0
   28108:	blt	281c8 <__assert_fail@plt+0x16d90>
   2810c:	adds	sl, r6, r4
   28110:	bvs	281c8 <__assert_fail@plt+0x16d90>
   28114:	mov	r5, #0
   28118:	cmp	r4, #1
   2811c:	blt	28174 <__assert_fail@plt+0x16d3c>
   28120:	mov	r9, r3
   28124:	cmp	r6, #1
   28128:	blt	2817c <__assert_fail@plt+0x16d44>
   2812c:	mov	r0, sl
   28130:	mov	r5, r1
   28134:	bl	3554c <__assert_fail@plt+0x24114>
   28138:	cmp	r0, #0
   2813c:	beq	281c8 <__assert_fail@plt+0x16d90>
   28140:	mov	r1, r8
   28144:	mov	r2, r6
   28148:	mov	r7, r0
   2814c:	bl	111ec <memcpy@plt>
   28150:	add	r0, r7, r6
   28154:	mov	r1, r9
   28158:	mov	r2, r4
   2815c:	bl	111ec <memcpy@plt>
   28160:	ldr	r2, [fp, #20]
   28164:	mov	r1, r5
   28168:	mov	r4, r7
   2816c:	mov	r5, #0
   28170:	b	28184 <__assert_fail@plt+0x16d4c>
   28174:	mov	r7, r8
   28178:	b	28180 <__assert_fail@plt+0x16d48>
   2817c:	mov	r7, r9
   28180:	mov	r4, #0
   28184:	ldr	r0, [fp, #16]
   28188:	ldr	r3, [fp, #12]
   2818c:	mov	r6, #1
   28190:	str	r2, [sp, #4]
   28194:	mov	r2, sl
   28198:	str	r5, [sp]
   2819c:	str	r6, [sp, #12]
   281a0:	str	r0, [sp, #8]
   281a4:	mov	r0, r1
   281a8:	mov	r1, r7
   281ac:	bl	27c7c <__assert_fail@plt+0x16844>
   281b0:	mov	r5, r0
   281b4:	mov	r0, r4
   281b8:	bl	1386c <__assert_fail@plt+0x2434>
   281bc:	mov	r0, r5
   281c0:	sub	sp, fp, #28
   281c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   281c8:	mvn	r0, #1
   281cc:	sub	sp, fp, #28
   281d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   281d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   281d8:	add	fp, sp, #28
   281dc:	sub	sp, sp, #20
   281e0:	ldr	r4, [fp, #8]
   281e4:	mov	r8, r1
   281e8:	mov	r1, r0
   281ec:	mov	r6, r2
   281f0:	orr	r0, r4, r2
   281f4:	ldr	r2, [fp, #24]
   281f8:	orr	r0, r0, r2
   281fc:	cmp	r0, #0
   28200:	blt	282c0 <__assert_fail@plt+0x16e88>
   28204:	adds	sl, r6, r4
   28208:	bvs	282c0 <__assert_fail@plt+0x16e88>
   2820c:	mov	r5, #0
   28210:	cmp	r4, #1
   28214:	blt	2826c <__assert_fail@plt+0x16e34>
   28218:	mov	r9, r3
   2821c:	cmp	r6, #1
   28220:	blt	28274 <__assert_fail@plt+0x16e3c>
   28224:	mov	r0, sl
   28228:	mov	r5, r1
   2822c:	bl	3554c <__assert_fail@plt+0x24114>
   28230:	cmp	r0, #0
   28234:	beq	282c0 <__assert_fail@plt+0x16e88>
   28238:	mov	r1, r8
   2823c:	mov	r2, r6
   28240:	mov	r7, r0
   28244:	bl	111ec <memcpy@plt>
   28248:	add	r0, r7, r6
   2824c:	mov	r1, r9
   28250:	mov	r2, r4
   28254:	bl	111ec <memcpy@plt>
   28258:	ldr	r2, [fp, #24]
   2825c:	mov	r1, r5
   28260:	mov	r4, r7
   28264:	mov	r5, #0
   28268:	b	2827c <__assert_fail@plt+0x16e44>
   2826c:	mov	r7, r8
   28270:	b	28278 <__assert_fail@plt+0x16e40>
   28274:	mov	r7, r9
   28278:	mov	r4, #0
   2827c:	ldr	r0, [fp, #20]
   28280:	ldr	r6, [fp, #16]
   28284:	ldr	r3, [fp, #12]
   28288:	str	r2, [sp, #4]
   2828c:	mov	r2, sl
   28290:	str	r5, [sp, #12]
   28294:	str	r0, [sp, #8]
   28298:	mov	r0, r1
   2829c:	mov	r1, r7
   282a0:	str	r6, [sp]
   282a4:	bl	27c7c <__assert_fail@plt+0x16844>
   282a8:	mov	r5, r0
   282ac:	mov	r0, r4
   282b0:	bl	1386c <__assert_fail@plt+0x2434>
   282b4:	mov	r0, r5
   282b8:	sub	sp, fp, #28
   282bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282c0:	mvn	r0, #1
   282c4:	sub	sp, fp, #28
   282c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282cc:	ldrb	ip, [r0, #28]
   282d0:	cmp	r2, #0
   282d4:	bic	ip, ip, #6
   282d8:	orrne	ip, ip, #2
   282dc:	strb	ip, [r0, #28]
   282e0:	ldr	r0, [sp]
   282e4:	moveq	r0, r2
   282e8:	cmp	r2, #0
   282ec:	moveq	r3, r2
   282f0:	stm	r1, {r2, r3}
   282f4:	str	r0, [r1, #8]
   282f8:	bx	lr
   282fc:	push	{r4, sl, fp, lr}
   28300:	add	fp, sp, #8
   28304:	mov	r4, r0
   28308:	ldr	r0, [r0, #24]
   2830c:	bl	1386c <__assert_fail@plt+0x2434>
   28310:	ldr	r0, [r4, #36]	; 0x24
   28314:	bl	1386c <__assert_fail@plt+0x2434>
   28318:	ldr	r0, [r4, #40]	; 0x28
   2831c:	add	r1, r4, #4
   28320:	cmp	r0, r1
   28324:	beq	28338 <__assert_fail@plt+0x16f00>
   28328:	ldr	r0, [r0, #8]
   2832c:	bl	1386c <__assert_fail@plt+0x2434>
   28330:	ldr	r0, [r4, #40]	; 0x28
   28334:	bl	1386c <__assert_fail@plt+0x2434>
   28338:	ldr	r0, [r4, #12]
   2833c:	bl	1386c <__assert_fail@plt+0x2434>
   28340:	ldr	r0, [r4, #48]	; 0x30
   28344:	bl	1386c <__assert_fail@plt+0x2434>
   28348:	ldr	r0, [r4, #44]	; 0x2c
   2834c:	bl	1386c <__assert_fail@plt+0x2434>
   28350:	mov	r0, r4
   28354:	pop	{r4, sl, fp, lr}
   28358:	b	1386c <__assert_fail@plt+0x2434>
   2835c:	nop	{0}
   28360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28364:	add	fp, sp, #28
   28368:	sub	sp, sp, #92	; 0x5c
   2836c:	mov	r9, r0
   28370:	ldrb	r0, [r0, #74]	; 0x4a
   28374:	ldr	r2, [r9, #36]	; 0x24
   28378:	ldr	r1, [r9, #48]	; 0x30
   2837c:	ldr	r4, [r9, #28]
   28380:	cmp	r2, r1
   28384:	movgt	r2, r1
   28388:	cmp	r0, #0
   2838c:	str	r2, [sp]
   28390:	bne	283b0 <__assert_fail@plt+0x16f78>
   28394:	mov	r7, r9
   28398:	ldr	r0, [r7, #64]!	; 0x40
   2839c:	cmp	r0, #0
   283a0:	bne	283b0 <__assert_fail@plt+0x16f78>
   283a4:	ldrb	r0, [r9, #76]	; 0x4c
   283a8:	cmp	r0, #0
   283ac:	beq	283b8 <__assert_fail@plt+0x16f80>
   283b0:	ldr	r6, [r9, #32]
   283b4:	b	28594 <__assert_fail@plt+0x1715c>
   283b8:	ldr	r0, [sp]
   283bc:	cmp	r0, r4
   283c0:	ble	283d0 <__assert_fail@plt+0x16f98>
   283c4:	add	r8, r9, #16
   283c8:	mov	sl, r4
   283cc:	b	28428 <__assert_fail@plt+0x16ff0>
   283d0:	mov	sl, r4
   283d4:	str	r4, [sp, #4]
   283d8:	b	286a4 <__assert_fail@plt+0x1726c>
   283dc:	add	r0, r4, #1
   283e0:	cmp	r0, #2
   283e4:	bcc	283f8 <__assert_fail@plt+0x16fc0>
   283e8:	ldr	r0, [r9, #36]	; 0x24
   283ec:	ldr	r1, [r9, #48]	; 0x30
   283f0:	cmp	r0, r1
   283f4:	blt	28580 <__assert_fail@plt+0x17148>
   283f8:	ldr	r0, [r9, #4]
   283fc:	ldr	r1, [sp, #4]
   28400:	cmn	r4, #1
   28404:	strb	sl, [r0, r1]
   28408:	ldr	r0, [r9, #8]
   2840c:	str	sl, [r0, r1, lsl #2]
   28410:	add	sl, r1, #1
   28414:	bne	28560 <__assert_fail@plt+0x17128>
   28418:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2841c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   28420:	stm	r8, {r0, r1}
   28424:	b	28560 <__assert_fail@plt+0x17128>
   28428:	ldr	r5, [r9, #24]
   2842c:	ldr	r4, [r9]
   28430:	str	sl, [sp, #4]
   28434:	add	r0, r5, sl
   28438:	ldrb	sl, [r4, r0]
   2843c:	tst	sl, #128	; 0x80
   28440:	bne	28488 <__assert_fail@plt+0x17050>
   28444:	mov	r0, r8
   28448:	bl	11210 <mbsinit@plt>
   2844c:	cmp	r0, #0
   28450:	beq	28488 <__assert_fail@plt+0x17050>
   28454:	mov	r0, sl
   28458:	bl	11408 <towupper@plt>
   2845c:	cmp	r0, #128	; 0x80
   28460:	bcs	28480 <__assert_fail@plt+0x17048>
   28464:	ldr	r2, [sp, #4]
   28468:	ldr	r1, [r9, #4]
   2846c:	strb	r0, [r1, r2]
   28470:	add	sl, r2, #1
   28474:	ldr	r1, [r9, #8]
   28478:	str	r0, [r1, r2, lsl #2]
   2847c:	b	28560 <__assert_fail@plt+0x17128>
   28480:	ldr	r4, [r9]
   28484:	ldr	r5, [r9, #24]
   28488:	ldm	r8, {r0, r1}
   2848c:	mov	r3, r8
   28490:	str	r1, [fp, #-36]	; 0xffffffdc
   28494:	str	r0, [fp, #-40]	; 0xffffffd8
   28498:	ldm	sp, {r0, r1}
   2849c:	sub	r2, r0, r1
   284a0:	add	r0, r4, r5
   284a4:	add	r1, r0, r1
   284a8:	add	r0, sp, #12
   284ac:	bl	35998 <__assert_fail@plt+0x24560>
   284b0:	mov	r4, r0
   284b4:	sub	r0, r0, #1
   284b8:	cmn	r0, #4
   284bc:	bhi	283dc <__assert_fail@plt+0x16fa4>
   284c0:	ldr	r0, [sp, #12]
   284c4:	bl	11408 <towupper@plt>
   284c8:	mov	r5, r0
   284cc:	ldr	r0, [sp, #12]
   284d0:	cmp	r5, r0
   284d4:	bne	284f8 <__assert_fail@plt+0x170c0>
   284d8:	ldr	r1, [r9]
   284dc:	ldr	r2, [r9, #24]
   284e0:	ldr	r0, [r9, #4]
   284e4:	ldr	r6, [sp, #4]
   284e8:	add	r1, r1, r2
   284ec:	add	r0, r0, r6
   284f0:	add	r1, r1, r6
   284f4:	b	28524 <__assert_fail@plt+0x170ec>
   284f8:	add	sl, sp, #16
   284fc:	mov	r1, r5
   28500:	sub	r2, fp, #40	; 0x28
   28504:	mov	r0, sl
   28508:	bl	11168 <wcrtomb@plt>
   2850c:	cmp	r4, r0
   28510:	bne	28574 <__assert_fail@plt+0x1713c>
   28514:	ldr	r0, [r9, #4]
   28518:	ldr	r6, [sp, #4]
   2851c:	mov	r1, sl
   28520:	add	r0, r0, r6
   28524:	mov	r2, r4
   28528:	bl	111ec <memcpy@plt>
   2852c:	ldr	r0, [r9, #8]
   28530:	add	sl, r6, #1
   28534:	str	r5, [r0, r6, lsl #2]
   28538:	add	r5, r4, r6
   2853c:	cmp	sl, r5
   28540:	bge	28560 <__assert_fail@plt+0x17128>
   28544:	add	r0, r0, r6, lsl #2
   28548:	mvn	r1, #3
   2854c:	add	r2, r1, r4, lsl #2
   28550:	add	r0, r0, #4
   28554:	mov	r1, #255	; 0xff
   28558:	bl	1136c <memset@plt>
   2855c:	mov	sl, r5
   28560:	ldr	r0, [sp]
   28564:	str	sl, [sp, #4]
   28568:	cmp	r0, sl
   2856c:	bgt	28428 <__assert_fail@plt+0x16ff0>
   28570:	b	286a4 <__assert_fail@plt+0x1726c>
   28574:	ldr	r6, [sp, #4]
   28578:	mov	sl, r6
   2857c:	b	285ac <__assert_fail@plt+0x17174>
   28580:	ldr	r0, [fp, #-40]	; 0xffffffd8
   28584:	ldr	r1, [fp, #-36]	; 0xffffffdc
   28588:	stm	r8, {r0, r1}
   2858c:	ldr	sl, [sp, #4]
   28590:	b	286a4 <__assert_fail@plt+0x1726c>
   28594:	ldr	r0, [sp]
   28598:	cmp	r4, r0
   2859c:	bge	2869c <__assert_fail@plt+0x17264>
   285a0:	add	r7, r9, #64	; 0x40
   285a4:	add	r8, r9, #16
   285a8:	mov	sl, r4
   285ac:	ldm	r8, {r0, r1}
   285b0:	str	r6, [sp, #4]
   285b4:	str	r0, [fp, #-40]	; 0xffffffd8
   285b8:	ldr	r0, [sp]
   285bc:	str	r1, [fp, #-36]	; 0xffffffdc
   285c0:	sub	r2, r0, sl
   285c4:	ldr	r0, [r7]
   285c8:	cmp	r0, #0
   285cc:	bne	286bc <__assert_fail@plt+0x17284>
   285d0:	ldr	r0, [r9]
   285d4:	ldr	r1, [r9, #24]
   285d8:	add	r0, r0, r1
   285dc:	add	r4, r0, r6
   285e0:	add	r0, sp, #8
   285e4:	mov	r1, r4
   285e8:	mov	r3, r8
   285ec:	bl	35998 <__assert_fail@plt+0x24560>
   285f0:	sub	r6, r0, #1
   285f4:	mov	r5, r0
   285f8:	cmn	r6, #4
   285fc:	bhi	2870c <__assert_fail@plt+0x172d4>
   28600:	ldr	r0, [sp, #8]
   28604:	bl	11408 <towupper@plt>
   28608:	mov	r7, r0
   2860c:	ldr	r0, [sp, #8]
   28610:	cmp	r7, r0
   28614:	bne	28624 <__assert_fail@plt+0x171ec>
   28618:	ldr	r0, [r9, #4]
   2861c:	mov	r1, r4
   28620:	b	28644 <__assert_fail@plt+0x1720c>
   28624:	add	r0, sp, #16
   28628:	sub	r2, fp, #40	; 0x28
   2862c:	mov	r1, r7
   28630:	bl	11168 <wcrtomb@plt>
   28634:	cmp	r0, r5
   28638:	bne	28788 <__assert_fail@plt+0x17350>
   2863c:	ldr	r0, [r9, #4]
   28640:	add	r1, sp, #16
   28644:	add	r0, r0, sl
   28648:	mov	r2, r5
   2864c:	bl	111ec <memcpy@plt>
   28650:	ldrb	r0, [r9, #76]	; 0x4c
   28654:	ldr	r6, [sp, #4]
   28658:	cmp	r0, #0
   2865c:	bne	2881c <__assert_fail@plt+0x173e4>
   28660:	ldr	r0, [r9, #8]
   28664:	add	r4, r5, sl
   28668:	add	r1, sl, #1
   2866c:	add	r6, r5, r6
   28670:	cmp	r1, r4
   28674:	str	r7, [r0, sl, lsl #2]
   28678:	bge	28694 <__assert_fail@plt+0x1725c>
   2867c:	add	r0, r0, r1, lsl #2
   28680:	mvn	r1, #3
   28684:	add	r2, r1, r5, lsl #2
   28688:	mov	r1, #255	; 0xff
   2868c:	bl	1136c <memset@plt>
   28690:	b	28594 <__assert_fail@plt+0x1715c>
   28694:	mov	r4, r1
   28698:	b	28594 <__assert_fail@plt+0x1715c>
   2869c:	str	r6, [sp, #4]
   286a0:	mov	sl, r4
   286a4:	ldr	r0, [sp, #4]
   286a8:	str	sl, [r9, #28]
   286ac:	str	r0, [r9, #32]
   286b0:	mov	r0, #0
   286b4:	sub	sp, fp, #28
   286b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   286bc:	cmp	r2, #1
   286c0:	add	r4, sp, #16
   286c4:	ldrge	r1, [r9, #80]	; 0x50
   286c8:	cmpge	r1, #1
   286cc:	blt	285e0 <__assert_fail@plt+0x171a8>
   286d0:	ldr	r7, [r9, #24]
   286d4:	ldr	r3, [r9]
   286d8:	add	r4, sp, #16
   286dc:	add	r7, r6, r7
   286e0:	add	r3, r3, r7
   286e4:	mov	r7, #0
   286e8:	ldrb	r5, [r3, r7]
   286ec:	ldrb	r5, [r0, r5]
   286f0:	strb	r5, [r4, r7]
   286f4:	add	r7, r7, #1
   286f8:	cmp	r7, r2
   286fc:	bge	285e0 <__assert_fail@plt+0x171a8>
   28700:	cmp	r7, r1
   28704:	blt	286e8 <__assert_fail@plt+0x172b0>
   28708:	b	285e0 <__assert_fail@plt+0x171a8>
   2870c:	add	r0, r5, #1
   28710:	cmp	r0, #2
   28714:	bcc	28728 <__assert_fail@plt+0x172f0>
   28718:	ldr	r0, [r9, #36]	; 0x24
   2871c:	ldr	r1, [r9, #48]	; 0x30
   28720:	cmp	r0, r1
   28724:	blt	28888 <__assert_fail@plt+0x17450>
   28728:	ldr	r2, [r9, #24]
   2872c:	ldr	r6, [sp, #4]
   28730:	ldr	r0, [r9]
   28734:	ldr	r1, [r9, #64]	; 0x40
   28738:	add	r4, sl, #1
   2873c:	add	r2, r2, r6
   28740:	cmp	r1, #0
   28744:	ldrb	r0, [r0, r2]
   28748:	ldrbne	r0, [r1, r0]
   2874c:	ldr	r1, [r9, #4]
   28750:	strb	r0, [r1, sl]
   28754:	ldrb	r1, [r9, #76]	; 0x4c
   28758:	cmp	r1, #0
   2875c:	ldrne	r1, [r9, #12]
   28760:	strne	r6, [r1, sl, lsl #2]
   28764:	add	r6, r6, #1
   28768:	cmn	r5, #1
   2876c:	ldr	r1, [r9, #8]
   28770:	str	r0, [r1, sl, lsl #2]
   28774:	bne	28594 <__assert_fail@plt+0x1715c>
   28778:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2877c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   28780:	stm	r8, {r0, r1}
   28784:	b	28594 <__assert_fail@plt+0x1715c>
   28788:	mov	r3, r0
   2878c:	cmn	r0, #1
   28790:	beq	28618 <__assert_fail@plt+0x171e0>
   28794:	ldr	r1, [r9, #36]	; 0x24
   28798:	add	r4, r3, sl
   2879c:	cmp	r4, r1
   287a0:	bhi	28888 <__assert_fail@plt+0x17450>
   287a4:	ldr	r0, [r9, #12]
   287a8:	cmp	r0, #0
   287ac:	bne	287cc <__assert_fail@plt+0x17394>
   287b0:	lsl	r0, r1, #2
   287b4:	mov	r8, r3
   287b8:	bl	3554c <__assert_fail@plt+0x24114>
   287bc:	mov	r3, r8
   287c0:	cmp	r0, #0
   287c4:	str	r0, [r9, #12]
   287c8:	beq	28898 <__assert_fail@plt+0x17460>
   287cc:	ldrb	r1, [r9, #76]	; 0x4c
   287d0:	cmp	r1, #0
   287d4:	bne	288bc <__assert_fail@plt+0x17484>
   287d8:	cmp	sl, #0
   287dc:	beq	288b4 <__assert_fail@plt+0x1747c>
   287e0:	mov	r1, #0
   287e4:	cmp	sl, #4
   287e8:	bcc	288a4 <__assert_fail@plt+0x1746c>
   287ec:	add	r2, pc, #524	; 0x20c
   287f0:	bic	r1, sl, #3
   287f4:	vmov.i32	q8, #4	; 0x00000004
   287f8:	vld1.64	{d18-d19}, [r2 :128]
   287fc:	mov	ip, r1
   28800:	mov	r2, r0
   28804:	vadd.i32	q10, q9, q8
   28808:	vst1.32	{d18-d19}, [r2]!
   2880c:	subs	ip, ip, #4
   28810:	vorr	q9, q10, q10
   28814:	bne	28804 <__assert_fail@plt+0x173cc>
   28818:	b	288ac <__assert_fail@plt+0x17474>
   2881c:	ldr	r0, [r9, #12]
   28820:	mov	r1, #0
   28824:	cmp	r5, #4
   28828:	bcc	28864 <__assert_fail@plt+0x1742c>
   2882c:	add	r3, pc, #460	; 0x1cc
   28830:	bic	r1, r5, #3
   28834:	add	r2, r0, sl, lsl #2
   28838:	vdup.32	q8, r6
   2883c:	vmov.i32	q10, #4	; 0x00000004
   28840:	vld1.64	{d18-d19}, [r3 :128]
   28844:	mov	r3, r1
   28848:	vadd.i32	q11, q9, q8
   2884c:	vadd.i32	q9, q9, q10
   28850:	subs	r3, r3, #4
   28854:	vst1.32	{d22-d23}, [r2]!
   28858:	bne	28848 <__assert_fail@plt+0x17410>
   2885c:	cmp	r5, r1
   28860:	beq	28660 <__assert_fail@plt+0x17228>
   28864:	add	r2, r6, r1
   28868:	sub	r3, r5, r1
   2886c:	add	r1, sl, r1
   28870:	add	r0, r0, r1, lsl #2
   28874:	str	r2, [r0], #4
   28878:	add	r2, r2, #1
   2887c:	subs	r3, r3, #1
   28880:	bne	28874 <__assert_fail@plt+0x1743c>
   28884:	b	28660 <__assert_fail@plt+0x17228>
   28888:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2888c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   28890:	stm	r8, {r0, r1}
   28894:	b	286a4 <__assert_fail@plt+0x1726c>
   28898:	mov	r0, #12
   2889c:	sub	sp, fp, #28
   288a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288a4:	str	r1, [r0, r1, lsl #2]
   288a8:	add	r1, r1, #1
   288ac:	cmp	sl, r1
   288b0:	bne	288a4 <__assert_fail@plt+0x1746c>
   288b4:	mov	r0, #1
   288b8:	strb	r0, [r9, #76]	; 0x4c
   288bc:	ldr	r0, [r9, #4]
   288c0:	add	r1, sp, #16
   288c4:	mov	r2, r3
   288c8:	mov	r8, r3
   288cc:	add	r0, r0, sl
   288d0:	bl	111ec <memcpy@plt>
   288d4:	ldr	lr, [r9, #8]
   288d8:	ldr	ip, [sp, #4]
   288dc:	cmp	r8, #2
   288e0:	str	r7, [lr, sl, lsl #2]
   288e4:	ldr	r2, [r9, #12]
   288e8:	str	ip, [r2, sl, lsl #2]
   288ec:	bcc	289c0 <__assert_fail@plt+0x17588>
   288f0:	sub	r0, r8, #1
   288f4:	mov	r1, #1
   288f8:	cmp	r0, #4
   288fc:	bcs	28908 <__assert_fail@plt+0x174d0>
   28900:	ldr	ip, [sp, #4]
   28904:	b	28990 <__assert_fail@plt+0x17558>
   28908:	str	r0, [sp]
   2890c:	add	r3, r8, sl
   28910:	add	r0, sl, #1
   28914:	add	r7, lr, r0, lsl #2
   28918:	add	ip, lr, r3, lsl #2
   2891c:	add	r0, r2, r0, lsl #2
   28920:	cmp	r0, ip
   28924:	ldr	ip, [sp, #4]
   28928:	addcc	r3, r2, r3, lsl #2
   2892c:	cmpcc	r7, r3
   28930:	bcc	28990 <__assert_fail@plt+0x17558>
   28934:	add	r1, pc, #212	; 0xd4
   28938:	vdup.32	q8, ip
   2893c:	vdup.32	q9, r6
   28940:	vdup.32	q10, r5
   28944:	vmov.i32	q12, #4	; 0x00000004
   28948:	vmov.i8	q13, #255	; 0xff
   2894c:	vld1.64	{d22-d23}, [r1 :128]
   28950:	ldr	r1, [sp]
   28954:	bic	ip, r1, #3
   28958:	orr	r1, ip, #1
   2895c:	mov	r3, ip
   28960:	vcgt.u32	q14, q10, q11
   28964:	subs	r3, r3, #4
   28968:	vbsl	q14, q11, q9
   2896c:	vadd.i32	q11, q11, q12
   28970:	vadd.i32	q14, q14, q8
   28974:	vst1.32	{d28-d29}, [r0]!
   28978:	vst1.32	{d26-d27}, [r7]!
   2897c:	bne	28960 <__assert_fail@plt+0x17528>
   28980:	ldr	r0, [sp]
   28984:	cmp	r0, ip
   28988:	ldr	ip, [sp, #4]
   2898c:	beq	289c0 <__assert_fail@plt+0x17588>
   28990:	add	r2, r2, sl, lsl #2
   28994:	add	r0, lr, sl, lsl #2
   28998:	mvn	r3, #0
   2899c:	cmp	r1, r5
   289a0:	mov	r7, r6
   289a4:	movcc	r7, r1
   289a8:	add	r7, r7, ip
   289ac:	str	r7, [r2, r1, lsl #2]
   289b0:	str	r3, [r0, r1, lsl #2]
   289b4:	add	r1, r1, #1
   289b8:	cmp	r8, r1
   289bc:	bne	2899c <__assert_fail@plt+0x17564>
   289c0:	ldr	r0, [r9, #48]	; 0x30
   289c4:	ldr	r2, [r9, #52]	; 0x34
   289c8:	sub	r1, r8, r5
   289cc:	mov	r6, ip
   289d0:	add	r6, r5, r6
   289d4:	add	r0, r0, r1
   289d8:	cmp	r2, ip
   289dc:	str	r0, [r9, #48]	; 0x30
   289e0:	ldrgt	r2, [r9, #56]	; 0x38
   289e4:	addgt	r1, r2, r1
   289e8:	strgt	r1, [r9, #56]	; 0x38
   289ec:	ldr	r1, [r9, #36]	; 0x24
   289f0:	cmp	r1, r0
   289f4:	movgt	r1, r0
   289f8:	str	r1, [sp]
   289fc:	b	28594 <__assert_fail@plt+0x1715c>
   28a00:	andeq	r0, r0, r0
   28a04:	andeq	r0, r0, r1
   28a08:	andeq	r0, r0, r2
   28a0c:	andeq	r0, r0, r3
   28a10:	andeq	r0, r0, r1
   28a14:	andeq	r0, r0, r2
   28a18:	andeq	r0, r0, r3
   28a1c:	andeq	r0, r0, r4
   28a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a24:	add	fp, sp, #28
   28a28:	sub	sp, sp, #68	; 0x44
   28a2c:	mov	r4, r0
   28a30:	ldr	r6, [r0, #28]
   28a34:	ldr	r7, [r0, #36]	; 0x24
   28a38:	ldr	r0, [r0, #48]	; 0x30
   28a3c:	cmp	r7, r0
   28a40:	movgt	r7, r0
   28a44:	cmp	r7, r6
   28a48:	ble	28be8 <__assert_fail@plt+0x177b0>
   28a4c:	add	r8, r4, #16
   28a50:	mov	r5, sp
   28a54:	ldm	r8, {r9, sl}
   28a58:	ldr	r0, [r4, #64]	; 0x40
   28a5c:	sub	r2, r7, r6
   28a60:	cmp	r0, #0
   28a64:	bne	28b34 <__assert_fail@plt+0x176fc>
   28a68:	ldr	r0, [r4]
   28a6c:	ldr	r1, [r4, #24]
   28a70:	add	r0, r0, r1
   28a74:	add	r1, r0, r6
   28a78:	mov	r0, r5
   28a7c:	mov	r3, r8
   28a80:	bl	35998 <__assert_fail@plt+0x24560>
   28a84:	add	r1, r0, #1
   28a88:	cmp	r1, #2
   28a8c:	bcc	28aa8 <__assert_fail@plt+0x17670>
   28a90:	cmn	r0, #2
   28a94:	bne	28ae4 <__assert_fail@plt+0x176ac>
   28a98:	ldr	r0, [r4, #36]	; 0x24
   28a9c:	ldr	r1, [r4, #48]	; 0x30
   28aa0:	cmp	r0, r1
   28aa4:	blt	28be4 <__assert_fail@plt+0x177ac>
   28aa8:	ldr	r1, [r4, #24]
   28aac:	ldr	r0, [r4]
   28ab0:	mov	r2, sl
   28ab4:	mov	sl, r5
   28ab8:	add	r1, r1, r6
   28abc:	ldrb	r1, [r0, r1]
   28ac0:	str	r1, [sp]
   28ac4:	ldr	r0, [r4, #64]	; 0x40
   28ac8:	cmp	r0, #0
   28acc:	ldrbne	r1, [r0, r1]
   28ad0:	mov	r0, #1
   28ad4:	strne	r1, [sp]
   28ad8:	str	r9, [r8]
   28adc:	str	r2, [r8, #4]
   28ae0:	b	28aec <__assert_fail@plt+0x176b4>
   28ae4:	ldr	r1, [sp]
   28ae8:	mov	sl, r5
   28aec:	ldr	r3, [r4, #8]
   28af0:	add	r5, r0, r6
   28af4:	str	r1, [r3, r6, lsl #2]
   28af8:	add	r1, r6, #1
   28afc:	cmp	r1, r5
   28b00:	bge	28b20 <__assert_fail@plt+0x176e8>
   28b04:	mvn	r1, #3
   28b08:	add	r2, r1, r0, lsl #2
   28b0c:	add	r0, r3, r6, lsl #2
   28b10:	mov	r1, #255	; 0xff
   28b14:	add	r0, r0, #4
   28b18:	bl	1136c <memset@plt>
   28b1c:	mov	r1, r5
   28b20:	cmp	r7, r1
   28b24:	mov	r6, r1
   28b28:	mov	r5, sl
   28b2c:	bgt	28a54 <__assert_fail@plt+0x1761c>
   28b30:	b	28bec <__assert_fail@plt+0x177b4>
   28b34:	cmp	r2, #1
   28b38:	add	r1, sp, #4
   28b3c:	blt	28a78 <__assert_fail@plt+0x17640>
   28b40:	ldr	r1, [r4, #80]	; 0x50
   28b44:	cmp	r1, #1
   28b48:	add	r1, sp, #4
   28b4c:	blt	28a78 <__assert_fail@plt+0x17640>
   28b50:	ldm	r4, {r1, r3}
   28b54:	mov	lr, r5
   28b58:	ldr	r5, [r4, #24]
   28b5c:	cmp	r2, #2
   28b60:	add	r5, r6, r5
   28b64:	ldrb	r1, [r1, r5]
   28b68:	mov	r5, lr
   28b6c:	ldrb	r0, [r0, r1]
   28b70:	add	r1, sp, #4
   28b74:	strb	r0, [r3, r6]
   28b78:	strb	r0, [sp, #4]
   28b7c:	blt	28a78 <__assert_fail@plt+0x17640>
   28b80:	ldr	r0, [r4, #80]	; 0x50
   28b84:	add	r1, sp, #4
   28b88:	cmp	r0, #2
   28b8c:	blt	28a78 <__assert_fail@plt+0x17640>
   28b90:	mov	r0, #1
   28b94:	ldm	r4, {r1, ip}
   28b98:	ldr	r5, [r4, #24]
   28b9c:	ldr	r3, [r4, #64]	; 0x40
   28ba0:	add	r1, r1, r5
   28ba4:	add	r1, r1, r6
   28ba8:	ldrb	r1, [r1, r0]
   28bac:	ldrb	r1, [r3, r1]
   28bb0:	add	r3, ip, r6
   28bb4:	strb	r1, [r3, r0]
   28bb8:	add	r3, sp, #4
   28bbc:	strb	r1, [r3, r0]
   28bc0:	add	r0, r0, #1
   28bc4:	cmp	r0, r2
   28bc8:	bge	28bd8 <__assert_fail@plt+0x177a0>
   28bcc:	ldr	r1, [r4, #80]	; 0x50
   28bd0:	cmp	r0, r1
   28bd4:	blt	28b94 <__assert_fail@plt+0x1775c>
   28bd8:	add	r1, sp, #4
   28bdc:	mov	r5, lr
   28be0:	b	28a78 <__assert_fail@plt+0x17640>
   28be4:	stm	r8, {r9, sl}
   28be8:	mov	r1, r6
   28bec:	str	r1, [r4, #28]
   28bf0:	str	r1, [r4, #32]
   28bf4:	sub	sp, fp, #28
   28bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c00:	add	fp, sp, #28
   28c04:	sub	sp, sp, #28
   28c08:	ldr	r9, [r1]
   28c0c:	mov	r5, r0
   28c10:	ldr	r4, [fp, #12]
   28c14:	mov	r6, r2
   28c18:	str	r1, [sp, #16]
   28c1c:	str	r3, [sp, #20]
   28c20:	ldr	r0, [r9, #84]	; 0x54
   28c24:	str	r4, [sp, #4]
   28c28:	str	r0, [sp, #12]
   28c2c:	ldr	r0, [fp, #8]
   28c30:	str	r0, [sp]
   28c34:	mov	r0, r5
   28c38:	bl	296a4 <__assert_fail@plt+0x1826c>
   28c3c:	mov	r7, r0
   28c40:	cmp	r0, #0
   28c44:	bne	28c54 <__assert_fail@plt+0x1781c>
   28c48:	ldr	r0, [r4]
   28c4c:	cmp	r0, #0
   28c50:	bne	28e64 <__assert_fail@plt+0x17a2c>
   28c54:	ldrb	r0, [r6, #4]
   28c58:	cmp	r0, #10
   28c5c:	bne	28da0 <__assert_fail@plt+0x17968>
   28c60:	ldr	r0, [sp, #20]
   28c64:	mov	sl, #0
   28c68:	orr	r0, r0, #8388608	; 0x800000
   28c6c:	str	r0, [sp, #24]
   28c70:	b	28d10 <__assert_fail@plt+0x178d8>
   28c74:	ldr	r1, [fp, #8]
   28c78:	cmp	r1, #0
   28c7c:	beq	28c8c <__assert_fail@plt+0x17854>
   28c80:	cmp	r0, #9
   28c84:	mov	r8, #0
   28c88:	beq	28d40 <__assert_fail@plt+0x17908>
   28c8c:	ldr	r0, [sp, #12]
   28c90:	ldr	r4, [r9, #84]	; 0x54
   28c94:	ldr	r1, [sp, #16]
   28c98:	ldr	r3, [sp, #20]
   28c9c:	mov	r2, r6
   28ca0:	str	r0, [r9, #84]	; 0x54
   28ca4:	ldr	r0, [fp, #8]
   28ca8:	str	r0, [sp]
   28cac:	ldr	r0, [fp, #12]
   28cb0:	str	r0, [sp, #4]
   28cb4:	mov	r0, r5
   28cb8:	bl	296a4 <__assert_fail@plt+0x1826c>
   28cbc:	mov	r8, r0
   28cc0:	cmp	r0, #0
   28cc4:	bne	28cd8 <__assert_fail@plt+0x178a0>
   28cc8:	ldr	r0, [fp, #12]
   28ccc:	ldr	r0, [r0]
   28cd0:	cmp	r0, #0
   28cd4:	bne	28db0 <__assert_fail@plt+0x17978>
   28cd8:	ldr	r0, [r9, #84]	; 0x54
   28cdc:	orr	r0, r0, r4
   28ce0:	str	r0, [r9, #84]	; 0x54
   28ce4:	b	28d40 <__assert_fail@plt+0x17908>
   28ce8:	mov	r0, #996	; 0x3e4
   28cec:	bl	3554c <__assert_fail@plt+0x24114>
   28cf0:	cmp	r0, #0
   28cf4:	beq	28e58 <__assert_fail@plt+0x17a20>
   28cf8:	ldr	r1, [r9, #56]	; 0x38
   28cfc:	str	r1, [r0]
   28d00:	mov	r1, #0
   28d04:	str	r1, [r9, #64]	; 0x40
   28d08:	str	r0, [r9, #56]	; 0x38
   28d0c:	b	28d50 <__assert_fail@plt+0x17918>
   28d10:	ldr	r2, [sp, #24]
   28d14:	mov	r0, r6
   28d18:	mov	r1, r5
   28d1c:	bl	28e6c <__assert_fail@plt+0x17a34>
   28d20:	ldr	r1, [r5, #40]	; 0x28
   28d24:	mov	r8, #0
   28d28:	add	r0, r1, r0
   28d2c:	str	r0, [r5, #40]	; 0x28
   28d30:	ldrb	r0, [r6, #4]
   28d34:	orr	r1, r0, #8
   28d38:	cmp	r1, #10
   28d3c:	bne	28c74 <__assert_fail@plt+0x1783c>
   28d40:	ldr	r1, [r9, #64]	; 0x40
   28d44:	cmp	r1, #31
   28d48:	beq	28ce8 <__assert_fail@plt+0x178b0>
   28d4c:	ldr	r0, [r9, #56]	; 0x38
   28d50:	add	r2, r1, #1
   28d54:	add	r4, r0, r1, lsl #5
   28d58:	mov	r0, #10
   28d5c:	cmp	r7, #0
   28d60:	str	r2, [r9, #64]	; 0x40
   28d64:	str	sl, [r4, #4]!
   28d68:	stmib	r4, {r7, r8, sl}
   28d6c:	str	sl, [r4, #16]
   28d70:	str	sl, [r4, #20]
   28d74:	str	r0, [r4, #24]
   28d78:	mvn	r0, #0
   28d7c:	str	r0, [r4, #28]
   28d80:	strne	r4, [r7]
   28d84:	cmp	r8, #0
   28d88:	mov	r7, r4
   28d8c:	strne	r4, [r8]
   28d90:	ldrb	r0, [r6, #4]
   28d94:	cmp	r0, #10
   28d98:	beq	28d10 <__assert_fail@plt+0x178d8>
   28d9c:	b	28da4 <__assert_fail@plt+0x1796c>
   28da0:	mov	r4, r7
   28da4:	mov	r0, r4
   28da8:	sub	sp, fp, #28
   28dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28db0:	mov	r4, #0
   28db4:	cmp	r7, #0
   28db8:	beq	28da4 <__assert_fail@plt+0x1796c>
   28dbc:	movw	r8, #255	; 0xff
   28dc0:	movt	r8, #4
   28dc4:	mov	r6, r7
   28dc8:	ldr	r7, [r7, #4]
   28dcc:	cmp	r7, #0
   28dd0:	bne	28dc4 <__assert_fail@plt+0x1798c>
   28dd4:	ldr	r7, [r6, #8]
   28dd8:	cmp	r7, #0
   28ddc:	bne	28dc4 <__assert_fail@plt+0x1798c>
   28de0:	ldr	r0, [r6, #24]
   28de4:	and	r0, r0, r8
   28de8:	cmp	r0, #3
   28dec:	beq	28e24 <__assert_fail@plt+0x179ec>
   28df0:	cmp	r0, #6
   28df4:	bne	28e2c <__assert_fail@plt+0x179f4>
   28df8:	ldr	r5, [r6, #20]
   28dfc:	ldr	r0, [r5]
   28e00:	bl	1386c <__assert_fail@plt+0x2434>
   28e04:	ldr	r0, [r5, #4]
   28e08:	bl	1386c <__assert_fail@plt+0x2434>
   28e0c:	ldr	r0, [r5, #8]
   28e10:	bl	1386c <__assert_fail@plt+0x2434>
   28e14:	ldr	r0, [r5, #12]
   28e18:	bl	1386c <__assert_fail@plt+0x2434>
   28e1c:	mov	r0, r5
   28e20:	b	28e28 <__assert_fail@plt+0x179f0>
   28e24:	ldr	r0, [r6, #20]
   28e28:	bl	1386c <__assert_fail@plt+0x2434>
   28e2c:	ldr	r0, [r6]
   28e30:	cmp	r0, #0
   28e34:	beq	28da4 <__assert_fail@plt+0x1796c>
   28e38:	ldr	r7, [r0, #8]
   28e3c:	cmp	r7, r6
   28e40:	mov	r6, r0
   28e44:	beq	28de0 <__assert_fail@plt+0x179a8>
   28e48:	cmp	r7, #0
   28e4c:	mov	r6, r0
   28e50:	beq	28de0 <__assert_fail@plt+0x179a8>
   28e54:	b	28dc4 <__assert_fail@plt+0x1798c>
   28e58:	ldr	r1, [fp, #12]
   28e5c:	mov	r0, #12
   28e60:	str	r0, [r1]
   28e64:	mov	r4, #0
   28e68:	b	28da4 <__assert_fail@plt+0x1796c>
   28e6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28e70:	add	fp, sp, #24
   28e74:	sub	sp, sp, #8
   28e78:	mov	r9, r0
   28e7c:	mov	r7, r1
   28e80:	ldr	r0, [r1, #40]	; 0x28
   28e84:	ldr	r1, [r1, #56]	; 0x38
   28e88:	cmp	r1, r0
   28e8c:	ble	28f74 <__assert_fail@plt+0x17b3c>
   28e90:	ldr	r1, [r7, #4]
   28e94:	mov	r5, r9
   28e98:	mov	r8, r2
   28e9c:	ldrb	r6, [r1, r0]
   28ea0:	strb	r6, [r5], #4
   28ea4:	ldr	r0, [r5]
   28ea8:	bic	r1, r0, #6291456	; 0x600000
   28eac:	str	r1, [r5]
   28eb0:	ldr	r3, [r7, #80]	; 0x50
   28eb4:	cmp	r3, #2
   28eb8:	blt	28edc <__assert_fail@plt+0x17aa4>
   28ebc:	ldr	r2, [r7, #28]
   28ec0:	ldr	r1, [r7, #40]	; 0x28
   28ec4:	cmp	r1, r2
   28ec8:	beq	28edc <__assert_fail@plt+0x17aa4>
   28ecc:	ldr	r2, [r7, #8]
   28ed0:	ldr	r1, [r2, r1, lsl #2]
   28ed4:	cmn	r1, #1
   28ed8:	beq	293b0 <__assert_fail@plt+0x17f78>
   28edc:	movw	r1, #65280	; 0xff00
   28ee0:	cmp	r6, #92	; 0x5c
   28ee4:	movt	r1, #65439	; 0xff9f
   28ee8:	bne	28f84 <__assert_fail@plt+0x17b4c>
   28eec:	ldr	r6, [r7, #40]	; 0x28
   28ef0:	ldr	r4, [r7, #48]	; 0x30
   28ef4:	add	r2, r6, #1
   28ef8:	cmp	r2, r4
   28efc:	bge	28fd8 <__assert_fail@plt+0x17ba0>
   28f00:	ldrb	r4, [r7, #75]	; 0x4b
   28f04:	cmp	r4, #0
   28f08:	bne	29634 <__assert_fail@plt+0x181fc>
   28f0c:	ldr	r3, [r7, #4]
   28f10:	ldrb	r6, [r3, r2]
   28f14:	and	r0, r0, r1
   28f18:	strb	r6, [r9]
   28f1c:	orr	r4, r0, #1
   28f20:	str	r4, [r9, #4]
   28f24:	ldr	r0, [r7, #80]	; 0x50
   28f28:	cmp	r0, #2
   28f2c:	blt	291fc <__assert_fail@plt+0x17dc4>
   28f30:	ldr	r0, [r7, #8]
   28f34:	ldr	r1, [r7, #40]	; 0x28
   28f38:	add	r0, r0, r1, lsl #2
   28f3c:	ldr	r4, [r0, #4]
   28f40:	mov	r0, r4
   28f44:	bl	11354 <iswalnum@plt>
   28f48:	sub	r1, r4, #95	; 0x5f
   28f4c:	cmp	r0, #0
   28f50:	clz	r1, r1
   28f54:	movwne	r0, #1
   28f58:	lsr	r1, r1, #5
   28f5c:	orr	r0, r1, r0
   28f60:	ldr	r1, [r5]
   28f64:	bic	r1, r1, #4194304	; 0x400000
   28f68:	orr	r0, r1, r0, lsl #22
   28f6c:	uxtb	r1, r6
   28f70:	b	29220 <__assert_fail@plt+0x17de8>
   28f74:	mov	r0, #2
   28f78:	mov	r4, #0
   28f7c:	strb	r0, [r9, #4]
   28f80:	b	29628 <__assert_fail@plt+0x181f0>
   28f84:	and	r0, r0, r1
   28f88:	orr	r4, r0, #1
   28f8c:	str	r4, [r5]
   28f90:	ldr	r0, [r7, #80]	; 0x50
   28f94:	cmp	r0, #2
   28f98:	blt	28fe4 <__assert_fail@plt+0x17bac>
   28f9c:	ldr	r0, [r7, #8]
   28fa0:	ldr	r1, [r7, #40]	; 0x28
   28fa4:	ldr	r4, [r0, r1, lsl #2]
   28fa8:	mov	r0, r4
   28fac:	bl	11354 <iswalnum@plt>
   28fb0:	sub	r1, r4, #95	; 0x5f
   28fb4:	cmp	r0, #0
   28fb8:	clz	r1, r1
   28fbc:	movwne	r0, #1
   28fc0:	lsr	r1, r1, #5
   28fc4:	orr	r0, r1, r0
   28fc8:	ldr	r1, [r5]
   28fcc:	bic	r1, r1, #4194304	; 0x400000
   28fd0:	orr	r0, r1, r0, lsl #22
   28fd4:	b	29004 <__assert_fail@plt+0x17bcc>
   28fd8:	and	r0, r0, r1
   28fdc:	orr	r0, r0, #36	; 0x24
   28fe0:	b	293c4 <__assert_fail@plt+0x17f8c>
   28fe4:	bl	11318 <__ctype_b_loc@plt>
   28fe8:	ldr	r0, [r0]
   28fec:	cmp	r6, #95	; 0x5f
   28ff0:	add	r0, r0, r6, lsl #1
   28ff4:	ldrh	r0, [r0]
   28ff8:	ubfx	r0, r0, #3, #1
   28ffc:	movweq	r0, #1
   29000:	orr	r0, r4, r0, lsl #22
   29004:	sub	r1, r6, #10
   29008:	mov	r4, #1
   2900c:	str	r0, [r5]
   29010:	cmp	r1, #115	; 0x73
   29014:	bhi	29628 <__assert_fail@plt+0x181f0>
   29018:	add	r2, pc, #0
   2901c:	ldr	pc, [r2, r1, lsl #2]
   29020:	strdeq	r9, [r2], -r0
   29024:	andeq	r9, r2, r8, lsr #12
   29028:	andeq	r9, r2, r8, lsr #12
   2902c:	andeq	r9, r2, r8, lsr #12
   29030:	andeq	r9, r2, r8, lsr #12
   29034:	andeq	r9, r2, r8, lsr #12
   29038:	andeq	r9, r2, r8, lsr #12
   2903c:	andeq	r9, r2, r8, lsr #12
   29040:	andeq	r9, r2, r8, lsr #12
   29044:	andeq	r9, r2, r8, lsr #12
   29048:	andeq	r9, r2, r8, lsr #12
   2904c:	andeq	r9, r2, r8, lsr #12
   29050:	andeq	r9, r2, r8, lsr #12
   29054:	andeq	r9, r2, r8, lsr #12
   29058:	andeq	r9, r2, r8, lsr #12
   2905c:	andeq	r9, r2, r8, lsr #12
   29060:	andeq	r9, r2, r8, lsr #12
   29064:	andeq	r9, r2, r8, lsr #12
   29068:	andeq	r9, r2, r8, lsr #12
   2906c:	andeq	r9, r2, r8, lsr #12
   29070:	andeq	r9, r2, r8, lsr #12
   29074:	andeq	r9, r2, r8, lsr #12
   29078:	andeq	r9, r2, r8, lsr #12
   2907c:	andeq	r9, r2, r8, lsr #12
   29080:	andeq	r9, r2, r8, lsr #12
   29084:	andeq	r9, r2, r8, lsr #12
   29088:	ldrdeq	r9, [r2], -r0
   2908c:	andeq	r9, r2, r8, lsr #12
   29090:	andeq	r9, r2, r8, lsr #12
   29094:	andeq	r9, r2, r8, lsr #12
   29098:	andeq	r9, r2, r8, lsr #8
   2909c:	andeq	r9, r2, r4, lsr r4
   290a0:	andeq	r9, r2, r0, asr #8
   290a4:	andeq	r9, r2, r8, asr #8
   290a8:	andeq	r9, r2, r8, lsr #12
   290ac:	andeq	r9, r2, r8, lsr #12
   290b0:	andeq	r9, r2, r8, asr r4
   290b4:	andeq	r9, r2, r8, lsr #12
   290b8:	andeq	r9, r2, r8, lsr #12
   290bc:	andeq	r9, r2, r8, lsr #12
   290c0:	andeq	r9, r2, r8, lsr #12
   290c4:	andeq	r9, r2, r8, lsr #12
   290c8:	andeq	r9, r2, r8, lsr #12
   290cc:	andeq	r9, r2, r8, lsr #12
   290d0:	andeq	r9, r2, r8, lsr #12
   290d4:	andeq	r9, r2, r8, lsr #12
   290d8:	andeq	r9, r2, r8, lsr #12
   290dc:	andeq	r9, r2, r8, lsr #12
   290e0:	andeq	r9, r2, r8, lsr #12
   290e4:	andeq	r9, r2, r8, lsr #12
   290e8:	andeq	r9, r2, r8, lsr #12
   290ec:	andeq	r9, r2, r8, lsr #12
   290f0:	andeq	r9, r2, r8, lsr #12
   290f4:	andeq	r9, r2, r0, ror #8
   290f8:	andeq	r9, r2, r8, lsr #12
   290fc:	andeq	r9, r2, r8, lsr #12
   29100:	andeq	r9, r2, r8, lsr #12
   29104:	andeq	r9, r2, r8, lsr #12
   29108:	andeq	r9, r2, r8, lsr #12
   2910c:	andeq	r9, r2, r8, lsr #12
   29110:	andeq	r9, r2, r8, lsr #12
   29114:	andeq	r9, r2, r8, lsr #12
   29118:	andeq	r9, r2, r8, lsr #12
   2911c:	andeq	r9, r2, r8, lsr #12
   29120:	andeq	r9, r2, r8, lsr #12
   29124:	andeq	r9, r2, r8, lsr #12
   29128:	andeq	r9, r2, r8, lsr #12
   2912c:	andeq	r9, r2, r8, lsr #12
   29130:	andeq	r9, r2, r8, lsr #12
   29134:	andeq	r9, r2, r8, lsr #12
   29138:	andeq	r9, r2, r8, lsr #12
   2913c:	andeq	r9, r2, r8, lsr #12
   29140:	andeq	r9, r2, r8, lsr #12
   29144:	andeq	r9, r2, r8, lsr #12
   29148:	andeq	r9, r2, r8, lsr #12
   2914c:	andeq	r9, r2, r8, lsr #12
   29150:	andeq	r9, r2, r8, lsr #12
   29154:	andeq	r9, r2, r8, lsr #12
   29158:	andeq	r9, r2, r8, lsr #12
   2915c:	andeq	r9, r2, r8, lsr #12
   29160:	andeq	r9, r2, r8, lsr #12
   29164:	andeq	r9, r2, r0, ror r4
   29168:	andeq	r9, r2, r8, lsr #12
   2916c:	andeq	r9, r2, r8, lsr #12
   29170:	andeq	r9, r2, r8, ror r4
   29174:	andeq	r9, r2, r8, lsr #12
   29178:	andeq	r9, r2, r8, lsr #12
   2917c:	andeq	r9, r2, r8, lsr #12
   29180:	andeq	r9, r2, r8, lsr #12
   29184:	andeq	r9, r2, r8, lsr #12
   29188:	andeq	r9, r2, r8, lsr #12
   2918c:	andeq	r9, r2, r8, lsr #12
   29190:	andeq	r9, r2, r8, lsr #12
   29194:	andeq	r9, r2, r8, lsr #12
   29198:	andeq	r9, r2, r8, lsr #12
   2919c:	andeq	r9, r2, r8, lsr #12
   291a0:	andeq	r9, r2, r8, lsr #12
   291a4:	andeq	r9, r2, r8, lsr #12
   291a8:	andeq	r9, r2, r8, lsr #12
   291ac:	andeq	r9, r2, r8, lsr #12
   291b0:	andeq	r9, r2, r8, lsr #12
   291b4:	andeq	r9, r2, r8, lsr #12
   291b8:	andeq	r9, r2, r8, lsr #12
   291bc:	andeq	r9, r2, r8, lsr #12
   291c0:	andeq	r9, r2, r8, lsr #12
   291c4:	andeq	r9, r2, r8, lsr #12
   291c8:	andeq	r9, r2, r8, lsr #12
   291cc:	andeq	r9, r2, r8, lsr #12
   291d0:	andeq	r9, r2, r8, lsr #12
   291d4:	andeq	r9, r2, r8, lsr #12
   291d8:	andeq	r9, r2, r8, lsr #12
   291dc:	andeq	r9, r2, r8, lsr #12
   291e0:	andeq	r9, r2, r8, lsr #12
   291e4:	andeq	r9, r2, r0, lsr #9
   291e8:			; <UNDEFINED> instruction: 0x000294b0
   291ec:	andeq	r9, r2, r4, asr #9
   291f0:	tst	r8, #2048	; 0x800
   291f4:	bne	294bc <__assert_fail@plt+0x18084>
   291f8:	b	29628 <__assert_fail@plt+0x181f0>
   291fc:	bl	11318 <__ctype_b_loc@plt>
   29200:	ldr	r0, [r0]
   29204:	uxtb	r1, r6
   29208:	cmp	r1, #95	; 0x5f
   2920c:	add	r0, r0, r1, lsl #1
   29210:	ldrh	r0, [r0]
   29214:	ubfx	r0, r0, #3, #1
   29218:	movweq	r0, #1
   2921c:	orr	r0, r4, r0, lsl #22
   29220:	mvn	r2, #38	; 0x26
   29224:	mov	r4, #2
   29228:	str	r0, [r5]
   2922c:	uxtab	r2, r2, r6
   29230:	cmp	r2, #86	; 0x56
   29234:	bhi	29628 <__assert_fail@plt+0x181f0>
   29238:	add	r3, pc, #0
   2923c:	ldr	pc, [r3, r2, lsl #2]
   29240:	andeq	r9, r2, r0, lsl #10
   29244:	andeq	r9, r2, r0, lsl r5
   29248:	andeq	r9, r2, r0, lsr #10
   2924c:	andeq	r9, r2, r8, lsr #12
   29250:	andeq	r9, r2, r0, lsr r5
   29254:	andeq	r9, r2, r8, lsr #12
   29258:	andeq	r9, r2, r8, lsr #12
   2925c:	andeq	r9, r2, r8, lsr #12
   29260:	andeq	r9, r2, r8, lsr #12
   29264:	andeq	r9, r2, r8, lsr #12
   29268:	muleq	r2, ip, r3
   2926c:	muleq	r2, ip, r3
   29270:	muleq	r2, ip, r3
   29274:	muleq	r2, ip, r3
   29278:	muleq	r2, ip, r3
   2927c:	muleq	r2, ip, r3
   29280:	muleq	r2, ip, r3
   29284:	muleq	r2, ip, r3
   29288:	muleq	r2, ip, r3
   2928c:	andeq	r9, r2, r8, lsr #12
   29290:	andeq	r9, r2, r8, lsr #12
   29294:	andeq	r9, r2, r8, asr #10
   29298:	andeq	r9, r2, r8, lsr #12
   2929c:	andeq	r9, r2, r8, asr r5
   292a0:	andeq	r9, r2, r8, ror #10
   292a4:	andeq	r9, r2, r8, lsr #12
   292a8:	andeq	r9, r2, r8, lsr #12
   292ac:	andeq	r9, r2, r0, lsl #11
   292b0:	andeq	r9, r2, r8, lsr #12
   292b4:	andeq	r9, r2, r8, lsr #12
   292b8:	andeq	r9, r2, r8, lsr #12
   292bc:	andeq	r9, r2, r8, lsr #12
   292c0:	andeq	r9, r2, r8, lsr #12
   292c4:	andeq	r9, r2, r8, lsr #12
   292c8:	andeq	r9, r2, r8, lsr #12
   292cc:	andeq	r9, r2, r8, lsr #12
   292d0:	andeq	r9, r2, r8, lsr #12
   292d4:	andeq	r9, r2, r8, lsr #12
   292d8:	andeq	r9, r2, r8, lsr #12
   292dc:	andeq	r9, r2, r8, lsr #12
   292e0:	andeq	r9, r2, r8, lsr #12
   292e4:	andeq	r9, r2, r8, lsr #12
   292e8:	andeq	r9, r2, r8, lsr #12
   292ec:	andeq	r9, r2, r8, lsr #12
   292f0:	muleq	r2, r0, r5
   292f4:	andeq	r9, r2, r8, lsr #12
   292f8:	andeq	r9, r2, r8, lsr #12
   292fc:	andeq	r9, r2, r8, lsr #12
   29300:	andeq	r9, r2, r0, lsr #11
   29304:	andeq	r9, r2, r8, lsr #12
   29308:	andeq	r9, r2, r8, lsr #12
   2930c:	andeq	r9, r2, r8, lsr #12
   29310:	andeq	r9, r2, r8, lsr #12
   29314:	andeq	r9, r2, r8, lsr #12
   29318:	andeq	r9, r2, r8, lsr #12
   2931c:	andeq	r9, r2, r8, lsr #12
   29320:	andeq	r9, r2, r8, lsr #12
   29324:			; <UNDEFINED> instruction: 0x000295b0
   29328:	andeq	r9, r2, r8, lsr #12
   2932c:	andeq	r9, r2, r0, asr #11
   29330:	andeq	r9, r2, r8, lsr #12
   29334:	andeq	r9, r2, r8, lsr #12
   29338:	andeq	r9, r2, r8, lsr #12
   2933c:	andeq	r9, r2, r8, lsr #12
   29340:	andeq	r9, r2, r8, lsr #12
   29344:	andeq	r9, r2, r8, lsr #12
   29348:	andeq	r9, r2, r8, lsr #12
   2934c:	andeq	r9, r2, r8, lsr #12
   29350:	andeq	r9, r2, r8, lsr #12
   29354:	andeq	r9, r2, r8, lsr #12
   29358:	andeq	r9, r2, r8, lsr #12
   2935c:	andeq	r9, r2, r8, lsr #12
   29360:	andeq	r9, r2, r8, lsr #12
   29364:	andeq	r9, r2, r8, lsr #12
   29368:	andeq	r9, r2, r8, lsr #12
   2936c:	andeq	r9, r2, r8, lsr #12
   29370:	ldrdeq	r9, [r2], -r0
   29374:	andeq	r9, r2, r8, lsr #12
   29378:	andeq	r9, r2, r8, lsr #12
   2937c:	andeq	r9, r2, r8, lsr #12
   29380:	andeq	r9, r2, r0, ror #11
   29384:	andeq	r9, r2, r8, lsr #12
   29388:	andeq	r9, r2, r8, lsr #12
   2938c:	andeq	r9, r2, r8, lsr #12
   29390:	strdeq	r9, [r2], -r0
   29394:	andeq	r9, r2, r4, lsl #12
   29398:	andeq	r9, r2, r0, lsl r6
   2939c:	tst	r8, #16384	; 0x4000
   293a0:	bne	29628 <__assert_fail@plt+0x181f0>
   293a4:	sub	r1, r1, #49	; 0x31
   293a8:	mov	r2, #4
   293ac:	b	29490 <__assert_fail@plt+0x18058>
   293b0:	movw	r1, #65280	; 0xff00
   293b4:	movt	r1, #65439	; 0xff9f
   293b8:	and	r0, r0, r1
   293bc:	orr	r0, r0, #1
   293c0:	orr	r0, r0, #2097152	; 0x200000
   293c4:	str	r0, [r5]
   293c8:	mov	r4, #1
   293cc:	b	29628 <__assert_fail@plt+0x181f0>
   293d0:	tst	r8, #8
   293d4:	bne	29420 <__assert_fail@plt+0x17fe8>
   293d8:	ldr	r1, [r7, #40]	; 0x28
   293dc:	ldr	r2, [r7, #48]	; 0x30
   293e0:	add	r1, r1, #1
   293e4:	cmp	r1, r2
   293e8:	beq	29420 <__assert_fail@plt+0x17fe8>
   293ec:	str	r1, [r7, #40]	; 0x28
   293f0:	mov	r0, sp
   293f4:	mov	r1, r7
   293f8:	mov	r2, r8
   293fc:	bl	28e6c <__assert_fail@plt+0x17a34>
   29400:	ldr	r0, [r7, #40]	; 0x28
   29404:	sub	r0, r0, #1
   29408:	str	r0, [r7, #40]	; 0x28
   2940c:	ldrb	r0, [sp, #4]
   29410:	sub	r0, r0, #9
   29414:	cmp	r0, #1
   29418:	bhi	29628 <__assert_fail@plt+0x181f0>
   2941c:	ldr	r0, [r5]
   29420:	mov	r1, #32
   29424:	b	2948c <__assert_fail@plt+0x18054>
   29428:	tst	r8, #8192	; 0x2000
   2942c:	bne	29518 <__assert_fail@plt+0x180e0>
   29430:	b	29628 <__assert_fail@plt+0x181f0>
   29434:	tst	r8, #8192	; 0x2000
   29438:	bne	29528 <__assert_fail@plt+0x180f0>
   2943c:	b	29628 <__assert_fail@plt+0x181f0>
   29440:	mov	r1, #11
   29444:	b	29620 <__assert_fail@plt+0x181e8>
   29448:	movw	r1, #1026	; 0x402
   2944c:	tst	r8, r1
   29450:	bne	29628 <__assert_fail@plt+0x181f0>
   29454:	b	29540 <__assert_fail@plt+0x18108>
   29458:	mov	r1, #5
   2945c:	b	29620 <__assert_fail@plt+0x181e8>
   29460:	movw	r1, #1026	; 0x402
   29464:	tst	r8, r1
   29468:	bne	29628 <__assert_fail@plt+0x181f0>
   2946c:	b	29578 <__assert_fail@plt+0x18140>
   29470:	mov	r1, #20
   29474:	b	29620 <__assert_fail@plt+0x181e8>
   29478:	movw	r1, #8
   2947c:	movt	r1, #128	; 0x80
   29480:	tst	r8, r1
   29484:	beq	294d4 <__assert_fail@plt+0x1809c>
   29488:	mov	r1, #16
   2948c:	mov	r2, #12
   29490:	bfi	r0, r2, #0, #8
   29494:	str	r1, [r9]
   29498:	str	r0, [r9, #4]
   2949c:	b	29628 <__assert_fail@plt+0x181f0>
   294a0:	and	r1, r8, #4608	; 0x1200
   294a4:	cmp	r1, #4608	; 0x1200
   294a8:	beq	295fc <__assert_fail@plt+0x181c4>
   294ac:	b	29628 <__assert_fail@plt+0x181f0>
   294b0:	and	r1, r8, #33792	; 0x8400
   294b4:	cmp	r1, #32768	; 0x8000
   294b8:	bne	29628 <__assert_fail@plt+0x181f0>
   294bc:	mov	r1, #10
   294c0:	b	29620 <__assert_fail@plt+0x181e8>
   294c4:	and	r1, r8, #4608	; 0x1200
   294c8:	cmp	r1, #4608	; 0x1200
   294cc:	beq	2961c <__assert_fail@plt+0x181e4>
   294d0:	b	29628 <__assert_fail@plt+0x181f0>
   294d4:	ldr	r1, [r7, #40]	; 0x28
   294d8:	cmp	r1, #0
   294dc:	beq	29488 <__assert_fail@plt+0x18050>
   294e0:	tst	r8, #2048	; 0x800
   294e4:	beq	29628 <__assert_fail@plt+0x181f0>
   294e8:	ldr	r2, [r7, #4]
   294ec:	add	r1, r2, r1
   294f0:	ldrb	r1, [r1, #-1]
   294f4:	cmp	r1, #10
   294f8:	beq	29488 <__assert_fail@plt+0x18050>
   294fc:	b	29628 <__assert_fail@plt+0x181f0>
   29500:	tst	r8, #524288	; 0x80000
   29504:	bne	29628 <__assert_fail@plt+0x181f0>
   29508:	mov	r1, #128	; 0x80
   2950c:	b	2948c <__assert_fail@plt+0x18054>
   29510:	tst	r8, #8192	; 0x2000
   29514:	bne	29628 <__assert_fail@plt+0x181f0>
   29518:	mov	r1, #8
   2951c:	b	29620 <__assert_fail@plt+0x181e8>
   29520:	tst	r8, #8192	; 0x2000
   29524:	bne	29628 <__assert_fail@plt+0x181f0>
   29528:	mov	r1, #9
   2952c:	b	29620 <__assert_fail@plt+0x181e8>
   29530:	movw	r1, #1026	; 0x402
   29534:	and	r1, r8, r1
   29538:	cmp	r1, #2
   2953c:	bne	29628 <__assert_fail@plt+0x181f0>
   29540:	mov	r1, #18
   29544:	b	29620 <__assert_fail@plt+0x181e8>
   29548:	tst	r8, #524288	; 0x80000
   2954c:	bne	29628 <__assert_fail@plt+0x181f0>
   29550:	mov	r1, #6
   29554:	b	2948c <__assert_fail@plt+0x18054>
   29558:	tst	r8, #524288	; 0x80000
   2955c:	bne	29628 <__assert_fail@plt+0x181f0>
   29560:	mov	r1, #9
   29564:	b	2948c <__assert_fail@plt+0x18054>
   29568:	movw	r1, #1026	; 0x402
   2956c:	and	r1, r8, r1
   29570:	cmp	r1, #2
   29574:	bne	29628 <__assert_fail@plt+0x181f0>
   29578:	mov	r1, #19
   2957c:	b	29620 <__assert_fail@plt+0x181e8>
   29580:	tst	r8, #524288	; 0x80000
   29584:	bne	29628 <__assert_fail@plt+0x181f0>
   29588:	mov	r1, #512	; 0x200
   2958c:	b	2948c <__assert_fail@plt+0x18054>
   29590:	tst	r8, #524288	; 0x80000
   29594:	bne	29628 <__assert_fail@plt+0x181f0>
   29598:	mov	r1, #35	; 0x23
   2959c:	b	29620 <__assert_fail@plt+0x181e8>
   295a0:	tst	r8, #524288	; 0x80000
   295a4:	bne	29628 <__assert_fail@plt+0x181f0>
   295a8:	mov	r1, #33	; 0x21
   295ac:	b	29620 <__assert_fail@plt+0x181e8>
   295b0:	tst	r8, #524288	; 0x80000
   295b4:	bne	29628 <__assert_fail@plt+0x181f0>
   295b8:	mov	r1, #64	; 0x40
   295bc:	b	2948c <__assert_fail@plt+0x18054>
   295c0:	tst	r8, #524288	; 0x80000
   295c4:	bne	29628 <__assert_fail@plt+0x181f0>
   295c8:	mov	r1, #256	; 0x100
   295cc:	b	2948c <__assert_fail@plt+0x18054>
   295d0:	tst	r8, #524288	; 0x80000
   295d4:	bne	29628 <__assert_fail@plt+0x181f0>
   295d8:	mov	r1, #34	; 0x22
   295dc:	b	29620 <__assert_fail@plt+0x181e8>
   295e0:	tst	r8, #524288	; 0x80000
   295e4:	bne	29628 <__assert_fail@plt+0x181f0>
   295e8:	mov	r1, #32
   295ec:	b	29620 <__assert_fail@plt+0x181e8>
   295f0:	and	r1, r8, #4608	; 0x1200
   295f4:	cmp	r1, #512	; 0x200
   295f8:	bne	29628 <__assert_fail@plt+0x181f0>
   295fc:	mov	r1, #23
   29600:	b	29620 <__assert_fail@plt+0x181e8>
   29604:	tst	r8, #33792	; 0x8400
   29608:	bne	29628 <__assert_fail@plt+0x181f0>
   2960c:	b	294bc <__assert_fail@plt+0x18084>
   29610:	and	r1, r8, #4608	; 0x1200
   29614:	cmp	r1, #512	; 0x200
   29618:	bne	29628 <__assert_fail@plt+0x181f0>
   2961c:	mov	r1, #24
   29620:	bfi	r0, r1, #0, #8
   29624:	str	r0, [r5]
   29628:	mov	r0, r4
   2962c:	sub	sp, fp, #24
   29630:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29634:	cmp	r3, #2
   29638:	blt	29668 <__assert_fail@plt+0x18230>
   2963c:	ldr	r3, [r7, #8]
   29640:	ldr	r4, [r3, r2, lsl #2]
   29644:	cmn	r4, #1
   29648:	beq	28f0c <__assert_fail@plt+0x17ad4>
   2964c:	ldr	r4, [r7, #28]
   29650:	add	r6, r6, #2
   29654:	cmp	r4, r6
   29658:	beq	29668 <__assert_fail@plt+0x18230>
   2965c:	ldr	r3, [r3, r6, lsl #2]
   29660:	cmn	r3, #1
   29664:	beq	28f0c <__assert_fail@plt+0x17ad4>
   29668:	ldrb	r3, [r7, #76]	; 0x4c
   2966c:	mov	r6, r2
   29670:	ldr	r4, [r7, #24]
   29674:	ldr	ip, [r7]
   29678:	cmp	r3, #0
   2967c:	ldrne	r6, [r7, #12]
   29680:	ldrne	r6, [r6, r2, lsl #2]
   29684:	cmp	r3, #0
   29688:	add	r6, r4, r6
   2968c:	add	r6, ip, r6
   29690:	ldrsb	r6, [r6]
   29694:	beq	28f14 <__assert_fail@plt+0x17adc>
   29698:	cmn	r6, #1
   2969c:	ble	28f0c <__assert_fail@plt+0x17ad4>
   296a0:	b	28f14 <__assert_fail@plt+0x17adc>
   296a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   296a8:	add	fp, sp, #28
   296ac:	sub	sp, sp, #20
   296b0:	ldr	r4, [fp, #12]
   296b4:	ldr	r7, [fp, #8]
   296b8:	ldr	sl, [r1]
   296bc:	mov	r6, r2
   296c0:	str	r0, [sp, #12]
   296c4:	str	r1, [sp, #8]
   296c8:	str	r3, [sp, #16]
   296cc:	str	r4, [sp, #4]
   296d0:	str	r7, [sp]
   296d4:	bl	299f0 <__assert_fail@plt+0x185b8>
   296d8:	mov	r3, r4
   296dc:	mov	r4, r0
   296e0:	cmp	r0, #0
   296e4:	bne	29704 <__assert_fail@plt+0x182cc>
   296e8:	ldr	r0, [r3]
   296ec:	cmp	r0, #0
   296f0:	beq	29704 <__assert_fail@plt+0x182cc>
   296f4:	b	299dc <__assert_fail@plt+0x185a4>
   296f8:	cmp	r4, #0
   296fc:	mov	r7, r8
   29700:	moveq	r4, r5
   29704:	ldrb	r0, [r6, #4]
   29708:	orr	r1, r0, #8
   2970c:	cmp	r1, #10
   29710:	beq	299e0 <__assert_fail@plt+0x185a8>
   29714:	cmp	r7, #0
   29718:	beq	29724 <__assert_fail@plt+0x182ec>
   2971c:	cmp	r0, #9
   29720:	beq	299e0 <__assert_fail@plt+0x185a8>
   29724:	str	r3, [sp, #4]
   29728:	mov	r9, r3
   2972c:	ldr	r0, [sp, #12]
   29730:	ldr	r1, [sp, #8]
   29734:	ldr	r3, [sp, #16]
   29738:	mov	r2, r6
   2973c:	mov	r8, r7
   29740:	str	r7, [sp]
   29744:	bl	299f0 <__assert_fail@plt+0x185b8>
   29748:	mov	r3, r9
   2974c:	mov	r5, r0
   29750:	cmp	r0, #0
   29754:	bne	29764 <__assert_fail@plt+0x1832c>
   29758:	ldr	r0, [r3]
   2975c:	cmp	r0, #0
   29760:	bne	297f4 <__assert_fail@plt+0x183bc>
   29764:	cmp	r4, #0
   29768:	cmpne	r5, #0
   2976c:	beq	296f8 <__assert_fail@plt+0x182c0>
   29770:	ldr	r1, [sl, #64]	; 0x40
   29774:	cmp	r1, #31
   29778:	beq	297c8 <__assert_fail@plt+0x18390>
   2977c:	ldr	r0, [sl, #56]	; 0x38
   29780:	add	r2, r1, #1
   29784:	add	r0, r0, r1, lsl #5
   29788:	mov	r1, #0
   2978c:	mov	r7, r8
   29790:	str	r2, [sl, #64]	; 0x40
   29794:	str	r1, [r0, #4]!
   29798:	stmib	r0, {r4, r5}
   2979c:	str	r1, [r0, #12]
   297a0:	str	r1, [r0, #16]
   297a4:	str	r1, [r0, #20]
   297a8:	mov	r1, #16
   297ac:	str	r1, [r0, #24]
   297b0:	mvn	r1, #0
   297b4:	str	r1, [r0, #28]
   297b8:	str	r0, [r4]
   297bc:	str	r0, [r5]
   297c0:	mov	r4, r0
   297c4:	b	29704 <__assert_fail@plt+0x182cc>
   297c8:	mov	r0, #996	; 0x3e4
   297cc:	bl	3554c <__assert_fail@plt+0x24114>
   297d0:	cmp	r0, #0
   297d4:	beq	29898 <__assert_fail@plt+0x18460>
   297d8:	ldr	r1, [sl, #56]	; 0x38
   297dc:	mov	r3, r9
   297e0:	str	r1, [r0]
   297e4:	mov	r1, #0
   297e8:	str	r1, [sl, #64]	; 0x40
   297ec:	str	r0, [sl, #56]	; 0x38
   297f0:	b	29780 <__assert_fail@plt+0x18348>
   297f4:	cmp	r4, #0
   297f8:	beq	299dc <__assert_fail@plt+0x185a4>
   297fc:	movw	r5, #255	; 0xff
   29800:	movt	r5, #4
   29804:	mov	r6, r4
   29808:	ldr	r4, [r4, #4]
   2980c:	cmp	r4, #0
   29810:	bne	29804 <__assert_fail@plt+0x183cc>
   29814:	ldr	r4, [r6, #8]
   29818:	cmp	r4, #0
   2981c:	bne	29804 <__assert_fail@plt+0x183cc>
   29820:	ldr	r0, [r6, #24]
   29824:	and	r0, r0, r5
   29828:	cmp	r0, #3
   2982c:	beq	29864 <__assert_fail@plt+0x1842c>
   29830:	cmp	r0, #6
   29834:	bne	2986c <__assert_fail@plt+0x18434>
   29838:	ldr	r4, [r6, #20]
   2983c:	ldr	r0, [r4]
   29840:	bl	1386c <__assert_fail@plt+0x2434>
   29844:	ldr	r0, [r4, #4]
   29848:	bl	1386c <__assert_fail@plt+0x2434>
   2984c:	ldr	r0, [r4, #8]
   29850:	bl	1386c <__assert_fail@plt+0x2434>
   29854:	ldr	r0, [r4, #12]
   29858:	bl	1386c <__assert_fail@plt+0x2434>
   2985c:	mov	r0, r4
   29860:	b	29868 <__assert_fail@plt+0x18430>
   29864:	ldr	r0, [r6, #20]
   29868:	bl	1386c <__assert_fail@plt+0x2434>
   2986c:	ldr	r0, [r6]
   29870:	cmp	r0, #0
   29874:	beq	299dc <__assert_fail@plt+0x185a4>
   29878:	ldr	r4, [r0, #8]
   2987c:	cmp	r4, r6
   29880:	mov	r6, r0
   29884:	beq	29820 <__assert_fail@plt+0x183e8>
   29888:	cmp	r4, #0
   2988c:	mov	r6, r0
   29890:	beq	29820 <__assert_fail@plt+0x183e8>
   29894:	b	29804 <__assert_fail@plt+0x183cc>
   29898:	movw	r6, #255	; 0xff
   2989c:	mov	r1, r9
   298a0:	movt	r6, #4
   298a4:	mov	r7, r5
   298a8:	ldr	r5, [r5, #4]
   298ac:	cmp	r5, #0
   298b0:	bne	298a4 <__assert_fail@plt+0x1846c>
   298b4:	ldr	r5, [r7, #8]
   298b8:	cmp	r5, #0
   298bc:	bne	298a4 <__assert_fail@plt+0x1846c>
   298c0:	ldr	r0, [r7, #24]
   298c4:	and	r0, r0, r6
   298c8:	cmp	r0, #3
   298cc:	beq	29904 <__assert_fail@plt+0x184cc>
   298d0:	cmp	r0, #6
   298d4:	bne	29910 <__assert_fail@plt+0x184d8>
   298d8:	ldr	r5, [r7, #20]
   298dc:	ldr	r0, [r5]
   298e0:	bl	1386c <__assert_fail@plt+0x2434>
   298e4:	ldr	r0, [r5, #4]
   298e8:	bl	1386c <__assert_fail@plt+0x2434>
   298ec:	ldr	r0, [r5, #8]
   298f0:	bl	1386c <__assert_fail@plt+0x2434>
   298f4:	ldr	r0, [r5, #12]
   298f8:	bl	1386c <__assert_fail@plt+0x2434>
   298fc:	mov	r0, r5
   29900:	b	29908 <__assert_fail@plt+0x184d0>
   29904:	ldr	r0, [r7, #20]
   29908:	bl	1386c <__assert_fail@plt+0x2434>
   2990c:	mov	r1, r9
   29910:	ldr	r0, [r7]
   29914:	cmp	r0, #0
   29918:	beq	2993c <__assert_fail@plt+0x18504>
   2991c:	ldr	r5, [r0, #8]
   29920:	cmp	r5, r7
   29924:	mov	r7, r0
   29928:	beq	298c0 <__assert_fail@plt+0x18488>
   2992c:	cmp	r5, #0
   29930:	mov	r7, r0
   29934:	beq	298c0 <__assert_fail@plt+0x18488>
   29938:	b	298a4 <__assert_fail@plt+0x1846c>
   2993c:	mov	r5, r4
   29940:	ldr	r4, [r4, #4]
   29944:	cmp	r4, #0
   29948:	bne	2993c <__assert_fail@plt+0x18504>
   2994c:	ldr	r4, [r5, #8]
   29950:	cmp	r4, #0
   29954:	bne	2993c <__assert_fail@plt+0x18504>
   29958:	ldr	r0, [r5, #24]
   2995c:	and	r0, r0, r6
   29960:	cmp	r0, #3
   29964:	beq	2999c <__assert_fail@plt+0x18564>
   29968:	cmp	r0, #6
   2996c:	bne	299a8 <__assert_fail@plt+0x18570>
   29970:	ldr	r4, [r5, #20]
   29974:	ldr	r0, [r4]
   29978:	bl	1386c <__assert_fail@plt+0x2434>
   2997c:	ldr	r0, [r4, #4]
   29980:	bl	1386c <__assert_fail@plt+0x2434>
   29984:	ldr	r0, [r4, #8]
   29988:	bl	1386c <__assert_fail@plt+0x2434>
   2998c:	ldr	r0, [r4, #12]
   29990:	bl	1386c <__assert_fail@plt+0x2434>
   29994:	mov	r0, r4
   29998:	b	299a0 <__assert_fail@plt+0x18568>
   2999c:	ldr	r0, [r5, #20]
   299a0:	bl	1386c <__assert_fail@plt+0x2434>
   299a4:	mov	r1, r9
   299a8:	ldr	r0, [r5]
   299ac:	cmp	r0, #0
   299b0:	beq	299d4 <__assert_fail@plt+0x1859c>
   299b4:	ldr	r4, [r0, #8]
   299b8:	cmp	r4, r5
   299bc:	mov	r5, r0
   299c0:	beq	29958 <__assert_fail@plt+0x18520>
   299c4:	cmp	r4, #0
   299c8:	mov	r5, r0
   299cc:	beq	29958 <__assert_fail@plt+0x18520>
   299d0:	b	2993c <__assert_fail@plt+0x18504>
   299d4:	mov	r0, #12
   299d8:	str	r0, [r1]
   299dc:	mov	r4, #0
   299e0:	mov	r0, r4
   299e4:	sub	sp, fp, #28
   299e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   299ec:	nop	{0}
   299f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299f4:	add	fp, sp, #28
   299f8:	sub	sp, sp, #148	; 0x94
   299fc:	str	r0, [sp, #24]
   29a00:	ldr	r0, [r2, #4]
   29a04:	mov	r7, r1
   29a08:	mov	lr, r2
   29a0c:	mvn	r1, #0
   29a10:	mov	r6, r3
   29a14:	mov	sl, #0
   29a18:	ldr	r2, [fp, #12]
   29a1c:	ldr	r8, [r7]
   29a20:	uxtab	r1, r1, r0
   29a24:	cmp	r1, #35	; 0x23
   29a28:	str	r2, [sp, #16]
   29a2c:	str	lr, [sp, #44]	; 0x2c
   29a30:	bhi	29b5c <__assert_fail@plt+0x18724>
   29a34:	add	r2, pc, #0
   29a38:	ldr	pc, [r2, r1, lsl #2]
   29a3c:	andeq	r9, r2, r8, lsl lr
   29a40:	andeq	fp, r2, r8, ror #15
   29a44:	andeq	r9, r2, ip, asr fp
   29a48:	andeq	r9, r2, r0, ror #23
   29a4c:	andeq	r9, r2, r0, ror #24
   29a50:	andeq	r9, r2, ip, asr fp
   29a54:	andeq	r9, r2, ip, asr fp
   29a58:	andeq	r9, r2, r8, asr #25
   29a5c:	andeq	r9, r2, ip, ror #22
   29a60:	andeq	fp, r2, r8, ror #15
   29a64:	andeq	r9, r2, ip, asr fp
   29a68:	andeq	r9, r2, r0, asr sp
   29a6c:	andeq	r9, r2, ip, asr fp
   29a70:	andeq	r9, r2, ip, asr fp
   29a74:	andeq	r9, r2, ip, asr fp
   29a78:	andeq	r9, r2, ip, asr fp
   29a7c:	andeq	r9, r2, ip, asr fp
   29a80:	andeq	r9, r2, ip, asr fp
   29a84:	andeq	r9, r2, ip, asr fp
   29a88:	andeq	r9, r2, r8, ror #31
   29a8c:	andeq	r9, r2, ip, asr fp
   29a90:	andeq	r9, r2, ip, asr fp
   29a94:	andeq	r9, r2, r4, asr fp
   29a98:	andeq	r9, r2, ip, ror fp
   29a9c:	andeq	r9, r2, ip, asr fp
   29aa0:	andeq	r9, r2, ip, asr fp
   29aa4:	andeq	r9, r2, ip, asr fp
   29aa8:	andeq	r9, r2, ip, asr fp
   29aac:	andeq	r9, r2, ip, asr fp
   29ab0:	andeq	r9, r2, ip, asr fp
   29ab4:	andeq	r9, r2, ip, asr fp
   29ab8:	andeq	r9, r2, ip, asr #21
   29abc:	andeq	r9, r2, ip, asr #21
   29ac0:	strdeq	r9, [r2], -r0
   29ac4:	strdeq	r9, [r2], -r0
   29ac8:	andeq	r9, r2, r0, ror #31
   29acc:	ldr	r1, [sp, #24]
   29ad0:	mvn	r2, #32
   29ad4:	movw	r3, #25805	; 0x64cd
   29ad8:	uxtab	r0, r2, r0
   29adc:	movw	r2, #32078	; 0x7d4e
   29ae0:	movt	r3, #3
   29ae4:	clz	r0, r0
   29ae8:	movt	r2, #3
   29aec:	b	29b10 <__assert_fail@plt+0x186d8>
   29af0:	ldr	r1, [sp, #24]
   29af4:	mvn	r2, #34	; 0x22
   29af8:	movw	r3, #25955	; 0x6563
   29afc:	uxtab	r0, r2, r0
   29b00:	movw	r2, #32084	; 0x7d54
   29b04:	movt	r3, #3
   29b08:	clz	r0, r0
   29b0c:	movt	r2, #3
   29b10:	lsr	r0, r0, #5
   29b14:	ldr	r1, [r1, #64]	; 0x40
   29b18:	str	r0, [sp]
   29b1c:	ldr	r4, [sp, #16]
   29b20:	str	r4, [sp, #4]
   29b24:	mov	r0, r8
   29b28:	bl	2be2c <__assert_fail@plt+0x1a9f4>
   29b2c:	mov	r7, r0
   29b30:	cmp	r0, #0
   29b34:	bne	29b4c <__assert_fail@plt+0x18714>
   29b38:	ldr	r0, [r4]
   29b3c:	cmp	r0, #0
   29b40:	ldr	lr, [sp, #44]	; 0x2c
   29b44:	beq	2aa84 <__assert_fail@plt+0x1964c>
   29b48:	b	2b7e8 <__assert_fail@plt+0x1a3b0>
   29b4c:	ldr	lr, [sp, #44]	; 0x2c
   29b50:	b	2aa84 <__assert_fail@plt+0x1964c>
   29b54:	tst	r6, #16777216	; 0x1000000
   29b58:	bne	29bd8 <__assert_fail@plt+0x187a0>
   29b5c:	tst	r6, #32
   29b60:	bne	29bd8 <__assert_fail@plt+0x187a0>
   29b64:	tst	r6, #16
   29b68:	bne	2a064 <__assert_fail@plt+0x18c2c>
   29b6c:	tst	r6, #131072	; 0x20000
   29b70:	uxtbeq	r1, r0
   29b74:	cmpeq	r1, #9
   29b78:	beq	2a0ac <__assert_fail@plt+0x18c74>
   29b7c:	mov	r1, #1
   29b80:	bfi	r0, r1, #0, #8
   29b84:	str	r0, [lr, #4]
   29b88:	ldr	r1, [r8, #64]	; 0x40
   29b8c:	cmp	r1, #31
   29b90:	beq	2b940 <__assert_fail@plt+0x1a508>
   29b94:	ldr	r0, [r8, #56]	; 0x38
   29b98:	add	r2, r1, #1
   29b9c:	add	r7, r0, r1, lsl #5
   29ba0:	mov	r0, #0
   29ba4:	str	r2, [r8, #64]	; 0x40
   29ba8:	str	r0, [r7, #4]!
   29bac:	str	r0, [r7, #4]
   29bb0:	str	r0, [r7, #8]
   29bb4:	ldm	lr, {r1, r2}
   29bb8:	str	r0, [r7, #12]
   29bbc:	str	r0, [r7, #16]
   29bc0:	mvn	r0, #0
   29bc4:	str	r0, [r7, #28]
   29bc8:	bic	r0, r2, #786432	; 0xc0000
   29bcc:	str	r1, [r7, #20]
   29bd0:	str	r0, [r7, #24]
   29bd4:	b	2aa84 <__assert_fail@plt+0x1964c>
   29bd8:	mov	r0, #13
   29bdc:	b	2a988 <__assert_fail@plt+0x19550>
   29be0:	ldr	r0, [lr]
   29be4:	ldr	r2, [r8, #84]	; 0x54
   29be8:	mov	r1, #1
   29bec:	tst	r2, r1, lsl r0
   29bf0:	beq	2b984 <__assert_fail@plt+0x1a54c>
   29bf4:	lsl	r0, r1, r0
   29bf8:	ldr	r1, [r8, #64]	; 0x40
   29bfc:	ldr	r2, [r8, #80]	; 0x50
   29c00:	orr	r0, r2, r0
   29c04:	cmp	r1, #31
   29c08:	str	r0, [r8, #80]	; 0x50
   29c0c:	beq	2b9fc <__assert_fail@plt+0x1a5c4>
   29c10:	ldr	r0, [r8, #56]	; 0x38
   29c14:	add	r2, r1, #1
   29c18:	add	r7, r0, r1, lsl #5
   29c1c:	mov	r0, #0
   29c20:	str	r2, [r8, #64]	; 0x40
   29c24:	str	r0, [r7, #4]!
   29c28:	str	r0, [r7, #4]
   29c2c:	str	r0, [r7, #8]
   29c30:	ldm	lr, {r1, r2}
   29c34:	str	r0, [r7, #12]
   29c38:	str	r0, [r7, #16]
   29c3c:	mvn	r0, #0
   29c40:	str	r0, [r7, #28]
   29c44:	bic	r0, r2, #786432	; 0xc0000
   29c48:	str	r1, [r7, #20]
   29c4c:	str	r0, [r7, #24]
   29c50:	ldr	r0, [r8, #76]	; 0x4c
   29c54:	add	r0, r0, #1
   29c58:	str	r0, [r8, #76]	; 0x4c
   29c5c:	b	29cb8 <__assert_fail@plt+0x18880>
   29c60:	ldr	r1, [r8, #64]	; 0x40
   29c64:	cmp	r1, #31
   29c68:	beq	2b98c <__assert_fail@plt+0x1a554>
   29c6c:	ldr	r0, [r8, #56]	; 0x38
   29c70:	add	r2, r1, #1
   29c74:	add	r7, r0, r1, lsl #5
   29c78:	mov	r0, #0
   29c7c:	str	r2, [r8, #64]	; 0x40
   29c80:	str	r0, [r7, #4]!
   29c84:	str	r0, [r7, #4]
   29c88:	str	r0, [r7, #8]
   29c8c:	ldm	lr, {r1, r2}
   29c90:	str	r0, [r7, #12]
   29c94:	str	r0, [r7, #16]
   29c98:	mvn	r0, #0
   29c9c:	str	r0, [r7, #28]
   29ca0:	bic	r0, r2, #786432	; 0xc0000
   29ca4:	str	r1, [r7, #20]
   29ca8:	str	r0, [r7, #24]
   29cac:	ldr	r0, [r8, #92]	; 0x5c
   29cb0:	cmp	r0, #2
   29cb4:	blt	2aa84 <__assert_fail@plt+0x1964c>
   29cb8:	ldrb	r0, [r8, #88]	; 0x58
   29cbc:	orr	r0, r0, #2
   29cc0:	strb	r0, [r8, #88]	; 0x58
   29cc4:	b	2aa84 <__assert_fail@plt+0x1964c>
   29cc8:	ldr	r4, [r7, #24]
   29ccc:	mov	sl, r6
   29cd0:	orr	r2, r6, #8388608	; 0x800000
   29cd4:	ldr	r6, [sp, #24]
   29cd8:	ldr	r5, [fp, #8]
   29cdc:	add	r0, r4, #1
   29ce0:	mov	r1, r6
   29ce4:	str	r0, [r7, #24]
   29ce8:	mov	r0, lr
   29cec:	bl	28e6c <__assert_fail@plt+0x17a34>
   29cf0:	ldr	r1, [r6, #40]	; 0x28
   29cf4:	ldr	lr, [sp, #44]	; 0x2c
   29cf8:	mov	r9, #0
   29cfc:	add	r0, r1, r0
   29d00:	str	r0, [r6, #40]	; 0x28
   29d04:	ldrb	r0, [lr, #4]
   29d08:	cmp	r0, #9
   29d0c:	beq	2aa18 <__assert_fail@plt+0x195e0>
   29d10:	add	r0, r5, #1
   29d14:	mov	r1, r7
   29d18:	mov	r2, lr
   29d1c:	mov	r3, sl
   29d20:	mov	r6, lr
   29d24:	str	r0, [sp]
   29d28:	ldr	r5, [sp, #16]
   29d2c:	str	r5, [sp, #4]
   29d30:	ldr	r0, [sp, #24]
   29d34:	bl	28bfc <__assert_fail@plt+0x177c4>
   29d38:	mov	r9, r0
   29d3c:	ldr	r0, [r5]
   29d40:	cmp	r0, #0
   29d44:	beq	2aa08 <__assert_fail@plt+0x195d0>
   29d48:	mov	sl, #0
   29d4c:	b	2b7e8 <__assert_fail@plt+0x1a3b0>
   29d50:	ldr	r0, [lr]
   29d54:	ldr	r7, [sp, #24]
   29d58:	movw	r1, #783	; 0x30f
   29d5c:	tst	r0, r1
   29d60:	beq	29da8 <__assert_fail@plt+0x18970>
   29d64:	ldrb	r0, [r8, #88]	; 0x58
   29d68:	tst	r0, #16
   29d6c:	bne	29da4 <__assert_fail@plt+0x1896c>
   29d70:	orr	r1, r0, #16
   29d74:	tst	r0, #8
   29d78:	strb	r1, [r8, #88]	; 0x58
   29d7c:	bne	2bc58 <__assert_fail@plt+0x1a820>
   29d80:	add	r1, pc, #824	; 0x338
   29d84:	tst	r0, #4
   29d88:	vld1.64	{d16-d17}, [r1 :128]
   29d8c:	add	r1, r8, #96	; 0x60
   29d90:	vst1.32	{d16-d17}, [r1]
   29d94:	beq	2bc64 <__assert_fail@plt+0x1a82c>
   29d98:	vmov.i32	q8, #0	; 0x00000000
   29d9c:	add	r0, r8, #112	; 0x70
   29da0:	vst1.32	{d16-d17}, [r0]
   29da4:	ldr	r0, [lr]
   29da8:	cmp	r0, #512	; 0x200
   29dac:	beq	2a87c <__assert_fail@plt+0x19444>
   29db0:	cmp	r0, #256	; 0x100
   29db4:	bne	2a994 <__assert_fail@plt+0x1955c>
   29db8:	mov	r0, #6
   29dbc:	mov	r4, r8
   29dc0:	str	r0, [lr]
   29dc4:	ldr	r1, [r4, #64]!	; 0x40
   29dc8:	cmp	r1, #31
   29dcc:	beq	2bbac <__assert_fail@plt+0x1a774>
   29dd0:	ldr	r0, [r8, #56]	; 0x38
   29dd4:	add	r2, r1, #1
   29dd8:	add	r5, r0, r1, lsl #5
   29ddc:	mov	r0, #0
   29de0:	str	r2, [r4]
   29de4:	str	r0, [r5, #4]!
   29de8:	str	r0, [r5, #4]
   29dec:	str	r0, [r5, #8]
   29df0:	ldm	lr, {r1, r2}
   29df4:	str	r0, [r5, #12]
   29df8:	str	r0, [r5, #16]
   29dfc:	mvn	r0, #0
   29e00:	str	r0, [r5, #28]
   29e04:	bic	r0, r2, #786432	; 0xc0000
   29e08:	str	r1, [r5, #20]
   29e0c:	str	r0, [r5, #24]
   29e10:	mov	r0, #9
   29e14:	b	2a8d8 <__assert_fail@plt+0x194a0>
   29e18:	ldr	r1, [r8, #64]	; 0x40
   29e1c:	cmp	r1, #31
   29e20:	beq	2b9b8 <__assert_fail@plt+0x1a580>
   29e24:	ldr	r0, [r8, #56]	; 0x38
   29e28:	ldr	r3, [sp, #24]
   29e2c:	add	r2, r1, #1
   29e30:	add	r4, r0, r1, lsl #5
   29e34:	mov	r0, #0
   29e38:	str	r2, [r8, #64]	; 0x40
   29e3c:	str	r0, [r4, #4]!
   29e40:	str	r0, [r4, #4]
   29e44:	str	r0, [r4, #8]
   29e48:	ldm	lr, {r1, r2}
   29e4c:	str	r0, [r4, #12]
   29e50:	str	r0, [r4, #16]
   29e54:	mvn	r0, #0
   29e58:	str	r0, [r4, #28]
   29e5c:	bic	r0, r2, #786432	; 0xc0000
   29e60:	str	r1, [r4, #20]
   29e64:	str	r0, [r4, #24]
   29e68:	ldr	r0, [r8, #92]	; 0x5c
   29e6c:	cmp	r0, #2
   29e70:	blt	2a0a4 <__assert_fail@plt+0x18c6c>
   29e74:	ldr	r0, [r3, #40]	; 0x28
   29e78:	ldr	r1, [r3, #56]	; 0x38
   29e7c:	cmp	r1, r0
   29e80:	ble	2a0a4 <__assert_fail@plt+0x18c6c>
   29e84:	mov	r5, #0
   29e88:	mvn	sl, #0
   29e8c:	mov	r9, r6
   29e90:	ldr	r6, [sp, #24]
   29e94:	ldr	r1, [r6, #28]
   29e98:	cmp	r0, r1
   29e9c:	beq	2b7f4 <__assert_fail@plt+0x1a3bc>
   29ea0:	ldr	r1, [r6, #8]
   29ea4:	ldr	r0, [r1, r0, lsl #2]
   29ea8:	cmn	r0, #1
   29eac:	bne	2b7f4 <__assert_fail@plt+0x1a3bc>
   29eb0:	mov	r0, lr
   29eb4:	mov	r1, r6
   29eb8:	mov	r2, r9
   29ebc:	bl	28e6c <__assert_fail@plt+0x17a34>
   29ec0:	ldr	r1, [r6, #40]	; 0x28
   29ec4:	add	r0, r1, r0
   29ec8:	str	r0, [r6, #40]	; 0x28
   29ecc:	ldr	r1, [r8, #64]	; 0x40
   29ed0:	cmp	r1, #31
   29ed4:	beq	29f80 <__assert_fail@plt+0x18b48>
   29ed8:	ldr	r0, [r8, #56]	; 0x38
   29edc:	ldr	lr, [sp, #44]	; 0x2c
   29ee0:	add	r2, r1, #1
   29ee4:	add	r6, r0, r1, lsl #5
   29ee8:	str	r2, [r8, #64]	; 0x40
   29eec:	str	r5, [r6, #4]!
   29ef0:	str	r5, [r6, #4]
   29ef4:	str	r5, [r6, #8]
   29ef8:	ldm	lr, {r0, r1}
   29efc:	str	r5, [r6, #12]
   29f00:	str	r5, [r6, #16]
   29f04:	str	sl, [r6, #28]
   29f08:	str	r0, [r6, #20]
   29f0c:	bic	r0, r1, #786432	; 0xc0000
   29f10:	str	r0, [r6, #24]
   29f14:	ldr	r1, [r8, #64]	; 0x40
   29f18:	cmp	r1, #31
   29f1c:	beq	29fa8 <__assert_fail@plt+0x18b70>
   29f20:	ldr	r0, [r8, #56]	; 0x38
   29f24:	add	r2, r1, #1
   29f28:	add	r7, r0, r1, lsl #5
   29f2c:	mov	r0, #16
   29f30:	cmp	r6, #0
   29f34:	str	r2, [r8, #64]	; 0x40
   29f38:	str	r5, [r7, #4]!
   29f3c:	stmib	r7, {r4, r6}
   29f40:	str	r5, [r7, #12]
   29f44:	str	r5, [r7, #16]
   29f48:	str	r5, [r7, #20]
   29f4c:	str	r0, [r7, #24]
   29f50:	str	sl, [r7, #28]
   29f54:	str	r7, [r4]
   29f58:	beq	2bc44 <__assert_fail@plt+0x1a80c>
   29f5c:	ldr	r1, [sp, #24]
   29f60:	str	r7, [r6]
   29f64:	mov	r4, r7
   29f68:	mov	r6, r9
   29f6c:	ldr	r0, [r1, #40]	; 0x28
   29f70:	ldr	r1, [r1, #56]	; 0x38
   29f74:	cmp	r1, r0
   29f78:	bgt	29e8c <__assert_fail@plt+0x18a54>
   29f7c:	b	2aa84 <__assert_fail@plt+0x1964c>
   29f80:	mov	r0, #996	; 0x3e4
   29f84:	bl	3554c <__assert_fail@plt+0x24114>
   29f88:	cmp	r0, #0
   29f8c:	beq	29fd4 <__assert_fail@plt+0x18b9c>
   29f90:	ldr	r1, [r8, #56]	; 0x38
   29f94:	str	r1, [r0]
   29f98:	mov	r1, #0
   29f9c:	str	r1, [r8, #64]	; 0x40
   29fa0:	str	r0, [r8, #56]	; 0x38
   29fa4:	b	29edc <__assert_fail@plt+0x18aa4>
   29fa8:	mov	r0, #996	; 0x3e4
   29fac:	bl	3554c <__assert_fail@plt+0x24114>
   29fb0:	ldr	lr, [sp, #44]	; 0x2c
   29fb4:	cmp	r0, #0
   29fb8:	beq	2bc44 <__assert_fail@plt+0x1a80c>
   29fbc:	ldr	r1, [r8, #56]	; 0x38
   29fc0:	str	r1, [r0]
   29fc4:	mov	r1, #0
   29fc8:	str	r1, [r8, #64]	; 0x40
   29fcc:	str	r0, [r8, #56]	; 0x38
   29fd0:	b	29f24 <__assert_fail@plt+0x18aec>
   29fd4:	ldr	lr, [sp, #44]	; 0x2c
   29fd8:	mov	r6, #0
   29fdc:	b	29f14 <__assert_fail@plt+0x18adc>
   29fe0:	mov	r0, #5
   29fe4:	b	2a988 <__assert_fail@plt+0x19550>
   29fe8:	mov	sl, #0
   29fec:	mov	r0, #32
   29ff0:	mov	r1, #1
   29ff4:	str	sl, [fp, #-32]	; 0xffffffe0
   29ff8:	bl	354f8 <__assert_fail@plt+0x240c0>
   29ffc:	mov	r4, r0
   2a000:	mov	r0, #40	; 0x28
   2a004:	mov	r1, #1
   2a008:	bl	354f8 <__assert_fail@plt+0x240c0>
   2a00c:	mov	r5, r0
   2a010:	cmp	r4, #0
   2a014:	cmpne	r5, #0
   2a018:	beq	2b9e8 <__assert_fail@plt+0x1a5b0>
   2a01c:	str	r5, [sp, #48]	; 0x30
   2a020:	mov	r2, r6
   2a024:	ldr	r5, [sp, #44]	; 0x2c
   2a028:	ldr	r7, [sp, #24]
   2a02c:	mov	r0, r5
   2a030:	mov	r1, r7
   2a034:	bl	2c1e8 <__assert_fail@plt+0x1adb0>
   2a038:	mov	r3, r0
   2a03c:	ldr	r0, [r5, #4]
   2a040:	mov	r2, r5
   2a044:	uxtb	r1, r0
   2a048:	cmp	r1, #25
   2a04c:	beq	2a0d0 <__assert_fail@plt+0x18c98>
   2a050:	ldr	sl, [sp, #48]	; 0x30
   2a054:	cmp	r1, #2
   2a058:	beq	2b97c <__assert_fail@plt+0x1a544>
   2a05c:	mov	r1, #0
   2a060:	b	2a128 <__assert_fail@plt+0x18cf0>
   2a064:	ldr	r4, [sp, #24]
   2a068:	mov	r0, lr
   2a06c:	mov	r2, r6
   2a070:	mov	r5, lr
   2a074:	mov	r1, r4
   2a078:	bl	28e6c <__assert_fail@plt+0x17a34>
   2a07c:	ldr	r1, [r4, #40]	; 0x28
   2a080:	mov	r2, r5
   2a084:	mov	r3, r6
   2a088:	add	r0, r1, r0
   2a08c:	mov	r1, r7
   2a090:	str	r0, [r4, #40]	; 0x28
   2a094:	mov	r0, r4
   2a098:	sub	sp, fp, #28
   2a09c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a0a0:	b	299f0 <__assert_fail@plt+0x185b8>
   2a0a4:	mov	r7, r4
   2a0a8:	b	2aa84 <__assert_fail@plt+0x1964c>
   2a0ac:	mov	r0, #16
   2a0b0:	b	2a988 <__assert_fail@plt+0x19550>
   2a0b4:	nop	{0}
   2a0b8:	nop	{0}
   2a0bc:	nop	{0}
   2a0c0:	andeq	r0, r0, r0
   2a0c4:	mvnseq	r0, #0
   2a0c8:			; <UNDEFINED> instruction: 0x87fffffe
   2a0cc:			; <UNDEFINED> instruction: 0x07fffffe
   2a0d0:	ldr	sl, [sp, #48]	; 0x30
   2a0d4:	tst	r6, #256	; 0x100
   2a0d8:	mov	r1, r7
   2a0dc:	ldrb	r0, [sl, #16]
   2a0e0:	orr	r0, r0, #1
   2a0e4:	strb	r0, [sl, #16]
   2a0e8:	ldrne	r0, [r4]
   2a0ec:	orrne	r0, r0, #1024	; 0x400
   2a0f0:	strne	r0, [r4]
   2a0f4:	ldr	r0, [r7, #40]	; 0x28
   2a0f8:	add	r0, r0, r3
   2a0fc:	str	r0, [r7, #40]	; 0x28
   2a100:	mov	r0, r2
   2a104:	mov	r2, r6
   2a108:	bl	2c1e8 <__assert_fail@plt+0x1adb0>
   2a10c:	ldr	r2, [sp, #44]	; 0x2c
   2a110:	mov	r3, r0
   2a114:	ldr	r0, [r2, #4]
   2a118:	uxtb	r1, r0
   2a11c:	cmp	r1, #2
   2a120:	beq	2b97c <__assert_fail@plt+0x1a544>
   2a124:	mov	r1, #1
   2a128:	str	r1, [sp, #36]	; 0x24
   2a12c:	uxtb	r1, r0
   2a130:	str	r4, [sp, #52]	; 0x34
   2a134:	str	r6, [sp, #40]	; 0x28
   2a138:	cmp	r1, #21
   2a13c:	ldr	r5, [sp, #40]	; 0x28
   2a140:	moveq	r1, #1
   2a144:	bfieq	r0, r1, #0, #8
   2a148:	mov	r1, r7
   2a14c:	streq	r0, [r2, #4]
   2a150:	mov	r0, #3
   2a154:	str	r0, [fp, #-40]	; 0xffffffd8
   2a158:	sub	r0, fp, #80	; 0x50
   2a15c:	str	r0, [fp, #-36]	; 0xffffffdc
   2a160:	mov	r0, #1
   2a164:	str	r5, [sp]
   2a168:	str	r0, [sp, #4]
   2a16c:	sub	r0, fp, #40	; 0x28
   2a170:	bl	2c360 <__assert_fail@plt+0x1af28>
   2a174:	cmp	r0, #0
   2a178:	bne	2b96c <__assert_fail@plt+0x1a534>
   2a17c:	and	r0, r5, #65536	; 0x10000
   2a180:	str	r0, [sp, #32]
   2a184:	mov	r0, #0
   2a188:	str	r0, [sp, #28]
   2a18c:	mov	r0, #0
   2a190:	str	r0, [sp, #20]
   2a194:	ldr	r6, [sp, #24]
   2a198:	ldr	r7, [sp, #44]	; 0x2c
   2a19c:	mov	r0, r7
   2a1a0:	mov	r1, r6
   2a1a4:	mov	r2, r5
   2a1a8:	bl	2c1e8 <__assert_fail@plt+0x1adb0>
   2a1ac:	ldr	r5, [fp, #-40]	; 0xffffffd8
   2a1b0:	ldr	r4, [sp, #52]	; 0x34
   2a1b4:	mov	r9, r0
   2a1b8:	cmp	r5, #2
   2a1bc:	beq	2a388 <__assert_fail@plt+0x18f50>
   2a1c0:	cmp	r5, #4
   2a1c4:	bne	2a204 <__assert_fail@plt+0x18dcc>
   2a1c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2a1cc:	ldr	r0, [r6, #64]	; 0x40
   2a1d0:	mov	r2, sl
   2a1d4:	sub	r3, fp, #32
   2a1d8:	str	r1, [sp]
   2a1dc:	ldr	r1, [sp, #40]	; 0x28
   2a1e0:	str	r1, [sp, #4]
   2a1e4:	mov	r1, r4
   2a1e8:	bl	2c624 <__assert_fail@plt+0x1b1ec>
   2a1ec:	ldr	r1, [sp, #16]
   2a1f0:	ldr	lr, [sp, #44]	; 0x2c
   2a1f4:	cmp	r0, #0
   2a1f8:	str	r0, [r1]
   2a1fc:	beq	2a3c8 <__assert_fail@plt+0x18f90>
   2a200:	b	2ba3c <__assert_fail@plt+0x1a604>
   2a204:	ldr	lr, [sp, #44]	; 0x2c
   2a208:	mov	r7, r9
   2a20c:	mov	r9, #7
   2a210:	ldrb	r0, [lr, #4]
   2a214:	cmp	r0, #22
   2a218:	beq	2a228 <__assert_fail@plt+0x18df0>
   2a21c:	cmp	r0, #2
   2a220:	bne	2a340 <__assert_fail@plt+0x18f08>
   2a224:	b	2ba2c <__assert_fail@plt+0x1a5f4>
   2a228:	ldr	r4, [sp, #24]
   2a22c:	ldr	r2, [sp, #40]	; 0x28
   2a230:	mov	r6, r7
   2a234:	ldr	r0, [r4, #40]	; 0x28
   2a238:	mov	r1, r4
   2a23c:	add	r0, r0, r7
   2a240:	str	r0, [r4, #40]	; 0x28
   2a244:	add	r0, sp, #56	; 0x38
   2a248:	bl	2c1e8 <__assert_fail@plt+0x1adb0>
   2a24c:	mov	r3, r0
   2a250:	ldrb	r0, [sp, #60]	; 0x3c
   2a254:	cmp	r0, #21
   2a258:	beq	2a328 <__assert_fail@plt+0x18ef0>
   2a25c:	cmp	r0, #2
   2a260:	beq	2ba2c <__assert_fail@plt+0x1a5f4>
   2a264:	ldr	r7, [sp, #40]	; 0x28
   2a268:	mov	r0, #3
   2a26c:	add	r2, sp, #56	; 0x38
   2a270:	str	r0, [fp, #-48]	; 0xffffffd0
   2a274:	add	r0, sp, #64	; 0x40
   2a278:	str	r0, [fp, #-44]	; 0xffffffd4
   2a27c:	mov	r0, #1
   2a280:	str	r0, [sp, #4]
   2a284:	sub	r0, fp, #48	; 0x30
   2a288:	str	r7, [sp]
   2a28c:	ldr	r4, [sp, #24]
   2a290:	mov	r1, r4
   2a294:	bl	2c360 <__assert_fail@plt+0x1af28>
   2a298:	cmp	r0, #0
   2a29c:	bne	2b96c <__assert_fail@plt+0x1a534>
   2a2a0:	ldr	r0, [sp, #44]	; 0x2c
   2a2a4:	mov	r1, r4
   2a2a8:	mov	r2, r7
   2a2ac:	bl	2c1e8 <__assert_fail@plt+0x1adb0>
   2a2b0:	ldr	r4, [fp, #-48]	; 0xffffffd0
   2a2b4:	mov	r9, #11
   2a2b8:	str	r0, [sp, #12]
   2a2bc:	cmp	r4, #2
   2a2c0:	cmpne	r4, #4
   2a2c4:	beq	2ba2c <__assert_fail@plt+0x1a5f4>
   2a2c8:	cmp	r5, #3
   2a2cc:	bne	2a2e0 <__assert_fail@plt+0x18ea8>
   2a2d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2a2d4:	bl	11330 <strlen@plt>
   2a2d8:	cmp	r0, #1
   2a2dc:	bhi	2ba28 <__assert_fail@plt+0x1a5f0>
   2a2e0:	cmp	r4, #3
   2a2e4:	bne	2a2f8 <__assert_fail@plt+0x18ec0>
   2a2e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2a2ec:	bl	11330 <strlen@plt>
   2a2f0:	cmp	r0, #1
   2a2f4:	bhi	2ba28 <__assert_fail@plt+0x1a5f0>
   2a2f8:	ldr	lr, [sp, #44]	; 0x2c
   2a2fc:	cmp	r5, #3
   2a300:	beq	2a47c <__assert_fail@plt+0x19044>
   2a304:	mov	r7, #0
   2a308:	cmp	r5, #0
   2a30c:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   2a310:	cmp	r4, #3
   2a314:	beq	2a48c <__assert_fail@plt+0x19054>
   2a318:	mov	sl, #0
   2a31c:	cmp	r4, #0
   2a320:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   2a324:	b	2a494 <__assert_fail@plt+0x1905c>
   2a328:	ldr	r0, [r4, #40]	; 0x28
   2a32c:	ldr	lr, [sp, #44]	; 0x2c
   2a330:	sub	r0, r0, r6
   2a334:	str	r0, [r4, #40]	; 0x28
   2a338:	mov	r0, #1
   2a33c:	strb	r0, [lr, #4]
   2a340:	cmp	r5, #1
   2a344:	beq	2a420 <__assert_fail@plt+0x18fe8>
   2a348:	ldr	r6, [sp, #24]
   2a34c:	ldr	r4, [sp, #52]	; 0x34
   2a350:	ldr	sl, [sp, #48]	; 0x30
   2a354:	cmp	r5, #2
   2a358:	mov	r9, r7
   2a35c:	beq	2a388 <__assert_fail@plt+0x18f50>
   2a360:	cmp	r5, #3
   2a364:	bne	2a458 <__assert_fail@plt+0x19020>
   2a368:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2a36c:	mov	r0, r7
   2a370:	bl	11330 <strlen@plt>
   2a374:	cmp	r0, #1
   2a378:	mov	r3, #1
   2a37c:	bne	2ba28 <__assert_fail@plt+0x1a5f0>
   2a380:	ldrb	r0, [r7]
   2a384:	b	2a3a4 <__assert_fail@plt+0x18f6c>
   2a388:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2a38c:	mov	r0, r7
   2a390:	bl	11330 <strlen@plt>
   2a394:	cmp	r0, #1
   2a398:	bne	2ba28 <__assert_fail@plt+0x1a5f0>
   2a39c:	ldrb	r0, [r7]
   2a3a0:	mov	r3, #1
   2a3a4:	ubfx	r1, r0, #5, #3
   2a3a8:	and	r0, r0, #31
   2a3ac:	ldr	r2, [r4, r1, lsl #2]
   2a3b0:	orr	r0, r2, r3, lsl r0
   2a3b4:	str	r0, [r4, r1, lsl #2]
   2a3b8:	mov	r1, #0
   2a3bc:	ldr	r0, [sp, #16]
   2a3c0:	ldr	lr, [sp, #44]	; 0x2c
   2a3c4:	str	r1, [r0]
   2a3c8:	ldrb	r0, [lr, #4]
   2a3cc:	cmp	r0, #21
   2a3d0:	beq	2a640 <__assert_fail@plt+0x19208>
   2a3d4:	cmp	r0, #2
   2a3d8:	beq	2b974 <__assert_fail@plt+0x1a53c>
   2a3dc:	mov	r0, #3
   2a3e0:	ldr	r5, [sp, #40]	; 0x28
   2a3e4:	mov	r1, r6
   2a3e8:	mov	r2, lr
   2a3ec:	mov	r3, r9
   2a3f0:	mov	r7, lr
   2a3f4:	str	r0, [fp, #-40]	; 0xffffffd8
   2a3f8:	sub	r0, fp, #80	; 0x50
   2a3fc:	str	r0, [fp, #-36]	; 0xffffffdc
   2a400:	mov	r0, #0
   2a404:	str	r0, [sp, #4]
   2a408:	sub	r0, fp, #40	; 0x28
   2a40c:	str	r5, [sp]
   2a410:	bl	2c360 <__assert_fail@plt+0x1af28>
   2a414:	cmp	r0, #0
   2a418:	beq	2a19c <__assert_fail@plt+0x18d64>
   2a41c:	b	2b96c <__assert_fail@plt+0x1a534>
   2a420:	ldr	sl, [sp, #48]	; 0x30
   2a424:	ldr	r0, [sp, #28]
   2a428:	ldr	r4, [sp, #52]	; 0x34
   2a42c:	ldr	r1, [sl, #20]
   2a430:	cmp	r0, r1
   2a434:	beq	2a5ac <__assert_fail@plt+0x19174>
   2a438:	ldr	r0, [sl]
   2a43c:	ldr	r6, [sp, #24]
   2a440:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2a444:	add	r2, r1, #1
   2a448:	mov	r9, r7
   2a44c:	str	r2, [sl, #20]
   2a450:	str	r3, [r0, r1, lsl #2]
   2a454:	b	2a3c8 <__assert_fail@plt+0x18f90>
   2a458:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   2a45c:	mov	r3, #1
   2a460:	ubfx	r1, r0, #5, #3
   2a464:	ldr	lr, [sp, #44]	; 0x2c
   2a468:	and	r0, r0, #31
   2a46c:	ldr	r2, [r4, r1, lsl #2]
   2a470:	orr	r0, r2, r3, lsl r0
   2a474:	str	r0, [r4, r1, lsl #2]
   2a478:	b	2a3c8 <__assert_fail@plt+0x18f90>
   2a47c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2a480:	ldrb	r7, [r0]
   2a484:	cmp	r4, #3
   2a488:	bne	2a318 <__assert_fail@plt+0x18ee0>
   2a48c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2a490:	ldrb	sl, [r0]
   2a494:	cmp	r5, #3
   2a498:	cmpne	r5, #0
   2a49c:	bne	2a4c0 <__assert_fail@plt+0x19088>
   2a4a0:	ldr	r0, [r8, #92]	; 0x5c
   2a4a4:	cmp	r0, #2
   2a4a8:	blt	2a4c4 <__assert_fail@plt+0x1908c>
   2a4ac:	mov	r0, r7
   2a4b0:	bl	11378 <btowc@plt>
   2a4b4:	ldr	lr, [sp, #44]	; 0x2c
   2a4b8:	mov	r7, r0
   2a4bc:	b	2a4c4 <__assert_fail@plt+0x1908c>
   2a4c0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   2a4c4:	cmp	r4, #3
   2a4c8:	cmpne	r4, #0
   2a4cc:	bne	2a4f0 <__assert_fail@plt+0x190b8>
   2a4d0:	ldr	r0, [r8, #92]	; 0x5c
   2a4d4:	cmp	r0, #2
   2a4d8:	blt	2a4f4 <__assert_fail@plt+0x190bc>
   2a4dc:	mov	r0, sl
   2a4e0:	bl	11378 <btowc@plt>
   2a4e4:	ldr	lr, [sp, #44]	; 0x2c
   2a4e8:	mov	sl, r0
   2a4ec:	b	2a4f4 <__assert_fail@plt+0x190bc>
   2a4f0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   2a4f4:	cmn	r7, #1
   2a4f8:	mov	r9, #3
   2a4fc:	cmnne	sl, #1
   2a500:	beq	2ba2c <__assert_fail@plt+0x1a5f4>
   2a504:	ldr	r0, [sp, #32]
   2a508:	cmp	r0, #0
   2a50c:	beq	2a51c <__assert_fail@plt+0x190e4>
   2a510:	cmp	r7, sl
   2a514:	mov	r9, #11
   2a518:	bhi	2ba2c <__assert_fail@plt+0x1a5f4>
   2a51c:	ldr	r0, [r8, #92]	; 0x5c
   2a520:	cmp	r0, #2
   2a524:	blt	2a560 <__assert_fail@plt+0x19128>
   2a528:	ldr	r4, [sp, #48]	; 0x30
   2a52c:	ldr	r1, [sp, #20]
   2a530:	mov	r5, #1
   2a534:	ldr	r0, [r4, #32]
   2a538:	cmp	r1, r0
   2a53c:	beq	2a5ec <__assert_fail@plt+0x191b4>
   2a540:	ldmib	r4, {r6, r9}
   2a544:	str	r7, [r6, r0, lsl #2]
   2a548:	ldr	r0, [r4, #32]
   2a54c:	add	r1, r0, #1
   2a550:	str	r1, [r4, #32]
   2a554:	ldr	r4, [sp, #52]	; 0x34
   2a558:	str	sl, [r9, r0, lsl #2]
   2a55c:	b	2a568 <__assert_fail@plt+0x19130>
   2a560:	ldr	r4, [sp, #52]	; 0x34
   2a564:	mov	r5, #1
   2a568:	ldr	r6, [sp, #24]
   2a56c:	ldr	r9, [sp, #12]
   2a570:	mov	r0, #0
   2a574:	cmp	r7, r0
   2a578:	cmpls	r0, sl
   2a57c:	ubfxls	r1, r0, #5, #3
   2a580:	andls	r3, r0, #31
   2a584:	add	r0, r0, #1
   2a588:	ldrls	r2, [r4, r1, lsl #2]
   2a58c:	orrls	r2, r2, r5, lsl r3
   2a590:	strls	r2, [r4, r1, lsl #2]
   2a594:	cmp	r0, #256	; 0x100
   2a598:	bne	2a574 <__assert_fail@plt+0x1913c>
   2a59c:	ldr	r0, [sp, #16]
   2a5a0:	ldr	sl, [sp, #48]	; 0x30
   2a5a4:	mov	r1, #0
   2a5a8:	b	2a3c4 <__assert_fail@plt+0x18f8c>
   2a5ac:	ldr	r1, [sp, #28]
   2a5b0:	mov	r0, #1
   2a5b4:	orr	r1, r0, r1, lsl #1
   2a5b8:	ldr	r0, [sl]
   2a5bc:	str	r1, [sp, #28]
   2a5c0:	lsl	r1, r1, #2
   2a5c4:	bl	3557c <__assert_fail@plt+0x24144>
   2a5c8:	cmp	r0, #0
   2a5cc:	beq	2bdf8 <__assert_fail@plt+0x1a9c0>
   2a5d0:	ldr	sl, [sp, #48]	; 0x30
   2a5d4:	ldr	r6, [sp, #24]
   2a5d8:	ldr	lr, [sp, #44]	; 0x2c
   2a5dc:	ldr	r4, [sp, #52]	; 0x34
   2a5e0:	str	r0, [sl]
   2a5e4:	ldr	r1, [sl, #20]
   2a5e8:	b	2a440 <__assert_fail@plt+0x19008>
   2a5ec:	ldr	r0, [sp, #20]
   2a5f0:	orr	r0, r5, r0, lsl #1
   2a5f4:	lsl	r9, r0, #2
   2a5f8:	str	r0, [sp, #20]
   2a5fc:	ldr	r0, [r4, #4]
   2a600:	mov	r1, r9
   2a604:	bl	3557c <__assert_fail@plt+0x24144>
   2a608:	mov	r6, r0
   2a60c:	ldr	r0, [r4, #8]
   2a610:	mov	r1, r9
   2a614:	bl	3557c <__assert_fail@plt+0x24144>
   2a618:	mov	r9, r0
   2a61c:	cmp	r6, #0
   2a620:	cmpne	r9, #0
   2a624:	beq	2be14 <__assert_fail@plt+0x1a9dc>
   2a628:	ldr	r4, [sp, #48]	; 0x30
   2a62c:	mov	r5, #1
   2a630:	stmib	r4, {r6, r9}
   2a634:	ldr	r0, [r4, #32]
   2a638:	ldr	lr, [sp, #44]	; 0x2c
   2a63c:	b	2a544 <__assert_fail@plt+0x1910c>
   2a640:	ldr	r0, [r6, #40]	; 0x28
   2a644:	add	r0, r0, r9
   2a648:	str	r0, [r6, #40]	; 0x28
   2a64c:	ldr	r0, [sp, #36]	; 0x24
   2a650:	cmp	r0, #0
   2a654:	beq	2a674 <__assert_fail@plt+0x1923c>
   2a658:	vld1.32	{d16-d17}, [r4]
   2a65c:	mov	r0, r4
   2a660:	vmvn	q8, q8
   2a664:	vst1.32	{d16-d17}, [r0]!
   2a668:	vld1.32	{d16-d17}, [r0]
   2a66c:	vmvn	q8, q8
   2a670:	vst1.32	{d16-d17}, [r0]
   2a674:	ldr	r0, [r8, #92]	; 0x5c
   2a678:	cmp	r0, #2
   2a67c:	blt	2a6f8 <__assert_fail@plt+0x192c0>
   2a680:	ldm	r4, {r1, r2, r3, r7}
   2a684:	ldr	r6, [r8, #60]	; 0x3c
   2a688:	ldr	r5, [r6]
   2a68c:	and	r1, r1, r5
   2a690:	str	r1, [r4]
   2a694:	ldr	r1, [r6, #4]
   2a698:	and	r1, r2, r1
   2a69c:	str	r1, [r4, #4]
   2a6a0:	ldr	r1, [r6, #8]
   2a6a4:	and	r1, r3, r1
   2a6a8:	str	r1, [r4, #8]
   2a6ac:	ldr	r1, [r6, #12]
   2a6b0:	and	r1, r7, r1
   2a6b4:	str	r1, [r4, #12]
   2a6b8:	ldr	r1, [r4, #16]
   2a6bc:	ldr	r2, [r6, #16]
   2a6c0:	and	r1, r1, r2
   2a6c4:	str	r1, [r4, #16]
   2a6c8:	ldr	r1, [r6, #20]
   2a6cc:	ldr	r2, [r4, #20]
   2a6d0:	and	r1, r2, r1
   2a6d4:	str	r1, [r4, #20]
   2a6d8:	ldr	r1, [r6, #24]
   2a6dc:	ldr	r2, [r4, #24]
   2a6e0:	and	r1, r2, r1
   2a6e4:	str	r1, [r4, #24]
   2a6e8:	ldr	r1, [r6, #28]
   2a6ec:	ldr	r2, [r4, #28]
   2a6f0:	and	r1, r2, r1
   2a6f4:	str	r1, [r4, #28]
   2a6f8:	ldr	r1, [sl, #20]
   2a6fc:	ldr	r6, [sp, #40]	; 0x28
   2a700:	cmp	r1, #0
   2a704:	bne	2a72c <__assert_fail@plt+0x192f4>
   2a708:	ldr	r1, [sl, #24]
   2a70c:	cmp	r1, #0
   2a710:	bne	2a72c <__assert_fail@plt+0x192f4>
   2a714:	ldr	r1, [sl, #28]
   2a718:	cmp	r1, #0
   2a71c:	bne	2a72c <__assert_fail@plt+0x192f4>
   2a720:	ldr	r1, [sl, #32]
   2a724:	cmp	r1, #0
   2a728:	beq	2b8a4 <__assert_fail@plt+0x1a46c>
   2a72c:	ldrb	r0, [r8, #88]	; 0x58
   2a730:	orr	r0, r0, #2
   2a734:	strb	r0, [r8, #88]	; 0x58
   2a738:	ldr	r1, [r8, #64]	; 0x40
   2a73c:	cmp	r1, #31
   2a740:	beq	2ba84 <__assert_fail@plt+0x1a64c>
   2a744:	ldr	r0, [r8, #56]	; 0x38
   2a748:	add	r2, r1, #1
   2a74c:	add	r0, r0, r1, lsl #5
   2a750:	mov	r1, #6
   2a754:	vmov.i32	q8, #0	; 0x00000000
   2a758:	str	r2, [r8, #64]	; 0x40
   2a75c:	mov	r2, #0
   2a760:	add	r9, r0, #4
   2a764:	str	r2, [r0, #20]
   2a768:	str	sl, [r0, #24]
   2a76c:	str	r1, [r0, #28]
   2a770:	mov	r0, #28
   2a774:	mov	r1, r9
   2a778:	vst1.32	{d16-d17}, [r1], r0
   2a77c:	mvn	r0, #0
   2a780:	str	r0, [r1]
   2a784:	ldr	r0, [r4]
   2a788:	cmp	r0, #0
   2a78c:	bne	2a7e4 <__assert_fail@plt+0x193ac>
   2a790:	ldr	r0, [r4, #4]
   2a794:	cmp	r0, #0
   2a798:	bne	2a7e4 <__assert_fail@plt+0x193ac>
   2a79c:	ldr	r0, [r4, #8]
   2a7a0:	cmp	r0, #0
   2a7a4:	bne	2a7e4 <__assert_fail@plt+0x193ac>
   2a7a8:	ldr	r0, [r4, #12]
   2a7ac:	cmp	r0, #0
   2a7b0:	bne	2a7e4 <__assert_fail@plt+0x193ac>
   2a7b4:	ldr	r0, [r4, #16]
   2a7b8:	cmp	r0, #0
   2a7bc:	bne	2a7e4 <__assert_fail@plt+0x193ac>
   2a7c0:	ldr	r0, [r4, #20]
   2a7c4:	cmp	r0, #0
   2a7c8:	bne	2a7e4 <__assert_fail@plt+0x193ac>
   2a7cc:	ldr	r0, [r4, #24]
   2a7d0:	cmp	r0, #0
   2a7d4:	bne	2a7e4 <__assert_fail@plt+0x193ac>
   2a7d8:	ldr	r0, [r4, #28]
   2a7dc:	cmp	r0, #0
   2a7e0:	beq	2bb38 <__assert_fail@plt+0x1a700>
   2a7e4:	ldr	r1, [r8, #64]	; 0x40
   2a7e8:	cmp	r1, #31
   2a7ec:	beq	2bab0 <__assert_fail@plt+0x1a678>
   2a7f0:	ldr	r0, [r8, #56]	; 0x38
   2a7f4:	add	r2, r1, #1
   2a7f8:	add	r0, r0, r1, lsl #5
   2a7fc:	mov	r1, #3
   2a800:	vmov.i32	q8, #0	; 0x00000000
   2a804:	str	r2, [r8, #64]	; 0x40
   2a808:	mov	r2, #0
   2a80c:	add	r5, r0, #4
   2a810:	str	r2, [r0, #20]
   2a814:	str	r4, [r0, #24]
   2a818:	str	r1, [r0, #28]
   2a81c:	mov	r0, #28
   2a820:	mov	r1, r5
   2a824:	vst1.32	{d16-d17}, [r1], r0
   2a828:	mvn	r0, #0
   2a82c:	str	r0, [r1]
   2a830:	ldr	r1, [r8, #64]	; 0x40
   2a834:	cmp	r1, #31
   2a838:	beq	2badc <__assert_fail@plt+0x1a6a4>
   2a83c:	ldr	r0, [r8, #56]	; 0x38
   2a840:	add	r2, r1, #1
   2a844:	add	r7, r0, r1, lsl #5
   2a848:	mov	r0, #0
   2a84c:	mov	r1, #10
   2a850:	str	r2, [r8, #64]	; 0x40
   2a854:	str	r0, [r7, #4]!
   2a858:	mvn	r2, #0
   2a85c:	add	r3, r7, #20
   2a860:	stmib	r7, {r5, r9}
   2a864:	str	r0, [r7, #12]
   2a868:	str	r0, [r7, #16]
   2a86c:	stm	r3, {r0, r1, r2}
   2a870:	str	r7, [r5]
   2a874:	str	r7, [r9]
   2a878:	b	2aa84 <__assert_fail@plt+0x1964c>
   2a87c:	mov	r0, #5
   2a880:	mov	r4, r8
   2a884:	str	r0, [lr]
   2a888:	ldr	r1, [r4, #64]!	; 0x40
   2a88c:	cmp	r1, #31
   2a890:	beq	2bbe0 <__assert_fail@plt+0x1a7a8>
   2a894:	ldr	r0, [r8, #56]	; 0x38
   2a898:	add	r2, r1, #1
   2a89c:	add	r5, r0, r1, lsl #5
   2a8a0:	mov	r0, #0
   2a8a4:	str	r2, [r4]
   2a8a8:	str	r0, [r5, #4]!
   2a8ac:	str	r0, [r5, #4]
   2a8b0:	str	r0, [r5, #8]
   2a8b4:	ldm	lr, {r1, r2}
   2a8b8:	str	r0, [r5, #12]
   2a8bc:	str	r0, [r5, #16]
   2a8c0:	mvn	r0, #0
   2a8c4:	str	r0, [r5, #28]
   2a8c8:	bic	r0, r2, #786432	; 0xc0000
   2a8cc:	str	r1, [r5, #20]
   2a8d0:	str	r0, [r5, #24]
   2a8d4:	mov	r0, #10
   2a8d8:	str	r0, [lr]
   2a8dc:	mov	r9, r6
   2a8e0:	ldr	r1, [r4]
   2a8e4:	cmp	r1, #31
   2a8e8:	beq	2bb4c <__assert_fail@plt+0x1a714>
   2a8ec:	ldr	r0, [r8, #56]	; 0x38
   2a8f0:	add	r2, r1, #1
   2a8f4:	add	r6, r0, r1, lsl #5
   2a8f8:	mov	r0, #0
   2a8fc:	str	r2, [r4]
   2a900:	str	r0, [r6, #4]!
   2a904:	str	r0, [r6, #4]
   2a908:	str	r0, [r6, #8]
   2a90c:	ldm	lr, {r1, r2}
   2a910:	str	r0, [r6, #12]
   2a914:	str	r0, [r6, #16]
   2a918:	mvn	r0, #0
   2a91c:	str	r0, [r6, #28]
   2a920:	bic	r0, r2, #786432	; 0xc0000
   2a924:	str	r1, [r6, #20]
   2a928:	str	r0, [r6, #24]
   2a92c:	ldr	r1, [r4]
   2a930:	cmp	r1, #31
   2a934:	beq	2bb80 <__assert_fail@plt+0x1a748>
   2a938:	ldr	r0, [r8, #56]	; 0x38
   2a93c:	add	r2, r1, #1
   2a940:	cmp	r5, #0
   2a944:	str	r2, [r4]
   2a948:	add	r4, r0, r1, lsl #5
   2a94c:	mov	r0, #0
   2a950:	mov	r1, #10
   2a954:	mvn	r2, #0
   2a958:	str	r0, [r4, #4]!
   2a95c:	add	r3, r4, #20
   2a960:	stmib	r4, {r5, r6}
   2a964:	str	r0, [r4, #12]
   2a968:	str	r0, [r4, #16]
   2a96c:	stm	r3, {r0, r1, r2}
   2a970:	strne	r4, [r5]
   2a974:	cmp	r6, #0
   2a978:	strne	r4, [r6]
   2a97c:	cmpne	r5, #0
   2a980:	bne	2a9e4 <__assert_fail@plt+0x195ac>
   2a984:	mov	r0, #12
   2a988:	ldr	r1, [sp, #16]
   2a98c:	str	r0, [r1]
   2a990:	b	2b7e8 <__assert_fail@plt+0x1a3b0>
   2a994:	ldr	r1, [r8, #64]	; 0x40
   2a998:	mov	r9, r6
   2a99c:	cmp	r1, #31
   2a9a0:	beq	2bc14 <__assert_fail@plt+0x1a7dc>
   2a9a4:	ldr	r0, [r8, #56]	; 0x38
   2a9a8:	add	r2, r1, #1
   2a9ac:	add	r4, r0, r1, lsl #5
   2a9b0:	mov	r0, #0
   2a9b4:	str	r2, [r8, #64]	; 0x40
   2a9b8:	str	r0, [r4, #4]!
   2a9bc:	str	r0, [r4, #4]
   2a9c0:	str	r0, [r4, #8]
   2a9c4:	ldm	lr, {r1, r2}
   2a9c8:	str	r0, [r4, #12]
   2a9cc:	str	r0, [r4, #16]
   2a9d0:	mvn	r0, #0
   2a9d4:	str	r0, [r4, #28]
   2a9d8:	bic	r0, r2, #786432	; 0xc0000
   2a9dc:	str	r1, [r4, #20]
   2a9e0:	str	r0, [r4, #24]
   2a9e4:	mov	r0, lr
   2a9e8:	mov	r1, r7
   2a9ec:	mov	r2, r9
   2a9f0:	bl	28e6c <__assert_fail@plt+0x17a34>
   2a9f4:	ldr	r1, [r7, #40]	; 0x28
   2a9f8:	mov	sl, r4
   2a9fc:	add	r0, r1, r0
   2aa00:	str	r0, [r7, #40]	; 0x28
   2aa04:	b	2b7e8 <__assert_fail@plt+0x1a3b0>
   2aa08:	ldrb	r0, [r6, #4]
   2aa0c:	cmp	r0, #9
   2aa10:	bne	2bd00 <__assert_fail@plt+0x1a8c8>
   2aa14:	mov	lr, r6
   2aa18:	cmp	r4, #8
   2aa1c:	ldrls	r0, [r8, #84]	; 0x54
   2aa20:	movls	r1, #1
   2aa24:	orrls	r0, r0, r1, lsl r4
   2aa28:	strls	r0, [r8, #84]	; 0x54
   2aa2c:	ldr	r1, [r8, #64]	; 0x40
   2aa30:	cmp	r1, #31
   2aa34:	beq	2bb08 <__assert_fail@plt+0x1a6d0>
   2aa38:	ldr	r0, [r8, #56]	; 0x38
   2aa3c:	mov	r6, sl
   2aa40:	add	r0, r0, r1, lsl #5
   2aa44:	add	r2, r1, #1
   2aa48:	mov	r1, #0
   2aa4c:	mvn	r3, #0
   2aa50:	cmp	r9, #0
   2aa54:	mov	r7, r0
   2aa58:	str	r2, [r8, #64]	; 0x40
   2aa5c:	mov	r2, #17
   2aa60:	str	r1, [r7, #4]!
   2aa64:	add	ip, r7, #20
   2aa68:	str	r9, [r7, #4]
   2aa6c:	str	r1, [r7, #8]
   2aa70:	str	r1, [r7, #12]
   2aa74:	str	r1, [r7, #16]
   2aa78:	stm	ip, {r1, r2, r3}
   2aa7c:	strne	r7, [r9]
   2aa80:	str	r4, [r0, #24]
   2aa84:	mov	r4, r6
   2aa88:	ldr	r6, [sp, #24]
   2aa8c:	mov	r0, lr
   2aa90:	mov	r2, r4
   2aa94:	mov	r1, r6
   2aa98:	bl	28e6c <__assert_fail@plt+0x17a34>
   2aa9c:	ldr	r1, [r6, #40]	; 0x28
   2aaa0:	ldr	ip, [sp, #44]	; 0x2c
   2aaa4:	add	r0, r1, r0
   2aaa8:	str	r0, [r6, #40]	; 0x28
   2aaac:	add	r0, r8, #56	; 0x38
   2aab0:	add	r8, r8, #64	; 0x40
   2aab4:	str	r0, [sp, #20]
   2aab8:	and	r0, r4, #2097152	; 0x200000
   2aabc:	str	r0, [sp, #12]
   2aac0:	str	r4, [sp, #40]	; 0x28
   2aac4:	and	r0, r4, #16777216	; 0x1000000
   2aac8:	mov	r4, #0
   2aacc:	str	r0, [sp, #28]
   2aad0:	ldrb	r0, [ip, #4]
   2aad4:	mov	sl, r7
   2aad8:	cmp	r0, #23
   2aadc:	bhi	2b7e8 <__assert_fail@plt+0x1a3b0>
   2aae0:	movw	r2, #2048	; 0x800
   2aae4:	mov	r1, #1
   2aae8:	movt	r2, #140	; 0x8c
   2aaec:	tst	r2, r1, lsl r0
   2aaf0:	beq	2b7e8 <__assert_fail@plt+0x1a3b0>
   2aaf4:	cmp	r0, #23
   2aaf8:	str	sl, [sp, #36]	; 0x24
   2aafc:	bne	2ab10 <__assert_fail@plt+0x196d8>
   2ab00:	ldm	ip, {r5, sl}
   2ab04:	ldr	r7, [r6, #40]	; 0x28
   2ab08:	mvn	r2, #0
   2ab0c:	b	2ab44 <__assert_fail@plt+0x1970c>
   2ab10:	cmp	r0, #19
   2ab14:	sub	r0, r0, #18
   2ab18:	mvn	r5, #0
   2ab1c:	clz	r0, r0
   2ab20:	movweq	r5, #1
   2ab24:	lsr	r9, r0, #5
   2ab28:	b	2ad28 <__assert_fail@plt+0x198f0>
   2ab2c:	add	r0, r9, r9, lsl #2
   2ab30:	add	r0, r1, r0, lsl #1
   2ab34:	movw	r1, #32816	; 0x8030
   2ab38:	sub	r2, r0, #48	; 0x30
   2ab3c:	cmp	r0, r1
   2ab40:	movwgt	r2, #32768	; 0x8000
   2ab44:	mov	r9, r2
   2ab48:	ldr	r2, [sp, #40]	; 0x28
   2ab4c:	mov	r0, ip
   2ab50:	mov	r1, r6
   2ab54:	bl	28e6c <__assert_fail@plt+0x17a34>
   2ab58:	ldr	r1, [r6, #40]	; 0x28
   2ab5c:	ldr	ip, [sp, #44]	; 0x2c
   2ab60:	add	r0, r1, r0
   2ab64:	str	r0, [r6, #40]	; 0x28
   2ab68:	ldrb	r0, [ip, #4]
   2ab6c:	ldrb	r1, [ip]
   2ab70:	cmp	r0, #24
   2ab74:	beq	2abbc <__assert_fail@plt+0x19784>
   2ab78:	cmp	r0, #2
   2ab7c:	beq	2ac0c <__assert_fail@plt+0x197d4>
   2ab80:	cmp	r1, #44	; 0x2c
   2ab84:	beq	2abbc <__assert_fail@plt+0x19784>
   2ab88:	mvn	r2, #1
   2ab8c:	cmp	r1, #48	; 0x30
   2ab90:	bcc	2ab44 <__assert_fail@plt+0x1970c>
   2ab94:	cmp	r0, #1
   2ab98:	bne	2ab44 <__assert_fail@plt+0x1970c>
   2ab9c:	cmn	r9, #2
   2aba0:	beq	2ab44 <__assert_fail@plt+0x1970c>
   2aba4:	cmp	r1, #57	; 0x39
   2aba8:	bhi	2ab44 <__assert_fail@plt+0x1970c>
   2abac:	cmn	r9, #1
   2abb0:	bne	2ab2c <__assert_fail@plt+0x196f4>
   2abb4:	sub	r2, r1, #48	; 0x30
   2abb8:	b	2ab44 <__assert_fail@plt+0x1970c>
   2abbc:	cmn	r9, #1
   2abc0:	bne	2abec <__assert_fail@plt+0x197b4>
   2abc4:	cmp	r1, #44	; 0x2c
   2abc8:	moveq	r9, #0
   2abcc:	cmpeq	r0, #1
   2abd0:	beq	2ac34 <__assert_fail@plt+0x197fc>
   2abd4:	ldr	r0, [sp, #16]
   2abd8:	mov	r1, #10
   2abdc:	str	r1, [r0]
   2abe0:	ldr	sl, [sp, #36]	; 0x24
   2abe4:	mov	r7, #0
   2abe8:	b	2b6f8 <__assert_fail@plt+0x1a2c0>
   2abec:	cmn	r9, #2
   2abf0:	mov	r2, r9
   2abf4:	beq	2ac0c <__assert_fail@plt+0x197d4>
   2abf8:	cmp	r0, #24
   2abfc:	beq	2ac40 <__assert_fail@plt+0x19808>
   2ac00:	cmp	r0, #1
   2ac04:	cmpeq	r1, #44	; 0x2c
   2ac08:	beq	2ac34 <__assert_fail@plt+0x197fc>
   2ac0c:	ldr	r1, [sp, #12]
   2ac10:	cmp	r1, #0
   2ac14:	beq	2b2d4 <__assert_fail@plt+0x19e9c>
   2ac18:	mov	r0, #1
   2ac1c:	str	r7, [r6, #40]	; 0x28
   2ac20:	bfi	sl, r0, #0, #8
   2ac24:	stm	ip, {r5, sl}
   2ac28:	ldr	sl, [sp, #36]	; 0x24
   2ac2c:	mov	r7, sl
   2ac30:	b	2b6f8 <__assert_fail@plt+0x1a2c0>
   2ac34:	mvn	r2, #0
   2ac38:	str	sl, [sp, #52]	; 0x34
   2ac3c:	b	2ac6c <__assert_fail@plt+0x19834>
   2ac40:	ldr	sl, [sp, #36]	; 0x24
   2ac44:	mov	r5, r9
   2ac48:	cmp	r0, #24
   2ac4c:	beq	2ad14 <__assert_fail@plt+0x198dc>
   2ac50:	b	2b2b4 <__assert_fail@plt+0x19e7c>
   2ac54:	add	r0, sl, sl, lsl #2
   2ac58:	add	r0, r1, r0, lsl #1
   2ac5c:	movw	r1, #32816	; 0x8030
   2ac60:	sub	r2, r0, #48	; 0x30
   2ac64:	cmp	r0, r1
   2ac68:	movwgt	r2, #32768	; 0x8000
   2ac6c:	mov	sl, r2
   2ac70:	ldr	r2, [sp, #40]	; 0x28
   2ac74:	mov	r0, ip
   2ac78:	mov	r1, r6
   2ac7c:	bl	28e6c <__assert_fail@plt+0x17a34>
   2ac80:	ldr	r1, [r6, #40]	; 0x28
   2ac84:	ldr	ip, [sp, #44]	; 0x2c
   2ac88:	add	r0, r1, r0
   2ac8c:	str	r0, [r6, #40]	; 0x28
   2ac90:	ldrb	r0, [ip, #4]
   2ac94:	cmp	r0, #24
   2ac98:	beq	2ace4 <__assert_fail@plt+0x198ac>
   2ac9c:	cmp	r0, #2
   2aca0:	beq	2b27c <__assert_fail@plt+0x19e44>
   2aca4:	ldrb	r1, [ip]
   2aca8:	cmp	r1, #44	; 0x2c
   2acac:	beq	2ace4 <__assert_fail@plt+0x198ac>
   2acb0:	mvn	r2, #1
   2acb4:	cmp	r1, #48	; 0x30
   2acb8:	bcc	2ac6c <__assert_fail@plt+0x19834>
   2acbc:	cmp	r0, #1
   2acc0:	bne	2ac6c <__assert_fail@plt+0x19834>
   2acc4:	cmn	sl, #2
   2acc8:	beq	2ac6c <__assert_fail@plt+0x19834>
   2accc:	cmp	r1, #57	; 0x39
   2acd0:	bhi	2ac6c <__assert_fail@plt+0x19834>
   2acd4:	cmn	sl, #1
   2acd8:	bne	2ac54 <__assert_fail@plt+0x1981c>
   2acdc:	sub	r2, r1, #48	; 0x30
   2ace0:	b	2ac6c <__assert_fail@plt+0x19834>
   2ace4:	cmn	sl, #2
   2ace8:	beq	2b27c <__assert_fail@plt+0x19e44>
   2acec:	cmn	sl, #1
   2acf0:	mov	r5, sl
   2acf4:	beq	2ad08 <__assert_fail@plt+0x198d0>
   2acf8:	ldr	sl, [sp, #36]	; 0x24
   2acfc:	cmp	r9, r5
   2ad00:	ble	2ad0c <__assert_fail@plt+0x198d4>
   2ad04:	b	2b2b4 <__assert_fail@plt+0x19e7c>
   2ad08:	ldr	sl, [sp, #36]	; 0x24
   2ad0c:	cmp	r0, #24
   2ad10:	bne	2b2b4 <__assert_fail@plt+0x19e7c>
   2ad14:	cmn	r5, #1
   2ad18:	mov	r0, r5
   2ad1c:	moveq	r0, r9
   2ad20:	cmp	r0, #32768	; 0x8000
   2ad24:	bge	2b2c0 <__assert_fail@plt+0x19e88>
   2ad28:	ldr	r2, [sp, #40]	; 0x28
   2ad2c:	mov	r0, ip
   2ad30:	mov	r1, r6
   2ad34:	bl	28e6c <__assert_fail@plt+0x17a34>
   2ad38:	ldr	r1, [r6, #40]	; 0x28
   2ad3c:	mov	r7, #0
   2ad40:	cmp	sl, #0
   2ad44:	add	r0, r1, r0
   2ad48:	str	r0, [r6, #40]	; 0x28
   2ad4c:	beq	2b178 <__assert_fail@plt+0x19d40>
   2ad50:	ldr	lr, [sp, #20]
   2ad54:	orrs	r0, r5, r9
   2ad58:	beq	2b180 <__assert_fail@plt+0x19d48>
   2ad5c:	mov	r0, #0
   2ad60:	cmp	r9, #1
   2ad64:	mov	r7, sl
   2ad68:	str	r0, [sp, #32]
   2ad6c:	ldr	ip, [sp, #44]	; 0x2c
   2ad70:	str	r5, [sp, #48]	; 0x30
   2ad74:	bge	2b228 <__assert_fail@plt+0x19df0>
   2ad78:	ldrb	r0, [r7, #24]
   2ad7c:	cmp	r0, #17
   2ad80:	bne	2adf0 <__assert_fail@plt+0x199b8>
   2ad84:	ldr	r0, [r7, #20]
   2ad88:	mov	r2, r7
   2ad8c:	mov	r1, r2
   2ad90:	ldr	r2, [r2, #4]
   2ad94:	cmp	r2, #0
   2ad98:	bne	2ad8c <__assert_fail@plt+0x19954>
   2ad9c:	ldr	r2, [r1, #8]
   2ada0:	cmp	r2, #0
   2ada4:	bne	2ad8c <__assert_fail@plt+0x19954>
   2ada8:	ldr	r2, [r1, #24]
   2adac:	uxtb	r3, r2
   2adb0:	cmp	r3, #17
   2adb4:	ldreq	r3, [r1, #20]
   2adb8:	cmpeq	r3, r0
   2adbc:	orreq	r2, r2, #524288	; 0x80000
   2adc0:	streq	r2, [r1, #24]
   2adc4:	ldr	r3, [r1]
   2adc8:	cmp	r3, #0
   2adcc:	beq	2adf0 <__assert_fail@plt+0x199b8>
   2add0:	ldr	r2, [r3, #8]
   2add4:	cmp	r2, r1
   2add8:	mov	r1, r3
   2addc:	beq	2ada8 <__assert_fail@plt+0x19970>
   2ade0:	cmp	r2, #0
   2ade4:	mov	r1, r3
   2ade8:	beq	2ada8 <__assert_fail@plt+0x19970>
   2adec:	b	2ad8c <__assert_fail@plt+0x19954>
   2adf0:	ldr	r1, [r8]
   2adf4:	cmn	r5, #1
   2adf8:	mov	r6, #10
   2adfc:	movweq	r6, #11
   2ae00:	cmp	r1, #31
   2ae04:	beq	2b248 <__assert_fail@plt+0x19e10>
   2ae08:	ldr	r0, [lr]
   2ae0c:	add	r2, r1, #1
   2ae10:	add	sl, r0, r1, lsl #5
   2ae14:	mvn	r0, #0
   2ae18:	str	r2, [r8]
   2ae1c:	str	r4, [sl, #4]!
   2ae20:	str	r7, [sl, #4]
   2ae24:	str	r4, [sl, #8]
   2ae28:	str	r4, [sl, #12]
   2ae2c:	str	r4, [sl, #16]
   2ae30:	str	r4, [sl, #20]
   2ae34:	str	r6, [sl, #24]
   2ae38:	str	r0, [sl, #28]
   2ae3c:	add	r0, r9, #2
   2ae40:	str	sl, [r7]
   2ae44:	cmp	r0, r5
   2ae48:	bgt	2b10c <__assert_fail@plt+0x19cd4>
   2ae4c:	mov	r6, sl
   2ae50:	b	2ae60 <__assert_fail@plt+0x19a28>
   2ae54:	ldr	sl, [r7]
   2ae58:	mov	r0, r1
   2ae5c:	add	r0, r1, #1
   2ae60:	ldr	r1, [r8]
   2ae64:	str	r0, [sp, #52]	; 0x34
   2ae68:	cmp	r1, #31
   2ae6c:	beq	2b058 <__assert_fail@plt+0x19c20>
   2ae70:	ldr	r0, [lr]
   2ae74:	add	r3, r1, #1
   2ae78:	add	r9, r0, r1, lsl #5
   2ae7c:	add	r2, r7, #20
   2ae80:	sub	r5, fp, #80	; 0x50
   2ae84:	str	r3, [r8]
   2ae88:	str	r4, [r9, #4]!
   2ae8c:	str	r4, [r9, #4]
   2ae90:	str	r4, [r9, #8]
   2ae94:	ldm	r2, {r0, r1}
   2ae98:	mvn	r2, #0
   2ae9c:	str	r4, [r9, #12]
   2aea0:	str	r4, [r9, #16]
   2aea4:	str	r2, [r9, #28]
   2aea8:	str	r0, [r9, #20]
   2aeac:	bic	r0, r1, #786432	; 0xc0000
   2aeb0:	str	r0, [r9, #24]
   2aeb4:	mov	r0, r9
   2aeb8:	str	r9, [fp, #-80]	; 0xffffffb0
   2aebc:	b	2af00 <__assert_fail@plt+0x19ac8>
   2aec0:	add	r3, r1, #1
   2aec4:	add	r0, r0, r1, lsl #5
   2aec8:	add	r2, r7, #20
   2aecc:	str	r3, [r8]
   2aed0:	str	r4, [r0, #4]!
   2aed4:	mvn	r3, #0
   2aed8:	str	r4, [r0, #4]
   2aedc:	str	r4, [r0, #8]
   2aee0:	ldm	r2, {r1, r2}
   2aee4:	str	r4, [r0, #12]
   2aee8:	str	r4, [r0, #16]
   2aeec:	str	r3, [r0, #28]
   2aef0:	str	r1, [r0, #20]
   2aef4:	bic	r1, r2, #786432	; 0xc0000
   2aef8:	str	r1, [r0, #24]
   2aefc:	str	r0, [r5]
   2af00:	str	sl, [r0]
   2af04:	ldr	r0, [r5]
   2af08:	ldr	r1, [r0, #24]
   2af0c:	orr	r1, r1, #262144	; 0x40000
   2af10:	str	r1, [r0, #24]
   2af14:	ldr	r0, [r7, #4]
   2af18:	ldr	sl, [r5]
   2af1c:	cmp	r0, #0
   2af20:	beq	2af30 <__assert_fail@plt+0x19af8>
   2af24:	add	r5, sl, #4
   2af28:	mov	r7, r0
   2af2c:	b	2af64 <__assert_fail@plt+0x19b2c>
   2af30:	mov	r1, #0
   2af34:	mov	r0, r7
   2af38:	ldr	r7, [r7, #8]
   2af3c:	cmp	r7, r1
   2af40:	cmpne	r7, #0
   2af44:	bne	2af60 <__assert_fail@plt+0x19b28>
   2af48:	ldr	r7, [r0]
   2af4c:	ldr	sl, [sl]
   2af50:	mov	r1, r0
   2af54:	cmp	r7, #0
   2af58:	bne	2af34 <__assert_fail@plt+0x19afc>
   2af5c:	b	2afa8 <__assert_fail@plt+0x19b70>
   2af60:	add	r5, sl, #8
   2af64:	ldr	r1, [r8]
   2af68:	cmp	r1, #31
   2af6c:	beq	2af78 <__assert_fail@plt+0x19b40>
   2af70:	ldr	r0, [lr]
   2af74:	b	2aec0 <__assert_fail@plt+0x19a88>
   2af78:	mov	r0, #996	; 0x3e4
   2af7c:	bl	3554c <__assert_fail@plt+0x24114>
   2af80:	cmp	r0, #0
   2af84:	beq	2b0f4 <__assert_fail@plt+0x19cbc>
   2af88:	ldr	lr, [sp, #20]
   2af8c:	ldr	ip, [sp, #44]	; 0x2c
   2af90:	ldr	r1, [lr]
   2af94:	str	r1, [r0]
   2af98:	mov	r1, #0
   2af9c:	str	r0, [lr]
   2afa0:	str	r1, [r8]
   2afa4:	b	2aec0 <__assert_fail@plt+0x19a88>
   2afa8:	mov	r7, r9
   2afac:	ldr	r1, [r8]
   2afb0:	cmp	r1, #31
   2afb4:	beq	2b088 <__assert_fail@plt+0x19c50>
   2afb8:	ldr	r0, [lr]
   2afbc:	add	r2, r1, #1
   2afc0:	add	r5, r0, r1, lsl #5
   2afc4:	mov	r0, #16
   2afc8:	cmp	r7, #0
   2afcc:	str	r2, [r8]
   2afd0:	str	r4, [r5, #4]!
   2afd4:	stmib	r5, {r6, r7}
   2afd8:	str	r4, [r5, #12]
   2afdc:	str	r4, [r5, #16]
   2afe0:	str	r4, [r5, #20]
   2afe4:	str	r0, [r5, #24]
   2afe8:	mvn	r0, #0
   2afec:	str	r0, [r5, #28]
   2aff0:	str	r5, [r6]
   2aff4:	beq	2b6e0 <__assert_fail@plt+0x1a2a8>
   2aff8:	str	r5, [r7]
   2affc:	ldr	r1, [r8]
   2b000:	cmp	r1, #31
   2b004:	beq	2b0b8 <__assert_fail@plt+0x19c80>
   2b008:	ldr	r0, [lr]
   2b00c:	add	r2, r1, #1
   2b010:	add	r6, r0, r1, lsl #5
   2b014:	mov	r0, #10
   2b018:	ldr	r1, [sp, #52]	; 0x34
   2b01c:	str	r2, [r8]
   2b020:	str	r4, [r6, #4]!
   2b024:	str	r5, [r6, #4]
   2b028:	str	r4, [r6, #8]
   2b02c:	str	r4, [r6, #12]
   2b030:	str	r4, [r6, #16]
   2b034:	str	r4, [r6, #20]
   2b038:	str	r0, [r6, #24]
   2b03c:	mvn	r0, #0
   2b040:	str	r0, [r6, #28]
   2b044:	ldr	r0, [sp, #48]	; 0x30
   2b048:	str	r6, [r5]
   2b04c:	cmp	r1, r0
   2b050:	blt	2ae54 <__assert_fail@plt+0x19a1c>
   2b054:	b	2b108 <__assert_fail@plt+0x19cd0>
   2b058:	mov	r0, #996	; 0x3e4
   2b05c:	bl	3554c <__assert_fail@plt+0x24114>
   2b060:	cmp	r0, #0
   2b064:	beq	2b0e8 <__assert_fail@plt+0x19cb0>
   2b068:	ldr	lr, [sp, #20]
   2b06c:	ldr	ip, [sp, #44]	; 0x2c
   2b070:	ldr	r1, [lr]
   2b074:	str	r1, [r0]
   2b078:	mov	r1, #0
   2b07c:	str	r0, [lr]
   2b080:	str	r1, [r8]
   2b084:	b	2ae74 <__assert_fail@plt+0x19a3c>
   2b088:	mov	r0, #996	; 0x3e4
   2b08c:	bl	3554c <__assert_fail@plt+0x24114>
   2b090:	ldr	lr, [sp, #20]
   2b094:	ldr	ip, [sp, #44]	; 0x2c
   2b098:	cmp	r0, #0
   2b09c:	beq	2b6e0 <__assert_fail@plt+0x1a2a8>
   2b0a0:	ldr	r1, [lr]
   2b0a4:	str	r1, [r0]
   2b0a8:	mov	r1, #0
   2b0ac:	str	r0, [lr]
   2b0b0:	str	r1, [r8]
   2b0b4:	b	2afbc <__assert_fail@plt+0x19b84>
   2b0b8:	mov	r0, #996	; 0x3e4
   2b0bc:	bl	3554c <__assert_fail@plt+0x24114>
   2b0c0:	ldr	lr, [sp, #20]
   2b0c4:	ldr	ip, [sp, #44]	; 0x2c
   2b0c8:	cmp	r0, #0
   2b0cc:	beq	2b6e0 <__assert_fail@plt+0x1a2a8>
   2b0d0:	ldr	r1, [lr]
   2b0d4:	str	r1, [r0]
   2b0d8:	mov	r1, #0
   2b0dc:	str	r0, [lr]
   2b0e0:	str	r1, [r8]
   2b0e4:	b	2b00c <__assert_fail@plt+0x19bd4>
   2b0e8:	mov	r7, #0
   2b0ec:	str	r7, [fp, #-80]	; 0xffffffb0
   2b0f0:	b	2b0fc <__assert_fail@plt+0x19cc4>
   2b0f4:	mov	r7, #0
   2b0f8:	str	r7, [r5]
   2b0fc:	ldr	ip, [sp, #44]	; 0x2c
   2b100:	ldr	lr, [sp, #20]
   2b104:	b	2afac <__assert_fail@plt+0x19b74>
   2b108:	mov	sl, r6
   2b10c:	ldr	r5, [sp, #32]
   2b110:	ldr	r6, [sp, #24]
   2b114:	cmp	r5, #0
   2b118:	beq	2b16c <__assert_fail@plt+0x19d34>
   2b11c:	ldr	r1, [r8]
   2b120:	cmp	r1, #31
   2b124:	beq	2b284 <__assert_fail@plt+0x19e4c>
   2b128:	ldr	r0, [lr]
   2b12c:	add	r2, r1, #1
   2b130:	add	r7, r0, r1, lsl #5
   2b134:	mov	r0, #0
   2b138:	mov	r1, #16
   2b13c:	str	r2, [r8]
   2b140:	str	r0, [r7, #4]!
   2b144:	stmib	r7, {r5, sl}
   2b148:	str	r0, [r7, #12]
   2b14c:	str	r0, [r7, #16]
   2b150:	str	r0, [r7, #20]
   2b154:	str	r1, [r7, #24]
   2b158:	mvn	r1, #0
   2b15c:	str	r1, [r7, #28]
   2b160:	str	r7, [r5]
   2b164:	str	r7, [sl]
   2b168:	b	2b718 <__assert_fail@plt+0x1a2e0>
   2b16c:	mov	r0, #0
   2b170:	mov	r7, sl
   2b174:	b	2b718 <__assert_fail@plt+0x1a2e0>
   2b178:	ldr	ip, [sp, #44]	; 0x2c
   2b17c:	b	2b6f8 <__assert_fail@plt+0x1a2c0>
   2b180:	ldr	ip, [sp, #44]	; 0x2c
   2b184:	mov	r0, sl
   2b188:	mov	r5, r0
   2b18c:	ldr	r0, [r0, #4]
   2b190:	cmp	r0, #0
   2b194:	bne	2b188 <__assert_fail@plt+0x19d50>
   2b198:	ldr	r0, [r5, #8]
   2b19c:	cmp	r0, #0
   2b1a0:	bne	2b188 <__assert_fail@plt+0x19d50>
   2b1a4:	ldr	r0, [r5, #24]
   2b1a8:	movw	r1, #255	; 0xff
   2b1ac:	movt	r1, #4
   2b1b0:	and	r0, r0, r1
   2b1b4:	cmp	r0, #3
   2b1b8:	beq	2b1f0 <__assert_fail@plt+0x19db8>
   2b1bc:	cmp	r0, #6
   2b1c0:	bne	2b1fc <__assert_fail@plt+0x19dc4>
   2b1c4:	ldr	r9, [r5, #20]
   2b1c8:	ldr	r0, [r9]
   2b1cc:	bl	1386c <__assert_fail@plt+0x2434>
   2b1d0:	ldr	r0, [r9, #4]
   2b1d4:	bl	1386c <__assert_fail@plt+0x2434>
   2b1d8:	ldr	r0, [r9, #8]
   2b1dc:	bl	1386c <__assert_fail@plt+0x2434>
   2b1e0:	ldr	r0, [r9, #12]
   2b1e4:	bl	1386c <__assert_fail@plt+0x2434>
   2b1e8:	mov	r0, r9
   2b1ec:	b	2b1f4 <__assert_fail@plt+0x19dbc>
   2b1f0:	ldr	r0, [r5, #20]
   2b1f4:	bl	1386c <__assert_fail@plt+0x2434>
   2b1f8:	ldr	ip, [sp, #44]	; 0x2c
   2b1fc:	ldr	r1, [r5]
   2b200:	cmp	r1, #0
   2b204:	beq	2b6f8 <__assert_fail@plt+0x1a2c0>
   2b208:	ldr	r0, [r1, #8]
   2b20c:	cmp	r0, r5
   2b210:	mov	r5, r1
   2b214:	beq	2b1a4 <__assert_fail@plt+0x19d6c>
   2b218:	cmp	r0, #0
   2b21c:	mov	r5, r1
   2b220:	beq	2b1a4 <__assert_fail@plt+0x19d6c>
   2b224:	b	2b188 <__assert_fail@plt+0x19d50>
   2b228:	mov	r5, sl
   2b22c:	str	r9, [sp, #8]
   2b230:	beq	2b52c <__assert_fail@plt+0x1a0f4>
   2b234:	ldr	r9, [sp, #36]	; 0x24
   2b238:	mov	r0, #2
   2b23c:	ldr	r5, [r9]
   2b240:	mov	sl, r9
   2b244:	b	2b374 <__assert_fail@plt+0x19f3c>
   2b248:	mov	r0, #996	; 0x3e4
   2b24c:	bl	3554c <__assert_fail@plt+0x24114>
   2b250:	ldr	lr, [sp, #20]
   2b254:	ldr	ip, [sp, #44]	; 0x2c
   2b258:	cmp	r0, #0
   2b25c:	beq	2b6e0 <__assert_fail@plt+0x1a2a8>
   2b260:	ldr	r1, [lr]
   2b264:	ldr	r5, [sp, #48]	; 0x30
   2b268:	str	r1, [r0]
   2b26c:	mov	r1, #0
   2b270:	str	r0, [lr]
   2b274:	str	r1, [r8]
   2b278:	b	2ae0c <__assert_fail@plt+0x199d4>
   2b27c:	ldr	sl, [sp, #52]	; 0x34
   2b280:	b	2ac0c <__assert_fail@plt+0x197d4>
   2b284:	mov	r0, #996	; 0x3e4
   2b288:	bl	3554c <__assert_fail@plt+0x24114>
   2b28c:	cmp	r0, #0
   2b290:	beq	2b2ec <__assert_fail@plt+0x19eb4>
   2b294:	ldr	r2, [sp, #20]
   2b298:	ldr	ip, [sp, #44]	; 0x2c
   2b29c:	ldr	r1, [r2]
   2b2a0:	str	r1, [r0]
   2b2a4:	mov	r1, #0
   2b2a8:	str	r0, [r2]
   2b2ac:	str	r1, [r8]
   2b2b0:	b	2b12c <__assert_fail@plt+0x19cf4>
   2b2b4:	ldr	r0, [sp, #16]
   2b2b8:	mov	r1, #10
   2b2bc:	b	2b2c8 <__assert_fail@plt+0x19e90>
   2b2c0:	ldr	r0, [sp, #16]
   2b2c4:	mov	r1, #15
   2b2c8:	str	r1, [r0]
   2b2cc:	mov	r7, #0
   2b2d0:	b	2b6f8 <__assert_fail@plt+0x1a2c0>
   2b2d4:	ldr	r1, [sp, #16]
   2b2d8:	cmp	r0, #2
   2b2dc:	mov	r0, #10
   2b2e0:	movweq	r0, #9
   2b2e4:	str	r0, [r1]
   2b2e8:	b	2abe0 <__assert_fail@plt+0x197a8>
   2b2ec:	ldr	ip, [sp, #44]	; 0x2c
   2b2f0:	b	2abe0 <__assert_fail@plt+0x197a8>
   2b2f4:	mov	r0, #996	; 0x3e4
   2b2f8:	bl	3554c <__assert_fail@plt+0x24114>
   2b2fc:	cmp	r0, #0
   2b300:	beq	2b354 <__assert_fail@plt+0x19f1c>
   2b304:	ldr	lr, [sp, #20]
   2b308:	ldr	ip, [sp, #44]	; 0x2c
   2b30c:	ldr	r1, [lr]
   2b310:	str	r1, [r0]
   2b314:	mov	r1, #0
   2b318:	str	r0, [lr]
   2b31c:	str	r1, [r8]
   2b320:	b	2b388 <__assert_fail@plt+0x19f50>
   2b324:	mov	r0, #996	; 0x3e4
   2b328:	bl	3554c <__assert_fail@plt+0x24114>
   2b32c:	ldr	lr, [sp, #20]
   2b330:	ldr	ip, [sp, #44]	; 0x2c
   2b334:	cmp	r0, #0
   2b338:	beq	2b6e0 <__assert_fail@plt+0x1a2a8>
   2b33c:	ldr	r1, [lr]
   2b340:	str	r1, [r0]
   2b344:	mov	r1, #0
   2b348:	str	r0, [lr]
   2b34c:	str	r1, [r8]
   2b350:	b	2b4d0 <__assert_fail@plt+0x1a098>
   2b354:	mov	sl, #0
   2b358:	str	sl, [fp, #-80]	; 0xffffffb0
   2b35c:	b	2b368 <__assert_fail@plt+0x19f30>
   2b360:	mov	sl, #0
   2b364:	str	sl, [r6]
   2b368:	ldr	ip, [sp, #44]	; 0x2c
   2b36c:	ldr	lr, [sp, #20]
   2b370:	b	2b4c0 <__assert_fail@plt+0x1a088>
   2b374:	ldr	r1, [r8]
   2b378:	str	r0, [sp, #52]	; 0x34
   2b37c:	cmp	r1, #31
   2b380:	beq	2b2f4 <__assert_fail@plt+0x19ebc>
   2b384:	ldr	r0, [lr]
   2b388:	add	r3, r1, #1
   2b38c:	add	r7, r0, r1, lsl #5
   2b390:	add	r2, sl, #20
   2b394:	sub	r6, fp, #80	; 0x50
   2b398:	str	r3, [r8]
   2b39c:	str	r4, [r7, #4]!
   2b3a0:	str	r4, [r7, #4]
   2b3a4:	str	r4, [r7, #8]
   2b3a8:	ldm	r2, {r0, r1}
   2b3ac:	mvn	r2, #0
   2b3b0:	str	r4, [r7, #12]
   2b3b4:	str	r4, [r7, #16]
   2b3b8:	str	r2, [r7, #28]
   2b3bc:	str	r0, [r7, #20]
   2b3c0:	bic	r0, r1, #786432	; 0xc0000
   2b3c4:	str	r0, [r7, #24]
   2b3c8:	mov	r0, r7
   2b3cc:	str	r7, [fp, #-80]	; 0xffffffb0
   2b3d0:	b	2b414 <__assert_fail@plt+0x19fdc>
   2b3d4:	add	r3, r1, #1
   2b3d8:	add	r0, r0, r1, lsl #5
   2b3dc:	add	r2, sl, #20
   2b3e0:	str	r3, [r8]
   2b3e4:	str	r4, [r0, #4]!
   2b3e8:	mvn	r3, #0
   2b3ec:	str	r4, [r0, #4]
   2b3f0:	str	r4, [r0, #8]
   2b3f4:	ldm	r2, {r1, r2}
   2b3f8:	str	r4, [r0, #12]
   2b3fc:	str	r4, [r0, #16]
   2b400:	str	r3, [r0, #28]
   2b404:	str	r1, [r0, #20]
   2b408:	bic	r1, r2, #786432	; 0xc0000
   2b40c:	str	r1, [r0, #24]
   2b410:	str	r0, [r6]
   2b414:	str	r5, [r0]
   2b418:	ldr	r0, [r6]
   2b41c:	ldr	r1, [r0, #24]
   2b420:	orr	r1, r1, #262144	; 0x40000
   2b424:	str	r1, [r0, #24]
   2b428:	ldr	r0, [sl, #4]
   2b42c:	ldr	r5, [r6]
   2b430:	cmp	r0, #0
   2b434:	beq	2b444 <__assert_fail@plt+0x1a00c>
   2b438:	add	r6, r5, #4
   2b43c:	mov	sl, r0
   2b440:	b	2b478 <__assert_fail@plt+0x1a040>
   2b444:	mov	r1, #0
   2b448:	mov	r0, sl
   2b44c:	ldr	sl, [sl, #8]
   2b450:	cmp	sl, r1
   2b454:	cmpne	sl, #0
   2b458:	bne	2b474 <__assert_fail@plt+0x1a03c>
   2b45c:	ldr	sl, [r0]
   2b460:	ldr	r5, [r5]
   2b464:	mov	r1, r0
   2b468:	cmp	sl, #0
   2b46c:	bne	2b448 <__assert_fail@plt+0x1a010>
   2b470:	b	2b4bc <__assert_fail@plt+0x1a084>
   2b474:	add	r6, r5, #8
   2b478:	ldr	r1, [r8]
   2b47c:	cmp	r1, #31
   2b480:	beq	2b48c <__assert_fail@plt+0x1a054>
   2b484:	ldr	r0, [lr]
   2b488:	b	2b3d4 <__assert_fail@plt+0x19f9c>
   2b48c:	mov	r0, #996	; 0x3e4
   2b490:	bl	3554c <__assert_fail@plt+0x24114>
   2b494:	cmp	r0, #0
   2b498:	beq	2b360 <__assert_fail@plt+0x19f28>
   2b49c:	ldr	lr, [sp, #20]
   2b4a0:	ldr	ip, [sp, #44]	; 0x2c
   2b4a4:	ldr	r1, [lr]
   2b4a8:	str	r1, [r0]
   2b4ac:	mov	r1, #0
   2b4b0:	str	r0, [lr]
   2b4b4:	str	r1, [r8]
   2b4b8:	b	2b3d4 <__assert_fail@plt+0x19f9c>
   2b4bc:	mov	sl, r7
   2b4c0:	ldr	r1, [r8]
   2b4c4:	cmp	r1, #31
   2b4c8:	beq	2b324 <__assert_fail@plt+0x19eec>
   2b4cc:	ldr	r0, [lr]
   2b4d0:	add	r2, r1, #1
   2b4d4:	add	r1, r0, r1, lsl #5
   2b4d8:	mov	r0, #16
   2b4dc:	cmp	sl, #0
   2b4e0:	str	r2, [r8]
   2b4e4:	str	r4, [r1, #4]!
   2b4e8:	stmib	r1, {r9, sl}
   2b4ec:	str	r4, [r1, #12]
   2b4f0:	str	r4, [r1, #16]
   2b4f4:	str	r4, [r1, #20]
   2b4f8:	str	r0, [r1, #24]
   2b4fc:	mvn	r0, #0
   2b500:	str	r0, [r1, #28]
   2b504:	str	r1, [r9]
   2b508:	beq	2b6e0 <__assert_fail@plt+0x1a2a8>
   2b50c:	mov	r5, r1
   2b510:	str	r1, [sl]
   2b514:	ldr	r2, [sp, #52]	; 0x34
   2b518:	ldr	r1, [sp, #8]
   2b51c:	mov	r9, r5
   2b520:	add	r0, r2, #1
   2b524:	cmp	r2, r1
   2b528:	blt	2b374 <__assert_fail@plt+0x19f3c>
   2b52c:	ldr	r1, [sp, #48]	; 0x30
   2b530:	ldr	r2, [sp, #8]
   2b534:	mov	r0, #0
   2b538:	cmp	r2, r1
   2b53c:	bne	2b54c <__assert_fail@plt+0x1a114>
   2b540:	ldr	r6, [sp, #24]
   2b544:	mov	r7, r5
   2b548:	b	2b718 <__assert_fail@plt+0x1a2e0>
   2b54c:	mov	r9, sl
   2b550:	ldr	r1, [r8]
   2b554:	str	r5, [sp, #32]
   2b558:	ldr	r6, [r9], #20
   2b55c:	cmp	r1, #31
   2b560:	beq	2b6a0 <__assert_fail@plt+0x1a268>
   2b564:	ldr	r0, [lr]
   2b568:	add	r2, r1, #1
   2b56c:	add	r7, r0, r1, lsl #5
   2b570:	str	r2, [r8]
   2b574:	str	r4, [r7, #4]!
   2b578:	mvn	r2, #0
   2b57c:	str	r4, [r7, #4]
   2b580:	str	r4, [r7, #8]
   2b584:	ldm	r9, {r0, r1}
   2b588:	str	r4, [r7, #12]
   2b58c:	str	r4, [r7, #16]
   2b590:	str	r2, [r7, #28]
   2b594:	sub	r9, fp, #80	; 0x50
   2b598:	str	r0, [r7, #20]
   2b59c:	bic	r0, r1, #786432	; 0xc0000
   2b5a0:	str	r0, [r7, #24]
   2b5a4:	mov	r0, r7
   2b5a8:	str	r7, [fp, #-80]	; 0xffffffb0
   2b5ac:	b	2b5f0 <__assert_fail@plt+0x1a1b8>
   2b5b0:	add	r3, r1, #1
   2b5b4:	add	r0, r0, r1, lsl #5
   2b5b8:	add	r2, sl, #20
   2b5bc:	str	r3, [r8]
   2b5c0:	str	r4, [r0, #4]!
   2b5c4:	mvn	r3, #0
   2b5c8:	str	r4, [r0, #4]
   2b5cc:	str	r4, [r0, #8]
   2b5d0:	ldm	r2, {r1, r2}
   2b5d4:	str	r4, [r0, #12]
   2b5d8:	str	r4, [r0, #16]
   2b5dc:	str	r3, [r0, #28]
   2b5e0:	str	r1, [r0, #20]
   2b5e4:	bic	r1, r2, #786432	; 0xc0000
   2b5e8:	str	r1, [r0, #24]
   2b5ec:	str	r0, [r9]
   2b5f0:	str	r6, [r0]
   2b5f4:	ldr	r0, [r9]
   2b5f8:	ldr	r1, [r0, #24]
   2b5fc:	orr	r1, r1, #262144	; 0x40000
   2b600:	str	r1, [r0, #24]
   2b604:	ldr	r0, [sl, #4]
   2b608:	ldr	r6, [r9]
   2b60c:	cmp	r0, #0
   2b610:	beq	2b620 <__assert_fail@plt+0x1a1e8>
   2b614:	add	r9, r6, #4
   2b618:	mov	sl, r0
   2b61c:	b	2b65c <__assert_fail@plt+0x1a224>
   2b620:	ldr	r5, [sp, #48]	; 0x30
   2b624:	ldr	r9, [sp, #8]
   2b628:	mov	r1, #0
   2b62c:	mov	r0, sl
   2b630:	ldr	sl, [sl, #8]
   2b634:	cmp	sl, r1
   2b638:	cmpne	sl, #0
   2b63c:	bne	2b658 <__assert_fail@plt+0x1a220>
   2b640:	ldr	sl, [r0]
   2b644:	ldr	r6, [r6]
   2b648:	mov	r1, r0
   2b64c:	cmp	sl, #0
   2b650:	bne	2b62c <__assert_fail@plt+0x1a1f4>
   2b654:	b	2ad78 <__assert_fail@plt+0x19940>
   2b658:	add	r9, r6, #8
   2b65c:	ldr	r1, [r8]
   2b660:	cmp	r1, #31
   2b664:	beq	2b670 <__assert_fail@plt+0x1a238>
   2b668:	ldr	r0, [lr]
   2b66c:	b	2b5b0 <__assert_fail@plt+0x1a178>
   2b670:	mov	r0, #996	; 0x3e4
   2b674:	bl	3554c <__assert_fail@plt+0x24114>
   2b678:	cmp	r0, #0
   2b67c:	beq	2b6d8 <__assert_fail@plt+0x1a2a0>
   2b680:	ldr	lr, [sp, #20]
   2b684:	ldr	ip, [sp, #44]	; 0x2c
   2b688:	ldr	r1, [lr]
   2b68c:	str	r1, [r0]
   2b690:	mov	r1, #0
   2b694:	str	r0, [lr]
   2b698:	str	r1, [r8]
   2b69c:	b	2b5b0 <__assert_fail@plt+0x1a178>
   2b6a0:	mov	r0, #996	; 0x3e4
   2b6a4:	bl	3554c <__assert_fail@plt+0x24114>
   2b6a8:	cmp	r0, #0
   2b6ac:	beq	2b6d0 <__assert_fail@plt+0x1a298>
   2b6b0:	ldr	lr, [sp, #20]
   2b6b4:	ldr	ip, [sp, #44]	; 0x2c
   2b6b8:	ldr	r1, [lr]
   2b6bc:	str	r1, [r0]
   2b6c0:	mov	r1, #0
   2b6c4:	str	r0, [lr]
   2b6c8:	str	r1, [r8]
   2b6cc:	b	2b568 <__assert_fail@plt+0x1a130>
   2b6d0:	str	r4, [fp, #-80]	; 0xffffffb0
   2b6d4:	b	2b6dc <__assert_fail@plt+0x1a2a4>
   2b6d8:	str	r4, [r9]
   2b6dc:	ldr	ip, [sp, #44]	; 0x2c
   2b6e0:	ldr	r0, [sp, #16]
   2b6e4:	ldr	r6, [sp, #24]
   2b6e8:	ldr	sl, [sp, #36]	; 0x24
   2b6ec:	mov	r1, #12
   2b6f0:	mov	r7, #0
   2b6f4:	str	r1, [r0]
   2b6f8:	clz	r0, r7
   2b6fc:	cmp	r7, #0
   2b700:	lsr	r0, r0, #5
   2b704:	bne	2b718 <__assert_fail@plt+0x1a2e0>
   2b708:	ldr	r1, [sp, #16]
   2b70c:	ldr	r1, [r1]
   2b710:	cmp	r1, #0
   2b714:	bne	2b800 <__assert_fail@plt+0x1a3c8>
   2b718:	ldr	r1, [sp, #28]
   2b71c:	cmp	r1, #0
   2b720:	beq	2aad0 <__assert_fail@plt+0x19698>
   2b724:	ldrb	r1, [ip, #4]
   2b728:	cmp	r1, #23
   2b72c:	cmpne	r1, #11
   2b730:	bne	2aad0 <__assert_fail@plt+0x19698>
   2b734:	ldr	r8, [sp, #16]
   2b738:	movw	r6, #255	; 0xff
   2b73c:	cmp	r0, #0
   2b740:	movt	r6, #4
   2b744:	bne	2b7dc <__assert_fail@plt+0x1a3a4>
   2b748:	mov	r5, r7
   2b74c:	ldr	r7, [r7, #4]
   2b750:	cmp	r7, #0
   2b754:	bne	2b748 <__assert_fail@plt+0x1a310>
   2b758:	ldr	r7, [r5, #8]
   2b75c:	cmp	r7, #0
   2b760:	bne	2b748 <__assert_fail@plt+0x1a310>
   2b764:	ldr	r0, [r5, #24]
   2b768:	and	r0, r0, r6
   2b76c:	cmp	r0, #3
   2b770:	beq	2b7a8 <__assert_fail@plt+0x1a370>
   2b774:	cmp	r0, #6
   2b778:	bne	2b7b0 <__assert_fail@plt+0x1a378>
   2b77c:	ldr	r4, [r5, #20]
   2b780:	ldr	r0, [r4]
   2b784:	bl	1386c <__assert_fail@plt+0x2434>
   2b788:	ldr	r0, [r4, #4]
   2b78c:	bl	1386c <__assert_fail@plt+0x2434>
   2b790:	ldr	r0, [r4, #8]
   2b794:	bl	1386c <__assert_fail@plt+0x2434>
   2b798:	ldr	r0, [r4, #12]
   2b79c:	bl	1386c <__assert_fail@plt+0x2434>
   2b7a0:	mov	r0, r4
   2b7a4:	b	2b7ac <__assert_fail@plt+0x1a374>
   2b7a8:	ldr	r0, [r5, #20]
   2b7ac:	bl	1386c <__assert_fail@plt+0x2434>
   2b7b0:	ldr	r0, [r5]
   2b7b4:	cmp	r0, #0
   2b7b8:	beq	2b7dc <__assert_fail@plt+0x1a3a4>
   2b7bc:	ldr	r7, [r0, #8]
   2b7c0:	cmp	r7, r5
   2b7c4:	mov	r5, r0
   2b7c8:	beq	2b764 <__assert_fail@plt+0x1a32c>
   2b7cc:	cmp	r7, #0
   2b7d0:	mov	r5, r0
   2b7d4:	beq	2b764 <__assert_fail@plt+0x1a32c>
   2b7d8:	b	2b748 <__assert_fail@plt+0x1a310>
   2b7dc:	mov	r0, #13
   2b7e0:	mov	sl, #0
   2b7e4:	str	r0, [r8]
   2b7e8:	mov	r0, sl
   2b7ec:	sub	sp, fp, #28
   2b7f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b7f4:	mov	r7, r4
   2b7f8:	mov	r6, r9
   2b7fc:	b	2aa84 <__assert_fail@plt+0x1964c>
   2b800:	cmp	sl, #0
   2b804:	beq	29d48 <__assert_fail@plt+0x18910>
   2b808:	movw	r6, #255	; 0xff
   2b80c:	movt	r6, #4
   2b810:	mov	r5, sl
   2b814:	ldr	sl, [sl, #4]
   2b818:	cmp	sl, #0
   2b81c:	bne	2b810 <__assert_fail@plt+0x1a3d8>
   2b820:	ldr	sl, [r5, #8]
   2b824:	cmp	sl, #0
   2b828:	bne	2b810 <__assert_fail@plt+0x1a3d8>
   2b82c:	ldr	r0, [r5, #24]
   2b830:	and	r0, r0, r6
   2b834:	cmp	r0, #3
   2b838:	beq	2b870 <__assert_fail@plt+0x1a438>
   2b83c:	cmp	r0, #6
   2b840:	bne	2b878 <__assert_fail@plt+0x1a440>
   2b844:	ldr	r4, [r5, #20]
   2b848:	ldr	r0, [r4]
   2b84c:	bl	1386c <__assert_fail@plt+0x2434>
   2b850:	ldr	r0, [r4, #4]
   2b854:	bl	1386c <__assert_fail@plt+0x2434>
   2b858:	ldr	r0, [r4, #8]
   2b85c:	bl	1386c <__assert_fail@plt+0x2434>
   2b860:	ldr	r0, [r4, #12]
   2b864:	bl	1386c <__assert_fail@plt+0x2434>
   2b868:	mov	r0, r4
   2b86c:	b	2b874 <__assert_fail@plt+0x1a43c>
   2b870:	ldr	r0, [r5, #20]
   2b874:	bl	1386c <__assert_fail@plt+0x2434>
   2b878:	ldr	r0, [r5]
   2b87c:	cmp	r0, #0
   2b880:	beq	29d48 <__assert_fail@plt+0x18910>
   2b884:	ldr	sl, [r0, #8]
   2b888:	cmp	sl, r5
   2b88c:	mov	r5, r0
   2b890:	beq	2b82c <__assert_fail@plt+0x1a3f4>
   2b894:	cmp	sl, #0
   2b898:	mov	r5, r0
   2b89c:	beq	2b82c <__assert_fail@plt+0x1a3f4>
   2b8a0:	b	2b810 <__assert_fail@plt+0x1a3d8>
   2b8a4:	cmp	r0, #2
   2b8a8:	blt	2b8c4 <__assert_fail@plt+0x1a48c>
   2b8ac:	ldr	r0, [sl, #36]	; 0x24
   2b8b0:	cmp	r0, #0
   2b8b4:	bne	2a72c <__assert_fail@plt+0x192f4>
   2b8b8:	ldrb	r0, [sl, #16]
   2b8bc:	tst	r0, #1
   2b8c0:	bne	2a72c <__assert_fail@plt+0x192f4>
   2b8c4:	ldr	r0, [sl]
   2b8c8:	bl	1386c <__assert_fail@plt+0x2434>
   2b8cc:	ldr	r0, [sl, #4]
   2b8d0:	bl	1386c <__assert_fail@plt+0x2434>
   2b8d4:	ldr	r0, [sl, #8]
   2b8d8:	bl	1386c <__assert_fail@plt+0x2434>
   2b8dc:	ldr	r0, [sl, #12]
   2b8e0:	bl	1386c <__assert_fail@plt+0x2434>
   2b8e4:	mov	r0, sl
   2b8e8:	bl	1386c <__assert_fail@plt+0x2434>
   2b8ec:	ldr	r1, [r8, #64]	; 0x40
   2b8f0:	cmp	r1, #31
   2b8f4:	beq	2bdd0 <__assert_fail@plt+0x1a998>
   2b8f8:	ldr	r0, [r8, #56]	; 0x38
   2b8fc:	add	r2, r1, #1
   2b900:	add	r0, r0, r1, lsl #5
   2b904:	ldr	lr, [sp, #44]	; 0x2c
   2b908:	mov	r1, #3
   2b90c:	vmov.i32	q8, #0	; 0x00000000
   2b910:	str	r2, [r8, #64]	; 0x40
   2b914:	mov	r2, #0
   2b918:	add	r7, r0, #4
   2b91c:	str	r2, [r0, #20]
   2b920:	str	r4, [r0, #24]
   2b924:	str	r1, [r0, #28]
   2b928:	mov	r0, #28
   2b92c:	mov	r1, r7
   2b930:	vst1.32	{d16-d17}, [r1], r0
   2b934:	mvn	r0, #0
   2b938:	str	r0, [r1]
   2b93c:	b	2aa84 <__assert_fail@plt+0x1964c>
   2b940:	mov	r0, #996	; 0x3e4
   2b944:	bl	3554c <__assert_fail@plt+0x24114>
   2b948:	cmp	r0, #0
   2b94c:	beq	2bc44 <__assert_fail@plt+0x1a80c>
   2b950:	ldr	r1, [r8, #56]	; 0x38
   2b954:	ldr	lr, [sp, #44]	; 0x2c
   2b958:	str	r1, [r0]
   2b95c:	mov	r1, #0
   2b960:	str	r1, [r8, #64]	; 0x40
   2b964:	str	r0, [r8, #56]	; 0x38
   2b968:	b	29b98 <__assert_fail@plt+0x18760>
   2b96c:	mov	r9, r0
   2b970:	b	2ba2c <__assert_fail@plt+0x1a5f4>
   2b974:	mov	r9, #7
   2b978:	b	2ba2c <__assert_fail@plt+0x1a5f4>
   2b97c:	mov	r0, #2
   2b980:	b	2be08 <__assert_fail@plt+0x1a9d0>
   2b984:	mov	r0, #6
   2b988:	b	2a988 <__assert_fail@plt+0x19550>
   2b98c:	mov	r0, #996	; 0x3e4
   2b990:	bl	3554c <__assert_fail@plt+0x24114>
   2b994:	cmp	r0, #0
   2b998:	beq	2bc44 <__assert_fail@plt+0x1a80c>
   2b99c:	ldr	r1, [r8, #56]	; 0x38
   2b9a0:	ldr	lr, [sp, #44]	; 0x2c
   2b9a4:	str	r1, [r0]
   2b9a8:	mov	r1, #0
   2b9ac:	str	r1, [r8, #64]	; 0x40
   2b9b0:	str	r0, [r8, #56]	; 0x38
   2b9b4:	b	29c70 <__assert_fail@plt+0x18838>
   2b9b8:	mov	r0, #996	; 0x3e4
   2b9bc:	bl	3554c <__assert_fail@plt+0x24114>
   2b9c0:	cmp	r0, #0
   2b9c4:	beq	2bc44 <__assert_fail@plt+0x1a80c>
   2b9c8:	ldr	r1, [r8, #56]	; 0x38
   2b9cc:	ldr	r3, [sp, #24]
   2b9d0:	ldr	lr, [sp, #44]	; 0x2c
   2b9d4:	str	r1, [r0]
   2b9d8:	mov	r1, #0
   2b9dc:	str	r1, [r8, #64]	; 0x40
   2b9e0:	str	r0, [r8, #56]	; 0x38
   2b9e4:	b	29e2c <__assert_fail@plt+0x189f4>
   2b9e8:	mov	r0, r4
   2b9ec:	bl	1386c <__assert_fail@plt+0x2434>
   2b9f0:	mov	r0, r5
   2b9f4:	bl	1386c <__assert_fail@plt+0x2434>
   2b9f8:	b	2a984 <__assert_fail@plt+0x1954c>
   2b9fc:	mov	r0, #996	; 0x3e4
   2ba00:	bl	3554c <__assert_fail@plt+0x24114>
   2ba04:	cmp	r0, #0
   2ba08:	beq	2bc44 <__assert_fail@plt+0x1a80c>
   2ba0c:	ldr	r1, [r8, #56]	; 0x38
   2ba10:	ldr	lr, [sp, #44]	; 0x2c
   2ba14:	str	r1, [r0]
   2ba18:	mov	r1, #0
   2ba1c:	str	r1, [r8, #64]	; 0x40
   2ba20:	str	r0, [r8, #56]	; 0x38
   2ba24:	b	29c14 <__assert_fail@plt+0x187dc>
   2ba28:	mov	r9, #3
   2ba2c:	ldr	r0, [sp, #16]
   2ba30:	ldr	r4, [sp, #52]	; 0x34
   2ba34:	ldr	sl, [sp, #48]	; 0x30
   2ba38:	str	r9, [r0]
   2ba3c:	ldr	r6, [sp, #40]	; 0x28
   2ba40:	mov	r0, r4
   2ba44:	bl	1386c <__assert_fail@plt+0x2434>
   2ba48:	ldr	r0, [sl]
   2ba4c:	bl	1386c <__assert_fail@plt+0x2434>
   2ba50:	ldr	r0, [sl, #4]
   2ba54:	bl	1386c <__assert_fail@plt+0x2434>
   2ba58:	ldr	r0, [sl, #8]
   2ba5c:	bl	1386c <__assert_fail@plt+0x2434>
   2ba60:	ldr	r0, [sl, #12]
   2ba64:	bl	1386c <__assert_fail@plt+0x2434>
   2ba68:	mov	r0, sl
   2ba6c:	bl	1386c <__assert_fail@plt+0x2434>
   2ba70:	ldr	r0, [sp, #16]
   2ba74:	mov	r7, #0
   2ba78:	mov	sl, #0
   2ba7c:	ldr	r0, [r0]
   2ba80:	b	29b3c <__assert_fail@plt+0x18704>
   2ba84:	mov	r0, #996	; 0x3e4
   2ba88:	bl	3554c <__assert_fail@plt+0x24114>
   2ba8c:	cmp	r0, #0
   2ba90:	beq	2be04 <__assert_fail@plt+0x1a9cc>
   2ba94:	ldr	r1, [r8, #56]	; 0x38
   2ba98:	ldr	lr, [sp, #44]	; 0x2c
   2ba9c:	str	r1, [r0]
   2baa0:	mov	r1, #0
   2baa4:	str	r1, [r8, #64]	; 0x40
   2baa8:	str	r0, [r8, #56]	; 0x38
   2baac:	b	2a748 <__assert_fail@plt+0x19310>
   2bab0:	mov	r0, #996	; 0x3e4
   2bab4:	bl	3554c <__assert_fail@plt+0x24114>
   2bab8:	cmp	r0, #0
   2babc:	beq	2be04 <__assert_fail@plt+0x1a9cc>
   2bac0:	ldr	r1, [r8, #56]	; 0x38
   2bac4:	ldr	lr, [sp, #44]	; 0x2c
   2bac8:	str	r1, [r0]
   2bacc:	mov	r1, #0
   2bad0:	str	r1, [r8, #64]	; 0x40
   2bad4:	str	r0, [r8, #56]	; 0x38
   2bad8:	b	2a7f4 <__assert_fail@plt+0x193bc>
   2badc:	mov	r0, #996	; 0x3e4
   2bae0:	bl	3554c <__assert_fail@plt+0x24114>
   2bae4:	cmp	r0, #0
   2bae8:	beq	2be04 <__assert_fail@plt+0x1a9cc>
   2baec:	ldr	r1, [r8, #56]	; 0x38
   2baf0:	ldr	lr, [sp, #44]	; 0x2c
   2baf4:	str	r1, [r0]
   2baf8:	mov	r1, #0
   2bafc:	str	r1, [r8, #64]	; 0x40
   2bb00:	str	r0, [r8, #56]	; 0x38
   2bb04:	b	2a840 <__assert_fail@plt+0x19408>
   2bb08:	mov	r0, #996	; 0x3e4
   2bb0c:	bl	3554c <__assert_fail@plt+0x24114>
   2bb10:	cmp	r0, #0
   2bb14:	beq	2bc44 <__assert_fail@plt+0x1a80c>
   2bb18:	ldr	r1, [r8, #56]	; 0x38
   2bb1c:	ldr	lr, [sp, #44]	; 0x2c
   2bb20:	mov	r6, sl
   2bb24:	str	r1, [r0]
   2bb28:	mov	r1, #0
   2bb2c:	str	r1, [r8, #64]	; 0x40
   2bb30:	str	r0, [r8, #56]	; 0x38
   2bb34:	b	2aa40 <__assert_fail@plt+0x19608>
   2bb38:	mov	r0, r4
   2bb3c:	bl	1386c <__assert_fail@plt+0x2434>
   2bb40:	ldr	lr, [sp, #44]	; 0x2c
   2bb44:	mov	r7, r9
   2bb48:	b	2aa84 <__assert_fail@plt+0x1964c>
   2bb4c:	mov	r0, #996	; 0x3e4
   2bb50:	bl	3554c <__assert_fail@plt+0x24114>
   2bb54:	cmp	r0, #0
   2bb58:	beq	2bcec <__assert_fail@plt+0x1a8b4>
   2bb5c:	ldr	r1, [r8, #56]	; 0x38
   2bb60:	ldr	r7, [sp, #24]
   2bb64:	ldr	lr, [sp, #44]	; 0x2c
   2bb68:	mov	sl, #0
   2bb6c:	str	r1, [r0]
   2bb70:	mov	r1, #0
   2bb74:	str	r1, [r8, #64]	; 0x40
   2bb78:	str	r0, [r8, #56]	; 0x38
   2bb7c:	b	2a8f0 <__assert_fail@plt+0x194b8>
   2bb80:	mov	r0, #996	; 0x3e4
   2bb84:	bl	3554c <__assert_fail@plt+0x24114>
   2bb88:	ldr	lr, [sp, #44]	; 0x2c
   2bb8c:	cmp	r0, #0
   2bb90:	beq	2a984 <__assert_fail@plt+0x1954c>
   2bb94:	ldr	r1, [r8, #56]	; 0x38
   2bb98:	str	r1, [r0]
   2bb9c:	mov	r1, #0
   2bba0:	str	r1, [r8, #64]	; 0x40
   2bba4:	str	r0, [r8, #56]	; 0x38
   2bba8:	b	2a93c <__assert_fail@plt+0x19504>
   2bbac:	mov	r0, #996	; 0x3e4
   2bbb0:	bl	3554c <__assert_fail@plt+0x24114>
   2bbb4:	cmp	r0, #0
   2bbb8:	beq	2bdac <__assert_fail@plt+0x1a974>
   2bbbc:	ldr	r1, [r8, #56]	; 0x38
   2bbc0:	ldr	r7, [sp, #24]
   2bbc4:	ldr	lr, [sp, #44]	; 0x2c
   2bbc8:	mov	sl, #0
   2bbcc:	str	r1, [r0]
   2bbd0:	mov	r1, #0
   2bbd4:	str	r1, [r8, #64]	; 0x40
   2bbd8:	str	r0, [r8, #56]	; 0x38
   2bbdc:	b	29dd4 <__assert_fail@plt+0x1899c>
   2bbe0:	mov	r0, #996	; 0x3e4
   2bbe4:	bl	3554c <__assert_fail@plt+0x24114>
   2bbe8:	cmp	r0, #0
   2bbec:	beq	2bdb8 <__assert_fail@plt+0x1a980>
   2bbf0:	ldr	r1, [r8, #56]	; 0x38
   2bbf4:	ldr	r7, [sp, #24]
   2bbf8:	ldr	lr, [sp, #44]	; 0x2c
   2bbfc:	mov	sl, #0
   2bc00:	str	r1, [r0]
   2bc04:	mov	r1, #0
   2bc08:	str	r1, [r8, #64]	; 0x40
   2bc0c:	str	r0, [r8, #56]	; 0x38
   2bc10:	b	2a898 <__assert_fail@plt+0x19460>
   2bc14:	mov	r0, #996	; 0x3e4
   2bc18:	bl	3554c <__assert_fail@plt+0x24114>
   2bc1c:	cmp	r0, #0
   2bc20:	beq	2bc44 <__assert_fail@plt+0x1a80c>
   2bc24:	ldr	r1, [r8, #56]	; 0x38
   2bc28:	ldr	r7, [sp, #24]
   2bc2c:	ldr	lr, [sp, #44]	; 0x2c
   2bc30:	str	r1, [r0]
   2bc34:	mov	r1, #0
   2bc38:	str	r1, [r8, #64]	; 0x40
   2bc3c:	str	r0, [r8, #56]	; 0x38
   2bc40:	b	2a9a8 <__assert_fail@plt+0x19570>
   2bc44:	mov	r0, #12
   2bc48:	ldr	r1, [sp, #16]
   2bc4c:	mov	sl, #0
   2bc50:	str	r0, [r1]
   2bc54:	b	2b7e8 <__assert_fail@plt+0x1a3b0>
   2bc58:	mov	r4, #0
   2bc5c:	mov	r9, #0
   2bc60:	b	2bc6c <__assert_fail@plt+0x1a834>
   2bc64:	mov	r9, #4
   2bc68:	mov	r4, #128	; 0x80
   2bc6c:	bl	11318 <__ctype_b_loc@plt>
   2bc70:	ldr	r0, [r0]
   2bc74:	ldr	r7, [sp, #24]
   2bc78:	ldr	lr, [sp, #44]	; 0x2c
   2bc7c:	mov	r1, #1
   2bc80:	mov	sl, #0
   2bc84:	add	r5, r0, r4, lsl #1
   2bc88:	add	r0, r8, r9, lsl #2
   2bc8c:	mov	ip, r6
   2bc90:	mov	r3, #0
   2bc94:	add	r2, r0, #96	; 0x60
   2bc98:	mov	r0, r5
   2bc9c:	add	r6, r4, r3
   2bca0:	cmp	r6, #95	; 0x5f
   2bca4:	beq	2bcb4 <__assert_fail@plt+0x1a87c>
   2bca8:	ldrh	r6, [r0]
   2bcac:	ands	r6, r6, #8
   2bcb0:	beq	2bcc0 <__assert_fail@plt+0x1a888>
   2bcb4:	ldr	r6, [r2]
   2bcb8:	orr	r6, r6, r1, lsl r3
   2bcbc:	str	r6, [r2]
   2bcc0:	add	r3, r3, #1
   2bcc4:	add	r0, r0, #2
   2bcc8:	cmp	r3, #32
   2bccc:	bne	2bc9c <__assert_fail@plt+0x1a864>
   2bcd0:	add	r9, r9, #1
   2bcd4:	add	r5, r5, #64	; 0x40
   2bcd8:	add	r4, r4, #32
   2bcdc:	mov	r6, ip
   2bce0:	cmp	r9, #8
   2bce4:	bne	2bc88 <__assert_fail@plt+0x1a850>
   2bce8:	b	29da4 <__assert_fail@plt+0x1896c>
   2bcec:	ldr	r7, [sp, #24]
   2bcf0:	ldr	lr, [sp, #44]	; 0x2c
   2bcf4:	mov	r6, #0
   2bcf8:	mov	sl, #0
   2bcfc:	b	2a92c <__assert_fail@plt+0x194f4>
   2bd00:	cmp	r9, #0
   2bd04:	beq	2bda4 <__assert_fail@plt+0x1a96c>
   2bd08:	movw	r5, #255	; 0xff
   2bd0c:	movt	r5, #4
   2bd10:	mov	r6, r9
   2bd14:	ldr	r9, [r9, #4]
   2bd18:	cmp	r9, #0
   2bd1c:	bne	2bd10 <__assert_fail@plt+0x1a8d8>
   2bd20:	ldr	r9, [r6, #8]
   2bd24:	cmp	r9, #0
   2bd28:	bne	2bd10 <__assert_fail@plt+0x1a8d8>
   2bd2c:	ldr	r0, [r6, #24]
   2bd30:	and	r0, r0, r5
   2bd34:	cmp	r0, #3
   2bd38:	beq	2bd70 <__assert_fail@plt+0x1a938>
   2bd3c:	cmp	r0, #6
   2bd40:	bne	2bd78 <__assert_fail@plt+0x1a940>
   2bd44:	ldr	r4, [r6, #20]
   2bd48:	ldr	r0, [r4]
   2bd4c:	bl	1386c <__assert_fail@plt+0x2434>
   2bd50:	ldr	r0, [r4, #4]
   2bd54:	bl	1386c <__assert_fail@plt+0x2434>
   2bd58:	ldr	r0, [r4, #8]
   2bd5c:	bl	1386c <__assert_fail@plt+0x2434>
   2bd60:	ldr	r0, [r4, #12]
   2bd64:	bl	1386c <__assert_fail@plt+0x2434>
   2bd68:	mov	r0, r4
   2bd6c:	b	2bd74 <__assert_fail@plt+0x1a93c>
   2bd70:	ldr	r0, [r6, #20]
   2bd74:	bl	1386c <__assert_fail@plt+0x2434>
   2bd78:	ldr	r0, [r6]
   2bd7c:	cmp	r0, #0
   2bd80:	beq	2bda4 <__assert_fail@plt+0x1a96c>
   2bd84:	ldr	r9, [r0, #8]
   2bd88:	cmp	r9, r6
   2bd8c:	mov	r6, r0
   2bd90:	beq	2bd2c <__assert_fail@plt+0x1a8f4>
   2bd94:	cmp	r9, #0
   2bd98:	mov	r6, r0
   2bd9c:	beq	2bd2c <__assert_fail@plt+0x1a8f4>
   2bda0:	b	2bd10 <__assert_fail@plt+0x1a8d8>
   2bda4:	mov	r0, #8
   2bda8:	b	2bc48 <__assert_fail@plt+0x1a810>
   2bdac:	mov	r5, #0
   2bdb0:	mov	r0, #9
   2bdb4:	b	2bdc0 <__assert_fail@plt+0x1a988>
   2bdb8:	mov	r5, #0
   2bdbc:	mov	r0, #10
   2bdc0:	ldr	r7, [sp, #24]
   2bdc4:	ldr	lr, [sp, #44]	; 0x2c
   2bdc8:	mov	sl, #0
   2bdcc:	b	2a8d8 <__assert_fail@plt+0x194a0>
   2bdd0:	mov	r0, #996	; 0x3e4
   2bdd4:	bl	3554c <__assert_fail@plt+0x24114>
   2bdd8:	cmp	r0, #0
   2bddc:	beq	2be04 <__assert_fail@plt+0x1a9cc>
   2bde0:	ldr	r1, [r8, #56]	; 0x38
   2bde4:	str	r1, [r0]
   2bde8:	mov	r1, #0
   2bdec:	str	r1, [r8, #64]	; 0x40
   2bdf0:	str	r0, [r8, #56]	; 0x38
   2bdf4:	b	2b8fc <__assert_fail@plt+0x1a4c4>
   2bdf8:	ldr	r6, [sp, #40]	; 0x28
   2bdfc:	ldr	r4, [sp, #52]	; 0x34
   2be00:	ldr	sl, [sp, #48]	; 0x30
   2be04:	mov	r0, #12
   2be08:	ldr	r1, [sp, #16]
   2be0c:	str	r0, [r1]
   2be10:	b	2ba40 <__assert_fail@plt+0x1a608>
   2be14:	mov	r0, r6
   2be18:	bl	1386c <__assert_fail@plt+0x2434>
   2be1c:	mov	r0, r9
   2be20:	bl	1386c <__assert_fail@plt+0x2434>
   2be24:	mov	r9, #12
   2be28:	b	2ba2c <__assert_fail@plt+0x1a5f4>
   2be2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be30:	add	fp, sp, #28
   2be34:	sub	sp, sp, #12
   2be38:	mov	r9, r1
   2be3c:	mov	r6, r0
   2be40:	mov	r4, #0
   2be44:	mov	r0, #32
   2be48:	mov	r1, #1
   2be4c:	mov	sl, r3
   2be50:	mov	r5, r2
   2be54:	str	r4, [sp, #8]
   2be58:	bl	354f8 <__assert_fail@plt+0x240c0>
   2be5c:	ldr	r1, [fp, #12]
   2be60:	cmp	r0, #0
   2be64:	beq	2c1b4 <__assert_fail@plt+0x1ad7c>
   2be68:	mov	r7, r0
   2be6c:	mov	r0, #40	; 0x28
   2be70:	mov	r1, #1
   2be74:	bl	354f8 <__assert_fail@plt+0x240c0>
   2be78:	cmp	r0, #0
   2be7c:	beq	2c0d4 <__assert_fail@plt+0x1ac9c>
   2be80:	mov	r8, r0
   2be84:	ldrb	r0, [r0, #16]
   2be88:	ldr	r1, [fp, #8]
   2be8c:	mov	r4, #0
   2be90:	add	r3, sp, #8
   2be94:	str	r5, [sp]
   2be98:	mov	r2, r8
   2be9c:	str	r4, [sp, #4]
   2bea0:	and	r0, r0, #254	; 0xfe
   2bea4:	orr	r0, r0, r1
   2bea8:	mov	r1, r7
   2beac:	strb	r0, [r8, #16]
   2beb0:	mov	r0, r9
   2beb4:	bl	2c624 <__assert_fail@plt+0x1b1ec>
   2beb8:	cmp	r0, #0
   2bebc:	bne	2c0f0 <__assert_fail@plt+0x1acb8>
   2bec0:	ldrb	r0, [sl]
   2bec4:	cmp	r0, #0
   2bec8:	beq	2bef4 <__assert_fail@plt+0x1aabc>
   2becc:	add	r1, sl, #1
   2bed0:	mov	r2, #1
   2bed4:	ubfx	r3, r0, #5, #3
   2bed8:	and	r0, r0, #31
   2bedc:	ldr	r5, [r7, r3, lsl #2]
   2bee0:	orr	r0, r5, r2, lsl r0
   2bee4:	str	r0, [r7, r3, lsl #2]
   2bee8:	ldrb	r0, [r1], #1
   2beec:	cmp	r0, #0
   2bef0:	bne	2bed4 <__assert_fail@plt+0x1aa9c>
   2bef4:	ldr	r0, [fp, #8]
   2bef8:	cmp	r0, #0
   2befc:	beq	2bf1c <__assert_fail@plt+0x1aae4>
   2bf00:	vld1.32	{d16-d17}, [r7]
   2bf04:	mov	r0, r7
   2bf08:	vmvn	q8, q8
   2bf0c:	vst1.32	{d16-d17}, [r0]!
   2bf10:	vld1.32	{d16-d17}, [r0]
   2bf14:	vmvn	q8, q8
   2bf18:	vst1.32	{d16-d17}, [r0]
   2bf1c:	ldr	r0, [r6, #92]	; 0x5c
   2bf20:	cmp	r0, #2
   2bf24:	blt	2bfa0 <__assert_fail@plt+0x1ab68>
   2bf28:	ldm	r7, {r0, r1, r2, ip}
   2bf2c:	ldr	r5, [r6, #60]	; 0x3c
   2bf30:	ldr	r3, [r5]
   2bf34:	and	r0, r0, r3
   2bf38:	str	r0, [r7]
   2bf3c:	ldr	r0, [r5, #4]
   2bf40:	and	r0, r1, r0
   2bf44:	str	r0, [r7, #4]
   2bf48:	ldr	r0, [r5, #8]
   2bf4c:	and	r0, r2, r0
   2bf50:	str	r0, [r7, #8]
   2bf54:	ldr	r0, [r5, #12]
   2bf58:	and	r0, ip, r0
   2bf5c:	str	r0, [r7, #12]
   2bf60:	ldr	r0, [r7, #16]
   2bf64:	ldr	r1, [r5, #16]
   2bf68:	and	r0, r0, r1
   2bf6c:	str	r0, [r7, #16]
   2bf70:	ldr	r0, [r5, #20]
   2bf74:	ldr	r1, [r7, #20]
   2bf78:	and	r0, r1, r0
   2bf7c:	str	r0, [r7, #20]
   2bf80:	ldr	r0, [r5, #24]
   2bf84:	ldr	r1, [r7, #24]
   2bf88:	and	r0, r1, r0
   2bf8c:	str	r0, [r7, #24]
   2bf90:	ldr	r0, [r5, #28]
   2bf94:	ldr	r1, [r7, #28]
   2bf98:	and	r0, r1, r0
   2bf9c:	str	r0, [r7, #28]
   2bfa0:	ldr	r1, [r6, #64]	; 0x40
   2bfa4:	cmp	r1, #31
   2bfa8:	beq	2c130 <__assert_fail@plt+0x1acf8>
   2bfac:	ldr	r0, [r6, #56]	; 0x38
   2bfb0:	add	r2, r1, #1
   2bfb4:	add	r0, r0, r1, lsl #5
   2bfb8:	mov	r1, #3
   2bfbc:	vmov.i32	q8, #0	; 0x00000000
   2bfc0:	str	r2, [r6, #64]	; 0x40
   2bfc4:	mov	r2, #0
   2bfc8:	add	r5, r0, #4
   2bfcc:	str	r2, [r0, #20]
   2bfd0:	str	r7, [r0, #24]
   2bfd4:	str	r1, [r0, #28]
   2bfd8:	mov	r0, #28
   2bfdc:	mov	r1, r5
   2bfe0:	vst1.32	{d16-d17}, [r1], r0
   2bfe4:	mvn	r0, #0
   2bfe8:	str	r0, [r1]
   2bfec:	ldr	r0, [r6, #92]	; 0x5c
   2bff0:	cmp	r0, #2
   2bff4:	blt	2c09c <__assert_fail@plt+0x1ac64>
   2bff8:	ldrb	r0, [r6, #88]	; 0x58
   2bffc:	orr	r0, r0, #2
   2c000:	strb	r0, [r6, #88]	; 0x58
   2c004:	ldr	r1, [r6, #64]	; 0x40
   2c008:	cmp	r1, #31
   2c00c:	beq	2c158 <__assert_fail@plt+0x1ad20>
   2c010:	ldr	r0, [r6, #56]	; 0x38
   2c014:	add	r0, r0, r1, lsl #5
   2c018:	add	r2, r1, #1
   2c01c:	mov	r1, #6
   2c020:	mov	r4, #0
   2c024:	vmov.i32	q8, #0	; 0x00000000
   2c028:	add	r7, r0, #4
   2c02c:	str	r2, [r6, #64]	; 0x40
   2c030:	str	r4, [r0, #20]
   2c034:	str	r8, [r0, #24]
   2c038:	str	r1, [r0, #28]
   2c03c:	mov	r0, #28
   2c040:	mov	r1, r7
   2c044:	vst1.32	{d16-d17}, [r1], r0
   2c048:	mvn	r0, #0
   2c04c:	str	r0, [r1]
   2c050:	ldr	r1, [r6, #64]	; 0x40
   2c054:	cmp	r1, #31
   2c058:	beq	2c1c0 <__assert_fail@plt+0x1ad88>
   2c05c:	ldr	r0, [r6, #56]	; 0x38
   2c060:	add	r2, r1, #1
   2c064:	add	r4, r0, r1, lsl #5
   2c068:	mov	r0, #0
   2c06c:	mov	r1, #10
   2c070:	str	r2, [r6, #64]	; 0x40
   2c074:	str	r0, [r4, #4]!
   2c078:	mvn	r2, #0
   2c07c:	add	r3, r4, #20
   2c080:	stmib	r4, {r5, r7}
   2c084:	str	r0, [r4, #12]
   2c088:	str	r0, [r4, #16]
   2c08c:	stm	r3, {r0, r1, r2}
   2c090:	str	r4, [r5]
   2c094:	str	r4, [r7]
   2c098:	b	2c0c8 <__assert_fail@plt+0x1ac90>
   2c09c:	ldr	r0, [r8]
   2c0a0:	bl	1386c <__assert_fail@plt+0x2434>
   2c0a4:	ldr	r0, [r8, #4]
   2c0a8:	bl	1386c <__assert_fail@plt+0x2434>
   2c0ac:	ldr	r0, [r8, #8]
   2c0b0:	bl	1386c <__assert_fail@plt+0x2434>
   2c0b4:	ldr	r0, [r8, #12]
   2c0b8:	bl	1386c <__assert_fail@plt+0x2434>
   2c0bc:	mov	r0, r8
   2c0c0:	bl	1386c <__assert_fail@plt+0x2434>
   2c0c4:	mov	r4, r5
   2c0c8:	mov	r0, r4
   2c0cc:	sub	sp, fp, #28
   2c0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c0d4:	mov	r0, r7
   2c0d8:	bl	1386c <__assert_fail@plt+0x2434>
   2c0dc:	ldr	r1, [fp, #12]
   2c0e0:	mov	r0, #12
   2c0e4:	mov	r4, #0
   2c0e8:	str	r0, [r1]
   2c0ec:	b	2c0c8 <__assert_fail@plt+0x1ac90>
   2c0f0:	mov	r5, r0
   2c0f4:	mov	r0, r7
   2c0f8:	bl	1386c <__assert_fail@plt+0x2434>
   2c0fc:	ldr	r0, [r8]
   2c100:	bl	1386c <__assert_fail@plt+0x2434>
   2c104:	ldr	r0, [r8, #4]
   2c108:	bl	1386c <__assert_fail@plt+0x2434>
   2c10c:	ldr	r0, [r8, #8]
   2c110:	bl	1386c <__assert_fail@plt+0x2434>
   2c114:	ldr	r0, [r8, #12]
   2c118:	bl	1386c <__assert_fail@plt+0x2434>
   2c11c:	mov	r0, r8
   2c120:	bl	1386c <__assert_fail@plt+0x2434>
   2c124:	ldr	r0, [fp, #12]
   2c128:	str	r5, [r0]
   2c12c:	b	2c0c8 <__assert_fail@plt+0x1ac90>
   2c130:	mov	r0, #996	; 0x3e4
   2c134:	bl	3554c <__assert_fail@plt+0x24114>
   2c138:	cmp	r0, #0
   2c13c:	beq	2c180 <__assert_fail@plt+0x1ad48>
   2c140:	ldr	r1, [r6, #56]	; 0x38
   2c144:	str	r1, [r0]
   2c148:	mov	r1, #0
   2c14c:	str	r1, [r6, #64]	; 0x40
   2c150:	str	r0, [r6, #56]	; 0x38
   2c154:	b	2bfb0 <__assert_fail@plt+0x1ab78>
   2c158:	mov	r0, #996	; 0x3e4
   2c15c:	bl	3554c <__assert_fail@plt+0x24114>
   2c160:	cmp	r0, #0
   2c164:	beq	2c180 <__assert_fail@plt+0x1ad48>
   2c168:	ldr	r1, [r6, #56]	; 0x38
   2c16c:	str	r1, [r0]
   2c170:	mov	r1, #0
   2c174:	str	r1, [r6, #64]	; 0x40
   2c178:	str	r0, [r6, #56]	; 0x38
   2c17c:	b	2c014 <__assert_fail@plt+0x1abdc>
   2c180:	mov	r0, r7
   2c184:	bl	1386c <__assert_fail@plt+0x2434>
   2c188:	ldr	r0, [r8]
   2c18c:	bl	1386c <__assert_fail@plt+0x2434>
   2c190:	ldr	r0, [r8, #4]
   2c194:	bl	1386c <__assert_fail@plt+0x2434>
   2c198:	ldr	r0, [r8, #8]
   2c19c:	bl	1386c <__assert_fail@plt+0x2434>
   2c1a0:	ldr	r0, [r8, #12]
   2c1a4:	bl	1386c <__assert_fail@plt+0x2434>
   2c1a8:	mov	r0, r8
   2c1ac:	bl	1386c <__assert_fail@plt+0x2434>
   2c1b0:	ldr	r1, [fp, #12]
   2c1b4:	mov	r0, #12
   2c1b8:	str	r0, [r1]
   2c1bc:	b	2c0c8 <__assert_fail@plt+0x1ac90>
   2c1c0:	mov	r0, #996	; 0x3e4
   2c1c4:	bl	3554c <__assert_fail@plt+0x24114>
   2c1c8:	cmp	r0, #0
   2c1cc:	beq	2c0c8 <__assert_fail@plt+0x1ac90>
   2c1d0:	ldr	r1, [r6, #56]	; 0x38
   2c1d4:	str	r1, [r0]
   2c1d8:	mov	r1, #0
   2c1dc:	str	r1, [r6, #64]	; 0x40
   2c1e0:	str	r0, [r6, #56]	; 0x38
   2c1e4:	b	2c060 <__assert_fail@plt+0x1ac28>
   2c1e8:	push	{fp, lr}
   2c1ec:	mov	fp, sp
   2c1f0:	ldr	ip, [r1, #40]	; 0x28
   2c1f4:	ldr	r3, [r1, #56]	; 0x38
   2c1f8:	cmp	r3, ip
   2c1fc:	ble	2c27c <__assert_fail@plt+0x1ae44>
   2c200:	ldr	r3, [r1, #4]
   2c204:	ldrb	lr, [r3, ip]
   2c208:	strb	lr, [r0]
   2c20c:	ldr	r3, [r1, #80]	; 0x50
   2c210:	cmp	r3, #2
   2c214:	blt	2c238 <__assert_fail@plt+0x1ae00>
   2c218:	ldr	r3, [r1, #28]
   2c21c:	ldr	ip, [r1, #40]	; 0x28
   2c220:	cmp	ip, r3
   2c224:	beq	2c238 <__assert_fail@plt+0x1ae00>
   2c228:	ldr	r3, [r1, #8]
   2c22c:	ldr	r3, [r3, ip, lsl #2]
   2c230:	cmn	r3, #1
   2c234:	beq	2c32c <__assert_fail@plt+0x1aef4>
   2c238:	tst	r2, #1
   2c23c:	beq	2c290 <__assert_fail@plt+0x1ae58>
   2c240:	cmp	lr, #92	; 0x5c
   2c244:	bne	2c290 <__assert_fail@plt+0x1ae58>
   2c248:	ldr	r2, [r1, #40]	; 0x28
   2c24c:	ldr	r3, [r1, #48]	; 0x30
   2c250:	add	r2, r2, #1
   2c254:	cmp	r2, r3
   2c258:	bge	2c32c <__assert_fail@plt+0x1aef4>
   2c25c:	str	r2, [r1, #40]	; 0x28
   2c260:	ldr	r1, [r1, #4]
   2c264:	ldrb	r2, [r1, r2]
   2c268:	mov	r1, #1
   2c26c:	strb	r1, [r0, #4]
   2c270:	strb	r2, [r0]
   2c274:	mov	r0, r1
   2c278:	pop	{fp, pc}
   2c27c:	mov	r1, #2
   2c280:	strb	r1, [r0, #4]
   2c284:	mov	r1, #0
   2c288:	mov	r0, r1
   2c28c:	pop	{fp, pc}
   2c290:	cmp	lr, #92	; 0x5c
   2c294:	bgt	2c2e8 <__assert_fail@plt+0x1aeb0>
   2c298:	cmp	lr, #45	; 0x2d
   2c29c:	beq	2c300 <__assert_fail@plt+0x1aec8>
   2c2a0:	cmp	lr, #91	; 0x5b
   2c2a4:	bne	2c32c <__assert_fail@plt+0x1aef4>
   2c2a8:	ldr	r3, [r1, #40]	; 0x28
   2c2ac:	ldr	ip, [r1, #48]	; 0x30
   2c2b0:	add	r3, r3, #1
   2c2b4:	cmp	r3, ip
   2c2b8:	bge	2c31c <__assert_fail@plt+0x1aee4>
   2c2bc:	ldr	r1, [r1, #4]
   2c2c0:	ldrb	r1, [r1, r3]
   2c2c4:	cmp	r1, #61	; 0x3d
   2c2c8:	strb	r1, [r0]
   2c2cc:	beq	2c33c <__assert_fail@plt+0x1af04>
   2c2d0:	cmp	r1, #58	; 0x3a
   2c2d4:	beq	2c344 <__assert_fail@plt+0x1af0c>
   2c2d8:	cmp	r1, #46	; 0x2e
   2c2dc:	bne	2c324 <__assert_fail@plt+0x1aeec>
   2c2e0:	mov	r1, #26
   2c2e4:	b	2c350 <__assert_fail@plt+0x1af18>
   2c2e8:	cmp	lr, #93	; 0x5d
   2c2ec:	beq	2c308 <__assert_fail@plt+0x1aed0>
   2c2f0:	cmp	lr, #94	; 0x5e
   2c2f4:	bne	2c32c <__assert_fail@plt+0x1aef4>
   2c2f8:	mov	r1, #25
   2c2fc:	b	2c30c <__assert_fail@plt+0x1aed4>
   2c300:	mov	r1, #22
   2c304:	b	2c30c <__assert_fail@plt+0x1aed4>
   2c308:	mov	r1, #21
   2c30c:	strb	r1, [r0, #4]
   2c310:	mov	r1, #1
   2c314:	mov	r0, r1
   2c318:	pop	{fp, pc}
   2c31c:	mov	r1, #0
   2c320:	strb	r1, [r0]
   2c324:	mov	r1, #91	; 0x5b
   2c328:	strb	r1, [r0]
   2c32c:	mov	r1, #1
   2c330:	strb	r1, [r0, #4]
   2c334:	mov	r0, r1
   2c338:	pop	{fp, pc}
   2c33c:	mov	r1, #28
   2c340:	b	2c350 <__assert_fail@plt+0x1af18>
   2c344:	tst	r2, #4
   2c348:	beq	2c324 <__assert_fail@plt+0x1aeec>
   2c34c:	mov	r1, #30
   2c350:	strb	r1, [r0, #4]
   2c354:	mov	r1, #2
   2c358:	mov	r0, r1
   2c35c:	pop	{fp, pc}
   2c360:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2c364:	add	fp, sp, #24
   2c368:	sub	sp, sp, #8
   2c36c:	mov	r5, r2
   2c370:	ldr	r2, [r1, #80]	; 0x50
   2c374:	mov	r9, r0
   2c378:	ldr	r0, [r1, #40]	; 0x28
   2c37c:	cmp	r2, #1
   2c380:	beq	2c3f0 <__assert_fail@plt+0x1afb8>
   2c384:	ldr	r4, [r1, #28]
   2c388:	add	r2, r0, #1
   2c38c:	cmp	r2, r4
   2c390:	bge	2c3f0 <__assert_fail@plt+0x1afb8>
   2c394:	ldr	ip, [r1, #8]
   2c398:	mov	r2, #1
   2c39c:	add	r6, ip, r0, lsl #2
   2c3a0:	ldr	r7, [r6, r2, lsl #2]
   2c3a4:	cmn	r7, #1
   2c3a8:	bne	2c3c0 <__assert_fail@plt+0x1af88>
   2c3ac:	add	r2, r2, #1
   2c3b0:	add	r7, r0, r2
   2c3b4:	cmp	r7, r4
   2c3b8:	blt	2c3a0 <__assert_fail@plt+0x1af68>
   2c3bc:	b	2c3c8 <__assert_fail@plt+0x1af90>
   2c3c0:	cmp	r2, #2
   2c3c4:	bcc	2c3f0 <__assert_fail@plt+0x1afb8>
   2c3c8:	mov	r3, #1
   2c3cc:	str	r3, [r9]
   2c3d0:	ldr	r0, [ip, r0, lsl #2]
   2c3d4:	str	r0, [r9, #4]
   2c3d8:	ldr	r0, [r1, #40]	; 0x28
   2c3dc:	add	r0, r0, r2
   2c3e0:	str	r0, [r1, #40]	; 0x28
   2c3e4:	mov	r0, #0
   2c3e8:	sub	sp, fp, #24
   2c3ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c3f0:	add	r2, r0, r3
   2c3f4:	str	r2, [r1, #40]	; 0x28
   2c3f8:	ldrb	r6, [r5, #4]
   2c3fc:	sub	r0, r6, #22
   2c400:	cmp	r0, #8
   2c404:	bhi	2c60c <__assert_fail@plt+0x1b1d4>
   2c408:	add	r3, pc, #0
   2c40c:	ldr	pc, [r3, r0, lsl #2]
   2c410:	andeq	ip, r2, r4, ror #11
   2c414:	andeq	ip, r2, ip, lsl #12
   2c418:	andeq	ip, r2, ip, lsl #12
   2c41c:	andeq	ip, r2, ip, lsl #12
   2c420:	andeq	ip, r2, r4, lsr r4
   2c424:	andeq	ip, r2, ip, lsl #12
   2c428:	andeq	ip, r2, r4, lsr r4
   2c42c:	andeq	ip, r2, ip, lsl #12
   2c430:	andeq	ip, r2, r4, lsr r4
   2c434:	ldr	r3, [r1, #56]	; 0x38
   2c438:	mov	r0, #7
   2c43c:	cmp	r3, r2
   2c440:	ble	2c61c <__assert_fail@plt+0x1b1e4>
   2c444:	ldrb	r3, [r5]
   2c448:	mov	r2, #0
   2c44c:	b	2c458 <__assert_fail@plt+0x1b020>
   2c450:	ldrb	r6, [r5, #4]
   2c454:	add	r2, r2, #1
   2c458:	uxtb	r7, r6
   2c45c:	cmp	r7, #30
   2c460:	bne	2c470 <__assert_fail@plt+0x1b038>
   2c464:	ldrb	r7, [r1, #75]	; 0x4b
   2c468:	cmp	r7, #0
   2c46c:	bne	2c4c0 <__assert_fail@plt+0x1b088>
   2c470:	ldr	r4, [r1, #40]	; 0x28
   2c474:	ldr	r7, [r1, #4]
   2c478:	add	r6, r4, #1
   2c47c:	str	r6, [r1, #40]	; 0x28
   2c480:	ldrb	r4, [r7, r4]
   2c484:	ldr	r7, [r1, #56]	; 0x38
   2c488:	cmp	r7, r6
   2c48c:	ble	2c61c <__assert_fail@plt+0x1b1e4>
   2c490:	uxtb	r7, r4
   2c494:	cmp	r7, r3
   2c498:	bne	2c4ac <__assert_fail@plt+0x1b074>
   2c49c:	ldr	r7, [r1, #4]
   2c4a0:	ldrb	r7, [r7, r6]
   2c4a4:	cmp	r7, #93	; 0x5d
   2c4a8:	beq	2c594 <__assert_fail@plt+0x1b15c>
   2c4ac:	ldr	r7, [r9, #4]
   2c4b0:	cmp	r2, #30
   2c4b4:	strb	r4, [r7, r2]
   2c4b8:	bls	2c450 <__assert_fail@plt+0x1b018>
   2c4bc:	b	2c61c <__assert_fail@plt+0x1b1e4>
   2c4c0:	ldrb	r7, [r1, #76]	; 0x4c
   2c4c4:	cmp	r7, #0
   2c4c8:	beq	2c560 <__assert_fail@plt+0x1b128>
   2c4cc:	ldr	lr, [r1, #28]
   2c4d0:	ldr	ip, [r1, #40]	; 0x28
   2c4d4:	cmp	ip, lr
   2c4d8:	beq	2c4ec <__assert_fail@plt+0x1b0b4>
   2c4dc:	ldr	r4, [r1, #8]
   2c4e0:	ldr	r4, [r4, ip, lsl #2]
   2c4e4:	cmn	r4, #1
   2c4e8:	beq	2c580 <__assert_fail@plt+0x1b148>
   2c4ec:	ldr	r6, [r1, #12]
   2c4f0:	ldr	r7, [r1, #24]
   2c4f4:	ldr	r4, [r1]
   2c4f8:	ldr	r6, [r6, ip, lsl #2]
   2c4fc:	add	r6, r7, r6
   2c500:	add	r4, r4, r6
   2c504:	ldrsb	r4, [r4]
   2c508:	cmn	r4, #1
   2c50c:	ble	2c580 <__assert_fail@plt+0x1b148>
   2c510:	ldr	r7, [r1, #80]	; 0x50
   2c514:	mov	r6, #1
   2c518:	cmp	r7, #1
   2c51c:	beq	2c554 <__assert_fail@plt+0x1b11c>
   2c520:	add	r7, ip, #1
   2c524:	cmp	r7, lr
   2c528:	bge	2c554 <__assert_fail@plt+0x1b11c>
   2c52c:	ldr	r6, [r1, #8]
   2c530:	add	r8, r6, ip, lsl #2
   2c534:	mov	r6, #1
   2c538:	ldr	r7, [r8, r6, lsl #2]
   2c53c:	cmn	r7, #1
   2c540:	bne	2c554 <__assert_fail@plt+0x1b11c>
   2c544:	add	r6, r6, #1
   2c548:	add	r7, ip, r6
   2c54c:	cmp	r7, lr
   2c550:	blt	2c538 <__assert_fail@plt+0x1b100>
   2c554:	add	r6, r6, ip
   2c558:	str	r6, [r1, #40]	; 0x28
   2c55c:	b	2c484 <__assert_fail@plt+0x1b04c>
   2c560:	ldr	r7, [r1, #40]	; 0x28
   2c564:	ldr	r4, [r1, #24]
   2c568:	ldr	ip, [r1]
   2c56c:	add	r6, r7, #1
   2c570:	add	r7, r7, r4
   2c574:	str	r6, [r1, #40]	; 0x28
   2c578:	ldrb	r4, [ip, r7]
   2c57c:	b	2c484 <__assert_fail@plt+0x1b04c>
   2c580:	add	r6, ip, #1
   2c584:	str	r6, [r1, #40]	; 0x28
   2c588:	ldr	r7, [r1, #4]
   2c58c:	ldrb	r4, [r7, ip]
   2c590:	b	2c484 <__assert_fail@plt+0x1b04c>
   2c594:	add	r0, r6, #1
   2c598:	str	r0, [r1, #40]	; 0x28
   2c59c:	mov	r0, #0
   2c5a0:	ldr	r1, [r9, #4]
   2c5a4:	strb	r0, [r1, r2]
   2c5a8:	ldrb	r1, [r5, #4]
   2c5ac:	cmp	r1, #30
   2c5b0:	beq	2c5cc <__assert_fail@plt+0x1b194>
   2c5b4:	cmp	r1, #28
   2c5b8:	beq	2c5d4 <__assert_fail@plt+0x1b19c>
   2c5bc:	cmp	r1, #26
   2c5c0:	bne	2c61c <__assert_fail@plt+0x1b1e4>
   2c5c4:	mov	r1, #3
   2c5c8:	b	2c5d8 <__assert_fail@plt+0x1b1a0>
   2c5cc:	mov	r1, #4
   2c5d0:	b	2c5d8 <__assert_fail@plt+0x1b1a0>
   2c5d4:	mov	r1, #2
   2c5d8:	str	r1, [r9]
   2c5dc:	sub	sp, fp, #24
   2c5e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c5e4:	ldr	r0, [fp, #12]
   2c5e8:	cmp	r0, #0
   2c5ec:	bne	2c60c <__assert_fail@plt+0x1b1d4>
   2c5f0:	ldr	r2, [fp, #8]
   2c5f4:	mov	r0, sp
   2c5f8:	bl	2c1e8 <__assert_fail@plt+0x1adb0>
   2c5fc:	ldrb	r1, [sp, #4]
   2c600:	mov	r0, #11
   2c604:	cmp	r1, #21
   2c608:	bne	2c61c <__assert_fail@plt+0x1b1e4>
   2c60c:	mov	r0, #0
   2c610:	str	r0, [r9]
   2c614:	ldrb	r1, [r5]
   2c618:	strb	r1, [r9, #4]
   2c61c:	sub	sp, fp, #24
   2c620:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c624:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2c628:	add	fp, sp, #24
   2c62c:	mov	r8, r0
   2c630:	ldrb	r0, [fp, #14]
   2c634:	ldr	r6, [fp, #8]
   2c638:	mov	r5, r3
   2c63c:	mov	r7, r2
   2c640:	mov	r4, r1
   2c644:	tst	r0, #64	; 0x40
   2c648:	beq	2c684 <__assert_fail@plt+0x1b24c>
   2c64c:	movw	r1, #32090	; 0x7d5a
   2c650:	mov	r0, r6
   2c654:	movt	r1, #3
   2c658:	bl	11180 <strcmp@plt>
   2c65c:	cmp	r0, #0
   2c660:	beq	2c67c <__assert_fail@plt+0x1b244>
   2c664:	movw	r1, #32096	; 0x7d60
   2c668:	mov	r0, r6
   2c66c:	movt	r1, #3
   2c670:	bl	11180 <strcmp@plt>
   2c674:	cmp	r0, #0
   2c678:	bne	2c684 <__assert_fail@plt+0x1b24c>
   2c67c:	movw	r6, #32102	; 0x7d66
   2c680:	movt	r6, #3
   2c684:	ldr	r0, [r5]
   2c688:	ldr	r1, [r7, #36]	; 0x24
   2c68c:	cmp	r0, r1
   2c690:	beq	2cbb0 <__assert_fail@plt+0x1b778>
   2c694:	mov	r0, r6
   2c698:	bl	1115c <wctype@plt>
   2c69c:	ldr	r2, [r7, #36]	; 0x24
   2c6a0:	ldr	r1, [r7, #12]
   2c6a4:	add	r3, r2, #1
   2c6a8:	str	r3, [r7, #36]	; 0x24
   2c6ac:	str	r0, [r1, r2, lsl #2]
   2c6b0:	movw	r1, #32078	; 0x7d4e
   2c6b4:	mov	r0, r6
   2c6b8:	movt	r1, #3
   2c6bc:	bl	11180 <strcmp@plt>
   2c6c0:	cmp	r0, #0
   2c6c4:	beq	2c828 <__assert_fail@plt+0x1b3f0>
   2c6c8:	movw	r1, #32108	; 0x7d6c
   2c6cc:	mov	r0, r6
   2c6d0:	movt	r1, #3
   2c6d4:	bl	11180 <strcmp@plt>
   2c6d8:	cmp	r0, #0
   2c6dc:	beq	2c87c <__assert_fail@plt+0x1b444>
   2c6e0:	movw	r1, #32096	; 0x7d60
   2c6e4:	mov	r0, r6
   2c6e8:	movt	r1, #3
   2c6ec:	bl	11180 <strcmp@plt>
   2c6f0:	cmp	r0, #0
   2c6f4:	beq	2c8d0 <__assert_fail@plt+0x1b498>
   2c6f8:	movw	r1, #32084	; 0x7d54
   2c6fc:	mov	r0, r6
   2c700:	movt	r1, #3
   2c704:	bl	11180 <strcmp@plt>
   2c708:	cmp	r0, #0
   2c70c:	beq	2c924 <__assert_fail@plt+0x1b4ec>
   2c710:	movw	r1, #32102	; 0x7d66
   2c714:	mov	r0, r6
   2c718:	movt	r1, #3
   2c71c:	bl	11180 <strcmp@plt>
   2c720:	cmp	r0, #0
   2c724:	beq	2c978 <__assert_fail@plt+0x1b540>
   2c728:	movw	r1, #32139	; 0x7d8b
   2c72c:	mov	r0, r6
   2c730:	movt	r1, #3
   2c734:	bl	11180 <strcmp@plt>
   2c738:	cmp	r0, #0
   2c73c:	beq	2c9cc <__assert_fail@plt+0x1b594>
   2c740:	movw	r1, #32114	; 0x7d72
   2c744:	mov	r0, r6
   2c748:	movt	r1, #3
   2c74c:	bl	11180 <strcmp@plt>
   2c750:	cmp	r0, #0
   2c754:	beq	2ca20 <__assert_fail@plt+0x1b5e8>
   2c758:	movw	r1, #32090	; 0x7d5a
   2c75c:	mov	r0, r6
   2c760:	movt	r1, #3
   2c764:	bl	11180 <strcmp@plt>
   2c768:	cmp	r0, #0
   2c76c:	beq	2ca70 <__assert_fail@plt+0x1b638>
   2c770:	movw	r1, #32120	; 0x7d78
   2c774:	mov	r0, r6
   2c778:	movt	r1, #3
   2c77c:	bl	11180 <strcmp@plt>
   2c780:	cmp	r0, #0
   2c784:	beq	2cac0 <__assert_fail@plt+0x1b688>
   2c788:	movw	r1, #32126	; 0x7d7e
   2c78c:	mov	r0, r6
   2c790:	movt	r1, #3
   2c794:	bl	11180 <strcmp@plt>
   2c798:	cmp	r0, #0
   2c79c:	beq	2cb10 <__assert_fail@plt+0x1b6d8>
   2c7a0:	movw	r1, #32132	; 0x7d84
   2c7a4:	mov	r0, r6
   2c7a8:	movt	r1, #3
   2c7ac:	bl	11180 <strcmp@plt>
   2c7b0:	cmp	r0, #0
   2c7b4:	beq	2cb60 <__assert_fail@plt+0x1b728>
   2c7b8:	movw	r1, #32138	; 0x7d8a
   2c7bc:	mov	r0, r6
   2c7c0:	movt	r1, #3
   2c7c4:	bl	11180 <strcmp@plt>
   2c7c8:	mov	r1, r0
   2c7cc:	mov	r0, #4
   2c7d0:	cmp	r1, #0
   2c7d4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c7d8:	bl	11318 <__ctype_b_loc@plt>
   2c7dc:	ldr	r1, [r0]
   2c7e0:	mov	r2, #0
   2c7e4:	mov	r3, #1
   2c7e8:	cmp	r8, #0
   2c7ec:	bne	2cd18 <__assert_fail@plt+0x1b8e0>
   2c7f0:	ldrb	r0, [r1, #1]
   2c7f4:	tst	r0, #16
   2c7f8:	beq	2c810 <__assert_fail@plt+0x1b3d8>
   2c7fc:	ubfx	r0, r2, #5, #3
   2c800:	and	r6, r2, #31
   2c804:	ldr	r7, [r4, r0, lsl #2]
   2c808:	orr	r7, r7, r3, lsl r6
   2c80c:	str	r7, [r4, r0, lsl #2]
   2c810:	add	r2, r2, #1
   2c814:	add	r1, r1, #2
   2c818:	mov	r0, #0
   2c81c:	cmp	r2, #256	; 0x100
   2c820:	bne	2c7f0 <__assert_fail@plt+0x1b3b8>
   2c824:	b	2cbac <__assert_fail@plt+0x1b774>
   2c828:	bl	11318 <__ctype_b_loc@plt>
   2c82c:	ldr	r1, [r0]
   2c830:	cmp	r8, #0
   2c834:	bne	2cc54 <__assert_fail@plt+0x1b81c>
   2c838:	mov	r0, #0
   2c83c:	mov	r2, #1
   2c840:	b	2c858 <__assert_fail@plt+0x1b420>
   2c844:	add	r0, r0, #1
   2c848:	add	r1, r1, #2
   2c84c:	cmp	r0, #256	; 0x100
   2c850:	moveq	r0, #0
   2c854:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c858:	ldrb	r3, [r1]
   2c85c:	tst	r3, #8
   2c860:	beq	2c844 <__assert_fail@plt+0x1b40c>
   2c864:	ubfx	r3, r0, #5, #3
   2c868:	and	r6, r0, #31
   2c86c:	ldr	r7, [r4, r3, lsl #2]
   2c870:	orr	r7, r7, r2, lsl r6
   2c874:	str	r7, [r4, r3, lsl #2]
   2c878:	b	2c844 <__assert_fail@plt+0x1b40c>
   2c87c:	bl	11318 <__ctype_b_loc@plt>
   2c880:	ldr	r1, [r0]
   2c884:	cmp	r8, #0
   2c888:	bne	2ccd4 <__assert_fail@plt+0x1b89c>
   2c88c:	mov	r0, #0
   2c890:	mov	r2, #1
   2c894:	b	2c8ac <__assert_fail@plt+0x1b474>
   2c898:	add	r0, r0, #1
   2c89c:	add	r1, r1, #2
   2c8a0:	cmp	r0, #256	; 0x100
   2c8a4:	moveq	r0, #0
   2c8a8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c8ac:	ldrb	r3, [r1]
   2c8b0:	tst	r3, #2
   2c8b4:	beq	2c898 <__assert_fail@plt+0x1b460>
   2c8b8:	ubfx	r3, r0, #5, #3
   2c8bc:	and	r6, r0, #31
   2c8c0:	ldr	r7, [r4, r3, lsl #2]
   2c8c4:	orr	r7, r7, r2, lsl r6
   2c8c8:	str	r7, [r4, r3, lsl #2]
   2c8cc:	b	2c898 <__assert_fail@plt+0x1b460>
   2c8d0:	bl	11318 <__ctype_b_loc@plt>
   2c8d4:	ldr	r1, [r0]
   2c8d8:	cmp	r8, #0
   2c8dc:	bne	2cd90 <__assert_fail@plt+0x1b958>
   2c8e0:	mov	r0, #0
   2c8e4:	mov	r2, #1
   2c8e8:	b	2c900 <__assert_fail@plt+0x1b4c8>
   2c8ec:	add	r0, r0, #1
   2c8f0:	add	r1, r1, #2
   2c8f4:	cmp	r0, #256	; 0x100
   2c8f8:	moveq	r0, #0
   2c8fc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c900:	ldrb	r3, [r1, #1]
   2c904:	tst	r3, #2
   2c908:	beq	2c8ec <__assert_fail@plt+0x1b4b4>
   2c90c:	ubfx	r3, r0, #5, #3
   2c910:	and	r6, r0, #31
   2c914:	ldr	r7, [r4, r3, lsl #2]
   2c918:	orr	r7, r7, r2, lsl r6
   2c91c:	str	r7, [r4, r3, lsl #2]
   2c920:	b	2c8ec <__assert_fail@plt+0x1b4b4>
   2c924:	bl	11318 <__ctype_b_loc@plt>
   2c928:	ldr	r1, [r0]
   2c92c:	cmp	r8, #0
   2c930:	bne	2ce10 <__assert_fail@plt+0x1b9d8>
   2c934:	mov	r0, #0
   2c938:	mov	r2, #1
   2c93c:	b	2c954 <__assert_fail@plt+0x1b51c>
   2c940:	add	r0, r0, #1
   2c944:	add	r1, r1, #2
   2c948:	cmp	r0, #256	; 0x100
   2c94c:	moveq	r0, #0
   2c950:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c954:	ldrb	r3, [r1, #1]
   2c958:	tst	r3, #32
   2c95c:	beq	2c940 <__assert_fail@plt+0x1b508>
   2c960:	ubfx	r3, r0, #5, #3
   2c964:	and	r6, r0, #31
   2c968:	ldr	r7, [r4, r3, lsl #2]
   2c96c:	orr	r7, r7, r2, lsl r6
   2c970:	str	r7, [r4, r3, lsl #2]
   2c974:	b	2c940 <__assert_fail@plt+0x1b508>
   2c978:	bl	11318 <__ctype_b_loc@plt>
   2c97c:	ldr	r1, [r0]
   2c980:	cmp	r8, #0
   2c984:	bne	2ce54 <__assert_fail@plt+0x1ba1c>
   2c988:	mov	r0, #0
   2c98c:	mov	r2, #1
   2c990:	b	2c9a8 <__assert_fail@plt+0x1b570>
   2c994:	add	r0, r0, #1
   2c998:	add	r1, r1, #2
   2c99c:	cmp	r0, #256	; 0x100
   2c9a0:	moveq	r0, #0
   2c9a4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c9a8:	ldrb	r3, [r1, #1]
   2c9ac:	tst	r3, #4
   2c9b0:	beq	2c994 <__assert_fail@plt+0x1b55c>
   2c9b4:	ubfx	r3, r0, #5, #3
   2c9b8:	and	r6, r0, #31
   2c9bc:	ldr	r7, [r4, r3, lsl #2]
   2c9c0:	orr	r7, r7, r2, lsl r6
   2c9c4:	str	r7, [r4, r3, lsl #2]
   2c9c8:	b	2c994 <__assert_fail@plt+0x1b55c>
   2c9cc:	bl	11318 <__ctype_b_loc@plt>
   2c9d0:	ldr	r1, [r0]
   2c9d4:	cmp	r8, #0
   2c9d8:	bne	2ce98 <__assert_fail@plt+0x1ba60>
   2c9dc:	mov	r0, #0
   2c9e0:	mov	r2, #1
   2c9e4:	b	2c9fc <__assert_fail@plt+0x1b5c4>
   2c9e8:	add	r0, r0, #1
   2c9ec:	add	r1, r1, #2
   2c9f0:	cmp	r0, #256	; 0x100
   2c9f4:	moveq	r0, #0
   2c9f8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c9fc:	ldrb	r3, [r1, #1]
   2ca00:	tst	r3, #8
   2ca04:	beq	2c9e8 <__assert_fail@plt+0x1b5b0>
   2ca08:	ubfx	r3, r0, #5, #3
   2ca0c:	and	r6, r0, #31
   2ca10:	ldr	r7, [r4, r3, lsl #2]
   2ca14:	orr	r7, r7, r2, lsl r6
   2ca18:	str	r7, [r4, r3, lsl #2]
   2ca1c:	b	2c9e8 <__assert_fail@plt+0x1b5b0>
   2ca20:	bl	11318 <__ctype_b_loc@plt>
   2ca24:	ldr	r1, [r0]
   2ca28:	mov	r2, #0
   2ca2c:	mov	r3, #1
   2ca30:	cmp	r8, #0
   2ca34:	bne	2cbdc <__assert_fail@plt+0x1b7a4>
   2ca38:	ldrb	r0, [r1, #1]
   2ca3c:	tst	r0, #64	; 0x40
   2ca40:	beq	2ca58 <__assert_fail@plt+0x1b620>
   2ca44:	ubfx	r0, r2, #5, #3
   2ca48:	and	r6, r2, #31
   2ca4c:	ldr	r7, [r4, r0, lsl #2]
   2ca50:	orr	r7, r7, r3, lsl r6
   2ca54:	str	r7, [r4, r0, lsl #2]
   2ca58:	add	r2, r2, #1
   2ca5c:	add	r1, r1, #2
   2ca60:	mov	r0, #0
   2ca64:	cmp	r2, #256	; 0x100
   2ca68:	bne	2ca38 <__assert_fail@plt+0x1b600>
   2ca6c:	b	2cbac <__assert_fail@plt+0x1b774>
   2ca70:	bl	11318 <__ctype_b_loc@plt>
   2ca74:	ldr	r1, [r0]
   2ca78:	mov	r2, #0
   2ca7c:	mov	r3, #1
   2ca80:	cmp	r8, #0
   2ca84:	bne	2cc18 <__assert_fail@plt+0x1b7e0>
   2ca88:	ldrb	r0, [r1, #1]
   2ca8c:	tst	r0, #1
   2ca90:	beq	2caa8 <__assert_fail@plt+0x1b670>
   2ca94:	ubfx	r0, r2, #5, #3
   2ca98:	and	r6, r2, #31
   2ca9c:	ldr	r7, [r4, r0, lsl #2]
   2caa0:	orr	r7, r7, r3, lsl r6
   2caa4:	str	r7, [r4, r0, lsl #2]
   2caa8:	add	r2, r2, #1
   2caac:	add	r1, r1, #2
   2cab0:	mov	r0, #0
   2cab4:	cmp	r2, #256	; 0x100
   2cab8:	bne	2ca88 <__assert_fail@plt+0x1b650>
   2cabc:	b	2cbac <__assert_fail@plt+0x1b774>
   2cac0:	bl	11318 <__ctype_b_loc@plt>
   2cac4:	ldr	r1, [r0]
   2cac8:	mov	r2, #0
   2cacc:	mov	r3, #1
   2cad0:	cmp	r8, #0
   2cad4:	bne	2cc98 <__assert_fail@plt+0x1b860>
   2cad8:	ldrb	r0, [r1]
   2cadc:	tst	r0, #1
   2cae0:	beq	2caf8 <__assert_fail@plt+0x1b6c0>
   2cae4:	ubfx	r0, r2, #5, #3
   2cae8:	and	r6, r2, #31
   2caec:	ldr	r7, [r4, r0, lsl #2]
   2caf0:	orr	r7, r7, r3, lsl r6
   2caf4:	str	r7, [r4, r0, lsl #2]
   2caf8:	add	r2, r2, #1
   2cafc:	add	r1, r1, #2
   2cb00:	mov	r0, #0
   2cb04:	cmp	r2, #256	; 0x100
   2cb08:	bne	2cad8 <__assert_fail@plt+0x1b6a0>
   2cb0c:	b	2cbac <__assert_fail@plt+0x1b774>
   2cb10:	bl	11318 <__ctype_b_loc@plt>
   2cb14:	ldr	r1, [r0]
   2cb18:	mov	r2, #0
   2cb1c:	mov	r3, #1
   2cb20:	cmp	r8, #0
   2cb24:	bne	2cd54 <__assert_fail@plt+0x1b91c>
   2cb28:	ldrsh	r0, [r1]
   2cb2c:	cmn	r0, #1
   2cb30:	bgt	2cb48 <__assert_fail@plt+0x1b710>
   2cb34:	ubfx	r0, r2, #5, #3
   2cb38:	and	r6, r2, #31
   2cb3c:	ldr	r7, [r4, r0, lsl #2]
   2cb40:	orr	r7, r7, r3, lsl r6
   2cb44:	str	r7, [r4, r0, lsl #2]
   2cb48:	add	r2, r2, #1
   2cb4c:	add	r1, r1, #2
   2cb50:	mov	r0, #0
   2cb54:	cmp	r2, #256	; 0x100
   2cb58:	bne	2cb28 <__assert_fail@plt+0x1b6f0>
   2cb5c:	b	2cbac <__assert_fail@plt+0x1b774>
   2cb60:	bl	11318 <__ctype_b_loc@plt>
   2cb64:	ldr	r1, [r0]
   2cb68:	mov	r2, #0
   2cb6c:	mov	r3, #1
   2cb70:	cmp	r8, #0
   2cb74:	bne	2cdd4 <__assert_fail@plt+0x1b99c>
   2cb78:	ldrb	r0, [r1]
   2cb7c:	tst	r0, #4
   2cb80:	beq	2cb98 <__assert_fail@plt+0x1b760>
   2cb84:	ubfx	r0, r2, #5, #3
   2cb88:	and	r6, r2, #31
   2cb8c:	ldr	r7, [r4, r0, lsl #2]
   2cb90:	orr	r7, r7, r3, lsl r6
   2cb94:	str	r7, [r4, r0, lsl #2]
   2cb98:	add	r2, r2, #1
   2cb9c:	add	r1, r1, #2
   2cba0:	mov	r0, #0
   2cba4:	cmp	r2, #256	; 0x100
   2cba8:	bne	2cb78 <__assert_fail@plt+0x1b740>
   2cbac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2cbb0:	mov	r1, #1
   2cbb4:	orr	r9, r1, r0, lsl #1
   2cbb8:	ldr	r0, [r7, #12]
   2cbbc:	lsl	r1, r9, #2
   2cbc0:	bl	3557c <__assert_fail@plt+0x24144>
   2cbc4:	cmp	r0, #0
   2cbc8:	moveq	r0, #12
   2cbcc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2cbd0:	str	r0, [r7, #12]
   2cbd4:	str	r9, [r5]
   2cbd8:	b	2c694 <__assert_fail@plt+0x1b25c>
   2cbdc:	ldrb	r0, [r1, #1]
   2cbe0:	tst	r0, #64	; 0x40
   2cbe4:	beq	2cc00 <__assert_fail@plt+0x1b7c8>
   2cbe8:	ldrb	r0, [r8, r2]
   2cbec:	ubfx	r7, r0, #5, #3
   2cbf0:	and	r0, r0, #31
   2cbf4:	ldr	r6, [r4, r7, lsl #2]
   2cbf8:	orr	r0, r6, r3, lsl r0
   2cbfc:	str	r0, [r4, r7, lsl #2]
   2cc00:	add	r2, r2, #1
   2cc04:	add	r1, r1, #2
   2cc08:	mov	r0, #0
   2cc0c:	cmp	r2, #256	; 0x100
   2cc10:	bne	2cbdc <__assert_fail@plt+0x1b7a4>
   2cc14:	b	2cbac <__assert_fail@plt+0x1b774>
   2cc18:	ldrb	r0, [r1, #1]
   2cc1c:	tst	r0, #1
   2cc20:	beq	2cc3c <__assert_fail@plt+0x1b804>
   2cc24:	ldrb	r0, [r8, r2]
   2cc28:	ubfx	r7, r0, #5, #3
   2cc2c:	and	r0, r0, #31
   2cc30:	ldr	r6, [r4, r7, lsl #2]
   2cc34:	orr	r0, r6, r3, lsl r0
   2cc38:	str	r0, [r4, r7, lsl #2]
   2cc3c:	add	r2, r2, #1
   2cc40:	add	r1, r1, #2
   2cc44:	mov	r0, #0
   2cc48:	cmp	r2, #256	; 0x100
   2cc4c:	bne	2cc18 <__assert_fail@plt+0x1b7e0>
   2cc50:	b	2cbac <__assert_fail@plt+0x1b774>
   2cc54:	mov	r2, #0
   2cc58:	mov	r3, #1
   2cc5c:	ldrb	r0, [r1]
   2cc60:	tst	r0, #8
   2cc64:	beq	2cc80 <__assert_fail@plt+0x1b848>
   2cc68:	ldrb	r0, [r8, r2]
   2cc6c:	ubfx	r7, r0, #5, #3
   2cc70:	and	r0, r0, #31
   2cc74:	ldr	r6, [r4, r7, lsl #2]
   2cc78:	orr	r0, r6, r3, lsl r0
   2cc7c:	str	r0, [r4, r7, lsl #2]
   2cc80:	add	r2, r2, #1
   2cc84:	add	r1, r1, #2
   2cc88:	mov	r0, #0
   2cc8c:	cmp	r2, #256	; 0x100
   2cc90:	bne	2cc5c <__assert_fail@plt+0x1b824>
   2cc94:	b	2cbac <__assert_fail@plt+0x1b774>
   2cc98:	ldrb	r0, [r1]
   2cc9c:	tst	r0, #1
   2cca0:	beq	2ccbc <__assert_fail@plt+0x1b884>
   2cca4:	ldrb	r0, [r8, r2]
   2cca8:	ubfx	r7, r0, #5, #3
   2ccac:	and	r0, r0, #31
   2ccb0:	ldr	r6, [r4, r7, lsl #2]
   2ccb4:	orr	r0, r6, r3, lsl r0
   2ccb8:	str	r0, [r4, r7, lsl #2]
   2ccbc:	add	r2, r2, #1
   2ccc0:	add	r1, r1, #2
   2ccc4:	mov	r0, #0
   2ccc8:	cmp	r2, #256	; 0x100
   2cccc:	bne	2cc98 <__assert_fail@plt+0x1b860>
   2ccd0:	b	2cbac <__assert_fail@plt+0x1b774>
   2ccd4:	mov	r2, #0
   2ccd8:	mov	r3, #1
   2ccdc:	ldrb	r0, [r1]
   2cce0:	tst	r0, #2
   2cce4:	beq	2cd00 <__assert_fail@plt+0x1b8c8>
   2cce8:	ldrb	r0, [r8, r2]
   2ccec:	ubfx	r7, r0, #5, #3
   2ccf0:	and	r0, r0, #31
   2ccf4:	ldr	r6, [r4, r7, lsl #2]
   2ccf8:	orr	r0, r6, r3, lsl r0
   2ccfc:	str	r0, [r4, r7, lsl #2]
   2cd00:	add	r2, r2, #1
   2cd04:	add	r1, r1, #2
   2cd08:	mov	r0, #0
   2cd0c:	cmp	r2, #256	; 0x100
   2cd10:	bne	2ccdc <__assert_fail@plt+0x1b8a4>
   2cd14:	b	2cbac <__assert_fail@plt+0x1b774>
   2cd18:	ldrb	r0, [r1, #1]
   2cd1c:	tst	r0, #16
   2cd20:	beq	2cd3c <__assert_fail@plt+0x1b904>
   2cd24:	ldrb	r0, [r8, r2]
   2cd28:	ubfx	r7, r0, #5, #3
   2cd2c:	and	r0, r0, #31
   2cd30:	ldr	r6, [r4, r7, lsl #2]
   2cd34:	orr	r0, r6, r3, lsl r0
   2cd38:	str	r0, [r4, r7, lsl #2]
   2cd3c:	add	r2, r2, #1
   2cd40:	add	r1, r1, #2
   2cd44:	mov	r0, #0
   2cd48:	cmp	r2, #256	; 0x100
   2cd4c:	bne	2cd18 <__assert_fail@plt+0x1b8e0>
   2cd50:	b	2cbac <__assert_fail@plt+0x1b774>
   2cd54:	ldrsh	r0, [r1]
   2cd58:	cmn	r0, #1
   2cd5c:	bgt	2cd78 <__assert_fail@plt+0x1b940>
   2cd60:	ldrb	r0, [r8, r2]
   2cd64:	ubfx	r7, r0, #5, #3
   2cd68:	and	r0, r0, #31
   2cd6c:	ldr	r6, [r4, r7, lsl #2]
   2cd70:	orr	r0, r6, r3, lsl r0
   2cd74:	str	r0, [r4, r7, lsl #2]
   2cd78:	add	r2, r2, #1
   2cd7c:	add	r1, r1, #2
   2cd80:	mov	r0, #0
   2cd84:	cmp	r2, #256	; 0x100
   2cd88:	bne	2cd54 <__assert_fail@plt+0x1b91c>
   2cd8c:	b	2cbac <__assert_fail@plt+0x1b774>
   2cd90:	mov	r2, #0
   2cd94:	mov	r3, #1
   2cd98:	ldrb	r0, [r1, #1]
   2cd9c:	tst	r0, #2
   2cda0:	beq	2cdbc <__assert_fail@plt+0x1b984>
   2cda4:	ldrb	r0, [r8, r2]
   2cda8:	ubfx	r7, r0, #5, #3
   2cdac:	and	r0, r0, #31
   2cdb0:	ldr	r6, [r4, r7, lsl #2]
   2cdb4:	orr	r0, r6, r3, lsl r0
   2cdb8:	str	r0, [r4, r7, lsl #2]
   2cdbc:	add	r2, r2, #1
   2cdc0:	add	r1, r1, #2
   2cdc4:	mov	r0, #0
   2cdc8:	cmp	r2, #256	; 0x100
   2cdcc:	bne	2cd98 <__assert_fail@plt+0x1b960>
   2cdd0:	b	2cbac <__assert_fail@plt+0x1b774>
   2cdd4:	ldrb	r0, [r1]
   2cdd8:	tst	r0, #4
   2cddc:	beq	2cdf8 <__assert_fail@plt+0x1b9c0>
   2cde0:	ldrb	r0, [r8, r2]
   2cde4:	ubfx	r7, r0, #5, #3
   2cde8:	and	r0, r0, #31
   2cdec:	ldr	r6, [r4, r7, lsl #2]
   2cdf0:	orr	r0, r6, r3, lsl r0
   2cdf4:	str	r0, [r4, r7, lsl #2]
   2cdf8:	add	r2, r2, #1
   2cdfc:	add	r1, r1, #2
   2ce00:	mov	r0, #0
   2ce04:	cmp	r2, #256	; 0x100
   2ce08:	bne	2cdd4 <__assert_fail@plt+0x1b99c>
   2ce0c:	b	2cbac <__assert_fail@plt+0x1b774>
   2ce10:	mov	r2, #0
   2ce14:	mov	r3, #1
   2ce18:	ldrb	r0, [r1, #1]
   2ce1c:	tst	r0, #32
   2ce20:	beq	2ce3c <__assert_fail@plt+0x1ba04>
   2ce24:	ldrb	r0, [r8, r2]
   2ce28:	ubfx	r7, r0, #5, #3
   2ce2c:	and	r0, r0, #31
   2ce30:	ldr	r6, [r4, r7, lsl #2]
   2ce34:	orr	r0, r6, r3, lsl r0
   2ce38:	str	r0, [r4, r7, lsl #2]
   2ce3c:	add	r2, r2, #1
   2ce40:	add	r1, r1, #2
   2ce44:	mov	r0, #0
   2ce48:	cmp	r2, #256	; 0x100
   2ce4c:	bne	2ce18 <__assert_fail@plt+0x1b9e0>
   2ce50:	b	2cbac <__assert_fail@plt+0x1b774>
   2ce54:	mov	r2, #0
   2ce58:	mov	r3, #1
   2ce5c:	ldrb	r0, [r1, #1]
   2ce60:	tst	r0, #4
   2ce64:	beq	2ce80 <__assert_fail@plt+0x1ba48>
   2ce68:	ldrb	r0, [r8, r2]
   2ce6c:	ubfx	r7, r0, #5, #3
   2ce70:	and	r0, r0, #31
   2ce74:	ldr	r6, [r4, r7, lsl #2]
   2ce78:	orr	r0, r6, r3, lsl r0
   2ce7c:	str	r0, [r4, r7, lsl #2]
   2ce80:	add	r2, r2, #1
   2ce84:	add	r1, r1, #2
   2ce88:	mov	r0, #0
   2ce8c:	cmp	r2, #256	; 0x100
   2ce90:	bne	2ce5c <__assert_fail@plt+0x1ba24>
   2ce94:	b	2cbac <__assert_fail@plt+0x1b774>
   2ce98:	mov	r2, #0
   2ce9c:	mov	r3, #1
   2cea0:	ldrb	r0, [r1, #1]
   2cea4:	tst	r0, #8
   2cea8:	beq	2cec4 <__assert_fail@plt+0x1ba8c>
   2ceac:	ldrb	r0, [r8, r2]
   2ceb0:	ubfx	r7, r0, #5, #3
   2ceb4:	and	r0, r0, #31
   2ceb8:	ldr	r6, [r4, r7, lsl #2]
   2cebc:	orr	r0, r6, r3, lsl r0
   2cec0:	str	r0, [r4, r7, lsl #2]
   2cec4:	add	r2, r2, #1
   2cec8:	add	r1, r1, #2
   2cecc:	mov	r0, #0
   2ced0:	cmp	r2, #256	; 0x100
   2ced4:	bne	2cea0 <__assert_fail@plt+0x1ba68>
   2ced8:	b	2cbac <__assert_fail@plt+0x1b774>
   2cedc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2cee0:	add	fp, sp, #24
   2cee4:	ldrb	r3, [r1, #24]
   2cee8:	ldr	r2, [r1, #28]
   2ceec:	mov	r4, #0
   2cef0:	sub	r3, r3, #2
   2cef4:	cmp	r3, #14
   2cef8:	bhi	2d01c <__assert_fail@plt+0x1bbe4>
   2cefc:	add	r7, pc, #0
   2cf00:	ldr	pc, [r7, r3, lsl #2]
   2cf04:	andeq	sp, r2, r0, asr r0
   2cf08:	andeq	sp, r2, ip, lsl r0
   2cf0c:	andeq	sp, r2, r4, lsr r0
   2cf10:	andeq	sp, r2, ip, lsl r0
   2cf14:	andeq	sp, r2, ip, lsl r0
   2cf18:	andeq	sp, r2, ip, lsl r0
   2cf1c:	andeq	ip, r2, r0, asr #30
   2cf20:	andeq	ip, r2, r0, asr #30
   2cf24:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   2cf28:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   2cf2c:	andeq	ip, r2, r0, asr #30
   2cf30:	andeq	sp, r2, ip, lsl r0
   2cf34:	andeq	sp, r2, ip, lsl r0
   2cf38:	andeq	sp, r2, ip, lsl r0
   2cf3c:	andeq	sp, r2, r0, asr r0
   2cf40:	ldr	r1, [r1, #16]
   2cf44:	ldr	r5, [r1, #28]
   2cf48:	ldr	r6, [r0, #20]
   2cf4c:	add	r0, r2, r2, lsl #1
   2cf50:	mov	r1, #1
   2cf54:	str	r1, [r6, r0, lsl #2]!
   2cf58:	mov	r0, #4
   2cf5c:	mov	r7, r6
   2cf60:	str	r1, [r7, #4]!
   2cf64:	bl	3554c <__assert_fail@plt+0x24114>
   2cf68:	cmp	r0, #0
   2cf6c:	str	r0, [r6, #8]
   2cf70:	strne	r5, [r0]
   2cf74:	movne	r0, r4
   2cf78:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   2cf7c:	mov	r0, #0
   2cf80:	str	r0, [r7]
   2cf84:	str	r0, [r6]
   2cf88:	mov	r4, #12
   2cf8c:	mov	r0, r4
   2cf90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2cf94:	ldrb	r3, [r0, #88]	; 0x58
   2cf98:	add	r6, r1, #16
   2cf9c:	add	r5, r2, r2, lsl #1
   2cfa0:	orr	r3, r3, #1
   2cfa4:	strb	r3, [r0, #88]	; 0x58
   2cfa8:	mov	r3, r6
   2cfac:	ldr	r7, [r1, #4]
   2cfb0:	ldr	r1, [r1, #8]
   2cfb4:	cmp	r1, #0
   2cfb8:	addne	r3, r1, #12
   2cfbc:	cmp	r7, #0
   2cfc0:	ldr	r1, [r3]
   2cfc4:	addne	r6, r7, #12
   2cfc8:	ldr	r8, [r1, #28]
   2cfcc:	ldr	r1, [r6]
   2cfd0:	ldr	r6, [r0, #20]
   2cfd4:	mov	r0, #2
   2cfd8:	ldr	r9, [r1, #28]
   2cfdc:	mov	r7, r6
   2cfe0:	str	r0, [r7, r5, lsl #2]!
   2cfe4:	mov	r0, #8
   2cfe8:	bl	3554c <__assert_fail@plt+0x24114>
   2cfec:	cmp	r0, #0
   2cff0:	str	r0, [r7, #8]
   2cff4:	beq	2cf88 <__assert_fail@plt+0x1bb50>
   2cff8:	add	r1, r6, r5, lsl #2
   2cffc:	cmp	r9, r8
   2d000:	add	r1, r1, #4
   2d004:	bne	2d058 <__assert_fail@plt+0x1bc20>
   2d008:	mov	r2, #1
   2d00c:	str	r2, [r1]
   2d010:	str	r9, [r0]
   2d014:	mov	r0, r4
   2d018:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d01c:	ldr	r1, [r1, #16]
   2d020:	ldr	r0, [r0, #12]
   2d024:	ldr	r1, [r1, #28]
   2d028:	str	r1, [r0, r2, lsl #2]
   2d02c:	mov	r0, r4
   2d030:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d034:	ldr	r7, [r1, #16]
   2d038:	ldr	r3, [r0, #12]
   2d03c:	ldr	r5, [r7, #28]
   2d040:	str	r5, [r3, r2, lsl #2]
   2d044:	ldrb	r1, [r1, #24]
   2d048:	cmp	r1, #4
   2d04c:	beq	2cf48 <__assert_fail@plt+0x1bb10>
   2d050:	mov	r0, r4
   2d054:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d058:	mov	r2, #2
   2d05c:	str	r2, [r1]
   2d060:	stmge	r0, {r8, r9}
   2d064:	strlt	r9, [r0]
   2d068:	strlt	r8, [r0, #4]
   2d06c:	mov	r0, r4
   2d070:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2d074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d078:	add	fp, sp, #28
   2d07c:	sub	sp, sp, #4
   2d080:	ldr	r6, [r2, #4]
   2d084:	mov	r8, r0
   2d088:	ldr	r5, [r1]
   2d08c:	mov	r9, r2
   2d090:	cmp	r6, #0
   2d094:	ldrbne	r0, [r1, #28]
   2d098:	andsne	r0, r0, #16
   2d09c:	bne	2d240 <__assert_fail@plt+0x1be08>
   2d0a0:	ldr	r1, [r5, #64]	; 0x40
   2d0a4:	cmp	r1, #31
   2d0a8:	beq	2d268 <__assert_fail@plt+0x1be30>
   2d0ac:	ldr	r0, [r5, #56]	; 0x38
   2d0b0:	add	r2, r1, #1
   2d0b4:	add	r0, r0, r1, lsl #5
   2d0b8:	mov	r1, #0
   2d0bc:	vmov.i32	q8, #0	; 0x00000000
   2d0c0:	str	r2, [r5, #64]	; 0x40
   2d0c4:	add	sl, r0, #4
   2d0c8:	mov	r2, #8
   2d0cc:	str	r1, [r0, #20]
   2d0d0:	str	r1, [r0, #24]
   2d0d4:	str	r2, [r0, #28]
   2d0d8:	mov	r0, #28
   2d0dc:	mov	r1, sl
   2d0e0:	vst1.32	{d16-d17}, [r1], r0
   2d0e4:	mvn	r0, #0
   2d0e8:	str	r0, [r1]
   2d0ec:	ldr	r1, [r5, #64]	; 0x40
   2d0f0:	cmp	r1, #31
   2d0f4:	beq	2d290 <__assert_fail@plt+0x1be58>
   2d0f8:	ldr	r0, [r5, #56]	; 0x38
   2d0fc:	add	r2, r1, #1
   2d100:	add	r0, r0, r1, lsl #5
   2d104:	mov	r1, #0
   2d108:	vmov.i32	q8, #0	; 0x00000000
   2d10c:	str	r2, [r5, #64]	; 0x40
   2d110:	add	r7, r0, #4
   2d114:	mov	r2, #9
   2d118:	str	r1, [r0, #20]
   2d11c:	str	r1, [r0, #24]
   2d120:	str	r2, [r0, #28]
   2d124:	mov	r0, #28
   2d128:	mov	r1, r7
   2d12c:	vst1.32	{d16-d17}, [r1], r0
   2d130:	mvn	r0, #0
   2d134:	str	r0, [r1]
   2d138:	cmp	r6, #0
   2d13c:	mov	r4, r7
   2d140:	beq	2d190 <__assert_fail@plt+0x1bd58>
   2d144:	ldr	r1, [r5, #64]	; 0x40
   2d148:	cmp	r1, #31
   2d14c:	beq	2d2e0 <__assert_fail@plt+0x1bea8>
   2d150:	ldr	r0, [r5, #56]	; 0x38
   2d154:	add	r2, r1, #1
   2d158:	add	r4, r0, r1, lsl #5
   2d15c:	mov	r0, #0
   2d160:	mov	r1, #16
   2d164:	cmp	r7, #0
   2d168:	str	r2, [r5, #64]	; 0x40
   2d16c:	str	r0, [r4, #4]!
   2d170:	mvn	r2, #0
   2d174:	add	r3, r4, #20
   2d178:	stmib	r4, {r6, r7}
   2d17c:	str	r0, [r4, #12]
   2d180:	str	r0, [r4, #16]
   2d184:	stm	r3, {r0, r1, r2}
   2d188:	str	r4, [r6]
   2d18c:	strne	r4, [r7]
   2d190:	ldr	r1, [r5, #64]	; 0x40
   2d194:	cmp	r1, #31
   2d198:	beq	2d2b8 <__assert_fail@plt+0x1be80>
   2d19c:	ldr	r0, [r5, #56]	; 0x38
   2d1a0:	add	r2, r1, #1
   2d1a4:	add	r6, r0, r1, lsl #5
   2d1a8:	mov	r0, #0
   2d1ac:	mov	r1, #16
   2d1b0:	cmp	sl, #0
   2d1b4:	str	r2, [r5, #64]	; 0x40
   2d1b8:	str	r0, [r6, #4]!
   2d1bc:	mvn	r2, #0
   2d1c0:	add	r3, r6, #20
   2d1c4:	str	sl, [r6, #4]
   2d1c8:	str	r4, [r6, #8]
   2d1cc:	str	r0, [r6, #12]
   2d1d0:	str	r0, [r6, #16]
   2d1d4:	stm	r3, {r0, r1, r2}
   2d1d8:	strne	r6, [sl]
   2d1dc:	cmp	r4, #0
   2d1e0:	strne	r6, [r4]
   2d1e4:	cmp	r7, #0
   2d1e8:	beq	2d1f8 <__assert_fail@plt+0x1bdc0>
   2d1ec:	cmp	sl, #0
   2d1f0:	cmpne	r4, #0
   2d1f4:	bne	2d208 <__assert_fail@plt+0x1bdd0>
   2d1f8:	mov	r0, #12
   2d1fc:	mov	r6, #0
   2d200:	str	r0, [r8]
   2d204:	b	2d25c <__assert_fail@plt+0x1be24>
   2d208:	cmp	r6, #0
   2d20c:	beq	2d1f8 <__assert_fail@plt+0x1bdc0>
   2d210:	ldr	r0, [r9, #20]
   2d214:	str	r0, [r7, #20]
   2d218:	str	r0, [sl, #20]
   2d21c:	ldr	r1, [r9, #24]
   2d220:	ldr	r0, [r7, #24]
   2d224:	lsr	r1, r1, #19
   2d228:	bfi	r0, r1, #19, #1
   2d22c:	str	r0, [r7, #24]
   2d230:	ldr	r0, [sl, #24]
   2d234:	bfi	r0, r1, #19, #1
   2d238:	str	r0, [sl, #24]
   2d23c:	b	2d25c <__assert_fail@plt+0x1be24>
   2d240:	ldr	r0, [r9, #20]
   2d244:	cmp	r0, #31
   2d248:	bgt	2d25c <__assert_fail@plt+0x1be24>
   2d24c:	ldr	r1, [r5, #80]	; 0x50
   2d250:	mov	r2, #1
   2d254:	tst	r1, r2, lsl r0
   2d258:	bne	2d0a0 <__assert_fail@plt+0x1bc68>
   2d25c:	mov	r0, r6
   2d260:	sub	sp, fp, #28
   2d264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d268:	mov	r0, #996	; 0x3e4
   2d26c:	bl	3554c <__assert_fail@plt+0x24114>
   2d270:	cmp	r0, #0
   2d274:	beq	2d308 <__assert_fail@plt+0x1bed0>
   2d278:	ldr	r1, [r5, #56]	; 0x38
   2d27c:	str	r1, [r0]
   2d280:	mov	r1, #0
   2d284:	str	r1, [r5, #64]	; 0x40
   2d288:	str	r0, [r5, #56]	; 0x38
   2d28c:	b	2d0b0 <__assert_fail@plt+0x1bc78>
   2d290:	mov	r0, #996	; 0x3e4
   2d294:	bl	3554c <__assert_fail@plt+0x24114>
   2d298:	cmp	r0, #0
   2d29c:	beq	2d310 <__assert_fail@plt+0x1bed8>
   2d2a0:	ldr	r1, [r5, #56]	; 0x38
   2d2a4:	str	r1, [r0]
   2d2a8:	mov	r1, #0
   2d2ac:	str	r1, [r5, #64]	; 0x40
   2d2b0:	str	r0, [r5, #56]	; 0x38
   2d2b4:	b	2d0fc <__assert_fail@plt+0x1bcc4>
   2d2b8:	mov	r0, #996	; 0x3e4
   2d2bc:	bl	3554c <__assert_fail@plt+0x24114>
   2d2c0:	cmp	r0, #0
   2d2c4:	beq	2d318 <__assert_fail@plt+0x1bee0>
   2d2c8:	ldr	r1, [r5, #56]	; 0x38
   2d2cc:	str	r1, [r0]
   2d2d0:	mov	r1, #0
   2d2d4:	str	r1, [r5, #64]	; 0x40
   2d2d8:	str	r0, [r5, #56]	; 0x38
   2d2dc:	b	2d1a0 <__assert_fail@plt+0x1bd68>
   2d2e0:	mov	r0, #996	; 0x3e4
   2d2e4:	bl	3554c <__assert_fail@plt+0x24114>
   2d2e8:	cmp	r0, #0
   2d2ec:	beq	2d328 <__assert_fail@plt+0x1bef0>
   2d2f0:	ldr	r1, [r5, #56]	; 0x38
   2d2f4:	str	r1, [r0]
   2d2f8:	mov	r1, #0
   2d2fc:	str	r1, [r5, #64]	; 0x40
   2d300:	str	r0, [r5, #56]	; 0x38
   2d304:	b	2d154 <__assert_fail@plt+0x1bd1c>
   2d308:	mov	sl, #0
   2d30c:	b	2d0ec <__assert_fail@plt+0x1bcb4>
   2d310:	mov	r7, #0
   2d314:	b	2d138 <__assert_fail@plt+0x1bd00>
   2d318:	mov	r6, #0
   2d31c:	cmp	r7, #0
   2d320:	bne	2d1ec <__assert_fail@plt+0x1bdb4>
   2d324:	b	2d1f8 <__assert_fail@plt+0x1bdc0>
   2d328:	mov	r4, #0
   2d32c:	b	2d190 <__assert_fail@plt+0x1bd58>
   2d330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d334:	add	fp, sp, #28
   2d338:	sub	sp, sp, #12
   2d33c:	mov	r4, r0
   2d340:	ldr	r7, [r0, #4]
   2d344:	ldr	r0, [r0, #8]
   2d348:	mov	r5, r2
   2d34c:	mov	r9, r1
   2d350:	cmp	r0, r7
   2d354:	bcs	2d420 <__assert_fail@plt+0x1bfe8>
   2d358:	ldr	r1, [r4]
   2d35c:	str	r9, [r1, r0, lsl #3]!
   2d360:	str	r5, [r1, #4]
   2d364:	ldr	r0, [r4]
   2d368:	ldr	r1, [r4, #8]
   2d36c:	add	r0, r0, r1, lsl #3
   2d370:	ldr	r1, [r0, #4]
   2d374:	bfc	r1, #8, #10
   2d378:	str	r1, [r0, #4]
   2d37c:	uxtb	r1, r5
   2d380:	cmp	r1, #5
   2d384:	bne	2d398 <__assert_fail@plt+0x1bf60>
   2d388:	ldr	r2, [r4, #92]	; 0x5c
   2d38c:	mov	r0, #1048576	; 0x100000
   2d390:	cmp	r2, #1
   2d394:	bgt	2d3a8 <__assert_fail@plt+0x1bf70>
   2d398:	sub	r0, r1, #6
   2d39c:	clz	r0, r0
   2d3a0:	lsr	r0, r0, #5
   2d3a4:	lsl	r0, r0, #20
   2d3a8:	ldr	r1, [r4]
   2d3ac:	ldr	r2, [r4, #8]
   2d3b0:	add	r1, r1, r2, lsl #3
   2d3b4:	ldr	r2, [r1, #4]
   2d3b8:	bic	r2, r2, #1048576	; 0x100000
   2d3bc:	orr	r0, r2, r0
   2d3c0:	mvn	r2, #0
   2d3c4:	str	r0, [r1, #4]
   2d3c8:	ldr	r0, [r4, #8]
   2d3cc:	ldr	r1, [r4, #12]
   2d3d0:	str	r2, [r1, r0, lsl #2]
   2d3d4:	mov	r2, #0
   2d3d8:	ldr	r0, [r4, #8]
   2d3dc:	ldr	r1, [r4, #20]
   2d3e0:	add	r0, r0, r0, lsl #1
   2d3e4:	str	r2, [r1, r0, lsl #2]!
   2d3e8:	str	r2, [r1, #4]
   2d3ec:	str	r2, [r1, #8]
   2d3f0:	ldr	r0, [r4, #8]
   2d3f4:	ldr	r1, [r4, #24]
   2d3f8:	add	r0, r0, r0, lsl #1
   2d3fc:	str	r2, [r1, r0, lsl #2]!
   2d400:	str	r2, [r1, #4]
   2d404:	str	r2, [r1, #8]
   2d408:	ldr	r6, [r4, #8]
   2d40c:	add	r0, r6, #1
   2d410:	str	r0, [r4, #8]
   2d414:	mov	r0, r6
   2d418:	sub	sp, fp, #28
   2d41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d420:	movw	r0, #21845	; 0x5555
   2d424:	lsl	r1, r7, #1
   2d428:	mvn	r6, #0
   2d42c:	movt	r0, #5461	; 0x1555
   2d430:	cmp	r1, r0
   2d434:	bhi	2d414 <__assert_fail@plt+0x1bfdc>
   2d438:	ldr	r0, [r4]
   2d43c:	str	r1, [sp, #8]
   2d440:	lsl	r1, r7, #4
   2d444:	bl	3557c <__assert_fail@plt+0x24144>
   2d448:	cmp	r0, #0
   2d44c:	beq	2d414 <__assert_fail@plt+0x1bfdc>
   2d450:	str	r0, [r4]
   2d454:	lsl	r8, r7, #3
   2d458:	ldr	r0, [r4, #12]
   2d45c:	mov	r1, r8
   2d460:	bl	3557c <__assert_fail@plt+0x24144>
   2d464:	str	r0, [sp, #4]
   2d468:	ldr	r0, [r4, #16]
   2d46c:	mov	r1, r8
   2d470:	bl	3557c <__assert_fail@plt+0x24144>
   2d474:	mov	r2, r0
   2d478:	ldr	r0, [r4, #20]
   2d47c:	add	r1, r7, r7, lsl #1
   2d480:	lsl	r8, r1, #3
   2d484:	mov	r7, r2
   2d488:	mov	r1, r8
   2d48c:	bl	3557c <__assert_fail@plt+0x24144>
   2d490:	mov	sl, r0
   2d494:	ldr	r0, [r4, #24]
   2d498:	mov	r1, r8
   2d49c:	bl	3557c <__assert_fail@plt+0x24144>
   2d4a0:	mov	r8, r0
   2d4a4:	ldr	r0, [sp, #4]
   2d4a8:	cmp	r0, #0
   2d4ac:	beq	2d4bc <__assert_fail@plt+0x1c084>
   2d4b0:	cmp	r7, #0
   2d4b4:	cmpne	sl, #0
   2d4b8:	bne	2d4dc <__assert_fail@plt+0x1c0a4>
   2d4bc:	bl	1386c <__assert_fail@plt+0x2434>
   2d4c0:	mov	r0, r7
   2d4c4:	bl	1386c <__assert_fail@plt+0x2434>
   2d4c8:	mov	r0, sl
   2d4cc:	bl	1386c <__assert_fail@plt+0x2434>
   2d4d0:	mov	r0, r8
   2d4d4:	bl	1386c <__assert_fail@plt+0x2434>
   2d4d8:	b	2d414 <__assert_fail@plt+0x1bfdc>
   2d4dc:	cmp	r8, #0
   2d4e0:	beq	2d4bc <__assert_fail@plt+0x1c084>
   2d4e4:	add	r1, r4, #12
   2d4e8:	stm	r1, {r0, r7, sl}
   2d4ec:	str	r8, [r4, #24]
   2d4f0:	ldr	r0, [sp, #8]
   2d4f4:	str	r0, [r4, #4]
   2d4f8:	ldr	r0, [r4, #8]
   2d4fc:	b	2d358 <__assert_fail@plt+0x1bf20>
   2d500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d504:	add	fp, sp, #28
   2d508:	sub	sp, sp, #44	; 0x2c
   2d50c:	mov	r8, r0
   2d510:	ldr	r0, [r1, #20]
   2d514:	add	r4, r2, r2, lsl #1
   2d518:	mov	r5, r1
   2d51c:	mov	r1, #0
   2d520:	mov	r9, r3
   2d524:	mov	r6, r2
   2d528:	add	r0, r0, r4, lsl #2
   2d52c:	ldr	r0, [r0, #4]
   2d530:	str	r1, [sp, #36]	; 0x24
   2d534:	add	r0, r0, #1
   2d538:	str	r0, [sp, #32]
   2d53c:	lsl	r0, r0, #2
   2d540:	bl	3554c <__assert_fail@plt+0x24114>
   2d544:	cmp	r0, #0
   2d548:	str	r0, [sp, #40]	; 0x28
   2d54c:	beq	2d714 <__assert_fail@plt+0x1c2dc>
   2d550:	mov	r1, #1
   2d554:	str	r6, [r0]
   2d558:	str	r1, [sp, #36]	; 0x24
   2d55c:	mvn	r1, #0
   2d560:	ldr	r0, [r5, #24]
   2d564:	add	r0, r0, r4, lsl #2
   2d568:	str	r1, [r0, #4]
   2d56c:	ldr	r2, [r5]
   2d570:	add	r0, r2, r6, lsl #3
   2d574:	ldr	r0, [r0, #4]
   2d578:	ubfx	r1, r0, #8, #10
   2d57c:	cmp	r1, #0
   2d580:	beq	2d5dc <__assert_fail@plt+0x1c1a4>
   2d584:	ldr	r3, [r5, #20]
   2d588:	add	r3, r3, r4, lsl #2
   2d58c:	ldr	r7, [r3, #4]
   2d590:	cmp	r7, #0
   2d594:	beq	2d5dc <__assert_fail@plt+0x1c1a4>
   2d598:	ldr	r3, [r3, #8]
   2d59c:	ldr	r3, [r3]
   2d5a0:	add	r2, r2, r3, lsl #3
   2d5a4:	ldrb	r2, [r2, #6]
   2d5a8:	tst	r2, #4
   2d5ac:	bne	2d5dc <__assert_fail@plt+0x1c1a4>
   2d5b0:	str	r1, [sp]
   2d5b4:	mov	r0, r5
   2d5b8:	mov	r1, r6
   2d5bc:	mov	r2, r6
   2d5c0:	mov	r3, r6
   2d5c4:	bl	2d720 <__assert_fail@plt+0x1c2e8>
   2d5c8:	cmp	r0, #0
   2d5cc:	bne	2d70c <__assert_fail@plt+0x1c2d4>
   2d5d0:	ldr	r0, [r5]
   2d5d4:	add	r0, r0, r6, lsl #3
   2d5d8:	ldr	r0, [r0, #4]
   2d5dc:	tst	r0, #8
   2d5e0:	beq	2d6e0 <__assert_fail@plt+0x1c2a8>
   2d5e4:	ldr	r0, [r5, #20]
   2d5e8:	add	r1, r0, r4, lsl #2
   2d5ec:	ldr	r1, [r1, #4]
   2d5f0:	cmp	r1, #1
   2d5f4:	blt	2d6e0 <__assert_fail@plt+0x1c2a8>
   2d5f8:	str	r8, [sp, #12]
   2d5fc:	mov	r8, #0
   2d600:	add	r7, sp, #16
   2d604:	add	sl, sp, #32
   2d608:	mov	r6, #0
   2d60c:	str	r9, [sp, #8]
   2d610:	add	r0, r0, r4, lsl #2
   2d614:	ldr	r0, [r0, #8]
   2d618:	ldr	r2, [r0, r6, lsl #2]
   2d61c:	ldr	r0, [r5, #24]
   2d620:	add	r9, r2, r2, lsl #1
   2d624:	add	r0, r0, r9, lsl #2
   2d628:	ldr	r1, [r0, #4]
   2d62c:	cmn	r1, #1
   2d630:	beq	2d698 <__assert_fail@plt+0x1c260>
   2d634:	cmp	r1, #0
   2d638:	bne	2d658 <__assert_fail@plt+0x1c220>
   2d63c:	mov	r0, r7
   2d640:	mov	r1, r5
   2d644:	mov	r3, #0
   2d648:	bl	2d500 <__assert_fail@plt+0x1c0c8>
   2d64c:	cmp	r0, #0
   2d650:	beq	2d668 <__assert_fail@plt+0x1c230>
   2d654:	b	2d70c <__assert_fail@plt+0x1c2d4>
   2d658:	vldr	d16, [r0]
   2d65c:	ldr	r0, [r0, #8]
   2d660:	str	r0, [sp, #24]
   2d664:	vstr	d16, [sp, #16]
   2d668:	mov	r0, sl
   2d66c:	mov	r1, r7
   2d670:	bl	2dbd0 <__assert_fail@plt+0x1c798>
   2d674:	cmp	r0, #0
   2d678:	bne	2d70c <__assert_fail@plt+0x1c2d4>
   2d67c:	ldr	r0, [r5, #24]
   2d680:	add	r0, r0, r9, lsl #2
   2d684:	ldr	r0, [r0, #4]
   2d688:	cmp	r0, #0
   2d68c:	bne	2d69c <__assert_fail@plt+0x1c264>
   2d690:	ldr	r0, [sp, #24]
   2d694:	bl	1386c <__assert_fail@plt+0x2434>
   2d698:	mov	r8, #1
   2d69c:	ldr	r0, [r5, #20]
   2d6a0:	add	r6, r6, #1
   2d6a4:	add	r1, r0, r4, lsl #2
   2d6a8:	ldr	r1, [r1, #4]
   2d6ac:	cmp	r6, r1
   2d6b0:	blt	2d610 <__assert_fail@plt+0x1c1d8>
   2d6b4:	tst	r8, #1
   2d6b8:	ldr	r8, [sp, #12]
   2d6bc:	ldr	r0, [sp, #8]
   2d6c0:	beq	2d6e0 <__assert_fail@plt+0x1c2a8>
   2d6c4:	cmp	r0, #0
   2d6c8:	bne	2d6e0 <__assert_fail@plt+0x1c2a8>
   2d6cc:	ldr	r0, [r5, #24]
   2d6d0:	mov	r1, #0
   2d6d4:	add	r0, r0, r4, lsl #2
   2d6d8:	str	r1, [r0, #4]
   2d6dc:	b	2d6f8 <__assert_fail@plt+0x1c2c0>
   2d6e0:	ldr	r0, [r5, #24]
   2d6e4:	vldr	d16, [sp, #32]
   2d6e8:	ldr	r1, [sp, #40]	; 0x28
   2d6ec:	add	r0, r0, r4, lsl #2
   2d6f0:	str	r1, [r0, #8]
   2d6f4:	vstr	d16, [r0]
   2d6f8:	ldr	r0, [sp, #40]	; 0x28
   2d6fc:	vldr	d16, [sp, #32]
   2d700:	str	r0, [r8, #8]
   2d704:	mov	r0, #0
   2d708:	vstr	d16, [r8]
   2d70c:	sub	sp, fp, #28
   2d710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d714:	mov	r0, #12
   2d718:	sub	sp, fp, #28
   2d71c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d724:	add	fp, sp, #28
   2d728:	sub	sp, sp, #20
   2d72c:	mov	r9, r0
   2d730:	ldr	r0, [fp, #8]
   2d734:	mov	sl, r2
   2d738:	mov	r8, r1
   2d73c:	str	r3, [sp, #8]
   2d740:	str	r0, [sp, #16]
   2d744:	ldr	r2, [r9]
   2d748:	add	r3, r2, r8, lsl #3
   2d74c:	ldrb	r0, [r3, #4]!
   2d750:	cmp	r0, #4
   2d754:	bne	2d844 <__assert_fail@plt+0x1c40c>
   2d758:	ldr	r0, [r9, #12]
   2d75c:	ldr	r1, [r9, #20]
   2d760:	add	r6, sl, sl, lsl #1
   2d764:	ldr	r4, [r0, r8, lsl #2]
   2d768:	add	r0, r1, r6, lsl #2
   2d76c:	mov	r1, #0
   2d770:	str	r1, [r0, #4]
   2d774:	mov	r0, r9
   2d778:	ldr	r1, [r2, r4, lsl #3]!
   2d77c:	ldr	r2, [r2, #4]
   2d780:	bl	2d330 <__assert_fail@plt+0x1bef8>
   2d784:	mov	r7, r0
   2d788:	mov	r0, #12
   2d78c:	cmn	r7, #1
   2d790:	str	r0, [sp, #12]
   2d794:	beq	2dbc4 <__assert_fail@plt+0x1c78c>
   2d798:	ldr	r1, [r9]
   2d79c:	movw	r0, #65280	; 0xff00
   2d7a0:	movw	r3, #255	; 0xff
   2d7a4:	movt	r0, #3
   2d7a8:	movt	r3, #65532	; 0xfffc
   2d7ac:	mov	ip, r0
   2d7b0:	ldr	r0, [sp, #16]
   2d7b4:	add	r1, r1, r7, lsl #3
   2d7b8:	ldr	r2, [r1, #4]
   2d7bc:	and	r0, ip, r0, lsl #8
   2d7c0:	and	r2, r2, r3
   2d7c4:	orr	r0, r2, r0
   2d7c8:	str	r0, [r1, #4]
   2d7cc:	ldr	r0, [r9]
   2d7d0:	add	r1, r0, r4, lsl #3
   2d7d4:	add	r0, r0, r7, lsl #3
   2d7d8:	ldr	r1, [r1, #4]
   2d7dc:	ldr	r2, [r0, #4]
   2d7e0:	and	r1, r1, ip
   2d7e4:	orr	r1, r1, r2
   2d7e8:	str	r1, [r0, #4]
   2d7ec:	ldr	r0, [r9]
   2d7f0:	add	r0, r0, r7, lsl #3
   2d7f4:	ldr	r1, [r0, #4]
   2d7f8:	orr	r1, r1, #262144	; 0x40000
   2d7fc:	str	r1, [r0, #4]
   2d800:	ldr	r0, [r9, #16]
   2d804:	str	r4, [r0, r7, lsl #2]
   2d808:	ldr	r0, [r9, #12]
   2d80c:	ldr	r1, [r0, r8, lsl #2]
   2d810:	str	r1, [r0, sl, lsl #2]
   2d814:	mov	r1, r7
   2d818:	ldr	r0, [r9, #20]
   2d81c:	add	r0, r0, r6, lsl #2
   2d820:	bl	2dd60 <__assert_fail@plt+0x1c928>
   2d824:	mov	r1, #0
   2d828:	cmp	r0, #0
   2d82c:	mov	r8, r4
   2d830:	mov	sl, r7
   2d834:	beq	2dbc4 <__assert_fail@plt+0x1c78c>
   2d838:	cmp	r1, #0
   2d83c:	beq	2d744 <__assert_fail@plt+0x1c30c>
   2d840:	b	2db9c <__assert_fail@plt+0x1c764>
   2d844:	ldr	r0, [r9, #20]
   2d848:	add	ip, r8, r8, lsl #1
   2d84c:	add	r7, r0, ip, lsl #2
   2d850:	ldr	r1, [r7, #4]
   2d854:	cmp	r1, #0
   2d858:	beq	2dbb0 <__assert_fail@plt+0x1c778>
   2d85c:	ldr	r7, [r7, #8]
   2d860:	add	r6, sl, sl, lsl #1
   2d864:	cmp	r1, #1
   2d868:	add	r0, r0, r6, lsl #2
   2d86c:	ldr	r5, [r7]
   2d870:	mov	r7, #0
   2d874:	str	r7, [r0, #4]
   2d878:	bne	2d8b4 <__assert_fail@plt+0x1c47c>
   2d87c:	ldr	r1, [sp, #8]
   2d880:	cmp	r8, r1
   2d884:	bne	2dab4 <__assert_fail@plt+0x1c67c>
   2d888:	cmp	sl, r8
   2d88c:	beq	2dab4 <__assert_fail@plt+0x1c67c>
   2d890:	mov	r1, r5
   2d894:	bl	2dd60 <__assert_fail@plt+0x1c928>
   2d898:	ldr	r8, [sp, #8]
   2d89c:	cmp	r0, #0
   2d8a0:	mov	r1, #1
   2d8a4:	movwne	r1, #2
   2d8a8:	cmp	r1, #0
   2d8ac:	beq	2d744 <__assert_fail@plt+0x1c30c>
   2d8b0:	b	2db9c <__assert_fail@plt+0x1c764>
   2d8b4:	ldr	r1, [r9, #8]
   2d8b8:	ldr	r8, [sp, #16]
   2d8bc:	str	r6, [sp, #4]
   2d8c0:	sub	r3, r1, #1
   2d8c4:	cmp	r3, #1
   2d8c8:	blt	2d918 <__assert_fail@plt+0x1c4e0>
   2d8cc:	add	r3, r2, r3, lsl #3
   2d8d0:	ldr	r6, [r3, #4]
   2d8d4:	ands	r3, r6, #262144	; 0x40000
   2d8d8:	beq	2d918 <__assert_fail@plt+0x1c4e0>
   2d8dc:	ldr	r4, [r9, #16]
   2d8e0:	sub	r3, r2, #12
   2d8e4:	sub	r4, r4, #4
   2d8e8:	ldr	r7, [r4, r1, lsl #2]
   2d8ec:	cmp	r7, r5
   2d8f0:	ubfxeq	r7, r6, #8, #10
   2d8f4:	cmpeq	r7, r8
   2d8f8:	beq	2db7c <__assert_fail@plt+0x1c744>
   2d8fc:	sub	r7, r1, #2
   2d900:	cmp	r7, #1
   2d904:	blt	2d918 <__assert_fail@plt+0x1c4e0>
   2d908:	ldr	r6, [r3, r1, lsl #3]
   2d90c:	sub	r1, r1, #1
   2d910:	ands	r7, r6, #262144	; 0x40000
   2d914:	bne	2d8e8 <__assert_fail@plt+0x1c4b0>
   2d918:	ldr	r1, [r2, r5, lsl #3]!
   2d91c:	mov	r0, r9
   2d920:	mov	sl, ip
   2d924:	ldr	r2, [r2, #4]
   2d928:	bl	2d330 <__assert_fail@plt+0x1bef8>
   2d92c:	mov	r4, r0
   2d930:	mov	r0, #12
   2d934:	cmn	r4, #1
   2d938:	str	r0, [sp, #12]
   2d93c:	beq	2dbc4 <__assert_fail@plt+0x1c78c>
   2d940:	ldr	r1, [r9]
   2d944:	movw	r0, #65280	; 0xff00
   2d948:	movw	r7, #255	; 0xff
   2d94c:	ldr	r6, [sp, #4]
   2d950:	movt	r0, #3
   2d954:	movt	r7, #65532	; 0xfffc
   2d958:	mov	r3, r0
   2d95c:	and	r0, r0, r8, lsl #8
   2d960:	add	r1, r1, r4, lsl #3
   2d964:	ldr	r2, [r1, #4]
   2d968:	and	r2, r2, r7
   2d96c:	orr	r0, r2, r0
   2d970:	str	r0, [r1, #4]
   2d974:	ldr	r0, [r9]
   2d978:	add	r1, r0, r5, lsl #3
   2d97c:	add	r0, r0, r4, lsl #3
   2d980:	ldr	r1, [r1, #4]
   2d984:	ldr	r2, [r0, #4]
   2d988:	and	r1, r1, r3
   2d98c:	orr	r1, r1, r2
   2d990:	str	r1, [r0, #4]
   2d994:	ldr	r0, [r9]
   2d998:	add	r0, r0, r4, lsl #3
   2d99c:	ldr	r1, [r0, #4]
   2d9a0:	orr	r1, r1, #262144	; 0x40000
   2d9a4:	str	r1, [r0, #4]
   2d9a8:	mov	r1, r4
   2d9ac:	ldr	r0, [r9, #16]
   2d9b0:	str	r5, [r0, r4, lsl #2]
   2d9b4:	ldr	r0, [r9, #20]
   2d9b8:	add	r0, r0, r6, lsl #2
   2d9bc:	bl	2dd60 <__assert_fail@plt+0x1c928>
   2d9c0:	cmp	r0, #0
   2d9c4:	beq	2dbc4 <__assert_fail@plt+0x1c78c>
   2d9c8:	ldr	r0, [sp, #16]
   2d9cc:	ldr	r3, [sp, #8]
   2d9d0:	mov	r1, r5
   2d9d4:	mov	r2, r4
   2d9d8:	str	r0, [sp]
   2d9dc:	mov	r0, r9
   2d9e0:	bl	2d720 <__assert_fail@plt+0x1c2e8>
   2d9e4:	cmp	r0, #0
   2d9e8:	bne	2dbc0 <__assert_fail@plt+0x1c788>
   2d9ec:	ldr	r1, [r9, #20]
   2d9f0:	ldr	r0, [r9]
   2d9f4:	add	r1, r1, sl, lsl #2
   2d9f8:	ldr	r1, [r1, #8]
   2d9fc:	ldr	r8, [r1, #4]
   2da00:	ldr	r1, [r0, r8, lsl #3]!
   2da04:	ldr	r2, [r0, #4]
   2da08:	mov	r0, r9
   2da0c:	bl	2d330 <__assert_fail@plt+0x1bef8>
   2da10:	mov	sl, r0
   2da14:	mov	r0, #12
   2da18:	cmn	sl, #1
   2da1c:	str	r0, [sp, #12]
   2da20:	beq	2dbc4 <__assert_fail@plt+0x1c78c>
   2da24:	ldr	r1, [r9]
   2da28:	movw	r0, #65280	; 0xff00
   2da2c:	movw	r7, #255	; 0xff
   2da30:	movt	r0, #3
   2da34:	movt	r7, #65532	; 0xfffc
   2da38:	mov	r3, r0
   2da3c:	ldr	r0, [sp, #16]
   2da40:	add	r1, r1, sl, lsl #3
   2da44:	ldr	r2, [r1, #4]
   2da48:	and	r0, r3, r0, lsl #8
   2da4c:	and	r2, r2, r7
   2da50:	orr	r0, r2, r0
   2da54:	str	r0, [r1, #4]
   2da58:	ldr	r0, [r9]
   2da5c:	add	r1, r0, r8, lsl #3
   2da60:	add	r0, r0, sl, lsl #3
   2da64:	ldr	r1, [r1, #4]
   2da68:	ldr	r2, [r0, #4]
   2da6c:	and	r1, r1, r3
   2da70:	orr	r1, r1, r2
   2da74:	str	r1, [r0, #4]
   2da78:	ldr	r0, [r9]
   2da7c:	add	r0, r0, sl, lsl #3
   2da80:	ldr	r1, [r0, #4]
   2da84:	orr	r1, r1, #262144	; 0x40000
   2da88:	str	r1, [r0, #4]
   2da8c:	mov	r1, sl
   2da90:	ldr	r0, [r9, #16]
   2da94:	str	r8, [r0, sl, lsl #2]
   2da98:	ldr	r0, [r9, #20]
   2da9c:	add	r0, r0, r6, lsl #2
   2daa0:	bl	2dd60 <__assert_fail@plt+0x1c928>
   2daa4:	mov	r1, #0
   2daa8:	cmp	r0, #0
   2daac:	bne	2d838 <__assert_fail@plt+0x1c400>
   2dab0:	b	2dbc4 <__assert_fail@plt+0x1c78c>
   2dab4:	ldr	r1, [r2, r5, lsl #3]!
   2dab8:	ldr	r4, [r3]
   2dabc:	mov	r0, r9
   2dac0:	ldr	r2, [r2, #4]
   2dac4:	bl	2d330 <__assert_fail@plt+0x1bef8>
   2dac8:	mov	sl, r0
   2dacc:	ubfx	r0, r4, #8, #10
   2dad0:	mov	r1, #12
   2dad4:	cmn	sl, #1
   2dad8:	str	r1, [sp, #12]
   2dadc:	beq	2dbc4 <__assert_fail@plt+0x1c78c>
   2dae0:	ldr	r1, [sp, #16]
   2dae4:	movw	r7, #255	; 0xff
   2dae8:	movt	r7, #65532	; 0xfffc
   2daec:	orr	r1, r0, r1
   2daf0:	movw	r0, #65280	; 0xff00
   2daf4:	movt	r0, #3
   2daf8:	str	r1, [sp, #16]
   2dafc:	mov	r3, r0
   2db00:	and	r0, r0, r1, lsl #8
   2db04:	ldr	r1, [r9]
   2db08:	add	r1, r1, sl, lsl #3
   2db0c:	ldr	r2, [r1, #4]
   2db10:	and	r2, r2, r7
   2db14:	orr	r0, r2, r0
   2db18:	str	r0, [r1, #4]
   2db1c:	ldr	r0, [r9]
   2db20:	add	r1, r0, r5, lsl #3
   2db24:	add	r0, r0, sl, lsl #3
   2db28:	ldr	r1, [r1, #4]
   2db2c:	ldr	r2, [r0, #4]
   2db30:	and	r1, r1, r3
   2db34:	orr	r1, r1, r2
   2db38:	str	r1, [r0, #4]
   2db3c:	ldr	r0, [r9]
   2db40:	add	r0, r0, sl, lsl #3
   2db44:	ldr	r1, [r0, #4]
   2db48:	orr	r1, r1, #262144	; 0x40000
   2db4c:	str	r1, [r0, #4]
   2db50:	mov	r1, sl
   2db54:	ldr	r0, [r9, #16]
   2db58:	str	r5, [r0, sl, lsl #2]
   2db5c:	ldr	r0, [r9, #20]
   2db60:	add	r0, r0, r6, lsl #2
   2db64:	bl	2dd60 <__assert_fail@plt+0x1c928>
   2db68:	mov	r1, #0
   2db6c:	cmp	r0, #0
   2db70:	mov	r8, r5
   2db74:	bne	2d838 <__assert_fail@plt+0x1c400>
   2db78:	b	2dbc4 <__assert_fail@plt+0x1c78c>
   2db7c:	sub	r1, r1, #1
   2db80:	mov	sl, ip
   2db84:	bl	2dd60 <__assert_fail@plt+0x1c928>
   2db88:	ldr	r6, [sp, #4]
   2db8c:	cmp	r0, #0
   2db90:	bne	2d9ec <__assert_fail@plt+0x1c5b4>
   2db94:	mov	r0, #12
   2db98:	b	2dbc0 <__assert_fail@plt+0x1c788>
   2db9c:	mov	r0, #12
   2dba0:	cmp	r1, #2
   2dba4:	str	r0, [sp, #12]
   2dba8:	beq	2dbbc <__assert_fail@plt+0x1c784>
   2dbac:	b	2dbc4 <__assert_fail@plt+0x1c78c>
   2dbb0:	ldr	r0, [r9, #12]
   2dbb4:	ldr	r1, [r0, r8, lsl #2]
   2dbb8:	str	r1, [r0, sl, lsl #2]
   2dbbc:	mov	r0, #0
   2dbc0:	str	r0, [sp, #12]
   2dbc4:	ldr	r0, [sp, #12]
   2dbc8:	sub	sp, fp, #28
   2dbcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbd0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dbd4:	add	fp, sp, #24
   2dbd8:	mov	r8, #0
   2dbdc:	cmp	r1, #0
   2dbe0:	beq	2dd38 <__assert_fail@plt+0x1c900>
   2dbe4:	mov	r5, r0
   2dbe8:	ldr	r0, [r1, #4]
   2dbec:	mov	r9, r1
   2dbf0:	cmp	r0, #0
   2dbf4:	beq	2dd38 <__assert_fail@plt+0x1c900>
   2dbf8:	ldr	r1, [r5, #4]
   2dbfc:	ldr	r2, [r5]
   2dc00:	add	r3, r1, r0, lsl #1
   2dc04:	cmp	r2, r3
   2dc08:	bge	2dc38 <__assert_fail@plt+0x1c800>
   2dc0c:	add	r7, r2, r0
   2dc10:	ldr	r0, [r5, #8]
   2dc14:	lsl	r1, r7, #3
   2dc18:	bl	3557c <__assert_fail@plt+0x24144>
   2dc1c:	cmp	r0, #0
   2dc20:	beq	2dd54 <__assert_fail@plt+0x1c91c>
   2dc24:	str	r0, [r5, #8]
   2dc28:	lsl	r0, r7, #1
   2dc2c:	str	r0, [r5]
   2dc30:	ldr	r1, [r5, #4]
   2dc34:	ldr	r0, [r9, #4]
   2dc38:	cmp	r1, #0
   2dc3c:	beq	2dd40 <__assert_fail@plt+0x1c908>
   2dc40:	add	r7, r1, r0, lsl #1
   2dc44:	sub	r1, r1, #1
   2dc48:	sub	r0, r0, #1
   2dc4c:	orr	r2, r0, r1
   2dc50:	cmp	r2, #0
   2dc54:	blt	2dca0 <__assert_fail@plt+0x1c868>
   2dc58:	ldr	r2, [r9, #8]
   2dc5c:	ldr	r3, [r5, #8]
   2dc60:	ldr	r4, [r2, r0, lsl #2]
   2dc64:	ldr	r6, [r3, r1, lsl #2]
   2dc68:	cmp	r6, r4
   2dc6c:	bne	2dc7c <__assert_fail@plt+0x1c844>
   2dc70:	sub	r1, r1, #1
   2dc74:	sub	r0, r0, #1
   2dc78:	b	2dc94 <__assert_fail@plt+0x1c85c>
   2dc7c:	bge	2dc90 <__assert_fail@plt+0x1c858>
   2dc80:	sub	r7, r7, #1
   2dc84:	sub	r0, r0, #1
   2dc88:	str	r4, [r3, r7, lsl #2]
   2dc8c:	b	2dc94 <__assert_fail@plt+0x1c85c>
   2dc90:	sub	r1, r1, #1
   2dc94:	orr	r6, r0, r1
   2dc98:	cmn	r6, #1
   2dc9c:	bgt	2dc60 <__assert_fail@plt+0x1c828>
   2dca0:	cmp	r0, #0
   2dca4:	blt	2dcc4 <__assert_fail@plt+0x1c88c>
   2dca8:	add	r2, r0, #1
   2dcac:	ldr	r0, [r5, #8]
   2dcb0:	ldr	r1, [r9, #8]
   2dcb4:	sub	r7, r7, r2
   2dcb8:	lsl	r2, r2, #2
   2dcbc:	add	r0, r0, r7, lsl #2
   2dcc0:	bl	111ec <memcpy@plt>
   2dcc4:	ldr	r0, [r5, #4]
   2dcc8:	ldr	r2, [r9, #4]
   2dccc:	sub	r1, r0, #1
   2dcd0:	add	r3, r1, r2, lsl #1
   2dcd4:	sub	r2, r3, r7
   2dcd8:	adds	r2, r2, #1
   2dcdc:	beq	2dd38 <__assert_fail@plt+0x1c900>
   2dce0:	add	r0, r2, r0
   2dce4:	str	r0, [r5, #4]
   2dce8:	ldr	r0, [r5, #8]
   2dcec:	ldr	r6, [r0, r1, lsl #2]
   2dcf0:	ldr	r5, [r0, r3, lsl #2]
   2dcf4:	cmp	r5, r6
   2dcf8:	ble	2dd14 <__assert_fail@plt+0x1c8dc>
   2dcfc:	add	r6, r2, r1
   2dd00:	subs	r2, r2, #1
   2dd04:	sub	r3, r3, #1
   2dd08:	str	r5, [r0, r6, lsl #2]
   2dd0c:	bne	2dcec <__assert_fail@plt+0x1c8b4>
   2dd10:	b	2dd38 <__assert_fail@plt+0x1c900>
   2dd14:	add	r5, r2, r1
   2dd18:	cmp	r1, #0
   2dd1c:	str	r6, [r0, r5, lsl #2]
   2dd20:	sub	r6, r1, #1
   2dd24:	mov	r1, r6
   2dd28:	bgt	2dcec <__assert_fail@plt+0x1c8b4>
   2dd2c:	add	r1, r0, r7, lsl #2
   2dd30:	lsl	r2, r2, #2
   2dd34:	bl	111ec <memcpy@plt>
   2dd38:	mov	r0, r8
   2dd3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2dd40:	str	r0, [r5, #4]
   2dd44:	ldr	r0, [r5, #8]
   2dd48:	ldr	r2, [r9, #4]
   2dd4c:	ldr	r1, [r9, #8]
   2dd50:	b	2dd30 <__assert_fail@plt+0x1c8f8>
   2dd54:	mov	r8, #12
   2dd58:	mov	r0, r8
   2dd5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2dd60:	push	{r4, r5, r6, sl, fp, lr}
   2dd64:	add	fp, sp, #16
   2dd68:	ldr	r2, [r0]
   2dd6c:	mov	r5, r1
   2dd70:	mov	r4, r0
   2dd74:	cmp	r2, #0
   2dd78:	beq	2dda8 <__assert_fail@plt+0x1c970>
   2dd7c:	ldr	r1, [r4, #4]
   2dd80:	cmp	r1, #0
   2dd84:	bne	2dde4 <__assert_fail@plt+0x1c9ac>
   2dd88:	ldr	r0, [r4, #8]
   2dd8c:	str	r5, [r0]
   2dd90:	ldr	r0, [r4, #4]
   2dd94:	mov	r6, #1
   2dd98:	add	r0, r0, #1
   2dd9c:	str	r0, [r4, #4]
   2dda0:	mov	r0, r6
   2dda4:	pop	{r4, r5, r6, sl, fp, pc}
   2dda8:	mov	r6, #1
   2ddac:	mov	r0, #4
   2ddb0:	str	r6, [r4]
   2ddb4:	str	r6, [r4, #4]
   2ddb8:	bl	3554c <__assert_fail@plt+0x24114>
   2ddbc:	cmp	r0, #0
   2ddc0:	str	r0, [r4, #8]
   2ddc4:	strne	r5, [r0]
   2ddc8:	movne	r0, r6
   2ddcc:	popne	{r4, r5, r6, sl, fp, pc}
   2ddd0:	mov	r6, #0
   2ddd4:	mov	r0, r6
   2ddd8:	str	r6, [r4]
   2dddc:	str	r6, [r4, #4]
   2dde0:	pop	{r4, r5, r6, sl, fp, pc}
   2dde4:	cmp	r2, r1
   2dde8:	bne	2de14 <__assert_fail@plt+0x1c9dc>
   2ddec:	lsl	r0, r2, #1
   2ddf0:	lsl	r1, r2, #3
   2ddf4:	str	r0, [r4]
   2ddf8:	ldr	r0, [r4, #8]
   2ddfc:	bl	3557c <__assert_fail@plt+0x24144>
   2de00:	cmp	r0, #0
   2de04:	beq	2de90 <__assert_fail@plt+0x1ca58>
   2de08:	str	r0, [r4, #8]
   2de0c:	ldr	r1, [r4, #4]
   2de10:	b	2de18 <__assert_fail@plt+0x1c9e0>
   2de14:	ldr	r0, [r4, #8]
   2de18:	ldr	r2, [r0]
   2de1c:	cmp	r2, r5
   2de20:	ble	2de58 <__assert_fail@plt+0x1ca20>
   2de24:	cmp	r1, #1
   2de28:	blt	2de88 <__assert_fail@plt+0x1ca50>
   2de2c:	add	r2, r0, r1, lsl #2
   2de30:	add	r1, r1, #1
   2de34:	mov	r3, r2
   2de38:	ldr	r6, [r3, #-4]!
   2de3c:	sub	r1, r1, #1
   2de40:	cmp	r1, #1
   2de44:	str	r6, [r2]
   2de48:	mov	r2, r3
   2de4c:	bgt	2de38 <__assert_fail@plt+0x1ca00>
   2de50:	sub	r1, r1, #1
   2de54:	b	2de88 <__assert_fail@plt+0x1ca50>
   2de58:	add	r2, r0, r1, lsl #2
   2de5c:	ldr	r3, [r2, #-4]
   2de60:	cmp	r3, r5
   2de64:	ble	2de88 <__assert_fail@plt+0x1ca50>
   2de68:	sub	r1, r1, #2
   2de6c:	str	r3, [r2]
   2de70:	sub	r1, r1, #1
   2de74:	ldr	r3, [r2, #-8]
   2de78:	sub	r2, r2, #4
   2de7c:	cmp	r3, r5
   2de80:	bgt	2de6c <__assert_fail@plt+0x1ca34>
   2de84:	add	r1, r1, #2
   2de88:	str	r5, [r0, r1, lsl #2]
   2de8c:	b	2dd90 <__assert_fail@plt+0x1c958>
   2de90:	mov	r6, #0
   2de94:	mov	r0, r6
   2de98:	pop	{r4, r5, r6, sl, fp, pc}
   2de9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dea0:	add	fp, sp, #28
   2dea4:	sub	sp, sp, #28
   2dea8:	ldr	lr, [r2, #4]
   2deac:	str	r2, [sp, #24]
   2deb0:	cmp	lr, #0
   2deb4:	beq	2e050 <__assert_fail@plt+0x1cc18>
   2deb8:	mov	r9, r3
   2debc:	add	r7, lr, r3
   2dec0:	cmp	lr, #1
   2dec4:	str	r0, [sp, #4]
   2dec8:	blt	2df3c <__assert_fail@plt+0x1cb04>
   2decc:	ldr	r0, [sp, #24]
   2ded0:	mov	r2, #0
   2ded4:	cmp	lr, #4
   2ded8:	ldr	r5, [r0, #8]
   2dedc:	bcc	2df24 <__assert_fail@plt+0x1caec>
   2dee0:	mov	r0, #0
   2dee4:	bic	r2, lr, #3
   2dee8:	vdup.32	q8, r0
   2deec:	mov	r3, r2
   2def0:	mov	r0, r5
   2def4:	vmov.32	d16[0], r7
   2def8:	vld1.32	{d18-d19}, [r0]!
   2defc:	subs	r3, r3, #4
   2df00:	vadd.i32	q8, q9, q8
   2df04:	bne	2def8 <__assert_fail@plt+0x1cac0>
   2df08:	vext.8	q9, q8, q8, #8
   2df0c:	cmp	lr, r2
   2df10:	vadd.i32	q8, q8, q9
   2df14:	vdup.32	q9, d16[1]
   2df18:	vadd.i32	q8, q8, q9
   2df1c:	vmov.32	r7, d16[0]
   2df20:	beq	2df3c <__assert_fail@plt+0x1cb04>
   2df24:	add	r3, r5, r2, lsl #2
   2df28:	sub	r2, lr, r2
   2df2c:	ldr	r0, [r3], #4
   2df30:	subs	r2, r2, #1
   2df34:	add	r7, r0, r7
   2df38:	bne	2df2c <__assert_fail@plt+0x1caf4>
   2df3c:	ldr	r0, [r1, #32]
   2df40:	mov	sl, r1
   2df44:	ldr	r1, [r1, #68]	; 0x44
   2df48:	and	r1, r1, r7
   2df4c:	add	r2, r1, r1, lsl #1
   2df50:	ldr	r1, [r0, r2, lsl #2]
   2df54:	cmp	r1, #1
   2df58:	blt	2dff0 <__assert_fail@plt+0x1cbb8>
   2df5c:	add	r0, r0, r2, lsl #2
   2df60:	sub	ip, lr, #1
   2df64:	mov	r3, #0
   2df68:	ldr	r8, [r0, #8]
   2df6c:	b	2dfb0 <__assert_fail@plt+0x1cb78>
   2df70:	ldr	r0, [r5, #4]
   2df74:	cmp	r0, lr
   2df78:	bne	2dfe4 <__assert_fail@plt+0x1cbac>
   2df7c:	mov	r0, ip
   2df80:	add	r6, r0, #1
   2df84:	cmp	r6, #1
   2df88:	blt	2e294 <__assert_fail@plt+0x1ce5c>
   2df8c:	ldr	r2, [sp, #24]
   2df90:	ldr	r6, [r2, #8]
   2df94:	ldr	r2, [r5, #8]
   2df98:	ldr	r6, [r6, r0, lsl #2]
   2df9c:	ldr	r2, [r2, r0, lsl #2]
   2dfa0:	sub	r0, r0, #1
   2dfa4:	cmp	r2, r6
   2dfa8:	beq	2df80 <__assert_fail@plt+0x1cb48>
   2dfac:	b	2dfe4 <__assert_fail@plt+0x1cbac>
   2dfb0:	ldr	r4, [r8, r3, lsl #2]
   2dfb4:	ldr	r0, [r4]
   2dfb8:	cmp	r0, r7
   2dfbc:	bne	2dfe4 <__assert_fail@plt+0x1cbac>
   2dfc0:	ldrb	r0, [r4, #52]	; 0x34
   2dfc4:	and	r0, r0, #15
   2dfc8:	cmp	r0, r9
   2dfcc:	bne	2dfe4 <__assert_fail@plt+0x1cbac>
   2dfd0:	ldr	r0, [sp, #24]
   2dfd4:	cmp	r0, #0
   2dfd8:	ldrne	r5, [r4, #40]	; 0x28
   2dfdc:	cmpne	r5, #0
   2dfe0:	bne	2df70 <__assert_fail@plt+0x1cb38>
   2dfe4:	add	r3, r3, #1
   2dfe8:	cmp	r3, r1
   2dfec:	blt	2dfb0 <__assert_fail@plt+0x1cb78>
   2dff0:	mov	r0, #56	; 0x38
   2dff4:	mov	r1, #1
   2dff8:	bl	354f8 <__assert_fail@plt+0x240c0>
   2dffc:	cmp	r0, #0
   2e000:	beq	2e2b4 <__assert_fail@plt+0x1ce7c>
   2e004:	mov	r4, r0
   2e008:	ldr	r0, [sp, #24]
   2e00c:	add	r6, r4, #4
   2e010:	ldr	r8, [r0, #4]
   2e014:	cmp	r8, #1
   2e018:	str	r8, [r4, #8]
   2e01c:	blt	2e05c <__assert_fail@plt+0x1cc24>
   2e020:	lsl	r0, r8, #2
   2e024:	str	r8, [r4, #4]
   2e028:	bl	3554c <__assert_fail@plt+0x24114>
   2e02c:	cmp	r0, #0
   2e030:	str	r0, [r4, #12]
   2e034:	beq	2e2c8 <__assert_fail@plt+0x1ce90>
   2e038:	ldr	r1, [sp, #24]
   2e03c:	ldr	r8, [r1, #4]
   2e040:	ldr	r1, [r1, #8]
   2e044:	lsl	r2, r8, #2
   2e048:	bl	111ec <memcpy@plt>
   2e04c:	b	2e06c <__assert_fail@plt+0x1cc34>
   2e050:	mov	r4, #0
   2e054:	str	r4, [r0]
   2e058:	b	2e294 <__assert_fail@plt+0x1ce5c>
   2e05c:	mov	r0, #0
   2e060:	str	r0, [r6]
   2e064:	str	r0, [r6, #4]
   2e068:	str	r0, [r6, #8]
   2e06c:	str	r6, [r4, #40]	; 0x28
   2e070:	and	r0, r9, #15
   2e074:	cmp	r8, #1
   2e078:	ldrb	r1, [r4, #52]	; 0x34
   2e07c:	and	r1, r1, #240	; 0xf0
   2e080:	orr	r0, r1, r0
   2e084:	strb	r0, [r4, #52]	; 0x34
   2e088:	mov	r0, sl
   2e08c:	blt	2e280 <__assert_fail@plt+0x1ce48>
   2e090:	movw	lr, #65280	; 0xff00
   2e094:	and	r1, r9, #4
   2e098:	and	ip, r9, #1
   2e09c:	mov	r5, #0
   2e0a0:	str	r0, [sp, #16]
   2e0a4:	str	r1, [sp]
   2e0a8:	and	r1, r9, #2
   2e0ac:	movt	lr, #3
   2e0b0:	mov	r9, #0
   2e0b4:	str	ip, [sp, #12]
   2e0b8:	str	r1, [sp, #8]
   2e0bc:	add	r1, lr, #255	; 0xff
   2e0c0:	str	r1, [sp, #20]
   2e0c4:	b	2e104 <__assert_fail@plt+0x1cccc>
   2e0c8:	sub	r2, r2, #1
   2e0cc:	cmp	r2, r1
   2e0d0:	str	r2, [r4, #8]
   2e0d4:	ble	2e270 <__assert_fail@plt+0x1ce38>
   2e0d8:	ldr	r2, [r4, #12]
   2e0dc:	add	r3, r2, r1, lsl #2
   2e0e0:	ldr	r3, [r3, #4]
   2e0e4:	str	r3, [r2, r1, lsl #2]
   2e0e8:	add	r1, r1, #1
   2e0ec:	ldr	r3, [r4, #8]
   2e0f0:	cmp	r1, r3
   2e0f4:	blt	2e0dc <__assert_fail@plt+0x1cca4>
   2e0f8:	ldr	r1, [sp, #24]
   2e0fc:	ldr	r8, [r1, #4]
   2e100:	b	2e270 <__assert_fail@plt+0x1ce38>
   2e104:	ldr	r1, [sp, #24]
   2e108:	ldr	r2, [r0]
   2e10c:	ldr	r1, [r1, #8]
   2e110:	ldr	r1, [r1, r9, lsl #2]
   2e114:	add	r1, r2, r1, lsl #3
   2e118:	ldr	sl, [r1, #4]
   2e11c:	ldr	r1, [sp, #20]
   2e120:	and	r1, sl, r1
   2e124:	cmp	r1, #1
   2e128:	beq	2e274 <__assert_fail@plt+0x1ce3c>
   2e12c:	ldrb	r3, [r4, #52]	; 0x34
   2e130:	mov	r2, #32
   2e134:	and	r1, sl, lr
   2e138:	and	r2, r2, sl, lsr #15
   2e13c:	orr	r2, r3, r2
   2e140:	uxtb	r3, sl
   2e144:	cmp	r3, #2
   2e148:	strb	r2, [r4, #52]	; 0x34
   2e14c:	beq	2e160 <__assert_fail@plt+0x1cd28>
   2e150:	cmp	r3, #4
   2e154:	bne	2e16c <__assert_fail@plt+0x1cd34>
   2e158:	mov	r3, #64	; 0x40
   2e15c:	b	2e164 <__assert_fail@plt+0x1cd2c>
   2e160:	mov	r3, #16
   2e164:	orr	r2, r2, r3
   2e168:	strb	r2, [r4, #52]	; 0x34
   2e16c:	cmp	r1, #0
   2e170:	beq	2e274 <__assert_fail@plt+0x1ce3c>
   2e174:	ldr	r1, [r4, #40]	; 0x28
   2e178:	cmp	r1, r6
   2e17c:	beq	2e194 <__assert_fail@plt+0x1cd5c>
   2e180:	cmp	ip, #0
   2e184:	bne	2e228 <__assert_fail@plt+0x1cdf0>
   2e188:	ands	r1, sl, #256	; 0x100
   2e18c:	bne	2e25c <__assert_fail@plt+0x1ce24>
   2e190:	b	2e228 <__assert_fail@plt+0x1cdf0>
   2e194:	mov	r0, #12
   2e198:	bl	3554c <__assert_fail@plt+0x24114>
   2e19c:	cmp	r0, #0
   2e1a0:	beq	2e2ac <__assert_fail@plt+0x1ce74>
   2e1a4:	mov	r5, r0
   2e1a8:	str	r0, [r4, #40]	; 0x28
   2e1ac:	ldr	r0, [sp, #24]
   2e1b0:	ldr	r8, [r0, #4]
   2e1b4:	cmp	r8, #1
   2e1b8:	str	r8, [r5, #4]
   2e1bc:	blt	2e1f0 <__assert_fail@plt+0x1cdb8>
   2e1c0:	lsl	r0, r8, #2
   2e1c4:	str	r8, [r5]
   2e1c8:	bl	3554c <__assert_fail@plt+0x24114>
   2e1cc:	cmp	r0, #0
   2e1d0:	str	r0, [r5, #8]
   2e1d4:	beq	2e2a0 <__assert_fail@plt+0x1ce68>
   2e1d8:	ldr	r1, [sp, #24]
   2e1dc:	ldr	r8, [r1, #4]
   2e1e0:	ldr	r1, [r1, #8]
   2e1e4:	lsl	r2, r8, #2
   2e1e8:	bl	111ec <memcpy@plt>
   2e1ec:	b	2e200 <__assert_fail@plt+0x1cdc8>
   2e1f0:	mov	r0, #0
   2e1f4:	str	r0, [r5]
   2e1f8:	str	r0, [r5, #4]
   2e1fc:	str	r0, [r5, #8]
   2e200:	ldrb	r0, [r4, #52]	; 0x34
   2e204:	ldr	ip, [sp, #12]
   2e208:	movw	lr, #65280	; 0xff00
   2e20c:	mov	r5, #0
   2e210:	movt	lr, #3
   2e214:	orr	r0, r0, #128	; 0x80
   2e218:	strb	r0, [r4, #52]	; 0x34
   2e21c:	ldr	r0, [sp, #16]
   2e220:	cmp	ip, #0
   2e224:	beq	2e188 <__assert_fail@plt+0x1cd50>
   2e228:	cmp	ip, #0
   2e22c:	andsne	r1, sl, #512	; 0x200
   2e230:	bne	2e25c <__assert_fail@plt+0x1ce24>
   2e234:	ldr	r1, [sp, #8]
   2e238:	cmp	r1, #0
   2e23c:	bne	2e248 <__assert_fail@plt+0x1ce10>
   2e240:	ands	r1, sl, #4096	; 0x1000
   2e244:	bne	2e25c <__assert_fail@plt+0x1ce24>
   2e248:	ldr	r1, [sp]
   2e24c:	cmp	r1, #0
   2e250:	bne	2e274 <__assert_fail@plt+0x1ce3c>
   2e254:	ands	r1, sl, #16384	; 0x4000
   2e258:	beq	2e274 <__assert_fail@plt+0x1ce3c>
   2e25c:	sub	r1, r9, r5
   2e260:	cmp	r1, #0
   2e264:	ldrge	r2, [r4, #8]
   2e268:	cmpge	r2, r1
   2e26c:	bgt	2e0c8 <__assert_fail@plt+0x1cc90>
   2e270:	add	r5, r5, #1
   2e274:	add	r9, r9, #1
   2e278:	cmp	r9, r8
   2e27c:	blt	2e104 <__assert_fail@plt+0x1cccc>
   2e280:	mov	r1, r4
   2e284:	mov	r2, r7
   2e288:	bl	2e2e0 <__assert_fail@plt+0x1cea8>
   2e28c:	cmp	r0, #0
   2e290:	bne	2e2ac <__assert_fail@plt+0x1ce74>
   2e294:	mov	r0, r4
   2e298:	sub	sp, fp, #28
   2e29c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e2a0:	mov	r0, #0
   2e2a4:	str	r0, [r5]
   2e2a8:	str	r0, [r5, #4]
   2e2ac:	mov	r0, r4
   2e2b0:	bl	282fc <__assert_fail@plt+0x16ec4>
   2e2b4:	ldr	r1, [sp, #4]
   2e2b8:	mov	r0, #12
   2e2bc:	mov	r4, #0
   2e2c0:	str	r0, [r1]
   2e2c4:	b	2e294 <__assert_fail@plt+0x1ce5c>
   2e2c8:	mov	r0, #0
   2e2cc:	str	r0, [r4, #4]
   2e2d0:	str	r0, [r4, #8]
   2e2d4:	mov	r0, r4
   2e2d8:	bl	1386c <__assert_fail@plt+0x2434>
   2e2dc:	b	2e2b4 <__assert_fail@plt+0x1ce7c>
   2e2e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e2e4:	add	fp, sp, #28
   2e2e8:	sub	sp, sp, #4
   2e2ec:	str	r2, [r1]
   2e2f0:	mov	r4, r1
   2e2f4:	mov	r7, r0
   2e2f8:	mov	r0, #0
   2e2fc:	mov	r9, r2
   2e300:	ldr	r1, [r1, #8]
   2e304:	str	r1, [r4, #16]
   2e308:	str	r0, [r4, #20]
   2e30c:	lsl	r0, r1, #2
   2e310:	bl	3554c <__assert_fail@plt+0x24114>
   2e314:	mov	r8, #12
   2e318:	cmp	r0, #0
   2e31c:	str	r0, [r4, #24]
   2e320:	beq	2e3e0 <__assert_fail@plt+0x1cfa8>
   2e324:	ldr	r1, [r4, #8]
   2e328:	cmp	r1, #1
   2e32c:	blt	2e3a0 <__assert_fail@plt+0x1cf68>
   2e330:	mov	r5, #0
   2e334:	mov	sl, #2
   2e338:	ldr	r2, [r4, #12]
   2e33c:	ldr	r6, [r2, r5, lsl #2]
   2e340:	ldr	r2, [r7]
   2e344:	add	r2, r2, r6, lsl #3
   2e348:	ldrb	r2, [r2, #4]
   2e34c:	tst	r2, #8
   2e350:	bne	2e394 <__assert_fail@plt+0x1cf5c>
   2e354:	ldr	r2, [r4, #16]
   2e358:	ldr	r1, [r4, #20]
   2e35c:	cmp	r2, r1
   2e360:	bne	2e384 <__assert_fail@plt+0x1cf4c>
   2e364:	add	r1, sl, r2, lsl #1
   2e368:	str	r1, [r4, #16]
   2e36c:	lsl	r1, r1, #2
   2e370:	bl	3557c <__assert_fail@plt+0x24144>
   2e374:	cmp	r0, #0
   2e378:	beq	2e3e0 <__assert_fail@plt+0x1cfa8>
   2e37c:	str	r0, [r4, #24]
   2e380:	ldr	r1, [r4, #20]
   2e384:	add	r2, r1, #1
   2e388:	str	r2, [r4, #20]
   2e38c:	str	r6, [r0, r1, lsl #2]
   2e390:	ldr	r1, [r4, #8]
   2e394:	add	r5, r5, #1
   2e398:	cmp	r5, r1
   2e39c:	blt	2e338 <__assert_fail@plt+0x1cf00>
   2e3a0:	ldr	r1, [r7, #68]	; 0x44
   2e3a4:	ldr	r0, [r7, #32]
   2e3a8:	and	r1, r1, r9
   2e3ac:	mov	r5, r0
   2e3b0:	add	r2, r1, r1, lsl #1
   2e3b4:	ldr	r1, [r5, r2, lsl #2]!
   2e3b8:	mov	r6, r5
   2e3bc:	ldr	r3, [r6, #4]!
   2e3c0:	cmp	r3, r1
   2e3c4:	ble	2e3ec <__assert_fail@plt+0x1cfb4>
   2e3c8:	add	r0, r0, r2, lsl #2
   2e3cc:	ldr	r0, [r0, #8]
   2e3d0:	add	r2, r1, #1
   2e3d4:	mov	r8, #0
   2e3d8:	str	r2, [r5]
   2e3dc:	str	r4, [r0, r1, lsl #2]
   2e3e0:	mov	r0, r8
   2e3e4:	sub	sp, fp, #28
   2e3e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e3ec:	add	r7, r0, r2, lsl #2
   2e3f0:	mov	r2, #2
   2e3f4:	ldr	r0, [r7, #8]!
   2e3f8:	add	r9, r2, r1, lsl #1
   2e3fc:	lsl	r1, r9, #2
   2e400:	bl	3557c <__assert_fail@plt+0x24144>
   2e404:	cmp	r0, #0
   2e408:	beq	2e3e0 <__assert_fail@plt+0x1cfa8>
   2e40c:	str	r0, [r7]
   2e410:	str	r9, [r6]
   2e414:	ldr	r1, [r5]
   2e418:	b	2e3d0 <__assert_fail@plt+0x1cf98>
   2e41c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e420:	add	fp, sp, #28
   2e424:	sub	sp, sp, #36	; 0x24
   2e428:	mov	r4, r0
   2e42c:	ldr	r0, [r0, #24]
   2e430:	mov	r6, r2
   2e434:	mov	r9, r1
   2e438:	cmp	r0, r1
   2e43c:	ble	2e63c <__assert_fail@plt+0x1d204>
   2e440:	ldr	r0, [r4, #80]	; 0x50
   2e444:	mov	r1, #4
   2e448:	mov	r5, r9
   2e44c:	cmp	r0, #2
   2e450:	movge	r0, #0
   2e454:	strge	r0, [r4, #16]
   2e458:	strge	r0, [r4, #20]
   2e45c:	mov	r0, #0
   2e460:	tst	r6, #1
   2e464:	str	r0, [r4, #24]
   2e468:	str	r0, [r4, #28]
   2e46c:	str	r0, [r4, #32]
   2e470:	strb	r0, [r4, #76]	; 0x4c
   2e474:	movweq	r1, #6
   2e478:	ldr	r2, [r4, #44]	; 0x2c
   2e47c:	ldr	r3, [r4, #52]	; 0x34
   2e480:	str	r2, [r4, #48]	; 0x30
   2e484:	str	r3, [r4, #56]	; 0x38
   2e488:	str	r1, [r4, #60]	; 0x3c
   2e48c:	ldrb	r1, [r4, #75]	; 0x4b
   2e490:	cmp	r1, #0
   2e494:	ldreq	r1, [r4]
   2e498:	streq	r1, [r4, #4]
   2e49c:	cmp	r5, #0
   2e4a0:	beq	2e5c4 <__assert_fail@plt+0x1d18c>
   2e4a4:	ldr	r1, [r4, #32]
   2e4a8:	cmp	r5, r1
   2e4ac:	bge	2e64c <__assert_fail@plt+0x1d214>
   2e4b0:	ldrb	r0, [r4, #76]	; 0x4c
   2e4b4:	cmp	r0, #0
   2e4b8:	bne	2e74c <__assert_fail@plt+0x1d314>
   2e4bc:	cmp	r5, #0
   2e4c0:	ble	2e504 <__assert_fail@plt+0x1d0cc>
   2e4c4:	ldr	r1, [r4, #48]	; 0x30
   2e4c8:	sub	r0, r5, #1
   2e4cc:	cmp	r1, r0
   2e4d0:	beq	2e804 <__assert_fail@plt+0x1d3cc>
   2e4d4:	ldr	r1, [r4, #80]	; 0x50
   2e4d8:	cmp	r1, #2
   2e4dc:	blt	2e50c <__assert_fail@plt+0x1d0d4>
   2e4e0:	ldr	r0, [r4, #8]
   2e4e4:	mov	r1, r5
   2e4e8:	sub	r0, r0, #4
   2e4ec:	ldr	r6, [r0, r1, lsl #2]
   2e4f0:	cmn	r6, #1
   2e4f4:	bne	2e540 <__assert_fail@plt+0x1d108>
   2e4f8:	sub	r1, r1, #1
   2e4fc:	cmp	r1, #0
   2e500:	bgt	2e4ec <__assert_fail@plt+0x1d0b4>
   2e504:	ldr	r1, [r4, #60]	; 0x3c
   2e508:	b	2e564 <__assert_fail@plt+0x1d12c>
   2e50c:	ldr	r1, [r4, #4]
   2e510:	ldr	r2, [r4, #68]	; 0x44
   2e514:	ldrb	r0, [r1, r0]
   2e518:	ubfx	r1, r0, #5, #3
   2e51c:	and	r3, r0, #31
   2e520:	ldr	r2, [r2, r1, lsl #2]
   2e524:	mov	r1, #1
   2e528:	tst	r2, r1, lsl r3
   2e52c:	bne	2e564 <__assert_fail@plt+0x1d12c>
   2e530:	mov	r1, #0
   2e534:	cmp	r0, #10
   2e538:	beq	2e558 <__assert_fail@plt+0x1d120>
   2e53c:	b	2e564 <__assert_fail@plt+0x1d12c>
   2e540:	ldrb	r0, [r4, #78]	; 0x4e
   2e544:	cmp	r0, #0
   2e548:	bne	2eac0 <__assert_fail@plt+0x1d688>
   2e54c:	mov	r1, #0
   2e550:	cmp	r6, #10
   2e554:	bne	2e564 <__assert_fail@plt+0x1d12c>
   2e558:	ldrb	r1, [r4, #77]	; 0x4d
   2e55c:	cmp	r1, #0
   2e560:	movwne	r1, #2
   2e564:	str	r1, [r4, #60]	; 0x3c
   2e568:	ldr	r0, [r4, #80]	; 0x50
   2e56c:	cmp	r0, #2
   2e570:	blt	2e58c <__assert_fail@plt+0x1d154>
   2e574:	ldr	r2, [r4, #28]
   2e578:	ldr	r0, [r4, #8]
   2e57c:	sub	r2, r2, r5
   2e580:	add	r1, r0, r5, lsl #2
   2e584:	lsl	r2, r2, #2
   2e588:	bl	111bc <memmove@plt>
   2e58c:	ldrb	r0, [r4, #75]	; 0x4b
   2e590:	cmp	r0, #0
   2e594:	bne	2e7ec <__assert_fail@plt+0x1d3b4>
   2e598:	ldr	r0, [r4, #28]
   2e59c:	ldr	r1, [r4, #32]
   2e5a0:	sub	r0, r0, r5
   2e5a4:	sub	r1, r1, r5
   2e5a8:	str	r0, [r4, #28]
   2e5ac:	str	r1, [r4, #32]
   2e5b0:	ldrb	r0, [r4, #75]	; 0x4b
   2e5b4:	cmp	r0, #0
   2e5b8:	ldreq	r0, [r4, #4]
   2e5bc:	addeq	r0, r0, r5
   2e5c0:	streq	r0, [r4, #4]
   2e5c4:	str	r9, [r4, #24]
   2e5c8:	ldr	r0, [r4, #48]	; 0x30
   2e5cc:	ldr	r3, [r4, #80]	; 0x50
   2e5d0:	ldr	r2, [r4, #56]	; 0x38
   2e5d4:	sub	r1, r0, r5
   2e5d8:	cmp	r3, #2
   2e5dc:	sub	r0, r2, r5
   2e5e0:	str	r1, [r4, #48]	; 0x30
   2e5e4:	str	r0, [r4, #56]	; 0x38
   2e5e8:	blt	2e610 <__assert_fail@plt+0x1d1d8>
   2e5ec:	ldrb	r0, [r4, #72]	; 0x48
   2e5f0:	cmp	r0, #0
   2e5f4:	beq	2e624 <__assert_fail@plt+0x1d1ec>
   2e5f8:	mov	r0, r4
   2e5fc:	bl	28360 <__assert_fail@plt+0x16f28>
   2e600:	cmp	r0, #0
   2e604:	beq	2e62c <__assert_fail@plt+0x1d1f4>
   2e608:	sub	sp, fp, #28
   2e60c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e610:	ldrb	r0, [r4, #75]	; 0x4b
   2e614:	cmp	r0, #0
   2e618:	bne	2e810 <__assert_fail@plt+0x1d3d8>
   2e61c:	str	r1, [r4, #28]
   2e620:	b	2e62c <__assert_fail@plt+0x1d1f4>
   2e624:	mov	r0, r4
   2e628:	bl	28a20 <__assert_fail@plt+0x175e8>
   2e62c:	mov	r0, #0
   2e630:	str	r0, [r4, #40]	; 0x28
   2e634:	sub	sp, fp, #28
   2e638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e63c:	sub	r5, r9, r0
   2e640:	cmp	r5, #0
   2e644:	bne	2e4a4 <__assert_fail@plt+0x1d06c>
   2e648:	b	2e5c4 <__assert_fail@plt+0x1d18c>
   2e64c:	ldrb	r2, [r4, #76]	; 0x4c
   2e650:	ldr	lr, [r4, #28]
   2e654:	cmp	r2, #0
   2e658:	bne	2ece0 <__assert_fail@plt+0x1d8a8>
   2e65c:	mov	r2, #0
   2e660:	str	r2, [r4, #28]
   2e664:	ldr	r3, [r4, #80]	; 0x50
   2e668:	cmp	r3, #2
   2e66c:	blt	2e894 <__assert_fail@plt+0x1d45c>
   2e670:	ldrb	r2, [r4, #73]	; 0x49
   2e674:	cmp	r2, #0
   2e678:	beq	2e734 <__assert_fail@plt+0x1d2fc>
   2e67c:	ldr	r7, [r4]
   2e680:	sub	r3, r5, r3
   2e684:	add	ip, r7, r0
   2e688:	add	r3, ip, r3
   2e68c:	add	r8, ip, r5
   2e690:	cmp	r3, r7
   2e694:	movcc	r3, r7
   2e698:	mov	r7, r8
   2e69c:	sub	r7, r7, #1
   2e6a0:	cmp	r7, r3
   2e6a4:	bcc	2e734 <__assert_fail@plt+0x1d2fc>
   2e6a8:	ldrb	r2, [r7]
   2e6ac:	and	r2, r2, #192	; 0xc0
   2e6b0:	cmp	r2, #128	; 0x80
   2e6b4:	beq	2e69c <__assert_fail@plt+0x1d264>
   2e6b8:	ldr	r0, [r4, #48]	; 0x30
   2e6bc:	mov	sl, lr
   2e6c0:	mov	r1, r7
   2e6c4:	add	r3, ip, r0
   2e6c8:	ldr	r0, [r4, #64]	; 0x40
   2e6cc:	sub	r2, r3, r7
   2e6d0:	cmp	r0, #0
   2e6d4:	bne	2edb8 <__assert_fail@plt+0x1d980>
   2e6d8:	mov	r0, #0
   2e6dc:	add	r3, sp, #24
   2e6e0:	str	r0, [sp, #28]
   2e6e4:	str	r0, [sp, #24]
   2e6e8:	add	r0, sp, #20
   2e6ec:	bl	35998 <__assert_fail@plt+0x24560>
   2e6f0:	sub	r1, r8, r7
   2e6f4:	mvn	r7, #0
   2e6f8:	cmp	r0, r1
   2e6fc:	bcc	2e720 <__assert_fail@plt+0x1d2e8>
   2e700:	cmn	r0, #3
   2e704:	bhi	2e720 <__assert_fail@plt+0x1d2e8>
   2e708:	mov	r2, #0
   2e70c:	sub	r0, r0, r1
   2e710:	str	r2, [r4, #16]
   2e714:	str	r2, [r4, #20]
   2e718:	str	r0, [r4, #28]
   2e71c:	ldr	r7, [sp, #20]
   2e720:	cmn	r7, #1
   2e724:	bne	2ec04 <__assert_fail@plt+0x1d7cc>
   2e728:	ldr	r0, [r4, #24]
   2e72c:	ldr	r1, [r4, #32]
   2e730:	mov	lr, sl
   2e734:	add	r8, r1, r0
   2e738:	cmp	r8, r9
   2e73c:	bge	2eae0 <__assert_fail@plt+0x1d6a8>
   2e740:	add	sl, r4, #16
   2e744:	str	lr, [sp]
   2e748:	b	2eba4 <__assert_fail@plt+0x1d76c>
   2e74c:	ldr	ip, [r4, #12]
   2e750:	ldr	r0, [r4, #28]
   2e754:	mov	r1, #0
   2e758:	add	r2, r1, r0
   2e75c:	add	r2, r2, r2, lsr #31
   2e760:	asr	r7, r2, #1
   2e764:	ldr	r3, [ip, r7, lsl #2]
   2e768:	mov	r2, r7
   2e76c:	cmp	r3, r5
   2e770:	bgt	2e780 <__assert_fail@plt+0x1d348>
   2e774:	bge	2e78c <__assert_fail@plt+0x1d354>
   2e778:	add	r1, r7, #1
   2e77c:	mov	r2, r0
   2e780:	cmp	r1, r2
   2e784:	mov	r0, r2
   2e788:	blt	2e758 <__assert_fail@plt+0x1d320>
   2e78c:	mov	r8, #0
   2e790:	cmp	r3, r5
   2e794:	movwlt	r8, #1
   2e798:	add	sl, r7, r8
   2e79c:	cmp	sl, #0
   2e7a0:	ble	2e7e4 <__assert_fail@plt+0x1d3ac>
   2e7a4:	ldr	r1, [r4, #48]	; 0x30
   2e7a8:	sub	r0, sl, #1
   2e7ac:	cmp	r1, r0
   2e7b0:	beq	2ed08 <__assert_fail@plt+0x1d8d0>
   2e7b4:	ldr	r1, [r4, #80]	; 0x50
   2e7b8:	cmp	r1, #2
   2e7bc:	blt	2e8f0 <__assert_fail@plt+0x1d4b8>
   2e7c0:	ldr	r0, [r4, #8]
   2e7c4:	mov	r1, sl
   2e7c8:	sub	r0, r0, #4
   2e7cc:	ldr	r6, [r0, r1, lsl #2]
   2e7d0:	cmn	r6, #1
   2e7d4:	bne	2e924 <__assert_fail@plt+0x1d4ec>
   2e7d8:	sub	r1, r1, #1
   2e7dc:	cmp	r1, #0
   2e7e0:	bgt	2e7cc <__assert_fail@plt+0x1d394>
   2e7e4:	ldr	r1, [r4, #60]	; 0x3c
   2e7e8:	b	2e948 <__assert_fail@plt+0x1d510>
   2e7ec:	ldr	r2, [r4, #28]
   2e7f0:	ldr	r0, [r4, #4]
   2e7f4:	add	r1, r0, r5
   2e7f8:	sub	r2, r2, r5
   2e7fc:	bl	111bc <memmove@plt>
   2e800:	b	2e598 <__assert_fail@plt+0x1d160>
   2e804:	and	r0, r6, #2
   2e808:	eor	r1, r0, #10
   2e80c:	b	2e564 <__assert_fail@plt+0x1d12c>
   2e810:	ldrb	r0, [r4, #72]	; 0x48
   2e814:	cmp	r0, #0
   2e818:	beq	2eaec <__assert_fail@plt+0x1d6b4>
   2e81c:	ldr	r6, [r4, #36]	; 0x24
   2e820:	ldr	r5, [r4, #28]
   2e824:	cmp	r6, r1
   2e828:	movgt	r6, r1
   2e82c:	cmp	r5, r6
   2e830:	blt	2e83c <__assert_fail@plt+0x1d404>
   2e834:	b	2e888 <__assert_fail@plt+0x1d450>
   2e838:	ldr	r9, [r4, #24]
   2e83c:	ldr	r1, [r4]
   2e840:	ldr	r0, [r4, #64]	; 0x40
   2e844:	add	r1, r1, r9
   2e848:	cmp	r0, #0
   2e84c:	ldrb	r7, [r1, r5]
   2e850:	ldrbne	r7, [r0, r7]
   2e854:	add	r0, r7, #128	; 0x80
   2e858:	lsr	r0, r0, #7
   2e85c:	cmp	r0, #2
   2e860:	bhi	2e870 <__assert_fail@plt+0x1d438>
   2e864:	bl	112f4 <__ctype_toupper_loc@plt>
   2e868:	ldr	r0, [r0]
   2e86c:	ldr	r7, [r0, r7, lsl #2]
   2e870:	ldr	r0, [r4, #4]
   2e874:	strb	r7, [r0, r5]
   2e878:	add	r5, r5, #1
   2e87c:	cmp	r5, r6
   2e880:	blt	2e838 <__assert_fail@plt+0x1d400>
   2e884:	mov	r5, r6
   2e888:	str	r5, [r4, #28]
   2e88c:	str	r5, [r4, #32]
   2e890:	b	2e62c <__assert_fail@plt+0x1d1f4>
   2e894:	ldr	r3, [r4]
   2e898:	add	r0, r5, r0
   2e89c:	ldr	r1, [r4, #64]	; 0x40
   2e8a0:	add	r0, r3, r0
   2e8a4:	cmp	r1, #0
   2e8a8:	ldrb	r0, [r0, #-1]
   2e8ac:	str	r2, [r4, #32]
   2e8b0:	ldrbne	r0, [r1, r0]
   2e8b4:	ldr	r1, [r4, #68]	; 0x44
   2e8b8:	ubfx	r2, r0, #5, #3
   2e8bc:	and	r3, r0, #31
   2e8c0:	ldr	r2, [r1, r2, lsl #2]
   2e8c4:	mov	r1, #1
   2e8c8:	tst	r2, r1, lsl r3
   2e8cc:	bne	2e8e8 <__assert_fail@plt+0x1d4b0>
   2e8d0:	mov	r1, #0
   2e8d4:	cmp	r0, #10
   2e8d8:	bne	2e8e8 <__assert_fail@plt+0x1d4b0>
   2e8dc:	ldrb	r1, [r4, #77]	; 0x4d
   2e8e0:	cmp	r1, #0
   2e8e4:	movwne	r1, #2
   2e8e8:	str	r1, [r4, #60]	; 0x3c
   2e8ec:	b	2e5b0 <__assert_fail@plt+0x1d178>
   2e8f0:	ldr	r1, [r4, #4]
   2e8f4:	ldr	r2, [r4, #68]	; 0x44
   2e8f8:	ldrb	r0, [r1, r0]
   2e8fc:	ubfx	r1, r0, #5, #3
   2e900:	and	r3, r0, #31
   2e904:	ldr	r2, [r2, r1, lsl #2]
   2e908:	mov	r1, #1
   2e90c:	tst	r2, r1, lsl r3
   2e910:	bne	2e948 <__assert_fail@plt+0x1d510>
   2e914:	mov	r1, #0
   2e918:	cmp	r0, #10
   2e91c:	beq	2e93c <__assert_fail@plt+0x1d504>
   2e920:	b	2e948 <__assert_fail@plt+0x1d510>
   2e924:	ldrb	r0, [r4, #78]	; 0x4e
   2e928:	cmp	r0, #0
   2e92c:	bne	2ed68 <__assert_fail@plt+0x1d930>
   2e930:	mov	r1, #0
   2e934:	cmp	r6, #10
   2e938:	bne	2e948 <__assert_fail@plt+0x1d510>
   2e93c:	ldrb	r1, [r4, #77]	; 0x4d
   2e940:	cmp	r1, #0
   2e944:	movwne	r1, #2
   2e948:	str	r1, [r4, #60]	; 0x3c
   2e94c:	cmp	sl, r5
   2e950:	ldr	r2, [r4, #28]
   2e954:	bne	2e9e4 <__assert_fail@plt+0x1d5ac>
   2e958:	cmp	r2, r5
   2e95c:	ble	2e9e4 <__assert_fail@plt+0x1d5ac>
   2e960:	ldr	r0, [r4, #12]
   2e964:	ldr	r0, [r0, r5, lsl #2]
   2e968:	cmp	r0, r5
   2e96c:	bne	2e9e4 <__assert_fail@plt+0x1d5ac>
   2e970:	ldr	r0, [r4, #8]
   2e974:	sub	r2, r2, r5
   2e978:	lsl	r2, r2, #2
   2e97c:	add	r1, r0, r5, lsl #2
   2e980:	bl	111bc <memmove@plt>
   2e984:	ldr	r2, [r4, #28]
   2e988:	ldr	r0, [r4, #4]
   2e98c:	add	r1, r0, r5
   2e990:	sub	r2, r2, r5
   2e994:	bl	111bc <memmove@plt>
   2e998:	ldr	r0, [r4, #28]
   2e99c:	ldr	r1, [r4, #32]
   2e9a0:	sub	r0, r0, r5
   2e9a4:	sub	r1, r1, r5
   2e9a8:	cmp	r0, #1
   2e9ac:	str	r0, [r4, #28]
   2e9b0:	str	r1, [r4, #32]
   2e9b4:	blt	2e5b0 <__assert_fail@plt+0x1d178>
   2e9b8:	ldr	r0, [r4, #12]
   2e9bc:	mov	r2, #0
   2e9c0:	add	r1, r0, r5, lsl #2
   2e9c4:	ldr	r3, [r1, r2, lsl #2]
   2e9c8:	sub	r3, r3, r5
   2e9cc:	str	r3, [r0, r2, lsl #2]
   2e9d0:	add	r2, r2, #1
   2e9d4:	ldr	r3, [r4, #28]
   2e9d8:	cmp	r2, r3
   2e9dc:	blt	2e9c4 <__assert_fail@plt+0x1d58c>
   2e9e0:	b	2e5b0 <__assert_fail@plt+0x1d178>
   2e9e4:	mov	r0, #0
   2e9e8:	strb	r0, [r4, #76]	; 0x4c
   2e9ec:	sub	r0, r5, r9
   2e9f0:	ldr	r1, [r4, #44]	; 0x2c
   2e9f4:	ldr	r3, [r4, #52]	; 0x34
   2e9f8:	add	r1, r0, r1
   2e9fc:	add	r0, r0, r3
   2ea00:	str	r1, [r4, #48]	; 0x30
   2ea04:	str	r0, [r4, #56]	; 0x38
   2ea08:	add	r0, r7, r8
   2ea0c:	sub	r1, r0, #1
   2ea10:	add	r0, r1, #1
   2ea14:	cmp	r0, #1
   2ea18:	blt	2ea30 <__assert_fail@plt+0x1d5f8>
   2ea1c:	ldr	r3, [r4, #12]
   2ea20:	ldr	r3, [r3, r1, lsl #2]
   2ea24:	sub	r1, r1, #1
   2ea28:	cmp	r3, r5
   2ea2c:	beq	2ea10 <__assert_fail@plt+0x1d5d8>
   2ea30:	cmp	r0, r2
   2ea34:	bge	2ea54 <__assert_fail@plt+0x1d61c>
   2ea38:	ldr	r1, [r4, #8]
   2ea3c:	ldr	r3, [r1, r0, lsl #2]
   2ea40:	cmn	r3, #1
   2ea44:	bne	2ea54 <__assert_fail@plt+0x1d61c>
   2ea48:	add	r0, r0, #1
   2ea4c:	cmp	r0, r2
   2ea50:	blt	2ea3c <__assert_fail@plt+0x1d604>
   2ea54:	cmp	r0, r2
   2ea58:	bne	2ea6c <__assert_fail@plt+0x1d634>
   2ea5c:	mov	r0, #0
   2ea60:	str	r0, [r4, #28]
   2ea64:	str	r0, [r4, #32]
   2ea68:	b	2e5b0 <__assert_fail@plt+0x1d178>
   2ea6c:	ldr	r1, [r4, #12]
   2ea70:	ldr	r0, [r1, r0, lsl #2]
   2ea74:	subs	r2, r0, r5
   2ea78:	str	r2, [r4, #28]
   2ea7c:	beq	2eb6c <__assert_fail@plt+0x1d734>
   2ea80:	cmp	r2, #1
   2ea84:	blt	2eaa8 <__assert_fail@plt+0x1d670>
   2ea88:	ldr	r0, [r4, #8]
   2ea8c:	mov	r1, #0
   2ea90:	mvn	r3, #0
   2ea94:	str	r3, [r0, r1, lsl #2]
   2ea98:	add	r1, r1, #1
   2ea9c:	ldr	r2, [r4, #28]
   2eaa0:	cmp	r1, r2
   2eaa4:	blt	2ea94 <__assert_fail@plt+0x1d65c>
   2eaa8:	ldr	r0, [r4, #4]
   2eaac:	mov	r1, #255	; 0xff
   2eab0:	bl	1136c <memset@plt>
   2eab4:	ldr	r0, [r4, #28]
   2eab8:	str	r0, [r4, #32]
   2eabc:	b	2e5b0 <__assert_fail@plt+0x1d178>
   2eac0:	mov	r0, r6
   2eac4:	bl	11354 <iswalnum@plt>
   2eac8:	mov	r1, #1
   2eacc:	cmp	r6, #95	; 0x5f
   2ead0:	beq	2e564 <__assert_fail@plt+0x1d12c>
   2ead4:	cmp	r0, #0
   2ead8:	beq	2e54c <__assert_fail@plt+0x1d114>
   2eadc:	b	2e564 <__assert_fail@plt+0x1d12c>
   2eae0:	sub	r0, r8, r9
   2eae4:	str	r0, [r4, #28]
   2eae8:	b	2ec20 <__assert_fail@plt+0x1d7e8>
   2eaec:	ldr	r3, [r4, #64]	; 0x40
   2eaf0:	cmp	r3, #0
   2eaf4:	beq	2e62c <__assert_fail@plt+0x1d1f4>
   2eaf8:	ldr	r0, [r4, #36]	; 0x24
   2eafc:	ldr	r2, [r4, #28]
   2eb00:	cmp	r0, r1
   2eb04:	movgt	r0, r1
   2eb08:	cmp	r2, r0
   2eb0c:	bge	2eb60 <__assert_fail@plt+0x1d728>
   2eb10:	ldr	r7, [r4]
   2eb14:	add	r1, r2, r9
   2eb18:	ldr	r6, [r4, #4]
   2eb1c:	ldrb	r1, [r7, r1]
   2eb20:	ldrb	r1, [r3, r1]
   2eb24:	strb	r1, [r6, r2]
   2eb28:	add	r1, r2, #1
   2eb2c:	cmp	r1, r0
   2eb30:	bge	2eb5c <__assert_fail@plt+0x1d724>
   2eb34:	ldm	r4, {r2, r3}
   2eb38:	ldr	r7, [r4, #24]
   2eb3c:	ldr	r6, [r4, #64]	; 0x40
   2eb40:	add	r2, r2, r7
   2eb44:	ldrb	r2, [r2, r1]
   2eb48:	ldrb	r2, [r6, r2]
   2eb4c:	strb	r2, [r3, r1]
   2eb50:	add	r1, r1, #1
   2eb54:	cmp	r1, r0
   2eb58:	blt	2eb34 <__assert_fail@plt+0x1d6fc>
   2eb5c:	mov	r2, r0
   2eb60:	str	r2, [r4, #28]
   2eb64:	str	r2, [r4, #32]
   2eb68:	b	2e62c <__assert_fail@plt+0x1d1f4>
   2eb6c:	mov	r0, #0
   2eb70:	str	r0, [r4, #32]
   2eb74:	b	2e5b0 <__assert_fail@plt+0x1d178>
   2eb78:	cmp	r7, #0
   2eb7c:	mov	r1, #0
   2eb80:	ldr	r3, [sp, #4]
   2eb84:	ldr	r2, [sp, #8]
   2eb88:	cmpne	r0, #0
   2eb8c:	ldrne	r0, [r4]
   2eb90:	ldrbne	r1, [r0, r8]
   2eb94:	stm	sl, {r2, r3}
   2eb98:	mov	r0, #1
   2eb9c:	mov	r7, r1
   2eba0:	b	2ebe4 <__assert_fail@plt+0x1d7ac>
   2eba4:	ldr	r0, [r4]
   2eba8:	ldr	r2, [r4, #44]	; 0x2c
   2ebac:	mov	r3, sl
   2ebb0:	add	r1, r0, r8
   2ebb4:	ldr	r0, [sl]
   2ebb8:	sub	r7, r2, r8
   2ebbc:	mov	r2, r7
   2ebc0:	str	r0, [sp, #8]
   2ebc4:	ldr	r0, [sl, #4]
   2ebc8:	str	r0, [sp, #4]
   2ebcc:	add	r0, sp, #24
   2ebd0:	bl	35998 <__assert_fail@plt+0x24560>
   2ebd4:	sub	r1, r0, #1
   2ebd8:	cmn	r1, #3
   2ebdc:	bcs	2eb78 <__assert_fail@plt+0x1d740>
   2ebe0:	ldr	r7, [sp, #24]
   2ebe4:	add	r8, r0, r8
   2ebe8:	cmp	r8, r9
   2ebec:	blt	2eba4 <__assert_fail@plt+0x1d76c>
   2ebf0:	ldr	lr, [sp]
   2ebf4:	sub	r0, r8, r9
   2ebf8:	cmn	r7, #1
   2ebfc:	str	r0, [r4, #28]
   2ec00:	beq	2ec20 <__assert_fail@plt+0x1d7e8>
   2ec04:	ldrb	r0, [r4, #78]	; 0x4e
   2ec08:	cmp	r0, #0
   2ec0c:	bne	2ed88 <__assert_fail@plt+0x1d950>
   2ec10:	mov	r1, #0
   2ec14:	cmp	r7, #10
   2ec18:	beq	2ecb8 <__assert_fail@plt+0x1d880>
   2ec1c:	b	2ecc4 <__assert_fail@plt+0x1d88c>
   2ec20:	cmp	lr, #0
   2ec24:	ble	2ec64 <__assert_fail@plt+0x1d82c>
   2ec28:	ldr	r1, [r4, #48]	; 0x30
   2ec2c:	sub	r0, lr, #1
   2ec30:	cmp	r1, r0
   2ec34:	beq	2ed5c <__assert_fail@plt+0x1d924>
   2ec38:	ldr	r1, [r4, #80]	; 0x50
   2ec3c:	cmp	r1, #2
   2ec40:	blt	2ec6c <__assert_fail@plt+0x1d834>
   2ec44:	ldr	r0, [r4, #8]
   2ec48:	sub	r0, r0, #4
   2ec4c:	ldr	r6, [r0, lr, lsl #2]
   2ec50:	cmn	r6, #1
   2ec54:	bne	2eca0 <__assert_fail@plt+0x1d868>
   2ec58:	sub	lr, lr, #1
   2ec5c:	cmp	lr, #0
   2ec60:	bgt	2ec4c <__assert_fail@plt+0x1d814>
   2ec64:	ldr	r1, [r4, #60]	; 0x3c
   2ec68:	b	2ecc4 <__assert_fail@plt+0x1d88c>
   2ec6c:	ldr	r1, [r4, #4]
   2ec70:	ldr	r2, [r4, #68]	; 0x44
   2ec74:	ldrb	r0, [r1, r0]
   2ec78:	ubfx	r1, r0, #5, #3
   2ec7c:	and	r3, r0, #31
   2ec80:	ldr	r2, [r2, r1, lsl #2]
   2ec84:	mov	r1, #1
   2ec88:	tst	r2, r1, lsl r3
   2ec8c:	bne	2ecc4 <__assert_fail@plt+0x1d88c>
   2ec90:	mov	r1, #0
   2ec94:	cmp	r0, #10
   2ec98:	beq	2ecb8 <__assert_fail@plt+0x1d880>
   2ec9c:	b	2ecc4 <__assert_fail@plt+0x1d88c>
   2eca0:	ldrb	r0, [r4, #78]	; 0x4e
   2eca4:	cmp	r0, #0
   2eca8:	bne	2ee00 <__assert_fail@plt+0x1d9c8>
   2ecac:	mov	r1, #0
   2ecb0:	cmp	r6, #10
   2ecb4:	bne	2ecc4 <__assert_fail@plt+0x1d88c>
   2ecb8:	ldrb	r1, [r4, #77]	; 0x4d
   2ecbc:	cmp	r1, #0
   2ecc0:	movwne	r1, #2
   2ecc4:	str	r1, [r4, #60]	; 0x3c
   2ecc8:	mov	r0, #0
   2eccc:	ldr	r2, [r4, #28]
   2ecd0:	cmp	r2, #0
   2ecd4:	bne	2ed14 <__assert_fail@plt+0x1d8dc>
   2ecd8:	str	r0, [r4, #32]
   2ecdc:	b	2e5b0 <__assert_fail@plt+0x1d178>
   2ece0:	mov	r2, #0
   2ece4:	strb	r2, [r4, #76]	; 0x4c
   2ece8:	sub	r2, r5, r9
   2ecec:	ldr	r3, [r4, #44]	; 0x2c
   2ecf0:	ldr	r7, [r4, #52]	; 0x34
   2ecf4:	add	r3, r2, r3
   2ecf8:	add	r2, r2, r7
   2ecfc:	str	r3, [r4, #48]	; 0x30
   2ed00:	str	r2, [r4, #56]	; 0x38
   2ed04:	b	2e65c <__assert_fail@plt+0x1d224>
   2ed08:	and	r0, r6, #2
   2ed0c:	eor	r1, r0, #10
   2ed10:	b	2e948 <__assert_fail@plt+0x1d510>
   2ed14:	cmp	r2, #1
   2ed18:	blt	2ed3c <__assert_fail@plt+0x1d904>
   2ed1c:	ldr	r0, [r4, #8]
   2ed20:	mov	r1, #0
   2ed24:	mvn	r3, #0
   2ed28:	str	r3, [r0, r1, lsl #2]
   2ed2c:	add	r1, r1, #1
   2ed30:	ldr	r2, [r4, #28]
   2ed34:	cmp	r1, r2
   2ed38:	blt	2ed28 <__assert_fail@plt+0x1d8f0>
   2ed3c:	ldrb	r0, [r4, #75]	; 0x4b
   2ed40:	cmp	r0, #0
   2ed44:	beq	2edac <__assert_fail@plt+0x1d974>
   2ed48:	ldr	r0, [r4, #4]
   2ed4c:	mov	r1, #255	; 0xff
   2ed50:	bl	1136c <memset@plt>
   2ed54:	ldr	r0, [r4, #28]
   2ed58:	b	2ecd8 <__assert_fail@plt+0x1d8a0>
   2ed5c:	and	r0, r6, #2
   2ed60:	eor	r1, r0, #10
   2ed64:	b	2ecc4 <__assert_fail@plt+0x1d88c>
   2ed68:	mov	r0, r6
   2ed6c:	bl	11354 <iswalnum@plt>
   2ed70:	mov	r1, #1
   2ed74:	cmp	r6, #95	; 0x5f
   2ed78:	beq	2e948 <__assert_fail@plt+0x1d510>
   2ed7c:	cmp	r0, #0
   2ed80:	beq	2e930 <__assert_fail@plt+0x1d4f8>
   2ed84:	b	2e948 <__assert_fail@plt+0x1d510>
   2ed88:	mov	r0, r7
   2ed8c:	bl	11354 <iswalnum@plt>
   2ed90:	mov	r1, #1
   2ed94:	cmp	r7, #95	; 0x5f
   2ed98:	beq	2ecc4 <__assert_fail@plt+0x1d88c>
   2ed9c:	cmp	r0, #0
   2eda0:	mov	r2, r7
   2eda4:	beq	2ec10 <__assert_fail@plt+0x1d7d8>
   2eda8:	b	2ecc4 <__assert_fail@plt+0x1d88c>
   2edac:	mov	r0, r2
   2edb0:	str	r2, [r4, #32]
   2edb4:	b	2e5b0 <__assert_fail@plt+0x1d178>
   2edb8:	cmp	r2, #1
   2edbc:	blt	2ee20 <__assert_fail@plt+0x1d9e8>
   2edc0:	sub	r1, r7, #1
   2edc4:	sub	r1, r1, r3
   2edc8:	mvn	r3, #1
   2edcc:	cmn	r1, #7
   2edd0:	mvnle	r1, #6
   2edd4:	sub	ip, r3, r1
   2edd8:	add	r1, sp, #14
   2eddc:	ldrb	r3, [r7, ip]
   2ede0:	sub	lr, ip, #1
   2ede4:	ldrb	r3, [r0, r3]
   2ede8:	strb	r3, [r1, ip]
   2edec:	add	r3, ip, #1
   2edf0:	mov	ip, lr
   2edf4:	cmp	r3, #1
   2edf8:	bgt	2eddc <__assert_fail@plt+0x1d9a4>
   2edfc:	b	2e6d8 <__assert_fail@plt+0x1d2a0>
   2ee00:	mov	r0, r6
   2ee04:	bl	11354 <iswalnum@plt>
   2ee08:	mov	r1, #1
   2ee0c:	cmp	r6, #95	; 0x5f
   2ee10:	beq	2ecc4 <__assert_fail@plt+0x1d88c>
   2ee14:	cmp	r0, #0
   2ee18:	beq	2ecac <__assert_fail@plt+0x1d874>
   2ee1c:	b	2ecc4 <__assert_fail@plt+0x1d88c>
   2ee20:	add	r1, sp, #14
   2ee24:	b	2e6d8 <__assert_fail@plt+0x1d2a0>
   2ee28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ee2c:	add	fp, sp, #24
   2ee30:	mov	r8, r0
   2ee34:	ldr	r0, [r0, #124]	; 0x7c
   2ee38:	cmp	r0, #1
   2ee3c:	blt	2eec0 <__assert_fail@plt+0x1da88>
   2ee40:	mov	r7, #0
   2ee44:	ldr	r0, [r8, #132]	; 0x84
   2ee48:	ldr	r5, [r0, r7, lsl #2]
   2ee4c:	ldr	r0, [r5, #16]
   2ee50:	cmp	r0, #1
   2ee54:	blt	2ee84 <__assert_fail@plt+0x1da4c>
   2ee58:	mov	r4, #0
   2ee5c:	ldr	r0, [r5, #20]
   2ee60:	ldr	r6, [r0, r4, lsl #2]
   2ee64:	ldr	r0, [r6, #16]
   2ee68:	bl	1386c <__assert_fail@plt+0x2434>
   2ee6c:	mov	r0, r6
   2ee70:	bl	1386c <__assert_fail@plt+0x2434>
   2ee74:	ldr	r0, [r5, #16]
   2ee78:	add	r4, r4, #1
   2ee7c:	cmp	r4, r0
   2ee80:	blt	2ee5c <__assert_fail@plt+0x1da24>
   2ee84:	ldr	r0, [r5, #20]
   2ee88:	bl	1386c <__assert_fail@plt+0x2434>
   2ee8c:	ldr	r0, [r5, #8]
   2ee90:	cmp	r0, #0
   2ee94:	beq	2eea8 <__assert_fail@plt+0x1da70>
   2ee98:	ldr	r0, [r0, #8]
   2ee9c:	bl	1386c <__assert_fail@plt+0x2434>
   2eea0:	ldr	r0, [r5, #8]
   2eea4:	bl	1386c <__assert_fail@plt+0x2434>
   2eea8:	mov	r0, r5
   2eeac:	bl	1386c <__assert_fail@plt+0x2434>
   2eeb0:	ldr	r0, [r8, #124]	; 0x7c
   2eeb4:	add	r7, r7, #1
   2eeb8:	cmp	r7, r0
   2eebc:	blt	2ee44 <__assert_fail@plt+0x1da0c>
   2eec0:	mov	r0, #0
   2eec4:	str	r0, [r8, #108]	; 0x6c
   2eec8:	str	r0, [r8, #124]	; 0x7c
   2eecc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2eed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eed4:	add	fp, sp, #28
   2eed8:	sub	sp, sp, #4
   2eedc:	mov	sl, r0
   2eee0:	ldr	r0, [r1, #4]
   2eee4:	cmp	r0, #1
   2eee8:	blt	2efb4 <__assert_fail@plt+0x1db7c>
   2eeec:	ldr	r7, [sl, #84]	; 0x54
   2eef0:	mov	r8, r2
   2eef4:	mov	r5, r1
   2eef8:	mov	r4, #0
   2eefc:	b	2ef24 <__assert_fail@plt+0x1daec>
   2ef00:	ldr	r0, [sl, #132]	; 0x84
   2ef04:	lsl	r1, r9, #3
   2ef08:	bl	3557c <__assert_fail@plt+0x24144>
   2ef0c:	cmp	r0, #0
   2ef10:	beq	2efc0 <__assert_fail@plt+0x1db88>
   2ef14:	lsl	r1, r9, #1
   2ef18:	str	r1, [sl, #128]	; 0x80
   2ef1c:	str	r0, [sl, #132]	; 0x84
   2ef20:	b	2ef6c <__assert_fail@plt+0x1db34>
   2ef24:	ldr	r1, [r5, #8]
   2ef28:	ldr	r6, [r1, r4, lsl #2]
   2ef2c:	ldr	r1, [r7]
   2ef30:	add	r2, r1, r6, lsl #3
   2ef34:	ldrb	r2, [r2, #4]
   2ef38:	cmp	r2, #8
   2ef3c:	bne	2efa8 <__assert_fail@plt+0x1db70>
   2ef40:	ldr	r1, [r1, r6, lsl #3]
   2ef44:	cmp	r1, #31
   2ef48:	bgt	2efa8 <__assert_fail@plt+0x1db70>
   2ef4c:	ldr	r2, [r7, #80]	; 0x50
   2ef50:	mov	r3, #1
   2ef54:	tst	r2, r3, lsl r1
   2ef58:	beq	2efa8 <__assert_fail@plt+0x1db70>
   2ef5c:	ldr	r9, [sl, #124]	; 0x7c
   2ef60:	ldr	r0, [sl, #128]	; 0x80
   2ef64:	cmp	r9, r0
   2ef68:	beq	2ef00 <__assert_fail@plt+0x1dac8>
   2ef6c:	mov	r0, #1
   2ef70:	mov	r1, #24
   2ef74:	bl	354f8 <__assert_fail@plt+0x240c0>
   2ef78:	ldr	r1, [sl, #124]	; 0x7c
   2ef7c:	ldr	r2, [sl, #132]	; 0x84
   2ef80:	str	r0, [r2, r1, lsl #2]
   2ef84:	ldr	r0, [sl, #132]	; 0x84
   2ef88:	ldr	r0, [r0, r1, lsl #2]
   2ef8c:	cmp	r0, #0
   2ef90:	beq	2efc0 <__assert_fail@plt+0x1db88>
   2ef94:	add	r1, r1, #1
   2ef98:	str	r6, [r0, #4]
   2ef9c:	str	r1, [sl, #124]	; 0x7c
   2efa0:	str	r8, [r0]
   2efa4:	ldr	r0, [r5, #4]
   2efa8:	add	r4, r4, #1
   2efac:	cmp	r4, r0
   2efb0:	blt	2ef24 <__assert_fail@plt+0x1daec>
   2efb4:	mov	r0, #0
   2efb8:	sub	sp, fp, #28
   2efbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2efc0:	mov	r0, #12
   2efc4:	sub	sp, fp, #28
   2efc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2efcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efd0:	add	fp, sp, #28
   2efd4:	sub	sp, sp, #76	; 0x4c
   2efd8:	mov	r9, r0
   2efdc:	ldr	r0, [r1, #4]
   2efe0:	cmp	r0, #1
   2efe4:	blt	2f91c <__assert_fail@plt+0x1e4e4>
   2efe8:	ldr	r2, [r9, #84]	; 0x54
   2efec:	ldr	r8, [r9, #40]	; 0x28
   2eff0:	mov	r3, #0
   2eff4:	str	r9, [sp, #40]	; 0x28
   2eff8:	str	r1, [sp, #16]
   2effc:	str	r8, [sp, #52]	; 0x34
   2f000:	str	r2, [sp, #20]
   2f004:	b	2f03c <__assert_fail@plt+0x1dc04>
   2f008:	ldr	r0, [r9, #88]	; 0x58
   2f00c:	and	r0, r0, #2
   2f010:	eor	r1, r0, #10
   2f014:	b	2f120 <__assert_fail@plt+0x1dce8>
   2f018:	mov	r0, r4
   2f01c:	bl	11354 <iswalnum@plt>
   2f020:	mov	r1, #1
   2f024:	mov	r2, #0
   2f028:	cmp	r4, #95	; 0x5f
   2f02c:	beq	2f138 <__assert_fail@plt+0x1dd00>
   2f030:	cmp	r0, #0
   2f034:	beq	2f108 <__assert_fail@plt+0x1dcd0>
   2f038:	b	2f138 <__assert_fail@plt+0x1dd00>
   2f03c:	ldr	r0, [r1, #8]
   2f040:	str	r3, [sp, #24]
   2f044:	ldr	r3, [r0, r3, lsl #2]
   2f048:	ldr	r0, [r2]
   2f04c:	add	r5, r0, r3, lsl #3
   2f050:	mov	r1, r3
   2f054:	str	r3, [sp, #48]	; 0x30
   2f058:	ldr	r6, [r5, #4]!
   2f05c:	uxtb	r0, r6
   2f060:	cmp	r0, #4
   2f064:	bne	2f900 <__assert_fail@plt+0x1e4c8>
   2f068:	movw	r0, #65280	; 0xff00
   2f06c:	movt	r0, #3
   2f070:	tst	r6, r0
   2f074:	beq	2f16c <__assert_fail@plt+0x1dd34>
   2f078:	cmn	r8, #1
   2f07c:	ble	2f0bc <__assert_fail@plt+0x1dc84>
   2f080:	ldr	r0, [r9, #48]	; 0x30
   2f084:	cmp	r0, r8
   2f088:	beq	2f008 <__assert_fail@plt+0x1dbd0>
   2f08c:	ldr	r0, [r9, #80]	; 0x50
   2f090:	cmp	r0, #2
   2f094:	blt	2f0c4 <__assert_fail@plt+0x1dc8c>
   2f098:	ldr	r0, [r9, #8]
   2f09c:	mov	r1, r8
   2f0a0:	ldr	r4, [r0, r1, lsl #2]
   2f0a4:	cmn	r4, #1
   2f0a8:	bne	2f0fc <__assert_fail@plt+0x1dcc4>
   2f0ac:	sub	r2, r1, #1
   2f0b0:	cmp	r1, #0
   2f0b4:	mov	r1, r2
   2f0b8:	bgt	2f0a0 <__assert_fail@plt+0x1dc68>
   2f0bc:	ldr	r1, [r9, #60]	; 0x3c
   2f0c0:	b	2f120 <__assert_fail@plt+0x1dce8>
   2f0c4:	ldr	r0, [r9, #4]
   2f0c8:	ldr	r1, [r9, #68]	; 0x44
   2f0cc:	ldrb	r0, [r0, r8]
   2f0d0:	ubfx	r2, r0, #5, #3
   2f0d4:	and	r7, r0, #31
   2f0d8:	ldr	r3, [r1, r2, lsl #2]
   2f0dc:	mov	r1, #1
   2f0e0:	mov	r2, #0
   2f0e4:	tst	r3, r1, lsl r7
   2f0e8:	bne	2f138 <__assert_fail@plt+0x1dd00>
   2f0ec:	mov	r1, #0
   2f0f0:	cmp	r0, #10
   2f0f4:	beq	2f114 <__assert_fail@plt+0x1dcdc>
   2f0f8:	b	2f120 <__assert_fail@plt+0x1dce8>
   2f0fc:	ldrb	r0, [r9, #78]	; 0x4e
   2f100:	cmp	r0, #0
   2f104:	bne	2f018 <__assert_fail@plt+0x1dbe0>
   2f108:	mov	r1, #0
   2f10c:	cmp	r4, #10
   2f110:	bne	2f120 <__assert_fail@plt+0x1dce8>
   2f114:	ldrb	r1, [r9, #77]	; 0x4d
   2f118:	cmp	r1, #0
   2f11c:	movwne	r1, #2
   2f120:	and	r0, r1, #1
   2f124:	tst	r6, #1024	; 0x400
   2f128:	eor	r2, r0, #1
   2f12c:	beq	2f138 <__assert_fail@plt+0x1dd00>
   2f130:	cmp	r0, #0
   2f134:	beq	2f900 <__assert_fail@plt+0x1e4c8>
   2f138:	ldr	r0, [r5]
   2f13c:	cmp	r2, #0
   2f140:	bne	2f14c <__assert_fail@plt+0x1dd14>
   2f144:	ands	r2, r0, #2048	; 0x800
   2f148:	bne	2f900 <__assert_fail@plt+0x1e4c8>
   2f14c:	tst	r1, #2
   2f150:	bne	2f15c <__assert_fail@plt+0x1dd24>
   2f154:	ands	r2, r0, #8192	; 0x2000
   2f158:	bne	2f900 <__assert_fail@plt+0x1e4c8>
   2f15c:	tst	r1, #8
   2f160:	bne	2f16c <__assert_fail@plt+0x1dd34>
   2f164:	ands	r0, r0, #32768	; 0x8000
   2f168:	bne	2f900 <__assert_fail@plt+0x1e4c8>
   2f16c:	ldr	r2, [r9, #108]	; 0x6c
   2f170:	ldr	r0, [r9, #84]	; 0x54
   2f174:	ldr	ip, [r9, #4]
   2f178:	cmp	r2, #1
   2f17c:	str	r0, [sp, #28]
   2f180:	str	r2, [sp, #12]
   2f184:	blt	2f1c4 <__assert_fail@plt+0x1dd8c>
   2f188:	ldr	r1, [r9, #116]	; 0x74
   2f18c:	mov	r0, #0
   2f190:	mov	r5, #1
   2f194:	add	r3, r2, r0
   2f198:	add	r3, r3, r3, lsr #31
   2f19c:	asr	r7, r3, #1
   2f1a0:	add	r6, r7, r7, lsl #1
   2f1a4:	add	r6, r1, r6, lsl #3
   2f1a8:	ldr	r6, [r6, #4]
   2f1ac:	cmp	r6, r8
   2f1b0:	addlt	r0, r5, r3, asr #1
   2f1b4:	movge	r2, r7
   2f1b8:	cmp	r0, r2
   2f1bc:	blt	2f194 <__assert_fail@plt+0x1dd5c>
   2f1c0:	b	2f1c8 <__assert_fail@plt+0x1dd90>
   2f1c4:	mov	r0, #0
   2f1c8:	ldr	r1, [sp, #12]
   2f1cc:	ldr	r5, [sp, #28]
   2f1d0:	cmp	r0, r1
   2f1d4:	bge	2f218 <__assert_fail@plt+0x1dde0>
   2f1d8:	cmn	r0, #1
   2f1dc:	beq	2f218 <__assert_fail@plt+0x1dde0>
   2f1e0:	ldr	r1, [r9, #116]	; 0x74
   2f1e4:	add	r0, r0, r0, lsl #1
   2f1e8:	add	r0, r1, r0, lsl #3
   2f1ec:	ldr	r1, [r0, #4]
   2f1f0:	cmp	r1, r8
   2f1f4:	bne	2f218 <__assert_fail@plt+0x1dde0>
   2f1f8:	ldr	r1, [r0]
   2f1fc:	ldr	r2, [sp, #48]	; 0x30
   2f200:	cmp	r1, r2
   2f204:	beq	2f628 <__assert_fail@plt+0x1e1f0>
   2f208:	ldrb	r1, [r0, #20]
   2f20c:	add	r0, r0, #24
   2f210:	cmp	r1, #0
   2f214:	bne	2f1f8 <__assert_fail@plt+0x1ddc0>
   2f218:	ldr	r0, [r9, #124]	; 0x7c
   2f21c:	cmp	r0, #1
   2f220:	blt	2f628 <__assert_fail@plt+0x1e1f0>
   2f224:	ldr	r0, [r5]
   2f228:	ldr	r1, [sp, #48]	; 0x30
   2f22c:	mov	r2, #0
   2f230:	ldr	r1, [r0, r1, lsl #3]
   2f234:	str	r1, [sp, #36]	; 0x24
   2f238:	b	2f240 <__assert_fail@plt+0x1de08>
   2f23c:	ldr	r0, [r5]
   2f240:	ldr	r1, [r9, #132]	; 0x84
   2f244:	str	r2, [sp, #32]
   2f248:	ldr	lr, [r1, r2, lsl #2]
   2f24c:	ldr	r1, [lr, #4]
   2f250:	ldr	r0, [r0, r1, lsl #3]
   2f254:	ldr	r1, [sp, #36]	; 0x24
   2f258:	cmp	r0, r1
   2f25c:	bne	2f5f8 <__assert_fail@plt+0x1e1c0>
   2f260:	ldr	r0, [lr, #16]
   2f264:	ldr	r2, [lr]
   2f268:	mov	r8, #0
   2f26c:	str	lr, [sp, #44]	; 0x2c
   2f270:	cmp	r0, #1
   2f274:	blt	2f284 <__assert_fail@plt+0x1de4c>
   2f278:	ldr	r6, [sp, #52]	; 0x34
   2f27c:	mov	r7, r2
   2f280:	b	2f308 <__assert_fail@plt+0x1ded0>
   2f284:	ldr	r6, [sp, #52]	; 0x34
   2f288:	b	2f3b4 <__assert_fail@plt+0x1df7c>
   2f28c:	ldr	r2, [r9, #48]	; 0x30
   2f290:	cmp	r5, r2
   2f294:	bgt	2f3b0 <__assert_fail@plt+0x1df78>
   2f298:	ldr	r0, [r9, #36]	; 0x24
   2f29c:	ldr	r3, [r9, #104]	; 0x68
   2f2a0:	cmp	r0, r5
   2f2a4:	cmple	r0, r2
   2f2a8:	blt	2f2b8 <__assert_fail@plt+0x1de80>
   2f2ac:	cmp	r1, r5
   2f2b0:	cmple	r1, r2
   2f2b4:	bge	2f2d4 <__assert_fail@plt+0x1de9c>
   2f2b8:	ldr	r0, [sp, #40]	; 0x28
   2f2bc:	add	r1, r5, #1
   2f2c0:	mov	r9, r3
   2f2c4:	bl	2f958 <__assert_fail@plt+0x1e520>
   2f2c8:	mov	r3, r9
   2f2cc:	cmp	r0, #0
   2f2d0:	bne	2f930 <__assert_fail@plt+0x1e4f8>
   2f2d4:	ldr	r9, [sp, #40]	; 0x28
   2f2d8:	cmp	r5, r3
   2f2dc:	ble	2f300 <__assert_fail@plt+0x1dec8>
   2f2e0:	sub	r0, r5, r3
   2f2e4:	mov	r1, #0
   2f2e8:	lsl	r2, r0, #2
   2f2ec:	ldr	r0, [r9, #100]	; 0x64
   2f2f0:	add	r0, r0, r3, lsl #2
   2f2f4:	add	r0, r0, #4
   2f2f8:	bl	1136c <memset@plt>
   2f2fc:	str	r5, [r9, #104]	; 0x68
   2f300:	ldr	ip, [r9, #4]
   2f304:	b	2f334 <__assert_fail@plt+0x1defc>
   2f308:	ldr	r1, [lr, #20]
   2f30c:	ldr	sl, [r1, r8, lsl #2]
   2f310:	ldr	r1, [sl, #4]
   2f314:	sub	r4, r1, r7
   2f318:	str	r1, [fp, #-48]	; 0xffffffd0
   2f31c:	cmp	r4, #1
   2f320:	blt	2f354 <__assert_fail@plt+0x1df1c>
   2f324:	ldr	r1, [r9, #28]
   2f328:	add	r5, r4, r6
   2f32c:	cmp	r5, r1
   2f330:	bgt	2f28c <__assert_fail@plt+0x1de54>
   2f334:	add	r0, ip, r6
   2f338:	add	r1, ip, r7
   2f33c:	mov	r2, r4
   2f340:	mov	r5, ip
   2f344:	bl	1121c <memcmp@plt>
   2f348:	ldr	lr, [sp, #44]	; 0x2c
   2f34c:	cmp	r0, #0
   2f350:	bne	2f3a8 <__assert_fail@plt+0x1df70>
   2f354:	ldr	r0, [sp, #52]	; 0x34
   2f358:	ldr	r3, [sp, #48]	; 0x30
   2f35c:	mov	r1, lr
   2f360:	mov	r2, sl
   2f364:	mov	r5, lr
   2f368:	str	r0, [sp]
   2f36c:	mov	r0, r9
   2f370:	bl	2fff8 <__assert_fail@plt+0x1ebc0>
   2f374:	cmp	r0, #1
   2f378:	bhi	2f930 <__assert_fail@plt+0x1e4f8>
   2f37c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2f380:	ldr	r0, [r5, #16]
   2f384:	ldr	ip, [r9, #4]
   2f388:	add	r8, r8, #1
   2f38c:	add	r6, r4, r6
   2f390:	mov	lr, r5
   2f394:	mov	r1, r9
   2f398:	cmp	r8, r0
   2f39c:	mov	r7, r2
   2f3a0:	blt	2f308 <__assert_fail@plt+0x1ded0>
   2f3a4:	b	2f3b4 <__assert_fail@plt+0x1df7c>
   2f3a8:	ldr	r0, [lr, #16]
   2f3ac:	mov	ip, r5
   2f3b0:	mov	r2, r7
   2f3b4:	ldr	r5, [sp, #28]
   2f3b8:	cmp	r8, r0
   2f3bc:	bge	2f3c8 <__assert_fail@plt+0x1df90>
   2f3c0:	ldr	r8, [sp, #52]	; 0x34
   2f3c4:	b	2f5f8 <__assert_fail@plt+0x1e1c0>
   2f3c8:	cmp	r8, #0
   2f3cc:	ldr	r8, [sp, #52]	; 0x34
   2f3d0:	addne	r2, r2, #1
   2f3d4:	cmp	r2, r8
   2f3d8:	bgt	2f5f8 <__assert_fail@plt+0x1e1c0>
   2f3dc:	b	2f54c <__assert_fail@plt+0x1e114>
   2f3e0:	cmn	r4, #1
   2f3e4:	beq	2f5e4 <__assert_fail@plt+0x1e1ac>
   2f3e8:	ldr	r1, [lr, #8]
   2f3ec:	str	r6, [fp, #-48]	; 0xffffffd0
   2f3f0:	mov	r6, ip
   2f3f4:	mov	r5, r9
   2f3f8:	cmp	r1, #0
   2f3fc:	bne	2f42c <__assert_fail@plt+0x1dff4>
   2f400:	ldr	r0, [lr]
   2f404:	add	r1, sl, #1
   2f408:	mov	r9, #12
   2f40c:	sub	r1, r1, r0
   2f410:	mov	r0, #12
   2f414:	bl	354f8 <__assert_fail@plt+0x240c0>
   2f418:	ldr	lr, [sp, #44]	; 0x2c
   2f41c:	mov	r1, r0
   2f420:	cmp	r0, #0
   2f424:	str	r0, [lr, #8]
   2f428:	beq	2f920 <__assert_fail@plt+0x1e4e8>
   2f42c:	ldr	r3, [lr]
   2f430:	ldr	r2, [lr, #4]
   2f434:	stm	sp, {r4, sl}
   2f438:	mov	r0, #9
   2f43c:	str	r0, [sp, #8]
   2f440:	ldr	r0, [sp, #40]	; 0x28
   2f444:	bl	301bc <__assert_fail@plt+0x1ed84>
   2f448:	mov	ip, r6
   2f44c:	ldr	lr, [sp, #44]	; 0x2c
   2f450:	ldr	r6, [fp, #-48]	; 0xffffffd0
   2f454:	cmp	r0, #1
   2f458:	beq	2f5e8 <__assert_fail@plt+0x1e1b0>
   2f45c:	mov	r9, r0
   2f460:	cmp	r0, #0
   2f464:	bne	2f920 <__assert_fail@plt+0x1e4e8>
   2f468:	ldr	r1, [lr, #12]
   2f46c:	ldr	r0, [lr, #16]
   2f470:	ldr	r7, [sp, #40]	; 0x28
   2f474:	cmp	r0, r1
   2f478:	beq	2f51c <__assert_fail@plt+0x1e0e4>
   2f47c:	mov	r0, #1
   2f480:	mov	r1, #20
   2f484:	bl	354f8 <__assert_fail@plt+0x240c0>
   2f488:	cmp	r0, #0
   2f48c:	beq	2f938 <__assert_fail@plt+0x1e500>
   2f490:	ldr	r1, [sp, #44]	; 0x2c
   2f494:	mov	r2, r0
   2f498:	ldr	r0, [r1, #16]
   2f49c:	ldr	r3, [r1, #20]
   2f4a0:	str	r2, [r3, r0, lsl #2]
   2f4a4:	stm	r2, {r4, sl}
   2f4a8:	add	r0, r0, #1
   2f4ac:	ldr	r3, [sp, #48]	; 0x30
   2f4b0:	str	r0, [r1, #16]
   2f4b4:	mov	r0, r7
   2f4b8:	str	r8, [sp]
   2f4bc:	bl	2fff8 <__assert_fail@plt+0x1ebc0>
   2f4c0:	cmp	r0, #1
   2f4c4:	bhi	2f930 <__assert_fail@plt+0x1e4f8>
   2f4c8:	ldr	ip, [r7, #4]
   2f4cc:	ldr	lr, [sp, #44]	; 0x2c
   2f4d0:	ldr	r6, [fp, #-48]	; 0xffffffd0
   2f4d4:	b	2f5e8 <__assert_fail@plt+0x1e1b0>
   2f4d8:	ldr	r0, [r9, #48]	; 0x30
   2f4dc:	cmp	r6, r0
   2f4e0:	bge	2f5f8 <__assert_fail@plt+0x1e1c0>
   2f4e4:	add	r4, r6, #1
   2f4e8:	mov	r0, r9
   2f4ec:	mov	r7, r5
   2f4f0:	mov	r5, r6
   2f4f4:	mov	r1, r4
   2f4f8:	bl	2f958 <__assert_fail@plt+0x1e520>
   2f4fc:	cmp	r0, #0
   2f500:	bne	2f930 <__assert_fail@plt+0x1e4f8>
   2f504:	ldr	ip, [r9, #4]
   2f508:	ldr	lr, [sp, #44]	; 0x2c
   2f50c:	mov	r6, r5
   2f510:	mov	r5, r7
   2f514:	mov	r1, r9
   2f518:	b	2f56c <__assert_fail@plt+0x1e134>
   2f51c:	mov	r1, #1
   2f520:	mov	r5, lr
   2f524:	orr	r6, r1, r0, lsl #1
   2f528:	ldr	r0, [lr, #20]
   2f52c:	lsl	r1, r6, #2
   2f530:	bl	3557c <__assert_fail@plt+0x24144>
   2f534:	cmp	r0, #0
   2f538:	beq	2f938 <__assert_fail@plt+0x1e500>
   2f53c:	str	r6, [r5, #12]
   2f540:	str	r0, [r5, #20]
   2f544:	ldr	r5, [sp, #28]
   2f548:	b	2f47c <__assert_fail@plt+0x1e044>
   2f54c:	ldr	r0, [lr]
   2f550:	mov	sl, r2
   2f554:	cmp	r2, r0
   2f558:	ble	2f584 <__assert_fail@plt+0x1e14c>
   2f55c:	ldr	r0, [r9, #28]
   2f560:	cmp	r6, r0
   2f564:	bge	2f4d8 <__assert_fail@plt+0x1e0a0>
   2f568:	add	r4, r6, #1
   2f56c:	add	r1, ip, sl
   2f570:	ldrb	r0, [ip, r6]
   2f574:	ldrb	r1, [r1, #-1]
   2f578:	cmp	r0, r1
   2f57c:	beq	2f588 <__assert_fail@plt+0x1e150>
   2f580:	b	2f5f8 <__assert_fail@plt+0x1e1c0>
   2f584:	mov	r4, r6
   2f588:	ldr	r0, [r9, #100]	; 0x64
   2f58c:	mov	r6, r4
   2f590:	ldr	r2, [r0, sl, lsl #2]
   2f594:	cmp	r2, #0
   2f598:	beq	2f5e8 <__assert_fail@plt+0x1e1b0>
   2f59c:	ldr	r0, [r2, #8]
   2f5a0:	cmp	r0, #1
   2f5a4:	blt	2f5e8 <__assert_fail@plt+0x1e1b0>
   2f5a8:	mov	r9, r5
   2f5ac:	ldr	r1, [r5]
   2f5b0:	ldr	r2, [r2, #12]
   2f5b4:	ldr	r5, [sp, #36]	; 0x24
   2f5b8:	mov	r3, #0
   2f5bc:	ldr	r4, [r2, r3, lsl #2]
   2f5c0:	add	r7, r1, r4, lsl #3
   2f5c4:	ldrb	r7, [r7, #4]
   2f5c8:	cmp	r7, #9
   2f5cc:	ldreq	r7, [r1, r4, lsl #3]
   2f5d0:	cmpeq	r7, r5
   2f5d4:	beq	2f3e0 <__assert_fail@plt+0x1dfa8>
   2f5d8:	add	r3, r3, #1
   2f5dc:	cmp	r3, r0
   2f5e0:	blt	2f5bc <__assert_fail@plt+0x1e184>
   2f5e4:	mov	r5, r9
   2f5e8:	ldr	r9, [sp, #40]	; 0x28
   2f5ec:	add	r2, sl, #1
   2f5f0:	cmp	sl, r8
   2f5f4:	blt	2f54c <__assert_fail@plt+0x1e114>
   2f5f8:	ldr	r2, [sp, #32]
   2f5fc:	ldr	r0, [r9, #124]	; 0x7c
   2f600:	add	r2, r2, #1
   2f604:	cmp	r2, r0
   2f608:	blt	2f23c <__assert_fail@plt+0x1de04>
   2f60c:	mov	r1, #0
   2f610:	ldr	r0, [r9, #108]	; 0x6c
   2f614:	str	r1, [fp, #-32]	; 0xffffffe0
   2f618:	ldr	r1, [sp, #12]
   2f61c:	cmp	r1, r0
   2f620:	bge	2f900 <__assert_fail@plt+0x1e4c8>
   2f624:	b	2f670 <__assert_fail@plt+0x1e238>
   2f628:	mov	r0, #0
   2f62c:	str	r0, [fp, #-32]	; 0xffffffe0
   2f630:	b	2f900 <__assert_fail@plt+0x1e4c8>
   2f634:	ldr	r0, [r3, #88]	; 0x58
   2f638:	and	r0, r0, #2
   2f63c:	eor	sl, r0, #10
   2f640:	b	2f7a4 <__assert_fail@plt+0x1e36c>
   2f644:	mov	r0, r4
   2f648:	bl	11354 <iswalnum@plt>
   2f64c:	mov	sl, #1
   2f650:	cmp	r4, #95	; 0x5f
   2f654:	beq	2f668 <__assert_fail@plt+0x1e230>
   2f658:	ldr	r3, [sp, #40]	; 0x28
   2f65c:	cmp	r0, #0
   2f660:	beq	2f78c <__assert_fail@plt+0x1e354>
   2f664:	b	2f7a4 <__assert_fail@plt+0x1e36c>
   2f668:	ldr	r3, [sp, #40]	; 0x28
   2f66c:	b	2f7a4 <__assert_fail@plt+0x1e36c>
   2f670:	ldr	r0, [r9, #116]	; 0x74
   2f674:	mov	r5, r1
   2f678:	add	r1, r1, r1, lsl #1
   2f67c:	ldr	r3, [sp, #48]	; 0x30
   2f680:	ldr	r2, [r0, r1, lsl #3]
   2f684:	cmp	r2, r3
   2f688:	bne	2f8e4 <__assert_fail@plt+0x1e4ac>
   2f68c:	add	r0, r0, r1, lsl #3
   2f690:	ldr	r2, [sp, #52]	; 0x34
   2f694:	ldr	r1, [r0, #4]
   2f698:	cmp	r1, r2
   2f69c:	bne	2f8e4 <__assert_fail@plt+0x1e4ac>
   2f6a0:	ldr	r2, [r0, #8]
   2f6a4:	ldr	r6, [r0, #12]
   2f6a8:	ldr	r0, [sp, #20]
   2f6ac:	ldr	r8, [r0, #24]
   2f6b0:	cmp	r6, r2
   2f6b4:	bne	2f6d0 <__assert_fail@plt+0x1e298>
   2f6b8:	ldr	r1, [sp, #48]	; 0x30
   2f6bc:	ldr	r0, [r0, #20]
   2f6c0:	add	r1, r1, r1, lsl #1
   2f6c4:	add	r0, r0, r1, lsl #2
   2f6c8:	ldr	r0, [r0, #8]
   2f6cc:	b	2f6dc <__assert_fail@plt+0x1e2a4>
   2f6d0:	ldr	r0, [r0, #12]
   2f6d4:	ldr	r1, [sp, #48]	; 0x30
   2f6d8:	add	r0, r0, r1, lsl #2
   2f6dc:	ldr	r9, [r0]
   2f6e0:	ldr	r0, [sp, #52]	; 0x34
   2f6e4:	str	r2, [fp, #-48]	; 0xffffffd0
   2f6e8:	add	r0, r6, r0
   2f6ec:	sub	r7, r0, r2
   2f6f0:	cmp	r7, #0
   2f6f4:	ble	2f73c <__assert_fail@plt+0x1e304>
   2f6f8:	ldr	r3, [sp, #40]	; 0x28
   2f6fc:	sub	r0, r7, #1
   2f700:	ldr	r1, [r3, #48]	; 0x30
   2f704:	cmp	r1, r0
   2f708:	beq	2f634 <__assert_fail@plt+0x1e1fc>
   2f70c:	ldr	r1, [r3, #80]	; 0x50
   2f710:	cmp	r1, #2
   2f714:	blt	2f748 <__assert_fail@plt+0x1e310>
   2f718:	ldr	r0, [r3, #8]
   2f71c:	mov	r1, r7
   2f720:	sub	r0, r0, #4
   2f724:	ldr	r4, [r0, r1, lsl #2]
   2f728:	cmn	r4, #1
   2f72c:	bne	2f77c <__assert_fail@plt+0x1e344>
   2f730:	sub	r1, r1, #1
   2f734:	cmp	r1, #0
   2f738:	bgt	2f724 <__assert_fail@plt+0x1e2ec>
   2f73c:	ldr	r3, [sp, #40]	; 0x28
   2f740:	ldr	sl, [r3, #60]	; 0x3c
   2f744:	b	2f7a4 <__assert_fail@plt+0x1e36c>
   2f748:	ldr	r1, [r3, #4]
   2f74c:	ldr	r2, [r3, #68]	; 0x44
   2f750:	mov	sl, #1
   2f754:	ldrb	r0, [r1, r0]
   2f758:	ubfx	r1, r0, #5, #3
   2f75c:	ldr	r1, [r2, r1, lsl #2]
   2f760:	and	r2, r0, #31
   2f764:	tst	r1, sl, lsl r2
   2f768:	bne	2f7a4 <__assert_fail@plt+0x1e36c>
   2f76c:	mov	sl, #0
   2f770:	cmp	r0, #10
   2f774:	beq	2f798 <__assert_fail@plt+0x1e360>
   2f778:	b	2f7a4 <__assert_fail@plt+0x1e36c>
   2f77c:	ldr	r3, [sp, #40]	; 0x28
   2f780:	ldrb	r0, [r3, #78]	; 0x4e
   2f784:	cmp	r0, #0
   2f788:	bne	2f644 <__assert_fail@plt+0x1e20c>
   2f78c:	mov	sl, #0
   2f790:	cmp	r4, #10
   2f794:	bne	2f7a4 <__assert_fail@plt+0x1e36c>
   2f798:	ldrb	sl, [r3, #77]	; 0x4d
   2f79c:	cmp	sl, #0
   2f7a0:	movwne	sl, #2
   2f7a4:	ldr	r0, [r3, #100]	; 0x64
   2f7a8:	ldr	r2, [sp, #52]	; 0x34
   2f7ac:	add	r1, r9, r9, lsl #1
   2f7b0:	mov	r4, r3
   2f7b4:	add	r8, r8, r1, lsl #2
   2f7b8:	ldr	r2, [r0, r2, lsl #2]
   2f7bc:	ldr	r0, [r0, r7, lsl #2]
   2f7c0:	cmp	r2, #0
   2f7c4:	ldrne	r2, [r2, #8]
   2f7c8:	moveq	r2, #0
   2f7cc:	cmp	r0, #0
   2f7d0:	str	r2, [sp, #44]	; 0x2c
   2f7d4:	beq	2f840 <__assert_fail@plt+0x1e408>
   2f7d8:	ldr	r1, [r0, #40]	; 0x28
   2f7dc:	sub	r4, fp, #44	; 0x2c
   2f7e0:	mov	r2, r8
   2f7e4:	mov	r0, r4
   2f7e8:	bl	2fd74 <__assert_fail@plt+0x1e93c>
   2f7ec:	cmp	r0, #0
   2f7f0:	str	r0, [fp, #-32]	; 0xffffffe0
   2f7f4:	bne	2f940 <__assert_fail@plt+0x1e508>
   2f7f8:	ldr	r1, [sp, #20]
   2f7fc:	sub	r0, fp, #32
   2f800:	mov	r2, r4
   2f804:	mov	r3, sl
   2f808:	bl	2de9c <__assert_fail@plt+0x1ca64>
   2f80c:	ldr	r4, [sp, #40]	; 0x28
   2f810:	ldr	r1, [r4, #100]	; 0x64
   2f814:	str	r0, [r1, r7, lsl #2]
   2f818:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2f81c:	bl	1386c <__assert_fail@plt+0x2434>
   2f820:	ldr	r0, [r4, #100]	; 0x64
   2f824:	ldr	r1, [r0, r7, lsl #2]
   2f828:	cmp	r1, #0
   2f82c:	bne	2f888 <__assert_fail@plt+0x1e450>
   2f830:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2f834:	cmp	r9, #0
   2f838:	beq	2f888 <__assert_fail@plt+0x1e450>
   2f83c:	b	2f924 <__assert_fail@plt+0x1e4ec>
   2f840:	ldr	r1, [sp, #20]
   2f844:	sub	r0, fp, #32
   2f848:	mov	r2, r8
   2f84c:	mov	r3, sl
   2f850:	bl	2de9c <__assert_fail@plt+0x1ca64>
   2f854:	ldr	r1, [r4, #100]	; 0x64
   2f858:	str	r0, [r1, r7, lsl #2]
   2f85c:	ldr	r0, [r4, #100]	; 0x64
   2f860:	ldr	r1, [r0, r7, lsl #2]
   2f864:	cmp	r1, #0
   2f868:	bne	2f888 <__assert_fail@plt+0x1e450>
   2f86c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2f870:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2f874:	cmp	r9, #0
   2f878:	bne	2f924 <__assert_fail@plt+0x1e4ec>
   2f87c:	cmp	r6, r1
   2f880:	bne	2f8e4 <__assert_fail@plt+0x1e4ac>
   2f884:	b	2f894 <__assert_fail@plt+0x1e45c>
   2f888:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2f88c:	cmp	r6, r1
   2f890:	bne	2f8e4 <__assert_fail@plt+0x1e4ac>
   2f894:	ldr	r1, [sp, #52]	; 0x34
   2f898:	ldr	r0, [r0, r1, lsl #2]
   2f89c:	ldr	r1, [sp, #44]	; 0x2c
   2f8a0:	ldr	r0, [r0, #8]
   2f8a4:	cmp	r0, r1
   2f8a8:	ble	2f8e4 <__assert_fail@plt+0x1e4ac>
   2f8ac:	ldr	r4, [sp, #40]	; 0x28
   2f8b0:	ldr	r2, [sp, #52]	; 0x34
   2f8b4:	mov	r1, r8
   2f8b8:	mov	r0, r4
   2f8bc:	bl	2eed0 <__assert_fail@plt+0x1da98>
   2f8c0:	cmp	r0, #0
   2f8c4:	str	r0, [fp, #-32]	; 0xffffffe0
   2f8c8:	bne	2f950 <__assert_fail@plt+0x1e518>
   2f8cc:	mov	r0, r4
   2f8d0:	mov	r1, r8
   2f8d4:	bl	2efcc <__assert_fail@plt+0x1db94>
   2f8d8:	cmp	r0, #0
   2f8dc:	str	r0, [fp, #-32]	; 0xffffffe0
   2f8e0:	bne	2f950 <__assert_fail@plt+0x1e518>
   2f8e4:	ldr	r9, [sp, #40]	; 0x28
   2f8e8:	ldr	r8, [sp, #52]	; 0x34
   2f8ec:	mov	r1, r5
   2f8f0:	add	r1, r5, #1
   2f8f4:	ldr	r0, [r9, #108]	; 0x6c
   2f8f8:	cmp	r1, r0
   2f8fc:	blt	2f670 <__assert_fail@plt+0x1e238>
   2f900:	ldr	r1, [sp, #16]
   2f904:	ldr	r3, [sp, #24]
   2f908:	ldr	r2, [sp, #20]
   2f90c:	ldr	r0, [r1, #4]
   2f910:	add	r3, r3, #1
   2f914:	cmp	r3, r0
   2f918:	blt	2f03c <__assert_fail@plt+0x1dc04>
   2f91c:	mov	r9, #0
   2f920:	str	r9, [fp, #-32]	; 0xffffffe0
   2f924:	mov	r0, r9
   2f928:	sub	sp, fp, #28
   2f92c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f930:	mov	r9, r0
   2f934:	b	2f920 <__assert_fail@plt+0x1e4e8>
   2f938:	mov	r9, #12
   2f93c:	b	2f920 <__assert_fail@plt+0x1e4e8>
   2f940:	mov	r9, r0
   2f944:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2f948:	bl	1386c <__assert_fail@plt+0x2434>
   2f94c:	b	2f924 <__assert_fail@plt+0x1e4ec>
   2f950:	mov	r9, r0
   2f954:	b	2f924 <__assert_fail@plt+0x1e4ec>
   2f958:	push	{r4, r5, r6, r7, fp, lr}
   2f95c:	add	fp, sp, #16
   2f960:	mov	r4, r0
   2f964:	ldr	r0, [r0, #36]	; 0x24
   2f968:	mov	r5, #12
   2f96c:	cmn	r0, #-536870910	; 0xe0000002
   2f970:	bhi	2fb58 <__assert_fail@plt+0x1e720>
   2f974:	ldr	r6, [r4, #48]	; 0x30
   2f978:	ldr	r2, [r4, #80]	; 0x50
   2f97c:	cmp	r6, r0, lsl #1
   2f980:	lslge	r6, r0, #1
   2f984:	cmp	r6, r1
   2f988:	movle	r6, r1
   2f98c:	cmp	r2, #2
   2f990:	blt	2f9d8 <__assert_fail@plt+0x1e5a0>
   2f994:	cmn	r6, #-1073741823	; 0xc0000001
   2f998:	bhi	2fb58 <__assert_fail@plt+0x1e720>
   2f99c:	ldr	r0, [r4, #8]
   2f9a0:	lsl	r7, r6, #2
   2f9a4:	mov	r1, r7
   2f9a8:	bl	3557c <__assert_fail@plt+0x24144>
   2f9ac:	cmp	r0, #0
   2f9b0:	beq	2fb58 <__assert_fail@plt+0x1e720>
   2f9b4:	str	r0, [r4, #8]
   2f9b8:	ldr	r0, [r4, #12]
   2f9bc:	cmp	r0, #0
   2f9c0:	beq	2f9d8 <__assert_fail@plt+0x1e5a0>
   2f9c4:	mov	r1, r7
   2f9c8:	bl	3557c <__assert_fail@plt+0x24144>
   2f9cc:	cmp	r0, #0
   2f9d0:	beq	2fb58 <__assert_fail@plt+0x1e720>
   2f9d4:	str	r0, [r4, #12]
   2f9d8:	ldrb	r0, [r4, #75]	; 0x4b
   2f9dc:	cmp	r0, #0
   2f9e0:	beq	2f9fc <__assert_fail@plt+0x1e5c4>
   2f9e4:	ldr	r0, [r4, #4]
   2f9e8:	mov	r1, r6
   2f9ec:	bl	3557c <__assert_fail@plt+0x24144>
   2f9f0:	cmp	r0, #0
   2f9f4:	beq	2fb58 <__assert_fail@plt+0x1e720>
   2f9f8:	str	r0, [r4, #4]
   2f9fc:	str	r6, [r4, #36]	; 0x24
   2fa00:	ldr	r0, [r4, #100]	; 0x64
   2fa04:	cmp	r0, #0
   2fa08:	beq	2fa24 <__assert_fail@plt+0x1e5ec>
   2fa0c:	mov	r1, #4
   2fa10:	add	r1, r1, r6, lsl #2
   2fa14:	bl	3557c <__assert_fail@plt+0x24144>
   2fa18:	cmp	r0, #0
   2fa1c:	beq	2fb58 <__assert_fail@plt+0x1e720>
   2fa20:	str	r0, [r4, #100]	; 0x64
   2fa24:	ldrb	r1, [r4, #72]	; 0x48
   2fa28:	ldr	r0, [r4, #80]	; 0x50
   2fa2c:	cmp	r1, #0
   2fa30:	beq	2fa50 <__assert_fail@plt+0x1e618>
   2fa34:	cmp	r0, #2
   2fa38:	blt	2fa64 <__assert_fail@plt+0x1e62c>
   2fa3c:	mov	r0, r4
   2fa40:	bl	28360 <__assert_fail@plt+0x16f28>
   2fa44:	cmp	r0, #0
   2fa48:	popne	{r4, r5, r6, r7, fp, pc}
   2fa4c:	b	2fb54 <__assert_fail@plt+0x1e71c>
   2fa50:	cmp	r0, #2
   2fa54:	blt	2fadc <__assert_fail@plt+0x1e6a4>
   2fa58:	mov	r0, r4
   2fa5c:	bl	28a20 <__assert_fail@plt+0x175e8>
   2fa60:	b	2fb54 <__assert_fail@plt+0x1e71c>
   2fa64:	ldr	r6, [r4, #36]	; 0x24
   2fa68:	ldr	r0, [r4, #48]	; 0x30
   2fa6c:	ldr	r5, [r4, #28]
   2fa70:	cmp	r6, r0
   2fa74:	movgt	r6, r0
   2fa78:	cmp	r5, r6
   2fa7c:	bge	2fad0 <__assert_fail@plt+0x1e698>
   2fa80:	ldr	r1, [r4]
   2fa84:	ldr	r2, [r4, #24]
   2fa88:	ldr	r0, [r4, #64]	; 0x40
   2fa8c:	add	r1, r1, r2
   2fa90:	cmp	r0, #0
   2fa94:	ldrb	r7, [r1, r5]
   2fa98:	ldrbne	r7, [r0, r7]
   2fa9c:	add	r0, r7, #128	; 0x80
   2faa0:	lsr	r0, r0, #7
   2faa4:	cmp	r0, #2
   2faa8:	bhi	2fab8 <__assert_fail@plt+0x1e680>
   2faac:	bl	112f4 <__ctype_toupper_loc@plt>
   2fab0:	ldr	r0, [r0]
   2fab4:	ldr	r7, [r0, r7, lsl #2]
   2fab8:	ldr	r0, [r4, #4]
   2fabc:	strb	r7, [r0, r5]
   2fac0:	add	r5, r5, #1
   2fac4:	cmp	r5, r6
   2fac8:	blt	2fa80 <__assert_fail@plt+0x1e648>
   2facc:	mov	r5, r6
   2fad0:	str	r5, [r4, #28]
   2fad4:	str	r5, [r4, #32]
   2fad8:	b	2fb54 <__assert_fail@plt+0x1e71c>
   2fadc:	ldr	r2, [r4, #64]	; 0x40
   2fae0:	cmp	r2, #0
   2fae4:	beq	2fb54 <__assert_fail@plt+0x1e71c>
   2fae8:	ldr	r0, [r4, #36]	; 0x24
   2faec:	ldr	r3, [r4, #48]	; 0x30
   2faf0:	ldr	r1, [r4, #28]
   2faf4:	cmp	r0, r3
   2faf8:	movgt	r0, r3
   2fafc:	cmp	r1, r0
   2fb00:	bge	2fb4c <__assert_fail@plt+0x1e714>
   2fb04:	ldm	r4, {r3, r7}
   2fb08:	ldr	r6, [r4, #24]
   2fb0c:	add	r6, r6, r1
   2fb10:	ldrb	r3, [r3, r6]
   2fb14:	ldrb	r2, [r2, r3]
   2fb18:	strb	r2, [r7, r1]
   2fb1c:	b	2fb3c <__assert_fail@plt+0x1e704>
   2fb20:	ldm	r4, {r2, r3}
   2fb24:	ldr	r7, [r4, #24]
   2fb28:	ldr	r6, [r4, #64]	; 0x40
   2fb2c:	add	r2, r2, r7
   2fb30:	ldrb	r2, [r2, r1]
   2fb34:	ldrb	r2, [r6, r2]
   2fb38:	strb	r2, [r3, r1]
   2fb3c:	add	r1, r1, #1
   2fb40:	cmp	r1, r0
   2fb44:	blt	2fb20 <__assert_fail@plt+0x1e6e8>
   2fb48:	mov	r1, r0
   2fb4c:	str	r1, [r4, #28]
   2fb50:	str	r1, [r4, #32]
   2fb54:	mov	r5, #0
   2fb58:	mov	r0, r5
   2fb5c:	pop	{r4, r5, r6, r7, fp, pc}
   2fb60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2fb64:	add	fp, sp, #24
   2fb68:	sub	sp, sp, #16
   2fb6c:	mov	r9, r0
   2fb70:	mov	r4, r1
   2fb74:	ldr	r5, [r1, #40]	; 0x28
   2fb78:	ldr	r7, [r1, #84]	; 0x54
   2fb7c:	ldr	r0, [r1, #100]	; 0x64
   2fb80:	ldr	r1, [r1, #104]	; 0x68
   2fb84:	mov	r6, r2
   2fb88:	cmp	r5, r1
   2fb8c:	ble	2fb9c <__assert_fail@plt+0x1e764>
   2fb90:	str	r6, [r0, r5, lsl #2]
   2fb94:	str	r5, [r4, #104]	; 0x68
   2fb98:	b	2fcd0 <__assert_fail@plt+0x1e898>
   2fb9c:	ldr	r1, [r0, r5, lsl #2]
   2fba0:	cmp	r1, #0
   2fba4:	beq	2fbe0 <__assert_fail@plt+0x1e7a8>
   2fba8:	ldr	r2, [r1, #40]	; 0x28
   2fbac:	cmp	r6, #0
   2fbb0:	beq	2fbe8 <__assert_fail@plt+0x1e7b0>
   2fbb4:	ldr	r8, [r6, #40]	; 0x28
   2fbb8:	mov	r0, sp
   2fbbc:	mov	r1, r8
   2fbc0:	bl	2fd74 <__assert_fail@plt+0x1e93c>
   2fbc4:	cmp	r0, #0
   2fbc8:	str	r0, [r9]
   2fbcc:	bne	2fd3c <__assert_fail@plt+0x1e904>
   2fbd0:	ldr	r0, [r4, #40]	; 0x28
   2fbd4:	cmp	r0, #0
   2fbd8:	bgt	2fc08 <__assert_fail@plt+0x1e7d0>
   2fbdc:	b	2fc44 <__assert_fail@plt+0x1e80c>
   2fbe0:	str	r6, [r0, r5, lsl #2]
   2fbe4:	b	2fcd0 <__assert_fail@plt+0x1e898>
   2fbe8:	ldr	r0, [r2, #8]
   2fbec:	vldr	d16, [r2]
   2fbf0:	mov	r8, #0
   2fbf4:	str	r0, [sp, #8]
   2fbf8:	mov	r0, r5
   2fbfc:	vstr	d16, [sp]
   2fc00:	cmp	r0, #0
   2fc04:	ble	2fc44 <__assert_fail@plt+0x1e80c>
   2fc08:	ldr	r2, [r4, #48]	; 0x30
   2fc0c:	sub	r1, r0, #1
   2fc10:	cmp	r2, r1
   2fc14:	beq	2fd44 <__assert_fail@plt+0x1e90c>
   2fc18:	ldr	r2, [r4, #80]	; 0x50
   2fc1c:	cmp	r2, #2
   2fc20:	blt	2fc4c <__assert_fail@plt+0x1e814>
   2fc24:	ldr	r1, [r4, #8]
   2fc28:	sub	r1, r1, #4
   2fc2c:	ldr	r6, [r1, r0, lsl #2]
   2fc30:	cmn	r6, #1
   2fc34:	bne	2fc80 <__assert_fail@plt+0x1e848>
   2fc38:	sub	r0, r0, #1
   2fc3c:	cmp	r0, #0
   2fc40:	bgt	2fc2c <__assert_fail@plt+0x1e7f4>
   2fc44:	ldr	r3, [r4, #60]	; 0x3c
   2fc48:	b	2fca4 <__assert_fail@plt+0x1e86c>
   2fc4c:	ldr	r0, [r4, #4]
   2fc50:	ldr	r2, [r4, #68]	; 0x44
   2fc54:	mov	r3, #1
   2fc58:	ldrb	r0, [r0, r1]
   2fc5c:	ubfx	r1, r0, #5, #3
   2fc60:	ldr	r1, [r2, r1, lsl #2]
   2fc64:	and	r2, r0, #31
   2fc68:	tst	r1, r3, lsl r2
   2fc6c:	bne	2fca4 <__assert_fail@plt+0x1e86c>
   2fc70:	mov	r3, #0
   2fc74:	cmp	r0, #10
   2fc78:	beq	2fc98 <__assert_fail@plt+0x1e860>
   2fc7c:	b	2fca4 <__assert_fail@plt+0x1e86c>
   2fc80:	ldrb	r0, [r4, #78]	; 0x4e
   2fc84:	cmp	r0, #0
   2fc88:	bne	2fd54 <__assert_fail@plt+0x1e91c>
   2fc8c:	mov	r3, #0
   2fc90:	cmp	r6, #10
   2fc94:	bne	2fca4 <__assert_fail@plt+0x1e86c>
   2fc98:	ldrb	r3, [r4, #77]	; 0x4d
   2fc9c:	cmp	r3, #0
   2fca0:	movwne	r3, #2
   2fca4:	mov	r2, sp
   2fca8:	mov	r0, r9
   2fcac:	mov	r1, r7
   2fcb0:	bl	2de9c <__assert_fail@plt+0x1ca64>
   2fcb4:	mov	r6, r0
   2fcb8:	ldr	r0, [r4, #100]	; 0x64
   2fcbc:	cmp	r8, #0
   2fcc0:	str	r6, [r0, r5, lsl #2]
   2fcc4:	beq	2fcd0 <__assert_fail@plt+0x1e898>
   2fcc8:	ldr	r0, [sp, #8]
   2fccc:	bl	1386c <__assert_fail@plt+0x2434>
   2fcd0:	cmp	r6, #0
   2fcd4:	ldrne	r0, [r7, #76]	; 0x4c
   2fcd8:	cmpne	r0, #0
   2fcdc:	bne	2fcec <__assert_fail@plt+0x1e8b4>
   2fce0:	mov	r0, r6
   2fce4:	sub	sp, fp, #24
   2fce8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2fcec:	add	r7, r6, #4
   2fcf0:	mov	r0, r4
   2fcf4:	mov	r2, r5
   2fcf8:	mov	r1, r7
   2fcfc:	bl	2eed0 <__assert_fail@plt+0x1da98>
   2fd00:	cmp	r0, #0
   2fd04:	str	r0, [r9]
   2fd08:	bne	2fd3c <__assert_fail@plt+0x1e904>
   2fd0c:	ldrb	r0, [r6, #52]	; 0x34
   2fd10:	tst	r0, #64	; 0x40
   2fd14:	beq	2fce0 <__assert_fail@plt+0x1e8a8>
   2fd18:	mov	r0, r4
   2fd1c:	mov	r1, r7
   2fd20:	bl	2efcc <__assert_fail@plt+0x1db94>
   2fd24:	str	r0, [r9]
   2fd28:	cmp	r0, #0
   2fd2c:	mov	r6, #0
   2fd30:	ldreq	r0, [r4, #100]	; 0x64
   2fd34:	ldreq	r6, [r0, r5, lsl #2]
   2fd38:	b	2fce0 <__assert_fail@plt+0x1e8a8>
   2fd3c:	mov	r6, #0
   2fd40:	b	2fce0 <__assert_fail@plt+0x1e8a8>
   2fd44:	ldr	r0, [r4, #88]	; 0x58
   2fd48:	and	r0, r0, #2
   2fd4c:	eor	r3, r0, #10
   2fd50:	b	2fca4 <__assert_fail@plt+0x1e86c>
   2fd54:	mov	r0, r6
   2fd58:	bl	11354 <iswalnum@plt>
   2fd5c:	mov	r3, #1
   2fd60:	cmp	r6, #95	; 0x5f
   2fd64:	beq	2fca4 <__assert_fail@plt+0x1e86c>
   2fd68:	cmp	r0, #0
   2fd6c:	beq	2fc8c <__assert_fail@plt+0x1e854>
   2fd70:	b	2fca4 <__assert_fail@plt+0x1e86c>
   2fd74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd78:	add	fp, sp, #28
   2fd7c:	sub	sp, sp, #20
   2fd80:	mov	sl, r2
   2fd84:	cmp	r1, #0
   2fd88:	str	r0, [sp, #16]
   2fd8c:	beq	2fdf4 <__assert_fail@plt+0x1e9bc>
   2fd90:	ldr	r0, [r1, #4]
   2fd94:	mov	r8, r1
   2fd98:	cmp	sl, #0
   2fd9c:	beq	2fdb0 <__assert_fail@plt+0x1e978>
   2fda0:	cmp	r0, #1
   2fda4:	ldrge	r1, [sl, #4]
   2fda8:	cmpge	r1, #1
   2fdac:	bge	2fe68 <__assert_fail@plt+0x1ea30>
   2fdb0:	cmp	r0, #1
   2fdb4:	blt	2fdf4 <__assert_fail@plt+0x1e9bc>
   2fdb8:	ldr	r1, [sp, #16]
   2fdbc:	str	r0, [r1, #4]
   2fdc0:	ldr	r1, [r8, #4]
   2fdc4:	cmp	r1, #1
   2fdc8:	blt	2fe4c <__assert_fail@plt+0x1ea14>
   2fdcc:	ldr	r4, [sp, #16]
   2fdd0:	str	r0, [r4]
   2fdd4:	lsl	r0, r0, #2
   2fdd8:	bl	3554c <__assert_fail@plt+0x24114>
   2fddc:	cmp	r0, #0
   2fde0:	str	r0, [r4, #8]
   2fde4:	beq	2ffdc <__assert_fail@plt+0x1eba4>
   2fde8:	ldr	r2, [r8, #4]
   2fdec:	ldr	r1, [r8, #8]
   2fdf0:	b	2fe40 <__assert_fail@plt+0x1ea08>
   2fdf4:	cmp	sl, #0
   2fdf8:	beq	2fe4c <__assert_fail@plt+0x1ea14>
   2fdfc:	ldr	r0, [sl, #4]
   2fe00:	cmp	r0, #1
   2fe04:	blt	2fe4c <__assert_fail@plt+0x1ea14>
   2fe08:	ldr	r1, [sp, #16]
   2fe0c:	str	r0, [r1, #4]
   2fe10:	ldr	r1, [sl, #4]
   2fe14:	cmp	r1, #1
   2fe18:	blt	2fe4c <__assert_fail@plt+0x1ea14>
   2fe1c:	ldr	r4, [sp, #16]
   2fe20:	str	r0, [r4]
   2fe24:	lsl	r0, r0, #2
   2fe28:	bl	3554c <__assert_fail@plt+0x24114>
   2fe2c:	cmp	r0, #0
   2fe30:	str	r0, [r4, #8]
   2fe34:	beq	2ffdc <__assert_fail@plt+0x1eba4>
   2fe38:	ldr	r2, [sl, #4]
   2fe3c:	ldr	r1, [sl, #8]
   2fe40:	lsl	r2, r2, #2
   2fe44:	bl	111ec <memcpy@plt>
   2fe48:	b	2ffd0 <__assert_fail@plt+0x1eb98>
   2fe4c:	ldr	r1, [sp, #16]
   2fe50:	mov	r0, #0
   2fe54:	str	r0, [r1]
   2fe58:	str	r0, [r1, #4]
   2fe5c:	str	r0, [r1, #8]
   2fe60:	sub	sp, fp, #28
   2fe64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fe68:	ldr	r4, [sp, #16]
   2fe6c:	add	r0, r1, r0
   2fe70:	str	r0, [r4]
   2fe74:	lsl	r0, r0, #2
   2fe78:	bl	3554c <__assert_fail@plt+0x24114>
   2fe7c:	cmp	r0, #0
   2fe80:	str	r0, [r4, #8]
   2fe84:	beq	2ffec <__assert_fail@plt+0x1ebb4>
   2fe88:	ldr	r9, [sl, #4]
   2fe8c:	ldr	lr, [r8, #4]
   2fe90:	mov	r1, #0
   2fe94:	mov	r7, #0
   2fe98:	cmp	r9, #0
   2fe9c:	movwgt	r1, #1
   2fea0:	cmp	lr, #1
   2fea4:	blt	2ff70 <__assert_fail@plt+0x1eb38>
   2fea8:	mov	r2, #0
   2feac:	mov	ip, #0
   2feb0:	str	r2, [sp, #8]
   2feb4:	mov	r2, #0
   2feb8:	str	r2, [sp, #12]
   2febc:	mov	r2, #0
   2fec0:	ldr	r4, [sp, #12]
   2fec4:	mov	r7, ip
   2fec8:	tst	r1, #1
   2fecc:	beq	2ffa0 <__assert_fail@plt+0x1eb68>
   2fed0:	ldr	r1, [sl, #8]
   2fed4:	ldr	r5, [r1, r7, lsl #2]
   2fed8:	ldr	r1, [r8, #8]
   2fedc:	ldr	r3, [r1, r2, lsl #2]
   2fee0:	cmp	r3, r5
   2fee4:	ble	2ff0c <__assert_fail@plt+0x1ead4>
   2fee8:	add	r7, r7, #1
   2feec:	mov	r1, #0
   2fef0:	str	r5, [r0, r4, lsl #2]
   2fef4:	add	r4, r4, #1
   2fef8:	cmp	r9, r7
   2fefc:	movwgt	r1, #1
   2ff00:	cmp	lr, r2
   2ff04:	bgt	2fec8 <__assert_fail@plt+0x1ea90>
   2ff08:	b	2ff74 <__assert_fail@plt+0x1eb3c>
   2ff0c:	str	r3, [r0, r4, lsl #2]
   2ff10:	ldr	r6, [sp, #8]
   2ff14:	add	r1, r7, #1
   2ff18:	mov	ip, r7
   2ff1c:	add	r2, r2, #1
   2ff20:	ldr	r9, [sl, #4]
   2ff24:	ldr	lr, [r8, #4]
   2ff28:	moveq	ip, r1
   2ff2c:	str	r1, [sp, #4]
   2ff30:	mov	r1, #0
   2ff34:	sub	r6, r6, #1
   2ff38:	cmp	r9, ip
   2ff3c:	str	r6, [sp, #8]
   2ff40:	add	r6, r4, #1
   2ff44:	movwgt	r1, #1
   2ff48:	cmp	lr, r2
   2ff4c:	str	r6, [sp, #12]
   2ff50:	bgt	2fec0 <__assert_fail@plt+0x1ea88>
   2ff54:	ldr	r2, [sp, #4]
   2ff58:	cmp	r3, r5
   2ff5c:	add	r4, r4, #1
   2ff60:	moveq	r7, r2
   2ff64:	cmp	r1, #0
   2ff68:	bne	2ff7c <__assert_fail@plt+0x1eb44>
   2ff6c:	b	2ffc8 <__assert_fail@plt+0x1eb90>
   2ff70:	mov	r4, #0
   2ff74:	cmp	r1, #0
   2ff78:	beq	2ffc8 <__assert_fail@plt+0x1eb90>
   2ff7c:	ldr	r1, [sl, #8]
   2ff80:	sub	r2, r9, r7
   2ff84:	add	r0, r0, r4, lsl #2
   2ff88:	lsl	r2, r2, #2
   2ff8c:	add	r1, r1, r7, lsl #2
   2ff90:	bl	111ec <memcpy@plt>
   2ff94:	sub	r0, r4, r7
   2ff98:	add	r4, r0, r9
   2ff9c:	b	2ffc8 <__assert_fail@plt+0x1eb90>
   2ffa0:	ldr	r1, [r8, #8]
   2ffa4:	add	r0, r0, r4, lsl #2
   2ffa8:	add	r1, r1, r2, lsl #2
   2ffac:	sub	r2, lr, r2
   2ffb0:	lsl	r2, r2, #2
   2ffb4:	bl	111ec <memcpy@plt>
   2ffb8:	ldr	r0, [r8, #4]
   2ffbc:	ldr	r1, [sp, #8]
   2ffc0:	add	r0, r0, r1
   2ffc4:	add	r4, r0, r4
   2ffc8:	ldr	r0, [sp, #16]
   2ffcc:	str	r4, [r0, #4]
   2ffd0:	mov	r0, #0
   2ffd4:	sub	sp, fp, #28
   2ffd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ffdc:	ldr	r1, [sp, #16]
   2ffe0:	mov	r0, #0
   2ffe4:	str	r0, [r1]
   2ffe8:	str	r0, [r1, #4]
   2ffec:	mov	r0, #12
   2fff0:	sub	sp, fp, #28
   2fff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fffc:	add	fp, sp, #28
   30000:	sub	sp, sp, #12
   30004:	mov	r6, r2
   30008:	mov	r7, r3
   3000c:	ldr	r2, [r2]
   30010:	ldr	r9, [fp, #8]
   30014:	mov	r4, r0
   30018:	mov	r0, #8
   3001c:	mov	r8, r1
   30020:	ldr	r3, [r6, #4]
   30024:	str	r0, [sp, #8]
   30028:	add	r1, r6, #8
   3002c:	mov	r0, r4
   30030:	stm	sp, {r7, r9}
   30034:	bl	301bc <__assert_fail@plt+0x1ed84>
   30038:	mov	r5, r0
   3003c:	cmp	r0, #0
   30040:	beq	30050 <__assert_fail@plt+0x1ec18>
   30044:	mov	r0, r5
   30048:	sub	sp, fp, #28
   3004c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30050:	ldr	r0, [r4, #108]	; 0x6c
   30054:	ldr	r1, [r4, #112]	; 0x70
   30058:	ldr	sl, [r6, #4]
   3005c:	ldr	r5, [r8]
   30060:	cmp	r0, r1
   30064:	blt	300b4 <__assert_fail@plt+0x1ec7c>
   30068:	ldr	r0, [r4, #116]	; 0x74
   3006c:	add	r1, r1, r1, lsl #1
   30070:	lsl	r1, r1, #4
   30074:	bl	3557c <__assert_fail@plt+0x24144>
   30078:	cmp	r0, #0
   3007c:	beq	301ac <__assert_fail@plt+0x1ed74>
   30080:	str	r0, [r4, #116]	; 0x74
   30084:	ldr	r1, [r4, #108]	; 0x6c
   30088:	ldr	r2, [r4, #112]	; 0x70
   3008c:	add	r1, r1, r1, lsl #1
   30090:	add	r0, r0, r1, lsl #3
   30094:	add	r1, r2, r2, lsl #1
   30098:	lsl	r2, r1, #3
   3009c:	mov	r1, #0
   300a0:	bl	1136c <memset@plt>
   300a4:	ldr	r1, [r4, #112]	; 0x70
   300a8:	ldr	r0, [r4, #108]	; 0x6c
   300ac:	lsl	r1, r1, #1
   300b0:	str	r1, [r4, #112]	; 0x70
   300b4:	ldr	r1, [r4, #116]	; 0x74
   300b8:	cmp	r0, #1
   300bc:	blt	300dc <__assert_fail@plt+0x1eca4>
   300c0:	sub	r2, r0, #1
   300c4:	add	r2, r2, r2, lsl #1
   300c8:	add	r2, r1, r2, lsl #3
   300cc:	ldr	r3, [r2, #4]
   300d0:	cmp	r3, r9
   300d4:	moveq	r3, #1
   300d8:	strbeq	r3, [r2, #20]
   300dc:	add	r2, r0, r0, lsl #1
   300e0:	cmp	sl, r5
   300e4:	mov	r3, #0
   300e8:	add	r0, r0, #1
   300ec:	str	r7, [r1, r2, lsl #3]!
   300f0:	mov	r2, #0
   300f4:	mvneq	r3, #0
   300f8:	str	r9, [r1, #4]
   300fc:	str	r5, [r1, #8]
   30100:	str	sl, [r1, #12]
   30104:	str	r3, [r1, #16]
   30108:	str	r0, [r4, #108]	; 0x6c
   3010c:	strb	r2, [r1, #20]
   30110:	sub	r0, sl, r5
   30114:	ldr	r1, [r4, #120]	; 0x78
   30118:	cmp	r1, r0
   3011c:	strlt	r0, [r4, #120]	; 0x78
   30120:	ldr	r0, [r6, #4]
   30124:	ldr	r1, [r8]
   30128:	ldr	r7, [r4, #104]	; 0x68
   3012c:	add	r0, r0, r9
   30130:	sub	r6, r0, r1
   30134:	ldr	r0, [r4, #36]	; 0x24
   30138:	cmp	r0, r6
   3013c:	ldrle	r1, [r4, #48]	; 0x30
   30140:	cmple	r0, r1
   30144:	blt	30190 <__assert_fail@plt+0x1ed58>
   30148:	ldr	r0, [r4, #28]
   3014c:	cmp	r0, r6
   30150:	ldrle	r1, [r4, #48]	; 0x30
   30154:	cmple	r0, r1
   30158:	blt	30190 <__assert_fail@plt+0x1ed58>
   3015c:	mov	r5, #0
   30160:	cmp	r6, r7
   30164:	ble	30044 <__assert_fail@plt+0x1ec0c>
   30168:	sub	r0, r6, r7
   3016c:	mov	r1, #0
   30170:	mov	r5, #0
   30174:	lsl	r2, r0, #2
   30178:	ldr	r0, [r4, #100]	; 0x64
   3017c:	add	r0, r0, r7, lsl #2
   30180:	add	r0, r0, #4
   30184:	bl	1136c <memset@plt>
   30188:	str	r6, [r4, #104]	; 0x68
   3018c:	b	30044 <__assert_fail@plt+0x1ec0c>
   30190:	add	r1, r6, #1
   30194:	mov	r0, r4
   30198:	bl	2f958 <__assert_fail@plt+0x1e520>
   3019c:	mov	r5, r0
   301a0:	cmp	r0, #0
   301a4:	bne	30044 <__assert_fail@plt+0x1ec0c>
   301a8:	b	3015c <__assert_fail@plt+0x1ed24>
   301ac:	ldr	r0, [r4, #116]	; 0x74
   301b0:	bl	1386c <__assert_fail@plt+0x2434>
   301b4:	mov	r5, #12
   301b8:	b	30044 <__assert_fail@plt+0x1ec0c>
   301bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   301c0:	add	fp, sp, #28
   301c4:	sub	sp, sp, #84	; 0x54
   301c8:	ldr	sl, [r0, #84]	; 0x54
   301cc:	mov	r8, r2
   301d0:	mov	r2, #0
   301d4:	mov	r9, r3
   301d8:	ldr	r3, [fp, #12]
   301dc:	str	r0, [sp, #40]	; 0x28
   301e0:	str	r2, [fp, #-52]	; 0xffffffcc
   301e4:	ldr	r5, [r1, #4]
   301e8:	ldr	r2, [sl]
   301ec:	str	sl, [sp, #20]
   301f0:	ldr	r2, [r2, r8, lsl #3]
   301f4:	str	r2, [sp, #24]
   301f8:	ldr	r2, [r0, #120]	; 0x78
   301fc:	add	r2, r2, r3
   30200:	cmp	r5, r2
   30204:	ble	30ad8 <__assert_fail@plt+0x1f6a0>
   30208:	add	r4, r1, #8
   3020c:	ldr	r2, [r0, #40]	; 0x28
   30210:	ldr	r5, [r1]
   30214:	ldr	r3, [r0, #88]	; 0x58
   30218:	str	r1, [sp, #16]
   3021c:	str	r2, [sp, #12]
   30220:	ldr	r2, [r0, #100]	; 0x64
   30224:	cmp	r5, #0
   30228:	moveq	r5, r9
   3022c:	cmp	r5, #0
   30230:	str	r2, [sp, #8]
   30234:	ldr	r2, [r4]
   30238:	str	r2, [r0, #100]	; 0x64
   3023c:	str	r5, [r0, #40]	; 0x28
   30240:	ble	30284 <__assert_fail@plt+0x1ee4c>
   30244:	ldr	r2, [r0, #48]	; 0x30
   30248:	sub	r7, r5, #1
   3024c:	cmp	r2, r7
   30250:	beq	30b48 <__assert_fail@plt+0x1f710>
   30254:	ldr	r2, [r0, #80]	; 0x50
   30258:	cmp	r2, #2
   3025c:	blt	302c8 <__assert_fail@plt+0x1ee90>
   30260:	ldr	r2, [r0, #8]
   30264:	mov	r3, r5
   30268:	sub	r2, r2, #4
   3026c:	ldr	r6, [r2, r3, lsl #2]
   30270:	cmn	r6, #1
   30274:	bne	302fc <__assert_fail@plt+0x1eec4>
   30278:	sub	r3, r3, #1
   3027c:	cmp	r3, #0
   30280:	bgt	3026c <__assert_fail@plt+0x1ee34>
   30284:	ldr	r7, [r0, #60]	; 0x3c
   30288:	cmp	r5, r9
   3028c:	beq	3032c <__assert_fail@plt+0x1eef4>
   30290:	ldr	r0, [sp, #40]	; 0x28
   30294:	ldr	r0, [r0, #100]	; 0x64
   30298:	ldr	r4, [r0, r5, lsl #2]
   3029c:	cmp	r4, #0
   302a0:	beq	303e8 <__assert_fail@plt+0x1efb0>
   302a4:	ldrb	r0, [r4, #52]	; 0x34
   302a8:	ldr	r8, [fp, #16]
   302ac:	tst	r0, #64	; 0x40
   302b0:	bne	30400 <__assert_fail@plt+0x1efc8>
   302b4:	mov	r0, #0
   302b8:	str	r0, [sp, #52]	; 0x34
   302bc:	str	r0, [sp, #48]	; 0x30
   302c0:	str	r0, [sp, #56]	; 0x38
   302c4:	b	3044c <__assert_fail@plt+0x1f014>
   302c8:	ldr	r3, [r0, #4]
   302cc:	ldr	r2, [r0, #68]	; 0x44
   302d0:	ldrb	r0, [r3, r7]
   302d4:	mov	r7, #1
   302d8:	ubfx	r1, r0, #5, #3
   302dc:	ldr	r1, [r2, r1, lsl #2]
   302e0:	and	r2, r0, #31
   302e4:	tst	r1, r7, lsl r2
   302e8:	bne	30324 <__assert_fail@plt+0x1eeec>
   302ec:	mov	r7, #0
   302f0:	cmp	r0, #10
   302f4:	beq	30314 <__assert_fail@plt+0x1eedc>
   302f8:	b	30324 <__assert_fail@plt+0x1eeec>
   302fc:	ldrb	r0, [r0, #78]	; 0x4e
   30300:	cmp	r0, #0
   30304:	bne	30b84 <__assert_fail@plt+0x1f74c>
   30308:	mov	r7, #0
   3030c:	cmp	r6, #10
   30310:	bne	30324 <__assert_fail@plt+0x1eeec>
   30314:	ldr	r0, [sp, #40]	; 0x28
   30318:	ldrb	r7, [r0, #77]	; 0x4d
   3031c:	cmp	r7, #0
   30320:	movwne	r7, #2
   30324:	cmp	r5, r9
   30328:	bne	30290 <__assert_fail@plt+0x1ee58>
   3032c:	mov	r0, #1
   30330:	str	r0, [sp, #52]	; 0x34
   30334:	str	r0, [sp, #48]	; 0x30
   30338:	mov	r0, #4
   3033c:	bl	3554c <__assert_fail@plt+0x24114>
   30340:	cmp	r0, #0
   30344:	str	r0, [sp, #56]	; 0x38
   30348:	beq	30b6c <__assert_fail@plt+0x1f734>
   3034c:	str	r8, [r0]
   30350:	ldr	r8, [fp, #16]
   30354:	ldr	r2, [sp, #24]
   30358:	mov	r0, #0
   3035c:	add	r1, sp, #48	; 0x30
   30360:	str	r0, [fp, #-52]	; 0xffffffcc
   30364:	mov	r0, sl
   30368:	mov	r3, r8
   3036c:	bl	30ba4 <__assert_fail@plt+0x1f76c>
   30370:	cmp	r0, #0
   30374:	str	r0, [fp, #-52]	; 0xffffffcc
   30378:	bne	30b5c <__assert_fail@plt+0x1f724>
   3037c:	ldr	r0, [sp, #52]	; 0x34
   30380:	cmp	r0, #0
   30384:	beq	303ac <__assert_fail@plt+0x1ef74>
   30388:	ldr	r0, [sp, #40]	; 0x28
   3038c:	ldr	r3, [sp, #24]
   30390:	add	r1, sp, #48	; 0x30
   30394:	mov	r2, r5
   30398:	str	r8, [sp]
   3039c:	bl	30ce0 <__assert_fail@plt+0x1f8a8>
   303a0:	cmp	r0, #0
   303a4:	str	r0, [fp, #-52]	; 0xffffffcc
   303a8:	bne	30b5c <__assert_fail@plt+0x1f724>
   303ac:	ldr	r1, [sp, #20]
   303b0:	sub	r0, fp, #52	; 0x34
   303b4:	add	r2, sp, #48	; 0x30
   303b8:	mov	r3, r7
   303bc:	bl	2de9c <__assert_fail@plt+0x1ca64>
   303c0:	mov	r4, r0
   303c4:	cmp	r0, #0
   303c8:	bne	303d8 <__assert_fail@plt+0x1efa0>
   303cc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   303d0:	cmp	r0, #0
   303d4:	bne	30ac8 <__assert_fail@plt+0x1f690>
   303d8:	ldr	r0, [sp, #40]	; 0x28
   303dc:	ldr	r0, [r0, #100]	; 0x64
   303e0:	str	r4, [r0, r5, lsl #2]
   303e4:	b	3044c <__assert_fail@plt+0x1f014>
   303e8:	ldr	r8, [fp, #16]
   303ec:	mov	r4, #0
   303f0:	str	r4, [sp, #52]	; 0x34
   303f4:	str	r4, [sp, #48]	; 0x30
   303f8:	str	r4, [sp, #56]	; 0x38
   303fc:	b	3044c <__assert_fail@plt+0x1f014>
   30400:	ldr	r0, [r4, #8]
   30404:	cmp	r0, #1
   30408:	str	r0, [sp, #52]	; 0x34
   3040c:	blt	30a74 <__assert_fail@plt+0x1f63c>
   30410:	str	r0, [sp, #48]	; 0x30
   30414:	lsl	r0, r0, #2
   30418:	bl	3554c <__assert_fail@plt+0x24114>
   3041c:	cmp	r0, #0
   30420:	str	r0, [sp, #56]	; 0x38
   30424:	beq	30b6c <__assert_fail@plt+0x1f734>
   30428:	ldr	r2, [r4, #8]
   3042c:	ldr	r1, [r4, #12]
   30430:	lsl	r2, r2, #2
   30434:	bl	111ec <memcpy@plt>
   30438:	ldrb	r0, [r4, #52]	; 0x34
   3043c:	mov	r1, #0
   30440:	str	r1, [fp, #-52]	; 0xffffffcc
   30444:	tst	r0, #64	; 0x40
   30448:	bne	30388 <__assert_fail@plt+0x1ef50>
   3044c:	str	r4, [sp, #36]	; 0x24
   30450:	ldr	r4, [fp, #12]
   30454:	mov	r9, r4
   30458:	cmp	r5, r4
   3045c:	bge	309c4 <__assert_fail@plt+0x1f58c>
   30460:	ldr	r7, [sp, #40]	; 0x28
   30464:	ldr	r4, [sp, #20]
   30468:	ldr	sl, [sp, #24]
   3046c:	mov	r0, #0
   30470:	str	r0, [sp, #32]
   30474:	ldr	r0, [r7, #120]	; 0x78
   30478:	ldr	r1, [sp, #32]
   3047c:	cmp	r1, r0
   30480:	bgt	309c8 <__assert_fail@plt+0x1f590>
   30484:	mov	r0, #0
   30488:	add	r1, r5, #1
   3048c:	str	r0, [sp, #52]	; 0x34
   30490:	str	r1, [sp, #28]
   30494:	ldr	r0, [r7, #100]	; 0x64
   30498:	ldr	r0, [r0, r1, lsl #2]
   3049c:	cmp	r0, #0
   304a0:	beq	304bc <__assert_fail@plt+0x1f084>
   304a4:	add	r1, r0, #4
   304a8:	add	r0, sp, #48	; 0x30
   304ac:	bl	2dbd0 <__assert_fail@plt+0x1c798>
   304b0:	cmp	r0, #0
   304b4:	str	r0, [fp, #-52]	; 0xffffffcc
   304b8:	bne	30ac8 <__assert_fail@plt+0x1f690>
   304bc:	ldr	r1, [sp, #36]	; 0x24
   304c0:	cmp	r1, #0
   304c4:	beq	30838 <__assert_fail@plt+0x1f400>
   304c8:	mov	r0, #0
   304cc:	ldr	r8, [r7, #84]	; 0x54
   304d0:	str	r0, [fp, #-32]	; 0xffffffe0
   304d4:	str	r0, [fp, #-44]	; 0xffffffd4
   304d8:	str	r0, [fp, #-48]	; 0xffffffd0
   304dc:	str	r0, [fp, #-40]	; 0xffffffd8
   304e0:	ldr	r1, [r1, #20]
   304e4:	cmp	r1, #1
   304e8:	blt	30828 <__assert_fail@plt+0x1f3f0>
   304ec:	str	r5, [sp, #44]	; 0x2c
   304f0:	ldr	r5, [sp, #36]	; 0x24
   304f4:	mov	r4, #0
   304f8:	b	3066c <__assert_fail@plt+0x1f234>
   304fc:	cmp	r2, r1
   30500:	bne	3052c <__assert_fail@plt+0x1f0f4>
   30504:	lsl	r0, r2, #1
   30508:	lsl	r1, r2, #3
   3050c:	str	r0, [sp, #48]	; 0x30
   30510:	ldr	r0, [sp, #56]	; 0x38
   30514:	bl	3557c <__assert_fail@plt+0x24144>
   30518:	cmp	r0, #0
   3051c:	beq	30a98 <__assert_fail@plt+0x1f660>
   30520:	str	r0, [sp, #56]	; 0x38
   30524:	ldr	r1, [sp, #52]	; 0x34
   30528:	b	30530 <__assert_fail@plt+0x1f0f8>
   3052c:	ldr	r0, [sp, #56]	; 0x38
   30530:	ldr	r2, [r0]
   30534:	cmp	r2, r6
   30538:	ble	30574 <__assert_fail@plt+0x1f13c>
   3053c:	cmp	r1, #1
   30540:	blt	305a4 <__assert_fail@plt+0x1f16c>
   30544:	add	r2, r0, r1, lsl #2
   30548:	add	r1, r1, #1
   3054c:	mov	r3, r2
   30550:	ldr	r7, [r3, #-4]!
   30554:	sub	r1, r1, #1
   30558:	cmp	r1, #1
   3055c:	str	r7, [r2]
   30560:	mov	r2, r3
   30564:	bgt	30550 <__assert_fail@plt+0x1f118>
   30568:	ldr	r7, [sp, #40]	; 0x28
   3056c:	sub	r1, r1, #1
   30570:	b	305a4 <__assert_fail@plt+0x1f16c>
   30574:	add	r2, r0, r1, lsl #2
   30578:	ldr	r3, [r2, #-4]
   3057c:	cmp	r3, r6
   30580:	ble	305a4 <__assert_fail@plt+0x1f16c>
   30584:	sub	r1, r1, #2
   30588:	str	r3, [r2]
   3058c:	sub	r1, r1, #1
   30590:	ldr	r3, [r2, #-8]
   30594:	sub	r2, r2, #4
   30598:	cmp	r3, r6
   3059c:	bgt	30588 <__assert_fail@plt+0x1f150>
   305a0:	add	r1, r1, #2
   305a4:	str	r6, [r0, r1, lsl #2]
   305a8:	b	307cc <__assert_fail@plt+0x1f394>
   305ac:	cmp	r2, r1
   305b0:	bne	305dc <__assert_fail@plt+0x1f1a4>
   305b4:	lsl	r0, r2, #1
   305b8:	lsl	r1, r2, #3
   305bc:	str	r0, [fp, #-48]	; 0xffffffd0
   305c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   305c4:	bl	3557c <__assert_fail@plt+0x24144>
   305c8:	cmp	r0, #0
   305cc:	beq	30a98 <__assert_fail@plt+0x1f660>
   305d0:	str	r0, [fp, #-40]	; 0xffffffd8
   305d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   305d8:	b	305e0 <__assert_fail@plt+0x1f1a8>
   305dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   305e0:	ldr	r2, [r0]
   305e4:	cmp	r2, r5
   305e8:	ble	30624 <__assert_fail@plt+0x1f1ec>
   305ec:	cmp	r1, #1
   305f0:	blt	3061c <__assert_fail@plt+0x1f1e4>
   305f4:	add	r2, r0, r1, lsl #2
   305f8:	add	r1, r1, #1
   305fc:	mov	r3, r2
   30600:	ldr	r7, [r3, #-4]!
   30604:	sub	r1, r1, #1
   30608:	cmp	r1, #1
   3060c:	str	r7, [r2]
   30610:	mov	r2, r3
   30614:	bgt	30600 <__assert_fail@plt+0x1f1c8>
   30618:	sub	r1, r1, #1
   3061c:	ldr	r7, [sp, #40]	; 0x28
   30620:	b	30658 <__assert_fail@plt+0x1f220>
   30624:	add	r2, r0, r1, lsl #2
   30628:	ldr	r7, [sp, #40]	; 0x28
   3062c:	ldr	r3, [r2, #-4]
   30630:	cmp	r3, r5
   30634:	ble	30658 <__assert_fail@plt+0x1f220>
   30638:	sub	r1, r1, #2
   3063c:	str	r3, [r2]
   30640:	sub	r1, r1, #1
   30644:	ldr	r3, [r2, #-8]
   30648:	sub	r2, r2, #4
   3064c:	cmp	r3, r5
   30650:	bgt	3063c <__assert_fail@plt+0x1f204>
   30654:	add	r1, r1, #2
   30658:	str	r5, [r0, r1, lsl #2]
   3065c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   30660:	add	r0, r0, #1
   30664:	str	r0, [fp, #-44]	; 0xffffffd4
   30668:	b	30744 <__assert_fail@plt+0x1f30c>
   3066c:	ldr	r0, [r5, #24]
   30670:	ldr	sl, [r0, r4, lsl #2]
   30674:	ldr	r0, [r8]
   30678:	add	r1, r0, sl, lsl #3
   3067c:	ldrb	r1, [r1, #6]
   30680:	tst	r1, #16
   30684:	beq	3078c <__assert_fail@plt+0x1f354>
   30688:	ldr	r5, [sp, #44]	; 0x2c
   3068c:	mov	r0, r8
   30690:	mov	r1, sl
   30694:	mov	r2, r7
   30698:	mov	r3, r5
   3069c:	bl	315f0 <__assert_fail@plt+0x201b8>
   306a0:	mov	r9, r0
   306a4:	cmp	r0, #2
   306a8:	blt	30778 <__assert_fail@plt+0x1f340>
   306ac:	ldr	r0, [sp, #40]	; 0x28
   306b0:	ldr	r1, [r8, #12]
   306b4:	add	r6, r9, r5
   306b8:	ldr	r0, [r0, #100]	; 0x64
   306bc:	ldr	r5, [r1, sl, lsl #2]
   306c0:	mov	r1, #0
   306c4:	ldr	r0, [r0, r6, lsl #2]
   306c8:	str	r1, [fp, #-44]	; 0xffffffd4
   306cc:	cmp	r0, #0
   306d0:	beq	306ec <__assert_fail@plt+0x1f2b4>
   306d4:	add	r1, r0, #4
   306d8:	sub	r0, fp, #48	; 0x30
   306dc:	bl	2dbd0 <__assert_fail@plt+0x1c798>
   306e0:	cmp	r0, #0
   306e4:	str	r0, [fp, #-32]	; 0xffffffe0
   306e8:	bne	30aa0 <__assert_fail@plt+0x1f668>
   306ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   306f0:	cmp	r2, #0
   306f4:	beq	3071c <__assert_fail@plt+0x1f2e4>
   306f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   306fc:	cmp	r1, #0
   30700:	bne	305ac <__assert_fail@plt+0x1f174>
   30704:	ldr	r0, [fp, #-40]	; 0xffffffd8
   30708:	str	r5, [r0]
   3070c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   30710:	add	r0, r0, #1
   30714:	str	r0, [fp, #-44]	; 0xffffffd4
   30718:	b	30740 <__assert_fail@plt+0x1f308>
   3071c:	mov	r0, #1
   30720:	str	r0, [fp, #-44]	; 0xffffffd4
   30724:	str	r0, [fp, #-48]	; 0xffffffd0
   30728:	mov	r0, #4
   3072c:	bl	3554c <__assert_fail@plt+0x24114>
   30730:	cmp	r0, #0
   30734:	str	r0, [fp, #-40]	; 0xffffffd8
   30738:	beq	30ab0 <__assert_fail@plt+0x1f678>
   3073c:	str	r5, [r0]
   30740:	ldr	r7, [sp, #40]	; 0x28
   30744:	sub	r0, fp, #32
   30748:	mov	r1, r8
   3074c:	sub	r2, fp, #48	; 0x30
   30750:	bl	31360 <__assert_fail@plt+0x1ff28>
   30754:	ldr	r1, [r7, #100]	; 0x64
   30758:	str	r0, [r1, r6, lsl #2]
   3075c:	ldr	r0, [r7, #100]	; 0x64
   30760:	ldr	r0, [r0, r6, lsl #2]
   30764:	cmp	r0, #0
   30768:	bne	30778 <__assert_fail@plt+0x1f340>
   3076c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   30770:	cmp	r7, #0
   30774:	bne	30aa4 <__assert_fail@plt+0x1f66c>
   30778:	ldr	r7, [sp, #40]	; 0x28
   3077c:	ldr	r5, [sp, #36]	; 0x24
   30780:	cmp	r9, #0
   30784:	bne	307a4 <__assert_fail@plt+0x1f36c>
   30788:	ldr	r0, [r8]
   3078c:	ldr	r2, [sp, #44]	; 0x2c
   30790:	add	r1, r0, sl, lsl #3
   30794:	mov	r0, r7
   30798:	bl	318e4 <__assert_fail@plt+0x204ac>
   3079c:	cmp	r0, #0
   307a0:	beq	30800 <__assert_fail@plt+0x1f3c8>
   307a4:	ldr	r0, [r8, #12]
   307a8:	ldr	r2, [sp, #48]	; 0x30
   307ac:	ldr	r6, [r0, sl, lsl #2]
   307b0:	cmp	r2, #0
   307b4:	beq	307dc <__assert_fail@plt+0x1f3a4>
   307b8:	ldr	r1, [sp, #52]	; 0x34
   307bc:	cmp	r1, #0
   307c0:	bne	304fc <__assert_fail@plt+0x1f0c4>
   307c4:	ldr	r0, [sp, #56]	; 0x38
   307c8:	str	r6, [r0]
   307cc:	ldr	r0, [sp, #52]	; 0x34
   307d0:	add	r0, r0, #1
   307d4:	str	r0, [sp, #52]	; 0x34
   307d8:	b	30800 <__assert_fail@plt+0x1f3c8>
   307dc:	mov	r0, #1
   307e0:	str	r0, [sp, #52]	; 0x34
   307e4:	str	r0, [sp, #48]	; 0x30
   307e8:	mov	r0, #4
   307ec:	bl	3554c <__assert_fail@plt+0x24114>
   307f0:	cmp	r0, #0
   307f4:	str	r0, [sp, #56]	; 0x38
   307f8:	beq	30a8c <__assert_fail@plt+0x1f654>
   307fc:	str	r6, [r0]
   30800:	ldr	r0, [r5, #20]
   30804:	add	r4, r4, #1
   30808:	cmp	r4, r0
   3080c:	blt	3066c <__assert_fail@plt+0x1f234>
   30810:	ldr	r4, [fp, #12]
   30814:	ldr	r0, [fp, #-40]	; 0xffffffd8
   30818:	ldr	sl, [sp, #24]
   3081c:	ldr	r5, [sp, #44]	; 0x2c
   30820:	mov	r9, r4
   30824:	ldr	r4, [sp, #20]
   30828:	bl	1386c <__assert_fail@plt+0x2434>
   3082c:	ldr	r8, [fp, #16]
   30830:	mov	r0, #0
   30834:	str	r0, [fp, #-52]	; 0xffffffcc
   30838:	ldr	r0, [sp, #52]	; 0x34
   3083c:	cmp	r0, #0
   30840:	beq	3088c <__assert_fail@plt+0x1f454>
   30844:	add	r6, sp, #48	; 0x30
   30848:	mov	r0, r4
   3084c:	mov	r2, sl
   30850:	mov	r3, r8
   30854:	mov	r1, r6
   30858:	bl	30ba4 <__assert_fail@plt+0x1f76c>
   3085c:	cmp	r0, #0
   30860:	str	r0, [fp, #-52]	; 0xffffffcc
   30864:	bne	30ac8 <__assert_fail@plt+0x1f690>
   30868:	ldr	r2, [sp, #28]
   3086c:	mov	r0, r7
   30870:	mov	r1, r6
   30874:	mov	r3, sl
   30878:	str	r8, [sp]
   3087c:	bl	30ce0 <__assert_fail@plt+0x1f8a8>
   30880:	cmp	r0, #0
   30884:	str	r0, [fp, #-52]	; 0xffffffcc
   30888:	bne	30ac8 <__assert_fail@plt+0x1f690>
   3088c:	cmn	r5, #1
   30890:	ble	308cc <__assert_fail@plt+0x1f494>
   30894:	ldr	r0, [r7, #48]	; 0x30
   30898:	cmp	r0, r5
   3089c:	beq	30990 <__assert_fail@plt+0x1f558>
   308a0:	ldr	r0, [r7, #80]	; 0x50
   308a4:	cmp	r0, #2
   308a8:	blt	308d8 <__assert_fail@plt+0x1f4a0>
   308ac:	ldr	r0, [r7, #8]
   308b0:	ldr	r6, [r0, r5, lsl #2]
   308b4:	cmn	r6, #1
   308b8:	bne	30910 <__assert_fail@plt+0x1f4d8>
   308bc:	sub	r1, r5, #1
   308c0:	cmp	r5, #0
   308c4:	mov	r5, r1
   308c8:	bgt	308b0 <__assert_fail@plt+0x1f478>
   308cc:	ldr	r3, [r7, #60]	; 0x3c
   308d0:	add	r5, sp, #48	; 0x30
   308d4:	b	30938 <__assert_fail@plt+0x1f500>
   308d8:	ldr	r0, [r7, #4]
   308dc:	ldr	r1, [r7, #68]	; 0x44
   308e0:	mov	r3, #1
   308e4:	ldrb	r0, [r0, r5]
   308e8:	add	r5, sp, #48	; 0x30
   308ec:	ubfx	r2, r0, #5, #3
   308f0:	ldr	r1, [r1, r2, lsl #2]
   308f4:	and	r2, r0, #31
   308f8:	tst	r1, r3, lsl r2
   308fc:	bne	30938 <__assert_fail@plt+0x1f500>
   30900:	mov	r3, #0
   30904:	cmp	r0, #10
   30908:	beq	3092c <__assert_fail@plt+0x1f4f4>
   3090c:	b	30938 <__assert_fail@plt+0x1f500>
   30910:	ldrb	r0, [r7, #78]	; 0x4e
   30914:	add	r5, sp, #48	; 0x30
   30918:	cmp	r0, #0
   3091c:	bne	309a4 <__assert_fail@plt+0x1f56c>
   30920:	mov	r3, #0
   30924:	cmp	r6, #10
   30928:	bne	30938 <__assert_fail@plt+0x1f500>
   3092c:	ldrb	r3, [r7, #77]	; 0x4d
   30930:	cmp	r3, #0
   30934:	movwne	r3, #2
   30938:	sub	r0, fp, #52	; 0x34
   3093c:	mov	r1, r4
   30940:	mov	r2, r5
   30944:	bl	2de9c <__assert_fail@plt+0x1ca64>
   30948:	cmp	r0, #0
   3094c:	str	r0, [sp, #36]	; 0x24
   30950:	bne	30960 <__assert_fail@plt+0x1f528>
   30954:	ldr	r0, [fp, #-52]	; 0xffffffcc
   30958:	cmp	r0, #0
   3095c:	bne	30ac8 <__assert_fail@plt+0x1f690>
   30960:	ldr	r1, [sp, #28]
   30964:	ldr	r2, [sp, #36]	; 0x24
   30968:	ldr	r0, [r7, #100]	; 0x64
   3096c:	str	r2, [r0, r1, lsl #2]
   30970:	cmp	r2, #0
   30974:	ldr	r2, [sp, #32]
   30978:	mov	r0, #0
   3097c:	mov	r5, r1
   30980:	addeq	r0, r2, #1
   30984:	cmp	r1, r9
   30988:	blt	30470 <__assert_fail@plt+0x1f038>
   3098c:	b	309cc <__assert_fail@plt+0x1f594>
   30990:	ldr	r0, [r7, #88]	; 0x58
   30994:	add	r5, sp, #48	; 0x30
   30998:	and	r0, r0, #2
   3099c:	eor	r3, r0, #10
   309a0:	b	30938 <__assert_fail@plt+0x1f500>
   309a4:	mov	r0, r6
   309a8:	bl	11354 <iswalnum@plt>
   309ac:	mov	r3, #1
   309b0:	cmp	r6, #95	; 0x5f
   309b4:	beq	30938 <__assert_fail@plt+0x1f500>
   309b8:	cmp	r0, #0
   309bc:	beq	30920 <__assert_fail@plt+0x1f4e8>
   309c0:	b	30938 <__assert_fail@plt+0x1f500>
   309c4:	ldr	r7, [sp, #40]	; 0x28
   309c8:	mov	r1, r5
   309cc:	ldr	r0, [sp, #56]	; 0x38
   309d0:	mov	r4, r1
   309d4:	bl	1386c <__assert_fail@plt+0x2434>
   309d8:	ldr	r0, [r7, #100]	; 0x64
   309dc:	mov	sl, #1
   309e0:	ldr	r1, [r0, r9, lsl #2]
   309e4:	ldr	r0, [sp, #16]
   309e8:	str	r4, [r0]
   309ec:	ldr	r0, [sp, #12]
   309f0:	cmp	r1, #0
   309f4:	addne	r1, r1, #4
   309f8:	str	r0, [r7, #40]	; 0x28
   309fc:	ldr	r0, [sp, #8]
   30a00:	str	r0, [r7, #100]	; 0x64
   30a04:	beq	30a68 <__assert_fail@plt+0x1f630>
   30a08:	ldr	r2, [r1, #4]
   30a0c:	cmp	r2, #1
   30a10:	blt	30a64 <__assert_fail@plt+0x1f62c>
   30a14:	ldr	r0, [fp, #8]
   30a18:	ldr	r1, [r1, #8]
   30a1c:	subs	r2, r2, #1
   30a20:	mov	sl, #0
   30a24:	mov	r3, #0
   30a28:	beq	30a54 <__assert_fail@plt+0x1f61c>
   30a2c:	mov	r3, #0
   30a30:	mov	r7, #1
   30a34:	add	r5, r3, r2
   30a38:	lsr	r4, r5, #1
   30a3c:	ldr	r6, [r1, r4, lsl #2]
   30a40:	cmp	r6, r0
   30a44:	movge	r2, r4
   30a48:	addlt	r3, r7, r5, lsr #1
   30a4c:	cmp	r3, r2
   30a50:	bcc	30a34 <__assert_fail@plt+0x1f5fc>
   30a54:	ldr	r1, [r1, r3, lsl #2]
   30a58:	cmp	r1, r0
   30a5c:	movne	sl, #1
   30a60:	b	30a68 <__assert_fail@plt+0x1f630>
   30a64:	mov	sl, #1
   30a68:	mov	r0, sl
   30a6c:	sub	sp, fp, #28
   30a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a74:	mov	r0, #0
   30a78:	str	r0, [sp, #52]	; 0x34
   30a7c:	str	r0, [sp, #48]	; 0x30
   30a80:	str	r0, [sp, #56]	; 0x38
   30a84:	str	r0, [fp, #-52]	; 0xffffffcc
   30a88:	b	303ac <__assert_fail@plt+0x1ef74>
   30a8c:	mov	r0, #0
   30a90:	str	r0, [sp, #48]	; 0x30
   30a94:	str	r0, [sp, #52]	; 0x34
   30a98:	ldr	r0, [fp, #-40]	; 0xffffffd8
   30a9c:	b	30abc <__assert_fail@plt+0x1f684>
   30aa0:	mov	r7, r0
   30aa4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   30aa8:	bl	1386c <__assert_fail@plt+0x2434>
   30aac:	b	30ac4 <__assert_fail@plt+0x1f68c>
   30ab0:	mov	r0, #0
   30ab4:	str	r0, [fp, #-48]	; 0xffffffd0
   30ab8:	str	r0, [fp, #-44]	; 0xffffffd4
   30abc:	bl	1386c <__assert_fail@plt+0x2434>
   30ac0:	mov	r7, #12
   30ac4:	str	r7, [fp, #-52]	; 0xffffffcc
   30ac8:	ldr	r0, [sp, #56]	; 0x38
   30acc:	bl	1386c <__assert_fail@plt+0x2434>
   30ad0:	ldr	sl, [fp, #-52]	; 0xffffffcc
   30ad4:	b	30a68 <__assert_fail@plt+0x1f630>
   30ad8:	mov	r6, r1
   30adc:	mvn	r1, #-2147483648	; 0x80000000
   30ae0:	mov	sl, #12
   30ae4:	sub	r1, r1, r5
   30ae8:	cmp	r1, r2
   30aec:	ble	30a68 <__assert_fail@plt+0x1f630>
   30af0:	add	r0, r2, #1
   30af4:	add	r7, r0, r5
   30af8:	str	r0, [sp, #44]	; 0x2c
   30afc:	cmn	r7, #-1073741823	; 0xc0000001
   30b00:	bhi	30a68 <__assert_fail@plt+0x1f630>
   30b04:	mov	r4, r6
   30b08:	lsl	r1, r7, #2
   30b0c:	ldr	r0, [r4, #8]!
   30b10:	bl	3557c <__assert_fail@plt+0x24144>
   30b14:	cmp	r0, #0
   30b18:	beq	30a68 <__assert_fail@plt+0x1f630>
   30b1c:	ldr	r1, [sp, #44]	; 0x2c
   30b20:	str	r7, [r6, #4]
   30b24:	str	r0, [r6, #8]
   30b28:	add	r0, r0, r5, lsl #2
   30b2c:	lsl	r2, r1, #2
   30b30:	mov	r1, #0
   30b34:	bl	1136c <memset@plt>
   30b38:	ldr	r0, [sp, #40]	; 0x28
   30b3c:	ldr	sl, [sp, #20]
   30b40:	mov	r1, r6
   30b44:	b	3020c <__assert_fail@plt+0x1edd4>
   30b48:	and	r0, r3, #2
   30b4c:	eor	r7, r0, #10
   30b50:	cmp	r5, r9
   30b54:	beq	3032c <__assert_fail@plt+0x1eef4>
   30b58:	b	30290 <__assert_fail@plt+0x1ee58>
   30b5c:	mov	sl, r0
   30b60:	ldr	r0, [sp, #56]	; 0x38
   30b64:	bl	1386c <__assert_fail@plt+0x2434>
   30b68:	b	30a68 <__assert_fail@plt+0x1f630>
   30b6c:	mov	r0, #0
   30b70:	mov	sl, #12
   30b74:	str	r0, [sp, #48]	; 0x30
   30b78:	str	r0, [sp, #52]	; 0x34
   30b7c:	str	sl, [fp, #-52]	; 0xffffffcc
   30b80:	b	30a68 <__assert_fail@plt+0x1f630>
   30b84:	mov	r0, r6
   30b88:	bl	11354 <iswalnum@plt>
   30b8c:	mov	r7, #1
   30b90:	cmp	r6, #95	; 0x5f
   30b94:	beq	30324 <__assert_fail@plt+0x1eeec>
   30b98:	cmp	r0, #0
   30b9c:	beq	30308 <__assert_fail@plt+0x1eed0>
   30ba0:	b	30324 <__assert_fail@plt+0x1eeec>
   30ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ba8:	add	fp, sp, #28
   30bac:	sub	sp, sp, #28
   30bb0:	str	r0, [sp, #12]
   30bb4:	ldr	r0, [r1, #4]
   30bb8:	mov	r4, r1
   30bbc:	mov	r1, #0
   30bc0:	mov	sl, r3
   30bc4:	mov	r8, r2
   30bc8:	str	r1, [sp, #20]
   30bcc:	str	r0, [sp, #16]
   30bd0:	lsl	r0, r0, #2
   30bd4:	bl	3554c <__assert_fail@plt+0x24114>
   30bd8:	cmp	r0, #0
   30bdc:	str	r0, [sp, #24]
   30be0:	beq	30cd8 <__assert_fail@plt+0x1f8a0>
   30be4:	ldr	r0, [r4, #4]
   30be8:	cmp	r0, #1
   30bec:	blt	30cb0 <__assert_fail@plt+0x1f878>
   30bf0:	mov	r9, #0
   30bf4:	str	r4, [sp, #8]
   30bf8:	ldr	r0, [r4, #8]
   30bfc:	ldr	r1, [sp, #12]
   30c00:	ldr	r2, [r0, r9, lsl #2]
   30c04:	ldr	r1, [r1, #24]
   30c08:	add	r0, r2, r2, lsl #1
   30c0c:	add	r1, r1, r0, lsl #2
   30c10:	ldr	r0, [r1, #4]
   30c14:	cmp	r0, #1
   30c18:	blt	30c54 <__assert_fail@plt+0x1f81c>
   30c1c:	ldr	r7, [sp, #12]
   30c20:	ldr	r3, [r1, #8]
   30c24:	mov	r6, #0
   30c28:	ldr	r7, [r7]
   30c2c:	ldr	r4, [r3, r6, lsl #2]
   30c30:	add	r5, r7, r4, lsl #3
   30c34:	ldrb	r5, [r5, #4]
   30c38:	cmp	r5, sl
   30c3c:	ldreq	r5, [r7, r4, lsl #3]
   30c40:	cmpeq	r5, r8
   30c44:	beq	30c7c <__assert_fail@plt+0x1f844>
   30c48:	add	r6, r6, #1
   30c4c:	cmp	r6, r0
   30c50:	blt	30c2c <__assert_fail@plt+0x1f7f4>
   30c54:	add	r0, sp, #16
   30c58:	bl	2dbd0 <__assert_fail@plt+0x1c798>
   30c5c:	cmp	r0, #0
   30c60:	bne	30ca0 <__assert_fail@plt+0x1f868>
   30c64:	ldr	r4, [sp, #8]
   30c68:	add	r9, r9, #1
   30c6c:	ldr	r0, [r4, #4]
   30c70:	cmp	r9, r0
   30c74:	blt	30bf8 <__assert_fail@plt+0x1f7c0>
   30c78:	b	30cb0 <__assert_fail@plt+0x1f878>
   30c7c:	cmn	r4, #1
   30c80:	beq	30c54 <__assert_fail@plt+0x1f81c>
   30c84:	ldr	r0, [sp, #12]
   30c88:	add	r1, sp, #16
   30c8c:	mov	r3, r8
   30c90:	str	sl, [sp]
   30c94:	bl	31228 <__assert_fail@plt+0x1fdf0>
   30c98:	cmp	r0, #0
   30c9c:	beq	30c64 <__assert_fail@plt+0x1f82c>
   30ca0:	mov	r7, r0
   30ca4:	ldr	r0, [sp, #24]
   30ca8:	bl	1386c <__assert_fail@plt+0x2434>
   30cac:	b	30ccc <__assert_fail@plt+0x1f894>
   30cb0:	ldr	r0, [r4, #8]
   30cb4:	bl	1386c <__assert_fail@plt+0x2434>
   30cb8:	vldr	d16, [sp, #16]
   30cbc:	ldr	r0, [sp, #24]
   30cc0:	mov	r7, #0
   30cc4:	str	r0, [r4, #8]
   30cc8:	vstr	d16, [r4]
   30ccc:	mov	r0, r7
   30cd0:	sub	sp, fp, #28
   30cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30cd8:	mov	r7, #12
   30cdc:	b	30ccc <__assert_fail@plt+0x1f894>
   30ce0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ce4:	add	fp, sp, #28
   30ce8:	sub	sp, sp, #52	; 0x34
   30cec:	ldr	ip, [r0, #108]	; 0x6c
   30cf0:	mov	lr, r1
   30cf4:	ldr	r1, [r0, #84]	; 0x54
   30cf8:	str	r0, [sp, #24]
   30cfc:	mov	sl, r2
   30d00:	mov	r8, #0
   30d04:	mov	r0, #0
   30d08:	cmp	ip, #1
   30d0c:	str	r1, [sp, #28]
   30d10:	blt	30d54 <__assert_fail@plt+0x1f91c>
   30d14:	ldr	r0, [sp, #24]
   30d18:	mov	r7, #1
   30d1c:	mov	r1, ip
   30d20:	ldr	r2, [r0, #116]	; 0x74
   30d24:	mov	r0, #0
   30d28:	add	r6, r1, r0
   30d2c:	add	r6, r6, r6, lsr #31
   30d30:	asr	r4, r6, #1
   30d34:	add	r5, r4, r4, lsl #1
   30d38:	add	r5, r2, r5, lsl #3
   30d3c:	ldr	r5, [r5, #4]
   30d40:	cmp	r5, sl
   30d44:	addlt	r0, r7, r6, asr #1
   30d48:	movge	r1, r4
   30d4c:	cmp	r0, r1
   30d50:	blt	30d28 <__assert_fail@plt+0x1f8f0>
   30d54:	cmp	r0, ip
   30d58:	bge	3121c <__assert_fail@plt+0x1fde4>
   30d5c:	cmn	r0, #1
   30d60:	beq	3121c <__assert_fail@plt+0x1fde4>
   30d64:	ldr	r1, [sp, #24]
   30d68:	add	r0, r0, r0, lsl #1
   30d6c:	str	r0, [sp, #8]
   30d70:	ldr	r1, [r1, #116]	; 0x74
   30d74:	add	r0, r1, r0, lsl #3
   30d78:	ldr	r0, [r0, #4]
   30d7c:	cmp	r0, sl
   30d80:	bne	3121c <__assert_fail@plt+0x1fde4>
   30d84:	str	r3, [sp, #12]
   30d88:	mov	r9, #1
   30d8c:	str	lr, [sp, #16]
   30d90:	b	30d9c <__assert_fail@plt+0x1f964>
   30d94:	ldr	r0, [sp, #24]
   30d98:	ldr	r1, [r0, #116]	; 0x74
   30d9c:	ldr	r0, [sp, #8]
   30da0:	add	r0, r1, r0, lsl #3
   30da4:	mov	r8, r0
   30da8:	ldr	r0, [lr, #4]
   30dac:	cmp	r0, #1
   30db0:	blt	310ac <__assert_fail@plt+0x1fc74>
   30db4:	subs	r6, r0, #1
   30db8:	ldr	r2, [r8]
   30dbc:	ldr	r0, [lr, #8]
   30dc0:	mov	r3, #0
   30dc4:	beq	30dec <__assert_fail@plt+0x1f9b4>
   30dc8:	mov	r1, r6
   30dcc:	add	r7, r3, r1
   30dd0:	lsr	r5, r7, #1
   30dd4:	ldr	r4, [r0, r5, lsl #2]
   30dd8:	cmp	r4, r2
   30ddc:	movge	r1, r5
   30de0:	addlt	r3, r9, r7, lsr #1
   30de4:	cmp	r3, r1
   30de8:	bcc	30dcc <__assert_fail@plt+0x1f994>
   30dec:	ldr	r1, [r0, r3, lsl #2]
   30df0:	cmp	r1, r2
   30df4:	bne	310ac <__assert_fail@plt+0x1fc74>
   30df8:	ldr	r3, [r8, #12]
   30dfc:	ldr	r1, [r8, #8]
   30e00:	add	r3, r3, sl
   30e04:	sub	r7, r3, r1
   30e08:	cmp	r7, sl
   30e0c:	bne	30ef8 <__assert_fail@plt+0x1fac0>
   30e10:	ldr	r1, [sp, #28]
   30e14:	add	r2, r2, r2, lsl #1
   30e18:	cmp	r6, #0
   30e1c:	ldr	r1, [r1, #20]
   30e20:	add	r1, r1, r2, lsl #2
   30e24:	mov	r2, #0
   30e28:	ldr	r1, [r1, #8]
   30e2c:	ldr	r4, [r1]
   30e30:	beq	30e54 <__assert_fail@plt+0x1fa1c>
   30e34:	add	r1, r2, r6
   30e38:	lsr	r3, r1, #1
   30e3c:	ldr	r7, [r0, r3, lsl #2]
   30e40:	cmp	r7, r4
   30e44:	movge	r6, r3
   30e48:	addlt	r2, r9, r1, lsr #1
   30e4c:	cmp	r2, r6
   30e50:	bcc	30e34 <__assert_fail@plt+0x1f9fc>
   30e54:	ldr	r1, [r0, r2, lsl #2]
   30e58:	mov	r0, #4
   30e5c:	cmp	r1, r4
   30e60:	beq	310a0 <__assert_fail@plt+0x1fc68>
   30e64:	mov	r0, #4
   30e68:	str	r9, [sp, #36]	; 0x24
   30e6c:	str	r9, [sp, #32]
   30e70:	bl	3554c <__assert_fail@plt+0x24114>
   30e74:	cmp	r0, #0
   30e78:	str	r0, [sp, #40]	; 0x28
   30e7c:	beq	310c0 <__assert_fail@plt+0x1fc88>
   30e80:	mov	r6, #0
   30e84:	str	r4, [r0]
   30e88:	ldr	r0, [sp, #28]
   30e8c:	ldr	r2, [sp, #12]
   30e90:	ldr	r3, [fp, #8]
   30e94:	add	r4, sp, #32
   30e98:	str	r6, [fp, #-32]	; 0xffffffe0
   30e9c:	mov	r1, r4
   30ea0:	bl	30ba4 <__assert_fail@plt+0x1f76c>
   30ea4:	ldr	r5, [sp, #16]
   30ea8:	mov	r7, r0
   30eac:	mov	r1, r4
   30eb0:	mov	r0, r5
   30eb4:	bl	2dbd0 <__assert_fail@plt+0x1c798>
   30eb8:	mov	r4, r0
   30ebc:	ldr	r0, [sp, #40]	; 0x28
   30ec0:	bl	1386c <__assert_fail@plt+0x2434>
   30ec4:	orr	r0, r7, r6
   30ec8:	mov	lr, r5
   30ecc:	orrs	r0, r0, r4
   30ed0:	mov	r0, #2
   30ed4:	beq	310a0 <__assert_fail@plt+0x1fc68>
   30ed8:	cmp	r7, #0
   30edc:	mov	r0, #1
   30ee0:	movne	r4, r7
   30ee4:	cmp	r6, #0
   30ee8:	movne	r4, r6
   30eec:	str	r4, [fp, #-32]	; 0xffffffe0
   30ef0:	str	r4, [sp, #20]
   30ef4:	b	310a0 <__assert_fail@plt+0x1fc68>
   30ef8:	ldr	r0, [sp, #24]
   30efc:	ldr	r0, [r0, #100]	; 0x64
   30f00:	ldr	r5, [r0, r7, lsl #2]
   30f04:	ldr	r0, [sp, #28]
   30f08:	ldr	r0, [r0, #12]
   30f0c:	cmp	r5, #0
   30f10:	ldr	r4, [r0, r2, lsl #2]
   30f14:	beq	30fdc <__assert_fail@plt+0x1fba4>
   30f18:	ldr	ip, [r5, #8]
   30f1c:	cmp	ip, #0
   30f20:	ble	31008 <__assert_fail@plt+0x1fbd0>
   30f24:	ldr	r0, [r5, #12]
   30f28:	subs	r3, ip, #1
   30f2c:	mov	r2, #0
   30f30:	str	r7, [sp, #4]
   30f34:	beq	30f58 <__assert_fail@plt+0x1fb20>
   30f38:	add	r6, r2, r3
   30f3c:	lsr	r7, r6, #1
   30f40:	ldr	r1, [r0, r7, lsl #2]
   30f44:	cmp	r1, r4
   30f48:	movge	r3, r7
   30f4c:	addlt	r2, r9, r6, lsr #1
   30f50:	cmp	r2, r3
   30f54:	bcc	30f38 <__assert_fail@plt+0x1fb00>
   30f58:	ldr	r1, [r0, r2, lsl #2]
   30f5c:	mov	r0, #4
   30f60:	cmp	r1, r4
   30f64:	beq	310a0 <__assert_fail@plt+0x1fc68>
   30f68:	ldr	r7, [sp, #4]
   30f6c:	cmp	ip, #1
   30f70:	str	ip, [sp, #36]	; 0x24
   30f74:	blt	3100c <__assert_fail@plt+0x1fbd4>
   30f78:	lsl	r0, ip, #2
   30f7c:	str	ip, [sp, #32]
   30f80:	bl	3554c <__assert_fail@plt+0x24114>
   30f84:	cmp	r0, #0
   30f88:	str	r0, [sp, #40]	; 0x28
   30f8c:	beq	31128 <__assert_fail@plt+0x1fcf0>
   30f90:	ldr	r2, [r5, #8]
   30f94:	ldr	r1, [r5, #12]
   30f98:	mov	r5, r0
   30f9c:	lsl	r2, r2, #2
   30fa0:	bl	111ec <memcpy@plt>
   30fa4:	ldr	r1, [sp, #32]
   30fa8:	mov	r6, #0
   30fac:	str	r6, [fp, #-32]	; 0xffffffe0
   30fb0:	cmp	r1, #0
   30fb4:	beq	31020 <__assert_fail@plt+0x1fbe8>
   30fb8:	ldr	r0, [sp, #36]	; 0x24
   30fbc:	cmp	r0, #0
   30fc0:	bne	3113c <__assert_fail@plt+0x1fd04>
   30fc4:	str	r4, [r5]
   30fc8:	str	r9, [sp, #36]	; 0x24
   30fcc:	mov	r6, #0
   30fd0:	cmp	r6, #0
   30fd4:	beq	31048 <__assert_fail@plt+0x1fc10>
   30fd8:	b	31100 <__assert_fail@plt+0x1fcc8>
   30fdc:	mov	r0, #4
   30fe0:	str	r9, [sp, #36]	; 0x24
   30fe4:	str	r9, [sp, #32]
   30fe8:	bl	3554c <__assert_fail@plt+0x24114>
   30fec:	cmp	r0, #0
   30ff0:	str	r0, [sp, #40]	; 0x28
   30ff4:	beq	310d4 <__assert_fail@plt+0x1fc9c>
   30ff8:	str	r4, [r0]
   30ffc:	mov	r0, #0
   31000:	str	r0, [fp, #-32]	; 0xffffffe0
   31004:	b	31048 <__assert_fail@plt+0x1fc10>
   31008:	str	ip, [sp, #36]	; 0x24
   3100c:	mov	r6, #0
   31010:	str	r6, [sp, #36]	; 0x24
   31014:	str	r6, [sp, #32]
   31018:	str	r6, [sp, #40]	; 0x28
   3101c:	str	r6, [fp, #-32]	; 0xffffffe0
   31020:	mov	r0, #4
   31024:	str	r9, [sp, #36]	; 0x24
   31028:	str	r9, [sp, #32]
   3102c:	bl	3554c <__assert_fail@plt+0x24114>
   31030:	cmp	r0, #0
   31034:	str	r0, [sp, #40]	; 0x28
   31038:	beq	310f4 <__assert_fail@plt+0x1fcbc>
   3103c:	str	r4, [r0]
   31040:	cmp	r6, #0
   31044:	bne	31100 <__assert_fail@plt+0x1fcc8>
   31048:	ldr	r1, [sp, #28]
   3104c:	sub	r0, fp, #32
   31050:	add	r2, sp, #32
   31054:	bl	31360 <__assert_fail@plt+0x1ff28>
   31058:	ldr	r4, [sp, #24]
   3105c:	ldr	r1, [r4, #100]	; 0x64
   31060:	str	r0, [r1, r7, lsl #2]
   31064:	ldr	r0, [sp, #40]	; 0x28
   31068:	bl	1386c <__assert_fail@plt+0x2434>
   3106c:	ldr	r0, [r4, #100]	; 0x64
   31070:	ldr	r1, [fp, #-32]	; 0xffffffe0
   31074:	ldr	r0, [r0, r7, lsl #2]
   31078:	cmp	r1, #0
   3107c:	mov	r2, r1
   31080:	movwne	r2, #1
   31084:	clz	r0, r0
   31088:	lsr	r0, r0, #5
   3108c:	ands	r0, r0, r2
   31090:	ldr	r2, [sp, #20]
   31094:	movne	r2, r1
   31098:	str	r2, [sp, #20]
   3109c:	ldr	lr, [sp, #16]
   310a0:	cmp	r0, #0
   310a4:	cmpne	r0, #4
   310a8:	bne	31208 <__assert_fail@plt+0x1fdd0>
   310ac:	ldrb	r1, [r8, #20]
   310b0:	add	r0, r8, #24
   310b4:	cmp	r1, #0
   310b8:	bne	30da4 <__assert_fail@plt+0x1f96c>
   310bc:	b	31218 <__assert_fail@plt+0x1fde0>
   310c0:	mov	r0, #0
   310c4:	mov	r6, #12
   310c8:	str	r0, [sp, #32]
   310cc:	str	r0, [sp, #36]	; 0x24
   310d0:	b	30e88 <__assert_fail@plt+0x1fa50>
   310d4:	mov	r0, #0
   310d8:	mov	r1, #12
   310dc:	str	r0, [sp, #32]
   310e0:	str	r0, [sp, #36]	; 0x24
   310e4:	mov	r0, #12
   310e8:	str	r1, [fp, #-32]	; 0xffffffe0
   310ec:	str	r0, [sp, #20]
   310f0:	b	31120 <__assert_fail@plt+0x1fce8>
   310f4:	mov	r0, #0
   310f8:	str	r0, [sp, #32]
   310fc:	str	r0, [sp, #36]	; 0x24
   31100:	clz	r0, r6
   31104:	lsr	r4, r0, #5
   31108:	ldr	r0, [sp, #40]	; 0x28
   3110c:	bl	1386c <__assert_fail@plt+0x2434>
   31110:	cmp	r4, #0
   31114:	movwne	r6, #12
   31118:	str	r6, [sp, #20]
   3111c:	str	r6, [fp, #-32]	; 0xffffffe0
   31120:	mov	r0, #1
   31124:	b	3109c <__assert_fail@plt+0x1fc64>
   31128:	mov	r0, #0
   3112c:	mov	r6, #12
   31130:	str	r0, [sp, #32]
   31134:	str	r0, [sp, #36]	; 0x24
   31138:	b	3101c <__assert_fail@plt+0x1fbe4>
   3113c:	cmp	r1, r0
   31140:	bne	3116c <__assert_fail@plt+0x1fd34>
   31144:	lsl	r0, r1, #1
   31148:	lsl	r1, r1, #3
   3114c:	str	r0, [sp, #32]
   31150:	mov	r0, r5
   31154:	bl	3557c <__assert_fail@plt+0x24144>
   31158:	cmp	r0, #0
   3115c:	beq	31200 <__assert_fail@plt+0x1fdc8>
   31160:	str	r0, [sp, #40]	; 0x28
   31164:	mov	r5, r0
   31168:	ldr	r0, [sp, #36]	; 0x24
   3116c:	ldr	r1, [r5]
   31170:	cmp	r1, r4
   31174:	ble	311ac <__assert_fail@plt+0x1fd74>
   31178:	cmp	r0, #1
   3117c:	blt	311dc <__assert_fail@plt+0x1fda4>
   31180:	add	r1, r5, r0, lsl #2
   31184:	add	r0, r0, #1
   31188:	mov	r2, r1
   3118c:	ldr	r3, [r2, #-4]!
   31190:	sub	r0, r0, #1
   31194:	cmp	r0, #1
   31198:	str	r3, [r1]
   3119c:	mov	r1, r2
   311a0:	bgt	3118c <__assert_fail@plt+0x1fd54>
   311a4:	sub	r0, r0, #1
   311a8:	b	311dc <__assert_fail@plt+0x1fda4>
   311ac:	add	r1, r5, r0, lsl #2
   311b0:	ldr	r2, [r1, #-4]
   311b4:	cmp	r2, r4
   311b8:	ble	311dc <__assert_fail@plt+0x1fda4>
   311bc:	sub	r0, r0, #2
   311c0:	str	r2, [r1]
   311c4:	sub	r0, r0, #1
   311c8:	ldr	r2, [r1, #-8]
   311cc:	sub	r1, r1, #4
   311d0:	cmp	r2, r4
   311d4:	bgt	311c0 <__assert_fail@plt+0x1fd88>
   311d8:	add	r0, r0, #2
   311dc:	str	r4, [r5, r0, lsl #2]
   311e0:	ldr	r7, [sp, #4]
   311e4:	mov	r6, #0
   311e8:	ldr	r0, [sp, #36]	; 0x24
   311ec:	add	r0, r0, #1
   311f0:	str	r0, [sp, #36]	; 0x24
   311f4:	cmp	r6, #0
   311f8:	beq	31048 <__assert_fail@plt+0x1fc10>
   311fc:	b	31100 <__assert_fail@plt+0x1fcc8>
   31200:	mov	r6, #0
   31204:	b	31100 <__assert_fail@plt+0x1fcc8>
   31208:	cmp	r0, #2
   3120c:	beq	30d94 <__assert_fail@plt+0x1f95c>
   31210:	ldr	r8, [sp, #20]
   31214:	b	3121c <__assert_fail@plt+0x1fde4>
   31218:	mov	r8, #0
   3121c:	mov	r0, r8
   31220:	sub	sp, fp, #28
   31224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3122c:	add	fp, sp, #28
   31230:	sub	sp, sp, #4
   31234:	ldr	r4, [fp, #8]
   31238:	mov	r9, r3
   3123c:	mov	r7, r2
   31240:	mov	r8, r1
   31244:	mov	sl, r0
   31248:	mov	r5, #1
   3124c:	b	3125c <__assert_fail@plt+0x1fe24>
   31250:	add	r0, r0, r7, lsl #2
   31254:	ldr	r0, [r0, #8]
   31258:	ldr	r7, [r0]
   3125c:	ldr	r0, [r8, #4]
   31260:	cmp	r0, #1
   31264:	blt	312ac <__assert_fail@plt+0x1fe74>
   31268:	subs	r2, r0, #1
   3126c:	ldr	r0, [r8, #8]
   31270:	mov	ip, r4
   31274:	mov	r1, #0
   31278:	beq	3129c <__assert_fail@plt+0x1fe64>
   3127c:	add	r3, r1, r2
   31280:	lsr	r6, r3, #1
   31284:	ldr	r4, [r0, r6, lsl #2]
   31288:	cmp	r4, r7
   3128c:	movge	r2, r6
   31290:	addlt	r1, r5, r3, lsr #1
   31294:	cmp	r1, r2
   31298:	bcc	3127c <__assert_fail@plt+0x1fe44>
   3129c:	ldr	r0, [r0, r1, lsl #2]
   312a0:	mov	r4, ip
   312a4:	cmp	r0, r7
   312a8:	beq	31348 <__assert_fail@plt+0x1ff10>
   312ac:	ldr	r0, [sl]
   312b0:	add	r1, r0, r7, lsl #3
   312b4:	ldrb	r1, [r1, #4]
   312b8:	cmp	r1, r4
   312bc:	ldreq	r0, [r0, r7, lsl #3]
   312c0:	cmpeq	r0, r9
   312c4:	beq	3132c <__assert_fail@plt+0x1fef4>
   312c8:	mov	r0, r8
   312cc:	mov	r1, r7
   312d0:	bl	2dd60 <__assert_fail@plt+0x1c928>
   312d4:	cmp	r0, #0
   312d8:	beq	31354 <__assert_fail@plt+0x1ff1c>
   312dc:	ldr	r0, [sl, #20]
   312e0:	add	r7, r7, r7, lsl #1
   312e4:	add	r1, r0, r7, lsl #2
   312e8:	ldr	r2, [r1, #4]
   312ec:	cmp	r2, #2
   312f0:	beq	31300 <__assert_fail@plt+0x1fec8>
   312f4:	cmp	r2, #0
   312f8:	bne	31250 <__assert_fail@plt+0x1fe18>
   312fc:	b	31348 <__assert_fail@plt+0x1ff10>
   31300:	ldr	r0, [r1, #8]
   31304:	mov	r1, r8
   31308:	mov	r3, r9
   3130c:	ldr	r2, [r0, #4]
   31310:	mov	r0, sl
   31314:	str	r4, [sp]
   31318:	bl	31228 <__assert_fail@plt+0x1fdf0>
   3131c:	cmp	r0, #0
   31320:	bne	3134c <__assert_fail@plt+0x1ff14>
   31324:	ldr	r0, [sl, #20]
   31328:	b	31250 <__assert_fail@plt+0x1fe18>
   3132c:	cmp	r4, #9
   31330:	bne	31348 <__assert_fail@plt+0x1ff10>
   31334:	mov	r0, r8
   31338:	mov	r1, r7
   3133c:	bl	2dd60 <__assert_fail@plt+0x1c928>
   31340:	cmp	r0, #0
   31344:	beq	31354 <__assert_fail@plt+0x1ff1c>
   31348:	mov	r0, #0
   3134c:	sub	sp, fp, #28
   31350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31354:	mov	r0, #12
   31358:	sub	sp, fp, #28
   3135c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31364:	add	fp, sp, #28
   31368:	sub	sp, sp, #4
   3136c:	ldr	sl, [r2, #4]
   31370:	cmp	sl, #0
   31374:	beq	315b0 <__assert_fail@plt+0x20178>
   31378:	mov	r7, r2
   3137c:	mov	r9, r1
   31380:	cmp	sl, #1
   31384:	mov	r6, sl
   31388:	blt	313fc <__assert_fail@plt+0x1ffc4>
   3138c:	ldr	r5, [r7, #8]
   31390:	mov	r2, #0
   31394:	cmp	sl, #4
   31398:	mov	r6, sl
   3139c:	bcc	313e4 <__assert_fail@plt+0x1ffac>
   313a0:	mov	r1, #0
   313a4:	bic	r2, sl, #3
   313a8:	vdup.32	q8, r1
   313ac:	mov	r3, r2
   313b0:	mov	r1, r5
   313b4:	vmov.32	d16[0], sl
   313b8:	vld1.32	{d18-d19}, [r1]!
   313bc:	subs	r3, r3, #4
   313c0:	vadd.i32	q8, q9, q8
   313c4:	bne	313b8 <__assert_fail@plt+0x1ff80>
   313c8:	vext.8	q9, q8, q8, #8
   313cc:	cmp	sl, r2
   313d0:	vadd.i32	q8, q8, q9
   313d4:	vdup.32	q9, d16[1]
   313d8:	vadd.i32	q8, q8, q9
   313dc:	vmov.32	r6, d16[0]
   313e0:	beq	313fc <__assert_fail@plt+0x1ffc4>
   313e4:	add	r1, r5, r2, lsl #2
   313e8:	sub	r2, sl, r2
   313ec:	ldr	r3, [r1], #4
   313f0:	subs	r2, r2, #1
   313f4:	add	r6, r3, r6
   313f8:	bne	313ec <__assert_fail@plt+0x1ffb4>
   313fc:	ldr	r1, [r9, #68]	; 0x44
   31400:	ldr	r2, [r9, #32]
   31404:	str	r0, [sp]
   31408:	and	r1, r1, r6
   3140c:	add	r3, r1, r1, lsl #1
   31410:	ldr	r1, [r2, r3, lsl #2]
   31414:	cmp	r1, #1
   31418:	blt	3148c <__assert_fail@plt+0x20054>
   3141c:	add	r2, r2, r3, lsl #2
   31420:	sub	ip, sl, #1
   31424:	mov	r5, #0
   31428:	ldr	lr, [r2, #8]
   3142c:	b	31460 <__assert_fail@plt+0x20028>
   31430:	mov	r3, ip
   31434:	add	r2, r3, #1
   31438:	cmp	r2, #1
   3143c:	blt	315a4 <__assert_fail@plt+0x2016c>
   31440:	ldr	r2, [r7, #8]
   31444:	ldr	r0, [r4, #12]
   31448:	ldr	r2, [r2, r3, lsl #2]
   3144c:	ldr	r0, [r0, r3, lsl #2]
   31450:	sub	r3, r3, #1
   31454:	cmp	r0, r2
   31458:	beq	31434 <__assert_fail@plt+0x1fffc>
   3145c:	b	31480 <__assert_fail@plt+0x20048>
   31460:	cmp	r7, #0
   31464:	beq	31480 <__assert_fail@plt+0x20048>
   31468:	ldr	r4, [lr, r5, lsl #2]
   3146c:	ldr	r3, [r4]
   31470:	cmp	r6, r3
   31474:	ldreq	r3, [r4, #8]
   31478:	cmpeq	r3, sl
   3147c:	beq	31430 <__assert_fail@plt+0x1fff8>
   31480:	add	r5, r5, #1
   31484:	cmp	r5, r1
   31488:	blt	31460 <__assert_fail@plt+0x20028>
   3148c:	mov	r0, #56	; 0x38
   31490:	mov	r1, #1
   31494:	bl	354f8 <__assert_fail@plt+0x240c0>
   31498:	cmp	r0, #0
   3149c:	beq	315dc <__assert_fail@plt+0x201a4>
   314a0:	mov	r4, r0
   314a4:	ldr	r0, [r7, #4]
   314a8:	add	sl, r4, #4
   314ac:	cmp	r0, #1
   314b0:	str	r0, [r4, #8]
   314b4:	blt	31578 <__assert_fail@plt+0x20140>
   314b8:	str	r0, [r4, #4]
   314bc:	lsl	r0, r0, #2
   314c0:	bl	3554c <__assert_fail@plt+0x24114>
   314c4:	cmp	r0, #0
   314c8:	str	r0, [r4, #12]
   314cc:	beq	315c8 <__assert_fail@plt+0x20190>
   314d0:	ldmib	r7, {r5, r7}
   314d4:	lsl	r2, r5, #2
   314d8:	mov	r1, r7
   314dc:	bl	111ec <memcpy@plt>
   314e0:	cmp	r5, #1
   314e4:	str	sl, [r4, #40]	; 0x28
   314e8:	blt	3158c <__assert_fail@plt+0x20154>
   314ec:	ldr	sl, [r9]
   314f0:	movw	ip, #65280	; 0xff00
   314f4:	mov	lr, #32
   314f8:	movt	ip, #3
   314fc:	add	r2, ip, #255	; 0xff
   31500:	ldr	r0, [r7]
   31504:	add	r1, sl, r0, lsl #3
   31508:	ldr	r0, [r1, #4]!
   3150c:	and	r3, r0, r2
   31510:	cmp	r3, #1
   31514:	beq	31568 <__assert_fail@plt+0x20130>
   31518:	ldrb	r8, [r4, #52]	; 0x34
   3151c:	and	r3, lr, r0, lsr #15
   31520:	uxtb	r0, r0
   31524:	cmp	r0, #12
   31528:	orr	r3, r8, r3
   3152c:	strb	r3, [r4, #52]	; 0x34
   31530:	beq	31560 <__assert_fail@plt+0x20128>
   31534:	cmp	r0, #4
   31538:	beq	3154c <__assert_fail@plt+0x20114>
   3153c:	cmp	r0, #2
   31540:	bne	31554 <__assert_fail@plt+0x2011c>
   31544:	orr	r0, r3, #16
   31548:	b	31564 <__assert_fail@plt+0x2012c>
   3154c:	orr	r0, r3, #64	; 0x40
   31550:	b	31564 <__assert_fail@plt+0x2012c>
   31554:	ldr	r0, [r1]
   31558:	tst	r0, ip
   3155c:	beq	31568 <__assert_fail@plt+0x20130>
   31560:	orr	r0, r3, #128	; 0x80
   31564:	strb	r0, [r4, #52]	; 0x34
   31568:	add	r7, r7, #4
   3156c:	subs	r5, r5, #1
   31570:	bne	31500 <__assert_fail@plt+0x200c8>
   31574:	b	3158c <__assert_fail@plt+0x20154>
   31578:	mov	r0, #0
   3157c:	str	r0, [sl]
   31580:	str	r0, [sl, #4]
   31584:	str	r0, [sl, #8]
   31588:	str	sl, [r4, #40]	; 0x28
   3158c:	mov	r0, r9
   31590:	mov	r1, r4
   31594:	mov	r2, r6
   31598:	bl	2e2e0 <__assert_fail@plt+0x1cea8>
   3159c:	cmp	r0, #0
   315a0:	bne	315bc <__assert_fail@plt+0x20184>
   315a4:	mov	r0, r4
   315a8:	sub	sp, fp, #28
   315ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   315b0:	mov	r4, #0
   315b4:	str	r4, [r0]
   315b8:	b	315a4 <__assert_fail@plt+0x2016c>
   315bc:	mov	r0, r4
   315c0:	bl	282fc <__assert_fail@plt+0x16ec4>
   315c4:	b	315dc <__assert_fail@plt+0x201a4>
   315c8:	mov	r0, #0
   315cc:	str	r0, [r4, #4]
   315d0:	str	r0, [r4, #8]
   315d4:	mov	r0, r4
   315d8:	bl	1386c <__assert_fail@plt+0x2434>
   315dc:	ldr	r1, [sp]
   315e0:	mov	r0, #12
   315e4:	mov	r4, #0
   315e8:	str	r0, [r1]
   315ec:	b	315a4 <__assert_fail@plt+0x2016c>
   315f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   315f4:	add	fp, sp, #24
   315f8:	ldr	lr, [r0]
   315fc:	add	r7, lr, r1, lsl #3
   31600:	ldrb	r9, [r7, #4]
   31604:	cmp	r9, #7
   31608:	beq	317d4 <__assert_fail@plt+0x2039c>
   3160c:	ldr	ip, [r2, #80]	; 0x50
   31610:	mov	r6, #1
   31614:	cmp	ip, #1
   31618:	beq	31654 <__assert_fail@plt+0x2021c>
   3161c:	ldr	r5, [r2, #28]
   31620:	add	r7, r3, #1
   31624:	cmp	r7, r5
   31628:	bge	31654 <__assert_fail@plt+0x2021c>
   3162c:	ldr	r6, [r2, #8]
   31630:	add	r7, r6, r3, lsl #2
   31634:	mov	r6, #1
   31638:	ldr	r4, [r7, r6, lsl #2]
   3163c:	cmn	r4, #1
   31640:	bne	31654 <__assert_fail@plt+0x2021c>
   31644:	add	r6, r6, #1
   31648:	add	r4, r3, r6
   3164c:	cmp	r4, r5
   31650:	blt	31638 <__assert_fail@plt+0x20200>
   31654:	mov	r8, #0
   31658:	cmp	r9, #5
   3165c:	bne	316a4 <__assert_fail@plt+0x2026c>
   31660:	cmp	r6, #2
   31664:	blt	317c4 <__assert_fail@plt+0x2038c>
   31668:	ldr	r0, [r0, #128]	; 0x80
   3166c:	tst	r0, #64	; 0x40
   31670:	bne	31684 <__assert_fail@plt+0x2024c>
   31674:	ldr	r1, [r2, #4]
   31678:	ldrb	r1, [r1, r3]
   3167c:	cmp	r1, #10
   31680:	beq	317c4 <__assert_fail@plt+0x2038c>
   31684:	tst	r0, #128	; 0x80
   31688:	beq	317c0 <__assert_fail@plt+0x20388>
   3168c:	ldr	r0, [r2, #4]
   31690:	ldrb	r0, [r0, r3]
   31694:	cmp	r0, #0
   31698:	movne	r8, r6
   3169c:	mov	r0, r8
   316a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   316a4:	cmp	r9, #6
   316a8:	bne	317c4 <__assert_fail@plt+0x2038c>
   316ac:	cmp	r6, #2
   316b0:	blt	317c4 <__assert_fail@plt+0x2038c>
   316b4:	ldr	r7, [lr, r1, lsl #3]
   316b8:	ldr	r0, [r7, #32]
   316bc:	cmp	r0, #0
   316c0:	bne	316dc <__assert_fail@plt+0x202a4>
   316c4:	ldr	r1, [r7, #36]	; 0x24
   316c8:	cmp	r1, #0
   316cc:	bne	316dc <__assert_fail@plt+0x202a4>
   316d0:	ldr	r1, [r7, #20]
   316d4:	cmp	r1, #0
   316d8:	beq	317cc <__assert_fail@plt+0x20394>
   316dc:	cmp	ip, #1
   316e0:	bne	316f0 <__assert_fail@plt+0x202b8>
   316e4:	ldr	r1, [r2, #4]
   316e8:	ldrb	r5, [r1, r3]
   316ec:	b	316f8 <__assert_fail@plt+0x202c0>
   316f0:	ldr	r1, [r2, #8]
   316f4:	ldr	r5, [r1, r3, lsl #2]
   316f8:	ldr	r1, [r7, #20]
   316fc:	cmp	r1, #1
   31700:	blt	31724 <__assert_fail@plt+0x202ec>
   31704:	ldr	r2, [r7]
   31708:	mov	r3, #0
   3170c:	ldr	r4, [r2, r3, lsl #2]
   31710:	cmp	r5, r4
   31714:	beq	317a0 <__assert_fail@plt+0x20368>
   31718:	add	r3, r3, #1
   3171c:	cmp	r3, r1
   31720:	blt	3170c <__assert_fail@plt+0x202d4>
   31724:	ldr	r1, [r7, #36]	; 0x24
   31728:	cmp	r1, #1
   3172c:	blt	31760 <__assert_fail@plt+0x20328>
   31730:	mov	r4, #0
   31734:	ldr	r0, [r7, #12]
   31738:	ldr	r1, [r0, r4, lsl #2]
   3173c:	mov	r0, r5
   31740:	bl	11174 <iswctype@plt>
   31744:	cmp	r0, #0
   31748:	bne	317a0 <__assert_fail@plt+0x20368>
   3174c:	ldr	r0, [r7, #36]	; 0x24
   31750:	add	r4, r4, #1
   31754:	cmp	r4, r0
   31758:	blt	31734 <__assert_fail@plt+0x202fc>
   3175c:	ldr	r0, [r7, #32]
   31760:	cmp	r0, #1
   31764:	blt	31798 <__assert_fail@plt+0x20360>
   31768:	ldr	r1, [r7, #4]
   3176c:	mov	r2, #0
   31770:	ldr	r3, [r1, r2, lsl #2]
   31774:	cmp	r3, r5
   31778:	bhi	3178c <__assert_fail@plt+0x20354>
   3177c:	ldr	r3, [r7, #8]
   31780:	ldr	r3, [r3, r2, lsl #2]
   31784:	cmp	r5, r3
   31788:	bls	317a0 <__assert_fail@plt+0x20368>
   3178c:	add	r2, r2, #1
   31790:	cmp	r2, r0
   31794:	blt	31770 <__assert_fail@plt+0x20338>
   31798:	mov	r0, #0
   3179c:	b	317a4 <__assert_fail@plt+0x2036c>
   317a0:	mov	r0, r6
   317a4:	ldrb	r1, [r7, #16]
   317a8:	tst	r1, #1
   317ac:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   317b0:	cmp	r0, #0
   317b4:	bgt	317c4 <__assert_fail@plt+0x2038c>
   317b8:	cmp	r6, #1
   317bc:	movle	r6, #1
   317c0:	mov	r8, r6
   317c4:	mov	r0, r8
   317c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   317cc:	mov	r5, #0
   317d0:	b	316f8 <__assert_fail@plt+0x202c0>
   317d4:	ldr	r0, [r2, #4]
   317d8:	mov	r8, #0
   317dc:	ldrb	r6, [r0, r3]
   317e0:	cmp	r6, #194	; 0xc2
   317e4:	bcc	317c4 <__assert_fail@plt+0x2038c>
   317e8:	ldr	r1, [r2, #48]	; 0x30
   317ec:	add	r2, r3, #2
   317f0:	cmp	r2, r1
   317f4:	bgt	317c4 <__assert_fail@plt+0x2038c>
   317f8:	add	r0, r0, r3
   317fc:	cmp	r6, #223	; 0xdf
   31800:	ldrb	r7, [r0, #1]
   31804:	bhi	31828 <__assert_fail@plt+0x203f0>
   31808:	mov	r8, #2
   3180c:	cmp	r7, #191	; 0xbf
   31810:	sxtb	r0, r7
   31814:	movwhi	r8, #0
   31818:	cmn	r0, #1
   3181c:	movwgt	r8, #0
   31820:	mov	r0, r8
   31824:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31828:	cmp	r6, #239	; 0xef
   3182c:	bhi	31848 <__assert_fail@plt+0x20410>
   31830:	mov	r2, #3
   31834:	cmp	r6, #224	; 0xe0
   31838:	bne	318a4 <__assert_fail@plt+0x2046c>
   3183c:	cmp	r7, #160	; 0xa0
   31840:	bcc	317c4 <__assert_fail@plt+0x2038c>
   31844:	b	318a4 <__assert_fail@plt+0x2046c>
   31848:	cmp	r6, #247	; 0xf7
   3184c:	bhi	31868 <__assert_fail@plt+0x20430>
   31850:	mov	r2, #4
   31854:	cmp	r6, #240	; 0xf0
   31858:	bne	318a4 <__assert_fail@plt+0x2046c>
   3185c:	cmp	r7, #144	; 0x90
   31860:	bcc	317c4 <__assert_fail@plt+0x2038c>
   31864:	b	318a4 <__assert_fail@plt+0x2046c>
   31868:	cmp	r6, #251	; 0xfb
   3186c:	bhi	31888 <__assert_fail@plt+0x20450>
   31870:	mov	r2, #5
   31874:	cmp	r6, #248	; 0xf8
   31878:	bne	318a4 <__assert_fail@plt+0x2046c>
   3187c:	cmp	r7, #136	; 0x88
   31880:	bcc	317c4 <__assert_fail@plt+0x2038c>
   31884:	b	318a4 <__assert_fail@plt+0x2046c>
   31888:	cmp	r6, #253	; 0xfd
   3188c:	bhi	317c4 <__assert_fail@plt+0x2038c>
   31890:	mov	r2, #6
   31894:	cmp	r6, #252	; 0xfc
   31898:	bne	318a4 <__assert_fail@plt+0x2046c>
   3189c:	cmp	r7, #132	; 0x84
   318a0:	bcc	317c4 <__assert_fail@plt+0x2038c>
   318a4:	add	r3, r2, r3
   318a8:	cmp	r3, r1
   318ac:	bgt	317c4 <__assert_fail@plt+0x2038c>
   318b0:	mov	r1, #1
   318b4:	b	318c8 <__assert_fail@plt+0x20490>
   318b8:	add	r1, r1, #1
   318bc:	cmp	r1, r2
   318c0:	movcs	r0, r2
   318c4:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   318c8:	ldrb	r3, [r0, r1]
   318cc:	sxtb	r7, r3
   318d0:	cmn	r7, #1
   318d4:	bgt	317c4 <__assert_fail@plt+0x2038c>
   318d8:	cmp	r3, #191	; 0xbf
   318dc:	bls	318b8 <__assert_fail@plt+0x20480>
   318e0:	b	317c4 <__assert_fail@plt+0x2038c>
   318e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   318e8:	add	fp, sp, #24
   318ec:	ldr	r4, [r1, #4]
   318f0:	mov	r6, r0
   318f4:	mvn	r0, #0
   318f8:	mov	r8, #0
   318fc:	uxtab	r3, r0, r4
   31900:	cmp	r3, #6
   31904:	bhi	31aa0 <__assert_fail@plt+0x20668>
   31908:	ldr	r0, [r6, #4]
   3190c:	mov	r9, r1
   31910:	ldrb	r1, [r0, r2]
   31914:	add	r7, pc, #4
   31918:	sxtb	r0, r1
   3191c:	ldr	pc, [r7, r3, lsl #2]
   31920:	andeq	r1, r3, ip, lsr r9
   31924:	andeq	r1, r3, r0, lsr #21
   31928:	andeq	r1, r3, r0, asr r9
   3192c:	andeq	r1, r3, r0, lsr #21
   31930:	andeq	r1, r3, r8, ror r9
   31934:	andeq	r1, r3, r0, lsr #21
   31938:	andeq	r1, r3, r0, ror r9
   3193c:	ldrb	r3, [r9]
   31940:	uxtb	r7, r0
   31944:	cmp	r3, r7
   31948:	beq	319ac <__assert_fail@plt+0x20574>
   3194c:	b	31aa0 <__assert_fail@plt+0x20668>
   31950:	ldr	r3, [r9]
   31954:	ubfx	r7, r1, #5, #3
   31958:	mov	r5, #1
   3195c:	ldr	r3, [r3, r7, lsl #2]
   31960:	and	r7, r1, #31
   31964:	tst	r3, r5, lsl r7
   31968:	bne	319ac <__assert_fail@plt+0x20574>
   3196c:	b	31aa0 <__assert_fail@plt+0x20668>
   31970:	cmp	r0, #0
   31974:	blt	31aa0 <__assert_fail@plt+0x20668>
   31978:	cmp	r1, #0
   3197c:	beq	3199c <__assert_fail@plt+0x20564>
   31980:	cmp	r1, #10
   31984:	bne	319ac <__assert_fail@plt+0x20574>
   31988:	ldr	r3, [r6, #84]	; 0x54
   3198c:	ldrb	r3, [r3, #128]	; 0x80
   31990:	tst	r3, #64	; 0x40
   31994:	beq	31aa0 <__assert_fail@plt+0x20668>
   31998:	b	319ac <__assert_fail@plt+0x20574>
   3199c:	ldr	r3, [r6, #84]	; 0x54
   319a0:	ldrb	r3, [r3, #128]	; 0x80
   319a4:	tst	r3, #128	; 0x80
   319a8:	bne	31aa0 <__assert_fail@plt+0x20668>
   319ac:	movw	r3, #65280	; 0xff00
   319b0:	movt	r3, #3
   319b4:	tst	r4, r3
   319b8:	beq	31a04 <__assert_fail@plt+0x205cc>
   319bc:	cmn	r2, #1
   319c0:	ble	319fc <__assert_fail@plt+0x205c4>
   319c4:	ldr	r3, [r6, #48]	; 0x30
   319c8:	cmp	r3, r2
   319cc:	beq	31ac0 <__assert_fail@plt+0x20688>
   319d0:	ldr	r3, [r6, #80]	; 0x50
   319d4:	cmp	r3, #2
   319d8:	blt	31a10 <__assert_fail@plt+0x205d8>
   319dc:	ldr	r0, [r6, #8]
   319e0:	ldr	r7, [r0, r2, lsl #2]
   319e4:	cmn	r7, #1
   319e8:	bne	31a40 <__assert_fail@plt+0x20608>
   319ec:	sub	r1, r2, #1
   319f0:	cmp	r2, #0
   319f4:	mov	r2, r1
   319f8:	bgt	319e0 <__assert_fail@plt+0x205a8>
   319fc:	ldr	r1, [r6, #60]	; 0x3c
   31a00:	b	31a64 <__assert_fail@plt+0x2062c>
   31a04:	mov	r8, #1
   31a08:	mov	r0, r8
   31a0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31a10:	ldr	r2, [r6, #68]	; 0x44
   31a14:	ubfx	r3, r1, #5, #3
   31a18:	and	r7, r1, #31
   31a1c:	mov	r1, #1
   31a20:	ldr	r3, [r2, r3, lsl #2]
   31a24:	mov	r2, #0
   31a28:	tst	r3, r1, lsl r7
   31a2c:	bne	31a7c <__assert_fail@plt+0x20644>
   31a30:	mov	r1, #0
   31a34:	cmp	r0, #10
   31a38:	beq	31a58 <__assert_fail@plt+0x20620>
   31a3c:	b	31a64 <__assert_fail@plt+0x2062c>
   31a40:	ldrb	r0, [r6, #78]	; 0x4e
   31a44:	cmp	r0, #0
   31a48:	bne	31ad0 <__assert_fail@plt+0x20698>
   31a4c:	mov	r1, #0
   31a50:	cmp	r7, #10
   31a54:	bne	31a64 <__assert_fail@plt+0x2062c>
   31a58:	ldrb	r1, [r6, #77]	; 0x4d
   31a5c:	cmp	r1, #0
   31a60:	movwne	r1, #2
   31a64:	and	r0, r1, #1
   31a68:	tst	r4, #1024	; 0x400
   31a6c:	eor	r2, r0, #1
   31a70:	beq	31a7c <__assert_fail@plt+0x20644>
   31a74:	cmp	r0, #0
   31a78:	beq	31aa0 <__assert_fail@plt+0x20668>
   31a7c:	ldr	r0, [r9, #4]
   31a80:	cmp	r2, #0
   31a84:	bne	31a90 <__assert_fail@plt+0x20658>
   31a88:	ands	r2, r0, #2048	; 0x800
   31a8c:	bne	31aa0 <__assert_fail@plt+0x20668>
   31a90:	tst	r1, #2
   31a94:	bne	31aa8 <__assert_fail@plt+0x20670>
   31a98:	ands	r2, r0, #8192	; 0x2000
   31a9c:	beq	31aa8 <__assert_fail@plt+0x20670>
   31aa0:	mov	r0, r8
   31aa4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31aa8:	and	r0, r0, #32768	; 0x8000
   31aac:	mov	r2, #1
   31ab0:	and	r1, r1, #8
   31ab4:	eor	r0, r2, r0, lsr #15
   31ab8:	orr	r0, r0, r1, lsr #3
   31abc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31ac0:	ldr	r0, [r6, #88]	; 0x58
   31ac4:	and	r0, r0, #2
   31ac8:	eor	r1, r0, #10
   31acc:	b	31a64 <__assert_fail@plt+0x2062c>
   31ad0:	mov	r0, r7
   31ad4:	bl	11354 <iswalnum@plt>
   31ad8:	mov	r1, #1
   31adc:	mov	r2, #0
   31ae0:	cmp	r7, #95	; 0x5f
   31ae4:	beq	31a7c <__assert_fail@plt+0x20644>
   31ae8:	cmp	r0, #0
   31aec:	beq	31a4c <__assert_fail@plt+0x20614>
   31af0:	b	31a7c <__assert_fail@plt+0x20644>
   31af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31af8:	add	fp, sp, #28
   31afc:	sub	sp, sp, #4
   31b00:	vpush	{d8-d9}
   31b04:	sub	sp, sp, #2256	; 0x8d0
   31b08:	sub	sp, sp, #12288	; 0x3000
   31b0c:	mov	r6, #0
   31b10:	sub	lr, fp, #1024	; 0x400
   31b14:	mov	r8, r1
   31b18:	str	r0, [sp, #148]	; 0x94
   31b1c:	vmov.i32	q4, #0	; 0x00000000
   31b20:	str	r6, [r1, #44]	; 0x2c
   31b24:	str	r6, [r1, #48]	; 0x30
   31b28:	sub	r1, lr, #56	; 0x38
   31b2c:	mov	r0, r1
   31b30:	vst1.64	{d8-d9}, [r0]!
   31b34:	vst1.64	{d8-d9}, [r0]
   31b38:	ldr	r0, [r8, #8]
   31b3c:	cmp	r0, #1
   31b40:	blt	32ab0 <__assert_fail@plt+0x21678>
   31b44:	ldr	r2, [sp, #148]	; 0x94
   31b48:	mov	r7, #0
   31b4c:	mov	r6, #0
   31b50:	str	r8, [sp, #24]
   31b54:	add	r0, r2, #112	; 0x70
   31b58:	str	r0, [sp, #4]
   31b5c:	add	r0, r2, #96	; 0x60
   31b60:	str	r0, [sp]
   31b64:	add	r0, r1, #16
   31b68:	str	r0, [sp, #8]
   31b6c:	ldr	r0, [r8, #12]
   31b70:	ldr	r1, [sp, #148]	; 0x94
   31b74:	ldr	r0, [r0, r7, lsl #2]
   31b78:	ldr	r2, [r1]
   31b7c:	add	r9, r2, r0, lsl #3
   31b80:	ldr	r1, [r9, #4]!
   31b84:	uxtb	r3, r1
   31b88:	cmp	r3, #1
   31b8c:	str	r3, [sp, #92]	; 0x5c
   31b90:	bne	31bd4 <__assert_fail@plt+0x2079c>
   31b94:	str	r2, [sp, #16]
   31b98:	ldrb	r2, [r2, r0, lsl #3]
   31b9c:	sub	lr, fp, #1024	; 0x400
   31ba0:	str	r0, [sp, #20]
   31ba4:	mov	r0, r7
   31ba8:	mov	r4, #1
   31bac:	sub	r7, lr, #56	; 0x38
   31bb0:	mov	r5, r7
   31bb4:	ubfx	r3, r2, #5, #3
   31bb8:	ldr	r8, [sp, #24]
   31bbc:	and	r2, r2, #31
   31bc0:	ldr	r7, [r7, r3, lsl #2]
   31bc4:	orr	r2, r7, r4, lsl r2
   31bc8:	mov	r7, r0
   31bcc:	str	r2, [r5, r3, lsl #2]
   31bd0:	b	31d30 <__assert_fail@plt+0x208f8>
   31bd4:	cmp	r3, #7
   31bd8:	beq	31c28 <__assert_fail@plt+0x207f0>
   31bdc:	cmp	r3, #5
   31be0:	beq	31c80 <__assert_fail@plt+0x20848>
   31be4:	cmp	r3, #3
   31be8:	bne	324ac <__assert_fail@plt+0x21074>
   31bec:	str	r2, [sp, #16]
   31bf0:	ldr	r2, [r2, r0, lsl #3]
   31bf4:	sub	lr, fp, #1024	; 0x400
   31bf8:	str	r0, [sp, #20]
   31bfc:	sub	r3, lr, #56	; 0x38
   31c00:	vld1.64	{d16-d17}, [r3]
   31c04:	vld1.32	{d18-d19}, [r2]!
   31c08:	vorr	q8, q8, q9
   31c0c:	vst1.64	{d16-d17}, [r3]
   31c10:	vld1.32	{d16-d17}, [r2]
   31c14:	ldr	r2, [sp, #8]
   31c18:	vld1.32	{d18-d19}, [r2]
   31c1c:	vorr	q8, q9, q8
   31c20:	vst1.32	{d16-d17}, [r2]
   31c24:	b	31d30 <__assert_fail@plt+0x208f8>
   31c28:	str	r0, [sp, #20]
   31c2c:	ldr	r0, [sp, #148]	; 0x94
   31c30:	str	r2, [sp, #16]
   31c34:	mvn	r2, #0
   31c38:	str	r2, [fp, #-1068]	; 0xfffffbd4
   31c3c:	str	r2, [fp, #-1072]	; 0xfffffbd0
   31c40:	str	r2, [fp, #-1076]	; 0xfffffbcc
   31c44:	str	r2, [fp, #-1080]	; 0xfffffbc8
   31c48:	ldr	r3, [r0, #128]	; 0x80
   31c4c:	and	r2, r3, #128	; 0x80
   31c50:	ands	r3, r3, #64	; 0x40
   31c54:	beq	31c60 <__assert_fail@plt+0x20828>
   31c58:	cmp	r2, #0
   31c5c:	beq	31d30 <__assert_fail@plt+0x208f8>
   31c60:	cmp	r3, #0
   31c64:	mvn	r3, #1
   31c68:	movweq	r3, #64510	; 0xfbfe
   31c6c:	movteq	r3, #65535	; 0xffff
   31c70:	cmp	r2, #0
   31c74:	mvneq	r3, #1024	; 0x400
   31c78:	str	r3, [fp, #-1080]	; 0xfffffbc8
   31c7c:	b	31d30 <__assert_fail@plt+0x208f8>
   31c80:	str	r2, [sp, #16]
   31c84:	ldr	r2, [sp, #148]	; 0x94
   31c88:	mov	r4, r7
   31c8c:	str	r0, [sp, #20]
   31c90:	ldr	r2, [r2, #92]	; 0x5c
   31c94:	cmp	r2, #2
   31c98:	blt	31cd8 <__assert_fail@plt+0x208a0>
   31c9c:	ldr	r0, [sp, #148]	; 0x94
   31ca0:	sub	lr, fp, #1024	; 0x400
   31ca4:	sub	r3, lr, #56	; 0x38
   31ca8:	vld1.64	{d16-d17}, [r3]
   31cac:	ldr	r2, [r0, #60]	; 0x3c
   31cb0:	vld1.32	{d18-d19}, [r2]!
   31cb4:	vorr	q8, q8, q9
   31cb8:	vst1.64	{d16-d17}, [r3]
   31cbc:	vld1.32	{d18-d19}, [r2]
   31cc0:	ldr	r2, [sp, #8]
   31cc4:	vld1.32	{d20-d21}, [r2]
   31cc8:	vorr	q9, q10, q9
   31ccc:	vst1.32	{d18-d19}, [r2]
   31cd0:	vmov.32	r2, d16[0]
   31cd4:	b	31cfc <__assert_fail@plt+0x208c4>
   31cd8:	mvn	r2, #0
   31cdc:	str	r2, [fp, #-1052]	; 0xfffffbe4
   31ce0:	str	r2, [fp, #-1056]	; 0xfffffbe0
   31ce4:	str	r2, [fp, #-1060]	; 0xfffffbdc
   31ce8:	str	r2, [fp, #-1064]	; 0xfffffbd8
   31cec:	str	r2, [fp, #-1068]	; 0xfffffbd4
   31cf0:	str	r2, [fp, #-1072]	; 0xfffffbd0
   31cf4:	str	r2, [fp, #-1076]	; 0xfffffbcc
   31cf8:	str	r2, [fp, #-1080]	; 0xfffffbc8
   31cfc:	ldr	r0, [sp, #148]	; 0x94
   31d00:	ldr	r8, [sp, #24]
   31d04:	ldr	r3, [r0, #128]	; 0x80
   31d08:	ands	r7, r3, #64	; 0x40
   31d0c:	and	r3, r3, #128	; 0x80
   31d10:	biceq	r2, r2, #1024	; 0x400
   31d14:	mov	r7, r4
   31d18:	beq	31d24 <__assert_fail@plt+0x208ec>
   31d1c:	cmp	r3, #0
   31d20:	beq	31d30 <__assert_fail@plt+0x208f8>
   31d24:	cmp	r3, #0
   31d28:	bicne	r2, r2, #1
   31d2c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   31d30:	ldr	sl, [sp, #92]	; 0x5c
   31d34:	movw	r2, #65280	; 0xff00
   31d38:	movt	r2, #3
   31d3c:	ands	r2, r1, r2
   31d40:	beq	31ff0 <__assert_fail@plt+0x20bb8>
   31d44:	tst	r1, #8192	; 0x2000
   31d48:	beq	31d74 <__assert_fail@plt+0x2093c>
   31d4c:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   31d50:	sub	lr, fp, #1024	; 0x400
   31d54:	sub	r3, lr, #56	; 0x38
   31d58:	vst1.64	{d8-d9}, [r3]!
   31d5c:	vst1.64	{d8-d9}, [r3]
   31d60:	tst	r2, #1024	; 0x400
   31d64:	beq	324ac <__assert_fail@plt+0x21074>
   31d68:	ldr	sl, [sp, #92]	; 0x5c
   31d6c:	mov	r2, #1024	; 0x400
   31d70:	str	r2, [fp, #-1080]	; 0xfffffbc8
   31d74:	tst	r1, #32768	; 0x8000
   31d78:	bne	31f78 <__assert_fail@plt+0x20b40>
   31d7c:	tst	r1, #1024	; 0x400
   31d80:	beq	31f00 <__assert_fail@plt+0x20ac8>
   31d84:	cmp	sl, #1
   31d88:	ldrbeq	r2, [r9, #2]
   31d8c:	tsteq	r2, #64	; 0x40
   31d90:	beq	31f78 <__assert_fail@plt+0x20b40>
   31d94:	ldr	r0, [sp, #148]	; 0x94
   31d98:	ldr	r2, [r0, #92]	; 0x5c
   31d9c:	cmp	r2, #1
   31da0:	ble	31e30 <__assert_fail@plt+0x209f8>
   31da4:	ldr	r0, [sp, #148]	; 0x94
   31da8:	ldr	r3, [sp]
   31dac:	sub	lr, fp, #1024	; 0x400
   31db0:	ldr	r2, [r0, #60]	; 0x3c
   31db4:	vld1.32	{d16-d17}, [r3]
   31db8:	sub	r3, lr, #56	; 0x38
   31dbc:	vld1.64	{d20-d21}, [r3]
   31dc0:	vld1.32	{d18-d19}, [r2]!
   31dc4:	vorn	q8, q8, q9
   31dc8:	vand	q8, q10, q8
   31dcc:	vst1.64	{d16-d17}, [r3]
   31dd0:	vmov.32	r3, d16[1]
   31dd4:	vld1.32	{d18-d19}, [r2]
   31dd8:	ldr	r2, [sp, #4]
   31ddc:	vld1.32	{d20-d21}, [r2]
   31de0:	ldr	r2, [sp, #8]
   31de4:	vld1.32	{d22-d23}, [r2]
   31de8:	vorn	q9, q10, q9
   31dec:	vand	q9, q11, q9
   31df0:	vst1.32	{d18-d19}, [r2]
   31df4:	vmov.32	r2, d16[0]
   31df8:	orr	r2, r3, r2
   31dfc:	vmov.32	r3, d17[0]
   31e00:	orr	r2, r2, r3
   31e04:	vmov.32	r3, d17[1]
   31e08:	orr	r2, r2, r3
   31e0c:	vmov.32	r3, d18[0]
   31e10:	orr	r2, r2, r3
   31e14:	vmov.32	r3, d18[1]
   31e18:	orr	r2, r2, r3
   31e1c:	vmov.32	r3, d19[0]
   31e20:	orr	r2, r2, r3
   31e24:	vmov.32	r3, d19[1]
   31e28:	orr	r2, r2, r3
   31e2c:	b	31ef4 <__assert_fail@plt+0x20abc>
   31e30:	ldr	r4, [sp, #148]	; 0x94
   31e34:	str	r6, [sp, #144]	; 0x90
   31e38:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   31e3c:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   31e40:	str	r7, [sp, #12]
   31e44:	ldr	r5, [r4, #116]	; 0x74
   31e48:	ldr	ip, [r4, #104]	; 0x68
   31e4c:	ldr	r0, [r4, #108]	; 0x6c
   31e50:	ldr	r3, [r4, #96]	; 0x60
   31e54:	ldr	lr, [r4, #100]	; 0x64
   31e58:	ldr	r8, [r4, #112]	; 0x70
   31e5c:	ldr	sl, [r4, #124]	; 0x7c
   31e60:	str	r5, [sp, #136]	; 0x88
   31e64:	ldr	r5, [r4, #120]	; 0x78
   31e68:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   31e6c:	and	r2, r2, r0
   31e70:	and	ip, r6, ip
   31e74:	ldr	r0, [sp, #136]	; 0x88
   31e78:	str	r5, [sp, #140]	; 0x8c
   31e7c:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   31e80:	and	r7, r4, r3
   31e84:	str	r7, [fp, #-1080]	; 0xfffffbc8
   31e88:	and	lr, r5, lr
   31e8c:	str	lr, [fp, #-1076]	; 0xfffffbcc
   31e90:	str	ip, [fp, #-1072]	; 0xfffffbd0
   31e94:	str	r2, [fp, #-1068]	; 0xfffffbd4
   31e98:	orr	r7, lr, r7
   31e9c:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   31ea0:	orr	r7, r7, ip
   31ea4:	orr	r2, r7, r2
   31ea8:	ldr	r7, [sp, #12]
   31eac:	and	r6, r6, r8
   31eb0:	ldr	r8, [sp, #24]
   31eb4:	str	r6, [fp, #-1064]	; 0xfffffbd8
   31eb8:	orr	r2, r2, r6
   31ebc:	ldr	r6, [sp, #144]	; 0x90
   31ec0:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   31ec4:	and	r4, r4, r0
   31ec8:	ldr	r0, [sp, #140]	; 0x8c
   31ecc:	str	r4, [fp, #-1060]	; 0xfffffbdc
   31ed0:	orr	r2, r2, r4
   31ed4:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   31ed8:	and	r3, r3, r0
   31edc:	str	r3, [fp, #-1056]	; 0xfffffbe0
   31ee0:	orr	r2, r2, r3
   31ee4:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   31ee8:	and	r5, r5, sl
   31eec:	str	r5, [fp, #-1052]	; 0xfffffbe4
   31ef0:	orr	r2, r2, r5
   31ef4:	ldr	sl, [sp, #92]	; 0x5c
   31ef8:	cmp	r2, #0
   31efc:	beq	324ac <__assert_fail@plt+0x21074>
   31f00:	tst	r1, #2048	; 0x800
   31f04:	beq	31ff0 <__assert_fail@plt+0x20bb8>
   31f08:	cmp	sl, #1
   31f0c:	bne	31f1c <__assert_fail@plt+0x20ae4>
   31f10:	ldrb	r0, [r9, #2]
   31f14:	tst	r0, #64	; 0x40
   31f18:	bne	31f78 <__assert_fail@plt+0x20b40>
   31f1c:	ldr	r0, [sp, #148]	; 0x94
   31f20:	sub	lr, fp, #1024	; 0x400
   31f24:	sub	r1, lr, #56	; 0x38
   31f28:	ldr	r0, [r0, #92]	; 0x5c
   31f2c:	cmp	r0, #1
   31f30:	ble	31f84 <__assert_fail@plt+0x20b4c>
   31f34:	ldr	r0, [sp, #148]	; 0x94
   31f38:	ldr	r2, [sp]
   31f3c:	vld1.64	{d20-d21}, [r1]
   31f40:	ldr	r0, [r0, #60]	; 0x3c
   31f44:	vld1.32	{d16-d17}, [r2]
   31f48:	vld1.32	{d18-d19}, [r0]!
   31f4c:	vand	q8, q9, q8
   31f50:	vbic	q9, q10, q8
   31f54:	vst1.64	{d18-d19}, [r1]
   31f58:	ldr	r1, [sp, #4]
   31f5c:	vld1.32	{d20-d21}, [r0]
   31f60:	ldr	r0, [sp, #8]
   31f64:	vld1.32	{d16-d17}, [r1]
   31f68:	vld1.32	{d22-d23}, [r0]
   31f6c:	vand	q8, q10, q8
   31f70:	vbic	q8, q11, q8
   31f74:	b	31fac <__assert_fail@plt+0x20b74>
   31f78:	sub	lr, fp, #1024	; 0x400
   31f7c:	sub	r0, lr, #56	; 0x38
   31f80:	b	324a4 <__assert_fail@plt+0x2106c>
   31f84:	ldr	r0, [sp]
   31f88:	vld1.64	{d18-d19}, [r1]
   31f8c:	vld1.32	{d16-d17}, [r0]
   31f90:	ldr	r0, [sp, #4]
   31f94:	vbic	q9, q9, q8
   31f98:	vst1.64	{d18-d19}, [r1]
   31f9c:	vld1.32	{d16-d17}, [r0]
   31fa0:	ldr	r0, [sp, #8]
   31fa4:	vld1.32	{d20-d21}, [r0]
   31fa8:	vbic	q8, q10, q8
   31fac:	vst1.32	{d16-d17}, [r0]
   31fb0:	vmov.32	r0, d18[0]
   31fb4:	vmov.32	r1, d18[1]
   31fb8:	orr	r0, r1, r0
   31fbc:	vmov.32	r1, d19[0]
   31fc0:	orr	r0, r0, r1
   31fc4:	vmov.32	r1, d19[1]
   31fc8:	orr	r0, r0, r1
   31fcc:	vmov.32	r1, d16[0]
   31fd0:	orr	r0, r0, r1
   31fd4:	vmov.32	r1, d16[1]
   31fd8:	orr	r0, r0, r1
   31fdc:	vmov.32	r1, d17[0]
   31fe0:	orr	r0, r0, r1
   31fe4:	vmov.32	r1, d17[1]
   31fe8:	orrs	r0, r0, r1
   31fec:	beq	324ac <__assert_fail@plt+0x21074>
   31ff0:	cmp	r6, #1
   31ff4:	blt	323c0 <__assert_fail@plt+0x20f88>
   31ff8:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   31ffc:	ldr	lr, [fp, #-1080]	; 0xfffffbc8
   32000:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   32004:	ldr	r1, [fp, #-1072]	; 0xfffffbd0
   32008:	ldr	r8, [fp, #-1068]	; 0xfffffbd4
   3200c:	str	r7, [sp, #12]
   32010:	mov	r9, #0
   32014:	add	r7, sp, #152	; 0x98
   32018:	str	r0, [sp, #96]	; 0x60
   3201c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   32020:	str	r0, [sp, #136]	; 0x88
   32024:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   32028:	str	r0, [sp, #128]	; 0x80
   3202c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   32030:	str	r0, [sp, #132]	; 0x84
   32034:	sub	r0, fp, #6144	; 0x1800
   32038:	sub	r4, r0, #104	; 0x68
   3203c:	mov	ip, r1
   32040:	cmp	sl, #1
   32044:	str	r5, [sp, #140]	; 0x8c
   32048:	bne	32070 <__assert_fail@plt+0x20c38>
   3204c:	ldr	r0, [sp, #20]
   32050:	ldr	r1, [sp, #16]
   32054:	mov	r2, #1
   32058:	ldrb	r0, [r1, r0, lsl #3]
   3205c:	ubfx	r1, r0, #5, #3
   32060:	and	r0, r0, #31
   32064:	ldr	r1, [r7, r1, lsl #2]
   32068:	tst	r1, r2, lsl r0
   3206c:	beq	322ec <__assert_fail@plt+0x20eb4>
   32070:	str	r4, [sp, #112]	; 0x70
   32074:	str	r6, [sp, #144]	; 0x90
   32078:	str	r9, [sp, #108]	; 0x6c
   3207c:	mov	r3, r8
   32080:	mov	r5, lr
   32084:	ldm	r7, {r0, r2, sl}
   32088:	ldr	r8, [sp, #140]	; 0x8c
   3208c:	ldr	r1, [r7, #12]
   32090:	str	ip, [sp, #100]	; 0x64
   32094:	ldr	r4, [sp, #132]	; 0x84
   32098:	ldr	r9, [r7, #20]
   3209c:	str	r3, [sp, #104]	; 0x68
   320a0:	and	r6, sl, ip
   320a4:	ldr	ip, [r7, #16]
   320a8:	str	r0, [sp, #124]	; 0x7c
   320ac:	and	r0, r0, lr
   320b0:	str	r2, [sp, #116]	; 0x74
   320b4:	and	r2, r2, r8
   320b8:	str	r1, [sp, #120]	; 0x78
   320bc:	ldr	lr, [r7, #24]
   320c0:	str	r0, [sp, #84]	; 0x54
   320c4:	orr	r0, r2, r0
   320c8:	str	r2, [sp, #80]	; 0x50
   320cc:	and	r2, r1, r3
   320d0:	ldr	r1, [sp, #136]	; 0x88
   320d4:	str	r6, [sp, #88]	; 0x58
   320d8:	orr	r0, r0, r6
   320dc:	str	r2, [sp, #76]	; 0x4c
   320e0:	ldr	r6, [sp, #96]	; 0x60
   320e4:	orr	r0, r0, r2
   320e8:	and	r2, ip, r4
   320ec:	str	r2, [sp, #72]	; 0x48
   320f0:	orr	r0, r0, r2
   320f4:	ldr	r2, [sp, #128]	; 0x80
   320f8:	and	r2, r9, r2
   320fc:	str	r2, [sp, #68]	; 0x44
   32100:	orr	r0, r0, r2
   32104:	and	r2, lr, r1
   32108:	str	r2, [sp, #64]	; 0x40
   3210c:	orr	r0, r0, r2
   32110:	ldr	r2, [r7, #28]
   32114:	and	r3, r2, r6
   32118:	orrs	r0, r0, r3
   3211c:	beq	322b4 <__assert_fail@plt+0x20e7c>
   32120:	ldr	r0, [sp, #124]	; 0x7c
   32124:	str	r3, [sp, #28]
   32128:	ldr	r3, [sp, #104]	; 0x68
   3212c:	str	r4, [sp, #132]	; 0x84
   32130:	bic	r0, r5, r0
   32134:	str	r0, [sp, #56]	; 0x38
   32138:	ldr	r0, [sp, #116]	; 0x74
   3213c:	bic	r0, r8, r0
   32140:	ldr	r8, [sp, #100]	; 0x64
   32144:	str	r0, [sp, #52]	; 0x34
   32148:	bic	r0, r8, sl
   3214c:	bic	r1, sl, r8
   32150:	str	r0, [sp, #60]	; 0x3c
   32154:	ldr	r0, [sp, #120]	; 0x78
   32158:	bic	r0, r3, r0
   3215c:	str	r0, [sp, #48]	; 0x30
   32160:	bic	r0, r4, ip
   32164:	ldr	r4, [sp, #128]	; 0x80
   32168:	str	r0, [sp, #44]	; 0x2c
   3216c:	bic	r0, r4, r9
   32170:	str	r0, [sp, #40]	; 0x28
   32174:	ldr	r0, [sp, #136]	; 0x88
   32178:	bic	r0, r0, lr
   3217c:	str	r0, [sp, #36]	; 0x24
   32180:	bic	r0, r6, r2
   32184:	bic	r2, r2, r6
   32188:	str	r0, [sp, #32]
   3218c:	ldr	r0, [sp, #124]	; 0x7c
   32190:	bic	r8, r0, r5
   32194:	ldr	r5, [sp, #140]	; 0x8c
   32198:	ldr	r0, [sp, #116]	; 0x74
   3219c:	str	r1, [sp, #140]	; 0x8c
   321a0:	bic	r5, r0, r5
   321a4:	orr	r0, r5, r8
   321a8:	orr	r0, r0, r1
   321ac:	ldr	r1, [sp, #120]	; 0x78
   321b0:	bic	sl, r1, r3
   321b4:	ldr	r1, [sp, #132]	; 0x84
   321b8:	orr	r0, r0, sl
   321bc:	bic	r1, ip, r1
   321c0:	orr	r3, r0, r1
   321c4:	bic	r0, r9, r4
   321c8:	orr	r4, r3, r0
   321cc:	ldr	r3, [sp, #136]	; 0x88
   321d0:	bic	r3, lr, r3
   321d4:	orr	r4, r4, r3
   321d8:	orrs	r4, r4, r2
   321dc:	beq	322dc <__assert_fail@plt+0x20ea4>
   321e0:	ldr	r6, [sp, #144]	; 0x90
   321e4:	add	r4, sp, #152	; 0x98
   321e8:	sub	lr, fp, #6144	; 0x1800
   321ec:	mov	ip, r4
   321f0:	str	r8, [r4, r6, lsl #5]
   321f4:	mov	r4, r5
   321f8:	add	r5, ip, r6, lsl #5
   321fc:	str	r4, [r5, #4]
   32200:	ldr	r4, [sp, #140]	; 0x8c
   32204:	str	r4, [r5, #8]
   32208:	str	sl, [r5, #12]
   3220c:	str	r1, [r5, #16]
   32210:	str	r0, [r5, #20]
   32214:	ldr	r0, [sp, #84]	; 0x54
   32218:	str	r3, [r5, #24]
   3221c:	str	r2, [r5, #28]
   32220:	ldr	r4, [sp, #112]	; 0x70
   32224:	sub	r1, lr, #104	; 0x68
   32228:	str	r0, [r7]
   3222c:	ldr	r0, [sp, #80]	; 0x50
   32230:	str	r0, [r7, #4]
   32234:	ldr	r0, [sp, #88]	; 0x58
   32238:	str	r0, [r7, #8]
   3223c:	ldr	r0, [sp, #76]	; 0x4c
   32240:	str	r0, [r7, #12]
   32244:	ldr	r0, [sp, #72]	; 0x48
   32248:	str	r0, [r7, #16]
   3224c:	ldr	r0, [sp, #68]	; 0x44
   32250:	str	r0, [r7, #20]
   32254:	ldr	r0, [sp, #64]	; 0x40
   32258:	str	r0, [r7, #24]
   3225c:	ldr	r0, [sp, #28]
   32260:	str	r0, [r7, #28]
   32264:	add	r0, r6, r6, lsl #1
   32268:	add	r5, r1, r0, lsl #2
   3226c:	ldr	r0, [r4, #4]
   32270:	mov	r8, r5
   32274:	str	r0, [r8, #4]!
   32278:	ldr	sl, [r4, #4]
   3227c:	cmp	sl, #1
   32280:	blt	322f8 <__assert_fail@plt+0x20ec0>
   32284:	str	r0, [r5]
   32288:	lsl	r0, r0, #2
   3228c:	bl	3554c <__assert_fail@plt+0x24114>
   32290:	ldr	r9, [sp, #108]	; 0x6c
   32294:	ldr	r6, [sp, #60]	; 0x3c
   32298:	cmp	r0, #0
   3229c:	str	r0, [r5, #8]
   322a0:	beq	32a38 <__assert_fail@plt+0x21600>
   322a4:	ldr	r1, [r4, #8]
   322a8:	lsl	r2, sl, #2
   322ac:	bl	111ec <memcpy@plt>
   322b0:	b	32310 <__assert_fail@plt+0x20ed8>
   322b4:	ldr	r0, [sp, #104]	; 0x68
   322b8:	ldr	r9, [sp, #108]	; 0x6c
   322bc:	ldr	r6, [sp, #144]	; 0x90
   322c0:	ldr	r4, [sp, #112]	; 0x70
   322c4:	ldr	sl, [sp, #92]	; 0x5c
   322c8:	ldr	r1, [sp, #100]	; 0x64
   322cc:	mov	lr, r5
   322d0:	mov	r5, r8
   322d4:	mov	r8, r0
   322d8:	b	323a8 <__assert_fail@plt+0x20f70>
   322dc:	ldr	r9, [sp, #108]	; 0x6c
   322e0:	ldr	r4, [sp, #112]	; 0x70
   322e4:	ldr	r6, [sp, #60]	; 0x3c
   322e8:	b	3231c <__assert_fail@plt+0x20ee4>
   322ec:	ldr	r5, [sp, #140]	; 0x8c
   322f0:	mov	r1, ip
   322f4:	b	323a8 <__assert_fail@plt+0x20f70>
   322f8:	ldr	r9, [sp, #108]	; 0x6c
   322fc:	ldr	r6, [sp, #60]	; 0x3c
   32300:	mov	r0, #0
   32304:	str	r0, [r5]
   32308:	str	r0, [r5, #4]
   3230c:	str	r0, [r5, #8]
   32310:	ldr	r0, [sp, #144]	; 0x90
   32314:	add	r0, r0, #1
   32318:	str	r0, [sp, #144]	; 0x90
   3231c:	ldr	r0, [sp, #24]
   32320:	ldr	r1, [sp, #12]
   32324:	ldr	r0, [r0, #12]
   32328:	ldr	r1, [r0, r1, lsl #2]
   3232c:	mov	r0, r4
   32330:	bl	2dd60 <__assert_fail@plt+0x1c928>
   32334:	cmp	r0, #0
   32338:	beq	329b4 <__assert_fail@plt+0x2157c>
   3233c:	ldr	lr, [sp, #56]	; 0x38
   32340:	ldr	ip, [sp, #52]	; 0x34
   32344:	ldr	r8, [sp, #48]	; 0x30
   32348:	ldr	r2, [sp, #44]	; 0x2c
   3234c:	mov	sl, r6
   32350:	ldr	r3, [sp, #36]	; 0x24
   32354:	ldr	r5, [sp, #32]
   32358:	mov	r1, #0
   3235c:	orr	r0, ip, lr
   32360:	orr	r0, r0, r6
   32364:	ldr	r6, [sp, #40]	; 0x28
   32368:	orr	r0, r0, r8
   3236c:	orr	r0, r0, r2
   32370:	orr	r0, r0, r6
   32374:	orr	r0, r0, r3
   32378:	orrs	r0, r0, r5
   3237c:	movweq	r1, #17
   32380:	cmp	r1, #0
   32384:	bne	323c8 <__assert_fail@plt+0x20f90>
   32388:	str	r6, [sp, #128]	; 0x80
   3238c:	mov	r1, sl
   32390:	ldr	sl, [sp, #92]	; 0x5c
   32394:	ldr	r6, [sp, #144]	; 0x90
   32398:	str	r5, [sp, #96]	; 0x60
   3239c:	mov	r5, ip
   323a0:	str	r3, [sp, #136]	; 0x88
   323a4:	str	r2, [sp, #132]	; 0x84
   323a8:	add	r9, r9, #1
   323ac:	add	r4, r4, #12
   323b0:	add	r7, r7, #32
   323b4:	cmp	r9, r6
   323b8:	blt	3203c <__assert_fail@plt+0x20c04>
   323bc:	b	323ec <__assert_fail@plt+0x20fb4>
   323c0:	mov	r9, #0
   323c4:	b	32424 <__assert_fail@plt+0x20fec>
   323c8:	cmp	r1, #17
   323cc:	bne	324c0 <__assert_fail@plt+0x21088>
   323d0:	str	r6, [sp, #128]	; 0x80
   323d4:	ldr	r1, [sp, #60]	; 0x3c
   323d8:	ldr	r6, [sp, #144]	; 0x90
   323dc:	str	r5, [sp, #96]	; 0x60
   323e0:	mov	r5, ip
   323e4:	str	r3, [sp, #136]	; 0x88
   323e8:	str	r2, [sp, #132]	; 0x84
   323ec:	ldr	r0, [sp, #132]	; 0x84
   323f0:	str	r1, [fp, #-1072]	; 0xfffffbd0
   323f4:	str	r5, [fp, #-1076]	; 0xfffffbcc
   323f8:	str	r8, [fp, #-1068]	; 0xfffffbd4
   323fc:	ldr	r8, [sp, #24]
   32400:	ldr	r7, [sp, #12]
   32404:	str	r0, [fp, #-1064]	; 0xfffffbd8
   32408:	ldr	r0, [sp, #128]	; 0x80
   3240c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   32410:	ldr	r0, [sp, #136]	; 0x88
   32414:	str	r0, [fp, #-1056]	; 0xfffffbe0
   32418:	ldr	r0, [sp, #96]	; 0x60
   3241c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   32420:	str	lr, [fp, #-1080]	; 0xfffffbc8
   32424:	sub	lr, fp, #1024	; 0x400
   32428:	cmp	r9, r6
   3242c:	sub	r1, lr, #56	; 0x38
   32430:	bne	324ac <__assert_fail@plt+0x21074>
   32434:	mov	r0, r1
   32438:	sub	lr, fp, #6144	; 0x1800
   3243c:	mov	r2, #1
   32440:	mov	sl, r7
   32444:	vld1.32	{d16-d17}, [r0]!
   32448:	sub	r3, lr, #104	; 0x68
   3244c:	vld1.64	{d18-d19}, [r0]
   32450:	add	r0, sp, #152	; 0x98
   32454:	add	r0, r0, r9, lsl #5
   32458:	vst1.32	{d16-d17}, [r0]!
   3245c:	vst1.32	{d18-d19}, [r0]
   32460:	ldr	r0, [r8, #12]
   32464:	ldr	r6, [r0, r7, lsl #2]
   32468:	add	r0, r9, r9, lsl #1
   3246c:	mov	r7, r1
   32470:	add	r4, r3, r0, lsl #2
   32474:	str	r2, [r3, r0, lsl #2]
   32478:	mov	r0, #4
   3247c:	mov	r5, r4
   32480:	str	r2, [r5, #4]!
   32484:	bl	3554c <__assert_fail@plt+0x24114>
   32488:	cmp	r0, #0
   3248c:	str	r0, [r4, #8]
   32490:	beq	32ae4 <__assert_fail@plt+0x216ac>
   32494:	str	r6, [r0]
   32498:	mov	r0, r7
   3249c:	add	r6, r9, #1
   324a0:	mov	r7, sl
   324a4:	vst1.64	{d8-d9}, [r0]!
   324a8:	vst1.64	{d8-d9}, [r0]
   324ac:	ldr	r0, [r8, #8]
   324b0:	add	r7, r7, #1
   324b4:	cmp	r7, r0
   324b8:	blt	31b6c <__assert_fail@plt+0x20734>
   324bc:	b	324fc <__assert_fail@plt+0x210c4>
   324c0:	ldr	r1, [sp, #60]	; 0x3c
   324c4:	ldr	r7, [sp, #12]
   324c8:	cmp	r0, #0
   324cc:	str	r1, [fp, #-1072]	; 0xfffffbd0
   324d0:	str	ip, [fp, #-1076]	; 0xfffffbcc
   324d4:	str	r8, [fp, #-1068]	; 0xfffffbd4
   324d8:	str	r2, [fp, #-1064]	; 0xfffffbd8
   324dc:	str	r6, [fp, #-1060]	; 0xfffffbdc
   324e0:	ldr	r8, [sp, #24]
   324e4:	ldr	r6, [sp, #144]	; 0x90
   324e8:	str	r3, [fp, #-1056]	; 0xfffffbe0
   324ec:	str	r5, [fp, #-1052]	; 0xfffffbe4
   324f0:	str	lr, [fp, #-1080]	; 0xfffffbc8
   324f4:	bne	324ac <__assert_fail@plt+0x21074>
   324f8:	b	32504 <__assert_fail@plt+0x210cc>
   324fc:	cmp	r6, #0
   32500:	ble	32ab0 <__assert_fail@plt+0x21678>
   32504:	mov	r0, #0
   32508:	str	r0, [fp, #-3136]	; 0xfffff3c0
   3250c:	add	r0, r6, #1
   32510:	str	r0, [fp, #-3140]	; 0xfffff3bc
   32514:	lsl	r0, r0, #2
   32518:	bl	3554c <__assert_fail@plt+0x24114>
   3251c:	cmp	r0, #0
   32520:	str	r0, [fp, #-3132]	; 0xfffff3c4
   32524:	mov	r0, #0
   32528:	movweq	r0, #12
   3252c:	str	r0, [fp, #-56]	; 0xffffffc8
   32530:	beq	32afc <__assert_fail@plt+0x216c4>
   32534:	sub	lr, fp, #3072	; 0xc00
   32538:	vmov.i32	q8, #0	; 0x00000000
   3253c:	mov	r1, #0
   32540:	mov	r2, #0
   32544:	mov	r4, #0
   32548:	mov	r3, #0
   3254c:	mov	r8, #0
   32550:	sub	r0, lr, #104	; 0x68
   32554:	sub	lr, fp, #3072	; 0xc00
   32558:	vst1.64	{d16-d17}, [r0]!
   3255c:	sub	r5, lr, #68	; 0x44
   32560:	vst1.64	{d16-d17}, [r0]
   32564:	mov	r0, #0
   32568:	str	r0, [sp, #140]	; 0x8c
   3256c:	mov	r0, #0
   32570:	str	r0, [sp, #136]	; 0x88
   32574:	mov	r0, #0
   32578:	str	r0, [sp, #132]	; 0x84
   3257c:	mov	r0, #0
   32580:	str	r0, [sp, #128]	; 0x80
   32584:	mov	r0, #0
   32588:	str	r0, [sp, #144]	; 0x90
   3258c:	mov	r0, #0
   32590:	str	r0, [sp, #112]	; 0x70
   32594:	mov	r0, #0
   32598:	sub	lr, fp, #6144	; 0x1800
   3259c:	str	r2, [sp, #124]	; 0x7c
   325a0:	str	r3, [sp, #116]	; 0x74
   325a4:	str	r4, [sp, #120]	; 0x78
   325a8:	str	r0, [fp, #-3136]	; 0xfffff3c0
   325ac:	add	r0, r8, r8, lsl #1
   325b0:	sub	r2, lr, #104	; 0x68
   325b4:	add	r0, r2, r0, lsl #2
   325b8:	ldr	r7, [r0, #4]
   325bc:	cmp	r7, #1
   325c0:	blt	32618 <__assert_fail@plt+0x211e0>
   325c4:	ldr	r4, [r0, #8]
   325c8:	mov	r9, #0
   325cc:	ldr	r2, [sp, #148]	; 0x94
   325d0:	ldr	r0, [r4, r9, lsl #2]
   325d4:	ldr	r2, [r2, #12]
   325d8:	ldr	r0, [r2, r0, lsl #2]
   325dc:	cmn	r0, #1
   325e0:	beq	32608 <__assert_fail@plt+0x211d0>
   325e4:	ldr	r1, [sp, #148]	; 0x94
   325e8:	add	r0, r0, r0, lsl #1
   325ec:	ldr	r1, [r1, #24]
   325f0:	add	r1, r1, r0, lsl #2
   325f4:	mov	r0, r5
   325f8:	bl	2dbd0 <__assert_fail@plt+0x1c798>
   325fc:	mov	r1, #0
   32600:	cmp	r0, #0
   32604:	bne	3293c <__assert_fail@plt+0x21504>
   32608:	add	r9, r9, #1
   3260c:	cmp	r9, r7
   32610:	blt	325cc <__assert_fail@plt+0x21194>
   32614:	str	r1, [fp, #-56]	; 0xffffffc8
   32618:	ldr	r1, [sp, #148]	; 0x94
   3261c:	sub	r0, fp, #56	; 0x38
   32620:	mov	r2, r5
   32624:	mov	r3, #0
   32628:	bl	2de9c <__assert_fail@plt+0x1ca64>
   3262c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   32630:	mov	r7, r0
   32634:	sub	lr, fp, #1024	; 0x400
   32638:	add	r4, sp, #152	; 0x98
   3263c:	sub	r0, lr, #56	; 0x38
   32640:	cmp	r7, #0
   32644:	str	r7, [r0, r8, lsl #2]
   32648:	bne	32654 <__assert_fail@plt+0x2121c>
   3264c:	cmp	r1, #0
   32650:	bne	329f4 <__assert_fail@plt+0x215bc>
   32654:	ldrsb	r0, [r7, #52]	; 0x34
   32658:	cmn	r0, #1
   3265c:	ble	3267c <__assert_fail@plt+0x21244>
   32660:	sub	lr, fp, #3072	; 0xc00
   32664:	sub	r0, lr, #56	; 0x38
   32668:	sub	lr, fp, #2048	; 0x800
   3266c:	str	r7, [r0, r8, lsl #2]
   32670:	sub	r0, lr, #56	; 0x38
   32674:	str	r7, [r0, r8, lsl #2]
   32678:	b	3270c <__assert_fail@plt+0x212d4>
   3267c:	ldr	r1, [sp, #148]	; 0x94
   32680:	sub	r0, fp, #56	; 0x38
   32684:	mov	r2, r5
   32688:	mov	r3, #1
   3268c:	bl	2de9c <__assert_fail@plt+0x1ca64>
   32690:	sub	lr, fp, #2048	; 0x800
   32694:	cmp	r0, #0
   32698:	sub	r1, lr, #56	; 0x38
   3269c:	str	r0, [r1, r8, lsl #2]
   326a0:	bne	326b0 <__assert_fail@plt+0x21278>
   326a4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   326a8:	cmp	r1, #0
   326ac:	bne	329f4 <__assert_fail@plt+0x215bc>
   326b0:	cmp	r7, r0
   326b4:	beq	326d8 <__assert_fail@plt+0x212a0>
   326b8:	ldr	r0, [sp, #148]	; 0x94
   326bc:	ldr	r1, [sp, #112]	; 0x70
   326c0:	ldr	r0, [r0, #92]	; 0x5c
   326c4:	cmp	r0, #1
   326c8:	mov	r0, #0
   326cc:	movwgt	r0, #1
   326d0:	orr	r1, r1, r0
   326d4:	str	r1, [sp, #112]	; 0x70
   326d8:	ldr	r1, [sp, #148]	; 0x94
   326dc:	sub	r0, fp, #56	; 0x38
   326e0:	mov	r2, r5
   326e4:	mov	r3, #2
   326e8:	bl	2de9c <__assert_fail@plt+0x1ca64>
   326ec:	sub	lr, fp, #3072	; 0xc00
   326f0:	cmp	r0, #0
   326f4:	sub	r1, lr, #56	; 0x38
   326f8:	str	r0, [r1, r8, lsl #2]
   326fc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   32700:	bne	3270c <__assert_fail@plt+0x212d4>
   32704:	cmp	r1, #0
   32708:	bne	329f4 <__assert_fail@plt+0x215bc>
   3270c:	ldr	r0, [r4, r8, lsl #5]
   32710:	ldr	r2, [sp, #144]	; 0x90
   32714:	mov	r9, r6
   32718:	orr	r2, r2, r0
   3271c:	add	r0, r4, r8, lsl #5
   32720:	mov	r4, r5
   32724:	add	r8, r8, #1
   32728:	str	r2, [sp, #144]	; 0x90
   3272c:	cmp	r8, r9
   32730:	ldmib	r0, {ip, lr}
   32734:	ldr	r7, [r0, #12]
   32738:	ldr	r3, [r0, #16]
   3273c:	ldr	r5, [r0, #20]
   32740:	ldr	r6, [r0, #24]
   32744:	ldr	r0, [r0, #28]
   32748:	ldr	r2, [sp, #140]	; 0x8c
   3274c:	orr	r2, r2, r0
   32750:	mov	r0, r9
   32754:	str	r2, [sp, #140]	; 0x8c
   32758:	ldr	r2, [sp, #124]	; 0x7c
   3275c:	orr	r2, r2, r6
   32760:	ldr	r6, [sp, #136]	; 0x88
   32764:	orr	r6, r6, r5
   32768:	mov	r5, r4
   3276c:	ldr	r4, [sp, #120]	; 0x78
   32770:	str	r6, [sp, #136]	; 0x88
   32774:	mov	r6, r9
   32778:	orr	r4, r4, r3
   3277c:	ldr	r3, [sp, #132]	; 0x84
   32780:	orr	r3, r3, r7
   32784:	str	r3, [sp, #132]	; 0x84
   32788:	ldr	r3, [sp, #128]	; 0x80
   3278c:	orr	r3, r3, lr
   32790:	str	r3, [sp, #128]	; 0x80
   32794:	ldr	r3, [sp, #116]	; 0x74
   32798:	orr	r3, r3, ip
   3279c:	blt	32594 <__assert_fail@plt+0x2115c>
   327a0:	ldr	r7, [sp, #144]	; 0x90
   327a4:	ldr	r0, [sp, #128]	; 0x80
   327a8:	str	r3, [fp, #-3172]	; 0xfffff39c
   327ac:	ldr	sl, [sp, #112]	; 0x70
   327b0:	str	r7, [fp, #-3176]	; 0xfffff398
   327b4:	str	r0, [fp, #-3168]	; 0xfffff3a0
   327b8:	ldr	r0, [sp, #132]	; 0x84
   327bc:	tst	sl, #1
   327c0:	str	r0, [fp, #-3164]	; 0xfffff3a4
   327c4:	ldr	r0, [sp, #136]	; 0x88
   327c8:	str	r4, [fp, #-3160]	; 0xfffff3a8
   327cc:	str	r0, [fp, #-3156]	; 0xfffff3ac
   327d0:	ldr	r0, [sp, #140]	; 0x8c
   327d4:	str	r2, [fp, #-3152]	; 0xfffff3b0
   327d8:	str	r0, [fp, #-3148]	; 0xfffff3b4
   327dc:	mov	r0, #4
   327e0:	bne	32b08 <__assert_fail@plt+0x216d0>
   327e4:	mov	r1, #256	; 0x100
   327e8:	bl	354f8 <__assert_fail@plt+0x240c0>
   327ec:	ldr	r1, [sp, #24]
   327f0:	sub	lr, fp, #3072	; 0xc00
   327f4:	cmp	r0, #0
   327f8:	sub	r8, lr, #104	; 0x68
   327fc:	str	r0, [r1, #44]	; 0x2c
   32800:	beq	32980 <__assert_fail@plt+0x21548>
   32804:	mov	r1, #0
   32808:	mov	r3, r7
   3280c:	mov	r2, #0
   32810:	add	r4, sp, #152	; 0x98
   32814:	cmp	r3, #0
   32818:	beq	328b8 <__assert_fail@plt+0x21480>
   3281c:	ldr	r7, [sp, #148]	; 0x94
   32820:	lsl	r6, r2, #5
   32824:	mov	r5, #1
   32828:	add	r7, r7, r2, lsl #2
   3282c:	add	ip, r7, #96	; 0x60
   32830:	b	32884 <__assert_fail@plt+0x2144c>
   32834:	mov	lr, #0
   32838:	str	sl, [sp, #112]	; 0x70
   3283c:	ldr	r7, [r4, lr, lsl #3]
   32840:	add	lr, lr, #4
   32844:	tst	r7, r5
   32848:	beq	3283c <__assert_fail@plt+0x21404>
   3284c:	ldr	r7, [ip]
   32850:	mov	sl, r4
   32854:	sub	r4, fp, #1024	; 0x400
   32858:	sub	r4, r4, #56	; 0x38
   3285c:	tst	r7, r5
   32860:	sub	r7, fp, #2048	; 0x800
   32864:	sub	r7, r7, #56	; 0x38
   32868:	moveq	r7, r4
   3286c:	mov	r4, sl
   32870:	ldr	sl, [sp, #112]	; 0x70
   32874:	add	r7, r7, lr
   32878:	ldr	r7, [r7, #-4]
   3287c:	str	r7, [r0, r6, lsl #2]
   32880:	b	3288c <__assert_fail@plt+0x21454>
   32884:	tst	r3, #1
   32888:	bne	32834 <__assert_fail@plt+0x213fc>
   3288c:	lsr	r7, r3, #1
   32890:	cmp	r1, r3, lsr #1
   32894:	add	r6, r6, #1
   32898:	lsl	r5, r5, #1
   3289c:	mov	r3, r7
   328a0:	bne	32884 <__assert_fail@plt+0x2144c>
   328a4:	b	328b8 <__assert_fail@plt+0x21480>
   328a8:	ldr	r3, [r8, r2, lsl #2]
   328ac:	add	r4, r4, #4
   328b0:	cmp	r3, #0
   328b4:	bne	3281c <__assert_fail@plt+0x213e4>
   328b8:	add	r2, r2, #1
   328bc:	cmp	r2, #8
   328c0:	bne	328a8 <__assert_fail@plt+0x21470>
   328c4:	ldr	r7, [sp, #144]	; 0x90
   328c8:	tst	r7, #1024	; 0x400
   328cc:	beq	32910 <__assert_fail@plt+0x214d8>
   328d0:	mov	r1, #0
   328d4:	add	r2, sp, #152	; 0x98
   328d8:	add	r3, r2, r1, lsl #5
   328dc:	ldrb	r3, [r3, #1]
   328e0:	tst	r3, #4
   328e4:	bne	328f8 <__assert_fail@plt+0x214c0>
   328e8:	add	r1, r1, #1
   328ec:	cmp	r1, r9
   328f0:	blt	328d8 <__assert_fail@plt+0x214a0>
   328f4:	b	32910 <__assert_fail@plt+0x214d8>
   328f8:	sub	lr, fp, #3072	; 0xc00
   328fc:	tst	sl, #1
   32900:	sub	r2, lr, #56	; 0x38
   32904:	ldr	r1, [r2, r1, lsl #2]
   32908:	str	r1, [r0, #40]	; 0x28
   3290c:	strne	r1, [r0, #1064]	; 0x428
   32910:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   32914:	bl	1386c <__assert_fail@plt+0x2434>
   32918:	sub	lr, fp, #6144	; 0x1800
   3291c:	sub	r0, lr, #104	; 0x68
   32920:	add	r4, r0, #8
   32924:	ldr	r0, [r4], #12
   32928:	bl	1386c <__assert_fail@plt+0x2434>
   3292c:	subs	r9, r9, #1
   32930:	bne	32924 <__assert_fail@plt+0x214ec>
   32934:	mov	r0, #1
   32938:	b	32ad4 <__assert_fail@plt+0x2169c>
   3293c:	ldr	r1, [sp, #116]	; 0x74
   32940:	str	r0, [fp, #-56]	; 0xffffffc8
   32944:	str	r1, [fp, #-3172]	; 0xfffff39c
   32948:	ldr	r1, [sp, #144]	; 0x90
   3294c:	str	r1, [fp, #-3176]	; 0xfffff398
   32950:	ldr	r1, [sp, #128]	; 0x80
   32954:	str	r1, [fp, #-3168]	; 0xfffff3a0
   32958:	ldr	r1, [sp, #132]	; 0x84
   3295c:	str	r1, [fp, #-3164]	; 0xfffff3a4
   32960:	ldr	r1, [sp, #120]	; 0x78
   32964:	str	r1, [fp, #-3160]	; 0xfffff3a8
   32968:	ldr	r1, [sp, #136]	; 0x88
   3296c:	str	r1, [fp, #-3156]	; 0xfffff3ac
   32970:	ldr	r1, [sp, #124]	; 0x7c
   32974:	str	r1, [fp, #-3152]	; 0xfffff3b0
   32978:	ldr	r1, [sp, #140]	; 0x8c
   3297c:	str	r1, [fp, #-3148]	; 0xfffff3b4
   32980:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   32984:	bl	1386c <__assert_fail@plt+0x2434>
   32988:	cmp	r6, #1
   3298c:	blt	329ac <__assert_fail@plt+0x21574>
   32990:	sub	lr, fp, #6144	; 0x1800
   32994:	sub	r0, lr, #104	; 0x68
   32998:	add	r4, r0, #8
   3299c:	ldr	r0, [r4], #12
   329a0:	bl	1386c <__assert_fail@plt+0x2434>
   329a4:	subs	r6, r6, #1
   329a8:	bne	3299c <__assert_fail@plt+0x21564>
   329ac:	mov	r0, #0
   329b0:	b	32ad4 <__assert_fail@plt+0x2169c>
   329b4:	ldr	r0, [sp, #52]	; 0x34
   329b8:	str	r6, [fp, #-1072]	; 0xfffffbd0
   329bc:	str	r0, [fp, #-1076]	; 0xfffffbcc
   329c0:	ldr	r0, [sp, #48]	; 0x30
   329c4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   329c8:	ldr	r0, [sp, #44]	; 0x2c
   329cc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   329d0:	ldr	r0, [sp, #40]	; 0x28
   329d4:	str	r0, [fp, #-1060]	; 0xfffffbdc
   329d8:	ldr	r0, [sp, #36]	; 0x24
   329dc:	str	r0, [fp, #-1056]	; 0xfffffbe0
   329e0:	ldr	r0, [sp, #32]
   329e4:	str	r0, [fp, #-1052]	; 0xfffffbe4
   329e8:	ldr	r0, [sp, #56]	; 0x38
   329ec:	str	r0, [fp, #-1080]	; 0xfffffbc8
   329f0:	b	32a80 <__assert_fail@plt+0x21648>
   329f4:	ldr	r0, [sp, #116]	; 0x74
   329f8:	str	r0, [fp, #-3172]	; 0xfffff39c
   329fc:	ldr	r0, [sp, #144]	; 0x90
   32a00:	str	r0, [fp, #-3176]	; 0xfffff398
   32a04:	ldr	r0, [sp, #128]	; 0x80
   32a08:	str	r0, [fp, #-3168]	; 0xfffff3a0
   32a0c:	ldr	r0, [sp, #132]	; 0x84
   32a10:	str	r0, [fp, #-3164]	; 0xfffff3a4
   32a14:	ldr	r0, [sp, #120]	; 0x78
   32a18:	str	r0, [fp, #-3160]	; 0xfffff3a8
   32a1c:	ldr	r0, [sp, #136]	; 0x88
   32a20:	str	r0, [fp, #-3156]	; 0xfffff3ac
   32a24:	ldr	r0, [sp, #124]	; 0x7c
   32a28:	str	r0, [fp, #-3152]	; 0xfffff3b0
   32a2c:	ldr	r0, [sp, #140]	; 0x8c
   32a30:	str	r0, [fp, #-3148]	; 0xfffff3b4
   32a34:	b	32980 <__assert_fail@plt+0x21548>
   32a38:	ldr	r0, [sp, #52]	; 0x34
   32a3c:	str	r6, [fp, #-1072]	; 0xfffffbd0
   32a40:	str	r0, [fp, #-1076]	; 0xfffffbcc
   32a44:	ldr	r0, [sp, #48]	; 0x30
   32a48:	str	r0, [fp, #-1068]	; 0xfffffbd4
   32a4c:	ldr	r0, [sp, #44]	; 0x2c
   32a50:	str	r0, [fp, #-1064]	; 0xfffffbd8
   32a54:	ldr	r0, [sp, #40]	; 0x28
   32a58:	str	r0, [fp, #-1060]	; 0xfffffbdc
   32a5c:	ldr	r0, [sp, #36]	; 0x24
   32a60:	str	r0, [fp, #-1056]	; 0xfffffbe0
   32a64:	ldr	r0, [sp, #32]
   32a68:	str	r0, [fp, #-1052]	; 0xfffffbe4
   32a6c:	ldr	r0, [sp, #56]	; 0x38
   32a70:	str	r0, [fp, #-1080]	; 0xfffffbc8
   32a74:	mov	r0, #0
   32a78:	str	r0, [r8]
   32a7c:	str	r0, [r5]
   32a80:	ldr	r8, [sp, #24]
   32a84:	ldr	r9, [sp, #144]	; 0x90
   32a88:	cmp	r9, #1
   32a8c:	blt	32aac <__assert_fail@plt+0x21674>
   32a90:	sub	lr, fp, #6144	; 0x1800
   32a94:	sub	r0, lr, #104	; 0x68
   32a98:	add	r4, r0, #8
   32a9c:	ldr	r0, [r4], #12
   32aa0:	bl	1386c <__assert_fail@plt+0x2434>
   32aa4:	subs	r9, r9, #1
   32aa8:	bne	32a9c <__assert_fail@plt+0x21664>
   32aac:	mvn	r6, #0
   32ab0:	mov	r0, #0
   32ab4:	cmp	r6, #0
   32ab8:	bne	32ad4 <__assert_fail@plt+0x2169c>
   32abc:	mov	r0, #4
   32ac0:	mov	r1, #256	; 0x100
   32ac4:	bl	354f8 <__assert_fail@plt+0x240c0>
   32ac8:	cmp	r0, #0
   32acc:	str	r0, [r8, #44]	; 0x2c
   32ad0:	movwne	r0, #1
   32ad4:	sub	sp, fp, #48	; 0x30
   32ad8:	vpop	{d8-d9}
   32adc:	add	sp, sp, #4
   32ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ae4:	mov	r0, #0
   32ae8:	str	r0, [r5]
   32aec:	str	r0, [r4]
   32af0:	cmp	r9, #1
   32af4:	bge	32a90 <__assert_fail@plt+0x21658>
   32af8:	b	32aac <__assert_fail@plt+0x21674>
   32afc:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   32b00:	bl	1386c <__assert_fail@plt+0x2434>
   32b04:	b	32990 <__assert_fail@plt+0x21558>
   32b08:	mov	r1, #512	; 0x200
   32b0c:	bl	354f8 <__assert_fail@plt+0x240c0>
   32b10:	ldr	r1, [sp, #24]
   32b14:	cmp	r0, #0
   32b18:	str	r0, [r1, #48]	; 0x30
   32b1c:	beq	32980 <__assert_fail@plt+0x21548>
   32b20:	sub	lr, fp, #1024	; 0x400
   32b24:	mov	r3, #0
   32b28:	add	r8, sp, #152	; 0x98
   32b2c:	mov	r5, r7
   32b30:	mov	r6, #0
   32b34:	sub	r1, lr, #56	; 0x38
   32b38:	sub	lr, r1, #4
   32b3c:	sub	r1, fp, #2048	; 0x800
   32b40:	sub	r1, r1, #56	; 0x38
   32b44:	sub	ip, r1, #4
   32b48:	cmp	r5, #0
   32b4c:	beq	32be0 <__assert_fail@plt+0x217a8>
   32b50:	lsl	r4, r6, #5
   32b54:	mov	r1, #1
   32b58:	b	32ba4 <__assert_fail@plt+0x2176c>
   32b5c:	mov	r2, r8
   32b60:	str	lr, [sp, #148]	; 0x94
   32b64:	mov	sl, lr
   32b68:	mov	lr, ip
   32b6c:	ldr	r7, [r2], #32
   32b70:	add	sl, sl, #4
   32b74:	add	lr, lr, #4
   32b78:	tst	r7, r1
   32b7c:	beq	32b6c <__assert_fail@plt+0x21734>
   32b80:	ldr	r2, [sl]
   32b84:	mov	r7, r0
   32b88:	str	r2, [r7, r4, lsl #2]!
   32b8c:	ldr	r2, [lr]
   32b90:	ldr	sl, [sp, #112]	; 0x70
   32b94:	ldr	lr, [sp, #148]	; 0x94
   32b98:	str	r2, [r7, #1024]	; 0x400
   32b9c:	ldr	r7, [sp, #144]	; 0x90
   32ba0:	b	32bac <__assert_fail@plt+0x21774>
   32ba4:	tst	r5, #1
   32ba8:	bne	32b5c <__assert_fail@plt+0x21724>
   32bac:	lsr	r2, r5, #1
   32bb0:	cmp	r3, r5, lsr #1
   32bb4:	add	r4, r4, #1
   32bb8:	lsl	r1, r1, #1
   32bbc:	mov	r5, r2
   32bc0:	bne	32ba4 <__assert_fail@plt+0x2176c>
   32bc4:	b	32be0 <__assert_fail@plt+0x217a8>
   32bc8:	sub	r1, fp, #3072	; 0xc00
   32bcc:	add	r8, r8, #4
   32bd0:	sub	r1, r1, #104	; 0x68
   32bd4:	ldr	r5, [r1, r6, lsl #2]
   32bd8:	cmp	r5, #0
   32bdc:	bne	32b50 <__assert_fail@plt+0x21718>
   32be0:	add	r6, r6, #1
   32be4:	cmp	r6, #8
   32be8:	bne	32bc8 <__assert_fail@plt+0x21790>
   32bec:	b	328c8 <__assert_fail@plt+0x21490>
   32bf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32bf4:	add	fp, sp, #28
   32bf8:	sub	sp, sp, #52	; 0x34
   32bfc:	ldr	r4, [r1, #8]
   32c00:	ldr	r8, [r1, #12]
   32c04:	mov	r6, r0
   32c08:	mov	r0, #1
   32c0c:	mov	r5, r1
   32c10:	str	r0, [sp, #44]	; 0x2c
   32c14:	str	r0, [sp, #40]	; 0x28
   32c18:	mov	r0, #4
   32c1c:	bl	3554c <__assert_fail@plt+0x24114>
   32c20:	cmp	r0, #0
   32c24:	str	r0, [sp, #48]	; 0x30
   32c28:	beq	33024 <__assert_fail@plt+0x21bec>
   32c2c:	str	r4, [r0]
   32c30:	add	r3, sp, #40	; 0x28
   32c34:	mov	r0, r6
   32c38:	mov	r1, r5
   32c3c:	mov	r2, r8
   32c40:	str	r6, [sp, #24]
   32c44:	bl	33040 <__assert_fail@plt+0x21c08>
   32c48:	cmp	r0, #0
   32c4c:	bne	32fdc <__assert_fail@plt+0x21ba4>
   32c50:	add	r0, r5, #16
   32c54:	mov	r1, #0
   32c58:	str	r5, [sp, #16]
   32c5c:	str	r0, [sp, #20]
   32c60:	cmp	r8, #1
   32c64:	blt	32fe4 <__assert_fail@plt+0x21bac>
   32c68:	ldr	r0, [r5]
   32c6c:	ldr	r7, [sp, #24]
   32c70:	ldr	r2, [r0, r8, lsl #2]
   32c74:	cmp	r2, #0
   32c78:	mov	r2, #0
   32c7c:	addeq	r2, r1, #1
   32c80:	ldr	r1, [r7, #120]	; 0x78
   32c84:	cmp	r2, r1
   32c88:	bgt	32fec <__assert_fail@plt+0x21bb4>
   32c8c:	mov	r0, #0
   32c90:	str	r8, [sp, #28]
   32c94:	sub	r8, r8, #1
   32c98:	str	r2, [sp, #12]
   32c9c:	str	r0, [sp, #44]	; 0x2c
   32ca0:	ldr	r0, [r7, #100]	; 0x64
   32ca4:	ldr	r6, [r0, r8, lsl #2]
   32ca8:	cmp	r6, #0
   32cac:	beq	32fbc <__assert_fail@plt+0x21b84>
   32cb0:	ldr	r0, [r6, #20]
   32cb4:	cmp	r0, #1
   32cb8:	blt	32fbc <__assert_fail@plt+0x21b84>
   32cbc:	ldr	r0, [r7, #84]	; 0x54
   32cc0:	mov	r9, #0
   32cc4:	str	r6, [sp, #32]
   32cc8:	str	r0, [sp, #36]	; 0x24
   32ccc:	b	32d80 <__assert_fail@plt+0x21948>
   32cd0:	cmp	r2, r1
   32cd4:	bne	32d00 <__assert_fail@plt+0x218c8>
   32cd8:	lsl	r0, r2, #1
   32cdc:	lsl	r1, r2, #3
   32ce0:	str	r0, [sp, #40]	; 0x28
   32ce4:	ldr	r0, [sp, #48]	; 0x30
   32ce8:	bl	3557c <__assert_fail@plt+0x24144>
   32cec:	cmp	r0, #0
   32cf0:	beq	33038 <__assert_fail@plt+0x21c00>
   32cf4:	str	r0, [sp, #48]	; 0x30
   32cf8:	ldr	r1, [sp, #44]	; 0x2c
   32cfc:	b	32d04 <__assert_fail@plt+0x218cc>
   32d00:	ldr	r0, [sp, #48]	; 0x30
   32d04:	ldr	r2, [r0]
   32d08:	cmp	r2, sl
   32d0c:	ble	32d48 <__assert_fail@plt+0x21910>
   32d10:	cmp	r1, #1
   32d14:	blt	32d78 <__assert_fail@plt+0x21940>
   32d18:	add	r2, r0, r1, lsl #2
   32d1c:	add	r1, r1, #1
   32d20:	mov	r3, r2
   32d24:	ldr	r7, [r3, #-4]!
   32d28:	sub	r1, r1, #1
   32d2c:	cmp	r1, #1
   32d30:	str	r7, [r2]
   32d34:	mov	r2, r3
   32d38:	bgt	32d24 <__assert_fail@plt+0x218ec>
   32d3c:	ldr	r7, [sp, #24]
   32d40:	sub	r1, r1, #1
   32d44:	b	32d78 <__assert_fail@plt+0x21940>
   32d48:	add	r2, r0, r1, lsl #2
   32d4c:	ldr	r3, [r2, #-4]
   32d50:	cmp	r3, sl
   32d54:	ble	32d78 <__assert_fail@plt+0x21940>
   32d58:	sub	r1, r1, #2
   32d5c:	str	r3, [r2]
   32d60:	sub	r1, r1, #1
   32d64:	ldr	r3, [r2, #-8]
   32d68:	sub	r2, r2, #4
   32d6c:	cmp	r3, sl
   32d70:	bgt	32d5c <__assert_fail@plt+0x21924>
   32d74:	add	r1, r1, #2
   32d78:	str	sl, [r0, r1, lsl #2]
   32d7c:	b	32f78 <__assert_fail@plt+0x21b40>
   32d80:	ldr	r0, [r6, #24]
   32d84:	ldr	sl, [r0, r9, lsl #2]
   32d88:	ldr	r0, [sp, #36]	; 0x24
   32d8c:	ldr	r0, [r0]
   32d90:	add	r0, r0, sl, lsl #3
   32d94:	ldrb	r0, [r0, #6]
   32d98:	tst	r0, #16
   32d9c:	bne	32e40 <__assert_fail@plt+0x21a08>
   32da0:	ldr	r0, [sp, #36]	; 0x24
   32da4:	mov	r2, r8
   32da8:	ldr	r0, [r0]
   32dac:	add	r1, r0, sl, lsl #3
   32db0:	mov	r0, r7
   32db4:	bl	318e4 <__assert_fail@plt+0x204ac>
   32db8:	cmp	r0, #0
   32dbc:	beq	32fac <__assert_fail@plt+0x21b74>
   32dc0:	ldr	r0, [r5]
   32dc4:	ldr	r1, [sp, #28]
   32dc8:	ldr	r0, [r0, r1, lsl #2]
   32dcc:	cmp	r0, #0
   32dd0:	beq	32fac <__assert_fail@plt+0x21b74>
   32dd4:	ldr	r2, [r0, #8]
   32dd8:	cmp	r2, #1
   32ddc:	blt	32fac <__assert_fail@plt+0x21b74>
   32de0:	ldr	r1, [sp, #36]	; 0x24
   32de4:	ldr	r0, [r0, #12]
   32de8:	subs	r3, r2, #1
   32dec:	mov	r2, #0
   32df0:	ldr	r1, [r1, #12]
   32df4:	ldr	r1, [r1, sl, lsl #2]
   32df8:	beq	32e20 <__assert_fail@plt+0x219e8>
   32dfc:	mov	r5, #1
   32e00:	add	r7, r2, r3
   32e04:	lsr	r6, r7, #1
   32e08:	ldr	r4, [r0, r6, lsl #2]
   32e0c:	cmp	r4, r1
   32e10:	movge	r3, r6
   32e14:	addlt	r2, r5, r7, lsr #1
   32e18:	cmp	r2, r3
   32e1c:	bcc	32e00 <__assert_fail@plt+0x219c8>
   32e20:	ldr	r2, [r0, r2, lsl #2]
   32e24:	ldr	r5, [sp, #16]
   32e28:	ldr	r7, [sp, #24]
   32e2c:	ldr	r6, [sp, #32]
   32e30:	mov	r0, #1
   32e34:	cmp	r2, r1
   32e38:	beq	32f20 <__assert_fail@plt+0x21ae8>
   32e3c:	b	32fac <__assert_fail@plt+0x21b74>
   32e40:	ldr	r4, [r7, #84]	; 0x54
   32e44:	mov	r6, r5
   32e48:	ldr	r5, [r5, #12]
   32e4c:	mov	r1, sl
   32e50:	mov	r2, r7
   32e54:	mov	r3, r8
   32e58:	mov	r0, r4
   32e5c:	bl	315f0 <__assert_fail@plt+0x201b8>
   32e60:	cmp	r0, #1
   32e64:	blt	32e88 <__assert_fail@plt+0x21a50>
   32e68:	add	r1, r0, r8
   32e6c:	mov	r3, r8
   32e70:	cmp	r1, r5
   32e74:	ble	32e9c <__assert_fail@plt+0x21a64>
   32e78:	mov	r5, r6
   32e7c:	ldr	r6, [sp, #32]
   32e80:	mov	r8, r3
   32e84:	b	32f20 <__assert_fail@plt+0x21ae8>
   32e88:	mov	r5, r6
   32e8c:	ldr	r6, [sp, #32]
   32e90:	cmp	r0, #0
   32e94:	bne	32f20 <__assert_fail@plt+0x21ae8>
   32e98:	b	32da0 <__assert_fail@plt+0x21968>
   32e9c:	ldr	r2, [r6]
   32ea0:	mov	r5, r6
   32ea4:	ldr	r6, [sp, #32]
   32ea8:	mov	r8, r3
   32eac:	ldr	r2, [r2, r1, lsl #2]
   32eb0:	cmp	r2, #0
   32eb4:	beq	32da0 <__assert_fail@plt+0x21968>
   32eb8:	ldr	r3, [r2, #8]
   32ebc:	cmp	r3, #1
   32ec0:	blt	32da0 <__assert_fail@plt+0x21968>
   32ec4:	ldr	r1, [r4, #12]
   32ec8:	ldr	r2, [r2, #12]
   32ecc:	subs	r4, r3, #1
   32ed0:	mov	r3, #0
   32ed4:	ldr	ip, [r1, sl, lsl #2]
   32ed8:	beq	32f00 <__assert_fail@plt+0x21ac8>
   32edc:	mov	r5, #1
   32ee0:	add	r6, r3, r4
   32ee4:	lsr	r7, r6, #1
   32ee8:	ldr	r1, [r2, r7, lsl #2]
   32eec:	cmp	r1, ip
   32ef0:	movge	r4, r7
   32ef4:	addlt	r3, r5, r6, lsr #1
   32ef8:	cmp	r3, r4
   32efc:	bcc	32ee0 <__assert_fail@plt+0x21aa8>
   32f00:	ldr	r5, [sp, #16]
   32f04:	ldr	r7, [sp, #24]
   32f08:	ldr	r6, [sp, #32]
   32f0c:	cmp	r0, #0
   32f10:	beq	32da0 <__assert_fail@plt+0x21968>
   32f14:	ldr	r1, [r2, r3, lsl #2]
   32f18:	cmp	r1, ip
   32f1c:	bne	32da0 <__assert_fail@plt+0x21968>
   32f20:	ldr	r1, [r5, #20]
   32f24:	cmp	r1, #0
   32f28:	beq	32f58 <__assert_fail@plt+0x21b20>
   32f2c:	ldr	r1, [sp, #36]	; 0x24
   32f30:	add	r3, r0, r8
   32f34:	mov	r0, r7
   32f38:	ldr	r1, [r1, #12]
   32f3c:	ldr	r2, [r1, sl, lsl #2]
   32f40:	ldr	r1, [sp, #20]
   32f44:	str	sl, [sp]
   32f48:	str	r8, [sp, #4]
   32f4c:	bl	34158 <__assert_fail@plt+0x22d20>
   32f50:	cmp	r0, #0
   32f54:	bne	32fac <__assert_fail@plt+0x21b74>
   32f58:	ldr	r2, [sp, #40]	; 0x28
   32f5c:	cmp	r2, #0
   32f60:	beq	32f88 <__assert_fail@plt+0x21b50>
   32f64:	ldr	r1, [sp, #44]	; 0x2c
   32f68:	cmp	r1, #0
   32f6c:	bne	32cd0 <__assert_fail@plt+0x21898>
   32f70:	ldr	r0, [sp, #48]	; 0x30
   32f74:	str	sl, [r0]
   32f78:	ldr	r0, [sp, #44]	; 0x2c
   32f7c:	add	r0, r0, #1
   32f80:	str	r0, [sp, #44]	; 0x2c
   32f84:	b	32fac <__assert_fail@plt+0x21b74>
   32f88:	mov	r0, #1
   32f8c:	str	r0, [sp, #44]	; 0x2c
   32f90:	str	r0, [sp, #40]	; 0x28
   32f94:	mov	r0, #4
   32f98:	bl	3554c <__assert_fail@plt+0x24114>
   32f9c:	cmp	r0, #0
   32fa0:	str	r0, [sp, #48]	; 0x30
   32fa4:	beq	33010 <__assert_fail@plt+0x21bd8>
   32fa8:	str	sl, [r0]
   32fac:	ldr	r0, [r6, #20]
   32fb0:	add	r9, r9, #1
   32fb4:	cmp	r9, r0
   32fb8:	blt	32d80 <__assert_fail@plt+0x21948>
   32fbc:	mov	r0, r7
   32fc0:	mov	r1, r5
   32fc4:	mov	r2, r8
   32fc8:	add	r3, sp, #40	; 0x28
   32fcc:	bl	33040 <__assert_fail@plt+0x21c08>
   32fd0:	ldr	r1, [sp, #12]
   32fd4:	cmp	r0, #0
   32fd8:	beq	32c60 <__assert_fail@plt+0x21828>
   32fdc:	mov	r7, r0
   32fe0:	b	32ffc <__assert_fail@plt+0x21bc4>
   32fe4:	mov	r7, #0
   32fe8:	b	32ffc <__assert_fail@plt+0x21bc4>
   32fec:	lsl	r2, r8, #2
   32ff0:	mov	r1, #0
   32ff4:	mov	r7, #0
   32ff8:	bl	1136c <memset@plt>
   32ffc:	ldr	r0, [sp, #48]	; 0x30
   33000:	bl	1386c <__assert_fail@plt+0x2434>
   33004:	mov	r0, r7
   33008:	sub	sp, fp, #28
   3300c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33010:	mov	r0, #0
   33014:	mov	r7, #12
   33018:	str	r0, [sp, #40]	; 0x28
   3301c:	str	r0, [sp, #44]	; 0x2c
   33020:	b	32ffc <__assert_fail@plt+0x21bc4>
   33024:	mov	r0, #0
   33028:	mov	r7, #12
   3302c:	str	r0, [sp, #40]	; 0x28
   33030:	str	r0, [sp, #44]	; 0x2c
   33034:	b	33004 <__assert_fail@plt+0x21bcc>
   33038:	mov	r7, #12
   3303c:	b	32ffc <__assert_fail@plt+0x21bc4>
   33040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33044:	add	fp, sp, #28
   33048:	sub	sp, sp, #132	; 0x84
   3304c:	mov	r9, r0
   33050:	ldr	r8, [r0, #84]	; 0x54
   33054:	mov	r0, #0
   33058:	mov	sl, r1
   3305c:	mov	r5, r2
   33060:	str	r0, [fp, #-76]	; 0xffffffb4
   33064:	str	r5, [sp, #68]	; 0x44
   33068:	ldr	r1, [r9, #100]	; 0x64
   3306c:	ldr	r2, [r1, r2, lsl #2]
   33070:	cmp	r2, #0
   33074:	mov	r1, r2
   33078:	addne	r1, r1, #4
   3307c:	str	r1, [sp, #80]	; 0x50
   33080:	ldr	r1, [r3, #4]
   33084:	cmp	r1, #0
   33088:	beq	33490 <__assert_fail@plt+0x22058>
   3308c:	mov	lr, r3
   33090:	cmp	r2, #0
   33094:	str	r2, [sp, #48]	; 0x30
   33098:	beq	3345c <__assert_fail@plt+0x22024>
   3309c:	mov	r0, #0
   330a0:	mov	r1, r8
   330a4:	mov	r2, lr
   330a8:	str	r8, [sp, #76]	; 0x4c
   330ac:	str	lr, [sp, #56]	; 0x38
   330b0:	str	r0, [fp, #-72]	; 0xffffffb8
   330b4:	sub	r0, fp, #72	; 0x48
   330b8:	bl	31360 <__assert_fail@plt+0x1ff28>
   330bc:	ldr	r8, [fp, #-72]	; 0xffffffb8
   330c0:	cmp	r8, #0
   330c4:	bne	33b64 <__assert_fail@plt+0x2272c>
   330c8:	mov	r5, r0
   330cc:	mov	r4, r0
   330d0:	ldr	r2, [sp, #56]	; 0x38
   330d4:	ldr	r0, [r5, #28]!
   330d8:	cmp	r0, #0
   330dc:	bne	33170 <__assert_fail@plt+0x21d38>
   330e0:	ldr	r0, [r2, #4]
   330e4:	mov	r6, #0
   330e8:	mov	r7, r2
   330ec:	str	r0, [r4, #28]
   330f0:	lsl	r0, r0, #2
   330f4:	str	r6, [r4, #32]
   330f8:	bl	3554c <__assert_fail@plt+0x24114>
   330fc:	cmp	r0, #0
   33100:	mov	r8, #12
   33104:	str	r0, [r4, #36]	; 0x24
   33108:	movweq	r6, #12
   3310c:	str	r6, [fp, #-72]	; 0xffffffb8
   33110:	beq	33b64 <__assert_fail@plt+0x2272c>
   33114:	ldr	r0, [r7, #4]
   33118:	mov	r2, r7
   3311c:	cmp	r0, #1
   33120:	blt	33170 <__assert_fail@plt+0x21d38>
   33124:	mov	r4, #0
   33128:	ldr	r0, [r2, #8]
   3312c:	ldr	r1, [sp, #76]	; 0x4c
   33130:	mov	r6, r2
   33134:	ldr	r0, [r0, r4, lsl #2]
   33138:	ldr	r1, [r1, #28]
   3313c:	add	r0, r0, r0, lsl #1
   33140:	add	r1, r1, r0, lsl #2
   33144:	mov	r0, r5
   33148:	bl	2dbd0 <__assert_fail@plt+0x1c798>
   3314c:	cmp	r0, #0
   33150:	bne	33b60 <__assert_fail@plt+0x22728>
   33154:	ldr	r0, [r6, #4]
   33158:	add	r4, r4, #1
   3315c:	mov	r2, r6
   33160:	cmp	r4, r0
   33164:	blt	33128 <__assert_fail@plt+0x21cf0>
   33168:	mov	r0, #0
   3316c:	str	r0, [fp, #-72]	; 0xffffffb8
   33170:	ldr	r1, [sp, #80]	; 0x50
   33174:	mov	r0, r2
   33178:	mov	r2, r5
   3317c:	bl	33bc4 <__assert_fail@plt+0x2278c>
   33180:	cmp	r0, #0
   33184:	str	r0, [fp, #-76]	; 0xffffffb4
   33188:	bne	33b98 <__assert_fail@plt+0x22760>
   3318c:	ldr	r0, [sl, #20]
   33190:	ldr	r5, [sp, #68]	; 0x44
   33194:	ldr	lr, [sp, #56]	; 0x38
   33198:	ldr	r8, [sp, #76]	; 0x4c
   3319c:	cmp	r0, #0
   331a0:	beq	3345c <__assert_fail@plt+0x22024>
   331a4:	ldr	r3, [sp, #80]	; 0x50
   331a8:	cmp	r0, #1
   331ac:	str	r9, [sp, #52]	; 0x34
   331b0:	blt	33450 <__assert_fail@plt+0x22018>
   331b4:	ldr	r0, [sp, #52]	; 0x34
   331b8:	mov	r1, #0
   331bc:	str	sl, [sp, #60]	; 0x3c
   331c0:	ldr	r0, [r0, #116]	; 0x74
   331c4:	str	r0, [sp, #64]	; 0x40
   331c8:	ldr	r0, [sl, #24]
   331cc:	str	r1, [sp, #72]	; 0x48
   331d0:	ldr	r0, [r0, r1, lsl #2]
   331d4:	ldr	r1, [sp, #64]	; 0x40
   331d8:	add	r0, r0, r0, lsl #1
   331dc:	add	r1, r1, r0, lsl #3
   331e0:	ldr	r2, [r1, #8]
   331e4:	cmp	r2, r5
   331e8:	bge	33438 <__assert_fail@plt+0x22000>
   331ec:	ldr	r1, [r1, #4]
   331f0:	cmp	r1, r5
   331f4:	blt	33438 <__assert_fail@plt+0x22000>
   331f8:	ldr	r1, [sp, #64]	; 0x40
   331fc:	ldr	r2, [r8]
   33200:	ldr	r0, [r1, r0, lsl #3]!
   33204:	ldr	r1, [r1, #12]
   33208:	ldr	sl, [r2, r0, lsl #3]
   3320c:	ldr	r0, [lr, #4]
   33210:	cmp	r1, r5
   33214:	bne	333c0 <__assert_fail@plt+0x21f88>
   33218:	cmp	r0, #1
   3321c:	blt	33438 <__assert_fail@plt+0x22000>
   33220:	ldr	r3, [lr, #8]
   33224:	mvn	r9, #0
   33228:	mvn	r1, #0
   3322c:	ldr	r6, [r3]
   33230:	add	r7, r2, r6, lsl #3
   33234:	ldrb	r7, [r7, #4]
   33238:	cmp	r7, #9
   3323c:	beq	33258 <__assert_fail@plt+0x21e20>
   33240:	cmp	r7, #8
   33244:	bne	33264 <__assert_fail@plt+0x21e2c>
   33248:	ldr	r7, [r2, r6, lsl #3]
   3324c:	cmp	sl, r7
   33250:	moveq	r1, r6
   33254:	b	33264 <__assert_fail@plt+0x21e2c>
   33258:	ldr	r7, [r2, r6, lsl #3]
   3325c:	cmp	sl, r7
   33260:	moveq	r9, r6
   33264:	add	r3, r3, #4
   33268:	subs	r0, r0, #1
   3326c:	bne	3322c <__assert_fail@plt+0x21df4>
   33270:	cmp	r1, #0
   33274:	blt	33294 <__assert_fail@plt+0x21e5c>
   33278:	ldr	r0, [sp, #76]	; 0x4c
   3327c:	ldr	r3, [sp, #80]	; 0x50
   33280:	mov	r2, lr
   33284:	bl	33de0 <__assert_fail@plt+0x229a8>
   33288:	ldr	lr, [sp, #56]	; 0x38
   3328c:	cmp	r0, #0
   33290:	bne	33b4c <__assert_fail@plt+0x22714>
   33294:	cmp	r9, #0
   33298:	ldr	r3, [sp, #80]	; 0x50
   3329c:	ldr	r8, [sp, #76]	; 0x4c
   332a0:	ldrge	ip, [lr, #4]
   332a4:	cmpge	ip, #1
   332a8:	blt	33438 <__assert_fail@plt+0x22000>
   332ac:	mov	sl, #0
   332b0:	ldr	r0, [lr, #8]
   332b4:	ldr	r1, [r0, sl, lsl #2]
   332b8:	ldr	r0, [r8, #28]
   332bc:	add	lr, r1, r1, lsl #1
   332c0:	add	r2, r0, lr, lsl #2
   332c4:	ldr	r0, [r2, #4]
   332c8:	cmp	r0, #1
   332cc:	blt	33328 <__assert_fail@plt+0x21ef0>
   332d0:	ldr	r4, [r2, #8]
   332d4:	mov	r3, ip
   332d8:	mov	r7, #0
   332dc:	subs	r0, r0, #1
   332e0:	beq	33308 <__assert_fail@plt+0x21ed0>
   332e4:	add	r6, r7, r0
   332e8:	mov	ip, #1
   332ec:	lsr	r5, r6, #1
   332f0:	ldr	r2, [r4, r5, lsl #2]
   332f4:	cmp	r2, r9
   332f8:	movge	r0, r5
   332fc:	addlt	r7, ip, r6, lsr #1
   33300:	cmp	r7, r0
   33304:	bcc	332e4 <__assert_fail@plt+0x21eac>
   33308:	ldr	r0, [r4, r7, lsl #2]
   3330c:	mov	ip, r3
   33310:	ldr	r5, [sp, #68]	; 0x44
   33314:	ldr	r3, [sp, #80]	; 0x50
   33318:	cmp	r0, r9
   3331c:	bne	33328 <__assert_fail@plt+0x21ef0>
   33320:	ldr	lr, [sp, #56]	; 0x38
   33324:	b	333b0 <__assert_fail@plt+0x21f78>
   33328:	ldr	r0, [r8, #24]
   3332c:	add	r2, r0, lr, lsl #2
   33330:	ldr	lr, [sp, #56]	; 0x38
   33334:	ldr	r0, [r2, #4]
   33338:	cmp	r0, #1
   3333c:	blt	33384 <__assert_fail@plt+0x21f4c>
   33340:	ldr	r2, [r2, #8]
   33344:	mov	r4, #0
   33348:	subs	r0, r0, #1
   3334c:	beq	33374 <__assert_fail@plt+0x21f3c>
   33350:	add	r7, r4, r0
   33354:	lsr	r6, r7, #1
   33358:	ldr	r5, [r2, r6, lsl #2]
   3335c:	cmp	r5, r9
   33360:	movge	r0, r6
   33364:	mov	r6, #1
   33368:	addlt	r4, r6, r7, lsr #1
   3336c:	cmp	r4, r0
   33370:	bcc	33350 <__assert_fail@plt+0x21f18>
   33374:	ldr	r0, [r2, r4, lsl #2]
   33378:	ldr	r5, [sp, #68]	; 0x44
   3337c:	cmp	r0, r9
   33380:	beq	333b0 <__assert_fail@plt+0x21f78>
   33384:	mov	r0, r8
   33388:	mov	r2, lr
   3338c:	mov	r4, lr
   33390:	bl	33de0 <__assert_fail@plt+0x229a8>
   33394:	cmp	r0, #0
   33398:	bne	33b4c <__assert_fail@plt+0x22714>
   3339c:	ldr	ip, [r4, #4]
   333a0:	ldr	r3, [sp, #80]	; 0x50
   333a4:	ldr	r8, [sp, #76]	; 0x4c
   333a8:	sub	sl, sl, #1
   333ac:	mov	lr, r4
   333b0:	add	sl, sl, #1
   333b4:	cmp	sl, ip
   333b8:	blt	332b0 <__assert_fail@plt+0x21e78>
   333bc:	b	33438 <__assert_fail@plt+0x22000>
   333c0:	cmp	r0, #1
   333c4:	blt	33438 <__assert_fail@plt+0x22000>
   333c8:	mov	r4, #0
   333cc:	b	333d4 <__assert_fail@plt+0x21f9c>
   333d0:	ldr	r2, [r8]
   333d4:	ldr	r1, [lr, #8]
   333d8:	ldr	r1, [r1, r4, lsl #2]
   333dc:	add	r7, r2, r1, lsl #3
   333e0:	ldr	r7, [r7, #4]
   333e4:	and	r7, r7, #254	; 0xfe
   333e8:	orr	r7, r7, #1
   333ec:	cmp	r7, #9
   333f0:	ldreq	r2, [r2, r1, lsl #3]
   333f4:	cmpeq	sl, r2
   333f8:	beq	3340c <__assert_fail@plt+0x21fd4>
   333fc:	add	r4, r4, #1
   33400:	cmp	r4, r0
   33404:	blt	333d0 <__assert_fail@plt+0x21f98>
   33408:	b	33438 <__assert_fail@plt+0x22000>
   3340c:	mov	r0, r8
   33410:	mov	r2, lr
   33414:	mov	r6, lr
   33418:	bl	33de0 <__assert_fail@plt+0x229a8>
   3341c:	cmp	r0, #0
   33420:	bne	33b4c <__assert_fail@plt+0x22714>
   33424:	ldr	r0, [r6, #4]
   33428:	ldr	r3, [sp, #80]	; 0x50
   3342c:	ldr	r8, [sp, #76]	; 0x4c
   33430:	mov	lr, r6
   33434:	b	333fc <__assert_fail@plt+0x21fc4>
   33438:	ldr	sl, [sp, #60]	; 0x3c
   3343c:	ldr	r1, [sp, #72]	; 0x48
   33440:	ldr	r0, [sl, #20]
   33444:	add	r1, r1, #1
   33448:	cmp	r1, r0
   3344c:	blt	331c8 <__assert_fail@plt+0x21d90>
   33450:	ldr	r9, [sp, #52]	; 0x34
   33454:	mov	r0, #0
   33458:	str	r0, [fp, #-76]	; 0xffffffb4
   3345c:	sub	r0, fp, #76	; 0x4c
   33460:	mov	r1, r8
   33464:	mov	r2, lr
   33468:	bl	31360 <__assert_fail@plt+0x1ff28>
   3346c:	ldr	r1, [sl]
   33470:	ldr	r2, [sp, #48]	; 0x30
   33474:	str	r0, [r1, r5, lsl #2]
   33478:	ldr	r8, [fp, #-76]	; 0xffffffb4
   3347c:	cmp	r8, #0
   33480:	bne	33b40 <__assert_fail@plt+0x22708>
   33484:	cmp	r2, #0
   33488:	bne	334a0 <__assert_fail@plt+0x22068>
   3348c:	b	33b3c <__assert_fail@plt+0x22704>
   33490:	ldr	r1, [sl]
   33494:	str	r0, [r1, r5, lsl #2]
   33498:	cmp	r2, #0
   3349c:	beq	33b3c <__assert_fail@plt+0x22704>
   334a0:	ldr	r0, [r9, #100]	; 0x64
   334a4:	ldr	r0, [r0, r5, lsl #2]
   334a8:	ldrb	r0, [r0, #52]	; 0x34
   334ac:	tst	r0, #64	; 0x40
   334b0:	beq	33b3c <__assert_fail@plt+0x22704>
   334b4:	ldr	r0, [r9, #84]	; 0x54
   334b8:	str	r0, [sp, #56]	; 0x38
   334bc:	ldr	r0, [r9, #108]	; 0x6c
   334c0:	cmp	r0, #1
   334c4:	blt	33b24 <__assert_fail@plt+0x226ec>
   334c8:	ldr	r1, [r9, #116]	; 0x74
   334cc:	ldr	r8, [sp, #80]	; 0x50
   334d0:	mov	lr, #0
   334d4:	mov	r2, #1
   334d8:	mov	r3, r0
   334dc:	add	r7, r3, lr
   334e0:	add	r7, r7, r7, lsr #31
   334e4:	asr	r6, r7, #1
   334e8:	add	r4, r6, r6, lsl #1
   334ec:	add	r4, r1, r4, lsl #3
   334f0:	ldr	r4, [r4, #4]
   334f4:	cmp	r4, r5
   334f8:	addlt	lr, r2, r7, asr #1
   334fc:	movge	r3, r6
   33500:	cmp	lr, r3
   33504:	blt	334dc <__assert_fail@plt+0x220a4>
   33508:	cmp	lr, r0
   3350c:	bge	33b34 <__assert_fail@plt+0x226fc>
   33510:	cmn	lr, #1
   33514:	beq	33b34 <__assert_fail@plt+0x226fc>
   33518:	ldr	r0, [r9, #116]	; 0x74
   3351c:	add	r1, lr, lr, lsl #1
   33520:	str	r1, [sp, #28]
   33524:	add	r0, r0, r1, lsl #3
   33528:	ldr	r0, [r0, #4]
   3352c:	cmp	r0, r5
   33530:	bne	33b34 <__assert_fail@plt+0x226fc>
   33534:	mov	r1, #0
   33538:	ldr	r7, [sp, #56]	; 0x38
   3353c:	str	r1, [fp, #-72]	; 0xffffffb8
   33540:	ldr	r0, [r8, #4]
   33544:	cmp	r0, #0
   33548:	ble	33b58 <__assert_fail@plt+0x22720>
   3354c:	sub	r0, fp, #72	; 0x48
   33550:	mov	r2, #0
   33554:	str	sl, [sp, #60]	; 0x3c
   33558:	str	r9, [sp, #52]	; 0x34
   3355c:	str	lr, [sp, #48]	; 0x30
   33560:	add	r0, r0, #16
   33564:	str	r0, [sp, #12]
   33568:	add	r0, sl, #16
   3356c:	str	r0, [sp, #36]	; 0x24
   33570:	mov	r0, #0
   33574:	str	r0, [sp, #64]	; 0x40
   33578:	ldr	r0, [r8, #8]
   3357c:	ldr	r1, [sl, #8]
   33580:	str	r4, [sp, #76]	; 0x4c
   33584:	str	r2, [sp, #44]	; 0x2c
   33588:	ldr	r3, [r0, r2, lsl #2]
   3358c:	ldr	r0, [r7]
   33590:	add	r0, r0, r3, lsl #3
   33594:	cmp	r3, r1
   33598:	str	r3, [sp, #72]	; 0x48
   3359c:	ldrb	r0, [r0, #4]
   335a0:	bne	335bc <__assert_fail@plt+0x22184>
   335a4:	cmp	r0, #4
   335a8:	bne	33b00 <__assert_fail@plt+0x226c8>
   335ac:	ldr	r0, [sl, #12]
   335b0:	cmp	r0, r5
   335b4:	bne	335c4 <__assert_fail@plt+0x2218c>
   335b8:	b	33b00 <__assert_fail@plt+0x226c8>
   335bc:	cmp	r0, #4
   335c0:	bne	33b00 <__assert_fail@plt+0x226c8>
   335c4:	ldr	r0, [r9, #116]	; 0x74
   335c8:	ldr	r1, [sp, #28]
   335cc:	ldr	r4, [sp, #72]	; 0x48
   335d0:	mov	r9, lr
   335d4:	add	r6, r0, r1, lsl #3
   335d8:	b	33a10 <__assert_fail@plt+0x225d8>
   335dc:	ldr	r5, [sp, #68]	; 0x44
   335e0:	ldr	r7, [sp, #56]	; 0x38
   335e4:	ldr	r4, [sp, #72]	; 0x48
   335e8:	mov	r0, r6
   335ec:	b	33aec <__assert_fail@plt+0x226b4>
   335f0:	ldr	r0, [sp, #64]	; 0x40
   335f4:	cmp	r0, #0
   335f8:	beq	3363c <__assert_fail@plt+0x22204>
   335fc:	ldr	r0, [sp, #20]
   33600:	str	r5, [fp, #-60]	; 0xffffffc4
   33604:	str	r4, [fp, #-64]	; 0xffffffc0
   33608:	cmp	r0, #0
   3360c:	beq	33740 <__assert_fail@plt+0x22308>
   33610:	ldr	r6, [sp, #40]	; 0x28
   33614:	cmp	r6, #0
   33618:	bne	339f8 <__assert_fail@plt+0x225c0>
   3361c:	ldr	r4, [sp, #76]	; 0x4c
   33620:	mov	r0, #1
   33624:	mov	r1, #1
   33628:	str	r0, [sp, #40]	; 0x28
   3362c:	str	r9, [r4]
   33630:	str	r1, [fp, #-52]	; 0xffffffcc
   33634:	str	r4, [sp, #24]
   33638:	b	337cc <__assert_fail@plt+0x22394>
   3363c:	add	r0, sl, #12
   33640:	mov	r3, #20
   33644:	sub	r2, fp, #72	; 0x48
   33648:	vld1.32	{d16-d17}, [r0]
   3364c:	mov	r0, sl
   33650:	add	r1, r2, #12
   33654:	vld1.32	{d18-d19}, [r0], r3
   33658:	vst1.32	{d16-d17}, [r1]
   3365c:	mov	r1, r2
   33660:	vst1.64	{d18-d19}, [r1], r3
   33664:	ldr	r6, [r0]
   33668:	mov	r0, #0
   3366c:	cmp	r6, #1
   33670:	str	r6, [r1]
   33674:	blt	33728 <__assert_fail@plt+0x222f0>
   33678:	lsl	r0, r6, #2
   3367c:	str	r6, [fp, #-56]	; 0xffffffc8
   33680:	bl	3554c <__assert_fail@plt+0x24114>
   33684:	cmp	r0, #0
   33688:	str	r0, [fp, #-48]	; 0xffffffd0
   3368c:	beq	33ba8 <__assert_fail@plt+0x22770>
   33690:	mov	r8, r0
   33694:	ldr	r0, [sl, #20]
   33698:	ldr	r1, [sl, #24]
   3369c:	lsl	r2, r0, #2
   336a0:	mov	r0, r8
   336a4:	bl	111ec <memcpy@plt>
   336a8:	str	r4, [fp, #-64]	; 0xffffffc0
   336ac:	str	r5, [fp, #-60]	; 0xffffffc4
   336b0:	mov	r4, r8
   336b4:	lsl	r0, r6, #1
   336b8:	lsl	r1, r6, #3
   336bc:	str	r0, [sp, #20]
   336c0:	str	r0, [fp, #-56]	; 0xffffffc8
   336c4:	mov	r0, r8
   336c8:	bl	3557c <__assert_fail@plt+0x24144>
   336cc:	cmp	r0, #0
   336d0:	beq	33bbc <__assert_fail@plt+0x22784>
   336d4:	mov	r4, r0
   336d8:	mov	r8, r0
   336dc:	str	r0, [fp, #-48]	; 0xffffffd0
   336e0:	str	r0, [sp, #16]
   336e4:	ldr	r0, [r4]
   336e8:	cmp	r0, r9
   336ec:	ble	33784 <__assert_fail@plt+0x2234c>
   336f0:	cmp	r6, #1
   336f4:	mov	r2, r6
   336f8:	blt	337b8 <__assert_fail@plt+0x22380>
   336fc:	add	r1, r4, r6, lsl #2
   33700:	add	r0, r6, #1
   33704:	mov	r2, r1
   33708:	ldr	r3, [r2, #-4]!
   3370c:	sub	r0, r0, #1
   33710:	cmp	r0, #1
   33714:	str	r3, [r1]
   33718:	mov	r1, r2
   3371c:	bgt	33708 <__assert_fail@plt+0x222d0>
   33720:	sub	r2, r0, #1
   33724:	b	337b8 <__assert_fail@plt+0x22380>
   33728:	ldr	r1, [sp, #12]
   3372c:	str	r0, [r1]
   33730:	str	r0, [r1, #4]
   33734:	str	r0, [r1, #8]
   33738:	str	r5, [fp, #-60]	; 0xffffffc4
   3373c:	str	r4, [fp, #-64]	; 0xffffffc0
   33740:	mov	r0, #1
   33744:	str	r0, [fp, #-52]	; 0xffffffcc
   33748:	str	r0, [fp, #-56]	; 0xffffffc8
   3374c:	mov	r0, #4
   33750:	bl	3554c <__assert_fail@plt+0x24114>
   33754:	cmp	r0, #0
   33758:	str	r0, [fp, #-48]	; 0xffffffd0
   3375c:	beq	33ba8 <__assert_fail@plt+0x22770>
   33760:	mov	r4, r0
   33764:	str	r9, [r0]
   33768:	mov	r0, #1
   3376c:	str	r0, [sp, #40]	; 0x28
   33770:	mov	r0, #1
   33774:	str	r4, [sp, #16]
   33778:	str	r4, [sp, #24]
   3377c:	str	r0, [sp, #20]
   33780:	b	337cc <__assert_fail@plt+0x22394>
   33784:	add	r0, r4, r6, lsl #2
   33788:	mov	r2, r6
   3378c:	ldr	r1, [r0, #-4]
   33790:	cmp	r1, r9
   33794:	ble	337b8 <__assert_fail@plt+0x22380>
   33798:	sub	r2, r6, #2
   3379c:	str	r1, [r0]
   337a0:	sub	r2, r2, #1
   337a4:	ldr	r1, [r0, #-8]
   337a8:	sub	r0, r0, #4
   337ac:	cmp	r1, r9
   337b0:	bgt	3379c <__assert_fail@plt+0x22364>
   337b4:	add	r2, r2, #2
   337b8:	add	r6, r6, #1
   337bc:	str	r9, [r4, r2, lsl #2]
   337c0:	str	r8, [sp, #24]
   337c4:	str	r6, [sp, #40]	; 0x28
   337c8:	str	r6, [fp, #-52]	; 0xffffffcc
   337cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   337d0:	sub	r1, fp, #72	; 0x48
   337d4:	str	r0, [sp, #64]	; 0x40
   337d8:	ldr	r0, [r0, r5, lsl #2]
   337dc:	str	r0, [sp, #32]
   337e0:	ldr	r0, [sp, #52]	; 0x34
   337e4:	bl	32bf0 <__assert_fail@plt+0x217b8>
   337e8:	cmp	r0, #0
   337ec:	bne	33ba0 <__assert_fail@plt+0x22768>
   337f0:	ldr	r6, [sl, #4]
   337f4:	str	r4, [sp, #76]	; 0x4c
   337f8:	ldr	lr, [sp, #48]	; 0x30
   337fc:	ldr	r4, [sp, #72]	; 0x48
   33800:	ldr	r2, [sp, #64]	; 0x40
   33804:	cmp	r6, #0
   33808:	beq	338a0 <__assert_fail@plt+0x22468>
   3380c:	cmp	r5, #0
   33810:	blt	3389c <__assert_fail@plt+0x22464>
   33814:	mov	r0, #0
   33818:	mov	sl, r0
   3381c:	ldr	r0, [r2, r0, lsl #2]
   33820:	ldr	r1, [r6, sl, lsl #2]
   33824:	cmp	r1, #0
   33828:	beq	3388c <__assert_fail@plt+0x22454>
   3382c:	cmp	r0, #0
   33830:	beq	33890 <__assert_fail@plt+0x22458>
   33834:	sub	r4, fp, #44	; 0x2c
   33838:	add	r2, r0, #4
   3383c:	add	r1, r1, #4
   33840:	mov	r0, r4
   33844:	bl	2fd74 <__assert_fail@plt+0x1e93c>
   33848:	cmp	r0, #0
   3384c:	str	r0, [fp, #-32]	; 0xffffffe0
   33850:	bne	33b6c <__assert_fail@plt+0x22734>
   33854:	sub	r0, fp, #32
   33858:	mov	r1, r7
   3385c:	mov	r2, r4
   33860:	bl	31360 <__assert_fail@plt+0x1ff28>
   33864:	str	r0, [r6, sl, lsl #2]
   33868:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3386c:	bl	1386c <__assert_fail@plt+0x2434>
   33870:	ldr	r8, [fp, #-32]	; 0xffffffe0
   33874:	ldr	lr, [sp, #48]	; 0x30
   33878:	ldr	r4, [sp, #72]	; 0x48
   3387c:	ldr	r2, [sp, #64]	; 0x40
   33880:	cmp	r8, #0
   33884:	beq	33890 <__assert_fail@plt+0x22458>
   33888:	b	33b70 <__assert_fail@plt+0x22738>
   3388c:	str	r0, [r6, sl, lsl #2]
   33890:	add	r0, sl, #1
   33894:	cmp	sl, r5
   33898:	blt	33818 <__assert_fail@plt+0x223e0>
   3389c:	ldr	sl, [sp, #60]	; 0x3c
   338a0:	ldr	r0, [sp, #32]
   338a4:	str	r0, [r2, r5, lsl #2]
   338a8:	ldr	r0, [sp, #40]	; 0x28
   338ac:	cmp	r0, #1
   338b0:	blt	338f8 <__assert_fail@plt+0x224c0>
   338b4:	ldr	r8, [sp, #80]	; 0x50
   338b8:	subs	r0, r0, #1
   338bc:	mov	r4, #1
   338c0:	mov	r1, #0
   338c4:	beq	33900 <__assert_fail@plt+0x224c8>
   338c8:	mov	r2, r0
   338cc:	ldr	r6, [sp, #76]	; 0x4c
   338d0:	add	r3, r1, r2
   338d4:	lsr	r7, r3, #1
   338d8:	ldr	r6, [r6, r7, lsl #2]
   338dc:	cmp	r6, r9
   338e0:	ldr	r6, [sp, #76]	; 0x4c
   338e4:	movge	r2, r7
   338e8:	addlt	r1, r4, r3, lsr #1
   338ec:	cmp	r1, r2
   338f0:	bcc	338cc <__assert_fail@plt+0x22494>
   338f4:	b	33904 <__assert_fail@plt+0x224cc>
   338f8:	ldr	r8, [sp, #80]	; 0x50
   338fc:	b	339e4 <__assert_fail@plt+0x225ac>
   33900:	ldr	r6, [sp, #76]	; 0x4c
   33904:	ldr	r2, [r6, r1, lsl #2]
   33908:	cmp	r2, r9
   3390c:	mov	r2, r1
   33910:	mvnne	r2, #0
   33914:	cmp	r2, #0
   33918:	blt	33958 <__assert_fail@plt+0x22520>
   3391c:	ldr	r3, [sp, #40]	; 0x28
   33920:	ldr	r7, [sp, #56]	; 0x38
   33924:	ldr	r4, [sp, #72]	; 0x48
   33928:	cmp	r3, r2
   3392c:	ble	3396c <__assert_fail@plt+0x22534>
   33930:	cmp	r0, r2
   33934:	str	r0, [fp, #-52]	; 0xffffffcc
   33938:	ble	33978 <__assert_fail@plt+0x22540>
   3393c:	ldr	r3, [sp, #40]	; 0x28
   33940:	mvn	r2, r1
   33944:	add	r3, r3, r2
   33948:	cmp	r3, #4
   3394c:	bcs	33984 <__assert_fail@plt+0x2254c>
   33950:	mov	r2, r1
   33954:	b	339c4 <__assert_fail@plt+0x2258c>
   33958:	ldr	r0, [sp, #16]
   3395c:	ldr	r7, [sp, #56]	; 0x38
   33960:	ldr	r4, [sp, #72]	; 0x48
   33964:	str	r0, [sp, #24]
   33968:	b	339e4 <__assert_fail@plt+0x225ac>
   3396c:	ldr	r0, [sp, #16]
   33970:	str	r0, [sp, #24]
   33974:	b	339e4 <__assert_fail@plt+0x225ac>
   33978:	ldr	r1, [sp, #16]
   3397c:	str	r1, [sp, #24]
   33980:	b	339e0 <__assert_fail@plt+0x225a8>
   33984:	mov	r7, r6
   33988:	bic	r6, r3, #3
   3398c:	add	r2, r1, r6
   33990:	add	r1, r7, r1, lsl #2
   33994:	mov	r7, r6
   33998:	add	r1, r1, #4
   3399c:	sub	r5, r1, #4
   339a0:	vld1.32	{d16-d17}, [r1]!
   339a4:	subs	r7, r7, #4
   339a8:	vst1.32	{d16-d17}, [r5]
   339ac:	bne	3399c <__assert_fail@plt+0x22564>
   339b0:	cmp	r3, r6
   339b4:	ldr	r5, [sp, #68]	; 0x44
   339b8:	ldr	r7, [sp, #56]	; 0x38
   339bc:	ldr	r6, [sp, #76]	; 0x4c
   339c0:	beq	339dc <__assert_fail@plt+0x225a4>
   339c4:	add	r1, r6, r2, lsl #2
   339c8:	ldr	r1, [r1, #4]
   339cc:	str	r1, [r6, r2, lsl #2]
   339d0:	add	r2, r2, #1
   339d4:	cmp	r0, r2
   339d8:	bne	339c4 <__assert_fail@plt+0x2258c>
   339dc:	str	r6, [sp, #24]
   339e0:	str	r0, [sp, #40]	; 0x28
   339e4:	ldr	r0, [sp, #52]	; 0x34
   339e8:	add	r1, r9, r9, lsl #1
   339ec:	ldr	r0, [r0, #116]	; 0x74
   339f0:	add	r0, r0, r1, lsl #3
   339f4:	b	33aec <__assert_fail@plt+0x226b4>
   339f8:	ldr	r0, [sp, #20]
   339fc:	ldr	r4, [sp, #76]	; 0x4c
   33a00:	ldr	r8, [sp, #24]
   33a04:	cmp	r0, r6
   33a08:	beq	336b4 <__assert_fail@plt+0x2227c>
   33a0c:	b	336e4 <__assert_fail@plt+0x222ac>
   33a10:	ldr	r0, [r6]
   33a14:	cmp	r0, r4
   33a18:	bne	33ae8 <__assert_fail@plt+0x226b0>
   33a1c:	ldr	r0, [r6, #8]
   33a20:	ldr	r1, [r6, #12]
   33a24:	subs	r0, r1, r0
   33a28:	add	ip, r0, r5
   33a2c:	beq	33a3c <__assert_fail@plt+0x22604>
   33a30:	ldr	r1, [r7, #12]
   33a34:	add	r1, r1, r4, lsl #2
   33a38:	b	33a4c <__assert_fail@plt+0x22614>
   33a3c:	ldr	r1, [r7, #20]
   33a40:	add	r2, r4, r4, lsl #1
   33a44:	add	r1, r1, r2, lsl #2
   33a48:	ldr	r1, [r1, #8]
   33a4c:	ldr	r2, [sl, #12]
   33a50:	cmp	ip, r2
   33a54:	bgt	33ae8 <__assert_fail@plt+0x226b0>
   33a58:	ldr	r2, [sl]
   33a5c:	ldr	r2, [r2, ip, lsl #2]
   33a60:	cmp	r2, #0
   33a64:	beq	33ae8 <__assert_fail@plt+0x226b0>
   33a68:	ldr	r3, [r2, #8]
   33a6c:	cmp	r3, #1
   33a70:	blt	33ae8 <__assert_fail@plt+0x226b0>
   33a74:	ldr	r1, [r1]
   33a78:	ldr	r2, [r2, #12]
   33a7c:	subs	r7, r3, #1
   33a80:	mov	r3, #0
   33a84:	beq	33aac <__assert_fail@plt+0x22674>
   33a88:	add	r5, r3, r7
   33a8c:	lsr	r4, r5, #1
   33a90:	ldr	r0, [r2, r4, lsl #2]
   33a94:	cmp	r0, r1
   33a98:	mov	r0, #1
   33a9c:	movge	r7, r4
   33aa0:	addlt	r3, r0, r5, lsr #1
   33aa4:	cmp	r3, r7
   33aa8:	bcc	33a88 <__assert_fail@plt+0x22650>
   33aac:	ldr	r0, [r2, r3, lsl #2]
   33ab0:	cmp	r0, r1
   33ab4:	bne	335dc <__assert_fail@plt+0x221a4>
   33ab8:	stm	sp, {r1, ip}
   33abc:	ldr	r4, [sp, #72]	; 0x48
   33ac0:	ldr	r5, [sp, #68]	; 0x44
   33ac4:	ldr	r0, [sp, #52]	; 0x34
   33ac8:	ldr	r1, [sp, #36]	; 0x24
   33acc:	mov	r2, r4
   33ad0:	mov	r3, r5
   33ad4:	bl	34158 <__assert_fail@plt+0x22d20>
   33ad8:	ldr	r7, [sp, #56]	; 0x38
   33adc:	cmp	r0, #0
   33ae0:	beq	335f0 <__assert_fail@plt+0x221b8>
   33ae4:	ldr	lr, [sp, #48]	; 0x30
   33ae8:	mov	r0, r6
   33aec:	add	r6, r0, #24
   33af0:	ldrb	r0, [r0, #20]
   33af4:	add	r9, r9, #1
   33af8:	cmp	r0, #0
   33afc:	bne	33a10 <__assert_fail@plt+0x225d8>
   33b00:	ldr	r2, [sp, #44]	; 0x2c
   33b04:	ldr	r0, [r8, #4]
   33b08:	ldr	r9, [sp, #52]	; 0x34
   33b0c:	ldr	r4, [sp, #76]	; 0x4c
   33b10:	add	r2, r2, #1
   33b14:	cmp	r2, r0
   33b18:	blt	33578 <__assert_fail@plt+0x22140>
   33b1c:	mov	r8, #0
   33b20:	b	33b74 <__assert_fail@plt+0x2273c>
   33b24:	ldr	r8, [sp, #80]	; 0x50
   33b28:	mov	lr, #0
   33b2c:	cmp	lr, r0
   33b30:	blt	33510 <__assert_fail@plt+0x220d8>
   33b34:	mov	r0, #0
   33b38:	str	r0, [fp, #-76]	; 0xffffffb4
   33b3c:	mov	r8, #0
   33b40:	mov	r0, r8
   33b44:	sub	sp, fp, #28
   33b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b4c:	mov	r8, r0
   33b50:	str	r0, [fp, #-76]	; 0xffffffb4
   33b54:	b	33b40 <__assert_fail@plt+0x22708>
   33b58:	str	r1, [fp, #-76]	; 0xffffffb4
   33b5c:	b	33b3c <__assert_fail@plt+0x22704>
   33b60:	str	r0, [fp, #-72]	; 0xffffffb8
   33b64:	str	r8, [fp, #-76]	; 0xffffffb4
   33b68:	b	33b40 <__assert_fail@plt+0x22708>
   33b6c:	mov	r8, r0
   33b70:	ldr	r4, [sp, #76]	; 0x4c
   33b74:	ldr	r0, [fp, #-72]	; 0xffffffb8
   33b78:	cmp	r0, #0
   33b7c:	beq	33b88 <__assert_fail@plt+0x22750>
   33b80:	mov	r0, r4
   33b84:	bl	1386c <__assert_fail@plt+0x2434>
   33b88:	cmp	r8, #0
   33b8c:	str	r8, [fp, #-76]	; 0xffffffb4
   33b90:	moveq	r8, #0
   33b94:	b	33b40 <__assert_fail@plt+0x22708>
   33b98:	mov	r8, r0
   33b9c:	b	33b40 <__assert_fail@plt+0x22708>
   33ba0:	mov	r8, r0
   33ba4:	b	33b74 <__assert_fail@plt+0x2273c>
   33ba8:	mov	r4, #0
   33bac:	mov	r8, #12
   33bb0:	str	r4, [fp, #-56]	; 0xffffffc8
   33bb4:	str	r4, [fp, #-52]	; 0xffffffcc
   33bb8:	b	33b74 <__assert_fail@plt+0x2273c>
   33bbc:	mov	r8, #12
   33bc0:	b	33b74 <__assert_fail@plt+0x2273c>
   33bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33bc8:	add	fp, sp, #28
   33bcc:	sub	sp, sp, #12
   33bd0:	ldr	ip, [r1, #4]
   33bd4:	mov	sl, r0
   33bd8:	mov	r0, #0
   33bdc:	cmp	ip, #0
   33be0:	ldrne	lr, [r2, #4]
   33be4:	cmpne	lr, #0
   33be8:	bne	33bf4 <__assert_fail@plt+0x227bc>
   33bec:	sub	sp, fp, #28
   33bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33bf4:	mov	r7, r1
   33bf8:	ldr	r1, [sl, #4]
   33bfc:	ldr	r6, [sl]
   33c00:	add	r3, lr, ip
   33c04:	add	r4, r1, r3
   33c08:	cmp	r4, r6
   33c0c:	ble	33c50 <__assert_fail@plt+0x22818>
   33c10:	mov	r5, r2
   33c14:	mov	r2, sl
   33c18:	add	r4, r6, r3
   33c1c:	ldr	r0, [r2, #8]!
   33c20:	lsl	r1, r4, #2
   33c24:	str	r2, [sp, #8]
   33c28:	bl	3557c <__assert_fail@plt+0x24144>
   33c2c:	cmp	r0, #0
   33c30:	beq	33dd4 <__assert_fail@plt+0x2299c>
   33c34:	str	r4, [sl]
   33c38:	str	r0, [sl, #8]
   33c3c:	mov	r2, r5
   33c40:	ldr	r1, [sl, #4]
   33c44:	ldr	lr, [r5, #4]
   33c48:	ldr	ip, [r7, #4]
   33c4c:	b	33c58 <__assert_fail@plt+0x22820>
   33c50:	add	r0, sl, #8
   33c54:	str	r0, [sp, #8]
   33c58:	str	r2, [sp, #4]
   33c5c:	ldr	r2, [r2, #8]
   33c60:	ldr	r4, [r7, #8]
   33c64:	add	r3, ip, r1
   33c68:	sub	r8, r1, #1
   33c6c:	add	r9, r3, lr
   33c70:	sub	ip, ip, #1
   33c74:	sub	r3, lr, #1
   33c78:	ldr	r1, [r2, r3, lsl #2]
   33c7c:	ldr	r6, [r4, ip, lsl #2]
   33c80:	cmp	r6, r1
   33c84:	beq	33cb0 <__assert_fail@plt+0x22878>
   33c88:	blt	33ca0 <__assert_fail@plt+0x22868>
   33c8c:	sub	r5, ip, #1
   33c90:	cmp	ip, #0
   33c94:	mov	ip, r5
   33c98:	bgt	33c7c <__assert_fail@plt+0x22844>
   33c9c:	b	33d2c <__assert_fail@plt+0x228f4>
   33ca0:	cmp	lr, #2
   33ca4:	mov	lr, r3
   33ca8:	bge	33c74 <__assert_fail@plt+0x2283c>
   33cac:	b	33d2c <__assert_fail@plt+0x228f4>
   33cb0:	mov	r0, r9
   33cb4:	cmp	r8, #0
   33cb8:	blt	33d04 <__assert_fail@plt+0x228cc>
   33cbc:	ldr	r1, [sp, #8]
   33cc0:	ldr	r9, [r1]
   33cc4:	mov	r1, r8
   33cc8:	ldr	r5, [r9, r1, lsl #2]
   33ccc:	cmp	r5, r6
   33cd0:	ble	33ce8 <__assert_fail@plt+0x228b0>
   33cd4:	sub	r8, r1, #1
   33cd8:	cmp	r1, #0
   33cdc:	mov	r1, r8
   33ce0:	bgt	33cc8 <__assert_fail@plt+0x22890>
   33ce4:	b	33d04 <__assert_fail@plt+0x228cc>
   33ce8:	mov	r8, r1
   33cec:	bne	33d04 <__assert_fail@plt+0x228cc>
   33cf0:	mov	r8, r1
   33cf4:	mov	r9, r0
   33cf8:	cmp	ip, #1
   33cfc:	bge	33d20 <__assert_fail@plt+0x228e8>
   33d00:	b	33d2c <__assert_fail@plt+0x228f4>
   33d04:	ldr	r1, [sp, #8]
   33d08:	mov	r9, r0
   33d0c:	sub	r9, r0, #1
   33d10:	ldr	r1, [r1]
   33d14:	str	r6, [r1, r9, lsl #2]
   33d18:	cmp	ip, #1
   33d1c:	blt	33d2c <__assert_fail@plt+0x228f4>
   33d20:	cmp	lr, #2
   33d24:	mov	lr, r3
   33d28:	bge	33c70 <__assert_fail@plt+0x22838>
   33d2c:	ldr	lr, [r7, #4]
   33d30:	ldr	r7, [sp, #4]
   33d34:	ldr	r2, [sl, #4]
   33d38:	ldr	r0, [sl, #8]
   33d3c:	ldr	r4, [r7, #4]
   33d40:	subs	r1, r2, #1
   33d44:	add	r3, r1, lr
   33d48:	add	r3, r3, r4
   33d4c:	sub	r5, r3, r9
   33d50:	add	r6, r5, #1
   33d54:	cmpge	r5, #0
   33d58:	add	r7, r6, r2
   33d5c:	str	r7, [sl, #4]
   33d60:	blt	33db8 <__assert_fail@plt+0x22980>
   33d64:	add	r2, r2, r4
   33d68:	add	r2, r2, lr
   33d6c:	sub	r2, r2, r9
   33d70:	add	r7, r0, r2, lsl #2
   33d74:	ldr	r2, [r0, r1, lsl #2]
   33d78:	ldr	r5, [r0, r3, lsl #2]
   33d7c:	cmp	r5, r2
   33d80:	bgt	33d9c <__assert_fail@plt+0x22964>
   33d84:	str	r2, [r7, r1, lsl #2]
   33d88:	sub	r2, r1, #1
   33d8c:	cmp	r1, #0
   33d90:	mov	r1, r2
   33d94:	bgt	33d74 <__assert_fail@plt+0x2293c>
   33d98:	b	33db8 <__assert_fail@plt+0x22980>
   33d9c:	str	r5, [r7, r1, lsl #2]
   33da0:	sub	r7, r7, #4
   33da4:	subs	r6, r6, #1
   33da8:	sub	r3, r3, #1
   33dac:	mov	r2, #0
   33db0:	bne	33d74 <__assert_fail@plt+0x2293c>
   33db4:	b	33dbc <__assert_fail@plt+0x22984>
   33db8:	mov	r2, r6
   33dbc:	add	r1, r0, r9, lsl #2
   33dc0:	lsl	r2, r2, #2
   33dc4:	bl	111ec <memcpy@plt>
   33dc8:	mov	r0, #0
   33dcc:	sub	sp, fp, #28
   33dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33dd4:	mov	r0, #12
   33dd8:	sub	sp, fp, #28
   33ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33de4:	add	fp, sp, #28
   33de8:	sub	sp, sp, #44	; 0x2c
   33dec:	mov	ip, r0
   33df0:	ldr	r0, [r0, #28]
   33df4:	mov	r8, r2
   33df8:	add	r2, r1, r1, lsl #1
   33dfc:	mov	r9, #0
   33e00:	str	r3, [sp, #4]
   33e04:	str	r9, [sp, #36]	; 0x24
   33e08:	str	r9, [sp, #32]
   33e0c:	str	r9, [sp, #40]	; 0x28
   33e10:	add	r2, r0, r2, lsl #2
   33e14:	mov	r0, r2
   33e18:	ldr	r6, [r0, #4]!
   33e1c:	cmp	r6, #1
   33e20:	str	r0, [sp, #28]
   33e24:	blt	34130 <__assert_fail@plt+0x22cf8>
   33e28:	add	r4, r2, #8
   33e2c:	mov	sl, #1
   33e30:	str	r2, [sp]
   33e34:	str	r1, [sp, #12]
   33e38:	str	ip, [sp, #8]
   33e3c:	str	r4, [sp, #20]
   33e40:	ldr	r3, [r4]
   33e44:	ldr	r0, [r3, r9, lsl #2]
   33e48:	cmp	r0, r1
   33e4c:	beq	33ffc <__assert_fail@plt+0x22bc4>
   33e50:	ldr	r2, [ip]
   33e54:	add	r2, r2, r0, lsl #3
   33e58:	ldrb	r2, [r2, #4]
   33e5c:	tst	r2, #8
   33e60:	beq	33ffc <__assert_fail@plt+0x22bc4>
   33e64:	ldr	r2, [ip, #20]
   33e68:	add	r0, r0, r0, lsl #1
   33e6c:	mvn	lr, #0
   33e70:	str	r6, [sp, #24]
   33e74:	str	r0, [sp, #16]
   33e78:	add	r0, r2, r0, lsl #2
   33e7c:	ldr	r7, [r0, #4]
   33e80:	ldr	r0, [r0, #8]
   33e84:	cmp	r7, #2
   33e88:	ldr	r5, [r0]
   33e8c:	ldrge	lr, [r0, #4]
   33e90:	cmp	r6, #1
   33e94:	blt	33ed8 <__assert_fail@plt+0x22aa0>
   33e98:	mov	r2, #0
   33e9c:	subs	r7, r6, #1
   33ea0:	beq	33ec4 <__assert_fail@plt+0x22a8c>
   33ea4:	add	r4, r2, r7
   33ea8:	lsr	r6, r4, #1
   33eac:	ldr	r0, [r3, r6, lsl #2]
   33eb0:	cmp	r0, r5
   33eb4:	movge	r7, r6
   33eb8:	addlt	r2, sl, r4, lsr #1
   33ebc:	cmp	r2, r7
   33ec0:	bcc	33ea4 <__assert_fail@plt+0x22a6c>
   33ec4:	ldr	r0, [r3, r2, lsl #2]
   33ec8:	ldr	r4, [sp, #20]
   33ecc:	ldr	r6, [sp, #24]
   33ed0:	cmp	r0, r5
   33ed4:	beq	33f30 <__assert_fail@plt+0x22af8>
   33ed8:	ldr	r0, [r8, #4]
   33edc:	cmp	r0, #1
   33ee0:	blt	33f30 <__assert_fail@plt+0x22af8>
   33ee4:	ldr	r1, [r8, #8]
   33ee8:	subs	r4, r0, #1
   33eec:	mov	r7, #0
   33ef0:	beq	33f14 <__assert_fail@plt+0x22adc>
   33ef4:	add	r0, r7, r4
   33ef8:	lsr	r6, r0, #1
   33efc:	ldr	ip, [r1, r6, lsl #2]
   33f00:	cmp	ip, r5
   33f04:	movge	r4, r6
   33f08:	addlt	r7, sl, r0, lsr #1
   33f0c:	cmp	r7, r4
   33f10:	bcc	33ef4 <__assert_fail@plt+0x22abc>
   33f14:	ldr	r0, [r1, r7, lsl #2]
   33f18:	ldr	r1, [sp, #12]
   33f1c:	ldr	ip, [sp, #8]
   33f20:	ldr	r4, [sp, #20]
   33f24:	ldr	r6, [sp, #24]
   33f28:	cmp	r0, r5
   33f2c:	beq	33fcc <__assert_fail@plt+0x22b94>
   33f30:	cmp	lr, #1
   33f34:	blt	33ffc <__assert_fail@plt+0x22bc4>
   33f38:	cmp	r6, #1
   33f3c:	blt	33f7c <__assert_fail@plt+0x22b44>
   33f40:	mov	r2, #0
   33f44:	subs	r7, r6, #1
   33f48:	beq	33f6c <__assert_fail@plt+0x22b34>
   33f4c:	add	r0, r2, r7
   33f50:	lsr	r6, r0, #1
   33f54:	ldr	r5, [r3, r6, lsl #2]
   33f58:	cmp	r5, lr
   33f5c:	movge	r7, r6
   33f60:	addlt	r2, sl, r0, lsr #1
   33f64:	cmp	r2, r7
   33f68:	bcc	33f4c <__assert_fail@plt+0x22b14>
   33f6c:	ldr	r0, [r3, r2, lsl #2]
   33f70:	ldr	r6, [sp, #24]
   33f74:	cmp	r0, lr
   33f78:	beq	33ffc <__assert_fail@plt+0x22bc4>
   33f7c:	ldr	r0, [r8, #4]
   33f80:	cmp	r0, #1
   33f84:	blt	33ffc <__assert_fail@plt+0x22bc4>
   33f88:	ldr	r4, [r8, #8]
   33f8c:	subs	r7, r0, #1
   33f90:	mov	r3, #0
   33f94:	beq	33fb8 <__assert_fail@plt+0x22b80>
   33f98:	add	r0, r3, r7
   33f9c:	lsr	r6, r0, #1
   33fa0:	ldr	r5, [r4, r6, lsl #2]
   33fa4:	cmp	r5, lr
   33fa8:	movge	r7, r6
   33fac:	addlt	r3, sl, r0, lsr #1
   33fb0:	cmp	r3, r7
   33fb4:	bcc	33f98 <__assert_fail@plt+0x22b60>
   33fb8:	ldr	r0, [r4, r3, lsl #2]
   33fbc:	ldr	r4, [sp, #20]
   33fc0:	ldr	r6, [sp, #24]
   33fc4:	cmp	r0, lr
   33fc8:	bne	33ffc <__assert_fail@plt+0x22bc4>
   33fcc:	ldr	r0, [ip, #28]
   33fd0:	ldr	r1, [sp, #16]
   33fd4:	add	r2, r0, r1, lsl #2
   33fd8:	ldr	r1, [sp, #4]
   33fdc:	add	r0, sp, #32
   33fe0:	bl	33bc4 <__assert_fail@plt+0x2278c>
   33fe4:	cmp	r0, #0
   33fe8:	bne	34148 <__assert_fail@plt+0x22d10>
   33fec:	ldr	r0, [sp, #28]
   33ff0:	ldr	r1, [sp, #12]
   33ff4:	ldr	ip, [sp, #8]
   33ff8:	ldr	r6, [r0]
   33ffc:	add	r9, r9, #1
   34000:	cmp	r9, r6
   34004:	blt	33e40 <__assert_fail@plt+0x22a08>
   34008:	ldr	r0, [sp]
   3400c:	cmp	r6, #0
   34010:	ble	34130 <__assert_fail@plt+0x22cf8>
   34014:	ldr	r9, [sp, #36]	; 0x24
   34018:	ldr	lr, [r0, #8]
   3401c:	ldr	r0, [sp, #40]	; 0x28
   34020:	mov	ip, #0
   34024:	mov	r6, #1
   34028:	sub	r1, r9, #1
   3402c:	str	lr, [sp, #20]
   34030:	str	r9, [sp, #16]
   34034:	str	r1, [sp, #24]
   34038:	b	3405c <__assert_fail@plt+0x22c24>
   3403c:	add	r3, r1, r2, lsl #2
   34040:	ldr	r3, [r3, #4]
   34044:	str	r3, [r1, r2, lsl #2]
   34048:	add	r2, r2, #1
   3404c:	ldr	r3, [r8, #4]
   34050:	cmp	r2, r3
   34054:	blt	3403c <__assert_fail@plt+0x22c04>
   34058:	b	34118 <__assert_fail@plt+0x22ce0>
   3405c:	ldr	r5, [lr, ip, lsl #2]
   34060:	cmp	r9, #1
   34064:	blt	340a4 <__assert_fail@plt+0x22c6c>
   34068:	ldr	r2, [sp, #24]
   3406c:	mov	r1, #0
   34070:	cmp	r2, #0
   34074:	beq	34098 <__assert_fail@plt+0x22c60>
   34078:	add	r3, r1, r2
   3407c:	lsr	r4, r3, #1
   34080:	ldr	r7, [r0, r4, lsl #2]
   34084:	cmp	r7, r5
   34088:	movge	r2, r4
   3408c:	addlt	r1, r6, r3, lsr #1
   34090:	cmp	r1, r2
   34094:	bcc	34078 <__assert_fail@plt+0x22c40>
   34098:	ldr	r1, [r0, r1, lsl #2]
   3409c:	cmp	r1, r5
   340a0:	beq	34118 <__assert_fail@plt+0x22ce0>
   340a4:	ldr	r3, [r8, #4]
   340a8:	cmp	r3, #1
   340ac:	blt	34118 <__assert_fail@plt+0x22ce0>
   340b0:	mov	r1, r8
   340b4:	subs	sl, r3, #1
   340b8:	mov	r2, #0
   340bc:	ldr	r1, [r8, #8]
   340c0:	beq	340e8 <__assert_fail@plt+0x22cb0>
   340c4:	mov	r4, sl
   340c8:	add	r7, r2, r4
   340cc:	lsr	lr, r7, #1
   340d0:	ldr	r9, [r1, lr, lsl #2]
   340d4:	cmp	r9, r5
   340d8:	movge	r4, lr
   340dc:	addlt	r2, r6, r7, lsr #1
   340e0:	cmp	r2, r4
   340e4:	bcc	340c8 <__assert_fail@plt+0x22c90>
   340e8:	ldr	r7, [r1, r2, lsl #2]
   340ec:	ldr	lr, [sp, #20]
   340f0:	ldr	r9, [sp, #16]
   340f4:	mov	r4, r2
   340f8:	cmp	r7, r5
   340fc:	mvnne	r4, #0
   34100:	cmp	r4, #0
   34104:	blt	34118 <__assert_fail@plt+0x22ce0>
   34108:	cmp	r3, r4
   3410c:	strgt	sl, [r8, #4]
   34110:	cmpgt	sl, r4
   34114:	bgt	3403c <__assert_fail@plt+0x22c04>
   34118:	ldr	r1, [sp, #28]
   3411c:	add	ip, ip, #1
   34120:	ldr	r1, [r1]
   34124:	cmp	ip, r1
   34128:	blt	3405c <__assert_fail@plt+0x22c24>
   3412c:	b	34134 <__assert_fail@plt+0x22cfc>
   34130:	ldr	r0, [sp, #40]	; 0x28
   34134:	bl	1386c <__assert_fail@plt+0x2434>
   34138:	mov	r5, #0
   3413c:	mov	r0, r5
   34140:	sub	sp, fp, #28
   34144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34148:	mov	r5, r0
   3414c:	ldr	r0, [sp, #40]	; 0x28
   34150:	bl	1386c <__assert_fail@plt+0x2434>
   34154:	b	3413c <__assert_fail@plt+0x22d04>
   34158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3415c:	add	fp, sp, #28
   34160:	sub	sp, sp, #28
   34164:	ldr	ip, [r0, #108]	; 0x6c
   34168:	str	r1, [sp, #24]
   3416c:	ldr	r1, [r0, #84]	; 0x54
   34170:	mov	r4, r3
   34174:	str	r2, [sp, #8]
   34178:	str	r0, [sp, #16]
   3417c:	cmp	ip, #1
   34180:	str	r1, [sp, #20]
   34184:	blt	341ec <__assert_fail@plt+0x22db4>
   34188:	ldr	r1, [r0, #116]	; 0x74
   3418c:	mov	r9, #0
   34190:	mov	r2, #1
   34194:	mov	r3, ip
   34198:	add	r7, r3, r9
   3419c:	add	r7, r7, r7, lsr #31
   341a0:	asr	r6, r7, #1
   341a4:	add	r5, r6, r6, lsl #1
   341a8:	add	r5, r1, r5, lsl #3
   341ac:	ldr	r5, [r5, #4]
   341b0:	cmp	r5, r4
   341b4:	addlt	r9, r2, r7, asr #1
   341b8:	movge	r3, r6
   341bc:	cmp	r9, r3
   341c0:	blt	34198 <__assert_fail@plt+0x22d60>
   341c4:	cmp	r9, ip
   341c8:	bge	341f8 <__assert_fail@plt+0x22dc0>
   341cc:	ldr	r0, [sp, #16]
   341d0:	add	r2, r9, r9, lsl #1
   341d4:	ldr	r1, [r0, #116]	; 0x74
   341d8:	add	r1, r1, r2, lsl #3
   341dc:	ldr	r1, [r1, #4]
   341e0:	cmp	r1, r4
   341e4:	mvnne	r9, #0
   341e8:	b	341fc <__assert_fail@plt+0x22dc4>
   341ec:	mov	r9, #0
   341f0:	cmp	r9, ip
   341f4:	blt	341cc <__assert_fail@plt+0x22d94>
   341f8:	mvn	r9, #0
   341fc:	ldr	r8, [fp, #12]
   34200:	cmp	ip, #1
   34204:	blt	3424c <__assert_fail@plt+0x22e14>
   34208:	ldr	r0, [sp, #16]
   3420c:	mov	r6, #0
   34210:	mov	r2, #1
   34214:	mov	r3, ip
   34218:	ldr	r1, [r0, #116]	; 0x74
   3421c:	add	r7, r3, r6
   34220:	add	r7, r7, r7, lsr #31
   34224:	asr	r5, r7, #1
   34228:	add	r0, r5, r5, lsl #1
   3422c:	add	r0, r1, r0, lsl #3
   34230:	ldr	r0, [r0, #4]
   34234:	cmp	r0, r8
   34238:	addlt	r6, r2, r7, asr #1
   3423c:	movge	r3, r5
   34240:	cmp	r6, r3
   34244:	blt	3421c <__assert_fail@plt+0x22de4>
   34248:	b	34250 <__assert_fail@plt+0x22e18>
   3424c:	mov	r6, #0
   34250:	cmp	r6, ip
   34254:	ldr	ip, [sp, #16]
   34258:	bge	34278 <__assert_fail@plt+0x22e40>
   3425c:	ldr	r0, [ip, #116]	; 0x74
   34260:	add	r1, r6, r6, lsl #1
   34264:	add	r0, r0, r1, lsl #3
   34268:	ldr	r0, [r0, #4]
   3426c:	cmp	r0, r8
   34270:	mvnne	r6, #0
   34274:	b	3427c <__assert_fail@plt+0x22e44>
   34278:	mvn	r6, #0
   3427c:	ldr	r0, [sp, #24]
   34280:	ldr	r0, [r0, #4]
   34284:	cmp	r0, #1
   34288:	blt	34408 <__assert_fail@plt+0x22fd0>
   3428c:	mov	sl, #0
   34290:	str	r4, [sp, #12]
   34294:	ldr	r0, [sp, #24]
   34298:	ldr	r3, [ip, #116]	; 0x74
   3429c:	ldr	r5, [sp, #20]
   342a0:	ldr	r0, [r0, #8]
   342a4:	ldr	r5, [r5]
   342a8:	ldr	r2, [r0, sl, lsl #2]
   342ac:	mov	r0, r3
   342b0:	add	r1, r2, r2, lsl #1
   342b4:	ldr	r7, [r0, r1, lsl #3]!
   342b8:	ldr	r0, [r0, #8]
   342bc:	ldr	r5, [r5, r7, lsl #3]
   342c0:	mvn	r7, #0
   342c4:	cmp	r0, r4
   342c8:	ble	342d4 <__assert_fail@plt+0x22e9c>
   342cc:	mvn	r8, #0
   342d0:	b	34360 <__assert_fail@plt+0x22f28>
   342d4:	add	r1, r3, r1, lsl #3
   342d8:	mov	r8, #1
   342dc:	ldr	r1, [r1, #12]
   342e0:	cmp	r1, r4
   342e4:	blt	34360 <__assert_fail@plt+0x22f28>
   342e8:	sub	r1, r1, r4
   342ec:	mov	lr, r5
   342f0:	cmp	r0, r4
   342f4:	mov	r4, #1
   342f8:	clz	r1, r1
   342fc:	lsr	r5, r1, #5
   34300:	lsl	r1, r5, #1
   34304:	orreq	r1, r4, r5, lsl #1
   34308:	cmp	r1, #0
   3430c:	beq	34354 <__assert_fail@plt+0x22f1c>
   34310:	ldr	r3, [sp, #8]
   34314:	mov	r0, ip
   34318:	mov	r2, lr
   3431c:	str	r9, [sp]
   34320:	mov	r5, lr
   34324:	bl	34414 <__assert_fail@plt+0x22fdc>
   34328:	mov	r8, r0
   3432c:	ldr	r0, [sp, #24]
   34330:	ldr	ip, [sp, #16]
   34334:	ldr	r4, [sp, #12]
   34338:	ldr	r0, [r0, #8]
   3433c:	ldr	r3, [ip, #116]	; 0x74
   34340:	ldr	r2, [r0, sl, lsl #2]
   34344:	add	r0, r2, r2, lsl #1
   34348:	add	r0, r3, r0, lsl #3
   3434c:	ldr	r0, [r0, #8]
   34350:	b	34360 <__assert_fail@plt+0x22f28>
   34354:	ldr	r4, [sp, #12]
   34358:	mov	r8, #0
   3435c:	mov	r5, lr
   34360:	ldr	r1, [fp, #12]
   34364:	cmp	r0, r1
   34368:	bgt	343d0 <__assert_fail@plt+0x22f98>
   3436c:	add	r1, r2, r2, lsl #1
   34370:	ldr	r2, [fp, #12]
   34374:	mov	r7, #1
   34378:	add	r1, r3, r1, lsl #3
   3437c:	ldr	r1, [r1, #12]
   34380:	cmp	r1, r2
   34384:	blt	343d0 <__assert_fail@plt+0x22f98>
   34388:	ldr	r2, [fp, #12]
   3438c:	sub	r1, r1, r2
   34390:	mov	r3, r2
   34394:	clz	r1, r1
   34398:	cmp	r0, r3
   3439c:	mov	r0, #1
   343a0:	lsr	r2, r1, #5
   343a4:	lsl	r1, r2, #1
   343a8:	orreq	r1, r0, r2, lsl #1
   343ac:	cmp	r1, #0
   343b0:	beq	343f0 <__assert_fail@plt+0x22fb8>
   343b4:	ldr	r3, [fp, #8]
   343b8:	mov	r0, ip
   343bc:	mov	r2, r5
   343c0:	str	r6, [sp]
   343c4:	bl	34414 <__assert_fail@plt+0x22fdc>
   343c8:	ldr	ip, [sp, #16]
   343cc:	mov	r7, r0
   343d0:	cmp	r7, r8
   343d4:	bne	343fc <__assert_fail@plt+0x22fc4>
   343d8:	ldr	r0, [sp, #24]
   343dc:	add	sl, sl, #1
   343e0:	ldr	r0, [r0, #4]
   343e4:	cmp	sl, r0
   343e8:	blt	34294 <__assert_fail@plt+0x22e5c>
   343ec:	b	34408 <__assert_fail@plt+0x22fd0>
   343f0:	mov	r7, #0
   343f4:	cmp	r7, r8
   343f8:	beq	343d8 <__assert_fail@plt+0x22fa0>
   343fc:	mov	r0, #1
   34400:	sub	sp, fp, #28
   34404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34408:	mov	r0, #0
   3440c:	sub	sp, fp, #28
   34410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34418:	add	fp, sp, #28
   3441c:	sub	sp, sp, #36	; 0x24
   34420:	ldr	r4, [r0, #84]	; 0x54
   34424:	mov	r7, r0
   34428:	mov	r5, r1
   3442c:	add	r1, r3, r3, lsl #1
   34430:	str	r3, [sp, #32]
   34434:	ldr	r0, [r4, #24]
   34438:	add	r1, r0, r1, lsl #2
   3443c:	mov	lr, r1
   34440:	ldr	r0, [lr, #4]!
   34444:	cmp	r0, #1
   34448:	blt	345e4 <__assert_fail@plt+0x231ac>
   3444c:	mov	ip, #1
   34450:	mov	r6, r2
   34454:	and	r3, r5, #2
   34458:	mov	sl, #0
   3445c:	mvn	r2, ip, lsl r2
   34460:	cmp	r6, #31
   34464:	str	r3, [sp, #16]
   34468:	str	r2, [sp, #24]
   3446c:	lsl	r2, ip, r6
   34470:	and	ip, r5, #1
   34474:	str	r2, [sp, #28]
   34478:	mov	r2, #0
   3447c:	str	ip, [sp, #12]
   34480:	movwgt	r2, #1
   34484:	orr	r2, r2, r3, lsr #1
   34488:	add	r3, r1, #8
   3448c:	str	r2, [sp, #20]
   34490:	stmib	sp, {r3, lr}
   34494:	ldr	r1, [r3]
   34498:	ldr	r9, [r1, sl, lsl #2]
   3449c:	ldr	r1, [r4]
   344a0:	add	r2, r1, r9, lsl #3
   344a4:	ldrb	r2, [r2, #4]
   344a8:	cmp	r2, #9
   344ac:	beq	345a8 <__assert_fail@plt+0x23170>
   344b0:	cmp	r2, #8
   344b4:	beq	345c4 <__assert_fail@plt+0x2318c>
   344b8:	cmp	r2, #4
   344bc:	bne	345d8 <__assert_fail@plt+0x231a0>
   344c0:	ldr	r1, [fp, #8]
   344c4:	cmn	r1, #1
   344c8:	beq	345d8 <__assert_fail@plt+0x231a0>
   344cc:	ldr	r1, [fp, #8]
   344d0:	ldr	r0, [r7, #116]	; 0x74
   344d4:	add	r1, r1, r1, lsl #1
   344d8:	add	r0, r0, r1, lsl #3
   344dc:	add	r8, r0, #16
   344e0:	ldr	r0, [r8, #-16]
   344e4:	cmp	r0, r9
   344e8:	bne	34584 <__assert_fail@plt+0x2314c>
   344ec:	cmp	r6, #31
   344f0:	bgt	34504 <__assert_fail@plt+0x230cc>
   344f4:	ldr	r0, [r8]
   344f8:	ldr	r1, [sp, #28]
   344fc:	tst	r0, r1
   34500:	beq	34584 <__assert_fail@plt+0x2314c>
   34504:	ldr	r0, [r4, #20]
   34508:	add	r1, r9, r9, lsl #1
   3450c:	add	r0, r0, r1, lsl #2
   34510:	ldr	r0, [r0, #8]
   34514:	ldr	r3, [r0]
   34518:	ldr	r0, [sp, #32]
   3451c:	cmp	r3, r0
   34520:	beq	345f0 <__assert_fail@plt+0x231b8>
   34524:	ldr	r0, [fp, #8]
   34528:	mov	r1, r5
   3452c:	mov	r2, r6
   34530:	str	r0, [sp]
   34534:	mov	r0, r7
   34538:	bl	34414 <__assert_fail@plt+0x22fdc>
   3453c:	cmp	r0, #0
   34540:	beq	34558 <__assert_fail@plt+0x23120>
   34544:	cmn	r0, #1
   34548:	beq	34604 <__assert_fail@plt+0x231cc>
   3454c:	cmp	r6, #31
   34550:	ble	34574 <__assert_fail@plt+0x2313c>
   34554:	b	34584 <__assert_fail@plt+0x2314c>
   34558:	ldr	r0, [sp, #20]
   3455c:	cmp	r0, #0
   34560:	beq	34574 <__assert_fail@plt+0x2313c>
   34564:	ldr	r0, [sp, #16]
   34568:	cmp	r0, #0
   3456c:	beq	34584 <__assert_fail@plt+0x2314c>
   34570:	b	34600 <__assert_fail@plt+0x231c8>
   34574:	ldr	r0, [r8]
   34578:	ldr	r1, [sp, #24]
   3457c:	and	r0, r0, r1
   34580:	str	r0, [r8]
   34584:	ldrb	r0, [r8, #4]
   34588:	add	r8, r8, #24
   3458c:	cmp	r0, #0
   34590:	bne	344e0 <__assert_fail@plt+0x230a8>
   34594:	ldr	lr, [sp, #8]
   34598:	ldr	ip, [sp, #12]
   3459c:	ldr	r3, [sp, #4]
   345a0:	ldr	r0, [lr]
   345a4:	b	345d8 <__assert_fail@plt+0x231a0>
   345a8:	ldr	r2, [sp, #16]
   345ac:	cmp	r2, #0
   345b0:	beq	345d8 <__assert_fail@plt+0x231a0>
   345b4:	ldr	r1, [r1, r9, lsl #3]
   345b8:	cmp	r1, r6
   345bc:	bne	345d8 <__assert_fail@plt+0x231a0>
   345c0:	b	34600 <__assert_fail@plt+0x231c8>
   345c4:	cmp	ip, #0
   345c8:	beq	345d8 <__assert_fail@plt+0x231a0>
   345cc:	ldr	r1, [r1, r9, lsl #3]
   345d0:	cmp	r1, r6
   345d4:	beq	3460c <__assert_fail@plt+0x231d4>
   345d8:	add	sl, sl, #1
   345dc:	cmp	sl, r0
   345e0:	blt	34494 <__assert_fail@plt+0x2305c>
   345e4:	ubfx	r0, r5, #1, #1
   345e8:	sub	sp, fp, #28
   345ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   345f0:	ldr	r0, [sp, #12]
   345f4:	rsb	r0, r0, #0
   345f8:	sub	sp, fp, #28
   345fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34600:	mov	r0, #0
   34604:	sub	sp, fp, #28
   34608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3460c:	mvn	r0, #0
   34610:	sub	sp, fp, #28
   34614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34618:	push	{r4, r5, fp, lr}
   3461c:	add	fp, sp, #8
   34620:	mov	r4, r1
   34624:	mov	r1, #0
   34628:	mov	r5, r0
   3462c:	mov	r2, r4
   34630:	bl	113a8 <memchr@plt>
   34634:	rsb	r1, r5, #1
   34638:	cmp	r0, #0
   3463c:	addne	r4, r1, r0
   34640:	mov	r0, r4
   34644:	pop	{r4, r5, fp, pc}
   34648:	push	{r4, sl, fp, lr}
   3464c:	add	fp, sp, #8
   34650:	ldrb	r3, [r0]
   34654:	ldrb	ip, [r1]
   34658:	cmp	r3, #45	; 0x2d
   3465c:	bne	34734 <__assert_fail@plt+0x232fc>
   34660:	ldrb	r3, [r0, #1]!
   34664:	cmp	r3, #48	; 0x30
   34668:	beq	34660 <__assert_fail@plt+0x23228>
   3466c:	cmp	ip, #45	; 0x2d
   34670:	bne	3483c <__assert_fail@plt+0x23404>
   34674:	ldrb	ip, [r1, #1]!
   34678:	cmp	ip, #48	; 0x30
   3467c:	beq	34674 <__assert_fail@plt+0x2323c>
   34680:	sub	lr, r3, #48	; 0x30
   34684:	cmp	lr, #9
   34688:	bhi	346c8 <__assert_fail@plt+0x23290>
   3468c:	cmp	ip, r3
   34690:	bne	346c8 <__assert_fail@plt+0x23290>
   34694:	mov	r2, #0
   34698:	add	r3, r1, r2
   3469c:	ldrb	ip, [r3, #1]
   346a0:	add	r3, r0, r2
   346a4:	add	r2, r2, #1
   346a8:	ldrb	r3, [r3, #1]
   346ac:	sub	lr, r3, #48	; 0x30
   346b0:	cmp	ip, r3
   346b4:	bne	346c0 <__assert_fail@plt+0x23288>
   346b8:	cmp	lr, #10
   346bc:	bcc	34698 <__assert_fail@plt+0x23260>
   346c0:	add	r1, r1, r2
   346c4:	add	r0, r0, r2
   346c8:	cmp	lr, #9
   346cc:	mov	r2, #0
   346d0:	mov	lr, #0
   346d4:	bhi	346f4 <__assert_fail@plt+0x232bc>
   346d8:	add	r0, r0, #1
   346dc:	mov	lr, #0
   346e0:	ldrb	r4, [r0, lr]
   346e4:	add	lr, lr, #1
   346e8:	sub	r4, r4, #48	; 0x30
   346ec:	cmp	r4, #10
   346f0:	bcc	346e0 <__assert_fail@plt+0x232a8>
   346f4:	sub	r0, ip, #48	; 0x30
   346f8:	cmp	r0, #9
   346fc:	bhi	3471c <__assert_fail@plt+0x232e4>
   34700:	add	r0, r1, #1
   34704:	mov	r2, #0
   34708:	ldrb	r1, [r0, r2]
   3470c:	add	r2, r2, #1
   34710:	sub	r1, r1, #48	; 0x30
   34714:	cmp	r1, #10
   34718:	bcc	34708 <__assert_fail@plt+0x232d0>
   3471c:	cmp	lr, r2
   34720:	bne	34854 <__assert_fail@plt+0x2341c>
   34724:	cmp	lr, #0
   34728:	subne	lr, ip, r3
   3472c:	mov	r0, lr
   34730:	pop	{r4, sl, fp, pc}
   34734:	cmp	ip, #45	; 0x2d
   34738:	bne	34788 <__assert_fail@plt+0x23350>
   3473c:	add	r1, r1, #1
   34740:	ldrb	r2, [r1], #1
   34744:	cmp	r2, #48	; 0x30
   34748:	beq	34740 <__assert_fail@plt+0x23308>
   3474c:	sub	r1, r2, #48	; 0x30
   34750:	mov	lr, #1
   34754:	cmp	r1, #10
   34758:	bcc	3484c <__assert_fail@plt+0x23414>
   3475c:	cmp	r3, #48	; 0x30
   34760:	bne	34774 <__assert_fail@plt+0x2333c>
   34764:	add	r0, r0, #1
   34768:	ldrb	r3, [r0], #1
   3476c:	cmp	r3, #48	; 0x30
   34770:	beq	34768 <__assert_fail@plt+0x23330>
   34774:	sub	r0, r3, #48	; 0x30
   34778:	mov	lr, #0
   3477c:	cmp	r0, #10
   34780:	b	34858 <__assert_fail@plt+0x23420>
   34784:	ldrb	r3, [r0, #1]!
   34788:	cmp	r3, #48	; 0x30
   3478c:	beq	34784 <__assert_fail@plt+0x2334c>
   34790:	b	34798 <__assert_fail@plt+0x23360>
   34794:	ldrb	ip, [r1, #1]!
   34798:	cmp	ip, #48	; 0x30
   3479c:	beq	34794 <__assert_fail@plt+0x2335c>
   347a0:	sub	r2, r3, #48	; 0x30
   347a4:	cmp	r2, #9
   347a8:	bhi	347d0 <__assert_fail@plt+0x23398>
   347ac:	cmp	r3, ip
   347b0:	bne	347d0 <__assert_fail@plt+0x23398>
   347b4:	ldrb	r3, [r0, #1]!
   347b8:	ldrb	ip, [r1, #1]!
   347bc:	sub	r2, r3, #48	; 0x30
   347c0:	cmp	r3, ip
   347c4:	bne	347d0 <__assert_fail@plt+0x23398>
   347c8:	cmp	r2, #10
   347cc:	bcc	347b4 <__assert_fail@plt+0x2337c>
   347d0:	mov	r4, #0
   347d4:	cmp	r2, #9
   347d8:	mov	lr, #0
   347dc:	bhi	347fc <__assert_fail@plt+0x233c4>
   347e0:	add	r0, r0, #1
   347e4:	mov	lr, #0
   347e8:	ldrb	r2, [r0, lr]
   347ec:	add	lr, lr, #1
   347f0:	sub	r2, r2, #48	; 0x30
   347f4:	cmp	r2, #10
   347f8:	bcc	347e8 <__assert_fail@plt+0x233b0>
   347fc:	sub	r0, ip, #48	; 0x30
   34800:	cmp	r0, #9
   34804:	bhi	34824 <__assert_fail@plt+0x233ec>
   34808:	add	r0, r1, #1
   3480c:	mov	r4, #0
   34810:	ldrb	r1, [r0, r4]
   34814:	add	r4, r4, #1
   34818:	sub	r1, r1, #48	; 0x30
   3481c:	cmp	r1, #10
   34820:	bcc	34810 <__assert_fail@plt+0x233d8>
   34824:	cmp	lr, r4
   34828:	bne	34864 <__assert_fail@plt+0x2342c>
   3482c:	cmp	lr, #0
   34830:	subne	lr, r3, ip
   34834:	mov	r0, lr
   34838:	pop	{r4, sl, fp, pc}
   3483c:	sub	r0, r3, #48	; 0x30
   34840:	mvn	lr, #0
   34844:	cmp	r0, #10
   34848:	bcs	3486c <__assert_fail@plt+0x23434>
   3484c:	mov	r0, lr
   34850:	pop	{r4, sl, fp, pc}
   34854:	mvn	lr, #0
   34858:	movwcc	lr, #1
   3485c:	mov	r0, lr
   34860:	pop	{r4, sl, fp, pc}
   34864:	mov	lr, #1
   34868:	b	34890 <__assert_fail@plt+0x23458>
   3486c:	cmp	ip, #48	; 0x30
   34870:	bne	34884 <__assert_fail@plt+0x2344c>
   34874:	add	r0, r1, #1
   34878:	ldrb	ip, [r0], #1
   3487c:	cmp	ip, #48	; 0x30
   34880:	beq	34878 <__assert_fail@plt+0x23440>
   34884:	sub	r0, ip, #48	; 0x30
   34888:	mov	lr, #0
   3488c:	cmp	r0, #10
   34890:	mvncc	lr, #0
   34894:	mov	r0, lr
   34898:	pop	{r4, sl, fp, pc}
   3489c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   348a0:	add	fp, sp, #24
   348a4:	sub	sp, sp, #32
   348a8:	ldr	r6, [fp, #12]
   348ac:	ldr	r7, [fp, #8]
   348b0:	mov	r4, r2
   348b4:	mov	r8, r0
   348b8:	cmp	r1, #0
   348bc:	beq	348e4 <__assert_fail@plt+0x234ac>
   348c0:	movw	r2, #32145	; 0x7d91
   348c4:	mov	r5, r1
   348c8:	str	r3, [sp, #4]
   348cc:	str	r4, [sp]
   348d0:	mov	r0, r8
   348d4:	mov	r1, #1
   348d8:	movt	r2, #3
   348dc:	mov	r3, r5
   348e0:	b	348fc <__assert_fail@plt+0x234c4>
   348e4:	movw	r2, #32157	; 0x7d9d
   348e8:	str	r3, [sp]
   348ec:	mov	r0, r8
   348f0:	mov	r1, #1
   348f4:	mov	r3, r4
   348f8:	movt	r2, #3
   348fc:	bl	1139c <__fprintf_chk@plt>
   34900:	movw	r1, #32164	; 0x7da4
   34904:	mov	r0, #0
   34908:	mov	r2, #5
   3490c:	movt	r1, #3
   34910:	bl	11228 <dcgettext@plt>
   34914:	movw	r2, #32882	; 0x8072
   34918:	mov	r3, r0
   3491c:	movw	r0, #2022	; 0x7e6
   34920:	mov	r1, #1
   34924:	str	r0, [sp]
   34928:	movt	r2, #3
   3492c:	mov	r0, r8
   34930:	bl	1139c <__fprintf_chk@plt>
   34934:	movw	r4, #25954	; 0x6562
   34938:	mov	r1, r8
   3493c:	movt	r4, #3
   34940:	mov	r0, r4
   34944:	bl	11150 <fputs_unlocked@plt>
   34948:	movw	r1, #32168	; 0x7da8
   3494c:	mov	r0, #0
   34950:	mov	r2, #5
   34954:	movt	r1, #3
   34958:	bl	11228 <dcgettext@plt>
   3495c:	movw	r3, #32339	; 0x7e53
   34960:	mov	r2, r0
   34964:	mov	r0, r8
   34968:	mov	r1, #1
   3496c:	movt	r3, #3
   34970:	bl	1139c <__fprintf_chk@plt>
   34974:	mov	r0, r4
   34978:	mov	r1, r8
   3497c:	bl	11150 <fputs_unlocked@plt>
   34980:	cmp	r6, #9
   34984:	bhi	349c0 <__assert_fail@plt+0x23588>
   34988:	add	r0, pc, #0
   3498c:	ldr	pc, [r0, r6, lsl #2]
   34990:			; <UNDEFINED> instruction: 0x000349b8
   34994:	andeq	r4, r3, ip, asr #19
   34998:	strdeq	r4, [r3], -ip
   3499c:	andeq	r4, r3, r4, lsr #20
   349a0:	andeq	r4, r3, ip, asr #20
   349a4:	andeq	r4, r3, r4, ror sl
   349a8:	muleq	r3, ip, sl
   349ac:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   349b0:	andeq	r4, r3, r4, ror fp
   349b4:	andeq	r4, r3, ip, lsl fp
   349b8:	sub	sp, fp, #24
   349bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   349c0:	movw	r1, #32692	; 0x7fb4
   349c4:	movt	r1, #3
   349c8:	b	34b24 <__assert_fail@plt+0x236ec>
   349cc:	movw	r1, #32373	; 0x7e75
   349d0:	mov	r0, #0
   349d4:	mov	r2, #5
   349d8:	movt	r1, #3
   349dc:	bl	11228 <dcgettext@plt>
   349e0:	ldr	r3, [r7]
   349e4:	mov	r2, r0
   349e8:	mov	r0, r8
   349ec:	mov	r1, #1
   349f0:	sub	sp, fp, #24
   349f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   349f8:	b	1139c <__fprintf_chk@plt>
   349fc:	movw	r1, #32389	; 0x7e85
   34a00:	mov	r0, #0
   34a04:	mov	r2, #5
   34a08:	movt	r1, #3
   34a0c:	bl	11228 <dcgettext@plt>
   34a10:	mov	r2, r0
   34a14:	ldr	r3, [r7]
   34a18:	ldr	r0, [r7, #4]
   34a1c:	str	r0, [sp]
   34a20:	b	34b10 <__assert_fail@plt+0x236d8>
   34a24:	movw	r1, #32412	; 0x7e9c
   34a28:	mov	r0, #0
   34a2c:	mov	r2, #5
   34a30:	movt	r1, #3
   34a34:	bl	11228 <dcgettext@plt>
   34a38:	ldr	r3, [r7]
   34a3c:	mov	r2, r0
   34a40:	ldmib	r7, {r0, r1}
   34a44:	stm	sp, {r0, r1}
   34a48:	b	34b10 <__assert_fail@plt+0x236d8>
   34a4c:	movw	r1, #32440	; 0x7eb8
   34a50:	mov	r0, #0
   34a54:	mov	r2, #5
   34a58:	movt	r1, #3
   34a5c:	bl	11228 <dcgettext@plt>
   34a60:	ldr	r3, [r7]
   34a64:	mov	r2, r0
   34a68:	ldmib	r7, {r0, r1, r7}
   34a6c:	stm	sp, {r0, r1, r7}
   34a70:	b	34b10 <__assert_fail@plt+0x236d8>
   34a74:	movw	r1, #32472	; 0x7ed8
   34a78:	mov	r0, #0
   34a7c:	mov	r2, #5
   34a80:	movt	r1, #3
   34a84:	bl	11228 <dcgettext@plt>
   34a88:	ldr	r3, [r7]
   34a8c:	mov	r2, r0
   34a90:	ldmib	r7, {r0, r1, r6, r7}
   34a94:	stm	sp, {r0, r1, r6, r7}
   34a98:	b	34b10 <__assert_fail@plt+0x236d8>
   34a9c:	movw	r1, #32508	; 0x7efc
   34aa0:	mov	r0, #0
   34aa4:	mov	r2, #5
   34aa8:	movt	r1, #3
   34aac:	bl	11228 <dcgettext@plt>
   34ab0:	ldr	r3, [r7]
   34ab4:	mov	r2, r0
   34ab8:	ldmib	r7, {r0, r1, r6}
   34abc:	ldr	r5, [r7, #16]
   34ac0:	ldr	r7, [r7, #20]
   34ac4:	stm	sp, {r0, r1, r6}
   34ac8:	str	r5, [sp, #12]
   34acc:	str	r7, [sp, #16]
   34ad0:	b	34b10 <__assert_fail@plt+0x236d8>
   34ad4:	movw	r1, #32548	; 0x7f24
   34ad8:	mov	r0, #0
   34adc:	mov	r2, #5
   34ae0:	movt	r1, #3
   34ae4:	bl	11228 <dcgettext@plt>
   34ae8:	ldr	r3, [r7]
   34aec:	mov	r2, r0
   34af0:	ldmib	r7, {r0, r1, r6}
   34af4:	ldr	r5, [r7, #16]
   34af8:	ldr	r4, [r7, #20]
   34afc:	ldr	r7, [r7, #24]
   34b00:	stm	sp, {r0, r1, r6}
   34b04:	str	r5, [sp, #12]
   34b08:	str	r4, [sp, #16]
   34b0c:	str	r7, [sp, #20]
   34b10:	mov	r0, r8
   34b14:	mov	r1, #1
   34b18:	b	34bc4 <__assert_fail@plt+0x2378c>
   34b1c:	movw	r1, #32640	; 0x7f80
   34b20:	movt	r1, #3
   34b24:	mov	r0, #0
   34b28:	mov	r2, #5
   34b2c:	bl	11228 <dcgettext@plt>
   34b30:	mov	ip, r0
   34b34:	ldr	r3, [r7]
   34b38:	ldr	r0, [r7, #4]
   34b3c:	ldr	r1, [r7, #8]
   34b40:	ldr	r6, [r7, #12]
   34b44:	ldr	r5, [r7, #16]
   34b48:	ldr	r4, [r7, #20]
   34b4c:	ldr	r2, [r7, #24]
   34b50:	ldr	lr, [r7, #28]
   34b54:	ldr	r7, [r7, #32]
   34b58:	stm	sp, {r0, r1, r6}
   34b5c:	str	r5, [sp, #12]
   34b60:	str	r4, [sp, #16]
   34b64:	str	r2, [sp, #20]
   34b68:	str	lr, [sp, #24]
   34b6c:	str	r7, [sp, #28]
   34b70:	b	34bb8 <__assert_fail@plt+0x23780>
   34b74:	movw	r1, #32592	; 0x7f50
   34b78:	mov	r0, #0
   34b7c:	mov	r2, #5
   34b80:	movt	r1, #3
   34b84:	bl	11228 <dcgettext@plt>
   34b88:	mov	ip, r0
   34b8c:	ldr	r3, [r7]
   34b90:	ldmib	r7, {r0, r1, r6}
   34b94:	ldr	r5, [r7, #16]
   34b98:	ldr	r4, [r7, #20]
   34b9c:	ldr	r2, [r7, #24]
   34ba0:	ldr	r7, [r7, #28]
   34ba4:	stm	sp, {r0, r1, r6}
   34ba8:	str	r5, [sp, #12]
   34bac:	str	r4, [sp, #16]
   34bb0:	str	r2, [sp, #20]
   34bb4:	str	r7, [sp, #24]
   34bb8:	mov	r0, r8
   34bbc:	mov	r1, #1
   34bc0:	mov	r2, ip
   34bc4:	bl	1139c <__fprintf_chk@plt>
   34bc8:	sub	sp, fp, #24
   34bcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   34bd0:	push	{r4, sl, fp, lr}
   34bd4:	add	fp, sp, #8
   34bd8:	sub	sp, sp, #8
   34bdc:	ldr	ip, [fp, #8]
   34be0:	mov	lr, #0
   34be4:	ldr	r4, [ip, lr, lsl #2]
   34be8:	add	lr, lr, #1
   34bec:	cmp	r4, #0
   34bf0:	bne	34be4 <__assert_fail@plt+0x237ac>
   34bf4:	sub	r4, lr, #1
   34bf8:	str	ip, [sp]
   34bfc:	str	r4, [sp, #4]
   34c00:	bl	3489c <__assert_fail@plt+0x23464>
   34c04:	sub	sp, fp, #8
   34c08:	pop	{r4, sl, fp, pc}
   34c0c:	push	{fp, lr}
   34c10:	mov	fp, sp
   34c14:	sub	sp, sp, #48	; 0x30
   34c18:	ldr	ip, [fp, #8]
   34c1c:	ldr	lr, [ip]
   34c20:	cmp	lr, #0
   34c24:	str	lr, [sp, #8]
   34c28:	beq	34cc4 <__assert_fail@plt+0x2388c>
   34c2c:	ldr	lr, [ip, #4]
   34c30:	cmp	lr, #0
   34c34:	str	lr, [sp, #12]
   34c38:	beq	34ccc <__assert_fail@plt+0x23894>
   34c3c:	ldr	lr, [ip, #8]
   34c40:	cmp	lr, #0
   34c44:	str	lr, [sp, #16]
   34c48:	beq	34cd4 <__assert_fail@plt+0x2389c>
   34c4c:	ldr	lr, [ip, #12]
   34c50:	cmp	lr, #0
   34c54:	str	lr, [sp, #20]
   34c58:	beq	34cdc <__assert_fail@plt+0x238a4>
   34c5c:	ldr	lr, [ip, #16]
   34c60:	cmp	lr, #0
   34c64:	str	lr, [sp, #24]
   34c68:	beq	34ce4 <__assert_fail@plt+0x238ac>
   34c6c:	ldr	lr, [ip, #20]
   34c70:	cmp	lr, #0
   34c74:	str	lr, [sp, #28]
   34c78:	beq	34cec <__assert_fail@plt+0x238b4>
   34c7c:	ldr	lr, [ip, #24]
   34c80:	cmp	lr, #0
   34c84:	str	lr, [sp, #32]
   34c88:	beq	34cf4 <__assert_fail@plt+0x238bc>
   34c8c:	ldr	lr, [ip, #28]
   34c90:	cmp	lr, #0
   34c94:	str	lr, [sp, #36]	; 0x24
   34c98:	beq	34cfc <__assert_fail@plt+0x238c4>
   34c9c:	ldr	lr, [ip, #32]
   34ca0:	cmp	lr, #0
   34ca4:	str	lr, [sp, #40]	; 0x28
   34ca8:	beq	34d04 <__assert_fail@plt+0x238cc>
   34cac:	ldr	lr, [ip, #36]	; 0x24
   34cb0:	mov	ip, #10
   34cb4:	cmp	lr, #0
   34cb8:	str	lr, [sp, #44]	; 0x2c
   34cbc:	movweq	ip, #9
   34cc0:	b	34d08 <__assert_fail@plt+0x238d0>
   34cc4:	mov	ip, #0
   34cc8:	b	34d08 <__assert_fail@plt+0x238d0>
   34ccc:	mov	ip, #1
   34cd0:	b	34d08 <__assert_fail@plt+0x238d0>
   34cd4:	mov	ip, #2
   34cd8:	b	34d08 <__assert_fail@plt+0x238d0>
   34cdc:	mov	ip, #3
   34ce0:	b	34d08 <__assert_fail@plt+0x238d0>
   34ce4:	mov	ip, #4
   34ce8:	b	34d08 <__assert_fail@plt+0x238d0>
   34cec:	mov	ip, #5
   34cf0:	b	34d08 <__assert_fail@plt+0x238d0>
   34cf4:	mov	ip, #6
   34cf8:	b	34d08 <__assert_fail@plt+0x238d0>
   34cfc:	mov	ip, #7
   34d00:	b	34d08 <__assert_fail@plt+0x238d0>
   34d04:	mov	ip, #8
   34d08:	add	lr, sp, #8
   34d0c:	str	ip, [sp, #4]
   34d10:	str	lr, [sp]
   34d14:	bl	3489c <__assert_fail@plt+0x23464>
   34d18:	mov	sp, fp
   34d1c:	pop	{fp, pc}
   34d20:	push	{fp, lr}
   34d24:	mov	fp, sp
   34d28:	sub	sp, sp, #56	; 0x38
   34d2c:	add	ip, fp, #8
   34d30:	str	ip, [sp, #12]
   34d34:	ldr	lr, [fp, #8]
   34d38:	cmp	lr, #0
   34d3c:	str	lr, [sp, #16]
   34d40:	beq	34ddc <__assert_fail@plt+0x239a4>
   34d44:	ldr	lr, [ip, #4]
   34d48:	cmp	lr, #0
   34d4c:	str	lr, [sp, #20]
   34d50:	beq	34de4 <__assert_fail@plt+0x239ac>
   34d54:	ldr	lr, [ip, #8]
   34d58:	cmp	lr, #0
   34d5c:	str	lr, [sp, #24]
   34d60:	beq	34dec <__assert_fail@plt+0x239b4>
   34d64:	ldr	lr, [ip, #12]
   34d68:	cmp	lr, #0
   34d6c:	str	lr, [sp, #28]
   34d70:	beq	34df4 <__assert_fail@plt+0x239bc>
   34d74:	ldr	lr, [ip, #16]
   34d78:	cmp	lr, #0
   34d7c:	str	lr, [sp, #32]
   34d80:	beq	34dfc <__assert_fail@plt+0x239c4>
   34d84:	ldr	lr, [ip, #20]
   34d88:	cmp	lr, #0
   34d8c:	str	lr, [sp, #36]	; 0x24
   34d90:	beq	34e04 <__assert_fail@plt+0x239cc>
   34d94:	ldr	lr, [ip, #24]
   34d98:	cmp	lr, #0
   34d9c:	str	lr, [sp, #40]	; 0x28
   34da0:	beq	34e0c <__assert_fail@plt+0x239d4>
   34da4:	ldr	lr, [ip, #28]
   34da8:	cmp	lr, #0
   34dac:	str	lr, [sp, #44]	; 0x2c
   34db0:	beq	34e14 <__assert_fail@plt+0x239dc>
   34db4:	ldr	lr, [ip, #32]
   34db8:	cmp	lr, #0
   34dbc:	str	lr, [sp, #48]	; 0x30
   34dc0:	beq	34e1c <__assert_fail@plt+0x239e4>
   34dc4:	ldr	lr, [ip, #36]	; 0x24
   34dc8:	mov	ip, #10
   34dcc:	cmp	lr, #0
   34dd0:	str	lr, [sp, #52]	; 0x34
   34dd4:	movweq	ip, #9
   34dd8:	b	34e20 <__assert_fail@plt+0x239e8>
   34ddc:	mov	ip, #0
   34de0:	b	34e20 <__assert_fail@plt+0x239e8>
   34de4:	mov	ip, #1
   34de8:	b	34e20 <__assert_fail@plt+0x239e8>
   34dec:	mov	ip, #2
   34df0:	b	34e20 <__assert_fail@plt+0x239e8>
   34df4:	mov	ip, #3
   34df8:	b	34e20 <__assert_fail@plt+0x239e8>
   34dfc:	mov	ip, #4
   34e00:	b	34e20 <__assert_fail@plt+0x239e8>
   34e04:	mov	ip, #5
   34e08:	b	34e20 <__assert_fail@plt+0x239e8>
   34e0c:	mov	ip, #6
   34e10:	b	34e20 <__assert_fail@plt+0x239e8>
   34e14:	mov	ip, #7
   34e18:	b	34e20 <__assert_fail@plt+0x239e8>
   34e1c:	mov	ip, #8
   34e20:	add	lr, sp, #16
   34e24:	str	ip, [sp, #4]
   34e28:	str	lr, [sp]
   34e2c:	bl	3489c <__assert_fail@plt+0x23464>
   34e30:	mov	sp, fp
   34e34:	pop	{fp, pc}
   34e38:	push	{fp, lr}
   34e3c:	mov	fp, sp
   34e40:	movw	r0, #37252	; 0x9184
   34e44:	movt	r0, #4
   34e48:	ldr	r1, [r0]
   34e4c:	movw	r0, #25954	; 0x6562
   34e50:	movt	r0, #3
   34e54:	bl	11150 <fputs_unlocked@plt>
   34e58:	movw	r1, #32752	; 0x7ff0
   34e5c:	mov	r0, #0
   34e60:	mov	r2, #5
   34e64:	movt	r1, #3
   34e68:	bl	11228 <dcgettext@plt>
   34e6c:	movw	r2, #32772	; 0x8004
   34e70:	mov	r1, r0
   34e74:	mov	r0, #1
   34e78:	movt	r2, #3
   34e7c:	bl	11384 <__printf_chk@plt>
   34e80:	movw	r1, #32794	; 0x801a
   34e84:	mov	r0, #0
   34e88:	mov	r2, #5
   34e8c:	movt	r1, #3
   34e90:	bl	11228 <dcgettext@plt>
   34e94:	movw	r2, #25521	; 0x63b1
   34e98:	movw	r3, #25763	; 0x64a3
   34e9c:	mov	r1, r0
   34ea0:	mov	r0, #1
   34ea4:	movt	r2, #3
   34ea8:	movt	r3, #3
   34eac:	bl	11384 <__printf_chk@plt>
   34eb0:	movw	r1, #32814	; 0x802e
   34eb4:	mov	r0, #0
   34eb8:	mov	r2, #5
   34ebc:	movt	r1, #3
   34ec0:	bl	11228 <dcgettext@plt>
   34ec4:	movw	r2, #32853	; 0x8055
   34ec8:	mov	r1, r0
   34ecc:	mov	r0, #1
   34ed0:	movt	r2, #3
   34ed4:	pop	{fp, lr}
   34ed8:	b	11384 <__printf_chk@plt>
   34edc:	push	{r4, r5, r6, sl, fp, lr}
   34ee0:	add	fp, sp, #16
   34ee4:	mov	r4, r2
   34ee8:	mov	r5, r1
   34eec:	mov	r6, r0
   34ef0:	bl	359f8 <__assert_fail@plt+0x245c0>
   34ef4:	cmp	r0, #0
   34ef8:	popne	{r4, r5, r6, sl, fp, pc}
   34efc:	cmp	r6, #0
   34f00:	beq	34f14 <__assert_fail@plt+0x23adc>
   34f04:	cmp	r5, #0
   34f08:	cmpne	r4, #0
   34f0c:	bne	34f14 <__assert_fail@plt+0x23adc>
   34f10:	pop	{r4, r5, r6, sl, fp, pc}
   34f14:	bl	354b4 <__assert_fail@plt+0x2407c>
   34f18:	push	{r4, r5, r6, sl, fp, lr}
   34f1c:	add	fp, sp, #16
   34f20:	mov	r4, r2
   34f24:	mov	r5, r1
   34f28:	mov	r6, r0
   34f2c:	bl	359f8 <__assert_fail@plt+0x245c0>
   34f30:	cmp	r0, #0
   34f34:	popne	{r4, r5, r6, sl, fp, pc}
   34f38:	cmp	r6, #0
   34f3c:	beq	34f50 <__assert_fail@plt+0x23b18>
   34f40:	cmp	r5, #0
   34f44:	cmpne	r4, #0
   34f48:	bne	34f50 <__assert_fail@plt+0x23b18>
   34f4c:	pop	{r4, r5, r6, sl, fp, pc}
   34f50:	bl	354b4 <__assert_fail@plt+0x2407c>
   34f54:	push	{fp, lr}
   34f58:	mov	fp, sp
   34f5c:	bl	3554c <__assert_fail@plt+0x24114>
   34f60:	cmp	r0, #0
   34f64:	popne	{fp, pc}
   34f68:	bl	354b4 <__assert_fail@plt+0x2407c>
   34f6c:	push	{fp, lr}
   34f70:	mov	fp, sp
   34f74:	bl	3554c <__assert_fail@plt+0x24114>
   34f78:	cmp	r0, #0
   34f7c:	popne	{fp, pc}
   34f80:	bl	354b4 <__assert_fail@plt+0x2407c>
   34f84:	push	{fp, lr}
   34f88:	mov	fp, sp
   34f8c:	bl	3554c <__assert_fail@plt+0x24114>
   34f90:	cmp	r0, #0
   34f94:	popne	{fp, pc}
   34f98:	bl	354b4 <__assert_fail@plt+0x2407c>
   34f9c:	push	{r4, r5, fp, lr}
   34fa0:	add	fp, sp, #8
   34fa4:	mov	r4, r1
   34fa8:	mov	r5, r0
   34fac:	bl	3557c <__assert_fail@plt+0x24144>
   34fb0:	cmp	r0, #0
   34fb4:	popne	{r4, r5, fp, pc}
   34fb8:	cmp	r5, #0
   34fbc:	beq	34fcc <__assert_fail@plt+0x23b94>
   34fc0:	cmp	r4, #0
   34fc4:	bne	34fcc <__assert_fail@plt+0x23b94>
   34fc8:	pop	{r4, r5, fp, pc}
   34fcc:	bl	354b4 <__assert_fail@plt+0x2407c>
   34fd0:	push	{fp, lr}
   34fd4:	mov	fp, sp
   34fd8:	cmp	r1, #0
   34fdc:	orreq	r1, r1, #1
   34fe0:	bl	3557c <__assert_fail@plt+0x24144>
   34fe4:	cmp	r0, #0
   34fe8:	popne	{fp, pc}
   34fec:	bl	354b4 <__assert_fail@plt+0x2407c>
   34ff0:	push	{fp, lr}
   34ff4:	mov	fp, sp
   34ff8:	clz	r3, r2
   34ffc:	lsr	ip, r3, #5
   35000:	clz	r3, r1
   35004:	lsr	r3, r3, #5
   35008:	orrs	r3, r3, ip
   3500c:	movwne	r1, #1
   35010:	movwne	r2, #1
   35014:	bl	359f8 <__assert_fail@plt+0x245c0>
   35018:	cmp	r0, #0
   3501c:	popne	{fp, pc}
   35020:	bl	354b4 <__assert_fail@plt+0x2407c>
   35024:	push	{fp, lr}
   35028:	mov	fp, sp
   3502c:	mov	r2, r1
   35030:	mov	r1, r0
   35034:	mov	r0, #0
   35038:	bl	359f8 <__assert_fail@plt+0x245c0>
   3503c:	cmp	r0, #0
   35040:	popne	{fp, pc}
   35044:	bl	354b4 <__assert_fail@plt+0x2407c>
   35048:	push	{fp, lr}
   3504c:	mov	fp, sp
   35050:	mov	r2, r1
   35054:	mov	r1, r0
   35058:	clz	r0, r2
   3505c:	clz	r3, r1
   35060:	lsr	r0, r0, #5
   35064:	lsr	r3, r3, #5
   35068:	orrs	r0, r3, r0
   3506c:	movwne	r1, #1
   35070:	movwne	r2, #1
   35074:	mov	r0, #0
   35078:	bl	359f8 <__assert_fail@plt+0x245c0>
   3507c:	cmp	r0, #0
   35080:	popne	{fp, pc}
   35084:	bl	354b4 <__assert_fail@plt+0x2407c>
   35088:	push	{r4, r5, r6, sl, fp, lr}
   3508c:	add	fp, sp, #16
   35090:	ldr	r5, [r1]
   35094:	mov	r4, r1
   35098:	mov	r6, r0
   3509c:	cmp	r0, #0
   350a0:	beq	350b8 <__assert_fail@plt+0x23c80>
   350a4:	mov	r0, #1
   350a8:	add	r0, r0, r5, lsr #1
   350ac:	adds	r5, r5, r0
   350b0:	bcc	350c0 <__assert_fail@plt+0x23c88>
   350b4:	b	350fc <__assert_fail@plt+0x23cc4>
   350b8:	cmp	r5, #0
   350bc:	movweq	r5, #64	; 0x40
   350c0:	mov	r0, r6
   350c4:	mov	r1, r5
   350c8:	mov	r2, #1
   350cc:	bl	359f8 <__assert_fail@plt+0x245c0>
   350d0:	cmp	r5, #0
   350d4:	mov	r1, r5
   350d8:	movwne	r1, #1
   350dc:	cmp	r0, #0
   350e0:	bne	350f4 <__assert_fail@plt+0x23cbc>
   350e4:	clz	r2, r6
   350e8:	lsr	r2, r2, #5
   350ec:	orrs	r1, r2, r1
   350f0:	bne	350fc <__assert_fail@plt+0x23cc4>
   350f4:	str	r5, [r4]
   350f8:	pop	{r4, r5, r6, sl, fp, pc}
   350fc:	bl	354b4 <__assert_fail@plt+0x2407c>
   35100:	push	{r4, r5, r6, r7, fp, lr}
   35104:	add	fp, sp, #16
   35108:	ldr	r5, [r1]
   3510c:	mov	r6, r2
   35110:	mov	r4, r1
   35114:	mov	r7, r0
   35118:	cmp	r0, #0
   3511c:	beq	35134 <__assert_fail@plt+0x23cfc>
   35120:	mov	r0, #1
   35124:	add	r0, r0, r5, lsr #1
   35128:	adds	r5, r5, r0
   3512c:	bcc	3514c <__assert_fail@plt+0x23d14>
   35130:	b	35180 <__assert_fail@plt+0x23d48>
   35134:	cmp	r5, #0
   35138:	bne	3514c <__assert_fail@plt+0x23d14>
   3513c:	mov	r0, #64	; 0x40
   35140:	cmp	r6, #64	; 0x40
   35144:	udiv	r5, r0, r6
   35148:	addhi	r5, r5, #1
   3514c:	mov	r0, r7
   35150:	mov	r1, r5
   35154:	mov	r2, r6
   35158:	bl	359f8 <__assert_fail@plt+0x245c0>
   3515c:	cmp	r0, #0
   35160:	bne	35178 <__assert_fail@plt+0x23d40>
   35164:	cmp	r7, #0
   35168:	beq	35180 <__assert_fail@plt+0x23d48>
   3516c:	cmp	r6, #0
   35170:	cmpne	r5, #0
   35174:	bne	35180 <__assert_fail@plt+0x23d48>
   35178:	str	r5, [r4]
   3517c:	pop	{r4, r5, r6, r7, fp, pc}
   35180:	bl	354b4 <__assert_fail@plt+0x2407c>
   35184:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   35188:	add	fp, sp, #24
   3518c:	mov	r8, r1
   35190:	ldr	r1, [r1]
   35194:	mov	r5, r0
   35198:	add	r0, r1, r1, asr #1
   3519c:	cmp	r0, r1
   351a0:	mvnvs	r0, #-2147483648	; 0x80000000
   351a4:	cmp	r0, r3
   351a8:	mov	r7, r0
   351ac:	movgt	r7, r3
   351b0:	cmn	r3, #1
   351b4:	movle	r7, r0
   351b8:	ldr	r0, [fp, #8]
   351bc:	cmn	r0, #1
   351c0:	ble	351e8 <__assert_fail@plt+0x23db0>
   351c4:	cmp	r0, #0
   351c8:	beq	3523c <__assert_fail@plt+0x23e04>
   351cc:	cmn	r7, #1
   351d0:	ble	35210 <__assert_fail@plt+0x23dd8>
   351d4:	mvn	r4, #-2147483648	; 0x80000000
   351d8:	udiv	r6, r4, r0
   351dc:	cmp	r6, r7
   351e0:	bge	3523c <__assert_fail@plt+0x23e04>
   351e4:	b	3524c <__assert_fail@plt+0x23e14>
   351e8:	cmn	r7, #1
   351ec:	ble	3522c <__assert_fail@plt+0x23df4>
   351f0:	cmn	r0, #1
   351f4:	beq	3523c <__assert_fail@plt+0x23e04>
   351f8:	mov	r6, #-2147483648	; 0x80000000
   351fc:	mvn	r4, #-2147483648	; 0x80000000
   35200:	sdiv	r6, r6, r0
   35204:	cmp	r6, r7
   35208:	bge	3523c <__assert_fail@plt+0x23e04>
   3520c:	b	3524c <__assert_fail@plt+0x23e14>
   35210:	beq	3523c <__assert_fail@plt+0x23e04>
   35214:	mov	r6, #-2147483648	; 0x80000000
   35218:	mvn	r4, #-2147483648	; 0x80000000
   3521c:	sdiv	r6, r6, r7
   35220:	cmp	r6, r0
   35224:	bge	3523c <__assert_fail@plt+0x23e04>
   35228:	b	3524c <__assert_fail@plt+0x23e14>
   3522c:	mvn	r4, #-2147483648	; 0x80000000
   35230:	sdiv	r6, r4, r0
   35234:	cmp	r7, r6
   35238:	blt	3524c <__assert_fail@plt+0x23e14>
   3523c:	mul	r6, r7, r0
   35240:	mov	r4, #64	; 0x40
   35244:	cmp	r6, #63	; 0x3f
   35248:	bgt	35254 <__assert_fail@plt+0x23e1c>
   3524c:	sdiv	r7, r4, r0
   35250:	mul	r6, r7, r0
   35254:	cmp	r5, #0
   35258:	moveq	r4, #0
   3525c:	streq	r4, [r8]
   35260:	sub	r4, r7, r1
   35264:	cmp	r4, r2
   35268:	bge	35314 <__assert_fail@plt+0x23edc>
   3526c:	add	r7, r1, r2
   35270:	mov	r6, #0
   35274:	mov	r2, #0
   35278:	cmp	r7, r3
   3527c:	movwgt	r6, #1
   35280:	cmn	r3, #1
   35284:	movwgt	r2, #1
   35288:	cmp	r7, r1
   3528c:	bvs	35348 <__assert_fail@plt+0x23f10>
   35290:	ands	r1, r2, r6
   35294:	bne	35348 <__assert_fail@plt+0x23f10>
   35298:	cmn	r0, #1
   3529c:	ble	352c4 <__assert_fail@plt+0x23e8c>
   352a0:	cmp	r0, #0
   352a4:	beq	35310 <__assert_fail@plt+0x23ed8>
   352a8:	cmn	r7, #1
   352ac:	ble	352e8 <__assert_fail@plt+0x23eb0>
   352b0:	mvn	r1, #-2147483648	; 0x80000000
   352b4:	udiv	r1, r1, r0
   352b8:	cmp	r1, r7
   352bc:	bge	35310 <__assert_fail@plt+0x23ed8>
   352c0:	b	35348 <__assert_fail@plt+0x23f10>
   352c4:	cmn	r7, #1
   352c8:	ble	35300 <__assert_fail@plt+0x23ec8>
   352cc:	cmn	r0, #1
   352d0:	beq	35310 <__assert_fail@plt+0x23ed8>
   352d4:	mov	r1, #-2147483648	; 0x80000000
   352d8:	sdiv	r1, r1, r0
   352dc:	cmp	r1, r7
   352e0:	bge	35310 <__assert_fail@plt+0x23ed8>
   352e4:	b	35348 <__assert_fail@plt+0x23f10>
   352e8:	beq	35310 <__assert_fail@plt+0x23ed8>
   352ec:	mov	r1, #-2147483648	; 0x80000000
   352f0:	sdiv	r1, r1, r7
   352f4:	cmp	r1, r0
   352f8:	bge	35310 <__assert_fail@plt+0x23ed8>
   352fc:	b	35348 <__assert_fail@plt+0x23f10>
   35300:	mvn	r1, #-2147483648	; 0x80000000
   35304:	sdiv	r1, r1, r0
   35308:	cmp	r7, r1
   3530c:	blt	35348 <__assert_fail@plt+0x23f10>
   35310:	mul	r6, r7, r0
   35314:	mov	r0, r5
   35318:	mov	r1, r6
   3531c:	bl	3557c <__assert_fail@plt+0x24144>
   35320:	cmp	r6, #0
   35324:	movwne	r6, #1
   35328:	cmp	r0, #0
   3532c:	bne	35340 <__assert_fail@plt+0x23f08>
   35330:	clz	r1, r5
   35334:	lsr	r1, r1, #5
   35338:	orrs	r1, r1, r6
   3533c:	bne	35348 <__assert_fail@plt+0x23f10>
   35340:	str	r7, [r8]
   35344:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   35348:	bl	354b4 <__assert_fail@plt+0x2407c>
   3534c:	push	{fp, lr}
   35350:	mov	fp, sp
   35354:	mov	r1, #1
   35358:	bl	354f8 <__assert_fail@plt+0x240c0>
   3535c:	cmp	r0, #0
   35360:	popne	{fp, pc}
   35364:	bl	354b4 <__assert_fail@plt+0x2407c>
   35368:	push	{fp, lr}
   3536c:	mov	fp, sp
   35370:	bl	354f8 <__assert_fail@plt+0x240c0>
   35374:	cmp	r0, #0
   35378:	popne	{fp, pc}
   3537c:	bl	354b4 <__assert_fail@plt+0x2407c>
   35380:	push	{fp, lr}
   35384:	mov	fp, sp
   35388:	mov	r1, #1
   3538c:	bl	354f8 <__assert_fail@plt+0x240c0>
   35390:	cmp	r0, #0
   35394:	popne	{fp, pc}
   35398:	bl	354b4 <__assert_fail@plt+0x2407c>
   3539c:	push	{fp, lr}
   353a0:	mov	fp, sp
   353a4:	bl	354f8 <__assert_fail@plt+0x240c0>
   353a8:	cmp	r0, #0
   353ac:	popne	{fp, pc}
   353b0:	bl	354b4 <__assert_fail@plt+0x2407c>
   353b4:	push	{r4, r5, r6, sl, fp, lr}
   353b8:	add	fp, sp, #16
   353bc:	mov	r5, r0
   353c0:	mov	r0, r1
   353c4:	mov	r4, r1
   353c8:	bl	3554c <__assert_fail@plt+0x24114>
   353cc:	cmp	r0, #0
   353d0:	beq	353ec <__assert_fail@plt+0x23fb4>
   353d4:	mov	r1, r5
   353d8:	mov	r2, r4
   353dc:	mov	r6, r0
   353e0:	bl	111ec <memcpy@plt>
   353e4:	mov	r0, r6
   353e8:	pop	{r4, r5, r6, sl, fp, pc}
   353ec:	bl	354b4 <__assert_fail@plt+0x2407c>
   353f0:	push	{r4, r5, r6, sl, fp, lr}
   353f4:	add	fp, sp, #16
   353f8:	mov	r5, r0
   353fc:	mov	r0, r1
   35400:	mov	r4, r1
   35404:	bl	3554c <__assert_fail@plt+0x24114>
   35408:	cmp	r0, #0
   3540c:	beq	35428 <__assert_fail@plt+0x23ff0>
   35410:	mov	r1, r5
   35414:	mov	r2, r4
   35418:	mov	r6, r0
   3541c:	bl	111ec <memcpy@plt>
   35420:	mov	r0, r6
   35424:	pop	{r4, r5, r6, sl, fp, pc}
   35428:	bl	354b4 <__assert_fail@plt+0x2407c>
   3542c:	push	{r4, r5, r6, sl, fp, lr}
   35430:	add	fp, sp, #16
   35434:	mov	r5, r0
   35438:	add	r0, r1, #1
   3543c:	mov	r4, r1
   35440:	bl	3554c <__assert_fail@plt+0x24114>
   35444:	cmp	r0, #0
   35448:	beq	35470 <__assert_fail@plt+0x24038>
   3544c:	mov	r6, r0
   35450:	mov	r0, #0
   35454:	mov	r1, r5
   35458:	mov	r2, r4
   3545c:	strb	r0, [r6, r4]
   35460:	mov	r0, r6
   35464:	bl	111ec <memcpy@plt>
   35468:	mov	r0, r6
   3546c:	pop	{r4, r5, r6, sl, fp, pc}
   35470:	bl	354b4 <__assert_fail@plt+0x2407c>
   35474:	push	{r4, r5, r6, sl, fp, lr}
   35478:	add	fp, sp, #16
   3547c:	mov	r4, r0
   35480:	bl	11330 <strlen@plt>
   35484:	add	r5, r0, #1
   35488:	mov	r0, r5
   3548c:	bl	3554c <__assert_fail@plt+0x24114>
   35490:	cmp	r0, #0
   35494:	beq	354b0 <__assert_fail@plt+0x24078>
   35498:	mov	r1, r4
   3549c:	mov	r2, r5
   354a0:	mov	r6, r0
   354a4:	bl	111ec <memcpy@plt>
   354a8:	mov	r0, r6
   354ac:	pop	{r4, r5, r6, sl, fp, pc}
   354b0:	bl	354b4 <__assert_fail@plt+0x2407c>
   354b4:	push	{fp, lr}
   354b8:	mov	fp, sp
   354bc:	movw	r0, #37152	; 0x9120
   354c0:	movw	r1, #32929	; 0x80a1
   354c4:	mov	r2, #5
   354c8:	movt	r0, #4
   354cc:	movt	r1, #3
   354d0:	ldr	r4, [r0]
   354d4:	mov	r0, #0
   354d8:	bl	11228 <dcgettext@plt>
   354dc:	movw	r2, #26312	; 0x66c8
   354e0:	mov	r3, r0
   354e4:	mov	r0, r4
   354e8:	mov	r1, #0
   354ec:	movt	r2, #3
   354f0:	bl	112a0 <error@plt>
   354f4:	bl	11420 <abort@plt>
   354f8:	clz	r2, r1
   354fc:	clz	r3, r0
   35500:	lsr	r2, r2, #5
   35504:	lsr	r3, r3, #5
   35508:	orrs	r2, r3, r2
   3550c:	movwne	r1, #1
   35510:	movwne	r0, #1
   35514:	cmp	r1, #0
   35518:	beq	35548 <__assert_fail@plt+0x24110>
   3551c:	mvn	r2, #-2147483648	; 0x80000000
   35520:	udiv	r2, r2, r1
   35524:	cmp	r2, r0
   35528:	bcs	35548 <__assert_fail@plt+0x24110>
   3552c:	push	{fp, lr}
   35530:	mov	fp, sp
   35534:	bl	11348 <__errno_location@plt>
   35538:	mov	r1, #12
   3553c:	str	r1, [r0]
   35540:	mov	r0, #0
   35544:	pop	{fp, pc}
   35548:	b	11144 <calloc@plt>
   3554c:	cmp	r0, #0
   35550:	movweq	r0, #1
   35554:	cmn	r0, #1
   35558:	ble	35560 <__assert_fail@plt+0x24128>
   3555c:	b	112c4 <malloc@plt>
   35560:	push	{fp, lr}
   35564:	mov	fp, sp
   35568:	bl	11348 <__errno_location@plt>
   3556c:	mov	r1, #12
   35570:	str	r1, [r0]
   35574:	mov	r0, #0
   35578:	pop	{fp, pc}
   3557c:	push	{fp, lr}
   35580:	mov	fp, sp
   35584:	cmp	r0, #0
   35588:	beq	355a4 <__assert_fail@plt+0x2416c>
   3558c:	cmp	r1, #0
   35590:	beq	355b0 <__assert_fail@plt+0x24178>
   35594:	cmn	r1, #1
   35598:	ble	355bc <__assert_fail@plt+0x24184>
   3559c:	pop	{fp, lr}
   355a0:	b	11234 <realloc@plt>
   355a4:	mov	r0, r1
   355a8:	pop	{fp, lr}
   355ac:	b	3554c <__assert_fail@plt+0x24114>
   355b0:	bl	1386c <__assert_fail@plt+0x2434>
   355b4:	mov	r0, #0
   355b8:	pop	{fp, pc}
   355bc:	bl	11348 <__errno_location@plt>
   355c0:	mov	r1, #12
   355c4:	str	r1, [r0]
   355c8:	mov	r0, #0
   355cc:	pop	{fp, pc}
   355d0:	push	{r4, r5, r6, sl, fp, lr}
   355d4:	add	fp, sp, #16
   355d8:	mov	r4, r0
   355dc:	bl	11288 <__fpending@plt>
   355e0:	ldr	r6, [r4]
   355e4:	mov	r5, r0
   355e8:	mov	r0, r4
   355ec:	bl	35714 <__assert_fail@plt+0x242dc>
   355f0:	tst	r6, #32
   355f4:	bne	3562c <__assert_fail@plt+0x241f4>
   355f8:	cmp	r0, #0
   355fc:	mov	r4, r0
   35600:	mvnne	r4, #0
   35604:	cmp	r5, #0
   35608:	bne	35638 <__assert_fail@plt+0x24200>
   3560c:	cmp	r0, #0
   35610:	beq	35638 <__assert_fail@plt+0x24200>
   35614:	bl	11348 <__errno_location@plt>
   35618:	ldr	r0, [r0]
   3561c:	subs	r4, r0, #9
   35620:	mvnne	r4, #0
   35624:	mov	r0, r4
   35628:	pop	{r4, r5, r6, sl, fp, pc}
   3562c:	mvn	r4, #0
   35630:	cmp	r0, #0
   35634:	beq	35640 <__assert_fail@plt+0x24208>
   35638:	mov	r0, r4
   3563c:	pop	{r4, r5, r6, sl, fp, pc}
   35640:	bl	11348 <__errno_location@plt>
   35644:	mov	r1, #0
   35648:	str	r1, [r0]
   3564c:	mov	r0, r4
   35650:	pop	{r4, r5, r6, sl, fp, pc}
   35654:	push	{r4, r5, r6, r7, fp, lr}
   35658:	add	fp, sp, #16
   3565c:	mov	r4, r0
   35660:	ldr	r0, [r0, #4]
   35664:	mov	r5, r1
   35668:	cmp	r0, r1
   3566c:	movcs	r0, #1
   35670:	strcs	r5, [r4]
   35674:	popcs	{r4, r5, r6, r7, fp, pc}
   35678:	mov	r6, r3
   3567c:	cmp	r3, #0
   35680:	beq	356a8 <__assert_fail@plt+0x24270>
   35684:	mvn	r0, #0
   35688:	udiv	r0, r0, r6
   3568c:	cmp	r0, r5
   35690:	bcs	356a8 <__assert_fail@plt+0x24270>
   35694:	bl	11348 <__errno_location@plt>
   35698:	mov	r1, #12
   3569c:	str	r1, [r0]
   356a0:	mov	r0, #0
   356a4:	pop	{r4, r5, r6, r7, fp, pc}
   356a8:	ldr	r0, [r4, #8]
   356ac:	mul	r1, r6, r5
   356b0:	cmp	r0, r2
   356b4:	beq	356cc <__assert_fail@plt+0x24294>
   356b8:	bl	3557c <__assert_fail@plt+0x24144>
   356bc:	mov	r7, r0
   356c0:	cmp	r0, #0
   356c4:	bne	356fc <__assert_fail@plt+0x242c4>
   356c8:	b	3570c <__assert_fail@plt+0x242d4>
   356cc:	mov	r0, r1
   356d0:	bl	3554c <__assert_fail@plt+0x24114>
   356d4:	cmp	r0, #0
   356d8:	beq	3570c <__assert_fail@plt+0x242d4>
   356dc:	ldr	r1, [r4, #8]
   356e0:	mov	r7, r0
   356e4:	cmp	r1, #0
   356e8:	beq	356fc <__assert_fail@plt+0x242c4>
   356ec:	ldr	r0, [r4]
   356f0:	mul	r2, r0, r6
   356f4:	mov	r0, r7
   356f8:	bl	111ec <memcpy@plt>
   356fc:	mov	r0, #1
   35700:	str	r5, [r4]
   35704:	stmib	r4, {r5, r7}
   35708:	pop	{r4, r5, r6, r7, fp, pc}
   3570c:	mov	r0, #0
   35710:	pop	{r4, r5, r6, r7, fp, pc}
   35714:	push	{r4, r5, r6, sl, fp, lr}
   35718:	add	fp, sp, #16
   3571c:	sub	sp, sp, #8
   35720:	mov	r4, r0
   35724:	bl	11390 <fileno@plt>
   35728:	cmn	r0, #1
   3572c:	ble	357a0 <__assert_fail@plt+0x24368>
   35730:	mov	r0, r4
   35734:	bl	112dc <__freading@plt>
   35738:	cmp	r0, #0
   3573c:	beq	35768 <__assert_fail@plt+0x24330>
   35740:	mov	r0, r4
   35744:	bl	11390 <fileno@plt>
   35748:	mov	r1, #1
   3574c:	mov	r2, #0
   35750:	mov	r3, #0
   35754:	str	r1, [sp]
   35758:	bl	11270 <lseek64@plt>
   3575c:	and	r0, r0, r1
   35760:	cmn	r0, #1
   35764:	beq	357a0 <__assert_fail@plt+0x24368>
   35768:	mov	r0, r4
   3576c:	bl	357b0 <__assert_fail@plt+0x24378>
   35770:	cmp	r0, #0
   35774:	beq	357a0 <__assert_fail@plt+0x24368>
   35778:	bl	11348 <__errno_location@plt>
   3577c:	ldr	r6, [r0]
   35780:	mov	r5, r0
   35784:	mov	r0, r4
   35788:	bl	113b4 <fclose@plt>
   3578c:	cmp	r6, #0
   35790:	strne	r6, [r5]
   35794:	mvnne	r0, #0
   35798:	sub	sp, fp, #16
   3579c:	pop	{r4, r5, r6, sl, fp, pc}
   357a0:	mov	r0, r4
   357a4:	sub	sp, fp, #16
   357a8:	pop	{r4, r5, r6, sl, fp, lr}
   357ac:	b	113b4 <fclose@plt>
   357b0:	push	{r4, sl, fp, lr}
   357b4:	add	fp, sp, #8
   357b8:	sub	sp, sp, #8
   357bc:	mov	r4, r0
   357c0:	cmp	r0, #0
   357c4:	beq	357e0 <__assert_fail@plt+0x243a8>
   357c8:	mov	r0, r4
   357cc:	bl	112dc <__freading@plt>
   357d0:	cmp	r0, #0
   357d4:	ldrbne	r0, [r4, #1]
   357d8:	tstne	r0, #1
   357dc:	bne	357f0 <__assert_fail@plt+0x243b8>
   357e0:	mov	r0, r4
   357e4:	sub	sp, fp, #8
   357e8:	pop	{r4, sl, fp, lr}
   357ec:	b	111a4 <fflush@plt>
   357f0:	mov	r0, #1
   357f4:	mov	r2, #0
   357f8:	mov	r3, #0
   357fc:	str	r0, [sp]
   35800:	mov	r0, r4
   35804:	bl	3580c <__assert_fail@plt+0x243d4>
   35808:	b	357e0 <__assert_fail@plt+0x243a8>
   3580c:	push	{r4, r5, r6, r7, fp, lr}
   35810:	add	fp, sp, #16
   35814:	sub	sp, sp, #8
   35818:	mov	r4, r0
   3581c:	ldr	r0, [r0, #4]
   35820:	mov	r5, r3
   35824:	mov	r6, r2
   35828:	ldr	r1, [r4, #8]
   3582c:	cmp	r1, r0
   35830:	bne	3584c <__assert_fail@plt+0x24414>
   35834:	ldrd	r0, [r4, #16]
   35838:	cmp	r1, r0
   3583c:	bne	3584c <__assert_fail@plt+0x24414>
   35840:	ldr	r0, [r4, #36]	; 0x24
   35844:	cmp	r0, #0
   35848:	beq	35864 <__assert_fail@plt+0x2442c>
   3584c:	mov	r0, r4
   35850:	mov	r2, r6
   35854:	mov	r3, r5
   35858:	sub	sp, fp, #16
   3585c:	pop	{r4, r5, r6, r7, fp, lr}
   35860:	b	113c0 <fseeko64@plt>
   35864:	ldr	r7, [fp, #8]
   35868:	mov	r0, r4
   3586c:	bl	11390 <fileno@plt>
   35870:	mov	r2, r6
   35874:	mov	r3, r5
   35878:	str	r7, [sp]
   3587c:	bl	11270 <lseek64@plt>
   35880:	and	r2, r0, r1
   35884:	cmn	r2, #1
   35888:	mvneq	r0, #0
   3588c:	subeq	sp, fp, #16
   35890:	popeq	{r4, r5, r6, r7, fp, pc}
   35894:	strd	r0, [r4, #80]	; 0x50
   35898:	ldr	r0, [r4]
   3589c:	bic	r0, r0, #16
   358a0:	str	r0, [r4]
   358a4:	mov	r0, #0
   358a8:	sub	sp, fp, #16
   358ac:	pop	{r4, r5, r6, r7, fp, pc}
   358b0:	push	{fp, lr}
   358b4:	mov	fp, sp
   358b8:	mov	r0, #14
   358bc:	bl	113f0 <nl_langinfo@plt>
   358c0:	movw	r1, #25955	; 0x6563
   358c4:	cmp	r0, #0
   358c8:	movt	r1, #3
   358cc:	movne	r1, r0
   358d0:	movw	r0, #32946	; 0x80b2
   358d4:	ldrb	r2, [r1]
   358d8:	movt	r0, #3
   358dc:	cmp	r2, #0
   358e0:	movne	r0, r1
   358e4:	pop	{fp, pc}
   358e8:	push	{r4, sl, fp, lr}
   358ec:	add	fp, sp, #8
   358f0:	mov	r4, r0
   358f4:	bl	111b0 <wcwidth@plt>
   358f8:	cmn	r0, #1
   358fc:	popgt	{r4, sl, fp, pc}
   35900:	mov	r0, r4
   35904:	bl	1124c <iswcntrl@plt>
   35908:	clz	r0, r0
   3590c:	lsr	r0, r0, #5
   35910:	pop	{r4, sl, fp, pc}
   35914:	push	{r4, r5, r6, sl, fp, lr}
   35918:	add	fp, sp, #16
   3591c:	mov	r4, r0
   35920:	mov	r0, r1
   35924:	mov	r5, r1
   35928:	ldr	r1, [r0], #16
   3592c:	cmp	r1, r0
   35930:	beq	3593c <__assert_fail@plt+0x24504>
   35934:	mov	r6, r1
   35938:	b	3594c <__assert_fail@plt+0x24514>
   3593c:	ldr	r2, [r5, #4]
   35940:	add	r6, r4, #16
   35944:	mov	r0, r6
   35948:	bl	111ec <memcpy@plt>
   3594c:	str	r6, [r4]
   35950:	ldr	r0, [r5, #4]
   35954:	str	r0, [r4, #4]
   35958:	ldrb	r0, [r5, #8]
   3595c:	strb	r0, [r4, #8]
   35960:	cmp	r0, #0
   35964:	ldrne	r0, [r5, #12]
   35968:	strne	r0, [r4, #12]
   3596c:	pop	{r4, r5, r6, sl, fp, pc}
   35970:	movw	r2, #32952	; 0x80b8
   35974:	ubfx	r1, r0, #5, #3
   35978:	and	r0, r0, #31
   3597c:	movt	r2, #3
   35980:	ldr	r1, [r2, r1, lsl #2]
   35984:	mov	r2, #1
   35988:	and	r0, r1, r2, lsl r0
   3598c:	cmp	r0, #0
   35990:	movwne	r0, #1
   35994:	bx	lr
   35998:	push	{r4, r5, r6, r7, fp, lr}
   3599c:	add	fp, sp, #16
   359a0:	sub	sp, sp, #8
   359a4:	add	r5, sp, #4
   359a8:	cmp	r0, #0
   359ac:	mov	r7, r2
   359b0:	mov	r4, r1
   359b4:	movne	r5, r0
   359b8:	mov	r0, r5
   359bc:	bl	11294 <mbrtowc@plt>
   359c0:	mov	r6, r0
   359c4:	cmp	r7, #0
   359c8:	beq	359ec <__assert_fail@plt+0x245b4>
   359cc:	cmn	r6, #2
   359d0:	bcc	359ec <__assert_fail@plt+0x245b4>
   359d4:	mov	r0, #0
   359d8:	bl	35a34 <__assert_fail@plt+0x245fc>
   359dc:	cmp	r0, #0
   359e0:	ldrbeq	r0, [r4]
   359e4:	moveq	r6, #1
   359e8:	streq	r0, [r5]
   359ec:	mov	r0, r6
   359f0:	sub	sp, fp, #16
   359f4:	pop	{r4, r5, r6, r7, fp, pc}
   359f8:	cmp	r2, #0
   359fc:	beq	35a2c <__assert_fail@plt+0x245f4>
   35a00:	mvn	r3, #0
   35a04:	udiv	r3, r3, r2
   35a08:	cmp	r3, r1
   35a0c:	bcs	35a2c <__assert_fail@plt+0x245f4>
   35a10:	push	{fp, lr}
   35a14:	mov	fp, sp
   35a18:	bl	11348 <__errno_location@plt>
   35a1c:	mov	r1, #12
   35a20:	str	r1, [r0]
   35a24:	mov	r0, #0
   35a28:	pop	{fp, pc}
   35a2c:	mul	r1, r2, r1
   35a30:	b	3557c <__assert_fail@plt+0x24144>
   35a34:	push	{r4, sl, fp, lr}
   35a38:	add	fp, sp, #8
   35a3c:	sub	sp, sp, #264	; 0x108
   35a40:	add	r1, sp, #7
   35a44:	movw	r2, #257	; 0x101
   35a48:	bl	35a98 <__assert_fail@plt+0x24660>
   35a4c:	mov	r4, #0
   35a50:	cmp	r0, #0
   35a54:	bne	35a8c <__assert_fail@plt+0x24654>
   35a58:	movw	r1, #32984	; 0x80d8
   35a5c:	add	r0, sp, #7
   35a60:	movt	r1, #3
   35a64:	bl	11180 <strcmp@plt>
   35a68:	cmp	r0, #0
   35a6c:	beq	35a8c <__assert_fail@plt+0x24654>
   35a70:	movw	r1, #32986	; 0x80da
   35a74:	add	r0, sp, #7
   35a78:	movt	r1, #3
   35a7c:	bl	11180 <strcmp@plt>
   35a80:	mov	r4, r0
   35a84:	cmp	r0, #0
   35a88:	movwne	r4, #1
   35a8c:	mov	r0, r4
   35a90:	sub	sp, fp, #8
   35a94:	pop	{r4, sl, fp, pc}
   35a98:	push	{r4, r5, r6, r7, fp, lr}
   35a9c:	add	fp, sp, #16
   35aa0:	mov	r4, r1
   35aa4:	mov	r1, #0
   35aa8:	mov	r6, r2
   35aac:	bl	113d8 <setlocale@plt>
   35ab0:	cmp	r0, #0
   35ab4:	beq	35ae4 <__assert_fail@plt+0x246ac>
   35ab8:	mov	r7, r0
   35abc:	bl	11330 <strlen@plt>
   35ac0:	cmp	r0, r6
   35ac4:	bcs	35b04 <__assert_fail@plt+0x246cc>
   35ac8:	add	r2, r0, #1
   35acc:	mov	r0, r4
   35ad0:	mov	r1, r7
   35ad4:	bl	111ec <memcpy@plt>
   35ad8:	mov	r5, #0
   35adc:	mov	r0, r5
   35ae0:	pop	{r4, r5, r6, r7, fp, pc}
   35ae4:	cmp	r6, #0
   35ae8:	mov	r5, #22
   35aec:	movne	r0, #0
   35af0:	strbne	r0, [r4]
   35af4:	movne	r0, r5
   35af8:	popne	{r4, r5, r6, r7, fp, pc}
   35afc:	mov	r0, r5
   35b00:	pop	{r4, r5, r6, r7, fp, pc}
   35b04:	mov	r5, #34	; 0x22
   35b08:	cmp	r6, #0
   35b0c:	beq	35b2c <__assert_fail@plt+0x246f4>
   35b10:	sub	r6, r6, #1
   35b14:	mov	r0, r4
   35b18:	mov	r1, r7
   35b1c:	mov	r2, r6
   35b20:	bl	111ec <memcpy@plt>
   35b24:	mov	r0, #0
   35b28:	strb	r0, [r4, r6]
   35b2c:	mov	r0, r5
   35b30:	pop	{r4, r5, r6, r7, fp, pc}
   35b34:	mov	r1, #0
   35b38:	b	113d8 <setlocale@plt>
   35b3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35b40:	mov	r7, r0
   35b44:	ldr	r6, [pc, #72]	; 35b94 <__assert_fail@plt+0x2475c>
   35b48:	ldr	r5, [pc, #72]	; 35b98 <__assert_fail@plt+0x24760>
   35b4c:	add	r6, pc, r6
   35b50:	add	r5, pc, r5
   35b54:	sub	r6, r6, r5
   35b58:	mov	r8, r1
   35b5c:	mov	r9, r2
   35b60:	bl	11118 <pthread_mutex_unlock@plt-0x20>
   35b64:	asrs	r6, r6, #2
   35b68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   35b6c:	mov	r4, #0
   35b70:	add	r4, r4, #1
   35b74:	ldr	r3, [r5], #4
   35b78:	mov	r2, r9
   35b7c:	mov	r1, r8
   35b80:	mov	r0, r7
   35b84:	blx	r3
   35b88:	cmp	r6, r4
   35b8c:	bne	35b70 <__assert_fail@plt+0x24738>
   35b90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35b94:			; <UNDEFINED> instruction: 0x000133b8
   35b98:			; <UNDEFINED> instruction: 0x000133b0
   35b9c:	bx	lr
   35ba0:	ldr	r3, [pc, #12]	; 35bb4 <__assert_fail@plt+0x2477c>
   35ba4:	mov	r1, #0
   35ba8:	add	r3, pc, r3
   35bac:	ldr	r2, [r3]
   35bb0:	b	11360 <__cxa_atexit@plt>
   35bb4:	andeq	r3, r1, ip, ror #10

Disassembly of section .fini:

00035bb8 <.fini>:
   35bb8:	push	{r3, lr}
   35bbc:	pop	{r3, pc}
