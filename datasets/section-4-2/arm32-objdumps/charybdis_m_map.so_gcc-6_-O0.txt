
../repos/charybdis/modules/.libs/m_map.so:     file format elf32-littlearm


Disassembly of section .init:

00000584 <_init>:
 584:	push	{r3, lr}
 588:	bl	610 <call_weak_fn>
 58c:	pop	{r3, pc}

Disassembly of section .plt:

00000590 <.plt>:
 590:	push	{lr}		; (str lr, [sp, #-4]!)
 594:	ldr	lr, [pc, #4]	; 5a0 <.plt+0x10>
 598:	add	lr, pc, lr
 59c:	ldr	pc, [lr, #8]!
 5a0:	.word	0x00011a60

000005a4 <raise@plt>:
 5a4:	add	ip, pc, #0, 12
 5a8:	add	ip, ip, #69632	; 0x11000
 5ac:	ldr	pc, [ip, #2656]!	; 0xa60

000005b0 <__cxa_finalize@plt>:
 5b0:	add	ip, pc, #0, 12
 5b4:	add	ip, ip, #69632	; 0x11000
 5b8:	ldr	pc, [ip, #2648]!	; 0xa58

000005bc <__gmon_start__@plt>:
 5bc:	add	ip, pc, #0, 12
 5c0:	add	ip, ip, #69632	; 0x11000
 5c4:	ldr	pc, [ip, #2640]!	; 0xa50

000005c8 <sendto_one_numeric@plt>:
 5c8:	add	ip, pc, #0, 12
 5cc:	add	ip, ip, #69632	; 0x11000
 5d0:	ldr	pc, [ip, #2632]!	; 0xa48

000005d4 <strlen@plt>:
 5d4:	add	ip, pc, #0, 12
 5d8:	add	ip, ip, #69632	; 0x11000
 5dc:	ldr	pc, [ip, #2624]!	; 0xa40

000005e0 <snprintf@plt>:
 5e0:	add	ip, pc, #0, 12
 5e4:	add	ip, ip, #69632	; 0x11000
 5e8:	ldr	pc, [ip, #2616]!	; 0xa38

000005ec <scache_send_missing@plt>:
 5ec:	add	ip, pc, #0, 12
 5f0:	add	ip, ip, #69632	; 0x11000
 5f4:	ldr	pc, [ip, #2608]!	; 0xa30

000005f8 <rb_strlcpy@plt>:
 5f8:	add	ip, pc, #0, 12
 5fc:	add	ip, ip, #69632	; 0x11000
 600:	ldr	pc, [ip, #2600]!	; 0xa28

00000604 <rb_strlcat@plt>:
 604:	add	ip, pc, #0, 12
 608:	add	ip, ip, #69632	; 0x11000
 60c:	ldr	pc, [ip, #2592]!	; 0xa20

Disassembly of section .text:

00000610 <call_weak_fn>:
     610:	ldr	r3, [pc, #20]	; 62c <call_weak_fn+0x1c>
     614:	ldr	r2, [pc, #20]	; 630 <call_weak_fn+0x20>
     618:	add	r3, pc, r3
     61c:	ldr	r2, [r3, r2]
     620:	cmp	r2, #0
     624:	bxeq	lr
     628:	b	5bc <__gmon_start__@plt>
     62c:	.word	0x000119e0
     630:	.word	0x00000044

00000634 <deregister_tm_clones>:
     634:	ldr	r3, [pc, #52]	; 670 <deregister_tm_clones+0x3c>
     638:	ldr	r0, [pc, #52]	; 674 <deregister_tm_clones+0x40>
     63c:	add	r3, pc, r3
     640:	add	r0, pc, r0
     644:	add	r3, r3, #3
     648:	sub	r3, r3, r0
     64c:	cmp	r3, #6
     650:	ldr	r3, [pc, #32]	; 678 <deregister_tm_clones+0x44>
     654:	add	r3, pc, r3
     658:	bxls	lr
     65c:	ldr	r2, [pc, #24]	; 67c <deregister_tm_clones+0x48>
     660:	ldr	r3, [r3, r2]
     664:	cmp	r3, #0
     668:	bxeq	lr
     66c:	bx	r3
     670:	.word	0x00011a8c
     674:	.word	0x00011a88
     678:	.word	0x000119a4
     67c:	.word	0x00000038

00000680 <register_tm_clones>:
     680:	ldr	r1, [pc, #56]	; 6c0 <register_tm_clones+0x40>
     684:	ldr	r0, [pc, #56]	; 6c4 <register_tm_clones+0x44>
     688:	add	r1, pc, r1
     68c:	add	r0, pc, r0
     690:	sub	r1, r1, r0
     694:	ldr	r3, [pc, #44]	; 6c8 <register_tm_clones+0x48>
     698:	asr	r1, r1, #2
     69c:	add	r3, pc, r3
     6a0:	add	r1, r1, r1, lsr #31
     6a4:	asrs	r1, r1, #1
     6a8:	bxeq	lr
     6ac:	ldr	r2, [pc, #24]	; 6cc <register_tm_clones+0x4c>
     6b0:	ldr	r3, [r3, r2]
     6b4:	cmp	r3, #0
     6b8:	bxeq	lr
     6bc:	bx	r3
     6c0:	.word	0x00011a40
     6c4:	.word	0x00011a3c
     6c8:	.word	0x0001195c
     6cc:	.word	0x0000004c

000006d0 <__do_global_dtors_aux>:
     6d0:	ldr	r3, [pc, #76]	; 724 <__do_global_dtors_aux+0x54>
     6d4:	ldr	r2, [pc, #76]	; 728 <__do_global_dtors_aux+0x58>
     6d8:	add	r3, pc, r3
     6dc:	add	r2, pc, r2
     6e0:	ldrb	r3, [r3]
     6e4:	cmp	r3, #0
     6e8:	bxne	lr
     6ec:	ldr	r3, [pc, #56]	; 72c <__do_global_dtors_aux+0x5c>
     6f0:	push	{r4, lr}
     6f4:	ldr	r3, [r2, r3]
     6f8:	cmp	r3, #0
     6fc:	beq	70c <__do_global_dtors_aux+0x3c>
     700:	ldr	r3, [pc, #40]	; 730 <__do_global_dtors_aux+0x60>
     704:	ldr	r0, [pc, r3]
     708:	bl	5b0 <__cxa_finalize@plt>
     70c:	bl	634 <deregister_tm_clones>
     710:	ldr	r3, [pc, #28]	; 734 <__do_global_dtors_aux+0x64>
     714:	mov	r2, #1
     718:	add	r3, pc, r3
     71c:	strb	r2, [r3]
     720:	pop	{r4, pc}
     724:	.word	0x000119f0
     728:	.word	0x0001191c
     72c:	.word	0x00000034
     730:	.word	0x0001194c
     734:	.word	0x000119b0

00000738 <frame_dummy>:
     738:	ldr	r0, [pc, #56]	; 778 <frame_dummy+0x40>
     73c:	ldr	r3, [pc, #56]	; 77c <frame_dummy+0x44>
     740:	add	r0, pc, r0
     744:	ldr	r2, [r0]
     748:	add	r3, pc, r3
     74c:	cmp	r2, #0
     750:	bne	758 <frame_dummy+0x20>
     754:	b	680 <register_tm_clones>
     758:	ldr	r2, [pc, #32]	; 780 <frame_dummy+0x48>
     75c:	ldr	r3, [r3, r2]
     760:	cmp	r3, #0
     764:	beq	754 <frame_dummy+0x1c>
     768:	push	{r4, lr}
     76c:	blx	r3
     770:	pop	{r4, lr}
     774:	b	680 <register_tm_clones>
     778:	.word	0x000117b4
     77c:	.word	0x000118b0
     780:	.word	0x00000048

00000784 <m_map>:
     784:	push	{r4, r5, fp, lr}
     788:	add	fp, sp, #12
     78c:	sub	sp, sp, #16
     790:	str	r0, [fp, #-16]
     794:	str	r1, [fp, #-20]	; 0xffffffec
     798:	str	r2, [fp, #-24]	; 0xffffffe8
     79c:	str	r3, [fp, #-28]	; 0xffffffe4
     7a0:	ldr	r3, [pc, #168]	; 850 <m_map+0xcc>
     7a4:	add	r3, pc, r3
     7a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7ac:	ldrd	r0, [r2, #64]	; 0x40
     7b0:	mov	r4, #67108864	; 0x4000000
     7b4:	mov	r5, #0
     7b8:	and	r0, r0, r4
     7bc:	and	r1, r1, r5
     7c0:	orrs	r2, r0, r1
     7c4:	bne	7dc <m_map+0x58>
     7c8:	ldr	r2, [pc, #132]	; 854 <m_map+0xd0>
     7cc:	ldr	r2, [r3, r2]
     7d0:	ldr	r2, [r2]
     7d4:	cmp	r2, #0
     7d8:	bne	7f0 <m_map+0x6c>
     7dc:	ldr	r2, [pc, #116]	; 858 <m_map+0xd4>
     7e0:	ldr	r2, [r3, r2]
     7e4:	ldr	r2, [r2, #176]	; 0xb0
     7e8:	cmp	r2, #0
     7ec:	beq	814 <m_map+0x90>
     7f0:	ldr	r0, [fp, #-20]	; 0xffffffec
     7f4:	bl	c88 <flattened_map>
     7f8:	ldr	r3, [pc, #92]	; 85c <m_map+0xd8>
     7fc:	add	r3, pc, r3
     800:	mov	r2, r3
     804:	mov	r1, #17
     808:	ldr	r0, [fp, #-20]	; 0xffffffec
     80c:	bl	5c8 <sendto_one_numeric@plt>
     810:	b	848 <m_map+0xc4>
     814:	ldr	r2, [pc, #68]	; 860 <m_map+0xdc>
     818:	add	r2, pc, r2
     81c:	ldr	r1, [pc, #64]	; 864 <m_map+0xe0>
     820:	ldr	r3, [r3, r1]
     824:	mov	r1, r3
     828:	ldr	r0, [fp, #-20]	; 0xffffffec
     82c:	bl	8ec <dump_map>
     830:	ldr	r3, [pc, #48]	; 868 <m_map+0xe4>
     834:	add	r3, pc, r3
     838:	mov	r2, r3
     83c:	mov	r1, #17
     840:	ldr	r0, [fp, #-20]	; 0xffffffec
     844:	bl	5c8 <sendto_one_numeric@plt>
     848:	sub	sp, fp, #12
     84c:	pop	{r4, r5, fp, pc}
     850:	.word	0x00011854
     854:	.word	0x00000040
     858:	.word	0x00000054
     85c:	.word	0x00000a40
     860:	.word	0x000118b4
     864:	.word	0x00000050
     868:	.word	0x00000a08

0000086c <mo_map>:
     86c:	push	{fp, lr}
     870:	add	fp, sp, #4
     874:	sub	sp, sp, #16
     878:	str	r0, [fp, #-8]
     87c:	str	r1, [fp, #-12]
     880:	str	r2, [fp, #-16]
     884:	str	r3, [fp, #-20]	; 0xffffffec
     888:	ldr	r1, [pc, #76]	; 8dc <mo_map+0x70>
     88c:	add	r1, pc, r1
     890:	ldr	r3, [pc, #72]	; 8e0 <mo_map+0x74>
     894:	add	r3, pc, r3
     898:	mov	r2, r3
     89c:	ldr	r3, [pc, #64]	; 8e4 <mo_map+0x78>
     8a0:	ldr	r3, [r1, r3]
     8a4:	mov	r1, r3
     8a8:	ldr	r0, [fp, #-12]
     8ac:	bl	8ec <dump_map>
     8b0:	ldr	r0, [fp, #-12]
     8b4:	bl	5ec <scache_send_missing@plt>
     8b8:	ldr	r3, [pc, #40]	; 8e8 <mo_map+0x7c>
     8bc:	add	r3, pc, r3
     8c0:	mov	r2, r3
     8c4:	mov	r1, #17
     8c8:	ldr	r0, [fp, #-12]
     8cc:	bl	5c8 <sendto_one_numeric@plt>
     8d0:	nop			; (mov r0, r0)
     8d4:	sub	sp, fp, #4
     8d8:	pop	{fp, pc}
     8dc:	.word	0x0001176c
     8e0:	.word	0x00011838
     8e4:	.word	0x00000050
     8e8:	.word	0x00000980

000008ec <dump_map>:
     8ec:	push	{r4, fp, lr}
     8f0:	add	fp, sp, #8
     8f4:	sub	sp, sp, #52	; 0x34
     8f8:	str	r0, [fp, #-40]	; 0xffffffd8
     8fc:	str	r1, [fp, #-44]	; 0xffffffd4
     900:	str	r2, [fp, #-48]	; 0xffffffd0
     904:	ldr	r4, [pc, #836]	; c50 <dump_map+0x364>
     908:	add	r4, pc, r4
     90c:	mov	r3, #0
     910:	str	r3, [fp, #-16]
     914:	mov	r3, #0
     918:	str	r3, [fp, #-20]	; 0xffffffec
     91c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     920:	mov	r2, #0
     924:	strb	r2, [r3]
     928:	ldr	r3, [fp, #-44]	; 0xffffffd4
     92c:	add	r3, r3, #88	; 0x58
     930:	mov	r2, #512	; 0x200
     934:	mov	r1, r3
     938:	ldr	r0, [fp, #-48]	; 0xffffffd0
     93c:	bl	604 <rb_strlcat@plt>
     940:	ldr	r3, [fp, #-44]	; 0xffffffd4
     944:	ldrb	r3, [r3, #396]	; 0x18c
     948:	cmp	r3, #0
     94c:	beq	998 <dump_map+0xac>
     950:	mov	r2, #512	; 0x200
     954:	ldr	r3, [pc, #760]	; c54 <dump_map+0x368>
     958:	add	r3, pc, r3
     95c:	mov	r1, r3
     960:	ldr	r0, [fp, #-48]	; 0xffffffd0
     964:	bl	604 <rb_strlcat@plt>
     968:	ldr	r3, [fp, #-44]	; 0xffffffd4
     96c:	add	r3, r3, #396	; 0x18c
     970:	mov	r2, #512	; 0x200
     974:	mov	r1, r3
     978:	ldr	r0, [fp, #-48]	; 0xffffffd0
     97c:	bl	604 <rb_strlcat@plt>
     980:	mov	r2, #512	; 0x200
     984:	ldr	r3, [pc, #716]	; c58 <dump_map+0x36c>
     988:	add	r3, pc, r3
     98c:	mov	r1, r3
     990:	ldr	r0, [fp, #-48]	; 0xffffffd0
     994:	bl	604 <rb_strlcat@plt>
     998:	ldr	r3, [pc, #700]	; c5c <dump_map+0x370>
     99c:	add	r3, pc, r3
     9a0:	mov	r0, r3
     9a4:	bl	5d4 <strlen@plt>
     9a8:	mov	r3, r0
     9ac:	str	r3, [fp, #-28]	; 0xffffffe4
     9b0:	ldr	r2, [pc, #680]	; c60 <dump_map+0x374>
     9b4:	add	r2, pc, r2
     9b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9bc:	add	r3, r2, r3
     9c0:	mov	r2, #32
     9c4:	strb	r2, [r3]
     9c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9cc:	cmp	r3, #49	; 0x31
     9d0:	bgt	a14 <dump_map+0x128>
     9d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     9d8:	add	r3, r3, #1
     9dc:	str	r3, [fp, #-20]	; 0xffffffec
     9e0:	b	a08 <dump_map+0x11c>
     9e4:	ldr	r2, [pc, #632]	; c64 <dump_map+0x378>
     9e8:	add	r2, pc, r2
     9ec:	ldr	r3, [fp, #-20]	; 0xffffffec
     9f0:	add	r3, r2, r3
     9f4:	mov	r2, #45	; 0x2d
     9f8:	strb	r2, [r3]
     9fc:	ldr	r3, [fp, #-20]	; 0xffffffec
     a00:	add	r3, r3, #1
     a04:	str	r3, [fp, #-20]	; 0xffffffec
     a08:	ldr	r3, [fp, #-20]	; 0xffffffec
     a0c:	cmp	r3, #49	; 0x31
     a10:	ble	9e4 <dump_map+0xf8>
     a14:	ldr	r3, [fp, #-44]	; 0xffffffd4
     a18:	ldr	r3, [r3, #28]
     a1c:	ldr	r3, [r3, #56]	; 0x38
     a20:	mov	r2, #1000	; 0x3e8
     a24:	mul	r2, r2, r3
     a28:	ldr	r3, [pc, #568]	; c68 <dump_map+0x37c>
     a2c:	ldr	r3, [r4, r3]
     a30:	ldr	r3, [r3, #4]
     a34:	lsr	r1, r3, #31
     a38:	add	r3, r1, r3
     a3c:	asr	r3, r3, #1
     a40:	add	r2, r2, r3
     a44:	ldr	r3, [pc, #540]	; c68 <dump_map+0x37c>
     a48:	ldr	r3, [r4, r3]
     a4c:	ldr	r3, [r3, #4]
     a50:	mov	r1, r3
     a54:	mov	r0, r2
     a58:	bl	fdc <__udivsi3>
     a5c:	mov	r3, r0
     a60:	str	r3, [fp, #-32]	; 0xffffffe0
     a64:	ldr	r3, [pc, #512]	; c6c <dump_map+0x380>
     a68:	add	r3, pc, r3
     a6c:	add	ip, r3, #50	; 0x32
     a70:	ldr	r3, [fp, #-44]	; 0xffffffd4
     a74:	ldr	r3, [r3, #28]
     a78:	ldr	lr, [r3, #56]	; 0x38
     a7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a80:	ldr	r2, [pc, #488]	; c70 <dump_map+0x384>
     a84:	smull	r1, r2, r2, r3
     a88:	asr	r2, r2, #2
     a8c:	asr	r3, r3, #31
     a90:	sub	r0, r2, r3
     a94:	ldr	r1, [fp, #-32]	; 0xffffffe0
     a98:	ldr	r3, [pc, #464]	; c70 <dump_map+0x384>
     a9c:	smull	r2, r3, r3, r1
     aa0:	asr	r2, r3, #2
     aa4:	asr	r3, r1, #31
     aa8:	sub	r2, r2, r3
     aac:	mov	r3, r2
     ab0:	lsl	r3, r3, #2
     ab4:	add	r3, r3, r2
     ab8:	lsl	r3, r3, #1
     abc:	sub	r2, r1, r3
     ac0:	str	r2, [sp, #4]
     ac4:	str	r0, [sp]
     ac8:	mov	r3, lr
     acc:	ldr	r2, [pc, #416]	; c74 <dump_map+0x388>
     ad0:	add	r2, pc, r2
     ad4:	ldr	r1, [pc, #412]	; c78 <dump_map+0x38c>
     ad8:	mov	r0, ip
     adc:	bl	5e0 <snprintf@plt>
     ae0:	ldr	r3, [pc, #404]	; c7c <dump_map+0x390>
     ae4:	add	r3, pc, r3
     ae8:	ldr	r2, [pc, #400]	; c80 <dump_map+0x394>
     aec:	add	r2, pc, r2
     af0:	mov	r1, #15
     af4:	ldr	r0, [fp, #-40]	; 0xffffffd8
     af8:	bl	5c8 <sendto_one_numeric@plt>
     afc:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b00:	ldr	r3, [r3, #28]
     b04:	ldr	r3, [r3, #36]	; 0x24
     b08:	cmp	r3, #0
     b0c:	beq	b80 <dump_map+0x294>
     b10:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b14:	ldr	r3, [r3, #28]
     b18:	ldr	r2, [r3, #44]	; 0x2c
     b1c:	ldr	r3, [fp, #-16]
     b20:	add	r3, r2, r3
     b24:	str	r3, [fp, #-16]
     b28:	ldr	r3, [fp, #-16]
     b2c:	cmp	r3, #0
     b30:	beq	b80 <dump_map+0x294>
     b34:	ldr	r3, [pc, #328]	; c84 <dump_map+0x398>
     b38:	add	r3, pc, r3
     b3c:	add	r3, r3, #3
     b40:	ldr	r2, [fp, #-48]	; 0xffffffd0
     b44:	cmp	r2, r3
     b48:	bls	b80 <dump_map+0x294>
     b4c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     b50:	sub	r3, r3, #2
     b54:	mov	r2, #32
     b58:	strb	r2, [r3]
     b5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
     b60:	sub	r3, r3, #3
     b64:	ldrb	r3, [r3]
     b68:	cmp	r3, #96	; 0x60
     b6c:	bne	b80 <dump_map+0x294>
     b70:	ldr	r3, [fp, #-48]	; 0xffffffd0
     b74:	sub	r3, r3, #3
     b78:	mov	r2, #32
     b7c:	strb	r2, [r3]
     b80:	mov	r3, #1
     b84:	str	r3, [fp, #-20]	; 0xffffffec
     b88:	ldr	r3, [fp, #-44]	; 0xffffffd4
     b8c:	ldr	r3, [r3, #28]
     b90:	ldr	r3, [r3, #36]	; 0x24
     b94:	str	r3, [fp, #-24]	; 0xffffffe8
     b98:	b	c38 <dump_map+0x34c>
     b9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     ba0:	ldr	r3, [r3]
     ba4:	str	r3, [fp, #-36]	; 0xffffffdc
     ba8:	ldr	r3, [fp, #-48]	; 0xffffffd0
     bac:	mov	r2, #32
     bb0:	strb	r2, [r3]
     bb4:	ldr	r2, [fp, #-20]	; 0xffffffec
     bb8:	ldr	r3, [fp, #-16]
     bbc:	cmp	r2, r3
     bc0:	bge	bd8 <dump_map+0x2ec>
     bc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
     bc8:	add	r3, r3, #1
     bcc:	mov	r2, #124	; 0x7c
     bd0:	strb	r2, [r3]
     bd4:	b	be8 <dump_map+0x2fc>
     bd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
     bdc:	add	r3, r3, #1
     be0:	mov	r2, #96	; 0x60
     be4:	strb	r2, [r3]
     be8:	ldr	r3, [fp, #-48]	; 0xffffffd0
     bec:	add	r3, r3, #2
     bf0:	mov	r2, #45	; 0x2d
     bf4:	strb	r2, [r3]
     bf8:	ldr	r3, [fp, #-48]	; 0xffffffd0
     bfc:	add	r3, r3, #3
     c00:	mov	r2, #32
     c04:	strb	r2, [r3]
     c08:	ldr	r3, [fp, #-48]	; 0xffffffd0
     c0c:	add	r3, r3, #4
     c10:	mov	r2, r3
     c14:	ldr	r1, [fp, #-36]	; 0xffffffdc
     c18:	ldr	r0, [fp, #-40]	; 0xffffffd8
     c1c:	bl	8ec <dump_map>
     c20:	ldr	r3, [fp, #-20]	; 0xffffffec
     c24:	add	r3, r3, #1
     c28:	str	r3, [fp, #-20]	; 0xffffffec
     c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c30:	ldr	r3, [r3, #8]
     c34:	str	r3, [fp, #-24]	; 0xffffffe8
     c38:	ldr	r3, [fp, #-24]	; 0xffffffe8
     c3c:	cmp	r3, #0
     c40:	bne	b9c <dump_map+0x2b0>
     c44:	nop			; (mov r0, r0)
     c48:	sub	sp, fp, #8
     c4c:	pop	{r4, fp, pc}
     c50:	.word	0x000116f0
     c54:	.word	0x000008f4
     c58:	.word	0x000008c8
     c5c:	.word	0x00011730
     c60:	.word	0x00011718
     c64:	.word	0x000116e4
     c68:	.word	0x0000003c
     c6c:	.word	0x00011664
     c70:	.word	0x66666667
     c74:	.word	0x00000784
     c78:	.word	0x000001ce
     c7c:	.word	0x000115e8
     c80:	.word	0x00000784
     c84:	.word	0x00011594

00000c88 <flattened_map>:
     c88:	push	{r4, fp, lr}
     c8c:	add	fp, sp, #8
     c90:	sub	sp, sp, #556	; 0x22c
     c94:	str	r0, [fp, #-552]	; 0xfffffdd8
     c98:	ldr	r4, [pc, #780]	; fac <flattened_map+0x324>
     c9c:	add	r4, pc, r4
     ca0:	mov	r3, #0
     ca4:	str	r3, [fp, #-24]	; 0xffffffe8
     ca8:	sub	r0, fp, #544	; 0x220
     cac:	mov	r2, #512	; 0x200
     cb0:	ldr	r3, [pc, #760]	; fb0 <flattened_map+0x328>
     cb4:	ldr	r3, [r4, r3]
     cb8:	add	r1, r3, #88	; 0x58
     cbc:	bl	5f8 <rb_strlcpy@plt>
     cc0:	sub	r3, fp, #544	; 0x220
     cc4:	mov	r0, r3
     cc8:	bl	5d4 <strlen@plt>
     ccc:	mov	r3, r0
     cd0:	str	r3, [fp, #-28]	; 0xffffffe4
     cd4:	sub	r2, fp, #544	; 0x220
     cd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     cdc:	add	r3, r2, r3
     ce0:	mov	r2, #32
     ce4:	strb	r2, [r3]
     ce8:	ldr	r3, [fp, #-28]	; 0xffffffe4
     cec:	cmp	r3, #49	; 0x31
     cf0:	bgt	d30 <flattened_map+0xa8>
     cf4:	ldr	r3, [fp, #-28]	; 0xffffffe4
     cf8:	add	r3, r3, #1
     cfc:	str	r3, [fp, #-20]	; 0xffffffec
     d00:	b	d24 <flattened_map+0x9c>
     d04:	sub	r2, fp, #544	; 0x220
     d08:	ldr	r3, [fp, #-20]	; 0xffffffec
     d0c:	add	r3, r2, r3
     d10:	mov	r2, #45	; 0x2d
     d14:	strb	r2, [r3]
     d18:	ldr	r3, [fp, #-20]	; 0xffffffec
     d1c:	add	r3, r3, #1
     d20:	str	r3, [fp, #-20]	; 0xffffffec
     d24:	ldr	r3, [fp, #-20]	; 0xffffffec
     d28:	cmp	r3, #49	; 0x31
     d2c:	ble	d04 <flattened_map+0x7c>
     d30:	sub	r0, fp, #544	; 0x220
     d34:	add	r0, r0, #50	; 0x32
     d38:	ldr	r3, [pc, #624]	; fb0 <flattened_map+0x328>
     d3c:	ldr	r3, [r4, r3]
     d40:	ldr	r3, [r3, #28]
     d44:	ldr	r2, [r3, #56]	; 0x38
     d48:	ldr	r3, [pc, #608]	; fb0 <flattened_map+0x328>
     d4c:	ldr	r3, [r4, r3]
     d50:	ldr	r3, [r3, #28]
     d54:	ldr	r3, [r3, #56]	; 0x38
     d58:	vmov	s15, r3
     d5c:	vcvt.f32.u32	s15, s15
     d60:	vldr	s14, [pc, #576]	; fa8 <flattened_map+0x320>
     d64:	vmul.f32	s13, s15, s14
     d68:	ldr	r3, [pc, #580]	; fb4 <flattened_map+0x32c>
     d6c:	ldr	r3, [r4, r3]
     d70:	ldr	r3, [r3, #4]
     d74:	vmov	s15, r3
     d78:	vcvt.f32.s32	s14, s15
     d7c:	vdiv.f32	s15, s13, s14
     d80:	vcvt.f64.f32	d7, s15
     d84:	vstr	d7, [sp]
     d88:	mov	r3, r2
     d8c:	ldr	r2, [pc, #548]	; fb8 <flattened_map+0x330>
     d90:	add	r2, pc, r2
     d94:	ldr	r1, [pc, #544]	; fbc <flattened_map+0x334>
     d98:	bl	5e0 <snprintf@plt>
     d9c:	sub	r3, fp, #544	; 0x220
     da0:	ldr	r2, [pc, #536]	; fc0 <flattened_map+0x338>
     da4:	add	r2, pc, r2
     da8:	mov	r1, #15
     dac:	ldr	r0, [fp, #-552]	; 0xfffffdd8
     db0:	bl	5c8 <sendto_one_numeric@plt>
     db4:	ldr	r3, [pc, #520]	; fc4 <flattened_map+0x33c>
     db8:	ldr	r3, [r4, r3]
     dbc:	ldr	r3, [r3]
     dc0:	str	r3, [fp, #-16]
     dc4:	b	f90 <flattened_map+0x308>
     dc8:	ldr	r3, [fp, #-16]
     dcc:	ldr	r3, [r3]
     dd0:	str	r3, [fp, #-32]	; 0xffffffe0
     dd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dd8:	add	r3, r3, #1
     ddc:	str	r3, [fp, #-24]	; 0xffffffe8
     de0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     de4:	ldrh	r3, [r3, #80]	; 0x50
     de8:	cmp	r3, #4
     dec:	beq	f78 <flattened_map+0x2f0>
     df0:	ldr	r3, [pc, #464]	; fc8 <flattened_map+0x340>
     df4:	ldr	r3, [r4, r3]
     df8:	ldr	r3, [r3, #12]
     dfc:	cmp	r3, #0
     e00:	bne	e24 <flattened_map+0x19c>
     e04:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e08:	ldrd	r2, [r3, #64]	; 0x40
     e0c:	mov	r0, #2048	; 0x800
     e10:	mov	r1, #0
     e14:	and	r2, r2, r0
     e18:	and	r3, r3, r1
     e1c:	orrs	r3, r2, r3
     e20:	bne	f80 <flattened_map+0x2f8>
     e24:	ldr	r3, [pc, #408]	; fc4 <flattened_map+0x33c>
     e28:	ldr	r3, [r4, r3]
     e2c:	ldr	r2, [r3, #8]
     e30:	ldr	r3, [fp, #-24]	; 0xffffffe8
     e34:	cmp	r2, r3
     e38:	bne	e58 <flattened_map+0x1d0>
     e3c:	sub	r3, fp, #544	; 0x220
     e40:	mov	r2, #512	; 0x200
     e44:	ldr	r1, [pc, #384]	; fcc <flattened_map+0x344>
     e48:	add	r1, pc, r1
     e4c:	mov	r0, r3
     e50:	bl	5f8 <rb_strlcpy@plt>
     e54:	b	e70 <flattened_map+0x1e8>
     e58:	sub	r3, fp, #544	; 0x220
     e5c:	mov	r2, #512	; 0x200
     e60:	ldr	r1, [pc, #360]	; fd0 <flattened_map+0x348>
     e64:	add	r1, pc, r1
     e68:	mov	r0, r3
     e6c:	bl	5f8 <rb_strlcpy@plt>
     e70:	ldr	r3, [fp, #-32]	; 0xffffffe0
     e74:	add	r1, r3, #88	; 0x58
     e78:	sub	r3, fp, #544	; 0x220
     e7c:	mov	r2, #512	; 0x200
     e80:	mov	r0, r3
     e84:	bl	604 <rb_strlcat@plt>
     e88:	sub	r3, fp, #544	; 0x220
     e8c:	mov	r0, r3
     e90:	bl	5d4 <strlen@plt>
     e94:	mov	r3, r0
     e98:	str	r3, [fp, #-28]	; 0xffffffe4
     e9c:	sub	r2, fp, #544	; 0x220
     ea0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ea4:	add	r3, r2, r3
     ea8:	mov	r2, #32
     eac:	strb	r2, [r3]
     eb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
     eb4:	cmp	r3, #49	; 0x31
     eb8:	bgt	ef8 <flattened_map+0x270>
     ebc:	ldr	r3, [fp, #-28]	; 0xffffffe4
     ec0:	add	r3, r3, #1
     ec4:	str	r3, [fp, #-20]	; 0xffffffec
     ec8:	b	eec <flattened_map+0x264>
     ecc:	sub	r2, fp, #544	; 0x220
     ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
     ed4:	add	r3, r2, r3
     ed8:	mov	r2, #45	; 0x2d
     edc:	strb	r2, [r3]
     ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
     ee4:	add	r3, r3, #1
     ee8:	str	r3, [fp, #-20]	; 0xffffffec
     eec:	ldr	r3, [fp, #-20]	; 0xffffffec
     ef0:	cmp	r3, #49	; 0x31
     ef4:	ble	ecc <flattened_map+0x244>
     ef8:	sub	r0, fp, #544	; 0x220
     efc:	add	r0, r0, #50	; 0x32
     f00:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f04:	ldr	r3, [r3, #28]
     f08:	ldr	r2, [r3, #56]	; 0x38
     f0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     f10:	ldr	r3, [r3, #28]
     f14:	ldr	r3, [r3, #56]	; 0x38
     f18:	vmov	s15, r3
     f1c:	vcvt.f32.u32	s15, s15
     f20:	vldr	s14, [pc, #128]	; fa8 <flattened_map+0x320>
     f24:	vmul.f32	s13, s15, s14
     f28:	ldr	r3, [pc, #132]	; fb4 <flattened_map+0x32c>
     f2c:	ldr	r3, [r4, r3]
     f30:	ldr	r3, [r3, #4]
     f34:	vmov	s15, r3
     f38:	vcvt.f32.s32	s14, s15
     f3c:	vdiv.f32	s15, s13, s14
     f40:	vcvt.f64.f32	d7, s15
     f44:	vstr	d7, [sp]
     f48:	mov	r3, r2
     f4c:	ldr	r2, [pc, #128]	; fd4 <flattened_map+0x34c>
     f50:	add	r2, pc, r2
     f54:	ldr	r1, [pc, #96]	; fbc <flattened_map+0x334>
     f58:	bl	5e0 <snprintf@plt>
     f5c:	sub	r3, fp, #544	; 0x220
     f60:	ldr	r2, [pc, #112]	; fd8 <flattened_map+0x350>
     f64:	add	r2, pc, r2
     f68:	mov	r1, #15
     f6c:	ldr	r0, [fp, #-552]	; 0xfffffdd8
     f70:	bl	5c8 <sendto_one_numeric@plt>
     f74:	b	f84 <flattened_map+0x2fc>
     f78:	nop			; (mov r0, r0)
     f7c:	b	f84 <flattened_map+0x2fc>
     f80:	nop			; (mov r0, r0)
     f84:	ldr	r3, [fp, #-16]
     f88:	ldr	r3, [r3, #8]
     f8c:	str	r3, [fp, #-16]
     f90:	ldr	r3, [fp, #-16]
     f94:	cmp	r3, #0
     f98:	bne	dc8 <flattened_map+0x140>
     f9c:	nop			; (mov r0, r0)
     fa0:	sub	sp, fp, #8
     fa4:	pop	{r4, fp, pc}
     fa8:	.word	0x42c80000
     fac:	.word	0x0001135c
     fb0:	.word	0x00000050
     fb4:	.word	0x0000003c
     fb8:	.word	0x000004e4
     fbc:	.word	0x000001ce
     fc0:	.word	0x000004cc
     fc4:	.word	0x00000030
     fc8:	.word	0x00000040
     fcc:	.word	0x00000448
     fd0:	.word	0x00000434
     fd4:	.word	0x00000324
     fd8:	.word	0x0000030c

00000fdc <__udivsi3>:
     fdc:	subs	r2, r1, #1
     fe0:	bxeq	lr
     fe4:	bcc	11bc <__udivsi3+0x1e0>
     fe8:	cmp	r0, r1
     fec:	bls	11a0 <__udivsi3+0x1c4>
     ff0:	tst	r1, r2
     ff4:	beq	11ac <__udivsi3+0x1d0>
     ff8:	clz	r3, r0
     ffc:	clz	r2, r1
    1000:	sub	r3, r2, r3
    1004:	rsbs	r3, r3, #31
    1008:	addne	r3, r3, r3, lsl #1
    100c:	mov	r2, #0
    1010:	addne	pc, pc, r3, lsl #2
    1014:	nop			; (mov r0, r0)
    1018:	cmp	r0, r1, lsl #31
    101c:	adc	r2, r2, r2
    1020:	subcs	r0, r0, r1, lsl #31
    1024:	cmp	r0, r1, lsl #30
    1028:	adc	r2, r2, r2
    102c:	subcs	r0, r0, r1, lsl #30
    1030:	cmp	r0, r1, lsl #29
    1034:	adc	r2, r2, r2
    1038:	subcs	r0, r0, r1, lsl #29
    103c:	cmp	r0, r1, lsl #28
    1040:	adc	r2, r2, r2
    1044:	subcs	r0, r0, r1, lsl #28
    1048:	cmp	r0, r1, lsl #27
    104c:	adc	r2, r2, r2
    1050:	subcs	r0, r0, r1, lsl #27
    1054:	cmp	r0, r1, lsl #26
    1058:	adc	r2, r2, r2
    105c:	subcs	r0, r0, r1, lsl #26
    1060:	cmp	r0, r1, lsl #25
    1064:	adc	r2, r2, r2
    1068:	subcs	r0, r0, r1, lsl #25
    106c:	cmp	r0, r1, lsl #24
    1070:	adc	r2, r2, r2
    1074:	subcs	r0, r0, r1, lsl #24
    1078:	cmp	r0, r1, lsl #23
    107c:	adc	r2, r2, r2
    1080:	subcs	r0, r0, r1, lsl #23
    1084:	cmp	r0, r1, lsl #22
    1088:	adc	r2, r2, r2
    108c:	subcs	r0, r0, r1, lsl #22
    1090:	cmp	r0, r1, lsl #21
    1094:	adc	r2, r2, r2
    1098:	subcs	r0, r0, r1, lsl #21
    109c:	cmp	r0, r1, lsl #20
    10a0:	adc	r2, r2, r2
    10a4:	subcs	r0, r0, r1, lsl #20
    10a8:	cmp	r0, r1, lsl #19
    10ac:	adc	r2, r2, r2
    10b0:	subcs	r0, r0, r1, lsl #19
    10b4:	cmp	r0, r1, lsl #18
    10b8:	adc	r2, r2, r2
    10bc:	subcs	r0, r0, r1, lsl #18
    10c0:	cmp	r0, r1, lsl #17
    10c4:	adc	r2, r2, r2
    10c8:	subcs	r0, r0, r1, lsl #17
    10cc:	cmp	r0, r1, lsl #16
    10d0:	adc	r2, r2, r2
    10d4:	subcs	r0, r0, r1, lsl #16
    10d8:	cmp	r0, r1, lsl #15
    10dc:	adc	r2, r2, r2
    10e0:	subcs	r0, r0, r1, lsl #15
    10e4:	cmp	r0, r1, lsl #14
    10e8:	adc	r2, r2, r2
    10ec:	subcs	r0, r0, r1, lsl #14
    10f0:	cmp	r0, r1, lsl #13
    10f4:	adc	r2, r2, r2
    10f8:	subcs	r0, r0, r1, lsl #13
    10fc:	cmp	r0, r1, lsl #12
    1100:	adc	r2, r2, r2
    1104:	subcs	r0, r0, r1, lsl #12
    1108:	cmp	r0, r1, lsl #11
    110c:	adc	r2, r2, r2
    1110:	subcs	r0, r0, r1, lsl #11
    1114:	cmp	r0, r1, lsl #10
    1118:	adc	r2, r2, r2
    111c:	subcs	r0, r0, r1, lsl #10
    1120:	cmp	r0, r1, lsl #9
    1124:	adc	r2, r2, r2
    1128:	subcs	r0, r0, r1, lsl #9
    112c:	cmp	r0, r1, lsl #8
    1130:	adc	r2, r2, r2
    1134:	subcs	r0, r0, r1, lsl #8
    1138:	cmp	r0, r1, lsl #7
    113c:	adc	r2, r2, r2
    1140:	subcs	r0, r0, r1, lsl #7
    1144:	cmp	r0, r1, lsl #6
    1148:	adc	r2, r2, r2
    114c:	subcs	r0, r0, r1, lsl #6
    1150:	cmp	r0, r1, lsl #5
    1154:	adc	r2, r2, r2
    1158:	subcs	r0, r0, r1, lsl #5
    115c:	cmp	r0, r1, lsl #4
    1160:	adc	r2, r2, r2
    1164:	subcs	r0, r0, r1, lsl #4
    1168:	cmp	r0, r1, lsl #3
    116c:	adc	r2, r2, r2
    1170:	subcs	r0, r0, r1, lsl #3
    1174:	cmp	r0, r1, lsl #2
    1178:	adc	r2, r2, r2
    117c:	subcs	r0, r0, r1, lsl #2
    1180:	cmp	r0, r1, lsl #1
    1184:	adc	r2, r2, r2
    1188:	subcs	r0, r0, r1, lsl #1
    118c:	cmp	r0, r1
    1190:	adc	r2, r2, r2
    1194:	subcs	r0, r0, r1
    1198:	mov	r0, r2
    119c:	bx	lr
    11a0:	moveq	r0, #1
    11a4:	movne	r0, #0
    11a8:	bx	lr
    11ac:	clz	r2, r1
    11b0:	rsb	r2, r2, #31
    11b4:	lsr	r0, r0, r2
    11b8:	bx	lr
    11bc:	cmp	r0, #0
    11c0:	mvnne	r0, #0
    11c4:	b	11e8 <__aeabi_idiv0>

000011c8 <__aeabi_uidivmod>:
    11c8:	cmp	r1, #0
    11cc:	beq	11bc <__udivsi3+0x1e0>
    11d0:	push	{r0, r1, lr}
    11d4:	bl	fdc <__udivsi3>
    11d8:	pop	{r1, r2, lr}
    11dc:	mul	r3, r2, r0
    11e0:	sub	r1, r1, r3
    11e4:	bx	lr

000011e8 <__aeabi_idiv0>:
    11e8:	push	{r1, lr}
    11ec:	mov	r0, #8
    11f0:	bl	5a4 <raise@plt>
    11f4:	pop	{r1, pc}

Disassembly of section .fini:

000011f8 <_fini>:
    11f8:	push	{r3, lr}
    11fc:	pop	{r3, pc}
