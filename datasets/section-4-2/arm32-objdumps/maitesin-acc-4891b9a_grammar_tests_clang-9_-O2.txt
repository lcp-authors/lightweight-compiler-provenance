
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011e38 <.init>:
   11e38:	push	{r3, lr}
   11e3c:	bl	1208c <_start@@Base+0x3c>
   11e40:	pop	{r3, pc}

Disassembly of section .plt:

00011e44 <fdopen@plt-0x14>:
   11e44:	push	{lr}		; (str lr, [sp, #-4]!)
   11e48:	ldr	lr, [pc, #4]	; 11e54 <fdopen@plt-0x4>
   11e4c:	add	lr, pc, lr
   11e50:	ldr	pc, [lr, #8]!
   11e54:	andeq	fp, r1, ip, lsr #3

00011e58 <fdopen@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #110592	; 0x1b000
   11e60:	ldr	pc, [ip, #428]!	; 0x1ac

00011e64 <setbuf@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #110592	; 0x1b000
   11e6c:	ldr	pc, [ip, #420]!	; 0x1a4

00011e70 <strtol@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #110592	; 0x1b000
   11e78:	ldr	pc, [ip, #412]!	; 0x19c

00011e7c <printf@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #110592	; 0x1b000
   11e84:	ldr	pc, [ip, #404]!	; 0x194

00011e88 <fflush@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #110592	; 0x1b000
   11e90:	ldr	pc, [ip, #396]!	; 0x18c

00011e94 <free@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #110592	; 0x1b000
   11e9c:	ldr	pc, [ip, #388]!	; 0x184

00011ea0 <memcpy@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #110592	; 0x1b000
   11ea8:	ldr	pc, [ip, #380]!	; 0x17c

00011eac <mmap64@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #110592	; 0x1b000
   11eb4:	ldr	pc, [ip, #372]!	; 0x174

00011eb8 <ftell@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #110592	; 0x1b000
   11ec0:	ldr	pc, [ip, #364]!	; 0x16c

00011ec4 <uname@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #110592	; 0x1b000
   11ecc:	ldr	pc, [ip, #356]!	; 0x164

00011ed0 <strdup@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #110592	; 0x1b000
   11ed8:	ldr	pc, [ip, #348]!	; 0x15c

00011edc <realloc@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #110592	; 0x1b000
   11ee4:	ldr	pc, [ip, #340]!	; 0x154

00011ee8 <fwrite@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #110592	; 0x1b000
   11ef0:	ldr	pc, [ip, #332]!	; 0x14c

00011ef4 <open64@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #110592	; 0x1b000
   11efc:	ldr	pc, [ip, #324]!	; 0x144

00011f00 <getenv@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #110592	; 0x1b000
   11f08:	ldr	pc, [ip, #316]!	; 0x13c

00011f0c <puts@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #110592	; 0x1b000
   11f14:	ldr	pc, [ip, #308]!	; 0x134

00011f18 <malloc@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #110592	; 0x1b000
   11f20:	ldr	pc, [ip, #300]!	; 0x12c

00011f24 <__libc_start_main@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #110592	; 0x1b000
   11f2c:	ldr	pc, [ip, #292]!	; 0x124

00011f30 <strerror@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #110592	; 0x1b000
   11f38:	ldr	pc, [ip, #284]!	; 0x11c

00011f3c <__gmon_start__@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #110592	; 0x1b000
   11f44:	ldr	pc, [ip, #276]!	; 0x114

00011f48 <getpid@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #110592	; 0x1b000
   11f50:	ldr	pc, [ip, #268]!	; 0x10c

00011f54 <exit@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #110592	; 0x1b000
   11f5c:	ldr	pc, [ip, #260]!	; 0x104

00011f60 <strlen@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #110592	; 0x1b000
   11f68:	ldr	pc, [ip, #252]!	; 0xfc

00011f6c <strchr@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #110592	; 0x1b000
   11f74:	ldr	pc, [ip, #244]!	; 0xf4

00011f78 <fprintf@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #110592	; 0x1b000
   11f80:	ldr	pc, [ip, #236]!	; 0xec

00011f84 <__errno_location@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #110592	; 0x1b000
   11f8c:	ldr	pc, [ip, #228]!	; 0xe4

00011f90 <__cxa_atexit@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #110592	; 0x1b000
   11f98:	ldr	pc, [ip, #220]!	; 0xdc

00011f9c <mkdir@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #110592	; 0x1b000
   11fa4:	ldr	pc, [ip, #212]!	; 0xd4

00011fa8 <memset@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #110592	; 0x1b000
   11fb0:	ldr	pc, [ip, #204]!	; 0xcc

00011fb4 <strncpy@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #110592	; 0x1b000
   11fbc:	ldr	pc, [ip, #196]!	; 0xc4

00011fc0 <prctl@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #110592	; 0x1b000
   11fc8:	ldr	pc, [ip, #188]!	; 0xbc

00011fcc <fileno@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #110592	; 0x1b000
   11fd4:	ldr	pc, [ip, #180]!	; 0xb4

00011fd8 <fclose@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #110592	; 0x1b000
   11fe0:	ldr	pc, [ip, #172]!	; 0xac

00011fe4 <strnlen@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #110592	; 0x1b000
   11fec:	ldr	pc, [ip, #164]!	; 0xa4

00011ff0 <munmap@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #110592	; 0x1b000
   11ff8:	ldr	pc, [ip, #156]!	; 0x9c

00011ffc <fcntl64@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #110592	; 0x1b000
   12004:	ldr	pc, [ip, #148]!	; 0x94

00012008 <strrchr@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #110592	; 0x1b000
   12010:	ldr	pc, [ip, #140]!	; 0x8c

00012014 <msync@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #110592	; 0x1b000
   1201c:	ldr	pc, [ip, #132]!	; 0x84

00012020 <fseek@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #110592	; 0x1b000
   12028:	ldr	pc, [ip, #124]!	; 0x7c

0001202c <strncmp@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #110592	; 0x1b000
   12034:	ldr	pc, [ip, #116]!	; 0x74

00012038 <abort@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #110592	; 0x1b000
   12040:	ldr	pc, [ip, #108]!	; 0x6c

00012044 <__assert_fail@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #110592	; 0x1b000
   1204c:	ldr	pc, [ip, #100]!	; 0x64

Disassembly of section .text:

00012050 <_start@@Base>:
   12050:	mov	fp, #0
   12054:	mov	lr, #0
   12058:	pop	{r1}		; (ldr r1, [sp], #4)
   1205c:	mov	r2, sp
   12060:	push	{r2}		; (str r2, [sp, #-4]!)
   12064:	push	{r0}		; (str r0, [sp, #-4]!)
   12068:	ldr	ip, [pc, #16]	; 12080 <_start@@Base+0x30>
   1206c:	push	{ip}		; (str ip, [sp, #-4]!)
   12070:	ldr	r0, [pc, #12]	; 12084 <_start@@Base+0x34>
   12074:	ldr	r3, [pc, #12]	; 12088 <_start@@Base+0x38>
   12078:	bl	11f24 <__libc_start_main@plt>
   1207c:	bl	12038 <abort@plt>
   12080:	andeq	sl, r1, r8, ror r8
   12084:	andeq	r4, r1, r0, lsr #5
   12088:	andeq	sl, r1, r8, lsl r8
   1208c:	ldr	r3, [pc, #20]	; 120a8 <_start@@Base+0x58>
   12090:	ldr	r2, [pc, #20]	; 120ac <_start@@Base+0x5c>
   12094:	add	r3, pc, r3
   12098:	ldr	r2, [r3, r2]
   1209c:	cmp	r2, #0
   120a0:	bxeq	lr
   120a4:	b	11f3c <__gmon_start__@plt>
   120a8:	andeq	sl, r1, r4, ror #30
   120ac:	andeq	r0, r0, ip, asr #1
   120b0:	ldr	r0, [pc, #24]	; 120d0 <_start@@Base+0x80>
   120b4:	ldr	r3, [pc, #24]	; 120d4 <_start@@Base+0x84>
   120b8:	cmp	r3, r0
   120bc:	bxeq	lr
   120c0:	ldr	r3, [pc, #16]	; 120d8 <_start@@Base+0x88>
   120c4:	cmp	r3, #0
   120c8:	bxeq	lr
   120cc:	bx	r3
   120d0:	strdeq	sp, [r2], -r0
   120d4:	strdeq	sp, [r2], -r0
   120d8:	andeq	r0, r0, r0
   120dc:	ldr	r0, [pc, #36]	; 12108 <_start@@Base+0xb8>
   120e0:	ldr	r1, [pc, #36]	; 1210c <_start@@Base+0xbc>
   120e4:	sub	r1, r1, r0
   120e8:	asr	r1, r1, #2
   120ec:	add	r1, r1, r1, lsr #31
   120f0:	asrs	r1, r1, #1
   120f4:	bxeq	lr
   120f8:	ldr	r3, [pc, #16]	; 12110 <_start@@Base+0xc0>
   120fc:	cmp	r3, #0
   12100:	bxeq	lr
   12104:	bx	r3
   12108:	strdeq	sp, [r2], -r0
   1210c:	strdeq	sp, [r2], -r0
   12110:	andeq	r0, r0, r0
   12114:	push	{r4, lr}
   12118:	ldr	r4, [pc, #24]	; 12138 <_start@@Base+0xe8>
   1211c:	ldrb	r3, [r4]
   12120:	cmp	r3, #0
   12124:	popne	{r4, pc}
   12128:	bl	120b0 <_start@@Base+0x60>
   1212c:	mov	r3, #1
   12130:	strb	r3, [r4]
   12134:	pop	{r4, pc}
   12138:	strdeq	sp, [r2], -r0
   1213c:	b	120dc <_start@@Base+0x8c>

00012140 <next@@Base>:
   12140:	push	{r4, r6, r7, sl, fp, lr}
   12144:	add	fp, sp, #16
   12148:	ldr	r1, [pc, #472]	; 12328 <next@@Base+0x1e8>
   1214c:	ldr	r1, [pc, r1]
   12150:	str	r0, [r1]
   12154:	ldr	r4, [pc, #464]	; 1232c <next@@Base+0x1ec>
   12158:	ldr	r2, [pc, #464]	; 12330 <next@@Base+0x1f0>
   1215c:	ldr	r2, [pc, r2]
   12160:	add	r4, pc, r4
   12164:	adds	r2, r2, #1
   12168:	str	r2, [r4]
   1216c:	ldr	r2, [r4, #4]
   12170:	adc	r2, r2, #0
   12174:	str	r2, [r4, #4]
   12178:	ldr	r2, [r1, #204]	; 0xcc
   1217c:	cmp	r2, #49	; 0x31
   12180:	bhi	121a8 <next@@Base+0x68>
   12184:	ldrd	r6, [r4, #8]
   12188:	add	r2, r1, r2, lsl #2
   1218c:	add	r3, r4, #24
   12190:	str	r0, [r2, #4]
   12194:	ldr	r2, [r1, #204]	; 0xcc
   12198:	adds	r6, r6, #1
   1219c:	adc	r7, r7, #0
   121a0:	strd	r6, [r4, #8]
   121a4:	b	121c8 <next@@Base+0x88>
   121a8:	ldrd	r6, [r4, #16]
   121ac:	ldr	r3, [r1, #212]	; 0xd4
   121b0:	adds	r6, r6, #1
   121b4:	add	r3, r3, #1
   121b8:	adc	r7, r7, #0
   121bc:	str	r3, [r1, #212]	; 0xd4
   121c0:	add	r3, r4, #32
   121c4:	strd	r6, [r4, #16]
   121c8:	ldrd	r6, [r3]
   121cc:	add	r2, r2, #1
   121d0:	str	r2, [r1, #204]	; 0xcc
   121d4:	adds	r6, r6, #1
   121d8:	adc	r7, r7, #0
   121dc:	strd	r6, [r3]
   121e0:	ldr	r2, [pc, #332]	; 12334 <next@@Base+0x1f4>
   121e4:	ldr	r2, [pc, r2]
   121e8:	ldr	r3, [r2, #200]	; 0xc8
   121ec:	cmp	r3, #49	; 0x31
   121f0:	bhi	12220 <next@@Base+0xe0>
   121f4:	add	r7, r3, #1
   121f8:	str	r7, [r2, #200]	; 0xc8
   121fc:	ldrd	r6, [r4, #40]	; 0x28
   12200:	adds	r6, r6, #1
   12204:	adc	r7, r7, #0
   12208:	strd	r6, [r4, #40]	; 0x28
   1220c:	ldr	r7, [pc, #292]	; 12338 <next@@Base+0x1f8>
   12210:	ldr	r7, [pc, r7]
   12214:	str	r7, [r2, r3, lsl #2]
   12218:	add	r2, r4, #56	; 0x38
   1221c:	b	12224 <next@@Base+0xe4>
   12220:	add	r2, r4, #48	; 0x30
   12224:	ldrd	r6, [r2]
   12228:	adds	r6, r6, #1
   1222c:	adc	r7, r7, #0
   12230:	strd	r6, [r2]
   12234:	ldr	r2, [r1, #232]	; 0xe8
   12238:	cmp	r2, #0
   1223c:	beq	1227c <next@@Base+0x13c>
   12240:	ldrd	r6, [r4, #64]	; 0x40
   12244:	adds	r6, r6, #1
   12248:	adc	r7, r7, #0
   1224c:	strd	r6, [r4, #64]	; 0x40
   12250:	blx	r2
   12254:	add	r2, r4, #80	; 0x50
   12258:	ldrd	r6, [r2]
   1225c:	adds	r6, r6, #1
   12260:	adc	r7, r7, #0
   12264:	strd	r6, [r2]
   12268:	ldrd	r2, [r4, #144]	; 0x90
   1226c:	adds	r2, r2, #1
   12270:	adc	r3, r3, #0
   12274:	strd	r2, [r4, #144]	; 0x90
   12278:	pop	{r4, r6, r7, sl, fp, pc}
   1227c:	ldr	r0, [r4, #72]	; 0x48
   12280:	ldr	r3, [r4, #76]	; 0x4c
   12284:	adds	r0, r0, #1
   12288:	str	r0, [r4, #72]	; 0x48
   1228c:	ldr	r0, [r1, #220]	; 0xdc
   12290:	adc	r3, r3, #0
   12294:	str	r3, [r4, #76]	; 0x4c
   12298:	cmp	r0, #0
   1229c:	beq	122e4 <next@@Base+0x1a4>
   122a0:	ldrd	r2, [r4, #88]	; 0x58
   122a4:	adds	r2, r2, #1
   122a8:	adc	r3, r3, #0
   122ac:	strd	r2, [r4, #88]	; 0x58
   122b0:	ldr	r3, [r1, #224]	; 0xe0
   122b4:	ldr	r2, [r1, #228]	; 0xe4
   122b8:	cmp	r3, r0
   122bc:	bge	12308 <next@@Base+0x1c8>
   122c0:	add	r0, r3, #1
   122c4:	str	r0, [r1, #224]	; 0xe0
   122c8:	ldrd	r0, [r4, #104]	; 0x68
   122cc:	adds	r0, r0, #1
   122d0:	adc	r1, r1, #0
   122d4:	strd	r0, [r4, #104]	; 0x68
   122d8:	ldr	r0, [r2, r3, lsl #2]
   122dc:	add	r2, r4, #120	; 0x78
   122e0:	b	12258 <next@@Base+0x118>
   122e4:	ldr	r0, [r4, #96]	; 0x60
   122e8:	ldr	r3, [r4, #100]	; 0x64
   122ec:	add	r2, r4, #136	; 0x88
   122f0:	adds	r0, r0, #1
   122f4:	str	r0, [r4, #96]	; 0x60
   122f8:	ldr	r0, [r1, #216]	; 0xd8
   122fc:	adc	r3, r3, #0
   12300:	str	r3, [r4, #100]	; 0x64
   12304:	b	12258 <next@@Base+0x118>
   12308:	ldrd	r6, [r4, #112]	; 0x70
   1230c:	add	r0, r2, r0, lsl #2
   12310:	add	r2, r4, #128	; 0x80
   12314:	adds	r6, r6, #1
   12318:	adc	r7, r7, #0
   1231c:	strd	r6, [r4, #112]	; 0x70
   12320:	ldr	r0, [r0, #-4]
   12324:	b	12258 <next@@Base+0x118>
   12328:	andeq	sl, r1, ip, ror pc
   1232c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12330:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12334:	strdeq	sl, [r1], -r0
   12338:			; <UNDEFINED> instruction: 0x0001aeb0
   1233c:	nop	{0}

00012340 <next_reset@@Base>:
   12340:	push	{r4, sl, fp, lr}
   12344:	add	fp, sp, #8
   12348:	ldr	r0, [pc, #80]	; 123a0 <next_reset@@Base+0x60>
   1234c:	add	r1, pc, #60	; 0x3c
   12350:	mov	r2, #236	; 0xec
   12354:	vld1.64	{d16-d17}, [r1 :128]
   12358:	mov	r1, #0
   1235c:	add	r0, pc, r0
   12360:	vld1.64	{d18-d19}, [r0 :128]
   12364:	vadd.i64	q8, q9, q8
   12368:	vst1.64	{d16-d17}, [r0 :128]
   1236c:	ldr	r4, [pc, #48]	; 123a4 <next_reset@@Base+0x64>
   12370:	ldr	r4, [pc, r4]
   12374:	mov	r0, r4
   12378:	bl	11fa8 <memset@plt>
   1237c:	mov	r0, #50	; 0x32
   12380:	str	r0, [r4, #208]	; 0xd0
   12384:	pop	{r4, sl, fp, pc}
   12388:	nop	{0}
   1238c:	nop	{0}
   12390:	andeq	r0, r0, r1
   12394:	andeq	r0, r0, r0
   12398:	andeq	r0, r0, r1
   1239c:	andeq	r0, r0, r0
   123a0:	andeq	sl, r1, ip, lsr lr
   123a4:	andeq	sl, r1, r8, asr sp

000123a8 <push_back@@Base>:
   123a8:	push	{r4, r5, r6, r7, fp, lr}
   123ac:	add	fp, sp, #16
   123b0:	ldr	ip, [pc, #340]	; 1250c <push_back@@Base+0x164>
   123b4:	ldr	ip, [pc, ip]
   123b8:	str	r1, [ip, #204]	; 0xcc
   123bc:	str	r0, [ip]
   123c0:	ldr	r4, [pc, #328]	; 12510 <push_back@@Base+0x168>
   123c4:	ldr	r2, [pc, #328]	; 12514 <push_back@@Base+0x16c>
   123c8:	ldr	r2, [pc, r2]
   123cc:	add	r4, pc, r4
   123d0:	ldr	r3, [ip, #408]	; 0x198
   123d4:	adds	r2, r2, #1
   123d8:	str	r2, [r4]
   123dc:	ldr	r2, [r4, #4]
   123e0:	adc	r2, r2, #0
   123e4:	cmp	r3, #49	; 0x31
   123e8:	str	r2, [r4, #4]
   123ec:	bhi	12428 <push_back@@Base+0x80>
   123f0:	ldr	r2, [r4, #8]
   123f4:	ldr	r5, [r4, #12]
   123f8:	adds	r2, r2, #1
   123fc:	str	r2, [r4, #8]
   12400:	add	r2, ip, r3, lsl #2
   12404:	adc	r5, r5, #0
   12408:	str	r5, [r4, #12]
   1240c:	str	r0, [r2, #4]
   12410:	ldr	r2, [ip, #408]	; 0x198
   12414:	add	r2, ip, r2, lsl #2
   12418:	str	r1, [r2, #208]	; 0xd0
   1241c:	add	r2, r4, #24
   12420:	ldr	r3, [ip, #408]	; 0x198
   12424:	b	12450 <push_back@@Base+0xa8>
   12428:	ldr	r2, [r4, #16]
   1242c:	ldr	r5, [r4, #20]
   12430:	adds	r2, r2, #1
   12434:	str	r2, [r4, #16]
   12438:	ldr	r2, [ip, #416]	; 0x1a0
   1243c:	adc	r5, r5, #0
   12440:	str	r5, [r4, #20]
   12444:	add	r2, r2, #1
   12448:	str	r2, [ip, #416]	; 0x1a0
   1244c:	add	r2, r4, #32
   12450:	ldrd	r6, [r2]
   12454:	adds	r6, r6, #1
   12458:	adc	r7, r7, #0
   1245c:	strd	r6, [r2]
   12460:	add	r2, r3, #1
   12464:	str	r2, [ip, #408]	; 0x198
   12468:	ldr	r2, [pc, #168]	; 12518 <push_back@@Base+0x170>
   1246c:	ldr	r2, [pc, r2]
   12470:	ldr	r3, [r2, #200]	; 0xc8
   12474:	cmp	r3, #49	; 0x31
   12478:	bhi	124a8 <push_back@@Base+0x100>
   1247c:	add	r7, r3, #1
   12480:	str	r7, [r2, #200]	; 0xc8
   12484:	ldrd	r6, [r4, #40]	; 0x28
   12488:	adds	r6, r6, #1
   1248c:	adc	r7, r7, #0
   12490:	strd	r6, [r4, #40]	; 0x28
   12494:	ldr	r7, [pc, #128]	; 1251c <push_back@@Base+0x174>
   12498:	ldr	r7, [pc, r7]
   1249c:	str	r7, [r2, r3, lsl #2]
   124a0:	add	r2, r4, #56	; 0x38
   124a4:	b	124ac <push_back@@Base+0x104>
   124a8:	add	r2, r4, #48	; 0x30
   124ac:	ldrd	r6, [r2]
   124b0:	adds	r6, r6, #1
   124b4:	adc	r7, r7, #0
   124b8:	strd	r6, [r2]
   124bc:	ldr	r2, [ip, #420]	; 0x1a4
   124c0:	cmp	r2, #0
   124c4:	beq	124e4 <push_back@@Base+0x13c>
   124c8:	ldrd	r6, [r4, #64]	; 0x40
   124cc:	adds	r6, r6, #1
   124d0:	adc	r7, r7, #0
   124d4:	strd	r6, [r4, #64]	; 0x40
   124d8:	blx	r2
   124dc:	add	r0, r4, #80	; 0x50
   124e0:	b	124e8 <push_back@@Base+0x140>
   124e4:	add	r0, r4, #72	; 0x48
   124e8:	ldrd	r2, [r0]
   124ec:	adds	r2, r2, #1
   124f0:	adc	r3, r3, #0
   124f4:	strd	r2, [r0]
   124f8:	ldrd	r0, [r4, #88]	; 0x58
   124fc:	adds	r0, r0, #1
   12500:	adc	r1, r1, #0
   12504:	strd	r0, [r4, #88]	; 0x58
   12508:	pop	{r4, r5, r6, r7, fp, pc}
   1250c:	andeq	sl, r1, r4, lsl #26
   12510:	ldrdeq	sl, [r1], -ip
   12514:	andeq	sl, r1, r0, ror #27
   12518:	andeq	sl, r1, r8, ror #24
   1251c:	andeq	sl, r1, r8, lsr ip

00012520 <push_back_reset@@Base>:
   12520:	push	{r4, sl, fp, lr}
   12524:	add	fp, sp, #8
   12528:	ldr	r0, [pc, #80]	; 12580 <push_back_reset@@Base+0x60>
   1252c:	add	r1, pc, #60	; 0x3c
   12530:	mov	r2, #424	; 0x1a8
   12534:	vld1.64	{d16-d17}, [r1 :128]
   12538:	mov	r1, #0
   1253c:	add	r0, pc, r0
   12540:	vld1.64	{d18-d19}, [r0 :128]
   12544:	vadd.i64	q8, q9, q8
   12548:	vst1.64	{d16-d17}, [r0 :128]
   1254c:	ldr	r4, [pc, #48]	; 12584 <push_back_reset@@Base+0x64>
   12550:	ldr	r4, [pc, r4]
   12554:	mov	r0, r4
   12558:	bl	11fa8 <memset@plt>
   1255c:	mov	r0, #50	; 0x32
   12560:	str	r0, [r4, #412]	; 0x19c
   12564:	pop	{r4, sl, fp, pc}
   12568:	nop	{0}
   1256c:	nop	{0}
   12570:	andeq	r0, r0, r1
   12574:	andeq	r0, r0, r0
   12578:	andeq	r0, r0, r1
   1257c:	andeq	r0, r0, r0
   12580:	andeq	sl, r1, ip, asr #25
   12584:	andeq	sl, r1, r8, ror #22
   12588:	nop	{0}
   1258c:	nop	{0}

00012590 <setup@@Base>:
   12590:	push	{r4, r5, fp, lr}
   12594:	add	fp, sp, #8
   12598:	vpush	{d8-d9}
   1259c:	ldr	r0, [pc, #156]	; 12640 <setup@@Base+0xb0>
   125a0:	ldr	r1, [pc, #156]	; 12644 <setup@@Base+0xb4>
   125a4:	add	r2, pc, #132	; 0x84
   125a8:	vld1.64	{d8-d9}, [r2 :128]
   125ac:	mov	r2, #236	; 0xec
   125b0:	add	r0, pc, r0
   125b4:	add	r1, pc, r1
   125b8:	vld1.64	{d16-d17}, [r1 :128]
   125bc:	vld1.64	{d18-d19}, [r0 :128]
   125c0:	vadd.i64	q8, q8, q4
   125c4:	vadd.i64	q9, q9, q4
   125c8:	vst1.64	{d16-d17}, [r1 :128]
   125cc:	vst1.64	{d18-d19}, [r0 :128]
   125d0:	mov	r1, #0
   125d4:	ldr	r4, [pc, #108]	; 12648 <setup@@Base+0xb8>
   125d8:	ldr	r4, [pc, r4]
   125dc:	mov	r0, r4
   125e0:	bl	11fa8 <memset@plt>
   125e4:	ldr	r0, [pc, #96]	; 1264c <setup@@Base+0xbc>
   125e8:	mov	r5, #50	; 0x32
   125ec:	mov	r1, #0
   125f0:	mov	r2, #424	; 0x1a8
   125f4:	str	r5, [r4, #208]	; 0xd0
   125f8:	add	r0, pc, r0
   125fc:	vld1.64	{d16-d17}, [r0 :128]
   12600:	vadd.i64	q8, q8, q4
   12604:	vst1.64	{d16-d17}, [r0 :128]
   12608:	ldr	r4, [pc, #64]	; 12650 <setup@@Base+0xc0>
   1260c:	ldr	r4, [pc, r4]
   12610:	mov	r0, r4
   12614:	bl	11fa8 <memset@plt>
   12618:	str	r5, [r4, #412]	; 0x19c
   1261c:	vpop	{d8-d9}
   12620:	pop	{r4, r5, fp, pc}
   12624:	nop	{0}
   12628:	nop	{0}
   1262c:	nop	{0}
   12630:	andeq	r0, r0, r1
   12634:	andeq	r0, r0, r0
   12638:	andeq	r0, r0, r1
   1263c:	andeq	r0, r0, r0
   12640:	andeq	sl, r1, r8, ror #23
   12644:	andeq	sl, r1, r4, ror #24
   12648:	strdeq	sl, [r1], -r0
   1264c:	andeq	sl, r1, r0, lsl ip
   12650:	andeq	sl, r1, ip, lsr #21

00012654 <no_int_as_first_stuff@@Base>:
   12654:	push	{r4, r5, r6, r7, fp, lr}
   12658:	add	fp, sp, #16
   1265c:	sub	sp, sp, #16
   12660:	ldr	r6, [pc, #256]	; 12768 <no_int_as_first_stuff@@Base+0x114>
   12664:	ldr	r0, [pc, #256]	; 1276c <no_int_as_first_stuff@@Base+0x118>
   12668:	mov	r4, sp
   1266c:	add	r1, sp, #4
   12670:	ldr	r0, [pc, r0]
   12674:	add	r6, pc, r6
   12678:	adds	r0, r0, #1
   1267c:	str	r0, [r6]
   12680:	ldr	r0, [r6, #4]
   12684:	adc	r0, r0, #0
   12688:	str	r0, [r6, #4]
   1268c:	mov	r0, r4
   12690:	bl	16810 <init_grammar@@Base>
   12694:	mov	r0, #4
   12698:	bl	11f18 <malloc@plt>
   1269c:	mov	r5, r0
   126a0:	bl	14e20 <init_token_opar@@Base>
   126a4:	ldr	r7, [pc, #196]	; 12770 <no_int_as_first_stuff@@Base+0x11c>
   126a8:	mov	r0, r4
   126ac:	ldr	r7, [pc, r7]
   126b0:	str	r5, [r7, #216]	; 0xd8
   126b4:	bl	168d4 <read_function_ast_node@@Base>
   126b8:	ldr	r1, [r7, #204]	; 0xcc
   126bc:	cmp	r1, #1
   126c0:	bne	12708 <no_int_as_first_stuff@@Base+0xb4>
   126c4:	ldrd	r2, [r6, #8]
   126c8:	adds	r2, r2, #1
   126cc:	adc	r3, r3, #0
   126d0:	cmp	r0, #0
   126d4:	strd	r2, [r6, #8]
   126d8:	bne	12738 <no_int_as_first_stuff@@Base+0xe4>
   126dc:	ldrd	r0, [r6, #24]
   126e0:	ldrd	r2, [r6, #40]	; 0x28
   126e4:	adds	r0, r0, #1
   126e8:	adc	r1, r1, #0
   126ec:	adds	r2, r2, #1
   126f0:	str	r2, [r6, #40]	; 0x28
   126f4:	strd	r0, [r6, #24]
   126f8:	adc	r0, r3, #0
   126fc:	str	r0, [r6, #44]	; 0x2c
   12700:	sub	sp, fp, #16
   12704:	pop	{r4, r5, r6, r7, fp, pc}
   12708:	ldrd	r0, [r6, #16]
   1270c:	mov	r2, #41	; 0x29
   12710:	adds	r0, r0, #1
   12714:	adc	r1, r1, #0
   12718:	strd	r0, [r6, #16]
   1271c:	ldr	r0, [pc, #80]	; 12774 <no_int_as_first_stuff@@Base+0x120>
   12720:	ldr	r1, [pc, #80]	; 12778 <no_int_as_first_stuff@@Base+0x124>
   12724:	ldr	r3, [pc, #80]	; 1277c <no_int_as_first_stuff@@Base+0x128>
   12728:	add	r0, pc, r0
   1272c:	add	r1, pc, r1
   12730:	add	r3, pc, r3
   12734:	bl	12044 <__assert_fail@plt>
   12738:	ldrd	r0, [r6, #32]
   1273c:	mov	r2, #42	; 0x2a
   12740:	adds	r0, r0, #1
   12744:	adc	r1, r1, #0
   12748:	strd	r0, [r6, #32]
   1274c:	ldr	r0, [pc, #44]	; 12780 <no_int_as_first_stuff@@Base+0x12c>
   12750:	ldr	r1, [pc, #44]	; 12784 <no_int_as_first_stuff@@Base+0x130>
   12754:	ldr	r3, [pc, #44]	; 12788 <no_int_as_first_stuff@@Base+0x134>
   12758:	add	r0, pc, r0
   1275c:	add	r1, pc, r1
   12760:	add	r3, pc, r3
   12764:	bl	12044 <__assert_fail@plt>
   12768:			; <UNDEFINED> instruction: 0x0001abb4
   1276c:			; <UNDEFINED> instruction: 0x0001abb8
   12770:	andeq	sl, r1, ip, lsl sl
   12774:	andeq	r8, r0, r0, ror r1
   12778:	andeq	r8, r0, r6, lsl #3
   1277c:	ldrdeq	r8, [r0], -sp
   12780:	ldrdeq	r8, [r0], -r2
   12784:	andeq	r8, r0, r6, asr r1
   12788:	andeq	r8, r0, sp, lsr #3

0001278c <int_but_not_followed_by_function@@Base>:
   1278c:	push	{r4, r5, r6, r7, fp, lr}
   12790:	add	fp, sp, #16
   12794:	sub	sp, sp, #16
   12798:	ldr	r6, [pc, #292]	; 128c4 <int_but_not_followed_by_function@@Base+0x138>
   1279c:	ldr	r0, [pc, #292]	; 128c8 <int_but_not_followed_by_function@@Base+0x13c>
   127a0:	mov	r4, sp
   127a4:	add	r1, sp, #4
   127a8:	ldr	r0, [pc, r0]
   127ac:	add	r6, pc, r6
   127b0:	adds	r0, r0, #1
   127b4:	str	r0, [r6]
   127b8:	ldr	r0, [r6, #4]
   127bc:	adc	r0, r0, #0
   127c0:	str	r0, [r6, #4]
   127c4:	mov	r0, r4
   127c8:	bl	16810 <init_grammar@@Base>
   127cc:	mov	r0, #8
   127d0:	bl	11f18 <malloc@plt>
   127d4:	mov	r5, r0
   127d8:	mov	r0, #4
   127dc:	bl	11f18 <malloc@plt>
   127e0:	str	r0, [r5]
   127e4:	bl	14d30 <init_token_int_type@@Base>
   127e8:	mov	r0, #4
   127ec:	bl	11f18 <malloc@plt>
   127f0:	str	r0, [r5, #4]
   127f4:	bl	14e20 <init_token_opar@@Base>
   127f8:	ldr	r7, [pc, #204]	; 128cc <int_but_not_followed_by_function@@Base+0x140>
   127fc:	mov	r0, #2
   12800:	ldr	r7, [pc, r7]
   12804:	str	r0, [r7, #220]	; 0xdc
   12808:	mov	r0, r4
   1280c:	str	r5, [r7, #228]	; 0xe4
   12810:	bl	168d4 <read_function_ast_node@@Base>
   12814:	ldr	r1, [r7, #204]	; 0xcc
   12818:	cmp	r1, #2
   1281c:	bne	12864 <int_but_not_followed_by_function@@Base+0xd8>
   12820:	ldrd	r2, [r6, #8]
   12824:	adds	r2, r2, #1
   12828:	adc	r3, r3, #0
   1282c:	cmp	r0, #0
   12830:	strd	r2, [r6, #8]
   12834:	bne	12894 <int_but_not_followed_by_function@@Base+0x108>
   12838:	ldrd	r0, [r6, #24]
   1283c:	ldrd	r2, [r6, #40]	; 0x28
   12840:	adds	r0, r0, #1
   12844:	adc	r1, r1, #0
   12848:	adds	r2, r2, #1
   1284c:	str	r2, [r6, #40]	; 0x28
   12850:	strd	r0, [r6, #24]
   12854:	adc	r0, r3, #0
   12858:	str	r0, [r6, #44]	; 0x2c
   1285c:	sub	sp, fp, #16
   12860:	pop	{r4, r5, r6, r7, fp, pc}
   12864:	ldrd	r0, [r6, #16]
   12868:	mov	r2, #67	; 0x43
   1286c:	adds	r0, r0, #1
   12870:	adc	r1, r1, #0
   12874:	strd	r0, [r6, #16]
   12878:	ldr	r0, [pc, #80]	; 128d0 <int_but_not_followed_by_function@@Base+0x144>
   1287c:	ldr	r1, [pc, #80]	; 128d4 <int_but_not_followed_by_function@@Base+0x148>
   12880:	ldr	r3, [pc, #80]	; 128d8 <int_but_not_followed_by_function@@Base+0x14c>
   12884:	add	r0, pc, r0
   12888:	add	r1, pc, r1
   1288c:	add	r3, pc, r3
   12890:	bl	12044 <__assert_fail@plt>
   12894:	ldrd	r0, [r6, #32]
   12898:	mov	r2, #68	; 0x44
   1289c:	adds	r0, r0, #1
   128a0:	adc	r1, r1, #0
   128a4:	strd	r0, [r6, #32]
   128a8:	ldr	r0, [pc, #44]	; 128dc <int_but_not_followed_by_function@@Base+0x150>
   128ac:	ldr	r1, [pc, #44]	; 128e0 <int_but_not_followed_by_function@@Base+0x154>
   128b0:	ldr	r3, [pc, #44]	; 128e4 <int_but_not_followed_by_function@@Base+0x158>
   128b4:	add	r0, pc, r0
   128b8:	add	r1, pc, r1
   128bc:	add	r3, pc, r3
   128c0:	bl	12044 <__assert_fail@plt>
   128c4:	andeq	sl, r1, ip, lsr #21
   128c8:			; <UNDEFINED> instruction: 0x0001aab0
   128cc:	andeq	sl, r1, r8, asr #17
   128d0:	strheq	r8, [r0], -r2
   128d4:	andeq	r8, r0, sl, lsr #32
   128d8:	andeq	r8, r0, r4, asr #1
   128dc:	andeq	r8, r0, r6, ror r0
   128e0:	strdeq	r7, [r0], -sl
   128e4:	muleq	r0, r4, r0

000128e8 <boolean_expression_is_read_properly@@Base>:
   128e8:	push	{r4, r5, r6, r7, fp, lr}
   128ec:	add	fp, sp, #16
   128f0:	sub	sp, sp, #16
   128f4:	ldr	r7, [pc, #472]	; 12ad4 <boolean_expression_is_read_properly@@Base+0x1ec>
   128f8:	ldr	r0, [pc, #472]	; 12ad8 <boolean_expression_is_read_properly@@Base+0x1f0>
   128fc:	ldr	r0, [pc, r0]
   12900:	add	r7, pc, r7
   12904:	adds	r0, r0, #1
   12908:	str	r0, [r7]
   1290c:	ldr	r0, [r7, #4]
   12910:	adc	r0, r0, #0
   12914:	str	r0, [r7, #4]
   12918:	mov	r0, #3
   1291c:	bl	11f18 <malloc@plt>
   12920:	mov	r6, r0
   12924:	mov	r0, #0
   12928:	mov	r4, sp
   1292c:	add	r1, sp, #4
   12930:	strb	r0, [r6, #2]
   12934:	movw	r0, #15649	; 0x3d21
   12938:	strh	r0, [r6]
   1293c:	mov	r0, r4
   12940:	bl	16810 <init_grammar@@Base>
   12944:	mov	r0, #20
   12948:	bl	11f18 <malloc@plt>
   1294c:	mov	r5, r0
   12950:	mov	r0, #8
   12954:	bl	11f18 <malloc@plt>
   12958:	mov	r1, #2
   1295c:	str	r0, [r5]
   12960:	bl	14d80 <init_token_int_value@@Base>
   12964:	mov	r0, #8
   12968:	bl	11f18 <malloc@plt>
   1296c:	mov	r1, #2
   12970:	str	r0, [r5, #4]
   12974:	bl	14d80 <init_token_int_value@@Base>
   12978:	mov	r0, #8
   1297c:	bl	11f18 <malloc@plt>
   12980:	mov	r1, r6
   12984:	str	r0, [r5, #8]
   12988:	bl	150f0 <init_token_boolean_op@@Base>
   1298c:	mov	r0, #8
   12990:	bl	11f18 <malloc@plt>
   12994:	mov	r1, #1
   12998:	str	r0, [r5, #12]
   1299c:	bl	14d80 <init_token_int_value@@Base>
   129a0:	mov	r0, #4
   129a4:	bl	11f18 <malloc@plt>
   129a8:	str	r0, [r5, #16]
   129ac:	bl	14e70 <init_token_cpar@@Base>
   129b0:	ldr	r6, [pc, #292]	; 12adc <boolean_expression_is_read_properly@@Base+0x1f4>
   129b4:	mov	r0, #5
   129b8:	ldr	r6, [pc, r6]
   129bc:	str	r0, [r6, #220]	; 0xdc
   129c0:	mov	r0, r4
   129c4:	str	r5, [r6, #228]	; 0xe4
   129c8:	bl	16f48 <read_boolean_expression@@Base>
   129cc:	ldr	r1, [r6, #204]	; 0xcc
   129d0:	cmp	r1, #5
   129d4:	bne	12a44 <boolean_expression_is_read_properly@@Base+0x15c>
   129d8:	ldrd	r2, [r7, #8]
   129dc:	adds	r2, r2, #1
   129e0:	adc	r3, r3, #0
   129e4:	strd	r2, [r7, #8]
   129e8:	ldr	r1, [pc, #240]	; 12ae0 <boolean_expression_is_read_properly@@Base+0x1f8>
   129ec:	ldr	r1, [pc, r1]
   129f0:	ldr	r1, [r1, #408]	; 0x198
   129f4:	cmp	r1, #1
   129f8:	bne	12a74 <boolean_expression_is_read_properly@@Base+0x18c>
   129fc:	ldrd	r2, [r7, #24]
   12a00:	adds	r2, r2, #1
   12a04:	adc	r3, r3, #0
   12a08:	strd	r2, [r7, #24]
   12a0c:	ldr	r0, [r0]
   12a10:	cmp	r0, #5
   12a14:	bne	12aa4 <boolean_expression_is_read_properly@@Base+0x1bc>
   12a18:	ldrd	r0, [r7, #40]	; 0x28
   12a1c:	ldrd	r2, [r7, #56]	; 0x38
   12a20:	adds	r0, r0, #1
   12a24:	adc	r1, r1, #0
   12a28:	adds	r2, r2, #1
   12a2c:	str	r2, [r7, #56]	; 0x38
   12a30:	strd	r0, [r7, #40]	; 0x28
   12a34:	adc	r0, r3, #0
   12a38:	str	r0, [r7, #60]	; 0x3c
   12a3c:	sub	sp, fp, #16
   12a40:	pop	{r4, r5, r6, r7, fp, pc}
   12a44:	ldrd	r0, [r7, #16]
   12a48:	mov	r2, #105	; 0x69
   12a4c:	adds	r0, r0, #1
   12a50:	adc	r1, r1, #0
   12a54:	strd	r0, [r7, #16]
   12a58:	ldr	r0, [pc, #132]	; 12ae4 <boolean_expression_is_read_properly@@Base+0x1fc>
   12a5c:	ldr	r1, [pc, #132]	; 12ae8 <boolean_expression_is_read_properly@@Base+0x200>
   12a60:	ldr	r3, [pc, #132]	; 12aec <boolean_expression_is_read_properly@@Base+0x204>
   12a64:	add	r0, pc, r0
   12a68:	add	r1, pc, r1
   12a6c:	add	r3, pc, r3
   12a70:	bl	12044 <__assert_fail@plt>
   12a74:	ldrd	r0, [r7, #32]
   12a78:	mov	r2, #106	; 0x6a
   12a7c:	adds	r0, r0, #1
   12a80:	adc	r1, r1, #0
   12a84:	strd	r0, [r7, #32]
   12a88:	ldr	r0, [pc, #96]	; 12af0 <boolean_expression_is_read_properly@@Base+0x208>
   12a8c:	ldr	r1, [pc, #96]	; 12af4 <boolean_expression_is_read_properly@@Base+0x20c>
   12a90:	ldr	r3, [pc, #96]	; 12af8 <boolean_expression_is_read_properly@@Base+0x210>
   12a94:	add	r0, pc, r0
   12a98:	add	r1, pc, r1
   12a9c:	add	r3, pc, r3
   12aa0:	bl	12044 <__assert_fail@plt>
   12aa4:	ldrd	r0, [r7, #48]	; 0x30
   12aa8:	mov	r2, #107	; 0x6b
   12aac:	adds	r0, r0, #1
   12ab0:	adc	r1, r1, #0
   12ab4:	strd	r0, [r7, #48]	; 0x30
   12ab8:	ldr	r0, [pc, #60]	; 12afc <boolean_expression_is_read_properly@@Base+0x214>
   12abc:	ldr	r1, [pc, #60]	; 12b00 <boolean_expression_is_read_properly@@Base+0x218>
   12ac0:	ldr	r3, [pc, #60]	; 12b04 <boolean_expression_is_read_properly@@Base+0x21c>
   12ac4:	add	r0, pc, r0
   12ac8:	add	r1, pc, r1
   12acc:	add	r3, pc, r3
   12ad0:	bl	12044 <__assert_fail@plt>
   12ad4:	andeq	sl, r1, r8, lsl #19
   12ad8:	andeq	sl, r1, ip, lsl #19
   12adc:	andeq	sl, r1, r0, lsl r7
   12ae0:	andeq	sl, r1, ip, asr #13
   12ae4:	andeq	r7, r0, r4, lsl pc
   12ae8:	andeq	r7, r0, sl, asr #28
   12aec:	andeq	r7, r0, r6, lsr #30
   12af0:	andeq	r7, r0, r9, lsr #30
   12af4:	andeq	r7, r0, sl, lsl lr
   12af8:	strdeq	r7, [r0], -r6
   12afc:	andeq	r7, r0, r8, lsl pc
   12b00:	andeq	r7, r0, sl, ror #27
   12b04:	andeq	r7, r0, r6, asr #29

00012b08 <boolean_expression_complex@@Base>:
   12b08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b0c:	add	fp, sp, #24
   12b10:	sub	sp, sp, #16
   12b14:	ldr	r9, [pc, #536]	; 12d34 <boolean_expression_complex@@Base+0x22c>
   12b18:	ldr	r0, [pc, #536]	; 12d38 <boolean_expression_complex@@Base+0x230>
   12b1c:	ldr	r0, [pc, r0]
   12b20:	add	r9, pc, r9
   12b24:	adds	r0, r0, #1
   12b28:	str	r0, [r9]
   12b2c:	ldr	r0, [r9, #4]
   12b30:	adc	r0, r0, #0
   12b34:	str	r0, [r9, #4]
   12b38:	mov	r0, #3
   12b3c:	bl	11f18 <malloc@plt>
   12b40:	mov	r4, r0
   12b44:	mov	r0, #3
   12b48:	bl	11f18 <malloc@plt>
   12b4c:	mov	r7, r0
   12b50:	mov	r0, #3
   12b54:	bl	11f18 <malloc@plt>
   12b58:	mov	r6, r0
   12b5c:	mov	r0, #0
   12b60:	movw	r1, #15676	; 0x3d3c
   12b64:	mov	r8, sp
   12b68:	strb	r0, [r4, #2]
   12b6c:	strh	r1, [r4]
   12b70:	strb	r0, [r7, #2]
   12b74:	movw	r1, #9766	; 0x2626
   12b78:	strb	r0, [r6, #2]
   12b7c:	movw	r0, #15677	; 0x3d3d
   12b80:	strh	r1, [r7]
   12b84:	strh	r0, [r6]
   12b88:	add	r1, sp, #4
   12b8c:	mov	r0, r8
   12b90:	bl	16810 <init_grammar@@Base>
   12b94:	mov	r0, #40	; 0x28
   12b98:	bl	11f18 <malloc@plt>
   12b9c:	mov	r5, r0
   12ba0:	mov	r0, #8
   12ba4:	bl	11f18 <malloc@plt>
   12ba8:	mov	r1, #2
   12bac:	str	r0, [r5]
   12bb0:	bl	14d80 <init_token_int_value@@Base>
   12bb4:	mov	r0, #8
   12bb8:	bl	11f18 <malloc@plt>
   12bbc:	mov	r1, #2
   12bc0:	str	r0, [r5, #4]
   12bc4:	bl	14d80 <init_token_int_value@@Base>
   12bc8:	mov	r0, #8
   12bcc:	bl	11f18 <malloc@plt>
   12bd0:	mov	r1, r4
   12bd4:	str	r0, [r5, #8]
   12bd8:	bl	150f0 <init_token_boolean_op@@Base>
   12bdc:	mov	r0, #8
   12be0:	bl	11f18 <malloc@plt>
   12be4:	mov	r1, #1
   12be8:	str	r0, [r5, #12]
   12bec:	bl	14d80 <init_token_int_value@@Base>
   12bf0:	mov	r0, #8
   12bf4:	bl	11f18 <malloc@plt>
   12bf8:	mov	r1, r7
   12bfc:	str	r0, [r5, #16]
   12c00:	bl	150f0 <init_token_boolean_op@@Base>
   12c04:	mov	r0, #8
   12c08:	bl	11f18 <malloc@plt>
   12c0c:	mov	r1, #4
   12c10:	str	r0, [r5, #20]
   12c14:	bl	14d80 <init_token_int_value@@Base>
   12c18:	mov	r0, #8
   12c1c:	bl	11f18 <malloc@plt>
   12c20:	mov	r1, #4
   12c24:	str	r0, [r5, #24]
   12c28:	bl	14d80 <init_token_int_value@@Base>
   12c2c:	mov	r0, #8
   12c30:	bl	11f18 <malloc@plt>
   12c34:	mov	r1, r6
   12c38:	str	r0, [r5, #28]
   12c3c:	bl	150f0 <init_token_boolean_op@@Base>
   12c40:	mov	r0, #8
   12c44:	bl	11f18 <malloc@plt>
   12c48:	mov	r1, #4
   12c4c:	str	r0, [r5, #32]
   12c50:	bl	14d80 <init_token_int_value@@Base>
   12c54:	mov	r0, #4
   12c58:	bl	11f18 <malloc@plt>
   12c5c:	str	r0, [r5, #36]	; 0x24
   12c60:	bl	14e70 <init_token_cpar@@Base>
   12c64:	ldr	r4, [pc, #208]	; 12d3c <boolean_expression_complex@@Base+0x234>
   12c68:	mov	r0, #10
   12c6c:	ldr	r4, [pc, r4]
   12c70:	str	r0, [r4, #220]	; 0xdc
   12c74:	mov	r0, r8
   12c78:	str	r5, [r4, #228]	; 0xe4
   12c7c:	bl	16f48 <read_boolean_expression@@Base>
   12c80:	ldr	r1, [r4, #204]	; 0xcc
   12c84:	cmp	r1, #10
   12c88:	bne	12cd4 <boolean_expression_complex@@Base+0x1cc>
   12c8c:	ldrd	r2, [r9, #8]
   12c90:	adds	r2, r2, #1
   12c94:	adc	r3, r3, #0
   12c98:	strd	r2, [r9, #8]
   12c9c:	ldr	r0, [r0]
   12ca0:	cmp	r0, #5
   12ca4:	bne	12d04 <boolean_expression_complex@@Base+0x1fc>
   12ca8:	ldrd	r0, [r9, #24]
   12cac:	ldrd	r2, [r9, #40]	; 0x28
   12cb0:	adds	r0, r0, #1
   12cb4:	adc	r1, r1, #0
   12cb8:	adds	r2, r2, #1
   12cbc:	str	r2, [r9, #40]	; 0x28
   12cc0:	strd	r0, [r9, #24]
   12cc4:	adc	r0, r3, #0
   12cc8:	str	r0, [r9, #44]	; 0x2c
   12ccc:	sub	sp, fp, #24
   12cd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12cd4:	ldrd	r0, [r9, #16]
   12cd8:	mov	r2, #166	; 0xa6
   12cdc:	adds	r0, r0, #1
   12ce0:	adc	r1, r1, #0
   12ce4:	strd	r0, [r9, #16]
   12ce8:	ldr	r0, [pc, #80]	; 12d40 <boolean_expression_complex@@Base+0x238>
   12cec:	ldr	r1, [pc, #80]	; 12d44 <boolean_expression_complex@@Base+0x23c>
   12cf0:	ldr	r3, [pc, #80]	; 12d48 <boolean_expression_complex@@Base+0x240>
   12cf4:	add	r0, pc, r0
   12cf8:	add	r1, pc, r1
   12cfc:	add	r3, pc, r3
   12d00:	bl	12044 <__assert_fail@plt>
   12d04:	ldrd	r0, [r9, #32]
   12d08:	mov	r2, #167	; 0xa7
   12d0c:	adds	r0, r0, #1
   12d10:	adc	r1, r1, #0
   12d14:	strd	r0, [r9, #32]
   12d18:	ldr	r0, [pc, #44]	; 12d4c <boolean_expression_complex@@Base+0x244>
   12d1c:	ldr	r1, [pc, #44]	; 12d50 <boolean_expression_complex@@Base+0x248>
   12d20:	ldr	r3, [pc, #44]	; 12d54 <boolean_expression_complex@@Base+0x24c>
   12d24:	add	r0, pc, r0
   12d28:	add	r1, pc, r1
   12d2c:	add	r3, pc, r3
   12d30:	bl	12044 <__assert_fail@plt>
   12d34:	andeq	sl, r1, r8, lsr #15
   12d38:	andeq	sl, r1, ip, lsr #15
   12d3c:	andeq	sl, r1, ip, asr r4
   12d40:	andeq	r7, r0, r8, lsl #26
   12d44:			; <UNDEFINED> instruction: 0x00007bba
   12d48:	andeq	r7, r0, fp, lsl sp
   12d4c:			; <UNDEFINED> instruction: 0x00007cb8
   12d50:	andeq	r7, r0, sl, lsl #23
   12d54:	andeq	r7, r0, fp, ror #25

00012d58 <boolean_binary_operator_is_read_properly@@Base>:
   12d58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d5c:	add	fp, sp, #24
   12d60:	sub	sp, sp, #16
   12d64:	ldr	r7, [pc, #588]	; 12fb8 <boolean_binary_operator_is_read_properly@@Base+0x260>
   12d68:	ldr	r0, [pc, #588]	; 12fbc <boolean_binary_operator_is_read_properly@@Base+0x264>
   12d6c:	mov	r8, #3
   12d70:	ldr	r0, [pc, r0]
   12d74:	add	r7, pc, r7
   12d78:	adds	r0, r0, #1
   12d7c:	str	r0, [r7]
   12d80:	ldr	r0, [r7, #4]
   12d84:	adc	r0, r0, #0
   12d88:	str	r0, [r7, #4]
   12d8c:	mov	r0, #3
   12d90:	bl	11f18 <malloc@plt>
   12d94:	mov	r5, r0
   12d98:	mov	r0, #0
   12d9c:	mov	r4, sp
   12da0:	add	r1, sp, #4
   12da4:	strb	r0, [r5, #2]
   12da8:	movw	r0, #15649	; 0x3d21
   12dac:	strh	r0, [r5]
   12db0:	mov	r0, r4
   12db4:	bl	16810 <init_grammar@@Base>
   12db8:	mov	r0, #12
   12dbc:	bl	11f18 <malloc@plt>
   12dc0:	mov	r6, r0
   12dc4:	mov	r0, #8
   12dc8:	bl	11f18 <malloc@plt>
   12dcc:	mov	r1, #2
   12dd0:	str	r0, [r6]
   12dd4:	bl	14d80 <init_token_int_value@@Base>
   12dd8:	mov	r0, #8
   12ddc:	bl	11f18 <malloc@plt>
   12de0:	mov	r1, r5
   12de4:	str	r0, [r6, #4]
   12de8:	bl	150f0 <init_token_boolean_op@@Base>
   12dec:	mov	r0, #8
   12df0:	bl	11f18 <malloc@plt>
   12df4:	mov	r1, #1
   12df8:	str	r0, [r6, #8]
   12dfc:	bl	14d80 <init_token_int_value@@Base>
   12e00:	ldr	r5, [pc, #440]	; 12fc0 <boolean_binary_operator_is_read_properly@@Base+0x268>
   12e04:	mov	r0, r4
   12e08:	ldr	r5, [pc, r5]
   12e0c:	str	r8, [r5, #220]	; 0xdc
   12e10:	str	r6, [r5, #228]	; 0xe4
   12e14:	bl	17280 <read_boolean_binary_expression@@Base>
   12e18:	ldr	r1, [r5, #204]	; 0xcc
   12e1c:	cmp	r1, #3
   12e20:	bne	12ec8 <boolean_binary_operator_is_read_properly@@Base+0x170>
   12e24:	ldrd	r2, [r7, #8]
   12e28:	adds	r2, r2, #1
   12e2c:	adc	r3, r3, #0
   12e30:	strd	r2, [r7, #8]
   12e34:	ldr	r1, [r0]
   12e38:	cmp	r1, #5
   12e3c:	bne	12ef8 <boolean_binary_operator_is_read_properly@@Base+0x1a0>
   12e40:	ldrd	r2, [r7, #24]
   12e44:	adds	r2, r2, #1
   12e48:	adc	r3, r3, #0
   12e4c:	strd	r2, [r7, #24]
   12e50:	ldr	r1, [r0, #8]
   12e54:	ldr	r1, [r1]
   12e58:	cmp	r1, #1
   12e5c:	bne	12f28 <boolean_binary_operator_is_read_properly@@Base+0x1d0>
   12e60:	ldrd	r2, [r7, #40]	; 0x28
   12e64:	adds	r2, r2, #1
   12e68:	adc	r3, r3, #0
   12e6c:	strd	r2, [r7, #40]	; 0x28
   12e70:	ldr	r1, [r0, #16]
   12e74:	cmp	r1, #1
   12e78:	bne	12f58 <boolean_binary_operator_is_read_properly@@Base+0x200>
   12e7c:	ldrd	r2, [r7, #56]	; 0x38
   12e80:	adds	r2, r2, #1
   12e84:	adc	r3, r3, #0
   12e88:	strd	r2, [r7, #56]	; 0x38
   12e8c:	ldr	r0, [r0, #12]
   12e90:	ldr	r0, [r0]
   12e94:	cmp	r0, #1
   12e98:	bne	12f88 <boolean_binary_operator_is_read_properly@@Base+0x230>
   12e9c:	ldrd	r0, [r7, #72]	; 0x48
   12ea0:	ldrd	r2, [r7, #88]	; 0x58
   12ea4:	adds	r0, r0, #1
   12ea8:	adc	r1, r1, #0
   12eac:	adds	r2, r2, #1
   12eb0:	str	r2, [r7, #88]	; 0x58
   12eb4:	strd	r0, [r7, #72]	; 0x48
   12eb8:	adc	r0, r3, #0
   12ebc:	str	r0, [r7, #92]	; 0x5c
   12ec0:	sub	sp, fp, #24
   12ec4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ec8:	ldrd	r0, [r7, #16]
   12ecc:	mov	r2, #200	; 0xc8
   12ed0:	adds	r0, r0, #1
   12ed4:	adc	r1, r1, #0
   12ed8:	strd	r0, [r7, #16]
   12edc:	ldr	r0, [pc, #224]	; 12fc4 <boolean_binary_operator_is_read_properly@@Base+0x26c>
   12ee0:	ldr	r1, [pc, #224]	; 12fc8 <boolean_binary_operator_is_read_properly@@Base+0x270>
   12ee4:	ldr	r3, [pc, #224]	; 12fcc <boolean_binary_operator_is_read_properly@@Base+0x274>
   12ee8:	add	r0, pc, r0
   12eec:	add	r1, pc, r1
   12ef0:	add	r3, pc, r3
   12ef4:	bl	12044 <__assert_fail@plt>
   12ef8:	ldrd	r0, [r7, #32]
   12efc:	mov	r2, #201	; 0xc9
   12f00:	adds	r0, r0, #1
   12f04:	adc	r1, r1, #0
   12f08:	strd	r0, [r7, #32]
   12f0c:	ldr	r0, [pc, #188]	; 12fd0 <boolean_binary_operator_is_read_properly@@Base+0x278>
   12f10:	ldr	r1, [pc, #188]	; 12fd4 <boolean_binary_operator_is_read_properly@@Base+0x27c>
   12f14:	ldr	r3, [pc, #188]	; 12fd8 <boolean_binary_operator_is_read_properly@@Base+0x280>
   12f18:	add	r0, pc, r0
   12f1c:	add	r1, pc, r1
   12f20:	add	r3, pc, r3
   12f24:	bl	12044 <__assert_fail@plt>
   12f28:	ldrd	r0, [r7, #48]	; 0x30
   12f2c:	mov	r2, #203	; 0xcb
   12f30:	adds	r0, r0, #1
   12f34:	adc	r1, r1, #0
   12f38:	strd	r0, [r7, #48]	; 0x30
   12f3c:	ldr	r0, [pc, #152]	; 12fdc <boolean_binary_operator_is_read_properly@@Base+0x284>
   12f40:	ldr	r1, [pc, #152]	; 12fe0 <boolean_binary_operator_is_read_properly@@Base+0x288>
   12f44:	ldr	r3, [pc, #152]	; 12fe4 <boolean_binary_operator_is_read_properly@@Base+0x28c>
   12f48:	add	r0, pc, r0
   12f4c:	add	r1, pc, r1
   12f50:	add	r3, pc, r3
   12f54:	bl	12044 <__assert_fail@plt>
   12f58:	ldrd	r0, [r7, #64]	; 0x40
   12f5c:	mov	r2, #204	; 0xcc
   12f60:	adds	r0, r0, #1
   12f64:	adc	r1, r1, #0
   12f68:	strd	r0, [r7, #64]	; 0x40
   12f6c:	ldr	r0, [pc, #116]	; 12fe8 <boolean_binary_operator_is_read_properly@@Base+0x290>
   12f70:	ldr	r1, [pc, #116]	; 12fec <boolean_binary_operator_is_read_properly@@Base+0x294>
   12f74:	ldr	r3, [pc, #116]	; 12ff0 <boolean_binary_operator_is_read_properly@@Base+0x298>
   12f78:	add	r0, pc, r0
   12f7c:	add	r1, pc, r1
   12f80:	add	r3, pc, r3
   12f84:	bl	12044 <__assert_fail@plt>
   12f88:	ldrd	r0, [r7, #80]	; 0x50
   12f8c:	mov	r2, #205	; 0xcd
   12f90:	adds	r0, r0, #1
   12f94:	adc	r1, r1, #0
   12f98:	strd	r0, [r7, #80]	; 0x50
   12f9c:	ldr	r0, [pc, #80]	; 12ff4 <boolean_binary_operator_is_read_properly@@Base+0x29c>
   12fa0:	ldr	r1, [pc, #80]	; 12ff8 <boolean_binary_operator_is_read_properly@@Base+0x2a0>
   12fa4:	ldr	r3, [pc, #80]	; 12ffc <boolean_binary_operator_is_read_properly@@Base+0x2a4>
   12fa8:	add	r0, pc, r0
   12fac:	add	r1, pc, r1
   12fb0:	add	r3, pc, r3
   12fb4:	bl	12044 <__assert_fail@plt>
   12fb8:	andeq	sl, r1, r4, lsl #11
   12fbc:	andeq	sl, r1, r8, lsl #11
   12fc0:	andeq	sl, r1, r0, asr #5
   12fc4:	andeq	r7, r0, r1, asr fp
   12fc8:	andeq	r7, r0, r6, asr #19
   12fcc:	andeq	r7, r0, r3, ror #22
   12fd0:	andeq	r7, r0, r4, asr #21
   12fd4:	muleq	r0, r6, r9
   12fd8:	andeq	r7, r0, r3, lsr fp
   12fdc:	andeq	r7, r0, fp, lsr fp
   12fe0:	andeq	r7, r0, r6, ror #18
   12fe4:	andeq	r7, r0, r3, lsl #22
   12fe8:	andeq	r7, r0, r6, lsr #22
   12fec:	andeq	r7, r0, r6, lsr r9
   12ff0:	ldrdeq	r7, [r0], -r3
   12ff4:	andeq	r7, r0, pc, lsl #22
   12ff8:	andeq	r7, r0, r6, lsl #18
   12ffc:	andeq	r7, r0, r3, lsr #21

00013000 <boolean_unary_operator_is_read_properly@@Base>:
   13000:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13004:	add	fp, sp, #24
   13008:	sub	sp, sp, #16
   1300c:	ldr	r7, [pc, #556]	; 13240 <boolean_unary_operator_is_read_properly@@Base+0x240>
   13010:	ldr	r0, [pc, #556]	; 13244 <boolean_unary_operator_is_read_properly@@Base+0x244>
   13014:	mov	r8, #2
   13018:	ldr	r0, [pc, r0]
   1301c:	add	r7, pc, r7
   13020:	adds	r0, r0, #1
   13024:	str	r0, [r7]
   13028:	ldr	r0, [r7, #4]
   1302c:	adc	r0, r0, #0
   13030:	str	r0, [r7, #4]
   13034:	mov	r0, #2
   13038:	bl	11f18 <malloc@plt>
   1303c:	mov	r5, r0
   13040:	mov	r0, #33	; 0x21
   13044:	mov	r4, sp
   13048:	add	r1, sp, #4
   1304c:	strh	r0, [r5]
   13050:	mov	r0, r4
   13054:	bl	16810 <init_grammar@@Base>
   13058:	mov	r0, #8
   1305c:	bl	11f18 <malloc@plt>
   13060:	mov	r6, r0
   13064:	mov	r0, #8
   13068:	bl	11f18 <malloc@plt>
   1306c:	mov	r1, r5
   13070:	str	r0, [r6]
   13074:	bl	150f0 <init_token_boolean_op@@Base>
   13078:	mov	r0, #8
   1307c:	bl	11f18 <malloc@plt>
   13080:	mov	r1, #1
   13084:	str	r0, [r6, #4]
   13088:	bl	14d80 <init_token_int_value@@Base>
   1308c:	ldr	r5, [pc, #436]	; 13248 <boolean_unary_operator_is_read_properly@@Base+0x248>
   13090:	mov	r0, r4
   13094:	ldr	r5, [pc, r5]
   13098:	str	r8, [r5, #220]	; 0xdc
   1309c:	str	r6, [r5, #228]	; 0xe4
   130a0:	bl	1746c <read_boolean_unary_expression@@Base>
   130a4:	ldr	r1, [r5, #204]	; 0xcc
   130a8:	cmp	r1, #2
   130ac:	bne	13150 <boolean_unary_operator_is_read_properly@@Base+0x150>
   130b0:	ldrd	r2, [r7, #8]
   130b4:	adds	r2, r2, #1
   130b8:	adc	r3, r3, #0
   130bc:	strd	r2, [r7, #8]
   130c0:	ldr	r1, [r0]
   130c4:	cmp	r1, #5
   130c8:	bne	13180 <boolean_unary_operator_is_read_properly@@Base+0x180>
   130cc:	ldrd	r2, [r7, #24]
   130d0:	adds	r2, r2, #1
   130d4:	adc	r3, r3, #0
   130d8:	strd	r2, [r7, #24]
   130dc:	ldr	r1, [r0, #8]
   130e0:	ldr	r1, [r1]
   130e4:	cmp	r1, #1
   130e8:	bne	131b0 <boolean_unary_operator_is_read_properly@@Base+0x1b0>
   130ec:	ldrd	r2, [r7, #40]	; 0x28
   130f0:	adds	r2, r2, #1
   130f4:	adc	r3, r3, #0
   130f8:	strd	r2, [r7, #40]	; 0x28
   130fc:	ldr	r1, [r0, #16]
   13100:	cmp	r1, #8
   13104:	bne	131e0 <boolean_unary_operator_is_read_properly@@Base+0x1e0>
   13108:	ldrd	r2, [r7, #56]	; 0x38
   1310c:	adds	r2, r2, #1
   13110:	adc	r3, r3, #0
   13114:	strd	r2, [r7, #56]	; 0x38
   13118:	ldr	r0, [r0, #12]
   1311c:	cmp	r0, #0
   13120:	bne	13210 <boolean_unary_operator_is_read_properly@@Base+0x210>
   13124:	ldrd	r0, [r7, #72]	; 0x48
   13128:	ldrd	r2, [r7, #88]	; 0x58
   1312c:	adds	r0, r0, #1
   13130:	adc	r1, r1, #0
   13134:	adds	r2, r2, #1
   13138:	str	r2, [r7, #88]	; 0x58
   1313c:	strd	r0, [r7, #72]	; 0x48
   13140:	adc	r0, r3, #0
   13144:	str	r0, [r7, #92]	; 0x5c
   13148:	sub	sp, fp, #24
   1314c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13150:	ldrd	r0, [r7, #16]
   13154:	mov	r2, #235	; 0xeb
   13158:	adds	r0, r0, #1
   1315c:	adc	r1, r1, #0
   13160:	strd	r0, [r7, #16]
   13164:	ldr	r0, [pc, #224]	; 1324c <boolean_unary_operator_is_read_properly@@Base+0x24c>
   13168:	ldr	r1, [pc, #224]	; 13250 <boolean_unary_operator_is_read_properly@@Base+0x250>
   1316c:	ldr	r3, [pc, #224]	; 13254 <boolean_unary_operator_is_read_properly@@Base+0x254>
   13170:	add	r0, pc, r0
   13174:	add	r1, pc, r1
   13178:	add	r3, pc, r3
   1317c:	bl	12044 <__assert_fail@plt>
   13180:	ldrd	r0, [r7, #32]
   13184:	mov	r2, #236	; 0xec
   13188:	adds	r0, r0, #1
   1318c:	adc	r1, r1, #0
   13190:	strd	r0, [r7, #32]
   13194:	ldr	r0, [pc, #188]	; 13258 <boolean_unary_operator_is_read_properly@@Base+0x258>
   13198:	ldr	r1, [pc, #188]	; 1325c <boolean_unary_operator_is_read_properly@@Base+0x25c>
   1319c:	ldr	r3, [pc, #188]	; 13260 <boolean_unary_operator_is_read_properly@@Base+0x260>
   131a0:	add	r0, pc, r0
   131a4:	add	r1, pc, r1
   131a8:	add	r3, pc, r3
   131ac:	bl	12044 <__assert_fail@plt>
   131b0:	ldrd	r0, [r7, #48]	; 0x30
   131b4:	mov	r2, #238	; 0xee
   131b8:	adds	r0, r0, #1
   131bc:	adc	r1, r1, #0
   131c0:	strd	r0, [r7, #48]	; 0x30
   131c4:	ldr	r0, [pc, #152]	; 13264 <boolean_unary_operator_is_read_properly@@Base+0x264>
   131c8:	ldr	r1, [pc, #152]	; 13268 <boolean_unary_operator_is_read_properly@@Base+0x268>
   131cc:	ldr	r3, [pc, #152]	; 1326c <boolean_unary_operator_is_read_properly@@Base+0x26c>
   131d0:	add	r0, pc, r0
   131d4:	add	r1, pc, r1
   131d8:	add	r3, pc, r3
   131dc:	bl	12044 <__assert_fail@plt>
   131e0:	ldrd	r0, [r7, #64]	; 0x40
   131e4:	mov	r2, #239	; 0xef
   131e8:	adds	r0, r0, #1
   131ec:	adc	r1, r1, #0
   131f0:	strd	r0, [r7, #64]	; 0x40
   131f4:	ldr	r0, [pc, #116]	; 13270 <boolean_unary_operator_is_read_properly@@Base+0x270>
   131f8:	ldr	r1, [pc, #116]	; 13274 <boolean_unary_operator_is_read_properly@@Base+0x274>
   131fc:	ldr	r3, [pc, #116]	; 13278 <boolean_unary_operator_is_read_properly@@Base+0x278>
   13200:	add	r0, pc, r0
   13204:	add	r1, pc, r1
   13208:	add	r3, pc, r3
   1320c:	bl	12044 <__assert_fail@plt>
   13210:	ldrd	r0, [r7, #80]	; 0x50
   13214:	mov	r2, #240	; 0xf0
   13218:	adds	r0, r0, #1
   1321c:	adc	r1, r1, #0
   13220:	strd	r0, [r7, #80]	; 0x50
   13224:	ldr	r0, [pc, #80]	; 1327c <boolean_unary_operator_is_read_properly@@Base+0x27c>
   13228:	ldr	r1, [pc, #80]	; 13280 <boolean_unary_operator_is_read_properly@@Base+0x280>
   1322c:	ldr	r3, [pc, #80]	; 13284 <boolean_unary_operator_is_read_properly@@Base+0x284>
   13230:	add	r0, pc, r0
   13234:	add	r1, pc, r1
   13238:	add	r3, pc, r3
   1323c:	bl	12044 <__assert_fail@plt>
   13240:	andeq	sl, r1, ip, lsr r3
   13244:	andeq	sl, r1, r0, asr #6
   13248:	andeq	sl, r1, r4, lsr r0
   1324c:	andeq	r7, r0, r6, asr #15
   13250:	andeq	r7, r0, lr, lsr r7
   13254:	andeq	r7, r0, fp, asr r9
   13258:	andeq	r7, r0, ip, lsr r8
   1325c:	andeq	r7, r0, lr, lsl #14
   13260:	andeq	r7, r0, fp, lsr #18
   13264:			; <UNDEFINED> instruction: 0x000078b3
   13268:	ldrdeq	r7, [r0], -lr
   1326c:	strdeq	r7, [r0], -fp
   13270:	andeq	r7, r0, r2, lsl #18
   13274:	andeq	r7, r0, lr, lsr #13
   13278:	andeq	r7, r0, fp, asr #17
   1327c:	andeq	r7, r0, r6, ror #17
   13280:	andeq	r7, r0, lr, ror r6
   13284:	muleq	r0, fp, r8

00013288 <if_statement_only@@Base>:
   13288:	push	{r4, r5, r6, r7, fp, lr}
   1328c:	add	fp, sp, #16
   13290:	sub	sp, sp, #16
   13294:	ldr	r7, [pc, #524]	; 134a8 <if_statement_only@@Base+0x220>
   13298:	ldr	r0, [pc, #524]	; 134ac <if_statement_only@@Base+0x224>
   1329c:	mov	r4, sp
   132a0:	add	r1, sp, #4
   132a4:	ldr	r0, [pc, r0]
   132a8:	add	r7, pc, r7
   132ac:	adds	r0, r0, #1
   132b0:	str	r0, [r7]
   132b4:	ldr	r0, [r7, #4]
   132b8:	adc	r0, r0, #0
   132bc:	str	r0, [r7, #4]
   132c0:	mov	r0, r4
   132c4:	bl	16810 <init_grammar@@Base>
   132c8:	mov	r0, #3
   132cc:	bl	11f18 <malloc@plt>
   132d0:	mov	r6, r0
   132d4:	mov	r0, #0
   132d8:	strb	r0, [r6, #2]
   132dc:	movw	r0, #15649	; 0x3d21
   132e0:	strh	r0, [r6]
   132e4:	mov	r0, #36	; 0x24
   132e8:	bl	11f18 <malloc@plt>
   132ec:	mov	r5, r0
   132f0:	mov	r0, #4
   132f4:	bl	11f18 <malloc@plt>
   132f8:	str	r0, [r5]
   132fc:	bl	14e20 <init_token_opar@@Base>
   13300:	mov	r0, #8
   13304:	bl	11f18 <malloc@plt>
   13308:	mov	r1, #1
   1330c:	str	r0, [r5, #4]
   13310:	bl	14d80 <init_token_int_value@@Base>
   13314:	mov	r0, #8
   13318:	bl	11f18 <malloc@plt>
   1331c:	mov	r1, #1
   13320:	str	r0, [r5, #8]
   13324:	bl	14d80 <init_token_int_value@@Base>
   13328:	mov	r0, #8
   1332c:	bl	11f18 <malloc@plt>
   13330:	mov	r1, r6
   13334:	str	r0, [r5, #12]
   13338:	bl	150f0 <init_token_boolean_op@@Base>
   1333c:	mov	r0, #8
   13340:	bl	11f18 <malloc@plt>
   13344:	mov	r1, #1
   13348:	str	r0, [r5, #16]
   1334c:	bl	14d80 <init_token_int_value@@Base>
   13350:	mov	r0, #4
   13354:	bl	11f18 <malloc@plt>
   13358:	str	r0, [r5, #20]
   1335c:	bl	14e70 <init_token_cpar@@Base>
   13360:	mov	r0, #4
   13364:	bl	11f18 <malloc@plt>
   13368:	str	r0, [r5, #24]
   1336c:	bl	14ec0 <init_token_obra@@Base>
   13370:	mov	r0, #4
   13374:	bl	11f18 <malloc@plt>
   13378:	str	r0, [r5, #28]
   1337c:	bl	14f10 <init_token_cbra@@Base>
   13380:	mov	r0, #4
   13384:	bl	11f18 <malloc@plt>
   13388:	str	r0, [r5, #32]
   1338c:	bl	15000 <init_token_eof@@Base>
   13390:	ldr	r6, [pc, #280]	; 134b0 <if_statement_only@@Base+0x228>
   13394:	mov	r0, #9
   13398:	ldr	r6, [pc, r6]
   1339c:	str	r0, [r6, #220]	; 0xdc
   133a0:	mov	r0, r4
   133a4:	str	r5, [r6, #228]	; 0xe4
   133a8:	bl	16de8 <read_if_statement@@Base>
   133ac:	ldr	r1, [r6, #204]	; 0xcc
   133b0:	cmp	r1, #9
   133b4:	bne	13418 <if_statement_only@@Base+0x190>
   133b8:	ldrd	r2, [r7, #8]
   133bc:	adds	r2, r2, #1
   133c0:	adc	r3, r3, #0
   133c4:	cmp	r0, #0
   133c8:	strd	r2, [r7, #8]
   133cc:	beq	13448 <if_statement_only@@Base+0x1c0>
   133d0:	ldrd	r2, [r7, #24]
   133d4:	adds	r2, r2, #1
   133d8:	adc	r3, r3, #0
   133dc:	strd	r2, [r7, #24]
   133e0:	ldr	r0, [r0]
   133e4:	cmp	r0, #4
   133e8:	bne	13478 <if_statement_only@@Base+0x1f0>
   133ec:	ldrd	r0, [r7, #40]	; 0x28
   133f0:	ldrd	r2, [r7, #56]	; 0x38
   133f4:	adds	r0, r0, #1
   133f8:	adc	r1, r1, #0
   133fc:	adds	r2, r2, #1
   13400:	str	r2, [r7, #56]	; 0x38
   13404:	strd	r0, [r7, #40]	; 0x28
   13408:	adc	r0, r3, #0
   1340c:	str	r0, [r7, #60]	; 0x3c
   13410:	sub	sp, fp, #16
   13414:	pop	{r4, r5, r6, r7, fp, pc}
   13418:	ldrd	r0, [r7, #16]
   1341c:	movw	r2, #283	; 0x11b
   13420:	adds	r0, r0, #1
   13424:	adc	r1, r1, #0
   13428:	strd	r0, [r7, #16]
   1342c:	ldr	r0, [pc, #128]	; 134b4 <if_statement_only@@Base+0x22c>
   13430:	ldr	r1, [pc, #128]	; 134b8 <if_statement_only@@Base+0x230>
   13434:	ldr	r3, [pc, #128]	; 134bc <if_statement_only@@Base+0x234>
   13438:	add	r0, pc, r0
   1343c:	add	r1, pc, r1
   13440:	add	r3, pc, r3
   13444:	bl	12044 <__assert_fail@plt>
   13448:	ldrd	r0, [r7, #32]
   1344c:	mov	r2, #284	; 0x11c
   13450:	adds	r0, r0, #1
   13454:	adc	r1, r1, #0
   13458:	strd	r0, [r7, #32]
   1345c:	ldr	r0, [pc, #92]	; 134c0 <if_statement_only@@Base+0x238>
   13460:	ldr	r1, [pc, #92]	; 134c4 <if_statement_only@@Base+0x23c>
   13464:	ldr	r3, [pc, #92]	; 134c8 <if_statement_only@@Base+0x240>
   13468:	add	r0, pc, r0
   1346c:	add	r1, pc, r1
   13470:	add	r3, pc, r3
   13474:	bl	12044 <__assert_fail@plt>
   13478:	ldrd	r0, [r7, #48]	; 0x30
   1347c:	movw	r2, #285	; 0x11d
   13480:	adds	r0, r0, #1
   13484:	adc	r1, r1, #0
   13488:	strd	r0, [r7, #48]	; 0x30
   1348c:	ldr	r0, [pc, #56]	; 134cc <if_statement_only@@Base+0x244>
   13490:	ldr	r1, [pc, #56]	; 134d0 <if_statement_only@@Base+0x248>
   13494:	ldr	r3, [pc, #56]	; 134d4 <if_statement_only@@Base+0x24c>
   13498:	add	r0, pc, r0
   1349c:	add	r1, pc, r1
   134a0:	add	r3, pc, r3
   134a4:	bl	12044 <__assert_fail@plt>
   134a8:	andeq	sl, r1, r0, lsl r1
   134ac:	andeq	sl, r1, r4, lsl r1
   134b0:	andeq	r9, r1, r0, lsr sp
   134b4:	strdeq	r7, [r0], -r3
   134b8:	andeq	r7, r0, r6, ror r4
   134bc:	andeq	r7, r0, r5, lsl #14
   134c0:	strdeq	r7, [r0], -r6
   134c4:	andeq	r7, r0, r6, asr #8
   134c8:	ldrdeq	r7, [r0], -r5
   134cc:	ldrdeq	r7, [r0], -r2
   134d0:	andeq	r7, r0, r6, lsl r4
   134d4:	andeq	r7, r0, r5, lsr #13

000134d8 <if_else_statements@@Base>:
   134d8:	push	{r4, r5, r6, r7, fp, lr}
   134dc:	add	fp, sp, #16
   134e0:	sub	sp, sp, #16
   134e4:	ldr	r7, [pc, #556]	; 13718 <if_else_statements@@Base+0x240>
   134e8:	ldr	r0, [pc, #556]	; 1371c <if_else_statements@@Base+0x244>
   134ec:	mov	r4, sp
   134f0:	add	r1, sp, #4
   134f4:	ldr	r0, [pc, r0]
   134f8:	add	r7, pc, r7
   134fc:	adds	r0, r0, #1
   13500:	str	r0, [r7]
   13504:	ldr	r0, [r7, #4]
   13508:	adc	r0, r0, #0
   1350c:	str	r0, [r7, #4]
   13510:	mov	r0, r4
   13514:	bl	16810 <init_grammar@@Base>
   13518:	mov	r0, #3
   1351c:	bl	11f18 <malloc@plt>
   13520:	mov	r6, r0
   13524:	mov	r0, #0
   13528:	strb	r0, [r6, #2]
   1352c:	movw	r0, #15649	; 0x3d21
   13530:	strh	r0, [r6]
   13534:	mov	r0, #44	; 0x2c
   13538:	bl	11f18 <malloc@plt>
   1353c:	mov	r5, r0
   13540:	mov	r0, #4
   13544:	bl	11f18 <malloc@plt>
   13548:	str	r0, [r5]
   1354c:	bl	14e20 <init_token_opar@@Base>
   13550:	mov	r0, #8
   13554:	bl	11f18 <malloc@plt>
   13558:	mov	r1, #1
   1355c:	str	r0, [r5, #4]
   13560:	bl	14d80 <init_token_int_value@@Base>
   13564:	mov	r0, #8
   13568:	bl	11f18 <malloc@plt>
   1356c:	mov	r1, #1
   13570:	str	r0, [r5, #8]
   13574:	bl	14d80 <init_token_int_value@@Base>
   13578:	mov	r0, #8
   1357c:	bl	11f18 <malloc@plt>
   13580:	mov	r1, r6
   13584:	str	r0, [r5, #12]
   13588:	bl	150f0 <init_token_boolean_op@@Base>
   1358c:	mov	r0, #8
   13590:	bl	11f18 <malloc@plt>
   13594:	mov	r1, #1
   13598:	str	r0, [r5, #16]
   1359c:	bl	14d80 <init_token_int_value@@Base>
   135a0:	mov	r0, #4
   135a4:	bl	11f18 <malloc@plt>
   135a8:	str	r0, [r5, #20]
   135ac:	bl	14e70 <init_token_cpar@@Base>
   135b0:	mov	r0, #4
   135b4:	bl	11f18 <malloc@plt>
   135b8:	str	r0, [r5, #24]
   135bc:	bl	14ec0 <init_token_obra@@Base>
   135c0:	mov	r0, #4
   135c4:	bl	11f18 <malloc@plt>
   135c8:	str	r0, [r5, #28]
   135cc:	bl	14f10 <init_token_cbra@@Base>
   135d0:	mov	r0, #4
   135d4:	bl	11f18 <malloc@plt>
   135d8:	str	r0, [r5, #32]
   135dc:	bl	150a0 <init_token_else@@Base>
   135e0:	mov	r0, #4
   135e4:	bl	11f18 <malloc@plt>
   135e8:	str	r0, [r5, #36]	; 0x24
   135ec:	bl	14ec0 <init_token_obra@@Base>
   135f0:	mov	r0, #4
   135f4:	bl	11f18 <malloc@plt>
   135f8:	str	r0, [r5, #40]	; 0x28
   135fc:	bl	14f10 <init_token_cbra@@Base>
   13600:	ldr	r6, [pc, #280]	; 13720 <if_else_statements@@Base+0x248>
   13604:	mov	r0, #11
   13608:	ldr	r6, [pc, r6]
   1360c:	str	r0, [r6, #220]	; 0xdc
   13610:	mov	r0, r4
   13614:	str	r5, [r6, #228]	; 0xe4
   13618:	bl	16de8 <read_if_statement@@Base>
   1361c:	ldr	r1, [r6, #204]	; 0xcc
   13620:	cmp	r1, #11
   13624:	bne	13688 <if_else_statements@@Base+0x1b0>
   13628:	ldrd	r2, [r7, #8]
   1362c:	adds	r2, r2, #1
   13630:	adc	r3, r3, #0
   13634:	cmp	r0, #0
   13638:	strd	r2, [r7, #8]
   1363c:	beq	136b8 <if_else_statements@@Base+0x1e0>
   13640:	ldrd	r2, [r7, #24]
   13644:	adds	r2, r2, #1
   13648:	adc	r3, r3, #0
   1364c:	strd	r2, [r7, #24]
   13650:	ldr	r0, [r0]
   13654:	cmp	r0, #4
   13658:	bne	136e8 <if_else_statements@@Base+0x210>
   1365c:	ldrd	r0, [r7, #40]	; 0x28
   13660:	ldrd	r2, [r7, #56]	; 0x38
   13664:	adds	r0, r0, #1
   13668:	adc	r1, r1, #0
   1366c:	adds	r2, r2, #1
   13670:	str	r2, [r7, #56]	; 0x38
   13674:	strd	r0, [r7, #40]	; 0x28
   13678:	adc	r0, r3, #0
   1367c:	str	r0, [r7, #60]	; 0x3c
   13680:	sub	sp, fp, #16
   13684:	pop	{r4, r5, r6, r7, fp, pc}
   13688:	ldrd	r0, [r7, #16]
   1368c:	mov	r2, #332	; 0x14c
   13690:	adds	r0, r0, #1
   13694:	adc	r1, r1, #0
   13698:	strd	r0, [r7, #16]
   1369c:	ldr	r0, [pc, #128]	; 13724 <if_else_statements@@Base+0x24c>
   136a0:	ldr	r1, [pc, #128]	; 13728 <if_else_statements@@Base+0x250>
   136a4:	ldr	r3, [pc, #128]	; 1372c <if_else_statements@@Base+0x254>
   136a8:	add	r0, pc, r0
   136ac:	add	r1, pc, r1
   136b0:	add	r3, pc, r3
   136b4:	bl	12044 <__assert_fail@plt>
   136b8:	ldrd	r0, [r7, #32]
   136bc:	movw	r2, #333	; 0x14d
   136c0:	adds	r0, r0, #1
   136c4:	adc	r1, r1, #0
   136c8:	strd	r0, [r7, #32]
   136cc:	ldr	r0, [pc, #92]	; 13730 <if_else_statements@@Base+0x258>
   136d0:	ldr	r1, [pc, #92]	; 13734 <if_else_statements@@Base+0x25c>
   136d4:	ldr	r3, [pc, #92]	; 13738 <if_else_statements@@Base+0x260>
   136d8:	add	r0, pc, r0
   136dc:	add	r1, pc, r1
   136e0:	add	r3, pc, r3
   136e4:	bl	12044 <__assert_fail@plt>
   136e8:	ldrd	r0, [r7, #48]	; 0x30
   136ec:	movw	r2, #334	; 0x14e
   136f0:	adds	r0, r0, #1
   136f4:	adc	r1, r1, #0
   136f8:	strd	r0, [r7, #48]	; 0x30
   136fc:	ldr	r0, [pc, #56]	; 1373c <if_else_statements@@Base+0x264>
   13700:	ldr	r1, [pc, #56]	; 13740 <if_else_statements@@Base+0x268>
   13704:	ldr	r3, [pc, #56]	; 13744 <if_else_statements@@Base+0x26c>
   13708:	add	r0, pc, r0
   1370c:	add	r1, pc, r1
   13710:	add	r3, pc, r3
   13714:	bl	12044 <__assert_fail@plt>
   13718:	andeq	r9, r1, r0, lsl #30
   1371c:	andeq	r9, r1, r4, lsl #30
   13720:	andeq	r9, r1, r0, asr #21
   13724:	ldrdeq	r7, [r0], -r4
   13728:	andeq	r7, r0, r6, lsl #4
   1372c:	andeq	r7, r0, r7, ror #9
   13730:	andeq	r7, r0, r6, lsl #9
   13734:	ldrdeq	r7, [r0], -r6
   13738:			; <UNDEFINED> instruction: 0x000074b7
   1373c:	andeq	r7, r0, r2, ror #8
   13740:	andeq	r7, r0, r6, lsr #3
   13744:	andeq	r7, r0, r7, lsl #9

00013748 <body_with_two_returns@@Base>:
   13748:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1374c:	add	fp, sp, #24
   13750:	sub	sp, sp, #16
   13754:	ldr	r6, [pc, #628]	; 139d0 <body_with_two_returns@@Base+0x288>
   13758:	ldr	r0, [pc, #628]	; 139d4 <body_with_two_returns@@Base+0x28c>
   1375c:	mov	r4, sp
   13760:	add	r1, sp, #4
   13764:	ldr	r0, [pc, r0]
   13768:	add	r6, pc, r6
   1376c:	adds	r0, r0, #1
   13770:	str	r0, [r6]
   13774:	ldr	r0, [r6, #4]
   13778:	adc	r0, r0, #0
   1377c:	str	r0, [r6, #4]
   13780:	mov	r0, r4
   13784:	bl	16810 <init_grammar@@Base>
   13788:	mov	r0, #32
   1378c:	bl	11f18 <malloc@plt>
   13790:	mov	r5, r0
   13794:	mov	r0, #4
   13798:	bl	11f18 <malloc@plt>
   1379c:	str	r0, [r5]
   137a0:	bl	14ec0 <init_token_obra@@Base>
   137a4:	mov	r0, #4
   137a8:	bl	11f18 <malloc@plt>
   137ac:	str	r0, [r5, #4]
   137b0:	bl	14f60 <init_token_return@@Base>
   137b4:	mov	r0, #8
   137b8:	mov	r8, #8
   137bc:	bl	11f18 <malloc@plt>
   137c0:	mov	r1, #1
   137c4:	str	r0, [r5, #8]
   137c8:	bl	14d80 <init_token_int_value@@Base>
   137cc:	mov	r0, #4
   137d0:	bl	11f18 <malloc@plt>
   137d4:	str	r0, [r5, #12]
   137d8:	bl	14fb0 <init_token_semicolon@@Base>
   137dc:	mov	r0, #4
   137e0:	bl	11f18 <malloc@plt>
   137e4:	str	r0, [r5, #16]
   137e8:	bl	14f60 <init_token_return@@Base>
   137ec:	mov	r0, #8
   137f0:	bl	11f18 <malloc@plt>
   137f4:	mov	r1, #1
   137f8:	str	r0, [r5, #20]
   137fc:	bl	14d80 <init_token_int_value@@Base>
   13800:	mov	r0, #4
   13804:	bl	11f18 <malloc@plt>
   13808:	str	r0, [r5, #24]
   1380c:	bl	14fb0 <init_token_semicolon@@Base>
   13810:	mov	r0, #4
   13814:	bl	11f18 <malloc@plt>
   13818:	str	r0, [r5, #28]
   1381c:	bl	14f10 <init_token_cbra@@Base>
   13820:	ldr	r7, [pc, #432]	; 139d8 <body_with_two_returns@@Base+0x290>
   13824:	mov	r0, r4
   13828:	ldr	r7, [pc, r7]
   1382c:	str	r8, [r7, #220]	; 0xdc
   13830:	str	r5, [r7, #228]	; 0xe4
   13834:	bl	16a74 <read_body@@Base>
   13838:	ldr	r1, [r7, #204]	; 0xcc
   1383c:	cmp	r1, #8
   13840:	bne	138e0 <body_with_two_returns@@Base+0x198>
   13844:	ldrd	r2, [r6, #8]
   13848:	adds	r2, r2, #1
   1384c:	adc	r3, r3, #0
   13850:	cmp	r0, #0
   13854:	strd	r2, [r6, #8]
   13858:	beq	13910 <body_with_two_returns@@Base+0x1c8>
   1385c:	ldrd	r2, [r6, #24]
   13860:	adds	r2, r2, #1
   13864:	adc	r3, r3, #0
   13868:	strd	r2, [r6, #24]
   1386c:	ldr	r1, [r0]
   13870:	cmp	r1, #3
   13874:	bne	13940 <body_with_two_returns@@Base+0x1f8>
   13878:	ldrd	r2, [r6, #40]	; 0x28
   1387c:	adds	r2, r2, #1
   13880:	adc	r3, r3, #0
   13884:	strd	r2, [r6, #40]	; 0x28
   13888:	ldr	r0, [r0, #4]
   1388c:	ldr	r1, [r0]
   13890:	cmp	r1, #3
   13894:	bne	13970 <body_with_two_returns@@Base+0x228>
   13898:	ldrd	r2, [r6, #56]	; 0x38
   1389c:	adds	r2, r2, #1
   138a0:	adc	r3, r3, #0
   138a4:	strd	r2, [r6, #56]	; 0x38
   138a8:	ldr	r0, [r0, #4]
   138ac:	cmp	r0, #0
   138b0:	bne	139a0 <body_with_two_returns@@Base+0x258>
   138b4:	ldrd	r0, [r6, #72]	; 0x48
   138b8:	ldrd	r2, [r6, #88]	; 0x58
   138bc:	adds	r0, r0, #1
   138c0:	adc	r1, r1, #0
   138c4:	adds	r2, r2, #1
   138c8:	str	r2, [r6, #88]	; 0x58
   138cc:	strd	r0, [r6, #72]	; 0x48
   138d0:	adc	r0, r3, #0
   138d4:	str	r0, [r6, #92]	; 0x5c
   138d8:	sub	sp, fp, #24
   138dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138e0:	ldrd	r0, [r6, #16]
   138e4:	movw	r2, #371	; 0x173
   138e8:	adds	r0, r0, #1
   138ec:	adc	r1, r1, #0
   138f0:	strd	r0, [r6, #16]
   138f4:	ldr	r0, [pc, #224]	; 139dc <body_with_two_returns@@Base+0x294>
   138f8:	ldr	r1, [pc, #224]	; 139e0 <body_with_two_returns@@Base+0x298>
   138fc:	ldr	r3, [pc, #224]	; 139e4 <body_with_two_returns@@Base+0x29c>
   13900:	add	r0, pc, r0
   13904:	add	r1, pc, r1
   13908:	add	r3, pc, r3
   1390c:	bl	12044 <__assert_fail@plt>
   13910:	ldrd	r0, [r6, #32]
   13914:	mov	r2, #372	; 0x174
   13918:	adds	r0, r0, #1
   1391c:	adc	r1, r1, #0
   13920:	strd	r0, [r6, #32]
   13924:	ldr	r0, [pc, #188]	; 139e8 <body_with_two_returns@@Base+0x2a0>
   13928:	ldr	r1, [pc, #188]	; 139ec <body_with_two_returns@@Base+0x2a4>
   1392c:	ldr	r3, [pc, #188]	; 139f0 <body_with_two_returns@@Base+0x2a8>
   13930:	add	r0, pc, r0
   13934:	add	r1, pc, r1
   13938:	add	r3, pc, r3
   1393c:	bl	12044 <__assert_fail@plt>
   13940:	ldrd	r0, [r6, #48]	; 0x30
   13944:	movw	r2, #373	; 0x175
   13948:	adds	r0, r0, #1
   1394c:	adc	r1, r1, #0
   13950:	strd	r0, [r6, #48]	; 0x30
   13954:	ldr	r0, [pc, #152]	; 139f4 <body_with_two_returns@@Base+0x2ac>
   13958:	ldr	r1, [pc, #152]	; 139f8 <body_with_two_returns@@Base+0x2b0>
   1395c:	ldr	r3, [pc, #152]	; 139fc <body_with_two_returns@@Base+0x2b4>
   13960:	add	r0, pc, r0
   13964:	add	r1, pc, r1
   13968:	add	r3, pc, r3
   1396c:	bl	12044 <__assert_fail@plt>
   13970:	ldrd	r0, [r6, #64]	; 0x40
   13974:	movw	r2, #374	; 0x176
   13978:	adds	r0, r0, #1
   1397c:	adc	r1, r1, #0
   13980:	strd	r0, [r6, #64]	; 0x40
   13984:	ldr	r0, [pc, #116]	; 13a00 <body_with_two_returns@@Base+0x2b8>
   13988:	ldr	r1, [pc, #116]	; 13a04 <body_with_two_returns@@Base+0x2bc>
   1398c:	ldr	r3, [pc, #116]	; 13a08 <body_with_two_returns@@Base+0x2c0>
   13990:	add	r0, pc, r0
   13994:	add	r1, pc, r1
   13998:	add	r3, pc, r3
   1399c:	bl	12044 <__assert_fail@plt>
   139a0:	ldrd	r0, [r6, #80]	; 0x50
   139a4:	movw	r2, #375	; 0x177
   139a8:	adds	r0, r0, #1
   139ac:	adc	r1, r1, #0
   139b0:	strd	r0, [r6, #80]	; 0x50
   139b4:	ldr	r0, [pc, #80]	; 13a0c <body_with_two_returns@@Base+0x2c4>
   139b8:	ldr	r1, [pc, #80]	; 13a10 <body_with_two_returns@@Base+0x2c8>
   139bc:	ldr	r3, [pc, #80]	; 13a14 <body_with_two_returns@@Base+0x2cc>
   139c0:	add	r0, pc, r0
   139c4:	add	r1, pc, r1
   139c8:	add	r3, pc, r3
   139cc:	bl	12044 <__assert_fail@plt>
   139d0:	ldrdeq	r9, [r1], -r0
   139d4:	ldrdeq	r9, [r1], -r4
   139d8:	andeq	r9, r1, r0, lsr #17
   139dc:			; <UNDEFINED> instruction: 0x000072b1
   139e0:	andeq	r6, r0, lr, lsr #31
   139e4:	andeq	r7, r0, r3, asr #5
   139e8:	andeq	r7, r0, lr, lsr #4
   139ec:	andeq	r6, r0, lr, ror pc
   139f0:	muleq	r0, r3, r2
   139f4:	andeq	r7, r0, r8, lsl #5
   139f8:	andeq	r6, r0, lr, asr #30
   139fc:	andeq	r7, r0, r3, ror #4
   13a00:	andeq	r7, r0, lr, ror #4
   13a04:	andeq	r6, r0, lr, lsl pc
   13a08:	andeq	r7, r0, r3, lsr r2
   13a0c:	andeq	r7, r0, sl, asr r2
   13a10:	andeq	r6, r0, lr, ror #29
   13a14:	andeq	r7, r0, r3, lsl #4

00013a18 <body_with_one_return@@Base>:
   13a18:	push	{r4, r5, r6, r7, fp, lr}
   13a1c:	add	fp, sp, #16
   13a20:	sub	sp, sp, #16
   13a24:	ldr	r6, [pc, #496]	; 13c1c <body_with_one_return@@Base+0x204>
   13a28:	ldr	r0, [pc, #496]	; 13c20 <body_with_one_return@@Base+0x208>
   13a2c:	mov	r4, sp
   13a30:	add	r1, sp, #4
   13a34:	ldr	r0, [pc, r0]
   13a38:	add	r6, pc, r6
   13a3c:	adds	r0, r0, #1
   13a40:	str	r0, [r6]
   13a44:	ldr	r0, [r6, #4]
   13a48:	adc	r0, r0, #0
   13a4c:	str	r0, [r6, #4]
   13a50:	mov	r0, r4
   13a54:	bl	16810 <init_grammar@@Base>
   13a58:	mov	r0, #20
   13a5c:	bl	11f18 <malloc@plt>
   13a60:	mov	r5, r0
   13a64:	mov	r0, #4
   13a68:	bl	11f18 <malloc@plt>
   13a6c:	str	r0, [r5]
   13a70:	bl	14ec0 <init_token_obra@@Base>
   13a74:	mov	r0, #4
   13a78:	bl	11f18 <malloc@plt>
   13a7c:	str	r0, [r5, #4]
   13a80:	bl	14f60 <init_token_return@@Base>
   13a84:	mov	r0, #8
   13a88:	bl	11f18 <malloc@plt>
   13a8c:	mov	r1, #1
   13a90:	str	r0, [r5, #8]
   13a94:	bl	14d80 <init_token_int_value@@Base>
   13a98:	mov	r0, #4
   13a9c:	bl	11f18 <malloc@plt>
   13aa0:	str	r0, [r5, #12]
   13aa4:	bl	14fb0 <init_token_semicolon@@Base>
   13aa8:	mov	r0, #4
   13aac:	bl	11f18 <malloc@plt>
   13ab0:	str	r0, [r5, #16]
   13ab4:	bl	14f10 <init_token_cbra@@Base>
   13ab8:	ldr	r7, [pc, #356]	; 13c24 <body_with_one_return@@Base+0x20c>
   13abc:	mov	r0, #5
   13ac0:	ldr	r7, [pc, r7]
   13ac4:	str	r0, [r7, #220]	; 0xdc
   13ac8:	mov	r0, r4
   13acc:	str	r5, [r7, #228]	; 0xe4
   13ad0:	bl	16a74 <read_body@@Base>
   13ad4:	ldr	r1, [r7, #204]	; 0xcc
   13ad8:	cmp	r1, #5
   13adc:	bne	13b5c <body_with_one_return@@Base+0x144>
   13ae0:	ldrd	r2, [r6, #8]
   13ae4:	adds	r2, r2, #1
   13ae8:	adc	r3, r3, #0
   13aec:	cmp	r0, #0
   13af0:	strd	r2, [r6, #8]
   13af4:	beq	13b8c <body_with_one_return@@Base+0x174>
   13af8:	ldrd	r2, [r6, #24]
   13afc:	adds	r2, r2, #1
   13b00:	adc	r3, r3, #0
   13b04:	strd	r2, [r6, #24]
   13b08:	ldr	r1, [r0]
   13b0c:	cmp	r1, #3
   13b10:	bne	13bbc <body_with_one_return@@Base+0x1a4>
   13b14:	ldrd	r2, [r6, #40]	; 0x28
   13b18:	adds	r2, r2, #1
   13b1c:	adc	r3, r3, #0
   13b20:	strd	r2, [r6, #40]	; 0x28
   13b24:	ldr	r0, [r0, #4]
   13b28:	cmp	r0, #0
   13b2c:	bne	13bec <body_with_one_return@@Base+0x1d4>
   13b30:	ldrd	r0, [r6, #56]	; 0x38
   13b34:	ldrd	r2, [r6, #72]	; 0x48
   13b38:	adds	r0, r0, #1
   13b3c:	adc	r1, r1, #0
   13b40:	adds	r2, r2, #1
   13b44:	str	r2, [r6, #72]	; 0x48
   13b48:	strd	r0, [r6, #56]	; 0x38
   13b4c:	adc	r0, r3, #0
   13b50:	str	r0, [r6, #76]	; 0x4c
   13b54:	sub	sp, fp, #16
   13b58:	pop	{r4, r5, r6, r7, fp, pc}
   13b5c:	ldrd	r0, [r6, #16]
   13b60:	movw	r2, #406	; 0x196
   13b64:	adds	r0, r0, #1
   13b68:	adc	r1, r1, #0
   13b6c:	strd	r0, [r6, #16]
   13b70:	ldr	r0, [pc, #176]	; 13c28 <body_with_one_return@@Base+0x210>
   13b74:	ldr	r1, [pc, #176]	; 13c2c <body_with_one_return@@Base+0x214>
   13b78:	ldr	r3, [pc, #176]	; 13c30 <body_with_one_return@@Base+0x218>
   13b7c:	add	r0, pc, r0
   13b80:	add	r1, pc, r1
   13b84:	add	r3, pc, r3
   13b88:	bl	12044 <__assert_fail@plt>
   13b8c:	ldrd	r0, [r6, #32]
   13b90:	movw	r2, #407	; 0x197
   13b94:	adds	r0, r0, #1
   13b98:	adc	r1, r1, #0
   13b9c:	strd	r0, [r6, #32]
   13ba0:	ldr	r0, [pc, #140]	; 13c34 <body_with_one_return@@Base+0x21c>
   13ba4:	ldr	r1, [pc, #140]	; 13c38 <body_with_one_return@@Base+0x220>
   13ba8:	ldr	r3, [pc, #140]	; 13c3c <body_with_one_return@@Base+0x224>
   13bac:	add	r0, pc, r0
   13bb0:	add	r1, pc, r1
   13bb4:	add	r3, pc, r3
   13bb8:	bl	12044 <__assert_fail@plt>
   13bbc:	ldrd	r0, [r6, #48]	; 0x30
   13bc0:	mov	r2, #408	; 0x198
   13bc4:	adds	r0, r0, #1
   13bc8:	adc	r1, r1, #0
   13bcc:	strd	r0, [r6, #48]	; 0x30
   13bd0:	ldr	r0, [pc, #104]	; 13c40 <body_with_one_return@@Base+0x228>
   13bd4:	ldr	r1, [pc, #104]	; 13c44 <body_with_one_return@@Base+0x22c>
   13bd8:	ldr	r3, [pc, #104]	; 13c48 <body_with_one_return@@Base+0x230>
   13bdc:	add	r0, pc, r0
   13be0:	add	r1, pc, r1
   13be4:	add	r3, pc, r3
   13be8:	bl	12044 <__assert_fail@plt>
   13bec:	ldrd	r0, [r6, #64]	; 0x40
   13bf0:	movw	r2, #409	; 0x199
   13bf4:	adds	r0, r0, #1
   13bf8:	adc	r1, r1, #0
   13bfc:	strd	r0, [r6, #64]	; 0x40
   13c00:	ldr	r0, [pc, #68]	; 13c4c <body_with_one_return@@Base+0x234>
   13c04:	ldr	r1, [pc, #68]	; 13c50 <body_with_one_return@@Base+0x238>
   13c08:	ldr	r3, [pc, #68]	; 13c54 <body_with_one_return@@Base+0x23c>
   13c0c:	add	r0, pc, r0
   13c10:	add	r1, pc, r1
   13c14:	add	r3, pc, r3
   13c18:	bl	12044 <__assert_fail@plt>
   13c1c:	andeq	r9, r1, r0, ror #20
   13c20:	andeq	r9, r1, r4, ror #20
   13c24:	andeq	r9, r1, r8, lsl #12
   13c28:	strdeq	r6, [r0], -ip
   13c2c:	andeq	r6, r0, r2, lsr sp
   13c30:	andeq	r7, r0, lr, lsr #1
   13c34:			; <UNDEFINED> instruction: 0x00006fb2
   13c38:	andeq	r6, r0, r2, lsl #26
   13c3c:	andeq	r7, r0, lr, ror r0
   13c40:	andeq	r7, r0, ip
   13c44:	ldrdeq	r6, [r0], -r2
   13c48:	andeq	r7, r0, lr, asr #32
   13c4c:	andeq	r7, r0, r2, asr #32
   13c50:	andeq	r6, r0, r2, lsr #25
   13c54:	andeq	r7, r0, lr, lsl r0

00013c58 <if_statement_inside_if_statement@@Base>:
   13c58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c5c:	add	fp, sp, #24
   13c60:	sub	sp, sp, #16
   13c64:	ldr	r4, [pc, #720]	; 13f3c <if_statement_inside_if_statement@@Base+0x2e4>
   13c68:	ldr	r0, [pc, #720]	; 13f40 <if_statement_inside_if_statement@@Base+0x2e8>
   13c6c:	mov	r8, sp
   13c70:	add	r1, sp, #4
   13c74:	ldr	r0, [pc, r0]
   13c78:	add	r4, pc, r4
   13c7c:	adds	r0, r0, #1
   13c80:	str	r0, [r4]
   13c84:	ldr	r0, [r4, #4]
   13c88:	adc	r0, r0, #0
   13c8c:	str	r0, [r4, #4]
   13c90:	mov	r0, r8
   13c94:	bl	16810 <init_grammar@@Base>
   13c98:	mov	r0, #3
   13c9c:	bl	11f18 <malloc@plt>
   13ca0:	mov	r7, r0
   13ca4:	mov	r0, #3
   13ca8:	bl	11f18 <malloc@plt>
   13cac:	mov	r6, r0
   13cb0:	mov	r0, #0
   13cb4:	movw	r1, #15649	; 0x3d21
   13cb8:	strb	r0, [r7, #2]
   13cbc:	strb	r0, [r6, #2]
   13cc0:	mov	r0, #76	; 0x4c
   13cc4:	strh	r1, [r7]
   13cc8:	strh	r1, [r6]
   13ccc:	bl	11f18 <malloc@plt>
   13cd0:	mov	r5, r0
   13cd4:	mov	r0, #4
   13cd8:	bl	11f18 <malloc@plt>
   13cdc:	str	r0, [r5]
   13ce0:	bl	14e20 <init_token_opar@@Base>
   13ce4:	mov	r0, #8
   13ce8:	bl	11f18 <malloc@plt>
   13cec:	mov	r1, #1
   13cf0:	str	r0, [r5, #4]
   13cf4:	bl	14d80 <init_token_int_value@@Base>
   13cf8:	mov	r0, #8
   13cfc:	bl	11f18 <malloc@plt>
   13d00:	mov	r1, #1
   13d04:	str	r0, [r5, #8]
   13d08:	bl	14d80 <init_token_int_value@@Base>
   13d0c:	mov	r0, #8
   13d10:	bl	11f18 <malloc@plt>
   13d14:	mov	r1, r7
   13d18:	str	r0, [r5, #12]
   13d1c:	bl	150f0 <init_token_boolean_op@@Base>
   13d20:	mov	r0, #8
   13d24:	bl	11f18 <malloc@plt>
   13d28:	mov	r1, #1
   13d2c:	str	r0, [r5, #16]
   13d30:	bl	14d80 <init_token_int_value@@Base>
   13d34:	mov	r0, #4
   13d38:	bl	11f18 <malloc@plt>
   13d3c:	str	r0, [r5, #20]
   13d40:	bl	14e70 <init_token_cpar@@Base>
   13d44:	mov	r0, #4
   13d48:	bl	11f18 <malloc@plt>
   13d4c:	str	r0, [r5, #24]
   13d50:	bl	14ec0 <init_token_obra@@Base>
   13d54:	mov	r0, #4
   13d58:	bl	11f18 <malloc@plt>
   13d5c:	str	r0, [r5, #28]
   13d60:	bl	15050 <init_token_if@@Base>
   13d64:	mov	r0, #4
   13d68:	bl	11f18 <malloc@plt>
   13d6c:	str	r0, [r5, #32]
   13d70:	bl	14e20 <init_token_opar@@Base>
   13d74:	mov	r0, #8
   13d78:	bl	11f18 <malloc@plt>
   13d7c:	mov	r1, #1
   13d80:	str	r0, [r5, #36]	; 0x24
   13d84:	bl	14d80 <init_token_int_value@@Base>
   13d88:	mov	r0, #8
   13d8c:	bl	11f18 <malloc@plt>
   13d90:	mov	r1, #1
   13d94:	str	r0, [r5, #40]	; 0x28
   13d98:	bl	14d80 <init_token_int_value@@Base>
   13d9c:	mov	r0, #8
   13da0:	bl	11f18 <malloc@plt>
   13da4:	mov	r1, r6
   13da8:	str	r0, [r5, #44]	; 0x2c
   13dac:	bl	150f0 <init_token_boolean_op@@Base>
   13db0:	mov	r0, #8
   13db4:	bl	11f18 <malloc@plt>
   13db8:	mov	r1, #1
   13dbc:	str	r0, [r5, #48]	; 0x30
   13dc0:	bl	14d80 <init_token_int_value@@Base>
   13dc4:	mov	r0, #4
   13dc8:	bl	11f18 <malloc@plt>
   13dcc:	str	r0, [r5, #52]	; 0x34
   13dd0:	bl	14e70 <init_token_cpar@@Base>
   13dd4:	mov	r0, #4
   13dd8:	bl	11f18 <malloc@plt>
   13ddc:	str	r0, [r5, #56]	; 0x38
   13de0:	bl	14ec0 <init_token_obra@@Base>
   13de4:	mov	r0, #4
   13de8:	bl	11f18 <malloc@plt>
   13dec:	str	r0, [r5, #60]	; 0x3c
   13df0:	bl	14f10 <init_token_cbra@@Base>
   13df4:	mov	r0, #4
   13df8:	bl	11f18 <malloc@plt>
   13dfc:	str	r0, [r5, #64]	; 0x40
   13e00:	bl	14f10 <init_token_cbra@@Base>
   13e04:	mov	r0, #4
   13e08:	bl	11f18 <malloc@plt>
   13e0c:	str	r0, [r5, #68]	; 0x44
   13e10:	bl	14f10 <init_token_cbra@@Base>
   13e14:	mov	r0, #4
   13e18:	bl	11f18 <malloc@plt>
   13e1c:	str	r0, [r5, #72]	; 0x48
   13e20:	bl	15000 <init_token_eof@@Base>
   13e24:	ldr	r6, [pc, #280]	; 13f44 <if_statement_inside_if_statement@@Base+0x2ec>
   13e28:	mov	r0, #19
   13e2c:	ldr	r6, [pc, r6]
   13e30:	str	r0, [r6, #220]	; 0xdc
   13e34:	mov	r0, r8
   13e38:	str	r5, [r6, #228]	; 0xe4
   13e3c:	bl	16de8 <read_if_statement@@Base>
   13e40:	ldr	r1, [r6, #204]	; 0xcc
   13e44:	cmp	r1, #19
   13e48:	bne	13eac <if_statement_inside_if_statement@@Base+0x254>
   13e4c:	ldrd	r2, [r4, #8]
   13e50:	adds	r2, r2, #1
   13e54:	adc	r3, r3, #0
   13e58:	cmp	r0, #0
   13e5c:	strd	r2, [r4, #8]
   13e60:	beq	13edc <if_statement_inside_if_statement@@Base+0x284>
   13e64:	ldrd	r2, [r4, #24]
   13e68:	adds	r2, r2, #1
   13e6c:	adc	r3, r3, #0
   13e70:	strd	r2, [r4, #24]
   13e74:	ldr	r0, [r0]
   13e78:	cmp	r0, #4
   13e7c:	bne	13f0c <if_statement_inside_if_statement@@Base+0x2b4>
   13e80:	ldrd	r0, [r4, #40]	; 0x28
   13e84:	ldrd	r2, [r4, #56]	; 0x38
   13e88:	adds	r0, r0, #1
   13e8c:	adc	r1, r1, #0
   13e90:	adds	r2, r2, #1
   13e94:	str	r2, [r4, #56]	; 0x38
   13e98:	strd	r0, [r4, #40]	; 0x28
   13e9c:	adc	r0, r3, #0
   13ea0:	str	r0, [r4, #60]	; 0x3c
   13ea4:	sub	sp, fp, #24
   13ea8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13eac:	ldrd	r0, [r4, #16]
   13eb0:	mov	r2, #480	; 0x1e0
   13eb4:	adds	r0, r0, #1
   13eb8:	adc	r1, r1, #0
   13ebc:	strd	r0, [r4, #16]
   13ec0:	ldr	r0, [pc, #128]	; 13f48 <if_statement_inside_if_statement@@Base+0x2f0>
   13ec4:	ldr	r1, [pc, #128]	; 13f4c <if_statement_inside_if_statement@@Base+0x2f4>
   13ec8:	ldr	r3, [pc, #128]	; 13f50 <if_statement_inside_if_statement@@Base+0x2f8>
   13ecc:	add	r0, pc, r0
   13ed0:	add	r1, pc, r1
   13ed4:	add	r3, pc, r3
   13ed8:	bl	12044 <__assert_fail@plt>
   13edc:	ldrd	r0, [r4, #32]
   13ee0:	movw	r2, #481	; 0x1e1
   13ee4:	adds	r0, r0, #1
   13ee8:	adc	r1, r1, #0
   13eec:	strd	r0, [r4, #32]
   13ef0:	ldr	r0, [pc, #92]	; 13f54 <if_statement_inside_if_statement@@Base+0x2fc>
   13ef4:	ldr	r1, [pc, #92]	; 13f58 <if_statement_inside_if_statement@@Base+0x300>
   13ef8:	ldr	r3, [pc, #92]	; 13f5c <if_statement_inside_if_statement@@Base+0x304>
   13efc:	add	r0, pc, r0
   13f00:	add	r1, pc, r1
   13f04:	add	r3, pc, r3
   13f08:	bl	12044 <__assert_fail@plt>
   13f0c:	ldrd	r0, [r4, #48]	; 0x30
   13f10:	movw	r2, #482	; 0x1e2
   13f14:	adds	r0, r0, #1
   13f18:	adc	r1, r1, #0
   13f1c:	strd	r0, [r4, #48]	; 0x30
   13f20:	ldr	r0, [pc, #56]	; 13f60 <if_statement_inside_if_statement@@Base+0x308>
   13f24:	ldr	r1, [pc, #56]	; 13f64 <if_statement_inside_if_statement@@Base+0x30c>
   13f28:	ldr	r3, [pc, #56]	; 13f68 <if_statement_inside_if_statement@@Base+0x310>
   13f2c:	add	r0, pc, r0
   13f30:	add	r1, pc, r1
   13f34:	add	r3, pc, r3
   13f38:	bl	12044 <__assert_fail@plt>
   13f3c:	andeq	r9, r1, r0, ror r8
   13f40:	andeq	r9, r1, r4, ror r8
   13f44:	muleq	r1, ip, r2
   13f48:	muleq	r0, r4, sp
   13f4c:	andeq	r6, r0, r2, ror #19
   13f50:	andeq	r6, r0, r7, lsr #27
   13f54:	andeq	r6, r0, r2, ror #24
   13f58:			; <UNDEFINED> instruction: 0x000069b2
   13f5c:	andeq	r6, r0, r7, ror sp
   13f60:	andeq	r6, r0, lr, lsr ip
   13f64:	andeq	r6, r0, r2, lsl #19
   13f68:	andeq	r6, r0, r7, asr #26

00013f6c <if_statement_inside_else_statement@@Base>:
   13f6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f70:	add	fp, sp, #24
   13f74:	sub	sp, sp, #16
   13f78:	ldr	r4, [pc, #752]	; 14270 <if_statement_inside_else_statement@@Base+0x304>
   13f7c:	ldr	r0, [pc, #752]	; 14274 <if_statement_inside_else_statement@@Base+0x308>
   13f80:	mov	r8, sp
   13f84:	add	r1, sp, #4
   13f88:	ldr	r0, [pc, r0]
   13f8c:	add	r4, pc, r4
   13f90:	adds	r0, r0, #1
   13f94:	str	r0, [r4]
   13f98:	ldr	r0, [r4, #4]
   13f9c:	adc	r0, r0, #0
   13fa0:	str	r0, [r4, #4]
   13fa4:	mov	r0, r8
   13fa8:	bl	16810 <init_grammar@@Base>
   13fac:	mov	r0, #3
   13fb0:	bl	11f18 <malloc@plt>
   13fb4:	mov	r7, r0
   13fb8:	mov	r0, #3
   13fbc:	bl	11f18 <malloc@plt>
   13fc0:	mov	r6, r0
   13fc4:	mov	r0, #0
   13fc8:	movw	r1, #15649	; 0x3d21
   13fcc:	strb	r0, [r7, #2]
   13fd0:	strb	r0, [r6, #2]
   13fd4:	mov	r0, #84	; 0x54
   13fd8:	strh	r1, [r7]
   13fdc:	strh	r1, [r6]
   13fe0:	bl	11f18 <malloc@plt>
   13fe4:	mov	r5, r0
   13fe8:	mov	r0, #4
   13fec:	bl	11f18 <malloc@plt>
   13ff0:	str	r0, [r5]
   13ff4:	bl	14e20 <init_token_opar@@Base>
   13ff8:	mov	r0, #8
   13ffc:	bl	11f18 <malloc@plt>
   14000:	mov	r1, #1
   14004:	str	r0, [r5, #4]
   14008:	bl	14d80 <init_token_int_value@@Base>
   1400c:	mov	r0, #8
   14010:	bl	11f18 <malloc@plt>
   14014:	mov	r1, #1
   14018:	str	r0, [r5, #8]
   1401c:	bl	14d80 <init_token_int_value@@Base>
   14020:	mov	r0, #8
   14024:	bl	11f18 <malloc@plt>
   14028:	mov	r1, r7
   1402c:	str	r0, [r5, #12]
   14030:	bl	150f0 <init_token_boolean_op@@Base>
   14034:	mov	r0, #8
   14038:	bl	11f18 <malloc@plt>
   1403c:	mov	r1, #1
   14040:	str	r0, [r5, #16]
   14044:	bl	14d80 <init_token_int_value@@Base>
   14048:	mov	r0, #4
   1404c:	bl	11f18 <malloc@plt>
   14050:	str	r0, [r5, #20]
   14054:	bl	14e70 <init_token_cpar@@Base>
   14058:	mov	r0, #4
   1405c:	bl	11f18 <malloc@plt>
   14060:	str	r0, [r5, #24]
   14064:	bl	14ec0 <init_token_obra@@Base>
   14068:	mov	r0, #4
   1406c:	bl	11f18 <malloc@plt>
   14070:	str	r0, [r5, #28]
   14074:	bl	14f10 <init_token_cbra@@Base>
   14078:	mov	r0, #4
   1407c:	bl	11f18 <malloc@plt>
   14080:	str	r0, [r5, #32]
   14084:	bl	150a0 <init_token_else@@Base>
   14088:	mov	r0, #4
   1408c:	bl	11f18 <malloc@plt>
   14090:	str	r0, [r5, #36]	; 0x24
   14094:	bl	14ec0 <init_token_obra@@Base>
   14098:	mov	r0, #4
   1409c:	bl	11f18 <malloc@plt>
   140a0:	str	r0, [r5, #40]	; 0x28
   140a4:	bl	15050 <init_token_if@@Base>
   140a8:	mov	r0, #4
   140ac:	bl	11f18 <malloc@plt>
   140b0:	str	r0, [r5, #44]	; 0x2c
   140b4:	bl	14e20 <init_token_opar@@Base>
   140b8:	mov	r0, #8
   140bc:	bl	11f18 <malloc@plt>
   140c0:	mov	r1, #1
   140c4:	str	r0, [r5, #48]	; 0x30
   140c8:	bl	14d80 <init_token_int_value@@Base>
   140cc:	mov	r0, #8
   140d0:	bl	11f18 <malloc@plt>
   140d4:	mov	r1, #1
   140d8:	str	r0, [r5, #52]	; 0x34
   140dc:	bl	14d80 <init_token_int_value@@Base>
   140e0:	mov	r0, #8
   140e4:	bl	11f18 <malloc@plt>
   140e8:	mov	r1, r6
   140ec:	str	r0, [r5, #56]	; 0x38
   140f0:	bl	150f0 <init_token_boolean_op@@Base>
   140f4:	mov	r0, #8
   140f8:	bl	11f18 <malloc@plt>
   140fc:	mov	r1, #1
   14100:	str	r0, [r5, #60]	; 0x3c
   14104:	bl	14d80 <init_token_int_value@@Base>
   14108:	mov	r0, #4
   1410c:	bl	11f18 <malloc@plt>
   14110:	str	r0, [r5, #64]	; 0x40
   14114:	bl	14e70 <init_token_cpar@@Base>
   14118:	mov	r0, #4
   1411c:	bl	11f18 <malloc@plt>
   14120:	str	r0, [r5, #68]	; 0x44
   14124:	bl	14ec0 <init_token_obra@@Base>
   14128:	mov	r0, #4
   1412c:	bl	11f18 <malloc@plt>
   14130:	str	r0, [r5, #72]	; 0x48
   14134:	bl	14f10 <init_token_cbra@@Base>
   14138:	mov	r0, #4
   1413c:	bl	11f18 <malloc@plt>
   14140:	str	r0, [r5, #76]	; 0x4c
   14144:	bl	14f10 <init_token_cbra@@Base>
   14148:	mov	r0, #4
   1414c:	bl	11f18 <malloc@plt>
   14150:	str	r0, [r5, #80]	; 0x50
   14154:	bl	14f10 <init_token_cbra@@Base>
   14158:	ldr	r6, [pc, #280]	; 14278 <if_statement_inside_else_statement@@Base+0x30c>
   1415c:	mov	r0, #21
   14160:	ldr	r6, [pc, r6]
   14164:	str	r0, [r6, #220]	; 0xdc
   14168:	mov	r0, r8
   1416c:	str	r5, [r6, #228]	; 0xe4
   14170:	bl	16de8 <read_if_statement@@Base>
   14174:	ldr	r1, [r6, #204]	; 0xcc
   14178:	cmp	r1, #21
   1417c:	bne	141e0 <if_statement_inside_else_statement@@Base+0x274>
   14180:	ldrd	r2, [r4, #8]
   14184:	adds	r2, r2, #1
   14188:	adc	r3, r3, #0
   1418c:	cmp	r0, #0
   14190:	strd	r2, [r4, #8]
   14194:	beq	14210 <if_statement_inside_else_statement@@Base+0x2a4>
   14198:	ldrd	r2, [r4, #24]
   1419c:	adds	r2, r2, #1
   141a0:	adc	r3, r3, #0
   141a4:	strd	r2, [r4, #24]
   141a8:	ldr	r0, [r0]
   141ac:	cmp	r0, #4
   141b0:	bne	14240 <if_statement_inside_else_statement@@Base+0x2d4>
   141b4:	ldrd	r0, [r4, #40]	; 0x28
   141b8:	ldrd	r2, [r4, #56]	; 0x38
   141bc:	adds	r0, r0, #1
   141c0:	adc	r1, r1, #0
   141c4:	adds	r2, r2, #1
   141c8:	str	r2, [r4, #56]	; 0x38
   141cc:	strd	r0, [r4, #40]	; 0x28
   141d0:	adc	r0, r3, #0
   141d4:	str	r0, [r4, #60]	; 0x3c
   141d8:	sub	sp, fp, #24
   141dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141e0:	ldrd	r0, [r4, #16]
   141e4:	movw	r2, #558	; 0x22e
   141e8:	adds	r0, r0, #1
   141ec:	adc	r1, r1, #0
   141f0:	strd	r0, [r4, #16]
   141f4:	ldr	r0, [pc, #128]	; 1427c <if_statement_inside_else_statement@@Base+0x310>
   141f8:	ldr	r1, [pc, #128]	; 14280 <if_statement_inside_else_statement@@Base+0x314>
   141fc:	ldr	r3, [pc, #128]	; 14284 <if_statement_inside_else_statement@@Base+0x318>
   14200:	add	r0, pc, r0
   14204:	add	r1, pc, r1
   14208:	add	r3, pc, r3
   1420c:	bl	12044 <__assert_fail@plt>
   14210:	ldrd	r0, [r4, #32]
   14214:	movw	r2, #559	; 0x22f
   14218:	adds	r0, r0, #1
   1421c:	adc	r1, r1, #0
   14220:	strd	r0, [r4, #32]
   14224:	ldr	r0, [pc, #92]	; 14288 <if_statement_inside_else_statement@@Base+0x31c>
   14228:	ldr	r1, [pc, #92]	; 1428c <if_statement_inside_else_statement@@Base+0x320>
   1422c:	ldr	r3, [pc, #92]	; 14290 <if_statement_inside_else_statement@@Base+0x324>
   14230:	add	r0, pc, r0
   14234:	add	r1, pc, r1
   14238:	add	r3, pc, r3
   1423c:	bl	12044 <__assert_fail@plt>
   14240:	ldrd	r0, [r4, #48]	; 0x30
   14244:	mov	r2, #560	; 0x230
   14248:	adds	r0, r0, #1
   1424c:	adc	r1, r1, #0
   14250:	strd	r0, [r4, #48]	; 0x30
   14254:	ldr	r0, [pc, #56]	; 14294 <if_statement_inside_else_statement@@Base+0x328>
   14258:	ldr	r1, [pc, #56]	; 14298 <if_statement_inside_else_statement@@Base+0x32c>
   1425c:	ldr	r3, [pc, #56]	; 1429c <if_statement_inside_else_statement@@Base+0x330>
   14260:	add	r0, pc, r0
   14264:	add	r1, pc, r1
   14268:	add	r3, pc, r3
   1426c:	bl	12044 <__assert_fail@plt>
   14270:	muleq	r1, ip, r5
   14274:	andeq	r9, r1, r0, lsr #11
   14278:	andeq	r8, r1, r8, ror #30
   1427c:	andeq	r6, r0, r3, lsr #21
   14280:	andeq	r6, r0, lr, lsr #13
   14284:			; <UNDEFINED> instruction: 0x00006ab6
   14288:	andeq	r6, r0, lr, lsr #18
   1428c:	andeq	r6, r0, lr, ror r6
   14290:	andeq	r6, r0, r6, lsl #21
   14294:	andeq	r6, r0, sl, lsl #18
   14298:	andeq	r6, r0, lr, asr #12
   1429c:	andeq	r6, r0, r6, asr sl

000142a0 <main@@Base>:
   142a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142a4:	add	fp, sp, #28
   142a8:	sub	sp, sp, #4
   142ac:	vpush	{d8-d9}
   142b0:	ldr	r0, [pc, #1648]	; 14928 <main@@Base+0x688>
   142b4:	add	r1, pc, #1012	; 0x3f4
   142b8:	vld1.64	{d8-d9}, [r1 :128]
   142bc:	mov	r1, #0
   142c0:	add	r0, pc, r0
   142c4:	vld1.64	{d16-d17}, [r0 :128]
   142c8:	vadd.i64	q8, q8, q4
   142cc:	vst1.64	{d16-d17}, [r0 :128]
   142d0:	ldr	r4, [pc, #1620]	; 1492c <main@@Base+0x68c>
   142d4:	ldr	r4, [pc, r4]
   142d8:	ldr	r0, [r4]
   142dc:	bl	11e64 <setbuf@plt>
   142e0:	ldr	r3, [r4]
   142e4:	ldr	r0, [pc, #1604]	; 14930 <main@@Base+0x690>
   142e8:	mov	r1, #14
   142ec:	mov	r2, #1
   142f0:	add	r0, pc, r0
   142f4:	bl	11ee8 <fwrite@plt>
   142f8:	ldr	r3, [r4]
   142fc:	ldr	r0, [pc, #1584]	; 14934 <main@@Base+0x694>
   14300:	mov	r1, #14
   14304:	mov	r2, #1
   14308:	add	r0, pc, r0
   1430c:	bl	11ee8 <fwrite@plt>
   14310:	ldr	r3, [r4]
   14314:	ldr	r0, [pc, #1564]	; 14938 <main@@Base+0x698>
   14318:	mov	r1, #15
   1431c:	mov	r2, #1
   14320:	add	r0, pc, r0
   14324:	bl	11ee8 <fwrite@plt>
   14328:	mov	r0, #0
   1432c:	bl	11e88 <fflush@plt>
   14330:	ldr	r0, [pc, #1540]	; 1493c <main@@Base+0x69c>
   14334:	ldr	r1, [pc, #1540]	; 14940 <main@@Base+0x6a0>
   14338:	ldr	r2, [pc, #1540]	; 14944 <main@@Base+0x6a4>
   1433c:	add	r0, pc, r0
   14340:	add	r1, pc, r1
   14344:	add	r2, pc, r2
   14348:	bl	11e7c <printf@plt>
   1434c:	ldr	r7, [pc, #1524]	; 14948 <main@@Base+0x6a8>
   14350:	ldr	r9, [pc, #1524]	; 1494c <main@@Base+0x6ac>
   14354:	mov	r1, #0
   14358:	mov	r2, #236	; 0xec
   1435c:	add	r7, pc, r7
   14360:	add	r9, pc, r9
   14364:	vld1.64	{d16-d17}, [r9 :128]
   14368:	vld1.64	{d18-d19}, [r7 :128]
   1436c:	vadd.i64	q8, q8, q4
   14370:	vadd.i64	q9, q9, q4
   14374:	vst1.64	{d16-d17}, [r9 :128]
   14378:	vst1.64	{d18-d19}, [r7 :128]
   1437c:	ldr	r5, [pc, #1484]	; 14950 <main@@Base+0x6b0>
   14380:	ldr	r5, [pc, r5]
   14384:	mov	r0, r5
   14388:	bl	11fa8 <memset@plt>
   1438c:	ldr	sl, [pc, #1472]	; 14954 <main@@Base+0x6b4>
   14390:	mov	r8, #50	; 0x32
   14394:	mov	r1, #0
   14398:	mov	r2, #424	; 0x1a8
   1439c:	str	r8, [r5, #208]	; 0xd0
   143a0:	add	sl, pc, sl
   143a4:	vld1.64	{d16-d17}, [sl :128]
   143a8:	vadd.i64	q8, q8, q4
   143ac:	vst1.64	{d16-d17}, [sl :128]
   143b0:	ldr	r4, [pc, #1440]	; 14958 <main@@Base+0x6b8>
   143b4:	ldr	r4, [pc, r4]
   143b8:	mov	r0, r4
   143bc:	bl	11fa8 <memset@plt>
   143c0:	str	r8, [r4, #412]	; 0x19c
   143c4:	bl	12654 <no_int_as_first_stuff@@Base>
   143c8:	ldr	r6, [pc, #1420]	; 1495c <main@@Base+0x6bc>
   143cc:	add	r6, pc, r6
   143d0:	mov	r0, r6
   143d4:	bl	11f0c <puts@plt>
   143d8:	ldr	r2, [pc, #1408]	; 14960 <main@@Base+0x6c0>
   143dc:	ldr	r0, [pc, #1408]	; 14964 <main@@Base+0x6c4>
   143e0:	ldr	r1, [pc, #1408]	; 14968 <main@@Base+0x6c8>
   143e4:	add	r2, pc, r2
   143e8:	add	r0, pc, r0
   143ec:	add	r1, pc, r1
   143f0:	bl	11e7c <printf@plt>
   143f4:	vld1.64	{d16-d17}, [r9 :128]
   143f8:	vld1.64	{d18-d19}, [r7 :128]
   143fc:	mov	r0, r5
   14400:	mov	r1, #0
   14404:	mov	r2, #236	; 0xec
   14408:	vadd.i64	q8, q8, q4
   1440c:	vadd.i64	q9, q9, q4
   14410:	vst1.64	{d16-d17}, [r9 :128]
   14414:	vst1.64	{d18-d19}, [r7 :128]
   14418:	bl	11fa8 <memset@plt>
   1441c:	vld1.64	{d16-d17}, [sl :128]
   14420:	mov	r0, r4
   14424:	mov	r1, #0
   14428:	mov	r2, #424	; 0x1a8
   1442c:	str	r8, [r5, #208]	; 0xd0
   14430:	vadd.i64	q8, q8, q4
   14434:	vst1.64	{d16-d17}, [sl :128]
   14438:	bl	11fa8 <memset@plt>
   1443c:	str	r8, [r4, #412]	; 0x19c
   14440:	bl	1278c <int_but_not_followed_by_function@@Base>
   14444:	mov	r0, r6
   14448:	bl	11f0c <puts@plt>
   1444c:	ldr	r2, [pc, #1304]	; 1496c <main@@Base+0x6cc>
   14450:	ldr	r0, [pc, #1304]	; 14970 <main@@Base+0x6d0>
   14454:	ldr	r1, [pc, #1304]	; 14974 <main@@Base+0x6d4>
   14458:	add	r2, pc, r2
   1445c:	add	r0, pc, r0
   14460:	add	r1, pc, r1
   14464:	bl	11e7c <printf@plt>
   14468:	vld1.64	{d16-d17}, [r9 :128]
   1446c:	vld1.64	{d18-d19}, [r7 :128]
   14470:	mov	r0, r5
   14474:	mov	r1, #0
   14478:	mov	r2, #236	; 0xec
   1447c:	vadd.i64	q8, q8, q4
   14480:	vadd.i64	q9, q9, q4
   14484:	vst1.64	{d16-d17}, [r9 :128]
   14488:	vst1.64	{d18-d19}, [r7 :128]
   1448c:	bl	11fa8 <memset@plt>
   14490:	vld1.64	{d16-d17}, [sl :128]
   14494:	mov	r0, r4
   14498:	mov	r1, #0
   1449c:	mov	r2, #424	; 0x1a8
   144a0:	str	r8, [r5, #208]	; 0xd0
   144a4:	vadd.i64	q8, q8, q4
   144a8:	vst1.64	{d16-d17}, [sl :128]
   144ac:	bl	11fa8 <memset@plt>
   144b0:	str	r8, [r4, #412]	; 0x19c
   144b4:	bl	13000 <boolean_unary_operator_is_read_properly@@Base>
   144b8:	mov	r0, r6
   144bc:	bl	11f0c <puts@plt>
   144c0:	ldr	r2, [pc, #1200]	; 14978 <main@@Base+0x6d8>
   144c4:	ldr	r0, [pc, #1200]	; 1497c <main@@Base+0x6dc>
   144c8:	ldr	r1, [pc, #1200]	; 14980 <main@@Base+0x6e0>
   144cc:	add	r2, pc, r2
   144d0:	add	r0, pc, r0
   144d4:	add	r1, pc, r1
   144d8:	bl	11e7c <printf@plt>
   144dc:	vld1.64	{d16-d17}, [r9 :128]
   144e0:	vld1.64	{d18-d19}, [r7 :128]
   144e4:	mov	r0, r5
   144e8:	mov	r1, #0
   144ec:	mov	r2, #236	; 0xec
   144f0:	vadd.i64	q8, q8, q4
   144f4:	vadd.i64	q9, q9, q4
   144f8:	vst1.64	{d16-d17}, [r9 :128]
   144fc:	vst1.64	{d18-d19}, [r7 :128]
   14500:	bl	11fa8 <memset@plt>
   14504:	vld1.64	{d16-d17}, [sl :128]
   14508:	mov	r0, r4
   1450c:	mov	r1, #0
   14510:	mov	r2, #424	; 0x1a8
   14514:	str	r8, [r5, #208]	; 0xd0
   14518:	vadd.i64	q8, q8, q4
   1451c:	vst1.64	{d16-d17}, [sl :128]
   14520:	bl	11fa8 <memset@plt>
   14524:	str	r8, [r4, #412]	; 0x19c
   14528:	bl	12d58 <boolean_binary_operator_is_read_properly@@Base>
   1452c:	mov	r0, r6
   14530:	bl	11f0c <puts@plt>
   14534:	ldr	r2, [pc, #1096]	; 14984 <main@@Base+0x6e4>
   14538:	ldr	r0, [pc, #1096]	; 14988 <main@@Base+0x6e8>
   1453c:	ldr	r1, [pc, #1096]	; 1498c <main@@Base+0x6ec>
   14540:	add	r2, pc, r2
   14544:	add	r0, pc, r0
   14548:	add	r1, pc, r1
   1454c:	bl	11e7c <printf@plt>
   14550:	vld1.64	{d16-d17}, [r9 :128]
   14554:	vld1.64	{d18-d19}, [r7 :128]
   14558:	mov	r0, r5
   1455c:	mov	r1, #0
   14560:	mov	r2, #236	; 0xec
   14564:	vadd.i64	q8, q8, q4
   14568:	vadd.i64	q9, q9, q4
   1456c:	vst1.64	{d16-d17}, [r9 :128]
   14570:	vst1.64	{d18-d19}, [r7 :128]
   14574:	bl	11fa8 <memset@plt>
   14578:	vld1.64	{d16-d17}, [sl :128]
   1457c:	mov	r0, r4
   14580:	mov	r1, #0
   14584:	mov	r2, #424	; 0x1a8
   14588:	str	r8, [r5, #208]	; 0xd0
   1458c:	vadd.i64	q8, q8, q4
   14590:	vst1.64	{d16-d17}, [sl :128]
   14594:	bl	11fa8 <memset@plt>
   14598:	str	r8, [r4, #412]	; 0x19c
   1459c:	bl	128e8 <boolean_expression_is_read_properly@@Base>
   145a0:	mov	r0, r6
   145a4:	bl	11f0c <puts@plt>
   145a8:	ldr	r2, [pc, #992]	; 14990 <main@@Base+0x6f0>
   145ac:	ldr	r0, [pc, #992]	; 14994 <main@@Base+0x6f4>
   145b0:	ldr	r1, [pc, #992]	; 14998 <main@@Base+0x6f8>
   145b4:	add	r2, pc, r2
   145b8:	add	r0, pc, r0
   145bc:	add	r1, pc, r1
   145c0:	bl	11e7c <printf@plt>
   145c4:	vld1.64	{d16-d17}, [r9 :128]
   145c8:	vld1.64	{d18-d19}, [r7 :128]
   145cc:	mov	r0, r5
   145d0:	mov	r1, #0
   145d4:	mov	r2, #236	; 0xec
   145d8:	vadd.i64	q8, q8, q4
   145dc:	vadd.i64	q9, q9, q4
   145e0:	vst1.64	{d16-d17}, [r9 :128]
   145e4:	vst1.64	{d18-d19}, [r7 :128]
   145e8:	bl	11fa8 <memset@plt>
   145ec:	vld1.64	{d16-d17}, [sl :128]
   145f0:	mov	r0, r4
   145f4:	mov	r1, #0
   145f8:	mov	r2, #424	; 0x1a8
   145fc:	str	r8, [r5, #208]	; 0xd0
   14600:	vadd.i64	q8, q8, q4
   14604:	vst1.64	{d16-d17}, [sl :128]
   14608:	bl	11fa8 <memset@plt>
   1460c:	str	r8, [r4, #412]	; 0x19c
   14610:	bl	12b08 <boolean_expression_complex@@Base>
   14614:	mov	r0, r6
   14618:	bl	11f0c <puts@plt>
   1461c:	ldr	r2, [pc, #888]	; 1499c <main@@Base+0x6fc>
   14620:	ldr	r0, [pc, #888]	; 149a0 <main@@Base+0x700>
   14624:	ldr	r1, [pc, #888]	; 149a4 <main@@Base+0x704>
   14628:	add	r2, pc, r2
   1462c:	add	r0, pc, r0
   14630:	add	r1, pc, r1
   14634:	bl	11e7c <printf@plt>
   14638:	vld1.64	{d16-d17}, [r9 :128]
   1463c:	vld1.64	{d18-d19}, [r7 :128]
   14640:	mov	r0, r5
   14644:	mov	r1, #0
   14648:	mov	r2, #236	; 0xec
   1464c:	vadd.i64	q8, q8, q4
   14650:	vadd.i64	q9, q9, q4
   14654:	vst1.64	{d16-d17}, [r9 :128]
   14658:	vst1.64	{d18-d19}, [r7 :128]
   1465c:	bl	11fa8 <memset@plt>
   14660:	vld1.64	{d16-d17}, [sl :128]
   14664:	mov	r0, r4
   14668:	mov	r1, #0
   1466c:	mov	r2, #424	; 0x1a8
   14670:	str	r8, [r5, #208]	; 0xd0
   14674:	vadd.i64	q8, q8, q4
   14678:	vst1.64	{d16-d17}, [sl :128]
   1467c:	bl	11fa8 <memset@plt>
   14680:	str	r8, [r4, #412]	; 0x19c
   14684:	bl	13288 <if_statement_only@@Base>
   14688:	mov	r0, r6
   1468c:	bl	11f0c <puts@plt>
   14690:	ldr	r2, [pc, #784]	; 149a8 <main@@Base+0x708>
   14694:	ldr	r0, [pc, #784]	; 149ac <main@@Base+0x70c>
   14698:	ldr	r1, [pc, #784]	; 149b0 <main@@Base+0x710>
   1469c:	add	r2, pc, r2
   146a0:	b	146c0 <main@@Base+0x420>
   146a4:	nop	{0}
   146a8:	nop	{0}
   146ac:	nop	{0}
   146b0:	andeq	r0, r0, r1
   146b4:	andeq	r0, r0, r0
   146b8:	andeq	r0, r0, r1
   146bc:	andeq	r0, r0, r0
   146c0:	add	r0, pc, r0
   146c4:	add	r1, pc, r1
   146c8:	bl	11e7c <printf@plt>
   146cc:	vld1.64	{d16-d17}, [r9 :128]
   146d0:	vld1.64	{d18-d19}, [r7 :128]
   146d4:	mov	r0, r5
   146d8:	mov	r1, #0
   146dc:	mov	r2, #236	; 0xec
   146e0:	vadd.i64	q8, q8, q4
   146e4:	vadd.i64	q9, q9, q4
   146e8:	vst1.64	{d16-d17}, [r9 :128]
   146ec:	vst1.64	{d18-d19}, [r7 :128]
   146f0:	bl	11fa8 <memset@plt>
   146f4:	vld1.64	{d16-d17}, [sl :128]
   146f8:	mov	r0, r4
   146fc:	mov	r1, #0
   14700:	mov	r2, #424	; 0x1a8
   14704:	str	r8, [r5, #208]	; 0xd0
   14708:	vadd.i64	q8, q8, q4
   1470c:	vst1.64	{d16-d17}, [sl :128]
   14710:	bl	11fa8 <memset@plt>
   14714:	str	r8, [r4, #412]	; 0x19c
   14718:	bl	134d8 <if_else_statements@@Base>
   1471c:	mov	r0, r6
   14720:	bl	11f0c <puts@plt>
   14724:	ldr	r2, [pc, #648]	; 149b4 <main@@Base+0x714>
   14728:	ldr	r0, [pc, #648]	; 149b8 <main@@Base+0x718>
   1472c:	ldr	r1, [pc, #648]	; 149bc <main@@Base+0x71c>
   14730:	add	r2, pc, r2
   14734:	add	r0, pc, r0
   14738:	add	r1, pc, r1
   1473c:	bl	11e7c <printf@plt>
   14740:	vld1.64	{d16-d17}, [r9 :128]
   14744:	vld1.64	{d18-d19}, [r7 :128]
   14748:	mov	r0, r5
   1474c:	mov	r1, #0
   14750:	mov	r2, #236	; 0xec
   14754:	vadd.i64	q8, q8, q4
   14758:	vadd.i64	q9, q9, q4
   1475c:	vst1.64	{d16-d17}, [r9 :128]
   14760:	vst1.64	{d18-d19}, [r7 :128]
   14764:	bl	11fa8 <memset@plt>
   14768:	vld1.64	{d16-d17}, [sl :128]
   1476c:	mov	r0, r4
   14770:	mov	r1, #0
   14774:	mov	r2, #424	; 0x1a8
   14778:	str	r8, [r5, #208]	; 0xd0
   1477c:	vadd.i64	q8, q8, q4
   14780:	vst1.64	{d16-d17}, [sl :128]
   14784:	bl	11fa8 <memset@plt>
   14788:	str	r8, [r4, #412]	; 0x19c
   1478c:	bl	13c58 <if_statement_inside_if_statement@@Base>
   14790:	mov	r0, r6
   14794:	bl	11f0c <puts@plt>
   14798:	ldr	r2, [pc, #544]	; 149c0 <main@@Base+0x720>
   1479c:	ldr	r0, [pc, #544]	; 149c4 <main@@Base+0x724>
   147a0:	ldr	r1, [pc, #544]	; 149c8 <main@@Base+0x728>
   147a4:	add	r2, pc, r2
   147a8:	add	r0, pc, r0
   147ac:	add	r1, pc, r1
   147b0:	bl	11e7c <printf@plt>
   147b4:	vld1.64	{d16-d17}, [r9 :128]
   147b8:	vld1.64	{d18-d19}, [r7 :128]
   147bc:	mov	r0, r5
   147c0:	mov	r1, #0
   147c4:	mov	r2, #236	; 0xec
   147c8:	vadd.i64	q8, q8, q4
   147cc:	vadd.i64	q9, q9, q4
   147d0:	vst1.64	{d16-d17}, [r9 :128]
   147d4:	vst1.64	{d18-d19}, [r7 :128]
   147d8:	bl	11fa8 <memset@plt>
   147dc:	vld1.64	{d16-d17}, [sl :128]
   147e0:	mov	r0, r4
   147e4:	mov	r1, #0
   147e8:	mov	r2, #424	; 0x1a8
   147ec:	str	r8, [r5, #208]	; 0xd0
   147f0:	vadd.i64	q8, q8, q4
   147f4:	vst1.64	{d16-d17}, [sl :128]
   147f8:	bl	11fa8 <memset@plt>
   147fc:	str	r8, [r4, #412]	; 0x19c
   14800:	bl	13f6c <if_statement_inside_else_statement@@Base>
   14804:	mov	r0, r6
   14808:	bl	11f0c <puts@plt>
   1480c:	ldr	r2, [pc, #440]	; 149cc <main@@Base+0x72c>
   14810:	ldr	r0, [pc, #440]	; 149d0 <main@@Base+0x730>
   14814:	ldr	r1, [pc, #440]	; 149d4 <main@@Base+0x734>
   14818:	add	r2, pc, r2
   1481c:	add	r0, pc, r0
   14820:	add	r1, pc, r1
   14824:	bl	11e7c <printf@plt>
   14828:	vld1.64	{d16-d17}, [r9 :128]
   1482c:	vld1.64	{d18-d19}, [r7 :128]
   14830:	mov	r0, r5
   14834:	mov	r1, #0
   14838:	mov	r2, #236	; 0xec
   1483c:	vadd.i64	q8, q8, q4
   14840:	vadd.i64	q9, q9, q4
   14844:	vst1.64	{d16-d17}, [r9 :128]
   14848:	vst1.64	{d18-d19}, [r7 :128]
   1484c:	bl	11fa8 <memset@plt>
   14850:	vld1.64	{d16-d17}, [sl :128]
   14854:	mov	r0, r4
   14858:	mov	r1, #0
   1485c:	mov	r2, #424	; 0x1a8
   14860:	str	r8, [r5, #208]	; 0xd0
   14864:	vadd.i64	q8, q8, q4
   14868:	vst1.64	{d16-d17}, [sl :128]
   1486c:	bl	11fa8 <memset@plt>
   14870:	str	r8, [r4, #412]	; 0x19c
   14874:	bl	13a18 <body_with_one_return@@Base>
   14878:	mov	r0, r6
   1487c:	bl	11f0c <puts@plt>
   14880:	ldr	r2, [pc, #336]	; 149d8 <main@@Base+0x738>
   14884:	ldr	r0, [pc, #336]	; 149dc <main@@Base+0x73c>
   14888:	ldr	r1, [pc, #336]	; 149e0 <main@@Base+0x740>
   1488c:	add	r2, pc, r2
   14890:	add	r0, pc, r0
   14894:	add	r1, pc, r1
   14898:	bl	11e7c <printf@plt>
   1489c:	vld1.64	{d16-d17}, [r9 :128]
   148a0:	mov	r0, r5
   148a4:	mov	r1, #0
   148a8:	mov	r2, #236	; 0xec
   148ac:	vadd.i64	q8, q8, q4
   148b0:	vst1.64	{d16-d17}, [r9 :128]
   148b4:	vld1.64	{d16-d17}, [r7 :128]
   148b8:	vadd.i64	q8, q8, q4
   148bc:	vst1.64	{d16-d17}, [r7 :128]
   148c0:	bl	11fa8 <memset@plt>
   148c4:	vld1.64	{d16-d17}, [sl :128]
   148c8:	mov	r0, r4
   148cc:	mov	r1, #0
   148d0:	mov	r2, #424	; 0x1a8
   148d4:	str	r8, [r5, #208]	; 0xd0
   148d8:	vadd.i64	q8, q8, q4
   148dc:	vst1.64	{d16-d17}, [sl :128]
   148e0:	bl	11fa8 <memset@plt>
   148e4:	str	r8, [r4, #412]	; 0x19c
   148e8:	bl	13748 <body_with_two_returns@@Base>
   148ec:	mov	r0, r6
   148f0:	bl	11f0c <puts@plt>
   148f4:	ldr	r0, [pc, #232]	; 149e4 <main@@Base+0x744>
   148f8:	add	r0, pc, r0
   148fc:	bl	11f0c <puts@plt>
   14900:	ldr	r0, [pc, #224]	; 149e8 <main@@Base+0x748>
   14904:	add	r0, pc, r0
   14908:	bl	11f0c <puts@plt>
   1490c:	ldr	r0, [pc, #216]	; 149ec <main@@Base+0x74c>
   14910:	add	r0, pc, r0
   14914:	bl	11f0c <puts@plt>
   14918:	mov	r0, #0
   1491c:	vpop	{d8-d9}
   14920:	add	sp, sp, #4
   14924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14928:	andeq	r9, r1, r8, lsr #5
   1492c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14930:	andeq	r6, r0, r8, ror #24
   14934:	andeq	r6, r0, r0, ror #19
   14938:	ldrdeq	r6, [r0], -r7
   1493c:	andeq	r6, r0, fp, asr #19
   14940:	ldrdeq	r6, [r0], -r9
   14944:	muleq	r0, r3, sl
   14948:	andeq	r8, r1, ip, lsr lr
   1494c:			; <UNDEFINED> instruction: 0x00018eb8
   14950:	andeq	r8, r1, r8, asr #26
   14954:	andeq	r8, r1, r8, ror #28
   14958:	andeq	r8, r1, r4, lsl #26
   1495c:	andeq	r6, r0, fp, ror #22
   14960:	andeq	r6, r0, r9, lsl #20
   14964:	andeq	r6, r0, pc, lsl r9
   14968:	andeq	r6, r0, sp, lsr #18
   1496c:	andeq	r6, r0, lr, lsl sl
   14970:	andeq	r6, r0, fp, lsr #17
   14974:			; <UNDEFINED> instruction: 0x000068b9
   14978:	andeq	r6, r0, r1, lsl #19
   1497c:	andeq	r6, r0, r7, lsr r8
   14980:	andeq	r6, r0, r5, asr #16
   14984:	andeq	r6, r0, lr, asr #17
   14988:	andeq	r6, r0, r3, asr #15
   1498c:	ldrdeq	r6, [r0], -r1
   14990:	andeq	r6, r0, lr, ror r8
   14994:	andeq	r6, r0, pc, asr #14
   14998:	andeq	r6, r0, sp, asr r7
   1499c:	andeq	r6, r0, r6, ror r8
   149a0:	ldrdeq	r6, [r0], -fp
   149a4:	andeq	r6, r0, r9, ror #13
   149a8:	andeq	r6, r0, r4, lsl r8
   149ac:	andeq	r6, r0, r7, asr #12
   149b0:	andeq	r6, r0, r5, asr r6
   149b4:			; <UNDEFINED> instruction: 0x000067be
   149b8:	ldrdeq	r6, [r0], -r3
   149bc:	andeq	r6, r0, r1, ror #11
   149c0:	andeq	r6, r0, fp, ror #14
   149c4:	andeq	r6, r0, pc, asr r5
   149c8:	andeq	r6, r0, sp, ror #10
   149cc:	andeq	r6, r0, r1, asr #13
   149d0:	andeq	r6, r0, fp, ror #9
   149d4:	strdeq	r6, [r0], -r9
   149d8:	andeq	r6, r0, r7, lsr r6
   149dc:	andeq	r6, r0, r7, ror r4
   149e0:	andeq	r6, r0, r5, lsl #9
   149e4:	andeq	r6, r0, r8, asr #12
   149e8:	andeq	r6, r0, fp, asr #12
   149ec:	andeq	r6, r0, r8, asr #12
   149f0:	push	{r4, r5, r6, lr}
   149f4:	sub	sp, sp, #8
   149f8:	ldr	r0, [pc, #112]	; 14a70 <main@@Base+0x7d0>
   149fc:	ldr	r1, [pc, #112]	; 14a74 <main@@Base+0x7d4>
   14a00:	movw	r2, #18153	; 0x46e9
   14a04:	movt	r2, #26806	; 0x68b6
   14a08:	add	r0, pc, r0
   14a0c:	add	r1, pc, r1
   14a10:	bl	17860 <read_boolean_unary_expression@@Base+0x3f4>
   14a14:	ldr	r0, [pc, #92]	; 14a78 <main@@Base+0x7d8>
   14a18:	ldr	r6, [pc, #92]	; 14a7c <main@@Base+0x7dc>
   14a1c:	mov	r5, #0
   14a20:	add	r0, pc, r0
   14a24:	add	r6, pc, r6
   14a28:	add	r4, r0, #4
   14a2c:	mov	r3, r6
   14a30:	ldr	r0, [r3, r5]!
   14a34:	ldr	r1, [r3, #16]
   14a38:	str	r1, [sp]
   14a3c:	ldmib	r3, {r1, r2}
   14a40:	ldrb	r3, [r3, #12]
   14a44:	bl	17f80 <read_boolean_unary_expression@@Base+0xb14>
   14a48:	ldrd	r0, [r4, #-4]
   14a4c:	bl	18834 <read_boolean_unary_expression@@Base+0x13c8>
   14a50:	add	r5, r5, #20
   14a54:	add	r4, r4, #8
   14a58:	cmp	r5, #360	; 0x168
   14a5c:	bne	14a2c <main@@Base+0x78c>
   14a60:	bl	18fbc <read_boolean_unary_expression@@Base+0x1b50>
   14a64:	add	sp, sp, #8
   14a68:	pop	{r4, r5, r6, lr}
   14a6c:	b	19d28 <read_boolean_unary_expression@@Base+0x28bc>
   14a70:	andeq	r6, r0, sp, lsl r3
   14a74:	muleq	r0, r6, r3
   14a78:	andeq	r7, r1, r8, ror lr
   14a7c:	andeq	r7, r1, r4, lsl #26
   14a80:	push	{fp, lr}
   14a84:	bl	149f0 <main@@Base+0x750>
   14a88:	ldr	r0, [pc, #564]	; 14cc4 <main@@Base+0xa24>
   14a8c:	mov	r1, #0
   14a90:	mov	r2, #152	; 0x98
   14a94:	add	r0, pc, r0
   14a98:	bl	11fa8 <memset@plt>
   14a9c:	ldr	r0, [pc, #548]	; 14cc8 <main@@Base+0xa28>
   14aa0:	vmov.i32	q8, #0	; 0x00000000
   14aa4:	mov	ip, #80	; 0x50
   14aa8:	add	r0, pc, r0
   14aac:	vst1.64	{d16-d17}, [r0 :128]
   14ab0:	ldr	r0, [pc, #532]	; 14ccc <main@@Base+0xa2c>
   14ab4:	add	r0, pc, r0
   14ab8:	add	r1, r0, #16
   14abc:	vst1.64	{d16-d17}, [r1 :128]
   14ac0:	add	r1, r0, #32
   14ac4:	vst1.64	{d16-d17}, [r1 :128]
   14ac8:	add	r1, r0, #48	; 0x30
   14acc:	vst1.64	{d16-d17}, [r1 :128]
   14ad0:	add	r1, r0, #64	; 0x40
   14ad4:	vst1.64	{d16-d17}, [r1 :128]
   14ad8:	ldr	r1, [pc, #496]	; 14cd0 <main@@Base+0xa30>
   14adc:	add	r1, pc, r1
   14ae0:	vst1.64	{d16-d17}, [r1 :128]
   14ae4:	ldr	r1, [pc, #488]	; 14cd4 <main@@Base+0xa34>
   14ae8:	add	r1, pc, r1
   14aec:	vst1.64	{d16-d17}, [r1 :128]
   14af0:	ldr	lr, [pc, #480]	; 14cd8 <main@@Base+0xa38>
   14af4:	add	lr, pc, lr
   14af8:	add	r1, lr, #16
   14afc:	vst1.64	{d16-d17}, [r1 :128]
   14b00:	ldr	r3, [pc, #468]	; 14cdc <main@@Base+0xa3c>
   14b04:	add	r3, pc, r3
   14b08:	add	r1, r3, #16
   14b0c:	vst1.64	{d16-d17}, [r1 :128]
   14b10:	ldr	r1, [pc, #456]	; 14ce0 <main@@Base+0xa40>
   14b14:	vst1.64	{d16-d17}, [r0 :128], ip
   14b18:	vst1.64	{d16-d17}, [r0 :128]
   14b1c:	mov	r0, #48	; 0x30
   14b20:	add	r1, pc, r1
   14b24:	add	r2, r1, #16
   14b28:	vst1.64	{d16-d17}, [r2 :128]
   14b2c:	add	r2, r1, #32
   14b30:	vst1.64	{d16-d17}, [r1 :128], r0
   14b34:	vst1.64	{d16-d17}, [r2 :128]
   14b38:	mov	r2, #32
   14b3c:	vst1.64	{d16-d17}, [r1 :128]
   14b40:	vst1.64	{d16-d17}, [lr :128], r2
   14b44:	vst1.64	{d16-d17}, [r3 :128], r2
   14b48:	vst1.64	{d16-d17}, [lr :128]
   14b4c:	vst1.64	{d16-d17}, [r3 :128]
   14b50:	ldr	r1, [pc, #396]	; 14ce4 <main@@Base+0xa44>
   14b54:	add	r1, pc, r1
   14b58:	add	r3, r1, #16
   14b5c:	vst1.64	{d16-d17}, [r1 :128], r2
   14b60:	vst1.64	{d16-d17}, [r1 :128]
   14b64:	vst1.64	{d16-d17}, [r3 :128]
   14b68:	ldr	r1, [pc, #376]	; 14ce8 <main@@Base+0xa48>
   14b6c:	add	r1, pc, r1
   14b70:	add	r2, r1, #16
   14b74:	vst1.64	{d16-d17}, [r2 :128]
   14b78:	add	r2, r1, #32
   14b7c:	vst1.64	{d16-d17}, [r2 :128]
   14b80:	add	r2, r1, #48	; 0x30
   14b84:	vst1.64	{d16-d17}, [r2 :128]
   14b88:	add	r2, r1, #64	; 0x40
   14b8c:	vst1.64	{d16-d17}, [r1 :128], ip
   14b90:	vst1.64	{d16-d17}, [r2 :128]
   14b94:	vst1.64	{d16-d17}, [r1 :128]
   14b98:	ldr	r1, [pc, #332]	; 14cec <main@@Base+0xa4c>
   14b9c:	add	r1, pc, r1
   14ba0:	mov	r2, r1
   14ba4:	vst1.64	{d16-d17}, [r2 :128], ip
   14ba8:	vst1.64	{d16-d17}, [r2 :128]
   14bac:	add	r2, r1, #16
   14bb0:	vst1.64	{d16-d17}, [r2 :128]
   14bb4:	add	r2, r1, #32
   14bb8:	vst1.64	{d16-d17}, [r2 :128]
   14bbc:	add	r2, r1, #48	; 0x30
   14bc0:	add	r1, r1, #64	; 0x40
   14bc4:	vst1.64	{d16-d17}, [r2 :128]
   14bc8:	vst1.64	{d16-d17}, [r1 :128]
   14bcc:	ldr	r1, [pc, #284]	; 14cf0 <main@@Base+0xa50>
   14bd0:	add	r1, pc, r1
   14bd4:	add	r2, r1, #16
   14bd8:	vst1.64	{d16-d17}, [r2 :128]
   14bdc:	add	r2, r1, #32
   14be0:	vst1.64	{d16-d17}, [r1 :128], r0
   14be4:	vst1.64	{d16-d17}, [r2 :128]
   14be8:	vst1.64	{d16-d17}, [r1 :128]
   14bec:	ldr	r1, [pc, #256]	; 14cf4 <main@@Base+0xa54>
   14bf0:	add	r1, pc, r1
   14bf4:	mov	r2, r1
   14bf8:	vst1.64	{d16-d17}, [r2 :128], r0
   14bfc:	vst1.64	{d16-d17}, [r2 :128]
   14c00:	add	r2, r1, #16
   14c04:	add	r1, r1, #32
   14c08:	vst1.64	{d16-d17}, [r2 :128]
   14c0c:	vst1.64	{d16-d17}, [r1 :128]
   14c10:	ldr	r1, [pc, #224]	; 14cf8 <main@@Base+0xa58>
   14c14:	add	r1, pc, r1
   14c18:	add	r2, r1, #64	; 0x40
   14c1c:	vst1.64	{d16-d17}, [r2 :128]
   14c20:	add	r2, r1, #48	; 0x30
   14c24:	vst1.64	{d16-d17}, [r2 :128]
   14c28:	add	r2, r1, #32
   14c2c:	vst1.64	{d16-d17}, [r2 :128]
   14c30:	add	r2, r1, #16
   14c34:	vst1.64	{d16-d17}, [r1 :128], ip
   14c38:	vst1.64	{d16-d17}, [r1 :128]
   14c3c:	vst1.64	{d16-d17}, [r2 :128]
   14c40:	mov	r1, #64	; 0x40
   14c44:	ldr	r2, [pc, #176]	; 14cfc <main@@Base+0xa5c>
   14c48:	add	r2, pc, r2
   14c4c:	mov	r3, r2
   14c50:	vst1.64	{d16-d17}, [r3 :128], r1
   14c54:	add	r1, r2, #16
   14c58:	vst1.64	{d16-d17}, [r1 :128]
   14c5c:	add	r1, r2, #32
   14c60:	vst1.64	{d16-d17}, [r3 :128]
   14c64:	vst1.64	{d16-d17}, [r1 :128]
   14c68:	add	r1, r2, #48	; 0x30
   14c6c:	vst1.64	{d16-d17}, [r1 :128]
   14c70:	ldr	r1, [pc, #136]	; 14d00 <main@@Base+0xa60>
   14c74:	add	r1, pc, r1
   14c78:	add	r2, r1, #16
   14c7c:	vst1.64	{d16-d17}, [r2 :128]
   14c80:	add	r2, r1, #32
   14c84:	vst1.64	{d16-d17}, [r1 :128], r0
   14c88:	vst1.64	{d16-d17}, [r2 :128]
   14c8c:	vst1.64	{d16-d17}, [r1 :128]
   14c90:	ldr	r1, [pc, #108]	; 14d04 <main@@Base+0xa64>
   14c94:	add	r1, pc, r1
   14c98:	mov	r2, r1
   14c9c:	vst1.64	{d16-d17}, [r2 :128], r0
   14ca0:	add	r0, r1, #16
   14ca4:	vst1.64	{d16-d17}, [r0 :128]
   14ca8:	add	r0, r1, #32
   14cac:	vst1.64	{d16-d17}, [r2 :128]
   14cb0:	vst1.64	{d16-d17}, [r0 :128]
   14cb4:	ldr	r0, [pc, #76]	; 14d08 <main@@Base+0xa68>
   14cb8:	add	r0, pc, r0
   14cbc:	vst1.64	{d16-d17}, [r0 :128]
   14cc0:	pop	{fp, pc}
   14cc4:	andeq	r8, r1, r4, ror #12
   14cc8:	strdeq	r8, [r1], -r0
   14ccc:	strdeq	r8, [r1], -r4
   14cd0:	andeq	r8, r1, ip, lsr #14
   14cd4:	andeq	r8, r1, r0, lsr r7
   14cd8:	andeq	r8, r1, r4, lsr r7
   14cdc:	andeq	r8, r1, r4, asr r7
   14ce0:	andeq	r8, r1, r8, ror #14
   14ce4:	andeq	r8, r1, r4, ror r7
   14ce8:	andeq	r8, r1, ip, lsl #15
   14cec:			; <UNDEFINED> instruction: 0x000187bc
   14cf0:	andeq	r8, r1, r8, ror #15
   14cf4:	andeq	r8, r1, r8, lsl #16
   14cf8:	andeq	r8, r1, r4, lsr #16
   14cfc:	andeq	r8, r1, r0, asr r8
   14d00:	andeq	r8, r1, r4, ror r8
   14d04:	muleq	r1, r4, r8
   14d08:			; <UNDEFINED> instruction: 0x000188b0
   14d0c:	ldr	r0, [pc, #12]	; 14d20 <main@@Base+0xa80>
   14d10:	ldr	r1, [pc, #12]	; 14d24 <main@@Base+0xa84>
   14d14:	add	r0, pc, r0
   14d18:	add	r1, pc, r1
   14d1c:	b	1a1dc <__gcov_flush@@Base+0xb8>
   14d20:			; <UNDEFINED> instruction: 0xfffffcd4
   14d24:			; <UNDEFINED> instruction: 0xfffffd60
	...

00014d30 <init_token_int_type@@Base>:
   14d30:	ldr	r1, [pc, #56]	; 14d70 <init_token_int_type@@Base+0x40>
   14d34:	add	r2, pc, #36	; 0x24
   14d38:	vld1.64	{d16-d17}, [r2 :128]
   14d3c:	add	r1, pc, r1
   14d40:	vld1.64	{d18-d19}, [r1 :128]
   14d44:	vadd.i64	q8, q9, q8
   14d48:	vst1.64	{d16-d17}, [r1 :128]
   14d4c:	mov	r1, #0
   14d50:	str	r1, [r0]
   14d54:	bx	lr
   14d58:	nop	{0}
   14d5c:	nop	{0}
   14d60:	andeq	r0, r0, r1
   14d64:	andeq	r0, r0, r0
   14d68:	andeq	r0, r0, r1
   14d6c:	andeq	r0, r0, r0
   14d70:	andeq	r8, r1, ip, lsr r8
   14d74:	nop	{0}
   14d78:	nop	{0}
   14d7c:	nop	{0}

00014d80 <init_token_int_value@@Base>:
   14d80:	ldr	r2, [pc, #56]	; 14dc0 <init_token_int_value@@Base+0x40>
   14d84:	add	r3, pc, #36	; 0x24
   14d88:	vld1.64	{d16-d17}, [r3 :128]
   14d8c:	add	r2, pc, r2
   14d90:	vld1.64	{d18-d19}, [r2 :128]
   14d94:	vadd.i64	q8, q9, q8
   14d98:	vst1.64	{d16-d17}, [r2 :128]
   14d9c:	mov	r2, #1
   14da0:	str	r2, [r0]
   14da4:	str	r1, [r0, #4]
   14da8:	bx	lr
   14dac:	nop	{0}
   14db0:	andeq	r0, r0, r1
   14db4:	andeq	r0, r0, r0
   14db8:	andeq	r0, r0, r1
   14dbc:	andeq	r0, r0, r0
   14dc0:	strdeq	r8, [r1], -ip
   14dc4:	nop	{0}
   14dc8:	nop	{0}
   14dcc:	nop	{0}

00014dd0 <init_token_function@@Base>:
   14dd0:	ldr	r2, [pc, #56]	; 14e10 <init_token_function@@Base+0x40>
   14dd4:	add	r3, pc, #36	; 0x24
   14dd8:	vld1.64	{d16-d17}, [r3 :128]
   14ddc:	add	r2, pc, r2
   14de0:	vld1.64	{d18-d19}, [r2 :128]
   14de4:	vadd.i64	q8, q9, q8
   14de8:	vst1.64	{d16-d17}, [r2 :128]
   14dec:	mov	r2, #2
   14df0:	str	r2, [r0]
   14df4:	str	r1, [r0, #4]
   14df8:	bx	lr
   14dfc:	nop	{0}
   14e00:	andeq	r0, r0, r1
   14e04:	andeq	r0, r0, r0
   14e08:	andeq	r0, r0, r1
   14e0c:	andeq	r0, r0, r0
   14e10:			; <UNDEFINED> instruction: 0x000187bc
   14e14:	nop	{0}
   14e18:	nop	{0}
   14e1c:	nop	{0}

00014e20 <init_token_opar@@Base>:
   14e20:	ldr	r1, [pc, #56]	; 14e60 <init_token_opar@@Base+0x40>
   14e24:	add	r2, pc, #36	; 0x24
   14e28:	vld1.64	{d16-d17}, [r2 :128]
   14e2c:	add	r1, pc, r1
   14e30:	vld1.64	{d18-d19}, [r1 :128]
   14e34:	vadd.i64	q8, q9, q8
   14e38:	vst1.64	{d16-d17}, [r1 :128]
   14e3c:	mov	r1, #3
   14e40:	str	r1, [r0]
   14e44:	bx	lr
   14e48:	nop	{0}
   14e4c:	nop	{0}
   14e50:	andeq	r0, r0, r1
   14e54:	andeq	r0, r0, r0
   14e58:	andeq	r0, r0, r1
   14e5c:	andeq	r0, r0, r0
   14e60:	andeq	r8, r1, ip, ror r7
   14e64:	nop	{0}
   14e68:	nop	{0}
   14e6c:	nop	{0}

00014e70 <init_token_cpar@@Base>:
   14e70:	ldr	r1, [pc, #56]	; 14eb0 <init_token_cpar@@Base+0x40>
   14e74:	add	r2, pc, #36	; 0x24
   14e78:	vld1.64	{d16-d17}, [r2 :128]
   14e7c:	add	r1, pc, r1
   14e80:	vld1.64	{d18-d19}, [r1 :128]
   14e84:	vadd.i64	q8, q9, q8
   14e88:	vst1.64	{d16-d17}, [r1 :128]
   14e8c:	mov	r1, #4
   14e90:	str	r1, [r0]
   14e94:	bx	lr
   14e98:	nop	{0}
   14e9c:	nop	{0}
   14ea0:	andeq	r0, r0, r1
   14ea4:	andeq	r0, r0, r0
   14ea8:	andeq	r0, r0, r1
   14eac:	andeq	r0, r0, r0
   14eb0:	andeq	r8, r1, ip, lsr r7
   14eb4:	nop	{0}
   14eb8:	nop	{0}
   14ebc:	nop	{0}

00014ec0 <init_token_obra@@Base>:
   14ec0:	ldr	r1, [pc, #56]	; 14f00 <init_token_obra@@Base+0x40>
   14ec4:	add	r2, pc, #36	; 0x24
   14ec8:	vld1.64	{d16-d17}, [r2 :128]
   14ecc:	add	r1, pc, r1
   14ed0:	vld1.64	{d18-d19}, [r1 :128]
   14ed4:	vadd.i64	q8, q9, q8
   14ed8:	vst1.64	{d16-d17}, [r1 :128]
   14edc:	mov	r1, #5
   14ee0:	str	r1, [r0]
   14ee4:	bx	lr
   14ee8:	nop	{0}
   14eec:	nop	{0}
   14ef0:	andeq	r0, r0, r1
   14ef4:	andeq	r0, r0, r0
   14ef8:	andeq	r0, r0, r1
   14efc:	andeq	r0, r0, r0
   14f00:	strdeq	r8, [r1], -ip
   14f04:	nop	{0}
   14f08:	nop	{0}
   14f0c:	nop	{0}

00014f10 <init_token_cbra@@Base>:
   14f10:	ldr	r1, [pc, #56]	; 14f50 <init_token_cbra@@Base+0x40>
   14f14:	add	r2, pc, #36	; 0x24
   14f18:	vld1.64	{d16-d17}, [r2 :128]
   14f1c:	add	r1, pc, r1
   14f20:	vld1.64	{d18-d19}, [r1 :128]
   14f24:	vadd.i64	q8, q9, q8
   14f28:	vst1.64	{d16-d17}, [r1 :128]
   14f2c:	mov	r1, #6
   14f30:	str	r1, [r0]
   14f34:	bx	lr
   14f38:	nop	{0}
   14f3c:	nop	{0}
   14f40:	andeq	r0, r0, r1
   14f44:	andeq	r0, r0, r0
   14f48:	andeq	r0, r0, r1
   14f4c:	andeq	r0, r0, r0
   14f50:			; <UNDEFINED> instruction: 0x000186bc
   14f54:	nop	{0}
   14f58:	nop	{0}
   14f5c:	nop	{0}

00014f60 <init_token_return@@Base>:
   14f60:	ldr	r1, [pc, #56]	; 14fa0 <init_token_return@@Base+0x40>
   14f64:	add	r2, pc, #36	; 0x24
   14f68:	vld1.64	{d16-d17}, [r2 :128]
   14f6c:	add	r1, pc, r1
   14f70:	vld1.64	{d18-d19}, [r1 :128]
   14f74:	vadd.i64	q8, q9, q8
   14f78:	vst1.64	{d16-d17}, [r1 :128]
   14f7c:	mov	r1, #7
   14f80:	str	r1, [r0]
   14f84:	bx	lr
   14f88:	nop	{0}
   14f8c:	nop	{0}
   14f90:	andeq	r0, r0, r1
   14f94:	andeq	r0, r0, r0
   14f98:	andeq	r0, r0, r1
   14f9c:	andeq	r0, r0, r0
   14fa0:	andeq	r8, r1, ip, ror r6
   14fa4:	nop	{0}
   14fa8:	nop	{0}
   14fac:	nop	{0}

00014fb0 <init_token_semicolon@@Base>:
   14fb0:	ldr	r1, [pc, #56]	; 14ff0 <init_token_semicolon@@Base+0x40>
   14fb4:	add	r2, pc, #36	; 0x24
   14fb8:	vld1.64	{d16-d17}, [r2 :128]
   14fbc:	add	r1, pc, r1
   14fc0:	vld1.64	{d18-d19}, [r1 :128]
   14fc4:	vadd.i64	q8, q9, q8
   14fc8:	vst1.64	{d16-d17}, [r1 :128]
   14fcc:	mov	r1, #8
   14fd0:	str	r1, [r0]
   14fd4:	bx	lr
   14fd8:	nop	{0}
   14fdc:	nop	{0}
   14fe0:	andeq	r0, r0, r1
   14fe4:	andeq	r0, r0, r0
   14fe8:	andeq	r0, r0, r1
   14fec:	andeq	r0, r0, r0
   14ff0:	andeq	r8, r1, ip, lsr r6
   14ff4:	nop	{0}
   14ff8:	nop	{0}
   14ffc:	nop	{0}

00015000 <init_token_eof@@Base>:
   15000:	ldr	r1, [pc, #56]	; 15040 <init_token_eof@@Base+0x40>
   15004:	add	r2, pc, #36	; 0x24
   15008:	vld1.64	{d16-d17}, [r2 :128]
   1500c:	add	r1, pc, r1
   15010:	vld1.64	{d18-d19}, [r1 :128]
   15014:	vadd.i64	q8, q9, q8
   15018:	vst1.64	{d16-d17}, [r1 :128]
   1501c:	mov	r1, #9
   15020:	str	r1, [r0]
   15024:	bx	lr
   15028:	nop	{0}
   1502c:	nop	{0}
   15030:	andeq	r0, r0, r1
   15034:	andeq	r0, r0, r0
   15038:	andeq	r0, r0, r1
   1503c:	andeq	r0, r0, r0
   15040:	strdeq	r8, [r1], -ip
   15044:	nop	{0}
   15048:	nop	{0}
   1504c:	nop	{0}

00015050 <init_token_if@@Base>:
   15050:	ldr	r1, [pc, #56]	; 15090 <init_token_if@@Base+0x40>
   15054:	add	r2, pc, #36	; 0x24
   15058:	vld1.64	{d16-d17}, [r2 :128]
   1505c:	add	r1, pc, r1
   15060:	vld1.64	{d18-d19}, [r1 :128]
   15064:	vadd.i64	q8, q9, q8
   15068:	vst1.64	{d16-d17}, [r1 :128]
   1506c:	mov	r1, #10
   15070:	str	r1, [r0]
   15074:	bx	lr
   15078:	nop	{0}
   1507c:	nop	{0}
   15080:	andeq	r0, r0, r1
   15084:	andeq	r0, r0, r0
   15088:	andeq	r0, r0, r1
   1508c:	andeq	r0, r0, r0
   15090:			; <UNDEFINED> instruction: 0x000185bc
   15094:	nop	{0}
   15098:	nop	{0}
   1509c:	nop	{0}

000150a0 <init_token_else@@Base>:
   150a0:	ldr	r1, [pc, #56]	; 150e0 <init_token_else@@Base+0x40>
   150a4:	add	r2, pc, #36	; 0x24
   150a8:	vld1.64	{d16-d17}, [r2 :128]
   150ac:	add	r1, pc, r1
   150b0:	vld1.64	{d18-d19}, [r1 :128]
   150b4:	vadd.i64	q8, q9, q8
   150b8:	vst1.64	{d16-d17}, [r1 :128]
   150bc:	mov	r1, #11
   150c0:	str	r1, [r0]
   150c4:	bx	lr
   150c8:	nop	{0}
   150cc:	nop	{0}
   150d0:	andeq	r0, r0, r1
   150d4:	andeq	r0, r0, r0
   150d8:	andeq	r0, r0, r1
   150dc:	andeq	r0, r0, r0
   150e0:	andeq	r8, r1, ip, ror r5
   150e4:	nop	{0}
   150e8:	nop	{0}
   150ec:	nop	{0}

000150f0 <init_token_boolean_op@@Base>:
   150f0:	ldr	r2, [pc, #56]	; 15130 <init_token_boolean_op@@Base+0x40>
   150f4:	add	r3, pc, #36	; 0x24
   150f8:	vld1.64	{d16-d17}, [r3 :128]
   150fc:	add	r2, pc, r2
   15100:	vld1.64	{d18-d19}, [r2 :128]
   15104:	vadd.i64	q8, q9, q8
   15108:	vst1.64	{d16-d17}, [r2 :128]
   1510c:	mov	r2, #12
   15110:	str	r2, [r0]
   15114:	str	r1, [r0, #4]
   15118:	bx	lr
   1511c:	nop	{0}
   15120:	andeq	r0, r0, r1
   15124:	andeq	r0, r0, r0
   15128:	andeq	r0, r0, r1
   1512c:	andeq	r0, r0, r0
   15130:	andeq	r8, r1, ip, lsr r5
   15134:	nop	{0}
   15138:	nop	{0}
   1513c:	nop	{0}

00015140 <free_token_int_type@@Base>:
   15140:	ldr	r1, [pc, #40]	; 15170 <free_token_int_type@@Base+0x30>
   15144:	add	r2, pc, #20
   15148:	vld1.64	{d16-d17}, [r2 :128]
   1514c:	add	r1, pc, r1
   15150:	vld1.64	{d18-d19}, [r1 :128]
   15154:	vadd.i64	q8, q9, q8
   15158:	vst1.64	{d16-d17}, [r1 :128]
   1515c:	b	11e94 <free@plt>
   15160:	andeq	r0, r0, r1
   15164:	andeq	r0, r0, r0
   15168:	andeq	r0, r0, r1
   1516c:	andeq	r0, r0, r0
   15170:	strdeq	r8, [r1], -ip
   15174:	nop	{0}
   15178:	nop	{0}
   1517c:	nop	{0}

00015180 <free_token_int_value@@Base>:
   15180:	ldr	r1, [pc, #40]	; 151b0 <free_token_int_value@@Base+0x30>
   15184:	add	r2, pc, #20
   15188:	vld1.64	{d16-d17}, [r2 :128]
   1518c:	add	r1, pc, r1
   15190:	vld1.64	{d18-d19}, [r1 :128]
   15194:	vadd.i64	q8, q9, q8
   15198:	vst1.64	{d16-d17}, [r1 :128]
   1519c:	b	11e94 <free@plt>
   151a0:	andeq	r0, r0, r1
   151a4:	andeq	r0, r0, r0
   151a8:	andeq	r0, r0, r1
   151ac:	andeq	r0, r0, r0
   151b0:	andeq	r8, r1, ip, asr #9
   151b4:	nop	{0}
   151b8:	nop	{0}
   151bc:	nop	{0}

000151c0 <free_token_function@@Base>:
   151c0:	ldr	r1, [pc, #40]	; 151f0 <free_token_function@@Base+0x30>
   151c4:	add	r2, pc, #20
   151c8:	vld1.64	{d16-d17}, [r2 :128]
   151cc:	add	r1, pc, r1
   151d0:	vld1.64	{d18-d19}, [r1 :128]
   151d4:	vadd.i64	q8, q9, q8
   151d8:	vst1.64	{d16-d17}, [r1 :128]
   151dc:	b	11e94 <free@plt>
   151e0:	andeq	r0, r0, r1
   151e4:	andeq	r0, r0, r0
   151e8:	andeq	r0, r0, r1
   151ec:	andeq	r0, r0, r0
   151f0:	muleq	r1, ip, r4
   151f4:	nop	{0}
   151f8:	nop	{0}
   151fc:	nop	{0}

00015200 <free_token_opar@@Base>:
   15200:	ldr	r1, [pc, #40]	; 15230 <free_token_opar@@Base+0x30>
   15204:	add	r2, pc, #20
   15208:	vld1.64	{d16-d17}, [r2 :128]
   1520c:	add	r1, pc, r1
   15210:	vld1.64	{d18-d19}, [r1 :128]
   15214:	vadd.i64	q8, q9, q8
   15218:	vst1.64	{d16-d17}, [r1 :128]
   1521c:	b	11e94 <free@plt>
   15220:	andeq	r0, r0, r1
   15224:	andeq	r0, r0, r0
   15228:	andeq	r0, r0, r1
   1522c:	andeq	r0, r0, r0
   15230:	andeq	r8, r1, ip, ror #8
   15234:	nop	{0}
   15238:	nop	{0}
   1523c:	nop	{0}

00015240 <free_token_cpar@@Base>:
   15240:	ldr	r1, [pc, #40]	; 15270 <free_token_cpar@@Base+0x30>
   15244:	add	r2, pc, #20
   15248:	vld1.64	{d16-d17}, [r2 :128]
   1524c:	add	r1, pc, r1
   15250:	vld1.64	{d18-d19}, [r1 :128]
   15254:	vadd.i64	q8, q9, q8
   15258:	vst1.64	{d16-d17}, [r1 :128]
   1525c:	b	11e94 <free@plt>
   15260:	andeq	r0, r0, r1
   15264:	andeq	r0, r0, r0
   15268:	andeq	r0, r0, r1
   1526c:	andeq	r0, r0, r0
   15270:	andeq	r8, r1, ip, lsr r4
   15274:	nop	{0}
   15278:	nop	{0}
   1527c:	nop	{0}

00015280 <free_token_obra@@Base>:
   15280:	ldr	r1, [pc, #40]	; 152b0 <free_token_obra@@Base+0x30>
   15284:	add	r2, pc, #20
   15288:	vld1.64	{d16-d17}, [r2 :128]
   1528c:	add	r1, pc, r1
   15290:	vld1.64	{d18-d19}, [r1 :128]
   15294:	vadd.i64	q8, q9, q8
   15298:	vst1.64	{d16-d17}, [r1 :128]
   1529c:	b	11e94 <free@plt>
   152a0:	andeq	r0, r0, r1
   152a4:	andeq	r0, r0, r0
   152a8:	andeq	r0, r0, r1
   152ac:	andeq	r0, r0, r0
   152b0:	andeq	r8, r1, ip, lsl #8
   152b4:	nop	{0}
   152b8:	nop	{0}
   152bc:	nop	{0}

000152c0 <free_token_cbra@@Base>:
   152c0:	ldr	r1, [pc, #40]	; 152f0 <free_token_cbra@@Base+0x30>
   152c4:	add	r2, pc, #20
   152c8:	vld1.64	{d16-d17}, [r2 :128]
   152cc:	add	r1, pc, r1
   152d0:	vld1.64	{d18-d19}, [r1 :128]
   152d4:	vadd.i64	q8, q9, q8
   152d8:	vst1.64	{d16-d17}, [r1 :128]
   152dc:	b	11e94 <free@plt>
   152e0:	andeq	r0, r0, r1
   152e4:	andeq	r0, r0, r0
   152e8:	andeq	r0, r0, r1
   152ec:	andeq	r0, r0, r0
   152f0:	ldrdeq	r8, [r1], -ip
   152f4:	nop	{0}
   152f8:	nop	{0}
   152fc:	nop	{0}

00015300 <free_token_return@@Base>:
   15300:	ldr	r1, [pc, #40]	; 15330 <free_token_return@@Base+0x30>
   15304:	add	r2, pc, #20
   15308:	vld1.64	{d16-d17}, [r2 :128]
   1530c:	add	r1, pc, r1
   15310:	vld1.64	{d18-d19}, [r1 :128]
   15314:	vadd.i64	q8, q9, q8
   15318:	vst1.64	{d16-d17}, [r1 :128]
   1531c:	b	11e94 <free@plt>
   15320:	andeq	r0, r0, r1
   15324:	andeq	r0, r0, r0
   15328:	andeq	r0, r0, r1
   1532c:	andeq	r0, r0, r0
   15330:	andeq	r8, r1, ip, lsr #7
   15334:	nop	{0}
   15338:	nop	{0}
   1533c:	nop	{0}

00015340 <free_token_semicolon@@Base>:
   15340:	ldr	r1, [pc, #40]	; 15370 <free_token_semicolon@@Base+0x30>
   15344:	add	r2, pc, #20
   15348:	vld1.64	{d16-d17}, [r2 :128]
   1534c:	add	r1, pc, r1
   15350:	vld1.64	{d18-d19}, [r1 :128]
   15354:	vadd.i64	q8, q9, q8
   15358:	vst1.64	{d16-d17}, [r1 :128]
   1535c:	b	11e94 <free@plt>
   15360:	andeq	r0, r0, r1
   15364:	andeq	r0, r0, r0
   15368:	andeq	r0, r0, r1
   1536c:	andeq	r0, r0, r0
   15370:	andeq	r8, r1, ip, ror r3
   15374:	nop	{0}
   15378:	nop	{0}
   1537c:	nop	{0}

00015380 <free_token_eof@@Base>:
   15380:	ldr	r1, [pc, #40]	; 153b0 <free_token_eof@@Base+0x30>
   15384:	add	r2, pc, #20
   15388:	vld1.64	{d16-d17}, [r2 :128]
   1538c:	add	r1, pc, r1
   15390:	vld1.64	{d18-d19}, [r1 :128]
   15394:	vadd.i64	q8, q9, q8
   15398:	vst1.64	{d16-d17}, [r1 :128]
   1539c:	b	11e94 <free@plt>
   153a0:	andeq	r0, r0, r1
   153a4:	andeq	r0, r0, r0
   153a8:	andeq	r0, r0, r1
   153ac:	andeq	r0, r0, r0
   153b0:	andeq	r8, r1, ip, asr #6
   153b4:	nop	{0}
   153b8:	nop	{0}
   153bc:	nop	{0}

000153c0 <free_token_if@@Base>:
   153c0:	ldr	r1, [pc, #40]	; 153f0 <free_token_if@@Base+0x30>
   153c4:	add	r2, pc, #20
   153c8:	vld1.64	{d16-d17}, [r2 :128]
   153cc:	add	r1, pc, r1
   153d0:	vld1.64	{d18-d19}, [r1 :128]
   153d4:	vadd.i64	q8, q9, q8
   153d8:	vst1.64	{d16-d17}, [r1 :128]
   153dc:	b	11e94 <free@plt>
   153e0:	andeq	r0, r0, r1
   153e4:	andeq	r0, r0, r0
   153e8:	andeq	r0, r0, r1
   153ec:	andeq	r0, r0, r0
   153f0:	andeq	r8, r1, ip, lsl r3
   153f4:	nop	{0}
   153f8:	nop	{0}
   153fc:	nop	{0}

00015400 <free_token_else@@Base>:
   15400:	ldr	r1, [pc, #40]	; 15430 <free_token_else@@Base+0x30>
   15404:	add	r2, pc, #20
   15408:	vld1.64	{d16-d17}, [r2 :128]
   1540c:	add	r1, pc, r1
   15410:	vld1.64	{d18-d19}, [r1 :128]
   15414:	vadd.i64	q8, q9, q8
   15418:	vst1.64	{d16-d17}, [r1 :128]
   1541c:	b	11e94 <free@plt>
   15420:	andeq	r0, r0, r1
   15424:	andeq	r0, r0, r0
   15428:	andeq	r0, r0, r1
   1542c:	andeq	r0, r0, r0
   15430:	andeq	r8, r1, ip, ror #5

00015434 <free_token_boolean_op@@Base>:
   15434:	push	{r4, r5, fp, lr}
   15438:	add	fp, sp, #8
   1543c:	ldr	r5, [pc, #120]	; 154bc <free_token_boolean_op@@Base+0x88>
   15440:	mov	r4, r0
   15444:	ldr	r0, [pc, #116]	; 154c0 <free_token_boolean_op@@Base+0x8c>
   15448:	ldr	r0, [pc, r0]
   1544c:	add	r5, pc, r5
   15450:	adds	r0, r0, #1
   15454:	str	r0, [r5]
   15458:	ldr	r0, [r5, #4]
   1545c:	adc	r0, r0, #0
   15460:	str	r0, [r5, #4]
   15464:	ldr	r0, [r4, #4]
   15468:	cmp	r0, #0
   1546c:	beq	1548c <free_token_boolean_op@@Base+0x58>
   15470:	ldrd	r2, [r5, #8]
   15474:	adds	r2, r2, #1
   15478:	adc	r3, r3, #0
   1547c:	strd	r2, [r5, #8]
   15480:	bl	11e94 <free@plt>
   15484:	add	r0, r5, #24
   15488:	b	15490 <free_token_boolean_op@@Base+0x5c>
   1548c:	add	r0, r5, #16
   15490:	ldrd	r2, [r0]
   15494:	adds	r2, r2, #1
   15498:	adc	r3, r3, #0
   1549c:	strd	r2, [r0]
   154a0:	ldrd	r0, [r5, #32]
   154a4:	adds	r0, r0, #1
   154a8:	adc	r1, r1, #0
   154ac:	strd	r0, [r5, #32]
   154b0:	mov	r0, r4
   154b4:	pop	{r4, r5, fp, lr}
   154b8:	b	11e94 <free@plt>
   154bc:			; <UNDEFINED> instruction: 0x000182bc
   154c0:	andeq	r8, r1, r0, asr #5
   154c4:	push	{r4, r5, r6, lr}
   154c8:	sub	sp, sp, #8
   154cc:	ldr	r0, [pc, #112]	; 15544 <free_token_boolean_op@@Base+0x110>
   154d0:	ldr	r1, [pc, #112]	; 15548 <free_token_boolean_op@@Base+0x114>
   154d4:	movw	r2, #23366	; 0x5b46
   154d8:	movt	r2, #47030	; 0xb7b6
   154dc:	add	r0, pc, r0
   154e0:	add	r1, pc, r1
   154e4:	bl	17860 <read_boolean_unary_expression@@Base+0x3f4>
   154e8:	ldr	r0, [pc, #92]	; 1554c <free_token_boolean_op@@Base+0x118>
   154ec:	ldr	r6, [pc, #92]	; 15550 <free_token_boolean_op@@Base+0x11c>
   154f0:	mov	r5, #0
   154f4:	add	r0, pc, r0
   154f8:	add	r6, pc, r6
   154fc:	add	r4, r0, #4
   15500:	mov	r3, r6
   15504:	ldr	r0, [r3, r5]!
   15508:	ldr	r1, [r3, #16]
   1550c:	str	r1, [sp]
   15510:	ldmib	r3, {r1, r2}
   15514:	ldrb	r3, [r3, #12]
   15518:	bl	17f80 <read_boolean_unary_expression@@Base+0xb14>
   1551c:	ldrd	r0, [r4, #-4]
   15520:	bl	18834 <read_boolean_unary_expression@@Base+0x13c8>
   15524:	add	r5, r5, #20
   15528:	add	r4, r4, #8
   1552c:	cmp	r5, #520	; 0x208
   15530:	bne	15500 <free_token_boolean_op@@Base+0xcc>
   15534:	bl	18fbc <read_boolean_unary_expression@@Base+0x1b50>
   15538:	add	sp, sp, #8
   1553c:	pop	{r4, r5, r6, lr}
   15540:	b	19d28 <read_boolean_unary_expression@@Base+0x28bc>
   15544:	andeq	r5, r0, fp, lsl #21
   15548:	andeq	r5, r0, r2, asr #17
   1554c:	andeq	r7, r1, r4, asr #12
   15550:	andeq	r7, r1, r0, lsr r4
   15554:	push	{fp, lr}
   15558:	bl	154c4 <free_token_boolean_op@@Base+0x90>
   1555c:	ldr	r0, [pc, #336]	; 156b4 <free_token_boolean_op@@Base+0x280>
   15560:	vmov.i32	q8, #0	; 0x00000000
   15564:	mov	r1, #0
   15568:	add	r0, pc, r0
   1556c:	vst1.64	{d16-d17}, [r0 :128]
   15570:	ldr	r0, [pc, #320]	; 156b8 <free_token_boolean_op@@Base+0x284>
   15574:	add	r0, pc, r0
   15578:	vst1.64	{d16-d17}, [r0 :128]
   1557c:	ldr	r0, [pc, #312]	; 156bc <free_token_boolean_op@@Base+0x288>
   15580:	add	r0, pc, r0
   15584:	vst1.64	{d16-d17}, [r0 :128]
   15588:	ldr	r0, [pc, #304]	; 156c0 <free_token_boolean_op@@Base+0x28c>
   1558c:	add	r0, pc, r0
   15590:	vst1.64	{d16-d17}, [r0 :128]
   15594:	ldr	r0, [pc, #296]	; 156c4 <free_token_boolean_op@@Base+0x290>
   15598:	add	r0, pc, r0
   1559c:	vst1.64	{d16-d17}, [r0 :128]
   155a0:	ldr	r0, [pc, #288]	; 156c8 <free_token_boolean_op@@Base+0x294>
   155a4:	add	r0, pc, r0
   155a8:	vst1.64	{d16-d17}, [r0 :128]
   155ac:	ldr	r0, [pc, #280]	; 156cc <free_token_boolean_op@@Base+0x298>
   155b0:	add	r0, pc, r0
   155b4:	vst1.64	{d16-d17}, [r0 :128]
   155b8:	ldr	r0, [pc, #272]	; 156d0 <free_token_boolean_op@@Base+0x29c>
   155bc:	add	r0, pc, r0
   155c0:	vst1.64	{d16-d17}, [r0 :128]
   155c4:	ldr	r0, [pc, #264]	; 156d4 <free_token_boolean_op@@Base+0x2a0>
   155c8:	add	r0, pc, r0
   155cc:	vst1.64	{d16-d17}, [r0 :128]
   155d0:	ldr	r0, [pc, #256]	; 156d8 <free_token_boolean_op@@Base+0x2a4>
   155d4:	add	r0, pc, r0
   155d8:	vst1.64	{d16-d17}, [r0 :128]
   155dc:	ldr	r0, [pc, #248]	; 156dc <free_token_boolean_op@@Base+0x2a8>
   155e0:	add	r0, pc, r0
   155e4:	vst1.64	{d16-d17}, [r0 :128]
   155e8:	ldr	r0, [pc, #240]	; 156e0 <free_token_boolean_op@@Base+0x2ac>
   155ec:	add	r0, pc, r0
   155f0:	vst1.64	{d16-d17}, [r0 :128]
   155f4:	ldr	r0, [pc, #232]	; 156e4 <free_token_boolean_op@@Base+0x2b0>
   155f8:	add	r0, pc, r0
   155fc:	vst1.64	{d16-d17}, [r0 :128]
   15600:	ldr	r0, [pc, #224]	; 156e8 <free_token_boolean_op@@Base+0x2b4>
   15604:	add	r0, pc, r0
   15608:	vst1.64	{d16-d17}, [r0 :128]
   1560c:	ldr	r0, [pc, #216]	; 156ec <free_token_boolean_op@@Base+0x2b8>
   15610:	add	r0, pc, r0
   15614:	vst1.64	{d16-d17}, [r0 :128]
   15618:	ldr	r0, [pc, #208]	; 156f0 <free_token_boolean_op@@Base+0x2bc>
   1561c:	add	r0, pc, r0
   15620:	vst1.64	{d16-d17}, [r0 :128]
   15624:	ldr	r0, [pc, #200]	; 156f4 <free_token_boolean_op@@Base+0x2c0>
   15628:	add	r0, pc, r0
   1562c:	vst1.64	{d16-d17}, [r0 :128]
   15630:	ldr	r0, [pc, #192]	; 156f8 <free_token_boolean_op@@Base+0x2c4>
   15634:	add	r0, pc, r0
   15638:	vst1.64	{d16-d17}, [r0 :128]
   1563c:	ldr	r0, [pc, #184]	; 156fc <free_token_boolean_op@@Base+0x2c8>
   15640:	add	r0, pc, r0
   15644:	vst1.64	{d16-d17}, [r0 :128]
   15648:	ldr	r0, [pc, #176]	; 15700 <free_token_boolean_op@@Base+0x2cc>
   1564c:	add	r0, pc, r0
   15650:	vst1.64	{d16-d17}, [r0 :128]
   15654:	ldr	r0, [pc, #168]	; 15704 <free_token_boolean_op@@Base+0x2d0>
   15658:	add	r0, pc, r0
   1565c:	vst1.64	{d16-d17}, [r0 :128]
   15660:	ldr	r0, [pc, #160]	; 15708 <free_token_boolean_op@@Base+0x2d4>
   15664:	add	r0, pc, r0
   15668:	vst1.64	{d16-d17}, [r0 :128]
   1566c:	ldr	r0, [pc, #152]	; 1570c <free_token_boolean_op@@Base+0x2d8>
   15670:	add	r0, pc, r0
   15674:	vst1.64	{d16-d17}, [r0 :128]
   15678:	ldr	r0, [pc, #144]	; 15710 <free_token_boolean_op@@Base+0x2dc>
   1567c:	add	r0, pc, r0
   15680:	vst1.64	{d16-d17}, [r0 :128]
   15684:	ldr	r0, [pc, #136]	; 15714 <free_token_boolean_op@@Base+0x2e0>
   15688:	add	r0, pc, r0
   1568c:	vst1.64	{d16-d17}, [r0 :128]
   15690:	ldr	r0, [pc, #128]	; 15718 <free_token_boolean_op@@Base+0x2e4>
   15694:	add	r0, pc, r0
   15698:	add	r2, r0, #16
   1569c:	str	r1, [r0, #32]
   156a0:	vst1.64	{d16-d17}, [r2 :128]
   156a4:	mov	r2, #36	; 0x24
   156a8:	vst1.64	{d16-d17}, [r0 :128], r2
   156ac:	str	r1, [r0]
   156b0:	pop	{fp, pc}
   156b4:	andeq	r8, r1, r0, lsr #32
   156b8:	andeq	r8, r1, r4
   156bc:	andeq	r8, r1, r8, lsl r0
   156c0:	andeq	r8, r1, ip, lsl r0
   156c4:	andeq	r8, r1, r0, lsr #32
   156c8:	andeq	r8, r1, r4, lsr #32
   156cc:	andeq	r8, r1, r8, lsr #32
   156d0:	andeq	r8, r1, ip, lsr #32
   156d4:	andeq	r8, r1, r0, lsr r0
   156d8:	andeq	r8, r1, r4, lsr r0
   156dc:	andeq	r8, r1, r8, lsr r0
   156e0:	andeq	r8, r1, ip, lsr r0
   156e4:	andeq	r8, r1, r0, asr #32
   156e8:	andeq	r8, r1, r4, asr #32
   156ec:	andeq	r8, r1, r8, asr #32
   156f0:	andeq	r8, r1, ip, asr #32
   156f4:	andeq	r8, r1, r0, asr r0
   156f8:	andeq	r8, r1, r4, asr r0
   156fc:	andeq	r8, r1, r8, asr r0
   15700:	andeq	r8, r1, ip, asr r0
   15704:	andeq	r8, r1, r0, rrx
   15708:	andeq	r8, r1, r4, rrx
   1570c:	andeq	r8, r1, r8, rrx
   15710:	andeq	r8, r1, ip, rrx
   15714:	andeq	r8, r1, r0, ror r0
   15718:	andeq	r8, r1, r4, ror r0
   1571c:	ldr	r0, [pc, #12]	; 15730 <free_token_boolean_op@@Base+0x2fc>
   15720:	ldr	r1, [pc, #12]	; 15734 <free_token_boolean_op@@Base+0x300>
   15724:	add	r0, pc, r0
   15728:	add	r1, pc, r1
   1572c:	b	1a1dc <__gcov_flush@@Base+0xb8>
   15730:			; <UNDEFINED> instruction: 0xfffffd98
   15734:			; <UNDEFINED> instruction: 0xfffffe24
	...

00015740 <init_ast_base@@Base>:
   15740:	ldr	ip, [pc, #56]	; 15780 <init_ast_base@@Base+0x40>
   15744:	add	r3, pc, #36	; 0x24
   15748:	vld1.64	{d16-d17}, [r3 :128]
   1574c:	add	ip, pc, ip
   15750:	vld1.64	{d18-d19}, [ip :128]
   15754:	vadd.i64	q8, q9, q8
   15758:	vst1.64	{d16-d17}, [ip :128]
   1575c:	stm	r0, {r1, r2}
   15760:	bx	lr
   15764:	nop	{0}
   15768:	nop	{0}
   1576c:	nop	{0}
   15770:	andeq	r0, r0, r1
   15774:	andeq	r0, r0, r0
   15778:	andeq	r0, r0, r1
   1577c:	andeq	r0, r0, r0
   15780:	andeq	r7, r1, ip, ror #31
   15784:	nop	{0}
   15788:	nop	{0}
   1578c:	nop	{0}

00015790 <init_ast_base_single@@Base>:
   15790:	ldr	ip, [pc, #72]	; 157e0 <init_ast_base_single@@Base+0x50>
   15794:	ldr	r3, [pc, #72]	; 157e4 <init_ast_base_single@@Base+0x54>
   15798:	add	r2, pc, #48	; 0x30
   1579c:	vld1.64	{d16-d17}, [r2 :128]
   157a0:	mov	r2, #0
   157a4:	add	ip, pc, ip
   157a8:	add	r3, pc, r3
   157ac:	vld1.64	{d18-d19}, [r3 :128]
   157b0:	vld1.64	{d20-d21}, [ip :128]
   157b4:	vadd.i64	q9, q9, q8
   157b8:	vadd.i64	q8, q10, q8
   157bc:	vst1.64	{d18-d19}, [r3 :128]
   157c0:	vst1.64	{d16-d17}, [ip :128]
   157c4:	stm	r0, {r1, r2}
   157c8:	bx	lr
   157cc:	nop	{0}
   157d0:	andeq	r0, r0, r1
   157d4:	andeq	r0, r0, r0
   157d8:	andeq	r0, r0, r1
   157dc:	andeq	r0, r0, r0
   157e0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   157e4:	andeq	r7, r1, r0, lsr #31
   157e8:	nop	{0}
   157ec:	nop	{0}

000157f0 <init_node_id@@Base>:
   157f0:	ldr	ip, [pc, #104]	; 15860 <init_node_id@@Base+0x70>
   157f4:	add	r3, pc, #84	; 0x54
   157f8:	vld1.64	{d16-d17}, [r3 :128]
   157fc:	add	ip, pc, ip
   15800:	vld1.64	{d18-d19}, [ip :128]
   15804:	ldr	r3, [pc, #88]	; 15864 <init_node_id@@Base+0x74>
   15808:	ldr	r2, [pc, #88]	; 15868 <init_node_id@@Base+0x78>
   1580c:	add	r2, pc, r2
   15810:	add	r3, pc, r3
   15814:	vld1.64	{d20-d21}, [r2 :128]
   15818:	vld1.64	{d22-d23}, [r3 :128]
   1581c:	vadd.i64	q9, q9, q8
   15820:	vst1.64	{d18-d19}, [ip :128]
   15824:	vadd.i64	q10, q10, q8
   15828:	vadd.i64	q8, q11, q8
   1582c:	vst1.64	{d20-d21}, [r2 :128]
   15830:	mov	r2, #0
   15834:	vst1.64	{d16-d17}, [r3 :128]
   15838:	str	r2, [r0]
   1583c:	str	r2, [r0, #4]
   15840:	str	r1, [r0, #8]
   15844:	bx	lr
   15848:	nop	{0}
   1584c:	nop	{0}
   15850:	andeq	r0, r0, r1
   15854:	andeq	r0, r0, r0
   15858:	andeq	r0, r0, r1
   1585c:	andeq	r0, r0, r0
   15860:	andeq	r7, r1, ip, asr pc
   15864:	andeq	r7, r1, r8, lsr #30
   15868:	andeq	r7, r1, ip, lsr pc
   1586c:	nop	{0}

00015870 <init_node_int@@Base>:
   15870:	ldr	ip, [pc, #104]	; 158e0 <init_node_int@@Base+0x70>
   15874:	add	r3, pc, #84	; 0x54
   15878:	vld1.64	{d16-d17}, [r3 :128]
   1587c:	add	ip, pc, ip
   15880:	vld1.64	{d18-d19}, [ip :128]
   15884:	ldr	r3, [pc, #88]	; 158e4 <init_node_int@@Base+0x74>
   15888:	ldr	r2, [pc, #88]	; 158e8 <init_node_int@@Base+0x78>
   1588c:	add	r3, pc, r3
   15890:	add	r2, pc, r2
   15894:	vld1.64	{d20-d21}, [r2 :128]
   15898:	vld1.64	{d22-d23}, [r3 :128]
   1589c:	vadd.i64	q9, q9, q8
   158a0:	vst1.64	{d18-d19}, [ip :128]
   158a4:	vadd.i64	q10, q10, q8
   158a8:	vadd.i64	q8, q11, q8
   158ac:	vst1.64	{d20-d21}, [r2 :128]
   158b0:	vst1.64	{d16-d17}, [r3 :128]
   158b4:	mov	r3, #1
   158b8:	mov	r2, #0
   158bc:	str	r3, [r0]
   158c0:	str	r2, [r0, #4]
   158c4:	str	r1, [r0, #8]
   158c8:	bx	lr
   158cc:	nop	{0}
   158d0:	andeq	r0, r0, r1
   158d4:	andeq	r0, r0, r0
   158d8:	andeq	r0, r0, r1
   158dc:	andeq	r0, r0, r0
   158e0:	andeq	r7, r1, ip, ror #29
   158e4:	andeq	r7, r1, ip, lsr #29
   158e8:			; <UNDEFINED> instruction: 0x00017eb8
   158ec:	nop	{0}

000158f0 <init_node_function@@Base>:
   158f0:	push	{fp, lr}
   158f4:	mov	fp, sp
   158f8:	ldr	ip, [pc, #112]	; 15970 <init_node_function@@Base+0x80>
   158fc:	add	r3, pc, #92	; 0x5c
   15900:	vld1.64	{d16-d17}, [r3 :128]
   15904:	add	ip, pc, ip
   15908:	vld1.64	{d18-d19}, [ip :128]
   1590c:	ldr	lr, [pc, #96]	; 15974 <init_node_function@@Base+0x84>
   15910:	ldr	r3, [pc, #96]	; 15978 <init_node_function@@Base+0x88>
   15914:	add	r3, pc, r3
   15918:	add	lr, pc, lr
   1591c:	vld1.64	{d20-d21}, [r3 :128]
   15920:	vld1.64	{d22-d23}, [lr :128]
   15924:	vadd.i64	q9, q9, q8
   15928:	vst1.64	{d18-d19}, [ip :128]
   1592c:	mov	ip, #0
   15930:	vadd.i64	q10, q10, q8
   15934:	vadd.i64	q8, q11, q8
   15938:	vst1.64	{d20-d21}, [r3 :128]
   1593c:	mov	r3, #2
   15940:	vst1.64	{d16-d17}, [lr :128]
   15944:	stm	r0, {r3, ip}
   15948:	str	r1, [r0, #8]
   1594c:	str	r2, [r0, #12]
   15950:	pop	{fp, pc}
   15954:	nop	{0}
   15958:	nop	{0}
   1595c:	nop	{0}
   15960:	andeq	r0, r0, r1
   15964:	andeq	r0, r0, r0
   15968:	andeq	r0, r0, r1
   1596c:	andeq	r0, r0, r0
   15970:	andeq	r7, r1, r4, ror lr
   15974:	andeq	r7, r1, r0, lsr #28
   15978:	andeq	r7, r1, r4, lsr lr
   1597c:	nop	{0}

00015980 <init_node_return@@Base>:
   15980:	ldr	ip, [pc, #104]	; 159f0 <init_node_return@@Base+0x70>
   15984:	add	r3, pc, #84	; 0x54
   15988:	vld1.64	{d16-d17}, [r3 :128]
   1598c:	add	ip, pc, ip
   15990:	vld1.64	{d18-d19}, [ip :128]
   15994:	ldr	r3, [pc, #88]	; 159f4 <init_node_return@@Base+0x74>
   15998:	ldr	r2, [pc, #88]	; 159f8 <init_node_return@@Base+0x78>
   1599c:	add	r3, pc, r3
   159a0:	add	r2, pc, r2
   159a4:	vld1.64	{d20-d21}, [r2 :128]
   159a8:	vld1.64	{d22-d23}, [r3 :128]
   159ac:	vadd.i64	q9, q9, q8
   159b0:	vst1.64	{d18-d19}, [ip :128]
   159b4:	vadd.i64	q10, q10, q8
   159b8:	vadd.i64	q8, q11, q8
   159bc:	vst1.64	{d20-d21}, [r2 :128]
   159c0:	vst1.64	{d16-d17}, [r3 :128]
   159c4:	mov	r3, #3
   159c8:	mov	r2, #0
   159cc:	str	r3, [r0]
   159d0:	str	r2, [r0, #4]
   159d4:	str	r1, [r0, #8]
   159d8:	bx	lr
   159dc:	nop	{0}
   159e0:	andeq	r0, r0, r1
   159e4:	andeq	r0, r0, r0
   159e8:	andeq	r0, r0, r1
   159ec:	andeq	r0, r0, r0
   159f0:	strdeq	r7, [r1], -ip
   159f4:	muleq	r1, ip, sp
   159f8:	andeq	r7, r1, r8, lsr #27
   159fc:	nop	{0}

00015a00 <init_node_if@@Base>:
   15a00:	push	{r4, sl, fp, lr}
   15a04:	add	fp, sp, #8
   15a08:	ldr	ip, [pc, #96]	; 15a70 <init_node_if@@Base+0x70>
   15a0c:	add	lr, pc, #76	; 0x4c
   15a10:	vld1.64	{d16-d17}, [lr :128]
   15a14:	add	ip, pc, ip
   15a18:	vld1.64	{d18-d19}, [ip :128]
   15a1c:	ldr	lr, [pc, #80]	; 15a74 <init_node_if@@Base+0x74>
   15a20:	ldr	r4, [pc, #80]	; 15a78 <init_node_if@@Base+0x78>
   15a24:	add	r4, pc, r4
   15a28:	add	lr, pc, lr
   15a2c:	vld1.64	{d20-d21}, [r4 :128]
   15a30:	vld1.64	{d22-d23}, [lr :128]
   15a34:	vadd.i64	q9, q9, q8
   15a38:	vst1.64	{d18-d19}, [ip :128]
   15a3c:	mov	ip, #0
   15a40:	vadd.i64	q10, q10, q8
   15a44:	vadd.i64	q8, q11, q8
   15a48:	vst1.64	{d20-d21}, [r4 :128]
   15a4c:	mov	r4, #4
   15a50:	vst1.64	{d16-d17}, [lr :128]
   15a54:	stmia	r0!, {r4, ip}
   15a58:	stm	r0, {r1, r2, r3}
   15a5c:	pop	{r4, sl, fp, pc}
   15a60:	andeq	r0, r0, r1
   15a64:	andeq	r0, r0, r0
   15a68:	andeq	r0, r0, r1
   15a6c:	andeq	r0, r0, r0
   15a70:	andeq	r7, r1, r4, lsl #27
   15a74:	andeq	r7, r1, r0, lsl sp
   15a78:	andeq	r7, r1, r4, lsr #26
   15a7c:	nop	{0}

00015a80 <init_node_boolean_operator@@Base>:
   15a80:	push	{r4, sl, fp, lr}
   15a84:	add	fp, sp, #8
   15a88:	ldr	ip, [pc, #112]	; 15b00 <init_node_boolean_operator@@Base+0x80>
   15a8c:	add	lr, pc, #92	; 0x5c
   15a90:	vld1.64	{d16-d17}, [lr :128]
   15a94:	add	ip, pc, ip
   15a98:	vld1.64	{d18-d19}, [ip :128]
   15a9c:	ldr	lr, [pc, #96]	; 15b04 <init_node_boolean_operator@@Base+0x84>
   15aa0:	ldr	r4, [pc, #96]	; 15b08 <init_node_boolean_operator@@Base+0x88>
   15aa4:	add	r4, pc, r4
   15aa8:	add	lr, pc, lr
   15aac:	vld1.64	{d20-d21}, [r4 :128]
   15ab0:	vld1.64	{d22-d23}, [lr :128]
   15ab4:	vadd.i64	q9, q9, q8
   15ab8:	vst1.64	{d18-d19}, [ip :128]
   15abc:	mov	ip, #0
   15ac0:	vadd.i64	q10, q10, q8
   15ac4:	vadd.i64	q8, q11, q8
   15ac8:	vst1.64	{d20-d21}, [r4 :128]
   15acc:	mov	r4, #5
   15ad0:	vst1.64	{d16-d17}, [lr :128]
   15ad4:	stm	r0, {r4, ip}
   15ad8:	str	r2, [r0, #8]
   15adc:	str	r3, [r0, #12]
   15ae0:	str	r1, [r0, #16]
   15ae4:	pop	{r4, sl, fp, pc}
   15ae8:	nop	{0}
   15aec:	nop	{0}
   15af0:	andeq	r0, r0, r1
   15af4:	andeq	r0, r0, r0
   15af8:	andeq	r0, r0, r1
   15afc:	andeq	r0, r0, r0
   15b00:	andeq	r7, r1, r4, lsl sp
   15b04:	muleq	r1, r0, ip
   15b08:	andeq	r7, r1, r4, lsr #25

00015b0c <free_node@@Base>:
   15b0c:	push	{r4, r5, r6, sl, fp, lr}
   15b10:	add	fp, sp, #16
   15b14:	ldr	r5, [pc, #944]	; 15ecc <free_node@@Base+0x3c0>
   15b18:	mov	r4, r0
   15b1c:	ldr	r0, [pc, #940]	; 15ed0 <free_node@@Base+0x3c4>
   15b20:	ldr	r0, [pc, r0]
   15b24:	add	r5, pc, r5
   15b28:	adds	r0, r0, #1
   15b2c:	str	r0, [r5]
   15b30:	ldr	r0, [r5, #4]
   15b34:	adc	r0, r0, #0
   15b38:	str	r0, [r5, #4]
   15b3c:	ldr	r0, [r4]
   15b40:	cmp	r0, #5
   15b44:	bhi	15e94 <free_node@@Base+0x388>
   15b48:	add	r1, pc, #4
   15b4c:	ldr	r0, [r1, r0, lsl #2]
   15b50:	add	pc, r1, r0
   15b54:	andeq	r0, r0, r8, lsl r0
   15b58:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   15b5c:	muleq	r0, r4, r0
   15b60:	andeq	r0, r0, ip, asr #2
   15b64:	andeq	r0, r0, r4, ror r0
   15b68:	andeq	r0, r0, r8, lsr #3
   15b6c:	ldr	r6, [pc, #864]	; 15ed4 <free_node@@Base+0x3c8>
   15b70:	ldr	r0, [pc, #864]	; 15ed8 <free_node@@Base+0x3cc>
   15b74:	ldr	r0, [pc, r0]
   15b78:	add	r6, pc, r6
   15b7c:	ldrd	r2, [r5, #16]
   15b80:	adds	r0, r0, #1
   15b84:	str	r0, [r6]
   15b88:	ldr	r0, [r6, #4]
   15b8c:	adc	r0, r0, #0
   15b90:	adds	r2, r2, #1
   15b94:	adc	r3, r3, #0
   15b98:	str	r0, [r6, #4]
   15b9c:	strd	r2, [r5, #16]
   15ba0:	ldr	r0, [r4, #4]
   15ba4:	cmp	r0, #0
   15ba8:	beq	15d58 <free_node@@Base+0x24c>
   15bac:	ldrd	r2, [r6, #8]
   15bb0:	adds	r2, r2, #1
   15bb4:	adc	r3, r3, #0
   15bb8:	strd	r2, [r6, #8]
   15bbc:	bl	15b0c <free_node@@Base>
   15bc0:	add	r0, r6, #24
   15bc4:	b	15d5c <free_node@@Base+0x250>
   15bc8:	ldrd	r0, [r5, #48]	; 0x30
   15bcc:	adds	r0, r0, #1
   15bd0:	adc	r1, r1, #0
   15bd4:	strd	r0, [r5, #48]	; 0x30
   15bd8:	mov	r0, r4
   15bdc:	bl	1614c <free_node_if@@Base>
   15be0:	add	r0, r5, #96	; 0x60
   15be4:	b	15e70 <free_node@@Base+0x364>
   15be8:	ldr	r6, [pc, #756]	; 15ee4 <free_node@@Base+0x3d8>
   15bec:	ldr	r0, [pc, #756]	; 15ee8 <free_node@@Base+0x3dc>
   15bf0:	ldr	r0, [pc, r0]
   15bf4:	add	r6, pc, r6
   15bf8:	ldrd	r2, [r5, #32]
   15bfc:	adds	r0, r0, #1
   15c00:	str	r0, [r6]
   15c04:	ldr	r0, [r6, #4]
   15c08:	adc	r0, r0, #0
   15c0c:	adds	r2, r2, #1
   15c10:	adc	r3, r3, #0
   15c14:	str	r0, [r6, #4]
   15c18:	strd	r2, [r5, #32]
   15c1c:	ldr	r0, [r4, #4]
   15c20:	cmp	r0, #0
   15c24:	beq	15d8c <free_node@@Base+0x280>
   15c28:	ldrd	r2, [r6, #8]
   15c2c:	adds	r2, r2, #1
   15c30:	adc	r3, r3, #0
   15c34:	strd	r2, [r6, #8]
   15c38:	bl	15b0c <free_node@@Base>
   15c3c:	add	r0, r6, #24
   15c40:	b	15d90 <free_node@@Base+0x284>
   15c44:	ldr	r6, [pc, #656]	; 15edc <free_node@@Base+0x3d0>
   15c48:	ldr	r0, [pc, #656]	; 15ee0 <free_node@@Base+0x3d4>
   15c4c:	ldr	r0, [pc, r0]
   15c50:	add	r6, pc, r6
   15c54:	ldrd	r2, [r5, #24]
   15c58:	adds	r0, r0, #1
   15c5c:	str	r0, [r6]
   15c60:	ldr	r0, [r6, #4]
   15c64:	adc	r0, r0, #0
   15c68:	adds	r2, r2, #1
   15c6c:	adc	r3, r3, #0
   15c70:	str	r0, [r6, #4]
   15c74:	strd	r2, [r5, #24]
   15c78:	ldr	r0, [r4, #4]
   15c7c:	cmp	r0, #0
   15c80:	beq	15dc8 <free_node@@Base+0x2bc>
   15c84:	ldrd	r2, [r6, #8]
   15c88:	adds	r2, r2, #1
   15c8c:	adc	r3, r3, #0
   15c90:	strd	r2, [r6, #8]
   15c94:	bl	15b0c <free_node@@Base>
   15c98:	add	r0, r6, #24
   15c9c:	b	15dcc <free_node@@Base+0x2c0>
   15ca0:	ldr	r6, [pc, #580]	; 15eec <free_node@@Base+0x3e0>
   15ca4:	ldr	r0, [pc, #580]	; 15ef0 <free_node@@Base+0x3e4>
   15ca8:	ldr	r0, [pc, r0]
   15cac:	add	r6, pc, r6
   15cb0:	ldrd	r2, [r5, #40]	; 0x28
   15cb4:	adds	r0, r0, #1
   15cb8:	str	r0, [r6]
   15cbc:	ldr	r0, [r6, #4]
   15cc0:	adc	r0, r0, #0
   15cc4:	adds	r2, r2, #1
   15cc8:	adc	r3, r3, #0
   15ccc:	str	r0, [r6, #4]
   15cd0:	strd	r2, [r5, #40]	; 0x28
   15cd4:	ldr	r0, [r4, #4]
   15cd8:	cmp	r0, #0
   15cdc:	beq	15dfc <free_node@@Base+0x2f0>
   15ce0:	ldrd	r2, [r6, #8]
   15ce4:	adds	r2, r2, #1
   15ce8:	adc	r3, r3, #0
   15cec:	strd	r2, [r6, #8]
   15cf0:	bl	15b0c <free_node@@Base>
   15cf4:	add	r0, r6, #24
   15cf8:	b	15e00 <free_node@@Base+0x2f4>
   15cfc:	ldr	r6, [pc, #496]	; 15ef4 <free_node@@Base+0x3e8>
   15d00:	ldr	r0, [pc, #496]	; 15ef8 <free_node@@Base+0x3ec>
   15d04:	ldr	r0, [pc, r0]
   15d08:	add	r6, pc, r6
   15d0c:	ldrd	r2, [r5, #56]	; 0x38
   15d10:	adds	r0, r0, #1
   15d14:	str	r0, [r6]
   15d18:	ldr	r0, [r6, #4]
   15d1c:	adc	r0, r0, #0
   15d20:	adds	r2, r2, #1
   15d24:	adc	r3, r3, #0
   15d28:	str	r0, [r6, #4]
   15d2c:	strd	r2, [r5, #56]	; 0x38
   15d30:	ldr	r0, [r4, #4]
   15d34:	cmp	r0, #0
   15d38:	beq	15e30 <free_node@@Base+0x324>
   15d3c:	ldrd	r2, [r6, #8]
   15d40:	adds	r2, r2, #1
   15d44:	adc	r3, r3, #0
   15d48:	strd	r2, [r6, #8]
   15d4c:	bl	15b0c <free_node@@Base>
   15d50:	add	r0, r6, #24
   15d54:	b	15e34 <free_node@@Base+0x328>
   15d58:	add	r0, r6, #16
   15d5c:	ldrd	r2, [r0]
   15d60:	adds	r2, r2, #1
   15d64:	adc	r3, r3, #0
   15d68:	strd	r2, [r0]
   15d6c:	ldrd	r0, [r6, #32]
   15d70:	adds	r0, r0, #1
   15d74:	adc	r1, r1, #0
   15d78:	strd	r0, [r6, #32]
   15d7c:	mov	r0, r4
   15d80:	bl	11e94 <free@plt>
   15d84:	add	r0, r5, #64	; 0x40
   15d88:	b	15e70 <free_node@@Base+0x364>
   15d8c:	add	r0, r6, #16
   15d90:	ldrd	r2, [r0]
   15d94:	adds	r2, r2, #1
   15d98:	adc	r3, r3, #0
   15d9c:	strd	r2, [r0]
   15da0:	ldrd	r0, [r6, #32]
   15da4:	adds	r0, r0, #1
   15da8:	adc	r1, r1, #0
   15dac:	strd	r0, [r6, #32]
   15db0:	ldr	r0, [r4, #8]
   15db4:	bl	11e94 <free@plt>
   15db8:	mov	r0, r4
   15dbc:	bl	11e94 <free@plt>
   15dc0:	add	r0, r5, #80	; 0x50
   15dc4:	b	15e70 <free_node@@Base+0x364>
   15dc8:	add	r0, r6, #16
   15dcc:	ldrd	r2, [r0]
   15dd0:	adds	r2, r2, #1
   15dd4:	adc	r3, r3, #0
   15dd8:	strd	r2, [r0]
   15ddc:	ldrd	r0, [r6, #32]
   15de0:	adds	r0, r0, #1
   15de4:	adc	r1, r1, #0
   15de8:	strd	r0, [r6, #32]
   15dec:	mov	r0, r4
   15df0:	bl	11e94 <free@plt>
   15df4:	add	r0, r5, #72	; 0x48
   15df8:	b	15e70 <free_node@@Base+0x364>
   15dfc:	add	r0, r6, #16
   15e00:	ldrd	r2, [r0]
   15e04:	adds	r2, r2, #1
   15e08:	adc	r3, r3, #0
   15e0c:	strd	r2, [r0]
   15e10:	ldrd	r0, [r6, #32]
   15e14:	adds	r0, r0, #1
   15e18:	adc	r1, r1, #0
   15e1c:	strd	r0, [r6, #32]
   15e20:	mov	r0, r4
   15e24:	bl	11e94 <free@plt>
   15e28:	add	r0, r5, #88	; 0x58
   15e2c:	b	15e70 <free_node@@Base+0x364>
   15e30:	add	r0, r6, #16
   15e34:	ldrd	r2, [r0]
   15e38:	adds	r2, r2, #1
   15e3c:	adc	r3, r3, #0
   15e40:	strd	r2, [r0]
   15e44:	ldrd	r0, [r6, #32]
   15e48:	adds	r0, r0, #1
   15e4c:	adc	r1, r1, #0
   15e50:	strd	r0, [r6, #32]
   15e54:	ldr	r0, [r4, #8]
   15e58:	bl	15b0c <free_node@@Base>
   15e5c:	ldr	r0, [r4, #12]
   15e60:	bl	15b0c <free_node@@Base>
   15e64:	mov	r0, r4
   15e68:	bl	11e94 <free@plt>
   15e6c:	add	r0, r5, #104	; 0x68
   15e70:	ldrd	r2, [r0]
   15e74:	adds	r2, r2, #1
   15e78:	adc	r3, r3, #0
   15e7c:	strd	r2, [r0]
   15e80:	ldrd	r0, [r5, #112]	; 0x70
   15e84:	adds	r0, r0, #1
   15e88:	adc	r1, r1, #0
   15e8c:	strd	r0, [r5, #112]	; 0x70
   15e90:	pop	{r4, r5, r6, sl, fp, pc}
   15e94:	ldrd	r0, [r5, #8]
   15e98:	mov	r2, #1
   15e9c:	adds	r0, r0, #1
   15ea0:	adc	r1, r1, #0
   15ea4:	strd	r0, [r5, #8]
   15ea8:	mov	r1, #31
   15eac:	ldr	r0, [pc, #72]	; 15efc <free_node@@Base+0x3f0>
   15eb0:	ldr	r0, [pc, r0]
   15eb4:	ldr	r3, [r0]
   15eb8:	ldr	r0, [pc, #64]	; 15f00 <free_node@@Base+0x3f4>
   15ebc:	add	r0, pc, r0
   15ec0:	bl	11ee8 <fwrite@plt>
   15ec4:	mov	r0, #1
   15ec8:	bl	11f54 <exit@plt>
   15ecc:	muleq	r1, r4, ip
   15ed0:	muleq	r1, r8, ip
   15ed4:	andeq	r7, r1, r0, asr #25
   15ed8:	andeq	r7, r1, r4, asr #25
   15edc:	andeq	r7, r1, r8, lsl ip
   15ee0:	andeq	r7, r1, ip, lsl ip
   15ee4:	andeq	r7, r1, r4, lsr #25
   15ee8:	andeq	r7, r1, r8, lsr #25
   15eec:	andeq	r7, r1, ip, lsl ip
   15ef0:	andeq	r7, r1, r0, lsr #24
   15ef4:	andeq	r7, r1, r0, lsr #24
   15ef8:	andeq	r7, r1, r4, lsr #24
   15efc:	andeq	r7, r1, ip, lsl #4
   15f00:	andeq	r5, r0, sl, ror #5

00015f04 <free_node_id@@Base>:
   15f04:	push	{r4, r5, fp, lr}
   15f08:	add	fp, sp, #8
   15f0c:	ldr	r5, [pc, #120]	; 15f8c <free_node_id@@Base+0x88>
   15f10:	mov	r4, r0
   15f14:	ldr	r0, [pc, #116]	; 15f90 <free_node_id@@Base+0x8c>
   15f18:	ldr	r0, [pc, r0]
   15f1c:	add	r5, pc, r5
   15f20:	adds	r0, r0, #1
   15f24:	str	r0, [r5]
   15f28:	ldr	r0, [r5, #4]
   15f2c:	adc	r0, r0, #0
   15f30:	str	r0, [r5, #4]
   15f34:	ldr	r0, [r4, #4]
   15f38:	cmp	r0, #0
   15f3c:	beq	15f5c <free_node_id@@Base+0x58>
   15f40:	ldrd	r2, [r5, #8]
   15f44:	adds	r2, r2, #1
   15f48:	adc	r3, r3, #0
   15f4c:	strd	r2, [r5, #8]
   15f50:	bl	15b0c <free_node@@Base>
   15f54:	add	r0, r5, #24
   15f58:	b	15f60 <free_node_id@@Base+0x5c>
   15f5c:	add	r0, r5, #16
   15f60:	ldrd	r2, [r0]
   15f64:	adds	r2, r2, #1
   15f68:	adc	r3, r3, #0
   15f6c:	strd	r2, [r0]
   15f70:	ldrd	r0, [r5, #32]
   15f74:	adds	r0, r0, #1
   15f78:	adc	r1, r1, #0
   15f7c:	strd	r0, [r5, #32]
   15f80:	mov	r0, r4
   15f84:	pop	{r4, r5, fp, lr}
   15f88:	b	11e94 <free@plt>
   15f8c:	andeq	r7, r1, ip, lsl r9
   15f90:	andeq	r7, r1, r0, lsr #18

00015f94 <free_node_int@@Base>:
   15f94:	push	{r4, r5, fp, lr}
   15f98:	add	fp, sp, #8
   15f9c:	ldr	r5, [pc, #120]	; 1601c <free_node_int@@Base+0x88>
   15fa0:	mov	r4, r0
   15fa4:	ldr	r0, [pc, #116]	; 16020 <free_node_int@@Base+0x8c>
   15fa8:	ldr	r0, [pc, r0]
   15fac:	add	r5, pc, r5
   15fb0:	adds	r0, r0, #1
   15fb4:	str	r0, [r5]
   15fb8:	ldr	r0, [r5, #4]
   15fbc:	adc	r0, r0, #0
   15fc0:	str	r0, [r5, #4]
   15fc4:	ldr	r0, [r4, #4]
   15fc8:	cmp	r0, #0
   15fcc:	beq	15fec <free_node_int@@Base+0x58>
   15fd0:	ldrd	r2, [r5, #8]
   15fd4:	adds	r2, r2, #1
   15fd8:	adc	r3, r3, #0
   15fdc:	strd	r2, [r5, #8]
   15fe0:	bl	15b0c <free_node@@Base>
   15fe4:	add	r0, r5, #24
   15fe8:	b	15ff0 <free_node_int@@Base+0x5c>
   15fec:	add	r0, r5, #16
   15ff0:	ldrd	r2, [r0]
   15ff4:	adds	r2, r2, #1
   15ff8:	adc	r3, r3, #0
   15ffc:	strd	r2, [r0]
   16000:	ldrd	r0, [r5, #32]
   16004:	adds	r0, r0, #1
   16008:	adc	r1, r1, #0
   1600c:	strd	r0, [r5, #32]
   16010:	mov	r0, r4
   16014:	pop	{r4, r5, fp, lr}
   16018:	b	11e94 <free@plt>
   1601c:			; <UNDEFINED> instruction: 0x000178bc
   16020:	andeq	r7, r1, r0, asr #17

00016024 <free_node_function@@Base>:
   16024:	push	{r4, r5, fp, lr}
   16028:	add	fp, sp, #8
   1602c:	ldr	r5, [pc, #128]	; 160b4 <free_node_function@@Base+0x90>
   16030:	mov	r4, r0
   16034:	ldr	r0, [pc, #124]	; 160b8 <free_node_function@@Base+0x94>
   16038:	ldr	r0, [pc, r0]
   1603c:	add	r5, pc, r5
   16040:	adds	r0, r0, #1
   16044:	str	r0, [r5]
   16048:	ldr	r0, [r5, #4]
   1604c:	adc	r0, r0, #0
   16050:	str	r0, [r5, #4]
   16054:	ldr	r0, [r4, #4]
   16058:	cmp	r0, #0
   1605c:	beq	1607c <free_node_function@@Base+0x58>
   16060:	ldrd	r2, [r5, #8]
   16064:	adds	r2, r2, #1
   16068:	adc	r3, r3, #0
   1606c:	strd	r2, [r5, #8]
   16070:	bl	15b0c <free_node@@Base>
   16074:	add	r0, r5, #24
   16078:	b	16080 <free_node_function@@Base+0x5c>
   1607c:	add	r0, r5, #16
   16080:	ldrd	r2, [r0]
   16084:	adds	r2, r2, #1
   16088:	adc	r3, r3, #0
   1608c:	strd	r2, [r0]
   16090:	ldrd	r0, [r5, #32]
   16094:	adds	r0, r0, #1
   16098:	adc	r1, r1, #0
   1609c:	strd	r0, [r5, #32]
   160a0:	ldr	r0, [r4, #8]
   160a4:	bl	11e94 <free@plt>
   160a8:	mov	r0, r4
   160ac:	pop	{r4, r5, fp, lr}
   160b0:	b	11e94 <free@plt>
   160b4:	andeq	r7, r1, ip, asr r8
   160b8:	andeq	r7, r1, r0, ror #16

000160bc <free_node_return@@Base>:
   160bc:	push	{r4, r5, fp, lr}
   160c0:	add	fp, sp, #8
   160c4:	ldr	r5, [pc, #120]	; 16144 <free_node_return@@Base+0x88>
   160c8:	mov	r4, r0
   160cc:	ldr	r0, [pc, #116]	; 16148 <free_node_return@@Base+0x8c>
   160d0:	ldr	r0, [pc, r0]
   160d4:	add	r5, pc, r5
   160d8:	adds	r0, r0, #1
   160dc:	str	r0, [r5]
   160e0:	ldr	r0, [r5, #4]
   160e4:	adc	r0, r0, #0
   160e8:	str	r0, [r5, #4]
   160ec:	ldr	r0, [r4, #4]
   160f0:	cmp	r0, #0
   160f4:	beq	16114 <free_node_return@@Base+0x58>
   160f8:	ldrd	r2, [r5, #8]
   160fc:	adds	r2, r2, #1
   16100:	adc	r3, r3, #0
   16104:	strd	r2, [r5, #8]
   16108:	bl	15b0c <free_node@@Base>
   1610c:	add	r0, r5, #24
   16110:	b	16118 <free_node_return@@Base+0x5c>
   16114:	add	r0, r5, #16
   16118:	ldrd	r2, [r0]
   1611c:	adds	r2, r2, #1
   16120:	adc	r3, r3, #0
   16124:	strd	r2, [r0]
   16128:	ldrd	r0, [r5, #32]
   1612c:	adds	r0, r0, #1
   16130:	adc	r1, r1, #0
   16134:	strd	r0, [r5, #32]
   16138:	mov	r0, r4
   1613c:	pop	{r4, r5, fp, lr}
   16140:	b	11e94 <free@plt>
   16144:	strdeq	r7, [r1], -r4
   16148:	strdeq	r7, [r1], -r8

0001614c <free_node_if@@Base>:
   1614c:	push	{r4, r5, fp, lr}
   16150:	add	fp, sp, #8
   16154:	ldr	r5, [pc, #144]	; 161ec <free_node_if@@Base+0xa0>
   16158:	mov	r4, r0
   1615c:	ldr	r0, [pc, #140]	; 161f0 <free_node_if@@Base+0xa4>
   16160:	ldr	r0, [pc, r0]
   16164:	add	r5, pc, r5
   16168:	adds	r0, r0, #1
   1616c:	str	r0, [r5]
   16170:	ldr	r0, [r5, #4]
   16174:	adc	r0, r0, #0
   16178:	str	r0, [r5, #4]
   1617c:	ldr	r0, [r4, #4]
   16180:	cmp	r0, #0
   16184:	beq	161a4 <free_node_if@@Base+0x58>
   16188:	ldrd	r2, [r5, #8]
   1618c:	adds	r2, r2, #1
   16190:	adc	r3, r3, #0
   16194:	strd	r2, [r5, #8]
   16198:	bl	15b0c <free_node@@Base>
   1619c:	add	r0, r5, #24
   161a0:	b	161a8 <free_node_if@@Base+0x5c>
   161a4:	add	r0, r5, #16
   161a8:	ldrd	r2, [r0]
   161ac:	adds	r2, r2, #1
   161b0:	adc	r3, r3, #0
   161b4:	strd	r2, [r0]
   161b8:	ldrd	r0, [r5, #32]
   161bc:	adds	r0, r0, #1
   161c0:	adc	r1, r1, #0
   161c4:	strd	r0, [r5, #32]
   161c8:	ldr	r0, [r4, #8]
   161cc:	bl	15b0c <free_node@@Base>
   161d0:	ldr	r0, [r4, #12]
   161d4:	bl	15b0c <free_node@@Base>
   161d8:	ldr	r0, [r4, #16]
   161dc:	bl	15b0c <free_node@@Base>
   161e0:	mov	r0, r4
   161e4:	pop	{r4, r5, fp, lr}
   161e8:	b	11e94 <free@plt>
   161ec:	muleq	r1, r4, r7
   161f0:	muleq	r1, r8, r7

000161f4 <free_node_boolean_operator@@Base>:
   161f4:	push	{r4, r5, fp, lr}
   161f8:	add	fp, sp, #8
   161fc:	ldr	r5, [pc, #136]	; 1628c <free_node_boolean_operator@@Base+0x98>
   16200:	mov	r4, r0
   16204:	ldr	r0, [pc, #132]	; 16290 <free_node_boolean_operator@@Base+0x9c>
   16208:	ldr	r0, [pc, r0]
   1620c:	add	r5, pc, r5
   16210:	adds	r0, r0, #1
   16214:	str	r0, [r5]
   16218:	ldr	r0, [r5, #4]
   1621c:	adc	r0, r0, #0
   16220:	str	r0, [r5, #4]
   16224:	ldr	r0, [r4, #4]
   16228:	cmp	r0, #0
   1622c:	beq	1624c <free_node_boolean_operator@@Base+0x58>
   16230:	ldrd	r2, [r5, #8]
   16234:	adds	r2, r2, #1
   16238:	adc	r3, r3, #0
   1623c:	strd	r2, [r5, #8]
   16240:	bl	15b0c <free_node@@Base>
   16244:	add	r0, r5, #24
   16248:	b	16250 <free_node_boolean_operator@@Base+0x5c>
   1624c:	add	r0, r5, #16
   16250:	ldrd	r2, [r0]
   16254:	adds	r2, r2, #1
   16258:	adc	r3, r3, #0
   1625c:	strd	r2, [r0]
   16260:	ldrd	r0, [r5, #32]
   16264:	adds	r0, r0, #1
   16268:	adc	r1, r1, #0
   1626c:	strd	r0, [r5, #32]
   16270:	ldr	r0, [r4, #8]
   16274:	bl	15b0c <free_node@@Base>
   16278:	ldr	r0, [r4, #12]
   1627c:	bl	15b0c <free_node@@Base>
   16280:	mov	r0, r4
   16284:	pop	{r4, r5, fp, lr}
   16288:	b	11e94 <free@plt>
   1628c:	andeq	r7, r1, ip, lsl r7
   16290:	andeq	r7, r1, r0, lsr #14

00016294 <get_boolean_op_value@@Base>:
   16294:	push	{r4, r5, r6, sl, fp, lr}
   16298:	add	fp, sp, #16
   1629c:	ldr	r6, [pc, #720]	; 16574 <get_boolean_op_value@@Base+0x2e0>
   162a0:	ldr	r1, [pc, #720]	; 16578 <get_boolean_op_value@@Base+0x2e4>
   162a4:	ldr	r1, [pc, r1]
   162a8:	add	r6, pc, r6
   162ac:	adds	r1, r1, #1
   162b0:	str	r1, [r6]
   162b4:	ldr	r1, [r6, #4]
   162b8:	adc	r1, r1, #0
   162bc:	str	r1, [r6, #4]
   162c0:	mov	r1, #2
   162c4:	ldr	r4, [r0, #4]
   162c8:	mov	r0, r4
   162cc:	bl	11fe4 <strnlen@plt>
   162d0:	cmp	r0, #2
   162d4:	bne	16400 <get_boolean_op_value@@Base+0x16c>
   162d8:	ldrd	r0, [r6, #8]
   162dc:	mov	r2, #2
   162e0:	adds	r0, r0, #1
   162e4:	adc	r1, r1, #0
   162e8:	strd	r0, [r6, #8]
   162ec:	mov	r0, r4
   162f0:	ldr	r1, [pc, #644]	; 1657c <get_boolean_op_value@@Base+0x2e8>
   162f4:	add	r1, pc, r1
   162f8:	bl	1202c <strncmp@plt>
   162fc:	cmp	r0, #0
   16300:	beq	16448 <get_boolean_op_value@@Base+0x1b4>
   16304:	ldrd	r0, [r6, #32]
   16308:	mov	r2, #2
   1630c:	adds	r0, r0, #1
   16310:	adc	r1, r1, #0
   16314:	strd	r0, [r6, #32]
   16318:	mov	r0, r4
   1631c:	ldr	r1, [pc, #604]	; 16580 <get_boolean_op_value@@Base+0x2ec>
   16320:	add	r1, pc, r1
   16324:	bl	1202c <strncmp@plt>
   16328:	cmp	r0, #0
   1632c:	beq	1649c <get_boolean_op_value@@Base+0x208>
   16330:	ldrd	r0, [r6, #56]	; 0x38
   16334:	mov	r2, #2
   16338:	mov	r5, #2
   1633c:	adds	r0, r0, #1
   16340:	adc	r1, r1, #0
   16344:	strd	r0, [r6, #56]	; 0x38
   16348:	mov	r0, r4
   1634c:	ldr	r1, [pc, #560]	; 16584 <get_boolean_op_value@@Base+0x2f0>
   16350:	add	r1, pc, r1
   16354:	bl	1202c <strncmp@plt>
   16358:	cmp	r0, #0
   1635c:	beq	164b8 <get_boolean_op_value@@Base+0x224>
   16360:	ldrd	r0, [r6, #80]	; 0x50
   16364:	mov	r2, #2
   16368:	adds	r0, r0, #1
   1636c:	adc	r1, r1, #0
   16370:	strd	r0, [r6, #80]	; 0x50
   16374:	mov	r0, r4
   16378:	ldr	r1, [pc, #520]	; 16588 <get_boolean_op_value@@Base+0x2f4>
   1637c:	add	r1, pc, r1
   16380:	bl	1202c <strncmp@plt>
   16384:	cmp	r0, #0
   16388:	beq	164d0 <get_boolean_op_value@@Base+0x23c>
   1638c:	ldrd	r0, [r6, #104]	; 0x68
   16390:	mov	r2, #2
   16394:	adds	r0, r0, #1
   16398:	adc	r1, r1, #0
   1639c:	strd	r0, [r6, #104]	; 0x68
   163a0:	mov	r0, r4
   163a4:	ldr	r1, [pc, #480]	; 1658c <get_boolean_op_value@@Base+0x2f8>
   163a8:	add	r1, pc, r1
   163ac:	bl	1202c <strncmp@plt>
   163b0:	cmp	r0, #0
   163b4:	beq	164ec <get_boolean_op_value@@Base+0x258>
   163b8:	ldrd	r0, [r6, #128]	; 0x80
   163bc:	mov	r2, #2
   163c0:	adds	r0, r0, #1
   163c4:	adc	r1, r1, #0
   163c8:	strd	r0, [r6, #128]	; 0x80
   163cc:	mov	r0, r4
   163d0:	ldr	r1, [pc, #440]	; 16590 <get_boolean_op_value@@Base+0x2fc>
   163d4:	add	r1, pc, r1
   163d8:	bl	1202c <strncmp@plt>
   163dc:	cmp	r0, #0
   163e0:	bne	16560 <get_boolean_op_value@@Base+0x2cc>
   163e4:	ldrd	r0, [r6, #144]	; 0x90
   163e8:	mov	r5, #5
   163ec:	adds	r0, r0, #1
   163f0:	adc	r1, r1, #0
   163f4:	strd	r0, [r6, #144]	; 0x90
   163f8:	add	r0, r6, #160	; 0xa0
   163fc:	b	16504 <get_boolean_op_value@@Base+0x270>
   16400:	ldrd	r0, [r6, #16]
   16404:	adds	r0, r0, #1
   16408:	adc	r1, r1, #0
   1640c:	strd	r0, [r6, #16]
   16410:	ldrb	r0, [r4]
   16414:	cmp	r0, #62	; 0x3e
   16418:	beq	16480 <get_boolean_op_value@@Base+0x1ec>
   1641c:	cmp	r0, #60	; 0x3c
   16420:	beq	16464 <get_boolean_op_value@@Base+0x1d0>
   16424:	cmp	r0, #33	; 0x21
   16428:	bne	1652c <get_boolean_op_value@@Base+0x298>
   1642c:	ldrd	r0, [r6, #176]	; 0xb0
   16430:	mov	r5, #8
   16434:	adds	r0, r0, #1
   16438:	adc	r1, r1, #0
   1643c:	strd	r0, [r6, #176]	; 0xb0
   16440:	add	r0, r6, #200	; 0xc8
   16444:	b	16504 <get_boolean_op_value@@Base+0x270>
   16448:	ldrd	r0, [r6, #24]
   1644c:	mov	r5, #0
   16450:	adds	r0, r0, #1
   16454:	adc	r1, r1, #0
   16458:	strd	r0, [r6, #24]
   1645c:	add	r0, r6, #40	; 0x28
   16460:	b	16504 <get_boolean_op_value@@Base+0x270>
   16464:	ldrd	r0, [r6, #184]	; 0xb8
   16468:	mov	r5, #6
   1646c:	adds	r0, r0, #1
   16470:	adc	r1, r1, #0
   16474:	strd	r0, [r6, #184]	; 0xb8
   16478:	add	r0, r6, #208	; 0xd0
   1647c:	b	16504 <get_boolean_op_value@@Base+0x270>
   16480:	ldrd	r0, [r6, #192]	; 0xc0
   16484:	mov	r5, #7
   16488:	adds	r0, r0, #1
   1648c:	adc	r1, r1, #0
   16490:	strd	r0, [r6, #192]	; 0xc0
   16494:	add	r0, r6, #216	; 0xd8
   16498:	b	16504 <get_boolean_op_value@@Base+0x270>
   1649c:	ldrd	r0, [r6, #48]	; 0x30
   164a0:	mov	r5, #1
   164a4:	adds	r0, r0, #1
   164a8:	adc	r1, r1, #0
   164ac:	strd	r0, [r6, #48]	; 0x30
   164b0:	add	r0, r6, #64	; 0x40
   164b4:	b	16504 <get_boolean_op_value@@Base+0x270>
   164b8:	ldrd	r0, [r6, #72]	; 0x48
   164bc:	adds	r0, r0, #1
   164c0:	adc	r1, r1, #0
   164c4:	strd	r0, [r6, #72]	; 0x48
   164c8:	add	r0, r6, #88	; 0x58
   164cc:	b	16504 <get_boolean_op_value@@Base+0x270>
   164d0:	ldrd	r0, [r6, #96]	; 0x60
   164d4:	mov	r5, #3
   164d8:	adds	r0, r0, #1
   164dc:	adc	r1, r1, #0
   164e0:	strd	r0, [r6, #96]	; 0x60
   164e4:	add	r0, r6, #112	; 0x70
   164e8:	b	16504 <get_boolean_op_value@@Base+0x270>
   164ec:	ldrd	r0, [r6, #120]	; 0x78
   164f0:	mov	r5, #4
   164f4:	adds	r0, r0, #1
   164f8:	adc	r1, r1, #0
   164fc:	strd	r0, [r6, #120]	; 0x78
   16500:	add	r0, r6, #136	; 0x88
   16504:	ldrd	r2, [r0]
   16508:	adds	r2, r2, #1
   1650c:	adc	r3, r3, #0
   16510:	strd	r2, [r0]
   16514:	ldrd	r0, [r6, #224]	; 0xe0
   16518:	adds	r0, r0, #1
   1651c:	adc	r1, r1, #0
   16520:	strd	r0, [r6, #224]	; 0xe0
   16524:	mov	r0, r5
   16528:	pop	{r4, r5, r6, sl, fp, pc}
   1652c:	ldrd	r0, [r6, #168]	; 0xa8
   16530:	adds	r0, r0, #1
   16534:	adc	r1, r1, #0
   16538:	strd	r0, [r6, #168]	; 0xa8
   1653c:	ldr	r0, [pc, #80]	; 16594 <get_boolean_op_value@@Base+0x300>
   16540:	mov	r2, r4
   16544:	ldr	r0, [pc, r0]
   16548:	ldr	r0, [r0]
   1654c:	ldr	r1, [pc, #68]	; 16598 <get_boolean_op_value@@Base+0x304>
   16550:	add	r1, pc, r1
   16554:	bl	11f78 <fprintf@plt>
   16558:	mov	r0, #1
   1655c:	bl	11f54 <exit@plt>
   16560:	ldrd	r0, [r6, #152]	; 0x98
   16564:	adds	r0, r0, #1
   16568:	adc	r1, r1, #0
   1656c:	strd	r0, [r6, #152]	; 0x98
   16570:	b	1653c <get_boolean_op_value@@Base+0x2a8>
   16574:			; <UNDEFINED> instruction: 0x000176b0
   16578:			; <UNDEFINED> instruction: 0x000176b4
   1657c:	ldrdeq	r4, [r0], -r2
   16580:	andeq	r4, r0, r9, lsr #29
   16584:	andeq	r4, r0, ip, ror lr
   16588:	andeq	r4, r0, r3, asr lr
   1658c:	andeq	r4, r0, sl, lsr #28
   16590:	andeq	r4, r0, r1, lsl #28
   16594:	andeq	r6, r1, r8, ror fp
   16598:	andeq	r4, r0, r8, lsl #25
   1659c:	push	{r4, r5, r6, lr}
   165a0:	sub	sp, sp, #8
   165a4:	ldr	r0, [pc, #112]	; 1661c <get_boolean_op_value@@Base+0x388>
   165a8:	ldr	r1, [pc, #112]	; 16620 <get_boolean_op_value@@Base+0x38c>
   165ac:	movw	r2, #31856	; 0x7c70
   165b0:	movt	r2, #15338	; 0x3bea
   165b4:	add	r0, pc, r0
   165b8:	add	r1, pc, r1
   165bc:	bl	17860 <read_boolean_unary_expression@@Base+0x3f4>
   165c0:	ldr	r0, [pc, #92]	; 16624 <get_boolean_op_value@@Base+0x390>
   165c4:	ldr	r6, [pc, #92]	; 16628 <get_boolean_op_value@@Base+0x394>
   165c8:	mov	r5, #0
   165cc:	add	r0, pc, r0
   165d0:	add	r6, pc, r6
   165d4:	add	r4, r0, #4
   165d8:	mov	r3, r6
   165dc:	ldr	r0, [r3, r5]!
   165e0:	ldr	r1, [r3, #16]
   165e4:	str	r1, [sp]
   165e8:	ldmib	r3, {r1, r2}
   165ec:	ldrb	r3, [r3, #12]
   165f0:	bl	17f80 <read_boolean_unary_expression@@Base+0xb14>
   165f4:	ldrd	r0, [r4, #-4]
   165f8:	bl	18834 <read_boolean_unary_expression@@Base+0x13c8>
   165fc:	add	r5, r5, #20
   16600:	add	r4, r4, #8
   16604:	cmp	r5, #320	; 0x140
   16608:	bne	165d8 <get_boolean_op_value@@Base+0x344>
   1660c:	bl	18fbc <read_boolean_unary_expression@@Base+0x1b50>
   16610:	add	sp, sp, #8
   16614:	pop	{r4, r5, r6, lr}
   16618:	b	19d28 <read_boolean_unary_expression@@Base+0x28bc>
   1661c:	andeq	r4, r0, sl, asr ip
   16620:	andeq	r4, r0, sl, ror #15
   16624:	andeq	r6, r1, ip, ror r7
   16628:	andeq	r6, r1, r8, lsr r6
   1662c:	push	{fp, lr}
   16630:	bl	1659c <get_boolean_op_value@@Base+0x308>
   16634:	ldr	ip, [pc, #376]	; 167b4 <get_boolean_op_value@@Base+0x520>
   16638:	vmov.i32	q8, #0	; 0x00000000
   1663c:	mov	r0, #36	; 0x24
   16640:	mov	r1, #0
   16644:	add	ip, pc, ip
   16648:	mov	r3, ip
   1664c:	vst1.64	{d16-d17}, [r3 :128], r0
   16650:	str	r1, [r3]
   16654:	ldr	r3, [pc, #348]	; 167b8 <get_boolean_op_value@@Base+0x524>
   16658:	add	r3, pc, r3
   1665c:	vst1.64	{d16-d17}, [r3 :128]
   16660:	ldr	r3, [pc, #340]	; 167bc <get_boolean_op_value@@Base+0x528>
   16664:	add	r3, pc, r3
   16668:	vst1.64	{d16-d17}, [r3 :128]
   1666c:	ldr	r3, [pc, #332]	; 167c0 <get_boolean_op_value@@Base+0x52c>
   16670:	add	r3, pc, r3
   16674:	vst1.64	{d16-d17}, [r3 :128]
   16678:	ldr	r3, [pc, #324]	; 167c4 <get_boolean_op_value@@Base+0x530>
   1667c:	add	r3, pc, r3
   16680:	vst1.64	{d16-d17}, [r3 :128]
   16684:	ldr	r3, [pc, #316]	; 167c8 <get_boolean_op_value@@Base+0x534>
   16688:	add	r3, pc, r3
   1668c:	vst1.64	{d16-d17}, [r3 :128]
   16690:	ldr	r3, [pc, #308]	; 167cc <get_boolean_op_value@@Base+0x538>
   16694:	add	r3, pc, r3
   16698:	vst1.64	{d16-d17}, [r3 :128]
   1669c:	ldr	r3, [pc, #300]	; 167d0 <get_boolean_op_value@@Base+0x53c>
   166a0:	add	r3, pc, r3
   166a4:	vst1.64	{d16-d17}, [r3 :128]
   166a8:	ldr	r3, [pc, #292]	; 167d4 <get_boolean_op_value@@Base+0x540>
   166ac:	add	r3, pc, r3
   166b0:	vst1.64	{d16-d17}, [r3 :128]
   166b4:	ldr	r3, [pc, #284]	; 167d8 <get_boolean_op_value@@Base+0x544>
   166b8:	str	r1, [ip, #32]
   166bc:	add	r3, pc, r3
   166c0:	add	r2, r3, #16
   166c4:	str	r1, [r3, #112]	; 0x70
   166c8:	vst1.64	{d16-d17}, [r2 :128]
   166cc:	add	r2, r3, #32
   166d0:	vst1.64	{d16-d17}, [r2 :128]
   166d4:	add	r2, r3, #48	; 0x30
   166d8:	vst1.64	{d16-d17}, [r2 :128]
   166dc:	add	r2, r3, #64	; 0x40
   166e0:	vst1.64	{d16-d17}, [r2 :128]
   166e4:	add	r2, r3, #80	; 0x50
   166e8:	vst1.64	{d16-d17}, [r2 :128]
   166ec:	add	r2, r3, #96	; 0x60
   166f0:	vst1.64	{d16-d17}, [r2 :128]
   166f4:	add	r2, ip, #16
   166f8:	vst1.64	{d16-d17}, [r2 :128]
   166fc:	mov	r2, #116	; 0x74
   16700:	vst1.64	{d16-d17}, [r3 :128], r2
   16704:	str	r1, [r3]
   16708:	ldr	r2, [pc, #204]	; 167dc <get_boolean_op_value@@Base+0x548>
   1670c:	add	r2, pc, r2
   16710:	add	r3, r2, #16
   16714:	str	r1, [r2, #32]
   16718:	vst1.64	{d16-d17}, [r2 :128], r0
   1671c:	vst1.64	{d16-d17}, [r3 :128]
   16720:	str	r1, [r2]
   16724:	ldr	r2, [pc, #180]	; 167e0 <get_boolean_op_value@@Base+0x54c>
   16728:	add	r2, pc, r2
   1672c:	mov	r3, r2
   16730:	str	r1, [r2, #32]
   16734:	vst1.64	{d16-d17}, [r3 :128], r0
   16738:	str	r1, [r3]
   1673c:	add	r3, r2, #16
   16740:	vst1.64	{d16-d17}, [r3 :128]
   16744:	ldr	r2, [pc, #152]	; 167e4 <get_boolean_op_value@@Base+0x550>
   16748:	add	r2, pc, r2
   1674c:	add	r3, r2, #16
   16750:	str	r1, [r2, #32]
   16754:	vst1.64	{d16-d17}, [r2 :128], r0
   16758:	vst1.64	{d16-d17}, [r3 :128]
   1675c:	str	r1, [r2]
   16760:	ldr	r2, [pc, #128]	; 167e8 <get_boolean_op_value@@Base+0x554>
   16764:	add	r2, pc, r2
   16768:	mov	r3, r2
   1676c:	str	r1, [r2, #32]
   16770:	add	r2, r2, #16
   16774:	vst1.64	{d16-d17}, [r3 :128], r0
   16778:	vst1.64	{d16-d17}, [r2 :128]
   1677c:	str	r1, [r3]
   16780:	ldr	r2, [pc, #100]	; 167ec <get_boolean_op_value@@Base+0x558>
   16784:	add	r2, pc, r2
   16788:	add	r3, r2, #16
   1678c:	str	r1, [r2, #32]
   16790:	vst1.64	{d16-d17}, [r2 :128], r0
   16794:	str	r1, [r2]
   16798:	vst1.64	{d16-d17}, [r3 :128]
   1679c:	mov	r1, #0
   167a0:	mov	r2, #232	; 0xe8
   167a4:	ldr	r0, [pc, #68]	; 167f0 <get_boolean_op_value@@Base+0x55c>
   167a8:	add	r0, pc, r0
   167ac:	bl	11fa8 <memset@plt>
   167b0:	pop	{fp, pc}
   167b4:	strdeq	r7, [r1], -r4
   167b8:	strdeq	r7, [r1], -r0
   167bc:	ldrdeq	r7, [r1], -r4
   167c0:	andeq	r7, r1, r8, ror #1
   167c4:	andeq	r7, r1, ip, ror #1
   167c8:	strdeq	r7, [r1], -r0
   167cc:	strdeq	r7, [r1], -r4
   167d0:	strdeq	r7, [r1], -r8
   167d4:	strdeq	r7, [r1], -ip
   167d8:	strdeq	r7, [r1], -ip
   167dc:	andeq	r7, r1, ip, asr r1
   167e0:	andeq	r7, r1, r0, ror r1
   167e4:	andeq	r7, r1, r0, lsl #3
   167e8:	muleq	r1, r4, r1
   167ec:	andeq	r7, r1, r4, lsr #3
   167f0:			; <UNDEFINED> instruction: 0x000171b0
   167f4:	ldr	r0, [pc, #12]	; 16808 <get_boolean_op_value@@Base+0x574>
   167f8:	ldr	r1, [pc, #12]	; 1680c <get_boolean_op_value@@Base+0x578>
   167fc:	add	r0, pc, r0
   16800:	add	r1, pc, r1
   16804:	b	1a1dc <__gcov_flush@@Base+0xb8>
   16808:			; <UNDEFINED> instruction: 0xfffffd98
   1680c:			; <UNDEFINED> instruction: 0xfffffe24

00016810 <init_grammar@@Base>:
   16810:	ldr	r2, [pc, #56]	; 16850 <init_grammar@@Base+0x40>
   16814:	add	r3, pc, #36	; 0x24
   16818:	vld1.64	{d16-d17}, [r3 :128]
   1681c:	add	r2, pc, r2
   16820:	vld1.64	{d18-d19}, [r2 :128]
   16824:	vadd.i64	q8, q9, q8
   16828:	vst1.64	{d16-d17}, [r2 :128]
   1682c:	str	r1, [r0]
   16830:	bx	lr
   16834:	nop	{0}
   16838:	nop	{0}
   1683c:	nop	{0}
   16840:	andeq	r0, r0, r1
   16844:	andeq	r0, r0, r0
   16848:	andeq	r0, r0, r1
   1684c:	andeq	r0, r0, r0
   16850:	andeq	r7, r1, ip, lsr #4
   16854:	nop	{0}
   16858:	nop	{0}
   1685c:	nop	{0}

00016860 <destroy_grammar@@Base>:
   16860:	ldr	r0, [pc, #40]	; 16890 <destroy_grammar@@Base+0x30>
   16864:	add	r1, pc, #20
   16868:	vld1.64	{d16-d17}, [r1 :128]
   1686c:	add	r0, pc, r0
   16870:	vld1.64	{d18-d19}, [r0 :128]
   16874:	vadd.i64	q8, q9, q8
   16878:	vst1.64	{d16-d17}, [r0 :128]
   1687c:	bx	lr
   16880:	andeq	r0, r0, r1
   16884:	andeq	r0, r0, r0
   16888:	andeq	r0, r0, r1
   1688c:	andeq	r0, r0, r0
   16890:	andeq	r7, r1, ip, ror #3
   16894:	nop	{0}
   16898:	nop	{0}
   1689c:	nop	{0}

000168a0 <build_ast@@Base>:
   168a0:	ldr	r1, [pc, #40]	; 168d0 <build_ast@@Base+0x30>
   168a4:	add	r2, pc, #20
   168a8:	vld1.64	{d16-d17}, [r2 :128]
   168ac:	add	r1, pc, r1
   168b0:	vld1.64	{d18-d19}, [r1 :128]
   168b4:	vadd.i64	q8, q9, q8
   168b8:	vst1.64	{d16-d17}, [r1 :128]
   168bc:	b	168d4 <read_function_ast_node@@Base>
   168c0:	andeq	r0, r0, r1
   168c4:	andeq	r0, r0, r0
   168c8:	andeq	r0, r0, r1
   168cc:	andeq	r0, r0, r0
   168d0:			; <UNDEFINED> instruction: 0x000171bc

000168d4 <read_function_ast_node@@Base>:
   168d4:	push	{r4, r5, r6, r7, fp, lr}
   168d8:	add	fp, sp, #16
   168dc:	ldr	r7, [pc, #392]	; 16a6c <read_function_ast_node@@Base+0x198>
   168e0:	mov	r4, r0
   168e4:	ldr	r0, [pc, #388]	; 16a70 <read_function_ast_node@@Base+0x19c>
   168e8:	ldr	r0, [pc, r0]
   168ec:	add	r7, pc, r7
   168f0:	adds	r0, r0, #1
   168f4:	str	r0, [r7]
   168f8:	ldr	r0, [r7, #4]
   168fc:	adc	r0, r0, #0
   16900:	str	r0, [r7, #4]
   16904:	ldr	r0, [r4]
   16908:	bl	12140 <next@@Base>
   1690c:	ldr	r1, [r0]
   16910:	cmp	r1, #0
   16914:	beq	16934 <read_function_ast_node@@Base+0x60>
   16918:	ldrd	r0, [r7, #8]
   1691c:	mov	r4, #0
   16920:	adds	r0, r0, #1
   16924:	adc	r1, r1, #0
   16928:	strd	r0, [r7, #8]
   1692c:	add	r0, r7, #24
   16930:	b	16a44 <read_function_ast_node@@Base+0x170>
   16934:	ldrd	r2, [r7, #16]
   16938:	adds	r2, r2, #1
   1693c:	adc	r3, r3, #0
   16940:	strd	r2, [r7, #16]
   16944:	bl	15140 <free_token_int_type@@Base>
   16948:	ldr	r0, [r4]
   1694c:	bl	12140 <next@@Base>
   16950:	mov	r5, r0
   16954:	ldr	r0, [r0]
   16958:	cmp	r0, #2
   1695c:	bne	169f4 <read_function_ast_node@@Base+0x120>
   16960:	ldrd	r0, [r7, #40]	; 0x28
   16964:	adds	r0, r0, #1
   16968:	adc	r1, r1, #0
   1696c:	strd	r0, [r7, #40]	; 0x28
   16970:	ldr	r0, [r4]
   16974:	bl	12140 <next@@Base>
   16978:	ldr	r1, [r0]
   1697c:	cmp	r1, #3
   16980:	bne	16a10 <read_function_ast_node@@Base+0x13c>
   16984:	ldrd	r2, [r7, #64]	; 0x40
   16988:	adds	r2, r2, #1
   1698c:	adc	r3, r3, #0
   16990:	strd	r2, [r7, #64]	; 0x40
   16994:	bl	15200 <free_token_opar@@Base>
   16998:	ldr	r0, [r4]
   1699c:	bl	12140 <next@@Base>
   169a0:	ldr	r1, [r0]
   169a4:	cmp	r1, #4
   169a8:	bne	16a2c <read_function_ast_node@@Base+0x158>
   169ac:	ldrd	r2, [r7, #88]	; 0x58
   169b0:	adds	r2, r2, #1
   169b4:	adc	r3, r3, #0
   169b8:	strd	r2, [r7, #88]	; 0x58
   169bc:	bl	15240 <free_token_cpar@@Base>
   169c0:	mov	r0, r4
   169c4:	bl	16a74 <read_body@@Base>
   169c8:	mov	r6, r0
   169cc:	mov	r0, #16
   169d0:	bl	11f18 <malloc@plt>
   169d4:	ldr	r1, [r5, #4]
   169d8:	mov	r2, r6
   169dc:	mov	r4, r0
   169e0:	bl	158f0 <init_node_function@@Base>
   169e4:	mov	r0, r5
   169e8:	bl	151c0 <free_token_function@@Base>
   169ec:	add	r0, r7, #104	; 0x68
   169f0:	b	16a44 <read_function_ast_node@@Base+0x170>
   169f4:	ldrd	r0, [r7, #32]
   169f8:	mov	r4, #0
   169fc:	adds	r0, r0, #1
   16a00:	adc	r1, r1, #0
   16a04:	strd	r0, [r7, #32]
   16a08:	add	r0, r7, #48	; 0x30
   16a0c:	b	16a44 <read_function_ast_node@@Base+0x170>
   16a10:	ldrd	r0, [r7, #56]	; 0x38
   16a14:	mov	r4, #0
   16a18:	adds	r0, r0, #1
   16a1c:	adc	r1, r1, #0
   16a20:	strd	r0, [r7, #56]	; 0x38
   16a24:	add	r0, r7, #72	; 0x48
   16a28:	b	16a44 <read_function_ast_node@@Base+0x170>
   16a2c:	ldrd	r0, [r7, #80]	; 0x50
   16a30:	mov	r4, #0
   16a34:	adds	r0, r0, #1
   16a38:	adc	r1, r1, #0
   16a3c:	strd	r0, [r7, #80]	; 0x50
   16a40:	add	r0, r7, #96	; 0x60
   16a44:	ldrd	r2, [r0]
   16a48:	adds	r2, r2, #1
   16a4c:	adc	r3, r3, #0
   16a50:	strd	r2, [r0]
   16a54:	ldrd	r0, [r7, #112]	; 0x70
   16a58:	adds	r0, r0, #1
   16a5c:	adc	r1, r1, #0
   16a60:	strd	r0, [r7, #112]	; 0x70
   16a64:	mov	r0, r4
   16a68:	pop	{r4, r5, r6, r7, fp, pc}
   16a6c:	andeq	r7, r1, ip, lsl #3
   16a70:	muleq	r1, r0, r1

00016a74 <read_body@@Base>:
   16a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a78:	add	fp, sp, #28
   16a7c:	sub	sp, sp, #4
   16a80:	ldr	r7, [pc, #572]	; 16cc4 <read_body@@Base+0x250>
   16a84:	mov	r4, r0
   16a88:	ldr	r0, [pc, #568]	; 16cc8 <read_body@@Base+0x254>
   16a8c:	ldr	r0, [pc, r0]
   16a90:	add	r7, pc, r7
   16a94:	adds	r0, r0, #1
   16a98:	str	r0, [r7]
   16a9c:	ldr	r0, [r7, #4]
   16aa0:	adc	r0, r0, #0
   16aa4:	str	r0, [r7, #4]
   16aa8:	ldr	r0, [r4]
   16aac:	bl	12140 <next@@Base>
   16ab0:	ldr	r1, [r0]
   16ab4:	cmp	r1, #5
   16ab8:	bne	16c30 <read_body@@Base+0x1bc>
   16abc:	ldrd	r2, [r7, #16]
   16ac0:	adds	r2, r2, #1
   16ac4:	adc	r3, r3, #0
   16ac8:	strd	r2, [r7, #16]
   16acc:	bl	15280 <free_token_obra@@Base>
   16ad0:	ldr	r0, [r4]
   16ad4:	bl	12140 <next@@Base>
   16ad8:	mov	r1, r0
   16adc:	ldr	r0, [r7, #32]
   16ae0:	ldr	r3, [r7, #36]	; 0x24
   16ae4:	mov	sl, #0
   16ae8:	adds	r0, r0, #1
   16aec:	adc	r3, r3, #0
   16af0:	str	r0, [r7, #32]
   16af4:	str	r3, [r7, #36]	; 0x24
   16af8:	ldr	r0, [r1]
   16afc:	cmp	r0, #6
   16b00:	beq	16c4c <read_body@@Base+0x1d8>
   16b04:	add	r2, r7, #128	; 0x80
   16b08:	mov	r5, #0
   16b0c:	add	r9, r7, #88	; 0x58
   16b10:	mov	sl, #0
   16b14:	str	r2, [sp]
   16b18:	b	16b78 <read_body@@Base+0x104>
   16b1c:	ldrd	r0, [r7, #112]	; 0x70
   16b20:	mov	sl, r6
   16b24:	adds	r0, r0, #1
   16b28:	adc	r1, r1, #0
   16b2c:	strd	r0, [r7, #112]	; 0x70
   16b30:	ldr	r0, [sp]
   16b34:	ldrd	r2, [r0]
   16b38:	adds	r2, r2, #1
   16b3c:	adc	r3, r3, #0
   16b40:	strd	r2, [r0]
   16b44:	ldr	r0, [r4]
   16b48:	bl	12140 <next@@Base>
   16b4c:	mov	r1, r0
   16b50:	ldr	r0, [r7, #136]	; 0x88
   16b54:	ldr	r3, [r7, #140]	; 0x8c
   16b58:	mov	r5, r6
   16b5c:	adds	r0, r0, #1
   16b60:	adc	r3, r3, #0
   16b64:	str	r0, [r7, #136]	; 0x88
   16b68:	str	r3, [r7, #140]	; 0x8c
   16b6c:	ldr	r0, [r1]
   16b70:	cmp	r0, #6
   16b74:	beq	16c4c <read_body@@Base+0x1d8>
   16b78:	ldrd	r2, [r7, #40]	; 0x28
   16b7c:	adds	r2, r2, #1
   16b80:	adc	r3, r3, #0
   16b84:	cmp	r0, #10
   16b88:	strd	r2, [r7, #40]	; 0x28
   16b8c:	beq	16bcc <read_body@@Base+0x158>
   16b90:	cmp	r0, #7
   16b94:	bne	16c74 <read_body@@Base+0x200>
   16b98:	ldr	r0, [r7, #64]	; 0x40
   16b9c:	ldr	r3, [r7, #68]	; 0x44
   16ba0:	adds	r0, r0, #1
   16ba4:	str	r0, [r7, #64]	; 0x40
   16ba8:	adc	r3, r3, #0
   16bac:	mov	r0, r1
   16bb0:	str	r3, [r7, #68]	; 0x44
   16bb4:	bl	15300 <free_token_return@@Base>
   16bb8:	mov	r0, r4
   16bbc:	add	r8, r7, #80	; 0x50
   16bc0:	bl	16ccc <read_return_expression@@Base>
   16bc4:	mov	r6, r0
   16bc8:	b	16bfc <read_body@@Base+0x188>
   16bcc:	ldr	r0, [r7, #72]	; 0x48
   16bd0:	ldr	r3, [r7, #76]	; 0x4c
   16bd4:	adds	r0, r0, #1
   16bd8:	str	r0, [r7, #72]	; 0x48
   16bdc:	adc	r3, r3, #0
   16be0:	mov	r0, r1
   16be4:	str	r3, [r7, #76]	; 0x4c
   16be8:	bl	153c0 <free_token_if@@Base>
   16bec:	mov	r0, r4
   16bf0:	bl	16de8 <read_if_statement@@Base>
   16bf4:	mov	r6, r0
   16bf8:	mov	r8, r9
   16bfc:	ldrd	r0, [r8]
   16c00:	adds	r0, r0, #1
   16c04:	adc	r1, r1, #0
   16c08:	cmp	sl, #0
   16c0c:	strd	r0, [r8]
   16c10:	beq	16b1c <read_body@@Base+0xa8>
   16c14:	ldrd	r0, [r7, #104]	; 0x68
   16c18:	adds	r0, r0, #1
   16c1c:	adc	r1, r1, #0
   16c20:	strd	r0, [r7, #104]	; 0x68
   16c24:	str	r6, [r5, #4]
   16c28:	add	r0, r7, #120	; 0x78
   16c2c:	b	16b34 <read_body@@Base+0xc0>
   16c30:	ldrd	r0, [r7, #8]
   16c34:	mov	sl, #0
   16c38:	adds	r0, r0, #1
   16c3c:	adc	r1, r1, #0
   16c40:	strd	r0, [r7, #8]
   16c44:	add	r0, r7, #24
   16c48:	b	16c98 <read_body@@Base+0x224>
   16c4c:	ldr	r0, [r7, #48]	; 0x30
   16c50:	ldr	r3, [r7, #52]	; 0x34
   16c54:	adds	r0, r0, #1
   16c58:	str	r0, [r7, #48]	; 0x30
   16c5c:	adc	r3, r3, #0
   16c60:	mov	r0, r1
   16c64:	str	r3, [r7, #52]	; 0x34
   16c68:	bl	152c0 <free_token_cbra@@Base>
   16c6c:	add	r0, r7, #144	; 0x90
   16c70:	b	16c98 <read_body@@Base+0x224>
   16c74:	ldr	r0, [r7, #56]	; 0x38
   16c78:	ldr	r3, [r7, #60]	; 0x3c
   16c7c:	adds	r0, r0, #1
   16c80:	adc	r3, r3, #0
   16c84:	str	r0, [r7, #56]	; 0x38
   16c88:	str	r3, [r7, #60]	; 0x3c
   16c8c:	ldr	r0, [r4]
   16c90:	bl	123a8 <push_back@@Base>
   16c94:	add	r0, r7, #96	; 0x60
   16c98:	ldrd	r2, [r0]
   16c9c:	adds	r2, r2, #1
   16ca0:	adc	r3, r3, #0
   16ca4:	strd	r2, [r0]
   16ca8:	ldrd	r0, [r7, #152]	; 0x98
   16cac:	adds	r0, r0, #1
   16cb0:	adc	r1, r1, #0
   16cb4:	strd	r0, [r7, #152]	; 0x98
   16cb8:	mov	r0, sl
   16cbc:	sub	sp, fp, #28
   16cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cc4:	andeq	r7, r1, r8, rrx
   16cc8:	andeq	r7, r1, ip, rrx

00016ccc <read_return_expression@@Base>:
   16ccc:	push	{r4, r5, r6, r7, fp, lr}
   16cd0:	add	fp, sp, #16
   16cd4:	ldr	r7, [pc, #260]	; 16de0 <read_return_expression@@Base+0x114>
   16cd8:	mov	r4, r0
   16cdc:	ldr	r0, [pc, #256]	; 16de4 <read_return_expression@@Base+0x118>
   16ce0:	ldr	r0, [pc, r0]
   16ce4:	add	r7, pc, r7
   16ce8:	adds	r0, r0, #1
   16cec:	str	r0, [r7]
   16cf0:	ldr	r0, [r7, #4]
   16cf4:	adc	r0, r0, #0
   16cf8:	str	r0, [r7, #4]
   16cfc:	ldr	r0, [r4]
   16d00:	bl	12140 <next@@Base>
   16d04:	mov	r5, r0
   16d08:	ldr	r0, [r0]
   16d0c:	cmp	r0, #1
   16d10:	bne	16d84 <read_return_expression@@Base+0xb8>
   16d14:	ldrd	r0, [r7, #16]
   16d18:	adds	r0, r0, #1
   16d1c:	adc	r1, r1, #0
   16d20:	strd	r0, [r7, #16]
   16d24:	mov	r0, #12
   16d28:	bl	11f18 <malloc@plt>
   16d2c:	ldr	r1, [r5, #4]
   16d30:	mov	r6, r0
   16d34:	bl	15870 <init_node_int@@Base>
   16d38:	mov	r0, r5
   16d3c:	bl	15180 <free_token_int_value@@Base>
   16d40:	mov	r0, #12
   16d44:	bl	11f18 <malloc@plt>
   16d48:	mov	r1, r6
   16d4c:	mov	r5, r0
   16d50:	bl	15980 <init_node_return@@Base>
   16d54:	ldr	r0, [r4]
   16d58:	bl	12140 <next@@Base>
   16d5c:	ldr	r1, [r0]
   16d60:	cmp	r1, #8
   16d64:	bne	16da0 <read_return_expression@@Base+0xd4>
   16d68:	ldrd	r2, [r7, #40]	; 0x28
   16d6c:	adds	r2, r2, #1
   16d70:	adc	r3, r3, #0
   16d74:	strd	r2, [r7, #40]	; 0x28
   16d78:	bl	15340 <free_token_semicolon@@Base>
   16d7c:	add	r0, r7, #56	; 0x38
   16d80:	b	16db8 <read_return_expression@@Base+0xec>
   16d84:	ldrd	r0, [r7, #8]
   16d88:	mov	r5, #0
   16d8c:	adds	r0, r0, #1
   16d90:	adc	r1, r1, #0
   16d94:	strd	r0, [r7, #8]
   16d98:	add	r0, r7, #24
   16d9c:	b	16db8 <read_return_expression@@Base+0xec>
   16da0:	ldrd	r0, [r7, #32]
   16da4:	mov	r5, #0
   16da8:	adds	r0, r0, #1
   16dac:	adc	r1, r1, #0
   16db0:	strd	r0, [r7, #32]
   16db4:	add	r0, r7, #48	; 0x30
   16db8:	ldrd	r2, [r0]
   16dbc:	adds	r2, r2, #1
   16dc0:	adc	r3, r3, #0
   16dc4:	strd	r2, [r0]
   16dc8:	ldrd	r0, [r7, #64]	; 0x40
   16dcc:	adds	r0, r0, #1
   16dd0:	adc	r1, r1, #0
   16dd4:	strd	r0, [r7, #64]	; 0x40
   16dd8:	mov	r0, r5
   16ddc:	pop	{r4, r5, r6, r7, fp, pc}
   16de0:			; <UNDEFINED> instruction: 0x00016eb4
   16de4:			; <UNDEFINED> instruction: 0x00016eb8

00016de8 <read_if_statement@@Base>:
   16de8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16dec:	add	fp, sp, #24
   16df0:	ldr	r4, [pc, #328]	; 16f40 <read_if_statement@@Base+0x158>
   16df4:	mov	r5, r0
   16df8:	ldr	r0, [pc, #324]	; 16f44 <read_if_statement@@Base+0x15c>
   16dfc:	ldr	r0, [pc, r0]
   16e00:	add	r4, pc, r4
   16e04:	adds	r0, r0, #1
   16e08:	str	r0, [r4]
   16e0c:	ldr	r0, [r4, #4]
   16e10:	adc	r0, r0, #0
   16e14:	str	r0, [r4, #4]
   16e18:	ldr	r0, [r5]
   16e1c:	bl	12140 <next@@Base>
   16e20:	ldr	r1, [r0]
   16e24:	cmp	r1, #3
   16e28:	bne	16ea4 <read_if_statement@@Base+0xbc>
   16e2c:	ldrd	r2, [r4, #16]
   16e30:	adds	r2, r2, #1
   16e34:	adc	r3, r3, #0
   16e38:	strd	r2, [r4, #16]
   16e3c:	bl	15200 <free_token_opar@@Base>
   16e40:	mov	r0, r5
   16e44:	bl	16f48 <read_boolean_expression@@Base>
   16e48:	mov	r8, r0
   16e4c:	mov	r0, r5
   16e50:	bl	16a74 <read_body@@Base>
   16e54:	mov	r9, r0
   16e58:	ldr	r0, [r5]
   16e5c:	bl	12140 <next@@Base>
   16e60:	mov	r1, r0
   16e64:	ldr	r0, [r0]
   16e68:	cmp	r0, #11
   16e6c:	bne	16ec0 <read_if_statement@@Base+0xd8>
   16e70:	ldr	r0, [r4, #32]
   16e74:	ldr	r3, [r4, #36]	; 0x24
   16e78:	adds	r0, r0, #1
   16e7c:	str	r0, [r4, #32]
   16e80:	adc	r3, r3, #0
   16e84:	mov	r0, r1
   16e88:	str	r3, [r4, #36]	; 0x24
   16e8c:	bl	15400 <free_token_else@@Base>
   16e90:	mov	r0, r5
   16e94:	add	r6, r4, #48	; 0x30
   16e98:	bl	16a74 <read_body@@Base>
   16e9c:	mov	r7, r0
   16ea0:	b	16ee8 <read_if_statement@@Base+0x100>
   16ea4:	ldrd	r0, [r4, #8]
   16ea8:	mov	r5, #0
   16eac:	adds	r0, r0, #1
   16eb0:	adc	r1, r1, #0
   16eb4:	strd	r0, [r4, #8]
   16eb8:	add	r0, r4, #24
   16ebc:	b	16f18 <read_if_statement@@Base+0x130>
   16ec0:	ldr	r0, [r4, #40]	; 0x28
   16ec4:	ldr	r3, [r4, #44]	; 0x2c
   16ec8:	adds	r0, r0, #1
   16ecc:	adc	r3, r3, #0
   16ed0:	str	r0, [r4, #40]	; 0x28
   16ed4:	str	r3, [r4, #44]	; 0x2c
   16ed8:	ldr	r0, [r5]
   16edc:	bl	123a8 <push_back@@Base>
   16ee0:	add	r6, r4, #56	; 0x38
   16ee4:	mov	r7, #0
   16ee8:	ldrd	r0, [r6]
   16eec:	adds	r0, r0, #1
   16ef0:	adc	r1, r1, #0
   16ef4:	strd	r0, [r6]
   16ef8:	mov	r0, #20
   16efc:	bl	11f18 <malloc@plt>
   16f00:	mov	r1, r8
   16f04:	mov	r2, r9
   16f08:	mov	r3, r7
   16f0c:	mov	r5, r0
   16f10:	bl	15a00 <init_node_if@@Base>
   16f14:	add	r0, r4, #64	; 0x40
   16f18:	ldrd	r2, [r0]
   16f1c:	adds	r2, r2, #1
   16f20:	adc	r3, r3, #0
   16f24:	strd	r2, [r0]
   16f28:	ldrd	r0, [r4, #72]	; 0x48
   16f2c:	adds	r0, r0, #1
   16f30:	adc	r1, r1, #0
   16f34:	strd	r0, [r4, #72]	; 0x48
   16f38:	mov	r0, r5
   16f3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16f40:	andeq	r6, r1, r8, ror #27
   16f44:	andeq	r6, r1, ip, ror #27

00016f48 <read_boolean_expression@@Base>:
   16f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f4c:	add	fp, sp, #28
   16f50:	sub	sp, sp, #4
   16f54:	ldr	r6, [pc, #492]	; 17148 <read_boolean_expression@@Base+0x200>
   16f58:	mov	r5, r0
   16f5c:	ldr	r0, [pc, #488]	; 1714c <read_boolean_expression@@Base+0x204>
   16f60:	mov	r4, #0
   16f64:	ldr	r0, [pc, r0]
   16f68:	add	r6, pc, r6
   16f6c:	str	r4, [sp]
   16f70:	adds	r0, r0, #1
   16f74:	str	r0, [r6]
   16f78:	ldr	r0, [r6, #4]
   16f7c:	adc	r0, r0, #0
   16f80:	str	r0, [r6, #4]
   16f84:	ldr	r0, [r5]
   16f88:	bl	12140 <next@@Base>
   16f8c:	mov	r1, r0
   16f90:	ldr	r0, [r6, #8]
   16f94:	ldr	r3, [r6, #12]
   16f98:	adds	r0, r0, #1
   16f9c:	adc	r3, r3, #0
   16fa0:	str	r0, [r6, #8]
   16fa4:	str	r3, [r6, #12]
   16fa8:	ldr	r0, [r1]
   16fac:	cmp	r0, #4
   16fb0:	beq	170cc <read_boolean_expression@@Base+0x184>
   16fb4:	mov	r4, #0
   16fb8:	mov	r9, #1
   16fbc:	add	sl, r6, #72	; 0x48
   16fc0:	mov	r8, sp
   16fc4:	b	17034 <read_boolean_expression@@Base+0xec>
   16fc8:	ldrd	r0, [r6, #56]	; 0x38
   16fcc:	mov	r2, r8
   16fd0:	mov	r3, r7
   16fd4:	adds	r0, r0, #1
   16fd8:	adc	r1, r1, #0
   16fdc:	strd	r0, [r6, #56]	; 0x38
   16fe0:	mov	r0, r5
   16fe4:	mov	r1, r4
   16fe8:	bl	17158 <read_single_boolean_expression@@Base>
   16fec:	mov	r4, r0
   16ff0:	add	r0, r6, #80	; 0x50
   16ff4:	ldrd	r2, [r0]
   16ff8:	adds	r2, r2, #1
   16ffc:	adc	r3, r3, #0
   17000:	strd	r2, [r0]
   17004:	ldr	r0, [r5]
   17008:	bl	12140 <next@@Base>
   1700c:	mov	r1, r0
   17010:	ldr	r0, [r6, #88]	; 0x58
   17014:	ldr	r3, [r6, #92]	; 0x5c
   17018:	adds	r0, r0, #1
   1701c:	adc	r3, r3, #0
   17020:	str	r0, [r6, #88]	; 0x58
   17024:	str	r3, [r6, #92]	; 0x5c
   17028:	ldr	r0, [r1]
   1702c:	cmp	r0, #4
   17030:	beq	170cc <read_boolean_expression@@Base+0x184>
   17034:	ldrd	r2, [r6, #16]
   17038:	adds	r2, r2, #1
   1703c:	adc	r3, r3, #0
   17040:	cmp	r0, #12
   17044:	strd	r2, [r6, #16]
   17048:	beq	1709c <read_boolean_expression@@Base+0x154>
   1704c:	cmp	r0, #3
   17050:	beq	16fc8 <read_boolean_expression@@Base+0x80>
   17054:	cmp	r0, #1
   17058:	bne	17110 <read_boolean_expression@@Base+0x1c8>
   1705c:	ldr	r0, [r6, #40]	; 0x28
   17060:	ldr	r3, [r6, #44]	; 0x2c
   17064:	adds	r0, r0, #1
   17068:	adc	r3, r3, #0
   1706c:	str	r0, [r6, #40]	; 0x28
   17070:	str	r3, [r6, #44]	; 0x2c
   17074:	ldr	r0, [r5]
   17078:	bl	123a8 <push_back@@Base>
   1707c:	mov	r0, r5
   17080:	mov	r1, r4
   17084:	mov	r2, r8
   17088:	mov	r3, r7
   1708c:	bl	17158 <read_single_boolean_expression@@Base>
   17090:	mov	r4, r0
   17094:	add	r0, r6, #64	; 0x40
   17098:	b	16ff4 <read_boolean_expression@@Base+0xac>
   1709c:	ldr	r0, [r6, #48]	; 0x30
   170a0:	ldr	r3, [r6, #52]	; 0x34
   170a4:	adds	r0, r0, #1
   170a8:	str	r0, [r6, #48]	; 0x30
   170ac:	adc	r3, r3, #0
   170b0:	mov	r0, r1
   170b4:	str	r3, [r6, #52]	; 0x34
   170b8:	bl	16294 <get_boolean_op_value@@Base>
   170bc:	mov	r7, r0
   170c0:	mov	r0, sl
   170c4:	str	r9, [sp]
   170c8:	b	16ff4 <read_boolean_expression@@Base+0xac>
   170cc:	ldr	r0, [r6, #24]
   170d0:	ldr	r3, [r6, #28]
   170d4:	ldr	r2, [r6, #96]	; 0x60
   170d8:	ldr	r5, [r6, #100]	; 0x64
   170dc:	adds	r0, r0, #1
   170e0:	adc	r3, r3, #0
   170e4:	adds	r2, r2, #1
   170e8:	str	r2, [r6, #96]	; 0x60
   170ec:	str	r0, [r6, #24]
   170f0:	adc	r0, r5, #0
   170f4:	str	r3, [r6, #28]
   170f8:	str	r0, [r6, #100]	; 0x64
   170fc:	mov	r0, r1
   17100:	bl	15240 <free_token_cpar@@Base>
   17104:	mov	r0, r4
   17108:	sub	sp, fp, #28
   1710c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17110:	ldrd	r0, [r6, #32]
   17114:	mov	r2, #1
   17118:	adds	r0, r0, #1
   1711c:	adc	r1, r1, #0
   17120:	strd	r0, [r6, #32]
   17124:	mov	r1, #33	; 0x21
   17128:	ldr	r0, [pc, #32]	; 17150 <read_boolean_expression@@Base+0x208>
   1712c:	ldr	r0, [pc, r0]
   17130:	ldr	r3, [r0]
   17134:	ldr	r0, [pc, #24]	; 17154 <read_boolean_expression@@Base+0x20c>
   17138:	add	r0, pc, r0
   1713c:	bl	11ee8 <fwrite@plt>
   17140:	mov	r0, #1
   17144:	bl	11f54 <exit@plt>
   17148:	ldrdeq	r6, [r1], -r0
   1714c:	ldrdeq	r6, [r1], -r4
   17150:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   17154:	andeq	r4, r0, r5, asr r2

00017158 <read_single_boolean_expression@@Base>:
   17158:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1715c:	add	fp, sp, #24
   17160:	ldr	r5, [pc, #264]	; 17270 <read_single_boolean_expression@@Base+0x118>
   17164:	mov	r4, r2
   17168:	ldr	r2, [pc, #260]	; 17274 <read_single_boolean_expression@@Base+0x11c>
   1716c:	ldr	r2, [pc, r2]
   17170:	add	r5, pc, r5
   17174:	adds	r2, r2, #1
   17178:	str	r2, [r5]
   1717c:	ldr	r2, [r5, #4]
   17180:	adc	r2, r2, #0
   17184:	cmp	r1, #0
   17188:	str	r2, [r5, #4]
   1718c:	beq	171f4 <read_single_boolean_expression@@Base+0x9c>
   17190:	mov	r8, r3
   17194:	ldrd	r2, [r5, #16]
   17198:	adds	r2, r2, #1
   1719c:	adc	r3, r3, #0
   171a0:	strd	r2, [r5, #16]
   171a4:	ldr	r1, [r4]
   171a8:	cmp	r1, #0
   171ac:	beq	17238 <read_single_boolean_expression@@Base+0xe0>
   171b0:	ldrd	r2, [r5, #32]
   171b4:	adds	r2, r2, #1
   171b8:	adc	r3, r3, #0
   171bc:	strd	r2, [r5, #32]
   171c0:	bl	17280 <read_boolean_binary_expression@@Base>
   171c4:	mov	r7, r0
   171c8:	mov	r0, #20
   171cc:	bl	11f18 <malloc@plt>
   171d0:	mov	r1, r8
   171d4:	mov	r2, #0
   171d8:	mov	r3, r7
   171dc:	mov	r6, r0
   171e0:	mov	r9, #0
   171e4:	bl	15a80 <init_node_boolean_operator@@Base>
   171e8:	str	r9, [r4]
   171ec:	add	r4, r5, #48	; 0x30
   171f0:	b	17210 <read_single_boolean_expression@@Base+0xb8>
   171f4:	ldrd	r2, [r5, #8]
   171f8:	add	r4, r5, #24
   171fc:	adds	r2, r2, #1
   17200:	adc	r3, r3, #0
   17204:	strd	r2, [r5, #8]
   17208:	bl	17280 <read_boolean_binary_expression@@Base>
   1720c:	mov	r6, r0
   17210:	ldrd	r0, [r4]
   17214:	adds	r0, r0, #1
   17218:	adc	r1, r1, #0
   1721c:	strd	r0, [r4]
   17220:	ldrd	r0, [r5, #56]	; 0x38
   17224:	adds	r0, r0, #1
   17228:	adc	r1, r1, #0
   1722c:	strd	r0, [r5, #56]	; 0x38
   17230:	mov	r0, r6
   17234:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17238:	ldrd	r0, [r5, #40]	; 0x28
   1723c:	adds	r0, r0, #1
   17240:	adc	r1, r1, #0
   17244:	strd	r0, [r5, #40]	; 0x28
   17248:	mov	r1, #4
   1724c:	ldr	r0, [pc, #36]	; 17278 <read_single_boolean_expression@@Base+0x120>
   17250:	ldr	r0, [pc, r0]
   17254:	ldr	r2, [r1]
   17258:	ldr	r0, [r0]
   1725c:	ldr	r1, [pc, #24]	; 1727c <read_single_boolean_expression@@Base+0x124>
   17260:	add	r1, pc, r1
   17264:	bl	11f78 <fprintf@plt>
   17268:	mov	r0, #1
   1726c:	bl	11f54 <exit@plt>
   17270:	andeq	r6, r1, r8, lsr fp
   17274:	andeq	r6, r1, ip, lsr fp
   17278:	andeq	r5, r1, ip, ror #28
   1727c:	andeq	r4, r0, pc, asr #2

00017280 <read_boolean_binary_expression@@Base>:
   17280:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17284:	add	fp, sp, #24
   17288:	ldr	r4, [pc, #468]	; 17464 <read_boolean_binary_expression@@Base+0x1e4>
   1728c:	mov	r5, r0
   17290:	ldr	r0, [pc, #464]	; 17468 <read_boolean_binary_expression@@Base+0x1e8>
   17294:	ldr	r0, [pc, r0]
   17298:	add	r4, pc, r4
   1729c:	adds	r0, r0, #1
   172a0:	str	r0, [r4]
   172a4:	ldr	r0, [r4, #4]
   172a8:	adc	r0, r0, #0
   172ac:	str	r0, [r4, #4]
   172b0:	ldr	r0, [r5]
   172b4:	bl	12140 <next@@Base>
   172b8:	mov	r6, r0
   172bc:	ldr	r0, [r0]
   172c0:	cmp	r0, #1
   172c4:	bne	17398 <read_boolean_binary_expression@@Base+0x118>
   172c8:	ldrd	r0, [r4, #16]
   172cc:	adds	r0, r0, #1
   172d0:	adc	r1, r1, #0
   172d4:	strd	r0, [r4, #16]
   172d8:	mov	r0, #12
   172dc:	bl	11f18 <malloc@plt>
   172e0:	ldr	r1, [r6, #4]
   172e4:	mov	r8, r0
   172e8:	bl	15870 <init_node_int@@Base>
   172ec:	mov	r0, r6
   172f0:	bl	15180 <free_token_int_value@@Base>
   172f4:	ldr	r0, [r5]
   172f8:	bl	12140 <next@@Base>
   172fc:	mov	r7, r0
   17300:	ldr	r0, [r0]
   17304:	cmp	r0, #12
   17308:	bne	173e0 <read_boolean_binary_expression@@Base+0x160>
   1730c:	ldrd	r0, [r4, #64]	; 0x40
   17310:	adds	r0, r0, #1
   17314:	adc	r1, r1, #0
   17318:	strd	r0, [r4, #64]	; 0x40
   1731c:	mov	r0, r7
   17320:	bl	16294 <get_boolean_op_value@@Base>
   17324:	mov	r6, r0
   17328:	mov	r0, r7
   1732c:	bl	15434 <free_token_boolean_op@@Base>
   17330:	ldr	r0, [r5]
   17334:	bl	12140 <next@@Base>
   17338:	mov	r5, r0
   1733c:	ldr	r0, [r0]
   17340:	cmp	r0, #1
   17344:	bne	1741c <read_boolean_binary_expression@@Base+0x19c>
   17348:	ldrd	r0, [r4, #88]	; 0x58
   1734c:	adds	r0, r0, #1
   17350:	adc	r1, r1, #0
   17354:	strd	r0, [r4, #88]	; 0x58
   17358:	mov	r0, #12
   1735c:	bl	11f18 <malloc@plt>
   17360:	ldr	r1, [r5, #4]
   17364:	mov	r7, r0
   17368:	bl	15870 <init_node_int@@Base>
   1736c:	mov	r0, r5
   17370:	bl	15180 <free_token_int_value@@Base>
   17374:	mov	r0, #20
   17378:	bl	11f18 <malloc@plt>
   1737c:	mov	r1, r6
   17380:	mov	r2, r8
   17384:	mov	r3, r7
   17388:	mov	r5, r0
   1738c:	bl	15a80 <init_node_boolean_operator@@Base>
   17390:	add	r6, r4, #104	; 0x68
   17394:	b	1743c <read_boolean_binary_expression@@Base+0x1bc>
   17398:	ldrd	r2, [r4, #8]
   1739c:	adds	r2, r2, #1
   173a0:	adc	r3, r3, #0
   173a4:	cmp	r0, #12
   173a8:	strd	r2, [r4, #8]
   173ac:	bne	17400 <read_boolean_binary_expression@@Base+0x180>
   173b0:	ldrd	r0, [r4, #24]
   173b4:	adds	r0, r0, #1
   173b8:	adc	r1, r1, #0
   173bc:	strd	r0, [r4, #24]
   173c0:	mov	r1, r6
   173c4:	ldr	r0, [r5]
   173c8:	bl	123a8 <push_back@@Base>
   173cc:	mov	r0, r5
   173d0:	add	r6, r4, #40	; 0x28
   173d4:	bl	1746c <read_boolean_unary_expression@@Base>
   173d8:	mov	r5, r0
   173dc:	b	1743c <read_boolean_binary_expression@@Base+0x1bc>
   173e0:	ldrd	r0, [r4, #56]	; 0x38
   173e4:	adds	r0, r0, #1
   173e8:	adc	r1, r1, #0
   173ec:	strd	r0, [r4, #56]	; 0x38
   173f0:	mov	r0, r8
   173f4:	bl	15b0c <free_node@@Base>
   173f8:	add	r6, r4, #72	; 0x48
   173fc:	b	17438 <read_boolean_binary_expression@@Base+0x1b8>
   17400:	ldrd	r0, [r4, #32]
   17404:	add	r6, r4, #48	; 0x30
   17408:	mov	r5, #0
   1740c:	adds	r0, r0, #1
   17410:	adc	r1, r1, #0
   17414:	strd	r0, [r4, #32]
   17418:	b	1743c <read_boolean_binary_expression@@Base+0x1bc>
   1741c:	ldrd	r0, [r4, #80]	; 0x50
   17420:	adds	r0, r0, #1
   17424:	adc	r1, r1, #0
   17428:	strd	r0, [r4, #80]	; 0x50
   1742c:	mov	r0, r8
   17430:	bl	15b0c <free_node@@Base>
   17434:	add	r6, r4, #96	; 0x60
   17438:	mov	r5, #0
   1743c:	ldrd	r0, [r6]
   17440:	adds	r0, r0, #1
   17444:	adc	r1, r1, #0
   17448:	strd	r0, [r6]
   1744c:	ldrd	r0, [r4, #112]	; 0x70
   17450:	adds	r0, r0, #1
   17454:	adc	r1, r1, #0
   17458:	strd	r0, [r4, #112]	; 0x70
   1745c:	mov	r0, r5
   17460:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17464:	andeq	r6, r1, r0, asr sl
   17468:	andeq	r6, r1, r4, asr sl

0001746c <read_boolean_unary_expression@@Base>:
   1746c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17470:	add	fp, sp, #24
   17474:	ldr	r5, [pc, #304]	; 175ac <read_boolean_unary_expression@@Base+0x140>
   17478:	mov	r6, r0
   1747c:	ldr	r0, [pc, #300]	; 175b0 <read_boolean_unary_expression@@Base+0x144>
   17480:	ldr	r0, [pc, r0]
   17484:	add	r5, pc, r5
   17488:	adds	r0, r0, #1
   1748c:	str	r0, [r5]
   17490:	ldr	r0, [r5, #4]
   17494:	adc	r0, r0, #0
   17498:	str	r0, [r5, #4]
   1749c:	mov	r0, #20
   174a0:	bl	11f18 <malloc@plt>
   174a4:	mov	r4, r0
   174a8:	ldr	r0, [r6]
   174ac:	bl	12140 <next@@Base>
   174b0:	mov	r7, r0
   174b4:	ldr	r0, [r0]
   174b8:	cmp	r0, #12
   174bc:	bne	17544 <read_boolean_unary_expression@@Base+0xd8>
   174c0:	ldrd	r0, [r5, #16]
   174c4:	adds	r0, r0, #1
   174c8:	adc	r1, r1, #0
   174cc:	strd	r0, [r5, #16]
   174d0:	mov	r0, r7
   174d4:	bl	16294 <get_boolean_op_value@@Base>
   174d8:	mov	r8, r0
   174dc:	mov	r0, r7
   174e0:	bl	15434 <free_token_boolean_op@@Base>
   174e4:	ldr	r0, [r6]
   174e8:	bl	12140 <next@@Base>
   174ec:	mov	r6, r0
   174f0:	ldr	r0, [r0]
   174f4:	cmp	r0, #1
   174f8:	bne	17564 <read_boolean_unary_expression@@Base+0xf8>
   174fc:	ldrd	r0, [r5, #40]	; 0x28
   17500:	adds	r0, r0, #1
   17504:	adc	r1, r1, #0
   17508:	strd	r0, [r5, #40]	; 0x28
   1750c:	mov	r0, #12
   17510:	bl	11f18 <malloc@plt>
   17514:	ldr	r1, [r6, #4]
   17518:	mov	r7, r0
   1751c:	bl	15870 <init_node_int@@Base>
   17520:	mov	r0, r6
   17524:	bl	15180 <free_token_int_value@@Base>
   17528:	mov	r0, r4
   1752c:	mov	r1, r8
   17530:	mov	r2, r7
   17534:	mov	r3, #0
   17538:	bl	15a80 <init_node_boolean_operator@@Base>
   1753c:	add	r0, r5, #56	; 0x38
   17540:	b	17584 <read_boolean_unary_expression@@Base+0x118>
   17544:	ldrd	r0, [r5, #8]
   17548:	adds	r0, r0, #1
   1754c:	adc	r1, r1, #0
   17550:	strd	r0, [r5, #8]
   17554:	mov	r0, r4
   17558:	bl	161f4 <free_node_boolean_operator@@Base>
   1755c:	add	r0, r5, #24
   17560:	b	17580 <read_boolean_unary_expression@@Base+0x114>
   17564:	ldrd	r0, [r5, #32]
   17568:	adds	r0, r0, #1
   1756c:	adc	r1, r1, #0
   17570:	strd	r0, [r5, #32]
   17574:	mov	r0, r4
   17578:	bl	161f4 <free_node_boolean_operator@@Base>
   1757c:	add	r0, r5, #48	; 0x30
   17580:	mov	r4, #0
   17584:	ldrd	r2, [r0]
   17588:	adds	r2, r2, #1
   1758c:	adc	r3, r3, #0
   17590:	strd	r2, [r0]
   17594:	ldrd	r0, [r5, #64]	; 0x40
   17598:	adds	r0, r0, #1
   1759c:	adc	r1, r1, #0
   175a0:	strd	r0, [r5, #64]	; 0x40
   175a4:	mov	r0, r4
   175a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175ac:	andeq	r6, r1, r4, ror #17
   175b0:	andeq	r6, r1, r8, ror #17
   175b4:	push	{r4, r5, r6, lr}
   175b8:	sub	sp, sp, #8
   175bc:	ldr	r0, [pc, #112]	; 17634 <read_boolean_unary_expression@@Base+0x1c8>
   175c0:	ldr	r1, [pc, #112]	; 17638 <read_boolean_unary_expression@@Base+0x1cc>
   175c4:	movw	r2, #51015	; 0xc747
   175c8:	movt	r2, #42604	; 0xa66c
   175cc:	add	r0, pc, r0
   175d0:	add	r1, pc, r1
   175d4:	bl	17860 <read_boolean_unary_expression@@Base+0x3f4>
   175d8:	ldr	r0, [pc, #92]	; 1763c <read_boolean_unary_expression@@Base+0x1d0>
   175dc:	ldr	r6, [pc, #92]	; 17640 <read_boolean_unary_expression@@Base+0x1d4>
   175e0:	mov	r5, #0
   175e4:	add	r0, pc, r0
   175e8:	add	r6, pc, r6
   175ec:	add	r4, r0, #4
   175f0:	mov	r3, r6
   175f4:	ldr	r0, [r3, r5]!
   175f8:	ldr	r1, [r3, #16]
   175fc:	str	r1, [sp]
   17600:	ldmib	r3, {r1, r2}
   17604:	ldrb	r3, [r3, #12]
   17608:	bl	17f80 <read_boolean_unary_expression@@Base+0xb14>
   1760c:	ldrd	r0, [r4, #-4]
   17610:	bl	18834 <read_boolean_unary_expression@@Base+0x13c8>
   17614:	add	r5, r5, #20
   17618:	add	r4, r4, #8
   1761c:	cmp	r5, #220	; 0xdc
   17620:	bne	175f0 <read_boolean_unary_expression@@Base+0x184>
   17624:	bl	18fbc <read_boolean_unary_expression@@Base+0x1b50>
   17628:	add	sp, sp, #8
   1762c:	pop	{r4, r5, r6, lr}
   17630:	b	19d28 <read_boolean_unary_expression@@Base+0x28bc>
   17634:	andeq	r3, r0, fp, lsl lr
   17638:	ldrdeq	r3, [r0], -r2
   1763c:	andeq	r5, r1, r4, asr #17
   17640:	andeq	r5, r1, r0, ror #15
   17644:	push	{r4, r5, fp, lr}
   17648:	vpush	{d8-d9}
   1764c:	bl	175b4 <read_boolean_unary_expression@@Base+0x148>
   17650:	ldr	r0, [pc, #448]	; 17818 <read_boolean_unary_expression@@Base+0x3ac>
   17654:	vmov.i32	q4, #0	; 0x00000000
   17658:	mov	r4, #0
   1765c:	mov	r5, #116	; 0x74
   17660:	mov	r2, #160	; 0xa0
   17664:	add	r0, pc, r0
   17668:	vst1.64	{d8-d9}, [r0 :128]
   1766c:	ldr	r0, [pc, #424]	; 1781c <read_boolean_unary_expression@@Base+0x3b0>
   17670:	add	r0, pc, r0
   17674:	vst1.64	{d8-d9}, [r0 :128]
   17678:	ldr	r0, [pc, #416]	; 17820 <read_boolean_unary_expression@@Base+0x3b4>
   1767c:	add	r0, pc, r0
   17680:	vst1.64	{d8-d9}, [r0 :128]
   17684:	ldr	r0, [pc, #408]	; 17824 <read_boolean_unary_expression@@Base+0x3b8>
   17688:	add	r0, pc, r0
   1768c:	add	r1, r0, #16
   17690:	str	r4, [r0, #112]	; 0x70
   17694:	vst1.64	{d8-d9}, [r1 :128]
   17698:	add	r1, r0, #32
   1769c:	vst1.64	{d8-d9}, [r1 :128]
   176a0:	add	r1, r0, #48	; 0x30
   176a4:	vst1.64	{d8-d9}, [r1 :128]
   176a8:	add	r1, r0, #64	; 0x40
   176ac:	vst1.64	{d8-d9}, [r1 :128]
   176b0:	add	r1, r0, #80	; 0x50
   176b4:	vst1.64	{d8-d9}, [r1 :128]
   176b8:	add	r1, r0, #96	; 0x60
   176bc:	vst1.64	{d8-d9}, [r0 :128], r5
   176c0:	vst1.64	{d8-d9}, [r1 :128]
   176c4:	str	r4, [r0]
   176c8:	mov	r1, #0
   176cc:	ldr	r0, [pc, #340]	; 17828 <read_boolean_unary_expression@@Base+0x3bc>
   176d0:	add	r0, pc, r0
   176d4:	bl	11fa8 <memset@plt>
   176d8:	ldr	r1, [pc, #332]	; 1782c <read_boolean_unary_expression@@Base+0x3c0>
   176dc:	mov	r0, #100	; 0x64
   176e0:	add	r1, pc, r1
   176e4:	mov	r2, r1
   176e8:	vst1.64	{d8-d9}, [r2 :128], r0
   176ec:	str	r4, [r2]
   176f0:	ldr	r2, [pc, #312]	; 17830 <read_boolean_unary_expression@@Base+0x3c4>
   176f4:	add	r2, pc, r2
   176f8:	add	r0, r2, #16
   176fc:	str	r4, [r2, #64]	; 0x40
   17700:	vst1.64	{d8-d9}, [r0 :128]
   17704:	add	r0, r2, #32
   17708:	vst1.64	{d8-d9}, [r0 :128]
   1770c:	add	r0, r2, #48	; 0x30
   17710:	vst1.64	{d8-d9}, [r0 :128]
   17714:	ldr	r3, [pc, #280]	; 17834 <read_boolean_unary_expression@@Base+0x3c8>
   17718:	str	r4, [r1, #96]	; 0x60
   1771c:	add	r3, pc, r3
   17720:	add	r0, r3, #16
   17724:	vst1.64	{d8-d9}, [r0 :128]
   17728:	add	r0, r3, #32
   1772c:	vst1.64	{d8-d9}, [r0 :128]
   17730:	add	r0, r3, #48	; 0x30
   17734:	vst1.64	{d8-d9}, [r0 :128]
   17738:	add	r0, r1, #16
   1773c:	vst1.64	{d8-d9}, [r0 :128]
   17740:	add	r0, r1, #32
   17744:	vst1.64	{d8-d9}, [r0 :128]
   17748:	add	r0, r1, #48	; 0x30
   1774c:	vst1.64	{d8-d9}, [r0 :128]
   17750:	add	r0, r1, #64	; 0x40
   17754:	vst1.64	{d8-d9}, [r0 :128]
   17758:	add	r0, r1, #80	; 0x50
   1775c:	mov	r1, #64	; 0x40
   17760:	vst1.64	{d8-d9}, [r0 :128]
   17764:	mov	r0, #68	; 0x44
   17768:	vst1.64	{d8-d9}, [r3 :128], r1
   1776c:	vst1.64	{d8-d9}, [r2 :128], r0
   17770:	vst1.64	{d8-d9}, [r3 :128]
   17774:	str	r4, [r2]
   17778:	ldr	r1, [pc, #184]	; 17838 <read_boolean_unary_expression@@Base+0x3cc>
   1777c:	add	r1, pc, r1
   17780:	add	r2, r1, #16
   17784:	vst1.64	{d8-d9}, [r2 :128]
   17788:	add	r2, r1, #32
   1778c:	vst1.64	{d8-d9}, [r2 :128]
   17790:	mov	r2, #48	; 0x30
   17794:	vst1.64	{d8-d9}, [r1 :128], r2
   17798:	vst1.64	{d8-d9}, [r1 :128]
   1779c:	ldr	r1, [pc, #152]	; 1783c <read_boolean_unary_expression@@Base+0x3d0>
   177a0:	add	r1, pc, r1
   177a4:	mov	r2, r1
   177a8:	str	r4, [r1, #112]	; 0x70
   177ac:	vst1.64	{d8-d9}, [r2 :128], r5
   177b0:	str	r4, [r2]
   177b4:	add	r2, r1, #96	; 0x60
   177b8:	vst1.64	{d8-d9}, [r2 :128]
   177bc:	add	r2, r1, #80	; 0x50
   177c0:	vst1.64	{d8-d9}, [r2 :128]
   177c4:	add	r2, r1, #64	; 0x40
   177c8:	vst1.64	{d8-d9}, [r2 :128]
   177cc:	add	r2, r1, #48	; 0x30
   177d0:	vst1.64	{d8-d9}, [r2 :128]
   177d4:	add	r2, r1, #32
   177d8:	add	r1, r1, #16
   177dc:	vst1.64	{d8-d9}, [r2 :128]
   177e0:	vst1.64	{d8-d9}, [r1 :128]
   177e4:	ldr	r1, [pc, #84]	; 17840 <read_boolean_unary_expression@@Base+0x3d4>
   177e8:	add	r1, pc, r1
   177ec:	add	r2, r1, #48	; 0x30
   177f0:	str	r4, [r1, #64]	; 0x40
   177f4:	vst1.64	{d8-d9}, [r2 :128]
   177f8:	add	r2, r1, #32
   177fc:	vst1.64	{d8-d9}, [r2 :128]
   17800:	add	r2, r1, #16
   17804:	vst1.64	{d8-d9}, [r1 :128], r0
   17808:	vst1.64	{d8-d9}, [r2 :128]
   1780c:	str	r4, [r1]
   17810:	vpop	{d8-d9}
   17814:	pop	{r4, r5, fp, pc}
   17818:	strdeq	r6, [r1], -r4
   1781c:	ldrdeq	r6, [r1], -r8
   17820:	andeq	r6, r1, ip, ror #7
   17824:	strdeq	r6, [r1], -r0
   17828:	andeq	r6, r1, r8, lsr #8
   1782c:	andeq	r6, r1, r8, asr r5
   17830:	andeq	r6, r1, r4, lsr #9
   17834:	andeq	r6, r1, ip, asr #9
   17838:	andeq	r6, r1, ip, lsr #10
   1783c:	andeq	r6, r1, r8, asr #10
   17840:	andeq	r6, r1, r0, lsl #11
   17844:	ldr	r0, [pc, #12]	; 17858 <read_boolean_unary_expression@@Base+0x3ec>
   17848:	ldr	r1, [pc, #12]	; 1785c <read_boolean_unary_expression@@Base+0x3f0>
   1784c:	add	r0, pc, r0
   17850:	add	r1, pc, r1
   17854:	b	1a1dc <__gcov_flush@@Base+0xb8>
   17858:			; <UNDEFINED> instruction: 0xfffffd60
   1785c:			; <UNDEFINED> instruction: 0xfffffdec
   17860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17864:	add	fp, sp, #28
   17868:	sub	sp, sp, #36	; 0x24
   1786c:	mov	r9, r1
   17870:	mov	r6, r0
   17874:	add	r0, sp, #28
   17878:	add	r1, sp, #32
   1787c:	mov	r8, r2
   17880:	bl	1a674 <__gcov_flush@@Base+0x550>
   17884:	cmp	r0, #0
   17888:	beq	178cc <read_boolean_unary_expression@@Base+0x460>
   1788c:	mov	r4, r0
   17890:	mov	r0, r6
   17894:	ldr	r5, [sp, #32]
   17898:	bl	11f60 <strlen@plt>
   1789c:	add	r0, r5, r0
   178a0:	add	r0, r0, #2
   178a4:	bl	11f18 <malloc@plt>
   178a8:	mov	r7, r0
   178ac:	ldr	r0, [sp, #28]
   178b0:	mov	r1, r6
   178b4:	mov	r2, r4
   178b8:	str	r0, [sp]
   178bc:	mov	r0, r7
   178c0:	mov	r3, r5
   178c4:	bl	1a708 <__gcov_flush@@Base+0x5e4>
   178c8:	b	178d8 <read_boolean_unary_expression@@Base+0x46c>
   178cc:	mov	r0, r6
   178d0:	bl	11ed0 <strdup@plt>
   178d4:	mov	r7, r0
   178d8:	ldr	r0, [pc, #1492]	; 17eb4 <read_boolean_unary_expression@@Base+0xa48>
   178dc:	ldr	r6, [pc, #1492]	; 17eb8 <read_boolean_unary_expression@@Base+0xa4c>
   178e0:	mov	r1, #2
   178e4:	add	r0, pc, r0
   178e8:	add	r6, pc, r6
   178ec:	str	r7, [r0]
   178f0:	mov	r0, r7
   178f4:	mov	r5, #0
   178f8:	strb	r5, [r6]
   178fc:	bl	11ef4 <open64@plt>
   17900:	ldr	r4, [pc, #1460]	; 17ebc <read_boolean_unary_expression@@Base+0xa50>
   17904:	cmn	r0, #1
   17908:	add	r4, pc, r4
   1790c:	str	r0, [r4]
   17910:	beq	17920 <read_boolean_unary_expression@@Base+0x4b4>
   17914:	ldr	r6, [pc, #1444]	; 17ec0 <read_boolean_unary_expression@@Base+0xa54>
   17918:	add	r6, pc, r6
   1791c:	b	1797c <read_boolean_unary_expression@@Base+0x510>
   17920:	mov	r0, #1
   17924:	strb	r0, [r6]
   17928:	ldr	r0, [pc, #1488]	; 17f00 <read_boolean_unary_expression@@Base+0xa94>
   1792c:	mov	r1, #66	; 0x42
   17930:	mov	r2, #420	; 0x1a4
   17934:	ldr	r0, [pc, r0]
   17938:	bl	11ef4 <open64@plt>
   1793c:	ldr	r6, [pc, #1472]	; 17f04 <read_boolean_unary_expression@@Base+0xa98>
   17940:	cmn	r0, #1
   17944:	str	r0, [r4]
   17948:	add	r6, pc, r6
   1794c:	bne	1797c <read_boolean_unary_expression@@Base+0x510>
   17950:	ldr	r0, [pc, #1456]	; 17f08 <read_boolean_unary_expression@@Base+0xa9c>
   17954:	ldr	r0, [pc, r0]
   17958:	bl	1a2ec <__gcov_flush@@Base+0x1c8>
   1795c:	ldr	r0, [pc, #1448]	; 17f0c <read_boolean_unary_expression@@Base+0xaa0>
   17960:	mov	r1, #66	; 0x42
   17964:	mov	r2, #420	; 0x1a4
   17968:	ldr	r0, [pc, r0]
   1796c:	bl	11ef4 <open64@plt>
   17970:	cmn	r0, #1
   17974:	str	r0, [r4]
   17978:	beq	17e6c <read_boolean_unary_expression@@Base+0xa00>
   1797c:	str	r9, [sp, #20]
   17980:	str	r8, [sp, #24]
   17984:	bl	1a3b0 <__gcov_flush@@Base+0x28c>
   17988:	ldr	r0, [pc, #1332]	; 17ec4 <read_boolean_unary_expression@@Base+0xa58>
   1798c:	mov	r1, r6
   17990:	ldr	r0, [pc, r0]
   17994:	bl	11e58 <fdopen@plt>
   17998:	ldr	r7, [pc, #1320]	; 17ec8 <read_boolean_unary_expression@@Base+0xa5c>
   1799c:	ldr	r9, [pc, #1320]	; 17ecc <read_boolean_unary_expression@@Base+0xa60>
   179a0:	ldr	r1, [pc, #1320]	; 17ed0 <read_boolean_unary_expression@@Base+0xa64>
   179a4:	ldr	sl, [pc, #1320]	; 17ed4 <read_boolean_unary_expression@@Base+0xa68>
   179a8:	add	r7, pc, r7
   179ac:	add	r9, pc, r9
   179b0:	add	r1, pc, r1
   179b4:	add	sl, pc, sl
   179b8:	str	r5, [r7]
   179bc:	str	r5, [r7, #4]
   179c0:	str	r5, [r9]
   179c4:	str	r5, [r9, #4]
   179c8:	str	r0, [r1]
   179cc:	str	r5, [sl]
   179d0:	ldr	r6, [pc, #1280]	; 17ed8 <read_boolean_unary_expression@@Base+0xa6c>
   179d4:	mov	r4, #131072	; 0x20000
   179d8:	add	r6, pc, r6
   179dc:	ldrb	r1, [r6]
   179e0:	cmp	r1, #0
   179e4:	beq	17ad8 <read_boolean_unary_expression@@Base+0x66c>
   179e8:	mov	r0, r4
   179ec:	bl	11f18 <malloc@plt>
   179f0:	mov	r8, r0
   179f4:	strd	r4, [r7]
   179f8:	str	r0, [sl]
   179fc:	mov	r0, r8
   17a00:	mov	r1, #0
   17a04:	mov	r2, #131072	; 0x20000
   17a08:	bl	11fa8 <memset@plt>
   17a0c:	ldr	r0, [r9, #4]
   17a10:	ldr	r1, [pc, #1284]	; 17f1c <read_boolean_unary_expression@@Base+0xab0>
   17a14:	mov	r7, #7
   17a18:	orr	r7, r7, #131072	; 0x20000
   17a1c:	ldr	r1, [pc, r1]
   17a20:	ldr	sl, [pc, #1272]	; 17f20 <read_boolean_unary_expression@@Base+0xab4>
   17a24:	adds	r2, r1, #4
   17a28:	add	sl, pc, sl
   17a2c:	adc	r3, r0, #0
   17a30:	ldr	r5, [sl, #4]
   17a34:	ldr	r4, [pc, #1256]	; 17f24 <read_boolean_unary_expression@@Base+0xab8>
   17a38:	ldr	r4, [pc, r4]
   17a3c:	subs	r2, r4, r2
   17a40:	sbcs	r2, r5, r3
   17a44:	bcs	17b58 <read_boolean_unary_expression@@Base+0x6ec>
   17a48:	adds	r1, r7, r1
   17a4c:	adc	r0, r0, #0
   17a50:	subs	r1, r1, #4
   17a54:	sbc	r0, r0, #0
   17a58:	mvn	r2, #0
   17a5c:	and	r5, r0, r2
   17a60:	mov	r0, #16646144	; 0xfe0000
   17a64:	orr	r0, r0, #-16777216	; 0xff000000
   17a68:	and	r4, r1, r0
   17a6c:	mov	r0, r8
   17a70:	mov	r1, r4
   17a74:	bl	11edc <realloc@plt>
   17a78:	ldr	r1, [pc, #1068]	; 17eac <read_boolean_unary_expression@@Base+0xa40>
   17a7c:	strd	r4, [sl]
   17a80:	mov	r3, r0
   17a84:	mov	r7, r1
   17a88:	lsr	r2, r1, #24
   17a8c:	ldr	r1, [pc, #1176]	; 17f2c <read_boolean_unary_expression@@Base+0xac0>
   17a90:	ldrb	r6, [r6]
   17a94:	lsr	r4, r7, #16
   17a98:	add	r1, pc, r1
   17a9c:	str	r0, [r1]
   17aa0:	ldr	r1, [r9, #4]
   17aa4:	ldr	r5, [pc, #1156]	; 17f30 <read_boolean_unary_expression@@Base+0xac4>
   17aa8:	ldr	r5, [pc, r5]
   17aac:	strb	r7, [r3, r5]!
   17ab0:	strb	r2, [r3, #3]
   17ab4:	lsr	r2, r7, #8
   17ab8:	strb	r2, [r3, #1]
   17abc:	adds	r2, r5, #4
   17ac0:	adc	ip, r1, #0
   17ac4:	cmp	r6, #1
   17ac8:	strb	r4, [r3, #2]
   17acc:	stm	r9, {r2, ip}
   17ad0:	beq	17b9c <read_boolean_unary_expression@@Base+0x730>
   17ad4:	b	17d54 <read_boolean_unary_expression@@Base+0x8e8>
   17ad8:	mov	r1, #0
   17adc:	mov	r2, #2
   17ae0:	mov	r8, #0
   17ae4:	bl	12020 <fseek@plt>
   17ae8:	ldr	r0, [pc, #1004]	; 17edc <read_boolean_unary_expression@@Base+0xa70>
   17aec:	ldr	r0, [pc, r0]
   17af0:	bl	11eb8 <ftell@plt>
   17af4:	mov	r2, r0
   17af8:	ldr	r0, [pc, #992]	; 17ee0 <read_boolean_unary_expression@@Base+0xa74>
   17afc:	asr	r3, r2, #31
   17b00:	add	r0, pc, r0
   17b04:	cmp	r2, #0
   17b08:	strd	r2, [r0]
   17b0c:	beq	17dfc <read_boolean_unary_expression@@Base+0x990>
   17b10:	ldr	r0, [pc, #972]	; 17ee4 <read_boolean_unary_expression@@Base+0xa78>
   17b14:	mov	r1, r2
   17b18:	mov	r2, #3
   17b1c:	mov	r3, #1
   17b20:	ldr	r0, [pc, r0]
   17b24:	str	r8, [sp, #8]
   17b28:	str	r8, [sp, #12]
   17b2c:	str	r0, [sp]
   17b30:	mov	r0, #0
   17b34:	bl	11eac <mmap64@plt>
   17b38:	cmn	r0, #1
   17b3c:	str	r0, [sl]
   17b40:	beq	17dc4 <read_boolean_unary_expression@@Base+0x958>
   17b44:	ldrb	r1, [r6]
   17b48:	cmp	r1, #0
   17b4c:	beq	17d14 <read_boolean_unary_expression@@Base+0x8a8>
   17b50:	mov	r8, r0
   17b54:	b	17a0c <read_boolean_unary_expression@@Base+0x5a0>
   17b58:	ldr	r1, [r9, #4]
   17b5c:	ldr	r5, [pc, #964]	; 17f28 <read_boolean_unary_expression@@Base+0xabc>
   17b60:	ldr	r0, [pc, #836]	; 17eac <read_boolean_unary_expression@@Base+0xa40>
   17b64:	mov	r6, r8
   17b68:	ldr	r5, [pc, r5]
   17b6c:	mov	r7, r0
   17b70:	lsr	r2, r7, #16
   17b74:	strb	r7, [r6, r5]!
   17b78:	lsr	r0, r0, #24
   17b7c:	lsr	r3, r7, #8
   17b80:	strb	r2, [r6, #2]
   17b84:	adds	r2, r5, #4
   17b88:	strb	r0, [r6, #3]
   17b8c:	strb	r3, [r6, #1]
   17b90:	adc	ip, r1, #0
   17b94:	stm	r9, {r2, ip}
   17b98:	mov	r0, r8
   17b9c:	ldr	r7, [sl, #4]
   17ba0:	ldr	r3, [pc, #908]	; 17f34 <read_boolean_unary_expression@@Base+0xac8>
   17ba4:	adds	r6, r5, #8
   17ba8:	adc	r4, r1, #0
   17bac:	ldr	r3, [pc, r3]
   17bb0:	subs	r3, r3, r6
   17bb4:	sbcs	r3, r7, r4
   17bb8:	bcs	17c5c <read_boolean_unary_expression@@Base+0x7f0>
   17bbc:	mov	r2, #7
   17bc0:	orr	r2, r2, #131072	; 0x20000
   17bc4:	adds	r2, r5, r2
   17bc8:	adc	r1, r1, #0
   17bcc:	mvn	r3, #0
   17bd0:	and	r5, r1, r3
   17bd4:	mov	r1, #16646144	; 0xfe0000
   17bd8:	orr	r1, r1, #-16777216	; 0xff000000
   17bdc:	and	r4, r2, r1
   17be0:	mov	r1, r4
   17be4:	bl	11edc <realloc@plt>
   17be8:	strd	r4, [sl]
   17bec:	ldr	r1, [pc, #840]	; 17f3c <read_boolean_unary_expression@@Base+0xad0>
   17bf0:	mov	r4, r0
   17bf4:	mov	lr, r9
   17bf8:	add	r1, pc, r1
   17bfc:	str	r0, [r1]
   17c00:	ldr	r1, [pc, #824]	; 17f40 <read_boolean_unary_expression@@Base+0xad4>
   17c04:	ldr	r2, [sp, #20]
   17c08:	ldr	ip, [r9, #4]
   17c0c:	add	r1, pc, r1
   17c10:	ldrb	r3, [r1]
   17c14:	ldrb	r1, [r2]
   17c18:	ldrb	r7, [r2, #1]
   17c1c:	ldrb	r6, [r2, #2]
   17c20:	ldrb	r5, [r2, #3]
   17c24:	ldr	r2, [pc, #792]	; 17f44 <read_boolean_unary_expression@@Base+0xad8>
   17c28:	ldr	r2, [pc, r2]
   17c2c:	strb	r1, [r4, r2]!
   17c30:	strb	r5, [r4, #3]
   17c34:	ldr	r5, [sp, #24]
   17c38:	strb	r6, [r4, #2]
   17c3c:	adds	r6, r2, #4
   17c40:	adc	r1, ip, #0
   17c44:	cmp	r3, #1
   17c48:	str	r6, [lr]
   17c4c:	strb	r7, [r4, #1]
   17c50:	str	r1, [lr, #4]
   17c54:	beq	17c9c <read_boolean_unary_expression@@Base+0x830>
   17c58:	b	17d94 <read_boolean_unary_expression@@Base+0x928>
   17c5c:	ldr	r6, [sp, #20]
   17c60:	mov	r5, r0
   17c64:	ldrb	r1, [r6]
   17c68:	ldrb	r3, [r6, #1]
   17c6c:	ldrb	r7, [r6, #2]
   17c70:	ldrb	r6, [r6, #3]
   17c74:	strb	r1, [r5, r2]!
   17c78:	strb	r6, [r5, #3]
   17c7c:	strb	r3, [r5, #1]
   17c80:	adds	r6, r2, #4
   17c84:	mov	r3, r9
   17c88:	adc	r1, ip, #0
   17c8c:	strb	r7, [r5, #2]
   17c90:	str	r6, [r3]
   17c94:	str	r1, [r3, #4]
   17c98:	ldr	r5, [sp, #24]
   17c9c:	ldr	r7, [sl, #4]
   17ca0:	ldr	r4, [pc, #672]	; 17f48 <read_boolean_unary_expression@@Base+0xadc>
   17ca4:	adds	r3, r2, #8
   17ca8:	adc	lr, ip, #0
   17cac:	ldr	r4, [pc, r4]
   17cb0:	subs	r3, r4, r3
   17cb4:	sbcs	r3, r7, lr
   17cb8:	bcs	17d0c <read_boolean_unary_expression@@Base+0x8a0>
   17cbc:	mov	r1, #7
   17cc0:	orr	r1, r1, #131072	; 0x20000
   17cc4:	adds	r1, r2, r1
   17cc8:	adc	r2, ip, #0
   17ccc:	mvn	r3, #0
   17cd0:	and	r7, r2, r3
   17cd4:	mov	r2, #16646144	; 0xfe0000
   17cd8:	orr	r2, r2, #-16777216	; 0xff000000
   17cdc:	and	r4, r1, r2
   17ce0:	mov	r1, r4
   17ce4:	bl	11edc <realloc@plt>
   17ce8:	stm	sl, {r4, r7}
   17cec:	ldr	r1, [r9, #4]
   17cf0:	ldr	r2, [pc, #596]	; 17f4c <read_boolean_unary_expression@@Base+0xae0>
   17cf4:	mov	lr, r9
   17cf8:	add	r2, pc, r2
   17cfc:	str	r0, [r2]
   17d00:	ldr	r6, [pc, #584]	; 17f50 <read_boolean_unary_expression@@Base+0xae4>
   17d04:	ldr	r6, [pc, r6]
   17d08:	b	17d94 <read_boolean_unary_expression@@Base+0x928>
   17d0c:	mov	lr, r9
   17d10:	b	17d94 <read_boolean_unary_expression@@Base+0x928>
   17d14:	ldr	r6, [r9, #4]
   17d18:	ldr	r5, [pc, #536]	; 17f38 <read_boolean_unary_expression@@Base+0xacc>
   17d1c:	ldr	r1, [pc, #392]	; 17eac <read_boolean_unary_expression@@Base+0xa40>
   17d20:	mov	r4, r0
   17d24:	ldr	r5, [pc, r5]
   17d28:	mov	r7, r1
   17d2c:	lsr	r2, r7, #16
   17d30:	strb	r7, [r4, r5]!
   17d34:	lsr	r1, r1, #24
   17d38:	strb	r2, [r4, #2]
   17d3c:	adds	r2, r5, #4
   17d40:	lsr	r3, r7, #8
   17d44:	adc	ip, r6, #0
   17d48:	strb	r1, [r4, #3]
   17d4c:	strb	r3, [r4, #1]
   17d50:	stm	r9, {r2, ip}
   17d54:	ldr	r4, [sp, #20]
   17d58:	mov	r5, r0
   17d5c:	mov	lr, r9
   17d60:	ldrb	r1, [r4]
   17d64:	ldrb	r6, [r4, #3]
   17d68:	ldrb	r3, [r4, #1]
   17d6c:	ldrb	r7, [r4, #2]
   17d70:	strb	r1, [r5, r2]!
   17d74:	strb	r6, [r5, #3]
   17d78:	adds	r6, r2, #4
   17d7c:	adc	r1, ip, #0
   17d80:	strb	r7, [r5, #2]
   17d84:	strb	r3, [r5, #1]
   17d88:	str	r6, [lr]
   17d8c:	str	r1, [lr, #4]
   17d90:	ldr	r5, [sp, #24]
   17d94:	lsr	r2, r5, #24
   17d98:	strb	r5, [r0, r6]!
   17d9c:	lsr	r3, r5, #16
   17da0:	lsr	r7, r5, #8
   17da4:	strb	r2, [r0, #3]
   17da8:	strb	r3, [r0, #2]
   17dac:	strb	r7, [r0, #1]
   17db0:	adds	r0, r6, #4
   17db4:	adc	r1, r1, #0
   17db8:	strd	r0, [lr]
   17dbc:	sub	sp, fp, #28
   17dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dc4:	bl	11f84 <__errno_location@plt>
   17dc8:	ldr	r1, [pc, #280]	; 17ee8 <read_boolean_unary_expression@@Base+0xa7c>
   17dcc:	ldr	r1, [pc, r1]
   17dd0:	ldr	r0, [r0]
   17dd4:	ldr	r4, [r1]
   17dd8:	ldr	r5, [pc, #268]	; 17eec <read_boolean_unary_expression@@Base+0xa80>
   17ddc:	ldr	r5, [pc, r5]
   17de0:	bl	11f30 <strerror@plt>
   17de4:	ldr	r1, [pc, #260]	; 17ef0 <read_boolean_unary_expression@@Base+0xa84>
   17de8:	mov	r3, r0
   17dec:	mov	r0, r4
   17df0:	add	r1, pc, r1
   17df4:	mov	r2, r5
   17df8:	bl	11f78 <fprintf@plt>
   17dfc:	ldr	r0, [pc, #240]	; 17ef4 <read_boolean_unary_expression@@Base+0xa88>
   17e00:	str	r8, [sl]
   17e04:	mov	r2, #16646144	; 0xfe0000
   17e08:	add	r0, pc, r0
   17e0c:	orr	r2, r2, #-16777216	; 0xff000000
   17e10:	str	r8, [r0]
   17e14:	str	r8, [r0, #4]
   17e18:	mov	r0, #1
   17e1c:	strb	r0, [r6]
   17e20:	ldr	r0, [r9, #4]
   17e24:	ldr	r1, [pc, #204]	; 17ef8 <read_boolean_unary_expression@@Base+0xa8c>
   17e28:	mvn	r3, #0
   17e2c:	eor	r3, r0, r3
   17e30:	ldr	r1, [pc, r1]
   17e34:	eor	r2, r1, r2
   17e38:	orrs	r2, r2, r3
   17e3c:	beq	179fc <read_boolean_unary_expression@@Base+0x590>
   17e40:	ldr	r2, [pc, #104]	; 17eb0 <read_boolean_unary_expression@@Base+0xa44>
   17e44:	ldr	r7, [pc, #176]	; 17efc <read_boolean_unary_expression@@Base+0xa90>
   17e48:	adds	r1, r1, r2
   17e4c:	mov	r2, #16646144	; 0xfe0000
   17e50:	orr	r2, r2, #-16777216	; 0xff000000
   17e54:	and	r4, r1, r2
   17e58:	adc	r0, r0, #0
   17e5c:	mvn	r1, #0
   17e60:	and	r5, r0, r1
   17e64:	add	r7, pc, r7
   17e68:	b	179e8 <read_boolean_unary_expression@@Base+0x57c>
   17e6c:	bl	11f84 <__errno_location@plt>
   17e70:	ldr	r1, [pc, #152]	; 17f10 <read_boolean_unary_expression@@Base+0xaa4>
   17e74:	ldr	r1, [pc, r1]
   17e78:	ldr	r0, [r0]
   17e7c:	ldr	r4, [r1]
   17e80:	ldr	r5, [pc, #140]	; 17f14 <read_boolean_unary_expression@@Base+0xaa8>
   17e84:	ldr	r5, [pc, r5]
   17e88:	bl	11f30 <strerror@plt>
   17e8c:	ldr	r1, [pc, #132]	; 17f18 <read_boolean_unary_expression@@Base+0xaac>
   17e90:	mov	r3, r0
   17e94:	mov	r0, r4
   17e98:	add	r1, pc, r1
   17e9c:	mov	r2, r5
   17ea0:	bl	11f78 <fprintf@plt>
   17ea4:	sub	sp, fp, #28
   17ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17eac:	strbvs	r6, [r3, -r1, ror #8]!
   17eb0:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   17eb4:	andeq	r6, r1, ip, asr #9
   17eb8:	andeq	r6, r1, ip, asr #9
   17ebc:	ldrdeq	r5, [r1], -r8
   17ec0:	andeq	r3, r0, r7, lsr #24
   17ec4:	andeq	r5, r1, r0, asr r7
   17ec8:	andeq	r6, r1, r8, lsl r4
   17ecc:	andeq	r6, r1, ip, lsl r4
   17ed0:	andeq	r6, r1, r8, lsl #8
   17ed4:	andeq	r6, r1, r8, lsl #8
   17ed8:	ldrdeq	r6, [r1], -ip
   17edc:	andeq	r6, r1, ip, asr #5
   17ee0:	andeq	r6, r1, r0, ror #5
   17ee4:	andeq	r5, r1, r0, asr #11
   17ee8:	strdeq	r5, [r1], -r0
   17eec:	ldrdeq	r5, [r1], -r4
   17ef0:			; <UNDEFINED> instruction: 0x000038b1
   17ef4:			; <UNDEFINED> instruction: 0x00015fb8
   17ef8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17efc:	andeq	r5, r1, ip, asr pc
   17f00:	andeq	r6, r1, ip, ror r4
   17f04:	strdeq	r3, [r0], -fp
   17f08:	andeq	r6, r1, ip, asr r4
   17f0c:	andeq	r6, r1, r8, asr #8
   17f10:	andeq	r5, r1, r8, asr #4
   17f14:	andeq	r5, r1, ip, lsr #30
   17f18:	andeq	r3, r0, pc, lsr #13
   17f1c:	andeq	r6, r1, ip, lsr #7
   17f20:	muleq	r1, r8, r3
   17f24:	andeq	r6, r1, r8, lsl #7
   17f28:	andeq	r6, r1, r0, ror #4
   17f2c:	andeq	r6, r1, r4, lsr #6
   17f30:	andeq	r6, r1, r0, lsr #6
   17f34:	andeq	r6, r1, r4, lsl r2
   17f38:	andeq	r6, r1, r4, lsr #1
   17f3c:	andeq	r6, r1, r4, asr #3
   17f40:	andeq	r6, r1, r8, lsr #3
   17f44:	andeq	r6, r1, r0, lsr #3
   17f48:	andeq	r6, r1, r4, lsl r1
   17f4c:	andeq	r6, r1, r4, asr #1
   17f50:	andeq	r6, r1, r4, asr #1
   17f54:	ldr	r0, [r0]
   17f58:	cmn	r0, #1
   17f5c:	beq	17f7c <read_boolean_unary_expression@@Base+0xb10>
   17f60:	ldr	r0, [r1, r0, lsl #2]
   17f64:	cmp	r0, #0
   17f68:	bxeq	lr
   17f6c:	ldrd	r2, [r0]
   17f70:	adds	r2, r2, #1
   17f74:	adc	r3, r3, #0
   17f78:	strd	r2, [r0]
   17f7c:	bx	lr
   17f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f84:	add	fp, sp, #28
   17f88:	sub	sp, sp, #12
   17f8c:	ldr	r7, [pc, #2008]	; 1876c <read_boolean_unary_expression@@Base+0x1300>
   17f90:	mov	sl, #2
   17f94:	cmp	r3, #0
   17f98:	movne	sl, #3
   17f9c:	ldr	r7, [pc, r7]
   17fa0:	cmp	r7, #0
   17fa4:	beq	18764 <read_boolean_unary_expression@@Base+0x12f8>
   17fa8:	stm	sp, {r0, r2, r3}
   17fac:	ldr	r0, [pc, #1980]	; 18770 <read_boolean_unary_expression@@Base+0x1304>
   17fb0:	mov	r5, r1
   17fb4:	add	r0, pc, r0
   17fb8:	ldrb	r0, [r0]
   17fbc:	ldr	r8, [pc, #1968]	; 18774 <read_boolean_unary_expression@@Base+0x1308>
   17fc0:	cmp	r0, #1
   17fc4:	add	r8, pc, r8
   17fc8:	bne	1804c <read_boolean_unary_expression@@Base+0xbe0>
   17fcc:	ldr	r4, [pc, #1956]	; 18778 <read_boolean_unary_expression@@Base+0x130c>
   17fd0:	ldr	r0, [r8, #4]
   17fd4:	ldr	r1, [pc, #1952]	; 1877c <read_boolean_unary_expression@@Base+0x1310>
   17fd8:	add	r4, pc, r4
   17fdc:	ldr	r1, [pc, r1]
   17fe0:	ldr	r7, [r4, #4]
   17fe4:	ldr	r6, [pc, #1940]	; 18780 <read_boolean_unary_expression@@Base+0x1314>
   17fe8:	adds	r2, r1, #4
   17fec:	adc	r3, r0, #0
   17ff0:	ldr	r6, [pc, r6]
   17ff4:	subs	r2, r6, r2
   17ff8:	sbcs	r2, r7, r3
   17ffc:	bcs	1804c <read_boolean_unary_expression@@Base+0xbe0>
   18000:	mov	r2, #7
   18004:	orr	r2, r2, #131072	; 0x20000
   18008:	adds	r1, r2, r1
   1800c:	adc	r0, r0, #0
   18010:	subs	r1, r1, #4
   18014:	sbc	r0, r0, #0
   18018:	mvn	r2, #0
   1801c:	and	r7, r0, r2
   18020:	mov	r0, #16646144	; 0xfe0000
   18024:	orr	r0, r0, #-16777216	; 0xff000000
   18028:	ldr	r9, [pc, #1876]	; 18784 <read_boolean_unary_expression@@Base+0x1318>
   1802c:	and	r6, r1, r0
   18030:	ldr	r0, [pc, #1872]	; 18788 <read_boolean_unary_expression@@Base+0x131c>
   18034:	mov	r1, r6
   18038:	add	r9, pc, r9
   1803c:	ldr	r0, [pc, r0]
   18040:	bl	11edc <realloc@plt>
   18044:	strd	r6, [r4]
   18048:	str	r0, [r9]
   1804c:	ldr	r7, [pc, #1848]	; 1878c <read_boolean_unary_expression@@Base+0x1320>
   18050:	mov	r0, #0
   18054:	mov	r2, #1
   18058:	ldr	r7, [pc, r7]
   1805c:	ldr	ip, [pc, #1836]	; 18790 <read_boolean_unary_expression@@Base+0x1324>
   18060:	adds	r4, r7, #4
   18064:	ldr	ip, [pc, ip]
   18068:	ldr	r6, [r8, #4]
   1806c:	mov	r1, ip
   18070:	adc	r9, r6, #0
   18074:	strb	r0, [r1, r7]!
   18078:	cmp	r5, #0
   1807c:	strb	r2, [r1, #3]
   18080:	strb	r0, [r1, #2]
   18084:	strb	r0, [r1, #1]
   18088:	stm	r8, {r4, r9}
   1808c:	mov	r8, r5
   18090:	beq	180ac <read_boolean_unary_expression@@Base+0xc40>
   18094:	mov	r0, r8
   18098:	mov	r5, ip
   1809c:	bl	11f60 <strlen@plt>
   180a0:	add	r0, sl, r0, lsr #2
   180a4:	mov	ip, r5
   180a8:	add	sl, r0, #2
   180ac:	ldr	r0, [pc, #1760]	; 18794 <read_boolean_unary_expression@@Base+0x1328>
   180b0:	add	r0, pc, r0
   180b4:	ldrb	r0, [r0]
   180b8:	cmp	r0, #0
   180bc:	beq	18198 <read_boolean_unary_expression@@Base+0xd2c>
   180c0:	ldr	lr, [pc, #1748]	; 1879c <read_boolean_unary_expression@@Base+0x1330>
   180c4:	adds	r0, r7, #8
   180c8:	adc	r1, r6, #0
   180cc:	add	lr, pc, lr
   180d0:	ldr	r2, [lr, #4]
   180d4:	ldr	r3, [pc, #1732]	; 187a0 <read_boolean_unary_expression@@Base+0x1334>
   180d8:	ldr	r3, [pc, r3]
   180dc:	subs	r0, r3, r0
   180e0:	sbcs	r0, r2, r1
   180e4:	bcs	18204 <read_boolean_unary_expression@@Base+0xd98>
   180e8:	mov	r0, #7
   180ec:	orr	r0, r0, #131072	; 0x20000
   180f0:	adds	r0, r7, r0
   180f4:	adc	r1, r6, #0
   180f8:	mvn	r2, #0
   180fc:	and	r5, r1, r2
   18100:	mov	r1, #16646144	; 0xfe0000
   18104:	orr	r1, r1, #-16777216	; 0xff000000
   18108:	and	r6, r0, r1
   1810c:	ldr	r4, [pc, #1684]	; 187a8 <read_boolean_unary_expression@@Base+0x133c>
   18110:	mov	r0, ip
   18114:	mov	r1, r6
   18118:	add	r4, pc, r4
   1811c:	mov	r7, lr
   18120:	bl	11edc <realloc@plt>
   18124:	mov	lr, r7
   18128:	mov	ip, r0
   1812c:	str	r6, [lr]
   18130:	str	r5, [lr, #4]
   18134:	str	ip, [r4]
   18138:	ldr	r1, [pc, #1644]	; 187ac <read_boolean_unary_expression@@Base+0x1340>
   1813c:	lsr	r0, sl, #24
   18140:	add	r1, pc, r1
   18144:	lsr	r3, sl, #16
   18148:	ldrb	r2, [r1]
   1814c:	ldr	r1, [pc, #1628]	; 187b0 <read_boolean_unary_expression@@Base+0x1344>
   18150:	add	r1, pc, r1
   18154:	mov	r7, r1
   18158:	ldr	r9, [r1, #4]
   1815c:	ldr	r4, [pc, #1616]	; 187b4 <read_boolean_unary_expression@@Base+0x1348>
   18160:	mov	r1, ip
   18164:	ldr	r4, [pc, r4]
   18168:	strb	sl, [r1, r4]!
   1816c:	strb	r0, [r1, #3]
   18170:	lsr	r0, sl, #8
   18174:	strb	r0, [r1, #1]
   18178:	adds	r0, r4, #4
   1817c:	strb	r3, [r1, #2]
   18180:	adc	r1, r9, #0
   18184:	mov	sl, r7
   18188:	cmp	r2, #1
   1818c:	strd	r0, [sl]
   18190:	bne	181cc <read_boolean_unary_expression@@Base+0xd60>
   18194:	b	18238 <read_boolean_unary_expression@@Base+0xdcc>
   18198:	mov	r3, ip
   1819c:	lsr	r0, sl, #24
   181a0:	strb	sl, [r3, r4]!
   181a4:	lsr	r1, sl, #16
   181a8:	lsr	r2, sl, #8
   181ac:	strb	r0, [r3, #3]
   181b0:	strb	r1, [r3, #2]
   181b4:	strb	r2, [r3, #1]
   181b8:	ldr	sl, [pc, #1496]	; 18798 <read_boolean_unary_expression@@Base+0x132c>
   181bc:	adds	r0, r7, #8
   181c0:	adc	r1, r6, #0
   181c4:	add	sl, pc, sl
   181c8:	strd	r0, [sl]
   181cc:	ldr	r5, [sp]
   181d0:	mov	r6, ip
   181d4:	lsr	r2, r5, #24
   181d8:	strb	r5, [r6, r0]!
   181dc:	lsr	r3, r5, #16
   181e0:	lsr	r7, r5, #8
   181e4:	strb	r2, [r6, #3]
   181e8:	strb	r3, [r6, #2]
   181ec:	strb	r7, [r6, #1]
   181f0:	adds	r2, r0, #4
   181f4:	adc	r3, r1, #0
   181f8:	ldmib	sp, {r5, r9}
   181fc:	strd	r2, [sl]
   18200:	b	183ac <read_boolean_unary_expression@@Base+0xf40>
   18204:	mov	r3, ip
   18208:	lsr	r0, sl, #24
   1820c:	strb	sl, [r3, r4]!
   18210:	lsr	r1, sl, #16
   18214:	lsr	r2, sl, #8
   18218:	strb	r0, [r3, #3]
   1821c:	strb	r1, [r3, #2]
   18220:	strb	r2, [r3, #1]
   18224:	ldr	sl, [pc, #1400]	; 187a4 <read_boolean_unary_expression@@Base+0x1338>
   18228:	adds	r0, r7, #8
   1822c:	adc	r1, r6, #0
   18230:	add	sl, pc, sl
   18234:	strd	r0, [sl]
   18238:	ldr	r7, [lr, #4]
   1823c:	ldr	r6, [pc, #1396]	; 187b8 <read_boolean_unary_expression@@Base+0x134c>
   18240:	adds	r2, r4, #8
   18244:	adc	r3, r9, #0
   18248:	ldr	r6, [pc, r6]
   1824c:	subs	r2, r6, r2
   18250:	sbcs	r2, r7, r3
   18254:	bcs	182fc <read_boolean_unary_expression@@Base+0xe90>
   18258:	mov	r0, #7
   1825c:	orr	r0, r0, #131072	; 0x20000
   18260:	adds	r0, r4, r0
   18264:	adc	r1, r9, #0
   18268:	mvn	r2, #0
   1826c:	and	r5, r1, r2
   18270:	mov	r1, #16646144	; 0xfe0000
   18274:	orr	r1, r1, #-16777216	; 0xff000000
   18278:	and	r4, r0, r1
   1827c:	ldr	r7, [pc, #1336]	; 187bc <read_boolean_unary_expression@@Base+0x1350>
   18280:	mov	r0, ip
   18284:	mov	r1, r4
   18288:	add	r7, pc, r7
   1828c:	mov	r6, lr
   18290:	bl	11edc <realloc@plt>
   18294:	mov	lr, r6
   18298:	str	r0, [r7]
   1829c:	strd	r4, [lr]
   182a0:	mov	ip, r0
   182a4:	ldr	r6, [sp]
   182a8:	ldr	r0, [pc, #1296]	; 187c0 <read_boolean_unary_expression@@Base+0x1354>
   182ac:	ldr	r1, [sl, #4]
   182b0:	mov	r3, ip
   182b4:	add	r0, pc, r0
   182b8:	lsr	r2, r6, #24
   182bc:	ldrb	r7, [r0]
   182c0:	ldr	r0, [pc, #1276]	; 187c4 <read_boolean_unary_expression@@Base+0x1358>
   182c4:	ldr	r0, [pc, r0]
   182c8:	strb	r6, [r3, r0]!
   182cc:	ldmib	sp, {r5, r9}
   182d0:	strb	r2, [r3, #3]
   182d4:	lsr	r2, r6, #8
   182d8:	lsr	r6, r6, #16
   182dc:	strb	r2, [r3, #1]
   182e0:	adds	r2, r0, #4
   182e4:	strb	r6, [r3, #2]
   182e8:	adc	r3, r1, #0
   182ec:	cmp	r7, #1
   182f0:	strd	r2, [sl]
   182f4:	beq	18330 <read_boolean_unary_expression@@Base+0xec4>
   182f8:	b	183ac <read_boolean_unary_expression@@Base+0xf40>
   182fc:	ldr	r5, [sp]
   18300:	mov	r6, ip
   18304:	lsr	r2, r5, #24
   18308:	strb	r5, [r6, r0]!
   1830c:	lsr	r3, r5, #16
   18310:	lsr	r7, r5, #8
   18314:	strb	r2, [r6, #3]
   18318:	strb	r3, [r6, #2]
   1831c:	strb	r7, [r6, #1]
   18320:	adds	r2, r0, #4
   18324:	adc	r3, r1, #0
   18328:	ldmib	sp, {r5, r9}
   1832c:	strd	r2, [sl]
   18330:	str	r8, [sp, #8]
   18334:	mov	r8, lr
   18338:	adds	r7, r0, #8
   1833c:	ldr	r6, [r8, #4]
   18340:	ldr	r4, [pc, #1152]	; 187c8 <read_boolean_unary_expression@@Base+0x135c>
   18344:	adc	lr, r1, #0
   18348:	ldr	r4, [pc, r4]
   1834c:	subs	r7, r4, r7
   18350:	sbcs	r7, r6, lr
   18354:	bcs	183a8 <read_boolean_unary_expression@@Base+0xf3c>
   18358:	mov	r2, #7
   1835c:	orr	r2, r2, #131072	; 0x20000
   18360:	adds	r0, r0, r2
   18364:	adc	r1, r1, #0
   18368:	mvn	r2, #0
   1836c:	and	r7, r1, r2
   18370:	mov	r1, #16646144	; 0xfe0000
   18374:	orr	r1, r1, #-16777216	; 0xff000000
   18378:	and	r6, r0, r1
   1837c:	ldr	r4, [pc, #1096]	; 187cc <read_boolean_unary_expression@@Base+0x1360>
   18380:	mov	r0, ip
   18384:	mov	r1, r6
   18388:	add	r4, pc, r4
   1838c:	bl	11edc <realloc@plt>
   18390:	strd	r6, [r8]
   18394:	str	r0, [r4]
   18398:	ldr	r3, [sl, #4]
   1839c:	ldr	r2, [pc, #1068]	; 187d0 <read_boolean_unary_expression@@Base+0x1364>
   183a0:	mov	ip, r0
   183a4:	ldr	r2, [pc, r2]
   183a8:	ldr	r8, [sp, #8]
   183ac:	mov	r6, ip
   183b0:	lsr	r7, r5, #8
   183b4:	strb	r5, [r6, r2]!
   183b8:	adds	r4, r2, #4
   183bc:	lsr	r0, r5, #24
   183c0:	lsr	r1, r5, #16
   183c4:	strb	r7, [r6, #1]
   183c8:	adc	r7, r3, #0
   183cc:	cmp	r9, #0
   183d0:	strb	r0, [r6, #3]
   183d4:	strb	r1, [r6, #2]
   183d8:	stm	sl, {r4, r7}
   183dc:	beq	184b0 <read_boolean_unary_expression@@Base+0x1044>
   183e0:	ldr	r0, [pc, #1004]	; 187d4 <read_boolean_unary_expression@@Base+0x1368>
   183e4:	ldr	sl, [fp, #8]
   183e8:	add	r0, pc, r0
   183ec:	ldrb	r0, [r0]
   183f0:	cmp	r0, #1
   183f4:	bne	1847c <read_boolean_unary_expression@@Base+0x1010>
   183f8:	ldr	r9, [pc, #984]	; 187d8 <read_boolean_unary_expression@@Base+0x136c>
   183fc:	adds	r0, r2, #8
   18400:	adc	r1, r3, #0
   18404:	add	r9, pc, r9
   18408:	ldr	r6, [r9, #4]
   1840c:	ldr	r5, [pc, #968]	; 187dc <read_boolean_unary_expression@@Base+0x1370>
   18410:	ldr	r5, [pc, r5]
   18414:	subs	r0, r5, r0
   18418:	sbcs	r0, r6, r1
   1841c:	bcs	1847c <read_boolean_unary_expression@@Base+0x1010>
   18420:	mov	r0, #7
   18424:	orr	r0, r0, #131072	; 0x20000
   18428:	adds	r0, r2, r0
   1842c:	adc	r1, r3, #0
   18430:	mvn	r2, #0
   18434:	and	r5, r1, r2
   18438:	mov	r1, #16646144	; 0xfe0000
   1843c:	orr	r1, r1, #-16777216	; 0xff000000
   18440:	and	r6, r0, r1
   18444:	ldr	r4, [pc, #916]	; 187e0 <read_boolean_unary_expression@@Base+0x1374>
   18448:	mov	r0, ip
   1844c:	mov	r1, r6
   18450:	add	r4, pc, r4
   18454:	bl	11edc <realloc@plt>
   18458:	str	r6, [r9]
   1845c:	str	r5, [r9, #4]
   18460:	mov	ip, r0
   18464:	ldr	r0, [pc, #888]	; 187e4 <read_boolean_unary_expression@@Base+0x1378>
   18468:	str	ip, [r4]
   1846c:	add	r0, pc, r0
   18470:	ldr	r7, [r0, #4]
   18474:	ldr	r4, [pc, #876]	; 187e8 <read_boolean_unary_expression@@Base+0x137c>
   18478:	ldr	r4, [pc, r4]
   1847c:	mov	r3, ip
   18480:	lsr	r0, sl, #24
   18484:	strb	sl, [r3, r4]!
   18488:	lsr	r1, sl, #16
   1848c:	lsr	r2, sl, #8
   18490:	strb	r0, [r3, #3]
   18494:	strb	r1, [r3, #2]
   18498:	strb	r2, [r3, #1]
   1849c:	ldr	sl, [pc, #840]	; 187ec <read_boolean_unary_expression@@Base+0x1380>
   184a0:	adds	r4, r4, #4
   184a4:	adc	r7, r7, #0
   184a8:	add	sl, pc, sl
   184ac:	stm	sl, {r4, r7}
   184b0:	cmp	r8, #0
   184b4:	beq	18764 <read_boolean_unary_expression@@Base+0x12f8>
   184b8:	mov	r0, r8
   184bc:	mov	r9, ip
   184c0:	bl	11f60 <strlen@plt>
   184c4:	mov	r6, #1
   184c8:	add	r5, r6, r0, lsr #2
   184cc:	ldr	r0, [pc, #796]	; 187f0 <read_boolean_unary_expression@@Base+0x1384>
   184d0:	add	r0, pc, r0
   184d4:	ldrb	r0, [r0]
   184d8:	cmp	r0, #1
   184dc:	bne	18580 <read_boolean_unary_expression@@Base+0x1114>
   184e0:	ldr	sl, [pc, #780]	; 187f4 <read_boolean_unary_expression@@Base+0x1388>
   184e4:	adds	r0, r4, #4
   184e8:	adc	r1, r7, #0
   184ec:	add	sl, pc, sl
   184f0:	ldr	r2, [sl, #4]
   184f4:	ldr	r3, [pc, #764]	; 187f8 <read_boolean_unary_expression@@Base+0x138c>
   184f8:	ldr	r3, [pc, r3]
   184fc:	subs	r0, r3, r0
   18500:	sbcs	r0, r2, r1
   18504:	bcs	18594 <read_boolean_unary_expression@@Base+0x1128>
   18508:	mov	r0, #0
   1850c:	str	r0, [sp, #8]
   18510:	mov	r0, #7
   18514:	orr	r0, r0, #131072	; 0x20000
   18518:	adds	r0, r0, r4
   1851c:	adc	r1, r7, #0
   18520:	subs	r0, r0, #4
   18524:	sbc	r1, r1, #0
   18528:	mvn	r2, #0
   1852c:	and	r7, r1, r2
   18530:	mov	r1, #16646144	; 0xfe0000
   18534:	orr	r1, r1, #-16777216	; 0xff000000
   18538:	and	r4, r0, r1
   1853c:	ldr	r6, [pc, #700]	; 18800 <read_boolean_unary_expression@@Base+0x1394>
   18540:	mov	r0, r9
   18544:	mov	r1, r4
   18548:	add	r6, pc, r6
   1854c:	bl	11edc <realloc@plt>
   18550:	stm	sl, {r4, r7}
   18554:	str	r0, [r6]
   18558:	ldr	sl, [pc, #676]	; 18804 <read_boolean_unary_expression@@Base+0x1398>
   1855c:	mov	r3, r0
   18560:	add	sl, pc, sl
   18564:	ldr	r7, [sl, #4]
   18568:	ldr	r0, [pc, #664]	; 18808 <read_boolean_unary_expression@@Base+0x139c>
   1856c:	add	r0, pc, r0
   18570:	ldrb	r6, [r0]
   18574:	ldr	r4, [pc, #656]	; 1880c <read_boolean_unary_expression@@Base+0x13a0>
   18578:	ldr	r4, [pc, r4]
   1857c:	b	185a8 <read_boolean_unary_expression@@Base+0x113c>
   18580:	mov	r0, #0
   18584:	str	r0, [sp, #8]
   18588:	mov	r6, #0
   1858c:	mov	r3, r9
   18590:	b	185a8 <read_boolean_unary_expression@@Base+0x113c>
   18594:	mov	r0, #0
   18598:	str	r0, [sp, #8]
   1859c:	ldr	sl, [pc, #600]	; 187fc <read_boolean_unary_expression@@Base+0x1390>
   185a0:	mov	r3, r9
   185a4:	add	sl, pc, sl
   185a8:	mov	r9, r3
   185ac:	strb	r5, [r3, r4]!
   185b0:	lsr	r0, r5, #24
   185b4:	adds	r4, r4, #4
   185b8:	lsr	r1, r5, #16
   185bc:	lsr	r2, r5, #8
   185c0:	strb	r0, [r3, #3]
   185c4:	mov	r0, r8
   185c8:	adc	r5, r7, #0
   185cc:	strb	r1, [r3, #2]
   185d0:	strb	r2, [r3, #1]
   185d4:	strd	r4, [sl]
   185d8:	bl	11f60 <strlen@plt>
   185dc:	mov	r7, r0
   185e0:	cmp	r6, #0
   185e4:	beq	18680 <read_boolean_unary_expression@@Base+0x1214>
   185e8:	ldr	r6, [pc, #544]	; 18810 <read_boolean_unary_expression@@Base+0x13a4>
   185ec:	adds	r0, r4, r7
   185f0:	adc	r1, r5, #0
   185f4:	add	r6, pc, r6
   185f8:	ldr	r2, [r6, #4]
   185fc:	ldr	r3, [pc, #528]	; 18814 <read_boolean_unary_expression@@Base+0x13a8>
   18600:	ldr	r3, [pc, r3]
   18604:	subs	r3, r3, r0
   18608:	sbcs	r2, r2, r1
   1860c:	bcs	18678 <read_boolean_unary_expression@@Base+0x120c>
   18610:	mov	r2, #7
   18614:	orr	r2, r2, #131072	; 0x20000
   18618:	adds	r0, r2, r0
   1861c:	adc	r1, r1, #0
   18620:	subs	r0, r0, #8
   18624:	sbc	r1, r1, #0
   18628:	mvn	r2, #0
   1862c:	and	r5, r1, r2
   18630:	mov	r1, #16646144	; 0xfe0000
   18634:	orr	r1, r1, #-16777216	; 0xff000000
   18638:	and	r4, r0, r1
   1863c:	mov	r0, r9
   18640:	mov	r1, r4
   18644:	bl	11edc <realloc@plt>
   18648:	strd	r4, [r6]
   1864c:	ldr	r1, [pc, #452]	; 18818 <read_boolean_unary_expression@@Base+0x13ac>
   18650:	ldr	r5, [sl, #4]
   18654:	add	r1, pc, r1
   18658:	str	r0, [r1]
   1865c:	ldr	r1, [pc, #440]	; 1881c <read_boolean_unary_expression@@Base+0x13b0>
   18660:	add	r1, pc, r1
   18664:	ldrb	r1, [r1]
   18668:	str	r1, [sp, #8]
   1866c:	ldr	r4, [pc, #428]	; 18820 <read_boolean_unary_expression@@Base+0x13b4>
   18670:	ldr	r4, [pc, r4]
   18674:	b	18684 <read_boolean_unary_expression@@Base+0x1218>
   18678:	mov	r0, #1
   1867c:	str	r0, [sp, #8]
   18680:	mov	r0, r9
   18684:	mov	r9, r0
   18688:	add	r0, r0, r4
   1868c:	mov	r1, r8
   18690:	mov	r2, r7
   18694:	bl	11ea0 <memcpy@plt>
   18698:	adds	r6, r4, r7
   1869c:	mov	r0, r8
   186a0:	adc	r5, r5, #0
   186a4:	str	r6, [sl]
   186a8:	str	r5, [sl, #4]
   186ac:	bl	11f60 <strlen@plt>
   186b0:	and	r0, r0, #3
   186b4:	rsb	r4, r0, #4
   186b8:	ldr	r0, [sp, #8]
   186bc:	cmp	r0, #0
   186c0:	beq	18748 <read_boolean_unary_expression@@Base+0x12dc>
   186c4:	ldr	r7, [pc, #344]	; 18824 <read_boolean_unary_expression@@Base+0x13b8>
   186c8:	adds	r0, r6, r4
   186cc:	adc	r1, r5, #0
   186d0:	add	r7, pc, r7
   186d4:	ldr	r2, [r7, #4]
   186d8:	ldr	r3, [pc, #328]	; 18828 <read_boolean_unary_expression@@Base+0x13bc>
   186dc:	ldr	r3, [pc, r3]
   186e0:	subs	r3, r3, r0
   186e4:	sbcs	r2, r2, r1
   186e8:	bcs	18748 <read_boolean_unary_expression@@Base+0x12dc>
   186ec:	mov	r2, #7
   186f0:	orr	r2, r2, #131072	; 0x20000
   186f4:	adds	r0, r2, r0
   186f8:	adc	r1, r1, #0
   186fc:	subs	r0, r0, #8
   18700:	sbc	r1, r1, #0
   18704:	mvn	r2, #0
   18708:	and	r5, r1, r2
   1870c:	mov	r1, #16646144	; 0xfe0000
   18710:	orr	r1, r1, #-16777216	; 0xff000000
   18714:	and	r6, r0, r1
   18718:	ldr	r8, [pc, #268]	; 1882c <read_boolean_unary_expression@@Base+0x13c0>
   1871c:	mov	r0, r9
   18720:	mov	r1, r6
   18724:	add	r8, pc, r8
   18728:	bl	11edc <realloc@plt>
   1872c:	str	r6, [r7]
   18730:	str	r5, [r7, #4]
   18734:	str	r0, [r8]
   18738:	ldr	r5, [sl, #4]
   1873c:	ldr	r6, [pc, #236]	; 18830 <read_boolean_unary_expression@@Base+0x13c4>
   18740:	mov	r9, r0
   18744:	ldr	r6, [pc, r6]
   18748:	add	r0, r9, r6
   1874c:	mov	r1, #0
   18750:	mov	r2, r4
   18754:	bl	11fa8 <memset@plt>
   18758:	adds	r0, r6, r4
   1875c:	adc	r1, r5, #0
   18760:	strd	r0, [sl]
   18764:	sub	sp, fp, #28
   18768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1876c:	andeq	r5, r1, ip, lsl lr
   18770:	andeq	r5, r1, r0, lsl #28
   18774:	andeq	r5, r1, r4, lsl #28
   18778:	andeq	r5, r1, r8, ror #27
   1877c:	andeq	r5, r1, ip, ror #27
   18780:	ldrdeq	r5, [r1], -r0
   18784:	andeq	r5, r1, r4, lsl #27
   18788:	andeq	r5, r1, r0, lsl #27
   1878c:	andeq	r5, r1, r0, ror sp
   18790:	andeq	r5, r1, r8, asr sp
   18794:	andeq	r5, r1, r4, lsl #26
   18798:	andeq	r5, r1, r4, lsl #24
   1879c:	strdeq	r5, [r1], -r4
   187a0:	andeq	r5, r1, r8, ror #25
   187a4:	muleq	r1, r8, fp
   187a8:	andeq	r5, r1, r4, lsr #25
   187ac:	andeq	r5, r1, r4, ror ip
   187b0:	andeq	r5, r1, r8, ror ip
   187b4:	andeq	r5, r1, r4, ror #24
   187b8:	andeq	r5, r1, r8, ror fp
   187bc:	andeq	r5, r1, r4, lsr fp
   187c0:	andeq	r5, r1, r0, lsl #22
   187c4:	andeq	r5, r1, r4, lsl #22
   187c8:	andeq	r5, r1, r8, ror sl
   187cc:	andeq	r5, r1, r4, lsr sl
   187d0:	andeq	r5, r1, r4, lsr #20
   187d4:	andeq	r5, r1, ip, asr #19
   187d8:			; <UNDEFINED> instruction: 0x000159bc
   187dc:			; <UNDEFINED> instruction: 0x000159b0
   187e0:	andeq	r5, r1, ip, ror #18
   187e4:	andeq	r5, r1, ip, asr r9
   187e8:	andeq	r5, r1, r0, asr r9
   187ec:	andeq	r5, r1, r0, lsr #18
   187f0:	andeq	r5, r1, r4, ror #17
   187f4:	ldrdeq	r5, [r1], -r4
   187f8:	andeq	r5, r1, r8, asr #17
   187fc:	andeq	r5, r1, r4, lsr #16
   18800:	andeq	r5, r1, r4, ror r8
   18804:	andeq	r5, r1, r8, ror #16
   18808:	andeq	r5, r1, r8, asr #16
   1880c:	andeq	r5, r1, r0, asr r8
   18810:	andeq	r5, r1, ip, asr #15
   18814:	andeq	r5, r1, r0, asr #15
   18818:	andeq	r5, r1, r8, ror #14
   1881c:	andeq	r5, r1, r4, asr r7
   18820:	andeq	r5, r1, r8, asr r7
   18824:	strdeq	r5, [r1], -r0
   18828:	andeq	r5, r1, r4, ror #13
   1882c:	muleq	r1, r8, r6
   18830:	andeq	r5, r1, r4, lsl #13
   18834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18838:	add	fp, sp, #28
   1883c:	sub	sp, sp, #28
   18840:	mov	ip, r0
   18844:	ldr	r0, [pc, #1740]	; 18f18 <read_boolean_unary_expression@@Base+0x1aac>
   18848:	ldr	r0, [pc, r0]
   1884c:	cmp	r0, #0
   18850:	beq	1896c <read_boolean_unary_expression@@Base+0x1500>
   18854:	ldr	r5, [pc, #1728]	; 18f1c <read_boolean_unary_expression@@Base+0x1ab0>
   18858:	mov	sl, r1
   1885c:	add	r5, pc, r5
   18860:	ldr	r3, [r5, #4]
   18864:	ldr	r4, [pc, #1716]	; 18f20 <read_boolean_unary_expression@@Base+0x1ab4>
   18868:	ldr	r4, [pc, r4]
   1886c:	ldr	r6, [pc, #1712]	; 18f24 <read_boolean_unary_expression@@Base+0x1ab8>
   18870:	add	r6, pc, r6
   18874:	ldrb	r0, [r6]
   18878:	cmp	r0, #0
   1887c:	beq	18974 <read_boolean_unary_expression@@Base+0x1508>
   18880:	ldr	r8, [pc, #1732]	; 18f4c <read_boolean_unary_expression@@Base+0x1ae0>
   18884:	mov	r5, #10551296	; 0xa10000
   18888:	adds	r9, r4, #4
   1888c:	add	r8, pc, r8
   18890:	adc	r2, r3, #0
   18894:	ldr	r0, [r8, #4]
   18898:	ldr	r1, [pc, #1712]	; 18f50 <read_boolean_unary_expression@@Base+0x1ae4>
   1889c:	orr	r5, r5, #16777216	; 0x1000000
   188a0:	ldr	r1, [pc, r1]
   188a4:	subs	r1, r1, r9
   188a8:	sbcs	r0, r0, r2
   188ac:	bcs	18a78 <read_boolean_unary_expression@@Base+0x160c>
   188b0:	mov	r0, #3
   188b4:	orr	r0, r0, #131072	; 0x20000
   188b8:	adds	r0, r4, r0
   188bc:	adc	r1, r3, #0
   188c0:	mvn	r2, #0
   188c4:	and	r9, r1, r2
   188c8:	mov	r1, #16646144	; 0xfe0000
   188cc:	orr	r1, r1, #-16777216	; 0xff000000
   188d0:	and	r4, r0, r1
   188d4:	ldr	r0, [pc, #1664]	; 18f5c <read_boolean_unary_expression@@Base+0x1af0>
   188d8:	mov	r1, r4
   188dc:	mov	r7, ip
   188e0:	ldr	r0, [pc, r0]
   188e4:	bl	11edc <realloc@plt>
   188e8:	ldr	ip, [pc, #1648]	; 18f60 <read_boolean_unary_expression@@Base+0x1af4>
   188ec:	ldr	lr, [pc, #1648]	; 18f64 <read_boolean_unary_expression@@Base+0x1af8>
   188f0:	stm	r8, {r4, r9}
   188f4:	ldr	r1, [pc, #1644]	; 18f68 <read_boolean_unary_expression@@Base+0x1afc>
   188f8:	add	ip, pc, ip
   188fc:	add	lr, pc, lr
   18900:	add	r1, pc, r1
   18904:	mov	r2, r0
   18908:	str	r2, [r1]
   1890c:	mov	r6, ip
   18910:	ldrb	ip, [ip]
   18914:	ldr	r3, [lr, #4]
   18918:	ldr	r4, [pc, #1612]	; 18f6c <read_boolean_unary_expression@@Base+0x1b00>
   1891c:	lsr	r0, r5, #24
   18920:	mov	r1, r8
   18924:	ldr	r4, [pc, r4]
   18928:	str	r2, [sp, #20]
   1892c:	lsl	r8, r7, #1
   18930:	strb	r5, [r2, r4]!
   18934:	adds	r9, r4, #4
   18938:	strb	r0, [r2, #3]
   1893c:	lsr	r0, r5, #16
   18940:	strb	r0, [r2, #2]
   18944:	lsr	r0, r5, #8
   18948:	strb	r0, [r2, #1]
   1894c:	adc	r5, r3, #0
   18950:	mov	r0, #0
   18954:	cmp	ip, #1
   18958:	str	r3, [sp, #16]
   1895c:	str	r9, [lr]
   18960:	str	r5, [lr, #4]
   18964:	beq	18acc <read_boolean_unary_expression@@Base+0x1660>
   18968:	b	18c30 <read_boolean_unary_expression@@Base+0x17c4>
   1896c:	sub	sp, fp, #28
   18970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18974:	ldr	r0, [pc, #1452]	; 18f28 <read_boolean_unary_expression@@Base+0x1abc>
   18978:	mov	r7, r3
   1897c:	mov	r9, #0
   18980:	ldr	r0, [pc, r0]
   18984:	str	r0, [sp, #20]
   18988:	ldrb	r1, [r0, r4]!
   1898c:	str	r7, [sp, #16]
   18990:	ldrb	r2, [r0, #1]
   18994:	ldrb	r3, [r0, #2]
   18998:	ldrb	r0, [r0, #3]
   1899c:	orr	r1, r1, r2, lsl #8
   189a0:	orr	r1, r1, r3, lsl #16
   189a4:	adds	r2, r4, #4
   189a8:	orr	r3, r1, r0, lsl #24
   189ac:	adc	r7, r7, #0
   189b0:	mov	r1, r5
   189b4:	stm	r5, {r2, r7}
   189b8:	mov	r5, #10551296	; 0xa10000
   189bc:	orr	r5, r5, #16777216	; 0x1000000
   189c0:	cmn	r3, #1
   189c4:	beq	18b78 <read_boolean_unary_expression@@Base+0x170c>
   189c8:	cmp	r3, r5
   189cc:	bne	18b88 <read_boolean_unary_expression@@Base+0x171c>
   189d0:	str	r7, [sp, #8]
   189d4:	ldr	r0, [sp, #20]
   189d8:	str	r4, [sp, #4]
   189dc:	mov	r8, r5
   189e0:	ldr	r3, [r0, r2]
   189e4:	ldr	r0, [sp, #16]
   189e8:	adds	r5, r4, #8
   189ec:	adc	r9, r0, #0
   189f0:	cmn	r3, #1
   189f4:	stm	r1, {r5, r9}
   189f8:	beq	18b94 <read_boolean_unary_expression@@Base+0x1728>
   189fc:	lsr	r0, r3, #1
   18a00:	mov	r7, ip
   18a04:	cmp	r0, ip
   18a08:	bne	18b94 <read_boolean_unary_expression@@Base+0x1728>
   18a0c:	lsl	r0, r7, #3
   18a10:	mov	r4, r2
   18a14:	bl	11f18 <malloc@plt>
   18a18:	cmp	r7, #0
   18a1c:	beq	18bbc <read_boolean_unary_expression@@Base+0x1750>
   18a20:	str	r0, [sp, #12]
   18a24:	str	r7, [sp, #24]
   18a28:	ldr	r2, [sp, #20]
   18a2c:	ldr	r3, [r2, r5]!
   18a30:	adds	r5, r5, #8
   18a34:	ldr	r2, [r2, #4]
   18a38:	str	r3, [r0]
   18a3c:	adc	r9, r9, #0
   18a40:	str	r2, [r0, #4]
   18a44:	add	r0, r0, #8
   18a48:	subs	r7, r7, #1
   18a4c:	bne	18a28 <read_boolean_unary_expression@@Base+0x15bc>
   18a50:	ldr	lr, [pc, #1260]	; 18f44 <read_boolean_unary_expression@@Base+0x1ad8>
   18a54:	add	lr, pc, lr
   18a58:	stm	lr, {r5, r9}
   18a5c:	ldr	ip, [pc, #1252]	; 18f48 <read_boolean_unary_expression@@Base+0x1adc>
   18a60:	mov	r1, lr
   18a64:	ldr	r0, [sp, #12]
   18a68:	add	ip, pc, ip
   18a6c:	mov	r6, ip
   18a70:	ldr	ip, [sp, #24]
   18a74:	b	18bd8 <read_boolean_unary_expression@@Base+0x176c>
   18a78:	str	r3, [sp, #16]
   18a7c:	ldr	r3, [pc, #1232]	; 18f54 <read_boolean_unary_expression@@Base+0x1ae8>
   18a80:	mov	lr, r5
   18a84:	mov	r7, ip
   18a88:	lsr	ip, r5, #16
   18a8c:	ldr	r3, [pc, r3]
   18a90:	lsr	r1, r5, #8
   18a94:	str	r3, [sp, #20]
   18a98:	strb	lr, [r3, r4]!
   18a9c:	lsr	r0, lr, #24
   18aa0:	strb	r1, [r3, #1]
   18aa4:	strb	r0, [r3, #3]
   18aa8:	strb	ip, [r3, #2]
   18aac:	ldr	lr, [pc, #1188]	; 18f58 <read_boolean_unary_expression@@Base+0x1aec>
   18ab0:	lsl	r5, r7, #1
   18ab4:	add	lr, pc, lr
   18ab8:	mov	r1, r8
   18abc:	mov	r8, r5
   18ac0:	str	r9, [lr]
   18ac4:	str	r2, [lr, #4]
   18ac8:	mov	r5, r2
   18acc:	str	r8, [sp, #24]
   18ad0:	mov	r8, r1
   18ad4:	ldr	r0, [sp, #16]
   18ad8:	ldr	r2, [r8, #4]
   18adc:	ldr	r3, [pc, #1164]	; 18f70 <read_boolean_unary_expression@@Base+0x1b04>
   18ae0:	adds	ip, r4, #8
   18ae4:	adc	r1, r0, #0
   18ae8:	mov	r0, #0
   18aec:	ldr	r3, [pc, r3]
   18af0:	subs	r3, r3, ip
   18af4:	sbcs	r1, r2, r1
   18af8:	bcs	18b70 <read_boolean_unary_expression@@Base+0x1704>
   18afc:	ldr	r5, [pc, #1136]	; 18f74 <read_boolean_unary_expression@@Base+0x1b08>
   18b00:	mov	r0, #3
   18b04:	ldr	r1, [sp, #16]
   18b08:	orr	r0, r0, #131072	; 0x20000
   18b0c:	adds	r0, r0, r4
   18b10:	adc	r1, r1, #0
   18b14:	adds	r0, r0, #4
   18b18:	adc	r1, r1, #0
   18b1c:	mvn	r2, #0
   18b20:	and	r9, r1, r2
   18b24:	mov	r1, #16646144	; 0xfe0000
   18b28:	orr	r1, r1, #-16777216	; 0xff000000
   18b2c:	and	r4, r0, r1
   18b30:	ldr	r0, [sp, #20]
   18b34:	mov	r1, r4
   18b38:	add	r5, pc, r5
   18b3c:	bl	11edc <realloc@plt>
   18b40:	ldr	ip, [pc, #1072]	; 18f78 <read_boolean_unary_expression@@Base+0x1b0c>
   18b44:	ldr	lr, [pc, #1072]	; 18f7c <read_boolean_unary_expression@@Base+0x1b10>
   18b48:	stm	r8, {r4, r9}
   18b4c:	add	lr, pc, lr
   18b50:	str	r0, [r5]
   18b54:	str	r0, [sp, #20]
   18b58:	ldr	r5, [lr, #4]
   18b5c:	ldr	r9, [pc, #1052]	; 18f80 <read_boolean_unary_expression@@Base+0x1b14>
   18b60:	add	ip, pc, ip
   18b64:	mov	r6, ip
   18b68:	mov	r0, #0
   18b6c:	ldr	r9, [pc, r9]
   18b70:	ldr	r8, [sp, #24]
   18b74:	b	18c30 <read_boolean_unary_expression@@Base+0x17c4>
   18b78:	mov	r3, r2
   18b7c:	ldr	r2, [sp, #16]
   18b80:	mov	r0, #0
   18b84:	b	18bf0 <read_boolean_unary_expression@@Base+0x1784>
   18b88:	ldr	r1, [pc, #924]	; 18f2c <read_boolean_unary_expression@@Base+0x1ac0>
   18b8c:	add	r1, pc, r1
   18b90:	b	18b9c <read_boolean_unary_expression@@Base+0x1730>
   18b94:	ldr	r1, [pc, #924]	; 18f38 <read_boolean_unary_expression@@Base+0x1acc>
   18b98:	add	r1, pc, r1
   18b9c:	ldr	r0, [pc, #908]	; 18f30 <read_boolean_unary_expression@@Base+0x1ac4>
   18ba0:	ldr	r0, [pc, r0]
   18ba4:	ldr	r0, [r0]
   18ba8:	ldr	r2, [pc, #900]	; 18f34 <read_boolean_unary_expression@@Base+0x1ac8>
   18bac:	ldr	r2, [pc, r2]
   18bb0:	sub	sp, fp, #28
   18bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bb8:	b	11f78 <fprintf@plt>
   18bbc:	ldr	lr, [pc, #888]	; 18f3c <read_boolean_unary_expression@@Base+0x1ad0>
   18bc0:	ldr	ip, [pc, #888]	; 18f40 <read_boolean_unary_expression@@Base+0x1ad4>
   18bc4:	add	lr, pc, lr
   18bc8:	add	ip, pc, ip
   18bcc:	mov	r6, ip
   18bd0:	mov	r1, lr
   18bd4:	mov	ip, r7
   18bd8:	mov	r3, r4
   18bdc:	ldr	r7, [sp, #8]
   18be0:	ldr	r4, [sp, #4]
   18be4:	ldr	r2, [sp, #16]
   18be8:	mov	r9, #0
   18bec:	mov	r5, r8
   18bf0:	mov	lr, r1
   18bf4:	mov	r1, #1
   18bf8:	str	r4, [lr]
   18bfc:	str	r2, [lr, #4]
   18c00:	ldr	r2, [sp, #20]
   18c04:	lsl	r8, ip, #1
   18c08:	strb	r5, [r2, r4]!
   18c0c:	mov	r5, r7
   18c10:	strb	r1, [r2, #3]
   18c14:	mov	r1, #161	; 0xa1
   18c18:	strb	r9, [r2, #1]
   18c1c:	mov	r9, r3
   18c20:	strb	r1, [r2, #2]
   18c24:	str	r9, [lr]
   18c28:	str	r7, [lr, #4]
   18c2c:	mov	r7, ip
   18c30:	ldr	r3, [sp, #20]
   18c34:	lsr	r1, r8, #16
   18c38:	mov	ip, r3
   18c3c:	strb	r8, [r3, r9]!
   18c40:	lsr	r4, r8, #24
   18c44:	lsr	r2, r8, #8
   18c48:	adds	r8, r9, #4
   18c4c:	strb	r1, [r3, #2]
   18c50:	adc	r1, r5, #0
   18c54:	cmp	r7, #0
   18c58:	strb	r4, [r3, #3]
   18c5c:	strb	r2, [r3, #1]
   18c60:	str	r8, [lr]
   18c64:	str	r1, [lr, #4]
   18c68:	str	r7, [sp, #24]
   18c6c:	beq	18f0c <read_boolean_unary_expression@@Base+0x1aa0>
   18c70:	ldr	r7, [pc, #780]	; 18f84 <read_boolean_unary_expression@@Base+0x1b18>
   18c74:	mov	r4, lr
   18c78:	mov	r2, r0
   18c7c:	add	r7, pc, r7
   18c80:	str	r0, [sp, #12]
   18c84:	b	18d20 <read_boolean_unary_expression@@Base+0x18b4>
   18c88:	mov	r7, ip
   18c8c:	lsr	r2, r4, #24
   18c90:	strb	r4, [r7, r8]!
   18c94:	mov	lr, r6
   18c98:	lsr	r9, r4, #16
   18c9c:	lsr	r6, r4, #8
   18ca0:	strb	r2, [r7, #3]
   18ca4:	adds	r2, r8, #4
   18ca8:	mov	r4, r0
   18cac:	strb	r9, [r7, #2]
   18cb0:	mov	r3, ip
   18cb4:	strb	r6, [r7, #1]
   18cb8:	adc	r9, r1, #0
   18cbc:	stm	r4, {r2, r9}
   18cc0:	mov	ip, r3
   18cc4:	lsr	r1, r5, #16
   18cc8:	strb	r5, [r3, r2]!
   18ccc:	lsr	r0, r5, #24
   18cd0:	lsr	r7, r5, #8
   18cd4:	adds	r8, r2, #4
   18cd8:	strb	r1, [r3, #2]
   18cdc:	adc	r1, r9, #0
   18ce0:	strb	r0, [r3, #3]
   18ce4:	strb	r7, [r3, #1]
   18ce8:	str	r8, [r4]
   18cec:	str	r1, [r4, #4]
   18cf0:	ldr	r0, [sp, #24]
   18cf4:	ldr	r2, [sp, #16]
   18cf8:	mov	r6, lr
   18cfc:	subs	r0, r0, #1
   18d00:	str	r0, [sp, #24]
   18d04:	ldr	sl, [sp, #20]
   18d08:	ldr	r0, [sp, #12]
   18d0c:	ldr	r7, [pc, #676]	; 18fb8 <read_boolean_unary_expression@@Base+0x1b4c>
   18d10:	add	r2, r2, #8
   18d14:	add	sl, sl, #8
   18d18:	add	r7, pc, r7
   18d1c:	beq	18f0c <read_boolean_unary_expression@@Base+0x1aa0>
   18d20:	cmp	r0, #0
   18d24:	mov	r0, r4
   18d28:	str	r2, [sp, #16]
   18d2c:	beq	18d38 <read_boolean_unary_expression@@Base+0x18cc>
   18d30:	ldrd	r2, [r2]
   18d34:	b	18d40 <read_boolean_unary_expression@@Base+0x18d4>
   18d38:	mov	r2, #0
   18d3c:	mov	r3, #0
   18d40:	ldrd	r4, [sl]
   18d44:	adds	r4, r4, r2
   18d48:	adc	r5, r5, r3
   18d4c:	strd	r4, [sl]
   18d50:	ldrb	r2, [r6]
   18d54:	str	sl, [sp, #20]
   18d58:	cmp	r2, #0
   18d5c:	beq	18c88 <read_boolean_unary_expression@@Base+0x181c>
   18d60:	ldr	r3, [r7, #4]
   18d64:	ldr	r6, [pc, #540]	; 18f88 <read_boolean_unary_expression@@Base+0x1b1c>
   18d68:	adds	r2, r8, #4
   18d6c:	adc	r9, r1, #0
   18d70:	ldr	r6, [pc, r6]
   18d74:	subs	r2, r6, r2
   18d78:	sbcs	r2, r3, r9
   18d7c:	bcs	18e28 <read_boolean_unary_expression@@Base+0x19bc>
   18d80:	mov	r2, #3
   18d84:	orr	r2, r2, #131072	; 0x20000
   18d88:	adds	r0, r8, r2
   18d8c:	adc	r1, r1, #0
   18d90:	mvn	r2, #0
   18d94:	and	r8, r1, r2
   18d98:	mov	r1, #16646144	; 0xfe0000
   18d9c:	orr	r1, r1, #-16777216	; 0xff000000
   18da0:	and	r6, r0, r1
   18da4:	mov	r0, ip
   18da8:	mov	r1, r6
   18dac:	bl	11edc <realloc@plt>
   18db0:	ldr	ip, [pc, #468]	; 18f8c <read_boolean_unary_expression@@Base+0x1b20>
   18db4:	ldr	lr, [pc, #468]	; 18f90 <read_boolean_unary_expression@@Base+0x1b24>
   18db8:	stm	r7, {r6, r8}
   18dbc:	mov	r3, r0
   18dc0:	ldr	r0, [pc, #460]	; 18f94 <read_boolean_unary_expression@@Base+0x1b28>
   18dc4:	add	lr, pc, lr
   18dc8:	mov	r9, lr
   18dcc:	add	r0, pc, r0
   18dd0:	add	ip, pc, ip
   18dd4:	str	r3, [r0]
   18dd8:	mov	lr, ip
   18ddc:	ldrb	ip, [ip]
   18de0:	ldr	r1, [r9, #4]
   18de4:	ldr	r8, [pc, #428]	; 18f98 <read_boolean_unary_expression@@Base+0x1b2c>
   18de8:	mov	r7, r3
   18dec:	lsr	r2, r4, #24
   18df0:	ldr	r8, [pc, r8]
   18df4:	lsr	r6, r4, #16
   18df8:	strb	r4, [r7, r8]!
   18dfc:	strb	r2, [r7, #3]
   18e00:	lsr	r2, r4, #8
   18e04:	strb	r2, [r7, #1]
   18e08:	adds	r2, r8, #4
   18e0c:	mov	r4, r9
   18e10:	adc	r9, r1, #0
   18e14:	cmp	ip, #1
   18e18:	strb	r6, [r7, #2]
   18e1c:	stm	r4, {r2, r9}
   18e20:	bne	18cc0 <read_boolean_unary_expression@@Base+0x1854>
   18e24:	b	18e5c <read_boolean_unary_expression@@Base+0x19f0>
   18e28:	mov	r6, ip
   18e2c:	lsr	r2, r4, #24
   18e30:	strb	r4, [r6, r8]!
   18e34:	lsr	r9, r4, #16
   18e38:	lsr	r7, r4, #8
   18e3c:	strb	r2, [r6, #3]
   18e40:	adds	r2, r8, #4
   18e44:	mov	r4, r0
   18e48:	strb	r9, [r6, #2]
   18e4c:	mov	r3, ip
   18e50:	strb	r7, [r6, #1]
   18e54:	adc	r9, r1, #0
   18e58:	stm	r4, {r2, r9}
   18e5c:	ldr	lr, [pc, #312]	; 18f9c <read_boolean_unary_expression@@Base+0x1b30>
   18e60:	mov	r0, r4
   18e64:	adds	r7, r8, #8
   18e68:	add	lr, pc, lr
   18e6c:	adc	ip, r1, #0
   18e70:	ldr	r4, [lr, #4]
   18e74:	ldr	r6, [pc, #292]	; 18fa0 <read_boolean_unary_expression@@Base+0x1b34>
   18e78:	ldr	r6, [pc, r6]
   18e7c:	subs	r7, r6, r7
   18e80:	sbcs	r7, r4, ip
   18e84:	bcs	18efc <read_boolean_unary_expression@@Base+0x1a90>
   18e88:	mov	r2, #3
   18e8c:	orr	r2, r2, #131072	; 0x20000
   18e90:	adds	r0, r2, r8
   18e94:	adc	r1, r1, #0
   18e98:	adds	r0, r0, #4
   18e9c:	adc	r1, r1, #0
   18ea0:	mvn	r2, #0
   18ea4:	and	r7, r1, r2
   18ea8:	mov	r1, #16646144	; 0xfe0000
   18eac:	orr	r1, r1, #-16777216	; 0xff000000
   18eb0:	and	r6, r0, r1
   18eb4:	mov	r0, r3
   18eb8:	mov	r1, r6
   18ebc:	mov	r8, lr
   18ec0:	bl	11edc <realloc@plt>
   18ec4:	ldr	lr, [pc, #220]	; 18fa8 <read_boolean_unary_expression@@Base+0x1b3c>
   18ec8:	strd	r6, [r8]
   18ecc:	mov	r3, r0
   18ed0:	add	lr, pc, lr
   18ed4:	mov	r4, lr
   18ed8:	ldr	r9, [lr, #4]
   18edc:	ldr	r0, [pc, #200]	; 18fac <read_boolean_unary_expression@@Base+0x1b40>
   18ee0:	add	r0, pc, r0
   18ee4:	str	r3, [r0]
   18ee8:	ldr	r2, [pc, #192]	; 18fb0 <read_boolean_unary_expression@@Base+0x1b44>
   18eec:	ldr	r2, [pc, r2]
   18ef0:	ldr	lr, [pc, #188]	; 18fb4 <read_boolean_unary_expression@@Base+0x1b48>
   18ef4:	add	lr, pc, lr
   18ef8:	b	18cc0 <read_boolean_unary_expression@@Base+0x1854>
   18efc:	ldr	lr, [pc, #160]	; 18fa4 <read_boolean_unary_expression@@Base+0x1b38>
   18f00:	mov	r4, r0
   18f04:	add	lr, pc, lr
   18f08:	b	18cc0 <read_boolean_unary_expression@@Base+0x1854>
   18f0c:	sub	sp, fp, #28
   18f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f14:	b	11e94 <free@plt>
   18f18:	andeq	r5, r1, r0, ror r5
   18f1c:	andeq	r5, r1, ip, ror #10
   18f20:	andeq	r5, r1, r0, ror #10
   18f24:	andeq	r5, r1, r4, asr #10
   18f28:	andeq	r5, r1, ip, lsr r4
   18f2c:	ldrdeq	r2, [r0], -fp
   18f30:	andeq	r4, r1, ip, lsl r5
   18f34:	andeq	r5, r1, r4, lsl #4
   18f38:	andeq	r2, r0, r9, lsl sl
   18f3c:	andeq	r5, r1, r4, lsl #4
   18f40:	andeq	r5, r1, ip, ror #3
   18f44:	andeq	r5, r1, r4, ror r3
   18f48:	andeq	r5, r1, ip, asr #6
   18f4c:	andeq	r5, r1, r4, lsr r5
   18f50:	andeq	r5, r1, r0, lsr #10
   18f54:	andeq	r5, r1, r0, lsr r3
   18f58:	andeq	r5, r1, r4, lsl r3
   18f5c:	ldrdeq	r5, [r1], -ip
   18f60:			; <UNDEFINED> instruction: 0x000154bc
   18f64:	andeq	r5, r1, ip, asr #9
   18f68:			; <UNDEFINED> instruction: 0x000154bc
   18f6c:	andeq	r5, r1, r4, lsr #9
   18f70:	ldrdeq	r5, [r1], -r4
   18f74:	andeq	r5, r1, r4, lsl #5
   18f78:	andeq	r5, r1, r4, asr r2
   18f7c:	andeq	r5, r1, ip, ror r2
   18f80:	andeq	r5, r1, ip, asr r2
   18f84:	andeq	r5, r1, r4, asr #2
   18f88:	andeq	r5, r1, r0, asr r0
   18f8c:	andeq	r4, r1, r4, ror #31
   18f90:	andeq	r5, r1, r4
   18f94:	strdeq	r4, [r1], -r0
   18f98:	ldrdeq	r4, [r1], -r8
   18f9c:	andeq	r4, r1, r8, asr pc
   18fa0:	andeq	r4, r1, r8, asr #30
   18fa4:			; <UNDEFINED> instruction: 0x00014eb0
   18fa8:	strdeq	r4, [r1], -r8
   18fac:	ldrdeq	r4, [r1], -ip
   18fb0:	ldrdeq	r4, [r1], -ip
   18fb4:	andeq	r4, r1, r0, asr #29
   18fb8:	andeq	r5, r1, r8, lsr #1
   18fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fc0:	add	fp, sp, #28
   18fc4:	sub	sp, sp, #4
   18fc8:	ldr	r0, [pc, #3180]	; 19c3c <read_boolean_unary_expression@@Base+0x27d0>
   18fcc:	ldr	r0, [pc, r0]
   18fd0:	cmp	r0, #0
   18fd4:	beq	19630 <read_boolean_unary_expression@@Base+0x21c4>
   18fd8:	ldr	sl, [pc, #3168]	; 19c40 <read_boolean_unary_expression@@Base+0x27d4>
   18fdc:	add	sl, pc, sl
   18fe0:	ldr	r6, [sl, #4]
   18fe4:	ldr	r5, [pc, #3160]	; 19c44 <read_boolean_unary_expression@@Base+0x27d8>
   18fe8:	ldr	r5, [pc, r5]
   18fec:	ldr	r8, [pc, #3156]	; 19c48 <read_boolean_unary_expression@@Base+0x27dc>
   18ff0:	add	r8, pc, r8
   18ff4:	ldrb	r0, [r8]
   18ff8:	cmp	r0, #0
   18ffc:	beq	190c0 <read_boolean_unary_expression@@Base+0x1c54>
   19000:	ldr	r9, [pc, #3164]	; 19c64 <read_boolean_unary_expression@@Base+0x27f8>
   19004:	adds	r2, r5, #4
   19008:	adc	ip, r6, #0
   1900c:	add	r9, pc, r9
   19010:	ldr	r0, [r9, #4]
   19014:	ldr	r3, [pc, #3148]	; 19c68 <read_boolean_unary_expression@@Base+0x27fc>
   19018:	ldr	r3, [pc, r3]
   1901c:	subs	r3, r3, r2
   19020:	sbcs	r0, r0, ip
   19024:	bcs	19114 <read_boolean_unary_expression@@Base+0x1ca8>
   19028:	mov	r0, #7
   1902c:	orr	r0, r0, #131072	; 0x20000
   19030:	adds	r0, r0, r5
   19034:	adc	r1, r6, #0
   19038:	subs	r0, r0, #4
   1903c:	sbc	r1, r1, #0
   19040:	mvn	r2, #0
   19044:	and	r5, r1, r2
   19048:	mov	r1, #16646144	; 0xfe0000
   1904c:	orr	r1, r1, #-16777216	; 0xff000000
   19050:	ldr	r4, [pc, #3096]	; 19c70 <read_boolean_unary_expression@@Base+0x2804>
   19054:	and	r6, r0, r1
   19058:	ldr	r0, [pc, #3092]	; 19c74 <read_boolean_unary_expression@@Base+0x2808>
   1905c:	mov	r1, r6
   19060:	add	r4, pc, r4
   19064:	ldr	r0, [pc, r0]
   19068:	bl	11edc <realloc@plt>
   1906c:	str	r6, [r9]
   19070:	str	r5, [r9, #4]
   19074:	str	r0, [r4]
   19078:	ldrb	r3, [r8]
   1907c:	ldr	r6, [sl, #4]
   19080:	ldr	r5, [pc, #3056]	; 19c78 <read_boolean_unary_expression@@Base+0x280c>
   19084:	mov	r2, r0
   19088:	mov	r1, #0
   1908c:	mov	r7, #161	; 0xa1
   19090:	ldr	r5, [pc, r5]
   19094:	strb	r1, [r2, r5]!
   19098:	strb	r7, [r2, #3]
   1909c:	strb	r1, [r2, #2]
   190a0:	strb	r1, [r2, #1]
   190a4:	adds	r2, r5, #4
   190a8:	adc	ip, r6, #0
   190ac:	mov	r7, #1
   190b0:	cmp	r3, #1
   190b4:	stm	sl, {r2, ip}
   190b8:	beq	1913c <read_boolean_unary_expression@@Base+0x1cd0>
   190bc:	b	19314 <read_boolean_unary_expression@@Base+0x1ea8>
   190c0:	ldr	r0, [pc, #2948]	; 19c4c <read_boolean_unary_expression@@Base+0x27e0>
   190c4:	ldr	r0, [pc, r0]
   190c8:	mov	r1, r0
   190cc:	ldrb	r2, [r1, r5]!
   190d0:	ldrb	r3, [r1, #1]
   190d4:	ldrb	r7, [r1, #2]
   190d8:	ldrb	r1, [r1, #3]
   190dc:	orr	r2, r2, r3, lsl #8
   190e0:	orr	r2, r2, r7, lsl #16
   190e4:	orr	r3, r2, r1, lsl #24
   190e8:	adds	r2, r5, #4
   190ec:	adc	ip, r6, #0
   190f0:	cmp	r3, #-1593835520	; 0xa1000000
   190f4:	stm	sl, {r2, ip}
   190f8:	beq	192b4 <read_boolean_unary_expression@@Base+0x1e48>
   190fc:	mov	r7, #1
   19100:	cmn	r3, #1
   19104:	beq	192f4 <read_boolean_unary_expression@@Base+0x1e88>
   19108:	ldr	r1, [pc, #2880]	; 19c50 <read_boolean_unary_expression@@Base+0x27e4>
   1910c:	add	r1, pc, r1
   19110:	b	199f4 <read_boolean_unary_expression@@Base+0x2588>
   19114:	ldr	r0, [pc, #2896]	; 19c6c <read_boolean_unary_expression@@Base+0x2800>
   19118:	mov	r3, #0
   1911c:	mov	r4, #161	; 0xa1
   19120:	ldr	r0, [pc, r0]
   19124:	mov	r7, r0
   19128:	strb	r3, [r7, r5]!
   1912c:	strb	r4, [r7, #3]
   19130:	strb	r3, [r7, #2]
   19134:	strb	r3, [r7, #1]
   19138:	stm	sl, {r2, ip}
   1913c:	ldr	r4, [r9, #4]
   19140:	ldr	r1, [pc, #2868]	; 19c7c <read_boolean_unary_expression@@Base+0x2810>
   19144:	adds	r3, r5, #8
   19148:	adc	r7, r6, #0
   1914c:	ldr	r1, [pc, r1]
   19150:	subs	r1, r1, r3
   19154:	sbcs	r1, r4, r7
   19158:	bcs	191e4 <read_boolean_unary_expression@@Base+0x1d78>
   1915c:	mov	r1, #7
   19160:	orr	r1, r1, #131072	; 0x20000
   19164:	adds	r1, r5, r1
   19168:	adc	r2, r6, #0
   1916c:	mvn	r3, #0
   19170:	and	r5, r2, r3
   19174:	mov	r2, #16646144	; 0xfe0000
   19178:	orr	r2, r2, #-16777216	; 0xff000000
   1917c:	ldr	r4, [pc, #2812]	; 19c80 <read_boolean_unary_expression@@Base+0x2814>
   19180:	and	r6, r1, r2
   19184:	mov	r1, r6
   19188:	add	r4, pc, r4
   1918c:	bl	11edc <realloc@plt>
   19190:	str	r6, [r9]
   19194:	str	r5, [r9, #4]
   19198:	str	r0, [r4]
   1919c:	ldrb	r1, [r8]
   191a0:	ldr	ip, [sl, #4]
   191a4:	ldr	r2, [pc, #2776]	; 19c84 <read_boolean_unary_expression@@Base+0x2818>
   191a8:	mov	r7, r0
   191ac:	mov	r3, #9
   191b0:	ldr	r2, [pc, r2]
   191b4:	strb	r3, [r7, r2]!
   191b8:	mov	r3, #0
   191bc:	strb	r3, [r7, #3]
   191c0:	strb	r3, [r7, #2]
   191c4:	strb	r3, [r7, #1]
   191c8:	adds	r3, r2, #4
   191cc:	adc	r5, ip, #0
   191d0:	mov	r7, #1
   191d4:	cmp	r1, #1
   191d8:	stm	sl, {r3, r5}
   191dc:	beq	1920c <read_boolean_unary_expression@@Base+0x1da0>
   191e0:	b	1933c <read_boolean_unary_expression@@Base+0x1ed0>
   191e4:	mov	r3, r0
   191e8:	mov	r1, #9
   191ec:	strb	r1, [r3, r2]!
   191f0:	mov	r1, #0
   191f4:	strb	r1, [r3, #3]
   191f8:	strb	r1, [r3, #2]
   191fc:	strb	r1, [r3, #1]
   19200:	adds	r3, r2, #4
   19204:	adc	r5, ip, #0
   19208:	stm	sl, {r3, r5}
   1920c:	ldr	r6, [r9, #4]
   19210:	ldr	r4, [pc, #2672]	; 19c88 <read_boolean_unary_expression@@Base+0x281c>
   19214:	adds	r1, r2, #8
   19218:	adc	r7, ip, #0
   1921c:	ldr	r4, [pc, r4]
   19220:	subs	r1, r4, r1
   19224:	sbcs	r1, r6, r7
   19228:	bcs	19700 <read_boolean_unary_expression@@Base+0x2294>
   1922c:	mov	r1, #7
   19230:	orr	r1, r1, #131072	; 0x20000
   19234:	adds	r1, r2, r1
   19238:	adc	r2, ip, #0
   1923c:	mvn	r3, #0
   19240:	and	r5, r2, r3
   19244:	mov	r2, #16646144	; 0xfe0000
   19248:	orr	r2, r2, #-16777216	; 0xff000000
   1924c:	ldr	r4, [pc, #2616]	; 19c8c <read_boolean_unary_expression@@Base+0x2820>
   19250:	and	r6, r1, r2
   19254:	mov	r1, r6
   19258:	add	r4, pc, r4
   1925c:	bl	11edc <realloc@plt>
   19260:	str	r6, [r9]
   19264:	str	r5, [r9, #4]
   19268:	str	r0, [r4]
   1926c:	ldrb	r2, [r8]
   19270:	ldr	r5, [sl, #4]
   19274:	ldr	r3, [pc, #2580]	; 19c90 <read_boolean_unary_expression@@Base+0x2824>
   19278:	mov	r7, r0
   1927c:	mov	r1, #0
   19280:	ldr	r3, [pc, r3]
   19284:	adds	r6, r3, #4
   19288:	strb	r1, [r7, r3]!
   1928c:	str	r6, [sl]
   19290:	strb	r1, [r7, #3]
   19294:	strb	r1, [r7, #2]
   19298:	strb	r1, [r7, #1]
   1929c:	adc	r1, r5, #0
   192a0:	mov	r7, #1
   192a4:	cmp	r2, #1
   192a8:	str	r1, [sl, #4]
   192ac:	bne	19364 <read_boolean_unary_expression@@Base+0x1ef8>
   192b0:	b	19728 <read_boolean_unary_expression@@Base+0x22bc>
   192b4:	ldr	r3, [r0, r2]
   192b8:	adds	r4, r5, #8
   192bc:	adc	r7, r6, #0
   192c0:	cmp	r3, #9
   192c4:	stm	sl, {r4, r7}
   192c8:	bne	199ec <read_boolean_unary_expression@@Base+0x2580>
   192cc:	ldr	r3, [pc, #2444]	; 19c60 <read_boolean_unary_expression@@Base+0x27f4>
   192d0:	adds	r4, r5, #20
   192d4:	adc	r7, r6, #0
   192d8:	add	r3, pc, r3
   192dc:	add	r6, r5, r0
   192e0:	ldrb	r3, [r3]
   192e4:	ldr	r6, [r6, #16]
   192e8:	stm	sl, {r4, r7}
   192ec:	eor	r3, r3, #1
   192f0:	add	r7, r6, r3
   192f4:	mov	r6, r0
   192f8:	mov	r3, #0
   192fc:	strb	r3, [r6, r5]!
   19300:	mov	r5, #161	; 0xa1
   19304:	strb	r5, [r6, #3]
   19308:	strb	r3, [r6, #2]
   1930c:	strb	r3, [r6, #1]
   19310:	stm	sl, {r2, ip}
   19314:	mov	r3, r0
   19318:	mov	r1, #9
   1931c:	strb	r1, [r3, r2]!
   19320:	mov	r1, #0
   19324:	strb	r1, [r3, #3]
   19328:	strb	r1, [r3, #2]
   1932c:	strb	r1, [r3, #1]
   19330:	adds	r3, r2, #4
   19334:	adc	r5, ip, #0
   19338:	stm	sl, {r3, r5}
   1933c:	mov	r2, r0
   19340:	mov	r1, #0
   19344:	strb	r1, [r2, r3]!
   19348:	adds	r6, r3, #4
   1934c:	strb	r1, [r2, #3]
   19350:	strb	r1, [r2, #2]
   19354:	strb	r1, [r2, #1]
   19358:	adc	r1, r5, #0
   1935c:	str	r6, [sl]
   19360:	str	r1, [sl, #4]
   19364:	mov	r3, r0
   19368:	mov	r2, #0
   1936c:	strb	r2, [r3, r6]!
   19370:	strb	r2, [r3, #3]
   19374:	strb	r2, [r3, #2]
   19378:	strb	r2, [r3, #1]
   1937c:	adds	r2, r6, #4
   19380:	adc	r3, r1, #0
   19384:	strd	r2, [sl]
   19388:	lsr	r1, r7, #24
   1938c:	strb	r7, [r0, r2]!
   19390:	lsr	r6, r7, #16
   19394:	lsr	r5, r7, #8
   19398:	strb	r1, [r0, #3]
   1939c:	strb	r6, [r0, #2]
   193a0:	strb	r5, [r0, #1]
   193a4:	ldrb	r0, [r8]
   193a8:	adds	r4, r2, #4
   193ac:	adc	r5, r3, #0
   193b0:	cmp	r0, #0
   193b4:	strd	r4, [sl]
   193b8:	beq	1946c <read_boolean_unary_expression@@Base+0x2000>
   193bc:	ldr	r9, [pc, #2284]	; 19cb0 <read_boolean_unary_expression@@Base+0x2844>
   193c0:	adds	r0, r2, #8
   193c4:	adc	r1, r3, #0
   193c8:	add	r9, pc, r9
   193cc:	ldr	r7, [r9, #4]
   193d0:	ldr	r6, [pc, #2268]	; 19cb4 <read_boolean_unary_expression@@Base+0x2848>
   193d4:	ldr	r6, [pc, r6]
   193d8:	subs	r0, r6, r0
   193dc:	sbcs	r0, r7, r1
   193e0:	bcs	19638 <read_boolean_unary_expression@@Base+0x21cc>
   193e4:	mov	r0, #7
   193e8:	orr	r0, r0, #131072	; 0x20000
   193ec:	adds	r0, r2, r0
   193f0:	adc	r1, r3, #0
   193f4:	mvn	r2, #0
   193f8:	and	r5, r1, r2
   193fc:	mov	r1, #16646144	; 0xfe0000
   19400:	orr	r1, r1, #-16777216	; 0xff000000
   19404:	ldr	r4, [pc, #2268]	; 19ce8 <read_boolean_unary_expression@@Base+0x287c>
   19408:	and	r6, r0, r1
   1940c:	ldr	r0, [pc, #2264]	; 19cec <read_boolean_unary_expression@@Base+0x2880>
   19410:	mov	r1, r6
   19414:	add	r4, pc, r4
   19418:	ldr	r0, [pc, r0]
   1941c:	bl	11edc <realloc@plt>
   19420:	str	r6, [r9]
   19424:	str	r5, [r9, #4]
   19428:	str	r0, [r4]
   1942c:	ldrb	r1, [r8]
   19430:	ldr	r5, [sl, #4]
   19434:	ldr	r4, [pc, #2228]	; 19cf0 <read_boolean_unary_expression@@Base+0x2884>
   19438:	mov	r3, r0
   1943c:	mov	r2, #0
   19440:	ldr	r4, [pc, r4]
   19444:	strb	r2, [r3, r4]!
   19448:	strb	r2, [r3, #3]
   1944c:	strb	r2, [r3, #2]
   19450:	strb	r2, [r3, #1]
   19454:	adds	r2, r4, #4
   19458:	adc	r3, r5, #0
   1945c:	cmp	r1, #0
   19460:	strd	r2, [sl]
   19464:	beq	19498 <read_boolean_unary_expression@@Base+0x202c>
   19468:	b	19664 <read_boolean_unary_expression@@Base+0x21f8>
   1946c:	ldr	r0, [pc, #2104]	; 19cac <read_boolean_unary_expression@@Base+0x2840>
   19470:	adds	r2, r2, #8
   19474:	mov	r1, #0
   19478:	adc	r3, r3, #0
   1947c:	ldr	r0, [pc, r0]
   19480:	mov	r7, r0
   19484:	strb	r1, [r7, r4]!
   19488:	strb	r1, [r7, #3]
   1948c:	strb	r1, [r7, #2]
   19490:	strb	r1, [r7, #1]
   19494:	strd	r2, [sl]
   19498:	mov	r7, r0
   1949c:	mov	r1, #0
   194a0:	strb	r1, [r7, r2]!
   194a4:	strb	r1, [r7, #3]
   194a8:	strb	r1, [r7, #2]
   194ac:	strb	r1, [r7, #1]
   194b0:	adds	r1, r2, #4
   194b4:	adc	r5, r3, #0
   194b8:	stm	sl, {r1, r5}
   194bc:	mov	r3, r0
   194c0:	mov	r2, #0
   194c4:	strb	r2, [r3, r1]!
   194c8:	strb	r2, [r3, #3]
   194cc:	strb	r2, [r3, #2]
   194d0:	strb	r2, [r3, #1]
   194d4:	adds	r2, r1, #4
   194d8:	adc	r3, r5, #0
   194dc:	strd	r2, [sl]
   194e0:	mov	r7, r0
   194e4:	mov	r1, #0
   194e8:	strb	r1, [r7, r2]!
   194ec:	strb	r1, [r7, #3]
   194f0:	strb	r1, [r7, #2]
   194f4:	strb	r1, [r7, #1]
   194f8:	adds	r1, r2, #4
   194fc:	adc	r5, r3, #0
   19500:	stm	sl, {r1, r5}
   19504:	mov	r3, r0
   19508:	mov	r2, #0
   1950c:	strb	r2, [r3, r1]!
   19510:	adds	r4, r1, #4
   19514:	strb	r2, [r3, #3]
   19518:	strb	r2, [r3, #2]
   1951c:	strb	r2, [r3, #1]
   19520:	adc	r3, r5, #0
   19524:	str	r4, [sl]
   19528:	str	r3, [sl, #4]
   1952c:	mov	r2, r0
   19530:	mov	r1, #0
   19534:	strb	r1, [r2, r4]!
   19538:	strb	r1, [r2, #3]
   1953c:	strb	r1, [r2, #2]
   19540:	strb	r1, [r2, #1]
   19544:	adds	r2, r4, #4
   19548:	adc	r1, r3, #0
   1954c:	str	r2, [sl]
   19550:	str	r1, [sl, #4]
   19554:	mov	r3, r0
   19558:	mov	r4, #0
   1955c:	strb	r4, [r3, r2]!
   19560:	mov	r7, #163	; 0xa3
   19564:	strb	r7, [r3, #3]
   19568:	strb	r4, [r3, #2]
   1956c:	strb	r4, [r3, #1]
   19570:	ldrb	r7, [r8]
   19574:	adds	r6, r2, #4
   19578:	adc	r3, r1, #0
   1957c:	cmp	r7, #1
   19580:	str	r6, [sl]
   19584:	str	r3, [sl, #4]
   19588:	bne	195fc <read_boolean_unary_expression@@Base+0x2190>
   1958c:	ldr	r8, [pc, #1852]	; 19cd0 <read_boolean_unary_expression@@Base+0x2864>
   19590:	adds	lr, r2, #8
   19594:	adc	ip, r1, #0
   19598:	add	r8, pc, r8
   1959c:	ldr	r5, [r8, #4]
   195a0:	ldr	r7, [pc, #1836]	; 19cd4 <read_boolean_unary_expression@@Base+0x2868>
   195a4:	ldr	r7, [pc, r7]
   195a8:	subs	r7, r7, lr
   195ac:	sbcs	r7, r5, ip
   195b0:	bcs	195fc <read_boolean_unary_expression@@Base+0x2190>
   195b4:	mov	r3, #7
   195b8:	orr	r3, r3, #131072	; 0x20000
   195bc:	adds	r2, r2, r3
   195c0:	adc	r1, r1, #0
   195c4:	mvn	r3, #0
   195c8:	and	r7, r1, r3
   195cc:	mov	r1, #16646144	; 0xfe0000
   195d0:	orr	r1, r1, #-16777216	; 0xff000000
   195d4:	ldr	r5, [pc, #1788]	; 19cd8 <read_boolean_unary_expression@@Base+0x286c>
   195d8:	and	r6, r2, r1
   195dc:	mov	r1, r6
   195e0:	add	r5, pc, r5
   195e4:	bl	11edc <realloc@plt>
   195e8:	strd	r6, [r8]
   195ec:	str	r0, [r5]
   195f0:	ldr	r3, [sl, #4]
   195f4:	ldr	r6, [pc, #1760]	; 19cdc <read_boolean_unary_expression@@Base+0x2870>
   195f8:	ldr	r6, [pc, r6]
   195fc:	ldr	r0, [pc, #1756]	; 19ce0 <read_boolean_unary_expression@@Base+0x2874>
   19600:	ldr	r1, [pc, #1756]	; 19ce4 <read_boolean_unary_expression@@Base+0x2878>
   19604:	adds	r2, r6, #4
   19608:	add	r0, pc, r0
   1960c:	adc	r3, r3, #0
   19610:	ldr	r1, [pc, r1]
   19614:	strb	r4, [r1, r6]!
   19618:	strb	r4, [r1, #3]
   1961c:	strb	r4, [r1, #2]
   19620:	strb	r4, [r1, #1]
   19624:	mov	r1, #1
   19628:	strd	r2, [sl]
   1962c:	strb	r1, [r0]
   19630:	sub	sp, fp, #28
   19634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19638:	ldr	r0, [pc, #1656]	; 19cb8 <read_boolean_unary_expression@@Base+0x284c>
   1963c:	adds	r2, r2, #8
   19640:	mov	r1, #0
   19644:	adc	r3, r3, #0
   19648:	ldr	r0, [pc, r0]
   1964c:	mov	r7, r0
   19650:	strb	r1, [r7, r4]!
   19654:	strb	r1, [r7, #3]
   19658:	strb	r1, [r7, #2]
   1965c:	strb	r1, [r7, #1]
   19660:	strd	r2, [sl]
   19664:	ldr	r6, [r9, #4]
   19668:	ldr	r1, [pc, #1668]	; 19cf4 <read_boolean_unary_expression@@Base+0x2888>
   1966c:	adds	ip, r4, #8
   19670:	adc	r7, r5, #0
   19674:	ldr	r1, [pc, r1]
   19678:	subs	r1, r1, ip
   1967c:	sbcs	r1, r6, r7
   19680:	bcs	197cc <read_boolean_unary_expression@@Base+0x2360>
   19684:	mov	r1, #7
   19688:	orr	r1, r1, #131072	; 0x20000
   1968c:	adds	r1, r4, r1
   19690:	adc	r2, r5, #0
   19694:	mvn	r3, #0
   19698:	and	r5, r2, r3
   1969c:	mov	r2, #16646144	; 0xfe0000
   196a0:	orr	r2, r2, #-16777216	; 0xff000000
   196a4:	ldr	r6, [pc, #1612]	; 19cf8 <read_boolean_unary_expression@@Base+0x288c>
   196a8:	and	r4, r1, r2
   196ac:	mov	r1, r4
   196b0:	add	r6, pc, r6
   196b4:	bl	11edc <realloc@plt>
   196b8:	str	r0, [r6]
   196bc:	strd	r4, [r9]
   196c0:	ldrb	r7, [r8]
   196c4:	ldr	r3, [sl, #4]
   196c8:	ldr	r2, [pc, #1580]	; 19cfc <read_boolean_unary_expression@@Base+0x2890>
   196cc:	mov	r6, r0
   196d0:	mov	r1, #0
   196d4:	ldr	r2, [pc, r2]
   196d8:	strb	r1, [r6, r2]!
   196dc:	strb	r1, [r6, #3]
   196e0:	strb	r1, [r6, #2]
   196e4:	strb	r1, [r6, #1]
   196e8:	adds	r1, r2, #4
   196ec:	adc	r5, r3, #0
   196f0:	cmp	r7, #1
   196f4:	stm	sl, {r1, r5}
   196f8:	bne	194bc <read_boolean_unary_expression@@Base+0x2050>
   196fc:	b	197f0 <read_boolean_unary_expression@@Base+0x2384>
   19700:	mov	r2, r0
   19704:	mov	r1, #0
   19708:	strb	r1, [r2, r3]!
   1970c:	adds	r6, r3, #4
   19710:	strb	r1, [r2, #3]
   19714:	strb	r1, [r2, #2]
   19718:	strb	r1, [r2, #1]
   1971c:	adc	r1, r5, #0
   19720:	str	r6, [sl]
   19724:	str	r1, [sl, #4]
   19728:	ldr	r4, [r9, #4]
   1972c:	ldr	r2, [pc, #1376]	; 19c94 <read_boolean_unary_expression@@Base+0x2828>
   19730:	adds	ip, r3, #8
   19734:	adc	r7, r5, #0
   19738:	ldr	r2, [pc, r2]
   1973c:	subs	r2, r2, ip
   19740:	sbcs	r2, r4, r7
   19744:	bcs	19890 <read_boolean_unary_expression@@Base+0x2424>
   19748:	mov	r1, #7
   1974c:	orr	r1, r1, #131072	; 0x20000
   19750:	adds	r1, r3, r1
   19754:	adc	r2, r5, #0
   19758:	mvn	r3, #0
   1975c:	and	r5, r2, r3
   19760:	mov	r2, #16646144	; 0xfe0000
   19764:	orr	r2, r2, #-16777216	; 0xff000000
   19768:	ldr	r4, [pc, #1320]	; 19c98 <read_boolean_unary_expression@@Base+0x282c>
   1976c:	and	r6, r1, r2
   19770:	mov	r1, r6
   19774:	add	r4, pc, r4
   19778:	bl	11edc <realloc@plt>
   1977c:	str	r6, [r9]
   19780:	str	r5, [r9, #4]
   19784:	str	r0, [r4]
   19788:	ldrb	r5, [r8]
   1978c:	ldr	r1, [sl, #4]
   19790:	ldr	r6, [pc, #1284]	; 19c9c <read_boolean_unary_expression@@Base+0x2830>
   19794:	mov	r3, r0
   19798:	mov	r2, #0
   1979c:	mov	r7, #1
   197a0:	ldr	r6, [pc, r6]
   197a4:	strb	r2, [r3, r6]!
   197a8:	strb	r2, [r3, #3]
   197ac:	strb	r2, [r3, #2]
   197b0:	strb	r2, [r3, #1]
   197b4:	adds	r2, r6, #4
   197b8:	adc	r3, r1, #0
   197bc:	cmp	r5, #1
   197c0:	strd	r2, [sl]
   197c4:	bne	19388 <read_boolean_unary_expression@@Base+0x1f1c>
   197c8:	b	198b4 <read_boolean_unary_expression@@Base+0x2448>
   197cc:	mov	r7, r0
   197d0:	mov	r1, #0
   197d4:	strb	r1, [r7, r2]!
   197d8:	strb	r1, [r7, #3]
   197dc:	strb	r1, [r7, #2]
   197e0:	strb	r1, [r7, #1]
   197e4:	adds	r1, r2, #4
   197e8:	adc	r5, r3, #0
   197ec:	stm	sl, {r1, r5}
   197f0:	ldr	r4, [r9, #4]
   197f4:	ldr	r6, [pc, #1284]	; 19d00 <read_boolean_unary_expression@@Base+0x2894>
   197f8:	adds	r7, r2, #8
   197fc:	adc	ip, r3, #0
   19800:	ldr	r6, [pc, r6]
   19804:	subs	r7, r6, r7
   19808:	sbcs	r7, r4, ip
   1980c:	bcs	19928 <read_boolean_unary_expression@@Base+0x24bc>
   19810:	mov	r1, #7
   19814:	orr	r1, r1, #131072	; 0x20000
   19818:	adds	r1, r2, r1
   1981c:	adc	r2, r3, #0
   19820:	mvn	r3, #0
   19824:	and	r5, r2, r3
   19828:	mov	r2, #16646144	; 0xfe0000
   1982c:	orr	r2, r2, #-16777216	; 0xff000000
   19830:	ldr	r4, [pc, #1228]	; 19d04 <read_boolean_unary_expression@@Base+0x2898>
   19834:	and	r6, r1, r2
   19838:	mov	r1, r6
   1983c:	add	r4, pc, r4
   19840:	bl	11edc <realloc@plt>
   19844:	str	r6, [r9]
   19848:	str	r5, [r9, #4]
   1984c:	str	r0, [r4]
   19850:	ldrb	r7, [r8]
   19854:	ldr	r5, [sl, #4]
   19858:	ldr	r1, [pc, #1192]	; 19d08 <read_boolean_unary_expression@@Base+0x289c>
   1985c:	mov	r3, r0
   19860:	mov	r2, #0
   19864:	ldr	r1, [pc, r1]
   19868:	strb	r2, [r3, r1]!
   1986c:	strb	r2, [r3, #3]
   19870:	strb	r2, [r3, #2]
   19874:	strb	r2, [r3, #1]
   19878:	adds	r2, r1, #4
   1987c:	adc	r3, r5, #0
   19880:	cmp	r7, #1
   19884:	strd	r2, [sl]
   19888:	bne	194e0 <read_boolean_unary_expression@@Base+0x2074>
   1988c:	b	1994c <read_boolean_unary_expression@@Base+0x24e0>
   19890:	mov	r3, r0
   19894:	mov	r2, #0
   19898:	strb	r2, [r3, r6]!
   1989c:	strb	r2, [r3, #3]
   198a0:	strb	r2, [r3, #2]
   198a4:	strb	r2, [r3, #1]
   198a8:	adds	r2, r6, #4
   198ac:	adc	r3, r1, #0
   198b0:	strd	r2, [sl]
   198b4:	ldr	r4, [r9, #4]
   198b8:	ldr	r5, [pc, #992]	; 19ca0 <read_boolean_unary_expression@@Base+0x2834>
   198bc:	adds	lr, r6, #8
   198c0:	adc	ip, r1, #0
   198c4:	mov	r7, #1
   198c8:	ldr	r5, [pc, r5]
   198cc:	subs	r5, r5, lr
   198d0:	sbcs	r5, r4, ip
   198d4:	bcs	19388 <read_boolean_unary_expression@@Base+0x1f1c>
   198d8:	mov	r2, #7
   198dc:	orr	r2, r2, #131072	; 0x20000
   198e0:	adds	r2, r6, r2
   198e4:	adc	r1, r1, #0
   198e8:	mvn	r3, #0
   198ec:	and	r5, r1, r3
   198f0:	mov	r1, #16646144	; 0xfe0000
   198f4:	orr	r1, r1, #-16777216	; 0xff000000
   198f8:	ldr	r4, [pc, #932]	; 19ca4 <read_boolean_unary_expression@@Base+0x2838>
   198fc:	and	r6, r2, r1
   19900:	mov	r1, r6
   19904:	add	r4, pc, r4
   19908:	bl	11edc <realloc@plt>
   1990c:	str	r6, [r9]
   19910:	str	r5, [r9, #4]
   19914:	str	r0, [r4]
   19918:	ldr	r3, [sl, #4]
   1991c:	ldr	r2, [pc, #900]	; 19ca8 <read_boolean_unary_expression@@Base+0x283c>
   19920:	ldr	r2, [pc, r2]
   19924:	b	19388 <read_boolean_unary_expression@@Base+0x1f1c>
   19928:	mov	r3, r0
   1992c:	mov	r2, #0
   19930:	strb	r2, [r3, r1]!
   19934:	strb	r2, [r3, #3]
   19938:	strb	r2, [r3, #2]
   1993c:	strb	r2, [r3, #1]
   19940:	adds	r2, r1, #4
   19944:	adc	r3, r5, #0
   19948:	strd	r2, [sl]
   1994c:	ldr	r4, [r9, #4]
   19950:	ldr	r6, [pc, #948]	; 19d0c <read_boolean_unary_expression@@Base+0x28a0>
   19954:	adds	r7, r1, #8
   19958:	adc	ip, r5, #0
   1995c:	ldr	r6, [pc, r6]
   19960:	subs	r7, r6, r7
   19964:	sbcs	r7, r4, ip
   19968:	bcs	19a14 <read_boolean_unary_expression@@Base+0x25a8>
   1996c:	mov	r2, #7
   19970:	orr	r2, r2, #131072	; 0x20000
   19974:	adds	r1, r1, r2
   19978:	adc	r2, r5, #0
   1997c:	mvn	r3, #0
   19980:	and	r5, r2, r3
   19984:	mov	r2, #16646144	; 0xfe0000
   19988:	orr	r2, r2, #-16777216	; 0xff000000
   1998c:	ldr	r4, [pc, #892]	; 19d10 <read_boolean_unary_expression@@Base+0x28a4>
   19990:	and	r6, r1, r2
   19994:	mov	r1, r6
   19998:	add	r4, pc, r4
   1999c:	bl	11edc <realloc@plt>
   199a0:	str	r6, [r9]
   199a4:	str	r5, [r9, #4]
   199a8:	str	r0, [r4]
   199ac:	ldrb	r7, [r8]
   199b0:	ldr	r3, [sl, #4]
   199b4:	ldr	r2, [pc, #856]	; 19d14 <read_boolean_unary_expression@@Base+0x28a8>
   199b8:	mov	r6, r0
   199bc:	mov	r1, #0
   199c0:	ldr	r2, [pc, r2]
   199c4:	strb	r1, [r6, r2]!
   199c8:	strb	r1, [r6, #3]
   199cc:	strb	r1, [r6, #2]
   199d0:	strb	r1, [r6, #1]
   199d4:	adds	r1, r2, #4
   199d8:	adc	r5, r3, #0
   199dc:	cmp	r7, #1
   199e0:	stm	sl, {r1, r5}
   199e4:	bne	19504 <read_boolean_unary_expression@@Base+0x2098>
   199e8:	b	19a38 <read_boolean_unary_expression@@Base+0x25cc>
   199ec:	ldr	r1, [pc, #616]	; 19c5c <read_boolean_unary_expression@@Base+0x27f0>
   199f0:	add	r1, pc, r1
   199f4:	ldr	r0, [pc, #600]	; 19c54 <read_boolean_unary_expression@@Base+0x27e8>
   199f8:	ldr	r0, [pc, r0]
   199fc:	ldr	r0, [r0]
   19a00:	ldr	r2, [pc, #592]	; 19c58 <read_boolean_unary_expression@@Base+0x27ec>
   19a04:	ldr	r2, [pc, r2]
   19a08:	sub	sp, fp, #28
   19a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a10:	b	11f78 <fprintf@plt>
   19a14:	mov	r7, r0
   19a18:	mov	r1, #0
   19a1c:	strb	r1, [r7, r2]!
   19a20:	strb	r1, [r7, #3]
   19a24:	strb	r1, [r7, #2]
   19a28:	strb	r1, [r7, #1]
   19a2c:	adds	r1, r2, #4
   19a30:	adc	r5, r3, #0
   19a34:	stm	sl, {r1, r5}
   19a38:	ldr	r4, [r9, #4]
   19a3c:	ldr	r6, [pc, #724]	; 19d18 <read_boolean_unary_expression@@Base+0x28ac>
   19a40:	adds	r7, r2, #8
   19a44:	adc	ip, r3, #0
   19a48:	ldr	r6, [pc, r6]
   19a4c:	subs	r7, r6, r7
   19a50:	sbcs	r7, r4, ip
   19a54:	bcs	19adc <read_boolean_unary_expression@@Base+0x2670>
   19a58:	mov	r1, #7
   19a5c:	orr	r1, r1, #131072	; 0x20000
   19a60:	adds	r1, r2, r1
   19a64:	adc	r2, r3, #0
   19a68:	mvn	r3, #0
   19a6c:	and	r5, r2, r3
   19a70:	mov	r2, #16646144	; 0xfe0000
   19a74:	orr	r2, r2, #-16777216	; 0xff000000
   19a78:	ldr	r4, [pc, #668]	; 19d1c <read_boolean_unary_expression@@Base+0x28b0>
   19a7c:	and	r6, r1, r2
   19a80:	mov	r1, r6
   19a84:	add	r4, pc, r4
   19a88:	bl	11edc <realloc@plt>
   19a8c:	str	r6, [r9]
   19a90:	str	r5, [r9, #4]
   19a94:	str	r0, [r4]
   19a98:	ldrb	r2, [r8]
   19a9c:	ldr	r5, [sl, #4]
   19aa0:	ldr	r1, [pc, #632]	; 19d20 <read_boolean_unary_expression@@Base+0x28b4>
   19aa4:	mov	r7, r0
   19aa8:	mov	r3, #0
   19aac:	ldr	r1, [pc, r1]
   19ab0:	adds	r4, r1, #4
   19ab4:	strb	r3, [r7, r1]!
   19ab8:	str	r4, [sl]
   19abc:	strb	r3, [r7, #3]
   19ac0:	strb	r3, [r7, #2]
   19ac4:	strb	r3, [r7, #1]
   19ac8:	adc	r3, r5, #0
   19acc:	cmp	r2, #1
   19ad0:	str	r3, [sl, #4]
   19ad4:	bne	1952c <read_boolean_unary_expression@@Base+0x20c0>
   19ad8:	b	19b04 <read_boolean_unary_expression@@Base+0x2698>
   19adc:	mov	r3, r0
   19ae0:	mov	r2, #0
   19ae4:	strb	r2, [r3, r1]!
   19ae8:	adds	r4, r1, #4
   19aec:	strb	r2, [r3, #3]
   19af0:	strb	r2, [r3, #2]
   19af4:	strb	r2, [r3, #1]
   19af8:	adc	r3, r5, #0
   19afc:	str	r4, [sl]
   19b00:	str	r3, [sl, #4]
   19b04:	ldr	r6, [r9, #4]
   19b08:	ldr	r2, [pc, #532]	; 19d24 <read_boolean_unary_expression@@Base+0x28b8>
   19b0c:	adds	ip, r1, #8
   19b10:	adc	r7, r5, #0
   19b14:	ldr	r2, [pc, r2]
   19b18:	subs	r2, r2, ip
   19b1c:	sbcs	r2, r6, r7
   19b20:	bcs	19ba8 <read_boolean_unary_expression@@Base+0x273c>
   19b24:	mov	r2, #7
   19b28:	orr	r2, r2, #131072	; 0x20000
   19b2c:	adds	r1, r1, r2
   19b30:	adc	r2, r5, #0
   19b34:	mvn	r3, #0
   19b38:	and	r5, r2, r3
   19b3c:	mov	r2, #16646144	; 0xfe0000
   19b40:	orr	r2, r2, #-16777216	; 0xff000000
   19b44:	ldr	r4, [pc, #368]	; 19cbc <read_boolean_unary_expression@@Base+0x2850>
   19b48:	and	r6, r1, r2
   19b4c:	mov	r1, r6
   19b50:	add	r4, pc, r4
   19b54:	bl	11edc <realloc@plt>
   19b58:	str	r6, [r9]
   19b5c:	str	r5, [r9, #4]
   19b60:	str	r0, [r4]
   19b64:	ldrb	r7, [r8]
   19b68:	ldr	r3, [sl, #4]
   19b6c:	ldr	r4, [pc, #332]	; 19cc0 <read_boolean_unary_expression@@Base+0x2854>
   19b70:	mov	r2, r0
   19b74:	mov	r1, #0
   19b78:	ldr	r4, [pc, r4]
   19b7c:	strb	r1, [r2, r4]!
   19b80:	strb	r1, [r2, #3]
   19b84:	strb	r1, [r2, #2]
   19b88:	strb	r1, [r2, #1]
   19b8c:	adds	r2, r4, #4
   19b90:	adc	r1, r3, #0
   19b94:	cmp	r7, #0
   19b98:	str	r2, [sl]
   19b9c:	str	r1, [sl, #4]
   19ba0:	beq	19554 <read_boolean_unary_expression@@Base+0x20e8>
   19ba4:	b	19bd0 <read_boolean_unary_expression@@Base+0x2764>
   19ba8:	mov	r2, r0
   19bac:	mov	r1, #0
   19bb0:	strb	r1, [r2, r4]!
   19bb4:	strb	r1, [r2, #3]
   19bb8:	strb	r1, [r2, #2]
   19bbc:	strb	r1, [r2, #1]
   19bc0:	adds	r2, r4, #4
   19bc4:	adc	r1, r3, #0
   19bc8:	str	r2, [sl]
   19bcc:	str	r1, [sl, #4]
   19bd0:	ldr	r5, [r9, #4]
   19bd4:	ldr	r6, [pc, #232]	; 19cc4 <read_boolean_unary_expression@@Base+0x2858>
   19bd8:	adds	r7, r4, #8
   19bdc:	adc	ip, r3, #0
   19be0:	ldr	r6, [pc, r6]
   19be4:	subs	r7, r6, r7
   19be8:	sbcs	r7, r5, ip
   19bec:	bcs	19554 <read_boolean_unary_expression@@Base+0x20e8>
   19bf0:	mov	r1, #7
   19bf4:	orr	r1, r1, #131072	; 0x20000
   19bf8:	adds	r1, r4, r1
   19bfc:	adc	r2, r3, #0
   19c00:	mvn	r3, #0
   19c04:	and	r7, r2, r3
   19c08:	mov	r2, #16646144	; 0xfe0000
   19c0c:	orr	r2, r2, #-16777216	; 0xff000000
   19c10:	ldr	r5, [pc, #176]	; 19cc8 <read_boolean_unary_expression@@Base+0x285c>
   19c14:	and	r6, r1, r2
   19c18:	mov	r1, r6
   19c1c:	add	r5, pc, r5
   19c20:	bl	11edc <realloc@plt>
   19c24:	strd	r6, [r9]
   19c28:	str	r0, [r5]
   19c2c:	ldr	r1, [sl, #4]
   19c30:	ldr	r2, [pc, #148]	; 19ccc <read_boolean_unary_expression@@Base+0x2860>
   19c34:	ldr	r2, [pc, r2]
   19c38:	b	19554 <read_boolean_unary_expression@@Base+0x20e8>
   19c3c:	andeq	r4, r1, ip, ror #27
   19c40:	andeq	r4, r1, ip, ror #27
   19c44:	andeq	r4, r1, r0, ror #27
   19c48:	andeq	r4, r1, r4, asr #27
   19c4c:	strdeq	r4, [r1], -r8
   19c50:	strdeq	r2, [r0], -r9
   19c54:	andeq	r3, r1, r4, asr #13
   19c58:	andeq	r4, r1, ip, lsr #7
   19c5c:	andeq	r1, r0, r2, ror #24
   19c60:	strdeq	r4, [r1], -r8
   19c64:			; <UNDEFINED> instruction: 0x00014db4
   19c68:	andeq	r4, r1, r8, lsr #27
   19c6c:	muleq	r1, ip, ip
   19c70:	andeq	r4, r1, ip, asr sp
   19c74:	andeq	r4, r1, r8, asr sp
   19c78:	andeq	r4, r1, r8, lsr sp
   19c7c:	andeq	r4, r1, r4, ror ip
   19c80:	andeq	r4, r1, r4, lsr ip
   19c84:	andeq	r4, r1, r8, lsl ip
   19c88:	andeq	r4, r1, r4, lsr #23
   19c8c:	andeq	r4, r1, r4, ror #22
   19c90:	andeq	r4, r1, r8, asr #22
   19c94:	andeq	r4, r1, r8, lsl #13
   19c98:	andeq	r4, r1, r8, asr #12
   19c9c:	andeq	r4, r1, r8, lsr #12
   19ca0:	strdeq	r4, [r1], -r8
   19ca4:			; <UNDEFINED> instruction: 0x000144b8
   19ca8:	andeq	r4, r1, r8, lsr #9
   19cac:	andeq	r4, r1, r0, asr #18
   19cb0:	strdeq	r4, [r1], -r8
   19cb4:	andeq	r4, r1, ip, ror #19
   19cb8:	andeq	r4, r1, r4, ror r7
   19cbc:	andeq	r4, r1, ip, ror #4
   19cc0:	andeq	r4, r1, r0, asr r2
   19cc4:	andeq	r4, r1, r0, ror #3
   19cc8:	andeq	r4, r1, r0, lsr #3
   19ccc:	muleq	r1, r4, r1
   19cd0:	andeq	r4, r1, r8, lsr #16
   19cd4:	andeq	r4, r1, ip, lsl r8
   19cd8:	ldrdeq	r4, [r1], -ip
   19cdc:	ldrdeq	r4, [r1], -r0
   19ce0:	andeq	r4, r1, r8, asr #15
   19ce4:	andeq	r4, r1, ip, lsr #15
   19ce8:	andeq	r4, r1, r8, lsr #19
   19cec:	andeq	r4, r1, r4, lsr #19
   19cf0:	andeq	r4, r1, r8, lsl #19
   19cf4:	andeq	r4, r1, ip, asr #14
   19cf8:	andeq	r4, r1, ip, lsl #14
   19cfc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   19d00:	andeq	r4, r1, r0, asr #11
   19d04:	andeq	r4, r1, r0, lsl #11
   19d08:	andeq	r4, r1, r4, ror #10
   19d0c:	andeq	r4, r1, r4, ror #8
   19d10:	andeq	r4, r1, r4, lsr #8
   19d14:	andeq	r4, r1, r8, lsl #8
   19d18:	andeq	r4, r1, r8, ror r3
   19d1c:	andeq	r4, r1, r8, lsr r3
   19d20:	andeq	r4, r1, ip, lsl r3
   19d24:	andeq	r4, r1, ip, lsr #5
   19d28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d2c:	add	fp, sp, #28
   19d30:	sub	sp, sp, #4
   19d34:	ldr	r0, [pc, #496]	; 19f2c <read_boolean_unary_expression@@Base+0x2ac0>
   19d38:	ldr	r0, [pc, r0]
   19d3c:	cmp	r0, #0
   19d40:	beq	19ed4 <read_boolean_unary_expression@@Base+0x2a68>
   19d44:	ldr	sl, [pc, #484]	; 19f30 <read_boolean_unary_expression@@Base+0x2ac4>
   19d48:	mov	r5, #0
   19d4c:	mov	r1, #0
   19d50:	add	sl, pc, sl
   19d54:	ldrb	r0, [sl]
   19d58:	ldr	r8, [pc, #468]	; 19f34 <read_boolean_unary_expression@@Base+0x2ac8>
   19d5c:	ldr	r4, [pc, #468]	; 19f38 <read_boolean_unary_expression@@Base+0x2acc>
   19d60:	cmp	r0, #1
   19d64:	add	r8, pc, r8
   19d68:	add	r4, pc, r4
   19d6c:	bne	19de8 <read_boolean_unary_expression@@Base+0x297c>
   19d70:	ldr	r9, [pc, #452]	; 19f3c <read_boolean_unary_expression@@Base+0x2ad0>
   19d74:	ldr	r0, [r8, #4]
   19d78:	ldr	r2, [pc, #448]	; 19f40 <read_boolean_unary_expression@@Base+0x2ad4>
   19d7c:	add	r9, pc, r9
   19d80:	mov	ip, r4
   19d84:	mov	r1, #1
   19d88:	ldr	r2, [pc, r2]
   19d8c:	ldr	r7, [r9, #4]
   19d90:	ldr	r4, [pc, #428]	; 19f44 <read_boolean_unary_expression@@Base+0x2ad8>
   19d94:	adds	r3, r2, #8
   19d98:	adc	r6, r0, #0
   19d9c:	ldr	r4, [pc, r4]
   19da0:	subs	r3, r4, r3
   19da4:	mov	r4, ip
   19da8:	sbcs	r3, r7, r6
   19dac:	bcs	19de8 <read_boolean_unary_expression@@Base+0x297c>
   19db0:	mov	r1, #7
   19db4:	orr	r1, r1, #131072	; 0x20000
   19db8:	adds	r1, r2, r1
   19dbc:	adc	r7, r0, #0
   19dc0:	mov	r0, #16646144	; 0xfe0000
   19dc4:	orr	r0, r0, #-16777216	; 0xff000000
   19dc8:	and	r6, r1, r0
   19dcc:	ldr	r0, [pc, #372]	; 19f48 <read_boolean_unary_expression@@Base+0x2adc>
   19dd0:	mov	r1, r6
   19dd4:	ldr	r0, [pc, r0]
   19dd8:	bl	11edc <realloc@plt>
   19ddc:	ldrb	r1, [sl]
   19de0:	strd	r6, [r9]
   19de4:	str	r0, [r4]
   19de8:	ldr	r2, [pc, #348]	; 19f4c <read_boolean_unary_expression@@Base+0x2ae0>
   19dec:	ldr	r2, [pc, r2]
   19df0:	ldr	r0, [pc, #344]	; 19f50 <read_boolean_unary_expression@@Base+0x2ae4>
   19df4:	ldr	r0, [pc, r0]
   19df8:	ldr	r3, [r8, #4]
   19dfc:	mov	r7, r0
   19e00:	strb	r5, [r7, r2]!
   19e04:	adds	r2, r2, #8
   19e08:	adc	r3, r3, #0
   19e0c:	strb	r5, [r7, #5]
   19e10:	strb	r5, [r7, #3]
   19e14:	strb	r5, [r7, #2]
   19e18:	strb	r5, [r7, #1]
   19e1c:	strb	r5, [r7, #4]!
   19e20:	cmp	r1, #0
   19e24:	strb	r5, [r7, #3]
   19e28:	strb	r5, [r7, #2]
   19e2c:	strd	r2, [r8]
   19e30:	beq	19e58 <read_boolean_unary_expression@@Base+0x29ec>
   19e34:	ldr	r3, [pc, #280]	; 19f54 <read_boolean_unary_expression@@Base+0x2ae8>
   19e38:	mov	r1, r2
   19e3c:	mov	r2, #1
   19e40:	ldr	r3, [pc, r3]
   19e44:	bl	11ee8 <fwrite@plt>
   19e48:	ldr	r0, [pc, #264]	; 19f58 <read_boolean_unary_expression@@Base+0x2aec>
   19e4c:	ldr	r0, [pc, r0]
   19e50:	bl	11e94 <free@plt>
   19e54:	b	19e9c <read_boolean_unary_expression@@Base+0x2a30>
   19e58:	ldr	r1, [pc, #252]	; 19f5c <read_boolean_unary_expression@@Base+0x2af0>
   19e5c:	mov	r2, #4
   19e60:	ldr	r1, [pc, r1]
   19e64:	bl	12014 <msync@plt>
   19e68:	cmn	r0, #1
   19e6c:	beq	19ee8 <read_boolean_unary_expression@@Base+0x2a7c>
   19e70:	ldr	r1, [pc, #244]	; 19f6c <read_boolean_unary_expression@@Base+0x2b00>
   19e74:	ldr	r1, [pc, r1]
   19e78:	ldr	r0, [pc, #240]	; 19f70 <read_boolean_unary_expression@@Base+0x2b04>
   19e7c:	ldr	r0, [pc, r0]
   19e80:	bl	11ff0 <munmap@plt>
   19e84:	ldr	r0, [pc, #232]	; 19f74 <read_boolean_unary_expression@@Base+0x2b08>
   19e88:	mov	r1, #0
   19e8c:	str	r1, [r4]
   19e90:	add	r0, pc, r0
   19e94:	str	r1, [r0]
   19e98:	str	r1, [r0, #4]
   19e9c:	ldr	r0, [pc, #212]	; 19f78 <read_boolean_unary_expression@@Base+0x2b0c>
   19ea0:	ldr	r0, [pc, r0]
   19ea4:	bl	11e88 <fflush@plt>
   19ea8:	ldr	r0, [pc, #204]	; 19f7c <read_boolean_unary_expression@@Base+0x2b10>
   19eac:	ldr	r0, [pc, r0]
   19eb0:	bl	1a428 <__gcov_flush@@Base+0x304>
   19eb4:	ldr	r0, [pc, #196]	; 19f80 <read_boolean_unary_expression@@Base+0x2b14>
   19eb8:	ldr	r0, [pc, r0]
   19ebc:	bl	11fd8 <fclose@plt>
   19ec0:	ldr	r0, [pc, #188]	; 19f84 <read_boolean_unary_expression@@Base+0x2b18>
   19ec4:	mov	r1, #0
   19ec8:	str	r1, [r4]
   19ecc:	add	r0, pc, r0
   19ed0:	str	r1, [r0]
   19ed4:	ldr	r0, [pc, #172]	; 19f88 <read_boolean_unary_expression@@Base+0x2b1c>
   19ed8:	ldr	r0, [pc, r0]
   19edc:	sub	sp, fp, #28
   19ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ee4:	b	11e94 <free@plt>
   19ee8:	bl	11f84 <__errno_location@plt>
   19eec:	ldr	r1, [pc, #108]	; 19f60 <read_boolean_unary_expression@@Base+0x2af4>
   19ef0:	mov	r6, r4
   19ef4:	ldr	r1, [pc, r1]
   19ef8:	ldr	r0, [r0]
   19efc:	ldr	r4, [r1]
   19f00:	ldr	r5, [pc, #92]	; 19f64 <read_boolean_unary_expression@@Base+0x2af8>
   19f04:	ldr	r5, [pc, r5]
   19f08:	bl	11f30 <strerror@plt>
   19f0c:	ldr	r1, [pc, #84]	; 19f68 <read_boolean_unary_expression@@Base+0x2afc>
   19f10:	mov	r3, r0
   19f14:	mov	r0, r4
   19f18:	add	r1, pc, r1
   19f1c:	mov	r2, r5
   19f20:	mov	r4, r6
   19f24:	bl	11f78 <fprintf@plt>
   19f28:	b	19e70 <read_boolean_unary_expression@@Base+0x2a04>
   19f2c:	andeq	r4, r1, r0, lsl #1
   19f30:	andeq	r4, r1, r4, rrx
   19f34:	andeq	r4, r1, r4, rrx
   19f38:	andeq	r4, r1, r4, asr r0
   19f3c:	andeq	r4, r1, r4, asr #32
   19f40:	andeq	r4, r1, r0, asr #32
   19f44:	andeq	r4, r1, r4, lsr #32
   19f48:	andeq	r3, r1, r8, ror #31
   19f4c:	ldrdeq	r3, [r1], -ip
   19f50:	andeq	r3, r1, r8, asr #31
   19f54:	andeq	r3, r1, r8, ror pc
   19f58:	andeq	r3, r1, r0, ror pc
   19f5c:	andeq	r3, r1, r0, lsl #31
   19f60:	andeq	r3, r1, r8, asr #3
   19f64:	andeq	r3, r1, ip, lsr #29
   19f68:	andeq	r1, r0, r8, lsr #15
   19f6c:	andeq	r3, r1, ip, ror #30
   19f70:	andeq	r3, r1, r0, asr #30
   19f74:	andeq	r3, r1, r0, asr pc
   19f78:	andeq	r3, r1, r8, lsl pc
   19f7c:	andeq	r3, r1, r4, lsr r2
   19f80:	andeq	r3, r1, r0, lsl #30
   19f84:	andeq	r3, r1, ip, ror #29
   19f88:	ldrdeq	r3, [r1], -r8
   19f8c:	push	{r4, sl, fp, lr}
   19f90:	add	fp, sp, #8
   19f94:	mov	r4, r0
   19f98:	mov	r0, #12
   19f9c:	bl	11f18 <malloc@plt>
   19fa0:	ldr	r1, [pc, #60]	; 19fe4 <read_boolean_unary_expression@@Base+0x2b78>
   19fa4:	mov	r2, #0
   19fa8:	add	r1, pc, r1
   19fac:	stm	r0, {r1, r4}
   19fb0:	str	r2, [r0, #8]
   19fb4:	ldr	r1, [pc, #44]	; 19fe8 <read_boolean_unary_expression@@Base+0x2b7c>
   19fb8:	ldr	r1, [pc, r1]
   19fbc:	mov	r2, r1
   19fc0:	ldr	r3, [r2], #4
   19fc4:	ldr	r4, [r2]
   19fc8:	cmp	r3, #0
   19fcc:	mov	r3, r2
   19fd0:	addne	r3, r4, #8
   19fd4:	moveq	r2, r1
   19fd8:	str	r0, [r3]
   19fdc:	str	r0, [r2]
   19fe0:	pop	{r4, sl, fp, pc}
   19fe4:	andeq	r3, r1, ip, lsr #28
   19fe8:	strdeq	r3, [r1], -ip
   19fec:	push	{r4, r5, fp, lr}
   19ff0:	add	fp, sp, #8
   19ff4:	ldr	r0, [pc, #64]	; 1a03c <read_boolean_unary_expression@@Base+0x2bd0>
   19ff8:	ldr	r0, [pc, r0]
   19ffc:	ldr	r4, [r0]
   1a000:	cmp	r4, #0
   1a004:	beq	1a038 <read_boolean_unary_expression@@Base+0x2bcc>
   1a008:	ldr	r5, [pc, #48]	; 1a040 <read_boolean_unary_expression@@Base+0x2bd4>
   1a00c:	add	r5, pc, r5
   1a010:	b	1a020 <read_boolean_unary_expression@@Base+0x2bb4>
   1a014:	ldr	r4, [r4, #8]
   1a018:	cmp	r4, #0
   1a01c:	beq	1a038 <read_boolean_unary_expression@@Base+0x2bcc>
   1a020:	ldr	r0, [r4]
   1a024:	cmp	r0, r5
   1a028:	bne	1a014 <read_boolean_unary_expression@@Base+0x2ba8>
   1a02c:	ldr	r0, [r4, #4]
   1a030:	blx	r0
   1a034:	b	1a014 <read_boolean_unary_expression@@Base+0x2ba8>
   1a038:	pop	{r4, r5, fp, pc}
   1a03c:	strheq	r3, [r1], -ip
   1a040:	andeq	r3, r1, r8, asr #27
   1a044:	push	{r4, r5, r6, r7, fp, lr}
   1a048:	add	fp, sp, #16
   1a04c:	ldr	r4, [pc, #104]	; 1a0bc <read_boolean_unary_expression@@Base+0x2c50>
   1a050:	ldr	r4, [pc, r4]
   1a054:	ldr	r0, [r4]
   1a058:	cmp	r0, #0
   1a05c:	beq	1a0b8 <read_boolean_unary_expression@@Base+0x2c4c>
   1a060:	ldr	r5, [pc, #88]	; 1a0c0 <read_boolean_unary_expression@@Base+0x2c54>
   1a064:	mov	r6, #0
   1a068:	add	r5, pc, r5
   1a06c:	b	1a0a0 <read_boolean_unary_expression@@Base+0x2c34>
   1a070:	ldr	r1, [r4]
   1a074:	cmp	r0, r1
   1a078:	streq	r7, [r4]
   1a07c:	ldr	r1, [r4, #4]
   1a080:	cmp	r0, r1
   1a084:	streq	r6, [r4, #4]
   1a088:	cmp	r6, #0
   1a08c:	strne	r7, [r6, #8]
   1a090:	bl	11e94 <free@plt>
   1a094:	mov	r0, r7
   1a098:	cmp	r7, #0
   1a09c:	beq	1a0b8 <read_boolean_unary_expression@@Base+0x2c4c>
   1a0a0:	ldr	r1, [r0]
   1a0a4:	ldr	r7, [r0, #8]
   1a0a8:	cmp	r1, r5
   1a0ac:	beq	1a070 <read_boolean_unary_expression@@Base+0x2c04>
   1a0b0:	mov	r6, r0
   1a0b4:	b	1a094 <read_boolean_unary_expression@@Base+0x2c28>
   1a0b8:	pop	{r4, r5, r6, r7, fp, pc}
   1a0bc:	andeq	r3, r1, r4, rrx
   1a0c0:	andeq	r3, r1, ip, ror #26
   1a0c4:	push	{r4, sl, fp, lr}
   1a0c8:	add	fp, sp, #8
   1a0cc:	mov	r4, r0
   1a0d0:	mov	r0, #12
   1a0d4:	bl	11f18 <malloc@plt>
   1a0d8:	ldr	r1, [pc, #60]	; 1a11c <read_boolean_unary_expression@@Base+0x2cb0>
   1a0dc:	mov	r2, #0
   1a0e0:	add	r1, pc, r1
   1a0e4:	stm	r0, {r1, r4}
   1a0e8:	str	r2, [r0, #8]
   1a0ec:	ldr	r1, [pc, #44]	; 1a120 <read_boolean_unary_expression@@Base+0x2cb4>
   1a0f0:	ldr	r1, [pc, r1]
   1a0f4:	mov	r2, r1
   1a0f8:	ldr	r3, [r2], #4
   1a0fc:	ldr	r4, [r2]
   1a100:	cmp	r3, #0
   1a104:	mov	r3, r2
   1a108:	addne	r3, r4, #8
   1a10c:	moveq	r2, r1
   1a110:	str	r0, [r3]
   1a114:	str	r0, [r2]
   1a118:	pop	{r4, sl, fp, pc}
   1a11c:	strdeq	r3, [r1], -r4
   1a120:	andeq	r2, r1, r0, asr #31

0001a124 <__gcov_flush@@Base>:
   1a124:	push	{r4, sl, fp, lr}
   1a128:	add	fp, sp, #8
   1a12c:	ldr	r0, [pc, #36]	; 1a158 <__gcov_flush@@Base+0x34>
   1a130:	ldr	r0, [pc, r0]
   1a134:	ldr	r4, [r0]
   1a138:	cmp	r4, #0
   1a13c:	beq	1a154 <__gcov_flush@@Base+0x30>
   1a140:	ldr	r0, [r4, #4]
   1a144:	blx	r0
   1a148:	ldr	r4, [r4, #8]
   1a14c:	cmp	r4, #0
   1a150:	bne	1a140 <__gcov_flush@@Base+0x1c>
   1a154:	pop	{r4, sl, fp, pc}
   1a158:	andeq	r2, r1, r0, lsl #31
   1a15c:	push	{r4, r5, r6, r7, fp, lr}
   1a160:	add	fp, sp, #16
   1a164:	ldr	r4, [pc, #104]	; 1a1d4 <__gcov_flush@@Base+0xb0>
   1a168:	ldr	r4, [pc, r4]
   1a16c:	ldr	r0, [r4]
   1a170:	cmp	r0, #0
   1a174:	beq	1a1d0 <__gcov_flush@@Base+0xac>
   1a178:	ldr	r5, [pc, #88]	; 1a1d8 <__gcov_flush@@Base+0xb4>
   1a17c:	mov	r6, #0
   1a180:	add	r5, pc, r5
   1a184:	b	1a1b8 <__gcov_flush@@Base+0x94>
   1a188:	ldr	r1, [r4]
   1a18c:	cmp	r0, r1
   1a190:	streq	r7, [r4]
   1a194:	ldr	r1, [r4, #4]
   1a198:	cmp	r0, r1
   1a19c:	streq	r6, [r4, #4]
   1a1a0:	cmp	r6, #0
   1a1a4:	strne	r7, [r6, #8]
   1a1a8:	bl	11e94 <free@plt>
   1a1ac:	mov	r0, r7
   1a1b0:	cmp	r7, #0
   1a1b4:	beq	1a1d0 <__gcov_flush@@Base+0xac>
   1a1b8:	ldr	r1, [r0]
   1a1bc:	ldr	r7, [r0, #8]
   1a1c0:	cmp	r1, r5
   1a1c4:	beq	1a188 <__gcov_flush@@Base+0x64>
   1a1c8:	mov	r6, r0
   1a1cc:	b	1a1ac <__gcov_flush@@Base+0x88>
   1a1d0:	pop	{r4, r5, r6, r7, fp, pc}
   1a1d4:	andeq	r2, r1, r8, asr #30
   1a1d8:	andeq	r3, r1, r4, asr ip
   1a1dc:	push	{r4, r5, r6, sl, fp, lr}
   1a1e0:	add	fp, sp, #16
   1a1e4:	ldr	r6, [pc, #228]	; 1a2d0 <__gcov_flush@@Base+0x1ac>
   1a1e8:	mov	r4, r1
   1a1ec:	cmp	r0, #0
   1a1f0:	add	r6, pc, r6
   1a1f4:	beq	1a240 <__gcov_flush@@Base+0x11c>
   1a1f8:	mov	r5, r0
   1a1fc:	mov	r0, #12
   1a200:	bl	11f18 <malloc@plt>
   1a204:	mov	r1, #0
   1a208:	str	r6, [r0]
   1a20c:	str	r5, [r0, #4]
   1a210:	str	r1, [r0, #8]
   1a214:	ldr	r1, [pc, #184]	; 1a2d4 <__gcov_flush@@Base+0x1b0>
   1a218:	ldr	r1, [pc, r1]
   1a21c:	mov	r2, r1
   1a220:	ldr	r3, [r2], #4
   1a224:	ldr	r5, [r2]
   1a228:	cmp	r3, #0
   1a22c:	mov	r3, r2
   1a230:	addne	r3, r5, #8
   1a234:	moveq	r2, r1
   1a238:	str	r0, [r3]
   1a23c:	str	r0, [r2]
   1a240:	cmp	r4, #0
   1a244:	beq	1a28c <__gcov_flush@@Base+0x168>
   1a248:	mov	r0, #12
   1a24c:	bl	11f18 <malloc@plt>
   1a250:	mov	r1, #0
   1a254:	str	r6, [r0]
   1a258:	str	r4, [r0, #4]
   1a25c:	str	r1, [r0, #8]
   1a260:	ldr	r1, [pc, #112]	; 1a2d8 <__gcov_flush@@Base+0x1b4>
   1a264:	ldr	r1, [pc, r1]
   1a268:	mov	r2, r1
   1a26c:	ldr	r3, [r2], #4
   1a270:	ldr	r6, [r2]
   1a274:	cmp	r3, #0
   1a278:	mov	r3, r2
   1a27c:	addne	r3, r6, #8
   1a280:	moveq	r2, r1
   1a284:	str	r0, [r3]
   1a288:	str	r0, [r2]
   1a28c:	ldr	r1, [pc, #72]	; 1a2dc <__gcov_flush@@Base+0x1b8>
   1a290:	add	r1, pc, r1
   1a294:	ldrb	r0, [r1]
   1a298:	cmp	r0, #0
   1a29c:	popne	{r4, r5, r6, sl, fp, pc}
   1a2a0:	ldr	r0, [pc, #56]	; 1a2e0 <__gcov_flush@@Base+0x1bc>
   1a2a4:	mov	r2, #1
   1a2a8:	strb	r2, [r1]
   1a2ac:	add	r0, pc, r0
   1a2b0:	bl	1a87c <__libc_csu_fini@@Base+0x4>
   1a2b4:	ldr	r0, [pc, #40]	; 1a2e4 <__gcov_flush@@Base+0x1c0>
   1a2b8:	add	r0, pc, r0
   1a2bc:	bl	1a87c <__libc_csu_fini@@Base+0x4>
   1a2c0:	ldr	r0, [pc, #32]	; 1a2e8 <__gcov_flush@@Base+0x1c4>
   1a2c4:	add	r0, pc, r0
   1a2c8:	pop	{r4, r5, r6, sl, fp, lr}
   1a2cc:	b	1a87c <__libc_csu_fini@@Base+0x4>
   1a2d0:	andeq	r3, r1, r4, ror #23
   1a2d4:	muleq	r1, ip, lr
   1a2d8:	andeq	r2, r1, ip, asr #28
   1a2dc:	andeq	r3, r1, r8, asr #22
   1a2e0:			; <UNDEFINED> instruction: 0xfffffea8
   1a2e4:			; <UNDEFINED> instruction: 0xfffffd84
   1a2e8:			; <UNDEFINED> instruction: 0xfffffd20
   1a2ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a2f0:	add	fp, sp, #24
   1a2f4:	ldr	r7, [pc, #68]	; 1a340 <__gcov_flush@@Base+0x21c>
   1a2f8:	mov	r4, r0
   1a2fc:	mov	r5, #1
   1a300:	mov	r8, #0
   1a304:	ldr	r7, [pc, r7]
   1a308:	mov	r6, #47	; 0x2f
   1a30c:	b	1a328 <__gcov_flush@@Base+0x204>
   1a310:	strb	r8, [r4, r5]
   1a314:	ldr	r1, [r7]
   1a318:	mov	r0, r4
   1a31c:	bl	11f9c <mkdir@plt>
   1a320:	strb	r6, [r4, r5]
   1a324:	add	r5, r5, #1
   1a328:	ldrb	r0, [r4, r5]
   1a32c:	cmp	r0, #47	; 0x2f
   1a330:	beq	1a310 <__gcov_flush@@Base+0x1ec>
   1a334:	cmp	r0, #0
   1a338:	bne	1a324 <__gcov_flush@@Base+0x200>
   1a33c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a340:	andeq	r2, r1, r8, lsr #27
   1a344:	ldr	r0, [pc, #8]	; 1a354 <__gcov_flush@@Base+0x230>
   1a348:	ldr	r0, [pc, r0]
   1a34c:	ldr	r0, [r0]
   1a350:	bx	lr
   1a354:	andeq	r2, r1, r4, ror #26
   1a358:	ldr	r1, [pc, #8]	; 1a368 <__gcov_flush@@Base+0x244>
   1a35c:	ldr	r1, [pc, r1]
   1a360:	str	r0, [r1]
   1a364:	bx	lr
   1a368:	andeq	r2, r1, r0, asr sp
   1a36c:	push	{r4, r5, r6, sl, fp, lr}
   1a370:	add	fp, sp, #16
   1a374:	sub	sp, sp, #392	; 0x188
   1a378:	mov	r6, sp
   1a37c:	mov	r5, r0
   1a380:	mov	r0, r6
   1a384:	mov	r4, r1
   1a388:	bl	11ec4 <uname@plt>
   1a38c:	cmp	r0, #0
   1a390:	bmi	1a3a8 <__gcov_flush@@Base+0x284>
   1a394:	add	r1, r6, #65	; 0x41
   1a398:	mov	r0, r5
   1a39c:	mov	r2, r4
   1a3a0:	bl	11fb4 <strncpy@plt>
   1a3a4:	mov	r0, #0
   1a3a8:	sub	sp, fp, #16
   1a3ac:	pop	{r4, r5, r6, sl, fp, pc}
   1a3b0:	push	{r4, r5, r6, sl, fp, lr}
   1a3b4:	add	fp, sp, #16
   1a3b8:	sub	sp, sp, #32
   1a3bc:	mov	r4, #0
   1a3c0:	str	r4, [sp, #8]
   1a3c4:	strh	r4, [sp, #2]
   1a3c8:	mov	r5, r0
   1a3cc:	str	r4, [sp, #12]
   1a3d0:	str	r4, [sp, #16]
   1a3d4:	str	r4, [sp, #20]
   1a3d8:	bl	11f48 <getpid@plt>
   1a3dc:	mov	r6, sp
   1a3e0:	str	r0, [sp, #24]
   1a3e4:	mov	r0, #1
   1a3e8:	strh	r0, [sp]
   1a3ec:	mov	r0, r5
   1a3f0:	mov	r1, #14
   1a3f4:	mov	r2, r6
   1a3f8:	bl	11ffc <fcntl64@plt>
   1a3fc:	cmn	r0, #1
   1a400:	bne	1a41c <__gcov_flush@@Base+0x2f8>
   1a404:	bl	11f84 <__errno_location@plt>
   1a408:	ldr	r0, [r0]
   1a40c:	cmp	r0, #4
   1a410:	beq	1a3ec <__gcov_flush@@Base+0x2c8>
   1a414:	cmp	r0, #37	; 0x25
   1a418:	mvneq	r4, #0
   1a41c:	mov	r0, r4
   1a420:	sub	sp, fp, #16
   1a424:	pop	{r4, r5, r6, sl, fp, pc}
   1a428:	push	{r4, r5, r6, sl, fp, lr}
   1a42c:	add	fp, sp, #16
   1a430:	sub	sp, sp, #32
   1a434:	mov	r4, #0
   1a438:	str	r4, [sp, #8]
   1a43c:	strh	r4, [sp, #2]
   1a440:	mov	r5, r0
   1a444:	str	r4, [sp, #12]
   1a448:	str	r4, [sp, #16]
   1a44c:	str	r4, [sp, #20]
   1a450:	bl	11f48 <getpid@plt>
   1a454:	mov	r6, sp
   1a458:	str	r0, [sp, #24]
   1a45c:	mov	r0, #2
   1a460:	strh	r0, [sp]
   1a464:	mov	r0, r5
   1a468:	mov	r1, #14
   1a46c:	mov	r2, r6
   1a470:	bl	11ffc <fcntl64@plt>
   1a474:	cmn	r0, #1
   1a478:	bne	1a494 <__gcov_flush@@Base+0x370>
   1a47c:	bl	11f84 <__errno_location@plt>
   1a480:	ldr	r0, [r0]
   1a484:	cmp	r0, #4
   1a488:	beq	1a464 <__gcov_flush@@Base+0x340>
   1a48c:	cmp	r0, #37	; 0x25
   1a490:	mvneq	r4, #0
   1a494:	mov	r0, r4
   1a498:	sub	sp, fp, #16
   1a49c:	pop	{r4, r5, r6, sl, fp, pc}
   1a4a0:	push	{r4, r5, r6, sl, fp, lr}
   1a4a4:	add	fp, sp, #16
   1a4a8:	sub	sp, sp, #32
   1a4ac:	bl	11fcc <fileno@plt>
   1a4b0:	mov	r4, #0
   1a4b4:	str	r4, [sp, #8]
   1a4b8:	strh	r4, [sp, #2]
   1a4bc:	mov	r5, r0
   1a4c0:	str	r4, [sp, #12]
   1a4c4:	str	r4, [sp, #16]
   1a4c8:	str	r4, [sp, #20]
   1a4cc:	bl	11f48 <getpid@plt>
   1a4d0:	mov	r6, sp
   1a4d4:	str	r0, [sp, #24]
   1a4d8:	mov	r0, #1
   1a4dc:	strh	r0, [sp]
   1a4e0:	mov	r0, r5
   1a4e4:	mov	r1, #14
   1a4e8:	mov	r2, r6
   1a4ec:	bl	11ffc <fcntl64@plt>
   1a4f0:	cmn	r0, #1
   1a4f4:	bne	1a510 <__gcov_flush@@Base+0x3ec>
   1a4f8:	bl	11f84 <__errno_location@plt>
   1a4fc:	ldr	r0, [r0]
   1a500:	cmp	r0, #4
   1a504:	beq	1a4e0 <__gcov_flush@@Base+0x3bc>
   1a508:	cmp	r0, #37	; 0x25
   1a50c:	mvneq	r4, #0
   1a510:	mov	r0, r4
   1a514:	sub	sp, fp, #16
   1a518:	pop	{r4, r5, r6, sl, fp, pc}
   1a51c:	push	{r4, r5, r6, sl, fp, lr}
   1a520:	add	fp, sp, #16
   1a524:	sub	sp, sp, #32
   1a528:	bl	11fcc <fileno@plt>
   1a52c:	mov	r4, #0
   1a530:	str	r4, [sp, #8]
   1a534:	strh	r4, [sp, #2]
   1a538:	mov	r5, r0
   1a53c:	str	r4, [sp, #12]
   1a540:	str	r4, [sp, #16]
   1a544:	str	r4, [sp, #20]
   1a548:	bl	11f48 <getpid@plt>
   1a54c:	mov	r6, sp
   1a550:	str	r0, [sp, #24]
   1a554:	mov	r0, #2
   1a558:	strh	r0, [sp]
   1a55c:	mov	r0, r5
   1a560:	mov	r1, #14
   1a564:	mov	r2, r6
   1a568:	bl	11ffc <fcntl64@plt>
   1a56c:	cmn	r0, #1
   1a570:	bne	1a58c <__gcov_flush@@Base+0x468>
   1a574:	bl	11f84 <__errno_location@plt>
   1a578:	ldr	r0, [r0]
   1a57c:	cmp	r0, #4
   1a580:	beq	1a55c <__gcov_flush@@Base+0x438>
   1a584:	cmp	r0, #37	; 0x25
   1a588:	mvneq	r4, #0
   1a58c:	mov	r0, r4
   1a590:	sub	sp, fp, #16
   1a594:	pop	{r4, r5, r6, sl, fp, pc}
   1a598:	push	{r4, r5, fp, lr}
   1a59c:	add	fp, sp, #8
   1a5a0:	sub	sp, sp, #32
   1a5a4:	mov	r2, #182	; 0xb6
   1a5a8:	orr	r2, r2, #256	; 0x100
   1a5ac:	mov	r1, #66	; 0x42
   1a5b0:	bl	11ef4 <open64@plt>
   1a5b4:	cmp	r0, #0
   1a5b8:	bmi	1a634 <__gcov_flush@@Base+0x510>
   1a5bc:	mov	r4, r0
   1a5c0:	mov	r0, #0
   1a5c4:	str	r0, [sp, #8]
   1a5c8:	strh	r0, [sp, #2]
   1a5cc:	str	r0, [sp, #12]
   1a5d0:	str	r0, [sp, #16]
   1a5d4:	str	r0, [sp, #20]
   1a5d8:	bl	11f48 <getpid@plt>
   1a5dc:	mov	r5, sp
   1a5e0:	str	r0, [sp, #24]
   1a5e4:	mov	r0, #1
   1a5e8:	strh	r0, [sp]
   1a5ec:	mov	r0, r4
   1a5f0:	mov	r1, #14
   1a5f4:	mov	r2, r5
   1a5f8:	bl	11ffc <fcntl64@plt>
   1a5fc:	cmn	r0, #1
   1a600:	bne	1a61c <__gcov_flush@@Base+0x4f8>
   1a604:	bl	11f84 <__errno_location@plt>
   1a608:	ldr	r0, [r0]
   1a60c:	cmp	r0, #4
   1a610:	beq	1a5ec <__gcov_flush@@Base+0x4c8>
   1a614:	cmp	r0, #37	; 0x25
   1a618:	beq	1a640 <__gcov_flush@@Base+0x51c>
   1a61c:	ldr	r1, [pc, #76]	; 1a670 <__gcov_flush@@Base+0x54c>
   1a620:	mov	r0, r4
   1a624:	add	r1, pc, r1
   1a628:	bl	11e58 <fdopen@plt>
   1a62c:	sub	sp, fp, #8
   1a630:	pop	{r4, r5, fp, pc}
   1a634:	mov	r0, #0
   1a638:	sub	sp, fp, #8
   1a63c:	pop	{r4, r5, fp, pc}
   1a640:	ldr	r1, [pc, #28]	; 1a664 <__gcov_flush@@Base+0x540>
   1a644:	ldr	r2, [pc, #28]	; 1a668 <__gcov_flush@@Base+0x544>
   1a648:	ldr	r0, [pc, #28]	; 1a66c <__gcov_flush@@Base+0x548>
   1a64c:	add	r1, pc, r1
   1a650:	add	r2, pc, r2
   1a654:	ldr	r0, [pc, r0]
   1a658:	ldr	r0, [r0]
   1a65c:	bl	11f78 <fprintf@plt>
   1a660:	b	1a61c <__gcov_flush@@Base+0x4f8>
   1a664:	muleq	r0, r5, r0
   1a668:	ldrdeq	r1, [r0], -sl
   1a66c:	andeq	r2, r1, r8, ror #20
   1a670:	andeq	r0, r0, fp, lsl pc
   1a674:	push	{r4, r5, r6, sl, fp, lr}
   1a678:	add	fp, sp, #16
   1a67c:	mov	r6, r0
   1a680:	ldr	r0, [pc, #120]	; 1a700 <__gcov_flush@@Base+0x5dc>
   1a684:	mov	r4, r1
   1a688:	add	r0, pc, r0
   1a68c:	bl	11f00 <getenv@plt>
   1a690:	mov	r5, r0
   1a694:	ldr	r0, [pc, #104]	; 1a704 <__gcov_flush@@Base+0x5e0>
   1a698:	add	r0, pc, r0
   1a69c:	bl	11f00 <getenv@plt>
   1a6a0:	mov	r1, #0
   1a6a4:	str	r1, [r4]
   1a6a8:	str	r1, [r6]
   1a6ac:	cmp	r5, #0
   1a6b0:	ldrbne	r2, [r5]
   1a6b4:	cmpne	r2, #0
   1a6b8:	bne	1a6c4 <__gcov_flush@@Base+0x5a0>
   1a6bc:	mov	r0, r1
   1a6c0:	pop	{r4, r5, r6, sl, fp, pc}
   1a6c4:	cmp	r0, #0
   1a6c8:	beq	1a6e0 <__gcov_flush@@Base+0x5bc>
   1a6cc:	mov	r1, #0
   1a6d0:	mov	r2, #10
   1a6d4:	bl	11e70 <strtol@plt>
   1a6d8:	bic	r0, r0, r0, asr #31
   1a6dc:	b	1a6e4 <__gcov_flush@@Base+0x5c0>
   1a6e0:	mov	r0, #0
   1a6e4:	str	r0, [r6]
   1a6e8:	mov	r0, r5
   1a6ec:	bl	11f60 <strlen@plt>
   1a6f0:	mov	r1, r5
   1a6f4:	str	r0, [r4]
   1a6f8:	mov	r0, r1
   1a6fc:	pop	{r4, r5, r6, sl, fp, pc}
   1a700:	ldrdeq	r1, [r0], -r0
   1a704:	andeq	r1, r0, ip, asr #1
   1a708:	push	{r4, r5, r6, r7, fp, lr}
   1a70c:	add	fp, sp, #16
   1a710:	mov	r6, r0
   1a714:	ldr	r0, [fp, #8]
   1a718:	mov	r5, r3
   1a71c:	mov	r7, r2
   1a720:	mov	r4, r1
   1a724:	cmp	r0, #1
   1a728:	blt	1a760 <__gcov_flush@@Base+0x63c>
   1a72c:	add	r1, r4, #1
   1a730:	mov	r2, #0
   1a734:	b	1a74c <__gcov_flush@@Base+0x628>
   1a738:	add	r2, r2, #1
   1a73c:	mov	r4, r1
   1a740:	add	r1, r1, #1
   1a744:	cmp	r2, r0
   1a748:	bge	1a760 <__gcov_flush@@Base+0x63c>
   1a74c:	ldrb	r3, [r1]
   1a750:	cmp	r3, #47	; 0x2f
   1a754:	beq	1a738 <__gcov_flush@@Base+0x614>
   1a758:	cmp	r3, #0
   1a75c:	bne	1a740 <__gcov_flush@@Base+0x61c>
   1a760:	mov	r0, r6
   1a764:	mov	r1, r7
   1a768:	mov	r2, r5
   1a76c:	bl	11ea0 <memcpy@plt>
   1a770:	add	r0, r5, r7
   1a774:	ldrb	r0, [r0, #-1]
   1a778:	cmp	r0, #47	; 0x2f
   1a77c:	movne	r0, #47	; 0x2f
   1a780:	strbne	r0, [r6, r5]
   1a784:	mov	r0, r4
   1a788:	addne	r5, r5, #1
   1a78c:	add	r5, r6, r5
   1a790:	bl	11f60 <strlen@plt>
   1a794:	add	r2, r0, #1
   1a798:	mov	r0, r5
   1a79c:	mov	r1, r4
   1a7a0:	pop	{r4, r5, r6, r7, fp, lr}
   1a7a4:	b	11ea0 <memcpy@plt>
   1a7a8:	mov	r1, #47	; 0x2f
   1a7ac:	b	11f6c <strchr@plt>
   1a7b0:	mov	r1, #47	; 0x2f
   1a7b4:	b	12008 <strrchr@plt>
   1a7b8:	push	{fp, lr}
   1a7bc:	mov	fp, sp
   1a7c0:	sub	sp, sp, #8
   1a7c4:	mov	r0, #0
   1a7c8:	str	r0, [sp, #4]
   1a7cc:	add	r1, sp, #4
   1a7d0:	mov	r0, #2
   1a7d4:	bl	11fc0 <prctl@plt>
   1a7d8:	ldr	r1, [sp, #4]
   1a7dc:	cmp	r0, #0
   1a7e0:	cmpeq	r1, #9
   1a7e4:	bne	1a7f8 <__gcov_flush@@Base+0x6d4>
   1a7e8:	mov	r0, #1
   1a7ec:	mov	r1, #0
   1a7f0:	bl	11fc0 <prctl@plt>
   1a7f4:	ldr	r1, [sp, #4]
   1a7f8:	sub	r0, r1, #9
   1a7fc:	clz	r0, r0
   1a800:	lsr	r0, r0, #5
   1a804:	mov	sp, fp
   1a808:	pop	{fp, pc}
   1a80c:	mov	r0, #1
   1a810:	mov	r1, #9
   1a814:	b	11fc0 <prctl@plt>

0001a818 <__libc_csu_init@@Base>:
   1a818:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a81c:	mov	r7, r0
   1a820:	ldr	r6, [pc, #72]	; 1a870 <__libc_csu_init@@Base+0x58>
   1a824:	ldr	r5, [pc, #72]	; 1a874 <__libc_csu_init@@Base+0x5c>
   1a828:	add	r6, pc, r6
   1a82c:	add	r5, pc, r5
   1a830:	sub	r6, r6, r5
   1a834:	mov	r8, r1
   1a838:	mov	r9, r2
   1a83c:	bl	11e38 <fdopen@plt-0x20>
   1a840:	asrs	r6, r6, #2
   1a844:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a848:	mov	r4, #0
   1a84c:	add	r4, r4, #1
   1a850:	ldr	r3, [r5], #4
   1a854:	mov	r2, r9
   1a858:	mov	r1, r8
   1a85c:	mov	r0, r7
   1a860:	blx	r3
   1a864:	cmp	r6, r4
   1a868:	bne	1a84c <__libc_csu_init@@Base+0x34>
   1a86c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a870:	strdeq	r1, [r1], -ip
   1a874:	andeq	r1, r1, r4, ror #29

0001a878 <__libc_csu_fini@@Base>:
   1a878:	bx	lr
   1a87c:	ldr	r3, [pc, #12]	; 1a890 <__libc_csu_fini@@Base+0x18>
   1a880:	mov	r1, #0
   1a884:	add	r3, pc, r3
   1a888:	ldr	r2, [r3]
   1a88c:	b	11f90 <__cxa_atexit@plt>
   1a890:	andeq	r2, r1, r8, asr r8

Disassembly of section .fini:

0001a894 <.fini>:
   1a894:	push	{r3, lr}
   1a898:	pop	{r3, pc}
