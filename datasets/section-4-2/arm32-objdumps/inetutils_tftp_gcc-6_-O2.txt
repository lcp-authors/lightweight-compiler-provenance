
../repos/inetutils/src/tftp:     file format elf32-littlearm


Disassembly of section .init:

000111b8 <.init>:
   111b8:	push	{r3, lr}
   111bc:	bl	117f0 <__assert_fail@plt+0x288>
   111c0:	pop	{r3, pc}

Disassembly of section .plt:

000111c4 <fdopen@plt-0x14>:
   111c4:	push	{lr}		; (str lr, [sp, #-4]!)
   111c8:	ldr	lr, [pc, #4]	; 111d4 <fdopen@plt-0x4>
   111cc:	add	lr, pc, lr
   111d0:	ldr	pc, [lr, #8]!
   111d4:	andeq	sl, r1, ip, lsr #28

000111d8 <fdopen@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3628]!	; 0xe2c

000111e4 <calloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3620]!	; 0xe24

000111f0 <fputs_unlocked@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3612]!	; 0xe1c

000111fc <raise@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3604]!	; 0xe14

00011208 <strcmp@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3596]!	; 0xe0c

00011214 <strtol@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3588]!	; 0xe04

00011220 <printf@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3580]!	; 0xdfc

0001122c <read@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3572]!	; 0xdf4

00011238 <longjmp@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3564]!	; 0xdec

00011244 <_setjmp@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3556]!	; 0xde4

00011250 <memmove@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3548]!	; 0xddc

0001125c <strchrnul@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3540]!	; 0xdd4

00011268 <free@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3532]!	; 0xdcc

00011274 <gai_strerror@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011280 <fgets@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3516]!	; 0xdbc

0001128c <strndup@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3508]!	; 0xdb4

00011298 <memcpy@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3500]!	; 0xdac

000112a4 <signal@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3492]!	; 0xda4

000112b0 <fwrite_unlocked@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112bc <sleep@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3476]!	; 0xd94

000112c8 <recvfrom@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112d4 <alarm@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3460]!	; 0xd84

000112e0 <realloc@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3452]!	; 0xd7c

000112ec <strcasecmp@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3444]!	; 0xd74

000112f8 <funlockfile@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3436]!	; 0xd6c

00011304 <perror@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3428]!	; 0xd64

00011310 <fwrite@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3420]!	; 0xd5c

0001131c <ioctl@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3412]!	; 0xd54

00011328 <strcpy@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3404]!	; 0xd4c

00011334 <gettimeofday@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3396]!	; 0xd44

00011340 <creat64@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3388]!	; 0xd3c

0001134c <error@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3380]!	; 0xd34

00011358 <open64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3372]!	; 0xd2c

00011364 <getenv@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3364]!	; 0xd24

00011370 <puts@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3356]!	; 0xd1c

0001137c <malloc@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3348]!	; 0xd14

00011388 <__libc_start_main@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3340]!	; 0xd0c

00011394 <strerror@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3332]!	; 0xd04

000113a0 <__ctype_tolower_loc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113ac <__gmon_start__@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113b8 <mempcpy@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3308]!	; 0xcec

000113c4 <__ctype_b_loc@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3300]!	; 0xce4

000113d0 <exit@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113dc <feof@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3284]!	; 0xcd4

000113e8 <strlen@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3276]!	; 0xccc

000113f4 <strchr@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3268]!	; 0xcc4

00011400 <fprintf@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3260]!	; 0xcbc

0001140c <__errno_location@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3252]!	; 0xcb4

00011418 <getservbyname@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3244]!	; 0xcac

00011424 <strerror_r@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3236]!	; 0xca4

00011430 <bind@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3228]!	; 0xc9c

0001143c <memset@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3220]!	; 0xc94

00011448 <strncpy@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3212]!	; 0xc8c

00011454 <write@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3204]!	; 0xc84

00011460 <fileno@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3196]!	; 0xc7c

0001146c <memchr@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3188]!	; 0xc74

00011478 <fclose@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3180]!	; 0xc6c

00011484 <fseeko64@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3172]!	; 0xc64

00011490 <sendto@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3164]!	; 0xc5c

0001149c <__overflow@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3156]!	; 0xc54

000114a8 <setlocale@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114b4 <strrchr@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3140]!	; 0xc44

000114c0 <vfprintf@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114cc <fputc@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3124]!	; 0xc34

000114d8 <putc@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3116]!	; 0xc2c

000114e4 <flockfile@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3108]!	; 0xc24

000114f0 <vsnprintf@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3100]!	; 0xc1c

000114fc <qsort@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #3092]!	; 0xc14

00011508 <freeaddrinfo@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #3084]!	; 0xc0c

00011514 <getaddrinfo@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #3076]!	; 0xc04

00011520 <socket@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #3068]!	; 0xbfc

0001152c <isatty@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #3060]!	; 0xbf4

00011538 <strncmp@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #3052]!	; 0xbec

00011544 <abort@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011550 <getc@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #3036]!	; 0xbdc

0001155c <close@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #3028]!	; 0xbd4

00011568 <__assert_fail@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #3020]!	; 0xbcc

Disassembly of section .text:

00011578 <argp_failure@@Base-0x41fc>:
   11578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1157c:	mov	r6, r0
   11580:	sub	sp, sp, #12
   11584:	ldr	r0, [r1]
   11588:	mov	r5, r1
   1158c:	bl	18240 <argp_parse@@Base+0xfd0>
   11590:	ldr	r1, [pc, #456]	; 11760 <__assert_fail@plt+0x1f8>
   11594:	mov	r0, #6
   11598:	bl	114a8 <setlocale@plt>
   1159c:	ldr	r4, [pc, #448]	; 11764 <__assert_fail@plt+0x1fc>
   115a0:	ldr	r3, [pc, #448]	; 11768 <__assert_fail@plt+0x200>
   115a4:	ldr	r2, [pc, #448]	; 1176c <__assert_fail@plt+0x204>
   115a8:	mov	r0, r4
   115ac:	ldr	r1, [pc, #444]	; 11770 <__assert_fail@plt+0x208>
   115b0:	str	r2, [r3]
   115b4:	bl	18034 <argp_parse@@Base+0xdc4>
   115b8:	mov	r3, #0
   115bc:	mov	r2, r5
   115c0:	mov	r1, r6
   115c4:	str	r3, [sp, #4]
   115c8:	str	r3, [sp]
   115cc:	ldr	r0, [pc, #416]	; 11774 <__assert_fail@plt+0x20c>
   115d0:	bl	17270 <argp_parse@@Base>
   115d4:	mov	r0, r4
   115d8:	ldr	r1, [pc, #408]	; 11778 <__assert_fail@plt+0x210>
   115dc:	bl	11418 <getservbyname@plt>
   115e0:	cmp	r0, #0
   115e4:	beq	11738 <__assert_fail@plt+0x1d0>
   115e8:	ldr	r3, [r0, #8]
   115ec:	ldr	r2, [pc, #392]	; 1177c <__assert_fail@plt+0x214>
   115f0:	rev16	r3, r3
   115f4:	uxth	r3, r3
   115f8:	str	r3, [r2, #144]	; 0x90
   115fc:	mov	r0, #0
   11600:	bl	1152c <isatty@plt>
   11604:	ldr	r1, [pc, #368]	; 1177c <__assert_fail@plt+0x214>
   11608:	ldr	r3, [pc, #368]	; 11780 <__assert_fail@plt+0x218>
   1160c:	ldr	r2, [pc, #368]	; 11784 <__assert_fail@plt+0x21c>
   11610:	str	r0, [r1, #148]	; 0x94
   11614:	ldm	r3!, {r0, r1}
   11618:	ldrb	r3, [r3]
   1161c:	str	r0, [r2]
   11620:	str	r1, [r2, #4]
   11624:	strb	r3, [r2, #8]
   11628:	mov	r0, #2
   1162c:	ldr	r1, [pc, #340]	; 11788 <__assert_fail@plt+0x220>
   11630:	bl	112a4 <signal@plt>
   11634:	ldr	r3, [pc, #336]	; 1178c <__assert_fail@plt+0x224>
   11638:	ldr	r3, [r3, #84]	; 0x54
   1163c:	cmp	r3, #1
   11640:	ble	1166c <__assert_fail@plt+0x104>
   11644:	ldr	r0, [pc, #324]	; 11790 <__assert_fail@plt+0x228>
   11648:	bl	11244 <_setjmp@plt>
   1164c:	cmp	r0, #0
   11650:	beq	1165c <__assert_fail@plt+0xf4>
   11654:	mov	r0, #0
   11658:	bl	113d0 <exit@plt>
   1165c:	ldr	r3, [pc, #296]	; 1178c <__assert_fail@plt+0x224>
   11660:	add	r1, r3, #88	; 0x58
   11664:	ldr	r0, [r3, #84]	; 0x54
   11668:	bl	11f5c <__assert_fail@plt+0x9f4>
   1166c:	ldr	r0, [pc, #284]	; 11790 <__assert_fail@plt+0x228>
   11670:	bl	11244 <_setjmp@plt>
   11674:	cmp	r0, #0
   11678:	beq	1168c <__assert_fail@plt+0x124>
   1167c:	ldr	r3, [pc, #272]	; 11794 <__assert_fail@plt+0x22c>
   11680:	mov	r0, #10
   11684:	ldr	r1, [r3]
   11688:	bl	114d8 <putc@plt>
   1168c:	ldr	r6, [pc, #232]	; 1177c <__assert_fail@plt+0x214>
   11690:	ldr	r8, [pc, #244]	; 1178c <__assert_fail@plt+0x224>
   11694:	ldr	r7, [pc, #252]	; 11798 <__assert_fail@plt+0x230>
   11698:	ldr	r5, [pc, #252]	; 1179c <__assert_fail@plt+0x234>
   1169c:	ldr	r4, [pc, #252]	; 117a0 <__assert_fail@plt+0x238>
   116a0:	ldr	r9, [pc, #252]	; 117a4 <__assert_fail@plt+0x23c>
   116a4:	ldr	r3, [r6, #148]	; 0x94
   116a8:	cmp	r3, #0
   116ac:	bne	11714 <__assert_fail@plt+0x1ac>
   116b0:	ldr	r2, [r5]
   116b4:	mov	r1, #200	; 0xc8
   116b8:	mov	r0, r4
   116bc:	bl	11280 <fgets@plt>
   116c0:	cmp	r0, #0
   116c4:	beq	11724 <__assert_fail@plt+0x1bc>
   116c8:	ldrb	r3, [r4]
   116cc:	cmp	r3, #0
   116d0:	beq	116a4 <__assert_fail@plt+0x13c>
   116d4:	bl	11b00 <__assert_fail@plt+0x598>
   116d8:	ldr	sl, [r9]
   116dc:	cmp	sl, #0
   116e0:	beq	116a4 <__assert_fail@plt+0x13c>
   116e4:	ldr	fp, [pc, #188]	; 117a8 <__assert_fail@plt+0x240>
   116e8:	ldr	r0, [fp]
   116ec:	bl	12618 <__assert_fail@plt+0x10b0>
   116f0:	cmn	r0, #1
   116f4:	beq	11754 <__assert_fail@plt+0x1ec>
   116f8:	cmp	r0, #0
   116fc:	beq	11748 <__assert_fail@plt+0x1e0>
   11700:	ldr	r3, [r0, #8]
   11704:	mov	r1, fp
   11708:	mov	r0, sl
   1170c:	blx	r3
   11710:	b	116a4 <__assert_fail@plt+0x13c>
   11714:	ldr	r1, [r8, #344]	; 0x158
   11718:	mov	r0, r7
   1171c:	bl	11220 <printf@plt>
   11720:	b	116b0 <__assert_fail@plt+0x148>
   11724:	ldr	r0, [r5]
   11728:	bl	113dc <feof@plt>
   1172c:	cmp	r0, #0
   11730:	bne	11654 <__assert_fail@plt+0xec>
   11734:	b	116a4 <__assert_fail@plt+0x13c>
   11738:	ldr	r3, [pc, #60]	; 1177c <__assert_fail@plt+0x214>
   1173c:	mov	r2, #69	; 0x45
   11740:	str	r2, [r3, #144]	; 0x90
   11744:	b	115fc <__assert_fail@plt+0x94>
   11748:	ldr	r0, [pc, #92]	; 117ac <__assert_fail@plt+0x244>
   1174c:	bl	11370 <puts@plt>
   11750:	b	116a4 <__assert_fail@plt+0x13c>
   11754:	ldr	r0, [pc, #84]	; 117b0 <__assert_fail@plt+0x248>
   11758:	bl	11370 <puts@plt>
   1175c:	b	116a4 <__assert_fail@plt+0x13c>
   11760:	andeq	fp, r1, r8, ror #14
   11764:	andeq	sl, r1, r0, lsr r7
   11768:			; <UNDEFINED> instruction: 0x0002cfbc
   1176c:	andeq	sl, r1, r0, lsl #18
   11770:	andeq	ip, r2, r0, lsl #8
   11774:	andeq	ip, r2, r8, lsl #5
   11778:	andeq	sl, r1, r4, ror #15
   1177c:	andeq	ip, r2, r4, ror #8
   11780:	andeq	sl, r1, r0, lsr #17
   11784:	andeq	ip, r2, r4, asr #21
   11788:	andeq	r2, r1, r0, lsl #3
   1178c:	andeq	ip, r2, ip, asr #2
   11790:	andeq	ip, r2, r0, lsr #18
   11794:	andeq	ip, r2, ip, asr r4
   11798:	andeq	sl, r1, r8, lsl r9
   1179c:	andeq	ip, r2, r8, asr r4
   117a0:	andeq	ip, r2, r4, ror #21
   117a4:			; <UNDEFINED> instruction: 0x0002cabc
   117a8:	ldrdeq	ip, [r2], -r0
   117ac:	andeq	sl, r1, r4, lsr r9
   117b0:	andeq	sl, r1, r0, lsr #18
   117b4:	mov	fp, #0
   117b8:	mov	lr, #0
   117bc:	pop	{r1}		; (ldr r1, [sp], #4)
   117c0:	mov	r2, sp
   117c4:	push	{r2}		; (str r2, [sp, #-4]!)
   117c8:	push	{r0}		; (str r0, [sp, #-4]!)
   117cc:	ldr	ip, [pc, #16]	; 117e4 <__assert_fail@plt+0x27c>
   117d0:	push	{ip}		; (str ip, [sp, #-4]!)
   117d4:	ldr	r0, [pc, #12]	; 117e8 <__assert_fail@plt+0x280>
   117d8:	ldr	r3, [pc, #12]	; 117ec <__assert_fail@plt+0x284>
   117dc:	bl	11388 <__libc_start_main@plt>
   117e0:	bl	11544 <abort@plt>
   117e4:	strdeq	sl, [r1], -r0
   117e8:	andeq	r1, r1, r8, ror r5
   117ec:	muleq	r1, r0, r5
   117f0:	ldr	r3, [pc, #20]	; 1180c <__assert_fail@plt+0x2a4>
   117f4:	ldr	r2, [pc, #20]	; 11810 <__assert_fail@plt+0x2a8>
   117f8:	add	r3, pc, r3
   117fc:	ldr	r2, [r3, r2]
   11800:	cmp	r2, #0
   11804:	bxeq	lr
   11808:	b	113ac <__gmon_start__@plt>
   1180c:	andeq	sl, r1, r0, lsl #16
   11810:	andeq	r0, r0, r0, asr #2
   11814:	ldr	r3, [pc, #28]	; 11838 <__assert_fail@plt+0x2d0>
   11818:	ldr	r0, [pc, #28]	; 1183c <__assert_fail@plt+0x2d4>
   1181c:	sub	r3, r3, r0
   11820:	cmp	r3, #6
   11824:	bxls	lr
   11828:	ldr	r3, [pc, #16]	; 11840 <__assert_fail@plt+0x2d8>
   1182c:	cmp	r3, #0
   11830:	bxeq	lr
   11834:	bx	r3
   11838:	andeq	ip, r2, fp, asr #8
   1183c:	andeq	ip, r2, r8, asr #8
   11840:	andeq	r0, r0, r0
   11844:	ldr	r1, [pc, #36]	; 11870 <__assert_fail@plt+0x308>
   11848:	ldr	r0, [pc, #36]	; 11874 <__assert_fail@plt+0x30c>
   1184c:	sub	r1, r1, r0
   11850:	asr	r1, r1, #2
   11854:	add	r1, r1, r1, lsr #31
   11858:	asrs	r1, r1, #1
   1185c:	bxeq	lr
   11860:	ldr	r3, [pc, #16]	; 11878 <__assert_fail@plt+0x310>
   11864:	cmp	r3, #0
   11868:	bxeq	lr
   1186c:	bx	r3
   11870:	andeq	ip, r2, r8, asr #8
   11874:	andeq	ip, r2, r8, asr #8
   11878:	andeq	r0, r0, r0
   1187c:	push	{r4, lr}
   11880:	ldr	r4, [pc, #24]	; 118a0 <__assert_fail@plt+0x338>
   11884:	ldrb	r3, [r4]
   11888:	cmp	r3, #0
   1188c:	popne	{r4, pc}
   11890:	bl	11814 <__assert_fail@plt+0x2ac>
   11894:	mov	r3, #1
   11898:	strb	r3, [r4]
   1189c:	pop	{r4, pc}
   118a0:	andeq	ip, r2, r0, ror #8
   118a4:	ldr	r0, [pc, #40]	; 118d4 <__assert_fail@plt+0x36c>
   118a8:	ldr	r3, [r0]
   118ac:	cmp	r3, #0
   118b0:	bne	118b8 <__assert_fail@plt+0x350>
   118b4:	b	11844 <__assert_fail@plt+0x2dc>
   118b8:	ldr	r3, [pc, #24]	; 118d8 <__assert_fail@plt+0x370>
   118bc:	cmp	r3, #0
   118c0:	beq	118b4 <__assert_fail@plt+0x34c>
   118c4:	push	{r4, lr}
   118c8:	blx	r3
   118cc:	pop	{r4, lr}
   118d0:	b	11844 <__assert_fail@plt+0x2dc>
   118d4:	andeq	fp, r2, ip, lsl #30
	...
   118e0:	push	{r4, lr}
   118e4:	mov	r0, #0
   118e8:	bl	113d0 <exit@plt>
   118ec:	ldr	r3, [pc, #36]	; 11918 <__assert_fail@plt+0x3b0>
   118f0:	ldr	ip, [pc, #36]	; 1191c <__assert_fail@plt+0x3b4>
   118f4:	ldr	r1, [pc, #36]	; 11920 <__assert_fail@plt+0x3b8>
   118f8:	ldr	r2, [r3]
   118fc:	ldr	r0, [pc, #32]	; 11924 <__assert_fail@plt+0x3bc>
   11900:	cmp	r2, #0
   11904:	moveq	r2, #1
   11908:	movne	r2, #0
   1190c:	moveq	r1, ip
   11910:	str	r2, [r3]
   11914:	b	11220 <printf@plt>
   11918:	andeq	ip, r2, r4, ror #8
   1191c:	andeq	sl, r1, r4, ror #23
   11920:	andeq	sl, r1, r0, asr r6
   11924:	andeq	sl, r1, r4, asr r6
   11928:	ldr	r3, [pc, #36]	; 11954 <__assert_fail@plt+0x3ec>
   1192c:	ldr	ip, [pc, #36]	; 11958 <__assert_fail@plt+0x3f0>
   11930:	ldr	r1, [pc, #36]	; 1195c <__assert_fail@plt+0x3f4>
   11934:	ldr	r2, [r3, #4]
   11938:	ldr	r0, [pc, #32]	; 11960 <__assert_fail@plt+0x3f8>
   1193c:	cmp	r2, #0
   11940:	moveq	r2, #1
   11944:	movne	r2, #0
   11948:	moveq	r1, ip
   1194c:	str	r2, [r3, #4]
   11950:	b	11220 <printf@plt>
   11954:	andeq	ip, r2, r4, ror #8
   11958:	andeq	sl, r1, r4, ror #23
   1195c:	andeq	sl, r1, r0, asr r6
   11960:	andeq	sl, r1, r8, ror #12
   11964:	push	{r4, r5, lr}
   11968:	vldr	d5, [pc, #200]	; 11a38 <__assert_fail@plt+0x4d0>
   1196c:	ldr	r4, [pc, #212]	; 11a48 <__assert_fail@plt+0x4e0>
   11970:	ldr	lr, [pc, #212]	; 11a4c <__assert_fail@plt+0x4e4>
   11974:	ldr	ip, [pc, #212]	; 11a50 <__assert_fail@plt+0x4e8>
   11978:	ldr	r3, [r4, #4]
   1197c:	ldr	r2, [lr, #4]
   11980:	vldr	s6, [r4]
   11984:	smull	r5, r4, ip, r3
   11988:	vldr	s8, [lr]
   1198c:	vpush	{d8}
   11990:	smull	r5, ip, ip, r2
   11994:	vcvt.f64.s32	d3, s6
   11998:	vcvt.f64.s32	d4, s8
   1199c:	asr	r3, r3, #31
   119a0:	asr	r2, r2, #31
   119a4:	rsb	r3, r3, r4, asr #13
   119a8:	rsb	r2, r2, ip, asr #13
   119ac:	vmov	s15, r3
   119b0:	vmov	s14, r2
   119b4:	sub	sp, sp, #12
   119b8:	mov	r2, r1
   119bc:	vcvt.f64.s32	d6, s15
   119c0:	vcvt.f64.s32	d7, s14
   119c4:	mov	r4, r1
   119c8:	mov	r1, r0
   119cc:	ldr	r0, [pc, #128]	; 11a54 <__assert_fail@plt+0x4ec>
   119d0:	vmla.f64	d6, d3, d5
   119d4:	vmla.f64	d7, d4, d5
   119d8:	vsub.f64	d7, d6, d7
   119dc:	vdiv.f64	d8, d7, d5
   119e0:	vstr	d8, [sp]
   119e4:	bl	11220 <printf@plt>
   119e8:	ldr	r3, [pc, #104]	; 11a58 <__assert_fail@plt+0x4f0>
   119ec:	ldr	r3, [r3, #4]
   119f0:	cmp	r3, #0
   119f4:	beq	11a18 <__assert_fail@plt+0x4b0>
   119f8:	vmov	s15, r4
   119fc:	vldr	d6, [pc, #60]	; 11a40 <__assert_fail@plt+0x4d8>
   11a00:	ldr	r0, [pc, #84]	; 11a5c <__assert_fail@plt+0x4f4>
   11a04:	vcvt.f64.u32	d7, s15
   11a08:	vmul.f64	d7, d7, d6
   11a0c:	vdiv.f64	d6, d7, d8
   11a10:	vmov	r2, r3, d6
   11a14:	bl	11220 <printf@plt>
   11a18:	ldr	r3, [pc, #64]	; 11a60 <__assert_fail@plt+0x4f8>
   11a1c:	mov	r0, #10
   11a20:	ldr	r1, [r3]
   11a24:	add	sp, sp, #12
   11a28:	vpop	{d8}
   11a2c:	pop	{r4, r5, lr}
   11a30:	b	114d8 <putc@plt>
   11a34:	nop			; (mov r0, r0)
   11a38:	andeq	r0, r0, r0
   11a3c:	eormi	r0, r4, r0
   11a40:	andeq	r0, r0, r0
   11a44:	eormi	r0, r0, r0
   11a48:			; <UNDEFINED> instruction: 0x0002cab4
   11a4c:	andeq	ip, r2, ip, lsr #21
   11a50:	ldrbtne	fp, [r8], #1417	; 0x589
   11a54:	andeq	sl, r1, ip, ror r6
   11a58:	andeq	ip, r2, r4, ror #8
   11a5c:	muleq	r1, r8, r6
   11a60:	andeq	ip, r2, ip, asr r4
   11a64:	push	{r4, lr}
   11a68:	ldr	r4, [pc, #104]	; 11ad8 <__assert_fail@plt+0x570>
   11a6c:	ldr	r3, [r4, #8]
   11a70:	cmp	r3, #0
   11a74:	beq	11acc <__assert_fail@plt+0x564>
   11a78:	ldr	r3, [pc, #92]	; 11adc <__assert_fail@plt+0x574>
   11a7c:	ldr	r0, [pc, #92]	; 11ae0 <__assert_fail@plt+0x578>
   11a80:	ldr	r1, [r3]
   11a84:	bl	11220 <printf@plt>
   11a88:	ldm	r4, {r3, ip}
   11a8c:	ldr	r2, [pc, #80]	; 11ae4 <__assert_fail@plt+0x57c>
   11a90:	ldr	r0, [pc, #80]	; 11ae8 <__assert_fail@plt+0x580>
   11a94:	cmp	r3, #0
   11a98:	movne	r3, r2
   11a9c:	moveq	r3, r0
   11aa0:	cmp	ip, #0
   11aa4:	moveq	r2, r0
   11aa8:	ldr	r1, [pc, #60]	; 11aec <__assert_fail@plt+0x584>
   11aac:	ldr	r0, [pc, #60]	; 11af0 <__assert_fail@plt+0x588>
   11ab0:	bl	11220 <printf@plt>
   11ab4:	ldr	r3, [pc, #56]	; 11af4 <__assert_fail@plt+0x58c>
   11ab8:	ldr	r0, [pc, #56]	; 11af8 <__assert_fail@plt+0x590>
   11abc:	pop	{r4, lr}
   11ac0:	ldr	r2, [r3]
   11ac4:	ldr	r1, [r3, #4]
   11ac8:	b	11220 <printf@plt>
   11acc:	ldr	r0, [pc, #40]	; 11afc <__assert_fail@plt+0x594>
   11ad0:	bl	11370 <puts@plt>
   11ad4:	b	11a88 <__assert_fail@plt+0x520>
   11ad8:	andeq	ip, r2, r4, ror #8
   11adc:	andeq	ip, r2, r0, asr #21
   11ae0:	andeq	sl, r1, ip, lsr #13
   11ae4:	andeq	sl, r1, r4, ror #23
   11ae8:	andeq	sl, r1, r0, asr r6
   11aec:	andeq	ip, r2, r4, asr #21
   11af0:	ldrdeq	sl, [r1], -r0
   11af4:	andeq	ip, r2, ip, asr #2
   11af8:	strdeq	sl, [r1], -r4
   11afc:	andeq	sl, r1, r0, asr #13
   11b00:	push	{r4, r5, r6, r7, r8, lr}
   11b04:	mov	r5, #0
   11b08:	ldr	r7, [pc, #188]	; 11bcc <__assert_fail@plt+0x664>
   11b0c:	ldr	r6, [pc, #188]	; 11bd0 <__assert_fail@plt+0x668>
   11b10:	ldrb	r4, [r7]
   11b14:	str	r5, [r6]
   11b18:	cmp	r4, r5
   11b1c:	ldreq	r5, [pc, #176]	; 11bd4 <__assert_fail@plt+0x66c>
   11b20:	beq	11b98 <__assert_fail@plt+0x630>
   11b24:	bl	113c4 <__ctype_b_loc@plt>
   11b28:	mov	ip, r5
   11b2c:	ldr	r5, [pc, #160]	; 11bd4 <__assert_fail@plt+0x66c>
   11b30:	mov	r3, r7
   11b34:	mov	lr, ip
   11b38:	mov	r8, ip
   11b3c:	mov	r7, #1
   11b40:	ldr	r1, [r0]
   11b44:	b	11b4c <__assert_fail@plt+0x5e4>
   11b48:	ldrb	r4, [r3, #1]!
   11b4c:	lsl	r2, r4, #1
   11b50:	ldrh	r2, [r1, r2]
   11b54:	tst	r2, #8192	; 0x2000
   11b58:	bne	11b48 <__assert_fail@plt+0x5e0>
   11b5c:	cmp	r4, #0
   11b60:	beq	11bc0 <__assert_fail@plt+0x658>
   11b64:	str	r3, [r5], #4
   11b68:	add	lr, lr, #1
   11b6c:	b	11b80 <__assert_fail@plt+0x618>
   11b70:	ldrh	r2, [r1, r2]
   11b74:	tst	r2, #8192	; 0x2000
   11b78:	bne	11ba4 <__assert_fail@plt+0x63c>
   11b7c:	mov	r3, ip
   11b80:	ldrb	r2, [r3, #1]
   11b84:	add	ip, r3, #1
   11b88:	cmp	r2, #0
   11b8c:	lsl	r2, r2, #1
   11b90:	bne	11b70 <__assert_fail@plt+0x608>
   11b94:	str	lr, [r6]
   11b98:	mov	r3, #0
   11b9c:	str	r3, [r5]
   11ba0:	pop	{r4, r5, r6, r7, r8, pc}
   11ba4:	ldrb	r4, [ip, #1]
   11ba8:	strb	r8, [ip]
   11bac:	add	r3, r3, #2
   11bb0:	cmp	r4, #0
   11bb4:	mov	ip, r7
   11bb8:	bne	11b40 <__assert_fail@plt+0x5d8>
   11bbc:	b	11b94 <__assert_fail@plt+0x62c>
   11bc0:	cmp	ip, #0
   11bc4:	beq	11b98 <__assert_fail@plt+0x630>
   11bc8:	b	11b94 <__assert_fail@plt+0x62c>
   11bcc:	andeq	ip, r2, r4, ror #21
   11bd0:			; <UNDEFINED> instruction: 0x0002cabc
   11bd4:	ldrdeq	ip, [r2], -r0
   11bd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bdc:	mov	r9, r1
   11be0:	mov	r8, r3
   11be4:	mov	r7, r2
   11be8:	mov	r6, r0
   11bec:	bl	113e8 <strlen@plt>
   11bf0:	ldr	r5, [pc, #120]	; 11c70 <__assert_fail@plt+0x708>
   11bf4:	mov	r1, r6
   11bf8:	mov	r4, r0
   11bfc:	mov	r2, r0
   11c00:	mov	r0, r5
   11c04:	bl	11298 <memcpy@plt>
   11c08:	ldr	r3, [pc, #100]	; 11c74 <__assert_fail@plt+0x70c>
   11c0c:	mov	r1, r9
   11c10:	ldr	r0, [pc, #96]	; 11c78 <__assert_fail@plt+0x710>
   11c14:	ldrh	r3, [r3]
   11c18:	strh	r3, [r4, r5]
   11c1c:	bl	11220 <printf@plt>
   11c20:	ldr	r3, [pc, #84]	; 11c7c <__assert_fail@plt+0x714>
   11c24:	add	r0, r4, #1
   11c28:	add	r0, r5, r0
   11c2c:	rsb	r1, r4, #199	; 0xc7
   11c30:	ldr	r2, [r3]
   11c34:	bl	11280 <fgets@plt>
   11c38:	cmp	r0, #0
   11c3c:	beq	11c5c <__assert_fail@plt+0x6f4>
   11c40:	bl	11b00 <__assert_fail@plt+0x598>
   11c44:	ldr	r2, [pc, #52]	; 11c80 <__assert_fail@plt+0x718>
   11c48:	ldr	r3, [pc, #52]	; 11c84 <__assert_fail@plt+0x71c>
   11c4c:	ldr	r2, [r2]
   11c50:	str	r2, [r7]
   11c54:	str	r3, [r8]
   11c58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c5c:	ldr	r2, [r8]
   11c60:	mov	r3, #1
   11c64:	str	r6, [r2]
   11c68:	str	r3, [r7]
   11c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c70:	andeq	ip, r2, r4, ror #21
   11c74:	andeq	sl, r1, r4, lsr #15
   11c78:	andeq	sl, r1, ip, lsr #14
   11c7c:	andeq	ip, r2, r8, asr r4
   11c80:			; <UNDEFINED> instruction: 0x0002cabc
   11c84:	ldrdeq	ip, [r2], -r0
   11c88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c8c:	sub	sp, sp, #168	; 0xa8
   11c90:	mov	r4, r0
   11c94:	mov	r2, #32
   11c98:	mov	r1, #0
   11c9c:	add	r0, sp, #8
   11ca0:	bl	1143c <memset@plt>
   11ca4:	mov	lr, #2
   11ca8:	mov	ip, #194	; 0xc2
   11cac:	add	r2, sp, #8
   11cb0:	mov	r0, r4
   11cb4:	add	r3, sp, #4
   11cb8:	ldr	r1, [pc, #320]	; 11e00 <__assert_fail@plt+0x898>
   11cbc:	str	lr, [sp, #16]
   11cc0:	str	ip, [sp, #8]
   11cc4:	bl	11514 <getaddrinfo@plt>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11dd8 <__assert_fail@plt+0x870>
   11cd0:	ldr	r6, [pc, #300]	; 11e04 <__assert_fail@plt+0x89c>
   11cd4:	ldr	r0, [r6, #8]
   11cd8:	cmp	r0, #0
   11cdc:	blt	11cec <__assert_fail@plt+0x784>
   11ce0:	bl	1155c <close@plt>
   11ce4:	mvn	r3, #0
   11ce8:	str	r3, [r6, #8]
   11cec:	ldr	r4, [sp, #4]
   11cf0:	cmp	r4, #0
   11cf4:	beq	11d68 <__assert_fail@plt+0x800>
   11cf8:	mov	r8, #128	; 0x80
   11cfc:	mov	r7, #0
   11d00:	mvn	sl, #0
   11d04:	ldmib	r4, {r0, r1, r2}
   11d08:	bl	11520 <socket@plt>
   11d0c:	mov	r2, r8
   11d10:	mov	r1, r7
   11d14:	mov	r5, r0
   11d18:	cmp	r5, #0
   11d1c:	add	r0, sp, #40	; 0x28
   11d20:	str	r5, [r6, #8]
   11d24:	blt	11d58 <__assert_fail@plt+0x7f0>
   11d28:	bl	1143c <memset@plt>
   11d2c:	ldr	r3, [r4, #4]
   11d30:	ldr	r2, [r4, #16]
   11d34:	add	r1, sp, #40	; 0x28
   11d38:	mov	r0, r5
   11d3c:	strh	r3, [sp, #40]	; 0x28
   11d40:	bl	11430 <bind@plt>
   11d44:	subs	r9, r0, #0
   11d48:	mov	r0, r5
   11d4c:	beq	11d80 <__assert_fail@plt+0x818>
   11d50:	bl	1155c <close@plt>
   11d54:	str	sl, [r6, #8]
   11d58:	ldr	r4, [r4, #28]
   11d5c:	cmp	r4, #0
   11d60:	bne	11d04 <__assert_fail@plt+0x79c>
   11d64:	ldr	r4, [sp, #4]
   11d68:	mov	r0, r4
   11d6c:	bl	11508 <freeaddrinfo@plt>
   11d70:	mvn	r9, #0
   11d74:	mov	r0, r9
   11d78:	add	sp, sp, #168	; 0xa8
   11d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d80:	ldr	r3, [r4, #16]
   11d84:	ldr	r5, [pc, #124]	; 11e08 <__assert_fail@plt+0x8a0>
   11d88:	ldr	r6, [pc, #124]	; 11e0c <__assert_fail@plt+0x8a4>
   11d8c:	mov	r2, r3
   11d90:	ldr	r1, [r4, #20]
   11d94:	add	r0, r5, #16
   11d98:	str	r3, [r5, #12]
   11d9c:	bl	11298 <memcpy@plt>
   11da0:	mov	r3, #1
   11da4:	ldr	r0, [r6]
   11da8:	str	r3, [r5, #8]
   11dac:	bl	18108 <argp_parse@@Base+0xe98>
   11db0:	ldr	r0, [r4, #24]
   11db4:	cmp	r0, #0
   11db8:	ldreq	r0, [pc, #80]	; 11e10 <__assert_fail@plt+0x8a8>
   11dbc:	bl	18c14 <argp_parse@@Base+0x19a4>
   11dc0:	str	r0, [r6]
   11dc4:	ldr	r0, [sp, #4]
   11dc8:	bl	11508 <freeaddrinfo@plt>
   11dcc:	mov	r0, r9
   11dd0:	add	sp, sp, #168	; 0xa8
   11dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11dd8:	ldr	r3, [pc, #52]	; 11e14 <__assert_fail@plt+0x8ac>
   11ddc:	mvn	r9, #0
   11de0:	ldr	r5, [r3]
   11de4:	bl	11274 <gai_strerror@plt>
   11de8:	mov	r2, r4
   11dec:	ldr	r1, [pc, #36]	; 11e18 <__assert_fail@plt+0x8b0>
   11df0:	mov	r3, r0
   11df4:	mov	r0, r5
   11df8:	bl	11400 <fprintf@plt>
   11dfc:	b	11dcc <__assert_fail@plt+0x864>
   11e00:	andeq	sl, r1, r0, lsr r7
   11e04:	andeq	ip, r2, ip, asr #2
   11e08:	andeq	ip, r2, r4, ror #8
   11e0c:	andeq	ip, r2, r0, asr #21
   11e10:	andeq	sl, r1, r8, asr #14
   11e14:	andeq	ip, r2, r0, asr r4
   11e18:	andeq	sl, r1, r8, lsr r7
   11e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   11e20:	sub	sp, sp, #12
   11e24:	cmp	r0, #1
   11e28:	str	r0, [sp, #4]
   11e2c:	str	r1, [sp]
   11e30:	movgt	r3, r0
   11e34:	ble	11e8c <__assert_fail@plt+0x924>
   11e38:	cmp	r3, #2
   11e3c:	ldr	r3, [sp]
   11e40:	beq	11e58 <__assert_fail@plt+0x8f0>
   11e44:	ldr	r0, [pc, #92]	; 11ea8 <__assert_fail@plt+0x940>
   11e48:	ldr	r1, [r3]
   11e4c:	bl	11220 <printf@plt>
   11e50:	add	sp, sp, #12
   11e54:	pop	{pc}		; (ldr pc, [sp], #4)
   11e58:	ldr	r0, [r3, #4]
   11e5c:	mov	r2, #10
   11e60:	mov	r1, #0
   11e64:	bl	11214 <strtol@plt>
   11e68:	cmp	r0, #0
   11e6c:	ldrge	r3, [pc, #56]	; 11eac <__assert_fail@plt+0x944>
   11e70:	strge	r0, [r3, #4]
   11e74:	bge	11e50 <__assert_fail@plt+0x8e8>
   11e78:	ldr	r3, [sp]
   11e7c:	ldr	r0, [pc, #44]	; 11eb0 <__assert_fail@plt+0x948>
   11e80:	ldr	r1, [r3, #4]
   11e84:	bl	11220 <printf@plt>
   11e88:	b	11e50 <__assert_fail@plt+0x8e8>
   11e8c:	mov	r3, sp
   11e90:	add	r2, sp, #4
   11e94:	ldr	r1, [pc, #24]	; 11eb4 <__assert_fail@plt+0x94c>
   11e98:	ldr	r0, [pc, #24]	; 11eb8 <__assert_fail@plt+0x950>
   11e9c:	bl	11bd8 <__assert_fail@plt+0x670>
   11ea0:	ldr	r3, [sp, #4]
   11ea4:	b	11e38 <__assert_fail@plt+0x8d0>
   11ea8:	andeq	sl, r1, ip, ror #14
   11eac:	andeq	ip, r2, ip, asr #2
   11eb0:	andeq	sl, r1, r0, lsl #15
   11eb4:	andeq	sl, r1, r0, asr r7
   11eb8:	andeq	sl, r1, ip, asr r7
   11ebc:	push	{lr}		; (str lr, [sp, #-4]!)
   11ec0:	sub	sp, sp, #12
   11ec4:	cmp	r0, #1
   11ec8:	str	r0, [sp, #4]
   11ecc:	str	r1, [sp]
   11ed0:	movgt	r3, r0
   11ed4:	ble	11f2c <__assert_fail@plt+0x9c4>
   11ed8:	cmp	r3, #2
   11edc:	ldr	r3, [sp]
   11ee0:	beq	11ef8 <__assert_fail@plt+0x990>
   11ee4:	ldr	r0, [pc, #92]	; 11f48 <__assert_fail@plt+0x9e0>
   11ee8:	ldr	r1, [r3]
   11eec:	bl	11220 <printf@plt>
   11ef0:	add	sp, sp, #12
   11ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ef8:	ldr	r0, [r3, #4]
   11efc:	mov	r2, #10
   11f00:	mov	r1, #0
   11f04:	bl	11214 <strtol@plt>
   11f08:	cmp	r0, #0
   11f0c:	ldrge	r3, [pc, #56]	; 11f4c <__assert_fail@plt+0x9e4>
   11f10:	strge	r0, [r3]
   11f14:	bge	11ef0 <__assert_fail@plt+0x988>
   11f18:	ldr	r3, [sp]
   11f1c:	ldr	r0, [pc, #44]	; 11f50 <__assert_fail@plt+0x9e8>
   11f20:	ldr	r1, [r3, #4]
   11f24:	bl	11220 <printf@plt>
   11f28:	b	11ef0 <__assert_fail@plt+0x988>
   11f2c:	mov	r3, sp
   11f30:	add	r2, sp, #4
   11f34:	ldr	r1, [pc, #24]	; 11f54 <__assert_fail@plt+0x9ec>
   11f38:	ldr	r0, [pc, #24]	; 11f58 <__assert_fail@plt+0x9f0>
   11f3c:	bl	11bd8 <__assert_fail@plt+0x670>
   11f40:	ldr	r3, [sp, #4]
   11f44:	b	11ed8 <__assert_fail@plt+0x970>
   11f48:	andeq	sl, r1, ip, ror #14
   11f4c:	andeq	ip, r2, ip, asr #2
   11f50:	andeq	sl, r1, r0, lsl #15
   11f54:	andeq	sl, r1, r0, asr r7
   11f58:	muleq	r1, r0, r7
   11f5c:	push	{r4, lr}
   11f60:	sub	sp, sp, #8
   11f64:	cmp	r0, #1
   11f68:	str	r0, [sp, #4]
   11f6c:	str	r1, [sp]
   11f70:	movgt	r3, r0
   11f74:	ble	12030 <__assert_fail@plt+0xac8>
   11f78:	sub	r3, r3, #2
   11f7c:	cmp	r3, #1
   11f80:	ldr	r3, [sp]
   11f84:	bls	11f9c <__assert_fail@plt+0xa34>
   11f88:	ldr	r0, [pc, #208]	; 12060 <__assert_fail@plt+0xaf8>
   11f8c:	ldr	r1, [r3]
   11f90:	bl	11220 <printf@plt>
   11f94:	add	sp, sp, #8
   11f98:	pop	{r4, pc}
   11f9c:	ldr	r0, [r3, #4]
   11fa0:	bl	11c88 <__assert_fail@plt+0x720>
   11fa4:	cmn	r0, #1
   11fa8:	beq	11f94 <__assert_fail@plt+0xa2c>
   11fac:	ldr	r3, [sp, #4]
   11fb0:	cmp	r3, #3
   11fb4:	beq	11ff0 <__assert_fail@plt+0xa88>
   11fb8:	ldr	r1, [pc, #164]	; 12064 <__assert_fail@plt+0xafc>
   11fbc:	ldr	r0, [pc, #164]	; 12068 <__assert_fail@plt+0xb00>
   11fc0:	bl	11418 <getservbyname@plt>
   11fc4:	subs	r4, r0, #0
   11fc8:	beq	1204c <__assert_fail@plt+0xae4>
   11fcc:	ldr	r3, [r4, #8]
   11fd0:	ldr	r4, [pc, #148]	; 1206c <__assert_fail@plt+0xb04>
   11fd4:	rev16	r3, r3
   11fd8:	uxth	r3, r3
   11fdc:	str	r3, [r4, #144]	; 0x90
   11fe0:	mov	r3, #1
   11fe4:	str	r3, [r4, #8]
   11fe8:	add	sp, sp, #8
   11fec:	pop	{r4, pc}
   11ff0:	ldr	r3, [sp]
   11ff4:	mov	r2, #10
   11ff8:	mov	r1, #0
   11ffc:	ldr	r0, [r3, #8]
   12000:	bl	11214 <strtol@plt>
   12004:	ldr	r4, [pc, #96]	; 1206c <__assert_fail@plt+0xb04>
   12008:	cmp	r0, #0
   1200c:	str	r0, [r4, #144]	; 0x90
   12010:	bgt	11fe0 <__assert_fail@plt+0xa78>
   12014:	ldr	r3, [sp]
   12018:	ldr	r0, [pc, #80]	; 12070 <__assert_fail@plt+0xb08>
   1201c:	ldr	r1, [r3, #8]
   12020:	bl	11220 <printf@plt>
   12024:	mov	r3, #0
   12028:	str	r3, [r4, #8]
   1202c:	b	11f94 <__assert_fail@plt+0xa2c>
   12030:	mov	r3, sp
   12034:	add	r2, sp, #4
   12038:	ldr	r1, [pc, #52]	; 12074 <__assert_fail@plt+0xb0c>
   1203c:	ldr	r0, [pc, #52]	; 12078 <__assert_fail@plt+0xb10>
   12040:	bl	11bd8 <__assert_fail@plt+0x670>
   12044:	ldr	r3, [sp, #4]
   12048:	b	11f78 <__assert_fail@plt+0xa10>
   1204c:	ldr	r2, [pc, #40]	; 1207c <__assert_fail@plt+0xb14>
   12050:	mov	r1, r4
   12054:	mov	r0, #1
   12058:	bl	1134c <error@plt>
   1205c:	b	11fcc <__assert_fail@plt+0xa64>
   12060:			; <UNDEFINED> instruction: 0x0001a7b0
   12064:	andeq	sl, r1, r4, ror #15
   12068:	andeq	sl, r1, r0, lsr r7
   1206c:	andeq	ip, r2, r4, ror #8
   12070:	andeq	sl, r1, ip, asr #15
   12074:	andeq	sl, r1, r0, lsr #15
   12078:	andeq	sl, r1, r8, lsr #15
   1207c:	andeq	sl, r1, r8, ror #15
   12080:	push	{r4, r5, r6, lr}
   12084:	mov	r4, r1
   12088:	mov	r1, r0
   1208c:	ldrb	r0, [r4, #1]
   12090:	ldrb	r3, [r4]
   12094:	mov	r6, r2
   12098:	orr	r2, r3, r0, lsl #8
   1209c:	rev16	r2, r2
   120a0:	uxth	r2, r2
   120a4:	sub	r5, r2, #1
   120a8:	uxth	r3, r5
   120ac:	cmp	r3, #4
   120b0:	ldrls	r3, [pc, #172]	; 12164 <__assert_fail@plt+0xbfc>
   120b4:	ldrhi	r0, [pc, #172]	; 12168 <__assert_fail@plt+0xc00>
   120b8:	ldrls	r0, [pc, #172]	; 1216c <__assert_fail@plt+0xc04>
   120bc:	ldrls	r2, [r3, r2, lsl #2]
   120c0:	bl	11220 <printf@plt>
   120c4:	cmp	r5, #4
   120c8:	ldrls	pc, [pc, r5, lsl #2]
   120cc:	b	12160 <__assert_fail@plt+0xbf8>
   120d0:	andeq	r2, r1, ip, lsr r1
   120d4:	andeq	r2, r1, ip, lsr r1
   120d8:	andeq	r2, r1, r8, lsr #2
   120dc:	andeq	r2, r1, r8, lsl #2
   120e0:	andeq	r2, r1, r4, ror #1
   120e4:	ldrb	r3, [r4, #3]
   120e8:	ldrb	r1, [r4, #2]
   120ec:	ldr	r0, [pc, #124]	; 12170 <__assert_fail@plt+0xc08>
   120f0:	add	r2, r4, #4
   120f4:	orr	r1, r1, r3, lsl #8
   120f8:	rev16	r1, r1
   120fc:	pop	{r4, r5, r6, lr}
   12100:	uxth	r1, r1
   12104:	b	11220 <printf@plt>
   12108:	ldrb	r3, [r4, #3]
   1210c:	ldrb	r1, [r4, #2]
   12110:	ldr	r0, [pc, #92]	; 12174 <__assert_fail@plt+0xc0c>
   12114:	pop	{r4, r5, r6, lr}
   12118:	orr	r1, r1, r3, lsl #8
   1211c:	rev16	r1, r1
   12120:	uxth	r1, r1
   12124:	b	11220 <printf@plt>
   12128:	ldrb	r3, [r4, #3]
   1212c:	ldrb	r1, [r4, #2]
   12130:	sub	r2, r6, #4
   12134:	ldr	r0, [pc, #60]	; 12178 <__assert_fail@plt+0xc10>
   12138:	b	120f4 <__assert_fail@plt+0xb8c>
   1213c:	add	r4, r4, #2
   12140:	mov	r0, r4
   12144:	mov	r1, #0
   12148:	bl	113f4 <strchr@plt>
   1214c:	mov	r1, r4
   12150:	pop	{r4, r5, r6, lr}
   12154:	add	r2, r0, #1
   12158:	ldr	r0, [pc, #28]	; 1217c <__assert_fail@plt+0xc14>
   1215c:	b	11220 <printf@plt>
   12160:	pop	{r4, r5, r6, pc}
   12164:	andeq	sl, r1, r0, lsl #12
   12168:	andeq	sl, r1, r4, lsl #16
   1216c:	andeq	sl, r1, r4, lsl r8
   12170:	andeq	sl, r1, r4, asr r8
   12174:	andeq	sl, r1, r8, asr #16
   12178:	andeq	sl, r1, r0, lsr r8
   1217c:	andeq	sl, r1, ip, lsl r8
   12180:	mov	r1, #1
   12184:	push	{r4, lr}
   12188:	mov	r0, #14
   1218c:	bl	112a4 <signal@plt>
   12190:	mov	r0, #0
   12194:	bl	112d4 <alarm@plt>
   12198:	mvn	r1, #0
   1219c:	ldr	r0, [pc]	; 121a4 <__assert_fail@plt+0xc3c>
   121a0:	bl	11238 <longjmp@plt>
   121a4:	andeq	ip, r2, r0, lsr #18
   121a8:	ldr	r2, [pc, #64]	; 121f0 <__assert_fail@plt+0xc88>
   121ac:	ldr	r1, [pc, #64]	; 121f4 <__assert_fail@plt+0xc8c>
   121b0:	push	{r4, lr}
   121b4:	ldr	r3, [r2]
   121b8:	ldr	r0, [r1, #4]
   121bc:	ldr	r1, [r1]
   121c0:	add	r3, r3, r0
   121c4:	cmp	r3, r1
   121c8:	str	r3, [r2]
   121cc:	blt	121e4 <__assert_fail@plt+0xc7c>
   121d0:	ldr	r0, [pc, #32]	; 121f8 <__assert_fail@plt+0xc90>
   121d4:	bl	11370 <puts@plt>
   121d8:	mvn	r1, #0
   121dc:	ldr	r0, [pc, #24]	; 121fc <__assert_fail@plt+0xc94>
   121e0:	bl	11238 <longjmp@plt>
   121e4:	mov	r1, #1
   121e8:	ldr	r0, [pc, #16]	; 12200 <__assert_fail@plt+0xc98>
   121ec:	bl	11238 <longjmp@plt>
   121f0:	andeq	ip, r2, r8, lsr #21
   121f4:	andeq	ip, r2, ip, asr #2
   121f8:	andeq	sl, r1, r8, ror #16
   121fc:	andeq	ip, r2, r0, lsr #18
   12200:	andeq	ip, r2, r8, asr #14
   12204:	rev16	r0, r0
   12208:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1220c:	uxth	r0, r0
   12210:	mov	r5, r2
   12214:	lsr	r2, r0, #8
   12218:	strb	r0, [r5]
   1221c:	strb	r2, [r5, #1]
   12220:	mov	r0, r1
   12224:	mov	r8, r3
   12228:	mov	r9, r1
   1222c:	bl	113e8 <strlen@plt>
   12230:	ldr	r7, [pc, #88]	; 12290 <__assert_fail@plt+0xd28>
   12234:	add	r6, r5, #2
   12238:	mov	r2, r7
   1223c:	mov	r1, r9
   12240:	mov	r4, r0
   12244:	mov	r0, r6
   12248:	bl	11448 <strncpy@plt>
   1224c:	cmp	r4, r7
   12250:	movcs	r2, r7
   12254:	movcc	r2, r4
   12258:	mov	r7, #0
   1225c:	mov	r1, r8
   12260:	add	r4, r6, r2
   12264:	add	r4, r4, #1
   12268:	strb	r7, [r6, r2]
   1226c:	mov	r0, r4
   12270:	bl	11328 <strcpy@plt>
   12274:	mov	r0, r8
   12278:	bl	113e8 <strlen@plt>
   1227c:	add	r3, r4, r0
   12280:	add	r3, r3, #1
   12284:	strb	r7, [r4, r0]
   12288:	sub	r0, r3, r5
   1228c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12290:	strdeq	r0, [r0], -r6
   12294:	push	{r4, r5, r6, r7, lr}
   12298:	rev16	r3, r0
   1229c:	ldr	r6, [pc, #280]	; 123bc <__assert_fail@plt+0xe54>
   122a0:	ldr	r5, [pc, #280]	; 123c0 <__assert_fail@plt+0xe58>
   122a4:	uxth	r3, r3
   122a8:	ldr	r2, [r6, #12]
   122ac:	mov	ip, #0
   122b0:	lsr	lr, r3, #8
   122b4:	mov	r1, #5
   122b8:	cmp	r2, ip
   122bc:	sub	sp, sp, #12
   122c0:	strb	lr, [r5, #3]
   122c4:	strb	r3, [r5, #2]
   122c8:	strb	ip, [r5]
   122cc:	strb	r1, [r5, #1]
   122d0:	blt	123ac <__assert_fail@plt+0xe44>
   122d4:	cmp	r0, r2
   122d8:	beq	123b4 <__assert_fail@plt+0xe4c>
   122dc:	add	r3, r6, #12
   122e0:	b	122f0 <__assert_fail@plt+0xd88>
   122e4:	cmp	r0, r2
   122e8:	beq	12388 <__assert_fail@plt+0xe20>
   122ec:	mov	r3, r4
   122f0:	ldr	r2, [r3, #8]
   122f4:	add	r4, r3, #8
   122f8:	cmp	r2, #0
   122fc:	bge	122e4 <__assert_fail@plt+0xd7c>
   12300:	sub	r0, r0, #100	; 0x64
   12304:	bl	11394 <strerror@plt>
   12308:	mov	r3, #0
   1230c:	strb	r3, [r5, #2]
   12310:	strb	r3, [r5, #3]
   12314:	mov	r7, r0
   12318:	str	r0, [r4, #4]
   1231c:	mov	r0, r7
   12320:	bl	113e8 <strlen@plt>
   12324:	ldr	r5, [pc, #152]	; 123c4 <__assert_fail@plt+0xe5c>
   12328:	mov	r1, r7
   1232c:	mov	r4, r0
   12330:	add	r2, r0, #1
   12334:	ldr	r0, [pc, #140]	; 123c8 <__assert_fail@plt+0xe60>
   12338:	bl	11298 <memcpy@plt>
   1233c:	ldr	r3, [r5]
   12340:	add	r4, r4, #4
   12344:	cmp	r3, #0
   12348:	bne	12398 <__assert_fail@plt+0xe30>
   1234c:	ldr	r2, [r5, #12]
   12350:	ldr	r3, [pc, #116]	; 123cc <__assert_fail@plt+0xe64>
   12354:	str	r2, [sp, #4]
   12358:	str	r3, [sp]
   1235c:	ldr	r0, [r6, #8]
   12360:	mov	r3, #0
   12364:	mov	r2, r4
   12368:	ldr	r1, [pc, #80]	; 123c0 <__assert_fail@plt+0xe58>
   1236c:	bl	11490 <sendto@plt>
   12370:	cmp	r4, r0
   12374:	beq	12390 <__assert_fail@plt+0xe28>
   12378:	ldr	r0, [pc, #80]	; 123d0 <__assert_fail@plt+0xe68>
   1237c:	add	sp, sp, #12
   12380:	pop	{r4, r5, r6, r7, lr}
   12384:	b	11304 <perror@plt>
   12388:	ldr	r7, [r3, #12]
   1238c:	b	1231c <__assert_fail@plt+0xdb4>
   12390:	add	sp, sp, #12
   12394:	pop	{r4, r5, r6, r7, pc}
   12398:	mov	r2, r4
   1239c:	ldr	r1, [pc, #28]	; 123c0 <__assert_fail@plt+0xe58>
   123a0:	ldr	r0, [pc, #44]	; 123d4 <__assert_fail@plt+0xe6c>
   123a4:	bl	12080 <__assert_fail@plt+0xb18>
   123a8:	b	1234c <__assert_fail@plt+0xde4>
   123ac:	add	r4, r6, #12
   123b0:	b	12300 <__assert_fail@plt+0xd98>
   123b4:	ldr	r7, [r6, #16]
   123b8:	b	1231c <__assert_fail@plt+0xdb4>
   123bc:	andeq	ip, r2, ip, asr #2
   123c0:	andeq	ip, r2, r0, asr #10
   123c4:	andeq	ip, r2, r4, ror #8
   123c8:	andeq	ip, r2, r4, asr #10
   123cc:	andeq	ip, r2, r4, ror r4
   123d0:	andeq	sl, r1, r4, lsl #17
   123d4:	andeq	sl, r1, ip, ror r8
   123d8:	cmp	r0, #0
   123dc:	beq	12408 <__assert_fail@plt+0xea0>
   123e0:	cmp	r0, #118	; 0x76
   123e4:	bne	12400 <__assert_fail@plt+0xe98>
   123e8:	ldr	r2, [pc, #112]	; 12460 <__assert_fail@plt+0xef8>
   123ec:	mov	r0, #0
   123f0:	ldr	r3, [r2, #4]
   123f4:	add	r3, r3, #1
   123f8:	str	r3, [r2, #4]
   123fc:	bx	lr
   12400:	mov	r0, #7
   12404:	bx	lr
   12408:	ldr	r3, [r2, #20]
   1240c:	push	{r4, r5, r6, lr}
   12410:	cmp	r3, #1
   12414:	mov	r0, r2
   12418:	mov	r4, r1
   1241c:	ldr	r5, [pc, #64]	; 12464 <__assert_fail@plt+0xefc>
   12420:	bls	12450 <__assert_fail@plt+0xee8>
   12424:	ldr	r3, [pc, #60]	; 12468 <__assert_fail@plt+0xf00>
   12428:	ldr	r2, [pc, #60]	; 1246c <__assert_fail@plt+0xf04>
   1242c:	ldr	r1, [r3]
   12430:	bl	16b1c <argp_state_help@@Base>
   12434:	ldr	r3, [r5, #84]	; 0x54
   12438:	add	r2, r5, r3, lsl #2
   1243c:	add	r3, r3, #1
   12440:	str	r4, [r2, #88]	; 0x58
   12444:	str	r3, [r5, #84]	; 0x54
   12448:	mov	r0, #0
   1244c:	pop	{r4, r5, r6, pc}
   12450:	ldr	r3, [r5, #84]	; 0x54
   12454:	cmp	r3, #2
   12458:	ble	12438 <__assert_fail@plt+0xed0>
   1245c:	b	12424 <__assert_fail@plt+0xebc>
   12460:	andeq	ip, r2, r4, ror #8
   12464:	andeq	ip, r2, ip, asr #2
   12468:	andeq	ip, r2, r0, asr r4
   1246c:	andeq	r0, r0, r6, lsl #2
   12470:	mov	r1, r0
   12474:	push	{r4, lr}
   12478:	ldr	r0, [pc, #32]	; 124a0 <__assert_fail@plt+0xf38>
   1247c:	bl	11328 <strcpy@plt>
   12480:	ldr	r3, [pc, #28]	; 124a4 <__assert_fail@plt+0xf3c>
   12484:	ldr	r3, [r3, #4]
   12488:	cmp	r3, #0
   1248c:	popeq	{r4, pc}
   12490:	ldr	r1, [pc, #8]	; 124a0 <__assert_fail@plt+0xf38>
   12494:	ldr	r0, [pc, #12]	; 124a8 <__assert_fail@plt+0xf40>
   12498:	pop	{r4, lr}
   1249c:	b	11220 <printf@plt>
   124a0:	andeq	ip, r2, r4, asr #21
   124a4:	andeq	ip, r2, r4, ror #8
   124a8:	andeq	sl, r1, r8, lsl #17
   124ac:	ldr	r0, [pc]	; 124b4 <__assert_fail@plt+0xf4c>
   124b0:	b	12470 <__assert_fail@plt+0xf08>
   124b4:	muleq	r1, r8, r8
   124b8:	ldr	r0, [pc]	; 124c0 <__assert_fail@plt+0xf58>
   124bc:	b	12470 <__assert_fail@plt+0xf08>
   124c0:	andeq	sl, r1, r0, lsr #17
   124c4:	cmp	r0, #1
   124c8:	ble	12588 <__assert_fail@plt+0x1020>
   124cc:	cmp	r0, #2
   124d0:	push	{r4, r5, r6, r7, r8, lr}
   124d4:	mov	r6, r1
   124d8:	ldr	r7, [pc, #180]	; 12594 <__assert_fail@plt+0x102c>
   124dc:	beq	12538 <__assert_fail@plt+0xfd0>
   124e0:	ldr	r1, [r6]
   124e4:	ldr	r0, [pc, #172]	; 12598 <__assert_fail@plt+0x1030>
   124e8:	bl	11220 <printf@plt>
   124ec:	ldr	r2, [r7, #100]	; 0x64
   124f0:	cmp	r2, #0
   124f4:	beq	1252c <__assert_fail@plt+0xfc4>
   124f8:	ldr	r5, [pc, #156]	; 1259c <__assert_fail@plt+0x1034>
   124fc:	ldr	r4, [pc, #156]	; 125a0 <__assert_fail@plt+0x1038>
   12500:	ldr	r7, [pc, #156]	; 125a4 <__assert_fail@plt+0x103c>
   12504:	ldr	r6, [pc, #156]	; 125a8 <__assert_fail@plt+0x1040>
   12508:	mov	r1, r4
   1250c:	mov	r0, r7
   12510:	bl	11220 <printf@plt>
   12514:	ldrb	r3, [r4]
   12518:	ldr	r2, [r5, #8]!
   1251c:	cmp	r3, #32
   12520:	moveq	r4, r6
   12524:	cmp	r2, #0
   12528:	bne	12508 <__assert_fail@plt+0xfa0>
   1252c:	ldr	r0, [pc, #120]	; 125ac <__assert_fail@plt+0x1044>
   12530:	pop	{r4, r5, r6, r7, r8, lr}
   12534:	b	11370 <puts@plt>
   12538:	ldr	r1, [r7, #100]	; 0x64
   1253c:	ldr	r5, [r6, #4]
   12540:	cmp	r1, #0
   12544:	beq	12578 <__assert_fail@plt+0x1010>
   12548:	add	r4, r7, #100	; 0x64
   1254c:	b	1255c <__assert_fail@plt+0xff4>
   12550:	ldr	r1, [r4, #8]!
   12554:	cmp	r1, #0
   12558:	beq	12578 <__assert_fail@plt+0x1010>
   1255c:	mov	r0, r5
   12560:	bl	11208 <strcmp@plt>
   12564:	cmp	r0, #0
   12568:	bne	12550 <__assert_fail@plt+0xfe8>
   1256c:	ldr	r0, [r4, #4]
   12570:	pop	{r4, r5, r6, r7, r8, lr}
   12574:	b	12470 <__assert_fail@plt+0xf08>
   12578:	mov	r1, r5
   1257c:	ldr	r0, [pc, #44]	; 125b0 <__assert_fail@plt+0x1048>
   12580:	bl	11220 <printf@plt>
   12584:	b	124e0 <__assert_fail@plt+0xf78>
   12588:	ldr	r1, [pc, #36]	; 125b4 <__assert_fail@plt+0x104c>
   1258c:	ldr	r0, [pc, #36]	; 125b8 <__assert_fail@plt+0x1050>
   12590:	b	11220 <printf@plt>
   12594:	andeq	ip, r2, ip, asr #2
   12598:	ldrdeq	sl, [r1], -r4
   1259c:			; <UNDEFINED> instruction: 0x0002c1b0
   125a0:	andeq	sl, r1, r4, lsr #15
   125a4:	andeq	sl, r1, r4, ror #17
   125a8:	andeq	sl, r1, ip, lsr #17
   125ac:	andeq	sl, r1, r0, ror #17
   125b0:	andeq	sl, r1, ip, ror #17
   125b4:	andeq	ip, r2, r4, asr #21
   125b8:			; <UNDEFINED> instruction: 0x0001a8b0
   125bc:	push	{r4, r5, r6, lr}
   125c0:	mov	r4, r0
   125c4:	ldrb	r3, [r0]
   125c8:	cmp	r3, #0
   125cc:	movne	r5, #47	; 0x2f
   125d0:	bne	125f4 <__assert_fail@plt+0x108c>
   125d4:	b	12608 <__assert_fail@plt+0x10a0>
   125d8:	ldrb	r3, [r0, #1]
   125dc:	cmp	r3, #0
   125e0:	bne	12610 <__assert_fail@plt+0x10a8>
   125e4:	strb	r3, [r0]
   125e8:	ldrb	r3, [r4]
   125ec:	cmp	r3, #0
   125f0:	beq	12608 <__assert_fail@plt+0x10a0>
   125f4:	mov	r1, r5
   125f8:	mov	r0, r4
   125fc:	bl	114b4 <strrchr@plt>
   12600:	cmp	r0, #0
   12604:	bne	125d8 <__assert_fail@plt+0x1070>
   12608:	mov	r0, r4
   1260c:	pop	{r4, r5, r6, pc}
   12610:	add	r0, r0, #1
   12614:	pop	{r4, r5, r6, pc}
   12618:	push	{r4, r5, r6, r7, r8, lr}
   1261c:	ldr	lr, [pc, #192]	; 126e4 <__assert_fail@plt+0x117c>
   12620:	ldr	r2, [lr, #148]	; 0x94
   12624:	cmp	r2, #0
   12628:	beq	126dc <__assert_fail@plt+0x1174>
   1262c:	ldrb	r4, [r0]
   12630:	mov	r5, #0
   12634:	add	lr, lr, #148	; 0x94
   12638:	mov	r7, r5
   1263c:	mov	r8, r5
   12640:	ldrb	r3, [r2]
   12644:	mov	r6, lr
   12648:	add	r2, r2, #1
   1264c:	cmp	r3, r4
   12650:	bne	126d0 <__assert_fail@plt+0x1168>
   12654:	cmp	r4, #0
   12658:	beq	126ac <__assert_fail@plt+0x1144>
   1265c:	mov	r1, r0
   12660:	b	1266c <__assert_fail@plt+0x1104>
   12664:	cmp	r3, #0
   12668:	beq	126ac <__assert_fail@plt+0x1144>
   1266c:	ldrb	ip, [r1, #1]!
   12670:	ldrb	r3, [r2], #1
   12674:	cmp	r3, ip
   12678:	beq	12664 <__assert_fail@plt+0x10fc>
   1267c:	cmp	ip, #0
   12680:	bne	12694 <__assert_fail@plt+0x112c>
   12684:	sub	r1, r1, r0
   12688:	cmp	r1, r5
   1268c:	bgt	126b4 <__assert_fail@plt+0x114c>
   12690:	addeq	r7, r7, #1
   12694:	ldr	r2, [lr, #12]!
   12698:	cmp	r2, #0
   1269c:	bne	12640 <__assert_fail@plt+0x10d8>
   126a0:	cmp	r7, #2
   126a4:	movlt	r6, r8
   126a8:	mvnge	r6, #0
   126ac:	mov	r0, r6
   126b0:	pop	{r4, r5, r6, r7, r8, pc}
   126b4:	mov	r8, lr
   126b8:	ldr	r2, [lr, #12]!
   126bc:	mov	r5, r1
   126c0:	cmp	r2, #0
   126c4:	mov	r7, #1
   126c8:	bne	12640 <__assert_fail@plt+0x10d8>
   126cc:	b	126a0 <__assert_fail@plt+0x1138>
   126d0:	mov	ip, r4
   126d4:	mov	r1, r0
   126d8:	b	1267c <__assert_fail@plt+0x1114>
   126dc:	mov	r6, r2
   126e0:	b	126ac <__assert_fail@plt+0x1144>
   126e4:	andeq	ip, r2, ip, asr #2
   126e8:	cmp	r0, #1
   126ec:	push	{r4, r5, r6, r7, r8, lr}
   126f0:	beq	12764 <__assert_fail@plt+0x11fc>
   126f4:	ldr	r7, [pc, #172]	; 127a8 <__assert_fail@plt+0x1240>
   126f8:	ldr	r8, [pc, #172]	; 127ac <__assert_fail@plt+0x1244>
   126fc:	mov	r4, r0
   12700:	mov	r6, r1
   12704:	sub	r4, r4, #1
   12708:	cmp	r4, #0
   1270c:	ble	12740 <__assert_fail@plt+0x11d8>
   12710:	ldr	r5, [r6, #4]!
   12714:	mov	r0, r5
   12718:	bl	12618 <__assert_fail@plt+0x10b0>
   1271c:	cmn	r0, #1
   12720:	beq	12754 <__assert_fail@plt+0x11ec>
   12724:	cmp	r0, #0
   12728:	beq	12744 <__assert_fail@plt+0x11dc>
   1272c:	ldr	r0, [r0, #4]
   12730:	sub	r4, r4, #1
   12734:	bl	11370 <puts@plt>
   12738:	cmp	r4, #0
   1273c:	bgt	12710 <__assert_fail@plt+0x11a8>
   12740:	pop	{r4, r5, r6, r7, r8, pc}
   12744:	mov	r1, r5
   12748:	mov	r0, r7
   1274c:	bl	11220 <printf@plt>
   12750:	b	12704 <__assert_fail@plt+0x119c>
   12754:	mov	r1, r5
   12758:	mov	r0, r8
   1275c:	bl	11220 <printf@plt>
   12760:	b	12704 <__assert_fail@plt+0x119c>
   12764:	ldr	r4, [pc, #68]	; 127b0 <__assert_fail@plt+0x1248>
   12768:	ldr	r0, [pc, #68]	; 127b4 <__assert_fail@plt+0x124c>
   1276c:	bl	11370 <puts@plt>
   12770:	ldr	r2, [r4, #148]	; 0x94
   12774:	cmp	r2, #0
   12778:	popeq	{r4, r5, r6, r7, r8, pc}
   1277c:	ldr	r6, [pc, #52]	; 127b8 <__assert_fail@plt+0x1250>
   12780:	add	r4, r4, #148	; 0x94
   12784:	mov	r5, #8
   12788:	ldr	r3, [r4, #4]
   1278c:	mov	r1, r5
   12790:	mov	r0, r6
   12794:	bl	11220 <printf@plt>
   12798:	ldr	r2, [r4, #12]!
   1279c:	cmp	r2, #0
   127a0:	bne	12788 <__assert_fail@plt+0x1220>
   127a4:	pop	{r4, r5, r6, r7, r8, pc}
   127a8:	andeq	sl, r1, r0, lsr #19
   127ac:	andeq	sl, r1, r4, lsl #19
   127b0:	andeq	ip, r2, ip, asr #2
   127b4:	andeq	sl, r1, r8, asr #18
   127b8:	andeq	sl, r1, r8, ror r9
   127bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c0:	sub	sp, sp, #180	; 0xb4
   127c4:	mov	r4, r0
   127c8:	str	r1, [sp, #16]
   127cc:	ldr	r0, [pc, #852]	; 12b28 <__assert_fail@plt+0x15c0>
   127d0:	mov	r1, #0
   127d4:	mov	r5, r2
   127d8:	str	r2, [sp, #20]
   127dc:	bl	11334 <gettimeofday@plt>
   127e0:	bl	135f8 <__assert_fail@plt+0x2090>
   127e4:	ldr	r1, [pc, #832]	; 12b2c <__assert_fail@plt+0x15c4>
   127e8:	str	r0, [sp, #24]
   127ec:	mov	r0, r4
   127f0:	bl	111d8 <fdopen@plt>
   127f4:	ldr	r1, [pc, #820]	; 12b30 <__assert_fail@plt+0x15c8>
   127f8:	str	r0, [sp, #12]
   127fc:	mov	r0, r5
   12800:	bl	11208 <strcmp@plt>
   12804:	mov	r3, #0
   12808:	ldr	r1, [pc, #804]	; 12b34 <__assert_fail@plt+0x15cc>
   1280c:	clz	r0, r0
   12810:	lsr	r0, r0, #5
   12814:	str	r0, [sp, #36]	; 0x24
   12818:	mov	r0, #14
   1281c:	str	r3, [sp, #28]
   12820:	str	r3, [sp, #40]	; 0x28
   12824:	bl	112a4 <signal@plt>
   12828:	ldr	r3, [sp, #28]
   1282c:	cmp	r3, #0
   12830:	bne	12a10 <__assert_fail@plt+0x14a8>
   12834:	ldr	r3, [sp, #20]
   12838:	ldr	r2, [sp, #24]
   1283c:	ldr	r1, [sp, #16]
   12840:	mov	r0, #2
   12844:	bl	12204 <__assert_fail@plt+0xc9c>
   12848:	sub	r0, r0, #4
   1284c:	str	r0, [sp, #32]
   12850:	ldr	r2, [pc, #736]	; 12b38 <__assert_fail@plt+0x15d0>
   12854:	mov	r3, #0
   12858:	ldr	r0, [pc, #732]	; 12b3c <__assert_fail@plt+0x15d4>
   1285c:	str	r3, [r2]
   12860:	bl	11244 <_setjmp@plt>
   12864:	ldr	r7, [pc, #724]	; 12b40 <__assert_fail@plt+0x15d8>
   12868:	ldr	r9, [pc, #724]	; 12b44 <__assert_fail@plt+0x15dc>
   1286c:	ldr	r3, [pc, #724]	; 12b48 <__assert_fail@plt+0x15e0>
   12870:	ldr	r3, [r3]
   12874:	cmp	r3, #0
   12878:	bne	12aa4 <__assert_fail@plt+0x153c>
   1287c:	ldr	r3, [pc, #712]	; 12b4c <__assert_fail@plt+0x15e4>
   12880:	ldr	r2, [sp, #32]
   12884:	ldr	ip, [pc, #708]	; 12b50 <__assert_fail@plt+0x15e8>
   12888:	ldr	r0, [r3, #8]
   1288c:	ldr	r3, [pc, #692]	; 12b48 <__assert_fail@plt+0x15e0>
   12890:	ldr	r1, [sp, #24]
   12894:	add	r2, r2, #4
   12898:	ldr	r3, [r3, #12]
   1289c:	str	ip, [sp]
   128a0:	str	r3, [sp, #4]
   128a4:	mov	r3, #0
   128a8:	bl	11490 <sendto@plt>
   128ac:	ldr	r3, [sp, #32]
   128b0:	add	r3, r3, #4
   128b4:	cmp	r0, r3
   128b8:	bne	12b1c <__assert_fail@plt+0x15b4>
   128bc:	ldr	r1, [sp, #36]	; 0x24
   128c0:	ldr	r0, [sp, #12]
   128c4:	bl	13648 <__assert_fail@plt+0x20e0>
   128c8:	ldr	sl, [pc, #644]	; 12b54 <__assert_fail@plt+0x15ec>
   128cc:	mov	r8, #128	; 0x80
   128d0:	mov	r4, #0
   128d4:	ldr	r3, [pc, #624]	; 12b4c <__assert_fail@plt+0x15e4>
   128d8:	add	r6, sp, #48	; 0x30
   128dc:	add	r5, sp, #44	; 0x2c
   128e0:	ldr	r0, [r3, #4]
   128e4:	bl	112d4 <alarm@plt>
   128e8:	ldr	r3, [pc, #604]	; 12b4c <__assert_fail@plt+0x15e4>
   128ec:	mov	r2, #516	; 0x204
   128f0:	mov	r1, r7
   128f4:	ldr	r0, [r3, #8]
   128f8:	str	r5, [sp, #4]
   128fc:	str	r6, [sp]
   12900:	mov	r3, r4
   12904:	str	r8, [sp, #44]	; 0x2c
   12908:	bl	112c8 <recvfrom@plt>
   1290c:	cmp	r0, #0
   12910:	ble	128e8 <__assert_fail@plt+0x1380>
   12914:	mov	fp, r0
   12918:	mov	r0, r4
   1291c:	bl	112d4 <alarm@plt>
   12920:	ldrh	r3, [sp, #50]	; 0x32
   12924:	ldr	r2, [pc, #540]	; 12b48 <__assert_fail@plt+0x15e0>
   12928:	rev16	r3, r3
   1292c:	uxth	r3, r3
   12930:	rev16	r3, r3
   12934:	strh	r3, [r2, #18]
   12938:	ldr	r3, [pc, #520]	; 12b48 <__assert_fail@plt+0x15e0>
   1293c:	ldr	r3, [r3]
   12940:	cmp	r3, #0
   12944:	bne	129fc <__assert_fail@plt+0x1494>
   12948:	ldr	r3, [pc, #496]	; 12b40 <__assert_fail@plt+0x15d8>
   1294c:	ldr	r1, [pc, #492]	; 12b40 <__assert_fail@plt+0x15d8>
   12950:	ldr	ip, [pc, #488]	; 12b40 <__assert_fail@plt+0x15d8>
   12954:	ldrb	r0, [r3, #1]
   12958:	ldrb	r2, [r3, #3]
   1295c:	ldrb	r1, [r1, #2]
   12960:	ldrb	r3, [r3]
   12964:	orr	r1, r1, r2, lsl #8
   12968:	orr	r3, r3, r0, lsl #8
   1296c:	rev16	r3, r3
   12970:	rev16	r1, r1
   12974:	uxth	r2, r3
   12978:	uxth	r1, r1
   1297c:	sxth	r3, r3
   12980:	lsr	r0, r2, #8
   12984:	strb	r2, [ip]
   12988:	cmp	r3, #5
   1298c:	lsr	r2, r1, #8
   12990:	strb	r0, [ip, #1]
   12994:	strb	r1, [ip, #2]
   12998:	strb	r2, [ip, #3]
   1299c:	beq	12a60 <__assert_fail@plt+0x14f8>
   129a0:	cmp	r3, #4
   129a4:	bne	128d4 <__assert_fail@plt+0x136c>
   129a8:	ldr	r3, [sp, #28]
   129ac:	cmp	r1, r3
   129b0:	beq	12adc <__assert_fail@plt+0x1574>
   129b4:	ldr	r3, [pc, #400]	; 12b4c <__assert_fail@plt+0x15e4>
   129b8:	ldr	r0, [r3, #8]
   129bc:	bl	13958 <__assert_fail@plt+0x23f0>
   129c0:	subs	r1, r0, #0
   129c4:	beq	129d8 <__assert_fail@plt+0x1470>
   129c8:	ldr	r3, [pc, #376]	; 12b48 <__assert_fail@plt+0x15e0>
   129cc:	ldr	r3, [r3]
   129d0:	cmp	r3, #0
   129d4:	bne	12ad0 <__assert_fail@plt+0x1568>
   129d8:	ldr	r3, [pc, #352]	; 12b40 <__assert_fail@plt+0x15d8>
   129dc:	ldrb	r1, [r3, #3]
   129e0:	ldrb	r2, [r3, #2]
   129e4:	ldr	r3, [sp, #28]
   129e8:	orr	r2, r2, r1, lsl #8
   129ec:	sub	r3, r3, #1
   129f0:	cmp	r2, r3
   129f4:	bne	128d0 <__assert_fail@plt+0x1368>
   129f8:	b	1286c <__assert_fail@plt+0x1304>
   129fc:	mov	r2, fp
   12a00:	mov	r1, r7
   12a04:	mov	r0, r9
   12a08:	bl	12080 <__assert_fail@plt+0xb18>
   12a0c:	b	12948 <__assert_fail@plt+0x13e0>
   12a10:	ldr	r2, [sp, #36]	; 0x24
   12a14:	add	r1, sp, #24
   12a18:	ldr	r0, [sp, #12]
   12a1c:	bl	1376c <__assert_fail@plt+0x2204>
   12a20:	str	r0, [sp, #32]
   12a24:	ldr	r3, [sp, #32]
   12a28:	cmp	r3, #0
   12a2c:	blt	12abc <__assert_fail@plt+0x1554>
   12a30:	ldr	r3, [sp, #28]
   12a34:	ldr	r2, [sp, #24]
   12a38:	rev16	r3, r3
   12a3c:	mov	r0, #0
   12a40:	uxth	r3, r3
   12a44:	strb	r3, [r2, #2]
   12a48:	mov	r1, #3
   12a4c:	lsr	r3, r3, #8
   12a50:	strb	r3, [r2, #3]
   12a54:	strb	r0, [r2]
   12a58:	strb	r1, [r2, #1]
   12a5c:	b	12850 <__assert_fail@plt+0x12e8>
   12a60:	sxth	r1, r1
   12a64:	ldr	r2, [pc, #236]	; 12b58 <__assert_fail@plt+0x15f0>
   12a68:	ldr	r0, [pc, #236]	; 12b5c <__assert_fail@plt+0x15f4>
   12a6c:	bl	11220 <printf@plt>
   12a70:	ldr	r0, [sp, #12]
   12a74:	bl	11478 <fclose@plt>
   12a78:	mov	r1, #0
   12a7c:	ldr	r0, [pc, #220]	; 12b60 <__assert_fail@plt+0x15f8>
   12a80:	bl	11334 <gettimeofday@plt>
   12a84:	ldr	r3, [sp, #40]	; 0x28
   12a88:	cmp	r3, #0
   12a8c:	beq	12a9c <__assert_fail@plt+0x1534>
   12a90:	ldr	r1, [sp, #40]	; 0x28
   12a94:	ldr	r0, [pc, #200]	; 12b64 <__assert_fail@plt+0x15fc>
   12a98:	bl	11964 <__assert_fail@plt+0x3fc>
   12a9c:	add	sp, sp, #180	; 0xb4
   12aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aa4:	ldr	r2, [sp, #32]
   12aa8:	ldr	r1, [sp, #24]
   12aac:	add	r2, r2, #4
   12ab0:	ldr	r0, [pc, #176]	; 12b68 <__assert_fail@plt+0x1600>
   12ab4:	bl	12080 <__assert_fail@plt+0xb18>
   12ab8:	b	1287c <__assert_fail@plt+0x1314>
   12abc:	bl	1140c <__errno_location@plt>
   12ac0:	ldr	r0, [r0]
   12ac4:	add	r0, r0, #100	; 0x64
   12ac8:	bl	12294 <__assert_fail@plt+0xd2c>
   12acc:	b	12a70 <__assert_fail@plt+0x1508>
   12ad0:	mov	r0, sl
   12ad4:	bl	11220 <printf@plt>
   12ad8:	b	129d8 <__assert_fail@plt+0x1470>
   12adc:	ldr	r3, [sp, #28]
   12ae0:	cmp	r3, #0
   12ae4:	ldrgt	r3, [sp, #32]
   12ae8:	ldrgt	r2, [sp, #40]	; 0x28
   12aec:	addgt	r3, r3, r2
   12af0:	strgt	r3, [sp, #40]	; 0x28
   12af4:	ldr	r3, [sp, #28]
   12af8:	add	r3, r3, #1
   12afc:	str	r3, [sp, #28]
   12b00:	ldr	r3, [sp, #32]
   12b04:	cmp	r3, #512	; 0x200
   12b08:	beq	12828 <__assert_fail@plt+0x12c0>
   12b0c:	ldr	r3, [sp, #28]
   12b10:	cmp	r3, #1
   12b14:	bne	12a70 <__assert_fail@plt+0x1508>
   12b18:	b	12828 <__assert_fail@plt+0x12c0>
   12b1c:	ldr	r0, [pc, #72]	; 12b6c <__assert_fail@plt+0x1604>
   12b20:	bl	11304 <perror@plt>
   12b24:	b	12a70 <__assert_fail@plt+0x1508>
   12b28:	andeq	ip, r2, ip, lsr #21
   12b2c:	ldrdeq	sl, [r1], -r4
   12b30:	andeq	sl, r1, r0, lsr #17
   12b34:	andeq	r2, r1, r8, lsr #3
   12b38:	andeq	ip, r2, r8, lsr #21
   12b3c:	andeq	ip, r2, r8, asr #14
   12b40:	andeq	ip, r2, r0, asr #10
   12b44:	andeq	sl, r1, ip, asr #19
   12b48:	andeq	ip, r2, r4, ror #8
   12b4c:	andeq	ip, r2, ip, asr #2
   12b50:	andeq	ip, r2, r4, ror r4
   12b54:	andeq	sl, r1, ip, ror #19
   12b58:	andeq	ip, r2, r4, asr #10
   12b5c:	ldrdeq	sl, [r1], -r8
   12b60:			; <UNDEFINED> instruction: 0x0002cab4
   12b64:	andeq	sl, r1, r4, lsl #20
   12b68:	andeq	sl, r1, ip, ror r8
   12b6c:			; <UNDEFINED> instruction: 0x0001a9bc
   12b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b74:	sub	sp, sp, #20
   12b78:	cmp	r0, #1
   12b7c:	str	r0, [sp, #12]
   12b80:	str	r1, [sp, #8]
   12b84:	movgt	r7, r0
   12b88:	ble	12e04 <__assert_fail@plt+0x189c>
   12b8c:	ldr	r9, [sp, #8]
   12b90:	sub	r3, r7, #-1073741823	; 0xc0000001
   12b94:	mov	r1, #58	; 0x3a
   12b98:	ldr	sl, [r9, r3, lsl #2]
   12b9c:	mov	r0, sl
   12ba0:	bl	113f4 <strchr@plt>
   12ba4:	subs	r6, r0, #0
   12ba8:	beq	12dfc <__assert_fail@plt+0x1894>
   12bac:	cmp	r7, #2
   12bb0:	beq	12c0c <__assert_fail@plt+0x16a4>
   12bb4:	sub	r7, r7, #1
   12bb8:	mov	r5, r9
   12bbc:	mov	r4, #1
   12bc0:	mov	r8, #58	; 0x3a
   12bc4:	b	12bd0 <__assert_fail@plt+0x1668>
   12bc8:	cmp	r4, r7
   12bcc:	beq	12c0c <__assert_fail@plt+0x16a4>
   12bd0:	mov	r1, r8
   12bd4:	ldr	r0, [r5, #4]!
   12bd8:	bl	113f4 <strchr@plt>
   12bdc:	add	r4, r4, #1
   12be0:	cmp	r0, #0
   12be4:	beq	12bc8 <__assert_fail@plt+0x1660>
   12be8:	ldr	r4, [r9]
   12bec:	ldr	r0, [pc, #676]	; 12e98 <__assert_fail@plt+0x1930>
   12bf0:	mov	r1, r4
   12bf4:	bl	11220 <printf@plt>
   12bf8:	mov	r1, r4
   12bfc:	ldr	r0, [pc, #664]	; 12e9c <__assert_fail@plt+0x1934>
   12c00:	bl	11220 <printf@plt>
   12c04:	add	sp, sp, #20
   12c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c0c:	ldrb	r3, [sl]
   12c10:	cmp	r3, #91	; 0x5b
   12c14:	beq	12d20 <__assert_fail@plt+0x17b8>
   12c18:	mov	r3, #0
   12c1c:	strb	r3, [r6]
   12c20:	ldrb	r3, [sl]
   12c24:	add	r6, r6, #1
   12c28:	cmp	r3, #0
   12c2c:	bne	12d68 <__assert_fail@plt+0x1800>
   12c30:	ldr	r5, [pc, #616]	; 12ea0 <__assert_fail@plt+0x1938>
   12c34:	ldr	r3, [r5, #8]
   12c38:	cmp	r3, #0
   12c3c:	beq	12e34 <__assert_fail@plt+0x18cc>
   12c40:	ldr	r3, [sp, #12]
   12c44:	cmp	r3, #3
   12c48:	ble	12d80 <__assert_fail@plt+0x1818>
   12c4c:	mov	r1, #0
   12c50:	mov	r0, r6
   12c54:	bl	113f4 <strchr@plt>
   12c58:	mov	r3, #47	; 0x2f
   12c5c:	strb	r3, [r0]
   12c60:	ldr	r3, [sp, #12]
   12c64:	add	r8, r0, #1
   12c68:	cmp	r3, #2
   12c6c:	ble	12c04 <__assert_fail@plt+0x169c>
   12c70:	ldr	sl, [pc, #556]	; 12ea4 <__assert_fail@plt+0x193c>
   12c74:	mov	r4, #1
   12c78:	mov	fp, #0
   12c7c:	b	12cbc <__assert_fail@plt+0x1754>
   12c80:	ldrh	r2, [r5, #16]
   12c84:	ldrh	r3, [r5, #144]	; 0x90
   12c88:	mov	r0, r7
   12c8c:	cmp	r2, #10
   12c90:	rev16	r2, r3
   12c94:	strheq	r2, [r5, #18]
   12c98:	strhne	r2, [r5, #18]
   12c9c:	mov	r1, r6
   12ca0:	mov	r2, sl
   12ca4:	bl	127bc <__assert_fail@plt+0x1254>
   12ca8:	ldr	r3, [sp, #12]
   12cac:	add	r4, r4, #1
   12cb0:	sub	r3, r3, #1
   12cb4:	cmp	r3, r4
   12cb8:	ble	12c04 <__assert_fail@plt+0x169c>
   12cbc:	ldr	r3, [sp, #8]
   12cc0:	lsl	r9, r4, #2
   12cc4:	ldr	r0, [r3, r4, lsl #2]
   12cc8:	bl	125bc <__assert_fail@plt+0x1054>
   12ccc:	mov	r1, r0
   12cd0:	mov	r0, r8
   12cd4:	bl	11328 <strcpy@plt>
   12cd8:	ldr	r3, [sp, #8]
   12cdc:	mov	r1, fp
   12ce0:	ldr	r0, [r3, r4, lsl #2]
   12ce4:	bl	11358 <open64@plt>
   12ce8:	subs	r7, r0, #0
   12cec:	blt	12dd4 <__assert_fail@plt+0x186c>
   12cf0:	ldr	r3, [r5, #4]
   12cf4:	cmp	r3, #0
   12cf8:	beq	12c80 <__assert_fail@plt+0x1718>
   12cfc:	ldr	r1, [sp, #8]
   12d00:	ldr	r3, [pc, #416]	; 12ea8 <__assert_fail@plt+0x1940>
   12d04:	ldr	r0, [pc, #416]	; 12eac <__assert_fail@plt+0x1944>
   12d08:	ldr	r1, [r1, r9]
   12d0c:	ldr	r2, [r3]
   12d10:	mov	r3, r6
   12d14:	str	sl, [sp]
   12d18:	bl	11220 <printf@plt>
   12d1c:	b	12c80 <__assert_fail@plt+0x1718>
   12d20:	mov	r0, sl
   12d24:	mov	r1, #93	; 0x5d
   12d28:	bl	113f4 <strchr@plt>
   12d2c:	cmp	r0, #0
   12d30:	beq	12c04 <__assert_fail@plt+0x169c>
   12d34:	mov	r3, #0
   12d38:	strb	r3, [r0]
   12d3c:	ldr	r3, [sp, #12]
   12d40:	ldrb	r1, [r0, #1]
   12d44:	ldr	r2, [sp, #8]
   12d48:	sub	r3, r3, #-1073741823	; 0xc0000001
   12d4c:	cmp	r1, #58	; 0x3a
   12d50:	ldr	r6, [r2, r3, lsl #2]
   12d54:	bne	12c30 <__assert_fail@plt+0x16c8>
   12d58:	add	sl, r6, #1
   12d5c:	cmp	sl, #0
   12d60:	add	r6, r0, #2
   12d64:	beq	12c30 <__assert_fail@plt+0x16c8>
   12d68:	mov	r0, sl
   12d6c:	bl	11c88 <__assert_fail@plt+0x720>
   12d70:	cmp	r0, #0
   12d74:	beq	12c30 <__assert_fail@plt+0x16c8>
   12d78:	add	sp, sp, #20
   12d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d80:	cmp	r3, #2
   12d84:	beq	12e64 <__assert_fail@plt+0x18fc>
   12d88:	ldr	r3, [sp, #8]
   12d8c:	ldr	r4, [r3, #4]
   12d90:	mov	r1, #0
   12d94:	mov	r0, r4
   12d98:	bl	11358 <open64@plt>
   12d9c:	subs	r7, r0, #0
   12da0:	blt	12e74 <__assert_fail@plt+0x190c>
   12da4:	ldr	r3, [r5, #4]
   12da8:	cmp	r3, #0
   12dac:	bne	12e40 <__assert_fail@plt+0x18d8>
   12db0:	ldrh	r3, [r5, #144]	; 0x90
   12db4:	mov	r1, r6
   12db8:	mov	r0, r7
   12dbc:	rev16	r3, r3
   12dc0:	strh	r3, [r5, #18]
   12dc4:	ldr	r2, [pc, #216]	; 12ea4 <__assert_fail@plt+0x193c>
   12dc8:	bl	127bc <__assert_fail@plt+0x1254>
   12dcc:	add	sp, sp, #20
   12dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dd4:	ldr	r3, [pc, #212]	; 12eb0 <__assert_fail@plt+0x1948>
   12dd8:	mov	r2, #6
   12ddc:	mov	r1, #1
   12de0:	ldr	r3, [r3]
   12de4:	ldr	r0, [pc, #200]	; 12eb4 <__assert_fail@plt+0x194c>
   12de8:	bl	11310 <fwrite@plt>
   12dec:	ldr	r3, [sp, #8]
   12df0:	ldr	r0, [r3, r4, lsl #2]
   12df4:	bl	11304 <perror@plt>
   12df8:	b	12ca8 <__assert_fail@plt+0x1740>
   12dfc:	mov	r6, sl
   12e00:	b	12c30 <__assert_fail@plt+0x16c8>
   12e04:	add	r3, sp, #8
   12e08:	add	r2, sp, #12
   12e0c:	ldr	r1, [pc, #164]	; 12eb8 <__assert_fail@plt+0x1950>
   12e10:	ldr	r0, [pc, #164]	; 12ebc <__assert_fail@plt+0x1954>
   12e14:	bl	11bd8 <__assert_fail@plt+0x670>
   12e18:	ldr	r7, [sp, #12]
   12e1c:	cmp	r7, #1
   12e20:	bgt	12b8c <__assert_fail@plt+0x1624>
   12e24:	ldr	r3, [sp, #8]
   12e28:	ldr	r0, [pc, #104]	; 12e98 <__assert_fail@plt+0x1930>
   12e2c:	ldr	r4, [r3]
   12e30:	b	12bf0 <__assert_fail@plt+0x1688>
   12e34:	ldr	r0, [pc, #132]	; 12ec0 <__assert_fail@plt+0x1958>
   12e38:	bl	11370 <puts@plt>
   12e3c:	b	12c04 <__assert_fail@plt+0x169c>
   12e40:	ldr	r2, [pc, #96]	; 12ea8 <__assert_fail@plt+0x1940>
   12e44:	ldr	r3, [pc, #88]	; 12ea4 <__assert_fail@plt+0x193c>
   12e48:	mov	r1, r4
   12e4c:	ldr	r2, [r2]
   12e50:	ldr	r0, [pc, #84]	; 12eac <__assert_fail@plt+0x1944>
   12e54:	str	r3, [sp]
   12e58:	mov	r3, r6
   12e5c:	bl	11220 <printf@plt>
   12e60:	b	12db0 <__assert_fail@plt+0x1848>
   12e64:	mov	r0, r6
   12e68:	bl	125bc <__assert_fail@plt+0x1054>
   12e6c:	mov	r4, r0
   12e70:	b	12d90 <__assert_fail@plt+0x1828>
   12e74:	ldr	r3, [pc, #52]	; 12eb0 <__assert_fail@plt+0x1948>
   12e78:	mov	r2, #6
   12e7c:	mov	r1, #1
   12e80:	ldr	r3, [r3]
   12e84:	ldr	r0, [pc, #40]	; 12eb4 <__assert_fail@plt+0x194c>
   12e88:	bl	11310 <fwrite@plt>
   12e8c:	mov	r0, r4
   12e90:	bl	11304 <perror@plt>
   12e94:	b	12c04 <__assert_fail@plt+0x169c>
   12e98:	andeq	sl, r1, ip, lsl sl
   12e9c:	andeq	sl, r1, r0, asr #20
   12ea0:	andeq	ip, r2, r4, ror #8
   12ea4:	andeq	ip, r2, r4, asr #21
   12ea8:	andeq	ip, r2, r0, asr #21
   12eac:	muleq	r1, ip, sl
   12eb0:	andeq	ip, r2, r0, asr r4
   12eb4:	muleq	r1, r4, sl
   12eb8:	andeq	sl, r1, ip, lsl #20
   12ebc:	andeq	sl, r1, r4, lsl sl
   12ec0:	andeq	sl, r1, r4, ror sl
   12ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec8:	sub	sp, sp, #188	; 0xbc
   12ecc:	mov	r4, r0
   12ed0:	str	r1, [sp, #16]
   12ed4:	ldr	r0, [pc, #928]	; 1327c <__assert_fail@plt+0x1d14>
   12ed8:	mov	r1, #0
   12edc:	mov	r5, r2
   12ee0:	str	r2, [sp, #20]
   12ee4:	bl	11334 <gettimeofday@plt>
   12ee8:	bl	135ac <__assert_fail@plt+0x2044>
   12eec:	ldr	r1, [pc, #908]	; 13280 <__assert_fail@plt+0x1d18>
   12ef0:	str	r0, [sp, #28]
   12ef4:	mov	r0, r4
   12ef8:	bl	111d8 <fdopen@plt>
   12efc:	ldr	r1, [pc, #896]	; 13284 <__assert_fail@plt+0x1d1c>
   12f00:	str	r0, [sp, #12]
   12f04:	mov	r0, r5
   12f08:	bl	11208 <strcmp@plt>
   12f0c:	mov	r3, #1
   12f10:	mov	r2, #0
   12f14:	ldr	r1, [pc, #876]	; 13288 <__assert_fail@plt+0x1d20>
   12f18:	clz	r0, r0
   12f1c:	lsr	r0, r0, #5
   12f20:	str	r0, [sp, #52]	; 0x34
   12f24:	mov	r0, #14
   12f28:	str	r3, [sp, #32]
   12f2c:	str	r3, [sp, #40]	; 0x28
   12f30:	str	r2, [sp, #44]	; 0x2c
   12f34:	bl	112a4 <signal@plt>
   12f38:	ldr	r2, [sp, #40]	; 0x28
   12f3c:	cmp	r2, #0
   12f40:	bne	131dc <__assert_fail@plt+0x1c74>
   12f44:	ldr	r1, [pc, #832]	; 1328c <__assert_fail@plt+0x1d24>
   12f48:	ldr	r3, [sp, #32]
   12f4c:	ldr	r0, [pc, #824]	; 1328c <__assert_fail@plt+0x1d24>
   12f50:	strb	r2, [r1]
   12f54:	rev16	r3, r3
   12f58:	mov	r1, #4
   12f5c:	str	r1, [sp, #36]	; 0x24
   12f60:	uxth	r3, r3
   12f64:	ldr	r2, [sp, #32]
   12f68:	strb	r3, [r0, #2]
   12f6c:	add	r2, r2, #1
   12f70:	lsr	r3, r3, #8
   12f74:	strb	r3, [r0, #3]
   12f78:	strb	r1, [r0, #1]
   12f7c:	str	r2, [sp, #32]
   12f80:	ldr	r2, [pc, #776]	; 13290 <__assert_fail@plt+0x1d28>
   12f84:	mov	r3, #0
   12f88:	ldr	r0, [pc, #772]	; 13294 <__assert_fail@plt+0x1d2c>
   12f8c:	str	r3, [r2]
   12f90:	bl	11244 <_setjmp@plt>
   12f94:	ldr	r4, [pc, #764]	; 13298 <__assert_fail@plt+0x1d30>
   12f98:	ldr	sl, [pc, #764]	; 1329c <__assert_fail@plt+0x1d34>
   12f9c:	ldr	r3, [pc, #764]	; 132a0 <__assert_fail@plt+0x1d38>
   12fa0:	ldr	r3, [r3]
   12fa4:	cmp	r3, #0
   12fa8:	bne	131c8 <__assert_fail@plt+0x1c60>
   12fac:	ldr	r3, [pc, #748]	; 132a0 <__assert_fail@plt+0x1d38>
   12fb0:	ldr	r1, [pc, #748]	; 132a4 <__assert_fail@plt+0x1d3c>
   12fb4:	ldr	r0, [r4, #8]
   12fb8:	ldr	r3, [r3, #12]
   12fbc:	ldr	r2, [sp, #36]	; 0x24
   12fc0:	stm	sp, {r1, r3}
   12fc4:	mov	r3, #0
   12fc8:	ldr	r1, [pc, #700]	; 1328c <__assert_fail@plt+0x1d24>
   12fcc:	bl	11490 <sendto@plt>
   12fd0:	ldr	r3, [sp, #36]	; 0x24
   12fd4:	cmp	r0, r3
   12fd8:	bne	13254 <__assert_fail@plt+0x1cec>
   12fdc:	ldr	r1, [sp, #52]	; 0x34
   12fe0:	ldr	r0, [sp, #12]
   12fe4:	bl	137e0 <__assert_fail@plt+0x2278>
   12fe8:	mov	r9, #128	; 0x80
   12fec:	add	r8, sp, #56	; 0x38
   12ff0:	mov	r5, #0
   12ff4:	ldr	r0, [r4, #4]
   12ff8:	bl	112d4 <alarm@plt>
   12ffc:	add	r7, sp, #48	; 0x30
   13000:	mov	r6, #516	; 0x204
   13004:	ldr	r0, [r4, #8]
   13008:	ldr	r1, [sp, #28]
   1300c:	str	r7, [sp, #4]
   13010:	str	r8, [sp]
   13014:	mov	r3, r5
   13018:	mov	r2, r6
   1301c:	str	r9, [sp, #48]	; 0x30
   13020:	bl	112c8 <recvfrom@plt>
   13024:	cmp	r0, #0
   13028:	ble	13004 <__assert_fail@plt+0x1a9c>
   1302c:	mov	fp, r0
   13030:	mov	r0, r5
   13034:	bl	112d4 <alarm@plt>
   13038:	ldrh	r3, [sp, #58]	; 0x3a
   1303c:	ldr	r2, [pc, #604]	; 132a0 <__assert_fail@plt+0x1d38>
   13040:	rev16	r3, r3
   13044:	uxth	r3, r3
   13048:	rev16	r3, r3
   1304c:	strh	r3, [r2, #18]
   13050:	ldr	r3, [pc, #584]	; 132a0 <__assert_fail@plt+0x1d38>
   13054:	ldr	r3, [r3]
   13058:	cmp	r3, #0
   1305c:	bne	13108 <__assert_fail@plt+0x1ba0>
   13060:	ldr	r2, [sp, #28]
   13064:	ldrb	ip, [r2, #1]
   13068:	ldrb	r0, [r2, #3]
   1306c:	ldrb	r3, [r2]
   13070:	ldrb	r1, [r2, #2]
   13074:	orr	r3, r3, ip, lsl #8
   13078:	orr	r1, r1, r0, lsl #8
   1307c:	rev16	r3, r3
   13080:	rev16	r1, r1
   13084:	uxth	r0, r3
   13088:	uxth	r1, r1
   1308c:	sxth	r3, r3
   13090:	lsr	ip, r0, #8
   13094:	strb	r0, [r2]
   13098:	cmp	r3, #5
   1309c:	lsr	r0, r1, #8
   130a0:	strb	ip, [r2, #1]
   130a4:	strb	r1, [r2, #2]
   130a8:	strb	r0, [r2, #3]
   130ac:	beq	1311c <__assert_fail@plt+0x1bb4>
   130b0:	cmp	r3, #3
   130b4:	bne	12ff4 <__assert_fail@plt+0x1a8c>
   130b8:	ldr	r3, [sp, #32]
   130bc:	cmp	r1, r3
   130c0:	beq	1320c <__assert_fail@plt+0x1ca4>
   130c4:	ldr	r0, [r4, #8]
   130c8:	bl	13958 <__assert_fail@plt+0x23f0>
   130cc:	subs	r1, r0, #0
   130d0:	beq	130e4 <__assert_fail@plt+0x1b7c>
   130d4:	ldr	r3, [pc, #452]	; 132a0 <__assert_fail@plt+0x1d38>
   130d8:	ldr	r3, [r3]
   130dc:	cmp	r3, #0
   130e0:	bne	13200 <__assert_fail@plt+0x1c98>
   130e4:	ldr	r2, [sp, #28]
   130e8:	ldr	r3, [sp, #32]
   130ec:	ldrb	r1, [r2, #3]
   130f0:	ldrb	r2, [r2, #2]
   130f4:	sub	r3, r3, #1
   130f8:	orr	r2, r2, r1, lsl #8
   130fc:	cmp	r2, r3
   13100:	bne	12ff0 <__assert_fail@plt+0x1a88>
   13104:	b	12f9c <__assert_fail@plt+0x1a34>
   13108:	mov	r2, fp
   1310c:	ldr	r1, [sp, #28]
   13110:	mov	r0, sl
   13114:	bl	12080 <__assert_fail@plt+0xb18>
   13118:	b	13060 <__assert_fail@plt+0x1af8>
   1311c:	add	r2, r2, #4
   13120:	sxth	r1, r1
   13124:	ldr	r0, [pc, #380]	; 132a8 <__assert_fail@plt+0x1d40>
   13128:	bl	11220 <printf@plt>
   1312c:	ldr	r2, [sp, #32]
   13130:	ldr	r1, [pc, #352]	; 13298 <__assert_fail@plt+0x1d30>
   13134:	ldr	r3, [pc, #356]	; 132a0 <__assert_fail@plt+0x1d38>
   13138:	rev16	r2, r2
   1313c:	ldr	lr, [pc, #328]	; 1328c <__assert_fail@plt+0x1d24>
   13140:	ldr	r0, [r1, #8]
   13144:	uxth	r2, r2
   13148:	ldr	r1, [r3, #12]
   1314c:	mov	ip, #4
   13150:	str	r1, [sp, #4]
   13154:	mov	r4, #0
   13158:	lsr	r1, r2, #8
   1315c:	add	r3, r3, #16
   13160:	str	r3, [sp]
   13164:	mov	r3, r4
   13168:	strb	r2, [lr, #2]
   1316c:	strb	r1, [lr, #3]
   13170:	mov	r2, ip
   13174:	mov	r1, lr
   13178:	strb	r4, [lr]
   1317c:	strb	ip, [lr, #1]
   13180:	bl	11490 <sendto@plt>
   13184:	ldr	r5, [sp, #12]
   13188:	ldr	r1, [sp, #52]	; 0x34
   1318c:	mov	r0, r5
   13190:	bl	137e0 <__assert_fail@plt+0x2278>
   13194:	mov	r0, r5
   13198:	bl	11478 <fclose@plt>
   1319c:	mov	r1, r4
   131a0:	ldr	r0, [pc, #260]	; 132ac <__assert_fail@plt+0x1d44>
   131a4:	bl	11334 <gettimeofday@plt>
   131a8:	ldr	r3, [sp, #44]	; 0x2c
   131ac:	cmp	r3, r4
   131b0:	beq	131c0 <__assert_fail@plt+0x1c58>
   131b4:	ldr	r1, [sp, #44]	; 0x2c
   131b8:	ldr	r0, [pc, #240]	; 132b0 <__assert_fail@plt+0x1d48>
   131bc:	bl	11964 <__assert_fail@plt+0x3fc>
   131c0:	add	sp, sp, #188	; 0xbc
   131c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c8:	ldr	r2, [sp, #36]	; 0x24
   131cc:	ldr	r1, [pc, #184]	; 1328c <__assert_fail@plt+0x1d24>
   131d0:	ldr	r0, [pc, #220]	; 132b4 <__assert_fail@plt+0x1d4c>
   131d4:	bl	12080 <__assert_fail@plt+0xb18>
   131d8:	b	12fac <__assert_fail@plt+0x1a44>
   131dc:	ldr	r3, [sp, #20]
   131e0:	ldr	r2, [pc, #164]	; 1328c <__assert_fail@plt+0x1d24>
   131e4:	ldr	r1, [sp, #16]
   131e8:	mov	r0, #1
   131ec:	bl	12204 <__assert_fail@plt+0xc9c>
   131f0:	mov	r3, #0
   131f4:	str	r0, [sp, #36]	; 0x24
   131f8:	str	r3, [sp, #40]	; 0x28
   131fc:	b	12f80 <__assert_fail@plt+0x1a18>
   13200:	ldr	r0, [pc, #176]	; 132b8 <__assert_fail@plt+0x1d50>
   13204:	bl	11220 <printf@plt>
   13208:	b	130e4 <__assert_fail@plt+0x1b7c>
   1320c:	ldr	r1, [sp, #52]	; 0x34
   13210:	sub	r2, fp, #4
   13214:	mov	r3, r1
   13218:	ldr	r0, [sp, #12]
   1321c:	add	r1, sp, #28
   13220:	bl	138dc <__assert_fail@plt+0x2374>
   13224:	str	r0, [sp, #36]	; 0x24
   13228:	ldr	r3, [sp, #36]	; 0x24
   1322c:	cmp	r3, #0
   13230:	blt	13268 <__assert_fail@plt+0x1d00>
   13234:	ldr	r3, [sp, #36]	; 0x24
   13238:	ldr	r2, [sp, #44]	; 0x2c
   1323c:	add	r3, r3, r2
   13240:	str	r3, [sp, #44]	; 0x2c
   13244:	ldr	r3, [sp, #36]	; 0x24
   13248:	cmp	r3, #512	; 0x200
   1324c:	bne	1312c <__assert_fail@plt+0x1bc4>
   13250:	b	12f38 <__assert_fail@plt+0x19d0>
   13254:	mov	r0, #0
   13258:	bl	112d4 <alarm@plt>
   1325c:	ldr	r0, [pc, #88]	; 132bc <__assert_fail@plt+0x1d54>
   13260:	bl	11304 <perror@plt>
   13264:	b	1312c <__assert_fail@plt+0x1bc4>
   13268:	bl	1140c <__errno_location@plt>
   1326c:	ldr	r0, [r0]
   13270:	add	r0, r0, #100	; 0x64
   13274:	bl	12294 <__assert_fail@plt+0xd2c>
   13278:	b	1312c <__assert_fail@plt+0x1bc4>
   1327c:	andeq	ip, r2, ip, lsr #21
   13280:			; <UNDEFINED> instruction: 0x0001aab8
   13284:	andeq	sl, r1, r0, lsr #17
   13288:	andeq	r2, r1, r8, lsr #3
   1328c:	andeq	ip, r2, r0, asr #10
   13290:	andeq	ip, r2, r8, lsr #21
   13294:	andeq	ip, r2, r8, asr #14
   13298:	andeq	ip, r2, ip, asr #2
   1329c:	andeq	sl, r1, ip, asr #19
   132a0:	andeq	ip, r2, r4, ror #8
   132a4:	andeq	ip, r2, r4, ror r4
   132a8:	ldrdeq	sl, [r1], -r8
   132ac:			; <UNDEFINED> instruction: 0x0002cab4
   132b0:			; <UNDEFINED> instruction: 0x0001aabc
   132b4:	andeq	sl, r1, ip, ror r8
   132b8:	andeq	sl, r1, ip, ror #19
   132bc:			; <UNDEFINED> instruction: 0x0001a9bc
   132c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132c4:	sub	sp, sp, #28
   132c8:	cmp	r0, #1
   132cc:	str	r0, [sp, #20]
   132d0:	str	r1, [sp, #16]
   132d4:	movgt	r8, r0
   132d8:	ble	1350c <__assert_fail@plt+0x1fa4>
   132dc:	ldr	r6, [pc, #672]	; 13584 <__assert_fail@plt+0x201c>
   132e0:	ldr	r5, [sp, #16]
   132e4:	ldr	r3, [r6, #8]
   132e8:	cmp	r3, #0
   132ec:	beq	134a4 <__assert_fail@plt+0x1f3c>
   132f0:	ldr	sl, [pc, #656]	; 13588 <__assert_fail@plt+0x2020>
   132f4:	ldr	fp, [pc, #656]	; 1358c <__assert_fail@plt+0x2024>
   132f8:	mov	r4, #1
   132fc:	mov	r8, #58	; 0x3a
   13300:	b	13378 <__assert_fail@plt+0x1e10>
   13304:	mov	r0, r7
   13308:	bl	11c88 <__assert_fail@plt+0x720>
   1330c:	cmp	r0, #0
   13310:	bne	13364 <__assert_fail@plt+0x1dfc>
   13314:	ldr	r3, [sp, #20]
   13318:	cmp	r3, #3
   1331c:	ble	13408 <__assert_fail@plt+0x1ea0>
   13320:	mov	r0, r5
   13324:	bl	125bc <__assert_fail@plt+0x1054>
   13328:	mov	r1, #420	; 0x1a4
   1332c:	mov	r9, r0
   13330:	bl	11340 <creat64@plt>
   13334:	subs	r7, r0, #0
   13338:	blt	13480 <__assert_fail@plt+0x1f18>
   1333c:	ldr	r3, [r6, #4]
   13340:	cmp	r3, #0
   13344:	bne	1345c <__assert_fail@plt+0x1ef4>
   13348:	ldrh	r3, [r6, #144]	; 0x90
   1334c:	mov	r1, r5
   13350:	mov	r0, r7
   13354:	rev16	r3, r3
   13358:	mov	r2, sl
   1335c:	strh	r3, [r6, #18]
   13360:	bl	12ec4 <__assert_fail@plt+0x195c>
   13364:	ldr	r3, [sp, #20]
   13368:	add	r4, r4, #1
   1336c:	cmp	r3, r4
   13370:	ble	13454 <__assert_fail@plt+0x1eec>
   13374:	ldr	r5, [sp, #16]
   13378:	ldr	r7, [r5, r4, lsl #2]
   1337c:	mov	r1, r8
   13380:	mov	r0, r7
   13384:	bl	113f4 <strchr@plt>
   13388:	lsl	r2, r4, #2
   1338c:	subs	r9, r0, #0
   13390:	beq	13478 <__assert_fail@plt+0x1f10>
   13394:	cmp	r7, r9
   13398:	addeq	r5, r7, #1
   1339c:	beq	13314 <__assert_fail@plt+0x1dac>
   133a0:	ldrb	r3, [r7]
   133a4:	cmp	r3, #91	; 0x5b
   133a8:	movne	r3, #0
   133ac:	addne	r5, r9, #1
   133b0:	strbne	r3, [r9]
   133b4:	bne	13304 <__assert_fail@plt+0x1d9c>
   133b8:	mov	r0, r7
   133bc:	mov	r1, #93	; 0x5d
   133c0:	str	r2, [sp, #12]
   133c4:	bl	113f4 <strchr@plt>
   133c8:	cmp	r0, #0
   133cc:	beq	134d4 <__assert_fail@plt+0x1f6c>
   133d0:	ldrb	r3, [r0, #1]
   133d4:	mov	r1, #0
   133d8:	strb	r1, [r0]
   133dc:	cmp	r3, #58	; 0x3a
   133e0:	ldr	r2, [sp, #12]
   133e4:	ldr	r3, [sp, #16]
   133e8:	addne	r5, r0, #1
   133ec:	addeq	r5, r0, #2
   133f0:	ldr	r7, [r3, r2]
   133f4:	adds	r7, r7, #1
   133f8:	bne	13304 <__assert_fail@plt+0x1d9c>
   133fc:	ldr	r3, [sp, #20]
   13400:	cmp	r3, #3
   13404:	bgt	13320 <__assert_fail@plt+0x1db8>
   13408:	beq	13500 <__assert_fail@plt+0x1f98>
   1340c:	mov	r0, r5
   13410:	bl	125bc <__assert_fail@plt+0x1054>
   13414:	mov	r4, r0
   13418:	mov	r1, #420	; 0x1a4
   1341c:	mov	r0, r4
   13420:	bl	11340 <creat64@plt>
   13424:	subs	r7, r0, #0
   13428:	blt	13560 <__assert_fail@plt+0x1ff8>
   1342c:	ldr	r3, [r6, #4]
   13430:	cmp	r3, #0
   13434:	bne	1353c <__assert_fail@plt+0x1fd4>
   13438:	ldrh	r3, [r6, #144]	; 0x90
   1343c:	mov	r1, r5
   13440:	mov	r0, r7
   13444:	rev16	r3, r3
   13448:	ldr	r2, [pc, #312]	; 13588 <__assert_fail@plt+0x2020>
   1344c:	strh	r3, [r6, #18]
   13450:	bl	12ec4 <__assert_fail@plt+0x195c>
   13454:	add	sp, sp, #28
   13458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1345c:	ldr	r1, [fp]
   13460:	mov	r3, r9
   13464:	str	sl, [sp]
   13468:	mov	r2, r5
   1346c:	ldr	r0, [pc, #284]	; 13590 <__assert_fail@plt+0x2028>
   13470:	bl	11220 <printf@plt>
   13474:	b	13348 <__assert_fail@plt+0x1de0>
   13478:	mov	r5, r7
   1347c:	b	13314 <__assert_fail@plt+0x1dac>
   13480:	ldr	r3, [pc, #268]	; 13594 <__assert_fail@plt+0x202c>
   13484:	mov	r2, #6
   13488:	mov	r1, #1
   1348c:	ldr	r3, [r3]
   13490:	ldr	r0, [pc, #256]	; 13598 <__assert_fail@plt+0x2030>
   13494:	bl	11310 <fwrite@plt>
   13498:	mov	r0, r9
   1349c:	bl	11304 <perror@plt>
   134a0:	b	13364 <__assert_fail@plt+0x1dfc>
   134a4:	mov	r4, #1
   134a8:	mov	r7, r5
   134ac:	mov	r9, #58	; 0x3a
   134b0:	mov	r1, r9
   134b4:	ldr	r0, [r7, #4]!
   134b8:	bl	113f4 <strchr@plt>
   134bc:	add	r4, r4, #1
   134c0:	cmp	r0, #0
   134c4:	beq	134dc <__assert_fail@plt+0x1f74>
   134c8:	cmp	r8, r4
   134cc:	bgt	134b0 <__assert_fail@plt+0x1f48>
   134d0:	b	132f0 <__assert_fail@plt+0x1d88>
   134d4:	mov	r5, r9
   134d8:	b	13314 <__assert_fail@plt+0x1dac>
   134dc:	ldr	r4, [r5]
   134e0:	ldr	r0, [pc, #180]	; 1359c <__assert_fail@plt+0x2034>
   134e4:	mov	r1, r4
   134e8:	bl	11220 <printf@plt>
   134ec:	mov	r1, r4
   134f0:	ldr	r0, [pc, #168]	; 135a0 <__assert_fail@plt+0x2038>
   134f4:	bl	11220 <printf@plt>
   134f8:	add	sp, sp, #28
   134fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13500:	ldr	r3, [sp, #16]
   13504:	ldr	r4, [r3, #8]
   13508:	b	13418 <__assert_fail@plt+0x1eb0>
   1350c:	add	r3, sp, #16
   13510:	add	r2, sp, #20
   13514:	ldr	r1, [pc, #136]	; 135a4 <__assert_fail@plt+0x203c>
   13518:	ldr	r0, [pc, #136]	; 135a8 <__assert_fail@plt+0x2040>
   1351c:	bl	11bd8 <__assert_fail@plt+0x670>
   13520:	ldr	r8, [sp, #20]
   13524:	cmp	r8, #1
   13528:	bgt	132dc <__assert_fail@plt+0x1d74>
   1352c:	ldr	r3, [sp, #16]
   13530:	ldr	r0, [pc, #100]	; 1359c <__assert_fail@plt+0x2034>
   13534:	ldr	r4, [r3]
   13538:	b	134e4 <__assert_fail@plt+0x1f7c>
   1353c:	ldr	r1, [pc, #72]	; 1358c <__assert_fail@plt+0x2024>
   13540:	ldr	r2, [pc, #64]	; 13588 <__assert_fail@plt+0x2020>
   13544:	mov	r3, r4
   13548:	ldr	r1, [r1]
   1354c:	ldr	r0, [pc, #60]	; 13590 <__assert_fail@plt+0x2028>
   13550:	str	r2, [sp]
   13554:	mov	r2, r5
   13558:	bl	11220 <printf@plt>
   1355c:	b	13438 <__assert_fail@plt+0x1ed0>
   13560:	ldr	r3, [pc, #44]	; 13594 <__assert_fail@plt+0x202c>
   13564:	mov	r2, #6
   13568:	mov	r1, #1
   1356c:	ldr	r3, [r3]
   13570:	ldr	r0, [pc, #32]	; 13598 <__assert_fail@plt+0x2030>
   13574:	bl	11310 <fwrite@plt>
   13578:	mov	r0, r4
   1357c:	bl	11304 <perror@plt>
   13580:	b	13454 <__assert_fail@plt+0x1eec>
   13584:	andeq	ip, r2, r4, ror #8
   13588:	andeq	ip, r2, r4, asr #21
   1358c:	andeq	ip, r2, r0, asr #21
   13590:	andeq	sl, r1, r0, lsr fp
   13594:	andeq	ip, r2, r0, asr r4
   13598:	muleq	r1, r4, sl
   1359c:	ldrdeq	sl, [r1], -r8
   135a0:	andeq	sl, r1, r4, lsl #22
   135a4:	andeq	sl, r1, r8, asr #21
   135a8:	ldrdeq	sl, [r1], -r4
   135ac:	push	{r4, lr}
   135b0:	mov	r2, #0
   135b4:	ldr	r3, [pc, #48]	; 135ec <__assert_fail@plt+0x2084>
   135b8:	ldr	r0, [pc, #48]	; 135f0 <__assert_fail@plt+0x2088>
   135bc:	ldr	lr, [pc, #48]	; 135f4 <__assert_fail@plt+0x208c>
   135c0:	mvn	r4, #0
   135c4:	mvn	ip, #2
   135c8:	mvn	r1, #1
   135cc:	str	ip, [r0]
   135d0:	str	r1, [r0, #520]	; 0x208
   135d4:	str	r2, [r3]
   135d8:	str	r2, [r3, #4]
   135dc:	str	r2, [r3, #8]
   135e0:	str	r4, [lr]
   135e4:	add	r0, r0, #4
   135e8:	pop	{r4, pc}
   135ec:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   135f0:	andeq	ip, r2, ip, lsr #23
   135f4:	andeq	ip, r2, r8, lsl #8
   135f8:	push	{r4, r5, lr}
   135fc:	mov	r2, #0
   13600:	ldr	r3, [pc, #52]	; 1363c <__assert_fail@plt+0x20d4>
   13604:	ldr	r0, [pc, #52]	; 13640 <__assert_fail@plt+0x20d8>
   13608:	ldr	lr, [pc, #52]	; 13644 <__assert_fail@plt+0x20dc>
   1360c:	mov	r5, #1
   13610:	mvn	r4, #0
   13614:	mvn	ip, #2
   13618:	mvn	r1, #1
   1361c:	str	ip, [r0]
   13620:	str	r1, [r0, #520]	; 0x208
   13624:	str	r5, [r3, #8]
   13628:	str	r2, [r3]
   1362c:	str	r2, [r3, #4]
   13630:	str	r4, [lr]
   13634:	add	r0, r0, #4
   13638:	pop	{r4, r5, pc}
   1363c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13640:	andeq	ip, r2, ip, lsr #23
   13644:	andeq	ip, r2, r8, lsl #8
   13648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1364c:	sub	sp, sp, #20
   13650:	ldr	r5, [pc, #264]	; 13760 <__assert_fail@plt+0x21f8>
   13654:	ldr	sl, [pc, #264]	; 13764 <__assert_fail@plt+0x21fc>
   13658:	ldr	r3, [r5, #8]
   1365c:	str	r3, [sp, #4]
   13660:	lsl	r2, r3, #6
   13664:	add	r4, r2, r3
   13668:	str	r2, [sp, #8]
   1366c:	lsl	r4, r4, #3
   13670:	ldr	r3, [sl, r4]
   13674:	cmn	r3, #2
   13678:	beq	13684 <__assert_fail@plt+0x211c>
   1367c:	add	sp, sp, #20
   13680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13684:	cmp	r1, #0
   13688:	ldr	r3, [sp, #4]
   1368c:	add	r1, r4, #4
   13690:	clz	r3, r3
   13694:	lsr	r3, r3, #5
   13698:	str	r3, [r5, #8]
   1369c:	add	r9, sl, r1
   136a0:	beq	13748 <__assert_fail@plt+0x21e0>
   136a4:	add	r3, r9, #4
   136a8:	mov	r6, r0
   136ac:	str	r3, [sp, #12]
   136b0:	ldr	r8, [pc, #176]	; 13768 <__assert_fail@plt+0x2200>
   136b4:	add	r9, r9, #516	; 0x204
   136b8:	mov	r4, r3
   136bc:	mov	r7, #13
   136c0:	mov	fp, #0
   136c4:	b	136e8 <__assert_fail@plt+0x2180>
   136c8:	ldr	r3, [r8]
   136cc:	str	fp, [r5]
   136d0:	cmp	r3, #10
   136d4:	moveq	r3, #10
   136d8:	movne	r3, #0
   136dc:	strb	r3, [r4], #1
   136e0:	cmp	r9, r4
   136e4:	beq	1372c <__assert_fail@plt+0x21c4>
   136e8:	ldr	r3, [r5]
   136ec:	cmp	r3, #0
   136f0:	bne	136c8 <__assert_fail@plt+0x2160>
   136f4:	mov	r0, r6
   136f8:	bl	11550 <getc@plt>
   136fc:	mov	r3, r7
   13700:	cmn	r0, #1
   13704:	beq	1372c <__assert_fail@plt+0x21c4>
   13708:	cmp	r0, #13
   1370c:	cmpne	r0, #10
   13710:	uxtbne	r3, r0
   13714:	moveq	r2, #1
   13718:	streq	r0, [r8]
   1371c:	streq	r2, [r5]
   13720:	strb	r3, [r4], #1
   13724:	cmp	r9, r4
   13728:	bne	136e8 <__assert_fail@plt+0x2180>
   1372c:	ldmib	sp, {r2, r3}
   13730:	add	r8, r3, r2
   13734:	ldr	r3, [sp, #12]
   13738:	sub	r4, r4, r3
   1373c:	str	r4, [sl, r8, lsl #3]
   13740:	add	sp, sp, #20
   13744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13748:	bl	11460 <fileno@plt>
   1374c:	add	r1, r9, #4
   13750:	mov	r2, #512	; 0x200
   13754:	bl	1122c <read@plt>
   13758:	str	r0, [sl, r4]
   1375c:	b	1367c <__assert_fail@plt+0x2114>
   13760:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13764:	andeq	ip, r2, ip, lsr #23
   13768:	andeq	ip, r2, r8, lsl #8
   1376c:	ldr	ip, [pc, #100]	; 137d8 <__assert_fail@plt+0x2270>
   13770:	push	{r4, r5, r6, r7, r8, lr}
   13774:	mvn	lr, #1
   13778:	ldr	r3, [ip, #4]
   1377c:	clz	r5, r3
   13780:	lsr	r5, r5, #5
   13784:	ldr	r4, [pc, #80]	; 137dc <__assert_fail@plt+0x2274>
   13788:	lsl	r6, r5, #6
   1378c:	add	r7, r6, r5
   13790:	add	r3, r3, r3, lsl #6
   13794:	lsl	r7, r7, #3
   13798:	str	lr, [r4, r3, lsl #3]
   1379c:	ldr	r3, [r4, r7]
   137a0:	mov	r8, r1
   137a4:	cmp	r3, lr
   137a8:	str	r5, [ip, #4]
   137ac:	beq	137c8 <__assert_fail@plt+0x2260>
   137b0:	add	r5, r6, r5
   137b4:	mov	r0, r3
   137b8:	add	r4, r4, r5, lsl #3
   137bc:	add	r4, r4, #4
   137c0:	str	r4, [r8]
   137c4:	pop	{r4, r5, r6, r7, r8, pc}
   137c8:	mov	r1, r2
   137cc:	bl	13648 <__assert_fail@plt+0x20e0>
   137d0:	ldr	r3, [r4, r7]
   137d4:	b	137b0 <__assert_fail@plt+0x2248>
   137d8:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   137dc:	andeq	ip, r2, ip, lsr #23
   137e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   137e4:	sub	sp, sp, #8
   137e8:	ldr	lr, [pc, #224]	; 138d0 <__assert_fail@plt+0x2368>
   137ec:	ldr	ip, [pc, #224]	; 138d4 <__assert_fail@plt+0x236c>
   137f0:	ldr	r3, [lr, #8]
   137f4:	add	r2, r3, r3, lsl #6
   137f8:	lsl	r2, r2, #3
   137fc:	ldr	r9, [ip, r2]
   13800:	cmn	r9, #1
   13804:	blt	138a0 <__assert_fail@plt+0x2338>
   13808:	clz	r3, r3
   1380c:	mvn	r4, #1
   13810:	lsr	r3, r3, #5
   13814:	add	r5, ip, r2
   13818:	cmp	r9, #0
   1381c:	str	r3, [lr, #8]
   13820:	str	r4, [ip, r2]
   13824:	add	r5, r5, #8
   13828:	ble	138c8 <__assert_fail@plt+0x2360>
   1382c:	cmp	r1, #0
   13830:	beq	138b0 <__assert_fail@plt+0x2348>
   13834:	ldr	r7, [pc, #156]	; 138d8 <__assert_fail@plt+0x2370>
   13838:	mov	r6, r0
   1383c:	add	r8, r5, r9
   13840:	ldr	r4, [r7]
   13844:	mov	sl, #1
   13848:	cmp	r4, #13
   1384c:	ldrb	r4, [r5], #1
   13850:	bne	13864 <__assert_fail@plt+0x22fc>
   13854:	cmp	r4, #10
   13858:	beq	13888 <__assert_fail@plt+0x2320>
   1385c:	cmp	r4, #0
   13860:	beq	13870 <__assert_fail@plt+0x2308>
   13864:	mov	r1, r6
   13868:	mov	r0, r4
   1386c:	bl	114d8 <putc@plt>
   13870:	cmp	r5, r8
   13874:	str	r4, [r7]
   13878:	bne	13848 <__assert_fail@plt+0x22e0>
   1387c:	mov	r0, r9
   13880:	add	sp, sp, #8
   13884:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13888:	str	sl, [sp]
   1388c:	mvn	r2, #0
   13890:	mvn	r3, #0
   13894:	mov	r0, r6
   13898:	bl	11484 <fseeko64@plt>
   1389c:	b	13864 <__assert_fail@plt+0x22fc>
   138a0:	mov	r9, #0
   138a4:	mov	r0, r9
   138a8:	add	sp, sp, #8
   138ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138b0:	bl	11460 <fileno@plt>
   138b4:	mov	r2, r9
   138b8:	mov	r1, r5
   138bc:	add	sp, sp, #8
   138c0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   138c4:	b	11454 <write@plt>
   138c8:	mvn	r9, #0
   138cc:	b	1387c <__assert_fail@plt+0x2314>
   138d0:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   138d4:	andeq	ip, r2, ip, lsr #23
   138d8:	andeq	ip, r2, r8, lsl #8
   138dc:	push	{r4, r5, r6, r7, r8, lr}
   138e0:	mov	r6, r2
   138e4:	ldr	r7, [pc, #100]	; 13950 <__assert_fail@plt+0x23e8>
   138e8:	ldr	r5, [pc, #100]	; 13954 <__assert_fail@plt+0x23ec>
   138ec:	ldr	ip, [r7, #4]
   138f0:	clz	lr, ip
   138f4:	lsr	lr, lr, #5
   138f8:	add	r4, ip, ip, lsl #6
   138fc:	lsl	ip, lr, #6
   13900:	add	r2, ip, lr
   13904:	str	r6, [r5, r4, lsl #3]
   13908:	ldr	r2, [r5, r2, lsl #3]
   1390c:	mov	r4, r1
   13910:	cmn	r2, #2
   13914:	str	lr, [r7, #4]
   13918:	beq	1392c <__assert_fail@plt+0x23c4>
   1391c:	mov	r1, r3
   13920:	bl	137e0 <__assert_fail@plt+0x2278>
   13924:	ldr	lr, [r7, #4]
   13928:	lsl	ip, lr, #6
   1392c:	add	ip, ip, lr
   13930:	mvn	r2, #2
   13934:	lsl	ip, ip, #3
   13938:	add	r3, ip, #4
   1393c:	add	r3, r5, r3
   13940:	str	r2, [r5, ip]
   13944:	mov	r0, r6
   13948:	str	r3, [r4]
   1394c:	pop	{r4, r5, r6, r7, r8, pc}
   13950:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   13954:	andeq	ip, r2, ip, lsr #23
   13958:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1395c:	mov	r4, #0
   13960:	sub	sp, sp, #664	; 0x298
   13964:	ldr	r7, [pc, #96]	; 139cc <__assert_fail@plt+0x2464>
   13968:	mov	r5, r0
   1396c:	mov	r6, r4
   13970:	mov	sl, #128	; 0x80
   13974:	add	r9, sp, #20
   13978:	add	r8, sp, #16
   1397c:	b	13994 <__assert_fail@plt+0x242c>
   13980:	str	r8, [sp, #4]
   13984:	str	r9, [sp]
   13988:	add	r4, r4, #1
   1398c:	str	sl, [sp, #16]
   13990:	bl	112c8 <recvfrom@plt>
   13994:	add	r2, sp, #12
   13998:	mov	r1, r7
   1399c:	mov	r0, r5
   139a0:	bl	18210 <argp_parse@@Base+0xfa0>
   139a4:	ldr	r2, [sp, #12]
   139a8:	mov	r3, r6
   139ac:	cmp	r2, #0
   139b0:	add	r1, sp, #148	; 0x94
   139b4:	mov	r2, #516	; 0x204
   139b8:	mov	r0, r5
   139bc:	bne	13980 <__assert_fail@plt+0x2418>
   139c0:	mov	r0, r4
   139c4:	add	sp, sp, #664	; 0x298
   139c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139cc:	andeq	r5, r0, fp, lsl r4
   139d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139d4:	sub	sp, sp, #20
   139d8:	ldr	r5, [r0, #4]
   139dc:	ldr	r4, [r0]
   139e0:	cmp	r5, #0
   139e4:	ldr	r7, [r0, #8]
   139e8:	beq	13ac0 <__assert_fail@plt+0x2558>
   139ec:	stmib	sp, {r1, r2, r3}
   139f0:	mov	r6, #1
   139f4:	str	r4, [sp]
   139f8:	mov	r8, #0
   139fc:	b	13a1c <__assert_fail@plt+0x24b4>
   13a00:	mov	r3, r6
   13a04:	subs	r5, r5, #1
   13a08:	moveq	r3, #0
   13a0c:	andne	r3, r3, #1
   13a10:	cmp	r3, #0
   13a14:	add	r4, r4, #24
   13a18:	beq	13a88 <__assert_fail@plt+0x2520>
   13a1c:	ldr	fp, [r4, #12]
   13a20:	ands	r9, fp, #8
   13a24:	movne	r3, r6
   13a28:	movne	r9, r8
   13a2c:	bne	13a04 <__assert_fail@plt+0x249c>
   13a30:	ldr	sl, [r4, #4]
   13a34:	sub	r3, sl, #1
   13a38:	cmp	r3, #254	; 0xfe
   13a3c:	bhi	13a00 <__assert_fail@plt+0x2498>
   13a40:	bl	113c4 <__ctype_b_loc@plt>
   13a44:	lsl	r3, sl, #1
   13a48:	ldr	r1, [r0]
   13a4c:	ldrh	r3, [r1, r3]
   13a50:	tst	r3, #16384	; 0x4000
   13a54:	beq	13a00 <__assert_fail@plt+0x2498>
   13a58:	ldrb	r3, [r7]
   13a5c:	cmp	r3, sl
   13a60:	bne	13a00 <__assert_fail@plt+0x2498>
   13a64:	ldr	r3, [sp]
   13a68:	tst	fp, #4
   13a6c:	moveq	r3, r4
   13a70:	tst	fp, #2
   13a74:	str	r3, [sp]
   13a78:	movne	r3, r6
   13a7c:	beq	13a98 <__assert_fail@plt+0x2530>
   13a80:	add	r7, r7, #1
   13a84:	b	13a04 <__assert_fail@plt+0x249c>
   13a88:	mov	sl, r9
   13a8c:	mov	r0, sl
   13a90:	add	sp, sp, #20
   13a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a98:	ldr	r3, [sp, #12]
   13a9c:	ldr	r2, [sp, #8]
   13aa0:	ldr	r1, [sp]
   13aa4:	mov	r0, r4
   13aa8:	ldr	ip, [sp, #4]
   13aac:	blx	ip
   13ab0:	clz	r3, r0
   13ab4:	mov	r9, r0
   13ab8:	lsr	r3, r3, #5
   13abc:	b	13a80 <__assert_fail@plt+0x2518>
   13ac0:	mov	sl, r5
   13ac4:	b	13a8c <__assert_fail@plt+0x2524>
   13ac8:	push	{r4, r5, r6, lr}
   13acc:	ldr	r4, [r0, #12]
   13ad0:	ands	r4, r4, #8
   13ad4:	movne	r4, #0
   13ad8:	bne	13b04 <__assert_fail@plt+0x259c>
   13adc:	ldr	r5, [r0, #4]
   13ae0:	sub	r3, r5, #1
   13ae4:	cmp	r3, #254	; 0xfe
   13ae8:	bhi	13b04 <__assert_fail@plt+0x259c>
   13aec:	bl	113c4 <__ctype_b_loc@plt>
   13af0:	lsl	r3, r5, #1
   13af4:	ldr	r2, [r0]
   13af8:	ldrh	r3, [r2, r3]
   13afc:	tst	r3, #16384	; 0x4000
   13b00:	movne	r4, r5
   13b04:	mov	r0, r4
   13b08:	pop	{r4, r5, r6, pc}
   13b0c:	push	{r4, lr}
   13b10:	mov	r4, r0
   13b14:	bl	113c4 <__ctype_b_loc@plt>
   13b18:	ldr	r2, [r4]
   13b1c:	ldr	lr, [r0]
   13b20:	b	13b28 <__assert_fail@plt+0x25c0>
   13b24:	str	r2, [r4]
   13b28:	ldrb	r1, [r2]
   13b2c:	mov	r3, r2
   13b30:	add	r2, r2, #1
   13b34:	lsl	r0, r1, #1
   13b38:	ldrh	ip, [lr, r0]
   13b3c:	tst	ip, #8192	; 0x2000
   13b40:	bne	13b24 <__assert_fail@plt+0x25bc>
   13b44:	subs	r0, r1, #45	; 0x2d
   13b48:	movne	r0, #1
   13b4c:	cmp	r1, #0
   13b50:	popeq	{r4, pc}
   13b54:	tst	ip, #8
   13b58:	popne	{r4, pc}
   13b5c:	add	r3, r3, #1
   13b60:	str	r3, [r4]
   13b64:	ldrb	r2, [r3]
   13b68:	cmp	r2, #0
   13b6c:	lsl	r2, r2, #1
   13b70:	popeq	{r4, pc}
   13b74:	ldrh	r2, [lr, r2]
   13b78:	tst	r2, #8
   13b7c:	beq	13b5c <__assert_fail@plt+0x25f4>
   13b80:	pop	{r4, pc}
   13b84:	push	{r4, r5, r6, lr}
   13b88:	mov	r5, r0
   13b8c:	ldr	r0, [r0, #12]
   13b90:	cmp	r0, #0
   13b94:	beq	13ba8 <__assert_fail@plt+0x2640>
   13b98:	ldr	r4, [r0, #24]
   13b9c:	bl	18108 <argp_parse@@Base+0xe98>
   13ba0:	subs	r0, r4, #0
   13ba4:	bne	13b98 <__assert_fail@plt+0x2630>
   13ba8:	ldr	r3, [r5, #4]
   13bac:	cmp	r3, #0
   13bb0:	beq	13bc4 <__assert_fail@plt+0x265c>
   13bb4:	ldr	r0, [r5]
   13bb8:	bl	18108 <argp_parse@@Base+0xe98>
   13bbc:	ldr	r0, [r5, #8]
   13bc0:	bl	18108 <argp_parse@@Base+0xe98>
   13bc4:	mov	r0, r5
   13bc8:	pop	{r4, r5, r6, lr}
   13bcc:	b	18108 <argp_parse@@Base+0xe98>
   13bd0:	push	{r4, r5, r6, r7, r8, lr}
   13bd4:	mov	r5, r1
   13bd8:	ldr	r3, [r0, #28]
   13bdc:	ldr	r1, [r0, #24]
   13be0:	ldr	r2, [r0, #16]
   13be4:	sub	r3, r3, r1
   13be8:	cmp	r3, r2
   13bec:	mov	r4, r0
   13bf0:	bhi	13c5c <__assert_fail@plt+0x26f4>
   13bf4:	ldr	r1, [r4, #20]
   13bf8:	mov	r6, #32
   13bfc:	cmp	r1, #0
   13c00:	subge	r5, r5, r1
   13c04:	mov	r7, #1
   13c08:	cmp	r5, #0
   13c0c:	sub	r5, r5, #1
   13c10:	ble	13c3c <__assert_fail@plt+0x26d4>
   13c14:	ldr	r3, [r4, #28]
   13c18:	ldr	r2, [r4, #32]
   13c1c:	cmp	r3, r2
   13c20:	bcs	13c40 <__assert_fail@plt+0x26d8>
   13c24:	add	r2, r3, #1
   13c28:	cmp	r5, #0
   13c2c:	str	r2, [r4, #28]
   13c30:	sub	r5, r5, #1
   13c34:	strb	r6, [r3]
   13c38:	bgt	13c14 <__assert_fail@plt+0x26ac>
   13c3c:	pop	{r4, r5, r6, r7, r8, pc}
   13c40:	mov	r1, r7
   13c44:	mov	r0, r4
   13c48:	bl	19438 <argp_parse@@Base+0x21c8>
   13c4c:	cmp	r0, #0
   13c50:	beq	13c08 <__assert_fail@plt+0x26a0>
   13c54:	ldr	r3, [r4, #28]
   13c58:	b	13c24 <__assert_fail@plt+0x26bc>
   13c5c:	bl	18da8 <argp_parse@@Base+0x1b38>
   13c60:	b	13bf4 <__assert_fail@plt+0x268c>
   13c64:	push	{r4, r5, r6, lr}
   13c68:	subs	r4, r2, #0
   13c6c:	popeq	{r4, r5, r6, pc}
   13c70:	ldr	ip, [r4, #20]
   13c74:	cmp	ip, #0
   13c78:	popeq	{r4, r5, r6, pc}
   13c7c:	mov	r6, r1
   13c80:	mov	r5, r0
   13c84:	mov	r1, r3
   13c88:	mov	r0, r4
   13c8c:	bl	17fac <argp_parse@@Base+0xd3c>
   13c90:	ldr	r3, [r4, #20]
   13c94:	mov	r1, r5
   13c98:	mov	r2, r0
   13c9c:	mov	r0, r6
   13ca0:	pop	{r4, r5, r6, lr}
   13ca4:	bx	r3
   13ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cac:	mov	r5, r2
   13cb0:	sub	sp, sp, #12
   13cb4:	mov	r2, r1
   13cb8:	ldr	r3, [r5, #16]
   13cbc:	ldr	r1, [pc, #488]	; 13eac <__assert_fail@plt+0x2944>
   13cc0:	mov	r8, r0
   13cc4:	bl	13c64 <__assert_fail@plt+0x26fc>
   13cc8:	subs	r6, r0, #0
   13ccc:	beq	13dd8 <__assert_fail@plt+0x2870>
   13cd0:	ldrb	r3, [r6]
   13cd4:	cmp	r3, #0
   13cd8:	beq	13dcc <__assert_fail@plt+0x2864>
   13cdc:	ldr	r3, [r5, #8]
   13ce0:	ldr	r3, [r3]
   13ce4:	cmp	r3, #0
   13ce8:	beq	13d10 <__assert_fail@plt+0x27a8>
   13cec:	ldr	r4, [r5, #4]
   13cf0:	ldr	r3, [r4, #28]
   13cf4:	ldr	r2, [r4, #32]
   13cf8:	cmp	r3, r2
   13cfc:	bcs	13e90 <__assert_fail@plt+0x2928>
   13d00:	add	r1, r3, #1
   13d04:	mov	r2, #10
   13d08:	str	r1, [r4, #28]
   13d0c:	strb	r2, [r3]
   13d10:	ldr	sl, [pc, #408]	; 13eb0 <__assert_fail@plt+0x2948>
   13d14:	ldr	r0, [r5, #4]
   13d18:	ldr	r1, [sl, #24]
   13d1c:	bl	13bd0 <__assert_fail@plt+0x2668>
   13d20:	ldr	r4, [r5, #4]
   13d24:	ldr	r9, [sl, #24]
   13d28:	ldr	r7, [r4, #28]
   13d2c:	ldr	r3, [r4, #24]
   13d30:	ldr	r2, [r4, #16]
   13d34:	sub	r3, r7, r3
   13d38:	cmp	r3, r2
   13d3c:	strls	r9, [r4, #4]
   13d40:	movls	fp, r4
   13d44:	bhi	13e14 <__assert_fail@plt+0x28ac>
   13d48:	str	r9, [fp, #12]
   13d4c:	mov	r0, r6
   13d50:	bl	113e8 <strlen@plt>
   13d54:	subs	r9, r0, #0
   13d58:	beq	13d90 <__assert_fail@plt+0x2828>
   13d5c:	ldr	r2, [r4, #32]
   13d60:	add	r3, r7, r9
   13d64:	cmp	r2, r3
   13d68:	bcc	13df8 <__assert_fail@plt+0x2890>
   13d6c:	mov	r2, r9
   13d70:	mov	r0, r7
   13d74:	mov	r1, r6
   13d78:	bl	11298 <memcpy@plt>
   13d7c:	ldr	r3, [r4, #28]
   13d80:	add	r9, r3, r9
   13d84:	str	r9, [r4, #28]
   13d88:	ldr	r4, [r5, #4]
   13d8c:	ldr	r7, [r4, #28]
   13d90:	ldr	r3, [r4, #24]
   13d94:	ldr	r2, [r4, #16]
   13d98:	sub	r3, r7, r3
   13d9c:	cmp	r3, r2
   13da0:	movls	r9, r4
   13da4:	bhi	13e60 <__assert_fail@plt+0x28f8>
   13da8:	ldr	r2, [r9, #32]
   13dac:	mov	r3, #0
   13db0:	cmp	r2, r7
   13db4:	str	r3, [r4, #4]
   13db8:	bls	13e74 <__assert_fail@plt+0x290c>
   13dbc:	add	r2, r7, #1
   13dc0:	mov	r3, #10
   13dc4:	str	r2, [r9, #28]
   13dc8:	strb	r3, [r7]
   13dcc:	ldr	r3, [r5, #8]
   13dd0:	mov	r2, #1
   13dd4:	str	r2, [r3, #4]
   13dd8:	cmp	r8, r6
   13ddc:	beq	13df0 <__assert_fail@plt+0x2888>
   13de0:	mov	r0, r6
   13de4:	add	sp, sp, #12
   13de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dec:	b	18108 <argp_parse@@Base+0xe98>
   13df0:	add	sp, sp, #12
   13df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df8:	mov	r1, r9
   13dfc:	mov	r0, r4
   13e00:	bl	19438 <argp_parse@@Base+0x21c8>
   13e04:	cmp	r0, #0
   13e08:	beq	13d88 <__assert_fail@plt+0x2820>
   13e0c:	ldr	r7, [r4, #28]
   13e10:	b	13d6c <__assert_fail@plt+0x2804>
   13e14:	mov	r0, r4
   13e18:	str	r9, [sp, #4]
   13e1c:	bl	18da8 <argp_parse@@Base+0x1b38>
   13e20:	ldr	fp, [r5, #4]
   13e24:	ldr	r3, [sp, #4]
   13e28:	ldr	r9, [sl, #24]
   13e2c:	ldr	r7, [fp, #28]
   13e30:	ldr	r2, [fp, #24]
   13e34:	ldr	r1, [fp, #16]
   13e38:	sub	r2, r7, r2
   13e3c:	cmp	r2, r1
   13e40:	str	r3, [r4, #4]
   13e44:	movls	r4, fp
   13e48:	bls	13d48 <__assert_fail@plt+0x27e0>
   13e4c:	mov	r0, fp
   13e50:	bl	18da8 <argp_parse@@Base+0x1b38>
   13e54:	ldr	r4, [r5, #4]
   13e58:	ldr	r7, [r4, #28]
   13e5c:	b	13d48 <__assert_fail@plt+0x27e0>
   13e60:	mov	r0, r4
   13e64:	bl	18da8 <argp_parse@@Base+0x1b38>
   13e68:	ldr	r9, [r5, #4]
   13e6c:	ldr	r7, [r9, #28]
   13e70:	b	13da8 <__assert_fail@plt+0x2840>
   13e74:	mov	r1, #1
   13e78:	mov	r0, r9
   13e7c:	bl	19438 <argp_parse@@Base+0x21c8>
   13e80:	cmp	r0, #0
   13e84:	beq	13dcc <__assert_fail@plt+0x2864>
   13e88:	ldr	r7, [r9, #28]
   13e8c:	b	13dbc <__assert_fail@plt+0x2854>
   13e90:	mov	r1, #1
   13e94:	mov	r0, r4
   13e98:	bl	19438 <argp_parse@@Base+0x21c8>
   13e9c:	cmp	r0, #0
   13ea0:	beq	13d10 <__assert_fail@plt+0x27a8>
   13ea4:	ldr	r3, [r4, #28]
   13ea8:	b	13d00 <__assert_fail@plt+0x2798>
   13eac:	andeq	r0, r0, #3
   13eb0:	andeq	ip, r2, ip, lsl #8
   13eb4:	ldr	r3, [r1, #12]
   13eb8:	push	{r4, r5, r6, r7, r8, lr}
   13ebc:	cmp	r3, #0
   13ec0:	mov	r4, r1
   13ec4:	mov	r6, r0
   13ec8:	beq	13fb0 <__assert_fail@plt+0x2a48>
   13ecc:	ldr	r3, [r1, #8]
   13ed0:	ldr	r2, [r1]
   13ed4:	ldr	r7, [r3]
   13ed8:	ldr	r3, [r3, #4]
   13edc:	ldr	r5, [r2, #16]
   13ee0:	cmp	r3, #0
   13ee4:	cmpne	r7, #0
   13ee8:	beq	13f20 <__assert_fail@plt+0x29b8>
   13eec:	ldr	r2, [r2, #12]
   13ef0:	ldr	r3, [r7, #12]
   13ef4:	cmp	r2, r3
   13ef8:	beq	13f20 <__assert_fail@plt+0x29b8>
   13efc:	ldr	r8, [r1, #4]
   13f00:	ldr	r3, [r8, #28]
   13f04:	ldr	r2, [r8, #32]
   13f08:	cmp	r3, r2
   13f0c:	bcs	14040 <__assert_fail@plt+0x2ad8>
   13f10:	add	r1, r3, #1
   13f14:	mov	r2, #10
   13f18:	str	r1, [r8, #28]
   13f1c:	strb	r2, [r3]
   13f20:	cmp	r5, #0
   13f24:	beq	1400c <__assert_fail@plt+0x2aa4>
   13f28:	ldr	r0, [r5]
   13f2c:	cmp	r0, #0
   13f30:	beq	1400c <__assert_fail@plt+0x2aa4>
   13f34:	ldrb	r3, [r0]
   13f38:	cmp	r3, #0
   13f3c:	beq	1400c <__assert_fail@plt+0x2aa4>
   13f40:	cmp	r7, #0
   13f44:	beq	13f74 <__assert_fail@plt+0x2a0c>
   13f48:	ldr	r3, [r7, #16]
   13f4c:	cmp	r5, r3
   13f50:	beq	1400c <__assert_fail@plt+0x2aa4>
   13f54:	cmp	r3, #0
   13f58:	beq	13f74 <__assert_fail@plt+0x2a0c>
   13f5c:	ldr	r3, [r3, #12]
   13f60:	cmp	r3, #0
   13f64:	cmpne	r5, r3
   13f68:	bne	13f5c <__assert_fail@plt+0x29f4>
   13f6c:	cmp	r5, r3
   13f70:	beq	1400c <__assert_fail@plt+0x2aa4>
   13f74:	ldr	r3, [r4, #4]
   13f78:	ldr	r1, [r5, #16]
   13f7c:	mov	r2, r4
   13f80:	ldr	r7, [r3, #12]
   13f84:	bl	13ca8 <__assert_fail@plt+0x2740>
   13f88:	ldr	r5, [r4, #4]
   13f8c:	mov	r0, r5
   13f90:	ldr	r3, [r5, #28]
   13f94:	ldr	r1, [r5, #24]
   13f98:	ldr	r2, [r5, #16]
   13f9c:	sub	r3, r3, r1
   13fa0:	cmp	r3, r2
   13fa4:	bhi	14034 <__assert_fail@plt+0x2acc>
   13fa8:	str	r7, [r5, #12]
   13fac:	b	14010 <__assert_fail@plt+0x2aa8>
   13fb0:	ldr	r5, [r1, #4]
   13fb4:	ldr	r3, [r5, #28]
   13fb8:	ldr	r1, [r5, #32]
   13fbc:	add	r2, r3, #2
   13fc0:	cmp	r1, r2
   13fc4:	bcc	13ff0 <__assert_fail@plt+0x2a88>
   13fc8:	ldr	r2, [pc, #140]	; 1405c <__assert_fail@plt+0x2af4>
   13fcc:	mov	r1, r6
   13fd0:	ldrh	r2, [r2]
   13fd4:	strh	r2, [r3]
   13fd8:	ldr	r3, [r5, #28]
   13fdc:	ldr	r0, [r4, #4]
   13fe0:	add	r3, r3, #2
   13fe4:	str	r3, [r5, #28]
   13fe8:	pop	{r4, r5, r6, r7, r8, lr}
   13fec:	b	13bd0 <__assert_fail@plt+0x2668>
   13ff0:	mov	r1, #2
   13ff4:	mov	r0, r5
   13ff8:	bl	19438 <argp_parse@@Base+0x21c8>
   13ffc:	cmp	r0, #0
   14000:	beq	14024 <__assert_fail@plt+0x2abc>
   14004:	ldr	r3, [r5, #28]
   14008:	b	13fc8 <__assert_fail@plt+0x2a60>
   1400c:	ldr	r0, [r4, #4]
   14010:	mov	r3, #0
   14014:	str	r3, [r4, #12]
   14018:	mov	r1, r6
   1401c:	pop	{r4, r5, r6, r7, r8, lr}
   14020:	b	13bd0 <__assert_fail@plt+0x2668>
   14024:	ldr	r0, [r4, #4]
   14028:	mov	r1, r6
   1402c:	pop	{r4, r5, r6, r7, r8, lr}
   14030:	b	13bd0 <__assert_fail@plt+0x2668>
   14034:	bl	18da8 <argp_parse@@Base+0x1b38>
   14038:	ldr	r0, [r4, #4]
   1403c:	b	13fa8 <__assert_fail@plt+0x2a40>
   14040:	mov	r1, #1
   14044:	mov	r0, r8
   14048:	bl	19438 <argp_parse@@Base+0x21c8>
   1404c:	cmp	r0, #0
   14050:	beq	13f20 <__assert_fail@plt+0x29b8>
   14054:	ldr	r3, [r8, #28]
   14058:	b	13f10 <__assert_fail@plt+0x29a8>
   1405c:	andeq	sl, r1, r0, asr #26
   14060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14064:	mov	r7, r3
   14068:	ldr	sl, [r0, #12]
   1406c:	sub	sp, sp, #36	; 0x24
   14070:	ldr	r3, [r0, #16]
   14074:	cmp	sl, #0
   14078:	mov	fp, r0
   1407c:	mov	r6, r2
   14080:	str	r3, [sp, #16]
   14084:	mov	r9, r1
   14088:	ldr	r8, [sp, #72]	; 0x48
   1408c:	ldr	r5, [sp, #76]	; 0x4c
   14090:	beq	14460 <__assert_fail@plt+0x2ef8>
   14094:	mov	r1, #11
   14098:	mov	r0, sl
   1409c:	bl	113f4 <strchr@plt>
   140a0:	cmp	r6, #0
   140a4:	bne	1437c <__assert_fail@plt+0x2e14>
   140a8:	cmp	r0, #0
   140ac:	ldr	r3, [fp, #20]
   140b0:	beq	145b8 <__assert_fail@plt+0x3050>
   140b4:	cmp	r3, #0
   140b8:	sub	r4, r0, sl
   140bc:	beq	14550 <__assert_fail@plt+0x2fe8>
   140c0:	cmp	r4, #0
   140c4:	beq	144f0 <__assert_fail@plt+0x2f88>
   140c8:	mov	r0, sl
   140cc:	mov	r1, r4
   140d0:	bl	1128c <strndup@plt>
   140d4:	mov	r3, #1
   140d8:	str	r3, [sp, #24]
   140dc:	mov	sl, r0
   140e0:	adds	r3, r0, #0
   140e4:	movne	r3, #1
   140e8:	str	r3, [sp, #20]
   140ec:	mov	r1, r9
   140f0:	mov	r0, fp
   140f4:	bl	17fac <argp_parse@@Base+0xd3c>
   140f8:	ldr	r3, [fp, #20]
   140fc:	str	r0, [sp, #12]
   14100:	ldr	r0, [pc, #1272]	; 14600 <__assert_fail@plt+0x3098>
   14104:	ldr	r2, [sp, #12]
   14108:	mov	r1, sl
   1410c:	blx	r3
   14110:	subs	r3, r0, #0
   14114:	beq	144a0 <__assert_fail@plt+0x2f38>
   14118:	cmp	r7, #0
   1411c:	beq	14140 <__assert_fail@plt+0x2bd8>
   14120:	ldr	r2, [r5, #28]
   14124:	ldr	r1, [r5, #32]
   14128:	cmp	r2, r1
   1412c:	bcs	144a8 <__assert_fail@plt+0x2f40>
   14130:	add	r0, r2, #1
   14134:	mov	r1, #10
   14138:	str	r0, [r5, #28]
   1413c:	strb	r1, [r2]
   14140:	ldr	r2, [sp, #24]
   14144:	cmp	r3, sl
   14148:	movne	r2, #0
   1414c:	andeq	r2, r2, #1
   14150:	cmp	r2, #0
   14154:	beq	143c0 <__assert_fail@plt+0x2e58>
   14158:	ldr	r0, [r5, #28]
   1415c:	ldr	r1, [r5, #32]
   14160:	add	r2, r0, r4
   14164:	cmp	r1, r2
   14168:	bcs	14420 <__assert_fail@plt+0x2eb8>
   1416c:	mov	r1, r4
   14170:	mov	r0, r5
   14174:	str	r3, [sp, #24]
   14178:	bl	19438 <argp_parse@@Base+0x21c8>
   1417c:	ldr	r3, [sp, #24]
   14180:	cmp	r0, #0
   14184:	bne	1441c <__assert_fail@plt+0x2eb4>
   14188:	ldr	r4, [r5, #28]
   1418c:	ldr	r1, [r5, #24]
   14190:	ldr	r2, [r5, #16]
   14194:	sub	r4, r4, r1
   14198:	cmp	r4, r2
   1419c:	bhi	14444 <__assert_fail@plt+0x2edc>
   141a0:	ldr	r2, [r5, #20]
   141a4:	ldr	r1, [r5, #4]
   141a8:	bic	r2, r2, r2, asr #31
   141ac:	cmp	r1, r2
   141b0:	bcs	141d4 <__assert_fail@plt+0x2c6c>
   141b4:	ldr	r2, [r5, #28]
   141b8:	ldr	r1, [r5, #32]
   141bc:	cmp	r2, r1
   141c0:	bcs	144cc <__assert_fail@plt+0x2f64>
   141c4:	add	r0, r2, #1
   141c8:	mov	r1, #10
   141cc:	str	r0, [r5, #28]
   141d0:	strb	r1, [r2]
   141d4:	cmp	r3, sl
   141d8:	moveq	r4, #1
   141dc:	beq	141ec <__assert_fail@plt+0x2c84>
   141e0:	mov	r0, r3
   141e4:	bl	18108 <argp_parse@@Base+0xe98>
   141e8:	mov	r4, #1
   141ec:	ldr	r3, [sp, #20]
   141f0:	cmp	r3, #0
   141f4:	beq	1420c <__assert_fail@plt+0x2ca4>
   141f8:	ldr	r3, [fp, #20]
   141fc:	cmp	r3, #0
   14200:	beq	142f0 <__assert_fail@plt+0x2d88>
   14204:	mov	r0, sl
   14208:	bl	18108 <argp_parse@@Base+0xe98>
   1420c:	cmp	r6, #0
   14210:	beq	142f0 <__assert_fail@plt+0x2d88>
   14214:	ldr	r3, [fp, #20]
   14218:	cmp	r3, #0
   1421c:	beq	142f0 <__assert_fail@plt+0x2d88>
   14220:	ldr	r2, [sp, #12]
   14224:	mov	r1, #0
   14228:	ldr	r0, [pc, #980]	; 14604 <__assert_fail@plt+0x309c>
   1422c:	blx	r3
   14230:	subs	sl, r0, #0
   14234:	beq	142f0 <__assert_fail@plt+0x2d88>
   14238:	orrs	r3, r7, r4
   1423c:	beq	14260 <__assert_fail@plt+0x2cf8>
   14240:	ldr	r3, [r5, #28]
   14244:	ldr	r2, [r5, #32]
   14248:	cmp	r3, r2
   1424c:	bcs	14588 <__assert_fail@plt+0x3020>
   14250:	add	r1, r3, #1
   14254:	mov	r2, #10
   14258:	str	r1, [r5, #28]
   1425c:	strb	r2, [r3]
   14260:	mov	r0, sl
   14264:	bl	113e8 <strlen@plt>
   14268:	subs	r4, r0, #0
   1426c:	beq	14298 <__assert_fail@plt+0x2d30>
   14270:	ldr	r0, [r5, #28]
   14274:	ldr	r2, [r5, #32]
   14278:	add	r3, r0, r4
   1427c:	cmp	r2, r3
   14280:	bcs	14500 <__assert_fail@plt+0x2f98>
   14284:	mov	r1, r4
   14288:	mov	r0, r5
   1428c:	bl	19438 <argp_parse@@Base+0x21c8>
   14290:	cmp	r0, #0
   14294:	bne	144fc <__assert_fail@plt+0x2f94>
   14298:	mov	r0, sl
   1429c:	bl	18108 <argp_parse@@Base+0xe98>
   142a0:	ldr	r3, [r5, #28]
   142a4:	ldr	r1, [r5, #24]
   142a8:	ldr	r2, [r5, #16]
   142ac:	sub	r3, r3, r1
   142b0:	cmp	r3, r2
   142b4:	bhi	1451c <__assert_fail@plt+0x2fb4>
   142b8:	ldr	r3, [r5, #20]
   142bc:	ldr	r2, [r5, #4]
   142c0:	bic	r3, r3, r3, asr #31
   142c4:	cmp	r2, r3
   142c8:	bcs	14458 <__assert_fail@plt+0x2ef0>
   142cc:	ldr	r3, [r5, #28]
   142d0:	ldr	r2, [r5, #32]
   142d4:	cmp	r3, r2
   142d8:	bcs	1456c <__assert_fail@plt+0x3004>
   142dc:	mov	r4, #1
   142e0:	add	r2, r3, r4
   142e4:	str	r2, [r5, #28]
   142e8:	mov	r2, #10
   142ec:	strb	r2, [r3]
   142f0:	ldr	fp, [sp, #16]
   142f4:	cmp	fp, #0
   142f8:	beq	14370 <__assert_fail@plt+0x2e08>
   142fc:	ldr	r3, [fp]
   14300:	cmp	r3, #0
   14304:	beq	14370 <__assert_fail@plt+0x2e08>
   14308:	eor	r2, r4, #1
   1430c:	and	r2, r2, #1
   14310:	clz	sl, r8
   14314:	lsr	sl, sl, #5
   14318:	orrs	r2, sl, r2
   1431c:	bne	14338 <__assert_fail@plt+0x2dd0>
   14320:	b	145a4 <__assert_fail@plt+0x303c>
   14324:	cmp	r4, #0
   14328:	movne	r2, sl
   1432c:	orreq	r2, sl, #1
   14330:	cmp	r2, #0
   14334:	beq	14370 <__assert_fail@plt+0x2e08>
   14338:	orrs	r2, r7, r4
   1433c:	mov	r0, r3
   14340:	str	r5, [sp, #4]
   14344:	movne	r3, #1
   14348:	moveq	r3, #0
   1434c:	str	r8, [sp]
   14350:	mov	r2, r6
   14354:	mov	r1, r9
   14358:	bl	14060 <__assert_fail@plt+0x2af8>
   1435c:	ldr	r3, [fp, #16]
   14360:	add	fp, fp, #16
   14364:	cmp	r3, #0
   14368:	orr	r4, r4, r0
   1436c:	bne	14324 <__assert_fail@plt+0x2dbc>
   14370:	mov	r0, r4
   14374:	add	sp, sp, #36	; 0x24
   14378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1437c:	cmp	r0, #0
   14380:	addne	sl, r0, #1
   14384:	beq	14548 <__assert_fail@plt+0x2fe0>
   14388:	ldr	r3, [fp, #20]
   1438c:	cmp	r3, #0
   14390:	beq	14528 <__assert_fail@plt+0x2fc0>
   14394:	mov	r3, #0
   14398:	mov	r1, r9
   1439c:	mov	r0, fp
   143a0:	mov	r4, r3
   143a4:	str	r3, [sp, #20]
   143a8:	bl	17fac <argp_parse@@Base+0xd3c>
   143ac:	str	r4, [sp, #24]
   143b0:	ldr	r3, [fp, #20]
   143b4:	str	r0, [sp, #12]
   143b8:	ldr	r0, [pc, #584]	; 14608 <__assert_fail@plt+0x30a0>
   143bc:	b	14104 <__assert_fail@plt+0x2b9c>
   143c0:	mov	r0, r3
   143c4:	str	r3, [sp, #24]
   143c8:	bl	113e8 <strlen@plt>
   143cc:	ldr	r3, [sp, #24]
   143d0:	subs	r4, r0, #0
   143d4:	beq	14188 <__assert_fail@plt+0x2c20>
   143d8:	ldr	r0, [r5, #28]
   143dc:	ldr	r1, [r5, #32]
   143e0:	add	r2, r0, r4
   143e4:	cmp	r1, r2
   143e8:	bcs	1440c <__assert_fail@plt+0x2ea4>
   143ec:	mov	r1, r4
   143f0:	mov	r0, r5
   143f4:	str	r3, [sp, #24]
   143f8:	bl	19438 <argp_parse@@Base+0x21c8>
   143fc:	ldr	r3, [sp, #24]
   14400:	cmp	r0, #0
   14404:	beq	14188 <__assert_fail@plt+0x2c20>
   14408:	ldr	r0, [r5, #28]
   1440c:	mov	r2, r4
   14410:	mov	r1, r3
   14414:	str	r3, [sp, #24]
   14418:	b	1442c <__assert_fail@plt+0x2ec4>
   1441c:	ldr	r0, [r5, #28]
   14420:	mov	r2, r4
   14424:	mov	r1, sl
   14428:	str	r3, [sp, #24]
   1442c:	bl	11298 <memcpy@plt>
   14430:	ldr	r2, [r5, #28]
   14434:	ldr	r3, [sp, #24]
   14438:	add	r4, r2, r4
   1443c:	str	r4, [r5, #28]
   14440:	b	1418c <__assert_fail@plt+0x2c24>
   14444:	mov	r0, r5
   14448:	str	r3, [sp, #24]
   1444c:	bl	18da8 <argp_parse@@Base+0x1b38>
   14450:	ldr	r3, [sp, #24]
   14454:	b	141a0 <__assert_fail@plt+0x2c38>
   14458:	mov	r4, #1
   1445c:	b	142f0 <__assert_fail@plt+0x2d88>
   14460:	ldr	r4, [r0, #20]
   14464:	cmp	r4, #0
   14468:	beq	145b0 <__assert_fail@plt+0x3048>
   1446c:	bl	17fac <argp_parse@@Base+0xd3c>
   14470:	cmp	r6, #0
   14474:	ldr	r3, [fp, #20]
   14478:	strne	sl, [sp, #20]
   1447c:	strne	sl, [sp, #24]
   14480:	movne	r4, sl
   14484:	streq	r6, [sp, #20]
   14488:	streq	r6, [sp, #24]
   1448c:	moveq	r4, r6
   14490:	str	r0, [sp, #12]
   14494:	ldrne	r0, [pc, #364]	; 14608 <__assert_fail@plt+0x30a0>
   14498:	ldreq	r0, [pc, #352]	; 14600 <__assert_fail@plt+0x3098>
   1449c:	b	14104 <__assert_fail@plt+0x2b9c>
   144a0:	mov	r4, r3
   144a4:	b	141ec <__assert_fail@plt+0x2c84>
   144a8:	mov	r1, #1
   144ac:	mov	r0, r5
   144b0:	str	r3, [sp, #28]
   144b4:	bl	19438 <argp_parse@@Base+0x21c8>
   144b8:	ldr	r3, [sp, #28]
   144bc:	cmp	r0, #0
   144c0:	beq	14140 <__assert_fail@plt+0x2bd8>
   144c4:	ldr	r2, [r5, #28]
   144c8:	b	14130 <__assert_fail@plt+0x2bc8>
   144cc:	mov	r1, #1
   144d0:	mov	r0, r5
   144d4:	str	r3, [sp, #24]
   144d8:	bl	19438 <argp_parse@@Base+0x21c8>
   144dc:	ldr	r3, [sp, #24]
   144e0:	cmp	r0, #0
   144e4:	beq	141d4 <__assert_fail@plt+0x2c6c>
   144e8:	ldr	r2, [r5, #28]
   144ec:	b	141c4 <__assert_fail@plt+0x2c5c>
   144f0:	str	r4, [sp, #20]
   144f4:	str	r4, [sp, #24]
   144f8:	b	140ec <__assert_fail@plt+0x2b84>
   144fc:	ldr	r0, [r5, #28]
   14500:	mov	r2, r4
   14504:	mov	r1, sl
   14508:	bl	11298 <memcpy@plt>
   1450c:	ldr	r3, [r5, #28]
   14510:	add	r4, r3, r4
   14514:	str	r4, [r5, #28]
   14518:	b	14298 <__assert_fail@plt+0x2d30>
   1451c:	mov	r0, r5
   14520:	bl	18da8 <argp_parse@@Base+0x1b38>
   14524:	b	142b8 <__assert_fail@plt+0x2d50>
   14528:	cmp	sl, #0
   1452c:	beq	145ac <__assert_fail@plt+0x3044>
   14530:	str	r3, [sp, #20]
   14534:	str	r3, [sp, #24]
   14538:	mov	r4, r3
   1453c:	str	r3, [sp, #12]
   14540:	mov	r3, sl
   14544:	b	14118 <__assert_fail@plt+0x2bb0>
   14548:	mov	sl, r0
   1454c:	b	14388 <__assert_fail@plt+0x2e20>
   14550:	adds	r3, r4, #0
   14554:	movne	r3, #1
   14558:	str	r3, [sp, #24]
   1455c:	str	r3, [sp, #20]
   14560:	str	r6, [sp, #12]
   14564:	mov	r3, sl
   14568:	b	14118 <__assert_fail@plt+0x2bb0>
   1456c:	mov	r1, #1
   14570:	mov	r0, r5
   14574:	bl	19438 <argp_parse@@Base+0x21c8>
   14578:	cmp	r0, #0
   1457c:	beq	14458 <__assert_fail@plt+0x2ef0>
   14580:	ldr	r3, [r5, #28]
   14584:	b	142dc <__assert_fail@plt+0x2d74>
   14588:	mov	r1, #1
   1458c:	mov	r0, r5
   14590:	bl	19438 <argp_parse@@Base+0x21c8>
   14594:	cmp	r0, #0
   14598:	beq	14260 <__assert_fail@plt+0x2cf8>
   1459c:	ldr	r3, [r5, #28]
   145a0:	b	14250 <__assert_fail@plt+0x2ce8>
   145a4:	mov	r4, #1
   145a8:	b	14370 <__assert_fail@plt+0x2e08>
   145ac:	mov	r4, sl
   145b0:	str	r4, [sp, #12]
   145b4:	b	1420c <__assert_fail@plt+0x2ca4>
   145b8:	cmp	r3, #0
   145bc:	beq	145e8 <__assert_fail@plt+0x3080>
   145c0:	mov	r1, r9
   145c4:	mov	r0, fp
   145c8:	bl	17fac <argp_parse@@Base+0xd3c>
   145cc:	mov	r4, r6
   145d0:	ldr	r3, [fp, #20]
   145d4:	str	r6, [sp, #20]
   145d8:	str	r6, [sp, #24]
   145dc:	str	r0, [sp, #12]
   145e0:	ldr	r0, [pc, #24]	; 14600 <__assert_fail@plt+0x3098>
   145e4:	b	14104 <__assert_fail@plt+0x2b9c>
   145e8:	mov	r3, sl
   145ec:	str	r6, [sp, #20]
   145f0:	str	r6, [sp, #24]
   145f4:	mov	r4, r6
   145f8:	str	r6, [sp, #12]
   145fc:	b	14118 <__assert_fail@plt+0x2bb0>
   14600:	andeq	r0, r0, #1
   14604:	andeq	r0, r0, #4
   14608:	andeq	r0, r0, #2
   1460c:	ldr	r3, [r0, #12]
   14610:	ldr	r2, [r1, #12]
   14614:	push	{r4, r5, r6, lr}
   14618:	cmp	r3, r2
   1461c:	beq	1466c <__assert_fail@plt+0x3104>
   14620:	mov	r5, r1
   14624:	mov	r4, r0
   14628:	mov	r1, r2
   1462c:	mov	r0, r3
   14630:	bl	1460c <__assert_fail@plt+0x30a4>
   14634:	cmp	r0, #0
   14638:	popne	{r4, r5, r6, pc}
   1463c:	ldr	r3, [r5, #8]
   14640:	ldr	r0, [r4, #8]
   14644:	mvn	r2, r3
   14648:	lsr	r2, r2, #31
   1464c:	cmp	r2, r0, lsr #31
   14650:	subne	r0, r0, r3
   14654:	subeq	r0, r3, r0
   14658:	cmp	r0, #0
   1465c:	ldreq	r3, [r5, #4]
   14660:	ldreq	r0, [r4, #4]
   14664:	subeq	r0, r3, r0
   14668:	pop	{r4, r5, r6, pc}
   1466c:	ldr	r3, [r1, #8]
   14670:	ldr	r2, [r0, #8]
   14674:	mvn	ip, r3
   14678:	ldr	lr, [r1, #4]
   1467c:	lsr	ip, ip, #31
   14680:	cmp	ip, r2, lsr #31
   14684:	ldr	r1, [r0, #4]
   14688:	subne	r0, r2, r3
   1468c:	subeq	r0, r3, r2
   14690:	cmp	r0, #0
   14694:	subeq	r0, lr, r1
   14698:	pop	{r4, r5, r6, pc}
   1469c:	push	{r4, r5, r6, r7, r8, r9, lr}
   146a0:	sub	sp, sp, #12
   146a4:	ldr	lr, [r0, #16]
   146a8:	cmp	lr, #0
   146ac:	movne	r2, lr
   146b0:	bne	146bc <__assert_fail@plt+0x3154>
   146b4:	b	14980 <__assert_fail@plt+0x3418>
   146b8:	mov	r2, r3
   146bc:	ldr	r3, [r2, #12]
   146c0:	cmp	r3, #0
   146c4:	bne	146b8 <__assert_fail@plt+0x3150>
   146c8:	ldr	ip, [r1, #16]
   146cc:	ldr	r4, [r2, #8]
   146d0:	cmp	ip, #0
   146d4:	movne	r2, ip
   146d8:	bne	146e4 <__assert_fail@plt+0x317c>
   146dc:	b	14994 <__assert_fail@plt+0x342c>
   146e0:	mov	r2, r3
   146e4:	ldr	r3, [r2, #12]
   146e8:	cmp	r3, #0
   146ec:	bne	146e0 <__assert_fail@plt+0x3178>
   146f0:	ldr	r3, [r2, #8]
   146f4:	mvn	r2, r3
   146f8:	lsr	r2, r2, #31
   146fc:	cmp	r2, r4, lsr #31
   14700:	subne	r4, r4, r3
   14704:	subeq	r4, r3, r4
   14708:	cmp	r4, #0
   1470c:	bne	14774 <__assert_fail@plt+0x320c>
   14710:	adds	r4, ip, #0
   14714:	movne	r4, #1
   14718:	cmp	lr, #0
   1471c:	rsbeq	r4, r4, #0
   14720:	rsbne	r4, r4, #1
   14724:	cmp	r4, #0
   14728:	bne	14774 <__assert_fail@plt+0x320c>
   1472c:	cmp	lr, #0
   14730:	mov	r5, r1
   14734:	mov	r6, r0
   14738:	beq	14790 <__assert_fail@plt+0x3228>
   1473c:	ldr	r0, [lr, #20]
   14740:	ldr	r2, [ip, #20]
   14744:	cmp	r0, r2
   14748:	ble	14954 <__assert_fail@plt+0x33ec>
   1474c:	mov	r0, lr
   14750:	ldr	r0, [r0, #12]
   14754:	ldr	r3, [r0, #20]
   14758:	cmp	r2, r3
   1475c:	blt	14750 <__assert_fail@plt+0x31e8>
   14760:	mov	r1, ip
   14764:	bl	1460c <__assert_fail@plt+0x30a4>
   14768:	cmp	r0, #0
   1476c:	movne	r4, r0
   14770:	moveq	r4, #1
   14774:	mov	r0, r4
   14778:	add	sp, sp, #12
   1477c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14780:	mov	r0, lr
   14784:	bl	1460c <__assert_fail@plt+0x30a4>
   14788:	subs	r4, r0, #0
   1478c:	bne	14774 <__assert_fail@plt+0x320c>
   14790:	ldr	r4, [r5, #12]
   14794:	ldr	r3, [r6, #12]
   14798:	mvn	r2, r4
   1479c:	lsr	r2, r2, #31
   147a0:	cmp	r2, r3, lsr #31
   147a4:	subne	r4, r3, r4
   147a8:	subeq	r4, r4, r3
   147ac:	cmp	r4, #0
   147b0:	bne	14774 <__assert_fail@plt+0x320c>
   147b4:	ldr	r2, [r6, #4]
   147b8:	ldr	lr, [r6]
   147bc:	cmp	r2, #0
   147c0:	beq	147ec <__assert_fail@plt+0x3284>
   147c4:	add	r3, lr, #24
   147c8:	ldr	r1, [r3, #-24]	; 0xffffffe8
   147cc:	cmp	r1, #0
   147d0:	beq	147e0 <__assert_fail@plt+0x3278>
   147d4:	ldr	r0, [r3, #-12]
   147d8:	tst	r0, #2
   147dc:	beq	1499c <__assert_fail@plt+0x3434>
   147e0:	subs	r2, r2, #1
   147e4:	add	r3, r3, #24
   147e8:	bne	147c8 <__assert_fail@plt+0x3260>
   147ec:	ldr	r2, [r5, #4]
   147f0:	mov	ip, #0
   147f4:	cmp	r2, ip
   147f8:	str	ip, [sp]
   147fc:	ldr	r3, [r5]
   14800:	beq	14a0c <__assert_fail@plt+0x34a4>
   14804:	add	r3, r3, #24
   14808:	ldr	r1, [r3, #-24]	; 0xffffffe8
   1480c:	cmp	r1, #0
   14810:	beq	14820 <__assert_fail@plt+0x32b8>
   14814:	ldr	r0, [r3, #-12]
   14818:	tst	r0, #2
   1481c:	beq	14830 <__assert_fail@plt+0x32c8>
   14820:	subs	r2, r2, #1
   14824:	add	r3, r3, #24
   14828:	bne	14808 <__assert_fail@plt+0x32a0>
   1482c:	mov	r1, r2
   14830:	ldr	r3, [lr, #12]
   14834:	str	r1, [sp, #4]
   14838:	ands	r3, ip, r3, lsr #3
   1483c:	beq	14a04 <__assert_fail@plt+0x349c>
   14840:	mov	r0, sp
   14844:	bl	13b0c <__assert_fail@plt+0x25a4>
   14848:	ldr	r3, [r5]
   1484c:	cmp	r0, #0
   14850:	bne	149f0 <__assert_fail@plt+0x3488>
   14854:	ldr	r3, [r3, #12]
   14858:	tst	r3, #8
   1485c:	beq	14884 <__assert_fail@plt+0x331c>
   14860:	ldr	r3, [sp, #4]
   14864:	cmp	r3, #0
   14868:	beq	14884 <__assert_fail@plt+0x331c>
   1486c:	add	r0, sp, #4
   14870:	bl	13b0c <__assert_fail@plt+0x25a4>
   14874:	cmp	r0, #0
   14878:	subne	r4, r4, #1
   1487c:	cmp	r4, #0
   14880:	bne	14774 <__assert_fail@plt+0x320c>
   14884:	ldr	r2, [r6, #20]
   14888:	mov	r0, r6
   1488c:	mov	r3, #0
   14890:	ldr	r2, [r2, #24]
   14894:	ldr	r1, [pc, #408]	; 14a34 <__assert_fail@plt+0x34cc>
   14898:	bl	139d0 <__assert_fail@plt+0x2468>
   1489c:	ldr	r2, [r5, #20]
   148a0:	mov	r3, #0
   148a4:	ldr	r1, [pc, #392]	; 14a34 <__assert_fail@plt+0x34cc>
   148a8:	ldr	r2, [r2, #24]
   148ac:	uxtb	r6, r0
   148b0:	mov	r0, r5
   148b4:	bl	139d0 <__assert_fail@plt+0x2468>
   148b8:	cmp	r6, #0
   148bc:	lslne	r4, r6, #2
   148c0:	movne	r7, r6
   148c4:	uxtb	r5, r0
   148c8:	beq	149d4 <__assert_fail@plt+0x346c>
   148cc:	cmp	r5, #0
   148d0:	lslne	r9, r5, #2
   148d4:	movne	r8, r5
   148d8:	beq	149b8 <__assert_fail@plt+0x3450>
   148dc:	bl	113a0 <__ctype_tolower_loc@plt>
   148e0:	ldr	r3, [r0]
   148e4:	ldr	r4, [r3, r4]
   148e8:	ldr	r3, [r3, r9]
   148ec:	subs	r4, r4, r3
   148f0:	bne	14774 <__assert_fail@plt+0x320c>
   148f4:	subs	r4, r8, r7
   148f8:	bne	14774 <__assert_fail@plt+0x320c>
   148fc:	adds	r4, r5, #0
   14900:	movne	r4, #1
   14904:	cmp	r6, #0
   14908:	rsbeq	r4, r4, #0
   1490c:	rsbne	r4, r4, #1
   14910:	cmp	r4, #0
   14914:	bne	14774 <__assert_fail@plt+0x320c>
   14918:	cmp	r6, #0
   1491c:	bne	14774 <__assert_fail@plt+0x320c>
   14920:	ldm	sp, {r0, r1}
   14924:	adds	r4, r1, #0
   14928:	movne	r4, #1
   1492c:	cmp	r0, #0
   14930:	rsbeq	r4, r4, #0
   14934:	rsbne	r4, r4, #1
   14938:	cmp	r4, #0
   1493c:	bne	14774 <__assert_fail@plt+0x320c>
   14940:	cmp	r0, #0
   14944:	beq	14774 <__assert_fail@plt+0x320c>
   14948:	bl	112ec <strcasecmp@plt>
   1494c:	mov	r4, r0
   14950:	b	14774 <__assert_fail@plt+0x320c>
   14954:	mov	r1, ip
   14958:	bge	14780 <__assert_fail@plt+0x3218>
   1495c:	ldr	r1, [r1, #12]
   14960:	ldr	r3, [r1, #20]
   14964:	cmp	r0, r3
   14968:	blt	1495c <__assert_fail@plt+0x33f4>
   1496c:	mov	r0, lr
   14970:	bl	1460c <__assert_fail@plt+0x30a4>
   14974:	subs	r4, r0, #0
   14978:	mvneq	r4, #0
   1497c:	b	14774 <__assert_fail@plt+0x320c>
   14980:	ldr	ip, [r1, #16]
   14984:	ldr	r4, [r0, #12]
   14988:	cmp	ip, #0
   1498c:	movne	r2, ip
   14990:	bne	146e4 <__assert_fail@plt+0x317c>
   14994:	ldr	r3, [r1, #12]
   14998:	b	146f4 <__assert_fail@plt+0x318c>
   1499c:	ldr	r2, [r5, #4]
   149a0:	str	r1, [sp]
   149a4:	cmp	r2, #0
   149a8:	ldr	r3, [r5]
   149ac:	beq	14a14 <__assert_fail@plt+0x34ac>
   149b0:	mov	ip, #1
   149b4:	b	14804 <__assert_fail@plt+0x329c>
   149b8:	ldr	r3, [sp, #4]
   149bc:	cmp	r3, #0
   149c0:	moveq	r9, r5
   149c4:	ldrbne	r8, [r3]
   149c8:	moveq	r8, r5
   149cc:	lslne	r9, r8, #2
   149d0:	b	148dc <__assert_fail@plt+0x3374>
   149d4:	ldr	r3, [sp]
   149d8:	cmp	r3, #0
   149dc:	moveq	r4, r6
   149e0:	ldrbne	r7, [r3]
   149e4:	moveq	r7, r6
   149e8:	lslne	r4, r7, #2
   149ec:	b	148cc <__assert_fail@plt+0x3364>
   149f0:	ldr	r3, [r3, #12]
   149f4:	tst	r3, #8
   149f8:	bne	14a20 <__assert_fail@plt+0x34b8>
   149fc:	mov	r4, #1
   14a00:	b	14774 <__assert_fail@plt+0x320c>
   14a04:	ldr	r3, [r5]
   14a08:	b	14854 <__assert_fail@plt+0x32ec>
   14a0c:	str	r2, [sp, #4]
   14a10:	b	14884 <__assert_fail@plt+0x331c>
   14a14:	mov	r1, r2
   14a18:	mov	ip, #1
   14a1c:	b	14830 <__assert_fail@plt+0x32c8>
   14a20:	ldr	r3, [sp, #4]
   14a24:	mov	r4, #1
   14a28:	cmp	r3, #0
   14a2c:	bne	1486c <__assert_fail@plt+0x3304>
   14a30:	b	14774 <__assert_fail@plt+0x320c>
   14a34:	andeq	r3, r1, r8, asr #21
   14a38:	ldr	r3, [r0, #28]
   14a3c:	ldr	r2, [r0, #24]
   14a40:	push	{r4, r5, r6, lr}
   14a44:	mov	r5, r1
   14a48:	ldr	r1, [r0, #16]
   14a4c:	sub	r2, r3, r2
   14a50:	cmp	r2, r1
   14a54:	mov	r4, r0
   14a58:	movls	r2, r3
   14a5c:	bhi	14ab8 <__assert_fail@plt+0x3550>
   14a60:	ldr	r1, [r4, #20]
   14a64:	ldr	r0, [r4, #8]
   14a68:	cmp	r1, #0
   14a6c:	addge	r5, r5, r1
   14a70:	cmp	r5, r0
   14a74:	bcc	14a98 <__assert_fail@plt+0x3530>
   14a78:	ldr	r1, [r4, #32]
   14a7c:	cmp	r1, r3
   14a80:	bls	14ac8 <__assert_fail@plt+0x3560>
   14a84:	add	r1, r2, #1
   14a88:	mov	r3, #10
   14a8c:	str	r1, [r4, #28]
   14a90:	strb	r3, [r2]
   14a94:	pop	{r4, r5, r6, pc}
   14a98:	ldr	r2, [r4, #32]
   14a9c:	cmp	r2, r3
   14aa0:	bls	14ae4 <__assert_fail@plt+0x357c>
   14aa4:	add	r1, r3, #1
   14aa8:	mov	r2, #32
   14aac:	str	r1, [r4, #28]
   14ab0:	strb	r2, [r3]
   14ab4:	pop	{r4, r5, r6, pc}
   14ab8:	bl	18da8 <argp_parse@@Base+0x1b38>
   14abc:	ldr	r3, [r4, #28]
   14ac0:	mov	r2, r3
   14ac4:	b	14a60 <__assert_fail@plt+0x34f8>
   14ac8:	mov	r1, #1
   14acc:	mov	r0, r4
   14ad0:	bl	19438 <argp_parse@@Base+0x21c8>
   14ad4:	cmp	r0, #0
   14ad8:	popeq	{r4, r5, r6, pc}
   14adc:	ldr	r2, [r4, #28]
   14ae0:	b	14a84 <__assert_fail@plt+0x351c>
   14ae4:	mov	r1, #1
   14ae8:	mov	r0, r4
   14aec:	bl	19438 <argp_parse@@Base+0x21c8>
   14af0:	cmp	r0, #0
   14af4:	popeq	{r4, r5, r6, pc}
   14af8:	ldr	r3, [r4, #28]
   14afc:	b	14aa4 <__assert_fail@plt+0x353c>
   14b00:	push	{r4, r5, r6, lr}
   14b04:	ldr	r5, [r0, #8]
   14b08:	ldr	r2, [r0, #12]
   14b0c:	ldr	ip, [r1, #12]
   14b10:	cmp	r5, #0
   14b14:	orr	r2, r2, ip
   14b18:	beq	14b80 <__assert_fail@plt+0x3618>
   14b1c:	tst	r2, #16
   14b20:	bne	14b5c <__assert_fail@plt+0x35f4>
   14b24:	tst	r2, #1
   14b28:	mov	r6, r3
   14b2c:	mov	r4, r0
   14b30:	bne	14b64 <__assert_fail@plt+0x35fc>
   14b34:	mov	r0, r5
   14b38:	bl	113e8 <strlen@plt>
   14b3c:	add	r1, r0, #6
   14b40:	mov	r0, r6
   14b44:	bl	14a38 <__assert_fail@plt+0x34d0>
   14b48:	mov	r3, r5
   14b4c:	ldr	r2, [r4, #4]
   14b50:	mov	r0, r6
   14b54:	ldr	r1, [pc, #56]	; 14b94 <__assert_fail@plt+0x362c>
   14b58:	bl	19458 <argp_parse@@Base+0x21e8>
   14b5c:	mov	r0, #0
   14b60:	pop	{r4, r5, r6, pc}
   14b64:	ldr	r2, [r0, #4]
   14b68:	mov	r3, r5
   14b6c:	mov	r0, r6
   14b70:	ldr	r1, [pc, #32]	; 14b98 <__assert_fail@plt+0x3630>
   14b74:	bl	19458 <argp_parse@@Base+0x21e8>
   14b78:	mov	r0, #0
   14b7c:	pop	{r4, r5, r6, pc}
   14b80:	ldr	r5, [r1, #8]
   14b84:	cmp	r5, #0
   14b88:	bne	14b1c <__assert_fail@plt+0x35b4>
   14b8c:	mov	r0, #0
   14b90:	pop	{r4, r5, r6, pc}
   14b94:	andeq	sl, r1, r0, asr sp
   14b98:	andeq	sl, r1, r4, asr #26
   14b9c:	mov	ip, r0
   14ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ba4:	mov	r8, r2
   14ba8:	sub	sp, sp, #28
   14bac:	mov	r2, ip
   14bb0:	ldr	ip, [ip, #16]
   14bb4:	mov	r9, r1
   14bb8:	ldr	r1, [r0, #8]
   14bbc:	str	ip, [sp, #8]
   14bc0:	ldr	ip, [r8]
   14bc4:	str	r1, [sp, #16]
   14bc8:	mov	r0, r1
   14bcc:	mov	r4, r3
   14bd0:	ldr	r1, [pc, #456]	; 14da0 <__assert_fail@plt+0x3838>
   14bd4:	mov	r3, r9
   14bd8:	mov	r5, ip
   14bdc:	str	ip, [sp, #20]
   14be0:	ldr	r6, [sp, #64]	; 0x40
   14be4:	bl	13c64 <__assert_fail@plt+0x26fc>
   14be8:	subs	r3, r0, #0
   14bec:	str	r3, [sp, #12]
   14bf0:	beq	14d4c <__assert_fail@plt+0x37e4>
   14bf4:	mov	r1, #10
   14bf8:	bl	1125c <strchrnul@plt>
   14bfc:	ldrb	sl, [r0]
   14c00:	mov	r7, r0
   14c04:	cmp	sl, #0
   14c08:	bne	14d08 <__assert_fail@plt+0x37a0>
   14c0c:	ldr	r5, [sp, #12]
   14c10:	add	r1, r7, #1
   14c14:	sub	r1, r1, r5
   14c18:	mov	r0, r6
   14c1c:	bl	14a38 <__assert_fail@plt+0x34d0>
   14c20:	ldr	r0, [r6, #28]
   14c24:	sub	fp, r7, r5
   14c28:	ldr	r1, [r6, #32]
   14c2c:	add	r2, r0, fp
   14c30:	cmp	r1, r2
   14c34:	bcs	14c50 <__assert_fail@plt+0x36e8>
   14c38:	mov	r1, fp
   14c3c:	mov	r0, r6
   14c40:	bl	19438 <argp_parse@@Base+0x21c8>
   14c44:	cmp	r0, #0
   14c48:	beq	14c68 <__assert_fail@plt+0x3700>
   14c4c:	ldr	r0, [r6, #28]
   14c50:	mov	r2, fp
   14c54:	mov	r1, r5
   14c58:	bl	11298 <memcpy@plt>
   14c5c:	ldr	r3, [r6, #28]
   14c60:	add	fp, r3, fp
   14c64:	str	fp, [r6, #28]
   14c68:	ldr	r3, [sp, #16]
   14c6c:	ldr	r2, [sp, #12]
   14c70:	cmp	r3, r2
   14c74:	beq	14c80 <__assert_fail@plt+0x3718>
   14c78:	mov	r0, r2
   14c7c:	bl	18108 <argp_parse@@Base+0xe98>
   14c80:	ldr	r3, [sp, #8]
   14c84:	cmp	r3, #0
   14c88:	beq	14ccc <__assert_fail@plt+0x3764>
   14c8c:	ldr	r2, [r3]
   14c90:	cmp	r2, #0
   14c94:	beq	14ccc <__assert_fail@plt+0x3764>
   14c98:	ldr	r5, [sp, #8]
   14c9c:	mov	r3, r4
   14ca0:	mov	r0, r2
   14ca4:	str	r6, [sp]
   14ca8:	mov	r2, r8
   14cac:	mov	r1, r9
   14cb0:	bl	14b9c <__assert_fail@plt+0x3634>
   14cb4:	ldr	r2, [r5, #16]!
   14cb8:	cmp	r2, #0
   14cbc:	clz	r3, r0
   14cc0:	lsr	r3, r3, #5
   14cc4:	bne	14ca0 <__assert_fail@plt+0x3738>
   14cc8:	mov	r4, r3
   14ccc:	cmp	r4, #0
   14cd0:	moveq	sl, #0
   14cd4:	andne	sl, sl, #1
   14cd8:	cmp	sl, #0
   14cdc:	beq	14d6c <__assert_fail@plt+0x3804>
   14ce0:	ldrb	r0, [r7]
   14ce4:	cmp	r0, #0
   14ce8:	bne	14d7c <__assert_fail@plt+0x3814>
   14cec:	ldr	r3, [sp, #20]
   14cf0:	ldrb	r4, [r3]
   14cf4:	cmp	r4, #0
   14cf8:	moveq	r0, r4
   14cfc:	strbne	r0, [r3]
   14d00:	add	sp, sp, #28
   14d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d08:	ldrb	sl, [r5]
   14d0c:	cmp	sl, #0
   14d10:	beq	14d98 <__assert_fail@plt+0x3830>
   14d14:	mov	fp, #0
   14d18:	add	r5, r0, #1
   14d1c:	add	fp, fp, #1
   14d20:	mov	r0, r5
   14d24:	mov	r1, #10
   14d28:	bl	1125c <strchrnul@plt>
   14d2c:	cmp	fp, sl
   14d30:	bne	14d18 <__assert_fail@plt+0x37b0>
   14d34:	mov	r7, r0
   14d38:	ldr	r2, [r8]
   14d3c:	mov	sl, #1
   14d40:	add	r2, r2, sl
   14d44:	str	r2, [r8]
   14d48:	b	14c10 <__assert_fail@plt+0x36a8>
   14d4c:	ldr	r3, [sp, #8]
   14d50:	cmp	r3, #0
   14d54:	beq	14d6c <__assert_fail@plt+0x3804>
   14d58:	ldr	r2, [r3]
   14d5c:	cmp	r2, #0
   14d60:	ldrne	r7, [sp, #12]
   14d64:	movne	sl, r7
   14d68:	bne	14c98 <__assert_fail@plt+0x3730>
   14d6c:	clz	r0, r4
   14d70:	lsr	r0, r0, #5
   14d74:	add	sp, sp, #28
   14d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d7c:	ldr	r2, [sp, #20]
   14d80:	mov	r0, #1
   14d84:	ldrb	r3, [r2]
   14d88:	add	r3, r3, r0
   14d8c:	strb	r3, [r2]
   14d90:	add	sp, sp, #28
   14d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d98:	ldr	r5, [sp, #12]
   14d9c:	b	14d38 <__assert_fail@plt+0x37d0>
   14da0:	andeq	r0, r0, #6
   14da4:	ldr	r2, [r0, #8]
   14da8:	cmp	r2, #0
   14dac:	beq	14db8 <__assert_fail@plt+0x3850>
   14db0:	mov	r0, #0
   14db4:	bx	lr
   14db8:	ldr	r2, [r1, #8]
   14dbc:	cmp	r2, #0
   14dc0:	bne	14db0 <__assert_fail@plt+0x3848>
   14dc4:	ldr	r1, [r1, #12]
   14dc8:	ldr	r2, [r0, #12]
   14dcc:	orr	r2, r2, r1
   14dd0:	tst	r2, #16
   14dd4:	ldreq	r2, [r3]
   14dd8:	ldreq	r1, [r0, #4]
   14ddc:	addeq	r0, r2, #1
   14de0:	streq	r0, [r3]
   14de4:	strbeq	r1, [r2]
   14de8:	b	14db0 <__assert_fail@plt+0x3848>
   14dec:	mov	r3, r0
   14df0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14df4:	sub	sp, sp, #52	; 0x34
   14df8:	ldr	r2, [r3, #16]
   14dfc:	str	r0, [sp, #24]
   14e00:	mov	r0, #16
   14e04:	ldr	r4, [r3]
   14e08:	str	r1, [sp, #28]
   14e0c:	str	r2, [sp, #8]
   14e10:	bl	18ca4 <argp_parse@@Base+0x1a34>
   14e14:	subs	r3, r0, #0
   14e18:	str	r3, [sp, #20]
   14e1c:	beq	15480 <__assert_fail@plt+0x3f18>
   14e20:	ldr	r2, [sp, #20]
   14e24:	mov	r3, #0
   14e28:	cmp	r4, #0
   14e2c:	str	r3, [r2, #4]
   14e30:	str	r3, [r2, #12]
   14e34:	beq	15038 <__assert_fail@plt+0x3ad0>
   14e38:	ldr	r5, [r4, #12]
   14e3c:	ands	r5, r5, #4
   14e40:	bne	15494 <__assert_fail@plt+0x3f2c>
   14e44:	add	r6, r4, #24
   14e48:	mov	r9, r5
   14e4c:	mov	sl, r5
   14e50:	mov	fp, r2
   14e54:	b	14e98 <__assert_fail@plt+0x3930>
   14e58:	ldr	r3, [r6, #-12]
   14e5c:	tst	r3, #4
   14e60:	addeq	r9, r9, #1
   14e64:	streq	r9, [fp, #4]
   14e68:	tst	r3, #8
   14e6c:	bne	14e94 <__assert_fail@plt+0x392c>
   14e70:	sub	r3, r8, #1
   14e74:	cmp	r3, #254	; 0xfe
   14e78:	bhi	14e94 <__assert_fail@plt+0x392c>
   14e7c:	bl	113c4 <__ctype_b_loc@plt>
   14e80:	lsl	r8, r8, #1
   14e84:	ldr	r3, [r0]
   14e88:	ldrh	r3, [r3, r8]
   14e8c:	tst	r3, #16384	; 0x4000
   14e90:	addne	sl, sl, #1
   14e94:	add	r6, r6, #24
   14e98:	ldr	r8, [r6, #-20]	; 0xffffffec
   14e9c:	cmp	r8, #0
   14ea0:	bne	14e58 <__assert_fail@plt+0x38f0>
   14ea4:	ldr	r3, [r6, #-24]	; 0xffffffe8
   14ea8:	cmp	r3, #0
   14eac:	bne	14e58 <__assert_fail@plt+0x38f0>
   14eb0:	ldr	r3, [r6, #-8]
   14eb4:	cmp	r3, #0
   14eb8:	bne	14e58 <__assert_fail@plt+0x38f0>
   14ebc:	ldr	r7, [r6, #-4]
   14ec0:	cmp	r7, #0
   14ec4:	bne	14e58 <__assert_fail@plt+0x38f0>
   14ec8:	rsb	r9, r9, r9, lsl #3
   14ecc:	lsl	r0, r9, #2
   14ed0:	bl	18ca4 <argp_parse@@Base+0x1a34>
   14ed4:	ldr	r6, [sp, #20]
   14ed8:	str	r0, [r6]
   14edc:	add	r0, sl, #1
   14ee0:	bl	18ca4 <argp_parse@@Base+0x1a34>
   14ee4:	ldr	r8, [r6]
   14ee8:	mov	r3, r6
   14eec:	cmp	r0, #0
   14ef0:	cmpne	r8, #0
   14ef4:	mov	sl, r0
   14ef8:	str	r0, [r3, #8]
   14efc:	beq	15444 <__assert_fail@plt+0x3edc>
   14f00:	ldr	r2, [sp, #20]
   14f04:	ldr	r3, [pc, #1436]	; 154a8 <__assert_fail@plt+0x3f40>
   14f08:	ldr	r2, [r2, #4]
   14f0c:	cmp	r2, r3
   14f10:	bhi	15430 <__assert_fail@plt+0x3ec8>
   14f14:	add	r8, r8, #28
   14f18:	mov	r2, r8
   14f1c:	ldr	r3, [r4, #4]
   14f20:	mov	r8, sl
   14f24:	mov	r9, r2
   14f28:	cmp	r3, #0
   14f2c:	bne	14f3c <__assert_fail@plt+0x39d4>
   14f30:	ldr	r2, [r4]
   14f34:	cmp	r2, #0
   14f38:	beq	153e8 <__assert_fail@plt+0x3e80>
   14f3c:	str	r7, [r9, #-24]	; 0xffffffe8
   14f40:	ldr	r6, [r4, #20]
   14f44:	str	r4, [r9, #-28]	; 0xffffffe4
   14f48:	cmp	r6, #0
   14f4c:	str	sl, [r9, #-20]	; 0xffffffec
   14f50:	bne	14f68 <__assert_fail@plt+0x3a00>
   14f54:	ldr	r2, [r4]
   14f58:	cmp	r2, #0
   14f5c:	cmpeq	r3, #0
   14f60:	movne	r6, r5
   14f64:	beq	1540c <__assert_fail@plt+0x3ea4>
   14f68:	ldr	r1, [sp, #28]
   14f6c:	str	r6, [r9, #-16]
   14f70:	mov	r5, r4
   14f74:	ldr	r2, [r4, #12]
   14f78:	mov	r3, r7
   14f7c:	str	r1, [r9, #-12]
   14f80:	ldr	r1, [sp, #24]
   14f84:	str	r1, [r9, #-8]
   14f88:	add	r3, r3, #1
   14f8c:	tst	r2, #8
   14f90:	str	r3, [r9, #-24]	; 0xffffffe8
   14f94:	bne	15000 <__assert_fail@plt+0x3a98>
   14f98:	ldr	fp, [r4, #4]
   14f9c:	sub	r3, fp, #1
   14fa0:	cmp	r3, #254	; 0xfe
   14fa4:	bhi	15000 <__assert_fail@plt+0x3a98>
   14fa8:	bl	113c4 <__ctype_b_loc@plt>
   14fac:	lsl	r3, fp, #1
   14fb0:	ldr	r2, [r0]
   14fb4:	ldrh	r3, [r2, r3]
   14fb8:	tst	r3, #16384	; 0x4000
   14fbc:	beq	15000 <__assert_fail@plt+0x3a98>
   14fc0:	cmp	r8, sl
   14fc4:	uxtb	r1, fp
   14fc8:	bcs	14ff8 <__assert_fail@plt+0x3a90>
   14fcc:	ldrb	r3, [r8]
   14fd0:	cmp	r3, r1
   14fd4:	movne	r3, r8
   14fd8:	subne	r0, sl, #1
   14fdc:	bne	14ff0 <__assert_fail@plt+0x3a88>
   14fe0:	b	15000 <__assert_fail@plt+0x3a98>
   14fe4:	ldrb	r2, [r3, #1]!
   14fe8:	cmp	r2, r1
   14fec:	beq	15000 <__assert_fail@plt+0x3a98>
   14ff0:	cmp	r0, r3
   14ff4:	bne	14fe4 <__assert_fail@plt+0x3a7c>
   14ff8:	strb	r1, [sl]
   14ffc:	add	sl, sl, #1
   15000:	ldr	r3, [r5, #28]
   15004:	add	r4, r4, #24
   15008:	cmp	r3, #0
   1500c:	bne	1501c <__assert_fail@plt+0x3ab4>
   15010:	ldr	r2, [r5, #24]
   15014:	cmp	r2, #0
   15018:	beq	153c4 <__assert_fail@plt+0x3e5c>
   1501c:	ldr	r2, [r5, #36]	; 0x24
   15020:	tst	r2, #4
   15024:	beq	153dc <__assert_fail@plt+0x3e74>
   15028:	ldr	r3, [r9, #-24]	; 0xffffffe8
   1502c:	mov	r5, r4
   15030:	b	14f88 <__assert_fail@plt+0x3a20>
   15034:	strb	r3, [sl]
   15038:	ldr	r3, [sp, #8]
   1503c:	cmp	r3, #0
   15040:	beq	1517c <__assert_fail@plt+0x3c14>
   15044:	ldr	r3, [r3]
   15048:	cmp	r3, #0
   1504c:	beq	1517c <__assert_fail@plt+0x3c14>
   15050:	ldr	r3, [sp, #20]
   15054:	add	r3, r3, #12
   15058:	str	r3, [sp, #44]	; 0x2c
   1505c:	ldr	r3, [sp, #8]
   15060:	ldr	r5, [r3, #12]
   15064:	cmp	r5, #0
   15068:	ldrne	r6, [r3, #8]
   1506c:	bne	15080 <__assert_fail@plt+0x3b18>
   15070:	ldr	r3, [sp, #8]
   15074:	ldr	r6, [r3, #8]
   15078:	cmp	r6, #0
   1507c:	beq	153a4 <__assert_fail@plt+0x3e3c>
   15080:	ldr	r7, [sp, #24]
   15084:	ldr	r2, [sp, #8]
   15088:	mov	r0, #28
   1508c:	ldr	r3, [r7, #16]
   15090:	sub	r3, r2, r3
   15094:	asr	r4, r3, #4
   15098:	bl	18ca4 <argp_parse@@Base+0x1a34>
   1509c:	subs	r1, r0, #0
   150a0:	beq	150e0 <__assert_fail@plt+0x3b78>
   150a4:	ldr	r3, [sp, #28]
   150a8:	ldr	r0, [sp, #20]
   150ac:	cmp	r3, #0
   150b0:	str	r3, [r1, #12]
   150b4:	ldrne	r3, [r3, #20]
   150b8:	ldr	r2, [r0, #12]
   150bc:	addne	r3, r3, #1
   150c0:	moveq	r3, #0
   150c4:	str	r5, [r1, #8]
   150c8:	str	r6, [r1]
   150cc:	str	r4, [r1, #4]
   150d0:	str	r7, [r1, #16]
   150d4:	str	r3, [r1, #20]
   150d8:	str	r2, [r1, #24]
   150dc:	str	r1, [r0, #12]
   150e0:	ldr	r3, [sp, #8]
   150e4:	ldr	r0, [r3]
   150e8:	bl	14dec <__assert_fail@plt+0x3884>
   150ec:	ldr	r3, [sp, #20]
   150f0:	ldr	r2, [r3, #12]
   150f4:	cmp	r2, #0
   150f8:	str	r0, [sp, #16]
   150fc:	bne	15108 <__assert_fail@plt+0x3ba0>
   15100:	b	153ac <__assert_fail@plt+0x3e44>
   15104:	mov	r2, r3
   15108:	ldr	r3, [r2, #24]
   1510c:	cmp	r3, #0
   15110:	bne	15104 <__assert_fail@plt+0x3b9c>
   15114:	add	r2, r2, #24
   15118:	ldr	r0, [sp, #16]
   1511c:	mov	ip, r0
   15120:	ldr	r3, [r0, #4]
   15124:	ldr	r1, [r0, #12]
   15128:	cmp	r3, #0
   1512c:	str	r1, [r2]
   15130:	mov	r2, #0
   15134:	str	r2, [r0, #12]
   15138:	beq	15160 <__assert_fail@plt+0x3bf8>
   1513c:	ldr	lr, [sp, #20]
   15140:	ldr	r2, [lr, #4]
   15144:	cmp	r2, #0
   15148:	bne	15188 <__assert_fail@plt+0x3c20>
   1514c:	ldr	r0, [r0]
   15150:	ldr	r1, [ip, #8]
   15154:	stm	lr, {r0, r3}
   15158:	str	r1, [lr, #8]
   1515c:	str	r2, [ip, #4]
   15160:	ldr	r0, [sp, #16]
   15164:	bl	13b84 <__assert_fail@plt+0x261c>
   15168:	ldr	r2, [sp, #8]
   1516c:	ldr	r3, [r2, #16]!
   15170:	cmp	r3, #0
   15174:	str	r2, [sp, #8]
   15178:	bne	1505c <__assert_fail@plt+0x3af4>
   1517c:	ldr	r0, [sp, #20]
   15180:	add	sp, sp, #52	; 0x34
   15184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15188:	add	r3, r3, r2
   1518c:	str	r3, [sp, #36]	; 0x24
   15190:	rsb	r0, r3, r3, lsl #3
   15194:	lsl	r0, r0, #2
   15198:	bl	18ca4 <argp_parse@@Base+0x1a34>
   1519c:	ldr	r3, [sp, #20]
   151a0:	mov	r4, r0
   151a4:	str	r0, [sp, #32]
   151a8:	ldr	r0, [r3, #8]
   151ac:	bl	113e8 <strlen@plt>
   151b0:	ldr	r3, [sp, #16]
   151b4:	mov	r8, r0
   151b8:	ldr	r0, [r3, #8]
   151bc:	bl	113e8 <strlen@plt>
   151c0:	add	r0, r8, r0
   151c4:	add	r0, r0, #1
   151c8:	bl	18ca4 <argp_parse@@Base+0x1a34>
   151cc:	cmp	r4, #0
   151d0:	cmpne	r0, #0
   151d4:	mov	r7, r0
   151d8:	beq	15458 <__assert_fail@plt+0x3ef0>
   151dc:	ldr	r3, [sp, #36]	; 0x24
   151e0:	ldr	r2, [pc, #704]	; 154a8 <__assert_fail@plt+0x3f40>
   151e4:	cmp	r3, r2
   151e8:	bhi	1546c <__assert_fail@plt+0x3f04>
   151ec:	ldr	r5, [sp, #20]
   151f0:	ldr	r9, [sp, #32]
   151f4:	ldm	r5, {r3, r4}
   151f8:	mov	r0, r9
   151fc:	rsb	r6, r4, r4, lsl #3
   15200:	mov	r1, r3
   15204:	lsl	r6, r6, #2
   15208:	mov	r2, r6
   1520c:	str	r3, [sp, #40]	; 0x28
   15210:	bl	113b8 <mempcpy@plt>
   15214:	ldr	r3, [sp, #16]
   15218:	ldr	r1, [r3, #4]
   1521c:	mov	ip, r1
   15220:	str	r1, [sp, #4]
   15224:	rsb	r2, ip, ip, lsl #3
   15228:	ldr	r1, [r3]
   1522c:	lsl	r2, r2, #2
   15230:	bl	11298 <memcpy@plt>
   15234:	ldr	r5, [r5, #8]
   15238:	mov	r2, r8
   1523c:	mov	r1, r5
   15240:	mov	r0, r7
   15244:	bl	11298 <memcpy@plt>
   15248:	cmp	r4, #0
   1524c:	beq	153bc <__assert_fail@plt+0x3e54>
   15250:	mov	r2, r9
   15254:	ldr	r3, [r2, #8]
   15258:	subs	r4, r4, #1
   1525c:	sub	r3, r3, r5
   15260:	add	r3, r7, r3
   15264:	str	r3, [r2, #8]
   15268:	add	r2, r2, #28
   1526c:	bne	15254 <__assert_fail@plt+0x3cec>
   15270:	ldr	r3, [sp, #32]
   15274:	add	r1, r3, r6
   15278:	ldr	r3, [sp, #4]
   1527c:	ldr	r2, [sp, #16]
   15280:	cmp	r3, #0
   15284:	add	r3, r7, r8
   15288:	str	r3, [sp, #12]
   1528c:	ldr	sl, [r2, #8]
   15290:	beq	153b4 <__assert_fail@plt+0x3e4c>
   15294:	sub	r8, r3, #1
   15298:	add	fp, r1, #28
   1529c:	mov	r9, r3
   152a0:	mov	r3, r8
   152a4:	mov	r8, fp
   152a8:	mov	fp, sl
   152ac:	mov	sl, r3
   152b0:	ldr	r5, [r8, #-24]	; 0xffffffe8
   152b4:	str	r9, [r8, #-20]	; 0xffffffec
   152b8:	cmp	r5, #0
   152bc:	ldr	r4, [r8, #-28]	; 0xffffffe4
   152c0:	bne	152d4 <__assert_fail@plt+0x3d6c>
   152c4:	b	15360 <__assert_fail@plt+0x3df8>
   152c8:	subs	r5, r5, #1
   152cc:	add	r4, r4, #24
   152d0:	beq	15360 <__assert_fail@plt+0x3df8>
   152d4:	ldr	r3, [r4, #12]
   152d8:	tst	r3, #8
   152dc:	bne	152c8 <__assert_fail@plt+0x3d60>
   152e0:	ldr	r6, [r4, #4]
   152e4:	sub	r3, r6, #1
   152e8:	cmp	r3, #254	; 0xfe
   152ec:	bhi	152c8 <__assert_fail@plt+0x3d60>
   152f0:	bl	113c4 <__ctype_b_loc@plt>
   152f4:	lsl	r3, r6, #1
   152f8:	ldr	r2, [r0]
   152fc:	ldrh	r3, [r2, r3]
   15300:	tst	r3, #16384	; 0x4000
   15304:	beq	152c8 <__assert_fail@plt+0x3d60>
   15308:	ldrb	r1, [fp]
   1530c:	cmp	r1, r6
   15310:	bne	152c8 <__assert_fail@plt+0x3d60>
   15314:	ldr	r3, [sp, #12]
   15318:	cmp	r7, r3
   1531c:	bcs	15348 <__assert_fail@plt+0x3de0>
   15320:	ldrb	r3, [r7]
   15324:	cmp	r3, r1
   15328:	movne	r3, r7
   1532c:	bne	15340 <__assert_fail@plt+0x3dd8>
   15330:	b	15350 <__assert_fail@plt+0x3de8>
   15334:	ldrb	r2, [r3, #1]!
   15338:	cmp	r2, r1
   1533c:	beq	15350 <__assert_fail@plt+0x3de8>
   15340:	cmp	sl, r3
   15344:	bne	15334 <__assert_fail@plt+0x3dcc>
   15348:	strb	r1, [r9]
   1534c:	add	r9, r9, #1
   15350:	subs	r5, r5, #1
   15354:	add	fp, fp, #1
   15358:	add	r4, r4, #24
   1535c:	bne	152d4 <__assert_fail@plt+0x3d6c>
   15360:	ldr	r3, [sp, #4]
   15364:	add	r8, r8, #28
   15368:	subs	r3, r3, #1
   1536c:	str	r3, [sp, #4]
   15370:	bne	152b0 <__assert_fail@plt+0x3d48>
   15374:	mov	r3, #0
   15378:	strb	r3, [r9]
   1537c:	ldr	r0, [sp, #40]	; 0x28
   15380:	bl	18108 <argp_parse@@Base+0xe98>
   15384:	ldr	r4, [sp, #20]
   15388:	ldr	r0, [r4, #8]
   1538c:	bl	18108 <argp_parse@@Base+0xe98>
   15390:	ldr	r2, [sp, #32]
   15394:	str	r2, [r4]
   15398:	ldr	r2, [sp, #36]	; 0x24
   1539c:	stmib	r4, {r2, r7}
   153a0:	b	15160 <__assert_fail@plt+0x3bf8>
   153a4:	ldr	r1, [sp, #28]
   153a8:	b	150e0 <__assert_fail@plt+0x3b78>
   153ac:	ldr	r2, [sp, #44]	; 0x2c
   153b0:	b	15118 <__assert_fail@plt+0x3bb0>
   153b4:	ldr	r9, [sp, #12]
   153b8:	b	15374 <__assert_fail@plt+0x3e0c>
   153bc:	ldr	r1, [sp, #32]
   153c0:	b	15278 <__assert_fail@plt+0x3d10>
   153c4:	ldr	r2, [r5, #40]	; 0x28
   153c8:	cmp	r2, #0
   153cc:	bne	1501c <__assert_fail@plt+0x3ab4>
   153d0:	ldr	r2, [r5, #44]	; 0x2c
   153d4:	cmp	r2, #0
   153d8:	bne	1501c <__assert_fail@plt+0x3ab4>
   153dc:	add	r9, r9, #28
   153e0:	mov	r5, r6
   153e4:	b	14f28 <__assert_fail@plt+0x39c0>
   153e8:	ldr	r2, [r4, #16]
   153ec:	cmp	r2, #0
   153f0:	beq	15414 <__assert_fail@plt+0x3eac>
   153f4:	str	r3, [r9, #-24]	; 0xffffffe8
   153f8:	ldr	r6, [r4, #20]
   153fc:	str	r4, [r9, #-28]	; 0xffffffe4
   15400:	cmp	r6, #0
   15404:	str	sl, [r9, #-20]	; 0xffffffec
   15408:	bne	14f68 <__assert_fail@plt+0x3a00>
   1540c:	add	r6, r5, #1
   15410:	b	14f68 <__assert_fail@plt+0x3a00>
   15414:	ldr	r6, [r4, #20]
   15418:	cmp	r6, #0
   1541c:	beq	15034 <__assert_fail@plt+0x3acc>
   15420:	str	r4, [r9, #-28]	; 0xffffffe4
   15424:	str	r3, [r9, #-24]	; 0xffffffe8
   15428:	str	sl, [r9, #-20]	; 0xffffffec
   1542c:	b	14f68 <__assert_fail@plt+0x3a00>
   15430:	ldr	r3, [pc, #116]	; 154ac <__assert_fail@plt+0x3f44>
   15434:	mov	r2, #476	; 0x1dc
   15438:	ldr	r1, [pc, #112]	; 154b0 <__assert_fail@plt+0x3f48>
   1543c:	ldr	r0, [pc, #112]	; 154b4 <__assert_fail@plt+0x3f4c>
   15440:	bl	11568 <__assert_fail@plt>
   15444:	ldr	r3, [pc, #96]	; 154ac <__assert_fail@plt+0x3f44>
   15448:	ldr	r2, [pc, #104]	; 154b8 <__assert_fail@plt+0x3f50>
   1544c:	ldr	r1, [pc, #92]	; 154b0 <__assert_fail@plt+0x3f48>
   15450:	ldr	r0, [pc, #100]	; 154bc <__assert_fail@plt+0x3f54>
   15454:	bl	11568 <__assert_fail@plt>
   15458:	ldr	r3, [pc, #96]	; 154c0 <__assert_fail@plt+0x3f58>
   1545c:	ldr	r2, [pc, #96]	; 154c4 <__assert_fail@plt+0x3f5c>
   15460:	ldr	r1, [pc, #72]	; 154b0 <__assert_fail@plt+0x3f48>
   15464:	ldr	r0, [pc, #92]	; 154c8 <__assert_fail@plt+0x3f60>
   15468:	bl	11568 <__assert_fail@plt>
   1546c:	ldr	r3, [pc, #76]	; 154c0 <__assert_fail@plt+0x3f58>
   15470:	mov	r2, #972	; 0x3cc
   15474:	ldr	r1, [pc, #52]	; 154b0 <__assert_fail@plt+0x3f48>
   15478:	ldr	r0, [pc, #76]	; 154cc <__assert_fail@plt+0x3f64>
   1547c:	bl	11568 <__assert_fail@plt>
   15480:	ldr	r3, [pc, #36]	; 154ac <__assert_fail@plt+0x3f44>
   15484:	ldr	r2, [pc, #68]	; 154d0 <__assert_fail@plt+0x3f68>
   15488:	ldr	r1, [pc, #32]	; 154b0 <__assert_fail@plt+0x3f48>
   1548c:	ldr	r0, [pc, #64]	; 154d4 <__assert_fail@plt+0x3f6c>
   15490:	bl	11568 <__assert_fail@plt>
   15494:	ldr	r3, [pc, #16]	; 154ac <__assert_fail@plt+0x3f44>
   15498:	mov	r2, #460	; 0x1cc
   1549c:	ldr	r1, [pc, #12]	; 154b0 <__assert_fail@plt+0x3f48>
   154a0:	ldr	r0, [pc, #48]	; 154d8 <__assert_fail@plt+0x3f70>
   154a4:	bl	11568 <__assert_fail@plt>
   154a8:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   154ac:	muleq	r1, r8, ip
   154b0:	andeq	sl, r1, ip, asr sp
   154b4:	andeq	sl, r1, r0, lsr #27
   154b8:	ldrdeq	r0, [r0], -sl
   154bc:	andeq	sl, r1, ip, ror sp
   154c0:	andeq	sl, r1, r4, lsr #25
   154c4:	andeq	r0, r0, sl, asr #7
   154c8:	ldrdeq	sl, [r1], -ip
   154cc:	strdeq	sl, [r1], -r8
   154d0:	andeq	r0, r0, r2, asr #3
   154d4:	andeq	sl, r1, r8, ror #26
   154d8:	andeq	sl, r1, ip, ror #26
   154dc:	cmp	r1, #0
   154e0:	push	{r4, r5, r6, r7, r8, lr}
   154e4:	beq	1555c <__assert_fail@plt+0x3ff4>
   154e8:	sub	r7, r1, #1
   154ec:	mov	r8, r2
   154f0:	mov	r6, r0
   154f4:	ldm	r6, {r4, r5}
   154f8:	cmp	r5, #0
   154fc:	sub	r5, r5, #1
   15500:	beq	15540 <__assert_fail@plt+0x3fd8>
   15504:	add	r4, r4, #24
   15508:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1550c:	mov	r1, r8
   15510:	subs	r0, r3, #0
   15514:	sub	r5, r5, #1
   15518:	beq	15534 <__assert_fail@plt+0x3fcc>
   1551c:	ldr	r3, [r4, #-12]
   15520:	tst	r3, #2
   15524:	bne	15534 <__assert_fail@plt+0x3fcc>
   15528:	bl	11208 <strcmp@plt>
   1552c:	cmp	r0, #0
   15530:	beq	15554 <__assert_fail@plt+0x3fec>
   15534:	cmn	r5, #1
   15538:	add	r4, r4, #24
   1553c:	bne	15508 <__assert_fail@plt+0x3fa0>
   15540:	sub	r7, r7, #1
   15544:	cmn	r7, #1
   15548:	add	r6, r6, #28
   1554c:	bne	154f4 <__assert_fail@plt+0x3f8c>
   15550:	mov	r6, #0
   15554:	mov	r0, r6
   15558:	pop	{r4, r5, r6, r7, r8, pc}
   1555c:	mov	r6, r1
   15560:	b	15554 <__assert_fail@plt+0x3fec>
   15564:	push	{r4, r5, r6, lr}
   15568:	subs	r4, r0, #0
   1556c:	mov	r5, r1
   15570:	beq	15584 <__assert_fail@plt+0x401c>
   15574:	mov	r1, #10
   15578:	bl	113f4 <strchr@plt>
   1557c:	adds	r4, r0, #0
   15580:	movne	r4, #1
   15584:	cmp	r5, #0
   15588:	beq	155b4 <__assert_fail@plt+0x404c>
   1558c:	ldr	r3, [r5]
   15590:	cmp	r3, #0
   15594:	beq	155b4 <__assert_fail@plt+0x404c>
   15598:	ldr	r1, [r3, #16]
   1559c:	ldr	r0, [r3, #8]
   155a0:	bl	15564 <__assert_fail@plt+0x3ffc>
   155a4:	ldr	r3, [r5, #16]!
   155a8:	cmp	r3, #0
   155ac:	add	r4, r4, r0
   155b0:	bne	15598 <__assert_fail@plt+0x4030>
   155b4:	mov	r0, r4
   155b8:	pop	{r4, r5, r6, pc}
   155bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155c0:	add	fp, sp, #32
   155c4:	sub	sp, sp, #12
   155c8:	ldr	r5, [r0, #4]
   155cc:	cmp	r5, #0
   155d0:	bne	155dc <__assert_fail@plt+0x4074>
   155d4:	sub	sp, fp, #32
   155d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155dc:	mov	r6, r0
   155e0:	ldr	r0, [r0, #8]
   155e4:	mov	r9, r1
   155e8:	bl	113e8 <strlen@plt>
   155ec:	ldr	r8, [pc, #360]	; 1575c <__assert_fail@plt+0x41f4>
   155f0:	ldr	r4, [r6]
   155f4:	sub	r7, fp, #36	; 0x24
   155f8:	add	r3, r0, #15
   155fc:	bic	r3, r3, #7
   15600:	sub	sp, sp, r3
   15604:	mov	sl, sp
   15608:	str	sp, [r7, #-4]!
   1560c:	ldr	r2, [r4, #20]
   15610:	mov	r0, r4
   15614:	mov	r3, r7
   15618:	mov	r1, r8
   1561c:	ldr	r2, [r2, #24]
   15620:	bl	139d0 <__assert_fail@plt+0x2468>
   15624:	subs	r5, r5, #1
   15628:	add	r4, r4, #28
   1562c:	bne	1560c <__assert_fail@plt+0x40a4>
   15630:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15634:	cmp	sl, r3
   15638:	bcc	1573c <__assert_fail@plt+0x41d4>
   1563c:	ldm	r6, {r4, r5}
   15640:	cmp	r5, #0
   15644:	beq	155d4 <__assert_fail@plt+0x406c>
   15648:	ldr	r7, [pc, #272]	; 15760 <__assert_fail@plt+0x41f8>
   1564c:	ldr	r2, [r4, #20]
   15650:	mov	r0, r4
   15654:	mov	r3, r9
   15658:	mov	r1, r7
   1565c:	ldr	r2, [r2, #24]
   15660:	bl	139d0 <__assert_fail@plt+0x2468>
   15664:	subs	r5, r5, #1
   15668:	add	r4, r4, #28
   1566c:	bne	1564c <__assert_fail@plt+0x40e4>
   15670:	ldm	r6, {r7, r8}
   15674:	cmp	r8, #0
   15678:	beq	155d4 <__assert_fail@plt+0x406c>
   1567c:	ldr	sl, [pc, #224]	; 15764 <__assert_fail@plt+0x41fc>
   15680:	add	r7, r7, #28
   15684:	ldr	r5, [r7, #-24]	; 0xffffffe8
   15688:	ldr	r4, [r7, #-28]	; 0xffffffe4
   1568c:	cmp	r5, #0
   15690:	movne	r6, r4
   15694:	bne	156a8 <__assert_fail@plt+0x4140>
   15698:	b	15704 <__assert_fail@plt+0x419c>
   1569c:	subs	r5, r5, #1
   156a0:	add	r4, r4, #24
   156a4:	beq	15704 <__assert_fail@plt+0x419c>
   156a8:	ldr	r2, [r4]
   156ac:	cmp	r2, #0
   156b0:	beq	1569c <__assert_fail@plt+0x4134>
   156b4:	ldr	r1, [r4, #12]
   156b8:	tst	r1, #4
   156bc:	moveq	r6, r4
   156c0:	tst	r1, #2
   156c4:	bne	1569c <__assert_fail@plt+0x4134>
   156c8:	ldr	r3, [r4, #8]
   156cc:	ldr	r0, [r6, #12]
   156d0:	cmp	r3, #0
   156d4:	orr	r1, r1, r0
   156d8:	beq	15718 <__assert_fail@plt+0x41b0>
   156dc:	tst	r1, #16
   156e0:	bne	1569c <__assert_fail@plt+0x4134>
   156e4:	tst	r1, #1
   156e8:	moveq	r1, sl
   156ec:	ldrne	r1, [pc, #116]	; 15768 <__assert_fail@plt+0x4200>
   156f0:	mov	r0, r9
   156f4:	bl	19458 <argp_parse@@Base+0x21e8>
   156f8:	subs	r5, r5, #1
   156fc:	add	r4, r4, #24
   15700:	bne	156a8 <__assert_fail@plt+0x4140>
   15704:	subs	r8, r8, #1
   15708:	add	r7, r7, #28
   1570c:	bne	15684 <__assert_fail@plt+0x411c>
   15710:	sub	sp, fp, #32
   15714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15718:	tst	r1, #16
   1571c:	bne	1569c <__assert_fail@plt+0x4134>
   15720:	ldr	r3, [r6, #8]
   15724:	cmp	r3, #0
   15728:	bne	156e4 <__assert_fail@plt+0x417c>
   1572c:	ldr	r1, [pc, #56]	; 1576c <__assert_fail@plt+0x4204>
   15730:	mov	r0, r9
   15734:	bl	19458 <argp_parse@@Base+0x21e8>
   15738:	b	1569c <__assert_fail@plt+0x4134>
   1573c:	add	r1, r3, #1
   15740:	str	r1, [fp, #-40]	; 0xffffffd8
   15744:	mov	r2, sl
   15748:	ldr	r1, [pc, #32]	; 15770 <__assert_fail@plt+0x4208>
   1574c:	strb	r5, [r3]
   15750:	mov	r0, r9
   15754:	bl	19458 <argp_parse@@Base+0x21e8>
   15758:	b	1563c <__assert_fail@plt+0x40d4>
   1575c:	andeq	r4, r1, r4, lsr #27
   15760:	andeq	r4, r1, r0, lsl #22
   15764:	andeq	sl, r1, r4, asr #28
   15768:	andeq	sl, r1, r4, lsr lr
   1576c:	andeq	sl, r1, r0, asr lr
   15770:	andeq	sl, r1, ip, lsr #28

00015774 <argp_failure@@Base>:
   15774:	push	{r3}		; (str r3, [sp, #-4]!)
   15778:	push	{r4, r5, r6, r7, lr}
   1577c:	subs	r5, r0, #0
   15780:	sub	sp, sp, #200	; 0xc8
   15784:	mov	r7, r1
   15788:	mov	r6, r2
   1578c:	beq	158dc <argp_failure@@Base+0x168>
   15790:	ldr	r3, [r5, #16]
   15794:	tst	r3, #2
   15798:	bne	158cc <argp_failure@@Base+0x158>
   1579c:	ldr	r4, [r5, #44]	; 0x2c
   157a0:	cmp	r4, #0
   157a4:	beq	158cc <argp_failure@@Base+0x158>
   157a8:	mov	r0, r4
   157ac:	bl	114e4 <flockfile@plt>
   157b0:	ldr	r0, [r5, #40]	; 0x28
   157b4:	mov	r1, r4
   157b8:	bl	111f0 <fputs_unlocked@plt>
   157bc:	ldr	r3, [sp, #220]	; 0xdc
   157c0:	cmp	r3, #0
   157c4:	beq	15820 <argp_failure@@Base+0xac>
   157c8:	ldr	r3, [r4, #20]
   157cc:	ldr	r1, [r4, #24]
   157d0:	add	r2, sp, #224	; 0xe0
   157d4:	cmp	r3, r1
   157d8:	str	r2, [sp]
   157dc:	addcc	r1, r3, #1
   157e0:	movcc	r2, #58	; 0x3a
   157e4:	strcc	r1, [r4, #20]
   157e8:	strbcc	r2, [r3]
   157ec:	bcs	15928 <argp_failure@@Base+0x1b4>
   157f0:	ldr	r3, [r4, #20]
   157f4:	ldr	r2, [r4, #24]
   157f8:	cmp	r3, r2
   157fc:	addcc	r1, r3, #1
   15800:	movcc	r2, #32
   15804:	strcc	r1, [r4, #20]
   15808:	strbcc	r2, [r3]
   1580c:	bcs	15918 <argp_failure@@Base+0x1a4>
   15810:	ldr	r2, [sp]
   15814:	ldr	r1, [sp, #220]	; 0xdc
   15818:	mov	r0, r4
   1581c:	bl	114c0 <vfprintf@plt>
   15820:	cmp	r6, #0
   15824:	beq	15888 <argp_failure@@Base+0x114>
   15828:	ldr	r3, [r4, #20]
   1582c:	ldr	r2, [r4, #24]
   15830:	cmp	r3, r2
   15834:	addcc	r1, r3, #1
   15838:	movcc	r2, #58	; 0x3a
   1583c:	strcc	r1, [r4, #20]
   15840:	strbcc	r2, [r3]
   15844:	bcs	15948 <argp_failure@@Base+0x1d4>
   15848:	ldr	r3, [r4, #20]
   1584c:	ldr	r2, [r4, #24]
   15850:	cmp	r3, r2
   15854:	addcc	r1, r3, #1
   15858:	movcc	r2, #32
   1585c:	strcc	r1, [r4, #20]
   15860:	strbcc	r2, [r3]
   15864:	bcs	15938 <argp_failure@@Base+0x1c4>
   15868:	mov	r2, #200	; 0xc8
   1586c:	mov	r1, sp
   15870:	mov	r0, r6
   15874:	bl	11424 <strerror_r@plt>
   15878:	cmp	r0, #0
   1587c:	beq	15958 <argp_failure@@Base+0x1e4>
   15880:	mov	r1, r4
   15884:	bl	111f0 <fputs_unlocked@plt>
   15888:	ldr	r3, [r4, #20]
   1588c:	ldr	r2, [r4, #24]
   15890:	cmp	r3, r2
   15894:	addcc	r1, r3, #1
   15898:	movcc	r2, #10
   1589c:	strcc	r1, [r4, #20]
   158a0:	strbcc	r2, [r3]
   158a4:	bcs	15900 <argp_failure@@Base+0x18c>
   158a8:	mov	r0, r4
   158ac:	bl	112f8 <funlockfile@plt>
   158b0:	cmp	r7, #0
   158b4:	beq	158cc <argp_failure@@Base+0x158>
   158b8:	cmp	r5, #0
   158bc:	beq	15910 <argp_failure@@Base+0x19c>
   158c0:	ldr	r3, [r5, #16]
   158c4:	tst	r3, #32
   158c8:	beq	15910 <argp_failure@@Base+0x19c>
   158cc:	add	sp, sp, #200	; 0xc8
   158d0:	pop	{r4, r5, r6, r7, lr}
   158d4:	add	sp, sp, #4
   158d8:	bx	lr
   158dc:	ldr	r3, [pc, #140]	; 15970 <argp_failure@@Base+0x1fc>
   158e0:	ldr	r4, [r3]
   158e4:	cmp	r4, #0
   158e8:	beq	158cc <argp_failure@@Base+0x158>
   158ec:	mov	r0, r4
   158f0:	bl	114e4 <flockfile@plt>
   158f4:	ldr	r3, [pc, #120]	; 15974 <argp_failure@@Base+0x200>
   158f8:	ldr	r0, [r3]
   158fc:	b	157b4 <argp_failure@@Base+0x40>
   15900:	mov	r1, #10
   15904:	mov	r0, r4
   15908:	bl	1149c <__overflow@plt>
   1590c:	b	158a8 <argp_failure@@Base+0x134>
   15910:	mov	r0, r7
   15914:	bl	113d0 <exit@plt>
   15918:	mov	r1, #32
   1591c:	mov	r0, r4
   15920:	bl	1149c <__overflow@plt>
   15924:	b	15810 <argp_failure@@Base+0x9c>
   15928:	mov	r1, #58	; 0x3a
   1592c:	mov	r0, r4
   15930:	bl	1149c <__overflow@plt>
   15934:	b	157f0 <argp_failure@@Base+0x7c>
   15938:	mov	r1, #32
   1593c:	mov	r0, r4
   15940:	bl	1149c <__overflow@plt>
   15944:	b	15868 <argp_failure@@Base+0xf4>
   15948:	mov	r1, #58	; 0x3a
   1594c:	mov	r0, r4
   15950:	bl	1149c <__overflow@plt>
   15954:	b	15848 <argp_failure@@Base+0xd4>
   15958:	mov	r0, r6
   1595c:	bl	11394 <strerror@plt>
   15960:	ldr	r3, [pc, #16]	; 15978 <argp_failure@@Base+0x204>
   15964:	cmp	r0, #0
   15968:	moveq	r0, r3
   1596c:	b	15880 <argp_failure@@Base+0x10c>
   15970:	andeq	ip, r2, r0, asr r4
   15974:	andeq	ip, r2, r8, asr #8
   15978:	andeq	sl, r1, r8, asr lr
   1597c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15980:	add	fp, sp, #32
   15984:	cmp	r2, #0
   15988:	sub	sp, sp, #116	; 0x74
   1598c:	str	r2, [fp, #-132]	; 0xffffff7c
   15990:	str	r0, [fp, #-112]	; 0xffffff90
   15994:	str	r1, [fp, #-104]	; 0xffffff98
   15998:	str	r3, [fp, #-96]	; 0xffffffa0
   1599c:	beq	15a54 <argp_failure@@Base+0x2e0>
   159a0:	ldr	sl, [pc, #4064]	; 16988 <argp_failure@@Base+0x1214>
   159a4:	mov	r0, r2
   159a8:	bl	114e4 <flockfile@plt>
   159ac:	ldr	r3, [sl, #36]	; 0x24
   159b0:	cmp	r3, #0
   159b4:	str	r3, [fp, #-108]	; 0xffffff94
   159b8:	beq	15f04 <argp_failure@@Base+0x790>
   159bc:	mov	r3, #0
   159c0:	mov	r1, r3
   159c4:	ldr	r2, [sl, #32]
   159c8:	ldr	r0, [fp, #-132]	; 0xffffff7c
   159cc:	bl	18d2c <argp_parse@@Base+0x1abc>
   159d0:	subs	r9, r0, #0
   159d4:	beq	16a48 <argp_failure@@Base+0x12d4>
   159d8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   159dc:	ands	r3, r3, #11
   159e0:	streq	r3, [fp, #-136]	; 0xffffff78
   159e4:	bne	16360 <argp_failure@@Base+0xbec>
   159e8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   159ec:	ands	r4, r3, #3
   159f0:	bne	16154 <argp_failure@@Base+0x9e0>
   159f4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   159f8:	tst	r3, #16
   159fc:	bne	16130 <argp_failure@@Base+0x9bc>
   15a00:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15a04:	tst	r3, #4
   15a08:	bne	16114 <argp_failure@@Base+0x9a0>
   15a0c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15a10:	tst	r3, #8
   15a14:	bne	15aa8 <argp_failure@@Base+0x334>
   15a18:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15a1c:	tst	r3, #32
   15a20:	bne	15edc <argp_failure@@Base+0x768>
   15a24:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15a28:	tst	r3, #64	; 0x40
   15a2c:	bne	15a5c <argp_failure@@Base+0x2e8>
   15a30:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15a34:	bl	112f8 <funlockfile@plt>
   15a38:	ldr	r3, [fp, #-136]	; 0xffffff78
   15a3c:	cmp	r3, #0
   15a40:	beq	15a4c <argp_failure@@Base+0x2d8>
   15a44:	mov	r0, r3
   15a48:	bl	13b84 <__assert_fail@plt+0x261c>
   15a4c:	mov	r0, r9
   15a50:	bl	19318 <argp_parse@@Base+0x20a8>
   15a54:	sub	sp, fp, #32
   15a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a5c:	ldr	r5, [pc, #3880]	; 1698c <argp_failure@@Base+0x1218>
   15a60:	ldr	r2, [r5]
   15a64:	cmp	r2, #0
   15a68:	beq	15a30 <argp_failure@@Base+0x2bc>
   15a6c:	cmp	r4, #0
   15a70:	beq	15a98 <argp_failure@@Base+0x324>
   15a74:	ldr	r3, [r9, #28]
   15a78:	ldr	r2, [r9, #32]
   15a7c:	cmp	r3, r2
   15a80:	bcs	16a2c <argp_failure@@Base+0x12b8>
   15a84:	add	r1, r3, #1
   15a88:	mov	r2, #10
   15a8c:	str	r1, [r9, #28]
   15a90:	strb	r2, [r3]
   15a94:	ldr	r2, [r5]
   15a98:	ldr	r1, [pc, #3824]	; 16990 <argp_failure@@Base+0x121c>
   15a9c:	mov	r0, r9
   15aa0:	bl	19458 <argp_parse@@Base+0x21e8>
   15aa4:	b	15a30 <argp_failure@@Base+0x2bc>
   15aa8:	ldr	r3, [fp, #-136]	; 0xffffff78
   15aac:	ldr	r3, [r3, #4]
   15ab0:	cmp	r3, #0
   15ab4:	str	r3, [fp, #-108]	; 0xffffff94
   15ab8:	beq	15a18 <argp_failure@@Base+0x2a4>
   15abc:	cmp	r4, #0
   15ac0:	beq	168dc <argp_failure@@Base+0x1168>
   15ac4:	ldr	r3, [r9, #28]
   15ac8:	ldr	r2, [r9, #32]
   15acc:	cmp	r3, r2
   15ad0:	bcs	16a80 <argp_failure@@Base+0x130c>
   15ad4:	add	r1, r3, #1
   15ad8:	mov	r2, #10
   15adc:	str	r1, [r9, #28]
   15ae0:	strb	r2, [r3]
   15ae4:	ldr	r3, [fp, #-136]	; 0xffffff78
   15ae8:	ldr	r2, [fp, #-136]	; 0xffffff78
   15aec:	ldr	r3, [r3, #4]
   15af0:	ldr	r8, [r2]
   15af4:	str	r3, [fp, #-108]	; 0xffffff94
   15af8:	ldr	r3, [fp, #-108]	; 0xffffff94
   15afc:	cmp	r3, #0
   15b00:	mov	r3, #0
   15b04:	str	r3, [fp, #-88]	; 0xffffffa8
   15b08:	str	r3, [fp, #-84]	; 0xffffffac
   15b0c:	str	r3, [fp, #-80]	; 0xffffffb0
   15b10:	beq	15ecc <argp_failure@@Base+0x758>
   15b14:	str	sl, [fp, #-100]	; 0xffffff9c
   15b18:	ldr	lr, [r9, #28]
   15b1c:	ldr	r3, [r9, #24]
   15b20:	ldr	r5, [r9, #16]
   15b24:	sub	lr, lr, r3
   15b28:	cmp	lr, r5
   15b2c:	ldr	r6, [r8]
   15b30:	ldr	sl, [r8, #8]
   15b34:	bhi	16634 <argp_failure@@Base+0xec0>
   15b38:	ldr	r1, [r9, #4]
   15b3c:	ldr	r7, [r6, #12]
   15b40:	str	r1, [fp, #-116]	; 0xffffff8c
   15b44:	ldr	r1, [r9, #12]
   15b48:	mov	r3, #0
   15b4c:	str	r1, [fp, #-120]	; 0xffffff88
   15b50:	sub	r1, fp, #88	; 0x58
   15b54:	str	r3, [r9, #4]
   15b58:	and	r2, r7, #8
   15b5c:	str	r1, [fp, #-68]	; 0xffffffbc
   15b60:	ldr	r1, [fp, #-104]	; 0xffffff98
   15b64:	mov	r0, #1
   15b68:	cmp	r2, r3
   15b6c:	mov	r4, r2
   15b70:	str	r0, [fp, #-64]	; 0xffffffc0
   15b74:	str	r8, [fp, #-76]	; 0xffffffb4
   15b78:	str	r9, [fp, #-72]	; 0xffffffb8
   15b7c:	str	r1, [fp, #-60]	; 0xffffffc4
   15b80:	bne	164c0 <argp_failure@@Base+0xd4c>
   15b84:	ldr	ip, [r8, #4]
   15b88:	cmp	ip, r3
   15b8c:	beq	15bb8 <argp_failure@@Base+0x444>
   15b90:	add	r0, r6, #24
   15b94:	ldr	r3, [r0, #-24]	; 0xffffffe8
   15b98:	cmp	r3, #0
   15b9c:	beq	15bac <argp_failure@@Base+0x438>
   15ba0:	ldr	r3, [r0, #-12]
   15ba4:	tst	r3, #2
   15ba8:	beq	164bc <argp_failure@@Base+0xd48>
   15bac:	subs	ip, ip, #1
   15bb0:	add	r0, r0, #24
   15bb4:	bne	15b94 <argp_failure@@Base+0x420>
   15bb8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15bbc:	cmp	lr, r5
   15bc0:	str	r2, [fp, #-128]	; 0xffffff80
   15bc4:	ldr	r5, [r3, #8]
   15bc8:	bhi	164d4 <argp_failure@@Base+0xd60>
   15bcc:	str	r5, [r9, #12]
   15bd0:	ldr	r5, [r8, #4]
   15bd4:	cmp	r5, #0
   15bd8:	beq	15c5c <argp_failure@@Base+0x4e8>
   15bdc:	mov	r4, r6
   15be0:	str	r8, [fp, #-124]	; 0xffffff84
   15be4:	b	15bfc <argp_failure@@Base+0x488>
   15be8:	subs	r5, r5, #1
   15bec:	add	r4, r4, #24
   15bf0:	beq	15c50 <argp_failure@@Base+0x4dc>
   15bf4:	ldr	r7, [r4, #12]
   15bf8:	and	r2, r7, #8
   15bfc:	cmp	r2, #0
   15c00:	bne	15be8 <argp_failure@@Base+0x474>
   15c04:	ldr	r8, [r4, #4]
   15c08:	sub	r2, r8, #1
   15c0c:	cmp	r2, #254	; 0xfe
   15c10:	bhi	15be8 <argp_failure@@Base+0x474>
   15c14:	bl	113c4 <__ctype_b_loc@plt>
   15c18:	lsl	r2, r8, #1
   15c1c:	ldr	r1, [r0]
   15c20:	ldrh	r2, [r1, r2]
   15c24:	tst	r2, #16384	; 0x4000
   15c28:	beq	15be8 <argp_failure@@Base+0x474>
   15c2c:	ldrb	r2, [sl]
   15c30:	cmp	r8, r2
   15c34:	bne	15be8 <argp_failure@@Base+0x474>
   15c38:	tst	r7, #2
   15c3c:	beq	16580 <argp_failure@@Base+0xe0c>
   15c40:	subs	r5, r5, #1
   15c44:	add	sl, sl, #1
   15c48:	add	r4, r4, #24
   15c4c:	bne	15bf4 <argp_failure@@Base+0x480>
   15c50:	ldr	r4, [r6, #12]
   15c54:	ldr	r8, [fp, #-124]	; 0xffffff84
   15c58:	and	r4, r4, #8
   15c5c:	ldr	r3, [r9, #28]
   15c60:	ldr	r1, [r9, #24]
   15c64:	cmp	r4, #0
   15c68:	ldr	r2, [r9, #16]
   15c6c:	sub	r3, r3, r1
   15c70:	beq	164ec <argp_failure@@Base+0xd78>
   15c74:	cmp	r3, r2
   15c78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15c7c:	ldr	r4, [r3, #16]
   15c80:	bhi	167b4 <argp_failure@@Base+0x1040>
   15c84:	str	r4, [r9, #12]
   15c88:	ldr	r5, [r8, #4]
   15c8c:	cmp	r5, #0
   15c90:	addne	r4, r6, #24
   15c94:	bne	15ca8 <argp_failure@@Base+0x534>
   15c98:	b	15d38 <argp_failure@@Base+0x5c4>
   15c9c:	subs	r5, r5, #1
   15ca0:	add	r4, r4, #24
   15ca4:	beq	15d38 <argp_failure@@Base+0x5c4>
   15ca8:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15cac:	cmp	r3, #0
   15cb0:	beq	15c9c <argp_failure@@Base+0x528>
   15cb4:	ldr	r3, [r4, #-12]
   15cb8:	tst	r3, #2
   15cbc:	bne	15c9c <argp_failure@@Base+0x528>
   15cc0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15cc4:	sub	r1, fp, #76	; 0x4c
   15cc8:	ldr	r0, [r3, #16]
   15ccc:	bl	13eb4 <__assert_fail@plt+0x294c>
   15cd0:	ldr	sl, [r4, #-24]	; 0xffffffe8
   15cd4:	mov	r0, sl
   15cd8:	bl	113e8 <strlen@plt>
   15cdc:	subs	r7, r0, #0
   15ce0:	beq	15c9c <argp_failure@@Base+0x528>
   15ce4:	ldr	r2, [r9, #28]
   15ce8:	ldr	lr, [r9, #32]
   15cec:	add	ip, r2, r7
   15cf0:	cmp	lr, ip
   15cf4:	mov	r1, r7
   15cf8:	mov	r0, r9
   15cfc:	bcs	15d10 <argp_failure@@Base+0x59c>
   15d00:	bl	19438 <argp_parse@@Base+0x21c8>
   15d04:	cmp	r0, #0
   15d08:	beq	15c9c <argp_failure@@Base+0x528>
   15d0c:	ldr	r2, [r9, #28]
   15d10:	mov	r0, r2
   15d14:	mov	r1, sl
   15d18:	mov	r2, r7
   15d1c:	bl	11298 <memcpy@plt>
   15d20:	ldr	r2, [r9, #28]
   15d24:	subs	r5, r5, #1
   15d28:	add	r3, r2, r7
   15d2c:	str	r3, [r9, #28]
   15d30:	add	r4, r4, #24
   15d34:	bne	15ca8 <argp_failure@@Base+0x534>
   15d38:	ldr	r3, [r9, #28]
   15d3c:	ldr	r1, [r9, #24]
   15d40:	ldr	r2, [r9, #16]
   15d44:	sub	r3, r3, r1
   15d48:	cmp	r3, r2
   15d4c:	bhi	16768 <argp_failure@@Base+0xff4>
   15d50:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15d54:	mov	r3, #0
   15d58:	cmp	r2, r3
   15d5c:	str	r3, [r9, #4]
   15d60:	beq	16650 <argp_failure@@Base+0xedc>
   15d64:	ldr	r3, [r6, #12]
   15d68:	tst	r3, #8
   15d6c:	bne	15d98 <argp_failure@@Base+0x624>
   15d70:	ldr	r4, [r6, #4]
   15d74:	sub	r3, r4, #1
   15d78:	cmp	r3, #254	; 0xfe
   15d7c:	bhi	15d98 <argp_failure@@Base+0x624>
   15d80:	bl	113c4 <__ctype_b_loc@plt>
   15d84:	lsl	r4, r4, #1
   15d88:	ldr	r3, [r0]
   15d8c:	ldrh	r3, [r3, r4]
   15d90:	tst	r3, #16384	; 0x4000
   15d94:	bne	15da4 <argp_failure@@Base+0x630>
   15d98:	ldr	r3, [r6]
   15d9c:	cmp	r3, #0
   15da0:	beq	16a18 <argp_failure@@Base+0x12a4>
   15da4:	ldr	r3, [r9, #28]
   15da8:	ldr	r1, [r9, #24]
   15dac:	ldr	r2, [r9, #16]
   15db0:	sub	r3, r3, r1
   15db4:	cmp	r3, r2
   15db8:	bhi	16600 <argp_failure@@Base+0xe8c>
   15dbc:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15dc0:	str	r3, [r9, #4]
   15dc4:	ldr	r3, [fp, #-108]	; 0xffffff94
   15dc8:	add	r8, r8, #28
   15dcc:	subs	r3, r3, #1
   15dd0:	str	r3, [fp, #-108]	; 0xffffff94
   15dd4:	ldr	r3, [fp, #-120]	; 0xffffff88
   15dd8:	str	r3, [r9, #12]
   15ddc:	bne	15b18 <argp_failure@@Base+0x3a4>
   15de0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15de4:	ldr	sl, [fp, #-100]	; 0xffffff9c
   15de8:	cmp	r3, #0
   15dec:	beq	15ecc <argp_failure@@Base+0x758>
   15df0:	ldr	r3, [sl, #4]
   15df4:	cmp	r3, #0
   15df8:	beq	15ecc <argp_failure@@Base+0x758>
   15dfc:	ldr	r3, [fp, #-104]	; 0xffffff98
   15e00:	ldr	r1, [pc, #2956]	; 16994 <argp_failure@@Base+0x1220>
   15e04:	cmp	r3, #0
   15e08:	ldr	r0, [pc, #2952]	; 16998 <argp_failure@@Base+0x1224>
   15e0c:	ldrne	r2, [r3]
   15e10:	ldreq	r2, [fp, #-104]	; 0xffffff98
   15e14:	ldr	r3, [fp, #-104]	; 0xffffff98
   15e18:	bl	13c64 <__assert_fail@plt+0x26fc>
   15e1c:	subs	r4, r0, #0
   15e20:	beq	15ecc <argp_failure@@Base+0x758>
   15e24:	ldrb	r3, [r4]
   15e28:	cmp	r3, #0
   15e2c:	beq	15ec0 <argp_failure@@Base+0x74c>
   15e30:	ldr	r3, [r9, #28]
   15e34:	ldr	r2, [r9, #32]
   15e38:	cmp	r3, r2
   15e3c:	bcs	16adc <argp_failure@@Base+0x1368>
   15e40:	add	r1, r3, #1
   15e44:	mov	r2, #10
   15e48:	str	r1, [r9, #28]
   15e4c:	strb	r2, [r3]
   15e50:	mov	r0, r4
   15e54:	bl	113e8 <strlen@plt>
   15e58:	subs	r5, r0, #0
   15e5c:	beq	16ab8 <argp_failure@@Base+0x1344>
   15e60:	ldr	r0, [r9, #28]
   15e64:	ldr	r2, [r9, #32]
   15e68:	add	r3, r0, r5
   15e6c:	cmp	r2, r3
   15e70:	bcs	15e8c <argp_failure@@Base+0x718>
   15e74:	mov	r1, r5
   15e78:	mov	r0, r9
   15e7c:	bl	19438 <argp_parse@@Base+0x21c8>
   15e80:	cmp	r0, #0
   15e84:	beq	16ab8 <argp_failure@@Base+0x1344>
   15e88:	ldr	r0, [r9, #28]
   15e8c:	mov	r2, r5
   15e90:	mov	r1, r4
   15e94:	bl	11298 <memcpy@plt>
   15e98:	ldr	r3, [r9, #28]
   15e9c:	add	r3, r3, r5
   15ea0:	str	r3, [r9, #28]
   15ea4:	ldr	r2, [r9, #32]
   15ea8:	cmp	r2, r3
   15eac:	bls	16ac0 <argp_failure@@Base+0x134c>
   15eb0:	add	r1, r3, #1
   15eb4:	mov	r2, #10
   15eb8:	str	r1, [r9, #28]
   15ebc:	strb	r2, [r3]
   15ec0:	ldr	r3, [pc, #2768]	; 16998 <argp_failure@@Base+0x1224>
   15ec4:	cmp	r4, r3
   15ec8:	bne	16a0c <argp_failure@@Base+0x1298>
   15ecc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15ed0:	mov	r4, #1
   15ed4:	tst	r3, #32
   15ed8:	beq	15a24 <argp_failure@@Base+0x2b0>
   15edc:	mov	r3, #0
   15ee0:	str	r3, [sp]
   15ee4:	str	r9, [sp, #4]
   15ee8:	mov	r3, r4
   15eec:	ldr	r1, [fp, #-104]	; 0xffffff98
   15ef0:	ldr	r0, [fp, #-112]	; 0xffffff90
   15ef4:	mov	r2, #1
   15ef8:	bl	14060 <__assert_fail@plt+0x2af8>
   15efc:	orr	r4, r4, r0
   15f00:	b	15a24 <argp_failure@@Base+0x2b0>
   15f04:	ldr	r0, [pc, #2704]	; 1699c <argp_failure@@Base+0x1228>
   15f08:	bl	11364 <getenv@plt>
   15f0c:	mov	lr, sl
   15f10:	sub	r3, fp, #76	; 0x4c
   15f14:	mov	ip, r3
   15f18:	str	r3, [fp, #-100]	; 0xffffff9c
   15f1c:	mov	r6, r0
   15f20:	ldm	lr!, {r0, r1, r2, r3}
   15f24:	cmp	r6, #0
   15f28:	stmia	ip!, {r0, r1, r2, r3}
   15f2c:	ldm	lr!, {r0, r1, r2, r3}
   15f30:	stmia	ip!, {r0, r1, r2, r3}
   15f34:	ldm	lr, {r0, r1}
   15f38:	stm	ip, {r0, r1}
   15f3c:	beq	159bc <argp_failure@@Base+0x248>
   15f40:	ldrb	r9, [r6]
   15f44:	ldr	r8, [pc, #2644]	; 169a0 <argp_failure@@Base+0x122c>
   15f48:	cmp	r9, #0
   15f4c:	beq	160a0 <argp_failure@@Base+0x92c>
   15f50:	bl	113c4 <__ctype_b_loc@plt>
   15f54:	mov	r5, r0
   15f58:	ldr	r1, [r0]
   15f5c:	b	15f64 <argp_failure@@Base+0x7f0>
   15f60:	ldrb	r9, [r6, #1]!
   15f64:	lsl	r3, r9, #1
   15f68:	ldrh	r3, [r1, r3]
   15f6c:	tst	r3, #8192	; 0x2000
   15f70:	bne	15f60 <argp_failure@@Base+0x7ec>
   15f74:	ands	r2, r3, #1024	; 0x400
   15f78:	beq	16098 <argp_failure@@Base+0x924>
   15f7c:	cmp	r9, #95	; 0x5f
   15f80:	cmpne	r9, #45	; 0x2d
   15f84:	lsl	r3, r3, #28
   15f88:	moveq	r7, #1
   15f8c:	movne	r7, #0
   15f90:	orrs	r3, r7, r3, lsr #31
   15f94:	beq	16854 <argp_failure@@Base+0x10e0>
   15f98:	mov	r4, r6
   15f9c:	ldrb	r3, [r4, #1]!
   15fa0:	cmp	r3, #95	; 0x5f
   15fa4:	cmpne	r3, #45	; 0x2d
   15fa8:	lsl	r2, r3, #1
   15fac:	moveq	r0, #1
   15fb0:	ldrh	r2, [r1, r2]
   15fb4:	movne	r0, #0
   15fb8:	lsl	ip, r2, #28
   15fbc:	orrs	r0, r0, ip, lsr #31
   15fc0:	bne	15f9c <argp_failure@@Base+0x828>
   15fc4:	tst	r2, #8192	; 0x2000
   15fc8:	sub	r7, r4, r6
   15fcc:	beq	15fe4 <argp_failure@@Base+0x870>
   15fd0:	ldrb	r3, [r4, #1]!
   15fd4:	lsl	r2, r3, #1
   15fd8:	ldrh	r2, [r1, r2]
   15fdc:	tst	r2, #8192	; 0x2000
   15fe0:	bne	15fd0 <argp_failure@@Base+0x85c>
   15fe4:	cmp	r3, #44	; 0x2c
   15fe8:	cmpne	r3, #0
   15fec:	beq	16100 <argp_failure@@Base+0x98c>
   15ff0:	cmp	r3, #61	; 0x3d
   15ff4:	beq	1645c <argp_failure@@Base+0xce8>
   15ff8:	ldrb	r3, [r4]
   15ffc:	lsl	r3, r3, #1
   16000:	ldrh	r3, [r1, r3]
   16004:	tst	r3, #2048	; 0x800
   16008:	bne	163fc <argp_failure@@Base+0xc88>
   1600c:	ldr	r3, [fp, #-108]	; 0xffffff94
   16010:	mov	r9, r3
   16014:	str	r3, [fp, #-116]	; 0xffffff8c
   16018:	ldr	r5, [pc, #2436]	; 169a4 <argp_failure@@Base+0x1230>
   1601c:	b	1602c <argp_failure@@Base+0x8b8>
   16020:	add	r5, r5, #16
   16024:	cmp	r5, r8
   16028:	beq	168bc <argp_failure@@Base+0x1148>
   1602c:	mov	r0, r5
   16030:	bl	113e8 <strlen@plt>
   16034:	cmp	r0, r7
   16038:	bne	16020 <argp_failure@@Base+0x8ac>
   1603c:	mov	r2, r7
   16040:	mov	r1, r5
   16044:	mov	r0, r6
   16048:	bl	11538 <strncmp@plt>
   1604c:	cmp	r0, #0
   16050:	bne	16020 <argp_failure@@Base+0x8ac>
   16054:	cmp	r9, #0
   16058:	beq	16068 <argp_failure@@Base+0x8f4>
   1605c:	ldrb	r1, [r5, #14]
   16060:	cmp	r1, #0
   16064:	beq	16a9c <argp_failure@@Base+0x1328>
   16068:	ldrb	r3, [r5, #15]
   1606c:	sub	r2, fp, #36	; 0x24
   16070:	add	r3, r2, r3
   16074:	ldr	r2, [fp, #-116]	; 0xffffff8c
   16078:	str	r2, [r3, #-40]	; 0xffffffd8
   1607c:	cmp	r5, r8
   16080:	beq	168bc <argp_failure@@Base+0x1148>
   16084:	ldrb	r9, [r4]
   16088:	cmp	r9, #44	; 0x2c
   1608c:	beq	1679c <argp_failure@@Base+0x1028>
   16090:	mov	r6, r4
   16094:	b	15f48 <argp_failure@@Base+0x7d4>
   16098:	cmp	r9, #0
   1609c:	bne	169f4 <argp_failure@@Base+0x1280>
   160a0:	ldr	lr, [fp, #-44]	; 0xffffffd4
   160a4:	ldr	r1, [pc, #2296]	; 169a4 <argp_failure@@Base+0x1230>
   160a8:	add	r3, r1, #16
   160ac:	cmp	r3, r8
   160b0:	mov	r1, r3
   160b4:	beq	167f8 <argp_failure@@Base+0x1084>
   160b8:	ldrb	r2, [r3, #14]
   160bc:	cmp	r2, #0
   160c0:	bne	160a8 <argp_failure@@Base+0x934>
   160c4:	ldrb	r0, [r3, #15]
   160c8:	sub	ip, fp, #36	; 0x24
   160cc:	cmp	r0, #32
   160d0:	add	ip, ip, r0
   160d4:	beq	160a8 <argp_failure@@Base+0x934>
   160d8:	ldr	r0, [ip, #-40]	; 0xffffffd8
   160dc:	cmp	r0, lr
   160e0:	blt	160a8 <argp_failure@@Base+0x934>
   160e4:	ldr	r1, [pc, #2236]	; 169a8 <argp_failure@@Base+0x1234>
   160e8:	ldr	r0, [fp, #-104]	; 0xffffff98
   160ec:	stm	sp, {r1, r3}
   160f0:	ldr	r3, [pc, #2228]	; 169ac <argp_failure@@Base+0x1238>
   160f4:	mov	r1, r2
   160f8:	bl	15774 <argp_failure@@Base>
   160fc:	b	159bc <argp_failure@@Base+0x248>
   16100:	cmp	r9, #110	; 0x6e
   16104:	beq	1648c <argp_failure@@Base+0xd18>
   16108:	mov	r9, #1
   1610c:	str	r9, [fp, #-116]	; 0xffffff8c
   16110:	b	16018 <argp_failure@@Base+0x8a4>
   16114:	ldr	r3, [fp, #4]
   16118:	ldr	r1, [pc, #2192]	; 169b0 <argp_failure@@Base+0x123c>
   1611c:	mov	r2, r3
   16120:	mov	r0, r9
   16124:	bl	19458 <argp_parse@@Base+0x21e8>
   16128:	mov	r4, #1
   1612c:	b	15a0c <argp_failure@@Base+0x298>
   16130:	mov	r2, #1
   16134:	mov	r3, #0
   16138:	stm	sp, {r2, r9}
   1613c:	ldr	r1, [fp, #-104]	; 0xffffff98
   16140:	mov	r2, r3
   16144:	ldr	r0, [fp, #-112]	; 0xffffff90
   16148:	bl	14060 <__assert_fail@plt+0x2af8>
   1614c:	orr	r4, r4, r0
   16150:	b	15a00 <argp_failure@@Base+0x28c>
   16154:	ldr	r3, [fp, #-112]	; 0xffffff90
   16158:	mov	r4, #1
   1615c:	mov	r6, r4
   16160:	ldr	r1, [r3, #16]
   16164:	ldr	r0, [r3, #8]
   16168:	bl	15564 <__assert_fail@plt+0x3ffc>
   1616c:	mov	r1, #0
   16170:	add	r3, r0, #14
   16174:	bic	r3, r3, #7
   16178:	sub	sp, sp, r3
   1617c:	add	r7, sp, #8
   16180:	mov	r2, r0
   16184:	mov	r0, r7
   16188:	bl	1143c <memset@plt>
   1618c:	sub	r3, fp, #76	; 0x4c
   16190:	str	r3, [fp, #-100]	; 0xffffff9c
   16194:	ldr	r8, [fp, #-136]	; 0xffffff78
   16198:	str	r7, [fp, #-108]	; 0xffffff94
   1619c:	b	162b8 <argp_failure@@Base+0xb44>
   161a0:	cmp	r4, #0
   161a4:	ldr	r3, [fp, #-108]	; 0xffffff94
   161a8:	ldr	r5, [r9, #12]
   161ac:	ldrne	r2, [pc, #2048]	; 169b4 <argp_failure@@Base+0x1240>
   161b0:	str	r7, [r9, #12]
   161b4:	ldreq	r2, [pc, #2044]	; 169b8 <argp_failure@@Base+0x1244>
   161b8:	str	r3, [fp, #-76]	; 0xffffffb4
   161bc:	ldr	r1, [pc, #2040]	; 169bc <argp_failure@@Base+0x1248>
   161c0:	ldr	r3, [fp, #4]
   161c4:	mov	r0, r9
   161c8:	bl	19458 <argp_parse@@Base+0x21e8>
   161cc:	ldr	r3, [r9, #28]
   161d0:	ldr	r1, [r9, #24]
   161d4:	ldr	r2, [r9, #16]
   161d8:	sub	r3, r3, r1
   161dc:	cmp	r3, r2
   161e0:	ldr	r7, [sl, #28]
   161e4:	bhi	1634c <argp_failure@@Base+0xbd8>
   161e8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   161ec:	ldr	r4, [r9, #4]
   161f0:	tst	r3, #2
   161f4:	str	r7, [r9, #4]
   161f8:	beq	16330 <argp_failure@@Base+0xbbc>
   161fc:	ldr	r3, [r8, #4]
   16200:	cmp	r3, #0
   16204:	beq	16254 <argp_failure@@Base+0xae0>
   16208:	ldr	ip, [r9, #28]
   1620c:	ldr	r2, [r9, #32]
   16210:	add	r3, ip, #12
   16214:	cmp	r2, r3
   16218:	bcs	16234 <argp_failure@@Base+0xac0>
   1621c:	mov	r1, #12
   16220:	mov	r0, r9
   16224:	bl	19438 <argp_parse@@Base+0x21c8>
   16228:	cmp	r0, #0
   1622c:	beq	16254 <argp_failure@@Base+0xae0>
   16230:	ldr	ip, [r9, #28]
   16234:	ldr	r3, [pc, #1924]	; 169c0 <argp_failure@@Base+0x124c>
   16238:	ldm	r3!, {r0, r1, r2}
   1623c:	str	r0, [ip]
   16240:	str	r1, [ip, #4]
   16244:	str	r2, [ip, #8]
   16248:	ldr	r3, [r9, #28]
   1624c:	add	r3, r3, #12
   16250:	str	r3, [r9, #28]
   16254:	mov	r3, r6
   16258:	ldr	r1, [fp, #-104]	; 0xffffff98
   1625c:	str	r9, [sp]
   16260:	ldr	r2, [fp, #-100]	; 0xffffff9c
   16264:	ldr	r0, [fp, #-112]	; 0xffffff90
   16268:	bl	14b9c <__assert_fail@plt+0x3634>
   1626c:	ldr	r3, [r9, #28]
   16270:	ldr	r1, [r9, #24]
   16274:	sub	r1, r3, r1
   16278:	mov	r7, r0
   1627c:	ldr	r0, [r9, #16]
   16280:	cmp	r1, r0
   16284:	strls	r5, [r9, #12]
   16288:	bhi	162fc <argp_failure@@Base+0xb88>
   1628c:	ldr	r1, [r9, #32]
   16290:	str	r4, [r9, #4]
   16294:	cmp	r1, r3
   16298:	bls	162e0 <argp_failure@@Base+0xb6c>
   1629c:	add	r1, r3, #1
   162a0:	mov	r2, #10
   162a4:	str	r1, [r9, #28]
   162a8:	strb	r2, [r3]
   162ac:	cmp	r7, #0
   162b0:	mov	r4, #0
   162b4:	beq	16358 <argp_failure@@Base+0xbe4>
   162b8:	ldr	r3, [r9, #28]
   162bc:	ldr	r1, [r9, #24]
   162c0:	ldr	r2, [r9, #16]
   162c4:	sub	r3, r3, r1
   162c8:	cmp	r3, r2
   162cc:	ldr	r7, [sl, #28]
   162d0:	bls	161a0 <argp_failure@@Base+0xa2c>
   162d4:	mov	r0, r9
   162d8:	bl	18da8 <argp_parse@@Base+0x1b38>
   162dc:	b	161a0 <argp_failure@@Base+0xa2c>
   162e0:	mov	r1, r6
   162e4:	mov	r0, r9
   162e8:	bl	19438 <argp_parse@@Base+0x21c8>
   162ec:	cmp	r0, #0
   162f0:	beq	162ac <argp_failure@@Base+0xb38>
   162f4:	ldr	r3, [r9, #28]
   162f8:	b	1629c <argp_failure@@Base+0xb28>
   162fc:	mov	r0, r9
   16300:	bl	18da8 <argp_parse@@Base+0x1b38>
   16304:	ldr	r3, [r9, #28]
   16308:	ldr	r1, [r9, #24]
   1630c:	ldr	r0, [r9, #16]
   16310:	sub	r1, r3, r1
   16314:	cmp	r1, r0
   16318:	str	r5, [r9, #12]
   1631c:	bls	1628c <argp_failure@@Base+0xb18>
   16320:	mov	r0, r9
   16324:	bl	18da8 <argp_parse@@Base+0x1b38>
   16328:	ldr	r3, [r9, #28]
   1632c:	b	1628c <argp_failure@@Base+0xb18>
   16330:	mov	r1, r9
   16334:	mov	r0, r8
   16338:	bl	155bc <__assert_fail@plt+0x4054>
   1633c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16340:	orr	r3, r3, #2
   16344:	str	r3, [fp, #-96]	; 0xffffffa0
   16348:	b	16254 <argp_failure@@Base+0xae0>
   1634c:	mov	r0, r9
   16350:	bl	18da8 <argp_parse@@Base+0x1b38>
   16354:	b	161e8 <argp_failure@@Base+0xa74>
   16358:	mov	r4, #1
   1635c:	b	159f4 <argp_failure@@Base+0x280>
   16360:	mov	r1, #0
   16364:	ldr	r0, [fp, #-112]	; 0xffffff90
   16368:	bl	14dec <__assert_fail@plt+0x3884>
   1636c:	ldr	r2, [pc, #1616]	; 169c4 <argp_failure@@Base+0x1250>
   16370:	ldr	r4, [r0, #4]
   16374:	ldr	r5, [r0]
   16378:	mov	r1, r4
   1637c:	mov	r6, r0
   16380:	str	r0, [fp, #-136]	; 0xffffff78
   16384:	mov	r0, r5
   16388:	bl	154dc <__assert_fail@plt+0x3f74>
   1638c:	ldr	r2, [pc, #1588]	; 169c8 <argp_failure@@Base+0x1254>
   16390:	cmp	r0, #0
   16394:	mvnne	r3, #0
   16398:	strne	r3, [r0, #12]
   1639c:	movne	r3, r6
   163a0:	mov	r0, r5
   163a4:	ldrne	r4, [r3, #4]
   163a8:	mov	r1, r4
   163ac:	bl	154dc <__assert_fail@plt+0x3f74>
   163b0:	cmp	r0, #0
   163b4:	mvnne	r3, #0
   163b8:	strne	r3, [r0, #12]
   163bc:	ldrne	r3, [fp, #-136]	; 0xffffff78
   163c0:	ldrne	r4, [r3, #4]
   163c4:	cmp	r4, #0
   163c8:	beq	159e8 <argp_failure@@Base+0x274>
   163cc:	mov	r3, r5
   163d0:	mov	r1, #0
   163d4:	str	r1, [r3, #24]
   163d8:	add	r1, r1, #1
   163dc:	cmp	r1, r4
   163e0:	add	r3, r3, #28
   163e4:	bne	163d4 <argp_failure@@Base+0xc60>
   163e8:	mov	r0, r5
   163ec:	ldr	r3, [pc, #1496]	; 169cc <argp_failure@@Base+0x1258>
   163f0:	mov	r2, #28
   163f4:	bl	114fc <qsort@plt>
   163f8:	b	159e8 <argp_failure@@Base+0x274>
   163fc:	mov	r2, #10
   16400:	mov	r1, #0
   16404:	mov	r0, r4
   16408:	bl	11214 <strtol@plt>
   1640c:	ldrb	r3, [r4]
   16410:	ldr	r2, [r5]
   16414:	lsl	r3, r3, #1
   16418:	ldrh	r3, [r2, r3]
   1641c:	tst	r3, #2048	; 0x800
   16420:	str	r0, [fp, #-116]	; 0xffffff8c
   16424:	beq	1644c <argp_failure@@Base+0xcd8>
   16428:	ldrb	r3, [r4, #1]!
   1642c:	lsl	r3, r3, #1
   16430:	ldrh	r3, [r2, r3]
   16434:	tst	r3, #2048	; 0x800
   16438:	bne	16428 <argp_failure@@Base+0xcb4>
   1643c:	b	1644c <argp_failure@@Base+0xcd8>
   16440:	ldrb	r3, [r4, #1]!
   16444:	lsl	r3, r3, #1
   16448:	ldrh	r3, [r2, r3]
   1644c:	tst	r3, #8192	; 0x2000
   16450:	bne	16440 <argp_failure@@Base+0xccc>
   16454:	ldr	r9, [fp, #-108]	; 0xffffff94
   16458:	b	16018 <argp_failure@@Base+0x8a4>
   1645c:	ldrb	r3, [r4, #1]
   16460:	add	r4, r4, #1
   16464:	lsl	r3, r3, #1
   16468:	ldrh	r3, [r1, r3]
   1646c:	tst	r3, #8192	; 0x2000
   16470:	beq	16004 <argp_failure@@Base+0x890>
   16474:	ldrb	r3, [r4, #1]!
   16478:	lsl	r3, r3, #1
   1647c:	ldrh	r3, [r1, r3]
   16480:	tst	r3, #8192	; 0x2000
   16484:	bne	16474 <argp_failure@@Base+0xd00>
   16488:	b	16004 <argp_failure@@Base+0x890>
   1648c:	ldrb	r3, [r6, #1]
   16490:	cmp	r3, #111	; 0x6f
   16494:	bne	16108 <argp_failure@@Base+0x994>
   16498:	ldrb	r3, [r6, #2]
   1649c:	cmp	r3, #45	; 0x2d
   164a0:	bne	16108 <argp_failure@@Base+0x994>
   164a4:	ldr	r3, [fp, #-108]	; 0xffffff94
   164a8:	add	r6, r6, #3
   164ac:	sub	r7, r7, #3
   164b0:	str	r3, [fp, #-116]	; 0xffffff8c
   164b4:	mov	r9, #1
   164b8:	b	16018 <argp_failure@@Base+0x8a4>
   164bc:	mov	r3, #1
   164c0:	str	r3, [fp, #-128]	; 0xffffff80
   164c4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   164c8:	cmp	lr, r5
   164cc:	ldr	r5, [r3, #8]
   164d0:	bls	15bcc <argp_failure@@Base+0x458>
   164d4:	mov	r0, r9
   164d8:	bl	18da8 <argp_parse@@Base+0x1b38>
   164dc:	ldr	r7, [r6, #12]
   164e0:	and	r2, r7, #8
   164e4:	mov	r4, r2
   164e8:	b	15bcc <argp_failure@@Base+0x458>
   164ec:	cmp	r3, r2
   164f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   164f4:	ldr	r4, [r3, #12]
   164f8:	bhi	167a8 <argp_failure@@Base+0x1034>
   164fc:	str	r4, [r9, #12]
   16500:	ldr	r5, [r8, #4]
   16504:	cmp	r5, #0
   16508:	beq	15d38 <argp_failure@@Base+0x5c4>
   1650c:	add	r4, r6, #24
   16510:	ldr	r7, [fp, #-100]	; 0xffffff9c
   16514:	b	16524 <argp_failure@@Base+0xdb0>
   16518:	subs	r5, r5, #1
   1651c:	add	r4, r4, #24
   16520:	beq	15d38 <argp_failure@@Base+0x5c4>
   16524:	ldr	r3, [r4, #-24]	; 0xffffffe8
   16528:	cmp	r3, #0
   1652c:	beq	16518 <argp_failure@@Base+0xda4>
   16530:	ldr	r3, [r4, #-12]
   16534:	tst	r3, #2
   16538:	bne	16518 <argp_failure@@Base+0xda4>
   1653c:	sub	r1, fp, #76	; 0x4c
   16540:	ldr	r0, [r7, #12]
   16544:	bl	13eb4 <__assert_fail@plt+0x294c>
   16548:	ldr	r2, [r4, #-24]	; 0xffffffe8
   1654c:	ldr	r1, [pc, #1148]	; 169d0 <argp_failure@@Base+0x125c>
   16550:	mov	r0, r9
   16554:	bl	19458 <argp_parse@@Base+0x21e8>
   16558:	ldr	r3, [r6, #8]
   1655c:	ldr	r1, [pc, #1136]	; 169d4 <argp_failure@@Base+0x1260>
   16560:	subs	r2, r3, #0
   16564:	mov	r0, r9
   16568:	beq	16518 <argp_failure@@Base+0xda4>
   1656c:	ldr	ip, [r6, #12]
   16570:	tst	ip, #1
   16574:	ldrne	r1, [pc, #1116]	; 169d8 <argp_failure@@Base+0x1264>
   16578:	bl	19458 <argp_parse@@Base+0x21e8>
   1657c:	b	16518 <argp_failure@@Base+0xda4>
   16580:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16584:	sub	r1, fp, #76	; 0x4c
   16588:	ldr	r0, [r3, #8]
   1658c:	bl	13eb4 <__assert_fail@plt+0x294c>
   16590:	ldr	r3, [r9, #28]
   16594:	ldr	r2, [r9, #32]
   16598:	cmp	r3, r2
   1659c:	bcs	167dc <argp_failure@@Base+0x1068>
   165a0:	add	r2, r3, #1
   165a4:	str	r2, [r9, #28]
   165a8:	mov	r2, #45	; 0x2d
   165ac:	strb	r2, [r3]
   165b0:	ldr	r3, [r9, #28]
   165b4:	ldr	r2, [r9, #32]
   165b8:	ldrb	r7, [sl]
   165bc:	cmp	r3, r2
   165c0:	bcs	167c0 <argp_failure@@Base+0x104c>
   165c4:	add	r2, r3, #1
   165c8:	str	r2, [r9, #28]
   165cc:	strb	r7, [r3]
   165d0:	ldr	r3, [fp, #-128]	; 0xffffff80
   165d4:	cmp	r3, #0
   165d8:	beq	16774 <argp_failure@@Base+0x1000>
   165dc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   165e0:	ldr	r3, [r3]
   165e4:	cmp	r3, #0
   165e8:	bne	16774 <argp_failure@@Base+0x1000>
   165ec:	ldr	r3, [r6, #8]
   165f0:	cmp	r3, #0
   165f4:	movne	r3, #1
   165f8:	strne	r3, [fp, #-80]	; 0xffffffb0
   165fc:	b	15c40 <argp_failure@@Base+0x4cc>
   16600:	mov	r0, r9
   16604:	bl	18da8 <argp_parse@@Base+0x1b38>
   16608:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1660c:	ldr	r3, [r9, #28]
   16610:	ldr	r1, [r9, #24]
   16614:	str	r2, [r9, #4]
   16618:	ldr	r2, [r9, #16]
   1661c:	sub	r3, r3, r1
   16620:	cmp	r3, r2
   16624:	bls	15dc4 <argp_failure@@Base+0x650>
   16628:	mov	r0, r9
   1662c:	bl	18da8 <argp_parse@@Base+0x1b38>
   16630:	b	15dc4 <argp_failure@@Base+0x650>
   16634:	mov	r0, r9
   16638:	bl	18da8 <argp_parse@@Base+0x1b38>
   1663c:	ldr	lr, [r9, #28]
   16640:	ldr	r2, [r9, #24]
   16644:	ldr	r5, [r9, #16]
   16648:	sub	lr, lr, r2
   1664c:	b	15b38 <argp_failure@@Base+0x3c4>
   16650:	ldr	r4, [r6, #16]
   16654:	ldr	r1, [r6, #4]
   16658:	mov	r0, r4
   1665c:	ldr	r3, [fp, #-104]	; 0xffffff98
   16660:	ldr	r2, [r8, #20]
   16664:	bl	13c64 <__assert_fail@plt+0x26fc>
   16668:	subs	r5, r0, #0
   1666c:	beq	16724 <argp_failure@@Base+0xfb0>
   16670:	ldrb	r3, [r5]
   16674:	cmp	r3, #0
   16678:	beq	16714 <argp_failure@@Base+0xfa0>
   1667c:	ldr	r3, [r9, #28]
   16680:	ldr	r1, [r9, #24]
   16684:	ldr	r2, [r9, #16]
   16688:	sub	r3, r3, r1
   1668c:	cmp	r3, r2
   16690:	bhi	16914 <argp_failure@@Base+0x11a0>
   16694:	ldr	r7, [r9, #20]
   16698:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1669c:	bic	r7, r7, r7, asr #31
   166a0:	ldr	r6, [r3, #20]
   166a4:	mov	r3, r6
   166a8:	str	r6, [r9, #4]
   166ac:	add	r2, r6, #3
   166b0:	cmp	r2, r7
   166b4:	str	r3, [r9, #12]
   166b8:	bcs	16864 <argp_failure@@Base+0x10f0>
   166bc:	ldr	r3, [r9, #28]
   166c0:	ldr	r2, [r9, #32]
   166c4:	cmp	r3, r2
   166c8:	bcs	16a64 <argp_failure@@Base+0x12f0>
   166cc:	add	r1, r3, #1
   166d0:	mov	r2, #10
   166d4:	str	r1, [r9, #28]
   166d8:	strb	r2, [r3]
   166dc:	mov	r0, r5
   166e0:	bl	113e8 <strlen@plt>
   166e4:	subs	r6, r0, #0
   166e8:	beq	16714 <argp_failure@@Base+0xfa0>
   166ec:	ldr	r0, [r9, #28]
   166f0:	ldr	r2, [r9, #32]
   166f4:	add	r3, r0, r6
   166f8:	cmp	r2, r3
   166fc:	bcs	168f8 <argp_failure@@Base+0x1184>
   16700:	mov	r1, r6
   16704:	mov	r0, r9
   16708:	bl	19438 <argp_parse@@Base+0x21c8>
   1670c:	cmp	r0, #0
   16710:	bne	168f4 <argp_failure@@Base+0x1180>
   16714:	cmp	r4, r5
   16718:	beq	16724 <argp_failure@@Base+0xfb0>
   1671c:	mov	r0, r5
   16720:	bl	18108 <argp_parse@@Base+0xe98>
   16724:	ldr	r3, [r9, #28]
   16728:	ldr	r2, [r9, #24]
   1672c:	ldr	r1, [r9, #16]
   16730:	sub	r2, r3, r2
   16734:	cmp	r2, r1
   16738:	bhi	16844 <argp_failure@@Base+0x10d0>
   1673c:	ldr	r1, [r9, #32]
   16740:	mov	r2, #0
   16744:	cmp	r1, r3
   16748:	str	r2, [r9, #4]
   1674c:	bls	16828 <argp_failure@@Base+0x10b4>
   16750:	add	r1, r3, #1
   16754:	mov	r2, #10
   16758:	str	r1, [r9, #28]
   1675c:	strb	r2, [r3]
   16760:	str	r8, [fp, #-88]	; 0xffffffa8
   16764:	b	15da4 <argp_failure@@Base+0x630>
   16768:	mov	r0, r9
   1676c:	bl	18da8 <argp_parse@@Base+0x1b38>
   16770:	b	15d50 <argp_failure@@Base+0x5dc>
   16774:	ldr	r2, [r6, #8]
   16778:	cmp	r2, #0
   1677c:	beq	15c40 <argp_failure@@Base+0x4cc>
   16780:	ldr	r3, [r6, #12]
   16784:	mov	r0, r9
   16788:	tst	r3, #1
   1678c:	ldrne	r1, [pc, #584]	; 169dc <argp_failure@@Base+0x1268>
   16790:	ldreq	r1, [pc, #584]	; 169e0 <argp_failure@@Base+0x126c>
   16794:	bl	19458 <argp_parse@@Base+0x21e8>
   16798:	b	15c40 <argp_failure@@Base+0x4cc>
   1679c:	ldrb	r9, [r4, #1]
   167a0:	add	r4, r4, #1
   167a4:	b	16090 <argp_failure@@Base+0x91c>
   167a8:	mov	r0, r9
   167ac:	bl	18da8 <argp_parse@@Base+0x1b38>
   167b0:	b	164fc <argp_failure@@Base+0xd88>
   167b4:	mov	r0, r9
   167b8:	bl	18da8 <argp_parse@@Base+0x1b38>
   167bc:	b	15c84 <argp_failure@@Base+0x510>
   167c0:	mov	r1, #1
   167c4:	mov	r0, r9
   167c8:	bl	19438 <argp_parse@@Base+0x21c8>
   167cc:	cmp	r0, #0
   167d0:	beq	165d0 <argp_failure@@Base+0xe5c>
   167d4:	ldr	r3, [r9, #28]
   167d8:	b	165c4 <argp_failure@@Base+0xe50>
   167dc:	mov	r1, #1
   167e0:	mov	r0, r9
   167e4:	bl	19438 <argp_parse@@Base+0x21c8>
   167e8:	cmp	r0, #0
   167ec:	beq	165b0 <argp_failure@@Base+0xe3c>
   167f0:	ldr	r3, [r9, #28]
   167f4:	b	165a0 <argp_failure@@Base+0xe2c>
   167f8:	ldr	lr, [fp, #-100]	; 0xffffff9c
   167fc:	ldr	sl, [pc, #388]	; 16988 <argp_failure@@Base+0x1214>
   16800:	mov	r4, #1
   16804:	ldm	lr!, {r0, r1, r2, r3}
   16808:	mov	ip, sl
   1680c:	stmia	ip!, {r0, r1, r2, r3}
   16810:	ldm	lr!, {r0, r1, r2, r3}
   16814:	stmia	ip!, {r0, r1, r2, r3}
   16818:	ldm	lr, {r0, r1}
   1681c:	stm	ip, {r0, r1}
   16820:	str	r4, [sl, #36]	; 0x24
   16824:	b	159bc <argp_failure@@Base+0x248>
   16828:	mov	r1, #1
   1682c:	mov	r0, r9
   16830:	bl	19438 <argp_parse@@Base+0x21c8>
   16834:	cmp	r0, #0
   16838:	beq	16760 <argp_failure@@Base+0xfec>
   1683c:	ldr	r3, [r9, #28]
   16840:	b	16750 <argp_failure@@Base+0xfdc>
   16844:	mov	r0, r9
   16848:	bl	18da8 <argp_parse@@Base+0x1b38>
   1684c:	ldr	r3, [r9, #28]
   16850:	b	1673c <argp_failure@@Base+0xfc8>
   16854:	mov	r7, r3
   16858:	mov	r4, r6
   1685c:	mov	r3, r9
   16860:	b	15fe4 <argp_failure@@Base+0x870>
   16864:	cmp	r6, r7
   16868:	bhi	16a54 <argp_failure@@Base+0x12e0>
   1686c:	ldr	r3, [r9, #28]
   16870:	ldr	r1, [r9, #32]
   16874:	add	r2, r3, #3
   16878:	cmp	r1, r2
   1687c:	bcs	16898 <argp_failure@@Base+0x1124>
   16880:	mov	r1, #3
   16884:	mov	r0, r9
   16888:	bl	19438 <argp_parse@@Base+0x21c8>
   1688c:	cmp	r0, #0
   16890:	beq	166dc <argp_failure@@Base+0xf68>
   16894:	ldr	r3, [r9, #28]
   16898:	ldr	r2, [pc, #324]	; 169e4 <argp_failure@@Base+0x1270>
   1689c:	ldrh	r1, [r2]
   168a0:	ldrb	r2, [r2, #2]
   168a4:	strh	r1, [r3]
   168a8:	strb	r2, [r3, #2]
   168ac:	ldr	r3, [r9, #28]
   168b0:	add	r3, r3, #3
   168b4:	str	r3, [r9, #28]
   168b8:	b	166dc <argp_failure@@Base+0xf68>
   168bc:	mov	r2, #0
   168c0:	str	r6, [sp, #4]
   168c4:	str	r7, [sp]
   168c8:	ldr	r3, [pc, #280]	; 169e8 <argp_failure@@Base+0x1274>
   168cc:	mov	r1, r2
   168d0:	ldr	r0, [fp, #-104]	; 0xffffff98
   168d4:	bl	15774 <argp_failure@@Base>
   168d8:	b	16084 <argp_failure@@Base+0x910>
   168dc:	ldr	r3, [fp, #-136]	; 0xffffff78
   168e0:	ldr	r8, [r3]
   168e4:	str	r4, [fp, #-88]	; 0xffffffa8
   168e8:	str	r4, [fp, #-84]	; 0xffffffac
   168ec:	str	r4, [fp, #-80]	; 0xffffffb0
   168f0:	b	15b14 <argp_failure@@Base+0x3a0>
   168f4:	ldr	r0, [r9, #28]
   168f8:	mov	r2, r6
   168fc:	mov	r1, r5
   16900:	bl	11298 <memcpy@plt>
   16904:	ldr	r3, [r9, #28]
   16908:	add	r6, r3, r6
   1690c:	str	r6, [r9, #28]
   16910:	b	16714 <argp_failure@@Base+0xfa0>
   16914:	mov	r0, r9
   16918:	bl	18da8 <argp_parse@@Base+0x1b38>
   1691c:	ldr	r3, [r9, #28]
   16920:	ldr	r1, [r9, #24]
   16924:	ldr	r2, [r9, #16]
   16928:	ldr	r7, [r9, #20]
   1692c:	ldr	sl, [fp, #-100]	; 0xffffff9c
   16930:	sub	r3, r3, r1
   16934:	cmp	r3, r2
   16938:	ldr	r6, [sl, #20]
   1693c:	bic	r7, r7, r7, asr #31
   16940:	bls	166a4 <argp_failure@@Base+0xf30>
   16944:	mov	r0, r9
   16948:	bl	18da8 <argp_parse@@Base+0x1b38>
   1694c:	ldr	r3, [r9, #28]
   16950:	ldr	r1, [r9, #24]
   16954:	ldr	r2, [r9, #16]
   16958:	sub	r3, r3, r1
   1695c:	cmp	r3, r2
   16960:	ldr	r3, [sl, #20]
   16964:	str	r6, [r9, #4]
   16968:	movls	r6, r3
   1696c:	bls	166ac <argp_failure@@Base+0xf38>
   16970:	mov	r0, r9
   16974:	str	r3, [fp, #-124]	; 0xffffff84
   16978:	bl	18da8 <argp_parse@@Base+0x1b38>
   1697c:	ldr	r6, [sl, #20]
   16980:	ldr	r3, [fp, #-124]	; 0xffffff84
   16984:	b	166ac <argp_failure@@Base+0xf38>
   16988:	andeq	ip, r2, ip, lsl #8
   1698c:			; <UNDEFINED> instruction: 0x0002cfbc
   16990:	andeq	fp, r1, r8, lsr r0
   16994:	andeq	r0, r0, #5
   16998:	andeq	sl, r1, r4, asr #31
   1699c:	andeq	sl, r1, r0, ror lr
   169a0:	andeq	sl, r1, r0, asr #26
   169a4:			; <UNDEFINED> instruction: 0x0001acb0
   169a8:	andeq	sl, r1, ip, lsr #30
   169ac:	strdeq	sl, [r1], -r8
   169b0:	andeq	sl, r1, ip, ror #30
   169b4:	andeq	sl, r1, r4, asr #30
   169b8:	andeq	sl, r1, r4, asr pc
   169bc:	andeq	sl, r1, ip, asr #30
   169c0:	andeq	sl, r1, ip, asr pc
   169c4:	andeq	sl, r1, r4, lsr pc
   169c8:	andeq	sl, r1, ip, lsr pc
   169cc:	muleq	r1, ip, r6
   169d0:	andeq	sl, r1, ip, lsr #31
   169d4:			; <UNDEFINED> instruction: 0x0001afbc
   169d8:			; <UNDEFINED> instruction: 0x0001afb4
   169dc:	andeq	sl, r1, r4, lsr #31
   169e0:	muleq	r1, ip, r1
   169e4:	andeq	sl, r1, r0, asr #31
   169e8:			; <UNDEFINED> instruction: 0x0001aeb0
   169ec:	ldrdeq	sl, [r1], -r8
   169f0:	andeq	sl, r1, r0, lsl #29
   169f4:	str	r6, [sp]
   169f8:	ldr	r3, [pc, #-20]	; 169ec <argp_failure@@Base+0x1278>
   169fc:	mov	r1, r2
   16a00:	ldr	r0, [fp, #-104]	; 0xffffff98
   16a04:	bl	15774 <argp_failure@@Base>
   16a08:	b	160a0 <argp_failure@@Base+0x92c>
   16a0c:	mov	r0, r4
   16a10:	bl	18108 <argp_parse@@Base+0xe98>
   16a14:	b	15ecc <argp_failure@@Base+0x758>
   16a18:	ldr	r0, [r6, #16]
   16a1c:	sub	r2, fp, #76	; 0x4c
   16a20:	ldr	r1, [r8, #20]
   16a24:	bl	13ca8 <__assert_fail@plt+0x2740>
   16a28:	b	16760 <argp_failure@@Base+0xfec>
   16a2c:	mov	r1, #1
   16a30:	mov	r0, r9
   16a34:	bl	19438 <argp_parse@@Base+0x21c8>
   16a38:	cmp	r0, #0
   16a3c:	beq	15a94 <argp_failure@@Base+0x320>
   16a40:	ldr	r3, [r9, #28]
   16a44:	b	15a84 <argp_failure@@Base+0x310>
   16a48:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16a4c:	bl	112f8 <funlockfile@plt>
   16a50:	b	15a54 <argp_failure@@Base+0x2e0>
   16a54:	mov	r1, r6
   16a58:	mov	r0, r9
   16a5c:	bl	13bd0 <__assert_fail@plt+0x2668>
   16a60:	b	166dc <argp_failure@@Base+0xf68>
   16a64:	mov	r1, #1
   16a68:	mov	r0, r9
   16a6c:	bl	19438 <argp_parse@@Base+0x21c8>
   16a70:	cmp	r0, #0
   16a74:	beq	166dc <argp_failure@@Base+0xf68>
   16a78:	ldr	r3, [r9, #28]
   16a7c:	b	166cc <argp_failure@@Base+0xf58>
   16a80:	mov	r1, #1
   16a84:	mov	r0, r9
   16a88:	bl	19438 <argp_parse@@Base+0x21c8>
   16a8c:	cmp	r0, #0
   16a90:	beq	15ae4 <argp_failure@@Base+0x370>
   16a94:	ldr	r3, [r9, #28]
   16a98:	b	15ad4 <argp_failure@@Base+0x360>
   16a9c:	str	r6, [sp, #4]
   16aa0:	str	r7, [sp]
   16aa4:	ldr	r3, [pc, #-188]	; 169f0 <argp_failure@@Base+0x127c>
   16aa8:	mov	r2, #0
   16aac:	ldr	r0, [fp, #-104]	; 0xffffff98
   16ab0:	bl	15774 <argp_failure@@Base>
   16ab4:	b	1607c <argp_failure@@Base+0x908>
   16ab8:	ldr	r3, [r9, #28]
   16abc:	b	15ea4 <argp_failure@@Base+0x730>
   16ac0:	mov	r1, #1
   16ac4:	mov	r0, r9
   16ac8:	bl	19438 <argp_parse@@Base+0x21c8>
   16acc:	cmp	r0, #0
   16ad0:	beq	15ec0 <argp_failure@@Base+0x74c>
   16ad4:	ldr	r3, [r9, #28]
   16ad8:	b	15eb0 <argp_failure@@Base+0x73c>
   16adc:	mov	r1, #1
   16ae0:	mov	r0, r9
   16ae4:	bl	19438 <argp_parse@@Base+0x21c8>
   16ae8:	cmp	r0, #0
   16aec:	beq	15e50 <argp_failure@@Base+0x6dc>
   16af0:	ldr	r3, [r9, #28]
   16af4:	b	15e40 <argp_failure@@Base+0x6cc>

00016af8 <argp_help@@Base>:
   16af8:	push	{lr}		; (str lr, [sp, #-4]!)
   16afc:	sub	sp, sp, #12
   16b00:	str	r3, [sp]
   16b04:	mov	r3, r2
   16b08:	mov	r2, r1
   16b0c:	mov	r1, #0
   16b10:	bl	1597c <argp_failure@@Base+0x208>
   16b14:	add	sp, sp, #12
   16b18:	pop	{pc}		; (ldr pc, [sp], #4)

00016b1c <argp_state_help@@Base>:
   16b1c:	push	{r4, r5, lr}
   16b20:	subs	r4, r0, #0
   16b24:	sub	sp, sp, #12
   16b28:	mov	r5, r2
   16b2c:	beq	16b8c <argp_state_help@@Base+0x70>
   16b30:	ldr	r3, [r4, #16]
   16b34:	tst	r3, #2
   16b38:	bne	16b84 <argp_state_help@@Base+0x68>
   16b3c:	cmp	r1, #0
   16b40:	beq	16b84 <argp_state_help@@Base+0x68>
   16b44:	tst	r3, #64	; 0x40
   16b48:	ldr	r3, [r4, #40]	; 0x28
   16b4c:	orrne	r5, r5, #128	; 0x80
   16b50:	ldr	r0, [r4]
   16b54:	mov	r2, r1
   16b58:	str	r3, [sp]
   16b5c:	mov	r1, r4
   16b60:	mov	r3, r5
   16b64:	bl	1597c <argp_failure@@Base+0x208>
   16b68:	ldr	r3, [r4, #16]
   16b6c:	tst	r3, #32
   16b70:	bne	16b84 <argp_state_help@@Base+0x68>
   16b74:	ands	r0, r5, #256	; 0x100
   16b78:	bne	16bb8 <argp_state_help@@Base+0x9c>
   16b7c:	tst	r5, #512	; 0x200
   16b80:	bne	16bb4 <argp_state_help@@Base+0x98>
   16b84:	add	sp, sp, #12
   16b88:	pop	{r4, r5, pc}
   16b8c:	cmp	r1, #0
   16b90:	beq	16b84 <argp_state_help@@Base+0x68>
   16b94:	ldr	r3, [pc, #40]	; 16bc4 <argp_state_help@@Base+0xa8>
   16b98:	mov	r2, r1
   16b9c:	mov	r1, r4
   16ba0:	ldr	ip, [r3]
   16ba4:	mov	r3, r5
   16ba8:	str	ip, [sp]
   16bac:	bl	1597c <argp_failure@@Base+0x208>
   16bb0:	b	16b74 <argp_state_help@@Base+0x58>
   16bb4:	bl	113d0 <exit@plt>
   16bb8:	ldr	r3, [pc, #8]	; 16bc8 <argp_state_help@@Base+0xac>
   16bbc:	ldr	r0, [r3]
   16bc0:	bl	113d0 <exit@plt>
   16bc4:	andeq	ip, r2, r8, asr #8
   16bc8:	andeq	ip, r2, r4, lsr r4

00016bcc <argp_error@@Base>:
   16bcc:	push	{r1, r2, r3}
   16bd0:	push	{r4, r5, lr}
   16bd4:	subs	r5, r0, #0
   16bd8:	sub	sp, sp, #8
   16bdc:	beq	16cac <argp_error@@Base+0xe0>
   16be0:	ldr	r3, [r5, #16]
   16be4:	tst	r3, #2
   16be8:	bne	16c9c <argp_error@@Base+0xd0>
   16bec:	ldr	r4, [r5, #44]	; 0x2c
   16bf0:	cmp	r4, #0
   16bf4:	beq	16c9c <argp_error@@Base+0xd0>
   16bf8:	mov	r0, r4
   16bfc:	bl	114e4 <flockfile@plt>
   16c00:	ldr	r0, [r5, #40]	; 0x28
   16c04:	add	r3, sp, #24
   16c08:	str	r3, [sp, #4]
   16c0c:	mov	r1, r4
   16c10:	bl	111f0 <fputs_unlocked@plt>
   16c14:	ldr	r3, [r4, #20]
   16c18:	ldr	r2, [r4, #24]
   16c1c:	cmp	r3, r2
   16c20:	addcc	r1, r3, #1
   16c24:	movcc	r2, #58	; 0x3a
   16c28:	strcc	r1, [r4, #20]
   16c2c:	strbcc	r2, [r3]
   16c30:	bcs	16cf8 <argp_error@@Base+0x12c>
   16c34:	ldr	r3, [r4, #20]
   16c38:	ldr	r2, [r4, #24]
   16c3c:	cmp	r3, r2
   16c40:	addcc	r1, r3, #1
   16c44:	movcc	r2, #32
   16c48:	strcc	r1, [r4, #20]
   16c4c:	strbcc	r2, [r3]
   16c50:	bcs	16ce8 <argp_error@@Base+0x11c>
   16c54:	ldr	r1, [sp, #20]
   16c58:	ldr	r2, [sp, #4]
   16c5c:	mov	r0, r4
   16c60:	bl	114c0 <vfprintf@plt>
   16c64:	ldr	r3, [r4, #20]
   16c68:	ldr	r2, [r4, #24]
   16c6c:	cmp	r3, r2
   16c70:	addcc	r1, r3, #1
   16c74:	movcc	r2, #10
   16c78:	strcc	r1, [r4, #20]
   16c7c:	strbcc	r2, [r3]
   16c80:	bcs	16cd8 <argp_error@@Base+0x10c>
   16c84:	mov	r0, r5
   16c88:	mov	r2, #260	; 0x104
   16c8c:	mov	r1, r4
   16c90:	bl	16b1c <argp_state_help@@Base>
   16c94:	mov	r0, r4
   16c98:	bl	112f8 <funlockfile@plt>
   16c9c:	add	sp, sp, #8
   16ca0:	pop	{r4, r5, lr}
   16ca4:	add	sp, sp, #12
   16ca8:	bx	lr
   16cac:	ldr	r3, [pc, #84]	; 16d08 <argp_error@@Base+0x13c>
   16cb0:	ldr	r4, [r3]
   16cb4:	cmp	r4, #0
   16cb8:	beq	16c9c <argp_error@@Base+0xd0>
   16cbc:	mov	r0, r4
   16cc0:	bl	114e4 <flockfile@plt>
   16cc4:	ldr	r2, [pc, #64]	; 16d0c <argp_error@@Base+0x140>
   16cc8:	add	r3, sp, #24
   16ccc:	str	r3, [sp, #4]
   16cd0:	ldr	r0, [r2]
   16cd4:	b	16c0c <argp_error@@Base+0x40>
   16cd8:	mov	r1, #10
   16cdc:	mov	r0, r4
   16ce0:	bl	1149c <__overflow@plt>
   16ce4:	b	16c84 <argp_error@@Base+0xb8>
   16ce8:	mov	r1, #32
   16cec:	mov	r0, r4
   16cf0:	bl	1149c <__overflow@plt>
   16cf4:	b	16c54 <argp_error@@Base+0x88>
   16cf8:	mov	r1, #58	; 0x3a
   16cfc:	mov	r0, r4
   16d00:	bl	1149c <__overflow@plt>
   16d04:	b	16c34 <argp_error@@Base+0x68>
   16d08:	andeq	ip, r2, r0, asr r4
   16d0c:	andeq	ip, r2, r8, asr #8
   16d10:	ldr	r3, [r0]
   16d14:	push	{r4, r5, r6, lr}
   16d18:	cmp	r3, #0
   16d1c:	ldr	r5, [r0, #16]
   16d20:	beq	16d88 <argp_error@@Base+0x1bc>
   16d24:	ldr	r0, [r1, #8]
   16d28:	mov	r2, #0
   16d2c:	add	r0, r0, #1
   16d30:	str	r0, [r1, #8]
   16d34:	b	16d3c <argp_error@@Base+0x170>
   16d38:	add	r2, r2, #1
   16d3c:	add	r3, r3, #24
   16d40:	ldr	r0, [r3, #-20]	; 0xffffffec
   16d44:	cmp	r0, #0
   16d48:	bne	16d38 <argp_error@@Base+0x16c>
   16d4c:	ldr	r0, [r3, #-24]	; 0xffffffe8
   16d50:	cmp	r0, #0
   16d54:	bne	16d38 <argp_error@@Base+0x16c>
   16d58:	ldr	r0, [r3, #-8]
   16d5c:	cmp	r0, #0
   16d60:	bne	16d38 <argp_error@@Base+0x16c>
   16d64:	ldr	r0, [r3, #-4]
   16d68:	cmp	r0, #0
   16d6c:	bne	16d38 <argp_error@@Base+0x16c>
   16d70:	ldm	r1, {r0, r3}
   16d74:	add	ip, r2, r2, lsl #1
   16d78:	add	r0, r0, ip
   16d7c:	add	r2, r3, r2
   16d80:	stm	r1, {r0, r2}
   16d84:	b	16d9c <argp_error@@Base+0x1d0>
   16d88:	ldr	r3, [r0, #4]
   16d8c:	cmp	r3, #0
   16d90:	ldrne	r3, [r1, #8]
   16d94:	addne	r3, r3, #1
   16d98:	strne	r3, [r1, #8]
   16d9c:	cmp	r5, #0
   16da0:	popeq	{r4, r5, r6, pc}
   16da4:	ldr	r0, [r5]
   16da8:	cmp	r0, #0
   16dac:	popeq	{r4, r5, r6, pc}
   16db0:	mov	r4, r1
   16db4:	mov	r1, r4
   16db8:	bl	16d10 <argp_error@@Base+0x144>
   16dbc:	ldr	r3, [r4, #12]
   16dc0:	ldr	r0, [r5, #16]!
   16dc4:	add	r3, r3, #1
   16dc8:	cmp	r0, #0
   16dcc:	str	r3, [r4, #12]
   16dd0:	bne	16db4 <argp_error@@Base+0x1e8>
   16dd4:	pop	{r4, r5, r6, pc}
   16dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ddc:	sub	sp, sp, #36	; 0x24
   16de0:	ldr	sl, [r0]
   16de4:	str	r0, [sp, #12]
   16de8:	cmp	sl, #0
   16dec:	str	r1, [sp, #16]
   16df0:	str	r2, [sp, #20]
   16df4:	mov	r9, r3
   16df8:	ldr	r8, [r0, #16]
   16dfc:	ldr	r7, [sp, #72]	; 0x48
   16e00:	beq	16fcc <argp_error@@Base+0x400>
   16e04:	add	fp, sl, #24
   16e08:	str	r8, [sp, #28]
   16e0c:	str	r3, [sp, #24]
   16e10:	ldr	r4, [fp, #-20]	; 0xffffffec
   16e14:	sub	r1, fp, #24
   16e18:	cmp	r4, #0
   16e1c:	bne	16e2c <argp_error@@Base+0x260>
   16e20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e24:	cmp	r3, #0
   16e28:	beq	16fa0 <argp_error@@Base+0x3d4>
   16e2c:	ldr	r3, [fp, #-12]
   16e30:	tst	r3, #4
   16e34:	moveq	sl, r1
   16e38:	moveq	r5, r3
   16e3c:	ldrne	r5, [sl, #12]
   16e40:	ands	r5, r5, #8
   16e44:	bne	16f88 <argp_error@@Base+0x3bc>
   16e48:	tst	r3, #8
   16e4c:	bne	16ec8 <argp_error@@Base+0x2fc>
   16e50:	sub	r3, r4, #1
   16e54:	cmp	r3, #254	; 0xfe
   16e58:	bhi	16ec8 <argp_error@@Base+0x2fc>
   16e5c:	bl	113c4 <__ctype_b_loc@plt>
   16e60:	lsl	r3, r4, #1
   16e64:	ldr	r1, [r0]
   16e68:	ldrh	r3, [r1, r3]
   16e6c:	tst	r3, #16384	; 0x4000
   16e70:	beq	16ec8 <argp_error@@Base+0x2fc>
   16e74:	ldr	r3, [r7, #4]
   16e78:	add	r1, r3, #1
   16e7c:	str	r1, [r7, #4]
   16e80:	strb	r4, [r3]
   16e84:	ldr	r3, [sl, #8]
   16e88:	cmp	r3, #0
   16e8c:	beq	16ebc <argp_error@@Base+0x2f0>
   16e90:	ldr	r3, [r7, #4]
   16e94:	mov	r2, #58	; 0x3a
   16e98:	add	r1, r3, #1
   16e9c:	str	r1, [r7, #4]
   16ea0:	strb	r2, [r3]
   16ea4:	ldr	r3, [sl, #12]
   16ea8:	tst	r3, #1
   16eac:	ldrne	r3, [r7, #4]
   16eb0:	addne	r1, r3, #1
   16eb4:	strne	r1, [r7, #4]
   16eb8:	strbne	r2, [r3]
   16ebc:	ldr	r3, [r7, #4]
   16ec0:	mov	r2, #0
   16ec4:	strb	r2, [r3]
   16ec8:	ldr	r4, [fp, #-24]	; 0xffffffe8
   16ecc:	cmp	r4, #0
   16ed0:	beq	16f88 <argp_error@@Base+0x3bc>
   16ed4:	ldr	r8, [r7]
   16ed8:	ldr	r6, [r8, #8]
   16edc:	ldr	r0, [r6]
   16ee0:	cmp	r0, #0
   16ee4:	beq	16f08 <argp_error@@Base+0x33c>
   16ee8:	mov	r9, r6
   16eec:	mov	r1, r4
   16ef0:	bl	11208 <strcmp@plt>
   16ef4:	cmp	r0, #0
   16ef8:	beq	16f90 <argp_error@@Base+0x3c4>
   16efc:	ldr	r0, [r9, #16]!
   16f00:	cmp	r0, #0
   16f04:	bne	16eec <argp_error@@Base+0x320>
   16f08:	ldr	r3, [sl, #8]
   16f0c:	ldr	r1, [r7, #8]
   16f10:	cmp	r3, #0
   16f14:	str	r4, [r1]
   16f18:	beq	16f2c <argp_error@@Base+0x360>
   16f1c:	ldr	r3, [sl, #12]
   16f20:	tst	r3, #1
   16f24:	moveq	r5, #1
   16f28:	movne	r5, #2
   16f2c:	str	r5, [r1, #4]
   16f30:	ldr	ip, [fp, #-20]	; 0xffffffec
   16f34:	mov	r3, #0
   16f38:	cmp	ip, r3
   16f3c:	str	r3, [r1, #8]
   16f40:	ldr	r2, [sp, #24]
   16f44:	ldr	r3, [r8, #48]	; 0x30
   16f48:	ldreq	ip, [sl, #4]
   16f4c:	sub	r3, r2, r3
   16f50:	bic	ip, ip, #-16777216	; 0xff000000
   16f54:	asr	r3, r3, #2
   16f58:	add	lr, r1, #16
   16f5c:	rsb	r0, r3, r3, lsl #3
   16f60:	add	r0, r0, r0, lsl #6
   16f64:	add	r0, r3, r0, lsl #3
   16f68:	rsb	r0, r0, r0, lsl #15
   16f6c:	add	r3, r3, r0, lsl #3
   16f70:	add	r3, r3, #1
   16f74:	add	r3, ip, r3, lsl #24
   16f78:	str	r3, [r1, #12]
   16f7c:	mov	r3, #0
   16f80:	str	lr, [r7, #8]
   16f84:	str	r3, [r1, #16]
   16f88:	add	fp, fp, #24
   16f8c:	b	16e10 <argp_error@@Base+0x244>
   16f90:	sub	r6, r9, r6
   16f94:	cmn	r6, #15
   16f98:	bge	16f88 <argp_error@@Base+0x3bc>
   16f9c:	b	16f08 <argp_error@@Base+0x33c>
   16fa0:	ldr	r3, [fp, #-8]
   16fa4:	cmp	r3, #0
   16fa8:	bne	16e2c <argp_error@@Base+0x260>
   16fac:	ldr	r3, [fp, #-4]
   16fb0:	cmp	r3, #0
   16fb4:	bne	16e2c <argp_error@@Base+0x260>
   16fb8:	ldr	r3, [sp, #12]
   16fbc:	ldr	r8, [sp, #28]
   16fc0:	ldr	r9, [sp, #24]
   16fc4:	ldr	r3, [r3, #4]
   16fc8:	b	16fe4 <argp_error@@Base+0x418>
   16fcc:	ldr	r3, [sp, #12]
   16fd0:	ldr	r3, [r3, #4]
   16fd4:	cmp	r3, #0
   16fd8:	moveq	r0, r9
   16fdc:	moveq	r9, r3
   16fe0:	beq	17054 <argp_error@@Base+0x488>
   16fe4:	ldr	r2, [r7, #4]
   16fe8:	ldr	r1, [sp, #12]
   16fec:	str	r3, [r9]
   16ff0:	cmp	r8, #0
   16ff4:	stmib	r9, {r1, r2}
   16ff8:	ldr	r2, [sp, #16]
   16ffc:	mov	r3, #0
   17000:	str	r2, [r9, #16]
   17004:	ldr	r2, [sp, #20]
   17008:	str	r3, [r9, #12]
   1700c:	str	r2, [r9, #20]
   17010:	str	r3, [r9, #24]
   17014:	str	r3, [r9, #32]
   17018:	str	r3, [r9, #28]
   1701c:	beq	17050 <argp_error@@Base+0x484>
   17020:	ldr	r2, [r8]
   17024:	cmp	r2, r3
   17028:	beq	1709c <argp_error@@Base+0x4d0>
   1702c:	add	r3, r3, #1
   17030:	ldr	r2, [r8, r3, lsl #4]
   17034:	cmp	r2, #0
   17038:	bne	1702c <argp_error@@Base+0x460>
   1703c:	lsl	r3, r3, #2
   17040:	ldr	r2, [r7, #12]
   17044:	add	r3, r2, r3
   17048:	str	r2, [r9, #28]
   1704c:	str	r3, [r7, #12]
   17050:	add	r0, r9, #36	; 0x24
   17054:	cmp	r8, #0
   17058:	beq	17094 <argp_error@@Base+0x4c8>
   1705c:	ldr	r1, [r8]
   17060:	cmp	r1, #0
   17064:	beq	17094 <argp_error@@Base+0x4c8>
   17068:	mov	r2, #0
   1706c:	add	r4, r2, #1
   17070:	mov	r3, r0
   17074:	str	r7, [sp]
   17078:	mov	r0, r1
   1707c:	mov	r1, r9
   17080:	bl	16dd8 <argp_error@@Base+0x20c>
   17084:	ldr	r1, [r8, r4, lsl #4]
   17088:	mov	r2, r4
   1708c:	cmp	r1, #0
   17090:	bne	1706c <argp_error@@Base+0x4a0>
   17094:	add	sp, sp, #36	; 0x24
   17098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1709c:	mov	r3, r2
   170a0:	b	17040 <argp_error@@Base+0x474>
   170a4:	cmp	r0, #86	; 0x56
   170a8:	beq	170b4 <argp_error@@Base+0x4e8>
   170ac:	mov	r0, #7
   170b0:	bx	lr
   170b4:	ldr	r3, [pc, #104]	; 17124 <argp_error@@Base+0x558>
   170b8:	push	{r4, lr}
   170bc:	mov	r4, r2
   170c0:	ldr	r3, [r3]
   170c4:	cmp	r3, #0
   170c8:	beq	170ec <argp_error@@Base+0x520>
   170cc:	mov	r1, r2
   170d0:	ldr	r0, [r2, #48]	; 0x30
   170d4:	blx	r3
   170d8:	ldr	r0, [r4, #16]
   170dc:	ands	r0, r0, #32
   170e0:	beq	17120 <argp_error@@Base+0x554>
   170e4:	mov	r0, #0
   170e8:	pop	{r4, pc}
   170ec:	ldr	r3, [pc, #52]	; 17128 <argp_error@@Base+0x55c>
   170f0:	ldr	r2, [r3]
   170f4:	cmp	r2, #0
   170f8:	beq	1710c <argp_error@@Base+0x540>
   170fc:	ldr	r1, [pc, #40]	; 1712c <argp_error@@Base+0x560>
   17100:	ldr	r0, [r4, #48]	; 0x30
   17104:	bl	11400 <fprintf@plt>
   17108:	b	170d8 <argp_error@@Base+0x50c>
   1710c:	ldr	r2, [pc, #28]	; 17130 <argp_error@@Base+0x564>
   17110:	ldr	r1, [pc, #28]	; 17134 <argp_error@@Base+0x568>
   17114:	mov	r0, r4
   17118:	bl	16bcc <argp_error@@Base>
   1711c:	b	170d8 <argp_error@@Base+0x50c>
   17120:	bl	113d0 <exit@plt>
   17124:	andeq	ip, r2, ip, lsl #10
   17128:	andeq	ip, r2, r0, asr #31
   1712c:	strdeq	fp, [r1], -r0
   17130:	andeq	fp, r1, r4, ror #2
   17134:	andeq	sl, r1, ip, lsr #14
   17138:	cmn	r0, #3
   1713c:	push	{r4, r5, lr}
   17140:	mov	r4, r2
   17144:	sub	sp, sp, #12
   17148:	beq	1722c <argp_error@@Base+0x660>
   1714c:	ble	171bc <argp_error@@Base+0x5f0>
   17150:	cmn	r0, #2
   17154:	beq	1717c <argp_error@@Base+0x5b0>
   17158:	cmp	r0, #63	; 0x3f
   1715c:	bne	17220 <argp_error@@Base+0x654>
   17160:	mov	r0, r4
   17164:	ldr	r2, [pc, #236]	; 17258 <argp_error@@Base+0x68c>
   17168:	ldr	r1, [r4, #48]	; 0x30
   1716c:	bl	16b1c <argp_state_help@@Base>
   17170:	mov	r0, #0
   17174:	add	sp, sp, #12
   17178:	pop	{r4, r5, pc}
   1717c:	ldr	r3, [pc, #216]	; 1725c <argp_error@@Base+0x690>
   17180:	mov	r0, r1
   17184:	str	r1, [sp, #4]
   17188:	str	r1, [r3]
   1718c:	bl	1805c <argp_parse@@Base+0xdec>
   17190:	ldr	r3, [r4, #16]
   17194:	ldr	r2, [pc, #196]	; 17260 <argp_error@@Base+0x694>
   17198:	and	r3, r3, #3
   1719c:	cmp	r3, #1
   171a0:	ldr	r1, [sp, #4]
   171a4:	str	r0, [r4, #40]	; 0x28
   171a8:	str	r0, [r2]
   171ac:	beq	17248 <argp_error@@Base+0x67c>
   171b0:	mov	r0, #0
   171b4:	add	sp, sp, #12
   171b8:	pop	{r4, r5, pc}
   171bc:	cmn	r0, #4
   171c0:	bne	17220 <argp_error@@Base+0x654>
   171c4:	cmp	r1, #0
   171c8:	ldr	r0, [pc, #148]	; 17264 <argp_error@@Base+0x698>
   171cc:	mov	r2, #10
   171d0:	movne	r0, r1
   171d4:	mov	r1, #0
   171d8:	bl	11214 <strtol@plt>
   171dc:	ldr	r4, [pc, #132]	; 17268 <argp_error@@Base+0x69c>
   171e0:	str	r0, [r4]
   171e4:	ldr	r3, [r4]
   171e8:	cmp	r3, #0
   171ec:	sub	r3, r3, #1
   171f0:	str	r3, [r4]
   171f4:	ble	171b0 <argp_error@@Base+0x5e4>
   171f8:	mov	r5, #1
   171fc:	mov	r0, r5
   17200:	bl	112bc <sleep@plt>
   17204:	ldr	r3, [r4]
   17208:	cmp	r3, #0
   1720c:	sub	r3, r3, #1
   17210:	str	r3, [r4]
   17214:	bgt	171fc <argp_error@@Base+0x630>
   17218:	mov	r0, #0
   1721c:	b	171b4 <argp_error@@Base+0x5e8>
   17220:	mov	r0, #7
   17224:	add	sp, sp, #12
   17228:	pop	{r4, r5, pc}
   1722c:	mov	r0, r4
   17230:	ldr	r2, [pc, #52]	; 1726c <argp_error@@Base+0x6a0>
   17234:	ldr	r1, [r4, #48]	; 0x30
   17238:	bl	16b1c <argp_state_help@@Base>
   1723c:	mov	r0, #0
   17240:	add	sp, sp, #12
   17244:	pop	{r4, r5, pc}
   17248:	ldr	r3, [r4, #8]
   1724c:	mov	r0, #0
   17250:	str	r1, [r3]
   17254:	b	17174 <argp_error@@Base+0x5a8>
   17258:	andeq	r0, r0, sl, ror r2
   1725c:	andeq	ip, r2, ip, asr #8
   17260:	andeq	ip, r2, r8, asr #8
   17264:	andeq	fp, r1, r8, lsl #3
   17268:	andeq	ip, r2, r8, lsl #10
   1726c:	andeq	r0, r0, r1, lsl #4

00017270 <argp_parse@@Base>:
   17270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17274:	add	fp, sp, #32
   17278:	tst	r3, #1
   1727c:	sub	sp, sp, #228	; 0xe4
   17280:	mov	r6, r3
   17284:	mov	r7, r0
   17288:	str	r1, [fp, #-240]	; 0xffffff10
   1728c:	str	r2, [fp, #-232]	; 0xffffff18
   17290:	bne	172bc <argp_parse@@Base+0x4c>
   17294:	ldr	r3, [pc, #3260]	; 17f58 <argp_parse@@Base+0xce8>
   17298:	ldr	r4, [pc, #3260]	; 17f5c <argp_parse@@Base+0xcec>
   1729c:	ldr	r2, [r3]
   172a0:	cmp	r2, #0
   172a4:	ldreq	r2, [fp, #-232]	; 0xffffff18
   172a8:	ldreq	r2, [r2]
   172ac:	streq	r2, [r3]
   172b0:	ldr	r3, [r4]
   172b4:	cmp	r3, #0
   172b8:	beq	1795c <argp_parse@@Base+0x6ec>
   172bc:	ands	r3, r6, #16
   172c0:	beq	17864 <argp_parse@@Base+0x5f4>
   172c4:	sub	r4, fp, #196	; 0xc4
   172c8:	mov	r0, r4
   172cc:	mov	r2, #36	; 0x24
   172d0:	mov	r1, #0
   172d4:	bl	1143c <memset@plt>
   172d8:	ands	r3, r6, #4
   172dc:	str	r3, [fp, #-244]	; 0xffffff0c
   172e0:	mov	r3, #0
   172e4:	moveq	r0, #1
   172e8:	movne	r0, #0
   172ec:	cmp	r7, r3
   172f0:	str	r3, [fp, #-224]	; 0xffffff20
   172f4:	str	r3, [fp, #-220]	; 0xffffff24
   172f8:	str	r3, [fp, #-216]	; 0xffffff28
   172fc:	str	r0, [fp, #-228]	; 0xffffff1c
   17300:	beq	17768 <argp_parse@@Base+0x4f8>
   17304:	mov	r0, r7
   17308:	sub	r1, fp, #228	; 0xe4
   1730c:	bl	16d10 <argp_error@@Base+0x144>
   17310:	ldr	r5, [fp, #-220]	; 0xffffff24
   17314:	ldr	r9, [fp, #-216]	; 0xffffff28
   17318:	add	r5, r5, #1
   1731c:	ldr	r3, [fp, #-224]	; 0xffffff20
   17320:	add	r5, r5, r5, lsl #3
   17324:	lsl	r2, r9, #2
   17328:	lsl	r5, r5, #2
   1732c:	add	r3, r3, #1
   17330:	add	sl, r2, r5
   17334:	ldr	r0, [fp, #-228]	; 0xffffff1c
   17338:	add	r9, sl, r3, lsl #4
   1733c:	str	r2, [fp, #-236]	; 0xffffff14
   17340:	add	r0, r9, r0
   17344:	add	r0, r0, #1
   17348:	bl	18ca4 <argp_parse@@Base+0x1a34>
   1734c:	cmp	r0, #0
   17350:	mov	r8, r0
   17354:	str	r0, [fp, #-40]	; 0xffffffd8
   17358:	moveq	r5, #12
   1735c:	beq	1775c <argp_parse@@Base+0x4ec>
   17360:	mov	r3, #1
   17364:	str	r3, [fp, #-196]	; 0xffffff3c
   17368:	str	r3, [fp, #-192]	; 0xffffff40
   1736c:	ldm	r4!, {r0, r1, r2, r3}
   17370:	sub	ip, fp, #148	; 0x94
   17374:	add	r5, r8, r5
   17378:	str	r5, [fp, #-104]	; 0xffffff98
   1737c:	stmia	ip!, {r0, r1, r2, r3}
   17380:	add	r3, r8, sl
   17384:	mov	lr, r3
   17388:	ldm	r4!, {r0, r1, r2, r3}
   1738c:	add	sl, r8, r9
   17390:	str	lr, [fp, #-248]	; 0xffffff08
   17394:	str	lr, [fp, #-152]	; 0xffffff68
   17398:	ldr	lr, [r4]
   1739c:	stmia	ip!, {r0, r1, r2, r3}
   173a0:	mov	r0, r5
   173a4:	ldr	r2, [fp, #-236]	; 0xffffff14
   173a8:	mov	r1, #0
   173ac:	str	lr, [ip]
   173b0:	str	r8, [fp, #-112]	; 0xffffff90
   173b4:	str	sl, [fp, #-156]	; 0xffffff64
   173b8:	bl	1143c <memset@plt>
   173bc:	ldr	lr, [fp, #-248]	; 0xffffff08
   173c0:	sub	r4, fp, #160	; 0xa0
   173c4:	tst	r6, #8
   173c8:	str	lr, [fp, #-204]	; 0xffffff34
   173cc:	str	sl, [fp, #-208]	; 0xffffff30
   173d0:	str	r5, [fp, #-200]	; 0xffffff38
   173d4:	str	r4, [fp, #-212]	; 0xffffff2c
   173d8:	bne	1777c <argp_parse@@Base+0x50c>
   173dc:	ldr	r3, [fp, #-244]	; 0xffffff0c
   173e0:	cmp	r3, #0
   173e4:	addne	r3, sl, #1
   173e8:	movne	r2, #43	; 0x2b
   173ec:	strbne	r2, [sl]
   173f0:	movne	sl, r3
   173f4:	strne	r3, [fp, #-208]	; 0xffffff30
   173f8:	mov	r2, #0
   173fc:	strb	r2, [sl]
   17400:	ldr	r3, [fp, #-204]	; 0xffffff34
   17404:	cmp	r7, r2
   17408:	str	r2, [r3]
   1740c:	str	r7, [fp, #-160]	; 0xffffff60
   17410:	beq	17924 <argp_parse@@Base+0x6b4>
   17414:	sub	r1, fp, #212	; 0xd4
   17418:	mov	r0, r7
   1741c:	str	r1, [sp]
   17420:	ldr	r3, [fp, #-112]	; 0xffffff90
   17424:	mov	r1, r2
   17428:	bl	16dd8 <argp_error@@Base+0x20c>
   1742c:	ldr	r7, [fp, #-160]	; 0xffffff60
   17430:	ldr	r5, [fp, #-112]	; 0xffffff90
   17434:	mov	r8, r0
   17438:	str	r0, [fp, #-108]	; 0xffffff94
   1743c:	mov	r2, #56	; 0x38
   17440:	mov	r1, #0
   17444:	sub	r0, fp, #96	; 0x60
   17448:	bl	1143c <memset@plt>
   1744c:	ldr	r2, [pc, #2828]	; 17f60 <argp_parse@@Base+0xcf0>
   17450:	ldr	r3, [pc, #2828]	; 17f64 <argp_parse@@Base+0xcf4>
   17454:	ldr	r0, [fp, #-240]	; 0xffffff10
   17458:	ldr	r1, [r2]
   1745c:	str	r0, [fp, #-92]	; 0xffffffa4
   17460:	ldr	r2, [r3]
   17464:	ldr	r0, [fp, #-232]	; 0xffffff18
   17468:	mov	r3, #1
   1746c:	cmp	r5, r8
   17470:	str	r7, [fp, #-96]	; 0xffffffa0
   17474:	str	r0, [fp, #-88]	; 0xffffffa8
   17478:	str	r6, [fp, #-80]	; 0xffffffb0
   1747c:	str	r4, [fp, #-44]	; 0xffffffd4
   17480:	str	r1, [fp, #-52]	; 0xffffffcc
   17484:	str	r2, [fp, #-48]	; 0xffffffd0
   17488:	str	r3, [fp, #-100]	; 0xffffff9c
   1748c:	bcc	17790 <argp_parse@@Base+0x520>
   17490:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17494:	tst	r3, #2
   17498:	bne	17934 <argp_parse@@Base+0x6c4>
   1749c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   174a0:	ldr	r4, [fp, #-92]	; 0xffffffa4
   174a4:	mov	r2, #1
   174a8:	str	r2, [fp, #-144]	; 0xffffff70
   174ac:	ldr	r2, [fp, #-232]	; 0xffffff18
   174b0:	cmp	r2, r3
   174b4:	beq	17e34 <argp_parse@@Base+0xbc4>
   174b8:	ldr	r3, [pc, #2716]	; 17f5c <argp_parse@@Base+0xcec>
   174bc:	ldr	r3, [r3]
   174c0:	str	r3, [fp, #-56]	; 0xffffffc8
   174c4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   174c8:	ldr	r5, [fp, #-84]	; 0xffffffac
   174cc:	ldr	sl, [pc, #2708]	; 17f68 <argp_parse@@Base+0xcf8>
   174d0:	mov	r0, r4
   174d4:	mov	r6, #0
   174d8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   174dc:	cmp	r3, #0
   174e0:	beq	17970 <argp_parse@@Base+0x700>
   174e4:	cmp	r3, r5
   174e8:	strgt	r6, [fp, #-72]	; 0xffffffb8
   174ec:	bgt	17970 <argp_parse@@Base+0x700>
   174f0:	cmp	r5, r0
   174f4:	blt	17d0c <argp_parse@@Base+0xa9c>
   174f8:	cmp	r5, r0
   174fc:	bne	17d18 <argp_parse@@Base+0xaa8>
   17500:	ldr	r3, [fp, #-112]	; 0xffffff90
   17504:	ldr	ip, [fp, #-108]	; 0xffffff94
   17508:	cmp	r3, ip
   1750c:	bcs	17efc <argp_parse@@Base+0xc8c>
   17510:	mov	r5, #0
   17514:	add	r4, r3, #36	; 0x24
   17518:	mov	r7, r5
   1751c:	ldr	r6, [pc, #2632]	; 17f6c <argp_parse@@Base+0xcfc>
   17520:	mov	r0, r5
   17524:	b	1756c <argp_parse@@Base+0x2fc>
   17528:	ldr	ip, [r4, #-4]
   1752c:	str	ip, [fp, #-60]	; 0xffffffc4
   17530:	ldr	ip, [r4, #-12]
   17534:	str	ip, [fp, #-68]	; 0xffffffbc
   17538:	ldr	ip, [r4, #-8]
   1753c:	str	r3, [fp, #-76]	; 0xffffffb4
   17540:	str	ip, [fp, #-64]	; 0xffffffc0
   17544:	blx	r5
   17548:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1754c:	str	r3, [r4, #-4]
   17550:	ldr	ip, [fp, #-108]	; 0xffffff94
   17554:	cmp	ip, r4
   17558:	bls	17ea4 <argp_parse@@Base+0xc34>
   1755c:	cmp	r0, #7
   17560:	cmpne	r0, #0
   17564:	bne	17e80 <argp_parse@@Base+0xc10>
   17568:	add	r4, r4, #36	; 0x24
   1756c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   17570:	cmp	r3, #0
   17574:	bne	17554 <argp_parse@@Base+0x2e4>
   17578:	ldr	r5, [r4, #-36]	; 0xffffffdc
   1757c:	sub	r2, fp, #96	; 0x60
   17580:	cmp	r5, #0
   17584:	mov	r1, r7
   17588:	mov	r0, r6
   1758c:	bne	17528 <argp_parse@@Base+0x2b8>
   17590:	cmp	ip, r4
   17594:	mov	r0, #7
   17598:	bhi	17568 <argp_parse@@Base+0x2f8>
   1759c:	ldr	r3, [fp, #-112]	; 0xffffff90
   175a0:	sub	r4, ip, #36	; 0x24
   175a4:	cmp	r4, r3
   175a8:	movcs	r5, #7
   175ac:	bcc	17634 <argp_parse@@Base+0x3c4>
   175b0:	cmp	r5, #7
   175b4:	cmpne	r5, #0
   175b8:	bne	17e94 <argp_parse@@Base+0xc24>
   175bc:	sub	r4, r4, #36	; 0x24
   175c0:	mov	r7, #0
   175c4:	ldr	r6, [pc, #2468]	; 17f70 <argp_parse@@Base+0xd00>
   175c8:	b	17614 <argp_parse@@Base+0x3a4>
   175cc:	ldr	r3, [r4, #68]	; 0x44
   175d0:	ldr	ip, [r4, #48]	; 0x30
   175d4:	str	r3, [fp, #-60]	; 0xffffffc4
   175d8:	ldr	r3, [r4, #60]	; 0x3c
   175dc:	str	r3, [fp, #-68]	; 0xffffffbc
   175e0:	ldr	r3, [r4, #64]	; 0x40
   175e4:	str	ip, [fp, #-76]	; 0xffffffb4
   175e8:	str	r3, [fp, #-64]	; 0xffffffc0
   175ec:	blx	r5
   175f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   175f4:	str	r3, [r4, #68]	; 0x44
   175f8:	ldr	r3, [fp, #-112]	; 0xffffff90
   175fc:	cmp	r4, r3
   17600:	bcc	17ef4 <argp_parse@@Base+0xc84>
   17604:	cmp	r0, #7
   17608:	cmpne	r0, #0
   1760c:	bne	17e64 <argp_parse@@Base+0xbf4>
   17610:	sub	r4, r4, #36	; 0x24
   17614:	ldr	r5, [r4, #36]	; 0x24
   17618:	sub	r2, fp, #96	; 0x60
   1761c:	cmp	r5, #0
   17620:	mov	r1, r7
   17624:	mov	r0, r6
   17628:	bne	175cc <argp_parse@@Base+0x35c>
   1762c:	cmp	r4, r3
   17630:	bcs	17610 <argp_parse@@Base+0x3a0>
   17634:	ldr	r2, [fp, #4]
   17638:	cmp	r2, #0
   1763c:	beq	17658 <argp_parse@@Base+0x3e8>
   17640:	mov	r5, #0
   17644:	ldr	r1, [fp, #4]
   17648:	ldr	r2, [fp, #-84]	; 0xffffffac
   1764c:	str	r2, [r1]
   17650:	cmp	r5, #0
   17654:	bne	17e74 <argp_parse@@Base+0xc04>
   17658:	ldr	ip, [fp, #-108]	; 0xffffff94
   1765c:	b	17d30 <argp_parse@@Base+0xac0>
   17660:	ldr	r3, [fp, #-112]	; 0xffffff90
   17664:	mov	r5, r0
   17668:	ldr	ip, [fp, #-108]	; 0xffffff94
   1766c:	cmp	ip, r3
   17670:	bls	17e2c <argp_parse@@Base+0xbbc>
   17674:	ldr	r7, [pc, #2296]	; 17f74 <argp_parse@@Base+0xd04>
   17678:	add	r4, r3, #36	; 0x24
   1767c:	mov	r8, #0
   17680:	ldr	r3, [r4, #-36]	; 0xffffffdc
   17684:	sub	r2, fp, #96	; 0x60
   17688:	cmp	r3, #0
   1768c:	mov	r1, r8
   17690:	mov	r0, r7
   17694:	mov	r6, r4
   17698:	beq	176cc <argp_parse@@Base+0x45c>
   1769c:	ldr	ip, [r4, #-4]
   176a0:	ldr	lr, [r4, #-24]	; 0xffffffe8
   176a4:	str	ip, [fp, #-60]	; 0xffffffc4
   176a8:	ldr	ip, [r4, #-12]
   176ac:	str	ip, [fp, #-68]	; 0xffffffbc
   176b0:	ldr	ip, [r4, #-8]
   176b4:	str	lr, [fp, #-76]	; 0xffffffb4
   176b8:	str	ip, [fp, #-64]	; 0xffffffc0
   176bc:	blx	r3
   176c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   176c4:	str	r3, [r4, #-4]
   176c8:	ldr	ip, [fp, #-108]	; 0xffffff94
   176cc:	cmp	ip, r6
   176d0:	add	r4, r4, #36	; 0x24
   176d4:	bhi	17680 <argp_parse@@Base+0x410>
   176d8:	ldr	r3, [fp, #-112]	; 0xffffff90
   176dc:	sub	ip, ip, #36	; 0x24
   176e0:	cmp	r3, ip
   176e4:	bhi	1774c <argp_parse@@Base+0x4dc>
   176e8:	ldr	r8, [pc, #2184]	; 17f78 <argp_parse@@Base+0xd08>
   176ec:	sub	r4, ip, #36	; 0x24
   176f0:	mov	r9, #0
   176f4:	ldr	r6, [r4, #36]	; 0x24
   176f8:	sub	r2, fp, #96	; 0x60
   176fc:	cmp	r6, #0
   17700:	mov	r1, r9
   17704:	mov	r0, r8
   17708:	mov	r7, r4
   1770c:	beq	17740 <argp_parse@@Base+0x4d0>
   17710:	ldr	r3, [r4, #68]	; 0x44
   17714:	ldr	ip, [r4, #48]	; 0x30
   17718:	str	r3, [fp, #-60]	; 0xffffffc4
   1771c:	ldr	r3, [r4, #60]	; 0x3c
   17720:	str	r3, [fp, #-68]	; 0xffffffbc
   17724:	ldr	r3, [r4, #64]	; 0x40
   17728:	str	ip, [fp, #-76]	; 0xffffffb4
   1772c:	str	r3, [fp, #-64]	; 0xffffffc0
   17730:	blx	r6
   17734:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17738:	str	r3, [r4, #68]	; 0x44
   1773c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17740:	cmp	r3, r7
   17744:	sub	r4, r4, #36	; 0x24
   17748:	bls	176f4 <argp_parse@@Base+0x484>
   1774c:	cmp	r5, #7
   17750:	moveq	r5, #22
   17754:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17758:	bl	18108 <argp_parse@@Base+0xe98>
   1775c:	mov	r0, r5
   17760:	sub	sp, fp, #32
   17764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17768:	mov	sl, #36	; 0x24
   1776c:	mov	r5, sl
   17770:	mov	r9, #52	; 0x34
   17774:	str	r7, [fp, #-236]	; 0xffffff14
   17778:	b	17340 <argp_parse@@Base+0xd0>
   1777c:	add	sl, sl, #1
   17780:	mov	r3, #45	; 0x2d
   17784:	str	sl, [fp, #-208]	; 0xffffff30
   17788:	strb	r3, [r8, r9]
   1778c:	b	173f8 <argp_parse@@Base+0x188>
   17790:	ldr	r3, [fp, #8]
   17794:	add	r4, r5, #36	; 0x24
   17798:	str	r3, [r5, #24]
   1779c:	mov	r7, #0
   177a0:	ldr	r6, [pc, #2004]	; 17f7c <argp_parse@@Base+0xd0c>
   177a4:	b	177fc <argp_parse@@Base+0x58c>
   177a8:	ldr	r2, [r4, #-4]
   177ac:	ldr	r0, [r4, #-24]	; 0xffffffe8
   177b0:	str	r2, [fp, #-60]	; 0xffffffc4
   177b4:	ldr	r1, [r4, #-12]
   177b8:	sub	r2, fp, #96	; 0x60
   177bc:	str	r1, [fp, #-68]	; 0xffffffbc
   177c0:	ldr	ip, [r4, #-8]
   177c4:	mov	r1, r7
   177c8:	str	r0, [fp, #-76]	; 0xffffffb4
   177cc:	str	ip, [fp, #-64]	; 0xffffffc0
   177d0:	mov	r0, r6
   177d4:	blx	r3
   177d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   177dc:	str	r3, [r4, #-4]
   177e0:	ldr	r3, [fp, #-108]	; 0xffffff94
   177e4:	cmp	r3, r4
   177e8:	bls	17f18 <argp_parse@@Base+0xca8>
   177ec:	cmp	r0, #7
   177f0:	cmpne	r0, #0
   177f4:	bne	17914 <argp_parse@@Base+0x6a4>
   177f8:	add	r4, r4, #36	; 0x24
   177fc:	ldr	r3, [r4, #-20]	; 0xffffffec
   17800:	cmp	r3, #0
   17804:	ldrne	r3, [r3, #28]
   17808:	ldrne	r2, [r4, #-16]
   1780c:	ldrne	r3, [r3, r2, lsl #2]
   17810:	strne	r3, [r4, #-12]
   17814:	ldr	r3, [r4, #-36]	; 0xffffffdc
   17818:	cmp	r3, #0
   1781c:	bne	177a8 <argp_parse@@Base+0x538>
   17820:	ldr	r3, [r4, #-32]	; 0xffffffe0
   17824:	ldr	r3, [r3, #16]
   17828:	cmp	r3, #0
   1782c:	beq	17854 <argp_parse@@Base+0x5e4>
   17830:	ldr	r3, [r3]
   17834:	cmp	r3, #0
   17838:	beq	17854 <argp_parse@@Base+0x5e4>
   1783c:	ldr	r3, [r4, #-8]
   17840:	ldr	r2, [r4, #-12]
   17844:	str	r2, [r3]
   17848:	ldr	r3, [r4, #-36]	; 0xffffffdc
   1784c:	cmp	r3, #0
   17850:	bne	177a8 <argp_parse@@Base+0x538>
   17854:	ldr	r3, [fp, #-108]	; 0xffffff94
   17858:	cmp	r3, r4
   1785c:	bhi	177f8 <argp_parse@@Base+0x588>
   17860:	b	17490 <argp_parse@@Base+0x220>
   17864:	sub	sp, sp, #72	; 0x48
   17868:	add	r4, sp, #8
   1786c:	sub	sp, sp, #40	; 0x28
   17870:	add	r5, sp, #8
   17874:	mov	r1, r3
   17878:	mov	r0, r4
   1787c:	mov	r2, #64	; 0x40
   17880:	str	r3, [r5]
   17884:	str	r3, [r5, #4]
   17888:	str	r3, [r5, #8]
   1788c:	str	r3, [r5, #12]
   17890:	str	r3, [r5, #20]
   17894:	str	r3, [r5, #24]
   17898:	str	r4, [r5, #16]
   1789c:	bl	1143c <memset@plt>
   178a0:	ldr	r3, [pc, #1752]	; 17f80 <argp_parse@@Base+0xd10>
   178a4:	cmp	r7, #0
   178a8:	strne	r7, [r4]
   178ac:	ldr	r3, [r3]
   178b0:	addne	r4, r4, #16
   178b4:	ldr	r2, [pc, #1736]	; 17f84 <argp_parse@@Base+0xd14>
   178b8:	cmp	r3, #0
   178bc:	str	r2, [r4]
   178c0:	beq	17e4c <argp_parse@@Base+0xbdc>
   178c4:	ldr	r2, [pc, #1724]	; 17f88 <argp_parse@@Base+0xd18>
   178c8:	add	r3, r4, #32
   178cc:	str	r2, [r4, #16]
   178d0:	mov	r8, #0
   178d4:	sub	r4, fp, #196	; 0xc4
   178d8:	str	r8, [r3]
   178dc:	mov	r1, r8
   178e0:	mov	r0, r4
   178e4:	mov	r2, #36	; 0x24
   178e8:	bl	1143c <memset@plt>
   178ec:	ands	r3, r6, #4
   178f0:	str	r3, [fp, #-244]	; 0xffffff0c
   178f4:	moveq	r3, #1
   178f8:	movne	r3, r8
   178fc:	mov	r7, r5
   17900:	str	r8, [fp, #-224]	; 0xffffff20
   17904:	str	r8, [fp, #-220]	; 0xffffff24
   17908:	str	r8, [fp, #-216]	; 0xffffff28
   1790c:	str	r3, [fp, #-228]	; 0xffffff1c
   17910:	b	17304 <argp_parse@@Base+0x94>
   17914:	mov	r5, r0
   17918:	mov	r0, r5
   1791c:	sub	sp, fp, #32
   17920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17924:	ldr	r5, [fp, #-112]	; 0xffffff90
   17928:	mov	r8, r5
   1792c:	str	r5, [fp, #-108]	; 0xffffff94
   17930:	b	1743c <argp_parse@@Base+0x1cc>
   17934:	tst	r3, #1
   17938:	mov	r3, #0
   1793c:	str	r3, [fp, #-144]	; 0xffffff70
   17940:	ldr	r4, [fp, #-92]	; 0xffffffa4
   17944:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17948:	subne	r3, r3, #4
   1794c:	addne	r4, r4, #1
   17950:	strne	r3, [fp, #-88]	; 0xffffffa8
   17954:	strne	r4, [fp, #-92]	; 0xffffffa4
   17958:	b	174ac <argp_parse@@Base+0x23c>
   1795c:	ldr	r3, [fp, #-232]	; 0xffffff18
   17960:	ldr	r0, [r3]
   17964:	bl	1805c <argp_parse@@Base+0xdec>
   17968:	str	r0, [r4]
   1796c:	b	172bc <argp_parse@@Base+0x4c>
   17970:	cmp	r2, #0
   17974:	beq	174f0 <argp_parse@@Base+0x280>
   17978:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1797c:	str	r5, [fp, #-148]	; 0xffffff6c
   17980:	ands	ip, r3, #64	; 0x40
   17984:	mvn	r3, #0
   17988:	str	r3, [fp, #-140]	; 0xffffff74
   1798c:	ldr	r2, [fp, #-156]	; 0xffffff64
   17990:	ldr	r3, [fp, #-152]	; 0xffffff68
   17994:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17998:	beq	17cb8 <argp_parse@@Base+0xa48>
   1799c:	sub	ip, fp, #148	; 0x94
   179a0:	stm	sp, {r6, ip}
   179a4:	bl	181dc <argp_parse@@Base+0xf6c>
   179a8:	ldr	r5, [fp, #-148]	; 0xffffff6c
   179ac:	str	r5, [fp, #-84]	; 0xffffffac
   179b0:	mov	r7, r0
   179b4:	cmn	r7, #1
   179b8:	beq	17cd8 <argp_parse@@Base+0xa68>
   179bc:	cmp	r7, #63	; 0x3f
   179c0:	beq	17ddc <argp_parse@@Base+0xb6c>
   179c4:	cmp	r7, #1
   179c8:	beq	17b20 <argp_parse@@Base+0x8b0>
   179cc:	asrs	r8, r7, #24
   179d0:	bne	17a7c <argp_parse@@Base+0x80c>
   179d4:	mov	r1, r7
   179d8:	ldr	r0, [fp, #-156]	; 0xffffff64
   179dc:	bl	113f4 <strchr@plt>
   179e0:	cmp	r0, #0
   179e4:	beq	17aec <argp_parse@@Base+0x87c>
   179e8:	ldr	r4, [fp, #-112]	; 0xffffff90
   179ec:	ldr	r2, [fp, #-108]	; 0xffffff94
   179f0:	cmp	r4, r2
   179f4:	bcc	17a08 <argp_parse@@Base+0x798>
   179f8:	b	17aec <argp_parse@@Base+0x87c>
   179fc:	add	r4, r4, #36	; 0x24
   17a00:	cmp	r4, r2
   17a04:	bcs	17aec <argp_parse@@Base+0x87c>
   17a08:	ldr	r3, [r4, #8]
   17a0c:	cmp	r0, r3
   17a10:	bcs	179fc <argp_parse@@Base+0x78c>
   17a14:	ldr	r3, [r4]
   17a18:	cmp	r3, #0
   17a1c:	beq	17aec <argp_parse@@Base+0x87c>
   17a20:	ldr	r2, [r4, #32]
   17a24:	ldr	r0, [r4, #28]
   17a28:	ldr	ip, [r4, #24]
   17a2c:	str	r2, [fp, #-60]	; 0xffffffc4
   17a30:	ldr	r2, [r4, #12]
   17a34:	ldr	r1, [fp, #-136]	; 0xffffff78
   17a38:	str	r0, [fp, #-64]	; 0xffffffc0
   17a3c:	str	r2, [fp, #-76]	; 0xffffffb4
   17a40:	str	ip, [fp, #-68]	; 0xffffffbc
   17a44:	sub	r2, fp, #96	; 0x60
   17a48:	mov	r0, r7
   17a4c:	blx	r3
   17a50:	mov	r8, r6
   17a54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17a58:	str	r3, [r4, #32]
   17a5c:	cmp	r0, #7
   17a60:	beq	17ae4 <argp_parse@@Base+0x874>
   17a64:	cmp	r0, #0
   17a68:	bne	17660 <argp_parse@@Base+0x3f0>
   17a6c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   17a70:	ldr	r5, [fp, #-84]	; 0xffffffac
   17a74:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17a78:	b	174d8 <argp_parse@@Base+0x268>
   17a7c:	add	r3, r8, r8, lsl #3
   17a80:	ldr	r2, [fp, #-112]	; 0xffffff90
   17a84:	lsl	r3, r3, #2
   17a88:	sub	r3, r3, #36	; 0x24
   17a8c:	add	r4, r2, r3
   17a90:	ldr	r5, [r2, r3]
   17a94:	ands	r3, r7, #8388608	; 0x800000
   17a98:	movne	r3, #-16777216	; 0xff000000
   17a9c:	cmp	r5, #0
   17aa0:	beq	17c70 <argp_parse@@Base+0xa00>
   17aa4:	ldr	r0, [r4, #32]
   17aa8:	ldr	r2, [r4, #24]
   17aac:	str	r0, [fp, #-60]	; 0xffffffc4
   17ab0:	ldr	r0, [r4, #28]
   17ab4:	str	r2, [fp, #-68]	; 0xffffffbc
   17ab8:	ldr	r2, [r4, #12]
   17abc:	str	r0, [fp, #-64]	; 0xffffffc0
   17ac0:	bic	r0, r7, #-16777216	; 0xff000000
   17ac4:	str	r2, [fp, #-76]	; 0xffffffb4
   17ac8:	orr	r0, r0, r3
   17acc:	ldr	r1, [fp, #-136]	; 0xffffff78
   17ad0:	sub	r2, fp, #96	; 0x60
   17ad4:	blx	r5
   17ad8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17adc:	str	r3, [r4, #32]
   17ae0:	b	17a5c <argp_parse@@Base+0x7ec>
   17ae4:	cmp	r8, #0
   17ae8:	bne	17c70 <argp_parse@@Base+0xa00>
   17aec:	mov	r2, r7
   17af0:	ldr	r3, [pc, #1172]	; 17f8c <argp_parse@@Base+0xd1c>
   17af4:	ldr	r1, [pc, #1172]	; 17f90 <argp_parse@@Base+0xd20>
   17af8:	sub	r0, fp, #96	; 0x60
   17afc:	bl	16bcc <argp_error@@Base>
   17b00:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17b04:	mov	r2, #260	; 0x104
   17b08:	sub	r0, fp, #96	; 0x60
   17b0c:	bl	16b1c <argp_state_help@@Base>
   17b10:	mov	r5, #7
   17b14:	ldr	r3, [fp, #-112]	; 0xffffff90
   17b18:	ldr	ip, [fp, #-108]	; 0xffffff94
   17b1c:	b	1766c <argp_parse@@Base+0x3fc>
   17b20:	ldr	r7, [fp, #-136]	; 0xffffff78
   17b24:	ldr	r3, [fp, #-112]	; 0xffffff90
   17b28:	ldr	ip, [fp, #-108]	; 0xffffff94
   17b2c:	sub	r8, r5, #1
   17b30:	cmp	r3, ip
   17b34:	str	r8, [fp, #-84]	; 0xffffffac
   17b38:	bcs	17c64 <argp_parse@@Base+0x9f4>
   17b3c:	mov	lr, r8
   17b40:	add	r4, r3, #36	; 0x24
   17b44:	ldr	r3, [r4, #-36]	; 0xffffffdc
   17b48:	add	r5, lr, #1
   17b4c:	cmp	r3, #0
   17b50:	str	r5, [fp, #-84]	; 0xffffffac
   17b54:	sub	r2, fp, #96	; 0x60
   17b58:	mov	r1, r7
   17b5c:	mov	r0, r6
   17b60:	sub	r5, r4, #36	; 0x24
   17b64:	mov	r9, r4
   17b68:	streq	lr, [fp, #-84]	; 0xffffffac
   17b6c:	beq	17c58 <argp_parse@@Base+0x9e8>
   17b70:	ldr	ip, [r4, #-4]
   17b74:	ldr	lr, [r4, #-24]	; 0xffffffe8
   17b78:	str	ip, [fp, #-60]	; 0xffffffc4
   17b7c:	ldr	ip, [r4, #-12]
   17b80:	str	ip, [fp, #-68]	; 0xffffffbc
   17b84:	ldr	ip, [r4, #-8]
   17b88:	str	lr, [fp, #-76]	; 0xffffffb4
   17b8c:	str	ip, [fp, #-64]	; 0xffffffc0
   17b90:	blx	r3
   17b94:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17b98:	str	r3, [r4, #-4]
   17b9c:	cmp	r0, #7
   17ba0:	beq	17bdc <argp_parse@@Base+0x96c>
   17ba4:	cmp	r0, #0
   17ba8:	bne	17660 <argp_parse@@Base+0x3f0>
   17bac:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17bb0:	ldr	r5, [fp, #-84]	; 0xffffffac
   17bb4:	cmp	r8, r5
   17bb8:	sublt	r8, r5, r8
   17bbc:	ldrlt	r3, [r4, #-24]	; 0xffffffe8
   17bc0:	movge	r3, #1
   17bc4:	addlt	r8, r3, r8
   17bc8:	strlt	r8, [r4, #-24]	; 0xffffffe8
   17bcc:	ldrlt	r2, [fp, #-100]	; 0xffffff9c
   17bd0:	strge	r3, [fp, #-100]	; 0xffffff9c
   17bd4:	movge	r2, r3
   17bd8:	b	174d8 <argp_parse@@Base+0x268>
   17bdc:	ldr	lr, [fp, #-84]	; 0xffffffac
   17be0:	ldr	r3, [r4, #-36]	; 0xffffffdc
   17be4:	sub	lr, lr, #1
   17be8:	cmp	r3, #0
   17bec:	str	lr, [fp, #-84]	; 0xffffffac
   17bf0:	beq	17c54 <argp_parse@@Base+0x9e4>
   17bf4:	add	r0, r5, #24
   17bf8:	ldr	r2, [r5, #12]
   17bfc:	ldm	r0, {r0, r1, ip}
   17c00:	str	r2, [fp, #-76]	; 0xffffffb4
   17c04:	sub	r2, fp, #96	; 0x60
   17c08:	str	ip, [fp, #-60]	; 0xffffffc4
   17c0c:	str	r0, [fp, #-68]	; 0xffffffbc
   17c10:	str	r1, [fp, #-64]	; 0xffffffc0
   17c14:	mov	r0, sl
   17c18:	mov	r1, r6
   17c1c:	blx	r3
   17c20:	ldr	ip, [fp, #-108]	; 0xffffff94
   17c24:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17c28:	cmp	r4, ip
   17c2c:	movcs	r1, #0
   17c30:	movcc	r1, #1
   17c34:	mov	r3, r4
   17c38:	str	r2, [r5, #32]
   17c3c:	cmp	r0, #7
   17c40:	movne	r1, #0
   17c44:	cmp	r1, #0
   17c48:	beq	17f30 <argp_parse@@Base+0xcc0>
   17c4c:	ldr	lr, [fp, #-84]	; 0xffffffac
   17c50:	b	17b40 <argp_parse@@Base+0x8d0>
   17c54:	ldr	ip, [fp, #-108]	; 0xffffff94
   17c58:	cmp	r9, ip
   17c5c:	add	r4, r4, #36	; 0x24
   17c60:	bcc	17b44 <argp_parse@@Base+0x8d4>
   17c64:	ldr	r5, [fp, #-84]	; 0xffffffac
   17c68:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17c6c:	b	174f8 <argp_parse@@Base+0x288>
   17c70:	ldr	r3, [fp, #-152]	; 0xffffff68
   17c74:	ldr	r2, [r3, #12]
   17c78:	cmp	r2, r7
   17c7c:	bne	17c94 <argp_parse@@Base+0xa24>
   17c80:	b	17dc8 <argp_parse@@Base+0xb58>
   17c84:	add	r3, r3, #16
   17c88:	ldr	r2, [r3, #12]
   17c8c:	cmp	r2, r7
   17c90:	beq	17dc8 <argp_parse@@Base+0xb58>
   17c94:	ldr	r2, [r3]
   17c98:	cmp	r2, #0
   17c9c:	bne	17c84 <argp_parse@@Base+0xa14>
   17ca0:	ldr	r2, [pc, #748]	; 17f94 <argp_parse@@Base+0xd24>
   17ca4:	ldr	r3, [pc, #736]	; 17f8c <argp_parse@@Base+0xd1c>
   17ca8:	ldr	r1, [pc, #744]	; 17f98 <argp_parse@@Base+0xd28>
   17cac:	sub	r0, fp, #96	; 0x60
   17cb0:	bl	16bcc <argp_error@@Base>
   17cb4:	b	17b00 <argp_parse@@Base+0x890>
   17cb8:	sub	lr, fp, #148	; 0x94
   17cbc:	stm	sp, {ip, lr}
   17cc0:	bl	18188 <argp_parse@@Base+0xf18>
   17cc4:	ldr	r5, [fp, #-148]	; 0xffffff6c
   17cc8:	str	r5, [fp, #-84]	; 0xffffffac
   17ccc:	mov	r7, r0
   17cd0:	cmn	r7, #1
   17cd4:	bne	179bc <argp_parse@@Base+0x74c>
   17cd8:	cmp	r5, #1
   17cdc:	str	r6, [fp, #-100]	; 0xffffff9c
   17ce0:	ble	17d00 <argp_parse@@Base+0xa90>
   17ce4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17ce8:	sub	r3, r5, #-1073741823	; 0xc0000001
   17cec:	ldr	r1, [pc, #680]	; 17f9c <argp_parse@@Base+0xd2c>
   17cf0:	ldr	r0, [r2, r3, lsl #2]
   17cf4:	bl	11208 <strcmp@plt>
   17cf8:	cmp	r0, #0
   17cfc:	streq	r5, [fp, #-72]	; 0xffffffb8
   17d00:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17d04:	cmp	r5, r0
   17d08:	bge	174f8 <argp_parse@@Base+0x288>
   17d0c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17d10:	tst	r3, #4
   17d14:	beq	17dec <argp_parse@@Base+0xb7c>
   17d18:	ldr	r3, [fp, #4]
   17d1c:	cmp	r3, #0
   17d20:	beq	17ec4 <argp_parse@@Base+0xc54>
   17d24:	str	r5, [r3]
   17d28:	ldr	ip, [fp, #-108]	; 0xffffff94
   17d2c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17d30:	sub	r2, ip, #36	; 0x24
   17d34:	cmp	r3, r2
   17d38:	bhi	17e20 <argp_parse@@Base+0xbb0>
   17d3c:	ldr	r6, [pc, #604]	; 17fa0 <argp_parse@@Base+0xd30>
   17d40:	sub	r4, ip, #72	; 0x48
   17d44:	mov	r7, #0
   17d48:	ldr	r5, [r4, #36]	; 0x24
   17d4c:	sub	r2, fp, #96	; 0x60
   17d50:	cmp	r5, #0
   17d54:	mov	r1, r7
   17d58:	mov	r0, r6
   17d5c:	beq	17db8 <argp_parse@@Base+0xb48>
   17d60:	ldr	r3, [r4, #68]	; 0x44
   17d64:	ldr	ip, [r4, #48]	; 0x30
   17d68:	str	r3, [fp, #-60]	; 0xffffffc4
   17d6c:	ldr	r3, [r4, #60]	; 0x3c
   17d70:	str	r3, [fp, #-68]	; 0xffffffbc
   17d74:	ldr	r3, [r4, #64]	; 0x40
   17d78:	str	ip, [fp, #-76]	; 0xffffffb4
   17d7c:	str	r3, [fp, #-64]	; 0xffffffc0
   17d80:	blx	r5
   17d84:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17d88:	str	r3, [r4, #68]	; 0x44
   17d8c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17d90:	cmp	r4, r3
   17d94:	bcc	17e00 <argp_parse@@Base+0xb90>
   17d98:	cmp	r0, #7
   17d9c:	cmpne	r0, #0
   17da0:	sub	r4, r4, #36	; 0x24
   17da4:	beq	17d48 <argp_parse@@Base+0xad8>
   17da8:	ldr	ip, [fp, #-108]	; 0xffffff94
   17dac:	mov	r5, r0
   17db0:	sub	ip, ip, #36	; 0x24
   17db4:	b	176e0 <argp_parse@@Base+0x470>
   17db8:	cmp	r4, r3
   17dbc:	bcc	17e0c <argp_parse@@Base+0xb9c>
   17dc0:	sub	r4, r4, #36	; 0x24
   17dc4:	b	17d48 <argp_parse@@Base+0xad8>
   17dc8:	ldr	r2, [r3]
   17dcc:	ldr	r3, [pc, #448]	; 17f94 <argp_parse@@Base+0xd24>
   17dd0:	cmp	r2, #0
   17dd4:	moveq	r2, r3
   17dd8:	b	17ca4 <argp_parse@@Base+0xa34>
   17ddc:	ldr	r3, [fp, #-140]	; 0xffffff74
   17de0:	cmn	r3, #1
   17de4:	bne	17b00 <argp_parse@@Base+0x890>
   17de8:	b	179d4 <argp_parse@@Base+0x764>
   17dec:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17df0:	ldr	r7, [r3, r5, lsl #2]
   17df4:	add	r5, r5, #1
   17df8:	str	r7, [fp, #-136]	; 0xffffff78
   17dfc:	b	17b24 <argp_parse@@Base+0x8b4>
   17e00:	cmp	r0, #7
   17e04:	mov	r5, r0
   17e08:	bne	17e28 <argp_parse@@Base+0xbb8>
   17e0c:	ldr	ip, [fp, #-108]	; 0xffffff94
   17e10:	sub	ip, ip, #36	; 0x24
   17e14:	cmp	ip, r3
   17e18:	movcs	r5, #0
   17e1c:	bcs	176e8 <argp_parse@@Base+0x478>
   17e20:	mov	r5, #0
   17e24:	b	17754 <argp_parse@@Base+0x4e4>
   17e28:	ldr	ip, [fp, #-108]	; 0xffffff94
   17e2c:	sub	ip, ip, #36	; 0x24
   17e30:	b	176e0 <argp_parse@@Base+0x470>
   17e34:	ldr	r0, [r2]
   17e38:	cmp	r0, #0
   17e3c:	beq	174b8 <argp_parse@@Base+0x248>
   17e40:	bl	1805c <argp_parse@@Base+0xdec>
   17e44:	str	r0, [fp, #-56]	; 0xffffffc8
   17e48:	b	174c4 <argp_parse@@Base+0x254>
   17e4c:	ldr	r3, [pc, #336]	; 17fa4 <argp_parse@@Base+0xd34>
   17e50:	ldr	r3, [r3]
   17e54:	cmp	r3, #0
   17e58:	addeq	r3, r4, #16
   17e5c:	bne	178c4 <argp_parse@@Base+0x654>
   17e60:	b	178d0 <argp_parse@@Base+0x660>
   17e64:	mov	r5, r0
   17e68:	ldr	r2, [fp, #4]
   17e6c:	cmp	r2, #0
   17e70:	bne	17644 <argp_parse@@Base+0x3d4>
   17e74:	cmp	r5, #7
   17e78:	bne	17668 <argp_parse@@Base+0x3f8>
   17e7c:	b	17b00 <argp_parse@@Base+0x890>
   17e80:	ldr	r3, [fp, #-112]	; 0xffffff90
   17e84:	sub	ip, ip, #36	; 0x24
   17e88:	cmp	r3, ip
   17e8c:	mov	r5, r0
   17e90:	bls	17e68 <argp_parse@@Base+0xbf8>
   17e94:	ldr	r2, [fp, #4]
   17e98:	cmp	r2, #0
   17e9c:	bne	17644 <argp_parse@@Base+0x3d4>
   17ea0:	b	17650 <argp_parse@@Base+0x3e0>
   17ea4:	ldr	r3, [fp, #-112]	; 0xffffff90
   17ea8:	sub	r4, ip, #36	; 0x24
   17eac:	cmp	r4, r3
   17eb0:	mov	r5, r0
   17eb4:	bcs	175b0 <argp_parse@@Base+0x340>
   17eb8:	cmp	r5, #7
   17ebc:	beq	17634 <argp_parse@@Base+0x3c4>
   17ec0:	b	17e94 <argp_parse@@Base+0xc24>
   17ec4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17ec8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17ecc:	tst	r3, #2
   17ed0:	bne	17b04 <argp_parse@@Base+0x894>
   17ed4:	cmp	r1, #0
   17ed8:	beq	17b04 <argp_parse@@Base+0x894>
   17edc:	mov	r0, r1
   17ee0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17ee4:	ldr	r1, [pc, #188]	; 17fa8 <argp_parse@@Base+0xd38>
   17ee8:	bl	11400 <fprintf@plt>
   17eec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17ef0:	b	17b04 <argp_parse@@Base+0x894>
   17ef4:	mov	r5, r0
   17ef8:	b	17eb8 <argp_parse@@Base+0xc48>
   17efc:	sub	r4, ip, #36	; 0x24
   17f00:	cmp	r3, r4
   17f04:	bls	175bc <argp_parse@@Base+0x34c>
   17f08:	ldr	r2, [fp, #4]
   17f0c:	cmp	r2, #0
   17f10:	bne	17640 <argp_parse@@Base+0x3d0>
   17f14:	b	17d30 <argp_parse@@Base+0xac0>
   17f18:	cmp	r0, #7
   17f1c:	mov	r5, r0
   17f20:	beq	17490 <argp_parse@@Base+0x220>
   17f24:	cmp	r0, #0
   17f28:	beq	17490 <argp_parse@@Base+0x220>
   17f2c:	b	1775c <argp_parse@@Base+0x4ec>
   17f30:	cmp	r0, #0
   17f34:	ldreq	r0, [fp, #-92]	; 0xffffffa4
   17f38:	moveq	r5, r0
   17f3c:	streq	r0, [fp, #-84]	; 0xffffffac
   17f40:	beq	17bb4 <argp_parse@@Base+0x944>
   17f44:	cmp	r0, #7
   17f48:	mov	r5, r0
   17f4c:	beq	17c64 <argp_parse@@Base+0x9f4>
   17f50:	ldr	r3, [fp, #-112]	; 0xffffff90
   17f54:	b	1766c <argp_parse@@Base+0x3fc>
   17f58:	andeq	ip, r2, ip, asr #8
   17f5c:	andeq	ip, r2, r8, asr #8
   17f60:	andeq	ip, r2, r0, asr r4
   17f64:	andeq	ip, r2, ip, asr r4
   17f68:	tsteq	r0, r6
   17f6c:	tsteq	r0, r2
   17f70:	tsteq	r0, r1
   17f74:	tsteq	r0, r5
   17f78:	tsteq	r0, r7
   17f7c:	tsteq	r0, r3
   17f80:	andeq	ip, r2, r0, asr #31
   17f84:	andeq	fp, r1, ip, asr #32
   17f88:	andeq	fp, r1, r8, rrx
   17f8c:	andeq	fp, r1, r4, lsl #1
   17f90:	muleq	r1, r8, r1
   17f94:	muleq	r1, r0, r1
   17f98:	andeq	fp, r1, r0, lsr #3
   17f9c:	muleq	r1, r4, r1
   17fa0:	tsteq	r0, r4
   17fa4:	andeq	ip, r2, ip, lsl #10
   17fa8:	andeq	fp, r1, ip, lsr #3
   17fac:	cmp	r1, #0
   17fb0:	beq	17ff0 <argp_parse@@Base+0xd80>
   17fb4:	ldr	r2, [r1, #52]	; 0x34
   17fb8:	ldr	r3, [r2, #48]	; 0x30
   17fbc:	ldr	r1, [r2, #52]	; 0x34
   17fc0:	cmp	r3, r1
   17fc4:	bcs	17ff0 <argp_parse@@Base+0xd80>
   17fc8:	ldr	r2, [r3, #4]
   17fcc:	cmp	r0, r2
   17fd0:	bne	17fe4 <argp_parse@@Base+0xd74>
   17fd4:	b	17ff8 <argp_parse@@Base+0xd88>
   17fd8:	ldr	r2, [r3, #4]
   17fdc:	cmp	r2, r0
   17fe0:	beq	17ff8 <argp_parse@@Base+0xd88>
   17fe4:	add	r3, r3, #36	; 0x24
   17fe8:	cmp	r3, r1
   17fec:	bcc	17fd8 <argp_parse@@Base+0xd68>
   17ff0:	mov	r0, #0
   17ff4:	bx	lr
   17ff8:	ldr	r0, [r3, #24]
   17ffc:	bx	lr
   18000:	ldr	ip, [pc, #32]	; 18028 <argp_parse@@Base+0xdb8>
   18004:	push	{lr}		; (str lr, [sp, #-4]!)
   18008:	sub	sp, sp, #12
   1800c:	ldm	ip, {r1, ip}
   18010:	ldr	r3, [pc, #20]	; 1802c <argp_parse@@Base+0xdbc>
   18014:	ldr	r2, [pc, #20]	; 18030 <argp_parse@@Base+0xdc0>
   18018:	str	ip, [sp]
   1801c:	bl	1859c <argp_parse@@Base+0x132c>
   18020:	add	sp, sp, #12
   18024:	pop	{pc}		; (ldr pc, [sp], #4)
   18028:	andeq	ip, r2, r0, lsl r5
   1802c:	andeq	fp, r1, r4, lsl #5
   18030:	muleq	r1, r4, r2
   18034:	ldr	r3, [pc, #20]	; 18050 <argp_parse@@Base+0xde0>
   18038:	ldr	r2, [pc, #20]	; 18054 <argp_parse@@Base+0xde4>
   1803c:	ldr	ip, [pc, #20]	; 18058 <argp_parse@@Base+0xde8>
   18040:	str	r0, [r3]
   18044:	str	ip, [r2]
   18048:	str	r1, [r3, #4]
   1804c:	bx	lr
   18050:	andeq	ip, r2, r0, lsl r5
   18054:	andeq	ip, r2, ip, lsl #10
   18058:	andeq	r8, r1, r0
   1805c:	ldrb	r3, [r0]
   18060:	cmp	r3, #47	; 0x2f
   18064:	bne	18074 <argp_parse@@Base+0xe04>
   18068:	ldrb	r3, [r0, #1]!
   1806c:	cmp	r3, #47	; 0x2f
   18070:	beq	18068 <argp_parse@@Base+0xdf8>
   18074:	cmp	r3, #0
   18078:	bxeq	lr
   1807c:	mov	r2, #0
   18080:	push	{lr}		; (str lr, [sp, #-4]!)
   18084:	mov	ip, r2
   18088:	mov	r1, r0
   1808c:	mov	lr, #1
   18090:	cmp	r3, #47	; 0x2f
   18094:	moveq	r2, lr
   18098:	beq	180a8 <argp_parse@@Base+0xe38>
   1809c:	cmp	r2, #0
   180a0:	movne	r0, r1
   180a4:	movne	r2, ip
   180a8:	ldrb	r3, [r1, #1]!
   180ac:	cmp	r3, #0
   180b0:	bne	18090 <argp_parse@@Base+0xe20>
   180b4:	pop	{pc}		; (ldr pc, [sp], #4)
   180b8:	push	{r4, lr}
   180bc:	mov	r4, r0
   180c0:	bl	113e8 <strlen@plt>
   180c4:	cmp	r0, #1
   180c8:	popls	{r4, pc}
   180cc:	sub	r3, r0, #1
   180d0:	add	r2, r4, r3
   180d4:	ldrb	r1, [r4, r3]
   180d8:	cmp	r1, #47	; 0x2f
   180dc:	popne	{r4, pc}
   180e0:	cmp	r3, #1
   180e4:	beq	180f8 <argp_parse@@Base+0xe88>
   180e8:	ldrb	r1, [r2, #-1]!
   180ec:	sub	r0, r3, #1
   180f0:	cmp	r1, #47	; 0x2f
   180f4:	beq	18100 <argp_parse@@Base+0xe90>
   180f8:	mov	r0, r3
   180fc:	pop	{r4, pc}
   18100:	mov	r3, r0
   18104:	b	180e0 <argp_parse@@Base+0xe70>
   18108:	push	{r4, r5, lr}
   1810c:	sub	sp, sp, #12
   18110:	mov	r5, r0
   18114:	bl	1140c <__errno_location@plt>
   18118:	mov	r2, #0
   1811c:	mov	r4, r0
   18120:	ldr	r3, [r0]
   18124:	str	r2, [r4]
   18128:	mov	r0, r5
   1812c:	str	r3, [sp]
   18130:	str	r3, [sp, #4]
   18134:	bl	11268 <free@plt>
   18138:	ldr	r3, [r4]
   1813c:	add	r2, sp, #8
   18140:	cmp	r3, #0
   18144:	moveq	r3, #4
   18148:	movne	r3, #0
   1814c:	add	r3, r2, r3
   18150:	ldr	r3, [r3, #-8]
   18154:	str	r3, [r4]
   18158:	add	sp, sp, #12
   1815c:	pop	{r4, r5, pc}
   18160:	push	{lr}		; (str lr, [sp, #-4]!)
   18164:	sub	sp, sp, #20
   18168:	mov	ip, #0
   1816c:	ldr	lr, [sp, #24]
   18170:	str	ip, [sp, #8]
   18174:	str	lr, [sp]
   18178:	str	ip, [sp, #4]
   1817c:	bl	1a054 <argp_parse@@Base+0x2de4>
   18180:	add	sp, sp, #20
   18184:	pop	{pc}		; (ldr pc, [sp], #4)
   18188:	push	{r4, lr}
   1818c:	sub	sp, sp, #16
   18190:	mov	ip, #0
   18194:	ldr	r4, [sp, #24]
   18198:	ldr	lr, [sp, #28]
   1819c:	str	r4, [sp]
   181a0:	str	lr, [sp, #8]
   181a4:	str	ip, [sp, #12]
   181a8:	str	ip, [sp, #4]
   181ac:	bl	19af4 <argp_parse@@Base+0x2884>
   181b0:	add	sp, sp, #16
   181b4:	pop	{r4, pc}
   181b8:	push	{r4, lr}
   181bc:	sub	sp, sp, #16
   181c0:	mov	lr, #0
   181c4:	ldr	r4, [sp, #24]
   181c8:	mov	ip, #1
   181cc:	stm	sp, {r4, ip, lr}
   181d0:	bl	1a054 <argp_parse@@Base+0x2de4>
   181d4:	add	sp, sp, #16
   181d8:	pop	{r4, pc}
   181dc:	push	{r4, r5, lr}
   181e0:	sub	sp, sp, #20
   181e4:	mov	lr, #0
   181e8:	ldr	r5, [sp, #32]
   181ec:	ldr	r4, [sp, #36]	; 0x24
   181f0:	mov	ip, #1
   181f4:	str	r5, [sp]
   181f8:	str	r4, [sp, #8]
   181fc:	str	lr, [sp, #12]
   18200:	str	ip, [sp, #4]
   18204:	bl	19af4 <argp_parse@@Base+0x2884>
   18208:	add	sp, sp, #20
   1820c:	pop	{r4, r5, pc}
   18210:	push	{r1, r2, r3}
   18214:	push	{lr}		; (str lr, [sp, #-4]!)
   18218:	sub	sp, sp, #8
   1821c:	add	r3, sp, #16
   18220:	ldr	r2, [sp, #16]
   18224:	ldr	r1, [sp, #12]
   18228:	str	r3, [sp, #4]
   1822c:	bl	1131c <ioctl@plt>
   18230:	add	sp, sp, #8
   18234:	pop	{lr}		; (ldr lr, [sp], #4)
   18238:	add	sp, sp, #12
   1823c:	bx	lr
   18240:	push	{r4, r5, r6, lr}
   18244:	subs	r4, r0, #0
   18248:	beq	182bc <argp_parse@@Base+0x104c>
   1824c:	mov	r1, #47	; 0x2f
   18250:	bl	114b4 <strrchr@plt>
   18254:	subs	r5, r0, #0
   18258:	beq	182a8 <argp_parse@@Base+0x1038>
   1825c:	add	r6, r5, #1
   18260:	sub	r3, r6, r4
   18264:	cmp	r3, #6
   18268:	ble	182a8 <argp_parse@@Base+0x1038>
   1826c:	mov	r2, #7
   18270:	ldr	r1, [pc, #96]	; 182d8 <argp_parse@@Base+0x1068>
   18274:	sub	r0, r5, #6
   18278:	bl	11538 <strncmp@plt>
   1827c:	cmp	r0, #0
   18280:	bne	182a8 <argp_parse@@Base+0x1038>
   18284:	mov	r2, #3
   18288:	ldr	r1, [pc, #76]	; 182dc <argp_parse@@Base+0x106c>
   1828c:	mov	r0, r6
   18290:	bl	11538 <strncmp@plt>
   18294:	cmp	r0, #0
   18298:	movne	r4, r6
   1829c:	ldreq	r3, [pc, #60]	; 182e0 <argp_parse@@Base+0x1070>
   182a0:	addeq	r4, r5, #4
   182a4:	streq	r4, [r3]
   182a8:	ldr	r2, [pc, #52]	; 182e4 <argp_parse@@Base+0x1074>
   182ac:	ldr	r3, [pc, #52]	; 182e8 <argp_parse@@Base+0x1078>
   182b0:	str	r4, [r2]
   182b4:	str	r4, [r3]
   182b8:	pop	{r4, r5, r6, pc}
   182bc:	ldr	r3, [pc, #40]	; 182ec <argp_parse@@Base+0x107c>
   182c0:	mov	r2, #55	; 0x37
   182c4:	mov	r1, #1
   182c8:	ldr	r3, [r3]
   182cc:	ldr	r0, [pc, #28]	; 182f0 <argp_parse@@Base+0x1080>
   182d0:	bl	11310 <fwrite@plt>
   182d4:	bl	11544 <abort@plt>
   182d8:	ldrdeq	fp, [r1], -ip
   182dc:	andeq	fp, r1, r4, ror #5
   182e0:	andeq	ip, r2, r8, asr #8
   182e4:	andeq	ip, r2, r8, lsl r5
   182e8:	andeq	ip, r2, ip, asr #8
   182ec:	andeq	ip, r2, r0, asr r4
   182f0:	andeq	fp, r1, r4, lsr #5
   182f4:	push	{r4, r5, r6, r7, lr}
   182f8:	sub	sp, sp, #36	; 0x24
   182fc:	cmp	r1, #0
   18300:	mov	r4, r0
   18304:	ldr	r5, [sp, #56]	; 0x38
   18308:	ldr	r6, [sp, #60]	; 0x3c
   1830c:	beq	1854c <argp_parse@@Base+0x12dc>
   18310:	str	r3, [sp]
   18314:	mov	r3, r2
   18318:	mov	r2, r1
   1831c:	ldr	r1, [pc, #564]	; 18558 <argp_parse@@Base+0x12e8>
   18320:	bl	11400 <fprintf@plt>
   18324:	ldr	r3, [pc, #560]	; 1855c <argp_parse@@Base+0x12ec>
   18328:	ldr	r2, [pc, #560]	; 18560 <argp_parse@@Base+0x12f0>
   1832c:	ldr	r1, [pc, #560]	; 18564 <argp_parse@@Base+0x12f4>
   18330:	mov	r0, r4
   18334:	bl	11400 <fprintf@plt>
   18338:	mov	r1, r4
   1833c:	mov	r0, #10
   18340:	bl	114cc <fputc@plt>
   18344:	ldr	r1, [pc, #540]	; 18568 <argp_parse@@Base+0x12f8>
   18348:	ldr	r2, [pc, #540]	; 1856c <argp_parse@@Base+0x12fc>
   1834c:	mov	r0, r4
   18350:	bl	11400 <fprintf@plt>
   18354:	mov	r1, r4
   18358:	mov	r0, #10
   1835c:	bl	114cc <fputc@plt>
   18360:	cmp	r6, #9
   18364:	ldrls	pc, [pc, r6, lsl #2]
   18368:	b	18394 <argp_parse@@Base+0x1124>
   1836c:	ldrdeq	r8, [r1], -r4
   18370:	andeq	r8, r1, r0, lsr #8
   18374:	andeq	r8, r1, r8, lsr r4
   18378:	andeq	r8, r1, r0, asr r4
   1837c:	andeq	r8, r1, r0, ror r4
   18380:	muleq	r1, r8, r4
   18384:			; <UNDEFINED> instruction: 0x000184b8
   18388:	andeq	r8, r1, r0, ror #9
   1838c:	andeq	r8, r1, r0, lsl r5
   18390:	ldrdeq	r8, [r1], -ip
   18394:	ldr	ip, [r5, #32]
   18398:	ldr	r1, [r5, #28]
   1839c:	ldm	r5, {r2, r3}
   183a0:	ldr	r7, [r5, #24]
   183a4:	ldr	r6, [r5, #20]
   183a8:	str	ip, [sp, #24]
   183ac:	ldr	lr, [r5, #16]
   183b0:	str	r1, [sp, #20]
   183b4:	ldr	r1, [r5, #8]
   183b8:	ldr	ip, [r5, #12]
   183bc:	mov	r0, r4
   183c0:	str	r7, [sp, #16]
   183c4:	stm	sp, {r1, ip, lr}
   183c8:	str	r6, [sp, #12]
   183cc:	ldr	r1, [pc, #412]	; 18570 <argp_parse@@Base+0x1300>
   183d0:	bl	11400 <fprintf@plt>
   183d4:	add	sp, sp, #36	; 0x24
   183d8:	pop	{r4, r5, r6, r7, pc}
   183dc:	ldr	ip, [r5, #32]
   183e0:	ldr	r1, [r5, #28]
   183e4:	ldm	r5, {r2, r3}
   183e8:	ldr	r7, [r5, #24]
   183ec:	ldr	r6, [r5, #20]
   183f0:	str	ip, [sp, #24]
   183f4:	ldr	lr, [r5, #16]
   183f8:	str	r1, [sp, #20]
   183fc:	ldr	r1, [r5, #8]
   18400:	ldr	ip, [r5, #12]
   18404:	mov	r0, r4
   18408:	str	r7, [sp, #16]
   1840c:	stm	sp, {r1, ip, lr}
   18410:	str	r6, [sp, #12]
   18414:	ldr	r1, [pc, #344]	; 18574 <argp_parse@@Base+0x1304>
   18418:	bl	11400 <fprintf@plt>
   1841c:	b	183d4 <argp_parse@@Base+0x1164>
   18420:	ldr	r2, [r5]
   18424:	mov	r0, r4
   18428:	ldr	r1, [pc, #328]	; 18578 <argp_parse@@Base+0x1308>
   1842c:	add	sp, sp, #36	; 0x24
   18430:	pop	{r4, r5, r6, r7, lr}
   18434:	b	11400 <fprintf@plt>
   18438:	mov	r0, r4
   1843c:	ldm	r5, {r2, r3}
   18440:	ldr	r1, [pc, #308]	; 1857c <argp_parse@@Base+0x130c>
   18444:	add	sp, sp, #36	; 0x24
   18448:	pop	{r4, r5, r6, r7, lr}
   1844c:	b	11400 <fprintf@plt>
   18450:	ldr	r1, [r5, #8]
   18454:	ldm	r5, {r2, r3}
   18458:	mov	r0, r4
   1845c:	str	r1, [sp, #56]	; 0x38
   18460:	ldr	r1, [pc, #280]	; 18580 <argp_parse@@Base+0x1310>
   18464:	add	sp, sp, #36	; 0x24
   18468:	pop	{r4, r5, r6, r7, lr}
   1846c:	b	11400 <fprintf@plt>
   18470:	ldr	r1, [r5, #8]
   18474:	ldr	ip, [r5, #12]
   18478:	ldm	r5, {r2, r3}
   1847c:	mov	r0, r4
   18480:	str	r1, [sp, #56]	; 0x38
   18484:	str	ip, [sp, #60]	; 0x3c
   18488:	ldr	r1, [pc, #244]	; 18584 <argp_parse@@Base+0x1314>
   1848c:	add	sp, sp, #36	; 0x24
   18490:	pop	{r4, r5, r6, r7, lr}
   18494:	b	11400 <fprintf@plt>
   18498:	add	r1, r5, #8
   1849c:	ldm	r5, {r2, r3}
   184a0:	ldm	r1, {r1, ip, lr}
   184a4:	mov	r0, r4
   184a8:	stm	sp, {r1, ip, lr}
   184ac:	ldr	r1, [pc, #212]	; 18588 <argp_parse@@Base+0x1318>
   184b0:	bl	11400 <fprintf@plt>
   184b4:	b	183d4 <argp_parse@@Base+0x1164>
   184b8:	add	r1, r5, #8
   184bc:	ldr	r6, [r5, #20]
   184c0:	ldm	r1, {r1, ip, lr}
   184c4:	mov	r0, r4
   184c8:	ldm	r5, {r2, r3}
   184cc:	str	r6, [sp, #12]
   184d0:	stm	sp, {r1, ip, lr}
   184d4:	ldr	r1, [pc, #176]	; 1858c <argp_parse@@Base+0x131c>
   184d8:	bl	11400 <fprintf@plt>
   184dc:	b	183d4 <argp_parse@@Base+0x1164>
   184e0:	add	r1, r5, #8
   184e4:	ldr	r7, [r5, #24]
   184e8:	ldm	r1, {r1, ip, lr}
   184ec:	mov	r0, r4
   184f0:	ldr	r6, [r5, #20]
   184f4:	ldm	r5, {r2, r3}
   184f8:	stm	sp, {r1, ip, lr}
   184fc:	str	r7, [sp, #16]
   18500:	str	r6, [sp, #12]
   18504:	ldr	r1, [pc, #132]	; 18590 <argp_parse@@Base+0x1320>
   18508:	bl	11400 <fprintf@plt>
   1850c:	b	183d4 <argp_parse@@Base+0x1164>
   18510:	ldr	r1, [r5, #28]
   18514:	ldm	r5, {r2, r3}
   18518:	ldr	r7, [r5, #24]
   1851c:	ldr	r6, [r5, #20]
   18520:	ldr	lr, [r5, #16]
   18524:	str	r1, [sp, #20]
   18528:	ldr	r1, [r5, #8]
   1852c:	ldr	ip, [r5, #12]
   18530:	mov	r0, r4
   18534:	str	r7, [sp, #16]
   18538:	stm	sp, {r1, ip, lr}
   1853c:	str	r6, [sp, #12]
   18540:	ldr	r1, [pc, #76]	; 18594 <argp_parse@@Base+0x1324>
   18544:	bl	11400 <fprintf@plt>
   18548:	b	183d4 <argp_parse@@Base+0x1164>
   1854c:	ldr	r1, [pc, #68]	; 18598 <argp_parse@@Base+0x1328>
   18550:	bl	11400 <fprintf@plt>
   18554:	b	18324 <argp_parse@@Base+0x10b4>
   18558:	andeq	fp, r1, r8, ror #5
   1855c:	andeq	r0, r0, r6, ror #15
   18560:	strdeq	fp, [r1], -ip
   18564:	strdeq	fp, [r1], -ip
   18568:	andeq	fp, r1, r4, lsr #6
   1856c:	andeq	fp, r1, r0, lsl #6
   18570:	andeq	fp, r1, r0, lsl r5
   18574:	ldrdeq	fp, [r1], -ip
   18578:	ldrdeq	fp, [r1], -r0
   1857c:	andeq	fp, r1, r0, ror #7
   18580:	strdeq	fp, [r1], -r8
   18584:	andeq	fp, r1, r4, lsl r4
   18588:	andeq	fp, r1, r4, lsr r4
   1858c:	andeq	fp, r1, r8, asr r4
   18590:	andeq	fp, r1, r0, lsl #9
   18594:	andeq	fp, r1, ip, lsr #9
   18598:	strdeq	fp, [r1], -r4
   1859c:	push	{r4, r5, lr}
   185a0:	sub	sp, sp, #12
   185a4:	ldr	r5, [sp, #24]
   185a8:	ldr	ip, [r5]
   185ac:	cmp	ip, #0
   185b0:	beq	185cc <argp_parse@@Base+0x135c>
   185b4:	mov	lr, r5
   185b8:	mov	ip, #0
   185bc:	ldr	r4, [lr, #4]!
   185c0:	add	ip, ip, #1
   185c4:	cmp	r4, #0
   185c8:	bne	185bc <argp_parse@@Base+0x134c>
   185cc:	stm	sp, {r5, ip}
   185d0:	bl	182f4 <argp_parse@@Base+0x1084>
   185d4:	add	sp, sp, #12
   185d8:	pop	{r4, r5, pc}
   185dc:	push	{r4, r5, lr}
   185e0:	sub	sp, sp, #52	; 0x34
   185e4:	add	r5, sp, #4
   185e8:	ldr	r4, [sp, #64]	; 0x40
   185ec:	mov	ip, #0
   185f0:	sub	r4, r4, #4
   185f4:	ldr	lr, [r4, #4]!
   185f8:	cmp	lr, #0
   185fc:	str	lr, [r5, #4]!
   18600:	beq	18610 <argp_parse@@Base+0x13a0>
   18604:	add	ip, ip, #1
   18608:	cmp	ip, #10
   1860c:	bne	185f4 <argp_parse@@Base+0x1384>
   18610:	add	lr, sp, #8
   18614:	str	ip, [sp, #4]
   18618:	str	lr, [sp]
   1861c:	bl	182f4 <argp_parse@@Base+0x1084>
   18620:	add	sp, sp, #52	; 0x34
   18624:	pop	{r4, r5, pc}
   18628:	push	{r3}		; (str r3, [sp, #-4]!)
   1862c:	push	{r4, lr}
   18630:	sub	sp, sp, #60	; 0x3c
   18634:	add	lr, sp, #56	; 0x38
   18638:	add	r3, sp, #72	; 0x48
   1863c:	str	r3, [lr, #-44]!	; 0xffffffd4
   18640:	add	r4, sp, #68	; 0x44
   18644:	mov	r3, #0
   18648:	ldr	ip, [r4, #4]!
   1864c:	cmp	ip, #0
   18650:	str	ip, [lr, #4]!
   18654:	beq	18664 <argp_parse@@Base+0x13f4>
   18658:	add	r3, r3, #1
   1865c:	cmp	r3, #10
   18660:	bne	18648 <argp_parse@@Base+0x13d8>
   18664:	add	ip, sp, #16
   18668:	str	r3, [sp, #4]
   1866c:	str	ip, [sp]
   18670:	ldr	r3, [sp, #68]	; 0x44
   18674:	bl	182f4 <argp_parse@@Base+0x1084>
   18678:	add	sp, sp, #60	; 0x3c
   1867c:	pop	{r4, lr}
   18680:	add	sp, sp, #4
   18684:	bx	lr
   18688:	ldr	r3, [pc, #56]	; 186c8 <argp_parse@@Base+0x1458>
   1868c:	push	{r4, lr}
   18690:	mov	r0, #10
   18694:	ldr	r1, [r3]
   18698:	bl	114cc <fputc@plt>
   1869c:	ldr	r1, [pc, #40]	; 186cc <argp_parse@@Base+0x145c>
   186a0:	ldr	r0, [pc, #40]	; 186d0 <argp_parse@@Base+0x1460>
   186a4:	bl	11220 <printf@plt>
   186a8:	ldr	r1, [pc, #36]	; 186d4 <argp_parse@@Base+0x1464>
   186ac:	ldr	r2, [pc, #36]	; 186d8 <argp_parse@@Base+0x1468>
   186b0:	ldr	r0, [pc, #36]	; 186dc <argp_parse@@Base+0x146c>
   186b4:	bl	11220 <printf@plt>
   186b8:	ldr	r1, [pc, #32]	; 186e0 <argp_parse@@Base+0x1470>
   186bc:	ldr	r0, [pc, #32]	; 186e4 <argp_parse@@Base+0x1474>
   186c0:	pop	{r4, lr}
   186c4:	b	11220 <printf@plt>
   186c8:	andeq	ip, r2, ip, asr r4
   186cc:	andeq	fp, r1, ip, asr #10
   186d0:	andeq	fp, r1, r4, ror #10
   186d4:	muleq	r1, r4, r2
   186d8:	andeq	fp, r1, r8, ror r5
   186dc:	andeq	fp, r1, r0, lsr #11
   186e0:			; <UNDEFINED> instruction: 0x0001b5b4
   186e4:	ldrdeq	fp, [r1], -r4
   186e8:	push	{r4, lr}
   186ec:	bl	18ca4 <argp_parse@@Base+0x1a34>
   186f0:	cmp	r0, #0
   186f4:	popne	{r4, pc}
   186f8:	bl	18c30 <argp_parse@@Base+0x19c0>
   186fc:	push	{r4, lr}
   18700:	bl	18ca4 <argp_parse@@Base+0x1a34>
   18704:	cmp	r0, #0
   18708:	popne	{r4, pc}
   1870c:	bl	18c30 <argp_parse@@Base+0x19c0>
   18710:	push	{r4, lr}
   18714:	bl	18ca4 <argp_parse@@Base+0x1a34>
   18718:	cmp	r0, #0
   1871c:	popne	{r4, pc}
   18720:	bl	18c30 <argp_parse@@Base+0x19c0>
   18724:	push	{r4, r5, r6, lr}
   18728:	mov	r5, r0
   1872c:	mov	r4, r1
   18730:	bl	18cd0 <argp_parse@@Base+0x1a60>
   18734:	cmp	r0, #0
   18738:	popne	{r4, r5, r6, pc}
   1873c:	adds	r4, r4, #0
   18740:	movne	r4, #1
   18744:	cmp	r5, #0
   18748:	orreq	r4, r4, #1
   1874c:	cmp	r4, #0
   18750:	popeq	{r4, r5, r6, pc}
   18754:	bl	18c30 <argp_parse@@Base+0x19c0>
   18758:	push	{r4, lr}
   1875c:	cmp	r1, #0
   18760:	orreq	r1, r1, #1
   18764:	bl	18cd0 <argp_parse@@Base+0x1a60>
   18768:	cmp	r0, #0
   1876c:	popne	{r4, pc}
   18770:	bl	18c30 <argp_parse@@Base+0x19c0>
   18774:	push	{r4, r5, r6, lr}
   18778:	mov	r6, r0
   1877c:	mov	r5, r1
   18780:	mov	r4, r2
   18784:	bl	1a0e8 <argp_parse@@Base+0x2e78>
   18788:	cmp	r0, #0
   1878c:	popne	{r4, r5, r6, pc}
   18790:	cmp	r6, #0
   18794:	beq	187a4 <argp_parse@@Base+0x1534>
   18798:	cmp	r5, #0
   1879c:	cmpne	r4, #0
   187a0:	popeq	{r4, r5, r6, pc}
   187a4:	bl	18c30 <argp_parse@@Base+0x19c0>
   187a8:	b	18774 <argp_parse@@Base+0x1504>
   187ac:	cmp	r2, #0
   187b0:	cmpne	r1, #0
   187b4:	moveq	r2, #1
   187b8:	moveq	r1, r2
   187bc:	push	{r4, lr}
   187c0:	bl	1a0e8 <argp_parse@@Base+0x2e78>
   187c4:	cmp	r0, #0
   187c8:	popne	{r4, pc}
   187cc:	bl	18c30 <argp_parse@@Base+0x19c0>
   187d0:	mov	r2, r1
   187d4:	mov	r1, r0
   187d8:	mov	r0, #0
   187dc:	b	18774 <argp_parse@@Base+0x1504>
   187e0:	mov	r2, r1
   187e4:	mov	r1, r0
   187e8:	mov	r0, #0
   187ec:	b	187ac <argp_parse@@Base+0x153c>
   187f0:	push	{r4, r5, r6, lr}
   187f4:	subs	r6, r0, #0
   187f8:	sub	sp, sp, #8
   187fc:	mov	r5, r1
   18800:	ldr	r4, [r1]
   18804:	beq	18840 <argp_parse@@Base+0x15d0>
   18808:	lsr	r1, r4, #1
   1880c:	add	r3, r1, #1
   18810:	mvn	r3, r3
   18814:	cmp	r4, r3
   18818:	bhi	1883c <argp_parse@@Base+0x15cc>
   1881c:	add	r4, r4, #1
   18820:	add	r4, r4, r1
   18824:	mov	r0, r6
   18828:	mov	r1, r4
   1882c:	bl	18774 <argp_parse@@Base+0x1504>
   18830:	str	r4, [r5]
   18834:	add	sp, sp, #8
   18838:	pop	{r4, r5, r6, pc}
   1883c:	bl	18c30 <argp_parse@@Base+0x19c0>
   18840:	cmp	r4, #0
   18844:	bne	18824 <argp_parse@@Base+0x15b4>
   18848:	mov	r1, r2
   1884c:	mov	r0, #64	; 0x40
   18850:	str	r2, [sp, #4]
   18854:	bl	1a134 <argp_parse@@Base+0x2ec4>
   18858:	ldr	r2, [sp, #4]
   1885c:	cmp	r0, #0
   18860:	movne	r4, r0
   18864:	addeq	r4, r0, #1
   18868:	b	18824 <argp_parse@@Base+0x15b4>
   1886c:	mov	r2, #1
   18870:	b	187f0 <argp_parse@@Base+0x1580>
   18874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18878:	sub	sp, sp, #12
   1887c:	ldr	r6, [r1]
   18880:	mov	sl, r1
   18884:	mov	r9, r0
   18888:	asrs	r4, r6, #1
   1888c:	mov	r5, r2
   18890:	mov	fp, r3
   18894:	ldr	r7, [sp, #48]	; 0x30
   18898:	bmi	18a04 <argp_parse@@Base+0x1794>
   1889c:	mvn	r3, #-2147483648	; 0x80000000
   188a0:	sub	r3, r3, r4
   188a4:	cmp	r6, r3
   188a8:	movle	r3, #0
   188ac:	movgt	r3, #1
   188b0:	mvn	r8, fp
   188b4:	cmp	r3, #0
   188b8:	addeq	r4, r4, r6
   188bc:	mvnne	r4, #-2147483648	; 0x80000000
   188c0:	lsr	r8, r8, #31
   188c4:	cmp	fp, r4
   188c8:	movge	r3, #0
   188cc:	andlt	r3, r8, #1
   188d0:	cmp	r3, #0
   188d4:	beq	189bc <argp_parse@@Base+0x174c>
   188d8:	cmp	r7, #0
   188dc:	blt	18a8c <argp_parse@@Base+0x181c>
   188e0:	bne	18a84 <argp_parse@@Base+0x1814>
   188e4:	mov	r2, #64	; 0x40
   188e8:	mov	r1, r7
   188ec:	mov	r0, r2
   188f0:	str	r2, [sp, #4]
   188f4:	bl	1a340 <argp_parse@@Base+0x30d0>
   188f8:	ldr	r2, [sp, #4]
   188fc:	mov	r1, r7
   18900:	mov	r4, r0
   18904:	mov	r0, r2
   18908:	bl	1a560 <argp_parse@@Base+0x32f0>
   1890c:	ldr	r2, [sp, #4]
   18910:	sub	r1, r2, r1
   18914:	cmp	r9, #0
   18918:	sub	r3, r4, r6
   1891c:	streq	r9, [sl]
   18920:	cmp	r3, r5
   18924:	bge	189a8 <argp_parse@@Base+0x1738>
   18928:	cmp	r5, #0
   1892c:	blt	18a18 <argp_parse@@Base+0x17a8>
   18930:	cmp	r6, #0
   18934:	blt	18954 <argp_parse@@Base+0x16e4>
   18938:	mvn	r3, #-2147483648	; 0x80000000
   1893c:	sub	r3, r3, r5
   18940:	cmp	r6, r3
   18944:	movle	r3, #0
   18948:	movgt	r3, #1
   1894c:	cmp	r3, #0
   18950:	bne	18b14 <argp_parse@@Base+0x18a4>
   18954:	add	r5, r6, r5
   18958:	cmp	fp, r5
   1895c:	movge	r8, #0
   18960:	andlt	r8, r8, #1
   18964:	cmp	r8, #0
   18968:	mov	r4, r5
   1896c:	bne	18b14 <argp_parse@@Base+0x18a4>
   18970:	cmp	r7, #0
   18974:	blt	18a2c <argp_parse@@Base+0x17bc>
   18978:	beq	189a4 <argp_parse@@Base+0x1734>
   1897c:	cmp	r5, #0
   18980:	blt	18ad4 <argp_parse@@Base+0x1864>
   18984:	mov	r1, r7
   18988:	mvn	r0, #-2147483648	; 0x80000000
   1898c:	bl	1a340 <argp_parse@@Base+0x30d0>
   18990:	cmp	r5, r0
   18994:	movle	r0, #0
   18998:	movgt	r0, #1
   1899c:	cmp	r0, #0
   189a0:	bne	18b14 <argp_parse@@Base+0x18a4>
   189a4:	mul	r1, r5, r7
   189a8:	mov	r0, r9
   189ac:	bl	18724 <argp_parse@@Base+0x14b4>
   189b0:	str	r4, [sl]
   189b4:	add	sp, sp, #12
   189b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189bc:	cmp	r7, #0
   189c0:	blt	18a58 <argp_parse@@Base+0x17e8>
   189c4:	beq	188e4 <argp_parse@@Base+0x1674>
   189c8:	cmp	r4, #0
   189cc:	blt	18a94 <argp_parse@@Base+0x1824>
   189d0:	mov	r1, r7
   189d4:	mvn	r0, #-2147483648	; 0x80000000
   189d8:	bl	1a340 <argp_parse@@Base+0x30d0>
   189dc:	cmp	r0, r4
   189e0:	movge	r0, #0
   189e4:	movlt	r0, #1
   189e8:	cmp	r0, #0
   189ec:	mvnne	r2, #-2147483648	; 0x80000000
   189f0:	bne	188e8 <argp_parse@@Base+0x1678>
   189f4:	mul	r1, r7, r4
   189f8:	cmp	r1, #63	; 0x3f
   189fc:	bgt	18914 <argp_parse@@Base+0x16a4>
   18a00:	b	188e4 <argp_parse@@Base+0x1674>
   18a04:	rsb	r3, r4, #-2147483648	; 0x80000000
   18a08:	cmp	r6, r3
   18a0c:	movge	r3, #0
   18a10:	movlt	r3, #1
   18a14:	b	188b0 <argp_parse@@Base+0x1640>
   18a18:	rsb	r3, r5, #-2147483648	; 0x80000000
   18a1c:	cmp	r6, r3
   18a20:	movge	r3, #0
   18a24:	movlt	r3, #1
   18a28:	b	1894c <argp_parse@@Base+0x16dc>
   18a2c:	cmp	r5, #0
   18a30:	blt	18ab8 <argp_parse@@Base+0x1848>
   18a34:	cmn	r7, #1
   18a38:	beq	189a4 <argp_parse@@Base+0x1734>
   18a3c:	mov	r1, r7
   18a40:	mov	r0, #-2147483648	; 0x80000000
   18a44:	bl	1a340 <argp_parse@@Base+0x30d0>
   18a48:	cmp	r5, r0
   18a4c:	movle	r0, #0
   18a50:	movgt	r0, #1
   18a54:	b	1899c <argp_parse@@Base+0x172c>
   18a58:	cmp	r4, #0
   18a5c:	blt	18af8 <argp_parse@@Base+0x1888>
   18a60:	cmn	r7, #1
   18a64:	beq	189f4 <argp_parse@@Base+0x1784>
   18a68:	mov	r1, r7
   18a6c:	mov	r0, #-2147483648	; 0x80000000
   18a70:	bl	1a340 <argp_parse@@Base+0x30d0>
   18a74:	cmp	r0, r4
   18a78:	movge	r0, #0
   18a7c:	movlt	r0, #1
   18a80:	b	189e8 <argp_parse@@Base+0x1778>
   18a84:	mov	r4, fp
   18a88:	b	189d0 <argp_parse@@Base+0x1760>
   18a8c:	mov	r4, fp
   18a90:	b	18a60 <argp_parse@@Base+0x17f0>
   18a94:	cmn	r4, #1
   18a98:	beq	189f4 <argp_parse@@Base+0x1784>
   18a9c:	mov	r1, r4
   18aa0:	mov	r0, #-2147483648	; 0x80000000
   18aa4:	bl	1a340 <argp_parse@@Base+0x30d0>
   18aa8:	cmp	r7, r0
   18aac:	movle	r0, #0
   18ab0:	movgt	r0, #1
   18ab4:	b	189e8 <argp_parse@@Base+0x1778>
   18ab8:	mov	r1, r7
   18abc:	mvn	r0, #-2147483648	; 0x80000000
   18ac0:	bl	1a340 <argp_parse@@Base+0x30d0>
   18ac4:	cmp	r5, r0
   18ac8:	movge	r0, #0
   18acc:	movlt	r0, #1
   18ad0:	b	1899c <argp_parse@@Base+0x172c>
   18ad4:	cmn	r5, #1
   18ad8:	beq	189a4 <argp_parse@@Base+0x1734>
   18adc:	mov	r1, r5
   18ae0:	mov	r0, #-2147483648	; 0x80000000
   18ae4:	bl	1a340 <argp_parse@@Base+0x30d0>
   18ae8:	cmp	r7, r0
   18aec:	movle	r0, #0
   18af0:	movgt	r0, #1
   18af4:	b	1899c <argp_parse@@Base+0x172c>
   18af8:	mov	r1, r7
   18afc:	mvn	r0, #-2147483648	; 0x80000000
   18b00:	bl	1a340 <argp_parse@@Base+0x30d0>
   18b04:	cmp	r0, r4
   18b08:	movle	r0, #0
   18b0c:	movgt	r0, #1
   18b10:	b	189e8 <argp_parse@@Base+0x1778>
   18b14:	bl	18c30 <argp_parse@@Base+0x19c0>
   18b18:	push	{r4, lr}
   18b1c:	mov	r1, #1
   18b20:	bl	18c5c <argp_parse@@Base+0x19ec>
   18b24:	cmp	r0, #0
   18b28:	popne	{r4, pc}
   18b2c:	bl	18c30 <argp_parse@@Base+0x19c0>
   18b30:	push	{r4, lr}
   18b34:	mov	r1, #1
   18b38:	bl	18c5c <argp_parse@@Base+0x19ec>
   18b3c:	cmp	r0, #0
   18b40:	popne	{r4, pc}
   18b44:	bl	18c30 <argp_parse@@Base+0x19c0>
   18b48:	push	{r4, lr}
   18b4c:	bl	18c5c <argp_parse@@Base+0x19ec>
   18b50:	cmp	r0, #0
   18b54:	popne	{r4, pc}
   18b58:	bl	18c30 <argp_parse@@Base+0x19c0>
   18b5c:	push	{r4, lr}
   18b60:	bl	18c5c <argp_parse@@Base+0x19ec>
   18b64:	cmp	r0, #0
   18b68:	popne	{r4, pc}
   18b6c:	bl	18c30 <argp_parse@@Base+0x19c0>
   18b70:	push	{r4, r5, r6, lr}
   18b74:	mov	r6, r0
   18b78:	mov	r0, r1
   18b7c:	mov	r4, r1
   18b80:	bl	18ca4 <argp_parse@@Base+0x1a34>
   18b84:	subs	r5, r0, #0
   18b88:	beq	18ba0 <argp_parse@@Base+0x1930>
   18b8c:	mov	r2, r4
   18b90:	mov	r1, r6
   18b94:	bl	11298 <memcpy@plt>
   18b98:	mov	r0, r5
   18b9c:	pop	{r4, r5, r6, pc}
   18ba0:	bl	18c30 <argp_parse@@Base+0x19c0>
   18ba4:	push	{r4, r5, r6, lr}
   18ba8:	mov	r6, r0
   18bac:	mov	r0, r1
   18bb0:	mov	r4, r1
   18bb4:	bl	18ca4 <argp_parse@@Base+0x1a34>
   18bb8:	subs	r5, r0, #0
   18bbc:	beq	18bd4 <argp_parse@@Base+0x1964>
   18bc0:	mov	r2, r4
   18bc4:	mov	r1, r6
   18bc8:	bl	11298 <memcpy@plt>
   18bcc:	mov	r0, r5
   18bd0:	pop	{r4, r5, r6, pc}
   18bd4:	bl	18c30 <argp_parse@@Base+0x19c0>
   18bd8:	push	{r4, r5, r6, lr}
   18bdc:	mov	r6, r0
   18be0:	add	r0, r1, #1
   18be4:	mov	r4, r1
   18be8:	bl	18ca4 <argp_parse@@Base+0x1a34>
   18bec:	subs	r5, r0, #0
   18bf0:	beq	18c10 <argp_parse@@Base+0x19a0>
   18bf4:	mov	r3, #0
   18bf8:	mov	r1, r6
   18bfc:	strb	r3, [r5, r4]
   18c00:	mov	r2, r4
   18c04:	bl	11298 <memcpy@plt>
   18c08:	mov	r0, r5
   18c0c:	pop	{r4, r5, r6, pc}
   18c10:	bl	18c30 <argp_parse@@Base+0x19c0>
   18c14:	push	{r4, lr}
   18c18:	mov	r4, r0
   18c1c:	bl	113e8 <strlen@plt>
   18c20:	add	r1, r0, #1
   18c24:	mov	r0, r4
   18c28:	pop	{r4, lr}
   18c2c:	b	18b70 <argp_parse@@Base+0x1900>
   18c30:	ldr	r1, [pc, #24]	; 18c50 <argp_parse@@Base+0x19e0>
   18c34:	push	{r4, lr}
   18c38:	ldr	r0, [r1]
   18c3c:	ldr	r3, [pc, #16]	; 18c54 <argp_parse@@Base+0x19e4>
   18c40:	ldr	r2, [pc, #16]	; 18c58 <argp_parse@@Base+0x19e8>
   18c44:	mov	r1, #0
   18c48:	bl	1134c <error@plt>
   18c4c:	bl	11544 <abort@plt>
   18c50:	andeq	ip, r2, r8, lsr r4
   18c54:	andeq	fp, r1, ip, lsr #12
   18c58:	andeq	sl, r1, ip, lsr #14
   18c5c:	cmp	r1, #0
   18c60:	cmpne	r0, #0
   18c64:	moveq	r1, #1
   18c68:	moveq	r0, r1
   18c6c:	umull	r2, r3, r0, r1
   18c70:	adds	r3, r3, #0
   18c74:	movne	r3, #1
   18c78:	cmp	r2, #0
   18c7c:	blt	18c8c <argp_parse@@Base+0x1a1c>
   18c80:	cmp	r3, #0
   18c84:	bne	18c8c <argp_parse@@Base+0x1a1c>
   18c88:	b	111e4 <calloc@plt>
   18c8c:	push	{r4, lr}
   18c90:	bl	1140c <__errno_location@plt>
   18c94:	mov	r3, #12
   18c98:	str	r3, [r0]
   18c9c:	mov	r0, #0
   18ca0:	pop	{r4, pc}
   18ca4:	cmp	r0, #0
   18ca8:	moveq	r0, #1
   18cac:	cmp	r0, #0
   18cb0:	blt	18cb8 <argp_parse@@Base+0x1a48>
   18cb4:	b	1137c <malloc@plt>
   18cb8:	push	{r4, lr}
   18cbc:	bl	1140c <__errno_location@plt>
   18cc0:	mov	r3, #12
   18cc4:	str	r3, [r0]
   18cc8:	mov	r0, #0
   18ccc:	pop	{r4, pc}
   18cd0:	cmp	r0, #0
   18cd4:	beq	18cf8 <argp_parse@@Base+0x1a88>
   18cd8:	cmp	r1, #0
   18cdc:	push	{lr}		; (str lr, [sp, #-4]!)
   18ce0:	sub	sp, sp, #12
   18ce4:	beq	18d00 <argp_parse@@Base+0x1a90>
   18ce8:	blt	18d18 <argp_parse@@Base+0x1aa8>
   18cec:	add	sp, sp, #12
   18cf0:	pop	{lr}		; (ldr lr, [sp], #4)
   18cf4:	b	112e0 <realloc@plt>
   18cf8:	mov	r0, r1
   18cfc:	b	18ca4 <argp_parse@@Base+0x1a34>
   18d00:	str	r1, [sp, #4]
   18d04:	bl	18108 <argp_parse@@Base+0xe98>
   18d08:	ldr	r3, [sp, #4]
   18d0c:	mov	r0, r3
   18d10:	add	sp, sp, #12
   18d14:	pop	{pc}		; (ldr pc, [sp], #4)
   18d18:	bl	1140c <__errno_location@plt>
   18d1c:	mov	r2, #12
   18d20:	mov	r3, #0
   18d24:	str	r2, [r0]
   18d28:	b	18d0c <argp_parse@@Base+0x1a9c>
   18d2c:	push	{r4, r5, r6, r7, r8, lr}
   18d30:	mov	r8, r0
   18d34:	mov	r0, #36	; 0x24
   18d38:	mov	r7, r1
   18d3c:	mov	r6, r2
   18d40:	mov	r5, r3
   18d44:	bl	18ca4 <argp_parse@@Base+0x1a34>
   18d48:	subs	r4, r0, #0
   18d4c:	beq	18d90 <argp_parse@@Base+0x1b20>
   18d50:	mov	r0, #0
   18d54:	str	r5, [r4, #12]
   18d58:	str	r0, [r4, #20]
   18d5c:	str	r0, [r4, #16]
   18d60:	str	r8, [r4]
   18d64:	str	r7, [r4, #4]
   18d68:	str	r6, [r4, #8]
   18d6c:	mov	r0, #200	; 0xc8
   18d70:	bl	18ca4 <argp_parse@@Base+0x1a34>
   18d74:	cmp	r0, #0
   18d78:	addne	r3, r0, #200	; 0xc8
   18d7c:	mov	r5, r0
   18d80:	str	r0, [r4, #24]
   18d84:	strne	r0, [r4, #28]
   18d88:	strne	r3, [r4, #32]
   18d8c:	beq	18d98 <argp_parse@@Base+0x1b28>
   18d90:	mov	r0, r4
   18d94:	pop	{r4, r5, r6, r7, r8, pc}
   18d98:	mov	r0, r4
   18d9c:	bl	18108 <argp_parse@@Base+0xe98>
   18da0:	mov	r4, r5
   18da4:	b	18d90 <argp_parse@@Base+0x1b20>
   18da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dac:	mov	r7, r0
   18db0:	ldr	r6, [r0, #24]
   18db4:	ldr	r3, [r0, #16]
   18db8:	ldr	fp, [r0, #28]
   18dbc:	sub	sp, sp, #12
   18dc0:	add	r6, r6, r3
   18dc4:	mov	r9, #32
   18dc8:	cmp	r6, fp
   18dcc:	bcs	18ea8 <argp_parse@@Base+0x1c38>
   18dd0:	ldr	r8, [r7, #20]
   18dd4:	cmp	r8, #0
   18dd8:	bne	18e48 <argp_parse@@Base+0x1bd8>
   18ddc:	ldr	r4, [r7, #4]
   18de0:	cmp	r4, #0
   18de4:	beq	190ec <argp_parse@@Base+0x1e7c>
   18de8:	ldr	r2, [r7, #32]
   18dec:	add	r3, fp, r4
   18df0:	cmp	r2, r3
   18df4:	bls	18e08 <argp_parse@@Base+0x1b98>
   18df8:	b	19234 <argp_parse@@Base+0x1fc4>
   18dfc:	add	r8, r8, #1
   18e00:	cmp	r4, r8
   18e04:	beq	18e3c <argp_parse@@Base+0x1bcc>
   18e08:	ldr	r0, [r7]
   18e0c:	ldr	r3, [r0, #20]
   18e10:	ldr	r2, [r0, #24]
   18e14:	add	r1, r3, #1
   18e18:	cmp	r3, r2
   18e1c:	strcc	r1, [r0, #20]
   18e20:	strbcc	r9, [r3]
   18e24:	bcc	18dfc <argp_parse@@Base+0x1b8c>
   18e28:	mov	r1, r9
   18e2c:	add	r8, r8, #1
   18e30:	bl	1149c <__overflow@plt>
   18e34:	cmp	r4, r8
   18e38:	bne	18e08 <argp_parse@@Base+0x1b98>
   18e3c:	ldr	fp, [r7, #28]
   18e40:	mov	r8, r4
   18e44:	str	r4, [r7, #20]
   18e48:	sub	sl, fp, r6
   18e4c:	mov	r2, sl
   18e50:	mov	r1, #10
   18e54:	mov	r0, r6
   18e58:	bl	1146c <memchr@plt>
   18e5c:	cmp	r8, #0
   18e60:	movlt	r8, #0
   18e64:	movlt	r3, r8
   18e68:	str	r6, [sp]
   18e6c:	mov	r4, r0
   18e70:	strlt	r3, [r7, #20]
   18e74:	cmp	r4, #0
   18e78:	beq	19110 <argp_parse@@Base+0x1ea0>
   18e7c:	sub	r2, r4, r6
   18e80:	ldr	r3, [r7, #8]
   18e84:	add	r2, r2, r8
   18e88:	cmp	r2, r3
   18e8c:	bge	18ebc <argp_parse@@Base+0x1c4c>
   18e90:	ldr	fp, [r7, #28]
   18e94:	add	r6, r4, #1
   18e98:	mov	r3, #0
   18e9c:	cmp	r6, fp
   18ea0:	str	r3, [r7, #20]
   18ea4:	bcc	18dd0 <argp_parse@@Base+0x1b60>
   18ea8:	ldr	r3, [r7, #24]
   18eac:	sub	r3, fp, r3
   18eb0:	str	r3, [r7, #16]
   18eb4:	add	sp, sp, #12
   18eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ebc:	ldr	r2, [r7, #12]
   18ec0:	sub	r5, r3, #1
   18ec4:	cmp	r2, #0
   18ec8:	str	r2, [sp, #4]
   18ecc:	blt	191c8 <argp_parse@@Base+0x1f58>
   18ed0:	add	r5, r5, #1
   18ed4:	sub	r8, r5, r8
   18ed8:	adds	r8, r6, r8
   18edc:	bcs	19148 <argp_parse@@Base+0x1ed8>
   18ee0:	bl	113c4 <__ctype_b_loc@plt>
   18ee4:	mov	r3, r8
   18ee8:	ldr	r0, [r0]
   18eec:	b	18ef8 <argp_parse@@Base+0x1c88>
   18ef0:	cmp	r3, r6
   18ef4:	bcc	1914c <argp_parse@@Base+0x1edc>
   18ef8:	mov	r1, r3
   18efc:	sub	r3, r3, #1
   18f00:	ldrb	r2, [r1]
   18f04:	mov	r5, r3
   18f08:	lsl	r2, r2, #1
   18f0c:	ldrh	r2, [r0, r2]
   18f10:	tst	r2, #1
   18f14:	beq	18ef0 <argp_parse@@Base+0x1c80>
   18f18:	add	r5, r1, #1
   18f1c:	cmp	r5, r6
   18f20:	bls	19160 <argp_parse@@Base+0x1ef0>
   18f24:	cmp	r1, r6
   18f28:	bcc	19158 <argp_parse@@Base+0x1ee8>
   18f2c:	mov	r1, r3
   18f30:	sub	r8, r6, #1
   18f34:	b	18f50 <argp_parse@@Base+0x1ce0>
   18f38:	ldrb	r3, [r1]
   18f3c:	sub	r1, r1, #1
   18f40:	lsl	r3, r3, #1
   18f44:	ldrh	r3, [r0, r3]
   18f48:	tst	r3, #1
   18f4c:	beq	19278 <argp_parse@@Base+0x2008>
   18f50:	cmp	r8, r1
   18f54:	mov	r2, r1
   18f58:	bne	18f38 <argp_parse@@Base+0x1cc8>
   18f5c:	add	r8, r8, #1
   18f60:	add	r3, sl, #1
   18f64:	add	r3, r6, r3
   18f68:	cmp	r5, r3
   18f6c:	beq	19054 <argp_parse@@Base+0x1de4>
   18f70:	add	r3, r8, #1
   18f74:	ldr	r1, [sp, #4]
   18f78:	sub	r2, r5, r3
   18f7c:	cmp	r2, r1
   18f80:	bge	19070 <argp_parse@@Base+0x1e00>
   18f84:	cmp	r5, fp
   18f88:	bcs	19068 <argp_parse@@Base+0x1df8>
   18f8c:	ldr	r3, [r7, #32]
   18f90:	ldr	r2, [sp, #4]
   18f94:	sub	r3, r3, fp
   18f98:	add	r0, r2, #1
   18f9c:	cmp	r3, r0
   18fa0:	bgt	192a8 <argp_parse@@Base+0x2038>
   18fa4:	ldr	r0, [r7, #24]
   18fa8:	cmp	r8, r0
   18fac:	bls	18fc0 <argp_parse@@Base+0x1d50>
   18fb0:	sub	r2, r8, r0
   18fb4:	ldr	r3, [r7]
   18fb8:	mov	r1, #1
   18fbc:	bl	112b0 <fwrite_unlocked@plt>
   18fc0:	ldr	r0, [r7]
   18fc4:	ldr	r2, [r0, #24]
   18fc8:	ldr	r3, [r0, #20]
   18fcc:	cmp	r3, r2
   18fd0:	addcc	r2, r3, #1
   18fd4:	strcc	r2, [r0, #20]
   18fd8:	movcc	r2, #10
   18fdc:	strbcc	r2, [r3]
   18fe0:	bcs	192e8 <argp_parse@@Base+0x2078>
   18fe4:	ldr	r6, [r7, #24]
   18fe8:	ldr	r3, [sp]
   18fec:	sub	r2, r5, r6
   18ff0:	sub	r3, r3, r6
   18ff4:	add	sl, sl, r3
   18ff8:	mov	fp, r2
   18ffc:	mov	r4, r6
   19000:	ldr	r3, [r7, #12]
   19004:	cmp	r3, r2
   19008:	bgt	19090 <argp_parse@@Base+0x1e20>
   1900c:	cmp	r3, #0
   19010:	movgt	r2, r6
   19014:	ble	19030 <argp_parse@@Base+0x1dc0>
   19018:	strb	r9, [r2], #1
   1901c:	ldr	r3, [r7, #12]
   19020:	sub	r1, r2, r6
   19024:	cmp	r3, r1
   19028:	bgt	19018 <argp_parse@@Base+0x1da8>
   1902c:	mov	r6, r2
   19030:	cmp	r6, r5
   19034:	bcc	19218 <argp_parse@@Base+0x1fa8>
   19038:	sub	fp, sl, fp
   1903c:	cmp	r3, #0
   19040:	add	fp, r6, fp
   19044:	mvneq	r3, #0
   19048:	str	fp, [r7, #28]
   1904c:	str	r3, [r7, #20]
   19050:	b	18dc8 <argp_parse@@Base+0x1b58>
   19054:	ldr	r3, [r7, #32]
   19058:	ldr	r2, [sp, #4]
   1905c:	sub	r3, r3, r8
   19060:	cmp	r3, r2
   19064:	ble	18f84 <argp_parse@@Base+0x1d14>
   19068:	add	r3, r8, #1
   1906c:	sub	r2, r5, r3
   19070:	sub	fp, r5, r6
   19074:	mov	r4, r6
   19078:	mov	r6, r3
   1907c:	mov	r3, #10
   19080:	strb	r3, [r8]
   19084:	ldr	r3, [r7, #12]
   19088:	cmp	r3, r2
   1908c:	ble	1900c <argp_parse@@Base+0x1d9c>
   19090:	add	r2, sl, #1
   19094:	add	r2, r4, r2
   19098:	cmp	r5, r2
   1909c:	beq	19294 <argp_parse@@Base+0x2024>
   190a0:	cmp	r3, #0
   190a4:	movgt	r8, #0
   190a8:	bgt	190c0 <argp_parse@@Base+0x1e50>
   190ac:	b	19030 <argp_parse@@Base+0x1dc0>
   190b0:	ldr	r3, [r7, #12]
   190b4:	add	r8, r8, #1
   190b8:	cmp	r3, r8
   190bc:	ble	19030 <argp_parse@@Base+0x1dc0>
   190c0:	ldr	r0, [r7]
   190c4:	ldr	r3, [r0, #20]
   190c8:	ldr	r2, [r0, #24]
   190cc:	add	r1, r3, #1
   190d0:	cmp	r3, r2
   190d4:	strcc	r1, [r0, #20]
   190d8:	strbcc	r9, [r3]
   190dc:	bcc	190b0 <argp_parse@@Base+0x1e40>
   190e0:	mov	r1, r9
   190e4:	bl	1149c <__overflow@plt>
   190e8:	b	190b0 <argp_parse@@Base+0x1e40>
   190ec:	sub	sl, fp, r6
   190f0:	mov	r2, sl
   190f4:	mov	r1, #10
   190f8:	mov	r0, r6
   190fc:	bl	1146c <memchr@plt>
   19100:	str	r6, [sp]
   19104:	mov	r4, r0
   19108:	cmp	r4, #0
   1910c:	bne	18e7c <argp_parse@@Base+0x1c0c>
   19110:	ldr	r5, [r7, #8]
   19114:	add	r3, r8, sl
   19118:	cmp	r3, r5
   1911c:	bcc	1930c <argp_parse@@Base+0x209c>
   19120:	ldr	r2, [r7, #12]
   19124:	sub	r5, r5, #1
   19128:	cmp	r2, #0
   1912c:	str	r2, [sp, #4]
   19130:	blt	192f8 <argp_parse@@Base+0x2088>
   19134:	add	r5, r5, #1
   19138:	sub	r8, r5, r8
   1913c:	adds	r8, r6, r8
   19140:	mov	r4, fp
   19144:	bcc	18ee0 <argp_parse@@Base+0x1c70>
   19148:	mov	r5, r8
   1914c:	add	r5, r5, #1
   19150:	cmp	r5, r6
   19154:	bls	19160 <argp_parse@@Base+0x1ef0>
   19158:	mov	r8, r5
   1915c:	b	18f60 <argp_parse@@Base+0x1cf0>
   19160:	cmp	r8, r4
   19164:	bcs	1919c <argp_parse@@Base+0x1f2c>
   19168:	add	r5, r8, #1
   1916c:	b	19190 <argp_parse@@Base+0x1f20>
   19170:	bl	113c4 <__ctype_b_loc@plt>
   19174:	ldrb	r3, [r5]
   19178:	add	r5, r5, #1
   1917c:	lsl	r3, r3, #1
   19180:	ldr	r2, [r0]
   19184:	ldrh	r3, [r2, r3]
   19188:	tst	r3, #1
   1918c:	bne	191ac <argp_parse@@Base+0x1f3c>
   19190:	cmp	r5, r4
   19194:	mov	r8, r5
   19198:	bne	19170 <argp_parse@@Base+0x1f00>
   1919c:	cmp	r8, r4
   191a0:	beq	19280 <argp_parse@@Base+0x2010>
   191a4:	bl	113c4 <__ctype_b_loc@plt>
   191a8:	ldr	r2, [r0]
   191ac:	mov	r5, r8
   191b0:	ldrb	r3, [r5, #1]!
   191b4:	lsl	r3, r3, #1
   191b8:	ldrh	r3, [r2, r3]
   191bc:	tst	r3, #1
   191c0:	bne	191b0 <argp_parse@@Base+0x1f40>
   191c4:	b	18f60 <argp_parse@@Base+0x1cf0>
   191c8:	cmp	r4, fp
   191cc:	str	r3, [sp]
   191d0:	bcs	192f4 <argp_parse@@Base+0x2084>
   191d4:	sub	r0, r5, r8
   191d8:	sub	r2, fp, r4
   191dc:	add	r0, r6, r0
   191e0:	mov	r1, r4
   191e4:	bl	11250 <memmove@plt>
   191e8:	ldr	r2, [r7, #20]
   191ec:	ldr	fp, [r7, #28]
   191f0:	sub	r5, r5, r2
   191f4:	add	r5, r6, r5
   191f8:	mov	r3, #0
   191fc:	sub	r4, r5, r4
   19200:	str	r3, [r7, #20]
   19204:	ldr	r3, [sp]
   19208:	sub	fp, fp, r4
   1920c:	add	r6, r6, r3
   19210:	str	fp, [r7, #28]
   19214:	b	18dc8 <argp_parse@@Base+0x1b58>
   19218:	add	r2, r4, sl
   1921c:	sub	r2, r2, r5
   19220:	mov	r1, r5
   19224:	mov	r0, r6
   19228:	bl	11250 <memmove@plt>
   1922c:	ldr	r3, [r7, #12]
   19230:	b	19038 <argp_parse@@Base+0x1dc8>
   19234:	add	r5, r6, r4
   19238:	sub	r2, fp, r6
   1923c:	mov	r1, r6
   19240:	mov	r0, r5
   19244:	bl	11250 <memmove@plt>
   19248:	ldr	r3, [r7, #28]
   1924c:	mov	r0, r6
   19250:	add	r3, r3, r4
   19254:	str	r3, [r7, #28]
   19258:	mov	r2, r4
   1925c:	mov	r1, r9
   19260:	bl	1143c <memset@plt>
   19264:	mov	r6, r5
   19268:	ldr	fp, [r7, #28]
   1926c:	mov	r8, r4
   19270:	str	r4, [r7, #20]
   19274:	b	18e48 <argp_parse@@Base+0x1bd8>
   19278:	add	r8, r2, #1
   1927c:	b	18f60 <argp_parse@@Base+0x1cf0>
   19280:	mov	r3, #0
   19284:	str	r3, [r7, #20]
   19288:	add	r6, r8, #1
   1928c:	ldr	fp, [r7, #28]
   19290:	b	18dc8 <argp_parse@@Base+0x1b58>
   19294:	ldr	r2, [r7, #32]
   19298:	sub	r2, r2, r5
   1929c:	cmp	r3, r2
   192a0:	ble	1900c <argp_parse@@Base+0x1d9c>
   192a4:	b	190a0 <argp_parse@@Base+0x1e30>
   192a8:	sub	fp, fp, r5
   192ac:	mov	r2, fp
   192b0:	mov	r1, r5
   192b4:	add	r0, r8, r0
   192b8:	bl	11250 <memmove@plt>
   192bc:	ldr	r2, [r7, #12]
   192c0:	mov	r3, #10
   192c4:	add	r5, r2, #1
   192c8:	add	r5, r8, r5
   192cc:	add	fp, r5, fp
   192d0:	sub	sl, fp, r6
   192d4:	mov	r4, r6
   192d8:	sub	fp, r5, r6
   192dc:	strb	r3, [r8]
   192e0:	add	r6, r8, #1
   192e4:	b	19000 <argp_parse@@Base+0x1d90>
   192e8:	mov	r1, #10
   192ec:	bl	1149c <__overflow@plt>
   192f0:	b	18fe4 <argp_parse@@Base+0x1d74>
   192f4:	add	r3, r8, sl
   192f8:	sub	r5, r5, r3
   192fc:	add	fp, fp, r5
   19300:	str	fp, [r7, #28]
   19304:	str	r3, [r7, #20]
   19308:	b	18ea8 <argp_parse@@Base+0x1c38>
   1930c:	str	r3, [r7, #20]
   19310:	ldr	fp, [r7, #28]
   19314:	b	18ea8 <argp_parse@@Base+0x1c38>
   19318:	push	{r4, lr}
   1931c:	mov	r4, r0
   19320:	bl	18da8 <argp_parse@@Base+0x1b38>
   19324:	ldr	r2, [r4, #28]
   19328:	ldr	r0, [r4, #24]
   1932c:	cmp	r2, r0
   19330:	bls	19348 <argp_parse@@Base+0x20d8>
   19334:	sub	r2, r2, r0
   19338:	ldr	r3, [r4]
   1933c:	mov	r1, #1
   19340:	bl	112b0 <fwrite_unlocked@plt>
   19344:	ldr	r0, [r4, #24]
   19348:	bl	18108 <argp_parse@@Base+0xe98>
   1934c:	mov	r0, r4
   19350:	pop	{r4, lr}
   19354:	b	18108 <argp_parse@@Base+0xe98>
   19358:	push	{r4, r5, r6, lr}
   1935c:	mov	r4, r0
   19360:	mov	r5, r1
   19364:	bl	18da8 <argp_parse@@Base+0x1b38>
   19368:	ldr	r3, [r4, #24]
   1936c:	ldr	r2, [r4, #28]
   19370:	mov	r0, r3
   19374:	sub	r2, r2, r3
   19378:	mov	r1, #1
   1937c:	ldr	r3, [r4]
   19380:	bl	112b0 <fwrite_unlocked@plt>
   19384:	ldr	r2, [r4, #28]
   19388:	ldr	r3, [r4, #24]
   1938c:	sub	r1, r2, r3
   19390:	cmp	r0, r1
   19394:	bne	193d8 <argp_parse@@Base+0x2168>
   19398:	ldr	r1, [r4, #32]
   1939c:	mov	r2, #0
   193a0:	sub	r1, r1, r3
   193a4:	cmp	r1, r5
   193a8:	str	r3, [r4, #28]
   193ac:	str	r2, [r4, #16]
   193b0:	movcs	r3, #1
   193b4:	bcs	193d0 <argp_parse@@Base+0x2160>
   193b8:	adds	r5, r1, r5
   193bc:	bcc	19408 <argp_parse@@Base+0x2198>
   193c0:	bl	1140c <__errno_location@plt>
   193c4:	mov	r3, #0
   193c8:	mov	r2, #12
   193cc:	str	r2, [r0]
   193d0:	mov	r0, r3
   193d4:	pop	{r4, r5, r6, pc}
   193d8:	ldr	r1, [r4, #16]
   193dc:	sub	r2, r2, r0
   193e0:	sub	r1, r1, r0
   193e4:	str	r2, [r4, #28]
   193e8:	str	r1, [r4, #16]
   193ec:	sub	r2, r2, r3
   193f0:	add	r1, r3, r0
   193f4:	mov	r0, r3
   193f8:	bl	11250 <memmove@plt>
   193fc:	mov	r3, #0
   19400:	mov	r0, r3
   19404:	pop	{r4, r5, r6, pc}
   19408:	mov	r0, r3
   1940c:	mov	r1, r5
   19410:	bl	18cd0 <argp_parse@@Base+0x1a60>
   19414:	cmp	r0, #0
   19418:	beq	193c0 <argp_parse@@Base+0x2150>
   1941c:	add	r1, r0, r5
   19420:	mov	r3, #1
   19424:	str	r0, [r4, #24]
   19428:	str	r0, [r4, #28]
   1942c:	str	r1, [r4, #32]
   19430:	mov	r0, r3
   19434:	pop	{r4, r5, r6, pc}
   19438:	ldr	r3, [r0, #32]
   1943c:	ldr	r2, [r0, #28]
   19440:	sub	r3, r3, r2
   19444:	cmp	r3, r1
   19448:	bcc	19454 <argp_parse@@Base+0x21e4>
   1944c:	mov	r0, #1
   19450:	bx	lr
   19454:	b	19358 <argp_parse@@Base+0x20e8>
   19458:	push	{r1, r2, r3}
   1945c:	mov	r1, #150	; 0x96
   19460:	push	{r4, r5, r6, r7, lr}
   19464:	sub	sp, sp, #8
   19468:	mov	r5, r0
   1946c:	ldr	r7, [sp, #28]
   19470:	add	r6, sp, #32
   19474:	ldr	r3, [r5, #32]
   19478:	ldr	r0, [r5, #28]
   1947c:	sub	r2, r3, r0
   19480:	cmp	r1, r2
   19484:	bhi	194c8 <argp_parse@@Base+0x2258>
   19488:	sub	r4, r3, r0
   1948c:	mov	r1, r4
   19490:	mov	r3, r6
   19494:	mov	r2, r7
   19498:	str	r6, [sp, #4]
   1949c:	bl	114f0 <vsnprintf@plt>
   194a0:	cmp	r4, r0
   194a4:	addls	r1, r0, #1
   194a8:	bls	19474 <argp_parse@@Base+0x2204>
   194ac:	ldr	r3, [r5, #28]
   194b0:	add	r3, r3, r0
   194b4:	str	r3, [r5, #28]
   194b8:	add	sp, sp, #8
   194bc:	pop	{r4, r5, r6, r7, lr}
   194c0:	add	sp, sp, #12
   194c4:	bx	lr
   194c8:	mov	r0, r5
   194cc:	bl	19358 <argp_parse@@Base+0x20e8>
   194d0:	cmp	r0, #0
   194d4:	ldrne	r3, [r5, #32]
   194d8:	ldrne	r0, [r5, #28]
   194dc:	bne	19488 <argp_parse@@Base+0x2218>
   194e0:	mvn	r0, #0
   194e4:	add	sp, sp, #8
   194e8:	pop	{r4, r5, r6, r7, lr}
   194ec:	add	sp, sp, #12
   194f0:	bx	lr
   194f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   194f8:	ldr	r4, [r1, #32]
   194fc:	ldr	r8, [r1, #28]
   19500:	ldr	r7, [r1]
   19504:	add	r6, r0, r4, lsl #2
   19508:	mov	r2, r8
   1950c:	mov	r5, r7
   19510:	cmp	r5, r4
   19514:	movle	r3, #0
   19518:	movgt	r3, #1
   1951c:	cmp	r2, r4
   19520:	movge	r3, #0
   19524:	cmp	r3, #0
   19528:	beq	1959c <argp_parse@@Base+0x232c>
   1952c:	sub	r3, r5, r4
   19530:	sub	sl, r4, r2
   19534:	cmp	r3, sl
   19538:	ble	1956c <argp_parse@@Base+0x22fc>
   1953c:	sub	r5, r5, sl
   19540:	add	sl, sl, r2
   19544:	add	ip, r0, r5, lsl #2
   19548:	add	sl, r0, sl, lsl #2
   1954c:	add	r3, r0, r2, lsl #2
   19550:	ldr	r9, [ip]
   19554:	ldr	lr, [r3]
   19558:	str	r9, [r3], #4
   1955c:	cmp	sl, r3
   19560:	str	lr, [ip], #4
   19564:	bne	19550 <argp_parse@@Base+0x22e0>
   19568:	b	19510 <argp_parse@@Base+0x22a0>
   1956c:	add	sl, r3, r2
   19570:	add	r3, r0, r2, lsl #2
   19574:	add	r9, r0, sl, lsl #2
   19578:	mov	r2, r6
   1957c:	ldr	lr, [r2]
   19580:	ldr	ip, [r3]
   19584:	str	lr, [r3], #4
   19588:	cmp	r3, r9
   1958c:	str	ip, [r2], #4
   19590:	bne	1957c <argp_parse@@Base+0x230c>
   19594:	mov	r2, sl
   19598:	b	19510 <argp_parse@@Base+0x22a0>
   1959c:	sub	r4, r7, r4
   195a0:	add	r8, r4, r8
   195a4:	str	r8, [r1, #28]
   195a8:	str	r7, [r1, #32]
   195ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195b4:	sub	sp, sp, #44	; 0x2c
   195b8:	str	r1, [sp, #20]
   195bc:	ldr	r1, [sp, #88]	; 0x58
   195c0:	str	r0, [sp, #24]
   195c4:	str	r2, [sp, #28]
   195c8:	ldr	r8, [r1, #20]
   195cc:	str	r3, [sp, #12]
   195d0:	mov	r7, r8
   195d4:	ldrb	r5, [r8]
   195d8:	cmp	r5, #61	; 0x3d
   195dc:	cmpne	r5, #0
   195e0:	movne	r5, #1
   195e4:	moveq	r5, #0
   195e8:	beq	19600 <argp_parse@@Base+0x2390>
   195ec:	ldrb	r3, [r7, #1]!
   195f0:	cmp	r3, #0
   195f4:	cmpne	r3, #61	; 0x3d
   195f8:	bne	195ec <argp_parse@@Base+0x237c>
   195fc:	sub	r5, r7, r8
   19600:	ldr	r3, [sp, #12]
   19604:	ldr	sl, [r3]
   19608:	cmp	sl, #0
   1960c:	beq	198c0 <argp_parse@@Base+0x2650>
   19610:	mov	fp, r3
   19614:	mov	r4, sl
   19618:	mov	r6, #0
   1961c:	mov	r2, r5
   19620:	mov	r1, r8
   19624:	mov	r0, r4
   19628:	bl	11538 <strncmp@plt>
   1962c:	mov	r9, fp
   19630:	cmp	r0, #0
   19634:	mov	r0, r4
   19638:	bne	19648 <argp_parse@@Base+0x23d8>
   1963c:	bl	113e8 <strlen@plt>
   19640:	cmp	r0, r5
   19644:	beq	196d4 <argp_parse@@Base+0x2464>
   19648:	ldr	r4, [fp, #16]!
   1964c:	add	r6, r6, #1
   19650:	cmp	r4, #0
   19654:	bne	1961c <argp_parse@@Base+0x23ac>
   19658:	ldr	r3, [sp, #12]
   1965c:	ldr	fp, [sp, #88]	; 0x58
   19660:	mov	r0, sl
   19664:	mov	r1, r8
   19668:	mov	r9, r4
   1966c:	mov	sl, r4
   19670:	mov	r8, r3
   19674:	mvn	r2, #0
   19678:	str	r4, [sp, #36]	; 0x24
   1967c:	str	r4, [sp, #16]
   19680:	str	r2, [sp, #32]
   19684:	mov	r2, r5
   19688:	bl	11538 <strncmp@plt>
   1968c:	cmp	r0, #0
   19690:	bne	196b0 <argp_parse@@Base+0x2440>
   19694:	cmp	r9, #0
   19698:	beq	19930 <argp_parse@@Base+0x26c0>
   1969c:	ldr	r3, [sp, #84]	; 0x54
   196a0:	cmp	r3, #0
   196a4:	beq	19778 <argp_parse@@Base+0x2508>
   196a8:	cmp	r4, #0
   196ac:	beq	197ac <argp_parse@@Base+0x253c>
   196b0:	ldr	r0, [r8, #16]!
   196b4:	add	sl, sl, #1
   196b8:	cmp	r0, #0
   196bc:	beq	197e0 <argp_parse@@Base+0x2570>
   196c0:	ldr	r1, [fp, #20]
   196c4:	b	19684 <argp_parse@@Base+0x2414>
   196c8:	cmp	r9, #0
   196cc:	beq	198c0 <argp_parse@@Base+0x2650>
   196d0:	ldr	r6, [sp, #32]
   196d4:	ldr	r3, [sp, #88]	; 0x58
   196d8:	ldr	r0, [sp, #88]	; 0x58
   196dc:	mov	r1, #0
   196e0:	ldr	r2, [r3]
   196e4:	str	r1, [r0, #20]
   196e8:	add	r3, r2, #1
   196ec:	str	r3, [r0]
   196f0:	ldrb	r1, [r7]
   196f4:	cmp	r1, #0
   196f8:	bne	19738 <argp_parse@@Base+0x24c8>
   196fc:	ldr	r1, [r9, #4]
   19700:	cmp	r1, #1
   19704:	beq	1993c <argp_parse@@Base+0x26cc>
   19708:	ldr	r3, [sp, #80]	; 0x50
   1970c:	ldr	r2, [r9, #8]
   19710:	cmp	r3, #0
   19714:	strne	r6, [r3]
   19718:	cmp	r2, #0
   1971c:	movne	r3, #0
   19720:	ldreq	r3, [r9, #12]
   19724:	ldrne	r1, [r9, #12]
   19728:	strne	r1, [r2]
   1972c:	mov	r0, r3
   19730:	add	sp, sp, #44	; 0x2c
   19734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19738:	ldr	r3, [r9, #4]
   1973c:	cmp	r3, #0
   19740:	movne	r3, r0
   19744:	addne	r7, r7, #1
   19748:	strne	r7, [r3, #12]
   1974c:	bne	19708 <argp_parse@@Base+0x2498>
   19750:	ldr	r3, [sp, #92]	; 0x5c
   19754:	cmp	r3, #0
   19758:	bne	19888 <argp_parse@@Base+0x2618>
   1975c:	ldr	r1, [sp, #88]	; 0x58
   19760:	ldr	r2, [r9, #12]
   19764:	mov	r3, #63	; 0x3f
   19768:	str	r2, [r1, #8]
   1976c:	mov	r0, r3
   19770:	add	sp, sp, #44	; 0x2c
   19774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19778:	ldr	r2, [r9, #4]
   1977c:	ldr	r3, [r8, #4]
   19780:	cmp	r2, r3
   19784:	bne	196a8 <argp_parse@@Base+0x2438>
   19788:	ldr	r2, [r9, #8]
   1978c:	ldr	r3, [r8, #8]
   19790:	cmp	r2, r3
   19794:	bne	196a8 <argp_parse@@Base+0x2438>
   19798:	ldr	r2, [r9, #12]
   1979c:	ldr	r3, [r8, #12]
   197a0:	cmp	r2, r3
   197a4:	bne	196a8 <argp_parse@@Base+0x2438>
   197a8:	b	196b0 <argp_parse@@Base+0x2440>
   197ac:	ldr	r3, [sp, #92]	; 0x5c
   197b0:	cmp	r3, #0
   197b4:	ldr	r3, [sp, #16]
   197b8:	beq	19878 <argp_parse@@Base+0x2608>
   197bc:	cmp	r3, #0
   197c0:	beq	19a94 <argp_parse@@Base+0x2824>
   197c4:	ldr	r3, [sp, #16]
   197c8:	ldr	r0, [r8, #16]!
   197cc:	mov	r2, #1
   197d0:	cmp	r0, #0
   197d4:	strb	r2, [r3, sl]
   197d8:	add	sl, sl, #1
   197dc:	bne	196c0 <argp_parse@@Base+0x2450>
   197e0:	ldr	r3, [sp, #16]
   197e4:	cmp	r3, #0
   197e8:	cmpeq	r4, #0
   197ec:	beq	196c8 <argp_parse@@Base+0x2458>
   197f0:	ldr	r3, [sp, #92]	; 0x5c
   197f4:	cmp	r3, #0
   197f8:	beq	19978 <argp_parse@@Base+0x2708>
   197fc:	cmp	r4, #0
   19800:	bne	19a00 <argp_parse@@Base+0x2790>
   19804:	ldr	r5, [pc, #716]	; 19ad8 <argp_parse@@Base+0x2868>
   19808:	ldr	r8, [sp, #16]
   1980c:	ldr	r7, [pc, #712]	; 19adc <argp_parse@@Base+0x286c>
   19810:	ldr	r0, [r5]
   19814:	bl	114e4 <flockfile@plt>
   19818:	ldr	r3, [sp, #20]
   1981c:	ldr	r0, [r5]
   19820:	ldr	r1, [pc, #696]	; 19ae0 <argp_parse@@Base+0x2870>
   19824:	ldr	r2, [r3]
   19828:	ldr	r3, [sp, #88]	; 0x58
   1982c:	add	r6, r8, r6
   19830:	ldr	r3, [r3, #20]
   19834:	str	r3, [sp]
   19838:	ldr	r3, [sp, #96]	; 0x60
   1983c:	bl	11400 <fprintf@plt>
   19840:	ldr	r9, [sp, #12]
   19844:	b	19854 <argp_parse@@Base+0x25e4>
   19848:	cmp	r8, r6
   1984c:	add	r4, r4, #1
   19850:	beq	19964 <argp_parse@@Base+0x26f4>
   19854:	ldrb	r3, [r8], #1
   19858:	cmp	r3, #0
   1985c:	beq	19848 <argp_parse@@Base+0x25d8>
   19860:	ldr	r3, [r9, r4, lsl #4]
   19864:	ldr	r2, [sp, #96]	; 0x60
   19868:	mov	r1, r7
   1986c:	ldr	r0, [r5]
   19870:	bl	11400 <fprintf@plt>
   19874:	b	19848 <argp_parse@@Base+0x25d8>
   19878:	cmp	r3, #0
   1987c:	mov	r4, #1
   19880:	bne	197c4 <argp_parse@@Base+0x2554>
   19884:	b	196b0 <argp_parse@@Base+0x2440>
   19888:	ldr	r3, [sp, #20]
   1988c:	ldr	r1, [pc, #580]	; 19ad8 <argp_parse@@Base+0x2868>
   19890:	ldr	r2, [r3]
   19894:	ldr	r3, [r9]
   19898:	ldr	r0, [r1]
   1989c:	str	r3, [sp]
   198a0:	ldr	r1, [pc, #572]	; 19ae4 <argp_parse@@Base+0x2874>
   198a4:	ldr	r3, [sp, #96]	; 0x60
   198a8:	bl	11400 <fprintf@plt>
   198ac:	ldr	r1, [sp, #88]	; 0x58
   198b0:	ldr	r2, [r9, #12]
   198b4:	mov	r3, #63	; 0x3f
   198b8:	str	r2, [r1, #8]
   198bc:	b	1976c <argp_parse@@Base+0x24fc>
   198c0:	ldr	r3, [sp, #84]	; 0x54
   198c4:	cmp	r3, #0
   198c8:	bne	19a54 <argp_parse@@Base+0x27e4>
   198cc:	ldr	r3, [sp, #92]	; 0x5c
   198d0:	cmp	r3, #0
   198d4:	beq	19900 <argp_parse@@Base+0x2690>
   198d8:	ldr	r3, [sp, #20]
   198dc:	ldr	r1, [pc, #500]	; 19ad8 <argp_parse@@Base+0x2868>
   198e0:	ldr	r2, [r3]
   198e4:	ldr	r3, [sp, #88]	; 0x58
   198e8:	ldr	r0, [r1]
   198ec:	ldr	r1, [pc, #500]	; 19ae8 <argp_parse@@Base+0x2878>
   198f0:	ldr	r3, [r3, #20]
   198f4:	str	r3, [sp]
   198f8:	ldr	r3, [sp, #96]	; 0x60
   198fc:	bl	11400 <fprintf@plt>
   19900:	ldr	r3, [sp, #88]	; 0x58
   19904:	ldr	r1, [sp, #88]	; 0x58
   19908:	mov	r2, #0
   1990c:	ldr	r3, [r3]
   19910:	str	r2, [r1, #20]
   19914:	add	r3, r3, #1
   19918:	str	r3, [r1]
   1991c:	mov	r3, #63	; 0x3f
   19920:	mov	r0, r3
   19924:	str	r2, [r1, #8]
   19928:	add	sp, sp, #44	; 0x2c
   1992c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19930:	str	sl, [sp, #32]
   19934:	mov	r9, r8
   19938:	b	196b0 <argp_parse@@Base+0x2440>
   1993c:	ldr	r1, [sp, #24]
   19940:	cmp	r3, r1
   19944:	bge	199d0 <argp_parse@@Base+0x2760>
   19948:	ldr	r1, [sp, #20]
   1994c:	add	r2, r2, #2
   19950:	ldr	r3, [r1, r3, lsl #2]
   19954:	ldr	r1, [sp, #88]	; 0x58
   19958:	str	r3, [r1, #12]
   1995c:	str	r2, [r1]
   19960:	b	19708 <argp_parse@@Base+0x2498>
   19964:	ldr	r1, [r5]
   19968:	mov	r0, #10
   1996c:	bl	114cc <fputc@plt>
   19970:	ldr	r0, [r5]
   19974:	bl	112f8 <funlockfile@plt>
   19978:	ldr	r3, [sp, #36]	; 0x24
   1997c:	cmp	r3, #0
   19980:	beq	1998c <argp_parse@@Base+0x271c>
   19984:	ldr	r0, [sp, #16]
   19988:	bl	18108 <argp_parse@@Base+0xe98>
   1998c:	ldr	r3, [sp, #88]	; 0x58
   19990:	ldr	r4, [r3, #20]
   19994:	mov	r0, r4
   19998:	bl	113e8 <strlen@plt>
   1999c:	ldr	r3, [sp, #88]	; 0x58
   199a0:	ldr	r1, [sp, #88]	; 0x58
   199a4:	mov	r2, #0
   199a8:	ldr	r3, [r3]
   199ac:	str	r2, [r1, #8]
   199b0:	add	r3, r3, #1
   199b4:	str	r3, [r1]
   199b8:	mov	r3, #63	; 0x3f
   199bc:	add	r0, r4, r0
   199c0:	str	r0, [r1, #20]
   199c4:	mov	r0, r3
   199c8:	add	sp, sp, #44	; 0x2c
   199cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199d0:	ldr	r3, [sp, #92]	; 0x5c
   199d4:	cmp	r3, #0
   199d8:	bne	19a2c <argp_parse@@Base+0x27bc>
   199dc:	ldr	r2, [sp, #88]	; 0x58
   199e0:	ldr	r3, [r9, #12]
   199e4:	str	r3, [r2, #8]
   199e8:	ldr	r3, [sp, #28]
   199ec:	ldrb	r3, [r3]
   199f0:	cmp	r3, #58	; 0x3a
   199f4:	movne	r3, #63	; 0x3f
   199f8:	moveq	r3, #58	; 0x3a
   199fc:	b	1972c <argp_parse@@Base+0x24bc>
   19a00:	ldr	r3, [sp, #20]
   19a04:	ldr	r1, [pc, #204]	; 19ad8 <argp_parse@@Base+0x2868>
   19a08:	ldr	r2, [r3]
   19a0c:	ldr	r3, [sp, #88]	; 0x58
   19a10:	ldr	r0, [r1]
   19a14:	ldr	r1, [pc, #208]	; 19aec <argp_parse@@Base+0x287c>
   19a18:	ldr	r3, [r3, #20]
   19a1c:	str	r3, [sp]
   19a20:	ldr	r3, [sp, #96]	; 0x60
   19a24:	bl	11400 <fprintf@plt>
   19a28:	b	19978 <argp_parse@@Base+0x2708>
   19a2c:	ldr	r3, [sp, #20]
   19a30:	ldr	r1, [pc, #160]	; 19ad8 <argp_parse@@Base+0x2868>
   19a34:	ldr	r2, [r3]
   19a38:	ldr	r3, [r9]
   19a3c:	ldr	r0, [r1]
   19a40:	str	r3, [sp]
   19a44:	ldr	r1, [pc, #164]	; 19af0 <argp_parse@@Base+0x2880>
   19a48:	ldr	r3, [sp, #96]	; 0x60
   19a4c:	bl	11400 <fprintf@plt>
   19a50:	b	199dc <argp_parse@@Base+0x276c>
   19a54:	ldr	r3, [sp, #88]	; 0x58
   19a58:	ldr	r2, [sp, #20]
   19a5c:	ldr	r3, [r3]
   19a60:	ldr	r3, [r2, r3, lsl #2]
   19a64:	ldrb	r3, [r3, #1]
   19a68:	cmp	r3, #45	; 0x2d
   19a6c:	beq	198cc <argp_parse@@Base+0x265c>
   19a70:	ldr	r3, [sp, #88]	; 0x58
   19a74:	ldr	r0, [sp, #28]
   19a78:	ldr	r3, [r3, #20]
   19a7c:	ldrb	r1, [r3]
   19a80:	bl	113f4 <strchr@plt>
   19a84:	cmp	r0, #0
   19a88:	beq	198cc <argp_parse@@Base+0x265c>
   19a8c:	mvn	r3, #0
   19a90:	b	1972c <argp_parse@@Base+0x24bc>
   19a94:	mov	r0, r6
   19a98:	bl	18ca4 <argp_parse@@Base+0x1a34>
   19a9c:	subs	r3, r0, #0
   19aa0:	str	r3, [sp, #16]
   19aa4:	beq	19ad0 <argp_parse@@Base+0x2860>
   19aa8:	mov	r2, r6
   19aac:	mov	r1, #0
   19ab0:	bl	1143c <memset@plt>
   19ab4:	mov	r3, #1
   19ab8:	str	r3, [sp, #36]	; 0x24
   19abc:	ldr	r2, [sp, #32]
   19ac0:	ldr	r3, [sp, #16]
   19ac4:	mov	r1, #1
   19ac8:	strb	r1, [r3, r2]
   19acc:	b	197c4 <argp_parse@@Base+0x2554>
   19ad0:	mov	r4, #1
   19ad4:	b	196b0 <argp_parse@@Base+0x2440>
   19ad8:	andeq	ip, r2, r0, asr r4
   19adc:	muleq	r1, r0, r6
   19ae0:	andeq	fp, r1, r0, ror #12
   19ae4:			; <UNDEFINED> instruction: 0x0001b6b8
   19ae8:	muleq	r1, r8, r6
   19aec:	andeq	fp, r1, r0, asr #12
   19af0:	andeq	fp, r1, r8, ror #13
   19af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19af8:	sub	sp, sp, #36	; 0x24
   19afc:	subs	r6, r0, #0
   19b00:	ldr	r4, [sp, #80]	; 0x50
   19b04:	ldr	r8, [r4, #4]
   19b08:	ble	19ce4 <argp_parse@@Base+0x2a74>
   19b0c:	mov	sl, r3
   19b10:	ldr	r3, [r4]
   19b14:	mov	r7, r2
   19b18:	mov	r2, #0
   19b1c:	cmp	r3, r2
   19b20:	mov	r9, r1
   19b24:	str	r2, [r4, #12]
   19b28:	beq	19d6c <argp_parse@@Base+0x2afc>
   19b2c:	ldr	r2, [r4, #16]
   19b30:	cmp	r2, #0
   19b34:	bne	19cf0 <argp_parse@@Base+0x2a80>
   19b38:	mov	r5, #0
   19b3c:	str	r3, [r4, #32]
   19b40:	str	r3, [r4, #28]
   19b44:	str	r5, [r4, #20]
   19b48:	ldrb	r3, [r7]
   19b4c:	cmp	r3, #45	; 0x2d
   19b50:	moveq	r3, #2
   19b54:	addeq	r7, r7, #1
   19b58:	streq	r3, [r4, #24]
   19b5c:	beq	19b84 <argp_parse@@Base+0x2914>
   19b60:	cmp	r3, #43	; 0x2b
   19b64:	streq	r5, [r4, #24]
   19b68:	addeq	r7, r7, #1
   19b6c:	beq	19b84 <argp_parse@@Base+0x2914>
   19b70:	ldr	r3, [sp, #84]	; 0x54
   19b74:	cmp	r3, #0
   19b78:	beq	19e0c <argp_parse@@Base+0x2b9c>
   19b7c:	mov	r3, #0
   19b80:	str	r3, [r4, #24]
   19b84:	mov	r3, #1
   19b88:	str	r3, [r4, #16]
   19b8c:	ldrb	r3, [r7]
   19b90:	cmp	r3, #58	; 0x3a
   19b94:	moveq	r8, #0
   19b98:	cmp	r5, #0
   19b9c:	beq	19c50 <argp_parse@@Base+0x29e0>
   19ba0:	ldrb	r3, [r5]
   19ba4:	cmp	r3, #0
   19ba8:	beq	19c50 <argp_parse@@Base+0x29e0>
   19bac:	add	r3, r5, #1
   19bb0:	str	r3, [r4, #20]
   19bb4:	ldrb	fp, [r5]
   19bb8:	mov	r0, r7
   19bbc:	str	r3, [sp, #28]
   19bc0:	mov	r1, fp
   19bc4:	bl	113f4 <strchr@plt>
   19bc8:	ldrb	r1, [r5, #1]
   19bcc:	ldr	r3, [sp, #28]
   19bd0:	cmp	r1, #0
   19bd4:	ldreq	r1, [r4]
   19bd8:	addeq	r1, r1, #1
   19bdc:	streq	r1, [r4]
   19be0:	sub	r1, fp, #58	; 0x3a
   19be4:	mov	r2, r0
   19be8:	cmp	r2, #0
   19bec:	cmpne	r1, #1
   19bf0:	mov	r0, fp
   19bf4:	bls	19d3c <argp_parse@@Base+0x2acc>
   19bf8:	ldrb	r1, [r2]
   19bfc:	cmp	r1, #87	; 0x57
   19c00:	ldrb	r1, [r2, #1]
   19c04:	beq	19e90 <argp_parse@@Base+0x2c20>
   19c08:	cmp	r1, #58	; 0x3a
   19c0c:	bne	19d34 <argp_parse@@Base+0x2ac4>
   19c10:	ldrb	r2, [r2, #2]
   19c14:	cmp	r2, #58	; 0x3a
   19c18:	ldrb	r2, [r5, #1]
   19c1c:	beq	19f18 <argp_parse@@Base+0x2ca8>
   19c20:	cmp	r2, #0
   19c24:	bne	19f24 <argp_parse@@Base+0x2cb4>
   19c28:	ldr	r3, [r4]
   19c2c:	cmp	r6, r3
   19c30:	beq	19fc4 <argp_parse@@Base+0x2d54>
   19c34:	ldr	r2, [r9, r3, lsl #2]
   19c38:	add	r3, r3, #1
   19c3c:	str	r2, [r4, #12]
   19c40:	str	r3, [r4]
   19c44:	mov	r3, #0
   19c48:	str	r3, [r4, #20]
   19c4c:	b	19d34 <argp_parse@@Base+0x2ac4>
   19c50:	ldr	fp, [r4]
   19c54:	ldr	r3, [r4, #32]
   19c58:	cmp	r3, fp
   19c5c:	ldr	r3, [r4, #28]
   19c60:	strgt	fp, [r4, #32]
   19c64:	cmp	fp, r3
   19c68:	ldr	r3, [r4, #24]
   19c6c:	strlt	fp, [r4, #28]
   19c70:	cmp	r3, #1
   19c74:	beq	19d7c <argp_parse@@Base+0x2b0c>
   19c78:	cmp	r6, fp
   19c7c:	beq	19df4 <argp_parse@@Base+0x2b84>
   19c80:	ldr	r3, [pc, #944]	; 1a038 <argp_parse@@Base+0x2dc8>
   19c84:	ldr	r5, [r9, fp, lsl #2]
   19c88:	mov	r1, r3
   19c8c:	mov	r0, r5
   19c90:	str	r3, [sp, #28]
   19c94:	bl	11208 <strcmp@plt>
   19c98:	ldr	r3, [sp, #28]
   19c9c:	cmp	r0, #0
   19ca0:	bne	19d0c <argp_parse@@Base+0x2a9c>
   19ca4:	ldr	r3, [r4, #28]
   19ca8:	ldr	r2, [r4, #32]
   19cac:	add	fp, fp, #1
   19cb0:	cmp	r3, r2
   19cb4:	str	fp, [r4]
   19cb8:	beq	19e84 <argp_parse@@Base+0x2c14>
   19cbc:	cmp	fp, r2
   19cc0:	beq	19cd4 <argp_parse@@Base+0x2a64>
   19cc4:	mov	r0, r9
   19cc8:	mov	r1, r4
   19ccc:	bl	194f4 <argp_parse@@Base+0x2284>
   19cd0:	ldr	r3, [r4, #28]
   19cd4:	cmp	r3, r6
   19cd8:	str	r6, [r4]
   19cdc:	str	r6, [r4, #32]
   19ce0:	strne	r3, [r4]
   19ce4:	mvn	r0, #0
   19ce8:	add	sp, sp, #36	; 0x24
   19cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cf0:	ldrb	r3, [r7]
   19cf4:	ldr	r5, [r4, #20]
   19cf8:	sub	r2, r3, #43	; 0x2b
   19cfc:	tst	r2, #253	; 0xfd
   19d00:	ldrbeq	r3, [r7, #1]
   19d04:	addeq	r7, r7, #1
   19d08:	b	19b90 <argp_parse@@Base+0x2920>
   19d0c:	ldrb	r2, [r5]
   19d10:	cmp	r2, #45	; 0x2d
   19d14:	beq	19e38 <argp_parse@@Base+0x2bc8>
   19d18:	ldr	r3, [r4, #24]
   19d1c:	cmp	r3, #0
   19d20:	beq	19ce4 <argp_parse@@Base+0x2a74>
   19d24:	mov	r0, #1
   19d28:	add	fp, fp, #1
   19d2c:	str	fp, [r4]
   19d30:	str	r5, [r4, #12]
   19d34:	add	sp, sp, #36	; 0x24
   19d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d3c:	cmp	r8, #0
   19d40:	beq	19d5c <argp_parse@@Base+0x2aec>
   19d44:	ldr	r1, [pc, #752]	; 1a03c <argp_parse@@Base+0x2dcc>
   19d48:	ldr	r2, [r9]
   19d4c:	mov	r3, fp
   19d50:	ldr	r0, [r1]
   19d54:	ldr	r1, [pc, #740]	; 1a040 <argp_parse@@Base+0x2dd0>
   19d58:	bl	11400 <fprintf@plt>
   19d5c:	mov	r0, #63	; 0x3f
   19d60:	str	fp, [r4, #8]
   19d64:	add	sp, sp, #36	; 0x24
   19d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d6c:	mov	r2, #1
   19d70:	mov	r3, r2
   19d74:	str	r2, [r4]
   19d78:	b	19b38 <argp_parse@@Base+0x28c8>
   19d7c:	ldr	r2, [r4, #28]
   19d80:	ldr	r3, [r4, #32]
   19d84:	cmp	r2, r3
   19d88:	beq	19f08 <argp_parse@@Base+0x2c98>
   19d8c:	cmp	fp, r3
   19d90:	beq	19da4 <argp_parse@@Base+0x2b34>
   19d94:	mov	r1, r4
   19d98:	mov	r0, r9
   19d9c:	bl	194f4 <argp_parse@@Base+0x2284>
   19da0:	ldr	r3, [r4]
   19da4:	cmp	r6, r3
   19da8:	movle	fp, r3
   19dac:	ble	19de8 <argp_parse@@Base+0x2b78>
   19db0:	add	r1, r9, r3, lsl #2
   19db4:	b	19dc8 <argp_parse@@Base+0x2b58>
   19db8:	add	r3, r3, #1
   19dbc:	cmp	r6, r3
   19dc0:	str	r3, [r4]
   19dc4:	beq	19e2c <argp_parse@@Base+0x2bbc>
   19dc8:	ldr	r2, [r1], #4
   19dcc:	ldrb	r0, [r2]
   19dd0:	cmp	r0, #45	; 0x2d
   19dd4:	bne	19db8 <argp_parse@@Base+0x2b48>
   19dd8:	ldrb	r2, [r2, #1]
   19ddc:	cmp	r2, #0
   19de0:	beq	19db8 <argp_parse@@Base+0x2b48>
   19de4:	ldr	fp, [r4]
   19de8:	str	r3, [r4, #32]
   19dec:	cmp	r6, fp
   19df0:	bne	19c80 <argp_parse@@Base+0x2a10>
   19df4:	ldr	r3, [r4, #28]
   19df8:	ldr	r6, [r4, #32]
   19dfc:	mvn	r0, #0
   19e00:	cmp	r3, r6
   19e04:	strne	r3, [r4]
   19e08:	b	19ce8 <argp_parse@@Base+0x2a78>
   19e0c:	ldr	r0, [pc, #560]	; 1a044 <argp_parse@@Base+0x2dd4>
   19e10:	bl	11364 <getenv@plt>
   19e14:	ldr	r5, [r4, #20]
   19e18:	cmp	r0, #0
   19e1c:	bne	19b7c <argp_parse@@Base+0x290c>
   19e20:	mov	r3, #1
   19e24:	str	r3, [r4, #24]
   19e28:	b	19b84 <argp_parse@@Base+0x2914>
   19e2c:	mov	fp, r6
   19e30:	str	r3, [r4, #32]
   19e34:	b	19dec <argp_parse@@Base+0x2b7c>
   19e38:	ldrb	r1, [r5, #1]
   19e3c:	cmp	r1, #0
   19e40:	beq	19d18 <argp_parse@@Base+0x2aa8>
   19e44:	cmp	sl, #0
   19e48:	beq	19e7c <argp_parse@@Base+0x2c0c>
   19e4c:	cmp	r1, #45	; 0x2d
   19e50:	beq	19f88 <argp_parse@@Base+0x2d18>
   19e54:	ldr	r3, [sp, #76]	; 0x4c
   19e58:	cmp	r3, #0
   19e5c:	beq	19e7c <argp_parse@@Base+0x2c0c>
   19e60:	ldrb	r3, [r5, #2]
   19e64:	cmp	r3, #0
   19e68:	bne	19f38 <argp_parse@@Base+0x2cc8>
   19e6c:	mov	r0, r7
   19e70:	bl	113f4 <strchr@plt>
   19e74:	cmp	r0, #0
   19e78:	beq	19f38 <argp_parse@@Base+0x2cc8>
   19e7c:	add	r5, r5, #1
   19e80:	b	19bac <argp_parse@@Base+0x293c>
   19e84:	mov	r3, fp
   19e88:	str	fp, [r4, #28]
   19e8c:	b	19cd4 <argp_parse@@Base+0x2a64>
   19e90:	cmp	sl, #0
   19e94:	sub	ip, r1, #59	; 0x3b
   19e98:	clz	ip, ip
   19e9c:	lsr	ip, ip, #5
   19ea0:	moveq	ip, #0
   19ea4:	cmp	ip, #0
   19ea8:	beq	19c08 <argp_parse@@Base+0x2998>
   19eac:	ldrb	r2, [r5, #1]
   19eb0:	cmp	r2, #0
   19eb4:	bne	19ec8 <argp_parse@@Base+0x2c58>
   19eb8:	ldr	r3, [r4]
   19ebc:	cmp	r6, r3
   19ec0:	ldrne	r3, [r9, r3, lsl #2]
   19ec4:	beq	19fe4 <argp_parse@@Base+0x2d74>
   19ec8:	str	r3, [r4, #20]
   19ecc:	ldr	lr, [pc, #372]	; 1a048 <argp_parse@@Base+0x2dd8>
   19ed0:	ldr	r3, [sp, #72]	; 0x48
   19ed4:	mov	ip, #0
   19ed8:	str	r3, [sp]
   19edc:	str	r8, [sp, #12]
   19ee0:	str	r4, [sp, #8]
   19ee4:	str	lr, [sp, #16]
   19ee8:	mov	r3, sl
   19eec:	str	ip, [r4, #12]
   19ef0:	mov	r2, r7
   19ef4:	mov	r1, r9
   19ef8:	mov	r0, r6
   19efc:	str	ip, [sp, #4]
   19f00:	bl	195b0 <argp_parse@@Base+0x2340>
   19f04:	b	19d34 <argp_parse@@Base+0x2ac4>
   19f08:	cmp	fp, r3
   19f0c:	movne	r3, fp
   19f10:	strne	fp, [r4, #28]
   19f14:	b	19da4 <argp_parse@@Base+0x2b34>
   19f18:	cmp	r2, #0
   19f1c:	streq	r2, [r4, #12]
   19f20:	beq	19c44 <argp_parse@@Base+0x29d4>
   19f24:	ldr	r2, [r4]
   19f28:	str	r3, [r4, #12]
   19f2c:	add	r3, r2, #1
   19f30:	str	r3, [r4]
   19f34:	b	19c44 <argp_parse@@Base+0x29d4>
   19f38:	ldr	r2, [sp, #76]	; 0x4c
   19f3c:	add	r5, r5, #1
   19f40:	str	r5, [r4, #20]
   19f44:	ldr	r3, [pc, #256]	; 1a04c <argp_parse@@Base+0x2ddc>
   19f48:	str	r2, [sp, #4]
   19f4c:	ldr	r2, [sp, #72]	; 0x48
   19f50:	str	r3, [sp, #16]
   19f54:	str	r2, [sp]
   19f58:	str	r8, [sp, #12]
   19f5c:	str	r4, [sp, #8]
   19f60:	mov	r3, sl
   19f64:	mov	r2, r7
   19f68:	mov	r1, r9
   19f6c:	mov	r0, r6
   19f70:	bl	195b0 <argp_parse@@Base+0x2340>
   19f74:	cmn	r0, #1
   19f78:	bne	19d34 <argp_parse@@Base+0x2ac4>
   19f7c:	ldr	r3, [r4]
   19f80:	ldr	r5, [r9, r3, lsl #2]
   19f84:	b	19e7c <argp_parse@@Base+0x2c0c>
   19f88:	add	r5, r5, #2
   19f8c:	str	r5, [r4, #20]
   19f90:	str	r3, [sp, #16]
   19f94:	ldr	r3, [sp, #76]	; 0x4c
   19f98:	str	r8, [sp, #12]
   19f9c:	str	r3, [sp, #4]
   19fa0:	ldr	r3, [sp, #72]	; 0x48
   19fa4:	str	r4, [sp, #8]
   19fa8:	str	r3, [sp]
   19fac:	mov	r2, r7
   19fb0:	mov	r3, sl
   19fb4:	mov	r1, r9
   19fb8:	mov	r0, r6
   19fbc:	bl	195b0 <argp_parse@@Base+0x2340>
   19fc0:	b	19d34 <argp_parse@@Base+0x2ac4>
   19fc4:	cmp	r8, #0
   19fc8:	bne	1a01c <argp_parse@@Base+0x2dac>
   19fcc:	str	fp, [r4, #8]
   19fd0:	ldrb	r0, [r7]
   19fd4:	cmp	r0, #58	; 0x3a
   19fd8:	movne	r0, #63	; 0x3f
   19fdc:	moveq	r0, #58	; 0x3a
   19fe0:	b	19c44 <argp_parse@@Base+0x29d4>
   19fe4:	cmp	r8, #0
   19fe8:	beq	1a004 <argp_parse@@Base+0x2d94>
   19fec:	ldr	r1, [pc, #72]	; 1a03c <argp_parse@@Base+0x2dcc>
   19ff0:	ldr	r2, [r9]
   19ff4:	mov	r3, fp
   19ff8:	ldr	r0, [r1]
   19ffc:	ldr	r1, [pc, #76]	; 1a050 <argp_parse@@Base+0x2de0>
   1a000:	bl	11400 <fprintf@plt>
   1a004:	str	fp, [r4, #8]
   1a008:	ldrb	r0, [r7]
   1a00c:	cmp	r0, #58	; 0x3a
   1a010:	movne	r0, #63	; 0x3f
   1a014:	moveq	r0, #58	; 0x3a
   1a018:	b	19d34 <argp_parse@@Base+0x2ac4>
   1a01c:	ldr	r1, [pc, #24]	; 1a03c <argp_parse@@Base+0x2dcc>
   1a020:	ldr	r2, [r9]
   1a024:	mov	r3, fp
   1a028:	ldr	r0, [r1]
   1a02c:	ldr	r1, [pc, #28]	; 1a050 <argp_parse@@Base+0x2de0>
   1a030:	bl	11400 <fprintf@plt>
   1a034:	b	19fcc <argp_parse@@Base+0x2d5c>
   1a038:	muleq	r1, r4, r1
   1a03c:	andeq	ip, r2, r0, asr r4
   1a040:	andeq	fp, r1, r4, lsr #14
   1a044:	andeq	fp, r1, r0, lsl r7
   1a048:	andeq	fp, r1, ip, ror #14
   1a04c:	andeq	fp, r1, r0, lsr #14
   1a050:	andeq	fp, r1, r0, asr #14
   1a054:	push	{r4, r5, r6, lr}
   1a058:	sub	sp, sp, #16
   1a05c:	ldr	r5, [pc, #84]	; 1a0b8 <argp_parse@@Base+0x2e48>
   1a060:	ldr	ip, [sp, #32]
   1a064:	ldr	r4, [pc, #80]	; 1a0bc <argp_parse@@Base+0x2e4c>
   1a068:	str	ip, [sp]
   1a06c:	ldr	ip, [sp, #40]	; 0x28
   1a070:	ldr	r6, [sp, #36]	; 0x24
   1a074:	ldr	lr, [r5]
   1a078:	str	ip, [sp, #12]
   1a07c:	ldr	ip, [r5, #4]
   1a080:	str	r4, [sp, #8]
   1a084:	str	r6, [sp, #4]
   1a088:	str	ip, [r4, #4]
   1a08c:	str	lr, [r4]
   1a090:	bl	19af4 <argp_parse@@Base+0x2884>
   1a094:	ldr	r3, [pc, #36]	; 1a0c0 <argp_parse@@Base+0x2e50>
   1a098:	ldr	ip, [r4]
   1a09c:	ldr	r1, [r4, #8]
   1a0a0:	ldr	r2, [r4, #12]
   1a0a4:	str	ip, [r5]
   1a0a8:	str	r1, [r5, #8]
   1a0ac:	str	r2, [r3]
   1a0b0:	add	sp, sp, #16
   1a0b4:	pop	{r4, r5, r6, pc}
   1a0b8:	andeq	ip, r2, ip, lsr r4
   1a0bc:	andeq	ip, r2, ip, lsl r5
   1a0c0:	andeq	ip, r2, r4, asr #31
   1a0c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a0c8:	mov	r3, #0
   1a0cc:	sub	sp, sp, #20
   1a0d0:	mov	ip, #1
   1a0d4:	str	r3, [sp]
   1a0d8:	stmib	sp, {r3, ip}
   1a0dc:	bl	1a054 <argp_parse@@Base+0x2de4>
   1a0e0:	add	sp, sp, #20
   1a0e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0e8:	push	{r4, r5, r6, lr}
   1a0ec:	subs	r4, r2, #0
   1a0f0:	mov	r6, r0
   1a0f4:	mov	r5, r1
   1a0f8:	beq	1a124 <argp_parse@@Base+0x2eb4>
   1a0fc:	mov	r1, r4
   1a100:	mvn	r0, #0
   1a104:	bl	1a134 <argp_parse@@Base+0x2ec4>
   1a108:	cmp	r0, r5
   1a10c:	bcs	1a124 <argp_parse@@Base+0x2eb4>
   1a110:	bl	1140c <__errno_location@plt>
   1a114:	mov	r3, #12
   1a118:	str	r3, [r0]
   1a11c:	mov	r0, #0
   1a120:	pop	{r4, r5, r6, pc}
   1a124:	mul	r1, r5, r4
   1a128:	mov	r0, r6
   1a12c:	pop	{r4, r5, r6, lr}
   1a130:	b	18cd0 <argp_parse@@Base+0x1a60>
   1a134:	subs	r2, r1, #1
   1a138:	bxeq	lr
   1a13c:	bcc	1a314 <argp_parse@@Base+0x30a4>
   1a140:	cmp	r0, r1
   1a144:	bls	1a2f8 <argp_parse@@Base+0x3088>
   1a148:	tst	r1, r2
   1a14c:	beq	1a304 <argp_parse@@Base+0x3094>
   1a150:	clz	r3, r0
   1a154:	clz	r2, r1
   1a158:	sub	r3, r2, r3
   1a15c:	rsbs	r3, r3, #31
   1a160:	addne	r3, r3, r3, lsl #1
   1a164:	mov	r2, #0
   1a168:	addne	pc, pc, r3, lsl #2
   1a16c:	nop			; (mov r0, r0)
   1a170:	cmp	r0, r1, lsl #31
   1a174:	adc	r2, r2, r2
   1a178:	subcs	r0, r0, r1, lsl #31
   1a17c:	cmp	r0, r1, lsl #30
   1a180:	adc	r2, r2, r2
   1a184:	subcs	r0, r0, r1, lsl #30
   1a188:	cmp	r0, r1, lsl #29
   1a18c:	adc	r2, r2, r2
   1a190:	subcs	r0, r0, r1, lsl #29
   1a194:	cmp	r0, r1, lsl #28
   1a198:	adc	r2, r2, r2
   1a19c:	subcs	r0, r0, r1, lsl #28
   1a1a0:	cmp	r0, r1, lsl #27
   1a1a4:	adc	r2, r2, r2
   1a1a8:	subcs	r0, r0, r1, lsl #27
   1a1ac:	cmp	r0, r1, lsl #26
   1a1b0:	adc	r2, r2, r2
   1a1b4:	subcs	r0, r0, r1, lsl #26
   1a1b8:	cmp	r0, r1, lsl #25
   1a1bc:	adc	r2, r2, r2
   1a1c0:	subcs	r0, r0, r1, lsl #25
   1a1c4:	cmp	r0, r1, lsl #24
   1a1c8:	adc	r2, r2, r2
   1a1cc:	subcs	r0, r0, r1, lsl #24
   1a1d0:	cmp	r0, r1, lsl #23
   1a1d4:	adc	r2, r2, r2
   1a1d8:	subcs	r0, r0, r1, lsl #23
   1a1dc:	cmp	r0, r1, lsl #22
   1a1e0:	adc	r2, r2, r2
   1a1e4:	subcs	r0, r0, r1, lsl #22
   1a1e8:	cmp	r0, r1, lsl #21
   1a1ec:	adc	r2, r2, r2
   1a1f0:	subcs	r0, r0, r1, lsl #21
   1a1f4:	cmp	r0, r1, lsl #20
   1a1f8:	adc	r2, r2, r2
   1a1fc:	subcs	r0, r0, r1, lsl #20
   1a200:	cmp	r0, r1, lsl #19
   1a204:	adc	r2, r2, r2
   1a208:	subcs	r0, r0, r1, lsl #19
   1a20c:	cmp	r0, r1, lsl #18
   1a210:	adc	r2, r2, r2
   1a214:	subcs	r0, r0, r1, lsl #18
   1a218:	cmp	r0, r1, lsl #17
   1a21c:	adc	r2, r2, r2
   1a220:	subcs	r0, r0, r1, lsl #17
   1a224:	cmp	r0, r1, lsl #16
   1a228:	adc	r2, r2, r2
   1a22c:	subcs	r0, r0, r1, lsl #16
   1a230:	cmp	r0, r1, lsl #15
   1a234:	adc	r2, r2, r2
   1a238:	subcs	r0, r0, r1, lsl #15
   1a23c:	cmp	r0, r1, lsl #14
   1a240:	adc	r2, r2, r2
   1a244:	subcs	r0, r0, r1, lsl #14
   1a248:	cmp	r0, r1, lsl #13
   1a24c:	adc	r2, r2, r2
   1a250:	subcs	r0, r0, r1, lsl #13
   1a254:	cmp	r0, r1, lsl #12
   1a258:	adc	r2, r2, r2
   1a25c:	subcs	r0, r0, r1, lsl #12
   1a260:	cmp	r0, r1, lsl #11
   1a264:	adc	r2, r2, r2
   1a268:	subcs	r0, r0, r1, lsl #11
   1a26c:	cmp	r0, r1, lsl #10
   1a270:	adc	r2, r2, r2
   1a274:	subcs	r0, r0, r1, lsl #10
   1a278:	cmp	r0, r1, lsl #9
   1a27c:	adc	r2, r2, r2
   1a280:	subcs	r0, r0, r1, lsl #9
   1a284:	cmp	r0, r1, lsl #8
   1a288:	adc	r2, r2, r2
   1a28c:	subcs	r0, r0, r1, lsl #8
   1a290:	cmp	r0, r1, lsl #7
   1a294:	adc	r2, r2, r2
   1a298:	subcs	r0, r0, r1, lsl #7
   1a29c:	cmp	r0, r1, lsl #6
   1a2a0:	adc	r2, r2, r2
   1a2a4:	subcs	r0, r0, r1, lsl #6
   1a2a8:	cmp	r0, r1, lsl #5
   1a2ac:	adc	r2, r2, r2
   1a2b0:	subcs	r0, r0, r1, lsl #5
   1a2b4:	cmp	r0, r1, lsl #4
   1a2b8:	adc	r2, r2, r2
   1a2bc:	subcs	r0, r0, r1, lsl #4
   1a2c0:	cmp	r0, r1, lsl #3
   1a2c4:	adc	r2, r2, r2
   1a2c8:	subcs	r0, r0, r1, lsl #3
   1a2cc:	cmp	r0, r1, lsl #2
   1a2d0:	adc	r2, r2, r2
   1a2d4:	subcs	r0, r0, r1, lsl #2
   1a2d8:	cmp	r0, r1, lsl #1
   1a2dc:	adc	r2, r2, r2
   1a2e0:	subcs	r0, r0, r1, lsl #1
   1a2e4:	cmp	r0, r1
   1a2e8:	adc	r2, r2, r2
   1a2ec:	subcs	r0, r0, r1
   1a2f0:	mov	r0, r2
   1a2f4:	bx	lr
   1a2f8:	moveq	r0, #1
   1a2fc:	movne	r0, #0
   1a300:	bx	lr
   1a304:	clz	r2, r1
   1a308:	rsb	r2, r2, #31
   1a30c:	lsr	r0, r0, r2
   1a310:	bx	lr
   1a314:	cmp	r0, #0
   1a318:	mvnne	r0, #0
   1a31c:	b	1a580 <argp_parse@@Base+0x3310>
   1a320:	cmp	r1, #0
   1a324:	beq	1a314 <argp_parse@@Base+0x30a4>
   1a328:	push	{r0, r1, lr}
   1a32c:	bl	1a134 <argp_parse@@Base+0x2ec4>
   1a330:	pop	{r1, r2, lr}
   1a334:	mul	r3, r2, r0
   1a338:	sub	r1, r1, r3
   1a33c:	bx	lr
   1a340:	cmp	r1, #0
   1a344:	beq	1a550 <argp_parse@@Base+0x32e0>
   1a348:	eor	ip, r0, r1
   1a34c:	rsbmi	r1, r1, #0
   1a350:	subs	r2, r1, #1
   1a354:	beq	1a51c <argp_parse@@Base+0x32ac>
   1a358:	movs	r3, r0
   1a35c:	rsbmi	r3, r0, #0
   1a360:	cmp	r3, r1
   1a364:	bls	1a528 <argp_parse@@Base+0x32b8>
   1a368:	tst	r1, r2
   1a36c:	beq	1a538 <argp_parse@@Base+0x32c8>
   1a370:	clz	r2, r3
   1a374:	clz	r0, r1
   1a378:	sub	r2, r0, r2
   1a37c:	rsbs	r2, r2, #31
   1a380:	addne	r2, r2, r2, lsl #1
   1a384:	mov	r0, #0
   1a388:	addne	pc, pc, r2, lsl #2
   1a38c:	nop			; (mov r0, r0)
   1a390:	cmp	r3, r1, lsl #31
   1a394:	adc	r0, r0, r0
   1a398:	subcs	r3, r3, r1, lsl #31
   1a39c:	cmp	r3, r1, lsl #30
   1a3a0:	adc	r0, r0, r0
   1a3a4:	subcs	r3, r3, r1, lsl #30
   1a3a8:	cmp	r3, r1, lsl #29
   1a3ac:	adc	r0, r0, r0
   1a3b0:	subcs	r3, r3, r1, lsl #29
   1a3b4:	cmp	r3, r1, lsl #28
   1a3b8:	adc	r0, r0, r0
   1a3bc:	subcs	r3, r3, r1, lsl #28
   1a3c0:	cmp	r3, r1, lsl #27
   1a3c4:	adc	r0, r0, r0
   1a3c8:	subcs	r3, r3, r1, lsl #27
   1a3cc:	cmp	r3, r1, lsl #26
   1a3d0:	adc	r0, r0, r0
   1a3d4:	subcs	r3, r3, r1, lsl #26
   1a3d8:	cmp	r3, r1, lsl #25
   1a3dc:	adc	r0, r0, r0
   1a3e0:	subcs	r3, r3, r1, lsl #25
   1a3e4:	cmp	r3, r1, lsl #24
   1a3e8:	adc	r0, r0, r0
   1a3ec:	subcs	r3, r3, r1, lsl #24
   1a3f0:	cmp	r3, r1, lsl #23
   1a3f4:	adc	r0, r0, r0
   1a3f8:	subcs	r3, r3, r1, lsl #23
   1a3fc:	cmp	r3, r1, lsl #22
   1a400:	adc	r0, r0, r0
   1a404:	subcs	r3, r3, r1, lsl #22
   1a408:	cmp	r3, r1, lsl #21
   1a40c:	adc	r0, r0, r0
   1a410:	subcs	r3, r3, r1, lsl #21
   1a414:	cmp	r3, r1, lsl #20
   1a418:	adc	r0, r0, r0
   1a41c:	subcs	r3, r3, r1, lsl #20
   1a420:	cmp	r3, r1, lsl #19
   1a424:	adc	r0, r0, r0
   1a428:	subcs	r3, r3, r1, lsl #19
   1a42c:	cmp	r3, r1, lsl #18
   1a430:	adc	r0, r0, r0
   1a434:	subcs	r3, r3, r1, lsl #18
   1a438:	cmp	r3, r1, lsl #17
   1a43c:	adc	r0, r0, r0
   1a440:	subcs	r3, r3, r1, lsl #17
   1a444:	cmp	r3, r1, lsl #16
   1a448:	adc	r0, r0, r0
   1a44c:	subcs	r3, r3, r1, lsl #16
   1a450:	cmp	r3, r1, lsl #15
   1a454:	adc	r0, r0, r0
   1a458:	subcs	r3, r3, r1, lsl #15
   1a45c:	cmp	r3, r1, lsl #14
   1a460:	adc	r0, r0, r0
   1a464:	subcs	r3, r3, r1, lsl #14
   1a468:	cmp	r3, r1, lsl #13
   1a46c:	adc	r0, r0, r0
   1a470:	subcs	r3, r3, r1, lsl #13
   1a474:	cmp	r3, r1, lsl #12
   1a478:	adc	r0, r0, r0
   1a47c:	subcs	r3, r3, r1, lsl #12
   1a480:	cmp	r3, r1, lsl #11
   1a484:	adc	r0, r0, r0
   1a488:	subcs	r3, r3, r1, lsl #11
   1a48c:	cmp	r3, r1, lsl #10
   1a490:	adc	r0, r0, r0
   1a494:	subcs	r3, r3, r1, lsl #10
   1a498:	cmp	r3, r1, lsl #9
   1a49c:	adc	r0, r0, r0
   1a4a0:	subcs	r3, r3, r1, lsl #9
   1a4a4:	cmp	r3, r1, lsl #8
   1a4a8:	adc	r0, r0, r0
   1a4ac:	subcs	r3, r3, r1, lsl #8
   1a4b0:	cmp	r3, r1, lsl #7
   1a4b4:	adc	r0, r0, r0
   1a4b8:	subcs	r3, r3, r1, lsl #7
   1a4bc:	cmp	r3, r1, lsl #6
   1a4c0:	adc	r0, r0, r0
   1a4c4:	subcs	r3, r3, r1, lsl #6
   1a4c8:	cmp	r3, r1, lsl #5
   1a4cc:	adc	r0, r0, r0
   1a4d0:	subcs	r3, r3, r1, lsl #5
   1a4d4:	cmp	r3, r1, lsl #4
   1a4d8:	adc	r0, r0, r0
   1a4dc:	subcs	r3, r3, r1, lsl #4
   1a4e0:	cmp	r3, r1, lsl #3
   1a4e4:	adc	r0, r0, r0
   1a4e8:	subcs	r3, r3, r1, lsl #3
   1a4ec:	cmp	r3, r1, lsl #2
   1a4f0:	adc	r0, r0, r0
   1a4f4:	subcs	r3, r3, r1, lsl #2
   1a4f8:	cmp	r3, r1, lsl #1
   1a4fc:	adc	r0, r0, r0
   1a500:	subcs	r3, r3, r1, lsl #1
   1a504:	cmp	r3, r1
   1a508:	adc	r0, r0, r0
   1a50c:	subcs	r3, r3, r1
   1a510:	cmp	ip, #0
   1a514:	rsbmi	r0, r0, #0
   1a518:	bx	lr
   1a51c:	teq	ip, r0
   1a520:	rsbmi	r0, r0, #0
   1a524:	bx	lr
   1a528:	movcc	r0, #0
   1a52c:	asreq	r0, ip, #31
   1a530:	orreq	r0, r0, #1
   1a534:	bx	lr
   1a538:	clz	r2, r1
   1a53c:	rsb	r2, r2, #31
   1a540:	cmp	ip, #0
   1a544:	lsr	r0, r3, r2
   1a548:	rsbmi	r0, r0, #0
   1a54c:	bx	lr
   1a550:	cmp	r0, #0
   1a554:	mvngt	r0, #-2147483648	; 0x80000000
   1a558:	movlt	r0, #-2147483648	; 0x80000000
   1a55c:	b	1a580 <argp_parse@@Base+0x3310>
   1a560:	cmp	r1, #0
   1a564:	beq	1a550 <argp_parse@@Base+0x32e0>
   1a568:	push	{r0, r1, lr}
   1a56c:	bl	1a348 <argp_parse@@Base+0x30d8>
   1a570:	pop	{r1, r2, lr}
   1a574:	mul	r3, r2, r0
   1a578:	sub	r1, r1, r3
   1a57c:	bx	lr
   1a580:	push	{r1, lr}
   1a584:	mov	r0, #8
   1a588:	bl	111fc <raise@plt>
   1a58c:	pop	{r1, pc}
   1a590:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a594:	mov	r7, r0
   1a598:	ldr	r6, [pc, #72]	; 1a5e8 <argp_parse@@Base+0x3378>
   1a59c:	ldr	r5, [pc, #72]	; 1a5ec <argp_parse@@Base+0x337c>
   1a5a0:	add	r6, pc, r6
   1a5a4:	add	r5, pc, r5
   1a5a8:	sub	r6, r6, r5
   1a5ac:	mov	r8, r1
   1a5b0:	mov	r9, r2
   1a5b4:	bl	111b8 <fdopen@plt-0x20>
   1a5b8:	asrs	r6, r6, #2
   1a5bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a5c0:	mov	r4, #0
   1a5c4:	add	r4, r4, #1
   1a5c8:	ldr	r3, [r5], #4
   1a5cc:	mov	r2, r9
   1a5d0:	mov	r1, r8
   1a5d4:	mov	r0, r7
   1a5d8:	blx	r3
   1a5dc:	cmp	r6, r4
   1a5e0:	bne	1a5c4 <argp_parse@@Base+0x3354>
   1a5e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a5e8:	andeq	r1, r1, r0, ror #18
   1a5ec:	andeq	r1, r1, r8, asr r9
   1a5f0:	bx	lr

Disassembly of section .fini:

0001a5f4 <.fini>:
   1a5f4:	push	{r3, lr}
   1a5f8:	pop	{r3, pc}
