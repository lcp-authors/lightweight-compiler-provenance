
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010988 <.init>:
   10988:	push	{r3, lr}
   1098c:	bl	10c10 <__assert_fail@plt+0xd0>
   10990:	pop	{r3, pc}

Disassembly of section .plt:

00010994 <calloc@plt-0x14>:
   10994:	push	{lr}		; (str lr, [sp, #-4]!)
   10998:	ldr	lr, [pc, #4]	; 109a4 <calloc@plt-0x4>
   1099c:	add	lr, pc, lr
   109a0:	ldr	pc, [lr, #8]!
   109a4:	andeq	r6, r1, ip, asr r6

000109a8 <calloc@plt>:
   109a8:	add	ip, pc, #0, 12
   109ac:	add	ip, ip, #90112	; 0x16000
   109b0:	ldr	pc, [ip, #1628]!	; 0x65c

000109b4 <strcmp@plt>:
   109b4:	add	ip, pc, #0, 12
   109b8:	add	ip, ip, #90112	; 0x16000
   109bc:	ldr	pc, [ip, #1620]!	; 0x654

000109c0 <fopen@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #90112	; 0x16000
   109c8:	ldr	pc, [ip, #1612]!	; 0x64c

000109cc <free@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #90112	; 0x16000
   109d4:	ldr	pc, [ip, #1604]!	; 0x644

000109d8 <utf8proc_get_property@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #90112	; 0x16000
   109e0:	ldr	pc, [ip, #1596]!	; 0x63c

000109e4 <fgets@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #90112	; 0x16000
   109ec:	ldr	pc, [ip, #1588]!	; 0x634

000109f0 <utf8proc_encode_char@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #90112	; 0x16000
   109f8:	ldr	pc, [ip, #1580]!	; 0x62c

000109fc <strdup@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #90112	; 0x16000
   10a04:	ldr	pc, [ip, #1572]!	; 0x624

00010a08 <rewind@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #90112	; 0x16000
   10a10:	ldr	pc, [ip, #1564]!	; 0x61c

00010a14 <unlink@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #90112	; 0x16000
   10a1c:	ldr	pc, [ip, #1556]!	; 0x614

00010a20 <utf8proc_tolower@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #90112	; 0x16000
   10a28:	ldr	pc, [ip, #1548]!	; 0x60c

00010a2c <__xstat@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #90112	; 0x16000
   10a34:	ldr	pc, [ip, #1540]!	; 0x604

00010a38 <fread@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #90112	; 0x16000
   10a40:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a44 <utf8proc_iterate@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #90112	; 0x16000
   10a4c:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a50 <malloc@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #90112	; 0x16000
   10a58:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a5c <__libc_start_main@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #90112	; 0x16000
   10a64:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a68 <__sysv_signal@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #90112	; 0x16000
   10a70:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a74 <__gmon_start__@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #90112	; 0x16000
   10a7c:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a80 <getpid@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #90112	; 0x16000
   10a88:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a8c <exit@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #90112	; 0x16000
   10a94:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a98 <utf8proc_category@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #90112	; 0x16000
   10aa0:	ldr	pc, [ip, #1468]!	; 0x5bc

00010aa4 <strlen@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #90112	; 0x16000
   10aac:	ldr	pc, [ip, #1460]!	; 0x5b4

00010ab0 <fprintf@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #90112	; 0x16000
   10ab8:	ldr	pc, [ip, #1452]!	; 0x5ac

00010abc <__isoc99_sscanf@plt>:
   10abc:	add	ip, pc, #0, 12
   10ac0:	add	ip, ip, #90112	; 0x16000
   10ac4:	ldr	pc, [ip, #1444]!	; 0x5a4

00010ac8 <fclose@plt>:
   10ac8:	add	ip, pc, #0, 12
   10acc:	add	ip, ip, #90112	; 0x16000
   10ad0:	ldr	pc, [ip, #1436]!	; 0x59c

00010ad4 <utf8proc_NFC@plt>:
   10ad4:	add	ip, pc, #0, 12
   10ad8:	add	ip, ip, #90112	; 0x16000
   10adc:	ldr	pc, [ip, #1428]!	; 0x594

00010ae0 <fputc@plt>:
   10ae0:	add	ip, pc, #0, 12
   10ae4:	add	ip, ip, #90112	; 0x16000
   10ae8:	ldr	pc, [ip, #1420]!	; 0x58c

00010aec <sprintf@plt>:
   10aec:	add	ip, pc, #0, 12
   10af0:	add	ip, ip, #90112	; 0x16000
   10af4:	ldr	pc, [ip, #1412]!	; 0x584

00010af8 <atoi@plt>:
   10af8:	add	ip, pc, #0, 12
   10afc:	add	ip, ip, #90112	; 0x16000
   10b00:	ldr	pc, [ip, #1404]!	; 0x57c

00010b04 <utf8proc_errmsg@plt>:
   10b04:	add	ip, pc, #0, 12
   10b08:	add	ip, ip, #90112	; 0x16000
   10b0c:	ldr	pc, [ip, #1396]!	; 0x574

00010b10 <fputs@plt>:
   10b10:	add	ip, pc, #0, 12
   10b14:	add	ip, ip, #90112	; 0x16000
   10b18:	ldr	pc, [ip, #1388]!	; 0x56c

00010b1c <strncmp@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #90112	; 0x16000
   10b24:	ldr	pc, [ip, #1380]!	; 0x564

00010b28 <abort@plt>:
   10b28:	add	ip, pc, #0, 12
   10b2c:	add	ip, ip, #90112	; 0x16000
   10b30:	ldr	pc, [ip, #1372]!	; 0x55c

00010b34 <getc@plt>:
   10b34:	add	ip, pc, #0, 12
   10b38:	add	ip, ip, #90112	; 0x16000
   10b3c:	ldr	pc, [ip, #1364]!	; 0x554

00010b40 <__assert_fail@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #90112	; 0x16000
   10b48:	ldr	pc, [ip, #1356]!	; 0x54c

Disassembly of section .text:

00010b50 <error@@Base-0x1ab8>:
   10b50:	push	{r0, r1, r2, lr}
   10b54:	mov	r4, r1
   10b58:	ldr	r3, [pc, #96]	; 10bc0 <__assert_fail@plt+0x80>
   10b5c:	str	r0, [sp, #4]
   10b60:	add	r0, sp, #4
   10b64:	ldr	r2, [pc, #88]	; 10bc4 <__assert_fail@plt+0x84>
   10b68:	bl	12728 <error@@Base+0x120>
   10b6c:	ldr	r3, [sp, #4]
   10b70:	sub	r3, r3, #2
   10b74:	cmp	r3, #1
   10b78:	bls	10b84 <__assert_fail@plt+0x44>
   10b7c:	ldr	r0, [pc, #68]	; 10bc8 <__assert_fail@plt+0x88>
   10b80:	bl	12608 <error@@Base>
   10b84:	ldr	r3, [pc, #64]	; 10bcc <__assert_fail@plt+0x8c>
   10b88:	ldr	r0, [r3]
   10b8c:	bl	114f8 <__assert_fail@plt+0x9b8>
   10b90:	mov	r0, r4
   10b94:	bl	10d3c <__assert_fail@plt+0x1fc>
   10b98:	bl	10fe0 <__assert_fail@plt+0x4a0>
   10b9c:	bl	110b4 <__assert_fail@plt+0x574>
   10ba0:	bl	11280 <__assert_fail@plt+0x740>
   10ba4:	ldr	r3, [sp, #4]
   10ba8:	ldr	r0, [pc, #32]	; 10bd0 <__assert_fail@plt+0x90>
   10bac:	cmp	r3, #3
   10bb0:	ldreq	r1, [r4, #8]
   10bb4:	movne	r1, #0
   10bb8:	bl	11c04 <__assert_fail@plt+0x10c4>
   10bbc:	bl	125b0 <__assert_fail@plt+0x1a70>
   10bc0:	strheq	r7, [r2], -r0
   10bc4:	andeq	r3, r1, lr, lsl #1
   10bc8:	andeq	r3, r1, fp, asr #1
   10bcc:	andeq	r9, r2, r8, lsr #2
   10bd0:	ldrdeq	fp, [r2], -r4
   10bd4:	mov	fp, #0
   10bd8:	mov	lr, #0
   10bdc:	pop	{r1}		; (ldr r1, [sp], #4)
   10be0:	mov	r2, sp
   10be4:	push	{r2}		; (str r2, [sp, #-4]!)
   10be8:	push	{r0}		; (str r0, [sp, #-4]!)
   10bec:	ldr	ip, [pc, #16]	; 10c04 <__assert_fail@plt+0xc4>
   10bf0:	push	{ip}		; (str ip, [sp, #-4]!)
   10bf4:	ldr	r0, [pc, #12]	; 10c08 <__assert_fail@plt+0xc8>
   10bf8:	ldr	r3, [pc, #12]	; 10c0c <__assert_fail@plt+0xcc>
   10bfc:	bl	10a5c <__libc_start_main@plt>
   10c00:	bl	10b28 <abort@plt>
   10c04:	andeq	r3, r1, ip, lsr r0
   10c08:	andeq	r0, r1, r0, asr fp
   10c0c:	ldrdeq	r2, [r1], -ip
   10c10:	ldr	r3, [pc, #20]	; 10c2c <__assert_fail@plt+0xec>
   10c14:	ldr	r2, [pc, #20]	; 10c30 <__assert_fail@plt+0xf0>
   10c18:	add	r3, pc, r3
   10c1c:	ldr	r2, [r3, r2]
   10c20:	cmp	r2, #0
   10c24:	bxeq	lr
   10c28:	b	10a74 <__gmon_start__@plt>
   10c2c:	andeq	r6, r1, r0, ror #7
   10c30:	muleq	r0, r8, r0
   10c34:	ldr	r0, [pc, #24]	; 10c54 <__assert_fail@plt+0x114>
   10c38:	ldr	r3, [pc, #24]	; 10c58 <__assert_fail@plt+0x118>
   10c3c:	cmp	r3, r0
   10c40:	bxeq	lr
   10c44:	ldr	r3, [pc, #16]	; 10c5c <__assert_fail@plt+0x11c>
   10c48:	cmp	r3, #0
   10c4c:	bxeq	lr
   10c50:	bx	r3
   10c54:	ldrdeq	r7, [r2], -ip
   10c58:	ldrdeq	r7, [r2], -ip
   10c5c:	andeq	r0, r0, r0
   10c60:	ldr	r0, [pc, #36]	; 10c8c <__assert_fail@plt+0x14c>
   10c64:	ldr	r1, [pc, #36]	; 10c90 <__assert_fail@plt+0x150>
   10c68:	sub	r1, r1, r0
   10c6c:	asr	r1, r1, #2
   10c70:	add	r1, r1, r1, lsr #31
   10c74:	asrs	r1, r1, #1
   10c78:	bxeq	lr
   10c7c:	ldr	r3, [pc, #16]	; 10c94 <__assert_fail@plt+0x154>
   10c80:	cmp	r3, #0
   10c84:	bxeq	lr
   10c88:	bx	r3
   10c8c:	ldrdeq	r7, [r2], -ip
   10c90:	ldrdeq	r7, [r2], -ip
   10c94:	andeq	r0, r0, r0
   10c98:	push	{r4, lr}
   10c9c:	ldr	r4, [pc, #24]	; 10cbc <__assert_fail@plt+0x17c>
   10ca0:	ldrb	r3, [r4]
   10ca4:	cmp	r3, #0
   10ca8:	popne	{r4, pc}
   10cac:	bl	10c34 <__assert_fail@plt+0xf4>
   10cb0:	mov	r3, #1
   10cb4:	strb	r3, [r4]
   10cb8:	pop	{r4, pc}
   10cbc:	strdeq	r7, [r2], -r0
   10cc0:	b	10c60 <__assert_fail@plt+0x120>
   10cc4:	push	{r4, r5, r6, r7, r8, lr}
   10cc8:	mov	r5, r0
   10ccc:	mov	r6, r1
   10cd0:	mov	r1, #4
   10cd4:	ldr	r4, [pc, #88]	; 10d34 <__assert_fail@plt+0x1f4>
   10cd8:	add	r4, r4, r0, lsl #4
   10cdc:	ldr	r0, [r4, #12]
   10ce0:	add	r0, r0, #1
   10ce4:	bl	12644 <error@@Base+0x3c>
   10ce8:	ldr	lr, [pc, #72]	; 10d38 <__assert_fail@plt+0x1f8>
   10cec:	mov	r3, #0
   10cf0:	mov	r2, r3
   10cf4:	ldr	ip, [r4, #12]
   10cf8:	rsb	r4, r5, #1
   10cfc:	cmp	ip, r2
   10d00:	bgt	10d0c <__assert_fail@plt+0x1cc>
   10d04:	str	r3, [r6]
   10d08:	pop	{r4, r5, r6, r7, r8, pc}
   10d0c:	ldr	r1, [lr, r5, lsl #2]
   10d10:	add	r7, r1, r2, lsl #3
   10d14:	ldr	r1, [r1, r2, lsl #3]
   10d18:	add	r2, r2, #1
   10d1c:	add	r1, r1, r4
   10d20:	ldrb	r1, [r1, #12]
   10d24:	cmp	r1, #0
   10d28:	strne	r7, [r0, r3, lsl #2]
   10d2c:	addne	r3, r3, #1
   10d30:	b	10cfc <__assert_fail@plt+0x1bc>
   10d34:	andeq	r9, r2, ip, lsr #2
   10d38:			; <UNDEFINED> instruction: 0x0002f3b4
   10d3c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d40:	mov	r4, #0
   10d44:	ldr	r6, [pc, #304]	; 10e7c <__assert_fail@plt+0x33c>
   10d48:	str	r0, [sp]
   10d4c:	ldr	r7, [pc, #300]	; 10e80 <__assert_fail@plt+0x340>
   10d50:	ldr	sl, [pc, #300]	; 10e84 <__assert_fail@plt+0x344>
   10d54:	ldr	r8, [pc, #300]	; 10e88 <__assert_fail@plt+0x348>
   10d58:	ldr	r3, [pc, #300]	; 10e8c <__assert_fail@plt+0x34c>
   10d5c:	ldr	r2, [pc, #288]	; 10e84 <__assert_fail@plt+0x344>
   10d60:	add	r5, r3, r4, lsl #4
   10d64:	ldr	r3, [sp]
   10d68:	mov	r0, r5
   10d6c:	ldr	r1, [r3, r4, lsl #2]
   10d70:	bl	1295c <error@@Base+0x354>
   10d74:	cmp	r4, #0
   10d78:	bne	10d98 <__assert_fail@plt+0x258>
   10d7c:	ldrb	r3, [sl, #11]
   10d80:	cmp	r3, #0
   10d84:	beq	10d98 <__assert_fail@plt+0x258>
   10d88:	ldr	r0, [pc, #256]	; 10e90 <__assert_fail@plt+0x350>
   10d8c:	bl	12608 <error@@Base>
   10d90:	mov	r4, #1
   10d94:	b	10d58 <__assert_fail@plt+0x218>
   10d98:	mov	r1, r5
   10d9c:	mov	r0, r6
   10da0:	bl	12000 <__assert_fail@plt+0x14c0>
   10da4:	ldr	r0, [r6, #12]
   10da8:	mov	r1, #8
   10dac:	mov	r9, #0
   10db0:	mov	fp, #1
   10db4:	add	r0, r0, #1
   10db8:	bl	12644 <error@@Base+0x3c>
   10dbc:	ldr	r5, [r6]
   10dc0:	str	r0, [r7], #4
   10dc4:	cmp	r5, #0
   10dc8:	bne	10e04 <__assert_fail@plt+0x2c4>
   10dcc:	cmp	r4, #1
   10dd0:	add	r6, r6, #16
   10dd4:	bne	10d90 <__assert_fail@plt+0x250>
   10dd8:	ldr	r6, [pc, #180]	; 10e94 <__assert_fail@plt+0x354>
   10ddc:	mov	r0, r5
   10de0:	mov	r1, r6
   10de4:	bl	10cc4 <__assert_fail@plt+0x184>
   10de8:	ldr	r3, [pc, #168]	; 10e98 <__assert_fail@plt+0x358>
   10dec:	str	r0, [r3]
   10df0:	ldr	r3, [r6]
   10df4:	cmp	r3, #65536	; 0x10000
   10df8:	blt	10e60 <__assert_fail@plt+0x320>
   10dfc:	ldr	r0, [pc, #152]	; 10e9c <__assert_fail@plt+0x35c>
   10e00:	b	10d8c <__assert_fail@plt+0x24c>
   10e04:	mov	r0, r8
   10e08:	ldr	r1, [r5, #8]
   10e0c:	bl	11dc4 <__assert_fail@plt+0x1284>
   10e10:	subs	r3, r0, #0
   10e14:	bne	10e44 <__assert_fail@plt+0x304>
   10e18:	mov	r1, #16
   10e1c:	mov	r0, #1
   10e20:	bl	12644 <error@@Base+0x3c>
   10e24:	ldr	r1, [r5, #8]
   10e28:	mov	r3, r0
   10e2c:	mov	r0, r8
   10e30:	str	r3, [sp, #4]
   10e34:	str	r1, [r3, #8]
   10e38:	mov	r1, r3
   10e3c:	bl	11e08 <__assert_fail@plt+0x12c8>
   10e40:	ldr	r3, [sp, #4]
   10e44:	add	r1, r3, r4
   10e48:	strb	fp, [r1, #12]
   10e4c:	ldr	r1, [r7, #-4]
   10e50:	ldr	r5, [r5, #4]
   10e54:	str	r3, [r1, r9]
   10e58:	add	r9, r9, #8
   10e5c:	b	10dc4 <__assert_fail@plt+0x284>
   10e60:	ldr	r1, [pc, #56]	; 10ea0 <__assert_fail@plt+0x360>
   10e64:	mov	r0, r4
   10e68:	bl	10cc4 <__assert_fail@plt+0x184>
   10e6c:	ldr	r3, [pc, #48]	; 10ea4 <__assert_fail@plt+0x364>
   10e70:	str	r0, [r3]
   10e74:	add	sp, sp, #12
   10e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e7c:	andeq	r9, r2, ip, lsr #2
   10e80:			; <UNDEFINED> instruction: 0x0002f3b4
   10e84:	andeq	r7, r2, r4, lsr #1
   10e88:	andeq	r9, r2, ip, asr r1
   10e8c:	andeq	r9, r2, r0, lsl #2
   10e90:	andeq	r3, r1, ip, asr r0
   10e94:	andeq	pc, r2, ip, lsr #7
   10e98:	andeq	pc, r2, r8, lsr #7
   10e9c:	andeq	r3, r1, r6, ror r0
   10ea0:	andeq	r9, r2, r4, lsr #2
   10ea4:	andeq	r9, r2, r0, lsr #2
   10ea8:	cmp	r1, #0
   10eac:	beq	10f14 <__assert_fail@plt+0x3d4>
   10eb0:	mov	r3, r0
   10eb4:	ldr	r0, [r1, #8]
   10eb8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ebc:	rsb	ip, r0, #0
   10ec0:	cmp	ip, r3
   10ec4:	ldrlt	lr, [r1, #12]
   10ec8:	sublt	ip, r3, #1
   10ecc:	movge	r0, #0
   10ed0:	addlt	r0, r0, ip
   10ed4:	biclt	r0, r0, #1
   10ed8:	ldrhlt	r0, [lr, r0]
   10edc:	strlt	ip, [r2]
   10ee0:	ldr	ip, [r1, #8]
   10ee4:	cmp	ip, r3
   10ee8:	pople	{pc}		; (ldrle pc, [sp], #4)
   10eec:	add	r3, r3, #1
   10ef0:	ldr	r1, [r1, #12]
   10ef4:	add	ip, ip, r3
   10ef8:	bic	ip, ip, #1
   10efc:	ldrh	r1, [r1, ip]
   10f00:	add	r1, r1, #1
   10f04:	cmp	r0, r1
   10f08:	movle	r0, r1
   10f0c:	strle	r3, [r2]
   10f10:	pop	{pc}		; (ldr pc, [sp], #4)
   10f14:	mov	r0, r1
   10f18:	bx	lr
   10f1c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f20:	mov	r5, r1
   10f24:	add	r2, sp, #4
   10f28:	mov	r4, r0
   10f2c:	ldr	r1, [r1]
   10f30:	bl	10ea8 <__assert_fail@plt+0x368>
   10f34:	ldr	r2, [pc, #140]	; 10fc8 <__assert_fail@plt+0x488>
   10f38:	add	r3, r4, r0
   10f3c:	ldr	r7, [r2]
   10f40:	ldr	r2, [pc, #132]	; 10fcc <__assert_fail@plt+0x48c>
   10f44:	ldr	r1, [r2]
   10f48:	ldr	r2, [pc, #128]	; 10fd0 <__assert_fail@plt+0x490>
   10f4c:	ldr	r6, [r2]
   10f50:	ldr	r2, [pc, #124]	; 10fd4 <__assert_fail@plt+0x494>
   10f54:	ldr	lr, [r2]
   10f58:	cmp	r7, r0
   10f5c:	ble	10fa8 <__assert_fail@plt+0x468>
   10f60:	cmp	r1, r3
   10f64:	ble	10fb4 <__assert_fail@plt+0x474>
   10f68:	ldr	ip, [r6, r0, lsl #2]
   10f6c:	ldr	r2, [lr, r3, lsl #2]
   10f70:	ldr	ip, [ip]
   10f74:	ldr	r2, [r2]
   10f78:	cmp	ip, r2
   10f7c:	beq	10f9c <__assert_fail@plt+0x45c>
   10f80:	ldr	r3, [r5, #8]
   10f84:	add	r4, r4, r3
   10f88:	ldr	r3, [r5, #12]
   10f8c:	bic	r4, r4, #1
   10f90:	strh	r0, [r3, r4]
   10f94:	add	sp, sp, #12
   10f98:	pop	{r4, r5, r6, r7, pc}
   10f9c:	add	r0, r0, #1
   10fa0:	add	r3, r3, #1
   10fa4:	b	10f58 <__assert_fail@plt+0x418>
   10fa8:	ldreq	ip, [pc, #40]	; 10fd8 <__assert_fail@plt+0x498>
   10fac:	addeq	r2, r4, #1
   10fb0:	streq	r2, [ip]
   10fb4:	cmp	r1, r3
   10fb8:	ldreq	r2, [pc, #28]	; 10fdc <__assert_fail@plt+0x49c>
   10fbc:	subeq	r3, r4, #1
   10fc0:	streq	r3, [r2]
   10fc4:	b	10f80 <__assert_fail@plt+0x440>
   10fc8:	andeq	pc, r2, ip, lsr #7
   10fcc:	andeq	r9, r2, r4, lsr #2
   10fd0:	andeq	pc, r2, r8, lsr #7
   10fd4:	andeq	r9, r2, r0, lsr #2
   10fd8:			; <UNDEFINED> instruction: 0x0002f3b0
   10fdc:	andeq	pc, r2, r4, lsr #7
   10fe0:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe4:	mvn	r4, #0
   10fe8:	ldr	r6, [pc, #176]	; 110a0 <__assert_fail@plt+0x560>
   10fec:	ldr	r5, [pc, #176]	; 110a4 <__assert_fail@plt+0x564>
   10ff0:	ldr	r7, [pc, #176]	; 110a8 <__assert_fail@plt+0x568>
   10ff4:	ldr	r3, [r6]
   10ff8:	ldr	r8, [pc, #172]	; 110ac <__assert_fail@plt+0x56c>
   10ffc:	ldr	fp, [pc, #172]	; 110b0 <__assert_fail@plt+0x570>
   11000:	rsb	r3, r3, #0
   11004:	str	r3, [r5]
   11008:	ldr	r3, [r7]
   1100c:	str	r3, [r8]
   11010:	ldr	r2, [r6]
   11014:	ldr	r3, [r7]
   11018:	sub	r3, r3, r2
   1101c:	ldr	r2, [r5]
   11020:	cmp	r3, r2
   11024:	bge	11030 <__assert_fail@plt+0x4f0>
   11028:	add	sp, sp, #4
   1102c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11030:	mov	r1, #16
   11034:	mov	r0, #1
   11038:	bl	12644 <error@@Base+0x3c>
   1103c:	mov	sl, r0
   11040:	add	r9, r4, #1
   11044:	mov	r1, #2
   11048:	add	r0, r4, r1
   1104c:	str	r9, [sl, #8]
   11050:	rsb	r4, r9, #0
   11054:	bl	12644 <error@@Base+0x3c>
   11058:	mov	r1, sl
   1105c:	str	r0, [sl, #12]
   11060:	mov	r0, fp
   11064:	bl	113a4 <__assert_fail@plt+0x864>
   11068:	ldr	r3, [r5]
   1106c:	cmp	r3, r4
   11070:	bgt	1108c <__assert_fail@plt+0x54c>
   11074:	ldr	r3, [r8]
   11078:	cmp	r3, r4
   1107c:	blt	1108c <__assert_fail@plt+0x54c>
   11080:	mov	r1, sl
   11084:	mov	r0, r4
   11088:	bl	10f1c <__assert_fail@plt+0x3dc>
   1108c:	add	r4, r4, #2
   11090:	cmp	r9, r4
   11094:	bge	11068 <__assert_fail@plt+0x528>
   11098:	mov	r4, r9
   1109c:	b	11010 <__assert_fail@plt+0x4d0>
   110a0:	andeq	pc, r2, ip, lsr #7
   110a4:			; <UNDEFINED> instruction: 0x0002f3b0
   110a8:	andeq	r9, r2, r4, lsr #2
   110ac:	andeq	pc, r2, r4, lsr #7
   110b0:	andeq	r9, r2, ip, asr #2
   110b4:	ldr	r3, [pc, #116]	; 11130 <__assert_fail@plt+0x5f0>
   110b8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   110bc:	mov	r7, #1
   110c0:	ldr	r6, [pc, #108]	; 11134 <__assert_fail@plt+0x5f4>
   110c4:	ldr	r0, [r3]
   110c8:	ldr	r3, [pc, #104]	; 11138 <__assert_fail@plt+0x5f8>
   110cc:	ldr	r3, [r3]
   110d0:	sub	r0, r0, r3
   110d4:	ldr	r3, [pc, #96]	; 1113c <__assert_fail@plt+0x5fc>
   110d8:	ldr	r4, [r3, #4]
   110dc:	cmp	r4, #0
   110e0:	bne	110ec <__assert_fail@plt+0x5ac>
   110e4:	add	sp, sp, #12
   110e8:	pop	{r4, r5, r6, r7, pc}
   110ec:	ldr	r1, [r4]
   110f0:	ldr	r3, [r4, #8]
   110f4:	ldr	r2, [r4, #12]
   110f8:	add	r3, r0, r3
   110fc:	bic	r3, r3, #1
   11100:	ldrh	r5, [r2, r3]
   11104:	add	r2, sp, #4
   11108:	bl	10ea8 <__assert_fail@plt+0x368>
   1110c:	ldr	r3, [r6]
   11110:	cmp	r5, r0
   11114:	ldrle	r4, [r4]
   11118:	ldrle	r0, [sp, #4]
   1111c:	ble	110dc <__assert_fail@plt+0x59c>
   11120:	sub	r5, r5, #1
   11124:	ldr	r2, [r3, r5, lsl #2]
   11128:	strb	r7, [r2, #4]
   1112c:	b	11110 <__assert_fail@plt+0x5d0>
   11130:	andeq	r9, r2, r4, lsr #2
   11134:	andeq	pc, r2, r8, lsr #7
   11138:	andeq	pc, r2, ip, lsr #7
   1113c:	andeq	r9, r2, ip, asr #2
   11140:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11144:	mov	r7, r0
   11148:	mov	r6, #0
   1114c:	add	r7, r7, #4096	; 0x1000
   11150:	mov	r9, r1
   11154:	mov	r8, r2
   11158:	ldr	sl, [pc, #160]	; 11200 <__assert_fail@plt+0x6c0>
   1115c:	bl	11e90 <__assert_fail@plt+0x1350>
   11160:	ldr	r3, [r7, #3956]	; 0xf74
   11164:	cmp	r3, r6
   11168:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   1116c:	mov	r0, sl
   11170:	ldr	r3, [r7, #3952]	; 0xf70
   11174:	ldr	r3, [r3, r6, lsl #2]
   11178:	ldrd	r4, [r3, #12]
   1117c:	mov	r2, r5
   11180:	mov	r1, r4
   11184:	bl	1197c <__assert_fail@plt+0xe3c>
   11188:	mov	r2, r5
   1118c:	mov	r1, r4
   11190:	mov	r0, r9
   11194:	bl	1197c <__assert_fail@plt+0xe3c>
   11198:	ldr	r3, [r7, #3952]	; 0xf70
   1119c:	ldr	r3, [r3, r6, lsl #2]
   111a0:	ldr	r0, [r3, #8]
   111a4:	bl	10aa4 <strlen@plt>
   111a8:	add	r0, r9, r0, lsl #3
   111ac:	mov	r2, r5
   111b0:	mov	r1, r4
   111b4:	bl	1197c <__assert_fail@plt+0xe3c>
   111b8:	cmp	r8, #0
   111bc:	beq	111f8 <__assert_fail@plt+0x6b8>
   111c0:	sub	r5, r4, r5
   111c4:	mov	r0, r8
   111c8:	clz	r5, r5
   111cc:	mov	r1, #1
   111d0:	lsr	r5, r5, #5
   111d4:	mov	r2, r5
   111d8:	bl	1197c <__assert_fail@plt+0xe3c>
   111dc:	cmp	r4, #10
   111e0:	mov	r2, r5
   111e4:	lslle	r0, r4, #3
   111e8:	movgt	r0, #88	; 0x58
   111ec:	mov	r1, #1
   111f0:	add	r0, r8, r0
   111f4:	bl	1197c <__assert_fail@plt+0xe3c>
   111f8:	add	r6, r6, #1
   111fc:	b	11160 <__assert_fail@plt+0x620>
   11200:	ldrdeq	fp, [r2], -r4
   11204:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11208:	mov	r5, #8
   1120c:	ldr	r8, [pc, #96]	; 11274 <__assert_fail@plt+0x734>
   11210:	ldr	sl, [pc, #96]	; 11278 <__assert_fail@plt+0x738>
   11214:	mov	r9, r8
   11218:	ldr	r3, [r8, #12]
   1121c:	sub	r4, r5, #8
   11220:	cmp	r3, r4
   11224:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   11228:	mov	r6, #1
   1122c:	ldr	r7, [pc, #72]	; 1127c <__assert_fail@plt+0x73c>
   11230:	ldr	r3, [r9, #12]
   11234:	cmp	r3, r4
   11238:	ble	1126c <__assert_fail@plt+0x72c>
   1123c:	ldr	r3, [sl]
   11240:	add	r0, r7, #928	; 0x3a0
   11244:	mov	r1, #1
   11248:	add	r7, r7, #8
   1124c:	add	r3, r3, r4, lsl #3
   11250:	add	r4, r4, #1
   11254:	ldrb	r3, [r3, #4]
   11258:	and	r6, r6, r3
   1125c:	eor	r2, r6, #1
   11260:	bl	1197c <__assert_fail@plt+0xe3c>
   11264:	cmp	r4, r5
   11268:	bne	11230 <__assert_fail@plt+0x6f0>
   1126c:	add	r5, r5, #1
   11270:	b	11218 <__assert_fail@plt+0x6d8>
   11274:	andeq	r9, r2, ip, lsr #2
   11278:			; <UNDEFINED> instruction: 0x0002f3b4
   1127c:	ldrdeq	fp, [r2], -r4
   11280:	push	{r4, r5, r6, r7, r8, lr}
   11284:	mov	r4, #0
   11288:	ldr	r7, [pc, #136]	; 11318 <__assert_fail@plt+0x7d8>
   1128c:	ldr	r6, [pc, #136]	; 1131c <__assert_fail@plt+0x7dc>
   11290:	ldr	r3, [r7, #12]
   11294:	cmp	r3, r4
   11298:	bgt	112c4 <__assert_fail@plt+0x784>
   1129c:	ldr	r1, [pc, #124]	; 11320 <__assert_fail@plt+0x7e0>
   112a0:	mov	r2, #0
   112a4:	add	r0, r1, #984	; 0x3d8
   112a8:	bl	11140 <__assert_fail@plt+0x600>
   112ac:	ldr	r2, [pc, #112]	; 11324 <__assert_fail@plt+0x7e4>
   112b0:	ldr	r0, [pc, #112]	; 11328 <__assert_fail@plt+0x7e8>
   112b4:	sub	r1, r2, #408	; 0x198
   112b8:	bl	11140 <__assert_fail@plt+0x600>
   112bc:	pop	{r4, r5, r6, r7, r8, lr}
   112c0:	b	11204 <__assert_fail@plt+0x6c4>
   112c4:	ldr	r3, [r6]
   112c8:	lsl	r5, r4, #3
   112cc:	ldr	r3, [r3, r4, lsl #3]
   112d0:	ldr	r0, [r3, #8]
   112d4:	bl	115a4 <__assert_fail@plt+0xa64>
   112d8:	ldr	r2, [r6]
   112dc:	cmp	r0, #0
   112e0:	ldr	lr, [pc, #68]	; 1132c <__assert_fail@plt+0x7ec>
   112e4:	ldr	ip, [pc, #60]	; 11328 <__assert_fail@plt+0x7e8>
   112e8:	add	r5, r2, r5
   112ec:	ldrb	r3, [r5, #4]
   112f0:	movne	r0, lr
   112f4:	ldr	r1, [r2, r4, lsl #3]
   112f8:	mov	r2, #1
   112fc:	add	r4, r4, #1
   11300:	moveq	r0, ip
   11304:	clz	r3, r3
   11308:	lsr	r3, r3, #5
   1130c:	ldr	r1, [r1, #8]
   11310:	bl	11994 <__assert_fail@plt+0xe54>
   11314:	b	11290 <__assert_fail@plt+0x750>
   11318:	andeq	r9, r2, ip, lsr #2
   1131c:			; <UNDEFINED> instruction: 0x0002f3b4
   11320:	ldrdeq	fp, [r2], -ip
   11324:	andeq	fp, r2, ip, lsl #8
   11328:	andeq	sp, r2, ip, lsr #8
   1132c:			; <UNDEFINED> instruction: 0x0002b4b4
   11330:	cmp	r1, #0
   11334:	push	{r4, lr}
   11338:	mov	r4, r0
   1133c:	stm	r2, {r1, r3}
   11340:	strne	r2, [r1, #4]
   11344:	streq	r2, [r0]
   11348:	cmp	r3, #0
   1134c:	streq	r2, [r0, #4]
   11350:	ldr	r0, [r0, #8]
   11354:	strne	r2, [r3]
   11358:	cmp	r0, #0
   1135c:	beq	1136c <__assert_fail@plt+0x82c>
   11360:	bl	109cc <free@plt>
   11364:	mov	r3, #0
   11368:	str	r3, [r4, #8]
   1136c:	ldr	r3, [r4, #12]
   11370:	add	r3, r3, #1
   11374:	str	r3, [r4, #12]
   11378:	pop	{r4, pc}
   1137c:	mov	r3, #0
   11380:	str	r3, [r0]
   11384:	str	r3, [r0, #4]
   11388:	str	r3, [r0, #8]
   1138c:	str	r3, [r0, #12]
   11390:	bx	lr
   11394:	mov	r2, r1
   11398:	mov	r1, #0
   1139c:	ldr	r3, [r0]
   113a0:	b	11330 <__assert_fail@plt+0x7f0>
   113a4:	mov	r2, r1
   113a8:	mov	r3, #0
   113ac:	ldr	r1, [r0, #4]
   113b0:	b	11330 <__assert_fail@plt+0x7f0>
   113b4:	mov	r3, r2
   113b8:	mov	r2, r1
   113bc:	ldr	r1, [r3]
   113c0:	b	11330 <__assert_fail@plt+0x7f0>
   113c4:	ldr	r3, [r1, #4]
   113c8:	b	11330 <__assert_fail@plt+0x7f0>
   113cc:	ldr	r3, [r1]
   113d0:	push	{r4, r5, r6, lr}
   113d4:	mov	r4, r0
   113d8:	mov	r5, #0
   113dc:	ldr	r2, [r1, #4]
   113e0:	cmp	r3, #0
   113e4:	strne	r2, [r3, #4]
   113e8:	streq	r2, [r0]
   113ec:	ldr	r2, [r1, #4]
   113f0:	cmp	r2, #0
   113f4:	streq	r3, [r0, #4]
   113f8:	ldr	r0, [r0, #8]
   113fc:	strne	r3, [r2]
   11400:	str	r5, [r1]
   11404:	str	r5, [r1, #4]
   11408:	cmp	r0, r5
   1140c:	beq	11418 <__assert_fail@plt+0x8d8>
   11410:	bl	109cc <free@plt>
   11414:	str	r5, [r4, #8]
   11418:	ldr	r3, [r4, #12]
   1141c:	sub	r3, r3, #1
   11420:	str	r3, [r4, #12]
   11424:	pop	{r4, r5, r6, pc}
   11428:	ldr	r3, [r0, #8]
   1142c:	cmp	r3, #0
   11430:	bxne	lr
   11434:	ldr	r3, [r0, #12]
   11438:	cmp	r3, #0
   1143c:	bxeq	lr
   11440:	push	{r4, lr}
   11444:	mov	r1, #4
   11448:	mov	r4, r0
   1144c:	mov	r0, r3
   11450:	bl	12644 <error@@Base+0x3c>
   11454:	ldr	r3, [r4]
   11458:	str	r0, [r4, #8]
   1145c:	sub	r0, r0, #4
   11460:	cmp	r3, #0
   11464:	popeq	{r4, pc}
   11468:	str	r3, [r0, #4]!
   1146c:	ldr	r3, [r3, #4]
   11470:	b	11460 <__assert_fail@plt+0x920>
   11474:	push	{r4, r5, r6, lr}
   11478:	mov	r5, r0
   1147c:	mov	r6, r1
   11480:	ldr	r4, [r5]
   11484:	cmp	r4, #0
   11488:	popeq	{r4, r5, r6, pc}
   1148c:	mov	r0, r5
   11490:	mov	r1, r4
   11494:	bl	113cc <__assert_fail@plt+0x88c>
   11498:	mov	r0, r4
   1149c:	blx	r6
   114a0:	b	11480 <__assert_fail@plt+0x940>
   114a4:	push	{r4, lr}
   114a8:	mov	r1, r0
   114ac:	mov	r4, r0
   114b0:	ldr	r0, [pc, #56]	; 114f0 <__assert_fail@plt+0x9b0>
   114b4:	bl	11dc4 <__assert_fail@plt+0x1284>
   114b8:	cmp	r0, #0
   114bc:	beq	114d0 <__assert_fail@plt+0x990>
   114c0:	mov	r1, r4
   114c4:	ldr	r0, [pc, #40]	; 114f4 <__assert_fail@plt+0x9b4>
   114c8:	pop	{r4, lr}
   114cc:	b	128f0 <error@@Base+0x2e8>
   114d0:	mov	r1, #12
   114d4:	mov	r0, #1
   114d8:	bl	12644 <error@@Base+0x3c>
   114dc:	mov	r1, r0
   114e0:	ldr	r0, [pc, #8]	; 114f0 <__assert_fail@plt+0x9b0>
   114e4:	str	r4, [r1, #8]
   114e8:	pop	{r4, lr}
   114ec:	b	11e08 <__assert_fail@plt+0x12c8>
   114f0:	andeq	r7, r2, r8, lsl r1
   114f4:	muleq	r1, ip, r2
   114f8:	push	{r4, r5, r6, lr}
   114fc:	ldr	r4, [pc, #140]	; 11590 <__assert_fail@plt+0xa50>
   11500:	ldrb	r3, [r4]
   11504:	cmp	r3, #0
   11508:	beq	11514 <__assert_fail@plt+0x9d4>
   1150c:	ldr	r0, [pc, #128]	; 11594 <__assert_fail@plt+0xa54>
   11510:	bl	12608 <error@@Base>
   11514:	cmp	r0, #0
   11518:	mov	r1, r0
   1151c:	ldreq	r6, [pc, #116]	; 11598 <__assert_fail@plt+0xa58>
   11520:	moveq	r5, #111	; 0x6f
   11524:	beq	1157c <__assert_fail@plt+0xa3c>
   11528:	add	r0, r4, #4
   1152c:	ldr	r2, [pc, #104]	; 1159c <__assert_fail@plt+0xa5c>
   11530:	bl	1295c <error@@Base+0x354>
   11534:	add	r1, r4, #4
   11538:	add	r0, r4, #20
   1153c:	bl	12000 <__assert_fail@plt+0x14c0>
   11540:	ldr	r1, [pc, #88]	; 115a0 <__assert_fail@plt+0xa60>
   11544:	add	r0, r4, #4
   11548:	bl	11474 <__assert_fail@plt+0x934>
   1154c:	ldr	r5, [r4, #20]
   11550:	cmp	r5, #0
   11554:	bne	11564 <__assert_fail@plt+0xa24>
   11558:	mov	r3, #1
   1155c:	strb	r3, [r4]
   11560:	pop	{r4, r5, r6, pc}
   11564:	ldr	r0, [r5, #8]
   11568:	bl	114a4 <__assert_fail@plt+0x964>
   1156c:	ldr	r5, [r5, #4]
   11570:	b	11550 <__assert_fail@plt+0xa10>
   11574:	ldr	r0, [r6], #4
   11578:	bl	114a4 <__assert_fail@plt+0x964>
   1157c:	sub	r5, r5, #1
   11580:	uxth	r5, r5
   11584:	cmp	r5, #0
   11588:	bne	11574 <__assert_fail@plt+0xa34>
   1158c:	b	11558 <__assert_fail@plt+0xa18>
   11590:	strdeq	r7, [r2], -r4
   11594:	andeq	r3, r1, pc, lsr #5
   11598:	andeq	r3, r1, r4, ror #1
   1159c:	andeq	r7, r2, r8, asr #1
   115a0:	andeq	r0, r1, ip, asr #19
   115a4:	ldr	r3, [pc, #44]	; 115d8 <__assert_fail@plt+0xa98>
   115a8:	push	{r4, lr}
   115ac:	ldrb	r3, [r3]
   115b0:	cmp	r3, #0
   115b4:	bne	115c0 <__assert_fail@plt+0xa80>
   115b8:	ldr	r0, [pc, #28]	; 115dc <__assert_fail@plt+0xa9c>
   115bc:	bl	12608 <error@@Base>
   115c0:	mov	r1, r0
   115c4:	ldr	r0, [pc, #20]	; 115e0 <__assert_fail@plt+0xaa0>
   115c8:	bl	11dc4 <__assert_fail@plt+0x1284>
   115cc:	adds	r0, r0, #0
   115d0:	movne	r0, #1
   115d4:	pop	{r4, pc}
   115d8:	strdeq	r7, [r2], -r4
   115dc:	andeq	r3, r1, sp, asr #5
   115e0:	andeq	r7, r2, r8, lsl r1
   115e4:	andeq	r0, r0, r0
   115e8:	mov	r2, r0
   115ec:	push	{r4, lr}
   115f0:	mov	r1, #99	; 0x63
   115f4:	ldr	r0, [pc, #12]	; 11608 <__assert_fail@plt+0xac8>
   115f8:	bl	109e4 <fgets@plt>
   115fc:	adds	r0, r0, #0
   11600:	movne	r0, #1
   11604:	pop	{r4, pc}
   11608:	muleq	r2, r0, r0
   1160c:	push	{r4, lr}
   11610:	mov	r4, r1
   11614:	bl	115e8 <__assert_fail@plt+0xaa8>
   11618:	cmp	r0, #0
   1161c:	popeq	{r4, pc}
   11620:	mov	r2, r4
   11624:	ldr	r1, [pc, #20]	; 11640 <__assert_fail@plt+0xb00>
   11628:	ldr	r0, [pc, #20]	; 11644 <__assert_fail@plt+0xb04>
   1162c:	bl	10abc <__isoc99_sscanf@plt>
   11630:	sub	r0, r0, #1
   11634:	clz	r0, r0
   11638:	lsr	r0, r0, #5
   1163c:	pop	{r4, pc}
   11640:	strdeq	r3, [r1], -r2
   11644:	muleq	r2, r0, r0
   11648:	ldr	r2, [r1]
   1164c:	cmp	r2, #0
   11650:	bne	11660 <__assert_fail@plt+0xb20>
   11654:	mov	r1, r0
   11658:	ldr	r0, [pc, #56]	; 11698 <__assert_fail@plt+0xb58>
   1165c:	b	10b10 <fputs@plt>
   11660:	ldr	r3, [r1, #4]
   11664:	vldr	d6, [pc, #36]	; 11690 <__assert_fail@plt+0xb50>
   11668:	ldr	r1, [pc, #44]	; 1169c <__assert_fail@plt+0xb5c>
   1166c:	sub	r3, r2, r3
   11670:	vmov	s14, r3
   11674:	vcvt.f64.s32	d7, s14
   11678:	vmul.f64	d7, d7, d6
   1167c:	vmov	s13, r2
   11680:	vcvt.f64.s32	d6, s13
   11684:	vdiv.f64	d7, d7, d6
   11688:	vmov	r2, r3, d7
   1168c:	b	10ab0 <fprintf@plt>
   11690:	andeq	r0, r0, r0
   11694:	subsmi	r0, r9, r0
   11698:	andeq	r3, r1, r8, lsl #9
   1169c:	muleq	r1, r1, r4
   116a0:	push	{r4, r5, r6, lr}
   116a4:	subs	r5, r1, #0
   116a8:	mov	r4, r0
   116ac:	beq	116d8 <__assert_fail@plt+0xb98>
   116b0:	ldr	r1, [pc, #48]	; 116e8 <__assert_fail@plt+0xba8>
   116b4:	ldrd	r2, [r5]
   116b8:	bl	10ab0 <fprintf@plt>
   116bc:	mov	r1, r5
   116c0:	mov	r0, r4
   116c4:	bl	11648 <__assert_fail@plt+0xb08>
   116c8:	mov	r1, r4
   116cc:	ldr	r0, [pc, #24]	; 116ec <__assert_fail@plt+0xbac>
   116d0:	pop	{r4, r5, r6, lr}
   116d4:	b	10b10 <fputs@plt>
   116d8:	mov	r1, r0
   116dc:	ldr	r0, [pc, #12]	; 116f0 <__assert_fail@plt+0xbb0>
   116e0:	bl	10b10 <fputs@plt>
   116e4:	b	116c8 <__assert_fail@plt+0xb88>
   116e8:	muleq	r1, r7, r4
   116ec:			; <UNDEFINED> instruction: 0x000134bd
   116f0:	andeq	r3, r1, r2, lsr #9
   116f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   116f8:	mov	r4, r0
   116fc:	mov	r6, r1
   11700:	mov	r7, r2
   11704:	mov	r2, r3
   11708:	mov	r5, #1
   1170c:	ldr	r1, [pc, #196]	; 117d8 <__assert_fail@plt+0xc98>
   11710:	ldrb	r8, [sp, #32]
   11714:	ldrb	r9, [sp, #36]	; 0x24
   11718:	bl	10ab0 <fprintf@plt>
   1171c:	mov	r1, #0
   11720:	mov	r0, r4
   11724:	ldr	sl, [pc, #176]	; 117dc <__assert_fail@plt+0xc9c>
   11728:	bl	116a0 <__assert_fail@plt+0xb60>
   1172c:	ldr	r3, [pc, #172]	; 117e0 <__assert_fail@plt+0xca0>
   11730:	cmp	r8, #0
   11734:	mov	r0, r4
   11738:	ldr	r2, [pc, #164]	; 117e4 <__assert_fail@plt+0xca4>
   1173c:	ldr	r1, [pc, #164]	; 117e8 <__assert_fail@plt+0xca8>
   11740:	moveq	r2, r3
   11744:	bl	10ab0 <fprintf@plt>
   11748:	ldr	r3, [r6, r5, lsl #3]
   1174c:	add	r1, r6, r5, lsl #3
   11750:	cmp	r3, #0
   11754:	ble	11770 <__assert_fail@plt+0xc30>
   11758:	mov	r0, r4
   1175c:	bl	116a0 <__assert_fail@plt+0xb60>
   11760:	mov	r2, r5
   11764:	mov	r1, sl
   11768:	mov	r0, r4
   1176c:	bl	10ab0 <fprintf@plt>
   11770:	add	r5, r5, #1
   11774:	sxth	r3, r5
   11778:	cmp	r7, r3
   1177c:	bge	11748 <__assert_fail@plt+0xc08>
   11780:	cmp	r8, #0
   11784:	beq	117b4 <__assert_fail@plt+0xc74>
   11788:	add	r3, r7, #1
   1178c:	add	r1, r6, r3, lsl #3
   11790:	ldr	r3, [r6, r3, lsl #3]
   11794:	cmp	r3, #0
   11798:	ble	117b4 <__assert_fail@plt+0xc74>
   1179c:	mov	r0, r4
   117a0:	bl	116a0 <__assert_fail@plt+0xb60>
   117a4:	mov	r2, r7
   117a8:	ldr	r1, [pc, #60]	; 117ec <__assert_fail@plt+0xcac>
   117ac:	mov	r0, r4
   117b0:	bl	10ab0 <fprintf@plt>
   117b4:	cmp	r9, #0
   117b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   117bc:	mov	r1, r6
   117c0:	mov	r0, r4
   117c4:	bl	116a0 <__assert_fail@plt+0xb60>
   117c8:	mov	r1, r4
   117cc:	ldr	r0, [pc, #28]	; 117f0 <__assert_fail@plt+0xcb0>
   117d0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   117d4:	b	10b10 <fputs@plt>
   117d8:	andeq	r3, r1, pc, asr #9
   117dc:	ldrdeq	r3, [r1], -r4
   117e0:	andeq	r3, r1, r8, asr #9
   117e4:	andeq	r3, r1, r1, asr #9
   117e8:	ldrdeq	r3, [r1], -r0
   117ec:	ldrdeq	r3, [r1], -sp
   117f0:	andeq	r3, r1, r6, ror #9
   117f4:	push	{r4, r5, r6, r7, r8, lr}
   117f8:	mov	r4, r1
   117fc:	mov	r6, r0
   11800:	add	r4, r4, #4096	; 0x1000
   11804:	mov	r0, r1
   11808:	mov	r5, r2
   1180c:	ldr	r7, [pc, #124]	; 11890 <__assert_fail@plt+0xd50>
   11810:	bl	11e90 <__assert_fail@plt+0x1350>
   11814:	ldr	r2, [pc, #120]	; 11894 <__assert_fail@plt+0xd54>
   11818:	ldr	r1, [r4, #3952]	; 0xf70
   1181c:	ldr	r0, [r4, #3956]	; 0xf74
   11820:	bl	12fbc <error@@Base+0x9b4>
   11824:	mov	r2, r5
   11828:	ldr	r1, [pc, #104]	; 11898 <__assert_fail@plt+0xd58>
   1182c:	mov	r0, r6
   11830:	bl	10ab0 <fprintf@plt>
   11834:	mov	r1, #0
   11838:	mov	r0, r6
   1183c:	bl	116a0 <__assert_fail@plt+0xb60>
   11840:	mov	r5, #0
   11844:	mov	r1, r6
   11848:	mov	r0, #10
   1184c:	bl	10ae0 <fputc@plt>
   11850:	ldr	r3, [r4, #3956]	; 0xf74
   11854:	cmp	r3, r5
   11858:	pople	{r4, r5, r6, r7, r8, pc}
   1185c:	mov	r0, r6
   11860:	ldr	r3, [r4, #3952]	; 0xf70
   11864:	ldr	r1, [r3, r5, lsl #2]
   11868:	add	r1, r1, #12
   1186c:	bl	116a0 <__assert_fail@plt+0xb60>
   11870:	ldr	r3, [r4, #3952]	; 0xf70
   11874:	mov	r1, r7
   11878:	mov	r0, r6
   1187c:	ldr	r3, [r3, r5, lsl #2]
   11880:	add	r5, r5, #1
   11884:	ldr	r2, [r3, #8]
   11888:	bl	10ab0 <fprintf@plt>
   1188c:	b	11850 <__assert_fail@plt+0xd10>
   11890:	ldrdeq	r3, [r1], -r0
   11894:	muleq	r1, ip, r8
   11898:	andeq	r3, r1, pc, asr #9
   1189c:	ldr	r0, [r0, #8]
   118a0:	ldr	r1, [r1, #8]
   118a4:	b	124b4 <__assert_fail@plt+0x1974>
   118a8:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   118ac:	mov	r7, r0
   118b0:	mov	r5, r1
   118b4:	bl	115e8 <__assert_fail@plt+0xaa8>
   118b8:	cmp	r0, #0
   118bc:	bne	118d0 <__assert_fail@plt+0xd90>
   118c0:	mov	r4, #0
   118c4:	mov	r0, r4
   118c8:	add	sp, sp, #8
   118cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118d0:	mov	r0, r7
   118d4:	bl	115e8 <__assert_fail@plt+0xaa8>
   118d8:	cmp	r0, #0
   118dc:	beq	118c0 <__assert_fail@plt+0xd80>
   118e0:	ldr	r6, [pc, #136]	; 11970 <__assert_fail@plt+0xe30>
   118e4:	mov	r4, #0
   118e8:	ldr	r9, [pc, #132]	; 11974 <__assert_fail@plt+0xe34>
   118ec:	add	r8, r6, #29
   118f0:	b	11940 <__assert_fail@plt+0xe00>
   118f4:	mov	r0, r8
   118f8:	bl	10af8 <atoi@plt>
   118fc:	subs	r3, r0, #0
   11900:	ldr	sl, [sp]
   11904:	bne	11920 <__assert_fail@plt+0xde0>
   11908:	ldr	r1, [pc, #104]	; 11978 <__assert_fail@plt+0xe38>
   1190c:	mov	r0, r8
   11910:	bl	109b4 <strcmp@plt>
   11914:	subs	r3, r0, #0
   11918:	moveq	r4, sl
   1191c:	movne	r3, #11
   11920:	ldr	r2, [r5, r3, lsl #3]
   11924:	add	r1, r5, r3, lsl #3
   11928:	add	r2, r2, sl
   1192c:	str	r2, [r5, r3, lsl #3]
   11930:	ldr	r3, [r1, #4]
   11934:	ldr	r2, [sp, #4]
   11938:	add	r3, r3, r2
   1193c:	str	r3, [r1, #4]
   11940:	mov	r0, r7
   11944:	bl	115e8 <__assert_fail@plt+0xaa8>
   11948:	cmp	r0, #0
   1194c:	beq	118c4 <__assert_fail@plt+0xd84>
   11950:	add	r3, sp, #4
   11954:	mov	r2, sp
   11958:	mov	r1, r9
   1195c:	mov	r0, r6
   11960:	bl	10abc <__isoc99_sscanf@plt>
   11964:	cmp	r0, #2
   11968:	beq	118f4 <__assert_fail@plt+0xdb4>
   1196c:	b	118c4 <__assert_fail@plt+0xd84>
   11970:	muleq	r2, r0, r0
   11974:	andeq	r3, r1, lr, ror #9
   11978:	andeq	r3, r1, r6, ror #9
   1197c:	ldr	r3, [r0]
   11980:	add	r1, r3, r1
   11984:	ldr	r3, [r0, #4]
   11988:	add	r2, r3, r2
   1198c:	stm	r0, {r1, r2}
   11990:	bx	lr
   11994:	push	{r4, r5, r6, r7, r8, lr}
   11998:	mov	r7, r0
   1199c:	mov	r8, r1
   119a0:	mov	r6, r2
   119a4:	mov	r5, r3
   119a8:	bl	11dc4 <__assert_fail@plt+0x1284>
   119ac:	subs	r4, r0, #0
   119b0:	bne	119dc <__assert_fail@plt+0xe9c>
   119b4:	mov	r1, #20
   119b8:	mov	r0, #1
   119bc:	bl	12644 <error@@Base+0x3c>
   119c0:	mov	r4, r0
   119c4:	mov	r0, r8
   119c8:	bl	109fc <strdup@plt>
   119cc:	mov	r1, r4
   119d0:	str	r0, [r4, #8]
   119d4:	mov	r0, r7
   119d8:	bl	11e08 <__assert_fail@plt+0x12c8>
   119dc:	ldrd	r2, [r4, #12]
   119e0:	add	r2, r2, r6
   119e4:	add	r3, r3, r5
   119e8:	strd	r2, [r4, #12]
   119ec:	pop	{r4, r5, r6, r7, r8, pc}
   119f0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   119f4:	mov	r5, r0
   119f8:	mov	r7, r1
   119fc:	bl	115e8 <__assert_fail@plt+0xaa8>
   11a00:	cmp	r0, #0
   11a04:	beq	11a50 <__assert_fail@plt+0xf10>
   11a08:	mov	r0, r5
   11a0c:	bl	115e8 <__assert_fail@plt+0xaa8>
   11a10:	cmp	r0, #0
   11a14:	beq	11a50 <__assert_fail@plt+0xf10>
   11a18:	ldr	r4, [pc, #100]	; 11a84 <__assert_fail@plt+0xf44>
   11a1c:	ldr	r6, [pc, #100]	; 11a88 <__assert_fail@plt+0xf48>
   11a20:	add	r8, r4, #29
   11a24:	mov	r0, r5
   11a28:	bl	115e8 <__assert_fail@plt+0xaa8>
   11a2c:	cmp	r0, #0
   11a30:	beq	11a50 <__assert_fail@plt+0xf10>
   11a34:	add	r3, sp, #4
   11a38:	mov	r2, sp
   11a3c:	ldr	r0, [pc, #64]	; 11a84 <__assert_fail@plt+0xf44>
   11a40:	mov	r1, r6
   11a44:	bl	10abc <__isoc99_sscanf@plt>
   11a48:	cmp	r0, #2
   11a4c:	beq	11a58 <__assert_fail@plt+0xf18>
   11a50:	add	sp, sp, #8
   11a54:	pop	{r4, r5, r6, r7, r8, pc}
   11a58:	mov	r0, r4
   11a5c:	bl	10aa4 <strlen@plt>
   11a60:	add	r0, r4, r0
   11a64:	mov	r3, #0
   11a68:	ldr	r2, [sp]
   11a6c:	mov	r1, r8
   11a70:	strb	r3, [r0, #-1]
   11a74:	mov	r0, r7
   11a78:	ldr	r3, [sp, #4]
   11a7c:	bl	11994 <__assert_fail@plt+0xe54>
   11a80:	b	11a24 <__assert_fail@plt+0xee4>
   11a84:	muleq	r2, r0, r0
   11a88:	andeq	r3, r1, lr, ror #9
   11a8c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11a90:	mov	r6, r1
   11a94:	mov	r5, r0
   11a98:	mov	r0, r6
   11a9c:	ldr	r1, [pc, #328]	; 11bec <__assert_fail@plt+0x10ac>
   11aa0:	bl	126cc <error@@Base+0xc4>
   11aa4:	mov	r4, r0
   11aa8:	bl	115e8 <__assert_fail@plt+0xaa8>
   11aac:	cmp	r0, #0
   11ab0:	beq	11bd8 <__assert_fail@plt+0x1098>
   11ab4:	mov	r2, #45	; 0x2d
   11ab8:	ldr	r1, [pc, #304]	; 11bf0 <__assert_fail@plt+0x10b0>
   11abc:	ldr	r0, [pc, #304]	; 11bf4 <__assert_fail@plt+0x10b4>
   11ac0:	bl	10b1c <strncmp@plt>
   11ac4:	cmp	r0, #0
   11ac8:	bne	11bd8 <__assert_fail@plt+0x1098>
   11acc:	mov	r0, r4
   11ad0:	bl	115e8 <__assert_fail@plt+0xaa8>
   11ad4:	cmp	r0, #0
   11ad8:	beq	11bd8 <__assert_fail@plt+0x1098>
   11adc:	ldr	r1, [pc, #276]	; 11bf8 <__assert_fail@plt+0x10b8>
   11ae0:	ldr	r0, [pc, #268]	; 11bf4 <__assert_fail@plt+0x10b4>
   11ae4:	bl	109b4 <strcmp@plt>
   11ae8:	cmp	r0, #0
   11aec:	bne	11bd8 <__assert_fail@plt+0x1098>
   11af0:	mov	r1, sp
   11af4:	mov	r0, r4
   11af8:	bl	1160c <__assert_fail@plt+0xacc>
   11afc:	cmp	r0, #0
   11b00:	beq	11bd8 <__assert_fail@plt+0x1098>
   11b04:	add	r1, sp, #4
   11b08:	mov	r0, r4
   11b0c:	bl	1160c <__assert_fail@plt+0xacc>
   11b10:	cmp	r0, #0
   11b14:	beq	11bd8 <__assert_fail@plt+0x1098>
   11b18:	mov	r0, r4
   11b1c:	bl	115e8 <__assert_fail@plt+0xaa8>
   11b20:	cmp	r0, #0
   11b24:	beq	11bd8 <__assert_fail@plt+0x1098>
   11b28:	mov	r0, r4
   11b2c:	bl	115e8 <__assert_fail@plt+0xaa8>
   11b30:	cmp	r0, #0
   11b34:	beq	11bd8 <__assert_fail@plt+0x1098>
   11b38:	ldr	r3, [r5]
   11b3c:	add	r1, r5, #8
   11b40:	mov	r0, r4
   11b44:	ldr	r2, [sp]
   11b48:	add	r3, r3, r2
   11b4c:	ldr	r2, [sp, #4]
   11b50:	str	r3, [r5]
   11b54:	ldr	r3, [r5, #4]
   11b58:	add	r3, r3, r2
   11b5c:	str	r3, [r5, #4]
   11b60:	bl	118a8 <__assert_fail@plt+0xd68>
   11b64:	mov	r7, r0
   11b68:	add	r1, r5, #416	; 0x1a0
   11b6c:	mov	r0, r4
   11b70:	bl	118a8 <__assert_fail@plt+0xd68>
   11b74:	mov	r6, r0
   11b78:	add	r1, r5, #824	; 0x338
   11b7c:	mov	r0, r4
   11b80:	bl	118a8 <__assert_fail@plt+0xd68>
   11b84:	ldr	r3, [sp]
   11b88:	cmp	r3, #0
   11b8c:	ble	11bc8 <__assert_fail@plt+0x1088>
   11b90:	add	r1, r5, #920	; 0x398
   11b94:	mov	r0, r4
   11b98:	bl	118a8 <__assert_fail@plt+0xd68>
   11b9c:	cmp	r7, #0
   11ba0:	ble	11bb0 <__assert_fail@plt+0x1070>
   11ba4:	add	r1, r5, #992	; 0x3e0
   11ba8:	mov	r0, r4
   11bac:	bl	119f0 <__assert_fail@plt+0xeb0>
   11bb0:	cmp	r6, #0
   11bb4:	ble	11bc8 <__assert_fail@plt+0x1088>
   11bb8:	add	r1, r5, #9024	; 0x2340
   11bbc:	mov	r0, r4
   11bc0:	add	r1, r1, #24
   11bc4:	bl	119f0 <__assert_fail@plt+0xeb0>
   11bc8:	mov	r0, r4
   11bcc:	bl	124f0 <__assert_fail@plt+0x19b0>
   11bd0:	add	sp, sp, #12
   11bd4:	pop	{r4, r5, r6, r7, pc}
   11bd8:	cmp	r6, #0
   11bdc:	ldr	r1, [pc, #24]	; 11bfc <__assert_fail@plt+0x10bc>
   11be0:	movne	r1, r6
   11be4:	ldr	r0, [pc, #20]	; 11c00 <__assert_fail@plt+0x10c0>
   11be8:	bl	1268c <error@@Base+0x84>
   11bec:	ldrdeq	r3, [r1], -r1
   11bf0:	strdeq	r3, [r1], -ip
   11bf4:	muleq	r2, r0, r0
   11bf8:	andeq	r6, r1, pc, lsr #20
   11bfc:	strdeq	r3, [r1], -r6
   11c00:	andeq	r3, r1, ip, lsr #10
   11c04:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11c08:	mov	r4, r0
   11c0c:	mov	r0, r1
   11c10:	mov	r7, #1
   11c14:	mov	r6, #0
   11c18:	ldr	r1, [pc, #268]	; 11d2c <__assert_fail@plt+0x11ec>
   11c1c:	bl	126cc <error@@Base+0xc4>
   11c20:	mov	r5, r0
   11c24:	ldr	r3, [pc, #260]	; 11d30 <__assert_fail@plt+0x11f0>
   11c28:	ldr	r2, [pc, #260]	; 11d34 <__assert_fail@plt+0x11f4>
   11c2c:	ldr	r1, [pc, #260]	; 11d38 <__assert_fail@plt+0x11f8>
   11c30:	bl	10ab0 <fprintf@plt>
   11c34:	ldr	r1, [pc, #256]	; 11d3c <__assert_fail@plt+0x11fc>
   11c38:	mov	r0, r5
   11c3c:	ldr	r2, [r4]
   11c40:	bl	10ab0 <fprintf@plt>
   11c44:	ldr	r1, [pc, #244]	; 11d40 <__assert_fail@plt+0x1200>
   11c48:	mov	r0, r5
   11c4c:	ldr	r2, [r4, #4]
   11c50:	bl	10ab0 <fprintf@plt>
   11c54:	mov	r1, r4
   11c58:	mov	r0, r5
   11c5c:	bl	11648 <__assert_fail@plt+0xb08>
   11c60:	mov	r1, r5
   11c64:	ldr	r0, [pc, #216]	; 11d44 <__assert_fail@plt+0x1204>
   11c68:	bl	10b10 <fputs@plt>
   11c6c:	ldr	r3, [pc, #212]	; 11d48 <__assert_fail@plt+0x1208>
   11c70:	mov	r2, #50	; 0x32
   11c74:	add	r1, r4, #8
   11c78:	mov	r0, r5
   11c7c:	strd	r6, [sp]
   11c80:	bl	116f4 <__assert_fail@plt+0xbb4>
   11c84:	ldr	r3, [pc, #192]	; 11d4c <__assert_fail@plt+0x120c>
   11c88:	mov	r2, #50	; 0x32
   11c8c:	add	r1, r4, #416	; 0x1a0
   11c90:	mov	r0, r5
   11c94:	strd	r6, [sp]
   11c98:	bl	116f4 <__assert_fail@plt+0xbb4>
   11c9c:	ldr	r3, [pc, #172]	; 11d50 <__assert_fail@plt+0x1210>
   11ca0:	mov	r2, #10
   11ca4:	add	r1, r4, #824	; 0x338
   11ca8:	mov	r0, r5
   11cac:	str	r7, [sp]
   11cb0:	str	r7, [sp, #4]
   11cb4:	bl	116f4 <__assert_fail@plt+0xbb4>
   11cb8:	ldr	r3, [r4]
   11cbc:	cmp	r3, r6
   11cc0:	ble	11d1c <__assert_fail@plt+0x11dc>
   11cc4:	ldr	r3, [pc, #136]	; 11d54 <__assert_fail@plt+0x1214>
   11cc8:	mov	r2, #8
   11ccc:	add	r1, r4, #920	; 0x398
   11cd0:	mov	r0, r5
   11cd4:	str	r6, [sp]
   11cd8:	str	r6, [sp, #4]
   11cdc:	bl	116f4 <__assert_fail@plt+0xbb4>
   11ce0:	ldr	r3, [r4, #8]
   11ce4:	cmp	r3, r6
   11ce8:	ble	11cfc <__assert_fail@plt+0x11bc>
   11cec:	ldr	r2, [pc, #84]	; 11d48 <__assert_fail@plt+0x1208>
   11cf0:	add	r1, r4, #992	; 0x3e0
   11cf4:	mov	r0, r5
   11cf8:	bl	117f4 <__assert_fail@plt+0xcb4>
   11cfc:	ldr	r3, [r4, #416]	; 0x1a0
   11d00:	cmp	r3, #0
   11d04:	ble	11d1c <__assert_fail@plt+0x11dc>
   11d08:	add	r1, r4, #9024	; 0x2340
   11d0c:	ldr	r2, [pc, #56]	; 11d4c <__assert_fail@plt+0x120c>
   11d10:	mov	r0, r5
   11d14:	add	r1, r1, #24
   11d18:	bl	117f4 <__assert_fail@plt+0xcb4>
   11d1c:	mov	r0, r5
   11d20:	add	sp, sp, #12
   11d24:	pop	{r4, r5, r6, r7, lr}
   11d28:	b	124f0 <__assert_fail@plt+0x19b0>
   11d2c:			; <UNDEFINED> instruction: 0x000133b8
   11d30:	andeq	r6, r1, pc, lsr #20
   11d34:	strdeq	r3, [r1], -ip
   11d38:	andeq	r3, r1, lr, lsr r5
   11d3c:	andeq	r3, r1, r3, asr #10
   11d40:	andeq	r3, r1, r1, asr r5
   11d44:	andeq	r3, r1, r7, ror #10
   11d48:	andeq	r3, r1, r4, ror r5
   11d4c:	andeq	r3, r1, r7, lsl #11
   11d50:	andeq	r3, r1, lr, ror r5
   11d54:	muleq	r1, r5, r5
   11d58:	sub	r0, r0, #1
   11d5c:	mov	r3, #0
   11d60:	ldrb	r2, [r0, #1]!
   11d64:	cmp	r2, #0
   11d68:	bne	11d80 <__assert_fail@plt+0x1240>
   11d6c:	movw	r2, #503	; 0x1f7
   11d70:	udiv	r0, r3, r2
   11d74:	mls	r0, r2, r0, r3
   11d78:	sxth	r0, r0
   11d7c:	bx	lr
   11d80:	add	r3, r3, r2
   11d84:	b	11d60 <__assert_fail@plt+0x1220>
   11d88:	push	{r4, r5, r6, lr}
   11d8c:	add	r6, r0, #8000	; 0x1f40
   11d90:	mov	r4, r0
   11d94:	mov	r5, r0
   11d98:	add	r6, r6, #48	; 0x30
   11d9c:	mov	r0, r5
   11da0:	add	r5, r5, #16
   11da4:	bl	1137c <__assert_fail@plt+0x83c>
   11da8:	cmp	r5, r6
   11dac:	bne	11d9c <__assert_fail@plt+0x125c>
   11db0:	add	r4, r4, #4096	; 0x1000
   11db4:	mov	r3, #0
   11db8:	str	r3, [r4, #3952]	; 0xf70
   11dbc:	str	r3, [r4, #3956]	; 0xf74
   11dc0:	pop	{r4, r5, r6, pc}
   11dc4:	push	{r4, r5, r6, lr}
   11dc8:	mov	r4, r0
   11dcc:	mov	r0, r1
   11dd0:	mov	r5, r1
   11dd4:	bl	11d58 <__assert_fail@plt+0x1218>
   11dd8:	ldr	r4, [r4, r0, lsl #4]
   11ddc:	cmp	r4, #0
   11de0:	beq	11df8 <__assert_fail@plt+0x12b8>
   11de4:	mov	r0, r5
   11de8:	ldr	r1, [r4, #8]
   11dec:	bl	109b4 <strcmp@plt>
   11df0:	cmp	r0, #0
   11df4:	bne	11e00 <__assert_fail@plt+0x12c0>
   11df8:	mov	r0, r4
   11dfc:	pop	{r4, r5, r6, pc}
   11e00:	ldr	r4, [r4, #4]
   11e04:	b	11ddc <__assert_fail@plt+0x129c>
   11e08:	push	{r4, lr}
   11e0c:	mov	r4, r0
   11e10:	ldr	r0, [r1, #8]
   11e14:	bl	11d58 <__assert_fail@plt+0x1218>
   11e18:	add	r0, r4, r0, lsl #4
   11e1c:	add	r4, r4, #4096	; 0x1000
   11e20:	bl	11394 <__assert_fail@plt+0x854>
   11e24:	ldr	r0, [r4, #3952]	; 0xf70
   11e28:	cmp	r0, #0
   11e2c:	beq	11e3c <__assert_fail@plt+0x12fc>
   11e30:	bl	109cc <free@plt>
   11e34:	mov	r3, #0
   11e38:	str	r3, [r4, #3952]	; 0xf70
   11e3c:	ldr	r3, [r4, #3956]	; 0xf74
   11e40:	add	r3, r3, #1
   11e44:	str	r3, [r4, #3956]	; 0xf74
   11e48:	pop	{r4, pc}
   11e4c:	push	{r4, lr}
   11e50:	mov	r4, r0
   11e54:	ldr	r0, [r1, #8]
   11e58:	bl	11d58 <__assert_fail@plt+0x1218>
   11e5c:	add	r0, r4, r0, lsl #4
   11e60:	add	r4, r4, #4096	; 0x1000
   11e64:	bl	113cc <__assert_fail@plt+0x88c>
   11e68:	ldr	r0, [r4, #3952]	; 0xf70
   11e6c:	cmp	r0, #0
   11e70:	beq	11e80 <__assert_fail@plt+0x1340>
   11e74:	bl	109cc <free@plt>
   11e78:	mov	r3, #0
   11e7c:	str	r3, [r4, #3952]	; 0xf70
   11e80:	ldr	r3, [r4, #3956]	; 0xf74
   11e84:	sub	r3, r3, #1
   11e88:	str	r3, [r4, #3956]	; 0xf74
   11e8c:	pop	{r4, pc}
   11e90:	push	{r4, r5, r6, lr}
   11e94:	add	r6, r0, #4096	; 0x1000
   11e98:	ldr	r4, [r6, #3952]	; 0xf70
   11e9c:	cmp	r4, #0
   11ea0:	popne	{r4, r5, r6, pc}
   11ea4:	ldr	r3, [r6, #3956]	; 0xf74
   11ea8:	cmp	r3, #0
   11eac:	popeq	{r4, r5, r6, pc}
   11eb0:	mov	r5, r0
   11eb4:	mov	r1, #4
   11eb8:	mov	r0, r3
   11ebc:	bl	12644 <error@@Base+0x3c>
   11ec0:	mov	r3, r4
   11ec4:	mov	r2, r4
   11ec8:	str	r0, [r6, #3952]	; 0xf70
   11ecc:	movw	lr, #503	; 0x1f7
   11ed0:	ldr	r1, [r5, r2, lsl #4]
   11ed4:	mov	ip, r3
   11ed8:	cmp	r1, #0
   11edc:	mov	r3, ip
   11ee0:	bne	11ef4 <__assert_fail@plt+0x13b4>
   11ee4:	add	r2, r2, #1
   11ee8:	cmp	r2, lr
   11eec:	bne	11ed0 <__assert_fail@plt+0x1390>
   11ef0:	pop	{r4, r5, r6, pc}
   11ef4:	str	r1, [r0, ip, lsl #2]
   11ef8:	add	ip, ip, #1
   11efc:	ldr	r1, [r1, #4]
   11f00:	b	11ed8 <__assert_fail@plt+0x1398>
   11f04:	push	{r4, r5, r6, r7, r8, lr}
   11f08:	add	r6, r0, #8000	; 0x1f40
   11f0c:	mov	r4, r0
   11f10:	mov	r7, r1
   11f14:	mov	r5, r0
   11f18:	add	r6, r6, #48	; 0x30
   11f1c:	mov	r0, r5
   11f20:	mov	r1, r7
   11f24:	add	r5, r5, #16
   11f28:	bl	11474 <__assert_fail@plt+0x934>
   11f2c:	cmp	r5, r6
   11f30:	bne	11f1c <__assert_fail@plt+0x13dc>
   11f34:	add	r4, r4, #4096	; 0x1000
   11f38:	ldr	r0, [r4, #3952]	; 0xf70
   11f3c:	cmp	r0, #0
   11f40:	beq	11f50 <__assert_fail@plt+0x1410>
   11f44:	bl	109cc <free@plt>
   11f48:	mov	r3, #0
   11f4c:	str	r3, [r4, #3952]	; 0xf70
   11f50:	mov	r3, #0
   11f54:	str	r3, [r4, #3956]	; 0xf74
   11f58:	pop	{r4, r5, r6, r7, r8, pc}
   11f5c:	cmp	r0, #0
   11f60:	beq	11fc4 <__assert_fail@plt+0x1484>
   11f64:	push	{r4, r5, lr}
   11f68:	mov	r2, #0
   11f6c:	movw	r1, #1092	; 0x444
   11f70:	mov	r5, #12
   11f74:	ldr	lr, [pc, #80]	; 11fcc <__assert_fail@plt+0x148c>
   11f78:	ldr	ip, [r0, #12]
   11f7c:	sub	r3, r1, r2
   11f80:	add	r3, r2, r3, lsr #1
   11f84:	mul	r4, r5, r3
   11f88:	add	r0, lr, r4
   11f8c:	ldr	r4, [lr, r4]
   11f90:	cmp	ip, r4
   11f94:	subcc	r1, r3, #1
   11f98:	bcc	11fac <__assert_fail@plt+0x146c>
   11f9c:	ldr	r2, [r0, #4]
   11fa0:	cmp	ip, r2
   11fa4:	bls	11fbc <__assert_fail@plt+0x147c>
   11fa8:	add	r2, r3, #1
   11fac:	cmp	r1, r2
   11fb0:	bcs	11f7c <__assert_fail@plt+0x143c>
   11fb4:	mov	r0, #0
   11fb8:	pop	{r4, r5, pc}
   11fbc:	ldr	r0, [r0, #8]
   11fc0:	pop	{r4, r5, pc}
   11fc4:	mov	r0, #18
   11fc8:	bx	lr
   11fcc:	andeq	r3, r1, r4, asr #11
   11fd0:	push	{r4, lr}
   11fd4:	mov	r4, r0
   11fd8:	ldr	r4, [r4, #4]
   11fdc:	cmp	r4, #0
   11fe0:	beq	11ff8 <__assert_fail@plt+0x14b8>
   11fe4:	mov	r0, r4
   11fe8:	bl	11f5c <__assert_fail@plt+0x141c>
   11fec:	bic	r0, r0, #2
   11ff0:	cmp	r0, #4
   11ff4:	beq	11fd8 <__assert_fail@plt+0x1498>
   11ff8:	mov	r0, r4
   11ffc:	pop	{r4, pc}
   12000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12004:	mov	sl, r0
   12008:	sub	sp, sp, #20
   1200c:	ldr	fp, [pc, #960]	; 123d4 <__assert_fail@plt+0x1894>
   12010:	ldr	r7, [r1]
   12014:	cmp	r7, #0
   12018:	str	r7, [sp, #4]
   1201c:	beq	1236c <__assert_fail@plt+0x182c>
   12020:	mov	r9, #17
   12024:	mov	r6, sp
   12028:	mov	r0, r6
   1202c:	bl	11fd0 <__assert_fail@plt+0x1490>
   12030:	mov	r6, r0
   12034:	bl	11f5c <__assert_fail@plt+0x141c>
   12038:	cmp	r6, #0
   1203c:	mov	r4, r0
   12040:	moveq	r8, r6
   12044:	beq	12054 <__assert_fail@plt+0x1514>
   12048:	mov	r0, r6
   1204c:	bl	11fd0 <__assert_fail@plt+0x1490>
   12050:	mov	r8, r0
   12054:	mov	r0, r8
   12058:	bl	11f5c <__assert_fail@plt+0x141c>
   1205c:	cmp	r8, #0
   12060:	mov	r5, r0
   12064:	beq	12074 <__assert_fail@plt+0x1534>
   12068:	mov	r0, r8
   1206c:	bl	11fd0 <__assert_fail@plt+0x1490>
   12070:	mov	r8, r0
   12074:	mov	r0, r8
   12078:	bl	11f5c <__assert_fail@plt+0x141c>
   1207c:	sub	r3, r5, #2
   12080:	cmp	r4, #1
   12084:	cmpeq	r5, #2
   12088:	clz	r3, r3
   1208c:	sub	r2, r4, #1
   12090:	lsr	r3, r3, #5
   12094:	beq	12388 <__assert_fail@plt+0x1848>
   12098:	cmp	r2, #2
   1209c:	bls	12364 <__assert_fail@plt+0x1824>
   120a0:	bic	ip, r5, #2
   120a4:	cmp	ip, #1
   120a8:	orreq	r3, r3, #1
   120ac:	cmp	r3, #0
   120b0:	bne	12364 <__assert_fail@plt+0x1824>
   120b4:	sub	r3, r4, #8
   120b8:	cmp	r3, #1
   120bc:	bhi	120e8 <__assert_fail@plt+0x15a8>
   120c0:	sub	r2, r5, #8
   120c4:	cmp	r2, #1
   120c8:	bls	12298 <__assert_fail@plt+0x1758>
   120cc:	sub	r2, r5, #12
   120d0:	cmp	r5, #10
   120d4:	cmpne	r2, #1
   120d8:	bhi	120e8 <__assert_fail@plt+0x15a8>
   120dc:	sub	r2, r0, #8
   120e0:	cmp	r2, #1
   120e4:	bls	12298 <__assert_fail@plt+0x1758>
   120e8:	sub	r2, r9, #8
   120ec:	cmp	r2, #1
   120f0:	bhi	12110 <__assert_fail@plt+0x15d0>
   120f4:	sub	r2, r4, #12
   120f8:	cmp	r4, #10
   120fc:	cmpne	r2, #1
   12100:	bhi	12110 <__assert_fail@plt+0x15d0>
   12104:	sub	r2, r5, #8
   12108:	cmp	r2, #1
   1210c:	bls	12298 <__assert_fail@plt+0x1758>
   12110:	sub	r1, r4, #8
   12114:	sub	r2, r5, #10
   12118:	clz	r1, r1
   1211c:	clz	r2, r2
   12120:	lsr	r1, r1, #5
   12124:	lsr	r2, r2, #5
   12128:	tst	r1, r2
   1212c:	bne	1214c <__assert_fail@plt+0x160c>
   12130:	cmp	r5, #11
   12134:	movne	r1, #0
   12138:	andeq	r1, r1, #1
   1213c:	cmp	r1, #0
   12140:	beq	1222c <__assert_fail@plt+0x16ec>
   12144:	cmp	r0, #8
   12148:	bne	12250 <__assert_fail@plt+0x1710>
   1214c:	mov	r4, #8
   12150:	b	12298 <__assert_fail@plt+0x1758>
   12154:	cmp	r4, #0
   12158:	bne	12170 <__assert_fail@plt+0x1630>
   1215c:	ldr	r3, [pc, #628]	; 123d8 <__assert_fail@plt+0x1898>
   12160:	mov	r2, #249	; 0xf9
   12164:	ldr	r1, [pc, #624]	; 123dc <__assert_fail@plt+0x189c>
   12168:	ldr	r0, [pc, #624]	; 123e0 <__assert_fail@plt+0x18a0>
   1216c:	b	12194 <__assert_fail@plt+0x1654>
   12170:	mov	r1, sp
   12174:	ldr	r0, [r4, #12]
   12178:	bl	109f0 <utf8proc_encode_char@plt>
   1217c:	cmp	r0, #0
   12180:	bne	12198 <__assert_fail@plt+0x1658>
   12184:	ldr	r3, [pc, #588]	; 123d8 <__assert_fail@plt+0x1898>
   12188:	mov	r2, #253	; 0xfd
   1218c:	ldr	r1, [pc, #584]	; 123dc <__assert_fail@plt+0x189c>
   12190:	ldr	r0, [pc, #588]	; 123e4 <__assert_fail@plt+0x18a4>
   12194:	bl	10b40 <__assert_fail@plt>
   12198:	ldr	r4, [r4, #4]
   1219c:	add	r5, r5, r0
   121a0:	cmp	r4, r8
   121a4:	bne	12154 <__assert_fail@plt+0x1614>
   121a8:	add	r0, r5, #1
   121ac:	mov	r5, #0
   121b0:	bl	10a50 <malloc@plt>
   121b4:	mov	r4, r0
   121b8:	cmp	r7, r8
   121bc:	bne	121fc <__assert_fail@plt+0x16bc>
   121c0:	mov	r3, #0
   121c4:	mov	r1, #12
   121c8:	mov	r0, #1
   121cc:	strb	r3, [r4, r5]
   121d0:	bl	12644 <error@@Base+0x3c>
   121d4:	mov	r5, r0
   121d8:	mov	r0, r4
   121dc:	bl	10ad4 <utf8proc_NFC@plt>
   121e0:	mov	r1, r5
   121e4:	str	r0, [r5, #8]
   121e8:	mov	r0, sl
   121ec:	bl	113a4 <__assert_fail@plt+0x864>
   121f0:	mov	r0, r4
   121f4:	bl	109cc <free@plt>
   121f8:	b	122f0 <__assert_fail@plt+0x17b0>
   121fc:	cmp	r7, #0
   12200:	ldreq	r3, [pc, #480]	; 123e8 <__assert_fail@plt+0x18a8>
   12204:	movweq	r2, #269	; 0x10d
   12208:	beq	12164 <__assert_fail@plt+0x1624>
   1220c:	add	r1, r4, r5
   12210:	ldr	r0, [r7, #12]
   12214:	bl	109f0 <utf8proc_encode_char@plt>
   12218:	add	r5, r5, r0
   1221c:	ldr	r7, [r7, #4]
   12220:	b	121b8 <__assert_fail@plt+0x1678>
   12224:	mov	r9, r4
   12228:	b	12028 <__assert_fail@plt+0x14e8>
   1222c:	cmp	r9, #8
   12230:	cmpeq	r4, #11
   12234:	moveq	r1, #1
   12238:	movne	r1, #0
   1223c:	cmp	r5, #8
   12240:	movne	r1, #0
   12244:	andeq	r1, r1, #1
   12248:	cmp	r1, #0
   1224c:	bne	12390 <__assert_fail@plt+0x1850>
   12250:	sub	r1, r4, #15
   12254:	sub	r8, r5, #15
   12258:	clz	r1, r1
   1225c:	clz	r8, r8
   12260:	lsr	r1, r1, #5
   12264:	lsr	r8, r8, #5
   12268:	tst	r1, r8
   1226c:	bne	12398 <__assert_fail@plt+0x1858>
   12270:	cmp	r3, #1
   12274:	movhi	lr, #0
   12278:	movls	lr, #1
   1227c:	tst	r8, lr
   12280:	bne	12298 <__assert_fail@plt+0x1758>
   12284:	cmp	r4, #15
   12288:	bne	123b0 <__assert_fail@plt+0x1870>
   1228c:	sub	r3, r5, #8
   12290:	cmp	r3, #1
   12294:	bhi	122f8 <__assert_fail@plt+0x17b8>
   12298:	ldr	r3, [r6, #4]
   1229c:	cmp	r3, #0
   122a0:	bne	12224 <__assert_fail@plt+0x16e4>
   122a4:	ldr	r4, [r6, #4]
   122a8:	cmp	r4, #0
   122ac:	beq	122c4 <__assert_fail@plt+0x1784>
   122b0:	mov	r0, r4
   122b4:	bl	11f5c <__assert_fail@plt+0x141c>
   122b8:	bic	r0, r0, #2
   122bc:	cmp	r0, #4
   122c0:	beq	123a8 <__assert_fail@plt+0x1868>
   122c4:	ldr	r0, [r7, #12]
   122c8:	bl	109d8 <utf8proc_get_property@plt>
   122cc:	ldrh	r3, [r0]
   122d0:	cmp	r3, #29
   122d4:	bhi	122f0 <__assert_fail@plt+0x17b0>
   122d8:	mov	r2, #1
   122dc:	ands	r3, fp, r2, lsl r3
   122e0:	movne	r4, r7
   122e4:	movne	r5, #0
   122e8:	ldrne	r8, [r6, #4]
   122ec:	bne	121a0 <__assert_fail@plt+0x1660>
   122f0:	ldr	r7, [r6, #4]
   122f4:	b	12014 <__assert_fail@plt+0x14d4>
   122f8:	cmp	ip, #12
   122fc:	orreq	r2, r2, #1
   12300:	cmp	r2, #0
   12304:	beq	12310 <__assert_fail@plt+0x17d0>
   12308:	cmp	r0, #15
   1230c:	beq	12298 <__assert_fail@plt+0x1758>
   12310:	sub	r3, r4, #7
   12314:	cmp	r5, #7
   12318:	cmpeq	r4, #7
   1231c:	clz	r3, r3
   12320:	lsr	r3, r3, #5
   12324:	beq	123a0 <__assert_fail@plt+0x1860>
   12328:	orrs	r2, r1, lr
   1232c:	bne	12340 <__assert_fail@plt+0x1800>
   12330:	cmp	r4, #16
   12334:	orreq	r3, r3, #1
   12338:	cmp	r3, #0
   1233c:	beq	12374 <__assert_fail@plt+0x1834>
   12340:	cmp	r5, #16
   12344:	beq	12298 <__assert_fail@plt+0x1758>
   12348:	cmp	r4, #16
   1234c:	bne	12374 <__assert_fail@plt+0x1834>
   12350:	cmp	r5, #15
   12354:	beq	12298 <__assert_fail@plt+0x1758>
   12358:	sub	r5, r5, #7
   1235c:	cmp	r5, #2
   12360:	bls	12298 <__assert_fail@plt+0x1758>
   12364:	cmp	r6, #0
   12368:	bne	122a4 <__assert_fail@plt+0x1764>
   1236c:	add	sp, sp, #20
   12370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12374:	cmp	r4, #5
   12378:	cmpeq	r5, #5
   1237c:	bne	12364 <__assert_fail@plt+0x1824>
   12380:	mov	r4, #5
   12384:	b	12298 <__assert_fail@plt+0x1758>
   12388:	mov	r4, #1
   1238c:	b	12298 <__assert_fail@plt+0x1758>
   12390:	mov	r4, #11
   12394:	b	12298 <__assert_fail@plt+0x1758>
   12398:	mov	r4, #15
   1239c:	b	12298 <__assert_fail@plt+0x1758>
   123a0:	mov	r4, #7
   123a4:	b	12298 <__assert_fail@plt+0x1758>
   123a8:	mov	r6, r4
   123ac:	b	122a4 <__assert_fail@plt+0x1764>
   123b0:	cmp	r9, #15
   123b4:	bne	12310 <__assert_fail@plt+0x17d0>
   123b8:	cmp	r4, #14
   123bc:	beq	123cc <__assert_fail@plt+0x188c>
   123c0:	sub	r3, r4, #10
   123c4:	bics	r3, r3, #2
   123c8:	bne	12310 <__assert_fail@plt+0x17d0>
   123cc:	cmp	r5, #15
   123d0:	b	1230c <__assert_fail@plt+0x17cc>
   123d4:	strdcs	r1, [r0], -lr
   123d8:	andeq	r3, r1, r0, lsr #11
   123dc:	andeq	r6, r1, r0, lsl #18
   123e0:	andeq	r6, r1, r7, lsl #18
   123e4:	andeq	r6, r1, r7, lsl r9
   123e8:			; <UNDEFINED> instruction: 0x000135b1
   123ec:	push	{r4, lr}
   123f0:	mov	r4, r0
   123f4:	ldr	r0, [r0, #8]
   123f8:	bl	109cc <free@plt>
   123fc:	mov	r0, r4
   12400:	pop	{r4, lr}
   12404:	b	109cc <free@plt>
   12408:	ldr	r3, [pc, #56]	; 12448 <__assert_fail@plt+0x1908>
   1240c:	push	{r4, r5, lr}
   12410:	sub	sp, sp, #116	; 0x74
   12414:	mov	r5, r0
   12418:	ldr	r4, [r3]
   1241c:	bl	10a80 <getpid@plt>
   12420:	ldr	r1, [pc, #36]	; 1244c <__assert_fail@plt+0x190c>
   12424:	mov	r3, r0
   12428:	add	r0, sp, #12
   1242c:	str	r5, [sp]
   12430:	mov	r2, r4
   12434:	bl	10aec <sprintf@plt>
   12438:	add	r0, sp, #12
   1243c:	bl	109fc <strdup@plt>
   12440:	add	sp, sp, #116	; 0x74
   12444:	pop	{r4, r5, pc}
   12448:	andeq	pc, r2, r0, asr #7
   1244c:	andeq	r6, r1, sl, lsr #18
   12450:	ldr	r3, [pc, #84]	; 124ac <__assert_fail@plt+0x196c>
   12454:	mov	r5, r0
   12458:	push	{r7, lr}
   1245c:	ldr	r3, [r3]
   12460:	cmp	r3, #0
   12464:	beq	1246c <__assert_fail@plt+0x192c>
   12468:	blx	r3
   1246c:	ldr	r6, [pc, #60]	; 124b0 <__assert_fail@plt+0x1970>
   12470:	mov	r4, #1
   12474:	ldrsh	r3, [r6]
   12478:	cmp	r3, r4
   1247c:	bge	12488 <__assert_fail@plt+0x1948>
   12480:	mov	r0, r5
   12484:	bl	10a8c <exit@plt>
   12488:	mov	r0, r4
   1248c:	add	r4, r4, #1
   12490:	bl	12408 <__assert_fail@plt+0x18c8>
   12494:	mov	r7, r0
   12498:	sxth	r4, r4
   1249c:	bl	10a14 <unlink@plt>
   124a0:	mov	r0, r7
   124a4:	bl	109cc <free@plt>
   124a8:	b	12474 <__assert_fail@plt+0x1934>
   124ac:	andeq	pc, r2, r4, asr #7
   124b0:	strdeq	r9, [r2], -r4
   124b4:	sub	r2, r0, #1
   124b8:	sub	r1, r1, #1
   124bc:	ldrb	r3, [r2, #1]!
   124c0:	ldrb	r0, [r1, #1]!
   124c4:	cmp	r3, #0
   124c8:	beq	124e4 <__assert_fail@plt+0x19a4>
   124cc:	cmp	r3, r0
   124d0:	beq	124bc <__assert_fail@plt+0x197c>
   124d4:	cmp	r3, r0
   124d8:	mvncc	r0, #0
   124dc:	movcs	r0, #1
   124e0:	bx	lr
   124e4:	cmp	r0, #0
   124e8:	bxeq	lr
   124ec:	b	124d4 <__assert_fail@plt+0x1994>
   124f0:	ldr	r2, [pc, #28]	; 12514 <__assert_fail@plt+0x19d4>
   124f4:	ldr	r2, [r2]
   124f8:	cmp	r2, r0
   124fc:	bxeq	lr
   12500:	ldr	r2, [pc, #16]	; 12518 <__assert_fail@plt+0x19d8>
   12504:	ldr	r2, [r2]
   12508:	cmp	r2, r0
   1250c:	bxeq	lr
   12510:	b	10ac8 <fclose@plt>
   12514:	andeq	r7, r2, r8, ror #1
   12518:	andeq	r7, r2, ip, ror #1
   1251c:	push	{lr}		; (str lr, [sp, #-4]!)
   12520:	sub	sp, sp, #92	; 0x5c
   12524:	mov	r1, sp
   12528:	bl	13040 <error@@Base+0xa38>
   1252c:	clz	r0, r0
   12530:	lsr	r0, r0, #5
   12534:	add	sp, sp, #92	; 0x5c
   12538:	pop	{pc}		; (ldr pc, [sp], #4)
   1253c:	ldr	r3, [pc, #36]	; 12568 <__assert_fail@plt+0x1a28>
   12540:	push	{r4, lr}
   12544:	ldrh	r0, [r3]
   12548:	add	r0, r0, #1
   1254c:	sxth	r0, r0
   12550:	strh	r0, [r3]
   12554:	bl	12408 <__assert_fail@plt+0x18c8>
   12558:	mov	r4, r0
   1255c:	bl	10a14 <unlink@plt>
   12560:	mov	r0, r4
   12564:	pop	{r4, pc}
   12568:	strdeq	r9, [r2], -r4
   1256c:	push	{r4, lr}
   12570:	mov	r4, r0
   12574:	bl	10aa4 <strlen@plt>
   12578:	sub	r0, r0, #1
   1257c:	add	r1, r4, #1
   12580:	sxth	r0, r0
   12584:	tst	r0, #32768	; 0x8000
   12588:	bne	1259c <__assert_fail@plt+0x1a5c>
   1258c:	sub	r3, r0, #1
   12590:	ldrb	r2, [r1, r3]
   12594:	cmp	r2, #47	; 0x2f
   12598:	bne	125a8 <__assert_fail@plt+0x1a68>
   1259c:	add	r0, r0, #1
   125a0:	add	r0, r4, r0
   125a4:	pop	{r4, pc}
   125a8:	mov	r0, r3
   125ac:	b	12584 <__assert_fail@plt+0x1a44>
   125b0:	push	{r4, lr}
   125b4:	mov	r0, #0
   125b8:	bl	12450 <__assert_fail@plt+0x1910>
   125bc:	ldr	r2, [pc, #52]	; 125f8 <__assert_fail@plt+0x1ab8>
   125c0:	push	{r4, lr}
   125c4:	ldr	r2, [r2]
   125c8:	cmp	r2, #0
   125cc:	beq	125d8 <__assert_fail@plt+0x1a98>
   125d0:	blx	r2
   125d4:	bl	125b0 <__assert_fail@plt+0x1a70>
   125d8:	mov	r3, r0
   125dc:	ldr	r2, [pc, #24]	; 125fc <__assert_fail@plt+0x1abc>
   125e0:	ldr	r0, [pc, #24]	; 12600 <__assert_fail@plt+0x1ac0>
   125e4:	ldr	r1, [pc, #24]	; 12604 <__assert_fail@plt+0x1ac4>
   125e8:	ldr	r2, [r2]
   125ec:	ldr	r0, [r0]
   125f0:	bl	10ab0 <fprintf@plt>
   125f4:	b	125d4 <__assert_fail@plt+0x1a94>
   125f8:			; <UNDEFINED> instruction: 0x0002f3bc
   125fc:	andeq	pc, r2, r0, asr #7
   12600:	andeq	r7, r2, r0, ror #1
   12604:	andeq	r6, r1, r8, lsr r9

00012608 <error@@Base>:
   12608:	mov	r3, r0
   1260c:	ldr	r2, [pc, #32]	; 12634 <error@@Base+0x2c>
   12610:	push	{r4, lr}
   12614:	ldr	r0, [pc, #28]	; 12638 <error@@Base+0x30>
   12618:	ldr	r1, [pc, #28]	; 1263c <error@@Base+0x34>
   1261c:	ldr	r2, [r2]
   12620:	ldr	r0, [r0]
   12624:	bl	10ab0 <fprintf@plt>
   12628:	ldr	r3, [pc, #16]	; 12640 <error@@Base+0x38>
   1262c:	ldr	r0, [r3]
   12630:	bl	12450 <__assert_fail@plt+0x1910>
   12634:	andeq	pc, r2, r0, asr #7
   12638:	andeq	r7, r2, r0, ror #1
   1263c:	andeq	r6, r1, r7, asr #18
   12640:	ldrdeq	r7, [r2], -r4
   12644:	push	{r4, lr}
   12648:	bl	109a8 <calloc@plt>
   1264c:	cmp	r0, #0
   12650:	popne	{r4, pc}
   12654:	ldr	r0, [pc]	; 1265c <error@@Base+0x54>
   12658:	bl	12608 <error@@Base>
   1265c:	andeq	r6, r1, pc, asr #18
   12660:	ldr	r3, [pc, #28]	; 12684 <error@@Base+0x7c>
   12664:	ldrb	r2, [r3, #2]
   12668:	cmp	r2, #0
   1266c:	bxne	lr
   12670:	mov	r2, #1
   12674:	push	{r4, lr}
   12678:	ldr	r0, [pc, #8]	; 12688 <error@@Base+0x80>
   1267c:	strb	r2, [r3, #2]
   12680:	bl	12608 <error@@Base>
   12684:	strdeq	r9, [r2], -r4
   12688:	andeq	r6, r1, r9, ror #18
   1268c:	push	{r0, r1, r2, lr}
   12690:	mov	r3, r0
   12694:	ldr	r2, [pc, #32]	; 126bc <error@@Base+0xb4>
   12698:	str	r1, [sp]
   1269c:	ldr	r0, [pc, #28]	; 126c0 <error@@Base+0xb8>
   126a0:	ldr	r1, [pc, #28]	; 126c4 <error@@Base+0xbc>
   126a4:	ldr	r2, [r2]
   126a8:	ldr	r0, [r0]
   126ac:	bl	10ab0 <fprintf@plt>
   126b0:	ldr	r3, [pc, #16]	; 126c8 <error@@Base+0xc0>
   126b4:	ldr	r0, [r3]
   126b8:	bl	12450 <__assert_fail@plt+0x1910>
   126bc:	andeq	pc, r2, r0, asr #7
   126c0:	andeq	r7, r2, r0, ror #1
   126c4:	andeq	r6, r1, r8, ror r9
   126c8:	ldrdeq	r7, [r2], -r4
   126cc:	push	{r4, r5, r6, lr}
   126d0:	subs	r4, r0, #0
   126d4:	mov	r5, r1
   126d8:	bne	126f4 <error@@Base+0xec>
   126dc:	ldrb	r3, [r1]
   126e0:	cmp	r3, #114	; 0x72
   126e4:	ldreq	r3, [pc, #44]	; 12718 <error@@Base+0x110>
   126e8:	ldrne	r3, [pc, #44]	; 1271c <error@@Base+0x114>
   126ec:	ldr	r0, [r3]
   126f0:	pop	{r4, r5, r6, pc}
   126f4:	bl	109c0 <fopen@plt>
   126f8:	cmp	r0, #0
   126fc:	popne	{r4, r5, r6, pc}
   12700:	mov	r1, r4
   12704:	ldrb	r3, [r5]
   12708:	cmp	r3, #119	; 0x77
   1270c:	ldreq	r0, [pc, #12]	; 12720 <error@@Base+0x118>
   12710:	ldrne	r0, [pc, #12]	; 12724 <error@@Base+0x11c>
   12714:	bl	1268c <error@@Base+0x84>
   12718:	andeq	r7, r2, r8, ror #1
   1271c:	andeq	r7, r2, ip, ror #1
   12720:	andeq	r6, r1, r5, lsl #19
   12724:	muleq	r1, fp, r9
   12728:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1272c:	mov	r8, r0
   12730:	mov	r7, r1
   12734:	mov	r9, r3
   12738:	ldr	r0, [r1]
   1273c:	str	r2, [sp]
   12740:	bl	1256c <__assert_fail@plt+0x1a2c>
   12744:	ldr	r3, [pc, #396]	; 128d8 <error@@Base+0x2d0>
   12748:	ldr	r1, [pc, #396]	; 128dc <error@@Base+0x2d4>
   1274c:	str	r0, [r3]
   12750:	mov	r0, #2
   12754:	bl	10a68 <__sysv_signal@plt>
   12758:	ldr	r1, [pc, #380]	; 128dc <error@@Base+0x2d4>
   1275c:	mov	r0, #15
   12760:	bl	10a68 <__sysv_signal@plt>
   12764:	ldr	r4, [r8]
   12768:	cmp	r4, #1
   1276c:	movne	r6, #0
   12770:	movne	r4, #1
   12774:	bne	12898 <error@@Base+0x290>
   12778:	ldr	r3, [pc, #352]	; 128e0 <error@@Base+0x2d8>
   1277c:	ldrb	r6, [r3, #4]
   12780:	cmp	r6, #0
   12784:	beq	12898 <error@@Base+0x290>
   12788:	ldr	r0, [sp]
   1278c:	bl	125bc <__assert_fail@plt+0x1a7c>
   12790:	ldr	r5, [r7, r4, lsl #2]
   12794:	lsl	sl, r4, #2
   12798:	ldrb	r3, [r5]
   1279c:	cmp	r3, #45	; 0x2d
   127a0:	bne	128c8 <error@@Base+0x2c0>
   127a4:	ldrb	r3, [r5, #1]
   127a8:	cmp	r3, #0
   127ac:	str	r3, [sp, #4]
   127b0:	beq	128c8 <error@@Base+0x2c0>
   127b4:	mov	r0, r5
   127b8:	bl	10aa4 <strlen@plt>
   127bc:	mov	r2, r0
   127c0:	mov	r1, r5
   127c4:	ldr	r0, [pc, #280]	; 128e4 <error@@Base+0x2dc>
   127c8:	bl	10b1c <strncmp@plt>
   127cc:	cmp	r0, #0
   127d0:	beq	12788 <error@@Base+0x180>
   127d4:	add	r0, r4, #1
   127d8:	ldr	r3, [sp, #4]
   127dc:	cmp	r0, fp
   127e0:	addlt	sl, r7, sl
   127e4:	movge	r1, #0
   127e8:	ldrlt	r1, [sl, #4]
   127ec:	cmp	r9, #0
   127f0:	beq	128b0 <error@@Base+0x2a8>
   127f4:	mov	ip, #0
   127f8:	sxth	r2, ip
   127fc:	add	r2, r2, r2, lsl #1
   12800:	add	lr, r9, r2, lsl #2
   12804:	ldrb	r2, [r9, r2, lsl #2]
   12808:	cmp	r2, #0
   1280c:	beq	128b0 <error@@Base+0x2a8>
   12810:	cmp	r3, r2
   12814:	add	ip, ip, #1
   12818:	bne	127f8 <error@@Base+0x1f0>
   1281c:	ldr	r3, [lr, #4]
   12820:	cmp	r3, #0
   12824:	bne	12858 <error@@Base+0x250>
   12828:	ldr	r3, [lr, #8]
   1282c:	cmp	r3, #0
   12830:	beq	128b0 <error@@Base+0x2a8>
   12834:	ldrb	r2, [r5, #2]
   12838:	cmp	r2, #0
   1283c:	bne	128b0 <error@@Base+0x2a8>
   12840:	ldrb	r2, [r3]
   12844:	cmp	r2, #0
   12848:	bne	128bc <error@@Base+0x2b4>
   1284c:	mov	r2, #1
   12850:	strb	r2, [r3]
   12854:	b	12890 <error@@Base+0x288>
   12858:	ldrb	r2, [r5, #2]
   1285c:	cmp	r1, #0
   12860:	cmpeq	r2, #0
   12864:	beq	12828 <error@@Base+0x220>
   12868:	ldr	ip, [r3]
   1286c:	cmp	ip, #0
   12870:	bne	128bc <error@@Base+0x2b4>
   12874:	cmp	r2, #0
   12878:	sxth	r0, r0
   1287c:	addne	r1, r5, #2
   12880:	str	r1, [r3]
   12884:	ldrb	r3, [r5, #2]
   12888:	cmp	r3, #0
   1288c:	moveq	r4, r0
   12890:	add	r4, r4, #1
   12894:	sxth	r4, r4
   12898:	ldr	fp, [r8]
   1289c:	cmp	r4, fp
   128a0:	blt	12790 <error@@Base+0x188>
   128a4:	str	r6, [r8]
   128a8:	add	sp, sp, #12
   128ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128b0:	ldr	r0, [pc, #48]	; 128e8 <error@@Base+0x2e0>
   128b4:	mov	r1, r5
   128b8:	bl	1268c <error@@Base+0x84>
   128bc:	mov	r1, r5
   128c0:	ldr	r0, [pc, #36]	; 128ec <error@@Base+0x2e4>
   128c4:	b	128b8 <error@@Base+0x2b0>
   128c8:	add	r3, r6, #1
   128cc:	str	r5, [r7, r6, lsl #2]
   128d0:	sxth	r6, r3
   128d4:	b	12890 <error@@Base+0x288>
   128d8:	andeq	pc, r2, r0, asr #7
   128dc:	andeq	r2, r1, r0, ror #12
   128e0:	ldrdeq	r7, [r2], -r4
   128e4:	andeq	r6, r1, pc, lsr #19
   128e8:			; <UNDEFINED> instruction: 0x000169b5
   128ec:	andeq	r6, r1, r4, asr #19
   128f0:	push	{r0, r1, r2, lr}
   128f4:	mov	r3, r0
   128f8:	ldr	r2, [pc, #28]	; 1291c <error@@Base+0x314>
   128fc:	str	r1, [sp]
   12900:	ldr	r0, [pc, #24]	; 12920 <error@@Base+0x318>
   12904:	ldr	r1, [pc, #24]	; 12924 <error@@Base+0x31c>
   12908:	ldr	r2, [r2]
   1290c:	ldr	r0, [r0]
   12910:	bl	10ab0 <fprintf@plt>
   12914:	add	sp, sp, #12
   12918:	pop	{pc}		; (ldr pc, [sp], #4)
   1291c:	andeq	pc, r2, r0, asr #7
   12920:	andeq	r7, r2, r0, ror #1
   12924:	andeq	r6, r1, r8, ror r9
   12928:	push	{r4, r5, r6, lr}
   1292c:	mov	r4, r0
   12930:	uxtb	r6, r1
   12934:	mov	r0, #1
   12938:	mov	r1, #16
   1293c:	mov	r5, r2
   12940:	bl	12644 <error@@Base+0x3c>
   12944:	mov	r1, r0
   12948:	mov	r0, r4
   1294c:	strb	r6, [r1, #8]
   12950:	str	r5, [r1, #12]
   12954:	pop	{r4, r5, r6, lr}
   12958:	b	113a4 <__assert_fail@plt+0x864>
   1295c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12960:	mov	r6, r0
   12964:	mov	r0, r1
   12968:	clz	r1, r1
   1296c:	sub	sp, sp, #116	; 0x74
   12970:	lsr	r1, r1, #5
   12974:	ldrb	r3, [r2]
   12978:	cmp	r3, #0
   1297c:	moveq	r1, #0
   12980:	cmp	r1, #0
   12984:	beq	12994 <error@@Base+0x38c>
   12988:	ldr	r1, [pc, #732]	; 12c6c <error@@Base+0x664>
   1298c:	ldr	r0, [pc, #732]	; 12c70 <error@@Base+0x668>
   12990:	bl	1268c <error@@Base+0x84>
   12994:	mov	r4, r2
   12998:	ldr	r1, [pc, #724]	; 12c74 <error@@Base+0x66c>
   1299c:	ldr	r7, [r6, #4]
   129a0:	bl	126cc <error@@Base+0xc4>
   129a4:	ldrb	r3, [r4]
   129a8:	mov	r5, r0
   129ac:	cmp	r3, #0
   129b0:	beq	12a3c <error@@Base+0x434>
   129b4:	mov	r2, r0
   129b8:	mov	r1, #99	; 0x63
   129bc:	add	r0, sp, #12
   129c0:	bl	109e4 <fgets@plt>
   129c4:	cmp	r0, #0
   129c8:	beq	12a2c <error@@Base+0x424>
   129cc:	mov	r2, #51	; 0x33
   129d0:	ldr	r1, [pc, #672]	; 12c78 <error@@Base+0x670>
   129d4:	add	r0, sp, #12
   129d8:	bl	10b1c <strncmp@plt>
   129dc:	subs	r8, r0, #0
   129e0:	bne	12a2c <error@@Base+0x424>
   129e4:	ldr	r9, [pc, #656]	; 12c7c <error@@Base+0x674>
   129e8:	mov	r2, r5
   129ec:	mov	r1, #99	; 0x63
   129f0:	add	r0, sp, #12
   129f4:	bl	109e4 <fgets@plt>
   129f8:	cmp	r0, #0
   129fc:	beq	12a24 <error@@Base+0x41c>
   12a00:	mov	r1, r9
   12a04:	add	r0, sp, #12
   12a08:	bl	109b4 <strcmp@plt>
   12a0c:	cmp	r0, #0
   12a10:	bne	129e8 <error@@Base+0x3e0>
   12a14:	add	r8, r8, #1
   12a18:	sxth	r8, r8
   12a1c:	cmp	r8, #2
   12a20:	bne	129e8 <error@@Base+0x3e0>
   12a24:	mov	r3, #1
   12a28:	b	12a38 <error@@Base+0x430>
   12a2c:	mov	r0, r5
   12a30:	bl	10a08 <rewind@plt>
   12a34:	mov	r3, #0
   12a38:	strb	r3, [r4, #11]
   12a3c:	ldr	r8, [r4, #4]
   12a40:	mov	r0, r5
   12a44:	mov	fp, #0
   12a48:	ldrb	r3, [r4, #1]
   12a4c:	cmp	r8, #0
   12a50:	moveq	r8, #94	; 0x5e
   12a54:	str	r3, [sp, #4]
   12a58:	bl	10b34 <getc@plt>
   12a5c:	cmn	r0, #1
   12a60:	bne	12a8c <error@@Base+0x484>
   12a64:	mov	r0, r5
   12a68:	bl	124f0 <__assert_fail@plt+0x19b0>
   12a6c:	ldrb	r3, [r4, #9]
   12a70:	cmp	r3, #0
   12a74:	bne	12b2c <error@@Base+0x524>
   12a78:	ldrb	r3, [r4, #10]
   12a7c:	cmp	r3, #0
   12a80:	bne	12c44 <error@@Base+0x63c>
   12a84:	add	sp, sp, #116	; 0x74
   12a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a8c:	ldr	r3, [pc, #492]	; 12c80 <error@@Base+0x678>
   12a90:	ldrsb	r9, [r3, r0]
   12a94:	cmp	r9, #0
   12a98:	bgt	12aa4 <error@@Base+0x49c>
   12a9c:	ldr	r0, [pc, #480]	; 12c84 <error@@Base+0x67c>
   12aa0:	bl	12608 <error@@Base>
   12aa4:	cmp	r9, #1
   12aa8:	strb	r0, [sp, #8]
   12aac:	beq	12ad4 <error@@Base+0x4cc>
   12ab0:	sub	sl, r9, #1
   12ab4:	mov	r3, r5
   12ab8:	mov	r2, sl
   12abc:	mov	r1, #1
   12ac0:	add	r0, sp, #9
   12ac4:	bl	10a38 <fread@plt>
   12ac8:	cmp	sl, r0
   12acc:	ldrne	r0, [pc, #436]	; 12c88 <error@@Base+0x680>
   12ad0:	bne	12aa0 <error@@Base+0x498>
   12ad4:	add	r2, sp, #12
   12ad8:	mov	r1, #4
   12adc:	add	r0, sp, #8
   12ae0:	bl	10a44 <utf8proc_iterate@plt>
   12ae4:	cmp	r9, r0
   12ae8:	beq	12af4 <error@@Base+0x4ec>
   12aec:	bl	10b04 <utf8proc_errmsg@plt>
   12af0:	b	12aa0 <error@@Base+0x498>
   12af4:	ldr	r3, [sp, #4]
   12af8:	ldr	r2, [sp, #12]
   12afc:	cmp	r3, #0
   12b00:	beq	12b10 <error@@Base+0x508>
   12b04:	cmp	r8, r2
   12b08:	moveq	fp, #1
   12b0c:	beq	12b20 <error@@Base+0x518>
   12b10:	mov	r1, fp
   12b14:	mov	r0, r6
   12b18:	mov	fp, #0
   12b1c:	bl	12928 <error@@Base+0x320>
   12b20:	mov	r0, r5
   12b24:	bl	10b34 <getc@plt>
   12b28:	b	12a5c <error@@Base+0x454>
   12b2c:	cmp	r7, #0
   12b30:	mov	sl, #32
   12b34:	ldrne	r8, [r7, #4]
   12b38:	ldreq	r8, [r6]
   12b3c:	mov	r5, r8
   12b40:	cmp	r5, #0
   12b44:	bne	12b90 <error@@Base+0x588>
   12b48:	cmp	r8, #0
   12b4c:	beq	12a78 <error@@Base+0x470>
   12b50:	eor	r3, r5, #1
   12b54:	ldr	r9, [r8, #4]
   12b58:	ldr	r2, [r8, #12]
   12b5c:	cmp	r2, #32
   12b60:	bne	12be4 <error@@Base+0x5dc>
   12b64:	cmp	r9, #0
   12b68:	moveq	r3, #1
   12b6c:	cmp	r3, #0
   12b70:	bne	12c14 <error@@Base+0x60c>
   12b74:	ldr	r3, [r9, #12]
   12b78:	cmp	r3, #10
   12b7c:	cmpne	r3, #32
   12b80:	beq	12c14 <error@@Base+0x60c>
   12b84:	subs	r5, r2, #10
   12b88:	movne	r5, #1
   12b8c:	b	12c0c <error@@Base+0x604>
   12b90:	ldr	r9, [r5, #12]
   12b94:	mov	r0, r9
   12b98:	bl	109d8 <utf8proc_get_property@plt>
   12b9c:	cmp	r9, #13
   12ba0:	bhi	12bd4 <error@@Base+0x5cc>
   12ba4:	cmp	r9, #11
   12ba8:	bcs	12bdc <error@@Base+0x5d4>
   12bac:	cmp	r9, #9
   12bb0:	beq	12bdc <error@@Base+0x5d4>
   12bb4:	cmp	r9, #10
   12bb8:	beq	12bcc <error@@Base+0x5c4>
   12bbc:	ldrsh	r3, [r0]
   12bc0:	sub	r3, r3, #23
   12bc4:	cmp	r3, #2
   12bc8:	bls	12bdc <error@@Base+0x5d4>
   12bcc:	ldr	r5, [r5, #4]
   12bd0:	b	12b40 <error@@Base+0x538>
   12bd4:	cmp	r9, #160	; 0xa0
   12bd8:	bne	12bbc <error@@Base+0x5b4>
   12bdc:	str	sl, [r5, #12]
   12be0:	b	12bcc <error@@Base+0x5c4>
   12be4:	cmp	r2, #10
   12be8:	movne	r3, #0
   12bec:	andeq	r3, r3, #1
   12bf0:	cmp	r3, #0
   12bf4:	beq	12b84 <error@@Base+0x57c>
   12bf8:	mov	r0, r6
   12bfc:	mov	r1, r8
   12c00:	bl	113cc <__assert_fail@plt+0x88c>
   12c04:	mov	r0, r8
   12c08:	bl	109cc <free@plt>
   12c0c:	mov	r8, r9
   12c10:	b	12b48 <error@@Base+0x540>
   12c14:	cmp	r9, #0
   12c18:	movne	r3, r5
   12c1c:	moveq	r3, #0
   12c20:	cmp	r3, #0
   12c24:	beq	12bf8 <error@@Base+0x5f0>
   12c28:	ldr	r3, [r9, #12]
   12c2c:	cmp	r3, #32
   12c30:	ldrbeq	r3, [r9, #8]
   12c34:	ldrbeq	r2, [r8, #8]
   12c38:	orreq	r3, r3, r2
   12c3c:	strbeq	r3, [r9, #8]
   12c40:	b	12bf8 <error@@Base+0x5f0>
   12c44:	cmp	r7, #0
   12c48:	ldrne	r4, [r7, #4]
   12c4c:	ldreq	r4, [r6]
   12c50:	cmp	r4, #0
   12c54:	beq	12a84 <error@@Base+0x47c>
   12c58:	ldr	r0, [r4, #12]
   12c5c:	bl	10a20 <utf8proc_tolower@plt>
   12c60:	str	r0, [r4, #12]
   12c64:	ldr	r4, [r4, #4]
   12c68:	b	12c50 <error@@Base+0x648>
   12c6c:	ldrdeq	r6, [r1], -r5
   12c70:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   12c74:	ldrdeq	r3, [r1], -r1
   12c78:	andeq	r6, r1, pc, ror #19
   12c7c:	andeq	r6, r1, r7, lsr #20
   12c80:	andeq	r6, r2, r8, lsl #28
   12c84:	andeq	r6, r1, pc, asr sl
   12c88:	andeq	r6, r1, r7, ror sl
   12c8c:	push	{r4, lr}
   12c90:	bl	109f0 <utf8proc_encode_char@plt>
   12c94:	cmp	r0, #0
   12c98:	bgt	12ca4 <error@@Base+0x69c>
   12c9c:	ldr	r0, [pc, #8]	; 12cac <error@@Base+0x6a4>
   12ca0:	bl	12608 <error@@Base>
   12ca4:	sxtb	r0, r0
   12ca8:	pop	{r4, pc}
   12cac:	andeq	r6, r1, pc, lsl #21
   12cb0:	push	{r4, r5, r6, r7, r8, lr}
   12cb4:	uxtb	r4, r0
   12cb8:	mov	r7, r1
   12cbc:	cmp	r4, #0
   12cc0:	mov	r6, r2
   12cc4:	uxtb	r8, r3
   12cc8:	beq	12cdc <error@@Base+0x6d4>
   12ccc:	mov	r1, r2
   12cd0:	mov	r0, #94	; 0x5e
   12cd4:	bl	12c8c <error@@Base+0x684>
   12cd8:	sxth	r4, r0
   12cdc:	cmp	r7, #10
   12ce0:	add	r5, r6, r4
   12ce4:	bne	12d04 <error@@Base+0x6fc>
   12ce8:	ldr	r2, [pc, #164]	; 12d94 <error@@Base+0x78c>
   12cec:	cmp	r8, #0
   12cf0:	mov	r0, r5
   12cf4:	pop	{r4, r5, r6, r7, r8, lr}
   12cf8:	ldr	r1, [pc, #152]	; 12d98 <error@@Base+0x790>
   12cfc:	moveq	r1, r2
   12d00:	b	10aec <sprintf@plt>
   12d04:	mov	r0, r7
   12d08:	bl	109d8 <utf8proc_get_property@plt>
   12d0c:	cmp	r7, #32
   12d10:	beq	12d30 <error@@Base+0x728>
   12d14:	ldrh	r3, [r0]
   12d18:	cmp	r3, #29
   12d1c:	bhi	12d78 <error@@Base+0x770>
   12d20:	ldr	r2, [pc, #116]	; 12d9c <error@@Base+0x794>
   12d24:	mov	r1, #1
   12d28:	ands	r3, r2, r1, lsl r3
   12d2c:	beq	12d78 <error@@Base+0x770>
   12d30:	mov	r0, r7
   12d34:	bl	10a98 <utf8proc_category@plt>
   12d38:	sub	r0, r0, #6
   12d3c:	cmp	r0, #2
   12d40:	bhi	12d58 <error@@Base+0x750>
   12d44:	mov	r1, r5
   12d48:	movw	r0, #9676	; 0x25cc
   12d4c:	bl	12c8c <error@@Base+0x684>
   12d50:	add	r4, r0, r4
   12d54:	sxth	r4, r4
   12d58:	add	r1, r6, r4
   12d5c:	mov	r0, r7
   12d60:	bl	12c8c <error@@Base+0x684>
   12d64:	add	r0, r0, r4
   12d68:	mov	r3, #0
   12d6c:	sxth	r0, r0
   12d70:	strb	r3, [r6, r0]
   12d74:	pop	{r4, r5, r6, r7, r8, pc}
   12d78:	cmp	r7, #255	; 0xff
   12d7c:	mov	r2, r7
   12d80:	mov	r0, r5
   12d84:	ldrls	r1, [pc, #20]	; 12da0 <error@@Base+0x798>
   12d88:	pop	{r4, r5, r6, r7, r8, lr}
   12d8c:	ldrhi	r1, [pc, #16]	; 12da4 <error@@Base+0x79c>
   12d90:	b	10aec <sprintf@plt>
   12d94:	andeq	r6, r1, r3, lsl #19
   12d98:	andeq	r6, r1, r6, lsr #21
   12d9c:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   12da0:	andeq	r6, r1, fp, lsr #21
   12da4:			; <UNDEFINED> instruction: 0x00016ab2
   12da8:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12dac:	mov	r5, r2
   12db0:	mov	r6, r0
   12db4:	mov	r0, r1
   12db8:	ldr	r1, [pc, #124]	; 12e3c <error@@Base+0x834>
   12dbc:	bl	126cc <error@@Base+0xc4>
   12dc0:	cmp	r5, #0
   12dc4:	mov	r4, r0
   12dc8:	beq	12df8 <error@@Base+0x7f0>
   12dcc:	mov	r1, r0
   12dd0:	ldr	r0, [pc, #104]	; 12e40 <error@@Base+0x838>
   12dd4:	bl	10b10 <fputs@plt>
   12dd8:	mov	r1, r4
   12ddc:	ldr	r0, [pc, #96]	; 12e44 <error@@Base+0x83c>
   12de0:	bl	10b10 <fputs@plt>
   12de4:	mov	r0, r4
   12de8:	blx	r5
   12dec:	mov	r1, r4
   12df0:	ldr	r0, [pc, #76]	; 12e44 <error@@Base+0x83c>
   12df4:	bl	10b10 <fputs@plt>
   12df8:	ldr	r5, [r6]
   12dfc:	cmp	r5, #0
   12e00:	bne	12e14 <error@@Base+0x80c>
   12e04:	mov	r0, r4
   12e08:	bl	124f0 <__assert_fail@plt+0x19b0>
   12e0c:	add	sp, sp, #16
   12e10:	pop	{r4, r5, r6, pc}
   12e14:	ldrb	r0, [r5, #8]
   12e18:	mov	r3, #0
   12e1c:	add	r2, sp, #4
   12e20:	ldr	r1, [r5, #12]
   12e24:	bl	12cb0 <error@@Base+0x6a8>
   12e28:	mov	r1, r4
   12e2c:	add	r0, sp, #4
   12e30:	bl	10b10 <fputs@plt>
   12e34:	ldr	r5, [r5, #4]
   12e38:	b	12dfc <error@@Base+0x7f4>
   12e3c:			; <UNDEFINED> instruction: 0x000133b8
   12e40:	andeq	r6, r1, pc, ror #19
   12e44:	andeq	r6, r1, r7, lsr #20
   12e48:	push	{r0, r1, r4, r5, r6, lr}
   12e4c:	mov	r3, #0
   12e50:	mov	r5, r0
   12e54:	mov	r4, r1
   12e58:	str	r3, [sp, #4]
   12e5c:	ldrb	r3, [r4]
   12e60:	cmp	r3, #0
   12e64:	bne	12e74 <error@@Base+0x86c>
   12e68:	mov	r0, #1
   12e6c:	add	sp, sp, #8
   12e70:	pop	{r4, r5, r6, pc}
   12e74:	add	r2, sp, #4
   12e78:	mvn	r1, #0
   12e7c:	mov	r0, r4
   12e80:	bl	10a44 <utf8proc_iterate@plt>
   12e84:	subs	r6, r0, #0
   12e88:	ble	12ea4 <error@@Base+0x89c>
   12e8c:	mov	r1, #0
   12e90:	mov	r0, r5
   12e94:	ldr	r2, [sp, #4]
   12e98:	add	r4, r4, r6
   12e9c:	bl	12928 <error@@Base+0x320>
   12ea0:	b	12e5c <error@@Base+0x854>
   12ea4:	mov	r0, #0
   12ea8:	b	12e6c <error@@Base+0x864>
   12eac:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb0:	mov	r8, r0
   12eb4:	mov	r9, r1
   12eb8:	ldr	sl, [pc, #248]	; 12fb8 <error@@Base+0x9b0>
   12ebc:	mov	r7, sl
   12ec0:	ldr	r3, [sl]
   12ec4:	mov	r4, r9
   12ec8:	mov	r5, r8
   12ecc:	ldr	fp, [r3, r8, lsl #2]
   12ed0:	cmp	r5, r4
   12ed4:	blt	12f14 <error@@Base+0x90c>
   12ed8:	ldr	r3, [r7]
   12edc:	sub	r1, r4, #1
   12ee0:	cmp	r8, r1
   12ee4:	str	fp, [r3, r4, lsl #2]
   12ee8:	bge	12ef4 <error@@Base+0x8ec>
   12eec:	mov	r0, r8
   12ef0:	bl	12eac <error@@Base+0x8a4>
   12ef4:	add	r8, r5, #1
   12ef8:	cmp	r8, r9
   12efc:	blt	12ec0 <error@@Base+0x8b8>
   12f00:	add	sp, sp, #12
   12f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f08:	sub	r4, r4, #1
   12f0c:	cmp	r5, r4
   12f10:	beq	12fb0 <error@@Base+0x9a8>
   12f14:	ldrd	r2, [r7]
   12f18:	mov	r0, fp
   12f1c:	ldr	r1, [r2, r4, lsl #2]
   12f20:	blx	r3
   12f24:	cmp	r0, #0
   12f28:	blt	12f08 <error@@Base+0x900>
   12f2c:	cmp	r5, r4
   12f30:	beq	12fb0 <error@@Base+0x9a8>
   12f34:	ldr	r2, [r7]
   12f38:	lsl	r3, r4, #2
   12f3c:	add	r6, r5, #1
   12f40:	ldr	r1, [r2, r4, lsl #2]
   12f44:	str	r1, [r2, r5, lsl #2]
   12f48:	cmp	r6, r4
   12f4c:	lsl	r2, r6, #2
   12f50:	ldr	r1, [r7]
   12f54:	bge	12fa4 <error@@Base+0x99c>
   12f58:	mov	r0, fp
   12f5c:	ldr	r1, [r1, r6, lsl #2]
   12f60:	str	r3, [sp]
   12f64:	ldr	r5, [r7, #4]
   12f68:	str	r2, [sp, #4]
   12f6c:	blx	r5
   12f70:	cmp	r0, #0
   12f74:	ldr	r3, [sp]
   12f78:	ldr	r2, [sp, #4]
   12f7c:	bgt	12f9c <error@@Base+0x994>
   12f80:	ldr	r1, [r7]
   12f84:	sub	r5, r4, #1
   12f88:	ldr	r2, [r1, r2]
   12f8c:	str	r2, [r1, r3]
   12f90:	mov	r4, r5
   12f94:	mov	r5, r6
   12f98:	b	12ed0 <error@@Base+0x8c8>
   12f9c:	add	r6, r6, #1
   12fa0:	b	12f48 <error@@Base+0x940>
   12fa4:	moveq	r5, r6
   12fa8:	bne	12f80 <error@@Base+0x978>
   12fac:	b	12f90 <error@@Base+0x988>
   12fb0:	mov	r6, r5
   12fb4:	b	12f90 <error@@Base+0x988>
   12fb8:	strdeq	r9, [r2], -r8
   12fbc:	cmp	r0, #1
   12fc0:	bxle	lr
   12fc4:	ldr	r3, [pc, #12]	; 12fd8 <error@@Base+0x9d0>
   12fc8:	stm	r3, {r1, r2}
   12fcc:	sub	r1, r0, #1
   12fd0:	mov	r0, #0
   12fd4:	b	12eac <error@@Base+0x8a4>
   12fd8:	strdeq	r9, [r2], -r8
   12fdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fe0:	mov	r7, r0
   12fe4:	ldr	r6, [pc, #72]	; 13034 <error@@Base+0xa2c>
   12fe8:	ldr	r5, [pc, #72]	; 13038 <error@@Base+0xa30>
   12fec:	add	r6, pc, r6
   12ff0:	add	r5, pc, r5
   12ff4:	sub	r6, r6, r5
   12ff8:	mov	r8, r1
   12ffc:	mov	r9, r2
   13000:	bl	10988 <calloc@plt-0x20>
   13004:	asrs	r6, r6, #2
   13008:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1300c:	mov	r4, #0
   13010:	add	r4, r4, #1
   13014:	ldr	r3, [r5], #4
   13018:	mov	r2, r9
   1301c:	mov	r1, r8
   13020:	mov	r0, r7
   13024:	blx	r3
   13028:	cmp	r6, r4
   1302c:	bne	13010 <error@@Base+0xa08>
   13030:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13034:	andeq	r3, r1, r0, lsl lr
   13038:	andeq	r3, r1, r8, lsl #28
   1303c:	bx	lr
   13040:	mov	r2, r1
   13044:	mov	r1, r0
   13048:	mov	r0, #3
   1304c:	b	10a2c <__xstat@plt>

Disassembly of section .fini:

00013050 <.fini>:
   13050:	push	{r3, lr}
   13054:	pop	{r3, pc}
