
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011368 <.init>:
   11368:	push	{r3, lr}
   1136c:	bl	1174c <__assert_fail@plt+0x4c>
   11370:	pop	{r3, pc}

Disassembly of section .plt:

00011374 <pthread_mutex_unlock@plt-0x14>:
   11374:	push	{lr}		; (str lr, [sp, #-4]!)
   11378:	ldr	lr, [pc, #4]	; 11384 <pthread_mutex_unlock@plt-0x4>
   1137c:	add	lr, pc, lr
   11380:	ldr	pc, [lr, #8]!
   11384:	andeq	fp, r2, ip, ror ip

00011388 <pthread_mutex_unlock@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #176128	; 0x2b000
   11390:	ldr	pc, [ip, #3196]!	; 0xc7c

00011394 <calloc@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #176128	; 0x2b000
   1139c:	ldr	pc, [ip, #3188]!	; 0xc74

000113a0 <fputs_unlocked@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #176128	; 0x2b000
   113a8:	ldr	pc, [ip, #3180]!	; 0xc6c

000113ac <wctype@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #176128	; 0x2b000
   113b4:	ldr	pc, [ip, #3172]!	; 0xc64

000113b8 <wcrtomb@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #176128	; 0x2b000
   113c0:	ldr	pc, [ip, #3164]!	; 0xc5c

000113c4 <iswctype@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #176128	; 0x2b000
   113cc:	ldr	pc, [ip, #3156]!	; 0xc54

000113d0 <strcmp@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #176128	; 0x2b000
   113d8:	ldr	pc, [ip, #3148]!	; 0xc4c

000113dc <__gmpz_tdiv_q@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #176128	; 0x2b000
   113e4:	ldr	pc, [ip, #3140]!	; 0xc44

000113e8 <strcspn@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #176128	; 0x2b000
   113f0:	ldr	pc, [ip, #3132]!	; 0xc3c

000113f4 <pthread_mutex_destroy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #176128	; 0x2b000
   113fc:	ldr	pc, [ip, #3124]!	; 0xc34

00011400 <fflush@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #176128	; 0x2b000
   11408:	ldr	pc, [ip, #3116]!	; 0xc2c

0001140c <wcwidth@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #176128	; 0x2b000
   11414:	ldr	pc, [ip, #3108]!	; 0xc24

00011418 <memmove@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #176128	; 0x2b000
   11420:	ldr	pc, [ip, #3100]!	; 0xc1c

00011424 <free@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #176128	; 0x2b000
   1142c:	ldr	pc, [ip, #3092]!	; 0xc14

00011430 <pthread_mutex_lock@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #176128	; 0x2b000
   11438:	ldr	pc, [ip, #3084]!	; 0xc0c

0001143c <_exit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #176128	; 0x2b000
   11444:	ldr	pc, [ip, #3076]!	; 0xc04

00011448 <memcpy@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #176128	; 0x2b000
   11450:	ldr	pc, [ip, #3068]!	; 0xbfc

00011454 <__gmpz_sub@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #176128	; 0x2b000
   1145c:	ldr	pc, [ip, #3060]!	; 0xbf4

00011460 <pthread_mutex_init@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #176128	; 0x2b000
   11468:	ldr	pc, [ip, #3052]!	; 0xbec

0001146c <towlower@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #176128	; 0x2b000
   11474:	ldr	pc, [ip, #3044]!	; 0xbe4

00011478 <mbsinit@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #176128	; 0x2b000
   11480:	ldr	pc, [ip, #3036]!	; 0xbdc

00011484 <memcmp@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #176128	; 0x2b000
   1148c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011490 <dcgettext@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #176128	; 0x2b000
   11498:	ldr	pc, [ip, #3020]!	; 0xbcc

0001149c <__gmpz_get_str@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #176128	; 0x2b000
   114a4:	ldr	pc, [ip, #3012]!	; 0xbc4

000114a8 <realloc@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #176128	; 0x2b000
   114b0:	ldr	pc, [ip, #3004]!	; 0xbbc

000114b4 <__gmpz_mul@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #176128	; 0x2b000
   114bc:	ldr	pc, [ip, #2996]!	; 0xbb4

000114c0 <textdomain@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #176128	; 0x2b000
   114c8:	ldr	pc, [ip, #2988]!	; 0xbac

000114cc <iswcntrl@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #176128	; 0x2b000
   114d4:	ldr	pc, [ip, #2980]!	; 0xba4

000114d8 <__gmpz_out_str@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #176128	; 0x2b000
   114e0:	ldr	pc, [ip, #2972]!	; 0xb9c

000114e4 <iswprint@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #176128	; 0x2b000
   114ec:	ldr	pc, [ip, #2964]!	; 0xb94

000114f0 <fwrite@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #176128	; 0x2b000
   114f8:	ldr	pc, [ip, #2956]!	; 0xb8c

000114fc <lseek64@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #176128	; 0x2b000
   11504:	ldr	pc, [ip, #2948]!	; 0xb84

00011508 <__ctype_get_mb_cur_max@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #176128	; 0x2b000
   11510:	ldr	pc, [ip, #2940]!	; 0xb7c

00011514 <__fpending@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #176128	; 0x2b000
   1151c:	ldr	pc, [ip, #2932]!	; 0xb74

00011520 <mbrtowc@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #176128	; 0x2b000
   11528:	ldr	pc, [ip, #2924]!	; 0xb6c

0001152c <error@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #176128	; 0x2b000
   11534:	ldr	pc, [ip, #2916]!	; 0xb64

00011538 <strcoll@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #176128	; 0x2b000
   11540:	ldr	pc, [ip, #2908]!	; 0xb5c

00011544 <puts@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #176128	; 0x2b000
   1154c:	ldr	pc, [ip, #2900]!	; 0xb54

00011550 <malloc@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #176128	; 0x2b000
   11558:	ldr	pc, [ip, #2892]!	; 0xb4c

0001155c <__libc_start_main@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #176128	; 0x2b000
   11564:	ldr	pc, [ip, #2884]!	; 0xb44

00011568 <__freading@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #176128	; 0x2b000
   11570:	ldr	pc, [ip, #2876]!	; 0xb3c

00011574 <__ctype_tolower_loc@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #176128	; 0x2b000
   1157c:	ldr	pc, [ip, #2868]!	; 0xb34

00011580 <__ctype_toupper_loc@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #176128	; 0x2b000
   11588:	ldr	pc, [ip, #2860]!	; 0xb2c

0001158c <__gmon_start__@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #176128	; 0x2b000
   11594:	ldr	pc, [ip, #2852]!	; 0xb24

00011598 <getopt_long@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #176128	; 0x2b000
   115a0:	ldr	pc, [ip, #2844]!	; 0xb1c

000115a4 <__ctype_b_loc@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #176128	; 0x2b000
   115ac:	ldr	pc, [ip, #2836]!	; 0xb14

000115b0 <exit@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #176128	; 0x2b000
   115b8:	ldr	pc, [ip, #2828]!	; 0xb0c

000115bc <strlen@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #176128	; 0x2b000
   115c4:	ldr	pc, [ip, #2820]!	; 0xb04

000115c8 <strchr@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #176128	; 0x2b000
   115d0:	ldr	pc, [ip, #2812]!	; 0xafc

000115d4 <__gmpz_tdiv_r@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #176128	; 0x2b000
   115dc:	ldr	pc, [ip, #2804]!	; 0xaf4

000115e0 <__gmpz_clear@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #176128	; 0x2b000
   115e8:	ldr	pc, [ip, #2796]!	; 0xaec

000115ec <__errno_location@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #176128	; 0x2b000
   115f4:	ldr	pc, [ip, #2788]!	; 0xae4

000115f8 <iswalnum@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #176128	; 0x2b000
   11600:	ldr	pc, [ip, #2780]!	; 0xadc

00011604 <__cxa_atexit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #176128	; 0x2b000
   1160c:	ldr	pc, [ip, #2772]!	; 0xad4

00011610 <memset@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #176128	; 0x2b000
   11618:	ldr	pc, [ip, #2764]!	; 0xacc

0001161c <btowc@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #176128	; 0x2b000
   11624:	ldr	pc, [ip, #2756]!	; 0xac4

00011628 <__printf_chk@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #176128	; 0x2b000
   11630:	ldr	pc, [ip, #2748]!	; 0xabc

00011634 <fileno@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #176128	; 0x2b000
   1163c:	ldr	pc, [ip, #2740]!	; 0xab4

00011640 <__fprintf_chk@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #176128	; 0x2b000
   11648:	ldr	pc, [ip, #2732]!	; 0xaac

0001164c <memchr@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #176128	; 0x2b000
   11654:	ldr	pc, [ip, #2724]!	; 0xaa4

00011658 <fclose@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #176128	; 0x2b000
   11660:	ldr	pc, [ip, #2716]!	; 0xa9c

00011664 <fseeko64@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #176128	; 0x2b000
   1166c:	ldr	pc, [ip, #2708]!	; 0xa94

00011670 <__gmpz_init_set_ui@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #176128	; 0x2b000
   11678:	ldr	pc, [ip, #2700]!	; 0xa8c

0001167c <__overflow@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #176128	; 0x2b000
   11684:	ldr	pc, [ip, #2692]!	; 0xa84

00011688 <setlocale@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #176128	; 0x2b000
   11690:	ldr	pc, [ip, #2684]!	; 0xa7c

00011694 <strrchr@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #176128	; 0x2b000
   1169c:	ldr	pc, [ip, #2676]!	; 0xa74

000116a0 <nl_langinfo@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #176128	; 0x2b000
   116a8:	ldr	pc, [ip, #2668]!	; 0xa6c

000116ac <__gmpz_add@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #176128	; 0x2b000
   116b4:	ldr	pc, [ip, #2660]!	; 0xa64

000116b8 <__gmpz_init_set_str@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #176128	; 0x2b000
   116c0:	ldr	pc, [ip, #2652]!	; 0xa5c

000116c4 <bindtextdomain@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #176128	; 0x2b000
   116cc:	ldr	pc, [ip, #2644]!	; 0xa54

000116d0 <towupper@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #176128	; 0x2b000
   116d8:	ldr	pc, [ip, #2636]!	; 0xa4c

000116dc <strncmp@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #176128	; 0x2b000
   116e4:	ldr	pc, [ip, #2628]!	; 0xa44

000116e8 <abort@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #176128	; 0x2b000
   116f0:	ldr	pc, [ip, #2620]!	; 0xa3c

000116f4 <__mempcpy_chk@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #176128	; 0x2b000
   116fc:	ldr	pc, [ip, #2612]!	; 0xa34

00011700 <__assert_fail@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #176128	; 0x2b000
   11708:	ldr	pc, [ip, #2604]!	; 0xa2c

Disassembly of section .text:

00011710 <.text>:
   11710:	mov	fp, #0
   11714:	mov	lr, #0
   11718:	pop	{r1}		; (ldr r1, [sp], #4)
   1171c:	mov	r2, sp
   11720:	push	{r2}		; (str r2, [sp, #-4]!)
   11724:	push	{r0}		; (str r0, [sp, #-4]!)
   11728:	ldr	ip, [pc, #16]	; 11740 <__assert_fail@plt+0x40>
   1172c:	push	{ip}		; (str ip, [sp, #-4]!)
   11730:	ldr	r0, [pc, #12]	; 11744 <__assert_fail@plt+0x44>
   11734:	ldr	r3, [pc, #12]	; 11748 <__assert_fail@plt+0x48>
   11738:	bl	1155c <__libc_start_main@plt>
   1173c:	bl	116e8 <abort@plt>
   11740:	andeq	fp, r2, r0, ror #1
   11744:	andeq	r1, r1, ip, lsr fp
   11748:	andeq	fp, r2, r0, lsl #1
   1174c:	ldr	r3, [pc, #20]	; 11768 <__assert_fail@plt+0x68>
   11750:	ldr	r2, [pc, #20]	; 1176c <__assert_fail@plt+0x6c>
   11754:	add	r3, pc, r3
   11758:	ldr	r2, [r3, r2]
   1175c:	cmp	r2, #0
   11760:	bxeq	lr
   11764:	b	1158c <__gmon_start__@plt>
   11768:	andeq	fp, r2, r4, lsr #17
   1176c:	andeq	r0, r0, r8, lsr r1
   11770:	ldr	r0, [pc, #24]	; 11790 <__assert_fail@plt+0x90>
   11774:	ldr	r3, [pc, #24]	; 11794 <__assert_fail@plt+0x94>
   11778:	cmp	r3, r0
   1177c:	bxeq	lr
   11780:	ldr	r3, [pc, #16]	; 11798 <__assert_fail@plt+0x98>
   11784:	cmp	r3, #0
   11788:	bxeq	lr
   1178c:	bx	r3
   11790:	muleq	r3, r0, r1
   11794:	muleq	r3, r0, r1
   11798:	andeq	r0, r0, r0
   1179c:	ldr	r0, [pc, #36]	; 117c8 <__assert_fail@plt+0xc8>
   117a0:	ldr	r1, [pc, #36]	; 117cc <__assert_fail@plt+0xcc>
   117a4:	sub	r1, r1, r0
   117a8:	asr	r1, r1, #2
   117ac:	add	r1, r1, r1, lsr #31
   117b0:	asrs	r1, r1, #1
   117b4:	bxeq	lr
   117b8:	ldr	r3, [pc, #16]	; 117d0 <__assert_fail@plt+0xd0>
   117bc:	cmp	r3, #0
   117c0:	bxeq	lr
   117c4:	bx	r3
   117c8:	muleq	r3, r0, r1
   117cc:	muleq	r3, r0, r1
   117d0:	andeq	r0, r0, r0
   117d4:	push	{r4, lr}
   117d8:	ldr	r4, [pc, #24]	; 117f8 <__assert_fail@plt+0xf8>
   117dc:	ldrb	r3, [r4]
   117e0:	cmp	r3, #0
   117e4:	popne	{r4, pc}
   117e8:	bl	11770 <__assert_fail@plt+0x70>
   117ec:	mov	r3, #1
   117f0:	strb	r3, [r4]
   117f4:	pop	{r4, pc}
   117f8:	andeq	sp, r3, ip, lsr #3
   117fc:	b	1179c <__assert_fail@plt+0x9c>
   11800:	push	{fp, lr}
   11804:	mov	fp, sp
   11808:	sub	sp, sp, #56	; 0x38
   1180c:	mov	r4, r0
   11810:	cmp	r0, #0
   11814:	bne	11af8 <__assert_fail@plt+0x3f8>
   11818:	movw	r1, #45363	; 0xb133
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #2
   11828:	bl	11490 <dcgettext@plt>
   1182c:	mov	r1, r0
   11830:	movw	r0, #53692	; 0xd1bc
   11834:	movt	r0, #3
   11838:	ldr	r2, [r0]
   1183c:	mov	r0, #1
   11840:	mov	r3, r2
   11844:	bl	11628 <__printf_chk@plt>
   11848:	movw	r7, #53668	; 0xd1a4
   1184c:	movt	r7, #3
   11850:	ldr	r0, [r7]
   11854:	ldr	r1, [r0, #20]
   11858:	ldr	r2, [r0, #24]
   1185c:	cmp	r1, r2
   11860:	bcs	11aec <__assert_fail@plt+0x3ec>
   11864:	add	r2, r1, #1
   11868:	str	r2, [r0, #20]
   1186c:	mov	r0, #10
   11870:	strb	r0, [r1]
   11874:	movw	r1, #45402	; 0xb15a
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #2
   11884:	bl	11490 <dcgettext@plt>
   11888:	ldr	r1, [r7]
   1188c:	bl	113a0 <fputs_unlocked@plt>
   11890:	movw	r1, #45447	; 0xb187
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #2
   118a0:	bl	11490 <dcgettext@plt>
   118a4:	ldr	r1, [r7]
   118a8:	bl	113a0 <fputs_unlocked@plt>
   118ac:	movw	r1, #45501	; 0xb1bd
   118b0:	mov	r0, #0
   118b4:	mov	r2, #5
   118b8:	movt	r1, #2
   118bc:	bl	11490 <dcgettext@plt>
   118c0:	ldr	r1, [r7]
   118c4:	bl	113a0 <fputs_unlocked@plt>
   118c8:	movw	r1, #45775	; 0xb2cf
   118cc:	mov	r0, #0
   118d0:	mov	r2, #5
   118d4:	movt	r1, #2
   118d8:	bl	11490 <dcgettext@plt>
   118dc:	ldr	r1, [r7]
   118e0:	bl	113a0 <fputs_unlocked@plt>
   118e4:	movw	r1, #46065	; 0xb3f1
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #2
   118f4:	bl	11490 <dcgettext@plt>
   118f8:	ldr	r1, [r7]
   118fc:	bl	113a0 <fputs_unlocked@plt>
   11900:	movw	r1, #46178	; 0xb462
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #2
   11910:	bl	11490 <dcgettext@plt>
   11914:	ldr	r1, [r7]
   11918:	bl	113a0 <fputs_unlocked@plt>
   1191c:	movw	r1, #46365	; 0xb51d
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	movt	r1, #2
   1192c:	bl	11490 <dcgettext@plt>
   11930:	ldr	r1, [r7]
   11934:	bl	113a0 <fputs_unlocked@plt>
   11938:	movw	r1, #46675	; 0xb653
   1193c:	mov	r0, #0
   11940:	mov	r2, #5
   11944:	movt	r1, #2
   11948:	bl	11490 <dcgettext@plt>
   1194c:	ldr	r1, [r7]
   11950:	bl	113a0 <fputs_unlocked@plt>
   11954:	movw	r1, #46876	; 0xb71c
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	movt	r1, #2
   11964:	bl	11490 <dcgettext@plt>
   11968:	ldr	r1, [r7]
   1196c:	bl	113a0 <fputs_unlocked@plt>
   11970:	movw	r1, #47168	; 0xb840
   11974:	mov	r0, #0
   11978:	mov	r2, #5
   1197c:	movt	r1, #2
   11980:	bl	11490 <dcgettext@plt>
   11984:	ldr	r1, [r7]
   11988:	bl	113a0 <fputs_unlocked@plt>
   1198c:	movw	r0, #48072	; 0xbbc8
   11990:	mov	r2, #48	; 0x30
   11994:	mov	r6, sp
   11998:	movw	r5, #47324	; 0xb8dc
   1199c:	movt	r0, #2
   119a0:	movt	r5, #2
   119a4:	add	r1, r0, #32
   119a8:	add	r3, r0, #16
   119ac:	vld1.64	{d18-d19}, [r0], r2
   119b0:	vld1.64	{d16-d17}, [r1]
   119b4:	vld1.64	{d20-d21}, [r3]
   119b8:	add	r1, r6, #32
   119bc:	vldr	d22, [r0]
   119c0:	add	r0, r6, #16
   119c4:	vst1.64	{d16-d17}, [r1]
   119c8:	movw	r1, #47477	; 0xb975
   119cc:	vst1.64	{d20-d21}, [r0]
   119d0:	mov	r0, r6
   119d4:	vst1.64	{d18-d19}, [r0], r2
   119d8:	movt	r1, #2
   119dc:	vstr	d22, [r0]
   119e0:	mov	r0, r5
   119e4:	bl	113d0 <strcmp@plt>
   119e8:	cmp	r0, #0
   119ec:	ldrne	r1, [r6, #8]!
   119f0:	cmpne	r1, #0
   119f4:	bne	119e0 <__assert_fail@plt+0x2e0>
   119f8:	ldr	r6, [r6, #4]
   119fc:	movw	r1, #47572	; 0xb9d4
   11a00:	mov	r0, #0
   11a04:	mov	r2, #5
   11a08:	movt	r1, #2
   11a0c:	bl	11490 <dcgettext@plt>
   11a10:	movw	r2, #47353	; 0xb8f9
   11a14:	movw	r3, #47595	; 0xb9eb
   11a18:	mov	r1, r0
   11a1c:	mov	r0, #1
   11a20:	movt	r2, #2
   11a24:	movt	r3, #2
   11a28:	bl	11628 <__printf_chk@plt>
   11a2c:	cmp	r6, #0
   11a30:	mov	r0, #5
   11a34:	mov	r1, #0
   11a38:	moveq	r6, r5
   11a3c:	bl	11688 <setlocale@plt>
   11a40:	cmp	r0, #0
   11a44:	beq	11a7c <__assert_fail@plt+0x37c>
   11a48:	movw	r1, #47635	; 0xba13
   11a4c:	mov	r2, #3
   11a50:	movt	r1, #2
   11a54:	bl	116dc <strncmp@plt>
   11a58:	cmp	r0, #0
   11a5c:	beq	11a7c <__assert_fail@plt+0x37c>
   11a60:	movw	r1, #47639	; 0xba17
   11a64:	mov	r0, #0
   11a68:	mov	r2, #5
   11a6c:	movt	r1, #2
   11a70:	bl	11490 <dcgettext@plt>
   11a74:	ldr	r1, [r7]
   11a78:	bl	113a0 <fputs_unlocked@plt>
   11a7c:	movw	r1, #47710	; 0xba5e
   11a80:	mov	r0, #0
   11a84:	mov	r2, #5
   11a88:	movt	r1, #2
   11a8c:	bl	11490 <dcgettext@plt>
   11a90:	movw	r2, #47595	; 0xb9eb
   11a94:	mov	r1, r0
   11a98:	mov	r0, #1
   11a9c:	mov	r3, r5
   11aa0:	movt	r2, #2
   11aa4:	bl	11628 <__printf_chk@plt>
   11aa8:	movw	r1, #47737	; 0xba79
   11aac:	mov	r0, #0
   11ab0:	mov	r2, #5
   11ab4:	movt	r1, #2
   11ab8:	bl	11490 <dcgettext@plt>
   11abc:	movw	r3, #47787	; 0xbaab
   11ac0:	mov	r1, r0
   11ac4:	movw	r0, #47505	; 0xb991
   11ac8:	cmp	r6, r5
   11acc:	mov	r2, r6
   11ad0:	movt	r0, #2
   11ad4:	movt	r3, #2
   11ad8:	moveq	r3, r0
   11adc:	mov	r0, #1
   11ae0:	bl	11628 <__printf_chk@plt>
   11ae4:	mov	r0, r4
   11ae8:	bl	115b0 <exit@plt>
   11aec:	mov	r1, #10
   11af0:	bl	1167c <__overflow@plt>
   11af4:	b	11874 <__assert_fail@plt+0x174>
   11af8:	movw	r0, #53664	; 0xd1a0
   11afc:	movw	r1, #45324	; 0xb10c
   11b00:	mov	r2, #5
   11b04:	movt	r0, #3
   11b08:	movt	r1, #2
   11b0c:	ldr	r5, [r0]
   11b10:	mov	r0, #0
   11b14:	bl	11490 <dcgettext@plt>
   11b18:	mov	r2, r0
   11b1c:	movw	r0, #53692	; 0xd1bc
   11b20:	mov	r1, #1
   11b24:	movt	r0, #3
   11b28:	ldr	r3, [r0]
   11b2c:	mov	r0, r5
   11b30:	bl	11640 <__fprintf_chk@plt>
   11b34:	mov	r0, r4
   11b38:	bl	115b0 <exit@plt>
   11b3c:	push	{r4, r5, r6, sl, fp, lr}
   11b40:	add	fp, sp, #16
   11b44:	sub	sp, sp, #24
   11b48:	mov	r5, r0
   11b4c:	ldr	r0, [r1]
   11b50:	mov	r4, r1
   11b54:	bl	1436c <__assert_fail@plt+0x2c6c>
   11b58:	movw	r1, #47787	; 0xbaab
   11b5c:	mov	r0, #6
   11b60:	movt	r1, #2
   11b64:	bl	11688 <setlocale@plt>
   11b68:	movw	r6, #47357	; 0xb8fd
   11b6c:	movw	r1, #47329	; 0xb8e1
   11b70:	movt	r6, #2
   11b74:	movt	r1, #2
   11b78:	mov	r0, r6
   11b7c:	bl	116c4 <bindtextdomain@plt>
   11b80:	mov	r0, r6
   11b84:	bl	114c0 <textdomain@plt>
   11b88:	movw	r0, #53576	; 0xd148
   11b8c:	mov	r1, #3
   11b90:	movt	r0, #3
   11b94:	str	r1, [r0]
   11b98:	movw	r0, #15608	; 0x3cf8
   11b9c:	movt	r0, #1
   11ba0:	bl	2b0e4 <__assert_fail@plt+0x199e4>
   11ba4:	movw	r2, #47394	; 0xb922
   11ba8:	movw	r3, #47382	; 0xb916
   11bac:	movw	r6, #6144	; 0x1800
   11bb0:	movw	r0, #47367	; 0xb907
   11bb4:	movw	r1, #47409	; 0xb931
   11bb8:	mov	ip, #0
   11bbc:	movt	r2, #2
   11bc0:	movt	r3, #2
   11bc4:	movt	r6, #1
   11bc8:	movt	r0, #2
   11bcc:	movt	r1, #2
   11bd0:	stm	sp, {r0, r6}
   11bd4:	str	r3, [sp, #8]
   11bd8:	movw	r3, #47353	; 0xb8f9
   11bdc:	str	r2, [sp, #12]
   11be0:	movw	r2, #47324	; 0xb8dc
   11be4:	str	r1, [sp, #16]
   11be8:	mov	r0, r5
   11bec:	mov	r1, r4
   11bf0:	str	ip, [sp, #20]
   11bf4:	movt	r2, #2
   11bf8:	movt	r3, #2
   11bfc:	bl	13e0c <__assert_fail@plt+0x270c>
   11c00:	cmp	r5, #2
   11c04:	bcc	11d4c <__assert_fail@plt+0x64c>
   11c08:	mov	r6, r4
   11c0c:	movw	r1, #47421	; 0xb93d
   11c10:	ldr	r0, [r6, #4]!
   11c14:	movt	r1, #2
   11c18:	bl	113d0 <strcmp@plt>
   11c1c:	cmp	r0, #0
   11c20:	bne	11c34 <__assert_fail@plt+0x534>
   11c24:	sub	r0, r5, #1
   11c28:	cmp	r0, #2
   11c2c:	bcc	11d4c <__assert_fail@plt+0x64c>
   11c30:	add	r6, r4, #8
   11c34:	movw	r5, #53680	; 0xd1b0
   11c38:	mov	r0, #1
   11c3c:	movt	r5, #3
   11c40:	str	r6, [r5]
   11c44:	bl	11db8 <__assert_fail@plt+0x6b8>
   11c48:	mov	r4, r0
   11c4c:	ldr	r0, [r5]
   11c50:	ldr	r0, [r0]
   11c54:	cmp	r0, #0
   11c58:	bne	11d78 <__assert_fail@plt+0x678>
   11c5c:	ldr	r0, [r4]
   11c60:	cmp	r0, #1
   11c64:	beq	11cd4 <__assert_fail@plt+0x5d4>
   11c68:	cmp	r0, #0
   11c6c:	bne	11cd0 <__assert_fail@plt+0x5d0>
   11c70:	movw	r6, #53668	; 0xd1a4
   11c74:	add	r2, r4, #4
   11c78:	mov	r1, #10
   11c7c:	mov	r5, #10
   11c80:	movt	r6, #3
   11c84:	ldr	r0, [r6]
   11c88:	bl	114d8 <__gmpz_out_str@plt>
   11c8c:	ldr	r0, [r6]
   11c90:	ldr	r1, [r0, #20]
   11c94:	ldr	r2, [r0, #24]
   11c98:	cmp	r1, r2
   11c9c:	bcs	11d34 <__assert_fail@plt+0x634>
   11ca0:	add	r2, r1, #1
   11ca4:	str	r2, [r0, #20]
   11ca8:	strb	r5, [r1]
   11cac:	ldr	r0, [r4]
   11cb0:	cmp	r0, #1
   11cb4:	beq	11ce8 <__assert_fail@plt+0x5e8>
   11cb8:	cmp	r0, #0
   11cbc:	ldreq	r0, [r4, #8]
   11cc0:	clzeq	r0, r0
   11cc4:	lsreq	r0, r0, #5
   11cc8:	subeq	sp, fp, #16
   11ccc:	popeq	{r4, r5, r6, sl, fp, pc}
   11cd0:	bl	116e8 <abort@plt>
   11cd4:	ldr	r0, [r4, #4]
   11cd8:	bl	11544 <puts@plt>
   11cdc:	ldr	r0, [r4]
   11ce0:	cmp	r0, #1
   11ce4:	bne	11cb8 <__assert_fail@plt+0x5b8>
   11ce8:	ldr	r1, [r4, #4]
   11cec:	mov	r0, #1
   11cf0:	ldrb	r2, [r1]
   11cf4:	cmp	r2, #0
   11cf8:	beq	11d20 <__assert_fail@plt+0x620>
   11cfc:	cmp	r2, #45	; 0x2d
   11d00:	addeq	r1, r1, #1
   11d04:	ldrb	r2, [r1], #1
   11d08:	uxtb	r2, r2
   11d0c:	cmp	r2, #48	; 0x30
   11d10:	bne	11d28 <__assert_fail@plt+0x628>
   11d14:	ldrb	r2, [r1], #1
   11d18:	cmp	r2, #0
   11d1c:	bne	11d08 <__assert_fail@plt+0x608>
   11d20:	sub	sp, fp, #16
   11d24:	pop	{r4, r5, r6, sl, fp, pc}
   11d28:	mov	r0, #0
   11d2c:	sub	sp, fp, #16
   11d30:	pop	{r4, r5, r6, sl, fp, pc}
   11d34:	mov	r1, #10
   11d38:	bl	1167c <__overflow@plt>
   11d3c:	ldr	r0, [r4]
   11d40:	cmp	r0, #1
   11d44:	bne	11cb8 <__assert_fail@plt+0x5b8>
   11d48:	b	11ce8 <__assert_fail@plt+0x5e8>
   11d4c:	movw	r1, #47424	; 0xb940
   11d50:	mov	r0, #0
   11d54:	mov	r2, #5
   11d58:	movt	r1, #2
   11d5c:	bl	11490 <dcgettext@plt>
   11d60:	mov	r2, r0
   11d64:	mov	r0, #0
   11d68:	mov	r1, #0
   11d6c:	bl	1152c <error@plt>
   11d70:	mov	r0, #2
   11d74:	bl	11800 <__assert_fail@plt+0x100>
   11d78:	movw	r1, #47440	; 0xb950
   11d7c:	mov	r0, #0
   11d80:	mov	r2, #5
   11d84:	movt	r1, #2
   11d88:	bl	11490 <dcgettext@plt>
   11d8c:	mov	r4, r0
   11d90:	ldr	r0, [r5]
   11d94:	mov	r1, #8
   11d98:	ldr	r2, [r0]
   11d9c:	mov	r0, #0
   11da0:	bl	15d18 <__assert_fail@plt+0x4618>
   11da4:	mov	r3, r0
   11da8:	mov	r0, #2
   11dac:	mov	r1, #0
   11db0:	mov	r2, r4
   11db4:	bl	1152c <error@plt>
   11db8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11dbc:	add	fp, sp, #24
   11dc0:	mov	r4, r0
   11dc4:	bl	12000 <__assert_fail@plt+0x900>
   11dc8:	movw	r5, #53680	; 0xd1b0
   11dcc:	mov	r6, r0
   11dd0:	movt	r5, #3
   11dd4:	ldr	r7, [r5]
   11dd8:	ldr	r0, [r7]
   11ddc:	cmp	r0, #0
   11de0:	beq	11ff4 <__assert_fail@plt+0x8f4>
   11de4:	movw	r8, #47788	; 0xbaac
   11de8:	mov	r9, #0
   11dec:	movt	r8, #2
   11df0:	mov	r1, r8
   11df4:	bl	113d0 <strcmp@plt>
   11df8:	clz	r1, r0
   11dfc:	cmp	r0, #0
   11e00:	lsr	r1, r1, #5
   11e04:	add	r1, r7, r1, lsl #2
   11e08:	str	r1, [r5]
   11e0c:	bne	11ff4 <__assert_fail@plt+0x8f4>
   11e10:	mov	r0, #0
   11e14:	cmp	r4, #0
   11e18:	beq	11e78 <__assert_fail@plt+0x778>
   11e1c:	ldr	r1, [r6]
   11e20:	cmp	r1, #1
   11e24:	beq	11e40 <__assert_fail@plt+0x740>
   11e28:	cmp	r1, #0
   11e2c:	bne	11ffc <__assert_fail@plt+0x8fc>
   11e30:	ldr	r0, [r6, #8]
   11e34:	clz	r0, r0
   11e38:	lsr	r0, r0, #5
   11e3c:	b	11e78 <__assert_fail@plt+0x778>
   11e40:	ldr	r1, [r6, #4]
   11e44:	ldrb	r2, [r1]
   11e48:	cmp	r2, #0
   11e4c:	beq	11e74 <__assert_fail@plt+0x774>
   11e50:	cmp	r2, #45	; 0x2d
   11e54:	addeq	r1, r1, #1
   11e58:	ldrb	r2, [r1], #1
   11e5c:	uxtb	r2, r2
   11e60:	cmp	r2, #48	; 0x30
   11e64:	bne	11e78 <__assert_fail@plt+0x778>
   11e68:	ldrb	r2, [r1], #1
   11e6c:	cmp	r2, #0
   11e70:	bne	11e5c <__assert_fail@plt+0x75c>
   11e74:	mov	r0, #1
   11e78:	bl	12000 <__assert_fail@plt+0x900>
   11e7c:	mov	r7, r0
   11e80:	ldr	r0, [r6]
   11e84:	cmp	r0, #0
   11e88:	beq	11ed4 <__assert_fail@plt+0x7d4>
   11e8c:	cmp	r0, #1
   11e90:	bne	11ffc <__assert_fail@plt+0x8fc>
   11e94:	ldr	r0, [r6, #4]
   11e98:	ldrb	r1, [r0]
   11e9c:	cmp	r1, #0
   11ea0:	beq	11ecc <__assert_fail@plt+0x7cc>
   11ea4:	cmp	r1, #45	; 0x2d
   11ea8:	mov	r1, r0
   11eac:	addeq	r1, r1, #1
   11eb0:	ldrb	r2, [r1], #1
   11eb4:	uxtb	r2, r2
   11eb8:	cmp	r2, #48	; 0x30
   11ebc:	bne	11ee0 <__assert_fail@plt+0x7e0>
   11ec0:	ldrb	r2, [r1], #1
   11ec4:	cmp	r2, #0
   11ec8:	bne	11eb4 <__assert_fail@plt+0x7b4>
   11ecc:	bl	13de4 <__assert_fail@plt+0x26e4>
   11ed0:	b	11f24 <__assert_fail@plt+0x824>
   11ed4:	ldr	r0, [r6, #8]
   11ed8:	cmp	r0, #0
   11edc:	beq	11f1c <__assert_fail@plt+0x81c>
   11ee0:	mov	r0, r7
   11ee4:	ldr	r1, [r0], #4
   11ee8:	cmp	r1, #1
   11eec:	bne	11efc <__assert_fail@plt+0x7fc>
   11ef0:	ldr	r0, [r0]
   11ef4:	bl	13de4 <__assert_fail@plt+0x26e4>
   11ef8:	b	11f00 <__assert_fail@plt+0x800>
   11efc:	bl	115e0 <__gmpz_clear@plt>
   11f00:	mov	r0, r7
   11f04:	bl	13de4 <__assert_fail@plt+0x26e4>
   11f08:	ldr	r7, [r5]
   11f0c:	ldr	r0, [r7]
   11f10:	cmp	r0, #0
   11f14:	bne	11df0 <__assert_fail@plt+0x6f0>
   11f18:	b	11ff4 <__assert_fail@plt+0x8f4>
   11f1c:	add	r0, r6, #4
   11f20:	bl	115e0 <__gmpz_clear@plt>
   11f24:	mov	r0, r6
   11f28:	bl	13de4 <__assert_fail@plt+0x26e4>
   11f2c:	ldr	r0, [r7]
   11f30:	cmp	r0, #0
   11f34:	beq	11f80 <__assert_fail@plt+0x880>
   11f38:	cmp	r0, #1
   11f3c:	bne	11ffc <__assert_fail@plt+0x8fc>
   11f40:	ldr	r0, [r7, #4]
   11f44:	ldrb	r1, [r0]
   11f48:	cmp	r1, #0
   11f4c:	beq	11f78 <__assert_fail@plt+0x878>
   11f50:	cmp	r1, #45	; 0x2d
   11f54:	mov	r1, r0
   11f58:	addeq	r1, r1, #1
   11f5c:	ldrb	r2, [r1], #1
   11f60:	uxtb	r2, r2
   11f64:	cmp	r2, #48	; 0x30
   11f68:	bne	11fe0 <__assert_fail@plt+0x8e0>
   11f6c:	ldrb	r2, [r1], #1
   11f70:	cmp	r2, #0
   11f74:	bne	11f60 <__assert_fail@plt+0x860>
   11f78:	bl	13de4 <__assert_fail@plt+0x26e4>
   11f7c:	b	11fac <__assert_fail@plt+0x8ac>
   11f80:	ldr	r0, [r7, #8]
   11f84:	cmp	r0, #0
   11f88:	beq	11fa4 <__assert_fail@plt+0x8a4>
   11f8c:	mov	r6, r7
   11f90:	ldr	r7, [r5]
   11f94:	ldr	r0, [r7]
   11f98:	cmp	r0, #0
   11f9c:	bne	11df0 <__assert_fail@plt+0x6f0>
   11fa0:	b	11ff4 <__assert_fail@plt+0x8f4>
   11fa4:	add	r0, r7, #4
   11fa8:	bl	115e0 <__gmpz_clear@plt>
   11fac:	mov	r0, r7
   11fb0:	bl	13de4 <__assert_fail@plt+0x26e4>
   11fb4:	mov	r0, #16
   11fb8:	bl	2a48c <__assert_fail@plt+0x18d8c>
   11fbc:	mov	r6, r0
   11fc0:	str	r9, [r0], #4
   11fc4:	mov	r1, #0
   11fc8:	bl	11670 <__gmpz_init_set_ui@plt>
   11fcc:	ldr	r7, [r5]
   11fd0:	ldr	r0, [r7]
   11fd4:	cmp	r0, #0
   11fd8:	bne	11df0 <__assert_fail@plt+0x6f0>
   11fdc:	b	11ff4 <__assert_fail@plt+0x8f4>
   11fe0:	mov	r6, r7
   11fe4:	ldr	r7, [r5]
   11fe8:	ldr	r0, [r7]
   11fec:	cmp	r0, #0
   11ff0:	bne	11df0 <__assert_fail@plt+0x6f0>
   11ff4:	mov	r0, r6
   11ff8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ffc:	bl	116e8 <abort@plt>
   12000:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12004:	add	fp, sp, #24
   12008:	mov	r4, r0
   1200c:	bl	12234 <__assert_fail@plt+0xb34>
   12010:	movw	r5, #53680	; 0xd1b0
   12014:	mov	r6, r0
   12018:	movt	r5, #3
   1201c:	ldr	r7, [r5]
   12020:	ldr	r0, [r7]
   12024:	cmp	r0, #0
   12028:	beq	12228 <__assert_fail@plt+0xb28>
   1202c:	movw	r8, #47790	; 0xbaae
   12030:	mov	r9, #0
   12034:	movt	r8, #2
   12038:	mov	r1, r8
   1203c:	bl	113d0 <strcmp@plt>
   12040:	clz	r1, r0
   12044:	cmp	r0, #0
   12048:	lsr	r1, r1, #5
   1204c:	add	r1, r7, r1, lsl #2
   12050:	str	r1, [r5]
   12054:	bne	12228 <__assert_fail@plt+0xb28>
   12058:	mov	r0, #0
   1205c:	cmp	r4, #0
   12060:	beq	120cc <__assert_fail@plt+0x9cc>
   12064:	ldr	r0, [r6]
   12068:	cmp	r0, #1
   1206c:	beq	12088 <__assert_fail@plt+0x988>
   12070:	cmp	r0, #0
   12074:	bne	12230 <__assert_fail@plt+0xb30>
   12078:	ldr	r0, [r6, #8]
   1207c:	clz	r0, r0
   12080:	lsr	r0, r0, #5
   12084:	b	120c8 <__assert_fail@plt+0x9c8>
   12088:	ldr	r1, [r6, #4]
   1208c:	mov	r0, #1
   12090:	ldrb	r2, [r1]
   12094:	cmp	r2, #0
   12098:	beq	120c8 <__assert_fail@plt+0x9c8>
   1209c:	cmp	r2, #45	; 0x2d
   120a0:	addeq	r1, r1, #1
   120a4:	ldrb	r2, [r1], #1
   120a8:	uxtb	r2, r2
   120ac:	cmp	r2, #48	; 0x30
   120b0:	bne	120c4 <__assert_fail@plt+0x9c4>
   120b4:	ldrb	r2, [r1], #1
   120b8:	cmp	r2, #0
   120bc:	bne	120a8 <__assert_fail@plt+0x9a8>
   120c0:	b	120c8 <__assert_fail@plt+0x9c8>
   120c4:	mov	r0, #0
   120c8:	eor	r0, r0, #1
   120cc:	bl	12234 <__assert_fail@plt+0xb34>
   120d0:	ldr	r1, [r6]
   120d4:	mov	r7, r0
   120d8:	cmp	r1, #0
   120dc:	beq	12120 <__assert_fail@plt+0xa20>
   120e0:	cmp	r1, #1
   120e4:	bne	12230 <__assert_fail@plt+0xb30>
   120e8:	ldr	r0, [r6, #4]
   120ec:	ldrb	r2, [r0]
   120f0:	cmp	r2, #0
   120f4:	beq	121a0 <__assert_fail@plt+0xaa0>
   120f8:	cmp	r2, #45	; 0x2d
   120fc:	addeq	r0, r0, #1
   12100:	ldrb	r2, [r0], #1
   12104:	uxtb	r2, r2
   12108:	cmp	r2, #48	; 0x30
   1210c:	bne	1212c <__assert_fail@plt+0xa2c>
   12110:	ldrb	r2, [r0], #1
   12114:	cmp	r2, #0
   12118:	bne	12104 <__assert_fail@plt+0xa04>
   1211c:	b	12194 <__assert_fail@plt+0xa94>
   12120:	ldr	r0, [r6, #8]
   12124:	cmp	r0, #0
   12128:	beq	121a8 <__assert_fail@plt+0xaa8>
   1212c:	ldr	r0, [r7]
   12130:	cmp	r0, #0
   12134:	beq	1217c <__assert_fail@plt+0xa7c>
   12138:	cmp	r0, #1
   1213c:	bne	12230 <__assert_fail@plt+0xb30>
   12140:	ldr	r0, [r7, #4]
   12144:	ldrb	r2, [r0]
   12148:	cmp	r2, #0
   1214c:	beq	12194 <__assert_fail@plt+0xa94>
   12150:	cmp	r2, #45	; 0x2d
   12154:	mov	r2, r0
   12158:	addeq	r2, r2, #1
   1215c:	ldrb	r3, [r2], #1
   12160:	uxtb	r3, r3
   12164:	cmp	r3, #48	; 0x30
   12168:	bne	1220c <__assert_fail@plt+0xb0c>
   1216c:	ldrb	r3, [r2], #1
   12170:	cmp	r3, #0
   12174:	bne	12160 <__assert_fail@plt+0xa60>
   12178:	b	12194 <__assert_fail@plt+0xa94>
   1217c:	ldr	r0, [r7, #8]
   12180:	cmp	r0, #0
   12184:	beq	12194 <__assert_fail@plt+0xa94>
   12188:	add	r0, r7, #4
   1218c:	bl	115e0 <__gmpz_clear@plt>
   12190:	b	12210 <__assert_fail@plt+0xb10>
   12194:	cmp	r1, #1
   12198:	bne	121a8 <__assert_fail@plt+0xaa8>
   1219c:	ldr	r0, [r6, #4]
   121a0:	bl	13de4 <__assert_fail@plt+0x26e4>
   121a4:	b	121b0 <__assert_fail@plt+0xab0>
   121a8:	add	r0, r6, #4
   121ac:	bl	115e0 <__gmpz_clear@plt>
   121b0:	mov	r0, r6
   121b4:	bl	13de4 <__assert_fail@plt+0x26e4>
   121b8:	mov	r0, r7
   121bc:	ldr	r1, [r0], #4
   121c0:	cmp	r1, #1
   121c4:	bne	121d4 <__assert_fail@plt+0xad4>
   121c8:	ldr	r0, [r0]
   121cc:	bl	13de4 <__assert_fail@plt+0x26e4>
   121d0:	b	121d8 <__assert_fail@plt+0xad8>
   121d4:	bl	115e0 <__gmpz_clear@plt>
   121d8:	mov	r0, r7
   121dc:	bl	13de4 <__assert_fail@plt+0x26e4>
   121e0:	mov	r0, #16
   121e4:	bl	2a48c <__assert_fail@plt+0x18d8c>
   121e8:	mov	r6, r0
   121ec:	str	r9, [r0], #4
   121f0:	mov	r1, #0
   121f4:	bl	11670 <__gmpz_init_set_ui@plt>
   121f8:	ldr	r7, [r5]
   121fc:	ldr	r0, [r7]
   12200:	cmp	r0, #0
   12204:	bne	12038 <__assert_fail@plt+0x938>
   12208:	b	12228 <__assert_fail@plt+0xb28>
   1220c:	bl	13de4 <__assert_fail@plt+0x26e4>
   12210:	mov	r0, r7
   12214:	bl	13de4 <__assert_fail@plt+0x26e4>
   12218:	ldr	r7, [r5]
   1221c:	ldr	r0, [r7]
   12220:	cmp	r0, #0
   12224:	bne	12038 <__assert_fail@plt+0x938>
   12228:	mov	r0, r6
   1222c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12230:	bl	116e8 <abort@plt>
   12234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12238:	add	fp, sp, #28
   1223c:	push	{r0}		; (str r0, [sp, #-4]!)
   12240:	bl	12640 <__assert_fail@plt+0xf40>
   12244:	movw	r7, #53680	; 0xd1b0
   12248:	mov	r5, r0
   1224c:	movt	r7, #3
   12250:	ldr	r4, [r7]
   12254:	ldr	r0, [r4]
   12258:	cmp	r0, #0
   1225c:	beq	12630 <__assert_fail@plt+0xf30>
   12260:	mvn	r8, #47	; 0x2f
   12264:	b	12278 <__assert_fail@plt+0xb78>
   12268:	mov	r4, #3
   1226c:	b	123d0 <__assert_fail@plt+0xcd0>
   12270:	mov	r4, #4
   12274:	b	123d0 <__assert_fail@plt+0xcd0>
   12278:	movw	r1, #47792	; 0xbab0
   1227c:	movt	r1, #2
   12280:	bl	113d0 <strcmp@plt>
   12284:	clz	r1, r0
   12288:	cmp	r0, #0
   1228c:	lsr	r1, r1, #5
   12290:	add	r6, r4, r1, lsl #2
   12294:	mov	r4, #0
   12298:	str	r6, [r7]
   1229c:	beq	123d0 <__assert_fail@plt+0xcd0>
   122a0:	ldr	r0, [r6]
   122a4:	cmp	r0, #0
   122a8:	beq	12630 <__assert_fail@plt+0xf30>
   122ac:	movw	r1, #47794	; 0xbab2
   122b0:	movt	r1, #2
   122b4:	bl	113d0 <strcmp@plt>
   122b8:	clz	r1, r0
   122bc:	cmp	r0, #0
   122c0:	lsr	r1, r1, #5
   122c4:	add	r4, r6, r1, lsl #2
   122c8:	str	r4, [r7]
   122cc:	beq	123cc <__assert_fail@plt+0xccc>
   122d0:	ldr	r0, [r4]
   122d4:	cmp	r0, #0
   122d8:	beq	12630 <__assert_fail@plt+0xf30>
   122dc:	movw	r1, #47801	; 0xbab9
   122e0:	movt	r1, #2
   122e4:	bl	113d0 <strcmp@plt>
   122e8:	clz	r1, r0
   122ec:	cmp	r0, #0
   122f0:	lsr	r1, r1, #5
   122f4:	add	r6, r4, r1, lsl #2
   122f8:	mov	r4, #2
   122fc:	str	r6, [r7]
   12300:	beq	123d0 <__assert_fail@plt+0xcd0>
   12304:	ldr	r0, [r6]
   12308:	cmp	r0, #0
   1230c:	beq	12630 <__assert_fail@plt+0xf30>
   12310:	movw	r1, #47797	; 0xbab5
   12314:	movt	r1, #2
   12318:	bl	113d0 <strcmp@plt>
   1231c:	clz	r1, r0
   12320:	cmp	r0, #0
   12324:	lsr	r1, r1, #5
   12328:	add	r6, r6, r1, lsl #2
   1232c:	str	r6, [r7]
   12330:	beq	123d0 <__assert_fail@plt+0xcd0>
   12334:	ldr	r0, [r6]
   12338:	cmp	r0, #0
   1233c:	beq	12630 <__assert_fail@plt+0xf30>
   12340:	movw	r1, #47800	; 0xbab8
   12344:	movt	r1, #2
   12348:	bl	113d0 <strcmp@plt>
   1234c:	clz	r1, r0
   12350:	cmp	r0, #0
   12354:	lsr	r1, r1, #5
   12358:	add	r4, r6, r1, lsl #2
   1235c:	str	r4, [r7]
   12360:	beq	12268 <__assert_fail@plt+0xb68>
   12364:	ldr	r0, [r4]
   12368:	cmp	r0, #0
   1236c:	beq	12630 <__assert_fail@plt+0xf30>
   12370:	movw	r1, #47803	; 0xbabb
   12374:	movt	r1, #2
   12378:	bl	113d0 <strcmp@plt>
   1237c:	clz	r1, r0
   12380:	cmp	r0, #0
   12384:	lsr	r1, r1, #5
   12388:	add	r4, r4, r1, lsl #2
   1238c:	str	r4, [r7]
   12390:	beq	12270 <__assert_fail@plt+0xb70>
   12394:	ldr	r0, [r4]
   12398:	cmp	r0, #0
   1239c:	beq	12630 <__assert_fail@plt+0xf30>
   123a0:	movw	r1, #47806	; 0xbabe
   123a4:	movt	r1, #2
   123a8:	bl	113d0 <strcmp@plt>
   123ac:	clz	r1, r0
   123b0:	cmp	r0, #0
   123b4:	lsr	r1, r1, #5
   123b8:	add	r1, r4, r1, lsl #2
   123bc:	mov	r4, #5
   123c0:	str	r1, [r7]
   123c4:	beq	123d0 <__assert_fail@plt+0xcd0>
   123c8:	b	12630 <__assert_fail@plt+0xf30>
   123cc:	mov	r4, #1
   123d0:	ldr	r6, [sp]
   123d4:	mov	r0, r6
   123d8:	bl	12640 <__assert_fail@plt+0xf40>
   123dc:	mov	sl, r0
   123e0:	cmp	r6, #0
   123e4:	beq	124dc <__assert_fail@plt+0xddc>
   123e8:	ldr	r0, [r5]
   123ec:	cmp	r0, #1
   123f0:	beq	12424 <__assert_fail@plt+0xd24>
   123f4:	cmp	r0, #0
   123f8:	bne	1263c <__assert_fail@plt+0xf3c>
   123fc:	add	r7, r5, #4
   12400:	mov	r0, #0
   12404:	mov	r1, #10
   12408:	mov	r2, r7
   1240c:	bl	1149c <__gmpz_get_str@plt>
   12410:	mov	r6, r0
   12414:	mov	r0, r7
   12418:	bl	115e0 <__gmpz_clear@plt>
   1241c:	mov	r0, #1
   12420:	stm	r5, {r0, r6}
   12424:	ldr	r0, [sl]
   12428:	cmp	r0, #1
   1242c:	beq	12460 <__assert_fail@plt+0xd60>
   12430:	cmp	r0, #0
   12434:	bne	1263c <__assert_fail@plt+0xf3c>
   12438:	add	r6, sl, #4
   1243c:	mov	r0, #0
   12440:	mov	r1, #10
   12444:	mov	r2, r6
   12448:	bl	1149c <__gmpz_get_str@plt>
   1244c:	mov	r7, r0
   12450:	mov	r0, r6
   12454:	bl	115e0 <__gmpz_clear@plt>
   12458:	mov	r0, #1
   1245c:	stm	sl, {r0, r7}
   12460:	mov	r6, r5
   12464:	ldr	r0, [r6, #4]!
   12468:	mov	r1, r0
   1246c:	ldrb	r2, [r1], #1
   12470:	cmp	r2, #45	; 0x2d
   12474:	movne	r1, r0
   12478:	ldrb	r2, [r1], #1
   1247c:	uxtab	r2, r8, r2
   12480:	cmp	r2, #9
   12484:	bhi	124fc <__assert_fail@plt+0xdfc>
   12488:	ldrb	r2, [r1], #1
   1248c:	cmp	r2, #0
   12490:	bne	1247c <__assert_fail@plt+0xd7c>
   12494:	mov	r7, sl
   12498:	ldr	r1, [r7, #4]!
   1249c:	mov	r2, r1
   124a0:	ldrb	r3, [r2], #1
   124a4:	cmp	r3, #45	; 0x2d
   124a8:	movne	r2, r1
   124ac:	ldrb	r3, [r2], #1
   124b0:	uxtab	r3, r8, r3
   124b4:	cmp	r3, #9
   124b8:	bhi	12500 <__assert_fail@plt+0xe00>
   124bc:	ldrb	r3, [r2], #1
   124c0:	cmp	r3, #0
   124c4:	bne	124b0 <__assert_fail@plt+0xdb0>
   124c8:	bl	29b68 <__assert_fail@plt+0x18468>
   124cc:	mov	r9, r0
   124d0:	cmp	r4, #5
   124d4:	bls	12524 <__assert_fail@plt+0xe24>
   124d8:	b	1263c <__assert_fail@plt+0xf3c>
   124dc:	add	r6, r5, #4
   124e0:	mov	r9, #0
   124e4:	ldr	r0, [r5]
   124e8:	cmp	r0, #1
   124ec:	bne	125c4 <__assert_fail@plt+0xec4>
   124f0:	ldr	r0, [r6]
   124f4:	bl	13de4 <__assert_fail@plt+0x26e4>
   124f8:	b	125cc <__assert_fail@plt+0xecc>
   124fc:	add	r7, sl, #4
   12500:	bl	115ec <__errno_location@plt>
   12504:	mov	r1, #0
   12508:	str	r1, [r0]
   1250c:	ldr	r0, [r6]
   12510:	ldr	r1, [r7]
   12514:	bl	11538 <strcoll@plt>
   12518:	mov	r9, r0
   1251c:	cmp	r4, #5
   12520:	bhi	1263c <__assert_fail@plt+0xf3c>
   12524:	add	r0, pc, #0
   12528:	ldr	pc, [r0, r4, lsl #2]
   1252c:	andeq	r2, r1, r4, asr #10
   12530:	andeq	r2, r1, r8, ror r5
   12534:	andeq	r2, r1, r8, asr r5
   12538:	muleq	r1, r4, r5
   1253c:	andeq	r2, r1, r0, ror r5
   12540:	andeq	r2, r1, ip, lsr #11
   12544:	lsr	r9, r9, #31
   12548:	ldr	r0, [r5]
   1254c:	cmp	r0, #1
   12550:	beq	124f0 <__assert_fail@plt+0xdf0>
   12554:	b	125c4 <__assert_fail@plt+0xec4>
   12558:	clz	r0, r9
   1255c:	lsr	r9, r0, #5
   12560:	ldr	r0, [r5]
   12564:	cmp	r0, #1
   12568:	beq	124f0 <__assert_fail@plt+0xdf0>
   1256c:	b	125c4 <__assert_fail@plt+0xec4>
   12570:	cmn	r9, #1
   12574:	b	125b0 <__assert_fail@plt+0xeb0>
   12578:	cmp	r9, #1
   1257c:	mov	r9, #0
   12580:	movwlt	r9, #1
   12584:	ldr	r0, [r5]
   12588:	cmp	r0, #1
   1258c:	beq	124f0 <__assert_fail@plt+0xdf0>
   12590:	b	125c4 <__assert_fail@plt+0xec4>
   12594:	cmp	r9, #0
   12598:	movwne	r9, #1
   1259c:	ldr	r0, [r5]
   125a0:	cmp	r0, #1
   125a4:	beq	124f0 <__assert_fail@plt+0xdf0>
   125a8:	b	125c4 <__assert_fail@plt+0xec4>
   125ac:	cmp	r9, #0
   125b0:	mov	r9, #0
   125b4:	movwgt	r9, #1
   125b8:	ldr	r0, [r5]
   125bc:	cmp	r0, #1
   125c0:	beq	124f0 <__assert_fail@plt+0xdf0>
   125c4:	add	r0, r5, #4
   125c8:	bl	115e0 <__gmpz_clear@plt>
   125cc:	mov	r0, r5
   125d0:	bl	13de4 <__assert_fail@plt+0x26e4>
   125d4:	mov	r0, sl
   125d8:	ldr	r1, [r0], #4
   125dc:	cmp	r1, #1
   125e0:	bne	125f0 <__assert_fail@plt+0xef0>
   125e4:	ldr	r0, [r0]
   125e8:	bl	13de4 <__assert_fail@plt+0x26e4>
   125ec:	b	125f4 <__assert_fail@plt+0xef4>
   125f0:	bl	115e0 <__gmpz_clear@plt>
   125f4:	mov	r0, sl
   125f8:	bl	13de4 <__assert_fail@plt+0x26e4>
   125fc:	mov	r0, #16
   12600:	bl	2a48c <__assert_fail@plt+0x18d8c>
   12604:	mov	r1, #0
   12608:	mov	r5, r0
   1260c:	str	r1, [r0], #4
   12610:	mov	r1, r9
   12614:	bl	11670 <__gmpz_init_set_ui@plt>
   12618:	movw	r7, #53680	; 0xd1b0
   1261c:	movt	r7, #3
   12620:	ldr	r4, [r7]
   12624:	ldr	r0, [r4]
   12628:	cmp	r0, #0
   1262c:	bne	12278 <__assert_fail@plt+0xb78>
   12630:	mov	r0, r5
   12634:	sub	sp, fp, #28
   12638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1263c:	bl	116e8 <abort@plt>
   12640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12644:	add	fp, sp, #28
   12648:	sub	sp, sp, #4
   1264c:	mov	r4, r0
   12650:	bl	12948 <__assert_fail@plt+0x1248>
   12654:	movw	r8, #53680	; 0xd1b0
   12658:	str	r0, [sp]
   1265c:	cmp	r4, #0
   12660:	movt	r8, #3
   12664:	ldr	r7, [r8]
   12668:	ldr	r0, [r7]
   1266c:	beq	12840 <__assert_fail@plt+0x1140>
   12670:	cmp	r0, #0
   12674:	beq	128e4 <__assert_fail@plt+0x11e4>
   12678:	ldr	r1, [sp]
   1267c:	mvn	r9, #47	; 0x2f
   12680:	add	r5, r1, #4
   12684:	movw	r1, #47808	; 0xbac0
   12688:	movt	r1, #2
   1268c:	bl	113d0 <strcmp@plt>
   12690:	clz	r1, r0
   12694:	cmp	r0, #0
   12698:	mov	sl, #0
   1269c:	lsr	r1, r1, #5
   126a0:	add	r4, r7, r1, lsl #2
   126a4:	str	r4, [r8]
   126a8:	beq	126e0 <__assert_fail@plt+0xfe0>
   126ac:	ldr	r0, [r4]
   126b0:	cmp	r0, #0
   126b4:	beq	128e4 <__assert_fail@plt+0x11e4>
   126b8:	movw	r1, #47422	; 0xb93e
   126bc:	movt	r1, #2
   126c0:	bl	113d0 <strcmp@plt>
   126c4:	clz	r1, r0
   126c8:	mov	sl, #1
   126cc:	cmp	r0, #0
   126d0:	lsr	r1, r1, #5
   126d4:	add	r1, r4, r1, lsl #2
   126d8:	str	r1, [r8]
   126dc:	bne	128e4 <__assert_fail@plt+0x11e4>
   126e0:	mov	r0, #1
   126e4:	bl	12948 <__assert_fail@plt+0x1248>
   126e8:	mov	r7, r0
   126ec:	ldr	r0, [sp]
   126f0:	ldr	r0, [r0]
   126f4:	cmp	r0, #0
   126f8:	beq	12760 <__assert_fail@plt+0x1060>
   126fc:	cmp	r0, #1
   12700:	bne	12914 <__assert_fail@plt+0x1214>
   12704:	ldr	r6, [r5]
   12708:	mov	r0, r6
   1270c:	ldrb	r1, [r0], #1
   12710:	cmp	r1, #45	; 0x2d
   12714:	movne	r0, r6
   12718:	ldrb	r1, [r0], #1
   1271c:	uxtab	r1, r9, r1
   12720:	cmp	r1, #9
   12724:	bhi	128f0 <__assert_fail@plt+0x11f0>
   12728:	ldrb	r1, [r0], #1
   1272c:	cmp	r1, #0
   12730:	bne	1271c <__assert_fail@plt+0x101c>
   12734:	mov	r0, r5
   12738:	mov	r1, r6
   1273c:	mov	r2, #10
   12740:	bl	116b8 <__gmpz_init_set_str@plt>
   12744:	cmp	r0, #0
   12748:	bne	12918 <__assert_fail@plt+0x1218>
   1274c:	mov	r0, r6
   12750:	bl	13de4 <__assert_fail@plt+0x26e4>
   12754:	ldr	r0, [sp]
   12758:	mov	r1, #0
   1275c:	str	r1, [r0]
   12760:	ldr	r0, [r7]
   12764:	cmp	r0, #1
   12768:	beq	1277c <__assert_fail@plt+0x107c>
   1276c:	cmp	r0, #0
   12770:	bne	12914 <__assert_fail@plt+0x1214>
   12774:	add	r6, r7, #4
   12778:	b	127d8 <__assert_fail@plt+0x10d8>
   1277c:	mov	r6, r7
   12780:	ldr	r4, [r6, #4]!
   12784:	mov	r0, r4
   12788:	ldrb	r1, [r0], #1
   1278c:	cmp	r1, #45	; 0x2d
   12790:	movne	r0, r4
   12794:	ldrb	r1, [r0], #1
   12798:	uxtab	r1, r9, r1
   1279c:	cmp	r1, #9
   127a0:	bhi	128f0 <__assert_fail@plt+0x11f0>
   127a4:	ldrb	r1, [r0], #1
   127a8:	cmp	r1, #0
   127ac:	bne	12798 <__assert_fail@plt+0x1098>
   127b0:	mov	r0, r6
   127b4:	mov	r1, r4
   127b8:	mov	r2, #10
   127bc:	bl	116b8 <__gmpz_init_set_str@plt>
   127c0:	cmp	r0, #0
   127c4:	bne	12930 <__assert_fail@plt+0x1230>
   127c8:	mov	r0, r4
   127cc:	bl	13de4 <__assert_fail@plt+0x26e4>
   127d0:	mov	r0, #0
   127d4:	str	r0, [r7]
   127d8:	movw	r3, #5204	; 0x1454
   127dc:	movw	r0, #5804	; 0x16ac
   127e0:	add	r4, r7, #4
   127e4:	cmp	sl, #0
   127e8:	mov	r1, r5
   127ec:	movt	r3, #1
   127f0:	movt	r0, #1
   127f4:	mov	r2, r4
   127f8:	moveq	r3, r0
   127fc:	mov	r0, r5
   12800:	blx	r3
   12804:	ldr	r0, [r7]
   12808:	cmp	r0, #1
   1280c:	bne	1281c <__assert_fail@plt+0x111c>
   12810:	ldr	r0, [r6]
   12814:	bl	13de4 <__assert_fail@plt+0x26e4>
   12818:	b	12824 <__assert_fail@plt+0x1124>
   1281c:	mov	r0, r4
   12820:	bl	115e0 <__gmpz_clear@plt>
   12824:	mov	r0, r7
   12828:	bl	13de4 <__assert_fail@plt+0x26e4>
   1282c:	ldr	r7, [r8]
   12830:	ldr	r0, [r7]
   12834:	cmp	r0, #0
   12838:	bne	12684 <__assert_fail@plt+0xf84>
   1283c:	b	128e4 <__assert_fail@plt+0x11e4>
   12840:	cmp	r0, #0
   12844:	beq	128e4 <__assert_fail@plt+0x11e4>
   12848:	movw	r5, #47808	; 0xbac0
   1284c:	movw	r6, #47422	; 0xb93e
   12850:	movt	r5, #2
   12854:	movt	r6, #2
   12858:	mov	r1, r5
   1285c:	bl	113d0 <strcmp@plt>
   12860:	clz	r1, r0
   12864:	cmp	r0, #0
   12868:	lsr	r1, r1, #5
   1286c:	add	r4, r7, r1, lsl #2
   12870:	str	r4, [r8]
   12874:	beq	128a4 <__assert_fail@plt+0x11a4>
   12878:	ldr	r0, [r4]
   1287c:	cmp	r0, #0
   12880:	beq	128e4 <__assert_fail@plt+0x11e4>
   12884:	mov	r1, r6
   12888:	bl	113d0 <strcmp@plt>
   1288c:	clz	r1, r0
   12890:	cmp	r0, #0
   12894:	lsr	r1, r1, #5
   12898:	add	r1, r4, r1, lsl #2
   1289c:	str	r1, [r8]
   128a0:	bne	128e4 <__assert_fail@plt+0x11e4>
   128a4:	mov	r0, #0
   128a8:	bl	12948 <__assert_fail@plt+0x1248>
   128ac:	mov	r4, r0
   128b0:	ldr	r1, [r0], #4
   128b4:	cmp	r1, #1
   128b8:	bne	128c8 <__assert_fail@plt+0x11c8>
   128bc:	ldr	r0, [r0]
   128c0:	bl	13de4 <__assert_fail@plt+0x26e4>
   128c4:	b	128cc <__assert_fail@plt+0x11cc>
   128c8:	bl	115e0 <__gmpz_clear@plt>
   128cc:	mov	r0, r4
   128d0:	bl	13de4 <__assert_fail@plt+0x26e4>
   128d4:	ldr	r7, [r8]
   128d8:	ldr	r0, [r7]
   128dc:	cmp	r0, #0
   128e0:	bne	12858 <__assert_fail@plt+0x1158>
   128e4:	ldr	r0, [sp]
   128e8:	sub	sp, fp, #28
   128ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128f0:	movw	r1, #47810	; 0xbac2
   128f4:	mov	r0, #0
   128f8:	mov	r2, #5
   128fc:	movt	r1, #2
   12900:	bl	11490 <dcgettext@plt>
   12904:	mov	r2, r0
   12908:	mov	r0, #2
   1290c:	mov	r1, #0
   12910:	bl	1152c <error@plt>
   12914:	bl	116e8 <abort@plt>
   12918:	movw	r2, #48144	; 0xbc10
   1291c:	mov	r0, #3
   12920:	mov	r1, #34	; 0x22
   12924:	mov	r3, r6
   12928:	movt	r2, #2
   1292c:	bl	1152c <error@plt>
   12930:	movw	r2, #48144	; 0xbc10
   12934:	mov	r0, #3
   12938:	mov	r1, #34	; 0x22
   1293c:	mov	r3, r4
   12940:	movt	r2, #2
   12944:	bl	1152c <error@plt>
   12948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1294c:	add	fp, sp, #28
   12950:	sub	sp, sp, #20
   12954:	mov	r4, r0
   12958:	bl	12e74 <__assert_fail@plt+0x1774>
   1295c:	movw	r5, #53680	; 0xd1b0
   12960:	mov	r6, r0
   12964:	str	r4, [sp, #12]
   12968:	movt	r5, #3
   1296c:	ldr	r7, [r5]
   12970:	ldr	r0, [r7]
   12974:	cmp	r0, #0
   12978:	beq	12aa0 <__assert_fail@plt+0x13a0>
   1297c:	movw	r8, #47852	; 0xbaec
   12980:	cmp	r4, #0
   12984:	movt	r8, #2
   12988:	beq	12a40 <__assert_fail@plt+0x1340>
   1298c:	mov	r1, r8
   12990:	bl	113d0 <strcmp@plt>
   12994:	clz	r1, r0
   12998:	cmp	r0, #0
   1299c:	lsr	r1, r1, #5
   129a0:	add	r7, r7, r1, lsl #2
   129a4:	str	r7, [r5]
   129a8:	bne	12aa0 <__assert_fail@plt+0x13a0>
   129ac:	mov	r0, #1
   129b0:	bl	12e74 <__assert_fail@plt+0x1774>
   129b4:	mov	r7, r0
   129b8:	mov	r0, r6
   129bc:	mov	r1, r7
   129c0:	bl	139a4 <__assert_fail@plt+0x22a4>
   129c4:	mov	r4, r0
   129c8:	mov	r0, r6
   129cc:	ldr	r1, [r0], #4
   129d0:	cmp	r1, #1
   129d4:	bne	129e4 <__assert_fail@plt+0x12e4>
   129d8:	ldr	r0, [r0]
   129dc:	bl	13de4 <__assert_fail@plt+0x26e4>
   129e0:	b	129e8 <__assert_fail@plt+0x12e8>
   129e4:	bl	115e0 <__gmpz_clear@plt>
   129e8:	mov	r0, r6
   129ec:	bl	13de4 <__assert_fail@plt+0x26e4>
   129f0:	mov	r0, r7
   129f4:	ldr	r1, [r0], #4
   129f8:	cmp	r1, #1
   129fc:	bne	12a0c <__assert_fail@plt+0x130c>
   12a00:	ldr	r0, [r0]
   12a04:	bl	13de4 <__assert_fail@plt+0x26e4>
   12a08:	b	12a10 <__assert_fail@plt+0x1310>
   12a0c:	bl	115e0 <__gmpz_clear@plt>
   12a10:	mov	r0, r7
   12a14:	bl	13de4 <__assert_fail@plt+0x26e4>
   12a18:	ldr	r7, [r5]
   12a1c:	mov	r6, r4
   12a20:	ldr	r0, [r7]
   12a24:	cmp	r0, #0
   12a28:	bne	1298c <__assert_fail@plt+0x128c>
   12a2c:	ldr	r0, [r7]
   12a30:	str	r4, [sp, #4]
   12a34:	cmp	r0, #0
   12a38:	bne	12ab4 <__assert_fail@plt+0x13b4>
   12a3c:	b	12e1c <__assert_fail@plt+0x171c>
   12a40:	mov	r1, r8
   12a44:	bl	113d0 <strcmp@plt>
   12a48:	clz	r1, r0
   12a4c:	cmp	r0, #0
   12a50:	lsr	r1, r1, #5
   12a54:	add	r7, r7, r1, lsl #2
   12a58:	str	r7, [r5]
   12a5c:	bne	12aa0 <__assert_fail@plt+0x13a0>
   12a60:	mov	r0, #0
   12a64:	bl	12e74 <__assert_fail@plt+0x1774>
   12a68:	mov	r7, r0
   12a6c:	ldr	r1, [r0], #4
   12a70:	cmp	r1, #1
   12a74:	bne	12a84 <__assert_fail@plt+0x1384>
   12a78:	ldr	r0, [r0]
   12a7c:	bl	13de4 <__assert_fail@plt+0x26e4>
   12a80:	b	12a88 <__assert_fail@plt+0x1388>
   12a84:	bl	115e0 <__gmpz_clear@plt>
   12a88:	mov	r0, r7
   12a8c:	bl	13de4 <__assert_fail@plt+0x26e4>
   12a90:	ldr	r7, [r5]
   12a94:	ldr	r0, [r7]
   12a98:	cmp	r0, #0
   12a9c:	bne	12a40 <__assert_fail@plt+0x1340>
   12aa0:	mov	r4, r6
   12aa4:	ldr	r0, [r7]
   12aa8:	str	r4, [sp, #4]
   12aac:	cmp	r0, #0
   12ab0:	beq	12e1c <__assert_fail@plt+0x171c>
   12ab4:	ldr	r1, [sp, #4]
   12ab8:	movw	r4, #47852	; 0xbaec
   12abc:	movt	r4, #2
   12ac0:	add	r1, r1, #4
   12ac4:	str	r1, [sp, #8]
   12ac8:	movw	r1, #47831	; 0xbad7
   12acc:	movt	r1, #2
   12ad0:	bl	113d0 <strcmp@plt>
   12ad4:	clz	r1, r0
   12ad8:	cmp	r0, #0
   12adc:	lsr	r1, r1, #5
   12ae0:	add	r6, r7, r1, lsl #2
   12ae4:	mov	r1, #0
   12ae8:	str	r6, [r5]
   12aec:	beq	12b5c <__assert_fail@plt+0x145c>
   12af0:	ldr	r0, [r6]
   12af4:	cmp	r0, #0
   12af8:	beq	12e1c <__assert_fail@plt+0x171c>
   12afc:	movw	r1, #49896	; 0xc2e8
   12b00:	movt	r1, #2
   12b04:	bl	113d0 <strcmp@plt>
   12b08:	clz	r1, r0
   12b0c:	cmp	r0, #0
   12b10:	lsr	r1, r1, #5
   12b14:	add	r6, r6, r1, lsl #2
   12b18:	str	r6, [r5]
   12b1c:	beq	12b58 <__assert_fail@plt+0x1458>
   12b20:	ldr	r0, [r6]
   12b24:	cmp	r0, #0
   12b28:	beq	12e1c <__assert_fail@plt+0x171c>
   12b2c:	movw	r1, #47833	; 0xbad9
   12b30:	movt	r1, #2
   12b34:	bl	113d0 <strcmp@plt>
   12b38:	clz	r1, r0
   12b3c:	cmp	r0, #0
   12b40:	lsr	r1, r1, #5
   12b44:	add	r1, r6, r1, lsl #2
   12b48:	str	r1, [r5]
   12b4c:	mov	r1, #2
   12b50:	beq	12b5c <__assert_fail@plt+0x145c>
   12b54:	b	12e1c <__assert_fail@plt+0x171c>
   12b58:	mov	r1, #1
   12b5c:	ldr	r7, [sp, #12]
   12b60:	str	r1, [sp, #16]
   12b64:	mov	r0, r7
   12b68:	bl	12e74 <__assert_fail@plt+0x1774>
   12b6c:	ldr	r6, [r5]
   12b70:	mov	sl, r0
   12b74:	ldr	r0, [r6]
   12b78:	cmp	r0, #0
   12b7c:	beq	12dd8 <__assert_fail@plt+0x16d8>
   12b80:	cmp	r7, #0
   12b84:	beq	12d78 <__assert_fail@plt+0x1678>
   12b88:	mov	r1, r4
   12b8c:	bl	113d0 <strcmp@plt>
   12b90:	clz	r1, r0
   12b94:	cmp	r0, #0
   12b98:	lsr	r1, r1, #5
   12b9c:	add	r1, r6, r1, lsl #2
   12ba0:	str	r1, [r5]
   12ba4:	bne	12dd8 <__assert_fail@plt+0x16d8>
   12ba8:	mov	r0, #1
   12bac:	bl	12e74 <__assert_fail@plt+0x1774>
   12bb0:	mov	r8, r0
   12bb4:	mov	r0, sl
   12bb8:	mov	r1, r8
   12bbc:	bl	139a4 <__assert_fail@plt+0x22a4>
   12bc0:	mov	r9, r0
   12bc4:	mov	r0, sl
   12bc8:	ldr	r1, [r0], #4
   12bcc:	cmp	r1, #1
   12bd0:	bne	12be0 <__assert_fail@plt+0x14e0>
   12bd4:	ldr	r0, [r0]
   12bd8:	bl	13de4 <__assert_fail@plt+0x26e4>
   12bdc:	b	12be4 <__assert_fail@plt+0x14e4>
   12be0:	bl	115e0 <__gmpz_clear@plt>
   12be4:	mov	r0, sl
   12be8:	bl	13de4 <__assert_fail@plt+0x26e4>
   12bec:	mov	r0, r8
   12bf0:	ldr	r1, [r0], #4
   12bf4:	cmp	r1, #1
   12bf8:	bne	12c08 <__assert_fail@plt+0x1508>
   12bfc:	ldr	r0, [r0]
   12c00:	bl	13de4 <__assert_fail@plt+0x26e4>
   12c04:	b	12c0c <__assert_fail@plt+0x150c>
   12c08:	bl	115e0 <__gmpz_clear@plt>
   12c0c:	mov	r0, r8
   12c10:	bl	13de4 <__assert_fail@plt+0x26e4>
   12c14:	ldr	r6, [r5]
   12c18:	mov	sl, r9
   12c1c:	ldr	r0, [r6]
   12c20:	cmp	r0, #0
   12c24:	bne	12b88 <__assert_fail@plt+0x1488>
   12c28:	cmp	r7, #0
   12c2c:	beq	12de4 <__assert_fail@plt+0x16e4>
   12c30:	ldr	r0, [sp, #4]
   12c34:	ldr	r0, [r0]
   12c38:	cmp	r0, #0
   12c3c:	beq	12cac <__assert_fail@plt+0x15ac>
   12c40:	cmp	r0, #1
   12c44:	mvn	r2, #47	; 0x2f
   12c48:	bne	12e4c <__assert_fail@plt+0x174c>
   12c4c:	ldr	r0, [sp, #8]
   12c50:	ldr	r6, [r0]
   12c54:	mov	r0, r6
   12c58:	ldrb	r1, [r0], #1
   12c5c:	cmp	r1, #45	; 0x2d
   12c60:	movne	r0, r6
   12c64:	ldrb	r1, [r0], #1
   12c68:	uxtab	r1, r2, r1
   12c6c:	cmp	r1, #9
   12c70:	bhi	12e28 <__assert_fail@plt+0x1728>
   12c74:	ldrb	r1, [r0], #1
   12c78:	cmp	r1, #0
   12c7c:	bne	12c68 <__assert_fail@plt+0x1568>
   12c80:	ldr	r0, [sp, #8]
   12c84:	mov	r1, r6
   12c88:	mov	r2, #10
   12c8c:	bl	116b8 <__gmpz_init_set_str@plt>
   12c90:	cmp	r0, #0
   12c94:	bne	12e50 <__assert_fail@plt+0x1750>
   12c98:	mov	r0, r6
   12c9c:	bl	13de4 <__assert_fail@plt+0x26e4>
   12ca0:	ldr	r0, [sp, #4]
   12ca4:	mov	r1, #0
   12ca8:	str	r1, [r0]
   12cac:	ldr	r0, [r9]
   12cb0:	cmp	r0, #0
   12cb4:	beq	12d1c <__assert_fail@plt+0x161c>
   12cb8:	cmp	r0, #1
   12cbc:	mvn	r3, #47	; 0x2f
   12cc0:	bne	12e4c <__assert_fail@plt+0x174c>
   12cc4:	mov	r0, r9
   12cc8:	ldr	r6, [r0, #4]!
   12ccc:	mov	r1, r6
   12cd0:	ldrb	r2, [r1], #1
   12cd4:	cmp	r2, #45	; 0x2d
   12cd8:	movne	r1, r6
   12cdc:	ldrb	r2, [r1], #1
   12ce0:	uxtab	r2, r3, r2
   12ce4:	cmp	r2, #9
   12ce8:	bhi	12e28 <__assert_fail@plt+0x1728>
   12cec:	ldrb	r2, [r1], #1
   12cf0:	cmp	r2, #0
   12cf4:	bne	12ce0 <__assert_fail@plt+0x15e0>
   12cf8:	mov	r1, r6
   12cfc:	mov	r2, #10
   12d00:	bl	116b8 <__gmpz_init_set_str@plt>
   12d04:	cmp	r0, #0
   12d08:	bne	12e50 <__assert_fail@plt+0x1750>
   12d0c:	mov	r0, r6
   12d10:	bl	13de4 <__assert_fail@plt+0x26e4>
   12d14:	mov	r0, #0
   12d18:	str	r0, [r9]
   12d1c:	ldr	r1, [sp, #16]
   12d20:	movw	r3, #5300	; 0x14b4
   12d24:	movt	r3, #1
   12d28:	cmp	r1, #0
   12d2c:	beq	12d54 <__assert_fail@plt+0x1654>
   12d30:	ldr	r0, [r9, #8]
   12d34:	cmp	r0, #0
   12d38:	beq	12e68 <__assert_fail@plt+0x1768>
   12d3c:	movw	r3, #5588	; 0x15d4
   12d40:	movw	r0, #5084	; 0x13dc
   12d44:	cmp	r1, #1
   12d48:	movt	r3, #1
   12d4c:	movt	r0, #1
   12d50:	moveq	r3, r0
   12d54:	ldr	r0, [sp, #8]
   12d58:	add	r2, r9, #4
   12d5c:	mov	r1, r0
   12d60:	blx	r3
   12d64:	mov	r0, r9
   12d68:	ldr	r1, [r0], #4
   12d6c:	cmp	r1, #1
   12d70:	beq	12df4 <__assert_fail@plt+0x16f4>
   12d74:	b	12e00 <__assert_fail@plt+0x1700>
   12d78:	mov	r1, r4
   12d7c:	bl	113d0 <strcmp@plt>
   12d80:	clz	r1, r0
   12d84:	cmp	r0, #0
   12d88:	lsr	r1, r1, #5
   12d8c:	add	r1, r6, r1, lsl #2
   12d90:	str	r1, [r5]
   12d94:	bne	12dd8 <__assert_fail@plt+0x16d8>
   12d98:	mov	r0, #0
   12d9c:	bl	12e74 <__assert_fail@plt+0x1774>
   12da0:	mov	r6, r0
   12da4:	ldr	r1, [r0], #4
   12da8:	cmp	r1, #1
   12dac:	bne	12dbc <__assert_fail@plt+0x16bc>
   12db0:	ldr	r0, [r0]
   12db4:	bl	13de4 <__assert_fail@plt+0x26e4>
   12db8:	b	12dc0 <__assert_fail@plt+0x16c0>
   12dbc:	bl	115e0 <__gmpz_clear@plt>
   12dc0:	mov	r0, r6
   12dc4:	bl	13de4 <__assert_fail@plt+0x26e4>
   12dc8:	ldr	r6, [r5]
   12dcc:	ldr	r0, [r6]
   12dd0:	cmp	r0, #0
   12dd4:	bne	12d78 <__assert_fail@plt+0x1678>
   12dd8:	mov	r9, sl
   12ddc:	cmp	r7, #0
   12de0:	bne	12c30 <__assert_fail@plt+0x1530>
   12de4:	mov	r0, r9
   12de8:	ldr	r1, [r0], #4
   12dec:	cmp	r1, #1
   12df0:	bne	12e00 <__assert_fail@plt+0x1700>
   12df4:	ldr	r0, [r0]
   12df8:	bl	13de4 <__assert_fail@plt+0x26e4>
   12dfc:	b	12e04 <__assert_fail@plt+0x1704>
   12e00:	bl	115e0 <__gmpz_clear@plt>
   12e04:	mov	r0, r9
   12e08:	bl	13de4 <__assert_fail@plt+0x26e4>
   12e0c:	ldr	r7, [r5]
   12e10:	ldr	r0, [r7]
   12e14:	cmp	r0, #0
   12e18:	bne	12ac8 <__assert_fail@plt+0x13c8>
   12e1c:	ldr	r0, [sp, #4]
   12e20:	sub	sp, fp, #28
   12e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e28:	movw	r1, #47810	; 0xbac2
   12e2c:	movt	r1, #2
   12e30:	mov	r0, #0
   12e34:	mov	r2, #5
   12e38:	bl	11490 <dcgettext@plt>
   12e3c:	mov	r2, r0
   12e40:	mov	r0, #2
   12e44:	mov	r1, #0
   12e48:	bl	1152c <error@plt>
   12e4c:	bl	116e8 <abort@plt>
   12e50:	movw	r2, #48144	; 0xbc10
   12e54:	mov	r0, #3
   12e58:	mov	r1, #34	; 0x22
   12e5c:	mov	r3, r6
   12e60:	movt	r2, #2
   12e64:	bl	1152c <error@plt>
   12e68:	movw	r1, #47835	; 0xbadb
   12e6c:	movt	r1, #2
   12e70:	b	12e30 <__assert_fail@plt+0x1730>
   12e74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e78:	add	fp, sp, #28
   12e7c:	sub	sp, sp, #132	; 0x84
   12e80:	movw	r6, #53680	; 0xd1b0
   12e84:	mov	r4, r0
   12e88:	movt	r6, #3
   12e8c:	ldr	r5, [r6]
   12e90:	ldr	r0, [r5]
   12e94:	cmp	r0, #0
   12e98:	beq	138f4 <__assert_fail@plt+0x21f4>
   12e9c:	movw	r1, #47808	; 0xbac0
   12ea0:	movt	r1, #2
   12ea4:	bl	113d0 <strcmp@plt>
   12ea8:	clz	r1, r0
   12eac:	cmp	r0, #0
   12eb0:	lsr	r1, r1, #5
   12eb4:	add	r7, r5, r1, lsl #2
   12eb8:	str	r7, [r6]
   12ebc:	ldr	r5, [r5, r1, lsl #2]
   12ec0:	beq	1300c <__assert_fail@plt+0x190c>
   12ec4:	cmp	r5, #0
   12ec8:	beq	138f4 <__assert_fail@plt+0x21f4>
   12ecc:	movw	r1, #47854	; 0xbaee
   12ed0:	mov	r0, r5
   12ed4:	movt	r1, #2
   12ed8:	bl	113d0 <strcmp@plt>
   12edc:	clz	r1, r0
   12ee0:	cmp	r0, #0
   12ee4:	lsr	r1, r1, #5
   12ee8:	add	r5, r7, r1, lsl #2
   12eec:	str	r5, [r6]
   12ef0:	beq	13048 <__assert_fail@plt+0x1948>
   12ef4:	ldr	r0, [r5]
   12ef8:	cmp	r0, #0
   12efc:	beq	138f4 <__assert_fail@plt+0x21f4>
   12f00:	movw	r1, #47861	; 0xbaf5
   12f04:	movt	r1, #2
   12f08:	bl	113d0 <strcmp@plt>
   12f0c:	clz	r1, r0
   12f10:	cmp	r0, #0
   12f14:	lsr	r1, r1, #5
   12f18:	add	r5, r5, r1, lsl #2
   12f1c:	str	r5, [r6]
   12f20:	beq	13074 <__assert_fail@plt+0x1974>
   12f24:	ldr	r0, [r5]
   12f28:	cmp	r0, #0
   12f2c:	beq	138f4 <__assert_fail@plt+0x21f4>
   12f30:	movw	r1, #47867	; 0xbafb
   12f34:	movt	r1, #2
   12f38:	bl	113d0 <strcmp@plt>
   12f3c:	clz	r1, r0
   12f40:	cmp	r0, #0
   12f44:	lsr	r1, r1, #5
   12f48:	add	r5, r5, r1, lsl #2
   12f4c:	str	r5, [r6]
   12f50:	beq	13128 <__assert_fail@plt+0x1a28>
   12f54:	ldr	r0, [r5]
   12f58:	cmp	r0, #0
   12f5c:	beq	138f4 <__assert_fail@plt+0x21f4>
   12f60:	movw	r1, #47873	; 0xbb01
   12f64:	movt	r1, #2
   12f68:	bl	113d0 <strcmp@plt>
   12f6c:	clz	r1, r0
   12f70:	cmp	r0, #0
   12f74:	lsr	r1, r1, #5
   12f78:	add	r5, r5, r1, lsl #2
   12f7c:	str	r5, [r6]
   12f80:	beq	131b8 <__assert_fail@plt+0x1ab8>
   12f84:	ldr	r0, [r5]
   12f88:	cmp	r0, #0
   12f8c:	beq	138f4 <__assert_fail@plt+0x21f4>
   12f90:	movw	r1, #47920	; 0xbb30
   12f94:	movt	r1, #2
   12f98:	bl	113d0 <strcmp@plt>
   12f9c:	clz	r1, r0
   12fa0:	cmp	r0, #0
   12fa4:	lsr	r1, r1, #5
   12fa8:	add	r5, r5, r1, lsl #2
   12fac:	str	r5, [r6]
   12fb0:	beq	1353c <__assert_fail@plt+0x1e3c>
   12fb4:	ldr	r0, [r5]
   12fb8:	cmp	r0, #0
   12fbc:	beq	12fe4 <__assert_fail@plt+0x18e4>
   12fc0:	movw	r1, #48293	; 0xbca5
   12fc4:	movt	r1, #2
   12fc8:	bl	113d0 <strcmp@plt>
   12fcc:	clz	r1, r0
   12fd0:	cmp	r0, #0
   12fd4:	lsr	r1, r1, #5
   12fd8:	add	r5, r5, r1, lsl #2
   12fdc:	str	r5, [r6]
   12fe0:	beq	13938 <__assert_fail@plt+0x2238>
   12fe4:	add	r0, r5, #4
   12fe8:	str	r0, [r6]
   12fec:	mov	r0, #16
   12ff0:	ldr	r4, [r5]
   12ff4:	bl	2a48c <__assert_fail@plt+0x18d8c>
   12ff8:	mov	r7, r0
   12ffc:	mov	r0, #1
   13000:	str	r0, [r7]
   13004:	mov	r0, r4
   13008:	b	13034 <__assert_fail@plt+0x1934>
   1300c:	cmp	r5, #0
   13010:	beq	138f4 <__assert_fail@plt+0x21f4>
   13014:	add	r0, r7, #4
   13018:	str	r0, [r6]
   1301c:	mov	r0, #16
   13020:	bl	2a48c <__assert_fail@plt+0x18d8c>
   13024:	mov	r7, r0
   13028:	mov	r0, #1
   1302c:	str	r0, [r7]
   13030:	mov	r0, r5
   13034:	bl	2a9ac <__assert_fail@plt+0x192ac>
   13038:	str	r0, [r7, #4]
   1303c:	mov	r0, r7
   13040:	sub	sp, fp, #28
   13044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13048:	mov	r0, r4
   1304c:	bl	12e74 <__assert_fail@plt+0x1774>
   13050:	mov	r4, r0
   13054:	ldr	r0, [r0]
   13058:	cmp	r0, #0
   1305c:	beq	130c0 <__assert_fail@plt+0x19c0>
   13060:	cmp	r0, #1
   13064:	bne	13934 <__assert_fail@plt+0x2234>
   13068:	mov	r5, r4
   1306c:	ldr	r6, [r5, #4]!
   13070:	b	130e8 <__assert_fail@plt+0x19e8>
   13074:	mov	r0, r4
   13078:	bl	12e74 <__assert_fail@plt+0x1774>
   1307c:	mov	r6, r0
   13080:	mov	r0, r4
   13084:	bl	12e74 <__assert_fail@plt+0x1774>
   13088:	mov	r5, r0
   1308c:	cmp	r4, #0
   13090:	beq	1319c <__assert_fail@plt+0x1a9c>
   13094:	mov	r0, r6
   13098:	mov	r1, r5
   1309c:	bl	139a4 <__assert_fail@plt+0x22a4>
   130a0:	mov	r7, r0
   130a4:	mov	r0, r6
   130a8:	ldr	r1, [r0], #4
   130ac:	cmp	r1, #1
   130b0:	bne	13504 <__assert_fail@plt+0x1e04>
   130b4:	ldr	r0, [r0]
   130b8:	bl	13de4 <__assert_fail@plt+0x26e4>
   130bc:	b	13508 <__assert_fail@plt+0x1e08>
   130c0:	add	r5, r4, #4
   130c4:	mov	r0, #0
   130c8:	mov	r1, #10
   130cc:	mov	r2, r5
   130d0:	bl	1149c <__gmpz_get_str@plt>
   130d4:	mov	r6, r0
   130d8:	mov	r0, r5
   130dc:	bl	115e0 <__gmpz_clear@plt>
   130e0:	mov	r0, #1
   130e4:	stm	r4, {r0, r6}
   130e8:	mov	r0, r6
   130ec:	bl	14064 <__assert_fail@plt+0x2964>
   130f0:	mov	r6, r0
   130f4:	mov	r0, #16
   130f8:	bl	2a48c <__assert_fail@plt+0x18d8c>
   130fc:	mov	r1, #0
   13100:	mov	r7, r0
   13104:	str	r1, [r0], #4
   13108:	mov	r1, r6
   1310c:	bl	11670 <__gmpz_init_set_ui@plt>
   13110:	ldr	r0, [r4]
   13114:	cmp	r0, #1
   13118:	bne	13650 <__assert_fail@plt+0x1f50>
   1311c:	ldr	r0, [r5]
   13120:	bl	13de4 <__assert_fail@plt+0x26e4>
   13124:	b	13658 <__assert_fail@plt+0x1f58>
   13128:	mov	r0, r4
   1312c:	bl	12e74 <__assert_fail@plt+0x1774>
   13130:	mov	r8, r0
   13134:	mov	r0, r4
   13138:	bl	12e74 <__assert_fail@plt+0x1774>
   1313c:	mov	r4, r0
   13140:	ldr	r0, [r8]
   13144:	cmp	r0, #1
   13148:	beq	1317c <__assert_fail@plt+0x1a7c>
   1314c:	cmp	r0, #0
   13150:	bne	13934 <__assert_fail@plt+0x2234>
   13154:	add	r6, r8, #4
   13158:	mov	r0, #0
   1315c:	mov	r1, #10
   13160:	mov	r2, r6
   13164:	bl	1149c <__gmpz_get_str@plt>
   13168:	mov	r7, r0
   1316c:	mov	r0, r6
   13170:	bl	115e0 <__gmpz_clear@plt>
   13174:	mov	r0, #1
   13178:	stm	r8, {r0, r7}
   1317c:	ldr	r0, [r4]
   13180:	cmp	r0, #0
   13184:	beq	1332c <__assert_fail@plt+0x1c2c>
   13188:	cmp	r0, #1
   1318c:	bne	13934 <__assert_fail@plt+0x2234>
   13190:	mov	r9, r4
   13194:	ldr	r7, [r9, #4]!
   13198:	b	13354 <__assert_fail@plt+0x1c54>
   1319c:	mov	r7, r6
   131a0:	mov	r0, r5
   131a4:	ldr	r1, [r0], #4
   131a8:	cmp	r1, #1
   131ac:	beq	13520 <__assert_fail@plt+0x1e20>
   131b0:	bl	115e0 <__gmpz_clear@plt>
   131b4:	b	13528 <__assert_fail@plt+0x1e28>
   131b8:	mov	r0, r4
   131bc:	bl	12e74 <__assert_fail@plt+0x1774>
   131c0:	mov	r9, r0
   131c4:	mov	r0, r4
   131c8:	bl	12e74 <__assert_fail@plt+0x1774>
   131cc:	mov	r6, r0
   131d0:	mov	r0, r4
   131d4:	bl	12e74 <__assert_fail@plt+0x1774>
   131d8:	mov	sl, r0
   131dc:	ldr	r0, [r9]
   131e0:	cmp	r0, #1
   131e4:	beq	13218 <__assert_fail@plt+0x1b18>
   131e8:	cmp	r0, #0
   131ec:	bne	13934 <__assert_fail@plt+0x2234>
   131f0:	add	r4, r9, #4
   131f4:	mov	r0, #0
   131f8:	mov	r1, #10
   131fc:	mov	r2, r4
   13200:	bl	1149c <__gmpz_get_str@plt>
   13204:	mov	r5, r0
   13208:	mov	r0, r4
   1320c:	bl	115e0 <__gmpz_clear@plt>
   13210:	mov	r0, #1
   13214:	stm	r9, {r0, r5}
   13218:	ldr	r0, [r6]
   1321c:	cmp	r0, #0
   13220:	beq	13288 <__assert_fail@plt+0x1b88>
   13224:	cmp	r0, #1
   13228:	bne	13934 <__assert_fail@plt+0x2234>
   1322c:	mov	r0, r6
   13230:	ldr	r4, [r0, #4]!
   13234:	mov	r1, r4
   13238:	ldrb	r2, [r1], #1
   1323c:	cmp	r2, #45	; 0x2d
   13240:	mvn	r2, #47	; 0x2f
   13244:	movne	r1, r4
   13248:	ldrb	r3, [r1], #1
   1324c:	uxtab	r3, r2, r3
   13250:	cmp	r3, #9
   13254:	bhi	135a4 <__assert_fail@plt+0x1ea4>
   13258:	ldrb	r3, [r1], #1
   1325c:	cmp	r3, #0
   13260:	bne	1324c <__assert_fail@plt+0x1b4c>
   13264:	mov	r1, r4
   13268:	mov	r2, #10
   1326c:	bl	116b8 <__gmpz_init_set_str@plt>
   13270:	cmp	r0, #0
   13274:	bne	1398c <__assert_fail@plt+0x228c>
   13278:	mov	r0, r4
   1327c:	bl	13de4 <__assert_fail@plt+0x26e4>
   13280:	mov	r0, #0
   13284:	str	r0, [r6]
   13288:	ldr	r0, [sl]
   1328c:	cmp	r0, #0
   13290:	beq	132f8 <__assert_fail@plt+0x1bf8>
   13294:	cmp	r0, #1
   13298:	bne	13934 <__assert_fail@plt+0x2234>
   1329c:	mov	r0, sl
   132a0:	ldr	r4, [r0, #4]!
   132a4:	mov	r1, r4
   132a8:	ldrb	r2, [r1], #1
   132ac:	cmp	r2, #45	; 0x2d
   132b0:	mvn	r2, #47	; 0x2f
   132b4:	movne	r1, r4
   132b8:	ldrb	r3, [r1], #1
   132bc:	uxtab	r3, r2, r3
   132c0:	cmp	r3, #9
   132c4:	bhi	135a4 <__assert_fail@plt+0x1ea4>
   132c8:	ldrb	r3, [r1], #1
   132cc:	cmp	r3, #0
   132d0:	bne	132bc <__assert_fail@plt+0x1bbc>
   132d4:	mov	r1, r4
   132d8:	mov	r2, #10
   132dc:	bl	116b8 <__gmpz_init_set_str@plt>
   132e0:	cmp	r0, #0
   132e4:	bne	1398c <__assert_fail@plt+0x228c>
   132e8:	mov	r0, r4
   132ec:	bl	13de4 <__assert_fail@plt+0x26e4>
   132f0:	mov	r0, #0
   132f4:	str	r0, [sl]
   132f8:	ldr	r0, [r6, #8]
   132fc:	str	r6, [sp, #16]
   13300:	mvn	r6, #0
   13304:	mvn	r8, #0
   13308:	cmp	r0, #0
   1330c:	blt	13688 <__assert_fail@plt+0x1f88>
   13310:	cmp	r0, #1
   13314:	bls	1366c <__assert_fail@plt+0x1f6c>
   13318:	mvn	r8, #1
   1331c:	ldr	r0, [sl, #8]
   13320:	cmp	r0, #0
   13324:	bge	13694 <__assert_fail@plt+0x1f94>
   13328:	b	136bc <__assert_fail@plt+0x1fbc>
   1332c:	add	r9, r4, #4
   13330:	mov	r0, #0
   13334:	mov	r1, #10
   13338:	mov	r2, r9
   1333c:	bl	1149c <__gmpz_get_str@plt>
   13340:	mov	r7, r0
   13344:	mov	r0, r9
   13348:	bl	115e0 <__gmpz_clear@plt>
   1334c:	mov	r0, #1
   13350:	stm	r4, {r0, r7}
   13354:	mov	r5, r8
   13358:	ldrb	r0, [r7]
   1335c:	mov	sl, #0
   13360:	ldr	r6, [r5, #4]!
   13364:	cmp	r0, #0
   13368:	beq	135f4 <__assert_fail@plt+0x1ef4>
   1336c:	bl	11508 <__ctype_get_mb_cur_max@plt>
   13370:	cmp	r0, #2
   13374:	bcc	13588 <__assert_fail@plt+0x1e88>
   13378:	mov	sl, #0
   1337c:	add	r0, sp, #76	; 0x4c
   13380:	str	r4, [sp, #8]
   13384:	str	r5, [sp, #4]
   13388:	str	r9, [sp, #12]
   1338c:	str	sl, [sp, #84]	; 0x54
   13390:	str	sl, [sp, #80]	; 0x50
   13394:	strb	sl, [sp, #76]	; 0x4c
   13398:	str	r6, [sp, #92]	; 0x5c
   1339c:	strb	sl, [sp, #88]	; 0x58
   133a0:	bl	14118 <__assert_fail@plt+0x2a18>
   133a4:	ldrb	r0, [sp, #100]	; 0x64
   133a8:	cmp	r0, #0
   133ac:	beq	133bc <__assert_fail@plt+0x1cbc>
   133b0:	ldr	r0, [sp, #104]	; 0x68
   133b4:	cmp	r0, #0
   133b8:	beq	135e8 <__assert_fail@plt+0x1ee8>
   133bc:	add	r4, sp, #20
   133c0:	mov	r9, #0
   133c4:	mov	r5, #0
   133c8:	mov	sl, #0
   133cc:	add	r0, r4, #4
   133d0:	str	r0, [sp, #16]
   133d4:	ldr	r0, [sp, #96]	; 0x60
   133d8:	add	r5, r5, #1
   133dc:	cmp	r0, #1
   133e0:	bne	13404 <__assert_fail@plt+0x1d04>
   133e4:	ldr	r6, [sp, #92]	; 0x5c
   133e8:	mov	r0, r7
   133ec:	ldrb	r1, [r6]
   133f0:	bl	13f84 <__assert_fail@plt+0x2884>
   133f4:	mov	r1, #1
   133f8:	cmp	r0, #0
   133fc:	beq	134d4 <__assert_fail@plt+0x1dd4>
   13400:	b	135e4 <__assert_fail@plt+0x1ee4>
   13404:	ldr	r0, [sp, #16]
   13408:	strb	r9, [sp, #20]
   1340c:	str	r7, [sp, #36]	; 0x24
   13410:	str	r9, [r0]
   13414:	str	r9, [r0, #4]
   13418:	mov	r0, r4
   1341c:	strb	r9, [sp, #32]
   13420:	bl	14118 <__assert_fail@plt+0x2a18>
   13424:	ldr	r0, [sp, #48]	; 0x30
   13428:	ldrb	r1, [sp, #44]	; 0x2c
   1342c:	cmp	r0, #0
   13430:	bne	1343c <__assert_fail@plt+0x1d3c>
   13434:	cmp	r1, #0
   13438:	bne	134cc <__assert_fail@plt+0x1dcc>
   1343c:	clz	r1, r1
   13440:	lsr	r1, r1, #5
   13444:	tst	r1, #1
   13448:	bne	1346c <__assert_fail@plt+0x1d6c>
   1344c:	ldrb	r1, [sp, #100]	; 0x64
   13450:	cmp	r1, #0
   13454:	beq	1346c <__assert_fail@plt+0x1d6c>
   13458:	ldr	r1, [sp, #104]	; 0x68
   1345c:	cmp	r0, r1
   13460:	beq	135e4 <__assert_fail@plt+0x1ee4>
   13464:	ldr	r6, [sp, #40]	; 0x28
   13468:	b	13494 <__assert_fail@plt+0x1d94>
   1346c:	ldr	r6, [sp, #40]	; 0x28
   13470:	ldr	r0, [sp, #96]	; 0x60
   13474:	cmp	r6, r0
   13478:	bne	13494 <__assert_fail@plt+0x1d94>
   1347c:	ldr	r1, [sp, #92]	; 0x5c
   13480:	ldr	r0, [sp, #36]	; 0x24
   13484:	mov	r2, r6
   13488:	bl	11484 <memcmp@plt>
   1348c:	cmp	r0, #0
   13490:	beq	135e4 <__assert_fail@plt+0x1ee4>
   13494:	strb	r9, [sp, #32]
   13498:	ldr	r0, [sp, #36]	; 0x24
   1349c:	add	r0, r0, r6
   134a0:	str	r0, [sp, #36]	; 0x24
   134a4:	mov	r0, r4
   134a8:	bl	14118 <__assert_fail@plt+0x2a18>
   134ac:	ldrb	r2, [sp, #44]	; 0x2c
   134b0:	clz	r0, r2
   134b4:	lsr	r1, r0, #5
   134b8:	ldr	r0, [sp, #48]	; 0x30
   134bc:	cmp	r0, #0
   134c0:	bne	13444 <__assert_fail@plt+0x1d44>
   134c4:	cmp	r2, #0
   134c8:	beq	13444 <__assert_fail@plt+0x1d44>
   134cc:	ldr	r6, [sp, #92]	; 0x5c
   134d0:	ldr	r1, [sp, #96]	; 0x60
   134d4:	add	r0, r6, r1
   134d8:	strb	sl, [sp, #88]	; 0x58
   134dc:	str	r0, [sp, #92]	; 0x5c
   134e0:	add	r0, sp, #76	; 0x4c
   134e4:	bl	14118 <__assert_fail@plt+0x2a18>
   134e8:	ldrb	r0, [sp, #100]	; 0x64
   134ec:	cmp	r0, #0
   134f0:	beq	133d4 <__assert_fail@plt+0x1cd4>
   134f4:	ldr	r0, [sp, #104]	; 0x68
   134f8:	cmp	r0, #0
   134fc:	bne	133d4 <__assert_fail@plt+0x1cd4>
   13500:	b	135e8 <__assert_fail@plt+0x1ee8>
   13504:	bl	115e0 <__gmpz_clear@plt>
   13508:	mov	r0, r6
   1350c:	bl	13de4 <__assert_fail@plt+0x26e4>
   13510:	mov	r0, r5
   13514:	ldr	r1, [r0], #4
   13518:	cmp	r1, #1
   1351c:	bne	131b0 <__assert_fail@plt+0x1ab0>
   13520:	ldr	r0, [r0]
   13524:	bl	13de4 <__assert_fail@plt+0x26e4>
   13528:	mov	r0, r5
   1352c:	bl	13de4 <__assert_fail@plt+0x26e4>
   13530:	mov	r0, r7
   13534:	sub	sp, fp, #28
   13538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1353c:	mov	r0, r4
   13540:	bl	11db8 <__assert_fail@plt+0x6b8>
   13544:	ldr	r4, [r6]
   13548:	mov	r7, r0
   1354c:	ldr	r0, [r4]
   13550:	cmp	r0, #0
   13554:	beq	1395c <__assert_fail@plt+0x225c>
   13558:	movw	r1, #48293	; 0xbca5
   1355c:	movt	r1, #2
   13560:	bl	113d0 <strcmp@plt>
   13564:	clz	r1, r0
   13568:	cmp	r0, #0
   1356c:	lsr	r1, r1, #5
   13570:	add	r1, r4, r1, lsl #2
   13574:	str	r1, [r6]
   13578:	bne	13968 <__assert_fail@plt+0x2268>
   1357c:	mov	r0, r7
   13580:	sub	sp, fp, #28
   13584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13588:	mov	r0, r6
   1358c:	mov	r1, r7
   13590:	bl	113e8 <strcspn@plt>
   13594:	ldrb	sl, [r6, r0]
   13598:	cmp	sl, #0
   1359c:	addne	sl, r0, #1
   135a0:	b	135f4 <__assert_fail@plt+0x1ef4>
   135a4:	mov	r0, #16
   135a8:	bl	2a48c <__assert_fail@plt+0x18d8c>
   135ac:	mov	r7, r0
   135b0:	mov	r0, #1
   135b4:	str	r0, [r7]
   135b8:	movw	r0, #47787	; 0xbaab
   135bc:	movt	r0, #2
   135c0:	bl	2a9ac <__assert_fail@plt+0x192ac>
   135c4:	str	r0, [r7, #4]
   135c8:	add	r4, r9, #4
   135cc:	ldr	r0, [r9]
   135d0:	cmp	r0, #1
   135d4:	beq	13888 <__assert_fail@plt+0x2188>
   135d8:	add	r0, r9, #4
   135dc:	bl	115e0 <__gmpz_clear@plt>
   135e0:	b	13890 <__assert_fail@plt+0x2190>
   135e4:	mov	sl, r5
   135e8:	ldr	r9, [sp, #12]
   135ec:	ldr	r5, [sp, #4]
   135f0:	ldr	r4, [sp, #8]
   135f4:	mov	r0, #16
   135f8:	bl	2a48c <__assert_fail@plt+0x18d8c>
   135fc:	mov	r1, #0
   13600:	mov	r7, r0
   13604:	str	r1, [r0], #4
   13608:	mov	r1, sl
   1360c:	bl	11670 <__gmpz_init_set_ui@plt>
   13610:	ldr	r0, [r8]
   13614:	cmp	r0, #1
   13618:	bne	13628 <__assert_fail@plt+0x1f28>
   1361c:	ldr	r0, [r5]
   13620:	bl	13de4 <__assert_fail@plt+0x26e4>
   13624:	b	13630 <__assert_fail@plt+0x1f30>
   13628:	mov	r0, r5
   1362c:	bl	115e0 <__gmpz_clear@plt>
   13630:	mov	r0, r8
   13634:	bl	13de4 <__assert_fail@plt+0x26e4>
   13638:	ldr	r0, [r4]
   1363c:	cmp	r0, #1
   13640:	bne	13650 <__assert_fail@plt+0x1f50>
   13644:	ldr	r0, [r9]
   13648:	bl	13de4 <__assert_fail@plt+0x26e4>
   1364c:	b	13658 <__assert_fail@plt+0x1f58>
   13650:	add	r0, r4, #4
   13654:	bl	115e0 <__gmpz_clear@plt>
   13658:	mov	r0, r4
   1365c:	bl	13de4 <__assert_fail@plt+0x26e4>
   13660:	mov	r0, r7
   13664:	sub	sp, fp, #28
   13668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1366c:	ldr	r1, [sp, #16]
   13670:	cmp	r0, #0
   13674:	ldr	r1, [r1, #12]
   13678:	ldr	r8, [r1]
   1367c:	moveq	r8, r0
   13680:	cmn	r8, #1
   13684:	mvneq	r8, #1
   13688:	ldr	r0, [sl, #8]
   1368c:	cmp	r0, #0
   13690:	blt	136bc <__assert_fail@plt+0x1fbc>
   13694:	cmp	r0, #1
   13698:	bls	136a4 <__assert_fail@plt+0x1fa4>
   1369c:	mvn	r6, #1
   136a0:	b	136bc <__assert_fail@plt+0x1fbc>
   136a4:	ldr	r1, [sl, #12]
   136a8:	cmp	r0, #0
   136ac:	ldr	r6, [r1]
   136b0:	moveq	r6, r0
   136b4:	cmn	r6, #1
   136b8:	mvneq	r6, #1
   136bc:	mov	r0, r9
   136c0:	ldr	r4, [r0, #4]!
   136c4:	str	r0, [sp, #12]
   136c8:	mov	r0, r4
   136cc:	bl	115bc <strlen@plt>
   136d0:	mov	r5, r0
   136d4:	bl	11508 <__ctype_get_mb_cur_max@plt>
   136d8:	cmp	r0, #2
   136dc:	mov	r0, r5
   136e0:	bcc	136ec <__assert_fail@plt+0x1fec>
   136e4:	mov	r0, r4
   136e8:	bl	14064 <__assert_fail@plt+0x2964>
   136ec:	add	r1, r6, #1
   136f0:	cmp	r1, #2
   136f4:	bcc	13748 <__assert_fail@plt+0x2048>
   136f8:	sub	r1, r8, #1
   136fc:	cmp	r1, r0
   13700:	bcs	13748 <__assert_fail@plt+0x2048>
   13704:	sub	r0, r0, r8
   13708:	add	r7, r0, #1
   1370c:	cmp	r7, r6
   13710:	movhi	r7, r6
   13714:	bl	11508 <__ctype_get_mb_cur_max@plt>
   13718:	cmp	r0, #1
   1371c:	bne	1375c <__assert_fail@plt+0x205c>
   13720:	add	r0, r7, #1
   13724:	add	r4, r4, r8
   13728:	bl	2a48c <__assert_fail@plt+0x18d8c>
   1372c:	sub	r1, r4, #1
   13730:	mov	r2, r7
   13734:	mvn	r3, #0
   13738:	mov	r5, r0
   1373c:	bl	116f4 <__mempcpy_chk@plt>
   13740:	mov	r4, r0
   13744:	b	13844 <__assert_fail@plt+0x2144>
   13748:	movw	r0, #47787	; 0xbaab
   1374c:	movt	r0, #2
   13750:	bl	2a9ac <__assert_fail@plt+0x192ac>
   13754:	mov	r5, r0
   13758:	b	1384c <__assert_fail@plt+0x214c>
   1375c:	add	r0, r5, #1
   13760:	str	sl, [sp, #4]
   13764:	bl	2a48c <__assert_fail@plt+0x18d8c>
   13768:	mov	r5, r0
   1376c:	mov	r0, #0
   13770:	str	r0, [sp, #84]	; 0x54
   13774:	str	r0, [sp, #80]	; 0x50
   13778:	strb	r0, [sp, #76]	; 0x4c
   1377c:	str	r4, [sp, #92]	; 0x5c
   13780:	strb	r0, [sp, #88]	; 0x58
   13784:	add	r0, sp, #76	; 0x4c
   13788:	bl	14118 <__assert_fail@plt+0x2a18>
   1378c:	ldr	r0, [sp, #104]	; 0x68
   13790:	mov	r4, r5
   13794:	str	r5, [sp, #8]
   13798:	cmp	r0, #0
   1379c:	movwne	r0, #1
   137a0:	cmp	r7, #0
   137a4:	beq	1383c <__assert_fail@plt+0x213c>
   137a8:	ldrb	r1, [sp, #100]	; 0x64
   137ac:	ldr	r4, [sp, #8]
   137b0:	clz	r1, r1
   137b4:	lsr	r1, r1, #5
   137b8:	orrs	r0, r1, r0
   137bc:	beq	1383c <__assert_fail@plt+0x213c>
   137c0:	ldr	r4, [sp, #8]
   137c4:	mov	r6, #1
   137c8:	mov	sl, #0
   137cc:	add	r5, sp, #76	; 0x4c
   137d0:	cmp	r6, r8
   137d4:	bcc	137f4 <__assert_fail@plt+0x20f4>
   137d8:	ldr	r1, [sp, #92]	; 0x5c
   137dc:	ldr	r2, [sp, #96]	; 0x60
   137e0:	mov	r0, r4
   137e4:	mvn	r3, #0
   137e8:	bl	116f4 <__mempcpy_chk@plt>
   137ec:	mov	r4, r0
   137f0:	sub	r7, r7, #1
   137f4:	strb	sl, [sp, #88]	; 0x58
   137f8:	ldr	r0, [sp, #92]	; 0x5c
   137fc:	ldr	r1, [sp, #96]	; 0x60
   13800:	add	r0, r0, r1
   13804:	str	r0, [sp, #92]	; 0x5c
   13808:	mov	r0, r5
   1380c:	bl	14118 <__assert_fail@plt+0x2a18>
   13810:	ldr	r0, [sp, #104]	; 0x68
   13814:	cmp	r0, #0
   13818:	movwne	r0, #1
   1381c:	cmp	r7, #0
   13820:	beq	1383c <__assert_fail@plt+0x213c>
   13824:	ldrb	r1, [sp, #100]	; 0x64
   13828:	add	r6, r6, #1
   1382c:	clz	r1, r1
   13830:	lsr	r1, r1, #5
   13834:	orrs	r0, r1, r0
   13838:	bne	137d0 <__assert_fail@plt+0x20d0>
   1383c:	ldr	sl, [sp, #4]
   13840:	ldr	r5, [sp, #8]
   13844:	mov	r0, #0
   13848:	strb	r0, [r4]
   1384c:	ldr	r6, [sp, #16]
   13850:	ldr	r4, [sp, #12]
   13854:	mov	r0, #16
   13858:	bl	2a48c <__assert_fail@plt+0x18d8c>
   1385c:	mov	r7, r0
   13860:	mov	r0, #1
   13864:	str	r0, [r7]
   13868:	mov	r0, r5
   1386c:	bl	2a9ac <__assert_fail@plt+0x192ac>
   13870:	str	r0, [r7, #4]
   13874:	mov	r0, r5
   13878:	bl	13de4 <__assert_fail@plt+0x26e4>
   1387c:	ldr	r0, [r9]
   13880:	cmp	r0, #1
   13884:	bne	135d8 <__assert_fail@plt+0x1ed8>
   13888:	ldr	r0, [r4]
   1388c:	bl	13de4 <__assert_fail@plt+0x26e4>
   13890:	mov	r0, r9
   13894:	bl	13de4 <__assert_fail@plt+0x26e4>
   13898:	mov	r0, r6
   1389c:	ldr	r1, [r0], #4
   138a0:	cmp	r1, #1
   138a4:	bne	138b4 <__assert_fail@plt+0x21b4>
   138a8:	ldr	r0, [r0]
   138ac:	bl	13de4 <__assert_fail@plt+0x26e4>
   138b0:	b	138b8 <__assert_fail@plt+0x21b8>
   138b4:	bl	115e0 <__gmpz_clear@plt>
   138b8:	mov	r0, r6
   138bc:	bl	13de4 <__assert_fail@plt+0x26e4>
   138c0:	mov	r0, sl
   138c4:	ldr	r1, [r0], #4
   138c8:	cmp	r1, #1
   138cc:	bne	138dc <__assert_fail@plt+0x21dc>
   138d0:	ldr	r0, [r0]
   138d4:	bl	13de4 <__assert_fail@plt+0x26e4>
   138d8:	b	138e0 <__assert_fail@plt+0x21e0>
   138dc:	bl	115e0 <__gmpz_clear@plt>
   138e0:	mov	r0, sl
   138e4:	bl	13de4 <__assert_fail@plt+0x26e4>
   138e8:	mov	r0, r7
   138ec:	sub	sp, fp, #28
   138f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f4:	movw	r1, #47880	; 0xbb08
   138f8:	movt	r1, #2
   138fc:	mov	r0, #0
   13900:	mov	r2, #5
   13904:	bl	11490 <dcgettext@plt>
   13908:	mov	r4, r0
   1390c:	ldr	r0, [r6]
   13910:	ldr	r2, [r0, #-4]
   13914:	mov	r0, #0
   13918:	mov	r1, #8
   1391c:	bl	15d18 <__assert_fail@plt+0x4618>
   13920:	mov	r3, r0
   13924:	mov	r0, #2
   13928:	mov	r1, #0
   1392c:	mov	r2, r4
   13930:	bl	1152c <error@plt>
   13934:	bl	116e8 <abort@plt>
   13938:	movw	r1, #48001	; 0xbb81
   1393c:	mov	r0, #0
   13940:	mov	r2, #5
   13944:	movt	r1, #2
   13948:	bl	11490 <dcgettext@plt>
   1394c:	mov	r2, r0
   13950:	mov	r0, #2
   13954:	mov	r1, #0
   13958:	bl	1152c <error@plt>
   1395c:	movw	r1, #47922	; 0xbb32
   13960:	movt	r1, #2
   13964:	b	138fc <__assert_fail@plt+0x21fc>
   13968:	movw	r1, #47959	; 0xbb57
   1396c:	mov	r0, #0
   13970:	mov	r2, #5
   13974:	movt	r1, #2
   13978:	bl	11490 <dcgettext@plt>
   1397c:	mov	r4, r0
   13980:	ldr	r0, [r6]
   13984:	ldr	r2, [r0]
   13988:	b	13914 <__assert_fail@plt+0x2214>
   1398c:	movw	r2, #48144	; 0xbc10
   13990:	mov	r0, #3
   13994:	mov	r1, #34	; 0x22
   13998:	mov	r3, r4
   1399c:	movt	r2, #2
   139a0:	bl	1152c <error@plt>
   139a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139a8:	add	fp, sp, #24
   139ac:	sub	sp, sp, #360	; 0x168
   139b0:	mov	r4, r0
   139b4:	ldr	r0, [r0]
   139b8:	mov	r5, r1
   139bc:	cmp	r0, #1
   139c0:	beq	139f4 <__assert_fail@plt+0x22f4>
   139c4:	cmp	r0, #0
   139c8:	bne	13c84 <__assert_fail@plt+0x2584>
   139cc:	add	r6, r4, #4
   139d0:	mov	r0, #0
   139d4:	mov	r1, #10
   139d8:	mov	r2, r6
   139dc:	bl	1149c <__gmpz_get_str@plt>
   139e0:	mov	r7, r0
   139e4:	mov	r0, r6
   139e8:	bl	115e0 <__gmpz_clear@plt>
   139ec:	mov	r0, #1
   139f0:	stm	r4, {r0, r7}
   139f4:	ldr	r0, [r5]
   139f8:	cmp	r0, #0
   139fc:	beq	13a10 <__assert_fail@plt+0x2310>
   13a00:	cmp	r0, #1
   13a04:	bne	13c84 <__assert_fail@plt+0x2584>
   13a08:	ldr	r6, [r5, #4]
   13a0c:	b	13a38 <__assert_fail@plt+0x2338>
   13a10:	add	r7, r5, #4
   13a14:	mov	r0, #0
   13a18:	mov	r1, #10
   13a1c:	mov	r2, r7
   13a20:	bl	1149c <__gmpz_get_str@plt>
   13a24:	mov	r6, r0
   13a28:	mov	r0, r7
   13a2c:	bl	115e0 <__gmpz_clear@plt>
   13a30:	mov	r0, #1
   13a34:	stm	r5, {r0, r6}
   13a38:	movw	r0, #54000	; 0xd2f0
   13a3c:	movw	r1, #710	; 0x2c6
   13a40:	movt	r0, #3
   13a44:	str	r1, [r0]
   13a48:	mov	r0, #0
   13a4c:	add	r1, sp, #16
   13a50:	str	r0, [sp, #8]
   13a54:	str	r0, [sp, #4]
   13a58:	str	r0, [fp, #-112]	; 0xffffff90
   13a5c:	str	r0, [fp, #-108]	; 0xffffff94
   13a60:	str	r1, [fp, #-96]	; 0xffffffa0
   13a64:	str	r0, [sp, #12]
   13a68:	str	r0, [fp, #-92]	; 0xffffffa4
   13a6c:	mov	r0, r6
   13a70:	bl	115bc <strlen@plt>
   13a74:	mov	r1, r0
   13a78:	sub	r2, fp, #112	; 0x70
   13a7c:	mov	r0, r6
   13a80:	bl	16300 <__assert_fail@plt+0x4c00>
   13a84:	cmp	r0, #0
   13a88:	bne	13c88 <__assert_fail@plt+0x2588>
   13a8c:	ldrb	r0, [fp, #-84]	; 0xffffffac
   13a90:	and	r0, r0, #127	; 0x7f
   13a94:	strb	r0, [fp, #-84]	; 0xffffffac
   13a98:	ldr	r5, [r4, #4]
   13a9c:	mov	r0, r5
   13aa0:	bl	115bc <strlen@plt>
   13aa4:	mov	r2, r0
   13aa8:	add	r0, sp, #4
   13aac:	mov	r1, r5
   13ab0:	mov	r3, #0
   13ab4:	str	r0, [sp]
   13ab8:	sub	r0, fp, #112	; 0x70
   13abc:	bl	1affc <__assert_fail@plt+0x98fc>
   13ac0:	mov	r5, r0
   13ac4:	cmp	r0, #0
   13ac8:	blt	13b1c <__assert_fail@plt+0x241c>
   13acc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13ad0:	cmp	r0, #0
   13ad4:	beq	13b60 <__assert_fail@plt+0x2460>
   13ad8:	ldr	r0, [sp, #12]
   13adc:	ldr	r0, [r0, #4]
   13ae0:	cmn	r0, #1
   13ae4:	ble	13c28 <__assert_fail@plt+0x2528>
   13ae8:	ldr	r1, [r4, #4]
   13aec:	mov	r2, #0
   13af0:	strb	r2, [r1, r0]
   13af4:	ldr	r0, [sp, #8]
   13af8:	ldr	r5, [r4, #4]
   13afc:	ldr	r6, [r0, #4]
   13b00:	mov	r0, #16
   13b04:	bl	2a48c <__assert_fail@plt+0x18d8c>
   13b08:	mov	r4, r0
   13b0c:	mov	r0, #1
   13b10:	str	r0, [r4]
   13b14:	add	r0, r5, r6
   13b18:	b	13c44 <__assert_fail@plt+0x2544>
   13b1c:	cmn	r5, #1
   13b20:	bne	13ca0 <__assert_fail@plt+0x25a0>
   13b24:	ldr	r5, [fp, #-88]	; 0xffffffa8
   13b28:	mov	r0, #16
   13b2c:	bl	2a48c <__assert_fail@plt+0x18d8c>
   13b30:	mov	r4, r0
   13b34:	cmp	r5, #0
   13b38:	bne	13c34 <__assert_fail@plt+0x2534>
   13b3c:	mov	r1, #0
   13b40:	mov	r0, r4
   13b44:	str	r1, [r0], #4
   13b48:	mov	r1, #0
   13b4c:	bl	11670 <__gmpz_init_set_ui@plt>
   13b50:	ldr	r0, [sp, #4]
   13b54:	cmp	r0, #0
   13b58:	bne	13c58 <__assert_fail@plt+0x2558>
   13b5c:	b	13c68 <__assert_fail@plt+0x2568>
   13b60:	bl	11508 <__ctype_get_mb_cur_max@plt>
   13b64:	cmp	r0, #1
   13b68:	mov	r6, r5
   13b6c:	beq	13bfc <__assert_fail@plt+0x24fc>
   13b70:	ldr	r7, [r4, #4]
   13b74:	mov	r6, #0
   13b78:	sub	r0, fp, #80	; 0x50
   13b7c:	str	r6, [fp, #-72]	; 0xffffffb8
   13b80:	str	r6, [fp, #-76]	; 0xffffffb4
   13b84:	strb	r6, [fp, #-80]	; 0xffffffb0
   13b88:	strb	r6, [fp, #-68]	; 0xffffffbc
   13b8c:	str	r7, [fp, #-64]	; 0xffffffc0
   13b90:	bl	14118 <__assert_fail@plt+0x2a18>
   13b94:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   13b98:	cmp	r0, #0
   13b9c:	beq	13bac <__assert_fail@plt+0x24ac>
   13ba0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13ba4:	cmp	r0, #0
   13ba8:	beq	13bfc <__assert_fail@plt+0x24fc>
   13bac:	mov	r8, #0
   13bb0:	sub	r4, fp, #80	; 0x50
   13bb4:	mov	r6, #0
   13bb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13bbc:	sub	r1, r0, r7
   13bc0:	cmp	r1, r5
   13bc4:	addcc	r6, r6, #1
   13bc8:	bcs	13bfc <__assert_fail@plt+0x24fc>
   13bcc:	strb	r8, [fp, #-68]	; 0xffffffbc
   13bd0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13bd4:	add	r0, r0, r1
   13bd8:	str	r0, [fp, #-64]	; 0xffffffc0
   13bdc:	mov	r0, r4
   13be0:	bl	14118 <__assert_fail@plt+0x2a18>
   13be4:	ldrb	r0, [fp, #-56]	; 0xffffffc8
   13be8:	cmp	r0, #0
   13bec:	beq	13bb8 <__assert_fail@plt+0x24b8>
   13bf0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13bf4:	cmp	r0, #0
   13bf8:	bne	13bb8 <__assert_fail@plt+0x24b8>
   13bfc:	mov	r0, #16
   13c00:	bl	2a48c <__assert_fail@plt+0x18d8c>
   13c04:	mov	r1, #0
   13c08:	mov	r4, r0
   13c0c:	str	r1, [r0], #4
   13c10:	mov	r1, r6
   13c14:	bl	11670 <__gmpz_init_set_ui@plt>
   13c18:	ldr	r0, [sp, #4]
   13c1c:	cmp	r0, #0
   13c20:	bne	13c58 <__assert_fail@plt+0x2558>
   13c24:	b	13c68 <__assert_fail@plt+0x2568>
   13c28:	mov	r0, #16
   13c2c:	bl	2a48c <__assert_fail@plt+0x18d8c>
   13c30:	mov	r4, r0
   13c34:	mov	r0, #1
   13c38:	str	r0, [r4]
   13c3c:	movw	r0, #47787	; 0xbaab
   13c40:	movt	r0, #2
   13c44:	bl	2a9ac <__assert_fail@plt+0x192ac>
   13c48:	str	r0, [r4, #4]
   13c4c:	ldr	r0, [sp, #4]
   13c50:	cmp	r0, #0
   13c54:	beq	13c68 <__assert_fail@plt+0x2568>
   13c58:	ldr	r0, [sp, #8]
   13c5c:	bl	13de4 <__assert_fail@plt+0x26e4>
   13c60:	ldr	r0, [sp, #12]
   13c64:	bl	13de4 <__assert_fail@plt+0x26e4>
   13c68:	mov	r0, #0
   13c6c:	str	r0, [fp, #-96]	; 0xffffffa0
   13c70:	sub	r0, fp, #112	; 0x70
   13c74:	bl	18564 <__assert_fail@plt+0x6e64>
   13c78:	mov	r0, r4
   13c7c:	sub	sp, fp, #24
   13c80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c84:	bl	116e8 <abort@plt>
   13c88:	movw	r2, #48144	; 0xbc10
   13c8c:	mov	r3, r0
   13c90:	mov	r0, #2
   13c94:	mov	r1, #0
   13c98:	movt	r2, #2
   13c9c:	bl	1152c <error@plt>
   13ca0:	mov	r4, #75	; 0x4b
   13ca4:	cmn	r5, #2
   13ca8:	bne	13cb4 <__assert_fail@plt+0x25b4>
   13cac:	bl	115ec <__errno_location@plt>
   13cb0:	ldr	r4, [r0]
   13cb4:	movw	r1, #48030	; 0xbb9e
   13cb8:	mov	r0, #0
   13cbc:	mov	r2, #5
   13cc0:	movt	r1, #2
   13cc4:	bl	11490 <dcgettext@plt>
   13cc8:	mov	r2, r0
   13ccc:	mov	r0, #3
   13cd0:	mov	r1, r4
   13cd4:	bl	1152c <error@plt>
   13cd8:	movw	r1, #53684	; 0xd1b4
   13cdc:	movt	r1, #3
   13ce0:	str	r0, [r1, #4]
   13ce4:	bx	lr
   13ce8:	movw	r1, #53684	; 0xd1b4
   13cec:	movt	r1, #3
   13cf0:	strb	r0, [r1]
   13cf4:	bx	lr
   13cf8:	push	{r4, r5, r6, sl, fp, lr}
   13cfc:	add	fp, sp, #16
   13d00:	sub	sp, sp, #8
   13d04:	movw	r0, #53668	; 0xd1a4
   13d08:	movt	r0, #3
   13d0c:	ldr	r0, [r0]
   13d10:	bl	2ab08 <__assert_fail@plt+0x19408>
   13d14:	cmp	r0, #0
   13d18:	beq	13d40 <__assert_fail@plt+0x2640>
   13d1c:	movw	r5, #53684	; 0xd1b4
   13d20:	movt	r5, #3
   13d24:	ldrb	r0, [r5]
   13d28:	cmp	r0, #0
   13d2c:	beq	13d6c <__assert_fail@plt+0x266c>
   13d30:	bl	115ec <__errno_location@plt>
   13d34:	ldr	r0, [r0]
   13d38:	cmp	r0, #32
   13d3c:	bne	13d6c <__assert_fail@plt+0x266c>
   13d40:	movw	r0, #53664	; 0xd1a0
   13d44:	movt	r0, #3
   13d48:	ldr	r0, [r0]
   13d4c:	bl	2ab08 <__assert_fail@plt+0x19408>
   13d50:	cmp	r0, #0
   13d54:	subeq	sp, fp, #16
   13d58:	popeq	{r4, r5, r6, sl, fp, pc}
   13d5c:	movw	r0, #53576	; 0xd148
   13d60:	movt	r0, #3
   13d64:	ldr	r0, [r0]
   13d68:	bl	1143c <_exit@plt>
   13d6c:	movw	r1, #48128	; 0xbc00
   13d70:	mov	r0, #0
   13d74:	mov	r2, #5
   13d78:	movt	r1, #2
   13d7c:	bl	11490 <dcgettext@plt>
   13d80:	ldr	r6, [r5, #4]
   13d84:	mov	r4, r0
   13d88:	bl	115ec <__errno_location@plt>
   13d8c:	ldr	r5, [r0]
   13d90:	cmp	r6, #0
   13d94:	bne	13db0 <__assert_fail@plt+0x26b0>
   13d98:	movw	r2, #48144	; 0xbc10
   13d9c:	mov	r0, #0
   13da0:	mov	r1, r5
   13da4:	mov	r3, r4
   13da8:	movt	r2, #2
   13dac:	b	13dd0 <__assert_fail@plt+0x26d0>
   13db0:	mov	r0, r6
   13db4:	bl	15f60 <__assert_fail@plt+0x4860>
   13db8:	movw	r2, #48140	; 0xbc0c
   13dbc:	mov	r3, r0
   13dc0:	str	r4, [sp]
   13dc4:	mov	r0, #0
   13dc8:	mov	r1, r5
   13dcc:	movt	r2, #2
   13dd0:	bl	1152c <error@plt>
   13dd4:	movw	r0, #53576	; 0xd148
   13dd8:	movt	r0, #3
   13ddc:	ldr	r0, [r0]
   13de0:	bl	1143c <_exit@plt>
   13de4:	push	{r4, r5, r6, sl, fp, lr}
   13de8:	add	fp, sp, #16
   13dec:	mov	r4, r0
   13df0:	bl	115ec <__errno_location@plt>
   13df4:	ldr	r6, [r0]
   13df8:	mov	r5, r0
   13dfc:	mov	r0, r4
   13e00:	bl	11424 <free@plt>
   13e04:	str	r6, [r5]
   13e08:	pop	{r4, r5, r6, sl, fp, pc}
   13e0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e10:	add	fp, sp, #24
   13e14:	sub	sp, sp, #8
   13e18:	movw	r6, #53672	; 0xd1a8
   13e1c:	mov	r4, #0
   13e20:	cmp	r0, #2
   13e24:	movt	r6, #3
   13e28:	ldr	r7, [r6]
   13e2c:	str	r4, [r6]
   13e30:	bne	13ea4 <__assert_fail@plt+0x27a4>
   13e34:	mov	r8, r3
   13e38:	movw	r3, #48160	; 0xbc20
   13e3c:	mov	r5, r2
   13e40:	movw	r2, #47808	; 0xbac0
   13e44:	mov	r0, #2
   13e48:	str	r4, [sp]
   13e4c:	movt	r2, #2
   13e50:	movt	r3, #2
   13e54:	bl	11598 <getopt_long@plt>
   13e58:	cmp	r0, #104	; 0x68
   13e5c:	beq	13e98 <__assert_fail@plt+0x2798>
   13e60:	cmp	r0, #118	; 0x76
   13e64:	bne	13ea4 <__assert_fail@plt+0x27a4>
   13e68:	movw	r0, #53668	; 0xd1a4
   13e6c:	ldr	r3, [fp, #8]
   13e70:	add	r1, fp, #16
   13e74:	mov	r2, r8
   13e78:	movt	r0, #3
   13e7c:	str	r1, [sp, #4]
   13e80:	str	r1, [sp]
   13e84:	mov	r1, r5
   13e88:	ldr	r0, [r0]
   13e8c:	bl	2a144 <__assert_fail@plt+0x18a44>
   13e90:	mov	r0, #0
   13e94:	bl	115b0 <exit@plt>
   13e98:	ldr	r1, [fp, #12]
   13e9c:	mov	r0, #0
   13ea0:	blx	r1
   13ea4:	movw	r0, #53656	; 0xd198
   13ea8:	str	r7, [r6]
   13eac:	movt	r0, #3
   13eb0:	str	r4, [r0]
   13eb4:	sub	sp, fp, #24
   13eb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ebc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ec0:	add	fp, sp, #24
   13ec4:	sub	sp, sp, #8
   13ec8:	movw	r6, #53672	; 0xd1a8
   13ecc:	mov	r8, r3
   13ed0:	ldr	r3, [fp, #12]
   13ed4:	mov	r5, r2
   13ed8:	mov	r2, #1
   13edc:	movw	r4, #47787	; 0xbaab
   13ee0:	movt	r6, #3
   13ee4:	movt	r4, #2
   13ee8:	ldr	r7, [r6]
   13eec:	str	r2, [r6]
   13ef0:	mov	r2, #0
   13ef4:	str	r2, [sp]
   13ef8:	movw	r2, #47808	; 0xbac0
   13efc:	cmp	r3, #0
   13f00:	movt	r2, #2
   13f04:	movw	r3, #48160	; 0xbc20
   13f08:	movne	r2, r4
   13f0c:	movt	r3, #2
   13f10:	bl	11598 <getopt_long@plt>
   13f14:	cmn	r0, #1
   13f18:	beq	13f48 <__assert_fail@plt+0x2848>
   13f1c:	ldr	r1, [fp, #16]
   13f20:	cmp	r0, #104	; 0x68
   13f24:	beq	13f40 <__assert_fail@plt+0x2840>
   13f28:	cmp	r0, #118	; 0x76
   13f2c:	beq	13f54 <__assert_fail@plt+0x2854>
   13f30:	movw	r0, #53576	; 0xd148
   13f34:	movt	r0, #3
   13f38:	ldr	r0, [r0]
   13f3c:	b	13f44 <__assert_fail@plt+0x2844>
   13f40:	mov	r0, #0
   13f44:	blx	r1
   13f48:	str	r7, [r6]
   13f4c:	sub	sp, fp, #24
   13f50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f54:	movw	r0, #53668	; 0xd1a4
   13f58:	ldr	r3, [fp, #8]
   13f5c:	add	r1, fp, #20
   13f60:	mov	r2, r8
   13f64:	movt	r0, #3
   13f68:	str	r1, [sp, #4]
   13f6c:	str	r1, [sp]
   13f70:	mov	r1, r5
   13f74:	ldr	r0, [r0]
   13f78:	bl	2a144 <__assert_fail@plt+0x18a44>
   13f7c:	mov	r0, #0
   13f80:	bl	115b0 <exit@plt>
   13f84:	push	{r4, r5, r6, sl, fp, lr}
   13f88:	add	fp, sp, #16
   13f8c:	sub	sp, sp, #56	; 0x38
   13f90:	mov	r5, r1
   13f94:	mov	r6, r0
   13f98:	and	r4, r1, #240	; 0xf0
   13f9c:	bl	11508 <__ctype_get_mb_cur_max@plt>
   13fa0:	cmp	r4, #48	; 0x30
   13fa4:	cmpcs	r0, #2
   13fa8:	bcs	13fc0 <__assert_fail@plt+0x28c0>
   13fac:	mov	r0, r6
   13fb0:	mov	r1, r5
   13fb4:	sub	sp, fp, #16
   13fb8:	pop	{r4, r5, r6, sl, fp, lr}
   13fbc:	b	115c8 <strchr@plt>
   13fc0:	mov	r4, #0
   13fc4:	mov	r0, sp
   13fc8:	str	r4, [sp, #8]
   13fcc:	str	r4, [sp, #4]
   13fd0:	strb	r4, [sp]
   13fd4:	str	r6, [sp, #16]
   13fd8:	strb	r4, [sp, #12]
   13fdc:	bl	14118 <__assert_fail@plt+0x2a18>
   13fe0:	ldrb	r0, [sp, #24]
   13fe4:	cmp	r0, #0
   13fe8:	beq	13ff8 <__assert_fail@plt+0x28f8>
   13fec:	ldr	r0, [sp, #28]
   13ff0:	cmp	r0, #0
   13ff4:	beq	14048 <__assert_fail@plt+0x2948>
   13ff8:	uxtb	r6, r5
   13ffc:	mov	r5, sp
   14000:	mov	r4, #0
   14004:	ldr	r1, [sp, #20]
   14008:	ldr	r0, [sp, #16]
   1400c:	cmp	r1, #1
   14010:	ldrbeq	r2, [r0]
   14014:	cmpeq	r2, r6
   14018:	beq	14054 <__assert_fail@plt+0x2954>
   1401c:	add	r0, r0, r1
   14020:	strb	r4, [sp, #12]
   14024:	str	r0, [sp, #16]
   14028:	mov	r0, r5
   1402c:	bl	14118 <__assert_fail@plt+0x2a18>
   14030:	ldrb	r0, [sp, #24]
   14034:	cmp	r0, #0
   14038:	beq	14004 <__assert_fail@plt+0x2904>
   1403c:	ldr	r0, [sp, #28]
   14040:	cmp	r0, #0
   14044:	bne	14004 <__assert_fail@plt+0x2904>
   14048:	mov	r0, r4
   1404c:	sub	sp, fp, #16
   14050:	pop	{r4, r5, r6, sl, fp, pc}
   14054:	mov	r4, r0
   14058:	mov	r0, r4
   1405c:	sub	sp, fp, #16
   14060:	pop	{r4, r5, r6, sl, fp, pc}
   14064:	push	{r4, r5, r6, sl, fp, lr}
   14068:	add	fp, sp, #16
   1406c:	sub	sp, sp, #56	; 0x38
   14070:	mov	r5, r0
   14074:	bl	11508 <__ctype_get_mb_cur_max@plt>
   14078:	cmp	r0, #2
   1407c:	bcc	14108 <__assert_fail@plt+0x2a08>
   14080:	mov	r4, #0
   14084:	mov	r0, sp
   14088:	str	r4, [sp, #8]
   1408c:	str	r4, [sp, #4]
   14090:	strb	r4, [sp]
   14094:	str	r5, [sp, #16]
   14098:	strb	r4, [sp, #12]
   1409c:	bl	14118 <__assert_fail@plt+0x2a18>
   140a0:	ldrb	r0, [sp, #24]
   140a4:	cmp	r0, #0
   140a8:	beq	140b8 <__assert_fail@plt+0x29b8>
   140ac:	ldr	r0, [sp, #28]
   140b0:	cmp	r0, #0
   140b4:	beq	140fc <__assert_fail@plt+0x29fc>
   140b8:	mov	r6, #0
   140bc:	mov	r5, sp
   140c0:	mov	r4, #0
   140c4:	strb	r6, [sp, #12]
   140c8:	ldr	r0, [sp, #16]
   140cc:	ldr	r1, [sp, #20]
   140d0:	add	r0, r0, r1
   140d4:	str	r0, [sp, #16]
   140d8:	mov	r0, r5
   140dc:	bl	14118 <__assert_fail@plt+0x2a18>
   140e0:	ldrb	r1, [sp, #24]
   140e4:	ldr	r0, [sp, #28]
   140e8:	add	r4, r4, #1
   140ec:	cmp	r1, #0
   140f0:	beq	140c4 <__assert_fail@plt+0x29c4>
   140f4:	cmp	r0, #0
   140f8:	bne	140c4 <__assert_fail@plt+0x29c4>
   140fc:	mov	r0, r4
   14100:	sub	sp, fp, #16
   14104:	pop	{r4, r5, r6, sl, fp, pc}
   14108:	mov	r0, r5
   1410c:	sub	sp, fp, #16
   14110:	pop	{r4, r5, r6, sl, fp, lr}
   14114:	b	115bc <strlen@plt>
   14118:	push	{r4, r5, r6, r7, fp, lr}
   1411c:	add	fp, sp, #16
   14120:	mov	r4, r0
   14124:	ldrb	r0, [r0, #12]
   14128:	cmp	r0, #0
   1412c:	popne	{r4, r5, r6, r7, fp, pc}
   14130:	ldrb	r0, [r4]
   14134:	ldr	r6, [r4, #16]
   14138:	cmp	r0, #0
   1413c:	beq	141a4 <__assert_fail@plt+0x2aa4>
   14140:	add	r5, r4, #4
   14144:	bl	11508 <__ctype_get_mb_cur_max@plt>
   14148:	mov	r1, r0
   1414c:	mov	r0, r6
   14150:	bl	29b38 <__assert_fail@plt+0x18438>
   14154:	add	r7, r4, #28
   14158:	mov	r2, r0
   1415c:	mov	r1, r6
   14160:	mov	r3, r5
   14164:	mov	r0, r7
   14168:	bl	2aedc <__assert_fail@plt+0x197dc>
   1416c:	cmn	r0, #2
   14170:	str	r0, [r4, #20]
   14174:	beq	14230 <__assert_fail@plt+0x2b30>
   14178:	cmp	r0, #0
   1417c:	beq	141e4 <__assert_fail@plt+0x2ae4>
   14180:	cmn	r0, #1
   14184:	bne	14208 <__assert_fail@plt+0x2b08>
   14188:	mov	r0, #0
   1418c:	strb	r0, [r4, #24]
   14190:	mov	r0, #1
   14194:	str	r0, [r4, #20]
   14198:	mov	r0, #1
   1419c:	strb	r0, [r4, #12]
   141a0:	pop	{r4, r5, r6, r7, fp, pc}
   141a4:	ldrb	r0, [r6]
   141a8:	movw	r2, #49968	; 0xc330
   141ac:	movt	r2, #2
   141b0:	ubfx	r1, r0, #5, #3
   141b4:	ldr	r1, [r2, r1, lsl #2]
   141b8:	and	r2, r0, #31
   141bc:	mov	r0, #1
   141c0:	tst	r1, r0, lsl r2
   141c4:	beq	14250 <__assert_fail@plt+0x2b50>
   141c8:	str	r0, [r4, #20]
   141cc:	ldrb	r1, [r6]
   141d0:	strb	r0, [r4, #24]
   141d4:	str	r1, [r4, #28]
   141d8:	mov	r0, #1
   141dc:	strb	r0, [r4, #12]
   141e0:	pop	{r4, r5, r6, r7, fp, pc}
   141e4:	mov	r0, #1
   141e8:	str	r0, [r4, #20]
   141ec:	ldr	r0, [r4, #16]
   141f0:	ldrb	r0, [r0]
   141f4:	cmp	r0, #0
   141f8:	bne	14270 <__assert_fail@plt+0x2b70>
   141fc:	ldr	r0, [r7]
   14200:	cmp	r0, #0
   14204:	bne	14290 <__assert_fail@plt+0x2b90>
   14208:	mov	r0, #1
   1420c:	strb	r0, [r4, #24]
   14210:	mov	r0, r5
   14214:	bl	11478 <mbsinit@plt>
   14218:	cmp	r0, #0
   1421c:	movne	r0, #0
   14220:	strbne	r0, [r4]
   14224:	mov	r0, #1
   14228:	strb	r0, [r4, #12]
   1422c:	pop	{r4, r5, r6, r7, fp, pc}
   14230:	ldr	r0, [r4, #16]
   14234:	bl	115bc <strlen@plt>
   14238:	str	r0, [r4, #20]
   1423c:	mov	r0, #0
   14240:	strb	r0, [r4, #24]
   14244:	mov	r0, #1
   14248:	strb	r0, [r4, #12]
   1424c:	pop	{r4, r5, r6, r7, fp, pc}
   14250:	add	r5, r4, #4
   14254:	mov	r0, r5
   14258:	bl	11478 <mbsinit@plt>
   1425c:	cmp	r0, #0
   14260:	beq	142b0 <__assert_fail@plt+0x2bb0>
   14264:	mov	r0, #1
   14268:	strb	r0, [r4]
   1426c:	b	14144 <__assert_fail@plt+0x2a44>
   14270:	movw	r0, #48295	; 0xbca7
   14274:	movw	r1, #48231	; 0xbc67
   14278:	movw	r3, #48247	; 0xbc77
   1427c:	mov	r2, #171	; 0xab
   14280:	movt	r0, #2
   14284:	movt	r1, #2
   14288:	movt	r3, #2
   1428c:	bl	11700 <__assert_fail@plt>
   14290:	movw	r0, #48318	; 0xbcbe
   14294:	movw	r1, #48231	; 0xbc67
   14298:	movw	r3, #48247	; 0xbc77
   1429c:	mov	r2, #172	; 0xac
   142a0:	movt	r0, #2
   142a4:	movt	r1, #2
   142a8:	movt	r3, #2
   142ac:	bl	11700 <__assert_fail@plt>
   142b0:	movw	r0, #48208	; 0xbc50
   142b4:	movw	r1, #48231	; 0xbc67
   142b8:	movw	r3, #48247	; 0xbc77
   142bc:	mov	r2, #143	; 0x8f
   142c0:	movt	r0, #2
   142c4:	movt	r1, #2
   142c8:	movt	r3, #2
   142cc:	bl	11700 <__assert_fail@plt>
   142d0:	ldr	r2, [r0, #16]
   142d4:	add	r1, r2, r1
   142d8:	str	r1, [r0, #16]
   142dc:	bx	lr
   142e0:	push	{r4, r5, r6, sl, fp, lr}
   142e4:	add	fp, sp, #16
   142e8:	mov	r5, r1
   142ec:	ldrb	r1, [r1]
   142f0:	mov	r4, r0
   142f4:	strb	r1, [r0], #4
   142f8:	cmp	r1, #0
   142fc:	beq	1430c <__assert_fail@plt+0x2c0c>
   14300:	ldmib	r5, {r1, r2}
   14304:	stm	r0, {r1, r2}
   14308:	b	14318 <__assert_fail@plt+0x2c18>
   1430c:	mov	r1, #0
   14310:	str	r1, [r0]
   14314:	str	r1, [r0, #4]
   14318:	ldrb	r0, [r5, #12]
   1431c:	strb	r0, [r4, #12]
   14320:	add	r0, r5, #32
   14324:	ldr	r1, [r5, #16]
   14328:	cmp	r1, r0
   1432c:	beq	14338 <__assert_fail@plt+0x2c38>
   14330:	mov	r6, r1
   14334:	b	14348 <__assert_fail@plt+0x2c48>
   14338:	ldr	r2, [r5, #20]
   1433c:	add	r6, r4, #32
   14340:	mov	r0, r6
   14344:	bl	11448 <memcpy@plt>
   14348:	str	r6, [r4, #16]
   1434c:	ldr	r0, [r5, #20]
   14350:	str	r0, [r4, #20]
   14354:	ldrb	r0, [r5, #24]
   14358:	strb	r0, [r4, #24]
   1435c:	cmp	r0, #0
   14360:	ldrne	r0, [r5, #28]
   14364:	strne	r0, [r4, #28]
   14368:	pop	{r4, r5, r6, sl, fp, pc}
   1436c:	push	{r4, r5, fp, lr}
   14370:	add	fp, sp, #8
   14374:	cmp	r0, #0
   14378:	beq	1440c <__assert_fail@plt+0x2d0c>
   1437c:	mov	r1, #47	; 0x2f
   14380:	mov	r4, r0
   14384:	bl	11694 <strrchr@plt>
   14388:	cmp	r0, #0
   1438c:	mov	r5, r4
   14390:	addne	r5, r0, #1
   14394:	sub	r0, r5, r4
   14398:	cmp	r0, #7
   1439c:	blt	143f0 <__assert_fail@plt+0x2cf0>
   143a0:	movw	r1, #48392	; 0xbd08
   143a4:	sub	r0, r5, #7
   143a8:	mov	r2, #7
   143ac:	movt	r1, #2
   143b0:	bl	116dc <strncmp@plt>
   143b4:	cmp	r0, #0
   143b8:	bne	143f0 <__assert_fail@plt+0x2cf0>
   143bc:	movw	r1, #48400	; 0xbd10
   143c0:	mov	r0, r5
   143c4:	mov	r2, #3
   143c8:	movt	r1, #2
   143cc:	bl	116dc <strncmp@plt>
   143d0:	cmp	r0, #0
   143d4:	beq	143e0 <__assert_fail@plt+0x2ce0>
   143d8:	mov	r4, r5
   143dc:	b	143f0 <__assert_fail@plt+0x2cf0>
   143e0:	movw	r0, #53648	; 0xd190
   143e4:	add	r4, r5, #3
   143e8:	movt	r0, #3
   143ec:	str	r4, [r0]
   143f0:	movw	r0, #53652	; 0xd194
   143f4:	movt	r0, #3
   143f8:	str	r4, [r0]
   143fc:	movw	r0, #53692	; 0xd1bc
   14400:	movt	r0, #3
   14404:	str	r4, [r0]
   14408:	pop	{r4, r5, fp, pc}
   1440c:	movw	r0, #53664	; 0xd1a0
   14410:	mov	r1, #55	; 0x37
   14414:	mov	r2, #1
   14418:	movt	r0, #3
   1441c:	ldr	r3, [r0]
   14420:	movw	r0, #48336	; 0xbcd0
   14424:	movt	r0, #2
   14428:	bl	114f0 <fwrite@plt>
   1442c:	bl	116e8 <abort@plt>
   14430:	push	{r4, r5, r6, sl, fp, lr}
   14434:	add	fp, sp, #16
   14438:	mov	r4, r0
   1443c:	movw	r0, #53696	; 0xd1c0
   14440:	movt	r0, #3
   14444:	cmp	r4, #0
   14448:	moveq	r4, r0
   1444c:	bl	115ec <__errno_location@plt>
   14450:	ldr	r6, [r0]
   14454:	mov	r5, r0
   14458:	mov	r0, r4
   1445c:	mov	r1, #48	; 0x30
   14460:	bl	2a8ec <__assert_fail@plt+0x191ec>
   14464:	str	r6, [r5]
   14468:	pop	{r4, r5, r6, sl, fp, pc}
   1446c:	movw	r1, #53696	; 0xd1c0
   14470:	cmp	r0, #0
   14474:	movt	r1, #3
   14478:	movne	r1, r0
   1447c:	ldr	r0, [r1]
   14480:	bx	lr
   14484:	movw	r2, #53696	; 0xd1c0
   14488:	cmp	r0, #0
   1448c:	movt	r2, #3
   14490:	movne	r2, r0
   14494:	str	r1, [r2]
   14498:	bx	lr
   1449c:	movw	r3, #53696	; 0xd1c0
   144a0:	cmp	r0, #0
   144a4:	movt	r3, #3
   144a8:	movne	r3, r0
   144ac:	ubfx	r0, r1, #5, #3
   144b0:	and	r1, r1, #31
   144b4:	add	r0, r3, r0, lsl #2
   144b8:	ldr	r3, [r0, #8]
   144bc:	eor	r2, r2, r3, lsr r1
   144c0:	and	r2, r2, #1
   144c4:	eor	r2, r3, r2, lsl r1
   144c8:	str	r2, [r0, #8]
   144cc:	mov	r0, #1
   144d0:	and	r0, r0, r3, lsr r1
   144d4:	bx	lr
   144d8:	movw	r2, #53696	; 0xd1c0
   144dc:	cmp	r0, #0
   144e0:	movt	r2, #3
   144e4:	movne	r2, r0
   144e8:	ldr	r0, [r2, #4]
   144ec:	str	r1, [r2, #4]
   144f0:	bx	lr
   144f4:	movw	r3, #53696	; 0xd1c0
   144f8:	cmp	r0, #0
   144fc:	movt	r3, #3
   14500:	movne	r3, r0
   14504:	cmp	r1, #0
   14508:	mov	r0, #10
   1450c:	cmpne	r2, #0
   14510:	str	r0, [r3]
   14514:	bne	14524 <__assert_fail@plt+0x2e24>
   14518:	push	{fp, lr}
   1451c:	mov	fp, sp
   14520:	bl	116e8 <abort@plt>
   14524:	str	r1, [r3, #40]	; 0x28
   14528:	str	r2, [r3, #44]	; 0x2c
   1452c:	bx	lr
   14530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14534:	add	fp, sp, #28
   14538:	sub	sp, sp, #20
   1453c:	mov	r7, r0
   14540:	ldr	r0, [fp, #8]
   14544:	movw	r5, #53696	; 0xd1c0
   14548:	mov	r8, r3
   1454c:	mov	r9, r2
   14550:	mov	sl, r1
   14554:	movt	r5, #3
   14558:	cmp	r0, #0
   1455c:	movne	r5, r0
   14560:	bl	115ec <__errno_location@plt>
   14564:	mov	r4, r0
   14568:	ldm	r5, {r0, r1}
   1456c:	ldr	r2, [r5, #40]	; 0x28
   14570:	ldr	r3, [r5, #44]	; 0x2c
   14574:	add	r5, r5, #8
   14578:	ldr	r6, [r4]
   1457c:	stm	sp, {r0, r1, r5}
   14580:	str	r2, [sp, #12]
   14584:	str	r3, [sp, #16]
   14588:	mov	r0, r7
   1458c:	mov	r1, sl
   14590:	mov	r2, r9
   14594:	mov	r3, r8
   14598:	bl	145a8 <__assert_fail@plt+0x2ea8>
   1459c:	str	r6, [r4]
   145a0:	sub	sp, fp, #28
   145a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145ac:	add	fp, sp, #28
   145b0:	sub	sp, sp, #156	; 0x9c
   145b4:	str	r0, [sp, #76]	; 0x4c
   145b8:	ldr	r0, [fp, #12]
   145bc:	mov	r6, r1
   145c0:	str	r3, [sp, #84]	; 0x54
   145c4:	str	r2, [fp, #-84]	; 0xffffffac
   145c8:	and	r1, r0, #4
   145cc:	str	r1, [sp, #24]
   145d0:	and	r1, r0, #1
   145d4:	str	r1, [sp, #28]
   145d8:	ubfx	r8, r0, #1, #1
   145dc:	bl	11508 <__ctype_get_mb_cur_max@plt>
   145e0:	str	r0, [sp, #32]
   145e4:	ldr	r0, [fp, #24]
   145e8:	ldr	r7, [fp, #8]
   145ec:	mov	r1, #0
   145f0:	mov	r2, #0
   145f4:	mov	r4, #1
   145f8:	str	r1, [sp, #52]	; 0x34
   145fc:	str	r0, [sp, #72]	; 0x48
   14600:	ldr	r0, [fp, #20]
   14604:	str	r0, [sp, #68]	; 0x44
   14608:	mov	r0, #0
   1460c:	str	r0, [sp, #48]	; 0x30
   14610:	mov	r0, #0
   14614:	str	r0, [sp, #92]	; 0x5c
   14618:	mov	r0, #0
   1461c:	str	r0, [fp, #-76]	; 0xffffffb4
   14620:	mov	r0, #0
   14624:	cmp	r7, #10
   14628:	bhi	15910 <__assert_fail@plt+0x4210>
   1462c:	add	r1, pc, #28
   14630:	mov	sl, r6
   14634:	ldr	r6, [sp, #76]	; 0x4c
   14638:	ldr	ip, [fp, #-84]	; 0xffffffac
   1463c:	ldr	lr, [sp, #84]	; 0x54
   14640:	mov	r9, #0
   14644:	mov	r3, #1
   14648:	mov	r5, #0
   1464c:	ldr	pc, [r1, r7, lsl #2]
   14650:	andeq	r4, r1, r0, lsr #14
   14654:	andeq	r4, r1, ip, asr r7
   14658:	andeq	r4, r1, r0, lsr r7
   1465c:	andeq	r4, r1, r8, lsl r7
   14660:	andeq	r4, r1, r0, asr r7
   14664:	andeq	r4, r1, r4, lsl #15
   14668:	andeq	r4, r1, r0, asr #14
   1466c:	muleq	r1, r0, r9
   14670:	andeq	r4, r1, ip, ror r6
   14674:	andeq	r4, r1, ip, ror r6
   14678:	andeq	r4, r1, r4, lsr #18
   1467c:	mov	r9, r4
   14680:	movw	r4, #48484	; 0xbd64
   14684:	mov	r5, r8
   14688:	mov	r8, r2
   1468c:	mov	r0, #0
   14690:	mov	r2, #5
   14694:	movt	r4, #2
   14698:	mov	r1, r4
   1469c:	bl	11490 <dcgettext@plt>
   146a0:	cmp	r0, r4
   146a4:	str	r0, [sp, #68]	; 0x44
   146a8:	bne	14838 <__assert_fail@plt+0x3138>
   146ac:	bl	2adf4 <__assert_fail@plt+0x196f4>
   146b0:	ldrb	r1, [r0]
   146b4:	and	r1, r1, #223	; 0xdf
   146b8:	cmp	r1, #71	; 0x47
   146bc:	beq	14804 <__assert_fail@plt+0x3104>
   146c0:	cmp	r1, #85	; 0x55
   146c4:	bne	1481c <__assert_fail@plt+0x311c>
   146c8:	ldrb	r1, [r0, #1]
   146cc:	and	r1, r1, #223	; 0xdf
   146d0:	cmp	r1, #84	; 0x54
   146d4:	bne	1481c <__assert_fail@plt+0x311c>
   146d8:	ldrb	r1, [r0, #2]
   146dc:	and	r1, r1, #223	; 0xdf
   146e0:	cmp	r1, #70	; 0x46
   146e4:	bne	1481c <__assert_fail@plt+0x311c>
   146e8:	ldrb	r1, [r0, #3]
   146ec:	cmp	r1, #45	; 0x2d
   146f0:	ldrbeq	r1, [r0, #4]
   146f4:	cmpeq	r1, #56	; 0x38
   146f8:	bne	1481c <__assert_fail@plt+0x311c>
   146fc:	ldrb	r0, [r0, #5]
   14700:	cmp	r0, #0
   14704:	movw	r0, #48486	; 0xbd66
   14708:	movt	r0, #2
   1470c:	str	r0, [sp, #68]	; 0x44
   14710:	bne	1481c <__assert_fail@plt+0x311c>
   14714:	b	14838 <__assert_fail@plt+0x3138>
   14718:	mov	r0, #1
   1471c:	b	1475c <__assert_fail@plt+0x305c>
   14720:	mov	r7, #0
   14724:	mov	r9, #0
   14728:	mov	r3, r0
   1472c:	b	147fc <__assert_fail@plt+0x30fc>
   14730:	tst	r8, #1
   14734:	bne	1475c <__assert_fail@plt+0x305c>
   14738:	mov	r3, r0
   1473c:	b	147b4 <__assert_fail@plt+0x30b4>
   14740:	mov	r0, #1
   14744:	mov	r9, #0
   14748:	mov	r7, #5
   1474c:	b	14798 <__assert_fail@plt+0x3098>
   14750:	mov	r3, #1
   14754:	tst	r8, #1
   14758:	beq	147b4 <__assert_fail@plt+0x30b4>
   1475c:	mov	r1, #1
   14760:	mov	r9, #0
   14764:	mov	r7, #2
   14768:	mov	r3, r0
   1476c:	mov	r5, #1
   14770:	str	r1, [fp, #-76]	; 0xffffffb4
   14774:	movw	r1, #48028	; 0xbb9c
   14778:	movt	r1, #2
   1477c:	str	r1, [sp, #92]	; 0x5c
   14780:	b	14990 <__assert_fail@plt+0x3290>
   14784:	mov	r7, #5
   14788:	tst	r8, #1
   1478c:	beq	147d4 <__assert_fail@plt+0x30d4>
   14790:	mov	r0, #1
   14794:	mov	r9, #0
   14798:	str	r0, [fp, #-76]	; 0xffffffb4
   1479c:	movw	r0, #48482	; 0xbd62
   147a0:	mov	r3, #1
   147a4:	mov	r5, #1
   147a8:	movt	r0, #2
   147ac:	str	r0, [sp, #92]	; 0x5c
   147b0:	b	14990 <__assert_fail@plt+0x3290>
   147b4:	cmp	sl, #0
   147b8:	mov	r9, #1
   147bc:	mov	r7, #2
   147c0:	movne	r0, #39	; 0x27
   147c4:	strbne	r0, [r6]
   147c8:	movw	r0, #48028	; 0xbb9c
   147cc:	movt	r0, #2
   147d0:	b	147f0 <__assert_fail@plt+0x30f0>
   147d4:	cmp	sl, #0
   147d8:	mov	r9, #1
   147dc:	mov	r3, #1
   147e0:	movne	r0, #34	; 0x22
   147e4:	strbne	r0, [r6]
   147e8:	movw	r0, #48482	; 0xbd62
   147ec:	movt	r0, #2
   147f0:	str	r0, [sp, #92]	; 0x5c
   147f4:	mov	r0, #1
   147f8:	str	r0, [fp, #-76]	; 0xffffffb4
   147fc:	mov	r5, #0
   14800:	b	14990 <__assert_fail@plt+0x3290>
   14804:	ldrb	r1, [r0, #1]
   14808:	and	r1, r1, #223	; 0xdf
   1480c:	cmp	r1, #66	; 0x42
   14810:	ldrbeq	r1, [r0, #2]
   14814:	cmpeq	r1, #49	; 0x31
   14818:	beq	15738 <__assert_fail@plt+0x4038>
   1481c:	movw	r0, #48028	; 0xbb9c
   14820:	movw	r1, #48482	; 0xbd62
   14824:	cmp	r7, #9
   14828:	movt	r0, #2
   1482c:	movt	r1, #2
   14830:	moveq	r0, r1
   14834:	str	r0, [sp, #68]	; 0x44
   14838:	movw	r4, #48028	; 0xbb9c
   1483c:	mov	r0, #0
   14840:	mov	r2, #5
   14844:	movt	r4, #2
   14848:	mov	r1, r4
   1484c:	bl	11490 <dcgettext@plt>
   14850:	cmp	r0, r4
   14854:	str	r0, [sp, #72]	; 0x48
   14858:	beq	14868 <__assert_fail@plt+0x3168>
   1485c:	mov	r4, r9
   14860:	mov	r2, r8
   14864:	b	14920 <__assert_fail@plt+0x3220>
   14868:	bl	2adf4 <__assert_fail@plt+0x196f4>
   1486c:	ldrb	r1, [r0]
   14870:	mov	r4, r9
   14874:	and	r1, r1, #223	; 0xdf
   14878:	cmp	r1, #71	; 0x47
   1487c:	beq	148d8 <__assert_fail@plt+0x31d8>
   14880:	cmp	r1, #85	; 0x55
   14884:	mov	r2, r8
   14888:	bne	14900 <__assert_fail@plt+0x3200>
   1488c:	ldrb	r1, [r0, #1]
   14890:	and	r1, r1, #223	; 0xdf
   14894:	cmp	r1, #84	; 0x54
   14898:	bne	14900 <__assert_fail@plt+0x3200>
   1489c:	ldrb	r1, [r0, #2]
   148a0:	and	r1, r1, #223	; 0xdf
   148a4:	cmp	r1, #70	; 0x46
   148a8:	ldrbeq	r1, [r0, #3]
   148ac:	cmpeq	r1, #45	; 0x2d
   148b0:	bne	14900 <__assert_fail@plt+0x3200>
   148b4:	ldrb	r1, [r0, #4]
   148b8:	cmp	r1, #56	; 0x38
   148bc:	ldrbeq	r0, [r0, #5]
   148c0:	cmpeq	r0, #0
   148c4:	bne	14900 <__assert_fail@plt+0x3200>
   148c8:	movw	r0, #48490	; 0xbd6a
   148cc:	movt	r0, #2
   148d0:	str	r0, [sp, #72]	; 0x48
   148d4:	b	14920 <__assert_fail@plt+0x3220>
   148d8:	ldrb	r1, [r0, #1]
   148dc:	mov	r2, r8
   148e0:	and	r1, r1, #223	; 0xdf
   148e4:	cmp	r1, #66	; 0x42
   148e8:	bne	14900 <__assert_fail@plt+0x3200>
   148ec:	ldrb	r1, [r0, #2]
   148f0:	cmp	r1, #49	; 0x31
   148f4:	ldrbeq	r1, [r0, #3]
   148f8:	cmpeq	r1, #56	; 0x38
   148fc:	beq	1577c <__assert_fail@plt+0x407c>
   14900:	movw	r0, #48028	; 0xbb9c
   14904:	cmp	r7, #9
   14908:	movt	r0, #2
   1490c:	mov	r1, r0
   14910:	movw	r0, #48482	; 0xbd62
   14914:	movt	r0, #2
   14918:	moveq	r1, r0
   1491c:	str	r1, [sp, #72]	; 0x48
   14920:	mov	r8, r5
   14924:	mov	r9, #0
   14928:	tst	r8, #1
   1492c:	mov	r5, r8
   14930:	str	r2, [fp, #-48]	; 0xffffffd0
   14934:	bne	1496c <__assert_fail@plt+0x326c>
   14938:	ldr	r0, [sp, #68]	; 0x44
   1493c:	ldrb	r0, [r0]
   14940:	cmp	r0, #0
   14944:	beq	1496c <__assert_fail@plt+0x326c>
   14948:	ldr	r1, [sp, #68]	; 0x44
   1494c:	mov	r9, #0
   14950:	add	r1, r1, #1
   14954:	cmp	r9, sl
   14958:	strbcc	r0, [r6, r9]
   1495c:	ldrb	r0, [r1, r9]
   14960:	add	r9, r9, #1
   14964:	cmp	r0, #0
   14968:	bne	14954 <__assert_fail@plt+0x3254>
   1496c:	ldr	r8, [sp, #72]	; 0x48
   14970:	mov	r0, r8
   14974:	bl	115bc <strlen@plt>
   14978:	ldr	ip, [fp, #-84]	; 0xffffffac
   1497c:	ldr	lr, [sp, #84]	; 0x54
   14980:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14984:	str	r0, [fp, #-76]	; 0xffffffb4
   14988:	str	r8, [sp, #92]	; 0x5c
   1498c:	mov	r3, #1
   14990:	ldr	r0, [fp, #16]
   14994:	str	r7, [fp, #-64]	; 0xffffffc0
   14998:	str	r5, [fp, #-72]	; 0xffffffb8
   1499c:	str	r3, [sp, #80]	; 0x50
   149a0:	cmp	r0, #0
   149a4:	movwne	r0, #1
   149a8:	and	r0, r0, r5
   149ac:	str	r0, [fp, #-88]	; 0xffffffa8
   149b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   149b4:	cmp	r0, #0
   149b8:	movwne	r0, #1
   149bc:	subs	r7, r7, #2
   149c0:	and	r1, r0, r5
   149c4:	str	r7, [fp, #-80]	; 0xffffffb0
   149c8:	and	r1, r3, r1
   149cc:	str	r1, [sp, #40]	; 0x28
   149d0:	clz	r1, r7
   149d4:	lsr	r1, r1, #5
   149d8:	and	r1, r1, r5
   149dc:	eor	r5, r5, #1
   149e0:	str	r1, [sp, #36]	; 0x24
   149e4:	mov	r1, r7
   149e8:	str	r5, [sp, #88]	; 0x58
   149ec:	mov	r7, #0
   149f0:	movwne	r1, #1
   149f4:	orr	r5, r1, r5
   149f8:	and	r1, r1, r3
   149fc:	and	r0, r0, r1
   14a00:	str	r5, [sp, #60]	; 0x3c
   14a04:	str	r1, [fp, #-68]	; 0xffffffbc
   14a08:	str	r0, [fp, #-60]	; 0xffffffc4
   14a0c:	eor	r0, r3, #1
   14a10:	str	r0, [sp, #44]	; 0x2c
   14a14:	cmn	lr, #1
   14a18:	beq	14a28 <__assert_fail@plt+0x3328>
   14a1c:	cmp	r7, lr
   14a20:	bne	14a34 <__assert_fail@plt+0x3334>
   14a24:	b	156ac <__assert_fail@plt+0x3fac>
   14a28:	ldrb	r0, [ip, r7]
   14a2c:	cmp	r0, #0
   14a30:	beq	156b4 <__assert_fail@plt+0x3fb4>
   14a34:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14a38:	mov	r8, #0
   14a3c:	str	r4, [fp, #-52]	; 0xffffffcc
   14a40:	str	r2, [fp, #-48]	; 0xffffffd0
   14a44:	cmp	r0, #0
   14a48:	beq	14a7c <__assert_fail@plt+0x337c>
   14a4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14a50:	add	r4, r7, r0
   14a54:	cmp	r0, #2
   14a58:	bcc	14a74 <__assert_fail@plt+0x3374>
   14a5c:	cmn	lr, #1
   14a60:	bne	14a74 <__assert_fail@plt+0x3374>
   14a64:	mov	r0, ip
   14a68:	bl	115bc <strlen@plt>
   14a6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a70:	mov	lr, r0
   14a74:	cmp	r4, lr
   14a78:	bls	14a94 <__assert_fail@plt+0x3394>
   14a7c:	mov	r0, #0
   14a80:	str	r0, [fp, #-56]	; 0xffffffc8
   14a84:	ldrb	r5, [ip, r7]
   14a88:	cmp	r5, #126	; 0x7e
   14a8c:	bls	14ae4 <__assert_fail@plt+0x33e4>
   14a90:	b	14eec <__assert_fail@plt+0x37ec>
   14a94:	ldr	r1, [sp, #92]	; 0x5c
   14a98:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14a9c:	add	r0, ip, r7
   14aa0:	mov	r4, lr
   14aa4:	bl	11484 <memcmp@plt>
   14aa8:	ldr	r2, [sp, #88]	; 0x58
   14aac:	cmp	r0, #0
   14ab0:	mov	r1, r0
   14ab4:	movwne	r1, #1
   14ab8:	orr	r1, r1, r2
   14abc:	tst	r1, #1
   14ac0:	beq	157c0 <__assert_fail@plt+0x40c0>
   14ac4:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ac8:	clz	r0, r0
   14acc:	mov	lr, r4
   14ad0:	lsr	r0, r0, #5
   14ad4:	str	r0, [fp, #-56]	; 0xffffffc8
   14ad8:	ldrb	r5, [ip, r7]
   14adc:	cmp	r5, #126	; 0x7e
   14ae0:	bhi	14eec <__assert_fail@plt+0x37ec>
   14ae4:	add	r3, pc, #16
   14ae8:	mov	r4, #1
   14aec:	mov	r2, #110	; 0x6e
   14af0:	mov	r0, #97	; 0x61
   14af4:	mov	r1, #0
   14af8:	ldr	pc, [r3, r5, lsl #2]
   14afc:	andeq	r4, r1, ip, asr #27
   14b00:	andeq	r4, r1, ip, ror #29
   14b04:	andeq	r4, r1, ip, ror #29
   14b08:	andeq	r4, r1, ip, ror #29
   14b0c:	andeq	r4, r1, ip, ror #29
   14b10:	andeq	r4, r1, ip, ror #29
   14b14:	andeq	r4, r1, ip, ror #29
   14b18:	andeq	r4, r1, r8, asr #31
   14b1c:	andeq	r4, r1, ip, lsr #27
   14b20:	muleq	r1, r4, sp
   14b24:			; <UNDEFINED> instruction: 0x00014db8
   14b28:	andeq	r4, r1, r8, asr #28
   14b2c:	andeq	r4, r1, ip, lsl #27
   14b30:			; <UNDEFINED> instruction: 0x00014db4
   14b34:	andeq	r4, r1, ip, ror #29
   14b38:	andeq	r4, r1, ip, ror #29
   14b3c:	andeq	r4, r1, ip, ror #29
   14b40:	andeq	r4, r1, ip, ror #29
   14b44:	andeq	r4, r1, ip, ror #29
   14b48:	andeq	r4, r1, ip, ror #29
   14b4c:	andeq	r4, r1, ip, ror #29
   14b50:	andeq	r4, r1, ip, ror #29
   14b54:	andeq	r4, r1, ip, ror #29
   14b58:	andeq	r4, r1, ip, ror #29
   14b5c:	andeq	r4, r1, ip, ror #29
   14b60:	andeq	r4, r1, ip, ror #29
   14b64:	andeq	r4, r1, ip, ror #29
   14b68:	andeq	r4, r1, ip, ror #29
   14b6c:	andeq	r4, r1, ip, ror #29
   14b70:	andeq	r4, r1, ip, ror #29
   14b74:	andeq	r4, r1, ip, ror #29
   14b78:	andeq	r4, r1, ip, ror #29
   14b7c:	andeq	r4, r1, r4, asr #30
   14b80:	andeq	r4, r1, r8, asr #30
   14b84:	andeq	r4, r1, r8, asr #30
   14b88:	andeq	r4, r1, r8, lsl sp
   14b8c:	andeq	r4, r1, r8, asr #30
   14b90:	strdeq	r4, [r1], -r8
   14b94:	andeq	r4, r1, r8, asr #30
   14b98:	andeq	r4, r1, r0, asr lr
   14b9c:	andeq	r4, r1, r8, asr #30
   14ba0:	andeq	r4, r1, r8, asr #30
   14ba4:	andeq	r4, r1, r8, asr #30
   14ba8:	strdeq	r4, [r1], -r8
   14bac:	strdeq	r4, [r1], -r8
   14bb0:	strdeq	r4, [r1], -r8
   14bb4:	strdeq	r4, [r1], -r8
   14bb8:	strdeq	r4, [r1], -r8
   14bbc:	strdeq	r4, [r1], -r8
   14bc0:	strdeq	r4, [r1], -r8
   14bc4:	strdeq	r4, [r1], -r8
   14bc8:	strdeq	r4, [r1], -r8
   14bcc:	strdeq	r4, [r1], -r8
   14bd0:	strdeq	r4, [r1], -r8
   14bd4:	strdeq	r4, [r1], -r8
   14bd8:	strdeq	r4, [r1], -r8
   14bdc:	strdeq	r4, [r1], -r8
   14be0:	strdeq	r4, [r1], -r8
   14be4:	strdeq	r4, [r1], -r8
   14be8:	andeq	r4, r1, r8, asr #30
   14bec:	andeq	r4, r1, r8, asr #30
   14bf0:	andeq	r4, r1, r8, asr #30
   14bf4:	andeq	r4, r1, r8, asr #30
   14bf8:	andeq	r4, r1, ip, lsl #28
   14bfc:	andeq	r4, r1, ip, ror #29
   14c00:	strdeq	r4, [r1], -r8
   14c04:	strdeq	r4, [r1], -r8
   14c08:	strdeq	r4, [r1], -r8
   14c0c:	strdeq	r4, [r1], -r8
   14c10:	strdeq	r4, [r1], -r8
   14c14:	strdeq	r4, [r1], -r8
   14c18:	strdeq	r4, [r1], -r8
   14c1c:	strdeq	r4, [r1], -r8
   14c20:	strdeq	r4, [r1], -r8
   14c24:	strdeq	r4, [r1], -r8
   14c28:	strdeq	r4, [r1], -r8
   14c2c:	strdeq	r4, [r1], -r8
   14c30:	strdeq	r4, [r1], -r8
   14c34:	strdeq	r4, [r1], -r8
   14c38:	strdeq	r4, [r1], -r8
   14c3c:	strdeq	r4, [r1], -r8
   14c40:	strdeq	r4, [r1], -r8
   14c44:	strdeq	r4, [r1], -r8
   14c48:	strdeq	r4, [r1], -r8
   14c4c:	strdeq	r4, [r1], -r8
   14c50:	strdeq	r4, [r1], -r8
   14c54:	strdeq	r4, [r1], -r8
   14c58:	strdeq	r4, [r1], -r8
   14c5c:	strdeq	r4, [r1], -r8
   14c60:	strdeq	r4, [r1], -r8
   14c64:	strdeq	r4, [r1], -r8
   14c68:	andeq	r4, r1, r8, asr #30
   14c6c:	andeq	r4, r1, r8, asr sp
   14c70:	strdeq	r4, [r1], -r8
   14c74:	andeq	r4, r1, r8, asr #30
   14c78:	strdeq	r4, [r1], -r8
   14c7c:	andeq	r4, r1, r8, asr #30
   14c80:	strdeq	r4, [r1], -r8
   14c84:	strdeq	r4, [r1], -r8
   14c88:	strdeq	r4, [r1], -r8
   14c8c:	strdeq	r4, [r1], -r8
   14c90:	strdeq	r4, [r1], -r8
   14c94:	strdeq	r4, [r1], -r8
   14c98:	strdeq	r4, [r1], -r8
   14c9c:	strdeq	r4, [r1], -r8
   14ca0:	strdeq	r4, [r1], -r8
   14ca4:	strdeq	r4, [r1], -r8
   14ca8:	strdeq	r4, [r1], -r8
   14cac:	strdeq	r4, [r1], -r8
   14cb0:	strdeq	r4, [r1], -r8
   14cb4:	strdeq	r4, [r1], -r8
   14cb8:	strdeq	r4, [r1], -r8
   14cbc:	strdeq	r4, [r1], -r8
   14cc0:	strdeq	r4, [r1], -r8
   14cc4:	strdeq	r4, [r1], -r8
   14cc8:	strdeq	r4, [r1], -r8
   14ccc:	strdeq	r4, [r1], -r8
   14cd0:	strdeq	r4, [r1], -r8
   14cd4:	strdeq	r4, [r1], -r8
   14cd8:	strdeq	r4, [r1], -r8
   14cdc:	strdeq	r4, [r1], -r8
   14ce0:	strdeq	r4, [r1], -r8
   14ce4:	strdeq	r4, [r1], -r8
   14ce8:	andeq	r4, r1, r8, lsr sp
   14cec:	andeq	r4, r1, r8, asr #30
   14cf0:	andeq	r4, r1, r8, lsr sp
   14cf4:	andeq	r4, r1, r8, lsl sp
   14cf8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14cfc:	cmp	r0, #0
   14d00:	beq	14fdc <__assert_fail@plt+0x38dc>
   14d04:	ldr	r0, [fp, #16]
   14d08:	cmp	r0, #0
   14d0c:	mov	r0, r5
   14d10:	bne	14fec <__assert_fail@plt+0x38ec>
   14d14:	b	1500c <__assert_fail@plt+0x390c>
   14d18:	mov	r4, #0
   14d1c:	cmp	r7, #0
   14d20:	beq	14f44 <__assert_fail@plt+0x3844>
   14d24:	mov	r8, #0
   14d28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14d2c:	cmp	r0, #0
   14d30:	bne	14d04 <__assert_fail@plt+0x3604>
   14d34:	b	14fdc <__assert_fail@plt+0x38dc>
   14d38:	mov	r4, #0
   14d3c:	cmn	lr, #1
   14d40:	beq	14f1c <__assert_fail@plt+0x381c>
   14d44:	cmp	r7, #0
   14d48:	bne	14d24 <__assert_fail@plt+0x3624>
   14d4c:	cmp	lr, #1
   14d50:	beq	14f44 <__assert_fail@plt+0x3844>
   14d54:	b	14d24 <__assert_fail@plt+0x3624>
   14d58:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14d5c:	cmp	r0, #2
   14d60:	bne	14f74 <__assert_fail@plt+0x3874>
   14d64:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14d68:	tst	r0, #1
   14d6c:	bne	157d4 <__assert_fail@plt+0x40d4>
   14d70:	mov	r8, #0
   14d74:	mov	r0, #92	; 0x5c
   14d78:	mov	r4, #0
   14d7c:	cmp	r8, #0
   14d80:	beq	14f94 <__assert_fail@plt+0x3894>
   14d84:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14d88:	b	15088 <__assert_fail@plt+0x3988>
   14d8c:	mov	r0, #102	; 0x66
   14d90:	b	14fc8 <__assert_fail@plt+0x38c8>
   14d94:	mov	r2, #116	; 0x74
   14d98:	ldr	r0, [sp, #60]	; 0x3c
   14d9c:	tst	r0, #1
   14da0:	mov	r0, r2
   14da4:	bne	14fc8 <__assert_fail@plt+0x38c8>
   14da8:	b	157d4 <__assert_fail@plt+0x40d4>
   14dac:	mov	r0, #98	; 0x62
   14db0:	b	14fc8 <__assert_fail@plt+0x38c8>
   14db4:	mov	r2, #114	; 0x72
   14db8:	ldr	r0, [sp, #60]	; 0x3c
   14dbc:	tst	r0, #1
   14dc0:	mov	r0, r2
   14dc4:	bne	14fc8 <__assert_fail@plt+0x38c8>
   14dc8:	b	157d4 <__assert_fail@plt+0x40d4>
   14dcc:	ldr	r0, [sp, #80]	; 0x50
   14dd0:	tst	r0, #1
   14dd4:	beq	150b0 <__assert_fail@plt+0x39b0>
   14dd8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14ddc:	tst	r0, #1
   14de0:	bne	158fc <__assert_fail@plt+0x41fc>
   14de4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14de8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14dec:	cmp	r0, #2
   14df0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14df4:	movwne	r0, #1
   14df8:	orr	r0, r0, r2
   14dfc:	tst	r0, #1
   14e00:	beq	153a8 <__assert_fail@plt+0x3ca8>
   14e04:	mov	r0, r9
   14e08:	b	153dc <__assert_fail@plt+0x3cdc>
   14e0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14e10:	mov	r8, #0
   14e14:	mov	r5, #63	; 0x3f
   14e18:	cmp	r0, #5
   14e1c:	beq	15264 <__assert_fail@plt+0x3b64>
   14e20:	cmp	r0, #2
   14e24:	bne	15314 <__assert_fail@plt+0x3c14>
   14e28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14e2c:	tst	r0, #1
   14e30:	bne	157d4 <__assert_fail@plt+0x40d4>
   14e34:	mov	r4, #0
   14e38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14e3c:	cmp	r0, #0
   14e40:	bne	14d04 <__assert_fail@plt+0x3604>
   14e44:	b	14fdc <__assert_fail@plt+0x38dc>
   14e48:	mov	r0, #118	; 0x76
   14e4c:	b	14fc8 <__assert_fail@plt+0x38c8>
   14e50:	mov	r0, #1
   14e54:	mov	r5, #39	; 0x27
   14e58:	str	r0, [sp, #52]	; 0x34
   14e5c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14e60:	cmp	r0, #2
   14e64:	bne	14ed8 <__assert_fail@plt+0x37d8>
   14e68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14e6c:	tst	r0, #1
   14e70:	bne	157d4 <__assert_fail@plt+0x40d4>
   14e74:	ldr	r2, [sp, #48]	; 0x30
   14e78:	clz	r1, sl
   14e7c:	mov	r8, #0
   14e80:	lsr	r1, r1, #5
   14e84:	cmp	r2, #0
   14e88:	mov	r0, r2
   14e8c:	movwne	r0, #1
   14e90:	orrs	r0, r0, r1
   14e94:	moveq	r2, sl
   14e98:	moveq	sl, r0
   14e9c:	cmp	r9, sl
   14ea0:	str	r2, [sp, #48]	; 0x30
   14ea4:	movcc	r0, #39	; 0x27
   14ea8:	strbcc	r0, [r6, r9]
   14eac:	add	r0, r9, #1
   14eb0:	cmp	r0, sl
   14eb4:	movcc	r1, #92	; 0x5c
   14eb8:	strbcc	r1, [r6, r0]
   14ebc:	add	r0, r9, #2
   14ec0:	add	r9, r9, #3
   14ec4:	cmp	r0, sl
   14ec8:	movcc	r1, #39	; 0x27
   14ecc:	strbcc	r1, [r6, r0]
   14ed0:	mov	r0, #0
   14ed4:	str	r0, [fp, #-48]	; 0xffffffd0
   14ed8:	mov	r4, #1
   14edc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14ee0:	cmp	r0, #0
   14ee4:	bne	14d04 <__assert_fail@plt+0x3604>
   14ee8:	b	14fdc <__assert_fail@plt+0x38dc>
   14eec:	ldr	r0, [sp, #32]
   14ef0:	cmp	r0, #1
   14ef4:	bne	150e0 <__assert_fail@plt+0x39e0>
   14ef8:	str	lr, [sp, #84]	; 0x54
   14efc:	bl	115a4 <__ctype_b_loc@plt>
   14f00:	ldr	r0, [r0]
   14f04:	ldr	ip, [fp, #-84]	; 0xffffffac
   14f08:	mov	r1, #1
   14f0c:	add	r0, r0, r5, lsl #1
   14f10:	ldrb	r0, [r0, #1]
   14f14:	ubfx	r4, r0, #6, #1
   14f18:	b	154d8 <__assert_fail@plt+0x3dd8>
   14f1c:	cmp	r7, #0
   14f20:	ldrbeq	r0, [ip, #1]
   14f24:	cmpeq	r0, #0
   14f28:	beq	14f44 <__assert_fail@plt+0x3844>
   14f2c:	mvn	lr, #0
   14f30:	mov	r8, #0
   14f34:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f38:	cmp	r0, #0
   14f3c:	bne	14d04 <__assert_fail@plt+0x3604>
   14f40:	b	14fdc <__assert_fail@plt+0x38dc>
   14f44:	mov	r1, #1
   14f48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14f4c:	cmp	r0, #2
   14f50:	bne	14f60 <__assert_fail@plt+0x3860>
   14f54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14f58:	tst	r0, #1
   14f5c:	bne	157d4 <__assert_fail@plt+0x40d4>
   14f60:	mov	r4, r1
   14f64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f68:	cmp	r0, #0
   14f6c:	bne	14d04 <__assert_fail@plt+0x3604>
   14f70:	b	14fdc <__assert_fail@plt+0x38dc>
   14f74:	ldr	r1, [sp, #40]	; 0x28
   14f78:	mov	r8, #0
   14f7c:	mov	r0, #92	; 0x5c
   14f80:	cmp	r1, #0
   14f84:	beq	14fc8 <__assert_fail@plt+0x38c8>
   14f88:	mov	r4, #0
   14f8c:	cmp	r8, #0
   14f90:	bne	14d84 <__assert_fail@plt+0x3684>
   14f94:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14f98:	tst	r2, #1
   14f9c:	beq	15088 <__assert_fail@plt+0x3988>
   14fa0:	cmp	r9, sl
   14fa4:	movcc	r1, #39	; 0x27
   14fa8:	strbcc	r1, [r6, r9]
   14fac:	add	r1, r9, #1
   14fb0:	add	r9, r9, #2
   14fb4:	cmp	r1, sl
   14fb8:	movcc	r2, #39	; 0x27
   14fbc:	strbcc	r2, [r6, r1]
   14fc0:	mov	r2, #0
   14fc4:	b	15088 <__assert_fail@plt+0x3988>
   14fc8:	ldr	r1, [sp, #80]	; 0x50
   14fcc:	mov	r4, #0
   14fd0:	mov	r8, #0
   14fd4:	tst	r1, #1
   14fd8:	bne	15018 <__assert_fail@plt+0x3918>
   14fdc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14fe0:	cmp	r0, #0
   14fe4:	mov	r0, r5
   14fe8:	beq	1500c <__assert_fail@plt+0x390c>
   14fec:	ldr	r1, [fp, #16]
   14ff0:	ubfx	r0, r5, #5, #3
   14ff4:	mov	r2, #1
   14ff8:	ldr	r0, [r1, r0, lsl #2]
   14ffc:	and	r1, r5, #31
   15000:	tst	r0, r2, lsl r1
   15004:	mov	r0, r5
   15008:	bne	15018 <__assert_fail@plt+0x3918>
   1500c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15010:	cmp	r1, #0
   15014:	beq	15470 <__assert_fail@plt+0x3d70>
   15018:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1501c:	tst	r1, #1
   15020:	bne	157b4 <__assert_fail@plt+0x40b4>
   15024:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15028:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1502c:	cmp	r1, #2
   15030:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15034:	movwne	r1, #1
   15038:	orr	r1, r1, r2
   1503c:	tst	r1, #1
   15040:	bne	15078 <__assert_fail@plt+0x3978>
   15044:	cmp	r9, sl
   15048:	movcc	r1, #39	; 0x27
   1504c:	strbcc	r1, [r6, r9]
   15050:	add	r1, r9, #1
   15054:	cmp	r1, sl
   15058:	movcc	r2, #36	; 0x24
   1505c:	strbcc	r2, [r6, r1]
   15060:	add	r1, r9, #2
   15064:	add	r9, r9, #3
   15068:	cmp	r1, sl
   1506c:	movcc	r2, #39	; 0x27
   15070:	strbcc	r2, [r6, r1]
   15074:	mov	r2, #1
   15078:	cmp	r9, sl
   1507c:	movcc	r1, #92	; 0x5c
   15080:	strbcc	r1, [r6, r9]
   15084:	add	r9, r9, #1
   15088:	cmp	r9, sl
   1508c:	add	r7, r7, #1
   15090:	strbcc	r0, [r6, r9]
   15094:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15098:	add	r9, r9, #1
   1509c:	and	r0, r0, r4
   150a0:	mov	r4, r0
   150a4:	cmn	lr, #1
   150a8:	bne	14a1c <__assert_fail@plt+0x331c>
   150ac:	b	14a28 <__assert_fail@plt+0x3328>
   150b0:	ldr	r0, [sp, #28]
   150b4:	mov	r4, #0
   150b8:	mov	r8, #0
   150bc:	mov	r5, #0
   150c0:	cmp	r0, #0
   150c4:	beq	14fdc <__assert_fail@plt+0x38dc>
   150c8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   150cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   150d0:	add	r7, r7, #1
   150d4:	cmn	lr, #1
   150d8:	bne	14a1c <__assert_fail@plt+0x331c>
   150dc:	b	14a28 <__assert_fail@plt+0x3328>
   150e0:	mov	r0, #0
   150e4:	cmn	lr, #1
   150e8:	str	r0, [fp, #-36]	; 0xffffffdc
   150ec:	str	r0, [fp, #-40]	; 0xffffffd8
   150f0:	bne	15104 <__assert_fail@plt+0x3a04>
   150f4:	mov	r0, ip
   150f8:	bl	115bc <strlen@plt>
   150fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   15100:	mov	lr, r0
   15104:	ldr	r0, [sp, #36]	; 0x24
   15108:	str	sl, [sp, #56]	; 0x38
   1510c:	str	lr, [sp, #84]	; 0x54
   15110:	cmp	r0, #0
   15114:	beq	1532c <__assert_fail@plt+0x3c2c>
   15118:	add	r0, ip, r7
   1511c:	mov	r4, #1
   15120:	mov	r6, #0
   15124:	sub	sl, fp, #40	; 0x28
   15128:	str	r0, [sp, #20]
   1512c:	str	r6, [sp, #64]	; 0x40
   15130:	add	r6, r6, r7
   15134:	sub	r0, fp, #44	; 0x2c
   15138:	mov	r3, sl
   1513c:	add	r1, ip, r6
   15140:	sub	r2, lr, r6
   15144:	bl	2aedc <__assert_fail@plt+0x197dc>
   15148:	cmn	r0, #2
   1514c:	beq	15488 <__assert_fail@plt+0x3d88>
   15150:	ldr	sl, [sp, #56]	; 0x38
   15154:	cmn	r0, #1
   15158:	beq	1547c <__assert_fail@plt+0x3d7c>
   1515c:	cmp	r0, #0
   15160:	beq	15480 <__assert_fail@plt+0x3d80>
   15164:	cmp	r0, #2
   15168:	bcc	15228 <__assert_fail@plt+0x3b28>
   1516c:	ldr	r1, [sp, #64]	; 0x40
   15170:	ldr	r2, [sp, #20]
   15174:	add	r1, r2, r1
   15178:	mov	r2, #1
   1517c:	ldrb	r3, [r1, r2]
   15180:	sub	r3, r3, #91	; 0x5b
   15184:	cmp	r3, #33	; 0x21
   15188:	bhi	1521c <__assert_fail@plt+0x3b1c>
   1518c:	add	r6, pc, #0
   15190:	ldr	pc, [r6, r3, lsl #2]
   15194:	andeq	r5, r1, r0, ror #15
   15198:	andeq	r5, r1, r0, ror #15
   1519c:	andeq	r5, r1, ip, lsl r2
   151a0:	andeq	r5, r1, r0, ror #15
   151a4:	andeq	r5, r1, ip, lsl r2
   151a8:	andeq	r5, r1, r0, ror #15
   151ac:	andeq	r5, r1, ip, lsl r2
   151b0:	andeq	r5, r1, ip, lsl r2
   151b4:	andeq	r5, r1, ip, lsl r2
   151b8:	andeq	r5, r1, ip, lsl r2
   151bc:	andeq	r5, r1, ip, lsl r2
   151c0:	andeq	r5, r1, ip, lsl r2
   151c4:	andeq	r5, r1, ip, lsl r2
   151c8:	andeq	r5, r1, ip, lsl r2
   151cc:	andeq	r5, r1, ip, lsl r2
   151d0:	andeq	r5, r1, ip, lsl r2
   151d4:	andeq	r5, r1, ip, lsl r2
   151d8:	andeq	r5, r1, ip, lsl r2
   151dc:	andeq	r5, r1, ip, lsl r2
   151e0:	andeq	r5, r1, ip, lsl r2
   151e4:	andeq	r5, r1, ip, lsl r2
   151e8:	andeq	r5, r1, ip, lsl r2
   151ec:	andeq	r5, r1, ip, lsl r2
   151f0:	andeq	r5, r1, ip, lsl r2
   151f4:	andeq	r5, r1, ip, lsl r2
   151f8:	andeq	r5, r1, ip, lsl r2
   151fc:	andeq	r5, r1, ip, lsl r2
   15200:	andeq	r5, r1, ip, lsl r2
   15204:	andeq	r5, r1, ip, lsl r2
   15208:	andeq	r5, r1, ip, lsl r2
   1520c:	andeq	r5, r1, ip, lsl r2
   15210:	andeq	r5, r1, ip, lsl r2
   15214:	andeq	r5, r1, ip, lsl r2
   15218:	andeq	r5, r1, r0, ror #15
   1521c:	add	r2, r2, #1
   15220:	cmp	r2, r0
   15224:	bcc	1517c <__assert_fail@plt+0x3a7c>
   15228:	ldr	r6, [sp, #64]	; 0x40
   1522c:	add	r6, r0, r6
   15230:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15234:	bl	114e4 <iswprint@plt>
   15238:	cmp	r0, #0
   1523c:	sub	sl, fp, #40	; 0x28
   15240:	movwne	r0, #1
   15244:	and	r4, r4, r0
   15248:	mov	r0, sl
   1524c:	bl	11478 <mbsinit@plt>
   15250:	ldr	ip, [fp, #-84]	; 0xffffffac
   15254:	ldr	lr, [sp, #84]	; 0x54
   15258:	cmp	r0, #0
   1525c:	beq	1512c <__assert_fail@plt+0x3a2c>
   15260:	b	154cc <__assert_fail@plt+0x3dcc>
   15264:	ldr	r0, [sp, #24]
   15268:	cmp	r0, #0
   1526c:	beq	15314 <__assert_fail@plt+0x3c14>
   15270:	add	r0, r7, #2
   15274:	cmp	r0, lr
   15278:	bcs	15314 <__assert_fail@plt+0x3c14>
   1527c:	add	r1, ip, r7
   15280:	ldrb	r1, [r1, #1]
   15284:	cmp	r1, #63	; 0x3f
   15288:	bne	15314 <__assert_fail@plt+0x3c14>
   1528c:	ldrb	r5, [ip, r0]
   15290:	sub	r1, r5, #33	; 0x21
   15294:	cmp	r1, #29
   15298:	bhi	15314 <__assert_fail@plt+0x3c14>
   1529c:	movw	r3, #20929	; 0x51c1
   152a0:	mov	r2, #1
   152a4:	movt	r3, #14336	; 0x3800
   152a8:	tst	r3, r2, lsl r1
   152ac:	beq	15314 <__assert_fail@plt+0x3c14>
   152b0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   152b4:	tst	r1, #1
   152b8:	bne	15904 <__assert_fail@plt+0x4204>
   152bc:	cmp	r9, sl
   152c0:	mov	r7, r0
   152c4:	mov	r4, #0
   152c8:	movcc	r1, #63	; 0x3f
   152cc:	strbcc	r1, [r6, r9]
   152d0:	add	r1, r9, #1
   152d4:	cmp	r1, sl
   152d8:	movcc	r2, #34	; 0x22
   152dc:	strbcc	r2, [r6, r1]
   152e0:	add	r1, r9, #2
   152e4:	cmp	r1, sl
   152e8:	movcc	r2, #34	; 0x22
   152ec:	strbcc	r2, [r6, r1]
   152f0:	add	r1, r9, #3
   152f4:	add	r9, r9, #4
   152f8:	cmp	r1, sl
   152fc:	movcc	r2, #63	; 0x3f
   15300:	strbcc	r2, [r6, r1]
   15304:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15308:	cmp	r0, #0
   1530c:	bne	14d04 <__assert_fail@plt+0x3604>
   15310:	b	14fdc <__assert_fail@plt+0x38dc>
   15314:	mov	r5, #63	; 0x3f
   15318:	mov	r4, #0
   1531c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15320:	cmp	r0, #0
   15324:	bne	14d04 <__assert_fail@plt+0x3604>
   15328:	b	14fdc <__assert_fail@plt+0x38dc>
   1532c:	mov	r4, #1
   15330:	mov	r6, #0
   15334:	sub	sl, fp, #40	; 0x28
   15338:	str	r6, [sp, #64]	; 0x40
   1533c:	add	r6, r6, r7
   15340:	sub	r0, fp, #44	; 0x2c
   15344:	mov	r3, sl
   15348:	add	r1, ip, r6
   1534c:	sub	r2, lr, r6
   15350:	bl	2aedc <__assert_fail@plt+0x197dc>
   15354:	cmn	r0, #2
   15358:	beq	15488 <__assert_fail@plt+0x3d88>
   1535c:	cmn	r0, #1
   15360:	beq	1547c <__assert_fail@plt+0x3d7c>
   15364:	ldr	r6, [sp, #64]	; 0x40
   15368:	cmp	r0, #0
   1536c:	beq	154c8 <__assert_fail@plt+0x3dc8>
   15370:	add	r6, r0, r6
   15374:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15378:	bl	114e4 <iswprint@plt>
   1537c:	cmp	r0, #0
   15380:	sub	sl, fp, #40	; 0x28
   15384:	movwne	r0, #1
   15388:	and	r4, r4, r0
   1538c:	mov	r0, sl
   15390:	bl	11478 <mbsinit@plt>
   15394:	ldr	ip, [fp, #-84]	; 0xffffffac
   15398:	ldr	lr, [sp, #84]	; 0x54
   1539c:	cmp	r0, #0
   153a0:	beq	15338 <__assert_fail@plt+0x3c38>
   153a4:	b	154cc <__assert_fail@plt+0x3dcc>
   153a8:	cmp	r9, sl
   153ac:	mov	r2, #1
   153b0:	movcc	r0, #39	; 0x27
   153b4:	strbcc	r0, [r6, r9]
   153b8:	add	r0, r9, #1
   153bc:	cmp	r0, sl
   153c0:	movcc	r1, #36	; 0x24
   153c4:	strbcc	r1, [r6, r0]
   153c8:	add	r0, r9, #2
   153cc:	cmp	r0, sl
   153d0:	movcc	r1, #39	; 0x27
   153d4:	strbcc	r1, [r6, r0]
   153d8:	add	r0, r9, #3
   153dc:	cmp	r0, sl
   153e0:	add	r9, r0, #1
   153e4:	str	r2, [fp, #-48]	; 0xffffffd0
   153e8:	movcc	r1, #92	; 0x5c
   153ec:	strbcc	r1, [r6, r0]
   153f0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   153f4:	cmp	r1, #2
   153f8:	beq	15458 <__assert_fail@plt+0x3d58>
   153fc:	add	r1, r7, #1
   15400:	mov	r4, #0
   15404:	mov	r8, #1
   15408:	mov	r5, #48	; 0x30
   1540c:	cmp	r1, lr
   15410:	bcs	14cf8 <__assert_fail@plt+0x35f8>
   15414:	ldrb	r1, [ip, r1]
   15418:	sub	r1, r1, #48	; 0x30
   1541c:	uxtb	r1, r1
   15420:	cmp	r1, #9
   15424:	bhi	14cf8 <__assert_fail@plt+0x35f8>
   15428:	cmp	r9, sl
   1542c:	movcc	r1, #48	; 0x30
   15430:	strbcc	r1, [r6, r9]
   15434:	add	r1, r0, #2
   15438:	add	r9, r0, #3
   1543c:	cmp	r1, sl
   15440:	movcc	r2, #48	; 0x30
   15444:	strbcc	r2, [r6, r1]
   15448:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1544c:	cmp	r0, #0
   15450:	bne	14d04 <__assert_fail@plt+0x3604>
   15454:	b	14fdc <__assert_fail@plt+0x38dc>
   15458:	mov	r0, #48	; 0x30
   1545c:	mov	r8, #1
   15460:	mov	r4, #0
   15464:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15468:	cmp	r1, #0
   1546c:	bne	15018 <__assert_fail@plt+0x3918>
   15470:	cmp	r8, #0
   15474:	beq	14f94 <__assert_fail@plt+0x3894>
   15478:	b	14d84 <__assert_fail@plt+0x3684>
   1547c:	mov	r4, #0
   15480:	ldr	ip, [fp, #-84]	; 0xffffffac
   15484:	b	154c0 <__assert_fail@plt+0x3dc0>
   15488:	ldr	r1, [sp, #84]	; 0x54
   1548c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15490:	mov	r4, #0
   15494:	cmp	r6, r1
   15498:	bcs	154c0 <__assert_fail@plt+0x3dc0>
   1549c:	ldrb	r0, [ip, r6]
   154a0:	cmp	r0, #0
   154a4:	beq	154c0 <__assert_fail@plt+0x3dc0>
   154a8:	ldr	r0, [sp, #64]	; 0x40
   154ac:	add	r0, r0, #1
   154b0:	add	r6, r0, r7
   154b4:	str	r0, [sp, #64]	; 0x40
   154b8:	cmp	r6, r1
   154bc:	bcc	1549c <__assert_fail@plt+0x3d9c>
   154c0:	ldr	r6, [sp, #64]	; 0x40
   154c4:	b	154cc <__assert_fail@plt+0x3dcc>
   154c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   154cc:	mov	r1, r6
   154d0:	ldr	r6, [sp, #76]	; 0x4c
   154d4:	ldr	sl, [sp, #56]	; 0x38
   154d8:	ldr	r0, [sp, #44]	; 0x2c
   154dc:	cmp	r1, #1
   154e0:	orr	r2, r4, r0
   154e4:	mov	r0, r1
   154e8:	bhi	15508 <__assert_fail@plt+0x3e08>
   154ec:	tst	r2, #1
   154f0:	beq	15508 <__assert_fail@plt+0x3e08>
   154f4:	ldr	lr, [sp, #84]	; 0x54
   154f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   154fc:	cmp	r0, #0
   15500:	bne	14d04 <__assert_fail@plt+0x3604>
   15504:	b	14fdc <__assert_fail@plt+0x38dc>
   15508:	str	r2, [sp, #64]	; 0x40
   1550c:	add	r0, r0, r7
   15510:	add	r1, r7, #1
   15514:	ldr	lr, [sp, #84]	; 0x54
   15518:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1551c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15520:	mov	r3, #0
   15524:	str	r0, [sp, #56]	; 0x38
   15528:	ldr	r0, [sp, #64]	; 0x40
   1552c:	tst	r0, #1
   15530:	bne	15618 <__assert_fail@plt+0x3f18>
   15534:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15538:	tst	r0, #1
   1553c:	bne	157b8 <__assert_fail@plt+0x40b8>
   15540:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15544:	cmp	r7, #2
   15548:	movwne	r3, #1
   1554c:	orr	r3, r3, r2
   15550:	tst	r3, #1
   15554:	bne	1558c <__assert_fail@plt+0x3e8c>
   15558:	cmp	r9, sl
   1555c:	add	r3, r9, #1
   15560:	movcc	r2, #39	; 0x27
   15564:	strbcc	r2, [r6, r9]
   15568:	cmp	r3, sl
   1556c:	movcc	r2, #36	; 0x24
   15570:	strbcc	r2, [r6, r3]
   15574:	add	r3, r9, #2
   15578:	add	r9, r9, #3
   1557c:	cmp	r3, sl
   15580:	movcc	r2, #39	; 0x27
   15584:	strbcc	r2, [r6, r3]
   15588:	mov	r2, #1
   1558c:	cmp	r9, sl
   15590:	mov	r0, r2
   15594:	movcc	r3, #92	; 0x5c
   15598:	strbcc	r3, [r6, r9]
   1559c:	add	r3, r9, #1
   155a0:	cmp	r3, sl
   155a4:	andcc	r7, r5, #192	; 0xc0
   155a8:	movcc	r2, #48	; 0x30
   155ac:	orrcc	r7, r2, r7, lsr #6
   155b0:	strbcc	r7, [r6, r3]
   155b4:	add	r3, r9, #2
   155b8:	add	r9, r9, #3
   155bc:	cmp	r3, sl
   155c0:	lsrcc	r7, r5, #3
   155c4:	movcc	r2, #6
   155c8:	bficc	r7, r2, #3, #29
   155cc:	mov	r2, #6
   155d0:	strbcc	r7, [r6, r3]
   155d4:	bfi	r5, r2, #3, #29
   155d8:	mov	r3, #1
   155dc:	mov	r2, r0
   155e0:	ldr	r0, [sp, #56]	; 0x38
   155e4:	and	r8, r3, #1
   155e8:	cmp	r0, r1
   155ec:	bhi	1564c <__assert_fail@plt+0x3f4c>
   155f0:	b	1568c <__assert_fail@plt+0x3f8c>
   155f4:	cmp	r9, sl
   155f8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   155fc:	strbcc	r5, [r6, r9]
   15600:	add	r9, r9, #1
   15604:	ldrb	r5, [ip, r1]
   15608:	add	r1, r1, #1
   1560c:	ldr	r0, [sp, #64]	; 0x40
   15610:	tst	r0, #1
   15614:	beq	15534 <__assert_fail@plt+0x3e34>
   15618:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1561c:	tst	r7, #1
   15620:	beq	15634 <__assert_fail@plt+0x3f34>
   15624:	cmp	r9, sl
   15628:	movcc	r7, #92	; 0x5c
   1562c:	strbcc	r7, [r6, r9]
   15630:	add	r9, r9, #1
   15634:	mov	r7, #0
   15638:	str	r7, [fp, #-56]	; 0xffffffc8
   1563c:	ldr	r0, [sp, #56]	; 0x38
   15640:	and	r8, r3, #1
   15644:	cmp	r0, r1
   15648:	bls	1568c <__assert_fail@plt+0x3f8c>
   1564c:	cmp	r8, #0
   15650:	mvn	r7, r2
   15654:	movwne	r8, #1
   15658:	orr	r7, r7, r8
   1565c:	tst	r7, #1
   15660:	bne	155f4 <__assert_fail@plt+0x3ef4>
   15664:	cmp	r9, sl
   15668:	movcc	r7, #39	; 0x27
   1566c:	strbcc	r7, [r6, r9]
   15670:	add	r7, r9, #1
   15674:	add	r9, r9, #2
   15678:	cmp	r7, sl
   1567c:	movcc	r2, #39	; 0x27
   15680:	strbcc	r2, [r6, r7]
   15684:	mov	r2, #0
   15688:	b	155f4 <__assert_fail@plt+0x3ef4>
   1568c:	cmp	r8, #0
   15690:	sub	r7, r1, #1
   15694:	mov	r0, r5
   15698:	str	r2, [fp, #-48]	; 0xffffffd0
   1569c:	movwne	r8, #1
   156a0:	cmp	r8, #0
   156a4:	beq	14f94 <__assert_fail@plt+0x3894>
   156a8:	b	14d84 <__assert_fail@plt+0x3684>
   156ac:	mov	lr, r7
   156b0:	b	156b8 <__assert_fail@plt+0x3fb8>
   156b4:	mvn	lr, #0
   156b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   156bc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   156c0:	eor	r0, r7, #2
   156c4:	orr	r0, r0, r9
   156c8:	clz	r0, r0
   156cc:	lsr	r0, r0, #5
   156d0:	tst	r1, r0
   156d4:	bne	157d4 <__assert_fail@plt+0x40d4>
   156d8:	mov	r0, r1
   156dc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   156e0:	cmp	r7, #2
   156e4:	movwne	r1, #1
   156e8:	orr	r0, r0, r1
   156ec:	tst	r0, #1
   156f0:	ldreq	r0, [sp, #52]	; 0x34
   156f4:	streq	lr, [sp, #84]	; 0x54
   156f8:	eoreq	r0, r0, #1
   156fc:	tsteq	r0, #1
   15700:	bne	15898 <__assert_fail@plt+0x4198>
   15704:	tst	r4, #1
   15708:	bne	15854 <__assert_fail@plt+0x4154>
   1570c:	ldr	r6, [sp, #48]	; 0x30
   15710:	mov	r8, #0
   15714:	cmp	r6, #0
   15718:	beq	15890 <__assert_fail@plt+0x4190>
   1571c:	ldr	r0, [sp, #80]	; 0x50
   15720:	mov	r1, #0
   15724:	cmp	sl, #0
   15728:	mov	r4, #0
   1572c:	str	r1, [fp, #-72]	; 0xffffffb8
   15730:	beq	14624 <__assert_fail@plt+0x2f24>
   15734:	b	15898 <__assert_fail@plt+0x4198>
   15738:	ldrb	r1, [r0, #3]
   1573c:	cmp	r1, #56	; 0x38
   15740:	ldrbeq	r1, [r0, #4]
   15744:	cmpeq	r1, #48	; 0x30
   15748:	bne	1481c <__assert_fail@plt+0x311c>
   1574c:	ldrb	r1, [r0, #5]
   15750:	cmp	r1, #51	; 0x33
   15754:	ldrbeq	r1, [r0, #6]
   15758:	cmpeq	r1, #48	; 0x30
   1575c:	bne	1481c <__assert_fail@plt+0x311c>
   15760:	ldrb	r0, [r0, #7]
   15764:	cmp	r0, #0
   15768:	movw	r0, #48494	; 0xbd6e
   1576c:	movt	r0, #2
   15770:	str	r0, [sp, #68]	; 0x44
   15774:	bne	1481c <__assert_fail@plt+0x311c>
   15778:	b	14838 <__assert_fail@plt+0x3138>
   1577c:	ldrb	r1, [r0, #4]
   15780:	cmp	r1, #48	; 0x30
   15784:	ldrbeq	r1, [r0, #5]
   15788:	cmpeq	r1, #51	; 0x33
   1578c:	bne	14900 <__assert_fail@plt+0x3200>
   15790:	ldrb	r1, [r0, #6]
   15794:	cmp	r1, #48	; 0x30
   15798:	ldrbeq	r0, [r0, #7]
   1579c:	cmpeq	r0, #0
   157a0:	bne	14900 <__assert_fail@plt+0x3200>
   157a4:	movw	r0, #48498	; 0xbd72
   157a8:	movt	r0, #2
   157ac:	str	r0, [sp, #72]	; 0x48
   157b0:	b	14920 <__assert_fail@plt+0x3220>
   157b4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   157b8:	ldr	r2, [sp, #80]	; 0x50
   157bc:	b	157f4 <__assert_fail@plt+0x40f4>
   157c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   157c4:	mov	r2, #1
   157c8:	mov	lr, r4
   157cc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   157d0:	b	157f4 <__assert_fail@plt+0x40f4>
   157d4:	ldr	r2, [sp, #80]	; 0x50
   157d8:	mov	r7, #2
   157dc:	b	157f4 <__assert_fail@plt+0x40f4>
   157e0:	ldr	r6, [sp, #76]	; 0x4c
   157e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   157e8:	ldr	lr, [sp, #84]	; 0x54
   157ec:	ldr	r2, [sp, #80]	; 0x50
   157f0:	mov	r7, #2
   157f4:	mov	r0, #0
   157f8:	ldr	r1, [fp, #12]
   157fc:	tst	r2, #1
   15800:	mov	r2, r7
   15804:	mov	r3, lr
   15808:	str	r0, [sp, #8]
   1580c:	ldr	r0, [sp, #68]	; 0x44
   15810:	movwne	r2, #4
   15814:	cmp	r7, #2
   15818:	movne	r2, r7
   1581c:	str	r2, [sp]
   15820:	mov	r2, ip
   15824:	bic	r1, r1, #2
   15828:	str	r0, [sp, #12]
   1582c:	ldr	r0, [sp, #72]	; 0x48
   15830:	str	r1, [sp, #4]
   15834:	mov	r1, sl
   15838:	str	r0, [sp, #16]
   1583c:	mov	r0, r6
   15840:	bl	145a8 <__assert_fail@plt+0x2ea8>
   15844:	mov	r9, r0
   15848:	mov	r0, r9
   1584c:	sub	sp, fp, #28
   15850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15854:	mov	r0, #5
   15858:	ldr	r1, [sp, #48]	; 0x30
   1585c:	ldr	r2, [fp, #-84]	; 0xffffffac
   15860:	ldr	r3, [sp, #84]	; 0x54
   15864:	str	r0, [sp]
   15868:	ldr	r0, [fp, #12]
   1586c:	str	r0, [sp, #4]
   15870:	ldr	r0, [fp, #16]
   15874:	str	r0, [sp, #8]
   15878:	ldr	r0, [sp, #68]	; 0x44
   1587c:	str	r0, [sp, #12]
   15880:	ldr	r0, [sp, #72]	; 0x48
   15884:	str	r0, [sp, #16]
   15888:	ldr	r0, [sp, #76]	; 0x4c
   1588c:	b	15840 <__assert_fail@plt+0x4140>
   15890:	mov	r0, #0
   15894:	str	r0, [fp, #-72]	; 0xffffffb8
   15898:	ldr	r1, [sp, #92]	; 0x5c
   1589c:	cmp	r1, #0
   158a0:	beq	158e0 <__assert_fail@plt+0x41e0>
   158a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   158a8:	ldr	r2, [sp, #76]	; 0x4c
   158ac:	tst	r0, #1
   158b0:	bne	158e4 <__assert_fail@plt+0x41e4>
   158b4:	ldrb	r0, [r1]
   158b8:	cmp	r0, #0
   158bc:	beq	158e4 <__assert_fail@plt+0x41e4>
   158c0:	add	r1, r1, #1
   158c4:	cmp	r9, sl
   158c8:	strbcc	r0, [r2, r9]
   158cc:	add	r9, r9, #1
   158d0:	ldrb	r0, [r1], #1
   158d4:	cmp	r0, #0
   158d8:	bne	158c4 <__assert_fail@plt+0x41c4>
   158dc:	b	158e4 <__assert_fail@plt+0x41e4>
   158e0:	ldr	r2, [sp, #76]	; 0x4c
   158e4:	cmp	r9, sl
   158e8:	movcc	r0, #0
   158ec:	strbcc	r0, [r2, r9]
   158f0:	mov	r0, r9
   158f4:	sub	sp, fp, #28
   158f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158fc:	mov	r2, #1
   15900:	b	157cc <__assert_fail@plt+0x40cc>
   15904:	ldr	r2, [sp, #80]	; 0x50
   15908:	mov	r7, #5
   1590c:	b	157f4 <__assert_fail@plt+0x40f4>
   15910:	bl	116e8 <abort@plt>
   15914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15918:	add	fp, sp, #28
   1591c:	sub	sp, sp, #28
   15920:	movw	r5, #53696	; 0xd1c0
   15924:	cmp	r2, #0
   15928:	mov	r4, r1
   1592c:	mov	r7, r0
   15930:	str	r0, [sp, #20]
   15934:	movt	r5, #3
   15938:	movne	r5, r2
   1593c:	bl	115ec <__errno_location@plt>
   15940:	mov	sl, r0
   15944:	ldm	r5, {r0, r1}
   15948:	ldr	r2, [r5, #40]	; 0x28
   1594c:	ldr	r3, [r5, #44]	; 0x2c
   15950:	add	r9, r5, #8
   15954:	ldr	r6, [sl]
   15958:	orr	r8, r1, #1
   1595c:	mov	r1, #0
   15960:	str	r6, [sp, #24]
   15964:	stm	sp, {r0, r8, r9}
   15968:	str	r2, [sp, #12]
   1596c:	str	r3, [sp, #16]
   15970:	mov	r0, #0
   15974:	mov	r2, r7
   15978:	mov	r3, r4
   1597c:	mov	r6, r4
   15980:	bl	145a8 <__assert_fail@plt+0x2ea8>
   15984:	add	r7, r0, #1
   15988:	mov	r0, r7
   1598c:	bl	2a4bc <__assert_fail@plt+0x18dbc>
   15990:	mov	r4, r0
   15994:	ldr	r0, [r5]
   15998:	ldr	r2, [r5, #44]	; 0x2c
   1599c:	ldr	r1, [r5, #40]	; 0x28
   159a0:	mov	r3, r6
   159a4:	stm	sp, {r0, r8, r9}
   159a8:	str	r2, [sp, #16]
   159ac:	str	r1, [sp, #12]
   159b0:	mov	r0, r4
   159b4:	mov	r1, r7
   159b8:	ldr	r2, [sp, #20]
   159bc:	bl	145a8 <__assert_fail@plt+0x2ea8>
   159c0:	ldr	r0, [sp, #24]
   159c4:	str	r0, [sl]
   159c8:	mov	r0, r4
   159cc:	sub	sp, fp, #28
   159d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159d8:	add	fp, sp, #28
   159dc:	sub	sp, sp, #36	; 0x24
   159e0:	movw	r8, #53696	; 0xd1c0
   159e4:	cmp	r3, #0
   159e8:	mov	r4, r2
   159ec:	str	r2, [sp, #24]
   159f0:	mov	r5, r1
   159f4:	mov	r6, r0
   159f8:	str	r0, [sp, #20]
   159fc:	movt	r8, #3
   15a00:	movne	r8, r3
   15a04:	bl	115ec <__errno_location@plt>
   15a08:	str	r0, [sp, #28]
   15a0c:	cmp	r4, #0
   15a10:	add	sl, r8, #8
   15a14:	ldm	r8, {r3, r9}
   15a18:	ldr	r7, [r0]
   15a1c:	ldr	r1, [r8, #40]	; 0x28
   15a20:	ldr	r2, [r8, #44]	; 0x2c
   15a24:	mov	r0, #0
   15a28:	orreq	r9, r9, #1
   15a2c:	str	r7, [sp, #32]
   15a30:	mov	r7, r5
   15a34:	stm	sp, {r3, r9, sl}
   15a38:	str	r1, [sp, #12]
   15a3c:	str	r2, [sp, #16]
   15a40:	mov	r1, #0
   15a44:	mov	r2, r6
   15a48:	mov	r3, r5
   15a4c:	bl	145a8 <__assert_fail@plt+0x2ea8>
   15a50:	add	r4, r0, #1
   15a54:	mov	r5, r0
   15a58:	mov	r0, r4
   15a5c:	bl	2a4bc <__assert_fail@plt+0x18dbc>
   15a60:	mov	r6, r0
   15a64:	ldr	r0, [r8]
   15a68:	ldr	r2, [r8, #44]	; 0x2c
   15a6c:	ldr	r1, [r8, #40]	; 0x28
   15a70:	mov	r3, r7
   15a74:	stm	sp, {r0, r9, sl}
   15a78:	str	r2, [sp, #16]
   15a7c:	str	r1, [sp, #12]
   15a80:	mov	r0, r6
   15a84:	mov	r1, r4
   15a88:	ldr	r2, [sp, #20]
   15a8c:	bl	145a8 <__assert_fail@plt+0x2ea8>
   15a90:	ldr	r0, [sp, #24]
   15a94:	ldr	r1, [sp, #32]
   15a98:	ldr	r2, [sp, #28]
   15a9c:	cmp	r0, #0
   15aa0:	str	r1, [r2]
   15aa4:	strne	r5, [r0]
   15aa8:	mov	r0, r6
   15aac:	sub	sp, fp, #28
   15ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ab4:	push	{r4, r5, r6, r7, fp, lr}
   15ab8:	add	fp, sp, #16
   15abc:	movw	r4, #53632	; 0xd180
   15ac0:	movt	r4, #3
   15ac4:	ldrd	r6, [r4]
   15ac8:	cmp	r7, #2
   15acc:	blt	15af8 <__assert_fail@plt+0x43f8>
   15ad0:	add	r5, r6, #12
   15ad4:	mov	r7, #0
   15ad8:	ldr	r0, [r5, r7, lsl #3]
   15adc:	bl	13de4 <__assert_fail@plt+0x26e4>
   15ae0:	ldr	r1, [r4, #4]
   15ae4:	add	r2, r7, #2
   15ae8:	add	r0, r7, #1
   15aec:	mov	r7, r0
   15af0:	cmp	r2, r1
   15af4:	blt	15ad8 <__assert_fail@plt+0x43d8>
   15af8:	ldr	r0, [r6, #4]
   15afc:	movw	r5, #53744	; 0xd1f0
   15b00:	movt	r5, #3
   15b04:	cmp	r0, r5
   15b08:	beq	15b1c <__assert_fail@plt+0x441c>
   15b0c:	bl	13de4 <__assert_fail@plt+0x26e4>
   15b10:	mov	r0, #256	; 0x100
   15b14:	str	r0, [r4, #8]
   15b18:	str	r5, [r4, #12]
   15b1c:	add	r5, r4, #8
   15b20:	cmp	r6, r5
   15b24:	beq	15b34 <__assert_fail@plt+0x4434>
   15b28:	mov	r0, r6
   15b2c:	bl	13de4 <__assert_fail@plt+0x26e4>
   15b30:	str	r5, [r4]
   15b34:	mov	r0, #1
   15b38:	str	r0, [r4, #4]
   15b3c:	pop	{r4, r5, r6, r7, fp, pc}
   15b40:	movw	r3, #53696	; 0xd1c0
   15b44:	mvn	r2, #0
   15b48:	movt	r3, #3
   15b4c:	b	15b50 <__assert_fail@plt+0x4450>
   15b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b54:	add	fp, sp, #28
   15b58:	sub	sp, sp, #44	; 0x2c
   15b5c:	mov	r7, r3
   15b60:	str	r2, [sp, #36]	; 0x24
   15b64:	str	r1, [sp, #32]
   15b68:	mov	r5, r0
   15b6c:	bl	115ec <__errno_location@plt>
   15b70:	cmp	r5, #0
   15b74:	blt	15cd8 <__assert_fail@plt+0x45d8>
   15b78:	cmn	r5, #-2147483647	; 0x80000001
   15b7c:	beq	15cd8 <__assert_fail@plt+0x45d8>
   15b80:	movw	r8, #53632	; 0xd180
   15b84:	mov	r4, r0
   15b88:	movt	r8, #3
   15b8c:	ldr	r6, [r8]
   15b90:	ldr	r1, [r8, #4]
   15b94:	ldr	r0, [r0]
   15b98:	str	r4, [sp, #28]
   15b9c:	cmp	r1, r5
   15ba0:	str	r0, [sp, #24]
   15ba4:	ble	15bb0 <__assert_fail@plt+0x44b0>
   15ba8:	mov	sl, r6
   15bac:	b	15c14 <__assert_fail@plt+0x4514>
   15bb0:	mov	r0, #8
   15bb4:	add	r9, r8, #8
   15bb8:	add	r2, r5, #1
   15bbc:	str	r1, [fp, #-32]	; 0xffffffe0
   15bc0:	mvn	r3, #-2147483648	; 0x80000000
   15bc4:	str	r0, [sp]
   15bc8:	subs	r0, r6, r9
   15bcc:	sub	r2, r2, r1
   15bd0:	sub	r1, fp, #32
   15bd4:	movne	r0, r6
   15bd8:	bl	2a6bc <__assert_fail@plt+0x18fbc>
   15bdc:	str	r0, [r8]
   15be0:	cmp	r6, r9
   15be4:	mov	sl, r0
   15be8:	ldrdeq	r0, [r8, #8]
   15bec:	stmeq	sl, {r0, r1}
   15bf0:	ldr	r1, [r8, #4]
   15bf4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15bf8:	add	r0, sl, r1, lsl #3
   15bfc:	sub	r1, r2, r1
   15c00:	lsl	r2, r1, #3
   15c04:	mov	r1, #0
   15c08:	bl	11610 <memset@plt>
   15c0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15c10:	str	r0, [r8, #4]
   15c14:	mov	r9, sl
   15c18:	ldr	r6, [r9, r5, lsl #3]!
   15c1c:	ldr	r4, [r9, #4]!
   15c20:	ldm	r7, {r0, r1}
   15c24:	ldr	r2, [r7, #40]	; 0x28
   15c28:	ldr	r3, [r7, #44]	; 0x2c
   15c2c:	orr	r8, r1, #1
   15c30:	add	r1, r7, #8
   15c34:	stm	sp, {r0, r8}
   15c38:	add	r0, sp, #8
   15c3c:	str	r1, [sp, #20]
   15c40:	stm	r0, {r1, r2, r3}
   15c44:	mov	r0, r4
   15c48:	mov	r1, r6
   15c4c:	ldr	r2, [sp, #32]
   15c50:	ldr	r3, [sp, #36]	; 0x24
   15c54:	bl	145a8 <__assert_fail@plt+0x2ea8>
   15c58:	cmp	r6, r0
   15c5c:	bhi	15cc0 <__assert_fail@plt+0x45c0>
   15c60:	add	r6, r0, #1
   15c64:	movw	r0, #53744	; 0xd1f0
   15c68:	movt	r0, #3
   15c6c:	str	r6, [sl, r5, lsl #3]
   15c70:	cmp	r4, r0
   15c74:	beq	15c80 <__assert_fail@plt+0x4580>
   15c78:	mov	r0, r4
   15c7c:	bl	13de4 <__assert_fail@plt+0x26e4>
   15c80:	mov	r0, r6
   15c84:	bl	2a4bc <__assert_fail@plt+0x18dbc>
   15c88:	str	r0, [r9]
   15c8c:	mov	r4, r0
   15c90:	add	r3, sp, #8
   15c94:	ldr	r0, [r7]
   15c98:	ldr	r1, [r7, #40]	; 0x28
   15c9c:	ldr	r2, [r7, #44]	; 0x2c
   15ca0:	stm	sp, {r0, r8}
   15ca4:	ldr	r0, [sp, #20]
   15ca8:	stm	r3, {r0, r1, r2}
   15cac:	mov	r0, r4
   15cb0:	mov	r1, r6
   15cb4:	ldr	r2, [sp, #32]
   15cb8:	ldr	r3, [sp, #36]	; 0x24
   15cbc:	bl	145a8 <__assert_fail@plt+0x2ea8>
   15cc0:	ldr	r1, [sp, #24]
   15cc4:	ldr	r0, [sp, #28]
   15cc8:	str	r1, [r0]
   15ccc:	mov	r0, r4
   15cd0:	sub	sp, fp, #28
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd8:	bl	116e8 <abort@plt>
   15cdc:	movw	r3, #53696	; 0xd1c0
   15ce0:	movt	r3, #3
   15ce4:	b	15b50 <__assert_fail@plt+0x4450>
   15ce8:	movw	r3, #53696	; 0xd1c0
   15cec:	mov	r1, r0
   15cf0:	mov	r0, #0
   15cf4:	mvn	r2, #0
   15cf8:	movt	r3, #3
   15cfc:	b	15b50 <__assert_fail@plt+0x4450>
   15d00:	movw	r3, #53696	; 0xd1c0
   15d04:	mov	r2, r1
   15d08:	mov	r1, r0
   15d0c:	mov	r0, #0
   15d10:	movt	r3, #3
   15d14:	b	15b50 <__assert_fail@plt+0x4450>
   15d18:	push	{fp, lr}
   15d1c:	mov	fp, sp
   15d20:	sub	sp, sp, #48	; 0x30
   15d24:	vmov.i32	q8, #0	; 0x00000000
   15d28:	mov	ip, #32
   15d2c:	mov	r3, sp
   15d30:	mov	lr, r2
   15d34:	cmp	r1, #10
   15d38:	add	r2, r3, #16
   15d3c:	vst1.64	{d16-d17}, [r3], ip
   15d40:	vst1.64	{d16-d17}, [r3]
   15d44:	vst1.64	{d16-d17}, [r2]
   15d48:	beq	15d68 <__assert_fail@plt+0x4668>
   15d4c:	str	r1, [sp]
   15d50:	mov	r3, sp
   15d54:	mov	r1, lr
   15d58:	mvn	r2, #0
   15d5c:	bl	15b50 <__assert_fail@plt+0x4450>
   15d60:	mov	sp, fp
   15d64:	pop	{fp, pc}
   15d68:	bl	116e8 <abort@plt>
   15d6c:	push	{r4, sl, fp, lr}
   15d70:	add	fp, sp, #8
   15d74:	sub	sp, sp, #48	; 0x30
   15d78:	mov	ip, r3
   15d7c:	mov	r3, sp
   15d80:	vmov.i32	q8, #0	; 0x00000000
   15d84:	mov	lr, #32
   15d88:	cmp	r1, #10
   15d8c:	add	r4, r3, #16
   15d90:	vst1.64	{d16-d17}, [r3], lr
   15d94:	vst1.64	{d16-d17}, [r3]
   15d98:	vst1.64	{d16-d17}, [r4]
   15d9c:	beq	15dbc <__assert_fail@plt+0x46bc>
   15da0:	str	r1, [sp]
   15da4:	mov	r1, r2
   15da8:	mov	r3, sp
   15dac:	mov	r2, ip
   15db0:	bl	15b50 <__assert_fail@plt+0x4450>
   15db4:	sub	sp, fp, #8
   15db8:	pop	{r4, sl, fp, pc}
   15dbc:	bl	116e8 <abort@plt>
   15dc0:	push	{fp, lr}
   15dc4:	mov	fp, sp
   15dc8:	sub	sp, sp, #48	; 0x30
   15dcc:	mov	r3, sp
   15dd0:	vmov.i32	q8, #0	; 0x00000000
   15dd4:	mov	ip, #32
   15dd8:	cmp	r0, #10
   15ddc:	add	r2, r3, #16
   15de0:	vst1.64	{d16-d17}, [r3], ip
   15de4:	vst1.64	{d16-d17}, [r3]
   15de8:	vst1.64	{d16-d17}, [r2]
   15dec:	beq	15e0c <__assert_fail@plt+0x470c>
   15df0:	str	r0, [sp]
   15df4:	mov	r3, sp
   15df8:	mov	r0, #0
   15dfc:	mvn	r2, #0
   15e00:	bl	15b50 <__assert_fail@plt+0x4450>
   15e04:	mov	sp, fp
   15e08:	pop	{fp, pc}
   15e0c:	bl	116e8 <abort@plt>
   15e10:	push	{fp, lr}
   15e14:	mov	fp, sp
   15e18:	sub	sp, sp, #48	; 0x30
   15e1c:	mov	r3, sp
   15e20:	vmov.i32	q8, #0	; 0x00000000
   15e24:	mov	ip, #32
   15e28:	cmp	r0, #10
   15e2c:	add	lr, r3, #16
   15e30:	vst1.64	{d16-d17}, [r3], ip
   15e34:	vst1.64	{d16-d17}, [r3]
   15e38:	vst1.64	{d16-d17}, [lr]
   15e3c:	beq	15e58 <__assert_fail@plt+0x4758>
   15e40:	str	r0, [sp]
   15e44:	mov	r3, sp
   15e48:	mov	r0, #0
   15e4c:	bl	15b50 <__assert_fail@plt+0x4450>
   15e50:	mov	sp, fp
   15e54:	pop	{fp, pc}
   15e58:	bl	116e8 <abort@plt>
   15e5c:	push	{r4, sl, fp, lr}
   15e60:	add	fp, sp, #8
   15e64:	sub	sp, sp, #48	; 0x30
   15e68:	mov	lr, r0
   15e6c:	movw	r0, #53696	; 0xd1c0
   15e70:	mov	r3, #32
   15e74:	mov	ip, r1
   15e78:	mov	r4, #1
   15e7c:	movt	r0, #3
   15e80:	add	r1, r0, #16
   15e84:	vld1.64	{d16-d17}, [r0], r3
   15e88:	mov	r3, sp
   15e8c:	vld1.64	{d18-d19}, [r1]
   15e90:	add	r1, r3, #16
   15e94:	vld1.64	{d20-d21}, [r0]
   15e98:	add	r0, r3, #32
   15e9c:	vst1.64	{d18-d19}, [r1]
   15ea0:	mov	r1, r3
   15ea4:	vst1.64	{d20-d21}, [r0]
   15ea8:	mov	r0, #28
   15eac:	and	r0, r0, r2, lsr #3
   15eb0:	and	r2, r2, #31
   15eb4:	vst1.64	{d16-d17}, [r1], r0
   15eb8:	ldr	r0, [r1, #8]
   15ebc:	bic	r4, r4, r0, lsr r2
   15ec0:	eor	r0, r0, r4, lsl r2
   15ec4:	mov	r2, ip
   15ec8:	str	r0, [r1, #8]
   15ecc:	mov	r0, #0
   15ed0:	mov	r1, lr
   15ed4:	bl	15b50 <__assert_fail@plt+0x4450>
   15ed8:	sub	sp, fp, #8
   15edc:	pop	{r4, sl, fp, pc}
   15ee0:	push	{fp, lr}
   15ee4:	mov	fp, sp
   15ee8:	sub	sp, sp, #48	; 0x30
   15eec:	mov	ip, r0
   15ef0:	movw	r0, #53696	; 0xd1c0
   15ef4:	mov	r3, #32
   15ef8:	movt	r0, #3
   15efc:	add	r2, r0, #16
   15f00:	vld1.64	{d16-d17}, [r0], r3
   15f04:	mov	r3, sp
   15f08:	vld1.64	{d18-d19}, [r2]
   15f0c:	add	r2, r3, #16
   15f10:	vld1.64	{d20-d21}, [r0]
   15f14:	add	r0, r3, #32
   15f18:	vst1.64	{d18-d19}, [r2]
   15f1c:	mov	r2, r3
   15f20:	vst1.64	{d20-d21}, [r0]
   15f24:	mov	r0, #28
   15f28:	and	r0, r0, r1, lsr #3
   15f2c:	and	r1, r1, #31
   15f30:	vst1.64	{d16-d17}, [r2], r0
   15f34:	mov	r0, #1
   15f38:	ldr	lr, [r2, #8]
   15f3c:	bic	r0, r0, lr, lsr r1
   15f40:	eor	r0, lr, r0, lsl r1
   15f44:	mov	r1, ip
   15f48:	str	r0, [r2, #8]
   15f4c:	mov	r0, #0
   15f50:	mvn	r2, #0
   15f54:	bl	15b50 <__assert_fail@plt+0x4450>
   15f58:	mov	sp, fp
   15f5c:	pop	{fp, pc}
   15f60:	push	{fp, lr}
   15f64:	mov	fp, sp
   15f68:	sub	sp, sp, #48	; 0x30
   15f6c:	movw	r2, #53696	; 0xd1c0
   15f70:	mov	r3, #32
   15f74:	mov	r1, r0
   15f78:	movt	r2, #3
   15f7c:	add	r0, r2, #16
   15f80:	vld1.64	{d16-d17}, [r2], r3
   15f84:	mov	r3, sp
   15f88:	vld1.64	{d18-d19}, [r0]
   15f8c:	add	r0, r3, #16
   15f90:	vld1.64	{d20-d21}, [r2]
   15f94:	mov	r2, r3
   15f98:	vst1.64	{d18-d19}, [r0]
   15f9c:	add	r0, r3, #32
   15fa0:	vst1.64	{d20-d21}, [r0]
   15fa4:	mov	r0, #12
   15fa8:	vst1.64	{d16-d17}, [r2], r0
   15fac:	ldr	r0, [r2]
   15fb0:	orr	r0, r0, #67108864	; 0x4000000
   15fb4:	str	r0, [r2]
   15fb8:	mov	r0, #0
   15fbc:	mvn	r2, #0
   15fc0:	bl	15b50 <__assert_fail@plt+0x4450>
   15fc4:	mov	sp, fp
   15fc8:	pop	{fp, pc}
   15fcc:	push	{fp, lr}
   15fd0:	mov	fp, sp
   15fd4:	sub	sp, sp, #48	; 0x30
   15fd8:	mov	ip, r1
   15fdc:	mov	r1, r0
   15fe0:	movw	r0, #53696	; 0xd1c0
   15fe4:	mov	r3, #32
   15fe8:	movt	r0, #3
   15fec:	add	r2, r0, #16
   15ff0:	vld1.64	{d16-d17}, [r0], r3
   15ff4:	mov	r3, sp
   15ff8:	vld1.64	{d18-d19}, [r2]
   15ffc:	add	r2, r3, #16
   16000:	vld1.64	{d20-d21}, [r0]
   16004:	add	r0, r3, #32
   16008:	vst1.64	{d18-d19}, [r2]
   1600c:	mov	r2, r3
   16010:	vst1.64	{d20-d21}, [r0]
   16014:	mov	r0, #12
   16018:	vst1.64	{d16-d17}, [r2], r0
   1601c:	ldr	r0, [r2]
   16020:	orr	r0, r0, #67108864	; 0x4000000
   16024:	str	r0, [r2]
   16028:	mov	r0, #0
   1602c:	mov	r2, ip
   16030:	bl	15b50 <__assert_fail@plt+0x4450>
   16034:	mov	sp, fp
   16038:	pop	{fp, pc}
   1603c:	push	{r4, sl, fp, lr}
   16040:	add	fp, sp, #8
   16044:	sub	sp, sp, #96	; 0x60
   16048:	mov	ip, r2
   1604c:	mov	r2, sp
   16050:	vmov.i32	q8, #0	; 0x00000000
   16054:	mov	r4, #28
   16058:	cmp	r1, #10
   1605c:	mov	r3, r2
   16060:	add	lr, r2, #16
   16064:	vst1.64	{d16-d17}, [r3], r4
   16068:	vst1.64	{d16-d17}, [lr]
   1606c:	vst1.32	{d16-d17}, [r3]
   16070:	beq	160c0 <__assert_fail@plt+0x49c0>
   16074:	vld1.64	{d16-d17}, [r2], r4
   16078:	vld1.64	{d18-d19}, [lr]
   1607c:	add	r3, sp, #48	; 0x30
   16080:	add	r4, r3, #4
   16084:	vld1.32	{d20-d21}, [r2]
   16088:	add	r2, r3, #20
   1608c:	vst1.32	{d16-d17}, [r4]
   16090:	vst1.32	{d18-d19}, [r2]
   16094:	add	r2, r3, #32
   16098:	vst1.32	{d20-d21}, [r2]
   1609c:	str	r1, [sp, #48]	; 0x30
   160a0:	mvn	r2, #0
   160a4:	ldr	r1, [sp, #60]	; 0x3c
   160a8:	orr	r1, r1, #67108864	; 0x4000000
   160ac:	str	r1, [sp, #60]	; 0x3c
   160b0:	mov	r1, ip
   160b4:	bl	15b50 <__assert_fail@plt+0x4450>
   160b8:	sub	sp, fp, #8
   160bc:	pop	{r4, sl, fp, pc}
   160c0:	bl	116e8 <abort@plt>
   160c4:	push	{r4, r5, fp, lr}
   160c8:	add	fp, sp, #8
   160cc:	sub	sp, sp, #48	; 0x30
   160d0:	mov	ip, r3
   160d4:	movw	r3, #53696	; 0xd1c0
   160d8:	mov	lr, #32
   160dc:	cmp	r1, #0
   160e0:	mov	r5, sp
   160e4:	movt	r3, #3
   160e8:	cmpne	r2, #0
   160ec:	add	r4, r3, #16
   160f0:	vld1.64	{d16-d17}, [r3], lr
   160f4:	vld1.64	{d18-d19}, [r4]
   160f8:	add	r4, r5, #16
   160fc:	vld1.64	{d20-d21}, [r3]
   16100:	vst1.64	{d16-d17}, [r5], lr
   16104:	mov	r3, #10
   16108:	vst1.64	{d18-d19}, [r4]
   1610c:	vst1.64	{d20-d21}, [r5]
   16110:	str	r3, [sp]
   16114:	bne	1611c <__assert_fail@plt+0x4a1c>
   16118:	bl	116e8 <abort@plt>
   1611c:	str	r2, [sp, #44]	; 0x2c
   16120:	str	r1, [sp, #40]	; 0x28
   16124:	mov	r3, sp
   16128:	mov	r1, ip
   1612c:	mvn	r2, #0
   16130:	bl	15b50 <__assert_fail@plt+0x4450>
   16134:	sub	sp, fp, #8
   16138:	pop	{r4, r5, fp, pc}
   1613c:	push	{r4, r5, fp, lr}
   16140:	add	fp, sp, #8
   16144:	sub	sp, sp, #48	; 0x30
   16148:	mov	lr, r3
   1614c:	movw	r3, #53696	; 0xd1c0
   16150:	mov	ip, #32
   16154:	cmp	r1, #0
   16158:	mov	r5, sp
   1615c:	movt	r3, #3
   16160:	cmpne	r2, #0
   16164:	add	r4, r3, #16
   16168:	vld1.64	{d16-d17}, [r3], ip
   1616c:	vld1.64	{d18-d19}, [r4]
   16170:	add	r4, r5, #16
   16174:	vld1.64	{d20-d21}, [r3]
   16178:	vst1.64	{d16-d17}, [r5], ip
   1617c:	mov	r3, #10
   16180:	vst1.64	{d18-d19}, [r4]
   16184:	vst1.64	{d20-d21}, [r5]
   16188:	str	r3, [sp]
   1618c:	bne	16194 <__assert_fail@plt+0x4a94>
   16190:	bl	116e8 <abort@plt>
   16194:	ldr	ip, [fp, #8]
   16198:	str	r2, [sp, #44]	; 0x2c
   1619c:	str	r1, [sp, #40]	; 0x28
   161a0:	mov	r3, sp
   161a4:	mov	r1, lr
   161a8:	mov	r2, ip
   161ac:	bl	15b50 <__assert_fail@plt+0x4450>
   161b0:	sub	sp, fp, #8
   161b4:	pop	{r4, r5, fp, pc}
   161b8:	push	{r4, sl, fp, lr}
   161bc:	add	fp, sp, #8
   161c0:	sub	sp, sp, #48	; 0x30
   161c4:	mov	ip, r2
   161c8:	movw	r2, #53696	; 0xd1c0
   161cc:	mov	lr, #32
   161d0:	cmp	r0, #0
   161d4:	mov	r4, sp
   161d8:	movt	r2, #3
   161dc:	cmpne	r1, #0
   161e0:	add	r3, r2, #16
   161e4:	vld1.64	{d16-d17}, [r2], lr
   161e8:	vld1.64	{d18-d19}, [r3]
   161ec:	add	r3, r4, #16
   161f0:	vld1.64	{d20-d21}, [r2]
   161f4:	vst1.64	{d16-d17}, [r4], lr
   161f8:	mov	r2, #10
   161fc:	vst1.64	{d18-d19}, [r3]
   16200:	vst1.64	{d20-d21}, [r4]
   16204:	str	r2, [sp]
   16208:	bne	16210 <__assert_fail@plt+0x4b10>
   1620c:	bl	116e8 <abort@plt>
   16210:	str	r1, [sp, #44]	; 0x2c
   16214:	str	r0, [sp, #40]	; 0x28
   16218:	mov	r3, sp
   1621c:	mov	r0, #0
   16220:	mov	r1, ip
   16224:	mvn	r2, #0
   16228:	bl	15b50 <__assert_fail@plt+0x4450>
   1622c:	sub	sp, fp, #8
   16230:	pop	{r4, sl, fp, pc}
   16234:	push	{r4, r5, fp, lr}
   16238:	add	fp, sp, #8
   1623c:	sub	sp, sp, #48	; 0x30
   16240:	mov	lr, r2
   16244:	movw	r2, #53696	; 0xd1c0
   16248:	mov	ip, r3
   1624c:	mov	r3, #32
   16250:	cmp	r0, #0
   16254:	mov	r5, sp
   16258:	movt	r2, #3
   1625c:	cmpne	r1, #0
   16260:	add	r4, r2, #16
   16264:	vld1.64	{d16-d17}, [r2], r3
   16268:	vld1.64	{d18-d19}, [r4]
   1626c:	add	r4, r5, #16
   16270:	vld1.64	{d20-d21}, [r2]
   16274:	vst1.64	{d16-d17}, [r5], r3
   16278:	mov	r2, #10
   1627c:	vst1.64	{d18-d19}, [r4]
   16280:	vst1.64	{d20-d21}, [r5]
   16284:	str	r2, [sp]
   16288:	bne	16290 <__assert_fail@plt+0x4b90>
   1628c:	bl	116e8 <abort@plt>
   16290:	str	r1, [sp, #44]	; 0x2c
   16294:	str	r0, [sp, #40]	; 0x28
   16298:	mov	r3, sp
   1629c:	mov	r0, #0
   162a0:	mov	r1, lr
   162a4:	mov	r2, ip
   162a8:	bl	15b50 <__assert_fail@plt+0x4450>
   162ac:	sub	sp, fp, #8
   162b0:	pop	{r4, r5, fp, pc}
   162b4:	movw	r3, #53584	; 0xd150
   162b8:	movt	r3, #3
   162bc:	b	15b50 <__assert_fail@plt+0x4450>
   162c0:	movw	r3, #53584	; 0xd150
   162c4:	mov	r2, r1
   162c8:	mov	r1, r0
   162cc:	mov	r0, #0
   162d0:	movt	r3, #3
   162d4:	b	15b50 <__assert_fail@plt+0x4450>
   162d8:	movw	r3, #53584	; 0xd150
   162dc:	mvn	r2, #0
   162e0:	movt	r3, #3
   162e4:	b	15b50 <__assert_fail@plt+0x4450>
   162e8:	movw	r3, #53584	; 0xd150
   162ec:	mov	r1, r0
   162f0:	mov	r0, #0
   162f4:	mvn	r2, #0
   162f8:	movt	r3, #3
   162fc:	b	15b50 <__assert_fail@plt+0x4450>
   16300:	push	{fp, lr}
   16304:	mov	fp, sp
   16308:	mov	lr, r0
   1630c:	movw	r0, #54000	; 0xd2f0
   16310:	mov	ip, r1
   16314:	ldrb	r1, [r2, #28]
   16318:	movt	r0, #3
   1631c:	ldr	r3, [r0]
   16320:	mov	r0, #16
   16324:	and	r1, r1, #111	; 0x6f
   16328:	and	r0, r0, r3, lsr #21
   1632c:	orr	r0, r1, r0
   16330:	mov	r1, lr
   16334:	orr	r0, r0, #128	; 0x80
   16338:	strb	r0, [r2, #28]
   1633c:	mov	r0, r2
   16340:	mov	r2, ip
   16344:	bl	16380 <__assert_fail@plt+0x4c80>
   16348:	cmp	r0, #0
   1634c:	moveq	r0, #0
   16350:	popeq	{fp, pc}
   16354:	movw	r1, #48976	; 0xbf50
   16358:	mov	r2, #5
   1635c:	movt	r1, #2
   16360:	ldr	r0, [r1, r0, lsl #2]
   16364:	movw	r1, #48592	; 0xbdd0
   16368:	movt	r1, #2
   1636c:	add	r1, r1, r0
   16370:	mov	r0, #0
   16374:	pop	{fp, lr}
   16378:	b	11490 <dcgettext@plt>
   1637c:	nop	{0}
   16380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16384:	add	fp, sp, #28
   16388:	sub	sp, sp, #140	; 0x8c
   1638c:	mov	r9, r0
   16390:	mov	r0, #0
   16394:	mov	sl, r3
   16398:	mov	r7, r2
   1639c:	mov	r8, r1
   163a0:	str	r0, [fp, #-52]	; 0xffffffcc
   163a4:	str	r0, [r9, #8]
   163a8:	str	r3, [r9, #12]
   163ac:	str	r0, [r9, #24]
   163b0:	ldrb	r0, [r9, #28]
   163b4:	and	r0, r0, #144	; 0x90
   163b8:	strb	r0, [r9, #28]
   163bc:	ldr	r0, [r9, #4]
   163c0:	ldr	r6, [r9]
   163c4:	cmp	r0, #159	; 0x9f
   163c8:	bls	16d58 <__assert_fail@plt+0x5658>
   163cc:	mov	r0, #160	; 0xa0
   163d0:	mov	r1, #0
   163d4:	mov	r2, #160	; 0xa0
   163d8:	str	r0, [r9, #8]
   163dc:	mov	r0, r6
   163e0:	bl	11610 <memset@plt>
   163e4:	mov	r0, #31
   163e8:	str	r0, [r6, #64]	; 0x40
   163ec:	movw	r0, #43689	; 0xaaa9
   163f0:	movt	r0, #2730	; 0xaaa
   163f4:	cmp	r7, r0
   163f8:	bhi	16718 <__assert_fail@plt+0x5018>
   163fc:	add	r0, r7, #1
   16400:	str	r0, [r6, #4]
   16404:	str	r0, [sp, #28]
   16408:	lsl	r0, r0, #3
   1640c:	bl	2aa84 <__assert_fail@plt+0x19384>
   16410:	str	r0, [r6]
   16414:	mov	r0, #1
   16418:	mov	r4, r0
   1641c:	lsl	r0, r0, #1
   16420:	cmp	r4, r7
   16424:	bls	16418 <__assert_fail@plt+0x4d18>
   16428:	mov	r0, #12
   1642c:	mov	r1, r4
   16430:	bl	2aa30 <__assert_fail@plt+0x19330>
   16434:	str	r0, [r6, #32]
   16438:	sub	r0, r4, #1
   1643c:	str	r0, [r6, #68]	; 0x44
   16440:	bl	11508 <__ctype_get_mb_cur_max@plt>
   16444:	str	r0, [r6, #92]	; 0x5c
   16448:	mov	r0, #14
   1644c:	bl	116a0 <nl_langinfo@plt>
   16450:	ldrb	r1, [r0]
   16454:	orr	r1, r1, #32
   16458:	cmp	r1, #117	; 0x75
   1645c:	bne	164a8 <__assert_fail@plt+0x4da8>
   16460:	ldrb	r1, [r0, #1]
   16464:	orr	r1, r1, #32
   16468:	cmp	r1, #116	; 0x74
   1646c:	bne	164a8 <__assert_fail@plt+0x4da8>
   16470:	ldrb	r1, [r0, #2]
   16474:	orr	r1, r1, #32
   16478:	cmp	r1, #102	; 0x66
   1647c:	bne	164a8 <__assert_fail@plt+0x4da8>
   16480:	ldrb	r1, [r0, #3]!
   16484:	cmp	r1, #45	; 0x2d
   16488:	movw	r1, #49092	; 0xbfc4
   1648c:	addeq	r0, r0, #1
   16490:	movt	r1, #2
   16494:	bl	113d0 <strcmp@plt>
   16498:	cmp	r0, #0
   1649c:	ldrbeq	r0, [r6, #88]	; 0x58
   164a0:	orreq	r0, r0, #4
   164a4:	strbeq	r0, [r6, #88]	; 0x58
   164a8:	ldrb	r0, [r6, #88]	; 0x58
   164ac:	and	r1, r0, #247	; 0xf7
   164b0:	strb	r1, [r6, #88]	; 0x58
   164b4:	ldr	r1, [r6, #92]	; 0x5c
   164b8:	cmp	r1, #2
   164bc:	blt	16704 <__assert_fail@plt+0x5004>
   164c0:	tst	r0, #4
   164c4:	bne	166f8 <__assert_fail@plt+0x4ff8>
   164c8:	mov	r0, #32
   164cc:	mov	r1, #1
   164d0:	mov	r5, #1
   164d4:	bl	2aa30 <__assert_fail@plt+0x19330>
   164d8:	cmp	r0, #0
   164dc:	str	r0, [r6, #60]	; 0x3c
   164e0:	beq	16718 <__assert_fail@plt+0x5018>
   164e4:	mov	r4, #0
   164e8:	mov	r0, r4
   164ec:	bl	1161c <btowc@plt>
   164f0:	cmn	r0, #1
   164f4:	ldrne	r1, [r6, #60]	; 0x3c
   164f8:	ldrne	r2, [r1]
   164fc:	orrne	r2, r2, r5, lsl r4
   16500:	strne	r2, [r1]
   16504:	cmp	r4, r0
   16508:	add	r4, r4, #1
   1650c:	ldrbne	r0, [r6, #88]	; 0x58
   16510:	orrne	r0, r0, #8
   16514:	strbne	r0, [r6, #88]	; 0x58
   16518:	cmp	r4, #32
   1651c:	bne	164e8 <__assert_fail@plt+0x4de8>
   16520:	mov	r4, #32
   16524:	mov	r5, #1
   16528:	mov	r0, r4
   1652c:	bl	1161c <btowc@plt>
   16530:	cmn	r0, #1
   16534:	ldrne	r2, [r6, #60]	; 0x3c
   16538:	subne	r1, r4, #32
   1653c:	ldrne	r3, [r2, #4]
   16540:	orrne	r1, r3, r5, lsl r1
   16544:	strne	r1, [r2, #4]
   16548:	cmp	r0, r4
   1654c:	sub	r1, r4, #31
   16550:	ldrbne	r0, [r6, #88]	; 0x58
   16554:	orrne	r0, r0, #8
   16558:	strbne	r0, [r6, #88]	; 0x58
   1655c:	add	r0, r4, #1
   16560:	cmp	r1, #32
   16564:	mov	r4, r0
   16568:	bne	16528 <__assert_fail@plt+0x4e28>
   1656c:	mov	r4, #64	; 0x40
   16570:	mov	r5, #1
   16574:	mov	r0, r4
   16578:	bl	1161c <btowc@plt>
   1657c:	cmn	r0, #1
   16580:	ldrne	r2, [r6, #60]	; 0x3c
   16584:	subne	r1, r4, #64	; 0x40
   16588:	ldrne	r3, [r2, #8]
   1658c:	orrne	r1, r3, r5, lsl r1
   16590:	strne	r1, [r2, #8]
   16594:	cmp	r0, r4
   16598:	sub	r1, r4, #63	; 0x3f
   1659c:	ldrbne	r0, [r6, #88]	; 0x58
   165a0:	orrne	r0, r0, #8
   165a4:	strbne	r0, [r6, #88]	; 0x58
   165a8:	add	r0, r4, #1
   165ac:	cmp	r1, #32
   165b0:	mov	r4, r0
   165b4:	bne	16574 <__assert_fail@plt+0x4e74>
   165b8:	mov	r4, #96	; 0x60
   165bc:	mov	r5, #1
   165c0:	mov	r0, r4
   165c4:	bl	1161c <btowc@plt>
   165c8:	cmn	r0, #1
   165cc:	ldrne	r2, [r6, #60]	; 0x3c
   165d0:	subne	r1, r4, #96	; 0x60
   165d4:	ldrne	r3, [r2, #12]
   165d8:	orrne	r1, r3, r5, lsl r1
   165dc:	strne	r1, [r2, #12]
   165e0:	cmp	r0, r4
   165e4:	sub	r1, r4, #95	; 0x5f
   165e8:	ldrbne	r0, [r6, #88]	; 0x58
   165ec:	orrne	r0, r0, #8
   165f0:	strbne	r0, [r6, #88]	; 0x58
   165f4:	add	r0, r4, #1
   165f8:	cmp	r1, #32
   165fc:	mov	r4, r0
   16600:	bne	165c0 <__assert_fail@plt+0x4ec0>
   16604:	mov	r4, #128	; 0x80
   16608:	mov	r5, #1
   1660c:	mov	r0, r4
   16610:	bl	1161c <btowc@plt>
   16614:	cmn	r0, #1
   16618:	ldrne	r1, [r6, #60]	; 0x3c
   1661c:	subne	r0, r4, #128	; 0x80
   16620:	ldrne	r2, [r1, #16]
   16624:	orrne	r0, r2, r5, lsl r0
   16628:	strne	r0, [r1, #16]
   1662c:	sub	r1, r4, #127	; 0x7f
   16630:	add	r0, r4, #1
   16634:	cmp	r1, #32
   16638:	mov	r4, r0
   1663c:	bne	1660c <__assert_fail@plt+0x4f0c>
   16640:	mov	r4, #160	; 0xa0
   16644:	mov	r5, #1
   16648:	mov	r0, r4
   1664c:	bl	1161c <btowc@plt>
   16650:	cmn	r0, #1
   16654:	ldrne	r1, [r6, #60]	; 0x3c
   16658:	subne	r0, r4, #160	; 0xa0
   1665c:	ldrne	r2, [r1, #20]
   16660:	orrne	r0, r2, r5, lsl r0
   16664:	strne	r0, [r1, #20]
   16668:	sub	r1, r4, #159	; 0x9f
   1666c:	add	r0, r4, #1
   16670:	cmp	r1, #32
   16674:	mov	r4, r0
   16678:	bne	16648 <__assert_fail@plt+0x4f48>
   1667c:	mov	r4, #192	; 0xc0
   16680:	mov	r5, #1
   16684:	mov	r0, r4
   16688:	bl	1161c <btowc@plt>
   1668c:	cmn	r0, #1
   16690:	ldrne	r1, [r6, #60]	; 0x3c
   16694:	subne	r0, r4, #192	; 0xc0
   16698:	ldrne	r2, [r1, #24]
   1669c:	orrne	r0, r2, r5, lsl r0
   166a0:	strne	r0, [r1, #24]
   166a4:	sub	r1, r4, #191	; 0xbf
   166a8:	add	r0, r4, #1
   166ac:	cmp	r1, #32
   166b0:	mov	r4, r0
   166b4:	bne	16684 <__assert_fail@plt+0x4f84>
   166b8:	mov	r4, #224	; 0xe0
   166bc:	mov	r5, #1
   166c0:	mov	r0, r4
   166c4:	bl	1161c <btowc@plt>
   166c8:	cmn	r0, #1
   166cc:	ldrne	r1, [r6, #60]	; 0x3c
   166d0:	subne	r0, r4, #224	; 0xe0
   166d4:	ldrne	r2, [r1, #28]
   166d8:	orrne	r0, r2, r5, lsl r0
   166dc:	strne	r0, [r1, #28]
   166e0:	sub	r1, r4, #223	; 0xdf
   166e4:	add	r0, r4, #1
   166e8:	cmp	r1, #32
   166ec:	mov	r4, r0
   166f0:	bne	166c0 <__assert_fail@plt+0x4fc0>
   166f4:	b	16704 <__assert_fail@plt+0x5004>
   166f8:	movw	r0, #49044	; 0xbf94
   166fc:	movt	r0, #2
   16700:	str	r0, [r6, #60]	; 0x3c
   16704:	ldr	r0, [r6]
   16708:	cmp	r0, #0
   1670c:	ldrne	r0, [r6, #32]
   16710:	cmpne	r0, #0
   16714:	bne	16740 <__assert_fail@plt+0x5040>
   16718:	mov	r4, #12
   1671c:	mov	r0, r6
   16720:	str	r4, [fp, #-52]	; 0xffffffcc
   16724:	bl	185cc <__assert_fail@plt+0x6ecc>
   16728:	mov	r0, #0
   1672c:	str	r0, [r9]
   16730:	str	r0, [r9, #4]
   16734:	mov	r0, r4
   16738:	sub	sp, fp, #28
   1673c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16740:	movw	r0, #0
   16744:	movw	r1, #0
   16748:	mov	r4, #0
   1674c:	movt	r0, #0
   16750:	movt	r1, #0
   16754:	str	r4, [fp, #-52]	; 0xffffffcc
   16758:	orrs	r0, r1, r0
   1675c:	str	r0, [sp, #8]
   16760:	beq	16778 <__assert_fail@plt+0x5078>
   16764:	add	r0, r6, #136	; 0x88
   16768:	mov	r1, #0
   1676c:	bl	11460 <pthread_mutex_init@plt>
   16770:	cmp	r0, #0
   16774:	bne	16718 <__assert_fail@plt+0x5018>
   16778:	add	r1, sp, #32
   1677c:	vmov.i32	q8, #0	; 0x00000000
   16780:	str	r9, [sp, #16]
   16784:	ldr	r9, [r9, #20]
   16788:	mov	r5, r8
   1678c:	add	r0, r1, #64	; 0x40
   16790:	vst1.32	{d16-d17}, [r0]
   16794:	add	r0, r1, #52	; 0x34
   16798:	vst1.32	{d16-d17}, [r0]
   1679c:	add	r0, r1, #36	; 0x24
   167a0:	vst1.32	{d16-d17}, [r0]
   167a4:	add	r0, r1, #20
   167a8:	vst1.32	{d16-d17}, [r0]
   167ac:	add	r0, r1, #4
   167b0:	add	r1, r1, #44	; 0x2c
   167b4:	vst1.32	{d16-d17}, [r0]
   167b8:	str	r8, [sp, #32]
   167bc:	ubfx	r0, sl, #22, #1
   167c0:	str	sl, [sp, #24]
   167c4:	vdup.32	q8, r7
   167c8:	str	r6, [sp, #20]
   167cc:	strb	r0, [sp, #104]	; 0x68
   167d0:	and	r0, sl, #4194304	; 0x400000
   167d4:	str	r9, [sp, #96]	; 0x60
   167d8:	orrs	sl, r0, r9
   167dc:	str	r0, [sp, #12]
   167e0:	movwne	sl, #1
   167e4:	cmp	r7, #1
   167e8:	strb	sl, [sp, #107]	; 0x6b
   167ec:	ldr	r0, [r6, #92]	; 0x5c
   167f0:	str	r0, [sp, #112]	; 0x70
   167f4:	ldrb	r2, [r6, #88]	; 0x58
   167f8:	vst1.32	{d16-d17}, [r1]
   167fc:	ubfx	r1, r2, #3, #1
   16800:	strb	r1, [sp, #106]	; 0x6a
   16804:	ubfx	r1, r2, #2, #1
   16808:	strb	r1, [sp, #105]	; 0x69
   1680c:	blt	16880 <__assert_fail@plt+0x5180>
   16810:	ldr	r6, [sp, #28]
   16814:	cmp	r0, #2
   16818:	blt	16840 <__assert_fail@plt+0x5140>
   1681c:	mov	r8, #12
   16820:	cmn	r6, #-1073741823	; 0xc0000001
   16824:	bhi	16d4c <__assert_fail@plt+0x564c>
   16828:	lsl	r1, r6, #2
   1682c:	mov	r0, #0
   16830:	bl	2aab4 <__assert_fail@plt+0x193b4>
   16834:	cmp	r0, #0
   16838:	beq	16d4c <__assert_fail@plt+0x564c>
   1683c:	str	r0, [sp, #40]	; 0x28
   16840:	cmp	sl, #0
   16844:	mov	r4, #0
   16848:	mov	sl, #0
   1684c:	beq	16870 <__assert_fail@plt+0x5170>
   16850:	mov	r0, #0
   16854:	mov	r1, r6
   16858:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1685c:	cmp	r0, #0
   16860:	beq	16d48 <__assert_fail@plt+0x5648>
   16864:	mov	r4, r0
   16868:	mov	sl, #1
   1686c:	str	r0, [sp, #36]	; 0x24
   16870:	ldr	r0, [sp, #20]
   16874:	str	r6, [sp, #68]	; 0x44
   16878:	ldr	r0, [r0, #92]	; 0x5c
   1687c:	b	16884 <__assert_fail@plt+0x5184>
   16880:	mov	r6, #0
   16884:	ldr	r1, [sp, #12]
   16888:	cmp	sl, #0
   1688c:	moveq	r4, r5
   16890:	str	r4, [sp, #36]	; 0x24
   16894:	cmp	r1, #0
   16898:	beq	1697c <__assert_fail@plt+0x527c>
   1689c:	cmp	r0, #2
   168a0:	blt	16994 <__assert_fail@plt+0x5294>
   168a4:	add	r0, sp, #32
   168a8:	bl	1b770 <__assert_fail@plt+0xa070>
   168ac:	ldr	r9, [sp, #20]
   168b0:	cmp	r0, #0
   168b4:	bne	16974 <__assert_fail@plt+0x5274>
   168b8:	add	sl, sp, #32
   168bc:	ldr	r0, [sp, #64]	; 0x40
   168c0:	cmp	r0, r7
   168c4:	bge	16a90 <__assert_fail@plt+0x5390>
   168c8:	ldr	r0, [r9, #92]	; 0x5c
   168cc:	ldr	r2, [sp, #60]	; 0x3c
   168d0:	ldr	r1, [sp, #68]	; 0x44
   168d4:	add	r0, r0, r2
   168d8:	cmp	r1, r0
   168dc:	bgt	16a90 <__assert_fail@plt+0x5390>
   168e0:	ldr	r0, [sp, #112]	; 0x70
   168e4:	lsl	r6, r1, #1
   168e8:	cmp	r0, #2
   168ec:	blt	1693c <__assert_fail@plt+0x523c>
   168f0:	mov	r8, #12
   168f4:	cmn	r6, #-1073741823	; 0xc0000001
   168f8:	bhi	16d4c <__assert_fail@plt+0x564c>
   168fc:	ldr	r0, [sp, #40]	; 0x28
   16900:	lsl	r4, r1, #3
   16904:	mov	r1, r4
   16908:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1690c:	cmp	r0, #0
   16910:	beq	16d4c <__assert_fail@plt+0x564c>
   16914:	str	r0, [sp, #40]	; 0x28
   16918:	ldr	r0, [sp, #44]	; 0x2c
   1691c:	cmp	r0, #0
   16920:	beq	1693c <__assert_fail@plt+0x523c>
   16924:	mov	r1, r4
   16928:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1692c:	cmp	r0, #0
   16930:	beq	16d4c <__assert_fail@plt+0x564c>
   16934:	ldr	r9, [sp, #20]
   16938:	str	r0, [sp, #44]	; 0x2c
   1693c:	ldrb	r0, [sp, #107]	; 0x6b
   16940:	cmp	r0, #0
   16944:	beq	16960 <__assert_fail@plt+0x5260>
   16948:	ldr	r0, [sp, #36]	; 0x24
   1694c:	mov	r1, r6
   16950:	bl	2aab4 <__assert_fail@plt+0x193b4>
   16954:	cmp	r0, #0
   16958:	beq	16d48 <__assert_fail@plt+0x5648>
   1695c:	str	r0, [sp, #36]	; 0x24
   16960:	mov	r0, sl
   16964:	str	r6, [sp, #68]	; 0x44
   16968:	bl	1b770 <__assert_fail@plt+0xa070>
   1696c:	cmp	r0, #0
   16970:	beq	168bc <__assert_fail@plt+0x51bc>
   16974:	mov	r8, r0
   16978:	b	16d4c <__assert_fail@plt+0x564c>
   1697c:	cmp	r0, #2
   16980:	blt	16a00 <__assert_fail@plt+0x5300>
   16984:	add	r0, sp, #32
   16988:	bl	1be30 <__assert_fail@plt+0xa730>
   1698c:	ldr	r9, [sp, #20]
   16990:	b	16a90 <__assert_fail@plt+0x5390>
   16994:	cmp	r6, r7
   16998:	movgt	r6, r7
   1699c:	cmp	r6, #1
   169a0:	blt	16a6c <__assert_fail@plt+0x536c>
   169a4:	mov	r0, #0
   169a8:	mov	r4, #0
   169ac:	b	169bc <__assert_fail@plt+0x52bc>
   169b0:	ldr	r5, [sp, #32]
   169b4:	ldr	r0, [sp, #56]	; 0x38
   169b8:	ldr	r9, [sp, #96]	; 0x60
   169bc:	add	r0, r5, r0
   169c0:	cmp	r9, #0
   169c4:	ldrb	r5, [r0, r4]
   169c8:	ldrbne	r5, [r9, r5]
   169cc:	add	r0, r5, #128	; 0x80
   169d0:	lsr	r0, r0, #7
   169d4:	cmp	r0, #2
   169d8:	bhi	169e8 <__assert_fail@plt+0x52e8>
   169dc:	bl	11580 <__ctype_toupper_loc@plt>
   169e0:	ldr	r0, [r0]
   169e4:	ldr	r5, [r0, r5, lsl #2]
   169e8:	ldr	r0, [sp, #36]	; 0x24
   169ec:	strb	r5, [r0, r4]
   169f0:	add	r4, r4, #1
   169f4:	cmp	r4, r6
   169f8:	blt	169b0 <__assert_fail@plt+0x52b0>
   169fc:	b	16a70 <__assert_fail@plt+0x5370>
   16a00:	cmp	r9, #0
   16a04:	beq	16a70 <__assert_fail@plt+0x5370>
   16a08:	cmp	r6, r7
   16a0c:	movgt	r6, r7
   16a10:	cmp	r6, #1
   16a14:	blt	16a80 <__assert_fail@plt+0x5380>
   16a18:	ldrb	r0, [r5]
   16a1c:	cmp	r6, #1
   16a20:	ldrb	r0, [r9, r0]
   16a24:	ldr	r9, [sp, #20]
   16a28:	strb	r0, [r4]
   16a2c:	mov	r0, #1
   16a30:	beq	16a88 <__assert_fail@plt+0x5388>
   16a34:	mov	r0, #1
   16a38:	ldr	r1, [sp, #32]
   16a3c:	ldr	r3, [sp, #56]	; 0x38
   16a40:	ldr	r7, [sp, #96]	; 0x60
   16a44:	ldr	r2, [sp, #36]	; 0x24
   16a48:	add	r1, r1, r3
   16a4c:	ldrb	r1, [r1, r0]
   16a50:	ldrb	r1, [r7, r1]
   16a54:	strb	r1, [r2, r0]
   16a58:	add	r0, r0, #1
   16a5c:	cmp	r0, r6
   16a60:	blt	16a38 <__assert_fail@plt+0x5338>
   16a64:	mov	r0, r6
   16a68:	b	16a88 <__assert_fail@plt+0x5388>
   16a6c:	mov	r6, #0
   16a70:	ldr	r9, [sp, #20]
   16a74:	str	r6, [sp, #64]	; 0x40
   16a78:	str	r6, [sp, #60]	; 0x3c
   16a7c:	b	16a90 <__assert_fail@plt+0x5390>
   16a80:	ldr	r9, [sp, #20]
   16a84:	mov	r0, #0
   16a88:	str	r0, [sp, #64]	; 0x40
   16a8c:	str	r0, [sp, #60]	; 0x3c
   16a90:	ldr	sl, [sp, #16]
   16a94:	mov	r5, #0
   16a98:	ldr	r4, [sp, #24]
   16a9c:	sub	r8, fp, #48	; 0x30
   16aa0:	add	r6, sp, #32
   16aa4:	str	r5, [fp, #-52]	; 0xffffffcc
   16aa8:	mov	r0, r8
   16aac:	mov	r1, r6
   16ab0:	str	r5, [sl, #24]
   16ab4:	orr	r2, r4, #8388608	; 0x800000
   16ab8:	ldr	r7, [sl]
   16abc:	str	r4, [r7, #128]	; 0x80
   16ac0:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   16ac4:	ldr	r1, [sp, #72]	; 0x48
   16ac8:	mov	r2, r8
   16acc:	mov	r3, r4
   16ad0:	str	r5, [sp]
   16ad4:	add	r0, r1, r0
   16ad8:	mov	r1, sl
   16adc:	str	r0, [sp, #72]	; 0x48
   16ae0:	sub	r0, fp, #52	; 0x34
   16ae4:	str	r0, [sp, #4]
   16ae8:	mov	r0, r6
   16aec:	bl	1c020 <__assert_fail@plt+0xa920>
   16af0:	mov	r4, r0
   16af4:	cmp	r0, #0
   16af8:	bne	16b08 <__assert_fail@plt+0x5408>
   16afc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16b00:	cmp	r0, #0
   16b04:	bne	16de4 <__assert_fail@plt+0x56e4>
   16b08:	ldr	r1, [r7, #64]	; 0x40
   16b0c:	cmp	r1, #31
   16b10:	beq	16d7c <__assert_fail@plt+0x567c>
   16b14:	ldr	r0, [r7, #56]	; 0x38
   16b18:	add	r2, r1, #1
   16b1c:	add	r0, r0, r1, lsl #5
   16b20:	mov	r1, #0
   16b24:	vmov.i32	q8, #0	; 0x00000000
   16b28:	str	r2, [r7, #64]	; 0x40
   16b2c:	add	r6, r0, #4
   16b30:	mov	r2, #2
   16b34:	str	r1, [r0, #20]
   16b38:	str	r1, [r0, #24]
   16b3c:	str	r2, [r0, #28]
   16b40:	mov	r0, #28
   16b44:	mov	r1, r6
   16b48:	vst1.32	{d16-d17}, [r1], r0
   16b4c:	mvn	r0, #0
   16b50:	str	r0, [r1]
   16b54:	cmp	r4, #0
   16b58:	mov	r0, r6
   16b5c:	beq	16bb0 <__assert_fail@plt+0x54b0>
   16b60:	ldr	r1, [r7, #64]	; 0x40
   16b64:	cmp	r1, #31
   16b68:	beq	16db4 <__assert_fail@plt+0x56b4>
   16b6c:	ldr	r0, [r7, #56]	; 0x38
   16b70:	add	r2, r1, #1
   16b74:	add	r0, r0, r1, lsl #5
   16b78:	mov	r1, #0
   16b7c:	mvn	r3, #0
   16b80:	cmp	r6, #0
   16b84:	str	r2, [r7, #64]	; 0x40
   16b88:	str	r1, [r0, #4]!
   16b8c:	mov	r2, #16
   16b90:	add	ip, r0, #20
   16b94:	stmib	r0, {r4, r6}
   16b98:	str	r1, [r0, #12]
   16b9c:	str	r1, [r0, #16]
   16ba0:	stm	ip, {r1, r2, r3}
   16ba4:	str	r0, [r4]
   16ba8:	beq	16ddc <__assert_fail@plt+0x56dc>
   16bac:	str	r0, [r6]
   16bb0:	cmp	r6, #0
   16bb4:	cmpne	r0, #0
   16bb8:	beq	16ddc <__assert_fail@plt+0x56dc>
   16bbc:	str	r0, [r9, #52]	; 0x34
   16bc0:	ldr	r8, [sl]
   16bc4:	ldr	r0, [r8, #4]
   16bc8:	lsl	r0, r0, #2
   16bcc:	bl	2aa84 <__assert_fail@plt+0x19384>
   16bd0:	str	r0, [r8, #12]
   16bd4:	ldr	r0, [r8, #4]
   16bd8:	lsl	r0, r0, #2
   16bdc:	bl	2aa84 <__assert_fail@plt+0x19384>
   16be0:	str	r0, [r8, #16]
   16be4:	ldr	r0, [r8, #4]
   16be8:	add	r0, r0, r0, lsl #1
   16bec:	lsl	r0, r0, #2
   16bf0:	bl	2aa84 <__assert_fail@plt+0x19384>
   16bf4:	str	r0, [r8, #20]
   16bf8:	ldr	r0, [r8, #4]
   16bfc:	add	r0, r0, r0, lsl #1
   16c00:	lsl	r0, r0, #2
   16c04:	bl	2aa84 <__assert_fail@plt+0x19384>
   16c08:	str	r0, [r8, #24]
   16c0c:	ldr	r1, [r8, #12]
   16c10:	cmp	r1, #0
   16c14:	ldrne	r1, [r8, #16]
   16c18:	cmpne	r1, #0
   16c1c:	beq	16c30 <__assert_fail@plt+0x5530>
   16c20:	cmp	r0, #0
   16c24:	ldrne	r0, [r8, #20]
   16c28:	cmpne	r0, #0
   16c2c:	bne	16cdc <__assert_fail@plt+0x55dc>
   16c30:	mov	r0, #12
   16c34:	str	r0, [fp, #-52]	; 0xffffffcc
   16c38:	ldr	r9, [sp, #20]
   16c3c:	ldr	r4, [sl]
   16c40:	ldr	r0, [r4, #56]	; 0x38
   16c44:	cmp	r0, #0
   16c48:	beq	16c60 <__assert_fail@plt+0x5560>
   16c4c:	ldr	r5, [r0]
   16c50:	bl	13de4 <__assert_fail@plt+0x26e4>
   16c54:	cmp	r5, #0
   16c58:	mov	r0, r5
   16c5c:	bne	16c4c <__assert_fail@plt+0x554c>
   16c60:	mov	r0, #31
   16c64:	mov	r5, #0
   16c68:	str	r0, [r4, #64]	; 0x40
   16c6c:	str	r5, [r4, #52]	; 0x34
   16c70:	str	r5, [r4, #56]	; 0x38
   16c74:	ldr	r0, [r4, #16]
   16c78:	bl	13de4 <__assert_fail@plt+0x26e4>
   16c7c:	str	r5, [r4, #16]
   16c80:	ldr	r0, [sp, #40]	; 0x28
   16c84:	bl	13de4 <__assert_fail@plt+0x26e4>
   16c88:	ldr	r0, [sp, #44]	; 0x2c
   16c8c:	bl	13de4 <__assert_fail@plt+0x26e4>
   16c90:	ldrb	r0, [sp, #107]	; 0x6b
   16c94:	cmp	r0, #0
   16c98:	beq	16ca4 <__assert_fail@plt+0x55a4>
   16c9c:	ldr	r0, [sp, #36]	; 0x24
   16ca0:	bl	13de4 <__assert_fail@plt+0x26e4>
   16ca4:	ldr	r0, [sp, #8]
   16ca8:	cmp	r0, #0
   16cac:	beq	16cb8 <__assert_fail@plt+0x55b8>
   16cb0:	add	r0, r9, #136	; 0x88
   16cb4:	bl	113f4 <pthread_mutex_destroy@plt>
   16cb8:	mov	r0, r9
   16cbc:	bl	185cc <__assert_fail@plt+0x6ecc>
   16cc0:	mov	r0, #0
   16cc4:	str	r0, [sl]
   16cc8:	str	r0, [sl, #4]
   16ccc:	ldr	r4, [fp, #-52]	; 0xffffffcc
   16cd0:	mov	r0, r4
   16cd4:	sub	sp, fp, #28
   16cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cdc:	ldr	r0, [sl, #24]
   16ce0:	lsl	r0, r0, #2
   16ce4:	bl	2aa84 <__assert_fail@plt+0x19384>
   16ce8:	cmp	r0, #0
   16cec:	str	r0, [r8, #132]	; 0x84
   16cf0:	str	r8, [sp, #28]
   16cf4:	beq	16d40 <__assert_fail@plt+0x5640>
   16cf8:	ldr	r1, [sl, #24]
   16cfc:	cmp	r1, #0
   16d00:	beq	16e24 <__assert_fail@plt+0x5724>
   16d04:	mov	r2, #0
   16d08:	cmp	r1, #4
   16d0c:	bcc	16e14 <__assert_fail@plt+0x5714>
   16d10:	add	r3, pc, #984	; 0x3d8
   16d14:	bic	r2, r1, #3
   16d18:	vmov.i32	q8, #4	; 0x00000004
   16d1c:	mov	r7, r0
   16d20:	vld1.64	{d18-d19}, [r3 :128]
   16d24:	mov	r3, r2
   16d28:	vadd.i32	q10, q9, q8
   16d2c:	vst1.32	{d18-d19}, [r7]!
   16d30:	subs	r3, r3, #4
   16d34:	vorr	q9, q10, q10
   16d38:	bne	16d28 <__assert_fail@plt+0x5628>
   16d3c:	b	16e1c <__assert_fail@plt+0x571c>
   16d40:	add	r8, r8, #52	; 0x34
   16d44:	b	17004 <__assert_fail@plt+0x5904>
   16d48:	mov	r8, #12
   16d4c:	ldr	sl, [sp, #16]
   16d50:	str	r8, [fp, #-52]	; 0xffffffcc
   16d54:	b	16c38 <__assert_fail@plt+0x5538>
   16d58:	mov	r0, r6
   16d5c:	mov	r1, #160	; 0xa0
   16d60:	mov	r4, #160	; 0xa0
   16d64:	bl	2aab4 <__assert_fail@plt+0x193b4>
   16d68:	cmp	r0, #0
   16d6c:	beq	16da4 <__assert_fail@plt+0x56a4>
   16d70:	mov	r6, r0
   16d74:	stm	r9, {r0, r4}
   16d78:	b	163cc <__assert_fail@plt+0x4ccc>
   16d7c:	mov	r0, #996	; 0x3e4
   16d80:	bl	2aa84 <__assert_fail@plt+0x19384>
   16d84:	cmp	r0, #0
   16d88:	beq	16e00 <__assert_fail@plt+0x5700>
   16d8c:	ldr	r1, [r7, #56]	; 0x38
   16d90:	str	r1, [r0]
   16d94:	mov	r1, #0
   16d98:	str	r1, [r7, #64]	; 0x40
   16d9c:	str	r0, [r7, #56]	; 0x38
   16da0:	b	16b18 <__assert_fail@plt+0x5418>
   16da4:	mov	r4, #12
   16da8:	mov	r0, r4
   16dac:	sub	sp, fp, #28
   16db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16db4:	mov	r0, #996	; 0x3e4
   16db8:	bl	2aa84 <__assert_fail@plt+0x19384>
   16dbc:	cmp	r0, #0
   16dc0:	beq	16ddc <__assert_fail@plt+0x56dc>
   16dc4:	ldr	r1, [r7, #56]	; 0x38
   16dc8:	str	r1, [r0]
   16dcc:	mov	r1, #0
   16dd0:	str	r1, [r7, #64]	; 0x40
   16dd4:	str	r0, [r7, #56]	; 0x38
   16dd8:	b	16b70 <__assert_fail@plt+0x5470>
   16ddc:	mov	r0, #12
   16de0:	str	r0, [fp, #-52]	; 0xffffffcc
   16de4:	mov	r0, #0
   16de8:	str	r0, [r9, #52]	; 0x34
   16dec:	ldr	r4, [sl]
   16df0:	ldr	r0, [r4, #56]	; 0x38
   16df4:	cmp	r0, #0
   16df8:	bne	16c4c <__assert_fail@plt+0x554c>
   16dfc:	b	16c60 <__assert_fail@plt+0x5560>
   16e00:	mov	r6, #0
   16e04:	cmp	r4, #0
   16e08:	mov	r0, r6
   16e0c:	bne	16b60 <__assert_fail@plt+0x5460>
   16e10:	b	16bb0 <__assert_fail@plt+0x54b0>
   16e14:	str	r2, [r0, r2, lsl #2]
   16e18:	add	r2, r2, #1
   16e1c:	cmp	r1, r2
   16e20:	bne	16e14 <__assert_fail@plt+0x5714>
   16e24:	ldr	r2, [r8, #52]!	; 0x34
   16e28:	ldrb	r1, [r2, #24]
   16e2c:	cmp	r1, #17
   16e30:	beq	16e60 <__assert_fail@plt+0x5760>
   16e34:	cmp	r1, #4
   16e38:	bne	16eb4 <__assert_fail@plt+0x57b4>
   16e3c:	ldr	r1, [r2, #20]
   16e40:	ldr	r7, [sp, #28]
   16e44:	mov	r3, #1
   16e48:	ldr	r0, [r0, r1, lsl #2]
   16e4c:	str	r0, [r2, #20]
   16e50:	ldr	r1, [r7, #80]	; 0x50
   16e54:	orr	r0, r1, r3, lsl r0
   16e58:	str	r0, [r7, #80]	; 0x50
   16e5c:	b	16eb4 <__assert_fail@plt+0x57b4>
   16e60:	ldr	r1, [r2, #4]
   16e64:	cmp	r1, #0
   16e68:	beq	16eb4 <__assert_fail@plt+0x57b4>
   16e6c:	ldrb	r3, [r1, #24]
   16e70:	cmp	r3, #17
   16e74:	bne	16eb4 <__assert_fail@plt+0x57b4>
   16e78:	ldr	r3, [r1, #4]
   16e7c:	ldr	r1, [r1, #20]
   16e80:	cmp	r3, #0
   16e84:	str	r3, [r2, #4]
   16e88:	strne	r2, [r3]
   16e8c:	cmp	r1, #31
   16e90:	ldr	r3, [r2, #20]
   16e94:	ldr	r3, [r0, r3, lsl #2]
   16e98:	str	r3, [r0, r1, lsl #2]
   16e9c:	bgt	16eb4 <__assert_fail@plt+0x57b4>
   16ea0:	ldr	r7, [sp, #28]
   16ea4:	mov	r3, #1
   16ea8:	ldr	r0, [r7, #80]	; 0x50
   16eac:	bic	r0, r0, r3, lsl r1
   16eb0:	b	16e58 <__assert_fail@plt+0x5758>
   16eb4:	mov	r0, #1
   16eb8:	b	16edc <__assert_fail@plt+0x57dc>
   16ebc:	ldr	r2, [r7, #20]
   16ec0:	ldr	r3, [sp, #28]
   16ec4:	ldr	r1, [r1, r2, lsl #2]
   16ec8:	str	r1, [r7, #20]
   16ecc:	ldr	r2, [r3, #80]	; 0x50
   16ed0:	orr	r1, r2, r0, lsl r1
   16ed4:	mov	r2, r7
   16ed8:	str	r1, [r3, #80]	; 0x50
   16edc:	ldr	r7, [r2, #4]
   16ee0:	cmp	r7, #0
   16ee4:	bne	16f14 <__assert_fail@plt+0x5814>
   16ee8:	mov	r3, #0
   16eec:	ldr	r7, [r2, #8]
   16ef0:	mov	r1, r2
   16ef4:	cmp	r7, r3
   16ef8:	cmpne	r7, #0
   16efc:	bne	16f14 <__assert_fail@plt+0x5814>
   16f00:	ldr	r2, [r1]
   16f04:	mov	r3, r1
   16f08:	cmp	r2, #0
   16f0c:	bne	16eec <__assert_fail@plt+0x57ec>
   16f10:	b	16fb0 <__assert_fail@plt+0x58b0>
   16f14:	ldrb	r1, [r7, #24]
   16f18:	cmp	r1, #17
   16f1c:	beq	16f44 <__assert_fail@plt+0x5844>
   16f20:	cmp	r1, #4
   16f24:	mov	r2, r7
   16f28:	bne	16edc <__assert_fail@plt+0x57dc>
   16f2c:	ldr	r1, [sp, #28]
   16f30:	mov	r2, r7
   16f34:	ldr	r1, [r1, #132]	; 0x84
   16f38:	cmp	r1, #0
   16f3c:	beq	16edc <__assert_fail@plt+0x57dc>
   16f40:	b	16ebc <__assert_fail@plt+0x57bc>
   16f44:	ldr	r3, [r7, #4]
   16f48:	mov	r2, r7
   16f4c:	cmp	r3, #0
   16f50:	beq	16edc <__assert_fail@plt+0x57dc>
   16f54:	ldrb	r1, [r3, #24]
   16f58:	mov	r2, r7
   16f5c:	cmp	r1, #17
   16f60:	bne	16edc <__assert_fail@plt+0x57dc>
   16f64:	ldr	r1, [r3, #4]
   16f68:	ldr	r2, [sp, #28]
   16f6c:	ldr	r3, [r3, #20]
   16f70:	cmp	r1, #0
   16f74:	str	r1, [r7, #4]
   16f78:	strne	r7, [r1]
   16f7c:	cmp	r3, #31
   16f80:	ldr	r1, [r7, #20]
   16f84:	ldr	r2, [r2, #132]	; 0x84
   16f88:	ldr	r1, [r2, r1, lsl #2]
   16f8c:	str	r1, [r2, r3, lsl #2]
   16f90:	mov	r2, r7
   16f94:	bgt	16edc <__assert_fail@plt+0x57dc>
   16f98:	ldr	r2, [sp, #28]
   16f9c:	ldr	r1, [r2, #80]	; 0x50
   16fa0:	bic	r1, r1, r0, lsl r3
   16fa4:	str	r1, [r2, #80]	; 0x50
   16fa8:	mov	r2, r7
   16fac:	b	16edc <__assert_fail@plt+0x57dc>
   16fb0:	ldr	r1, [sl, #24]
   16fb4:	cmp	r1, #0
   16fb8:	beq	16fec <__assert_fail@plt+0x58ec>
   16fbc:	ldr	r0, [sp, #28]
   16fc0:	mov	r2, #0
   16fc4:	ldr	r0, [r0, #132]	; 0x84
   16fc8:	ldr	r3, [r0, r2, lsl #2]
   16fcc:	cmp	r2, r3
   16fd0:	bne	16fe0 <__assert_fail@plt+0x58e0>
   16fd4:	add	r2, r2, #1
   16fd8:	cmp	r2, r1
   16fdc:	bcc	16fc8 <__assert_fail@plt+0x58c8>
   16fe0:	cmp	r2, r1
   16fe4:	beq	16ff4 <__assert_fail@plt+0x58f4>
   16fe8:	b	17004 <__assert_fail@plt+0x5904>
   16fec:	ldr	r0, [sp, #28]
   16ff0:	ldr	r0, [r0, #132]	; 0x84
   16ff4:	bl	13de4 <__assert_fail@plt+0x26e4>
   16ff8:	ldr	r1, [sp, #28]
   16ffc:	mov	r0, #0
   17000:	str	r0, [r1, #132]	; 0x84
   17004:	ldr	r0, [r8]
   17008:	mov	r7, #0
   1700c:	sub	r9, fp, #48	; 0x30
   17010:	mov	r4, r0
   17014:	ldr	r0, [r0, #4]
   17018:	cmp	r0, #0
   1701c:	bne	17010 <__assert_fail@plt+0x5910>
   17020:	ldr	r0, [r4, #8]
   17024:	cmp	r0, #0
   17028:	bne	17010 <__assert_fail@plt+0x5910>
   1702c:	mov	r3, #0
   17030:	cmp	r3, #0
   17034:	str	r7, [fp, #-48]	; 0xffffffd0
   17038:	beq	17088 <__assert_fail@plt+0x5988>
   1703c:	ldrb	r0, [r3, #24]
   17040:	cmp	r0, #17
   17044:	bne	17088 <__assert_fail@plt+0x5988>
   17048:	ldrb	r2, [sl, #28]
   1704c:	ldr	r1, [sl]
   17050:	mov	r0, r9
   17054:	bl	20928 <__assert_fail@plt+0xf228>
   17058:	cmp	r0, #0
   1705c:	str	r0, [r4, #4]
   17060:	strne	r4, [r0]
   17064:	ldr	r3, [r4, #8]
   17068:	cmp	r3, #0
   1706c:	bne	17094 <__assert_fail@plt+0x5994>
   17070:	b	170bc <__assert_fail@plt+0x59bc>
   17074:	ldr	r3, [r1, #4]
   17078:	mov	r4, r1
   1707c:	cmp	r3, #0
   17080:	str	r7, [fp, #-48]	; 0xffffffd0
   17084:	bne	1703c <__assert_fail@plt+0x593c>
   17088:	ldr	r3, [r4, #8]
   1708c:	cmp	r3, #0
   17090:	beq	170bc <__assert_fail@plt+0x59bc>
   17094:	ldrb	r0, [r3, #24]
   17098:	cmp	r0, #17
   1709c:	bne	170bc <__assert_fail@plt+0x59bc>
   170a0:	ldrb	r2, [sl, #28]
   170a4:	ldr	r1, [sl]
   170a8:	mov	r0, r9
   170ac:	bl	20928 <__assert_fail@plt+0xf228>
   170b0:	cmp	r0, #0
   170b4:	str	r0, [r4, #8]
   170b8:	strne	r4, [r0]
   170bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   170c0:	cmp	r0, #0
   170c4:	bne	16c34 <__assert_fail@plt+0x5534>
   170c8:	ldr	r1, [r4]
   170cc:	cmp	r1, #0
   170d0:	beq	17100 <__assert_fail@plt+0x5a00>
   170d4:	ldr	r0, [r1, #8]
   170d8:	cmp	r0, r4
   170dc:	cmpne	r0, #0
   170e0:	beq	17074 <__assert_fail@plt+0x5974>
   170e4:	b	17010 <__assert_fail@plt+0x5910>
   170e8:	nop	{0}
   170ec:	nop	{0}
   170f0:	andeq	r0, r0, r0
   170f4:	andeq	r0, r0, r1
   170f8:	andeq	r0, r0, r2
   170fc:	andeq	r0, r0, r3
   17100:	ldr	r0, [sp, #28]
   17104:	ldr	r0, [r0, #52]	; 0x34
   17108:	mov	r4, r0
   1710c:	ldr	r0, [r0, #4]
   17110:	cmp	r0, #0
   17114:	bne	17108 <__assert_fail@plt+0x5a08>
   17118:	ldr	r0, [r4, #8]
   1711c:	cmp	r0, #0
   17120:	bne	17108 <__assert_fail@plt+0x5a08>
   17124:	ldr	r2, [r4, #24]
   17128:	uxtb	r0, r2
   1712c:	cmp	r0, #16
   17130:	bne	17174 <__assert_fail@plt+0x5a74>
   17134:	ldr	r0, [r4, #4]
   17138:	ldr	r1, [r0, #12]
   1713c:	str	r1, [r4, #12]
   17140:	ldr	r0, [r0, #28]
   17144:	str	r0, [r4, #28]
   17148:	ldr	r1, [r4]
   1714c:	cmp	r1, #0
   17150:	beq	171c4 <__assert_fail@plt+0x5ac4>
   17154:	ldr	r0, [r1, #8]
   17158:	cmp	r0, r4
   1715c:	mov	r4, r1
   17160:	beq	17124 <__assert_fail@plt+0x5a24>
   17164:	cmp	r0, #0
   17168:	mov	r4, r1
   1716c:	beq	17124 <__assert_fail@plt+0x5a24>
   17170:	b	17108 <__assert_fail@plt+0x5a08>
   17174:	str	r4, [r4, #12]
   17178:	ldr	r0, [sp, #28]
   1717c:	ldr	r1, [r4, #20]
   17180:	bl	20c10 <__assert_fail@plt+0xf510>
   17184:	cmn	r0, #1
   17188:	str	r0, [r4, #28]
   1718c:	beq	16c30 <__assert_fail@plt+0x5530>
   17190:	ldrb	r1, [r4, #24]
   17194:	cmp	r1, #12
   17198:	bne	171b8 <__assert_fail@plt+0x5ab8>
   1719c:	ldr	r1, [sp, #28]
   171a0:	ldr	r2, [r4, #20]
   171a4:	ldr	r1, [r1]
   171a8:	add	r0, r1, r0, lsl #3
   171ac:	ldr	r1, [r0, #4]
   171b0:	bfi	r1, r2, #8, #10
   171b4:	str	r1, [r0, #4]
   171b8:	ldr	r1, [r4]
   171bc:	cmp	r1, #0
   171c0:	bne	17154 <__assert_fail@plt+0x5a54>
   171c4:	ldr	r4, [r8]
   171c8:	ldrb	r0, [r4, #24]
   171cc:	cmp	r0, #16
   171d0:	beq	171ec <__assert_fail@plt+0x5aec>
   171d4:	ldr	r8, [sp, #28]
   171d8:	cmp	r0, #11
   171dc:	bne	17208 <__assert_fail@plt+0x5b08>
   171e0:	ldr	r0, [r4, #4]
   171e4:	str	r4, [r0, #16]
   171e8:	b	17228 <__assert_fail@plt+0x5b28>
   171ec:	ldmib	r4, {r0, r1}
   171f0:	ldr	r8, [sp, #28]
   171f4:	ldr	r2, [r1, #12]
   171f8:	str	r2, [r0, #16]
   171fc:	ldr	r2, [r4, #16]
   17200:	str	r2, [r1, #16]
   17204:	b	17228 <__assert_fail@plt+0x5b28>
   17208:	ldr	r0, [r4, #4]
   1720c:	cmp	r0, #0
   17210:	ldrne	r1, [r4, #16]
   17214:	strne	r1, [r0, #16]
   17218:	ldr	r1, [r4, #8]
   1721c:	cmp	r1, #0
   17220:	ldrne	r2, [r4, #16]
   17224:	strne	r2, [r1, #16]
   17228:	mov	r1, r4
   1722c:	b	1724c <__assert_fail@plt+0x5b4c>
   17230:	ldr	r3, [r1, #16]
   17234:	str	r3, [r2, #16]
   17238:	b	1724c <__assert_fail@plt+0x5b4c>
   1723c:	ldmib	r1, {r0, r2}
   17240:	ldr	r3, [r2, #12]
   17244:	str	r3, [r0, #16]
   17248:	b	17230 <__assert_fail@plt+0x5b30>
   1724c:	cmp	r0, #0
   17250:	bne	17280 <__assert_fail@plt+0x5b80>
   17254:	mov	r3, #0
   17258:	ldr	r0, [r1, #8]
   1725c:	mov	r2, r1
   17260:	cmp	r0, r3
   17264:	cmpne	r0, #0
   17268:	bne	17280 <__assert_fail@plt+0x5b80>
   1726c:	ldr	r1, [r2]
   17270:	mov	r3, r2
   17274:	cmp	r1, #0
   17278:	bne	17258 <__assert_fail@plt+0x5b58>
   1727c:	b	172c4 <__assert_fail@plt+0x5bc4>
   17280:	mov	r1, r0
   17284:	ldrb	r0, [r0, #24]
   17288:	cmp	r0, #16
   1728c:	beq	1723c <__assert_fail@plt+0x5b3c>
   17290:	cmp	r0, #11
   17294:	bne	172a4 <__assert_fail@plt+0x5ba4>
   17298:	ldr	r0, [r1, #4]
   1729c:	str	r1, [r0, #16]
   172a0:	b	1724c <__assert_fail@plt+0x5b4c>
   172a4:	ldr	r0, [r1, #4]
   172a8:	cmp	r0, #0
   172ac:	ldrne	r2, [r1, #16]
   172b0:	strne	r2, [r0, #16]
   172b4:	ldr	r2, [r1, #8]
   172b8:	cmp	r2, #0
   172bc:	beq	1724c <__assert_fail@plt+0x5b4c>
   172c0:	b	17230 <__assert_fail@plt+0x5b30>
   172c4:	mov	r0, r8
   172c8:	mov	r1, r4
   172cc:	bl	20790 <__assert_fail@plt+0xf090>
   172d0:	cmp	r0, #0
   172d4:	bne	16c34 <__assert_fail@plt+0x5534>
   172d8:	ldr	r7, [r4, #4]
   172dc:	cmp	r7, #0
   172e0:	bne	17310 <__assert_fail@plt+0x5c10>
   172e4:	mov	r1, #0
   172e8:	ldr	r7, [r4, #8]
   172ec:	mov	r0, r4
   172f0:	cmp	r7, r1
   172f4:	cmpne	r7, #0
   172f8:	bne	17310 <__assert_fail@plt+0x5c10>
   172fc:	ldr	r4, [r0]
   17300:	mov	r1, r0
   17304:	cmp	r4, #0
   17308:	bne	172e8 <__assert_fail@plt+0x5be8>
   1730c:	b	1732c <__assert_fail@plt+0x5c2c>
   17310:	mov	r0, r8
   17314:	mov	r1, r7
   17318:	bl	20790 <__assert_fail@plt+0xf090>
   1731c:	cmp	r0, #0
   17320:	mov	r4, r7
   17324:	beq	172d8 <__assert_fail@plt+0x5bd8>
   17328:	b	16c34 <__assert_fail@plt+0x5534>
   1732c:	ldr	r0, [r8, #8]
   17330:	cmp	r0, #0
   17334:	beq	173e4 <__assert_fail@plt+0x5ce4>
   17338:	mov	r5, #0
   1733c:	sub	r4, fp, #48	; 0x30
   17340:	mov	r7, #0
   17344:	ldr	r0, [r8, #24]
   17348:	add	r6, r7, r7, lsl #1
   1734c:	add	r0, r0, r6, lsl #2
   17350:	ldr	r0, [r0, #4]
   17354:	cmp	r0, #0
   17358:	beq	17364 <__assert_fail@plt+0x5c64>
   1735c:	mov	r1, r5
   17360:	b	173a4 <__assert_fail@plt+0x5ca4>
   17364:	mov	r0, r4
   17368:	mov	r1, r8
   1736c:	mov	r2, r7
   17370:	mov	r3, #1
   17374:	bl	20de8 <__assert_fail@plt+0xf6e8>
   17378:	cmp	r0, #0
   1737c:	bne	16c34 <__assert_fail@plt+0x5534>
   17380:	ldr	r0, [r8, #24]
   17384:	mov	r1, r5
   17388:	add	r0, r0, r6, lsl #2
   1738c:	ldr	r0, [r0, #4]
   17390:	cmp	r0, #0
   17394:	bne	173a4 <__assert_fail@plt+0x5ca4>
   17398:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1739c:	bl	13de4 <__assert_fail@plt+0x26e4>
   173a0:	mov	r1, #1
   173a4:	ldr	r2, [r8, #8]
   173a8:	add	r0, r7, #1
   173ac:	subs	r3, r0, r2
   173b0:	mov	r7, r3
   173b4:	movwne	r3, #1
   173b8:	movne	r7, r0
   173bc:	tst	r1, #1
   173c0:	and	r5, r1, r3
   173c4:	cmpeq	r0, r2
   173c8:	bne	17344 <__assert_fail@plt+0x5c44>
   173cc:	add	r0, r0, r0, lsl #1
   173d0:	lsl	r0, r0, #2
   173d4:	ldrb	r1, [sl, #28]
   173d8:	tst	r1, #16
   173dc:	beq	173f4 <__assert_fail@plt+0x5cf4>
   173e0:	b	1740c <__assert_fail@plt+0x5d0c>
   173e4:	mov	r0, #0
   173e8:	ldrb	r1, [sl, #28]
   173ec:	tst	r1, #16
   173f0:	bne	1740c <__assert_fail@plt+0x5d0c>
   173f4:	ldr	r1, [sp, #16]
   173f8:	ldr	r1, [r1, #24]
   173fc:	cmp	r1, #0
   17400:	ldrbne	r1, [r8, #88]	; 0x58
   17404:	tstne	r1, #1
   17408:	bne	17418 <__assert_fail@plt+0x5d18>
   1740c:	ldr	r1, [r8, #76]	; 0x4c
   17410:	cmp	r1, #0
   17414:	beq	17544 <__assert_fail@plt+0x5e44>
   17418:	bl	2aa84 <__assert_fail@plt+0x19384>
   1741c:	cmp	r0, #0
   17420:	str	r0, [r8, #28]
   17424:	beq	17a0c <__assert_fail@plt+0x630c>
   17428:	ldr	r1, [r8, #8]
   1742c:	cmp	r1, #0
   17430:	beq	17544 <__assert_fail@plt+0x5e44>
   17434:	mov	r1, #0
   17438:	str	r1, [r0]
   1743c:	str	r1, [r0, #4]
   17440:	str	r1, [r0, #8]
   17444:	ldr	r0, [r8, #8]
   17448:	cmp	r0, #2
   1744c:	bcc	1747c <__assert_fail@plt+0x5d7c>
   17450:	mov	r2, #1
   17454:	mov	r3, #12
   17458:	ldr	r0, [r8, #28]
   1745c:	add	r2, r2, #1
   17460:	str	r1, [r0, r3]!
   17464:	add	r3, r3, #12
   17468:	str	r1, [r0, #4]
   1746c:	str	r1, [r0, #8]
   17470:	ldr	r0, [r8, #8]
   17474:	cmp	r2, r0
   17478:	bcc	17458 <__assert_fail@plt+0x5d58>
   1747c:	cmp	r0, #0
   17480:	beq	17544 <__assert_fail@plt+0x5e44>
   17484:	ldr	ip, [r8, #24]
   17488:	mov	sl, #0
   1748c:	add	r9, sl, sl, lsl #1
   17490:	add	r2, ip, r9, lsl #2
   17494:	ldr	r3, [r2, #4]
   17498:	cmp	r3, #1
   1749c:	blt	17538 <__assert_fail@plt+0x5e38>
   174a0:	ldr	r1, [r2, #8]
   174a4:	mov	r6, #0
   174a8:	str	r1, [sp, #24]
   174ac:	ldr	r0, [r1, r6, lsl #2]
   174b0:	ldr	r5, [r8, #28]
   174b4:	add	r0, r0, r0, lsl #1
   174b8:	mov	r3, r5
   174bc:	ldr	r7, [r3, r0, lsl #2]!
   174c0:	mov	r4, r3
   174c4:	ldr	r2, [r4, #4]!
   174c8:	cmp	r7, r2
   174cc:	bne	1750c <__assert_fail@plt+0x5e0c>
   174d0:	mov	r1, #2
   174d4:	add	r8, r5, r0, lsl #2
   174d8:	add	r1, r1, r7, lsl #1
   174dc:	str	r1, [r3]
   174e0:	lsl	r1, r1, #2
   174e4:	ldr	r0, [r8, #8]!
   174e8:	bl	2aab4 <__assert_fail@plt+0x193b4>
   174ec:	cmp	r0, #0
   174f0:	beq	17a0c <__assert_fail@plt+0x630c>
   174f4:	str	r0, [r8]
   174f8:	ldr	r8, [sp, #28]
   174fc:	ldr	r1, [sp, #24]
   17500:	ldr	r2, [r4]
   17504:	ldr	ip, [r8, #24]
   17508:	b	17514 <__assert_fail@plt+0x5e14>
   1750c:	add	r0, r5, r0, lsl #2
   17510:	ldr	r0, [r0, #8]
   17514:	add	r3, r2, #1
   17518:	add	r6, r6, #1
   1751c:	str	r3, [r4]
   17520:	str	sl, [r0, r2, lsl #2]
   17524:	add	r0, ip, r9, lsl #2
   17528:	ldr	r0, [r0, #4]
   1752c:	cmp	r6, r0
   17530:	blt	174ac <__assert_fail@plt+0x5dac>
   17534:	ldr	r0, [r8, #8]
   17538:	add	sl, sl, #1
   1753c:	cmp	sl, r0
   17540:	bcc	1748c <__assert_fail@plt+0x5d8c>
   17544:	mov	r0, #0
   17548:	ldr	r1, [sp, #16]
   1754c:	str	r0, [fp, #-52]	; 0xffffffcc
   17550:	ldr	r0, [sp, #12]
   17554:	cmp	r0, #0
   17558:	bne	17728 <__assert_fail@plt+0x6028>
   1755c:	ldr	r0, [sp, #20]
   17560:	ldrb	r2, [r0, #88]	; 0x58
   17564:	ands	r0, r2, #4
   17568:	beq	17728 <__assert_fail@plt+0x6028>
   1756c:	ldr	r0, [r1, #20]
   17570:	cmp	r0, #0
   17574:	bne	17728 <__assert_fail@plt+0x6028>
   17578:	ldr	r0, [sp, #20]
   1757c:	mov	r9, #0
   17580:	ldr	r7, [r0, #8]
   17584:	cmp	r7, #0
   17588:	beq	176f8 <__assert_fail@plt+0x5ff8>
   1758c:	ldr	r3, [r0]
   17590:	mov	r8, #0
   17594:	mov	ip, #1
   17598:	mov	lr, #139	; 0x8b
   1759c:	mov	r6, #0
   175a0:	mov	r4, #0
   175a4:	add	r5, r3, r4, lsl #3
   175a8:	ldrb	r1, [r5, #4]
   175ac:	sub	r1, r1, #1
   175b0:	cmp	r1, #11
   175b4:	bhi	17a74 <__assert_fail@plt+0x6374>
   175b8:	add	r0, pc, #0
   175bc:	ldr	pc, [r0, r1, lsl #2]
   175c0:	andeq	r7, r1, r4, asr r6
   175c4:	strdeq	r7, [r1], -r0
   175c8:	andeq	r7, r1, r0, lsl #12
   175cc:	strdeq	r7, [r1], -r0
   175d0:	andeq	r7, r1, r8, ror r6
   175d4:	andeq	r7, r1, r8, lsr #14
   175d8:	andeq	r7, r1, r4, ror sl
   175dc:	strdeq	r7, [r1], -r0
   175e0:	strdeq	r7, [r1], -r0
   175e4:	strdeq	r7, [r1], -r0
   175e8:	strdeq	r7, [r1], -r0
   175ec:	andeq	r7, r1, r4, lsr r6
   175f0:	add	r4, r4, #1
   175f4:	cmp	r4, r7
   175f8:	bcc	175a4 <__assert_fail@plt+0x5ea4>
   175fc:	b	17688 <__assert_fail@plt+0x5f88>
   17600:	ldr	r5, [r3, r4, lsl #3]
   17604:	ldr	r0, [r5, #16]
   17608:	cmp	r0, #0
   1760c:	bne	17728 <__assert_fail@plt+0x6028>
   17610:	ldr	r0, [r5, #20]
   17614:	cmp	r0, #0
   17618:	ldreq	r0, [r5, #24]
   1761c:	cmpeq	r0, #0
   17620:	bne	17728 <__assert_fail@plt+0x6028>
   17624:	ldr	r0, [r5, #28]
   17628:	cmp	r0, #0
   1762c:	beq	175f0 <__assert_fail@plt+0x5ef0>
   17630:	b	17728 <__assert_fail@plt+0x6028>
   17634:	ldr	r0, [r3, r4, lsl #3]
   17638:	sub	r0, r0, #16
   1763c:	ror	r1, r0, #4
   17640:	cmp	r1, #7
   17644:	bhi	17728 <__assert_fail@plt+0x6028>
   17648:	tst	lr, ip, lsl r1
   1764c:	bne	175f0 <__assert_fail@plt+0x5ef0>
   17650:	b	17728 <__assert_fail@plt+0x6028>
   17654:	ldrsb	r0, [r5]
   17658:	cmp	r0, #0
   1765c:	mov	r0, #0
   17660:	movwlt	r0, #1
   17664:	orr	r6, r6, r0
   17668:	add	r4, r4, #1
   1766c:	cmp	r4, r7
   17670:	bcc	175a4 <__assert_fail@plt+0x5ea4>
   17674:	b	17688 <__assert_fail@plt+0x5f88>
   17678:	mov	r8, #1
   1767c:	add	r4, r4, #1
   17680:	cmp	r4, r7
   17684:	bcc	175a4 <__assert_fail@plt+0x5ea4>
   17688:	orr	r0, r6, r8
   1768c:	tst	r0, #1
   17690:	beq	176fc <__assert_fail@plt+0x5ffc>
   17694:	mov	r2, #0
   17698:	mov	r7, #7
   1769c:	b	176a4 <__assert_fail@plt+0x5fa4>
   176a0:	ldr	r3, [r1]
   176a4:	add	r3, r3, r2, lsl #3
   176a8:	ldr	r6, [r3, #4]
   176ac:	uxtb	r1, r6
   176b0:	cmp	r1, #5
   176b4:	beq	176d4 <__assert_fail@plt+0x5fd4>
   176b8:	cmp	r1, #1
   176bc:	bne	176dc <__assert_fail@plt+0x5fdc>
   176c0:	ldrsb	r0, [r3]
   176c4:	cmn	r0, #1
   176c8:	bicle	r0, r6, #2097152	; 0x200000
   176cc:	strle	r0, [r3, #4]
   176d0:	b	176dc <__assert_fail@plt+0x5fdc>
   176d4:	bfi	r6, r7, #0, #8
   176d8:	str	r6, [r3, #4]
   176dc:	ldr	r1, [sp, #20]
   176e0:	add	r2, r2, #1
   176e4:	ldr	r0, [r1, #8]
   176e8:	cmp	r2, r0
   176ec:	bcc	176a0 <__assert_fail@plt+0x5fa0>
   176f0:	ldrb	r2, [r1, #88]	; 0x58
   176f4:	b	176fc <__assert_fail@plt+0x5ffc>
   176f8:	mov	r8, #0
   176fc:	ldr	r3, [sp, #20]
   17700:	mov	r0, #1
   17704:	and	r1, r2, #249	; 0xf9
   17708:	str	r0, [r3, #92]	; 0x5c
   1770c:	ldr	r0, [r3, #76]	; 0x4c
   17710:	cmp	r0, #0
   17714:	movwgt	r9, #1
   17718:	orr	r0, r8, r9
   1771c:	and	r0, r0, #1
   17720:	orr	r0, r1, r0, lsl #1
   17724:	strb	r0, [r3, #88]	; 0x58
   17728:	ldr	r7, [sp, #20]
   1772c:	ldr	r1, [r7, #52]	; 0x34
   17730:	ldr	r0, [r7, #24]
   17734:	ldr	r1, [r1, #12]
   17738:	ldr	r1, [r1, #28]
   1773c:	str	r1, [r7, #72]	; 0x48
   17740:	add	r1, r1, r1, lsl #1
   17744:	add	r5, r0, r1, lsl #2
   17748:	mov	r4, r5
   1774c:	ldr	sl, [r4, #4]!
   17750:	str	sl, [fp, #-44]	; 0xffffffd4
   17754:	ldr	r0, [r4]
   17758:	cmp	r0, #1
   1775c:	blt	178b0 <__assert_fail@plt+0x61b0>
   17760:	lsl	r0, sl, #2
   17764:	str	sl, [fp, #-48]	; 0xffffffd0
   17768:	bl	2aa84 <__assert_fail@plt+0x19384>
   1776c:	cmp	r0, #0
   17770:	str	r0, [fp, #-40]	; 0xffffffd8
   17774:	beq	17a58 <__assert_fail@plt+0x6358>
   17778:	mov	r6, r0
   1777c:	ldr	r0, [r4]
   17780:	ldr	r1, [r5, #8]
   17784:	lsl	r2, r0, #2
   17788:	mov	r0, r6
   1778c:	bl	11448 <memcpy@plt>
   17790:	mov	r0, #0
   17794:	cmp	sl, #1
   17798:	str	r0, [fp, #-32]	; 0xffffffe0
   1779c:	ldrge	r0, [sp, #20]
   177a0:	ldrge	r0, [r0, #76]	; 0x4c
   177a4:	cmpge	r0, #1
   177a8:	blt	178c4 <__assert_fail@plt+0x61c4>
   177ac:	mov	r0, #0
   177b0:	sub	r8, fp, #48	; 0x30
   177b4:	mov	r9, #1
   177b8:	b	177c0 <__assert_fail@plt+0x60c0>
   177bc:	ldr	r6, [fp, #-40]	; 0xffffffd8
   177c0:	ldr	r2, [sp, #20]
   177c4:	ldr	r1, [r6, r0, lsl #2]
   177c8:	ldr	r2, [r2]
   177cc:	add	r3, r2, r1, lsl #3
   177d0:	ldrb	r3, [r3, #4]
   177d4:	cmp	r3, #4
   177d8:	bne	178a0 <__assert_fail@plt+0x61a0>
   177dc:	mov	r3, #0
   177e0:	cmp	sl, #1
   177e4:	blt	17818 <__assert_fail@plt+0x6118>
   177e8:	ldr	r5, [r6, r3, lsl #2]
   177ec:	add	r4, r2, r5, lsl #3
   177f0:	ldrb	r4, [r4, #4]
   177f4:	cmp	r4, #9
   177f8:	bne	1780c <__assert_fail@plt+0x610c>
   177fc:	ldr	r4, [r2, r1, lsl #3]
   17800:	ldr	r5, [r2, r5, lsl #3]
   17804:	cmp	r5, r4
   17808:	beq	17818 <__assert_fail@plt+0x6118>
   1780c:	add	r3, r3, #1
   17810:	cmp	r3, sl
   17814:	blt	177e8 <__assert_fail@plt+0x60e8>
   17818:	cmp	r3, sl
   1781c:	beq	178a0 <__assert_fail@plt+0x61a0>
   17820:	ldr	r2, [sp, #20]
   17824:	add	r1, r1, r1, lsl #1
   17828:	cmp	sl, #1
   1782c:	ldr	r2, [r2, #20]
   17830:	add	r1, r2, r1, lsl #2
   17834:	ldr	r1, [r1, #8]
   17838:	ldr	r1, [r1]
   1783c:	blt	17878 <__assert_fail@plt+0x6178>
   17840:	mov	r2, #0
   17844:	subs	r3, sl, #1
   17848:	beq	1786c <__assert_fail@plt+0x616c>
   1784c:	add	r5, r2, r3
   17850:	lsr	r4, r5, #1
   17854:	ldr	r7, [r6, r4, lsl #2]
   17858:	cmp	r7, r1
   1785c:	movge	r3, r4
   17860:	addlt	r2, r9, r5, lsr #1
   17864:	cmp	r2, r3
   17868:	bcc	1784c <__assert_fail@plt+0x614c>
   1786c:	ldr	r2, [r6, r2, lsl #2]
   17870:	cmp	r2, r1
   17874:	beq	178a0 <__assert_fail@plt+0x61a0>
   17878:	ldr	r0, [sp, #20]
   1787c:	add	r1, r1, r1, lsl #1
   17880:	ldr	r0, [r0, #24]
   17884:	add	r1, r0, r1, lsl #2
   17888:	mov	r0, r8
   1788c:	bl	214cc <__assert_fail@plt+0xfdcc>
   17890:	cmp	r0, #0
   17894:	bne	17a14 <__assert_fail@plt+0x6314>
   17898:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1789c:	mov	r0, #0
   178a0:	add	r0, r0, #1
   178a4:	cmp	r0, sl
   178a8:	blt	177bc <__assert_fail@plt+0x60bc>
   178ac:	b	178c4 <__assert_fail@plt+0x61c4>
   178b0:	mov	r0, #0
   178b4:	str	r0, [fp, #-44]	; 0xffffffd4
   178b8:	str	r0, [fp, #-48]	; 0xffffffd0
   178bc:	str	r0, [fp, #-40]	; 0xffffffd8
   178c0:	str	r0, [fp, #-32]	; 0xffffffe0
   178c4:	ldr	r7, [sp, #20]
   178c8:	sub	r0, fp, #32
   178cc:	sub	r2, fp, #48	; 0x30
   178d0:	mov	r3, #0
   178d4:	mov	r1, r7
   178d8:	bl	217bc <__assert_fail@plt+0x100bc>
   178dc:	ldr	r8, [sp, #16]
   178e0:	cmp	r0, #0
   178e4:	str	r0, [r7, #36]	; 0x24
   178e8:	beq	17968 <__assert_fail@plt+0x6268>
   178ec:	ldrsb	r1, [r0, #52]	; 0x34
   178f0:	cmn	r1, #1
   178f4:	ble	17908 <__assert_fail@plt+0x6208>
   178f8:	str	r0, [r7, #40]	; 0x28
   178fc:	str	r0, [r7, #44]	; 0x2c
   17900:	str	r0, [r7, #48]	; 0x30
   17904:	b	1797c <__assert_fail@plt+0x627c>
   17908:	sub	r4, fp, #32
   1790c:	sub	r6, fp, #48	; 0x30
   17910:	mov	r1, r7
   17914:	mov	r3, #1
   17918:	mov	r0, r4
   1791c:	mov	r2, r6
   17920:	bl	217bc <__assert_fail@plt+0x100bc>
   17924:	str	r0, [r7, #40]	; 0x28
   17928:	mov	r0, r4
   1792c:	mov	r1, r7
   17930:	mov	r2, r6
   17934:	mov	r3, #2
   17938:	bl	217bc <__assert_fail@plt+0x100bc>
   1793c:	str	r0, [r7, #44]	; 0x2c
   17940:	mov	r0, r4
   17944:	mov	r1, r7
   17948:	mov	r2, r6
   1794c:	mov	r3, #6
   17950:	bl	217bc <__assert_fail@plt+0x100bc>
   17954:	str	r0, [r7, #48]	; 0x30
   17958:	ldr	r1, [r7, #40]	; 0x28
   1795c:	cmp	r1, #0
   17960:	cmpne	r0, #0
   17964:	bne	17970 <__assert_fail@plt+0x6270>
   17968:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1796c:	b	17988 <__assert_fail@plt+0x6288>
   17970:	ldr	r0, [r7, #44]	; 0x2c
   17974:	cmp	r0, #0
   17978:	beq	17968 <__assert_fail@plt+0x6268>
   1797c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17980:	bl	13de4 <__assert_fail@plt+0x26e4>
   17984:	mov	r0, #0
   17988:	str	r0, [fp, #-52]	; 0xffffffcc
   1798c:	ldr	r5, [r8]
   17990:	ldr	r0, [r5, #56]	; 0x38
   17994:	cmp	r0, #0
   17998:	beq	179b0 <__assert_fail@plt+0x62b0>
   1799c:	ldr	r4, [r0]
   179a0:	bl	13de4 <__assert_fail@plt+0x26e4>
   179a4:	cmp	r4, #0
   179a8:	mov	r0, r4
   179ac:	bne	1799c <__assert_fail@plt+0x629c>
   179b0:	mov	r0, #31
   179b4:	mov	r4, #0
   179b8:	str	r0, [r5, #64]	; 0x40
   179bc:	str	r4, [r5, #52]	; 0x34
   179c0:	str	r4, [r5, #56]	; 0x38
   179c4:	ldr	r0, [r5, #16]
   179c8:	bl	13de4 <__assert_fail@plt+0x26e4>
   179cc:	str	r4, [r5, #16]
   179d0:	ldr	r0, [sp, #40]	; 0x28
   179d4:	bl	13de4 <__assert_fail@plt+0x26e4>
   179d8:	ldr	r0, [sp, #44]	; 0x2c
   179dc:	bl	13de4 <__assert_fail@plt+0x26e4>
   179e0:	ldrb	r0, [sp, #107]	; 0x6b
   179e4:	cmp	r0, #0
   179e8:	beq	179f4 <__assert_fail@plt+0x62f4>
   179ec:	ldr	r0, [sp, #36]	; 0x24
   179f0:	bl	13de4 <__assert_fail@plt+0x26e4>
   179f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   179f8:	cmp	r0, #0
   179fc:	bne	17a20 <__assert_fail@plt+0x6320>
   17a00:	mov	r0, r4
   17a04:	sub	sp, fp, #28
   17a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a0c:	ldr	sl, [sp, #16]
   17a10:	b	16c30 <__assert_fail@plt+0x5530>
   17a14:	ldr	r8, [sp, #16]
   17a18:	ldr	r7, [sp, #20]
   17a1c:	b	17988 <__assert_fail@plt+0x6288>
   17a20:	ldr	r0, [sp, #8]
   17a24:	cmp	r0, #0
   17a28:	beq	17a34 <__assert_fail@plt+0x6334>
   17a2c:	add	r0, r7, #136	; 0x88
   17a30:	bl	113f4 <pthread_mutex_destroy@plt>
   17a34:	mov	r0, r7
   17a38:	bl	185cc <__assert_fail@plt+0x6ecc>
   17a3c:	mov	r0, #0
   17a40:	str	r0, [r8]
   17a44:	str	r0, [r8, #4]
   17a48:	ldr	r4, [fp, #-52]	; 0xffffffcc
   17a4c:	mov	r0, r4
   17a50:	sub	sp, fp, #28
   17a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a58:	ldr	r8, [sp, #16]
   17a5c:	mov	r0, #0
   17a60:	str	r0, [fp, #-48]	; 0xffffffd0
   17a64:	str	r0, [fp, #-44]	; 0xffffffd4
   17a68:	mov	r0, #12
   17a6c:	str	r0, [fp, #-32]	; 0xffffffe0
   17a70:	b	17988 <__assert_fail@plt+0x6288>
   17a74:	bl	116e8 <abort@plt>
   17a78:	movw	r2, #54000	; 0xd2f0
   17a7c:	movt	r2, #3
   17a80:	ldr	r1, [r2]
   17a84:	str	r0, [r2]
   17a88:	mov	r0, r1
   17a8c:	bx	lr
   17a90:	push	{r4, r5, r6, sl, fp, lr}
   17a94:	add	fp, sp, #16
   17a98:	ldr	r5, [r0, #16]
   17a9c:	ldr	r6, [r0]
   17aa0:	mov	r4, r0
   17aa4:	mov	r1, #0
   17aa8:	mov	r2, #256	; 0x100
   17aac:	mov	r0, r5
   17ab0:	bl	11610 <memset@plt>
   17ab4:	ldr	r1, [r6, #36]	; 0x24
   17ab8:	mov	r0, r4
   17abc:	mov	r2, r5
   17ac0:	bl	17b2c <__assert_fail@plt+0x642c>
   17ac4:	ldr	r0, [r6, #36]	; 0x24
   17ac8:	ldr	r1, [r6, #40]	; 0x28
   17acc:	cmp	r0, r1
   17ad0:	beq	17ae4 <__assert_fail@plt+0x63e4>
   17ad4:	mov	r0, r4
   17ad8:	mov	r2, r5
   17adc:	bl	17b2c <__assert_fail@plt+0x642c>
   17ae0:	ldr	r0, [r6, #36]	; 0x24
   17ae4:	ldr	r1, [r6, #44]	; 0x2c
   17ae8:	cmp	r0, r1
   17aec:	beq	17b00 <__assert_fail@plt+0x6400>
   17af0:	mov	r0, r4
   17af4:	mov	r2, r5
   17af8:	bl	17b2c <__assert_fail@plt+0x642c>
   17afc:	ldr	r0, [r6, #36]	; 0x24
   17b00:	ldr	r1, [r6, #48]	; 0x30
   17b04:	cmp	r0, r1
   17b08:	beq	17b18 <__assert_fail@plt+0x6418>
   17b0c:	mov	r0, r4
   17b10:	mov	r2, r5
   17b14:	bl	17b2c <__assert_fail@plt+0x642c>
   17b18:	ldrb	r0, [r4, #28]
   17b1c:	orr	r0, r0, #8
   17b20:	strb	r0, [r4, #28]
   17b24:	mov	r0, #0
   17b28:	pop	{r4, r5, r6, sl, fp, pc}
   17b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b30:	add	fp, sp, #28
   17b34:	sub	sp, sp, #332	; 0x14c
   17b38:	ldr	r8, [r0]
   17b3c:	mov	r9, r0
   17b40:	mov	r5, r2
   17b44:	mov	r2, #0
   17b48:	str	r2, [sp, #20]
   17b4c:	ldr	r0, [r8, #92]	; 0x5c
   17b50:	cmp	r0, #1
   17b54:	ldrbeq	r0, [r9, #14]
   17b58:	ubfxeq	r0, r0, #6, #1
   17b5c:	streq	r0, [sp, #20]
   17b60:	ldr	r0, [r1, #8]
   17b64:	cmp	r0, #1
   17b68:	blt	18324 <__assert_fail@plt+0x6c24>
   17b6c:	add	r0, r5, #224	; 0xe0
   17b70:	mov	sl, #1
   17b74:	mov	r2, #0
   17b78:	str	r9, [sp, #16]
   17b7c:	str	r1, [sp, #24]
   17b80:	str	r0, [sp, #52]	; 0x34
   17b84:	add	r0, r5, #192	; 0xc0
   17b88:	str	r0, [sp, #48]	; 0x30
   17b8c:	add	r0, r5, #160	; 0xa0
   17b90:	str	r0, [sp, #44]	; 0x2c
   17b94:	add	r0, r5, #128	; 0x80
   17b98:	str	r0, [sp, #40]	; 0x28
   17b9c:	add	r0, r5, #96	; 0x60
   17ba0:	str	r0, [sp, #36]	; 0x24
   17ba4:	add	r0, r5, #64	; 0x40
   17ba8:	str	r0, [sp, #32]
   17bac:	add	r0, r5, #32
   17bb0:	str	r0, [sp, #12]
   17bb4:	add	r0, r5, #31
   17bb8:	str	r0, [sp, #8]
   17bbc:	add	r0, sp, #56	; 0x38
   17bc0:	add	r0, r0, #1
   17bc4:	str	r0, [sp, #4]
   17bc8:	ldr	r0, [r1, #12]
   17bcc:	str	r2, [sp, #28]
   17bd0:	ldr	r4, [r0, r2, lsl #2]
   17bd4:	ldr	r2, [r8]
   17bd8:	add	r0, r2, r4, lsl #3
   17bdc:	ldrb	r6, [r0, #4]
   17be0:	sub	r0, r6, #1
   17be4:	cmp	r0, #6
   17be8:	bhi	1830c <__assert_fail@plt+0x6c0c>
   17bec:	add	r1, pc, #0
   17bf0:	ldr	pc, [r1, r0, lsl #2]
   17bf4:	andeq	r7, r1, r0, lsl ip
   17bf8:	andeq	r8, r1, ip, lsr #6
   17bfc:	andeq	r7, r1, r0, lsl sp
   17c00:	andeq	r8, r1, ip, lsl #6
   17c04:	andeq	r8, r1, ip, lsr #6
   17c08:	andeq	r7, r1, r0, asr #31
   17c0c:	andeq	r8, r1, ip, lsr #6
   17c10:	ldr	r0, [sp, #20]
   17c14:	ldrb	r6, [r2, r4, lsl #3]
   17c18:	cmp	r0, #0
   17c1c:	strb	sl, [r5, r6]
   17c20:	beq	17c34 <__assert_fail@plt+0x6534>
   17c24:	bl	11574 <__ctype_tolower_loc@plt>
   17c28:	ldr	r0, [r0]
   17c2c:	ldr	r0, [r0, r6, lsl #2]
   17c30:	strb	sl, [r5, r0]
   17c34:	ldrb	r0, [r9, #14]
   17c38:	tst	r0, #64	; 0x40
   17c3c:	beq	1830c <__assert_fail@plt+0x6c0c>
   17c40:	ldr	r0, [r8, #92]	; 0x5c
   17c44:	cmp	r0, #2
   17c48:	blt	1830c <__assert_fail@plt+0x6c0c>
   17c4c:	ldr	r0, [r8]
   17c50:	add	r1, r4, #1
   17c54:	movw	r7, #1
   17c58:	add	r6, sp, #56	; 0x38
   17c5c:	movt	r7, #32
   17c60:	ldrb	r0, [r0, r4, lsl #3]
   17c64:	strb	r0, [sp, #56]	; 0x38
   17c68:	ldr	r0, [r8, #8]
   17c6c:	cmp	r1, r0
   17c70:	ldr	r0, [sp, #4]
   17c74:	bcs	17cb8 <__assert_fail@plt+0x65b8>
   17c78:	ldr	r0, [sp, #4]
   17c7c:	ldr	r1, [r8]
   17c80:	add	r3, r7, #254	; 0xfe
   17c84:	add	r1, r1, r4, lsl #3
   17c88:	ldr	r2, [r1, #12]
   17c8c:	and	r2, r2, r3
   17c90:	cmp	r2, r7
   17c94:	bne	17cb8 <__assert_fail@plt+0x65b8>
   17c98:	ldrb	r1, [r1, #8]
   17c9c:	add	r3, r4, #2
   17ca0:	strb	r1, [r0], #1
   17ca4:	add	r1, r4, #1
   17ca8:	ldr	r2, [r8, #8]
   17cac:	mov	r4, r1
   17cb0:	cmp	r3, r2
   17cb4:	bcc	17c7c <__assert_fail@plt+0x657c>
   17cb8:	mov	r1, #0
   17cbc:	sub	r4, r0, r6
   17cc0:	sub	r7, fp, #48	; 0x30
   17cc4:	sub	r0, fp, #36	; 0x24
   17cc8:	str	r1, [fp, #-44]	; 0xffffffd4
   17ccc:	str	r1, [fp, #-48]	; 0xffffffd0
   17cd0:	mov	r1, r6
   17cd4:	mov	r2, r4
   17cd8:	mov	r3, r7
   17cdc:	bl	2aedc <__assert_fail@plt+0x197dc>
   17ce0:	cmp	r0, r4
   17ce4:	bne	1830c <__assert_fail@plt+0x6c0c>
   17ce8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17cec:	bl	1146c <towlower@plt>
   17cf0:	mov	r1, r0
   17cf4:	mov	r0, r6
   17cf8:	mov	r2, r7
   17cfc:	bl	113b8 <wcrtomb@plt>
   17d00:	cmn	r0, #1
   17d04:	ldrbne	r0, [sp, #56]	; 0x38
   17d08:	strbne	sl, [r5, r0]
   17d0c:	b	1830c <__assert_fail@plt+0x6c0c>
   17d10:	ldr	r0, [sp, #20]
   17d14:	cmp	r0, #0
   17d18:	beq	1816c <__assert_fail@plt+0x6a6c>
   17d1c:	ldr	r0, [r2, r4, lsl #3]
   17d20:	mov	r6, #0
   17d24:	ldr	r7, [r0]
   17d28:	tst	r7, sl, lsl r6
   17d2c:	beq	17d5c <__assert_fail@plt+0x665c>
   17d30:	add	r1, r6, #128	; 0x80
   17d34:	mov	r0, r5
   17d38:	lsr	r1, r1, #7
   17d3c:	strb	sl, [r0, r6]!
   17d40:	cmp	r1, #2
   17d44:	bhi	17d58 <__assert_fail@plt+0x6658>
   17d48:	bl	11574 <__ctype_tolower_loc@plt>
   17d4c:	ldr	r0, [r0]
   17d50:	ldr	r0, [r0, r6, lsl #2]
   17d54:	add	r0, r5, r0
   17d58:	strb	sl, [r0]
   17d5c:	add	r6, r6, #1
   17d60:	cmp	r6, #32
   17d64:	bne	17d28 <__assert_fail@plt+0x6628>
   17d68:	ldr	r0, [r8]
   17d6c:	ldr	r6, [sp, #12]
   17d70:	mov	r9, #0
   17d74:	ldr	r0, [r0, r4, lsl #3]
   17d78:	ldr	r7, [r0, #4]
   17d7c:	tst	r7, sl, lsl r9
   17d80:	beq	17db4 <__assert_fail@plt+0x66b4>
   17d84:	add	r1, r9, #160	; 0xa0
   17d88:	mov	r0, r6
   17d8c:	lsr	r1, r1, #7
   17d90:	strb	sl, [r0, r9]!
   17d94:	cmp	r1, #2
   17d98:	bhi	17db0 <__assert_fail@plt+0x66b0>
   17d9c:	bl	11574 <__ctype_tolower_loc@plt>
   17da0:	ldr	r0, [r0]
   17da4:	add	r0, r0, r9, lsl #2
   17da8:	ldr	r0, [r0, #128]	; 0x80
   17dac:	add	r0, r5, r0
   17db0:	strb	sl, [r0]
   17db4:	add	r9, r9, #1
   17db8:	cmp	r9, #32
   17dbc:	bne	17d7c <__assert_fail@plt+0x667c>
   17dc0:	ldr	r0, [r8]
   17dc4:	ldr	r9, [sp, #16]
   17dc8:	mov	r6, #0
   17dcc:	ldr	r0, [r0, r4, lsl #3]
   17dd0:	ldr	r7, [r0, #8]
   17dd4:	tst	r7, sl, lsl r6
   17dd8:	beq	17e0c <__assert_fail@plt+0x670c>
   17ddc:	ldr	r0, [sp, #32]
   17de0:	add	r1, r6, #192	; 0xc0
   17de4:	lsr	r1, r1, #7
   17de8:	cmp	r1, #2
   17dec:	strb	sl, [r0, r6]!
   17df0:	bhi	17e08 <__assert_fail@plt+0x6708>
   17df4:	bl	11574 <__ctype_tolower_loc@plt>
   17df8:	ldr	r0, [r0]
   17dfc:	add	r0, r0, r6, lsl #2
   17e00:	ldr	r0, [r0, #256]	; 0x100
   17e04:	add	r0, r5, r0
   17e08:	strb	sl, [r0]
   17e0c:	add	r6, r6, #1
   17e10:	cmp	r6, #32
   17e14:	bne	17dd4 <__assert_fail@plt+0x66d4>
   17e18:	ldr	r0, [r8]
   17e1c:	mov	r6, #0
   17e20:	ldr	r0, [r0, r4, lsl #3]
   17e24:	ldr	r7, [r0, #12]
   17e28:	tst	r7, sl, lsl r6
   17e2c:	beq	17e60 <__assert_fail@plt+0x6760>
   17e30:	ldr	r0, [sp, #36]	; 0x24
   17e34:	add	r1, r6, #224	; 0xe0
   17e38:	lsr	r1, r1, #7
   17e3c:	cmp	r1, #2
   17e40:	strb	sl, [r0, r6]!
   17e44:	bhi	17e5c <__assert_fail@plt+0x675c>
   17e48:	bl	11574 <__ctype_tolower_loc@plt>
   17e4c:	ldr	r0, [r0]
   17e50:	add	r0, r0, r6, lsl #2
   17e54:	ldr	r0, [r0, #384]	; 0x180
   17e58:	add	r0, r5, r0
   17e5c:	strb	sl, [r0]
   17e60:	add	r6, r6, #1
   17e64:	cmp	r6, #32
   17e68:	bne	17e28 <__assert_fail@plt+0x6728>
   17e6c:	ldr	r0, [r8]
   17e70:	mov	r6, #0
   17e74:	ldr	r0, [r0, r4, lsl #3]
   17e78:	ldr	r7, [r0, #16]
   17e7c:	tst	r7, sl, lsl r6
   17e80:	beq	17eb4 <__assert_fail@plt+0x67b4>
   17e84:	ldr	r0, [sp, #40]	; 0x28
   17e88:	add	r1, r6, #256	; 0x100
   17e8c:	lsr	r1, r1, #7
   17e90:	cmp	r1, #2
   17e94:	strb	sl, [r0, r6]!
   17e98:	bhi	17eb0 <__assert_fail@plt+0x67b0>
   17e9c:	bl	11574 <__ctype_tolower_loc@plt>
   17ea0:	ldr	r0, [r0]
   17ea4:	add	r0, r0, r6, lsl #2
   17ea8:	ldr	r0, [r0, #512]	; 0x200
   17eac:	add	r0, r5, r0
   17eb0:	strb	sl, [r0]
   17eb4:	add	r6, r6, #1
   17eb8:	cmp	r6, #32
   17ebc:	bne	17e7c <__assert_fail@plt+0x677c>
   17ec0:	ldr	r0, [r8]
   17ec4:	mov	r6, #0
   17ec8:	ldr	r0, [r0, r4, lsl #3]
   17ecc:	ldr	r7, [r0, #20]
   17ed0:	tst	r7, sl, lsl r6
   17ed4:	beq	17f08 <__assert_fail@plt+0x6808>
   17ed8:	ldr	r0, [sp, #44]	; 0x2c
   17edc:	add	r1, r6, #288	; 0x120
   17ee0:	lsr	r1, r1, #7
   17ee4:	cmp	r1, #2
   17ee8:	strb	sl, [r0, r6]!
   17eec:	bhi	17f04 <__assert_fail@plt+0x6804>
   17ef0:	bl	11574 <__ctype_tolower_loc@plt>
   17ef4:	ldr	r0, [r0]
   17ef8:	add	r0, r0, r6, lsl #2
   17efc:	ldr	r0, [r0, #640]	; 0x280
   17f00:	add	r0, r5, r0
   17f04:	strb	sl, [r0]
   17f08:	add	r6, r6, #1
   17f0c:	cmp	r6, #32
   17f10:	bne	17ed0 <__assert_fail@plt+0x67d0>
   17f14:	ldr	r0, [r8]
   17f18:	mov	r6, #0
   17f1c:	ldr	r0, [r0, r4, lsl #3]
   17f20:	ldr	r7, [r0, #24]
   17f24:	tst	r7, sl, lsl r6
   17f28:	beq	17f5c <__assert_fail@plt+0x685c>
   17f2c:	ldr	r0, [sp, #48]	; 0x30
   17f30:	add	r1, r6, #320	; 0x140
   17f34:	lsr	r1, r1, #7
   17f38:	cmp	r1, #2
   17f3c:	strb	sl, [r0, r6]!
   17f40:	bhi	17f58 <__assert_fail@plt+0x6858>
   17f44:	bl	11574 <__ctype_tolower_loc@plt>
   17f48:	ldr	r0, [r0]
   17f4c:	add	r0, r0, r6, lsl #2
   17f50:	ldr	r0, [r0, #768]	; 0x300
   17f54:	add	r0, r5, r0
   17f58:	strb	sl, [r0]
   17f5c:	add	r6, r6, #1
   17f60:	cmp	r6, #32
   17f64:	bne	17f24 <__assert_fail@plt+0x6824>
   17f68:	ldr	r0, [r8]
   17f6c:	mov	r6, #0
   17f70:	ldr	r0, [r0, r4, lsl #3]
   17f74:	ldr	r4, [r0, #28]
   17f78:	tst	r4, sl, lsl r6
   17f7c:	beq	17fb0 <__assert_fail@plt+0x68b0>
   17f80:	ldr	r0, [sp, #52]	; 0x34
   17f84:	add	r1, r6, #352	; 0x160
   17f88:	lsr	r1, r1, #7
   17f8c:	cmp	r1, #2
   17f90:	strb	sl, [r0, r6]!
   17f94:	bhi	17fac <__assert_fail@plt+0x68ac>
   17f98:	bl	11574 <__ctype_tolower_loc@plt>
   17f9c:	ldr	r0, [r0]
   17fa0:	add	r0, r0, r6, lsl #2
   17fa4:	ldr	r0, [r0, #896]	; 0x380
   17fa8:	add	r0, r5, r0
   17fac:	strb	sl, [r0]
   17fb0:	add	r6, r6, #1
   17fb4:	cmp	r6, #32
   17fb8:	bne	17f78 <__assert_fail@plt+0x6878>
   17fbc:	b	1830c <__assert_fail@plt+0x6c0c>
   17fc0:	ldr	r0, [r8, #92]	; 0x5c
   17fc4:	ldr	r4, [r2, r4, lsl #3]
   17fc8:	cmp	r0, #2
   17fcc:	blt	1803c <__assert_fail@plt+0x693c>
   17fd0:	ldr	r0, [r4, #36]	; 0x24
   17fd4:	cmp	r0, #0
   17fd8:	bne	17ff0 <__assert_fail@plt+0x68f0>
   17fdc:	ldrb	r0, [r4, #16]
   17fe0:	tst	r0, #1
   17fe4:	ldreq	r0, [r4, #32]
   17fe8:	cmpeq	r0, #0
   17fec:	beq	1803c <__assert_fail@plt+0x693c>
   17ff0:	mov	r6, #0
   17ff4:	add	r4, sp, #56	; 0x38
   17ff8:	sub	r7, fp, #48	; 0x30
   17ffc:	strb	r6, [fp, #-48]	; 0xffffffd0
   18000:	mov	r0, #0
   18004:	mov	r1, r7
   18008:	mov	r2, #1
   1800c:	mov	r3, r4
   18010:	str	r6, [sp, #60]	; 0x3c
   18014:	str	r6, [sp, #56]	; 0x38
   18018:	bl	2aedc <__assert_fail@plt+0x197dc>
   1801c:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   18020:	cmn	r0, #2
   18024:	add	r0, r1, #1
   18028:	strbeq	sl, [r5, r1]
   1802c:	tst	r0, #255	; 0xff
   18030:	strb	r0, [fp, #-48]	; 0xffffffd0
   18034:	bne	18000 <__assert_fail@plt+0x6900>
   18038:	b	1830c <__assert_fail@plt+0x6c0c>
   1803c:	ldr	r0, [r4, #20]
   18040:	cmp	r0, #1
   18044:	blt	1830c <__assert_fail@plt+0x6c0c>
   18048:	ldr	r0, [sp, #20]
   1804c:	mov	r7, #0
   18050:	cmp	r0, #0
   18054:	beq	180ec <__assert_fail@plt+0x69ec>
   18058:	mov	r0, #0
   1805c:	sub	r2, fp, #48	; 0x30
   18060:	str	r0, [fp, #-44]	; 0xffffffd4
   18064:	str	r0, [fp, #-48]	; 0xffffffd0
   18068:	ldr	r0, [r4]
   1806c:	ldr	r1, [r0, r7, lsl #2]
   18070:	add	r0, sp, #56	; 0x38
   18074:	bl	113b8 <wcrtomb@plt>
   18078:	cmn	r0, #1
   1807c:	beq	18098 <__assert_fail@plt+0x6998>
   18080:	ldrb	r6, [sp, #56]	; 0x38
   18084:	strb	sl, [r5, r6]
   18088:	bl	11574 <__ctype_tolower_loc@plt>
   1808c:	ldr	r0, [r0]
   18090:	ldr	r0, [r0, r6, lsl #2]
   18094:	strb	sl, [r5, r0]
   18098:	ldrb	r0, [r9, #14]
   1809c:	tst	r0, #64	; 0x40
   180a0:	beq	180d8 <__assert_fail@plt+0x69d8>
   180a4:	ldr	r0, [r8, #92]	; 0x5c
   180a8:	cmp	r0, #2
   180ac:	blt	180d8 <__assert_fail@plt+0x69d8>
   180b0:	ldr	r0, [r4]
   180b4:	ldr	r0, [r0, r7, lsl #2]
   180b8:	bl	1146c <towlower@plt>
   180bc:	mov	r1, r0
   180c0:	add	r0, sp, #56	; 0x38
   180c4:	sub	r2, fp, #48	; 0x30
   180c8:	bl	113b8 <wcrtomb@plt>
   180cc:	cmn	r0, #1
   180d0:	ldrbne	r0, [sp, #56]	; 0x38
   180d4:	strbne	sl, [r5, r0]
   180d8:	ldr	r0, [r4, #20]
   180dc:	add	r7, r7, #1
   180e0:	cmp	r7, r0
   180e4:	blt	18058 <__assert_fail@plt+0x6958>
   180e8:	b	1830c <__assert_fail@plt+0x6c0c>
   180ec:	mov	r0, #0
   180f0:	sub	r2, fp, #48	; 0x30
   180f4:	str	r0, [fp, #-44]	; 0xffffffd4
   180f8:	str	r0, [fp, #-48]	; 0xffffffd0
   180fc:	ldr	r0, [r4]
   18100:	ldr	r1, [r0, r7, lsl #2]
   18104:	add	r0, sp, #56	; 0x38
   18108:	bl	113b8 <wcrtomb@plt>
   1810c:	cmn	r0, #1
   18110:	ldrbne	r0, [sp, #56]	; 0x38
   18114:	strbne	sl, [r5, r0]
   18118:	ldrb	r0, [r9, #14]
   1811c:	tst	r0, #64	; 0x40
   18120:	beq	18158 <__assert_fail@plt+0x6a58>
   18124:	ldr	r0, [r8, #92]	; 0x5c
   18128:	cmp	r0, #2
   1812c:	blt	18158 <__assert_fail@plt+0x6a58>
   18130:	ldr	r0, [r4]
   18134:	ldr	r0, [r0, r7, lsl #2]
   18138:	bl	1146c <towlower@plt>
   1813c:	mov	r1, r0
   18140:	add	r0, sp, #56	; 0x38
   18144:	sub	r2, fp, #48	; 0x30
   18148:	bl	113b8 <wcrtomb@plt>
   1814c:	cmn	r0, #1
   18150:	ldrbne	r0, [sp, #56]	; 0x38
   18154:	strbne	sl, [r5, r0]
   18158:	ldr	r0, [r4, #20]
   1815c:	add	r7, r7, #1
   18160:	cmp	r7, r0
   18164:	blt	180ec <__assert_fail@plt+0x69ec>
   18168:	b	1830c <__assert_fail@plt+0x6c0c>
   1816c:	ldr	r1, [sp, #8]
   18170:	mov	r0, #0
   18174:	b	18184 <__assert_fail@plt+0x6a84>
   18178:	ldr	r2, [r8]
   1817c:	add	r0, r0, #4
   18180:	add	r1, r1, #32
   18184:	ldr	r2, [r2, r4, lsl #3]
   18188:	ldr	r2, [r2, r0]
   1818c:	tst	r2, #1
   18190:	strbne	sl, [r1, #-31]	; 0xffffffe1
   18194:	tst	r2, #2
   18198:	addne	r3, r5, r0, lsl #3
   1819c:	strbne	sl, [r3, #1]
   181a0:	tst	r2, #4
   181a4:	addne	r3, r5, r0, lsl #3
   181a8:	strbne	sl, [r3, #2]
   181ac:	tst	r2, #8
   181b0:	addne	r3, r5, r0, lsl #3
   181b4:	strbne	sl, [r3, #3]
   181b8:	tst	r2, #16
   181bc:	addne	r3, r5, r0, lsl #3
   181c0:	strbne	sl, [r3, #4]
   181c4:	tst	r2, #32
   181c8:	addne	r3, r5, r0, lsl #3
   181cc:	strbne	sl, [r3, #5]
   181d0:	tst	r2, #64	; 0x40
   181d4:	addne	r3, r5, r0, lsl #3
   181d8:	strbne	sl, [r3, #6]
   181dc:	tst	r2, #128	; 0x80
   181e0:	addne	r3, r5, r0, lsl #3
   181e4:	strbne	sl, [r3, #7]
   181e8:	tst	r2, #256	; 0x100
   181ec:	addne	r3, r5, r0, lsl #3
   181f0:	strbne	sl, [r3, #8]
   181f4:	tst	r2, #512	; 0x200
   181f8:	addne	r3, r5, r0, lsl #3
   181fc:	strbne	sl, [r3, #9]
   18200:	tst	r2, #1024	; 0x400
   18204:	addne	r3, r5, r0, lsl #3
   18208:	strbne	sl, [r3, #10]
   1820c:	tst	r2, #2048	; 0x800
   18210:	addne	r3, r5, r0, lsl #3
   18214:	strbne	sl, [r3, #11]
   18218:	tst	r2, #4096	; 0x1000
   1821c:	addne	r3, r5, r0, lsl #3
   18220:	strbne	sl, [r3, #12]
   18224:	tst	r2, #8192	; 0x2000
   18228:	addne	r3, r5, r0, lsl #3
   1822c:	strbne	sl, [r3, #13]
   18230:	tst	r2, #16384	; 0x4000
   18234:	addne	r3, r5, r0, lsl #3
   18238:	strbne	sl, [r3, #14]
   1823c:	tst	r2, #32768	; 0x8000
   18240:	addne	r3, r5, r0, lsl #3
   18244:	strbne	sl, [r3, #15]
   18248:	tst	r2, #65536	; 0x10000
   1824c:	addne	r3, r5, r0, lsl #3
   18250:	strbne	sl, [r3, #16]
   18254:	tst	r2, #131072	; 0x20000
   18258:	addne	r3, r5, r0, lsl #3
   1825c:	strbne	sl, [r3, #17]
   18260:	tst	r2, #262144	; 0x40000
   18264:	addne	r3, r5, r0, lsl #3
   18268:	strbne	sl, [r3, #18]
   1826c:	tst	r2, #524288	; 0x80000
   18270:	addne	r3, r5, r0, lsl #3
   18274:	strbne	sl, [r3, #19]
   18278:	tst	r2, #1048576	; 0x100000
   1827c:	addne	r3, r5, r0, lsl #3
   18280:	strbne	sl, [r3, #20]
   18284:	tst	r2, #2097152	; 0x200000
   18288:	addne	r3, r5, r0, lsl #3
   1828c:	strbne	sl, [r3, #21]
   18290:	tst	r2, #4194304	; 0x400000
   18294:	addne	r3, r5, r0, lsl #3
   18298:	strbne	sl, [r3, #22]
   1829c:	tst	r2, #8388608	; 0x800000
   182a0:	addne	r3, r5, r0, lsl #3
   182a4:	strbne	sl, [r3, #23]
   182a8:	tst	r2, #16777216	; 0x1000000
   182ac:	addne	r3, r5, r0, lsl #3
   182b0:	strbne	sl, [r3, #24]
   182b4:	tst	r2, #33554432	; 0x2000000
   182b8:	addne	r3, r5, r0, lsl #3
   182bc:	strbne	sl, [r3, #25]
   182c0:	tst	r2, #67108864	; 0x4000000
   182c4:	addne	r3, r5, r0, lsl #3
   182c8:	strbne	sl, [r3, #26]
   182cc:	tst	r2, #134217728	; 0x8000000
   182d0:	addne	r3, r5, r0, lsl #3
   182d4:	strbne	sl, [r3, #27]
   182d8:	tst	r2, #268435456	; 0x10000000
   182dc:	addne	r3, r5, r0, lsl #3
   182e0:	strbne	sl, [r3, #28]
   182e4:	tst	r2, #536870912	; 0x20000000
   182e8:	addne	r3, r5, r0, lsl #3
   182ec:	strbne	sl, [r3, #29]
   182f0:	tst	r2, #1073741824	; 0x40000000
   182f4:	addne	r3, r5, r0, lsl #3
   182f8:	strbne	sl, [r3, #30]
   182fc:	cmn	r2, #1
   18300:	strble	sl, [r1]
   18304:	cmp	r0, #28
   18308:	bne	18178 <__assert_fail@plt+0x6a78>
   1830c:	ldr	r1, [sp, #24]
   18310:	ldr	r2, [sp, #28]
   18314:	ldr	r0, [r1, #8]
   18318:	add	r2, r2, #1
   1831c:	cmp	r2, r0
   18320:	blt	17bc8 <__assert_fail@plt+0x64c8>
   18324:	sub	sp, fp, #28
   18328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1832c:	mov	r0, r5
   18330:	mov	r1, #1
   18334:	mov	r2, #256	; 0x100
   18338:	bl	11610 <memset@plt>
   1833c:	cmp	r6, #2
   18340:	ldrbeq	r0, [r9, #28]
   18344:	orreq	r0, r0, #1
   18348:	strbeq	r0, [r9, #28]
   1834c:	sub	sp, fp, #28
   18350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18354:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18358:	add	fp, sp, #24
   1835c:	mov	r4, r0
   18360:	mov	r0, #0
   18364:	mov	r6, r2
   18368:	mov	r5, r1
   1836c:	str	r0, [r4]
   18370:	str	r0, [r4, #4]
   18374:	str	r0, [r4, #8]
   18378:	mov	r0, #256	; 0x100
   1837c:	bl	2aa84 <__assert_fail@plt+0x19384>
   18380:	cmp	r0, #0
   18384:	str	r0, [r4, #16]
   18388:	beq	184c0 <__assert_fail@plt+0x6dc0>
   1838c:	movw	r0, #45820	; 0xb2fc
   18390:	tst	r6, #1
   18394:	and	r1, r6, #2
   18398:	mov	r8, r4
   1839c:	movt	r0, #3
   183a0:	movweq	r0, #710	; 0x2c6
   183a4:	movteq	r0, #257	; 0x101
   183a8:	tst	r6, #4
   183ac:	orr	r7, r0, r1, lsl #21
   183b0:	bne	183c4 <__assert_fail@plt+0x6cc4>
   183b4:	ldrb	r0, [r8, #28]!
   183b8:	and	r0, r0, #127	; 0x7f
   183bc:	strb	r0, [r8]
   183c0:	b	183e4 <__assert_fail@plt+0x6ce4>
   183c4:	ldrb	r0, [r8, #28]!
   183c8:	mvn	r1, #127	; 0x7f
   183cc:	orr	r0, r0, r1
   183d0:	movw	r1, #45758	; 0xb2be
   183d4:	movt	r1, #323	; 0x143
   183d8:	strb	r0, [r8]
   183dc:	and	r1, r7, r1
   183e0:	orr	r7, r1, #256	; 0x100
   183e4:	and	r1, r6, #8
   183e8:	and	r0, r0, #239	; 0xef
   183ec:	mov	r9, #0
   183f0:	orr	r0, r0, r1, lsl #1
   183f4:	str	r9, [r4, #20]
   183f8:	strb	r0, [r4, #28]
   183fc:	mov	r0, r5
   18400:	bl	115bc <strlen@plt>
   18404:	mov	r2, r0
   18408:	mov	r0, r4
   1840c:	mov	r1, r5
   18410:	mov	r3, r7
   18414:	bl	16380 <__assert_fail@plt+0x4c80>
   18418:	mov	r5, r0
   1841c:	cmp	r0, #16
   18420:	movweq	r5, #8
   18424:	cmp	r5, #0
   18428:	bne	184cc <__assert_fail@plt+0x6dcc>
   1842c:	ldr	r5, [r4, #16]
   18430:	ldr	r6, [r4]
   18434:	mov	r1, #0
   18438:	mov	r2, #256	; 0x100
   1843c:	mov	r0, r5
   18440:	bl	11610 <memset@plt>
   18444:	ldr	r1, [r6, #36]	; 0x24
   18448:	mov	r0, r4
   1844c:	mov	r2, r5
   18450:	bl	17b2c <__assert_fail@plt+0x642c>
   18454:	ldr	r0, [r6, #36]	; 0x24
   18458:	ldr	r1, [r6, #40]	; 0x28
   1845c:	cmp	r0, r1
   18460:	beq	18474 <__assert_fail@plt+0x6d74>
   18464:	mov	r0, r4
   18468:	mov	r2, r5
   1846c:	bl	17b2c <__assert_fail@plt+0x642c>
   18470:	ldr	r0, [r6, #36]	; 0x24
   18474:	ldr	r1, [r6, #44]	; 0x2c
   18478:	cmp	r0, r1
   1847c:	beq	18490 <__assert_fail@plt+0x6d90>
   18480:	mov	r0, r4
   18484:	mov	r2, r5
   18488:	bl	17b2c <__assert_fail@plt+0x642c>
   1848c:	ldr	r0, [r6, #36]	; 0x24
   18490:	ldr	r1, [r6, #48]	; 0x30
   18494:	cmp	r0, r1
   18498:	beq	184a8 <__assert_fail@plt+0x6da8>
   1849c:	mov	r0, r4
   184a0:	mov	r2, r5
   184a4:	bl	17b2c <__assert_fail@plt+0x642c>
   184a8:	ldrb	r0, [r8]
   184ac:	mov	r5, #0
   184b0:	orr	r0, r0, #8
   184b4:	strb	r0, [r8]
   184b8:	mov	r0, r5
   184bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   184c0:	mov	r5, #12
   184c4:	mov	r0, r5
   184c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   184cc:	ldr	r0, [r4, #16]
   184d0:	bl	13de4 <__assert_fail@plt+0x26e4>
   184d4:	mov	r0, r5
   184d8:	str	r9, [r4, #16]
   184dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   184e0:	push	{r4, r5, r6, r7, fp, lr}
   184e4:	add	fp, sp, #16
   184e8:	cmp	r0, #17
   184ec:	bcs	18560 <__assert_fail@plt+0x6e60>
   184f0:	movw	r1, #48976	; 0xbf50
   184f4:	mov	r4, r2
   184f8:	mov	r2, #5
   184fc:	mov	r5, r3
   18500:	movt	r1, #2
   18504:	ldr	r0, [r1, r0, lsl #2]
   18508:	movw	r1, #48592	; 0xbdd0
   1850c:	movt	r1, #2
   18510:	add	r1, r1, r0
   18514:	mov	r0, #0
   18518:	bl	11490 <dcgettext@plt>
   1851c:	mov	r6, r0
   18520:	bl	115bc <strlen@plt>
   18524:	add	r7, r0, #1
   18528:	cmp	r5, #0
   1852c:	beq	18548 <__assert_fail@plt+0x6e48>
   18530:	cmp	r7, r5
   18534:	mov	r2, r7
   18538:	bhi	18550 <__assert_fail@plt+0x6e50>
   1853c:	mov	r0, r4
   18540:	mov	r1, r6
   18544:	bl	11448 <memcpy@plt>
   18548:	mov	r0, r7
   1854c:	pop	{r4, r5, r6, r7, fp, pc}
   18550:	sub	r2, r5, #1
   18554:	mov	r0, #0
   18558:	strb	r0, [r4, r2]
   1855c:	b	1853c <__assert_fail@plt+0x6e3c>
   18560:	bl	116e8 <abort@plt>
   18564:	push	{r4, r5, fp, lr}
   18568:	add	fp, sp, #8
   1856c:	ldr	r5, [r0]
   18570:	mov	r4, r0
   18574:	cmp	r5, #0
   18578:	beq	185a4 <__assert_fail@plt+0x6ea4>
   1857c:	movw	r0, #0
   18580:	movw	r1, #0
   18584:	movt	r0, #0
   18588:	movt	r1, #0
   1858c:	orrs	r0, r1, r0
   18590:	beq	1859c <__assert_fail@plt+0x6e9c>
   18594:	add	r0, r5, #136	; 0x88
   18598:	bl	113f4 <pthread_mutex_destroy@plt>
   1859c:	mov	r0, r5
   185a0:	bl	185cc <__assert_fail@plt+0x6ecc>
   185a4:	mov	r5, #0
   185a8:	str	r5, [r4]
   185ac:	str	r5, [r4, #4]
   185b0:	ldr	r0, [r4, #16]
   185b4:	bl	13de4 <__assert_fail@plt+0x26e4>
   185b8:	str	r5, [r4, #16]
   185bc:	ldr	r0, [r4, #20]
   185c0:	bl	13de4 <__assert_fail@plt+0x26e4>
   185c4:	str	r5, [r4, #20]
   185c8:	pop	{r4, r5, fp, pc}
   185cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185d0:	add	fp, sp, #28
   185d4:	sub	sp, sp, #4
   185d8:	mov	sl, r0
   185dc:	ldr	r0, [r0]
   185e0:	cmp	r0, #0
   185e4:	ldrne	r1, [sl, #8]
   185e8:	cmpne	r1, #0
   185ec:	beq	18664 <__assert_fail@plt+0x6f64>
   185f0:	movw	r7, #255	; 0xff
   185f4:	mov	r6, #0
   185f8:	movt	r7, #4
   185fc:	b	18604 <__assert_fail@plt+0x6f04>
   18600:	ldr	r0, [sl]
   18604:	add	r1, r0, r6, lsl #3
   18608:	ldr	r1, [r1, #4]
   1860c:	and	r1, r1, r7
   18610:	cmp	r1, #3
   18614:	beq	1864c <__assert_fail@plt+0x6f4c>
   18618:	cmp	r1, #6
   1861c:	bne	18654 <__assert_fail@plt+0x6f54>
   18620:	ldr	r5, [r0, r6, lsl #3]
   18624:	ldr	r0, [r5]
   18628:	bl	13de4 <__assert_fail@plt+0x26e4>
   1862c:	ldr	r0, [r5, #4]
   18630:	bl	13de4 <__assert_fail@plt+0x26e4>
   18634:	ldr	r0, [r5, #8]
   18638:	bl	13de4 <__assert_fail@plt+0x26e4>
   1863c:	ldr	r0, [r5, #12]
   18640:	bl	13de4 <__assert_fail@plt+0x26e4>
   18644:	mov	r0, r5
   18648:	b	18650 <__assert_fail@plt+0x6f50>
   1864c:	ldr	r0, [r0, r6, lsl #3]
   18650:	bl	13de4 <__assert_fail@plt+0x26e4>
   18654:	ldr	r0, [sl, #8]
   18658:	add	r6, r6, #1
   1865c:	cmp	r6, r0
   18660:	bcc	18600 <__assert_fail@plt+0x6f00>
   18664:	ldr	r0, [sl, #12]
   18668:	bl	13de4 <__assert_fail@plt+0x26e4>
   1866c:	ldr	r0, [sl, #8]
   18670:	cmp	r0, #0
   18674:	beq	186e0 <__assert_fail@plt+0x6fe0>
   18678:	add	r7, sl, #20
   1867c:	add	r8, sl, #28
   18680:	add	r9, sl, #24
   18684:	mov	r5, #0
   18688:	mov	r6, #8
   1868c:	ldr	r0, [r9]
   18690:	cmp	r0, #0
   18694:	beq	186a0 <__assert_fail@plt+0x6fa0>
   18698:	ldr	r0, [r0, r6]
   1869c:	bl	13de4 <__assert_fail@plt+0x26e4>
   186a0:	ldr	r0, [r8]
   186a4:	cmp	r0, #0
   186a8:	beq	186b4 <__assert_fail@plt+0x6fb4>
   186ac:	ldr	r0, [r0, r6]
   186b0:	bl	13de4 <__assert_fail@plt+0x26e4>
   186b4:	ldr	r0, [r7]
   186b8:	cmp	r0, #0
   186bc:	beq	186c8 <__assert_fail@plt+0x6fc8>
   186c0:	ldr	r0, [r0, r6]
   186c4:	bl	13de4 <__assert_fail@plt+0x26e4>
   186c8:	ldr	r0, [sl, #8]
   186cc:	add	r5, r5, #1
   186d0:	add	r6, r6, #12
   186d4:	cmp	r5, r0
   186d8:	bcc	1868c <__assert_fail@plt+0x6f8c>
   186dc:	b	186ec <__assert_fail@plt+0x6fec>
   186e0:	add	r8, sl, #28
   186e4:	add	r9, sl, #24
   186e8:	add	r7, sl, #20
   186ec:	ldr	r0, [r7]
   186f0:	bl	13de4 <__assert_fail@plt+0x26e4>
   186f4:	ldr	r0, [r9]
   186f8:	bl	13de4 <__assert_fail@plt+0x26e4>
   186fc:	ldr	r0, [r8]
   18700:	bl	13de4 <__assert_fail@plt+0x26e4>
   18704:	ldr	r0, [sl]
   18708:	bl	13de4 <__assert_fail@plt+0x26e4>
   1870c:	ldr	r5, [sl, #32]
   18710:	cmp	r5, #0
   18714:	beq	18774 <__assert_fail@plt+0x7074>
   18718:	mov	r6, #0
   1871c:	b	18728 <__assert_fail@plt+0x7028>
   18720:	ldr	r5, [sl, #32]
   18724:	add	r6, r6, #1
   18728:	add	r0, r6, r6, lsl #1
   1872c:	ldr	r0, [r5, r0, lsl #2]!
   18730:	add	r7, r5, #8
   18734:	cmp	r0, #1
   18738:	blt	1875c <__assert_fail@plt+0x705c>
   1873c:	mov	r4, #0
   18740:	ldr	r0, [r7]
   18744:	ldr	r0, [r0, r4, lsl #2]
   18748:	bl	1b710 <__assert_fail@plt+0xa010>
   1874c:	ldr	r0, [r5]
   18750:	add	r4, r4, #1
   18754:	cmp	r4, r0
   18758:	blt	18740 <__assert_fail@plt+0x7040>
   1875c:	ldr	r0, [r7]
   18760:	bl	13de4 <__assert_fail@plt+0x26e4>
   18764:	ldr	r0, [sl, #68]	; 0x44
   18768:	cmp	r6, r0
   1876c:	bcc	18720 <__assert_fail@plt+0x7020>
   18770:	ldr	r5, [sl, #32]
   18774:	mov	r0, r5
   18778:	bl	13de4 <__assert_fail@plt+0x26e4>
   1877c:	ldr	r0, [sl, #60]	; 0x3c
   18780:	movw	r1, #49044	; 0xbf94
   18784:	movt	r1, #2
   18788:	cmp	r0, r1
   1878c:	beq	18794 <__assert_fail@plt+0x7094>
   18790:	bl	13de4 <__assert_fail@plt+0x26e4>
   18794:	ldr	r0, [sl, #132]	; 0x84
   18798:	bl	13de4 <__assert_fail@plt+0x26e4>
   1879c:	mov	r0, sl
   187a0:	sub	sp, fp, #28
   187a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187a8:	b	13de4 <__assert_fail@plt+0x26e4>
   187ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187b0:	add	fp, sp, #28
   187b4:	sub	sp, sp, #28
   187b8:	ldr	sl, [fp, #8]
   187bc:	mov	r7, #2
   187c0:	cmp	sl, #7
   187c4:	bhi	18898 <__assert_fail@plt+0x7198>
   187c8:	mov	r5, r0
   187cc:	ldr	r0, [r0]
   187d0:	mov	r6, r3
   187d4:	mov	r9, r2
   187d8:	mov	r4, r1
   187dc:	tst	sl, #4
   187e0:	str	r0, [sp, #24]
   187e4:	bne	187fc <__assert_fail@plt+0x70fc>
   187e8:	mov	r0, r4
   187ec:	bl	115bc <strlen@plt>
   187f0:	mov	r7, r0
   187f4:	mov	r8, #0
   187f8:	b	18804 <__assert_fail@plt+0x7104>
   187fc:	ldr	r8, [r6]
   18800:	ldr	r7, [r6, #4]
   18804:	movw	r0, #0
   18808:	movw	r1, #0
   1880c:	movt	r0, #0
   18810:	movt	r1, #0
   18814:	orrs	r0, r1, r0
   18818:	str	r0, [sp, #20]
   1881c:	beq	1882c <__assert_fail@plt+0x712c>
   18820:	ldr	r0, [sp, #24]
   18824:	add	r0, r0, #136	; 0x88
   18828:	bl	11430 <pthread_mutex_lock@plt>
   1882c:	ldrb	r0, [r5, #28]
   18830:	tst	r0, #16
   18834:	bne	18848 <__assert_fail@plt+0x7148>
   18838:	str	r7, [sp]
   1883c:	stmib	sp, {r7, r9}
   18840:	str	r6, [sp, #12]
   18844:	b	1885c <__assert_fail@plt+0x715c>
   18848:	mov	r0, #0
   1884c:	str	r7, [sp]
   18850:	str	r7, [sp, #4]
   18854:	str	r0, [sp, #8]
   18858:	str	r0, [sp, #12]
   1885c:	mov	r0, r5
   18860:	mov	r1, r4
   18864:	mov	r2, r7
   18868:	mov	r3, r8
   1886c:	str	sl, [sp, #16]
   18870:	bl	188a4 <__assert_fail@plt+0x71a4>
   18874:	mov	r7, r0
   18878:	ldr	r0, [sp, #20]
   1887c:	cmp	r0, #0
   18880:	beq	18890 <__assert_fail@plt+0x7190>
   18884:	ldr	r0, [sp, #24]
   18888:	add	r0, r0, #136	; 0x88
   1888c:	bl	11388 <pthread_mutex_unlock@plt>
   18890:	cmp	r7, #0
   18894:	movwne	r7, #1
   18898:	mov	r0, r7
   1889c:	sub	sp, fp, #28
   188a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188a8:	add	fp, sp, #28
   188ac:	sub	sp, sp, #412	; 0x19c
   188b0:	ldr	r8, [r0]
   188b4:	str	r2, [sp, #76]	; 0x4c
   188b8:	str	r1, [sp, #100]	; 0x64
   188bc:	mov	r7, r0
   188c0:	add	r0, sp, #104	; 0x68
   188c4:	mov	r1, #0
   188c8:	mov	r2, #136	; 0x88
   188cc:	mov	r6, r3
   188d0:	mov	r4, #0
   188d4:	bl	11610 <memset@plt>
   188d8:	str	r8, [sp, #188]	; 0xbc
   188dc:	ldr	sl, [fp, #16]
   188e0:	ldr	ip, [fp, #8]
   188e4:	mov	r5, #0
   188e8:	ldr	r1, [r7, #16]
   188ec:	cmp	r1, #0
   188f0:	beq	1890c <__assert_fail@plt+0x720c>
   188f4:	ldrb	r2, [r7, #28]
   188f8:	and	r2, r2, #9
   188fc:	cmp	r2, #8
   18900:	movne	r1, #0
   18904:	subs	r5, r6, ip
   18908:	movne	r5, r1
   1890c:	ldr	r2, [r7, #24]
   18910:	ldr	r1, [r7, #8]
   18914:	mov	r9, #1
   18918:	mvn	r3, r2
   1891c:	cmp	r2, sl
   18920:	addcc	r4, r3, sl
   18924:	cmp	r1, #0
   18928:	beq	1aec0 <__assert_fail@plt+0x97c0>
   1892c:	ldr	r1, [r8, #36]	; 0x24
   18930:	cmp	r1, #0
   18934:	ldrne	r2, [r8, #40]	; 0x28
   18938:	cmpne	r2, #0
   1893c:	beq	1aec0 <__assert_fail@plt+0x97c0>
   18940:	ldr	r3, [r8, #44]	; 0x2c
   18944:	cmp	r3, #0
   18948:	movne	r0, r7
   1894c:	ldrne	r7, [r8, #48]	; 0x30
   18950:	cmpne	r7, #0
   18954:	beq	1aec0 <__assert_fail@plt+0x97c0>
   18958:	ldr	r1, [r1, #8]
   1895c:	ldr	lr, [r0, #20]
   18960:	mov	r7, r0
   18964:	cmp	r1, #0
   18968:	bne	18978 <__assert_fail@plt+0x7278>
   1896c:	ldr	r1, [r2, #8]
   18970:	cmp	r1, #0
   18974:	beq	1a064 <__assert_fail@plt+0x8964>
   18978:	mov	r1, ip
   1897c:	subs	r0, sl, r4
   18980:	str	r1, [sp, #80]	; 0x50
   18984:	str	r4, [sp, #28]
   18988:	str	r0, [sp, #68]	; 0x44
   1898c:	mov	r0, #1
   18990:	str	r0, [sp, #52]	; 0x34
   18994:	bne	189a8 <__assert_fail@plt+0x72a8>
   18998:	ldr	r0, [r8, #76]	; 0x4c
   1899c:	cmp	r0, #0
   189a0:	movwne	r0, #1
   189a4:	str	r0, [sp, #52]	; 0x34
   189a8:	ldr	r0, [r7, #12]
   189ac:	ldr	r2, [r8, #92]	; 0x5c
   189b0:	ldr	r3, [sp, #100]	; 0x64
   189b4:	ldr	r1, [r8, #8]
   189b8:	str	lr, [sp, #168]	; 0xa8
   189bc:	str	r3, [sp, #104]	; 0x68
   189c0:	str	r2, [sp, #184]	; 0xb8
   189c4:	ubfx	r3, r0, #22, #1
   189c8:	and	r0, r0, #4194304	; 0x400000
   189cc:	ldr	r4, [sp, #76]	; 0x4c
   189d0:	str	r8, [sp, #96]	; 0x60
   189d4:	orrs	sl, lr, r0
   189d8:	strb	r3, [sp, #176]	; 0xb0
   189dc:	add	r3, sp, #104	; 0x68
   189e0:	movwne	sl, #1
   189e4:	add	r3, r3, #44	; 0x2c
   189e8:	strb	sl, [sp, #179]	; 0xb3
   189ec:	ldrb	r0, [r8, #88]	; 0x58
   189f0:	vdup.32	q8, r4
   189f4:	add	r8, r1, #1
   189f8:	vst1.32	{d16-d17}, [r3]
   189fc:	cmp	r2, r8
   18a00:	movgt	r8, r2
   18a04:	ubfx	r3, r0, #3, #1
   18a08:	strb	r3, [sp, #178]	; 0xb2
   18a0c:	ubfx	r0, r0, #2, #1
   18a10:	str	r7, [sp, #64]	; 0x40
   18a14:	str	r5, [sp, #92]	; 0x5c
   18a18:	str	lr, [sp, #88]	; 0x58
   18a1c:	strb	r0, [sp, #177]	; 0xb1
   18a20:	add	r0, r4, #1
   18a24:	cmp	r0, r8
   18a28:	movlt	r8, r0
   18a2c:	cmp	r2, #2
   18a30:	blt	18a64 <__assert_fail@plt+0x7364>
   18a34:	mov	r9, #12
   18a38:	cmn	r8, #-1073741823	; 0xc0000001
   18a3c:	bhi	1ae6c <__assert_fail@plt+0x976c>
   18a40:	lsl	r1, r8, #2
   18a44:	mov	r0, #0
   18a48:	bl	2aab4 <__assert_fail@plt+0x193b4>
   18a4c:	ldr	lr, [sp, #88]	; 0x58
   18a50:	ldr	r5, [sp, #92]	; 0x5c
   18a54:	cmp	r0, #0
   18a58:	beq	1ae6c <__assert_fail@plt+0x976c>
   18a5c:	ldr	r7, [sp, #64]	; 0x40
   18a60:	str	r0, [sp, #112]	; 0x70
   18a64:	ldr	r4, [sp, #96]	; 0x60
   18a68:	mov	r9, r7
   18a6c:	mov	r7, #1
   18a70:	cmp	sl, #0
   18a74:	beq	18a9c <__assert_fail@plt+0x739c>
   18a78:	mov	r0, #0
   18a7c:	mov	r1, r8
   18a80:	mov	r7, #0
   18a84:	bl	2aab4 <__assert_fail@plt+0x193b4>
   18a88:	cmp	r0, #0
   18a8c:	beq	1ac64 <__assert_fail@plt+0x9564>
   18a90:	ldr	r5, [sp, #92]	; 0x5c
   18a94:	ldr	lr, [sp, #88]	; 0x58
   18a98:	str	r0, [sp, #108]	; 0x6c
   18a9c:	add	r1, r4, #96	; 0x60
   18aa0:	str	r8, [sp, #140]	; 0x8c
   18aa4:	ldr	r0, [fp, #12]
   18aa8:	cmp	r7, #0
   18aac:	str	r1, [sp, #172]	; 0xac
   18ab0:	ldrb	r1, [r4, #88]	; 0x58
   18ab4:	ubfx	r1, r1, #4, #1
   18ab8:	strb	r1, [sp, #182]	; 0xb6
   18abc:	mov	r1, #0
   18ac0:	beq	18adc <__assert_fail@plt+0x73dc>
   18ac4:	ldr	r1, [sp, #100]	; 0x64
   18ac8:	str	r1, [sp, #108]	; 0x6c
   18acc:	ldr	r1, [r4, #92]	; 0x5c
   18ad0:	cmp	r1, #1
   18ad4:	ldr	r1, [sp, #76]	; 0x4c
   18ad8:	movwgt	r1, #0
   18adc:	str	r1, [sp, #136]	; 0x88
   18ae0:	str	r1, [sp, #132]	; 0x84
   18ae4:	str	r0, [sp, #160]	; 0xa0
   18ae8:	str	r0, [sp, #156]	; 0x9c
   18aec:	ldrb	r0, [r9, #28]
   18af0:	lsr	r0, r0, #7
   18af4:	strb	r0, [sp, #181]	; 0xb5
   18af8:	mvn	r0, #0
   18afc:	ldr	r4, [r4, #76]	; 0x4c
   18b00:	str	r0, [sp, #196]	; 0xc4
   18b04:	ldr	r0, [fp, #24]
   18b08:	lsl	sl, r4, #1
   18b0c:	cmp	r4, #1
   18b10:	str	r0, [sp, #192]	; 0xc0
   18b14:	blt	18b64 <__assert_fail@plt+0x7464>
   18b18:	movw	r0, #43690	; 0xaaaa
   18b1c:	mov	r9, #12
   18b20:	movt	r0, #2730	; 0xaaa
   18b24:	cmp	sl, r0
   18b28:	bhi	1ae6c <__assert_fail@plt+0x976c>
   18b2c:	add	r0, r4, r4, lsl #1
   18b30:	lsl	r0, r0, #4
   18b34:	bl	2aa84 <__assert_fail@plt+0x19384>
   18b38:	mov	r7, r0
   18b3c:	str	r0, [sp, #220]	; 0xdc
   18b40:	lsl	r0, r4, #3
   18b44:	bl	2aa84 <__assert_fail@plt+0x19384>
   18b48:	cmp	r0, #0
   18b4c:	str	r0, [sp, #236]	; 0xec
   18b50:	beq	1ae6c <__assert_fail@plt+0x976c>
   18b54:	ldr	r5, [sp, #92]	; 0x5c
   18b58:	ldr	lr, [sp, #88]	; 0x58
   18b5c:	cmp	r7, #0
   18b60:	beq	1ae6c <__assert_fail@plt+0x976c>
   18b64:	mov	r0, #1
   18b68:	str	r0, [sp, #224]	; 0xe0
   18b6c:	ldr	r0, [sp, #68]	; 0x44
   18b70:	str	sl, [sp, #216]	; 0xd8
   18b74:	str	sl, [sp, #232]	; 0xe8
   18b78:	cmp	r0, #1
   18b7c:	bhi	18b90 <__assert_fail@plt+0x7490>
   18b80:	ldr	r0, [sp, #96]	; 0x60
   18b84:	ldrb	r0, [r0, #88]	; 0x58
   18b88:	tst	r0, #2
   18b8c:	beq	18bbc <__assert_fail@plt+0x74bc>
   18b90:	mov	r9, #12
   18b94:	cmn	r8, #-1073741822	; 0xc0000002
   18b98:	bhi	1ae6c <__assert_fail@plt+0x976c>
   18b9c:	mov	r0, #4
   18ba0:	add	r0, r0, r8, lsl #2
   18ba4:	bl	2aa84 <__assert_fail@plt+0x19384>
   18ba8:	ldr	lr, [sp, #88]	; 0x58
   18bac:	ldr	r5, [sp, #92]	; 0x5c
   18bb0:	cmp	r0, #0
   18bb4:	str	r0, [sp, #204]	; 0xcc
   18bb8:	beq	1ae6c <__assert_fail@plt+0x976c>
   18bbc:	ldr	r1, [fp, #24]
   18bc0:	ldr	r2, [sp, #80]	; 0x50
   18bc4:	str	r6, [fp, #-200]	; 0xffffff38
   18bc8:	mov	r8, #1
   18bcc:	mov	r4, r6
   18bd0:	mov	r0, #4
   18bd4:	tst	r1, #1
   18bd8:	mov	r1, #4
   18bdc:	mov	r7, r2
   18be0:	movweq	r1, #6
   18be4:	cmp	r2, r6
   18be8:	str	r1, [sp, #164]	; 0xa4
   18bec:	ldr	r1, [sp, #96]	; 0x60
   18bf0:	mvnlt	r8, #0
   18bf4:	movlt	r7, r6
   18bf8:	movlt	r4, r2
   18bfc:	cmp	r5, #0
   18c00:	ldr	r1, [r1, #92]	; 0x5c
   18c04:	str	r1, [sp, #60]	; 0x3c
   18c08:	beq	18c4c <__assert_fail@plt+0x754c>
   18c0c:	cmp	r1, #1
   18c10:	beq	18c30 <__assert_fail@plt+0x7530>
   18c14:	ldr	r0, [sp, #64]	; 0x40
   18c18:	ldr	r0, [r0, #12]
   18c1c:	and	r0, r0, #4194304	; 0x400000
   18c20:	orr	r0, lr, r0
   18c24:	clz	r0, r0
   18c28:	lsr	r0, r0, #5
   18c2c:	lsl	r0, r0, #2
   18c30:	cmp	lr, #0
   18c34:	mov	r1, lr
   18c38:	movwne	r1, #1
   18c3c:	cmp	r2, r6
   18c40:	orrge	r1, r1, #2
   18c44:	orr	r0, r1, r0
   18c48:	b	18c50 <__assert_fail@plt+0x7550>
   18c4c:	mov	r0, #8
   18c50:	add	r1, sp, #104	; 0x68
   18c54:	cmp	r2, r6
   18c58:	sub	r0, r0, #4
   18c5c:	str	r7, [sp, #48]	; 0x30
   18c60:	str	r4, [sp, #44]	; 0x2c
   18c64:	str	r8, [sp, #84]	; 0x54
   18c68:	add	r1, r1, #32
   18c6c:	str	r0, [sp, #80]	; 0x50
   18c70:	str	r1, [sp, #24]
   18c74:	sub	r1, fp, #200	; 0xc8
   18c78:	movwlt	r1, #0
   18c7c:	cmp	r1, #0
   18c80:	str	r1, [sp, #36]	; 0x24
   18c84:	movwne	r1, #1
   18c88:	str	r1, [sp, #40]	; 0x28
   18c8c:	sub	r1, fp, #192	; 0xc0
   18c90:	add	r1, r1, #16
   18c94:	str	r1, [sp, #32]
   18c98:	b	19148 <__assert_fail@plt+0x7a48>
   18c9c:	mov	r1, #0
   18ca0:	sub	r0, fp, #188	; 0xbc
   18ca4:	str	r6, [fp, #-192]	; 0xffffff40
   18ca8:	stm	r0, {r1, r5, r8}
   18cac:	ldr	r0, [sp, #32]
   18cb0:	str	r1, [r0]
   18cb4:	str	r1, [r0, #4]
   18cb8:	str	r1, [r0, #8]
   18cbc:	add	r0, sp, #104	; 0x68
   18cc0:	sub	r1, fp, #192	; 0xc0
   18cc4:	bl	27be0 <__assert_fail@plt+0x164e0>
   18cc8:	mov	r9, r0
   18ccc:	mov	r0, #0
   18cd0:	bl	13de4 <__assert_fail@plt+0x26e4>
   18cd4:	cmp	r9, #0
   18cd8:	bne	18fd8 <__assert_fail@plt+0x78d8>
   18cdc:	ldr	r0, [r6]
   18ce0:	mov	r7, #0
   18ce4:	cmp	r0, #0
   18ce8:	beq	18dc8 <__assert_fail@plt+0x76c8>
   18cec:	b	19ea8 <__assert_fail@plt+0x87a8>
   18cf0:	ldr	r1, [r7]
   18cf4:	cmp	r1, #0
   18cf8:	bne	19de8 <__assert_fail@plt+0x86e8>
   18cfc:	cmp	r3, #1
   18d00:	blt	18dc8 <__assert_fail@plt+0x76c8>
   18d04:	ldr	r0, [sp, #204]	; 0xcc
   18d08:	lsl	r4, r3, #2
   18d0c:	add	sl, r3, #1
   18d10:	sub	r0, r0, #4
   18d14:	ldr	r1, [r0, r4]
   18d18:	cmp	r1, #0
   18d1c:	ldrbne	r2, [r1, #52]	; 0x34
   18d20:	tstne	r2, #16
   18d24:	bne	18d3c <__assert_fail@plt+0x763c>
   18d28:	sub	sl, sl, #1
   18d2c:	sub	r4, r4, #4
   18d30:	cmp	sl, #2
   18d34:	bge	18d14 <__assert_fail@plt+0x7614>
   18d38:	b	18dc8 <__assert_fail@plt+0x76c8>
   18d3c:	sub	r5, sl, #2
   18d40:	add	r9, sp, #104	; 0x68
   18d44:	mov	r0, r9
   18d48:	mov	r2, r5
   18d4c:	bl	22d2c <__assert_fail@plt+0x1162c>
   18d50:	mov	r8, r0
   18d54:	mov	r0, r7
   18d58:	mov	r1, #0
   18d5c:	mov	r2, r4
   18d60:	bl	11610 <memset@plt>
   18d64:	ldr	r0, [sp, #32]
   18d68:	mov	r1, #0
   18d6c:	str	r6, [fp, #-192]	; 0xffffff40
   18d70:	str	r7, [fp, #-188]	; 0xffffff44
   18d74:	str	r8, [fp, #-184]	; 0xffffff48
   18d78:	str	r5, [fp, #-180]	; 0xffffff4c
   18d7c:	str	r8, [sp, #56]	; 0x38
   18d80:	mov	r4, r5
   18d84:	str	r1, [r0]
   18d88:	str	r1, [r0, #4]
   18d8c:	str	r1, [r0, #8]
   18d90:	mov	r0, r9
   18d94:	sub	r1, fp, #192	; 0xc0
   18d98:	bl	27be0 <__assert_fail@plt+0x164e0>
   18d9c:	mov	r9, r0
   18da0:	mov	r0, #0
   18da4:	bl	13de4 <__assert_fail@plt+0x26e4>
   18da8:	cmp	r9, #0
   18dac:	bne	18fd0 <__assert_fail@plt+0x78d0>
   18db0:	ldr	r0, [r6]
   18db4:	mov	r3, r4
   18db8:	cmp	r0, #0
   18dbc:	beq	18cf0 <__assert_fail@plt+0x75f0>
   18dc0:	sub	r3, sl, #2
   18dc4:	b	19de8 <__assert_fail@plt+0x86e8>
   18dc8:	mov	r0, r6
   18dcc:	bl	13de4 <__assert_fail@plt+0x26e4>
   18dd0:	mov	r0, r7
   18dd4:	bl	13de4 <__assert_fail@plt+0x26e4>
   18dd8:	ldr	r8, [sp, #84]	; 0x54
   18ddc:	add	r0, sp, #104	; 0x68
   18de0:	bl	22ed0 <__assert_fail@plt+0x117d0>
   18de4:	ldr	r0, [fp, #-200]	; 0xffffff38
   18de8:	ldr	r4, [sp, #44]	; 0x2c
   18dec:	ldr	r7, [sp, #48]	; 0x30
   18df0:	mov	r9, #1
   18df4:	add	r6, r0, r8
   18df8:	cmp	r6, r4
   18dfc:	str	r6, [fp, #-200]	; 0xffffff38
   18e00:	blt	1ae6c <__assert_fail@plt+0x976c>
   18e04:	ldr	r5, [sp, #92]	; 0x5c
   18e08:	ldr	lr, [sp, #88]	; 0x58
   18e0c:	cmp	r7, r6
   18e10:	bge	19148 <__assert_fail@plt+0x7a48>
   18e14:	b	1ae6c <__assert_fail@plt+0x976c>
   18e18:	ldrb	r0, [sp, #182]	; 0xb6
   18e1c:	cmp	r0, #0
   18e20:	bne	19010 <__assert_fail@plt+0x7910>
   18e24:	cmp	r7, #10
   18e28:	bne	18f70 <__assert_fail@plt+0x7870>
   18e2c:	ldrb	r3, [sp, #181]	; 0xb5
   18e30:	cmp	r3, #0
   18e34:	movwne	r3, #2
   18e38:	tst	r3, #1
   18e3c:	bne	18f6c <__assert_fail@plt+0x786c>
   18e40:	cmp	r3, #0
   18e44:	beq	18f70 <__assert_fail@plt+0x7870>
   18e48:	ands	r1, r3, #2
   18e4c:	and	r0, r3, #4
   18e50:	cmpne	r0, #0
   18e54:	bne	18ea0 <__assert_fail@plt+0x77a0>
   18e58:	cmp	r1, #0
   18e5c:	bne	18eb0 <__assert_fail@plt+0x77b0>
   18e60:	ldr	r6, [r4, #36]	; 0x24
   18e64:	cmp	r0, #0
   18e68:	beq	18f70 <__assert_fail@plt+0x7870>
   18e6c:	ldr	r2, [r6, #40]	; 0x28
   18e70:	sub	r0, fp, #196	; 0xc4
   18e74:	mov	r1, r4
   18e78:	mov	r6, lr
   18e7c:	bl	217bc <__assert_fail@plt+0x100bc>
   18e80:	mov	lr, r6
   18e84:	mov	r6, r0
   18e88:	cmp	r6, #0
   18e8c:	bne	19314 <__assert_fail@plt+0x7c14>
   18e90:	b	1ac64 <__assert_fail@plt+0x9564>
   18e94:	ldr	r8, [sp, #84]	; 0x54
   18e98:	ldr	r1, [sp, #72]	; 0x48
   18e9c:	b	19b98 <__assert_fail@plt+0x8498>
   18ea0:	ldr	r6, [r4, #48]	; 0x30
   18ea4:	cmp	r6, #0
   18ea8:	bne	19314 <__assert_fail@plt+0x7c14>
   18eac:	b	1ac64 <__assert_fail@plt+0x9564>
   18eb0:	ldr	r6, [r4, #44]	; 0x2c
   18eb4:	cmp	r6, #0
   18eb8:	bne	19314 <__assert_fail@plt+0x7c14>
   18ebc:	b	1ac64 <__assert_fail@plt+0x9564>
   18ec0:	mov	ip, r4
   18ec4:	cmn	ip, #1
   18ec8:	beq	18ddc <__assert_fail@plt+0x76dc>
   18ecc:	b	19bb0 <__assert_fail@plt+0x84b0>
   18ed0:	mov	r9, r0
   18ed4:	mov	r0, r7
   18ed8:	bl	13de4 <__assert_fail@plt+0x26e4>
   18edc:	cmp	r9, #0
   18ee0:	beq	19ea8 <__assert_fail@plt+0x87a8>
   18ee4:	b	18fe0 <__assert_fail@plt+0x78e0>
   18ee8:	ldr	r8, [sp, #84]	; 0x54
   18eec:	cmn	r7, #1
   18ef0:	ble	18f7c <__assert_fail@plt+0x787c>
   18ef4:	mov	r0, #1
   18ef8:	mov	ip, lr
   18efc:	str	r0, [sp, #56]	; 0x38
   18f00:	ldr	r0, [sp, #52]	; 0x34
   18f04:	cmp	r0, #0
   18f08:	beq	18fc0 <__assert_fail@plt+0x78c0>
   18f0c:	b	19358 <__assert_fail@plt+0x7c58>
   18f10:	ldr	r0, [r6, #8]
   18f14:	cmp	r0, #1
   18f18:	blt	190f4 <__assert_fail@plt+0x79f4>
   18f1c:	ldr	r4, [sp, #188]	; 0xbc
   18f20:	mov	r7, #0
   18f24:	b	19058 <__assert_fail@plt+0x7958>
   18f28:	ldr	r1, [sp, #76]	; 0x4c
   18f2c:	mov	r0, #0
   18f30:	mov	r6, r7
   18f34:	cmp	r7, r1
   18f38:	ldr	r1, [sp, #100]	; 0x64
   18f3c:	ldrblt	r0, [r1, r7]
   18f40:	cmp	lr, #0
   18f44:	ldrbne	r0, [lr, r0]
   18f48:	ldrb	r0, [r5, r0]
   18f4c:	cmp	r0, #0
   18f50:	bne	192b0 <__assert_fail@plt+0x7bb0>
   18f54:	b	1af54 <__assert_fail@plt+0x9854>
   18f58:	ldr	r0, [sp, #192]	; 0xc0
   18f5c:	and	r0, r0, #2
   18f60:	eor	r3, r0, #10
   18f64:	tst	r3, #1
   18f68:	beq	18e40 <__assert_fail@plt+0x7740>
   18f6c:	ldr	r6, [r4, #40]	; 0x28
   18f70:	cmp	r6, #0
   18f74:	bne	19314 <__assert_fail@plt+0x7c14>
   18f78:	b	1ac64 <__assert_fail@plt+0x9564>
   18f7c:	add	r0, sp, #104	; 0x68
   18f80:	mov	r1, r6
   18f84:	mov	r2, lr
   18f88:	mov	r4, lr
   18f8c:	bl	22d2c <__assert_fail@plt+0x1162c>
   18f90:	clz	r1, r0
   18f94:	cmp	r0, #0
   18f98:	mov	ip, r4
   18f9c:	mov	lr, r4
   18fa0:	lsr	r2, r1, #5
   18fa4:	ldr	r1, [sp, #52]	; 0x34
   18fa8:	movwne	r0, #1
   18fac:	mvneq	ip, #0
   18fb0:	str	r0, [sp, #56]	; 0x38
   18fb4:	orr	r1, r1, r2
   18fb8:	cmp	r1, #0
   18fbc:	bne	19358 <__assert_fail@plt+0x7c58>
   18fc0:	mov	ip, lr
   18fc4:	cmn	ip, #1
   18fc8:	beq	18ddc <__assert_fail@plt+0x76dc>
   18fcc:	b	19bb0 <__assert_fail@plt+0x84b0>
   18fd0:	str	r7, [sp, #20]
   18fd4:	b	18fe0 <__assert_fail@plt+0x78e0>
   18fd8:	mov	r0, #0
   18fdc:	str	r0, [sp, #20]
   18fe0:	mov	r0, r6
   18fe4:	bl	13de4 <__assert_fail@plt+0x26e4>
   18fe8:	ldr	r0, [sp, #20]
   18fec:	bl	13de4 <__assert_fail@plt+0x26e4>
   18ff0:	ldr	r7, [sp, #68]	; 0x44
   18ff4:	ldr	r6, [sp, #64]	; 0x40
   18ff8:	ldr	r8, [sp, #84]	; 0x54
   18ffc:	cmp	r9, #0
   19000:	beq	19ed8 <__assert_fail@plt+0x87d8>
   19004:	cmp	r9, #1
   19008:	beq	18ddc <__assert_fail@plt+0x76dc>
   1900c:	b	1ae6c <__assert_fail@plt+0x976c>
   19010:	mov	r0, r7
   19014:	mov	r9, lr
   19018:	bl	115f8 <iswalnum@plt>
   1901c:	mov	lr, r9
   19020:	cmp	r7, #95	; 0x5f
   19024:	beq	18f6c <__assert_fail@plt+0x786c>
   19028:	cmp	r0, #0
   1902c:	beq	18e24 <__assert_fail@plt+0x7724>
   19030:	b	18f6c <__assert_fail@plt+0x786c>
   19034:	ldr	r0, [sp, #236]	; 0xec
   19038:	lsl	r1, r9, #3
   1903c:	bl	2aab4 <__assert_fail@plt+0x193b4>
   19040:	cmp	r0, #0
   19044:	beq	19140 <__assert_fail@plt+0x7a40>
   19048:	str	r0, [sp, #236]	; 0xec
   1904c:	lsl	r0, r9, #1
   19050:	str	r0, [sp, #232]	; 0xe8
   19054:	b	190a4 <__assert_fail@plt+0x79a4>
   19058:	ldr	r1, [r6, #12]
   1905c:	ldr	r5, [r1, r7, lsl #2]
   19060:	ldr	r1, [r4]
   19064:	add	r2, r1, r5, lsl #3
   19068:	ldrb	r2, [r2, #4]
   1906c:	cmp	r2, #8
   19070:	bne	190e8 <__assert_fail@plt+0x79e8>
   19074:	ldr	r1, [r1, r5, lsl #3]
   19078:	cmp	r1, #31
   1907c:	bgt	190e8 <__assert_fail@plt+0x79e8>
   19080:	ldr	r2, [r4, #80]	; 0x50
   19084:	mov	r3, #1
   19088:	tst	r2, r3, lsl r1
   1908c:	beq	190e8 <__assert_fail@plt+0x79e8>
   19090:	ldr	r9, [sp, #228]	; 0xe4
   19094:	ldr	r0, [sp, #232]	; 0xe8
   19098:	mov	r8, lr
   1909c:	cmp	r9, r0
   190a0:	beq	19034 <__assert_fail@plt+0x7934>
   190a4:	mov	r0, #1
   190a8:	mov	r1, #24
   190ac:	bl	2aa30 <__assert_fail@plt+0x19330>
   190b0:	ldr	r1, [sp, #228]	; 0xe4
   190b4:	ldr	r2, [sp, #236]	; 0xec
   190b8:	str	r0, [r2, r1, lsl #2]
   190bc:	ldr	r0, [sp, #236]	; 0xec
   190c0:	ldr	r0, [r0, r1, lsl #2]
   190c4:	cmp	r0, #0
   190c8:	beq	19140 <__assert_fail@plt+0x7a40>
   190cc:	add	r1, r1, #1
   190d0:	str	r5, [r0, #4]
   190d4:	mov	lr, r8
   190d8:	str	r1, [sp, #228]	; 0xe4
   190dc:	mov	r1, #0
   190e0:	str	r1, [r0]
   190e4:	ldr	r0, [r6, #8]
   190e8:	add	r7, r7, #1
   190ec:	cmp	r7, r0
   190f0:	blt	19058 <__assert_fail@plt+0x7958>
   190f4:	mov	sl, #0
   190f8:	str	sl, [fp, #-196]	; 0xffffff3c
   190fc:	ldrb	r0, [r6, #52]	; 0x34
   19100:	tst	r0, #64	; 0x40
   19104:	beq	19338 <__assert_fail@plt+0x7c38>
   19108:	add	r1, r6, #4
   1910c:	add	r0, sp, #104	; 0x68
   19110:	mov	r4, lr
   19114:	bl	23160 <__assert_fail@plt+0x11a60>
   19118:	mov	sl, #0
   1911c:	mov	lr, r4
   19120:	cmp	r0, #0
   19124:	str	r0, [fp, #-196]	; 0xffffff3c
   19128:	beq	19338 <__assert_fail@plt+0x7c38>
   1912c:	ldr	r8, [sp, #84]	; 0x54
   19130:	mov	ip, r0
   19134:	cmn	ip, #1
   19138:	beq	18ddc <__assert_fail@plt+0x76dc>
   1913c:	b	19bb0 <__assert_fail@plt+0x84b0>
   19140:	mov	ip, #12
   19144:	b	19bb8 <__assert_fail@plt+0x84b8>
   19148:	ldr	r1, [sp, #80]	; 0x50
   1914c:	cmp	r1, #4
   19150:	bhi	191c0 <__assert_fail@plt+0x7ac0>
   19154:	add	r0, pc, #0
   19158:	ldr	pc, [r0, r1, lsl #2]
   1915c:	andeq	r9, r1, r0, ror r1
   19160:	andeq	r9, r1, r0, ror r1
   19164:	andeq	r9, r1, r8, asr #4
   19168:	andeq	r9, r1, r8, ror r2
   1916c:			; <UNDEFINED> instruction: 0x000192b0
   19170:	mov	r9, #1
   19174:	cmp	r6, r4
   19178:	blt	1ae6c <__assert_fail@plt+0x976c>
   1917c:	cmp	lr, #0
   19180:	beq	19cf8 <__assert_fail@plt+0x85f8>
   19184:	ldr	r1, [sp, #76]	; 0x4c
   19188:	mov	r0, #0
   1918c:	cmp	r6, r1
   19190:	ldrlt	r0, [sp, #100]	; 0x64
   19194:	ldrblt	r0, [r0, r6]
   19198:	ldrb	r0, [lr, r0]
   1919c:	ldrb	r0, [r5, r0]
   191a0:	cmp	r0, #0
   191a4:	bne	192b0 <__assert_fail@plt+0x7bb0>
   191a8:	sub	r0, r6, #1
   191ac:	cmp	r6, r4
   191b0:	mov	r6, r0
   191b4:	str	r0, [fp, #-200]	; 0xffffff38
   191b8:	bgt	19188 <__assert_fail@plt+0x7a88>
   191bc:	b	1ae6c <__assert_fail@plt+0x976c>
   191c0:	ldr	r0, [sp, #128]	; 0x80
   191c4:	ldr	r2, [sp, #136]	; 0x88
   191c8:	sub	r1, r6, r0
   191cc:	cmp	r1, r2
   191d0:	bcs	19214 <__assert_fail@plt+0x7b14>
   191d4:	ldr	r3, [sp, #132]	; 0x84
   191d8:	mov	r2, #0
   191dc:	cmp	r1, r3
   191e0:	ldrcc	r2, [sp, #108]	; 0x6c
   191e4:	ldrbcc	r2, [r2, r1]
   191e8:	ldrb	r1, [r5, r2]
   191ec:	cmp	r1, #0
   191f0:	bne	192b0 <__assert_fail@plt+0x7bb0>
   191f4:	add	r6, r6, r8
   191f8:	mov	r9, #1
   191fc:	cmp	r6, r4
   19200:	str	r6, [fp, #-200]	; 0xffffff38
   19204:	blt	1ae6c <__assert_fail@plt+0x976c>
   19208:	cmp	r6, r7
   1920c:	ble	191c4 <__assert_fail@plt+0x7ac4>
   19210:	b	1ae6c <__assert_fail@plt+0x976c>
   19214:	ldr	r2, [fp, #24]
   19218:	add	r0, sp, #104	; 0x68
   1921c:	mov	r1, r6
   19220:	bl	222bc <__assert_fail@plt+0x10bbc>
   19224:	cmp	r0, #0
   19228:	bne	1ac74 <__assert_fail@plt+0x9574>
   1922c:	ldr	r0, [sp, #128]	; 0x80
   19230:	ldr	r6, [fp, #-200]	; 0xffffff38
   19234:	ldr	r5, [sp, #92]	; 0x5c
   19238:	ldr	r7, [sp, #48]	; 0x30
   1923c:	ldr	r4, [sp, #44]	; 0x2c
   19240:	sub	r1, r6, r0
   19244:	b	191d4 <__assert_fail@plt+0x7ad4>
   19248:	ldr	r1, [sp, #100]	; 0x64
   1924c:	cmp	r6, r7
   19250:	bge	192a8 <__assert_fail@plt+0x7ba8>
   19254:	ldrb	r0, [r1, r6]
   19258:	ldrb	r0, [r5, r0]
   1925c:	cmp	r0, #0
   19260:	bne	192a8 <__assert_fail@plt+0x7ba8>
   19264:	add	r6, r6, #1
   19268:	cmp	r6, r7
   1926c:	str	r6, [fp, #-200]	; 0xffffff38
   19270:	blt	19254 <__assert_fail@plt+0x7b54>
   19274:	b	192a8 <__assert_fail@plt+0x7ba8>
   19278:	cmp	r6, r7
   1927c:	bge	192a8 <__assert_fail@plt+0x7ba8>
   19280:	ldr	r1, [sp, #100]	; 0x64
   19284:	ldrb	r0, [r1, r6]
   19288:	ldrb	r0, [lr, r0]
   1928c:	ldrb	r0, [r5, r0]
   19290:	cmp	r0, #0
   19294:	bne	192a8 <__assert_fail@plt+0x7ba8>
   19298:	add	r6, r6, #1
   1929c:	cmp	r6, r7
   192a0:	str	r6, [fp, #-200]	; 0xffffff38
   192a4:	blt	19284 <__assert_fail@plt+0x7b84>
   192a8:	cmp	r6, r7
   192ac:	beq	18f28 <__assert_fail@plt+0x7828>
   192b0:	ldr	r2, [fp, #24]
   192b4:	add	r0, sp, #104	; 0x68
   192b8:	mov	r1, r6
   192bc:	bl	222bc <__assert_fail@plt+0x10bbc>
   192c0:	cmp	r0, #0
   192c4:	bne	1ac74 <__assert_fail@plt+0x9574>
   192c8:	ldr	r0, [sp, #60]	; 0x3c
   192cc:	cmp	r0, #1
   192d0:	ldrne	r0, [sp, #132]	; 0x84
   192d4:	cmpne	r0, #0
   192d8:	bne	19c1c <__assert_fail@plt+0x851c>
   192dc:	mov	r0, #0
   192e0:	str	r0, [sp, #212]	; 0xd4
   192e4:	str	r0, [sp, #224]	; 0xe0
   192e8:	str	r0, [sp, #208]	; 0xd0
   192ec:	str	r0, [fp, #-196]	; 0xffffff3c
   192f0:	ldr	r4, [sp, #188]	; 0xbc
   192f4:	ldr	lr, [sp, #144]	; 0x90
   192f8:	ldr	r6, [r4, #36]	; 0x24
   192fc:	ldrsb	r0, [r6, #52]	; 0x34
   19300:	cmn	r0, #1
   19304:	ble	19c30 <__assert_fail@plt+0x8530>
   19308:	ldr	r5, [sp, #40]	; 0x28
   1930c:	cmp	r6, #0
   19310:	beq	1ac64 <__assert_fail@plt+0x9564>
   19314:	ldr	r0, [sp, #204]	; 0xcc
   19318:	mov	sl, r5
   1931c:	cmp	r0, #0
   19320:	beq	19338 <__assert_fail@plt+0x7c38>
   19324:	str	r6, [r0, lr, lsl #2]
   19328:	mov	sl, r5
   1932c:	ldr	r0, [r4, #76]	; 0x4c
   19330:	cmp	r0, #0
   19334:	bne	18f10 <__assert_fail@plt+0x7810>
   19338:	ldrb	r0, [r6, #52]	; 0x34
   1933c:	sxtb	r7, r0
   19340:	tst	r0, #16
   19344:	bne	18ee8 <__assert_fail@plt+0x77e8>
   19348:	ldr	r8, [sp, #84]	; 0x54
   1934c:	mov	r0, #0
   19350:	mvn	ip, #0
   19354:	str	r0, [sp, #56]	; 0x38
   19358:	ldr	r4, [sp, #144]	; 0x90
   1935c:	ldr	r0, [sp, #160]	; 0xa0
   19360:	cmp	r0, r4
   19364:	ble	19b84 <__assert_fail@plt+0x8484>
   19368:	ldr	r1, [sp, #36]	; 0x24
   1936c:	b	19a5c <__assert_fail@plt+0x835c>
   19370:	ldr	r0, [fp, #-196]	; 0xffffff3c
   19374:	cmp	r0, #0
   19378:	bne	1ac64 <__assert_fail@plt+0x9564>
   1937c:	ldr	r0, [sp, #56]	; 0x38
   19380:	ldr	r1, [sp, #52]	; 0x34
   19384:	clz	r0, r0
   19388:	lsr	r0, r0, #5
   1938c:	orr	r0, r1, r0
   19390:	cmp	r0, #1
   19394:	bne	18e94 <__assert_fail@plt+0x7794>
   19398:	ldr	r0, [sp, #204]	; 0xcc
   1939c:	cmp	r0, #0
   193a0:	beq	18e94 <__assert_fail@plt+0x7794>
   193a4:	mov	r5, lr
   193a8:	b	19414 <__assert_fail@plt+0x7d14>
   193ac:	ldr	r4, [sp, #144]	; 0x90
   193b0:	ldr	r8, [sp, #84]	; 0x54
   193b4:	cmn	r7, #1
   193b8:	bgt	193e0 <__assert_fail@plt+0x7ce0>
   193bc:	add	r0, sp, #104	; 0x68
   193c0:	mov	r1, r6
   193c4:	mov	r2, r4
   193c8:	mov	r9, ip
   193cc:	mov	r5, lr
   193d0:	bl	22d2c <__assert_fail@plt+0x1162c>
   193d4:	mov	lr, r5
   193d8:	cmp	r0, #0
   193dc:	beq	1947c <__assert_fail@plt+0x7d7c>
   193e0:	ldr	r0, [sp, #52]	; 0x34
   193e4:	cmp	r0, #0
   193e8:	beq	18ec0 <__assert_fail@plt+0x77c0>
   193ec:	mov	r0, #1
   193f0:	mov	r1, #0
   193f4:	mov	ip, r4
   193f8:	str	r0, [sp, #56]	; 0x38
   193fc:	ldr	r0, [sp, #160]	; 0xa0
   19400:	cmp	r0, r4
   19404:	bgt	19a5c <__assert_fail@plt+0x835c>
   19408:	b	19b98 <__assert_fail@plt+0x8498>
   1940c:	ldr	r0, [sp, #204]	; 0xcc
   19410:	mov	ip, r4
   19414:	ldr	r2, [sp, #144]	; 0x90
   19418:	ldr	r1, [sp, #208]	; 0xd0
   1941c:	add	r2, r2, #1
   19420:	sub	r3, r2, #1
   19424:	cmp	r3, r1
   19428:	bge	19b8c <__assert_fail@plt+0x848c>
   1942c:	str	r2, [sp, #144]	; 0x90
   19430:	ldr	r3, [r0, r2, lsl #2]
   19434:	add	r2, r2, #1
   19438:	cmp	r3, #0
   1943c:	beq	19420 <__assert_fail@plt+0x7d20>
   19440:	sub	r0, fp, #196	; 0xc4
   19444:	add	r1, sp, #104	; 0x68
   19448:	mov	r2, #0
   1944c:	mov	r4, ip
   19450:	bl	23da8 <__assert_fail@plt+0x126a8>
   19454:	cmp	r0, #0
   19458:	mov	r6, r0
   1945c:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   19460:	cmpeq	r0, #0
   19464:	beq	1940c <__assert_fail@plt+0x7d0c>
   19468:	cmp	r6, #0
   1946c:	mov	ip, r4
   19470:	mov	lr, r5
   19474:	bne	19b44 <__assert_fail@plt+0x8444>
   19478:	b	18e94 <__assert_fail@plt+0x7794>
   1947c:	ldr	r1, [sp, #72]	; 0x48
   19480:	mov	ip, r9
   19484:	ldr	r0, [sp, #160]	; 0xa0
   19488:	cmp	r0, r4
   1948c:	bgt	19a5c <__assert_fail@plt+0x835c>
   19490:	b	19b98 <__assert_fail@plt+0x8498>
   19494:	add	r1, r4, #2
   19498:	add	r0, sp, #104	; 0x68
   1949c:	mov	r4, ip
   194a0:	mov	r5, lr
   194a4:	bl	23b98 <__assert_fail@plt+0x12498>
   194a8:	cmp	r0, #0
   194ac:	str	r0, [fp, #-196]	; 0xffffff3c
   194b0:	bne	1ac64 <__assert_fail@plt+0x9564>
   194b4:	ldrb	r7, [r8, #52]	; 0x34
   194b8:	mov	lr, r5
   194bc:	mov	ip, r4
   194c0:	tst	r7, #32
   194c4:	beq	19a9c <__assert_fail@plt+0x839c>
   194c8:	ldr	r0, [r8, #8]
   194cc:	cmp	r0, #1
   194d0:	blt	19904 <__assert_fail@plt+0x8204>
   194d4:	ldr	r0, [sp, #188]	; 0xbc
   194d8:	mov	r6, #0
   194dc:	str	r0, [sp, #20]
   194e0:	stmib	sp, {sl, lr}
   194e4:	str	r8, [sp, #12]
   194e8:	b	198c8 <__assert_fail@plt+0x81c8>
   194ec:	movw	r0, #65280	; 0xff00
   194f0:	movt	r0, #3
   194f4:	tst	r7, r0
   194f8:	beq	1961c <__assert_fail@plt+0x7f1c>
   194fc:	ldr	r0, [sp, #144]	; 0x90
   19500:	cmn	r0, #1
   19504:	ble	19548 <__assert_fail@plt+0x7e48>
   19508:	ldr	r1, [sp, #152]	; 0x98
   1950c:	mov	r8, sl
   19510:	cmp	r1, r0
   19514:	beq	19830 <__assert_fail@plt+0x8130>
   19518:	ldr	r1, [sp, #184]	; 0xb8
   1951c:	cmp	r1, #2
   19520:	blt	19560 <__assert_fail@plt+0x7e60>
   19524:	ldr	r1, [sp, #112]	; 0x70
   19528:	mov	sl, r8
   1952c:	ldr	r4, [r1, r0, lsl #2]
   19530:	cmn	r4, #1
   19534:	bne	1959c <__assert_fail@plt+0x7e9c>
   19538:	sub	r2, r0, #1
   1953c:	cmp	r0, #0
   19540:	mov	r0, r2
   19544:	bgt	1952c <__assert_fail@plt+0x7e2c>
   19548:	ldr	r1, [sp, #164]	; 0xa4
   1954c:	and	r0, r1, #1
   19550:	tst	r7, #1024	; 0x400
   19554:	eor	r2, r0, #1
   19558:	bne	195d0 <__assert_fail@plt+0x7ed0>
   1955c:	b	195d8 <__assert_fail@plt+0x7ed8>
   19560:	ldr	r1, [sp, #108]	; 0x6c
   19564:	ldr	r2, [sp, #172]	; 0xac
   19568:	mov	sl, r8
   1956c:	ldrb	r0, [r1, r0]
   19570:	ubfx	r1, r0, #5, #3
   19574:	and	r5, r0, #31
   19578:	ldr	r3, [r2, r1, lsl #2]
   1957c:	mov	r1, #1
   19580:	mov	r2, #0
   19584:	tst	r3, r1, lsl r5
   19588:	bne	195d8 <__assert_fail@plt+0x7ed8>
   1958c:	mov	r1, #0
   19590:	cmp	r0, #10
   19594:	beq	195b4 <__assert_fail@plt+0x7eb4>
   19598:	b	195c0 <__assert_fail@plt+0x7ec0>
   1959c:	ldrb	r0, [sp, #182]	; 0xb6
   195a0:	cmp	r0, #0
   195a4:	bne	19864 <__assert_fail@plt+0x8164>
   195a8:	mov	r1, #0
   195ac:	cmp	r4, #10
   195b0:	bne	195c0 <__assert_fail@plt+0x7ec0>
   195b4:	ldrb	r1, [sp, #181]	; 0xb5
   195b8:	cmp	r1, #0
   195bc:	movwne	r1, #2
   195c0:	and	r0, r1, #1
   195c4:	tst	r7, #1024	; 0x400
   195c8:	eor	r2, r0, #1
   195cc:	beq	195d8 <__assert_fail@plt+0x7ed8>
   195d0:	cmp	r0, #0
   195d4:	beq	198f0 <__assert_fail@plt+0x81f0>
   195d8:	ldr	r0, [sp, #20]
   195dc:	ldr	r4, [sp, #16]
   195e0:	cmp	r2, #0
   195e4:	ldr	r0, [r0]
   195e8:	add	r0, r0, r4, lsl #3
   195ec:	ldr	r0, [r0, #4]
   195f0:	bne	195fc <__assert_fail@plt+0x7efc>
   195f4:	ands	r2, r0, #2048	; 0x800
   195f8:	bne	198f0 <__assert_fail@plt+0x81f0>
   195fc:	tst	r1, #2
   19600:	bne	1960c <__assert_fail@plt+0x7f0c>
   19604:	ands	r2, r0, #8192	; 0x2000
   19608:	bne	198f0 <__assert_fail@plt+0x81f0>
   1960c:	tst	r1, #8
   19610:	bne	1961c <__assert_fail@plt+0x7f1c>
   19614:	ands	r0, r0, #32768	; 0x8000
   19618:	bne	198f0 <__assert_fail@plt+0x81f0>
   1961c:	ldr	r3, [sp, #144]	; 0x90
   19620:	ldr	r0, [sp, #20]
   19624:	ldr	r1, [sp, #16]
   19628:	add	r2, sp, #104	; 0x68
   1962c:	mov	r5, ip
   19630:	bl	25910 <__assert_fail@plt+0x14210>
   19634:	ldmib	sp, {sl, lr}
   19638:	mov	ip, r5
   1963c:	cmp	r0, #0
   19640:	beq	198f0 <__assert_fail@plt+0x81f0>
   19644:	ldr	r1, [sp, #224]	; 0xe0
   19648:	cmp	r1, r0
   1964c:	movlt	r1, r0
   19650:	str	r1, [sp, #224]	; 0xe0
   19654:	ldr	r3, [sp, #144]	; 0x90
   19658:	ldr	r2, [sp, #140]	; 0x8c
   1965c:	ldr	r1, [sp, #152]	; 0x98
   19660:	ldr	r4, [sp, #208]	; 0xd0
   19664:	add	r3, r3, r0
   19668:	cmp	r2, r3
   1966c:	mov	r8, r3
   19670:	cmple	r2, r1
   19674:	blt	19688 <__assert_fail@plt+0x7f88>
   19678:	ldr	r0, [sp, #132]	; 0x84
   1967c:	cmp	r0, r3
   19680:	cmple	r0, r1
   19684:	bge	196a0 <__assert_fail@plt+0x7fa0>
   19688:	add	r1, r3, #1
   1968c:	add	r0, sp, #104	; 0x68
   19690:	bl	23b98 <__assert_fail@plt+0x12498>
   19694:	mov	r3, r8
   19698:	cmp	r0, #0
   1969c:	bne	199e4 <__assert_fail@plt+0x82e4>
   196a0:	cmp	r3, r4
   196a4:	ble	196cc <__assert_fail@plt+0x7fcc>
   196a8:	sub	r0, r3, r4
   196ac:	mov	r1, #0
   196b0:	lsl	r2, r0, #2
   196b4:	ldr	r0, [sp, #204]	; 0xcc
   196b8:	add	r0, r0, r4, lsl #2
   196bc:	add	r0, r0, #4
   196c0:	bl	11610 <memset@plt>
   196c4:	mov	r3, r8
   196c8:	str	r8, [sp, #208]	; 0xd0
   196cc:	mov	r0, #0
   196d0:	ldr	r1, [sp, #20]
   196d4:	ldr	r2, [sp, #16]
   196d8:	str	r0, [fp, #-48]	; 0xffffffd0
   196dc:	ldr	r0, [sp, #204]	; 0xcc
   196e0:	ldr	r7, [r0, r3, lsl #2]
   196e4:	ldr	r0, [r1, #12]
   196e8:	ldr	r1, [r1, #24]
   196ec:	ldr	r0, [r0, r2, lsl #2]
   196f0:	cmp	r7, #0
   196f4:	add	r0, r0, r0, lsl #1
   196f8:	add	r2, r1, r0, lsl #2
   196fc:	beq	19720 <__assert_fail@plt+0x8020>
   19700:	ldr	r1, [r7, #40]	; 0x28
   19704:	sub	r0, fp, #192	; 0xc0
   19708:	bl	23ffc <__assert_fail@plt+0x128fc>
   1970c:	mov	r3, r8
   19710:	cmp	r0, #0
   19714:	str	r0, [fp, #-48]	; 0xffffffd0
   19718:	beq	19730 <__assert_fail@plt+0x8030>
   1971c:	b	199e8 <__assert_fail@plt+0x82e8>
   19720:	vldr	d16, [r2]
   19724:	ldr	r0, [r2, #8]
   19728:	str	r0, [fp, #-184]	; 0xffffff48
   1972c:	vstr	d16, [fp, #-192]	; 0xffffff40
   19730:	cmp	r3, #0
   19734:	ble	19778 <__assert_fail@plt+0x8078>
   19738:	ldr	r1, [sp, #152]	; 0x98
   1973c:	sub	r0, r3, #1
   19740:	cmp	r1, r0
   19744:	beq	19854 <__assert_fail@plt+0x8154>
   19748:	ldr	r1, [sp, #184]	; 0xb8
   1974c:	cmp	r1, #2
   19750:	blt	19780 <__assert_fail@plt+0x8080>
   19754:	ldr	r0, [sp, #112]	; 0x70
   19758:	mov	r1, r3
   1975c:	sub	r0, r0, #4
   19760:	ldr	r4, [r0, r1, lsl #2]
   19764:	cmn	r4, #1
   19768:	bne	197b4 <__assert_fail@plt+0x80b4>
   1976c:	sub	r1, r1, #1
   19770:	cmp	r1, #0
   19774:	bgt	19760 <__assert_fail@plt+0x8060>
   19778:	ldr	r3, [sp, #164]	; 0xa4
   1977c:	b	197d8 <__assert_fail@plt+0x80d8>
   19780:	ldr	r1, [sp, #108]	; 0x6c
   19784:	ldr	r2, [sp, #172]	; 0xac
   19788:	mov	r3, #1
   1978c:	ldrb	r0, [r1, r0]
   19790:	ubfx	r1, r0, #5, #3
   19794:	ldr	r1, [r2, r1, lsl #2]
   19798:	and	r2, r0, #31
   1979c:	tst	r1, r3, lsl r2
   197a0:	bne	197d8 <__assert_fail@plt+0x80d8>
   197a4:	mov	r3, #0
   197a8:	cmp	r0, #10
   197ac:	beq	197cc <__assert_fail@plt+0x80cc>
   197b0:	b	197d8 <__assert_fail@plt+0x80d8>
   197b4:	ldrb	r0, [sp, #182]	; 0xb6
   197b8:	cmp	r0, #0
   197bc:	bne	19898 <__assert_fail@plt+0x8198>
   197c0:	mov	r3, #0
   197c4:	cmp	r4, #10
   197c8:	bne	197d8 <__assert_fail@plt+0x80d8>
   197cc:	ldrb	r3, [sp, #181]	; 0xb5
   197d0:	cmp	r3, #0
   197d4:	movwne	r3, #2
   197d8:	ldr	r1, [sp, #20]
   197dc:	sub	r0, fp, #48	; 0x30
   197e0:	sub	r2, fp, #192	; 0xc0
   197e4:	bl	217bc <__assert_fail@plt+0x100bc>
   197e8:	ldr	r1, [sp, #204]	; 0xcc
   197ec:	mov	r2, r8
   197f0:	cmp	r7, #0
   197f4:	str	r0, [r1, r8, lsl #2]
   197f8:	beq	19808 <__assert_fail@plt+0x8108>
   197fc:	ldr	r0, [fp, #-184]	; 0xffffff48
   19800:	bl	13de4 <__assert_fail@plt+0x26e4>
   19804:	mov	r2, r8
   19808:	ldr	r0, [sp, #204]	; 0xcc
   1980c:	mov	ip, r5
   19810:	ldr	r0, [r0, r2, lsl #2]
   19814:	ldmib	sp, {sl, lr}
   19818:	cmp	r0, #0
   1981c:	bne	198f0 <__assert_fail@plt+0x81f0>
   19820:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19824:	cmp	r0, #0
   19828:	beq	198f0 <__assert_fail@plt+0x81f0>
   1982c:	b	199f0 <__assert_fail@plt+0x82f0>
   19830:	ldr	r0, [sp, #192]	; 0xc0
   19834:	mov	sl, r8
   19838:	and	r0, r0, #2
   1983c:	eor	r1, r0, #10
   19840:	and	r0, r1, #1
   19844:	tst	r7, #1024	; 0x400
   19848:	eor	r2, r0, #1
   1984c:	bne	195d0 <__assert_fail@plt+0x7ed0>
   19850:	b	195d8 <__assert_fail@plt+0x7ed8>
   19854:	ldr	r0, [sp, #192]	; 0xc0
   19858:	and	r0, r0, #2
   1985c:	eor	r3, r0, #10
   19860:	b	197d8 <__assert_fail@plt+0x80d8>
   19864:	mov	r0, r4
   19868:	mov	r5, ip
   1986c:	bl	115f8 <iswalnum@plt>
   19870:	mov	r1, #1
   19874:	mov	r2, #0
   19878:	cmp	r4, #95	; 0x5f
   1987c:	beq	198b8 <__assert_fail@plt+0x81b8>
   19880:	ldr	lr, [sp, #8]
   19884:	cmp	r0, #0
   19888:	mov	ip, r5
   1988c:	mov	sl, r8
   19890:	beq	195a8 <__assert_fail@plt+0x7ea8>
   19894:	b	195d8 <__assert_fail@plt+0x7ed8>
   19898:	mov	r0, r4
   1989c:	bl	115f8 <iswalnum@plt>
   198a0:	mov	r3, #1
   198a4:	cmp	r4, #95	; 0x5f
   198a8:	beq	197d8 <__assert_fail@plt+0x80d8>
   198ac:	cmp	r0, #0
   198b0:	beq	197c0 <__assert_fail@plt+0x80c0>
   198b4:	b	197d8 <__assert_fail@plt+0x80d8>
   198b8:	ldr	lr, [sp, #8]
   198bc:	mov	ip, r5
   198c0:	mov	sl, r8
   198c4:	b	195d8 <__assert_fail@plt+0x7ed8>
   198c8:	ldr	r0, [r8, #12]
   198cc:	ldr	r2, [r0, r6, lsl #2]
   198d0:	ldr	r0, [sp, #20]
   198d4:	ldr	r0, [r0]
   198d8:	mov	r1, r2
   198dc:	str	r2, [sp, #16]
   198e0:	add	r0, r0, r2, lsl #3
   198e4:	ldr	r7, [r0, #4]
   198e8:	tst	r7, #1048576	; 0x100000
   198ec:	bne	194ec <__assert_fail@plt+0x7dec>
   198f0:	ldr	r8, [sp, #12]
   198f4:	add	r6, r6, #1
   198f8:	ldr	r0, [r8, #8]
   198fc:	cmp	r6, r0
   19900:	blt	198c8 <__assert_fail@plt+0x81c8>
   19904:	mov	r0, #0
   19908:	str	r0, [fp, #-196]	; 0xffffff3c
   1990c:	b	19a9c <__assert_fail@plt+0x839c>
   19910:	ldr	r0, [sp, #144]	; 0x90
   19914:	mov	r5, r8
   19918:	cmp	r0, #0
   1991c:	ble	19964 <__assert_fail@plt+0x8264>
   19920:	ldr	r2, [sp, #152]	; 0x98
   19924:	sub	r1, r0, #1
   19928:	mov	r8, sl
   1992c:	cmp	r2, r1
   19930:	beq	19a0c <__assert_fail@plt+0x830c>
   19934:	ldr	r2, [sp, #184]	; 0xb8
   19938:	cmp	r2, #2
   1993c:	blt	1996c <__assert_fail@plt+0x826c>
   19940:	ldr	r1, [sp, #112]	; 0x70
   19944:	mov	sl, r8
   19948:	sub	r1, r1, #4
   1994c:	ldr	r4, [r1, r0, lsl #2]
   19950:	cmn	r4, #1
   19954:	bne	199a4 <__assert_fail@plt+0x82a4>
   19958:	sub	r0, r0, #1
   1995c:	cmp	r0, #0
   19960:	bgt	1994c <__assert_fail@plt+0x824c>
   19964:	ldr	r1, [sp, #164]	; 0xa4
   19968:	b	199c8 <__assert_fail@plt+0x82c8>
   1996c:	ldr	r0, [sp, #108]	; 0x6c
   19970:	ldr	r2, [sp, #172]	; 0xac
   19974:	mov	sl, r8
   19978:	ldrb	r0, [r0, r1]
   1997c:	ubfx	r1, r0, #5, #3
   19980:	and	r3, r0, #31
   19984:	ldr	r2, [r2, r1, lsl #2]
   19988:	mov	r1, #1
   1998c:	tst	r2, r1, lsl r3
   19990:	bne	199c8 <__assert_fail@plt+0x82c8>
   19994:	mov	r1, #0
   19998:	cmp	r0, #10
   1999c:	beq	199bc <__assert_fail@plt+0x82bc>
   199a0:	b	199c8 <__assert_fail@plt+0x82c8>
   199a4:	ldrb	r0, [sp, #182]	; 0xb6
   199a8:	cmp	r0, #0
   199ac:	bne	19a18 <__assert_fail@plt+0x8318>
   199b0:	mov	r1, #0
   199b4:	cmp	r4, #10
   199b8:	bne	199c8 <__assert_fail@plt+0x82c8>
   199bc:	ldrb	r1, [sp, #181]	; 0xb5
   199c0:	cmp	r1, #0
   199c4:	movwne	r1, #2
   199c8:	bfi	r6, r1, #8, #1
   199cc:	mov	r8, r5
   199d0:	ldr	r6, [r7, r6, lsl #2]
   199d4:	ldr	r0, [sp, #204]	; 0xcc
   199d8:	cmp	r0, #0
   199dc:	bne	19b18 <__assert_fail@plt+0x8418>
   199e0:	b	19b3c <__assert_fail@plt+0x843c>
   199e4:	str	r0, [fp, #-48]	; 0xffffffd0
   199e8:	ldmib	sp, {sl, lr}
   199ec:	mov	ip, r5
   199f0:	ldr	r8, [sp, #12]
   199f4:	str	r0, [fp, #-196]	; 0xffffff3c
   199f8:	mov	r6, #0
   199fc:	ldr	r0, [sp, #204]	; 0xcc
   19a00:	cmp	r0, #0
   19a04:	bne	19b18 <__assert_fail@plt+0x8418>
   19a08:	b	19b3c <__assert_fail@plt+0x843c>
   19a0c:	mov	r1, #10
   19a10:	mov	sl, r8
   19a14:	b	199c8 <__assert_fail@plt+0x82c8>
   19a18:	mov	r0, r4
   19a1c:	str	lr, [sp, #8]
   19a20:	str	ip, [sp, #20]
   19a24:	bl	115f8 <iswalnum@plt>
   19a28:	mov	r1, #1
   19a2c:	cmp	r4, #95	; 0x5f
   19a30:	beq	19a4c <__assert_fail@plt+0x834c>
   19a34:	ldr	ip, [sp, #20]
   19a38:	ldr	lr, [sp, #8]
   19a3c:	cmp	r0, #0
   19a40:	mov	sl, r8
   19a44:	beq	199b0 <__assert_fail@plt+0x82b0>
   19a48:	b	199c8 <__assert_fail@plt+0x82c8>
   19a4c:	ldr	ip, [sp, #20]
   19a50:	ldr	lr, [sp, #8]
   19a54:	mov	sl, r8
   19a58:	b	199c8 <__assert_fail@plt+0x82c8>
   19a5c:	str	r1, [sp, #72]	; 0x48
   19a60:	ldr	r1, [sp, #140]	; 0x8c
   19a64:	ldr	r0, [sp, #152]	; 0x98
   19a68:	add	r9, r4, #1
   19a6c:	mov	r8, r6
   19a70:	cmp	r9, r1
   19a74:	blt	19a80 <__assert_fail@plt+0x8380>
   19a78:	cmp	r1, r0
   19a7c:	blt	19494 <__assert_fail@plt+0x7d94>
   19a80:	ldr	r1, [sp, #132]	; 0x84
   19a84:	cmp	r9, r1
   19a88:	blt	19a94 <__assert_fail@plt+0x8394>
   19a8c:	cmp	r1, r0
   19a90:	blt	19494 <__assert_fail@plt+0x7d94>
   19a94:	tst	r7, #32
   19a98:	bne	194c8 <__assert_fail@plt+0x7dc8>
   19a9c:	ldr	r1, [sp, #144]	; 0x90
   19aa0:	ldr	r0, [sp, #108]	; 0x6c
   19aa4:	add	r2, r1, #1
   19aa8:	str	r2, [sp, #144]	; 0x90
   19aac:	ldrb	r6, [r0, r1]
   19ab0:	ldr	r0, [r8, #44]	; 0x2c
   19ab4:	cmp	r0, #0
   19ab8:	bne	19b08 <__assert_fail@plt+0x8408>
   19abc:	ldr	r7, [r8, #48]	; 0x30
   19ac0:	cmp	r7, #0
   19ac4:	bne	19910 <__assert_fail@plt+0x8210>
   19ac8:	ldr	r0, [sp, #188]	; 0xbc
   19acc:	mov	r1, r8
   19ad0:	mov	r4, ip
   19ad4:	mov	r5, lr
   19ad8:	bl	25e58 <__assert_fail@plt+0x14758>
   19adc:	mov	lr, r5
   19ae0:	mov	ip, r4
   19ae4:	cmp	r0, #0
   19ae8:	bne	19ab0 <__assert_fail@plt+0x83b0>
   19aec:	mov	r0, #12
   19af0:	mov	r6, #0
   19af4:	str	r0, [fp, #-196]	; 0xffffff3c
   19af8:	ldr	r0, [sp, #204]	; 0xcc
   19afc:	cmp	r0, #0
   19b00:	bne	19b18 <__assert_fail@plt+0x8418>
   19b04:	b	19b3c <__assert_fail@plt+0x843c>
   19b08:	ldr	r6, [r0, r6, lsl #2]
   19b0c:	ldr	r0, [sp, #204]	; 0xcc
   19b10:	cmp	r0, #0
   19b14:	beq	19b3c <__assert_fail@plt+0x843c>
   19b18:	sub	r0, fp, #196	; 0xc4
   19b1c:	add	r1, sp, #104	; 0x68
   19b20:	mov	r2, r6
   19b24:	mov	r4, ip
   19b28:	mov	r5, lr
   19b2c:	bl	23da8 <__assert_fail@plt+0x126a8>
   19b30:	mov	lr, r5
   19b34:	mov	ip, r4
   19b38:	mov	r6, r0
   19b3c:	cmp	r6, #0
   19b40:	beq	19370 <__assert_fail@plt+0x7c70>
   19b44:	sub	r0, r8, r6
   19b48:	clz	r0, r0
   19b4c:	lsr	r0, r0, #5
   19b50:	ands	sl, sl, r0
   19b54:	ldrb	r0, [r6, #52]	; 0x34
   19b58:	movne	lr, r9
   19b5c:	sxtb	r7, r0
   19b60:	tst	r0, #16
   19b64:	bne	193ac <__assert_fail@plt+0x7cac>
   19b68:	ldr	r4, [sp, #144]	; 0x90
   19b6c:	ldr	r8, [sp, #84]	; 0x54
   19b70:	ldr	r1, [sp, #72]	; 0x48
   19b74:	ldr	r0, [sp, #160]	; 0xa0
   19b78:	cmp	r0, r4
   19b7c:	bgt	19a5c <__assert_fail@plt+0x835c>
   19b80:	b	19b98 <__assert_fail@plt+0x8498>
   19b84:	ldr	r1, [sp, #36]	; 0x24
   19b88:	b	19b98 <__assert_fail@plt+0x8498>
   19b8c:	ldr	r8, [sp, #84]	; 0x54
   19b90:	ldr	r1, [sp, #72]	; 0x48
   19b94:	mov	lr, r5
   19b98:	cmp	r1, #0
   19b9c:	ldrne	r0, [r1]
   19ba0:	addne	r0, r0, lr
   19ba4:	strne	r0, [r1]
   19ba8:	cmn	ip, #1
   19bac:	beq	18ddc <__assert_fail@plt+0x76dc>
   19bb0:	cmn	ip, #2
   19bb4:	beq	1ac64 <__assert_fail@plt+0x9564>
   19bb8:	ldr	r7, [sp, #68]	; 0x44
   19bbc:	ldr	r6, [sp, #64]	; 0x40
   19bc0:	mov	r8, ip
   19bc4:	str	ip, [sp, #196]	; 0xc4
   19bc8:	cmp	r7, #2
   19bcc:	bcc	19c8c <__assert_fail@plt+0x858c>
   19bd0:	ldrb	r0, [r6, #28]
   19bd4:	ands	r0, r0, #16
   19bd8:	bne	19c8c <__assert_fail@plt+0x858c>
   19bdc:	ldr	r0, [sp, #204]	; 0xcc
   19be0:	mov	r2, ip
   19be4:	ldr	r1, [r0, ip, lsl #2]
   19be8:	add	r0, sp, #104	; 0x68
   19bec:	bl	22d2c <__assert_fail@plt+0x1162c>
   19bf0:	ldr	sl, [sp, #96]	; 0x60
   19bf4:	str	r0, [sp, #200]	; 0xc8
   19bf8:	mov	r5, r0
   19bfc:	ldrb	r0, [sl, #88]	; 0x58
   19c00:	tst	r0, #1
   19c04:	bne	19d30 <__assert_fail@plt+0x8630>
   19c08:	ldr	r0, [sl, #76]	; 0x4c
   19c0c:	mov	r1, r8
   19c10:	cmp	r0, #0
   19c14:	bne	19cbc <__assert_fail@plt+0x85bc>
   19c18:	b	19ed8 <__assert_fail@plt+0x87d8>
   19c1c:	ldr	r0, [sp, #112]	; 0x70
   19c20:	ldr	r0, [r0]
   19c24:	cmn	r0, #1
   19c28:	bne	192dc <__assert_fail@plt+0x7bdc>
   19c2c:	b	18de4 <__assert_fail@plt+0x76e4>
   19c30:	ldr	r5, [sp, #40]	; 0x28
   19c34:	cmp	lr, #0
   19c38:	ble	19c7c <__assert_fail@plt+0x857c>
   19c3c:	ldr	r1, [sp, #152]	; 0x98
   19c40:	sub	r0, lr, #1
   19c44:	cmp	r1, r0
   19c48:	beq	18f58 <__assert_fail@plt+0x7858>
   19c4c:	ldr	r1, [sp, #184]	; 0xb8
   19c50:	cmp	r1, #2
   19c54:	blt	19cc8 <__assert_fail@plt+0x85c8>
   19c58:	ldr	r0, [sp, #112]	; 0x70
   19c5c:	mov	r1, lr
   19c60:	sub	r0, r0, #4
   19c64:	ldr	r7, [r0, r1, lsl #2]
   19c68:	cmn	r7, #1
   19c6c:	bne	18e18 <__assert_fail@plt+0x7718>
   19c70:	sub	r1, r1, #1
   19c74:	cmp	r1, #0
   19c78:	bgt	19c64 <__assert_fail@plt+0x8564>
   19c7c:	ldr	r3, [sp, #164]	; 0xa4
   19c80:	tst	r3, #1
   19c84:	beq	18e40 <__assert_fail@plt+0x7740>
   19c88:	b	18f6c <__assert_fail@plt+0x786c>
   19c8c:	ldr	sl, [sp, #96]	; 0x60
   19c90:	ldr	r0, [sl, #76]	; 0x4c
   19c94:	cmp	r0, #0
   19c98:	beq	19ed8 <__assert_fail@plt+0x87d8>
   19c9c:	ldr	r0, [sp, #204]	; 0xcc
   19ca0:	mov	r2, ip
   19ca4:	ldr	r1, [r0, ip, lsl #2]
   19ca8:	add	r0, sp, #104	; 0x68
   19cac:	bl	22d2c <__assert_fail@plt+0x1162c>
   19cb0:	mov	r1, r8
   19cb4:	mov	r5, r0
   19cb8:	str	r0, [sp, #200]	; 0xc8
   19cbc:	cmn	r1, #-1073741823	; 0xc0000001
   19cc0:	bcc	19d3c <__assert_fail@plt+0x863c>
   19cc4:	b	1ac64 <__assert_fail@plt+0x9564>
   19cc8:	ldr	r1, [sp, #108]	; 0x6c
   19ccc:	ldr	r2, [sp, #172]	; 0xac
   19cd0:	mov	r3, #1
   19cd4:	ldrb	r0, [r1, r0]
   19cd8:	ubfx	r1, r0, #5, #3
   19cdc:	ldr	r1, [r2, r1, lsl #2]
   19ce0:	and	r2, r0, #31
   19ce4:	tst	r1, r3, lsl r2
   19ce8:	bne	18f6c <__assert_fail@plt+0x786c>
   19cec:	cmp	r0, #10
   19cf0:	beq	18e2c <__assert_fail@plt+0x772c>
   19cf4:	b	18f70 <__assert_fail@plt+0x7870>
   19cf8:	ldr	r1, [sp, #76]	; 0x4c
   19cfc:	mov	r0, #0
   19d00:	cmp	r6, r1
   19d04:	ldrlt	r0, [sp, #100]	; 0x64
   19d08:	ldrblt	r0, [r0, r6]
   19d0c:	ldrb	r0, [r5, r0]
   19d10:	cmp	r0, #0
   19d14:	bne	192b0 <__assert_fail@plt+0x7bb0>
   19d18:	sub	r0, r6, #1
   19d1c:	cmp	r6, r4
   19d20:	mov	r6, r0
   19d24:	str	r0, [fp, #-200]	; 0xffffff38
   19d28:	bgt	19cfc <__assert_fail@plt+0x85fc>
   19d2c:	b	1ae6c <__assert_fail@plt+0x976c>
   19d30:	mov	r1, r8
   19d34:	cmn	r1, #-1073741823	; 0xc0000001
   19d38:	bcs	1ac64 <__assert_fail@plt+0x9564>
   19d3c:	ldr	r0, [sp, #188]	; 0xbc
   19d40:	str	r0, [sp, #72]	; 0x48
   19d44:	mov	r0, #4
   19d48:	add	r4, r0, r1, lsl #2
   19d4c:	mov	r0, r4
   19d50:	bl	2aa84 <__assert_fail@plt+0x19384>
   19d54:	mov	r6, r0
   19d58:	cmp	r0, #0
   19d5c:	beq	1aecc <__assert_fail@plt+0x97cc>
   19d60:	ldr	r0, [sp, #72]	; 0x48
   19d64:	str	r5, [sp, #56]	; 0x38
   19d68:	ldr	r0, [r0, #76]	; 0x4c
   19d6c:	cmp	r0, #0
   19d70:	beq	18c9c <__assert_fail@plt+0x759c>
   19d74:	mov	r0, r4
   19d78:	bl	2aa84 <__assert_fail@plt+0x19384>
   19d7c:	cmp	r0, #0
   19d80:	beq	1aecc <__assert_fail@plt+0x97cc>
   19d84:	mov	r1, #0
   19d88:	mov	r2, r4
   19d8c:	mov	r7, r0
   19d90:	bl	11610 <memset@plt>
   19d94:	ldr	r0, [sp, #32]
   19d98:	mov	r1, #0
   19d9c:	str	r6, [fp, #-192]	; 0xffffff40
   19da0:	str	r7, [fp, #-188]	; 0xffffff44
   19da4:	str	r5, [fp, #-184]	; 0xffffff48
   19da8:	str	r8, [fp, #-180]	; 0xffffff4c
   19dac:	str	r1, [r0]
   19db0:	str	r1, [r0, #4]
   19db4:	str	r1, [r0, #8]
   19db8:	add	r0, sp, #104	; 0x68
   19dbc:	sub	r1, fp, #192	; 0xc0
   19dc0:	bl	27be0 <__assert_fail@plt+0x164e0>
   19dc4:	mov	r9, r0
   19dc8:	mov	r0, #0
   19dcc:	bl	13de4 <__assert_fail@plt+0x26e4>
   19dd0:	cmp	r9, #0
   19dd4:	bne	18fd0 <__assert_fail@plt+0x78d0>
   19dd8:	ldr	r0, [r6]
   19ddc:	mov	r3, r8
   19de0:	cmp	r0, #0
   19de4:	beq	18cf0 <__assert_fail@plt+0x75f0>
   19de8:	mov	r1, #0
   19dec:	cmp	r3, #0
   19df0:	mov	r9, #0
   19df4:	mov	r8, r3
   19df8:	str	r1, [sp, #20]
   19dfc:	blt	19e98 <__assert_fail@plt+0x8798>
   19e00:	mov	r5, #0
   19e04:	ldr	r2, [r7, r5, lsl #2]
   19e08:	cmp	r0, #0
   19e0c:	bne	19e38 <__assert_fail@plt+0x8738>
   19e10:	str	r2, [r6, r5, lsl #2]
   19e14:	cmp	r5, r3
   19e18:	bge	19e94 <__assert_fail@plt+0x8794>
   19e1c:	add	r0, r6, r5, lsl #2
   19e20:	add	r1, r5, #1
   19e24:	ldr	r0, [r0, #4]
   19e28:	mov	r5, r1
   19e2c:	ldr	r2, [r7, r5, lsl #2]
   19e30:	cmp	r0, #0
   19e34:	beq	19e10 <__assert_fail@plt+0x8710>
   19e38:	cmp	r2, #0
   19e3c:	beq	19e8c <__assert_fail@plt+0x878c>
   19e40:	sub	sl, fp, #48	; 0x30
   19e44:	add	r1, r0, #4
   19e48:	add	r2, r2, #4
   19e4c:	mov	r0, sl
   19e50:	bl	23ffc <__assert_fail@plt+0x128fc>
   19e54:	cmp	r0, #0
   19e58:	str	r0, [fp, #-196]	; 0xffffff3c
   19e5c:	bne	18ed0 <__assert_fail@plt+0x77d0>
   19e60:	ldr	r1, [sp, #72]	; 0x48
   19e64:	sub	r0, fp, #196	; 0xc4
   19e68:	mov	r2, sl
   19e6c:	bl	25670 <__assert_fail@plt+0x13f70>
   19e70:	str	r0, [r6, r5, lsl #2]
   19e74:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19e78:	bl	13de4 <__assert_fail@plt+0x26e4>
   19e7c:	ldr	r9, [fp, #-196]	; 0xffffff3c
   19e80:	mov	r3, r8
   19e84:	cmp	r9, #0
   19e88:	bne	19e98 <__assert_fail@plt+0x8798>
   19e8c:	cmp	r5, r3
   19e90:	blt	19e1c <__assert_fail@plt+0x871c>
   19e94:	mov	r9, #0
   19e98:	mov	r0, r7
   19e9c:	bl	13de4 <__assert_fail@plt+0x26e4>
   19ea0:	cmp	r9, #0
   19ea4:	bne	18fe0 <__assert_fail@plt+0x78e0>
   19ea8:	ldr	r0, [sp, #204]	; 0xcc
   19eac:	bl	13de4 <__assert_fail@plt+0x26e4>
   19eb0:	ldr	r0, [sp, #56]	; 0x38
   19eb4:	str	r0, [sp, #200]	; 0xc8
   19eb8:	mov	r0, #0
   19ebc:	str	r6, [sp, #204]	; 0xcc
   19ec0:	str	r8, [sp, #196]	; 0xc4
   19ec4:	bl	13de4 <__assert_fail@plt+0x26e4>
   19ec8:	mov	r0, #0
   19ecc:	bl	13de4 <__assert_fail@plt+0x26e4>
   19ed0:	ldr	r7, [sp, #68]	; 0x44
   19ed4:	ldr	r6, [sp, #64]	; 0x40
   19ed8:	cmp	r7, #0
   19edc:	beq	1ae68 <__assert_fail@plt+0x9768>
   19ee0:	ldr	r1, [fp, #16]
   19ee4:	ldr	r5, [fp, #20]
   19ee8:	cmp	r7, #1
   19eec:	beq	19f0c <__assert_fail@plt+0x880c>
   19ef0:	ldr	r0, [sp, #28]
   19ef4:	mvn	r0, r0
   19ef8:	add	r0, r0, r1
   19efc:	mov	r1, #255	; 0xff
   19f00:	lsl	r2, r0, #3
   19f04:	add	r0, r5, #8
   19f08:	bl	11610 <memset@plt>
   19f0c:	ldr	r1, [sp, #196]	; 0xc4
   19f10:	mov	r0, #0
   19f14:	cmp	r7, #2
   19f18:	sub	r4, fp, #48	; 0x30
   19f1c:	stm	r5, {r0, r1}
   19f20:	bcc	1ada0 <__assert_fail@plt+0x96a0>
   19f24:	ldrb	r0, [r6, #28]
   19f28:	ands	r0, r0, #16
   19f2c:	bne	1ada0 <__assert_fail@plt+0x96a0>
   19f30:	ldr	r0, [sp, #96]	; 0x60
   19f34:	ldrb	r1, [r0, #88]	; 0x58
   19f38:	mov	r0, #0
   19f3c:	tst	r1, #1
   19f40:	mov	r1, #0
   19f44:	beq	19f5c <__assert_fail@plt+0x885c>
   19f48:	ldr	r1, [sp, #96]	; 0x60
   19f4c:	ldr	r2, [r1, #76]	; 0x4c
   19f50:	mov	r1, #0
   19f54:	cmp	r2, #0
   19f58:	movwgt	r1, #1
   19f5c:	movw	r2, #49080	; 0xbfb8
   19f60:	ldr	r6, [r6]
   19f64:	cmp	r1, #0
   19f68:	mov	r8, #0
   19f6c:	movt	r2, #2
   19f70:	vldr	d16, [r2]
   19f74:	ldr	r2, [r2, #8]
   19f78:	str	r2, [fp, #-40]	; 0xffffffd8
   19f7c:	mov	r2, #16
   19f80:	vstr	d16, [fp, #-48]	; 0xffffffd0
   19f84:	str	r2, [fp, #-188]	; 0xffffff44
   19f88:	sub	r2, fp, #192	; 0xc0
   19f8c:	str	r0, [fp, #-192]	; 0xffffff40
   19f90:	add	r9, r2, #12
   19f94:	str	r9, [fp, #-184]	; 0xffffff48
   19f98:	beq	19fb8 <__assert_fail@plt+0x88b8>
   19f9c:	mov	r0, #48	; 0x30
   19fa0:	bl	2aa84 <__assert_fail@plt+0x19384>
   19fa4:	cmp	r0, #0
   19fa8:	str	r0, [fp, #-40]	; 0xffffffd8
   19fac:	beq	1ac64 <__assert_fail@plt+0x9564>
   19fb0:	ldr	r0, [fp, #-192]	; 0xffffff40
   19fb4:	mov	r8, r4
   19fb8:	ldr	r4, [r6, #72]	; 0x48
   19fbc:	cmp	r0, r7
   19fc0:	bcs	1a098 <__assert_fail@plt+0x8998>
   19fc4:	sub	r0, fp, #192	; 0xc0
   19fc8:	mov	r1, r7
   19fcc:	mov	r2, r9
   19fd0:	mov	r3, #8
   19fd4:	bl	2ab8c <__assert_fail@plt+0x1948c>
   19fd8:	cmp	r0, #0
   19fdc:	bne	1a09c <__assert_fail@plt+0x899c>
   19fe0:	ldr	r0, [fp, #-184]	; 0xffffff48
   19fe4:	mov	r4, r9
   19fe8:	cmp	r0, r9
   19fec:	beq	19ff4 <__assert_fail@plt+0x88f4>
   19ff0:	bl	13de4 <__assert_fail@plt+0x26e4>
   19ff4:	mov	r0, #16
   19ff8:	mov	r9, #12
   19ffc:	cmp	r8, #0
   1a000:	str	r0, [fp, #-188]	; 0xffffff44
   1a004:	mov	r0, #0
   1a008:	str	r0, [fp, #-192]	; 0xffffff40
   1a00c:	str	r4, [fp, #-184]	; 0xffffff48
   1a010:	beq	1ae6c <__assert_fail@plt+0x976c>
   1a014:	ldr	r1, [r8]
   1a018:	ldr	r0, [r8, #8]
   1a01c:	cmp	r1, #1
   1a020:	blt	1ad04 <__assert_fail@plt+0x9604>
   1a024:	mov	r5, #0
   1a028:	mov	r6, #0
   1a02c:	add	r0, r0, r5
   1a030:	ldr	r0, [r0, #20]
   1a034:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a038:	ldr	r0, [r8, #8]
   1a03c:	add	r0, r0, r5
   1a040:	ldr	r0, [r0, #8]
   1a044:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a048:	ldr	r1, [r8]
   1a04c:	ldr	r0, [r8, #8]
   1a050:	add	r6, r6, #1
   1a054:	add	r5, r5, #24
   1a058:	cmp	r6, r1
   1a05c:	blt	1a02c <__assert_fail@plt+0x892c>
   1a060:	b	1ad04 <__assert_fail@plt+0x9604>
   1a064:	ldr	r1, [r3, #8]
   1a068:	cmp	r1, #0
   1a06c:	beq	1a07c <__assert_fail@plt+0x897c>
   1a070:	ldrsb	r1, [r7, #28]
   1a074:	cmp	r1, #0
   1a078:	blt	18978 <__assert_fail@plt+0x7278>
   1a07c:	mov	r1, #0
   1a080:	cmp	r6, #0
   1a084:	beq	1ac5c <__assert_fail@plt+0x955c>
   1a088:	cmp	ip, #0
   1a08c:	mov	r6, #0
   1a090:	bne	1aec0 <__assert_fail@plt+0x97c0>
   1a094:	b	1897c <__assert_fail@plt+0x727c>
   1a098:	str	r7, [fp, #-192]	; 0xffffff40
   1a09c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a0a0:	lsl	r2, r7, #3
   1a0a4:	mov	r1, r5
   1a0a8:	str	r2, [sp, #76]	; 0x4c
   1a0ac:	str	r0, [sp, #80]	; 0x50
   1a0b0:	bl	11448 <memcpy@plt>
   1a0b4:	ldr	r3, [r5]
   1a0b8:	ldr	r0, [r5, #4]
   1a0bc:	mov	sl, #0
   1a0c0:	cmp	r3, r0
   1a0c4:	ble	1a150 <__assert_fail@plt+0x8a50>
   1a0c8:	mov	r0, sl
   1a0cc:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a0d0:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a0d4:	cmp	r0, r9
   1a0d8:	beq	1a0e0 <__assert_fail@plt+0x89e0>
   1a0dc:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a0e0:	mov	r0, #16
   1a0e4:	cmp	r8, #0
   1a0e8:	str	r0, [fp, #-188]	; 0xffffff44
   1a0ec:	mov	r0, #0
   1a0f0:	str	r0, [fp, #-192]	; 0xffffff40
   1a0f4:	str	r9, [fp, #-184]	; 0xffffff48
   1a0f8:	beq	1ada0 <__assert_fail@plt+0x96a0>
   1a0fc:	ldr	r1, [r8]
   1a100:	ldr	r0, [r8, #8]
   1a104:	mov	r6, r5
   1a108:	cmp	r1, #1
   1a10c:	blt	1ad98 <__assert_fail@plt+0x9698>
   1a110:	mov	r4, #0
   1a114:	mov	r5, #0
   1a118:	add	r0, r0, r4
   1a11c:	ldr	r0, [r0, #20]
   1a120:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a124:	ldr	r0, [r8, #8]
   1a128:	add	r0, r0, r4
   1a12c:	ldr	r0, [r0, #8]
   1a130:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a134:	ldr	r1, [r8]
   1a138:	ldr	r0, [r8, #8]
   1a13c:	add	r5, r5, #1
   1a140:	add	r4, r4, #24
   1a144:	cmp	r5, r1
   1a148:	blt	1a118 <__assert_fail@plt+0x8a18>
   1a14c:	b	1ad98 <__assert_fail@plt+0x9698>
   1a150:	lsl	r0, r7, #4
   1a154:	mov	lr, #1
   1a158:	mov	sl, #0
   1a15c:	str	r6, [sp, #64]	; 0x40
   1a160:	str	r0, [sp, #56]	; 0x38
   1a164:	mov	r0, #0
   1a168:	str	r0, [sp, #72]	; 0x48
   1a16c:	mov	r0, #0
   1a170:	str	r0, [sp, #92]	; 0x5c
   1a174:	ldr	r0, [r6]
   1a178:	add	r1, r0, r4, lsl #3
   1a17c:	ldr	r1, [r1, #4]
   1a180:	uxtb	r2, r1
   1a184:	cmp	r2, #9
   1a188:	beq	1a1b8 <__assert_fail@plt+0x8ab8>
   1a18c:	cmp	r2, #8
   1a190:	bne	1a228 <__assert_fail@plt+0x8b28>
   1a194:	ldr	r0, [r0, r4, lsl #3]
   1a198:	add	r0, r0, #1
   1a19c:	cmp	r0, r7
   1a1a0:	bge	1a228 <__assert_fail@plt+0x8b28>
   1a1a4:	mov	r1, r5
   1a1a8:	str	r3, [r1, r0, lsl #3]!
   1a1ac:	mvn	r0, #0
   1a1b0:	str	r0, [r1, #4]
   1a1b4:	b	1a228 <__assert_fail@plt+0x8b28>
   1a1b8:	ldr	r0, [r0, r4, lsl #3]
   1a1bc:	add	r0, r0, #1
   1a1c0:	cmp	r0, r7
   1a1c4:	bge	1a228 <__assert_fail@plt+0x8b28>
   1a1c8:	ldr	r2, [r5, r0, lsl #3]
   1a1cc:	cmp	r2, r3
   1a1d0:	bge	1a1e8 <__assert_fail@plt+0x8ae8>
   1a1d4:	add	r0, r5, r0, lsl #3
   1a1d8:	mov	r1, r5
   1a1dc:	str	r3, [r0, #4]
   1a1e0:	ldr	r0, [sp, #80]	; 0x50
   1a1e4:	b	1a208 <__assert_fail@plt+0x8b08>
   1a1e8:	tst	r1, #524288	; 0x80000
   1a1ec:	beq	1a220 <__assert_fail@plt+0x8b20>
   1a1f0:	ldr	r1, [sp, #80]	; 0x50
   1a1f4:	ldr	r1, [r1, r0, lsl #3]
   1a1f8:	cmn	r1, #1
   1a1fc:	beq	1a220 <__assert_fail@plt+0x8b20>
   1a200:	ldr	r1, [sp, #80]	; 0x50
   1a204:	mov	r0, r5
   1a208:	ldr	r2, [sp, #76]	; 0x4c
   1a20c:	mov	r6, r3
   1a210:	bl	11448 <memcpy@plt>
   1a214:	mov	r3, r6
   1a218:	mov	lr, #1
   1a21c:	b	1a228 <__assert_fail@plt+0x8b28>
   1a220:	add	r0, r5, r0, lsl #3
   1a224:	str	r3, [r0, #4]
   1a228:	ldr	r0, [r5, #4]
   1a22c:	cmp	r3, r0
   1a230:	ldreq	r0, [sp, #200]	; 0xc8
   1a234:	cmpeq	r4, r0
   1a238:	beq	1a298 <__assert_fail@plt+0x8b98>
   1a23c:	cmp	r8, #0
   1a240:	beq	1a370 <__assert_fail@plt+0x8c70>
   1a244:	ldr	r0, [sp, #92]	; 0x5c
   1a248:	cmp	r0, #1
   1a24c:	blt	1a370 <__assert_fail@plt+0x8c70>
   1a250:	mov	r6, r3
   1a254:	subs	r1, r0, #1
   1a258:	beq	1a284 <__assert_fail@plt+0x8b84>
   1a25c:	mov	r0, #0
   1a260:	add	r2, r0, r1
   1a264:	lsr	r3, r2, #1
   1a268:	ldr	r7, [sl, r3, lsl #2]
   1a26c:	cmp	r7, r4
   1a270:	movge	r1, r3
   1a274:	addlt	r0, lr, r2, lsr #1
   1a278:	cmp	r0, r1
   1a27c:	bcc	1a260 <__assert_fail@plt+0x8b60>
   1a280:	b	1a288 <__assert_fail@plt+0x8b88>
   1a284:	mov	r0, #0
   1a288:	ldr	r0, [sl, r0, lsl #2]
   1a28c:	ldr	r7, [sp, #68]	; 0x44
   1a290:	cmp	r0, r4
   1a294:	bne	1a36c <__assert_fail@plt+0x8c6c>
   1a298:	cmp	r8, #0
   1a29c:	beq	1ad14 <__assert_fail@plt+0x9614>
   1a2a0:	mov	r0, #0
   1a2a4:	ldr	r1, [r5, r0, lsl #3]
   1a2a8:	cmp	r1, #0
   1a2ac:	blt	1a2c0 <__assert_fail@plt+0x8bc0>
   1a2b0:	add	r1, r5, r0, lsl #3
   1a2b4:	ldr	r1, [r1, #4]
   1a2b8:	cmn	r1, #1
   1a2bc:	beq	1a2d0 <__assert_fail@plt+0x8bd0>
   1a2c0:	add	r0, r0, #1
   1a2c4:	cmp	r0, r7
   1a2c8:	bcc	1a2a4 <__assert_fail@plt+0x8ba4>
   1a2cc:	b	1ad14 <__assert_fail@plt+0x9614>
   1a2d0:	ldr	r0, [r8]
   1a2d4:	cmp	r0, #0
   1a2d8:	beq	1ad14 <__assert_fail@plt+0x9614>
   1a2dc:	sub	r1, r0, #1
   1a2e0:	mov	r0, r5
   1a2e4:	str	r9, [sp, #60]	; 0x3c
   1a2e8:	ldr	r6, [sp, #76]	; 0x4c
   1a2ec:	str	r1, [r8]
   1a2f0:	add	r5, r1, r1, lsl #1
   1a2f4:	ldr	r4, [r8, #8]
   1a2f8:	mov	r2, r6
   1a2fc:	ldr	r9, [r4, r5, lsl #3]!
   1a300:	ldr	r1, [r4, #8]
   1a304:	bl	11448 <memcpy@plt>
   1a308:	ldr	r0, [r4, #8]
   1a30c:	mov	r2, r6
   1a310:	add	r1, r0, r7, lsl #3
   1a314:	ldr	r0, [sp, #80]	; 0x50
   1a318:	bl	11448 <memcpy@plt>
   1a31c:	mov	r0, sl
   1a320:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a324:	ldr	r0, [r8, #8]
   1a328:	add	r0, r0, r5, lsl #3
   1a32c:	ldr	r0, [r0, #8]
   1a330:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a334:	ldr	r0, [r8, #8]
   1a338:	add	r0, r0, r5, lsl #3
   1a33c:	ldr	r4, [r0, #4]
   1a340:	ldr	sl, [r0, #20]
   1a344:	cmn	r4, #1
   1a348:	ble	1ad0c <__assert_fail@plt+0x960c>
   1a34c:	ldr	r1, [r0, #12]
   1a350:	ldr	r0, [r0, #16]
   1a354:	mov	r3, r9
   1a358:	ldr	r9, [sp, #60]	; 0x3c
   1a35c:	mov	lr, #1
   1a360:	str	r1, [sp, #72]	; 0x48
   1a364:	str	r0, [sp, #92]	; 0x5c
   1a368:	b	1a370 <__assert_fail@plt+0x8c70>
   1a36c:	mov	r3, r6
   1a370:	ldr	r5, [sp, #188]	; 0xbc
   1a374:	str	r3, [sp, #84]	; 0x54
   1a378:	ldr	r0, [r5]
   1a37c:	add	r1, r0, r4, lsl #3
   1a380:	ldr	r1, [r1, #4]
   1a384:	tst	r1, #8
   1a388:	bne	1a448 <__assert_fail@plt+0x8d48>
   1a38c:	tst	r1, #1048576	; 0x100000
   1a390:	str	sl, [sp, #88]	; 0x58
   1a394:	bne	1a4cc <__assert_fail@plt+0x8dcc>
   1a398:	uxtb	r1, r1
   1a39c:	cmp	r1, #4
   1a3a0:	bne	1a4f0 <__assert_fail@plt+0x8df0>
   1a3a4:	ldr	r0, [r0, r4, lsl #3]
   1a3a8:	mov	r6, #0
   1a3ac:	add	r0, r0, #1
   1a3b0:	cmp	r0, r7
   1a3b4:	ldrlt	r1, [fp, #20]
   1a3b8:	ldrlt	r2, [r1, r0, lsl #3]!
   1a3bc:	ldrlt	r1, [r1, #4]
   1a3c0:	sublt	r6, r1, r2
   1a3c4:	cmp	r8, #0
   1a3c8:	beq	1a7a0 <__assert_fail@plt+0x90a0>
   1a3cc:	cmp	r0, r7
   1a3d0:	bge	1a5f4 <__assert_fail@plt+0x8ef4>
   1a3d4:	ldr	r2, [fp, #20]
   1a3d8:	ldr	r1, [r2, r0, lsl #3]
   1a3dc:	cmn	r1, #1
   1a3e0:	beq	1a5f4 <__assert_fail@plt+0x8ef4>
   1a3e4:	add	r0, r2, r0, lsl #3
   1a3e8:	ldr	r0, [r0, #4]
   1a3ec:	cmn	r0, #1
   1a3f0:	beq	1a5f4 <__assert_fail@plt+0x8ef4>
   1a3f4:	cmp	r6, #0
   1a3f8:	beq	1a7d0 <__assert_fail@plt+0x90d0>
   1a3fc:	ldr	r0, [sp, #132]	; 0x84
   1a400:	sub	r0, r0, r3
   1a404:	cmp	r0, r6
   1a408:	blt	1a5f4 <__assert_fail@plt+0x8ef4>
   1a40c:	ldr	r2, [sp, #108]	; 0x6c
   1a410:	str	r9, [sp, #60]	; 0x3c
   1a414:	mov	r9, r3
   1a418:	add	r0, r2, r1
   1a41c:	add	r1, r2, r3
   1a420:	mov	r2, r6
   1a424:	bl	11484 <memcmp@plt>
   1a428:	cmp	r0, #0
   1a42c:	beq	1aa60 <__assert_fail@plt+0x9360>
   1a430:	ldr	sl, [sp, #60]	; 0x3c
   1a434:	ldr	r0, [r8]
   1a438:	mov	r5, #0
   1a43c:	cmp	r0, #0
   1a440:	bne	1a608 <__assert_fail@plt+0x8f08>
   1a444:	b	1ac6c <__assert_fail@plt+0x956c>
   1a448:	ldr	r0, [sp, #204]	; 0xcc
   1a44c:	ldr	r5, [r5, #20]
   1a450:	ldr	r6, [r0, r3, lsl #2]
   1a454:	ldr	r3, [sp, #92]	; 0x5c
   1a458:	cmp	r3, #1
   1a45c:	blt	1a4a8 <__assert_fail@plt+0x8da8>
   1a460:	mov	r0, #0
   1a464:	subs	r1, r3, #1
   1a468:	beq	1a48c <__assert_fail@plt+0x8d8c>
   1a46c:	add	r2, r0, r1
   1a470:	lsr	r3, r2, #1
   1a474:	ldr	r7, [sl, r3, lsl #2]
   1a478:	cmp	r7, r4
   1a47c:	movge	r1, r3
   1a480:	addlt	r0, lr, r2, lsr #1
   1a484:	cmp	r0, r1
   1a488:	bcc	1a46c <__assert_fail@plt+0x8d6c>
   1a48c:	ldr	r0, [sl, r0, lsl #2]
   1a490:	ldr	r7, [sp, #68]	; 0x44
   1a494:	ldr	r3, [sp, #92]	; 0x5c
   1a498:	cmp	r0, r4
   1a49c:	bne	1a4a8 <__assert_fail@plt+0x8da8>
   1a4a0:	str	sl, [sp, #88]	; 0x58
   1a4a4:	b	1a5d0 <__assert_fail@plt+0x8ed0>
   1a4a8:	ldr	r0, [sp, #72]	; 0x48
   1a4ac:	cmp	r0, #0
   1a4b0:	beq	1a5ac <__assert_fail@plt+0x8eac>
   1a4b4:	cmp	r3, #0
   1a4b8:	str	sl, [sp, #88]	; 0x58
   1a4bc:	bne	1aa88 <__assert_fail@plt+0x9388>
   1a4c0:	str	r4, [sl]
   1a4c4:	mov	r3, #1
   1a4c8:	b	1a5d0 <__assert_fail@plt+0x8ed0>
   1a4cc:	mov	r0, r5
   1a4d0:	mov	r1, r4
   1a4d4:	add	r2, sp, #104	; 0x68
   1a4d8:	bl	25910 <__assert_fail@plt+0x14210>
   1a4dc:	mov	lr, #1
   1a4e0:	mov	r1, r0
   1a4e4:	ldr	r3, [sp, #84]	; 0x54
   1a4e8:	cmp	r1, #0
   1a4ec:	bne	1a518 <__assert_fail@plt+0x8e18>
   1a4f0:	ldr	r0, [r5]
   1a4f4:	mov	r2, r3
   1a4f8:	add	r1, r0, r4, lsl #3
   1a4fc:	add	r0, sp, #104	; 0x68
   1a500:	bl	25c28 <__assert_fail@plt+0x14528>
   1a504:	ldr	r3, [sp, #84]	; 0x54
   1a508:	mov	lr, #1
   1a50c:	mov	r1, #1
   1a510:	cmp	r0, #0
   1a514:	beq	1a5ec <__assert_fail@plt+0x8eec>
   1a518:	ldr	r0, [r5, #12]
   1a51c:	add	r3, r1, r3
   1a520:	cmp	r8, #0
   1a524:	ldr	r6, [r0, r4, lsl #2]
   1a528:	beq	1a7b4 <__assert_fail@plt+0x90b4>
   1a52c:	ldr	r0, [sp, #196]	; 0xc4
   1a530:	cmp	r3, r0
   1a534:	bgt	1a5f4 <__assert_fail@plt+0x8ef4>
   1a538:	ldr	r0, [sp, #204]	; 0xcc
   1a53c:	ldr	r0, [r0, r3, lsl #2]
   1a540:	cmp	r0, #0
   1a544:	beq	1a5f4 <__assert_fail@plt+0x8ef4>
   1a548:	ldr	r1, [r0, #8]
   1a54c:	cmp	r1, #1
   1a550:	blt	1a5f4 <__assert_fail@plt+0x8ef4>
   1a554:	ldr	r0, [r0, #12]
   1a558:	mov	r2, #0
   1a55c:	mov	r4, r3
   1a560:	subs	r1, r1, #1
   1a564:	str	r2, [sp, #92]	; 0x5c
   1a568:	mov	r2, #0
   1a56c:	beq	1a594 <__assert_fail@plt+0x8e94>
   1a570:	mov	r2, #0
   1a574:	add	r3, r2, r1
   1a578:	lsr	r7, r3, #1
   1a57c:	ldr	r5, [r0, r7, lsl #2]
   1a580:	cmp	r5, r6
   1a584:	movge	r1, r7
   1a588:	addlt	r2, lr, r3, lsr #1
   1a58c:	cmp	r2, r1
   1a590:	bcc	1a574 <__assert_fail@plt+0x8e74>
   1a594:	ldr	r0, [r0, r2, lsl #2]
   1a598:	ldr	r7, [sp, #68]	; 0x44
   1a59c:	mov	r3, r4
   1a5a0:	cmp	r0, r6
   1a5a4:	bne	1a5ec <__assert_fail@plt+0x8eec>
   1a5a8:	b	1aa38 <__assert_fail@plt+0x9338>
   1a5ac:	mov	r0, #4
   1a5b0:	bl	2aa84 <__assert_fail@plt+0x19384>
   1a5b4:	cmp	r0, #0
   1a5b8:	beq	1af5c <__assert_fail@plt+0x985c>
   1a5bc:	str	r0, [sp, #88]	; 0x58
   1a5c0:	str	r4, [r0]
   1a5c4:	mov	r0, #1
   1a5c8:	mov	r3, #1
   1a5cc:	str	r0, [sp, #72]	; 0x48
   1a5d0:	add	r0, r4, r4, lsl #1
   1a5d4:	add	r1, r5, r0, lsl #2
   1a5d8:	ldr	sl, [r1, #4]
   1a5dc:	cmp	sl, #1
   1a5e0:	ldrge	r2, [r6, #8]
   1a5e4:	subsge	r2, r2, #1
   1a5e8:	bge	1a6b4 <__assert_fail@plt+0x8fb4>
   1a5ec:	cmp	r8, #0
   1a5f0:	beq	1ac7c <__assert_fail@plt+0x957c>
   1a5f4:	mov	sl, r9
   1a5f8:	ldr	r0, [r8]
   1a5fc:	mov	r5, #0
   1a600:	cmp	r0, #0
   1a604:	beq	1ac6c <__assert_fail@plt+0x956c>
   1a608:	sub	r0, r0, #1
   1a60c:	ldr	r9, [sp, #76]	; 0x4c
   1a610:	str	r0, [r8]
   1a614:	add	r6, r0, r0, lsl #1
   1a618:	ldr	r4, [r8, #8]
   1a61c:	mov	r2, r9
   1a620:	ldr	r0, [r4, r6, lsl #3]!
   1a624:	str	r0, [sp, #84]	; 0x54
   1a628:	ldr	r1, [r4, #8]
   1a62c:	ldr	r0, [fp, #20]
   1a630:	bl	11448 <memcpy@plt>
   1a634:	ldr	r0, [r4, #8]
   1a638:	mov	r2, r9
   1a63c:	add	r1, r0, r7, lsl #3
   1a640:	ldr	r0, [sp, #80]	; 0x50
   1a644:	bl	11448 <memcpy@plt>
   1a648:	ldr	r0, [sp, #88]	; 0x58
   1a64c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a650:	ldr	r0, [r8, #8]
   1a654:	add	r0, r0, r6, lsl #3
   1a658:	ldr	r0, [r0, #8]
   1a65c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1a660:	ldr	r0, [r8, #8]
   1a664:	add	r0, r0, r6, lsl #3
   1a668:	ldr	r4, [r0, #4]
   1a66c:	ldr	r1, [r0, #20]
   1a670:	cmn	r4, #1
   1a674:	str	r1, [sp, #88]	; 0x58
   1a678:	ble	1ac6c <__assert_fail@plt+0x956c>
   1a67c:	ldr	r1, [r0, #12]
   1a680:	ldr	r0, [r0, #16]
   1a684:	mov	r9, sl
   1a688:	ldr	r5, [fp, #20]
   1a68c:	ldr	sl, [sp, #88]	; 0x58
   1a690:	ldr	r3, [sp, #84]	; 0x54
   1a694:	mov	lr, #1
   1a698:	str	r1, [sp, #72]	; 0x48
   1a69c:	str	r0, [sp, #92]	; 0x5c
   1a6a0:	ldr	r0, [r5, #4]
   1a6a4:	ldr	r6, [sp, #64]	; 0x40
   1a6a8:	cmp	r3, r0
   1a6ac:	ble	1a174 <__assert_fail@plt+0x8a74>
   1a6b0:	b	1a0c8 <__assert_fail@plt+0x89c8>
   1a6b4:	str	r3, [sp, #92]	; 0x5c
   1a6b8:	ldr	r0, [r1, #8]
   1a6bc:	ldr	r3, [r6, #12]
   1a6c0:	cmp	r2, #0
   1a6c4:	str	r0, [sp, #100]	; 0x64
   1a6c8:	beq	1a758 <__assert_fail@plt+0x9058>
   1a6cc:	mov	r7, #0
   1a6d0:	mvn	r5, #0
   1a6d4:	str	r9, [sp, #60]	; 0x3c
   1a6d8:	ldr	r0, [sp, #100]	; 0x64
   1a6dc:	mov	lr, r2
   1a6e0:	mov	r6, #0
   1a6e4:	mov	r9, #1
   1a6e8:	ldr	r4, [r0, r7, lsl #2]
   1a6ec:	add	r1, r6, r2
   1a6f0:	lsr	r0, r1, #1
   1a6f4:	ldr	ip, [r3, r0, lsl #2]
   1a6f8:	cmp	ip, r4
   1a6fc:	movge	r2, r0
   1a700:	addlt	r6, r9, r1, lsr #1
   1a704:	cmp	r6, r2
   1a708:	bcc	1a6ec <__assert_fail@plt+0x8fec>
   1a70c:	ldr	r0, [r3, r6, lsl #2]
   1a710:	cmp	r0, r4
   1a714:	bne	1a728 <__assert_fail@plt+0x9028>
   1a718:	cmn	r5, #1
   1a71c:	mov	r6, r5
   1a720:	mov	r5, r4
   1a724:	bne	1a800 <__assert_fail@plt+0x9100>
   1a728:	add	r7, r7, #1
   1a72c:	mov	r2, lr
   1a730:	cmp	r7, sl
   1a734:	blt	1a6d8 <__assert_fail@plt+0x8fd8>
   1a738:	ldr	r7, [sp, #68]	; 0x44
   1a73c:	ldr	r9, [sp, #60]	; 0x3c
   1a740:	ldr	r3, [sp, #84]	; 0x54
   1a744:	mov	r6, r5
   1a748:	mov	lr, #1
   1a74c:	cmn	r6, #1
   1a750:	bgt	1aa40 <__assert_fail@plt+0x9340>
   1a754:	b	1a7c4 <__assert_fail@plt+0x90c4>
   1a758:	ldr	r4, [r3]
   1a75c:	mov	r2, #0
   1a760:	mvn	r6, #0
   1a764:	ldr	r0, [sp, #100]	; 0x64
   1a768:	ldr	r3, [r0, r2, lsl #2]
   1a76c:	cmp	r4, r3
   1a770:	bne	1a784 <__assert_fail@plt+0x9084>
   1a774:	cmn	r6, #1
   1a778:	mov	r3, r4
   1a77c:	beq	1a788 <__assert_fail@plt+0x9088>
   1a780:	b	1a7fc <__assert_fail@plt+0x90fc>
   1a784:	mov	r3, r6
   1a788:	add	r2, r2, #1
   1a78c:	mov	r6, r3
   1a790:	cmp	r2, sl
   1a794:	blt	1a764 <__assert_fail@plt+0x9064>
   1a798:	mov	r6, r3
   1a79c:	b	1aa30 <__assert_fail@plt+0x9330>
   1a7a0:	cmp	r6, #0
   1a7a4:	beq	1a7d0 <__assert_fail@plt+0x90d0>
   1a7a8:	ldr	r0, [r5, #12]
   1a7ac:	add	r3, r6, r3
   1a7b0:	ldr	r6, [r0, r4, lsl #2]
   1a7b4:	mov	r0, #0
   1a7b8:	str	r0, [sp, #92]	; 0x5c
   1a7bc:	cmn	r6, #1
   1a7c0:	bgt	1aa40 <__assert_fail@plt+0x9340>
   1a7c4:	cmn	r6, #2
   1a7c8:	bne	1a5ec <__assert_fail@plt+0x8eec>
   1a7cc:	b	1af64 <__assert_fail@plt+0x9864>
   1a7d0:	ldr	r0, [sp, #72]	; 0x48
   1a7d4:	str	r6, [sp, #100]	; 0x64
   1a7d8:	cmp	r0, #0
   1a7dc:	beq	1a96c <__assert_fail@plt+0x926c>
   1a7e0:	ldr	r1, [sp, #92]	; 0x5c
   1a7e4:	cmp	r1, #0
   1a7e8:	bne	1ab74 <__assert_fail@plt+0x9474>
   1a7ec:	mov	r0, #1
   1a7f0:	str	r4, [sl]
   1a7f4:	str	r0, [sp, #92]	; 0x5c
   1a7f8:	b	1a99c <__assert_fail@plt+0x929c>
   1a7fc:	str	r9, [sp, #60]	; 0x3c
   1a800:	ldr	r0, [sp, #92]	; 0x5c
   1a804:	ldr	r5, [sp, #88]	; 0x58
   1a808:	ldr	r9, [sp, #60]	; 0x3c
   1a80c:	mov	lr, #1
   1a810:	cmp	r0, #1
   1a814:	blt	1a874 <__assert_fail@plt+0x9174>
   1a818:	ldr	r0, [sp, #92]	; 0x5c
   1a81c:	subs	r1, r0, #1
   1a820:	beq	1a84c <__assert_fail@plt+0x914c>
   1a824:	mov	r0, #0
   1a828:	add	r2, r0, r1
   1a82c:	lsr	r3, r2, #1
   1a830:	ldr	r7, [r5, r3, lsl #2]
   1a834:	cmp	r7, r6
   1a838:	movge	r1, r3
   1a83c:	addlt	r0, lr, r2, lsr #1
   1a840:	cmp	r0, r1
   1a844:	bcc	1a828 <__assert_fail@plt+0x9128>
   1a848:	b	1a850 <__assert_fail@plt+0x9150>
   1a84c:	mov	r0, #0
   1a850:	ldr	r0, [r5, r0, lsl #2]
   1a854:	cmp	r0, r6
   1a858:	bne	1a874 <__assert_fail@plt+0x9174>
   1a85c:	ldr	r7, [sp, #68]	; 0x44
   1a860:	ldr	r3, [sp, #84]	; 0x54
   1a864:	mov	r6, r4
   1a868:	cmn	r6, #1
   1a86c:	bgt	1aa40 <__assert_fail@plt+0x9340>
   1a870:	b	1a7c4 <__assert_fail@plt+0x90c4>
   1a874:	ldr	r7, [sp, #68]	; 0x44
   1a878:	ldr	r3, [sp, #84]	; 0x54
   1a87c:	cmp	r8, #0
   1a880:	beq	1aa38 <__assert_fail@plt+0x9338>
   1a884:	ldr	r5, [r8]
   1a888:	ldr	r0, [r8, #4]
   1a88c:	add	r1, r5, #1
   1a890:	cmp	r1, r0
   1a894:	str	r1, [r8]
   1a898:	bne	1a8cc <__assert_fail@plt+0x91cc>
   1a89c:	ldr	r0, [r8, #8]
   1a8a0:	add	r1, r1, r1, lsl #1
   1a8a4:	lsl	r1, r1, #4
   1a8a8:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1a8ac:	cmp	r0, #0
   1a8b0:	beq	1af64 <__assert_fail@plt+0x9864>
   1a8b4:	str	r0, [r8, #8]
   1a8b8:	ldr	r3, [sp, #84]	; 0x54
   1a8bc:	ldr	r1, [r8, #4]
   1a8c0:	lsl	r1, r1, #1
   1a8c4:	str	r1, [r8, #4]
   1a8c8:	b	1a8d0 <__assert_fail@plt+0x91d0>
   1a8cc:	ldr	r0, [r8, #8]
   1a8d0:	add	r5, r5, r5, lsl #1
   1a8d4:	str	r3, [r0, r5, lsl #3]!
   1a8d8:	str	r4, [r0, #4]
   1a8dc:	ldr	r0, [sp, #56]	; 0x38
   1a8e0:	bl	2aa84 <__assert_fail@plt+0x19384>
   1a8e4:	ldr	r1, [r8, #8]
   1a8e8:	cmp	r0, #0
   1a8ec:	add	r4, r1, r5, lsl #3
   1a8f0:	str	r0, [r4, #8]!
   1a8f4:	beq	1af64 <__assert_fail@plt+0x9864>
   1a8f8:	ldr	sl, [sp, #76]	; 0x4c
   1a8fc:	ldr	r1, [fp, #20]
   1a900:	mov	r2, sl
   1a904:	bl	11448 <memcpy@plt>
   1a908:	ldr	r0, [r4]
   1a90c:	ldr	r1, [sp, #80]	; 0x50
   1a910:	mov	r2, sl
   1a914:	add	r0, r0, r7, lsl #3
   1a918:	bl	11448 <memcpy@plt>
   1a91c:	ldr	r0, [r8, #8]
   1a920:	add	r5, r0, r5, lsl #3
   1a924:	ldr	r0, [sp, #92]	; 0x5c
   1a928:	mov	r7, r5
   1a92c:	str	r0, [r7, #16]!
   1a930:	cmp	r0, #1
   1a934:	sub	sl, r7, #4
   1a938:	blt	1aa1c <__assert_fail@plt+0x931c>
   1a93c:	lsl	r4, r0, #2
   1a940:	str	r0, [sl]
   1a944:	mov	r0, r4
   1a948:	bl	2aa84 <__assert_fail@plt+0x19384>
   1a94c:	cmp	r0, #0
   1a950:	str	r0, [r5, #20]
   1a954:	beq	1afec <__assert_fail@plt+0x98ec>
   1a958:	ldr	r1, [sp, #88]	; 0x58
   1a95c:	mov	r2, r4
   1a960:	bl	11448 <memcpy@plt>
   1a964:	ldr	r7, [sp, #68]	; 0x44
   1a968:	b	1aa30 <__assert_fail@plt+0x9330>
   1a96c:	mov	r0, #4
   1a970:	bl	2aa84 <__assert_fail@plt+0x19384>
   1a974:	cmp	r0, #0
   1a978:	beq	1af5c <__assert_fail@plt+0x985c>
   1a97c:	mov	sl, r0
   1a980:	str	r4, [r0]
   1a984:	mov	r0, #1
   1a988:	str	r0, [sp, #92]	; 0x5c
   1a98c:	mov	r0, #1
   1a990:	str	r0, [sp, #72]	; 0x48
   1a994:	ldr	r3, [sp, #84]	; 0x54
   1a998:	mov	lr, #1
   1a99c:	ldr	r0, [sp, #204]	; 0xcc
   1a9a0:	str	sl, [sp, #88]	; 0x58
   1a9a4:	ldr	r0, [r0, r3, lsl #2]
   1a9a8:	ldr	r1, [r0, #8]
   1a9ac:	cmp	r1, #1
   1a9b0:	blt	1a4f0 <__assert_fail@plt+0x8df0>
   1a9b4:	ldr	r2, [r5, #20]
   1a9b8:	add	r3, r4, r4, lsl #1
   1a9bc:	ldr	ip, [r0, #12]
   1a9c0:	add	r2, r2, r3, lsl #2
   1a9c4:	ldr	r2, [r2, #8]
   1a9c8:	ldr	r6, [r2]
   1a9cc:	subs	r2, r1, #1
   1a9d0:	mov	r1, #0
   1a9d4:	beq	1a9f8 <__assert_fail@plt+0x92f8>
   1a9d8:	add	r3, r1, r2
   1a9dc:	lsr	r7, r3, #1
   1a9e0:	ldr	r0, [ip, r7, lsl #2]
   1a9e4:	cmp	r0, r6
   1a9e8:	movge	r2, r7
   1a9ec:	addlt	r1, lr, r3, lsr #1
   1a9f0:	cmp	r1, r2
   1a9f4:	bcc	1a9d8 <__assert_fail@plt+0x92d8>
   1a9f8:	ldr	r0, [ip, r1, lsl #2]
   1a9fc:	ldr	r7, [sp, #68]	; 0x44
   1aa00:	ldr	r1, [sp, #100]	; 0x64
   1aa04:	cmp	r0, r6
   1aa08:	bne	1a4e4 <__assert_fail@plt+0x8de4>
   1aa0c:	ldr	r3, [sp, #84]	; 0x54
   1aa10:	cmn	r6, #1
   1aa14:	bgt	1aa40 <__assert_fail@plt+0x9340>
   1aa18:	b	1a7c4 <__assert_fail@plt+0x90c4>
   1aa1c:	ldr	r7, [sp, #68]	; 0x44
   1aa20:	mov	r0, #0
   1aa24:	str	r0, [sl]
   1aa28:	str	r0, [sl, #4]
   1aa2c:	str	r0, [sl, #8]
   1aa30:	ldr	r3, [sp, #84]	; 0x54
   1aa34:	mov	lr, #1
   1aa38:	cmn	r6, #1
   1aa3c:	ble	1a7c4 <__assert_fail@plt+0x90c4>
   1aa40:	ldr	r5, [fp, #20]
   1aa44:	ldr	sl, [sp, #88]	; 0x58
   1aa48:	mov	r4, r6
   1aa4c:	ldr	r0, [r5, #4]
   1aa50:	ldr	r6, [sp, #64]	; 0x40
   1aa54:	cmp	r3, r0
   1aa58:	ble	1a174 <__assert_fail@plt+0x8a74>
   1aa5c:	b	1a0c8 <__assert_fail@plt+0x89c8>
   1aa60:	ldr	r0, [r5, #12]
   1aa64:	add	r9, r6, r9
   1aa68:	mov	lr, #1
   1aa6c:	mov	r3, r9
   1aa70:	ldr	r9, [sp, #60]	; 0x3c
   1aa74:	ldr	r6, [r0, r4, lsl #2]
   1aa78:	ldr	r0, [sp, #196]	; 0xc4
   1aa7c:	cmp	r3, r0
   1aa80:	ble	1a538 <__assert_fail@plt+0x8e38>
   1aa84:	b	1a5f4 <__assert_fail@plt+0x8ef4>
   1aa88:	ldr	r0, [sp, #72]	; 0x48
   1aa8c:	str	r6, [sp, #100]	; 0x64
   1aa90:	mov	r6, r9
   1aa94:	cmp	r0, r3
   1aa98:	bne	1aac8 <__assert_fail@plt+0x93c8>
   1aa9c:	ldr	r0, [sp, #92]	; 0x5c
   1aaa0:	lsl	r1, r0, #3
   1aaa4:	ldr	r0, [sp, #88]	; 0x58
   1aaa8:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1aaac:	cmp	r0, #0
   1aab0:	mov	r9, r6
   1aab4:	beq	1af64 <__assert_fail@plt+0x9864>
   1aab8:	ldr	r1, [sp, #92]	; 0x5c
   1aabc:	str	r0, [sp, #88]	; 0x58
   1aac0:	lsl	r1, r1, #1
   1aac4:	str	r1, [sp, #72]	; 0x48
   1aac8:	ldr	r0, [sp, #88]	; 0x58
   1aacc:	ldr	r0, [r0]
   1aad0:	cmp	r0, r4
   1aad4:	ble	1ab18 <__assert_fail@plt+0x9418>
   1aad8:	ldr	r2, [sp, #92]	; 0x5c
   1aadc:	cmp	r2, #1
   1aae0:	blt	1ab54 <__assert_fail@plt+0x9454>
   1aae4:	ldr	r0, [sp, #88]	; 0x58
   1aae8:	ldr	r2, [sp, #92]	; 0x5c
   1aaec:	add	r1, r0, r2, lsl #2
   1aaf0:	add	r0, r2, #1
   1aaf4:	mov	r2, r1
   1aaf8:	ldr	r3, [r2, #-4]!
   1aafc:	sub	r0, r0, #1
   1ab00:	cmp	r0, #1
   1ab04:	str	r3, [r1]
   1ab08:	mov	r1, r2
   1ab0c:	bgt	1aaf8 <__assert_fail@plt+0x93f8>
   1ab10:	sub	r2, r0, #1
   1ab14:	b	1ab54 <__assert_fail@plt+0x9454>
   1ab18:	ldr	r0, [sp, #88]	; 0x58
   1ab1c:	ldr	r2, [sp, #92]	; 0x5c
   1ab20:	add	r0, r0, r2, lsl #2
   1ab24:	ldr	r1, [r0, #-4]
   1ab28:	cmp	r1, r4
   1ab2c:	ble	1ab54 <__assert_fail@plt+0x9454>
   1ab30:	ldr	r2, [sp, #92]	; 0x5c
   1ab34:	sub	r2, r2, #2
   1ab38:	str	r1, [r0]
   1ab3c:	sub	r2, r2, #1
   1ab40:	ldr	r1, [r0, #-8]
   1ab44:	sub	r0, r0, #4
   1ab48:	cmp	r1, r4
   1ab4c:	bgt	1ab38 <__assert_fail@plt+0x9438>
   1ab50:	add	r2, r2, #2
   1ab54:	ldr	r3, [sp, #92]	; 0x5c
   1ab58:	ldr	r0, [sp, #88]	; 0x58
   1ab5c:	mov	r9, r6
   1ab60:	ldr	r7, [sp, #68]	; 0x44
   1ab64:	ldr	r6, [sp, #100]	; 0x64
   1ab68:	add	r3, r3, #1
   1ab6c:	str	r4, [r0, r2, lsl #2]
   1ab70:	b	1a5d0 <__assert_fail@plt+0x8ed0>
   1ab74:	ldr	r0, [sp, #72]	; 0x48
   1ab78:	mov	r6, r9
   1ab7c:	cmp	r0, r1
   1ab80:	bne	1abb0 <__assert_fail@plt+0x94b0>
   1ab84:	ldr	r0, [sp, #92]	; 0x5c
   1ab88:	lsl	r1, r0, #3
   1ab8c:	ldr	r0, [sp, #88]	; 0x58
   1ab90:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1ab94:	cmp	r0, #0
   1ab98:	mov	r9, r6
   1ab9c:	beq	1af64 <__assert_fail@plt+0x9864>
   1aba0:	ldr	r1, [sp, #92]	; 0x5c
   1aba4:	str	r0, [sp, #88]	; 0x58
   1aba8:	lsl	r1, r1, #1
   1abac:	str	r1, [sp, #72]	; 0x48
   1abb0:	ldr	r0, [sp, #88]	; 0x58
   1abb4:	ldr	r0, [r0]
   1abb8:	cmp	r0, r4
   1abbc:	ble	1ac00 <__assert_fail@plt+0x9500>
   1abc0:	ldr	r2, [sp, #92]	; 0x5c
   1abc4:	cmp	r2, #1
   1abc8:	blt	1ac3c <__assert_fail@plt+0x953c>
   1abcc:	ldr	r0, [sp, #88]	; 0x58
   1abd0:	ldr	r2, [sp, #92]	; 0x5c
   1abd4:	add	r1, r0, r2, lsl #2
   1abd8:	add	r0, r2, #1
   1abdc:	mov	r2, r1
   1abe0:	ldr	r3, [r2, #-4]!
   1abe4:	sub	r0, r0, #1
   1abe8:	cmp	r0, #1
   1abec:	str	r3, [r1]
   1abf0:	mov	r1, r2
   1abf4:	bgt	1abe0 <__assert_fail@plt+0x94e0>
   1abf8:	sub	r2, r0, #1
   1abfc:	b	1ac3c <__assert_fail@plt+0x953c>
   1ac00:	ldr	r0, [sp, #88]	; 0x58
   1ac04:	ldr	r2, [sp, #92]	; 0x5c
   1ac08:	add	r0, r0, r2, lsl #2
   1ac0c:	ldr	r1, [r0, #-4]
   1ac10:	cmp	r1, r4
   1ac14:	ble	1ac3c <__assert_fail@plt+0x953c>
   1ac18:	ldr	r2, [sp, #92]	; 0x5c
   1ac1c:	sub	r2, r2, #2
   1ac20:	str	r1, [r0]
   1ac24:	sub	r2, r2, #1
   1ac28:	ldr	r1, [r0, #-8]
   1ac2c:	sub	r0, r0, #4
   1ac30:	cmp	r1, r4
   1ac34:	bgt	1ac20 <__assert_fail@plt+0x9520>
   1ac38:	add	r2, r2, #2
   1ac3c:	ldr	r1, [sp, #92]	; 0x5c
   1ac40:	ldr	sl, [sp, #88]	; 0x58
   1ac44:	ldr	r7, [sp, #68]	; 0x44
   1ac48:	mov	r9, r6
   1ac4c:	add	r1, r1, #1
   1ac50:	str	r4, [sl, r2, lsl #2]
   1ac54:	str	r1, [sp, #92]	; 0x5c
   1ac58:	b	1a994 <__assert_fail@plt+0x9294>
   1ac5c:	mov	r6, #0
   1ac60:	b	1897c <__assert_fail@plt+0x727c>
   1ac64:	mov	r9, #12
   1ac68:	b	1ae6c <__assert_fail@plt+0x976c>
   1ac6c:	mov	r9, sl
   1ac70:	b	1ac80 <__assert_fail@plt+0x9580>
   1ac74:	mov	r9, r0
   1ac78:	b	1ae6c <__assert_fail@plt+0x976c>
   1ac7c:	mov	r5, #1
   1ac80:	ldr	r0, [sp, #88]	; 0x58
   1ac84:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ac88:	ldr	r0, [fp, #-184]	; 0xffffff48
   1ac8c:	cmp	r0, r9
   1ac90:	beq	1ac98 <__assert_fail@plt+0x9598>
   1ac94:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ac98:	mov	r0, #16
   1ac9c:	cmp	r5, #0
   1aca0:	str	r0, [fp, #-188]	; 0xffffff44
   1aca4:	mov	r0, #0
   1aca8:	str	r0, [fp, #-192]	; 0xffffff40
   1acac:	str	r9, [fp, #-184]	; 0xffffff48
   1acb0:	mov	r9, #1
   1acb4:	bne	1ae6c <__assert_fail@plt+0x976c>
   1acb8:	ldr	r1, [r8]
   1acbc:	ldr	r0, [r8, #8]
   1acc0:	cmp	r1, #1
   1acc4:	blt	1ad04 <__assert_fail@plt+0x9604>
   1acc8:	mov	r5, #0
   1accc:	mov	r6, #0
   1acd0:	add	r0, r0, r5
   1acd4:	ldr	r0, [r0, #20]
   1acd8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1acdc:	ldr	r0, [r8, #8]
   1ace0:	add	r0, r0, r5
   1ace4:	ldr	r0, [r0, #8]
   1ace8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1acec:	ldr	r1, [r8]
   1acf0:	ldr	r0, [r8, #8]
   1acf4:	add	r6, r6, #1
   1acf8:	add	r5, r5, #24
   1acfc:	cmp	r6, r1
   1ad00:	blt	1acd0 <__assert_fail@plt+0x95d0>
   1ad04:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ad08:	b	1ae6c <__assert_fail@plt+0x976c>
   1ad0c:	ldr	r5, [fp, #20]
   1ad10:	ldr	r9, [sp, #60]	; 0x3c
   1ad14:	mov	r0, sl
   1ad18:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ad1c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1ad20:	cmp	r0, r9
   1ad24:	beq	1ad2c <__assert_fail@plt+0x962c>
   1ad28:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ad2c:	mov	r0, #16
   1ad30:	cmp	r8, #0
   1ad34:	str	r0, [fp, #-188]	; 0xffffff44
   1ad38:	mov	r0, #0
   1ad3c:	str	r0, [fp, #-192]	; 0xffffff40
   1ad40:	str	r9, [fp, #-184]	; 0xffffff48
   1ad44:	beq	1ada0 <__assert_fail@plt+0x96a0>
   1ad48:	ldr	r1, [r8]
   1ad4c:	ldr	r0, [r8, #8]
   1ad50:	mov	r6, r5
   1ad54:	cmp	r1, #1
   1ad58:	blt	1ad98 <__assert_fail@plt+0x9698>
   1ad5c:	mov	r4, #0
   1ad60:	mov	r5, #0
   1ad64:	add	r0, r0, r4
   1ad68:	ldr	r0, [r0, #20]
   1ad6c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ad70:	ldr	r0, [r8, #8]
   1ad74:	add	r0, r0, r4
   1ad78:	ldr	r0, [r0, #8]
   1ad7c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ad80:	ldr	r1, [r8]
   1ad84:	ldr	r0, [r8, #8]
   1ad88:	add	r5, r5, #1
   1ad8c:	add	r4, r4, #24
   1ad90:	cmp	r5, r1
   1ad94:	blt	1ad64 <__assert_fail@plt+0x9664>
   1ad98:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ad9c:	mov	r5, r6
   1ada0:	ldrb	r0, [sp, #180]	; 0xb4
   1ada4:	cmp	r0, #0
   1ada8:	bne	1aee4 <__assert_fail@plt+0x97e4>
   1adac:	ldr	r1, [fp, #-200]	; 0xffffff38
   1adb0:	ldr	r4, [sp, #28]
   1adb4:	add	r0, r5, #4
   1adb8:	mov	r2, r7
   1adbc:	ldr	r3, [r0, #-4]
   1adc0:	cmn	r3, #1
   1adc4:	addne	r3, r3, r1
   1adc8:	strne	r3, [r0, #-4]
   1adcc:	ldrne	r3, [r0]
   1add0:	addne	r3, r3, r1
   1add4:	strne	r3, [r0]
   1add8:	add	r0, r0, #8
   1addc:	subs	r2, r2, #1
   1ade0:	bne	1adbc <__assert_fail@plt+0x96bc>
   1ade4:	cmp	r4, #1
   1ade8:	blt	1adfc <__assert_fail@plt+0x96fc>
   1adec:	add	r0, r5, r7, lsl #3
   1adf0:	lsl	r2, r4, #3
   1adf4:	mov	r1, #255	; 0xff
   1adf8:	bl	11610 <memset@plt>
   1adfc:	ldr	r0, [sp, #96]	; 0x60
   1ae00:	mov	r9, #0
   1ae04:	ldr	r0, [r0, #132]	; 0x84
   1ae08:	cmp	r0, #0
   1ae0c:	beq	1ae6c <__assert_fail@plt+0x976c>
   1ae10:	cmp	r7, #2
   1ae14:	bcc	1ae6c <__assert_fail@plt+0x976c>
   1ae18:	ldr	r1, [fp, #16]
   1ae1c:	ldr	r2, [sp, #28]
   1ae20:	mov	r6, r5
   1ae24:	sub	r1, r1, #1
   1ae28:	sub	r1, r1, r2
   1ae2c:	mov	r2, #0
   1ae30:	ldr	r3, [r0, r2, lsl #2]
   1ae34:	cmp	r2, r3
   1ae38:	beq	1ae5c <__assert_fail@plt+0x975c>
   1ae3c:	add	r3, r6, r3, lsl #3
   1ae40:	add	r7, r6, r2, lsl #3
   1ae44:	ldr	r3, [r3, #8]
   1ae48:	str	r3, [r7, #8]
   1ae4c:	ldr	r3, [r0, r2, lsl #2]
   1ae50:	add	r3, r6, r3, lsl #3
   1ae54:	ldr	r3, [r3, #12]
   1ae58:	str	r3, [r7, #12]
   1ae5c:	add	r2, r2, #1
   1ae60:	cmp	r1, r2
   1ae64:	bne	1ae30 <__assert_fail@plt+0x9730>
   1ae68:	mov	r9, #0
   1ae6c:	ldr	r0, [sp, #204]	; 0xcc
   1ae70:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ae74:	ldr	r0, [sp, #96]	; 0x60
   1ae78:	ldr	r0, [r0, #76]	; 0x4c
   1ae7c:	cmp	r0, #0
   1ae80:	beq	1ae9c <__assert_fail@plt+0x979c>
   1ae84:	add	r0, sp, #104	; 0x68
   1ae88:	bl	22ed0 <__assert_fail@plt+0x117d0>
   1ae8c:	ldr	r0, [sp, #236]	; 0xec
   1ae90:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ae94:	ldr	r0, [sp, #220]	; 0xdc
   1ae98:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ae9c:	ldr	r0, [sp, #112]	; 0x70
   1aea0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1aea4:	ldr	r0, [sp, #116]	; 0x74
   1aea8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1aeac:	ldrb	r0, [sp, #179]	; 0xb3
   1aeb0:	cmp	r0, #0
   1aeb4:	beq	1aec0 <__assert_fail@plt+0x97c0>
   1aeb8:	ldr	r0, [sp, #108]	; 0x6c
   1aebc:	bl	13de4 <__assert_fail@plt+0x26e4>
   1aec0:	mov	r0, r9
   1aec4:	sub	sp, fp, #28
   1aec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aecc:	mov	r0, r6
   1aed0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1aed4:	mov	r0, #0
   1aed8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1aedc:	mov	r9, #12
   1aee0:	b	1ae6c <__assert_fail@plt+0x976c>
   1aee4:	ldr	ip, [sp, #24]
   1aee8:	ldr	r4, [sp, #28]
   1aeec:	add	r0, r5, #4
   1aef0:	mov	r1, r7
   1aef4:	ldr	r2, [r0, #-4]
   1aef8:	cmn	r2, #1
   1aefc:	beq	1af44 <__assert_fail@plt+0x9844>
   1af00:	ldr	r7, [sp, #132]	; 0x84
   1af04:	ldr	r3, [sp, #116]	; 0x74
   1af08:	mov	r6, ip
   1af0c:	cmp	r2, r7
   1af10:	addne	r6, r3, r2, lsl #2
   1af14:	ldr	r2, [r6]
   1af18:	str	r2, [r0, #-4]
   1af1c:	ldr	r6, [r0]
   1af20:	cmp	r6, r7
   1af24:	mov	r7, ip
   1af28:	addne	r7, r3, r6, lsl #2
   1af2c:	ldr	r3, [r7]
   1af30:	ldr	r7, [fp, #-200]	; 0xffffff38
   1af34:	add	r2, r2, r7
   1af38:	add	r3, r3, r7
   1af3c:	ldr	r7, [sp, #68]	; 0x44
   1af40:	stmda	r0, {r2, r3}
   1af44:	add	r0, r0, #8
   1af48:	subs	r1, r1, #1
   1af4c:	bne	1aef4 <__assert_fail@plt+0x97f4>
   1af50:	b	1ade4 <__assert_fail@plt+0x96e4>
   1af54:	mov	r9, #1
   1af58:	b	1ae6c <__assert_fail@plt+0x976c>
   1af5c:	mov	r0, #0
   1af60:	str	r0, [sp, #88]	; 0x58
   1af64:	ldr	r0, [sp, #88]	; 0x58
   1af68:	bl	13de4 <__assert_fail@plt+0x26e4>
   1af6c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1af70:	cmp	r0, r9
   1af74:	beq	1af7c <__assert_fail@plt+0x987c>
   1af78:	bl	13de4 <__assert_fail@plt+0x26e4>
   1af7c:	mov	r0, #16
   1af80:	cmp	r8, #0
   1af84:	str	r0, [fp, #-188]	; 0xffffff44
   1af88:	mov	r0, #0
   1af8c:	str	r0, [fp, #-192]	; 0xffffff40
   1af90:	str	r9, [fp, #-184]	; 0xffffff48
   1af94:	mov	r9, #12
   1af98:	beq	1ae6c <__assert_fail@plt+0x976c>
   1af9c:	ldr	r1, [r8]
   1afa0:	ldr	r0, [r8, #8]
   1afa4:	cmp	r1, #1
   1afa8:	blt	1ad04 <__assert_fail@plt+0x9604>
   1afac:	mov	r5, #0
   1afb0:	mov	r6, #0
   1afb4:	add	r0, r0, r5
   1afb8:	ldr	r0, [r0, #20]
   1afbc:	bl	13de4 <__assert_fail@plt+0x26e4>
   1afc0:	ldr	r0, [r8, #8]
   1afc4:	add	r0, r0, r5
   1afc8:	ldr	r0, [r0, #8]
   1afcc:	bl	13de4 <__assert_fail@plt+0x26e4>
   1afd0:	ldr	r1, [r8]
   1afd4:	ldr	r0, [r8, #8]
   1afd8:	add	r6, r6, #1
   1afdc:	add	r5, r5, #24
   1afe0:	cmp	r6, r1
   1afe4:	blt	1afb4 <__assert_fail@plt+0x98b4>
   1afe8:	b	1ad04 <__assert_fail@plt+0x9604>
   1afec:	mov	r0, #0
   1aff0:	str	r0, [r7]
   1aff4:	str	r0, [sl]
   1aff8:	b	1af64 <__assert_fail@plt+0x9864>
   1affc:	push	{fp, lr}
   1b000:	mov	fp, sp
   1b004:	sub	sp, sp, #16
   1b008:	mov	ip, #1
   1b00c:	str	r2, [sp, #4]
   1b010:	str	ip, [sp, #12]
   1b014:	mov	ip, #0
   1b018:	str	ip, [sp]
   1b01c:	ldr	ip, [fp, #8]
   1b020:	str	ip, [sp, #8]
   1b024:	bl	1b030 <__assert_fail@plt+0x9930>
   1b028:	mov	sp, fp
   1b02c:	pop	{fp, pc}
   1b030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b034:	add	fp, sp, #28
   1b038:	sub	sp, sp, #44	; 0x2c
   1b03c:	mvn	r4, #0
   1b040:	cmp	r3, #0
   1b044:	blt	1b394 <__assert_fail@plt+0x9c94>
   1b048:	mov	r6, r3
   1b04c:	mov	r8, r2
   1b050:	cmp	r3, r2
   1b054:	bgt	1b394 <__assert_fail@plt+0x9c94>
   1b058:	mov	r5, r0
   1b05c:	ldr	r0, [fp, #8]
   1b060:	mov	r7, r8
   1b064:	str	r1, [sp, #24]
   1b068:	movw	r1, #0
   1b06c:	ldr	sl, [r5]
   1b070:	movt	r1, #0
   1b074:	add	r0, r0, r6
   1b078:	cmp	r0, r8
   1b07c:	bicle	r7, r0, r0, asr #31
   1b080:	movw	r0, #0
   1b084:	movt	r0, #0
   1b088:	orrs	r4, r1, r0
   1b08c:	beq	1b098 <__assert_fail@plt+0x9998>
   1b090:	add	r0, sl, #136	; 0x88
   1b094:	bl	11430 <pthread_mutex_lock@plt>
   1b098:	ldrb	r0, [r5, #28]
   1b09c:	ldr	r9, [fp, #16]
   1b0a0:	cmp	r7, r6
   1b0a4:	ubfx	r1, r0, #5, #2
   1b0a8:	str	r4, [sp, #28]
   1b0ac:	str	r6, [sp, #36]	; 0x24
   1b0b0:	str	r1, [sp, #20]
   1b0b4:	ble	1b150 <__assert_fail@plt+0x9a50>
   1b0b8:	tst	r0, #8
   1b0bc:	bne	1b150 <__assert_fail@plt+0x9a50>
   1b0c0:	ldr	r6, [r5, #16]
   1b0c4:	cmp	r6, #0
   1b0c8:	beq	1b150 <__assert_fail@plt+0x9a50>
   1b0cc:	ldr	r4, [r5]
   1b0d0:	mov	r0, r6
   1b0d4:	mov	r1, #0
   1b0d8:	mov	r2, #256	; 0x100
   1b0dc:	bl	11610 <memset@plt>
   1b0e0:	ldr	r1, [r4, #36]	; 0x24
   1b0e4:	mov	r0, r5
   1b0e8:	mov	r2, r6
   1b0ec:	bl	17b2c <__assert_fail@plt+0x642c>
   1b0f0:	ldr	r0, [r4, #36]	; 0x24
   1b0f4:	ldr	r1, [r4, #40]	; 0x28
   1b0f8:	cmp	r0, r1
   1b0fc:	beq	1b110 <__assert_fail@plt+0x9a10>
   1b100:	mov	r0, r5
   1b104:	mov	r2, r6
   1b108:	bl	17b2c <__assert_fail@plt+0x642c>
   1b10c:	ldr	r0, [r4, #36]	; 0x24
   1b110:	ldr	r1, [r4, #44]	; 0x2c
   1b114:	cmp	r0, r1
   1b118:	beq	1b12c <__assert_fail@plt+0x9a2c>
   1b11c:	mov	r0, r5
   1b120:	mov	r2, r6
   1b124:	bl	17b2c <__assert_fail@plt+0x642c>
   1b128:	ldr	r0, [r4, #36]	; 0x24
   1b12c:	ldr	r1, [r4, #48]	; 0x30
   1b130:	cmp	r0, r1
   1b134:	beq	1b144 <__assert_fail@plt+0x9a44>
   1b138:	mov	r0, r5
   1b13c:	mov	r2, r6
   1b140:	bl	17b2c <__assert_fail@plt+0x642c>
   1b144:	ldrb	r0, [r5, #28]
   1b148:	orr	r0, r0, #8
   1b14c:	strb	r0, [r5, #28]
   1b150:	str	sl, [sp, #32]
   1b154:	mov	sl, #1
   1b158:	mov	r4, #0
   1b15c:	cmp	r9, #0
   1b160:	str	r5, [fp, #-32]	; 0xffffffe0
   1b164:	beq	1b1a4 <__assert_fail@plt+0x9aa4>
   1b168:	ldr	r6, [sp, #36]	; 0x24
   1b16c:	ands	r1, r0, #16
   1b170:	bne	1b1e0 <__assert_fail@plt+0x9ae0>
   1b174:	and	r0, r0, #6
   1b178:	cmp	r0, #4
   1b17c:	bne	1b1d0 <__assert_fail@plt+0x9ad0>
   1b180:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b184:	ldr	sl, [r9]
   1b188:	ldr	r0, [r0, #24]
   1b18c:	cmp	sl, r0
   1b190:	bhi	1b1d8 <__assert_fail@plt+0x9ad8>
   1b194:	cmp	sl, #1
   1b198:	movwlt	r9, #0
   1b19c:	movwlt	sl, #1
   1b1a0:	b	1b1dc <__assert_fail@plt+0x9adc>
   1b1a4:	ldr	r6, [sp, #36]	; 0x24
   1b1a8:	lsl	r0, sl, #3
   1b1ac:	bl	2aa84 <__assert_fail@plt+0x19384>
   1b1b0:	cmp	r0, #0
   1b1b4:	bne	1b1f0 <__assert_fail@plt+0x9af0>
   1b1b8:	ldr	r5, [sp, #32]
   1b1bc:	mvn	r4, #1
   1b1c0:	ldr	r0, [sp, #28]
   1b1c4:	cmp	r0, #0
   1b1c8:	bne	1b38c <__assert_fail@plt+0x9c8c>
   1b1cc:	b	1b394 <__assert_fail@plt+0x9c94>
   1b1d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b1d4:	ldr	r0, [r0, #24]
   1b1d8:	add	sl, r0, #1
   1b1dc:	mov	r4, r9
   1b1e0:	lsl	r0, sl, #3
   1b1e4:	bl	2aa84 <__assert_fail@plt+0x19384>
   1b1e8:	cmp	r0, #0
   1b1ec:	beq	1b1b8 <__assert_fail@plt+0x9ab8>
   1b1f0:	mov	r9, r0
   1b1f4:	ldr	r0, [fp, #12]
   1b1f8:	str	r7, [sp]
   1b1fc:	mov	r2, r8
   1b200:	mov	r3, r6
   1b204:	stmib	sp, {r0, sl}
   1b208:	str	r9, [sp, #12]
   1b20c:	ldr	r0, [sp, #20]
   1b210:	ldr	r1, [sp, #24]
   1b214:	str	r0, [sp, #16]
   1b218:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b21c:	bl	188a4 <__assert_fail@plt+0x71a4>
   1b220:	cmp	r0, #0
   1b224:	beq	1b238 <__assert_fail@plt+0x9b38>
   1b228:	mvn	r4, #1
   1b22c:	cmp	r0, #1
   1b230:	mvneq	r4, #0
   1b234:	b	1b374 <__assert_fail@plt+0x9c74>
   1b238:	cmp	r4, #0
   1b23c:	beq	1b358 <__assert_fail@plt+0x9c58>
   1b240:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b244:	add	r6, sl, #1
   1b248:	ldrb	r0, [r0, #28]
   1b24c:	ubfx	r0, r0, #1, #2
   1b250:	cmp	r0, #1
   1b254:	beq	1b2bc <__assert_fail@plt+0x9bbc>
   1b258:	mov	r8, #2
   1b25c:	cmp	r0, #0
   1b260:	bne	1b2cc <__assert_fail@plt+0x9bcc>
   1b264:	lsl	r7, r6, #2
   1b268:	mov	r0, r7
   1b26c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1b270:	mov	r8, #0
   1b274:	cmp	r0, #0
   1b278:	str	r0, [r4, #4]
   1b27c:	beq	1b4ac <__assert_fail@plt+0x9dac>
   1b280:	mov	r0, r7
   1b284:	bl	2aa84 <__assert_fail@plt+0x19384>
   1b288:	cmp	r0, #0
   1b28c:	str	r0, [r4, #8]
   1b290:	beq	1b4a4 <__assert_fail@plt+0x9da4>
   1b294:	str	r6, [r4]
   1b298:	mov	r8, #1
   1b29c:	cmp	sl, #1
   1b2a0:	bge	1b2d4 <__assert_fail@plt+0x9bd4>
   1b2a4:	mov	sl, #0
   1b2a8:	ldr	r0, [r4]
   1b2ac:	ldr	r6, [sp, #36]	; 0x24
   1b2b0:	cmp	sl, r0
   1b2b4:	bcs	1b33c <__assert_fail@plt+0x9c3c>
   1b2b8:	b	1b31c <__assert_fail@plt+0x9c1c>
   1b2bc:	ldr	r0, [r4]
   1b2c0:	mov	r8, #1
   1b2c4:	cmp	r6, r0
   1b2c8:	bhi	1b454 <__assert_fail@plt+0x9d54>
   1b2cc:	cmp	sl, #1
   1b2d0:	blt	1b2a4 <__assert_fail@plt+0x9ba4>
   1b2d4:	ldmib	r4, {r6, r7}
   1b2d8:	mov	r2, #0
   1b2dc:	cmp	sl, #3
   1b2e0:	bhi	1b3a0 <__assert_fail@plt+0x9ca0>
   1b2e4:	add	r0, r9, r2, lsl #3
   1b2e8:	add	r0, r0, #4
   1b2ec:	ldr	r1, [r0, #-4]
   1b2f0:	str	r1, [r6, r2, lsl #2]
   1b2f4:	ldr	r1, [r0]
   1b2f8:	add	r0, r0, #8
   1b2fc:	str	r1, [r7, r2, lsl #2]
   1b300:	add	r2, r2, #1
   1b304:	cmp	sl, r2
   1b308:	bne	1b2ec <__assert_fail@plt+0x9bec>
   1b30c:	ldr	r0, [r4]
   1b310:	ldr	r6, [sp, #36]	; 0x24
   1b314:	cmp	sl, r0
   1b318:	bcs	1b33c <__assert_fail@plt+0x9c3c>
   1b31c:	ldmib	r4, {r0, r1}
   1b320:	mvn	r2, #0
   1b324:	str	r2, [r1, sl, lsl #2]
   1b328:	str	r2, [r0, sl, lsl #2]
   1b32c:	add	sl, sl, #1
   1b330:	ldr	r3, [r4]
   1b334:	cmp	sl, r3
   1b338:	bcc	1b324 <__assert_fail@plt+0x9c24>
   1b33c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b340:	cmp	r8, #0
   1b344:	ldrb	r0, [r1, #28]
   1b348:	and	r0, r0, #249	; 0xf9
   1b34c:	orr	r0, r0, r8, lsl #1
   1b350:	strb	r0, [r1, #28]
   1b354:	beq	1b370 <__assert_fail@plt+0x9c70>
   1b358:	ldr	r0, [fp, #20]
   1b35c:	cmp	r0, #0
   1b360:	ldreq	r4, [r9]
   1b364:	ldrne	r0, [r9, #4]
   1b368:	subne	r4, r0, r6
   1b36c:	b	1b374 <__assert_fail@plt+0x9c74>
   1b370:	mvn	r4, #1
   1b374:	ldr	r5, [sp, #32]
   1b378:	mov	r0, r9
   1b37c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b380:	ldr	r0, [sp, #28]
   1b384:	cmp	r0, #0
   1b388:	beq	1b394 <__assert_fail@plt+0x9c94>
   1b38c:	add	r0, r5, #136	; 0x88
   1b390:	bl	11388 <pthread_mutex_unlock@plt>
   1b394:	mov	r0, r4
   1b398:	sub	sp, fp, #28
   1b39c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3a0:	add	ip, r7, sl, lsl #2
   1b3a4:	mov	lr, #0
   1b3a8:	add	r5, r9, sl, lsl #3
   1b3ac:	str	r8, [sp, #24]
   1b3b0:	mov	r8, #0
   1b3b4:	add	r3, r6, sl, lsl #2
   1b3b8:	mov	r1, #0
   1b3bc:	mov	r0, #0
   1b3c0:	mov	r2, #0
   1b3c4:	cmp	r9, ip
   1b3c8:	movwcc	lr, #1
   1b3cc:	cmp	r5, r7
   1b3d0:	movwhi	r8, #1
   1b3d4:	cmp	r9, r3
   1b3d8:	movwcc	r1, #1
   1b3dc:	cmp	r5, r6
   1b3e0:	mov	r5, #0
   1b3e4:	movwhi	r5, #1
   1b3e8:	cmp	r7, r3
   1b3ec:	mov	r3, #0
   1b3f0:	movwcc	r3, #1
   1b3f4:	cmp	r6, ip
   1b3f8:	movwcc	r0, #1
   1b3fc:	tst	r0, r3
   1b400:	bne	1b44c <__assert_fail@plt+0x9d4c>
   1b404:	ands	r0, r5, r1
   1b408:	bne	1b44c <__assert_fail@plt+0x9d4c>
   1b40c:	ands	r0, r8, lr
   1b410:	ldr	r8, [sp, #24]
   1b414:	bne	1b2e4 <__assert_fail@plt+0x9be4>
   1b418:	bic	r2, sl, #3
   1b41c:	mov	r1, r7
   1b420:	mov	r0, r6
   1b424:	mov	r5, r9
   1b428:	mov	r3, r2
   1b42c:	vld2.32	{d16-d19}, [r5]!
   1b430:	subs	r3, r3, #4
   1b434:	vst1.32	{d16-d17}, [r0]!
   1b438:	vst1.32	{d18-d19}, [r1]!
   1b43c:	bne	1b42c <__assert_fail@plt+0x9d2c>
   1b440:	cmp	sl, r2
   1b444:	bne	1b2e4 <__assert_fail@plt+0x9be4>
   1b448:	b	1b30c <__assert_fail@plt+0x9c0c>
   1b44c:	ldr	r8, [sp, #24]
   1b450:	b	1b2e4 <__assert_fail@plt+0x9be4>
   1b454:	ldr	r0, [r4, #4]
   1b458:	lsl	r7, r6, #2
   1b45c:	mov	r1, r7
   1b460:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1b464:	mov	r8, #0
   1b468:	cmp	r0, #0
   1b46c:	beq	1b4ac <__assert_fail@plt+0x9dac>
   1b470:	mov	r5, r0
   1b474:	ldr	r0, [r4, #8]
   1b478:	mov	r1, r7
   1b47c:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1b480:	cmp	r0, #0
   1b484:	beq	1b4b4 <__assert_fail@plt+0x9db4>
   1b488:	str	r6, [r4]
   1b48c:	str	r5, [r4, #4]
   1b490:	str	r0, [r4, #8]
   1b494:	mov	r8, #1
   1b498:	cmp	sl, #1
   1b49c:	bge	1b2d4 <__assert_fail@plt+0x9bd4>
   1b4a0:	b	1b2a4 <__assert_fail@plt+0x9ba4>
   1b4a4:	ldr	r0, [r4, #4]
   1b4a8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b4ac:	ldr	r6, [sp, #36]	; 0x24
   1b4b0:	b	1b33c <__assert_fail@plt+0x9c3c>
   1b4b4:	mov	r0, r5
   1b4b8:	b	1b4a8 <__assert_fail@plt+0x9da8>
   1b4bc:	push	{fp, lr}
   1b4c0:	mov	fp, sp
   1b4c4:	sub	sp, sp, #16
   1b4c8:	mov	ip, #0
   1b4cc:	str	r2, [sp, #4]
   1b4d0:	str	ip, [sp, #12]
   1b4d4:	ldr	ip, [fp, #12]
   1b4d8:	str	ip, [sp, #8]
   1b4dc:	ldr	ip, [fp, #8]
   1b4e0:	str	ip, [sp]
   1b4e4:	bl	1b030 <__assert_fail@plt+0x9930>
   1b4e8:	mov	sp, fp
   1b4ec:	pop	{fp, pc}
   1b4f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4f4:	add	fp, sp, #28
   1b4f8:	sub	sp, sp, #20
   1b4fc:	ldr	r4, [fp, #8]
   1b500:	mov	r8, r1
   1b504:	mov	r1, r0
   1b508:	mov	r6, r2
   1b50c:	orr	r0, r4, r2
   1b510:	ldr	r2, [fp, #20]
   1b514:	orr	r0, r0, r2
   1b518:	cmp	r0, #0
   1b51c:	blt	1b5dc <__assert_fail@plt+0x9edc>
   1b520:	adds	sl, r6, r4
   1b524:	bvs	1b5dc <__assert_fail@plt+0x9edc>
   1b528:	mov	r5, #0
   1b52c:	cmp	r4, #1
   1b530:	blt	1b588 <__assert_fail@plt+0x9e88>
   1b534:	mov	r9, r3
   1b538:	cmp	r6, #1
   1b53c:	blt	1b590 <__assert_fail@plt+0x9e90>
   1b540:	mov	r0, sl
   1b544:	mov	r5, r1
   1b548:	bl	2aa84 <__assert_fail@plt+0x19384>
   1b54c:	cmp	r0, #0
   1b550:	beq	1b5dc <__assert_fail@plt+0x9edc>
   1b554:	mov	r1, r8
   1b558:	mov	r2, r6
   1b55c:	mov	r7, r0
   1b560:	bl	11448 <memcpy@plt>
   1b564:	add	r0, r7, r6
   1b568:	mov	r1, r9
   1b56c:	mov	r2, r4
   1b570:	bl	11448 <memcpy@plt>
   1b574:	ldr	r2, [fp, #20]
   1b578:	mov	r1, r5
   1b57c:	mov	r4, r7
   1b580:	mov	r5, #0
   1b584:	b	1b598 <__assert_fail@plt+0x9e98>
   1b588:	mov	r7, r8
   1b58c:	b	1b594 <__assert_fail@plt+0x9e94>
   1b590:	mov	r7, r9
   1b594:	mov	r4, #0
   1b598:	ldr	r0, [fp, #16]
   1b59c:	ldr	r3, [fp, #12]
   1b5a0:	mov	r6, #1
   1b5a4:	str	r2, [sp, #4]
   1b5a8:	mov	r2, sl
   1b5ac:	str	r5, [sp]
   1b5b0:	str	r6, [sp, #12]
   1b5b4:	str	r0, [sp, #8]
   1b5b8:	mov	r0, r1
   1b5bc:	mov	r1, r7
   1b5c0:	bl	1b030 <__assert_fail@plt+0x9930>
   1b5c4:	mov	r5, r0
   1b5c8:	mov	r0, r4
   1b5cc:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b5d0:	mov	r0, r5
   1b5d4:	sub	sp, fp, #28
   1b5d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5dc:	mvn	r0, #1
   1b5e0:	sub	sp, fp, #28
   1b5e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5ec:	add	fp, sp, #28
   1b5f0:	sub	sp, sp, #20
   1b5f4:	ldr	r4, [fp, #8]
   1b5f8:	mov	r8, r1
   1b5fc:	mov	r1, r0
   1b600:	mov	r6, r2
   1b604:	orr	r0, r4, r2
   1b608:	ldr	r2, [fp, #24]
   1b60c:	orr	r0, r0, r2
   1b610:	cmp	r0, #0
   1b614:	blt	1b6d4 <__assert_fail@plt+0x9fd4>
   1b618:	adds	sl, r6, r4
   1b61c:	bvs	1b6d4 <__assert_fail@plt+0x9fd4>
   1b620:	mov	r5, #0
   1b624:	cmp	r4, #1
   1b628:	blt	1b680 <__assert_fail@plt+0x9f80>
   1b62c:	mov	r9, r3
   1b630:	cmp	r6, #1
   1b634:	blt	1b688 <__assert_fail@plt+0x9f88>
   1b638:	mov	r0, sl
   1b63c:	mov	r5, r1
   1b640:	bl	2aa84 <__assert_fail@plt+0x19384>
   1b644:	cmp	r0, #0
   1b648:	beq	1b6d4 <__assert_fail@plt+0x9fd4>
   1b64c:	mov	r1, r8
   1b650:	mov	r2, r6
   1b654:	mov	r7, r0
   1b658:	bl	11448 <memcpy@plt>
   1b65c:	add	r0, r7, r6
   1b660:	mov	r1, r9
   1b664:	mov	r2, r4
   1b668:	bl	11448 <memcpy@plt>
   1b66c:	ldr	r2, [fp, #24]
   1b670:	mov	r1, r5
   1b674:	mov	r4, r7
   1b678:	mov	r5, #0
   1b67c:	b	1b690 <__assert_fail@plt+0x9f90>
   1b680:	mov	r7, r8
   1b684:	b	1b68c <__assert_fail@plt+0x9f8c>
   1b688:	mov	r7, r9
   1b68c:	mov	r4, #0
   1b690:	ldr	r0, [fp, #20]
   1b694:	ldr	r6, [fp, #16]
   1b698:	ldr	r3, [fp, #12]
   1b69c:	str	r2, [sp, #4]
   1b6a0:	mov	r2, sl
   1b6a4:	str	r5, [sp, #12]
   1b6a8:	str	r0, [sp, #8]
   1b6ac:	mov	r0, r1
   1b6b0:	mov	r1, r7
   1b6b4:	str	r6, [sp]
   1b6b8:	bl	1b030 <__assert_fail@plt+0x9930>
   1b6bc:	mov	r5, r0
   1b6c0:	mov	r0, r4
   1b6c4:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b6c8:	mov	r0, r5
   1b6cc:	sub	sp, fp, #28
   1b6d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6d4:	mvn	r0, #1
   1b6d8:	sub	sp, fp, #28
   1b6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6e0:	ldrb	ip, [r0, #28]
   1b6e4:	cmp	r2, #0
   1b6e8:	bic	ip, ip, #6
   1b6ec:	orrne	ip, ip, #2
   1b6f0:	strb	ip, [r0, #28]
   1b6f4:	ldr	r0, [sp]
   1b6f8:	moveq	r0, r2
   1b6fc:	cmp	r2, #0
   1b700:	moveq	r3, r2
   1b704:	stm	r1, {r2, r3}
   1b708:	str	r0, [r1, #8]
   1b70c:	bx	lr
   1b710:	push	{r4, sl, fp, lr}
   1b714:	add	fp, sp, #8
   1b718:	mov	r4, r0
   1b71c:	ldr	r0, [r0, #24]
   1b720:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b724:	ldr	r0, [r4, #36]	; 0x24
   1b728:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b72c:	ldr	r0, [r4, #40]	; 0x28
   1b730:	add	r1, r4, #4
   1b734:	cmp	r0, r1
   1b738:	beq	1b74c <__assert_fail@plt+0xa04c>
   1b73c:	ldr	r0, [r0, #8]
   1b740:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b744:	ldr	r0, [r4, #40]	; 0x28
   1b748:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b74c:	ldr	r0, [r4, #12]
   1b750:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b754:	ldr	r0, [r4, #48]	; 0x30
   1b758:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b75c:	ldr	r0, [r4, #44]	; 0x2c
   1b760:	bl	13de4 <__assert_fail@plt+0x26e4>
   1b764:	mov	r0, r4
   1b768:	pop	{r4, sl, fp, lr}
   1b76c:	b	13de4 <__assert_fail@plt+0x26e4>
   1b770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b774:	add	fp, sp, #28
   1b778:	sub	sp, sp, #92	; 0x5c
   1b77c:	mov	r9, r0
   1b780:	ldrb	r0, [r0, #74]	; 0x4a
   1b784:	ldr	r2, [r9, #36]	; 0x24
   1b788:	ldr	r1, [r9, #48]	; 0x30
   1b78c:	ldr	r4, [r9, #28]
   1b790:	cmp	r2, r1
   1b794:	movgt	r2, r1
   1b798:	cmp	r0, #0
   1b79c:	str	r2, [sp]
   1b7a0:	bne	1b7c0 <__assert_fail@plt+0xa0c0>
   1b7a4:	mov	r7, r9
   1b7a8:	ldr	r0, [r7, #64]!	; 0x40
   1b7ac:	cmp	r0, #0
   1b7b0:	bne	1b7c0 <__assert_fail@plt+0xa0c0>
   1b7b4:	ldrb	r0, [r9, #76]	; 0x4c
   1b7b8:	cmp	r0, #0
   1b7bc:	beq	1b7c8 <__assert_fail@plt+0xa0c8>
   1b7c0:	ldr	r6, [r9, #32]
   1b7c4:	b	1b9a4 <__assert_fail@plt+0xa2a4>
   1b7c8:	ldr	r0, [sp]
   1b7cc:	cmp	r0, r4
   1b7d0:	ble	1b7e0 <__assert_fail@plt+0xa0e0>
   1b7d4:	add	r8, r9, #16
   1b7d8:	mov	sl, r4
   1b7dc:	b	1b838 <__assert_fail@plt+0xa138>
   1b7e0:	mov	sl, r4
   1b7e4:	str	r4, [sp, #4]
   1b7e8:	b	1bab4 <__assert_fail@plt+0xa3b4>
   1b7ec:	add	r0, r4, #1
   1b7f0:	cmp	r0, #2
   1b7f4:	bcc	1b808 <__assert_fail@plt+0xa108>
   1b7f8:	ldr	r0, [r9, #36]	; 0x24
   1b7fc:	ldr	r1, [r9, #48]	; 0x30
   1b800:	cmp	r0, r1
   1b804:	blt	1b990 <__assert_fail@plt+0xa290>
   1b808:	ldr	r0, [r9, #4]
   1b80c:	ldr	r1, [sp, #4]
   1b810:	cmn	r4, #1
   1b814:	strb	sl, [r0, r1]
   1b818:	ldr	r0, [r9, #8]
   1b81c:	str	sl, [r0, r1, lsl #2]
   1b820:	add	sl, r1, #1
   1b824:	bne	1b970 <__assert_fail@plt+0xa270>
   1b828:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b82c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b830:	stm	r8, {r0, r1}
   1b834:	b	1b970 <__assert_fail@plt+0xa270>
   1b838:	ldr	r5, [r9, #24]
   1b83c:	ldr	r4, [r9]
   1b840:	str	sl, [sp, #4]
   1b844:	add	r0, r5, sl
   1b848:	ldrb	sl, [r4, r0]
   1b84c:	tst	sl, #128	; 0x80
   1b850:	bne	1b898 <__assert_fail@plt+0xa198>
   1b854:	mov	r0, r8
   1b858:	bl	11478 <mbsinit@plt>
   1b85c:	cmp	r0, #0
   1b860:	beq	1b898 <__assert_fail@plt+0xa198>
   1b864:	mov	r0, sl
   1b868:	bl	116d0 <towupper@plt>
   1b86c:	cmp	r0, #128	; 0x80
   1b870:	bcs	1b890 <__assert_fail@plt+0xa190>
   1b874:	ldr	r2, [sp, #4]
   1b878:	ldr	r1, [r9, #4]
   1b87c:	strb	r0, [r1, r2]
   1b880:	add	sl, r2, #1
   1b884:	ldr	r1, [r9, #8]
   1b888:	str	r0, [r1, r2, lsl #2]
   1b88c:	b	1b970 <__assert_fail@plt+0xa270>
   1b890:	ldr	r4, [r9]
   1b894:	ldr	r5, [r9, #24]
   1b898:	ldm	r8, {r0, r1}
   1b89c:	mov	r3, r8
   1b8a0:	str	r1, [fp, #-36]	; 0xffffffdc
   1b8a4:	str	r0, [fp, #-40]	; 0xffffffd8
   1b8a8:	ldm	sp, {r0, r1}
   1b8ac:	sub	r2, r0, r1
   1b8b0:	add	r0, r4, r5
   1b8b4:	add	r1, r0, r1
   1b8b8:	add	r0, sp, #12
   1b8bc:	bl	2aedc <__assert_fail@plt+0x197dc>
   1b8c0:	mov	r4, r0
   1b8c4:	sub	r0, r0, #1
   1b8c8:	cmn	r0, #4
   1b8cc:	bhi	1b7ec <__assert_fail@plt+0xa0ec>
   1b8d0:	ldr	r0, [sp, #12]
   1b8d4:	bl	116d0 <towupper@plt>
   1b8d8:	mov	r5, r0
   1b8dc:	ldr	r0, [sp, #12]
   1b8e0:	cmp	r5, r0
   1b8e4:	bne	1b908 <__assert_fail@plt+0xa208>
   1b8e8:	ldr	r1, [r9]
   1b8ec:	ldr	r2, [r9, #24]
   1b8f0:	ldr	r0, [r9, #4]
   1b8f4:	ldr	r6, [sp, #4]
   1b8f8:	add	r1, r1, r2
   1b8fc:	add	r0, r0, r6
   1b900:	add	r1, r1, r6
   1b904:	b	1b934 <__assert_fail@plt+0xa234>
   1b908:	add	sl, sp, #16
   1b90c:	mov	r1, r5
   1b910:	sub	r2, fp, #40	; 0x28
   1b914:	mov	r0, sl
   1b918:	bl	113b8 <wcrtomb@plt>
   1b91c:	cmp	r4, r0
   1b920:	bne	1b984 <__assert_fail@plt+0xa284>
   1b924:	ldr	r0, [r9, #4]
   1b928:	ldr	r6, [sp, #4]
   1b92c:	mov	r1, sl
   1b930:	add	r0, r0, r6
   1b934:	mov	r2, r4
   1b938:	bl	11448 <memcpy@plt>
   1b93c:	ldr	r0, [r9, #8]
   1b940:	add	sl, r6, #1
   1b944:	str	r5, [r0, r6, lsl #2]
   1b948:	add	r5, r4, r6
   1b94c:	cmp	sl, r5
   1b950:	bge	1b970 <__assert_fail@plt+0xa270>
   1b954:	add	r0, r0, r6, lsl #2
   1b958:	mvn	r1, #3
   1b95c:	add	r2, r1, r4, lsl #2
   1b960:	add	r0, r0, #4
   1b964:	mov	r1, #255	; 0xff
   1b968:	bl	11610 <memset@plt>
   1b96c:	mov	sl, r5
   1b970:	ldr	r0, [sp]
   1b974:	str	sl, [sp, #4]
   1b978:	cmp	r0, sl
   1b97c:	bgt	1b838 <__assert_fail@plt+0xa138>
   1b980:	b	1bab4 <__assert_fail@plt+0xa3b4>
   1b984:	ldr	r6, [sp, #4]
   1b988:	mov	sl, r6
   1b98c:	b	1b9bc <__assert_fail@plt+0xa2bc>
   1b990:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b994:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b998:	stm	r8, {r0, r1}
   1b99c:	ldr	sl, [sp, #4]
   1b9a0:	b	1bab4 <__assert_fail@plt+0xa3b4>
   1b9a4:	ldr	r0, [sp]
   1b9a8:	cmp	r4, r0
   1b9ac:	bge	1baac <__assert_fail@plt+0xa3ac>
   1b9b0:	add	r7, r9, #64	; 0x40
   1b9b4:	add	r8, r9, #16
   1b9b8:	mov	sl, r4
   1b9bc:	ldm	r8, {r0, r1}
   1b9c0:	str	r6, [sp, #4]
   1b9c4:	str	r0, [fp, #-40]	; 0xffffffd8
   1b9c8:	ldr	r0, [sp]
   1b9cc:	str	r1, [fp, #-36]	; 0xffffffdc
   1b9d0:	sub	r2, r0, sl
   1b9d4:	ldr	r0, [r7]
   1b9d8:	cmp	r0, #0
   1b9dc:	bne	1bacc <__assert_fail@plt+0xa3cc>
   1b9e0:	ldr	r0, [r9]
   1b9e4:	ldr	r1, [r9, #24]
   1b9e8:	add	r0, r0, r1
   1b9ec:	add	r4, r0, r6
   1b9f0:	add	r0, sp, #8
   1b9f4:	mov	r1, r4
   1b9f8:	mov	r3, r8
   1b9fc:	bl	2aedc <__assert_fail@plt+0x197dc>
   1ba00:	sub	r6, r0, #1
   1ba04:	mov	r5, r0
   1ba08:	cmn	r6, #4
   1ba0c:	bhi	1bb1c <__assert_fail@plt+0xa41c>
   1ba10:	ldr	r0, [sp, #8]
   1ba14:	bl	116d0 <towupper@plt>
   1ba18:	mov	r7, r0
   1ba1c:	ldr	r0, [sp, #8]
   1ba20:	cmp	r7, r0
   1ba24:	bne	1ba34 <__assert_fail@plt+0xa334>
   1ba28:	ldr	r0, [r9, #4]
   1ba2c:	mov	r1, r4
   1ba30:	b	1ba54 <__assert_fail@plt+0xa354>
   1ba34:	add	r0, sp, #16
   1ba38:	sub	r2, fp, #40	; 0x28
   1ba3c:	mov	r1, r7
   1ba40:	bl	113b8 <wcrtomb@plt>
   1ba44:	cmp	r0, r5
   1ba48:	bne	1bb98 <__assert_fail@plt+0xa498>
   1ba4c:	ldr	r0, [r9, #4]
   1ba50:	add	r1, sp, #16
   1ba54:	add	r0, r0, sl
   1ba58:	mov	r2, r5
   1ba5c:	bl	11448 <memcpy@plt>
   1ba60:	ldrb	r0, [r9, #76]	; 0x4c
   1ba64:	ldr	r6, [sp, #4]
   1ba68:	cmp	r0, #0
   1ba6c:	bne	1bc2c <__assert_fail@plt+0xa52c>
   1ba70:	ldr	r0, [r9, #8]
   1ba74:	add	r4, r5, sl
   1ba78:	add	r1, sl, #1
   1ba7c:	add	r6, r5, r6
   1ba80:	cmp	r1, r4
   1ba84:	str	r7, [r0, sl, lsl #2]
   1ba88:	bge	1baa4 <__assert_fail@plt+0xa3a4>
   1ba8c:	add	r0, r0, r1, lsl #2
   1ba90:	mvn	r1, #3
   1ba94:	add	r2, r1, r5, lsl #2
   1ba98:	mov	r1, #255	; 0xff
   1ba9c:	bl	11610 <memset@plt>
   1baa0:	b	1b9a4 <__assert_fail@plt+0xa2a4>
   1baa4:	mov	r4, r1
   1baa8:	b	1b9a4 <__assert_fail@plt+0xa2a4>
   1baac:	str	r6, [sp, #4]
   1bab0:	mov	sl, r4
   1bab4:	ldr	r0, [sp, #4]
   1bab8:	str	sl, [r9, #28]
   1babc:	str	r0, [r9, #32]
   1bac0:	mov	r0, #0
   1bac4:	sub	sp, fp, #28
   1bac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bacc:	cmp	r2, #1
   1bad0:	add	r4, sp, #16
   1bad4:	ldrge	r1, [r9, #80]	; 0x50
   1bad8:	cmpge	r1, #1
   1badc:	blt	1b9f0 <__assert_fail@plt+0xa2f0>
   1bae0:	ldr	r7, [r9, #24]
   1bae4:	ldr	r3, [r9]
   1bae8:	add	r4, sp, #16
   1baec:	add	r7, r6, r7
   1baf0:	add	r3, r3, r7
   1baf4:	mov	r7, #0
   1baf8:	ldrb	r5, [r3, r7]
   1bafc:	ldrb	r5, [r0, r5]
   1bb00:	strb	r5, [r4, r7]
   1bb04:	add	r7, r7, #1
   1bb08:	cmp	r7, r2
   1bb0c:	bge	1b9f0 <__assert_fail@plt+0xa2f0>
   1bb10:	cmp	r7, r1
   1bb14:	blt	1baf8 <__assert_fail@plt+0xa3f8>
   1bb18:	b	1b9f0 <__assert_fail@plt+0xa2f0>
   1bb1c:	add	r0, r5, #1
   1bb20:	cmp	r0, #2
   1bb24:	bcc	1bb38 <__assert_fail@plt+0xa438>
   1bb28:	ldr	r0, [r9, #36]	; 0x24
   1bb2c:	ldr	r1, [r9, #48]	; 0x30
   1bb30:	cmp	r0, r1
   1bb34:	blt	1bc98 <__assert_fail@plt+0xa598>
   1bb38:	ldr	r2, [r9, #24]
   1bb3c:	ldr	r6, [sp, #4]
   1bb40:	ldr	r0, [r9]
   1bb44:	ldr	r1, [r9, #64]	; 0x40
   1bb48:	add	r4, sl, #1
   1bb4c:	add	r2, r2, r6
   1bb50:	cmp	r1, #0
   1bb54:	ldrb	r0, [r0, r2]
   1bb58:	ldrbne	r0, [r1, r0]
   1bb5c:	ldr	r1, [r9, #4]
   1bb60:	strb	r0, [r1, sl]
   1bb64:	ldrb	r1, [r9, #76]	; 0x4c
   1bb68:	cmp	r1, #0
   1bb6c:	ldrne	r1, [r9, #12]
   1bb70:	strne	r6, [r1, sl, lsl #2]
   1bb74:	add	r6, r6, #1
   1bb78:	cmn	r5, #1
   1bb7c:	ldr	r1, [r9, #8]
   1bb80:	str	r0, [r1, sl, lsl #2]
   1bb84:	bne	1b9a4 <__assert_fail@plt+0xa2a4>
   1bb88:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1bb8c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1bb90:	stm	r8, {r0, r1}
   1bb94:	b	1b9a4 <__assert_fail@plt+0xa2a4>
   1bb98:	mov	r3, r0
   1bb9c:	cmn	r0, #1
   1bba0:	beq	1ba28 <__assert_fail@plt+0xa328>
   1bba4:	ldr	r1, [r9, #36]	; 0x24
   1bba8:	add	r4, r3, sl
   1bbac:	cmp	r4, r1
   1bbb0:	bhi	1bc98 <__assert_fail@plt+0xa598>
   1bbb4:	ldr	r0, [r9, #12]
   1bbb8:	cmp	r0, #0
   1bbbc:	bne	1bbdc <__assert_fail@plt+0xa4dc>
   1bbc0:	lsl	r0, r1, #2
   1bbc4:	mov	r8, r3
   1bbc8:	bl	2aa84 <__assert_fail@plt+0x19384>
   1bbcc:	mov	r3, r8
   1bbd0:	cmp	r0, #0
   1bbd4:	str	r0, [r9, #12]
   1bbd8:	beq	1bca8 <__assert_fail@plt+0xa5a8>
   1bbdc:	ldrb	r1, [r9, #76]	; 0x4c
   1bbe0:	cmp	r1, #0
   1bbe4:	bne	1bccc <__assert_fail@plt+0xa5cc>
   1bbe8:	cmp	sl, #0
   1bbec:	beq	1bcc4 <__assert_fail@plt+0xa5c4>
   1bbf0:	mov	r1, #0
   1bbf4:	cmp	sl, #4
   1bbf8:	bcc	1bcb4 <__assert_fail@plt+0xa5b4>
   1bbfc:	add	r2, pc, #524	; 0x20c
   1bc00:	bic	r1, sl, #3
   1bc04:	vmov.i32	q8, #4	; 0x00000004
   1bc08:	vld1.64	{d18-d19}, [r2 :128]
   1bc0c:	mov	ip, r1
   1bc10:	mov	r2, r0
   1bc14:	vadd.i32	q10, q9, q8
   1bc18:	vst1.32	{d18-d19}, [r2]!
   1bc1c:	subs	ip, ip, #4
   1bc20:	vorr	q9, q10, q10
   1bc24:	bne	1bc14 <__assert_fail@plt+0xa514>
   1bc28:	b	1bcbc <__assert_fail@plt+0xa5bc>
   1bc2c:	ldr	r0, [r9, #12]
   1bc30:	mov	r1, #0
   1bc34:	cmp	r5, #4
   1bc38:	bcc	1bc74 <__assert_fail@plt+0xa574>
   1bc3c:	add	r3, pc, #460	; 0x1cc
   1bc40:	bic	r1, r5, #3
   1bc44:	add	r2, r0, sl, lsl #2
   1bc48:	vdup.32	q8, r6
   1bc4c:	vmov.i32	q10, #4	; 0x00000004
   1bc50:	vld1.64	{d18-d19}, [r3 :128]
   1bc54:	mov	r3, r1
   1bc58:	vadd.i32	q11, q9, q8
   1bc5c:	vadd.i32	q9, q9, q10
   1bc60:	subs	r3, r3, #4
   1bc64:	vst1.32	{d22-d23}, [r2]!
   1bc68:	bne	1bc58 <__assert_fail@plt+0xa558>
   1bc6c:	cmp	r5, r1
   1bc70:	beq	1ba70 <__assert_fail@plt+0xa370>
   1bc74:	add	r2, r6, r1
   1bc78:	sub	r3, r5, r1
   1bc7c:	add	r1, sl, r1
   1bc80:	add	r0, r0, r1, lsl #2
   1bc84:	str	r2, [r0], #4
   1bc88:	add	r2, r2, #1
   1bc8c:	subs	r3, r3, #1
   1bc90:	bne	1bc84 <__assert_fail@plt+0xa584>
   1bc94:	b	1ba70 <__assert_fail@plt+0xa370>
   1bc98:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1bc9c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1bca0:	stm	r8, {r0, r1}
   1bca4:	b	1bab4 <__assert_fail@plt+0xa3b4>
   1bca8:	mov	r0, #12
   1bcac:	sub	sp, fp, #28
   1bcb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcb4:	str	r1, [r0, r1, lsl #2]
   1bcb8:	add	r1, r1, #1
   1bcbc:	cmp	sl, r1
   1bcc0:	bne	1bcb4 <__assert_fail@plt+0xa5b4>
   1bcc4:	mov	r0, #1
   1bcc8:	strb	r0, [r9, #76]	; 0x4c
   1bccc:	ldr	r0, [r9, #4]
   1bcd0:	add	r1, sp, #16
   1bcd4:	mov	r2, r3
   1bcd8:	mov	r8, r3
   1bcdc:	add	r0, r0, sl
   1bce0:	bl	11448 <memcpy@plt>
   1bce4:	ldr	lr, [r9, #8]
   1bce8:	ldr	ip, [sp, #4]
   1bcec:	cmp	r8, #2
   1bcf0:	str	r7, [lr, sl, lsl #2]
   1bcf4:	ldr	r2, [r9, #12]
   1bcf8:	str	ip, [r2, sl, lsl #2]
   1bcfc:	bcc	1bdd0 <__assert_fail@plt+0xa6d0>
   1bd00:	sub	r0, r8, #1
   1bd04:	mov	r1, #1
   1bd08:	cmp	r0, #4
   1bd0c:	bcs	1bd18 <__assert_fail@plt+0xa618>
   1bd10:	ldr	ip, [sp, #4]
   1bd14:	b	1bda0 <__assert_fail@plt+0xa6a0>
   1bd18:	str	r0, [sp]
   1bd1c:	add	r3, r8, sl
   1bd20:	add	r0, sl, #1
   1bd24:	add	r7, lr, r0, lsl #2
   1bd28:	add	ip, lr, r3, lsl #2
   1bd2c:	add	r0, r2, r0, lsl #2
   1bd30:	cmp	r0, ip
   1bd34:	ldr	ip, [sp, #4]
   1bd38:	addcc	r3, r2, r3, lsl #2
   1bd3c:	cmpcc	r7, r3
   1bd40:	bcc	1bda0 <__assert_fail@plt+0xa6a0>
   1bd44:	add	r1, pc, #212	; 0xd4
   1bd48:	vdup.32	q8, ip
   1bd4c:	vdup.32	q9, r6
   1bd50:	vdup.32	q10, r5
   1bd54:	vmov.i32	q12, #4	; 0x00000004
   1bd58:	vmov.i8	q13, #255	; 0xff
   1bd5c:	vld1.64	{d22-d23}, [r1 :128]
   1bd60:	ldr	r1, [sp]
   1bd64:	bic	ip, r1, #3
   1bd68:	orr	r1, ip, #1
   1bd6c:	mov	r3, ip
   1bd70:	vcgt.u32	q14, q10, q11
   1bd74:	subs	r3, r3, #4
   1bd78:	vbsl	q14, q11, q9
   1bd7c:	vadd.i32	q11, q11, q12
   1bd80:	vadd.i32	q14, q14, q8
   1bd84:	vst1.32	{d28-d29}, [r0]!
   1bd88:	vst1.32	{d26-d27}, [r7]!
   1bd8c:	bne	1bd70 <__assert_fail@plt+0xa670>
   1bd90:	ldr	r0, [sp]
   1bd94:	cmp	r0, ip
   1bd98:	ldr	ip, [sp, #4]
   1bd9c:	beq	1bdd0 <__assert_fail@plt+0xa6d0>
   1bda0:	add	r2, r2, sl, lsl #2
   1bda4:	add	r0, lr, sl, lsl #2
   1bda8:	mvn	r3, #0
   1bdac:	cmp	r1, r5
   1bdb0:	mov	r7, r6
   1bdb4:	movcc	r7, r1
   1bdb8:	add	r7, r7, ip
   1bdbc:	str	r7, [r2, r1, lsl #2]
   1bdc0:	str	r3, [r0, r1, lsl #2]
   1bdc4:	add	r1, r1, #1
   1bdc8:	cmp	r8, r1
   1bdcc:	bne	1bdac <__assert_fail@plt+0xa6ac>
   1bdd0:	ldr	r0, [r9, #48]	; 0x30
   1bdd4:	ldr	r2, [r9, #52]	; 0x34
   1bdd8:	sub	r1, r8, r5
   1bddc:	mov	r6, ip
   1bde0:	add	r6, r5, r6
   1bde4:	add	r0, r0, r1
   1bde8:	cmp	r2, ip
   1bdec:	str	r0, [r9, #48]	; 0x30
   1bdf0:	ldrgt	r2, [r9, #56]	; 0x38
   1bdf4:	addgt	r1, r2, r1
   1bdf8:	strgt	r1, [r9, #56]	; 0x38
   1bdfc:	ldr	r1, [r9, #36]	; 0x24
   1be00:	cmp	r1, r0
   1be04:	movgt	r1, r0
   1be08:	str	r1, [sp]
   1be0c:	b	1b9a4 <__assert_fail@plt+0xa2a4>
   1be10:	andeq	r0, r0, r0
   1be14:	andeq	r0, r0, r1
   1be18:	andeq	r0, r0, r2
   1be1c:	andeq	r0, r0, r3
   1be20:	andeq	r0, r0, r1
   1be24:	andeq	r0, r0, r2
   1be28:	andeq	r0, r0, r3
   1be2c:	andeq	r0, r0, r4
   1be30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be34:	add	fp, sp, #28
   1be38:	sub	sp, sp, #68	; 0x44
   1be3c:	mov	r4, r0
   1be40:	ldr	r6, [r0, #28]
   1be44:	ldr	r7, [r0, #36]	; 0x24
   1be48:	ldr	r0, [r0, #48]	; 0x30
   1be4c:	cmp	r7, r0
   1be50:	movgt	r7, r0
   1be54:	cmp	r7, r6
   1be58:	ble	1bff4 <__assert_fail@plt+0xa8f4>
   1be5c:	add	r8, r4, #16
   1be60:	mov	r5, sp
   1be64:	ldm	r8, {r9, sl}
   1be68:	ldr	r0, [r4, #64]	; 0x40
   1be6c:	sub	r2, r7, r6
   1be70:	cmp	r0, #0
   1be74:	bne	1bf44 <__assert_fail@plt+0xa844>
   1be78:	ldr	r0, [r4]
   1be7c:	ldr	r1, [r4, #24]
   1be80:	add	r0, r0, r1
   1be84:	add	r1, r0, r6
   1be88:	mov	r0, r5
   1be8c:	mov	r3, r8
   1be90:	bl	2aedc <__assert_fail@plt+0x197dc>
   1be94:	add	r1, r0, #1
   1be98:	cmp	r1, #2
   1be9c:	bcc	1beb8 <__assert_fail@plt+0xa7b8>
   1bea0:	cmn	r0, #2
   1bea4:	bne	1bef4 <__assert_fail@plt+0xa7f4>
   1bea8:	ldr	r0, [r4, #36]	; 0x24
   1beac:	ldr	r1, [r4, #48]	; 0x30
   1beb0:	cmp	r0, r1
   1beb4:	blt	1c008 <__assert_fail@plt+0xa908>
   1beb8:	ldr	r1, [r4, #24]
   1bebc:	ldr	r0, [r4]
   1bec0:	mov	r2, sl
   1bec4:	mov	sl, r5
   1bec8:	add	r1, r1, r6
   1becc:	ldrb	r1, [r0, r1]
   1bed0:	str	r1, [sp]
   1bed4:	ldr	r0, [r4, #64]	; 0x40
   1bed8:	cmp	r0, #0
   1bedc:	ldrbne	r1, [r0, r1]
   1bee0:	mov	r0, #1
   1bee4:	strne	r1, [sp]
   1bee8:	str	r9, [r8]
   1beec:	str	r2, [r8, #4]
   1bef0:	b	1befc <__assert_fail@plt+0xa7fc>
   1bef4:	ldr	r1, [sp]
   1bef8:	mov	sl, r5
   1befc:	ldr	r3, [r4, #8]
   1bf00:	add	r5, r0, r6
   1bf04:	str	r1, [r3, r6, lsl #2]
   1bf08:	add	r1, r6, #1
   1bf0c:	cmp	r1, r5
   1bf10:	bge	1bf30 <__assert_fail@plt+0xa830>
   1bf14:	mvn	r1, #3
   1bf18:	add	r2, r1, r0, lsl #2
   1bf1c:	add	r0, r3, r6, lsl #2
   1bf20:	mov	r1, #255	; 0xff
   1bf24:	add	r0, r0, #4
   1bf28:	bl	11610 <memset@plt>
   1bf2c:	mov	r1, r5
   1bf30:	cmp	r7, r1
   1bf34:	mov	r6, r1
   1bf38:	mov	r5, sl
   1bf3c:	bgt	1be64 <__assert_fail@plt+0xa764>
   1bf40:	b	1bff8 <__assert_fail@plt+0xa8f8>
   1bf44:	cmp	r2, #1
   1bf48:	add	r1, sp, #4
   1bf4c:	blt	1be88 <__assert_fail@plt+0xa788>
   1bf50:	ldr	r1, [r4, #80]	; 0x50
   1bf54:	cmp	r1, #1
   1bf58:	add	r1, sp, #4
   1bf5c:	blt	1be88 <__assert_fail@plt+0xa788>
   1bf60:	ldm	r4, {r1, r3}
   1bf64:	mov	lr, r5
   1bf68:	ldr	r5, [r4, #24]
   1bf6c:	cmp	r2, #2
   1bf70:	add	r5, r6, r5
   1bf74:	ldrb	r1, [r1, r5]
   1bf78:	mov	r5, lr
   1bf7c:	ldrb	r0, [r0, r1]
   1bf80:	add	r1, sp, #4
   1bf84:	strb	r0, [r3, r6]
   1bf88:	strb	r0, [sp, #4]
   1bf8c:	blt	1be88 <__assert_fail@plt+0xa788>
   1bf90:	ldr	r0, [r4, #80]	; 0x50
   1bf94:	add	r1, sp, #4
   1bf98:	cmp	r0, #2
   1bf9c:	blt	1be88 <__assert_fail@plt+0xa788>
   1bfa0:	mov	r0, #1
   1bfa4:	ldm	r4, {r1, ip}
   1bfa8:	ldr	r5, [r4, #24]
   1bfac:	ldr	r3, [r4, #64]	; 0x40
   1bfb0:	add	r1, r1, r5
   1bfb4:	add	r1, r1, r6
   1bfb8:	ldrb	r1, [r1, r0]
   1bfbc:	ldrb	r1, [r3, r1]
   1bfc0:	add	r3, ip, r6
   1bfc4:	strb	r1, [r3, r0]
   1bfc8:	add	r3, sp, #4
   1bfcc:	strb	r1, [r3, r0]
   1bfd0:	add	r0, r0, #1
   1bfd4:	cmp	r0, r2
   1bfd8:	bge	1bfe8 <__assert_fail@plt+0xa8e8>
   1bfdc:	ldr	r1, [r4, #80]	; 0x50
   1bfe0:	cmp	r0, r1
   1bfe4:	blt	1bfa4 <__assert_fail@plt+0xa8a4>
   1bfe8:	add	r1, sp, #4
   1bfec:	mov	r5, lr
   1bff0:	b	1be88 <__assert_fail@plt+0xa788>
   1bff4:	mov	r1, r6
   1bff8:	str	r1, [r4, #28]
   1bffc:	str	r1, [r4, #32]
   1c000:	sub	sp, fp, #28
   1c004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c008:	stm	r8, {r9, sl}
   1c00c:	mov	r1, r6
   1c010:	str	r1, [r4, #28]
   1c014:	str	r1, [r4, #32]
   1c018:	sub	sp, fp, #28
   1c01c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c024:	add	fp, sp, #28
   1c028:	sub	sp, sp, #28
   1c02c:	ldr	r8, [r1]
   1c030:	mov	r7, r0
   1c034:	ldr	r6, [fp, #12]
   1c038:	mov	r5, r2
   1c03c:	str	r1, [sp, #20]
   1c040:	str	r3, [sp, #24]
   1c044:	ldr	r0, [r8, #84]	; 0x54
   1c048:	str	r6, [sp, #4]
   1c04c:	str	r0, [sp, #16]
   1c050:	ldr	r0, [fp, #8]
   1c054:	str	r0, [sp]
   1c058:	mov	r0, r7
   1c05c:	bl	1cbf8 <__assert_fail@plt+0xb4f8>
   1c060:	mov	r4, r0
   1c064:	cmp	r0, #0
   1c068:	bne	1c078 <__assert_fail@plt+0xa978>
   1c06c:	ldr	r0, [r6]
   1c070:	cmp	r0, #0
   1c074:	bne	1c39c <__assert_fail@plt+0xac9c>
   1c078:	ldrb	r0, [r5, #4]
   1c07c:	cmp	r0, #10
   1c080:	movne	r0, r4
   1c084:	subne	sp, fp, #28
   1c088:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c08c:	ldr	r0, [sp, #24]
   1c090:	mov	r9, #0
   1c094:	orr	sl, r0, #8388608	; 0x800000
   1c098:	ldr	r0, [fp, #8]
   1c09c:	str	sl, [sp, #12]
   1c0a0:	cmp	r0, #0
   1c0a4:	bne	1c148 <__assert_fail@plt+0xaa48>
   1c0a8:	b	1c200 <__assert_fail@plt+0xab00>
   1c0ac:	cmp	r0, #9
   1c0b0:	mov	r6, #0
   1c0b4:	beq	1c178 <__assert_fail@plt+0xaa78>
   1c0b8:	ldr	r0, [sp, #16]
   1c0bc:	ldr	sl, [r8, #84]	; 0x54
   1c0c0:	ldr	r1, [sp, #20]
   1c0c4:	ldr	r3, [sp, #24]
   1c0c8:	mov	r2, r5
   1c0cc:	str	r0, [r8, #84]	; 0x54
   1c0d0:	ldr	r0, [fp, #8]
   1c0d4:	str	r0, [sp]
   1c0d8:	ldr	r0, [fp, #12]
   1c0dc:	str	r0, [sp, #4]
   1c0e0:	mov	r0, r7
   1c0e4:	bl	1cbf8 <__assert_fail@plt+0xb4f8>
   1c0e8:	mov	r6, r0
   1c0ec:	cmp	r0, #0
   1c0f0:	bne	1c104 <__assert_fail@plt+0xaa04>
   1c0f4:	ldr	r0, [fp, #12]
   1c0f8:	ldr	r0, [r0]
   1c0fc:	cmp	r0, #0
   1c100:	bne	1c2ec <__assert_fail@plt+0xabec>
   1c104:	ldr	r0, [r8, #84]	; 0x54
   1c108:	orr	r0, r0, sl
   1c10c:	ldr	sl, [sp, #12]
   1c110:	str	r0, [r8, #84]	; 0x54
   1c114:	ldr	r1, [r8, #64]	; 0x40
   1c118:	cmp	r1, #31
   1c11c:	bne	1c184 <__assert_fail@plt+0xaa84>
   1c120:	mov	r0, #996	; 0x3e4
   1c124:	bl	2aa84 <__assert_fail@plt+0x19384>
   1c128:	cmp	r0, #0
   1c12c:	beq	1c390 <__assert_fail@plt+0xac90>
   1c130:	ldr	r1, [r8, #56]	; 0x38
   1c134:	str	r1, [r0]
   1c138:	mov	r1, #0
   1c13c:	str	r1, [r8, #64]	; 0x40
   1c140:	str	r0, [r8, #56]	; 0x38
   1c144:	b	1c188 <__assert_fail@plt+0xaa88>
   1c148:	mov	r0, r5
   1c14c:	mov	r1, r7
   1c150:	mov	r2, sl
   1c154:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1c158:	ldr	r1, [r7, #40]	; 0x28
   1c15c:	mov	r6, #0
   1c160:	add	r0, r1, r0
   1c164:	str	r0, [r7, #40]	; 0x28
   1c168:	ldrb	r0, [r5, #4]
   1c16c:	orr	r1, r0, #8
   1c170:	cmp	r1, #10
   1c174:	bne	1c0ac <__assert_fail@plt+0xa9ac>
   1c178:	ldr	r1, [r8, #64]	; 0x40
   1c17c:	cmp	r1, #31
   1c180:	beq	1c120 <__assert_fail@plt+0xaa20>
   1c184:	ldr	r0, [r8, #56]	; 0x38
   1c188:	add	r2, r1, #1
   1c18c:	add	r0, r0, r1, lsl #5
   1c190:	mov	r1, #10
   1c194:	cmp	r4, #0
   1c198:	str	r2, [r8, #64]	; 0x40
   1c19c:	str	r9, [r0, #4]!
   1c1a0:	stmib	r0, {r4, r6, r9}
   1c1a4:	str	r9, [r0, #16]
   1c1a8:	str	r9, [r0, #20]
   1c1ac:	str	r1, [r0, #24]
   1c1b0:	mvn	r1, #0
   1c1b4:	str	r1, [r0, #28]
   1c1b8:	strne	r0, [r4]
   1c1bc:	cmp	r6, #0
   1c1c0:	mov	r4, r0
   1c1c4:	strne	r0, [r6]
   1c1c8:	ldrb	r1, [r5, #4]
   1c1cc:	cmp	r1, #10
   1c1d0:	beq	1c148 <__assert_fail@plt+0xaa48>
   1c1d4:	b	1c2e4 <__assert_fail@plt+0xabe4>
   1c1d8:	mov	r0, #996	; 0x3e4
   1c1dc:	bl	2aa84 <__assert_fail@plt+0x19384>
   1c1e0:	cmp	r0, #0
   1c1e4:	beq	1c390 <__assert_fail@plt+0xac90>
   1c1e8:	ldr	r1, [r8, #56]	; 0x38
   1c1ec:	str	r1, [r0]
   1c1f0:	mov	r1, #0
   1c1f4:	str	r1, [r8, #64]	; 0x40
   1c1f8:	str	r0, [r8, #56]	; 0x38
   1c1fc:	b	1c298 <__assert_fail@plt+0xab98>
   1c200:	mov	r0, r5
   1c204:	mov	r1, r7
   1c208:	mov	r2, sl
   1c20c:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1c210:	ldr	r1, [r7, #40]	; 0x28
   1c214:	mov	r6, #0
   1c218:	add	r0, r1, r0
   1c21c:	str	r0, [r7, #40]	; 0x28
   1c220:	ldrb	r0, [r5, #4]
   1c224:	orr	r0, r0, #8
   1c228:	cmp	r0, #10
   1c22c:	beq	1c288 <__assert_fail@plt+0xab88>
   1c230:	ldr	r0, [sp, #16]
   1c234:	ldr	sl, [r8, #84]	; 0x54
   1c238:	ldr	r1, [sp, #20]
   1c23c:	ldr	r3, [sp, #24]
   1c240:	mov	r2, r5
   1c244:	str	r0, [r8, #84]	; 0x54
   1c248:	ldr	r0, [fp, #12]
   1c24c:	str	r9, [sp]
   1c250:	str	r0, [sp, #4]
   1c254:	mov	r0, r7
   1c258:	bl	1cbf8 <__assert_fail@plt+0xb4f8>
   1c25c:	mov	r6, r0
   1c260:	cmp	r0, #0
   1c264:	bne	1c278 <__assert_fail@plt+0xab78>
   1c268:	ldr	r0, [fp, #12]
   1c26c:	ldr	r0, [r0]
   1c270:	cmp	r0, #0
   1c274:	bne	1c2ec <__assert_fail@plt+0xabec>
   1c278:	ldr	r0, [r8, #84]	; 0x54
   1c27c:	orr	r0, r0, sl
   1c280:	ldr	sl, [sp, #12]
   1c284:	str	r0, [r8, #84]	; 0x54
   1c288:	ldr	r1, [r8, #64]	; 0x40
   1c28c:	cmp	r1, #31
   1c290:	beq	1c1d8 <__assert_fail@plt+0xaad8>
   1c294:	ldr	r0, [r8, #56]	; 0x38
   1c298:	add	r2, r1, #1
   1c29c:	add	r0, r0, r1, lsl #5
   1c2a0:	mov	r1, #10
   1c2a4:	cmp	r4, #0
   1c2a8:	str	r2, [r8, #64]	; 0x40
   1c2ac:	str	r9, [r0, #4]!
   1c2b0:	stmib	r0, {r4, r6, r9}
   1c2b4:	str	r9, [r0, #16]
   1c2b8:	str	r9, [r0, #20]
   1c2bc:	str	r1, [r0, #24]
   1c2c0:	mvn	r1, #0
   1c2c4:	str	r1, [r0, #28]
   1c2c8:	strne	r0, [r4]
   1c2cc:	cmp	r6, #0
   1c2d0:	mov	r4, r0
   1c2d4:	strne	r0, [r6]
   1c2d8:	ldrb	r1, [r5, #4]
   1c2dc:	cmp	r1, #10
   1c2e0:	beq	1c200 <__assert_fail@plt+0xab00>
   1c2e4:	sub	sp, fp, #28
   1c2e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2ec:	cmp	r4, #0
   1c2f0:	beq	1c39c <__assert_fail@plt+0xac9c>
   1c2f4:	movw	r5, #255	; 0xff
   1c2f8:	movt	r5, #4
   1c2fc:	mov	r6, r4
   1c300:	ldr	r4, [r4, #4]
   1c304:	cmp	r4, #0
   1c308:	bne	1c2fc <__assert_fail@plt+0xabfc>
   1c30c:	ldr	r4, [r6, #8]
   1c310:	cmp	r4, #0
   1c314:	bne	1c2fc <__assert_fail@plt+0xabfc>
   1c318:	ldr	r0, [r6, #24]
   1c31c:	and	r0, r0, r5
   1c320:	cmp	r0, #3
   1c324:	beq	1c35c <__assert_fail@plt+0xac5c>
   1c328:	cmp	r0, #6
   1c32c:	bne	1c364 <__assert_fail@plt+0xac64>
   1c330:	ldr	r4, [r6, #20]
   1c334:	ldr	r0, [r4]
   1c338:	bl	13de4 <__assert_fail@plt+0x26e4>
   1c33c:	ldr	r0, [r4, #4]
   1c340:	bl	13de4 <__assert_fail@plt+0x26e4>
   1c344:	ldr	r0, [r4, #8]
   1c348:	bl	13de4 <__assert_fail@plt+0x26e4>
   1c34c:	ldr	r0, [r4, #12]
   1c350:	bl	13de4 <__assert_fail@plt+0x26e4>
   1c354:	mov	r0, r4
   1c358:	b	1c360 <__assert_fail@plt+0xac60>
   1c35c:	ldr	r0, [r6, #20]
   1c360:	bl	13de4 <__assert_fail@plt+0x26e4>
   1c364:	ldr	r0, [r6]
   1c368:	cmp	r0, #0
   1c36c:	beq	1c39c <__assert_fail@plt+0xac9c>
   1c370:	ldr	r4, [r0, #8]
   1c374:	cmp	r4, r6
   1c378:	mov	r6, r0
   1c37c:	beq	1c318 <__assert_fail@plt+0xac18>
   1c380:	cmp	r4, #0
   1c384:	mov	r6, r0
   1c388:	beq	1c318 <__assert_fail@plt+0xac18>
   1c38c:	b	1c2fc <__assert_fail@plt+0xabfc>
   1c390:	ldr	r1, [fp, #12]
   1c394:	mov	r0, #12
   1c398:	str	r0, [r1]
   1c39c:	mov	r0, #0
   1c3a0:	sub	sp, fp, #28
   1c3a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c3ac:	add	fp, sp, #24
   1c3b0:	sub	sp, sp, #8
   1c3b4:	mov	r9, r0
   1c3b8:	mov	r7, r1
   1c3bc:	ldr	r0, [r1, #40]	; 0x28
   1c3c0:	ldr	r1, [r1, #56]	; 0x38
   1c3c4:	cmp	r1, r0
   1c3c8:	ble	1c4b0 <__assert_fail@plt+0xadb0>
   1c3cc:	ldr	r1, [r7, #4]
   1c3d0:	mov	r5, r9
   1c3d4:	mov	r8, r2
   1c3d8:	ldrb	r6, [r1, r0]
   1c3dc:	strb	r6, [r5], #4
   1c3e0:	ldr	r0, [r5]
   1c3e4:	bic	r1, r0, #6291456	; 0x600000
   1c3e8:	str	r1, [r5]
   1c3ec:	ldr	r3, [r7, #80]	; 0x50
   1c3f0:	cmp	r3, #2
   1c3f4:	blt	1c418 <__assert_fail@plt+0xad18>
   1c3f8:	ldr	r2, [r7, #28]
   1c3fc:	ldr	r1, [r7, #40]	; 0x28
   1c400:	cmp	r1, r2
   1c404:	beq	1c418 <__assert_fail@plt+0xad18>
   1c408:	ldr	r2, [r7, #8]
   1c40c:	ldr	r1, [r2, r1, lsl #2]
   1c410:	cmn	r1, #1
   1c414:	beq	1c8f4 <__assert_fail@plt+0xb1f4>
   1c418:	movw	r1, #65280	; 0xff00
   1c41c:	cmp	r6, #92	; 0x5c
   1c420:	movt	r1, #65439	; 0xff9f
   1c424:	bne	1c4c8 <__assert_fail@plt+0xadc8>
   1c428:	ldr	r6, [r7, #40]	; 0x28
   1c42c:	ldr	r4, [r7, #48]	; 0x30
   1c430:	add	r2, r6, #1
   1c434:	cmp	r2, r4
   1c438:	bge	1c51c <__assert_fail@plt+0xae1c>
   1c43c:	ldrb	r4, [r7, #75]	; 0x4b
   1c440:	cmp	r4, #0
   1c444:	bne	1cb88 <__assert_fail@plt+0xb488>
   1c448:	ldr	r3, [r7, #4]
   1c44c:	ldrb	r6, [r3, r2]
   1c450:	and	r0, r0, r1
   1c454:	strb	r6, [r9]
   1c458:	orr	r4, r0, #1
   1c45c:	str	r4, [r9, #4]
   1c460:	ldr	r0, [r7, #80]	; 0x50
   1c464:	cmp	r0, #2
   1c468:	blt	1c740 <__assert_fail@plt+0xb040>
   1c46c:	ldr	r0, [r7, #8]
   1c470:	ldr	r1, [r7, #40]	; 0x28
   1c474:	add	r0, r0, r1, lsl #2
   1c478:	ldr	r4, [r0, #4]
   1c47c:	mov	r0, r4
   1c480:	bl	115f8 <iswalnum@plt>
   1c484:	sub	r1, r4, #95	; 0x5f
   1c488:	cmp	r0, #0
   1c48c:	clz	r1, r1
   1c490:	movwne	r0, #1
   1c494:	lsr	r1, r1, #5
   1c498:	orr	r0, r1, r0
   1c49c:	ldr	r1, [r5]
   1c4a0:	bic	r1, r1, #4194304	; 0x400000
   1c4a4:	orr	r0, r1, r0, lsl #22
   1c4a8:	uxtb	r1, r6
   1c4ac:	b	1c764 <__assert_fail@plt+0xb064>
   1c4b0:	mov	r0, #2
   1c4b4:	mov	r4, #0
   1c4b8:	strb	r0, [r9, #4]
   1c4bc:	mov	r0, r4
   1c4c0:	sub	sp, fp, #24
   1c4c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c4c8:	and	r0, r0, r1
   1c4cc:	orr	r4, r0, #1
   1c4d0:	str	r4, [r5]
   1c4d4:	ldr	r0, [r7, #80]	; 0x50
   1c4d8:	cmp	r0, #2
   1c4dc:	blt	1c528 <__assert_fail@plt+0xae28>
   1c4e0:	ldr	r0, [r7, #8]
   1c4e4:	ldr	r1, [r7, #40]	; 0x28
   1c4e8:	ldr	r4, [r0, r1, lsl #2]
   1c4ec:	mov	r0, r4
   1c4f0:	bl	115f8 <iswalnum@plt>
   1c4f4:	sub	r1, r4, #95	; 0x5f
   1c4f8:	cmp	r0, #0
   1c4fc:	clz	r1, r1
   1c500:	movwne	r0, #1
   1c504:	lsr	r1, r1, #5
   1c508:	orr	r0, r1, r0
   1c50c:	ldr	r1, [r5]
   1c510:	bic	r1, r1, #4194304	; 0x400000
   1c514:	orr	r0, r1, r0, lsl #22
   1c518:	b	1c548 <__assert_fail@plt+0xae48>
   1c51c:	and	r0, r0, r1
   1c520:	orr	r0, r0, #36	; 0x24
   1c524:	b	1c908 <__assert_fail@plt+0xb208>
   1c528:	bl	115a4 <__ctype_b_loc@plt>
   1c52c:	ldr	r0, [r0]
   1c530:	cmp	r6, #95	; 0x5f
   1c534:	add	r0, r0, r6, lsl #1
   1c538:	ldrh	r0, [r0]
   1c53c:	ubfx	r0, r0, #3, #1
   1c540:	movweq	r0, #1
   1c544:	orr	r0, r4, r0, lsl #22
   1c548:	sub	r1, r6, #10
   1c54c:	mov	r4, #1
   1c550:	str	r0, [r5]
   1c554:	cmp	r1, #115	; 0x73
   1c558:	bhi	1cb7c <__assert_fail@plt+0xb47c>
   1c55c:	add	r2, pc, #0
   1c560:	ldr	pc, [r2, r1, lsl #2]
   1c564:	andeq	ip, r1, r4, lsr r7
   1c568:	andeq	ip, r1, ip, ror fp
   1c56c:	andeq	ip, r1, ip, ror fp
   1c570:	andeq	ip, r1, ip, ror fp
   1c574:	andeq	ip, r1, ip, ror fp
   1c578:	andeq	ip, r1, ip, ror fp
   1c57c:	andeq	ip, r1, ip, ror fp
   1c580:	andeq	ip, r1, ip, ror fp
   1c584:	andeq	ip, r1, ip, ror fp
   1c588:	andeq	ip, r1, ip, ror fp
   1c58c:	andeq	ip, r1, ip, ror fp
   1c590:	andeq	ip, r1, ip, ror fp
   1c594:	andeq	ip, r1, ip, ror fp
   1c598:	andeq	ip, r1, ip, ror fp
   1c59c:	andeq	ip, r1, ip, ror fp
   1c5a0:	andeq	ip, r1, ip, ror fp
   1c5a4:	andeq	ip, r1, ip, ror fp
   1c5a8:	andeq	ip, r1, ip, ror fp
   1c5ac:	andeq	ip, r1, ip, ror fp
   1c5b0:	andeq	ip, r1, ip, ror fp
   1c5b4:	andeq	ip, r1, ip, ror fp
   1c5b8:	andeq	ip, r1, ip, ror fp
   1c5bc:	andeq	ip, r1, ip, ror fp
   1c5c0:	andeq	ip, r1, ip, ror fp
   1c5c4:	andeq	ip, r1, ip, ror fp
   1c5c8:	andeq	ip, r1, ip, ror fp
   1c5cc:	andeq	ip, r1, ip, lsl r9
   1c5d0:	andeq	ip, r1, ip, ror fp
   1c5d4:	andeq	ip, r1, ip, ror fp
   1c5d8:	andeq	ip, r1, ip, ror fp
   1c5dc:	andeq	ip, r1, r4, ror r9
   1c5e0:	andeq	ip, r1, r0, lsl #19
   1c5e4:	andeq	ip, r1, ip, lsl #19
   1c5e8:	muleq	r1, r4, r9
   1c5ec:	andeq	ip, r1, ip, ror fp
   1c5f0:	andeq	ip, r1, ip, ror fp
   1c5f4:	andeq	ip, r1, r4, lsr #19
   1c5f8:	andeq	ip, r1, ip, ror fp
   1c5fc:	andeq	ip, r1, ip, ror fp
   1c600:	andeq	ip, r1, ip, ror fp
   1c604:	andeq	ip, r1, ip, ror fp
   1c608:	andeq	ip, r1, ip, ror fp
   1c60c:	andeq	ip, r1, ip, ror fp
   1c610:	andeq	ip, r1, ip, ror fp
   1c614:	andeq	ip, r1, ip, ror fp
   1c618:	andeq	ip, r1, ip, ror fp
   1c61c:	andeq	ip, r1, ip, ror fp
   1c620:	andeq	ip, r1, ip, ror fp
   1c624:	andeq	ip, r1, ip, ror fp
   1c628:	andeq	ip, r1, ip, ror fp
   1c62c:	andeq	ip, r1, ip, ror fp
   1c630:	andeq	ip, r1, ip, ror fp
   1c634:	andeq	ip, r1, ip, ror fp
   1c638:	andeq	ip, r1, ip, lsr #19
   1c63c:	andeq	ip, r1, ip, ror fp
   1c640:	andeq	ip, r1, ip, ror fp
   1c644:	andeq	ip, r1, ip, ror fp
   1c648:	andeq	ip, r1, ip, ror fp
   1c64c:	andeq	ip, r1, ip, ror fp
   1c650:	andeq	ip, r1, ip, ror fp
   1c654:	andeq	ip, r1, ip, ror fp
   1c658:	andeq	ip, r1, ip, ror fp
   1c65c:	andeq	ip, r1, ip, ror fp
   1c660:	andeq	ip, r1, ip, ror fp
   1c664:	andeq	ip, r1, ip, ror fp
   1c668:	andeq	ip, r1, ip, ror fp
   1c66c:	andeq	ip, r1, ip, ror fp
   1c670:	andeq	ip, r1, ip, ror fp
   1c674:	andeq	ip, r1, ip, ror fp
   1c678:	andeq	ip, r1, ip, ror fp
   1c67c:	andeq	ip, r1, ip, ror fp
   1c680:	andeq	ip, r1, ip, ror fp
   1c684:	andeq	ip, r1, ip, ror fp
   1c688:	andeq	ip, r1, ip, ror fp
   1c68c:	andeq	ip, r1, ip, ror fp
   1c690:	andeq	ip, r1, ip, ror fp
   1c694:	andeq	ip, r1, ip, ror fp
   1c698:	andeq	ip, r1, ip, ror fp
   1c69c:	andeq	ip, r1, ip, ror fp
   1c6a0:	andeq	ip, r1, ip, ror fp
   1c6a4:	andeq	ip, r1, ip, ror fp
   1c6a8:			; <UNDEFINED> instruction: 0x0001c9bc
   1c6ac:	andeq	ip, r1, ip, ror fp
   1c6b0:	andeq	ip, r1, ip, ror fp
   1c6b4:	andeq	ip, r1, r4, asr #19
   1c6b8:	andeq	ip, r1, ip, ror fp
   1c6bc:	andeq	ip, r1, ip, ror fp
   1c6c0:	andeq	ip, r1, ip, ror fp
   1c6c4:	andeq	ip, r1, ip, ror fp
   1c6c8:	andeq	ip, r1, ip, ror fp
   1c6cc:	andeq	ip, r1, ip, ror fp
   1c6d0:	andeq	ip, r1, ip, ror fp
   1c6d4:	andeq	ip, r1, ip, ror fp
   1c6d8:	andeq	ip, r1, ip, ror fp
   1c6dc:	andeq	ip, r1, ip, ror fp
   1c6e0:	andeq	ip, r1, ip, ror fp
   1c6e4:	andeq	ip, r1, ip, ror fp
   1c6e8:	andeq	ip, r1, ip, ror fp
   1c6ec:	andeq	ip, r1, ip, ror fp
   1c6f0:	andeq	ip, r1, ip, ror fp
   1c6f4:	andeq	ip, r1, ip, ror fp
   1c6f8:	andeq	ip, r1, ip, ror fp
   1c6fc:	andeq	ip, r1, ip, ror fp
   1c700:	andeq	ip, r1, ip, ror fp
   1c704:	andeq	ip, r1, ip, ror fp
   1c708:	andeq	ip, r1, ip, ror fp
   1c70c:	andeq	ip, r1, ip, ror fp
   1c710:	andeq	ip, r1, ip, ror fp
   1c714:	andeq	ip, r1, ip, ror fp
   1c718:	andeq	ip, r1, ip, ror fp
   1c71c:	andeq	ip, r1, ip, ror fp
   1c720:	andeq	ip, r1, ip, ror fp
   1c724:	andeq	ip, r1, ip, ror fp
   1c728:	strdeq	ip, [r1], -r4
   1c72c:	andeq	ip, r1, r4, lsl #20
   1c730:	andeq	ip, r1, r8, lsl sl
   1c734:	tst	r8, #2048	; 0x800
   1c738:	bne	1ca10 <__assert_fail@plt+0xb310>
   1c73c:	b	1cb7c <__assert_fail@plt+0xb47c>
   1c740:	bl	115a4 <__ctype_b_loc@plt>
   1c744:	ldr	r0, [r0]
   1c748:	uxtb	r1, r6
   1c74c:	cmp	r1, #95	; 0x5f
   1c750:	add	r0, r0, r1, lsl #1
   1c754:	ldrh	r0, [r0]
   1c758:	ubfx	r0, r0, #3, #1
   1c75c:	movweq	r0, #1
   1c760:	orr	r0, r4, r0, lsl #22
   1c764:	mvn	r2, #38	; 0x26
   1c768:	mov	r4, #2
   1c76c:	str	r0, [r5]
   1c770:	uxtab	r2, r2, r6
   1c774:	cmp	r2, #86	; 0x56
   1c778:	bhi	1cb7c <__assert_fail@plt+0xb47c>
   1c77c:	add	r3, pc, #0
   1c780:	ldr	pc, [r3, r2, lsl #2]
   1c784:	andeq	ip, r1, r4, asr sl
   1c788:	andeq	ip, r1, r4, ror #20
   1c78c:	andeq	ip, r1, r4, ror sl
   1c790:	andeq	ip, r1, ip, ror fp
   1c794:	andeq	ip, r1, r4, lsl #21
   1c798:	andeq	ip, r1, ip, ror fp
   1c79c:	andeq	ip, r1, ip, ror fp
   1c7a0:	andeq	ip, r1, ip, ror fp
   1c7a4:	andeq	ip, r1, ip, ror fp
   1c7a8:	andeq	ip, r1, ip, ror fp
   1c7ac:	andeq	ip, r1, r0, ror #17
   1c7b0:	andeq	ip, r1, r0, ror #17
   1c7b4:	andeq	ip, r1, r0, ror #17
   1c7b8:	andeq	ip, r1, r0, ror #17
   1c7bc:	andeq	ip, r1, r0, ror #17
   1c7c0:	andeq	ip, r1, r0, ror #17
   1c7c4:	andeq	ip, r1, r0, ror #17
   1c7c8:	andeq	ip, r1, r0, ror #17
   1c7cc:	andeq	ip, r1, r0, ror #17
   1c7d0:	andeq	ip, r1, ip, ror fp
   1c7d4:	andeq	ip, r1, ip, ror fp
   1c7d8:	muleq	r1, ip, sl
   1c7dc:	andeq	ip, r1, ip, ror fp
   1c7e0:	andeq	ip, r1, ip, lsr #21
   1c7e4:			; <UNDEFINED> instruction: 0x0001cabc
   1c7e8:	andeq	ip, r1, ip, ror fp
   1c7ec:	andeq	ip, r1, ip, ror fp
   1c7f0:	ldrdeq	ip, [r1], -r4
   1c7f4:	andeq	ip, r1, ip, ror fp
   1c7f8:	andeq	ip, r1, ip, ror fp
   1c7fc:	andeq	ip, r1, ip, ror fp
   1c800:	andeq	ip, r1, ip, ror fp
   1c804:	andeq	ip, r1, ip, ror fp
   1c808:	andeq	ip, r1, ip, ror fp
   1c80c:	andeq	ip, r1, ip, ror fp
   1c810:	andeq	ip, r1, ip, ror fp
   1c814:	andeq	ip, r1, ip, ror fp
   1c818:	andeq	ip, r1, ip, ror fp
   1c81c:	andeq	ip, r1, ip, ror fp
   1c820:	andeq	ip, r1, ip, ror fp
   1c824:	andeq	ip, r1, ip, ror fp
   1c828:	andeq	ip, r1, ip, ror fp
   1c82c:	andeq	ip, r1, ip, ror fp
   1c830:	andeq	ip, r1, ip, ror fp
   1c834:	andeq	ip, r1, r4, ror #21
   1c838:	andeq	ip, r1, ip, ror fp
   1c83c:	andeq	ip, r1, ip, ror fp
   1c840:	andeq	ip, r1, ip, ror fp
   1c844:	strdeq	ip, [r1], -r4
   1c848:	andeq	ip, r1, ip, ror fp
   1c84c:	andeq	ip, r1, ip, ror fp
   1c850:	andeq	ip, r1, ip, ror fp
   1c854:	andeq	ip, r1, ip, ror fp
   1c858:	andeq	ip, r1, ip, ror fp
   1c85c:	andeq	ip, r1, ip, ror fp
   1c860:	andeq	ip, r1, ip, ror fp
   1c864:	andeq	ip, r1, ip, ror fp
   1c868:	andeq	ip, r1, r4, lsl #22
   1c86c:	andeq	ip, r1, ip, ror fp
   1c870:	andeq	ip, r1, r4, lsl fp
   1c874:	andeq	ip, r1, ip, ror fp
   1c878:	andeq	ip, r1, ip, ror fp
   1c87c:	andeq	ip, r1, ip, ror fp
   1c880:	andeq	ip, r1, ip, ror fp
   1c884:	andeq	ip, r1, ip, ror fp
   1c888:	andeq	ip, r1, ip, ror fp
   1c88c:	andeq	ip, r1, ip, ror fp
   1c890:	andeq	ip, r1, ip, ror fp
   1c894:	andeq	ip, r1, ip, ror fp
   1c898:	andeq	ip, r1, ip, ror fp
   1c89c:	andeq	ip, r1, ip, ror fp
   1c8a0:	andeq	ip, r1, ip, ror fp
   1c8a4:	andeq	ip, r1, ip, ror fp
   1c8a8:	andeq	ip, r1, ip, ror fp
   1c8ac:	andeq	ip, r1, ip, ror fp
   1c8b0:	andeq	ip, r1, ip, ror fp
   1c8b4:	andeq	ip, r1, r4, lsr #22
   1c8b8:	andeq	ip, r1, ip, ror fp
   1c8bc:	andeq	ip, r1, ip, ror fp
   1c8c0:	andeq	ip, r1, ip, ror fp
   1c8c4:	andeq	ip, r1, r4, lsr fp
   1c8c8:	andeq	ip, r1, ip, ror fp
   1c8cc:	andeq	ip, r1, ip, ror fp
   1c8d0:	andeq	ip, r1, ip, ror fp
   1c8d4:	andeq	ip, r1, r4, asr #22
   1c8d8:	andeq	ip, r1, r8, asr fp
   1c8dc:	andeq	ip, r1, r4, ror #22
   1c8e0:	tst	r8, #16384	; 0x4000
   1c8e4:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1c8e8:	sub	r1, r1, #49	; 0x31
   1c8ec:	mov	r2, #4
   1c8f0:	b	1c9dc <__assert_fail@plt+0xb2dc>
   1c8f4:	movw	r1, #65280	; 0xff00
   1c8f8:	movt	r1, #65439	; 0xff9f
   1c8fc:	and	r0, r0, r1
   1c900:	orr	r0, r0, #1
   1c904:	orr	r0, r0, #2097152	; 0x200000
   1c908:	str	r0, [r5]
   1c90c:	mov	r4, #1
   1c910:	mov	r0, r4
   1c914:	sub	sp, fp, #24
   1c918:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c91c:	tst	r8, #8
   1c920:	bne	1c96c <__assert_fail@plt+0xb26c>
   1c924:	ldr	r1, [r7, #40]	; 0x28
   1c928:	ldr	r2, [r7, #48]	; 0x30
   1c92c:	add	r1, r1, #1
   1c930:	cmp	r1, r2
   1c934:	beq	1c96c <__assert_fail@plt+0xb26c>
   1c938:	str	r1, [r7, #40]	; 0x28
   1c93c:	mov	r0, sp
   1c940:	mov	r1, r7
   1c944:	mov	r2, r8
   1c948:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1c94c:	ldr	r0, [r7, #40]	; 0x28
   1c950:	sub	r0, r0, #1
   1c954:	str	r0, [r7, #40]	; 0x28
   1c958:	ldrb	r0, [sp, #4]
   1c95c:	sub	r0, r0, #9
   1c960:	cmp	r0, #1
   1c964:	bhi	1cb7c <__assert_fail@plt+0xb47c>
   1c968:	ldr	r0, [r5]
   1c96c:	mov	r1, #32
   1c970:	b	1c9d8 <__assert_fail@plt+0xb2d8>
   1c974:	tst	r8, #8192	; 0x2000
   1c978:	bne	1ca6c <__assert_fail@plt+0xb36c>
   1c97c:	b	1cb7c <__assert_fail@plt+0xb47c>
   1c980:	tst	r8, #8192	; 0x2000
   1c984:	bne	1ca7c <__assert_fail@plt+0xb37c>
   1c988:	b	1cb7c <__assert_fail@plt+0xb47c>
   1c98c:	mov	r1, #11
   1c990:	b	1cb74 <__assert_fail@plt+0xb474>
   1c994:	movw	r1, #1026	; 0x402
   1c998:	tst	r8, r1
   1c99c:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1c9a0:	b	1ca94 <__assert_fail@plt+0xb394>
   1c9a4:	mov	r1, #5
   1c9a8:	b	1cb74 <__assert_fail@plt+0xb474>
   1c9ac:	movw	r1, #1026	; 0x402
   1c9b0:	tst	r8, r1
   1c9b4:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1c9b8:	b	1cacc <__assert_fail@plt+0xb3cc>
   1c9bc:	mov	r1, #20
   1c9c0:	b	1cb74 <__assert_fail@plt+0xb474>
   1c9c4:	movw	r1, #8
   1c9c8:	movt	r1, #128	; 0x80
   1c9cc:	tst	r8, r1
   1c9d0:	beq	1ca28 <__assert_fail@plt+0xb328>
   1c9d4:	mov	r1, #16
   1c9d8:	mov	r2, #12
   1c9dc:	bfi	r0, r2, #0, #8
   1c9e0:	str	r1, [r9]
   1c9e4:	str	r0, [r9, #4]
   1c9e8:	mov	r0, r4
   1c9ec:	sub	sp, fp, #24
   1c9f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c9f4:	and	r1, r8, #4608	; 0x1200
   1c9f8:	cmp	r1, #4608	; 0x1200
   1c9fc:	beq	1cb50 <__assert_fail@plt+0xb450>
   1ca00:	b	1cb7c <__assert_fail@plt+0xb47c>
   1ca04:	and	r1, r8, #33792	; 0x8400
   1ca08:	cmp	r1, #32768	; 0x8000
   1ca0c:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1ca10:	mov	r1, #10
   1ca14:	b	1cb74 <__assert_fail@plt+0xb474>
   1ca18:	and	r1, r8, #4608	; 0x1200
   1ca1c:	cmp	r1, #4608	; 0x1200
   1ca20:	beq	1cb70 <__assert_fail@plt+0xb470>
   1ca24:	b	1cb7c <__assert_fail@plt+0xb47c>
   1ca28:	ldr	r1, [r7, #40]	; 0x28
   1ca2c:	cmp	r1, #0
   1ca30:	beq	1c9d4 <__assert_fail@plt+0xb2d4>
   1ca34:	tst	r8, #2048	; 0x800
   1ca38:	beq	1cb7c <__assert_fail@plt+0xb47c>
   1ca3c:	ldr	r2, [r7, #4]
   1ca40:	add	r1, r2, r1
   1ca44:	ldrb	r1, [r1, #-1]
   1ca48:	cmp	r1, #10
   1ca4c:	beq	1c9d4 <__assert_fail@plt+0xb2d4>
   1ca50:	b	1cb7c <__assert_fail@plt+0xb47c>
   1ca54:	tst	r8, #524288	; 0x80000
   1ca58:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1ca5c:	mov	r1, #128	; 0x80
   1ca60:	b	1c9d8 <__assert_fail@plt+0xb2d8>
   1ca64:	tst	r8, #8192	; 0x2000
   1ca68:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1ca6c:	mov	r1, #8
   1ca70:	b	1cb74 <__assert_fail@plt+0xb474>
   1ca74:	tst	r8, #8192	; 0x2000
   1ca78:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1ca7c:	mov	r1, #9
   1ca80:	b	1cb74 <__assert_fail@plt+0xb474>
   1ca84:	movw	r1, #1026	; 0x402
   1ca88:	and	r1, r8, r1
   1ca8c:	cmp	r1, #2
   1ca90:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1ca94:	mov	r1, #18
   1ca98:	b	1cb74 <__assert_fail@plt+0xb474>
   1ca9c:	tst	r8, #524288	; 0x80000
   1caa0:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1caa4:	mov	r1, #6
   1caa8:	b	1c9d8 <__assert_fail@plt+0xb2d8>
   1caac:	tst	r8, #524288	; 0x80000
   1cab0:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cab4:	mov	r1, #9
   1cab8:	b	1c9d8 <__assert_fail@plt+0xb2d8>
   1cabc:	movw	r1, #1026	; 0x402
   1cac0:	and	r1, r8, r1
   1cac4:	cmp	r1, #2
   1cac8:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cacc:	mov	r1, #19
   1cad0:	b	1cb74 <__assert_fail@plt+0xb474>
   1cad4:	tst	r8, #524288	; 0x80000
   1cad8:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cadc:	mov	r1, #512	; 0x200
   1cae0:	b	1c9d8 <__assert_fail@plt+0xb2d8>
   1cae4:	tst	r8, #524288	; 0x80000
   1cae8:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1caec:	mov	r1, #35	; 0x23
   1caf0:	b	1cb74 <__assert_fail@plt+0xb474>
   1caf4:	tst	r8, #524288	; 0x80000
   1caf8:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cafc:	mov	r1, #33	; 0x21
   1cb00:	b	1cb74 <__assert_fail@plt+0xb474>
   1cb04:	tst	r8, #524288	; 0x80000
   1cb08:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cb0c:	mov	r1, #64	; 0x40
   1cb10:	b	1c9d8 <__assert_fail@plt+0xb2d8>
   1cb14:	tst	r8, #524288	; 0x80000
   1cb18:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cb1c:	mov	r1, #256	; 0x100
   1cb20:	b	1c9d8 <__assert_fail@plt+0xb2d8>
   1cb24:	tst	r8, #524288	; 0x80000
   1cb28:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cb2c:	mov	r1, #34	; 0x22
   1cb30:	b	1cb74 <__assert_fail@plt+0xb474>
   1cb34:	tst	r8, #524288	; 0x80000
   1cb38:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cb3c:	mov	r1, #32
   1cb40:	b	1cb74 <__assert_fail@plt+0xb474>
   1cb44:	and	r1, r8, #4608	; 0x1200
   1cb48:	cmp	r1, #512	; 0x200
   1cb4c:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cb50:	mov	r1, #23
   1cb54:	b	1cb74 <__assert_fail@plt+0xb474>
   1cb58:	tst	r8, #33792	; 0x8400
   1cb5c:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cb60:	b	1ca10 <__assert_fail@plt+0xb310>
   1cb64:	and	r1, r8, #4608	; 0x1200
   1cb68:	cmp	r1, #512	; 0x200
   1cb6c:	bne	1cb7c <__assert_fail@plt+0xb47c>
   1cb70:	mov	r1, #24
   1cb74:	bfi	r0, r1, #0, #8
   1cb78:	str	r0, [r5]
   1cb7c:	mov	r0, r4
   1cb80:	sub	sp, fp, #24
   1cb84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cb88:	cmp	r3, #2
   1cb8c:	blt	1cbbc <__assert_fail@plt+0xb4bc>
   1cb90:	ldr	r3, [r7, #8]
   1cb94:	ldr	r4, [r3, r2, lsl #2]
   1cb98:	cmn	r4, #1
   1cb9c:	beq	1c448 <__assert_fail@plt+0xad48>
   1cba0:	ldr	r4, [r7, #28]
   1cba4:	add	r6, r6, #2
   1cba8:	cmp	r4, r6
   1cbac:	beq	1cbbc <__assert_fail@plt+0xb4bc>
   1cbb0:	ldr	r3, [r3, r6, lsl #2]
   1cbb4:	cmn	r3, #1
   1cbb8:	beq	1c448 <__assert_fail@plt+0xad48>
   1cbbc:	ldrb	r3, [r7, #76]	; 0x4c
   1cbc0:	mov	r6, r2
   1cbc4:	ldr	r4, [r7, #24]
   1cbc8:	ldr	ip, [r7]
   1cbcc:	cmp	r3, #0
   1cbd0:	ldrne	r6, [r7, #12]
   1cbd4:	ldrne	r6, [r6, r2, lsl #2]
   1cbd8:	cmp	r3, #0
   1cbdc:	add	r6, r4, r6
   1cbe0:	add	r6, ip, r6
   1cbe4:	ldrsb	r6, [r6]
   1cbe8:	beq	1c450 <__assert_fail@plt+0xad50>
   1cbec:	cmn	r6, #1
   1cbf0:	ble	1c448 <__assert_fail@plt+0xad48>
   1cbf4:	b	1c450 <__assert_fail@plt+0xad50>
   1cbf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbfc:	add	fp, sp, #28
   1cc00:	sub	sp, sp, #12
   1cc04:	mov	r4, r1
   1cc08:	ldr	r8, [r1]
   1cc0c:	ldr	r1, [fp, #8]
   1cc10:	ldr	r5, [fp, #12]
   1cc14:	mov	r7, r2
   1cc18:	str	r0, [sp, #8]
   1cc1c:	mov	sl, r3
   1cc20:	mov	r9, r1
   1cc24:	str	r1, [sp]
   1cc28:	mov	r1, r4
   1cc2c:	str	r5, [sp, #4]
   1cc30:	bl	1d060 <__assert_fail@plt+0xb960>
   1cc34:	mov	r3, r5
   1cc38:	mov	r5, r0
   1cc3c:	mov	r0, #0
   1cc40:	cmp	r5, #0
   1cc44:	bne	1cc54 <__assert_fail@plt+0xb554>
   1cc48:	ldr	r1, [r3]
   1cc4c:	cmp	r1, #0
   1cc50:	bne	1ce54 <__assert_fail@plt+0xb754>
   1cc54:	cmp	r9, #0
   1cc58:	bne	1cd6c <__assert_fail@plt+0xb66c>
   1cc5c:	mov	r9, #0
   1cc60:	ldrb	r0, [r7, #4]
   1cc64:	orr	r0, r0, #8
   1cc68:	cmp	r0, #10
   1cc6c:	bne	1cc8c <__assert_fail@plt+0xb58c>
   1cc70:	b	1ce50 <__assert_fail@plt+0xb750>
   1cc74:	cmp	r5, #0
   1cc78:	moveq	r5, r6
   1cc7c:	ldrb	r0, [r7, #4]
   1cc80:	orr	r0, r0, #8
   1cc84:	cmp	r0, #10
   1cc88:	beq	1ce50 <__assert_fail@plt+0xb750>
   1cc8c:	ldr	r0, [sp, #8]
   1cc90:	str	r3, [sp, #4]
   1cc94:	mov	r1, r4
   1cc98:	mov	r2, r7
   1cc9c:	mov	r3, sl
   1cca0:	str	r9, [sp]
   1cca4:	bl	1d060 <__assert_fail@plt+0xb960>
   1cca8:	ldr	r3, [fp, #12]
   1ccac:	cmp	r5, #0
   1ccb0:	mov	r2, r5
   1ccb4:	mov	r6, r0
   1ccb8:	movwne	r2, #1
   1ccbc:	cmp	r0, #0
   1ccc0:	bne	1ccd0 <__assert_fail@plt+0xb5d0>
   1ccc4:	ldr	r1, [r3]
   1ccc8:	cmp	r1, #0
   1cccc:	bne	1ce5c <__assert_fail@plt+0xb75c>
   1ccd0:	cmp	r5, #0
   1ccd4:	cmpne	r6, #0
   1ccd8:	beq	1cc74 <__assert_fail@plt+0xb574>
   1ccdc:	ldr	r1, [r8, #64]	; 0x40
   1cce0:	cmp	r1, #31
   1cce4:	beq	1cd38 <__assert_fail@plt+0xb638>
   1cce8:	ldr	r0, [r8, #56]	; 0x38
   1ccec:	add	r2, r1, #1
   1ccf0:	add	r0, r0, r1, lsl #5
   1ccf4:	mov	r1, #16
   1ccf8:	str	r2, [r8, #64]	; 0x40
   1ccfc:	str	r9, [r0, #4]!
   1cd00:	stmib	r0, {r5, r6, r9}
   1cd04:	str	r9, [r0, #16]
   1cd08:	str	r9, [r0, #20]
   1cd0c:	str	r1, [r0, #24]
   1cd10:	mvn	r1, #0
   1cd14:	str	r1, [r0, #28]
   1cd18:	str	r0, [r5]
   1cd1c:	str	r0, [r6]
   1cd20:	mov	r5, r0
   1cd24:	ldrb	r0, [r7, #4]
   1cd28:	orr	r0, r0, #8
   1cd2c:	cmp	r0, #10
   1cd30:	bne	1cc8c <__assert_fail@plt+0xb58c>
   1cd34:	b	1ce50 <__assert_fail@plt+0xb750>
   1cd38:	mov	r0, #996	; 0x3e4
   1cd3c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1cd40:	cmp	r0, #0
   1cd44:	beq	1cf08 <__assert_fail@plt+0xb808>
   1cd48:	ldr	r1, [r8, #56]	; 0x38
   1cd4c:	ldr	r3, [fp, #12]
   1cd50:	str	r1, [r0]
   1cd54:	mov	r1, #0
   1cd58:	str	r1, [r8, #64]	; 0x40
   1cd5c:	str	r0, [r8, #56]	; 0x38
   1cd60:	b	1ccec <__assert_fail@plt+0xb5ec>
   1cd64:	cmp	r5, #0
   1cd68:	moveq	r5, r6
   1cd6c:	ldrb	r0, [r7, #4]
   1cd70:	orr	r1, r0, #8
   1cd74:	cmp	r1, #10
   1cd78:	cmpne	r0, #9
   1cd7c:	beq	1ce50 <__assert_fail@plt+0xb750>
   1cd80:	ldr	r0, [sp, #8]
   1cd84:	str	r3, [sp, #4]
   1cd88:	mov	r1, r4
   1cd8c:	mov	r2, r7
   1cd90:	mov	r3, sl
   1cd94:	str	r9, [sp]
   1cd98:	bl	1d060 <__assert_fail@plt+0xb960>
   1cd9c:	ldr	r3, [fp, #12]
   1cda0:	cmp	r5, #0
   1cda4:	mov	r2, r5
   1cda8:	mov	r6, r0
   1cdac:	movwne	r2, #1
   1cdb0:	cmp	r0, #0
   1cdb4:	bne	1cdc4 <__assert_fail@plt+0xb6c4>
   1cdb8:	ldr	r1, [r3]
   1cdbc:	cmp	r1, #0
   1cdc0:	bne	1ce5c <__assert_fail@plt+0xb75c>
   1cdc4:	cmp	r5, #0
   1cdc8:	cmpne	r6, #0
   1cdcc:	beq	1cd64 <__assert_fail@plt+0xb664>
   1cdd0:	ldr	r1, [r8, #64]	; 0x40
   1cdd4:	cmp	r1, #31
   1cdd8:	beq	1ce24 <__assert_fail@plt+0xb724>
   1cddc:	ldr	r0, [r8, #56]	; 0x38
   1cde0:	add	r2, r1, #1
   1cde4:	add	r0, r0, r1, lsl #5
   1cde8:	mov	r1, #0
   1cdec:	str	r2, [r8, #64]	; 0x40
   1cdf0:	str	r1, [r0, #4]!
   1cdf4:	stmib	r0, {r5, r6}
   1cdf8:	str	r1, [r0, #12]
   1cdfc:	str	r1, [r0, #16]
   1ce00:	str	r1, [r0, #20]
   1ce04:	mov	r1, #16
   1ce08:	str	r1, [r0, #24]
   1ce0c:	mvn	r1, #0
   1ce10:	str	r1, [r0, #28]
   1ce14:	str	r0, [r5]
   1ce18:	str	r0, [r6]
   1ce1c:	mov	r5, r0
   1ce20:	b	1cd6c <__assert_fail@plt+0xb66c>
   1ce24:	mov	r0, #996	; 0x3e4
   1ce28:	bl	2aa84 <__assert_fail@plt+0x19384>
   1ce2c:	cmp	r0, #0
   1ce30:	beq	1cf08 <__assert_fail@plt+0xb808>
   1ce34:	ldr	r1, [r8, #56]	; 0x38
   1ce38:	ldr	r3, [fp, #12]
   1ce3c:	str	r1, [r0]
   1ce40:	mov	r1, #0
   1ce44:	str	r1, [r8, #64]	; 0x40
   1ce48:	str	r0, [r8, #56]	; 0x38
   1ce4c:	b	1cde0 <__assert_fail@plt+0xb6e0>
   1ce50:	mov	r0, r5
   1ce54:	sub	sp, fp, #28
   1ce58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce5c:	mov	r0, #0
   1ce60:	cmp	r2, #0
   1ce64:	beq	1ce54 <__assert_fail@plt+0xb754>
   1ce68:	movw	r6, #255	; 0xff
   1ce6c:	movt	r6, #4
   1ce70:	mov	r7, r5
   1ce74:	ldr	r5, [r5, #4]
   1ce78:	cmp	r5, #0
   1ce7c:	bne	1ce70 <__assert_fail@plt+0xb770>
   1ce80:	ldr	r5, [r7, #8]
   1ce84:	cmp	r5, #0
   1ce88:	bne	1ce70 <__assert_fail@plt+0xb770>
   1ce8c:	ldr	r1, [r7, #24]
   1ce90:	and	r1, r1, r6
   1ce94:	cmp	r1, #3
   1ce98:	beq	1ced0 <__assert_fail@plt+0xb7d0>
   1ce9c:	cmp	r1, #6
   1cea0:	bne	1cedc <__assert_fail@plt+0xb7dc>
   1cea4:	ldr	r4, [r7, #20]
   1cea8:	ldr	r0, [r4]
   1ceac:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ceb0:	ldr	r0, [r4, #4]
   1ceb4:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ceb8:	ldr	r0, [r4, #8]
   1cebc:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cec0:	ldr	r0, [r4, #12]
   1cec4:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cec8:	mov	r0, r4
   1cecc:	b	1ced4 <__assert_fail@plt+0xb7d4>
   1ced0:	ldr	r0, [r7, #20]
   1ced4:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ced8:	mov	r0, #0
   1cedc:	ldr	r1, [r7]
   1cee0:	cmp	r1, #0
   1cee4:	beq	1ce54 <__assert_fail@plt+0xb754>
   1cee8:	ldr	r5, [r1, #8]
   1ceec:	cmp	r5, r7
   1cef0:	mov	r7, r1
   1cef4:	beq	1ce8c <__assert_fail@plt+0xb78c>
   1cef8:	cmp	r5, #0
   1cefc:	mov	r7, r1
   1cf00:	beq	1ce8c <__assert_fail@plt+0xb78c>
   1cf04:	b	1ce70 <__assert_fail@plt+0xb770>
   1cf08:	ldr	r1, [fp, #12]
   1cf0c:	movw	r8, #255	; 0xff
   1cf10:	movt	r8, #4
   1cf14:	mov	r7, r6
   1cf18:	ldr	r6, [r6, #4]
   1cf1c:	cmp	r6, #0
   1cf20:	bne	1cf14 <__assert_fail@plt+0xb814>
   1cf24:	ldr	r6, [r7, #8]
   1cf28:	cmp	r6, #0
   1cf2c:	bne	1cf14 <__assert_fail@plt+0xb814>
   1cf30:	ldr	r0, [r7, #24]
   1cf34:	and	r0, r0, r8
   1cf38:	cmp	r0, #3
   1cf3c:	beq	1cf74 <__assert_fail@plt+0xb874>
   1cf40:	cmp	r0, #6
   1cf44:	bne	1cf80 <__assert_fail@plt+0xb880>
   1cf48:	ldr	r4, [r7, #20]
   1cf4c:	ldr	r0, [r4]
   1cf50:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cf54:	ldr	r0, [r4, #4]
   1cf58:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cf5c:	ldr	r0, [r4, #8]
   1cf60:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cf64:	ldr	r0, [r4, #12]
   1cf68:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cf6c:	mov	r0, r4
   1cf70:	b	1cf78 <__assert_fail@plt+0xb878>
   1cf74:	ldr	r0, [r7, #20]
   1cf78:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cf7c:	ldr	r1, [fp, #12]
   1cf80:	ldr	r0, [r7]
   1cf84:	cmp	r0, #0
   1cf88:	beq	1cfac <__assert_fail@plt+0xb8ac>
   1cf8c:	ldr	r6, [r0, #8]
   1cf90:	cmp	r6, r7
   1cf94:	mov	r7, r0
   1cf98:	beq	1cf30 <__assert_fail@plt+0xb830>
   1cf9c:	cmp	r6, #0
   1cfa0:	mov	r7, r0
   1cfa4:	beq	1cf30 <__assert_fail@plt+0xb830>
   1cfa8:	b	1cf14 <__assert_fail@plt+0xb814>
   1cfac:	mov	r6, r5
   1cfb0:	ldr	r5, [r5, #4]
   1cfb4:	cmp	r5, #0
   1cfb8:	bne	1cfac <__assert_fail@plt+0xb8ac>
   1cfbc:	ldr	r5, [r6, #8]
   1cfc0:	cmp	r5, #0
   1cfc4:	bne	1cfac <__assert_fail@plt+0xb8ac>
   1cfc8:	ldr	r0, [r6, #24]
   1cfcc:	and	r0, r0, r8
   1cfd0:	cmp	r0, #3
   1cfd4:	beq	1d00c <__assert_fail@plt+0xb90c>
   1cfd8:	cmp	r0, #6
   1cfdc:	bne	1d018 <__assert_fail@plt+0xb918>
   1cfe0:	ldr	r4, [r6, #20]
   1cfe4:	ldr	r0, [r4]
   1cfe8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cfec:	ldr	r0, [r4, #4]
   1cff0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cff4:	ldr	r0, [r4, #8]
   1cff8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1cffc:	ldr	r0, [r4, #12]
   1d000:	bl	13de4 <__assert_fail@plt+0x26e4>
   1d004:	mov	r0, r4
   1d008:	b	1d010 <__assert_fail@plt+0xb910>
   1d00c:	ldr	r0, [r6, #20]
   1d010:	bl	13de4 <__assert_fail@plt+0x26e4>
   1d014:	ldr	r1, [fp, #12]
   1d018:	ldr	r0, [r6]
   1d01c:	cmp	r0, #0
   1d020:	beq	1d044 <__assert_fail@plt+0xb944>
   1d024:	ldr	r5, [r0, #8]
   1d028:	cmp	r5, r6
   1d02c:	mov	r6, r0
   1d030:	beq	1cfc8 <__assert_fail@plt+0xb8c8>
   1d034:	cmp	r5, #0
   1d038:	mov	r6, r0
   1d03c:	beq	1cfc8 <__assert_fail@plt+0xb8c8>
   1d040:	b	1cfac <__assert_fail@plt+0xb8ac>
   1d044:	mov	r0, #12
   1d048:	str	r0, [r1]
   1d04c:	mov	r0, #0
   1d050:	sub	sp, fp, #28
   1d054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d058:	nop	{0}
   1d05c:	nop	{0}
   1d060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d064:	add	fp, sp, #28
   1d068:	sub	sp, sp, #148	; 0x94
   1d06c:	str	r0, [sp, #24]
   1d070:	ldr	r0, [r2, #4]
   1d074:	mov	r7, r1
   1d078:	mov	lr, r2
   1d07c:	mvn	r1, #0
   1d080:	mov	r6, r3
   1d084:	mov	sl, #0
   1d088:	ldr	r2, [fp, #12]
   1d08c:	ldr	r8, [r7]
   1d090:	uxtab	r1, r1, r0
   1d094:	cmp	r1, #35	; 0x23
   1d098:	str	r2, [sp, #16]
   1d09c:	str	lr, [sp, #44]	; 0x2c
   1d0a0:	bhi	1d1cc <__assert_fail@plt+0xbacc>
   1d0a4:	add	r2, pc, #0
   1d0a8:	ldr	pc, [r2, r1, lsl #2]
   1d0ac:	muleq	r1, r0, r4
   1d0b0:	andeq	lr, r1, r4, ror pc
   1d0b4:	andeq	sp, r1, ip, asr #3
   1d0b8:	andeq	sp, r1, r0, asr r2
   1d0bc:	ldrdeq	sp, [r1], -r0
   1d0c0:	andeq	sp, r1, ip, asr #3
   1d0c4:	andeq	sp, r1, ip, asr #3
   1d0c8:	andeq	sp, r1, r8, lsr r3
   1d0cc:	ldrdeq	sp, [r1], -ip
   1d0d0:	andeq	lr, r1, r4, ror pc
   1d0d4:	andeq	sp, r1, ip, asr #3
   1d0d8:	andeq	sp, r1, r8, asr #7
   1d0dc:	andeq	sp, r1, ip, asr #3
   1d0e0:	andeq	sp, r1, ip, asr #3
   1d0e4:	andeq	sp, r1, ip, asr #3
   1d0e8:	andeq	sp, r1, ip, asr #3
   1d0ec:	andeq	sp, r1, ip, asr #3
   1d0f0:	andeq	sp, r1, ip, asr #3
   1d0f4:	andeq	sp, r1, ip, asr #3
   1d0f8:	andeq	sp, r1, r8, ror #12
   1d0fc:	andeq	sp, r1, ip, asr #3
   1d100:	andeq	sp, r1, ip, asr #3
   1d104:	andeq	sp, r1, r4, asr #3
   1d108:	andeq	sp, r1, ip, ror #3
   1d10c:	andeq	sp, r1, ip, asr #3
   1d110:	andeq	sp, r1, ip, asr #3
   1d114:	andeq	sp, r1, ip, asr #3
   1d118:	andeq	sp, r1, ip, asr #3
   1d11c:	andeq	sp, r1, ip, asr #3
   1d120:	andeq	sp, r1, ip, asr #3
   1d124:	andeq	sp, r1, ip, asr #3
   1d128:	andeq	sp, r1, ip, lsr r1
   1d12c:	andeq	sp, r1, ip, lsr r1
   1d130:	andeq	sp, r1, r0, ror #2
   1d134:	andeq	sp, r1, r0, ror #2
   1d138:	andeq	sp, r1, r0, ror #12
   1d13c:	ldr	r1, [sp, #24]
   1d140:	mvn	r2, #32
   1d144:	movw	r3, #47637	; 0xba15
   1d148:	uxtab	r0, r2, r0
   1d14c:	movw	r2, #49094	; 0xbfc6
   1d150:	movt	r3, #2
   1d154:	clz	r0, r0
   1d158:	movt	r2, #2
   1d15c:	b	1d180 <__assert_fail@plt+0xba80>
   1d160:	ldr	r1, [sp, #24]
   1d164:	mvn	r2, #34	; 0x22
   1d168:	movw	r3, #47787	; 0xbaab
   1d16c:	uxtab	r0, r2, r0
   1d170:	movw	r2, #49100	; 0xbfcc
   1d174:	movt	r3, #2
   1d178:	clz	r0, r0
   1d17c:	movt	r2, #2
   1d180:	lsr	r0, r0, #5
   1d184:	ldr	r1, [r1, #64]	; 0x40
   1d188:	str	r0, [sp]
   1d18c:	ldr	r4, [sp, #16]
   1d190:	str	r4, [sp, #4]
   1d194:	mov	r0, r8
   1d198:	bl	1f5f4 <__assert_fail@plt+0xdef4>
   1d19c:	mov	r7, r0
   1d1a0:	cmp	r0, #0
   1d1a4:	bne	1d1bc <__assert_fail@plt+0xbabc>
   1d1a8:	ldr	r0, [r4]
   1d1ac:	cmp	r0, #0
   1d1b0:	ldr	lr, [sp, #44]	; 0x2c
   1d1b4:	beq	1e180 <__assert_fail@plt+0xca80>
   1d1b8:	b	1ef74 <__assert_fail@plt+0xd874>
   1d1bc:	ldr	lr, [sp, #44]	; 0x2c
   1d1c0:	b	1e180 <__assert_fail@plt+0xca80>
   1d1c4:	tst	r6, #16777216	; 0x1000000
   1d1c8:	bne	1d248 <__assert_fail@plt+0xbb48>
   1d1cc:	tst	r6, #32
   1d1d0:	bne	1d248 <__assert_fail@plt+0xbb48>
   1d1d4:	tst	r6, #16
   1d1d8:	bne	1d6e4 <__assert_fail@plt+0xbfe4>
   1d1dc:	tst	r6, #131072	; 0x20000
   1d1e0:	uxtbeq	r1, r0
   1d1e4:	cmpeq	r1, #9
   1d1e8:	beq	1d72c <__assert_fail@plt+0xc02c>
   1d1ec:	mov	r1, #1
   1d1f0:	bfi	r0, r1, #0, #8
   1d1f4:	str	r0, [lr, #4]
   1d1f8:	ldr	r1, [r8, #64]	; 0x40
   1d1fc:	cmp	r1, #31
   1d200:	beq	1f0ec <__assert_fail@plt+0xd9ec>
   1d204:	ldr	r0, [r8, #56]	; 0x38
   1d208:	add	r2, r1, #1
   1d20c:	add	r7, r0, r1, lsl #5
   1d210:	mov	r0, #0
   1d214:	str	r2, [r8, #64]	; 0x40
   1d218:	str	r0, [r7, #4]!
   1d21c:	str	r0, [r7, #4]
   1d220:	str	r0, [r7, #8]
   1d224:	ldm	lr, {r1, r2}
   1d228:	str	r0, [r7, #12]
   1d22c:	str	r0, [r7, #16]
   1d230:	mvn	r0, #0
   1d234:	str	r0, [r7, #28]
   1d238:	bic	r0, r2, #786432	; 0xc0000
   1d23c:	str	r1, [r7, #20]
   1d240:	str	r0, [r7, #24]
   1d244:	b	1e180 <__assert_fail@plt+0xca80>
   1d248:	mov	r0, #13
   1d24c:	b	1e074 <__assert_fail@plt+0xc974>
   1d250:	ldr	r0, [lr]
   1d254:	ldr	r2, [r8, #84]	; 0x54
   1d258:	mov	r1, #1
   1d25c:	tst	r2, r1, lsl r0
   1d260:	beq	1f130 <__assert_fail@plt+0xda30>
   1d264:	lsl	r0, r1, r0
   1d268:	ldr	r1, [r8, #64]	; 0x40
   1d26c:	ldr	r2, [r8, #80]	; 0x50
   1d270:	orr	r0, r2, r0
   1d274:	cmp	r1, #31
   1d278:	str	r0, [r8, #80]	; 0x50
   1d27c:	beq	1f1a8 <__assert_fail@plt+0xdaa8>
   1d280:	ldr	r0, [r8, #56]	; 0x38
   1d284:	add	r2, r1, #1
   1d288:	add	r7, r0, r1, lsl #5
   1d28c:	mov	r0, #0
   1d290:	str	r2, [r8, #64]	; 0x40
   1d294:	str	r0, [r7, #4]!
   1d298:	str	r0, [r7, #4]
   1d29c:	str	r0, [r7, #8]
   1d2a0:	ldm	lr, {r1, r2}
   1d2a4:	str	r0, [r7, #12]
   1d2a8:	str	r0, [r7, #16]
   1d2ac:	mvn	r0, #0
   1d2b0:	str	r0, [r7, #28]
   1d2b4:	bic	r0, r2, #786432	; 0xc0000
   1d2b8:	str	r1, [r7, #20]
   1d2bc:	str	r0, [r7, #24]
   1d2c0:	ldr	r0, [r8, #76]	; 0x4c
   1d2c4:	add	r0, r0, #1
   1d2c8:	str	r0, [r8, #76]	; 0x4c
   1d2cc:	b	1d328 <__assert_fail@plt+0xbc28>
   1d2d0:	ldr	r1, [r8, #64]	; 0x40
   1d2d4:	cmp	r1, #31
   1d2d8:	beq	1f138 <__assert_fail@plt+0xda38>
   1d2dc:	ldr	r0, [r8, #56]	; 0x38
   1d2e0:	add	r2, r1, #1
   1d2e4:	add	r7, r0, r1, lsl #5
   1d2e8:	mov	r0, #0
   1d2ec:	str	r2, [r8, #64]	; 0x40
   1d2f0:	str	r0, [r7, #4]!
   1d2f4:	str	r0, [r7, #4]
   1d2f8:	str	r0, [r7, #8]
   1d2fc:	ldm	lr, {r1, r2}
   1d300:	str	r0, [r7, #12]
   1d304:	str	r0, [r7, #16]
   1d308:	mvn	r0, #0
   1d30c:	str	r0, [r7, #28]
   1d310:	bic	r0, r2, #786432	; 0xc0000
   1d314:	str	r1, [r7, #20]
   1d318:	str	r0, [r7, #24]
   1d31c:	ldr	r0, [r8, #92]	; 0x5c
   1d320:	cmp	r0, #2
   1d324:	blt	1e180 <__assert_fail@plt+0xca80>
   1d328:	ldrb	r0, [r8, #88]	; 0x58
   1d32c:	orr	r0, r0, #2
   1d330:	strb	r0, [r8, #88]	; 0x58
   1d334:	b	1e180 <__assert_fail@plt+0xca80>
   1d338:	ldr	r4, [r7, #24]
   1d33c:	mov	sl, r6
   1d340:	orr	r2, r6, #8388608	; 0x800000
   1d344:	ldr	r6, [sp, #24]
   1d348:	ldr	r5, [fp, #8]
   1d34c:	add	r0, r4, #1
   1d350:	mov	r1, r6
   1d354:	str	r0, [r7, #24]
   1d358:	mov	r0, lr
   1d35c:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1d360:	ldr	r1, [r6, #40]	; 0x28
   1d364:	ldr	lr, [sp, #44]	; 0x2c
   1d368:	mov	r9, #0
   1d36c:	add	r0, r1, r0
   1d370:	str	r0, [r6, #40]	; 0x28
   1d374:	ldrb	r0, [lr, #4]
   1d378:	cmp	r0, #9
   1d37c:	beq	1e114 <__assert_fail@plt+0xca14>
   1d380:	add	r0, r5, #1
   1d384:	mov	r1, r7
   1d388:	mov	r2, lr
   1d38c:	mov	r3, sl
   1d390:	mov	r6, lr
   1d394:	str	r0, [sp]
   1d398:	ldr	r5, [sp, #16]
   1d39c:	str	r5, [sp, #4]
   1d3a0:	ldr	r0, [sp, #24]
   1d3a4:	bl	1c020 <__assert_fail@plt+0xa920>
   1d3a8:	mov	r9, r0
   1d3ac:	ldr	r0, [r5]
   1d3b0:	cmp	r0, #0
   1d3b4:	beq	1e104 <__assert_fail@plt+0xca04>
   1d3b8:	mov	sl, #0
   1d3bc:	mov	r0, sl
   1d3c0:	sub	sp, fp, #28
   1d3c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3c8:	ldr	r0, [lr]
   1d3cc:	ldr	r7, [sp, #24]
   1d3d0:	movw	r1, #783	; 0x30f
   1d3d4:	tst	r0, r1
   1d3d8:	beq	1d420 <__assert_fail@plt+0xbd20>
   1d3dc:	ldrb	r0, [r8, #88]	; 0x58
   1d3e0:	tst	r0, #16
   1d3e4:	bne	1d41c <__assert_fail@plt+0xbd1c>
   1d3e8:	orr	r1, r0, #16
   1d3ec:	tst	r0, #8
   1d3f0:	strb	r1, [r8, #88]	; 0x58
   1d3f4:	bne	1f3ec <__assert_fail@plt+0xdcec>
   1d3f8:	add	r1, pc, #832	; 0x340
   1d3fc:	tst	r0, #4
   1d400:	vld1.64	{d16-d17}, [r1 :128]
   1d404:	add	r1, r8, #96	; 0x60
   1d408:	vst1.32	{d16-d17}, [r1]
   1d40c:	beq	1f3f8 <__assert_fail@plt+0xdcf8>
   1d410:	vmov.i32	q8, #0	; 0x00000000
   1d414:	add	r0, r8, #112	; 0x70
   1d418:	vst1.32	{d16-d17}, [r0]
   1d41c:	ldr	r0, [lr]
   1d420:	cmp	r0, #512	; 0x200
   1d424:	beq	1df68 <__assert_fail@plt+0xc868>
   1d428:	cmp	r0, #256	; 0x100
   1d42c:	bne	1e088 <__assert_fail@plt+0xc988>
   1d430:	mov	r0, #6
   1d434:	mov	r4, r8
   1d438:	str	r0, [lr]
   1d43c:	ldr	r1, [r4, #64]!	; 0x40
   1d440:	cmp	r1, #31
   1d444:	beq	1f338 <__assert_fail@plt+0xdc38>
   1d448:	ldr	r0, [r8, #56]	; 0x38
   1d44c:	add	r2, r1, #1
   1d450:	add	r5, r0, r1, lsl #5
   1d454:	mov	r0, #0
   1d458:	str	r2, [r4]
   1d45c:	str	r0, [r5, #4]!
   1d460:	str	r0, [r5, #4]
   1d464:	str	r0, [r5, #8]
   1d468:	ldm	lr, {r1, r2}
   1d46c:	str	r0, [r5, #12]
   1d470:	str	r0, [r5, #16]
   1d474:	mvn	r0, #0
   1d478:	str	r0, [r5, #28]
   1d47c:	bic	r0, r2, #786432	; 0xc0000
   1d480:	str	r1, [r5, #20]
   1d484:	str	r0, [r5, #24]
   1d488:	mov	r0, #9
   1d48c:	b	1dfc4 <__assert_fail@plt+0xc8c4>
   1d490:	ldr	r1, [r8, #64]	; 0x40
   1d494:	cmp	r1, #31
   1d498:	beq	1f164 <__assert_fail@plt+0xda64>
   1d49c:	ldr	r0, [r8, #56]	; 0x38
   1d4a0:	ldr	r3, [sp, #24]
   1d4a4:	add	r2, r1, #1
   1d4a8:	add	r4, r0, r1, lsl #5
   1d4ac:	mov	r0, #0
   1d4b0:	str	r2, [r8, #64]	; 0x40
   1d4b4:	str	r0, [r4, #4]!
   1d4b8:	str	r0, [r4, #4]
   1d4bc:	str	r0, [r4, #8]
   1d4c0:	ldm	lr, {r1, r2}
   1d4c4:	str	r0, [r4, #12]
   1d4c8:	str	r0, [r4, #16]
   1d4cc:	mvn	r0, #0
   1d4d0:	str	r0, [r4, #28]
   1d4d4:	bic	r0, r2, #786432	; 0xc0000
   1d4d8:	str	r1, [r4, #20]
   1d4dc:	str	r0, [r4, #24]
   1d4e0:	ldr	r0, [r8, #92]	; 0x5c
   1d4e4:	cmp	r0, #2
   1d4e8:	blt	1d724 <__assert_fail@plt+0xc024>
   1d4ec:	ldr	r0, [r3, #40]	; 0x28
   1d4f0:	ldr	r1, [r3, #56]	; 0x38
   1d4f4:	cmp	r1, r0
   1d4f8:	ble	1d724 <__assert_fail@plt+0xc024>
   1d4fc:	mov	r5, #0
   1d500:	mvn	sl, #0
   1d504:	mov	r9, r6
   1d508:	ldr	r6, [sp, #24]
   1d50c:	ldr	r1, [r6, #28]
   1d510:	cmp	r0, r1
   1d514:	beq	1ef80 <__assert_fail@plt+0xd880>
   1d518:	ldr	r1, [r6, #8]
   1d51c:	ldr	r0, [r1, r0, lsl #2]
   1d520:	cmn	r0, #1
   1d524:	bne	1ef80 <__assert_fail@plt+0xd880>
   1d528:	mov	r0, lr
   1d52c:	mov	r1, r6
   1d530:	mov	r2, r9
   1d534:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1d538:	ldr	r1, [r6, #40]	; 0x28
   1d53c:	add	r0, r1, r0
   1d540:	str	r0, [r6, #40]	; 0x28
   1d544:	ldr	r1, [r8, #64]	; 0x40
   1d548:	cmp	r1, #31
   1d54c:	beq	1d5f8 <__assert_fail@plt+0xbef8>
   1d550:	ldr	r0, [r8, #56]	; 0x38
   1d554:	ldr	lr, [sp, #44]	; 0x2c
   1d558:	add	r2, r1, #1
   1d55c:	add	r6, r0, r1, lsl #5
   1d560:	str	r2, [r8, #64]	; 0x40
   1d564:	str	r5, [r6, #4]!
   1d568:	str	r5, [r6, #4]
   1d56c:	str	r5, [r6, #8]
   1d570:	ldm	lr, {r0, r1}
   1d574:	str	r5, [r6, #12]
   1d578:	str	r5, [r6, #16]
   1d57c:	str	sl, [r6, #28]
   1d580:	str	r0, [r6, #20]
   1d584:	bic	r0, r1, #786432	; 0xc0000
   1d588:	str	r0, [r6, #24]
   1d58c:	ldr	r1, [r8, #64]	; 0x40
   1d590:	cmp	r1, #31
   1d594:	beq	1d634 <__assert_fail@plt+0xbf34>
   1d598:	ldr	r0, [r8, #56]	; 0x38
   1d59c:	add	r2, r1, #1
   1d5a0:	add	r7, r0, r1, lsl #5
   1d5a4:	mov	r0, #16
   1d5a8:	cmp	r6, #0
   1d5ac:	str	r2, [r8, #64]	; 0x40
   1d5b0:	str	r5, [r7, #4]!
   1d5b4:	stmib	r7, {r4, r6}
   1d5b8:	str	r5, [r7, #12]
   1d5bc:	str	r5, [r7, #16]
   1d5c0:	str	r5, [r7, #20]
   1d5c4:	str	r0, [r7, #24]
   1d5c8:	str	sl, [r7, #28]
   1d5cc:	str	r7, [r4]
   1d5d0:	beq	1f3d0 <__assert_fail@plt+0xdcd0>
   1d5d4:	ldr	r1, [sp, #24]
   1d5d8:	str	r7, [r6]
   1d5dc:	mov	r4, r7
   1d5e0:	mov	r6, r9
   1d5e4:	ldr	r0, [r1, #40]	; 0x28
   1d5e8:	ldr	r1, [r1, #56]	; 0x38
   1d5ec:	cmp	r1, r0
   1d5f0:	bgt	1d504 <__assert_fail@plt+0xbe04>
   1d5f4:	b	1e180 <__assert_fail@plt+0xca80>
   1d5f8:	mov	r0, #996	; 0x3e4
   1d5fc:	bl	2aa84 <__assert_fail@plt+0x19384>
   1d600:	cmp	r0, #0
   1d604:	beq	1d620 <__assert_fail@plt+0xbf20>
   1d608:	ldr	r1, [r8, #56]	; 0x38
   1d60c:	str	r1, [r0]
   1d610:	mov	r1, #0
   1d614:	str	r1, [r8, #64]	; 0x40
   1d618:	str	r0, [r8, #56]	; 0x38
   1d61c:	b	1d554 <__assert_fail@plt+0xbe54>
   1d620:	ldr	lr, [sp, #44]	; 0x2c
   1d624:	mov	r6, #0
   1d628:	ldr	r1, [r8, #64]	; 0x40
   1d62c:	cmp	r1, #31
   1d630:	bne	1d598 <__assert_fail@plt+0xbe98>
   1d634:	mov	r0, #996	; 0x3e4
   1d638:	bl	2aa84 <__assert_fail@plt+0x19384>
   1d63c:	ldr	lr, [sp, #44]	; 0x2c
   1d640:	cmp	r0, #0
   1d644:	beq	1f3d0 <__assert_fail@plt+0xdcd0>
   1d648:	ldr	r1, [r8, #56]	; 0x38
   1d64c:	str	r1, [r0]
   1d650:	mov	r1, #0
   1d654:	str	r1, [r8, #64]	; 0x40
   1d658:	str	r0, [r8, #56]	; 0x38
   1d65c:	b	1d59c <__assert_fail@plt+0xbe9c>
   1d660:	mov	r0, #5
   1d664:	b	1e074 <__assert_fail@plt+0xc974>
   1d668:	mov	sl, #0
   1d66c:	mov	r0, #32
   1d670:	mov	r1, #1
   1d674:	str	sl, [fp, #-32]	; 0xffffffe0
   1d678:	bl	2aa30 <__assert_fail@plt+0x19330>
   1d67c:	mov	r4, r0
   1d680:	mov	r0, #40	; 0x28
   1d684:	mov	r1, #1
   1d688:	bl	2aa30 <__assert_fail@plt+0x19330>
   1d68c:	mov	r5, r0
   1d690:	cmp	r4, #0
   1d694:	cmpne	r5, #0
   1d698:	beq	1f194 <__assert_fail@plt+0xda94>
   1d69c:	str	r5, [sp, #48]	; 0x30
   1d6a0:	mov	r2, r6
   1d6a4:	ldr	r5, [sp, #44]	; 0x2c
   1d6a8:	ldr	r7, [sp, #24]
   1d6ac:	mov	r0, r5
   1d6b0:	mov	r1, r7
   1d6b4:	bl	1f9fc <__assert_fail@plt+0xe2fc>
   1d6b8:	mov	r3, r0
   1d6bc:	ldr	r0, [r5, #4]
   1d6c0:	mov	r2, r5
   1d6c4:	uxtb	r1, r0
   1d6c8:	cmp	r1, #25
   1d6cc:	beq	1d750 <__assert_fail@plt+0xc050>
   1d6d0:	ldr	sl, [sp, #48]	; 0x30
   1d6d4:	cmp	r1, #2
   1d6d8:	beq	1f128 <__assert_fail@plt+0xda28>
   1d6dc:	mov	r1, #0
   1d6e0:	b	1d7a8 <__assert_fail@plt+0xc0a8>
   1d6e4:	ldr	r4, [sp, #24]
   1d6e8:	mov	r0, lr
   1d6ec:	mov	r2, r6
   1d6f0:	mov	r5, lr
   1d6f4:	mov	r1, r4
   1d6f8:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1d6fc:	ldr	r1, [r4, #40]	; 0x28
   1d700:	mov	r2, r5
   1d704:	mov	r3, r6
   1d708:	add	r0, r1, r0
   1d70c:	mov	r1, r7
   1d710:	str	r0, [r4, #40]	; 0x28
   1d714:	mov	r0, r4
   1d718:	sub	sp, fp, #28
   1d71c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d720:	b	1d060 <__assert_fail@plt+0xb960>
   1d724:	mov	r7, r4
   1d728:	b	1e180 <__assert_fail@plt+0xca80>
   1d72c:	mov	r0, #16
   1d730:	b	1e074 <__assert_fail@plt+0xc974>
   1d734:	nop	{0}
   1d738:	nop	{0}
   1d73c:	nop	{0}
   1d740:	andeq	r0, r0, r0
   1d744:	mvnseq	r0, #0
   1d748:			; <UNDEFINED> instruction: 0x87fffffe
   1d74c:			; <UNDEFINED> instruction: 0x07fffffe
   1d750:	ldr	sl, [sp, #48]	; 0x30
   1d754:	tst	r6, #256	; 0x100
   1d758:	mov	r1, r7
   1d75c:	ldrb	r0, [sl, #16]
   1d760:	orr	r0, r0, #1
   1d764:	strb	r0, [sl, #16]
   1d768:	ldrne	r0, [r4]
   1d76c:	orrne	r0, r0, #1024	; 0x400
   1d770:	strne	r0, [r4]
   1d774:	ldr	r0, [r7, #40]	; 0x28
   1d778:	add	r0, r0, r3
   1d77c:	str	r0, [r7, #40]	; 0x28
   1d780:	mov	r0, r2
   1d784:	mov	r2, r6
   1d788:	bl	1f9fc <__assert_fail@plt+0xe2fc>
   1d78c:	ldr	r2, [sp, #44]	; 0x2c
   1d790:	mov	r3, r0
   1d794:	ldr	r0, [r2, #4]
   1d798:	uxtb	r1, r0
   1d79c:	cmp	r1, #2
   1d7a0:	beq	1f128 <__assert_fail@plt+0xda28>
   1d7a4:	mov	r1, #1
   1d7a8:	str	r1, [sp, #36]	; 0x24
   1d7ac:	uxtb	r1, r0
   1d7b0:	str	r4, [sp, #52]	; 0x34
   1d7b4:	str	r6, [sp, #40]	; 0x28
   1d7b8:	cmp	r1, #21
   1d7bc:	ldr	r5, [sp, #40]	; 0x28
   1d7c0:	moveq	r1, #1
   1d7c4:	bfieq	r0, r1, #0, #8
   1d7c8:	mov	r1, r7
   1d7cc:	streq	r0, [r2, #4]
   1d7d0:	mov	r0, #3
   1d7d4:	str	r0, [fp, #-40]	; 0xffffffd8
   1d7d8:	sub	r0, fp, #80	; 0x50
   1d7dc:	str	r0, [fp, #-36]	; 0xffffffdc
   1d7e0:	mov	r0, #1
   1d7e4:	str	r5, [sp]
   1d7e8:	str	r0, [sp, #4]
   1d7ec:	sub	r0, fp, #40	; 0x28
   1d7f0:	bl	1fba4 <__assert_fail@plt+0xe4a4>
   1d7f4:	cmp	r0, #0
   1d7f8:	bne	1f118 <__assert_fail@plt+0xda18>
   1d7fc:	and	r0, r5, #65536	; 0x10000
   1d800:	str	r0, [sp, #32]
   1d804:	mov	r0, #0
   1d808:	str	r0, [sp, #28]
   1d80c:	mov	r0, #0
   1d810:	str	r0, [sp, #20]
   1d814:	ldr	r6, [sp, #24]
   1d818:	ldr	r7, [sp, #44]	; 0x2c
   1d81c:	mov	r0, r7
   1d820:	mov	r1, r6
   1d824:	mov	r2, r5
   1d828:	bl	1f9fc <__assert_fail@plt+0xe2fc>
   1d82c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1d830:	ldr	r4, [sp, #52]	; 0x34
   1d834:	mov	r9, r0
   1d838:	cmp	r5, #2
   1d83c:	beq	1da40 <__assert_fail@plt+0xc340>
   1d840:	cmp	r5, #4
   1d844:	bne	1d884 <__assert_fail@plt+0xc184>
   1d848:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d84c:	ldr	r0, [r6, #64]	; 0x40
   1d850:	mov	r2, sl
   1d854:	sub	r3, fp, #32
   1d858:	str	r1, [sp]
   1d85c:	ldr	r1, [sp, #40]	; 0x28
   1d860:	str	r1, [sp, #4]
   1d864:	mov	r1, r4
   1d868:	bl	1fea8 <__assert_fail@plt+0xe7a8>
   1d86c:	ldr	r1, [sp, #16]
   1d870:	ldr	lr, [sp, #44]	; 0x2c
   1d874:	cmp	r0, #0
   1d878:	str	r0, [r1]
   1d87c:	beq	1da80 <__assert_fail@plt+0xc380>
   1d880:	b	1f1e8 <__assert_fail@plt+0xdae8>
   1d884:	ldr	lr, [sp, #44]	; 0x2c
   1d888:	mov	r7, r9
   1d88c:	mov	r9, #7
   1d890:	ldrb	r0, [lr, #4]
   1d894:	cmp	r0, #22
   1d898:	beq	1d8a8 <__assert_fail@plt+0xc1a8>
   1d89c:	cmp	r0, #2
   1d8a0:	bne	1d9f8 <__assert_fail@plt+0xc2f8>
   1d8a4:	b	1f1d8 <__assert_fail@plt+0xdad8>
   1d8a8:	ldr	r4, [sp, #24]
   1d8ac:	ldr	r2, [sp, #40]	; 0x28
   1d8b0:	mov	r6, r7
   1d8b4:	ldr	r0, [r4, #40]	; 0x28
   1d8b8:	mov	r1, r4
   1d8bc:	add	r0, r0, r7
   1d8c0:	str	r0, [r4, #40]	; 0x28
   1d8c4:	add	r0, sp, #56	; 0x38
   1d8c8:	bl	1f9fc <__assert_fail@plt+0xe2fc>
   1d8cc:	mov	r3, r0
   1d8d0:	ldrb	r0, [sp, #60]	; 0x3c
   1d8d4:	cmp	r0, #21
   1d8d8:	beq	1d9e0 <__assert_fail@plt+0xc2e0>
   1d8dc:	cmp	r0, #2
   1d8e0:	beq	1f1d8 <__assert_fail@plt+0xdad8>
   1d8e4:	ldr	r7, [sp, #40]	; 0x28
   1d8e8:	mov	r0, #3
   1d8ec:	add	r2, sp, #56	; 0x38
   1d8f0:	str	r0, [fp, #-48]	; 0xffffffd0
   1d8f4:	add	r0, sp, #64	; 0x40
   1d8f8:	str	r0, [fp, #-44]	; 0xffffffd4
   1d8fc:	mov	r0, #1
   1d900:	str	r0, [sp, #4]
   1d904:	sub	r0, fp, #48	; 0x30
   1d908:	str	r7, [sp]
   1d90c:	ldr	r4, [sp, #24]
   1d910:	mov	r1, r4
   1d914:	bl	1fba4 <__assert_fail@plt+0xe4a4>
   1d918:	cmp	r0, #0
   1d91c:	bne	1f118 <__assert_fail@plt+0xda18>
   1d920:	ldr	r0, [sp, #44]	; 0x2c
   1d924:	mov	r1, r4
   1d928:	mov	r2, r7
   1d92c:	bl	1f9fc <__assert_fail@plt+0xe2fc>
   1d930:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1d934:	mov	r9, #11
   1d938:	str	r0, [sp, #12]
   1d93c:	cmp	r4, #2
   1d940:	cmpne	r4, #4
   1d944:	beq	1f1d8 <__assert_fail@plt+0xdad8>
   1d948:	cmp	r5, #3
   1d94c:	bne	1d960 <__assert_fail@plt+0xc260>
   1d950:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d954:	bl	115bc <strlen@plt>
   1d958:	cmp	r0, #1
   1d95c:	bhi	1f1d4 <__assert_fail@plt+0xdad4>
   1d960:	cmp	r4, #3
   1d964:	bne	1d978 <__assert_fail@plt+0xc278>
   1d968:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d96c:	bl	115bc <strlen@plt>
   1d970:	cmp	r0, #1
   1d974:	bhi	1f1d4 <__assert_fail@plt+0xdad4>
   1d978:	ldr	lr, [sp, #44]	; 0x2c
   1d97c:	cmp	r5, #3
   1d980:	beq	1db4c <__assert_fail@plt+0xc44c>
   1d984:	mov	r7, #0
   1d988:	cmp	r5, #0
   1d98c:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   1d990:	cmp	r4, #3
   1d994:	beq	1db5c <__assert_fail@plt+0xc45c>
   1d998:	mov	sl, #0
   1d99c:	cmp	r4, #0
   1d9a0:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   1d9a4:	cmp	r5, #3
   1d9a8:	cmpne	r5, #0
   1d9ac:	bne	1db70 <__assert_fail@plt+0xc470>
   1d9b0:	ldr	r0, [r8, #92]	; 0x5c
   1d9b4:	cmp	r0, #2
   1d9b8:	blt	1db74 <__assert_fail@plt+0xc474>
   1d9bc:	mov	r0, r7
   1d9c0:	bl	1161c <btowc@plt>
   1d9c4:	ldr	lr, [sp, #44]	; 0x2c
   1d9c8:	mov	r7, r0
   1d9cc:	cmp	r4, #3
   1d9d0:	cmpne	r4, #0
   1d9d4:	beq	1db80 <__assert_fail@plt+0xc480>
   1d9d8:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1d9dc:	b	1dbb0 <__assert_fail@plt+0xc4b0>
   1d9e0:	ldr	r0, [r4, #40]	; 0x28
   1d9e4:	ldr	lr, [sp, #44]	; 0x2c
   1d9e8:	sub	r0, r0, r6
   1d9ec:	str	r0, [r4, #40]	; 0x28
   1d9f0:	mov	r0, #1
   1d9f4:	strb	r0, [lr, #4]
   1d9f8:	cmp	r5, #1
   1d9fc:	beq	1dad8 <__assert_fail@plt+0xc3d8>
   1da00:	ldr	r6, [sp, #24]
   1da04:	ldr	r4, [sp, #52]	; 0x34
   1da08:	ldr	sl, [sp, #48]	; 0x30
   1da0c:	cmp	r5, #2
   1da10:	mov	r9, r7
   1da14:	beq	1da40 <__assert_fail@plt+0xc340>
   1da18:	cmp	r5, #3
   1da1c:	bne	1db1c <__assert_fail@plt+0xc41c>
   1da20:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1da24:	mov	r0, r7
   1da28:	bl	115bc <strlen@plt>
   1da2c:	cmp	r0, #1
   1da30:	mov	r3, #1
   1da34:	bne	1f1d4 <__assert_fail@plt+0xdad4>
   1da38:	ldrb	r0, [r7]
   1da3c:	b	1da5c <__assert_fail@plt+0xc35c>
   1da40:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1da44:	mov	r0, r7
   1da48:	bl	115bc <strlen@plt>
   1da4c:	cmp	r0, #1
   1da50:	bne	1f1d4 <__assert_fail@plt+0xdad4>
   1da54:	ldrb	r0, [r7]
   1da58:	mov	r3, #1
   1da5c:	ubfx	r1, r0, #5, #3
   1da60:	and	r0, r0, #31
   1da64:	ldr	r2, [r4, r1, lsl #2]
   1da68:	orr	r0, r2, r3, lsl r0
   1da6c:	str	r0, [r4, r1, lsl #2]
   1da70:	mov	r1, #0
   1da74:	ldr	r0, [sp, #16]
   1da78:	ldr	lr, [sp, #44]	; 0x2c
   1da7c:	str	r1, [r0]
   1da80:	ldrb	r0, [lr, #4]
   1da84:	cmp	r0, #21
   1da88:	beq	1dd0c <__assert_fail@plt+0xc60c>
   1da8c:	cmp	r0, #2
   1da90:	beq	1f120 <__assert_fail@plt+0xda20>
   1da94:	mov	r0, #3
   1da98:	ldr	r5, [sp, #40]	; 0x28
   1da9c:	mov	r1, r6
   1daa0:	mov	r2, lr
   1daa4:	mov	r3, r9
   1daa8:	mov	r7, lr
   1daac:	str	r0, [fp, #-40]	; 0xffffffd8
   1dab0:	sub	r0, fp, #80	; 0x50
   1dab4:	str	r0, [fp, #-36]	; 0xffffffdc
   1dab8:	mov	r0, #0
   1dabc:	str	r0, [sp, #4]
   1dac0:	sub	r0, fp, #40	; 0x28
   1dac4:	str	r5, [sp]
   1dac8:	bl	1fba4 <__assert_fail@plt+0xe4a4>
   1dacc:	cmp	r0, #0
   1dad0:	beq	1d81c <__assert_fail@plt+0xc11c>
   1dad4:	b	1f118 <__assert_fail@plt+0xda18>
   1dad8:	ldr	sl, [sp, #48]	; 0x30
   1dadc:	ldr	r0, [sp, #28]
   1dae0:	ldr	r4, [sp, #52]	; 0x34
   1dae4:	ldr	r1, [sl, #20]
   1dae8:	cmp	r0, r1
   1daec:	beq	1dc78 <__assert_fail@plt+0xc578>
   1daf0:	ldr	r0, [sl]
   1daf4:	ldr	r6, [sp, #24]
   1daf8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1dafc:	add	r2, r1, #1
   1db00:	mov	r9, r7
   1db04:	str	r2, [sl, #20]
   1db08:	str	r3, [r0, r1, lsl #2]
   1db0c:	ldrb	r0, [lr, #4]
   1db10:	cmp	r0, #21
   1db14:	bne	1da8c <__assert_fail@plt+0xc38c>
   1db18:	b	1dd0c <__assert_fail@plt+0xc60c>
   1db1c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1db20:	mov	r3, #1
   1db24:	ubfx	r1, r0, #5, #3
   1db28:	ldr	lr, [sp, #44]	; 0x2c
   1db2c:	and	r0, r0, #31
   1db30:	ldr	r2, [r4, r1, lsl #2]
   1db34:	orr	r0, r2, r3, lsl r0
   1db38:	str	r0, [r4, r1, lsl #2]
   1db3c:	ldrb	r0, [lr, #4]
   1db40:	cmp	r0, #21
   1db44:	bne	1da8c <__assert_fail@plt+0xc38c>
   1db48:	b	1dd0c <__assert_fail@plt+0xc60c>
   1db4c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1db50:	ldrb	r7, [r0]
   1db54:	cmp	r4, #3
   1db58:	bne	1d998 <__assert_fail@plt+0xc298>
   1db5c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1db60:	ldrb	sl, [r0]
   1db64:	cmp	r5, #3
   1db68:	cmpne	r5, #0
   1db6c:	beq	1d9b0 <__assert_fail@plt+0xc2b0>
   1db70:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1db74:	cmp	r4, #3
   1db78:	cmpne	r4, #0
   1db7c:	bne	1d9d8 <__assert_fail@plt+0xc2d8>
   1db80:	ldr	r0, [r8, #92]	; 0x5c
   1db84:	cmp	r0, #2
   1db88:	blt	1dbb0 <__assert_fail@plt+0xc4b0>
   1db8c:	mov	r0, sl
   1db90:	bl	1161c <btowc@plt>
   1db94:	ldr	lr, [sp, #44]	; 0x2c
   1db98:	mov	sl, r0
   1db9c:	cmn	r7, #1
   1dba0:	mov	r9, #3
   1dba4:	cmnne	sl, #1
   1dba8:	beq	1f1d8 <__assert_fail@plt+0xdad8>
   1dbac:	b	1dbc0 <__assert_fail@plt+0xc4c0>
   1dbb0:	cmn	r7, #1
   1dbb4:	mov	r9, #3
   1dbb8:	cmnne	sl, #1
   1dbbc:	beq	1f1d8 <__assert_fail@plt+0xdad8>
   1dbc0:	ldr	r0, [sp, #32]
   1dbc4:	cmp	r0, #0
   1dbc8:	beq	1dbd8 <__assert_fail@plt+0xc4d8>
   1dbcc:	cmp	r7, sl
   1dbd0:	mov	r9, #11
   1dbd4:	bhi	1f1d8 <__assert_fail@plt+0xdad8>
   1dbd8:	ldr	r0, [r8, #92]	; 0x5c
   1dbdc:	cmp	r0, #2
   1dbe0:	blt	1dc1c <__assert_fail@plt+0xc51c>
   1dbe4:	ldr	r4, [sp, #48]	; 0x30
   1dbe8:	ldr	r1, [sp, #20]
   1dbec:	mov	r5, #1
   1dbf0:	ldr	r0, [r4, #32]
   1dbf4:	cmp	r1, r0
   1dbf8:	beq	1dcb8 <__assert_fail@plt+0xc5b8>
   1dbfc:	ldmib	r4, {r6, r9}
   1dc00:	str	r7, [r6, r0, lsl #2]
   1dc04:	ldr	r0, [r4, #32]
   1dc08:	add	r1, r0, #1
   1dc0c:	str	r1, [r4, #32]
   1dc10:	ldr	r4, [sp, #52]	; 0x34
   1dc14:	str	sl, [r9, r0, lsl #2]
   1dc18:	b	1dc24 <__assert_fail@plt+0xc524>
   1dc1c:	ldr	r4, [sp, #52]	; 0x34
   1dc20:	mov	r5, #1
   1dc24:	ldr	r6, [sp, #24]
   1dc28:	ldr	r9, [sp, #12]
   1dc2c:	mov	r0, #0
   1dc30:	cmp	r7, r0
   1dc34:	cmpls	r0, sl
   1dc38:	ubfxls	r1, r0, #5, #3
   1dc3c:	andls	r3, r0, #31
   1dc40:	add	r0, r0, #1
   1dc44:	ldrls	r2, [r4, r1, lsl #2]
   1dc48:	orrls	r2, r2, r5, lsl r3
   1dc4c:	strls	r2, [r4, r1, lsl #2]
   1dc50:	cmp	r0, #256	; 0x100
   1dc54:	bne	1dc30 <__assert_fail@plt+0xc530>
   1dc58:	ldr	r0, [sp, #16]
   1dc5c:	ldr	sl, [sp, #48]	; 0x30
   1dc60:	mov	r1, #0
   1dc64:	str	r1, [r0]
   1dc68:	ldrb	r0, [lr, #4]
   1dc6c:	cmp	r0, #21
   1dc70:	bne	1da8c <__assert_fail@plt+0xc38c>
   1dc74:	b	1dd0c <__assert_fail@plt+0xc60c>
   1dc78:	ldr	r1, [sp, #28]
   1dc7c:	mov	r0, #1
   1dc80:	orr	r1, r0, r1, lsl #1
   1dc84:	ldr	r0, [sl]
   1dc88:	str	r1, [sp, #28]
   1dc8c:	lsl	r1, r1, #2
   1dc90:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1dc94:	cmp	r0, #0
   1dc98:	beq	1f5c0 <__assert_fail@plt+0xdec0>
   1dc9c:	ldr	sl, [sp, #48]	; 0x30
   1dca0:	ldr	r6, [sp, #24]
   1dca4:	ldr	lr, [sp, #44]	; 0x2c
   1dca8:	ldr	r4, [sp, #52]	; 0x34
   1dcac:	str	r0, [sl]
   1dcb0:	ldr	r1, [sl, #20]
   1dcb4:	b	1daf8 <__assert_fail@plt+0xc3f8>
   1dcb8:	ldr	r0, [sp, #20]
   1dcbc:	orr	r0, r5, r0, lsl #1
   1dcc0:	lsl	r9, r0, #2
   1dcc4:	str	r0, [sp, #20]
   1dcc8:	ldr	r0, [r4, #4]
   1dccc:	mov	r1, r9
   1dcd0:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1dcd4:	mov	r6, r0
   1dcd8:	ldr	r0, [r4, #8]
   1dcdc:	mov	r1, r9
   1dce0:	bl	2aab4 <__assert_fail@plt+0x193b4>
   1dce4:	mov	r9, r0
   1dce8:	cmp	r6, #0
   1dcec:	cmpne	r9, #0
   1dcf0:	beq	1f5dc <__assert_fail@plt+0xdedc>
   1dcf4:	ldr	r4, [sp, #48]	; 0x30
   1dcf8:	mov	r5, #1
   1dcfc:	stmib	r4, {r6, r9}
   1dd00:	ldr	r0, [r4, #32]
   1dd04:	ldr	lr, [sp, #44]	; 0x2c
   1dd08:	b	1dc00 <__assert_fail@plt+0xc500>
   1dd0c:	ldr	r0, [r6, #40]	; 0x28
   1dd10:	add	r0, r0, r9
   1dd14:	str	r0, [r6, #40]	; 0x28
   1dd18:	ldr	r0, [sp, #36]	; 0x24
   1dd1c:	cmp	r0, #0
   1dd20:	beq	1dd60 <__assert_fail@plt+0xc660>
   1dd24:	vld1.32	{d16-d17}, [r4]
   1dd28:	mov	r0, r4
   1dd2c:	vmvn	q8, q8
   1dd30:	vst1.32	{d16-d17}, [r0]!
   1dd34:	vld1.32	{d16-d17}, [r0]
   1dd38:	vmvn	q8, q8
   1dd3c:	vst1.32	{d16-d17}, [r0]
   1dd40:	ldr	r0, [r8, #92]	; 0x5c
   1dd44:	cmp	r0, #2
   1dd48:	bge	1dd6c <__assert_fail@plt+0xc66c>
   1dd4c:	ldr	r1, [sl, #20]
   1dd50:	ldr	r6, [sp, #40]	; 0x28
   1dd54:	cmp	r1, #0
   1dd58:	bne	1de18 <__assert_fail@plt+0xc718>
   1dd5c:	b	1ddf4 <__assert_fail@plt+0xc6f4>
   1dd60:	ldr	r0, [r8, #92]	; 0x5c
   1dd64:	cmp	r0, #2
   1dd68:	blt	1dd4c <__assert_fail@plt+0xc64c>
   1dd6c:	ldm	r4, {r1, r2, r3, r7}
   1dd70:	ldr	r6, [r8, #60]	; 0x3c
   1dd74:	ldr	r5, [r6]
   1dd78:	and	r1, r1, r5
   1dd7c:	str	r1, [r4]
   1dd80:	ldr	r1, [r6, #4]
   1dd84:	and	r1, r2, r1
   1dd88:	str	r1, [r4, #4]
   1dd8c:	ldr	r1, [r6, #8]
   1dd90:	and	r1, r3, r1
   1dd94:	str	r1, [r4, #8]
   1dd98:	ldr	r1, [r6, #12]
   1dd9c:	and	r1, r7, r1
   1dda0:	str	r1, [r4, #12]
   1dda4:	ldr	r1, [r4, #16]
   1dda8:	ldr	r2, [r6, #16]
   1ddac:	and	r1, r1, r2
   1ddb0:	str	r1, [r4, #16]
   1ddb4:	ldr	r1, [r6, #20]
   1ddb8:	ldr	r2, [r4, #20]
   1ddbc:	and	r1, r2, r1
   1ddc0:	str	r1, [r4, #20]
   1ddc4:	ldr	r1, [r6, #24]
   1ddc8:	ldr	r2, [r4, #24]
   1ddcc:	and	r1, r2, r1
   1ddd0:	str	r1, [r4, #24]
   1ddd4:	ldr	r1, [r6, #28]
   1ddd8:	ldr	r2, [r4, #28]
   1dddc:	and	r1, r2, r1
   1dde0:	str	r1, [r4, #28]
   1dde4:	ldr	r1, [sl, #20]
   1dde8:	ldr	r6, [sp, #40]	; 0x28
   1ddec:	cmp	r1, #0
   1ddf0:	bne	1de18 <__assert_fail@plt+0xc718>
   1ddf4:	ldr	r1, [sl, #24]
   1ddf8:	cmp	r1, #0
   1ddfc:	bne	1de18 <__assert_fail@plt+0xc718>
   1de00:	ldr	r1, [sl, #28]
   1de04:	cmp	r1, #0
   1de08:	bne	1de18 <__assert_fail@plt+0xc718>
   1de0c:	ldr	r1, [sl, #32]
   1de10:	cmp	r1, #0
   1de14:	beq	1f050 <__assert_fail@plt+0xd950>
   1de18:	ldrb	r0, [r8, #88]	; 0x58
   1de1c:	orr	r0, r0, #2
   1de20:	strb	r0, [r8, #88]	; 0x58
   1de24:	ldr	r1, [r8, #64]	; 0x40
   1de28:	cmp	r1, #31
   1de2c:	beq	1f23c <__assert_fail@plt+0xdb3c>
   1de30:	ldr	r0, [r8, #56]	; 0x38
   1de34:	add	r2, r1, #1
   1de38:	add	r0, r0, r1, lsl #5
   1de3c:	mov	r1, #6
   1de40:	vmov.i32	q8, #0	; 0x00000000
   1de44:	str	r2, [r8, #64]	; 0x40
   1de48:	mov	r2, #0
   1de4c:	add	r9, r0, #4
   1de50:	str	r2, [r0, #20]
   1de54:	str	sl, [r0, #24]
   1de58:	str	r1, [r0, #28]
   1de5c:	mov	r0, #28
   1de60:	mov	r1, r9
   1de64:	vst1.32	{d16-d17}, [r1], r0
   1de68:	mvn	r0, #0
   1de6c:	str	r0, [r1]
   1de70:	ldr	r0, [r4]
   1de74:	cmp	r0, #0
   1de78:	bne	1ded0 <__assert_fail@plt+0xc7d0>
   1de7c:	ldr	r0, [r4, #4]
   1de80:	cmp	r0, #0
   1de84:	bne	1ded0 <__assert_fail@plt+0xc7d0>
   1de88:	ldr	r0, [r4, #8]
   1de8c:	cmp	r0, #0
   1de90:	bne	1ded0 <__assert_fail@plt+0xc7d0>
   1de94:	ldr	r0, [r4, #12]
   1de98:	cmp	r0, #0
   1de9c:	bne	1ded0 <__assert_fail@plt+0xc7d0>
   1dea0:	ldr	r0, [r4, #16]
   1dea4:	cmp	r0, #0
   1dea8:	bne	1ded0 <__assert_fail@plt+0xc7d0>
   1deac:	ldr	r0, [r4, #20]
   1deb0:	cmp	r0, #0
   1deb4:	bne	1ded0 <__assert_fail@plt+0xc7d0>
   1deb8:	ldr	r0, [r4, #24]
   1debc:	cmp	r0, #0
   1dec0:	bne	1ded0 <__assert_fail@plt+0xc7d0>
   1dec4:	ldr	r0, [r4, #28]
   1dec8:	cmp	r0, #0
   1decc:	beq	1f2f0 <__assert_fail@plt+0xdbf0>
   1ded0:	ldr	r1, [r8, #64]	; 0x40
   1ded4:	cmp	r1, #31
   1ded8:	beq	1f268 <__assert_fail@plt+0xdb68>
   1dedc:	ldr	r0, [r8, #56]	; 0x38
   1dee0:	add	r2, r1, #1
   1dee4:	add	r0, r0, r1, lsl #5
   1dee8:	mov	r1, #3
   1deec:	vmov.i32	q8, #0	; 0x00000000
   1def0:	str	r2, [r8, #64]	; 0x40
   1def4:	mov	r2, #0
   1def8:	add	r5, r0, #4
   1defc:	str	r2, [r0, #20]
   1df00:	str	r4, [r0, #24]
   1df04:	str	r1, [r0, #28]
   1df08:	mov	r0, #28
   1df0c:	mov	r1, r5
   1df10:	vst1.32	{d16-d17}, [r1], r0
   1df14:	mvn	r0, #0
   1df18:	str	r0, [r1]
   1df1c:	ldr	r1, [r8, #64]	; 0x40
   1df20:	cmp	r1, #31
   1df24:	beq	1f294 <__assert_fail@plt+0xdb94>
   1df28:	ldr	r0, [r8, #56]	; 0x38
   1df2c:	add	r2, r1, #1
   1df30:	add	r7, r0, r1, lsl #5
   1df34:	mov	r0, #0
   1df38:	mov	r1, #10
   1df3c:	str	r2, [r8, #64]	; 0x40
   1df40:	str	r0, [r7, #4]!
   1df44:	mvn	r2, #0
   1df48:	add	r3, r7, #20
   1df4c:	stmib	r7, {r5, r9}
   1df50:	str	r0, [r7, #12]
   1df54:	str	r0, [r7, #16]
   1df58:	stm	r3, {r0, r1, r2}
   1df5c:	str	r7, [r5]
   1df60:	str	r7, [r9]
   1df64:	b	1e180 <__assert_fail@plt+0xca80>
   1df68:	mov	r0, #5
   1df6c:	mov	r4, r8
   1df70:	str	r0, [lr]
   1df74:	ldr	r1, [r4, #64]!	; 0x40
   1df78:	cmp	r1, #31
   1df7c:	beq	1f36c <__assert_fail@plt+0xdc6c>
   1df80:	ldr	r0, [r8, #56]	; 0x38
   1df84:	add	r2, r1, #1
   1df88:	add	r5, r0, r1, lsl #5
   1df8c:	mov	r0, #0
   1df90:	str	r2, [r4]
   1df94:	str	r0, [r5, #4]!
   1df98:	str	r0, [r5, #4]
   1df9c:	str	r0, [r5, #8]
   1dfa0:	ldm	lr, {r1, r2}
   1dfa4:	str	r0, [r5, #12]
   1dfa8:	str	r0, [r5, #16]
   1dfac:	mvn	r0, #0
   1dfb0:	str	r0, [r5, #28]
   1dfb4:	bic	r0, r2, #786432	; 0xc0000
   1dfb8:	str	r1, [r5, #20]
   1dfbc:	str	r0, [r5, #24]
   1dfc0:	mov	r0, #10
   1dfc4:	str	r0, [lr]
   1dfc8:	mov	r9, r6
   1dfcc:	ldr	r1, [r4]
   1dfd0:	cmp	r1, #31
   1dfd4:	beq	1f304 <__assert_fail@plt+0xdc04>
   1dfd8:	ldr	r0, [r8, #56]	; 0x38
   1dfdc:	add	r2, r1, #1
   1dfe0:	add	r6, r0, r1, lsl #5
   1dfe4:	mov	r0, #0
   1dfe8:	str	r2, [r4]
   1dfec:	str	r0, [r6, #4]!
   1dff0:	str	r0, [r6, #4]
   1dff4:	str	r0, [r6, #8]
   1dff8:	ldm	lr, {r1, r2}
   1dffc:	str	r0, [r6, #12]
   1e000:	str	r0, [r6, #16]
   1e004:	mvn	r0, #0
   1e008:	str	r0, [r6, #28]
   1e00c:	bic	r0, r2, #786432	; 0xc0000
   1e010:	str	r1, [r6, #20]
   1e014:	str	r0, [r6, #24]
   1e018:	ldr	r1, [r4]
   1e01c:	cmp	r1, #31
   1e020:	beq	1f49c <__assert_fail@plt+0xdd9c>
   1e024:	ldr	r0, [r8, #56]	; 0x38
   1e028:	add	r2, r1, #1
   1e02c:	cmp	r5, #0
   1e030:	str	r2, [r4]
   1e034:	add	r4, r0, r1, lsl #5
   1e038:	mov	r0, #0
   1e03c:	mov	r1, #10
   1e040:	mvn	r2, #0
   1e044:	str	r0, [r4, #4]!
   1e048:	add	r3, r4, #20
   1e04c:	stmib	r4, {r5, r6}
   1e050:	str	r0, [r4, #12]
   1e054:	str	r0, [r4, #16]
   1e058:	stm	r3, {r0, r1, r2}
   1e05c:	strne	r4, [r5]
   1e060:	cmp	r6, #0
   1e064:	strne	r4, [r6]
   1e068:	cmpne	r5, #0
   1e06c:	bne	1e0d8 <__assert_fail@plt+0xc9d8>
   1e070:	mov	r0, #12
   1e074:	ldr	r1, [sp, #16]
   1e078:	str	r0, [r1]
   1e07c:	mov	r0, sl
   1e080:	sub	sp, fp, #28
   1e084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e088:	ldr	r1, [r8, #64]	; 0x40
   1e08c:	mov	r9, r6
   1e090:	cmp	r1, #31
   1e094:	beq	1f3a0 <__assert_fail@plt+0xdca0>
   1e098:	ldr	r0, [r8, #56]	; 0x38
   1e09c:	add	r2, r1, #1
   1e0a0:	add	r4, r0, r1, lsl #5
   1e0a4:	mov	r0, #0
   1e0a8:	str	r2, [r8, #64]	; 0x40
   1e0ac:	str	r0, [r4, #4]!
   1e0b0:	str	r0, [r4, #4]
   1e0b4:	str	r0, [r4, #8]
   1e0b8:	ldm	lr, {r1, r2}
   1e0bc:	str	r0, [r4, #12]
   1e0c0:	str	r0, [r4, #16]
   1e0c4:	mvn	r0, #0
   1e0c8:	str	r0, [r4, #28]
   1e0cc:	bic	r0, r2, #786432	; 0xc0000
   1e0d0:	str	r1, [r4, #20]
   1e0d4:	str	r0, [r4, #24]
   1e0d8:	mov	r0, lr
   1e0dc:	mov	r1, r7
   1e0e0:	mov	r2, r9
   1e0e4:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1e0e8:	ldr	r1, [r7, #40]	; 0x28
   1e0ec:	mov	sl, r4
   1e0f0:	add	r0, r1, r0
   1e0f4:	str	r0, [r7, #40]	; 0x28
   1e0f8:	mov	r0, sl
   1e0fc:	sub	sp, fp, #28
   1e100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e104:	ldrb	r0, [r6, #4]
   1e108:	cmp	r0, #9
   1e10c:	bne	1f4c8 <__assert_fail@plt+0xddc8>
   1e110:	mov	lr, r6
   1e114:	cmp	r4, #8
   1e118:	ldrls	r0, [r8, #84]	; 0x54
   1e11c:	movls	r1, #1
   1e120:	orrls	r0, r0, r1, lsl r4
   1e124:	strls	r0, [r8, #84]	; 0x54
   1e128:	ldr	r1, [r8, #64]	; 0x40
   1e12c:	cmp	r1, #31
   1e130:	beq	1f2c0 <__assert_fail@plt+0xdbc0>
   1e134:	ldr	r0, [r8, #56]	; 0x38
   1e138:	mov	r6, sl
   1e13c:	add	r0, r0, r1, lsl #5
   1e140:	add	r2, r1, #1
   1e144:	mov	r1, #0
   1e148:	mvn	r3, #0
   1e14c:	cmp	r9, #0
   1e150:	mov	r7, r0
   1e154:	str	r2, [r8, #64]	; 0x40
   1e158:	mov	r2, #17
   1e15c:	str	r1, [r7, #4]!
   1e160:	add	ip, r7, #20
   1e164:	str	r9, [r7, #4]
   1e168:	str	r1, [r7, #8]
   1e16c:	str	r1, [r7, #12]
   1e170:	str	r1, [r7, #16]
   1e174:	stm	ip, {r1, r2, r3}
   1e178:	strne	r7, [r9]
   1e17c:	str	r4, [r0, #24]
   1e180:	mov	r4, r6
   1e184:	ldr	r6, [sp, #24]
   1e188:	mov	r0, lr
   1e18c:	mov	r2, r4
   1e190:	mov	r1, r6
   1e194:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1e198:	ldr	r1, [r6, #40]	; 0x28
   1e19c:	ldr	ip, [sp, #44]	; 0x2c
   1e1a0:	add	r0, r1, r0
   1e1a4:	str	r0, [r6, #40]	; 0x28
   1e1a8:	add	r0, r8, #56	; 0x38
   1e1ac:	add	r8, r8, #64	; 0x40
   1e1b0:	str	r0, [sp, #20]
   1e1b4:	and	r0, r4, #2097152	; 0x200000
   1e1b8:	str	r0, [sp, #12]
   1e1bc:	str	r4, [sp, #40]	; 0x28
   1e1c0:	and	r0, r4, #16777216	; 0x1000000
   1e1c4:	mov	r4, #0
   1e1c8:	str	r0, [sp, #28]
   1e1cc:	b	1eeac <__assert_fail@plt+0xd7ac>
   1e1d0:	movw	r2, #2048	; 0x800
   1e1d4:	mov	r1, #1
   1e1d8:	movt	r2, #140	; 0x8c
   1e1dc:	tst	r2, r1, lsl r0
   1e1e0:	beq	1ef74 <__assert_fail@plt+0xd874>
   1e1e4:	cmp	r0, #23
   1e1e8:	str	sl, [sp, #36]	; 0x24
   1e1ec:	bne	1e200 <__assert_fail@plt+0xcb00>
   1e1f0:	ldm	ip, {r5, sl}
   1e1f4:	ldr	r7, [r6, #40]	; 0x28
   1e1f8:	mvn	r2, #0
   1e1fc:	b	1e234 <__assert_fail@plt+0xcb34>
   1e200:	cmp	r0, #19
   1e204:	sub	r0, r0, #18
   1e208:	mvn	r5, #0
   1e20c:	clz	r0, r0
   1e210:	movweq	r5, #1
   1e214:	lsr	r9, r0, #5
   1e218:	b	1e448 <__assert_fail@plt+0xcd48>
   1e21c:	add	r0, r9, r9, lsl #2
   1e220:	add	r0, r1, r0, lsl #1
   1e224:	movw	r1, #32816	; 0x8030
   1e228:	sub	r2, r0, #48	; 0x30
   1e22c:	cmp	r0, r1
   1e230:	movwgt	r2, #32768	; 0x8000
   1e234:	mov	r9, r2
   1e238:	ldr	r2, [sp, #40]	; 0x28
   1e23c:	mov	r0, ip
   1e240:	mov	r1, r6
   1e244:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1e248:	ldr	r1, [r6, #40]	; 0x28
   1e24c:	ldr	ip, [sp, #44]	; 0x2c
   1e250:	add	r0, r1, r0
   1e254:	str	r0, [r6, #40]	; 0x28
   1e258:	ldrb	r0, [ip, #4]
   1e25c:	ldrb	r1, [ip]
   1e260:	cmp	r0, #24
   1e264:	beq	1e2ac <__assert_fail@plt+0xcbac>
   1e268:	cmp	r0, #2
   1e26c:	beq	1e31c <__assert_fail@plt+0xcc1c>
   1e270:	cmp	r1, #44	; 0x2c
   1e274:	beq	1e2ac <__assert_fail@plt+0xcbac>
   1e278:	mvn	r2, #1
   1e27c:	cmp	r1, #48	; 0x30
   1e280:	bcc	1e234 <__assert_fail@plt+0xcb34>
   1e284:	cmp	r0, #1
   1e288:	bne	1e234 <__assert_fail@plt+0xcb34>
   1e28c:	cmn	r9, #2
   1e290:	beq	1e234 <__assert_fail@plt+0xcb34>
   1e294:	cmp	r1, #57	; 0x39
   1e298:	bhi	1e234 <__assert_fail@plt+0xcb34>
   1e29c:	cmn	r9, #1
   1e2a0:	bne	1e21c <__assert_fail@plt+0xcb1c>
   1e2a4:	sub	r2, r1, #48	; 0x30
   1e2a8:	b	1e234 <__assert_fail@plt+0xcb34>
   1e2ac:	cmn	r9, #1
   1e2b0:	bne	1e2fc <__assert_fail@plt+0xcbfc>
   1e2b4:	cmp	r1, #44	; 0x2c
   1e2b8:	moveq	r9, #0
   1e2bc:	cmpeq	r0, #1
   1e2c0:	beq	1e354 <__assert_fail@plt+0xcc54>
   1e2c4:	ldr	r0, [sp, #16]
   1e2c8:	mov	r1, #10
   1e2cc:	str	r1, [r0]
   1e2d0:	ldr	sl, [sp, #36]	; 0x24
   1e2d4:	mov	r7, #0
   1e2d8:	clz	r0, r7
   1e2dc:	cmp	r7, #0
   1e2e0:	lsr	r0, r0, #5
   1e2e4:	bne	1eea0 <__assert_fail@plt+0xd7a0>
   1e2e8:	ldr	r1, [sp, #16]
   1e2ec:	ldr	r1, [r1]
   1e2f0:	cmp	r1, #0
   1e2f4:	beq	1eea0 <__assert_fail@plt+0xd7a0>
   1e2f8:	b	1ef8c <__assert_fail@plt+0xd88c>
   1e2fc:	cmn	r9, #2
   1e300:	mov	r2, r9
   1e304:	beq	1e31c <__assert_fail@plt+0xcc1c>
   1e308:	cmp	r0, #24
   1e30c:	beq	1e360 <__assert_fail@plt+0xcc60>
   1e310:	cmp	r0, #1
   1e314:	cmpeq	r1, #44	; 0x2c
   1e318:	beq	1e354 <__assert_fail@plt+0xcc54>
   1e31c:	ldr	r1, [sp, #12]
   1e320:	cmp	r1, #0
   1e324:	beq	1e9fc <__assert_fail@plt+0xd2fc>
   1e328:	mov	r0, #1
   1e32c:	str	r7, [r6, #40]	; 0x28
   1e330:	bfi	sl, r0, #0, #8
   1e334:	stm	ip, {r5, sl}
   1e338:	ldr	sl, [sp, #36]	; 0x24
   1e33c:	mov	r7, sl
   1e340:	clz	r0, r7
   1e344:	cmp	r7, #0
   1e348:	lsr	r0, r0, #5
   1e34c:	beq	1e2e8 <__assert_fail@plt+0xcbe8>
   1e350:	b	1eea0 <__assert_fail@plt+0xd7a0>
   1e354:	mvn	r2, #0
   1e358:	str	sl, [sp, #52]	; 0x34
   1e35c:	b	1e38c <__assert_fail@plt+0xcc8c>
   1e360:	ldr	sl, [sp, #36]	; 0x24
   1e364:	mov	r5, r9
   1e368:	cmp	r0, #24
   1e36c:	beq	1e434 <__assert_fail@plt+0xcd34>
   1e370:	b	1ea44 <__assert_fail@plt+0xd344>
   1e374:	add	r0, sl, sl, lsl #2
   1e378:	add	r0, r1, r0, lsl #1
   1e37c:	movw	r1, #32816	; 0x8030
   1e380:	sub	r2, r0, #48	; 0x30
   1e384:	cmp	r0, r1
   1e388:	movwgt	r2, #32768	; 0x8000
   1e38c:	mov	sl, r2
   1e390:	ldr	r2, [sp, #40]	; 0x28
   1e394:	mov	r0, ip
   1e398:	mov	r1, r6
   1e39c:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1e3a0:	ldr	r1, [r6, #40]	; 0x28
   1e3a4:	ldr	ip, [sp, #44]	; 0x2c
   1e3a8:	add	r0, r1, r0
   1e3ac:	str	r0, [r6, #40]	; 0x28
   1e3b0:	ldrb	r0, [ip, #4]
   1e3b4:	cmp	r0, #24
   1e3b8:	beq	1e404 <__assert_fail@plt+0xcd04>
   1e3bc:	cmp	r0, #2
   1e3c0:	beq	1e9ec <__assert_fail@plt+0xd2ec>
   1e3c4:	ldrb	r1, [ip]
   1e3c8:	cmp	r1, #44	; 0x2c
   1e3cc:	beq	1e404 <__assert_fail@plt+0xcd04>
   1e3d0:	mvn	r2, #1
   1e3d4:	cmp	r1, #48	; 0x30
   1e3d8:	bcc	1e38c <__assert_fail@plt+0xcc8c>
   1e3dc:	cmp	r0, #1
   1e3e0:	bne	1e38c <__assert_fail@plt+0xcc8c>
   1e3e4:	cmn	sl, #2
   1e3e8:	beq	1e38c <__assert_fail@plt+0xcc8c>
   1e3ec:	cmp	r1, #57	; 0x39
   1e3f0:	bhi	1e38c <__assert_fail@plt+0xcc8c>
   1e3f4:	cmn	sl, #1
   1e3f8:	bne	1e374 <__assert_fail@plt+0xcc74>
   1e3fc:	sub	r2, r1, #48	; 0x30
   1e400:	b	1e38c <__assert_fail@plt+0xcc8c>
   1e404:	cmn	sl, #2
   1e408:	beq	1e9ec <__assert_fail@plt+0xd2ec>
   1e40c:	cmn	sl, #1
   1e410:	mov	r5, sl
   1e414:	beq	1e428 <__assert_fail@plt+0xcd28>
   1e418:	ldr	sl, [sp, #36]	; 0x24
   1e41c:	cmp	r9, r5
   1e420:	ble	1e42c <__assert_fail@plt+0xcd2c>
   1e424:	b	1ea44 <__assert_fail@plt+0xd344>
   1e428:	ldr	sl, [sp, #36]	; 0x24
   1e42c:	cmp	r0, #24
   1e430:	bne	1ea44 <__assert_fail@plt+0xd344>
   1e434:	cmn	r5, #1
   1e438:	mov	r0, r5
   1e43c:	moveq	r0, r9
   1e440:	cmp	r0, #32768	; 0x8000
   1e444:	bge	1ea50 <__assert_fail@plt+0xd350>
   1e448:	ldr	r2, [sp, #40]	; 0x28
   1e44c:	mov	r0, ip
   1e450:	mov	r1, r6
   1e454:	bl	1c3a8 <__assert_fail@plt+0xaca8>
   1e458:	ldr	r1, [r6, #40]	; 0x28
   1e45c:	mov	r7, #0
   1e460:	cmp	sl, #0
   1e464:	add	r0, r1, r0
   1e468:	str	r0, [r6, #40]	; 0x28
   1e46c:	beq	1e8d8 <__assert_fail@plt+0xd1d8>
   1e470:	ldr	lr, [sp, #20]
   1e474:	orrs	r0, r5, r9
   1e478:	beq	1e8f0 <__assert_fail@plt+0xd1f0>
   1e47c:	mov	r0, #0
   1e480:	cmp	r9, #1
   1e484:	mov	r7, sl
   1e488:	str	r0, [sp, #32]
   1e48c:	ldr	ip, [sp, #44]	; 0x2c
   1e490:	str	r5, [sp, #48]	; 0x30
   1e494:	bge	1e998 <__assert_fail@plt+0xd298>
   1e498:	ldrb	r0, [r7, #24]
   1e49c:	cmp	r0, #17
   1e4a0:	bne	1e510 <__assert_fail@plt+0xce10>
   1e4a4:	ldr	r0, [r7, #20]
   1e4a8:	mov	r2, r7
   1e4ac:	mov	r1, r2
   1e4b0:	ldr	r2, [r2, #4]
   1e4b4:	cmp	r2, #0
   1e4b8:	bne	1e4ac <__assert_fail@plt+0xcdac>
   1e4bc:	ldr	r2, [r1, #8]
   1e4c0:	cmp	r2, #0
   1e4c4:	bne	1e4ac <__assert_fail@plt+0xcdac>
   1e4c8:	ldr	r2, [r1, #24]
   1e4cc:	uxtb	r3, r2
   1e4d0:	cmp	r3, #17
   1e4d4:	ldreq	r3, [r1, #20]
   1e4d8:	cmpeq	r3, r0
   1e4dc:	orreq	r2, r2, #524288	; 0x80000
   1e4e0:	streq	r2, [r1, #24]
   1e4e4:	ldr	r3, [r1]
   1e4e8:	cmp	r3, #0
   1e4ec:	beq	1e510 <__assert_fail@plt+0xce10>
   1e4f0:	ldr	r2, [r3, #8]
   1e4f4:	cmp	r2, r1
   1e4f8:	mov	r1, r3
   1e4fc:	beq	1e4c8 <__assert_fail@plt+0xcdc8>
   1e500:	cmp	r2, #0
   1e504:	mov	r1, r3
   1e508:	beq	1e4c8 <__assert_fail@plt+0xcdc8>
   1e50c:	b	1e4ac <__assert_fail@plt+0xcdac>
   1e510:	ldr	r1, [r8]
   1e514:	cmn	r5, #1
   1e518:	mov	r6, #10
   1e51c:	movweq	r6, #11
   1e520:	cmp	r1, #31
   1e524:	beq	1e9b8 <__assert_fail@plt+0xd2b8>
   1e528:	ldr	r0, [lr]
   1e52c:	add	r2, r1, #1
   1e530:	add	sl, r0, r1, lsl #5
   1e534:	mvn	r0, #0
   1e538:	str	r2, [r8]
   1e53c:	str	r4, [sl, #4]!
   1e540:	str	r7, [sl, #4]
   1e544:	str	r4, [sl, #8]
   1e548:	str	r4, [sl, #12]
   1e54c:	str	r4, [sl, #16]
   1e550:	str	r4, [sl, #20]
   1e554:	str	r6, [sl, #24]
   1e558:	str	r0, [sl, #28]
   1e55c:	add	r0, r9, #2
   1e560:	str	sl, [r7]
   1e564:	cmp	r0, r5
   1e568:	bgt	1e844 <__assert_fail@plt+0xd144>
   1e56c:	mov	r6, sl
   1e570:	ldr	r1, [r8]
   1e574:	str	r0, [sp, #52]	; 0x34
   1e578:	cmp	r1, #31
   1e57c:	beq	1e788 <__assert_fail@plt+0xd088>
   1e580:	ldr	r0, [lr]
   1e584:	add	r3, r1, #1
   1e588:	add	r9, r0, r1, lsl #5
   1e58c:	add	r2, r7, #20
   1e590:	sub	r5, fp, #80	; 0x50
   1e594:	str	r3, [r8]
   1e598:	str	r4, [r9, #4]!
   1e59c:	str	r4, [r9, #4]
   1e5a0:	str	r4, [r9, #8]
   1e5a4:	ldm	r2, {r0, r1}
   1e5a8:	mvn	r2, #0
   1e5ac:	str	r4, [r9, #12]
   1e5b0:	str	r4, [r9, #16]
   1e5b4:	str	r2, [r9, #28]
   1e5b8:	str	r0, [r9, #20]
   1e5bc:	bic	r0, r1, #786432	; 0xc0000
   1e5c0:	str	r0, [r9, #24]
   1e5c4:	mov	r0, r9
   1e5c8:	str	r9, [fp, #-80]	; 0xffffffb0
   1e5cc:	b	1e610 <__assert_fail@plt+0xcf10>
   1e5d0:	add	r3, r1, #1
   1e5d4:	add	r0, r0, r1, lsl #5
   1e5d8:	add	r2, r7, #20
   1e5dc:	str	r3, [r8]
   1e5e0:	str	r4, [r0, #4]!
   1e5e4:	mvn	r3, #0
   1e5e8:	str	r4, [r0, #4]
   1e5ec:	str	r4, [r0, #8]
   1e5f0:	ldm	r2, {r1, r2}
   1e5f4:	str	r4, [r0, #12]
   1e5f8:	str	r4, [r0, #16]
   1e5fc:	str	r3, [r0, #28]
   1e600:	str	r1, [r0, #20]
   1e604:	bic	r1, r2, #786432	; 0xc0000
   1e608:	str	r1, [r0, #24]
   1e60c:	str	r0, [r5]
   1e610:	str	sl, [r0]
   1e614:	ldr	r0, [r5]
   1e618:	ldr	r1, [r0, #24]
   1e61c:	orr	r1, r1, #262144	; 0x40000
   1e620:	str	r1, [r0, #24]
   1e624:	ldr	r0, [r7, #4]
   1e628:	ldr	sl, [r5]
   1e62c:	cmp	r0, #0
   1e630:	beq	1e650 <__assert_fail@plt+0xcf50>
   1e634:	add	r5, sl, #4
   1e638:	mov	r7, r0
   1e63c:	ldr	r1, [r8]
   1e640:	cmp	r1, #31
   1e644:	beq	1e690 <__assert_fail@plt+0xcf90>
   1e648:	ldr	r0, [lr]
   1e64c:	b	1e5d0 <__assert_fail@plt+0xced0>
   1e650:	mov	r1, #0
   1e654:	mov	r0, r7
   1e658:	ldr	r7, [r7, #8]
   1e65c:	cmp	r7, r1
   1e660:	cmpne	r7, #0
   1e664:	bne	1e680 <__assert_fail@plt+0xcf80>
   1e668:	ldr	r7, [r0]
   1e66c:	ldr	sl, [sl]
   1e670:	mov	r1, r0
   1e674:	cmp	r7, #0
   1e678:	bne	1e654 <__assert_fail@plt+0xcf54>
   1e67c:	b	1e6c0 <__assert_fail@plt+0xcfc0>
   1e680:	add	r5, sl, #8
   1e684:	ldr	r1, [r8]
   1e688:	cmp	r1, #31
   1e68c:	bne	1e648 <__assert_fail@plt+0xcf48>
   1e690:	mov	r0, #996	; 0x3e4
   1e694:	bl	2aa84 <__assert_fail@plt+0x19384>
   1e698:	cmp	r0, #0
   1e69c:	beq	1e7f4 <__assert_fail@plt+0xd0f4>
   1e6a0:	ldr	lr, [sp, #20]
   1e6a4:	ldr	ip, [sp, #44]	; 0x2c
   1e6a8:	ldr	r1, [lr]
   1e6ac:	str	r1, [r0]
   1e6b0:	mov	r1, #0
   1e6b4:	str	r0, [lr]
   1e6b8:	str	r1, [r8]
   1e6bc:	b	1e5d0 <__assert_fail@plt+0xced0>
   1e6c0:	mov	r7, r9
   1e6c4:	ldr	r1, [r8]
   1e6c8:	cmp	r1, #31
   1e6cc:	beq	1e810 <__assert_fail@plt+0xd110>
   1e6d0:	ldr	r0, [lr]
   1e6d4:	add	r2, r1, #1
   1e6d8:	add	r5, r0, r1, lsl #5
   1e6dc:	mov	r0, #16
   1e6e0:	cmp	r7, #0
   1e6e4:	str	r2, [r8]
   1e6e8:	str	r4, [r5, #4]!
   1e6ec:	stmib	r5, {r6, r7}
   1e6f0:	str	r4, [r5, #12]
   1e6f4:	str	r4, [r5, #16]
   1e6f8:	str	r4, [r5, #20]
   1e6fc:	str	r0, [r5, #24]
   1e700:	mvn	r0, #0
   1e704:	str	r0, [r5, #28]
   1e708:	str	r5, [r6]
   1e70c:	beq	1ee78 <__assert_fail@plt+0xd778>
   1e710:	str	r5, [r7]
   1e714:	ldr	r1, [r8]
   1e718:	cmp	r1, #31
   1e71c:	beq	1e7b8 <__assert_fail@plt+0xd0b8>
   1e720:	ldr	r0, [lr]
   1e724:	add	r2, r1, #1
   1e728:	add	r6, r0, r1, lsl #5
   1e72c:	mov	r0, #10
   1e730:	ldr	r1, [sp, #52]	; 0x34
   1e734:	str	r2, [r8]
   1e738:	str	r4, [r6, #4]!
   1e73c:	str	r5, [r6, #4]
   1e740:	str	r4, [r6, #8]
   1e744:	str	r4, [r6, #12]
   1e748:	str	r4, [r6, #16]
   1e74c:	str	r4, [r6, #20]
   1e750:	str	r0, [r6, #24]
   1e754:	mvn	r0, #0
   1e758:	str	r0, [r6, #28]
   1e75c:	ldr	r0, [sp, #48]	; 0x30
   1e760:	str	r6, [r5]
   1e764:	cmp	r1, r0
   1e768:	bge	1e840 <__assert_fail@plt+0xd140>
   1e76c:	ldr	sl, [r7]
   1e770:	mov	r0, r1
   1e774:	add	r0, r1, #1
   1e778:	ldr	r1, [r8]
   1e77c:	str	r0, [sp, #52]	; 0x34
   1e780:	cmp	r1, #31
   1e784:	bne	1e580 <__assert_fail@plt+0xce80>
   1e788:	mov	r0, #996	; 0x3e4
   1e78c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1e790:	cmp	r0, #0
   1e794:	beq	1e7e8 <__assert_fail@plt+0xd0e8>
   1e798:	ldr	lr, [sp, #20]
   1e79c:	ldr	ip, [sp, #44]	; 0x2c
   1e7a0:	ldr	r1, [lr]
   1e7a4:	str	r1, [r0]
   1e7a8:	mov	r1, #0
   1e7ac:	str	r0, [lr]
   1e7b0:	str	r1, [r8]
   1e7b4:	b	1e584 <__assert_fail@plt+0xce84>
   1e7b8:	mov	r0, #996	; 0x3e4
   1e7bc:	bl	2aa84 <__assert_fail@plt+0x19384>
   1e7c0:	ldr	lr, [sp, #20]
   1e7c4:	ldr	ip, [sp, #44]	; 0x2c
   1e7c8:	cmp	r0, #0
   1e7cc:	beq	1ee78 <__assert_fail@plt+0xd778>
   1e7d0:	ldr	r1, [lr]
   1e7d4:	str	r1, [r0]
   1e7d8:	mov	r1, #0
   1e7dc:	str	r0, [lr]
   1e7e0:	str	r1, [r8]
   1e7e4:	b	1e724 <__assert_fail@plt+0xd024>
   1e7e8:	mov	r7, #0
   1e7ec:	str	r7, [fp, #-80]	; 0xffffffb0
   1e7f0:	b	1e7fc <__assert_fail@plt+0xd0fc>
   1e7f4:	mov	r7, #0
   1e7f8:	str	r7, [r5]
   1e7fc:	ldr	ip, [sp, #44]	; 0x2c
   1e800:	ldr	lr, [sp, #20]
   1e804:	ldr	r1, [r8]
   1e808:	cmp	r1, #31
   1e80c:	bne	1e6d0 <__assert_fail@plt+0xcfd0>
   1e810:	mov	r0, #996	; 0x3e4
   1e814:	bl	2aa84 <__assert_fail@plt+0x19384>
   1e818:	ldr	lr, [sp, #20]
   1e81c:	ldr	ip, [sp, #44]	; 0x2c
   1e820:	cmp	r0, #0
   1e824:	beq	1ee78 <__assert_fail@plt+0xd778>
   1e828:	ldr	r1, [lr]
   1e82c:	str	r1, [r0]
   1e830:	mov	r1, #0
   1e834:	str	r0, [lr]
   1e838:	str	r1, [r8]
   1e83c:	b	1e6d4 <__assert_fail@plt+0xcfd4>
   1e840:	mov	sl, r6
   1e844:	ldr	r5, [sp, #32]
   1e848:	ldr	r6, [sp, #24]
   1e84c:	cmp	r5, #0
   1e850:	beq	1e8c0 <__assert_fail@plt+0xd1c0>
   1e854:	ldr	r1, [r8]
   1e858:	cmp	r1, #31
   1e85c:	beq	1ea14 <__assert_fail@plt+0xd314>
   1e860:	ldr	r0, [lr]
   1e864:	add	r2, r1, #1
   1e868:	add	r7, r0, r1, lsl #5
   1e86c:	mov	r0, #0
   1e870:	mov	r1, #16
   1e874:	str	r2, [r8]
   1e878:	str	r0, [r7, #4]!
   1e87c:	stmib	r7, {r5, sl}
   1e880:	str	r0, [r7, #12]
   1e884:	str	r0, [r7, #16]
   1e888:	str	r0, [r7, #20]
   1e88c:	str	r1, [r7, #24]
   1e890:	mvn	r1, #0
   1e894:	str	r1, [r7, #28]
   1e898:	str	r7, [r5]
   1e89c:	str	r7, [sl]
   1e8a0:	ldr	r1, [sp, #28]
   1e8a4:	cmp	r1, #0
   1e8a8:	beq	1eeac <__assert_fail@plt+0xd7ac>
   1e8ac:	ldrb	r1, [ip, #4]
   1e8b0:	cmp	r1, #23
   1e8b4:	cmpne	r1, #11
   1e8b8:	bne	1eeac <__assert_fail@plt+0xd7ac>
   1e8bc:	b	1eec0 <__assert_fail@plt+0xd7c0>
   1e8c0:	mov	r0, #0
   1e8c4:	mov	r7, sl
   1e8c8:	ldr	r1, [sp, #28]
   1e8cc:	cmp	r1, #0
   1e8d0:	beq	1eeac <__assert_fail@plt+0xd7ac>
   1e8d4:	b	1e8ac <__assert_fail@plt+0xd1ac>
   1e8d8:	ldr	ip, [sp, #44]	; 0x2c
   1e8dc:	clz	r0, r7
   1e8e0:	cmp	r7, #0
   1e8e4:	lsr	r0, r0, #5
   1e8e8:	beq	1e2e8 <__assert_fail@plt+0xcbe8>
   1e8ec:	b	1eea0 <__assert_fail@plt+0xd7a0>
   1e8f0:	ldr	ip, [sp, #44]	; 0x2c
   1e8f4:	mov	r0, sl
   1e8f8:	mov	r5, r0
   1e8fc:	ldr	r0, [r0, #4]
   1e900:	cmp	r0, #0
   1e904:	bne	1e8f8 <__assert_fail@plt+0xd1f8>
   1e908:	ldr	r0, [r5, #8]
   1e90c:	cmp	r0, #0
   1e910:	bne	1e8f8 <__assert_fail@plt+0xd1f8>
   1e914:	ldr	r0, [r5, #24]
   1e918:	movw	r1, #255	; 0xff
   1e91c:	movt	r1, #4
   1e920:	and	r0, r0, r1
   1e924:	cmp	r0, #3
   1e928:	beq	1e960 <__assert_fail@plt+0xd260>
   1e92c:	cmp	r0, #6
   1e930:	bne	1e96c <__assert_fail@plt+0xd26c>
   1e934:	ldr	r9, [r5, #20]
   1e938:	ldr	r0, [r9]
   1e93c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1e940:	ldr	r0, [r9, #4]
   1e944:	bl	13de4 <__assert_fail@plt+0x26e4>
   1e948:	ldr	r0, [r9, #8]
   1e94c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1e950:	ldr	r0, [r9, #12]
   1e954:	bl	13de4 <__assert_fail@plt+0x26e4>
   1e958:	mov	r0, r9
   1e95c:	b	1e964 <__assert_fail@plt+0xd264>
   1e960:	ldr	r0, [r5, #20]
   1e964:	bl	13de4 <__assert_fail@plt+0x26e4>
   1e968:	ldr	ip, [sp, #44]	; 0x2c
   1e96c:	ldr	r1, [r5]
   1e970:	cmp	r1, #0
   1e974:	beq	1ee90 <__assert_fail@plt+0xd790>
   1e978:	ldr	r0, [r1, #8]
   1e97c:	cmp	r0, r5
   1e980:	mov	r5, r1
   1e984:	beq	1e914 <__assert_fail@plt+0xd214>
   1e988:	cmp	r0, #0
   1e98c:	mov	r5, r1
   1e990:	beq	1e914 <__assert_fail@plt+0xd214>
   1e994:	b	1e8f8 <__assert_fail@plt+0xd1f8>
   1e998:	mov	r5, sl
   1e99c:	str	r9, [sp, #8]
   1e9a0:	beq	1ecb0 <__assert_fail@plt+0xd5b0>
   1e9a4:	ldr	r9, [sp, #36]	; 0x24
   1e9a8:	mov	r0, #2
   1e9ac:	ldr	r5, [r9]
   1e9b0:	mov	sl, r9
   1e9b4:	b	1eaf0 <__assert_fail@plt+0xd3f0>
   1e9b8:	mov	r0, #996	; 0x3e4
   1e9bc:	bl	2aa84 <__assert_fail@plt+0x19384>
   1e9c0:	ldr	lr, [sp, #20]
   1e9c4:	ldr	ip, [sp, #44]	; 0x2c
   1e9c8:	cmp	r0, #0
   1e9cc:	beq	1ee78 <__assert_fail@plt+0xd778>
   1e9d0:	ldr	r1, [lr]
   1e9d4:	ldr	r5, [sp, #48]	; 0x30
   1e9d8:	str	r1, [r0]
   1e9dc:	mov	r1, #0
   1e9e0:	str	r0, [lr]
   1e9e4:	str	r1, [r8]
   1e9e8:	b	1e52c <__assert_fail@plt+0xce2c>
   1e9ec:	ldr	sl, [sp, #52]	; 0x34
   1e9f0:	ldr	r1, [sp, #12]
   1e9f4:	cmp	r1, #0
   1e9f8:	bne	1e328 <__assert_fail@plt+0xcc28>
   1e9fc:	ldr	r1, [sp, #16]
   1ea00:	cmp	r0, #2
   1ea04:	mov	r0, #10
   1ea08:	movweq	r0, #9
   1ea0c:	str	r0, [r1]
   1ea10:	b	1e2d0 <__assert_fail@plt+0xcbd0>
   1ea14:	mov	r0, #996	; 0x3e4
   1ea18:	bl	2aa84 <__assert_fail@plt+0x19384>
   1ea1c:	cmp	r0, #0
   1ea20:	beq	1ea60 <__assert_fail@plt+0xd360>
   1ea24:	ldr	r2, [sp, #20]
   1ea28:	ldr	ip, [sp, #44]	; 0x2c
   1ea2c:	ldr	r1, [r2]
   1ea30:	str	r1, [r0]
   1ea34:	mov	r1, #0
   1ea38:	str	r0, [r2]
   1ea3c:	str	r1, [r8]
   1ea40:	b	1e864 <__assert_fail@plt+0xd164>
   1ea44:	ldr	r0, [sp, #16]
   1ea48:	mov	r1, #10
   1ea4c:	b	1ea58 <__assert_fail@plt+0xd358>
   1ea50:	ldr	r0, [sp, #16]
   1ea54:	mov	r1, #15
   1ea58:	str	r1, [r0]
   1ea5c:	b	1e2d4 <__assert_fail@plt+0xcbd4>
   1ea60:	ldr	ip, [sp, #44]	; 0x2c
   1ea64:	b	1e2d0 <__assert_fail@plt+0xcbd0>
   1ea68:	mov	r0, #996	; 0x3e4
   1ea6c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1ea70:	cmp	r0, #0
   1ea74:	beq	1ea98 <__assert_fail@plt+0xd398>
   1ea78:	ldr	lr, [sp, #20]
   1ea7c:	ldr	ip, [sp, #44]	; 0x2c
   1ea80:	ldr	r1, [lr]
   1ea84:	str	r1, [r0]
   1ea88:	mov	r1, #0
   1ea8c:	str	r0, [lr]
   1ea90:	str	r1, [r8]
   1ea94:	b	1eb04 <__assert_fail@plt+0xd404>
   1ea98:	mov	sl, #0
   1ea9c:	str	sl, [fp, #-80]	; 0xffffffb0
   1eaa0:	b	1eaac <__assert_fail@plt+0xd3ac>
   1eaa4:	mov	sl, #0
   1eaa8:	str	sl, [r6]
   1eaac:	ldr	ip, [sp, #44]	; 0x2c
   1eab0:	ldr	lr, [sp, #20]
   1eab4:	ldr	r1, [r8]
   1eab8:	cmp	r1, #31
   1eabc:	bne	1ec50 <__assert_fail@plt+0xd550>
   1eac0:	mov	r0, #996	; 0x3e4
   1eac4:	bl	2aa84 <__assert_fail@plt+0x19384>
   1eac8:	ldr	lr, [sp, #20]
   1eacc:	ldr	ip, [sp, #44]	; 0x2c
   1ead0:	cmp	r0, #0
   1ead4:	beq	1ee78 <__assert_fail@plt+0xd778>
   1ead8:	ldr	r1, [lr]
   1eadc:	str	r1, [r0]
   1eae0:	mov	r1, #0
   1eae4:	str	r0, [lr]
   1eae8:	str	r1, [r8]
   1eaec:	b	1ec54 <__assert_fail@plt+0xd554>
   1eaf0:	ldr	r1, [r8]
   1eaf4:	str	r0, [sp, #52]	; 0x34
   1eaf8:	cmp	r1, #31
   1eafc:	beq	1ea68 <__assert_fail@plt+0xd368>
   1eb00:	ldr	r0, [lr]
   1eb04:	add	r3, r1, #1
   1eb08:	add	r7, r0, r1, lsl #5
   1eb0c:	add	r2, sl, #20
   1eb10:	sub	r6, fp, #80	; 0x50
   1eb14:	str	r3, [r8]
   1eb18:	str	r4, [r7, #4]!
   1eb1c:	str	r4, [r7, #4]
   1eb20:	str	r4, [r7, #8]
   1eb24:	ldm	r2, {r0, r1}
   1eb28:	mvn	r2, #0
   1eb2c:	str	r4, [r7, #12]
   1eb30:	str	r4, [r7, #16]
   1eb34:	str	r2, [r7, #28]
   1eb38:	str	r0, [r7, #20]
   1eb3c:	bic	r0, r1, #786432	; 0xc0000
   1eb40:	str	r0, [r7, #24]
   1eb44:	mov	r0, r7
   1eb48:	str	r7, [fp, #-80]	; 0xffffffb0
   1eb4c:	b	1eb90 <__assert_fail@plt+0xd490>
   1eb50:	add	r3, r1, #1
   1eb54:	add	r0, r0, r1, lsl #5
   1eb58:	add	r2, sl, #20
   1eb5c:	str	r3, [r8]
   1eb60:	str	r4, [r0, #4]!
   1eb64:	mvn	r3, #0
   1eb68:	str	r4, [r0, #4]
   1eb6c:	str	r4, [r0, #8]
   1eb70:	ldm	r2, {r1, r2}
   1eb74:	str	r4, [r0, #12]
   1eb78:	str	r4, [r0, #16]
   1eb7c:	str	r3, [r0, #28]
   1eb80:	str	r1, [r0, #20]
   1eb84:	bic	r1, r2, #786432	; 0xc0000
   1eb88:	str	r1, [r0, #24]
   1eb8c:	str	r0, [r6]
   1eb90:	str	r5, [r0]
   1eb94:	ldr	r0, [r6]
   1eb98:	ldr	r1, [r0, #24]
   1eb9c:	orr	r1, r1, #262144	; 0x40000
   1eba0:	str	r1, [r0, #24]
   1eba4:	ldr	r0, [sl, #4]
   1eba8:	ldr	r5, [r6]
   1ebac:	cmp	r0, #0
   1ebb0:	beq	1ebd0 <__assert_fail@plt+0xd4d0>
   1ebb4:	add	r6, r5, #4
   1ebb8:	mov	sl, r0
   1ebbc:	ldr	r1, [r8]
   1ebc0:	cmp	r1, #31
   1ebc4:	beq	1ec10 <__assert_fail@plt+0xd510>
   1ebc8:	ldr	r0, [lr]
   1ebcc:	b	1eb50 <__assert_fail@plt+0xd450>
   1ebd0:	mov	r1, #0
   1ebd4:	mov	r0, sl
   1ebd8:	ldr	sl, [sl, #8]
   1ebdc:	cmp	sl, r1
   1ebe0:	cmpne	sl, #0
   1ebe4:	bne	1ec00 <__assert_fail@plt+0xd500>
   1ebe8:	ldr	sl, [r0]
   1ebec:	ldr	r5, [r5]
   1ebf0:	mov	r1, r0
   1ebf4:	cmp	sl, #0
   1ebf8:	bne	1ebd4 <__assert_fail@plt+0xd4d4>
   1ebfc:	b	1ec40 <__assert_fail@plt+0xd540>
   1ec00:	add	r6, r5, #8
   1ec04:	ldr	r1, [r8]
   1ec08:	cmp	r1, #31
   1ec0c:	bne	1ebc8 <__assert_fail@plt+0xd4c8>
   1ec10:	mov	r0, #996	; 0x3e4
   1ec14:	bl	2aa84 <__assert_fail@plt+0x19384>
   1ec18:	cmp	r0, #0
   1ec1c:	beq	1eaa4 <__assert_fail@plt+0xd3a4>
   1ec20:	ldr	lr, [sp, #20]
   1ec24:	ldr	ip, [sp, #44]	; 0x2c
   1ec28:	ldr	r1, [lr]
   1ec2c:	str	r1, [r0]
   1ec30:	mov	r1, #0
   1ec34:	str	r0, [lr]
   1ec38:	str	r1, [r8]
   1ec3c:	b	1eb50 <__assert_fail@plt+0xd450>
   1ec40:	mov	sl, r7
   1ec44:	ldr	r1, [r8]
   1ec48:	cmp	r1, #31
   1ec4c:	beq	1eac0 <__assert_fail@plt+0xd3c0>
   1ec50:	ldr	r0, [lr]
   1ec54:	add	r2, r1, #1
   1ec58:	add	r1, r0, r1, lsl #5
   1ec5c:	mov	r0, #16
   1ec60:	cmp	sl, #0
   1ec64:	str	r2, [r8]
   1ec68:	str	r4, [r1, #4]!
   1ec6c:	stmib	r1, {r9, sl}
   1ec70:	str	r4, [r1, #12]
   1ec74:	str	r4, [r1, #16]
   1ec78:	str	r4, [r1, #20]
   1ec7c:	str	r0, [r1, #24]
   1ec80:	mvn	r0, #0
   1ec84:	str	r0, [r1, #28]
   1ec88:	str	r1, [r9]
   1ec8c:	beq	1ee78 <__assert_fail@plt+0xd778>
   1ec90:	mov	r5, r1
   1ec94:	str	r1, [sl]
   1ec98:	ldr	r2, [sp, #52]	; 0x34
   1ec9c:	ldr	r1, [sp, #8]
   1eca0:	mov	r9, r5
   1eca4:	add	r0, r2, #1
   1eca8:	cmp	r2, r1
   1ecac:	blt	1eaf0 <__assert_fail@plt+0xd3f0>
   1ecb0:	ldr	r1, [sp, #48]	; 0x30
   1ecb4:	ldr	r2, [sp, #8]
   1ecb8:	mov	r0, #0
   1ecbc:	cmp	r2, r1
   1ecc0:	bne	1ecdc <__assert_fail@plt+0xd5dc>
   1ecc4:	ldr	r6, [sp, #24]
   1ecc8:	mov	r7, r5
   1eccc:	ldr	r1, [sp, #28]
   1ecd0:	cmp	r1, #0
   1ecd4:	beq	1eeac <__assert_fail@plt+0xd7ac>
   1ecd8:	b	1e8ac <__assert_fail@plt+0xd1ac>
   1ecdc:	mov	r9, sl
   1ece0:	ldr	r1, [r8]
   1ece4:	str	r5, [sp, #32]
   1ece8:	ldr	r6, [r9], #20
   1ecec:	cmp	r1, #31
   1ecf0:	beq	1ee38 <__assert_fail@plt+0xd738>
   1ecf4:	ldr	r0, [lr]
   1ecf8:	add	r2, r1, #1
   1ecfc:	add	r7, r0, r1, lsl #5
   1ed00:	str	r2, [r8]
   1ed04:	str	r4, [r7, #4]!
   1ed08:	mvn	r2, #0
   1ed0c:	str	r4, [r7, #4]
   1ed10:	str	r4, [r7, #8]
   1ed14:	ldm	r9, {r0, r1}
   1ed18:	str	r4, [r7, #12]
   1ed1c:	str	r4, [r7, #16]
   1ed20:	str	r2, [r7, #28]
   1ed24:	sub	r9, fp, #80	; 0x50
   1ed28:	str	r0, [r7, #20]
   1ed2c:	bic	r0, r1, #786432	; 0xc0000
   1ed30:	str	r0, [r7, #24]
   1ed34:	mov	r0, r7
   1ed38:	str	r7, [fp, #-80]	; 0xffffffb0
   1ed3c:	b	1ed80 <__assert_fail@plt+0xd680>
   1ed40:	add	r3, r1, #1
   1ed44:	add	r0, r0, r1, lsl #5
   1ed48:	add	r2, sl, #20
   1ed4c:	str	r3, [r8]
   1ed50:	str	r4, [r0, #4]!
   1ed54:	mvn	r3, #0
   1ed58:	str	r4, [r0, #4]
   1ed5c:	str	r4, [r0, #8]
   1ed60:	ldm	r2, {r1, r2}
   1ed64:	str	r4, [r0, #12]
   1ed68:	str	r4, [r0, #16]
   1ed6c:	str	r3, [r0, #28]
   1ed70:	str	r1, [r0, #20]
   1ed74:	bic	r1, r2, #786432	; 0xc0000
   1ed78:	str	r1, [r0, #24]
   1ed7c:	str	r0, [r9]
   1ed80:	str	r6, [r0]
   1ed84:	ldr	r0, [r9]
   1ed88:	ldr	r1, [r0, #24]
   1ed8c:	orr	r1, r1, #262144	; 0x40000
   1ed90:	str	r1, [r0, #24]
   1ed94:	ldr	r0, [sl, #4]
   1ed98:	ldr	r6, [r9]
   1ed9c:	cmp	r0, #0
   1eda0:	beq	1edc0 <__assert_fail@plt+0xd6c0>
   1eda4:	add	r9, r6, #4
   1eda8:	mov	sl, r0
   1edac:	ldr	r1, [r8]
   1edb0:	cmp	r1, #31
   1edb4:	beq	1ee08 <__assert_fail@plt+0xd708>
   1edb8:	ldr	r0, [lr]
   1edbc:	b	1ed40 <__assert_fail@plt+0xd640>
   1edc0:	ldr	r5, [sp, #48]	; 0x30
   1edc4:	ldr	r9, [sp, #8]
   1edc8:	mov	r1, #0
   1edcc:	mov	r0, sl
   1edd0:	ldr	sl, [sl, #8]
   1edd4:	cmp	sl, r1
   1edd8:	cmpne	sl, #0
   1eddc:	bne	1edf8 <__assert_fail@plt+0xd6f8>
   1ede0:	ldr	sl, [r0]
   1ede4:	ldr	r6, [r6]
   1ede8:	mov	r1, r0
   1edec:	cmp	sl, #0
   1edf0:	bne	1edcc <__assert_fail@plt+0xd6cc>
   1edf4:	b	1e498 <__assert_fail@plt+0xcd98>
   1edf8:	add	r9, r6, #8
   1edfc:	ldr	r1, [r8]
   1ee00:	cmp	r1, #31
   1ee04:	bne	1edb8 <__assert_fail@plt+0xd6b8>
   1ee08:	mov	r0, #996	; 0x3e4
   1ee0c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1ee10:	cmp	r0, #0
   1ee14:	beq	1ee70 <__assert_fail@plt+0xd770>
   1ee18:	ldr	lr, [sp, #20]
   1ee1c:	ldr	ip, [sp, #44]	; 0x2c
   1ee20:	ldr	r1, [lr]
   1ee24:	str	r1, [r0]
   1ee28:	mov	r1, #0
   1ee2c:	str	r0, [lr]
   1ee30:	str	r1, [r8]
   1ee34:	b	1ed40 <__assert_fail@plt+0xd640>
   1ee38:	mov	r0, #996	; 0x3e4
   1ee3c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1ee40:	cmp	r0, #0
   1ee44:	beq	1ee68 <__assert_fail@plt+0xd768>
   1ee48:	ldr	lr, [sp, #20]
   1ee4c:	ldr	ip, [sp, #44]	; 0x2c
   1ee50:	ldr	r1, [lr]
   1ee54:	str	r1, [r0]
   1ee58:	mov	r1, #0
   1ee5c:	str	r0, [lr]
   1ee60:	str	r1, [r8]
   1ee64:	b	1ecf8 <__assert_fail@plt+0xd5f8>
   1ee68:	str	r4, [fp, #-80]	; 0xffffffb0
   1ee6c:	b	1ee74 <__assert_fail@plt+0xd774>
   1ee70:	str	r4, [r9]
   1ee74:	ldr	ip, [sp, #44]	; 0x2c
   1ee78:	ldr	r0, [sp, #16]
   1ee7c:	ldr	r6, [sp, #24]
   1ee80:	ldr	sl, [sp, #36]	; 0x24
   1ee84:	mov	r1, #12
   1ee88:	mov	r7, #0
   1ee8c:	str	r1, [r0]
   1ee90:	clz	r0, r7
   1ee94:	cmp	r7, #0
   1ee98:	lsr	r0, r0, #5
   1ee9c:	beq	1e2e8 <__assert_fail@plt+0xcbe8>
   1eea0:	ldr	r1, [sp, #28]
   1eea4:	cmp	r1, #0
   1eea8:	bne	1e8ac <__assert_fail@plt+0xd1ac>
   1eeac:	ldrb	r0, [ip, #4]
   1eeb0:	mov	sl, r7
   1eeb4:	cmp	r0, #23
   1eeb8:	bls	1e1d0 <__assert_fail@plt+0xcad0>
   1eebc:	b	1ef74 <__assert_fail@plt+0xd874>
   1eec0:	ldr	r8, [sp, #16]
   1eec4:	movw	r6, #255	; 0xff
   1eec8:	cmp	r0, #0
   1eecc:	movt	r6, #4
   1eed0:	bne	1ef68 <__assert_fail@plt+0xd868>
   1eed4:	mov	r5, r7
   1eed8:	ldr	r7, [r7, #4]
   1eedc:	cmp	r7, #0
   1eee0:	bne	1eed4 <__assert_fail@plt+0xd7d4>
   1eee4:	ldr	r7, [r5, #8]
   1eee8:	cmp	r7, #0
   1eeec:	bne	1eed4 <__assert_fail@plt+0xd7d4>
   1eef0:	ldr	r0, [r5, #24]
   1eef4:	and	r0, r0, r6
   1eef8:	cmp	r0, #3
   1eefc:	beq	1ef34 <__assert_fail@plt+0xd834>
   1ef00:	cmp	r0, #6
   1ef04:	bne	1ef3c <__assert_fail@plt+0xd83c>
   1ef08:	ldr	r4, [r5, #20]
   1ef0c:	ldr	r0, [r4]
   1ef10:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ef14:	ldr	r0, [r4, #4]
   1ef18:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ef1c:	ldr	r0, [r4, #8]
   1ef20:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ef24:	ldr	r0, [r4, #12]
   1ef28:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ef2c:	mov	r0, r4
   1ef30:	b	1ef38 <__assert_fail@plt+0xd838>
   1ef34:	ldr	r0, [r5, #20]
   1ef38:	bl	13de4 <__assert_fail@plt+0x26e4>
   1ef3c:	ldr	r0, [r5]
   1ef40:	cmp	r0, #0
   1ef44:	beq	1ef68 <__assert_fail@plt+0xd868>
   1ef48:	ldr	r7, [r0, #8]
   1ef4c:	cmp	r7, r5
   1ef50:	mov	r5, r0
   1ef54:	beq	1eef0 <__assert_fail@plt+0xd7f0>
   1ef58:	cmp	r7, #0
   1ef5c:	mov	r5, r0
   1ef60:	beq	1eef0 <__assert_fail@plt+0xd7f0>
   1ef64:	b	1eed4 <__assert_fail@plt+0xd7d4>
   1ef68:	mov	r0, #13
   1ef6c:	mov	sl, #0
   1ef70:	str	r0, [r8]
   1ef74:	mov	r0, sl
   1ef78:	sub	sp, fp, #28
   1ef7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef80:	mov	r7, r4
   1ef84:	mov	r6, r9
   1ef88:	b	1e180 <__assert_fail@plt+0xca80>
   1ef8c:	cmp	sl, #0
   1ef90:	beq	1f040 <__assert_fail@plt+0xd940>
   1ef94:	movw	r6, #255	; 0xff
   1ef98:	movt	r6, #4
   1ef9c:	mov	r5, sl
   1efa0:	ldr	sl, [sl, #4]
   1efa4:	cmp	sl, #0
   1efa8:	bne	1ef9c <__assert_fail@plt+0xd89c>
   1efac:	ldr	sl, [r5, #8]
   1efb0:	cmp	sl, #0
   1efb4:	bne	1ef9c <__assert_fail@plt+0xd89c>
   1efb8:	ldr	r0, [r5, #24]
   1efbc:	and	r0, r0, r6
   1efc0:	cmp	r0, #3
   1efc4:	beq	1effc <__assert_fail@plt+0xd8fc>
   1efc8:	cmp	r0, #6
   1efcc:	bne	1f004 <__assert_fail@plt+0xd904>
   1efd0:	ldr	r4, [r5, #20]
   1efd4:	ldr	r0, [r4]
   1efd8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1efdc:	ldr	r0, [r4, #4]
   1efe0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1efe4:	ldr	r0, [r4, #8]
   1efe8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1efec:	ldr	r0, [r4, #12]
   1eff0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1eff4:	mov	r0, r4
   1eff8:	b	1f000 <__assert_fail@plt+0xd900>
   1effc:	ldr	r0, [r5, #20]
   1f000:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f004:	ldr	r0, [r5]
   1f008:	cmp	r0, #0
   1f00c:	beq	1f030 <__assert_fail@plt+0xd930>
   1f010:	ldr	sl, [r0, #8]
   1f014:	cmp	sl, r5
   1f018:	mov	r5, r0
   1f01c:	beq	1efb8 <__assert_fail@plt+0xd8b8>
   1f020:	cmp	sl, #0
   1f024:	mov	r5, r0
   1f028:	beq	1efb8 <__assert_fail@plt+0xd8b8>
   1f02c:	b	1ef9c <__assert_fail@plt+0xd89c>
   1f030:	mov	sl, #0
   1f034:	mov	r0, sl
   1f038:	sub	sp, fp, #28
   1f03c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f040:	mov	sl, #0
   1f044:	mov	r0, sl
   1f048:	sub	sp, fp, #28
   1f04c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f050:	cmp	r0, #2
   1f054:	blt	1f070 <__assert_fail@plt+0xd970>
   1f058:	ldr	r0, [sl, #36]	; 0x24
   1f05c:	cmp	r0, #0
   1f060:	bne	1de18 <__assert_fail@plt+0xc718>
   1f064:	ldrb	r0, [sl, #16]
   1f068:	tst	r0, #1
   1f06c:	bne	1de18 <__assert_fail@plt+0xc718>
   1f070:	ldr	r0, [sl]
   1f074:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f078:	ldr	r0, [sl, #4]
   1f07c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f080:	ldr	r0, [sl, #8]
   1f084:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f088:	ldr	r0, [sl, #12]
   1f08c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f090:	mov	r0, sl
   1f094:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f098:	ldr	r1, [r8, #64]	; 0x40
   1f09c:	cmp	r1, #31
   1f0a0:	beq	1f598 <__assert_fail@plt+0xde98>
   1f0a4:	ldr	r0, [r8, #56]	; 0x38
   1f0a8:	add	r2, r1, #1
   1f0ac:	add	r0, r0, r1, lsl #5
   1f0b0:	ldr	lr, [sp, #44]	; 0x2c
   1f0b4:	mov	r1, #3
   1f0b8:	vmov.i32	q8, #0	; 0x00000000
   1f0bc:	str	r2, [r8, #64]	; 0x40
   1f0c0:	mov	r2, #0
   1f0c4:	add	r7, r0, #4
   1f0c8:	str	r2, [r0, #20]
   1f0cc:	str	r4, [r0, #24]
   1f0d0:	str	r1, [r0, #28]
   1f0d4:	mov	r0, #28
   1f0d8:	mov	r1, r7
   1f0dc:	vst1.32	{d16-d17}, [r1], r0
   1f0e0:	mvn	r0, #0
   1f0e4:	str	r0, [r1]
   1f0e8:	b	1e180 <__assert_fail@plt+0xca80>
   1f0ec:	mov	r0, #996	; 0x3e4
   1f0f0:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f0f4:	cmp	r0, #0
   1f0f8:	beq	1f3d0 <__assert_fail@plt+0xdcd0>
   1f0fc:	ldr	r1, [r8, #56]	; 0x38
   1f100:	ldr	lr, [sp, #44]	; 0x2c
   1f104:	str	r1, [r0]
   1f108:	mov	r1, #0
   1f10c:	str	r1, [r8, #64]	; 0x40
   1f110:	str	r0, [r8, #56]	; 0x38
   1f114:	b	1d208 <__assert_fail@plt+0xbb08>
   1f118:	mov	r9, r0
   1f11c:	b	1f1d8 <__assert_fail@plt+0xdad8>
   1f120:	mov	r9, #7
   1f124:	b	1f1d8 <__assert_fail@plt+0xdad8>
   1f128:	mov	r0, #2
   1f12c:	b	1f5d0 <__assert_fail@plt+0xded0>
   1f130:	mov	r0, #6
   1f134:	b	1e074 <__assert_fail@plt+0xc974>
   1f138:	mov	r0, #996	; 0x3e4
   1f13c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f140:	cmp	r0, #0
   1f144:	beq	1f3d0 <__assert_fail@plt+0xdcd0>
   1f148:	ldr	r1, [r8, #56]	; 0x38
   1f14c:	ldr	lr, [sp, #44]	; 0x2c
   1f150:	str	r1, [r0]
   1f154:	mov	r1, #0
   1f158:	str	r1, [r8, #64]	; 0x40
   1f15c:	str	r0, [r8, #56]	; 0x38
   1f160:	b	1d2e0 <__assert_fail@plt+0xbbe0>
   1f164:	mov	r0, #996	; 0x3e4
   1f168:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f16c:	cmp	r0, #0
   1f170:	beq	1f3d0 <__assert_fail@plt+0xdcd0>
   1f174:	ldr	r1, [r8, #56]	; 0x38
   1f178:	ldr	r3, [sp, #24]
   1f17c:	ldr	lr, [sp, #44]	; 0x2c
   1f180:	str	r1, [r0]
   1f184:	mov	r1, #0
   1f188:	str	r1, [r8, #64]	; 0x40
   1f18c:	str	r0, [r8, #56]	; 0x38
   1f190:	b	1d4a4 <__assert_fail@plt+0xbda4>
   1f194:	mov	r0, r4
   1f198:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f19c:	mov	r0, r5
   1f1a0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f1a4:	b	1e070 <__assert_fail@plt+0xc970>
   1f1a8:	mov	r0, #996	; 0x3e4
   1f1ac:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f1b0:	cmp	r0, #0
   1f1b4:	beq	1f3d0 <__assert_fail@plt+0xdcd0>
   1f1b8:	ldr	r1, [r8, #56]	; 0x38
   1f1bc:	ldr	lr, [sp, #44]	; 0x2c
   1f1c0:	str	r1, [r0]
   1f1c4:	mov	r1, #0
   1f1c8:	str	r1, [r8, #64]	; 0x40
   1f1cc:	str	r0, [r8, #56]	; 0x38
   1f1d0:	b	1d284 <__assert_fail@plt+0xbb84>
   1f1d4:	mov	r9, #3
   1f1d8:	ldr	r0, [sp, #16]
   1f1dc:	ldr	r4, [sp, #52]	; 0x34
   1f1e0:	ldr	sl, [sp, #48]	; 0x30
   1f1e4:	str	r9, [r0]
   1f1e8:	ldr	r6, [sp, #40]	; 0x28
   1f1ec:	mov	r0, r4
   1f1f0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f1f4:	ldr	r0, [sl]
   1f1f8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f1fc:	ldr	r0, [sl, #4]
   1f200:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f204:	ldr	r0, [sl, #8]
   1f208:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f20c:	ldr	r0, [sl, #12]
   1f210:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f214:	mov	r0, sl
   1f218:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f21c:	ldr	r0, [sp, #16]
   1f220:	mov	r7, #0
   1f224:	mov	sl, #0
   1f228:	ldr	r0, [r0]
   1f22c:	cmp	r0, #0
   1f230:	ldr	lr, [sp, #44]	; 0x2c
   1f234:	beq	1e180 <__assert_fail@plt+0xca80>
   1f238:	b	1ef74 <__assert_fail@plt+0xd874>
   1f23c:	mov	r0, #996	; 0x3e4
   1f240:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f244:	cmp	r0, #0
   1f248:	beq	1f5cc <__assert_fail@plt+0xdecc>
   1f24c:	ldr	r1, [r8, #56]	; 0x38
   1f250:	ldr	lr, [sp, #44]	; 0x2c
   1f254:	str	r1, [r0]
   1f258:	mov	r1, #0
   1f25c:	str	r1, [r8, #64]	; 0x40
   1f260:	str	r0, [r8, #56]	; 0x38
   1f264:	b	1de34 <__assert_fail@plt+0xc734>
   1f268:	mov	r0, #996	; 0x3e4
   1f26c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f270:	cmp	r0, #0
   1f274:	beq	1f5cc <__assert_fail@plt+0xdecc>
   1f278:	ldr	r1, [r8, #56]	; 0x38
   1f27c:	ldr	lr, [sp, #44]	; 0x2c
   1f280:	str	r1, [r0]
   1f284:	mov	r1, #0
   1f288:	str	r1, [r8, #64]	; 0x40
   1f28c:	str	r0, [r8, #56]	; 0x38
   1f290:	b	1dee0 <__assert_fail@plt+0xc7e0>
   1f294:	mov	r0, #996	; 0x3e4
   1f298:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f29c:	cmp	r0, #0
   1f2a0:	beq	1f5cc <__assert_fail@plt+0xdecc>
   1f2a4:	ldr	r1, [r8, #56]	; 0x38
   1f2a8:	ldr	lr, [sp, #44]	; 0x2c
   1f2ac:	str	r1, [r0]
   1f2b0:	mov	r1, #0
   1f2b4:	str	r1, [r8, #64]	; 0x40
   1f2b8:	str	r0, [r8, #56]	; 0x38
   1f2bc:	b	1df2c <__assert_fail@plt+0xc82c>
   1f2c0:	mov	r0, #996	; 0x3e4
   1f2c4:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f2c8:	cmp	r0, #0
   1f2cc:	beq	1f3d0 <__assert_fail@plt+0xdcd0>
   1f2d0:	ldr	r1, [r8, #56]	; 0x38
   1f2d4:	ldr	lr, [sp, #44]	; 0x2c
   1f2d8:	mov	r6, sl
   1f2dc:	str	r1, [r0]
   1f2e0:	mov	r1, #0
   1f2e4:	str	r1, [r8, #64]	; 0x40
   1f2e8:	str	r0, [r8, #56]	; 0x38
   1f2ec:	b	1e13c <__assert_fail@plt+0xca3c>
   1f2f0:	mov	r0, r4
   1f2f4:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f2f8:	ldr	lr, [sp, #44]	; 0x2c
   1f2fc:	mov	r7, r9
   1f300:	b	1e180 <__assert_fail@plt+0xca80>
   1f304:	mov	r0, #996	; 0x3e4
   1f308:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f30c:	cmp	r0, #0
   1f310:	beq	1f480 <__assert_fail@plt+0xdd80>
   1f314:	ldr	r1, [r8, #56]	; 0x38
   1f318:	ldr	r7, [sp, #24]
   1f31c:	ldr	lr, [sp, #44]	; 0x2c
   1f320:	mov	sl, #0
   1f324:	str	r1, [r0]
   1f328:	mov	r1, #0
   1f32c:	str	r1, [r8, #64]	; 0x40
   1f330:	str	r0, [r8, #56]	; 0x38
   1f334:	b	1dfdc <__assert_fail@plt+0xc8dc>
   1f338:	mov	r0, #996	; 0x3e4
   1f33c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f340:	cmp	r0, #0
   1f344:	beq	1f574 <__assert_fail@plt+0xde74>
   1f348:	ldr	r1, [r8, #56]	; 0x38
   1f34c:	ldr	r7, [sp, #24]
   1f350:	ldr	lr, [sp, #44]	; 0x2c
   1f354:	mov	sl, #0
   1f358:	str	r1, [r0]
   1f35c:	mov	r1, #0
   1f360:	str	r1, [r8, #64]	; 0x40
   1f364:	str	r0, [r8, #56]	; 0x38
   1f368:	b	1d44c <__assert_fail@plt+0xbd4c>
   1f36c:	mov	r0, #996	; 0x3e4
   1f370:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f374:	cmp	r0, #0
   1f378:	beq	1f580 <__assert_fail@plt+0xde80>
   1f37c:	ldr	r1, [r8, #56]	; 0x38
   1f380:	ldr	r7, [sp, #24]
   1f384:	ldr	lr, [sp, #44]	; 0x2c
   1f388:	mov	sl, #0
   1f38c:	str	r1, [r0]
   1f390:	mov	r1, #0
   1f394:	str	r1, [r8, #64]	; 0x40
   1f398:	str	r0, [r8, #56]	; 0x38
   1f39c:	b	1df84 <__assert_fail@plt+0xc884>
   1f3a0:	mov	r0, #996	; 0x3e4
   1f3a4:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f3a8:	cmp	r0, #0
   1f3ac:	beq	1f3d0 <__assert_fail@plt+0xdcd0>
   1f3b0:	ldr	r1, [r8, #56]	; 0x38
   1f3b4:	ldr	r7, [sp, #24]
   1f3b8:	ldr	lr, [sp, #44]	; 0x2c
   1f3bc:	str	r1, [r0]
   1f3c0:	mov	r1, #0
   1f3c4:	str	r1, [r8, #64]	; 0x40
   1f3c8:	str	r0, [r8, #56]	; 0x38
   1f3cc:	b	1e09c <__assert_fail@plt+0xc99c>
   1f3d0:	mov	r0, #12
   1f3d4:	ldr	r1, [sp, #16]
   1f3d8:	mov	sl, #0
   1f3dc:	str	r0, [r1]
   1f3e0:	mov	r0, sl
   1f3e4:	sub	sp, fp, #28
   1f3e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3ec:	mov	r4, #0
   1f3f0:	mov	r9, #0
   1f3f4:	b	1f400 <__assert_fail@plt+0xdd00>
   1f3f8:	mov	r9, #4
   1f3fc:	mov	r4, #128	; 0x80
   1f400:	bl	115a4 <__ctype_b_loc@plt>
   1f404:	ldr	r0, [r0]
   1f408:	ldr	r7, [sp, #24]
   1f40c:	ldr	lr, [sp, #44]	; 0x2c
   1f410:	mov	r1, #1
   1f414:	mov	sl, #0
   1f418:	add	r5, r0, r4, lsl #1
   1f41c:	add	r0, r8, r9, lsl #2
   1f420:	mov	ip, r6
   1f424:	mov	r3, #0
   1f428:	add	r2, r0, #96	; 0x60
   1f42c:	mov	r0, r5
   1f430:	add	r6, r4, r3
   1f434:	cmp	r6, #95	; 0x5f
   1f438:	beq	1f448 <__assert_fail@plt+0xdd48>
   1f43c:	ldrh	r6, [r0]
   1f440:	ands	r6, r6, #8
   1f444:	beq	1f454 <__assert_fail@plt+0xdd54>
   1f448:	ldr	r6, [r2]
   1f44c:	orr	r6, r6, r1, lsl r3
   1f450:	str	r6, [r2]
   1f454:	add	r3, r3, #1
   1f458:	add	r0, r0, #2
   1f45c:	cmp	r3, #32
   1f460:	bne	1f430 <__assert_fail@plt+0xdd30>
   1f464:	add	r9, r9, #1
   1f468:	add	r5, r5, #64	; 0x40
   1f46c:	add	r4, r4, #32
   1f470:	mov	r6, ip
   1f474:	cmp	r9, #8
   1f478:	bne	1f41c <__assert_fail@plt+0xdd1c>
   1f47c:	b	1d41c <__assert_fail@plt+0xbd1c>
   1f480:	ldr	r7, [sp, #24]
   1f484:	ldr	lr, [sp, #44]	; 0x2c
   1f488:	mov	r6, #0
   1f48c:	mov	sl, #0
   1f490:	ldr	r1, [r4]
   1f494:	cmp	r1, #31
   1f498:	bne	1e024 <__assert_fail@plt+0xc924>
   1f49c:	mov	r0, #996	; 0x3e4
   1f4a0:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f4a4:	ldr	lr, [sp, #44]	; 0x2c
   1f4a8:	cmp	r0, #0
   1f4ac:	beq	1e070 <__assert_fail@plt+0xc970>
   1f4b0:	ldr	r1, [r8, #56]	; 0x38
   1f4b4:	str	r1, [r0]
   1f4b8:	mov	r1, #0
   1f4bc:	str	r1, [r8, #64]	; 0x40
   1f4c0:	str	r0, [r8, #56]	; 0x38
   1f4c4:	b	1e028 <__assert_fail@plt+0xc928>
   1f4c8:	cmp	r9, #0
   1f4cc:	beq	1f56c <__assert_fail@plt+0xde6c>
   1f4d0:	movw	r5, #255	; 0xff
   1f4d4:	movt	r5, #4
   1f4d8:	mov	r6, r9
   1f4dc:	ldr	r9, [r9, #4]
   1f4e0:	cmp	r9, #0
   1f4e4:	bne	1f4d8 <__assert_fail@plt+0xddd8>
   1f4e8:	ldr	r9, [r6, #8]
   1f4ec:	cmp	r9, #0
   1f4f0:	bne	1f4d8 <__assert_fail@plt+0xddd8>
   1f4f4:	ldr	r0, [r6, #24]
   1f4f8:	and	r0, r0, r5
   1f4fc:	cmp	r0, #3
   1f500:	beq	1f538 <__assert_fail@plt+0xde38>
   1f504:	cmp	r0, #6
   1f508:	bne	1f540 <__assert_fail@plt+0xde40>
   1f50c:	ldr	r4, [r6, #20]
   1f510:	ldr	r0, [r4]
   1f514:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f518:	ldr	r0, [r4, #4]
   1f51c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f520:	ldr	r0, [r4, #8]
   1f524:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f528:	ldr	r0, [r4, #12]
   1f52c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f530:	mov	r0, r4
   1f534:	b	1f53c <__assert_fail@plt+0xde3c>
   1f538:	ldr	r0, [r6, #20]
   1f53c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f540:	ldr	r0, [r6]
   1f544:	cmp	r0, #0
   1f548:	beq	1f56c <__assert_fail@plt+0xde6c>
   1f54c:	ldr	r9, [r0, #8]
   1f550:	cmp	r9, r6
   1f554:	mov	r6, r0
   1f558:	beq	1f4f4 <__assert_fail@plt+0xddf4>
   1f55c:	cmp	r9, #0
   1f560:	mov	r6, r0
   1f564:	beq	1f4f4 <__assert_fail@plt+0xddf4>
   1f568:	b	1f4d8 <__assert_fail@plt+0xddd8>
   1f56c:	mov	r0, #8
   1f570:	b	1f3d4 <__assert_fail@plt+0xdcd4>
   1f574:	mov	r5, #0
   1f578:	mov	r0, #9
   1f57c:	b	1f588 <__assert_fail@plt+0xde88>
   1f580:	mov	r5, #0
   1f584:	mov	r0, #10
   1f588:	ldr	r7, [sp, #24]
   1f58c:	ldr	lr, [sp, #44]	; 0x2c
   1f590:	mov	sl, #0
   1f594:	b	1dfc4 <__assert_fail@plt+0xc8c4>
   1f598:	mov	r0, #996	; 0x3e4
   1f59c:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f5a0:	cmp	r0, #0
   1f5a4:	beq	1f5cc <__assert_fail@plt+0xdecc>
   1f5a8:	ldr	r1, [r8, #56]	; 0x38
   1f5ac:	str	r1, [r0]
   1f5b0:	mov	r1, #0
   1f5b4:	str	r1, [r8, #64]	; 0x40
   1f5b8:	str	r0, [r8, #56]	; 0x38
   1f5bc:	b	1f0a8 <__assert_fail@plt+0xd9a8>
   1f5c0:	ldr	r6, [sp, #40]	; 0x28
   1f5c4:	ldr	r4, [sp, #52]	; 0x34
   1f5c8:	ldr	sl, [sp, #48]	; 0x30
   1f5cc:	mov	r0, #12
   1f5d0:	ldr	r1, [sp, #16]
   1f5d4:	str	r0, [r1]
   1f5d8:	b	1f1ec <__assert_fail@plt+0xdaec>
   1f5dc:	mov	r0, r6
   1f5e0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f5e4:	mov	r0, r9
   1f5e8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f5ec:	mov	r9, #12
   1f5f0:	b	1f1d8 <__assert_fail@plt+0xdad8>
   1f5f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5f8:	add	fp, sp, #28
   1f5fc:	sub	sp, sp, #12
   1f600:	mov	r9, r1
   1f604:	mov	r6, r0
   1f608:	mov	r4, #0
   1f60c:	mov	r0, #32
   1f610:	mov	r1, #1
   1f614:	mov	sl, r3
   1f618:	mov	r5, r2
   1f61c:	str	r4, [sp, #8]
   1f620:	bl	2aa30 <__assert_fail@plt+0x19330>
   1f624:	ldr	r1, [fp, #12]
   1f628:	cmp	r0, #0
   1f62c:	beq	1f8e4 <__assert_fail@plt+0xe1e4>
   1f630:	mov	r7, r0
   1f634:	mov	r0, #40	; 0x28
   1f638:	mov	r1, #1
   1f63c:	bl	2aa30 <__assert_fail@plt+0x19330>
   1f640:	cmp	r0, #0
   1f644:	beq	1f8f8 <__assert_fail@plt+0xe1f8>
   1f648:	mov	r8, r0
   1f64c:	ldrb	r0, [r0, #16]
   1f650:	ldr	r1, [fp, #8]
   1f654:	mov	r4, #0
   1f658:	add	r3, sp, #8
   1f65c:	str	r5, [sp]
   1f660:	mov	r2, r8
   1f664:	str	r4, [sp, #4]
   1f668:	and	r0, r0, #254	; 0xfe
   1f66c:	orr	r0, r0, r1
   1f670:	mov	r1, r7
   1f674:	strb	r0, [r8, #16]
   1f678:	mov	r0, r9
   1f67c:	bl	1fea8 <__assert_fail@plt+0xe7a8>
   1f680:	cmp	r0, #0
   1f684:	bne	1f91c <__assert_fail@plt+0xe21c>
   1f688:	ldrb	r0, [sl]
   1f68c:	cmp	r0, #0
   1f690:	beq	1f6bc <__assert_fail@plt+0xdfbc>
   1f694:	add	r1, sl, #1
   1f698:	mov	r2, #1
   1f69c:	ubfx	r3, r0, #5, #3
   1f6a0:	and	r0, r0, #31
   1f6a4:	ldr	r5, [r7, r3, lsl #2]
   1f6a8:	orr	r0, r5, r2, lsl r0
   1f6ac:	str	r0, [r7, r3, lsl #2]
   1f6b0:	ldrb	r0, [r1], #1
   1f6b4:	cmp	r0, #0
   1f6b8:	bne	1f69c <__assert_fail@plt+0xdf9c>
   1f6bc:	ldr	r0, [fp, #8]
   1f6c0:	cmp	r0, #0
   1f6c4:	bne	1f7d8 <__assert_fail@plt+0xe0d8>
   1f6c8:	ldr	r0, [r6, #92]	; 0x5c
   1f6cc:	cmp	r0, #2
   1f6d0:	bge	1f800 <__assert_fail@plt+0xe100>
   1f6d4:	ldr	r1, [r6, #64]	; 0x40
   1f6d8:	cmp	r1, #31
   1f6dc:	beq	1f884 <__assert_fail@plt+0xe184>
   1f6e0:	ldr	r0, [r6, #56]	; 0x38
   1f6e4:	add	r2, r1, #1
   1f6e8:	add	r0, r0, r1, lsl #5
   1f6ec:	mov	r1, #3
   1f6f0:	vmov.i32	q8, #0	; 0x00000000
   1f6f4:	str	r2, [r6, #64]	; 0x40
   1f6f8:	mov	r2, #0
   1f6fc:	add	r5, r0, #4
   1f700:	str	r2, [r0, #20]
   1f704:	str	r7, [r0, #24]
   1f708:	str	r1, [r0, #28]
   1f70c:	mov	r0, #28
   1f710:	mov	r1, r5
   1f714:	vst1.32	{d16-d17}, [r1], r0
   1f718:	mvn	r0, #0
   1f71c:	str	r0, [r1]
   1f720:	ldr	r0, [r6, #92]	; 0x5c
   1f724:	cmp	r0, #2
   1f728:	blt	1f8ac <__assert_fail@plt+0xe1ac>
   1f72c:	ldrb	r0, [r6, #88]	; 0x58
   1f730:	orr	r0, r0, #2
   1f734:	strb	r0, [r6, #88]	; 0x58
   1f738:	ldr	r1, [r6, #64]	; 0x40
   1f73c:	cmp	r1, #31
   1f740:	beq	1f964 <__assert_fail@plt+0xe264>
   1f744:	ldr	r0, [r6, #56]	; 0x38
   1f748:	add	r0, r0, r1, lsl #5
   1f74c:	add	r2, r1, #1
   1f750:	mov	r1, #6
   1f754:	mov	r4, #0
   1f758:	vmov.i32	q8, #0	; 0x00000000
   1f75c:	add	r7, r0, #4
   1f760:	str	r2, [r6, #64]	; 0x40
   1f764:	str	r4, [r0, #20]
   1f768:	str	r8, [r0, #24]
   1f76c:	str	r1, [r0, #28]
   1f770:	mov	r0, #28
   1f774:	mov	r1, r7
   1f778:	vst1.32	{d16-d17}, [r1], r0
   1f77c:	mvn	r0, #0
   1f780:	str	r0, [r1]
   1f784:	ldr	r1, [r6, #64]	; 0x40
   1f788:	cmp	r1, #31
   1f78c:	beq	1f9d4 <__assert_fail@plt+0xe2d4>
   1f790:	ldr	r0, [r6, #56]	; 0x38
   1f794:	add	r2, r1, #1
   1f798:	add	r4, r0, r1, lsl #5
   1f79c:	mov	r0, #0
   1f7a0:	mov	r1, #10
   1f7a4:	str	r2, [r6, #64]	; 0x40
   1f7a8:	str	r0, [r4, #4]!
   1f7ac:	mvn	r2, #0
   1f7b0:	add	r3, r4, #20
   1f7b4:	stmib	r4, {r5, r7}
   1f7b8:	str	r0, [r4, #12]
   1f7bc:	str	r0, [r4, #16]
   1f7c0:	stm	r3, {r0, r1, r2}
   1f7c4:	str	r4, [r5]
   1f7c8:	str	r4, [r7]
   1f7cc:	mov	r0, r4
   1f7d0:	sub	sp, fp, #28
   1f7d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7d8:	vld1.32	{d16-d17}, [r7]
   1f7dc:	mov	r0, r7
   1f7e0:	vmvn	q8, q8
   1f7e4:	vst1.32	{d16-d17}, [r0]!
   1f7e8:	vld1.32	{d16-d17}, [r0]
   1f7ec:	vmvn	q8, q8
   1f7f0:	vst1.32	{d16-d17}, [r0]
   1f7f4:	ldr	r0, [r6, #92]	; 0x5c
   1f7f8:	cmp	r0, #2
   1f7fc:	blt	1f6d4 <__assert_fail@plt+0xdfd4>
   1f800:	ldm	r7, {r0, r1, r2, ip}
   1f804:	ldr	r5, [r6, #60]	; 0x3c
   1f808:	ldr	r3, [r5]
   1f80c:	and	r0, r0, r3
   1f810:	str	r0, [r7]
   1f814:	ldr	r0, [r5, #4]
   1f818:	and	r0, r1, r0
   1f81c:	str	r0, [r7, #4]
   1f820:	ldr	r0, [r5, #8]
   1f824:	and	r0, r2, r0
   1f828:	str	r0, [r7, #8]
   1f82c:	ldr	r0, [r5, #12]
   1f830:	and	r0, ip, r0
   1f834:	str	r0, [r7, #12]
   1f838:	ldr	r0, [r7, #16]
   1f83c:	ldr	r1, [r5, #16]
   1f840:	and	r0, r0, r1
   1f844:	str	r0, [r7, #16]
   1f848:	ldr	r0, [r5, #20]
   1f84c:	ldr	r1, [r7, #20]
   1f850:	and	r0, r1, r0
   1f854:	str	r0, [r7, #20]
   1f858:	ldr	r0, [r5, #24]
   1f85c:	ldr	r1, [r7, #24]
   1f860:	and	r0, r1, r0
   1f864:	str	r0, [r7, #24]
   1f868:	ldr	r0, [r5, #28]
   1f86c:	ldr	r1, [r7, #28]
   1f870:	and	r0, r1, r0
   1f874:	str	r0, [r7, #28]
   1f878:	ldr	r1, [r6, #64]	; 0x40
   1f87c:	cmp	r1, #31
   1f880:	bne	1f6e0 <__assert_fail@plt+0xdfe0>
   1f884:	mov	r0, #996	; 0x3e4
   1f888:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f88c:	cmp	r0, #0
   1f890:	beq	1f98c <__assert_fail@plt+0xe28c>
   1f894:	ldr	r1, [r6, #56]	; 0x38
   1f898:	str	r1, [r0]
   1f89c:	mov	r1, #0
   1f8a0:	str	r1, [r6, #64]	; 0x40
   1f8a4:	str	r0, [r6, #56]	; 0x38
   1f8a8:	b	1f6e4 <__assert_fail@plt+0xdfe4>
   1f8ac:	ldr	r0, [r8]
   1f8b0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f8b4:	ldr	r0, [r8, #4]
   1f8b8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f8bc:	ldr	r0, [r8, #8]
   1f8c0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f8c4:	ldr	r0, [r8, #12]
   1f8c8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f8cc:	mov	r0, r8
   1f8d0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f8d4:	mov	r4, r5
   1f8d8:	mov	r0, r4
   1f8dc:	sub	sp, fp, #28
   1f8e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8e4:	mov	r0, #12
   1f8e8:	str	r0, [r1]
   1f8ec:	mov	r0, r4
   1f8f0:	sub	sp, fp, #28
   1f8f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8f8:	mov	r0, r7
   1f8fc:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f900:	ldr	r1, [fp, #12]
   1f904:	mov	r0, #12
   1f908:	mov	r4, #0
   1f90c:	str	r0, [r1]
   1f910:	mov	r0, r4
   1f914:	sub	sp, fp, #28
   1f918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f91c:	mov	r5, r0
   1f920:	mov	r0, r7
   1f924:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f928:	ldr	r0, [r8]
   1f92c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f930:	ldr	r0, [r8, #4]
   1f934:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f938:	ldr	r0, [r8, #8]
   1f93c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f940:	ldr	r0, [r8, #12]
   1f944:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f948:	mov	r0, r8
   1f94c:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f950:	ldr	r0, [fp, #12]
   1f954:	str	r5, [r0]
   1f958:	mov	r0, r4
   1f95c:	sub	sp, fp, #28
   1f960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f964:	mov	r0, #996	; 0x3e4
   1f968:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f96c:	cmp	r0, #0
   1f970:	beq	1f98c <__assert_fail@plt+0xe28c>
   1f974:	ldr	r1, [r6, #56]	; 0x38
   1f978:	str	r1, [r0]
   1f97c:	mov	r1, #0
   1f980:	str	r1, [r6, #64]	; 0x40
   1f984:	str	r0, [r6, #56]	; 0x38
   1f988:	b	1f748 <__assert_fail@plt+0xe048>
   1f98c:	mov	r0, r7
   1f990:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f994:	ldr	r0, [r8]
   1f998:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f99c:	ldr	r0, [r8, #4]
   1f9a0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f9a4:	ldr	r0, [r8, #8]
   1f9a8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f9ac:	ldr	r0, [r8, #12]
   1f9b0:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f9b4:	mov	r0, r8
   1f9b8:	bl	13de4 <__assert_fail@plt+0x26e4>
   1f9bc:	ldr	r1, [fp, #12]
   1f9c0:	mov	r0, #12
   1f9c4:	str	r0, [r1]
   1f9c8:	mov	r0, r4
   1f9cc:	sub	sp, fp, #28
   1f9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9d4:	mov	r0, #996	; 0x3e4
   1f9d8:	bl	2aa84 <__assert_fail@plt+0x19384>
   1f9dc:	cmp	r0, #0
   1f9e0:	beq	1f8d8 <__assert_fail@plt+0xe1d8>
   1f9e4:	ldr	r1, [r6, #56]	; 0x38
   1f9e8:	str	r1, [r0]
   1f9ec:	mov	r1, #0
   1f9f0:	str	r1, [r6, #64]	; 0x40
   1f9f4:	str	r0, [r6, #56]	; 0x38
   1f9f8:	b	1f794 <__assert_fail@plt+0xe094>
   1f9fc:	push	{fp, lr}
   1fa00:	mov	fp, sp
   1fa04:	ldr	ip, [r1, #40]	; 0x28
   1fa08:	ldr	r3, [r1, #56]	; 0x38
   1fa0c:	cmp	r3, ip
   1fa10:	ble	1fa90 <__assert_fail@plt+0xe390>
   1fa14:	ldr	r3, [r1, #4]
   1fa18:	ldrb	lr, [r3, ip]
   1fa1c:	strb	lr, [r0]
   1fa20:	ldr	r3, [r1, #80]	; 0x50
   1fa24:	cmp	r3, #2
   1fa28:	blt	1fa4c <__assert_fail@plt+0xe34c>
   1fa2c:	ldr	r3, [r1, #28]
   1fa30:	ldr	ip, [r1, #40]	; 0x28
   1fa34:	cmp	ip, r3
   1fa38:	beq	1fa4c <__assert_fail@plt+0xe34c>
   1fa3c:	ldr	r3, [r1, #8]
   1fa40:	ldr	r3, [r3, ip, lsl #2]
   1fa44:	cmn	r3, #1
   1fa48:	beq	1fb64 <__assert_fail@plt+0xe464>
   1fa4c:	tst	r2, #1
   1fa50:	beq	1faa4 <__assert_fail@plt+0xe3a4>
   1fa54:	cmp	lr, #92	; 0x5c
   1fa58:	bne	1faa4 <__assert_fail@plt+0xe3a4>
   1fa5c:	ldr	r2, [r1, #40]	; 0x28
   1fa60:	ldr	r3, [r1, #48]	; 0x30
   1fa64:	add	r2, r2, #1
   1fa68:	cmp	r2, r3
   1fa6c:	bge	1fb64 <__assert_fail@plt+0xe464>
   1fa70:	str	r2, [r1, #40]	; 0x28
   1fa74:	ldr	r1, [r1, #4]
   1fa78:	ldrb	r2, [r1, r2]
   1fa7c:	mov	r1, #1
   1fa80:	strb	r1, [r0, #4]
   1fa84:	strb	r2, [r0]
   1fa88:	mov	r0, r1
   1fa8c:	pop	{fp, pc}
   1fa90:	mov	r1, #2
   1fa94:	strb	r1, [r0, #4]
   1fa98:	mov	r1, #0
   1fa9c:	mov	r0, r1
   1faa0:	pop	{fp, pc}
   1faa4:	cmp	lr, #92	; 0x5c
   1faa8:	bgt	1fb08 <__assert_fail@plt+0xe408>
   1faac:	cmp	lr, #45	; 0x2d
   1fab0:	beq	1fb2c <__assert_fail@plt+0xe42c>
   1fab4:	cmp	lr, #91	; 0x5b
   1fab8:	bne	1fb64 <__assert_fail@plt+0xe464>
   1fabc:	ldr	r3, [r1, #40]	; 0x28
   1fac0:	ldr	ip, [r1, #48]	; 0x30
   1fac4:	add	r3, r3, #1
   1fac8:	cmp	r3, ip
   1facc:	bge	1fb54 <__assert_fail@plt+0xe454>
   1fad0:	ldr	r1, [r1, #4]
   1fad4:	ldrb	r1, [r1, r3]
   1fad8:	cmp	r1, #61	; 0x3d
   1fadc:	strb	r1, [r0]
   1fae0:	beq	1fb74 <__assert_fail@plt+0xe474>
   1fae4:	cmp	r1, #58	; 0x3a
   1fae8:	beq	1fb88 <__assert_fail@plt+0xe488>
   1faec:	cmp	r1, #46	; 0x2e
   1faf0:	bne	1fb5c <__assert_fail@plt+0xe45c>
   1faf4:	mov	r1, #26
   1faf8:	strb	r1, [r0, #4]
   1fafc:	mov	r1, #2
   1fb00:	mov	r0, r1
   1fb04:	pop	{fp, pc}
   1fb08:	cmp	lr, #93	; 0x5d
   1fb0c:	beq	1fb40 <__assert_fail@plt+0xe440>
   1fb10:	cmp	lr, #94	; 0x5e
   1fb14:	bne	1fb64 <__assert_fail@plt+0xe464>
   1fb18:	mov	r1, #25
   1fb1c:	strb	r1, [r0, #4]
   1fb20:	mov	r1, #1
   1fb24:	mov	r0, r1
   1fb28:	pop	{fp, pc}
   1fb2c:	mov	r1, #22
   1fb30:	strb	r1, [r0, #4]
   1fb34:	mov	r1, #1
   1fb38:	mov	r0, r1
   1fb3c:	pop	{fp, pc}
   1fb40:	mov	r1, #21
   1fb44:	strb	r1, [r0, #4]
   1fb48:	mov	r1, #1
   1fb4c:	mov	r0, r1
   1fb50:	pop	{fp, pc}
   1fb54:	mov	r1, #0
   1fb58:	strb	r1, [r0]
   1fb5c:	mov	r1, #91	; 0x5b
   1fb60:	strb	r1, [r0]
   1fb64:	mov	r1, #1
   1fb68:	strb	r1, [r0, #4]
   1fb6c:	mov	r0, r1
   1fb70:	pop	{fp, pc}
   1fb74:	mov	r1, #28
   1fb78:	strb	r1, [r0, #4]
   1fb7c:	mov	r1, #2
   1fb80:	mov	r0, r1
   1fb84:	pop	{fp, pc}
   1fb88:	tst	r2, #4
   1fb8c:	beq	1fb5c <__assert_fail@plt+0xe45c>
   1fb90:	mov	r1, #30
   1fb94:	strb	r1, [r0, #4]
   1fb98:	mov	r1, #2
   1fb9c:	mov	r0, r1
   1fba0:	pop	{fp, pc}
   1fba4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fba8:	add	fp, sp, #24
   1fbac:	sub	sp, sp, #8
   1fbb0:	mov	r5, r2
   1fbb4:	ldr	r2, [r1, #80]	; 0x50
   1fbb8:	mov	r9, r0
   1fbbc:	ldr	r0, [r1, #40]	; 0x28
   1fbc0:	cmp	r2, #1
   1fbc4:	beq	1fc34 <__assert_fail@plt+0xe534>
   1fbc8:	ldr	r4, [r1, #28]
   1fbcc:	add	r2, r0, #1
   1fbd0:	cmp	r2, r4
   1fbd4:	bge	1fc34 <__assert_fail@plt+0xe534>
   1fbd8:	ldr	ip, [r1, #8]
   1fbdc:	mov	r2, #1
   1fbe0:	add	r6, ip, r0, lsl #2
   1fbe4:	ldr	r7, [r6, r2, lsl #2]
   1fbe8:	cmn	r7, #1
   1fbec:	bne	1fc04 <__assert_fail@plt+0xe504>
   1fbf0:	add	r2, r2, #1
   1fbf4:	add	r7, r0, r2
   1fbf8:	cmp	r7, r4
   1fbfc:	blt	1fbe4 <__assert_fail@plt+0xe4e4>
   1fc00:	b	1fc0c <__assert_fail@plt+0xe50c>
   1fc04:	cmp	r2, #2
   1fc08:	bcc	1fc34 <__assert_fail@plt+0xe534>
   1fc0c:	mov	r3, #1
   1fc10:	str	r3, [r9]
   1fc14:	ldr	r0, [ip, r0, lsl #2]
   1fc18:	str	r0, [r9, #4]
   1fc1c:	ldr	r0, [r1, #40]	; 0x28
   1fc20:	add	r0, r0, r2
   1fc24:	str	r0, [r1, #40]	; 0x28
   1fc28:	mov	r0, #0
   1fc2c:	sub	sp, fp, #24
   1fc30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fc34:	add	r2, r0, r3
   1fc38:	str	r2, [r1, #40]	; 0x28
   1fc3c:	ldrb	r6, [r5, #4]
   1fc40:	sub	r0, r6, #22
   1fc44:	cmp	r0, #8
   1fc48:	bhi	1fe90 <__assert_fail@plt+0xe790>
   1fc4c:	add	r3, pc, #0
   1fc50:	ldr	pc, [r3, r0, lsl #2]
   1fc54:	andeq	pc, r1, r8, ror #28
   1fc58:	muleq	r1, r0, lr
   1fc5c:	muleq	r1, r0, lr
   1fc60:	muleq	r1, r0, lr
   1fc64:	andeq	pc, r1, r8, ror ip	; <UNPREDICTABLE>
   1fc68:	muleq	r1, r0, lr
   1fc6c:	andeq	pc, r1, r8, ror ip	; <UNPREDICTABLE>
   1fc70:	muleq	r1, r0, lr
   1fc74:	andeq	pc, r1, r8, ror ip	; <UNPREDICTABLE>
   1fc78:	ldr	r3, [r1, #56]	; 0x38
   1fc7c:	mov	r0, #7
   1fc80:	cmp	r3, r2
   1fc84:	ble	1fea0 <__assert_fail@plt+0xe7a0>
   1fc88:	ldrb	r3, [r5]
   1fc8c:	mov	r2, #0
   1fc90:	uxtb	r7, r6
   1fc94:	cmp	r7, #30
   1fc98:	bne	1fcc0 <__assert_fail@plt+0xe5c0>
   1fc9c:	b	1fcb4 <__assert_fail@plt+0xe5b4>
   1fca0:	ldrb	r6, [r5, #4]
   1fca4:	add	r2, r2, #1
   1fca8:	uxtb	r7, r6
   1fcac:	cmp	r7, #30
   1fcb0:	bne	1fcc0 <__assert_fail@plt+0xe5c0>
   1fcb4:	ldrb	r7, [r1, #75]	; 0x4b
   1fcb8:	cmp	r7, #0
   1fcbc:	bne	1fd10 <__assert_fail@plt+0xe610>
   1fcc0:	ldr	r4, [r1, #40]	; 0x28
   1fcc4:	ldr	r7, [r1, #4]
   1fcc8:	add	r6, r4, #1
   1fccc:	str	r6, [r1, #40]	; 0x28
   1fcd0:	ldrb	r4, [r7, r4]
   1fcd4:	ldr	r7, [r1, #56]	; 0x38
   1fcd8:	cmp	r7, r6
   1fcdc:	ble	1fea0 <__assert_fail@plt+0xe7a0>
   1fce0:	uxtb	r7, r4
   1fce4:	cmp	r7, r3
   1fce8:	bne	1fcfc <__assert_fail@plt+0xe5fc>
   1fcec:	ldr	r7, [r1, #4]
   1fcf0:	ldrb	r7, [r7, r6]
   1fcf4:	cmp	r7, #93	; 0x5d
   1fcf8:	beq	1fe08 <__assert_fail@plt+0xe708>
   1fcfc:	ldr	r7, [r9, #4]
   1fd00:	cmp	r2, #30
   1fd04:	strb	r4, [r7, r2]
   1fd08:	bls	1fca0 <__assert_fail@plt+0xe5a0>
   1fd0c:	b	1fea0 <__assert_fail@plt+0xe7a0>
   1fd10:	ldrb	r7, [r1, #76]	; 0x4c
   1fd14:	cmp	r7, #0
   1fd18:	beq	1fdbc <__assert_fail@plt+0xe6bc>
   1fd1c:	ldr	lr, [r1, #28]
   1fd20:	ldr	ip, [r1, #40]	; 0x28
   1fd24:	cmp	ip, lr
   1fd28:	beq	1fd3c <__assert_fail@plt+0xe63c>
   1fd2c:	ldr	r4, [r1, #8]
   1fd30:	ldr	r4, [r4, ip, lsl #2]
   1fd34:	cmn	r4, #1
   1fd38:	beq	1fde8 <__assert_fail@plt+0xe6e8>
   1fd3c:	ldr	r6, [r1, #12]
   1fd40:	ldr	r7, [r1, #24]
   1fd44:	ldr	r4, [r1]
   1fd48:	ldr	r6, [r6, ip, lsl #2]
   1fd4c:	add	r6, r7, r6
   1fd50:	add	r4, r4, r6
   1fd54:	ldrsb	r4, [r4]
   1fd58:	cmn	r4, #1
   1fd5c:	ble	1fde8 <__assert_fail@plt+0xe6e8>
   1fd60:	ldr	r7, [r1, #80]	; 0x50
   1fd64:	mov	r6, #1
   1fd68:	cmp	r7, #1
   1fd6c:	beq	1fda4 <__assert_fail@plt+0xe6a4>
   1fd70:	add	r7, ip, #1
   1fd74:	cmp	r7, lr
   1fd78:	bge	1fda4 <__assert_fail@plt+0xe6a4>
   1fd7c:	ldr	r6, [r1, #8]
   1fd80:	add	r8, r6, ip, lsl #2
   1fd84:	mov	r6, #1
   1fd88:	ldr	r7, [r8, r6, lsl #2]
   1fd8c:	cmn	r7, #1
   1fd90:	bne	1fda4 <__assert_fail@plt+0xe6a4>
   1fd94:	add	r6, r6, #1
   1fd98:	add	r7, ip, r6
   1fd9c:	cmp	r7, lr
   1fda0:	blt	1fd88 <__assert_fail@plt+0xe688>
   1fda4:	add	r6, r6, ip
   1fda8:	str	r6, [r1, #40]	; 0x28
   1fdac:	ldr	r7, [r1, #56]	; 0x38
   1fdb0:	cmp	r7, r6
   1fdb4:	bgt	1fce0 <__assert_fail@plt+0xe5e0>
   1fdb8:	b	1fea0 <__assert_fail@plt+0xe7a0>
   1fdbc:	ldr	r7, [r1, #40]	; 0x28
   1fdc0:	ldr	r4, [r1, #24]
   1fdc4:	ldr	ip, [r1]
   1fdc8:	add	r6, r7, #1
   1fdcc:	add	r7, r7, r4
   1fdd0:	str	r6, [r1, #40]	; 0x28
   1fdd4:	ldrb	r4, [ip, r7]
   1fdd8:	ldr	r7, [r1, #56]	; 0x38
   1fddc:	cmp	r7, r6
   1fde0:	bgt	1fce0 <__assert_fail@plt+0xe5e0>
   1fde4:	b	1fea0 <__assert_fail@plt+0xe7a0>
   1fde8:	add	r6, ip, #1
   1fdec:	str	r6, [r1, #40]	; 0x28
   1fdf0:	ldr	r7, [r1, #4]
   1fdf4:	ldrb	r4, [r7, ip]
   1fdf8:	ldr	r7, [r1, #56]	; 0x38
   1fdfc:	cmp	r7, r6
   1fe00:	bgt	1fce0 <__assert_fail@plt+0xe5e0>
   1fe04:	b	1fea0 <__assert_fail@plt+0xe7a0>
   1fe08:	add	r0, r6, #1
   1fe0c:	str	r0, [r1, #40]	; 0x28
   1fe10:	mov	r0, #0
   1fe14:	ldr	r1, [r9, #4]
   1fe18:	strb	r0, [r1, r2]
   1fe1c:	ldrb	r1, [r5, #4]
   1fe20:	cmp	r1, #30
   1fe24:	beq	1fe48 <__assert_fail@plt+0xe748>
   1fe28:	cmp	r1, #28
   1fe2c:	beq	1fe58 <__assert_fail@plt+0xe758>
   1fe30:	cmp	r1, #26
   1fe34:	bne	1fea0 <__assert_fail@plt+0xe7a0>
   1fe38:	mov	r1, #3
   1fe3c:	str	r1, [r9]
   1fe40:	sub	sp, fp, #24
   1fe44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe48:	mov	r1, #4
   1fe4c:	str	r1, [r9]
   1fe50:	sub	sp, fp, #24
   1fe54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe58:	mov	r1, #2
   1fe5c:	str	r1, [r9]
   1fe60:	sub	sp, fp, #24
   1fe64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe68:	ldr	r0, [fp, #12]
   1fe6c:	cmp	r0, #0
   1fe70:	bne	1fe90 <__assert_fail@plt+0xe790>
   1fe74:	ldr	r2, [fp, #8]
   1fe78:	mov	r0, sp
   1fe7c:	bl	1f9fc <__assert_fail@plt+0xe2fc>
   1fe80:	ldrb	r1, [sp, #4]
   1fe84:	mov	r0, #11
   1fe88:	cmp	r1, #21
   1fe8c:	bne	1fea0 <__assert_fail@plt+0xe7a0>
   1fe90:	mov	r0, #0
   1fe94:	str	r0, [r9]
   1fe98:	ldrb	r1, [r5]
   1fe9c:	strb	r1, [r9, #4]
   1fea0:	sub	sp, fp, #24
   1fea4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fea8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1feac:	add	fp, sp, #24
   1feb0:	mov	r8, r0
   1feb4:	ldrb	r0, [fp, #14]
   1feb8:	ldr	r6, [fp, #8]
   1febc:	mov	r5, r3
   1fec0:	mov	r7, r2
   1fec4:	mov	r4, r1
   1fec8:	tst	r0, #64	; 0x40
   1fecc:	beq	1ff08 <__assert_fail@plt+0xe808>
   1fed0:	movw	r1, #49106	; 0xbfd2
   1fed4:	mov	r0, r6
   1fed8:	movt	r1, #2
   1fedc:	bl	113d0 <strcmp@plt>
   1fee0:	cmp	r0, #0
   1fee4:	beq	1ff00 <__assert_fail@plt+0xe800>
   1fee8:	movw	r1, #49112	; 0xbfd8
   1feec:	mov	r0, r6
   1fef0:	movt	r1, #2
   1fef4:	bl	113d0 <strcmp@plt>
   1fef8:	cmp	r0, #0
   1fefc:	bne	1ff08 <__assert_fail@plt+0xe808>
   1ff00:	movw	r6, #49118	; 0xbfde
   1ff04:	movt	r6, #2
   1ff08:	ldr	r0, [r5]
   1ff0c:	ldr	r1, [r7, #36]	; 0x24
   1ff10:	cmp	r0, r1
   1ff14:	beq	20464 <__assert_fail@plt+0xed64>
   1ff18:	mov	r0, r6
   1ff1c:	bl	113ac <wctype@plt>
   1ff20:	ldr	r2, [r7, #36]	; 0x24
   1ff24:	ldr	r1, [r7, #12]
   1ff28:	add	r3, r2, #1
   1ff2c:	str	r3, [r7, #36]	; 0x24
   1ff30:	str	r0, [r1, r2, lsl #2]
   1ff34:	movw	r1, #49094	; 0xbfc6
   1ff38:	mov	r0, r6
   1ff3c:	movt	r1, #2
   1ff40:	bl	113d0 <strcmp@plt>
   1ff44:	cmp	r0, #0
   1ff48:	beq	200ac <__assert_fail@plt+0xe9ac>
   1ff4c:	movw	r1, #49124	; 0xbfe4
   1ff50:	mov	r0, r6
   1ff54:	movt	r1, #2
   1ff58:	bl	113d0 <strcmp@plt>
   1ff5c:	cmp	r0, #0
   1ff60:	beq	20108 <__assert_fail@plt+0xea08>
   1ff64:	movw	r1, #49112	; 0xbfd8
   1ff68:	mov	r0, r6
   1ff6c:	movt	r1, #2
   1ff70:	bl	113d0 <strcmp@plt>
   1ff74:	cmp	r0, #0
   1ff78:	beq	20164 <__assert_fail@plt+0xea64>
   1ff7c:	movw	r1, #49100	; 0xbfcc
   1ff80:	mov	r0, r6
   1ff84:	movt	r1, #2
   1ff88:	bl	113d0 <strcmp@plt>
   1ff8c:	cmp	r0, #0
   1ff90:	beq	201c0 <__assert_fail@plt+0xeac0>
   1ff94:	movw	r1, #49118	; 0xbfde
   1ff98:	mov	r0, r6
   1ff9c:	movt	r1, #2
   1ffa0:	bl	113d0 <strcmp@plt>
   1ffa4:	cmp	r0, #0
   1ffa8:	beq	2021c <__assert_fail@plt+0xeb1c>
   1ffac:	movw	r1, #49155	; 0xc003
   1ffb0:	mov	r0, r6
   1ffb4:	movt	r1, #2
   1ffb8:	bl	113d0 <strcmp@plt>
   1ffbc:	cmp	r0, #0
   1ffc0:	beq	20278 <__assert_fail@plt+0xeb78>
   1ffc4:	movw	r1, #49130	; 0xbfea
   1ffc8:	mov	r0, r6
   1ffcc:	movt	r1, #2
   1ffd0:	bl	113d0 <strcmp@plt>
   1ffd4:	cmp	r0, #0
   1ffd8:	beq	202d4 <__assert_fail@plt+0xebd4>
   1ffdc:	movw	r1, #49106	; 0xbfd2
   1ffe0:	mov	r0, r6
   1ffe4:	movt	r1, #2
   1ffe8:	bl	113d0 <strcmp@plt>
   1ffec:	cmp	r0, #0
   1fff0:	beq	20324 <__assert_fail@plt+0xec24>
   1fff4:	movw	r1, #49136	; 0xbff0
   1fff8:	mov	r0, r6
   1fffc:	movt	r1, #2
   20000:	bl	113d0 <strcmp@plt>
   20004:	cmp	r0, #0
   20008:	beq	20374 <__assert_fail@plt+0xec74>
   2000c:	movw	r1, #49142	; 0xbff6
   20010:	mov	r0, r6
   20014:	movt	r1, #2
   20018:	bl	113d0 <strcmp@plt>
   2001c:	cmp	r0, #0
   20020:	beq	203c4 <__assert_fail@plt+0xecc4>
   20024:	movw	r1, #49148	; 0xbffc
   20028:	mov	r0, r6
   2002c:	movt	r1, #2
   20030:	bl	113d0 <strcmp@plt>
   20034:	cmp	r0, #0
   20038:	beq	20414 <__assert_fail@plt+0xed14>
   2003c:	movw	r1, #49154	; 0xc002
   20040:	mov	r0, r6
   20044:	movt	r1, #2
   20048:	bl	113d0 <strcmp@plt>
   2004c:	mov	r1, r0
   20050:	mov	r0, #4
   20054:	cmp	r1, #0
   20058:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   2005c:	bl	115a4 <__ctype_b_loc@plt>
   20060:	ldr	r1, [r0]
   20064:	mov	r2, #0
   20068:	mov	r3, #1
   2006c:	cmp	r8, #0
   20070:	bne	205cc <__assert_fail@plt+0xeecc>
   20074:	ldrb	r0, [r1, #1]
   20078:	tst	r0, #16
   2007c:	beq	20094 <__assert_fail@plt+0xe994>
   20080:	ubfx	r0, r2, #5, #3
   20084:	and	r6, r2, #31
   20088:	ldr	r7, [r4, r0, lsl #2]
   2008c:	orr	r7, r7, r3, lsl r6
   20090:	str	r7, [r4, r0, lsl #2]
   20094:	add	r2, r2, #1
   20098:	add	r1, r1, #2
   2009c:	mov	r0, #0
   200a0:	cmp	r2, #256	; 0x100
   200a4:	bne	20074 <__assert_fail@plt+0xe974>
   200a8:	b	20460 <__assert_fail@plt+0xed60>
   200ac:	bl	115a4 <__ctype_b_loc@plt>
   200b0:	ldr	r1, [r0]
   200b4:	cmp	r8, #0
   200b8:	bne	20508 <__assert_fail@plt+0xee08>
   200bc:	mov	r0, #0
   200c0:	mov	r2, #1
   200c4:	ldrb	r3, [r1]
   200c8:	tst	r3, #8
   200cc:	bne	200f0 <__assert_fail@plt+0xe9f0>
   200d0:	add	r0, r0, #1
   200d4:	add	r1, r1, #2
   200d8:	cmp	r0, #256	; 0x100
   200dc:	moveq	r0, #0
   200e0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   200e4:	ldrb	r3, [r1]
   200e8:	tst	r3, #8
   200ec:	beq	200d0 <__assert_fail@plt+0xe9d0>
   200f0:	ubfx	r3, r0, #5, #3
   200f4:	and	r6, r0, #31
   200f8:	ldr	r7, [r4, r3, lsl #2]
   200fc:	orr	r7, r7, r2, lsl r6
   20100:	str	r7, [r4, r3, lsl #2]
   20104:	b	200d0 <__assert_fail@plt+0xe9d0>
   20108:	bl	115a4 <__ctype_b_loc@plt>
   2010c:	ldr	r1, [r0]
   20110:	cmp	r8, #0
   20114:	bne	20588 <__assert_fail@plt+0xee88>
   20118:	mov	r0, #0
   2011c:	mov	r2, #1
   20120:	ldrb	r3, [r1]
   20124:	tst	r3, #2
   20128:	bne	2014c <__assert_fail@plt+0xea4c>
   2012c:	add	r0, r0, #1
   20130:	add	r1, r1, #2
   20134:	cmp	r0, #256	; 0x100
   20138:	moveq	r0, #0
   2013c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   20140:	ldrb	r3, [r1]
   20144:	tst	r3, #2
   20148:	beq	2012c <__assert_fail@plt+0xea2c>
   2014c:	ubfx	r3, r0, #5, #3
   20150:	and	r6, r0, #31
   20154:	ldr	r7, [r4, r3, lsl #2]
   20158:	orr	r7, r7, r2, lsl r6
   2015c:	str	r7, [r4, r3, lsl #2]
   20160:	b	2012c <__assert_fail@plt+0xea2c>
   20164:	bl	115a4 <__ctype_b_loc@plt>
   20168:	ldr	r1, [r0]
   2016c:	cmp	r8, #0
   20170:	bne	20644 <__assert_fail@plt+0xef44>
   20174:	mov	r0, #0
   20178:	mov	r2, #1
   2017c:	ldrb	r3, [r1, #1]
   20180:	tst	r3, #2
   20184:	bne	201a8 <__assert_fail@plt+0xeaa8>
   20188:	add	r0, r0, #1
   2018c:	add	r1, r1, #2
   20190:	cmp	r0, #256	; 0x100
   20194:	moveq	r0, #0
   20198:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2019c:	ldrb	r3, [r1, #1]
   201a0:	tst	r3, #2
   201a4:	beq	20188 <__assert_fail@plt+0xea88>
   201a8:	ubfx	r3, r0, #5, #3
   201ac:	and	r6, r0, #31
   201b0:	ldr	r7, [r4, r3, lsl #2]
   201b4:	orr	r7, r7, r2, lsl r6
   201b8:	str	r7, [r4, r3, lsl #2]
   201bc:	b	20188 <__assert_fail@plt+0xea88>
   201c0:	bl	115a4 <__ctype_b_loc@plt>
   201c4:	ldr	r1, [r0]
   201c8:	cmp	r8, #0
   201cc:	bne	206c4 <__assert_fail@plt+0xefc4>
   201d0:	mov	r0, #0
   201d4:	mov	r2, #1
   201d8:	ldrb	r3, [r1, #1]
   201dc:	tst	r3, #32
   201e0:	bne	20204 <__assert_fail@plt+0xeb04>
   201e4:	add	r0, r0, #1
   201e8:	add	r1, r1, #2
   201ec:	cmp	r0, #256	; 0x100
   201f0:	moveq	r0, #0
   201f4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   201f8:	ldrb	r3, [r1, #1]
   201fc:	tst	r3, #32
   20200:	beq	201e4 <__assert_fail@plt+0xeae4>
   20204:	ubfx	r3, r0, #5, #3
   20208:	and	r6, r0, #31
   2020c:	ldr	r7, [r4, r3, lsl #2]
   20210:	orr	r7, r7, r2, lsl r6
   20214:	str	r7, [r4, r3, lsl #2]
   20218:	b	201e4 <__assert_fail@plt+0xeae4>
   2021c:	bl	115a4 <__ctype_b_loc@plt>
   20220:	ldr	r1, [r0]
   20224:	cmp	r8, #0
   20228:	bne	20708 <__assert_fail@plt+0xf008>
   2022c:	mov	r0, #0
   20230:	mov	r2, #1
   20234:	ldrb	r3, [r1, #1]
   20238:	tst	r3, #4
   2023c:	bne	20260 <__assert_fail@plt+0xeb60>
   20240:	add	r0, r0, #1
   20244:	add	r1, r1, #2
   20248:	cmp	r0, #256	; 0x100
   2024c:	moveq	r0, #0
   20250:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   20254:	ldrb	r3, [r1, #1]
   20258:	tst	r3, #4
   2025c:	beq	20240 <__assert_fail@plt+0xeb40>
   20260:	ubfx	r3, r0, #5, #3
   20264:	and	r6, r0, #31
   20268:	ldr	r7, [r4, r3, lsl #2]
   2026c:	orr	r7, r7, r2, lsl r6
   20270:	str	r7, [r4, r3, lsl #2]
   20274:	b	20240 <__assert_fail@plt+0xeb40>
   20278:	bl	115a4 <__ctype_b_loc@plt>
   2027c:	ldr	r1, [r0]
   20280:	cmp	r8, #0
   20284:	bne	2074c <__assert_fail@plt+0xf04c>
   20288:	mov	r0, #0
   2028c:	mov	r2, #1
   20290:	ldrb	r3, [r1, #1]
   20294:	tst	r3, #8
   20298:	bne	202bc <__assert_fail@plt+0xebbc>
   2029c:	add	r0, r0, #1
   202a0:	add	r1, r1, #2
   202a4:	cmp	r0, #256	; 0x100
   202a8:	moveq	r0, #0
   202ac:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   202b0:	ldrb	r3, [r1, #1]
   202b4:	tst	r3, #8
   202b8:	beq	2029c <__assert_fail@plt+0xeb9c>
   202bc:	ubfx	r3, r0, #5, #3
   202c0:	and	r6, r0, #31
   202c4:	ldr	r7, [r4, r3, lsl #2]
   202c8:	orr	r7, r7, r2, lsl r6
   202cc:	str	r7, [r4, r3, lsl #2]
   202d0:	b	2029c <__assert_fail@plt+0xeb9c>
   202d4:	bl	115a4 <__ctype_b_loc@plt>
   202d8:	ldr	r1, [r0]
   202dc:	mov	r2, #0
   202e0:	mov	r3, #1
   202e4:	cmp	r8, #0
   202e8:	bne	20490 <__assert_fail@plt+0xed90>
   202ec:	ldrb	r0, [r1, #1]
   202f0:	tst	r0, #64	; 0x40
   202f4:	beq	2030c <__assert_fail@plt+0xec0c>
   202f8:	ubfx	r0, r2, #5, #3
   202fc:	and	r6, r2, #31
   20300:	ldr	r7, [r4, r0, lsl #2]
   20304:	orr	r7, r7, r3, lsl r6
   20308:	str	r7, [r4, r0, lsl #2]
   2030c:	add	r2, r2, #1
   20310:	add	r1, r1, #2
   20314:	mov	r0, #0
   20318:	cmp	r2, #256	; 0x100
   2031c:	bne	202ec <__assert_fail@plt+0xebec>
   20320:	b	20460 <__assert_fail@plt+0xed60>
   20324:	bl	115a4 <__ctype_b_loc@plt>
   20328:	ldr	r1, [r0]
   2032c:	mov	r2, #0
   20330:	mov	r3, #1
   20334:	cmp	r8, #0
   20338:	bne	204cc <__assert_fail@plt+0xedcc>
   2033c:	ldrb	r0, [r1, #1]
   20340:	tst	r0, #1
   20344:	beq	2035c <__assert_fail@plt+0xec5c>
   20348:	ubfx	r0, r2, #5, #3
   2034c:	and	r6, r2, #31
   20350:	ldr	r7, [r4, r0, lsl #2]
   20354:	orr	r7, r7, r3, lsl r6
   20358:	str	r7, [r4, r0, lsl #2]
   2035c:	add	r2, r2, #1
   20360:	add	r1, r1, #2
   20364:	mov	r0, #0
   20368:	cmp	r2, #256	; 0x100
   2036c:	bne	2033c <__assert_fail@plt+0xec3c>
   20370:	b	20460 <__assert_fail@plt+0xed60>
   20374:	bl	115a4 <__ctype_b_loc@plt>
   20378:	ldr	r1, [r0]
   2037c:	mov	r2, #0
   20380:	mov	r3, #1
   20384:	cmp	r8, #0
   20388:	bne	2054c <__assert_fail@plt+0xee4c>
   2038c:	ldrb	r0, [r1]
   20390:	tst	r0, #1
   20394:	beq	203ac <__assert_fail@plt+0xecac>
   20398:	ubfx	r0, r2, #5, #3
   2039c:	and	r6, r2, #31
   203a0:	ldr	r7, [r4, r0, lsl #2]
   203a4:	orr	r7, r7, r3, lsl r6
   203a8:	str	r7, [r4, r0, lsl #2]
   203ac:	add	r2, r2, #1
   203b0:	add	r1, r1, #2
   203b4:	mov	r0, #0
   203b8:	cmp	r2, #256	; 0x100
   203bc:	bne	2038c <__assert_fail@plt+0xec8c>
   203c0:	b	20460 <__assert_fail@plt+0xed60>
   203c4:	bl	115a4 <__ctype_b_loc@plt>
   203c8:	ldr	r1, [r0]
   203cc:	mov	r2, #0
   203d0:	mov	r3, #1
   203d4:	cmp	r8, #0
   203d8:	bne	20608 <__assert_fail@plt+0xef08>
   203dc:	ldrsh	r0, [r1]
   203e0:	cmn	r0, #1
   203e4:	bgt	203fc <__assert_fail@plt+0xecfc>
   203e8:	ubfx	r0, r2, #5, #3
   203ec:	and	r6, r2, #31
   203f0:	ldr	r7, [r4, r0, lsl #2]
   203f4:	orr	r7, r7, r3, lsl r6
   203f8:	str	r7, [r4, r0, lsl #2]
   203fc:	add	r2, r2, #1
   20400:	add	r1, r1, #2
   20404:	mov	r0, #0
   20408:	cmp	r2, #256	; 0x100
   2040c:	bne	203dc <__assert_fail@plt+0xecdc>
   20410:	b	20460 <__assert_fail@plt+0xed60>
   20414:	bl	115a4 <__ctype_b_loc@plt>
   20418:	ldr	r1, [r0]
   2041c:	mov	r2, #0
   20420:	mov	r3, #1
   20424:	cmp	r8, #0
   20428:	bne	20688 <__assert_fail@plt+0xef88>
   2042c:	ldrb	r0, [r1]
   20430:	tst	r0, #4
   20434:	beq	2044c <__assert_fail@plt+0xed4c>
   20438:	ubfx	r0, r2, #5, #3
   2043c:	and	r6, r2, #31
   20440:	ldr	r7, [r4, r0, lsl #2]
   20444:	orr	r7, r7, r3, lsl r6
   20448:	str	r7, [r4, r0, lsl #2]
   2044c:	add	r2, r2, #1
   20450:	add	r1, r1, #2
   20454:	mov	r0, #0
   20458:	cmp	r2, #256	; 0x100
   2045c:	bne	2042c <__assert_fail@plt+0xed2c>
   20460:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20464:	mov	r1, #1
   20468:	orr	r9, r1, r0, lsl #1
   2046c:	ldr	r0, [r7, #12]
   20470:	lsl	r1, r9, #2
   20474:	bl	2aab4 <__assert_fail@plt+0x193b4>
   20478:	cmp	r0, #0
   2047c:	moveq	r0, #12
   20480:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   20484:	str	r0, [r7, #12]
   20488:	str	r9, [r5]
   2048c:	b	1ff18 <__assert_fail@plt+0xe818>
   20490:	ldrb	r0, [r1, #1]
   20494:	tst	r0, #64	; 0x40
   20498:	beq	204b4 <__assert_fail@plt+0xedb4>
   2049c:	ldrb	r0, [r8, r2]
   204a0:	ubfx	r7, r0, #5, #3
   204a4:	and	r0, r0, #31
   204a8:	ldr	r6, [r4, r7, lsl #2]
   204ac:	orr	r0, r6, r3, lsl r0
   204b0:	str	r0, [r4, r7, lsl #2]
   204b4:	add	r2, r2, #1
   204b8:	add	r1, r1, #2
   204bc:	mov	r0, #0
   204c0:	cmp	r2, #256	; 0x100
   204c4:	bne	20490 <__assert_fail@plt+0xed90>
   204c8:	b	20460 <__assert_fail@plt+0xed60>
   204cc:	ldrb	r0, [r1, #1]
   204d0:	tst	r0, #1
   204d4:	beq	204f0 <__assert_fail@plt+0xedf0>
   204d8:	ldrb	r0, [r8, r2]
   204dc:	ubfx	r7, r0, #5, #3
   204e0:	and	r0, r0, #31
   204e4:	ldr	r6, [r4, r7, lsl #2]
   204e8:	orr	r0, r6, r3, lsl r0
   204ec:	str	r0, [r4, r7, lsl #2]
   204f0:	add	r2, r2, #1
   204f4:	add	r1, r1, #2
   204f8:	mov	r0, #0
   204fc:	cmp	r2, #256	; 0x100
   20500:	bne	204cc <__assert_fail@plt+0xedcc>
   20504:	b	20460 <__assert_fail@plt+0xed60>
   20508:	mov	r2, #0
   2050c:	mov	r3, #1
   20510:	ldrb	r0, [r1]
   20514:	tst	r0, #8
   20518:	beq	20534 <__assert_fail@plt+0xee34>
   2051c:	ldrb	r0, [r8, r2]
   20520:	ubfx	r7, r0, #5, #3
   20524:	and	r0, r0, #31
   20528:	ldr	r6, [r4, r7, lsl #2]
   2052c:	orr	r0, r6, r3, lsl r0
   20530:	str	r0, [r4, r7, lsl #2]
   20534:	add	r2, r2, #1
   20538:	add	r1, r1, #2
   2053c:	mov	r0, #0
   20540:	cmp	r2, #256	; 0x100
   20544:	bne	20510 <__assert_fail@plt+0xee10>
   20548:	b	20460 <__assert_fail@plt+0xed60>
   2054c:	ldrb	r0, [r1]
   20550:	tst	r0, #1
   20554:	beq	20570 <__assert_fail@plt+0xee70>
   20558:	ldrb	r0, [r8, r2]
   2055c:	ubfx	r7, r0, #5, #3
   20560:	and	r0, r0, #31
   20564:	ldr	r6, [r4, r7, lsl #2]
   20568:	orr	r0, r6, r3, lsl r0
   2056c:	str	r0, [r4, r7, lsl #2]
   20570:	add	r2, r2, #1
   20574:	add	r1, r1, #2
   20578:	mov	r0, #0
   2057c:	cmp	r2, #256	; 0x100
   20580:	bne	2054c <__assert_fail@plt+0xee4c>
   20584:	b	20460 <__assert_fail@plt+0xed60>
   20588:	mov	r2, #0
   2058c:	mov	r3, #1
   20590:	ldrb	r0, [r1]
   20594:	tst	r0, #2
   20598:	beq	205b4 <__assert_fail@plt+0xeeb4>
   2059c:	ldrb	r0, [r8, r2]
   205a0:	ubfx	r7, r0, #5, #3
   205a4:	and	r0, r0, #31
   205a8:	ldr	r6, [r4, r7, lsl #2]
   205ac:	orr	r0, r6, r3, lsl r0
   205b0:	str	r0, [r4, r7, lsl #2]
   205b4:	add	r2, r2, #1
   205b8:	add	r1, r1, #2
   205bc:	mov	r0, #0
   205c0:	cmp	r2, #256	; 0x100
   205c4:	bne	20590 <__assert_fail@plt+0xee90>
   205c8:	b	20460 <__assert_fail@plt+0xed60>
   205cc:	ldrb	r0, [r1, #1]
   205d0:	tst	r0, #16
   205d4:	beq	205f0 <__assert_fail@plt+0xeef0>
   205d8:	ldrb	r0, [r8, r2]
   205dc:	ubfx	r7, r0, #5, #3
   205e0:	and	r0, r0, #31
   205e4:	ldr	r6, [r4, r7, lsl #2]
   205e8:	orr	r0, r6, r3, lsl r0
   205ec:	str	r0, [r4, r7, lsl #2]
   205f0:	add	r2, r2, #1
   205f4:	add	r1, r1, #2
   205f8:	mov	r0, #0
   205fc:	cmp	r2, #256	; 0x100
   20600:	bne	205cc <__assert_fail@plt+0xeecc>
   20604:	b	20460 <__assert_fail@plt+0xed60>
   20608:	ldrsh	r0, [r1]
   2060c:	cmn	r0, #1
   20610:	bgt	2062c <__assert_fail@plt+0xef2c>
   20614:	ldrb	r0, [r8, r2]
   20618:	ubfx	r7, r0, #5, #3
   2061c:	and	r0, r0, #31
   20620:	ldr	r6, [r4, r7, lsl #2]
   20624:	orr	r0, r6, r3, lsl r0
   20628:	str	r0, [r4, r7, lsl #2]
   2062c:	add	r2, r2, #1
   20630:	add	r1, r1, #2
   20634:	mov	r0, #0
   20638:	cmp	r2, #256	; 0x100
   2063c:	bne	20608 <__assert_fail@plt+0xef08>
   20640:	b	20460 <__assert_fail@plt+0xed60>
   20644:	mov	r2, #0
   20648:	mov	r3, #1
   2064c:	ldrb	r0, [r1, #1]
   20650:	tst	r0, #2
   20654:	beq	20670 <__assert_fail@plt+0xef70>
   20658:	ldrb	r0, [r8, r2]
   2065c:	ubfx	r7, r0, #5, #3
   20660:	and	r0, r0, #31
   20664:	ldr	r6, [r4, r7, lsl #2]
   20668:	orr	r0, r6, r3, lsl r0
   2066c:	str	r0, [r4, r7, lsl #2]
   20670:	add	r2, r2, #1
   20674:	add	r1, r1, #2
   20678:	mov	r0, #0
   2067c:	cmp	r2, #256	; 0x100
   20680:	bne	2064c <__assert_fail@plt+0xef4c>
   20684:	b	20460 <__assert_fail@plt+0xed60>
   20688:	ldrb	r0, [r1]
   2068c:	tst	r0, #4
   20690:	beq	206ac <__assert_fail@plt+0xefac>
   20694:	ldrb	r0, [r8, r2]
   20698:	ubfx	r7, r0, #5, #3
   2069c:	and	r0, r0, #31
   206a0:	ldr	r6, [r4, r7, lsl #2]
   206a4:	orr	r0, r6, r3, lsl r0
   206a8:	str	r0, [r4, r7, lsl #2]
   206ac:	add	r2, r2, #1
   206b0:	add	r1, r1, #2
   206b4:	mov	r0, #0
   206b8:	cmp	r2, #256	; 0x100
   206bc:	bne	20688 <__assert_fail@plt+0xef88>
   206c0:	b	20460 <__assert_fail@plt+0xed60>
   206c4:	mov	r2, #0
   206c8:	mov	r3, #1
   206cc:	ldrb	r0, [r1, #1]
   206d0:	tst	r0, #32
   206d4:	beq	206f0 <__assert_fail@plt+0xeff0>
   206d8:	ldrb	r0, [r8, r2]
   206dc:	ubfx	r7, r0, #5, #3
   206e0:	and	r0, r0, #31
   206e4:	ldr	r6, [r4, r7, lsl #2]
   206e8:	orr	r0, r6, r3, lsl r0
   206ec:	str	r0, [r4, r7, lsl #2]
   206f0:	add	r2, r2, #1
   206f4:	add	r1, r1, #2
   206f8:	mov	r0, #0
   206fc:	cmp	r2, #256	; 0x100
   20700:	bne	206cc <__assert_fail@plt+0xefcc>
   20704:	b	20460 <__assert_fail@plt+0xed60>
   20708:	mov	r2, #0
   2070c:	mov	r3, #1
   20710:	ldrb	r0, [r1, #1]
   20714:	tst	r0, #4
   20718:	beq	20734 <__assert_fail@plt+0xf034>
   2071c:	ldrb	r0, [r8, r2]
   20720:	ubfx	r7, r0, #5, #3
   20724:	and	r0, r0, #31
   20728:	ldr	r6, [r4, r7, lsl #2]
   2072c:	orr	r0, r6, r3, lsl r0
   20730:	str	r0, [r4, r7, lsl #2]
   20734:	add	r2, r2, #1
   20738:	add	r1, r1, #2
   2073c:	mov	r0, #0
   20740:	cmp	r2, #256	; 0x100
   20744:	bne	20710 <__assert_fail@plt+0xf010>
   20748:	b	20460 <__assert_fail@plt+0xed60>
   2074c:	mov	r2, #0
   20750:	mov	r3, #1
   20754:	ldrb	r0, [r1, #1]
   20758:	tst	r0, #8
   2075c:	beq	20778 <__assert_fail@plt+0xf078>
   20760:	ldrb	r0, [r8, r2]
   20764:	ubfx	r7, r0, #5, #3
   20768:	and	r0, r0, #31
   2076c:	ldr	r6, [r4, r7, lsl #2]
   20770:	orr	r0, r6, r3, lsl r0
   20774:	str	r0, [r4, r7, lsl #2]
   20778:	add	r2, r2, #1
   2077c:	add	r1, r1, #2
   20780:	mov	r0, #0
   20784:	cmp	r2, #256	; 0x100
   20788:	bne	20754 <__assert_fail@plt+0xf054>
   2078c:	b	20460 <__assert_fail@plt+0xed60>
   20790:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20794:	add	fp, sp, #24
   20798:	ldrb	r3, [r1, #24]
   2079c:	ldr	r2, [r1, #28]
   207a0:	mov	r4, #0
   207a4:	sub	r3, r3, #2
   207a8:	cmp	r3, #14
   207ac:	bhi	208d0 <__assert_fail@plt+0xf1d0>
   207b0:	add	r7, pc, #0
   207b4:	ldr	pc, [r7, r3, lsl #2]
   207b8:	andeq	r0, r2, r4, lsl #18
   207bc:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   207c0:	andeq	r0, r2, r8, ror #17
   207c4:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   207c8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   207cc:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   207d0:	strdeq	r0, [r2], -r4
   207d4:	strdeq	r0, [r2], -r4
   207d8:	andeq	r0, r2, r8, asr #16
   207dc:	andeq	r0, r2, r8, asr #16
   207e0:	strdeq	r0, [r2], -r4
   207e4:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   207e8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   207ec:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   207f0:	andeq	r0, r2, r4, lsl #18
   207f4:	ldr	r1, [r1, #16]
   207f8:	ldr	r5, [r1, #28]
   207fc:	ldr	r6, [r0, #20]
   20800:	add	r0, r2, r2, lsl #1
   20804:	mov	r1, #1
   20808:	str	r1, [r6, r0, lsl #2]!
   2080c:	mov	r0, #4
   20810:	mov	r7, r6
   20814:	str	r1, [r7, #4]!
   20818:	bl	2aa84 <__assert_fail@plt+0x19384>
   2081c:	cmp	r0, #0
   20820:	str	r0, [r6, #8]
   20824:	strne	r5, [r0]
   20828:	movne	r0, r4
   2082c:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   20830:	mov	r0, #0
   20834:	str	r0, [r7]
   20838:	str	r0, [r6]
   2083c:	mov	r4, #12
   20840:	mov	r0, r4
   20844:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20848:	ldrb	r3, [r0, #88]	; 0x58
   2084c:	add	r6, r1, #16
   20850:	add	r5, r2, r2, lsl #1
   20854:	orr	r3, r3, #1
   20858:	strb	r3, [r0, #88]	; 0x58
   2085c:	mov	r3, r6
   20860:	ldr	r7, [r1, #4]
   20864:	ldr	r1, [r1, #8]
   20868:	cmp	r1, #0
   2086c:	addne	r3, r1, #12
   20870:	cmp	r7, #0
   20874:	ldr	r1, [r3]
   20878:	addne	r6, r7, #12
   2087c:	ldr	r8, [r1, #28]
   20880:	ldr	r1, [r6]
   20884:	ldr	r6, [r0, #20]
   20888:	mov	r0, #2
   2088c:	ldr	r9, [r1, #28]
   20890:	mov	r7, r6
   20894:	str	r0, [r7, r5, lsl #2]!
   20898:	mov	r0, #8
   2089c:	bl	2aa84 <__assert_fail@plt+0x19384>
   208a0:	cmp	r0, #0
   208a4:	str	r0, [r7, #8]
   208a8:	beq	2083c <__assert_fail@plt+0xf13c>
   208ac:	add	r1, r6, r5, lsl #2
   208b0:	cmp	r9, r8
   208b4:	add	r1, r1, #4
   208b8:	bne	2090c <__assert_fail@plt+0xf20c>
   208bc:	mov	r2, #1
   208c0:	str	r2, [r1]
   208c4:	str	r9, [r0]
   208c8:	mov	r0, r4
   208cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   208d0:	ldr	r1, [r1, #16]
   208d4:	ldr	r0, [r0, #12]
   208d8:	ldr	r1, [r1, #28]
   208dc:	str	r1, [r0, r2, lsl #2]
   208e0:	mov	r0, r4
   208e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   208e8:	ldr	r7, [r1, #16]
   208ec:	ldr	r3, [r0, #12]
   208f0:	ldr	r5, [r7, #28]
   208f4:	str	r5, [r3, r2, lsl #2]
   208f8:	ldrb	r1, [r1, #24]
   208fc:	cmp	r1, #4
   20900:	beq	207fc <__assert_fail@plt+0xf0fc>
   20904:	mov	r0, r4
   20908:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2090c:	mov	r2, #2
   20910:	str	r2, [r1]
   20914:	stmge	r0, {r8, r9}
   20918:	strlt	r9, [r0]
   2091c:	strlt	r8, [r0, #4]
   20920:	mov	r0, r4
   20924:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2092c:	add	fp, sp, #28
   20930:	sub	sp, sp, #4
   20934:	ldr	r6, [r3, #4]
   20938:	tst	r2, #16
   2093c:	mov	r9, r3
   20940:	mov	r7, r1
   20944:	mov	r8, r0
   20948:	cmpne	r6, #0
   2094c:	bne	20b04 <__assert_fail@plt+0xf404>
   20950:	ldr	r1, [r7, #64]	; 0x40
   20954:	cmp	r1, #31
   20958:	beq	20b2c <__assert_fail@plt+0xf42c>
   2095c:	ldr	r0, [r7, #56]	; 0x38
   20960:	add	r2, r1, #1
   20964:	add	r0, r0, r1, lsl #5
   20968:	mov	r1, #0
   2096c:	vmov.i32	q8, #0	; 0x00000000
   20970:	str	r2, [r7, #64]	; 0x40
   20974:	add	sl, r0, #4
   20978:	mov	r2, #8
   2097c:	str	r1, [r0, #20]
   20980:	str	r1, [r0, #24]
   20984:	str	r2, [r0, #28]
   20988:	mov	r0, #28
   2098c:	mov	r1, sl
   20990:	vst1.32	{d16-d17}, [r1], r0
   20994:	mvn	r0, #0
   20998:	str	r0, [r1]
   2099c:	ldr	r1, [r7, #64]	; 0x40
   209a0:	cmp	r1, #31
   209a4:	beq	20b8c <__assert_fail@plt+0xf48c>
   209a8:	ldr	r0, [r7, #56]	; 0x38
   209ac:	add	r2, r1, #1
   209b0:	add	r0, r0, r1, lsl #5
   209b4:	mov	r1, #0
   209b8:	vmov.i32	q8, #0	; 0x00000000
   209bc:	str	r2, [r7, #64]	; 0x40
   209c0:	add	r5, r0, #4
   209c4:	mov	r2, #9
   209c8:	str	r1, [r0, #20]
   209cc:	str	r1, [r0, #24]
   209d0:	str	r2, [r0, #28]
   209d4:	mov	r0, #28
   209d8:	mov	r1, r5
   209dc:	vst1.32	{d16-d17}, [r1], r0
   209e0:	mvn	r0, #0
   209e4:	str	r0, [r1]
   209e8:	cmp	r6, #0
   209ec:	mov	r4, r5
   209f0:	beq	20a44 <__assert_fail@plt+0xf344>
   209f4:	ldr	r1, [r7, #64]	; 0x40
   209f8:	cmp	r1, #31
   209fc:	beq	20b54 <__assert_fail@plt+0xf454>
   20a00:	ldr	r0, [r7, #56]	; 0x38
   20a04:	add	r2, r1, #1
   20a08:	add	r4, r0, r1, lsl #5
   20a0c:	mov	r0, #0
   20a10:	mov	r1, #16
   20a14:	cmp	r5, #0
   20a18:	str	r2, [r7, #64]	; 0x40
   20a1c:	str	r0, [r4, #4]!
   20a20:	mvn	r2, #0
   20a24:	add	r3, r4, #20
   20a28:	str	r6, [r4, #4]
   20a2c:	str	r5, [r4, #8]
   20a30:	str	r0, [r4, #12]
   20a34:	str	r0, [r4, #16]
   20a38:	stm	r3, {r0, r1, r2}
   20a3c:	str	r4, [r6]
   20a40:	strne	r4, [r5]
   20a44:	ldr	r1, [r7, #64]	; 0x40
   20a48:	cmp	r1, #31
   20a4c:	beq	20bd8 <__assert_fail@plt+0xf4d8>
   20a50:	ldr	r0, [r7, #56]	; 0x38
   20a54:	add	r2, r1, #1
   20a58:	add	r6, r0, r1, lsl #5
   20a5c:	mov	r0, #0
   20a60:	mov	r1, #16
   20a64:	cmp	sl, #0
   20a68:	str	r2, [r7, #64]	; 0x40
   20a6c:	str	r0, [r6, #4]!
   20a70:	mvn	r2, #0
   20a74:	add	r3, r6, #20
   20a78:	str	sl, [r6, #4]
   20a7c:	str	r4, [r6, #8]
   20a80:	str	r0, [r6, #12]
   20a84:	str	r0, [r6, #16]
   20a88:	stm	r3, {r0, r1, r2}
   20a8c:	strne	r6, [sl]
   20a90:	cmp	r4, #0
   20a94:	strne	r6, [r4]
   20a98:	cmp	r5, #0
   20a9c:	beq	20aac <__assert_fail@plt+0xf3ac>
   20aa0:	cmp	sl, #0
   20aa4:	cmpne	r4, #0
   20aa8:	bne	20ac4 <__assert_fail@plt+0xf3c4>
   20aac:	mov	r0, #12
   20ab0:	mov	r6, #0
   20ab4:	str	r0, [r8]
   20ab8:	mov	r0, r6
   20abc:	sub	sp, fp, #28
   20ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ac4:	cmp	r6, #0
   20ac8:	beq	20aac <__assert_fail@plt+0xf3ac>
   20acc:	ldr	r0, [r9, #20]
   20ad0:	str	r0, [r5, #20]
   20ad4:	str	r0, [sl, #20]
   20ad8:	ldr	r1, [r9, #24]
   20adc:	ldr	r0, [r5, #24]
   20ae0:	lsr	r1, r1, #19
   20ae4:	bfi	r0, r1, #19, #1
   20ae8:	str	r0, [r5, #24]
   20aec:	ldr	r0, [sl, #24]
   20af0:	bfi	r0, r1, #19, #1
   20af4:	str	r0, [sl, #24]
   20af8:	mov	r0, r6
   20afc:	sub	sp, fp, #28
   20b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b04:	ldr	r0, [r9, #20]
   20b08:	cmp	r0, #31
   20b0c:	bgt	20b20 <__assert_fail@plt+0xf420>
   20b10:	ldr	r1, [r7, #80]	; 0x50
   20b14:	mov	r2, #1
   20b18:	tst	r1, r2, lsl r0
   20b1c:	bne	20950 <__assert_fail@plt+0xf250>
   20b20:	mov	r0, r6
   20b24:	sub	sp, fp, #28
   20b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b2c:	mov	r0, #996	; 0x3e4
   20b30:	bl	2aa84 <__assert_fail@plt+0x19384>
   20b34:	cmp	r0, #0
   20b38:	beq	20b7c <__assert_fail@plt+0xf47c>
   20b3c:	ldr	r1, [r7, #56]	; 0x38
   20b40:	str	r1, [r0]
   20b44:	mov	r1, #0
   20b48:	str	r1, [r7, #64]	; 0x40
   20b4c:	str	r0, [r7, #56]	; 0x38
   20b50:	b	20960 <__assert_fail@plt+0xf260>
   20b54:	mov	r0, #996	; 0x3e4
   20b58:	bl	2aa84 <__assert_fail@plt+0x19384>
   20b5c:	cmp	r0, #0
   20b60:	beq	20bc8 <__assert_fail@plt+0xf4c8>
   20b64:	ldr	r1, [r7, #56]	; 0x38
   20b68:	str	r1, [r0]
   20b6c:	mov	r1, #0
   20b70:	str	r1, [r7, #64]	; 0x40
   20b74:	str	r0, [r7, #56]	; 0x38
   20b78:	b	20a04 <__assert_fail@plt+0xf304>
   20b7c:	mov	sl, #0
   20b80:	ldr	r1, [r7, #64]	; 0x40
   20b84:	cmp	r1, #31
   20b88:	bne	209a8 <__assert_fail@plt+0xf2a8>
   20b8c:	mov	r0, #996	; 0x3e4
   20b90:	bl	2aa84 <__assert_fail@plt+0x19384>
   20b94:	cmp	r0, #0
   20b98:	beq	20bb4 <__assert_fail@plt+0xf4b4>
   20b9c:	ldr	r1, [r7, #56]	; 0x38
   20ba0:	str	r1, [r0]
   20ba4:	mov	r1, #0
   20ba8:	str	r1, [r7, #64]	; 0x40
   20bac:	str	r0, [r7, #56]	; 0x38
   20bb0:	b	209ac <__assert_fail@plt+0xf2ac>
   20bb4:	mov	r5, #0
   20bb8:	cmp	r6, #0
   20bbc:	mov	r4, r5
   20bc0:	bne	209f4 <__assert_fail@plt+0xf2f4>
   20bc4:	b	20a44 <__assert_fail@plt+0xf344>
   20bc8:	mov	r4, #0
   20bcc:	ldr	r1, [r7, #64]	; 0x40
   20bd0:	cmp	r1, #31
   20bd4:	bne	20a50 <__assert_fail@plt+0xf350>
   20bd8:	mov	r0, #996	; 0x3e4
   20bdc:	bl	2aa84 <__assert_fail@plt+0x19384>
   20be0:	cmp	r0, #0
   20be4:	beq	20c00 <__assert_fail@plt+0xf500>
   20be8:	ldr	r1, [r7, #56]	; 0x38
   20bec:	str	r1, [r0]
   20bf0:	mov	r1, #0
   20bf4:	str	r1, [r7, #64]	; 0x40
   20bf8:	str	r0, [r7, #56]	; 0x38
   20bfc:	b	20a54 <__assert_fail@plt+0xf354>
   20c00:	mov	r6, #0
   20c04:	cmp	r5, #0
   20c08:	bne	20aa0 <__assert_fail@plt+0xf3a0>
   20c0c:	b	20aac <__assert_fail@plt+0xf3ac>
   20c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c14:	add	fp, sp, #28
   20c18:	sub	sp, sp, #12
   20c1c:	mov	r4, r0
   20c20:	ldr	r7, [r0, #4]
   20c24:	ldr	r0, [r0, #8]
   20c28:	mov	r5, r2
   20c2c:	mov	r9, r1
   20c30:	cmp	r0, r7
   20c34:	bcs	20d00 <__assert_fail@plt+0xf600>
   20c38:	ldr	r1, [r4]
   20c3c:	str	r9, [r1, r0, lsl #3]!
   20c40:	str	r5, [r1, #4]
   20c44:	ldr	r0, [r4]
   20c48:	ldr	r1, [r4, #8]
   20c4c:	add	r0, r0, r1, lsl #3
   20c50:	ldr	r1, [r0, #4]
   20c54:	bfc	r1, #8, #10
   20c58:	str	r1, [r0, #4]
   20c5c:	uxtb	r1, r5
   20c60:	cmp	r1, #5
   20c64:	bne	20c78 <__assert_fail@plt+0xf578>
   20c68:	ldr	r2, [r4, #92]	; 0x5c
   20c6c:	mov	r0, #1048576	; 0x100000
   20c70:	cmp	r2, #1
   20c74:	bgt	20c88 <__assert_fail@plt+0xf588>
   20c78:	sub	r0, r1, #6
   20c7c:	clz	r0, r0
   20c80:	lsr	r0, r0, #5
   20c84:	lsl	r0, r0, #20
   20c88:	ldr	r1, [r4]
   20c8c:	ldr	r2, [r4, #8]
   20c90:	add	r1, r1, r2, lsl #3
   20c94:	ldr	r2, [r1, #4]
   20c98:	bic	r2, r2, #1048576	; 0x100000
   20c9c:	orr	r0, r2, r0
   20ca0:	mvn	r2, #0
   20ca4:	str	r0, [r1, #4]
   20ca8:	ldr	r0, [r4, #8]
   20cac:	ldr	r1, [r4, #12]
   20cb0:	str	r2, [r1, r0, lsl #2]
   20cb4:	mov	r2, #0
   20cb8:	ldr	r0, [r4, #8]
   20cbc:	ldr	r1, [r4, #20]
   20cc0:	add	r0, r0, r0, lsl #1
   20cc4:	str	r2, [r1, r0, lsl #2]!
   20cc8:	str	r2, [r1, #4]
   20ccc:	str	r2, [r1, #8]
   20cd0:	ldr	r0, [r4, #8]
   20cd4:	ldr	r1, [r4, #24]
   20cd8:	add	r0, r0, r0, lsl #1
   20cdc:	str	r2, [r1, r0, lsl #2]!
   20ce0:	str	r2, [r1, #4]
   20ce4:	str	r2, [r1, #8]
   20ce8:	ldr	r6, [r4, #8]
   20cec:	add	r0, r6, #1
   20cf0:	str	r0, [r4, #8]
   20cf4:	mov	r0, r6
   20cf8:	sub	sp, fp, #28
   20cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d00:	movw	r0, #21845	; 0x5555
   20d04:	lsl	r1, r7, #1
   20d08:	mvn	r6, #0
   20d0c:	movt	r0, #5461	; 0x1555
   20d10:	cmp	r1, r0
   20d14:	bhi	20cf4 <__assert_fail@plt+0xf5f4>
   20d18:	ldr	r0, [r4]
   20d1c:	str	r1, [sp, #8]
   20d20:	lsl	r1, r7, #4
   20d24:	bl	2aab4 <__assert_fail@plt+0x193b4>
   20d28:	cmp	r0, #0
   20d2c:	beq	20cf4 <__assert_fail@plt+0xf5f4>
   20d30:	str	r0, [r4]
   20d34:	lsl	r8, r7, #3
   20d38:	ldr	r0, [r4, #12]
   20d3c:	mov	r1, r8
   20d40:	bl	2aab4 <__assert_fail@plt+0x193b4>
   20d44:	str	r0, [sp, #4]
   20d48:	ldr	r0, [r4, #16]
   20d4c:	mov	r1, r8
   20d50:	bl	2aab4 <__assert_fail@plt+0x193b4>
   20d54:	mov	r2, r0
   20d58:	ldr	r0, [r4, #20]
   20d5c:	add	r1, r7, r7, lsl #1
   20d60:	lsl	r8, r1, #3
   20d64:	mov	r7, r2
   20d68:	mov	r1, r8
   20d6c:	bl	2aab4 <__assert_fail@plt+0x193b4>
   20d70:	mov	sl, r0
   20d74:	ldr	r0, [r4, #24]
   20d78:	mov	r1, r8
   20d7c:	bl	2aab4 <__assert_fail@plt+0x193b4>
   20d80:	mov	r8, r0
   20d84:	ldr	r0, [sp, #4]
   20d88:	cmp	r0, #0
   20d8c:	beq	20d9c <__assert_fail@plt+0xf69c>
   20d90:	cmp	r7, #0
   20d94:	cmpne	sl, #0
   20d98:	bne	20dc4 <__assert_fail@plt+0xf6c4>
   20d9c:	bl	13de4 <__assert_fail@plt+0x26e4>
   20da0:	mov	r0, r7
   20da4:	bl	13de4 <__assert_fail@plt+0x26e4>
   20da8:	mov	r0, sl
   20dac:	bl	13de4 <__assert_fail@plt+0x26e4>
   20db0:	mov	r0, r8
   20db4:	bl	13de4 <__assert_fail@plt+0x26e4>
   20db8:	mov	r0, r6
   20dbc:	sub	sp, fp, #28
   20dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20dc4:	cmp	r8, #0
   20dc8:	beq	20d9c <__assert_fail@plt+0xf69c>
   20dcc:	add	r1, r4, #12
   20dd0:	stm	r1, {r0, r7, sl}
   20dd4:	str	r8, [r4, #24]
   20dd8:	ldr	r0, [sp, #8]
   20ddc:	str	r0, [r4, #4]
   20de0:	ldr	r0, [r4, #8]
   20de4:	b	20c38 <__assert_fail@plt+0xf538>
   20de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dec:	add	fp, sp, #28
   20df0:	sub	sp, sp, #44	; 0x2c
   20df4:	mov	r8, r0
   20df8:	ldr	r0, [r1, #20]
   20dfc:	add	r4, r2, r2, lsl #1
   20e00:	mov	r5, r1
   20e04:	mov	r1, #0
   20e08:	mov	r9, r3
   20e0c:	mov	r6, r2
   20e10:	add	r0, r0, r4, lsl #2
   20e14:	ldr	r0, [r0, #4]
   20e18:	str	r1, [sp, #36]	; 0x24
   20e1c:	add	r0, r0, #1
   20e20:	str	r0, [sp, #32]
   20e24:	lsl	r0, r0, #2
   20e28:	bl	2aa84 <__assert_fail@plt+0x19384>
   20e2c:	cmp	r0, #0
   20e30:	str	r0, [sp, #40]	; 0x28
   20e34:	beq	20ffc <__assert_fail@plt+0xf8fc>
   20e38:	mov	r1, #1
   20e3c:	str	r6, [r0]
   20e40:	str	r1, [sp, #36]	; 0x24
   20e44:	mvn	r1, #0
   20e48:	ldr	r0, [r5, #24]
   20e4c:	add	r0, r0, r4, lsl #2
   20e50:	str	r1, [r0, #4]
   20e54:	ldr	r2, [r5]
   20e58:	add	r0, r2, r6, lsl #3
   20e5c:	ldr	r0, [r0, #4]
   20e60:	ubfx	r1, r0, #8, #10
   20e64:	cmp	r1, #0
   20e68:	beq	20ec4 <__assert_fail@plt+0xf7c4>
   20e6c:	ldr	r3, [r5, #20]
   20e70:	add	r3, r3, r4, lsl #2
   20e74:	ldr	r7, [r3, #4]
   20e78:	cmp	r7, #0
   20e7c:	beq	20ec4 <__assert_fail@plt+0xf7c4>
   20e80:	ldr	r3, [r3, #8]
   20e84:	ldr	r3, [r3]
   20e88:	add	r2, r2, r3, lsl #3
   20e8c:	ldrb	r2, [r2, #6]
   20e90:	tst	r2, #4
   20e94:	bne	20ec4 <__assert_fail@plt+0xf7c4>
   20e98:	str	r1, [sp]
   20e9c:	mov	r0, r5
   20ea0:	mov	r1, r6
   20ea4:	mov	r2, r6
   20ea8:	mov	r3, r6
   20eac:	bl	21008 <__assert_fail@plt+0xf908>
   20eb0:	cmp	r0, #0
   20eb4:	bne	20ff4 <__assert_fail@plt+0xf8f4>
   20eb8:	ldr	r0, [r5]
   20ebc:	add	r0, r0, r6, lsl #3
   20ec0:	ldr	r0, [r0, #4]
   20ec4:	tst	r0, #8
   20ec8:	beq	20fc8 <__assert_fail@plt+0xf8c8>
   20ecc:	ldr	r0, [r5, #20]
   20ed0:	add	r1, r0, r4, lsl #2
   20ed4:	ldr	r1, [r1, #4]
   20ed8:	cmp	r1, #1
   20edc:	blt	20fc8 <__assert_fail@plt+0xf8c8>
   20ee0:	str	r8, [sp, #12]
   20ee4:	mov	r8, #0
   20ee8:	add	r7, sp, #16
   20eec:	add	sl, sp, #32
   20ef0:	mov	r6, #0
   20ef4:	str	r9, [sp, #8]
   20ef8:	add	r0, r0, r4, lsl #2
   20efc:	ldr	r0, [r0, #8]
   20f00:	ldr	r2, [r0, r6, lsl #2]
   20f04:	ldr	r0, [r5, #24]
   20f08:	add	r9, r2, r2, lsl #1
   20f0c:	add	r0, r0, r9, lsl #2
   20f10:	ldr	r1, [r0, #4]
   20f14:	cmn	r1, #1
   20f18:	beq	20f80 <__assert_fail@plt+0xf880>
   20f1c:	cmp	r1, #0
   20f20:	bne	20f40 <__assert_fail@plt+0xf840>
   20f24:	mov	r0, r7
   20f28:	mov	r1, r5
   20f2c:	mov	r3, #0
   20f30:	bl	20de8 <__assert_fail@plt+0xf6e8>
   20f34:	cmp	r0, #0
   20f38:	beq	20f50 <__assert_fail@plt+0xf850>
   20f3c:	b	20ff4 <__assert_fail@plt+0xf8f4>
   20f40:	vldr	d16, [r0]
   20f44:	ldr	r0, [r0, #8]
   20f48:	str	r0, [sp, #24]
   20f4c:	vstr	d16, [sp, #16]
   20f50:	mov	r0, sl
   20f54:	mov	r1, r7
   20f58:	bl	214cc <__assert_fail@plt+0xfdcc>
   20f5c:	cmp	r0, #0
   20f60:	bne	20ff4 <__assert_fail@plt+0xf8f4>
   20f64:	ldr	r0, [r5, #24]
   20f68:	add	r0, r0, r9, lsl #2
   20f6c:	ldr	r0, [r0, #4]
   20f70:	cmp	r0, #0
   20f74:	bne	20f84 <__assert_fail@plt+0xf884>
   20f78:	ldr	r0, [sp, #24]
   20f7c:	bl	13de4 <__assert_fail@plt+0x26e4>
   20f80:	mov	r8, #1
   20f84:	ldr	r0, [r5, #20]
   20f88:	add	r6, r6, #1
   20f8c:	add	r1, r0, r4, lsl #2
   20f90:	ldr	r1, [r1, #4]
   20f94:	cmp	r6, r1
   20f98:	blt	20ef8 <__assert_fail@plt+0xf7f8>
   20f9c:	tst	r8, #1
   20fa0:	ldr	r8, [sp, #12]
   20fa4:	ldr	r0, [sp, #8]
   20fa8:	beq	20fc8 <__assert_fail@plt+0xf8c8>
   20fac:	cmp	r0, #0
   20fb0:	bne	20fc8 <__assert_fail@plt+0xf8c8>
   20fb4:	ldr	r0, [r5, #24]
   20fb8:	mov	r1, #0
   20fbc:	add	r0, r0, r4, lsl #2
   20fc0:	str	r1, [r0, #4]
   20fc4:	b	20fe0 <__assert_fail@plt+0xf8e0>
   20fc8:	ldr	r0, [r5, #24]
   20fcc:	vldr	d16, [sp, #32]
   20fd0:	ldr	r1, [sp, #40]	; 0x28
   20fd4:	add	r0, r0, r4, lsl #2
   20fd8:	str	r1, [r0, #8]
   20fdc:	vstr	d16, [r0]
   20fe0:	ldr	r0, [sp, #40]	; 0x28
   20fe4:	vldr	d16, [sp, #32]
   20fe8:	str	r0, [r8, #8]
   20fec:	mov	r0, #0
   20ff0:	vstr	d16, [r8]
   20ff4:	sub	sp, fp, #28
   20ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ffc:	mov	r0, #12
   21000:	sub	sp, fp, #28
   21004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2100c:	add	fp, sp, #28
   21010:	sub	sp, sp, #20
   21014:	mov	r9, r0
   21018:	ldr	r0, [fp, #8]
   2101c:	mov	sl, r2
   21020:	mov	r8, r1
   21024:	str	r3, [sp, #8]
   21028:	str	r0, [sp, #16]
   2102c:	ldr	r2, [r9]
   21030:	add	r3, r2, r8, lsl #3
   21034:	ldrb	r0, [r3, #4]!
   21038:	cmp	r0, #4
   2103c:	bne	2112c <__assert_fail@plt+0xfa2c>
   21040:	ldr	r0, [r9, #12]
   21044:	ldr	r1, [r9, #20]
   21048:	add	r6, sl, sl, lsl #1
   2104c:	ldr	r4, [r0, r8, lsl #2]
   21050:	add	r0, r1, r6, lsl #2
   21054:	mov	r1, #0
   21058:	str	r1, [r0, #4]
   2105c:	mov	r0, r9
   21060:	ldr	r1, [r2, r4, lsl #3]!
   21064:	ldr	r2, [r2, #4]
   21068:	bl	20c10 <__assert_fail@plt+0xf510>
   2106c:	mov	r7, r0
   21070:	mov	r0, #12
   21074:	cmn	r7, #1
   21078:	str	r0, [sp, #12]
   2107c:	beq	214a0 <__assert_fail@plt+0xfda0>
   21080:	ldr	r1, [r9]
   21084:	movw	r0, #65280	; 0xff00
   21088:	movw	r3, #255	; 0xff
   2108c:	movt	r0, #3
   21090:	movt	r3, #65532	; 0xfffc
   21094:	mov	ip, r0
   21098:	ldr	r0, [sp, #16]
   2109c:	add	r1, r1, r7, lsl #3
   210a0:	ldr	r2, [r1, #4]
   210a4:	and	r0, ip, r0, lsl #8
   210a8:	and	r2, r2, r3
   210ac:	orr	r0, r2, r0
   210b0:	str	r0, [r1, #4]
   210b4:	ldr	r0, [r9]
   210b8:	add	r1, r0, r4, lsl #3
   210bc:	add	r0, r0, r7, lsl #3
   210c0:	ldr	r1, [r1, #4]
   210c4:	ldr	r2, [r0, #4]
   210c8:	and	r1, r1, ip
   210cc:	orr	r1, r1, r2
   210d0:	str	r1, [r0, #4]
   210d4:	ldr	r0, [r9]
   210d8:	add	r0, r0, r7, lsl #3
   210dc:	ldr	r1, [r0, #4]
   210e0:	orr	r1, r1, #262144	; 0x40000
   210e4:	str	r1, [r0, #4]
   210e8:	ldr	r0, [r9, #16]
   210ec:	str	r4, [r0, r7, lsl #2]
   210f0:	ldr	r0, [r9, #12]
   210f4:	ldr	r1, [r0, r8, lsl #2]
   210f8:	str	r1, [r0, sl, lsl #2]
   210fc:	mov	r1, r7
   21100:	ldr	r0, [r9, #20]
   21104:	add	r0, r0, r6, lsl #2
   21108:	bl	21674 <__assert_fail@plt+0xff74>
   2110c:	mov	r1, #0
   21110:	cmp	r0, #0
   21114:	mov	r8, r4
   21118:	mov	sl, r7
   2111c:	beq	214a0 <__assert_fail@plt+0xfda0>
   21120:	cmp	r1, #0
   21124:	beq	2102c <__assert_fail@plt+0xf92c>
   21128:	b	21490 <__assert_fail@plt+0xfd90>
   2112c:	ldr	r0, [r9, #20]
   21130:	add	ip, r8, r8, lsl #1
   21134:	add	r7, r0, ip, lsl #2
   21138:	ldr	r1, [r7, #4]
   2113c:	cmp	r1, #0
   21140:	beq	214ac <__assert_fail@plt+0xfdac>
   21144:	ldr	r7, [r7, #8]
   21148:	add	r6, sl, sl, lsl #1
   2114c:	cmp	r1, #1
   21150:	add	r0, r0, r6, lsl #2
   21154:	ldr	r5, [r7]
   21158:	mov	r7, #0
   2115c:	str	r7, [r0, #4]
   21160:	bne	2119c <__assert_fail@plt+0xfa9c>
   21164:	ldr	r1, [sp, #8]
   21168:	cmp	r8, r1
   2116c:	bne	2139c <__assert_fail@plt+0xfc9c>
   21170:	cmp	sl, r8
   21174:	beq	2139c <__assert_fail@plt+0xfc9c>
   21178:	mov	r1, r5
   2117c:	bl	21674 <__assert_fail@plt+0xff74>
   21180:	ldr	r8, [sp, #8]
   21184:	cmp	r0, #0
   21188:	mov	r1, #1
   2118c:	movwne	r1, #2
   21190:	cmp	r1, #0
   21194:	beq	2102c <__assert_fail@plt+0xf92c>
   21198:	b	21490 <__assert_fail@plt+0xfd90>
   2119c:	ldr	r1, [r9, #8]
   211a0:	ldr	r8, [sp, #16]
   211a4:	str	r6, [sp, #4]
   211a8:	sub	r3, r1, #1
   211ac:	cmp	r3, #1
   211b0:	blt	21200 <__assert_fail@plt+0xfb00>
   211b4:	add	r3, r2, r3, lsl #3
   211b8:	ldr	r6, [r3, #4]
   211bc:	ands	r3, r6, #262144	; 0x40000
   211c0:	beq	21200 <__assert_fail@plt+0xfb00>
   211c4:	ldr	r4, [r9, #16]
   211c8:	sub	r3, r2, #12
   211cc:	sub	r4, r4, #4
   211d0:	ldr	r7, [r4, r1, lsl #2]
   211d4:	cmp	r7, r5
   211d8:	ubfxeq	r7, r6, #8, #10
   211dc:	cmpeq	r7, r8
   211e0:	beq	21464 <__assert_fail@plt+0xfd64>
   211e4:	sub	r7, r1, #2
   211e8:	cmp	r7, #1
   211ec:	blt	21200 <__assert_fail@plt+0xfb00>
   211f0:	ldr	r6, [r3, r1, lsl #3]
   211f4:	sub	r1, r1, #1
   211f8:	ands	r7, r6, #262144	; 0x40000
   211fc:	bne	211d0 <__assert_fail@plt+0xfad0>
   21200:	ldr	r1, [r2, r5, lsl #3]!
   21204:	mov	r0, r9
   21208:	mov	sl, ip
   2120c:	ldr	r2, [r2, #4]
   21210:	bl	20c10 <__assert_fail@plt+0xf510>
   21214:	mov	r4, r0
   21218:	mov	r0, #12
   2121c:	cmn	r4, #1
   21220:	str	r0, [sp, #12]
   21224:	beq	214a0 <__assert_fail@plt+0xfda0>
   21228:	ldr	r1, [r9]
   2122c:	movw	r0, #65280	; 0xff00
   21230:	movw	r7, #255	; 0xff
   21234:	ldr	r6, [sp, #4]
   21238:	movt	r0, #3
   2123c:	movt	r7, #65532	; 0xfffc
   21240:	mov	r3, r0
   21244:	and	r0, r0, r8, lsl #8
   21248:	add	r1, r1, r4, lsl #3
   2124c:	ldr	r2, [r1, #4]
   21250:	and	r2, r2, r7
   21254:	orr	r0, r2, r0
   21258:	str	r0, [r1, #4]
   2125c:	ldr	r0, [r9]
   21260:	add	r1, r0, r5, lsl #3
   21264:	add	r0, r0, r4, lsl #3
   21268:	ldr	r1, [r1, #4]
   2126c:	ldr	r2, [r0, #4]
   21270:	and	r1, r1, r3
   21274:	orr	r1, r1, r2
   21278:	str	r1, [r0, #4]
   2127c:	ldr	r0, [r9]
   21280:	add	r0, r0, r4, lsl #3
   21284:	ldr	r1, [r0, #4]
   21288:	orr	r1, r1, #262144	; 0x40000
   2128c:	str	r1, [r0, #4]
   21290:	mov	r1, r4
   21294:	ldr	r0, [r9, #16]
   21298:	str	r5, [r0, r4, lsl #2]
   2129c:	ldr	r0, [r9, #20]
   212a0:	add	r0, r0, r6, lsl #2
   212a4:	bl	21674 <__assert_fail@plt+0xff74>
   212a8:	cmp	r0, #0
   212ac:	beq	214a0 <__assert_fail@plt+0xfda0>
   212b0:	ldr	r0, [sp, #16]
   212b4:	ldr	r3, [sp, #8]
   212b8:	mov	r1, r5
   212bc:	mov	r2, r4
   212c0:	str	r0, [sp]
   212c4:	mov	r0, r9
   212c8:	bl	21008 <__assert_fail@plt+0xf908>
   212cc:	cmp	r0, #0
   212d0:	bne	214bc <__assert_fail@plt+0xfdbc>
   212d4:	ldr	r1, [r9, #20]
   212d8:	ldr	r0, [r9]
   212dc:	add	r1, r1, sl, lsl #2
   212e0:	ldr	r1, [r1, #8]
   212e4:	ldr	r8, [r1, #4]
   212e8:	ldr	r1, [r0, r8, lsl #3]!
   212ec:	ldr	r2, [r0, #4]
   212f0:	mov	r0, r9
   212f4:	bl	20c10 <__assert_fail@plt+0xf510>
   212f8:	mov	sl, r0
   212fc:	mov	r0, #12
   21300:	cmn	sl, #1
   21304:	str	r0, [sp, #12]
   21308:	beq	214a0 <__assert_fail@plt+0xfda0>
   2130c:	ldr	r1, [r9]
   21310:	movw	r0, #65280	; 0xff00
   21314:	movw	r7, #255	; 0xff
   21318:	movt	r0, #3
   2131c:	movt	r7, #65532	; 0xfffc
   21320:	mov	r3, r0
   21324:	ldr	r0, [sp, #16]
   21328:	add	r1, r1, sl, lsl #3
   2132c:	ldr	r2, [r1, #4]
   21330:	and	r0, r3, r0, lsl #8
   21334:	and	r2, r2, r7
   21338:	orr	r0, r2, r0
   2133c:	str	r0, [r1, #4]
   21340:	ldr	r0, [r9]
   21344:	add	r1, r0, r8, lsl #3
   21348:	add	r0, r0, sl, lsl #3
   2134c:	ldr	r1, [r1, #4]
   21350:	ldr	r2, [r0, #4]
   21354:	and	r1, r1, r3
   21358:	orr	r1, r1, r2
   2135c:	str	r1, [r0, #4]
   21360:	ldr	r0, [r9]
   21364:	add	r0, r0, sl, lsl #3
   21368:	ldr	r1, [r0, #4]
   2136c:	orr	r1, r1, #262144	; 0x40000
   21370:	str	r1, [r0, #4]
   21374:	mov	r1, sl
   21378:	ldr	r0, [r9, #16]
   2137c:	str	r8, [r0, sl, lsl #2]
   21380:	ldr	r0, [r9, #20]
   21384:	add	r0, r0, r6, lsl #2
   21388:	bl	21674 <__assert_fail@plt+0xff74>
   2138c:	mov	r1, #0
   21390:	cmp	r0, #0
   21394:	bne	21120 <__assert_fail@plt+0xfa20>
   21398:	b	214a0 <__assert_fail@plt+0xfda0>
   2139c:	ldr	r1, [r2, r5, lsl #3]!
   213a0:	ldr	r4, [r3]
   213a4:	mov	r0, r9
   213a8:	ldr	r2, [r2, #4]
   213ac:	bl	20c10 <__assert_fail@plt+0xf510>
   213b0:	mov	sl, r0
   213b4:	ubfx	r0, r4, #8, #10
   213b8:	mov	r1, #12
   213bc:	cmn	sl, #1
   213c0:	str	r1, [sp, #12]
   213c4:	beq	214a0 <__assert_fail@plt+0xfda0>
   213c8:	ldr	r1, [sp, #16]
   213cc:	movw	r7, #255	; 0xff
   213d0:	movt	r7, #65532	; 0xfffc
   213d4:	orr	r1, r0, r1
   213d8:	movw	r0, #65280	; 0xff00
   213dc:	movt	r0, #3
   213e0:	str	r1, [sp, #16]
   213e4:	mov	r3, r0
   213e8:	and	r0, r0, r1, lsl #8
   213ec:	ldr	r1, [r9]
   213f0:	add	r1, r1, sl, lsl #3
   213f4:	ldr	r2, [r1, #4]
   213f8:	and	r2, r2, r7
   213fc:	orr	r0, r2, r0
   21400:	str	r0, [r1, #4]
   21404:	ldr	r0, [r9]
   21408:	add	r1, r0, r5, lsl #3
   2140c:	add	r0, r0, sl, lsl #3
   21410:	ldr	r1, [r1, #4]
   21414:	ldr	r2, [r0, #4]
   21418:	and	r1, r1, r3
   2141c:	orr	r1, r1, r2
   21420:	str	r1, [r0, #4]
   21424:	ldr	r0, [r9]
   21428:	add	r0, r0, sl, lsl #3
   2142c:	ldr	r1, [r0, #4]
   21430:	orr	r1, r1, #262144	; 0x40000
   21434:	str	r1, [r0, #4]
   21438:	mov	r1, sl
   2143c:	ldr	r0, [r9, #16]
   21440:	str	r5, [r0, sl, lsl #2]
   21444:	ldr	r0, [r9, #20]
   21448:	add	r0, r0, r6, lsl #2
   2144c:	bl	21674 <__assert_fail@plt+0xff74>
   21450:	mov	r1, #0
   21454:	cmp	r0, #0
   21458:	mov	r8, r5
   2145c:	bne	21120 <__assert_fail@plt+0xfa20>
   21460:	b	214a0 <__assert_fail@plt+0xfda0>
   21464:	sub	r1, r1, #1
   21468:	mov	sl, ip
   2146c:	bl	21674 <__assert_fail@plt+0xff74>
   21470:	ldr	r6, [sp, #4]
   21474:	cmp	r0, #0
   21478:	bne	212d4 <__assert_fail@plt+0xfbd4>
   2147c:	mov	r0, #12
   21480:	str	r0, [sp, #12]
   21484:	ldr	r0, [sp, #12]
   21488:	sub	sp, fp, #28
   2148c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21490:	mov	r0, #12
   21494:	cmp	r1, #2
   21498:	str	r0, [sp, #12]
   2149c:	beq	214b8 <__assert_fail@plt+0xfdb8>
   214a0:	ldr	r0, [sp, #12]
   214a4:	sub	sp, fp, #28
   214a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214ac:	ldr	r0, [r9, #12]
   214b0:	ldr	r1, [r0, r8, lsl #2]
   214b4:	str	r1, [r0, sl, lsl #2]
   214b8:	mov	r0, #0
   214bc:	str	r0, [sp, #12]
   214c0:	ldr	r0, [sp, #12]
   214c4:	sub	sp, fp, #28
   214c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   214d0:	add	fp, sp, #24
   214d4:	mov	r8, #0
   214d8:	cmp	r1, #0
   214dc:	beq	2164c <__assert_fail@plt+0xff4c>
   214e0:	mov	r5, r0
   214e4:	ldr	r0, [r1, #4]
   214e8:	mov	r9, r1
   214ec:	cmp	r0, #0
   214f0:	beq	2164c <__assert_fail@plt+0xff4c>
   214f4:	ldr	r1, [r5, #4]
   214f8:	ldr	r2, [r5]
   214fc:	add	r3, r1, r0, lsl #1
   21500:	cmp	r2, r3
   21504:	bge	21534 <__assert_fail@plt+0xfe34>
   21508:	add	r7, r2, r0
   2150c:	ldr	r0, [r5, #8]
   21510:	lsl	r1, r7, #3
   21514:	bl	2aab4 <__assert_fail@plt+0x193b4>
   21518:	cmp	r0, #0
   2151c:	beq	21668 <__assert_fail@plt+0xff68>
   21520:	str	r0, [r5, #8]
   21524:	lsl	r0, r7, #1
   21528:	str	r0, [r5]
   2152c:	ldr	r1, [r5, #4]
   21530:	ldr	r0, [r9, #4]
   21534:	cmp	r1, #0
   21538:	beq	21654 <__assert_fail@plt+0xff54>
   2153c:	add	r7, r1, r0, lsl #1
   21540:	sub	r1, r1, #1
   21544:	sub	r0, r0, #1
   21548:	orr	r2, r0, r1
   2154c:	cmp	r2, #0
   21550:	blt	215b4 <__assert_fail@plt+0xfeb4>
   21554:	ldr	r2, [r9, #8]
   21558:	ldr	r3, [r5, #8]
   2155c:	ldr	r4, [r2, r0, lsl #2]
   21560:	ldr	r6, [r3, r1, lsl #2]
   21564:	cmp	r6, r4
   21568:	bne	21584 <__assert_fail@plt+0xfe84>
   2156c:	sub	r1, r1, #1
   21570:	sub	r0, r0, #1
   21574:	orr	r6, r0, r1
   21578:	cmn	r6, #1
   2157c:	bgt	2155c <__assert_fail@plt+0xfe5c>
   21580:	b	215b4 <__assert_fail@plt+0xfeb4>
   21584:	bge	215a4 <__assert_fail@plt+0xfea4>
   21588:	sub	r7, r7, #1
   2158c:	sub	r0, r0, #1
   21590:	str	r4, [r3, r7, lsl #2]
   21594:	orr	r6, r0, r1
   21598:	cmn	r6, #1
   2159c:	bgt	2155c <__assert_fail@plt+0xfe5c>
   215a0:	b	215b4 <__assert_fail@plt+0xfeb4>
   215a4:	sub	r1, r1, #1
   215a8:	orr	r6, r0, r1
   215ac:	cmn	r6, #1
   215b0:	bgt	2155c <__assert_fail@plt+0xfe5c>
   215b4:	cmp	r0, #0
   215b8:	blt	215d8 <__assert_fail@plt+0xfed8>
   215bc:	add	r2, r0, #1
   215c0:	ldr	r0, [r5, #8]
   215c4:	ldr	r1, [r9, #8]
   215c8:	sub	r7, r7, r2
   215cc:	lsl	r2, r2, #2
   215d0:	add	r0, r0, r7, lsl #2
   215d4:	bl	11448 <memcpy@plt>
   215d8:	ldr	r0, [r5, #4]
   215dc:	ldr	r2, [r9, #4]
   215e0:	sub	r1, r0, #1
   215e4:	add	r3, r1, r2, lsl #1
   215e8:	sub	r2, r3, r7
   215ec:	adds	r2, r2, #1
   215f0:	beq	2164c <__assert_fail@plt+0xff4c>
   215f4:	add	r0, r2, r0
   215f8:	str	r0, [r5, #4]
   215fc:	ldr	r0, [r5, #8]
   21600:	ldr	r6, [r0, r1, lsl #2]
   21604:	ldr	r5, [r0, r3, lsl #2]
   21608:	cmp	r5, r6
   2160c:	ble	21628 <__assert_fail@plt+0xff28>
   21610:	add	r6, r2, r1
   21614:	subs	r2, r2, #1
   21618:	sub	r3, r3, #1
   2161c:	str	r5, [r0, r6, lsl #2]
   21620:	bne	21600 <__assert_fail@plt+0xff00>
   21624:	b	2164c <__assert_fail@plt+0xff4c>
   21628:	add	r5, r2, r1
   2162c:	cmp	r1, #0
   21630:	str	r6, [r0, r5, lsl #2]
   21634:	sub	r6, r1, #1
   21638:	mov	r1, r6
   2163c:	bgt	21600 <__assert_fail@plt+0xff00>
   21640:	add	r1, r0, r7, lsl #2
   21644:	lsl	r2, r2, #2
   21648:	bl	11448 <memcpy@plt>
   2164c:	mov	r0, r8
   21650:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21654:	str	r0, [r5, #4]
   21658:	ldr	r0, [r5, #8]
   2165c:	ldr	r2, [r9, #4]
   21660:	ldr	r1, [r9, #8]
   21664:	b	21644 <__assert_fail@plt+0xff44>
   21668:	mov	r8, #12
   2166c:	mov	r0, r8
   21670:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21674:	push	{r4, r5, r6, sl, fp, lr}
   21678:	add	fp, sp, #16
   2167c:	ldr	r2, [r0]
   21680:	mov	r5, r1
   21684:	mov	r4, r0
   21688:	cmp	r2, #0
   2168c:	beq	216bc <__assert_fail@plt+0xffbc>
   21690:	ldr	r1, [r4, #4]
   21694:	cmp	r1, #0
   21698:	bne	216f8 <__assert_fail@plt+0xfff8>
   2169c:	ldr	r0, [r4, #8]
   216a0:	str	r5, [r0]
   216a4:	ldr	r0, [r4, #4]
   216a8:	mov	r6, #1
   216ac:	add	r0, r0, #1
   216b0:	str	r0, [r4, #4]
   216b4:	mov	r0, r6
   216b8:	pop	{r4, r5, r6, sl, fp, pc}
   216bc:	mov	r6, #1
   216c0:	mov	r0, #4
   216c4:	str	r6, [r4]
   216c8:	str	r6, [r4, #4]
   216cc:	bl	2aa84 <__assert_fail@plt+0x19384>
   216d0:	cmp	r0, #0
   216d4:	str	r0, [r4, #8]
   216d8:	strne	r5, [r0]
   216dc:	movne	r0, r6
   216e0:	popne	{r4, r5, r6, sl, fp, pc}
   216e4:	mov	r6, #0
   216e8:	mov	r0, r6
   216ec:	str	r6, [r4]
   216f0:	str	r6, [r4, #4]
   216f4:	pop	{r4, r5, r6, sl, fp, pc}
   216f8:	cmp	r2, r1
   216fc:	bne	21734 <__assert_fail@plt+0x10034>
   21700:	lsl	r0, r2, #1
   21704:	lsl	r1, r2, #3
   21708:	str	r0, [r4]
   2170c:	ldr	r0, [r4, #8]
   21710:	bl	2aab4 <__assert_fail@plt+0x193b4>
   21714:	cmp	r0, #0
   21718:	beq	217b0 <__assert_fail@plt+0x100b0>
   2171c:	str	r0, [r4, #8]
   21720:	ldr	r1, [r4, #4]
   21724:	ldr	r2, [r0]
   21728:	cmp	r2, r5
   2172c:	bgt	21744 <__assert_fail@plt+0x10044>
   21730:	b	21778 <__assert_fail@plt+0x10078>
   21734:	ldr	r0, [r4, #8]
   21738:	ldr	r2, [r0]
   2173c:	cmp	r2, r5
   21740:	ble	21778 <__assert_fail@plt+0x10078>
   21744:	cmp	r1, #1
   21748:	blt	217a8 <__assert_fail@plt+0x100a8>
   2174c:	add	r2, r0, r1, lsl #2
   21750:	add	r1, r1, #1
   21754:	mov	r3, r2
   21758:	ldr	r6, [r3, #-4]!
   2175c:	sub	r1, r1, #1
   21760:	cmp	r1, #1
   21764:	str	r6, [r2]
   21768:	mov	r2, r3
   2176c:	bgt	21758 <__assert_fail@plt+0x10058>
   21770:	sub	r1, r1, #1
   21774:	b	217a8 <__assert_fail@plt+0x100a8>
   21778:	add	r2, r0, r1, lsl #2
   2177c:	ldr	r3, [r2, #-4]
   21780:	cmp	r3, r5
   21784:	ble	217a8 <__assert_fail@plt+0x100a8>
   21788:	sub	r1, r1, #2
   2178c:	str	r3, [r2]
   21790:	sub	r1, r1, #1
   21794:	ldr	r3, [r2, #-8]
   21798:	sub	r2, r2, #4
   2179c:	cmp	r3, r5
   217a0:	bgt	2178c <__assert_fail@plt+0x1008c>
   217a4:	add	r1, r1, #2
   217a8:	str	r5, [r0, r1, lsl #2]
   217ac:	b	216a4 <__assert_fail@plt+0xffa4>
   217b0:	mov	r6, #0
   217b4:	mov	r0, r6
   217b8:	pop	{r4, r5, r6, sl, fp, pc}
   217bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217c0:	add	fp, sp, #28
   217c4:	sub	sp, sp, #28
   217c8:	ldr	lr, [r2, #4]
   217cc:	mov	sl, r0
   217d0:	cmp	lr, #0
   217d4:	beq	21978 <__assert_fail@plt+0x10278>
   217d8:	mov	r9, r3
   217dc:	add	r7, lr, r3
   217e0:	cmp	lr, #1
   217e4:	str	r2, [sp, #20]
   217e8:	blt	21858 <__assert_fail@plt+0x10158>
   217ec:	ldr	r6, [r2, #8]
   217f0:	mov	r2, #0
   217f4:	cmp	lr, #4
   217f8:	bcc	21840 <__assert_fail@plt+0x10140>
   217fc:	mov	r0, #0
   21800:	bic	r2, lr, #3
   21804:	vdup.32	q8, r0
   21808:	mov	r3, r2
   2180c:	mov	r0, r6
   21810:	vmov.32	d16[0], r7
   21814:	vld1.32	{d18-d19}, [r0]!
   21818:	subs	r3, r3, #4
   2181c:	vadd.i32	q8, q9, q8
   21820:	bne	21814 <__assert_fail@plt+0x10114>
   21824:	vext.8	q9, q8, q8, #8
   21828:	cmp	lr, r2
   2182c:	vadd.i32	q8, q8, q9
   21830:	vdup.32	q9, d16[1]
   21834:	vadd.i32	q8, q8, q9
   21838:	vmov.32	r7, d16[0]
   2183c:	beq	21858 <__assert_fail@plt+0x10158>
   21840:	add	r0, r6, r2, lsl #2
   21844:	sub	r2, lr, r2
   21848:	ldr	r3, [r0], #4
   2184c:	subs	r2, r2, #1
   21850:	add	r7, r3, r7
   21854:	bne	21848 <__assert_fail@plt+0x10148>
   21858:	ldr	r2, [r1, #32]
   2185c:	str	r1, [sp, #12]
   21860:	ldr	r1, [r1, #68]	; 0x44
   21864:	and	r1, r1, r7
   21868:	add	r3, r1, r1, lsl #1
   2186c:	ldr	r1, [r2, r3, lsl #2]
   21870:	cmp	r1, #1
   21874:	blt	21908 <__assert_fail@plt+0x10208>
   21878:	ldr	r0, [sp, #20]
   2187c:	cmp	r0, #0
   21880:	beq	21908 <__assert_fail@plt+0x10208>
   21884:	add	r2, r2, r3, lsl #2
   21888:	sub	ip, lr, #1
   2188c:	mov	r6, #0
   21890:	ldr	r2, [r2, #8]
   21894:	ldr	r8, [r2, r6, lsl #2]
   21898:	ldr	r3, [r8]
   2189c:	cmp	r3, r7
   218a0:	bne	218fc <__assert_fail@plt+0x101fc>
   218a4:	ldrb	r3, [r8, #52]	; 0x34
   218a8:	and	r3, r3, #15
   218ac:	cmp	r3, r9
   218b0:	bne	218fc <__assert_fail@plt+0x101fc>
   218b4:	ldr	r4, [r8, #40]	; 0x28
   218b8:	cmp	r4, #0
   218bc:	beq	218fc <__assert_fail@plt+0x101fc>
   218c0:	ldr	r3, [r4, #4]
   218c4:	cmp	r3, lr
   218c8:	bne	218fc <__assert_fail@plt+0x101fc>
   218cc:	mov	r3, ip
   218d0:	add	r5, r3, #1
   218d4:	cmp	r5, #1
   218d8:	blt	22118 <__assert_fail@plt+0x10a18>
   218dc:	ldr	r0, [sp, #20]
   218e0:	ldr	r5, [r0, #8]
   218e4:	ldr	r0, [r4, #8]
   218e8:	ldr	r5, [r5, r3, lsl #2]
   218ec:	ldr	r0, [r0, r3, lsl #2]
   218f0:	sub	r3, r3, #1
   218f4:	cmp	r0, r5
   218f8:	beq	218d0 <__assert_fail@plt+0x101d0>
   218fc:	add	r6, r6, #1
   21900:	cmp	r6, r1
   21904:	blt	21894 <__assert_fail@plt+0x10194>
   21908:	mov	r0, #56	; 0x38
   2190c:	mov	r1, #1
   21910:	bl	2aa30 <__assert_fail@plt+0x19330>
   21914:	cmp	r0, #0
   21918:	beq	22150 <__assert_fail@plt+0x10a50>
   2191c:	ldr	ip, [sp, #20]
   21920:	str	sl, [sp]
   21924:	add	lr, r0, #4
   21928:	mov	r8, r0
   2192c:	str	lr, [sp, #8]
   21930:	ldr	sl, [ip, #4]
   21934:	cmp	sl, #1
   21938:	str	sl, [r0, #8]
   2193c:	blt	2198c <__assert_fail@plt+0x1028c>
   21940:	lsl	r0, sl, #2
   21944:	str	sl, [r8, #4]
   21948:	bl	2aa84 <__assert_fail@plt+0x19384>
   2194c:	cmp	r0, #0
   21950:	str	r0, [r8, #12]
   21954:	beq	22168 <__assert_fail@plt+0x10a68>
   21958:	ldr	r4, [sp, #20]
   2195c:	ldr	sl, [r4, #4]
   21960:	ldr	r1, [r4, #8]
   21964:	lsl	r2, sl, #2
   21968:	bl	11448 <memcpy@plt>
   2196c:	ldr	lr, [sp, #8]
   21970:	mov	ip, r4
   21974:	b	2199c <__assert_fail@plt+0x1029c>
   21978:	mov	r8, #0
   2197c:	str	r8, [sl]
   21980:	mov	r0, r8
   21984:	sub	sp, fp, #28
   21988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2198c:	mov	r0, #0
   21990:	str	r0, [lr]
   21994:	str	r0, [lr, #4]
   21998:	str	r0, [lr, #8]
   2199c:	mov	r2, r8
   219a0:	and	r1, r9, #15
   219a4:	cmp	sl, #1
   219a8:	ldrb	r0, [r2, #52]!	; 0x34
   219ac:	and	r0, r0, #240	; 0xf0
   219b0:	str	lr, [r2, #-12]
   219b4:	str	r2, [sp, #24]
   219b8:	orr	r0, r0, r1
   219bc:	strb	r0, [r2]
   219c0:	ldr	r0, [sp, #12]
   219c4:	blt	22104 <__assert_fail@plt+0x10a04>
   219c8:	and	r1, r9, #4
   219cc:	tst	r9, #1
   219d0:	str	r1, [sp, #4]
   219d4:	and	r1, r9, #2
   219d8:	bne	21ba8 <__assert_fail@plt+0x104a8>
   219dc:	cmp	r1, #0
   219e0:	bne	21d74 <__assert_fail@plt+0x10674>
   219e4:	movw	r1, #65280	; 0xff00
   219e8:	mov	r6, #0
   219ec:	mov	r9, #0
   219f0:	movt	r1, #3
   219f4:	add	r1, r1, #255	; 0xff
   219f8:	str	r1, [sp, #16]
   219fc:	b	21af4 <__assert_fail@plt+0x103f4>
   21a00:	mov	r0, #12
   21a04:	bl	2aa84 <__assert_fail@plt+0x19384>
   21a08:	cmp	r0, #0
   21a0c:	beq	22124 <__assert_fail@plt+0x10a24>
   21a10:	ldr	ip, [sp, #20]
   21a14:	str	r0, [r8, #40]	; 0x28
   21a18:	mov	r5, r0
   21a1c:	ldr	sl, [ip, #4]
   21a20:	cmp	sl, #0
   21a24:	str	sl, [r0, #4]
   21a28:	ble	21a60 <__assert_fail@plt+0x10360>
   21a2c:	lsl	r0, sl, #2
   21a30:	str	sl, [r5]
   21a34:	bl	2aa84 <__assert_fail@plt+0x19384>
   21a38:	cmp	r0, #0
   21a3c:	str	r0, [r5, #8]
   21a40:	beq	22134 <__assert_fail@plt+0x10a34>
   21a44:	ldr	r5, [sp, #20]
   21a48:	ldr	sl, [r5, #4]
   21a4c:	ldr	r1, [r5, #8]
   21a50:	lsl	r2, sl, #2
   21a54:	bl	11448 <memcpy@plt>
   21a58:	mov	ip, r5
   21a5c:	b	21a70 <__assert_fail@plt+0x10370>
   21a60:	mov	r0, #0
   21a64:	str	r0, [r5]
   21a68:	str	r0, [r5, #4]
   21a6c:	str	r0, [r5, #8]
   21a70:	ldr	r1, [sp, #24]
   21a74:	ldr	lr, [sp, #8]
   21a78:	mov	r9, #0
   21a7c:	ldrb	r0, [r1]
   21a80:	orr	r0, r0, #128	; 0x80
   21a84:	strb	r0, [r1]
   21a88:	ldr	r0, [sp, #12]
   21a8c:	tst	r4, #4352	; 0x1100
   21a90:	beq	21b84 <__assert_fail@plt+0x10484>
   21a94:	sub	r1, r6, r9
   21a98:	cmp	r1, #0
   21a9c:	ldrge	r2, [r8, #8]
   21aa0:	cmpge	r2, r1
   21aa4:	bgt	21abc <__assert_fail@plt+0x103bc>
   21aa8:	add	r9, r9, #1
   21aac:	add	r6, r6, #1
   21ab0:	cmp	r6, sl
   21ab4:	blt	21af4 <__assert_fail@plt+0x103f4>
   21ab8:	b	22104 <__assert_fail@plt+0x10a04>
   21abc:	sub	r2, r2, #1
   21ac0:	cmp	r2, r1
   21ac4:	str	r2, [r8, #8]
   21ac8:	ble	21aa8 <__assert_fail@plt+0x103a8>
   21acc:	ldr	r2, [r8, #12]
   21ad0:	add	r3, r2, r1, lsl #2
   21ad4:	ldr	r3, [r3, #4]
   21ad8:	str	r3, [r2, r1, lsl #2]
   21adc:	add	r1, r1, #1
   21ae0:	ldr	r3, [r8, #8]
   21ae4:	cmp	r1, r3
   21ae8:	blt	21ad0 <__assert_fail@plt+0x103d0>
   21aec:	ldr	sl, [ip, #4]
   21af0:	b	21aa8 <__assert_fail@plt+0x103a8>
   21af4:	ldr	r1, [ip, #8]
   21af8:	ldr	r2, [r0]
   21afc:	ldr	r1, [r1, r6, lsl #2]
   21b00:	add	r1, r2, r1, lsl #3
   21b04:	ldr	r4, [r1, #4]
   21b08:	ldr	r1, [sp, #16]
   21b0c:	and	r1, r4, r1
   21b10:	cmp	r1, #1
   21b14:	beq	21b98 <__assert_fail@plt+0x10498>
   21b18:	ldr	r5, [sp, #24]
   21b1c:	mov	r2, #32
   21b20:	movw	r1, #65280	; 0xff00
   21b24:	and	r2, r2, r4, lsr #15
   21b28:	movt	r1, #3
   21b2c:	and	r1, r4, r1
   21b30:	ldrb	r3, [r5]
   21b34:	orr	r2, r3, r2
   21b38:	uxtb	r3, r4
   21b3c:	cmp	r3, #4
   21b40:	strb	r2, [r5]
   21b44:	beq	21b58 <__assert_fail@plt+0x10458>
   21b48:	cmp	r3, #2
   21b4c:	bne	21b68 <__assert_fail@plt+0x10468>
   21b50:	mov	r3, #16
   21b54:	b	21b5c <__assert_fail@plt+0x1045c>
   21b58:	mov	r3, #64	; 0x40
   21b5c:	orr	r2, r2, r3
   21b60:	ldr	r3, [sp, #24]
   21b64:	strb	r2, [r3]
   21b68:	cmp	r1, #0
   21b6c:	beq	21b98 <__assert_fail@plt+0x10498>
   21b70:	ldr	r1, [r8, #40]	; 0x28
   21b74:	cmp	r1, lr
   21b78:	beq	21a00 <__assert_fail@plt+0x10300>
   21b7c:	tst	r4, #4352	; 0x1100
   21b80:	bne	21a94 <__assert_fail@plt+0x10394>
   21b84:	ldr	r1, [sp, #4]
   21b88:	cmp	r1, #0
   21b8c:	bne	21b98 <__assert_fail@plt+0x10498>
   21b90:	ands	r1, r4, #16384	; 0x4000
   21b94:	bne	21a94 <__assert_fail@plt+0x10394>
   21b98:	add	r6, r6, #1
   21b9c:	cmp	r6, sl
   21ba0:	blt	21af4 <__assert_fail@plt+0x103f4>
   21ba4:	b	22104 <__assert_fail@plt+0x10a04>
   21ba8:	cmp	r1, #0
   21bac:	bne	21f38 <__assert_fail@plt+0x10838>
   21bb0:	movw	r1, #65280	; 0xff00
   21bb4:	mov	r6, #0
   21bb8:	mov	r9, #0
   21bbc:	movt	r1, #3
   21bc0:	add	r1, r1, #255	; 0xff
   21bc4:	str	r1, [sp, #16]
   21bc8:	b	21cc0 <__assert_fail@plt+0x105c0>
   21bcc:	mov	r0, #12
   21bd0:	bl	2aa84 <__assert_fail@plt+0x19384>
   21bd4:	cmp	r0, #0
   21bd8:	beq	22124 <__assert_fail@plt+0x10a24>
   21bdc:	ldr	ip, [sp, #20]
   21be0:	str	r0, [r8, #40]	; 0x28
   21be4:	mov	r5, r0
   21be8:	ldr	sl, [ip, #4]
   21bec:	cmp	sl, #0
   21bf0:	str	sl, [r0, #4]
   21bf4:	ble	21c2c <__assert_fail@plt+0x1052c>
   21bf8:	lsl	r0, sl, #2
   21bfc:	str	sl, [r5]
   21c00:	bl	2aa84 <__assert_fail@plt+0x19384>
   21c04:	cmp	r0, #0
   21c08:	str	r0, [r5, #8]
   21c0c:	beq	22134 <__assert_fail@plt+0x10a34>
   21c10:	ldr	r5, [sp, #20]
   21c14:	ldr	sl, [r5, #4]
   21c18:	ldr	r1, [r5, #8]
   21c1c:	lsl	r2, sl, #2
   21c20:	bl	11448 <memcpy@plt>
   21c24:	mov	ip, r5
   21c28:	b	21c3c <__assert_fail@plt+0x1053c>
   21c2c:	mov	r0, #0
   21c30:	str	r0, [r5]
   21c34:	str	r0, [r5, #4]
   21c38:	str	r0, [r5, #8]
   21c3c:	ldr	r1, [sp, #24]
   21c40:	ldr	lr, [sp, #8]
   21c44:	mov	r9, #0
   21c48:	ldrb	r0, [r1]
   21c4c:	orr	r0, r0, #128	; 0x80
   21c50:	strb	r0, [r1]
   21c54:	ldr	r0, [sp, #12]
   21c58:	tst	r4, #4608	; 0x1200
   21c5c:	beq	21d50 <__assert_fail@plt+0x10650>
   21c60:	sub	r1, r6, r9
   21c64:	cmp	r1, #0
   21c68:	ldrge	r2, [r8, #8]
   21c6c:	cmpge	r2, r1
   21c70:	bgt	21c88 <__assert_fail@plt+0x10588>
   21c74:	add	r9, r9, #1
   21c78:	add	r6, r6, #1
   21c7c:	cmp	r6, sl
   21c80:	blt	21cc0 <__assert_fail@plt+0x105c0>
   21c84:	b	22104 <__assert_fail@plt+0x10a04>
   21c88:	sub	r2, r2, #1
   21c8c:	cmp	r2, r1
   21c90:	str	r2, [r8, #8]
   21c94:	ble	21c74 <__assert_fail@plt+0x10574>
   21c98:	ldr	r2, [r8, #12]
   21c9c:	add	r3, r2, r1, lsl #2
   21ca0:	ldr	r3, [r3, #4]
   21ca4:	str	r3, [r2, r1, lsl #2]
   21ca8:	add	r1, r1, #1
   21cac:	ldr	r3, [r8, #8]
   21cb0:	cmp	r1, r3
   21cb4:	blt	21c9c <__assert_fail@plt+0x1059c>
   21cb8:	ldr	sl, [ip, #4]
   21cbc:	b	21c74 <__assert_fail@plt+0x10574>
   21cc0:	ldr	r1, [ip, #8]
   21cc4:	ldr	r2, [r0]
   21cc8:	ldr	r1, [r1, r6, lsl #2]
   21ccc:	add	r1, r2, r1, lsl #3
   21cd0:	ldr	r4, [r1, #4]
   21cd4:	ldr	r1, [sp, #16]
   21cd8:	and	r1, r4, r1
   21cdc:	cmp	r1, #1
   21ce0:	beq	21d64 <__assert_fail@plt+0x10664>
   21ce4:	ldr	r5, [sp, #24]
   21ce8:	mov	r2, #32
   21cec:	movw	r1, #65280	; 0xff00
   21cf0:	and	r2, r2, r4, lsr #15
   21cf4:	movt	r1, #3
   21cf8:	and	r1, r4, r1
   21cfc:	ldrb	r3, [r5]
   21d00:	orr	r2, r3, r2
   21d04:	uxtb	r3, r4
   21d08:	cmp	r3, #4
   21d0c:	strb	r2, [r5]
   21d10:	beq	21d24 <__assert_fail@plt+0x10624>
   21d14:	cmp	r3, #2
   21d18:	bne	21d34 <__assert_fail@plt+0x10634>
   21d1c:	mov	r3, #16
   21d20:	b	21d28 <__assert_fail@plt+0x10628>
   21d24:	mov	r3, #64	; 0x40
   21d28:	orr	r2, r2, r3
   21d2c:	ldr	r3, [sp, #24]
   21d30:	strb	r2, [r3]
   21d34:	cmp	r1, #0
   21d38:	beq	21d64 <__assert_fail@plt+0x10664>
   21d3c:	ldr	r1, [r8, #40]	; 0x28
   21d40:	cmp	r1, lr
   21d44:	beq	21bcc <__assert_fail@plt+0x104cc>
   21d48:	tst	r4, #4608	; 0x1200
   21d4c:	bne	21c60 <__assert_fail@plt+0x10560>
   21d50:	ldr	r1, [sp, #4]
   21d54:	cmp	r1, #0
   21d58:	bne	21d64 <__assert_fail@plt+0x10664>
   21d5c:	ands	r1, r4, #16384	; 0x4000
   21d60:	bne	21c60 <__assert_fail@plt+0x10560>
   21d64:	add	r6, r6, #1
   21d68:	cmp	r6, sl
   21d6c:	blt	21cc0 <__assert_fail@plt+0x105c0>
   21d70:	b	22104 <__assert_fail@plt+0x10a04>
   21d74:	movw	r1, #65280	; 0xff00
   21d78:	mov	r6, #0
   21d7c:	mov	r9, #0
   21d80:	movt	r1, #3
   21d84:	add	r1, r1, #255	; 0xff
   21d88:	str	r1, [sp, #16]
   21d8c:	b	21e84 <__assert_fail@plt+0x10784>
   21d90:	mov	r0, #12
   21d94:	bl	2aa84 <__assert_fail@plt+0x19384>
   21d98:	cmp	r0, #0
   21d9c:	beq	22124 <__assert_fail@plt+0x10a24>
   21da0:	ldr	ip, [sp, #20]
   21da4:	str	r0, [r8, #40]	; 0x28
   21da8:	mov	r5, r0
   21dac:	ldr	sl, [ip, #4]
   21db0:	cmp	sl, #0
   21db4:	str	sl, [r0, #4]
   21db8:	ble	21df0 <__assert_fail@plt+0x106f0>
   21dbc:	lsl	r0, sl, #2
   21dc0:	str	sl, [r5]
   21dc4:	bl	2aa84 <__assert_fail@plt+0x19384>
   21dc8:	cmp	r0, #0
   21dcc:	str	r0, [r5, #8]
   21dd0:	beq	22134 <__assert_fail@plt+0x10a34>
   21dd4:	ldr	r5, [sp, #20]
   21dd8:	ldr	sl, [r5, #4]
   21ddc:	ldr	r1, [r5, #8]
   21de0:	lsl	r2, sl, #2
   21de4:	bl	11448 <memcpy@plt>
   21de8:	mov	ip, r5
   21dec:	b	21e00 <__assert_fail@plt+0x10700>
   21df0:	mov	r0, #0
   21df4:	str	r0, [r5]
   21df8:	str	r0, [r5, #4]
   21dfc:	str	r0, [r5, #8]
   21e00:	ldr	r1, [sp, #24]
   21e04:	ldr	lr, [sp, #8]
   21e08:	mov	r9, #0
   21e0c:	ldrb	r0, [r1]
   21e10:	orr	r0, r0, #128	; 0x80
   21e14:	strb	r0, [r1]
   21e18:	ldr	r0, [sp, #12]
   21e1c:	tst	r4, #256	; 0x100
   21e20:	beq	21f14 <__assert_fail@plt+0x10814>
   21e24:	sub	r1, r6, r9
   21e28:	cmp	r1, #0
   21e2c:	ldrge	r2, [r8, #8]
   21e30:	cmpge	r2, r1
   21e34:	bgt	21e4c <__assert_fail@plt+0x1074c>
   21e38:	add	r9, r9, #1
   21e3c:	add	r6, r6, #1
   21e40:	cmp	r6, sl
   21e44:	blt	21e84 <__assert_fail@plt+0x10784>
   21e48:	b	22104 <__assert_fail@plt+0x10a04>
   21e4c:	sub	r2, r2, #1
   21e50:	cmp	r2, r1
   21e54:	str	r2, [r8, #8]
   21e58:	ble	21e38 <__assert_fail@plt+0x10738>
   21e5c:	ldr	r2, [r8, #12]
   21e60:	add	r3, r2, r1, lsl #2
   21e64:	ldr	r3, [r3, #4]
   21e68:	str	r3, [r2, r1, lsl #2]
   21e6c:	add	r1, r1, #1
   21e70:	ldr	r3, [r8, #8]
   21e74:	cmp	r1, r3
   21e78:	blt	21e60 <__assert_fail@plt+0x10760>
   21e7c:	ldr	sl, [ip, #4]
   21e80:	b	21e38 <__assert_fail@plt+0x10738>
   21e84:	ldr	r1, [ip, #8]
   21e88:	ldr	r2, [r0]
   21e8c:	ldr	r1, [r1, r6, lsl #2]
   21e90:	add	r1, r2, r1, lsl #3
   21e94:	ldr	r4, [r1, #4]
   21e98:	ldr	r1, [sp, #16]
   21e9c:	and	r1, r4, r1
   21ea0:	cmp	r1, #1
   21ea4:	beq	21f28 <__assert_fail@plt+0x10828>
   21ea8:	ldr	r5, [sp, #24]
   21eac:	mov	r2, #32
   21eb0:	movw	r1, #65280	; 0xff00
   21eb4:	and	r2, r2, r4, lsr #15
   21eb8:	movt	r1, #3
   21ebc:	and	r1, r4, r1
   21ec0:	ldrb	r3, [r5]
   21ec4:	orr	r2, r3, r2
   21ec8:	uxtb	r3, r4
   21ecc:	cmp	r3, #4
   21ed0:	strb	r2, [r5]
   21ed4:	beq	21ee8 <__assert_fail@plt+0x107e8>
   21ed8:	cmp	r3, #2
   21edc:	bne	21ef8 <__assert_fail@plt+0x107f8>
   21ee0:	mov	r3, #16
   21ee4:	b	21eec <__assert_fail@plt+0x107ec>
   21ee8:	mov	r3, #64	; 0x40
   21eec:	orr	r2, r2, r3
   21ef0:	ldr	r3, [sp, #24]
   21ef4:	strb	r2, [r3]
   21ef8:	cmp	r1, #0
   21efc:	beq	21f28 <__assert_fail@plt+0x10828>
   21f00:	ldr	r1, [r8, #40]	; 0x28
   21f04:	cmp	r1, lr
   21f08:	beq	21d90 <__assert_fail@plt+0x10690>
   21f0c:	tst	r4, #256	; 0x100
   21f10:	bne	21e24 <__assert_fail@plt+0x10724>
   21f14:	ldr	r1, [sp, #4]
   21f18:	cmp	r1, #0
   21f1c:	bne	21f28 <__assert_fail@plt+0x10828>
   21f20:	ands	r1, r4, #16384	; 0x4000
   21f24:	bne	21e24 <__assert_fail@plt+0x10724>
   21f28:	add	r6, r6, #1
   21f2c:	cmp	r6, sl
   21f30:	blt	21e84 <__assert_fail@plt+0x10784>
   21f34:	b	22104 <__assert_fail@plt+0x10a04>
   21f38:	movw	r1, #65280	; 0xff00
   21f3c:	mov	r9, #0
   21f40:	mov	r5, #0
   21f44:	movt	r1, #3
   21f48:	add	r1, r1, #255	; 0xff
   21f4c:	str	r1, [sp, #16]
   21f50:	ldr	r1, [ip, #8]
   21f54:	ldr	r2, [r0]
   21f58:	ldr	r1, [r1, r9, lsl #2]
   21f5c:	add	r1, r2, r1, lsl #3
   21f60:	ldr	r6, [r1, #4]
   21f64:	ldr	r1, [sp, #16]
   21f68:	and	r1, r6, r1
   21f6c:	cmp	r1, #1
   21f70:	beq	21ff4 <__assert_fail@plt+0x108f4>
   21f74:	ldr	r4, [sp, #24]
   21f78:	mov	r2, #32
   21f7c:	movw	r1, #65280	; 0xff00
   21f80:	and	r2, r2, r6, lsr #15
   21f84:	movt	r1, #3
   21f88:	and	r1, r6, r1
   21f8c:	ldrb	r3, [r4]
   21f90:	orr	r2, r3, r2
   21f94:	uxtb	r3, r6
   21f98:	cmp	r3, #2
   21f9c:	strb	r2, [r4]
   21fa0:	beq	21fb4 <__assert_fail@plt+0x108b4>
   21fa4:	cmp	r3, #4
   21fa8:	bne	21fc4 <__assert_fail@plt+0x108c4>
   21fac:	mov	r3, #64	; 0x40
   21fb0:	b	21fb8 <__assert_fail@plt+0x108b8>
   21fb4:	mov	r3, #16
   21fb8:	orr	r2, r2, r3
   21fbc:	ldr	r3, [sp, #24]
   21fc0:	strb	r2, [r3]
   21fc4:	cmp	r1, #0
   21fc8:	beq	21ff4 <__assert_fail@plt+0x108f4>
   21fcc:	ldr	r1, [r8, #40]	; 0x28
   21fd0:	cmp	r1, lr
   21fd4:	beq	22004 <__assert_fail@plt+0x10904>
   21fd8:	tst	r6, #512	; 0x200
   21fdc:	bne	22098 <__assert_fail@plt+0x10998>
   21fe0:	ldr	r1, [sp, #4]
   21fe4:	cmp	r1, #0
   21fe8:	bne	21ff4 <__assert_fail@plt+0x108f4>
   21fec:	ands	r1, r6, #16384	; 0x4000
   21ff0:	bne	22098 <__assert_fail@plt+0x10998>
   21ff4:	add	r9, r9, #1
   21ff8:	cmp	r9, sl
   21ffc:	blt	21f50 <__assert_fail@plt+0x10850>
   22000:	b	22104 <__assert_fail@plt+0x10a04>
   22004:	mov	r0, #12
   22008:	bl	2aa84 <__assert_fail@plt+0x19384>
   2200c:	cmp	r0, #0
   22010:	beq	22124 <__assert_fail@plt+0x10a24>
   22014:	ldr	ip, [sp, #20]
   22018:	str	r0, [r8, #40]	; 0x28
   2201c:	mov	r5, r0
   22020:	ldr	sl, [ip, #4]
   22024:	cmp	sl, #1
   22028:	str	sl, [r0, #4]
   2202c:	blt	22064 <__assert_fail@plt+0x10964>
   22030:	lsl	r0, sl, #2
   22034:	str	sl, [r5]
   22038:	bl	2aa84 <__assert_fail@plt+0x19384>
   2203c:	cmp	r0, #0
   22040:	str	r0, [r5, #8]
   22044:	beq	22134 <__assert_fail@plt+0x10a34>
   22048:	ldr	r4, [sp, #20]
   2204c:	ldr	sl, [r4, #4]
   22050:	ldr	r1, [r4, #8]
   22054:	lsl	r2, sl, #2
   22058:	bl	11448 <memcpy@plt>
   2205c:	mov	ip, r4
   22060:	b	22074 <__assert_fail@plt+0x10974>
   22064:	mov	r0, #0
   22068:	str	r0, [r5]
   2206c:	str	r0, [r5, #4]
   22070:	str	r0, [r5, #8]
   22074:	ldr	r1, [sp, #24]
   22078:	ldr	lr, [sp, #8]
   2207c:	mov	r5, #0
   22080:	ldrb	r0, [r1]
   22084:	orr	r0, r0, #128	; 0x80
   22088:	strb	r0, [r1]
   2208c:	ldr	r0, [sp, #12]
   22090:	tst	r6, #512	; 0x200
   22094:	beq	21fe0 <__assert_fail@plt+0x108e0>
   22098:	sub	r1, r9, r5
   2209c:	cmp	r1, #0
   220a0:	ldrge	r2, [r8, #8]
   220a4:	cmpge	r2, r1
   220a8:	bgt	220c0 <__assert_fail@plt+0x109c0>
   220ac:	add	r5, r5, #1
   220b0:	add	r9, r9, #1
   220b4:	cmp	r9, sl
   220b8:	blt	21f50 <__assert_fail@plt+0x10850>
   220bc:	b	22104 <__assert_fail@plt+0x10a04>
   220c0:	sub	r2, r2, #1
   220c4:	cmp	r2, r1
   220c8:	str	r2, [r8, #8]
   220cc:	ble	220ac <__assert_fail@plt+0x109ac>
   220d0:	ldr	r2, [r8, #12]
   220d4:	add	r3, r2, r1, lsl #2
   220d8:	ldr	r3, [r3, #4]
   220dc:	str	r3, [r2, r1, lsl #2]
   220e0:	add	r1, r1, #1
   220e4:	ldr	r3, [r8, #8]
   220e8:	cmp	r1, r3
   220ec:	blt	220d4 <__assert_fail@plt+0x109d4>
   220f0:	ldr	sl, [ip, #4]
   220f4:	add	r5, r5, #1
   220f8:	add	r9, r9, #1
   220fc:	cmp	r9, sl
   22100:	blt	21f50 <__assert_fail@plt+0x10850>
   22104:	mov	r1, r8
   22108:	mov	r2, r7
   2210c:	bl	22180 <__assert_fail@plt+0x10a80>
   22110:	cmp	r0, #0
   22114:	bne	22124 <__assert_fail@plt+0x10a24>
   22118:	mov	r0, r8
   2211c:	sub	sp, fp, #28
   22120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22124:	mov	r0, r8
   22128:	bl	1b710 <__assert_fail@plt+0xa010>
   2212c:	ldr	sl, [sp]
   22130:	b	22150 <__assert_fail@plt+0x10a50>
   22134:	ldr	sl, [sp]
   22138:	add	r0, r5, #4
   2213c:	mov	r1, #0
   22140:	str	r1, [r0]
   22144:	mov	r0, r8
   22148:	str	r1, [r5]
   2214c:	bl	1b710 <__assert_fail@plt+0xa010>
   22150:	mov	r0, #12
   22154:	mov	r8, #0
   22158:	str	r0, [sl]
   2215c:	mov	r0, r8
   22160:	sub	sp, fp, #28
   22164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22168:	mov	r0, #0
   2216c:	str	r0, [r8, #4]
   22170:	str	r0, [r8, #8]
   22174:	mov	r0, r8
   22178:	bl	13de4 <__assert_fail@plt+0x26e4>
   2217c:	b	2212c <__assert_fail@plt+0x10a2c>
   22180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22184:	add	fp, sp, #28
   22188:	sub	sp, sp, #4
   2218c:	str	r2, [r1]
   22190:	mov	r4, r1
   22194:	mov	r7, r0
   22198:	mov	r0, #0
   2219c:	mov	r9, r2
   221a0:	ldr	r1, [r1, #8]
   221a4:	str	r1, [r4, #16]
   221a8:	str	r0, [r4, #20]
   221ac:	lsl	r0, r1, #2
   221b0:	bl	2aa84 <__assert_fail@plt+0x19384>
   221b4:	mov	r8, #12
   221b8:	cmp	r0, #0
   221bc:	str	r0, [r4, #24]
   221c0:	beq	22280 <__assert_fail@plt+0x10b80>
   221c4:	ldr	r1, [r4, #8]
   221c8:	cmp	r1, #1
   221cc:	blt	22240 <__assert_fail@plt+0x10b40>
   221d0:	mov	r5, #0
   221d4:	mov	sl, #2
   221d8:	ldr	r2, [r4, #12]
   221dc:	ldr	r6, [r2, r5, lsl #2]
   221e0:	ldr	r2, [r7]
   221e4:	add	r2, r2, r6, lsl #3
   221e8:	ldrb	r2, [r2, #4]
   221ec:	tst	r2, #8
   221f0:	bne	22234 <__assert_fail@plt+0x10b34>
   221f4:	ldr	r2, [r4, #16]
   221f8:	ldr	r1, [r4, #20]
   221fc:	cmp	r2, r1
   22200:	bne	22224 <__assert_fail@plt+0x10b24>
   22204:	add	r1, sl, r2, lsl #1
   22208:	str	r1, [r4, #16]
   2220c:	lsl	r1, r1, #2
   22210:	bl	2aab4 <__assert_fail@plt+0x193b4>
   22214:	cmp	r0, #0
   22218:	beq	22280 <__assert_fail@plt+0x10b80>
   2221c:	str	r0, [r4, #24]
   22220:	ldr	r1, [r4, #20]
   22224:	add	r2, r1, #1
   22228:	str	r2, [r4, #20]
   2222c:	str	r6, [r0, r1, lsl #2]
   22230:	ldr	r1, [r4, #8]
   22234:	add	r5, r5, #1
   22238:	cmp	r5, r1
   2223c:	blt	221d8 <__assert_fail@plt+0x10ad8>
   22240:	ldr	r1, [r7, #68]	; 0x44
   22244:	ldr	r0, [r7, #32]
   22248:	and	r1, r1, r9
   2224c:	mov	r5, r0
   22250:	add	r2, r1, r1, lsl #1
   22254:	ldr	r1, [r5, r2, lsl #2]!
   22258:	mov	r6, r5
   2225c:	ldr	r3, [r6, #4]!
   22260:	cmp	r3, r1
   22264:	ble	2228c <__assert_fail@plt+0x10b8c>
   22268:	add	r0, r0, r2, lsl #2
   2226c:	ldr	r0, [r0, #8]
   22270:	add	r2, r1, #1
   22274:	mov	r8, #0
   22278:	str	r2, [r5]
   2227c:	str	r4, [r0, r1, lsl #2]
   22280:	mov	r0, r8
   22284:	sub	sp, fp, #28
   22288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2228c:	add	r7, r0, r2, lsl #2
   22290:	mov	r2, #2
   22294:	ldr	r0, [r7, #8]!
   22298:	add	r9, r2, r1, lsl #1
   2229c:	lsl	r1, r9, #2
   222a0:	bl	2aab4 <__assert_fail@plt+0x193b4>
   222a4:	cmp	r0, #0
   222a8:	beq	22280 <__assert_fail@plt+0x10b80>
   222ac:	str	r0, [r7]
   222b0:	str	r9, [r6]
   222b4:	ldr	r1, [r5]
   222b8:	b	22270 <__assert_fail@plt+0x10b70>
   222bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222c0:	add	fp, sp, #28
   222c4:	sub	sp, sp, #36	; 0x24
   222c8:	mov	r4, r0
   222cc:	ldr	r0, [r0, #24]
   222d0:	mov	r6, r2
   222d4:	mov	r9, r1
   222d8:	cmp	r0, r1
   222dc:	ble	224f8 <__assert_fail@plt+0x10df8>
   222e0:	ldr	r0, [r4, #80]	; 0x50
   222e4:	mov	r1, #4
   222e8:	mov	r5, r9
   222ec:	cmp	r0, #2
   222f0:	movge	r0, #0
   222f4:	strge	r0, [r4, #16]
   222f8:	strge	r0, [r4, #20]
   222fc:	mov	r0, #0
   22300:	tst	r6, #1
   22304:	str	r0, [r4, #24]
   22308:	str	r0, [r4, #28]
   2230c:	str	r0, [r4, #32]
   22310:	strb	r0, [r4, #76]	; 0x4c
   22314:	movweq	r1, #6
   22318:	ldr	r2, [r4, #44]	; 0x2c
   2231c:	ldr	r3, [r4, #52]	; 0x34
   22320:	str	r2, [r4, #48]	; 0x30
   22324:	str	r3, [r4, #56]	; 0x38
   22328:	str	r1, [r4, #60]	; 0x3c
   2232c:	ldrb	r1, [r4, #75]	; 0x4b
   22330:	cmp	r1, #0
   22334:	ldreq	r1, [r4]
   22338:	streq	r1, [r4, #4]
   2233c:	cmp	r5, #0
   22340:	beq	22474 <__assert_fail@plt+0x10d74>
   22344:	ldr	r1, [r4, #32]
   22348:	cmp	r5, r1
   2234c:	bge	22508 <__assert_fail@plt+0x10e08>
   22350:	ldrb	r0, [r4, #76]	; 0x4c
   22354:	cmp	r0, #0
   22358:	bne	226b8 <__assert_fail@plt+0x10fb8>
   2235c:	cmp	r5, #0
   22360:	ble	223a4 <__assert_fail@plt+0x10ca4>
   22364:	ldr	r1, [r4, #48]	; 0x30
   22368:	sub	r0, r5, #1
   2236c:	cmp	r1, r0
   22370:	beq	22780 <__assert_fail@plt+0x11080>
   22374:	ldr	r1, [r4, #80]	; 0x50
   22378:	cmp	r1, #2
   2237c:	blt	223bc <__assert_fail@plt+0x10cbc>
   22380:	ldr	r0, [r4, #8]
   22384:	mov	r1, r5
   22388:	sub	r0, r0, #4
   2238c:	ldr	r6, [r0, r1, lsl #2]
   22390:	cmn	r6, #1
   22394:	bne	223f0 <__assert_fail@plt+0x10cf0>
   22398:	sub	r1, r1, #1
   2239c:	cmp	r1, #0
   223a0:	bgt	2238c <__assert_fail@plt+0x10c8c>
   223a4:	ldr	r1, [r4, #60]	; 0x3c
   223a8:	str	r1, [r4, #60]	; 0x3c
   223ac:	ldr	r0, [r4, #80]	; 0x50
   223b0:	cmp	r0, #2
   223b4:	bge	22424 <__assert_fail@plt+0x10d24>
   223b8:	b	2243c <__assert_fail@plt+0x10d3c>
   223bc:	ldr	r1, [r4, #4]
   223c0:	ldr	r2, [r4, #68]	; 0x44
   223c4:	ldrb	r0, [r1, r0]
   223c8:	ubfx	r1, r0, #5, #3
   223cc:	and	r3, r0, #31
   223d0:	ldr	r2, [r2, r1, lsl #2]
   223d4:	mov	r1, #1
   223d8:	tst	r2, r1, lsl r3
   223dc:	bne	22414 <__assert_fail@plt+0x10d14>
   223e0:	mov	r1, #0
   223e4:	cmp	r0, #10
   223e8:	beq	22408 <__assert_fail@plt+0x10d08>
   223ec:	b	22414 <__assert_fail@plt+0x10d14>
   223f0:	ldrb	r0, [r4, #78]	; 0x4e
   223f4:	cmp	r0, #0
   223f8:	bne	2297c <__assert_fail@plt+0x1127c>
   223fc:	mov	r1, #0
   22400:	cmp	r6, #10
   22404:	bne	22414 <__assert_fail@plt+0x10d14>
   22408:	ldrb	r1, [r4, #77]	; 0x4d
   2240c:	cmp	r1, #0
   22410:	movwne	r1, #2
   22414:	str	r1, [r4, #60]	; 0x3c
   22418:	ldr	r0, [r4, #80]	; 0x50
   2241c:	cmp	r0, #2
   22420:	blt	2243c <__assert_fail@plt+0x10d3c>
   22424:	ldr	r2, [r4, #28]
   22428:	ldr	r0, [r4, #8]
   2242c:	sub	r2, r2, r5
   22430:	add	r1, r0, r5, lsl #2
   22434:	lsl	r2, r2, #2
   22438:	bl	11418 <memmove@plt>
   2243c:	ldrb	r0, [r4, #75]	; 0x4b
   22440:	cmp	r0, #0
   22444:	bne	22768 <__assert_fail@plt+0x11068>
   22448:	ldr	r0, [r4, #28]
   2244c:	ldr	r1, [r4, #32]
   22450:	sub	r0, r0, r5
   22454:	sub	r1, r1, r5
   22458:	str	r0, [r4, #28]
   2245c:	str	r1, [r4, #32]
   22460:	ldrb	r0, [r4, #75]	; 0x4b
   22464:	cmp	r0, #0
   22468:	ldreq	r0, [r4, #4]
   2246c:	addeq	r0, r0, r5
   22470:	streq	r0, [r4, #4]
   22474:	str	r9, [r4, #24]
   22478:	ldr	r0, [r4, #48]	; 0x30
   2247c:	ldr	r3, [r4, #80]	; 0x50
   22480:	ldr	r2, [r4, #56]	; 0x38
   22484:	sub	r1, r0, r5
   22488:	cmp	r3, #2
   2248c:	sub	r0, r2, r5
   22490:	str	r1, [r4, #48]	; 0x30
   22494:	str	r0, [r4, #56]	; 0x38
   22498:	blt	224c0 <__assert_fail@plt+0x10dc0>
   2249c:	ldrb	r0, [r4, #72]	; 0x48
   224a0:	cmp	r0, #0
   224a4:	beq	224e0 <__assert_fail@plt+0x10de0>
   224a8:	mov	r0, r4
   224ac:	bl	1b770 <__assert_fail@plt+0xa070>
   224b0:	cmp	r0, #0
   224b4:	beq	224e8 <__assert_fail@plt+0x10de8>
   224b8:	sub	sp, fp, #28
   224bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224c0:	ldrb	r0, [r4, #75]	; 0x4b
   224c4:	cmp	r0, #0
   224c8:	bne	2279c <__assert_fail@plt+0x1109c>
   224cc:	str	r1, [r4, #28]
   224d0:	mov	r0, #0
   224d4:	str	r0, [r4, #40]	; 0x28
   224d8:	sub	sp, fp, #28
   224dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224e0:	mov	r0, r4
   224e4:	bl	1be30 <__assert_fail@plt+0xa730>
   224e8:	mov	r0, #0
   224ec:	str	r0, [r4, #40]	; 0x28
   224f0:	sub	sp, fp, #28
   224f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224f8:	sub	r5, r9, r0
   224fc:	cmp	r5, #0
   22500:	bne	22344 <__assert_fail@plt+0x10c44>
   22504:	b	22474 <__assert_fail@plt+0x10d74>
   22508:	ldrb	r2, [r4, #76]	; 0x4c
   2250c:	ldr	lr, [r4, #28]
   22510:	cmp	r2, #0
   22514:	bne	22af0 <__assert_fail@plt+0x113f0>
   22518:	mov	r2, #0
   2251c:	str	r2, [r4, #28]
   22520:	ldr	r3, [r4, #80]	; 0x50
   22524:	cmp	r3, #2
   22528:	blt	2282c <__assert_fail@plt+0x1112c>
   2252c:	ldrb	r2, [r4, #73]	; 0x49
   22530:	cmp	r2, #0
   22534:	beq	225f0 <__assert_fail@plt+0x10ef0>
   22538:	ldr	r7, [r4]
   2253c:	sub	r3, r5, r3
   22540:	add	ip, r7, r0
   22544:	add	r3, ip, r3
   22548:	add	r8, ip, r5
   2254c:	cmp	r3, r7
   22550:	movcc	r3, r7
   22554:	mov	r7, r8
   22558:	sub	r7, r7, #1
   2255c:	cmp	r7, r3
   22560:	bcc	225f0 <__assert_fail@plt+0x10ef0>
   22564:	ldrb	r2, [r7]
   22568:	and	r2, r2, #192	; 0xc0
   2256c:	cmp	r2, #128	; 0x80
   22570:	beq	22558 <__assert_fail@plt+0x10e58>
   22574:	ldr	r0, [r4, #48]	; 0x30
   22578:	mov	sl, lr
   2257c:	mov	r1, r7
   22580:	add	r3, ip, r0
   22584:	ldr	r0, [r4, #64]	; 0x40
   22588:	sub	r2, r3, r7
   2258c:	cmp	r0, #0
   22590:	bne	22cbc <__assert_fail@plt+0x115bc>
   22594:	mov	r0, #0
   22598:	add	r3, sp, #24
   2259c:	str	r0, [sp, #28]
   225a0:	str	r0, [sp, #24]
   225a4:	add	r0, sp, #20
   225a8:	bl	2aedc <__assert_fail@plt+0x197dc>
   225ac:	sub	r1, r8, r7
   225b0:	mvn	r7, #0
   225b4:	cmp	r0, r1
   225b8:	bcc	225dc <__assert_fail@plt+0x10edc>
   225bc:	cmn	r0, #3
   225c0:	bhi	225dc <__assert_fail@plt+0x10edc>
   225c4:	mov	r2, #0
   225c8:	sub	r0, r0, r1
   225cc:	str	r2, [r4, #16]
   225d0:	str	r2, [r4, #20]
   225d4:	str	r0, [r4, #28]
   225d8:	ldr	r7, [sp, #20]
   225dc:	cmn	r7, #1
   225e0:	bne	2269c <__assert_fail@plt+0x10f9c>
   225e4:	ldr	r0, [r4, #24]
   225e8:	ldr	r1, [r4, #32]
   225ec:	mov	lr, sl
   225f0:	add	r8, r1, r0
   225f4:	cmp	r8, r9
   225f8:	bge	2299c <__assert_fail@plt+0x1129c>
   225fc:	add	sl, r4, #16
   22600:	str	lr, [sp]
   22604:	ldr	r0, [r4]
   22608:	ldr	r2, [r4, #44]	; 0x2c
   2260c:	mov	r3, sl
   22610:	add	r1, r0, r8
   22614:	ldr	r0, [sl]
   22618:	sub	r7, r2, r8
   2261c:	mov	r2, r7
   22620:	str	r0, [sp, #8]
   22624:	ldr	r0, [sl, #4]
   22628:	str	r0, [sp, #4]
   2262c:	add	r0, sp, #24
   22630:	bl	2aedc <__assert_fail@plt+0x197dc>
   22634:	sub	r1, r0, #1
   22638:	cmn	r1, #3
   2263c:	bcs	22654 <__assert_fail@plt+0x10f54>
   22640:	ldr	r7, [sp, #24]
   22644:	add	r8, r0, r8
   22648:	cmp	r8, r9
   2264c:	blt	22604 <__assert_fail@plt+0x10f04>
   22650:	b	22688 <__assert_fail@plt+0x10f88>
   22654:	cmp	r7, #0
   22658:	mov	r1, #0
   2265c:	ldr	r3, [sp, #4]
   22660:	ldr	r2, [sp, #8]
   22664:	cmpne	r0, #0
   22668:	ldrne	r0, [r4]
   2266c:	ldrbne	r1, [r0, r8]
   22670:	stm	sl, {r2, r3}
   22674:	mov	r0, #1
   22678:	mov	r7, r1
   2267c:	add	r8, r0, r8
   22680:	cmp	r8, r9
   22684:	blt	22604 <__assert_fail@plt+0x10f04>
   22688:	ldr	lr, [sp]
   2268c:	sub	r0, r8, r9
   22690:	cmn	r7, #1
   22694:	str	r0, [r4, #28]
   22698:	beq	229a4 <__assert_fail@plt+0x112a4>
   2269c:	ldrb	r0, [r4, #78]	; 0x4e
   226a0:	cmp	r0, #0
   226a4:	bne	22c8c <__assert_fail@plt+0x1158c>
   226a8:	mov	r1, #0
   226ac:	cmp	r7, #10
   226b0:	beq	22ac8 <__assert_fail@plt+0x113c8>
   226b4:	b	22ad4 <__assert_fail@plt+0x113d4>
   226b8:	ldr	ip, [r4, #12]
   226bc:	ldr	r0, [r4, #28]
   226c0:	mov	r1, #0
   226c4:	add	r2, r1, r0
   226c8:	add	r2, r2, r2, lsr #31
   226cc:	asr	r7, r2, #1
   226d0:	ldr	r3, [ip, r7, lsl #2]
   226d4:	mov	r2, r7
   226d8:	cmp	r3, r5
   226dc:	bgt	226ec <__assert_fail@plt+0x10fec>
   226e0:	bge	226f8 <__assert_fail@plt+0x10ff8>
   226e4:	add	r1, r7, #1
   226e8:	mov	r2, r0
   226ec:	cmp	r1, r2
   226f0:	mov	r0, r2
   226f4:	blt	226c4 <__assert_fail@plt+0x10fc4>
   226f8:	mov	r8, #0
   226fc:	cmp	r3, r5
   22700:	movwlt	r8, #1
   22704:	add	sl, r7, r8
   22708:	cmp	sl, #0
   2270c:	ble	22750 <__assert_fail@plt+0x11050>
   22710:	ldr	r1, [r4, #48]	; 0x30
   22714:	sub	r0, sl, #1
   22718:	cmp	r1, r0
   2271c:	beq	22b18 <__assert_fail@plt+0x11418>
   22720:	ldr	r1, [r4, #80]	; 0x50
   22724:	cmp	r1, #2
   22728:	blt	22888 <__assert_fail@plt+0x11188>
   2272c:	ldr	r0, [r4, #8]
   22730:	mov	r1, sl
   22734:	sub	r0, r0, #4
   22738:	ldr	r6, [r0, r1, lsl #2]
   2273c:	cmn	r6, #1
   22740:	bne	228bc <__assert_fail@plt+0x111bc>
   22744:	sub	r1, r1, #1
   22748:	cmp	r1, #0
   2274c:	bgt	22738 <__assert_fail@plt+0x11038>
   22750:	ldr	r1, [r4, #60]	; 0x3c
   22754:	str	r1, [r4, #60]	; 0x3c
   22758:	cmp	sl, r5
   2275c:	ldr	r2, [r4, #28]
   22760:	beq	228f0 <__assert_fail@plt+0x111f0>
   22764:	b	22b30 <__assert_fail@plt+0x11430>
   22768:	ldr	r2, [r4, #28]
   2276c:	ldr	r0, [r4, #4]
   22770:	add	r1, r0, r5
   22774:	sub	r2, r2, r5
   22778:	bl	11418 <memmove@plt>
   2277c:	b	22448 <__assert_fail@plt+0x10d48>
   22780:	and	r0, r6, #2
   22784:	eor	r1, r0, #10
   22788:	str	r1, [r4, #60]	; 0x3c
   2278c:	ldr	r0, [r4, #80]	; 0x50
   22790:	cmp	r0, #2
   22794:	bge	22424 <__assert_fail@plt+0x10d24>
   22798:	b	2243c <__assert_fail@plt+0x10d3c>
   2279c:	ldrb	r0, [r4, #72]	; 0x48
   227a0:	cmp	r0, #0
   227a4:	beq	229f0 <__assert_fail@plt+0x112f0>
   227a8:	ldr	r6, [r4, #36]	; 0x24
   227ac:	ldr	r5, [r4, #28]
   227b0:	cmp	r6, r1
   227b4:	movgt	r6, r1
   227b8:	cmp	r5, r6
   227bc:	blt	227c8 <__assert_fail@plt+0x110c8>
   227c0:	b	22814 <__assert_fail@plt+0x11114>
   227c4:	ldr	r9, [r4, #24]
   227c8:	ldr	r1, [r4]
   227cc:	ldr	r0, [r4, #64]	; 0x40
   227d0:	add	r1, r1, r9
   227d4:	cmp	r0, #0
   227d8:	ldrb	r7, [r1, r5]
   227dc:	ldrbne	r7, [r0, r7]
   227e0:	add	r0, r7, #128	; 0x80
   227e4:	lsr	r0, r0, #7
   227e8:	cmp	r0, #2
   227ec:	bhi	227fc <__assert_fail@plt+0x110fc>
   227f0:	bl	11580 <__ctype_toupper_loc@plt>
   227f4:	ldr	r0, [r0]
   227f8:	ldr	r7, [r0, r7, lsl #2]
   227fc:	ldr	r0, [r4, #4]
   22800:	strb	r7, [r0, r5]
   22804:	add	r5, r5, #1
   22808:	cmp	r5, r6
   2280c:	blt	227c4 <__assert_fail@plt+0x110c4>
   22810:	mov	r5, r6
   22814:	str	r5, [r4, #28]
   22818:	str	r5, [r4, #32]
   2281c:	mov	r0, #0
   22820:	str	r0, [r4, #40]	; 0x28
   22824:	sub	sp, fp, #28
   22828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2282c:	ldr	r3, [r4]
   22830:	add	r0, r5, r0
   22834:	ldr	r1, [r4, #64]	; 0x40
   22838:	add	r0, r3, r0
   2283c:	cmp	r1, #0
   22840:	ldrb	r0, [r0, #-1]
   22844:	str	r2, [r4, #32]
   22848:	ldrbne	r0, [r1, r0]
   2284c:	ldr	r1, [r4, #68]	; 0x44
   22850:	ubfx	r2, r0, #5, #3
   22854:	and	r3, r0, #31
   22858:	ldr	r2, [r1, r2, lsl #2]
   2285c:	mov	r1, #1
   22860:	tst	r2, r1, lsl r3
   22864:	bne	22880 <__assert_fail@plt+0x11180>
   22868:	mov	r1, #0
   2286c:	cmp	r0, #10
   22870:	bne	22880 <__assert_fail@plt+0x11180>
   22874:	ldrb	r1, [r4, #77]	; 0x4d
   22878:	cmp	r1, #0
   2287c:	movwne	r1, #2
   22880:	str	r1, [r4, #60]	; 0x3c
   22884:	b	22460 <__assert_fail@plt+0x10d60>
   22888:	ldr	r1, [r4, #4]
   2288c:	ldr	r2, [r4, #68]	; 0x44
   22890:	ldrb	r0, [r1, r0]
   22894:	ubfx	r1, r0, #5, #3
   22898:	and	r3, r0, #31
   2289c:	ldr	r2, [r2, r1, lsl #2]
   228a0:	mov	r1, #1
   228a4:	tst	r2, r1, lsl r3
   228a8:	bne	228e0 <__assert_fail@plt+0x111e0>
   228ac:	mov	r1, #0
   228b0:	cmp	r0, #10
   228b4:	beq	228d4 <__assert_fail@plt+0x111d4>
   228b8:	b	228e0 <__assert_fail@plt+0x111e0>
   228bc:	ldrb	r0, [r4, #78]	; 0x4e
   228c0:	cmp	r0, #0
   228c4:	bne	22c6c <__assert_fail@plt+0x1156c>
   228c8:	mov	r1, #0
   228cc:	cmp	r6, #10
   228d0:	bne	228e0 <__assert_fail@plt+0x111e0>
   228d4:	ldrb	r1, [r4, #77]	; 0x4d
   228d8:	cmp	r1, #0
   228dc:	movwne	r1, #2
   228e0:	str	r1, [r4, #60]	; 0x3c
   228e4:	cmp	sl, r5
   228e8:	ldr	r2, [r4, #28]
   228ec:	bne	22b30 <__assert_fail@plt+0x11430>
   228f0:	cmp	r2, r5
   228f4:	ble	22b30 <__assert_fail@plt+0x11430>
   228f8:	ldr	r0, [r4, #12]
   228fc:	ldr	r0, [r0, r5, lsl #2]
   22900:	cmp	r0, r5
   22904:	bne	22b30 <__assert_fail@plt+0x11430>
   22908:	ldr	r0, [r4, #8]
   2290c:	sub	r2, r2, r5
   22910:	lsl	r2, r2, #2
   22914:	add	r1, r0, r5, lsl #2
   22918:	bl	11418 <memmove@plt>
   2291c:	ldr	r2, [r4, #28]
   22920:	ldr	r0, [r4, #4]
   22924:	add	r1, r0, r5
   22928:	sub	r2, r2, r5
   2292c:	bl	11418 <memmove@plt>
   22930:	ldr	r0, [r4, #28]
   22934:	ldr	r1, [r4, #32]
   22938:	sub	r0, r0, r5
   2293c:	sub	r1, r1, r5
   22940:	cmp	r0, #1
   22944:	str	r0, [r4, #28]
   22948:	str	r1, [r4, #32]
   2294c:	blt	22460 <__assert_fail@plt+0x10d60>
   22950:	ldr	r0, [r4, #12]
   22954:	mov	r2, #0
   22958:	add	r1, r0, r5, lsl #2
   2295c:	ldr	r3, [r1, r2, lsl #2]
   22960:	sub	r3, r3, r5
   22964:	str	r3, [r0, r2, lsl #2]
   22968:	add	r2, r2, #1
   2296c:	ldr	r3, [r4, #28]
   22970:	cmp	r2, r3
   22974:	blt	2295c <__assert_fail@plt+0x1125c>
   22978:	b	22460 <__assert_fail@plt+0x10d60>
   2297c:	mov	r0, r6
   22980:	bl	115f8 <iswalnum@plt>
   22984:	mov	r1, #1
   22988:	cmp	r6, #95	; 0x5f
   2298c:	beq	22414 <__assert_fail@plt+0x10d14>
   22990:	cmp	r0, #0
   22994:	beq	223fc <__assert_fail@plt+0x10cfc>
   22998:	b	22414 <__assert_fail@plt+0x10d14>
   2299c:	sub	r0, r8, r9
   229a0:	str	r0, [r4, #28]
   229a4:	cmp	lr, #0
   229a8:	ble	229e8 <__assert_fail@plt+0x112e8>
   229ac:	ldr	r1, [r4, #48]	; 0x30
   229b0:	sub	r0, lr, #1
   229b4:	cmp	r1, r0
   229b8:	beq	22c60 <__assert_fail@plt+0x11560>
   229bc:	ldr	r1, [r4, #80]	; 0x50
   229c0:	cmp	r1, #2
   229c4:	blt	22a7c <__assert_fail@plt+0x1137c>
   229c8:	ldr	r0, [r4, #8]
   229cc:	sub	r0, r0, #4
   229d0:	ldr	r6, [r0, lr, lsl #2]
   229d4:	cmn	r6, #1
   229d8:	bne	22ab0 <__assert_fail@plt+0x113b0>
   229dc:	sub	lr, lr, #1
   229e0:	cmp	lr, #0
   229e4:	bgt	229d0 <__assert_fail@plt+0x112d0>
   229e8:	ldr	r1, [r4, #60]	; 0x3c
   229ec:	b	22ad4 <__assert_fail@plt+0x113d4>
   229f0:	ldr	r3, [r4, #64]	; 0x40
   229f4:	cmp	r3, #0
   229f8:	beq	224e8 <__assert_fail@plt+0x10de8>
   229fc:	ldr	r0, [r4, #36]	; 0x24
   22a00:	ldr	r2, [r4, #28]
   22a04:	cmp	r0, r1
   22a08:	movgt	r0, r1
   22a0c:	cmp	r2, r0
   22a10:	bge	22a64 <__assert_fail@plt+0x11364>
   22a14:	ldr	r7, [r4]
   22a18:	add	r1, r2, r9
   22a1c:	ldr	r6, [r4, #4]
   22a20:	ldrb	r1, [r7, r1]
   22a24:	ldrb	r1, [r3, r1]
   22a28:	strb	r1, [r6, r2]
   22a2c:	add	r1, r2, #1
   22a30:	cmp	r1, r0
   22a34:	bge	22a60 <__assert_fail@plt+0x11360>
   22a38:	ldm	r4, {r2, r3}
   22a3c:	ldr	r7, [r4, #24]
   22a40:	ldr	r6, [r4, #64]	; 0x40
   22a44:	add	r2, r2, r7
   22a48:	ldrb	r2, [r2, r1]
   22a4c:	ldrb	r2, [r6, r2]
   22a50:	strb	r2, [r3, r1]
   22a54:	add	r1, r1, #1
   22a58:	cmp	r1, r0
   22a5c:	blt	22a38 <__assert_fail@plt+0x11338>
   22a60:	mov	r2, r0
   22a64:	str	r2, [r4, #28]
   22a68:	str	r2, [r4, #32]
   22a6c:	mov	r0, #0
   22a70:	str	r0, [r4, #40]	; 0x28
   22a74:	sub	sp, fp, #28
   22a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a7c:	ldr	r1, [r4, #4]
   22a80:	ldr	r2, [r4, #68]	; 0x44
   22a84:	ldrb	r0, [r1, r0]
   22a88:	ubfx	r1, r0, #5, #3
   22a8c:	and	r3, r0, #31
   22a90:	ldr	r2, [r2, r1, lsl #2]
   22a94:	mov	r1, #1
   22a98:	tst	r2, r1, lsl r3
   22a9c:	bne	22ad4 <__assert_fail@plt+0x113d4>
   22aa0:	mov	r1, #0
   22aa4:	cmp	r0, #10
   22aa8:	beq	22ac8 <__assert_fail@plt+0x113c8>
   22aac:	b	22ad4 <__assert_fail@plt+0x113d4>
   22ab0:	ldrb	r0, [r4, #78]	; 0x4e
   22ab4:	cmp	r0, #0
   22ab8:	bne	22d04 <__assert_fail@plt+0x11604>
   22abc:	mov	r1, #0
   22ac0:	cmp	r6, #10
   22ac4:	bne	22ad4 <__assert_fail@plt+0x113d4>
   22ac8:	ldrb	r1, [r4, #77]	; 0x4d
   22acc:	cmp	r1, #0
   22ad0:	movwne	r1, #2
   22ad4:	str	r1, [r4, #60]	; 0x3c
   22ad8:	mov	r0, #0
   22adc:	ldr	r2, [r4, #28]
   22ae0:	cmp	r2, #0
   22ae4:	bne	22c18 <__assert_fail@plt+0x11518>
   22ae8:	str	r0, [r4, #32]
   22aec:	b	22460 <__assert_fail@plt+0x10d60>
   22af0:	mov	r2, #0
   22af4:	strb	r2, [r4, #76]	; 0x4c
   22af8:	sub	r2, r5, r9
   22afc:	ldr	r3, [r4, #44]	; 0x2c
   22b00:	ldr	r7, [r4, #52]	; 0x34
   22b04:	add	r3, r2, r3
   22b08:	add	r2, r2, r7
   22b0c:	str	r3, [r4, #48]	; 0x30
   22b10:	str	r2, [r4, #56]	; 0x38
   22b14:	b	22518 <__assert_fail@plt+0x10e18>
   22b18:	and	r0, r6, #2
   22b1c:	eor	r1, r0, #10
   22b20:	str	r1, [r4, #60]	; 0x3c
   22b24:	cmp	sl, r5
   22b28:	ldr	r2, [r4, #28]
   22b2c:	beq	228f0 <__assert_fail@plt+0x111f0>
   22b30:	mov	r0, #0
   22b34:	strb	r0, [r4, #76]	; 0x4c
   22b38:	sub	r0, r5, r9
   22b3c:	ldr	r1, [r4, #44]	; 0x2c
   22b40:	ldr	r3, [r4, #52]	; 0x34
   22b44:	add	r1, r0, r1
   22b48:	add	r0, r0, r3
   22b4c:	str	r1, [r4, #48]	; 0x30
   22b50:	str	r0, [r4, #56]	; 0x38
   22b54:	add	r0, r7, r8
   22b58:	sub	r1, r0, #1
   22b5c:	add	r0, r1, #1
   22b60:	cmp	r0, #1
   22b64:	blt	22b7c <__assert_fail@plt+0x1147c>
   22b68:	ldr	r3, [r4, #12]
   22b6c:	ldr	r3, [r3, r1, lsl #2]
   22b70:	sub	r1, r1, #1
   22b74:	cmp	r3, r5
   22b78:	beq	22b5c <__assert_fail@plt+0x1145c>
   22b7c:	cmp	r0, r2
   22b80:	bge	22ba0 <__assert_fail@plt+0x114a0>
   22b84:	ldr	r1, [r4, #8]
   22b88:	ldr	r3, [r1, r0, lsl #2]
   22b8c:	cmn	r3, #1
   22b90:	bne	22ba0 <__assert_fail@plt+0x114a0>
   22b94:	add	r0, r0, #1
   22b98:	cmp	r0, r2
   22b9c:	blt	22b88 <__assert_fail@plt+0x11488>
   22ba0:	cmp	r0, r2
   22ba4:	bne	22bb8 <__assert_fail@plt+0x114b8>
   22ba8:	mov	r0, #0
   22bac:	str	r0, [r4, #28]
   22bb0:	str	r0, [r4, #32]
   22bb4:	b	22460 <__assert_fail@plt+0x10d60>
   22bb8:	ldr	r1, [r4, #12]
   22bbc:	ldr	r0, [r1, r0, lsl #2]
   22bc0:	subs	r2, r0, r5
   22bc4:	str	r2, [r4, #28]
   22bc8:	beq	22c0c <__assert_fail@plt+0x1150c>
   22bcc:	cmp	r2, #1
   22bd0:	blt	22bf4 <__assert_fail@plt+0x114f4>
   22bd4:	ldr	r0, [r4, #8]
   22bd8:	mov	r1, #0
   22bdc:	mvn	r3, #0
   22be0:	str	r3, [r0, r1, lsl #2]
   22be4:	add	r1, r1, #1
   22be8:	ldr	r2, [r4, #28]
   22bec:	cmp	r1, r2
   22bf0:	blt	22be0 <__assert_fail@plt+0x114e0>
   22bf4:	ldr	r0, [r4, #4]
   22bf8:	mov	r1, #255	; 0xff
   22bfc:	bl	11610 <memset@plt>
   22c00:	ldr	r0, [r4, #28]
   22c04:	str	r0, [r4, #32]
   22c08:	b	22460 <__assert_fail@plt+0x10d60>
   22c0c:	mov	r0, #0
   22c10:	str	r0, [r4, #32]
   22c14:	b	22460 <__assert_fail@plt+0x10d60>
   22c18:	cmp	r2, #1
   22c1c:	blt	22c40 <__assert_fail@plt+0x11540>
   22c20:	ldr	r0, [r4, #8]
   22c24:	mov	r1, #0
   22c28:	mvn	r3, #0
   22c2c:	str	r3, [r0, r1, lsl #2]
   22c30:	add	r1, r1, #1
   22c34:	ldr	r2, [r4, #28]
   22c38:	cmp	r1, r2
   22c3c:	blt	22c2c <__assert_fail@plt+0x1152c>
   22c40:	ldrb	r0, [r4, #75]	; 0x4b
   22c44:	cmp	r0, #0
   22c48:	beq	22cb0 <__assert_fail@plt+0x115b0>
   22c4c:	ldr	r0, [r4, #4]
   22c50:	mov	r1, #255	; 0xff
   22c54:	bl	11610 <memset@plt>
   22c58:	ldr	r0, [r4, #28]
   22c5c:	b	22ae8 <__assert_fail@plt+0x113e8>
   22c60:	and	r0, r6, #2
   22c64:	eor	r1, r0, #10
   22c68:	b	22ad4 <__assert_fail@plt+0x113d4>
   22c6c:	mov	r0, r6
   22c70:	bl	115f8 <iswalnum@plt>
   22c74:	mov	r1, #1
   22c78:	cmp	r6, #95	; 0x5f
   22c7c:	beq	228e0 <__assert_fail@plt+0x111e0>
   22c80:	cmp	r0, #0
   22c84:	beq	228c8 <__assert_fail@plt+0x111c8>
   22c88:	b	228e0 <__assert_fail@plt+0x111e0>
   22c8c:	mov	r0, r7
   22c90:	bl	115f8 <iswalnum@plt>
   22c94:	mov	r1, #1
   22c98:	cmp	r7, #95	; 0x5f
   22c9c:	beq	22ad4 <__assert_fail@plt+0x113d4>
   22ca0:	cmp	r0, #0
   22ca4:	mov	r2, r7
   22ca8:	beq	226a8 <__assert_fail@plt+0x10fa8>
   22cac:	b	22ad4 <__assert_fail@plt+0x113d4>
   22cb0:	mov	r0, r2
   22cb4:	str	r2, [r4, #32]
   22cb8:	b	22460 <__assert_fail@plt+0x10d60>
   22cbc:	cmp	r2, #1
   22cc0:	blt	22d24 <__assert_fail@plt+0x11624>
   22cc4:	sub	r1, r7, #1
   22cc8:	sub	r1, r1, r3
   22ccc:	mvn	r3, #1
   22cd0:	cmn	r1, #7
   22cd4:	mvnle	r1, #6
   22cd8:	sub	ip, r3, r1
   22cdc:	add	r1, sp, #14
   22ce0:	ldrb	r3, [r7, ip]
   22ce4:	sub	lr, ip, #1
   22ce8:	ldrb	r3, [r0, r3]
   22cec:	strb	r3, [r1, ip]
   22cf0:	add	r3, ip, #1
   22cf4:	mov	ip, lr
   22cf8:	cmp	r3, #1
   22cfc:	bgt	22ce0 <__assert_fail@plt+0x115e0>
   22d00:	b	22594 <__assert_fail@plt+0x10e94>
   22d04:	mov	r0, r6
   22d08:	bl	115f8 <iswalnum@plt>
   22d0c:	mov	r1, #1
   22d10:	cmp	r6, #95	; 0x5f
   22d14:	beq	22ad4 <__assert_fail@plt+0x113d4>
   22d18:	cmp	r0, #0
   22d1c:	beq	22abc <__assert_fail@plt+0x113bc>
   22d20:	b	22ad4 <__assert_fail@plt+0x113d4>
   22d24:	add	r1, sp, #14
   22d28:	b	22594 <__assert_fail@plt+0x10e94>
   22d2c:	push	{r4, r5, r6, sl, fp, lr}
   22d30:	add	fp, sp, #16
   22d34:	mov	r3, r2
   22d38:	ldr	r2, [r0, #88]	; 0x58
   22d3c:	mov	r5, r1
   22d40:	mov	r4, r0
   22d44:	mov	r1, r3
   22d48:	bl	22f78 <__assert_fail@plt+0x11878>
   22d4c:	ldr	r1, [r5, #8]
   22d50:	cmp	r1, #1
   22d54:	blt	22ec8 <__assert_fail@plt+0x117c8>
   22d58:	ldr	r3, [r5, #12]
   22d5c:	ldr	r5, [r4, #84]	; 0x54
   22d60:	movw	lr, #65280	; 0xff00
   22d64:	and	ip, r0, #8
   22d68:	and	r2, r0, #2
   22d6c:	tst	r0, #1
   22d70:	movt	lr, #3
   22d74:	ldr	r5, [r5]
   22d78:	bne	22dd0 <__assert_fail@plt+0x116d0>
   22d7c:	cmp	r2, #0
   22d80:	bne	22e34 <__assert_fail@plt+0x11734>
   22d84:	mov	r2, #0
   22d88:	ldr	r0, [r3, r2, lsl #2]
   22d8c:	add	r4, r5, r0, lsl #3
   22d90:	ldr	r4, [r4, #4]
   22d94:	uxtb	r6, r4
   22d98:	cmp	r6, #2
   22d9c:	bne	22dc0 <__assert_fail@plt+0x116c0>
   22da0:	tst	r4, lr
   22da4:	beq	22ecc <__assert_fail@plt+0x117cc>
   22da8:	tst	r4, #9216	; 0x2400
   22dac:	bne	22dc0 <__assert_fail@plt+0x116c0>
   22db0:	cmp	ip, #0
   22db4:	bne	22ecc <__assert_fail@plt+0x117cc>
   22db8:	ands	r4, r4, #32768	; 0x8000
   22dbc:	beq	22ecc <__assert_fail@plt+0x117cc>
   22dc0:	add	r2, r2, #1
   22dc4:	cmp	r2, r1
   22dc8:	blt	22d88 <__assert_fail@plt+0x11688>
   22dcc:	b	22ec8 <__assert_fail@plt+0x117c8>
   22dd0:	cmp	r2, #0
   22dd4:	bne	22e80 <__assert_fail@plt+0x11780>
   22dd8:	mov	r2, #0
   22ddc:	ldr	r0, [r3, r2, lsl #2]
   22de0:	add	r4, r5, r0, lsl #3
   22de4:	ldr	r4, [r4, #4]
   22de8:	uxtb	r6, r4
   22dec:	cmp	r6, #2
   22df0:	bne	22e04 <__assert_fail@plt+0x11704>
   22df4:	tst	r4, lr
   22df8:	beq	22ecc <__assert_fail@plt+0x117cc>
   22dfc:	tst	r4, #10240	; 0x2800
   22e00:	beq	22e14 <__assert_fail@plt+0x11714>
   22e04:	add	r2, r2, #1
   22e08:	cmp	r2, r1
   22e0c:	blt	22ddc <__assert_fail@plt+0x116dc>
   22e10:	b	22ec8 <__assert_fail@plt+0x117c8>
   22e14:	cmp	ip, #0
   22e18:	bne	22ecc <__assert_fail@plt+0x117cc>
   22e1c:	ands	r4, r4, #32768	; 0x8000
   22e20:	popeq	{r4, r5, r6, sl, fp, pc}
   22e24:	add	r2, r2, #1
   22e28:	cmp	r2, r1
   22e2c:	blt	22ddc <__assert_fail@plt+0x116dc>
   22e30:	b	22ec8 <__assert_fail@plt+0x117c8>
   22e34:	mov	r2, #0
   22e38:	ldr	r0, [r3, r2, lsl #2]
   22e3c:	add	r4, r5, r0, lsl #3
   22e40:	ldr	r4, [r4, #4]
   22e44:	uxtb	r6, r4
   22e48:	cmp	r6, #2
   22e4c:	bne	22e70 <__assert_fail@plt+0x11770>
   22e50:	tst	r4, lr
   22e54:	beq	22ecc <__assert_fail@plt+0x117cc>
   22e58:	tst	r4, #1024	; 0x400
   22e5c:	bne	22e70 <__assert_fail@plt+0x11770>
   22e60:	cmp	ip, #0
   22e64:	bne	22ecc <__assert_fail@plt+0x117cc>
   22e68:	ands	r4, r4, #32768	; 0x8000
   22e6c:	beq	22ecc <__assert_fail@plt+0x117cc>
   22e70:	add	r2, r2, #1
   22e74:	cmp	r2, r1
   22e78:	blt	22e38 <__assert_fail@plt+0x11738>
   22e7c:	b	22ec8 <__assert_fail@plt+0x117c8>
   22e80:	mov	r2, #0
   22e84:	ldr	r0, [r3, r2, lsl #2]
   22e88:	add	r4, r5, r0, lsl #3
   22e8c:	ldr	r4, [r4, #4]
   22e90:	uxtb	r6, r4
   22e94:	cmp	r6, #2
   22e98:	bne	22ebc <__assert_fail@plt+0x117bc>
   22e9c:	tst	r4, lr
   22ea0:	beq	22ecc <__assert_fail@plt+0x117cc>
   22ea4:	tst	r4, #2048	; 0x800
   22ea8:	bne	22ebc <__assert_fail@plt+0x117bc>
   22eac:	cmp	ip, #0
   22eb0:	bne	22ecc <__assert_fail@plt+0x117cc>
   22eb4:	ands	r4, r4, #32768	; 0x8000
   22eb8:	beq	22ecc <__assert_fail@plt+0x117cc>
   22ebc:	add	r2, r2, #1
   22ec0:	cmp	r2, r1
   22ec4:	blt	22e84 <__assert_fail@plt+0x11784>
   22ec8:	mov	r0, #0
   22ecc:	pop	{r4, r5, r6, sl, fp, pc}
   22ed0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22ed4:	add	fp, sp, #24
   22ed8:	mov	r8, r0
   22edc:	ldr	r0, [r0, #124]	; 0x7c
   22ee0:	cmp	r0, #1
   22ee4:	blt	22f68 <__assert_fail@plt+0x11868>
   22ee8:	mov	r7, #0
   22eec:	ldr	r0, [r8, #132]	; 0x84
   22ef0:	ldr	r5, [r0, r7, lsl #2]
   22ef4:	ldr	r0, [r5, #16]
   22ef8:	cmp	r0, #1
   22efc:	blt	22f2c <__assert_fail@plt+0x1182c>
   22f00:	mov	r4, #0
   22f04:	ldr	r0, [r5, #20]
   22f08:	ldr	r6, [r0, r4, lsl #2]
   22f0c:	ldr	r0, [r6, #16]
   22f10:	bl	13de4 <__assert_fail@plt+0x26e4>
   22f14:	mov	r0, r6
   22f18:	bl	13de4 <__assert_fail@plt+0x26e4>
   22f1c:	ldr	r0, [r5, #16]
   22f20:	add	r4, r4, #1
   22f24:	cmp	r4, r0
   22f28:	blt	22f04 <__assert_fail@plt+0x11804>
   22f2c:	ldr	r0, [r5, #20]
   22f30:	bl	13de4 <__assert_fail@plt+0x26e4>
   22f34:	ldr	r0, [r5, #8]
   22f38:	cmp	r0, #0
   22f3c:	beq	22f50 <__assert_fail@plt+0x11850>
   22f40:	ldr	r0, [r0, #8]
   22f44:	bl	13de4 <__assert_fail@plt+0x26e4>
   22f48:	ldr	r0, [r5, #8]
   22f4c:	bl	13de4 <__assert_fail@plt+0x26e4>
   22f50:	mov	r0, r5
   22f54:	bl	13de4 <__assert_fail@plt+0x26e4>
   22f58:	ldr	r0, [r8, #124]	; 0x7c
   22f5c:	add	r7, r7, #1
   22f60:	cmp	r7, r0
   22f64:	blt	22eec <__assert_fail@plt+0x117ec>
   22f68:	mov	r0, #0
   22f6c:	str	r0, [r8, #108]	; 0x6c
   22f70:	str	r0, [r8, #124]	; 0x7c
   22f74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f78:	push	{r4, r5, fp, lr}
   22f7c:	add	fp, sp, #8
   22f80:	mov	r4, r0
   22f84:	cmn	r1, #1
   22f88:	ldrle	r0, [r4, #60]	; 0x3c
   22f8c:	pople	{r4, r5, fp, pc}
   22f90:	ldr	r0, [r4, #48]	; 0x30
   22f94:	cmp	r0, r1
   22f98:	beq	23034 <__assert_fail@plt+0x11934>
   22f9c:	ldr	r0, [r4, #80]	; 0x50
   22fa0:	cmp	r0, #2
   22fa4:	blt	22ff4 <__assert_fail@plt+0x118f4>
   22fa8:	ldr	r0, [r4, #8]
   22fac:	ldr	r5, [r0, r1, lsl #2]
   22fb0:	cmn	r5, #1
   22fb4:	bne	22fd8 <__assert_fail@plt+0x118d8>
   22fb8:	cmp	r1, #0
   22fbc:	sub	r2, r1, #1
   22fc0:	ldrle	r0, [r4, #60]	; 0x3c
   22fc4:	mov	r1, r2
   22fc8:	pople	{r4, r5, fp, pc}
   22fcc:	ldr	r5, [r0, r1, lsl #2]
   22fd0:	cmn	r5, #1
   22fd4:	beq	22fb8 <__assert_fail@plt+0x118b8>
   22fd8:	ldrb	r0, [r4, #78]	; 0x4e
   22fdc:	cmp	r0, #0
   22fe0:	bne	23040 <__assert_fail@plt+0x11940>
   22fe4:	mov	r0, #0
   22fe8:	cmp	r5, #10
   22fec:	beq	23024 <__assert_fail@plt+0x11924>
   22ff0:	b	23030 <__assert_fail@plt+0x11930>
   22ff4:	ldr	r0, [r4, #4]
   22ff8:	ldr	r2, [r4, #68]	; 0x44
   22ffc:	ldrb	r1, [r0, r1]
   23000:	ubfx	r0, r1, #5, #3
   23004:	and	r3, r1, #31
   23008:	ldr	r2, [r2, r0, lsl #2]
   2300c:	mov	r0, #1
   23010:	tst	r2, r0, lsl r3
   23014:	bne	23030 <__assert_fail@plt+0x11930>
   23018:	mov	r0, #0
   2301c:	cmp	r1, #10
   23020:	popne	{r4, r5, fp, pc}
   23024:	ldrb	r0, [r4, #77]	; 0x4d
   23028:	cmp	r0, #0
   2302c:	movwne	r0, #2
   23030:	pop	{r4, r5, fp, pc}
   23034:	and	r0, r2, #2
   23038:	eor	r0, r0, #10
   2303c:	pop	{r4, r5, fp, pc}
   23040:	mov	r0, r5
   23044:	bl	115f8 <iswalnum@plt>
   23048:	mov	r1, r0
   2304c:	mov	r0, #1
   23050:	cmp	r5, #95	; 0x5f
   23054:	beq	23030 <__assert_fail@plt+0x11930>
   23058:	cmp	r1, #0
   2305c:	beq	22fe4 <__assert_fail@plt+0x118e4>
   23060:	b	23030 <__assert_fail@plt+0x11930>
   23064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23068:	add	fp, sp, #28
   2306c:	sub	sp, sp, #4
   23070:	mov	sl, r0
   23074:	ldr	r0, [r1, #4]
   23078:	cmp	r0, #1
   2307c:	blt	23148 <__assert_fail@plt+0x11a48>
   23080:	ldr	r7, [sl, #84]	; 0x54
   23084:	mov	r8, r2
   23088:	mov	r5, r1
   2308c:	mov	r4, #0
   23090:	b	230b8 <__assert_fail@plt+0x119b8>
   23094:	ldr	r0, [sl, #132]	; 0x84
   23098:	lsl	r1, r9, #3
   2309c:	bl	2aab4 <__assert_fail@plt+0x193b4>
   230a0:	cmp	r0, #0
   230a4:	beq	23154 <__assert_fail@plt+0x11a54>
   230a8:	lsl	r1, r9, #1
   230ac:	str	r1, [sl, #128]	; 0x80
   230b0:	str	r0, [sl, #132]	; 0x84
   230b4:	b	23100 <__assert_fail@plt+0x11a00>
   230b8:	ldr	r1, [r5, #8]
   230bc:	ldr	r6, [r1, r4, lsl #2]
   230c0:	ldr	r1, [r7]
   230c4:	add	r2, r1, r6, lsl #3
   230c8:	ldrb	r2, [r2, #4]
   230cc:	cmp	r2, #8
   230d0:	bne	2313c <__assert_fail@plt+0x11a3c>
   230d4:	ldr	r1, [r1, r6, lsl #3]
   230d8:	cmp	r1, #31
   230dc:	bgt	2313c <__assert_fail@plt+0x11a3c>
   230e0:	ldr	r2, [r7, #80]	; 0x50
   230e4:	mov	r3, #1
   230e8:	tst	r2, r3, lsl r1
   230ec:	beq	2313c <__assert_fail@plt+0x11a3c>
   230f0:	ldr	r9, [sl, #124]	; 0x7c
   230f4:	ldr	r0, [sl, #128]	; 0x80
   230f8:	cmp	r9, r0
   230fc:	beq	23094 <__assert_fail@plt+0x11994>
   23100:	mov	r0, #1
   23104:	mov	r1, #24
   23108:	bl	2aa30 <__assert_fail@plt+0x19330>
   2310c:	ldr	r1, [sl, #124]	; 0x7c
   23110:	ldr	r2, [sl, #132]	; 0x84
   23114:	str	r0, [r2, r1, lsl #2]
   23118:	ldr	r0, [sl, #132]	; 0x84
   2311c:	ldr	r0, [r0, r1, lsl #2]
   23120:	cmp	r0, #0
   23124:	beq	23154 <__assert_fail@plt+0x11a54>
   23128:	add	r1, r1, #1
   2312c:	str	r6, [r0, #4]
   23130:	str	r1, [sl, #124]	; 0x7c
   23134:	str	r8, [r0]
   23138:	ldr	r0, [r5, #4]
   2313c:	add	r4, r4, #1
   23140:	cmp	r4, r0
   23144:	blt	230b8 <__assert_fail@plt+0x119b8>
   23148:	mov	r0, #0
   2314c:	sub	sp, fp, #28
   23150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23154:	mov	r0, #12
   23158:	sub	sp, fp, #28
   2315c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23164:	add	fp, sp, #28
   23168:	sub	sp, sp, #76	; 0x4c
   2316c:	mov	r9, r0
   23170:	ldr	r0, [r1, #4]
   23174:	cmp	r0, #1
   23178:	blt	23b3c <__assert_fail@plt+0x1243c>
   2317c:	ldr	r2, [r9, #84]	; 0x54
   23180:	ldr	r5, [r9, #40]	; 0x28
   23184:	mov	r3, #0
   23188:	str	r9, [sp, #40]	; 0x28
   2318c:	str	r1, [sp, #16]
   23190:	str	r5, [sp, #52]	; 0x34
   23194:	str	r2, [sp, #20]
   23198:	b	231e0 <__assert_fail@plt+0x11ae0>
   2319c:	ldr	r0, [r9, #88]	; 0x58
   231a0:	and	r0, r0, #2
   231a4:	eor	r1, r0, #10
   231a8:	and	r0, r1, #1
   231ac:	tst	r6, #1024	; 0x400
   231b0:	eor	r2, r0, #1
   231b4:	bne	23274 <__assert_fail@plt+0x11b74>
   231b8:	b	232ec <__assert_fail@plt+0x11bec>
   231bc:	mov	r0, r4
   231c0:	bl	115f8 <iswalnum@plt>
   231c4:	mov	r1, #1
   231c8:	mov	r2, #0
   231cc:	cmp	r4, #95	; 0x5f
   231d0:	beq	232ec <__assert_fail@plt+0x11bec>
   231d4:	cmp	r0, #0
   231d8:	beq	232c4 <__assert_fail@plt+0x11bc4>
   231dc:	b	232ec <__assert_fail@plt+0x11bec>
   231e0:	ldr	r0, [r1, #8]
   231e4:	str	r3, [sp, #24]
   231e8:	ldr	r3, [r0, r3, lsl #2]
   231ec:	ldr	r0, [r2]
   231f0:	add	r7, r0, r3, lsl #3
   231f4:	mov	r1, r3
   231f8:	str	r3, [sp, #48]	; 0x30
   231fc:	ldr	r6, [r7, #4]!
   23200:	uxtb	r0, r6
   23204:	cmp	r0, #4
   23208:	bne	23b20 <__assert_fail@plt+0x12420>
   2320c:	movw	r0, #65280	; 0xff00
   23210:	movt	r0, #3
   23214:	tst	r6, r0
   23218:	beq	23320 <__assert_fail@plt+0x11c20>
   2321c:	cmn	r5, #1
   23220:	ble	23260 <__assert_fail@plt+0x11b60>
   23224:	ldr	r0, [r9, #48]	; 0x30
   23228:	cmp	r0, r5
   2322c:	beq	2319c <__assert_fail@plt+0x11a9c>
   23230:	ldr	r0, [r9, #80]	; 0x50
   23234:	cmp	r0, #2
   23238:	blt	23280 <__assert_fail@plt+0x11b80>
   2323c:	ldr	r0, [r9, #8]
   23240:	mov	r1, r5
   23244:	ldr	r4, [r0, r1, lsl #2]
   23248:	cmn	r4, #1
   2324c:	bne	232b8 <__assert_fail@plt+0x11bb8>
   23250:	sub	r2, r1, #1
   23254:	cmp	r1, #0
   23258:	mov	r1, r2
   2325c:	bgt	23244 <__assert_fail@plt+0x11b44>
   23260:	ldr	r1, [r9, #60]	; 0x3c
   23264:	and	r0, r1, #1
   23268:	tst	r6, #1024	; 0x400
   2326c:	eor	r2, r0, #1
   23270:	beq	232ec <__assert_fail@plt+0x11bec>
   23274:	cmp	r0, #0
   23278:	beq	23b20 <__assert_fail@plt+0x12420>
   2327c:	b	232ec <__assert_fail@plt+0x11bec>
   23280:	ldr	r0, [r9, #4]
   23284:	ldr	r1, [r9, #68]	; 0x44
   23288:	ldrb	r0, [r0, r5]
   2328c:	ubfx	r2, r0, #5, #3
   23290:	and	r4, r0, #31
   23294:	ldr	r3, [r1, r2, lsl #2]
   23298:	mov	r1, #1
   2329c:	mov	r2, #0
   232a0:	tst	r3, r1, lsl r4
   232a4:	bne	232ec <__assert_fail@plt+0x11bec>
   232a8:	mov	r1, #0
   232ac:	cmp	r0, #10
   232b0:	beq	232d0 <__assert_fail@plt+0x11bd0>
   232b4:	b	232dc <__assert_fail@plt+0x11bdc>
   232b8:	ldrb	r0, [r9, #78]	; 0x4e
   232bc:	cmp	r0, #0
   232c0:	bne	231bc <__assert_fail@plt+0x11abc>
   232c4:	mov	r1, #0
   232c8:	cmp	r4, #10
   232cc:	bne	232dc <__assert_fail@plt+0x11bdc>
   232d0:	ldrb	r1, [r9, #77]	; 0x4d
   232d4:	cmp	r1, #0
   232d8:	movwne	r1, #2
   232dc:	and	r0, r1, #1
   232e0:	tst	r6, #1024	; 0x400
   232e4:	eor	r2, r0, #1
   232e8:	bne	23274 <__assert_fail@plt+0x11b74>
   232ec:	ldr	r0, [r7]
   232f0:	cmp	r2, #0
   232f4:	bne	23300 <__assert_fail@plt+0x11c00>
   232f8:	ands	r2, r0, #2048	; 0x800
   232fc:	bne	23b20 <__assert_fail@plt+0x12420>
   23300:	tst	r1, #2
   23304:	bne	23310 <__assert_fail@plt+0x11c10>
   23308:	ands	r2, r0, #8192	; 0x2000
   2330c:	bne	23b20 <__assert_fail@plt+0x12420>
   23310:	tst	r1, #8
   23314:	bne	23320 <__assert_fail@plt+0x11c20>
   23318:	ands	r0, r0, #32768	; 0x8000
   2331c:	bne	23b20 <__assert_fail@plt+0x12420>
   23320:	ldr	r2, [r9, #108]	; 0x6c
   23324:	ldr	r0, [r9, #84]	; 0x54
   23328:	ldr	ip, [r9, #4]
   2332c:	cmp	r2, #1
   23330:	str	r0, [sp, #28]
   23334:	str	r2, [sp, #12]
   23338:	blt	233c8 <__assert_fail@plt+0x11cc8>
   2333c:	ldr	r1, [r9, #116]	; 0x74
   23340:	mov	r0, #0
   23344:	mov	r4, #1
   23348:	add	r3, r2, r0
   2334c:	add	r3, r3, r3, lsr #31
   23350:	asr	r7, r3, #1
   23354:	add	r6, r7, r7, lsl #1
   23358:	add	r6, r1, r6, lsl #3
   2335c:	ldr	r6, [r6, #4]
   23360:	cmp	r6, r5
   23364:	addlt	r0, r4, r3, asr #1
   23368:	movge	r2, r7
   2336c:	cmp	r0, r2
   23370:	blt	23348 <__assert_fail@plt+0x11c48>
   23374:	ldr	r1, [sp, #12]
   23378:	ldr	r7, [sp, #28]
   2337c:	cmp	r0, r1
   23380:	bge	233dc <__assert_fail@plt+0x11cdc>
   23384:	cmn	r0, #1
   23388:	beq	233dc <__assert_fail@plt+0x11cdc>
   2338c:	ldr	r1, [r9, #116]	; 0x74
   23390:	add	r0, r0, r0, lsl #1
   23394:	add	r0, r1, r0, lsl #3
   23398:	ldr	r1, [r0, #4]
   2339c:	cmp	r1, r5
   233a0:	bne	233dc <__assert_fail@plt+0x11cdc>
   233a4:	ldr	r1, [r0]
   233a8:	ldr	r2, [sp, #48]	; 0x30
   233ac:	cmp	r1, r2
   233b0:	beq	23848 <__assert_fail@plt+0x12148>
   233b4:	ldrb	r1, [r0, #20]
   233b8:	add	r0, r0, #24
   233bc:	cmp	r1, #0
   233c0:	bne	233a4 <__assert_fail@plt+0x11ca4>
   233c4:	b	233dc <__assert_fail@plt+0x11cdc>
   233c8:	mov	r0, #0
   233cc:	ldr	r1, [sp, #12]
   233d0:	ldr	r7, [sp, #28]
   233d4:	cmp	r0, r1
   233d8:	blt	23384 <__assert_fail@plt+0x11c84>
   233dc:	ldr	r0, [r9, #124]	; 0x7c
   233e0:	cmp	r0, #1
   233e4:	blt	23848 <__assert_fail@plt+0x12148>
   233e8:	ldr	r0, [r7]
   233ec:	ldr	r1, [sp, #48]	; 0x30
   233f0:	mov	r2, #0
   233f4:	ldr	r1, [r0, r1, lsl #3]
   233f8:	str	r1, [sp, #36]	; 0x24
   233fc:	b	23404 <__assert_fail@plt+0x11d04>
   23400:	ldr	r0, [r7]
   23404:	ldr	r1, [r9, #132]	; 0x84
   23408:	str	r2, [sp, #32]
   2340c:	ldr	lr, [r1, r2, lsl #2]
   23410:	ldr	r1, [lr, #4]
   23414:	ldr	r0, [r0, r1, lsl #3]
   23418:	ldr	r1, [sp, #36]	; 0x24
   2341c:	cmp	r0, r1
   23420:	bne	237e4 <__assert_fail@plt+0x120e4>
   23424:	ldr	r0, [lr, #16]
   23428:	ldr	r2, [lr]
   2342c:	mov	r8, #0
   23430:	str	lr, [sp, #44]	; 0x2c
   23434:	cmp	r0, #1
   23438:	blt	23448 <__assert_fail@plt+0x11d48>
   2343c:	ldr	r6, [sp, #52]	; 0x34
   23440:	mov	r7, r2
   23444:	b	23738 <__assert_fail@plt+0x12038>
   23448:	ldr	r6, [sp, #52]	; 0x34
   2344c:	ldr	r7, [sp, #28]
   23450:	cmp	r8, r0
   23454:	blt	237e0 <__assert_fail@plt+0x120e0>
   23458:	ldr	r5, [sp, #52]	; 0x34
   2345c:	cmp	r8, #0
   23460:	addne	r2, r2, #1
   23464:	cmp	r2, r5
   23468:	bgt	237e4 <__assert_fail@plt+0x120e4>
   2346c:	b	23608 <__assert_fail@plt+0x11f08>
   23470:	ldr	r0, [sp, #40]	; 0x28
   23474:	cmn	r4, #1
   23478:	beq	236a0 <__assert_fail@plt+0x11fa0>
   2347c:	ldr	r1, [lr, #8]
   23480:	str	r6, [fp, #-48]	; 0xffffffd0
   23484:	mov	r6, ip
   23488:	cmp	r1, #0
   2348c:	beq	234a8 <__assert_fail@plt+0x11da8>
   23490:	ldr	r3, [lr]
   23494:	ldr	r2, [lr, #4]
   23498:	mov	r7, #9
   2349c:	stm	sp, {r4, sl}
   234a0:	str	r7, [sp, #8]
   234a4:	b	234ec <__assert_fail@plt+0x11dec>
   234a8:	ldr	r0, [lr]
   234ac:	add	r1, sl, #1
   234b0:	mov	r9, #12
   234b4:	sub	r1, r1, r0
   234b8:	mov	r0, #12
   234bc:	bl	2aa30 <__assert_fail@plt+0x19330>
   234c0:	ldr	r2, [sp, #44]	; 0x2c
   234c4:	cmp	r0, #0
   234c8:	str	r0, [r2, #8]
   234cc:	beq	23b40 <__assert_fail@plt+0x12440>
   234d0:	mov	r1, r0
   234d4:	ldr	r3, [r2]
   234d8:	ldr	r2, [r2, #4]
   234dc:	stm	sp, {r4, sl}
   234e0:	mov	r0, #9
   234e4:	str	r0, [sp, #8]
   234e8:	ldr	r0, [sp, #40]	; 0x28
   234ec:	bl	2445c <__assert_fail@plt+0x12d5c>
   234f0:	mov	ip, r6
   234f4:	ldr	lr, [sp, #44]	; 0x2c
   234f8:	ldr	r6, [fp, #-48]	; 0xffffffd0
   234fc:	ldr	r5, [sp, #52]	; 0x34
   23500:	mov	r9, r0
   23504:	cmp	r0, #1
   23508:	mov	r7, r8
   2350c:	beq	236a8 <__assert_fail@plt+0x11fa8>
   23510:	cmp	r9, #0
   23514:	bne	23b40 <__assert_fail@plt+0x12440>
   23518:	ldr	r1, [lr, #12]
   2351c:	ldr	r0, [lr, #16]
   23520:	ldr	r5, [sp, #52]	; 0x34
   23524:	cmp	r0, r1
   23528:	beq	235dc <__assert_fail@plt+0x11edc>
   2352c:	mov	r0, #1
   23530:	mov	r1, #20
   23534:	bl	2aa30 <__assert_fail@plt+0x19330>
   23538:	ldr	r6, [sp, #40]	; 0x28
   2353c:	cmp	r0, #0
   23540:	beq	23b58 <__assert_fail@plt+0x12458>
   23544:	ldr	r1, [sp, #44]	; 0x2c
   23548:	mov	r2, r0
   2354c:	ldr	r0, [r1, #16]
   23550:	ldr	r3, [r1, #20]
   23554:	str	r2, [r3, r0, lsl #2]
   23558:	stm	r2, {r4, sl}
   2355c:	add	r0, r0, #1
   23560:	ldr	r3, [sp, #48]	; 0x30
   23564:	str	r0, [r1, #16]
   23568:	mov	r0, r6
   2356c:	str	r5, [sp]
   23570:	bl	24288 <__assert_fail@plt+0x12b88>
   23574:	cmp	r0, #1
   23578:	bhi	23b50 <__assert_fail@plt+0x12450>
   2357c:	ldr	ip, [r6, #4]
   23580:	ldr	r7, [sp, #28]
   23584:	ldr	lr, [sp, #44]	; 0x2c
   23588:	ldr	r6, [fp, #-48]	; 0xffffffd0
   2358c:	ldr	r9, [sp, #40]	; 0x28
   23590:	add	r2, sl, #1
   23594:	cmp	sl, r5
   23598:	blt	23608 <__assert_fail@plt+0x11f08>
   2359c:	b	237e4 <__assert_fail@plt+0x120e4>
   235a0:	ldr	r0, [r9, #48]	; 0x30
   235a4:	cmp	r6, r0
   235a8:	bge	237e4 <__assert_fail@plt+0x120e4>
   235ac:	add	r4, r6, #1
   235b0:	mov	r0, r9
   235b4:	mov	r8, r6
   235b8:	mov	r1, r4
   235bc:	bl	23b98 <__assert_fail@plt+0x12498>
   235c0:	cmp	r0, #0
   235c4:	bne	23b50 <__assert_fail@plt+0x12450>
   235c8:	ldr	ip, [r9, #4]
   235cc:	ldr	lr, [sp, #44]	; 0x2c
   235d0:	mov	r6, r8
   235d4:	mov	r1, r9
   235d8:	b	23628 <__assert_fail@plt+0x11f28>
   235dc:	mov	r1, #1
   235e0:	mov	r7, lr
   235e4:	orr	r6, r1, r0, lsl #1
   235e8:	ldr	r0, [lr, #20]
   235ec:	lsl	r1, r6, #2
   235f0:	bl	2aab4 <__assert_fail@plt+0x193b4>
   235f4:	cmp	r0, #0
   235f8:	beq	23b58 <__assert_fail@plt+0x12458>
   235fc:	str	r6, [r7, #12]
   23600:	str	r0, [r7, #20]
   23604:	b	2352c <__assert_fail@plt+0x11e2c>
   23608:	ldr	r0, [lr]
   2360c:	mov	sl, r2
   23610:	cmp	r2, r0
   23614:	ble	23640 <__assert_fail@plt+0x11f40>
   23618:	ldr	r0, [r9, #28]
   2361c:	cmp	r6, r0
   23620:	bge	235a0 <__assert_fail@plt+0x11ea0>
   23624:	add	r4, r6, #1
   23628:	add	r1, ip, sl
   2362c:	ldrb	r0, [ip, r6]
   23630:	ldrb	r1, [r1, #-1]
   23634:	cmp	r0, r1
   23638:	beq	23644 <__assert_fail@plt+0x11f44>
   2363c:	b	237e4 <__assert_fail@plt+0x120e4>
   23640:	mov	r4, r6
   23644:	ldr	r0, [r9, #100]	; 0x64
   23648:	mov	r6, r4
   2364c:	ldr	r2, [r0, sl, lsl #2]
   23650:	cmp	r2, #0
   23654:	beq	236a8 <__assert_fail@plt+0x11fa8>
   23658:	ldr	r0, [r2, #8]
   2365c:	cmp	r0, #1
   23660:	blt	236a8 <__assert_fail@plt+0x11fa8>
   23664:	ldr	r1, [r7]
   23668:	ldr	r2, [r2, #12]
   2366c:	ldr	r5, [sp, #36]	; 0x24
   23670:	mov	r8, r7
   23674:	mov	r3, #0
   23678:	ldr	r4, [r2, r3, lsl #2]
   2367c:	add	r7, r1, r4, lsl #3
   23680:	ldrb	r7, [r7, #4]
   23684:	cmp	r7, #9
   23688:	ldreq	r7, [r1, r4, lsl #3]
   2368c:	cmpeq	r7, r5
   23690:	beq	23470 <__assert_fail@plt+0x11d70>
   23694:	add	r3, r3, #1
   23698:	cmp	r3, r0
   2369c:	blt	23678 <__assert_fail@plt+0x11f78>
   236a0:	ldr	r5, [sp, #52]	; 0x34
   236a4:	mov	r7, r8
   236a8:	ldr	r9, [sp, #40]	; 0x28
   236ac:	add	r2, sl, #1
   236b0:	cmp	sl, r5
   236b4:	blt	23608 <__assert_fail@plt+0x11f08>
   236b8:	b	237e4 <__assert_fail@plt+0x120e4>
   236bc:	ldr	r2, [r9, #48]	; 0x30
   236c0:	cmp	r5, r2
   236c4:	bgt	23818 <__assert_fail@plt+0x12118>
   236c8:	ldr	r0, [r9, #36]	; 0x24
   236cc:	ldr	r3, [r9, #104]	; 0x68
   236d0:	cmp	r0, r5
   236d4:	cmple	r0, r2
   236d8:	blt	236e8 <__assert_fail@plt+0x11fe8>
   236dc:	cmp	r1, r5
   236e0:	cmple	r1, r2
   236e4:	bge	23704 <__assert_fail@plt+0x12004>
   236e8:	ldr	r0, [sp, #40]	; 0x28
   236ec:	add	r1, r5, #1
   236f0:	mov	r9, r3
   236f4:	bl	23b98 <__assert_fail@plt+0x12498>
   236f8:	mov	r3, r9
   236fc:	cmp	r0, #0
   23700:	bne	23b50 <__assert_fail@plt+0x12450>
   23704:	ldr	r9, [sp, #40]	; 0x28
   23708:	cmp	r5, r3
   2370c:	ble	23730 <__assert_fail@plt+0x12030>
   23710:	sub	r0, r5, r3
   23714:	mov	r1, #0
   23718:	lsl	r2, r0, #2
   2371c:	ldr	r0, [r9, #100]	; 0x64
   23720:	add	r0, r0, r3, lsl #2
   23724:	add	r0, r0, #4
   23728:	bl	11610 <memset@plt>
   2372c:	str	r5, [r9, #104]	; 0x68
   23730:	ldr	ip, [r9, #4]
   23734:	b	23764 <__assert_fail@plt+0x12064>
   23738:	ldr	r1, [lr, #20]
   2373c:	ldr	sl, [r1, r8, lsl #2]
   23740:	ldr	r1, [sl, #4]
   23744:	sub	r4, r1, r7
   23748:	str	r1, [fp, #-48]	; 0xffffffd0
   2374c:	cmp	r4, #1
   23750:	blt	23784 <__assert_fail@plt+0x12084>
   23754:	ldr	r1, [r9, #28]
   23758:	add	r5, r4, r6
   2375c:	cmp	r5, r1
   23760:	bgt	236bc <__assert_fail@plt+0x11fbc>
   23764:	add	r0, ip, r6
   23768:	add	r1, ip, r7
   2376c:	mov	r2, r4
   23770:	mov	r5, ip
   23774:	bl	11484 <memcmp@plt>
   23778:	ldr	lr, [sp, #44]	; 0x2c
   2377c:	cmp	r0, #0
   23780:	bne	237fc <__assert_fail@plt+0x120fc>
   23784:	ldr	r0, [sp, #52]	; 0x34
   23788:	ldr	r3, [sp, #48]	; 0x30
   2378c:	mov	r1, lr
   23790:	mov	r2, sl
   23794:	mov	r5, lr
   23798:	str	r0, [sp]
   2379c:	mov	r0, r9
   237a0:	bl	24288 <__assert_fail@plt+0x12b88>
   237a4:	cmp	r0, #1
   237a8:	bhi	23b50 <__assert_fail@plt+0x12450>
   237ac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   237b0:	ldr	r0, [r5, #16]
   237b4:	ldr	ip, [r9, #4]
   237b8:	add	r8, r8, #1
   237bc:	add	r6, r4, r6
   237c0:	mov	lr, r5
   237c4:	mov	r1, r9
   237c8:	cmp	r8, r0
   237cc:	mov	r7, r2
   237d0:	blt	23738 <__assert_fail@plt+0x12038>
   237d4:	ldr	r7, [sp, #28]
   237d8:	cmp	r8, r0
   237dc:	bge	23458 <__assert_fail@plt+0x11d58>
   237e0:	ldr	r5, [sp, #52]	; 0x34
   237e4:	ldr	r2, [sp, #32]
   237e8:	ldr	r0, [r9, #124]	; 0x7c
   237ec:	add	r2, r2, #1
   237f0:	cmp	r2, r0
   237f4:	blt	23400 <__assert_fail@plt+0x11d00>
   237f8:	b	2382c <__assert_fail@plt+0x1212c>
   237fc:	ldr	r0, [lr, #16]
   23800:	mov	ip, r5
   23804:	mov	r2, r7
   23808:	ldr	r7, [sp, #28]
   2380c:	cmp	r8, r0
   23810:	blt	237e0 <__assert_fail@plt+0x120e0>
   23814:	b	23458 <__assert_fail@plt+0x11d58>
   23818:	mov	r2, r7
   2381c:	ldr	r7, [sp, #28]
   23820:	cmp	r8, r0
   23824:	blt	237e0 <__assert_fail@plt+0x120e0>
   23828:	b	23458 <__assert_fail@plt+0x11d58>
   2382c:	mov	r1, #0
   23830:	ldr	r0, [r9, #108]	; 0x6c
   23834:	str	r1, [fp, #-32]	; 0xffffffe0
   23838:	ldr	r1, [sp, #12]
   2383c:	cmp	r1, r0
   23840:	bge	23b20 <__assert_fail@plt+0x12420>
   23844:	b	23890 <__assert_fail@plt+0x12190>
   23848:	mov	r0, #0
   2384c:	str	r0, [fp, #-32]	; 0xffffffe0
   23850:	b	23b20 <__assert_fail@plt+0x12420>
   23854:	ldr	r0, [r3, #88]	; 0x58
   23858:	and	r0, r0, #2
   2385c:	eor	sl, r0, #10
   23860:	b	239c4 <__assert_fail@plt+0x122c4>
   23864:	mov	r0, r4
   23868:	bl	115f8 <iswalnum@plt>
   2386c:	mov	sl, #1
   23870:	cmp	r4, #95	; 0x5f
   23874:	beq	23888 <__assert_fail@plt+0x12188>
   23878:	ldr	r3, [sp, #40]	; 0x28
   2387c:	cmp	r0, #0
   23880:	beq	239ac <__assert_fail@plt+0x122ac>
   23884:	b	239c4 <__assert_fail@plt+0x122c4>
   23888:	ldr	r3, [sp, #40]	; 0x28
   2388c:	b	239c4 <__assert_fail@plt+0x122c4>
   23890:	ldr	r0, [r9, #116]	; 0x74
   23894:	mov	r5, r1
   23898:	add	r1, r1, r1, lsl #1
   2389c:	ldr	r3, [sp, #48]	; 0x30
   238a0:	ldr	r2, [r0, r1, lsl #3]
   238a4:	cmp	r2, r3
   238a8:	bne	23b04 <__assert_fail@plt+0x12404>
   238ac:	add	r0, r0, r1, lsl #3
   238b0:	ldr	r2, [sp, #52]	; 0x34
   238b4:	ldr	r1, [r0, #4]
   238b8:	cmp	r1, r2
   238bc:	bne	23b04 <__assert_fail@plt+0x12404>
   238c0:	ldr	r2, [r0, #8]
   238c4:	ldr	r6, [r0, #12]
   238c8:	ldr	r0, [sp, #20]
   238cc:	ldr	r8, [r0, #24]
   238d0:	cmp	r6, r2
   238d4:	bne	238f0 <__assert_fail@plt+0x121f0>
   238d8:	ldr	r1, [sp, #48]	; 0x30
   238dc:	ldr	r0, [r0, #20]
   238e0:	add	r1, r1, r1, lsl #1
   238e4:	add	r0, r0, r1, lsl #2
   238e8:	ldr	r0, [r0, #8]
   238ec:	b	238fc <__assert_fail@plt+0x121fc>
   238f0:	ldr	r0, [r0, #12]
   238f4:	ldr	r1, [sp, #48]	; 0x30
   238f8:	add	r0, r0, r1, lsl #2
   238fc:	ldr	r9, [r0]
   23900:	ldr	r0, [sp, #52]	; 0x34
   23904:	str	r2, [fp, #-48]	; 0xffffffd0
   23908:	add	r0, r6, r0
   2390c:	sub	r7, r0, r2
   23910:	cmp	r7, #0
   23914:	ble	2395c <__assert_fail@plt+0x1225c>
   23918:	ldr	r3, [sp, #40]	; 0x28
   2391c:	sub	r0, r7, #1
   23920:	ldr	r1, [r3, #48]	; 0x30
   23924:	cmp	r1, r0
   23928:	beq	23854 <__assert_fail@plt+0x12154>
   2392c:	ldr	r1, [r3, #80]	; 0x50
   23930:	cmp	r1, #2
   23934:	blt	23968 <__assert_fail@plt+0x12268>
   23938:	ldr	r0, [r3, #8]
   2393c:	mov	r1, r7
   23940:	sub	r0, r0, #4
   23944:	ldr	r4, [r0, r1, lsl #2]
   23948:	cmn	r4, #1
   2394c:	bne	2399c <__assert_fail@plt+0x1229c>
   23950:	sub	r1, r1, #1
   23954:	cmp	r1, #0
   23958:	bgt	23944 <__assert_fail@plt+0x12244>
   2395c:	ldr	r3, [sp, #40]	; 0x28
   23960:	ldr	sl, [r3, #60]	; 0x3c
   23964:	b	239c4 <__assert_fail@plt+0x122c4>
   23968:	ldr	r1, [r3, #4]
   2396c:	ldr	r2, [r3, #68]	; 0x44
   23970:	mov	sl, #1
   23974:	ldrb	r0, [r1, r0]
   23978:	ubfx	r1, r0, #5, #3
   2397c:	ldr	r1, [r2, r1, lsl #2]
   23980:	and	r2, r0, #31
   23984:	tst	r1, sl, lsl r2
   23988:	bne	239c4 <__assert_fail@plt+0x122c4>
   2398c:	mov	sl, #0
   23990:	cmp	r0, #10
   23994:	beq	239b8 <__assert_fail@plt+0x122b8>
   23998:	b	239c4 <__assert_fail@plt+0x122c4>
   2399c:	ldr	r3, [sp, #40]	; 0x28
   239a0:	ldrb	r0, [r3, #78]	; 0x4e
   239a4:	cmp	r0, #0
   239a8:	bne	23864 <__assert_fail@plt+0x12164>
   239ac:	mov	sl, #0
   239b0:	cmp	r4, #10
   239b4:	bne	239c4 <__assert_fail@plt+0x122c4>
   239b8:	ldrb	sl, [r3, #77]	; 0x4d
   239bc:	cmp	sl, #0
   239c0:	movwne	sl, #2
   239c4:	ldr	r0, [r3, #100]	; 0x64
   239c8:	ldr	r2, [sp, #52]	; 0x34
   239cc:	add	r1, r9, r9, lsl #1
   239d0:	mov	r4, r3
   239d4:	add	r8, r8, r1, lsl #2
   239d8:	ldr	r2, [r0, r2, lsl #2]
   239dc:	ldr	r0, [r0, r7, lsl #2]
   239e0:	cmp	r2, #0
   239e4:	ldrne	r2, [r2, #8]
   239e8:	moveq	r2, #0
   239ec:	cmp	r0, #0
   239f0:	str	r2, [sp, #44]	; 0x2c
   239f4:	beq	23a60 <__assert_fail@plt+0x12360>
   239f8:	ldr	r1, [r0, #40]	; 0x28
   239fc:	sub	r4, fp, #44	; 0x2c
   23a00:	mov	r2, r8
   23a04:	mov	r0, r4
   23a08:	bl	23ffc <__assert_fail@plt+0x128fc>
   23a0c:	cmp	r0, #0
   23a10:	str	r0, [fp, #-32]	; 0xffffffe0
   23a14:	bne	23b60 <__assert_fail@plt+0x12460>
   23a18:	ldr	r1, [sp, #20]
   23a1c:	sub	r0, fp, #32
   23a20:	mov	r2, r4
   23a24:	mov	r3, sl
   23a28:	bl	217bc <__assert_fail@plt+0x100bc>
   23a2c:	ldr	r4, [sp, #40]	; 0x28
   23a30:	ldr	r1, [r4, #100]	; 0x64
   23a34:	str	r0, [r1, r7, lsl #2]
   23a38:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23a3c:	bl	13de4 <__assert_fail@plt+0x26e4>
   23a40:	ldr	r0, [r4, #100]	; 0x64
   23a44:	ldr	r1, [r0, r7, lsl #2]
   23a48:	cmp	r1, #0
   23a4c:	bne	23aa8 <__assert_fail@plt+0x123a8>
   23a50:	ldr	r9, [fp, #-32]	; 0xffffffe0
   23a54:	cmp	r9, #0
   23a58:	beq	23aa8 <__assert_fail@plt+0x123a8>
   23a5c:	b	23b44 <__assert_fail@plt+0x12444>
   23a60:	ldr	r1, [sp, #20]
   23a64:	sub	r0, fp, #32
   23a68:	mov	r2, r8
   23a6c:	mov	r3, sl
   23a70:	bl	217bc <__assert_fail@plt+0x100bc>
   23a74:	ldr	r1, [r4, #100]	; 0x64
   23a78:	str	r0, [r1, r7, lsl #2]
   23a7c:	ldr	r0, [r4, #100]	; 0x64
   23a80:	ldr	r1, [r0, r7, lsl #2]
   23a84:	cmp	r1, #0
   23a88:	bne	23aa8 <__assert_fail@plt+0x123a8>
   23a8c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   23a90:	ldr	r1, [fp, #-48]	; 0xffffffd0
   23a94:	cmp	r9, #0
   23a98:	bne	23b44 <__assert_fail@plt+0x12444>
   23a9c:	cmp	r6, r1
   23aa0:	bne	23b04 <__assert_fail@plt+0x12404>
   23aa4:	b	23ab4 <__assert_fail@plt+0x123b4>
   23aa8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   23aac:	cmp	r6, r1
   23ab0:	bne	23b04 <__assert_fail@plt+0x12404>
   23ab4:	ldr	r1, [sp, #52]	; 0x34
   23ab8:	ldr	r0, [r0, r1, lsl #2]
   23abc:	ldr	r1, [sp, #44]	; 0x2c
   23ac0:	ldr	r0, [r0, #8]
   23ac4:	cmp	r0, r1
   23ac8:	ble	23b04 <__assert_fail@plt+0x12404>
   23acc:	ldr	r4, [sp, #40]	; 0x28
   23ad0:	ldr	r2, [sp, #52]	; 0x34
   23ad4:	mov	r1, r8
   23ad8:	mov	r0, r4
   23adc:	bl	23064 <__assert_fail@plt+0x11964>
   23ae0:	cmp	r0, #0
   23ae4:	str	r0, [fp, #-32]	; 0xffffffe0
   23ae8:	bne	23b78 <__assert_fail@plt+0x12478>
   23aec:	mov	r0, r4
   23af0:	mov	r1, r8
   23af4:	bl	23160 <__assert_fail@plt+0x11a60>
   23af8:	cmp	r0, #0
   23afc:	str	r0, [fp, #-32]	; 0xffffffe0
   23b00:	bne	23b88 <__assert_fail@plt+0x12488>
   23b04:	ldr	r9, [sp, #40]	; 0x28
   23b08:	mov	r1, r5
   23b0c:	add	r1, r5, #1
   23b10:	ldr	r5, [sp, #52]	; 0x34
   23b14:	ldr	r0, [r9, #108]	; 0x6c
   23b18:	cmp	r1, r0
   23b1c:	blt	23890 <__assert_fail@plt+0x12190>
   23b20:	ldr	r1, [sp, #16]
   23b24:	ldr	r3, [sp, #24]
   23b28:	ldr	r2, [sp, #20]
   23b2c:	ldr	r0, [r1, #4]
   23b30:	add	r3, r3, #1
   23b34:	cmp	r3, r0
   23b38:	blt	231e0 <__assert_fail@plt+0x11ae0>
   23b3c:	mov	r9, #0
   23b40:	str	r9, [fp, #-32]	; 0xffffffe0
   23b44:	mov	r0, r9
   23b48:	sub	sp, fp, #28
   23b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b50:	mov	r9, r0
   23b54:	b	23b40 <__assert_fail@plt+0x12440>
   23b58:	mov	r9, #12
   23b5c:	b	23b40 <__assert_fail@plt+0x12440>
   23b60:	mov	r9, r0
   23b64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23b68:	bl	13de4 <__assert_fail@plt+0x26e4>
   23b6c:	mov	r0, r9
   23b70:	sub	sp, fp, #28
   23b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b78:	mov	r9, r0
   23b7c:	mov	r0, r9
   23b80:	sub	sp, fp, #28
   23b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b88:	mov	r9, r0
   23b8c:	mov	r0, r9
   23b90:	sub	sp, fp, #28
   23b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b98:	push	{r4, r5, r6, r7, fp, lr}
   23b9c:	add	fp, sp, #16
   23ba0:	mov	r4, r0
   23ba4:	ldr	r0, [r0, #36]	; 0x24
   23ba8:	mov	r5, #12
   23bac:	cmn	r0, #-536870910	; 0xe0000002
   23bb0:	bhi	23da0 <__assert_fail@plt+0x126a0>
   23bb4:	ldr	r6, [r4, #48]	; 0x30
   23bb8:	ldr	r2, [r4, #80]	; 0x50
   23bbc:	cmp	r6, r0, lsl #1
   23bc0:	lslge	r6, r0, #1
   23bc4:	cmp	r6, r1
   23bc8:	movle	r6, r1
   23bcc:	cmp	r2, #2
   23bd0:	blt	23c18 <__assert_fail@plt+0x12518>
   23bd4:	cmn	r6, #-1073741823	; 0xc0000001
   23bd8:	bhi	23da0 <__assert_fail@plt+0x126a0>
   23bdc:	ldr	r0, [r4, #8]
   23be0:	lsl	r7, r6, #2
   23be4:	mov	r1, r7
   23be8:	bl	2aab4 <__assert_fail@plt+0x193b4>
   23bec:	cmp	r0, #0
   23bf0:	beq	23da0 <__assert_fail@plt+0x126a0>
   23bf4:	str	r0, [r4, #8]
   23bf8:	ldr	r0, [r4, #12]
   23bfc:	cmp	r0, #0
   23c00:	beq	23c18 <__assert_fail@plt+0x12518>
   23c04:	mov	r1, r7
   23c08:	bl	2aab4 <__assert_fail@plt+0x193b4>
   23c0c:	cmp	r0, #0
   23c10:	beq	23da0 <__assert_fail@plt+0x126a0>
   23c14:	str	r0, [r4, #12]
   23c18:	ldrb	r0, [r4, #75]	; 0x4b
   23c1c:	cmp	r0, #0
   23c20:	beq	23c3c <__assert_fail@plt+0x1253c>
   23c24:	ldr	r0, [r4, #4]
   23c28:	mov	r1, r6
   23c2c:	bl	2aab4 <__assert_fail@plt+0x193b4>
   23c30:	cmp	r0, #0
   23c34:	beq	23da0 <__assert_fail@plt+0x126a0>
   23c38:	str	r0, [r4, #4]
   23c3c:	str	r6, [r4, #36]	; 0x24
   23c40:	ldr	r0, [r4, #100]	; 0x64
   23c44:	cmp	r0, #0
   23c48:	beq	23c64 <__assert_fail@plt+0x12564>
   23c4c:	mov	r1, #4
   23c50:	add	r1, r1, r6, lsl #2
   23c54:	bl	2aab4 <__assert_fail@plt+0x193b4>
   23c58:	cmp	r0, #0
   23c5c:	beq	23da0 <__assert_fail@plt+0x126a0>
   23c60:	str	r0, [r4, #100]	; 0x64
   23c64:	ldrb	r1, [r4, #72]	; 0x48
   23c68:	ldr	r0, [r4, #80]	; 0x50
   23c6c:	cmp	r1, #0
   23c70:	beq	23c90 <__assert_fail@plt+0x12590>
   23c74:	cmp	r0, #2
   23c78:	blt	23ca4 <__assert_fail@plt+0x125a4>
   23c7c:	mov	r0, r4
   23c80:	bl	1b770 <__assert_fail@plt+0xa070>
   23c84:	cmp	r0, #0
   23c88:	popne	{r4, r5, r6, r7, fp, pc}
   23c8c:	b	23d9c <__assert_fail@plt+0x1269c>
   23c90:	cmp	r0, #2
   23c94:	blt	23d1c <__assert_fail@plt+0x1261c>
   23c98:	mov	r0, r4
   23c9c:	bl	1be30 <__assert_fail@plt+0xa730>
   23ca0:	b	23d9c <__assert_fail@plt+0x1269c>
   23ca4:	ldr	r6, [r4, #36]	; 0x24
   23ca8:	ldr	r0, [r4, #48]	; 0x30
   23cac:	ldr	r5, [r4, #28]
   23cb0:	cmp	r6, r0
   23cb4:	movgt	r6, r0
   23cb8:	cmp	r5, r6
   23cbc:	bge	23d10 <__assert_fail@plt+0x12610>
   23cc0:	ldr	r1, [r4]
   23cc4:	ldr	r2, [r4, #24]
   23cc8:	ldr	r0, [r4, #64]	; 0x40
   23ccc:	add	r1, r1, r2
   23cd0:	cmp	r0, #0
   23cd4:	ldrb	r7, [r1, r5]
   23cd8:	ldrbne	r7, [r0, r7]
   23cdc:	add	r0, r7, #128	; 0x80
   23ce0:	lsr	r0, r0, #7
   23ce4:	cmp	r0, #2
   23ce8:	bhi	23cf8 <__assert_fail@plt+0x125f8>
   23cec:	bl	11580 <__ctype_toupper_loc@plt>
   23cf0:	ldr	r0, [r0]
   23cf4:	ldr	r7, [r0, r7, lsl #2]
   23cf8:	ldr	r0, [r4, #4]
   23cfc:	strb	r7, [r0, r5]
   23d00:	add	r5, r5, #1
   23d04:	cmp	r5, r6
   23d08:	blt	23cc0 <__assert_fail@plt+0x125c0>
   23d0c:	mov	r5, r6
   23d10:	str	r5, [r4, #28]
   23d14:	str	r5, [r4, #32]
   23d18:	b	23d9c <__assert_fail@plt+0x1269c>
   23d1c:	ldr	r2, [r4, #64]	; 0x40
   23d20:	cmp	r2, #0
   23d24:	beq	23d9c <__assert_fail@plt+0x1269c>
   23d28:	ldr	r0, [r4, #36]	; 0x24
   23d2c:	ldr	r3, [r4, #48]	; 0x30
   23d30:	ldr	r1, [r4, #28]
   23d34:	cmp	r0, r3
   23d38:	movgt	r0, r3
   23d3c:	cmp	r1, r0
   23d40:	bge	23d94 <__assert_fail@plt+0x12694>
   23d44:	ldm	r4, {r3, r7}
   23d48:	ldr	r6, [r4, #24]
   23d4c:	add	r6, r6, r1
   23d50:	ldrb	r3, [r3, r6]
   23d54:	ldrb	r2, [r2, r3]
   23d58:	strb	r2, [r7, r1]
   23d5c:	add	r1, r1, #1
   23d60:	cmp	r1, r0
   23d64:	bge	23d90 <__assert_fail@plt+0x12690>
   23d68:	ldm	r4, {r2, r3}
   23d6c:	ldr	r7, [r4, #24]
   23d70:	ldr	r6, [r4, #64]	; 0x40
   23d74:	add	r2, r2, r7
   23d78:	ldrb	r2, [r2, r1]
   23d7c:	ldrb	r2, [r6, r2]
   23d80:	strb	r2, [r3, r1]
   23d84:	add	r1, r1, #1
   23d88:	cmp	r1, r0
   23d8c:	blt	23d68 <__assert_fail@plt+0x12668>
   23d90:	mov	r1, r0
   23d94:	str	r1, [r4, #28]
   23d98:	str	r1, [r4, #32]
   23d9c:	mov	r5, #0
   23da0:	mov	r0, r5
   23da4:	pop	{r4, r5, r6, r7, fp, pc}
   23da8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23dac:	add	fp, sp, #24
   23db0:	sub	sp, sp, #16
   23db4:	mov	r9, r0
   23db8:	mov	r4, r1
   23dbc:	ldr	r5, [r1, #40]	; 0x28
   23dc0:	ldr	r7, [r1, #84]	; 0x54
   23dc4:	ldr	r0, [r1, #100]	; 0x64
   23dc8:	ldr	r1, [r1, #104]	; 0x68
   23dcc:	mov	r6, r2
   23dd0:	cmp	r5, r1
   23dd4:	ble	23df4 <__assert_fail@plt+0x126f4>
   23dd8:	str	r6, [r0, r5, lsl #2]
   23ddc:	str	r5, [r4, #104]	; 0x68
   23de0:	cmp	r6, #0
   23de4:	ldrne	r0, [r7, #76]	; 0x4c
   23de8:	cmpne	r0, #0
   23dec:	beq	23f48 <__assert_fail@plt+0x12848>
   23df0:	b	23f54 <__assert_fail@plt+0x12854>
   23df4:	ldr	r1, [r0, r5, lsl #2]
   23df8:	cmp	r1, #0
   23dfc:	beq	23e78 <__assert_fail@plt+0x12778>
   23e00:	ldr	r2, [r1, #40]	; 0x28
   23e04:	cmp	r6, #0
   23e08:	beq	23ec4 <__assert_fail@plt+0x127c4>
   23e0c:	ldr	r8, [r6, #40]	; 0x28
   23e10:	mov	r0, sp
   23e14:	mov	r1, r8
   23e18:	bl	23ffc <__assert_fail@plt+0x128fc>
   23e1c:	cmp	r0, #0
   23e20:	str	r0, [r9]
   23e24:	bne	23fcc <__assert_fail@plt+0x128cc>
   23e28:	ldr	r0, [r4, #40]	; 0x28
   23e2c:	cmp	r0, #0
   23e30:	ble	23e70 <__assert_fail@plt+0x12770>
   23e34:	ldr	r2, [r4, #48]	; 0x30
   23e38:	sub	r1, r0, #1
   23e3c:	cmp	r2, r1
   23e40:	beq	23fbc <__assert_fail@plt+0x128bc>
   23e44:	ldr	r2, [r4, #80]	; 0x50
   23e48:	cmp	r2, #2
   23e4c:	blt	23e90 <__assert_fail@plt+0x12790>
   23e50:	ldr	r1, [r4, #8]
   23e54:	sub	r1, r1, #4
   23e58:	ldr	r6, [r1, r0, lsl #2]
   23e5c:	cmn	r6, #1
   23e60:	bne	23ee8 <__assert_fail@plt+0x127e8>
   23e64:	sub	r0, r0, #1
   23e68:	cmp	r0, #0
   23e6c:	bgt	23e58 <__assert_fail@plt+0x12758>
   23e70:	ldr	r3, [r4, #60]	; 0x3c
   23e74:	b	23f0c <__assert_fail@plt+0x1280c>
   23e78:	str	r6, [r0, r5, lsl #2]
   23e7c:	cmp	r6, #0
   23e80:	ldrne	r0, [r7, #76]	; 0x4c
   23e84:	cmpne	r0, #0
   23e88:	beq	23f48 <__assert_fail@plt+0x12848>
   23e8c:	b	23f54 <__assert_fail@plt+0x12854>
   23e90:	ldr	r0, [r4, #4]
   23e94:	ldr	r2, [r4, #68]	; 0x44
   23e98:	mov	r3, #1
   23e9c:	ldrb	r0, [r0, r1]
   23ea0:	ubfx	r1, r0, #5, #3
   23ea4:	ldr	r1, [r2, r1, lsl #2]
   23ea8:	and	r2, r0, #31
   23eac:	tst	r1, r3, lsl r2
   23eb0:	bne	23f0c <__assert_fail@plt+0x1280c>
   23eb4:	mov	r3, #0
   23eb8:	cmp	r0, #10
   23ebc:	beq	23f00 <__assert_fail@plt+0x12800>
   23ec0:	b	23f0c <__assert_fail@plt+0x1280c>
   23ec4:	ldr	r0, [r2, #8]
   23ec8:	vldr	d16, [r2]
   23ecc:	mov	r8, #0
   23ed0:	str	r0, [sp, #8]
   23ed4:	mov	r0, r5
   23ed8:	vstr	d16, [sp]
   23edc:	cmp	r0, #0
   23ee0:	bgt	23e34 <__assert_fail@plt+0x12734>
   23ee4:	b	23e70 <__assert_fail@plt+0x12770>
   23ee8:	ldrb	r0, [r4, #78]	; 0x4e
   23eec:	cmp	r0, #0
   23ef0:	bne	23fdc <__assert_fail@plt+0x128dc>
   23ef4:	mov	r3, #0
   23ef8:	cmp	r6, #10
   23efc:	bne	23f0c <__assert_fail@plt+0x1280c>
   23f00:	ldrb	r3, [r4, #77]	; 0x4d
   23f04:	cmp	r3, #0
   23f08:	movwne	r3, #2
   23f0c:	mov	r2, sp
   23f10:	mov	r0, r9
   23f14:	mov	r1, r7
   23f18:	bl	217bc <__assert_fail@plt+0x100bc>
   23f1c:	mov	r6, r0
   23f20:	ldr	r0, [r4, #100]	; 0x64
   23f24:	cmp	r8, #0
   23f28:	str	r6, [r0, r5, lsl #2]
   23f2c:	beq	23f38 <__assert_fail@plt+0x12838>
   23f30:	ldr	r0, [sp, #8]
   23f34:	bl	13de4 <__assert_fail@plt+0x26e4>
   23f38:	cmp	r6, #0
   23f3c:	ldrne	r0, [r7, #76]	; 0x4c
   23f40:	cmpne	r0, #0
   23f44:	bne	23f54 <__assert_fail@plt+0x12854>
   23f48:	mov	r0, r6
   23f4c:	sub	sp, fp, #24
   23f50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23f54:	add	r7, r6, #4
   23f58:	mov	r0, r4
   23f5c:	mov	r2, r5
   23f60:	mov	r1, r7
   23f64:	bl	23064 <__assert_fail@plt+0x11964>
   23f68:	cmp	r0, #0
   23f6c:	str	r0, [r9]
   23f70:	bne	23fac <__assert_fail@plt+0x128ac>
   23f74:	ldrb	r0, [r6, #52]	; 0x34
   23f78:	tst	r0, #64	; 0x40
   23f7c:	beq	23f48 <__assert_fail@plt+0x12848>
   23f80:	mov	r0, r4
   23f84:	mov	r1, r7
   23f88:	bl	23160 <__assert_fail@plt+0x11a60>
   23f8c:	str	r0, [r9]
   23f90:	cmp	r0, #0
   23f94:	mov	r6, #0
   23f98:	ldreq	r0, [r4, #100]	; 0x64
   23f9c:	ldreq	r6, [r0, r5, lsl #2]
   23fa0:	mov	r0, r6
   23fa4:	sub	sp, fp, #24
   23fa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23fac:	mov	r6, #0
   23fb0:	mov	r0, r6
   23fb4:	sub	sp, fp, #24
   23fb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23fbc:	ldr	r0, [r4, #88]	; 0x58
   23fc0:	and	r0, r0, #2
   23fc4:	eor	r3, r0, #10
   23fc8:	b	23f0c <__assert_fail@plt+0x1280c>
   23fcc:	mov	r6, #0
   23fd0:	mov	r0, r6
   23fd4:	sub	sp, fp, #24
   23fd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23fdc:	mov	r0, r6
   23fe0:	bl	115f8 <iswalnum@plt>
   23fe4:	mov	r3, #1
   23fe8:	cmp	r6, #95	; 0x5f
   23fec:	beq	23f0c <__assert_fail@plt+0x1280c>
   23ff0:	cmp	r0, #0
   23ff4:	beq	23ef4 <__assert_fail@plt+0x127f4>
   23ff8:	b	23f0c <__assert_fail@plt+0x1280c>
   23ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24000:	add	fp, sp, #28
   24004:	sub	sp, sp, #20
   24008:	mov	sl, r2
   2400c:	cmp	r1, #0
   24010:	str	r0, [sp, #16]
   24014:	beq	2407c <__assert_fail@plt+0x1297c>
   24018:	ldr	r0, [r1, #4]
   2401c:	mov	r8, r1
   24020:	cmp	sl, #0
   24024:	beq	24038 <__assert_fail@plt+0x12938>
   24028:	cmp	r0, #1
   2402c:	ldrge	r1, [sl, #4]
   24030:	cmpge	r1, #1
   24034:	bge	240f8 <__assert_fail@plt+0x129f8>
   24038:	cmp	r0, #1
   2403c:	blt	2407c <__assert_fail@plt+0x1297c>
   24040:	ldr	r1, [sp, #16]
   24044:	str	r0, [r1, #4]
   24048:	ldr	r1, [r8, #4]
   2404c:	cmp	r1, #1
   24050:	blt	240dc <__assert_fail@plt+0x129dc>
   24054:	ldr	r4, [sp, #16]
   24058:	str	r0, [r4]
   2405c:	lsl	r0, r0, #2
   24060:	bl	2aa84 <__assert_fail@plt+0x19384>
   24064:	cmp	r0, #0
   24068:	str	r0, [r4, #8]
   2406c:	beq	2426c <__assert_fail@plt+0x12b6c>
   24070:	ldr	r2, [r8, #4]
   24074:	ldr	r1, [r8, #8]
   24078:	b	240c8 <__assert_fail@plt+0x129c8>
   2407c:	cmp	sl, #0
   24080:	beq	240dc <__assert_fail@plt+0x129dc>
   24084:	ldr	r0, [sl, #4]
   24088:	cmp	r0, #1
   2408c:	blt	240dc <__assert_fail@plt+0x129dc>
   24090:	ldr	r1, [sp, #16]
   24094:	str	r0, [r1, #4]
   24098:	ldr	r1, [sl, #4]
   2409c:	cmp	r1, #1
   240a0:	blt	240dc <__assert_fail@plt+0x129dc>
   240a4:	ldr	r4, [sp, #16]
   240a8:	str	r0, [r4]
   240ac:	lsl	r0, r0, #2
   240b0:	bl	2aa84 <__assert_fail@plt+0x19384>
   240b4:	cmp	r0, #0
   240b8:	str	r0, [r4, #8]
   240bc:	beq	2426c <__assert_fail@plt+0x12b6c>
   240c0:	ldr	r2, [sl, #4]
   240c4:	ldr	r1, [sl, #8]
   240c8:	lsl	r2, r2, #2
   240cc:	bl	11448 <memcpy@plt>
   240d0:	mov	r0, #0
   240d4:	sub	sp, fp, #28
   240d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240dc:	ldr	r1, [sp, #16]
   240e0:	mov	r0, #0
   240e4:	str	r0, [r1]
   240e8:	str	r0, [r1, #4]
   240ec:	str	r0, [r1, #8]
   240f0:	sub	sp, fp, #28
   240f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240f8:	ldr	r4, [sp, #16]
   240fc:	add	r0, r1, r0
   24100:	str	r0, [r4]
   24104:	lsl	r0, r0, #2
   24108:	bl	2aa84 <__assert_fail@plt+0x19384>
   2410c:	cmp	r0, #0
   24110:	str	r0, [r4, #8]
   24114:	beq	2427c <__assert_fail@plt+0x12b7c>
   24118:	ldr	r9, [sl, #4]
   2411c:	ldr	lr, [r8, #4]
   24120:	mov	r1, #0
   24124:	mov	r7, #0
   24128:	cmp	r9, #0
   2412c:	movwgt	r1, #1
   24130:	cmp	lr, #1
   24134:	blt	24200 <__assert_fail@plt+0x12b00>
   24138:	mov	r2, #0
   2413c:	mov	ip, #0
   24140:	str	r2, [sp, #8]
   24144:	mov	r2, #0
   24148:	str	r2, [sp, #12]
   2414c:	mov	r2, #0
   24150:	ldr	r4, [sp, #12]
   24154:	mov	r7, ip
   24158:	tst	r1, #1
   2415c:	beq	24230 <__assert_fail@plt+0x12b30>
   24160:	ldr	r1, [sl, #8]
   24164:	ldr	r5, [r1, r7, lsl #2]
   24168:	ldr	r1, [r8, #8]
   2416c:	ldr	r3, [r1, r2, lsl #2]
   24170:	cmp	r3, r5
   24174:	ble	2419c <__assert_fail@plt+0x12a9c>
   24178:	add	r7, r7, #1
   2417c:	mov	r1, #0
   24180:	str	r5, [r0, r4, lsl #2]
   24184:	add	r4, r4, #1
   24188:	cmp	r9, r7
   2418c:	movwgt	r1, #1
   24190:	cmp	lr, r2
   24194:	bgt	24158 <__assert_fail@plt+0x12a58>
   24198:	b	24204 <__assert_fail@plt+0x12b04>
   2419c:	str	r3, [r0, r4, lsl #2]
   241a0:	ldr	r6, [sp, #8]
   241a4:	add	r1, r7, #1
   241a8:	mov	ip, r7
   241ac:	add	r2, r2, #1
   241b0:	ldr	r9, [sl, #4]
   241b4:	ldr	lr, [r8, #4]
   241b8:	moveq	ip, r1
   241bc:	str	r1, [sp, #4]
   241c0:	mov	r1, #0
   241c4:	sub	r6, r6, #1
   241c8:	cmp	r9, ip
   241cc:	str	r6, [sp, #8]
   241d0:	add	r6, r4, #1
   241d4:	movwgt	r1, #1
   241d8:	cmp	lr, r2
   241dc:	str	r6, [sp, #12]
   241e0:	bgt	24150 <__assert_fail@plt+0x12a50>
   241e4:	ldr	r2, [sp, #4]
   241e8:	cmp	r3, r5
   241ec:	add	r4, r4, #1
   241f0:	moveq	r7, r2
   241f4:	cmp	r1, #0
   241f8:	bne	2420c <__assert_fail@plt+0x12b0c>
   241fc:	b	24258 <__assert_fail@plt+0x12b58>
   24200:	mov	r4, #0
   24204:	cmp	r1, #0
   24208:	beq	24258 <__assert_fail@plt+0x12b58>
   2420c:	ldr	r1, [sl, #8]
   24210:	sub	r2, r9, r7
   24214:	add	r0, r0, r4, lsl #2
   24218:	lsl	r2, r2, #2
   2421c:	add	r1, r1, r7, lsl #2
   24220:	bl	11448 <memcpy@plt>
   24224:	sub	r0, r4, r7
   24228:	add	r4, r0, r9
   2422c:	b	24258 <__assert_fail@plt+0x12b58>
   24230:	ldr	r1, [r8, #8]
   24234:	add	r0, r0, r4, lsl #2
   24238:	add	r1, r1, r2, lsl #2
   2423c:	sub	r2, lr, r2
   24240:	lsl	r2, r2, #2
   24244:	bl	11448 <memcpy@plt>
   24248:	ldr	r0, [r8, #4]
   2424c:	ldr	r1, [sp, #8]
   24250:	add	r0, r0, r1
   24254:	add	r4, r0, r4
   24258:	ldr	r0, [sp, #16]
   2425c:	str	r4, [r0, #4]
   24260:	mov	r0, #0
   24264:	sub	sp, fp, #28
   24268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2426c:	ldr	r1, [sp, #16]
   24270:	mov	r0, #0
   24274:	str	r0, [r1]
   24278:	str	r0, [r1, #4]
   2427c:	mov	r0, #12
   24280:	sub	sp, fp, #28
   24284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2428c:	add	fp, sp, #28
   24290:	sub	sp, sp, #12
   24294:	mov	r6, r2
   24298:	mov	r7, r3
   2429c:	ldr	r2, [r2]
   242a0:	ldr	r9, [fp, #8]
   242a4:	mov	r4, r0
   242a8:	mov	r0, #8
   242ac:	mov	r8, r1
   242b0:	ldr	r3, [r6, #4]
   242b4:	str	r0, [sp, #8]
   242b8:	add	r1, r6, #8
   242bc:	mov	r0, r4
   242c0:	stm	sp, {r7, r9}
   242c4:	bl	2445c <__assert_fail@plt+0x12d5c>
   242c8:	mov	r5, r0
   242cc:	cmp	r0, #0
   242d0:	beq	242e0 <__assert_fail@plt+0x12be0>
   242d4:	mov	r0, r5
   242d8:	sub	sp, fp, #28
   242dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242e0:	ldr	r0, [r4, #108]	; 0x6c
   242e4:	ldr	r1, [r4, #112]	; 0x70
   242e8:	ldr	sl, [r6, #4]
   242ec:	ldr	r5, [r8]
   242f0:	cmp	r0, r1
   242f4:	blt	24344 <__assert_fail@plt+0x12c44>
   242f8:	ldr	r0, [r4, #116]	; 0x74
   242fc:	add	r1, r1, r1, lsl #1
   24300:	lsl	r1, r1, #4
   24304:	bl	2aab4 <__assert_fail@plt+0x193b4>
   24308:	cmp	r0, #0
   2430c:	beq	24444 <__assert_fail@plt+0x12d44>
   24310:	str	r0, [r4, #116]	; 0x74
   24314:	ldr	r1, [r4, #108]	; 0x6c
   24318:	ldr	r2, [r4, #112]	; 0x70
   2431c:	add	r1, r1, r1, lsl #1
   24320:	add	r0, r0, r1, lsl #3
   24324:	add	r1, r2, r2, lsl #1
   24328:	lsl	r2, r1, #3
   2432c:	mov	r1, #0
   24330:	bl	11610 <memset@plt>
   24334:	ldr	r1, [r4, #112]	; 0x70
   24338:	ldr	r0, [r4, #108]	; 0x6c
   2433c:	lsl	r1, r1, #1
   24340:	str	r1, [r4, #112]	; 0x70
   24344:	ldr	r1, [r4, #116]	; 0x74
   24348:	cmp	r0, #1
   2434c:	blt	2436c <__assert_fail@plt+0x12c6c>
   24350:	sub	r2, r0, #1
   24354:	add	r2, r2, r2, lsl #1
   24358:	add	r2, r1, r2, lsl #3
   2435c:	ldr	r3, [r2, #4]
   24360:	cmp	r3, r9
   24364:	moveq	r3, #1
   24368:	strbeq	r3, [r2, #20]
   2436c:	add	r2, r0, r0, lsl #1
   24370:	cmp	sl, r5
   24374:	mov	r3, #0
   24378:	add	r0, r0, #1
   2437c:	str	r7, [r1, r2, lsl #3]!
   24380:	mov	r2, #0
   24384:	mvneq	r3, #0
   24388:	str	r9, [r1, #4]
   2438c:	str	r5, [r1, #8]
   24390:	str	sl, [r1, #12]
   24394:	str	r3, [r1, #16]
   24398:	str	r0, [r4, #108]	; 0x6c
   2439c:	strb	r2, [r1, #20]
   243a0:	sub	r0, sl, r5
   243a4:	ldr	r1, [r4, #120]	; 0x78
   243a8:	cmp	r1, r0
   243ac:	strlt	r0, [r4, #120]	; 0x78
   243b0:	ldr	r0, [r6, #4]
   243b4:	ldr	r1, [r8]
   243b8:	ldr	r7, [r4, #104]	; 0x68
   243bc:	add	r0, r0, r9
   243c0:	sub	r6, r0, r1
   243c4:	ldr	r0, [r4, #36]	; 0x24
   243c8:	cmp	r0, r6
   243cc:	ldrle	r1, [r4, #48]	; 0x30
   243d0:	cmple	r0, r1
   243d4:	blt	24428 <__assert_fail@plt+0x12d28>
   243d8:	ldr	r0, [r4, #28]
   243dc:	cmp	r0, r6
   243e0:	ldrle	r1, [r4, #48]	; 0x30
   243e4:	cmple	r0, r1
   243e8:	blt	24428 <__assert_fail@plt+0x12d28>
   243ec:	mov	r5, #0
   243f0:	cmp	r6, r7
   243f4:	ble	242d4 <__assert_fail@plt+0x12bd4>
   243f8:	sub	r0, r6, r7
   243fc:	mov	r1, #0
   24400:	mov	r5, #0
   24404:	lsl	r2, r0, #2
   24408:	ldr	r0, [r4, #100]	; 0x64
   2440c:	add	r0, r0, r7, lsl #2
   24410:	add	r0, r0, #4
   24414:	bl	11610 <memset@plt>
   24418:	str	r6, [r4, #104]	; 0x68
   2441c:	mov	r0, r5
   24420:	sub	sp, fp, #28
   24424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24428:	add	r1, r6, #1
   2442c:	mov	r0, r4
   24430:	bl	23b98 <__assert_fail@plt+0x12498>
   24434:	mov	r5, r0
   24438:	cmp	r0, #0
   2443c:	bne	242d4 <__assert_fail@plt+0x12bd4>
   24440:	b	243ec <__assert_fail@plt+0x12cec>
   24444:	ldr	r0, [r4, #116]	; 0x74
   24448:	bl	13de4 <__assert_fail@plt+0x26e4>
   2444c:	mov	r5, #12
   24450:	mov	r0, r5
   24454:	sub	sp, fp, #28
   24458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2445c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24460:	add	fp, sp, #28
   24464:	sub	sp, sp, #84	; 0x54
   24468:	ldr	sl, [r0, #84]	; 0x54
   2446c:	mov	r8, r2
   24470:	mov	r2, #0
   24474:	mov	r9, r3
   24478:	ldr	r3, [fp, #12]
   2447c:	str	r0, [sp, #40]	; 0x28
   24480:	str	r2, [fp, #-52]	; 0xffffffcc
   24484:	ldr	r5, [r1, #4]
   24488:	ldr	r2, [sl]
   2448c:	str	sl, [sp, #20]
   24490:	ldr	r2, [r2, r8, lsl #3]
   24494:	str	r2, [sp, #24]
   24498:	ldr	r2, [r0, #120]	; 0x78
   2449c:	add	r2, r2, r3
   244a0:	cmp	r5, r2
   244a4:	ble	24da8 <__assert_fail@plt+0x136a8>
   244a8:	add	r4, r1, #8
   244ac:	ldr	r2, [r0, #40]	; 0x28
   244b0:	ldr	r5, [r1]
   244b4:	ldr	r3, [r0, #88]	; 0x58
   244b8:	str	r1, [sp, #16]
   244bc:	str	r2, [sp, #12]
   244c0:	ldr	r2, [r0, #100]	; 0x64
   244c4:	cmp	r5, #0
   244c8:	moveq	r5, r9
   244cc:	cmp	r5, #0
   244d0:	str	r2, [sp, #8]
   244d4:	ldr	r2, [r4]
   244d8:	str	r2, [r0, #100]	; 0x64
   244dc:	str	r5, [r0, #40]	; 0x28
   244e0:	ble	24524 <__assert_fail@plt+0x12e24>
   244e4:	ldr	r2, [r0, #48]	; 0x30
   244e8:	sub	r7, r5, #1
   244ec:	cmp	r2, r7
   244f0:	beq	24e18 <__assert_fail@plt+0x13718>
   244f4:	ldr	r2, [r0, #80]	; 0x50
   244f8:	cmp	r2, #2
   244fc:	blt	24568 <__assert_fail@plt+0x12e68>
   24500:	ldr	r2, [r0, #8]
   24504:	mov	r3, r5
   24508:	sub	r2, r2, #4
   2450c:	ldr	r6, [r2, r3, lsl #2]
   24510:	cmn	r6, #1
   24514:	bne	2459c <__assert_fail@plt+0x12e9c>
   24518:	sub	r3, r3, #1
   2451c:	cmp	r3, #0
   24520:	bgt	2450c <__assert_fail@plt+0x12e0c>
   24524:	ldr	r7, [r0, #60]	; 0x3c
   24528:	cmp	r5, r9
   2452c:	beq	245cc <__assert_fail@plt+0x12ecc>
   24530:	ldr	r0, [sp, #40]	; 0x28
   24534:	ldr	r0, [r0, #100]	; 0x64
   24538:	ldr	r4, [r0, r5, lsl #2]
   2453c:	cmp	r4, #0
   24540:	beq	24688 <__assert_fail@plt+0x12f88>
   24544:	ldrb	r0, [r4, #52]	; 0x34
   24548:	ldr	r8, [fp, #16]
   2454c:	tst	r0, #64	; 0x40
   24550:	bne	246a0 <__assert_fail@plt+0x12fa0>
   24554:	mov	r0, #0
   24558:	str	r0, [sp, #52]	; 0x34
   2455c:	str	r0, [sp, #48]	; 0x30
   24560:	str	r0, [sp, #56]	; 0x38
   24564:	b	246ec <__assert_fail@plt+0x12fec>
   24568:	ldr	r3, [r0, #4]
   2456c:	ldr	r2, [r0, #68]	; 0x44
   24570:	ldrb	r0, [r3, r7]
   24574:	mov	r7, #1
   24578:	ubfx	r1, r0, #5, #3
   2457c:	ldr	r1, [r2, r1, lsl #2]
   24580:	and	r2, r0, #31
   24584:	tst	r1, r7, lsl r2
   24588:	bne	245c4 <__assert_fail@plt+0x12ec4>
   2458c:	mov	r7, #0
   24590:	cmp	r0, #10
   24594:	beq	245b4 <__assert_fail@plt+0x12eb4>
   24598:	b	245c4 <__assert_fail@plt+0x12ec4>
   2459c:	ldrb	r0, [r0, #78]	; 0x4e
   245a0:	cmp	r0, #0
   245a4:	bne	24e64 <__assert_fail@plt+0x13764>
   245a8:	mov	r7, #0
   245ac:	cmp	r6, #10
   245b0:	bne	245c4 <__assert_fail@plt+0x12ec4>
   245b4:	ldr	r0, [sp, #40]	; 0x28
   245b8:	ldrb	r7, [r0, #77]	; 0x4d
   245bc:	cmp	r7, #0
   245c0:	movwne	r7, #2
   245c4:	cmp	r5, r9
   245c8:	bne	24530 <__assert_fail@plt+0x12e30>
   245cc:	mov	r0, #1
   245d0:	str	r0, [sp, #52]	; 0x34
   245d4:	str	r0, [sp, #48]	; 0x30
   245d8:	mov	r0, #4
   245dc:	bl	2aa84 <__assert_fail@plt+0x19384>
   245e0:	cmp	r0, #0
   245e4:	str	r0, [sp, #56]	; 0x38
   245e8:	beq	24e44 <__assert_fail@plt+0x13744>
   245ec:	str	r8, [r0]
   245f0:	ldr	r8, [fp, #16]
   245f4:	ldr	r2, [sp, #24]
   245f8:	mov	r0, #0
   245fc:	add	r1, sp, #48	; 0x30
   24600:	str	r0, [fp, #-52]	; 0xffffffcc
   24604:	mov	r0, sl
   24608:	mov	r3, r8
   2460c:	bl	24e84 <__assert_fail@plt+0x13784>
   24610:	cmp	r0, #0
   24614:	str	r0, [fp, #-52]	; 0xffffffcc
   24618:	bne	24e2c <__assert_fail@plt+0x1372c>
   2461c:	ldr	r0, [sp, #52]	; 0x34
   24620:	cmp	r0, #0
   24624:	beq	2464c <__assert_fail@plt+0x12f4c>
   24628:	ldr	r0, [sp, #40]	; 0x28
   2462c:	ldr	r3, [sp, #24]
   24630:	add	r1, sp, #48	; 0x30
   24634:	mov	r2, r5
   24638:	str	r8, [sp]
   2463c:	bl	24fd0 <__assert_fail@plt+0x138d0>
   24640:	cmp	r0, #0
   24644:	str	r0, [fp, #-52]	; 0xffffffcc
   24648:	bne	24e2c <__assert_fail@plt+0x1372c>
   2464c:	ldr	r1, [sp, #20]
   24650:	sub	r0, fp, #52	; 0x34
   24654:	add	r2, sp, #48	; 0x30
   24658:	mov	r3, r7
   2465c:	bl	217bc <__assert_fail@plt+0x100bc>
   24660:	mov	r4, r0
   24664:	cmp	r0, #0
   24668:	bne	24678 <__assert_fail@plt+0x12f78>
   2466c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24670:	cmp	r0, #0
   24674:	bne	24d90 <__assert_fail@plt+0x13690>
   24678:	ldr	r0, [sp, #40]	; 0x28
   2467c:	ldr	r0, [r0, #100]	; 0x64
   24680:	str	r4, [r0, r5, lsl #2]
   24684:	b	246ec <__assert_fail@plt+0x12fec>
   24688:	ldr	r8, [fp, #16]
   2468c:	mov	r4, #0
   24690:	str	r4, [sp, #52]	; 0x34
   24694:	str	r4, [sp, #48]	; 0x30
   24698:	str	r4, [sp, #56]	; 0x38
   2469c:	b	246ec <__assert_fail@plt+0x12fec>
   246a0:	ldr	r0, [r4, #8]
   246a4:	cmp	r0, #1
   246a8:	str	r0, [sp, #52]	; 0x34
   246ac:	blt	24d3c <__assert_fail@plt+0x1363c>
   246b0:	str	r0, [sp, #48]	; 0x30
   246b4:	lsl	r0, r0, #2
   246b8:	bl	2aa84 <__assert_fail@plt+0x19384>
   246bc:	cmp	r0, #0
   246c0:	str	r0, [sp, #56]	; 0x38
   246c4:	beq	24e44 <__assert_fail@plt+0x13744>
   246c8:	ldr	r2, [r4, #8]
   246cc:	ldr	r1, [r4, #12]
   246d0:	lsl	r2, r2, #2
   246d4:	bl	11448 <memcpy@plt>
   246d8:	ldrb	r0, [r4, #52]	; 0x34
   246dc:	mov	r1, #0
   246e0:	str	r1, [fp, #-52]	; 0xffffffcc
   246e4:	tst	r0, #64	; 0x40
   246e8:	bne	24628 <__assert_fail@plt+0x12f28>
   246ec:	str	r4, [sp, #36]	; 0x24
   246f0:	ldr	r4, [fp, #12]
   246f4:	mov	r9, r4
   246f8:	cmp	r5, r4
   246fc:	bge	24c84 <__assert_fail@plt+0x13584>
   24700:	ldr	r7, [sp, #40]	; 0x28
   24704:	ldr	r4, [sp, #20]
   24708:	ldr	sl, [sp, #24]
   2470c:	mov	r0, #0
   24710:	str	r0, [sp, #32]
   24714:	ldr	r0, [r7, #120]	; 0x78
   24718:	ldr	r1, [sp, #32]
   2471c:	cmp	r1, r0
   24720:	bgt	24c88 <__assert_fail@plt+0x13588>
   24724:	mov	r0, #0
   24728:	add	r1, r5, #1
   2472c:	str	r0, [sp, #52]	; 0x34
   24730:	str	r1, [sp, #28]
   24734:	ldr	r0, [r7, #100]	; 0x64
   24738:	ldr	r0, [r0, r1, lsl #2]
   2473c:	cmp	r0, #0
   24740:	beq	2475c <__assert_fail@plt+0x1305c>
   24744:	add	r1, r0, #4
   24748:	add	r0, sp, #48	; 0x30
   2474c:	bl	214cc <__assert_fail@plt+0xfdcc>
   24750:	cmp	r0, #0
   24754:	str	r0, [fp, #-52]	; 0xffffffcc
   24758:	bne	24d90 <__assert_fail@plt+0x13690>
   2475c:	ldr	r1, [sp, #36]	; 0x24
   24760:	cmp	r1, #0
   24764:	beq	24af8 <__assert_fail@plt+0x133f8>
   24768:	mov	r0, #0
   2476c:	ldr	r8, [r7, #84]	; 0x54
   24770:	str	r0, [fp, #-32]	; 0xffffffe0
   24774:	str	r0, [fp, #-44]	; 0xffffffd4
   24778:	str	r0, [fp, #-48]	; 0xffffffd0
   2477c:	str	r0, [fp, #-40]	; 0xffffffd8
   24780:	ldr	r1, [r1, #20]
   24784:	cmp	r1, #1
   24788:	blt	24ae8 <__assert_fail@plt+0x133e8>
   2478c:	str	r5, [sp, #44]	; 0x2c
   24790:	ldr	r5, [sp, #36]	; 0x24
   24794:	mov	r4, #0
   24798:	b	24954 <__assert_fail@plt+0x13254>
   2479c:	mov	r0, #1
   247a0:	str	r0, [sp, #52]	; 0x34
   247a4:	str	r0, [sp, #48]	; 0x30
   247a8:	mov	r0, #4
   247ac:	bl	2aa84 <__assert_fail@plt+0x19384>
   247b0:	cmp	r0, #0
   247b4:	str	r0, [sp, #56]	; 0x38
   247b8:	beq	24d54 <__assert_fail@plt+0x13654>
   247bc:	str	r6, [r0]
   247c0:	ldr	r0, [r5, #20]
   247c4:	add	r4, r4, #1
   247c8:	cmp	r4, r0
   247cc:	blt	24954 <__assert_fail@plt+0x13254>
   247d0:	b	24ad0 <__assert_fail@plt+0x133d0>
   247d4:	cmp	r2, r1
   247d8:	bne	24844 <__assert_fail@plt+0x13144>
   247dc:	lsl	r0, r2, #1
   247e0:	lsl	r1, r2, #3
   247e4:	str	r0, [sp, #48]	; 0x30
   247e8:	ldr	r0, [sp, #56]	; 0x38
   247ec:	bl	2aab4 <__assert_fail@plt+0x193b4>
   247f0:	cmp	r0, #0
   247f4:	beq	24d60 <__assert_fail@plt+0x13660>
   247f8:	str	r0, [sp, #56]	; 0x38
   247fc:	ldr	r1, [sp, #52]	; 0x34
   24800:	ldr	r2, [r0]
   24804:	cmp	r2, r6
   24808:	ble	24854 <__assert_fail@plt+0x13154>
   2480c:	cmp	r1, #1
   24810:	blt	24884 <__assert_fail@plt+0x13184>
   24814:	add	r2, r0, r1, lsl #2
   24818:	add	r1, r1, #1
   2481c:	mov	r3, r2
   24820:	ldr	r7, [r3, #-4]!
   24824:	sub	r1, r1, #1
   24828:	cmp	r1, #1
   2482c:	str	r7, [r2]
   24830:	mov	r2, r3
   24834:	bgt	24820 <__assert_fail@plt+0x13120>
   24838:	ldr	r7, [sp, #40]	; 0x28
   2483c:	sub	r1, r1, #1
   24840:	b	24884 <__assert_fail@plt+0x13184>
   24844:	ldr	r0, [sp, #56]	; 0x38
   24848:	ldr	r2, [r0]
   2484c:	cmp	r2, r6
   24850:	bgt	2480c <__assert_fail@plt+0x1310c>
   24854:	add	r2, r0, r1, lsl #2
   24858:	ldr	r3, [r2, #-4]
   2485c:	cmp	r3, r6
   24860:	ble	24884 <__assert_fail@plt+0x13184>
   24864:	sub	r1, r1, #2
   24868:	str	r3, [r2]
   2486c:	sub	r1, r1, #1
   24870:	ldr	r3, [r2, #-8]
   24874:	sub	r2, r2, #4
   24878:	cmp	r3, r6
   2487c:	bgt	24868 <__assert_fail@plt+0x13168>
   24880:	add	r1, r1, #2
   24884:	str	r6, [r0, r1, lsl #2]
   24888:	b	24ab4 <__assert_fail@plt+0x133b4>
   2488c:	cmp	r2, r1
   24890:	bne	248fc <__assert_fail@plt+0x131fc>
   24894:	lsl	r0, r2, #1
   24898:	lsl	r1, r2, #3
   2489c:	str	r0, [fp, #-48]	; 0xffffffd0
   248a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   248a4:	bl	2aab4 <__assert_fail@plt+0x193b4>
   248a8:	cmp	r0, #0
   248ac:	beq	24d60 <__assert_fail@plt+0x13660>
   248b0:	str	r0, [fp, #-40]	; 0xffffffd8
   248b4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   248b8:	ldr	r2, [r0]
   248bc:	cmp	r2, r5
   248c0:	bgt	2490c <__assert_fail@plt+0x1320c>
   248c4:	add	r2, r0, r1, lsl #2
   248c8:	ldr	r7, [sp, #40]	; 0x28
   248cc:	ldr	r3, [r2, #-4]
   248d0:	cmp	r3, r5
   248d4:	ble	24940 <__assert_fail@plt+0x13240>
   248d8:	sub	r1, r1, #2
   248dc:	str	r3, [r2]
   248e0:	sub	r1, r1, #1
   248e4:	ldr	r3, [r2, #-8]
   248e8:	sub	r2, r2, #4
   248ec:	cmp	r3, r5
   248f0:	bgt	248dc <__assert_fail@plt+0x131dc>
   248f4:	add	r1, r1, #2
   248f8:	b	24940 <__assert_fail@plt+0x13240>
   248fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24900:	ldr	r2, [r0]
   24904:	cmp	r2, r5
   24908:	ble	248c4 <__assert_fail@plt+0x131c4>
   2490c:	cmp	r1, #1
   24910:	blt	2493c <__assert_fail@plt+0x1323c>
   24914:	add	r2, r0, r1, lsl #2
   24918:	add	r1, r1, #1
   2491c:	mov	r3, r2
   24920:	ldr	r7, [r3, #-4]!
   24924:	sub	r1, r1, #1
   24928:	cmp	r1, #1
   2492c:	str	r7, [r2]
   24930:	mov	r2, r3
   24934:	bgt	24920 <__assert_fail@plt+0x13220>
   24938:	sub	r1, r1, #1
   2493c:	ldr	r7, [sp, #40]	; 0x28
   24940:	str	r5, [r0, r1, lsl #2]
   24944:	ldr	r0, [fp, #-44]	; 0xffffffd4
   24948:	add	r0, r0, #1
   2494c:	str	r0, [fp, #-44]	; 0xffffffd4
   24950:	b	24a2c <__assert_fail@plt+0x1332c>
   24954:	ldr	r0, [r5, #24]
   24958:	ldr	sl, [r0, r4, lsl #2]
   2495c:	ldr	r0, [r8]
   24960:	add	r1, r0, sl, lsl #3
   24964:	ldrb	r1, [r1, #6]
   24968:	tst	r1, #16
   2496c:	beq	24a74 <__assert_fail@plt+0x13374>
   24970:	ldr	r5, [sp, #44]	; 0x2c
   24974:	mov	r0, r8
   24978:	mov	r1, sl
   2497c:	mov	r2, r7
   24980:	mov	r3, r5
   24984:	bl	25910 <__assert_fail@plt+0x14210>
   24988:	mov	r9, r0
   2498c:	cmp	r0, #2
   24990:	blt	24a60 <__assert_fail@plt+0x13360>
   24994:	ldr	r0, [sp, #40]	; 0x28
   24998:	ldr	r1, [r8, #12]
   2499c:	add	r6, r9, r5
   249a0:	ldr	r0, [r0, #100]	; 0x64
   249a4:	ldr	r5, [r1, sl, lsl #2]
   249a8:	mov	r1, #0
   249ac:	ldr	r0, [r0, r6, lsl #2]
   249b0:	str	r1, [fp, #-44]	; 0xffffffd4
   249b4:	cmp	r0, #0
   249b8:	beq	249d4 <__assert_fail@plt+0x132d4>
   249bc:	add	r1, r0, #4
   249c0:	sub	r0, fp, #48	; 0x30
   249c4:	bl	214cc <__assert_fail@plt+0xfdcc>
   249c8:	cmp	r0, #0
   249cc:	str	r0, [fp, #-32]	; 0xffffffe0
   249d0:	bne	24d68 <__assert_fail@plt+0x13668>
   249d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   249d8:	cmp	r2, #0
   249dc:	beq	24a04 <__assert_fail@plt+0x13304>
   249e0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   249e4:	cmp	r1, #0
   249e8:	bne	2488c <__assert_fail@plt+0x1318c>
   249ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   249f0:	str	r5, [r0]
   249f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   249f8:	add	r0, r0, #1
   249fc:	str	r0, [fp, #-44]	; 0xffffffd4
   24a00:	b	24a28 <__assert_fail@plt+0x13328>
   24a04:	mov	r0, #1
   24a08:	str	r0, [fp, #-44]	; 0xffffffd4
   24a0c:	str	r0, [fp, #-48]	; 0xffffffd0
   24a10:	mov	r0, #4
   24a14:	bl	2aa84 <__assert_fail@plt+0x19384>
   24a18:	cmp	r0, #0
   24a1c:	str	r0, [fp, #-40]	; 0xffffffd8
   24a20:	beq	24d78 <__assert_fail@plt+0x13678>
   24a24:	str	r5, [r0]
   24a28:	ldr	r7, [sp, #40]	; 0x28
   24a2c:	sub	r0, fp, #32
   24a30:	mov	r1, r8
   24a34:	sub	r2, fp, #48	; 0x30
   24a38:	bl	25670 <__assert_fail@plt+0x13f70>
   24a3c:	ldr	r1, [r7, #100]	; 0x64
   24a40:	str	r0, [r1, r6, lsl #2]
   24a44:	ldr	r0, [r7, #100]	; 0x64
   24a48:	ldr	r0, [r0, r6, lsl #2]
   24a4c:	cmp	r0, #0
   24a50:	bne	24a60 <__assert_fail@plt+0x13360>
   24a54:	ldr	r7, [fp, #-32]	; 0xffffffe0
   24a58:	cmp	r7, #0
   24a5c:	bne	24d6c <__assert_fail@plt+0x1366c>
   24a60:	ldr	r7, [sp, #40]	; 0x28
   24a64:	ldr	r5, [sp, #36]	; 0x24
   24a68:	cmp	r9, #0
   24a6c:	bne	24a8c <__assert_fail@plt+0x1338c>
   24a70:	ldr	r0, [r8]
   24a74:	ldr	r2, [sp, #44]	; 0x2c
   24a78:	add	r1, r0, sl, lsl #3
   24a7c:	mov	r0, r7
   24a80:	bl	25c28 <__assert_fail@plt+0x14528>
   24a84:	cmp	r0, #0
   24a88:	beq	24ac0 <__assert_fail@plt+0x133c0>
   24a8c:	ldr	r0, [r8, #12]
   24a90:	ldr	r2, [sp, #48]	; 0x30
   24a94:	ldr	r6, [r0, sl, lsl #2]
   24a98:	cmp	r2, #0
   24a9c:	beq	2479c <__assert_fail@plt+0x1309c>
   24aa0:	ldr	r1, [sp, #52]	; 0x34
   24aa4:	cmp	r1, #0
   24aa8:	bne	247d4 <__assert_fail@plt+0x130d4>
   24aac:	ldr	r0, [sp, #56]	; 0x38
   24ab0:	str	r6, [r0]
   24ab4:	ldr	r0, [sp, #52]	; 0x34
   24ab8:	add	r0, r0, #1
   24abc:	str	r0, [sp, #52]	; 0x34
   24ac0:	ldr	r0, [r5, #20]
   24ac4:	add	r4, r4, #1
   24ac8:	cmp	r4, r0
   24acc:	blt	24954 <__assert_fail@plt+0x13254>
   24ad0:	ldr	r4, [fp, #12]
   24ad4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24ad8:	ldr	sl, [sp, #24]
   24adc:	ldr	r5, [sp, #44]	; 0x2c
   24ae0:	mov	r9, r4
   24ae4:	ldr	r4, [sp, #20]
   24ae8:	bl	13de4 <__assert_fail@plt+0x26e4>
   24aec:	ldr	r8, [fp, #16]
   24af0:	mov	r0, #0
   24af4:	str	r0, [fp, #-52]	; 0xffffffcc
   24af8:	ldr	r0, [sp, #52]	; 0x34
   24afc:	cmp	r0, #0
   24b00:	beq	24b4c <__assert_fail@plt+0x1344c>
   24b04:	add	r6, sp, #48	; 0x30
   24b08:	mov	r0, r4
   24b0c:	mov	r2, sl
   24b10:	mov	r3, r8
   24b14:	mov	r1, r6
   24b18:	bl	24e84 <__assert_fail@plt+0x13784>
   24b1c:	cmp	r0, #0
   24b20:	str	r0, [fp, #-52]	; 0xffffffcc
   24b24:	bne	24d90 <__assert_fail@plt+0x13690>
   24b28:	ldr	r2, [sp, #28]
   24b2c:	mov	r0, r7
   24b30:	mov	r1, r6
   24b34:	mov	r3, sl
   24b38:	str	r8, [sp]
   24b3c:	bl	24fd0 <__assert_fail@plt+0x138d0>
   24b40:	cmp	r0, #0
   24b44:	str	r0, [fp, #-52]	; 0xffffffcc
   24b48:	bne	24d90 <__assert_fail@plt+0x13690>
   24b4c:	cmn	r5, #1
   24b50:	ble	24b8c <__assert_fail@plt+0x1348c>
   24b54:	ldr	r0, [r7, #48]	; 0x30
   24b58:	cmp	r0, r5
   24b5c:	beq	24c50 <__assert_fail@plt+0x13550>
   24b60:	ldr	r0, [r7, #80]	; 0x50
   24b64:	cmp	r0, #2
   24b68:	blt	24b98 <__assert_fail@plt+0x13498>
   24b6c:	ldr	r0, [r7, #8]
   24b70:	ldr	r6, [r0, r5, lsl #2]
   24b74:	cmn	r6, #1
   24b78:	bne	24bd0 <__assert_fail@plt+0x134d0>
   24b7c:	sub	r1, r5, #1
   24b80:	cmp	r5, #0
   24b84:	mov	r5, r1
   24b88:	bgt	24b70 <__assert_fail@plt+0x13470>
   24b8c:	ldr	r3, [r7, #60]	; 0x3c
   24b90:	add	r5, sp, #48	; 0x30
   24b94:	b	24bf8 <__assert_fail@plt+0x134f8>
   24b98:	ldr	r0, [r7, #4]
   24b9c:	ldr	r1, [r7, #68]	; 0x44
   24ba0:	mov	r3, #1
   24ba4:	ldrb	r0, [r0, r5]
   24ba8:	add	r5, sp, #48	; 0x30
   24bac:	ubfx	r2, r0, #5, #3
   24bb0:	ldr	r1, [r1, r2, lsl #2]
   24bb4:	and	r2, r0, #31
   24bb8:	tst	r1, r3, lsl r2
   24bbc:	bne	24bf8 <__assert_fail@plt+0x134f8>
   24bc0:	mov	r3, #0
   24bc4:	cmp	r0, #10
   24bc8:	beq	24bec <__assert_fail@plt+0x134ec>
   24bcc:	b	24bf8 <__assert_fail@plt+0x134f8>
   24bd0:	ldrb	r0, [r7, #78]	; 0x4e
   24bd4:	add	r5, sp, #48	; 0x30
   24bd8:	cmp	r0, #0
   24bdc:	bne	24c64 <__assert_fail@plt+0x13564>
   24be0:	mov	r3, #0
   24be4:	cmp	r6, #10
   24be8:	bne	24bf8 <__assert_fail@plt+0x134f8>
   24bec:	ldrb	r3, [r7, #77]	; 0x4d
   24bf0:	cmp	r3, #0
   24bf4:	movwne	r3, #2
   24bf8:	sub	r0, fp, #52	; 0x34
   24bfc:	mov	r1, r4
   24c00:	mov	r2, r5
   24c04:	bl	217bc <__assert_fail@plt+0x100bc>
   24c08:	cmp	r0, #0
   24c0c:	str	r0, [sp, #36]	; 0x24
   24c10:	bne	24c20 <__assert_fail@plt+0x13520>
   24c14:	ldr	r0, [fp, #-52]	; 0xffffffcc
   24c18:	cmp	r0, #0
   24c1c:	bne	24d90 <__assert_fail@plt+0x13690>
   24c20:	ldr	r1, [sp, #28]
   24c24:	ldr	r2, [sp, #36]	; 0x24
   24c28:	ldr	r0, [r7, #100]	; 0x64
   24c2c:	str	r2, [r0, r1, lsl #2]
   24c30:	cmp	r2, #0
   24c34:	ldr	r2, [sp, #32]
   24c38:	mov	r0, #0
   24c3c:	mov	r5, r1
   24c40:	addeq	r0, r2, #1
   24c44:	cmp	r1, r9
   24c48:	blt	24710 <__assert_fail@plt+0x13010>
   24c4c:	b	24c8c <__assert_fail@plt+0x1358c>
   24c50:	ldr	r0, [r7, #88]	; 0x58
   24c54:	add	r5, sp, #48	; 0x30
   24c58:	and	r0, r0, #2
   24c5c:	eor	r3, r0, #10
   24c60:	b	24bf8 <__assert_fail@plt+0x134f8>
   24c64:	mov	r0, r6
   24c68:	bl	115f8 <iswalnum@plt>
   24c6c:	mov	r3, #1
   24c70:	cmp	r6, #95	; 0x5f
   24c74:	beq	24bf8 <__assert_fail@plt+0x134f8>
   24c78:	cmp	r0, #0
   24c7c:	beq	24be0 <__assert_fail@plt+0x134e0>
   24c80:	b	24bf8 <__assert_fail@plt+0x134f8>
   24c84:	ldr	r7, [sp, #40]	; 0x28
   24c88:	mov	r1, r5
   24c8c:	ldr	r0, [sp, #56]	; 0x38
   24c90:	mov	r4, r1
   24c94:	bl	13de4 <__assert_fail@plt+0x26e4>
   24c98:	ldr	r0, [r7, #100]	; 0x64
   24c9c:	mov	sl, #1
   24ca0:	ldr	r1, [r0, r9, lsl #2]
   24ca4:	ldr	r0, [sp, #16]
   24ca8:	str	r4, [r0]
   24cac:	ldr	r0, [sp, #12]
   24cb0:	cmp	r1, #0
   24cb4:	addne	r1, r1, #4
   24cb8:	str	r0, [r7, #40]	; 0x28
   24cbc:	ldr	r0, [sp, #8]
   24cc0:	str	r0, [r7, #100]	; 0x64
   24cc4:	beq	24d20 <__assert_fail@plt+0x13620>
   24cc8:	ldr	r2, [r1, #4]
   24ccc:	cmp	r2, #1
   24cd0:	blt	24d2c <__assert_fail@plt+0x1362c>
   24cd4:	ldr	r0, [fp, #8]
   24cd8:	ldr	r1, [r1, #8]
   24cdc:	subs	r2, r2, #1
   24ce0:	mov	sl, #0
   24ce4:	mov	r3, #0
   24ce8:	beq	24d14 <__assert_fail@plt+0x13614>
   24cec:	mov	r3, #0
   24cf0:	mov	r7, #1
   24cf4:	add	r5, r3, r2
   24cf8:	lsr	r4, r5, #1
   24cfc:	ldr	r6, [r1, r4, lsl #2]
   24d00:	cmp	r6, r0
   24d04:	movge	r2, r4
   24d08:	addlt	r3, r7, r5, lsr #1
   24d0c:	cmp	r3, r2
   24d10:	bcc	24cf4 <__assert_fail@plt+0x135f4>
   24d14:	ldr	r1, [r1, r3, lsl #2]
   24d18:	cmp	r1, r0
   24d1c:	movne	sl, #1
   24d20:	mov	r0, sl
   24d24:	sub	sp, fp, #28
   24d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d2c:	mov	sl, #1
   24d30:	mov	r0, sl
   24d34:	sub	sp, fp, #28
   24d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d3c:	mov	r0, #0
   24d40:	str	r0, [sp, #52]	; 0x34
   24d44:	str	r0, [sp, #48]	; 0x30
   24d48:	str	r0, [sp, #56]	; 0x38
   24d4c:	str	r0, [fp, #-52]	; 0xffffffcc
   24d50:	b	2464c <__assert_fail@plt+0x12f4c>
   24d54:	mov	r0, #0
   24d58:	str	r0, [sp, #48]	; 0x30
   24d5c:	str	r0, [sp, #52]	; 0x34
   24d60:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24d64:	b	24d84 <__assert_fail@plt+0x13684>
   24d68:	mov	r7, r0
   24d6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24d70:	bl	13de4 <__assert_fail@plt+0x26e4>
   24d74:	b	24d8c <__assert_fail@plt+0x1368c>
   24d78:	mov	r0, #0
   24d7c:	str	r0, [fp, #-48]	; 0xffffffd0
   24d80:	str	r0, [fp, #-44]	; 0xffffffd4
   24d84:	bl	13de4 <__assert_fail@plt+0x26e4>
   24d88:	mov	r7, #12
   24d8c:	str	r7, [fp, #-52]	; 0xffffffcc
   24d90:	ldr	r0, [sp, #56]	; 0x38
   24d94:	bl	13de4 <__assert_fail@plt+0x26e4>
   24d98:	ldr	sl, [fp, #-52]	; 0xffffffcc
   24d9c:	mov	r0, sl
   24da0:	sub	sp, fp, #28
   24da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24da8:	mov	r6, r1
   24dac:	mvn	r1, #-2147483648	; 0x80000000
   24db0:	mov	sl, #12
   24db4:	sub	r1, r1, r5
   24db8:	cmp	r1, r2
   24dbc:	ble	24d20 <__assert_fail@plt+0x13620>
   24dc0:	add	r0, r2, #1
   24dc4:	add	r7, r0, r5
   24dc8:	str	r0, [sp, #44]	; 0x2c
   24dcc:	cmn	r7, #-1073741823	; 0xc0000001
   24dd0:	bhi	24d20 <__assert_fail@plt+0x13620>
   24dd4:	mov	r4, r6
   24dd8:	lsl	r1, r7, #2
   24ddc:	ldr	r0, [r4, #8]!
   24de0:	bl	2aab4 <__assert_fail@plt+0x193b4>
   24de4:	cmp	r0, #0
   24de8:	beq	24d20 <__assert_fail@plt+0x13620>
   24dec:	ldr	r1, [sp, #44]	; 0x2c
   24df0:	str	r7, [r6, #4]
   24df4:	str	r0, [r6, #8]
   24df8:	add	r0, r0, r5, lsl #2
   24dfc:	lsl	r2, r1, #2
   24e00:	mov	r1, #0
   24e04:	bl	11610 <memset@plt>
   24e08:	ldr	r0, [sp, #40]	; 0x28
   24e0c:	ldr	sl, [sp, #20]
   24e10:	mov	r1, r6
   24e14:	b	244ac <__assert_fail@plt+0x12dac>
   24e18:	and	r0, r3, #2
   24e1c:	eor	r7, r0, #10
   24e20:	cmp	r5, r9
   24e24:	beq	245cc <__assert_fail@plt+0x12ecc>
   24e28:	b	24530 <__assert_fail@plt+0x12e30>
   24e2c:	mov	sl, r0
   24e30:	ldr	r0, [sp, #56]	; 0x38
   24e34:	bl	13de4 <__assert_fail@plt+0x26e4>
   24e38:	mov	r0, sl
   24e3c:	sub	sp, fp, #28
   24e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e44:	mov	r0, #0
   24e48:	mov	sl, #12
   24e4c:	str	r0, [sp, #48]	; 0x30
   24e50:	str	r0, [sp, #52]	; 0x34
   24e54:	str	sl, [fp, #-52]	; 0xffffffcc
   24e58:	mov	r0, sl
   24e5c:	sub	sp, fp, #28
   24e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e64:	mov	r0, r6
   24e68:	bl	115f8 <iswalnum@plt>
   24e6c:	mov	r7, #1
   24e70:	cmp	r6, #95	; 0x5f
   24e74:	beq	245c4 <__assert_fail@plt+0x12ec4>
   24e78:	cmp	r0, #0
   24e7c:	beq	245a8 <__assert_fail@plt+0x12ea8>
   24e80:	b	245c4 <__assert_fail@plt+0x12ec4>
   24e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e88:	add	fp, sp, #28
   24e8c:	sub	sp, sp, #28
   24e90:	str	r0, [sp, #12]
   24e94:	ldr	r0, [r1, #4]
   24e98:	mov	r4, r1
   24e9c:	mov	r1, #0
   24ea0:	mov	sl, r3
   24ea4:	mov	r8, r2
   24ea8:	str	r1, [sp, #20]
   24eac:	str	r0, [sp, #16]
   24eb0:	lsl	r0, r0, #2
   24eb4:	bl	2aa84 <__assert_fail@plt+0x19384>
   24eb8:	cmp	r0, #0
   24ebc:	str	r0, [sp, #24]
   24ec0:	beq	24fc0 <__assert_fail@plt+0x138c0>
   24ec4:	ldr	r0, [r4, #4]
   24ec8:	cmp	r0, #1
   24ecc:	blt	24f98 <__assert_fail@plt+0x13898>
   24ed0:	mov	r9, #0
   24ed4:	str	r4, [sp, #8]
   24ed8:	ldr	r0, [r4, #8]
   24edc:	ldr	r1, [sp, #12]
   24ee0:	ldr	r2, [r0, r9, lsl #2]
   24ee4:	ldr	r1, [r1, #24]
   24ee8:	add	r0, r2, r2, lsl #1
   24eec:	add	r1, r1, r0, lsl #2
   24ef0:	ldr	r0, [r1, #4]
   24ef4:	cmp	r0, #1
   24ef8:	blt	24f34 <__assert_fail@plt+0x13834>
   24efc:	ldr	r7, [sp, #12]
   24f00:	ldr	r3, [r1, #8]
   24f04:	mov	r6, #0
   24f08:	ldr	r7, [r7]
   24f0c:	ldr	r4, [r3, r6, lsl #2]
   24f10:	add	r5, r7, r4, lsl #3
   24f14:	ldrb	r5, [r5, #4]
   24f18:	cmp	r5, sl
   24f1c:	ldreq	r5, [r7, r4, lsl #3]
   24f20:	cmpeq	r5, r8
   24f24:	beq	24f5c <__assert_fail@plt+0x1385c>
   24f28:	add	r6, r6, #1
   24f2c:	cmp	r6, r0
   24f30:	blt	24f0c <__assert_fail@plt+0x1380c>
   24f34:	add	r0, sp, #16
   24f38:	bl	214cc <__assert_fail@plt+0xfdcc>
   24f3c:	cmp	r0, #0
   24f40:	bne	24f80 <__assert_fail@plt+0x13880>
   24f44:	ldr	r4, [sp, #8]
   24f48:	add	r9, r9, #1
   24f4c:	ldr	r0, [r4, #4]
   24f50:	cmp	r9, r0
   24f54:	blt	24ed8 <__assert_fail@plt+0x137d8>
   24f58:	b	24f98 <__assert_fail@plt+0x13898>
   24f5c:	cmn	r4, #1
   24f60:	beq	24f34 <__assert_fail@plt+0x13834>
   24f64:	ldr	r0, [sp, #12]
   24f68:	add	r1, sp, #16
   24f6c:	mov	r3, r8
   24f70:	str	sl, [sp]
   24f74:	bl	2552c <__assert_fail@plt+0x13e2c>
   24f78:	cmp	r0, #0
   24f7c:	beq	24f44 <__assert_fail@plt+0x13844>
   24f80:	mov	r7, r0
   24f84:	ldr	r0, [sp, #24]
   24f88:	bl	13de4 <__assert_fail@plt+0x26e4>
   24f8c:	mov	r0, r7
   24f90:	sub	sp, fp, #28
   24f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f98:	ldr	r0, [r4, #8]
   24f9c:	bl	13de4 <__assert_fail@plt+0x26e4>
   24fa0:	vldr	d16, [sp, #16]
   24fa4:	ldr	r0, [sp, #24]
   24fa8:	mov	r7, #0
   24fac:	str	r0, [r4, #8]
   24fb0:	vstr	d16, [r4]
   24fb4:	mov	r0, r7
   24fb8:	sub	sp, fp, #28
   24fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fc0:	mov	r7, #12
   24fc4:	mov	r0, r7
   24fc8:	sub	sp, fp, #28
   24fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24fd4:	add	fp, sp, #28
   24fd8:	sub	sp, sp, #52	; 0x34
   24fdc:	ldr	ip, [r0, #108]	; 0x6c
   24fe0:	mov	lr, r1
   24fe4:	ldr	r1, [r0, #84]	; 0x54
   24fe8:	str	r0, [sp, #24]
   24fec:	mov	sl, r2
   24ff0:	mov	r8, #0
   24ff4:	mov	r0, #0
   24ff8:	cmp	ip, #1
   24ffc:	str	r1, [sp, #28]
   25000:	blt	25044 <__assert_fail@plt+0x13944>
   25004:	ldr	r0, [sp, #24]
   25008:	mov	r7, #1
   2500c:	mov	r1, ip
   25010:	ldr	r2, [r0, #116]	; 0x74
   25014:	mov	r0, #0
   25018:	add	r6, r1, r0
   2501c:	add	r6, r6, r6, lsr #31
   25020:	asr	r4, r6, #1
   25024:	add	r5, r4, r4, lsl #1
   25028:	add	r5, r2, r5, lsl #3
   2502c:	ldr	r5, [r5, #4]
   25030:	cmp	r5, sl
   25034:	addlt	r0, r7, r6, asr #1
   25038:	movge	r1, r4
   2503c:	cmp	r0, r1
   25040:	blt	25018 <__assert_fail@plt+0x13918>
   25044:	cmp	r0, ip
   25048:	bge	25510 <__assert_fail@plt+0x13e10>
   2504c:	cmn	r0, #1
   25050:	beq	25510 <__assert_fail@plt+0x13e10>
   25054:	ldr	r1, [sp, #24]
   25058:	add	r0, r0, r0, lsl #1
   2505c:	str	r0, [sp, #8]
   25060:	ldr	r1, [r1, #116]	; 0x74
   25064:	add	r0, r1, r0, lsl #3
   25068:	ldr	r0, [r0, #4]
   2506c:	cmp	r0, sl
   25070:	bne	25510 <__assert_fail@plt+0x13e10>
   25074:	str	r3, [sp, #12]
   25078:	mov	r9, #1
   2507c:	str	lr, [sp, #16]
   25080:	b	2508c <__assert_fail@plt+0x1398c>
   25084:	ldr	r0, [sp, #24]
   25088:	ldr	r1, [r0, #116]	; 0x74
   2508c:	ldr	r0, [sp, #8]
   25090:	add	r0, r1, r0, lsl #3
   25094:	mov	r8, r0
   25098:	ldr	r0, [lr, #4]
   2509c:	cmp	r0, #1
   250a0:	blt	253a8 <__assert_fail@plt+0x13ca8>
   250a4:	subs	r6, r0, #1
   250a8:	ldr	r2, [r8]
   250ac:	ldr	r0, [lr, #8]
   250b0:	mov	r3, #0
   250b4:	beq	250dc <__assert_fail@plt+0x139dc>
   250b8:	mov	r1, r6
   250bc:	add	r7, r3, r1
   250c0:	lsr	r5, r7, #1
   250c4:	ldr	r4, [r0, r5, lsl #2]
   250c8:	cmp	r4, r2
   250cc:	movge	r1, r5
   250d0:	addlt	r3, r9, r7, lsr #1
   250d4:	cmp	r3, r1
   250d8:	bcc	250bc <__assert_fail@plt+0x139bc>
   250dc:	ldr	r1, [r0, r3, lsl #2]
   250e0:	cmp	r1, r2
   250e4:	bne	253a8 <__assert_fail@plt+0x13ca8>
   250e8:	ldr	r3, [r8, #12]
   250ec:	ldr	r1, [r8, #8]
   250f0:	add	r3, r3, sl
   250f4:	sub	r7, r3, r1
   250f8:	cmp	r7, sl
   250fc:	bne	251f4 <__assert_fail@plt+0x13af4>
   25100:	ldr	r1, [sp, #28]
   25104:	add	r2, r2, r2, lsl #1
   25108:	cmp	r6, #0
   2510c:	ldr	r1, [r1, #20]
   25110:	add	r1, r1, r2, lsl #2
   25114:	mov	r2, #0
   25118:	ldr	r1, [r1, #8]
   2511c:	ldr	r4, [r1]
   25120:	beq	25144 <__assert_fail@plt+0x13a44>
   25124:	add	r1, r2, r6
   25128:	lsr	r3, r1, #1
   2512c:	ldr	r7, [r0, r3, lsl #2]
   25130:	cmp	r7, r4
   25134:	movge	r6, r3
   25138:	addlt	r2, r9, r1, lsr #1
   2513c:	cmp	r2, r6
   25140:	bcc	25124 <__assert_fail@plt+0x13a24>
   25144:	ldr	r1, [r0, r2, lsl #2]
   25148:	mov	r0, #4
   2514c:	cmp	r1, r4
   25150:	beq	2539c <__assert_fail@plt+0x13c9c>
   25154:	mov	r0, #4
   25158:	str	r9, [sp, #36]	; 0x24
   2515c:	str	r9, [sp, #32]
   25160:	bl	2aa84 <__assert_fail@plt+0x19384>
   25164:	cmp	r0, #0
   25168:	str	r0, [sp, #40]	; 0x28
   2516c:	beq	253bc <__assert_fail@plt+0x13cbc>
   25170:	mov	r6, #0
   25174:	str	r4, [r0]
   25178:	ldr	r0, [sp, #28]
   2517c:	ldr	r2, [sp, #12]
   25180:	ldr	r3, [fp, #8]
   25184:	add	r4, sp, #32
   25188:	str	r6, [fp, #-32]	; 0xffffffe0
   2518c:	mov	r1, r4
   25190:	bl	24e84 <__assert_fail@plt+0x13784>
   25194:	ldr	r5, [sp, #16]
   25198:	mov	r7, r0
   2519c:	mov	r1, r4
   251a0:	mov	r0, r5
   251a4:	bl	214cc <__assert_fail@plt+0xfdcc>
   251a8:	mov	r4, r0
   251ac:	ldr	r0, [sp, #40]	; 0x28
   251b0:	bl	13de4 <__assert_fail@plt+0x26e4>
   251b4:	orr	r0, r7, r6
   251b8:	mov	lr, r5
   251bc:	orrs	r0, r0, r4
   251c0:	mov	r0, #2
   251c4:	beq	2539c <__assert_fail@plt+0x13c9c>
   251c8:	cmp	r7, #0
   251cc:	mov	r0, #1
   251d0:	movne	r4, r7
   251d4:	cmp	r6, #0
   251d8:	movne	r4, r6
   251dc:	str	r4, [fp, #-32]	; 0xffffffe0
   251e0:	str	r4, [sp, #20]
   251e4:	cmp	r0, #0
   251e8:	cmpne	r0, #4
   251ec:	beq	253a8 <__assert_fail@plt+0x13ca8>
   251f0:	b	25504 <__assert_fail@plt+0x13e04>
   251f4:	ldr	r0, [sp, #24]
   251f8:	ldr	r0, [r0, #100]	; 0x64
   251fc:	ldr	r5, [r0, r7, lsl #2]
   25200:	ldr	r0, [sp, #28]
   25204:	ldr	r0, [r0, #12]
   25208:	cmp	r5, #0
   2520c:	ldr	r4, [r0, r2, lsl #2]
   25210:	beq	252d8 <__assert_fail@plt+0x13bd8>
   25214:	ldr	ip, [r5, #8]
   25218:	cmp	ip, #0
   2521c:	ble	25304 <__assert_fail@plt+0x13c04>
   25220:	ldr	r0, [r5, #12]
   25224:	subs	r3, ip, #1
   25228:	mov	r2, #0
   2522c:	str	r7, [sp, #4]
   25230:	beq	25254 <__assert_fail@plt+0x13b54>
   25234:	add	r6, r2, r3
   25238:	lsr	r7, r6, #1
   2523c:	ldr	r1, [r0, r7, lsl #2]
   25240:	cmp	r1, r4
   25244:	movge	r3, r7
   25248:	addlt	r2, r9, r6, lsr #1
   2524c:	cmp	r2, r3
   25250:	bcc	25234 <__assert_fail@plt+0x13b34>
   25254:	ldr	r1, [r0, r2, lsl #2]
   25258:	mov	r0, #4
   2525c:	cmp	r1, r4
   25260:	beq	2539c <__assert_fail@plt+0x13c9c>
   25264:	ldr	r7, [sp, #4]
   25268:	cmp	ip, #1
   2526c:	str	ip, [sp, #36]	; 0x24
   25270:	blt	25308 <__assert_fail@plt+0x13c08>
   25274:	lsl	r0, ip, #2
   25278:	str	ip, [sp, #32]
   2527c:	bl	2aa84 <__assert_fail@plt+0x19384>
   25280:	cmp	r0, #0
   25284:	str	r0, [sp, #40]	; 0x28
   25288:	beq	25424 <__assert_fail@plt+0x13d24>
   2528c:	ldr	r2, [r5, #8]
   25290:	ldr	r1, [r5, #12]
   25294:	mov	r5, r0
   25298:	lsl	r2, r2, #2
   2529c:	bl	11448 <memcpy@plt>
   252a0:	ldr	r1, [sp, #32]
   252a4:	mov	r6, #0
   252a8:	str	r6, [fp, #-32]	; 0xffffffe0
   252ac:	cmp	r1, #0
   252b0:	beq	2531c <__assert_fail@plt+0x13c1c>
   252b4:	ldr	r0, [sp, #36]	; 0x24
   252b8:	cmp	r0, #0
   252bc:	bne	25438 <__assert_fail@plt+0x13d38>
   252c0:	str	r4, [r5]
   252c4:	str	r9, [sp, #36]	; 0x24
   252c8:	mov	r6, #0
   252cc:	cmp	r6, #0
   252d0:	beq	25344 <__assert_fail@plt+0x13c44>
   252d4:	b	253fc <__assert_fail@plt+0x13cfc>
   252d8:	mov	r0, #4
   252dc:	str	r9, [sp, #36]	; 0x24
   252e0:	str	r9, [sp, #32]
   252e4:	bl	2aa84 <__assert_fail@plt+0x19384>
   252e8:	cmp	r0, #0
   252ec:	str	r0, [sp, #40]	; 0x28
   252f0:	beq	253d0 <__assert_fail@plt+0x13cd0>
   252f4:	str	r4, [r0]
   252f8:	mov	r0, #0
   252fc:	str	r0, [fp, #-32]	; 0xffffffe0
   25300:	b	25344 <__assert_fail@plt+0x13c44>
   25304:	str	ip, [sp, #36]	; 0x24
   25308:	mov	r6, #0
   2530c:	str	r6, [sp, #36]	; 0x24
   25310:	str	r6, [sp, #32]
   25314:	str	r6, [sp, #40]	; 0x28
   25318:	str	r6, [fp, #-32]	; 0xffffffe0
   2531c:	mov	r0, #4
   25320:	str	r9, [sp, #36]	; 0x24
   25324:	str	r9, [sp, #32]
   25328:	bl	2aa84 <__assert_fail@plt+0x19384>
   2532c:	cmp	r0, #0
   25330:	str	r0, [sp, #40]	; 0x28
   25334:	beq	253f0 <__assert_fail@plt+0x13cf0>
   25338:	str	r4, [r0]
   2533c:	cmp	r6, #0
   25340:	bne	253fc <__assert_fail@plt+0x13cfc>
   25344:	ldr	r1, [sp, #28]
   25348:	sub	r0, fp, #32
   2534c:	add	r2, sp, #32
   25350:	bl	25670 <__assert_fail@plt+0x13f70>
   25354:	ldr	r4, [sp, #24]
   25358:	ldr	r1, [r4, #100]	; 0x64
   2535c:	str	r0, [r1, r7, lsl #2]
   25360:	ldr	r0, [sp, #40]	; 0x28
   25364:	bl	13de4 <__assert_fail@plt+0x26e4>
   25368:	ldr	r0, [r4, #100]	; 0x64
   2536c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25370:	ldr	r0, [r0, r7, lsl #2]
   25374:	cmp	r1, #0
   25378:	mov	r2, r1
   2537c:	movwne	r2, #1
   25380:	clz	r0, r0
   25384:	lsr	r0, r0, #5
   25388:	ands	r0, r0, r2
   2538c:	ldr	r2, [sp, #20]
   25390:	movne	r2, r1
   25394:	str	r2, [sp, #20]
   25398:	ldr	lr, [sp, #16]
   2539c:	cmp	r0, #0
   253a0:	cmpne	r0, #4
   253a4:	bne	25504 <__assert_fail@plt+0x13e04>
   253a8:	ldrb	r1, [r8, #20]
   253ac:	add	r0, r8, #24
   253b0:	cmp	r1, #0
   253b4:	bne	25094 <__assert_fail@plt+0x13994>
   253b8:	b	2551c <__assert_fail@plt+0x13e1c>
   253bc:	mov	r0, #0
   253c0:	mov	r6, #12
   253c4:	str	r0, [sp, #32]
   253c8:	str	r0, [sp, #36]	; 0x24
   253cc:	b	25178 <__assert_fail@plt+0x13a78>
   253d0:	mov	r0, #0
   253d4:	mov	r1, #12
   253d8:	str	r0, [sp, #32]
   253dc:	str	r0, [sp, #36]	; 0x24
   253e0:	mov	r0, #12
   253e4:	str	r1, [fp, #-32]	; 0xffffffe0
   253e8:	str	r0, [sp, #20]
   253ec:	b	2541c <__assert_fail@plt+0x13d1c>
   253f0:	mov	r0, #0
   253f4:	str	r0, [sp, #32]
   253f8:	str	r0, [sp, #36]	; 0x24
   253fc:	clz	r0, r6
   25400:	lsr	r4, r0, #5
   25404:	ldr	r0, [sp, #40]	; 0x28
   25408:	bl	13de4 <__assert_fail@plt+0x26e4>
   2540c:	cmp	r4, #0
   25410:	movwne	r6, #12
   25414:	str	r6, [sp, #20]
   25418:	str	r6, [fp, #-32]	; 0xffffffe0
   2541c:	mov	r0, #1
   25420:	b	25398 <__assert_fail@plt+0x13c98>
   25424:	mov	r0, #0
   25428:	mov	r6, #12
   2542c:	str	r0, [sp, #32]
   25430:	str	r0, [sp, #36]	; 0x24
   25434:	b	25318 <__assert_fail@plt+0x13c18>
   25438:	cmp	r1, r0
   2543c:	bne	25468 <__assert_fail@plt+0x13d68>
   25440:	lsl	r0, r1, #1
   25444:	lsl	r1, r1, #3
   25448:	str	r0, [sp, #32]
   2544c:	mov	r0, r5
   25450:	bl	2aab4 <__assert_fail@plt+0x193b4>
   25454:	cmp	r0, #0
   25458:	beq	254fc <__assert_fail@plt+0x13dfc>
   2545c:	str	r0, [sp, #40]	; 0x28
   25460:	mov	r5, r0
   25464:	ldr	r0, [sp, #36]	; 0x24
   25468:	ldr	r1, [r5]
   2546c:	cmp	r1, r4
   25470:	ble	254a8 <__assert_fail@plt+0x13da8>
   25474:	cmp	r0, #1
   25478:	blt	254d8 <__assert_fail@plt+0x13dd8>
   2547c:	add	r1, r5, r0, lsl #2
   25480:	add	r0, r0, #1
   25484:	mov	r2, r1
   25488:	ldr	r3, [r2, #-4]!
   2548c:	sub	r0, r0, #1
   25490:	cmp	r0, #1
   25494:	str	r3, [r1]
   25498:	mov	r1, r2
   2549c:	bgt	25488 <__assert_fail@plt+0x13d88>
   254a0:	sub	r0, r0, #1
   254a4:	b	254d8 <__assert_fail@plt+0x13dd8>
   254a8:	add	r1, r5, r0, lsl #2
   254ac:	ldr	r2, [r1, #-4]
   254b0:	cmp	r2, r4
   254b4:	ble	254d8 <__assert_fail@plt+0x13dd8>
   254b8:	sub	r0, r0, #2
   254bc:	str	r2, [r1]
   254c0:	sub	r0, r0, #1
   254c4:	ldr	r2, [r1, #-8]
   254c8:	sub	r1, r1, #4
   254cc:	cmp	r2, r4
   254d0:	bgt	254bc <__assert_fail@plt+0x13dbc>
   254d4:	add	r0, r0, #2
   254d8:	str	r4, [r5, r0, lsl #2]
   254dc:	ldr	r7, [sp, #4]
   254e0:	mov	r6, #0
   254e4:	ldr	r0, [sp, #36]	; 0x24
   254e8:	add	r0, r0, #1
   254ec:	str	r0, [sp, #36]	; 0x24
   254f0:	cmp	r6, #0
   254f4:	beq	25344 <__assert_fail@plt+0x13c44>
   254f8:	b	253fc <__assert_fail@plt+0x13cfc>
   254fc:	mov	r6, #0
   25500:	b	253fc <__assert_fail@plt+0x13cfc>
   25504:	cmp	r0, #2
   25508:	beq	25084 <__assert_fail@plt+0x13984>
   2550c:	ldr	r8, [sp, #20]
   25510:	mov	r0, r8
   25514:	sub	sp, fp, #28
   25518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2551c:	mov	r8, #0
   25520:	mov	r0, r8
   25524:	sub	sp, fp, #28
   25528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2552c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25530:	add	fp, sp, #28
   25534:	sub	sp, sp, #4
   25538:	ldr	r4, [fp, #8]
   2553c:	mov	r9, r3
   25540:	mov	r7, r2
   25544:	mov	r8, r1
   25548:	mov	sl, r0
   2554c:	mov	r5, #1
   25550:	ldr	r0, [r8, #4]
   25554:	cmp	r0, #1
   25558:	bge	25578 <__assert_fail@plt+0x13e78>
   2555c:	b	255bc <__assert_fail@plt+0x13ebc>
   25560:	add	r0, r0, r7, lsl #2
   25564:	ldr	r0, [r0, #8]
   25568:	ldr	r7, [r0]
   2556c:	ldr	r0, [r8, #4]
   25570:	cmp	r0, #1
   25574:	blt	255bc <__assert_fail@plt+0x13ebc>
   25578:	subs	r2, r0, #1
   2557c:	ldr	r0, [r8, #8]
   25580:	mov	ip, r4
   25584:	mov	r1, #0
   25588:	beq	255ac <__assert_fail@plt+0x13eac>
   2558c:	add	r3, r1, r2
   25590:	lsr	r6, r3, #1
   25594:	ldr	r4, [r0, r6, lsl #2]
   25598:	cmp	r4, r7
   2559c:	movge	r2, r6
   255a0:	addlt	r1, r5, r3, lsr #1
   255a4:	cmp	r1, r2
   255a8:	bcc	2558c <__assert_fail@plt+0x13e8c>
   255ac:	ldr	r0, [r0, r1, lsl #2]
   255b0:	mov	r4, ip
   255b4:	cmp	r0, r7
   255b8:	beq	25658 <__assert_fail@plt+0x13f58>
   255bc:	ldr	r0, [sl]
   255c0:	add	r1, r0, r7, lsl #3
   255c4:	ldrb	r1, [r1, #4]
   255c8:	cmp	r1, r4
   255cc:	ldreq	r0, [r0, r7, lsl #3]
   255d0:	cmpeq	r0, r9
   255d4:	beq	2563c <__assert_fail@plt+0x13f3c>
   255d8:	mov	r0, r8
   255dc:	mov	r1, r7
   255e0:	bl	21674 <__assert_fail@plt+0xff74>
   255e4:	cmp	r0, #0
   255e8:	beq	25664 <__assert_fail@plt+0x13f64>
   255ec:	ldr	r0, [sl, #20]
   255f0:	add	r7, r7, r7, lsl #1
   255f4:	add	r1, r0, r7, lsl #2
   255f8:	ldr	r2, [r1, #4]
   255fc:	cmp	r2, #2
   25600:	beq	25610 <__assert_fail@plt+0x13f10>
   25604:	cmp	r2, #0
   25608:	bne	25560 <__assert_fail@plt+0x13e60>
   2560c:	b	25658 <__assert_fail@plt+0x13f58>
   25610:	ldr	r0, [r1, #8]
   25614:	mov	r1, r8
   25618:	mov	r3, r9
   2561c:	ldr	r2, [r0, #4]
   25620:	mov	r0, sl
   25624:	str	r4, [sp]
   25628:	bl	2552c <__assert_fail@plt+0x13e2c>
   2562c:	cmp	r0, #0
   25630:	bne	2565c <__assert_fail@plt+0x13f5c>
   25634:	ldr	r0, [sl, #20]
   25638:	b	25560 <__assert_fail@plt+0x13e60>
   2563c:	cmp	r4, #9
   25640:	bne	25658 <__assert_fail@plt+0x13f58>
   25644:	mov	r0, r8
   25648:	mov	r1, r7
   2564c:	bl	21674 <__assert_fail@plt+0xff74>
   25650:	cmp	r0, #0
   25654:	beq	25664 <__assert_fail@plt+0x13f64>
   25658:	mov	r0, #0
   2565c:	sub	sp, fp, #28
   25660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25664:	mov	r0, #12
   25668:	sub	sp, fp, #28
   2566c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25674:	add	fp, sp, #28
   25678:	sub	sp, sp, #4
   2567c:	ldr	sl, [r2, #4]
   25680:	cmp	sl, #0
   25684:	beq	258c0 <__assert_fail@plt+0x141c0>
   25688:	mov	r7, r2
   2568c:	mov	r9, r1
   25690:	cmp	sl, #1
   25694:	mov	r6, sl
   25698:	blt	2570c <__assert_fail@plt+0x1400c>
   2569c:	ldr	r5, [r7, #8]
   256a0:	mov	r2, #0
   256a4:	cmp	sl, #4
   256a8:	mov	r6, sl
   256ac:	bcc	256f4 <__assert_fail@plt+0x13ff4>
   256b0:	mov	r1, #0
   256b4:	bic	r2, sl, #3
   256b8:	vdup.32	q8, r1
   256bc:	mov	r3, r2
   256c0:	mov	r1, r5
   256c4:	vmov.32	d16[0], sl
   256c8:	vld1.32	{d18-d19}, [r1]!
   256cc:	subs	r3, r3, #4
   256d0:	vadd.i32	q8, q9, q8
   256d4:	bne	256c8 <__assert_fail@plt+0x13fc8>
   256d8:	vext.8	q9, q8, q8, #8
   256dc:	cmp	sl, r2
   256e0:	vadd.i32	q8, q8, q9
   256e4:	vdup.32	q9, d16[1]
   256e8:	vadd.i32	q8, q8, q9
   256ec:	vmov.32	r6, d16[0]
   256f0:	beq	2570c <__assert_fail@plt+0x1400c>
   256f4:	add	r1, r5, r2, lsl #2
   256f8:	sub	r2, sl, r2
   256fc:	ldr	r3, [r1], #4
   25700:	subs	r2, r2, #1
   25704:	add	r6, r3, r6
   25708:	bne	256fc <__assert_fail@plt+0x13ffc>
   2570c:	ldr	r1, [r9, #68]	; 0x44
   25710:	ldr	r2, [r9, #32]
   25714:	str	r0, [sp]
   25718:	and	r1, r1, r6
   2571c:	add	r3, r1, r1, lsl #1
   25720:	ldr	r1, [r2, r3, lsl #2]
   25724:	cmp	r1, #1
   25728:	blt	2579c <__assert_fail@plt+0x1409c>
   2572c:	cmp	r7, #0
   25730:	beq	2579c <__assert_fail@plt+0x1409c>
   25734:	add	r2, r2, r3, lsl #2
   25738:	sub	ip, sl, #1
   2573c:	mov	r5, #0
   25740:	ldr	lr, [r2, #8]
   25744:	b	25778 <__assert_fail@plt+0x14078>
   25748:	mov	r3, ip
   2574c:	add	r2, r3, #1
   25750:	cmp	r2, #1
   25754:	blt	258b4 <__assert_fail@plt+0x141b4>
   25758:	ldr	r2, [r7, #8]
   2575c:	ldr	r0, [r4, #12]
   25760:	ldr	r2, [r2, r3, lsl #2]
   25764:	ldr	r0, [r0, r3, lsl #2]
   25768:	sub	r3, r3, #1
   2576c:	cmp	r0, r2
   25770:	beq	2574c <__assert_fail@plt+0x1404c>
   25774:	b	25790 <__assert_fail@plt+0x14090>
   25778:	ldr	r4, [lr, r5, lsl #2]
   2577c:	ldr	r3, [r4]
   25780:	cmp	r6, r3
   25784:	ldreq	r3, [r4, #8]
   25788:	cmpeq	r3, sl
   2578c:	beq	25748 <__assert_fail@plt+0x14048>
   25790:	add	r5, r5, #1
   25794:	cmp	r5, r1
   25798:	blt	25778 <__assert_fail@plt+0x14078>
   2579c:	mov	r0, #56	; 0x38
   257a0:	mov	r1, #1
   257a4:	bl	2aa30 <__assert_fail@plt+0x19330>
   257a8:	cmp	r0, #0
   257ac:	beq	258f4 <__assert_fail@plt+0x141f4>
   257b0:	mov	r4, r0
   257b4:	ldr	r0, [r7, #4]
   257b8:	add	sl, r4, #4
   257bc:	cmp	r0, #1
   257c0:	str	r0, [r4, #8]
   257c4:	blt	25888 <__assert_fail@plt+0x14188>
   257c8:	str	r0, [r4, #4]
   257cc:	lsl	r0, r0, #2
   257d0:	bl	2aa84 <__assert_fail@plt+0x19384>
   257d4:	cmp	r0, #0
   257d8:	str	r0, [r4, #12]
   257dc:	beq	258e0 <__assert_fail@plt+0x141e0>
   257e0:	ldmib	r7, {r5, r7}
   257e4:	lsl	r2, r5, #2
   257e8:	mov	r1, r7
   257ec:	bl	11448 <memcpy@plt>
   257f0:	cmp	r5, #1
   257f4:	str	sl, [r4, #40]	; 0x28
   257f8:	blt	2589c <__assert_fail@plt+0x1419c>
   257fc:	ldr	sl, [r9]
   25800:	movw	ip, #65280	; 0xff00
   25804:	mov	lr, #32
   25808:	movt	ip, #3
   2580c:	add	r2, ip, #255	; 0xff
   25810:	ldr	r0, [r7]
   25814:	add	r1, sl, r0, lsl #3
   25818:	ldr	r0, [r1, #4]!
   2581c:	and	r3, r0, r2
   25820:	cmp	r3, #1
   25824:	beq	25878 <__assert_fail@plt+0x14178>
   25828:	ldrb	r8, [r4, #52]	; 0x34
   2582c:	and	r3, lr, r0, lsr #15
   25830:	uxtb	r0, r0
   25834:	cmp	r0, #12
   25838:	orr	r3, r8, r3
   2583c:	strb	r3, [r4, #52]	; 0x34
   25840:	beq	25870 <__assert_fail@plt+0x14170>
   25844:	cmp	r0, #4
   25848:	beq	2585c <__assert_fail@plt+0x1415c>
   2584c:	cmp	r0, #2
   25850:	bne	25864 <__assert_fail@plt+0x14164>
   25854:	orr	r0, r3, #16
   25858:	b	25874 <__assert_fail@plt+0x14174>
   2585c:	orr	r0, r3, #64	; 0x40
   25860:	b	25874 <__assert_fail@plt+0x14174>
   25864:	ldr	r0, [r1]
   25868:	tst	r0, ip
   2586c:	beq	25878 <__assert_fail@plt+0x14178>
   25870:	orr	r0, r3, #128	; 0x80
   25874:	strb	r0, [r4, #52]	; 0x34
   25878:	add	r7, r7, #4
   2587c:	subs	r5, r5, #1
   25880:	bne	25810 <__assert_fail@plt+0x14110>
   25884:	b	2589c <__assert_fail@plt+0x1419c>
   25888:	mov	r0, #0
   2588c:	str	r0, [sl]
   25890:	str	r0, [sl, #4]
   25894:	str	r0, [sl, #8]
   25898:	str	sl, [r4, #40]	; 0x28
   2589c:	mov	r0, r9
   258a0:	mov	r1, r4
   258a4:	mov	r2, r6
   258a8:	bl	22180 <__assert_fail@plt+0x10a80>
   258ac:	cmp	r0, #0
   258b0:	bne	258d4 <__assert_fail@plt+0x141d4>
   258b4:	mov	r0, r4
   258b8:	sub	sp, fp, #28
   258bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258c0:	mov	r4, #0
   258c4:	str	r4, [r0]
   258c8:	mov	r0, r4
   258cc:	sub	sp, fp, #28
   258d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258d4:	mov	r0, r4
   258d8:	bl	1b710 <__assert_fail@plt+0xa010>
   258dc:	b	258f4 <__assert_fail@plt+0x141f4>
   258e0:	mov	r0, #0
   258e4:	str	r0, [r4, #4]
   258e8:	str	r0, [r4, #8]
   258ec:	mov	r0, r4
   258f0:	bl	13de4 <__assert_fail@plt+0x26e4>
   258f4:	ldr	r1, [sp]
   258f8:	mov	r0, #12
   258fc:	mov	r4, #0
   25900:	str	r0, [r1]
   25904:	mov	r0, r4
   25908:	sub	sp, fp, #28
   2590c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25910:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25914:	add	fp, sp, #24
   25918:	ldr	lr, [r0]
   2591c:	add	r7, lr, r1, lsl #3
   25920:	ldrb	r9, [r7, #4]
   25924:	cmp	r9, #7
   25928:	beq	25b0c <__assert_fail@plt+0x1440c>
   2592c:	ldr	ip, [r2, #80]	; 0x50
   25930:	mov	r6, #1
   25934:	cmp	ip, #1
   25938:	beq	25974 <__assert_fail@plt+0x14274>
   2593c:	ldr	r5, [r2, #28]
   25940:	add	r7, r3, #1
   25944:	cmp	r7, r5
   25948:	bge	25974 <__assert_fail@plt+0x14274>
   2594c:	ldr	r6, [r2, #8]
   25950:	add	r7, r6, r3, lsl #2
   25954:	mov	r6, #1
   25958:	ldr	r4, [r7, r6, lsl #2]
   2595c:	cmn	r4, #1
   25960:	bne	25974 <__assert_fail@plt+0x14274>
   25964:	add	r6, r6, #1
   25968:	add	r4, r3, r6
   2596c:	cmp	r4, r5
   25970:	blt	25958 <__assert_fail@plt+0x14258>
   25974:	mov	r8, #0
   25978:	cmp	r9, #5
   2597c:	bne	259c4 <__assert_fail@plt+0x142c4>
   25980:	cmp	r6, #2
   25984:	blt	25af0 <__assert_fail@plt+0x143f0>
   25988:	ldr	r0, [r0, #128]	; 0x80
   2598c:	tst	r0, #64	; 0x40
   25990:	bne	259a4 <__assert_fail@plt+0x142a4>
   25994:	ldr	r1, [r2, #4]
   25998:	ldrb	r1, [r1, r3]
   2599c:	cmp	r1, #10
   259a0:	beq	25af0 <__assert_fail@plt+0x143f0>
   259a4:	tst	r0, #128	; 0x80
   259a8:	beq	25aec <__assert_fail@plt+0x143ec>
   259ac:	ldr	r0, [r2, #4]
   259b0:	ldrb	r0, [r0, r3]
   259b4:	cmp	r0, #0
   259b8:	movne	r8, r6
   259bc:	mov	r0, r8
   259c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   259c4:	cmp	r9, #6
   259c8:	bne	25af0 <__assert_fail@plt+0x143f0>
   259cc:	cmp	r6, #2
   259d0:	blt	25af0 <__assert_fail@plt+0x143f0>
   259d4:	ldr	r7, [lr, r1, lsl #3]
   259d8:	ldr	r0, [r7, #32]
   259dc:	cmp	r0, #0
   259e0:	bne	259fc <__assert_fail@plt+0x142fc>
   259e4:	ldr	r1, [r7, #36]	; 0x24
   259e8:	cmp	r1, #0
   259ec:	bne	259fc <__assert_fail@plt+0x142fc>
   259f0:	ldr	r1, [r7, #20]
   259f4:	cmp	r1, #0
   259f8:	beq	25af8 <__assert_fail@plt+0x143f8>
   259fc:	cmp	ip, #1
   25a00:	bne	25a1c <__assert_fail@plt+0x1431c>
   25a04:	ldr	r1, [r2, #4]
   25a08:	ldrb	r5, [r1, r3]
   25a0c:	ldr	r1, [r7, #20]
   25a10:	cmp	r1, #1
   25a14:	bge	25a30 <__assert_fail@plt+0x14330>
   25a18:	b	25a50 <__assert_fail@plt+0x14350>
   25a1c:	ldr	r1, [r2, #8]
   25a20:	ldr	r5, [r1, r3, lsl #2]
   25a24:	ldr	r1, [r7, #20]
   25a28:	cmp	r1, #1
   25a2c:	blt	25a50 <__assert_fail@plt+0x14350>
   25a30:	ldr	r2, [r7]
   25a34:	mov	r3, #0
   25a38:	ldr	r4, [r2, r3, lsl #2]
   25a3c:	cmp	r5, r4
   25a40:	beq	25acc <__assert_fail@plt+0x143cc>
   25a44:	add	r3, r3, #1
   25a48:	cmp	r3, r1
   25a4c:	blt	25a38 <__assert_fail@plt+0x14338>
   25a50:	ldr	r1, [r7, #36]	; 0x24
   25a54:	cmp	r1, #1
   25a58:	blt	25a8c <__assert_fail@plt+0x1438c>
   25a5c:	mov	r4, #0
   25a60:	ldr	r0, [r7, #12]
   25a64:	ldr	r1, [r0, r4, lsl #2]
   25a68:	mov	r0, r5
   25a6c:	bl	113c4 <iswctype@plt>
   25a70:	cmp	r0, #0
   25a74:	bne	25acc <__assert_fail@plt+0x143cc>
   25a78:	ldr	r0, [r7, #36]	; 0x24
   25a7c:	add	r4, r4, #1
   25a80:	cmp	r4, r0
   25a84:	blt	25a60 <__assert_fail@plt+0x14360>
   25a88:	ldr	r0, [r7, #32]
   25a8c:	cmp	r0, #1
   25a90:	blt	25ac4 <__assert_fail@plt+0x143c4>
   25a94:	ldr	r1, [r7, #4]
   25a98:	mov	r2, #0
   25a9c:	ldr	r3, [r1, r2, lsl #2]
   25aa0:	cmp	r3, r5
   25aa4:	bhi	25ab8 <__assert_fail@plt+0x143b8>
   25aa8:	ldr	r3, [r7, #8]
   25aac:	ldr	r3, [r3, r2, lsl #2]
   25ab0:	cmp	r5, r3
   25ab4:	bls	25acc <__assert_fail@plt+0x143cc>
   25ab8:	add	r2, r2, #1
   25abc:	cmp	r2, r0
   25ac0:	blt	25a9c <__assert_fail@plt+0x1439c>
   25ac4:	mov	r0, #0
   25ac8:	b	25ad0 <__assert_fail@plt+0x143d0>
   25acc:	mov	r0, r6
   25ad0:	ldrb	r1, [r7, #16]
   25ad4:	tst	r1, #1
   25ad8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   25adc:	cmp	r0, #0
   25ae0:	bgt	25af0 <__assert_fail@plt+0x143f0>
   25ae4:	cmp	r6, #1
   25ae8:	movle	r6, #1
   25aec:	mov	r8, r6
   25af0:	mov	r0, r8
   25af4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25af8:	mov	r5, #0
   25afc:	ldr	r1, [r7, #20]
   25b00:	cmp	r1, #1
   25b04:	bge	25a30 <__assert_fail@plt+0x14330>
   25b08:	b	25a50 <__assert_fail@plt+0x14350>
   25b0c:	ldr	r0, [r2, #4]
   25b10:	mov	r8, #0
   25b14:	ldrb	r6, [r0, r3]
   25b18:	cmp	r6, #194	; 0xc2
   25b1c:	bcc	25af0 <__assert_fail@plt+0x143f0>
   25b20:	ldr	r1, [r2, #48]	; 0x30
   25b24:	add	r2, r3, #2
   25b28:	cmp	r2, r1
   25b2c:	bgt	25af0 <__assert_fail@plt+0x143f0>
   25b30:	add	r0, r0, r3
   25b34:	cmp	r6, #223	; 0xdf
   25b38:	ldrb	r7, [r0, #1]
   25b3c:	bhi	25b60 <__assert_fail@plt+0x14460>
   25b40:	mov	r8, #2
   25b44:	cmp	r7, #191	; 0xbf
   25b48:	sxtb	r0, r7
   25b4c:	movwhi	r8, #0
   25b50:	cmn	r0, #1
   25b54:	movwgt	r8, #0
   25b58:	mov	r0, r8
   25b5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25b60:	cmp	r6, #239	; 0xef
   25b64:	bhi	25b80 <__assert_fail@plt+0x14480>
   25b68:	mov	r2, #3
   25b6c:	cmp	r6, #224	; 0xe0
   25b70:	bne	25bdc <__assert_fail@plt+0x144dc>
   25b74:	cmp	r7, #160	; 0xa0
   25b78:	bcc	25af0 <__assert_fail@plt+0x143f0>
   25b7c:	b	25bdc <__assert_fail@plt+0x144dc>
   25b80:	cmp	r6, #247	; 0xf7
   25b84:	bhi	25ba0 <__assert_fail@plt+0x144a0>
   25b88:	mov	r2, #4
   25b8c:	cmp	r6, #240	; 0xf0
   25b90:	bne	25bdc <__assert_fail@plt+0x144dc>
   25b94:	cmp	r7, #144	; 0x90
   25b98:	bcc	25af0 <__assert_fail@plt+0x143f0>
   25b9c:	b	25bdc <__assert_fail@plt+0x144dc>
   25ba0:	cmp	r6, #251	; 0xfb
   25ba4:	bhi	25bc0 <__assert_fail@plt+0x144c0>
   25ba8:	mov	r2, #5
   25bac:	cmp	r6, #248	; 0xf8
   25bb0:	bne	25bdc <__assert_fail@plt+0x144dc>
   25bb4:	cmp	r7, #136	; 0x88
   25bb8:	bcc	25af0 <__assert_fail@plt+0x143f0>
   25bbc:	b	25bdc <__assert_fail@plt+0x144dc>
   25bc0:	cmp	r6, #253	; 0xfd
   25bc4:	bhi	25af0 <__assert_fail@plt+0x143f0>
   25bc8:	mov	r2, #6
   25bcc:	cmp	r6, #252	; 0xfc
   25bd0:	bne	25bdc <__assert_fail@plt+0x144dc>
   25bd4:	cmp	r7, #132	; 0x84
   25bd8:	bcc	25af0 <__assert_fail@plt+0x143f0>
   25bdc:	add	r3, r2, r3
   25be0:	cmp	r3, r1
   25be4:	bgt	25af0 <__assert_fail@plt+0x143f0>
   25be8:	mov	r1, #1
   25bec:	ldrb	r3, [r0, r1]
   25bf0:	sxtb	r7, r3
   25bf4:	cmn	r7, #1
   25bf8:	bgt	25af0 <__assert_fail@plt+0x143f0>
   25bfc:	cmp	r3, #191	; 0xbf
   25c00:	bhi	25af0 <__assert_fail@plt+0x143f0>
   25c04:	add	r1, r1, #1
   25c08:	cmp	r1, r2
   25c0c:	movcs	r0, r2
   25c10:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   25c14:	ldrb	r3, [r0, r1]
   25c18:	sxtb	r7, r3
   25c1c:	cmn	r7, #1
   25c20:	ble	25bfc <__assert_fail@plt+0x144fc>
   25c24:	b	25af0 <__assert_fail@plt+0x143f0>
   25c28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25c2c:	add	fp, sp, #24
   25c30:	ldr	r4, [r1, #4]
   25c34:	mov	r6, r0
   25c38:	mvn	r0, #0
   25c3c:	mov	r8, #0
   25c40:	uxtab	r3, r0, r4
   25c44:	cmp	r3, #6
   25c48:	bhi	25df4 <__assert_fail@plt+0x146f4>
   25c4c:	ldr	r0, [r6, #4]
   25c50:	mov	r9, r1
   25c54:	ldrb	r1, [r0, r2]
   25c58:	add	r7, pc, #4
   25c5c:	sxtb	r0, r1
   25c60:	ldr	pc, [r7, r3, lsl #2]
   25c64:	andeq	r5, r2, r0, lsl #25
   25c68:	strdeq	r5, [r2], -r4
   25c6c:	muleq	r2, r4, ip
   25c70:	strdeq	r5, [r2], -r4
   25c74:			; <UNDEFINED> instruction: 0x00025cbc
   25c78:	strdeq	r5, [r2], -r4
   25c7c:			; <UNDEFINED> instruction: 0x00025cb4
   25c80:	ldrb	r3, [r9]
   25c84:	uxtb	r7, r0
   25c88:	cmp	r3, r7
   25c8c:	beq	25cdc <__assert_fail@plt+0x145dc>
   25c90:	b	25df4 <__assert_fail@plt+0x146f4>
   25c94:	ldr	r3, [r9]
   25c98:	ubfx	r7, r1, #5, #3
   25c9c:	mov	r5, #1
   25ca0:	ldr	r3, [r3, r7, lsl #2]
   25ca4:	and	r7, r1, #31
   25ca8:	tst	r3, r5, lsl r7
   25cac:	bne	25cdc <__assert_fail@plt+0x145dc>
   25cb0:	b	25df4 <__assert_fail@plt+0x146f4>
   25cb4:	cmp	r0, #0
   25cb8:	blt	25df4 <__assert_fail@plt+0x146f4>
   25cbc:	cmp	r1, #0
   25cc0:	beq	25d88 <__assert_fail@plt+0x14688>
   25cc4:	cmp	r1, #10
   25cc8:	bne	25cdc <__assert_fail@plt+0x145dc>
   25ccc:	ldr	r3, [r6, #84]	; 0x54
   25cd0:	ldrb	r3, [r3, #128]	; 0x80
   25cd4:	tst	r3, #64	; 0x40
   25cd8:	beq	25df4 <__assert_fail@plt+0x146f4>
   25cdc:	movw	r3, #65280	; 0xff00
   25ce0:	movt	r3, #3
   25ce4:	tst	r4, r3
   25ce8:	beq	25d4c <__assert_fail@plt+0x1464c>
   25cec:	cmn	r2, #1
   25cf0:	ble	25d2c <__assert_fail@plt+0x1462c>
   25cf4:	ldr	r3, [r6, #48]	; 0x30
   25cf8:	cmp	r3, r2
   25cfc:	beq	25e14 <__assert_fail@plt+0x14714>
   25d00:	ldr	r3, [r6, #80]	; 0x50
   25d04:	cmp	r3, #2
   25d08:	blt	25d58 <__assert_fail@plt+0x14658>
   25d0c:	ldr	r0, [r6, #8]
   25d10:	ldr	r7, [r0, r2, lsl #2]
   25d14:	cmn	r7, #1
   25d18:	bne	25d9c <__assert_fail@plt+0x1469c>
   25d1c:	sub	r1, r2, #1
   25d20:	cmp	r2, #0
   25d24:	mov	r2, r1
   25d28:	bgt	25d10 <__assert_fail@plt+0x14610>
   25d2c:	ldr	r1, [r6, #60]	; 0x3c
   25d30:	and	r0, r1, #1
   25d34:	tst	r4, #1024	; 0x400
   25d38:	eor	r2, r0, #1
   25d3c:	beq	25dd0 <__assert_fail@plt+0x146d0>
   25d40:	cmp	r0, #0
   25d44:	beq	25df4 <__assert_fail@plt+0x146f4>
   25d48:	b	25dd0 <__assert_fail@plt+0x146d0>
   25d4c:	mov	r8, #1
   25d50:	mov	r0, r8
   25d54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25d58:	ldr	r2, [r6, #68]	; 0x44
   25d5c:	ubfx	r3, r1, #5, #3
   25d60:	and	r7, r1, #31
   25d64:	mov	r1, #1
   25d68:	ldr	r3, [r2, r3, lsl #2]
   25d6c:	mov	r2, #0
   25d70:	tst	r3, r1, lsl r7
   25d74:	bne	25dd0 <__assert_fail@plt+0x146d0>
   25d78:	mov	r1, #0
   25d7c:	cmp	r0, #10
   25d80:	beq	25db4 <__assert_fail@plt+0x146b4>
   25d84:	b	25dc0 <__assert_fail@plt+0x146c0>
   25d88:	ldr	r3, [r6, #84]	; 0x54
   25d8c:	ldrb	r3, [r3, #128]	; 0x80
   25d90:	tst	r3, #128	; 0x80
   25d94:	bne	25df4 <__assert_fail@plt+0x146f4>
   25d98:	b	25cdc <__assert_fail@plt+0x145dc>
   25d9c:	ldrb	r0, [r6, #78]	; 0x4e
   25da0:	cmp	r0, #0
   25da4:	bne	25e34 <__assert_fail@plt+0x14734>
   25da8:	mov	r1, #0
   25dac:	cmp	r7, #10
   25db0:	bne	25dc0 <__assert_fail@plt+0x146c0>
   25db4:	ldrb	r1, [r6, #77]	; 0x4d
   25db8:	cmp	r1, #0
   25dbc:	movwne	r1, #2
   25dc0:	and	r0, r1, #1
   25dc4:	tst	r4, #1024	; 0x400
   25dc8:	eor	r2, r0, #1
   25dcc:	bne	25d40 <__assert_fail@plt+0x14640>
   25dd0:	ldr	r0, [r9, #4]
   25dd4:	cmp	r2, #0
   25dd8:	bne	25de4 <__assert_fail@plt+0x146e4>
   25ddc:	ands	r2, r0, #2048	; 0x800
   25de0:	bne	25df4 <__assert_fail@plt+0x146f4>
   25de4:	tst	r1, #2
   25de8:	bne	25dfc <__assert_fail@plt+0x146fc>
   25dec:	ands	r2, r0, #8192	; 0x2000
   25df0:	beq	25dfc <__assert_fail@plt+0x146fc>
   25df4:	mov	r0, r8
   25df8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25dfc:	and	r0, r0, #32768	; 0x8000
   25e00:	mov	r2, #1
   25e04:	and	r1, r1, #8
   25e08:	eor	r0, r2, r0, lsr #15
   25e0c:	orr	r0, r0, r1, lsr #3
   25e10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25e14:	ldr	r0, [r6, #88]	; 0x58
   25e18:	and	r0, r0, #2
   25e1c:	eor	r1, r0, #10
   25e20:	and	r0, r1, #1
   25e24:	tst	r4, #1024	; 0x400
   25e28:	eor	r2, r0, #1
   25e2c:	bne	25d40 <__assert_fail@plt+0x14640>
   25e30:	b	25dd0 <__assert_fail@plt+0x146d0>
   25e34:	mov	r0, r7
   25e38:	bl	115f8 <iswalnum@plt>
   25e3c:	mov	r1, #1
   25e40:	mov	r2, #0
   25e44:	cmp	r7, #95	; 0x5f
   25e48:	beq	25dd0 <__assert_fail@plt+0x146d0>
   25e4c:	cmp	r0, #0
   25e50:	beq	25da8 <__assert_fail@plt+0x146a8>
   25e54:	b	25dd0 <__assert_fail@plt+0x146d0>
   25e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e5c:	add	fp, sp, #28
   25e60:	sub	sp, sp, #4
   25e64:	vpush	{d8-d9}
   25e68:	sub	sp, sp, #216	; 0xd8
   25e6c:	sub	sp, sp, #14336	; 0x3800
   25e70:	sub	lr, fp, #1024	; 0x400
   25e74:	mov	r5, #0
   25e78:	mov	sl, r0
   25e7c:	vmov.i32	q4, #0	; 0x00000000
   25e80:	str	r1, [sp, #88]	; 0x58
   25e84:	sub	r2, lr, #56	; 0x38
   25e88:	str	r5, [r1, #44]	; 0x2c
   25e8c:	str	r5, [r1, #48]	; 0x30
   25e90:	mov	r0, r2
   25e94:	vst1.64	{d8-d9}, [r0]!
   25e98:	vst1.64	{d8-d9}, [r0]
   25e9c:	ldr	r0, [r1, #8]
   25ea0:	cmp	r0, #1
   25ea4:	blt	27680 <__assert_fail@plt+0x15f80>
   25ea8:	add	r0, sp, #160	; 0xa0
   25eac:	mov	r5, #0
   25eb0:	str	sl, [sp, #16]
   25eb4:	add	r0, r0, #28
   25eb8:	str	r0, [sp, #12]
   25ebc:	add	r0, sl, #112	; 0x70
   25ec0:	str	r0, [sp, #4]
   25ec4:	add	r0, sl, #96	; 0x60
   25ec8:	str	r0, [sp]
   25ecc:	add	r0, r2, #16
   25ed0:	str	r0, [sp, #8]
   25ed4:	mov	r0, #0
   25ed8:	str	r0, [sp, #112]	; 0x70
   25edc:	ldr	r0, [sp, #88]	; 0x58
   25ee0:	ldr	r1, [sp, #112]	; 0x70
   25ee4:	ldr	r3, [sl]
   25ee8:	ldr	r0, [r0, #12]
   25eec:	ldr	r2, [r0, r1, lsl #2]
   25ef0:	add	r0, r3, r2, lsl #3
   25ef4:	ldr	r1, [r0, #4]
   25ef8:	uxtb	ip, r1
   25efc:	cmp	ip, #1
   25f00:	bne	26008 <__assert_fail@plt+0x14908>
   25f04:	mov	r8, r2
   25f08:	ldrb	r2, [r3, r2, lsl #3]
   25f0c:	sub	lr, fp, #1024	; 0x400
   25f10:	mov	r0, r3
   25f14:	mov	r4, r5
   25f18:	mov	r5, #1
   25f1c:	sub	r7, lr, #56	; 0x38
   25f20:	mov	r6, r7
   25f24:	ubfx	r3, r2, #5, #3
   25f28:	ldr	sl, [sp, #16]
   25f2c:	and	r2, r2, #31
   25f30:	ldr	r7, [r7, r3, lsl #2]
   25f34:	orr	r2, r7, r5, lsl r2
   25f38:	mov	r5, r4
   25f3c:	str	r2, [r6, r3, lsl #2]
   25f40:	movw	r2, #65280	; 0xff00
   25f44:	movt	r2, #3
   25f48:	ands	r2, r1, r2
   25f4c:	mov	r2, r0
   25f50:	beq	26360 <__assert_fail@plt+0x14c60>
   25f54:	tst	r1, #8192	; 0x2000
   25f58:	beq	25f88 <__assert_fail@plt+0x14888>
   25f5c:	mov	r0, r2
   25f60:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   25f64:	sub	lr, fp, #1024	; 0x400
   25f68:	sub	r3, lr, #56	; 0x38
   25f6c:	vst1.64	{d8-d9}, [r3]!
   25f70:	vst1.64	{d8-d9}, [r3]
   25f74:	tst	r2, #1024	; 0x400
   25f78:	beq	26c34 <__assert_fail@plt+0x15534>
   25f7c:	mov	r2, #1024	; 0x400
   25f80:	str	r2, [fp, #-1080]	; 0xfffffbc8
   25f84:	mov	r2, r0
   25f88:	tst	r1, #32768	; 0x8000
   25f8c:	bne	26104 <__assert_fail@plt+0x14a04>
   25f90:	tst	r1, #1024	; 0x400
   25f94:	bne	260ec <__assert_fail@plt+0x149ec>
   25f98:	tst	r1, #2048	; 0x800
   25f9c:	beq	26360 <__assert_fail@plt+0x14c60>
   25fa0:	tst	r1, #4194304	; 0x400000
   25fa4:	beq	25fb0 <__assert_fail@plt+0x148b0>
   25fa8:	cmp	ip, #1
   25fac:	beq	26104 <__assert_fail@plt+0x14a04>
   25fb0:	ldr	r1, [sl, #92]	; 0x5c
   25fb4:	mov	r0, r2
   25fb8:	cmp	r1, #1
   25fbc:	ble	262e8 <__assert_fail@plt+0x14be8>
   25fc0:	ldr	r1, [sl, #60]	; 0x3c
   25fc4:	ldr	r2, [sp]
   25fc8:	sub	lr, fp, #1024	; 0x400
   25fcc:	vld1.32	{d16-d17}, [r2]
   25fd0:	vld1.32	{d18-d19}, [r1]!
   25fd4:	sub	r2, lr, #56	; 0x38
   25fd8:	vld1.64	{d20-d21}, [r2]
   25fdc:	vand	q8, q9, q8
   25fe0:	vbic	q9, q10, q8
   25fe4:	vst1.64	{d18-d19}, [r2]
   25fe8:	ldr	r2, [sp, #4]
   25fec:	vld1.32	{d20-d21}, [r1]
   25ff0:	ldr	r1, [sp, #8]
   25ff4:	vld1.32	{d16-d17}, [r2]
   25ff8:	vld1.32	{d22-d23}, [r1]
   25ffc:	vand	q8, q10, q8
   26000:	vbic	q8, q11, q8
   26004:	b	26318 <__assert_fail@plt+0x14c18>
   26008:	mov	r0, r3
   2600c:	mov	r8, r2
   26010:	cmp	ip, #7
   26014:	beq	2605c <__assert_fail@plt+0x1495c>
   26018:	cmp	ip, #5
   2601c:	beq	260a8 <__assert_fail@plt+0x149a8>
   26020:	cmp	ip, #3
   26024:	bne	26c34 <__assert_fail@plt+0x15534>
   26028:	ldr	r2, [r0, r8, lsl #3]
   2602c:	sub	lr, fp, #1024	; 0x400
   26030:	sub	r3, lr, #56	; 0x38
   26034:	vld1.64	{d16-d17}, [r3]
   26038:	vld1.32	{d18-d19}, [r2]!
   2603c:	vorr	q8, q8, q9
   26040:	vst1.64	{d16-d17}, [r3]
   26044:	vld1.32	{d16-d17}, [r2]
   26048:	ldr	r2, [sp, #8]
   2604c:	vld1.32	{d18-d19}, [r2]
   26050:	vorr	q8, q9, q8
   26054:	vst1.32	{d16-d17}, [r2]
   26058:	b	25f40 <__assert_fail@plt+0x14840>
   2605c:	mvn	r2, #0
   26060:	str	r2, [fp, #-1068]	; 0xfffffbd4
   26064:	str	r2, [fp, #-1072]	; 0xfffffbd0
   26068:	str	r2, [fp, #-1076]	; 0xfffffbcc
   2606c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   26070:	ldr	r3, [sl, #128]	; 0x80
   26074:	and	r2, r3, #128	; 0x80
   26078:	ands	r3, r3, #64	; 0x40
   2607c:	beq	26088 <__assert_fail@plt+0x14988>
   26080:	cmp	r2, #0
   26084:	beq	25f40 <__assert_fail@plt+0x14840>
   26088:	cmp	r3, #0
   2608c:	mvn	r3, #1
   26090:	movweq	r3, #64510	; 0xfbfe
   26094:	movteq	r3, #65535	; 0xffff
   26098:	cmp	r2, #0
   2609c:	mvneq	r3, #1024	; 0x400
   260a0:	str	r3, [fp, #-1080]	; 0xfffffbc8
   260a4:	b	25f40 <__assert_fail@plt+0x14840>
   260a8:	ldr	r2, [sl, #92]	; 0x5c
   260ac:	cmp	r2, #2
   260b0:	blt	26110 <__assert_fail@plt+0x14a10>
   260b4:	ldr	r2, [sl, #60]	; 0x3c
   260b8:	sub	lr, fp, #1024	; 0x400
   260bc:	sub	r3, lr, #56	; 0x38
   260c0:	vld1.64	{d16-d17}, [r3]
   260c4:	vld1.32	{d18-d19}, [r2]!
   260c8:	vorr	q8, q8, q9
   260cc:	vst1.64	{d16-d17}, [r3]
   260d0:	vld1.32	{d18-d19}, [r2]
   260d4:	ldr	r2, [sp, #8]
   260d8:	vld1.32	{d20-d21}, [r2]
   260dc:	vorr	q9, q10, q9
   260e0:	vst1.32	{d18-d19}, [r2]
   260e4:	vmov.32	r2, d16[0]
   260e8:	b	26134 <__assert_fail@plt+0x14a34>
   260ec:	mov	r0, r2
   260f0:	movw	r2, #255	; 0xff
   260f4:	movt	r2, #64	; 0x40
   260f8:	and	r2, r1, r2
   260fc:	cmp	r2, #1
   26100:	bne	26160 <__assert_fail@plt+0x14a60>
   26104:	sub	lr, fp, #1024	; 0x400
   26108:	sub	r0, lr, #56	; 0x38
   2610c:	b	26c2c <__assert_fail@plt+0x1552c>
   26110:	mvn	r2, #0
   26114:	str	r2, [fp, #-1052]	; 0xfffffbe4
   26118:	str	r2, [fp, #-1056]	; 0xfffffbe0
   2611c:	str	r2, [fp, #-1060]	; 0xfffffbdc
   26120:	str	r2, [fp, #-1064]	; 0xfffffbd8
   26124:	str	r2, [fp, #-1068]	; 0xfffffbd4
   26128:	str	r2, [fp, #-1072]	; 0xfffffbd0
   2612c:	str	r2, [fp, #-1076]	; 0xfffffbcc
   26130:	str	r2, [fp, #-1080]	; 0xfffffbc8
   26134:	ldr	r3, [sl, #128]	; 0x80
   26138:	ands	r7, r3, #64	; 0x40
   2613c:	and	r3, r3, #128	; 0x80
   26140:	biceq	r2, r2, #1024	; 0x400
   26144:	beq	26150 <__assert_fail@plt+0x14a50>
   26148:	cmp	r3, #0
   2614c:	beq	25f40 <__assert_fail@plt+0x14840>
   26150:	cmp	r3, #0
   26154:	bicne	r2, r2, #1
   26158:	str	r2, [fp, #-1080]	; 0xfffffbc8
   2615c:	b	25f40 <__assert_fail@plt+0x14840>
   26160:	ldr	r2, [sl, #92]	; 0x5c
   26164:	cmp	r2, #1
   26168:	ble	26200 <__assert_fail@plt+0x14b00>
   2616c:	ldr	r2, [sl, #60]	; 0x3c
   26170:	ldr	r3, [sp]
   26174:	sub	lr, fp, #1024	; 0x400
   26178:	vld1.32	{d16-d17}, [r3]
   2617c:	vld1.32	{d18-d19}, [r2]!
   26180:	sub	r3, lr, #56	; 0x38
   26184:	vld1.64	{d20-d21}, [r3]
   26188:	vorn	q8, q8, q9
   2618c:	vand	q8, q10, q8
   26190:	vst1.64	{d16-d17}, [r3]
   26194:	vmov.32	r3, d16[1]
   26198:	vld1.32	{d18-d19}, [r2]
   2619c:	ldr	r2, [sp, #4]
   261a0:	vld1.32	{d20-d21}, [r2]
   261a4:	ldr	r2, [sp, #8]
   261a8:	vld1.32	{d22-d23}, [r2]
   261ac:	vorn	q9, q10, q9
   261b0:	vand	q9, q11, q9
   261b4:	vst1.32	{d18-d19}, [r2]
   261b8:	vmov.32	r2, d16[0]
   261bc:	orr	r2, r3, r2
   261c0:	vmov.32	r3, d17[0]
   261c4:	orr	r2, r2, r3
   261c8:	vmov.32	r3, d17[1]
   261cc:	orr	r2, r2, r3
   261d0:	vmov.32	r3, d18[0]
   261d4:	orr	r2, r2, r3
   261d8:	vmov.32	r3, d18[1]
   261dc:	orr	r2, r2, r3
   261e0:	vmov.32	r3, d19[0]
   261e4:	orr	r2, r2, r3
   261e8:	vmov.32	r3, d19[1]
   261ec:	orr	r2, r2, r3
   261f0:	cmp	r2, #0
   261f4:	mov	r2, r0
   261f8:	bne	25f98 <__assert_fail@plt+0x14898>
   261fc:	b	26c34 <__assert_fail@plt+0x15534>
   26200:	ldr	r2, [sl, #112]	; 0x70
   26204:	str	r0, [sp, #24]
   26208:	str	r8, [sp, #28]
   2620c:	str	r5, [sp, #156]	; 0x9c
   26210:	ldr	r3, [sl, #96]	; 0x60
   26214:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   26218:	ldr	r0, [sl, #100]	; 0x64
   2621c:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   26220:	ldr	r8, [sl, #104]	; 0x68
   26224:	ldr	r9, [sl, #108]	; 0x6c
   26228:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   2622c:	str	r2, [sp, #140]	; 0x8c
   26230:	ldr	r2, [sl, #116]	; 0x74
   26234:	and	lr, r5, r0
   26238:	and	r7, r4, r3
   2623c:	ldr	r0, [sp, #140]	; 0x8c
   26240:	str	r2, [sp, #144]	; 0x90
   26244:	ldr	r2, [sl, #120]	; 0x78
   26248:	str	r2, [sp, #148]	; 0x94
   2624c:	ldr	r2, [sl, #124]	; 0x7c
   26250:	and	sl, r6, r8
   26254:	ldr	r8, [sp, #28]
   26258:	str	r2, [sp, #152]	; 0x98
   2625c:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   26260:	str	r7, [fp, #-1080]	; 0xfffffbc8
   26264:	str	lr, [fp, #-1076]	; 0xfffffbcc
   26268:	str	sl, [fp, #-1072]	; 0xfffffbd0
   2626c:	orr	r7, lr, r7
   26270:	orr	r7, r7, sl
   26274:	ldr	sl, [sp, #16]
   26278:	and	r2, r2, r9
   2627c:	str	r2, [fp, #-1068]	; 0xfffffbd4
   26280:	orr	r2, r7, r2
   26284:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   26288:	and	r9, r6, r0
   2628c:	ldr	r0, [sp, #144]	; 0x90
   26290:	str	r9, [fp, #-1064]	; 0xfffffbd8
   26294:	orr	r2, r2, r9
   26298:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2629c:	and	r4, r4, r0
   262a0:	ldr	r0, [sp, #148]	; 0x94
   262a4:	str	r4, [fp, #-1060]	; 0xfffffbdc
   262a8:	orr	r2, r2, r4
   262ac:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   262b0:	and	r3, r3, r0
   262b4:	ldr	r0, [sp, #152]	; 0x98
   262b8:	str	r3, [fp, #-1056]	; 0xfffffbe0
   262bc:	orr	r2, r2, r3
   262c0:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   262c4:	and	r6, r5, r0
   262c8:	ldr	r0, [sp, #24]
   262cc:	ldr	r5, [sp, #156]	; 0x9c
   262d0:	str	r6, [fp, #-1052]	; 0xfffffbe4
   262d4:	orr	r2, r2, r6
   262d8:	cmp	r2, #0
   262dc:	mov	r2, r0
   262e0:	bne	25f98 <__assert_fail@plt+0x14898>
   262e4:	b	26c34 <__assert_fail@plt+0x15534>
   262e8:	ldr	r1, [sp]
   262ec:	sub	lr, fp, #1024	; 0x400
   262f0:	vld1.32	{d16-d17}, [r1]
   262f4:	sub	r1, lr, #56	; 0x38
   262f8:	vld1.64	{d18-d19}, [r1]
   262fc:	vbic	q9, q9, q8
   26300:	vst1.64	{d18-d19}, [r1]
   26304:	ldr	r1, [sp, #4]
   26308:	vld1.32	{d16-d17}, [r1]
   2630c:	ldr	r1, [sp, #8]
   26310:	vld1.32	{d20-d21}, [r1]
   26314:	vbic	q8, q10, q8
   26318:	vst1.32	{d16-d17}, [r1]
   2631c:	vmov.32	r1, d18[0]
   26320:	vmov.32	r2, d18[1]
   26324:	orr	r1, r2, r1
   26328:	vmov.32	r2, d19[0]
   2632c:	orr	r1, r1, r2
   26330:	vmov.32	r2, d19[1]
   26334:	orr	r1, r1, r2
   26338:	vmov.32	r2, d16[0]
   2633c:	orr	r1, r1, r2
   26340:	vmov.32	r2, d16[1]
   26344:	orr	r1, r1, r2
   26348:	vmov.32	r2, d17[0]
   2634c:	orr	r1, r1, r2
   26350:	vmov.32	r2, d17[1]
   26354:	orrs	r1, r1, r2
   26358:	mov	r2, r0
   2635c:	beq	26c34 <__assert_fail@plt+0x15534>
   26360:	cmp	r5, #1
   26364:	blt	26770 <__assert_fail@plt+0x15070>
   26368:	ldr	r6, [sp, #12]
   2636c:	cmp	ip, #1
   26370:	bne	26780 <__assert_fail@plt+0x15080>
   26374:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   26378:	ldr	r7, [fp, #-1080]	; 0xfffffbc8
   2637c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   26380:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   26384:	ldr	lr, [fp, #-1068]	; 0xfffffbd4
   26388:	str	r5, [sp, #156]	; 0x9c
   2638c:	mov	r4, #0
   26390:	str	r6, [sp, #148]	; 0x94
   26394:	add	r5, sp, #160	; 0xa0
   26398:	mov	ip, r8
   2639c:	str	r8, [sp, #28]
   263a0:	str	r2, [sp, #24]
   263a4:	str	r0, [sp, #140]	; 0x8c
   263a8:	sub	r0, fp, #6144	; 0x1800
   263ac:	sub	r6, r0, #104	; 0x68
   263b0:	ldrb	r0, [r2, ip, lsl #3]
   263b4:	mov	r8, r2
   263b8:	mov	r2, #1
   263bc:	ubfx	r1, r0, #5, #3
   263c0:	and	r0, r0, #31
   263c4:	add	r1, r5, r1, lsl #2
   263c8:	ldr	r1, [r1, r4, lsl #5]
   263cc:	tst	r1, r2, lsl r0
   263d0:	beq	26644 <__assert_fail@plt+0x14f44>
   263d4:	add	r0, r5, r4, lsl #5
   263d8:	str	r6, [sp, #116]	; 0x74
   263dc:	str	r4, [sp, #152]	; 0x98
   263e0:	add	ip, r0, #8
   263e4:	ldr	r6, [r0, #4]
   263e8:	ldm	ip, {r1, r3, ip}
   263ec:	ldr	r5, [sp, #148]	; 0x94
   263f0:	str	lr, [sp, #136]	; 0x88
   263f4:	str	sl, [sp, #132]	; 0x84
   263f8:	ldr	r8, [fp, #-1052]	; 0xfffffbe4
   263fc:	str	r6, [sp, #124]	; 0x7c
   26400:	and	r6, r6, sl
   26404:	ldr	sl, [fp, #-1056]	; 0xfffffbe0
   26408:	ldr	r2, [r5, #-28]	; 0xffffffe4
   2640c:	and	r4, r1, r9
   26410:	str	r6, [sp, #84]	; 0x54
   26414:	str	r1, [sp, #104]	; 0x68
   26418:	ldr	r1, [r5]
   2641c:	str	ip, [sp, #144]	; 0x90
   26420:	str	r3, [sp, #108]	; 0x6c
   26424:	str	r8, [sp, #100]	; 0x64
   26428:	str	r4, [sp, #96]	; 0x60
   2642c:	str	r2, [sp, #120]	; 0x78
   26430:	and	r2, r2, r7
   26434:	str	r1, [sp, #128]	; 0x80
   26438:	and	r1, r1, r8
   2643c:	str	r2, [sp, #92]	; 0x5c
   26440:	orr	r2, r6, r2
   26444:	and	r6, r3, lr
   26448:	ldr	lr, [fp, #-1060]	; 0xfffffbdc
   2644c:	orr	r2, r2, r4
   26450:	str	r6, [sp, #80]	; 0x50
   26454:	orr	r2, r2, r6
   26458:	ldr	r6, [sp, #140]	; 0x8c
   2645c:	and	r4, ip, r6
   26460:	str	r4, [sp, #76]	; 0x4c
   26464:	orr	r4, r2, r4
   26468:	ldr	r2, [r0, #20]
   2646c:	and	r6, r2, lr
   26470:	str	r6, [sp, #72]	; 0x48
   26474:	orr	r6, r4, r6
   26478:	ldr	r4, [r0, #24]
   2647c:	and	ip, r4, sl
   26480:	orr	r6, r6, ip
   26484:	str	ip, [sp, #68]	; 0x44
   26488:	orrs	r6, r6, r1
   2648c:	beq	26650 <__assert_fail@plt+0x14f50>
   26490:	str	r1, [sp, #20]
   26494:	ldr	r1, [sp, #120]	; 0x78
   26498:	mov	r8, r2
   2649c:	str	r2, [sp, #44]	; 0x2c
   264a0:	ldr	r2, [sp, #132]	; 0x84
   264a4:	ldr	ip, [sp, #104]	; 0x68
   264a8:	ldr	r3, [sp, #140]	; 0x8c
   264ac:	bic	r6, r7, r1
   264b0:	ldr	r1, [sp, #124]	; 0x7c
   264b4:	str	r6, [sp, #64]	; 0x40
   264b8:	bic	r6, r2, r1
   264bc:	ldr	r2, [sp, #108]	; 0x6c
   264c0:	ldr	r1, [sp, #136]	; 0x88
   264c4:	str	r6, [sp, #48]	; 0x30
   264c8:	bic	r6, r9, ip
   264cc:	str	r6, [sp, #60]	; 0x3c
   264d0:	bic	r6, r1, r2
   264d4:	ldr	r1, [sp, #144]	; 0x90
   264d8:	str	r6, [sp, #56]	; 0x38
   264dc:	bic	r6, r3, r1
   264e0:	ldr	r1, [sp, #128]	; 0x80
   264e4:	ldr	r3, [sp, #120]	; 0x78
   264e8:	str	r6, [sp, #52]	; 0x34
   264ec:	bic	r6, lr, r8
   264f0:	ldr	r8, [sp, #100]	; 0x64
   264f4:	str	r6, [sp, #40]	; 0x28
   264f8:	str	r6, [fp, #-1060]	; 0xfffffbdc
   264fc:	bic	r6, sl, r4
   26500:	str	r6, [sp, #36]	; 0x24
   26504:	str	r6, [fp, #-1056]	; 0xfffffbe0
   26508:	bic	r7, r3, r7
   2650c:	ldr	r3, [sp, #124]	; 0x7c
   26510:	bic	r6, r8, r1
   26514:	bic	r1, ip, r9
   26518:	str	r6, [sp, #32]
   2651c:	str	r6, [fp, #-1052]	; 0xfffffbe4
   26520:	ldr	r6, [sp, #132]	; 0x84
   26524:	bic	r3, r3, r6
   26528:	orr	r6, r3, r7
   2652c:	str	r3, [sp, #132]	; 0x84
   26530:	mov	r3, r7
   26534:	ldr	r7, [sp, #136]	; 0x88
   26538:	orr	r6, r6, r1
   2653c:	bic	r2, r2, r7
   26540:	ldr	r7, [sp, #140]	; 0x8c
   26544:	str	r2, [sp, #136]	; 0x88
   26548:	orr	r6, r6, r2
   2654c:	ldr	r2, [sp, #144]	; 0x90
   26550:	bic	ip, r2, r7
   26554:	ldr	r2, [sp, #44]	; 0x2c
   26558:	orr	r6, r6, ip
   2655c:	bic	lr, r2, lr
   26560:	bic	r2, r4, sl
   26564:	ldr	r4, [sp, #128]	; 0x80
   26568:	orr	r6, r6, lr
   2656c:	orr	r6, r6, r2
   26570:	bic	r7, r4, r8
   26574:	orrs	r6, r6, r7
   26578:	beq	26670 <__assert_fail@plt+0x14f70>
   2657c:	ldr	r4, [sp, #156]	; 0x9c
   26580:	add	r6, sp, #160	; 0xa0
   26584:	str	r3, [r6, r4, lsl #5]
   26588:	ldr	r3, [sp, #132]	; 0x84
   2658c:	add	r6, r6, r4, lsl #5
   26590:	str	r3, [r6, #4]
   26594:	str	r1, [r6, #8]
   26598:	ldr	r1, [sp, #136]	; 0x88
   2659c:	add	r3, r6, #12
   265a0:	stm	r3, {r1, ip, lr}
   265a4:	str	r2, [r6, #24]
   265a8:	str	r7, [r6, #28]
   265ac:	sub	lr, fp, #6144	; 0x1800
   265b0:	str	r4, [sp, #156]	; 0x9c
   265b4:	ldr	r1, [sp, #92]	; 0x5c
   265b8:	ldr	r6, [sp, #116]	; 0x74
   265bc:	str	r1, [r5, #-28]	; 0xffffffe4
   265c0:	ldr	r1, [sp, #84]	; 0x54
   265c4:	str	r1, [r0, #4]
   265c8:	ldr	r1, [sp, #96]	; 0x60
   265cc:	str	r1, [r0, #8]
   265d0:	ldr	r1, [sp, #80]	; 0x50
   265d4:	str	r1, [r0, #12]
   265d8:	ldr	r1, [sp, #76]	; 0x4c
   265dc:	str	r1, [r0, #16]
   265e0:	ldr	r1, [sp, #72]	; 0x48
   265e4:	str	r1, [r0, #20]
   265e8:	ldr	r1, [sp, #68]	; 0x44
   265ec:	str	r1, [r0, #24]
   265f0:	ldr	r0, [sp, #20]
   265f4:	sub	r1, lr, #104	; 0x68
   265f8:	str	r0, [r5]
   265fc:	add	r0, r4, r4, lsl #1
   26600:	add	r5, r1, r0, lsl #2
   26604:	ldr	r0, [r6, #4]
   26608:	mov	r4, r5
   2660c:	str	r0, [r4, #4]!
   26610:	ldr	r8, [r6, #4]
   26614:	cmp	r8, #0
   26618:	ble	2667c <__assert_fail@plt+0x14f7c>
   2661c:	str	r0, [r5]
   26620:	lsl	r0, r0, #2
   26624:	bl	2aa84 <__assert_fail@plt+0x19384>
   26628:	cmp	r0, #0
   2662c:	str	r0, [r5, #8]
   26630:	beq	27614 <__assert_fail@plt+0x15f14>
   26634:	ldr	r1, [r6, #8]
   26638:	lsl	r2, r8, #2
   2663c:	bl	11448 <memcpy@plt>
   26640:	b	2668c <__assert_fail@plt+0x14f8c>
   26644:	str	r9, [sp, #144]	; 0x90
   26648:	mov	r2, r8
   2664c:	b	2671c <__assert_fail@plt+0x1501c>
   26650:	ldr	r4, [sp, #152]	; 0x98
   26654:	ldr	ip, [sp, #28]
   26658:	ldr	r2, [sp, #24]
   2665c:	ldr	r6, [sp, #116]	; 0x74
   26660:	ldr	lr, [sp, #136]	; 0x88
   26664:	ldr	sl, [sp, #132]	; 0x84
   26668:	str	r9, [sp, #144]	; 0x90
   2666c:	b	26720 <__assert_fail@plt+0x15020>
   26670:	ldr	r4, [sp, #152]	; 0x98
   26674:	ldr	r6, [sp, #116]	; 0x74
   26678:	b	2669c <__assert_fail@plt+0x14f9c>
   2667c:	mov	r0, #0
   26680:	str	r0, [r5]
   26684:	str	r0, [r5, #4]
   26688:	str	r0, [r5, #8]
   2668c:	ldr	r0, [sp, #156]	; 0x9c
   26690:	ldr	r4, [sp, #152]	; 0x98
   26694:	add	r0, r0, #1
   26698:	str	r0, [sp, #156]	; 0x9c
   2669c:	ldr	r0, [sp, #88]	; 0x58
   266a0:	ldr	r1, [sp, #112]	; 0x70
   266a4:	ldr	r0, [r0, #12]
   266a8:	ldr	r1, [r0, r1, lsl #2]
   266ac:	mov	r0, r6
   266b0:	bl	21674 <__assert_fail@plt+0xff74>
   266b4:	cmp	r0, #0
   266b8:	beq	27104 <__assert_fail@plt+0x15a04>
   266bc:	ldr	r2, [sp, #64]	; 0x40
   266c0:	ldr	sl, [sp, #48]	; 0x30
   266c4:	ldr	r9, [sp, #60]	; 0x3c
   266c8:	ldr	lr, [sp, #56]	; 0x38
   266cc:	ldr	r1, [sp, #52]	; 0x34
   266d0:	ldr	r5, [sp, #40]	; 0x28
   266d4:	orr	r0, sl, r2
   266d8:	orr	r0, r0, r9
   266dc:	orr	r0, r0, lr
   266e0:	orr	r0, r0, r1
   266e4:	orr	r0, r0, r5
   266e8:	ldr	r5, [sp, #36]	; 0x24
   266ec:	orr	r0, r0, r5
   266f0:	ldr	r5, [sp, #32]
   266f4:	orrs	r0, r0, r5
   266f8:	mov	r0, #0
   266fc:	movweq	r0, #17
   26700:	cmp	r0, #0
   26704:	bne	26c5c <__assert_fail@plt+0x1555c>
   26708:	mov	r7, r2
   2670c:	ldr	ip, [sp, #28]
   26710:	ldr	r2, [sp, #24]
   26714:	str	r1, [sp, #140]	; 0x8c
   26718:	str	r9, [sp, #144]	; 0x90
   2671c:	ldr	r5, [sp, #148]	; 0x94
   26720:	ldr	r3, [sp, #156]	; 0x9c
   26724:	ldr	r9, [sp, #144]	; 0x90
   26728:	add	r5, r5, #32
   2672c:	add	r4, r4, #1
   26730:	add	r6, r6, #12
   26734:	str	r5, [sp, #148]	; 0x94
   26738:	add	r5, sp, #160	; 0xa0
   2673c:	cmp	r4, r3
   26740:	blt	263b0 <__assert_fail@plt+0x14cb0>
   26744:	ldr	r5, [sp, #156]	; 0x9c
   26748:	ldr	r0, [sp, #140]	; 0x8c
   2674c:	str	sl, [fp, #-1076]	; 0xfffffbcc
   26750:	str	r7, [fp, #-1080]	; 0xfffffbc8
   26754:	str	r9, [fp, #-1072]	; 0xfffffbd0
   26758:	str	lr, [fp, #-1068]	; 0xfffffbd4
   2675c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   26760:	ldr	sl, [sp, #16]
   26764:	cmp	r4, r5
   26768:	beq	26bb0 <__assert_fail@plt+0x154b0>
   2676c:	b	26c34 <__assert_fail@plt+0x15534>
   26770:	mov	r4, #0
   26774:	cmp	r4, r5
   26778:	beq	26bb0 <__assert_fail@plt+0x154b0>
   2677c:	b	26c34 <__assert_fail@plt+0x15534>
   26780:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   26784:	ldr	r9, [fp, #-1080]	; 0xfffffbc8
   26788:	ldr	ip, [fp, #-1072]	; 0xfffffbd0
   2678c:	ldr	sl, [fp, #-1076]	; 0xfffffbcc
   26790:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   26794:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   26798:	sub	lr, fp, #6144	; 0x1800
   2679c:	mov	r4, #0
   267a0:	str	r0, [sp, #144]	; 0x90
   267a4:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   267a8:	mov	r3, ip
   267ac:	mov	r7, r9
   267b0:	str	r2, [sp, #80]	; 0x50
   267b4:	str	sl, [sp, #76]	; 0x4c
   267b8:	str	r0, [sp, #140]	; 0x8c
   267bc:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   267c0:	str	r0, [sp, #84]	; 0x54
   267c4:	sub	r0, lr, #104	; 0x68
   267c8:	str	r0, [sp, #148]	; 0x94
   267cc:	mov	r0, r6
   267d0:	add	r1, sp, #160	; 0xa0
   267d4:	str	r9, [sp, #136]	; 0x88
   267d8:	str	r7, [sp, #120]	; 0x78
   267dc:	str	r3, [sp, #92]	; 0x5c
   267e0:	str	r8, [sp, #96]	; 0x60
   267e4:	str	ip, [sp, #124]	; 0x7c
   267e8:	str	sl, [sp, #128]	; 0x80
   267ec:	str	r2, [sp, #132]	; 0x84
   267f0:	str	r5, [sp, #156]	; 0x9c
   267f4:	str	r4, [sp, #152]	; 0x98
   267f8:	add	r9, r1, r4, lsl #5
   267fc:	ldmib	r9, {sl, ip}
   26800:	ldr	lr, [r0, #-28]	; 0xffffffe4
   26804:	ldr	r5, [r0]
   26808:	str	r0, [sp, #116]	; 0x74
   2680c:	ldr	r4, [r9, #12]
   26810:	ldr	r6, [r9, #16]
   26814:	and	r0, lr, r7
   26818:	ldr	r7, [sp, #76]	; 0x4c
   2681c:	and	r1, ip, r3
   26820:	str	r4, [sp, #108]	; 0x6c
   26824:	str	r6, [sp, #104]	; 0x68
   26828:	str	r5, [sp, #100]	; 0x64
   2682c:	str	r0, [sp, #68]	; 0x44
   26830:	str	r1, [sp, #72]	; 0x48
   26834:	and	r2, sl, r7
   26838:	orr	r0, r2, r0
   2683c:	str	r2, [sp, #64]	; 0x40
   26840:	orr	r0, r0, r1
   26844:	ldr	r1, [sp, #80]	; 0x50
   26848:	and	r2, r4, r1
   2684c:	ldr	r4, [sp, #140]	; 0x8c
   26850:	str	r2, [sp, #60]	; 0x3c
   26854:	orr	r0, r0, r2
   26858:	and	r2, r6, r8
   2685c:	ldr	r8, [sp, #84]	; 0x54
   26860:	str	r2, [sp, #56]	; 0x38
   26864:	orr	r0, r0, r2
   26868:	ldr	r2, [r9, #20]
   2686c:	and	r3, r2, r8
   26870:	str	r3, [sp, #52]	; 0x34
   26874:	orr	r0, r0, r3
   26878:	ldr	r3, [r9, #24]
   2687c:	and	r6, r3, r4
   26880:	str	r6, [sp, #48]	; 0x30
   26884:	orr	r0, r0, r6
   26888:	ldr	r6, [sp, #144]	; 0x90
   2688c:	and	r6, r5, r6
   26890:	orrs	r0, r0, r6
   26894:	beq	26a48 <__assert_fail@plt+0x15348>
   26898:	ldr	r0, [sp, #120]	; 0x78
   2689c:	ldr	r5, [sp, #92]	; 0x5c
   268a0:	str	sl, [sp, #24]
   268a4:	str	r6, [sp, #20]
   268a8:	ldr	r6, [sp, #144]	; 0x90
   268ac:	str	ip, [sp, #28]
   268b0:	str	r4, [sp, #140]	; 0x8c
   268b4:	bic	r0, r0, lr
   268b8:	str	r0, [sp, #136]	; 0x88
   268bc:	bic	r0, r7, sl
   268c0:	ldr	sl, [sp, #96]	; 0x60
   268c4:	str	r0, [sp, #128]	; 0x80
   268c8:	bic	r0, r5, ip
   268cc:	str	r0, [sp, #124]	; 0x7c
   268d0:	ldr	r0, [sp, #108]	; 0x6c
   268d4:	bic	r0, r1, r0
   268d8:	str	r0, [sp, #132]	; 0x84
   268dc:	ldr	r0, [sp, #104]	; 0x68
   268e0:	bic	r0, sl, r0
   268e4:	str	r0, [sp, #44]	; 0x2c
   268e8:	bic	r0, r8, r2
   268ec:	bic	r2, r2, r8
   268f0:	str	r0, [sp, #40]	; 0x28
   268f4:	bic	r0, r4, r3
   268f8:	str	r0, [sp, #36]	; 0x24
   268fc:	ldr	r0, [sp, #100]	; 0x64
   26900:	bic	r0, r6, r0
   26904:	str	r0, [sp, #32]
   26908:	ldr	r0, [sp, #28]
   2690c:	bic	r0, r0, r5
   26910:	ldr	r5, [sp, #120]	; 0x78
   26914:	str	r0, [sp, #120]	; 0x78
   26918:	bic	ip, lr, r5
   2691c:	ldr	r5, [sp, #24]
   26920:	bic	r7, r5, r7
   26924:	mov	r5, r6
   26928:	str	r7, [sp, #92]	; 0x5c
   2692c:	orr	r7, r7, ip
   26930:	orr	r4, r7, r0
   26934:	ldr	r0, [sp, #108]	; 0x6c
   26938:	bic	lr, r0, r1
   2693c:	ldr	r0, [sp, #104]	; 0x68
   26940:	orr	r4, r4, lr
   26944:	bic	r6, r0, sl
   26948:	ldr	r0, [sp, #140]	; 0x8c
   2694c:	orr	r4, r4, r6
   26950:	orr	r4, r4, r2
   26954:	bic	r3, r3, r0
   26958:	ldr	r0, [sp, #100]	; 0x64
   2695c:	orr	r4, r4, r3
   26960:	bic	r1, r0, r5
   26964:	orrs	r4, r4, r1
   26968:	beq	26a74 <__assert_fail@plt+0x15374>
   2696c:	ldr	r7, [sp, #156]	; 0x9c
   26970:	ldr	r5, [sp, #92]	; 0x5c
   26974:	add	r4, sp, #160	; 0xa0
   26978:	add	r0, r4, r7, lsl #5
   2697c:	str	ip, [r4, r7, lsl #5]
   26980:	mov	r8, r7
   26984:	str	r5, [r0, #4]
   26988:	ldr	r5, [sp, #120]	; 0x78
   2698c:	str	r5, [r0, #8]
   26990:	str	lr, [r0, #12]
   26994:	str	r6, [r0, #16]
   26998:	str	r2, [r0, #20]
   2699c:	str	r3, [r0, #24]
   269a0:	str	r1, [r0, #28]
   269a4:	ldr	r0, [sp, #116]	; 0x74
   269a8:	ldr	r1, [sp, #68]	; 0x44
   269ac:	sub	lr, fp, #6144	; 0x1800
   269b0:	str	r1, [r0, #-28]	; 0xffffffe4
   269b4:	ldr	r1, [sp, #64]	; 0x40
   269b8:	str	r1, [r9, #4]
   269bc:	ldr	r1, [sp, #72]	; 0x48
   269c0:	str	r1, [r9, #8]
   269c4:	ldr	r1, [sp, #60]	; 0x3c
   269c8:	str	r1, [r9, #12]
   269cc:	ldr	r1, [sp, #56]	; 0x38
   269d0:	str	r1, [r9, #16]
   269d4:	ldr	r1, [sp, #52]	; 0x34
   269d8:	str	r1, [r9, #20]
   269dc:	ldr	r1, [sp, #48]	; 0x30
   269e0:	str	r1, [r9, #24]
   269e4:	ldr	r1, [sp, #20]
   269e8:	str	r1, [r0]
   269ec:	add	r0, r7, r7, lsl #1
   269f0:	sub	r1, lr, #104	; 0x68
   269f4:	add	r6, r1, r0, lsl #2
   269f8:	ldr	r1, [sp, #148]	; 0x94
   269fc:	mov	r4, r6
   26a00:	ldr	r0, [r1, #4]
   26a04:	str	r0, [r4, #4]!
   26a08:	ldr	r5, [r1, #4]
   26a0c:	cmp	r5, #1
   26a10:	blt	26a84 <__assert_fail@plt+0x15384>
   26a14:	str	r0, [r6]
   26a18:	lsl	r0, r0, #2
   26a1c:	bl	2aa84 <__assert_fail@plt+0x19384>
   26a20:	ldr	r7, [sp, #40]	; 0x28
   26a24:	cmp	r0, #0
   26a28:	str	r0, [r6, #8]
   26a2c:	beq	2713c <__assert_fail@plt+0x15a3c>
   26a30:	ldr	r1, [sp, #148]	; 0x94
   26a34:	lsl	r2, r5, #2
   26a38:	ldr	r1, [r1, #8]
   26a3c:	bl	11448 <memcpy@plt>
   26a40:	mov	r5, r8
   26a44:	b	26a9c <__assert_fail@plt+0x1539c>
   26a48:	ldr	r6, [sp, #120]	; 0x78
   26a4c:	ldr	r1, [sp, #92]	; 0x5c
   26a50:	ldr	r0, [sp, #144]	; 0x90
   26a54:	ldr	r5, [sp, #156]	; 0x9c
   26a58:	ldr	r4, [sp, #152]	; 0x98
   26a5c:	ldr	r9, [sp, #136]	; 0x88
   26a60:	ldr	r2, [sp, #132]	; 0x84
   26a64:	ldr	sl, [sp, #128]	; 0x80
   26a68:	ldr	ip, [sp, #124]	; 0x7c
   26a6c:	ldr	r8, [sp, #96]	; 0x60
   26a70:	b	26b2c <__assert_fail@plt+0x1542c>
   26a74:	ldr	r5, [sp, #156]	; 0x9c
   26a78:	ldr	r4, [sp, #152]	; 0x98
   26a7c:	ldr	r7, [sp, #40]	; 0x28
   26a80:	b	26aa4 <__assert_fail@plt+0x153a4>
   26a84:	ldr	r7, [sp, #40]	; 0x28
   26a88:	mov	r0, #0
   26a8c:	mov	r5, r8
   26a90:	str	r0, [r6]
   26a94:	str	r0, [r6, #4]
   26a98:	str	r0, [r6, #8]
   26a9c:	ldr	r4, [sp, #152]	; 0x98
   26aa0:	add	r5, r5, #1
   26aa4:	ldr	r0, [sp, #88]	; 0x58
   26aa8:	ldr	r1, [sp, #112]	; 0x70
   26aac:	ldr	r0, [r0, #12]
   26ab0:	ldr	r1, [r0, r1, lsl #2]
   26ab4:	ldr	r0, [sp, #148]	; 0x94
   26ab8:	bl	21674 <__assert_fail@plt+0xff74>
   26abc:	cmp	r0, #0
   26ac0:	beq	27080 <__assert_fail@plt+0x15980>
   26ac4:	ldr	r9, [sp, #136]	; 0x88
   26ac8:	ldr	sl, [sp, #128]	; 0x80
   26acc:	ldr	ip, [sp, #124]	; 0x7c
   26ad0:	ldr	r2, [sp, #132]	; 0x84
   26ad4:	ldr	r6, [sp, #44]	; 0x2c
   26ad8:	ldr	r1, [sp, #36]	; 0x24
   26adc:	ldr	lr, [sp, #32]
   26ae0:	orr	r0, sl, r9
   26ae4:	orr	r0, r0, ip
   26ae8:	orr	r0, r0, r2
   26aec:	orr	r0, r0, r6
   26af0:	orr	r0, r0, r7
   26af4:	orr	r0, r0, r1
   26af8:	orrs	r0, r0, lr
   26afc:	mov	r0, #0
   26b00:	movweq	r0, #17
   26b04:	cmp	r0, #0
   26b08:	bne	26b5c <__assert_fail@plt+0x1545c>
   26b0c:	str	r1, [sp, #140]	; 0x8c
   26b10:	mov	r8, r6
   26b14:	mov	r0, lr
   26b18:	mov	r1, ip
   26b1c:	mov	r6, r9
   26b20:	str	r7, [sp, #84]	; 0x54
   26b24:	str	r2, [sp, #80]	; 0x50
   26b28:	str	sl, [sp, #76]	; 0x4c
   26b2c:	ldr	r7, [sp, #148]	; 0x94
   26b30:	str	r0, [sp, #144]	; 0x90
   26b34:	ldr	r0, [sp, #116]	; 0x74
   26b38:	add	r4, r4, #1
   26b3c:	mov	r3, r1
   26b40:	cmp	r4, r5
   26b44:	add	r7, r7, #12
   26b48:	add	r0, r0, #32
   26b4c:	str	r7, [sp, #148]	; 0x94
   26b50:	mov	r7, r6
   26b54:	blt	267d0 <__assert_fail@plt+0x150d0>
   26b58:	b	26b78 <__assert_fail@plt+0x15478>
   26b5c:	cmp	r0, #17
   26b60:	bne	26c70 <__assert_fail@plt+0x15570>
   26b64:	mov	r8, r6
   26b68:	mov	r0, r7
   26b6c:	str	lr, [sp, #144]	; 0x90
   26b70:	str	r1, [sp, #140]	; 0x8c
   26b74:	str	r7, [sp, #84]	; 0x54
   26b78:	ldr	r0, [sp, #84]	; 0x54
   26b7c:	str	ip, [fp, #-1072]	; 0xfffffbd0
   26b80:	str	sl, [fp, #-1076]	; 0xfffffbcc
   26b84:	str	r2, [fp, #-1068]	; 0xfffffbd4
   26b88:	str	r8, [fp, #-1064]	; 0xfffffbd8
   26b8c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   26b90:	ldr	r0, [sp, #140]	; 0x8c
   26b94:	str	r0, [fp, #-1056]	; 0xfffffbe0
   26b98:	ldr	r0, [sp, #144]	; 0x90
   26b9c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   26ba0:	str	r9, [fp, #-1080]	; 0xfffffbc8
   26ba4:	ldr	sl, [sp, #16]
   26ba8:	cmp	r4, r5
   26bac:	bne	26c34 <__assert_fail@plt+0x15534>
   26bb0:	sub	lr, fp, #1024	; 0x400
   26bb4:	ldr	r1, [sp, #112]	; 0x70
   26bb8:	sub	r7, lr, #56	; 0x38
   26bbc:	sub	lr, fp, #6144	; 0x1800
   26bc0:	mov	r0, r7
   26bc4:	mov	r9, r7
   26bc8:	sub	r2, lr, #104	; 0x68
   26bcc:	vld1.32	{d16-d17}, [r0]!
   26bd0:	vld1.64	{d18-d19}, [r0]
   26bd4:	add	r0, sp, #160	; 0xa0
   26bd8:	add	r0, r0, r4, lsl #5
   26bdc:	vst1.32	{d16-d17}, [r0]!
   26be0:	vst1.32	{d18-d19}, [r0]
   26be4:	ldr	r0, [sp, #88]	; 0x58
   26be8:	ldr	r0, [r0, #12]
   26bec:	ldr	r7, [r0, r1, lsl #2]
   26bf0:	add	r0, r4, r4, lsl #1
   26bf4:	mov	r1, #1
   26bf8:	add	r5, r2, r0, lsl #2
   26bfc:	str	r1, [r2, r0, lsl #2]
   26c00:	mov	r0, #4
   26c04:	mov	r6, r5
   26c08:	str	r1, [r6, #4]!
   26c0c:	bl	2aa84 <__assert_fail@plt+0x19384>
   26c10:	cmp	r0, #0
   26c14:	str	r0, [r5, #8]
   26c18:	beq	276c8 <__assert_fail@plt+0x15fc8>
   26c1c:	ldr	sl, [sp, #16]
   26c20:	str	r7, [r0]
   26c24:	mov	r0, r9
   26c28:	add	r5, r4, #1
   26c2c:	vst1.64	{d8-d9}, [r0]!
   26c30:	vst1.64	{d8-d9}, [r0]
   26c34:	ldr	r0, [sp, #88]	; 0x58
   26c38:	ldr	r1, [sp, #112]	; 0x70
   26c3c:	ldr	r0, [r0, #8]
   26c40:	mov	r2, r1
   26c44:	add	r2, r1, #1
   26c48:	mov	r1, r2
   26c4c:	str	r2, [sp, #112]	; 0x70
   26c50:	cmp	r2, r0
   26c54:	blt	25edc <__assert_fail@plt+0x147dc>
   26c58:	b	26cc8 <__assert_fail@plt+0x155c8>
   26c5c:	cmp	r0, #17
   26c60:	bne	26ca0 <__assert_fail@plt+0x155a0>
   26c64:	mov	r7, r2
   26c68:	str	r1, [sp, #140]	; 0x8c
   26c6c:	b	26744 <__assert_fail@plt+0x15044>
   26c70:	str	ip, [fp, #-1072]	; 0xfffffbd0
   26c74:	str	sl, [fp, #-1076]	; 0xfffffbcc
   26c78:	str	r2, [fp, #-1068]	; 0xfffffbd4
   26c7c:	str	r6, [fp, #-1064]	; 0xfffffbd8
   26c80:	str	r7, [fp, #-1060]	; 0xfffffbdc
   26c84:	str	r1, [fp, #-1056]	; 0xfffffbe0
   26c88:	str	lr, [fp, #-1052]	; 0xfffffbe4
   26c8c:	str	r9, [fp, #-1080]	; 0xfffffbc8
   26c90:	ldr	sl, [sp, #16]
   26c94:	cmp	r0, #0
   26c98:	beq	26c34 <__assert_fail@plt+0x15534>
   26c9c:	b	26cc4 <__assert_fail@plt+0x155c4>
   26ca0:	ldr	r5, [sp, #156]	; 0x9c
   26ca4:	str	sl, [fp, #-1076]	; 0xfffffbcc
   26ca8:	str	r2, [fp, #-1080]	; 0xfffffbc8
   26cac:	str	r9, [fp, #-1072]	; 0xfffffbd0
   26cb0:	str	lr, [fp, #-1068]	; 0xfffffbd4
   26cb4:	str	r1, [fp, #-1064]	; 0xfffffbd8
   26cb8:	ldr	sl, [sp, #16]
   26cbc:	cmp	r0, #0
   26cc0:	beq	26c34 <__assert_fail@plt+0x15534>
   26cc4:	b	26cd0 <__assert_fail@plt+0x155d0>
   26cc8:	cmp	r5, #0
   26ccc:	ble	27680 <__assert_fail@plt+0x15f80>
   26cd0:	mov	r0, #0
   26cd4:	str	r0, [fp, #-3136]	; 0xfffff3c0
   26cd8:	add	r0, r5, #1
   26cdc:	str	r0, [fp, #-3140]	; 0xfffff3bc
   26ce0:	lsl	r0, r0, #2
   26ce4:	bl	2aa84 <__assert_fail@plt+0x19384>
   26ce8:	cmp	r0, #0
   26cec:	str	r0, [fp, #-3132]	; 0xfffff3c4
   26cf0:	mov	r0, #0
   26cf4:	movweq	r0, #12
   26cf8:	str	r0, [fp, #-56]	; 0xffffffc8
   26cfc:	beq	276e4 <__assert_fail@plt+0x15fe4>
   26d00:	sub	lr, fp, #3072	; 0xc00
   26d04:	vmov.i32	q8, #0	; 0x00000000
   26d08:	mov	r1, #0
   26d0c:	mov	r9, #0
   26d10:	mov	r6, #0
   26d14:	mov	r2, #0
   26d18:	mov	r7, #0
   26d1c:	mov	r3, #0
   26d20:	mov	r8, #0
   26d24:	add	r4, sp, #160	; 0xa0
   26d28:	str	r5, [sp, #156]	; 0x9c
   26d2c:	sub	r0, lr, #104	; 0x68
   26d30:	vst1.64	{d16-d17}, [r0]!
   26d34:	vst1.64	{d16-d17}, [r0]
   26d38:	mov	r0, #0
   26d3c:	str	r0, [sp, #152]	; 0x98
   26d40:	mov	r0, #0
   26d44:	str	r0, [sp, #144]	; 0x90
   26d48:	mov	r0, #0
   26d4c:	str	r0, [sp, #148]	; 0x94
   26d50:	mov	r0, #0
   26d54:	str	r0, [sp, #124]	; 0x7c
   26d58:	mov	r0, #0
   26d5c:	sub	lr, fp, #6144	; 0x1800
   26d60:	str	r2, [sp, #140]	; 0x8c
   26d64:	str	r7, [sp, #136]	; 0x88
   26d68:	str	r3, [sp, #132]	; 0x84
   26d6c:	str	r0, [fp, #-3136]	; 0xfffff3c0
   26d70:	add	r0, r8, r8, lsl #1
   26d74:	sub	r2, lr, #104	; 0x68
   26d78:	add	r2, r2, r0, lsl #2
   26d7c:	mov	r7, r2
   26d80:	ldr	r0, [r7, #4]!
   26d84:	cmp	r0, #1
   26d88:	blt	26dec <__assert_fail@plt+0x156ec>
   26d8c:	str	r9, [sp, #128]	; 0x80
   26d90:	add	r9, r2, #8
   26d94:	mov	r5, #0
   26d98:	ldr	r2, [r9]
   26d9c:	ldr	r3, [sl, #12]
   26da0:	ldr	r2, [r2, r5, lsl #2]
   26da4:	ldr	r2, [r3, r2, lsl #2]
   26da8:	cmn	r2, #1
   26dac:	beq	26dd8 <__assert_fail@plt+0x156d8>
   26db0:	ldr	r0, [sl, #24]
   26db4:	add	r1, r2, r2, lsl #1
   26db8:	sub	lr, fp, #3072	; 0xc00
   26dbc:	add	r1, r0, r1, lsl #2
   26dc0:	sub	r0, lr, #68	; 0x44
   26dc4:	bl	214cc <__assert_fail@plt+0xfdcc>
   26dc8:	cmp	r0, #0
   26dcc:	bne	26fe8 <__assert_fail@plt+0x158e8>
   26dd0:	ldr	r0, [r7]
   26dd4:	mov	r1, #0
   26dd8:	add	r5, r5, #1
   26ddc:	cmp	r5, r0
   26de0:	blt	26d98 <__assert_fail@plt+0x15698>
   26de4:	ldr	r9, [sp, #128]	; 0x80
   26de8:	str	r1, [fp, #-56]	; 0xffffffc8
   26dec:	sub	lr, fp, #3072	; 0xc00
   26df0:	sub	r0, fp, #56	; 0x38
   26df4:	mov	r1, sl
   26df8:	mov	r3, #0
   26dfc:	sub	r2, lr, #68	; 0x44
   26e00:	bl	217bc <__assert_fail@plt+0x100bc>
   26e04:	ldr	r1, [fp, #-56]	; 0xffffffc8
   26e08:	mov	r7, r0
   26e0c:	sub	lr, fp, #1024	; 0x400
   26e10:	sub	r0, lr, #56	; 0x38
   26e14:	cmp	r7, #0
   26e18:	str	r7, [r0, r8, lsl #2]
   26e1c:	bne	26e28 <__assert_fail@plt+0x15728>
   26e20:	cmp	r1, #0
   26e24:	bne	270c8 <__assert_fail@plt+0x159c8>
   26e28:	ldrsb	r0, [r7, #52]	; 0x34
   26e2c:	cmn	r0, #1
   26e30:	ble	26e50 <__assert_fail@plt+0x15750>
   26e34:	sub	lr, fp, #3072	; 0xc00
   26e38:	sub	r0, lr, #56	; 0x38
   26e3c:	sub	lr, fp, #2048	; 0x800
   26e40:	str	r7, [r0, r8, lsl #2]
   26e44:	sub	r0, lr, #56	; 0x38
   26e48:	str	r7, [r0, r8, lsl #2]
   26e4c:	b	26ee4 <__assert_fail@plt+0x157e4>
   26e50:	sub	lr, fp, #3072	; 0xc00
   26e54:	sub	r0, fp, #56	; 0x38
   26e58:	mov	r1, sl
   26e5c:	mov	r3, #1
   26e60:	sub	r2, lr, #68	; 0x44
   26e64:	bl	217bc <__assert_fail@plt+0x100bc>
   26e68:	sub	lr, fp, #2048	; 0x800
   26e6c:	cmp	r0, #0
   26e70:	sub	r1, lr, #56	; 0x38
   26e74:	str	r0, [r1, r8, lsl #2]
   26e78:	bne	26e88 <__assert_fail@plt+0x15788>
   26e7c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   26e80:	cmp	r1, #0
   26e84:	bne	270c8 <__assert_fail@plt+0x159c8>
   26e88:	cmp	r7, r0
   26e8c:	beq	26eac <__assert_fail@plt+0x157ac>
   26e90:	ldr	r0, [sl, #92]	; 0x5c
   26e94:	ldr	r1, [sp, #124]	; 0x7c
   26e98:	cmp	r0, #1
   26e9c:	mov	r0, #0
   26ea0:	movwgt	r0, #1
   26ea4:	orr	r1, r1, r0
   26ea8:	str	r1, [sp, #124]	; 0x7c
   26eac:	sub	lr, fp, #3072	; 0xc00
   26eb0:	sub	r0, fp, #56	; 0x38
   26eb4:	mov	r1, sl
   26eb8:	mov	r3, #2
   26ebc:	sub	r2, lr, #68	; 0x44
   26ec0:	bl	217bc <__assert_fail@plt+0x100bc>
   26ec4:	sub	lr, fp, #3072	; 0xc00
   26ec8:	cmp	r0, #0
   26ecc:	sub	r1, lr, #56	; 0x38
   26ed0:	str	r0, [r1, r8, lsl #2]
   26ed4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   26ed8:	bne	26ee4 <__assert_fail@plt+0x157e4>
   26edc:	cmp	r1, #0
   26ee0:	bne	270c8 <__assert_fail@plt+0x159c8>
   26ee4:	ldr	r0, [r4, r8, lsl #5]
   26ee8:	ldr	r2, [sp, #148]	; 0x94
   26eec:	ldr	sl, [sp, #16]
   26ef0:	orr	r2, r2, r0
   26ef4:	add	r0, r4, r8, lsl #5
   26ef8:	add	r8, r8, #1
   26efc:	str	r2, [sp, #148]	; 0x94
   26f00:	ldr	r2, [r0, #24]
   26f04:	ldr	ip, [r0, #4]
   26f08:	ldr	r3, [r0, #8]
   26f0c:	ldr	r7, [r0, #12]
   26f10:	ldr	r5, [r0, #16]
   26f14:	ldr	r4, [r0, #20]
   26f18:	ldr	r0, [r0, #28]
   26f1c:	orr	r9, r9, r0
   26f20:	ldr	r0, [sp, #152]	; 0x98
   26f24:	orr	r6, r6, r2
   26f28:	ldr	r2, [sp, #140]	; 0x8c
   26f2c:	orr	r0, r0, r5
   26f30:	orr	r2, r2, r4
   26f34:	add	r4, sp, #160	; 0xa0
   26f38:	str	r0, [sp, #152]	; 0x98
   26f3c:	ldr	r0, [sp, #136]	; 0x88
   26f40:	orr	r0, r0, r7
   26f44:	mov	r7, r0
   26f48:	ldr	r0, [sp, #132]	; 0x84
   26f4c:	orr	r0, r0, r3
   26f50:	mov	r3, r0
   26f54:	ldr	r0, [sp, #144]	; 0x90
   26f58:	orr	r0, r0, ip
   26f5c:	str	r0, [sp, #144]	; 0x90
   26f60:	ldr	r0, [sp, #156]	; 0x9c
   26f64:	cmp	r8, r0
   26f68:	blt	26d58 <__assert_fail@plt+0x15658>
   26f6c:	ldr	r0, [sp, #144]	; 0x90
   26f70:	ldr	r8, [sp, #124]	; 0x7c
   26f74:	str	r0, [fp, #-3172]	; 0xfffff39c
   26f78:	ldr	r0, [sp, #148]	; 0x94
   26f7c:	tst	r8, #1
   26f80:	str	r0, [fp, #-3176]	; 0xfffff398
   26f84:	ldr	r0, [sp, #152]	; 0x98
   26f88:	str	r3, [fp, #-3168]	; 0xfffff3a0
   26f8c:	str	r7, [fp, #-3164]	; 0xfffff3a4
   26f90:	str	r0, [fp, #-3160]	; 0xfffff3a8
   26f94:	mov	r0, #4
   26f98:	str	r2, [fp, #-3156]	; 0xfffff3ac
   26f9c:	str	r6, [fp, #-3152]	; 0xfffff3b0
   26fa0:	str	r9, [fp, #-3148]	; 0xfffff3b4
   26fa4:	bne	276f0 <__assert_fail@plt+0x15ff0>
   26fa8:	mov	r1, #256	; 0x100
   26fac:	bl	2aa30 <__assert_fail@plt+0x19330>
   26fb0:	ldr	r1, [sp, #88]	; 0x58
   26fb4:	ldr	r5, [sp, #156]	; 0x9c
   26fb8:	cmp	r0, #0
   26fbc:	str	r0, [r1, #44]	; 0x2c
   26fc0:	beq	2702c <__assert_fail@plt+0x1592c>
   26fc4:	ldr	ip, [fp, #-3176]	; 0xfffff398
   26fc8:	mov	r9, r5
   26fcc:	cmp	ip, #0
   26fd0:	beq	271e4 <__assert_fail@plt+0x15ae4>
   26fd4:	mov	r2, #0
   26fd8:	mov	r3, #1
   26fdc:	mov	r1, ip
   26fe0:	mov	r7, #0
   26fe4:	b	271c4 <__assert_fail@plt+0x15ac4>
   26fe8:	ldr	r1, [sp, #144]	; 0x90
   26fec:	str	r0, [fp, #-56]	; 0xffffffc8
   26ff0:	str	r1, [fp, #-3172]	; 0xfffff39c
   26ff4:	ldr	r1, [sp, #148]	; 0x94
   26ff8:	str	r1, [fp, #-3176]	; 0xfffff398
   26ffc:	ldr	r1, [sp, #132]	; 0x84
   27000:	str	r1, [fp, #-3168]	; 0xfffff3a0
   27004:	ldr	r1, [sp, #136]	; 0x88
   27008:	str	r1, [fp, #-3164]	; 0xfffff3a4
   2700c:	ldr	r1, [sp, #152]	; 0x98
   27010:	str	r1, [fp, #-3160]	; 0xfffff3a8
   27014:	ldr	r1, [sp, #140]	; 0x8c
   27018:	str	r1, [fp, #-3156]	; 0xfffff3ac
   2701c:	ldr	r1, [sp, #128]	; 0x80
   27020:	str	r6, [fp, #-3152]	; 0xfffff3b0
   27024:	str	r1, [fp, #-3148]	; 0xfffff3b4
   27028:	ldr	r5, [sp, #156]	; 0x9c
   2702c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   27030:	bl	13de4 <__assert_fail@plt+0x26e4>
   27034:	cmp	r5, #1
   27038:	blt	2706c <__assert_fail@plt+0x1596c>
   2703c:	sub	lr, fp, #6144	; 0x1800
   27040:	sub	r0, lr, #104	; 0x68
   27044:	add	r4, r0, #8
   27048:	ldr	r0, [r4], #12
   2704c:	bl	13de4 <__assert_fail@plt+0x26e4>
   27050:	subs	r5, r5, #1
   27054:	bne	27048 <__assert_fail@plt+0x15948>
   27058:	mov	r0, #0
   2705c:	sub	sp, fp, #48	; 0x30
   27060:	vpop	{d8-d9}
   27064:	add	sp, sp, #4
   27068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2706c:	mov	r0, #0
   27070:	sub	sp, fp, #48	; 0x30
   27074:	vpop	{d8-d9}
   27078:	add	sp, sp, #4
   2707c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27080:	ldr	r0, [sp, #124]	; 0x7c
   27084:	str	r0, [fp, #-1072]	; 0xfffffbd0
   27088:	ldr	r0, [sp, #128]	; 0x80
   2708c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   27090:	ldr	r0, [sp, #132]	; 0x84
   27094:	str	r0, [fp, #-1068]	; 0xfffffbd4
   27098:	ldr	r0, [sp, #44]	; 0x2c
   2709c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   270a0:	ldr	r0, [sp, #36]	; 0x24
   270a4:	str	r7, [fp, #-1060]	; 0xfffffbdc
   270a8:	str	r0, [fp, #-1056]	; 0xfffffbe0
   270ac:	ldr	r0, [sp, #32]
   270b0:	str	r0, [fp, #-1052]	; 0xfffffbe4
   270b4:	ldr	r0, [sp, #136]	; 0x88
   270b8:	str	r0, [fp, #-1080]	; 0xfffffbc8
   270bc:	cmp	r5, #1
   270c0:	bge	27660 <__assert_fail@plt+0x15f60>
   270c4:	b	2767c <__assert_fail@plt+0x15f7c>
   270c8:	ldr	r0, [sp, #144]	; 0x90
   270cc:	str	r0, [fp, #-3172]	; 0xfffff39c
   270d0:	ldr	r0, [sp, #148]	; 0x94
   270d4:	str	r0, [fp, #-3176]	; 0xfffff398
   270d8:	ldr	r0, [sp, #132]	; 0x84
   270dc:	str	r0, [fp, #-3168]	; 0xfffff3a0
   270e0:	ldr	r0, [sp, #136]	; 0x88
   270e4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   270e8:	ldr	r0, [sp, #152]	; 0x98
   270ec:	str	r0, [fp, #-3160]	; 0xfffff3a8
   270f0:	ldr	r0, [sp, #140]	; 0x8c
   270f4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   270f8:	str	r6, [fp, #-3152]	; 0xfffff3b0
   270fc:	str	r9, [fp, #-3148]	; 0xfffff3b4
   27100:	b	27028 <__assert_fail@plt+0x15928>
   27104:	ldr	r0, [sp, #48]	; 0x30
   27108:	ldr	r5, [sp, #156]	; 0x9c
   2710c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   27110:	ldr	r0, [sp, #64]	; 0x40
   27114:	str	r0, [fp, #-1080]	; 0xfffffbc8
   27118:	ldr	r0, [sp, #60]	; 0x3c
   2711c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   27120:	ldr	r0, [sp, #56]	; 0x38
   27124:	str	r0, [fp, #-1068]	; 0xfffffbd4
   27128:	ldr	r0, [sp, #52]	; 0x34
   2712c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27130:	cmp	r5, #1
   27134:	bge	27660 <__assert_fail@plt+0x15f60>
   27138:	b	2767c <__assert_fail@plt+0x15f7c>
   2713c:	ldr	r0, [sp, #124]	; 0x7c
   27140:	mov	r5, r8
   27144:	str	r0, [fp, #-1072]	; 0xfffffbd0
   27148:	ldr	r0, [sp, #128]	; 0x80
   2714c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   27150:	ldr	r0, [sp, #132]	; 0x84
   27154:	str	r0, [fp, #-1068]	; 0xfffffbd4
   27158:	ldr	r0, [sp, #44]	; 0x2c
   2715c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27160:	ldr	r0, [sp, #36]	; 0x24
   27164:	str	r7, [fp, #-1060]	; 0xfffffbdc
   27168:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2716c:	ldr	r0, [sp, #32]
   27170:	str	r0, [fp, #-1052]	; 0xfffffbe4
   27174:	ldr	r0, [sp, #136]	; 0x88
   27178:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2717c:	b	27640 <__assert_fail@plt+0x15f40>
   27180:	mov	lr, #0
   27184:	ldr	r5, [r4, lr, lsl #3]
   27188:	add	lr, lr, #4
   2718c:	tst	r5, r3
   27190:	beq	27184 <__assert_fail@plt+0x15a84>
   27194:	ldr	r5, [sp]
   27198:	sub	r6, fp, #1024	; 0x400
   2719c:	sub	r6, r6, #56	; 0x38
   271a0:	ldr	r5, [r5]
   271a4:	tst	r5, r3
   271a8:	sub	r5, fp, #2048	; 0x800
   271ac:	sub	r5, r5, #56	; 0x38
   271b0:	moveq	r5, r6
   271b4:	add	r6, r5, lr
   271b8:	ldr	r6, [r6, #-4]
   271bc:	str	r6, [r0, r7, lsl #2]
   271c0:	b	271cc <__assert_fail@plt+0x15acc>
   271c4:	tst	r1, #1
   271c8:	bne	27180 <__assert_fail@plt+0x15a80>
   271cc:	lsr	r6, r1, #1
   271d0:	cmp	r2, r1, lsr #1
   271d4:	add	r7, r7, #1
   271d8:	lsl	r3, r3, #1
   271dc:	mov	r1, r6
   271e0:	bne	271c4 <__assert_fail@plt+0x15ac4>
   271e4:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   271e8:	cmp	r2, #0
   271ec:	beq	2726c <__assert_fail@plt+0x15b6c>
   271f0:	add	lr, r4, #4
   271f4:	mov	r7, #32
   271f8:	mov	r6, #1
   271fc:	mov	r5, #0
   27200:	b	2724c <__assert_fail@plt+0x15b4c>
   27204:	mov	r1, #0
   27208:	ldr	r4, [lr, r1, lsl #3]
   2720c:	add	r1, r1, #4
   27210:	tst	r4, r6
   27214:	beq	27208 <__assert_fail@plt+0x15b08>
   27218:	ldr	r3, [sp, #16]
   2721c:	ldr	r4, [r3, #100]	; 0x64
   27220:	sub	r3, fp, #2048	; 0x800
   27224:	tst	r4, r6
   27228:	sub	r4, r3, #56	; 0x38
   2722c:	sub	r3, fp, #1024	; 0x400
   27230:	sub	r3, r3, #56	; 0x38
   27234:	moveq	r4, r3
   27238:	add	r1, r4, r1
   2723c:	add	r4, sp, #160	; 0xa0
   27240:	ldr	r1, [r1, #-4]
   27244:	str	r1, [r0, r7, lsl #2]
   27248:	b	27254 <__assert_fail@plt+0x15b54>
   2724c:	tst	r2, #1
   27250:	bne	27204 <__assert_fail@plt+0x15b04>
   27254:	lsr	r1, r2, #1
   27258:	cmp	r5, r2, lsr #1
   2725c:	add	r7, r7, #1
   27260:	lsl	r6, r6, #1
   27264:	mov	r2, r1
   27268:	bne	2724c <__assert_fail@plt+0x15b4c>
   2726c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   27270:	cmp	r2, #0
   27274:	beq	272f4 <__assert_fail@plt+0x15bf4>
   27278:	add	lr, r4, #8
   2727c:	mov	r7, #64	; 0x40
   27280:	mov	r6, #1
   27284:	mov	r5, #0
   27288:	b	272d4 <__assert_fail@plt+0x15bd4>
   2728c:	mov	r1, #0
   27290:	ldr	r4, [lr, r1, lsl #3]
   27294:	add	r1, r1, #4
   27298:	tst	r4, r6
   2729c:	beq	27290 <__assert_fail@plt+0x15b90>
   272a0:	ldr	r3, [sp, #16]
   272a4:	ldr	r4, [r3, #104]	; 0x68
   272a8:	sub	r3, fp, #2048	; 0x800
   272ac:	tst	r4, r6
   272b0:	sub	r4, r3, #56	; 0x38
   272b4:	sub	r3, fp, #1024	; 0x400
   272b8:	sub	r3, r3, #56	; 0x38
   272bc:	moveq	r4, r3
   272c0:	add	r1, r4, r1
   272c4:	add	r4, sp, #160	; 0xa0
   272c8:	ldr	r1, [r1, #-4]
   272cc:	str	r1, [r0, r7, lsl #2]
   272d0:	b	272dc <__assert_fail@plt+0x15bdc>
   272d4:	tst	r2, #1
   272d8:	bne	2728c <__assert_fail@plt+0x15b8c>
   272dc:	lsr	r1, r2, #1
   272e0:	cmp	r5, r2, lsr #1
   272e4:	add	r7, r7, #1
   272e8:	lsl	r6, r6, #1
   272ec:	mov	r2, r1
   272f0:	bne	272d4 <__assert_fail@plt+0x15bd4>
   272f4:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   272f8:	cmp	r2, #0
   272fc:	beq	2737c <__assert_fail@plt+0x15c7c>
   27300:	add	lr, r4, #12
   27304:	mov	r7, #96	; 0x60
   27308:	mov	r6, #1
   2730c:	mov	r5, #0
   27310:	b	2735c <__assert_fail@plt+0x15c5c>
   27314:	mov	r1, #0
   27318:	ldr	r4, [lr, r1, lsl #3]
   2731c:	add	r1, r1, #4
   27320:	tst	r4, r6
   27324:	beq	27318 <__assert_fail@plt+0x15c18>
   27328:	ldr	r3, [sp, #16]
   2732c:	ldr	r4, [r3, #108]	; 0x6c
   27330:	sub	r3, fp, #2048	; 0x800
   27334:	tst	r4, r6
   27338:	sub	r4, r3, #56	; 0x38
   2733c:	sub	r3, fp, #1024	; 0x400
   27340:	sub	r3, r3, #56	; 0x38
   27344:	moveq	r4, r3
   27348:	add	r1, r4, r1
   2734c:	add	r4, sp, #160	; 0xa0
   27350:	ldr	r1, [r1, #-4]
   27354:	str	r1, [r0, r7, lsl #2]
   27358:	b	27364 <__assert_fail@plt+0x15c64>
   2735c:	tst	r2, #1
   27360:	bne	27314 <__assert_fail@plt+0x15c14>
   27364:	lsr	r1, r2, #1
   27368:	cmp	r5, r2, lsr #1
   2736c:	add	r7, r7, #1
   27370:	lsl	r6, r6, #1
   27374:	mov	r2, r1
   27378:	bne	2735c <__assert_fail@plt+0x15c5c>
   2737c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   27380:	cmp	r2, #0
   27384:	beq	27404 <__assert_fail@plt+0x15d04>
   27388:	add	lr, r4, #16
   2738c:	mov	r7, #128	; 0x80
   27390:	mov	r6, #1
   27394:	mov	r5, #0
   27398:	b	273e4 <__assert_fail@plt+0x15ce4>
   2739c:	mov	r1, #0
   273a0:	ldr	r4, [lr, r1, lsl #3]
   273a4:	add	r1, r1, #4
   273a8:	tst	r4, r6
   273ac:	beq	273a0 <__assert_fail@plt+0x15ca0>
   273b0:	ldr	r3, [sp, #4]
   273b4:	ldr	r4, [r3]
   273b8:	sub	r3, fp, #2048	; 0x800
   273bc:	tst	r4, r6
   273c0:	sub	r4, r3, #56	; 0x38
   273c4:	sub	r3, fp, #1024	; 0x400
   273c8:	sub	r3, r3, #56	; 0x38
   273cc:	moveq	r4, r3
   273d0:	add	r1, r4, r1
   273d4:	add	r4, sp, #160	; 0xa0
   273d8:	ldr	r1, [r1, #-4]
   273dc:	str	r1, [r0, r7, lsl #2]
   273e0:	b	273ec <__assert_fail@plt+0x15cec>
   273e4:	tst	r2, #1
   273e8:	bne	2739c <__assert_fail@plt+0x15c9c>
   273ec:	lsr	r1, r2, #1
   273f0:	cmp	r5, r2, lsr #1
   273f4:	add	r7, r7, #1
   273f8:	lsl	r6, r6, #1
   273fc:	mov	r2, r1
   27400:	bne	273e4 <__assert_fail@plt+0x15ce4>
   27404:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   27408:	cmp	r2, #0
   2740c:	beq	2748c <__assert_fail@plt+0x15d8c>
   27410:	add	lr, r4, #20
   27414:	mov	r7, #160	; 0xa0
   27418:	mov	r6, #1
   2741c:	mov	r5, #0
   27420:	b	2746c <__assert_fail@plt+0x15d6c>
   27424:	mov	r1, #0
   27428:	ldr	r4, [lr, r1, lsl #3]
   2742c:	add	r1, r1, #4
   27430:	tst	r4, r6
   27434:	beq	27428 <__assert_fail@plt+0x15d28>
   27438:	ldr	r3, [sp, #16]
   2743c:	ldr	r4, [r3, #116]	; 0x74
   27440:	sub	r3, fp, #2048	; 0x800
   27444:	tst	r4, r6
   27448:	sub	r4, r3, #56	; 0x38
   2744c:	sub	r3, fp, #1024	; 0x400
   27450:	sub	r3, r3, #56	; 0x38
   27454:	moveq	r4, r3
   27458:	add	r1, r4, r1
   2745c:	add	r4, sp, #160	; 0xa0
   27460:	ldr	r1, [r1, #-4]
   27464:	str	r1, [r0, r7, lsl #2]
   27468:	b	27474 <__assert_fail@plt+0x15d74>
   2746c:	tst	r2, #1
   27470:	bne	27424 <__assert_fail@plt+0x15d24>
   27474:	lsr	r1, r2, #1
   27478:	cmp	r5, r2, lsr #1
   2747c:	add	r7, r7, #1
   27480:	lsl	r6, r6, #1
   27484:	mov	r2, r1
   27488:	bne	2746c <__assert_fail@plt+0x15d6c>
   2748c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   27490:	cmp	r2, #0
   27494:	beq	27514 <__assert_fail@plt+0x15e14>
   27498:	add	lr, r4, #24
   2749c:	mov	r7, #192	; 0xc0
   274a0:	mov	r6, #1
   274a4:	mov	r5, #0
   274a8:	b	274f4 <__assert_fail@plt+0x15df4>
   274ac:	mov	r1, #0
   274b0:	ldr	r4, [lr, r1, lsl #3]
   274b4:	add	r1, r1, #4
   274b8:	tst	r4, r6
   274bc:	beq	274b0 <__assert_fail@plt+0x15db0>
   274c0:	ldr	r3, [sp, #16]
   274c4:	ldr	r4, [r3, #120]	; 0x78
   274c8:	sub	r3, fp, #2048	; 0x800
   274cc:	tst	r4, r6
   274d0:	sub	r4, r3, #56	; 0x38
   274d4:	sub	r3, fp, #1024	; 0x400
   274d8:	sub	r3, r3, #56	; 0x38
   274dc:	moveq	r4, r3
   274e0:	add	r1, r4, r1
   274e4:	add	r4, sp, #160	; 0xa0
   274e8:	ldr	r1, [r1, #-4]
   274ec:	str	r1, [r0, r7, lsl #2]
   274f0:	b	274fc <__assert_fail@plt+0x15dfc>
   274f4:	tst	r2, #1
   274f8:	bne	274ac <__assert_fail@plt+0x15dac>
   274fc:	lsr	r1, r2, #1
   27500:	cmp	r5, r2, lsr #1
   27504:	add	r7, r7, #1
   27508:	lsl	r6, r6, #1
   2750c:	mov	r2, r1
   27510:	bne	274f4 <__assert_fail@plt+0x15df4>
   27514:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   27518:	cmp	r2, #0
   2751c:	beq	27598 <__assert_fail@plt+0x15e98>
   27520:	mov	r3, #224	; 0xe0
   27524:	mov	r7, #1
   27528:	mov	r6, #0
   2752c:	b	27578 <__assert_fail@plt+0x15e78>
   27530:	ldr	r1, [sp, #12]
   27534:	mov	lr, #0
   27538:	ldr	r5, [r1, lr, lsl #3]
   2753c:	add	lr, lr, #4
   27540:	tst	r5, r7
   27544:	beq	27538 <__assert_fail@plt+0x15e38>
   27548:	ldr	r1, [sp, #16]
   2754c:	ldr	r5, [r1, #124]	; 0x7c
   27550:	sub	r1, fp, #2048	; 0x800
   27554:	tst	r5, r7
   27558:	sub	r5, r1, #56	; 0x38
   2755c:	sub	r1, fp, #1024	; 0x400
   27560:	sub	r1, r1, #56	; 0x38
   27564:	moveq	r5, r1
   27568:	add	r1, r5, lr
   2756c:	ldr	r1, [r1, #-4]
   27570:	str	r1, [r0, r3, lsl #2]
   27574:	b	27580 <__assert_fail@plt+0x15e80>
   27578:	tst	r2, #1
   2757c:	bne	27530 <__assert_fail@plt+0x15e30>
   27580:	lsr	r1, r2, #1
   27584:	cmp	r6, r2, lsr #1
   27588:	add	r3, r3, #1
   2758c:	lsl	r7, r7, #1
   27590:	mov	r2, r1
   27594:	bne	27578 <__assert_fail@plt+0x15e78>
   27598:	tst	ip, #1024	; 0x400
   2759c:	beq	275dc <__assert_fail@plt+0x15edc>
   275a0:	mov	r1, #0
   275a4:	add	r2, r4, r1, lsl #5
   275a8:	ldrb	r2, [r2, #1]
   275ac:	tst	r2, #4
   275b0:	bne	275c4 <__assert_fail@plt+0x15ec4>
   275b4:	add	r1, r1, #1
   275b8:	cmp	r1, r9
   275bc:	blt	275a4 <__assert_fail@plt+0x15ea4>
   275c0:	b	275dc <__assert_fail@plt+0x15edc>
   275c4:	sub	lr, fp, #3072	; 0xc00
   275c8:	tst	r8, #1
   275cc:	sub	r2, lr, #56	; 0x38
   275d0:	ldr	r1, [r2, r1, lsl #2]
   275d4:	str	r1, [r0, #40]	; 0x28
   275d8:	strne	r1, [r0, #1064]	; 0x428
   275dc:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   275e0:	bl	13de4 <__assert_fail@plt+0x26e4>
   275e4:	sub	lr, fp, #6144	; 0x1800
   275e8:	sub	r0, lr, #104	; 0x68
   275ec:	add	r4, r0, #8
   275f0:	ldr	r0, [r4], #12
   275f4:	bl	13de4 <__assert_fail@plt+0x26e4>
   275f8:	subs	r9, r9, #1
   275fc:	bne	275f0 <__assert_fail@plt+0x15ef0>
   27600:	mov	r0, #1
   27604:	sub	sp, fp, #48	; 0x30
   27608:	vpop	{d8-d9}
   2760c:	add	sp, sp, #4
   27610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27614:	ldr	r0, [sp, #48]	; 0x30
   27618:	ldr	r5, [sp, #156]	; 0x9c
   2761c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   27620:	ldr	r0, [sp, #64]	; 0x40
   27624:	str	r0, [fp, #-1080]	; 0xfffffbc8
   27628:	ldr	r0, [sp, #60]	; 0x3c
   2762c:	str	r0, [fp, #-1072]	; 0xfffffbd0
   27630:	ldr	r0, [sp, #56]	; 0x38
   27634:	str	r0, [fp, #-1068]	; 0xfffffbd4
   27638:	ldr	r0, [sp, #52]	; 0x34
   2763c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27640:	sub	lr, fp, #6144	; 0x1800
   27644:	mov	r0, #0
   27648:	add	r1, r5, r5, lsl #1
   2764c:	sub	r2, lr, #104	; 0x68
   27650:	str	r0, [r4]
   27654:	str	r0, [r2, r1, lsl #2]
   27658:	cmp	r5, #1
   2765c:	blt	2767c <__assert_fail@plt+0x15f7c>
   27660:	sub	lr, fp, #6144	; 0x1800
   27664:	sub	r0, lr, #104	; 0x68
   27668:	add	r4, r0, #8
   2766c:	ldr	r0, [r4], #12
   27670:	bl	13de4 <__assert_fail@plt+0x26e4>
   27674:	subs	r5, r5, #1
   27678:	bne	2766c <__assert_fail@plt+0x15f6c>
   2767c:	mvn	r5, #0
   27680:	mov	r0, #0
   27684:	cmp	r5, #0
   27688:	beq	2769c <__assert_fail@plt+0x15f9c>
   2768c:	sub	sp, fp, #48	; 0x30
   27690:	vpop	{d8-d9}
   27694:	add	sp, sp, #4
   27698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2769c:	mov	r0, #4
   276a0:	mov	r1, #256	; 0x100
   276a4:	bl	2aa30 <__assert_fail@plt+0x19330>
   276a8:	ldr	r1, [sp, #88]	; 0x58
   276ac:	cmp	r0, #0
   276b0:	str	r0, [r1, #44]	; 0x2c
   276b4:	movwne	r0, #1
   276b8:	sub	sp, fp, #48	; 0x30
   276bc:	vpop	{d8-d9}
   276c0:	add	sp, sp, #4
   276c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   276c8:	mov	r0, #0
   276cc:	str	r0, [r6]
   276d0:	str	r0, [r5]
   276d4:	mov	r5, r4
   276d8:	cmp	r5, #1
   276dc:	bge	27660 <__assert_fail@plt+0x15f60>
   276e0:	b	2767c <__assert_fail@plt+0x15f7c>
   276e4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   276e8:	bl	13de4 <__assert_fail@plt+0x26e4>
   276ec:	b	2703c <__assert_fail@plt+0x1593c>
   276f0:	mov	r1, #512	; 0x200
   276f4:	bl	2aa30 <__assert_fail@plt+0x19330>
   276f8:	ldr	r1, [sp, #88]	; 0x58
   276fc:	ldr	r5, [sp, #156]	; 0x9c
   27700:	cmp	r0, #0
   27704:	str	r0, [r1, #48]	; 0x30
   27708:	beq	2702c <__assert_fail@plt+0x1592c>
   2770c:	ldr	ip, [fp, #-3176]	; 0xfffff398
   27710:	mov	r9, r5
   27714:	cmp	ip, #0
   27718:	beq	277a4 <__assert_fail@plt+0x160a4>
   2771c:	sub	lr, fp, #1024	; 0x400
   27720:	mov	r7, #0
   27724:	mov	r6, #1
   27728:	mov	r5, #0
   2772c:	sub	r1, lr, #56	; 0x38
   27730:	sub	lr, fp, #2048	; 0x800
   27734:	sub	r4, r1, #4
   27738:	sub	r1, lr, #56	; 0x38
   2773c:	sub	lr, r1, #4
   27740:	mov	r1, ip
   27744:	b	27784 <__assert_fail@plt+0x16084>
   27748:	add	r3, sp, #160	; 0xa0
   2774c:	mov	r9, r4
   27750:	mov	r8, lr
   27754:	ldr	r2, [r3], #32
   27758:	add	r9, r9, #4
   2775c:	add	r8, r8, #4
   27760:	tst	r2, r6
   27764:	beq	27754 <__assert_fail@plt+0x16054>
   27768:	ldr	r2, [r9]
   2776c:	mov	r3, r0
   27770:	str	r2, [r3, r5, lsl #2]!
   27774:	ldr	r2, [r8]
   27778:	ldr	r9, [sp, #156]	; 0x9c
   2777c:	str	r2, [r3, #1024]	; 0x400
   27780:	b	2778c <__assert_fail@plt+0x1608c>
   27784:	tst	r1, #1
   27788:	bne	27748 <__assert_fail@plt+0x16048>
   2778c:	lsr	r2, r1, #1
   27790:	cmp	r7, r1, lsr #1
   27794:	add	r5, r5, #1
   27798:	lsl	r6, r6, #1
   2779c:	mov	r1, r2
   277a0:	bne	27784 <__assert_fail@plt+0x16084>
   277a4:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   277a8:	cmp	r2, #0
   277ac:	beq	2783c <__assert_fail@plt+0x1613c>
   277b0:	add	r1, sp, #160	; 0xa0
   277b4:	sub	lr, fp, #2048	; 0x800
   277b8:	mov	r5, #32
   277bc:	mov	r3, #0
   277c0:	add	r4, r1, #4
   277c4:	sub	r1, lr, #56	; 0x38
   277c8:	sub	lr, r1, #4
   277cc:	sub	r1, fp, #1024	; 0x400
   277d0:	sub	r1, r1, #56	; 0x38
   277d4:	sub	r8, r1, #4
   277d8:	mov	r1, #1
   277dc:	b	2781c <__assert_fail@plt+0x1611c>
   277e0:	mov	r7, r4
   277e4:	mov	r9, lr
   277e8:	mov	sl, r8
   277ec:	ldr	r6, [r7], #32
   277f0:	add	r9, r9, #4
   277f4:	add	sl, sl, #4
   277f8:	tst	r6, r1
   277fc:	beq	277ec <__assert_fail@plt+0x160ec>
   27800:	ldr	r6, [sl]
   27804:	mov	r7, r0
   27808:	str	r6, [r7, r5, lsl #2]!
   2780c:	ldr	r6, [r9]
   27810:	ldr	r9, [sp, #156]	; 0x9c
   27814:	str	r6, [r7, #1024]	; 0x400
   27818:	b	27824 <__assert_fail@plt+0x16124>
   2781c:	tst	r2, #1
   27820:	bne	277e0 <__assert_fail@plt+0x160e0>
   27824:	lsr	r6, r2, #1
   27828:	cmp	r3, r2, lsr #1
   2782c:	add	r5, r5, #1
   27830:	lsl	r1, r1, #1
   27834:	mov	r2, r6
   27838:	bne	2781c <__assert_fail@plt+0x1611c>
   2783c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   27840:	cmp	r2, #0
   27844:	beq	278d4 <__assert_fail@plt+0x161d4>
   27848:	add	r1, sp, #160	; 0xa0
   2784c:	sub	lr, fp, #2048	; 0x800
   27850:	mov	r5, #64	; 0x40
   27854:	mov	r3, #0
   27858:	add	r4, r1, #8
   2785c:	sub	r1, lr, #56	; 0x38
   27860:	sub	lr, r1, #4
   27864:	sub	r1, fp, #1024	; 0x400
   27868:	sub	r1, r1, #56	; 0x38
   2786c:	sub	r8, r1, #4
   27870:	mov	r1, #1
   27874:	b	278b4 <__assert_fail@plt+0x161b4>
   27878:	mov	r7, r4
   2787c:	mov	r9, lr
   27880:	mov	sl, r8
   27884:	ldr	r6, [r7], #32
   27888:	add	r9, r9, #4
   2788c:	add	sl, sl, #4
   27890:	tst	r6, r1
   27894:	beq	27884 <__assert_fail@plt+0x16184>
   27898:	ldr	r6, [sl]
   2789c:	mov	r7, r0
   278a0:	str	r6, [r7, r5, lsl #2]!
   278a4:	ldr	r6, [r9]
   278a8:	ldr	r9, [sp, #156]	; 0x9c
   278ac:	str	r6, [r7, #1024]	; 0x400
   278b0:	b	278bc <__assert_fail@plt+0x161bc>
   278b4:	tst	r2, #1
   278b8:	bne	27878 <__assert_fail@plt+0x16178>
   278bc:	lsr	r6, r2, #1
   278c0:	cmp	r3, r2, lsr #1
   278c4:	add	r5, r5, #1
   278c8:	lsl	r1, r1, #1
   278cc:	mov	r2, r6
   278d0:	bne	278b4 <__assert_fail@plt+0x161b4>
   278d4:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   278d8:	cmp	r2, #0
   278dc:	beq	2796c <__assert_fail@plt+0x1626c>
   278e0:	add	r1, sp, #160	; 0xa0
   278e4:	sub	lr, fp, #2048	; 0x800
   278e8:	mov	r5, #96	; 0x60
   278ec:	mov	r3, #0
   278f0:	add	r4, r1, #12
   278f4:	sub	r1, lr, #56	; 0x38
   278f8:	sub	lr, r1, #4
   278fc:	sub	r1, fp, #1024	; 0x400
   27900:	sub	r1, r1, #56	; 0x38
   27904:	sub	r8, r1, #4
   27908:	mov	r1, #1
   2790c:	b	2794c <__assert_fail@plt+0x1624c>
   27910:	mov	r7, r4
   27914:	mov	r9, lr
   27918:	mov	sl, r8
   2791c:	ldr	r6, [r7], #32
   27920:	add	r9, r9, #4
   27924:	add	sl, sl, #4
   27928:	tst	r6, r1
   2792c:	beq	2791c <__assert_fail@plt+0x1621c>
   27930:	ldr	r6, [sl]
   27934:	mov	r7, r0
   27938:	str	r6, [r7, r5, lsl #2]!
   2793c:	ldr	r6, [r9]
   27940:	ldr	r9, [sp, #156]	; 0x9c
   27944:	str	r6, [r7, #1024]	; 0x400
   27948:	b	27954 <__assert_fail@plt+0x16254>
   2794c:	tst	r2, #1
   27950:	bne	27910 <__assert_fail@plt+0x16210>
   27954:	lsr	r6, r2, #1
   27958:	cmp	r3, r2, lsr #1
   2795c:	add	r5, r5, #1
   27960:	lsl	r1, r1, #1
   27964:	mov	r2, r6
   27968:	bne	2794c <__assert_fail@plt+0x1624c>
   2796c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   27970:	cmp	r2, #0
   27974:	beq	27a04 <__assert_fail@plt+0x16304>
   27978:	add	r1, sp, #160	; 0xa0
   2797c:	sub	lr, fp, #2048	; 0x800
   27980:	mov	r5, #128	; 0x80
   27984:	mov	r3, #0
   27988:	add	r4, r1, #16
   2798c:	sub	r1, lr, #56	; 0x38
   27990:	sub	lr, r1, #4
   27994:	sub	r1, fp, #1024	; 0x400
   27998:	sub	r1, r1, #56	; 0x38
   2799c:	sub	r8, r1, #4
   279a0:	mov	r1, #1
   279a4:	b	279e4 <__assert_fail@plt+0x162e4>
   279a8:	mov	r7, r4
   279ac:	mov	r9, lr
   279b0:	mov	sl, r8
   279b4:	ldr	r6, [r7], #32
   279b8:	add	r9, r9, #4
   279bc:	add	sl, sl, #4
   279c0:	tst	r6, r1
   279c4:	beq	279b4 <__assert_fail@plt+0x162b4>
   279c8:	ldr	r6, [sl]
   279cc:	mov	r7, r0
   279d0:	str	r6, [r7, r5, lsl #2]!
   279d4:	ldr	r6, [r9]
   279d8:	ldr	r9, [sp, #156]	; 0x9c
   279dc:	str	r6, [r7, #1024]	; 0x400
   279e0:	b	279ec <__assert_fail@plt+0x162ec>
   279e4:	tst	r2, #1
   279e8:	bne	279a8 <__assert_fail@plt+0x162a8>
   279ec:	lsr	r6, r2, #1
   279f0:	cmp	r3, r2, lsr #1
   279f4:	add	r5, r5, #1
   279f8:	lsl	r1, r1, #1
   279fc:	mov	r2, r6
   27a00:	bne	279e4 <__assert_fail@plt+0x162e4>
   27a04:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   27a08:	cmp	r2, #0
   27a0c:	beq	27a9c <__assert_fail@plt+0x1639c>
   27a10:	add	r1, sp, #160	; 0xa0
   27a14:	sub	lr, fp, #2048	; 0x800
   27a18:	mov	r5, #160	; 0xa0
   27a1c:	mov	r3, #0
   27a20:	add	r4, r1, #20
   27a24:	sub	r1, lr, #56	; 0x38
   27a28:	sub	lr, r1, #4
   27a2c:	sub	r1, fp, #1024	; 0x400
   27a30:	sub	r1, r1, #56	; 0x38
   27a34:	sub	r8, r1, #4
   27a38:	mov	r1, #1
   27a3c:	b	27a7c <__assert_fail@plt+0x1637c>
   27a40:	mov	r7, r4
   27a44:	mov	r9, lr
   27a48:	mov	sl, r8
   27a4c:	ldr	r6, [r7], #32
   27a50:	add	r9, r9, #4
   27a54:	add	sl, sl, #4
   27a58:	tst	r6, r1
   27a5c:	beq	27a4c <__assert_fail@plt+0x1634c>
   27a60:	ldr	r6, [sl]
   27a64:	mov	r7, r0
   27a68:	str	r6, [r7, r5, lsl #2]!
   27a6c:	ldr	r6, [r9]
   27a70:	ldr	r9, [sp, #156]	; 0x9c
   27a74:	str	r6, [r7, #1024]	; 0x400
   27a78:	b	27a84 <__assert_fail@plt+0x16384>
   27a7c:	tst	r2, #1
   27a80:	bne	27a40 <__assert_fail@plt+0x16340>
   27a84:	lsr	r6, r2, #1
   27a88:	cmp	r3, r2, lsr #1
   27a8c:	add	r5, r5, #1
   27a90:	lsl	r1, r1, #1
   27a94:	mov	r2, r6
   27a98:	bne	27a7c <__assert_fail@plt+0x1637c>
   27a9c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   27aa0:	cmp	r2, #0
   27aa4:	beq	27b34 <__assert_fail@plt+0x16434>
   27aa8:	add	r1, sp, #160	; 0xa0
   27aac:	sub	lr, fp, #2048	; 0x800
   27ab0:	mov	r5, #192	; 0xc0
   27ab4:	mov	r3, #0
   27ab8:	add	r4, r1, #24
   27abc:	sub	r1, lr, #56	; 0x38
   27ac0:	sub	lr, r1, #4
   27ac4:	sub	r1, fp, #1024	; 0x400
   27ac8:	sub	r1, r1, #56	; 0x38
   27acc:	sub	r8, r1, #4
   27ad0:	mov	r1, #1
   27ad4:	b	27b14 <__assert_fail@plt+0x16414>
   27ad8:	mov	r7, r4
   27adc:	mov	r9, lr
   27ae0:	mov	sl, r8
   27ae4:	ldr	r6, [r7], #32
   27ae8:	add	r9, r9, #4
   27aec:	add	sl, sl, #4
   27af0:	tst	r6, r1
   27af4:	beq	27ae4 <__assert_fail@plt+0x163e4>
   27af8:	ldr	r6, [sl]
   27afc:	mov	r7, r0
   27b00:	str	r6, [r7, r5, lsl #2]!
   27b04:	ldr	r6, [r9]
   27b08:	ldr	r9, [sp, #156]	; 0x9c
   27b0c:	str	r6, [r7, #1024]	; 0x400
   27b10:	b	27b1c <__assert_fail@plt+0x1641c>
   27b14:	tst	r2, #1
   27b18:	bne	27ad8 <__assert_fail@plt+0x163d8>
   27b1c:	lsr	r6, r2, #1
   27b20:	cmp	r3, r2, lsr #1
   27b24:	add	r5, r5, #1
   27b28:	lsl	r1, r1, #1
   27b2c:	mov	r2, r6
   27b30:	bne	27b14 <__assert_fail@plt+0x16414>
   27b34:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   27b38:	cmp	r2, #0
   27b3c:	beq	27bcc <__assert_fail@plt+0x164cc>
   27b40:	add	r1, sp, #160	; 0xa0
   27b44:	sub	lr, fp, #2048	; 0x800
   27b48:	mov	r5, #224	; 0xe0
   27b4c:	mov	r3, #0
   27b50:	add	r4, r1, #28
   27b54:	sub	r1, lr, #56	; 0x38
   27b58:	sub	lr, r1, #4
   27b5c:	sub	r1, fp, #1024	; 0x400
   27b60:	sub	r1, r1, #56	; 0x38
   27b64:	sub	r8, r1, #4
   27b68:	mov	r1, #1
   27b6c:	b	27bac <__assert_fail@plt+0x164ac>
   27b70:	mov	r7, r4
   27b74:	mov	r9, lr
   27b78:	mov	sl, r8
   27b7c:	ldr	r6, [r7], #32
   27b80:	add	r9, r9, #4
   27b84:	add	sl, sl, #4
   27b88:	tst	r6, r1
   27b8c:	beq	27b7c <__assert_fail@plt+0x1647c>
   27b90:	ldr	r6, [sl]
   27b94:	mov	r7, r0
   27b98:	str	r6, [r7, r5, lsl #2]!
   27b9c:	ldr	r6, [r9]
   27ba0:	ldr	r9, [sp, #156]	; 0x9c
   27ba4:	str	r6, [r7, #1024]	; 0x400
   27ba8:	b	27bb4 <__assert_fail@plt+0x164b4>
   27bac:	tst	r2, #1
   27bb0:	bne	27b70 <__assert_fail@plt+0x16470>
   27bb4:	lsr	r6, r2, #1
   27bb8:	cmp	r3, r2, lsr #1
   27bbc:	add	r5, r5, #1
   27bc0:	lsl	r1, r1, #1
   27bc4:	mov	r2, r6
   27bc8:	bne	27bac <__assert_fail@plt+0x164ac>
   27bcc:	ldr	r8, [sp, #124]	; 0x7c
   27bd0:	add	r4, sp, #160	; 0xa0
   27bd4:	tst	ip, #1024	; 0x400
   27bd8:	bne	275a0 <__assert_fail@plt+0x15ea0>
   27bdc:	b	275dc <__assert_fail@plt+0x15edc>
   27be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27be4:	add	fp, sp, #28
   27be8:	sub	sp, sp, #68	; 0x44
   27bec:	ldr	r4, [r1, #8]
   27bf0:	ldr	r6, [r1, #12]
   27bf4:	mov	r8, r0
   27bf8:	mov	r0, #1
   27bfc:	mov	r5, r1
   27c00:	str	r0, [fp, #-36]	; 0xffffffdc
   27c04:	str	r0, [fp, #-40]	; 0xffffffd8
   27c08:	mov	r0, #4
   27c0c:	bl	2aa84 <__assert_fail@plt+0x19384>
   27c10:	cmp	r0, #0
   27c14:	str	r0, [fp, #-32]	; 0xffffffe0
   27c18:	beq	282ac <__assert_fail@plt+0x16bac>
   27c1c:	str	r4, [r0]
   27c20:	sub	r3, fp, #40	; 0x28
   27c24:	mov	r0, r8
   27c28:	mov	r1, r5
   27c2c:	mov	r2, r6
   27c30:	str	r5, [sp, #28]
   27c34:	bl	282d0 <__assert_fail@plt+0x16bd0>
   27c38:	cmp	r0, #0
   27c3c:	bne	28264 <__assert_fail@plt+0x16b64>
   27c40:	mov	r4, r6
   27c44:	mov	r9, #1
   27c48:	mov	r1, #0
   27c4c:	str	r8, [sp, #48]	; 0x30
   27c50:	cmp	r4, #1
   27c54:	blt	2826c <__assert_fail@plt+0x16b6c>
   27c58:	ldr	lr, [sp, #28]
   27c5c:	ldr	r0, [lr]
   27c60:	ldr	r2, [r0, r4, lsl #2]
   27c64:	cmp	r2, #0
   27c68:	mov	r2, #0
   27c6c:	addeq	r2, r1, #1
   27c70:	ldr	r1, [r8, #120]	; 0x78
   27c74:	cmp	r2, r1
   27c78:	bgt	28274 <__assert_fail@plt+0x16b74>
   27c7c:	mov	r0, #0
   27c80:	str	r4, [sp, #36]	; 0x24
   27c84:	sub	r4, r4, #1
   27c88:	str	r2, [sp, #4]
   27c8c:	str	r0, [fp, #-36]	; 0xffffffdc
   27c90:	ldr	r0, [r8, #100]	; 0x64
   27c94:	ldr	r1, [r0, r4, lsl #2]
   27c98:	cmp	r1, #0
   27c9c:	beq	28244 <__assert_fail@plt+0x16b44>
   27ca0:	ldr	r0, [r1, #20]
   27ca4:	cmp	r0, #1
   27ca8:	blt	28244 <__assert_fail@plt+0x16b44>
   27cac:	ldr	r0, [r8, #84]	; 0x54
   27cb0:	mov	r2, #0
   27cb4:	str	r4, [sp, #32]
   27cb8:	str	r1, [sp, #16]
   27cbc:	str	r0, [sp, #24]
   27cc0:	b	27d80 <__assert_fail@plt+0x16680>
   27cc4:	cmp	r2, r1
   27cc8:	bne	27d04 <__assert_fail@plt+0x16604>
   27ccc:	lsl	r0, r2, #1
   27cd0:	lsl	r1, r2, #3
   27cd4:	str	r0, [fp, #-40]	; 0xffffffd8
   27cd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27cdc:	bl	2aab4 <__assert_fail@plt+0x193b4>
   27ce0:	cmp	r0, #0
   27ce4:	beq	282c8 <__assert_fail@plt+0x16bc8>
   27ce8:	str	r0, [fp, #-32]	; 0xffffffe0
   27cec:	ldr	lr, [sp, #28]
   27cf0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   27cf4:	ldr	r2, [r0]
   27cf8:	cmp	r2, r5
   27cfc:	bgt	27d14 <__assert_fail@plt+0x16614>
   27d00:	b	27d48 <__assert_fail@plt+0x16648>
   27d04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   27d08:	ldr	r2, [r0]
   27d0c:	cmp	r2, r5
   27d10:	ble	27d48 <__assert_fail@plt+0x16648>
   27d14:	cmp	r1, #1
   27d18:	blt	27d78 <__assert_fail@plt+0x16678>
   27d1c:	add	r2, r0, r1, lsl #2
   27d20:	add	r1, r1, #1
   27d24:	mov	r3, r2
   27d28:	ldr	r7, [r3, #-4]!
   27d2c:	sub	r1, r1, #1
   27d30:	cmp	r1, #1
   27d34:	str	r7, [r2]
   27d38:	mov	r2, r3
   27d3c:	bgt	27d28 <__assert_fail@plt+0x16628>
   27d40:	sub	r1, r1, #1
   27d44:	b	27d78 <__assert_fail@plt+0x16678>
   27d48:	add	r2, r0, r1, lsl #2
   27d4c:	ldr	r3, [r2, #-4]
   27d50:	cmp	r3, r5
   27d54:	ble	27d78 <__assert_fail@plt+0x16678>
   27d58:	sub	r1, r1, #2
   27d5c:	str	r3, [r2]
   27d60:	sub	r1, r1, #1
   27d64:	ldr	r3, [r2, #-8]
   27d68:	sub	r2, r2, #4
   27d6c:	cmp	r3, r5
   27d70:	bgt	27d5c <__assert_fail@plt+0x1665c>
   27d74:	add	r1, r1, #2
   27d78:	str	r5, [r0, r1, lsl #2]
   27d7c:	b	281f4 <__assert_fail@plt+0x16af4>
   27d80:	ldr	r0, [r1, #24]
   27d84:	str	r2, [sp, #20]
   27d88:	ldr	r2, [r0, r2, lsl #2]
   27d8c:	ldr	r0, [sp, #24]
   27d90:	ldr	r0, [r0]
   27d94:	mov	r1, r2
   27d98:	str	r2, [fp, #-44]	; 0xffffffd4
   27d9c:	add	r0, r0, r2, lsl #3
   27da0:	ldrb	r0, [r0, #6]
   27da4:	tst	r0, #16
   27da8:	bne	27e48 <__assert_fail@plt+0x16748>
   27dac:	ldr	r0, [sp, #24]
   27db0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   27db4:	mov	r2, r4
   27db8:	ldr	r0, [r0]
   27dbc:	add	r1, r0, r1, lsl #3
   27dc0:	mov	r0, r8
   27dc4:	bl	25c28 <__assert_fail@plt+0x14528>
   27dc8:	ldr	lr, [sp, #28]
   27dcc:	cmp	r0, #0
   27dd0:	beq	2822c <__assert_fail@plt+0x16b2c>
   27dd4:	ldr	r0, [lr]
   27dd8:	ldr	r1, [sp, #36]	; 0x24
   27ddc:	ldr	r0, [r0, r1, lsl #2]
   27de0:	cmp	r0, #0
   27de4:	beq	2822c <__assert_fail@plt+0x16b2c>
   27de8:	ldr	r2, [r0, #8]
   27dec:	cmp	r2, #1
   27df0:	blt	2822c <__assert_fail@plt+0x16b2c>
   27df4:	ldr	r1, [sp, #24]
   27df8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   27dfc:	ldr	r0, [r0, #12]
   27e00:	ldr	r1, [r1, #12]
   27e04:	ldr	r1, [r1, r3, lsl #2]
   27e08:	subs	r3, r2, #1
   27e0c:	mov	r2, #0
   27e10:	beq	27e34 <__assert_fail@plt+0x16734>
   27e14:	add	r7, r2, r3
   27e18:	lsr	r6, r7, #1
   27e1c:	ldr	r5, [r0, r6, lsl #2]
   27e20:	cmp	r5, r1
   27e24:	movge	r3, r6
   27e28:	addlt	r2, r9, r7, lsr #1
   27e2c:	cmp	r2, r3
   27e30:	bcc	27e14 <__assert_fail@plt+0x16714>
   27e34:	ldr	r2, [r0, r2, lsl #2]
   27e38:	mov	r0, #1
   27e3c:	cmp	r2, r1
   27e40:	beq	27ea4 <__assert_fail@plt+0x167a4>
   27e44:	b	2822c <__assert_fail@plt+0x16b2c>
   27e48:	ldr	r7, [r8, #84]	; 0x54
   27e4c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   27e50:	mov	r5, r4
   27e54:	ldr	r4, [lr, #12]
   27e58:	mov	r2, r8
   27e5c:	mov	r3, r5
   27e60:	mov	r0, r7
   27e64:	bl	25910 <__assert_fail@plt+0x14210>
   27e68:	cmp	r0, #1
   27e6c:	blt	27e94 <__assert_fail@plt+0x16794>
   27e70:	add	r1, r0, r5
   27e74:	cmp	r1, r4
   27e78:	ble	27f4c <__assert_fail@plt+0x1684c>
   27e7c:	ldr	lr, [sp, #28]
   27e80:	ldr	r4, [sp, #32]
   27e84:	ldr	ip, [lr, #20]
   27e88:	cmp	ip, #0
   27e8c:	bne	27eb0 <__assert_fail@plt+0x167b0>
   27e90:	b	281d0 <__assert_fail@plt+0x16ad0>
   27e94:	ldr	lr, [sp, #28]
   27e98:	cmp	r0, #0
   27e9c:	mov	r4, r5
   27ea0:	beq	27dac <__assert_fail@plt+0x166ac>
   27ea4:	ldr	ip, [lr, #20]
   27ea8:	cmp	ip, #0
   27eac:	beq	281d0 <__assert_fail@plt+0x16ad0>
   27eb0:	add	r0, r0, r4
   27eb4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   27eb8:	str	r0, [sp, #40]	; 0x28
   27ebc:	ldr	r0, [sp, #24]
   27ec0:	ldr	r0, [r0, #12]
   27ec4:	ldr	r0, [r0, r1, lsl #2]
   27ec8:	str	r0, [sp, #8]
   27ecc:	ldr	r0, [r8, #108]	; 0x6c
   27ed0:	cmp	r0, #1
   27ed4:	blt	27fc8 <__assert_fail@plt+0x168c8>
   27ed8:	ldr	r2, [r8, #116]	; 0x74
   27edc:	ldr	r1, [sp, #40]	; 0x28
   27ee0:	mov	sl, #0
   27ee4:	mov	r3, r0
   27ee8:	add	r7, r3, sl
   27eec:	add	r7, r7, r7, lsr #31
   27ef0:	asr	r6, r7, #1
   27ef4:	add	r5, r6, r6, lsl #1
   27ef8:	add	r5, r2, r5, lsl #3
   27efc:	ldr	r5, [r5, #4]
   27f00:	cmp	r5, r1
   27f04:	addlt	sl, r9, r7, asr #1
   27f08:	movge	r3, r6
   27f0c:	cmp	sl, r3
   27f10:	blt	27ee8 <__assert_fail@plt+0x167e8>
   27f14:	cmp	sl, r0
   27f18:	bge	27fd8 <__assert_fail@plt+0x168d8>
   27f1c:	ldr	r2, [r8, #116]	; 0x74
   27f20:	add	r3, sl, sl, lsl #1
   27f24:	add	r2, r2, r3, lsl #3
   27f28:	ldr	r2, [r2, #4]
   27f2c:	cmp	r2, r1
   27f30:	mvnne	sl, #0
   27f34:	cmp	r0, #1
   27f38:	bge	27fe4 <__assert_fail@plt+0x168e4>
   27f3c:	mov	r5, #0
   27f40:	cmp	r5, r0
   27f44:	blt	28024 <__assert_fail@plt+0x16924>
   27f48:	b	28048 <__assert_fail@plt+0x16948>
   27f4c:	ldr	lr, [sp, #28]
   27f50:	ldr	r4, [sp, #32]
   27f54:	ldr	r2, [lr]
   27f58:	ldr	r2, [r2, r1, lsl #2]
   27f5c:	cmp	r2, #0
   27f60:	beq	27dac <__assert_fail@plt+0x166ac>
   27f64:	ldr	r3, [r2, #8]
   27f68:	cmp	r3, #1
   27f6c:	blt	27dac <__assert_fail@plt+0x166ac>
   27f70:	ldr	r1, [r7, #12]
   27f74:	ldr	r7, [fp, #-44]	; 0xffffffd4
   27f78:	ldr	r2, [r2, #12]
   27f7c:	ldr	r1, [r1, r7, lsl #2]
   27f80:	subs	r7, r3, #1
   27f84:	mov	r3, #0
   27f88:	beq	27fac <__assert_fail@plt+0x168ac>
   27f8c:	add	r6, r3, r7
   27f90:	lsr	r5, r6, #1
   27f94:	ldr	r4, [r2, r5, lsl #2]
   27f98:	cmp	r4, r1
   27f9c:	movge	r7, r5
   27fa0:	addlt	r3, r9, r6, lsr #1
   27fa4:	cmp	r3, r7
   27fa8:	bcc	27f8c <__assert_fail@plt+0x1688c>
   27fac:	ldr	r4, [sp, #32]
   27fb0:	cmp	r0, #0
   27fb4:	beq	27dac <__assert_fail@plt+0x166ac>
   27fb8:	ldr	r2, [r2, r3, lsl #2]
   27fbc:	cmp	r2, r1
   27fc0:	beq	27ea4 <__assert_fail@plt+0x167a4>
   27fc4:	b	27dac <__assert_fail@plt+0x166ac>
   27fc8:	ldr	r1, [sp, #40]	; 0x28
   27fcc:	mov	sl, #0
   27fd0:	cmp	sl, r0
   27fd4:	blt	27f1c <__assert_fail@plt+0x1681c>
   27fd8:	mvn	sl, #0
   27fdc:	cmp	r0, #1
   27fe0:	blt	27f3c <__assert_fail@plt+0x1683c>
   27fe4:	ldr	r2, [r8, #116]	; 0x74
   27fe8:	mov	r5, #0
   27fec:	mov	r3, r0
   27ff0:	add	r7, r3, r5
   27ff4:	add	r7, r7, r7, lsr #31
   27ff8:	asr	r6, r7, #1
   27ffc:	add	r1, r6, r6, lsl #1
   28000:	add	r1, r2, r1, lsl #3
   28004:	ldr	r1, [r1, #4]
   28008:	cmp	r1, r4
   2800c:	addlt	r5, r9, r7, asr #1
   28010:	movge	r3, r6
   28014:	cmp	r5, r3
   28018:	blt	27ff0 <__assert_fail@plt+0x168f0>
   2801c:	cmp	r5, r0
   28020:	bge	28048 <__assert_fail@plt+0x16948>
   28024:	ldr	r0, [r8, #116]	; 0x74
   28028:	add	r1, r5, r5, lsl #1
   2802c:	add	r0, r0, r1, lsl #3
   28030:	ldr	r0, [r0, #4]
   28034:	cmp	r0, r4
   28038:	mvnne	r5, #0
   2803c:	cmp	ip, #1
   28040:	bge	28054 <__assert_fail@plt+0x16954>
   28044:	b	281d0 <__assert_fail@plt+0x16ad0>
   28048:	mvn	r5, #0
   2804c:	cmp	ip, #1
   28050:	blt	281d0 <__assert_fail@plt+0x16ad0>
   28054:	ldr	ip, [r8, #84]	; 0x54
   28058:	mov	r6, #0
   2805c:	str	ip, [sp, #12]
   28060:	ldr	r0, [lr, #24]
   28064:	ldr	r3, [r8, #116]	; 0x74
   28068:	ldr	r4, [ip]
   2806c:	mvn	r8, #0
   28070:	ldr	r2, [r0, r6, lsl #2]
   28074:	mov	r0, r3
   28078:	add	r1, r2, r2, lsl #1
   2807c:	ldr	r7, [r0, r1, lsl #3]!
   28080:	ldr	r4, [r4, r7, lsl #3]
   28084:	ldr	r0, [r0, #8]
   28088:	ldr	r7, [sp, #40]	; 0x28
   2808c:	cmp	r0, r7
   28090:	str	r4, [sp, #44]	; 0x2c
   28094:	ble	280b0 <__assert_fail@plt+0x169b0>
   28098:	mvn	r9, #0
   2809c:	ldr	r1, [sp, #36]	; 0x24
   280a0:	ldr	r4, [sp, #32]
   280a4:	cmp	r0, r1
   280a8:	blt	28134 <__assert_fail@plt+0x16a34>
   280ac:	b	281b0 <__assert_fail@plt+0x16ab0>
   280b0:	add	r1, r3, r1, lsl #3
   280b4:	mov	r9, #1
   280b8:	ldr	r1, [r1, #12]
   280bc:	cmp	r1, r7
   280c0:	blt	28124 <__assert_fail@plt+0x16a24>
   280c4:	sub	r1, r1, r7
   280c8:	cmp	r0, r7
   280cc:	mov	r7, #1
   280d0:	clz	r1, r1
   280d4:	lsr	r4, r1, #5
   280d8:	lsl	r1, r4, #1
   280dc:	orreq	r1, r7, r4, lsl #1
   280e0:	cmp	r1, #0
   280e4:	beq	28194 <__assert_fail@plt+0x16a94>
   280e8:	ldr	r4, [sp, #48]	; 0x30
   280ec:	ldr	r2, [sp, #44]	; 0x2c
   280f0:	ldr	r3, [sp, #8]
   280f4:	str	sl, [sp]
   280f8:	mov	r0, r4
   280fc:	bl	29810 <__assert_fail@plt+0x18110>
   28100:	ldr	lr, [sp, #28]
   28104:	mov	r9, r0
   28108:	ldr	r3, [r4, #116]	; 0x74
   2810c:	ldr	ip, [sp, #12]
   28110:	ldr	r0, [lr, #24]
   28114:	ldr	r2, [r0, r6, lsl #2]
   28118:	add	r0, r2, r2, lsl #1
   2811c:	add	r0, r3, r0, lsl #3
   28120:	ldr	r0, [r0, #8]
   28124:	ldr	r1, [sp, #36]	; 0x24
   28128:	ldr	r4, [sp, #32]
   2812c:	cmp	r0, r1
   28130:	bge	281b0 <__assert_fail@plt+0x16ab0>
   28134:	add	r1, r2, r2, lsl #1
   28138:	mov	r8, #1
   2813c:	add	r1, r3, r1, lsl #3
   28140:	ldr	r1, [r1, #12]
   28144:	cmp	r1, r4
   28148:	blt	281b0 <__assert_fail@plt+0x16ab0>
   2814c:	sub	r1, r1, r4
   28150:	cmp	r0, r4
   28154:	mov	r0, #1
   28158:	clz	r1, r1
   2815c:	lsr	r2, r1, #5
   28160:	lsl	r1, r2, #1
   28164:	orreq	r1, r0, r2, lsl #1
   28168:	cmp	r1, #0
   2816c:	beq	281ac <__assert_fail@plt+0x16aac>
   28170:	ldr	r0, [sp, #48]	; 0x30
   28174:	ldr	r2, [sp, #44]	; 0x2c
   28178:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2817c:	str	r5, [sp]
   28180:	bl	29810 <__assert_fail@plt+0x18110>
   28184:	ldr	ip, [sp, #12]
   28188:	ldr	lr, [sp, #28]
   2818c:	mov	r8, r0
   28190:	b	281b0 <__assert_fail@plt+0x16ab0>
   28194:	mov	r9, #0
   28198:	ldr	r1, [sp, #36]	; 0x24
   2819c:	ldr	r4, [sp, #32]
   281a0:	cmp	r0, r1
   281a4:	blt	28134 <__assert_fail@plt+0x16a34>
   281a8:	b	281b0 <__assert_fail@plt+0x16ab0>
   281ac:	mov	r8, #0
   281b0:	cmp	r8, r9
   281b4:	ldr	r8, [sp, #48]	; 0x30
   281b8:	mov	r9, #1
   281bc:	bne	2822c <__assert_fail@plt+0x16b2c>
   281c0:	ldr	r0, [lr, #20]
   281c4:	add	r6, r6, #1
   281c8:	cmp	r6, r0
   281cc:	blt	28060 <__assert_fail@plt+0x16960>
   281d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   281d4:	cmp	r2, #0
   281d8:	beq	28204 <__assert_fail@plt+0x16b04>
   281dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   281e0:	ldr	r5, [fp, #-44]	; 0xffffffd4
   281e4:	cmp	r1, #0
   281e8:	bne	27cc4 <__assert_fail@plt+0x165c4>
   281ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   281f0:	str	r5, [r0]
   281f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   281f8:	add	r0, r0, #1
   281fc:	str	r0, [fp, #-36]	; 0xffffffdc
   28200:	b	2822c <__assert_fail@plt+0x16b2c>
   28204:	mov	r0, #4
   28208:	str	r9, [fp, #-36]	; 0xffffffdc
   2820c:	str	r9, [fp, #-40]	; 0xffffffd8
   28210:	bl	2aa84 <__assert_fail@plt+0x19384>
   28214:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28218:	cmp	r0, #0
   2821c:	str	r0, [fp, #-32]	; 0xffffffe0
   28220:	beq	28298 <__assert_fail@plt+0x16b98>
   28224:	ldr	lr, [sp, #28]
   28228:	str	r1, [r0]
   2822c:	ldr	r1, [sp, #16]
   28230:	ldr	r2, [sp, #20]
   28234:	ldr	r0, [r1, #20]
   28238:	add	r2, r2, #1
   2823c:	cmp	r2, r0
   28240:	blt	27d80 <__assert_fail@plt+0x16680>
   28244:	mov	r0, r8
   28248:	mov	r1, lr
   2824c:	mov	r2, r4
   28250:	sub	r3, fp, #40	; 0x28
   28254:	bl	282d0 <__assert_fail@plt+0x16bd0>
   28258:	ldr	r1, [sp, #4]
   2825c:	cmp	r0, #0
   28260:	beq	27c50 <__assert_fail@plt+0x16550>
   28264:	mov	r7, r0
   28268:	b	28284 <__assert_fail@plt+0x16b84>
   2826c:	mov	r7, #0
   28270:	b	28284 <__assert_fail@plt+0x16b84>
   28274:	lsl	r2, r4, #2
   28278:	mov	r1, #0
   2827c:	mov	r7, #0
   28280:	bl	11610 <memset@plt>
   28284:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28288:	bl	13de4 <__assert_fail@plt+0x26e4>
   2828c:	mov	r0, r7
   28290:	sub	sp, fp, #28
   28294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28298:	mov	r0, #0
   2829c:	mov	r7, #12
   282a0:	str	r0, [fp, #-40]	; 0xffffffd8
   282a4:	str	r0, [fp, #-36]	; 0xffffffdc
   282a8:	b	28284 <__assert_fail@plt+0x16b84>
   282ac:	mov	r0, #0
   282b0:	mov	r7, #12
   282b4:	str	r0, [fp, #-40]	; 0xffffffd8
   282b8:	str	r0, [fp, #-36]	; 0xffffffdc
   282bc:	mov	r0, r7
   282c0:	sub	sp, fp, #28
   282c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282c8:	mov	r7, #12
   282cc:	b	28284 <__assert_fail@plt+0x16b84>
   282d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   282d4:	add	fp, sp, #28
   282d8:	sub	sp, sp, #140	; 0x8c
   282dc:	mov	r9, r3
   282e0:	mov	r3, #0
   282e4:	ldr	r6, [r0, #84]	; 0x54
   282e8:	mov	r4, r1
   282ec:	str	r2, [fp, #-80]	; 0xffffffb0
   282f0:	str	r0, [sp, #64]	; 0x40
   282f4:	str	r3, [fp, #-76]	; 0xffffffb4
   282f8:	str	r4, [sp, #80]	; 0x50
   282fc:	ldr	r1, [r0, #100]	; 0x64
   28300:	ldr	r7, [r1, r2, lsl #2]
   28304:	cmp	r7, #0
   28308:	mov	r1, r7
   2830c:	addne	r1, r1, #4
   28310:	str	r1, [sp, #68]	; 0x44
   28314:	ldr	r1, [r9, #4]
   28318:	cmp	r1, #0
   2831c:	beq	28734 <__assert_fail@plt+0x17034>
   28320:	cmp	r7, #0
   28324:	beq	286fc <__assert_fail@plt+0x16ffc>
   28328:	mov	r0, #0
   2832c:	mov	r1, r6
   28330:	mov	r2, r9
   28334:	str	r9, [sp, #60]	; 0x3c
   28338:	str	r0, [fp, #-72]	; 0xffffffb8
   2833c:	sub	r0, fp, #72	; 0x48
   28340:	bl	25670 <__assert_fail@plt+0x13f70>
   28344:	ldr	r9, [fp, #-72]	; 0xffffffb8
   28348:	cmp	r9, #0
   2834c:	bne	2914c <__assert_fail@plt+0x17a4c>
   28350:	mov	r4, r0
   28354:	mov	r5, r0
   28358:	str	r6, [sp, #76]	; 0x4c
   2835c:	ldr	r0, [r4, #28]!
   28360:	cmp	r0, #0
   28364:	bne	283f8 <__assert_fail@plt+0x16cf8>
   28368:	ldr	r8, [sp, #60]	; 0x3c
   2836c:	mov	r6, #0
   28370:	ldr	r0, [r8, #4]
   28374:	str	r0, [r5, #28]
   28378:	lsl	r0, r0, #2
   2837c:	str	r6, [r5, #32]
   28380:	bl	2aa84 <__assert_fail@plt+0x19384>
   28384:	cmp	r0, #0
   28388:	mov	r9, #12
   2838c:	str	r0, [r5, #36]	; 0x24
   28390:	movweq	r6, #12
   28394:	str	r6, [fp, #-72]	; 0xffffffb8
   28398:	beq	2914c <__assert_fail@plt+0x17a4c>
   2839c:	ldr	r0, [r8, #4]
   283a0:	ldr	r6, [sp, #76]	; 0x4c
   283a4:	cmp	r0, #1
   283a8:	blt	283f8 <__assert_fail@plt+0x16cf8>
   283ac:	ldr	r6, [sp, #60]	; 0x3c
   283b0:	mov	r5, #0
   283b4:	ldr	r0, [r6, #8]
   283b8:	ldr	r1, [sp, #76]	; 0x4c
   283bc:	ldr	r0, [r0, r5, lsl #2]
   283c0:	ldr	r1, [r1, #28]
   283c4:	add	r0, r0, r0, lsl #1
   283c8:	add	r1, r1, r0, lsl #2
   283cc:	mov	r0, r4
   283d0:	bl	214cc <__assert_fail@plt+0xfdcc>
   283d4:	cmp	r0, #0
   283d8:	bne	29148 <__assert_fail@plt+0x17a48>
   283dc:	ldr	r0, [r6, #4]
   283e0:	add	r5, r5, #1
   283e4:	cmp	r5, r0
   283e8:	blt	283b4 <__assert_fail@plt+0x16cb4>
   283ec:	ldr	r6, [sp, #76]	; 0x4c
   283f0:	mov	r0, #0
   283f4:	str	r0, [fp, #-72]	; 0xffffffb8
   283f8:	ldr	r5, [sp, #68]	; 0x44
   283fc:	ldr	r0, [sp, #60]	; 0x3c
   28400:	mov	r2, r4
   28404:	mov	r1, r5
   28408:	bl	291b4 <__assert_fail@plt+0x17ab4>
   2840c:	cmp	r0, #0
   28410:	str	r0, [fp, #-76]	; 0xffffffb4
   28414:	bne	29170 <__assert_fail@plt+0x17a70>
   28418:	ldr	r4, [sp, #80]	; 0x50
   2841c:	ldr	r9, [sp, #60]	; 0x3c
   28420:	ldr	r0, [r4, #20]
   28424:	cmp	r0, #0
   28428:	beq	286fc <__assert_fail@plt+0x16ffc>
   2842c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   28430:	cmp	r0, #1
   28434:	str	r7, [sp, #56]	; 0x38
   28438:	blt	286f0 <__assert_fail@plt+0x16ff0>
   2843c:	ldr	r0, [sp, #64]	; 0x40
   28440:	mov	r1, #0
   28444:	ldr	r0, [r0, #116]	; 0x74
   28448:	str	r0, [sp, #72]	; 0x48
   2844c:	ldr	r0, [r4, #24]
   28450:	str	r1, [sp, #84]	; 0x54
   28454:	ldr	r0, [r0, r1, lsl #2]
   28458:	ldr	r1, [sp, #72]	; 0x48
   2845c:	add	r0, r0, r0, lsl #1
   28460:	add	r1, r1, r0, lsl #3
   28464:	ldr	r2, [r1, #8]
   28468:	cmp	r2, lr
   2846c:	bge	286dc <__assert_fail@plt+0x16fdc>
   28470:	ldr	r1, [r1, #4]
   28474:	cmp	r1, lr
   28478:	blt	286dc <__assert_fail@plt+0x16fdc>
   2847c:	ldr	r1, [sp, #72]	; 0x48
   28480:	ldr	r2, [r6]
   28484:	ldr	r0, [r1, r0, lsl #3]!
   28488:	ldr	r1, [r1, #12]
   2848c:	ldr	sl, [r2, r0, lsl #3]
   28490:	ldr	r0, [r9, #4]
   28494:	cmp	r1, lr
   28498:	bne	28660 <__assert_fail@plt+0x16f60>
   2849c:	cmp	r0, #1
   284a0:	blt	286dc <__assert_fail@plt+0x16fdc>
   284a4:	ldr	r3, [r9, #8]
   284a8:	mvn	r8, #0
   284ac:	mvn	r1, #0
   284b0:	ldr	r7, [r3]
   284b4:	add	r6, r2, r7, lsl #3
   284b8:	ldrb	r6, [r6, #4]
   284bc:	cmp	r6, #9
   284c0:	beq	284e8 <__assert_fail@plt+0x16de8>
   284c4:	cmp	r6, #8
   284c8:	bne	284d8 <__assert_fail@plt+0x16dd8>
   284cc:	ldr	r6, [r2, r7, lsl #3]
   284d0:	cmp	sl, r6
   284d4:	moveq	r1, r7
   284d8:	add	r3, r3, #4
   284dc:	subs	r0, r0, #1
   284e0:	bne	284b0 <__assert_fail@plt+0x16db0>
   284e4:	b	28500 <__assert_fail@plt+0x16e00>
   284e8:	ldr	r6, [r2, r7, lsl #3]
   284ec:	cmp	sl, r6
   284f0:	moveq	r8, r7
   284f4:	add	r3, r3, #4
   284f8:	subs	r0, r0, #1
   284fc:	bne	284b0 <__assert_fail@plt+0x16db0>
   28500:	ldr	r6, [sp, #76]	; 0x4c
   28504:	cmp	r1, #0
   28508:	blt	28528 <__assert_fail@plt+0x16e28>
   2850c:	ldr	r2, [sp, #60]	; 0x3c
   28510:	mov	r0, r6
   28514:	mov	r3, r5
   28518:	bl	293d0 <__assert_fail@plt+0x17cd0>
   2851c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   28520:	cmp	r0, #0
   28524:	bne	29120 <__assert_fail@plt+0x17a20>
   28528:	ldr	r9, [sp, #60]	; 0x3c
   2852c:	cmp	r8, #0
   28530:	ldrge	ip, [r9, #4]
   28534:	cmpge	ip, #1
   28538:	blt	286dc <__assert_fail@plt+0x16fdc>
   2853c:	mov	sl, #0
   28540:	ldr	r1, [r9, #8]
   28544:	ldr	r3, [r6, #28]
   28548:	ldr	r1, [r1, sl, lsl #2]
   2854c:	add	r2, r1, r1, lsl #1
   28550:	add	r3, r3, r2, lsl #2
   28554:	ldr	r7, [r3, #4]
   28558:	cmp	r7, #1
   2855c:	blt	285c0 <__assert_fail@plt+0x16ec0>
   28560:	ldr	r3, [r3, #8]
   28564:	mov	lr, ip
   28568:	subs	r6, r7, #1
   2856c:	beq	2859c <__assert_fail@plt+0x16e9c>
   28570:	mov	r7, #0
   28574:	mov	ip, #1
   28578:	add	r0, r7, r6
   2857c:	lsr	r4, r0, #1
   28580:	ldr	r5, [r3, r4, lsl #2]
   28584:	cmp	r5, r8
   28588:	movge	r6, r4
   2858c:	addlt	r7, ip, r0, lsr #1
   28590:	cmp	r7, r6
   28594:	bcc	28578 <__assert_fail@plt+0x16e78>
   28598:	b	285a0 <__assert_fail@plt+0x16ea0>
   2859c:	mov	r7, #0
   285a0:	ldr	r0, [r3, r7, lsl #2]
   285a4:	mov	ip, lr
   285a8:	ldr	r4, [sp, #80]	; 0x50
   285ac:	ldr	r5, [sp, #68]	; 0x44
   285b0:	ldr	r6, [sp, #76]	; 0x4c
   285b4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   285b8:	cmp	r0, r8
   285bc:	beq	28650 <__assert_fail@plt+0x16f50>
   285c0:	ldr	r0, [r6, #24]
   285c4:	add	r2, r0, r2, lsl #2
   285c8:	ldr	r3, [r2, #4]
   285cc:	cmp	r3, #1
   285d0:	blt	28628 <__assert_fail@plt+0x16f28>
   285d4:	ldr	r2, [r2, #8]
   285d8:	subs	r7, r3, #1
   285dc:	beq	2860c <__assert_fail@plt+0x16f0c>
   285e0:	mov	r3, #0
   285e4:	mov	r4, #1
   285e8:	add	r0, r3, r7
   285ec:	lsr	r6, r0, #1
   285f0:	ldr	r5, [r2, r6, lsl #2]
   285f4:	cmp	r5, r8
   285f8:	movge	r7, r6
   285fc:	addlt	r3, r4, r0, lsr #1
   28600:	cmp	r3, r7
   28604:	bcc	285e8 <__assert_fail@plt+0x16ee8>
   28608:	b	28610 <__assert_fail@plt+0x16f10>
   2860c:	mov	r3, #0
   28610:	ldr	r0, [r2, r3, lsl #2]
   28614:	ldr	r4, [sp, #80]	; 0x50
   28618:	ldr	r5, [sp, #68]	; 0x44
   2861c:	ldr	r6, [sp, #76]	; 0x4c
   28620:	cmp	r0, r8
   28624:	beq	28650 <__assert_fail@plt+0x16f50>
   28628:	mov	r0, r6
   2862c:	mov	r2, r9
   28630:	mov	r3, r5
   28634:	bl	293d0 <__assert_fail@plt+0x17cd0>
   28638:	cmp	r0, #0
   2863c:	bne	29120 <__assert_fail@plt+0x17a20>
   28640:	ldr	ip, [r9, #4]
   28644:	ldr	lr, [fp, #-80]	; 0xffffffb0
   28648:	sub	sl, sl, #1
   2864c:	mov	r1, r9
   28650:	add	sl, sl, #1
   28654:	cmp	sl, ip
   28658:	blt	28540 <__assert_fail@plt+0x16e40>
   2865c:	b	286dc <__assert_fail@plt+0x16fdc>
   28660:	cmp	r0, #1
   28664:	blt	286dc <__assert_fail@plt+0x16fdc>
   28668:	mov	r7, #0
   2866c:	b	28674 <__assert_fail@plt+0x16f74>
   28670:	ldr	r2, [r6]
   28674:	ldr	r1, [r9, #8]
   28678:	ldr	r1, [r1, r7, lsl #2]
   2867c:	add	r3, r2, r1, lsl #3
   28680:	ldr	r3, [r3, #4]
   28684:	and	r3, r3, #254	; 0xfe
   28688:	orr	r3, r3, #1
   2868c:	cmp	r3, #9
   28690:	ldreq	r2, [r2, r1, lsl #3]
   28694:	cmpeq	sl, r2
   28698:	beq	286ac <__assert_fail@plt+0x16fac>
   2869c:	add	r7, r7, #1
   286a0:	cmp	r7, r0
   286a4:	blt	28670 <__assert_fail@plt+0x16f70>
   286a8:	b	286dc <__assert_fail@plt+0x16fdc>
   286ac:	mov	r0, r6
   286b0:	mov	r2, r9
   286b4:	mov	r3, r5
   286b8:	bl	293d0 <__assert_fail@plt+0x17cd0>
   286bc:	cmp	r0, #0
   286c0:	bne	29120 <__assert_fail@plt+0x17a20>
   286c4:	ldr	r0, [r9, #4]
   286c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   286cc:	mov	r1, r9
   286d0:	add	r7, r7, #1
   286d4:	cmp	r7, r0
   286d8:	blt	28670 <__assert_fail@plt+0x16f70>
   286dc:	ldr	r1, [sp, #84]	; 0x54
   286e0:	ldr	r0, [r4, #20]
   286e4:	add	r1, r1, #1
   286e8:	cmp	r1, r0
   286ec:	blt	2844c <__assert_fail@plt+0x16d4c>
   286f0:	ldr	r7, [sp, #56]	; 0x38
   286f4:	mov	r0, #0
   286f8:	str	r0, [fp, #-76]	; 0xffffffb4
   286fc:	sub	r0, fp, #76	; 0x4c
   28700:	mov	r1, r6
   28704:	mov	r2, r9
   28708:	bl	25670 <__assert_fail@plt+0x13f70>
   2870c:	ldr	r1, [r4]
   28710:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28714:	str	r0, [r1, r4, lsl #2]
   28718:	ldr	r0, [sp, #64]	; 0x40
   2871c:	ldr	r9, [fp, #-76]	; 0xffffffb4
   28720:	cmp	r9, #0
   28724:	bne	290f0 <__assert_fail@plt+0x179f0>
   28728:	cmp	r7, #0
   2872c:	bne	28748 <__assert_fail@plt+0x17048>
   28730:	b	29110 <__assert_fail@plt+0x17a10>
   28734:	ldr	r1, [r4]
   28738:	mov	r4, r2
   2873c:	str	r3, [r1, r2, lsl #2]
   28740:	cmp	r7, #0
   28744:	beq	29110 <__assert_fail@plt+0x17a10>
   28748:	ldr	r1, [r0, #100]	; 0x64
   2874c:	ldr	r1, [r1, r4, lsl #2]
   28750:	ldrb	r1, [r1, #52]	; 0x34
   28754:	tst	r1, #64	; 0x40
   28758:	beq	29110 <__assert_fail@plt+0x17a10>
   2875c:	ldr	lr, [r0, #108]	; 0x6c
   28760:	ldr	r8, [r0, #84]	; 0x54
   28764:	cmp	lr, #1
   28768:	blt	290fc <__assert_fail@plt+0x179fc>
   2876c:	ldr	r1, [r0, #116]	; 0x74
   28770:	mov	ip, #0
   28774:	mov	r2, #1
   28778:	mov	r3, lr
   2877c:	add	r7, r3, ip
   28780:	add	r7, r7, r7, lsr #31
   28784:	asr	r6, r7, #1
   28788:	add	r5, r6, r6, lsl #1
   2878c:	add	r5, r1, r5, lsl #3
   28790:	ldr	r5, [r5, #4]
   28794:	cmp	r5, r4
   28798:	addlt	ip, r2, r7, asr #1
   2879c:	movge	r3, r6
   287a0:	cmp	ip, r3
   287a4:	blt	2877c <__assert_fail@plt+0x1707c>
   287a8:	cmp	ip, lr
   287ac:	bge	29108 <__assert_fail@plt+0x17a08>
   287b0:	cmn	ip, #1
   287b4:	beq	29108 <__assert_fail@plt+0x17a08>
   287b8:	ldr	r2, [r0, #116]	; 0x74
   287bc:	add	r1, ip, ip, lsl #1
   287c0:	str	r1, [sp, #20]
   287c4:	add	r1, r2, r1, lsl #3
   287c8:	ldr	r1, [r1, #4]
   287cc:	cmp	r1, r4
   287d0:	bne	29108 <__assert_fail@plt+0x17a08>
   287d4:	ldr	r1, [sp, #68]	; 0x44
   287d8:	mov	r2, #0
   287dc:	str	r2, [fp, #-72]	; 0xffffffb8
   287e0:	ldr	r3, [r1, #4]
   287e4:	cmp	r3, #0
   287e8:	ble	29134 <__assert_fail@plt+0x17a34>
   287ec:	sub	r0, fp, #72	; 0x48
   287f0:	ldr	r5, [sp, #80]	; 0x50
   287f4:	mov	r9, #1
   287f8:	mov	lr, #0
   287fc:	mov	r7, r8
   28800:	str	r8, [sp, #60]	; 0x3c
   28804:	str	ip, [sp, #24]
   28808:	add	r0, r0, #16
   2880c:	str	r0, [sp, #8]
   28810:	mov	r0, #0
   28814:	str	r0, [sp, #32]
   28818:	ldr	r0, [r1, #8]
   2881c:	ldr	r1, [r5, #8]
   28820:	str	sl, [sp, #48]	; 0x30
   28824:	ldr	r8, [r0, lr, lsl #2]
   28828:	ldr	r0, [r7]
   2882c:	add	r0, r0, r8, lsl #3
   28830:	cmp	r8, r1
   28834:	ldrb	r0, [r0, #4]
   28838:	bne	28854 <__assert_fail@plt+0x17154>
   2883c:	cmp	r0, #4
   28840:	bne	290b0 <__assert_fail@plt+0x179b0>
   28844:	ldr	r0, [r5, #12]
   28848:	cmp	r0, r4
   2884c:	bne	2885c <__assert_fail@plt+0x1715c>
   28850:	b	290b0 <__assert_fail@plt+0x179b0>
   28854:	cmp	r0, #4
   28858:	bne	290b0 <__assert_fail@plt+0x179b0>
   2885c:	ldr	r0, [sp, #64]	; 0x40
   28860:	ldr	r1, [sp, #20]
   28864:	mov	r4, ip
   28868:	str	lr, [sp, #36]	; 0x24
   2886c:	str	r8, [sp, #56]	; 0x38
   28870:	ldr	r0, [r0, #116]	; 0x74
   28874:	add	sl, r0, r1, lsl #3
   28878:	b	28f24 <__assert_fail@plt+0x17824>
   2887c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28880:	mov	r9, #0
   28884:	cmp	r9, r0
   28888:	blt	29020 <__assert_fail@plt+0x17920>
   2888c:	mvn	r9, #0
   28890:	cmp	r0, #1
   28894:	blt	29040 <__assert_fail@plt+0x17940>
   28898:	ldr	r1, [r7, #116]	; 0x74
   2889c:	ldr	r4, [sp, #84]	; 0x54
   288a0:	mov	r8, #0
   288a4:	mov	r2, r0
   288a8:	mov	lr, #1
   288ac:	add	r3, r2, r8
   288b0:	add	r3, r3, r3, lsr #31
   288b4:	asr	r6, r3, #1
   288b8:	add	r5, r6, r6, lsl #1
   288bc:	add	r5, r1, r5, lsl #3
   288c0:	ldr	r5, [r5, #4]
   288c4:	cmp	r5, r4
   288c8:	addlt	r8, lr, r3, asr #1
   288cc:	movge	r2, r6
   288d0:	cmp	r8, r2
   288d4:	blt	288ac <__assert_fail@plt+0x171ac>
   288d8:	ldr	lr, [sp, #64]	; 0x40
   288dc:	cmp	r8, r0
   288e0:	bge	29054 <__assert_fail@plt+0x17954>
   288e4:	ldr	r0, [lr, #116]	; 0x74
   288e8:	add	r1, r8, r8, lsl #1
   288ec:	add	r0, r0, r1, lsl #3
   288f0:	ldr	r0, [r0, #4]
   288f4:	cmp	r0, r4
   288f8:	mvnne	r8, #0
   288fc:	ldr	r5, [sp, #80]	; 0x50
   28900:	ldr	r4, [r5, #20]
   28904:	cmp	r4, #1
   28908:	blt	28a80 <__assert_fail@plt+0x17380>
   2890c:	ldr	ip, [lr, #84]	; 0x54
   28910:	mov	r6, #0
   28914:	str	ip, [sp, #52]	; 0x34
   28918:	ldr	r0, [r5, #24]
   2891c:	ldr	r3, [lr, #116]	; 0x74
   28920:	ldr	r4, [ip]
   28924:	ldr	r7, [fp, #-80]	; 0xffffffb0
   28928:	ldr	r2, [r0, r6, lsl #2]
   2892c:	mov	r0, r3
   28930:	add	r1, r2, r2, lsl #1
   28934:	ldr	r5, [r0, r1, lsl #3]!
   28938:	ldr	r0, [r0, #8]
   2893c:	ldr	r4, [r4, r5, lsl #3]
   28940:	mvn	r5, #0
   28944:	cmp	r0, r7
   28948:	str	r4, [sp, #76]	; 0x4c
   2894c:	ble	28964 <__assert_fail@plt+0x17264>
   28950:	mvn	r4, #0
   28954:	ldr	r7, [sp, #84]	; 0x54
   28958:	cmp	r0, r7
   2895c:	ble	289e4 <__assert_fail@plt+0x172e4>
   28960:	b	28a64 <__assert_fail@plt+0x17364>
   28964:	add	r1, r3, r1, lsl #3
   28968:	mov	r4, #1
   2896c:	ldr	r1, [r1, #12]
   28970:	cmp	r1, r7
   28974:	blt	289d8 <__assert_fail@plt+0x172d8>
   28978:	sub	r1, r1, r7
   2897c:	cmp	r0, r7
   28980:	mov	r7, #1
   28984:	clz	r1, r1
   28988:	lsr	r4, r1, #5
   2898c:	lsl	r1, r4, #1
   28990:	orreq	r1, r7, r4, lsl #1
   28994:	cmp	r1, #0
   28998:	beq	28a4c <__assert_fail@plt+0x1734c>
   2899c:	ldr	r2, [sp, #76]	; 0x4c
   289a0:	ldr	r3, [sp, #56]	; 0x38
   289a4:	mov	r0, lr
   289a8:	str	r9, [sp]
   289ac:	bl	29810 <__assert_fail@plt+0x18110>
   289b0:	mov	r4, r0
   289b4:	ldr	r0, [sp, #80]	; 0x50
   289b8:	ldr	lr, [sp, #64]	; 0x40
   289bc:	ldr	ip, [sp, #52]	; 0x34
   289c0:	ldr	r0, [r0, #24]
   289c4:	ldr	r3, [lr, #116]	; 0x74
   289c8:	ldr	r2, [r0, r6, lsl #2]
   289cc:	add	r0, r2, r2, lsl #1
   289d0:	add	r0, r3, r0, lsl #3
   289d4:	ldr	r0, [r0, #8]
   289d8:	ldr	r7, [sp, #84]	; 0x54
   289dc:	cmp	r0, r7
   289e0:	bgt	28a64 <__assert_fail@plt+0x17364>
   289e4:	add	r1, r2, r2, lsl #1
   289e8:	mov	r5, #1
   289ec:	add	r1, r3, r1, lsl #3
   289f0:	ldr	r1, [r1, #12]
   289f4:	cmp	r1, r7
   289f8:	blt	28a64 <__assert_fail@plt+0x17364>
   289fc:	sub	r1, r1, r7
   28a00:	cmp	r0, r7
   28a04:	mov	r0, #1
   28a08:	clz	r1, r1
   28a0c:	lsr	r2, r1, #5
   28a10:	lsl	r1, r2, #1
   28a14:	orreq	r1, r0, r2, lsl #1
   28a18:	cmp	r1, #0
   28a1c:	beq	28a60 <__assert_fail@plt+0x17360>
   28a20:	ldr	r2, [sp, #76]	; 0x4c
   28a24:	ldr	r3, [sp, #44]	; 0x2c
   28a28:	mov	r0, lr
   28a2c:	str	r8, [sp]
   28a30:	bl	29810 <__assert_fail@plt+0x18110>
   28a34:	ldr	ip, [sp, #52]	; 0x34
   28a38:	ldr	lr, [sp, #64]	; 0x40
   28a3c:	mov	r5, r0
   28a40:	cmp	r5, r4
   28a44:	beq	28a6c <__assert_fail@plt+0x1736c>
   28a48:	b	28adc <__assert_fail@plt+0x173dc>
   28a4c:	mov	r4, #0
   28a50:	ldr	r7, [sp, #84]	; 0x54
   28a54:	cmp	r0, r7
   28a58:	ble	289e4 <__assert_fail@plt+0x172e4>
   28a5c:	b	28a64 <__assert_fail@plt+0x17364>
   28a60:	mov	r5, #0
   28a64:	cmp	r5, r4
   28a68:	bne	28adc <__assert_fail@plt+0x173dc>
   28a6c:	ldr	r5, [sp, #80]	; 0x50
   28a70:	add	r6, r6, #1
   28a74:	ldr	r4, [r5, #20]
   28a78:	cmp	r6, r4
   28a7c:	blt	28918 <__assert_fail@plt+0x17218>
   28a80:	ldr	r0, [sp, #32]
   28a84:	cmp	r0, #0
   28a88:	beq	28b00 <__assert_fail@plt+0x17400>
   28a8c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28a90:	mov	r2, #1
   28a94:	str	r0, [fp, #-60]	; 0xffffffc4
   28a98:	ldr	r0, [sp, #56]	; 0x38
   28a9c:	str	r0, [fp, #-64]	; 0xffffffc0
   28aa0:	ldr	r0, [sp, #16]
   28aa4:	cmp	r0, #0
   28aa8:	beq	28c1c <__assert_fail@plt+0x1751c>
   28aac:	ldr	r4, [sp, #40]	; 0x28
   28ab0:	cmp	r4, #0
   28ab4:	bne	28f0c <__assert_fail@plt+0x1780c>
   28ab8:	ldr	sl, [sp, #48]	; 0x30
   28abc:	ldr	r0, [sp, #72]	; 0x48
   28ac0:	mov	r1, #1
   28ac4:	str	r0, [sl]
   28ac8:	mov	r0, #1
   28acc:	str	r1, [fp, #-52]	; 0xffffffcc
   28ad0:	str	sl, [sp, #28]
   28ad4:	str	r0, [sp, #40]	; 0x28
   28ad8:	b	28cb8 <__assert_fail@plt+0x175b8>
   28adc:	ldr	r5, [sp, #80]	; 0x50
   28ae0:	ldr	r7, [sp, #60]	; 0x3c
   28ae4:	ldr	ip, [sp, #24]
   28ae8:	ldr	lr, [sp, #36]	; 0x24
   28aec:	ldr	r8, [sp, #56]	; 0x38
   28af0:	ldr	r4, [sp, #72]	; 0x48
   28af4:	mov	r0, sl
   28af8:	mov	r9, #1
   28afc:	b	2909c <__assert_fail@plt+0x1799c>
   28b00:	mov	r0, r5
   28b04:	mov	r1, #12
   28b08:	cmp	r4, #1
   28b0c:	mov	r2, #1
   28b10:	vld1.32	{d16-d17}, [r0], r1
   28b14:	sub	r1, fp, #72	; 0x48
   28b18:	vld1.32	{d18-d19}, [r0]
   28b1c:	add	r0, r1, #12
   28b20:	vst1.32	{d18-d19}, [r0]
   28b24:	mov	r0, r1
   28b28:	mov	r1, #20
   28b2c:	vst1.64	{d16-d17}, [r0], r1
   28b30:	str	r4, [r0]
   28b34:	blt	28bf8 <__assert_fail@plt+0x174f8>
   28b38:	lsl	r0, r4, #2
   28b3c:	str	r4, [fp, #-56]	; 0xffffffc8
   28b40:	bl	2aa84 <__assert_fail@plt+0x19384>
   28b44:	cmp	r0, #0
   28b48:	str	r0, [fp, #-48]	; 0xffffffd0
   28b4c:	beq	29180 <__assert_fail@plt+0x17a80>
   28b50:	mov	r6, r0
   28b54:	ldr	r0, [r5, #20]
   28b58:	ldr	r1, [r5, #24]
   28b5c:	lsl	r2, r0, #2
   28b60:	mov	r0, r6
   28b64:	bl	11448 <memcpy@plt>
   28b68:	ldr	r0, [sp, #56]	; 0x38
   28b6c:	mov	sl, r6
   28b70:	str	r0, [fp, #-64]	; 0xffffffc0
   28b74:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28b78:	str	r0, [fp, #-60]	; 0xffffffc4
   28b7c:	lsl	r0, r4, #1
   28b80:	lsl	r1, r4, #3
   28b84:	str	r0, [sp, #16]
   28b88:	str	r0, [fp, #-56]	; 0xffffffc8
   28b8c:	mov	r0, r6
   28b90:	bl	2aab4 <__assert_fail@plt+0x193b4>
   28b94:	cmp	r0, #0
   28b98:	beq	291a0 <__assert_fail@plt+0x17aa0>
   28b9c:	mov	sl, r0
   28ba0:	mov	r6, r0
   28ba4:	str	r0, [fp, #-48]	; 0xffffffd0
   28ba8:	str	r0, [sp, #12]
   28bac:	ldr	r0, [sl]
   28bb0:	ldr	r2, [sp, #72]	; 0x48
   28bb4:	cmp	r0, r2
   28bb8:	ble	28c64 <__assert_fail@plt+0x17564>
   28bbc:	ldr	lr, [sp, #64]	; 0x40
   28bc0:	cmp	r4, #1
   28bc4:	mov	r2, r4
   28bc8:	blt	28ca0 <__assert_fail@plt+0x175a0>
   28bcc:	add	r1, sl, r4, lsl #2
   28bd0:	add	r0, r4, #1
   28bd4:	mov	r2, r1
   28bd8:	ldr	r3, [r2, #-4]!
   28bdc:	sub	r0, r0, #1
   28be0:	cmp	r0, #1
   28be4:	str	r3, [r1]
   28be8:	mov	r1, r2
   28bec:	bgt	28bd8 <__assert_fail@plt+0x174d8>
   28bf0:	sub	r2, r0, #1
   28bf4:	b	28ca0 <__assert_fail@plt+0x175a0>
   28bf8:	ldr	r1, [sp, #8]
   28bfc:	mov	r0, #0
   28c00:	str	r0, [r1]
   28c04:	str	r0, [r1, #4]
   28c08:	str	r0, [r1, #8]
   28c0c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28c10:	str	r0, [fp, #-60]	; 0xffffffc4
   28c14:	ldr	r0, [sp, #56]	; 0x38
   28c18:	str	r0, [fp, #-64]	; 0xffffffc0
   28c1c:	mov	r0, #4
   28c20:	str	r2, [fp, #-52]	; 0xffffffcc
   28c24:	str	r2, [fp, #-56]	; 0xffffffc8
   28c28:	bl	2aa84 <__assert_fail@plt+0x19384>
   28c2c:	cmp	r0, #0
   28c30:	str	r0, [fp, #-48]	; 0xffffffd0
   28c34:	beq	29180 <__assert_fail@plt+0x17a80>
   28c38:	mov	sl, r0
   28c3c:	ldr	r0, [sp, #72]	; 0x48
   28c40:	ldr	lr, [sp, #64]	; 0x40
   28c44:	str	sl, [sp, #12]
   28c48:	str	sl, [sp, #28]
   28c4c:	str	r0, [sl]
   28c50:	mov	r0, #1
   28c54:	str	r0, [sp, #40]	; 0x28
   28c58:	mov	r0, #1
   28c5c:	str	r0, [sp, #16]
   28c60:	b	28cb8 <__assert_fail@plt+0x175b8>
   28c64:	add	r0, sl, r4, lsl #2
   28c68:	ldr	lr, [sp, #64]	; 0x40
   28c6c:	ldr	r1, [r0, #-4]
   28c70:	cmp	r1, r2
   28c74:	mov	r2, r4
   28c78:	ble	28ca0 <__assert_fail@plt+0x175a0>
   28c7c:	ldr	r3, [sp, #72]	; 0x48
   28c80:	sub	r2, r4, #2
   28c84:	str	r1, [r0]
   28c88:	sub	r2, r2, #1
   28c8c:	ldr	r1, [r0, #-8]
   28c90:	sub	r0, r0, #4
   28c94:	cmp	r1, r3
   28c98:	bgt	28c84 <__assert_fail@plt+0x17584>
   28c9c:	add	r2, r2, #2
   28ca0:	ldr	r0, [sp, #72]	; 0x48
   28ca4:	add	r4, r4, #1
   28ca8:	str	r6, [sp, #28]
   28cac:	str	r4, [sp, #40]	; 0x28
   28cb0:	str	r0, [sl, r2, lsl #2]
   28cb4:	str	r4, [fp, #-52]	; 0xffffffcc
   28cb8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28cbc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   28cc0:	ldr	r6, [r1, r0, lsl #2]
   28cc4:	mov	r8, r1
   28cc8:	mov	r0, lr
   28ccc:	sub	r1, fp, #72	; 0x48
   28cd0:	bl	27be0 <__assert_fail@plt+0x164e0>
   28cd4:	cmp	r0, #0
   28cd8:	bne	2915c <__assert_fail@plt+0x17a5c>
   28cdc:	ldr	r5, [r5, #4]
   28ce0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   28ce4:	ldr	r4, [sp, #72]	; 0x48
   28ce8:	mov	r7, r8
   28cec:	cmp	r5, #0
   28cf0:	beq	28da0 <__assert_fail@plt+0x176a0>
   28cf4:	mov	r3, r0
   28cf8:	cmp	r0, #0
   28cfc:	str	r6, [sp, #84]	; 0x54
   28d00:	blt	28d98 <__assert_fail@plt+0x17698>
   28d04:	mov	r0, #0
   28d08:	mov	r6, r0
   28d0c:	ldr	r0, [r7, r0, lsl #2]
   28d10:	ldr	r1, [r5, r6, lsl #2]
   28d14:	cmp	r1, #0
   28d18:	beq	28d88 <__assert_fail@plt+0x17688>
   28d1c:	cmp	r0, #0
   28d20:	beq	28d78 <__assert_fail@plt+0x17678>
   28d24:	sub	r4, fp, #44	; 0x2c
   28d28:	add	r2, r0, #4
   28d2c:	add	r1, r1, #4
   28d30:	mov	r0, r4
   28d34:	bl	23ffc <__assert_fail@plt+0x128fc>
   28d38:	cmp	r0, #0
   28d3c:	str	r0, [fp, #-32]	; 0xffffffe0
   28d40:	bne	2915c <__assert_fail@plt+0x17a5c>
   28d44:	ldr	r1, [sp, #60]	; 0x3c
   28d48:	sub	r0, fp, #32
   28d4c:	mov	r2, r4
   28d50:	bl	25670 <__assert_fail@plt+0x13f70>
   28d54:	str	r0, [r5, r6, lsl #2]
   28d58:	ldr	r0, [fp, #-36]	; 0xffffffdc
   28d5c:	bl	13de4 <__assert_fail@plt+0x26e4>
   28d60:	ldr	r9, [fp, #-32]	; 0xffffffe0
   28d64:	ldr	r3, [fp, #-80]	; 0xffffffb0
   28d68:	ldr	r4, [sp, #72]	; 0x48
   28d6c:	mov	r7, r8
   28d70:	cmp	r9, #0
   28d74:	bne	290d0 <__assert_fail@plt+0x179d0>
   28d78:	add	r0, r6, #1
   28d7c:	cmp	r6, r3
   28d80:	blt	28d08 <__assert_fail@plt+0x17608>
   28d84:	b	28d98 <__assert_fail@plt+0x17698>
   28d88:	str	r0, [r5, r6, lsl #2]
   28d8c:	add	r0, r6, #1
   28d90:	cmp	r6, r3
   28d94:	blt	28d08 <__assert_fail@plt+0x17608>
   28d98:	ldr	r6, [sp, #84]	; 0x54
   28d9c:	mov	r0, r3
   28da0:	str	r6, [r7, r0, lsl #2]
   28da4:	ldr	r0, [sp, #40]	; 0x28
   28da8:	str	r7, [sp, #32]
   28dac:	str	sl, [sp, #48]	; 0x30
   28db0:	cmp	r0, #1
   28db4:	blt	28e48 <__assert_fail@plt+0x17748>
   28db8:	ldr	r5, [sp, #80]	; 0x50
   28dbc:	ldr	ip, [sp, #24]
   28dc0:	ldr	r8, [sp, #56]	; 0x38
   28dc4:	subs	r0, r0, #1
   28dc8:	mov	r9, #1
   28dcc:	mov	r1, #0
   28dd0:	beq	28df8 <__assert_fail@plt+0x176f8>
   28dd4:	mov	r2, r0
   28dd8:	add	r3, r1, r2
   28ddc:	lsr	r7, r3, #1
   28de0:	ldr	r6, [sl, r7, lsl #2]
   28de4:	cmp	r6, r4
   28de8:	movge	r2, r7
   28dec:	addlt	r1, r9, r3, lsr #1
   28df0:	cmp	r1, r2
   28df4:	bcc	28dd8 <__assert_fail@plt+0x176d8>
   28df8:	ldr	r2, [sl, r1, lsl #2]
   28dfc:	cmp	r2, r4
   28e00:	mov	r2, r1
   28e04:	mvnne	r2, #0
   28e08:	cmp	r2, #0
   28e0c:	blt	28e64 <__assert_fail@plt+0x17764>
   28e10:	ldr	r3, [sp, #40]	; 0x28
   28e14:	ldr	r7, [sp, #60]	; 0x3c
   28e18:	cmp	r3, r2
   28e1c:	ble	28e74 <__assert_fail@plt+0x17774>
   28e20:	cmp	r0, r2
   28e24:	str	r0, [fp, #-52]	; 0xffffffcc
   28e28:	ble	28e80 <__assert_fail@plt+0x17780>
   28e2c:	ldr	r3, [sp, #40]	; 0x28
   28e30:	mvn	r2, r1
   28e34:	add	r3, r3, r2
   28e38:	cmp	r3, #4
   28e3c:	bcs	28e8c <__assert_fail@plt+0x1778c>
   28e40:	mov	r2, r1
   28e44:	b	28ee4 <__assert_fail@plt+0x177e4>
   28e48:	ldr	r5, [sp, #80]	; 0x50
   28e4c:	ldr	ip, [sp, #24]
   28e50:	ldr	lr, [sp, #36]	; 0x24
   28e54:	ldr	r8, [sp, #56]	; 0x38
   28e58:	ldr	r7, [sp, #60]	; 0x3c
   28e5c:	mov	r9, #1
   28e60:	b	28ed0 <__assert_fail@plt+0x177d0>
   28e64:	ldr	r0, [sp, #12]
   28e68:	ldr	r7, [sp, #60]	; 0x3c
   28e6c:	str	r0, [sp, #28]
   28e70:	b	28ecc <__assert_fail@plt+0x177cc>
   28e74:	ldr	r0, [sp, #12]
   28e78:	str	r0, [sp, #28]
   28e7c:	b	28ecc <__assert_fail@plt+0x177cc>
   28e80:	ldr	r1, [sp, #12]
   28e84:	str	r1, [sp, #28]
   28e88:	b	28ec8 <__assert_fail@plt+0x177c8>
   28e8c:	bic	r6, r3, #3
   28e90:	add	r2, r1, r6
   28e94:	add	r1, sl, r1, lsl #2
   28e98:	mov	r7, r6
   28e9c:	add	r1, r1, #4
   28ea0:	sub	r5, r1, #4
   28ea4:	vld1.32	{d16-d17}, [r1]!
   28ea8:	subs	r7, r7, #4
   28eac:	vst1.32	{d16-d17}, [r5]
   28eb0:	bne	28ea0 <__assert_fail@plt+0x177a0>
   28eb4:	ldr	r5, [sp, #80]	; 0x50
   28eb8:	ldr	r7, [sp, #60]	; 0x3c
   28ebc:	cmp	r3, r6
   28ec0:	bne	28ee4 <__assert_fail@plt+0x177e4>
   28ec4:	str	sl, [sp, #28]
   28ec8:	str	r0, [sp, #40]	; 0x28
   28ecc:	ldr	lr, [sp, #36]	; 0x24
   28ed0:	ldr	r0, [sp, #64]	; 0x40
   28ed4:	add	r1, r4, r4, lsl #1
   28ed8:	ldr	r0, [r0, #116]	; 0x74
   28edc:	add	r0, r0, r1, lsl #3
   28ee0:	b	2909c <__assert_fail@plt+0x1799c>
   28ee4:	ldr	lr, [sp, #36]	; 0x24
   28ee8:	add	r1, sl, r2, lsl #2
   28eec:	ldr	r1, [r1, #4]
   28ef0:	str	r1, [sl, r2, lsl #2]
   28ef4:	add	r2, r2, #1
   28ef8:	cmp	r0, r2
   28efc:	bne	28ee8 <__assert_fail@plt+0x177e8>
   28f00:	str	sl, [sp, #28]
   28f04:	str	r0, [sp, #40]	; 0x28
   28f08:	b	28ed0 <__assert_fail@plt+0x177d0>
   28f0c:	ldr	r0, [sp, #16]
   28f10:	ldr	sl, [sp, #48]	; 0x30
   28f14:	ldr	r6, [sp, #28]
   28f18:	cmp	r0, r4
   28f1c:	beq	28b7c <__assert_fail@plt+0x1747c>
   28f20:	b	28bac <__assert_fail@plt+0x174ac>
   28f24:	ldr	r0, [sl]
   28f28:	cmp	r0, r8
   28f2c:	bne	29098 <__assert_fail@plt+0x17998>
   28f30:	ldr	r0, [sl, #8]
   28f34:	ldr	r1, [sl, #12]
   28f38:	subs	r0, r1, r0
   28f3c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   28f40:	add	r0, r0, r1
   28f44:	str	r0, [sp, #84]	; 0x54
   28f48:	beq	2906c <__assert_fail@plt+0x1796c>
   28f4c:	ldr	r0, [r7, #12]
   28f50:	add	r0, r0, r8, lsl #2
   28f54:	ldr	r1, [r5, #12]
   28f58:	ldr	r2, [sp, #84]	; 0x54
   28f5c:	cmp	r2, r1
   28f60:	bgt	29098 <__assert_fail@plt+0x17998>
   28f64:	ldr	r1, [r5]
   28f68:	ldr	r1, [r1, r2, lsl #2]
   28f6c:	cmp	r1, #0
   28f70:	beq	29098 <__assert_fail@plt+0x17998>
   28f74:	ldr	r2, [r1, #8]
   28f78:	cmp	r2, #1
   28f7c:	blt	29098 <__assert_fail@plt+0x17998>
   28f80:	ldr	r7, [r0]
   28f84:	ldr	r0, [r1, #12]
   28f88:	subs	r2, r2, #1
   28f8c:	mov	r1, #0
   28f90:	beq	28fb4 <__assert_fail@plt+0x178b4>
   28f94:	add	r3, r1, r2
   28f98:	lsr	r6, r3, #1
   28f9c:	ldr	r5, [r0, r6, lsl #2]
   28fa0:	cmp	r5, r7
   28fa4:	movge	r2, r6
   28fa8:	addlt	r1, r9, r3, lsr #1
   28fac:	cmp	r1, r2
   28fb0:	bcc	28f94 <__assert_fail@plt+0x17894>
   28fb4:	ldr	r0, [r0, r1, lsl #2]
   28fb8:	cmp	r0, r7
   28fbc:	bne	29090 <__assert_fail@plt+0x17990>
   28fc0:	str	r7, [sp, #44]	; 0x2c
   28fc4:	ldr	r7, [sp, #64]	; 0x40
   28fc8:	str	r4, [sp, #72]	; 0x48
   28fcc:	ldr	r0, [r7, #108]	; 0x6c
   28fd0:	cmp	r0, #1
   28fd4:	blt	2887c <__assert_fail@plt+0x1717c>
   28fd8:	ldr	r1, [r7, #116]	; 0x74
   28fdc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   28fe0:	mov	r9, #0
   28fe4:	mov	r2, r0
   28fe8:	mov	r8, #1
   28fec:	add	r3, r2, r9
   28ff0:	add	r3, r3, r3, lsr #31
   28ff4:	asr	r6, r3, #1
   28ff8:	add	r5, r6, r6, lsl #1
   28ffc:	add	r5, r1, r5, lsl #3
   29000:	ldr	r5, [r5, #4]
   29004:	cmp	r5, r4
   29008:	addlt	r9, r8, r3, asr #1
   2900c:	movge	r2, r6
   29010:	cmp	r9, r2
   29014:	blt	28fec <__assert_fail@plt+0x178ec>
   29018:	cmp	r9, r0
   2901c:	bge	2888c <__assert_fail@plt+0x1718c>
   29020:	ldr	r1, [r7, #116]	; 0x74
   29024:	add	r2, r9, r9, lsl #1
   29028:	add	r1, r1, r2, lsl #3
   2902c:	ldr	r1, [r1, #4]
   29030:	cmp	r1, r4
   29034:	mvnne	r9, #0
   29038:	cmp	r0, #1
   2903c:	bge	28898 <__assert_fail@plt+0x17198>
   29040:	ldr	r4, [sp, #84]	; 0x54
   29044:	mov	r8, #0
   29048:	ldr	lr, [sp, #64]	; 0x40
   2904c:	cmp	r8, r0
   29050:	blt	288e4 <__assert_fail@plt+0x171e4>
   29054:	mvn	r8, #0
   29058:	ldr	r5, [sp, #80]	; 0x50
   2905c:	ldr	r4, [r5, #20]
   29060:	cmp	r4, #1
   29064:	bge	2890c <__assert_fail@plt+0x1720c>
   29068:	b	28a80 <__assert_fail@plt+0x17380>
   2906c:	ldr	r0, [r7, #20]
   29070:	add	r1, r8, r8, lsl #1
   29074:	add	r0, r0, r1, lsl #2
   29078:	ldr	r0, [r0, #8]
   2907c:	ldr	r1, [r5, #12]
   29080:	ldr	r2, [sp, #84]	; 0x54
   29084:	cmp	r2, r1
   29088:	bgt	29098 <__assert_fail@plt+0x17998>
   2908c:	b	28f64 <__assert_fail@plt+0x17864>
   29090:	ldr	r5, [sp, #80]	; 0x50
   29094:	ldr	r7, [sp, #60]	; 0x3c
   29098:	mov	r0, sl
   2909c:	add	sl, r0, #24
   290a0:	ldrb	r0, [r0, #20]
   290a4:	add	r4, r4, #1
   290a8:	cmp	r0, #0
   290ac:	bne	28f24 <__assert_fail@plt+0x17824>
   290b0:	ldr	r1, [sp, #68]	; 0x44
   290b4:	ldr	sl, [sp, #48]	; 0x30
   290b8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   290bc:	add	lr, lr, #1
   290c0:	ldr	r0, [r1, #4]
   290c4:	cmp	lr, r0
   290c8:	blt	28818 <__assert_fail@plt+0x17118>
   290cc:	mov	r9, #0
   290d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   290d4:	cmp	r0, #0
   290d8:	beq	290e4 <__assert_fail@plt+0x179e4>
   290dc:	mov	r0, sl
   290e0:	bl	13de4 <__assert_fail@plt+0x26e4>
   290e4:	cmp	r9, #0
   290e8:	str	r9, [fp, #-76]	; 0xffffffb4
   290ec:	moveq	r9, #0
   290f0:	mov	r0, r9
   290f4:	sub	sp, fp, #28
   290f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   290fc:	mov	ip, #0
   29100:	cmp	ip, lr
   29104:	blt	287b0 <__assert_fail@plt+0x170b0>
   29108:	mov	r0, #0
   2910c:	str	r0, [fp, #-76]	; 0xffffffb4
   29110:	mov	r9, #0
   29114:	mov	r0, r9
   29118:	sub	sp, fp, #28
   2911c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29120:	mov	r9, r0
   29124:	str	r0, [fp, #-76]	; 0xffffffb4
   29128:	mov	r0, r9
   2912c:	sub	sp, fp, #28
   29130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29134:	str	r2, [fp, #-76]	; 0xffffffb4
   29138:	mov	r9, #0
   2913c:	mov	r0, r9
   29140:	sub	sp, fp, #28
   29144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29148:	str	r0, [fp, #-72]	; 0xffffffb8
   2914c:	str	r9, [fp, #-76]	; 0xffffffb4
   29150:	mov	r0, r9
   29154:	sub	sp, fp, #28
   29158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2915c:	mov	r9, r0
   29160:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29164:	cmp	r0, #0
   29168:	bne	290dc <__assert_fail@plt+0x179dc>
   2916c:	b	290e4 <__assert_fail@plt+0x179e4>
   29170:	mov	r9, r0
   29174:	mov	r0, r9
   29178:	sub	sp, fp, #28
   2917c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29180:	mov	sl, #0
   29184:	mov	r9, #12
   29188:	str	sl, [fp, #-56]	; 0xffffffc8
   2918c:	str	sl, [fp, #-52]	; 0xffffffcc
   29190:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29194:	cmp	r0, #0
   29198:	bne	290dc <__assert_fail@plt+0x179dc>
   2919c:	b	290e4 <__assert_fail@plt+0x179e4>
   291a0:	mov	r9, #12
   291a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   291a8:	cmp	r0, #0
   291ac:	bne	290dc <__assert_fail@plt+0x179dc>
   291b0:	b	290e4 <__assert_fail@plt+0x179e4>
   291b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   291b8:	add	fp, sp, #28
   291bc:	sub	sp, sp, #12
   291c0:	ldr	ip, [r1, #4]
   291c4:	mov	sl, r0
   291c8:	mov	r0, #0
   291cc:	cmp	ip, #0
   291d0:	ldrne	lr, [r2, #4]
   291d4:	cmpne	lr, #0
   291d8:	bne	291e4 <__assert_fail@plt+0x17ae4>
   291dc:	sub	sp, fp, #28
   291e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   291e4:	mov	r7, r1
   291e8:	ldr	r1, [sl, #4]
   291ec:	ldr	r6, [sl]
   291f0:	add	r3, lr, ip
   291f4:	add	r4, r1, r3
   291f8:	cmp	r4, r6
   291fc:	ble	29240 <__assert_fail@plt+0x17b40>
   29200:	mov	r5, r2
   29204:	mov	r2, sl
   29208:	add	r4, r6, r3
   2920c:	ldr	r0, [r2, #8]!
   29210:	lsl	r1, r4, #2
   29214:	str	r2, [sp, #8]
   29218:	bl	2aab4 <__assert_fail@plt+0x193b4>
   2921c:	cmp	r0, #0
   29220:	beq	293c4 <__assert_fail@plt+0x17cc4>
   29224:	str	r4, [sl]
   29228:	str	r0, [sl, #8]
   2922c:	mov	r2, r5
   29230:	ldr	r1, [sl, #4]
   29234:	ldr	lr, [r5, #4]
   29238:	ldr	ip, [r7, #4]
   2923c:	b	29248 <__assert_fail@plt+0x17b48>
   29240:	add	r0, sl, #8
   29244:	str	r0, [sp, #8]
   29248:	str	r2, [sp, #4]
   2924c:	ldr	r2, [r2, #8]
   29250:	ldr	r4, [r7, #8]
   29254:	add	r3, ip, r1
   29258:	sub	r8, r1, #1
   2925c:	add	r9, r3, lr
   29260:	sub	ip, ip, #1
   29264:	sub	r3, lr, #1
   29268:	ldr	r1, [r2, r3, lsl #2]
   2926c:	ldr	r6, [r4, ip, lsl #2]
   29270:	cmp	r6, r1
   29274:	beq	292a0 <__assert_fail@plt+0x17ba0>
   29278:	blt	29290 <__assert_fail@plt+0x17b90>
   2927c:	sub	r5, ip, #1
   29280:	cmp	ip, #0
   29284:	mov	ip, r5
   29288:	bgt	2926c <__assert_fail@plt+0x17b6c>
   2928c:	b	2931c <__assert_fail@plt+0x17c1c>
   29290:	cmp	lr, #2
   29294:	mov	lr, r3
   29298:	bge	29264 <__assert_fail@plt+0x17b64>
   2929c:	b	2931c <__assert_fail@plt+0x17c1c>
   292a0:	mov	r0, r9
   292a4:	cmp	r8, #0
   292a8:	blt	292f4 <__assert_fail@plt+0x17bf4>
   292ac:	ldr	r1, [sp, #8]
   292b0:	ldr	r9, [r1]
   292b4:	mov	r1, r8
   292b8:	ldr	r5, [r9, r1, lsl #2]
   292bc:	cmp	r5, r6
   292c0:	ble	292d8 <__assert_fail@plt+0x17bd8>
   292c4:	sub	r8, r1, #1
   292c8:	cmp	r1, #0
   292cc:	mov	r1, r8
   292d0:	bgt	292b8 <__assert_fail@plt+0x17bb8>
   292d4:	b	292f4 <__assert_fail@plt+0x17bf4>
   292d8:	mov	r8, r1
   292dc:	bne	292f4 <__assert_fail@plt+0x17bf4>
   292e0:	mov	r8, r1
   292e4:	mov	r9, r0
   292e8:	cmp	ip, #1
   292ec:	bge	29310 <__assert_fail@plt+0x17c10>
   292f0:	b	2931c <__assert_fail@plt+0x17c1c>
   292f4:	ldr	r1, [sp, #8]
   292f8:	mov	r9, r0
   292fc:	sub	r9, r0, #1
   29300:	ldr	r1, [r1]
   29304:	str	r6, [r1, r9, lsl #2]
   29308:	cmp	ip, #1
   2930c:	blt	2931c <__assert_fail@plt+0x17c1c>
   29310:	cmp	lr, #2
   29314:	mov	lr, r3
   29318:	bge	29260 <__assert_fail@plt+0x17b60>
   2931c:	ldr	lr, [r7, #4]
   29320:	ldr	r7, [sp, #4]
   29324:	ldr	r2, [sl, #4]
   29328:	ldr	r0, [sl, #8]
   2932c:	ldr	r4, [r7, #4]
   29330:	subs	r1, r2, #1
   29334:	add	r3, r1, lr
   29338:	add	r3, r3, r4
   2933c:	sub	r5, r3, r9
   29340:	add	r6, r5, #1
   29344:	cmpge	r5, #0
   29348:	add	r7, r6, r2
   2934c:	str	r7, [sl, #4]
   29350:	blt	293a8 <__assert_fail@plt+0x17ca8>
   29354:	add	r2, r2, r4
   29358:	add	r2, r2, lr
   2935c:	sub	r2, r2, r9
   29360:	add	r7, r0, r2, lsl #2
   29364:	ldr	r2, [r0, r1, lsl #2]
   29368:	ldr	r5, [r0, r3, lsl #2]
   2936c:	cmp	r5, r2
   29370:	bgt	2938c <__assert_fail@plt+0x17c8c>
   29374:	str	r2, [r7, r1, lsl #2]
   29378:	sub	r2, r1, #1
   2937c:	cmp	r1, #0
   29380:	mov	r1, r2
   29384:	bgt	29364 <__assert_fail@plt+0x17c64>
   29388:	b	293a8 <__assert_fail@plt+0x17ca8>
   2938c:	str	r5, [r7, r1, lsl #2]
   29390:	sub	r7, r7, #4
   29394:	subs	r6, r6, #1
   29398:	sub	r3, r3, #1
   2939c:	mov	r2, #0
   293a0:	bne	29364 <__assert_fail@plt+0x17c64>
   293a4:	b	293ac <__assert_fail@plt+0x17cac>
   293a8:	mov	r2, r6
   293ac:	add	r1, r0, r9, lsl #2
   293b0:	lsl	r2, r2, #2
   293b4:	bl	11448 <memcpy@plt>
   293b8:	mov	r0, #0
   293bc:	sub	sp, fp, #28
   293c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293c4:	mov	r0, #12
   293c8:	sub	sp, fp, #28
   293cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   293d4:	add	fp, sp, #28
   293d8:	sub	sp, sp, #44	; 0x2c
   293dc:	mov	ip, r0
   293e0:	ldr	r0, [r0, #28]
   293e4:	str	r3, [sp, #4]
   293e8:	add	r3, r1, r1, lsl #1
   293ec:	mov	r9, #0
   293f0:	str	r9, [sp, #36]	; 0x24
   293f4:	str	r9, [sp, #32]
   293f8:	str	r9, [sp, #40]	; 0x28
   293fc:	add	r3, r0, r3, lsl #2
   29400:	mov	r0, r3
   29404:	ldr	lr, [r0, #4]!
   29408:	cmp	lr, #1
   2940c:	str	r0, [sp, #24]
   29410:	blt	29720 <__assert_fail@plt+0x18020>
   29414:	add	r4, r3, #8
   29418:	mov	sl, #1
   2941c:	str	r2, [sp, #28]
   29420:	str	r3, [sp]
   29424:	str	r1, [sp, #12]
   29428:	str	ip, [sp, #8]
   2942c:	str	r4, [sp, #20]
   29430:	ldr	r3, [r4]
   29434:	ldr	r0, [r3, r9, lsl #2]
   29438:	cmp	r0, r1
   2943c:	beq	295e4 <__assert_fail@plt+0x17ee4>
   29440:	ldr	r2, [ip]
   29444:	add	r2, r2, r0, lsl #3
   29448:	ldrb	r2, [r2, #4]
   2944c:	tst	r2, #8
   29450:	beq	295e4 <__assert_fail@plt+0x17ee4>
   29454:	ldr	r2, [ip, #20]
   29458:	add	r0, r0, r0, lsl #1
   2945c:	mvn	r8, #0
   29460:	str	r0, [sp, #16]
   29464:	add	r0, r2, r0, lsl #2
   29468:	ldr	r7, [r0, #4]
   2946c:	ldr	r0, [r0, #8]
   29470:	cmp	r7, #2
   29474:	ldr	r5, [r0]
   29478:	ldrge	r8, [r0, #4]
   2947c:	cmp	lr, #1
   29480:	blt	294c0 <__assert_fail@plt+0x17dc0>
   29484:	mov	r2, #0
   29488:	subs	r7, lr, #1
   2948c:	beq	294b0 <__assert_fail@plt+0x17db0>
   29490:	add	r6, r2, r7
   29494:	lsr	r4, r6, #1
   29498:	ldr	r0, [r3, r4, lsl #2]
   2949c:	cmp	r0, r5
   294a0:	movge	r7, r4
   294a4:	addlt	r2, sl, r6, lsr #1
   294a8:	cmp	r2, r7
   294ac:	bcc	29490 <__assert_fail@plt+0x17d90>
   294b0:	ldr	r0, [r3, r2, lsl #2]
   294b4:	ldr	r4, [sp, #20]
   294b8:	cmp	r0, r5
   294bc:	beq	2951c <__assert_fail@plt+0x17e1c>
   294c0:	ldr	r0, [sp, #28]
   294c4:	ldr	r0, [r0, #4]
   294c8:	cmp	r0, #1
   294cc:	blt	2951c <__assert_fail@plt+0x17e1c>
   294d0:	subs	r6, r0, #1
   294d4:	ldr	r0, [sp, #28]
   294d8:	mov	r7, #0
   294dc:	ldr	r1, [r0, #8]
   294e0:	beq	29504 <__assert_fail@plt+0x17e04>
   294e4:	add	r0, r7, r6
   294e8:	lsr	r4, r0, #1
   294ec:	ldr	ip, [r1, r4, lsl #2]
   294f0:	cmp	ip, r5
   294f4:	movge	r6, r4
   294f8:	addlt	r7, sl, r0, lsr #1
   294fc:	cmp	r7, r6
   29500:	bcc	294e4 <__assert_fail@plt+0x17de4>
   29504:	ldr	r0, [r1, r7, lsl #2]
   29508:	ldr	r1, [sp, #12]
   2950c:	ldr	ip, [sp, #8]
   29510:	ldr	r4, [sp, #20]
   29514:	cmp	r0, r5
   29518:	beq	295b4 <__assert_fail@plt+0x17eb4>
   2951c:	cmp	r8, #1
   29520:	blt	295e4 <__assert_fail@plt+0x17ee4>
   29524:	cmp	lr, #1
   29528:	blt	29564 <__assert_fail@plt+0x17e64>
   2952c:	mov	r2, #0
   29530:	subs	r7, lr, #1
   29534:	beq	29558 <__assert_fail@plt+0x17e58>
   29538:	add	r0, r2, r7
   2953c:	lsr	r6, r0, #1
   29540:	ldr	r5, [r3, r6, lsl #2]
   29544:	cmp	r5, r8
   29548:	movge	r7, r6
   2954c:	addlt	r2, sl, r0, lsr #1
   29550:	cmp	r2, r7
   29554:	bcc	29538 <__assert_fail@plt+0x17e38>
   29558:	ldr	r0, [r3, r2, lsl #2]
   2955c:	cmp	r0, r8
   29560:	beq	295e4 <__assert_fail@plt+0x17ee4>
   29564:	ldr	r2, [sp, #28]
   29568:	ldr	r0, [r2, #4]
   2956c:	cmp	r0, #1
   29570:	blt	295e4 <__assert_fail@plt+0x17ee4>
   29574:	ldr	r4, [r2, #8]
   29578:	subs	r7, r0, #1
   2957c:	mov	r3, #0
   29580:	beq	295a4 <__assert_fail@plt+0x17ea4>
   29584:	add	r0, r3, r7
   29588:	lsr	r6, r0, #1
   2958c:	ldr	r5, [r4, r6, lsl #2]
   29590:	cmp	r5, r8
   29594:	movge	r7, r6
   29598:	addlt	r3, sl, r0, lsr #1
   2959c:	cmp	r3, r7
   295a0:	bcc	29584 <__assert_fail@plt+0x17e84>
   295a4:	ldr	r0, [r4, r3, lsl #2]
   295a8:	ldr	r4, [sp, #20]
   295ac:	cmp	r0, r8
   295b0:	bne	295e4 <__assert_fail@plt+0x17ee4>
   295b4:	ldr	r0, [ip, #28]
   295b8:	ldr	r1, [sp, #16]
   295bc:	add	r2, r0, r1, lsl #2
   295c0:	ldr	r1, [sp, #4]
   295c4:	add	r0, sp, #32
   295c8:	bl	291b4 <__assert_fail@plt+0x17ab4>
   295cc:	cmp	r0, #0
   295d0:	bne	297f8 <__assert_fail@plt+0x180f8>
   295d4:	ldr	r0, [sp, #24]
   295d8:	ldr	r1, [sp, #12]
   295dc:	ldr	ip, [sp, #8]
   295e0:	ldr	lr, [r0]
   295e4:	add	r9, r9, #1
   295e8:	cmp	r9, lr
   295ec:	blt	29430 <__assert_fail@plt+0x17d30>
   295f0:	ldr	r2, [sp, #28]
   295f4:	ldr	r0, [sp]
   295f8:	cmp	lr, #0
   295fc:	ble	29720 <__assert_fail@plt+0x18020>
   29600:	ldr	r1, [sp, #36]	; 0x24
   29604:	ldr	r9, [r0, #8]
   29608:	ldr	r0, [sp, #40]	; 0x28
   2960c:	subs	lr, r1, #1
   29610:	str	r9, [sp, #20]
   29614:	blt	29738 <__assert_fail@plt+0x18038>
   29618:	mov	ip, #0
   2961c:	mov	r7, #1
   29620:	b	29644 <__assert_fail@plt+0x17f44>
   29624:	add	r2, r5, r1, lsl #2
   29628:	ldr	r2, [r2, #4]
   2962c:	str	r2, [r5, r1, lsl #2]
   29630:	add	r1, r1, #1
   29634:	ldr	r2, [r3, #4]
   29638:	cmp	r1, r2
   2963c:	blt	29624 <__assert_fail@plt+0x17f24>
   29640:	b	29708 <__assert_fail@plt+0x18008>
   29644:	ldr	r6, [r9, ip, lsl #2]
   29648:	cmp	lr, #0
   2964c:	mov	r1, #0
   29650:	beq	2967c <__assert_fail@plt+0x17f7c>
   29654:	mov	r1, #0
   29658:	mov	r2, lr
   2965c:	add	r5, r1, r2
   29660:	lsr	r4, r5, #1
   29664:	ldr	r3, [r0, r4, lsl #2]
   29668:	cmp	r3, r6
   2966c:	movge	r2, r4
   29670:	addlt	r1, r7, r5, lsr #1
   29674:	cmp	r1, r2
   29678:	bcc	2965c <__assert_fail@plt+0x17f5c>
   2967c:	ldr	r1, [r0, r1, lsl #2]
   29680:	cmp	r1, r6
   29684:	ldr	r1, [sp, #28]
   29688:	beq	29708 <__assert_fail@plt+0x18008>
   2968c:	ldr	sl, [r1, #4]
   29690:	cmp	sl, #1
   29694:	blt	29708 <__assert_fail@plt+0x18008>
   29698:	ldr	r5, [r1, #8]
   2969c:	subs	r4, sl, #1
   296a0:	beq	296d0 <__assert_fail@plt+0x17fd0>
   296a4:	mov	r1, #0
   296a8:	mov	r8, r4
   296ac:	add	r3, r1, r4
   296b0:	lsr	r2, r3, #1
   296b4:	ldr	r9, [r5, r2, lsl #2]
   296b8:	cmp	r9, r6
   296bc:	movge	r4, r2
   296c0:	addlt	r1, r7, r3, lsr #1
   296c4:	cmp	r1, r4
   296c8:	bcc	296ac <__assert_fail@plt+0x17fac>
   296cc:	b	296d8 <__assert_fail@plt+0x17fd8>
   296d0:	mov	r8, r4
   296d4:	mov	r1, #0
   296d8:	ldr	r2, [r5, r1, lsl #2]
   296dc:	ldr	r3, [sp, #28]
   296e0:	ldr	r9, [sp, #20]
   296e4:	mov	r4, r1
   296e8:	cmp	r2, r6
   296ec:	mvnne	r4, #0
   296f0:	cmp	r4, #0
   296f4:	blt	29708 <__assert_fail@plt+0x18008>
   296f8:	cmp	sl, r4
   296fc:	strgt	r8, [r3, #4]
   29700:	cmpgt	r8, r4
   29704:	bgt	29624 <__assert_fail@plt+0x17f24>
   29708:	ldr	r1, [sp, #24]
   2970c:	add	ip, ip, #1
   29710:	ldr	r1, [r1]
   29714:	cmp	ip, r1
   29718:	blt	29644 <__assert_fail@plt+0x17f44>
   2971c:	b	29724 <__assert_fail@plt+0x18024>
   29720:	ldr	r0, [sp, #40]	; 0x28
   29724:	bl	13de4 <__assert_fail@plt+0x26e4>
   29728:	mov	r5, #0
   2972c:	mov	r0, r5
   29730:	sub	sp, fp, #28
   29734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29738:	ldr	r7, [r2, #4]
   2973c:	mov	sl, #0
   29740:	mov	r9, #1
   29744:	cmp	r7, #1
   29748:	blt	297e0 <__assert_fail@plt+0x180e0>
   2974c:	ldr	r1, [sp, #20]
   29750:	ldr	r6, [r2, #8]
   29754:	subs	lr, r7, #1
   29758:	mov	r5, #0
   2975c:	ldr	r1, [r1, sl, lsl #2]
   29760:	beq	29788 <__assert_fail@plt+0x18088>
   29764:	mov	r4, lr
   29768:	add	r3, r5, r4
   2976c:	lsr	r2, r3, #1
   29770:	ldr	ip, [r6, r2, lsl #2]
   29774:	cmp	ip, r1
   29778:	movge	r4, r2
   2977c:	addlt	r5, r9, r3, lsr #1
   29780:	cmp	r5, r4
   29784:	bcc	29768 <__assert_fail@plt+0x18068>
   29788:	ldr	r2, [r6, r5, lsl #2]
   2978c:	cmp	r2, r1
   29790:	mov	r1, r5
   29794:	mvnne	r1, #0
   29798:	cmp	r1, #0
   2979c:	blt	297dc <__assert_fail@plt+0x180dc>
   297a0:	ldr	r2, [sp, #28]
   297a4:	cmp	r7, r1
   297a8:	ble	297e0 <__assert_fail@plt+0x180e0>
   297ac:	cmp	lr, r1
   297b0:	mov	r7, lr
   297b4:	str	lr, [r2, #4]
   297b8:	ble	297e0 <__assert_fail@plt+0x180e0>
   297bc:	add	r1, r6, r5, lsl #2
   297c0:	ldr	r1, [r1, #4]
   297c4:	str	r1, [r6, r5, lsl #2]
   297c8:	add	r5, r5, #1
   297cc:	ldr	r7, [r2, #4]
   297d0:	cmp	r5, r7
   297d4:	blt	297bc <__assert_fail@plt+0x180bc>
   297d8:	b	297e0 <__assert_fail@plt+0x180e0>
   297dc:	ldr	r2, [sp, #28]
   297e0:	ldr	r1, [sp, #24]
   297e4:	add	sl, sl, #1
   297e8:	ldr	r1, [r1]
   297ec:	cmp	sl, r1
   297f0:	blt	29744 <__assert_fail@plt+0x18044>
   297f4:	b	29724 <__assert_fail@plt+0x18024>
   297f8:	mov	r5, r0
   297fc:	ldr	r0, [sp, #40]	; 0x28
   29800:	bl	13de4 <__assert_fail@plt+0x26e4>
   29804:	mov	r0, r5
   29808:	sub	sp, fp, #28
   2980c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29814:	add	fp, sp, #28
   29818:	sub	sp, sp, #44	; 0x2c
   2981c:	ldr	r4, [r0, #84]	; 0x54
   29820:	mov	r7, r0
   29824:	str	r1, [fp, #-32]	; 0xffffffe0
   29828:	add	r1, r3, r3, lsl #1
   2982c:	mov	r6, r2
   29830:	str	r3, [sp, #36]	; 0x24
   29834:	ldr	r0, [r4, #24]
   29838:	add	r0, r0, r1, lsl #2
   2983c:	mov	r2, r0
   29840:	ldr	r1, [r2, #4]!
   29844:	cmp	r1, #1
   29848:	str	r2, [sp, #28]
   2984c:	blt	29b00 <__assert_fail@plt+0x18400>
   29850:	mov	r1, #1
   29854:	cmp	r6, #31
   29858:	add	r0, r0, #8
   2985c:	mov	sl, #0
   29860:	mvn	r2, r1, lsl r6
   29864:	lsl	r1, r1, r6
   29868:	str	r0, [sp, #32]
   2986c:	str	r2, [sp, #16]
   29870:	ldr	r2, [fp, #-32]	; 0xffffffe0
   29874:	str	r1, [sp, #24]
   29878:	mov	r1, #0
   2987c:	movwgt	r1, #1
   29880:	and	r3, r2, #2
   29884:	and	r0, r2, #1
   29888:	orr	r1, r1, r3, lsr #1
   2988c:	str	r3, [sp, #20]
   29890:	str	r0, [sp, #8]
   29894:	str	r1, [sp, #12]
   29898:	b	299b8 <__assert_fail@plt+0x182b8>
   2989c:	ldr	r2, [sp, #12]
   298a0:	cmp	r2, #0
   298a4:	beq	29924 <__assert_fail@plt+0x18224>
   298a8:	add	r5, r0, r1, lsl #3
   298ac:	ldr	r0, [r5]
   298b0:	cmp	r0, r8
   298b4:	bne	29910 <__assert_fail@plt+0x18210>
   298b8:	ldr	r0, [r4, #20]
   298bc:	add	r1, r8, r8, lsl #1
   298c0:	add	r0, r0, r1, lsl #2
   298c4:	ldr	r0, [r0, #8]
   298c8:	ldr	r3, [r0]
   298cc:	ldr	r0, [sp, #36]	; 0x24
   298d0:	cmp	r3, r0
   298d4:	beq	29b10 <__assert_fail@plt+0x18410>
   298d8:	ldr	r0, [fp, #8]
   298dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   298e0:	mov	r2, r6
   298e4:	str	r0, [sp]
   298e8:	mov	r0, r7
   298ec:	bl	29810 <__assert_fail@plt+0x18110>
   298f0:	cmp	r0, #0
   298f4:	beq	29904 <__assert_fail@plt+0x18204>
   298f8:	cmn	r0, #1
   298fc:	bne	29910 <__assert_fail@plt+0x18210>
   29900:	b	29b24 <__assert_fail@plt+0x18424>
   29904:	ldr	r0, [sp, #20]
   29908:	cmp	r0, #0
   2990c:	bne	29b20 <__assert_fail@plt+0x18420>
   29910:	ldrb	r0, [r5, #20]
   29914:	add	r5, r5, #24
   29918:	cmp	r0, #0
   2991c:	bne	298ac <__assert_fail@plt+0x181ac>
   29920:	b	29aec <__assert_fail@plt+0x183ec>
   29924:	add	r0, r0, r1, lsl #3
   29928:	add	r5, r0, #16
   2992c:	ldr	r0, [r5, #-16]
   29930:	cmp	r0, r8
   29934:	bne	29980 <__assert_fail@plt+0x18280>
   29938:	ldr	r0, [r4, #20]
   2993c:	add	r1, r8, r8, lsl #1
   29940:	add	r0, r0, r1, lsl #2
   29944:	ldr	r0, [r0, #8]
   29948:	ldr	r3, [r0]
   2994c:	ldr	r0, [sp, #36]	; 0x24
   29950:	cmp	r3, r0
   29954:	beq	29b10 <__assert_fail@plt+0x18410>
   29958:	ldr	r0, [fp, #8]
   2995c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29960:	mov	r2, r6
   29964:	str	r0, [sp]
   29968:	mov	r0, r7
   2996c:	bl	29810 <__assert_fail@plt+0x18110>
   29970:	cmp	r0, #0
   29974:	beq	29994 <__assert_fail@plt+0x18294>
   29978:	cmn	r0, #1
   2997c:	beq	29b24 <__assert_fail@plt+0x18424>
   29980:	ldrb	r0, [r5, #4]
   29984:	add	r5, r5, #24
   29988:	cmp	r0, #0
   2998c:	bne	2992c <__assert_fail@plt+0x1822c>
   29990:	b	29aec <__assert_fail@plt+0x183ec>
   29994:	ldr	r0, [r5]
   29998:	ldr	r1, [sp, #16]
   2999c:	and	r0, r0, r1
   299a0:	str	r0, [r5]
   299a4:	ldrb	r0, [r5, #4]
   299a8:	add	r5, r5, #24
   299ac:	cmp	r0, #0
   299b0:	bne	2992c <__assert_fail@plt+0x1822c>
   299b4:	b	29aec <__assert_fail@plt+0x183ec>
   299b8:	ldr	r0, [sp, #32]
   299bc:	ldr	r0, [r0]
   299c0:	ldr	r8, [r0, sl, lsl #2]
   299c4:	ldr	r0, [r4]
   299c8:	add	r1, r0, r8, lsl #3
   299cc:	ldrb	r1, [r1, #4]
   299d0:	cmp	r1, #9
   299d4:	beq	29ab8 <__assert_fail@plt+0x183b8>
   299d8:	cmp	r1, #8
   299dc:	beq	29ad4 <__assert_fail@plt+0x183d4>
   299e0:	cmp	r1, #4
   299e4:	bne	29aec <__assert_fail@plt+0x183ec>
   299e8:	ldr	r0, [fp, #8]
   299ec:	cmn	r0, #1
   299f0:	beq	29aec <__assert_fail@plt+0x183ec>
   299f4:	ldr	r1, [fp, #8]
   299f8:	ldr	r0, [r7, #116]	; 0x74
   299fc:	cmp	r6, #31
   29a00:	add	r1, r1, r1, lsl #1
   29a04:	bgt	2989c <__assert_fail@plt+0x1819c>
   29a08:	add	r0, r0, r1, lsl #3
   29a0c:	add	r9, r0, #16
   29a10:	ldr	r0, [r9, #-16]
   29a14:	cmp	r0, r8
   29a18:	bne	29aa4 <__assert_fail@plt+0x183a4>
   29a1c:	ldr	r0, [r9]
   29a20:	ldr	r1, [sp, #24]
   29a24:	tst	r0, r1
   29a28:	beq	29aa4 <__assert_fail@plt+0x183a4>
   29a2c:	ldr	r0, [r4, #20]
   29a30:	add	r1, r8, r8, lsl #1
   29a34:	add	r0, r0, r1, lsl #2
   29a38:	ldr	r0, [r0, #8]
   29a3c:	ldr	r3, [r0]
   29a40:	ldr	r0, [sp, #36]	; 0x24
   29a44:	cmp	r3, r0
   29a48:	beq	29b10 <__assert_fail@plt+0x18410>
   29a4c:	ldr	r0, [fp, #8]
   29a50:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29a54:	mov	r2, r6
   29a58:	str	r0, [sp]
   29a5c:	mov	r0, r7
   29a60:	bl	29810 <__assert_fail@plt+0x18110>
   29a64:	cmp	r0, #0
   29a68:	beq	29a78 <__assert_fail@plt+0x18378>
   29a6c:	cmn	r0, #1
   29a70:	bne	29a94 <__assert_fail@plt+0x18394>
   29a74:	b	29b24 <__assert_fail@plt+0x18424>
   29a78:	ldr	r0, [sp, #12]
   29a7c:	cmp	r0, #0
   29a80:	beq	29a94 <__assert_fail@plt+0x18394>
   29a84:	ldr	r0, [sp, #20]
   29a88:	cmp	r0, #0
   29a8c:	beq	29aa4 <__assert_fail@plt+0x183a4>
   29a90:	b	29b20 <__assert_fail@plt+0x18420>
   29a94:	ldr	r0, [r9]
   29a98:	ldr	r1, [sp, #16]
   29a9c:	and	r0, r0, r1
   29aa0:	str	r0, [r9]
   29aa4:	ldrb	r0, [r9, #4]
   29aa8:	add	r9, r9, #24
   29aac:	cmp	r0, #0
   29ab0:	bne	29a10 <__assert_fail@plt+0x18310>
   29ab4:	b	29aec <__assert_fail@plt+0x183ec>
   29ab8:	ldr	r1, [sp, #20]
   29abc:	cmp	r1, #0
   29ac0:	beq	29aec <__assert_fail@plt+0x183ec>
   29ac4:	ldr	r0, [r0, r8, lsl #3]
   29ac8:	cmp	r0, r6
   29acc:	bne	29aec <__assert_fail@plt+0x183ec>
   29ad0:	b	29b20 <__assert_fail@plt+0x18420>
   29ad4:	ldr	r1, [sp, #8]
   29ad8:	cmp	r1, #0
   29adc:	beq	29aec <__assert_fail@plt+0x183ec>
   29ae0:	ldr	r0, [r0, r8, lsl #3]
   29ae4:	cmp	r0, r6
   29ae8:	beq	29b2c <__assert_fail@plt+0x1842c>
   29aec:	ldr	r0, [sp, #28]
   29af0:	add	sl, sl, #1
   29af4:	ldr	r0, [r0]
   29af8:	cmp	sl, r0
   29afc:	blt	299b8 <__assert_fail@plt+0x182b8>
   29b00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29b04:	ubfx	r0, r0, #1, #1
   29b08:	sub	sp, fp, #28
   29b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b10:	ldr	r0, [sp, #8]
   29b14:	rsb	r0, r0, #0
   29b18:	sub	sp, fp, #28
   29b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b20:	mov	r0, #0
   29b24:	sub	sp, fp, #28
   29b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b2c:	mvn	r0, #0
   29b30:	sub	sp, fp, #28
   29b34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b38:	push	{r4, r5, fp, lr}
   29b3c:	add	fp, sp, #8
   29b40:	mov	r4, r1
   29b44:	mov	r1, #0
   29b48:	mov	r5, r0
   29b4c:	mov	r2, r4
   29b50:	bl	1164c <memchr@plt>
   29b54:	rsb	r1, r5, #1
   29b58:	cmp	r0, #0
   29b5c:	addne	r4, r1, r0
   29b60:	mov	r0, r4
   29b64:	pop	{r4, r5, fp, pc}
   29b68:	push	{r4, sl, fp, lr}
   29b6c:	add	fp, sp, #8
   29b70:	ldrb	r3, [r0]
   29b74:	ldrb	ip, [r1]
   29b78:	cmp	r3, #45	; 0x2d
   29b7c:	bne	29c54 <__assert_fail@plt+0x18554>
   29b80:	ldrb	r3, [r0, #1]!
   29b84:	cmp	r3, #48	; 0x30
   29b88:	beq	29b80 <__assert_fail@plt+0x18480>
   29b8c:	cmp	ip, #45	; 0x2d
   29b90:	bne	29d64 <__assert_fail@plt+0x18664>
   29b94:	ldrb	ip, [r1, #1]!
   29b98:	cmp	ip, #48	; 0x30
   29b9c:	beq	29b94 <__assert_fail@plt+0x18494>
   29ba0:	sub	lr, r3, #48	; 0x30
   29ba4:	cmp	lr, #9
   29ba8:	bhi	29be8 <__assert_fail@plt+0x184e8>
   29bac:	cmp	ip, r3
   29bb0:	bne	29be8 <__assert_fail@plt+0x184e8>
   29bb4:	mov	r2, #0
   29bb8:	add	r3, r1, r2
   29bbc:	ldrb	ip, [r3, #1]
   29bc0:	add	r3, r0, r2
   29bc4:	add	r2, r2, #1
   29bc8:	ldrb	r3, [r3, #1]
   29bcc:	sub	lr, r3, #48	; 0x30
   29bd0:	cmp	ip, r3
   29bd4:	bne	29be0 <__assert_fail@plt+0x184e0>
   29bd8:	cmp	lr, #10
   29bdc:	bcc	29bb8 <__assert_fail@plt+0x184b8>
   29be0:	add	r1, r1, r2
   29be4:	add	r0, r0, r2
   29be8:	cmp	lr, #9
   29bec:	mov	r2, #0
   29bf0:	mov	lr, #0
   29bf4:	bhi	29c14 <__assert_fail@plt+0x18514>
   29bf8:	add	r0, r0, #1
   29bfc:	mov	lr, #0
   29c00:	ldrb	r4, [r0, lr]
   29c04:	add	lr, lr, #1
   29c08:	sub	r4, r4, #48	; 0x30
   29c0c:	cmp	r4, #10
   29c10:	bcc	29c00 <__assert_fail@plt+0x18500>
   29c14:	sub	r0, ip, #48	; 0x30
   29c18:	cmp	r0, #9
   29c1c:	bhi	29c3c <__assert_fail@plt+0x1853c>
   29c20:	add	r0, r1, #1
   29c24:	mov	r2, #0
   29c28:	ldrb	r1, [r0, r2]
   29c2c:	add	r2, r2, #1
   29c30:	sub	r1, r1, #48	; 0x30
   29c34:	cmp	r1, #10
   29c38:	bcc	29c28 <__assert_fail@plt+0x18528>
   29c3c:	cmp	lr, r2
   29c40:	bne	29d7c <__assert_fail@plt+0x1867c>
   29c44:	cmp	lr, #0
   29c48:	subne	lr, ip, r3
   29c4c:	mov	r0, lr
   29c50:	pop	{r4, sl, fp, pc}
   29c54:	cmp	ip, #45	; 0x2d
   29c58:	bne	29cb0 <__assert_fail@plt+0x185b0>
   29c5c:	add	r1, r1, #1
   29c60:	ldrb	r2, [r1], #1
   29c64:	cmp	r2, #48	; 0x30
   29c68:	beq	29c60 <__assert_fail@plt+0x18560>
   29c6c:	sub	r1, r2, #48	; 0x30
   29c70:	mov	lr, #1
   29c74:	cmp	r1, #10
   29c78:	bcc	29d74 <__assert_fail@plt+0x18674>
   29c7c:	cmp	r3, #48	; 0x30
   29c80:	bne	29c94 <__assert_fail@plt+0x18594>
   29c84:	add	r0, r0, #1
   29c88:	ldrb	r3, [r0], #1
   29c8c:	cmp	r3, #48	; 0x30
   29c90:	beq	29c88 <__assert_fail@plt+0x18588>
   29c94:	sub	r0, r3, #48	; 0x30
   29c98:	mov	lr, #0
   29c9c:	cmp	r0, #10
   29ca0:	movwcc	lr, #1
   29ca4:	mov	r0, lr
   29ca8:	pop	{r4, sl, fp, pc}
   29cac:	ldrb	r3, [r0, #1]!
   29cb0:	cmp	r3, #48	; 0x30
   29cb4:	beq	29cac <__assert_fail@plt+0x185ac>
   29cb8:	b	29cc0 <__assert_fail@plt+0x185c0>
   29cbc:	ldrb	ip, [r1, #1]!
   29cc0:	cmp	ip, #48	; 0x30
   29cc4:	beq	29cbc <__assert_fail@plt+0x185bc>
   29cc8:	sub	r2, r3, #48	; 0x30
   29ccc:	cmp	r2, #9
   29cd0:	bhi	29cf8 <__assert_fail@plt+0x185f8>
   29cd4:	cmp	r3, ip
   29cd8:	bne	29cf8 <__assert_fail@plt+0x185f8>
   29cdc:	ldrb	r3, [r0, #1]!
   29ce0:	ldrb	ip, [r1, #1]!
   29ce4:	sub	r2, r3, #48	; 0x30
   29ce8:	cmp	r3, ip
   29cec:	bne	29cf8 <__assert_fail@plt+0x185f8>
   29cf0:	cmp	r2, #10
   29cf4:	bcc	29cdc <__assert_fail@plt+0x185dc>
   29cf8:	mov	r4, #0
   29cfc:	cmp	r2, #9
   29d00:	mov	lr, #0
   29d04:	bhi	29d24 <__assert_fail@plt+0x18624>
   29d08:	add	r0, r0, #1
   29d0c:	mov	lr, #0
   29d10:	ldrb	r2, [r0, lr]
   29d14:	add	lr, lr, #1
   29d18:	sub	r2, r2, #48	; 0x30
   29d1c:	cmp	r2, #10
   29d20:	bcc	29d10 <__assert_fail@plt+0x18610>
   29d24:	sub	r0, ip, #48	; 0x30
   29d28:	cmp	r0, #9
   29d2c:	bhi	29d4c <__assert_fail@plt+0x1864c>
   29d30:	add	r0, r1, #1
   29d34:	mov	r4, #0
   29d38:	ldrb	r1, [r0, r4]
   29d3c:	add	r4, r4, #1
   29d40:	sub	r1, r1, #48	; 0x30
   29d44:	cmp	r1, #10
   29d48:	bcc	29d38 <__assert_fail@plt+0x18638>
   29d4c:	cmp	lr, r4
   29d50:	bne	29d8c <__assert_fail@plt+0x1868c>
   29d54:	cmp	lr, #0
   29d58:	subne	lr, r3, ip
   29d5c:	mov	r0, lr
   29d60:	pop	{r4, sl, fp, pc}
   29d64:	sub	r0, r3, #48	; 0x30
   29d68:	mvn	lr, #0
   29d6c:	cmp	r0, #10
   29d70:	bcs	29d9c <__assert_fail@plt+0x1869c>
   29d74:	mov	r0, lr
   29d78:	pop	{r4, sl, fp, pc}
   29d7c:	mvn	lr, #0
   29d80:	movwcc	lr, #1
   29d84:	mov	r0, lr
   29d88:	pop	{r4, sl, fp, pc}
   29d8c:	mov	lr, #1
   29d90:	mvncc	lr, #0
   29d94:	mov	r0, lr
   29d98:	pop	{r4, sl, fp, pc}
   29d9c:	cmp	ip, #48	; 0x30
   29da0:	bne	29db4 <__assert_fail@plt+0x186b4>
   29da4:	add	r0, r1, #1
   29da8:	ldrb	ip, [r0], #1
   29dac:	cmp	ip, #48	; 0x30
   29db0:	beq	29da8 <__assert_fail@plt+0x186a8>
   29db4:	sub	r0, ip, #48	; 0x30
   29db8:	mov	lr, #0
   29dbc:	cmp	r0, #10
   29dc0:	mvncc	lr, #0
   29dc4:	mov	r0, lr
   29dc8:	pop	{r4, sl, fp, pc}
   29dcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   29dd0:	add	fp, sp, #24
   29dd4:	sub	sp, sp, #32
   29dd8:	ldr	r6, [fp, #12]
   29ddc:	ldr	r7, [fp, #8]
   29de0:	mov	r4, r2
   29de4:	mov	r8, r0
   29de8:	cmp	r1, #0
   29dec:	beq	29e14 <__assert_fail@plt+0x18714>
   29df0:	movw	r2, #49161	; 0xc009
   29df4:	mov	r5, r1
   29df8:	str	r3, [sp, #4]
   29dfc:	str	r4, [sp]
   29e00:	mov	r0, r8
   29e04:	mov	r1, #1
   29e08:	movt	r2, #2
   29e0c:	mov	r3, r5
   29e10:	b	29e2c <__assert_fail@plt+0x1872c>
   29e14:	movw	r2, #49173	; 0xc015
   29e18:	str	r3, [sp]
   29e1c:	mov	r0, r8
   29e20:	mov	r1, #1
   29e24:	mov	r3, r4
   29e28:	movt	r2, #2
   29e2c:	bl	11640 <__fprintf_chk@plt>
   29e30:	movw	r1, #49180	; 0xc01c
   29e34:	mov	r0, #0
   29e38:	mov	r2, #5
   29e3c:	movt	r1, #2
   29e40:	bl	11490 <dcgettext@plt>
   29e44:	movw	r2, #49898	; 0xc2ea
   29e48:	mov	r3, r0
   29e4c:	movw	r0, #2022	; 0x7e6
   29e50:	mov	r1, #1
   29e54:	str	r0, [sp]
   29e58:	movt	r2, #2
   29e5c:	mov	r0, r8
   29e60:	bl	11640 <__fprintf_chk@plt>
   29e64:	movw	r4, #47786	; 0xbaaa
   29e68:	mov	r1, r8
   29e6c:	movt	r4, #2
   29e70:	mov	r0, r4
   29e74:	bl	113a0 <fputs_unlocked@plt>
   29e78:	movw	r1, #49184	; 0xc020
   29e7c:	mov	r0, #0
   29e80:	mov	r2, #5
   29e84:	movt	r1, #2
   29e88:	bl	11490 <dcgettext@plt>
   29e8c:	movw	r3, #49355	; 0xc0cb
   29e90:	mov	r2, r0
   29e94:	mov	r0, r8
   29e98:	mov	r1, #1
   29e9c:	movt	r3, #2
   29ea0:	bl	11640 <__fprintf_chk@plt>
   29ea4:	mov	r0, r4
   29ea8:	mov	r1, r8
   29eac:	bl	113a0 <fputs_unlocked@plt>
   29eb0:	cmp	r6, #9
   29eb4:	bhi	29ef0 <__assert_fail@plt+0x187f0>
   29eb8:	add	r0, pc, #0
   29ebc:	ldr	pc, [r0, r6, lsl #2]
   29ec0:	andeq	r9, r2, r8, ror #29
   29ec4:	strdeq	r9, [r2], -ip
   29ec8:	andeq	r9, r2, ip, lsr #30
   29ecc:	andeq	r9, r2, r4, asr pc
   29ed0:	andeq	r9, r2, ip, ror pc
   29ed4:	andeq	r9, r2, r4, lsr #31
   29ed8:	andeq	r9, r2, ip, asr #31
   29edc:	andeq	sl, r2, r4
   29ee0:	andeq	sl, r2, ip, lsr #1
   29ee4:	andeq	sl, r2, r4, asr r0
   29ee8:	sub	sp, fp, #24
   29eec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   29ef0:	movw	r1, #49708	; 0xc22c
   29ef4:	movt	r1, #2
   29ef8:	b	2a05c <__assert_fail@plt+0x1895c>
   29efc:	movw	r1, #49389	; 0xc0ed
   29f00:	mov	r0, #0
   29f04:	mov	r2, #5
   29f08:	movt	r1, #2
   29f0c:	bl	11490 <dcgettext@plt>
   29f10:	ldr	r3, [r7]
   29f14:	mov	r2, r0
   29f18:	mov	r0, r8
   29f1c:	mov	r1, #1
   29f20:	sub	sp, fp, #24
   29f24:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   29f28:	b	11640 <__fprintf_chk@plt>
   29f2c:	movw	r1, #49405	; 0xc0fd
   29f30:	mov	r0, #0
   29f34:	mov	r2, #5
   29f38:	movt	r1, #2
   29f3c:	bl	11490 <dcgettext@plt>
   29f40:	mov	r2, r0
   29f44:	ldr	r3, [r7]
   29f48:	ldr	r0, [r7, #4]
   29f4c:	str	r0, [sp]
   29f50:	b	2a040 <__assert_fail@plt+0x18940>
   29f54:	movw	r1, #49428	; 0xc114
   29f58:	mov	r0, #0
   29f5c:	mov	r2, #5
   29f60:	movt	r1, #2
   29f64:	bl	11490 <dcgettext@plt>
   29f68:	ldr	r3, [r7]
   29f6c:	mov	r2, r0
   29f70:	ldmib	r7, {r0, r1}
   29f74:	stm	sp, {r0, r1}
   29f78:	b	2a040 <__assert_fail@plt+0x18940>
   29f7c:	movw	r1, #49456	; 0xc130
   29f80:	mov	r0, #0
   29f84:	mov	r2, #5
   29f88:	movt	r1, #2
   29f8c:	bl	11490 <dcgettext@plt>
   29f90:	ldr	r3, [r7]
   29f94:	mov	r2, r0
   29f98:	ldmib	r7, {r0, r1, r7}
   29f9c:	stm	sp, {r0, r1, r7}
   29fa0:	b	2a040 <__assert_fail@plt+0x18940>
   29fa4:	movw	r1, #49488	; 0xc150
   29fa8:	mov	r0, #0
   29fac:	mov	r2, #5
   29fb0:	movt	r1, #2
   29fb4:	bl	11490 <dcgettext@plt>
   29fb8:	ldr	r3, [r7]
   29fbc:	mov	r2, r0
   29fc0:	ldmib	r7, {r0, r1, r6, r7}
   29fc4:	stm	sp, {r0, r1, r6, r7}
   29fc8:	b	2a040 <__assert_fail@plt+0x18940>
   29fcc:	movw	r1, #49524	; 0xc174
   29fd0:	mov	r0, #0
   29fd4:	mov	r2, #5
   29fd8:	movt	r1, #2
   29fdc:	bl	11490 <dcgettext@plt>
   29fe0:	ldr	r3, [r7]
   29fe4:	mov	r2, r0
   29fe8:	ldmib	r7, {r0, r1, r6}
   29fec:	ldr	r5, [r7, #16]
   29ff0:	ldr	r7, [r7, #20]
   29ff4:	stm	sp, {r0, r1, r6}
   29ff8:	str	r5, [sp, #12]
   29ffc:	str	r7, [sp, #16]
   2a000:	b	2a040 <__assert_fail@plt+0x18940>
   2a004:	movw	r1, #49564	; 0xc19c
   2a008:	mov	r0, #0
   2a00c:	mov	r2, #5
   2a010:	movt	r1, #2
   2a014:	bl	11490 <dcgettext@plt>
   2a018:	ldr	r3, [r7]
   2a01c:	mov	r2, r0
   2a020:	ldmib	r7, {r0, r1, r6}
   2a024:	ldr	r5, [r7, #16]
   2a028:	ldr	r4, [r7, #20]
   2a02c:	ldr	r7, [r7, #24]
   2a030:	stm	sp, {r0, r1, r6}
   2a034:	str	r5, [sp, #12]
   2a038:	str	r4, [sp, #16]
   2a03c:	str	r7, [sp, #20]
   2a040:	mov	r0, r8
   2a044:	mov	r1, #1
   2a048:	bl	11640 <__fprintf_chk@plt>
   2a04c:	sub	sp, fp, #24
   2a050:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a054:	movw	r1, #49656	; 0xc1f8
   2a058:	movt	r1, #2
   2a05c:	mov	r0, #0
   2a060:	mov	r2, #5
   2a064:	bl	11490 <dcgettext@plt>
   2a068:	mov	ip, r0
   2a06c:	ldr	r3, [r7]
   2a070:	ldr	r0, [r7, #4]
   2a074:	ldr	r1, [r7, #8]
   2a078:	ldr	r6, [r7, #12]
   2a07c:	ldr	r5, [r7, #16]
   2a080:	ldr	r4, [r7, #20]
   2a084:	ldr	r2, [r7, #24]
   2a088:	ldr	lr, [r7, #28]
   2a08c:	ldr	r7, [r7, #32]
   2a090:	stm	sp, {r0, r1, r6}
   2a094:	str	r5, [sp, #12]
   2a098:	str	r4, [sp, #16]
   2a09c:	str	r2, [sp, #20]
   2a0a0:	str	lr, [sp, #24]
   2a0a4:	str	r7, [sp, #28]
   2a0a8:	b	2a0f0 <__assert_fail@plt+0x189f0>
   2a0ac:	movw	r1, #49608	; 0xc1c8
   2a0b0:	mov	r0, #0
   2a0b4:	mov	r2, #5
   2a0b8:	movt	r1, #2
   2a0bc:	bl	11490 <dcgettext@plt>
   2a0c0:	mov	ip, r0
   2a0c4:	ldr	r3, [r7]
   2a0c8:	ldmib	r7, {r0, r1, r6}
   2a0cc:	ldr	r5, [r7, #16]
   2a0d0:	ldr	r4, [r7, #20]
   2a0d4:	ldr	r2, [r7, #24]
   2a0d8:	ldr	r7, [r7, #28]
   2a0dc:	stm	sp, {r0, r1, r6}
   2a0e0:	str	r5, [sp, #12]
   2a0e4:	str	r4, [sp, #16]
   2a0e8:	str	r2, [sp, #20]
   2a0ec:	str	r7, [sp, #24]
   2a0f0:	mov	r0, r8
   2a0f4:	mov	r1, #1
   2a0f8:	mov	r2, ip
   2a0fc:	bl	11640 <__fprintf_chk@plt>
   2a100:	sub	sp, fp, #24
   2a104:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a108:	push	{r4, sl, fp, lr}
   2a10c:	add	fp, sp, #8
   2a110:	sub	sp, sp, #8
   2a114:	ldr	ip, [fp, #8]
   2a118:	mov	lr, #0
   2a11c:	ldr	r4, [ip, lr, lsl #2]
   2a120:	add	lr, lr, #1
   2a124:	cmp	r4, #0
   2a128:	bne	2a11c <__assert_fail@plt+0x18a1c>
   2a12c:	sub	r4, lr, #1
   2a130:	str	ip, [sp]
   2a134:	str	r4, [sp, #4]
   2a138:	bl	29dcc <__assert_fail@plt+0x186cc>
   2a13c:	sub	sp, fp, #8
   2a140:	pop	{r4, sl, fp, pc}
   2a144:	push	{fp, lr}
   2a148:	mov	fp, sp
   2a14c:	sub	sp, sp, #48	; 0x30
   2a150:	ldr	ip, [fp, #8]
   2a154:	ldr	lr, [ip]
   2a158:	cmp	lr, #0
   2a15c:	str	lr, [sp, #8]
   2a160:	beq	2a1fc <__assert_fail@plt+0x18afc>
   2a164:	ldr	lr, [ip, #4]
   2a168:	cmp	lr, #0
   2a16c:	str	lr, [sp, #12]
   2a170:	beq	2a204 <__assert_fail@plt+0x18b04>
   2a174:	ldr	lr, [ip, #8]
   2a178:	cmp	lr, #0
   2a17c:	str	lr, [sp, #16]
   2a180:	beq	2a20c <__assert_fail@plt+0x18b0c>
   2a184:	ldr	lr, [ip, #12]
   2a188:	cmp	lr, #0
   2a18c:	str	lr, [sp, #20]
   2a190:	beq	2a214 <__assert_fail@plt+0x18b14>
   2a194:	ldr	lr, [ip, #16]
   2a198:	cmp	lr, #0
   2a19c:	str	lr, [sp, #24]
   2a1a0:	beq	2a21c <__assert_fail@plt+0x18b1c>
   2a1a4:	ldr	lr, [ip, #20]
   2a1a8:	cmp	lr, #0
   2a1ac:	str	lr, [sp, #28]
   2a1b0:	beq	2a224 <__assert_fail@plt+0x18b24>
   2a1b4:	ldr	lr, [ip, #24]
   2a1b8:	cmp	lr, #0
   2a1bc:	str	lr, [sp, #32]
   2a1c0:	beq	2a22c <__assert_fail@plt+0x18b2c>
   2a1c4:	ldr	lr, [ip, #28]
   2a1c8:	cmp	lr, #0
   2a1cc:	str	lr, [sp, #36]	; 0x24
   2a1d0:	beq	2a234 <__assert_fail@plt+0x18b34>
   2a1d4:	ldr	lr, [ip, #32]
   2a1d8:	cmp	lr, #0
   2a1dc:	str	lr, [sp, #40]	; 0x28
   2a1e0:	beq	2a23c <__assert_fail@plt+0x18b3c>
   2a1e4:	ldr	lr, [ip, #36]	; 0x24
   2a1e8:	mov	ip, #10
   2a1ec:	cmp	lr, #0
   2a1f0:	str	lr, [sp, #44]	; 0x2c
   2a1f4:	movweq	ip, #9
   2a1f8:	b	2a240 <__assert_fail@plt+0x18b40>
   2a1fc:	mov	ip, #0
   2a200:	b	2a240 <__assert_fail@plt+0x18b40>
   2a204:	mov	ip, #1
   2a208:	b	2a240 <__assert_fail@plt+0x18b40>
   2a20c:	mov	ip, #2
   2a210:	b	2a240 <__assert_fail@plt+0x18b40>
   2a214:	mov	ip, #3
   2a218:	b	2a240 <__assert_fail@plt+0x18b40>
   2a21c:	mov	ip, #4
   2a220:	b	2a240 <__assert_fail@plt+0x18b40>
   2a224:	mov	ip, #5
   2a228:	b	2a240 <__assert_fail@plt+0x18b40>
   2a22c:	mov	ip, #6
   2a230:	b	2a240 <__assert_fail@plt+0x18b40>
   2a234:	mov	ip, #7
   2a238:	b	2a240 <__assert_fail@plt+0x18b40>
   2a23c:	mov	ip, #8
   2a240:	add	lr, sp, #8
   2a244:	str	ip, [sp, #4]
   2a248:	str	lr, [sp]
   2a24c:	bl	29dcc <__assert_fail@plt+0x186cc>
   2a250:	mov	sp, fp
   2a254:	pop	{fp, pc}
   2a258:	push	{fp, lr}
   2a25c:	mov	fp, sp
   2a260:	sub	sp, sp, #56	; 0x38
   2a264:	add	ip, fp, #8
   2a268:	str	ip, [sp, #12]
   2a26c:	ldr	lr, [fp, #8]
   2a270:	cmp	lr, #0
   2a274:	str	lr, [sp, #16]
   2a278:	beq	2a314 <__assert_fail@plt+0x18c14>
   2a27c:	ldr	lr, [ip, #4]
   2a280:	cmp	lr, #0
   2a284:	str	lr, [sp, #20]
   2a288:	beq	2a31c <__assert_fail@plt+0x18c1c>
   2a28c:	ldr	lr, [ip, #8]
   2a290:	cmp	lr, #0
   2a294:	str	lr, [sp, #24]
   2a298:	beq	2a324 <__assert_fail@plt+0x18c24>
   2a29c:	ldr	lr, [ip, #12]
   2a2a0:	cmp	lr, #0
   2a2a4:	str	lr, [sp, #28]
   2a2a8:	beq	2a32c <__assert_fail@plt+0x18c2c>
   2a2ac:	ldr	lr, [ip, #16]
   2a2b0:	cmp	lr, #0
   2a2b4:	str	lr, [sp, #32]
   2a2b8:	beq	2a334 <__assert_fail@plt+0x18c34>
   2a2bc:	ldr	lr, [ip, #20]
   2a2c0:	cmp	lr, #0
   2a2c4:	str	lr, [sp, #36]	; 0x24
   2a2c8:	beq	2a33c <__assert_fail@plt+0x18c3c>
   2a2cc:	ldr	lr, [ip, #24]
   2a2d0:	cmp	lr, #0
   2a2d4:	str	lr, [sp, #40]	; 0x28
   2a2d8:	beq	2a344 <__assert_fail@plt+0x18c44>
   2a2dc:	ldr	lr, [ip, #28]
   2a2e0:	cmp	lr, #0
   2a2e4:	str	lr, [sp, #44]	; 0x2c
   2a2e8:	beq	2a34c <__assert_fail@plt+0x18c4c>
   2a2ec:	ldr	lr, [ip, #32]
   2a2f0:	cmp	lr, #0
   2a2f4:	str	lr, [sp, #48]	; 0x30
   2a2f8:	beq	2a354 <__assert_fail@plt+0x18c54>
   2a2fc:	ldr	lr, [ip, #36]	; 0x24
   2a300:	mov	ip, #10
   2a304:	cmp	lr, #0
   2a308:	str	lr, [sp, #52]	; 0x34
   2a30c:	movweq	ip, #9
   2a310:	b	2a358 <__assert_fail@plt+0x18c58>
   2a314:	mov	ip, #0
   2a318:	b	2a358 <__assert_fail@plt+0x18c58>
   2a31c:	mov	ip, #1
   2a320:	b	2a358 <__assert_fail@plt+0x18c58>
   2a324:	mov	ip, #2
   2a328:	b	2a358 <__assert_fail@plt+0x18c58>
   2a32c:	mov	ip, #3
   2a330:	b	2a358 <__assert_fail@plt+0x18c58>
   2a334:	mov	ip, #4
   2a338:	b	2a358 <__assert_fail@plt+0x18c58>
   2a33c:	mov	ip, #5
   2a340:	b	2a358 <__assert_fail@plt+0x18c58>
   2a344:	mov	ip, #6
   2a348:	b	2a358 <__assert_fail@plt+0x18c58>
   2a34c:	mov	ip, #7
   2a350:	b	2a358 <__assert_fail@plt+0x18c58>
   2a354:	mov	ip, #8
   2a358:	add	lr, sp, #16
   2a35c:	str	ip, [sp, #4]
   2a360:	str	lr, [sp]
   2a364:	bl	29dcc <__assert_fail@plt+0x186cc>
   2a368:	mov	sp, fp
   2a36c:	pop	{fp, pc}
   2a370:	push	{fp, lr}
   2a374:	mov	fp, sp
   2a378:	movw	r0, #53668	; 0xd1a4
   2a37c:	movt	r0, #3
   2a380:	ldr	r1, [r0]
   2a384:	movw	r0, #47786	; 0xbaaa
   2a388:	movt	r0, #2
   2a38c:	bl	113a0 <fputs_unlocked@plt>
   2a390:	movw	r1, #49768	; 0xc268
   2a394:	mov	r0, #0
   2a398:	mov	r2, #5
   2a39c:	movt	r1, #2
   2a3a0:	bl	11490 <dcgettext@plt>
   2a3a4:	movw	r2, #49788	; 0xc27c
   2a3a8:	mov	r1, r0
   2a3ac:	mov	r0, #1
   2a3b0:	movt	r2, #2
   2a3b4:	bl	11628 <__printf_chk@plt>
   2a3b8:	movw	r1, #49810	; 0xc292
   2a3bc:	mov	r0, #0
   2a3c0:	mov	r2, #5
   2a3c4:	movt	r1, #2
   2a3c8:	bl	11490 <dcgettext@plt>
   2a3cc:	movw	r2, #47353	; 0xb8f9
   2a3d0:	movw	r3, #47595	; 0xb9eb
   2a3d4:	mov	r1, r0
   2a3d8:	mov	r0, #1
   2a3dc:	movt	r2, #2
   2a3e0:	movt	r3, #2
   2a3e4:	bl	11628 <__printf_chk@plt>
   2a3e8:	movw	r1, #49830	; 0xc2a6
   2a3ec:	mov	r0, #0
   2a3f0:	mov	r2, #5
   2a3f4:	movt	r1, #2
   2a3f8:	bl	11490 <dcgettext@plt>
   2a3fc:	movw	r2, #49869	; 0xc2cd
   2a400:	mov	r1, r0
   2a404:	mov	r0, #1
   2a408:	movt	r2, #2
   2a40c:	pop	{fp, lr}
   2a410:	b	11628 <__printf_chk@plt>
   2a414:	push	{r4, r5, r6, sl, fp, lr}
   2a418:	add	fp, sp, #16
   2a41c:	mov	r4, r2
   2a420:	mov	r5, r1
   2a424:	mov	r6, r0
   2a428:	bl	2af3c <__assert_fail@plt+0x1983c>
   2a42c:	cmp	r0, #0
   2a430:	popne	{r4, r5, r6, sl, fp, pc}
   2a434:	cmp	r6, #0
   2a438:	beq	2a44c <__assert_fail@plt+0x18d4c>
   2a43c:	cmp	r5, #0
   2a440:	cmpne	r4, #0
   2a444:	bne	2a44c <__assert_fail@plt+0x18d4c>
   2a448:	pop	{r4, r5, r6, sl, fp, pc}
   2a44c:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a450:	push	{r4, r5, r6, sl, fp, lr}
   2a454:	add	fp, sp, #16
   2a458:	mov	r4, r2
   2a45c:	mov	r5, r1
   2a460:	mov	r6, r0
   2a464:	bl	2af3c <__assert_fail@plt+0x1983c>
   2a468:	cmp	r0, #0
   2a46c:	popne	{r4, r5, r6, sl, fp, pc}
   2a470:	cmp	r6, #0
   2a474:	beq	2a488 <__assert_fail@plt+0x18d88>
   2a478:	cmp	r5, #0
   2a47c:	cmpne	r4, #0
   2a480:	bne	2a488 <__assert_fail@plt+0x18d88>
   2a484:	pop	{r4, r5, r6, sl, fp, pc}
   2a488:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a48c:	push	{fp, lr}
   2a490:	mov	fp, sp
   2a494:	bl	2aa84 <__assert_fail@plt+0x19384>
   2a498:	cmp	r0, #0
   2a49c:	popne	{fp, pc}
   2a4a0:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a4a4:	push	{fp, lr}
   2a4a8:	mov	fp, sp
   2a4ac:	bl	2aa84 <__assert_fail@plt+0x19384>
   2a4b0:	cmp	r0, #0
   2a4b4:	popne	{fp, pc}
   2a4b8:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a4bc:	push	{fp, lr}
   2a4c0:	mov	fp, sp
   2a4c4:	bl	2aa84 <__assert_fail@plt+0x19384>
   2a4c8:	cmp	r0, #0
   2a4cc:	popne	{fp, pc}
   2a4d0:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a4d4:	push	{r4, r5, fp, lr}
   2a4d8:	add	fp, sp, #8
   2a4dc:	mov	r4, r1
   2a4e0:	mov	r5, r0
   2a4e4:	bl	2aab4 <__assert_fail@plt+0x193b4>
   2a4e8:	cmp	r0, #0
   2a4ec:	popne	{r4, r5, fp, pc}
   2a4f0:	cmp	r5, #0
   2a4f4:	beq	2a504 <__assert_fail@plt+0x18e04>
   2a4f8:	cmp	r4, #0
   2a4fc:	bne	2a504 <__assert_fail@plt+0x18e04>
   2a500:	pop	{r4, r5, fp, pc}
   2a504:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a508:	push	{fp, lr}
   2a50c:	mov	fp, sp
   2a510:	cmp	r1, #0
   2a514:	orreq	r1, r1, #1
   2a518:	bl	2aab4 <__assert_fail@plt+0x193b4>
   2a51c:	cmp	r0, #0
   2a520:	popne	{fp, pc}
   2a524:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a528:	push	{fp, lr}
   2a52c:	mov	fp, sp
   2a530:	clz	r3, r2
   2a534:	lsr	ip, r3, #5
   2a538:	clz	r3, r1
   2a53c:	lsr	r3, r3, #5
   2a540:	orrs	r3, r3, ip
   2a544:	movwne	r1, #1
   2a548:	movwne	r2, #1
   2a54c:	bl	2af3c <__assert_fail@plt+0x1983c>
   2a550:	cmp	r0, #0
   2a554:	popne	{fp, pc}
   2a558:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a55c:	push	{fp, lr}
   2a560:	mov	fp, sp
   2a564:	mov	r2, r1
   2a568:	mov	r1, r0
   2a56c:	mov	r0, #0
   2a570:	bl	2af3c <__assert_fail@plt+0x1983c>
   2a574:	cmp	r0, #0
   2a578:	popne	{fp, pc}
   2a57c:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a580:	push	{fp, lr}
   2a584:	mov	fp, sp
   2a588:	mov	r2, r1
   2a58c:	mov	r1, r0
   2a590:	clz	r0, r2
   2a594:	clz	r3, r1
   2a598:	lsr	r0, r0, #5
   2a59c:	lsr	r3, r3, #5
   2a5a0:	orrs	r0, r3, r0
   2a5a4:	movwne	r1, #1
   2a5a8:	movwne	r2, #1
   2a5ac:	mov	r0, #0
   2a5b0:	bl	2af3c <__assert_fail@plt+0x1983c>
   2a5b4:	cmp	r0, #0
   2a5b8:	popne	{fp, pc}
   2a5bc:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a5c0:	push	{r4, r5, r6, sl, fp, lr}
   2a5c4:	add	fp, sp, #16
   2a5c8:	ldr	r5, [r1]
   2a5cc:	mov	r4, r1
   2a5d0:	mov	r6, r0
   2a5d4:	cmp	r0, #0
   2a5d8:	beq	2a5f0 <__assert_fail@plt+0x18ef0>
   2a5dc:	mov	r0, #1
   2a5e0:	add	r0, r0, r5, lsr #1
   2a5e4:	adds	r5, r5, r0
   2a5e8:	bcc	2a5f8 <__assert_fail@plt+0x18ef8>
   2a5ec:	b	2a634 <__assert_fail@plt+0x18f34>
   2a5f0:	cmp	r5, #0
   2a5f4:	movweq	r5, #64	; 0x40
   2a5f8:	mov	r0, r6
   2a5fc:	mov	r1, r5
   2a600:	mov	r2, #1
   2a604:	bl	2af3c <__assert_fail@plt+0x1983c>
   2a608:	cmp	r5, #0
   2a60c:	mov	r1, r5
   2a610:	movwne	r1, #1
   2a614:	cmp	r0, #0
   2a618:	bne	2a62c <__assert_fail@plt+0x18f2c>
   2a61c:	clz	r2, r6
   2a620:	lsr	r2, r2, #5
   2a624:	orrs	r1, r2, r1
   2a628:	bne	2a634 <__assert_fail@plt+0x18f34>
   2a62c:	str	r5, [r4]
   2a630:	pop	{r4, r5, r6, sl, fp, pc}
   2a634:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a638:	push	{r4, r5, r6, r7, fp, lr}
   2a63c:	add	fp, sp, #16
   2a640:	ldr	r5, [r1]
   2a644:	mov	r6, r2
   2a648:	mov	r4, r1
   2a64c:	mov	r7, r0
   2a650:	cmp	r0, #0
   2a654:	beq	2a66c <__assert_fail@plt+0x18f6c>
   2a658:	mov	r0, #1
   2a65c:	add	r0, r0, r5, lsr #1
   2a660:	adds	r5, r5, r0
   2a664:	bcc	2a684 <__assert_fail@plt+0x18f84>
   2a668:	b	2a6b8 <__assert_fail@plt+0x18fb8>
   2a66c:	cmp	r5, #0
   2a670:	bne	2a684 <__assert_fail@plt+0x18f84>
   2a674:	mov	r0, #64	; 0x40
   2a678:	cmp	r6, #64	; 0x40
   2a67c:	udiv	r5, r0, r6
   2a680:	addhi	r5, r5, #1
   2a684:	mov	r0, r7
   2a688:	mov	r1, r5
   2a68c:	mov	r2, r6
   2a690:	bl	2af3c <__assert_fail@plt+0x1983c>
   2a694:	cmp	r0, #0
   2a698:	bne	2a6b0 <__assert_fail@plt+0x18fb0>
   2a69c:	cmp	r7, #0
   2a6a0:	beq	2a6b8 <__assert_fail@plt+0x18fb8>
   2a6a4:	cmp	r6, #0
   2a6a8:	cmpne	r5, #0
   2a6ac:	bne	2a6b8 <__assert_fail@plt+0x18fb8>
   2a6b0:	str	r5, [r4]
   2a6b4:	pop	{r4, r5, r6, r7, fp, pc}
   2a6b8:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a6bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a6c0:	add	fp, sp, #24
   2a6c4:	mov	r8, r1
   2a6c8:	ldr	r1, [r1]
   2a6cc:	mov	r5, r0
   2a6d0:	add	r0, r1, r1, asr #1
   2a6d4:	cmp	r0, r1
   2a6d8:	mvnvs	r0, #-2147483648	; 0x80000000
   2a6dc:	cmp	r0, r3
   2a6e0:	mov	r7, r0
   2a6e4:	movgt	r7, r3
   2a6e8:	cmn	r3, #1
   2a6ec:	movle	r7, r0
   2a6f0:	ldr	r0, [fp, #8]
   2a6f4:	cmn	r0, #1
   2a6f8:	ble	2a720 <__assert_fail@plt+0x19020>
   2a6fc:	cmp	r0, #0
   2a700:	beq	2a774 <__assert_fail@plt+0x19074>
   2a704:	cmn	r7, #1
   2a708:	ble	2a748 <__assert_fail@plt+0x19048>
   2a70c:	mvn	r4, #-2147483648	; 0x80000000
   2a710:	udiv	r6, r4, r0
   2a714:	cmp	r6, r7
   2a718:	bge	2a774 <__assert_fail@plt+0x19074>
   2a71c:	b	2a784 <__assert_fail@plt+0x19084>
   2a720:	cmn	r7, #1
   2a724:	ble	2a764 <__assert_fail@plt+0x19064>
   2a728:	cmn	r0, #1
   2a72c:	beq	2a774 <__assert_fail@plt+0x19074>
   2a730:	mov	r6, #-2147483648	; 0x80000000
   2a734:	mvn	r4, #-2147483648	; 0x80000000
   2a738:	sdiv	r6, r6, r0
   2a73c:	cmp	r6, r7
   2a740:	bge	2a774 <__assert_fail@plt+0x19074>
   2a744:	b	2a784 <__assert_fail@plt+0x19084>
   2a748:	beq	2a774 <__assert_fail@plt+0x19074>
   2a74c:	mov	r6, #-2147483648	; 0x80000000
   2a750:	mvn	r4, #-2147483648	; 0x80000000
   2a754:	sdiv	r6, r6, r7
   2a758:	cmp	r6, r0
   2a75c:	bge	2a774 <__assert_fail@plt+0x19074>
   2a760:	b	2a784 <__assert_fail@plt+0x19084>
   2a764:	mvn	r4, #-2147483648	; 0x80000000
   2a768:	sdiv	r6, r4, r0
   2a76c:	cmp	r7, r6
   2a770:	blt	2a784 <__assert_fail@plt+0x19084>
   2a774:	mul	r6, r7, r0
   2a778:	mov	r4, #64	; 0x40
   2a77c:	cmp	r6, #63	; 0x3f
   2a780:	bgt	2a78c <__assert_fail@plt+0x1908c>
   2a784:	sdiv	r7, r4, r0
   2a788:	mul	r6, r7, r0
   2a78c:	cmp	r5, #0
   2a790:	moveq	r4, #0
   2a794:	streq	r4, [r8]
   2a798:	sub	r4, r7, r1
   2a79c:	cmp	r4, r2
   2a7a0:	bge	2a84c <__assert_fail@plt+0x1914c>
   2a7a4:	add	r7, r1, r2
   2a7a8:	mov	r6, #0
   2a7ac:	mov	r2, #0
   2a7b0:	cmp	r7, r3
   2a7b4:	movwgt	r6, #1
   2a7b8:	cmn	r3, #1
   2a7bc:	movwgt	r2, #1
   2a7c0:	cmp	r7, r1
   2a7c4:	bvs	2a880 <__assert_fail@plt+0x19180>
   2a7c8:	ands	r1, r2, r6
   2a7cc:	bne	2a880 <__assert_fail@plt+0x19180>
   2a7d0:	cmn	r0, #1
   2a7d4:	ble	2a7fc <__assert_fail@plt+0x190fc>
   2a7d8:	cmp	r0, #0
   2a7dc:	beq	2a848 <__assert_fail@plt+0x19148>
   2a7e0:	cmn	r7, #1
   2a7e4:	ble	2a820 <__assert_fail@plt+0x19120>
   2a7e8:	mvn	r1, #-2147483648	; 0x80000000
   2a7ec:	udiv	r1, r1, r0
   2a7f0:	cmp	r1, r7
   2a7f4:	bge	2a848 <__assert_fail@plt+0x19148>
   2a7f8:	b	2a880 <__assert_fail@plt+0x19180>
   2a7fc:	cmn	r7, #1
   2a800:	ble	2a838 <__assert_fail@plt+0x19138>
   2a804:	cmn	r0, #1
   2a808:	beq	2a848 <__assert_fail@plt+0x19148>
   2a80c:	mov	r1, #-2147483648	; 0x80000000
   2a810:	sdiv	r1, r1, r0
   2a814:	cmp	r1, r7
   2a818:	bge	2a848 <__assert_fail@plt+0x19148>
   2a81c:	b	2a880 <__assert_fail@plt+0x19180>
   2a820:	beq	2a848 <__assert_fail@plt+0x19148>
   2a824:	mov	r1, #-2147483648	; 0x80000000
   2a828:	sdiv	r1, r1, r7
   2a82c:	cmp	r1, r0
   2a830:	bge	2a848 <__assert_fail@plt+0x19148>
   2a834:	b	2a880 <__assert_fail@plt+0x19180>
   2a838:	mvn	r1, #-2147483648	; 0x80000000
   2a83c:	sdiv	r1, r1, r0
   2a840:	cmp	r7, r1
   2a844:	blt	2a880 <__assert_fail@plt+0x19180>
   2a848:	mul	r6, r7, r0
   2a84c:	mov	r0, r5
   2a850:	mov	r1, r6
   2a854:	bl	2aab4 <__assert_fail@plt+0x193b4>
   2a858:	cmp	r6, #0
   2a85c:	movwne	r6, #1
   2a860:	cmp	r0, #0
   2a864:	bne	2a878 <__assert_fail@plt+0x19178>
   2a868:	clz	r1, r5
   2a86c:	lsr	r1, r1, #5
   2a870:	orrs	r1, r1, r6
   2a874:	bne	2a880 <__assert_fail@plt+0x19180>
   2a878:	str	r7, [r8]
   2a87c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a880:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a884:	push	{fp, lr}
   2a888:	mov	fp, sp
   2a88c:	mov	r1, #1
   2a890:	bl	2aa30 <__assert_fail@plt+0x19330>
   2a894:	cmp	r0, #0
   2a898:	popne	{fp, pc}
   2a89c:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a8a0:	push	{fp, lr}
   2a8a4:	mov	fp, sp
   2a8a8:	bl	2aa30 <__assert_fail@plt+0x19330>
   2a8ac:	cmp	r0, #0
   2a8b0:	popne	{fp, pc}
   2a8b4:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a8b8:	push	{fp, lr}
   2a8bc:	mov	fp, sp
   2a8c0:	mov	r1, #1
   2a8c4:	bl	2aa30 <__assert_fail@plt+0x19330>
   2a8c8:	cmp	r0, #0
   2a8cc:	popne	{fp, pc}
   2a8d0:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a8d4:	push	{fp, lr}
   2a8d8:	mov	fp, sp
   2a8dc:	bl	2aa30 <__assert_fail@plt+0x19330>
   2a8e0:	cmp	r0, #0
   2a8e4:	popne	{fp, pc}
   2a8e8:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a8ec:	push	{r4, r5, r6, sl, fp, lr}
   2a8f0:	add	fp, sp, #16
   2a8f4:	mov	r5, r0
   2a8f8:	mov	r0, r1
   2a8fc:	mov	r4, r1
   2a900:	bl	2aa84 <__assert_fail@plt+0x19384>
   2a904:	cmp	r0, #0
   2a908:	beq	2a924 <__assert_fail@plt+0x19224>
   2a90c:	mov	r1, r5
   2a910:	mov	r2, r4
   2a914:	mov	r6, r0
   2a918:	bl	11448 <memcpy@plt>
   2a91c:	mov	r0, r6
   2a920:	pop	{r4, r5, r6, sl, fp, pc}
   2a924:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a928:	push	{r4, r5, r6, sl, fp, lr}
   2a92c:	add	fp, sp, #16
   2a930:	mov	r5, r0
   2a934:	mov	r0, r1
   2a938:	mov	r4, r1
   2a93c:	bl	2aa84 <__assert_fail@plt+0x19384>
   2a940:	cmp	r0, #0
   2a944:	beq	2a960 <__assert_fail@plt+0x19260>
   2a948:	mov	r1, r5
   2a94c:	mov	r2, r4
   2a950:	mov	r6, r0
   2a954:	bl	11448 <memcpy@plt>
   2a958:	mov	r0, r6
   2a95c:	pop	{r4, r5, r6, sl, fp, pc}
   2a960:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a964:	push	{r4, r5, r6, sl, fp, lr}
   2a968:	add	fp, sp, #16
   2a96c:	mov	r5, r0
   2a970:	add	r0, r1, #1
   2a974:	mov	r4, r1
   2a978:	bl	2aa84 <__assert_fail@plt+0x19384>
   2a97c:	cmp	r0, #0
   2a980:	beq	2a9a8 <__assert_fail@plt+0x192a8>
   2a984:	mov	r6, r0
   2a988:	mov	r0, #0
   2a98c:	mov	r1, r5
   2a990:	mov	r2, r4
   2a994:	strb	r0, [r6, r4]
   2a998:	mov	r0, r6
   2a99c:	bl	11448 <memcpy@plt>
   2a9a0:	mov	r0, r6
   2a9a4:	pop	{r4, r5, r6, sl, fp, pc}
   2a9a8:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a9ac:	push	{r4, r5, r6, sl, fp, lr}
   2a9b0:	add	fp, sp, #16
   2a9b4:	mov	r4, r0
   2a9b8:	bl	115bc <strlen@plt>
   2a9bc:	add	r5, r0, #1
   2a9c0:	mov	r0, r5
   2a9c4:	bl	2aa84 <__assert_fail@plt+0x19384>
   2a9c8:	cmp	r0, #0
   2a9cc:	beq	2a9e8 <__assert_fail@plt+0x192e8>
   2a9d0:	mov	r1, r4
   2a9d4:	mov	r2, r5
   2a9d8:	mov	r6, r0
   2a9dc:	bl	11448 <memcpy@plt>
   2a9e0:	mov	r0, r6
   2a9e4:	pop	{r4, r5, r6, sl, fp, pc}
   2a9e8:	bl	2a9ec <__assert_fail@plt+0x192ec>
   2a9ec:	push	{fp, lr}
   2a9f0:	mov	fp, sp
   2a9f4:	movw	r0, #53576	; 0xd148
   2a9f8:	movw	r1, #49945	; 0xc319
   2a9fc:	mov	r2, #5
   2aa00:	movt	r0, #3
   2aa04:	movt	r1, #2
   2aa08:	ldr	r4, [r0]
   2aa0c:	mov	r0, #0
   2aa10:	bl	11490 <dcgettext@plt>
   2aa14:	movw	r2, #48144	; 0xbc10
   2aa18:	mov	r3, r0
   2aa1c:	mov	r0, r4
   2aa20:	mov	r1, #0
   2aa24:	movt	r2, #2
   2aa28:	bl	1152c <error@plt>
   2aa2c:	bl	116e8 <abort@plt>
   2aa30:	clz	r2, r1
   2aa34:	clz	r3, r0
   2aa38:	lsr	r2, r2, #5
   2aa3c:	lsr	r3, r3, #5
   2aa40:	orrs	r2, r3, r2
   2aa44:	movwne	r1, #1
   2aa48:	movwne	r0, #1
   2aa4c:	cmp	r1, #0
   2aa50:	beq	2aa80 <__assert_fail@plt+0x19380>
   2aa54:	mvn	r2, #-2147483648	; 0x80000000
   2aa58:	udiv	r2, r2, r1
   2aa5c:	cmp	r2, r0
   2aa60:	bcs	2aa80 <__assert_fail@plt+0x19380>
   2aa64:	push	{fp, lr}
   2aa68:	mov	fp, sp
   2aa6c:	bl	115ec <__errno_location@plt>
   2aa70:	mov	r1, #12
   2aa74:	str	r1, [r0]
   2aa78:	mov	r0, #0
   2aa7c:	pop	{fp, pc}
   2aa80:	b	11394 <calloc@plt>
   2aa84:	cmp	r0, #0
   2aa88:	movweq	r0, #1
   2aa8c:	cmn	r0, #1
   2aa90:	ble	2aa98 <__assert_fail@plt+0x19398>
   2aa94:	b	11550 <malloc@plt>
   2aa98:	push	{fp, lr}
   2aa9c:	mov	fp, sp
   2aaa0:	bl	115ec <__errno_location@plt>
   2aaa4:	mov	r1, #12
   2aaa8:	str	r1, [r0]
   2aaac:	mov	r0, #0
   2aab0:	pop	{fp, pc}
   2aab4:	push	{fp, lr}
   2aab8:	mov	fp, sp
   2aabc:	cmp	r0, #0
   2aac0:	beq	2aadc <__assert_fail@plt+0x193dc>
   2aac4:	cmp	r1, #0
   2aac8:	beq	2aae8 <__assert_fail@plt+0x193e8>
   2aacc:	cmn	r1, #1
   2aad0:	ble	2aaf4 <__assert_fail@plt+0x193f4>
   2aad4:	pop	{fp, lr}
   2aad8:	b	114a8 <realloc@plt>
   2aadc:	mov	r0, r1
   2aae0:	pop	{fp, lr}
   2aae4:	b	2aa84 <__assert_fail@plt+0x19384>
   2aae8:	bl	13de4 <__assert_fail@plt+0x26e4>
   2aaec:	mov	r0, #0
   2aaf0:	pop	{fp, pc}
   2aaf4:	bl	115ec <__errno_location@plt>
   2aaf8:	mov	r1, #12
   2aafc:	str	r1, [r0]
   2ab00:	mov	r0, #0
   2ab04:	pop	{fp, pc}
   2ab08:	push	{r4, r5, r6, sl, fp, lr}
   2ab0c:	add	fp, sp, #16
   2ab10:	mov	r4, r0
   2ab14:	bl	11514 <__fpending@plt>
   2ab18:	ldr	r6, [r4]
   2ab1c:	mov	r5, r0
   2ab20:	mov	r0, r4
   2ab24:	bl	2ac4c <__assert_fail@plt+0x1954c>
   2ab28:	tst	r6, #32
   2ab2c:	bne	2ab64 <__assert_fail@plt+0x19464>
   2ab30:	cmp	r0, #0
   2ab34:	mov	r4, r0
   2ab38:	mvnne	r4, #0
   2ab3c:	cmp	r5, #0
   2ab40:	bne	2ab70 <__assert_fail@plt+0x19470>
   2ab44:	cmp	r0, #0
   2ab48:	beq	2ab70 <__assert_fail@plt+0x19470>
   2ab4c:	bl	115ec <__errno_location@plt>
   2ab50:	ldr	r0, [r0]
   2ab54:	subs	r4, r0, #9
   2ab58:	mvnne	r4, #0
   2ab5c:	mov	r0, r4
   2ab60:	pop	{r4, r5, r6, sl, fp, pc}
   2ab64:	mvn	r4, #0
   2ab68:	cmp	r0, #0
   2ab6c:	beq	2ab78 <__assert_fail@plt+0x19478>
   2ab70:	mov	r0, r4
   2ab74:	pop	{r4, r5, r6, sl, fp, pc}
   2ab78:	bl	115ec <__errno_location@plt>
   2ab7c:	mov	r1, #0
   2ab80:	str	r1, [r0]
   2ab84:	mov	r0, r4
   2ab88:	pop	{r4, r5, r6, sl, fp, pc}
   2ab8c:	push	{r4, r5, r6, r7, fp, lr}
   2ab90:	add	fp, sp, #16
   2ab94:	mov	r4, r0
   2ab98:	ldr	r0, [r0, #4]
   2ab9c:	mov	r5, r1
   2aba0:	cmp	r0, r1
   2aba4:	movcs	r0, #1
   2aba8:	strcs	r5, [r4]
   2abac:	popcs	{r4, r5, r6, r7, fp, pc}
   2abb0:	mov	r6, r3
   2abb4:	cmp	r3, #0
   2abb8:	beq	2abe0 <__assert_fail@plt+0x194e0>
   2abbc:	mvn	r0, #0
   2abc0:	udiv	r0, r0, r6
   2abc4:	cmp	r0, r5
   2abc8:	bcs	2abe0 <__assert_fail@plt+0x194e0>
   2abcc:	bl	115ec <__errno_location@plt>
   2abd0:	mov	r1, #12
   2abd4:	str	r1, [r0]
   2abd8:	mov	r0, #0
   2abdc:	pop	{r4, r5, r6, r7, fp, pc}
   2abe0:	ldr	r0, [r4, #8]
   2abe4:	mul	r1, r6, r5
   2abe8:	cmp	r0, r2
   2abec:	beq	2ac04 <__assert_fail@plt+0x19504>
   2abf0:	bl	2aab4 <__assert_fail@plt+0x193b4>
   2abf4:	mov	r7, r0
   2abf8:	cmp	r0, #0
   2abfc:	bne	2ac34 <__assert_fail@plt+0x19534>
   2ac00:	b	2ac44 <__assert_fail@plt+0x19544>
   2ac04:	mov	r0, r1
   2ac08:	bl	2aa84 <__assert_fail@plt+0x19384>
   2ac0c:	cmp	r0, #0
   2ac10:	beq	2ac44 <__assert_fail@plt+0x19544>
   2ac14:	ldr	r1, [r4, #8]
   2ac18:	mov	r7, r0
   2ac1c:	cmp	r1, #0
   2ac20:	beq	2ac34 <__assert_fail@plt+0x19534>
   2ac24:	ldr	r0, [r4]
   2ac28:	mul	r2, r0, r6
   2ac2c:	mov	r0, r7
   2ac30:	bl	11448 <memcpy@plt>
   2ac34:	mov	r0, #1
   2ac38:	str	r5, [r4]
   2ac3c:	stmib	r4, {r5, r7}
   2ac40:	pop	{r4, r5, r6, r7, fp, pc}
   2ac44:	mov	r0, #0
   2ac48:	pop	{r4, r5, r6, r7, fp, pc}
   2ac4c:	push	{r4, r5, r6, sl, fp, lr}
   2ac50:	add	fp, sp, #16
   2ac54:	sub	sp, sp, #8
   2ac58:	mov	r4, r0
   2ac5c:	bl	11634 <fileno@plt>
   2ac60:	cmn	r0, #1
   2ac64:	ble	2acd8 <__assert_fail@plt+0x195d8>
   2ac68:	mov	r0, r4
   2ac6c:	bl	11568 <__freading@plt>
   2ac70:	cmp	r0, #0
   2ac74:	beq	2aca0 <__assert_fail@plt+0x195a0>
   2ac78:	mov	r0, r4
   2ac7c:	bl	11634 <fileno@plt>
   2ac80:	mov	r1, #1
   2ac84:	mov	r2, #0
   2ac88:	mov	r3, #0
   2ac8c:	str	r1, [sp]
   2ac90:	bl	114fc <lseek64@plt>
   2ac94:	and	r0, r0, r1
   2ac98:	cmn	r0, #1
   2ac9c:	beq	2acd8 <__assert_fail@plt+0x195d8>
   2aca0:	mov	r0, r4
   2aca4:	bl	2ace8 <__assert_fail@plt+0x195e8>
   2aca8:	cmp	r0, #0
   2acac:	beq	2acd8 <__assert_fail@plt+0x195d8>
   2acb0:	bl	115ec <__errno_location@plt>
   2acb4:	ldr	r6, [r0]
   2acb8:	mov	r5, r0
   2acbc:	mov	r0, r4
   2acc0:	bl	11658 <fclose@plt>
   2acc4:	cmp	r6, #0
   2acc8:	strne	r6, [r5]
   2accc:	mvnne	r0, #0
   2acd0:	sub	sp, fp, #16
   2acd4:	pop	{r4, r5, r6, sl, fp, pc}
   2acd8:	mov	r0, r4
   2acdc:	sub	sp, fp, #16
   2ace0:	pop	{r4, r5, r6, sl, fp, lr}
   2ace4:	b	11658 <fclose@plt>
   2ace8:	push	{r4, sl, fp, lr}
   2acec:	add	fp, sp, #8
   2acf0:	sub	sp, sp, #8
   2acf4:	mov	r4, r0
   2acf8:	cmp	r0, #0
   2acfc:	beq	2ad18 <__assert_fail@plt+0x19618>
   2ad00:	mov	r0, r4
   2ad04:	bl	11568 <__freading@plt>
   2ad08:	cmp	r0, #0
   2ad0c:	ldrbne	r0, [r4, #1]
   2ad10:	tstne	r0, #1
   2ad14:	bne	2ad28 <__assert_fail@plt+0x19628>
   2ad18:	mov	r0, r4
   2ad1c:	sub	sp, fp, #8
   2ad20:	pop	{r4, sl, fp, lr}
   2ad24:	b	11400 <fflush@plt>
   2ad28:	mov	r0, #1
   2ad2c:	mov	r2, #0
   2ad30:	mov	r3, #0
   2ad34:	str	r0, [sp]
   2ad38:	mov	r0, r4
   2ad3c:	bl	2ad50 <__assert_fail@plt+0x19650>
   2ad40:	mov	r0, r4
   2ad44:	sub	sp, fp, #8
   2ad48:	pop	{r4, sl, fp, lr}
   2ad4c:	b	11400 <fflush@plt>
   2ad50:	push	{r4, r5, r6, r7, fp, lr}
   2ad54:	add	fp, sp, #16
   2ad58:	sub	sp, sp, #8
   2ad5c:	mov	r4, r0
   2ad60:	ldr	r0, [r0, #4]
   2ad64:	mov	r5, r3
   2ad68:	mov	r6, r2
   2ad6c:	ldr	r1, [r4, #8]
   2ad70:	cmp	r1, r0
   2ad74:	bne	2ad90 <__assert_fail@plt+0x19690>
   2ad78:	ldrd	r0, [r4, #16]
   2ad7c:	cmp	r1, r0
   2ad80:	bne	2ad90 <__assert_fail@plt+0x19690>
   2ad84:	ldr	r0, [r4, #36]	; 0x24
   2ad88:	cmp	r0, #0
   2ad8c:	beq	2ada8 <__assert_fail@plt+0x196a8>
   2ad90:	mov	r0, r4
   2ad94:	mov	r2, r6
   2ad98:	mov	r3, r5
   2ad9c:	sub	sp, fp, #16
   2ada0:	pop	{r4, r5, r6, r7, fp, lr}
   2ada4:	b	11664 <fseeko64@plt>
   2ada8:	ldr	r7, [fp, #8]
   2adac:	mov	r0, r4
   2adb0:	bl	11634 <fileno@plt>
   2adb4:	mov	r2, r6
   2adb8:	mov	r3, r5
   2adbc:	str	r7, [sp]
   2adc0:	bl	114fc <lseek64@plt>
   2adc4:	and	r2, r0, r1
   2adc8:	cmn	r2, #1
   2adcc:	mvneq	r0, #0
   2add0:	subeq	sp, fp, #16
   2add4:	popeq	{r4, r5, r6, r7, fp, pc}
   2add8:	strd	r0, [r4, #80]	; 0x50
   2addc:	ldr	r0, [r4]
   2ade0:	bic	r0, r0, #16
   2ade4:	str	r0, [r4]
   2ade8:	mov	r0, #0
   2adec:	sub	sp, fp, #16
   2adf0:	pop	{r4, r5, r6, r7, fp, pc}
   2adf4:	push	{fp, lr}
   2adf8:	mov	fp, sp
   2adfc:	mov	r0, #14
   2ae00:	bl	116a0 <nl_langinfo@plt>
   2ae04:	movw	r1, #47787	; 0xbaab
   2ae08:	cmp	r0, #0
   2ae0c:	movt	r1, #2
   2ae10:	movne	r1, r0
   2ae14:	movw	r0, #49962	; 0xc32a
   2ae18:	ldrb	r2, [r1]
   2ae1c:	movt	r0, #2
   2ae20:	cmp	r2, #0
   2ae24:	movne	r0, r1
   2ae28:	pop	{fp, pc}
   2ae2c:	push	{r4, sl, fp, lr}
   2ae30:	add	fp, sp, #8
   2ae34:	mov	r4, r0
   2ae38:	bl	1140c <wcwidth@plt>
   2ae3c:	cmn	r0, #1
   2ae40:	popgt	{r4, sl, fp, pc}
   2ae44:	mov	r0, r4
   2ae48:	bl	114cc <iswcntrl@plt>
   2ae4c:	clz	r0, r0
   2ae50:	lsr	r0, r0, #5
   2ae54:	pop	{r4, sl, fp, pc}
   2ae58:	push	{r4, r5, r6, sl, fp, lr}
   2ae5c:	add	fp, sp, #16
   2ae60:	mov	r4, r0
   2ae64:	mov	r0, r1
   2ae68:	mov	r5, r1
   2ae6c:	ldr	r1, [r0], #16
   2ae70:	cmp	r1, r0
   2ae74:	beq	2ae80 <__assert_fail@plt+0x19780>
   2ae78:	mov	r6, r1
   2ae7c:	b	2ae90 <__assert_fail@plt+0x19790>
   2ae80:	ldr	r2, [r5, #4]
   2ae84:	add	r6, r4, #16
   2ae88:	mov	r0, r6
   2ae8c:	bl	11448 <memcpy@plt>
   2ae90:	str	r6, [r4]
   2ae94:	ldr	r0, [r5, #4]
   2ae98:	str	r0, [r4, #4]
   2ae9c:	ldrb	r0, [r5, #8]
   2aea0:	strb	r0, [r4, #8]
   2aea4:	cmp	r0, #0
   2aea8:	ldrne	r0, [r5, #12]
   2aeac:	strne	r0, [r4, #12]
   2aeb0:	pop	{r4, r5, r6, sl, fp, pc}
   2aeb4:	movw	r2, #49968	; 0xc330
   2aeb8:	ubfx	r1, r0, #5, #3
   2aebc:	and	r0, r0, #31
   2aec0:	movt	r2, #2
   2aec4:	ldr	r1, [r2, r1, lsl #2]
   2aec8:	mov	r2, #1
   2aecc:	and	r0, r1, r2, lsl r0
   2aed0:	cmp	r0, #0
   2aed4:	movwne	r0, #1
   2aed8:	bx	lr
   2aedc:	push	{r4, r5, r6, r7, fp, lr}
   2aee0:	add	fp, sp, #16
   2aee4:	sub	sp, sp, #8
   2aee8:	add	r5, sp, #4
   2aeec:	cmp	r0, #0
   2aef0:	mov	r7, r2
   2aef4:	mov	r4, r1
   2aef8:	movne	r5, r0
   2aefc:	mov	r0, r5
   2af00:	bl	11520 <mbrtowc@plt>
   2af04:	mov	r6, r0
   2af08:	cmp	r7, #0
   2af0c:	beq	2af30 <__assert_fail@plt+0x19830>
   2af10:	cmn	r6, #2
   2af14:	bcc	2af30 <__assert_fail@plt+0x19830>
   2af18:	mov	r0, #0
   2af1c:	bl	2af78 <__assert_fail@plt+0x19878>
   2af20:	cmp	r0, #0
   2af24:	ldrbeq	r0, [r4]
   2af28:	moveq	r6, #1
   2af2c:	streq	r0, [r5]
   2af30:	mov	r0, r6
   2af34:	sub	sp, fp, #16
   2af38:	pop	{r4, r5, r6, r7, fp, pc}
   2af3c:	cmp	r2, #0
   2af40:	beq	2af70 <__assert_fail@plt+0x19870>
   2af44:	mvn	r3, #0
   2af48:	udiv	r3, r3, r2
   2af4c:	cmp	r3, r1
   2af50:	bcs	2af70 <__assert_fail@plt+0x19870>
   2af54:	push	{fp, lr}
   2af58:	mov	fp, sp
   2af5c:	bl	115ec <__errno_location@plt>
   2af60:	mov	r1, #12
   2af64:	str	r1, [r0]
   2af68:	mov	r0, #0
   2af6c:	pop	{fp, pc}
   2af70:	mul	r1, r2, r1
   2af74:	b	2aab4 <__assert_fail@plt+0x193b4>
   2af78:	push	{r4, sl, fp, lr}
   2af7c:	add	fp, sp, #8
   2af80:	sub	sp, sp, #264	; 0x108
   2af84:	add	r1, sp, #7
   2af88:	movw	r2, #257	; 0x101
   2af8c:	bl	2afdc <__assert_fail@plt+0x198dc>
   2af90:	mov	r4, #0
   2af94:	cmp	r0, #0
   2af98:	bne	2afd0 <__assert_fail@plt+0x198d0>
   2af9c:	movw	r1, #50000	; 0xc350
   2afa0:	add	r0, sp, #7
   2afa4:	movt	r1, #2
   2afa8:	bl	113d0 <strcmp@plt>
   2afac:	cmp	r0, #0
   2afb0:	beq	2afd0 <__assert_fail@plt+0x198d0>
   2afb4:	movw	r1, #50002	; 0xc352
   2afb8:	add	r0, sp, #7
   2afbc:	movt	r1, #2
   2afc0:	bl	113d0 <strcmp@plt>
   2afc4:	mov	r4, r0
   2afc8:	cmp	r0, #0
   2afcc:	movwne	r4, #1
   2afd0:	mov	r0, r4
   2afd4:	sub	sp, fp, #8
   2afd8:	pop	{r4, sl, fp, pc}
   2afdc:	push	{r4, r5, r6, r7, fp, lr}
   2afe0:	add	fp, sp, #16
   2afe4:	mov	r4, r1
   2afe8:	mov	r1, #0
   2afec:	mov	r6, r2
   2aff0:	bl	11688 <setlocale@plt>
   2aff4:	cmp	r0, #0
   2aff8:	beq	2b028 <__assert_fail@plt+0x19928>
   2affc:	mov	r7, r0
   2b000:	bl	115bc <strlen@plt>
   2b004:	cmp	r0, r6
   2b008:	bcs	2b048 <__assert_fail@plt+0x19948>
   2b00c:	add	r2, r0, #1
   2b010:	mov	r0, r4
   2b014:	mov	r1, r7
   2b018:	bl	11448 <memcpy@plt>
   2b01c:	mov	r5, #0
   2b020:	mov	r0, r5
   2b024:	pop	{r4, r5, r6, r7, fp, pc}
   2b028:	cmp	r6, #0
   2b02c:	mov	r5, #22
   2b030:	movne	r0, #0
   2b034:	strbne	r0, [r4]
   2b038:	movne	r0, r5
   2b03c:	popne	{r4, r5, r6, r7, fp, pc}
   2b040:	mov	r0, r5
   2b044:	pop	{r4, r5, r6, r7, fp, pc}
   2b048:	mov	r5, #34	; 0x22
   2b04c:	cmp	r6, #0
   2b050:	beq	2b070 <__assert_fail@plt+0x19970>
   2b054:	sub	r6, r6, #1
   2b058:	mov	r0, r4
   2b05c:	mov	r1, r7
   2b060:	mov	r2, r6
   2b064:	bl	11448 <memcpy@plt>
   2b068:	mov	r0, #0
   2b06c:	strb	r0, [r4, r6]
   2b070:	mov	r0, r5
   2b074:	pop	{r4, r5, r6, r7, fp, pc}
   2b078:	mov	r1, #0
   2b07c:	b	11688 <setlocale@plt>
   2b080:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b084:	mov	r7, r0
   2b088:	ldr	r6, [pc, #72]	; 2b0d8 <__assert_fail@plt+0x199d8>
   2b08c:	ldr	r5, [pc, #72]	; 2b0dc <__assert_fail@plt+0x199dc>
   2b090:	add	r6, pc, r6
   2b094:	add	r5, pc, r5
   2b098:	sub	r6, r6, r5
   2b09c:	mov	r8, r1
   2b0a0:	mov	r9, r2
   2b0a4:	bl	11368 <pthread_mutex_unlock@plt-0x20>
   2b0a8:	asrs	r6, r6, #2
   2b0ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b0b0:	mov	r4, #0
   2b0b4:	add	r4, r4, #1
   2b0b8:	ldr	r3, [r5], #4
   2b0bc:	mov	r2, r9
   2b0c0:	mov	r1, r8
   2b0c4:	mov	r0, r7
   2b0c8:	blx	r3
   2b0cc:	cmp	r6, r4
   2b0d0:	bne	2b0b4 <__assert_fail@plt+0x199b4>
   2b0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b0d8:	andeq	r1, r1, ip, ror #28
   2b0dc:	andeq	r1, r1, r4, ror #28
   2b0e0:	bx	lr
   2b0e4:	ldr	r3, [pc, #12]	; 2b0f8 <__assert_fail@plt+0x199f8>
   2b0e8:	mov	r1, #0
   2b0ec:	add	r3, pc, r3
   2b0f0:	ldr	r2, [r3]
   2b0f4:	b	11604 <__cxa_atexit@plt>
   2b0f8:	andeq	r2, r1, r0, asr r0

Disassembly of section .fini:

0002b0fc <.fini>:
   2b0fc:	push	{r3, lr}
   2b100:	pop	{r3, pc}
