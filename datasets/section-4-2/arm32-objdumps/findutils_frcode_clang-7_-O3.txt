
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010c94 <.init>:
   10c94:	push	{r3, lr}
   10c98:	bl	10f0c <__assert_fail@plt+0x48>
   10c9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ca0 <calloc@plt-0x14>:
   10ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca4:	ldr	lr, [pc, #4]	; 10cb0 <calloc@plt-0x4>
   10ca8:	add	lr, pc, lr
   10cac:	ldr	pc, [lr, #8]!
   10cb0:	andeq	r5, r1, r0, asr r3

00010cb4 <calloc@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #86016	; 0x15000
   10cbc:	ldr	pc, [ip, #848]!	; 0x350

00010cc0 <strcmp@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #86016	; 0x15000
   10cc8:	ldr	pc, [ip, #840]!	; 0x348

00010ccc <strtol@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #86016	; 0x15000
   10cd4:	ldr	pc, [ip, #832]!	; 0x340

00010cd8 <printf@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #86016	; 0x15000
   10ce0:	ldr	pc, [ip, #824]!	; 0x338

00010ce4 <fflush@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #816]!	; 0x330

00010cf0 <free@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #808]!	; 0x328

00010cfc <ferror@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #800]!	; 0x320

00010d08 <_exit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #792]!	; 0x318

00010d14 <memcpy@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #784]!	; 0x310

00010d20 <mbsinit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #776]!	; 0x308

00010d2c <memcmp@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #768]!	; 0x300

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #760]!	; 0x2f8

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d50 <iswprint@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #744]!	; 0x2e8

00010d5c <fwrite@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #736]!	; 0x2e0

00010d68 <lseek64@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #728]!	; 0x2d8

00010d74 <__ctype_get_mb_cur_max@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d80 <__fpending@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #712]!	; 0x2c8

00010d8c <mbrtowc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #704]!	; 0x2c0

00010d98 <error@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #696]!	; 0x2b8

00010da4 <malloc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #688]!	; 0x2b0

00010db0 <__libc_start_main@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dbc <__freading@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc8 <__gmon_start__@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #664]!	; 0x298

00010dd4 <getopt_long@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #656]!	; 0x290

00010de0 <__ctype_b_loc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #648]!	; 0x288

00010dec <exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #640]!	; 0x280

00010df8 <strlen@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #632]!	; 0x278

00010e04 <fprintf@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #624]!	; 0x270

00010e10 <__errno_location@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #616]!	; 0x268

00010e1c <__cxa_atexit@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #608]!	; 0x260

00010e28 <memset@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #600]!	; 0x258

00010e34 <fileno@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #592]!	; 0x250

00010e40 <fclose@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #584]!	; 0x248

00010e4c <fseeko64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #576]!	; 0x240

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #568]!	; 0x238

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #560]!	; 0x230

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #552]!	; 0x228

00010e7c <fputc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #544]!	; 0x220

00010e88 <putc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #536]!	; 0x218

00010e94 <getdelim@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #528]!	; 0x210

00010ea0 <fputs@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #520]!	; 0x208

00010eac <strncmp@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #512]!	; 0x200

00010eb8 <abort@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #504]!	; 0x1f8

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #496]!	; 0x1f0

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	mov	fp, #0
   10ed4:	mov	lr, #0
   10ed8:	pop	{r1}		; (ldr r1, [sp], #4)
   10edc:	mov	r2, sp
   10ee0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ee4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ee8:	ldr	ip, [pc, #16]	; 10f00 <__assert_fail@plt+0x3c>
   10eec:	push	{ip}		; (str ip, [sp, #-4]!)
   10ef0:	ldr	r0, [pc, #12]	; 10f04 <__assert_fail@plt+0x40>
   10ef4:	ldr	r3, [pc, #12]	; 10f08 <__assert_fail@plt+0x44>
   10ef8:	bl	10db0 <__libc_start_main@plt>
   10efc:	bl	10eb8 <abort@plt>
   10f00:	andeq	r4, r1, ip, lsr #18
   10f04:	andeq	r0, r1, r0, asr #31
   10f08:	andeq	r4, r1, ip, asr #17
   10f0c:	ldr	r3, [pc, #20]	; 10f28 <__assert_fail@plt+0x64>
   10f10:	ldr	r2, [pc, #20]	; 10f2c <__assert_fail@plt+0x68>
   10f14:	add	r3, pc, r3
   10f18:	ldr	r2, [r3, r2]
   10f1c:	cmp	r2, #0
   10f20:	bxeq	lr
   10f24:	b	10dc8 <__gmon_start__@plt>
   10f28:	andeq	r5, r1, r4, ror #1
   10f2c:	andeq	r0, r0, r0, asr #1
   10f30:	ldr	r0, [pc, #24]	; 10f50 <__assert_fail@plt+0x8c>
   10f34:	ldr	r3, [pc, #24]	; 10f54 <__assert_fail@plt+0x90>
   10f38:	cmp	r3, r0
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0x94>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r6, r2, r8, lsl r1
   10f54:	andeq	r6, r2, r8, lsl r1
   10f58:	andeq	r0, r0, r0
   10f5c:	ldr	r0, [pc, #36]	; 10f88 <__assert_fail@plt+0xc4>
   10f60:	ldr	r1, [pc, #36]	; 10f8c <__assert_fail@plt+0xc8>
   10f64:	sub	r1, r1, r0
   10f68:	asr	r1, r1, #2
   10f6c:	add	r1, r1, r1, lsr #31
   10f70:	asrs	r1, r1, #1
   10f74:	bxeq	lr
   10f78:	ldr	r3, [pc, #16]	; 10f90 <__assert_fail@plt+0xcc>
   10f7c:	cmp	r3, #0
   10f80:	bxeq	lr
   10f84:	bx	r3
   10f88:	andeq	r6, r2, r8, lsl r1
   10f8c:	andeq	r6, r2, r8, lsl r1
   10f90:	andeq	r0, r0, r0
   10f94:	push	{r4, lr}
   10f98:	ldr	r4, [pc, #24]	; 10fb8 <__assert_fail@plt+0xf4>
   10f9c:	ldrb	r3, [r4]
   10fa0:	cmp	r3, #0
   10fa4:	popne	{r4, pc}
   10fa8:	bl	10f30 <__assert_fail@plt+0x6c>
   10fac:	mov	r3, #1
   10fb0:	strb	r3, [r4]
   10fb4:	pop	{r4, pc}
   10fb8:	andeq	r6, r2, ip, lsr r1
   10fbc:	b	10f5c <__assert_fail@plt+0x98>
   10fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc4:	add	fp, sp, #28
   10fc8:	sub	sp, sp, #28
   10fcc:	mov	sl, r0
   10fd0:	ldr	r0, [r1]
   10fd4:	mov	r9, r1
   10fd8:	cmp	r0, #0
   10fdc:	movweq	r0, #18772	; 0x4954
   10fe0:	movteq	r0, #1
   10fe4:	bl	1186c <__assert_fail@plt+0x9a8>
   10fe8:	movw	r0, #6016	; 0x1780
   10fec:	movt	r0, #1
   10ff0:	bl	14930 <__assert_fail@plt+0x3a6c>
   10ff4:	cmp	r0, #0
   10ff8:	bne	11504 <__assert_fail@plt+0x640>
   10ffc:	movw	r0, #1026	; 0x402
   11000:	str	r0, [sp, #16]
   11004:	movw	r0, #1026	; 0x402
   11008:	bl	13eb8 <__assert_fail@plt+0x2ff4>
   1100c:	str	r0, [sp, #20]
   11010:	movw	r0, #1026	; 0x402
   11014:	bl	13eb8 <__assert_fail@plt+0x2ff4>
   11018:	mov	r1, #0
   1101c:	movw	r2, #18814	; 0x497e
   11020:	movw	r3, #19300	; 0x4b64
   11024:	mov	r5, r0
   11028:	mov	r4, #10
   1102c:	mov	r8, #0
   11030:	strb	r1, [r0]
   11034:	mov	r0, #0
   11038:	movt	r2, #1
   1103c:	movt	r3, #1
   11040:	str	r0, [sp, #8]
   11044:	b	11064 <__assert_fail@plt+0x1a0>
   11048:	movw	r3, #19300	; 0x4b64
   1104c:	mov	r2, sl
   11050:	mov	r4, #0
   11054:	mov	sl, r7
   11058:	mov	r9, r6
   1105c:	mov	r1, #0
   11060:	movt	r3, #1
   11064:	str	r1, [sp]
   11068:	mov	r0, sl
   1106c:	mov	r1, r9
   11070:	mov	r7, sl
   11074:	mov	r6, r9
   11078:	mov	sl, r2
   1107c:	bl	10dd4 <getopt_long@plt>
   11080:	cmp	r0, #82	; 0x52
   11084:	ble	110ec <__assert_fail@plt+0x228>
   11088:	movw	r9, #24888	; 0x6138
   1108c:	cmp	r0, #83	; 0x53
   11090:	movt	r9, #2
   11094:	bne	1117c <__assert_fail@plt+0x2b8>
   11098:	str	r6, [sp, #4]
   1109c:	ldr	r6, [r9]
   110a0:	bl	10e10 <__errno_location@plt>
   110a4:	mov	r1, #0
   110a8:	mov	r8, r0
   110ac:	mov	r2, #10
   110b0:	str	r1, [r0]
   110b4:	mov	r0, r6
   110b8:	add	r1, sp, #24
   110bc:	bl	10ccc <strtol@plt>
   110c0:	cmp	r0, #0
   110c4:	beq	11100 <__assert_fail@plt+0x23c>
   110c8:	mov	r3, r0
   110cc:	add	r0, r0, #-2147483647	; 0x80000001
   110d0:	mov	r2, r7
   110d4:	cmp	r0, #1
   110d8:	bhi	11118 <__assert_fail@plt+0x254>
   110dc:	ldr	r0, [r8]
   110e0:	cmp	r0, #0
   110e4:	beq	11118 <__assert_fail@plt+0x254>
   110e8:	b	11434 <__assert_fail@plt+0x570>
   110ec:	cmn	r0, #1
   110f0:	beq	1119c <__assert_fail@plt+0x2d8>
   110f4:	cmp	r0, #48	; 0x30
   110f8:	beq	11048 <__assert_fail@plt+0x184>
   110fc:	b	114bc <__assert_fail@plt+0x5f8>
   11100:	mov	r3, r0
   11104:	ldr	r0, [r9]
   11108:	ldr	r1, [sp, #24]
   1110c:	mov	r2, r7
   11110:	cmp	r1, r0
   11114:	beq	1145c <__assert_fail@plt+0x598>
   11118:	ldr	r7, [sp, #24]
   1111c:	ldrb	r0, [r7]
   11120:	cmp	r0, #0
   11124:	bne	11480 <__assert_fail@plt+0x5bc>
   11128:	ldr	r9, [sp, #4]
   1112c:	mov	r7, r2
   11130:	str	r3, [sp, #8]
   11134:	cmp	r3, #2
   11138:	movw	r3, #19300	; 0x4b64
   1113c:	mov	r2, sl
   11140:	mov	r8, #1
   11144:	mov	r1, #0
   11148:	mov	sl, r7
   1114c:	movt	r3, #1
   11150:	bcc	11064 <__assert_fail@plt+0x1a0>
   11154:	movw	r1, #18820	; 0x4984
   11158:	mov	r0, #0
   1115c:	mov	r2, #5
   11160:	movt	r1, #1
   11164:	bl	10d38 <dcgettext@plt>
   11168:	ldr	r3, [sp, #8]
   1116c:	mov	r2, r0
   11170:	mov	r0, #1
   11174:	mov	r1, #0
   11178:	bl	10d98 <error@plt>
   1117c:	cmp	r0, #118	; 0x76
   11180:	bne	114ac <__assert_fail@plt+0x5e8>
   11184:	movw	r0, #18772	; 0x4954
   11188:	movt	r0, #1
   1118c:	bl	11644 <__assert_fail@plt+0x780>
   11190:	mov	r0, #0
   11194:	sub	sp, fp, #28
   11198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1119c:	movw	r0, #24864	; 0x6120
   111a0:	movt	r0, #2
   111a4:	ldr	r0, [r0]
   111a8:	cmp	r0, r7
   111ac:	bne	11530 <__assert_fail@plt+0x66c>
   111b0:	cmp	r8, #0
   111b4:	beq	111e8 <__assert_fail@plt+0x324>
   111b8:	ldr	r1, [sp, #8]
   111bc:	movw	r6, #24884	; 0x6134
   111c0:	mov	r0, #49	; 0x31
   111c4:	movt	r6, #2
   111c8:	cmp	r1, #0
   111cc:	ldr	r1, [r6]
   111d0:	movweq	r0, #48	; 0x30
   111d4:	bl	10e7c <fputc@plt>
   111d8:	ldr	r1, [r6]
   111dc:	mov	r0, #0
   111e0:	bl	10e7c <fputc@plt>
   111e4:	b	11210 <__assert_fail@plt+0x34c>
   111e8:	movw	r0, #24884	; 0x6134
   111ec:	mov	r1, #1
   111f0:	mov	r2, #10
   111f4:	movt	r0, #2
   111f8:	ldr	r3, [r0]
   111fc:	movw	r0, #19364	; 0x4ba4
   11200:	movt	r0, #1
   11204:	bl	10d5c <fwrite@plt>
   11208:	cmp	r0, #10
   1120c:	bne	1155c <__assert_fail@plt+0x698>
   11210:	movw	r0, #24880	; 0x6130
   11214:	add	r1, sp, #16
   11218:	mov	r2, r4
   1121c:	movt	r0, #2
   11220:	ldr	r3, [r0]
   11224:	add	r0, sp, #20
   11228:	bl	10e94 <getdelim@plt>
   1122c:	mov	r1, r0
   11230:	ldr	r0, [sp, #20]
   11234:	cmp	r1, #1
   11238:	blt	11414 <__assert_fail@plt+0x550>
   1123c:	movw	r9, #1026	; 0x402
   11240:	mov	r7, #0
   11244:	str	r4, [sp, #12]
   11248:	sub	r1, r1, #1
   1124c:	ldrb	r2, [r0, r1]
   11250:	cmp	r4, r2
   11254:	bne	11274 <__assert_fail@plt+0x3b0>
   11258:	mov	r2, #0
   1125c:	strb	r2, [r0, r1]
   11260:	ldrb	r2, [r5]
   11264:	mov	r1, r5
   11268:	cmp	r2, #0
   1126c:	bne	112a8 <__assert_fail@plt+0x3e4>
   11270:	b	112f8 <__assert_fail@plt+0x434>
   11274:	movw	r1, #18920	; 0x49e8
   11278:	mov	r0, #0
   1127c:	mov	r2, #5
   11280:	movt	r1, #1
   11284:	bl	10d38 <dcgettext@plt>
   11288:	mov	r2, r0
   1128c:	mov	r0, #0
   11290:	mov	r1, #0
   11294:	bl	10d98 <error@plt>
   11298:	ldrb	r2, [r5]
   1129c:	mov	r1, r5
   112a0:	cmp	r2, #0
   112a4:	beq	112f8 <__assert_fail@plt+0x434>
   112a8:	ldr	r0, [sp, #20]
   112ac:	ldrb	r1, [r0]
   112b0:	cmp	r2, r1
   112b4:	mov	r1, r5
   112b8:	bne	112f8 <__assert_fail@plt+0x434>
   112bc:	mov	r1, #1
   112c0:	cmn	r1, #-2147483647	; 0x80000001
   112c4:	beq	112f0 <__assert_fail@plt+0x42c>
   112c8:	ldrb	r3, [r5, r1]
   112cc:	add	r2, r1, #1
   112d0:	cmp	r3, #0
   112d4:	beq	112e8 <__assert_fail@plt+0x424>
   112d8:	ldrb	r1, [r0, r1]
   112dc:	cmp	r3, r1
   112e0:	mov	r1, r2
   112e4:	beq	112c0 <__assert_fail@plt+0x3fc>
   112e8:	add	r0, r5, r2
   112ec:	b	112f4 <__assert_fail@plt+0x430>
   112f0:	add	r0, r5, r1
   112f4:	sub	r1, r0, #1
   112f8:	sub	sl, r1, r5
   112fc:	mov	r1, #0
   11300:	movw	r4, #24884	; 0x6134
   11304:	sub	r6, sl, r7
   11308:	movt	r4, #2
   1130c:	add	r0, r6, #32768	; 0x8000
   11310:	cmp	r1, r0, lsr #16
   11314:	rsbne	r6, r7, #0
   11318:	movwne	sl, #0
   1131c:	cmp	r8, #0
   11320:	bne	11394 <__assert_fail@plt+0x4d0>
   11324:	ldr	r1, [r4]
   11328:	add	r0, r6, #127	; 0x7f
   1132c:	cmp	r0, #255	; 0xff
   11330:	bcc	11384 <__assert_fail@plt+0x4c0>
   11334:	mov	r0, #128	; 0x80
   11338:	bl	10e88 <putc@plt>
   1133c:	cmn	r0, #1
   11340:	beq	11430 <__assert_fail@plt+0x56c>
   11344:	cmp	r6, #32768	; 0x8000
   11348:	bge	114c4 <__assert_fail@plt+0x600>
   1134c:	cmn	r6, #32768	; 0x8000
   11350:	blt	114e4 <__assert_fail@plt+0x620>
   11354:	ldr	r7, [r4]
   11358:	asr	r0, r6, #8
   1135c:	mov	r1, r7
   11360:	bl	10e88 <putc@plt>
   11364:	cmn	r0, #1
   11368:	beq	11430 <__assert_fail@plt+0x56c>
   1136c:	mov	r0, r6
   11370:	mov	r1, r7
   11374:	bl	10e88 <putc@plt>
   11378:	cmn	r0, #1
   1137c:	bne	11394 <__assert_fail@plt+0x4d0>
   11380:	b	11430 <__assert_fail@plt+0x56c>
   11384:	mov	r0, r6
   11388:	bl	10e88 <putc@plt>
   1138c:	cmn	r0, #1
   11390:	beq	11430 <__assert_fail@plt+0x56c>
   11394:	ldr	r0, [sp, #20]
   11398:	ldr	r1, [r4]
   1139c:	add	r0, r0, sl
   113a0:	bl	10ea0 <fputs@plt>
   113a4:	cmn	r0, #1
   113a8:	beq	11430 <__assert_fail@plt+0x56c>
   113ac:	ldr	r1, [r4]
   113b0:	mov	r0, #0
   113b4:	bl	10e88 <putc@plt>
   113b8:	cmn	r0, #1
   113bc:	beq	11430 <__assert_fail@plt+0x56c>
   113c0:	movw	r0, #24880	; 0x6130
   113c4:	ldr	r4, [sp, #12]
   113c8:	ldr	r6, [sp, #20]
   113cc:	ldr	r7, [sp, #16]
   113d0:	add	r1, sp, #16
   113d4:	str	r5, [sp, #20]
   113d8:	str	r9, [sp, #16]
   113dc:	movt	r0, #2
   113e0:	ldr	r3, [r0]
   113e4:	add	r0, sp, #20
   113e8:	mov	r2, r4
   113ec:	bl	10e94 <getdelim@plt>
   113f0:	mov	r1, r0
   113f4:	ldr	r0, [sp, #20]
   113f8:	mov	r9, r7
   113fc:	mov	r8, #0
   11400:	mov	r5, r6
   11404:	mov	r7, sl
   11408:	cmp	r1, #0
   1140c:	bgt	11248 <__assert_fail@plt+0x384>
   11410:	b	11418 <__assert_fail@plt+0x554>
   11414:	mov	r6, r5
   11418:	bl	14518 <__assert_fail@plt+0x3654>
   1141c:	mov	r0, r6
   11420:	bl	14518 <__assert_fail@plt+0x3654>
   11424:	mov	r0, #0
   11428:	sub	sp, fp, #28
   1142c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11430:	bl	11610 <__assert_fail@plt+0x74c>
   11434:	movw	r1, #19042	; 0x4a62
   11438:	mov	r0, #0
   1143c:	mov	r2, #5
   11440:	movt	r1, #1
   11444:	bl	10d38 <dcgettext@plt>
   11448:	mov	r2, r0
   1144c:	mov	r0, #1
   11450:	mov	r1, #0
   11454:	mov	r3, r6
   11458:	bl	10d98 <error@plt>
   1145c:	movw	r1, #18983	; 0x4a27
   11460:	mov	r0, #0
   11464:	mov	r2, #5
   11468:	movt	r1, #1
   1146c:	bl	10d38 <dcgettext@plt>
   11470:	mov	r2, r0
   11474:	mov	r0, #1
   11478:	mov	r1, #0
   1147c:	bl	10d98 <error@plt>
   11480:	movw	r1, #19094	; 0x4a96
   11484:	mov	r0, #0
   11488:	mov	r2, #5
   1148c:	movt	r1, #1
   11490:	bl	10d38 <dcgettext@plt>
   11494:	mov	r2, r0
   11498:	str	r7, [sp]
   1149c:	mov	r0, #1
   114a0:	mov	r1, #0
   114a4:	mov	r3, r6
   114a8:	bl	10d98 <error@plt>
   114ac:	cmp	r0, #104	; 0x68
   114b0:	bne	114bc <__assert_fail@plt+0x5f8>
   114b4:	mov	r0, #0
   114b8:	bl	11570 <__assert_fail@plt+0x6ac>
   114bc:	mov	r0, #1
   114c0:	bl	11570 <__assert_fail@plt+0x6ac>
   114c4:	movw	r0, #19235	; 0x4b23
   114c8:	movw	r1, #19249	; 0x4b31
   114cc:	movw	r3, #19258	; 0x4b3a
   114d0:	mov	r2, #104	; 0x68
   114d4:	movt	r0, #1
   114d8:	movt	r1, #1
   114dc:	movt	r3, #1
   114e0:	bl	10ec4 <__assert_fail@plt>
   114e4:	movw	r0, #19285	; 0x4b55
   114e8:	movw	r1, #19249	; 0x4b31
   114ec:	movw	r3, #19258	; 0x4b3a
   114f0:	mov	r2, #105	; 0x69
   114f4:	movt	r0, #1
   114f8:	movt	r1, #1
   114fc:	movt	r3, #1
   11500:	bl	10ec4 <__assert_fail@plt>
   11504:	bl	10e10 <__errno_location@plt>
   11508:	ldr	r4, [r0]
   1150c:	movw	r1, #18779	; 0x495b
   11510:	movt	r1, #1
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	bl	10d38 <dcgettext@plt>
   11520:	mov	r2, r0
   11524:	mov	r0, #1
   11528:	mov	r1, r4
   1152c:	bl	10d98 <error@plt>
   11530:	movw	r1, #18863	; 0x49af
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	movt	r1, #1
   11540:	bl	10d38 <dcgettext@plt>
   11544:	mov	r2, r0
   11548:	mov	r0, #0
   1154c:	mov	r1, #0
   11550:	bl	10d98 <error@plt>
   11554:	mov	r0, #1
   11558:	bl	11570 <__assert_fail@plt+0x6ac>
   1155c:	bl	10e10 <__errno_location@plt>
   11560:	ldr	r4, [r0]
   11564:	movw	r1, #18885	; 0x49c5
   11568:	movt	r1, #1
   1156c:	b	11514 <__assert_fail@plt+0x650>
   11570:	push	{fp, lr}
   11574:	mov	fp, sp
   11578:	cmp	r0, #0
   1157c:	bne	115cc <__assert_fail@plt+0x708>
   11580:	movw	r5, #24884	; 0x6134
   11584:	movw	r1, #19177	; 0x4ae9
   11588:	mov	r0, #0
   1158c:	mov	r2, #5
   11590:	movt	r5, #2
   11594:	movt	r1, #1
   11598:	ldr	r4, [r5]
   1159c:	bl	10d38 <dcgettext@plt>
   115a0:	movw	r6, #24904	; 0x6148
   115a4:	mov	r1, r0
   115a8:	mov	r0, r4
   115ac:	movt	r6, #2
   115b0:	ldr	r2, [r6]
   115b4:	bl	10e04 <fprintf@plt>
   115b8:	ldr	r0, [r5]
   115bc:	ldr	r1, [r6]
   115c0:	bl	116f4 <__assert_fail@plt+0x830>
   115c4:	mov	r0, #0
   115c8:	bl	10dec <exit@plt>
   115cc:	mov	r4, r0
   115d0:	movw	r0, #24872	; 0x6128
   115d4:	movw	r1, #19138	; 0x4ac2
   115d8:	mov	r2, #5
   115dc:	movt	r0, #2
   115e0:	movt	r1, #1
   115e4:	ldr	r5, [r0]
   115e8:	mov	r0, #0
   115ec:	bl	10d38 <dcgettext@plt>
   115f0:	mov	r1, r0
   115f4:	movw	r0, #24904	; 0x6148
   115f8:	movt	r0, #2
   115fc:	ldr	r2, [r0]
   11600:	mov	r0, r5
   11604:	bl	10e04 <fprintf@plt>
   11608:	mov	r0, r4
   1160c:	bl	10dec <exit@plt>
   11610:	push	{fp, lr}
   11614:	mov	fp, sp
   11618:	bl	10e10 <__errno_location@plt>
   1161c:	ldr	r4, [r0]
   11620:	movw	r1, #19223	; 0x4b17
   11624:	mov	r0, #0
   11628:	mov	r2, #5
   1162c:	movt	r1, #1
   11630:	bl	10d38 <dcgettext@plt>
   11634:	mov	r2, r0
   11638:	mov	r0, #1
   1163c:	mov	r1, r4
   11640:	bl	10d98 <error@plt>
   11644:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11648:	add	fp, sp, #24
   1164c:	sub	sp, sp, #16
   11650:	mov	r8, r0
   11654:	movw	r0, #24872	; 0x6128
   11658:	movt	r0, #2
   1165c:	ldr	r0, [r0]
   11660:	bl	144b0 <__assert_fail@plt+0x35ec>
   11664:	movw	r0, #24884	; 0x6134
   11668:	movw	r1, #19402	; 0x4bca
   1166c:	mov	r2, #5
   11670:	mov	r9, #0
   11674:	movt	r0, #2
   11678:	movt	r1, #1
   1167c:	ldr	r6, [r0]
   11680:	movw	r0, #24784	; 0x60d0
   11684:	movt	r0, #2
   11688:	ldr	r5, [r0]
   1168c:	mov	r0, #0
   11690:	bl	10d38 <dcgettext@plt>
   11694:	movw	r1, #19417	; 0x4bd9
   11698:	mov	r7, r0
   1169c:	mov	r0, #0
   116a0:	mov	r2, #5
   116a4:	movt	r1, #1
   116a8:	bl	10d38 <dcgettext@plt>
   116ac:	movw	r1, #19432	; 0x4be8
   116b0:	mov	r4, r0
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #1
   116c0:	bl	10d38 <dcgettext@plt>
   116c4:	movw	r2, #19388	; 0x4bbc
   116c8:	str	r0, [sp, #8]
   116cc:	mov	r0, r6
   116d0:	mov	r1, r8
   116d4:	mov	r3, r5
   116d8:	str	r7, [sp]
   116dc:	str	r4, [sp, #4]
   116e0:	str	r9, [sp, #12]
   116e4:	movt	r2, #1
   116e8:	bl	13ca0 <__assert_fail@plt+0x2ddc>
   116ec:	sub	sp, fp, #24
   116f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   116f4:	push	{r4, r5, fp, lr}
   116f8:	add	fp, sp, #8
   116fc:	sub	sp, sp, #16
   11700:	mov	r4, r1
   11704:	movw	r1, #19445	; 0x4bf5
   11708:	mov	r5, r0
   1170c:	mov	r0, #0
   11710:	mov	r2, #5
   11714:	movt	r1, #1
   11718:	bl	10d38 <dcgettext@plt>
   1171c:	movw	r2, #19690	; 0x4cea
   11720:	movw	r3, #19388	; 0x4bbc
   11724:	mov	r1, r0
   11728:	movw	r0, #19737	; 0x4d19
   1172c:	movt	r2, #1
   11730:	movt	r0, #1
   11734:	movt	r3, #1
   11738:	str	r2, [sp, #4]
   1173c:	movw	r2, #19651	; 0x4cc3
   11740:	str	r3, [sp]
   11744:	str	r0, [sp, #8]
   11748:	mov	r0, r5
   1174c:	mov	r3, r4
   11750:	movt	r2, #1
   11754:	bl	10e04 <fprintf@plt>
   11758:	sub	sp, fp, #8
   1175c:	pop	{r4, r5, fp, pc}
   11760:	movw	r1, #24896	; 0x6140
   11764:	movt	r1, #2
   11768:	str	r0, [r1, #4]
   1176c:	bx	lr
   11770:	movw	r1, #24896	; 0x6140
   11774:	movt	r1, #2
   11778:	strb	r0, [r1]
   1177c:	bx	lr
   11780:	push	{r4, r5, r6, sl, fp, lr}
   11784:	add	fp, sp, #16
   11788:	sub	sp, sp, #8
   1178c:	movw	r0, #24884	; 0x6134
   11790:	movt	r0, #2
   11794:	ldr	r0, [r0]
   11798:	bl	14704 <__assert_fail@plt+0x3840>
   1179c:	cmp	r0, #0
   117a0:	beq	117c8 <__assert_fail@plt+0x904>
   117a4:	movw	r5, #24896	; 0x6140
   117a8:	movt	r5, #2
   117ac:	ldrb	r0, [r5]
   117b0:	cmp	r0, #0
   117b4:	beq	117f4 <__assert_fail@plt+0x930>
   117b8:	bl	10e10 <__errno_location@plt>
   117bc:	ldr	r0, [r0]
   117c0:	cmp	r0, #32
   117c4:	bne	117f4 <__assert_fail@plt+0x930>
   117c8:	movw	r0, #24872	; 0x6128
   117cc:	movt	r0, #2
   117d0:	ldr	r0, [r0]
   117d4:	bl	14704 <__assert_fail@plt+0x3840>
   117d8:	cmp	r0, #0
   117dc:	subeq	sp, fp, #16
   117e0:	popeq	{r4, r5, r6, sl, fp, pc}
   117e4:	movw	r0, #24788	; 0x60d4
   117e8:	movt	r0, #2
   117ec:	ldr	r0, [r0]
   117f0:	bl	10d08 <_exit@plt>
   117f4:	movw	r1, #19223	; 0x4b17
   117f8:	mov	r0, #0
   117fc:	mov	r2, #5
   11800:	movt	r1, #1
   11804:	bl	10d38 <dcgettext@plt>
   11808:	ldr	r6, [r5, #4]
   1180c:	mov	r4, r0
   11810:	bl	10e10 <__errno_location@plt>
   11814:	ldr	r5, [r0]
   11818:	cmp	r6, #0
   1181c:	bne	11838 <__assert_fail@plt+0x974>
   11820:	movw	r2, #19763	; 0x4d33
   11824:	mov	r0, #0
   11828:	mov	r1, r5
   1182c:	mov	r3, r4
   11830:	movt	r2, #1
   11834:	b	11858 <__assert_fail@plt+0x994>
   11838:	mov	r0, r6
   1183c:	bl	13460 <__assert_fail@plt+0x259c>
   11840:	movw	r2, #19759	; 0x4d2f
   11844:	mov	r3, r0
   11848:	str	r4, [sp]
   1184c:	mov	r0, #0
   11850:	mov	r1, r5
   11854:	movt	r2, #1
   11858:	bl	10d98 <error@plt>
   1185c:	movw	r0, #24788	; 0x60d4
   11860:	movt	r0, #2
   11864:	ldr	r0, [r0]
   11868:	bl	10d08 <_exit@plt>
   1186c:	push	{r4, r5, fp, lr}
   11870:	add	fp, sp, #8
   11874:	cmp	r0, #0
   11878:	beq	1190c <__assert_fail@plt+0xa48>
   1187c:	mov	r1, #47	; 0x2f
   11880:	mov	r4, r0
   11884:	bl	10e64 <strrchr@plt>
   11888:	cmp	r0, #0
   1188c:	mov	r5, r4
   11890:	addne	r5, r0, #1
   11894:	sub	r0, r5, r4
   11898:	cmp	r0, #7
   1189c:	blt	118f0 <__assert_fail@plt+0xa2c>
   118a0:	movw	r1, #19822	; 0x4d6e
   118a4:	sub	r0, r5, #7
   118a8:	mov	r2, #7
   118ac:	movt	r1, #1
   118b0:	bl	10eac <strncmp@plt>
   118b4:	cmp	r0, #0
   118b8:	bne	118f0 <__assert_fail@plt+0xa2c>
   118bc:	movw	r1, #19830	; 0x4d76
   118c0:	mov	r0, r5
   118c4:	mov	r2, #3
   118c8:	movt	r1, #1
   118cc:	bl	10eac <strncmp@plt>
   118d0:	cmp	r0, #0
   118d4:	beq	118e0 <__assert_fail@plt+0xa1c>
   118d8:	mov	r4, r5
   118dc:	b	118f0 <__assert_fail@plt+0xa2c>
   118e0:	movw	r0, #24856	; 0x6118
   118e4:	add	r4, r5, #3
   118e8:	movt	r0, #2
   118ec:	str	r4, [r0]
   118f0:	movw	r0, #24860	; 0x611c
   118f4:	movt	r0, #2
   118f8:	str	r4, [r0]
   118fc:	movw	r0, #24904	; 0x6148
   11900:	movt	r0, #2
   11904:	str	r4, [r0]
   11908:	pop	{r4, r5, fp, pc}
   1190c:	movw	r0, #24872	; 0x6128
   11910:	mov	r1, #55	; 0x37
   11914:	mov	r2, #1
   11918:	movt	r0, #2
   1191c:	ldr	r3, [r0]
   11920:	movw	r0, #19766	; 0x4d36
   11924:	movt	r0, #1
   11928:	bl	10d5c <fwrite@plt>
   1192c:	bl	10eb8 <abort@plt>
   11930:	push	{r4, r5, r6, sl, fp, lr}
   11934:	add	fp, sp, #16
   11938:	mov	r4, r0
   1193c:	movw	r0, #24912	; 0x6150
   11940:	movt	r0, #2
   11944:	cmp	r4, #0
   11948:	moveq	r4, r0
   1194c:	bl	10e10 <__errno_location@plt>
   11950:	ldr	r6, [r0]
   11954:	mov	r5, r0
   11958:	mov	r0, r4
   1195c:	mov	r1, #48	; 0x30
   11960:	bl	14318 <__assert_fail@plt+0x3454>
   11964:	str	r6, [r5]
   11968:	pop	{r4, r5, r6, sl, fp, pc}
   1196c:	movw	r1, #24912	; 0x6150
   11970:	cmp	r0, #0
   11974:	movt	r1, #2
   11978:	movne	r1, r0
   1197c:	ldr	r0, [r1]
   11980:	bx	lr
   11984:	movw	r2, #24912	; 0x6150
   11988:	cmp	r0, #0
   1198c:	movt	r2, #2
   11990:	movne	r2, r0
   11994:	str	r1, [r2]
   11998:	bx	lr
   1199c:	movw	r3, #24912	; 0x6150
   119a0:	cmp	r0, #0
   119a4:	movt	r3, #2
   119a8:	movne	r3, r0
   119ac:	ubfx	r0, r1, #5, #3
   119b0:	and	r1, r1, #31
   119b4:	add	r0, r3, r0, lsl #2
   119b8:	ldr	r3, [r0, #8]
   119bc:	eor	r2, r2, r3, lsr r1
   119c0:	and	r2, r2, #1
   119c4:	eor	r2, r3, r2, lsl r1
   119c8:	str	r2, [r0, #8]
   119cc:	mov	r0, #1
   119d0:	and	r0, r0, r3, lsr r1
   119d4:	bx	lr
   119d8:	movw	r2, #24912	; 0x6150
   119dc:	cmp	r0, #0
   119e0:	movt	r2, #2
   119e4:	movne	r2, r0
   119e8:	ldr	r0, [r2, #4]
   119ec:	str	r1, [r2, #4]
   119f0:	bx	lr
   119f4:	movw	r3, #24912	; 0x6150
   119f8:	cmp	r0, #0
   119fc:	movt	r3, #2
   11a00:	movne	r3, r0
   11a04:	cmp	r1, #0
   11a08:	mov	r0, #10
   11a0c:	cmpne	r2, #0
   11a10:	str	r0, [r3]
   11a14:	bne	11a24 <__assert_fail@plt+0xb60>
   11a18:	push	{fp, lr}
   11a1c:	mov	fp, sp
   11a20:	bl	10eb8 <abort@plt>
   11a24:	str	r1, [r3, #40]	; 0x28
   11a28:	str	r2, [r3, #44]	; 0x2c
   11a2c:	bx	lr
   11a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a34:	add	fp, sp, #28
   11a38:	sub	sp, sp, #20
   11a3c:	mov	r7, r0
   11a40:	ldr	r0, [fp, #8]
   11a44:	movw	r5, #24912	; 0x6150
   11a48:	mov	r8, r3
   11a4c:	mov	r9, r2
   11a50:	mov	sl, r1
   11a54:	movt	r5, #2
   11a58:	cmp	r0, #0
   11a5c:	movne	r5, r0
   11a60:	bl	10e10 <__errno_location@plt>
   11a64:	mov	r4, r0
   11a68:	ldm	r5, {r0, r1}
   11a6c:	ldr	r2, [r5, #40]	; 0x28
   11a70:	ldr	r3, [r5, #44]	; 0x2c
   11a74:	add	r5, r5, #8
   11a78:	ldr	r6, [r4]
   11a7c:	stm	sp, {r0, r1, r5}
   11a80:	str	r2, [sp, #12]
   11a84:	str	r3, [sp, #16]
   11a88:	mov	r0, r7
   11a8c:	mov	r1, sl
   11a90:	mov	r2, r9
   11a94:	mov	r3, r8
   11a98:	bl	11aa8 <__assert_fail@plt+0xbe4>
   11a9c:	str	r6, [r4]
   11aa0:	sub	sp, fp, #28
   11aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aac:	add	fp, sp, #28
   11ab0:	sub	sp, sp, #156	; 0x9c
   11ab4:	str	r0, [sp, #76]	; 0x4c
   11ab8:	ldr	r0, [fp, #12]
   11abc:	mov	r6, r1
   11ac0:	str	r3, [sp, #84]	; 0x54
   11ac4:	str	r2, [fp, #-84]	; 0xffffffac
   11ac8:	and	r1, r0, #4
   11acc:	str	r1, [sp, #24]
   11ad0:	and	r1, r0, #1
   11ad4:	str	r1, [sp, #28]
   11ad8:	ubfx	r8, r0, #1, #1
   11adc:	bl	10d74 <__ctype_get_mb_cur_max@plt>
   11ae0:	str	r0, [sp, #32]
   11ae4:	ldr	r0, [fp, #24]
   11ae8:	ldr	r7, [fp, #8]
   11aec:	mov	r1, #0
   11af0:	mov	r2, #0
   11af4:	mov	r4, #1
   11af8:	str	r1, [sp, #52]	; 0x34
   11afc:	str	r0, [sp, #72]	; 0x48
   11b00:	ldr	r0, [fp, #20]
   11b04:	str	r0, [sp, #68]	; 0x44
   11b08:	mov	r0, #0
   11b0c:	str	r0, [sp, #48]	; 0x30
   11b10:	mov	r0, #0
   11b14:	str	r0, [sp, #92]	; 0x5c
   11b18:	mov	r0, #0
   11b1c:	str	r0, [fp, #-76]	; 0xffffffb4
   11b20:	mov	r0, #0
   11b24:	cmp	r7, #10
   11b28:	bhi	12e10 <__assert_fail@plt+0x1f4c>
   11b2c:	add	r1, pc, #28
   11b30:	mov	sl, r6
   11b34:	ldr	r6, [sp, #76]	; 0x4c
   11b38:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b3c:	ldr	lr, [sp, #84]	; 0x54
   11b40:	mov	r9, #0
   11b44:	mov	r3, #1
   11b48:	mov	r5, #0
   11b4c:	ldr	pc, [r1, r7, lsl #2]
   11b50:	andeq	r1, r1, r0, lsr #24
   11b54:	andeq	r1, r1, ip, asr ip
   11b58:	andeq	r1, r1, r0, lsr ip
   11b5c:	andeq	r1, r1, r8, lsl ip
   11b60:	andeq	r1, r1, r0, asr ip
   11b64:	andeq	r1, r1, r4, lsl #25
   11b68:	andeq	r1, r1, r0, asr #24
   11b6c:	muleq	r1, r0, lr
   11b70:	andeq	r1, r1, ip, ror fp
   11b74:	andeq	r1, r1, ip, ror fp
   11b78:	andeq	r1, r1, r4, lsr #28
   11b7c:	mov	r9, r4
   11b80:	movw	r4, #19912	; 0x4dc8
   11b84:	mov	r5, r8
   11b88:	mov	r8, r2
   11b8c:	mov	r0, #0
   11b90:	mov	r2, #5
   11b94:	movt	r4, #1
   11b98:	mov	r1, r4
   11b9c:	bl	10d38 <dcgettext@plt>
   11ba0:	cmp	r0, r4
   11ba4:	str	r0, [sp, #68]	; 0x44
   11ba8:	bne	11d38 <__assert_fail@plt+0xe74>
   11bac:	bl	147f0 <__assert_fail@plt+0x392c>
   11bb0:	ldrb	r1, [r0]
   11bb4:	and	r1, r1, #223	; 0xdf
   11bb8:	cmp	r1, #71	; 0x47
   11bbc:	beq	11d04 <__assert_fail@plt+0xe40>
   11bc0:	cmp	r1, #85	; 0x55
   11bc4:	bne	11d1c <__assert_fail@plt+0xe58>
   11bc8:	ldrb	r1, [r0, #1]
   11bcc:	and	r1, r1, #223	; 0xdf
   11bd0:	cmp	r1, #84	; 0x54
   11bd4:	bne	11d1c <__assert_fail@plt+0xe58>
   11bd8:	ldrb	r1, [r0, #2]
   11bdc:	and	r1, r1, #223	; 0xdf
   11be0:	cmp	r1, #70	; 0x46
   11be4:	bne	11d1c <__assert_fail@plt+0xe58>
   11be8:	ldrb	r1, [r0, #3]
   11bec:	cmp	r1, #45	; 0x2d
   11bf0:	ldrbeq	r1, [r0, #4]
   11bf4:	cmpeq	r1, #56	; 0x38
   11bf8:	bne	11d1c <__assert_fail@plt+0xe58>
   11bfc:	ldrb	r0, [r0, #5]
   11c00:	cmp	r0, #0
   11c04:	movw	r0, #19916	; 0x4dcc
   11c08:	movt	r0, #1
   11c0c:	str	r0, [sp, #68]	; 0x44
   11c10:	bne	11d1c <__assert_fail@plt+0xe58>
   11c14:	b	11d38 <__assert_fail@plt+0xe74>
   11c18:	mov	r0, #1
   11c1c:	b	11c5c <__assert_fail@plt+0xd98>
   11c20:	mov	r7, #0
   11c24:	mov	r9, #0
   11c28:	mov	r3, r0
   11c2c:	b	11cfc <__assert_fail@plt+0xe38>
   11c30:	tst	r8, #1
   11c34:	bne	11c5c <__assert_fail@plt+0xd98>
   11c38:	mov	r3, r0
   11c3c:	b	11cb4 <__assert_fail@plt+0xdf0>
   11c40:	mov	r0, #1
   11c44:	mov	r9, #0
   11c48:	mov	r7, #5
   11c4c:	b	11c98 <__assert_fail@plt+0xdd4>
   11c50:	mov	r3, #1
   11c54:	tst	r8, #1
   11c58:	beq	11cb4 <__assert_fail@plt+0xdf0>
   11c5c:	mov	r1, #1
   11c60:	mov	r9, #0
   11c64:	mov	r7, #2
   11c68:	mov	r3, r0
   11c6c:	mov	r5, #1
   11c70:	str	r1, [fp, #-76]	; 0xffffffb4
   11c74:	movw	r1, #19914	; 0x4dca
   11c78:	movt	r1, #1
   11c7c:	str	r1, [sp, #92]	; 0x5c
   11c80:	b	11e90 <__assert_fail@plt+0xfcc>
   11c84:	mov	r7, #5
   11c88:	tst	r8, #1
   11c8c:	beq	11cd4 <__assert_fail@plt+0xe10>
   11c90:	mov	r0, #1
   11c94:	mov	r9, #0
   11c98:	str	r0, [fp, #-76]	; 0xffffffb4
   11c9c:	movw	r0, #19910	; 0x4dc6
   11ca0:	mov	r3, #1
   11ca4:	mov	r5, #1
   11ca8:	movt	r0, #1
   11cac:	str	r0, [sp, #92]	; 0x5c
   11cb0:	b	11e90 <__assert_fail@plt+0xfcc>
   11cb4:	cmp	sl, #0
   11cb8:	mov	r9, #1
   11cbc:	mov	r7, #2
   11cc0:	movne	r0, #39	; 0x27
   11cc4:	strbne	r0, [r6]
   11cc8:	movw	r0, #19914	; 0x4dca
   11ccc:	movt	r0, #1
   11cd0:	b	11cf0 <__assert_fail@plt+0xe2c>
   11cd4:	cmp	sl, #0
   11cd8:	mov	r9, #1
   11cdc:	mov	r3, #1
   11ce0:	movne	r0, #34	; 0x22
   11ce4:	strbne	r0, [r6]
   11ce8:	movw	r0, #19910	; 0x4dc6
   11cec:	movt	r0, #1
   11cf0:	str	r0, [sp, #92]	; 0x5c
   11cf4:	mov	r0, #1
   11cf8:	str	r0, [fp, #-76]	; 0xffffffb4
   11cfc:	mov	r5, #0
   11d00:	b	11e90 <__assert_fail@plt+0xfcc>
   11d04:	ldrb	r1, [r0, #1]
   11d08:	and	r1, r1, #223	; 0xdf
   11d0c:	cmp	r1, #66	; 0x42
   11d10:	ldrbeq	r1, [r0, #2]
   11d14:	cmpeq	r1, #49	; 0x31
   11d18:	beq	12c38 <__assert_fail@plt+0x1d74>
   11d1c:	movw	r0, #19914	; 0x4dca
   11d20:	movw	r1, #19910	; 0x4dc6
   11d24:	cmp	r7, #9
   11d28:	movt	r0, #1
   11d2c:	movt	r1, #1
   11d30:	moveq	r0, r1
   11d34:	str	r0, [sp, #68]	; 0x44
   11d38:	movw	r4, #19914	; 0x4dca
   11d3c:	mov	r0, #0
   11d40:	mov	r2, #5
   11d44:	movt	r4, #1
   11d48:	mov	r1, r4
   11d4c:	bl	10d38 <dcgettext@plt>
   11d50:	cmp	r0, r4
   11d54:	str	r0, [sp, #72]	; 0x48
   11d58:	beq	11d68 <__assert_fail@plt+0xea4>
   11d5c:	mov	r4, r9
   11d60:	mov	r2, r8
   11d64:	b	11e20 <__assert_fail@plt+0xf5c>
   11d68:	bl	147f0 <__assert_fail@plt+0x392c>
   11d6c:	ldrb	r1, [r0]
   11d70:	mov	r4, r9
   11d74:	and	r1, r1, #223	; 0xdf
   11d78:	cmp	r1, #71	; 0x47
   11d7c:	beq	11dd8 <__assert_fail@plt+0xf14>
   11d80:	cmp	r1, #85	; 0x55
   11d84:	mov	r2, r8
   11d88:	bne	11e00 <__assert_fail@plt+0xf3c>
   11d8c:	ldrb	r1, [r0, #1]
   11d90:	and	r1, r1, #223	; 0xdf
   11d94:	cmp	r1, #84	; 0x54
   11d98:	bne	11e00 <__assert_fail@plt+0xf3c>
   11d9c:	ldrb	r1, [r0, #2]
   11da0:	and	r1, r1, #223	; 0xdf
   11da4:	cmp	r1, #70	; 0x46
   11da8:	ldrbeq	r1, [r0, #3]
   11dac:	cmpeq	r1, #45	; 0x2d
   11db0:	bne	11e00 <__assert_fail@plt+0xf3c>
   11db4:	ldrb	r1, [r0, #4]
   11db8:	cmp	r1, #56	; 0x38
   11dbc:	ldrbeq	r0, [r0, #5]
   11dc0:	cmpeq	r0, #0
   11dc4:	bne	11e00 <__assert_fail@plt+0xf3c>
   11dc8:	movw	r0, #19920	; 0x4dd0
   11dcc:	movt	r0, #1
   11dd0:	str	r0, [sp, #72]	; 0x48
   11dd4:	b	11e20 <__assert_fail@plt+0xf5c>
   11dd8:	ldrb	r1, [r0, #1]
   11ddc:	mov	r2, r8
   11de0:	and	r1, r1, #223	; 0xdf
   11de4:	cmp	r1, #66	; 0x42
   11de8:	bne	11e00 <__assert_fail@plt+0xf3c>
   11dec:	ldrb	r1, [r0, #2]
   11df0:	cmp	r1, #49	; 0x31
   11df4:	ldrbeq	r1, [r0, #3]
   11df8:	cmpeq	r1, #56	; 0x38
   11dfc:	beq	12c7c <__assert_fail@plt+0x1db8>
   11e00:	movw	r0, #19914	; 0x4dca
   11e04:	cmp	r7, #9
   11e08:	movt	r0, #1
   11e0c:	mov	r1, r0
   11e10:	movw	r0, #19910	; 0x4dc6
   11e14:	movt	r0, #1
   11e18:	moveq	r1, r0
   11e1c:	str	r1, [sp, #72]	; 0x48
   11e20:	mov	r8, r5
   11e24:	mov	r9, #0
   11e28:	tst	r8, #1
   11e2c:	mov	r5, r8
   11e30:	str	r2, [fp, #-48]	; 0xffffffd0
   11e34:	bne	11e6c <__assert_fail@plt+0xfa8>
   11e38:	ldr	r0, [sp, #68]	; 0x44
   11e3c:	ldrb	r0, [r0]
   11e40:	cmp	r0, #0
   11e44:	beq	11e6c <__assert_fail@plt+0xfa8>
   11e48:	ldr	r1, [sp, #68]	; 0x44
   11e4c:	mov	r9, #0
   11e50:	add	r1, r1, #1
   11e54:	cmp	r9, sl
   11e58:	strbcc	r0, [r6, r9]
   11e5c:	ldrb	r0, [r1, r9]
   11e60:	add	r9, r9, #1
   11e64:	cmp	r0, #0
   11e68:	bne	11e54 <__assert_fail@plt+0xf90>
   11e6c:	ldr	r8, [sp, #72]	; 0x48
   11e70:	mov	r0, r8
   11e74:	bl	10df8 <strlen@plt>
   11e78:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e7c:	ldr	lr, [sp, #84]	; 0x54
   11e80:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11e84:	str	r0, [fp, #-76]	; 0xffffffb4
   11e88:	str	r8, [sp, #92]	; 0x5c
   11e8c:	mov	r3, #1
   11e90:	ldr	r0, [fp, #16]
   11e94:	str	r7, [fp, #-64]	; 0xffffffc0
   11e98:	str	r5, [fp, #-72]	; 0xffffffb8
   11e9c:	str	r3, [sp, #80]	; 0x50
   11ea0:	cmp	r0, #0
   11ea4:	movwne	r0, #1
   11ea8:	and	r0, r0, r5
   11eac:	str	r0, [fp, #-88]	; 0xffffffa8
   11eb0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11eb4:	cmp	r0, #0
   11eb8:	movwne	r0, #1
   11ebc:	subs	r7, r7, #2
   11ec0:	and	r1, r0, r5
   11ec4:	str	r7, [fp, #-80]	; 0xffffffb0
   11ec8:	and	r1, r3, r1
   11ecc:	str	r1, [sp, #40]	; 0x28
   11ed0:	clz	r1, r7
   11ed4:	lsr	r1, r1, #5
   11ed8:	and	r1, r1, r5
   11edc:	eor	r5, r5, #1
   11ee0:	str	r1, [sp, #36]	; 0x24
   11ee4:	mov	r1, r7
   11ee8:	str	r5, [sp, #88]	; 0x58
   11eec:	mov	r7, #0
   11ef0:	movwne	r1, #1
   11ef4:	orr	r5, r1, r5
   11ef8:	and	r1, r1, r3
   11efc:	and	r0, r0, r1
   11f00:	str	r5, [sp, #60]	; 0x3c
   11f04:	str	r1, [fp, #-68]	; 0xffffffbc
   11f08:	str	r0, [fp, #-60]	; 0xffffffc4
   11f0c:	eor	r0, r3, #1
   11f10:	str	r0, [sp, #44]	; 0x2c
   11f14:	cmn	lr, #1
   11f18:	beq	11f28 <__assert_fail@plt+0x1064>
   11f1c:	cmp	r7, lr
   11f20:	bne	11f34 <__assert_fail@plt+0x1070>
   11f24:	b	12bac <__assert_fail@plt+0x1ce8>
   11f28:	ldrb	r0, [ip, r7]
   11f2c:	cmp	r0, #0
   11f30:	beq	12bb4 <__assert_fail@plt+0x1cf0>
   11f34:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11f38:	mov	r8, #0
   11f3c:	str	r4, [fp, #-52]	; 0xffffffcc
   11f40:	str	r2, [fp, #-48]	; 0xffffffd0
   11f44:	cmp	r0, #0
   11f48:	beq	11f7c <__assert_fail@plt+0x10b8>
   11f4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11f50:	add	r4, r7, r0
   11f54:	cmp	r0, #2
   11f58:	bcc	11f74 <__assert_fail@plt+0x10b0>
   11f5c:	cmn	lr, #1
   11f60:	bne	11f74 <__assert_fail@plt+0x10b0>
   11f64:	mov	r0, ip
   11f68:	bl	10df8 <strlen@plt>
   11f6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11f70:	mov	lr, r0
   11f74:	cmp	r4, lr
   11f78:	bls	11f94 <__assert_fail@plt+0x10d0>
   11f7c:	mov	r0, #0
   11f80:	str	r0, [fp, #-56]	; 0xffffffc8
   11f84:	ldrb	r5, [ip, r7]
   11f88:	cmp	r5, #126	; 0x7e
   11f8c:	bls	11fe4 <__assert_fail@plt+0x1120>
   11f90:	b	123ec <__assert_fail@plt+0x1528>
   11f94:	ldr	r1, [sp, #92]	; 0x5c
   11f98:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11f9c:	add	r0, ip, r7
   11fa0:	mov	r4, lr
   11fa4:	bl	10d2c <memcmp@plt>
   11fa8:	ldr	r2, [sp, #88]	; 0x58
   11fac:	cmp	r0, #0
   11fb0:	mov	r1, r0
   11fb4:	movwne	r1, #1
   11fb8:	orr	r1, r1, r2
   11fbc:	tst	r1, #1
   11fc0:	beq	12cc0 <__assert_fail@plt+0x1dfc>
   11fc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   11fc8:	clz	r0, r0
   11fcc:	mov	lr, r4
   11fd0:	lsr	r0, r0, #5
   11fd4:	str	r0, [fp, #-56]	; 0xffffffc8
   11fd8:	ldrb	r5, [ip, r7]
   11fdc:	cmp	r5, #126	; 0x7e
   11fe0:	bhi	123ec <__assert_fail@plt+0x1528>
   11fe4:	add	r3, pc, #16
   11fe8:	mov	r4, #1
   11fec:	mov	r2, #110	; 0x6e
   11ff0:	mov	r0, #97	; 0x61
   11ff4:	mov	r1, #0
   11ff8:	ldr	pc, [r3, r5, lsl #2]
   11ffc:	andeq	r2, r1, ip, asr #5
   12000:	andeq	r2, r1, ip, ror #7
   12004:	andeq	r2, r1, ip, ror #7
   12008:	andeq	r2, r1, ip, ror #7
   1200c:	andeq	r2, r1, ip, ror #7
   12010:	andeq	r2, r1, ip, ror #7
   12014:	andeq	r2, r1, ip, ror #7
   12018:	andeq	r2, r1, r8, asr #9
   1201c:	andeq	r2, r1, ip, lsr #5
   12020:	muleq	r1, r4, r2
   12024:			; <UNDEFINED> instruction: 0x000122b8
   12028:	andeq	r2, r1, r8, asr #6
   1202c:	andeq	r2, r1, ip, lsl #5
   12030:			; <UNDEFINED> instruction: 0x000122b4
   12034:	andeq	r2, r1, ip, ror #7
   12038:	andeq	r2, r1, ip, ror #7
   1203c:	andeq	r2, r1, ip, ror #7
   12040:	andeq	r2, r1, ip, ror #7
   12044:	andeq	r2, r1, ip, ror #7
   12048:	andeq	r2, r1, ip, ror #7
   1204c:	andeq	r2, r1, ip, ror #7
   12050:	andeq	r2, r1, ip, ror #7
   12054:	andeq	r2, r1, ip, ror #7
   12058:	andeq	r2, r1, ip, ror #7
   1205c:	andeq	r2, r1, ip, ror #7
   12060:	andeq	r2, r1, ip, ror #7
   12064:	andeq	r2, r1, ip, ror #7
   12068:	andeq	r2, r1, ip, ror #7
   1206c:	andeq	r2, r1, ip, ror #7
   12070:	andeq	r2, r1, ip, ror #7
   12074:	andeq	r2, r1, ip, ror #7
   12078:	andeq	r2, r1, ip, ror #7
   1207c:	andeq	r2, r1, r4, asr #8
   12080:	andeq	r2, r1, r8, asr #8
   12084:	andeq	r2, r1, r8, asr #8
   12088:	andeq	r2, r1, r8, lsl r2
   1208c:	andeq	r2, r1, r8, asr #8
   12090:	strdeq	r2, [r1], -r8
   12094:	andeq	r2, r1, r8, asr #8
   12098:	andeq	r2, r1, r0, asr r3
   1209c:	andeq	r2, r1, r8, asr #8
   120a0:	andeq	r2, r1, r8, asr #8
   120a4:	andeq	r2, r1, r8, asr #8
   120a8:	strdeq	r2, [r1], -r8
   120ac:	strdeq	r2, [r1], -r8
   120b0:	strdeq	r2, [r1], -r8
   120b4:	strdeq	r2, [r1], -r8
   120b8:	strdeq	r2, [r1], -r8
   120bc:	strdeq	r2, [r1], -r8
   120c0:	strdeq	r2, [r1], -r8
   120c4:	strdeq	r2, [r1], -r8
   120c8:	strdeq	r2, [r1], -r8
   120cc:	strdeq	r2, [r1], -r8
   120d0:	strdeq	r2, [r1], -r8
   120d4:	strdeq	r2, [r1], -r8
   120d8:	strdeq	r2, [r1], -r8
   120dc:	strdeq	r2, [r1], -r8
   120e0:	strdeq	r2, [r1], -r8
   120e4:	strdeq	r2, [r1], -r8
   120e8:	andeq	r2, r1, r8, asr #8
   120ec:	andeq	r2, r1, r8, asr #8
   120f0:	andeq	r2, r1, r8, asr #8
   120f4:	andeq	r2, r1, r8, asr #8
   120f8:	andeq	r2, r1, ip, lsl #6
   120fc:	andeq	r2, r1, ip, ror #7
   12100:	strdeq	r2, [r1], -r8
   12104:	strdeq	r2, [r1], -r8
   12108:	strdeq	r2, [r1], -r8
   1210c:	strdeq	r2, [r1], -r8
   12110:	strdeq	r2, [r1], -r8
   12114:	strdeq	r2, [r1], -r8
   12118:	strdeq	r2, [r1], -r8
   1211c:	strdeq	r2, [r1], -r8
   12120:	strdeq	r2, [r1], -r8
   12124:	strdeq	r2, [r1], -r8
   12128:	strdeq	r2, [r1], -r8
   1212c:	strdeq	r2, [r1], -r8
   12130:	strdeq	r2, [r1], -r8
   12134:	strdeq	r2, [r1], -r8
   12138:	strdeq	r2, [r1], -r8
   1213c:	strdeq	r2, [r1], -r8
   12140:	strdeq	r2, [r1], -r8
   12144:	strdeq	r2, [r1], -r8
   12148:	strdeq	r2, [r1], -r8
   1214c:	strdeq	r2, [r1], -r8
   12150:	strdeq	r2, [r1], -r8
   12154:	strdeq	r2, [r1], -r8
   12158:	strdeq	r2, [r1], -r8
   1215c:	strdeq	r2, [r1], -r8
   12160:	strdeq	r2, [r1], -r8
   12164:	strdeq	r2, [r1], -r8
   12168:	andeq	r2, r1, r8, asr #8
   1216c:	andeq	r2, r1, r8, asr r2
   12170:	strdeq	r2, [r1], -r8
   12174:	andeq	r2, r1, r8, asr #8
   12178:	strdeq	r2, [r1], -r8
   1217c:	andeq	r2, r1, r8, asr #8
   12180:	strdeq	r2, [r1], -r8
   12184:	strdeq	r2, [r1], -r8
   12188:	strdeq	r2, [r1], -r8
   1218c:	strdeq	r2, [r1], -r8
   12190:	strdeq	r2, [r1], -r8
   12194:	strdeq	r2, [r1], -r8
   12198:	strdeq	r2, [r1], -r8
   1219c:	strdeq	r2, [r1], -r8
   121a0:	strdeq	r2, [r1], -r8
   121a4:	strdeq	r2, [r1], -r8
   121a8:	strdeq	r2, [r1], -r8
   121ac:	strdeq	r2, [r1], -r8
   121b0:	strdeq	r2, [r1], -r8
   121b4:	strdeq	r2, [r1], -r8
   121b8:	strdeq	r2, [r1], -r8
   121bc:	strdeq	r2, [r1], -r8
   121c0:	strdeq	r2, [r1], -r8
   121c4:	strdeq	r2, [r1], -r8
   121c8:	strdeq	r2, [r1], -r8
   121cc:	strdeq	r2, [r1], -r8
   121d0:	strdeq	r2, [r1], -r8
   121d4:	strdeq	r2, [r1], -r8
   121d8:	strdeq	r2, [r1], -r8
   121dc:	strdeq	r2, [r1], -r8
   121e0:	strdeq	r2, [r1], -r8
   121e4:	strdeq	r2, [r1], -r8
   121e8:	andeq	r2, r1, r8, lsr r2
   121ec:	andeq	r2, r1, r8, asr #8
   121f0:	andeq	r2, r1, r8, lsr r2
   121f4:	andeq	r2, r1, r8, lsl r2
   121f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121fc:	cmp	r0, #0
   12200:	beq	124dc <__assert_fail@plt+0x1618>
   12204:	ldr	r0, [fp, #16]
   12208:	cmp	r0, #0
   1220c:	mov	r0, r5
   12210:	bne	124ec <__assert_fail@plt+0x1628>
   12214:	b	1250c <__assert_fail@plt+0x1648>
   12218:	mov	r4, #0
   1221c:	cmp	r7, #0
   12220:	beq	12444 <__assert_fail@plt+0x1580>
   12224:	mov	r8, #0
   12228:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1222c:	cmp	r0, #0
   12230:	bne	12204 <__assert_fail@plt+0x1340>
   12234:	b	124dc <__assert_fail@plt+0x1618>
   12238:	mov	r4, #0
   1223c:	cmn	lr, #1
   12240:	beq	1241c <__assert_fail@plt+0x1558>
   12244:	cmp	r7, #0
   12248:	bne	12224 <__assert_fail@plt+0x1360>
   1224c:	cmp	lr, #1
   12250:	beq	12444 <__assert_fail@plt+0x1580>
   12254:	b	12224 <__assert_fail@plt+0x1360>
   12258:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1225c:	cmp	r0, #2
   12260:	bne	12474 <__assert_fail@plt+0x15b0>
   12264:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12268:	tst	r0, #1
   1226c:	bne	12cd4 <__assert_fail@plt+0x1e10>
   12270:	mov	r8, #0
   12274:	mov	r0, #92	; 0x5c
   12278:	mov	r4, #0
   1227c:	cmp	r8, #0
   12280:	beq	12494 <__assert_fail@plt+0x15d0>
   12284:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12288:	b	12588 <__assert_fail@plt+0x16c4>
   1228c:	mov	r0, #102	; 0x66
   12290:	b	124c8 <__assert_fail@plt+0x1604>
   12294:	mov	r2, #116	; 0x74
   12298:	ldr	r0, [sp, #60]	; 0x3c
   1229c:	tst	r0, #1
   122a0:	mov	r0, r2
   122a4:	bne	124c8 <__assert_fail@plt+0x1604>
   122a8:	b	12cd4 <__assert_fail@plt+0x1e10>
   122ac:	mov	r0, #98	; 0x62
   122b0:	b	124c8 <__assert_fail@plt+0x1604>
   122b4:	mov	r2, #114	; 0x72
   122b8:	ldr	r0, [sp, #60]	; 0x3c
   122bc:	tst	r0, #1
   122c0:	mov	r0, r2
   122c4:	bne	124c8 <__assert_fail@plt+0x1604>
   122c8:	b	12cd4 <__assert_fail@plt+0x1e10>
   122cc:	ldr	r0, [sp, #80]	; 0x50
   122d0:	tst	r0, #1
   122d4:	beq	125b0 <__assert_fail@plt+0x16ec>
   122d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   122dc:	tst	r0, #1
   122e0:	bne	12dfc <__assert_fail@plt+0x1f38>
   122e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122e8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   122ec:	cmp	r0, #2
   122f0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   122f4:	movwne	r0, #1
   122f8:	orr	r0, r0, r2
   122fc:	tst	r0, #1
   12300:	beq	128a8 <__assert_fail@plt+0x19e4>
   12304:	mov	r0, r9
   12308:	b	128dc <__assert_fail@plt+0x1a18>
   1230c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12310:	mov	r8, #0
   12314:	mov	r5, #63	; 0x3f
   12318:	cmp	r0, #5
   1231c:	beq	12764 <__assert_fail@plt+0x18a0>
   12320:	cmp	r0, #2
   12324:	bne	12814 <__assert_fail@plt+0x1950>
   12328:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1232c:	tst	r0, #1
   12330:	bne	12cd4 <__assert_fail@plt+0x1e10>
   12334:	mov	r4, #0
   12338:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1233c:	cmp	r0, #0
   12340:	bne	12204 <__assert_fail@plt+0x1340>
   12344:	b	124dc <__assert_fail@plt+0x1618>
   12348:	mov	r0, #118	; 0x76
   1234c:	b	124c8 <__assert_fail@plt+0x1604>
   12350:	mov	r0, #1
   12354:	mov	r5, #39	; 0x27
   12358:	str	r0, [sp, #52]	; 0x34
   1235c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12360:	cmp	r0, #2
   12364:	bne	123d8 <__assert_fail@plt+0x1514>
   12368:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1236c:	tst	r0, #1
   12370:	bne	12cd4 <__assert_fail@plt+0x1e10>
   12374:	ldr	r2, [sp, #48]	; 0x30
   12378:	clz	r1, sl
   1237c:	mov	r8, #0
   12380:	lsr	r1, r1, #5
   12384:	cmp	r2, #0
   12388:	mov	r0, r2
   1238c:	movwne	r0, #1
   12390:	orrs	r0, r0, r1
   12394:	moveq	r2, sl
   12398:	moveq	sl, r0
   1239c:	cmp	r9, sl
   123a0:	str	r2, [sp, #48]	; 0x30
   123a4:	movcc	r0, #39	; 0x27
   123a8:	strbcc	r0, [r6, r9]
   123ac:	add	r0, r9, #1
   123b0:	cmp	r0, sl
   123b4:	movcc	r1, #92	; 0x5c
   123b8:	strbcc	r1, [r6, r0]
   123bc:	add	r0, r9, #2
   123c0:	add	r9, r9, #3
   123c4:	cmp	r0, sl
   123c8:	movcc	r1, #39	; 0x27
   123cc:	strbcc	r1, [r6, r0]
   123d0:	mov	r0, #0
   123d4:	str	r0, [fp, #-48]	; 0xffffffd0
   123d8:	mov	r4, #1
   123dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   123e0:	cmp	r0, #0
   123e4:	bne	12204 <__assert_fail@plt+0x1340>
   123e8:	b	124dc <__assert_fail@plt+0x1618>
   123ec:	ldr	r0, [sp, #32]
   123f0:	cmp	r0, #1
   123f4:	bne	125e0 <__assert_fail@plt+0x171c>
   123f8:	str	lr, [sp, #84]	; 0x54
   123fc:	bl	10de0 <__ctype_b_loc@plt>
   12400:	ldr	r0, [r0]
   12404:	ldr	ip, [fp, #-84]	; 0xffffffac
   12408:	mov	r1, #1
   1240c:	add	r0, r0, r5, lsl #1
   12410:	ldrb	r0, [r0, #1]
   12414:	ubfx	r4, r0, #6, #1
   12418:	b	129d8 <__assert_fail@plt+0x1b14>
   1241c:	cmp	r7, #0
   12420:	ldrbeq	r0, [ip, #1]
   12424:	cmpeq	r0, #0
   12428:	beq	12444 <__assert_fail@plt+0x1580>
   1242c:	mvn	lr, #0
   12430:	mov	r8, #0
   12434:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12438:	cmp	r0, #0
   1243c:	bne	12204 <__assert_fail@plt+0x1340>
   12440:	b	124dc <__assert_fail@plt+0x1618>
   12444:	mov	r1, #1
   12448:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1244c:	cmp	r0, #2
   12450:	bne	12460 <__assert_fail@plt+0x159c>
   12454:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12458:	tst	r0, #1
   1245c:	bne	12cd4 <__assert_fail@plt+0x1e10>
   12460:	mov	r4, r1
   12464:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12468:	cmp	r0, #0
   1246c:	bne	12204 <__assert_fail@plt+0x1340>
   12470:	b	124dc <__assert_fail@plt+0x1618>
   12474:	ldr	r1, [sp, #40]	; 0x28
   12478:	mov	r8, #0
   1247c:	mov	r0, #92	; 0x5c
   12480:	cmp	r1, #0
   12484:	beq	124c8 <__assert_fail@plt+0x1604>
   12488:	mov	r4, #0
   1248c:	cmp	r8, #0
   12490:	bne	12284 <__assert_fail@plt+0x13c0>
   12494:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12498:	tst	r2, #1
   1249c:	beq	12588 <__assert_fail@plt+0x16c4>
   124a0:	cmp	r9, sl
   124a4:	movcc	r1, #39	; 0x27
   124a8:	strbcc	r1, [r6, r9]
   124ac:	add	r1, r9, #1
   124b0:	add	r9, r9, #2
   124b4:	cmp	r1, sl
   124b8:	movcc	r2, #39	; 0x27
   124bc:	strbcc	r2, [r6, r1]
   124c0:	mov	r2, #0
   124c4:	b	12588 <__assert_fail@plt+0x16c4>
   124c8:	ldr	r1, [sp, #80]	; 0x50
   124cc:	mov	r4, #0
   124d0:	mov	r8, #0
   124d4:	tst	r1, #1
   124d8:	bne	12518 <__assert_fail@plt+0x1654>
   124dc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   124e0:	cmp	r0, #0
   124e4:	mov	r0, r5
   124e8:	beq	1250c <__assert_fail@plt+0x1648>
   124ec:	ldr	r1, [fp, #16]
   124f0:	ubfx	r0, r5, #5, #3
   124f4:	mov	r2, #1
   124f8:	ldr	r0, [r1, r0, lsl #2]
   124fc:	and	r1, r5, #31
   12500:	tst	r0, r2, lsl r1
   12504:	mov	r0, r5
   12508:	bne	12518 <__assert_fail@plt+0x1654>
   1250c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12510:	cmp	r1, #0
   12514:	beq	12970 <__assert_fail@plt+0x1aac>
   12518:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1251c:	tst	r1, #1
   12520:	bne	12cb4 <__assert_fail@plt+0x1df0>
   12524:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12528:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1252c:	cmp	r1, #2
   12530:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12534:	movwne	r1, #1
   12538:	orr	r1, r1, r2
   1253c:	tst	r1, #1
   12540:	bne	12578 <__assert_fail@plt+0x16b4>
   12544:	cmp	r9, sl
   12548:	movcc	r1, #39	; 0x27
   1254c:	strbcc	r1, [r6, r9]
   12550:	add	r1, r9, #1
   12554:	cmp	r1, sl
   12558:	movcc	r2, #36	; 0x24
   1255c:	strbcc	r2, [r6, r1]
   12560:	add	r1, r9, #2
   12564:	add	r9, r9, #3
   12568:	cmp	r1, sl
   1256c:	movcc	r2, #39	; 0x27
   12570:	strbcc	r2, [r6, r1]
   12574:	mov	r2, #1
   12578:	cmp	r9, sl
   1257c:	movcc	r1, #92	; 0x5c
   12580:	strbcc	r1, [r6, r9]
   12584:	add	r9, r9, #1
   12588:	cmp	r9, sl
   1258c:	add	r7, r7, #1
   12590:	strbcc	r0, [r6, r9]
   12594:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12598:	add	r9, r9, #1
   1259c:	and	r0, r0, r4
   125a0:	mov	r4, r0
   125a4:	cmn	lr, #1
   125a8:	bne	11f1c <__assert_fail@plt+0x1058>
   125ac:	b	11f28 <__assert_fail@plt+0x1064>
   125b0:	ldr	r0, [sp, #28]
   125b4:	mov	r4, #0
   125b8:	mov	r8, #0
   125bc:	mov	r5, #0
   125c0:	cmp	r0, #0
   125c4:	beq	124dc <__assert_fail@plt+0x1618>
   125c8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   125cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   125d0:	add	r7, r7, #1
   125d4:	cmn	lr, #1
   125d8:	bne	11f1c <__assert_fail@plt+0x1058>
   125dc:	b	11f28 <__assert_fail@plt+0x1064>
   125e0:	mov	r0, #0
   125e4:	cmn	lr, #1
   125e8:	str	r0, [fp, #-36]	; 0xffffffdc
   125ec:	str	r0, [fp, #-40]	; 0xffffffd8
   125f0:	bne	12604 <__assert_fail@plt+0x1740>
   125f4:	mov	r0, ip
   125f8:	bl	10df8 <strlen@plt>
   125fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12600:	mov	lr, r0
   12604:	ldr	r0, [sp, #36]	; 0x24
   12608:	str	sl, [sp, #56]	; 0x38
   1260c:	str	lr, [sp, #84]	; 0x54
   12610:	cmp	r0, #0
   12614:	beq	1282c <__assert_fail@plt+0x1968>
   12618:	add	r0, ip, r7
   1261c:	mov	r4, #1
   12620:	mov	r6, #0
   12624:	sub	sl, fp, #40	; 0x28
   12628:	str	r0, [sp, #20]
   1262c:	str	r6, [sp, #64]	; 0x40
   12630:	add	r6, r6, r7
   12634:	sub	r0, fp, #44	; 0x2c
   12638:	mov	r3, sl
   1263c:	add	r1, ip, r6
   12640:	sub	r2, lr, r6
   12644:	bl	14614 <__assert_fail@plt+0x3750>
   12648:	cmn	r0, #2
   1264c:	beq	12988 <__assert_fail@plt+0x1ac4>
   12650:	ldr	sl, [sp, #56]	; 0x38
   12654:	cmn	r0, #1
   12658:	beq	1297c <__assert_fail@plt+0x1ab8>
   1265c:	cmp	r0, #0
   12660:	beq	12980 <__assert_fail@plt+0x1abc>
   12664:	cmp	r0, #2
   12668:	bcc	12728 <__assert_fail@plt+0x1864>
   1266c:	ldr	r1, [sp, #64]	; 0x40
   12670:	ldr	r2, [sp, #20]
   12674:	add	r1, r2, r1
   12678:	mov	r2, #1
   1267c:	ldrb	r3, [r1, r2]
   12680:	sub	r3, r3, #91	; 0x5b
   12684:	cmp	r3, #33	; 0x21
   12688:	bhi	1271c <__assert_fail@plt+0x1858>
   1268c:	add	r6, pc, #0
   12690:	ldr	pc, [r6, r3, lsl #2]
   12694:	andeq	r2, r1, r0, ror #25
   12698:	andeq	r2, r1, r0, ror #25
   1269c:	andeq	r2, r1, ip, lsl r7
   126a0:	andeq	r2, r1, r0, ror #25
   126a4:	andeq	r2, r1, ip, lsl r7
   126a8:	andeq	r2, r1, r0, ror #25
   126ac:	andeq	r2, r1, ip, lsl r7
   126b0:	andeq	r2, r1, ip, lsl r7
   126b4:	andeq	r2, r1, ip, lsl r7
   126b8:	andeq	r2, r1, ip, lsl r7
   126bc:	andeq	r2, r1, ip, lsl r7
   126c0:	andeq	r2, r1, ip, lsl r7
   126c4:	andeq	r2, r1, ip, lsl r7
   126c8:	andeq	r2, r1, ip, lsl r7
   126cc:	andeq	r2, r1, ip, lsl r7
   126d0:	andeq	r2, r1, ip, lsl r7
   126d4:	andeq	r2, r1, ip, lsl r7
   126d8:	andeq	r2, r1, ip, lsl r7
   126dc:	andeq	r2, r1, ip, lsl r7
   126e0:	andeq	r2, r1, ip, lsl r7
   126e4:	andeq	r2, r1, ip, lsl r7
   126e8:	andeq	r2, r1, ip, lsl r7
   126ec:	andeq	r2, r1, ip, lsl r7
   126f0:	andeq	r2, r1, ip, lsl r7
   126f4:	andeq	r2, r1, ip, lsl r7
   126f8:	andeq	r2, r1, ip, lsl r7
   126fc:	andeq	r2, r1, ip, lsl r7
   12700:	andeq	r2, r1, ip, lsl r7
   12704:	andeq	r2, r1, ip, lsl r7
   12708:	andeq	r2, r1, ip, lsl r7
   1270c:	andeq	r2, r1, ip, lsl r7
   12710:	andeq	r2, r1, ip, lsl r7
   12714:	andeq	r2, r1, ip, lsl r7
   12718:	andeq	r2, r1, r0, ror #25
   1271c:	add	r2, r2, #1
   12720:	cmp	r2, r0
   12724:	bcc	1267c <__assert_fail@plt+0x17b8>
   12728:	ldr	r6, [sp, #64]	; 0x40
   1272c:	add	r6, r0, r6
   12730:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12734:	bl	10d50 <iswprint@plt>
   12738:	cmp	r0, #0
   1273c:	sub	sl, fp, #40	; 0x28
   12740:	movwne	r0, #1
   12744:	and	r4, r4, r0
   12748:	mov	r0, sl
   1274c:	bl	10d20 <mbsinit@plt>
   12750:	ldr	ip, [fp, #-84]	; 0xffffffac
   12754:	ldr	lr, [sp, #84]	; 0x54
   12758:	cmp	r0, #0
   1275c:	beq	1262c <__assert_fail@plt+0x1768>
   12760:	b	129cc <__assert_fail@plt+0x1b08>
   12764:	ldr	r0, [sp, #24]
   12768:	cmp	r0, #0
   1276c:	beq	12814 <__assert_fail@plt+0x1950>
   12770:	add	r0, r7, #2
   12774:	cmp	r0, lr
   12778:	bcs	12814 <__assert_fail@plt+0x1950>
   1277c:	add	r1, ip, r7
   12780:	ldrb	r1, [r1, #1]
   12784:	cmp	r1, #63	; 0x3f
   12788:	bne	12814 <__assert_fail@plt+0x1950>
   1278c:	ldrb	r5, [ip, r0]
   12790:	sub	r1, r5, #33	; 0x21
   12794:	cmp	r1, #29
   12798:	bhi	12814 <__assert_fail@plt+0x1950>
   1279c:	movw	r3, #20929	; 0x51c1
   127a0:	mov	r2, #1
   127a4:	movt	r3, #14336	; 0x3800
   127a8:	tst	r3, r2, lsl r1
   127ac:	beq	12814 <__assert_fail@plt+0x1950>
   127b0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   127b4:	tst	r1, #1
   127b8:	bne	12e04 <__assert_fail@plt+0x1f40>
   127bc:	cmp	r9, sl
   127c0:	mov	r7, r0
   127c4:	mov	r4, #0
   127c8:	movcc	r1, #63	; 0x3f
   127cc:	strbcc	r1, [r6, r9]
   127d0:	add	r1, r9, #1
   127d4:	cmp	r1, sl
   127d8:	movcc	r2, #34	; 0x22
   127dc:	strbcc	r2, [r6, r1]
   127e0:	add	r1, r9, #2
   127e4:	cmp	r1, sl
   127e8:	movcc	r2, #34	; 0x22
   127ec:	strbcc	r2, [r6, r1]
   127f0:	add	r1, r9, #3
   127f4:	add	r9, r9, #4
   127f8:	cmp	r1, sl
   127fc:	movcc	r2, #63	; 0x3f
   12800:	strbcc	r2, [r6, r1]
   12804:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12808:	cmp	r0, #0
   1280c:	bne	12204 <__assert_fail@plt+0x1340>
   12810:	b	124dc <__assert_fail@plt+0x1618>
   12814:	mov	r5, #63	; 0x3f
   12818:	mov	r4, #0
   1281c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12820:	cmp	r0, #0
   12824:	bne	12204 <__assert_fail@plt+0x1340>
   12828:	b	124dc <__assert_fail@plt+0x1618>
   1282c:	mov	r4, #1
   12830:	mov	r6, #0
   12834:	sub	sl, fp, #40	; 0x28
   12838:	str	r6, [sp, #64]	; 0x40
   1283c:	add	r6, r6, r7
   12840:	sub	r0, fp, #44	; 0x2c
   12844:	mov	r3, sl
   12848:	add	r1, ip, r6
   1284c:	sub	r2, lr, r6
   12850:	bl	14614 <__assert_fail@plt+0x3750>
   12854:	cmn	r0, #2
   12858:	beq	12988 <__assert_fail@plt+0x1ac4>
   1285c:	cmn	r0, #1
   12860:	beq	1297c <__assert_fail@plt+0x1ab8>
   12864:	ldr	r6, [sp, #64]	; 0x40
   12868:	cmp	r0, #0
   1286c:	beq	129c8 <__assert_fail@plt+0x1b04>
   12870:	add	r6, r0, r6
   12874:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12878:	bl	10d50 <iswprint@plt>
   1287c:	cmp	r0, #0
   12880:	sub	sl, fp, #40	; 0x28
   12884:	movwne	r0, #1
   12888:	and	r4, r4, r0
   1288c:	mov	r0, sl
   12890:	bl	10d20 <mbsinit@plt>
   12894:	ldr	ip, [fp, #-84]	; 0xffffffac
   12898:	ldr	lr, [sp, #84]	; 0x54
   1289c:	cmp	r0, #0
   128a0:	beq	12838 <__assert_fail@plt+0x1974>
   128a4:	b	129cc <__assert_fail@plt+0x1b08>
   128a8:	cmp	r9, sl
   128ac:	mov	r2, #1
   128b0:	movcc	r0, #39	; 0x27
   128b4:	strbcc	r0, [r6, r9]
   128b8:	add	r0, r9, #1
   128bc:	cmp	r0, sl
   128c0:	movcc	r1, #36	; 0x24
   128c4:	strbcc	r1, [r6, r0]
   128c8:	add	r0, r9, #2
   128cc:	cmp	r0, sl
   128d0:	movcc	r1, #39	; 0x27
   128d4:	strbcc	r1, [r6, r0]
   128d8:	add	r0, r9, #3
   128dc:	cmp	r0, sl
   128e0:	add	r9, r0, #1
   128e4:	str	r2, [fp, #-48]	; 0xffffffd0
   128e8:	movcc	r1, #92	; 0x5c
   128ec:	strbcc	r1, [r6, r0]
   128f0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   128f4:	cmp	r1, #2
   128f8:	beq	12958 <__assert_fail@plt+0x1a94>
   128fc:	add	r1, r7, #1
   12900:	mov	r4, #0
   12904:	mov	r8, #1
   12908:	mov	r5, #48	; 0x30
   1290c:	cmp	r1, lr
   12910:	bcs	121f8 <__assert_fail@plt+0x1334>
   12914:	ldrb	r1, [ip, r1]
   12918:	sub	r1, r1, #48	; 0x30
   1291c:	uxtb	r1, r1
   12920:	cmp	r1, #9
   12924:	bhi	121f8 <__assert_fail@plt+0x1334>
   12928:	cmp	r9, sl
   1292c:	movcc	r1, #48	; 0x30
   12930:	strbcc	r1, [r6, r9]
   12934:	add	r1, r0, #2
   12938:	add	r9, r0, #3
   1293c:	cmp	r1, sl
   12940:	movcc	r2, #48	; 0x30
   12944:	strbcc	r2, [r6, r1]
   12948:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1294c:	cmp	r0, #0
   12950:	bne	12204 <__assert_fail@plt+0x1340>
   12954:	b	124dc <__assert_fail@plt+0x1618>
   12958:	mov	r0, #48	; 0x30
   1295c:	mov	r8, #1
   12960:	mov	r4, #0
   12964:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12968:	cmp	r1, #0
   1296c:	bne	12518 <__assert_fail@plt+0x1654>
   12970:	cmp	r8, #0
   12974:	beq	12494 <__assert_fail@plt+0x15d0>
   12978:	b	12284 <__assert_fail@plt+0x13c0>
   1297c:	mov	r4, #0
   12980:	ldr	ip, [fp, #-84]	; 0xffffffac
   12984:	b	129c0 <__assert_fail@plt+0x1afc>
   12988:	ldr	r1, [sp, #84]	; 0x54
   1298c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12990:	mov	r4, #0
   12994:	cmp	r6, r1
   12998:	bcs	129c0 <__assert_fail@plt+0x1afc>
   1299c:	ldrb	r0, [ip, r6]
   129a0:	cmp	r0, #0
   129a4:	beq	129c0 <__assert_fail@plt+0x1afc>
   129a8:	ldr	r0, [sp, #64]	; 0x40
   129ac:	add	r0, r0, #1
   129b0:	add	r6, r0, r7
   129b4:	str	r0, [sp, #64]	; 0x40
   129b8:	cmp	r6, r1
   129bc:	bcc	1299c <__assert_fail@plt+0x1ad8>
   129c0:	ldr	r6, [sp, #64]	; 0x40
   129c4:	b	129cc <__assert_fail@plt+0x1b08>
   129c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   129cc:	mov	r1, r6
   129d0:	ldr	r6, [sp, #76]	; 0x4c
   129d4:	ldr	sl, [sp, #56]	; 0x38
   129d8:	ldr	r0, [sp, #44]	; 0x2c
   129dc:	cmp	r1, #1
   129e0:	orr	r2, r4, r0
   129e4:	mov	r0, r1
   129e8:	bhi	12a08 <__assert_fail@plt+0x1b44>
   129ec:	tst	r2, #1
   129f0:	beq	12a08 <__assert_fail@plt+0x1b44>
   129f4:	ldr	lr, [sp, #84]	; 0x54
   129f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   129fc:	cmp	r0, #0
   12a00:	bne	12204 <__assert_fail@plt+0x1340>
   12a04:	b	124dc <__assert_fail@plt+0x1618>
   12a08:	str	r2, [sp, #64]	; 0x40
   12a0c:	add	r0, r0, r7
   12a10:	add	r1, r7, #1
   12a14:	ldr	lr, [sp, #84]	; 0x54
   12a18:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12a1c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12a20:	mov	r3, #0
   12a24:	str	r0, [sp, #56]	; 0x38
   12a28:	ldr	r0, [sp, #64]	; 0x40
   12a2c:	tst	r0, #1
   12a30:	bne	12b18 <__assert_fail@plt+0x1c54>
   12a34:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a38:	tst	r0, #1
   12a3c:	bne	12cb8 <__assert_fail@plt+0x1df4>
   12a40:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12a44:	cmp	r7, #2
   12a48:	movwne	r3, #1
   12a4c:	orr	r3, r3, r2
   12a50:	tst	r3, #1
   12a54:	bne	12a8c <__assert_fail@plt+0x1bc8>
   12a58:	cmp	r9, sl
   12a5c:	add	r3, r9, #1
   12a60:	movcc	r2, #39	; 0x27
   12a64:	strbcc	r2, [r6, r9]
   12a68:	cmp	r3, sl
   12a6c:	movcc	r2, #36	; 0x24
   12a70:	strbcc	r2, [r6, r3]
   12a74:	add	r3, r9, #2
   12a78:	add	r9, r9, #3
   12a7c:	cmp	r3, sl
   12a80:	movcc	r2, #39	; 0x27
   12a84:	strbcc	r2, [r6, r3]
   12a88:	mov	r2, #1
   12a8c:	cmp	r9, sl
   12a90:	mov	r0, r2
   12a94:	movcc	r3, #92	; 0x5c
   12a98:	strbcc	r3, [r6, r9]
   12a9c:	add	r3, r9, #1
   12aa0:	cmp	r3, sl
   12aa4:	andcc	r7, r5, #192	; 0xc0
   12aa8:	movcc	r2, #48	; 0x30
   12aac:	orrcc	r7, r2, r7, lsr #6
   12ab0:	strbcc	r7, [r6, r3]
   12ab4:	add	r3, r9, #2
   12ab8:	add	r9, r9, #3
   12abc:	cmp	r3, sl
   12ac0:	lsrcc	r7, r5, #3
   12ac4:	movcc	r2, #6
   12ac8:	bficc	r7, r2, #3, #29
   12acc:	mov	r2, #6
   12ad0:	strbcc	r7, [r6, r3]
   12ad4:	bfi	r5, r2, #3, #29
   12ad8:	mov	r3, #1
   12adc:	mov	r2, r0
   12ae0:	ldr	r0, [sp, #56]	; 0x38
   12ae4:	and	r8, r3, #1
   12ae8:	cmp	r0, r1
   12aec:	bhi	12b4c <__assert_fail@plt+0x1c88>
   12af0:	b	12b8c <__assert_fail@plt+0x1cc8>
   12af4:	cmp	r9, sl
   12af8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12afc:	strbcc	r5, [r6, r9]
   12b00:	add	r9, r9, #1
   12b04:	ldrb	r5, [ip, r1]
   12b08:	add	r1, r1, #1
   12b0c:	ldr	r0, [sp, #64]	; 0x40
   12b10:	tst	r0, #1
   12b14:	beq	12a34 <__assert_fail@plt+0x1b70>
   12b18:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12b1c:	tst	r7, #1
   12b20:	beq	12b34 <__assert_fail@plt+0x1c70>
   12b24:	cmp	r9, sl
   12b28:	movcc	r7, #92	; 0x5c
   12b2c:	strbcc	r7, [r6, r9]
   12b30:	add	r9, r9, #1
   12b34:	mov	r7, #0
   12b38:	str	r7, [fp, #-56]	; 0xffffffc8
   12b3c:	ldr	r0, [sp, #56]	; 0x38
   12b40:	and	r8, r3, #1
   12b44:	cmp	r0, r1
   12b48:	bls	12b8c <__assert_fail@plt+0x1cc8>
   12b4c:	cmp	r8, #0
   12b50:	mvn	r7, r2
   12b54:	movwne	r8, #1
   12b58:	orr	r7, r7, r8
   12b5c:	tst	r7, #1
   12b60:	bne	12af4 <__assert_fail@plt+0x1c30>
   12b64:	cmp	r9, sl
   12b68:	movcc	r7, #39	; 0x27
   12b6c:	strbcc	r7, [r6, r9]
   12b70:	add	r7, r9, #1
   12b74:	add	r9, r9, #2
   12b78:	cmp	r7, sl
   12b7c:	movcc	r2, #39	; 0x27
   12b80:	strbcc	r2, [r6, r7]
   12b84:	mov	r2, #0
   12b88:	b	12af4 <__assert_fail@plt+0x1c30>
   12b8c:	cmp	r8, #0
   12b90:	sub	r7, r1, #1
   12b94:	mov	r0, r5
   12b98:	str	r2, [fp, #-48]	; 0xffffffd0
   12b9c:	movwne	r8, #1
   12ba0:	cmp	r8, #0
   12ba4:	beq	12494 <__assert_fail@plt+0x15d0>
   12ba8:	b	12284 <__assert_fail@plt+0x13c0>
   12bac:	mov	lr, r7
   12bb0:	b	12bb8 <__assert_fail@plt+0x1cf4>
   12bb4:	mvn	lr, #0
   12bb8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12bbc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12bc0:	eor	r0, r7, #2
   12bc4:	orr	r0, r0, r9
   12bc8:	clz	r0, r0
   12bcc:	lsr	r0, r0, #5
   12bd0:	tst	r1, r0
   12bd4:	bne	12cd4 <__assert_fail@plt+0x1e10>
   12bd8:	mov	r0, r1
   12bdc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12be0:	cmp	r7, #2
   12be4:	movwne	r1, #1
   12be8:	orr	r0, r0, r1
   12bec:	tst	r0, #1
   12bf0:	ldreq	r0, [sp, #52]	; 0x34
   12bf4:	streq	lr, [sp, #84]	; 0x54
   12bf8:	eoreq	r0, r0, #1
   12bfc:	tsteq	r0, #1
   12c00:	bne	12d98 <__assert_fail@plt+0x1ed4>
   12c04:	tst	r4, #1
   12c08:	bne	12d54 <__assert_fail@plt+0x1e90>
   12c0c:	ldr	r6, [sp, #48]	; 0x30
   12c10:	mov	r8, #0
   12c14:	cmp	r6, #0
   12c18:	beq	12d90 <__assert_fail@plt+0x1ecc>
   12c1c:	ldr	r0, [sp, #80]	; 0x50
   12c20:	mov	r1, #0
   12c24:	cmp	sl, #0
   12c28:	mov	r4, #0
   12c2c:	str	r1, [fp, #-72]	; 0xffffffb8
   12c30:	beq	11b24 <__assert_fail@plt+0xc60>
   12c34:	b	12d98 <__assert_fail@plt+0x1ed4>
   12c38:	ldrb	r1, [r0, #3]
   12c3c:	cmp	r1, #56	; 0x38
   12c40:	ldrbeq	r1, [r0, #4]
   12c44:	cmpeq	r1, #48	; 0x30
   12c48:	bne	11d1c <__assert_fail@plt+0xe58>
   12c4c:	ldrb	r1, [r0, #5]
   12c50:	cmp	r1, #51	; 0x33
   12c54:	ldrbeq	r1, [r0, #6]
   12c58:	cmpeq	r1, #48	; 0x30
   12c5c:	bne	11d1c <__assert_fail@plt+0xe58>
   12c60:	ldrb	r0, [r0, #7]
   12c64:	cmp	r0, #0
   12c68:	movw	r0, #19924	; 0x4dd4
   12c6c:	movt	r0, #1
   12c70:	str	r0, [sp, #68]	; 0x44
   12c74:	bne	11d1c <__assert_fail@plt+0xe58>
   12c78:	b	11d38 <__assert_fail@plt+0xe74>
   12c7c:	ldrb	r1, [r0, #4]
   12c80:	cmp	r1, #48	; 0x30
   12c84:	ldrbeq	r1, [r0, #5]
   12c88:	cmpeq	r1, #51	; 0x33
   12c8c:	bne	11e00 <__assert_fail@plt+0xf3c>
   12c90:	ldrb	r1, [r0, #6]
   12c94:	cmp	r1, #48	; 0x30
   12c98:	ldrbeq	r0, [r0, #7]
   12c9c:	cmpeq	r0, #0
   12ca0:	bne	11e00 <__assert_fail@plt+0xf3c>
   12ca4:	movw	r0, #19928	; 0x4dd8
   12ca8:	movt	r0, #1
   12cac:	str	r0, [sp, #72]	; 0x48
   12cb0:	b	11e20 <__assert_fail@plt+0xf5c>
   12cb4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12cb8:	ldr	r2, [sp, #80]	; 0x50
   12cbc:	b	12cf4 <__assert_fail@plt+0x1e30>
   12cc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cc4:	mov	r2, #1
   12cc8:	mov	lr, r4
   12ccc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12cd0:	b	12cf4 <__assert_fail@plt+0x1e30>
   12cd4:	ldr	r2, [sp, #80]	; 0x50
   12cd8:	mov	r7, #2
   12cdc:	b	12cf4 <__assert_fail@plt+0x1e30>
   12ce0:	ldr	r6, [sp, #76]	; 0x4c
   12ce4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ce8:	ldr	lr, [sp, #84]	; 0x54
   12cec:	ldr	r2, [sp, #80]	; 0x50
   12cf0:	mov	r7, #2
   12cf4:	mov	r0, #0
   12cf8:	ldr	r1, [fp, #12]
   12cfc:	tst	r2, #1
   12d00:	mov	r2, r7
   12d04:	mov	r3, lr
   12d08:	str	r0, [sp, #8]
   12d0c:	ldr	r0, [sp, #68]	; 0x44
   12d10:	movwne	r2, #4
   12d14:	cmp	r7, #2
   12d18:	movne	r2, r7
   12d1c:	str	r2, [sp]
   12d20:	mov	r2, ip
   12d24:	bic	r1, r1, #2
   12d28:	str	r0, [sp, #12]
   12d2c:	ldr	r0, [sp, #72]	; 0x48
   12d30:	str	r1, [sp, #4]
   12d34:	mov	r1, sl
   12d38:	str	r0, [sp, #16]
   12d3c:	mov	r0, r6
   12d40:	bl	11aa8 <__assert_fail@plt+0xbe4>
   12d44:	mov	r9, r0
   12d48:	mov	r0, r9
   12d4c:	sub	sp, fp, #28
   12d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d54:	mov	r0, #5
   12d58:	ldr	r1, [sp, #48]	; 0x30
   12d5c:	ldr	r2, [fp, #-84]	; 0xffffffac
   12d60:	ldr	r3, [sp, #84]	; 0x54
   12d64:	str	r0, [sp]
   12d68:	ldr	r0, [fp, #12]
   12d6c:	str	r0, [sp, #4]
   12d70:	ldr	r0, [fp, #16]
   12d74:	str	r0, [sp, #8]
   12d78:	ldr	r0, [sp, #68]	; 0x44
   12d7c:	str	r0, [sp, #12]
   12d80:	ldr	r0, [sp, #72]	; 0x48
   12d84:	str	r0, [sp, #16]
   12d88:	ldr	r0, [sp, #76]	; 0x4c
   12d8c:	b	12d40 <__assert_fail@plt+0x1e7c>
   12d90:	mov	r0, #0
   12d94:	str	r0, [fp, #-72]	; 0xffffffb8
   12d98:	ldr	r1, [sp, #92]	; 0x5c
   12d9c:	cmp	r1, #0
   12da0:	beq	12de0 <__assert_fail@plt+0x1f1c>
   12da4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12da8:	ldr	r2, [sp, #76]	; 0x4c
   12dac:	tst	r0, #1
   12db0:	bne	12de4 <__assert_fail@plt+0x1f20>
   12db4:	ldrb	r0, [r1]
   12db8:	cmp	r0, #0
   12dbc:	beq	12de4 <__assert_fail@plt+0x1f20>
   12dc0:	add	r1, r1, #1
   12dc4:	cmp	r9, sl
   12dc8:	strbcc	r0, [r2, r9]
   12dcc:	add	r9, r9, #1
   12dd0:	ldrb	r0, [r1], #1
   12dd4:	cmp	r0, #0
   12dd8:	bne	12dc4 <__assert_fail@plt+0x1f00>
   12ddc:	b	12de4 <__assert_fail@plt+0x1f20>
   12de0:	ldr	r2, [sp, #76]	; 0x4c
   12de4:	cmp	r9, sl
   12de8:	movcc	r0, #0
   12dec:	strbcc	r0, [r2, r9]
   12df0:	mov	r0, r9
   12df4:	sub	sp, fp, #28
   12df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dfc:	mov	r2, #1
   12e00:	b	12ccc <__assert_fail@plt+0x1e08>
   12e04:	ldr	r2, [sp, #80]	; 0x50
   12e08:	mov	r7, #5
   12e0c:	b	12cf4 <__assert_fail@plt+0x1e30>
   12e10:	bl	10eb8 <abort@plt>
   12e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e18:	add	fp, sp, #28
   12e1c:	sub	sp, sp, #28
   12e20:	movw	r5, #24912	; 0x6150
   12e24:	cmp	r2, #0
   12e28:	mov	r4, r1
   12e2c:	mov	r7, r0
   12e30:	str	r0, [sp, #20]
   12e34:	movt	r5, #2
   12e38:	movne	r5, r2
   12e3c:	bl	10e10 <__errno_location@plt>
   12e40:	mov	sl, r0
   12e44:	ldm	r5, {r0, r1}
   12e48:	ldr	r2, [r5, #40]	; 0x28
   12e4c:	ldr	r3, [r5, #44]	; 0x2c
   12e50:	add	r9, r5, #8
   12e54:	ldr	r6, [sl]
   12e58:	orr	r8, r1, #1
   12e5c:	mov	r1, #0
   12e60:	str	r6, [sp, #24]
   12e64:	stm	sp, {r0, r8, r9}
   12e68:	str	r2, [sp, #12]
   12e6c:	str	r3, [sp, #16]
   12e70:	mov	r0, #0
   12e74:	mov	r2, r7
   12e78:	mov	r3, r4
   12e7c:	mov	r6, r4
   12e80:	bl	11aa8 <__assert_fail@plt+0xbe4>
   12e84:	add	r7, r0, #1
   12e88:	mov	r0, r7
   12e8c:	bl	13ee8 <__assert_fail@plt+0x3024>
   12e90:	mov	r4, r0
   12e94:	ldr	r0, [r5]
   12e98:	ldr	r2, [r5, #44]	; 0x2c
   12e9c:	ldr	r1, [r5, #40]	; 0x28
   12ea0:	mov	r3, r6
   12ea4:	stm	sp, {r0, r8, r9}
   12ea8:	str	r2, [sp, #16]
   12eac:	str	r1, [sp, #12]
   12eb0:	mov	r0, r4
   12eb4:	mov	r1, r7
   12eb8:	ldr	r2, [sp, #20]
   12ebc:	bl	11aa8 <__assert_fail@plt+0xbe4>
   12ec0:	ldr	r0, [sp, #24]
   12ec4:	str	r0, [sl]
   12ec8:	mov	r0, r4
   12ecc:	sub	sp, fp, #28
   12ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ed8:	add	fp, sp, #28
   12edc:	sub	sp, sp, #36	; 0x24
   12ee0:	movw	r8, #24912	; 0x6150
   12ee4:	cmp	r3, #0
   12ee8:	mov	r4, r2
   12eec:	str	r2, [sp, #24]
   12ef0:	mov	r5, r1
   12ef4:	mov	r6, r0
   12ef8:	str	r0, [sp, #20]
   12efc:	movt	r8, #2
   12f00:	movne	r8, r3
   12f04:	bl	10e10 <__errno_location@plt>
   12f08:	str	r0, [sp, #28]
   12f0c:	cmp	r4, #0
   12f10:	add	sl, r8, #8
   12f14:	ldm	r8, {r3, r9}
   12f18:	ldr	r7, [r0]
   12f1c:	ldr	r1, [r8, #40]	; 0x28
   12f20:	ldr	r2, [r8, #44]	; 0x2c
   12f24:	mov	r0, #0
   12f28:	orreq	r9, r9, #1
   12f2c:	str	r7, [sp, #32]
   12f30:	mov	r7, r5
   12f34:	stm	sp, {r3, r9, sl}
   12f38:	str	r1, [sp, #12]
   12f3c:	str	r2, [sp, #16]
   12f40:	mov	r1, #0
   12f44:	mov	r2, r6
   12f48:	mov	r3, r5
   12f4c:	bl	11aa8 <__assert_fail@plt+0xbe4>
   12f50:	add	r4, r0, #1
   12f54:	mov	r5, r0
   12f58:	mov	r0, r4
   12f5c:	bl	13ee8 <__assert_fail@plt+0x3024>
   12f60:	mov	r6, r0
   12f64:	ldr	r0, [r8]
   12f68:	ldr	r2, [r8, #44]	; 0x2c
   12f6c:	ldr	r1, [r8, #40]	; 0x28
   12f70:	mov	r3, r7
   12f74:	stm	sp, {r0, r9, sl}
   12f78:	str	r2, [sp, #16]
   12f7c:	str	r1, [sp, #12]
   12f80:	mov	r0, r6
   12f84:	mov	r1, r4
   12f88:	ldr	r2, [sp, #20]
   12f8c:	bl	11aa8 <__assert_fail@plt+0xbe4>
   12f90:	ldr	r0, [sp, #24]
   12f94:	ldr	r1, [sp, #32]
   12f98:	ldr	r2, [sp, #28]
   12f9c:	cmp	r0, #0
   12fa0:	str	r1, [r2]
   12fa4:	strne	r5, [r0]
   12fa8:	mov	r0, r6
   12fac:	sub	sp, fp, #28
   12fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fb4:	push	{r4, r5, r6, r7, fp, lr}
   12fb8:	add	fp, sp, #16
   12fbc:	movw	r4, #24840	; 0x6108
   12fc0:	movt	r4, #2
   12fc4:	ldrd	r6, [r4]
   12fc8:	cmp	r7, #2
   12fcc:	blt	12ff8 <__assert_fail@plt+0x2134>
   12fd0:	add	r5, r6, #12
   12fd4:	mov	r7, #0
   12fd8:	ldr	r0, [r5, r7, lsl #3]
   12fdc:	bl	14518 <__assert_fail@plt+0x3654>
   12fe0:	ldr	r1, [r4, #4]
   12fe4:	add	r2, r7, #2
   12fe8:	add	r0, r7, #1
   12fec:	mov	r7, r0
   12ff0:	cmp	r2, r1
   12ff4:	blt	12fd8 <__assert_fail@plt+0x2114>
   12ff8:	ldr	r0, [r6, #4]
   12ffc:	movw	r5, #24960	; 0x6180
   13000:	movt	r5, #2
   13004:	cmp	r0, r5
   13008:	beq	1301c <__assert_fail@plt+0x2158>
   1300c:	bl	14518 <__assert_fail@plt+0x3654>
   13010:	mov	r0, #256	; 0x100
   13014:	str	r0, [r4, #8]
   13018:	str	r5, [r4, #12]
   1301c:	add	r5, r4, #8
   13020:	cmp	r6, r5
   13024:	beq	13034 <__assert_fail@plt+0x2170>
   13028:	mov	r0, r6
   1302c:	bl	14518 <__assert_fail@plt+0x3654>
   13030:	str	r5, [r4]
   13034:	mov	r0, #1
   13038:	str	r0, [r4, #4]
   1303c:	pop	{r4, r5, r6, r7, fp, pc}
   13040:	movw	r3, #24912	; 0x6150
   13044:	mvn	r2, #0
   13048:	movt	r3, #2
   1304c:	b	13050 <__assert_fail@plt+0x218c>
   13050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13054:	add	fp, sp, #28
   13058:	sub	sp, sp, #44	; 0x2c
   1305c:	mov	r7, r3
   13060:	str	r2, [sp, #36]	; 0x24
   13064:	str	r1, [sp, #32]
   13068:	mov	r5, r0
   1306c:	bl	10e10 <__errno_location@plt>
   13070:	cmp	r5, #0
   13074:	blt	131d8 <__assert_fail@plt+0x2314>
   13078:	cmn	r5, #-2147483647	; 0x80000001
   1307c:	beq	131d8 <__assert_fail@plt+0x2314>
   13080:	movw	r8, #24840	; 0x6108
   13084:	mov	r4, r0
   13088:	movt	r8, #2
   1308c:	ldr	r6, [r8]
   13090:	ldr	r1, [r8, #4]
   13094:	ldr	r0, [r0]
   13098:	str	r4, [sp, #28]
   1309c:	cmp	r1, r5
   130a0:	str	r0, [sp, #24]
   130a4:	ble	130b0 <__assert_fail@plt+0x21ec>
   130a8:	mov	sl, r6
   130ac:	b	13114 <__assert_fail@plt+0x2250>
   130b0:	mov	r0, #8
   130b4:	add	r9, r8, #8
   130b8:	add	r2, r5, #1
   130bc:	str	r1, [fp, #-32]	; 0xffffffe0
   130c0:	mvn	r3, #-2147483648	; 0x80000000
   130c4:	str	r0, [sp]
   130c8:	subs	r0, r6, r9
   130cc:	sub	r2, r2, r1
   130d0:	sub	r1, fp, #32
   130d4:	movne	r0, r6
   130d8:	bl	140e8 <__assert_fail@plt+0x3224>
   130dc:	str	r0, [r8]
   130e0:	cmp	r6, r9
   130e4:	mov	sl, r0
   130e8:	ldrdeq	r0, [r8, #8]
   130ec:	stmeq	sl, {r0, r1}
   130f0:	ldr	r1, [r8, #4]
   130f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   130f8:	add	r0, sl, r1, lsl #3
   130fc:	sub	r1, r2, r1
   13100:	lsl	r2, r1, #3
   13104:	mov	r1, #0
   13108:	bl	10e28 <memset@plt>
   1310c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13110:	str	r0, [r8, #4]
   13114:	mov	r9, sl
   13118:	ldr	r6, [r9, r5, lsl #3]!
   1311c:	ldr	r4, [r9, #4]!
   13120:	ldm	r7, {r0, r1}
   13124:	ldr	r2, [r7, #40]	; 0x28
   13128:	ldr	r3, [r7, #44]	; 0x2c
   1312c:	orr	r8, r1, #1
   13130:	add	r1, r7, #8
   13134:	stm	sp, {r0, r8}
   13138:	add	r0, sp, #8
   1313c:	str	r1, [sp, #20]
   13140:	stm	r0, {r1, r2, r3}
   13144:	mov	r0, r4
   13148:	mov	r1, r6
   1314c:	ldr	r2, [sp, #32]
   13150:	ldr	r3, [sp, #36]	; 0x24
   13154:	bl	11aa8 <__assert_fail@plt+0xbe4>
   13158:	cmp	r6, r0
   1315c:	bhi	131c0 <__assert_fail@plt+0x22fc>
   13160:	add	r6, r0, #1
   13164:	movw	r0, #24960	; 0x6180
   13168:	movt	r0, #2
   1316c:	str	r6, [sl, r5, lsl #3]
   13170:	cmp	r4, r0
   13174:	beq	13180 <__assert_fail@plt+0x22bc>
   13178:	mov	r0, r4
   1317c:	bl	14518 <__assert_fail@plt+0x3654>
   13180:	mov	r0, r6
   13184:	bl	13ee8 <__assert_fail@plt+0x3024>
   13188:	str	r0, [r9]
   1318c:	mov	r4, r0
   13190:	add	r3, sp, #8
   13194:	ldr	r0, [r7]
   13198:	ldr	r1, [r7, #40]	; 0x28
   1319c:	ldr	r2, [r7, #44]	; 0x2c
   131a0:	stm	sp, {r0, r8}
   131a4:	ldr	r0, [sp, #20]
   131a8:	stm	r3, {r0, r1, r2}
   131ac:	mov	r0, r4
   131b0:	mov	r1, r6
   131b4:	ldr	r2, [sp, #32]
   131b8:	ldr	r3, [sp, #36]	; 0x24
   131bc:	bl	11aa8 <__assert_fail@plt+0xbe4>
   131c0:	ldr	r1, [sp, #24]
   131c4:	ldr	r0, [sp, #28]
   131c8:	str	r1, [r0]
   131cc:	mov	r0, r4
   131d0:	sub	sp, fp, #28
   131d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d8:	bl	10eb8 <abort@plt>
   131dc:	movw	r3, #24912	; 0x6150
   131e0:	movt	r3, #2
   131e4:	b	13050 <__assert_fail@plt+0x218c>
   131e8:	movw	r3, #24912	; 0x6150
   131ec:	mov	r1, r0
   131f0:	mov	r0, #0
   131f4:	mvn	r2, #0
   131f8:	movt	r3, #2
   131fc:	b	13050 <__assert_fail@plt+0x218c>
   13200:	movw	r3, #24912	; 0x6150
   13204:	mov	r2, r1
   13208:	mov	r1, r0
   1320c:	mov	r0, #0
   13210:	movt	r3, #2
   13214:	b	13050 <__assert_fail@plt+0x218c>
   13218:	push	{fp, lr}
   1321c:	mov	fp, sp
   13220:	sub	sp, sp, #48	; 0x30
   13224:	vmov.i32	q8, #0	; 0x00000000
   13228:	mov	ip, #32
   1322c:	mov	r3, sp
   13230:	mov	lr, r2
   13234:	cmp	r1, #10
   13238:	add	r2, r3, #16
   1323c:	vst1.64	{d16-d17}, [r3], ip
   13240:	vst1.64	{d16-d17}, [r3]
   13244:	vst1.64	{d16-d17}, [r2]
   13248:	beq	13268 <__assert_fail@plt+0x23a4>
   1324c:	str	r1, [sp]
   13250:	mov	r3, sp
   13254:	mov	r1, lr
   13258:	mvn	r2, #0
   1325c:	bl	13050 <__assert_fail@plt+0x218c>
   13260:	mov	sp, fp
   13264:	pop	{fp, pc}
   13268:	bl	10eb8 <abort@plt>
   1326c:	push	{r4, sl, fp, lr}
   13270:	add	fp, sp, #8
   13274:	sub	sp, sp, #48	; 0x30
   13278:	mov	ip, r3
   1327c:	mov	r3, sp
   13280:	vmov.i32	q8, #0	; 0x00000000
   13284:	mov	lr, #32
   13288:	cmp	r1, #10
   1328c:	add	r4, r3, #16
   13290:	vst1.64	{d16-d17}, [r3], lr
   13294:	vst1.64	{d16-d17}, [r3]
   13298:	vst1.64	{d16-d17}, [r4]
   1329c:	beq	132bc <__assert_fail@plt+0x23f8>
   132a0:	str	r1, [sp]
   132a4:	mov	r1, r2
   132a8:	mov	r3, sp
   132ac:	mov	r2, ip
   132b0:	bl	13050 <__assert_fail@plt+0x218c>
   132b4:	sub	sp, fp, #8
   132b8:	pop	{r4, sl, fp, pc}
   132bc:	bl	10eb8 <abort@plt>
   132c0:	push	{fp, lr}
   132c4:	mov	fp, sp
   132c8:	sub	sp, sp, #48	; 0x30
   132cc:	mov	r3, sp
   132d0:	vmov.i32	q8, #0	; 0x00000000
   132d4:	mov	ip, #32
   132d8:	cmp	r0, #10
   132dc:	add	r2, r3, #16
   132e0:	vst1.64	{d16-d17}, [r3], ip
   132e4:	vst1.64	{d16-d17}, [r3]
   132e8:	vst1.64	{d16-d17}, [r2]
   132ec:	beq	1330c <__assert_fail@plt+0x2448>
   132f0:	str	r0, [sp]
   132f4:	mov	r3, sp
   132f8:	mov	r0, #0
   132fc:	mvn	r2, #0
   13300:	bl	13050 <__assert_fail@plt+0x218c>
   13304:	mov	sp, fp
   13308:	pop	{fp, pc}
   1330c:	bl	10eb8 <abort@plt>
   13310:	push	{fp, lr}
   13314:	mov	fp, sp
   13318:	sub	sp, sp, #48	; 0x30
   1331c:	mov	r3, sp
   13320:	vmov.i32	q8, #0	; 0x00000000
   13324:	mov	ip, #32
   13328:	cmp	r0, #10
   1332c:	add	lr, r3, #16
   13330:	vst1.64	{d16-d17}, [r3], ip
   13334:	vst1.64	{d16-d17}, [r3]
   13338:	vst1.64	{d16-d17}, [lr]
   1333c:	beq	13358 <__assert_fail@plt+0x2494>
   13340:	str	r0, [sp]
   13344:	mov	r3, sp
   13348:	mov	r0, #0
   1334c:	bl	13050 <__assert_fail@plt+0x218c>
   13350:	mov	sp, fp
   13354:	pop	{fp, pc}
   13358:	bl	10eb8 <abort@plt>
   1335c:	push	{r4, sl, fp, lr}
   13360:	add	fp, sp, #8
   13364:	sub	sp, sp, #48	; 0x30
   13368:	mov	lr, r0
   1336c:	movw	r0, #24912	; 0x6150
   13370:	mov	r3, #32
   13374:	mov	ip, r1
   13378:	mov	r4, #1
   1337c:	movt	r0, #2
   13380:	add	r1, r0, #16
   13384:	vld1.64	{d16-d17}, [r0], r3
   13388:	mov	r3, sp
   1338c:	vld1.64	{d18-d19}, [r1]
   13390:	add	r1, r3, #16
   13394:	vld1.64	{d20-d21}, [r0]
   13398:	add	r0, r3, #32
   1339c:	vst1.64	{d18-d19}, [r1]
   133a0:	mov	r1, r3
   133a4:	vst1.64	{d20-d21}, [r0]
   133a8:	mov	r0, #28
   133ac:	and	r0, r0, r2, lsr #3
   133b0:	and	r2, r2, #31
   133b4:	vst1.64	{d16-d17}, [r1], r0
   133b8:	ldr	r0, [r1, #8]
   133bc:	bic	r4, r4, r0, lsr r2
   133c0:	eor	r0, r0, r4, lsl r2
   133c4:	mov	r2, ip
   133c8:	str	r0, [r1, #8]
   133cc:	mov	r0, #0
   133d0:	mov	r1, lr
   133d4:	bl	13050 <__assert_fail@plt+0x218c>
   133d8:	sub	sp, fp, #8
   133dc:	pop	{r4, sl, fp, pc}
   133e0:	push	{fp, lr}
   133e4:	mov	fp, sp
   133e8:	sub	sp, sp, #48	; 0x30
   133ec:	mov	ip, r0
   133f0:	movw	r0, #24912	; 0x6150
   133f4:	mov	r3, #32
   133f8:	movt	r0, #2
   133fc:	add	r2, r0, #16
   13400:	vld1.64	{d16-d17}, [r0], r3
   13404:	mov	r3, sp
   13408:	vld1.64	{d18-d19}, [r2]
   1340c:	add	r2, r3, #16
   13410:	vld1.64	{d20-d21}, [r0]
   13414:	add	r0, r3, #32
   13418:	vst1.64	{d18-d19}, [r2]
   1341c:	mov	r2, r3
   13420:	vst1.64	{d20-d21}, [r0]
   13424:	mov	r0, #28
   13428:	and	r0, r0, r1, lsr #3
   1342c:	and	r1, r1, #31
   13430:	vst1.64	{d16-d17}, [r2], r0
   13434:	mov	r0, #1
   13438:	ldr	lr, [r2, #8]
   1343c:	bic	r0, r0, lr, lsr r1
   13440:	eor	r0, lr, r0, lsl r1
   13444:	mov	r1, ip
   13448:	str	r0, [r2, #8]
   1344c:	mov	r0, #0
   13450:	mvn	r2, #0
   13454:	bl	13050 <__assert_fail@plt+0x218c>
   13458:	mov	sp, fp
   1345c:	pop	{fp, pc}
   13460:	push	{fp, lr}
   13464:	mov	fp, sp
   13468:	sub	sp, sp, #48	; 0x30
   1346c:	movw	r2, #24912	; 0x6150
   13470:	mov	r3, #32
   13474:	mov	r1, r0
   13478:	movt	r2, #2
   1347c:	add	r0, r2, #16
   13480:	vld1.64	{d16-d17}, [r2], r3
   13484:	mov	r3, sp
   13488:	vld1.64	{d18-d19}, [r0]
   1348c:	add	r0, r3, #16
   13490:	vld1.64	{d20-d21}, [r2]
   13494:	mov	r2, r3
   13498:	vst1.64	{d18-d19}, [r0]
   1349c:	add	r0, r3, #32
   134a0:	vst1.64	{d20-d21}, [r0]
   134a4:	mov	r0, #12
   134a8:	vst1.64	{d16-d17}, [r2], r0
   134ac:	ldr	r0, [r2]
   134b0:	orr	r0, r0, #67108864	; 0x4000000
   134b4:	str	r0, [r2]
   134b8:	mov	r0, #0
   134bc:	mvn	r2, #0
   134c0:	bl	13050 <__assert_fail@plt+0x218c>
   134c4:	mov	sp, fp
   134c8:	pop	{fp, pc}
   134cc:	push	{fp, lr}
   134d0:	mov	fp, sp
   134d4:	sub	sp, sp, #48	; 0x30
   134d8:	mov	ip, r1
   134dc:	mov	r1, r0
   134e0:	movw	r0, #24912	; 0x6150
   134e4:	mov	r3, #32
   134e8:	movt	r0, #2
   134ec:	add	r2, r0, #16
   134f0:	vld1.64	{d16-d17}, [r0], r3
   134f4:	mov	r3, sp
   134f8:	vld1.64	{d18-d19}, [r2]
   134fc:	add	r2, r3, #16
   13500:	vld1.64	{d20-d21}, [r0]
   13504:	add	r0, r3, #32
   13508:	vst1.64	{d18-d19}, [r2]
   1350c:	mov	r2, r3
   13510:	vst1.64	{d20-d21}, [r0]
   13514:	mov	r0, #12
   13518:	vst1.64	{d16-d17}, [r2], r0
   1351c:	ldr	r0, [r2]
   13520:	orr	r0, r0, #67108864	; 0x4000000
   13524:	str	r0, [r2]
   13528:	mov	r0, #0
   1352c:	mov	r2, ip
   13530:	bl	13050 <__assert_fail@plt+0x218c>
   13534:	mov	sp, fp
   13538:	pop	{fp, pc}
   1353c:	push	{r4, sl, fp, lr}
   13540:	add	fp, sp, #8
   13544:	sub	sp, sp, #96	; 0x60
   13548:	mov	ip, r2
   1354c:	mov	r2, sp
   13550:	vmov.i32	q8, #0	; 0x00000000
   13554:	mov	r4, #28
   13558:	cmp	r1, #10
   1355c:	mov	r3, r2
   13560:	add	lr, r2, #16
   13564:	vst1.64	{d16-d17}, [r3], r4
   13568:	vst1.64	{d16-d17}, [lr]
   1356c:	vst1.32	{d16-d17}, [r3]
   13570:	beq	135c0 <__assert_fail@plt+0x26fc>
   13574:	vld1.64	{d16-d17}, [r2], r4
   13578:	vld1.64	{d18-d19}, [lr]
   1357c:	add	r3, sp, #48	; 0x30
   13580:	add	r4, r3, #4
   13584:	vld1.32	{d20-d21}, [r2]
   13588:	add	r2, r3, #20
   1358c:	vst1.32	{d16-d17}, [r4]
   13590:	vst1.32	{d18-d19}, [r2]
   13594:	add	r2, r3, #32
   13598:	vst1.32	{d20-d21}, [r2]
   1359c:	str	r1, [sp, #48]	; 0x30
   135a0:	mvn	r2, #0
   135a4:	ldr	r1, [sp, #60]	; 0x3c
   135a8:	orr	r1, r1, #67108864	; 0x4000000
   135ac:	str	r1, [sp, #60]	; 0x3c
   135b0:	mov	r1, ip
   135b4:	bl	13050 <__assert_fail@plt+0x218c>
   135b8:	sub	sp, fp, #8
   135bc:	pop	{r4, sl, fp, pc}
   135c0:	bl	10eb8 <abort@plt>
   135c4:	push	{r4, r5, fp, lr}
   135c8:	add	fp, sp, #8
   135cc:	sub	sp, sp, #48	; 0x30
   135d0:	mov	ip, r3
   135d4:	movw	r3, #24912	; 0x6150
   135d8:	mov	lr, #32
   135dc:	cmp	r1, #0
   135e0:	mov	r5, sp
   135e4:	movt	r3, #2
   135e8:	cmpne	r2, #0
   135ec:	add	r4, r3, #16
   135f0:	vld1.64	{d16-d17}, [r3], lr
   135f4:	vld1.64	{d18-d19}, [r4]
   135f8:	add	r4, r5, #16
   135fc:	vld1.64	{d20-d21}, [r3]
   13600:	vst1.64	{d16-d17}, [r5], lr
   13604:	mov	r3, #10
   13608:	vst1.64	{d18-d19}, [r4]
   1360c:	vst1.64	{d20-d21}, [r5]
   13610:	str	r3, [sp]
   13614:	bne	1361c <__assert_fail@plt+0x2758>
   13618:	bl	10eb8 <abort@plt>
   1361c:	str	r2, [sp, #44]	; 0x2c
   13620:	str	r1, [sp, #40]	; 0x28
   13624:	mov	r3, sp
   13628:	mov	r1, ip
   1362c:	mvn	r2, #0
   13630:	bl	13050 <__assert_fail@plt+0x218c>
   13634:	sub	sp, fp, #8
   13638:	pop	{r4, r5, fp, pc}
   1363c:	push	{r4, r5, fp, lr}
   13640:	add	fp, sp, #8
   13644:	sub	sp, sp, #48	; 0x30
   13648:	mov	lr, r3
   1364c:	movw	r3, #24912	; 0x6150
   13650:	mov	ip, #32
   13654:	cmp	r1, #0
   13658:	mov	r5, sp
   1365c:	movt	r3, #2
   13660:	cmpne	r2, #0
   13664:	add	r4, r3, #16
   13668:	vld1.64	{d16-d17}, [r3], ip
   1366c:	vld1.64	{d18-d19}, [r4]
   13670:	add	r4, r5, #16
   13674:	vld1.64	{d20-d21}, [r3]
   13678:	vst1.64	{d16-d17}, [r5], ip
   1367c:	mov	r3, #10
   13680:	vst1.64	{d18-d19}, [r4]
   13684:	vst1.64	{d20-d21}, [r5]
   13688:	str	r3, [sp]
   1368c:	bne	13694 <__assert_fail@plt+0x27d0>
   13690:	bl	10eb8 <abort@plt>
   13694:	ldr	ip, [fp, #8]
   13698:	str	r2, [sp, #44]	; 0x2c
   1369c:	str	r1, [sp, #40]	; 0x28
   136a0:	mov	r3, sp
   136a4:	mov	r1, lr
   136a8:	mov	r2, ip
   136ac:	bl	13050 <__assert_fail@plt+0x218c>
   136b0:	sub	sp, fp, #8
   136b4:	pop	{r4, r5, fp, pc}
   136b8:	push	{r4, sl, fp, lr}
   136bc:	add	fp, sp, #8
   136c0:	sub	sp, sp, #48	; 0x30
   136c4:	mov	ip, r2
   136c8:	movw	r2, #24912	; 0x6150
   136cc:	mov	lr, #32
   136d0:	cmp	r0, #0
   136d4:	mov	r4, sp
   136d8:	movt	r2, #2
   136dc:	cmpne	r1, #0
   136e0:	add	r3, r2, #16
   136e4:	vld1.64	{d16-d17}, [r2], lr
   136e8:	vld1.64	{d18-d19}, [r3]
   136ec:	add	r3, r4, #16
   136f0:	vld1.64	{d20-d21}, [r2]
   136f4:	vst1.64	{d16-d17}, [r4], lr
   136f8:	mov	r2, #10
   136fc:	vst1.64	{d18-d19}, [r3]
   13700:	vst1.64	{d20-d21}, [r4]
   13704:	str	r2, [sp]
   13708:	bne	13710 <__assert_fail@plt+0x284c>
   1370c:	bl	10eb8 <abort@plt>
   13710:	str	r1, [sp, #44]	; 0x2c
   13714:	str	r0, [sp, #40]	; 0x28
   13718:	mov	r3, sp
   1371c:	mov	r0, #0
   13720:	mov	r1, ip
   13724:	mvn	r2, #0
   13728:	bl	13050 <__assert_fail@plt+0x218c>
   1372c:	sub	sp, fp, #8
   13730:	pop	{r4, sl, fp, pc}
   13734:	push	{r4, r5, fp, lr}
   13738:	add	fp, sp, #8
   1373c:	sub	sp, sp, #48	; 0x30
   13740:	mov	lr, r2
   13744:	movw	r2, #24912	; 0x6150
   13748:	mov	ip, r3
   1374c:	mov	r3, #32
   13750:	cmp	r0, #0
   13754:	mov	r5, sp
   13758:	movt	r2, #2
   1375c:	cmpne	r1, #0
   13760:	add	r4, r2, #16
   13764:	vld1.64	{d16-d17}, [r2], r3
   13768:	vld1.64	{d18-d19}, [r4]
   1376c:	add	r4, r5, #16
   13770:	vld1.64	{d20-d21}, [r2]
   13774:	vst1.64	{d16-d17}, [r5], r3
   13778:	mov	r2, #10
   1377c:	vst1.64	{d18-d19}, [r4]
   13780:	vst1.64	{d20-d21}, [r5]
   13784:	str	r2, [sp]
   13788:	bne	13790 <__assert_fail@plt+0x28cc>
   1378c:	bl	10eb8 <abort@plt>
   13790:	str	r1, [sp, #44]	; 0x2c
   13794:	str	r0, [sp, #40]	; 0x28
   13798:	mov	r3, sp
   1379c:	mov	r0, #0
   137a0:	mov	r1, lr
   137a4:	mov	r2, ip
   137a8:	bl	13050 <__assert_fail@plt+0x218c>
   137ac:	sub	sp, fp, #8
   137b0:	pop	{r4, r5, fp, pc}
   137b4:	movw	r3, #24792	; 0x60d8
   137b8:	movt	r3, #2
   137bc:	b	13050 <__assert_fail@plt+0x218c>
   137c0:	movw	r3, #24792	; 0x60d8
   137c4:	mov	r2, r1
   137c8:	mov	r1, r0
   137cc:	mov	r0, #0
   137d0:	movt	r3, #2
   137d4:	b	13050 <__assert_fail@plt+0x218c>
   137d8:	movw	r3, #24792	; 0x60d8
   137dc:	mvn	r2, #0
   137e0:	movt	r3, #2
   137e4:	b	13050 <__assert_fail@plt+0x218c>
   137e8:	movw	r3, #24792	; 0x60d8
   137ec:	mov	r1, r0
   137f0:	mov	r0, #0
   137f4:	mvn	r2, #0
   137f8:	movt	r3, #2
   137fc:	b	13050 <__assert_fail@plt+0x218c>
   13800:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13804:	add	fp, sp, #24
   13808:	sub	sp, sp, #32
   1380c:	ldr	r7, [fp, #12]
   13810:	ldr	r6, [fp, #8]
   13814:	mov	r4, r2
   13818:	mov	r5, r0
   1381c:	cmp	r1, #0
   13820:	beq	13840 <__assert_fail@plt+0x297c>
   13824:	mov	r2, r1
   13828:	movw	r1, #20016	; 0x4e30
   1382c:	str	r3, [sp]
   13830:	mov	r0, r5
   13834:	mov	r3, r4
   13838:	movt	r1, #1
   1383c:	b	13850 <__assert_fail@plt+0x298c>
   13840:	movw	r1, #20028	; 0x4e3c
   13844:	mov	r0, r5
   13848:	mov	r2, r4
   1384c:	movt	r1, #1
   13850:	bl	10e04 <fprintf@plt>
   13854:	movw	r1, #20035	; 0x4e43
   13858:	mov	r0, #0
   1385c:	mov	r2, #5
   13860:	movt	r1, #1
   13864:	bl	10d38 <dcgettext@plt>
   13868:	movw	r1, #20731	; 0x50fb
   1386c:	mov	r2, r0
   13870:	mov	r0, r5
   13874:	movw	r3, #2022	; 0x7e6
   13878:	movt	r1, #1
   1387c:	bl	10e04 <fprintf@plt>
   13880:	mov	r0, #10
   13884:	mov	r1, r5
   13888:	bl	10e7c <fputc@plt>
   1388c:	movw	r1, #20039	; 0x4e47
   13890:	mov	r0, #0
   13894:	mov	r2, #5
   13898:	movt	r1, #1
   1389c:	bl	10d38 <dcgettext@plt>
   138a0:	movw	r2, #20210	; 0x4ef2
   138a4:	mov	r1, r0
   138a8:	mov	r0, r5
   138ac:	movt	r2, #1
   138b0:	bl	10e04 <fprintf@plt>
   138b4:	mov	r0, #10
   138b8:	mov	r1, r5
   138bc:	bl	10e7c <fputc@plt>
   138c0:	cmp	r7, #9
   138c4:	bhi	13900 <__assert_fail@plt+0x2a3c>
   138c8:	add	r0, pc, #0
   138cc:	ldr	pc, [r0, r7, lsl #2]
   138d0:	strdeq	r3, [r1], -r8
   138d4:	andeq	r3, r1, ip, lsl #18
   138d8:	andeq	r3, r1, r8, lsr r9
   138dc:	andeq	r3, r1, r4, ror #18
   138e0:	muleq	r1, r8, r9
   138e4:	ldrdeq	r3, [r1], -r0
   138e8:	andeq	r3, r1, r0, lsl sl
   138ec:	andeq	r3, r1, r8, asr sl
   138f0:	strdeq	r3, [r1], -r4
   138f4:	muleq	r1, ip, sl
   138f8:	sub	sp, fp, #24
   138fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13900:	movw	r1, #20563	; 0x5053
   13904:	movt	r1, #1
   13908:	b	13aa4 <__assert_fail@plt+0x2be0>
   1390c:	movw	r1, #20244	; 0x4f14
   13910:	mov	r0, #0
   13914:	mov	r2, #5
   13918:	movt	r1, #1
   1391c:	bl	10d38 <dcgettext@plt>
   13920:	ldr	r2, [r6]
   13924:	mov	r1, r0
   13928:	mov	r0, r5
   1392c:	sub	sp, fp, #24
   13930:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13934:	b	10e04 <fprintf@plt>
   13938:	movw	r1, #20260	; 0x4f24
   1393c:	mov	r0, #0
   13940:	mov	r2, #5
   13944:	movt	r1, #1
   13948:	bl	10d38 <dcgettext@plt>
   1394c:	ldm	r6, {r2, r3}
   13950:	mov	r1, r0
   13954:	mov	r0, r5
   13958:	sub	sp, fp, #24
   1395c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13960:	b	10e04 <fprintf@plt>
   13964:	movw	r1, #20283	; 0x4f3b
   13968:	mov	r0, #0
   1396c:	mov	r2, #5
   13970:	movt	r1, #1
   13974:	bl	10d38 <dcgettext@plt>
   13978:	mov	r1, r0
   1397c:	ldm	r6, {r2, r3}
   13980:	ldr	r0, [r6, #8]
   13984:	str	r0, [sp]
   13988:	mov	r0, r5
   1398c:	bl	10e04 <fprintf@plt>
   13990:	sub	sp, fp, #24
   13994:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13998:	movw	r1, #20311	; 0x4f57
   1399c:	mov	r0, #0
   139a0:	mov	r2, #5
   139a4:	movt	r1, #1
   139a8:	bl	10d38 <dcgettext@plt>
   139ac:	ldm	r6, {r2, r3}
   139b0:	mov	r1, r0
   139b4:	ldr	r0, [r6, #8]
   139b8:	ldr	r7, [r6, #12]
   139bc:	stm	sp, {r0, r7}
   139c0:	mov	r0, r5
   139c4:	bl	10e04 <fprintf@plt>
   139c8:	sub	sp, fp, #24
   139cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   139d0:	movw	r1, #20343	; 0x4f77
   139d4:	mov	r0, #0
   139d8:	mov	r2, #5
   139dc:	movt	r1, #1
   139e0:	bl	10d38 <dcgettext@plt>
   139e4:	ldm	r6, {r2, r3}
   139e8:	mov	r1, r0
   139ec:	ldr	r0, [r6, #8]
   139f0:	ldr	r7, [r6, #12]
   139f4:	ldr	r6, [r6, #16]
   139f8:	stm	sp, {r0, r7}
   139fc:	str	r6, [sp, #8]
   13a00:	mov	r0, r5
   13a04:	bl	10e04 <fprintf@plt>
   13a08:	sub	sp, fp, #24
   13a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a10:	movw	r1, #20379	; 0x4f9b
   13a14:	mov	r0, #0
   13a18:	mov	r2, #5
   13a1c:	movt	r1, #1
   13a20:	bl	10d38 <dcgettext@plt>
   13a24:	ldm	r6, {r2, r3}
   13a28:	mov	r1, r0
   13a2c:	ldr	r0, [r6, #8]
   13a30:	ldr	r7, [r6, #12]
   13a34:	ldr	r4, [r6, #16]
   13a38:	ldr	r6, [r6, #20]
   13a3c:	stm	sp, {r0, r7}
   13a40:	str	r4, [sp, #8]
   13a44:	str	r6, [sp, #12]
   13a48:	mov	r0, r5
   13a4c:	bl	10e04 <fprintf@plt>
   13a50:	sub	sp, fp, #24
   13a54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a58:	movw	r1, #20419	; 0x4fc3
   13a5c:	mov	r0, #0
   13a60:	mov	r2, #5
   13a64:	movt	r1, #1
   13a68:	bl	10d38 <dcgettext@plt>
   13a6c:	ldm	r6, {r2, r3}
   13a70:	mov	ip, r0
   13a74:	ldr	r0, [r6, #8]
   13a78:	ldr	r7, [r6, #12]
   13a7c:	ldr	r4, [r6, #16]
   13a80:	ldr	r1, [r6, #20]
   13a84:	ldr	r6, [r6, #24]
   13a88:	stm	sp, {r0, r7}
   13a8c:	str	r4, [sp, #8]
   13a90:	str	r1, [sp, #12]
   13a94:	str	r6, [sp, #16]
   13a98:	b	13b3c <__assert_fail@plt+0x2c78>
   13a9c:	movw	r1, #20511	; 0x501f
   13aa0:	movt	r1, #1
   13aa4:	mov	r0, #0
   13aa8:	mov	r2, #5
   13aac:	bl	10d38 <dcgettext@plt>
   13ab0:	mov	ip, r0
   13ab4:	ldr	r2, [r6]
   13ab8:	ldr	r3, [r6, #4]
   13abc:	ldr	r0, [r6, #8]
   13ac0:	ldr	r7, [r6, #12]
   13ac4:	ldr	r4, [r6, #16]
   13ac8:	ldr	r1, [r6, #20]
   13acc:	ldr	lr, [r6, #24]
   13ad0:	ldr	r8, [r6, #28]
   13ad4:	ldr	r6, [r6, #32]
   13ad8:	stm	sp, {r0, r7}
   13adc:	str	r4, [sp, #8]
   13ae0:	str	r1, [sp, #12]
   13ae4:	str	lr, [sp, #16]
   13ae8:	str	r8, [sp, #20]
   13aec:	str	r6, [sp, #24]
   13af0:	b	13b3c <__assert_fail@plt+0x2c78>
   13af4:	movw	r1, #20463	; 0x4fef
   13af8:	mov	r0, #0
   13afc:	mov	r2, #5
   13b00:	movt	r1, #1
   13b04:	bl	10d38 <dcgettext@plt>
   13b08:	ldm	r6, {r2, r3}
   13b0c:	mov	ip, r0
   13b10:	ldr	r0, [r6, #8]
   13b14:	ldr	r7, [r6, #12]
   13b18:	ldr	r4, [r6, #16]
   13b1c:	ldr	r1, [r6, #20]
   13b20:	ldr	lr, [r6, #24]
   13b24:	ldr	r6, [r6, #28]
   13b28:	stm	sp, {r0, r7}
   13b2c:	str	r4, [sp, #8]
   13b30:	str	r1, [sp, #12]
   13b34:	str	lr, [sp, #16]
   13b38:	str	r6, [sp, #20]
   13b3c:	mov	r0, r5
   13b40:	mov	r1, ip
   13b44:	bl	10e04 <fprintf@plt>
   13b48:	sub	sp, fp, #24
   13b4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b50:	push	{r4, sl, fp, lr}
   13b54:	add	fp, sp, #8
   13b58:	sub	sp, sp, #8
   13b5c:	ldr	ip, [fp, #8]
   13b60:	mov	lr, #0
   13b64:	ldr	r4, [ip, lr, lsl #2]
   13b68:	add	lr, lr, #1
   13b6c:	cmp	r4, #0
   13b70:	bne	13b64 <__assert_fail@plt+0x2ca0>
   13b74:	sub	r4, lr, #1
   13b78:	str	ip, [sp]
   13b7c:	str	r4, [sp, #4]
   13b80:	bl	13800 <__assert_fail@plt+0x293c>
   13b84:	sub	sp, fp, #8
   13b88:	pop	{r4, sl, fp, pc}
   13b8c:	push	{fp, lr}
   13b90:	mov	fp, sp
   13b94:	sub	sp, sp, #48	; 0x30
   13b98:	ldr	ip, [fp, #8]
   13b9c:	ldr	lr, [ip]
   13ba0:	cmp	lr, #0
   13ba4:	str	lr, [sp, #8]
   13ba8:	beq	13c44 <__assert_fail@plt+0x2d80>
   13bac:	ldr	lr, [ip, #4]
   13bb0:	cmp	lr, #0
   13bb4:	str	lr, [sp, #12]
   13bb8:	beq	13c4c <__assert_fail@plt+0x2d88>
   13bbc:	ldr	lr, [ip, #8]
   13bc0:	cmp	lr, #0
   13bc4:	str	lr, [sp, #16]
   13bc8:	beq	13c54 <__assert_fail@plt+0x2d90>
   13bcc:	ldr	lr, [ip, #12]
   13bd0:	cmp	lr, #0
   13bd4:	str	lr, [sp, #20]
   13bd8:	beq	13c5c <__assert_fail@plt+0x2d98>
   13bdc:	ldr	lr, [ip, #16]
   13be0:	cmp	lr, #0
   13be4:	str	lr, [sp, #24]
   13be8:	beq	13c64 <__assert_fail@plt+0x2da0>
   13bec:	ldr	lr, [ip, #20]
   13bf0:	cmp	lr, #0
   13bf4:	str	lr, [sp, #28]
   13bf8:	beq	13c6c <__assert_fail@plt+0x2da8>
   13bfc:	ldr	lr, [ip, #24]
   13c00:	cmp	lr, #0
   13c04:	str	lr, [sp, #32]
   13c08:	beq	13c74 <__assert_fail@plt+0x2db0>
   13c0c:	ldr	lr, [ip, #28]
   13c10:	cmp	lr, #0
   13c14:	str	lr, [sp, #36]	; 0x24
   13c18:	beq	13c7c <__assert_fail@plt+0x2db8>
   13c1c:	ldr	lr, [ip, #32]
   13c20:	cmp	lr, #0
   13c24:	str	lr, [sp, #40]	; 0x28
   13c28:	beq	13c84 <__assert_fail@plt+0x2dc0>
   13c2c:	ldr	lr, [ip, #36]	; 0x24
   13c30:	mov	ip, #10
   13c34:	cmp	lr, #0
   13c38:	str	lr, [sp, #44]	; 0x2c
   13c3c:	movweq	ip, #9
   13c40:	b	13c88 <__assert_fail@plt+0x2dc4>
   13c44:	mov	ip, #0
   13c48:	b	13c88 <__assert_fail@plt+0x2dc4>
   13c4c:	mov	ip, #1
   13c50:	b	13c88 <__assert_fail@plt+0x2dc4>
   13c54:	mov	ip, #2
   13c58:	b	13c88 <__assert_fail@plt+0x2dc4>
   13c5c:	mov	ip, #3
   13c60:	b	13c88 <__assert_fail@plt+0x2dc4>
   13c64:	mov	ip, #4
   13c68:	b	13c88 <__assert_fail@plt+0x2dc4>
   13c6c:	mov	ip, #5
   13c70:	b	13c88 <__assert_fail@plt+0x2dc4>
   13c74:	mov	ip, #6
   13c78:	b	13c88 <__assert_fail@plt+0x2dc4>
   13c7c:	mov	ip, #7
   13c80:	b	13c88 <__assert_fail@plt+0x2dc4>
   13c84:	mov	ip, #8
   13c88:	add	lr, sp, #8
   13c8c:	str	ip, [sp, #4]
   13c90:	str	lr, [sp]
   13c94:	bl	13800 <__assert_fail@plt+0x293c>
   13c98:	mov	sp, fp
   13c9c:	pop	{fp, pc}
   13ca0:	push	{fp, lr}
   13ca4:	mov	fp, sp
   13ca8:	sub	sp, sp, #56	; 0x38
   13cac:	add	ip, fp, #8
   13cb0:	str	ip, [sp, #12]
   13cb4:	ldr	lr, [fp, #8]
   13cb8:	cmp	lr, #0
   13cbc:	str	lr, [sp, #16]
   13cc0:	beq	13d5c <__assert_fail@plt+0x2e98>
   13cc4:	ldr	lr, [ip, #4]
   13cc8:	cmp	lr, #0
   13ccc:	str	lr, [sp, #20]
   13cd0:	beq	13d64 <__assert_fail@plt+0x2ea0>
   13cd4:	ldr	lr, [ip, #8]
   13cd8:	cmp	lr, #0
   13cdc:	str	lr, [sp, #24]
   13ce0:	beq	13d6c <__assert_fail@plt+0x2ea8>
   13ce4:	ldr	lr, [ip, #12]
   13ce8:	cmp	lr, #0
   13cec:	str	lr, [sp, #28]
   13cf0:	beq	13d74 <__assert_fail@plt+0x2eb0>
   13cf4:	ldr	lr, [ip, #16]
   13cf8:	cmp	lr, #0
   13cfc:	str	lr, [sp, #32]
   13d00:	beq	13d7c <__assert_fail@plt+0x2eb8>
   13d04:	ldr	lr, [ip, #20]
   13d08:	cmp	lr, #0
   13d0c:	str	lr, [sp, #36]	; 0x24
   13d10:	beq	13d84 <__assert_fail@plt+0x2ec0>
   13d14:	ldr	lr, [ip, #24]
   13d18:	cmp	lr, #0
   13d1c:	str	lr, [sp, #40]	; 0x28
   13d20:	beq	13d8c <__assert_fail@plt+0x2ec8>
   13d24:	ldr	lr, [ip, #28]
   13d28:	cmp	lr, #0
   13d2c:	str	lr, [sp, #44]	; 0x2c
   13d30:	beq	13d94 <__assert_fail@plt+0x2ed0>
   13d34:	ldr	lr, [ip, #32]
   13d38:	cmp	lr, #0
   13d3c:	str	lr, [sp, #48]	; 0x30
   13d40:	beq	13d9c <__assert_fail@plt+0x2ed8>
   13d44:	ldr	lr, [ip, #36]	; 0x24
   13d48:	mov	ip, #10
   13d4c:	cmp	lr, #0
   13d50:	str	lr, [sp, #52]	; 0x34
   13d54:	movweq	ip, #9
   13d58:	b	13da0 <__assert_fail@plt+0x2edc>
   13d5c:	mov	ip, #0
   13d60:	b	13da0 <__assert_fail@plt+0x2edc>
   13d64:	mov	ip, #1
   13d68:	b	13da0 <__assert_fail@plt+0x2edc>
   13d6c:	mov	ip, #2
   13d70:	b	13da0 <__assert_fail@plt+0x2edc>
   13d74:	mov	ip, #3
   13d78:	b	13da0 <__assert_fail@plt+0x2edc>
   13d7c:	mov	ip, #4
   13d80:	b	13da0 <__assert_fail@plt+0x2edc>
   13d84:	mov	ip, #5
   13d88:	b	13da0 <__assert_fail@plt+0x2edc>
   13d8c:	mov	ip, #6
   13d90:	b	13da0 <__assert_fail@plt+0x2edc>
   13d94:	mov	ip, #7
   13d98:	b	13da0 <__assert_fail@plt+0x2edc>
   13d9c:	mov	ip, #8
   13da0:	add	lr, sp, #16
   13da4:	str	ip, [sp, #4]
   13da8:	str	lr, [sp]
   13dac:	bl	13800 <__assert_fail@plt+0x293c>
   13db0:	mov	sp, fp
   13db4:	pop	{fp, pc}
   13db8:	push	{fp, lr}
   13dbc:	mov	fp, sp
   13dc0:	movw	r0, #24884	; 0x6134
   13dc4:	movt	r0, #2
   13dc8:	ldr	r1, [r0]
   13dcc:	mov	r0, #10
   13dd0:	bl	10e7c <fputc@plt>
   13dd4:	movw	r1, #20623	; 0x508f
   13dd8:	mov	r0, #0
   13ddc:	mov	r2, #5
   13de0:	movt	r1, #1
   13de4:	bl	10d38 <dcgettext@plt>
   13de8:	movw	r1, #19737	; 0x4d19
   13dec:	movt	r1, #1
   13df0:	bl	10cd8 <printf@plt>
   13df4:	movw	r1, #20643	; 0x50a3
   13df8:	mov	r0, #0
   13dfc:	mov	r2, #5
   13e00:	movt	r1, #1
   13e04:	bl	10d38 <dcgettext@plt>
   13e08:	movw	r1, #19388	; 0x4bbc
   13e0c:	movw	r2, #19651	; 0x4cc3
   13e10:	movt	r1, #1
   13e14:	movt	r2, #1
   13e18:	bl	10cd8 <printf@plt>
   13e1c:	movw	r1, #20663	; 0x50b7
   13e20:	mov	r0, #0
   13e24:	mov	r2, #5
   13e28:	movt	r1, #1
   13e2c:	bl	10d38 <dcgettext@plt>
   13e30:	movw	r1, #20702	; 0x50de
   13e34:	movt	r1, #1
   13e38:	pop	{fp, lr}
   13e3c:	b	10cd8 <printf@plt>
   13e40:	push	{r4, r5, r6, sl, fp, lr}
   13e44:	add	fp, sp, #16
   13e48:	mov	r4, r2
   13e4c:	mov	r5, r1
   13e50:	mov	r6, r0
   13e54:	bl	146c8 <__assert_fail@plt+0x3804>
   13e58:	cmp	r0, #0
   13e5c:	popne	{r4, r5, r6, sl, fp, pc}
   13e60:	cmp	r6, #0
   13e64:	beq	13e78 <__assert_fail@plt+0x2fb4>
   13e68:	cmp	r5, #0
   13e6c:	cmpne	r4, #0
   13e70:	bne	13e78 <__assert_fail@plt+0x2fb4>
   13e74:	pop	{r4, r5, r6, sl, fp, pc}
   13e78:	bl	14418 <__assert_fail@plt+0x3554>
   13e7c:	push	{r4, r5, r6, sl, fp, lr}
   13e80:	add	fp, sp, #16
   13e84:	mov	r4, r2
   13e88:	mov	r5, r1
   13e8c:	mov	r6, r0
   13e90:	bl	146c8 <__assert_fail@plt+0x3804>
   13e94:	cmp	r0, #0
   13e98:	popne	{r4, r5, r6, sl, fp, pc}
   13e9c:	cmp	r6, #0
   13ea0:	beq	13eb4 <__assert_fail@plt+0x2ff0>
   13ea4:	cmp	r5, #0
   13ea8:	cmpne	r4, #0
   13eac:	bne	13eb4 <__assert_fail@plt+0x2ff0>
   13eb0:	pop	{r4, r5, r6, sl, fp, pc}
   13eb4:	bl	14418 <__assert_fail@plt+0x3554>
   13eb8:	push	{fp, lr}
   13ebc:	mov	fp, sp
   13ec0:	bl	145e4 <__assert_fail@plt+0x3720>
   13ec4:	cmp	r0, #0
   13ec8:	popne	{fp, pc}
   13ecc:	bl	14418 <__assert_fail@plt+0x3554>
   13ed0:	push	{fp, lr}
   13ed4:	mov	fp, sp
   13ed8:	bl	145e4 <__assert_fail@plt+0x3720>
   13edc:	cmp	r0, #0
   13ee0:	popne	{fp, pc}
   13ee4:	bl	14418 <__assert_fail@plt+0x3554>
   13ee8:	push	{fp, lr}
   13eec:	mov	fp, sp
   13ef0:	bl	145e4 <__assert_fail@plt+0x3720>
   13ef4:	cmp	r0, #0
   13ef8:	popne	{fp, pc}
   13efc:	bl	14418 <__assert_fail@plt+0x3554>
   13f00:	push	{r4, r5, fp, lr}
   13f04:	add	fp, sp, #8
   13f08:	mov	r4, r1
   13f0c:	mov	r5, r0
   13f10:	bl	14674 <__assert_fail@plt+0x37b0>
   13f14:	cmp	r0, #0
   13f18:	popne	{r4, r5, fp, pc}
   13f1c:	cmp	r5, #0
   13f20:	beq	13f30 <__assert_fail@plt+0x306c>
   13f24:	cmp	r4, #0
   13f28:	bne	13f30 <__assert_fail@plt+0x306c>
   13f2c:	pop	{r4, r5, fp, pc}
   13f30:	bl	14418 <__assert_fail@plt+0x3554>
   13f34:	push	{fp, lr}
   13f38:	mov	fp, sp
   13f3c:	cmp	r1, #0
   13f40:	orreq	r1, r1, #1
   13f44:	bl	14674 <__assert_fail@plt+0x37b0>
   13f48:	cmp	r0, #0
   13f4c:	popne	{fp, pc}
   13f50:	bl	14418 <__assert_fail@plt+0x3554>
   13f54:	push	{fp, lr}
   13f58:	mov	fp, sp
   13f5c:	clz	r3, r2
   13f60:	lsr	ip, r3, #5
   13f64:	clz	r3, r1
   13f68:	lsr	r3, r3, #5
   13f6c:	orrs	r3, r3, ip
   13f70:	movwne	r1, #1
   13f74:	movwne	r2, #1
   13f78:	bl	146c8 <__assert_fail@plt+0x3804>
   13f7c:	cmp	r0, #0
   13f80:	popne	{fp, pc}
   13f84:	bl	14418 <__assert_fail@plt+0x3554>
   13f88:	push	{fp, lr}
   13f8c:	mov	fp, sp
   13f90:	mov	r2, r1
   13f94:	mov	r1, r0
   13f98:	mov	r0, #0
   13f9c:	bl	146c8 <__assert_fail@plt+0x3804>
   13fa0:	cmp	r0, #0
   13fa4:	popne	{fp, pc}
   13fa8:	bl	14418 <__assert_fail@plt+0x3554>
   13fac:	push	{fp, lr}
   13fb0:	mov	fp, sp
   13fb4:	mov	r2, r1
   13fb8:	mov	r1, r0
   13fbc:	clz	r0, r2
   13fc0:	clz	r3, r1
   13fc4:	lsr	r0, r0, #5
   13fc8:	lsr	r3, r3, #5
   13fcc:	orrs	r0, r3, r0
   13fd0:	movwne	r1, #1
   13fd4:	movwne	r2, #1
   13fd8:	mov	r0, #0
   13fdc:	bl	146c8 <__assert_fail@plt+0x3804>
   13fe0:	cmp	r0, #0
   13fe4:	popne	{fp, pc}
   13fe8:	bl	14418 <__assert_fail@plt+0x3554>
   13fec:	push	{r4, r5, r6, sl, fp, lr}
   13ff0:	add	fp, sp, #16
   13ff4:	ldr	r5, [r1]
   13ff8:	mov	r4, r1
   13ffc:	mov	r6, r0
   14000:	cmp	r0, #0
   14004:	beq	1401c <__assert_fail@plt+0x3158>
   14008:	mov	r0, #1
   1400c:	add	r0, r0, r5, lsr #1
   14010:	adds	r5, r5, r0
   14014:	bcc	14024 <__assert_fail@plt+0x3160>
   14018:	b	14060 <__assert_fail@plt+0x319c>
   1401c:	cmp	r5, #0
   14020:	movweq	r5, #64	; 0x40
   14024:	mov	r0, r6
   14028:	mov	r1, r5
   1402c:	mov	r2, #1
   14030:	bl	146c8 <__assert_fail@plt+0x3804>
   14034:	cmp	r5, #0
   14038:	mov	r1, r5
   1403c:	movwne	r1, #1
   14040:	cmp	r0, #0
   14044:	bne	14058 <__assert_fail@plt+0x3194>
   14048:	clz	r2, r6
   1404c:	lsr	r2, r2, #5
   14050:	orrs	r1, r2, r1
   14054:	bne	14060 <__assert_fail@plt+0x319c>
   14058:	str	r5, [r4]
   1405c:	pop	{r4, r5, r6, sl, fp, pc}
   14060:	bl	14418 <__assert_fail@plt+0x3554>
   14064:	push	{r4, r5, r6, r7, fp, lr}
   14068:	add	fp, sp, #16
   1406c:	ldr	r5, [r1]
   14070:	mov	r6, r2
   14074:	mov	r4, r1
   14078:	mov	r7, r0
   1407c:	cmp	r0, #0
   14080:	beq	14098 <__assert_fail@plt+0x31d4>
   14084:	mov	r0, #1
   14088:	add	r0, r0, r5, lsr #1
   1408c:	adds	r5, r5, r0
   14090:	bcc	140b0 <__assert_fail@plt+0x31ec>
   14094:	b	140e4 <__assert_fail@plt+0x3220>
   14098:	cmp	r5, #0
   1409c:	bne	140b0 <__assert_fail@plt+0x31ec>
   140a0:	mov	r0, #64	; 0x40
   140a4:	cmp	r6, #64	; 0x40
   140a8:	udiv	r5, r0, r6
   140ac:	addhi	r5, r5, #1
   140b0:	mov	r0, r7
   140b4:	mov	r1, r5
   140b8:	mov	r2, r6
   140bc:	bl	146c8 <__assert_fail@plt+0x3804>
   140c0:	cmp	r0, #0
   140c4:	bne	140dc <__assert_fail@plt+0x3218>
   140c8:	cmp	r7, #0
   140cc:	beq	140e4 <__assert_fail@plt+0x3220>
   140d0:	cmp	r6, #0
   140d4:	cmpne	r5, #0
   140d8:	bne	140e4 <__assert_fail@plt+0x3220>
   140dc:	str	r5, [r4]
   140e0:	pop	{r4, r5, r6, r7, fp, pc}
   140e4:	bl	14418 <__assert_fail@plt+0x3554>
   140e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140ec:	add	fp, sp, #24
   140f0:	mov	r8, r1
   140f4:	ldr	r1, [r1]
   140f8:	mov	r5, r0
   140fc:	add	r0, r1, r1, asr #1
   14100:	cmp	r0, r1
   14104:	mvnvs	r0, #-2147483648	; 0x80000000
   14108:	cmp	r0, r3
   1410c:	mov	r7, r0
   14110:	movgt	r7, r3
   14114:	cmn	r3, #1
   14118:	movle	r7, r0
   1411c:	ldr	r0, [fp, #8]
   14120:	cmn	r0, #1
   14124:	ble	1414c <__assert_fail@plt+0x3288>
   14128:	cmp	r0, #0
   1412c:	beq	141a0 <__assert_fail@plt+0x32dc>
   14130:	cmn	r7, #1
   14134:	ble	14174 <__assert_fail@plt+0x32b0>
   14138:	mvn	r4, #-2147483648	; 0x80000000
   1413c:	udiv	r6, r4, r0
   14140:	cmp	r6, r7
   14144:	bge	141a0 <__assert_fail@plt+0x32dc>
   14148:	b	141b0 <__assert_fail@plt+0x32ec>
   1414c:	cmn	r7, #1
   14150:	ble	14190 <__assert_fail@plt+0x32cc>
   14154:	cmn	r0, #1
   14158:	beq	141a0 <__assert_fail@plt+0x32dc>
   1415c:	mov	r6, #-2147483648	; 0x80000000
   14160:	mvn	r4, #-2147483648	; 0x80000000
   14164:	sdiv	r6, r6, r0
   14168:	cmp	r6, r7
   1416c:	bge	141a0 <__assert_fail@plt+0x32dc>
   14170:	b	141b0 <__assert_fail@plt+0x32ec>
   14174:	beq	141a0 <__assert_fail@plt+0x32dc>
   14178:	mov	r6, #-2147483648	; 0x80000000
   1417c:	mvn	r4, #-2147483648	; 0x80000000
   14180:	sdiv	r6, r6, r7
   14184:	cmp	r6, r0
   14188:	bge	141a0 <__assert_fail@plt+0x32dc>
   1418c:	b	141b0 <__assert_fail@plt+0x32ec>
   14190:	mvn	r4, #-2147483648	; 0x80000000
   14194:	sdiv	r6, r4, r0
   14198:	cmp	r7, r6
   1419c:	blt	141b0 <__assert_fail@plt+0x32ec>
   141a0:	mul	r6, r7, r0
   141a4:	mov	r4, #64	; 0x40
   141a8:	cmp	r6, #63	; 0x3f
   141ac:	bgt	141b8 <__assert_fail@plt+0x32f4>
   141b0:	sdiv	r7, r4, r0
   141b4:	mul	r6, r7, r0
   141b8:	cmp	r5, #0
   141bc:	moveq	r4, #0
   141c0:	streq	r4, [r8]
   141c4:	sub	r4, r7, r1
   141c8:	cmp	r4, r2
   141cc:	bge	14278 <__assert_fail@plt+0x33b4>
   141d0:	add	r7, r1, r2
   141d4:	mov	r6, #0
   141d8:	mov	r2, #0
   141dc:	cmp	r7, r3
   141e0:	movwgt	r6, #1
   141e4:	cmn	r3, #1
   141e8:	movwgt	r2, #1
   141ec:	cmp	r7, r1
   141f0:	bvs	142ac <__assert_fail@plt+0x33e8>
   141f4:	ands	r1, r2, r6
   141f8:	bne	142ac <__assert_fail@plt+0x33e8>
   141fc:	cmn	r0, #1
   14200:	ble	14228 <__assert_fail@plt+0x3364>
   14204:	cmp	r0, #0
   14208:	beq	14274 <__assert_fail@plt+0x33b0>
   1420c:	cmn	r7, #1
   14210:	ble	1424c <__assert_fail@plt+0x3388>
   14214:	mvn	r1, #-2147483648	; 0x80000000
   14218:	udiv	r1, r1, r0
   1421c:	cmp	r1, r7
   14220:	bge	14274 <__assert_fail@plt+0x33b0>
   14224:	b	142ac <__assert_fail@plt+0x33e8>
   14228:	cmn	r7, #1
   1422c:	ble	14264 <__assert_fail@plt+0x33a0>
   14230:	cmn	r0, #1
   14234:	beq	14274 <__assert_fail@plt+0x33b0>
   14238:	mov	r1, #-2147483648	; 0x80000000
   1423c:	sdiv	r1, r1, r0
   14240:	cmp	r1, r7
   14244:	bge	14274 <__assert_fail@plt+0x33b0>
   14248:	b	142ac <__assert_fail@plt+0x33e8>
   1424c:	beq	14274 <__assert_fail@plt+0x33b0>
   14250:	mov	r1, #-2147483648	; 0x80000000
   14254:	sdiv	r1, r1, r7
   14258:	cmp	r1, r0
   1425c:	bge	14274 <__assert_fail@plt+0x33b0>
   14260:	b	142ac <__assert_fail@plt+0x33e8>
   14264:	mvn	r1, #-2147483648	; 0x80000000
   14268:	sdiv	r1, r1, r0
   1426c:	cmp	r7, r1
   14270:	blt	142ac <__assert_fail@plt+0x33e8>
   14274:	mul	r6, r7, r0
   14278:	mov	r0, r5
   1427c:	mov	r1, r6
   14280:	bl	14674 <__assert_fail@plt+0x37b0>
   14284:	cmp	r6, #0
   14288:	movwne	r6, #1
   1428c:	cmp	r0, #0
   14290:	bne	142a4 <__assert_fail@plt+0x33e0>
   14294:	clz	r1, r5
   14298:	lsr	r1, r1, #5
   1429c:	orrs	r1, r1, r6
   142a0:	bne	142ac <__assert_fail@plt+0x33e8>
   142a4:	str	r7, [r8]
   142a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142ac:	bl	14418 <__assert_fail@plt+0x3554>
   142b0:	push	{fp, lr}
   142b4:	mov	fp, sp
   142b8:	mov	r1, #1
   142bc:	bl	1445c <__assert_fail@plt+0x3598>
   142c0:	cmp	r0, #0
   142c4:	popne	{fp, pc}
   142c8:	bl	14418 <__assert_fail@plt+0x3554>
   142cc:	push	{fp, lr}
   142d0:	mov	fp, sp
   142d4:	bl	1445c <__assert_fail@plt+0x3598>
   142d8:	cmp	r0, #0
   142dc:	popne	{fp, pc}
   142e0:	bl	14418 <__assert_fail@plt+0x3554>
   142e4:	push	{fp, lr}
   142e8:	mov	fp, sp
   142ec:	mov	r1, #1
   142f0:	bl	1445c <__assert_fail@plt+0x3598>
   142f4:	cmp	r0, #0
   142f8:	popne	{fp, pc}
   142fc:	bl	14418 <__assert_fail@plt+0x3554>
   14300:	push	{fp, lr}
   14304:	mov	fp, sp
   14308:	bl	1445c <__assert_fail@plt+0x3598>
   1430c:	cmp	r0, #0
   14310:	popne	{fp, pc}
   14314:	bl	14418 <__assert_fail@plt+0x3554>
   14318:	push	{r4, r5, r6, sl, fp, lr}
   1431c:	add	fp, sp, #16
   14320:	mov	r5, r0
   14324:	mov	r0, r1
   14328:	mov	r4, r1
   1432c:	bl	145e4 <__assert_fail@plt+0x3720>
   14330:	cmp	r0, #0
   14334:	beq	14350 <__assert_fail@plt+0x348c>
   14338:	mov	r1, r5
   1433c:	mov	r2, r4
   14340:	mov	r6, r0
   14344:	bl	10d14 <memcpy@plt>
   14348:	mov	r0, r6
   1434c:	pop	{r4, r5, r6, sl, fp, pc}
   14350:	bl	14418 <__assert_fail@plt+0x3554>
   14354:	push	{r4, r5, r6, sl, fp, lr}
   14358:	add	fp, sp, #16
   1435c:	mov	r5, r0
   14360:	mov	r0, r1
   14364:	mov	r4, r1
   14368:	bl	145e4 <__assert_fail@plt+0x3720>
   1436c:	cmp	r0, #0
   14370:	beq	1438c <__assert_fail@plt+0x34c8>
   14374:	mov	r1, r5
   14378:	mov	r2, r4
   1437c:	mov	r6, r0
   14380:	bl	10d14 <memcpy@plt>
   14384:	mov	r0, r6
   14388:	pop	{r4, r5, r6, sl, fp, pc}
   1438c:	bl	14418 <__assert_fail@plt+0x3554>
   14390:	push	{r4, r5, r6, sl, fp, lr}
   14394:	add	fp, sp, #16
   14398:	mov	r5, r0
   1439c:	add	r0, r1, #1
   143a0:	mov	r4, r1
   143a4:	bl	145e4 <__assert_fail@plt+0x3720>
   143a8:	cmp	r0, #0
   143ac:	beq	143d4 <__assert_fail@plt+0x3510>
   143b0:	mov	r6, r0
   143b4:	mov	r0, #0
   143b8:	mov	r1, r5
   143bc:	mov	r2, r4
   143c0:	strb	r0, [r6, r4]
   143c4:	mov	r0, r6
   143c8:	bl	10d14 <memcpy@plt>
   143cc:	mov	r0, r6
   143d0:	pop	{r4, r5, r6, sl, fp, pc}
   143d4:	bl	14418 <__assert_fail@plt+0x3554>
   143d8:	push	{r4, r5, r6, sl, fp, lr}
   143dc:	add	fp, sp, #16
   143e0:	mov	r4, r0
   143e4:	bl	10df8 <strlen@plt>
   143e8:	add	r5, r0, #1
   143ec:	mov	r0, r5
   143f0:	bl	145e4 <__assert_fail@plt+0x3720>
   143f4:	cmp	r0, #0
   143f8:	beq	14414 <__assert_fail@plt+0x3550>
   143fc:	mov	r1, r4
   14400:	mov	r2, r5
   14404:	mov	r6, r0
   14408:	bl	10d14 <memcpy@plt>
   1440c:	mov	r0, r6
   14410:	pop	{r4, r5, r6, sl, fp, pc}
   14414:	bl	14418 <__assert_fail@plt+0x3554>
   14418:	push	{fp, lr}
   1441c:	mov	fp, sp
   14420:	movw	r0, #24788	; 0x60d4
   14424:	movw	r1, #20778	; 0x512a
   14428:	mov	r2, #5
   1442c:	movt	r0, #2
   14430:	movt	r1, #1
   14434:	ldr	r4, [r0]
   14438:	mov	r0, #0
   1443c:	bl	10d38 <dcgettext@plt>
   14440:	movw	r2, #19763	; 0x4d33
   14444:	mov	r3, r0
   14448:	mov	r0, r4
   1444c:	mov	r1, #0
   14450:	movt	r2, #1
   14454:	bl	10d98 <error@plt>
   14458:	bl	10eb8 <abort@plt>
   1445c:	clz	r2, r1
   14460:	clz	r3, r0
   14464:	lsr	r2, r2, #5
   14468:	lsr	r3, r3, #5
   1446c:	orrs	r2, r3, r2
   14470:	movwne	r1, #1
   14474:	movwne	r0, #1
   14478:	cmp	r1, #0
   1447c:	beq	144ac <__assert_fail@plt+0x35e8>
   14480:	mvn	r2, #-2147483648	; 0x80000000
   14484:	udiv	r2, r2, r1
   14488:	cmp	r2, r0
   1448c:	bcs	144ac <__assert_fail@plt+0x35e8>
   14490:	push	{fp, lr}
   14494:	mov	fp, sp
   14498:	bl	10e10 <__errno_location@plt>
   1449c:	mov	r1, #12
   144a0:	str	r1, [r0]
   144a4:	mov	r0, #0
   144a8:	pop	{fp, pc}
   144ac:	b	10cb4 <calloc@plt>
   144b0:	push	{r4, sl, fp, lr}
   144b4:	add	fp, sp, #8
   144b8:	sub	sp, sp, #8
   144bc:	mov	r4, r0
   144c0:	cmp	r0, #0
   144c4:	beq	144e0 <__assert_fail@plt+0x361c>
   144c8:	mov	r0, r4
   144cc:	bl	10dbc <__freading@plt>
   144d0:	cmp	r0, #0
   144d4:	ldrbne	r0, [r4, #1]
   144d8:	tstne	r0, #1
   144dc:	bne	144f0 <__assert_fail@plt+0x362c>
   144e0:	mov	r0, r4
   144e4:	sub	sp, fp, #8
   144e8:	pop	{r4, sl, fp, lr}
   144ec:	b	10ce4 <fflush@plt>
   144f0:	mov	r0, #1
   144f4:	mov	r2, #0
   144f8:	mov	r3, #0
   144fc:	str	r0, [sp]
   14500:	mov	r0, r4
   14504:	bl	14540 <__assert_fail@plt+0x367c>
   14508:	mov	r0, r4
   1450c:	sub	sp, fp, #8
   14510:	pop	{r4, sl, fp, lr}
   14514:	b	10ce4 <fflush@plt>
   14518:	push	{r4, r5, r6, sl, fp, lr}
   1451c:	add	fp, sp, #16
   14520:	mov	r4, r0
   14524:	bl	10e10 <__errno_location@plt>
   14528:	ldr	r6, [r0]
   1452c:	mov	r5, r0
   14530:	mov	r0, r4
   14534:	bl	10cf0 <free@plt>
   14538:	str	r6, [r5]
   1453c:	pop	{r4, r5, r6, sl, fp, pc}
   14540:	push	{r4, r5, r6, r7, fp, lr}
   14544:	add	fp, sp, #16
   14548:	sub	sp, sp, #8
   1454c:	mov	r4, r0
   14550:	ldr	r0, [r0, #4]
   14554:	mov	r5, r3
   14558:	mov	r6, r2
   1455c:	ldr	r1, [r4, #8]
   14560:	cmp	r1, r0
   14564:	bne	14580 <__assert_fail@plt+0x36bc>
   14568:	ldrd	r0, [r4, #16]
   1456c:	cmp	r1, r0
   14570:	bne	14580 <__assert_fail@plt+0x36bc>
   14574:	ldr	r0, [r4, #36]	; 0x24
   14578:	cmp	r0, #0
   1457c:	beq	14598 <__assert_fail@plt+0x36d4>
   14580:	mov	r0, r4
   14584:	mov	r2, r6
   14588:	mov	r3, r5
   1458c:	sub	sp, fp, #16
   14590:	pop	{r4, r5, r6, r7, fp, lr}
   14594:	b	10e4c <fseeko64@plt>
   14598:	ldr	r7, [fp, #8]
   1459c:	mov	r0, r4
   145a0:	bl	10e34 <fileno@plt>
   145a4:	mov	r2, r6
   145a8:	mov	r3, r5
   145ac:	str	r7, [sp]
   145b0:	bl	10d68 <lseek64@plt>
   145b4:	and	r2, r0, r1
   145b8:	cmn	r2, #1
   145bc:	mvneq	r0, #0
   145c0:	subeq	sp, fp, #16
   145c4:	popeq	{r4, r5, r6, r7, fp, pc}
   145c8:	strd	r0, [r4, #80]	; 0x50
   145cc:	ldr	r0, [r4]
   145d0:	bic	r0, r0, #16
   145d4:	str	r0, [r4]
   145d8:	mov	r0, #0
   145dc:	sub	sp, fp, #16
   145e0:	pop	{r4, r5, r6, r7, fp, pc}
   145e4:	cmp	r0, #0
   145e8:	movweq	r0, #1
   145ec:	cmn	r0, #1
   145f0:	ble	145f8 <__assert_fail@plt+0x3734>
   145f4:	b	10da4 <malloc@plt>
   145f8:	push	{fp, lr}
   145fc:	mov	fp, sp
   14600:	bl	10e10 <__errno_location@plt>
   14604:	mov	r1, #12
   14608:	str	r1, [r0]
   1460c:	mov	r0, #0
   14610:	pop	{fp, pc}
   14614:	push	{r4, r5, r6, r7, fp, lr}
   14618:	add	fp, sp, #16
   1461c:	sub	sp, sp, #8
   14620:	add	r5, sp, #4
   14624:	cmp	r0, #0
   14628:	mov	r7, r2
   1462c:	mov	r4, r1
   14630:	movne	r5, r0
   14634:	mov	r0, r5
   14638:	bl	10d8c <mbrtowc@plt>
   1463c:	mov	r6, r0
   14640:	cmp	r7, #0
   14644:	beq	14668 <__assert_fail@plt+0x37a4>
   14648:	cmn	r6, #2
   1464c:	bcc	14668 <__assert_fail@plt+0x37a4>
   14650:	mov	r0, #0
   14654:	bl	1478c <__assert_fail@plt+0x38c8>
   14658:	cmp	r0, #0
   1465c:	ldrbeq	r0, [r4]
   14660:	moveq	r6, #1
   14664:	streq	r0, [r5]
   14668:	mov	r0, r6
   1466c:	sub	sp, fp, #16
   14670:	pop	{r4, r5, r6, r7, fp, pc}
   14674:	push	{fp, lr}
   14678:	mov	fp, sp
   1467c:	cmp	r0, #0
   14680:	beq	1469c <__assert_fail@plt+0x37d8>
   14684:	cmp	r1, #0
   14688:	beq	146a8 <__assert_fail@plt+0x37e4>
   1468c:	cmn	r1, #1
   14690:	ble	146b4 <__assert_fail@plt+0x37f0>
   14694:	pop	{fp, lr}
   14698:	b	10d44 <realloc@plt>
   1469c:	mov	r0, r1
   146a0:	pop	{fp, lr}
   146a4:	b	145e4 <__assert_fail@plt+0x3720>
   146a8:	bl	14518 <__assert_fail@plt+0x3654>
   146ac:	mov	r0, #0
   146b0:	pop	{fp, pc}
   146b4:	bl	10e10 <__errno_location@plt>
   146b8:	mov	r1, #12
   146bc:	str	r1, [r0]
   146c0:	mov	r0, #0
   146c4:	pop	{fp, pc}
   146c8:	cmp	r2, #0
   146cc:	beq	146fc <__assert_fail@plt+0x3838>
   146d0:	mvn	r3, #0
   146d4:	udiv	r3, r3, r2
   146d8:	cmp	r3, r1
   146dc:	bcs	146fc <__assert_fail@plt+0x3838>
   146e0:	push	{fp, lr}
   146e4:	mov	fp, sp
   146e8:	bl	10e10 <__errno_location@plt>
   146ec:	mov	r1, #12
   146f0:	str	r1, [r0]
   146f4:	mov	r0, #0
   146f8:	pop	{fp, pc}
   146fc:	mul	r1, r2, r1
   14700:	b	14674 <__assert_fail@plt+0x37b0>
   14704:	push	{r4, r5, r6, sl, fp, lr}
   14708:	add	fp, sp, #16
   1470c:	mov	r4, r0
   14710:	bl	10d80 <__fpending@plt>
   14714:	mov	r5, r0
   14718:	mov	r0, r4
   1471c:	bl	10cfc <ferror@plt>
   14720:	mov	r6, r0
   14724:	mov	r0, r4
   14728:	bl	10e40 <fclose@plt>
   1472c:	cmp	r6, #0
   14730:	beq	14750 <__assert_fail@plt+0x388c>
   14734:	mvn	r4, #0
   14738:	cmp	r0, #0
   1473c:	bne	14784 <__assert_fail@plt+0x38c0>
   14740:	bl	10e10 <__errno_location@plt>
   14744:	mov	r1, #0
   14748:	str	r1, [r0]
   1474c:	b	14784 <__assert_fail@plt+0x38c0>
   14750:	cmp	r0, #0
   14754:	mov	r4, r0
   14758:	mvnne	r4, #0
   1475c:	cmp	r5, #0
   14760:	bne	14784 <__assert_fail@plt+0x38c0>
   14764:	cmp	r0, #0
   14768:	beq	14784 <__assert_fail@plt+0x38c0>
   1476c:	bl	10e10 <__errno_location@plt>
   14770:	ldr	r0, [r0]
   14774:	subs	r4, r0, #9
   14778:	mvnne	r4, #0
   1477c:	mov	r0, r4
   14780:	pop	{r4, r5, r6, sl, fp, pc}
   14784:	mov	r0, r4
   14788:	pop	{r4, r5, r6, sl, fp, pc}
   1478c:	push	{r4, sl, fp, lr}
   14790:	add	fp, sp, #8
   14794:	sub	sp, sp, #264	; 0x108
   14798:	add	r1, sp, #7
   1479c:	movw	r2, #257	; 0x101
   147a0:	bl	14828 <__assert_fail@plt+0x3964>
   147a4:	mov	r4, #0
   147a8:	cmp	r0, #0
   147ac:	bne	147e4 <__assert_fail@plt+0x3920>
   147b0:	movw	r1, #20795	; 0x513b
   147b4:	add	r0, sp, #7
   147b8:	movt	r1, #1
   147bc:	bl	10cc0 <strcmp@plt>
   147c0:	cmp	r0, #0
   147c4:	beq	147e4 <__assert_fail@plt+0x3920>
   147c8:	movw	r1, #20797	; 0x513d
   147cc:	add	r0, sp, #7
   147d0:	movt	r1, #1
   147d4:	bl	10cc0 <strcmp@plt>
   147d8:	mov	r4, r0
   147dc:	cmp	r0, #0
   147e0:	movwne	r4, #1
   147e4:	mov	r0, r4
   147e8:	sub	sp, fp, #8
   147ec:	pop	{r4, sl, fp, pc}
   147f0:	push	{fp, lr}
   147f4:	mov	fp, sp
   147f8:	mov	r0, #14
   147fc:	bl	10e70 <nl_langinfo@plt>
   14800:	movw	r1, #19650	; 0x4cc2
   14804:	cmp	r0, #0
   14808:	movt	r1, #1
   1480c:	movne	r1, r0
   14810:	movw	r0, #20803	; 0x5143
   14814:	ldrb	r2, [r1]
   14818:	movt	r0, #1
   1481c:	cmp	r2, #0
   14820:	movne	r0, r1
   14824:	pop	{fp, pc}
   14828:	push	{r4, r5, r6, r7, fp, lr}
   1482c:	add	fp, sp, #16
   14830:	mov	r4, r1
   14834:	mov	r1, #0
   14838:	mov	r6, r2
   1483c:	bl	10e58 <setlocale@plt>
   14840:	cmp	r0, #0
   14844:	beq	14874 <__assert_fail@plt+0x39b0>
   14848:	mov	r7, r0
   1484c:	bl	10df8 <strlen@plt>
   14850:	cmp	r0, r6
   14854:	bcs	14894 <__assert_fail@plt+0x39d0>
   14858:	add	r2, r0, #1
   1485c:	mov	r0, r4
   14860:	mov	r1, r7
   14864:	bl	10d14 <memcpy@plt>
   14868:	mov	r5, #0
   1486c:	mov	r0, r5
   14870:	pop	{r4, r5, r6, r7, fp, pc}
   14874:	cmp	r6, #0
   14878:	mov	r5, #22
   1487c:	movne	r0, #0
   14880:	strbne	r0, [r4]
   14884:	movne	r0, r5
   14888:	popne	{r4, r5, r6, r7, fp, pc}
   1488c:	mov	r0, r5
   14890:	pop	{r4, r5, r6, r7, fp, pc}
   14894:	mov	r5, #34	; 0x22
   14898:	cmp	r6, #0
   1489c:	beq	148bc <__assert_fail@plt+0x39f8>
   148a0:	sub	r6, r6, #1
   148a4:	mov	r0, r4
   148a8:	mov	r1, r7
   148ac:	mov	r2, r6
   148b0:	bl	10d14 <memcpy@plt>
   148b4:	mov	r0, #0
   148b8:	strb	r0, [r4, r6]
   148bc:	mov	r0, r5
   148c0:	pop	{r4, r5, r6, r7, fp, pc}
   148c4:	mov	r1, #0
   148c8:	b	10e58 <setlocale@plt>
   148cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148d0:	mov	r7, r0
   148d4:	ldr	r6, [pc, #72]	; 14924 <__assert_fail@plt+0x3a60>
   148d8:	ldr	r5, [pc, #72]	; 14928 <__assert_fail@plt+0x3a64>
   148dc:	add	r6, pc, r6
   148e0:	add	r5, pc, r5
   148e4:	sub	r6, r6, r5
   148e8:	mov	r8, r1
   148ec:	mov	r9, r2
   148f0:	bl	10c94 <calloc@plt-0x20>
   148f4:	asrs	r6, r6, #2
   148f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   148fc:	mov	r4, #0
   14900:	add	r4, r4, #1
   14904:	ldr	r3, [r5], #4
   14908:	mov	r2, r9
   1490c:	mov	r1, r8
   14910:	mov	r0, r7
   14914:	blx	r3
   14918:	cmp	r6, r4
   1491c:	bne	14900 <__assert_fail@plt+0x3a3c>
   14920:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14924:	andeq	r1, r1, r8, lsr #12
   14928:	andeq	r1, r1, r0, lsr #12
   1492c:	bx	lr
   14930:	ldr	r3, [pc, #12]	; 14944 <__assert_fail@plt+0x3a80>
   14934:	mov	r1, #0
   14938:	add	r3, pc, r3
   1493c:	ldr	r2, [r3]
   14940:	b	10e1c <__cxa_atexit@plt>
   14944:	andeq	r1, r1, ip, lsl #15

Disassembly of section .fini:

00014948 <.fini>:
   14948:	push	{r3, lr}
   1494c:	pop	{r3, pc}
