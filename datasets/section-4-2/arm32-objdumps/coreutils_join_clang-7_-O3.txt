
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

0001103c <.init>:
   1103c:	push	{r3, lr}
   11040:	bl	1135c <__assert_fail@plt+0x48>
   11044:	pop	{r3, pc}

Disassembly of section .plt:

00011048 <fdopen@plt-0x14>:
   11048:	push	{lr}		; (str lr, [sp, #-4]!)
   1104c:	ldr	lr, [pc, #4]	; 11058 <fdopen@plt-0x4>
   11050:	add	lr, pc, lr
   11054:	ldr	pc, [lr, #8]!
   11058:	andeq	r8, r1, r8, lsr #31

0001105c <fdopen@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #4008]!	; 0xfa8

00011068 <calloc@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #4000]!	; 0xfa0

00011074 <fputs_unlocked@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #3992]!	; 0xf98

00011080 <raise@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #24, 20	; 0x18000
   11088:	ldr	pc, [ip, #3984]!	; 0xf90

0001108c <strcmp@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #24, 20	; 0x18000
   11094:	ldr	pc, [ip, #3976]!	; 0xf88

00011098 <posix_fadvise64@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #24, 20	; 0x18000
   110a0:	ldr	pc, [ip, #3968]!	; 0xf80

000110a4 <fflush@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #24, 20	; 0x18000
   110ac:	ldr	pc, [ip, #3960]!	; 0xf78

000110b0 <free@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #24, 20	; 0x18000
   110b8:	ldr	pc, [ip, #3952]!	; 0xf70

000110bc <_exit@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #3944]!	; 0xf68

000110c8 <memcpy@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #24, 20	; 0x18000
   110d0:	ldr	pc, [ip, #3936]!	; 0xf60

000110d4 <__strtoull_internal@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #24, 20	; 0x18000
   110dc:	ldr	pc, [ip, #3928]!	; 0xf58

000110e0 <mbsinit@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #24, 20	; 0x18000
   110e8:	ldr	pc, [ip, #3920]!	; 0xf50

000110ec <fwrite_unlocked@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #24, 20	; 0x18000
   110f4:	ldr	pc, [ip, #3912]!	; 0xf48

000110f8 <memcmp@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #24, 20	; 0x18000
   11100:	ldr	pc, [ip, #3904]!	; 0xf40

00011104 <dcgettext@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #24, 20	; 0x18000
   1110c:	ldr	pc, [ip, #3896]!	; 0xf38

00011110 <realloc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #24, 20	; 0x18000
   11118:	ldr	pc, [ip, #3888]!	; 0xf30

0001111c <textdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #24, 20	; 0x18000
   11124:	ldr	pc, [ip, #3880]!	; 0xf28

00011128 <iswprint@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #24, 20	; 0x18000
   11130:	ldr	pc, [ip, #3872]!	; 0xf20

00011134 <fwrite@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #24, 20	; 0x18000
   1113c:	ldr	pc, [ip, #3864]!	; 0xf18

00011140 <lseek64@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #24, 20	; 0x18000
   11148:	ldr	pc, [ip, #3856]!	; 0xf10

0001114c <__ctype_get_mb_cur_max@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #24, 20	; 0x18000
   11154:	ldr	pc, [ip, #3848]!	; 0xf08

00011158 <__fpending@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #24, 20	; 0x18000
   11160:	ldr	pc, [ip, #3840]!	; 0xf00

00011164 <mbrtowc@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #24, 20	; 0x18000
   1116c:	ldr	pc, [ip, #3832]!	; 0xef8

00011170 <error@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #24, 20	; 0x18000
   11178:	ldr	pc, [ip, #3824]!	; 0xef0

0001117c <strcoll@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #24, 20	; 0x18000
   11184:	ldr	pc, [ip, #3816]!	; 0xee8

00011188 <malloc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #24, 20	; 0x18000
   11190:	ldr	pc, [ip, #3808]!	; 0xee0

00011194 <__libc_start_main@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #24, 20	; 0x18000
   1119c:	ldr	pc, [ip, #3800]!	; 0xed8

000111a0 <__freading@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #24, 20	; 0x18000
   111a8:	ldr	pc, [ip, #3792]!	; 0xed0

000111ac <__ctype_toupper_loc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #24, 20	; 0x18000
   111b4:	ldr	pc, [ip, #3784]!	; 0xec8

000111b8 <__gmon_start__@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #24, 20	; 0x18000
   111c0:	ldr	pc, [ip, #3776]!	; 0xec0

000111c4 <getopt_long@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #24, 20	; 0x18000
   111cc:	ldr	pc, [ip, #3768]!	; 0xeb8

000111d0 <__ctype_b_loc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #24, 20	; 0x18000
   111d8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111dc <exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #24, 20	; 0x18000
   111e4:	ldr	pc, [ip, #3752]!	; 0xea8

000111e8 <strtoul@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #24, 20	; 0x18000
   111f0:	ldr	pc, [ip, #3744]!	; 0xea0

000111f4 <strlen@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #24, 20	; 0x18000
   111fc:	ldr	pc, [ip, #3736]!	; 0xe98

00011200 <strchr@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #24, 20	; 0x18000
   11208:	ldr	pc, [ip, #3728]!	; 0xe90

0001120c <__errno_location@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #24, 20	; 0x18000
   11214:	ldr	pc, [ip, #3720]!	; 0xe88

00011218 <__cxa_atexit@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #24, 20	; 0x18000
   11220:	ldr	pc, [ip, #3712]!	; 0xe80

00011224 <memset@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #24, 20	; 0x18000
   1122c:	ldr	pc, [ip, #3704]!	; 0xe78

00011230 <__printf_chk@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #24, 20	; 0x18000
   11238:	ldr	pc, [ip, #3696]!	; 0xe70

0001123c <fileno@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #24, 20	; 0x18000
   11244:	ldr	pc, [ip, #3688]!	; 0xe68

00011248 <__fprintf_chk@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #24, 20	; 0x18000
   11250:	ldr	pc, [ip, #3680]!	; 0xe60

00011254 <memchr@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #24, 20	; 0x18000
   1125c:	ldr	pc, [ip, #3672]!	; 0xe58

00011260 <fclose@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #24, 20	; 0x18000
   11268:	ldr	pc, [ip, #3664]!	; 0xe50

0001126c <fseeko64@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #24, 20	; 0x18000
   11274:	ldr	pc, [ip, #3656]!	; 0xe48

00011278 <fcntl64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #24, 20	; 0x18000
   11280:	ldr	pc, [ip, #3648]!	; 0xe40

00011284 <__uflow@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #24, 20	; 0x18000
   1128c:	ldr	pc, [ip, #3640]!	; 0xe38

00011290 <__overflow@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #24, 20	; 0x18000
   11298:	ldr	pc, [ip, #3632]!	; 0xe30

0001129c <setlocale@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #24, 20	; 0x18000
   112a4:	ldr	pc, [ip, #3624]!	; 0xe28

000112a8 <strrchr@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #24, 20	; 0x18000
   112b0:	ldr	pc, [ip, #3616]!	; 0xe20

000112b4 <nl_langinfo@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #24, 20	; 0x18000
   112bc:	ldr	pc, [ip, #3608]!	; 0xe18

000112c0 <fopen64@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #24, 20	; 0x18000
   112c8:	ldr	pc, [ip, #3600]!	; 0xe10

000112cc <strpbrk@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #24, 20	; 0x18000
   112d4:	ldr	pc, [ip, #3592]!	; 0xe08

000112d8 <bindtextdomain@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #24, 20	; 0x18000
   112e0:	ldr	pc, [ip, #3584]!	; 0xe00

000112e4 <strncmp@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #24, 20	; 0x18000
   112ec:	ldr	pc, [ip, #3576]!	; 0xdf8

000112f0 <abort@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #24, 20	; 0x18000
   112f8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112fc <close@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #24, 20	; 0x18000
   11304:	ldr	pc, [ip, #3560]!	; 0xde8

00011308 <putchar_unlocked@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #24, 20	; 0x18000
   11310:	ldr	pc, [ip, #3552]!	; 0xde0

00011314 <__assert_fail@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #24, 20	; 0x18000
   1131c:	ldr	pc, [ip, #3544]!	; 0xdd8

Disassembly of section .text:

00011320 <.text>:
   11320:	mov	fp, #0
   11324:	mov	lr, #0
   11328:	pop	{r1}		; (ldr r1, [sp], #4)
   1132c:	mov	r2, sp
   11330:	push	{r2}		; (str r2, [sp, #-4]!)
   11334:	push	{r0}		; (str r0, [sp, #-4]!)
   11338:	ldr	ip, [pc, #16]	; 11350 <__assert_fail@plt+0x3c>
   1133c:	push	{ip}		; (str ip, [sp, #-4]!)
   11340:	ldr	r0, [pc, #12]	; 11354 <__assert_fail@plt+0x40>
   11344:	ldr	r3, [pc, #12]	; 11358 <__assert_fail@plt+0x44>
   11348:	bl	11194 <__libc_start_main@plt>
   1134c:	bl	112f0 <abort@plt>
   11350:	andeq	r8, r1, r0, lsr #23
   11354:	strdeq	r1, [r1], -ip
   11358:	andeq	r8, r1, r0, asr #22
   1135c:	ldr	r3, [pc, #20]	; 11378 <__assert_fail@plt+0x64>
   11360:	ldr	r2, [pc, #20]	; 1137c <__assert_fail@plt+0x68>
   11364:	add	r3, pc, r3
   11368:	ldr	r2, [r3, r2]
   1136c:	cmp	r2, #0
   11370:	bxeq	lr
   11374:	b	111b8 <__gmon_start__@plt>
   11378:	muleq	r1, r4, ip
   1137c:	strdeq	r0, [r0], -r8
   11380:	ldr	r0, [pc, #24]	; 113a0 <__assert_fail@plt+0x8c>
   11384:	ldr	r3, [pc, #24]	; 113a4 <__assert_fail@plt+0x90>
   11388:	cmp	r3, r0
   1138c:	bxeq	lr
   11390:	ldr	r3, [pc, #16]	; 113a8 <__assert_fail@plt+0x94>
   11394:	cmp	r3, #0
   11398:	bxeq	lr
   1139c:	bx	r3
   113a0:	andeq	sl, r2, r0, ror #2
   113a4:	andeq	sl, r2, r0, ror #2
   113a8:	andeq	r0, r0, r0
   113ac:	ldr	r0, [pc, #36]	; 113d8 <__assert_fail@plt+0xc4>
   113b0:	ldr	r1, [pc, #36]	; 113dc <__assert_fail@plt+0xc8>
   113b4:	sub	r1, r1, r0
   113b8:	asr	r1, r1, #2
   113bc:	add	r1, r1, r1, lsr #31
   113c0:	asrs	r1, r1, #1
   113c4:	bxeq	lr
   113c8:	ldr	r3, [pc, #16]	; 113e0 <__assert_fail@plt+0xcc>
   113cc:	cmp	r3, #0
   113d0:	bxeq	lr
   113d4:	bx	r3
   113d8:	andeq	sl, r2, r0, ror #2
   113dc:	andeq	sl, r2, r0, ror #2
   113e0:	andeq	r0, r0, r0
   113e4:	push	{r4, lr}
   113e8:	ldr	r4, [pc, #24]	; 11408 <__assert_fail@plt+0xf4>
   113ec:	ldrb	r3, [r4]
   113f0:	cmp	r3, #0
   113f4:	popne	{r4, pc}
   113f8:	bl	11380 <__assert_fail@plt+0x6c>
   113fc:	mov	r3, #1
   11400:	strb	r3, [r4]
   11404:	pop	{r4, pc}
   11408:	andeq	sl, r2, r4, lsl #3
   1140c:	b	113ac <__assert_fail@plt+0x98>
   11410:	push	{fp, lr}
   11414:	mov	fp, sp
   11418:	sub	sp, sp, #56	; 0x38
   1141c:	mov	r4, r0
   11420:	cmp	r0, #0
   11424:	bne	116b8 <__assert_fail@plt+0x3a4>
   11428:	movw	r1, #35827	; 0x8bf3
   1142c:	mov	r0, #0
   11430:	mov	r2, #5
   11434:	movt	r1, #1
   11438:	bl	11104 <dcgettext@plt>
   1143c:	mov	r1, r0
   11440:	movw	r0, #41464	; 0xa1f8
   11444:	movt	r0, #2
   11448:	ldr	r2, [r0]
   1144c:	mov	r0, #1
   11450:	bl	11230 <__printf_chk@plt>
   11454:	movw	r1, #35862	; 0x8c16
   11458:	mov	r0, #0
   1145c:	mov	r2, #5
   11460:	movt	r1, #1
   11464:	bl	11104 <dcgettext@plt>
   11468:	movw	r7, #41340	; 0xa17c
   1146c:	movt	r7, #2
   11470:	ldr	r1, [r7]
   11474:	bl	11074 <fputs_unlocked@plt>
   11478:	movw	r1, #36012	; 0x8cac
   1147c:	mov	r0, #0
   11480:	mov	r2, #5
   11484:	movt	r1, #1
   11488:	bl	11104 <dcgettext@plt>
   1148c:	ldr	r1, [r7]
   11490:	bl	11074 <fputs_unlocked@plt>
   11494:	movw	r1, #36072	; 0x8ce8
   11498:	mov	r0, #0
   1149c:	mov	r2, #5
   114a0:	movt	r1, #1
   114a4:	bl	11104 <dcgettext@plt>
   114a8:	ldr	r1, [r7]
   114ac:	bl	11074 <fputs_unlocked@plt>
   114b0:	movw	r1, #36295	; 0x8dc7
   114b4:	mov	r0, #0
   114b8:	mov	r2, #5
   114bc:	movt	r1, #1
   114c0:	bl	11104 <dcgettext@plt>
   114c4:	ldr	r1, [r7]
   114c8:	bl	11074 <fputs_unlocked@plt>
   114cc:	movw	r1, #36567	; 0x8ed7
   114d0:	mov	r0, #0
   114d4:	mov	r2, #5
   114d8:	movt	r1, #1
   114dc:	bl	11104 <dcgettext@plt>
   114e0:	ldr	r1, [r7]
   114e4:	bl	11074 <fputs_unlocked@plt>
   114e8:	movw	r1, #37098	; 0x90ea
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	movt	r1, #1
   114f8:	bl	11104 <dcgettext@plt>
   114fc:	ldr	r1, [r7]
   11500:	bl	11074 <fputs_unlocked@plt>
   11504:	movw	r1, #37159	; 0x9127
   11508:	mov	r0, #0
   1150c:	mov	r2, #5
   11510:	movt	r1, #1
   11514:	bl	11104 <dcgettext@plt>
   11518:	ldr	r1, [r7]
   1151c:	bl	11074 <fputs_unlocked@plt>
   11520:	movw	r1, #37204	; 0x9154
   11524:	mov	r0, #0
   11528:	mov	r2, #5
   1152c:	movt	r1, #1
   11530:	bl	11104 <dcgettext@plt>
   11534:	ldr	r1, [r7]
   11538:	bl	11074 <fputs_unlocked@plt>
   1153c:	movw	r1, #37258	; 0x918a
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	movt	r1, #1
   1154c:	bl	11104 <dcgettext@plt>
   11550:	ldr	r1, [r7]
   11554:	bl	11074 <fputs_unlocked@plt>
   11558:	movw	r0, #39040	; 0x9880
   1155c:	mov	r2, #48	; 0x30
   11560:	mov	r6, sp
   11564:	movw	r5, #38076	; 0x94bc
   11568:	movt	r0, #1
   1156c:	movt	r5, #1
   11570:	add	r1, r0, #32
   11574:	add	r3, r0, #16
   11578:	vld1.64	{d18-d19}, [r0], r2
   1157c:	vld1.64	{d16-d17}, [r1]
   11580:	vld1.64	{d20-d21}, [r3]
   11584:	add	r1, r6, #32
   11588:	vldr	d22, [r0]
   1158c:	add	r0, r6, #16
   11590:	vst1.64	{d16-d17}, [r1]
   11594:	movw	r1, #38376	; 0x95e8
   11598:	vst1.64	{d20-d21}, [r0]
   1159c:	mov	r0, r6
   115a0:	vst1.64	{d18-d19}, [r0], r2
   115a4:	movt	r1, #1
   115a8:	vstr	d22, [r0]
   115ac:	mov	r0, r5
   115b0:	bl	1108c <strcmp@plt>
   115b4:	cmp	r0, #0
   115b8:	ldrne	r1, [r6, #8]!
   115bc:	cmpne	r1, #0
   115c0:	bne	115ac <__assert_fail@plt+0x298>
   115c4:	ldr	r6, [r6, #4]
   115c8:	movw	r1, #38471	; 0x9647
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	movt	r1, #1
   115d8:	bl	11104 <dcgettext@plt>
   115dc:	movw	r2, #38243	; 0x9563
   115e0:	movw	r3, #38494	; 0x965e
   115e4:	mov	r1, r0
   115e8:	mov	r0, #1
   115ec:	movt	r2, #1
   115f0:	movt	r3, #1
   115f4:	bl	11230 <__printf_chk@plt>
   115f8:	cmp	r6, #0
   115fc:	mov	r0, #5
   11600:	mov	r1, #0
   11604:	moveq	r6, r5
   11608:	bl	1129c <setlocale@plt>
   1160c:	cmp	r0, #0
   11610:	beq	11648 <__assert_fail@plt+0x334>
   11614:	movw	r1, #38534	; 0x9686
   11618:	mov	r2, #3
   1161c:	movt	r1, #1
   11620:	bl	112e4 <strncmp@plt>
   11624:	cmp	r0, #0
   11628:	beq	11648 <__assert_fail@plt+0x334>
   1162c:	movw	r1, #38538	; 0x968a
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	11104 <dcgettext@plt>
   11640:	ldr	r1, [r7]
   11644:	bl	11074 <fputs_unlocked@plt>
   11648:	movw	r1, #38609	; 0x96d1
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	movt	r1, #1
   11658:	bl	11104 <dcgettext@plt>
   1165c:	movw	r2, #38494	; 0x965e
   11660:	mov	r1, r0
   11664:	mov	r0, #1
   11668:	mov	r3, r5
   1166c:	movt	r2, #1
   11670:	bl	11230 <__printf_chk@plt>
   11674:	movw	r1, #38636	; 0x96ec
   11678:	mov	r0, #0
   1167c:	mov	r2, #5
   11680:	movt	r1, #1
   11684:	bl	11104 <dcgettext@plt>
   11688:	movw	r3, #38786	; 0x9782
   1168c:	mov	r1, r0
   11690:	movw	r0, #38404	; 0x9604
   11694:	cmp	r6, r5
   11698:	mov	r2, r6
   1169c:	movt	r0, #1
   116a0:	movt	r3, #1
   116a4:	moveq	r3, r0
   116a8:	mov	r0, #1
   116ac:	bl	11230 <__printf_chk@plt>
   116b0:	mov	r0, r4
   116b4:	bl	111dc <exit@plt>
   116b8:	movw	r0, #41328	; 0xa170
   116bc:	movw	r1, #35788	; 0x8bcc
   116c0:	mov	r2, #5
   116c4:	movt	r0, #2
   116c8:	movt	r1, #1
   116cc:	ldr	r5, [r0]
   116d0:	mov	r0, #0
   116d4:	bl	11104 <dcgettext@plt>
   116d8:	mov	r2, r0
   116dc:	movw	r0, #41464	; 0xa1f8
   116e0:	mov	r1, #1
   116e4:	movt	r0, #2
   116e8:	ldr	r3, [r0]
   116ec:	mov	r0, r5
   116f0:	bl	11248 <__fprintf_chk@plt>
   116f4:	mov	r0, r4
   116f8:	bl	111dc <exit@plt>
   116fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11700:	add	fp, sp, #28
   11704:	sub	sp, sp, #84	; 0x54
   11708:	mov	r9, #0
   1170c:	mov	r6, r0
   11710:	mov	r8, r1
   11714:	str	r9, [sp, #48]	; 0x30
   11718:	str	r9, [sp, #36]	; 0x24
   1171c:	str	r9, [sp, #32]
   11720:	str	r9, [sp, #28]
   11724:	ldr	r0, [r1]
   11728:	bl	14018 <__assert_fail@plt+0x2d04>
   1172c:	movw	sl, #38786	; 0x9782
   11730:	mov	r0, #6
   11734:	movt	sl, #1
   11738:	mov	r1, sl
   1173c:	bl	1129c <setlocale@plt>
   11740:	movw	r5, #38247	; 0x9567
   11744:	movw	r1, #38081	; 0x94c1
   11748:	movt	r5, #1
   1174c:	movt	r1, #1
   11750:	mov	r0, r5
   11754:	bl	112d8 <bindtextdomain@plt>
   11758:	mov	r0, r5
   1175c:	bl	1111c <textdomain@plt>
   11760:	mov	r0, #3
   11764:	bl	13cfc <__assert_fail@plt+0x29e8>
   11768:	movw	r4, #41352	; 0xa188
   1176c:	movt	r4, #2
   11770:	strb	r0, [r4]
   11774:	movw	r0, #14668	; 0x394c
   11778:	movt	r0, #1
   1177c:	bl	18ba4 <__assert_fail@plt+0x7890>
   11780:	movw	r0, #11240	; 0x2be8
   11784:	movt	r0, #1
   11788:	bl	18ba4 <__assert_fail@plt+0x7890>
   1178c:	movw	r2, #38105	; 0x94d9
   11790:	movw	r3, #38912	; 0x9800
   11794:	mov	r0, #1
   11798:	mov	r1, r8
   1179c:	str	r9, [sp]
   117a0:	strh	r0, [r4, #1]
   117a4:	movt	r2, #1
   117a8:	movt	r3, #1
   117ac:	mov	r0, r6
   117b0:	strh	r9, [r4, #9]
   117b4:	str	r9, [r4, #12]
   117b8:	bl	111c4 <getopt_long@plt>
   117bc:	cmn	r0, #1
   117c0:	beq	11e1c <__assert_fail@plt+0xb08>
   117c4:	movw	r5, #41344	; 0xa180
   117c8:	movw	r7, #38105	; 0x94d9
   117cc:	movt	r5, #2
   117d0:	movt	r7, #1
   117d4:	b	11818 <__assert_fail@plt+0x504>
   117d8:	subs	r0, r0, #50	; 0x32
   117dc:	add	r1, sp, #32
   117e0:	movw	r4, #41352	; 0xa188
   117e4:	movw	sl, #38786	; 0x9782
   117e8:	clz	r0, r0
   117ec:	movt	r4, #2
   117f0:	movt	sl, #1
   117f4:	lsr	r0, r0, #5
   117f8:	orr	r0, r1, r0, lsl #2
   117fc:	ldr	r1, [r0]
   11800:	add	r1, r1, #1
   11804:	str	r1, [r0]
   11808:	mov	r0, #1
   1180c:	movweq	r0, #2
   11810:	str	r0, [sp, #52]	; 0x34
   11814:	b	11df4 <__assert_fail@plt+0xae0>
   11818:	cmp	r0, #255	; 0xff
   1181c:	str	r9, [sp, #52]	; 0x34
   11820:	bgt	11a5c <__assert_fail@plt+0x748>
   11824:	add	r0, r0, #3
   11828:	cmp	r0, #125	; 0x7d
   1182c:	bhi	12be0 <__assert_fail@plt+0x18cc>
   11830:	add	r1, pc, #0
   11834:	ldr	pc, [r1, r0, lsl #2]
   11838:	muleq	r1, r0, r9
   1183c:	ldrdeq	r2, [r1], -r8
   11840:	andeq	r2, r1, r0, ror #23
   11844:	andeq	r2, r1, r0, ror #23
   11848:	andeq	r1, r1, r0, lsr sl
   1184c:	andeq	r2, r1, r0, ror #23
   11850:	andeq	r2, r1, r0, ror #23
   11854:	andeq	r2, r1, r0, ror #23
   11858:	andeq	r2, r1, r0, ror #23
   1185c:	andeq	r2, r1, r0, ror #23
   11860:	andeq	r2, r1, r0, ror #23
   11864:	andeq	r2, r1, r0, ror #23
   11868:	andeq	r2, r1, r0, ror #23
   1186c:	andeq	r2, r1, r0, ror #23
   11870:	andeq	r2, r1, r0, ror #23
   11874:	andeq	r2, r1, r0, ror #23
   11878:	andeq	r2, r1, r0, ror #23
   1187c:	andeq	r2, r1, r0, ror #23
   11880:	andeq	r2, r1, r0, ror #23
   11884:	andeq	r2, r1, r0, ror #23
   11888:	andeq	r2, r1, r0, ror #23
   1188c:	andeq	r2, r1, r0, ror #23
   11890:	andeq	r2, r1, r0, ror #23
   11894:	andeq	r2, r1, r0, ror #23
   11898:	andeq	r2, r1, r0, ror #23
   1189c:	andeq	r2, r1, r0, ror #23
   118a0:	andeq	r2, r1, r0, ror #23
   118a4:	andeq	r2, r1, r0, ror #23
   118a8:	andeq	r2, r1, r0, ror #23
   118ac:	andeq	r2, r1, r0, ror #23
   118b0:	andeq	r2, r1, r0, ror #23
   118b4:	andeq	r2, r1, r0, ror #23
   118b8:	andeq	r2, r1, r0, ror #23
   118bc:	andeq	r2, r1, r0, ror #23
   118c0:	andeq	r2, r1, r0, ror #23
   118c4:	andeq	r2, r1, r0, ror #23
   118c8:	andeq	r2, r1, r0, ror #23
   118cc:	andeq	r2, r1, r0, ror #23
   118d0:	andeq	r2, r1, r0, ror #23
   118d4:	andeq	r2, r1, r0, ror #23
   118d8:	andeq	r2, r1, r0, ror #23
   118dc:	andeq	r2, r1, r0, ror #23
   118e0:	andeq	r2, r1, r0, ror #23
   118e4:	andeq	r2, r1, r0, ror #23
   118e8:	andeq	r2, r1, r0, ror #23
   118ec:	andeq	r2, r1, r0, ror #23
   118f0:	andeq	r2, r1, r0, ror #23
   118f4:	andeq	r2, r1, r0, ror #23
   118f8:	andeq	r2, r1, r0, ror #23
   118fc:	andeq	r2, r1, r0, ror #23
   11900:	andeq	r2, r1, r0, ror #23
   11904:	andeq	r2, r1, r0, ror #23
   11908:	andeq	r1, r1, r4, asr fp
   1190c:	andeq	r1, r1, r0, lsr #23
   11910:	andeq	r2, r1, r0, ror #23
   11914:	andeq	r2, r1, r0, ror #23
   11918:	andeq	r2, r1, r0, ror #23
   1191c:	andeq	r2, r1, r0, ror #23
   11920:	andeq	r2, r1, r0, ror #23
   11924:	andeq	r2, r1, r0, ror #23
   11928:	andeq	r2, r1, r0, ror #23
   1192c:	andeq	r2, r1, r0, ror #23
   11930:	andeq	r2, r1, r0, ror #23
   11934:	andeq	r2, r1, r0, ror #23
   11938:	andeq	r2, r1, r0, ror #23
   1193c:	andeq	r2, r1, r0, ror #23
   11940:	andeq	r2, r1, r0, ror #23
   11944:	andeq	r2, r1, r0, ror #23
   11948:	andeq	r2, r1, r0, ror #23
   1194c:	andeq	r2, r1, r0, ror #23
   11950:	andeq	r2, r1, r0, ror #23
   11954:	andeq	r2, r1, r0, ror #23
   11958:	andeq	r2, r1, r0, ror #23
   1195c:	andeq	r2, r1, r0, ror #23
   11960:	andeq	r2, r1, r0, ror #23
   11964:	andeq	r2, r1, r0, ror #23
   11968:	andeq	r2, r1, r0, ror #23
   1196c:	andeq	r2, r1, r0, ror #23
   11970:	andeq	r2, r1, r0, ror #23
   11974:	andeq	r2, r1, r0, ror #23
   11978:	andeq	r2, r1, r0, ror #23
   1197c:	andeq	r2, r1, r0, ror #23
   11980:	andeq	r2, r1, r0, ror #23
   11984:	andeq	r2, r1, r0, ror #23
   11988:	andeq	r2, r1, r0, ror #23
   1198c:	andeq	r2, r1, r0, ror #23
   11990:	andeq	r2, r1, r0, ror #23
   11994:	andeq	r2, r1, r0, ror #23
   11998:	andeq	r2, r1, r0, ror #23
   1199c:	andeq	r2, r1, r0, ror #23
   119a0:	andeq	r2, r1, r0, ror #23
   119a4:	andeq	r2, r1, r0, ror #23
   119a8:	andeq	r2, r1, r0, ror #23
   119ac:	andeq	r2, r1, r0, ror #23
   119b0:	andeq	r2, r1, r0, ror #23
   119b4:	andeq	r2, r1, r0, ror #23
   119b8:	andeq	r2, r1, r0, ror #23
   119bc:	andeq	r2, r1, r0, ror #23
   119c0:	andeq	r2, r1, r0, ror #23
   119c4:	andeq	r2, r1, r0, ror #23
   119c8:	andeq	r1, r1, r4, ror ip
   119cc:	andeq	r2, r1, r0, ror #23
   119d0:	andeq	r2, r1, r0, ror #23
   119d4:	andeq	r2, r1, r0, ror #23
   119d8:	andeq	r1, r1, r0, lsl ip
   119dc:	andeq	r2, r1, r0, ror #23
   119e0:	andeq	r2, r1, r0, ror #23
   119e4:	andeq	r2, r1, r0, ror #23
   119e8:	andeq	r1, r1, r4, lsr ip
   119ec:	andeq	r1, r1, ip, ror sl
   119f0:	andeq	r2, r1, r0, ror #23
   119f4:	andeq	r2, r1, r0, ror #23
   119f8:	andeq	r2, r1, r0, ror #23
   119fc:	andeq	r2, r1, r0, ror #23
   11a00:	andeq	r1, r1, r0, asr #24
   11a04:	andeq	r2, r1, r0, ror #23
   11a08:	andeq	r2, r1, r0, ror #23
   11a0c:	andeq	r2, r1, r0, ror #23
   11a10:	andeq	r2, r1, r0, ror #23
   11a14:	andeq	r1, r1, ip, lsl fp
   11a18:	andeq	r2, r1, r0, ror #23
   11a1c:	andeq	r1, r1, r0, ror ip
   11a20:	andeq	r2, r1, r0, ror #23
   11a24:	andeq	r2, r1, r0, ror #23
   11a28:	andeq	r2, r1, r0, ror #23
   11a2c:	andeq	r1, r1, ip, ror #23
   11a30:	ldr	r0, [r5]
   11a34:	add	r1, sp, #48	; 0x30
   11a38:	add	r2, sp, #32
   11a3c:	add	r3, sp, #28
   11a40:	str	r1, [sp]
   11a44:	add	r1, sp, #52	; 0x34
   11a48:	str	r1, [sp, #4]
   11a4c:	add	r1, sp, #40	; 0x28
   11a50:	bl	12dbc <__assert_fail@plt+0x1aa8>
   11a54:	ldr	r0, [sp, #52]	; 0x34
   11a58:	b	11df4 <__assert_fail@plt+0xae0>
   11a5c:	cmp	r0, #256	; 0x100
   11a60:	beq	11b10 <__assert_fail@plt+0x7fc>
   11a64:	movw	r1, #257	; 0x101
   11a68:	cmp	r0, r1
   11a6c:	bne	11bf8 <__assert_fail@plt+0x8e4>
   11a70:	mov	r0, #2
   11a74:	str	r0, [r4, #12]
   11a78:	b	11ce8 <__assert_fail@plt+0x9d4>
   11a7c:	ldr	sl, [r5]
   11a80:	ldrb	r0, [sl]
   11a84:	sub	r1, r0, #49	; 0x31
   11a88:	uxtb	r1, r1
   11a8c:	cmp	r1, #1
   11a90:	bhi	11ac0 <__assert_fail@plt+0x7ac>
   11a94:	ldrb	r1, [sl, #1]
   11a98:	cmp	r1, #0
   11a9c:	bne	11ac0 <__assert_fail@plt+0x7ac>
   11aa0:	movw	r1, #41320	; 0xa168
   11aa4:	movt	r1, #2
   11aa8:	ldr	r1, [r1]
   11aac:	add	r1, r8, r1, lsl #2
   11ab0:	ldr	r1, [r1, #-4]
   11ab4:	add	r1, r1, #2
   11ab8:	cmp	sl, r1
   11abc:	beq	117d8 <__assert_fail@plt+0x4c4>
   11ac0:	movw	r0, #38786	; 0x9782
   11ac4:	mov	r1, #0
   11ac8:	mov	r2, #10
   11acc:	sub	r3, fp, #40	; 0x28
   11ad0:	movt	r0, #1
   11ad4:	str	r0, [sp]
   11ad8:	mov	r0, sl
   11adc:	bl	1771c <__assert_fail@plt+0x6408>
   11ae0:	cmp	r0, #1
   11ae4:	beq	11b00 <__assert_fail@plt+0x7ec>
   11ae8:	ldr	r7, [fp, #-40]	; 0xffffffd8
   11aec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11af0:	cmp	r0, #0
   11af4:	bne	11d78 <__assert_fail@plt+0xa64>
   11af8:	cmp	r1, #0
   11afc:	beq	11d78 <__assert_fail@plt+0xa64>
   11b00:	mvn	r7, #0
   11b04:	str	r9, [fp, #-36]	; 0xffffffdc
   11b08:	str	r7, [fp, #-40]	; 0xffffffd8
   11b0c:	b	11d88 <__assert_fail@plt+0xa74>
   11b10:	mov	r0, #1
   11b14:	str	r0, [r4, #12]
   11b18:	b	11ce8 <__assert_fail@plt+0x9d4>
   11b1c:	ldr	r0, [r5]
   11b20:	ldrb	r1, [r0]
   11b24:	cmp	r1, #0
   11b28:	beq	11cbc <__assert_fail@plt+0x9a8>
   11b2c:	ldrb	r2, [r0, #1]
   11b30:	cmp	r2, #0
   11b34:	beq	11cc0 <__assert_fail@plt+0x9ac>
   11b38:	movw	r1, #38199	; 0x9537
   11b3c:	movt	r1, #1
   11b40:	bl	1108c <strcmp@plt>
   11b44:	mov	r1, #0
   11b48:	cmp	r0, #0
   11b4c:	beq	11cc0 <__assert_fail@plt+0x9ac>
   11b50:	b	12ae0 <__assert_fail@plt+0x17cc>
   11b54:	ldr	r7, [r5]
   11b58:	mov	r1, #0
   11b5c:	mov	r2, #10
   11b60:	sub	r3, fp, #40	; 0x28
   11b64:	str	sl, [sp]
   11b68:	mov	r0, r7
   11b6c:	bl	1771c <__assert_fail@plt+0x6408>
   11b70:	cmp	r0, #1
   11b74:	beq	11b90 <__assert_fail@plt+0x87c>
   11b78:	ldr	r5, [fp, #-40]	; 0xffffffd8
   11b7c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11b80:	cmp	r0, #0
   11b84:	bne	11d0c <__assert_fail@plt+0x9f8>
   11b88:	cmp	r1, #0
   11b8c:	beq	11d0c <__assert_fail@plt+0x9f8>
   11b90:	mvn	r5, #0
   11b94:	str	r9, [fp, #-36]	; 0xffffffdc
   11b98:	str	r5, [fp, #-40]	; 0xffffffd8
   11b9c:	b	11d1c <__assert_fail@plt+0xa08>
   11ba0:	ldr	r7, [r5]
   11ba4:	mov	r1, #0
   11ba8:	mov	r2, #10
   11bac:	sub	r3, fp, #40	; 0x28
   11bb0:	str	sl, [sp]
   11bb4:	mov	r0, r7
   11bb8:	bl	1771c <__assert_fail@plt+0x6408>
   11bbc:	cmp	r0, #1
   11bc0:	beq	11bdc <__assert_fail@plt+0x8c8>
   11bc4:	ldr	r5, [fp, #-40]	; 0xffffffd8
   11bc8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11bcc:	cmp	r0, #0
   11bd0:	bne	11d48 <__assert_fail@plt+0xa34>
   11bd4:	cmp	r1, #0
   11bd8:	beq	11d48 <__assert_fail@plt+0xa34>
   11bdc:	mvn	r5, #0
   11be0:	str	r9, [fp, #-36]	; 0xffffffdc
   11be4:	str	r5, [fp, #-40]	; 0xffffffd8
   11be8:	b	11d58 <__assert_fail@plt+0xa44>
   11bec:	mov	r0, #1
   11bf0:	strb	r0, [r4, #7]
   11bf4:	b	11ce8 <__assert_fail@plt+0x9d4>
   11bf8:	movw	r1, #258	; 0x102
   11bfc:	cmp	r0, r1
   11c00:	bne	12be0 <__assert_fail@plt+0x18cc>
   11c04:	mov	r0, #1
   11c08:	strb	r0, [r4, #8]
   11c0c:	b	11ce8 <__assert_fail@plt+0x9d4>
   11c10:	ldr	r0, [r4, #16]
   11c14:	cmp	r0, #0
   11c18:	beq	11cf0 <__assert_fail@plt+0x9dc>
   11c1c:	ldr	r7, [r5]
   11c20:	mov	r1, r7
   11c24:	bl	1108c <strcmp@plt>
   11c28:	cmp	r0, #0
   11c2c:	beq	11cf4 <__assert_fail@plt+0x9e0>
   11c30:	b	12aec <__assert_fail@plt+0x17d8>
   11c34:	mov	r0, #1
   11c38:	strb	r0, [r4, #5]
   11c3c:	b	11ce8 <__assert_fail@plt+0x9d4>
   11c40:	ldr	r7, [r5]
   11c44:	movw	r1, #38194	; 0x9532
   11c48:	movt	r1, #1
   11c4c:	mov	r0, r7
   11c50:	bl	1108c <strcmp@plt>
   11c54:	cmp	r0, #0
   11c58:	beq	11cfc <__assert_fail@plt+0x9e8>
   11c5c:	mov	r0, r7
   11c60:	bl	12c5c <__assert_fail@plt+0x1948>
   11c64:	mov	r0, #3
   11c68:	str	r0, [sp, #52]	; 0x34
   11c6c:	b	11dec <__assert_fail@plt+0xad8>
   11c70:	strb	r9, [r4, #1]
   11c74:	ldr	r0, [r5]
   11c78:	mov	r1, #0
   11c7c:	mov	r2, #10
   11c80:	sub	r3, fp, #40	; 0x28
   11c84:	str	sl, [sp]
   11c88:	bl	16ea0 <__assert_fail@plt+0x5b8c>
   11c8c:	cmp	r0, #0
   11c90:	bne	129e0 <__assert_fail@plt+0x16cc>
   11c94:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c98:	sub	r1, r0, #1
   11c9c:	cmp	r1, #2
   11ca0:	bcs	129e0 <__assert_fail@plt+0x16cc>
   11ca4:	cmp	r0, #1
   11ca8:	mov	r0, #4
   11cac:	mov	r1, #1
   11cb0:	movweq	r0, #3
   11cb4:	strb	r1, [r4, r0]
   11cb8:	b	11ce8 <__assert_fail@plt+0x9d4>
   11cbc:	mov	r1, #10
   11cc0:	movw	r0, #41228	; 0xa10c
   11cc4:	movt	r0, #2
   11cc8:	ldr	r0, [r0, #8]
   11ccc:	cmp	r0, #0
   11cd0:	blt	11cdc <__assert_fail@plt+0x9c8>
   11cd4:	cmp	r0, r1
   11cd8:	bne	12af8 <__assert_fail@plt+0x17e4>
   11cdc:	movw	r0, #41228	; 0xa10c
   11ce0:	movt	r0, #2
   11ce4:	str	r1, [r0, #8]
   11ce8:	mov	r0, #0
   11cec:	b	11df4 <__assert_fail@plt+0xae0>
   11cf0:	ldr	r7, [r5]
   11cf4:	str	r7, [r4, #16]
   11cf8:	b	11d04 <__assert_fail@plt+0x9f0>
   11cfc:	mov	r0, #1
   11d00:	strb	r0, [r4, #6]
   11d04:	mov	r0, #0
   11d08:	b	11dec <__assert_fail@plt+0xad8>
   11d0c:	cmp	r0, #0
   11d10:	bne	12b04 <__assert_fail@plt+0x17f0>
   11d14:	orrs	r0, r5, r1
   11d18:	beq	12b04 <__assert_fail@plt+0x17f0>
   11d1c:	movw	r1, #41228	; 0xa10c
   11d20:	sub	r0, r5, #1
   11d24:	movt	r1, #2
   11d28:	ldr	r7, [r1]
   11d2c:	cmn	r7, #1
   11d30:	cmpne	r7, r0
   11d34:	bne	12a14 <__assert_fail@plt+0x1700>
   11d38:	movw	r1, #41228	; 0xa10c
   11d3c:	movt	r1, #2
   11d40:	str	r0, [r1]
   11d44:	b	11de0 <__assert_fail@plt+0xacc>
   11d48:	cmp	r0, #0
   11d4c:	bne	12b04 <__assert_fail@plt+0x17f0>
   11d50:	orrs	r0, r5, r1
   11d54:	beq	12b04 <__assert_fail@plt+0x17f0>
   11d58:	movw	r1, #41228	; 0xa10c
   11d5c:	sub	r0, r5, #1
   11d60:	movt	r1, #2
   11d64:	ldr	r7, [r1, #4]
   11d68:	cmn	r7, #1
   11d6c:	cmpne	r7, r0
   11d70:	beq	11dd4 <__assert_fail@plt+0xac0>
   11d74:	b	12a14 <__assert_fail@plt+0x1700>
   11d78:	cmp	r0, #0
   11d7c:	bne	12b24 <__assert_fail@plt+0x1810>
   11d80:	orrs	r0, r7, r1
   11d84:	beq	12b24 <__assert_fail@plt+0x1810>
   11d88:	movw	r1, #41228	; 0xa10c
   11d8c:	sub	r0, r7, #1
   11d90:	movt	r1, #2
   11d94:	ldr	r5, [r1]
   11d98:	cmn	r5, #1
   11d9c:	cmpne	r5, r0
   11da0:	bne	12a40 <__assert_fail@plt+0x172c>
   11da4:	movw	r1, #41228	; 0xa10c
   11da8:	movw	r4, #41352	; 0xa188
   11dac:	movw	sl, #38786	; 0x9782
   11db0:	movt	r1, #2
   11db4:	movt	r4, #2
   11db8:	movt	sl, #1
   11dbc:	str	r0, [r1]
   11dc0:	ldr	r5, [r1, #4]
   11dc4:	cmn	r5, #1
   11dc8:	beq	11dd4 <__assert_fail@plt+0xac0>
   11dcc:	cmp	r5, r0
   11dd0:	bne	12a40 <__assert_fail@plt+0x172c>
   11dd4:	movw	r1, #41228	; 0xa10c
   11dd8:	movt	r1, #2
   11ddc:	str	r0, [r1, #4]
   11de0:	movw	r5, #41344	; 0xa180
   11de4:	mov	r0, #0
   11de8:	movt	r5, #2
   11dec:	movw	r7, #38105	; 0x94d9
   11df0:	movt	r7, #1
   11df4:	movw	r3, #38912	; 0x9800
   11df8:	str	r0, [sp, #48]	; 0x30
   11dfc:	mov	r0, r6
   11e00:	mov	r1, r8
   11e04:	mov	r2, r7
   11e08:	str	r9, [sp]
   11e0c:	movt	r3, #1
   11e10:	bl	111c4 <getopt_long@plt>
   11e14:	cmn	r0, #1
   11e18:	bne	11818 <__assert_fail@plt+0x504>
   11e1c:	movw	r4, #41320	; 0xa168
   11e20:	str	r9, [sp, #48]	; 0x30
   11e24:	movt	r4, #2
   11e28:	ldr	r0, [r4]
   11e2c:	cmp	r0, r6
   11e30:	bge	11e78 <__assert_fail@plt+0xb64>
   11e34:	add	r9, sp, #48	; 0x30
   11e38:	add	sl, sp, #40	; 0x28
   11e3c:	add	r7, sp, #32
   11e40:	add	r5, sp, #28
   11e44:	add	r1, r0, #1
   11e48:	mov	r2, r7
   11e4c:	mov	r3, r5
   11e50:	str	r1, [r4]
   11e54:	add	r1, sp, #52	; 0x34
   11e58:	ldr	r0, [r8, r0, lsl #2]
   11e5c:	str	r1, [sp, #4]
   11e60:	mov	r1, sl
   11e64:	str	r9, [sp]
   11e68:	bl	12dbc <__assert_fail@plt+0x1aa8>
   11e6c:	ldr	r0, [r4]
   11e70:	cmp	r0, r6
   11e74:	blt	11e44 <__assert_fail@plt+0xb30>
   11e78:	ldr	r0, [sp, #28]
   11e7c:	cmp	r0, #2
   11e80:	bne	12a6c <__assert_fail@plt+0x1758>
   11e84:	ldr	r0, [sp, #32]
   11e88:	cmp	r0, #0
   11e8c:	beq	11ec0 <__assert_fail@plt+0xbac>
   11e90:	movw	r0, #41228	; 0xa10c
   11e94:	movt	r0, #2
   11e98:	ldr	r4, [r0]
   11e9c:	add	r1, r4, #1
   11ea0:	cmp	r1, #2
   11ea4:	movcc	r1, #0
   11ea8:	strcc	r1, [r0]
   11eac:	ldrcc	r4, [r0, #4]
   11eb0:	addcc	r2, r4, #1
   11eb4:	cmpcc	r2, #2
   11eb8:	bcs	12b44 <__assert_fail@plt+0x1830>
   11ebc:	str	r1, [r0, #4]
   11ec0:	movw	r6, #41228	; 0xa10c
   11ec4:	ldr	r0, [sp, #36]	; 0x24
   11ec8:	movw	sl, #41352	; 0xa188
   11ecc:	movt	r6, #2
   11ed0:	movt	sl, #2
   11ed4:	ldr	r4, [r6]
   11ed8:	cmp	r0, #0
   11edc:	beq	11f0c <__assert_fail@plt+0xbf8>
   11ee0:	cmp	r4, #1
   11ee4:	cmnne	r4, #1
   11ee8:	bne	12b4c <__assert_fail@plt+0x1838>
   11eec:	mov	r0, #1
   11ef0:	str	r0, [r6]
   11ef4:	ldr	r4, [r6, #4]
   11ef8:	cmn	r4, #1
   11efc:	cmpne	r4, #1
   11f00:	bne	12b4c <__assert_fail@plt+0x1838>
   11f04:	str	r0, [r6, #4]
   11f08:	b	11f24 <__assert_fail@plt+0xc10>
   11f0c:	cmn	r4, #1
   11f10:	moveq	r0, #0
   11f14:	streq	r0, [r6]
   11f18:	ldr	r0, [r6, #4]
   11f1c:	cmn	r0, #1
   11f20:	beq	12988 <__assert_fail@plt+0x1674>
   11f24:	ldr	r4, [sl, #28]
   11f28:	movw	r1, #39204	; 0x9924
   11f2c:	movt	r1, #1
   11f30:	mov	r0, r4
   11f34:	bl	1108c <strcmp@plt>
   11f38:	cmp	r0, #0
   11f3c:	beq	11f60 <__assert_fail@plt+0xc4c>
   11f40:	movw	r1, #38734	; 0x974e
   11f44:	mov	r0, r4
   11f48:	movt	r1, #1
   11f4c:	bl	13b7c <__assert_fail@plt+0x2868>
   11f50:	mov	r4, r0
   11f54:	cmp	r4, #0
   11f58:	bne	11f74 <__assert_fail@plt+0xc60>
   11f5c:	b	12aa0 <__assert_fail@plt+0x178c>
   11f60:	movw	r0, #41336	; 0xa178
   11f64:	movt	r0, #2
   11f68:	ldr	r4, [r0]
   11f6c:	cmp	r4, #0
   11f70:	beq	12aa0 <__assert_fail@plt+0x178c>
   11f74:	ldr	r5, [sl, #32]
   11f78:	movw	r1, #39204	; 0x9924
   11f7c:	movt	r1, #1
   11f80:	mov	r0, r5
   11f84:	bl	1108c <strcmp@plt>
   11f88:	cmp	r0, #0
   11f8c:	beq	12160 <__assert_fail@plt+0xe4c>
   11f90:	movw	r1, #38734	; 0x974e
   11f94:	mov	r0, r5
   11f98:	movt	r1, #1
   11f9c:	bl	13b7c <__assert_fail@plt+0x2868>
   11fa0:	mov	r5, r0
   11fa4:	cmp	r5, #0
   11fa8:	beq	12ab0 <__assert_fail@plt+0x179c>
   11fac:	cmp	r4, r5
   11fb0:	beq	12b7c <__assert_fail@plt+0x1868>
   11fb4:	mov	r0, r4
   11fb8:	mov	r1, #2
   11fbc:	str	r4, [sp, #24]
   11fc0:	bl	13a3c <__assert_fail@plt+0x2728>
   11fc4:	mov	r0, r5
   11fc8:	mov	r1, #2
   11fcc:	bl	13a3c <__assert_fail@plt+0x2728>
   11fd0:	sub	r0, fp, #40	; 0x28
   11fd4:	mov	r7, #0
   11fd8:	mov	r2, #4
   11fdc:	add	r1, r0, #4
   11fe0:	mov	r0, #0
   11fe4:	str	r7, [fp, #-36]	; 0xffffffdc
   11fe8:	str	r7, [fp, #-40]	; 0xffffffd8
   11fec:	str	r7, [fp, #-32]	; 0xffffffe0
   11ff0:	str	r1, [sp, #12]
   11ff4:	bl	168c8 <__assert_fail@plt+0x55b4>
   11ff8:	str	r0, [fp, #-32]	; 0xffffffe0
   11ffc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12000:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12004:	cmp	r1, r2
   12008:	bcs	12034 <__assert_fail@plt+0xd20>
   1200c:	str	r7, [r0, r1, lsl #2]
   12010:	add	r0, r1, #1
   12014:	cmp	r0, r2
   12018:	bcs	12034 <__assert_fail@plt+0xd20>
   1201c:	mov	r3, #0
   12020:	ldr	r7, [fp, #-32]	; 0xffffffe0
   12024:	str	r3, [r7, r0, lsl #2]
   12028:	add	r0, r0, #1
   1202c:	cmp	r2, r0
   12030:	bne	12020 <__assert_fail@plt+0xd0c>
   12034:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12038:	mov	r2, #1
   1203c:	add	r1, r0, r1, lsl #2
   12040:	ldr	r0, [sp, #24]
   12044:	bl	1333c <__assert_fail@plt+0x2028>
   12048:	cmp	r0, #0
   1204c:	mov	r7, #0
   12050:	mov	r2, #4
   12054:	ldrne	r0, [fp, #-40]	; 0xffffffd8
   12058:	str	r7, [fp, #-48]	; 0xffffffd0
   1205c:	str	r7, [fp, #-52]	; 0xffffffcc
   12060:	str	r7, [fp, #-44]	; 0xffffffd4
   12064:	addne	r0, r0, #1
   12068:	strne	r0, [fp, #-40]	; 0xffffffd8
   1206c:	sub	r0, fp, #52	; 0x34
   12070:	add	r1, r0, #4
   12074:	mov	r0, #0
   12078:	str	r1, [sp, #20]
   1207c:	bl	168c8 <__assert_fail@plt+0x55b4>
   12080:	str	r0, [fp, #-44]	; 0xffffffd4
   12084:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12088:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1208c:	cmp	r1, r2
   12090:	bcs	120bc <__assert_fail@plt+0xda8>
   12094:	str	r7, [r0, r1, lsl #2]
   12098:	add	r0, r1, #1
   1209c:	cmp	r0, r2
   120a0:	bcs	120bc <__assert_fail@plt+0xda8>
   120a4:	mov	r3, #0
   120a8:	ldr	r7, [fp, #-44]	; 0xffffffd4
   120ac:	str	r3, [r7, r0, lsl #2]
   120b0:	add	r0, r0, #1
   120b4:	cmp	r2, r0
   120b8:	bne	120a8 <__assert_fail@plt+0xd94>
   120bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   120c0:	mov	r2, #2
   120c4:	add	r1, r0, r1, lsl #2
   120c8:	mov	r0, r5
   120cc:	bl	1333c <__assert_fail@plt+0x2028>
   120d0:	cmp	r0, #0
   120d4:	ldr	r4, [sp, #24]
   120d8:	ldr	r7, [sp, #12]
   120dc:	ldrne	r0, [fp, #-52]	; 0xffffffcc
   120e0:	addne	r0, r0, #1
   120e4:	strne	r0, [fp, #-52]	; 0xffffffcc
   120e8:	ldrb	r0, [sl, #6]
   120ec:	cmp	r0, #1
   120f0:	bne	1212c <__assert_fail@plt+0xe18>
   120f4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   120f8:	mov	r0, #0
   120fc:	cmp	r1, #0
   12100:	mov	r1, #0
   12104:	ldrne	r1, [fp, #-32]	; 0xffffffe0
   12108:	ldrne	r1, [r1]
   1210c:	ldrne	r1, [r1, #12]
   12110:	str	r1, [sl, #20]
   12114:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12118:	cmp	r1, #0
   1211c:	ldrne	r0, [fp, #-44]	; 0xffffffd4
   12120:	ldrne	r0, [r0]
   12124:	ldrne	r0, [r0, #12]
   12128:	str	r0, [sl, #24]
   1212c:	ldrb	r0, [sl, #8]
   12130:	cmp	r0, #1
   12134:	bne	122cc <__assert_fail@plt+0xfb8>
   12138:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1213c:	cmp	r0, #0
   12140:	beq	12178 <__assert_fail@plt+0xe64>
   12144:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12148:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1214c:	ldr	r0, [r0]
   12150:	cmp	r1, #0
   12154:	bne	12188 <__assert_fail@plt+0xe74>
   12158:	add	r1, sl, #80	; 0x50
   1215c:	b	12190 <__assert_fail@plt+0xe7c>
   12160:	movw	r0, #41336	; 0xa178
   12164:	movt	r0, #2
   12168:	ldr	r5, [r0]
   1216c:	cmp	r5, #0
   12170:	bne	11fac <__assert_fail@plt+0xc98>
   12174:	b	12ab0 <__assert_fail@plt+0x179c>
   12178:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1217c:	cmp	r0, #0
   12180:	beq	122cc <__assert_fail@plt+0xfb8>
   12184:	add	r0, sl, #80	; 0x50
   12188:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1218c:	ldr	r1, [r1]
   12190:	bl	13048 <__assert_fail@plt+0x1d34>
   12194:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12198:	mov	r1, #0
   1219c:	str	r1, [sl, #44]	; 0x2c
   121a0:	str	r1, [sl, #48]	; 0x30
   121a4:	cmp	r0, #0
   121a8:	beq	12234 <__assert_fail@plt+0xf20>
   121ac:	str	r1, [fp, #-40]	; 0xffffffd8
   121b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   121b4:	cmp	r0, #0
   121b8:	bne	12210 <__assert_fail@plt+0xefc>
   121bc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   121c0:	mov	r1, r7
   121c4:	mov	r2, #4
   121c8:	bl	168c8 <__assert_fail@plt+0x55b4>
   121cc:	str	r0, [fp, #-32]	; 0xffffffe0
   121d0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   121d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   121d8:	cmp	r1, r2
   121dc:	bcs	12210 <__assert_fail@plt+0xefc>
   121e0:	mov	r3, #0
   121e4:	str	r3, [r0, r1, lsl #2]
   121e8:	add	r0, r1, #1
   121ec:	cmp	r0, r2
   121f0:	bcs	12210 <__assert_fail@plt+0xefc>
   121f4:	ldr	r7, [fp, #-32]	; 0xffffffe0
   121f8:	str	r3, [r7, r0, lsl #2]
   121fc:	add	r0, r0, #1
   12200:	cmp	r2, r0
   12204:	bne	121f4 <__assert_fail@plt+0xee0>
   12208:	ldr	r4, [sp, #24]
   1220c:	ldr	r7, [sp, #12]
   12210:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12214:	mov	r2, #1
   12218:	add	r1, r0, r1, lsl #2
   1221c:	mov	r0, r4
   12220:	bl	1333c <__assert_fail@plt+0x2028>
   12224:	cmp	r0, #0
   12228:	ldrne	r0, [fp, #-40]	; 0xffffffd8
   1222c:	addne	r0, r0, #1
   12230:	strne	r0, [fp, #-40]	; 0xffffffd8
   12234:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12238:	cmp	r0, #0
   1223c:	beq	122cc <__assert_fail@plt+0xfb8>
   12240:	mov	r1, #0
   12244:	str	r1, [fp, #-52]	; 0xffffffcc
   12248:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1224c:	cmp	r0, #0
   12250:	bne	122a8 <__assert_fail@plt+0xf94>
   12254:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12258:	ldr	r1, [sp, #20]
   1225c:	mov	r2, #4
   12260:	bl	168c8 <__assert_fail@plt+0x55b4>
   12264:	str	r0, [fp, #-44]	; 0xffffffd4
   12268:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1226c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12270:	cmp	r1, r2
   12274:	bcs	122a8 <__assert_fail@plt+0xf94>
   12278:	mov	r3, #0
   1227c:	str	r3, [r0, r1, lsl #2]
   12280:	add	r0, r1, #1
   12284:	cmp	r0, r2
   12288:	bcs	122a8 <__assert_fail@plt+0xf94>
   1228c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12290:	str	r3, [r7, r0, lsl #2]
   12294:	add	r0, r0, #1
   12298:	cmp	r2, r0
   1229c:	bne	1228c <__assert_fail@plt+0xf78>
   122a0:	ldr	r4, [sp, #24]
   122a4:	ldr	r7, [sp, #12]
   122a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   122ac:	mov	r2, #2
   122b0:	add	r1, r0, r1, lsl #2
   122b4:	mov	r0, r5
   122b8:	bl	1333c <__assert_fail@plt+0x2028>
   122bc:	cmp	r0, #0
   122c0:	ldrne	r0, [fp, #-52]	; 0xffffffcc
   122c4:	addne	r0, r0, #1
   122c8:	strne	r0, [fp, #-52]	; 0xffffffcc
   122cc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   122d0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   122d4:	cmp	r1, #0
   122d8:	cmpne	r0, #0
   122dc:	beq	126c0 <__assert_fail@plt+0x13ac>
   122e0:	add	r0, sl, #80	; 0x50
   122e4:	mov	r9, #0
   122e8:	str	r0, [sp, #16]
   122ec:	ldm	r6, {r2, r3}
   122f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   122f4:	ldr	r1, [r0]
   122f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   122fc:	ldr	r0, [r0]
   12300:	bl	1325c <__assert_fail@plt+0x1f48>
   12304:	cmn	r0, #1
   12308:	ble	12508 <__assert_fail@plt+0x11f4>
   1230c:	cmp	r0, #0
   12310:	beq	123b4 <__assert_fail@plt+0x10a0>
   12314:	ldrb	r0, [sl, #4]
   12318:	cmp	r0, #1
   1231c:	bne	12330 <__assert_fail@plt+0x101c>
   12320:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12324:	ldr	r1, [r0]
   12328:	ldr	r0, [sp, #16]
   1232c:	bl	13048 <__assert_fail@plt+0x1d34>
   12330:	mov	r1, #0
   12334:	str	r1, [fp, #-52]	; 0xffffffcc
   12338:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1233c:	cmp	r0, #0
   12340:	bne	1238c <__assert_fail@plt+0x1078>
   12344:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12348:	ldr	r1, [sp, #20]
   1234c:	mov	r2, #4
   12350:	bl	168c8 <__assert_fail@plt+0x55b4>
   12354:	str	r0, [fp, #-44]	; 0xffffffd4
   12358:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1235c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12360:	cmp	r1, r2
   12364:	bcs	1238c <__assert_fail@plt+0x1078>
   12368:	str	r9, [r0, r1, lsl #2]
   1236c:	add	r0, r1, #1
   12370:	cmp	r0, r2
   12374:	bcs	1238c <__assert_fail@plt+0x1078>
   12378:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1237c:	str	r9, [r3, r0, lsl #2]
   12380:	add	r0, r0, #1
   12384:	cmp	r2, r0
   12388:	bne	12378 <__assert_fail@plt+0x1064>
   1238c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12390:	mov	r2, #2
   12394:	add	r1, r0, r1, lsl #2
   12398:	mov	r0, r5
   1239c:	bl	1333c <__assert_fail@plt+0x2028>
   123a0:	cmp	r0, #0
   123a4:	ldrne	r0, [fp, #-52]	; 0xffffffcc
   123a8:	addne	r0, r0, #1
   123ac:	strne	r0, [fp, #-52]	; 0xffffffcc
   123b0:	b	125a4 <__assert_fail@plt+0x1290>
   123b4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   123b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   123bc:	cmp	r1, r0
   123c0:	bne	1240c <__assert_fail@plt+0x10f8>
   123c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   123c8:	mov	r1, r7
   123cc:	mov	r2, #4
   123d0:	bl	168c8 <__assert_fail@plt+0x55b4>
   123d4:	str	r0, [fp, #-32]	; 0xffffffe0
   123d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   123dc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   123e0:	cmp	r1, r2
   123e4:	bcs	1240c <__assert_fail@plt+0x10f8>
   123e8:	str	r9, [r0, r1, lsl #2]
   123ec:	add	r0, r1, #1
   123f0:	cmp	r0, r2
   123f4:	bcs	1240c <__assert_fail@plt+0x10f8>
   123f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   123fc:	str	r9, [r3, r0, lsl #2]
   12400:	add	r0, r0, #1
   12404:	cmp	r2, r0
   12408:	bne	123f8 <__assert_fail@plt+0x10e4>
   1240c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12410:	mov	r2, #1
   12414:	mov	r8, #1
   12418:	add	r1, r0, r1, lsl #2
   1241c:	mov	r0, r4
   12420:	bl	1333c <__assert_fail@plt+0x2028>
   12424:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12428:	cmp	r0, #0
   1242c:	add	r2, r1, #1
   12430:	str	r2, [fp, #-40]	; 0xffffffd8
   12434:	beq	1245c <__assert_fail@plt+0x1148>
   12438:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1243c:	ldr	r0, [r0, r1, lsl #2]
   12440:	ldm	r6, {r2, r3}
   12444:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12448:	ldr	r1, [r1]
   1244c:	bl	1325c <__assert_fail@plt+0x1f48>
   12450:	cmp	r0, #0
   12454:	beq	123b4 <__assert_fail@plt+0x10a0>
   12458:	mov	r8, #0
   1245c:	ldr	r4, [sp, #20]
   12460:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12464:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12468:	cmp	r1, r0
   1246c:	bne	124b8 <__assert_fail@plt+0x11a4>
   12470:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12474:	mov	r1, r4
   12478:	mov	r2, #4
   1247c:	bl	168c8 <__assert_fail@plt+0x55b4>
   12480:	str	r0, [fp, #-44]	; 0xffffffd4
   12484:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12488:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1248c:	cmp	r1, r2
   12490:	bcs	124b8 <__assert_fail@plt+0x11a4>
   12494:	str	r9, [r0, r1, lsl #2]
   12498:	add	r0, r1, #1
   1249c:	cmp	r0, r2
   124a0:	bcs	124b8 <__assert_fail@plt+0x11a4>
   124a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   124a8:	str	r9, [r3, r0, lsl #2]
   124ac:	add	r0, r0, #1
   124b0:	cmp	r2, r0
   124b4:	bne	124a4 <__assert_fail@plt+0x1190>
   124b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124bc:	mov	r2, #2
   124c0:	add	r1, r0, r1, lsl #2
   124c4:	mov	r0, r5
   124c8:	bl	1333c <__assert_fail@plt+0x2028>
   124cc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   124d0:	cmp	r0, #0
   124d4:	add	r2, r1, #1
   124d8:	str	r2, [fp, #-52]	; 0xffffffcc
   124dc:	beq	125b0 <__assert_fail@plt+0x129c>
   124e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124e4:	ldr	r1, [r0, r1, lsl #2]
   124e8:	ldm	r6, {r2, r3}
   124ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   124f0:	ldr	r0, [r0]
   124f4:	bl	1325c <__assert_fail@plt+0x1f48>
   124f8:	cmp	r0, #0
   124fc:	beq	12460 <__assert_fail@plt+0x114c>
   12500:	mov	sl, #0
   12504:	b	125b4 <__assert_fail@plt+0x12a0>
   12508:	ldrb	r0, [sl, #3]
   1250c:	cmp	r0, #1
   12510:	bne	12524 <__assert_fail@plt+0x1210>
   12514:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12518:	ldr	r1, [sp, #16]
   1251c:	ldr	r0, [r0]
   12520:	bl	13048 <__assert_fail@plt+0x1d34>
   12524:	mov	r1, #0
   12528:	str	r1, [fp, #-40]	; 0xffffffd8
   1252c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12530:	cmp	r0, #0
   12534:	bne	12580 <__assert_fail@plt+0x126c>
   12538:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1253c:	mov	r1, r7
   12540:	mov	r2, #4
   12544:	bl	168c8 <__assert_fail@plt+0x55b4>
   12548:	str	r0, [fp, #-32]	; 0xffffffe0
   1254c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12550:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12554:	cmp	r1, r2
   12558:	bcs	12580 <__assert_fail@plt+0x126c>
   1255c:	str	r9, [r0, r1, lsl #2]
   12560:	add	r0, r1, #1
   12564:	cmp	r0, r2
   12568:	bcs	12580 <__assert_fail@plt+0x126c>
   1256c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12570:	str	r9, [r3, r0, lsl #2]
   12574:	add	r0, r0, #1
   12578:	cmp	r2, r0
   1257c:	bne	1256c <__assert_fail@plt+0x1258>
   12580:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12584:	mov	r2, #1
   12588:	add	r1, r0, r1, lsl #2
   1258c:	mov	r0, r4
   12590:	bl	1333c <__assert_fail@plt+0x2028>
   12594:	cmp	r0, #0
   12598:	ldrne	r0, [fp, #-40]	; 0xffffffd8
   1259c:	addne	r0, r0, #1
   125a0:	strne	r0, [fp, #-40]	; 0xffffffd8
   125a4:	mov	r0, #1
   125a8:	strb	r0, [sl, #2]
   125ac:	b	126ac <__assert_fail@plt+0x1398>
   125b0:	mov	sl, #1
   125b4:	movw	r0, #41352	; 0xa188
   125b8:	movt	r0, #2
   125bc:	ldrb	r0, [r0, #1]
   125c0:	cmp	r0, #1
   125c4:	bne	1262c <__assert_fail@plt+0x1318>
   125c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   125cc:	cmp	r0, #1
   125d0:	beq	1262c <__assert_fail@plt+0x1318>
   125d4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   125d8:	mov	r7, #0
   125dc:	mov	r1, #1
   125e0:	cmp	r2, #1
   125e4:	beq	12618 <__assert_fail@plt+0x1304>
   125e8:	mov	r4, #0
   125ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   125f0:	ldr	r1, [r0, r4, lsl #2]
   125f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   125f8:	ldr	r0, [r0, r7, lsl #2]
   125fc:	bl	13048 <__assert_fail@plt+0x1d34>
   12600:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12604:	add	r4, r4, #1
   12608:	sub	r0, r1, #1
   1260c:	cmp	r4, r0
   12610:	bcc	125ec <__assert_fail@plt+0x12d8>
   12614:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12618:	add	r7, r7, #1
   1261c:	sub	r2, r0, #1
   12620:	cmp	r7, r2
   12624:	mov	r2, r1
   12628:	bcc	125dc <__assert_fail@plt+0x12c8>
   1262c:	mov	r0, #0
   12630:	cmp	r8, #0
   12634:	mov	r1, #0
   12638:	bne	12664 <__assert_fail@plt+0x1350>
   1263c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12640:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12644:	mvn	r3, #3
   12648:	add	r1, r3, r1, lsl #2
   1264c:	ldr	r7, [r2]
   12650:	ldr	r3, [r2, r1]
   12654:	str	r3, [r2]
   12658:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1265c:	str	r7, [r2, r1]
   12660:	mov	r1, #1
   12664:	cmp	sl, #0
   12668:	str	r1, [fp, #-40]	; 0xffffffd8
   1266c:	bne	12698 <__assert_fail@plt+0x1384>
   12670:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12674:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12678:	mvn	r2, #3
   1267c:	add	r0, r2, r0, lsl #2
   12680:	ldr	r3, [r1]
   12684:	ldr	r2, [r1, r0]
   12688:	str	r2, [r1]
   1268c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12690:	str	r3, [r1, r0]
   12694:	mov	r0, #1
   12698:	ldr	r4, [sp, #24]
   1269c:	ldr	r7, [sp, #12]
   126a0:	movw	sl, #41352	; 0xa188
   126a4:	str	r0, [fp, #-52]	; 0xffffffcc
   126a8:	movt	sl, #2
   126ac:	ldr	r1, [fp, #-40]	; 0xffffffd8
   126b0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   126b4:	cmp	r1, #0
   126b8:	cmpne	r0, #0
   126bc:	bne	122ec <__assert_fail@plt+0xfd8>
   126c0:	ldr	r2, [sl, #12]
   126c4:	mov	r8, #0
   126c8:	str	r8, [sp, #56]	; 0x38
   126cc:	cmp	r2, #2
   126d0:	beq	126f0 <__assert_fail@plt+0x13dc>
   126d4:	ldrb	r2, [sl, #9]
   126d8:	ldrb	r3, [sl, #10]
   126dc:	clz	r3, r3
   126e0:	clz	r2, r2
   126e4:	lsr	r3, r3, #5
   126e8:	lsr	r2, r2, #5
   126ec:	orr	r8, r2, r3
   126f0:	cmp	r1, #0
   126f4:	ldrbne	r1, [sl, #3]
   126f8:	orrsne	r2, r8, r1
   126fc:	bne	12868 <__assert_fail@plt+0x1554>
   12700:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12704:	cmp	r0, #0
   12708:	ldrbne	r0, [sl, #4]
   1270c:	orrsne	r1, r8, r0
   12710:	bne	128f8 <__assert_fail@plt+0x15e4>
   12714:	ldr	r6, [sp, #56]	; 0x38
   12718:	cmp	r6, #0
   1271c:	beq	1273c <__assert_fail@plt+0x1428>
   12720:	ldr	r0, [r6, #20]
   12724:	bl	13c30 <__assert_fail@plt+0x291c>
   12728:	mov	r4, #0
   1272c:	str	r4, [r6, #20]
   12730:	ldr	r0, [r6, #8]
   12734:	bl	13c30 <__assert_fail@plt+0x291c>
   12738:	str	r4, [r6, #8]
   1273c:	mov	r0, r6
   12740:	bl	13c30 <__assert_fail@plt+0x291c>
   12744:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12748:	cmp	r0, #0
   1274c:	beq	127a0 <__assert_fail@plt+0x148c>
   12750:	mov	r6, #0
   12754:	mov	r7, #0
   12758:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1275c:	ldr	r4, [r0, r7, lsl #2]!
   12760:	cmp	r4, #0
   12764:	beq	12788 <__assert_fail@plt+0x1474>
   12768:	ldr	r0, [r4, #20]
   1276c:	bl	13c30 <__assert_fail@plt+0x291c>
   12770:	str	r6, [r4, #20]
   12774:	ldr	r0, [r4, #8]
   12778:	bl	13c30 <__assert_fail@plt+0x291c>
   1277c:	str	r6, [r4, #8]
   12780:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12784:	add	r0, r0, r7, lsl #2
   12788:	ldr	r0, [r0]
   1278c:	bl	13c30 <__assert_fail@plt+0x291c>
   12790:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12794:	add	r7, r7, #1
   12798:	cmp	r7, r0
   1279c:	bcc	12758 <__assert_fail@plt+0x1444>
   127a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127a4:	bl	13c30 <__assert_fail@plt+0x291c>
   127a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   127ac:	cmp	r0, #0
   127b0:	beq	12804 <__assert_fail@plt+0x14f0>
   127b4:	mov	r6, #0
   127b8:	mov	r7, #0
   127bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   127c0:	ldr	r4, [r0, r7, lsl #2]!
   127c4:	cmp	r4, #0
   127c8:	beq	127ec <__assert_fail@plt+0x14d8>
   127cc:	ldr	r0, [r4, #20]
   127d0:	bl	13c30 <__assert_fail@plt+0x291c>
   127d4:	str	r6, [r4, #20]
   127d8:	ldr	r0, [r4, #8]
   127dc:	bl	13c30 <__assert_fail@plt+0x291c>
   127e0:	str	r6, [r4, #8]
   127e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   127e8:	add	r0, r0, r7, lsl #2
   127ec:	ldr	r0, [r0]
   127f0:	bl	13c30 <__assert_fail@plt+0x291c>
   127f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   127f8:	add	r7, r7, #1
   127fc:	cmp	r7, r0
   12800:	bcc	127bc <__assert_fail@plt+0x14a8>
   12804:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12808:	bl	13c30 <__assert_fail@plt+0x291c>
   1280c:	ldr	r0, [sp, #24]
   12810:	bl	13a78 <__assert_fail@plt+0x2764>
   12814:	cmp	r0, #0
   12818:	bne	12aa0 <__assert_fail@plt+0x178c>
   1281c:	mov	r0, r5
   12820:	bl	13a78 <__assert_fail@plt+0x2764>
   12824:	cmp	r0, #0
   12828:	bne	12ab0 <__assert_fail@plt+0x179c>
   1282c:	ldrb	r0, [sl, #9]
   12830:	ldrb	r1, [sl, #10]
   12834:	orrs	r0, r1, r0
   12838:	moveq	r0, #0
   1283c:	subeq	sp, fp, #28
   12840:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12844:	movw	r1, #38347	; 0x95cb
   12848:	movt	r1, #1
   1284c:	mov	r0, #0
   12850:	mov	r2, #5
   12854:	bl	11104 <dcgettext@plt>
   12858:	mov	r2, r0
   1285c:	mov	r0, #1
   12860:	mov	r1, #0
   12864:	bl	11170 <error@plt>
   12868:	cmp	r1, #0
   1286c:	beq	12884 <__assert_fail@plt+0x1570>
   12870:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12874:	add	r1, sl, #80	; 0x50
   12878:	ldr	r0, [r0]
   1287c:	bl	13048 <__assert_fail@plt+0x1d34>
   12880:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12884:	cmp	r0, #0
   12888:	ldr	r0, [sp, #24]
   1288c:	mov	r2, #1
   12890:	movne	r1, #1
   12894:	strbne	r1, [sl, #2]
   12898:	add	r1, sp, #56	; 0x38
   1289c:	bl	1333c <__assert_fail@plt+0x2028>
   128a0:	cmp	r0, #0
   128a4:	beq	12700 <__assert_fail@plt+0x13ec>
   128a8:	add	r6, sl, #80	; 0x50
   128ac:	add	r7, sp, #56	; 0x38
   128b0:	ldrb	r0, [sl, #3]
   128b4:	cmp	r0, #1
   128b8:	bne	128c8 <__assert_fail@plt+0x15b4>
   128bc:	ldr	r0, [sp, #56]	; 0x38
   128c0:	mov	r1, r6
   128c4:	bl	13048 <__assert_fail@plt+0x1d34>
   128c8:	ldrb	r0, [sl, #9]
   128cc:	cmp	r0, #0
   128d0:	ldrbne	r0, [sl, #3]
   128d4:	cmpne	r0, #1
   128d8:	bne	12700 <__assert_fail@plt+0x13ec>
   128dc:	ldr	r0, [sp, #24]
   128e0:	mov	r1, r7
   128e4:	mov	r2, #1
   128e8:	bl	1333c <__assert_fail@plt+0x2028>
   128ec:	cmp	r0, #0
   128f0:	bne	128b0 <__assert_fail@plt+0x159c>
   128f4:	b	12700 <__assert_fail@plt+0x13ec>
   128f8:	cmp	r0, #0
   128fc:	beq	12910 <__assert_fail@plt+0x15fc>
   12900:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12904:	ldr	r1, [r0]
   12908:	add	r0, sl, #80	; 0x50
   1290c:	bl	13048 <__assert_fail@plt+0x1d34>
   12910:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12914:	add	r1, sp, #56	; 0x38
   12918:	mov	r2, #2
   1291c:	cmp	r0, #0
   12920:	movne	r0, #1
   12924:	strbne	r0, [sl, #2]
   12928:	mov	r0, r5
   1292c:	bl	1333c <__assert_fail@plt+0x2028>
   12930:	cmp	r0, #0
   12934:	beq	12714 <__assert_fail@plt+0x1400>
   12938:	add	r6, sl, #80	; 0x50
   1293c:	add	r7, sp, #56	; 0x38
   12940:	ldrb	r0, [sl, #4]
   12944:	cmp	r0, #1
   12948:	bne	12958 <__assert_fail@plt+0x1644>
   1294c:	ldr	r1, [sp, #56]	; 0x38
   12950:	mov	r0, r6
   12954:	bl	13048 <__assert_fail@plt+0x1d34>
   12958:	ldrb	r0, [sl, #10]
   1295c:	cmp	r0, #0
   12960:	ldrbne	r0, [sl, #4]
   12964:	cmpne	r0, #1
   12968:	bne	12714 <__assert_fail@plt+0x1400>
   1296c:	mov	r0, r5
   12970:	mov	r1, r7
   12974:	mov	r2, #2
   12978:	bl	1333c <__assert_fail@plt+0x2028>
   1297c:	cmp	r0, #0
   12980:	bne	12940 <__assert_fail@plt+0x162c>
   12984:	b	12714 <__assert_fail@plt+0x1400>
   12988:	mov	r0, #0
   1298c:	b	11f04 <__assert_fail@plt+0xbf0>
   12990:	movw	r0, #41240	; 0xa118
   12994:	movw	r2, #38257	; 0x9571
   12998:	mov	r1, #0
   1299c:	movt	r0, #2
   129a0:	movt	r2, #1
   129a4:	str	r1, [sp, #4]
   129a8:	movw	r1, #38076	; 0x94bc
   129ac:	ldr	r3, [r0]
   129b0:	movw	r0, #41340	; 0xa17c
   129b4:	str	r2, [sp]
   129b8:	movw	r2, #38243	; 0x9563
   129bc:	movt	r1, #1
   129c0:	movt	r0, #2
   129c4:	movt	r2, #1
   129c8:	ldr	r0, [r0]
   129cc:	bl	164e8 <__assert_fail@plt+0x51d4>
   129d0:	mov	r0, #0
   129d4:	bl	111dc <exit@plt>
   129d8:	mov	r0, #0
   129dc:	bl	11410 <__assert_fail@plt+0xfc>
   129e0:	movw	r1, #38125	; 0x94ed
   129e4:	movt	r1, #1
   129e8:	mov	r0, #0
   129ec:	mov	r2, #5
   129f0:	bl	11104 <dcgettext@plt>
   129f4:	mov	r4, r0
   129f8:	ldr	r0, [r5]
   129fc:	bl	15f94 <__assert_fail@plt+0x4c80>
   12a00:	mov	r3, r0
   12a04:	mov	r0, #1
   12a08:	mov	r1, #0
   12a0c:	mov	r2, r4
   12a10:	bl	11170 <error@plt>
   12a14:	movw	r1, #38749	; 0x975d
   12a18:	mov	r0, #0
   12a1c:	mov	r2, #5
   12a20:	movt	r1, #1
   12a24:	bl	11104 <dcgettext@plt>
   12a28:	mov	r2, r0
   12a2c:	add	r3, r7, #1
   12a30:	str	r5, [sp]
   12a34:	mov	r0, #1
   12a38:	mov	r1, #0
   12a3c:	bl	11170 <error@plt>
   12a40:	movw	r1, #38749	; 0x975d
   12a44:	mov	r0, #0
   12a48:	mov	r2, #5
   12a4c:	movt	r1, #1
   12a50:	bl	11104 <dcgettext@plt>
   12a54:	mov	r2, r0
   12a58:	str	r7, [sp]
   12a5c:	add	r3, r5, #1
   12a60:	mov	r0, #1
   12a64:	mov	r1, #0
   12a68:	bl	11170 <error@plt>
   12a6c:	cmp	r0, #0
   12a70:	bne	12ba8 <__assert_fail@plt+0x1894>
   12a74:	movw	r1, #38270	; 0x957e
   12a78:	mov	r0, #0
   12a7c:	mov	r2, #5
   12a80:	movt	r1, #1
   12a84:	bl	11104 <dcgettext@plt>
   12a88:	mov	r2, r0
   12a8c:	mov	r0, #0
   12a90:	mov	r1, #0
   12a94:	bl	11170 <error@plt>
   12a98:	mov	r0, #1
   12a9c:	bl	11410 <__assert_fail@plt+0xfc>
   12aa0:	bl	1120c <__errno_location@plt>
   12aa4:	ldr	r4, [r0]
   12aa8:	ldr	r2, [sl, #28]
   12aac:	b	12abc <__assert_fail@plt+0x17a8>
   12ab0:	bl	1120c <__errno_location@plt>
   12ab4:	ldr	r4, [r0]
   12ab8:	ldr	r2, [sl, #32]
   12abc:	mov	r0, #0
   12ac0:	mov	r1, #3
   12ac4:	bl	15ce8 <__assert_fail@plt+0x49d4>
   12ac8:	movw	r2, #38850	; 0x97c2
   12acc:	mov	r3, r0
   12ad0:	mov	r0, #1
   12ad4:	mov	r1, r4
   12ad8:	movt	r2, #1
   12adc:	bl	11170 <error@plt>
   12ae0:	movw	r1, #38202	; 0x953a
   12ae4:	movt	r1, #1
   12ae8:	b	129e8 <__assert_fail@plt+0x16d4>
   12aec:	movw	r1, #38150	; 0x9506
   12af0:	movt	r1, #1
   12af4:	b	1284c <__assert_fail@plt+0x1538>
   12af8:	movw	r1, #38225	; 0x9551
   12afc:	movt	r1, #1
   12b00:	b	1284c <__assert_fail@plt+0x1538>
   12b04:	movw	r1, #38125	; 0x94ed
   12b08:	mov	r0, #0
   12b0c:	mov	r2, #5
   12b10:	movt	r1, #1
   12b14:	bl	11104 <dcgettext@plt>
   12b18:	mov	r4, r0
   12b1c:	mov	r0, r7
   12b20:	b	129fc <__assert_fail@plt+0x16e8>
   12b24:	movw	r1, #38125	; 0x94ed
   12b28:	mov	r0, #0
   12b2c:	mov	r2, #5
   12b30:	movt	r1, #1
   12b34:	bl	11104 <dcgettext@plt>
   12b38:	mov	r4, r0
   12b3c:	mov	r0, sl
   12b40:	b	129fc <__assert_fail@plt+0x16e8>
   12b44:	mov	r5, #1
   12b48:	b	12b50 <__assert_fail@plt+0x183c>
   12b4c:	mov	r5, #2
   12b50:	movw	r1, #38749	; 0x975d
   12b54:	mov	r0, #0
   12b58:	mov	r2, #5
   12b5c:	movt	r1, #1
   12b60:	bl	11104 <dcgettext@plt>
   12b64:	mov	r2, r0
   12b68:	str	r5, [sp]
   12b6c:	add	r3, r4, #1
   12b70:	mov	r0, #1
   12b74:	mov	r1, #0
   12b78:	bl	11170 <error@plt>
   12b7c:	bl	1120c <__errno_location@plt>
   12b80:	ldr	r4, [r0]
   12b84:	movw	r1, #38311	; 0x95a7
   12b88:	mov	r0, #0
   12b8c:	mov	r2, #5
   12b90:	movt	r1, #1
   12b94:	bl	11104 <dcgettext@plt>
   12b98:	mov	r2, r0
   12b9c:	mov	r0, #1
   12ba0:	mov	r1, r4
   12ba4:	bl	11170 <error@plt>
   12ba8:	movw	r1, #38286	; 0x958e
   12bac:	mov	r0, #0
   12bb0:	mov	r2, #5
   12bb4:	movt	r1, #1
   12bb8:	bl	11104 <dcgettext@plt>
   12bbc:	mov	r5, r0
   12bc0:	add	r0, r8, r6, lsl #2
   12bc4:	ldr	r0, [r0, #-4]
   12bc8:	bl	15f94 <__assert_fail@plt+0x4c80>
   12bcc:	mov	r3, r0
   12bd0:	mov	r0, #0
   12bd4:	mov	r1, #0
   12bd8:	mov	r2, r5
   12bdc:	bl	11170 <error@plt>
   12be0:	mov	r0, #1
   12be4:	bl	11410 <__assert_fail@plt+0xfc>
   12be8:	push	{r4, r5, r6, sl, fp, lr}
   12bec:	add	fp, sp, #16
   12bf0:	movw	r4, #41352	; 0xa188
   12bf4:	movt	r4, #2
   12bf8:	ldr	r5, [r4, #36]	; 0x24
   12bfc:	cmp	r5, #0
   12c00:	beq	12c28 <__assert_fail@plt+0x1914>
   12c04:	ldr	r0, [r5, #20]
   12c08:	bl	13c30 <__assert_fail@plt+0x291c>
   12c0c:	mov	r6, #0
   12c10:	str	r6, [r5, #20]
   12c14:	ldr	r0, [r5, #8]
   12c18:	bl	13c30 <__assert_fail@plt+0x291c>
   12c1c:	str	r6, [r5, #8]
   12c20:	ldr	r0, [r4, #36]	; 0x24
   12c24:	bl	13c30 <__assert_fail@plt+0x291c>
   12c28:	ldr	r5, [r4, #40]	; 0x28
   12c2c:	cmp	r5, #0
   12c30:	popeq	{r4, r5, r6, sl, fp, pc}
   12c34:	ldr	r0, [r5, #20]
   12c38:	bl	13c30 <__assert_fail@plt+0x291c>
   12c3c:	mov	r6, #0
   12c40:	str	r6, [r5, #20]
   12c44:	ldr	r0, [r5, #8]
   12c48:	bl	13c30 <__assert_fail@plt+0x291c>
   12c4c:	str	r6, [r5, #8]
   12c50:	ldr	r0, [r4, #40]	; 0x28
   12c54:	pop	{r4, r5, r6, sl, fp, lr}
   12c58:	b	13c30 <__assert_fail@plt+0x291c>
   12c5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c60:	add	fp, sp, #28
   12c64:	sub	sp, sp, #20
   12c68:	movw	r9, #41224	; 0xa108
   12c6c:	mov	r6, r0
   12c70:	mov	sl, #0
   12c74:	movt	r9, #2
   12c78:	b	12ca4 <__assert_fail@plt+0x1990>
   12c7c:	mov	r0, #12
   12c80:	bl	1671c <__assert_fail@plt+0x5408>
   12c84:	stm	r0, {r5, r7, sl}
   12c88:	cmp	r4, #0
   12c8c:	mov	r6, r4
   12c90:	ldr	r1, [r9]
   12c94:	str	r0, [r1, #8]
   12c98:	str	r0, [r9]
   12c9c:	subeq	sp, fp, #28
   12ca0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ca4:	movw	r1, #38783	; 0x977f
   12ca8:	mov	r0, r6
   12cac:	movt	r1, #1
   12cb0:	bl	112cc <strpbrk@plt>
   12cb4:	cmp	r0, #0
   12cb8:	mov	r4, #0
   12cbc:	strbne	sl, [r0], #1
   12cc0:	ldrb	r8, [r6]
   12cc4:	movne	r4, r0
   12cc8:	sub	r0, r8, #49	; 0x31
   12ccc:	cmp	r0, #2
   12cd0:	bcs	12d34 <__assert_fail@plt+0x1a20>
   12cd4:	ldrb	r0, [r6, #1]
   12cd8:	cmp	r0, #46	; 0x2e
   12cdc:	bne	12d7c <__assert_fail@plt+0x1a68>
   12ce0:	movw	r0, #38786	; 0x9782
   12ce4:	add	r6, r6, #2
   12ce8:	mov	r1, #0
   12cec:	mov	r2, #10
   12cf0:	add	r3, sp, #8
   12cf4:	movt	r0, #1
   12cf8:	str	r0, [sp]
   12cfc:	mov	r0, r6
   12d00:	bl	1771c <__assert_fail@plt+0x6408>
   12d04:	cmp	r0, #1
   12d08:	beq	12d24 <__assert_fail@plt+0x1a10>
   12d0c:	ldr	r1, [sp, #8]
   12d10:	ldr	r2, [sp, #12]
   12d14:	cmp	r0, #0
   12d18:	bne	12d54 <__assert_fail@plt+0x1a40>
   12d1c:	cmp	r2, #0
   12d20:	beq	12d54 <__assert_fail@plt+0x1a40>
   12d24:	mvn	r1, #0
   12d28:	str	sl, [sp, #12]
   12d2c:	str	r1, [sp, #8]
   12d30:	b	12d64 <__assert_fail@plt+0x1a50>
   12d34:	cmp	r8, #48	; 0x30
   12d38:	bne	12d70 <__assert_fail@plt+0x1a5c>
   12d3c:	ldrb	r0, [r6, #1]
   12d40:	mov	r5, #0
   12d44:	mov	r7, #0
   12d48:	cmp	r0, #0
   12d4c:	beq	12c7c <__assert_fail@plt+0x1968>
   12d50:	b	12d7c <__assert_fail@plt+0x1a68>
   12d54:	cmp	r0, #0
   12d58:	bne	12d88 <__assert_fail@plt+0x1a74>
   12d5c:	orrs	r0, r1, r2
   12d60:	beq	12d88 <__assert_fail@plt+0x1a74>
   12d64:	sub	r5, r8, #48	; 0x30
   12d68:	sub	r7, r1, #1
   12d6c:	b	12c7c <__assert_fail@plt+0x1968>
   12d70:	movw	r1, #38815	; 0x979f
   12d74:	movt	r1, #1
   12d78:	b	12d90 <__assert_fail@plt+0x1a7c>
   12d7c:	movw	r1, #38787	; 0x9783
   12d80:	movt	r1, #1
   12d84:	b	12d90 <__assert_fail@plt+0x1a7c>
   12d88:	movw	r1, #38125	; 0x94ed
   12d8c:	movt	r1, #1
   12d90:	mov	r0, #0
   12d94:	mov	r2, #5
   12d98:	bl	11104 <dcgettext@plt>
   12d9c:	mov	r4, r0
   12da0:	mov	r0, r6
   12da4:	bl	15f94 <__assert_fail@plt+0x4c80>
   12da8:	mov	r3, r0
   12dac:	mov	r0, #1
   12db0:	mov	r1, #0
   12db4:	mov	r2, r4
   12db8:	bl	11170 <error@plt>
   12dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc0:	add	fp, sp, #28
   12dc4:	sub	sp, sp, #20
   12dc8:	mov	r4, r0
   12dcc:	ldr	r0, [r3]
   12dd0:	mov	r5, r3
   12dd4:	mov	r6, r1
   12dd8:	cmp	r0, #2
   12ddc:	bne	12f68 <__assert_fail@plt+0x1c54>
   12de0:	ldr	r7, [r6]
   12de4:	movw	r8, #41352	; 0xa188
   12de8:	movt	r8, #2
   12dec:	clz	r0, r7
   12df0:	lsr	r1, r0, #5
   12df4:	ldr	r0, [r6, r1, lsl #2]
   12df8:	cmp	r0, #3
   12dfc:	bhi	12f50 <__assert_fail@plt+0x1c3c>
   12e00:	add	r1, r8, r1, lsl #2
   12e04:	ldr	r9, [r1, #28]
   12e08:	add	r1, pc, #0
   12e0c:	ldr	pc, [r1, r0, lsl #2]
   12e10:	andeq	r2, r1, r8, lsr #31
   12e14:	andeq	r2, r1, r0, lsr #28
   12e18:	andeq	r2, r1, r0, lsl #29
   12e1c:	andeq	r2, r1, r0, ror #29
   12e20:	ldr	r0, [r2]
   12e24:	add	r3, sp, #8
   12e28:	mov	r1, #0
   12e2c:	sub	r0, r0, #1
   12e30:	str	r0, [r2]
   12e34:	movw	r0, #38786	; 0x9782
   12e38:	mov	r2, #10
   12e3c:	movt	r0, #1
   12e40:	str	r0, [sp]
   12e44:	mov	r0, r9
   12e48:	bl	1771c <__assert_fail@plt+0x6408>
   12e4c:	cmp	r0, #1
   12e50:	beq	12e6c <__assert_fail@plt+0x1b58>
   12e54:	ldr	sl, [sp, #8]
   12e58:	ldr	r1, [sp, #12]
   12e5c:	cmp	r0, #0
   12e60:	bne	12eec <__assert_fail@plt+0x1bd8>
   12e64:	cmp	r1, #0
   12e68:	beq	12eec <__assert_fail@plt+0x1bd8>
   12e6c:	mov	r0, #0
   12e70:	mvn	sl, #0
   12e74:	str	r0, [sp, #12]
   12e78:	str	sl, [sp, #8]
   12e7c:	b	12efc <__assert_fail@plt+0x1be8>
   12e80:	ldr	r0, [r2, #4]
   12e84:	add	r3, sp, #8
   12e88:	mov	r1, #0
   12e8c:	sub	r0, r0, #1
   12e90:	str	r0, [r2, #4]
   12e94:	movw	r0, #38786	; 0x9782
   12e98:	mov	r2, #10
   12e9c:	movt	r0, #1
   12ea0:	str	r0, [sp]
   12ea4:	mov	r0, r9
   12ea8:	bl	1771c <__assert_fail@plt+0x6408>
   12eac:	cmp	r0, #1
   12eb0:	beq	12ecc <__assert_fail@plt+0x1bb8>
   12eb4:	ldr	sl, [sp, #8]
   12eb8:	ldr	r1, [sp, #12]
   12ebc:	cmp	r0, #0
   12ec0:	bne	12f20 <__assert_fail@plt+0x1c0c>
   12ec4:	cmp	r1, #0
   12ec8:	beq	12f20 <__assert_fail@plt+0x1c0c>
   12ecc:	mov	r0, #0
   12ed0:	mvn	sl, #0
   12ed4:	str	r0, [sp, #12]
   12ed8:	str	sl, [sp, #8]
   12edc:	b	12f30 <__assert_fail@plt+0x1c1c>
   12ee0:	mov	r0, r9
   12ee4:	bl	12c5c <__assert_fail@plt+0x1948>
   12ee8:	b	12f50 <__assert_fail@plt+0x1c3c>
   12eec:	cmp	r0, #0
   12ef0:	bne	13014 <__assert_fail@plt+0x1d00>
   12ef4:	orrs	r0, sl, r1
   12ef8:	beq	13014 <__assert_fail@plt+0x1d00>
   12efc:	movw	r1, #41228	; 0xa10c
   12f00:	sub	r0, sl, #1
   12f04:	movt	r1, #2
   12f08:	ldr	r9, [r1]
   12f0c:	cmn	r9, #1
   12f10:	cmpne	r9, r0
   12f14:	bne	12fe8 <__assert_fail@plt+0x1cd4>
   12f18:	str	r0, [r1]
   12f1c:	b	12f50 <__assert_fail@plt+0x1c3c>
   12f20:	cmp	r0, #0
   12f24:	bne	13014 <__assert_fail@plt+0x1d00>
   12f28:	orrs	r0, sl, r1
   12f2c:	beq	13014 <__assert_fail@plt+0x1d00>
   12f30:	movw	r1, #41228	; 0xa10c
   12f34:	sub	r0, sl, #1
   12f38:	movt	r1, #2
   12f3c:	ldr	r9, [r1, #4]
   12f40:	cmn	r9, #1
   12f44:	cmpne	r9, r0
   12f48:	bne	12fe8 <__assert_fail@plt+0x1cd4>
   12f4c:	str	r0, [r1, #4]
   12f50:	cmp	r7, #0
   12f54:	mov	r0, #1
   12f58:	ldrne	r1, [r6, #4]
   12f5c:	strne	r1, [r6]
   12f60:	ldrne	r1, [r8, #32]
   12f64:	strne	r1, [r8, #28]
   12f68:	ldr	r1, [fp, #8]
   12f6c:	ldr	r2, [r1]
   12f70:	str	r2, [r6, r0, lsl #2]
   12f74:	movw	r2, #41352	; 0xa188
   12f78:	movt	r2, #2
   12f7c:	add	r2, r2, r0, lsl #2
   12f80:	add	r0, r0, #1
   12f84:	str	r4, [r2, #28]
   12f88:	str	r0, [r5]
   12f8c:	ldr	r0, [r1]
   12f90:	cmp	r0, #3
   12f94:	ldreq	r0, [fp, #12]
   12f98:	moveq	r1, #3
   12f9c:	streq	r1, [r0]
   12fa0:	sub	sp, fp, #28
   12fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fa8:	movw	r1, #38853	; 0x97c5
   12fac:	mov	r0, #0
   12fb0:	mov	r2, #5
   12fb4:	movt	r1, #1
   12fb8:	bl	11104 <dcgettext@plt>
   12fbc:	mov	r5, r0
   12fc0:	mov	r0, #4
   12fc4:	mov	r1, r4
   12fc8:	bl	15a6c <__assert_fail@plt+0x4758>
   12fcc:	mov	r3, r0
   12fd0:	mov	r0, #0
   12fd4:	mov	r1, #0
   12fd8:	mov	r2, r5
   12fdc:	bl	11170 <error@plt>
   12fe0:	mov	r0, #1
   12fe4:	bl	11410 <__assert_fail@plt+0xfc>
   12fe8:	movw	r1, #38749	; 0x975d
   12fec:	mov	r0, #0
   12ff0:	mov	r2, #5
   12ff4:	movt	r1, #1
   12ff8:	bl	11104 <dcgettext@plt>
   12ffc:	mov	r2, r0
   13000:	add	r3, r9, #1
   13004:	mov	r0, #1
   13008:	mov	r1, #0
   1300c:	str	sl, [sp]
   13010:	bl	11170 <error@plt>
   13014:	movw	r1, #38125	; 0x94ed
   13018:	mov	r0, #0
   1301c:	mov	r2, #5
   13020:	movt	r1, #1
   13024:	bl	11104 <dcgettext@plt>
   13028:	mov	r4, r0
   1302c:	mov	r0, r9
   13030:	bl	15f94 <__assert_fail@plt+0x4c80>
   13034:	mov	r3, r0
   13038:	mov	r0, #1
   1303c:	mov	r1, #0
   13040:	mov	r2, r4
   13044:	bl	11170 <error@plt>
   13048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1304c:	add	fp, sp, #28
   13050:	sub	sp, sp, #4
   13054:	movw	r5, #41352	; 0xa188
   13058:	movw	r7, #41228	; 0xa10c
   1305c:	mov	r9, r1
   13060:	mov	r8, r0
   13064:	movt	r5, #2
   13068:	movt	r7, #2
   1306c:	ldr	r4, [r5, #60]	; 0x3c
   13070:	cmp	r4, #0
   13074:	beq	13180 <__assert_fail@plt+0x1e6c>
   13078:	ldr	r0, [r7, #8]
   1307c:	add	r1, r5, #80	; 0x50
   13080:	mov	sl, r8
   13084:	movw	r5, #41340	; 0xa17c
   13088:	cmp	r8, r1
   1308c:	movt	r5, #2
   13090:	addeq	r7, r7, #4
   13094:	moveq	sl, r9
   13098:	uxtb	r6, r0
   1309c:	cmp	r0, #0
   130a0:	movwlt	r6, #32
   130a4:	b	130b4 <__assert_fail@plt+0x1da0>
   130a8:	add	r2, r1, #1
   130ac:	str	r2, [r0, #20]
   130b0:	strb	r6, [r1]
   130b4:	mov	r1, r4
   130b8:	mov	r0, r9
   130bc:	ldr	r2, [r1], #4
   130c0:	cmp	r2, #1
   130c4:	moveq	r0, r8
   130c8:	cmp	r2, #0
   130cc:	moveq	r1, r7
   130d0:	moveq	r0, sl
   130d4:	ldr	r2, [r0, #12]
   130d8:	ldr	r1, [r1]
   130dc:	cmp	r2, r1
   130e0:	bls	13118 <__assert_fail@plt+0x1e04>
   130e4:	ldr	r0, [r0, #20]
   130e8:	add	r2, r0, r1, lsl #3
   130ec:	ldr	r2, [r2, #4]
   130f0:	cmp	r2, #0
   130f4:	beq	13118 <__assert_fail@plt+0x1e04>
   130f8:	ldr	r0, [r0, r1, lsl #3]
   130fc:	ldr	r3, [r5]
   13100:	mov	r1, #1
   13104:	bl	110ec <fwrite_unlocked@plt>
   13108:	ldr	r4, [r4, #8]
   1310c:	cmp	r4, #0
   13110:	bne	13140 <__assert_fail@plt+0x1e2c>
   13114:	b	13160 <__assert_fail@plt+0x1e4c>
   13118:	movw	r0, #41352	; 0xa188
   1311c:	movt	r0, #2
   13120:	ldr	r0, [r0, #16]
   13124:	cmp	r0, #0
   13128:	beq	13134 <__assert_fail@plt+0x1e20>
   1312c:	ldr	r1, [r5]
   13130:	bl	11074 <fputs_unlocked@plt>
   13134:	ldr	r4, [r4, #8]
   13138:	cmp	r4, #0
   1313c:	beq	13160 <__assert_fail@plt+0x1e4c>
   13140:	ldr	r0, [r5]
   13144:	ldr	r1, [r0, #20]
   13148:	ldr	r2, [r0, #24]
   1314c:	cmp	r1, r2
   13150:	bcc	130a8 <__assert_fail@plt+0x1d94>
   13154:	mov	r1, r6
   13158:	bl	11290 <__overflow@plt>
   1315c:	b	130b4 <__assert_fail@plt+0x1da0>
   13160:	movw	r0, #41352	; 0xa188
   13164:	mov	r1, #10
   13168:	movt	r0, #2
   1316c:	ldrb	r0, [r0, #7]
   13170:	cmp	r0, #0
   13174:	ldr	r0, [r5]
   13178:	movwne	r1, #0
   1317c:	b	13230 <__assert_fail@plt+0x1f1c>
   13180:	add	r0, r5, #80	; 0x50
   13184:	mov	r1, r8
   13188:	cmp	r8, r0
   1318c:	mov	r0, r7
   13190:	addeq	r0, r0, #4
   13194:	moveq	r1, r9
   13198:	ldr	r0, [r0]
   1319c:	ldr	r2, [r1, #12]
   131a0:	cmp	r2, r0
   131a4:	bls	131d8 <__assert_fail@plt+0x1ec4>
   131a8:	ldr	r1, [r1, #20]
   131ac:	add	r2, r1, r0, lsl #3
   131b0:	ldr	r2, [r2, #4]
   131b4:	cmp	r2, #0
   131b8:	beq	131d8 <__assert_fail@plt+0x1ec4>
   131bc:	ldr	r0, [r1, r0, lsl #3]
   131c0:	movw	r1, #41340	; 0xa17c
   131c4:	movt	r1, #2
   131c8:	ldr	r3, [r1]
   131cc:	mov	r1, #1
   131d0:	bl	110ec <fwrite_unlocked@plt>
   131d4:	b	131f4 <__assert_fail@plt+0x1ee0>
   131d8:	ldr	r0, [r5, #16]
   131dc:	cmp	r0, #0
   131e0:	beq	131f4 <__assert_fail@plt+0x1ee0>
   131e4:	movw	r1, #41340	; 0xa17c
   131e8:	movt	r1, #2
   131ec:	ldr	r1, [r1]
   131f0:	bl	11074 <fputs_unlocked@plt>
   131f4:	ldr	r2, [r5, #20]
   131f8:	ldr	r1, [r7]
   131fc:	mov	r0, r8
   13200:	bl	13848 <__assert_fail@plt+0x2534>
   13204:	ldr	r2, [r5, #24]
   13208:	ldr	r1, [r7, #4]
   1320c:	mov	r0, r9
   13210:	bl	13848 <__assert_fail@plt+0x2534>
   13214:	ldrb	r0, [r5, #7]
   13218:	mov	r1, #10
   1321c:	cmp	r0, #0
   13220:	movw	r0, #41340	; 0xa17c
   13224:	movt	r0, #2
   13228:	movwne	r1, #0
   1322c:	ldr	r0, [r0]
   13230:	ldr	r2, [r0, #20]
   13234:	ldr	r3, [r0, #24]
   13238:	cmp	r2, r3
   1323c:	addcc	r3, r2, #1
   13240:	strcc	r3, [r0, #20]
   13244:	strbcc	r1, [r2]
   13248:	subcc	sp, fp, #28
   1324c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13250:	sub	sp, fp, #28
   13254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13258:	b	11290 <__overflow@plt>
   1325c:	push	{r4, r5, fp, lr}
   13260:	add	fp, sp, #8
   13264:	mov	r5, r0
   13268:	ldr	r0, [r0, #12]
   1326c:	mov	r4, #0
   13270:	mov	ip, #0
   13274:	cmp	r0, r2
   13278:	mov	r0, #0
   1327c:	ldrhi	r5, [r5, #20]
   13280:	ldrhi	r0, [r5, r2, lsl #3]!
   13284:	ldr	r2, [r1, #12]
   13288:	ldrhi	r4, [r5, #4]
   1328c:	cmp	r2, r3
   13290:	mov	r5, #0
   13294:	ldrhi	r1, [r1, #20]
   13298:	ldrhi	ip, [r1, r3, lsl #3]!
   1329c:	ldrhi	r5, [r1, #4]
   132a0:	cmp	r4, #0
   132a4:	beq	132e0 <__assert_fail@plt+0x1fcc>
   132a8:	cmp	r5, #0
   132ac:	moveq	r0, #1
   132b0:	popeq	{r4, r5, fp, pc}
   132b4:	movw	r1, #41352	; 0xa188
   132b8:	movt	r1, #2
   132bc:	ldrb	r2, [r1, #5]
   132c0:	cmp	r2, #1
   132c4:	bne	132f0 <__assert_fail@plt+0x1fdc>
   132c8:	cmp	r4, r5
   132cc:	mov	r2, r5
   132d0:	mov	r1, ip
   132d4:	movcc	r2, r4
   132d8:	bl	13fc0 <__assert_fail@plt+0x2cac>
   132dc:	b	13324 <__assert_fail@plt+0x2010>
   132e0:	cmp	r5, #0
   132e4:	mvnne	r5, #0
   132e8:	mov	r0, r5
   132ec:	pop	{r4, r5, fp, pc}
   132f0:	ldrb	r1, [r1]
   132f4:	cmp	r1, #0
   132f8:	beq	13310 <__assert_fail@plt+0x1ffc>
   132fc:	mov	r1, r4
   13300:	mov	r2, ip
   13304:	mov	r3, r5
   13308:	pop	{r4, r5, fp, lr}
   1330c:	b	16cc0 <__assert_fail@plt+0x59ac>
   13310:	cmp	r4, r5
   13314:	mov	r2, r5
   13318:	mov	r1, ip
   1331c:	movcc	r2, r4
   13320:	bl	110f8 <memcmp@plt>
   13324:	cmp	r0, #0
   13328:	popne	{r4, r5, fp, pc}
   1332c:	subs	r0, r4, r5
   13330:	movwne	r0, #1
   13334:	mvncc	r0, #0
   13338:	pop	{r4, r5, fp, pc}
   1333c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13340:	add	fp, sp, #28
   13344:	sub	sp, sp, #44	; 0x2c
   13348:	movw	r9, #41352	; 0xa188
   1334c:	sub	r7, r2, #1
   13350:	mov	r5, r1
   13354:	mov	r4, r0
   13358:	mov	r6, r2
   1335c:	movt	r9, #2
   13360:	ldr	r0, [r5]
   13364:	add	r8, r9, r7, lsl #2
   13368:	ldr	r1, [r8, #44]	; 0x2c
   1336c:	cmp	r0, r1
   13370:	beq	1338c <__assert_fail@plt+0x2078>
   13374:	mov	sl, r0
   13378:	cmp	sl, #0
   1337c:	beq	133a0 <__assert_fail@plt+0x208c>
   13380:	mov	r0, #0
   13384:	str	r0, [sl, #12]
   13388:	b	133b4 <__assert_fail@plt+0x20a0>
   1338c:	ldr	sl, [r8, #36]	; 0x24
   13390:	str	r0, [r8, #36]	; 0x24
   13394:	str	sl, [r5]
   13398:	cmp	sl, #0
   1339c:	bne	13380 <__assert_fail@plt+0x206c>
   133a0:	mov	r0, #1
   133a4:	mov	r1, #24
   133a8:	bl	16b30 <__assert_fail@plt+0x581c>
   133ac:	mov	sl, r0
   133b0:	str	r0, [r5]
   133b4:	ldrb	r0, [r9, #7]
   133b8:	mov	r2, #10
   133bc:	mov	r1, r4
   133c0:	cmp	r0, #0
   133c4:	mov	r0, sl
   133c8:	movwne	r2, #0
   133cc:	bl	13e94 <__assert_fail@plt+0x2b80>
   133d0:	cmp	r0, #0
   133d4:	beq	134d4 <__assert_fail@plt+0x21c0>
   133d8:	add	r1, r9, r7, lsl #3
   133dc:	str	r6, [sp, #28]
   133e0:	str	r7, [sp, #36]	; 0x24
   133e4:	ldr	r0, [r1, #64]!	; 0x40
   133e8:	adds	r0, r0, #1
   133ec:	str	r1, [sp, #24]
   133f0:	str	r0, [r1]
   133f4:	ldr	r0, [r1, #4]
   133f8:	adc	r0, r0, #0
   133fc:	str	r0, [r1, #4]
   13400:	ldmib	sl, {r0, r6}
   13404:	add	r4, r6, r0
   13408:	sub	r1, r4, #1
   1340c:	cmp	r6, r1
   13410:	str	r1, [fp, #-32]	; 0xffffffe0
   13414:	beq	136b8 <__assert_fail@plt+0x23a4>
   13418:	movw	r1, #41228	; 0xa10c
   1341c:	str	r8, [sp, #32]
   13420:	movt	r1, #2
   13424:	ldr	r7, [r1, #8]
   13428:	cmp	r7, #0
   1342c:	blt	13510 <__assert_fail@plt+0x21fc>
   13430:	cmp	r7, #10
   13434:	beq	13510 <__assert_fail@plt+0x21fc>
   13438:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1343c:	mov	r1, r7
   13440:	sub	r2, r0, r6
   13444:	mov	r0, r6
   13448:	bl	11254 <memchr@plt>
   1344c:	cmp	r0, #0
   13450:	beq	13664 <__assert_fail@plt+0x2350>
   13454:	ldr	r9, [sl, #12]
   13458:	mov	r4, r0
   1345c:	add	r5, sl, #16
   13460:	ldr	r0, [r5]
   13464:	sub	r8, r4, r6
   13468:	cmp	r9, r0
   1346c:	bcs	13478 <__assert_fail@plt+0x2164>
   13470:	ldr	r0, [sl, #20]
   13474:	b	1349c <__assert_fail@plt+0x2188>
   13478:	ldr	r0, [sl, #20]
   1347c:	mov	r1, r5
   13480:	mov	r2, #8
   13484:	bl	168c8 <__assert_fail@plt+0x55b4>
   13488:	movw	r1, #41228	; 0xa10c
   1348c:	str	r0, [sl, #20]
   13490:	movt	r1, #2
   13494:	ldr	r9, [sl, #12]
   13498:	ldr	r7, [r1, #8]
   1349c:	str	r6, [r0, r9, lsl #3]!
   134a0:	add	r6, r4, #1
   134a4:	add	r9, r9, #1
   134a8:	mov	r1, r7
   134ac:	str	r8, [r0, #4]
   134b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   134b4:	str	r9, [sl, #12]
   134b8:	sub	r2, r0, r6
   134bc:	mov	r0, r6
   134c0:	bl	11254 <memchr@plt>
   134c4:	mov	r4, r0
   134c8:	cmp	r0, #0
   134cc:	bne	13460 <__assert_fail@plt+0x214c>
   134d0:	b	13664 <__assert_fail@plt+0x2350>
   134d4:	ldrb	r0, [r4]
   134d8:	tst	r0, #32
   134dc:	bne	137c0 <__assert_fail@plt+0x24ac>
   134e0:	cmp	sl, #0
   134e4:	beq	13554 <__assert_fail@plt+0x2240>
   134e8:	ldr	r0, [sl, #20]
   134ec:	bl	13c30 <__assert_fail@plt+0x291c>
   134f0:	mov	r4, #0
   134f4:	str	r4, [sl, #20]
   134f8:	ldr	r0, [sl, #8]
   134fc:	bl	13c30 <__assert_fail@plt+0x291c>
   13500:	str	r4, [sl, #8]
   13504:	mov	r0, r4
   13508:	sub	sp, fp, #28
   1350c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13510:	cmn	r7, #1
   13514:	bgt	13664 <__assert_fail@plt+0x2350>
   13518:	sub	r5, r0, #1
   1351c:	bl	111d0 <__ctype_b_loc@plt>
   13520:	mov	ip, r0
   13524:	ldr	r0, [r0]
   13528:	ldrb	r1, [r6]
   1352c:	cmp	r1, #10
   13530:	beq	13544 <__assert_fail@plt+0x2230>
   13534:	add	r1, r0, r1, lsl #1
   13538:	ldrh	r1, [r1]
   1353c:	ands	r1, r1, #1
   13540:	beq	13564 <__assert_fail@plt+0x2250>
   13544:	subs	r5, r5, #1
   13548:	add	r6, r6, #1
   1354c:	bne	13528 <__assert_fail@plt+0x2214>
   13550:	b	136b8 <__assert_fail@plt+0x23a4>
   13554:	mov	r4, #0
   13558:	mov	r0, r4
   1355c:	sub	sp, fp, #28
   13560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13564:	sub	r5, r4, #3
   13568:	sub	r4, r4, #2
   1356c:	add	r1, sl, #16
   13570:	mov	r3, r6
   13574:	mov	r7, r3
   13578:	cmp	r4, r3
   1357c:	beq	135a8 <__assert_fail@plt+0x2294>
   13580:	ldrb	r2, [r7, #1]
   13584:	add	r3, r7, #1
   13588:	mov	r9, #0
   1358c:	cmp	r2, #10
   13590:	beq	135b0 <__assert_fail@plt+0x229c>
   13594:	add	r2, r0, r2, lsl #1
   13598:	ldrh	r2, [r2]
   1359c:	ands	r2, r2, #1
   135a0:	beq	13574 <__assert_fail@plt+0x2260>
   135a4:	b	135b0 <__assert_fail@plt+0x229c>
   135a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   135ac:	mov	r9, #1
   135b0:	ldr	r2, [sl, #12]
   135b4:	ldr	r0, [sl, #16]
   135b8:	sub	r3, r3, r6
   135bc:	cmp	r2, r0
   135c0:	bcs	135cc <__assert_fail@plt+0x22b8>
   135c4:	ldr	r0, [sl, #20]
   135c8:	b	135f8 <__assert_fail@plt+0x22e4>
   135cc:	ldr	r0, [sl, #20]
   135d0:	mov	r2, #8
   135d4:	str	ip, [sp, #20]
   135d8:	mov	r8, r1
   135dc:	str	r3, [sp, #16]
   135e0:	bl	168c8 <__assert_fail@plt+0x55b4>
   135e4:	str	r0, [sl, #20]
   135e8:	ldr	r3, [sp, #16]
   135ec:	ldr	ip, [sp, #20]
   135f0:	mov	r1, r8
   135f4:	ldr	r2, [sl, #12]
   135f8:	str	r6, [r0, r2, lsl #3]!
   135fc:	cmp	r9, #0
   13600:	movw	r9, #41352	; 0xa188
   13604:	ldr	r8, [sp, #32]
   13608:	str	r3, [r0, #4]
   1360c:	add	r0, r2, #1
   13610:	movt	r9, #2
   13614:	str	r0, [sl, #12]
   13618:	bne	136b8 <__assert_fail@plt+0x23a4>
   1361c:	cmp	r5, r7
   13620:	beq	13660 <__assert_fail@plt+0x234c>
   13624:	ldr	r0, [ip]
   13628:	ldrb	r2, [r7, #2]
   1362c:	cmp	r2, #10
   13630:	beq	13644 <__assert_fail@plt+0x2330>
   13634:	add	r2, r0, r2, lsl #1
   13638:	ldrh	r2, [r2]
   1363c:	ands	r2, r2, #1
   13640:	beq	13654 <__assert_fail@plt+0x2340>
   13644:	add	r7, r7, #1
   13648:	cmp	r5, r7
   1364c:	bne	13628 <__assert_fail@plt+0x2314>
   13650:	b	13660 <__assert_fail@plt+0x234c>
   13654:	add	r6, r7, #2
   13658:	cmp	r5, r7
   1365c:	bne	13570 <__assert_fail@plt+0x225c>
   13660:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13664:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13668:	mov	r1, sl
   1366c:	sub	r4, r0, r6
   13670:	ldr	r0, [r1, #16]!
   13674:	ldr	r2, [r1, #-4]
   13678:	cmp	r2, r0
   1367c:	bcs	13688 <__assert_fail@plt+0x2374>
   13680:	ldr	r0, [sl, #20]
   13684:	b	1369c <__assert_fail@plt+0x2388>
   13688:	ldr	r0, [sl, #20]
   1368c:	mov	r2, #8
   13690:	bl	168c8 <__assert_fail@plt+0x55b4>
   13694:	str	r0, [sl, #20]
   13698:	ldr	r2, [sl, #12]
   1369c:	ldr	r8, [sp, #32]
   136a0:	movw	r9, #41352	; 0xa188
   136a4:	str	r6, [r0, r2, lsl #3]!
   136a8:	movt	r9, #2
   136ac:	str	r4, [r0, #4]
   136b0:	add	r0, r2, #1
   136b4:	str	r0, [sl, #12]
   136b8:	ldr	r0, [r8, #44]	; 0x2c
   136bc:	cmp	r0, #0
   136c0:	beq	137ac <__assert_fail@plt+0x2498>
   136c4:	ldr	r1, [r9, #12]
   136c8:	cmp	r1, #1
   136cc:	beq	136e4 <__assert_fail@plt+0x23d0>
   136d0:	cmp	r1, #2
   136d4:	beq	137ac <__assert_fail@plt+0x2498>
   136d8:	ldrb	r1, [r9, #2]
   136dc:	cmp	r1, #1
   136e0:	bne	137ac <__assert_fail@plt+0x2498>
   136e4:	ldr	r1, [sp, #36]	; 0x24
   136e8:	add	r4, r9, r1
   136ec:	ldrb	r1, [r4, #9]
   136f0:	cmp	r1, #0
   136f4:	bne	137ac <__assert_fail@plt+0x2498>
   136f8:	ldr	r2, [sp, #28]
   136fc:	movw	r1, #41228	; 0xa10c
   13700:	movt	r1, #2
   13704:	cmp	r2, #1
   13708:	addne	r1, r1, #4
   1370c:	ldr	r2, [r1]
   13710:	mov	r1, sl
   13714:	mov	r3, r2
   13718:	bl	1325c <__assert_fail@plt+0x1f48>
   1371c:	cmp	r0, #1
   13720:	blt	137ac <__assert_fail@plt+0x2498>
   13724:	ldr	r0, [sl, #4]
   13728:	cmp	r0, #0
   1372c:	beq	13758 <__assert_fail@plt+0x2444>
   13730:	ldr	r1, [sl, #8]
   13734:	sub	r2, r0, #1
   13738:	ldr	r7, [sp, #24]
   1373c:	mvn	r5, #-2147483648	; 0x80000000
   13740:	ldrb	r1, [r1, r2]
   13744:	cmp	r1, #10
   13748:	moveq	r0, r2
   1374c:	cmn	r0, #-2147483646	; 0x80000002
   13750:	movls	r5, r0
   13754:	b	13764 <__assert_fail@plt+0x2450>
   13758:	ldr	r7, [sp, #24]
   1375c:	mov	r0, #0
   13760:	mov	r5, r0
   13764:	ldr	r6, [r9, #12]
   13768:	movw	r1, #38881	; 0x97e1
   1376c:	mov	r0, #0
   13770:	mov	r2, #5
   13774:	movt	r1, #1
   13778:	bl	11104 <dcgettext@plt>
   1377c:	mov	r2, r0
   13780:	ldrd	r0, [r7]
   13784:	ldr	r7, [sl, #8]
   13788:	ldr	r3, [r8, #28]
   1378c:	stm	sp, {r0, r1, r5, r7}
   13790:	sub	r0, r6, #1
   13794:	mov	r1, #0
   13798:	clz	r0, r0
   1379c:	lsr	r0, r0, #5
   137a0:	bl	11170 <error@plt>
   137a4:	mov	r0, #1
   137a8:	strb	r0, [r4, #9]
   137ac:	mov	r4, #1
   137b0:	str	sl, [r8, #44]	; 0x2c
   137b4:	mov	r0, r4
   137b8:	sub	sp, fp, #28
   137bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137c0:	bl	1120c <__errno_location@plt>
   137c4:	ldr	r4, [r0]
   137c8:	movw	r1, #38870	; 0x97d6
   137cc:	mov	r0, #0
   137d0:	mov	r2, #5
   137d4:	movt	r1, #1
   137d8:	bl	11104 <dcgettext@plt>
   137dc:	mov	r2, r0
   137e0:	mov	r0, #1
   137e4:	mov	r1, r4
   137e8:	bl	11170 <error@plt>
   137ec:	ldr	r2, [r1, #12]
   137f0:	cmp	r2, r0
   137f4:	bls	13824 <__assert_fail@plt+0x2510>
   137f8:	ldr	r1, [r1, #20]
   137fc:	add	r2, r1, r0, lsl #3
   13800:	ldr	r2, [r2, #4]
   13804:	cmp	r2, #0
   13808:	beq	13824 <__assert_fail@plt+0x2510>
   1380c:	ldr	r0, [r1, r0, lsl #3]
   13810:	movw	r1, #41340	; 0xa17c
   13814:	movt	r1, #2
   13818:	ldr	r3, [r1]
   1381c:	mov	r1, #1
   13820:	b	110ec <fwrite_unlocked@plt>
   13824:	movw	r0, #41352	; 0xa188
   13828:	movt	r0, #2
   1382c:	ldr	r0, [r0, #16]
   13830:	cmp	r0, #0
   13834:	bxeq	lr
   13838:	movw	r1, #41340	; 0xa17c
   1383c:	movt	r1, #2
   13840:	ldr	r1, [r1]
   13844:	b	11074 <fputs_unlocked@plt>
   13848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384c:	add	fp, sp, #28
   13850:	sub	sp, sp, #4
   13854:	mov	r5, r0
   13858:	movw	r0, #41352	; 0xa188
   1385c:	mov	r4, r2
   13860:	mov	r6, r1
   13864:	movt	r0, #2
   13868:	ldrb	r0, [r0, #6]
   1386c:	cmp	r0, #0
   13870:	movw	r0, #41228	; 0xa10c
   13874:	movt	r0, #2
   13878:	ldreq	r4, [r5, #12]
   1387c:	ldr	r9, [r0, #8]
   13880:	cmp	r9, #0
   13884:	movwlt	r9, #32
   13888:	cmp	r6, #0
   1388c:	cmpne	r4, #0
   13890:	bne	138cc <__assert_fail@plt+0x25b8>
   13894:	add	r6, r6, #1
   13898:	cmp	r6, r4
   1389c:	bcs	138c4 <__assert_fail@plt+0x25b0>
   138a0:	uxtb	r7, r9
   138a4:	mov	r0, r7
   138a8:	bl	11308 <putchar_unlocked@plt>
   138ac:	mov	r0, r6
   138b0:	mov	r1, r5
   138b4:	bl	137ec <__assert_fail@plt+0x24d8>
   138b8:	add	r6, r6, #1
   138bc:	cmp	r4, r6
   138c0:	bne	138a4 <__assert_fail@plt+0x2590>
   138c4:	sub	sp, fp, #28
   138c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138cc:	movw	sl, #41340	; 0xa17c
   138d0:	uxtb	r8, r9
   138d4:	mov	r7, #0
   138d8:	movt	sl, #2
   138dc:	ldr	r0, [sl]
   138e0:	ldr	r1, [r0, #20]
   138e4:	ldr	r2, [r0, #24]
   138e8:	cmp	r1, r2
   138ec:	bcs	13920 <__assert_fail@plt+0x260c>
   138f0:	add	r2, r1, #1
   138f4:	str	r2, [r0, #20]
   138f8:	strb	r9, [r1]
   138fc:	mov	r0, r7
   13900:	mov	r1, r5
   13904:	bl	137ec <__assert_fail@plt+0x24d8>
   13908:	add	r7, r7, #1
   1390c:	cmp	r7, r6
   13910:	bcs	13894 <__assert_fail@plt+0x2580>
   13914:	cmp	r7, r4
   13918:	bcc	138dc <__assert_fail@plt+0x25c8>
   1391c:	b	13894 <__assert_fail@plt+0x2580>
   13920:	mov	r1, r8
   13924:	bl	11290 <__overflow@plt>
   13928:	b	138fc <__assert_fail@plt+0x25e8>
   1392c:	movw	r1, #41456	; 0xa1f0
   13930:	movt	r1, #2
   13934:	str	r0, [r1, #4]
   13938:	bx	lr
   1393c:	movw	r1, #41456	; 0xa1f0
   13940:	movt	r1, #2
   13944:	strb	r0, [r1]
   13948:	bx	lr
   1394c:	push	{r4, r5, r6, sl, fp, lr}
   13950:	add	fp, sp, #16
   13954:	sub	sp, sp, #8
   13958:	movw	r0, #41340	; 0xa17c
   1395c:	movt	r0, #2
   13960:	ldr	r0, [r0]
   13964:	bl	184a8 <__assert_fail@plt+0x7194>
   13968:	cmp	r0, #0
   1396c:	beq	13994 <__assert_fail@plt+0x2680>
   13970:	movw	r5, #41456	; 0xa1f0
   13974:	movt	r5, #2
   13978:	ldrb	r0, [r5]
   1397c:	cmp	r0, #0
   13980:	beq	139c0 <__assert_fail@plt+0x26ac>
   13984:	bl	1120c <__errno_location@plt>
   13988:	ldr	r0, [r0]
   1398c:	cmp	r0, #32
   13990:	bne	139c0 <__assert_fail@plt+0x26ac>
   13994:	movw	r0, #41328	; 0xa170
   13998:	movt	r0, #2
   1399c:	ldr	r0, [r0]
   139a0:	bl	184a8 <__assert_fail@plt+0x7194>
   139a4:	cmp	r0, #0
   139a8:	subeq	sp, fp, #16
   139ac:	popeq	{r4, r5, r6, sl, fp, pc}
   139b0:	movw	r0, #41244	; 0xa11c
   139b4:	movt	r0, #2
   139b8:	ldr	r0, [r0]
   139bc:	bl	110bc <_exit@plt>
   139c0:	movw	r1, #39111	; 0x98c7
   139c4:	mov	r0, #0
   139c8:	mov	r2, #5
   139cc:	movt	r1, #1
   139d0:	bl	11104 <dcgettext@plt>
   139d4:	ldr	r6, [r5, #4]
   139d8:	mov	r4, r0
   139dc:	bl	1120c <__errno_location@plt>
   139e0:	ldr	r5, [r0]
   139e4:	cmp	r6, #0
   139e8:	bne	13a04 <__assert_fail@plt+0x26f0>
   139ec:	movw	r2, #38850	; 0x97c2
   139f0:	mov	r0, #0
   139f4:	mov	r1, r5
   139f8:	mov	r3, r4
   139fc:	movt	r2, #1
   13a00:	b	13a24 <__assert_fail@plt+0x2710>
   13a04:	mov	r0, r6
   13a08:	bl	15c0c <__assert_fail@plt+0x48f8>
   13a0c:	movw	r2, #39123	; 0x98d3
   13a10:	mov	r3, r0
   13a14:	str	r4, [sp]
   13a18:	mov	r0, #0
   13a1c:	mov	r1, r5
   13a20:	movt	r2, #1
   13a24:	bl	11170 <error@plt>
   13a28:	movw	r0, #41244	; 0xa11c
   13a2c:	movt	r0, #2
   13a30:	ldr	r0, [r0]
   13a34:	bl	110bc <_exit@plt>
   13a38:	b	11098 <posix_fadvise64@plt>
   13a3c:	cmp	r0, #0
   13a40:	bxeq	lr
   13a44:	push	{r4, sl, fp, lr}
   13a48:	add	fp, sp, #8
   13a4c:	sub	sp, sp, #16
   13a50:	mov	r4, r1
   13a54:	bl	1123c <fileno@plt>
   13a58:	mov	r1, #0
   13a5c:	mov	r2, #0
   13a60:	mov	r3, #0
   13a64:	str	r1, [sp]
   13a68:	stmib	sp, {r1, r4}
   13a6c:	bl	11098 <posix_fadvise64@plt>
   13a70:	sub	sp, fp, #8
   13a74:	pop	{r4, sl, fp, pc}
   13a78:	push	{r4, r5, r6, sl, fp, lr}
   13a7c:	add	fp, sp, #16
   13a80:	sub	sp, sp, #8
   13a84:	mov	r4, r0
   13a88:	bl	1123c <fileno@plt>
   13a8c:	cmn	r0, #1
   13a90:	ble	13b04 <__assert_fail@plt+0x27f0>
   13a94:	mov	r0, r4
   13a98:	bl	111a0 <__freading@plt>
   13a9c:	cmp	r0, #0
   13aa0:	beq	13acc <__assert_fail@plt+0x27b8>
   13aa4:	mov	r0, r4
   13aa8:	bl	1123c <fileno@plt>
   13aac:	mov	r1, #1
   13ab0:	mov	r2, #0
   13ab4:	mov	r3, #0
   13ab8:	str	r1, [sp]
   13abc:	bl	11140 <lseek64@plt>
   13ac0:	and	r0, r0, r1
   13ac4:	cmn	r0, #1
   13ac8:	beq	13b04 <__assert_fail@plt+0x27f0>
   13acc:	mov	r0, r4
   13ad0:	bl	13b14 <__assert_fail@plt+0x2800>
   13ad4:	cmp	r0, #0
   13ad8:	beq	13b04 <__assert_fail@plt+0x27f0>
   13adc:	bl	1120c <__errno_location@plt>
   13ae0:	ldr	r6, [r0]
   13ae4:	mov	r5, r0
   13ae8:	mov	r0, r4
   13aec:	bl	11260 <fclose@plt>
   13af0:	cmp	r6, #0
   13af4:	strne	r6, [r5]
   13af8:	mvnne	r0, #0
   13afc:	sub	sp, fp, #16
   13b00:	pop	{r4, r5, r6, sl, fp, pc}
   13b04:	mov	r0, r4
   13b08:	sub	sp, fp, #16
   13b0c:	pop	{r4, r5, r6, sl, fp, lr}
   13b10:	b	11260 <fclose@plt>
   13b14:	push	{r4, sl, fp, lr}
   13b18:	add	fp, sp, #8
   13b1c:	sub	sp, sp, #8
   13b20:	mov	r4, r0
   13b24:	cmp	r0, #0
   13b28:	beq	13b44 <__assert_fail@plt+0x2830>
   13b2c:	mov	r0, r4
   13b30:	bl	111a0 <__freading@plt>
   13b34:	cmp	r0, #0
   13b38:	ldrbne	r0, [r4, #1]
   13b3c:	tstne	r0, #1
   13b40:	bne	13b54 <__assert_fail@plt+0x2840>
   13b44:	mov	r0, r4
   13b48:	sub	sp, fp, #8
   13b4c:	pop	{r4, sl, fp, lr}
   13b50:	b	110a4 <fflush@plt>
   13b54:	mov	r0, #1
   13b58:	mov	r2, #0
   13b5c:	mov	r3, #0
   13b60:	str	r0, [sp]
   13b64:	mov	r0, r4
   13b68:	bl	13c58 <__assert_fail@plt+0x2944>
   13b6c:	mov	r0, r4
   13b70:	sub	sp, fp, #8
   13b74:	pop	{r4, sl, fp, lr}
   13b78:	b	110a4 <fflush@plt>
   13b7c:	push	{r4, r5, r6, r7, fp, lr}
   13b80:	add	fp, sp, #16
   13b84:	mov	r5, r1
   13b88:	bl	112c0 <fopen64@plt>
   13b8c:	mov	r4, #0
   13b90:	cmp	r0, #0
   13b94:	beq	13be4 <__assert_fail@plt+0x28d0>
   13b98:	mov	r6, r0
   13b9c:	bl	1123c <fileno@plt>
   13ba0:	cmp	r0, #2
   13ba4:	movhi	r0, r6
   13ba8:	pophi	{r4, r5, r6, r7, fp, pc}
   13bac:	bl	16050 <__assert_fail@plt+0x4d3c>
   13bb0:	cmn	r0, #1
   13bb4:	ble	13c10 <__assert_fail@plt+0x28fc>
   13bb8:	mov	r7, r0
   13bbc:	mov	r0, r6
   13bc0:	bl	13a78 <__assert_fail@plt+0x2764>
   13bc4:	cmp	r0, #0
   13bc8:	bne	13bec <__assert_fail@plt+0x28d8>
   13bcc:	mov	r0, r7
   13bd0:	mov	r1, r5
   13bd4:	bl	1105c <fdopen@plt>
   13bd8:	mov	r4, r0
   13bdc:	cmp	r0, #0
   13be0:	beq	13bec <__assert_fail@plt+0x28d8>
   13be4:	mov	r0, r4
   13be8:	pop	{r4, r5, r6, r7, fp, pc}
   13bec:	bl	1120c <__errno_location@plt>
   13bf0:	ldr	r5, [r0]
   13bf4:	mov	r4, r0
   13bf8:	mov	r0, r7
   13bfc:	bl	112fc <close@plt>
   13c00:	str	r5, [r4]
   13c04:	mov	r4, #0
   13c08:	mov	r0, r4
   13c0c:	pop	{r4, r5, r6, r7, fp, pc}
   13c10:	bl	1120c <__errno_location@plt>
   13c14:	ldr	r7, [r0]
   13c18:	mov	r5, r0
   13c1c:	mov	r0, r6
   13c20:	bl	13a78 <__assert_fail@plt+0x2764>
   13c24:	mov	r0, r4
   13c28:	str	r7, [r5]
   13c2c:	pop	{r4, r5, r6, r7, fp, pc}
   13c30:	push	{r4, r5, r6, sl, fp, lr}
   13c34:	add	fp, sp, #16
   13c38:	mov	r4, r0
   13c3c:	bl	1120c <__errno_location@plt>
   13c40:	ldr	r6, [r0]
   13c44:	mov	r5, r0
   13c48:	mov	r0, r4
   13c4c:	bl	110b0 <free@plt>
   13c50:	str	r6, [r5]
   13c54:	pop	{r4, r5, r6, sl, fp, pc}
   13c58:	push	{r4, r5, r6, r7, fp, lr}
   13c5c:	add	fp, sp, #16
   13c60:	sub	sp, sp, #8
   13c64:	mov	r4, r0
   13c68:	ldr	r0, [r0, #4]
   13c6c:	mov	r5, r3
   13c70:	mov	r6, r2
   13c74:	ldr	r1, [r4, #8]
   13c78:	cmp	r1, r0
   13c7c:	bne	13c98 <__assert_fail@plt+0x2984>
   13c80:	ldrd	r0, [r4, #16]
   13c84:	cmp	r1, r0
   13c88:	bne	13c98 <__assert_fail@plt+0x2984>
   13c8c:	ldr	r0, [r4, #36]	; 0x24
   13c90:	cmp	r0, #0
   13c94:	beq	13cb0 <__assert_fail@plt+0x299c>
   13c98:	mov	r0, r4
   13c9c:	mov	r2, r6
   13ca0:	mov	r3, r5
   13ca4:	sub	sp, fp, #16
   13ca8:	pop	{r4, r5, r6, r7, fp, lr}
   13cac:	b	1126c <fseeko64@plt>
   13cb0:	ldr	r7, [fp, #8]
   13cb4:	mov	r0, r4
   13cb8:	bl	1123c <fileno@plt>
   13cbc:	mov	r2, r6
   13cc0:	mov	r3, r5
   13cc4:	str	r7, [sp]
   13cc8:	bl	11140 <lseek64@plt>
   13ccc:	and	r2, r0, r1
   13cd0:	cmn	r2, #1
   13cd4:	mvneq	r0, #0
   13cd8:	subeq	sp, fp, #16
   13cdc:	popeq	{r4, r5, r6, r7, fp, pc}
   13ce0:	strd	r0, [r4, #80]	; 0x50
   13ce4:	ldr	r0, [r4]
   13ce8:	bic	r0, r0, #16
   13cec:	str	r0, [r4]
   13cf0:	mov	r0, #0
   13cf4:	sub	sp, fp, #16
   13cf8:	pop	{r4, r5, r6, r7, fp, pc}
   13cfc:	push	{r4, sl, fp, lr}
   13d00:	add	fp, sp, #8
   13d04:	sub	sp, sp, #264	; 0x108
   13d08:	add	r1, sp, #7
   13d0c:	movw	r2, #257	; 0x101
   13d10:	bl	15fac <__assert_fail@plt+0x4c98>
   13d14:	mov	r4, #0
   13d18:	cmp	r0, #0
   13d1c:	bne	13d54 <__assert_fail@plt+0x2a40>
   13d20:	movw	r1, #39130	; 0x98da
   13d24:	add	r0, sp, #7
   13d28:	movt	r1, #1
   13d2c:	bl	1108c <strcmp@plt>
   13d30:	cmp	r0, #0
   13d34:	beq	13d54 <__assert_fail@plt+0x2a40>
   13d38:	movw	r1, #39132	; 0x98dc
   13d3c:	add	r0, sp, #7
   13d40:	movt	r1, #1
   13d44:	bl	1108c <strcmp@plt>
   13d48:	mov	r4, r0
   13d4c:	cmp	r0, #0
   13d50:	movwne	r4, #1
   13d54:	mov	r0, r4
   13d58:	sub	sp, fp, #8
   13d5c:	pop	{r4, sl, fp, pc}
   13d60:	mov	r1, #0
   13d64:	str	r1, [r0]
   13d68:	str	r1, [r0, #4]
   13d6c:	str	r1, [r0, #8]
   13d70:	bx	lr
   13d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d78:	add	fp, sp, #28
   13d7c:	sub	sp, sp, #4
   13d80:	mov	r9, r0
   13d84:	ldrb	r0, [r1]
   13d88:	tst	r0, #16
   13d8c:	bne	13e64 <__assert_fail@plt+0x2b50>
   13d90:	ldr	r4, [r9, #8]
   13d94:	ldr	r0, [r9]
   13d98:	mov	r5, r1
   13d9c:	mov	r8, #1
   13da0:	add	sl, r4, r0
   13da4:	mov	r6, r4
   13da8:	ldmib	r5, {r0, r1}
   13dac:	cmp	r0, r1
   13db0:	bcs	13e18 <__assert_fail@plt+0x2b04>
   13db4:	add	r1, r0, #1
   13db8:	str	r1, [r5, #4]
   13dbc:	ldrb	r7, [r0]
   13dc0:	cmp	r6, sl
   13dc4:	beq	13dd8 <__assert_fail@plt+0x2ac4>
   13dc8:	strb	r7, [r6], #1
   13dcc:	cmp	r7, #10
   13dd0:	bne	13da8 <__assert_fail@plt+0x2a94>
   13dd4:	b	13e50 <__assert_fail@plt+0x2b3c>
   13dd8:	ldr	r6, [r9]
   13ddc:	mov	r0, r4
   13de0:	mov	r1, r9
   13de4:	mov	r2, #1
   13de8:	mvn	r3, #0
   13dec:	str	r8, [sp]
   13df0:	bl	1694c <__assert_fail@plt+0x5638>
   13df4:	str	r0, [r9, #8]
   13df8:	mov	r4, r0
   13dfc:	add	r6, r0, r6
   13e00:	ldr	r0, [r9]
   13e04:	add	sl, r4, r0
   13e08:	strb	r7, [r6], #1
   13e0c:	cmp	r7, #10
   13e10:	bne	13da8 <__assert_fail@plt+0x2a94>
   13e14:	b	13e50 <__assert_fail@plt+0x2b3c>
   13e18:	mov	r0, r5
   13e1c:	bl	11284 <__uflow@plt>
   13e20:	mov	r7, r0
   13e24:	cmn	r0, #1
   13e28:	bne	13dc0 <__assert_fail@plt+0x2aac>
   13e2c:	cmp	r6, r4
   13e30:	beq	13e74 <__assert_fail@plt+0x2b60>
   13e34:	ldrb	r0, [r5]
   13e38:	tst	r0, #32
   13e3c:	bne	13e84 <__assert_fail@plt+0x2b70>
   13e40:	ldrb	r0, [r6, #-1]
   13e44:	mov	r7, #10
   13e48:	cmp	r0, #10
   13e4c:	bne	13dc0 <__assert_fail@plt+0x2aac>
   13e50:	sub	r0, r6, r4
   13e54:	str	r0, [r9, #4]
   13e58:	mov	r0, r9
   13e5c:	sub	sp, fp, #28
   13e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e64:	mov	r9, #0
   13e68:	mov	r0, r9
   13e6c:	sub	sp, fp, #28
   13e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e74:	mov	r9, #0
   13e78:	mov	r0, r9
   13e7c:	sub	sp, fp, #28
   13e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e84:	mov	r9, #0
   13e88:	mov	r0, r9
   13e8c:	sub	sp, fp, #28
   13e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e98:	add	fp, sp, #28
   13e9c:	sub	sp, sp, #4
   13ea0:	mov	sl, r0
   13ea4:	ldrb	r0, [r1]
   13ea8:	tst	r0, #16
   13eac:	bne	13f88 <__assert_fail@plt+0x2c74>
   13eb0:	ldr	r4, [sl, #8]
   13eb4:	ldr	r0, [sl]
   13eb8:	mov	r8, r2
   13ebc:	mov	r6, r1
   13ec0:	add	r9, r4, r0
   13ec4:	mov	r7, r4
   13ec8:	ldmib	r6, {r0, r1}
   13ecc:	cmp	r0, r1
   13ed0:	bcs	13f3c <__assert_fail@plt+0x2c28>
   13ed4:	add	r1, r0, #1
   13ed8:	str	r1, [r6, #4]
   13edc:	ldrb	r5, [r0]
   13ee0:	cmp	r7, r9
   13ee4:	beq	13ef8 <__assert_fail@plt+0x2be4>
   13ee8:	strb	r5, [r7], #1
   13eec:	cmp	r5, r8
   13ef0:	bne	13ec8 <__assert_fail@plt+0x2bb4>
   13ef4:	b	13f74 <__assert_fail@plt+0x2c60>
   13ef8:	ldr	r7, [sl]
   13efc:	mov	r0, #1
   13f00:	mov	r1, sl
   13f04:	mov	r2, #1
   13f08:	mvn	r3, #0
   13f0c:	str	r0, [sp]
   13f10:	mov	r0, r4
   13f14:	bl	1694c <__assert_fail@plt+0x5638>
   13f18:	str	r0, [sl, #8]
   13f1c:	mov	r4, r0
   13f20:	add	r7, r0, r7
   13f24:	ldr	r0, [sl]
   13f28:	add	r9, r4, r0
   13f2c:	strb	r5, [r7], #1
   13f30:	cmp	r5, r8
   13f34:	bne	13ec8 <__assert_fail@plt+0x2bb4>
   13f38:	b	13f74 <__assert_fail@plt+0x2c60>
   13f3c:	mov	r0, r6
   13f40:	bl	11284 <__uflow@plt>
   13f44:	mov	r5, r0
   13f48:	cmn	r0, #1
   13f4c:	bne	13ee0 <__assert_fail@plt+0x2bcc>
   13f50:	cmp	r7, r4
   13f54:	beq	13f98 <__assert_fail@plt+0x2c84>
   13f58:	ldrb	r0, [r6]
   13f5c:	tst	r0, #32
   13f60:	bne	13fa8 <__assert_fail@plt+0x2c94>
   13f64:	ldrb	r0, [r7, #-1]
   13f68:	mov	r5, r8
   13f6c:	cmp	r0, r8
   13f70:	bne	13ee0 <__assert_fail@plt+0x2bcc>
   13f74:	sub	r0, r7, r4
   13f78:	str	r0, [sl, #4]
   13f7c:	mov	r0, sl
   13f80:	sub	sp, fp, #28
   13f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f88:	mov	sl, #0
   13f8c:	mov	r0, sl
   13f90:	sub	sp, fp, #28
   13f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f98:	mov	sl, #0
   13f9c:	mov	r0, sl
   13fa0:	sub	sp, fp, #28
   13fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fa8:	mov	sl, #0
   13fac:	mov	r0, sl
   13fb0:	sub	sp, fp, #28
   13fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fb8:	ldr	r0, [r0, #8]
   13fbc:	b	13c30 <__assert_fail@plt+0x291c>
   13fc0:	push	{r4, r5, r6, sl, fp, lr}
   13fc4:	add	fp, sp, #16
   13fc8:	cmp	r2, #0
   13fcc:	moveq	r0, #0
   13fd0:	popeq	{r4, r5, r6, sl, fp, pc}
   13fd4:	mov	r4, r2
   13fd8:	mov	r5, r1
   13fdc:	mov	r6, r0
   13fe0:	bl	111ac <__ctype_toupper_loc@plt>
   13fe4:	ldr	r1, [r0]
   13fe8:	mov	r2, #0
   13fec:	ldrb	r0, [r5, r2]
   13ff0:	ldrb	r3, [r6, r2]
   13ff4:	ldr	r0, [r1, r0, lsl #2]
   13ff8:	ldr	r3, [r1, r3, lsl #2]
   13ffc:	subs	r0, r3, r0
   14000:	popne	{r4, r5, r6, sl, fp, pc}
   14004:	add	r2, r2, #1
   14008:	cmp	r2, r4
   1400c:	movcs	r0, #0
   14010:	popcs	{r4, r5, r6, sl, fp, pc}
   14014:	b	13fec <__assert_fail@plt+0x2cd8>
   14018:	push	{r4, r5, fp, lr}
   1401c:	add	fp, sp, #8
   14020:	cmp	r0, #0
   14024:	beq	140b8 <__assert_fail@plt+0x2da4>
   14028:	mov	r1, #47	; 0x2f
   1402c:	mov	r4, r0
   14030:	bl	112a8 <strrchr@plt>
   14034:	cmp	r0, #0
   14038:	mov	r5, r4
   1403c:	addne	r5, r0, #1
   14040:	sub	r0, r5, r4
   14044:	cmp	r0, #7
   14048:	blt	1409c <__assert_fail@plt+0x2d88>
   1404c:	movw	r1, #39194	; 0x991a
   14050:	sub	r0, r5, #7
   14054:	mov	r2, #7
   14058:	movt	r1, #1
   1405c:	bl	112e4 <strncmp@plt>
   14060:	cmp	r0, #0
   14064:	bne	1409c <__assert_fail@plt+0x2d88>
   14068:	movw	r1, #39202	; 0x9922
   1406c:	mov	r0, r5
   14070:	mov	r2, #3
   14074:	movt	r1, #1
   14078:	bl	112e4 <strncmp@plt>
   1407c:	cmp	r0, #0
   14080:	beq	1408c <__assert_fail@plt+0x2d78>
   14084:	mov	r4, r5
   14088:	b	1409c <__assert_fail@plt+0x2d88>
   1408c:	movw	r0, #41312	; 0xa160
   14090:	add	r4, r5, #3
   14094:	movt	r0, #2
   14098:	str	r4, [r0]
   1409c:	movw	r0, #41316	; 0xa164
   140a0:	movt	r0, #2
   140a4:	str	r4, [r0]
   140a8:	movw	r0, #41464	; 0xa1f8
   140ac:	movt	r0, #2
   140b0:	str	r4, [r0]
   140b4:	pop	{r4, r5, fp, pc}
   140b8:	movw	r0, #41328	; 0xa170
   140bc:	mov	r1, #55	; 0x37
   140c0:	mov	r2, #1
   140c4:	movt	r0, #2
   140c8:	ldr	r3, [r0]
   140cc:	movw	r0, #39138	; 0x98e2
   140d0:	movt	r0, #1
   140d4:	bl	11134 <fwrite@plt>
   140d8:	bl	112f0 <abort@plt>
   140dc:	push	{r4, r5, r6, sl, fp, lr}
   140e0:	add	fp, sp, #16
   140e4:	mov	r4, r0
   140e8:	movw	r0, #41472	; 0xa200
   140ec:	movt	r0, #2
   140f0:	cmp	r4, #0
   140f4:	moveq	r4, r0
   140f8:	bl	1120c <__errno_location@plt>
   140fc:	ldr	r6, [r0]
   14100:	mov	r5, r0
   14104:	mov	r0, r4
   14108:	mov	r1, #48	; 0x30
   1410c:	bl	16b7c <__assert_fail@plt+0x5868>
   14110:	str	r6, [r5]
   14114:	pop	{r4, r5, r6, sl, fp, pc}
   14118:	movw	r1, #41472	; 0xa200
   1411c:	cmp	r0, #0
   14120:	movt	r1, #2
   14124:	movne	r1, r0
   14128:	ldr	r0, [r1]
   1412c:	bx	lr
   14130:	movw	r2, #41472	; 0xa200
   14134:	cmp	r0, #0
   14138:	movt	r2, #2
   1413c:	movne	r2, r0
   14140:	str	r1, [r2]
   14144:	bx	lr
   14148:	movw	r3, #41472	; 0xa200
   1414c:	cmp	r0, #0
   14150:	movt	r3, #2
   14154:	movne	r3, r0
   14158:	ubfx	r0, r1, #5, #3
   1415c:	and	r1, r1, #31
   14160:	add	r0, r3, r0, lsl #2
   14164:	ldr	r3, [r0, #8]
   14168:	eor	r2, r2, r3, lsr r1
   1416c:	and	r2, r2, #1
   14170:	eor	r2, r3, r2, lsl r1
   14174:	str	r2, [r0, #8]
   14178:	mov	r0, #1
   1417c:	and	r0, r0, r3, lsr r1
   14180:	bx	lr
   14184:	movw	r2, #41472	; 0xa200
   14188:	cmp	r0, #0
   1418c:	movt	r2, #2
   14190:	movne	r2, r0
   14194:	ldr	r0, [r2, #4]
   14198:	str	r1, [r2, #4]
   1419c:	bx	lr
   141a0:	movw	r3, #41472	; 0xa200
   141a4:	cmp	r0, #0
   141a8:	movt	r3, #2
   141ac:	movne	r3, r0
   141b0:	cmp	r1, #0
   141b4:	mov	r0, #10
   141b8:	cmpne	r2, #0
   141bc:	str	r0, [r3]
   141c0:	bne	141d0 <__assert_fail@plt+0x2ebc>
   141c4:	push	{fp, lr}
   141c8:	mov	fp, sp
   141cc:	bl	112f0 <abort@plt>
   141d0:	str	r1, [r3, #40]	; 0x28
   141d4:	str	r2, [r3, #44]	; 0x2c
   141d8:	bx	lr
   141dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141e0:	add	fp, sp, #28
   141e4:	sub	sp, sp, #20
   141e8:	mov	r7, r0
   141ec:	ldr	r0, [fp, #8]
   141f0:	movw	r5, #41472	; 0xa200
   141f4:	mov	r8, r3
   141f8:	mov	r9, r2
   141fc:	mov	sl, r1
   14200:	movt	r5, #2
   14204:	cmp	r0, #0
   14208:	movne	r5, r0
   1420c:	bl	1120c <__errno_location@plt>
   14210:	mov	r4, r0
   14214:	ldm	r5, {r0, r1}
   14218:	ldr	r2, [r5, #40]	; 0x28
   1421c:	ldr	r3, [r5, #44]	; 0x2c
   14220:	add	r5, r5, #8
   14224:	ldr	r6, [r4]
   14228:	stm	sp, {r0, r1, r5}
   1422c:	str	r2, [sp, #12]
   14230:	str	r3, [sp, #16]
   14234:	mov	r0, r7
   14238:	mov	r1, sl
   1423c:	mov	r2, r9
   14240:	mov	r3, r8
   14244:	bl	14254 <__assert_fail@plt+0x2f40>
   14248:	str	r6, [r4]
   1424c:	sub	sp, fp, #28
   14250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14258:	add	fp, sp, #28
   1425c:	sub	sp, sp, #156	; 0x9c
   14260:	str	r0, [sp, #76]	; 0x4c
   14264:	ldr	r0, [fp, #12]
   14268:	mov	r6, r1
   1426c:	str	r3, [sp, #84]	; 0x54
   14270:	str	r2, [fp, #-84]	; 0xffffffac
   14274:	and	r1, r0, #4
   14278:	str	r1, [sp, #24]
   1427c:	and	r1, r0, #1
   14280:	str	r1, [sp, #28]
   14284:	ubfx	r8, r0, #1, #1
   14288:	bl	1114c <__ctype_get_mb_cur_max@plt>
   1428c:	str	r0, [sp, #32]
   14290:	ldr	r0, [fp, #24]
   14294:	ldr	r7, [fp, #8]
   14298:	mov	r1, #0
   1429c:	mov	r2, #0
   142a0:	mov	r4, #1
   142a4:	str	r1, [sp, #52]	; 0x34
   142a8:	str	r0, [sp, #72]	; 0x48
   142ac:	ldr	r0, [fp, #20]
   142b0:	str	r0, [sp, #68]	; 0x44
   142b4:	mov	r0, #0
   142b8:	str	r0, [sp, #48]	; 0x30
   142bc:	mov	r0, #0
   142c0:	str	r0, [sp, #92]	; 0x5c
   142c4:	mov	r0, #0
   142c8:	str	r0, [fp, #-76]	; 0xffffffb4
   142cc:	mov	r0, #0
   142d0:	cmp	r7, #10
   142d4:	bhi	155bc <__assert_fail@plt+0x42a8>
   142d8:	add	r1, pc, #28
   142dc:	mov	sl, r6
   142e0:	ldr	r6, [sp, #76]	; 0x4c
   142e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   142e8:	ldr	lr, [sp, #84]	; 0x54
   142ec:	mov	r9, #0
   142f0:	mov	r3, #1
   142f4:	mov	r5, #0
   142f8:	ldr	pc, [r1, r7, lsl #2]
   142fc:	andeq	r4, r1, ip, asr #7
   14300:	andeq	r4, r1, r8, lsl #8
   14304:	ldrdeq	r4, [r1], -ip
   14308:	andeq	r4, r1, r4, asr #7
   1430c:	strdeq	r4, [r1], -ip
   14310:	andeq	r4, r1, r0, lsr r4
   14314:	andeq	r4, r1, ip, ror #7
   14318:	andeq	r4, r1, ip, lsr r6
   1431c:	andeq	r4, r1, r8, lsr #6
   14320:	andeq	r4, r1, r8, lsr #6
   14324:	ldrdeq	r4, [r1], -r0
   14328:	mov	r9, r4
   1432c:	movw	r4, #39284	; 0x9974
   14330:	mov	r5, r8
   14334:	mov	r8, r2
   14338:	mov	r0, #0
   1433c:	mov	r2, #5
   14340:	movt	r4, #1
   14344:	mov	r1, r4
   14348:	bl	11104 <dcgettext@plt>
   1434c:	cmp	r0, r4
   14350:	str	r0, [sp, #68]	; 0x44
   14354:	bne	144e4 <__assert_fail@plt+0x31d0>
   14358:	bl	1870c <__assert_fail@plt+0x73f8>
   1435c:	ldrb	r1, [r0]
   14360:	and	r1, r1, #223	; 0xdf
   14364:	cmp	r1, #71	; 0x47
   14368:	beq	144b0 <__assert_fail@plt+0x319c>
   1436c:	cmp	r1, #85	; 0x55
   14370:	bne	144c8 <__assert_fail@plt+0x31b4>
   14374:	ldrb	r1, [r0, #1]
   14378:	and	r1, r1, #223	; 0xdf
   1437c:	cmp	r1, #84	; 0x54
   14380:	bne	144c8 <__assert_fail@plt+0x31b4>
   14384:	ldrb	r1, [r0, #2]
   14388:	and	r1, r1, #223	; 0xdf
   1438c:	cmp	r1, #70	; 0x46
   14390:	bne	144c8 <__assert_fail@plt+0x31b4>
   14394:	ldrb	r1, [r0, #3]
   14398:	cmp	r1, #45	; 0x2d
   1439c:	ldrbeq	r1, [r0, #4]
   143a0:	cmpeq	r1, #56	; 0x38
   143a4:	bne	144c8 <__assert_fail@plt+0x31b4>
   143a8:	ldrb	r0, [r0, #5]
   143ac:	cmp	r0, #0
   143b0:	movw	r0, #39288	; 0x9978
   143b4:	movt	r0, #1
   143b8:	str	r0, [sp, #68]	; 0x44
   143bc:	bne	144c8 <__assert_fail@plt+0x31b4>
   143c0:	b	144e4 <__assert_fail@plt+0x31d0>
   143c4:	mov	r0, #1
   143c8:	b	14408 <__assert_fail@plt+0x30f4>
   143cc:	mov	r7, #0
   143d0:	mov	r9, #0
   143d4:	mov	r3, r0
   143d8:	b	144a8 <__assert_fail@plt+0x3194>
   143dc:	tst	r8, #1
   143e0:	bne	14408 <__assert_fail@plt+0x30f4>
   143e4:	mov	r3, r0
   143e8:	b	14460 <__assert_fail@plt+0x314c>
   143ec:	mov	r0, #1
   143f0:	mov	r9, #0
   143f4:	mov	r7, #5
   143f8:	b	14444 <__assert_fail@plt+0x3130>
   143fc:	mov	r3, #1
   14400:	tst	r8, #1
   14404:	beq	14460 <__assert_fail@plt+0x314c>
   14408:	mov	r1, #1
   1440c:	mov	r9, #0
   14410:	mov	r7, #2
   14414:	mov	r3, r0
   14418:	mov	r5, #1
   1441c:	str	r1, [fp, #-76]	; 0xffffffb4
   14420:	movw	r1, #39286	; 0x9976
   14424:	movt	r1, #1
   14428:	str	r1, [sp, #92]	; 0x5c
   1442c:	b	1463c <__assert_fail@plt+0x3328>
   14430:	mov	r7, #5
   14434:	tst	r8, #1
   14438:	beq	14480 <__assert_fail@plt+0x316c>
   1443c:	mov	r0, #1
   14440:	mov	r9, #0
   14444:	str	r0, [fp, #-76]	; 0xffffffb4
   14448:	movw	r0, #39282	; 0x9972
   1444c:	mov	r3, #1
   14450:	mov	r5, #1
   14454:	movt	r0, #1
   14458:	str	r0, [sp, #92]	; 0x5c
   1445c:	b	1463c <__assert_fail@plt+0x3328>
   14460:	cmp	sl, #0
   14464:	mov	r9, #1
   14468:	mov	r7, #2
   1446c:	movne	r0, #39	; 0x27
   14470:	strbne	r0, [r6]
   14474:	movw	r0, #39286	; 0x9976
   14478:	movt	r0, #1
   1447c:	b	1449c <__assert_fail@plt+0x3188>
   14480:	cmp	sl, #0
   14484:	mov	r9, #1
   14488:	mov	r3, #1
   1448c:	movne	r0, #34	; 0x22
   14490:	strbne	r0, [r6]
   14494:	movw	r0, #39282	; 0x9972
   14498:	movt	r0, #1
   1449c:	str	r0, [sp, #92]	; 0x5c
   144a0:	mov	r0, #1
   144a4:	str	r0, [fp, #-76]	; 0xffffffb4
   144a8:	mov	r5, #0
   144ac:	b	1463c <__assert_fail@plt+0x3328>
   144b0:	ldrb	r1, [r0, #1]
   144b4:	and	r1, r1, #223	; 0xdf
   144b8:	cmp	r1, #66	; 0x42
   144bc:	ldrbeq	r1, [r0, #2]
   144c0:	cmpeq	r1, #49	; 0x31
   144c4:	beq	153e4 <__assert_fail@plt+0x40d0>
   144c8:	movw	r0, #39286	; 0x9976
   144cc:	movw	r1, #39282	; 0x9972
   144d0:	cmp	r7, #9
   144d4:	movt	r0, #1
   144d8:	movt	r1, #1
   144dc:	moveq	r0, r1
   144e0:	str	r0, [sp, #68]	; 0x44
   144e4:	movw	r4, #39286	; 0x9976
   144e8:	mov	r0, #0
   144ec:	mov	r2, #5
   144f0:	movt	r4, #1
   144f4:	mov	r1, r4
   144f8:	bl	11104 <dcgettext@plt>
   144fc:	cmp	r0, r4
   14500:	str	r0, [sp, #72]	; 0x48
   14504:	beq	14514 <__assert_fail@plt+0x3200>
   14508:	mov	r4, r9
   1450c:	mov	r2, r8
   14510:	b	145cc <__assert_fail@plt+0x32b8>
   14514:	bl	1870c <__assert_fail@plt+0x73f8>
   14518:	ldrb	r1, [r0]
   1451c:	mov	r4, r9
   14520:	and	r1, r1, #223	; 0xdf
   14524:	cmp	r1, #71	; 0x47
   14528:	beq	14584 <__assert_fail@plt+0x3270>
   1452c:	cmp	r1, #85	; 0x55
   14530:	mov	r2, r8
   14534:	bne	145ac <__assert_fail@plt+0x3298>
   14538:	ldrb	r1, [r0, #1]
   1453c:	and	r1, r1, #223	; 0xdf
   14540:	cmp	r1, #84	; 0x54
   14544:	bne	145ac <__assert_fail@plt+0x3298>
   14548:	ldrb	r1, [r0, #2]
   1454c:	and	r1, r1, #223	; 0xdf
   14550:	cmp	r1, #70	; 0x46
   14554:	ldrbeq	r1, [r0, #3]
   14558:	cmpeq	r1, #45	; 0x2d
   1455c:	bne	145ac <__assert_fail@plt+0x3298>
   14560:	ldrb	r1, [r0, #4]
   14564:	cmp	r1, #56	; 0x38
   14568:	ldrbeq	r0, [r0, #5]
   1456c:	cmpeq	r0, #0
   14570:	bne	145ac <__assert_fail@plt+0x3298>
   14574:	movw	r0, #39292	; 0x997c
   14578:	movt	r0, #1
   1457c:	str	r0, [sp, #72]	; 0x48
   14580:	b	145cc <__assert_fail@plt+0x32b8>
   14584:	ldrb	r1, [r0, #1]
   14588:	mov	r2, r8
   1458c:	and	r1, r1, #223	; 0xdf
   14590:	cmp	r1, #66	; 0x42
   14594:	bne	145ac <__assert_fail@plt+0x3298>
   14598:	ldrb	r1, [r0, #2]
   1459c:	cmp	r1, #49	; 0x31
   145a0:	ldrbeq	r1, [r0, #3]
   145a4:	cmpeq	r1, #56	; 0x38
   145a8:	beq	15428 <__assert_fail@plt+0x4114>
   145ac:	movw	r0, #39286	; 0x9976
   145b0:	cmp	r7, #9
   145b4:	movt	r0, #1
   145b8:	mov	r1, r0
   145bc:	movw	r0, #39282	; 0x9972
   145c0:	movt	r0, #1
   145c4:	moveq	r1, r0
   145c8:	str	r1, [sp, #72]	; 0x48
   145cc:	mov	r8, r5
   145d0:	mov	r9, #0
   145d4:	tst	r8, #1
   145d8:	mov	r5, r8
   145dc:	str	r2, [fp, #-48]	; 0xffffffd0
   145e0:	bne	14618 <__assert_fail@plt+0x3304>
   145e4:	ldr	r0, [sp, #68]	; 0x44
   145e8:	ldrb	r0, [r0]
   145ec:	cmp	r0, #0
   145f0:	beq	14618 <__assert_fail@plt+0x3304>
   145f4:	ldr	r1, [sp, #68]	; 0x44
   145f8:	mov	r9, #0
   145fc:	add	r1, r1, #1
   14600:	cmp	r9, sl
   14604:	strbcc	r0, [r6, r9]
   14608:	ldrb	r0, [r1, r9]
   1460c:	add	r9, r9, #1
   14610:	cmp	r0, #0
   14614:	bne	14600 <__assert_fail@plt+0x32ec>
   14618:	ldr	r8, [sp, #72]	; 0x48
   1461c:	mov	r0, r8
   14620:	bl	111f4 <strlen@plt>
   14624:	ldr	ip, [fp, #-84]	; 0xffffffac
   14628:	ldr	lr, [sp, #84]	; 0x54
   1462c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14630:	str	r0, [fp, #-76]	; 0xffffffb4
   14634:	str	r8, [sp, #92]	; 0x5c
   14638:	mov	r3, #1
   1463c:	ldr	r0, [fp, #16]
   14640:	str	r7, [fp, #-64]	; 0xffffffc0
   14644:	str	r5, [fp, #-72]	; 0xffffffb8
   14648:	str	r3, [sp, #80]	; 0x50
   1464c:	cmp	r0, #0
   14650:	movwne	r0, #1
   14654:	and	r0, r0, r5
   14658:	str	r0, [fp, #-88]	; 0xffffffa8
   1465c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14660:	cmp	r0, #0
   14664:	movwne	r0, #1
   14668:	subs	r7, r7, #2
   1466c:	and	r1, r0, r5
   14670:	str	r7, [fp, #-80]	; 0xffffffb0
   14674:	and	r1, r3, r1
   14678:	str	r1, [sp, #40]	; 0x28
   1467c:	clz	r1, r7
   14680:	lsr	r1, r1, #5
   14684:	and	r1, r1, r5
   14688:	eor	r5, r5, #1
   1468c:	str	r1, [sp, #36]	; 0x24
   14690:	mov	r1, r7
   14694:	str	r5, [sp, #88]	; 0x58
   14698:	mov	r7, #0
   1469c:	movwne	r1, #1
   146a0:	orr	r5, r1, r5
   146a4:	and	r1, r1, r3
   146a8:	and	r0, r0, r1
   146ac:	str	r5, [sp, #60]	; 0x3c
   146b0:	str	r1, [fp, #-68]	; 0xffffffbc
   146b4:	str	r0, [fp, #-60]	; 0xffffffc4
   146b8:	eor	r0, r3, #1
   146bc:	str	r0, [sp, #44]	; 0x2c
   146c0:	cmn	lr, #1
   146c4:	beq	146d4 <__assert_fail@plt+0x33c0>
   146c8:	cmp	r7, lr
   146cc:	bne	146e0 <__assert_fail@plt+0x33cc>
   146d0:	b	15358 <__assert_fail@plt+0x4044>
   146d4:	ldrb	r0, [ip, r7]
   146d8:	cmp	r0, #0
   146dc:	beq	15360 <__assert_fail@plt+0x404c>
   146e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   146e4:	mov	r8, #0
   146e8:	str	r4, [fp, #-52]	; 0xffffffcc
   146ec:	str	r2, [fp, #-48]	; 0xffffffd0
   146f0:	cmp	r0, #0
   146f4:	beq	14728 <__assert_fail@plt+0x3414>
   146f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   146fc:	add	r4, r7, r0
   14700:	cmp	r0, #2
   14704:	bcc	14720 <__assert_fail@plt+0x340c>
   14708:	cmn	lr, #1
   1470c:	bne	14720 <__assert_fail@plt+0x340c>
   14710:	mov	r0, ip
   14714:	bl	111f4 <strlen@plt>
   14718:	ldr	ip, [fp, #-84]	; 0xffffffac
   1471c:	mov	lr, r0
   14720:	cmp	r4, lr
   14724:	bls	14740 <__assert_fail@plt+0x342c>
   14728:	mov	r0, #0
   1472c:	str	r0, [fp, #-56]	; 0xffffffc8
   14730:	ldrb	r5, [ip, r7]
   14734:	cmp	r5, #126	; 0x7e
   14738:	bls	14790 <__assert_fail@plt+0x347c>
   1473c:	b	14b98 <__assert_fail@plt+0x3884>
   14740:	ldr	r1, [sp, #92]	; 0x5c
   14744:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14748:	add	r0, ip, r7
   1474c:	mov	r4, lr
   14750:	bl	110f8 <memcmp@plt>
   14754:	ldr	r2, [sp, #88]	; 0x58
   14758:	cmp	r0, #0
   1475c:	mov	r1, r0
   14760:	movwne	r1, #1
   14764:	orr	r1, r1, r2
   14768:	tst	r1, #1
   1476c:	beq	1546c <__assert_fail@plt+0x4158>
   14770:	ldr	ip, [fp, #-84]	; 0xffffffac
   14774:	clz	r0, r0
   14778:	mov	lr, r4
   1477c:	lsr	r0, r0, #5
   14780:	str	r0, [fp, #-56]	; 0xffffffc8
   14784:	ldrb	r5, [ip, r7]
   14788:	cmp	r5, #126	; 0x7e
   1478c:	bhi	14b98 <__assert_fail@plt+0x3884>
   14790:	add	r3, pc, #16
   14794:	mov	r4, #1
   14798:	mov	r2, #110	; 0x6e
   1479c:	mov	r0, #97	; 0x61
   147a0:	mov	r1, #0
   147a4:	ldr	pc, [r3, r5, lsl #2]
   147a8:	andeq	r4, r1, r8, ror sl
   147ac:	muleq	r1, r8, fp
   147b0:	muleq	r1, r8, fp
   147b4:	muleq	r1, r8, fp
   147b8:	muleq	r1, r8, fp
   147bc:	muleq	r1, r8, fp
   147c0:	muleq	r1, r8, fp
   147c4:	andeq	r4, r1, r4, ror ip
   147c8:	andeq	r4, r1, r8, asr sl
   147cc:	andeq	r4, r1, r0, asr #20
   147d0:	andeq	r4, r1, r4, ror #20
   147d4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147d8:	andeq	r4, r1, r8, lsr sl
   147dc:	andeq	r4, r1, r0, ror #20
   147e0:	muleq	r1, r8, fp
   147e4:	muleq	r1, r8, fp
   147e8:	muleq	r1, r8, fp
   147ec:	muleq	r1, r8, fp
   147f0:	muleq	r1, r8, fp
   147f4:	muleq	r1, r8, fp
   147f8:	muleq	r1, r8, fp
   147fc:	muleq	r1, r8, fp
   14800:	muleq	r1, r8, fp
   14804:	muleq	r1, r8, fp
   14808:	muleq	r1, r8, fp
   1480c:	muleq	r1, r8, fp
   14810:	muleq	r1, r8, fp
   14814:	muleq	r1, r8, fp
   14818:	muleq	r1, r8, fp
   1481c:	muleq	r1, r8, fp
   14820:	muleq	r1, r8, fp
   14824:	muleq	r1, r8, fp
   14828:	strdeq	r4, [r1], -r0
   1482c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14830:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14834:	andeq	r4, r1, r4, asr #19
   14838:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1483c:	andeq	r4, r1, r4, lsr #19
   14840:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14844:	strdeq	r4, [r1], -ip
   14848:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1484c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14850:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14854:	andeq	r4, r1, r4, lsr #19
   14858:	andeq	r4, r1, r4, lsr #19
   1485c:	andeq	r4, r1, r4, lsr #19
   14860:	andeq	r4, r1, r4, lsr #19
   14864:	andeq	r4, r1, r4, lsr #19
   14868:	andeq	r4, r1, r4, lsr #19
   1486c:	andeq	r4, r1, r4, lsr #19
   14870:	andeq	r4, r1, r4, lsr #19
   14874:	andeq	r4, r1, r4, lsr #19
   14878:	andeq	r4, r1, r4, lsr #19
   1487c:	andeq	r4, r1, r4, lsr #19
   14880:	andeq	r4, r1, r4, lsr #19
   14884:	andeq	r4, r1, r4, lsr #19
   14888:	andeq	r4, r1, r4, lsr #19
   1488c:	andeq	r4, r1, r4, lsr #19
   14890:	andeq	r4, r1, r4, lsr #19
   14894:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14898:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1489c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148a0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148a4:			; <UNDEFINED> instruction: 0x00014ab8
   148a8:	muleq	r1, r8, fp
   148ac:	andeq	r4, r1, r4, lsr #19
   148b0:	andeq	r4, r1, r4, lsr #19
   148b4:	andeq	r4, r1, r4, lsr #19
   148b8:	andeq	r4, r1, r4, lsr #19
   148bc:	andeq	r4, r1, r4, lsr #19
   148c0:	andeq	r4, r1, r4, lsr #19
   148c4:	andeq	r4, r1, r4, lsr #19
   148c8:	andeq	r4, r1, r4, lsr #19
   148cc:	andeq	r4, r1, r4, lsr #19
   148d0:	andeq	r4, r1, r4, lsr #19
   148d4:	andeq	r4, r1, r4, lsr #19
   148d8:	andeq	r4, r1, r4, lsr #19
   148dc:	andeq	r4, r1, r4, lsr #19
   148e0:	andeq	r4, r1, r4, lsr #19
   148e4:	andeq	r4, r1, r4, lsr #19
   148e8:	andeq	r4, r1, r4, lsr #19
   148ec:	andeq	r4, r1, r4, lsr #19
   148f0:	andeq	r4, r1, r4, lsr #19
   148f4:	andeq	r4, r1, r4, lsr #19
   148f8:	andeq	r4, r1, r4, lsr #19
   148fc:	andeq	r4, r1, r4, lsr #19
   14900:	andeq	r4, r1, r4, lsr #19
   14904:	andeq	r4, r1, r4, lsr #19
   14908:	andeq	r4, r1, r4, lsr #19
   1490c:	andeq	r4, r1, r4, lsr #19
   14910:	andeq	r4, r1, r4, lsr #19
   14914:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14918:	andeq	r4, r1, r4, lsl #20
   1491c:	andeq	r4, r1, r4, lsr #19
   14920:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14924:	andeq	r4, r1, r4, lsr #19
   14928:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1492c:	andeq	r4, r1, r4, lsr #19
   14930:	andeq	r4, r1, r4, lsr #19
   14934:	andeq	r4, r1, r4, lsr #19
   14938:	andeq	r4, r1, r4, lsr #19
   1493c:	andeq	r4, r1, r4, lsr #19
   14940:	andeq	r4, r1, r4, lsr #19
   14944:	andeq	r4, r1, r4, lsr #19
   14948:	andeq	r4, r1, r4, lsr #19
   1494c:	andeq	r4, r1, r4, lsr #19
   14950:	andeq	r4, r1, r4, lsr #19
   14954:	andeq	r4, r1, r4, lsr #19
   14958:	andeq	r4, r1, r4, lsr #19
   1495c:	andeq	r4, r1, r4, lsr #19
   14960:	andeq	r4, r1, r4, lsr #19
   14964:	andeq	r4, r1, r4, lsr #19
   14968:	andeq	r4, r1, r4, lsr #19
   1496c:	andeq	r4, r1, r4, lsr #19
   14970:	andeq	r4, r1, r4, lsr #19
   14974:	andeq	r4, r1, r4, lsr #19
   14978:	andeq	r4, r1, r4, lsr #19
   1497c:	andeq	r4, r1, r4, lsr #19
   14980:	andeq	r4, r1, r4, lsr #19
   14984:	andeq	r4, r1, r4, lsr #19
   14988:	andeq	r4, r1, r4, lsr #19
   1498c:	andeq	r4, r1, r4, lsr #19
   14990:	andeq	r4, r1, r4, lsr #19
   14994:	andeq	r4, r1, r4, ror #19
   14998:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1499c:	andeq	r4, r1, r4, ror #19
   149a0:	andeq	r4, r1, r4, asr #19
   149a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   149a8:	cmp	r0, #0
   149ac:	beq	14c88 <__assert_fail@plt+0x3974>
   149b0:	ldr	r0, [fp, #16]
   149b4:	cmp	r0, #0
   149b8:	mov	r0, r5
   149bc:	bne	14c98 <__assert_fail@plt+0x3984>
   149c0:	b	14cb8 <__assert_fail@plt+0x39a4>
   149c4:	mov	r4, #0
   149c8:	cmp	r7, #0
   149cc:	beq	14bf0 <__assert_fail@plt+0x38dc>
   149d0:	mov	r8, #0
   149d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   149d8:	cmp	r0, #0
   149dc:	bne	149b0 <__assert_fail@plt+0x369c>
   149e0:	b	14c88 <__assert_fail@plt+0x3974>
   149e4:	mov	r4, #0
   149e8:	cmn	lr, #1
   149ec:	beq	14bc8 <__assert_fail@plt+0x38b4>
   149f0:	cmp	r7, #0
   149f4:	bne	149d0 <__assert_fail@plt+0x36bc>
   149f8:	cmp	lr, #1
   149fc:	beq	14bf0 <__assert_fail@plt+0x38dc>
   14a00:	b	149d0 <__assert_fail@plt+0x36bc>
   14a04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14a08:	cmp	r0, #2
   14a0c:	bne	14c20 <__assert_fail@plt+0x390c>
   14a10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14a14:	tst	r0, #1
   14a18:	bne	15480 <__assert_fail@plt+0x416c>
   14a1c:	mov	r8, #0
   14a20:	mov	r0, #92	; 0x5c
   14a24:	mov	r4, #0
   14a28:	cmp	r8, #0
   14a2c:	beq	14c40 <__assert_fail@plt+0x392c>
   14a30:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14a34:	b	14d34 <__assert_fail@plt+0x3a20>
   14a38:	mov	r0, #102	; 0x66
   14a3c:	b	14c74 <__assert_fail@plt+0x3960>
   14a40:	mov	r2, #116	; 0x74
   14a44:	ldr	r0, [sp, #60]	; 0x3c
   14a48:	tst	r0, #1
   14a4c:	mov	r0, r2
   14a50:	bne	14c74 <__assert_fail@plt+0x3960>
   14a54:	b	15480 <__assert_fail@plt+0x416c>
   14a58:	mov	r0, #98	; 0x62
   14a5c:	b	14c74 <__assert_fail@plt+0x3960>
   14a60:	mov	r2, #114	; 0x72
   14a64:	ldr	r0, [sp, #60]	; 0x3c
   14a68:	tst	r0, #1
   14a6c:	mov	r0, r2
   14a70:	bne	14c74 <__assert_fail@plt+0x3960>
   14a74:	b	15480 <__assert_fail@plt+0x416c>
   14a78:	ldr	r0, [sp, #80]	; 0x50
   14a7c:	tst	r0, #1
   14a80:	beq	14d5c <__assert_fail@plt+0x3a48>
   14a84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14a88:	tst	r0, #1
   14a8c:	bne	155a8 <__assert_fail@plt+0x4294>
   14a90:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14a94:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14a98:	cmp	r0, #2
   14a9c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14aa0:	movwne	r0, #1
   14aa4:	orr	r0, r0, r2
   14aa8:	tst	r0, #1
   14aac:	beq	15054 <__assert_fail@plt+0x3d40>
   14ab0:	mov	r0, r9
   14ab4:	b	15088 <__assert_fail@plt+0x3d74>
   14ab8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14abc:	mov	r8, #0
   14ac0:	mov	r5, #63	; 0x3f
   14ac4:	cmp	r0, #5
   14ac8:	beq	14f10 <__assert_fail@plt+0x3bfc>
   14acc:	cmp	r0, #2
   14ad0:	bne	14fc0 <__assert_fail@plt+0x3cac>
   14ad4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14ad8:	tst	r0, #1
   14adc:	bne	15480 <__assert_fail@plt+0x416c>
   14ae0:	mov	r4, #0
   14ae4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14ae8:	cmp	r0, #0
   14aec:	bne	149b0 <__assert_fail@plt+0x369c>
   14af0:	b	14c88 <__assert_fail@plt+0x3974>
   14af4:	mov	r0, #118	; 0x76
   14af8:	b	14c74 <__assert_fail@plt+0x3960>
   14afc:	mov	r0, #1
   14b00:	mov	r5, #39	; 0x27
   14b04:	str	r0, [sp, #52]	; 0x34
   14b08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14b0c:	cmp	r0, #2
   14b10:	bne	14b84 <__assert_fail@plt+0x3870>
   14b14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14b18:	tst	r0, #1
   14b1c:	bne	15480 <__assert_fail@plt+0x416c>
   14b20:	ldr	r2, [sp, #48]	; 0x30
   14b24:	clz	r1, sl
   14b28:	mov	r8, #0
   14b2c:	lsr	r1, r1, #5
   14b30:	cmp	r2, #0
   14b34:	mov	r0, r2
   14b38:	movwne	r0, #1
   14b3c:	orrs	r0, r0, r1
   14b40:	moveq	r2, sl
   14b44:	moveq	sl, r0
   14b48:	cmp	r9, sl
   14b4c:	str	r2, [sp, #48]	; 0x30
   14b50:	movcc	r0, #39	; 0x27
   14b54:	strbcc	r0, [r6, r9]
   14b58:	add	r0, r9, #1
   14b5c:	cmp	r0, sl
   14b60:	movcc	r1, #92	; 0x5c
   14b64:	strbcc	r1, [r6, r0]
   14b68:	add	r0, r9, #2
   14b6c:	add	r9, r9, #3
   14b70:	cmp	r0, sl
   14b74:	movcc	r1, #39	; 0x27
   14b78:	strbcc	r1, [r6, r0]
   14b7c:	mov	r0, #0
   14b80:	str	r0, [fp, #-48]	; 0xffffffd0
   14b84:	mov	r4, #1
   14b88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14b8c:	cmp	r0, #0
   14b90:	bne	149b0 <__assert_fail@plt+0x369c>
   14b94:	b	14c88 <__assert_fail@plt+0x3974>
   14b98:	ldr	r0, [sp, #32]
   14b9c:	cmp	r0, #1
   14ba0:	bne	14d8c <__assert_fail@plt+0x3a78>
   14ba4:	str	lr, [sp, #84]	; 0x54
   14ba8:	bl	111d0 <__ctype_b_loc@plt>
   14bac:	ldr	r0, [r0]
   14bb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14bb4:	mov	r1, #1
   14bb8:	add	r0, r0, r5, lsl #1
   14bbc:	ldrb	r0, [r0, #1]
   14bc0:	ubfx	r4, r0, #6, #1
   14bc4:	b	15184 <__assert_fail@plt+0x3e70>
   14bc8:	cmp	r7, #0
   14bcc:	ldrbeq	r0, [ip, #1]
   14bd0:	cmpeq	r0, #0
   14bd4:	beq	14bf0 <__assert_fail@plt+0x38dc>
   14bd8:	mvn	lr, #0
   14bdc:	mov	r8, #0
   14be0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14be4:	cmp	r0, #0
   14be8:	bne	149b0 <__assert_fail@plt+0x369c>
   14bec:	b	14c88 <__assert_fail@plt+0x3974>
   14bf0:	mov	r1, #1
   14bf4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14bf8:	cmp	r0, #2
   14bfc:	bne	14c0c <__assert_fail@plt+0x38f8>
   14c00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14c04:	tst	r0, #1
   14c08:	bne	15480 <__assert_fail@plt+0x416c>
   14c0c:	mov	r4, r1
   14c10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14c14:	cmp	r0, #0
   14c18:	bne	149b0 <__assert_fail@plt+0x369c>
   14c1c:	b	14c88 <__assert_fail@plt+0x3974>
   14c20:	ldr	r1, [sp, #40]	; 0x28
   14c24:	mov	r8, #0
   14c28:	mov	r0, #92	; 0x5c
   14c2c:	cmp	r1, #0
   14c30:	beq	14c74 <__assert_fail@plt+0x3960>
   14c34:	mov	r4, #0
   14c38:	cmp	r8, #0
   14c3c:	bne	14a30 <__assert_fail@plt+0x371c>
   14c40:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14c44:	tst	r2, #1
   14c48:	beq	14d34 <__assert_fail@plt+0x3a20>
   14c4c:	cmp	r9, sl
   14c50:	movcc	r1, #39	; 0x27
   14c54:	strbcc	r1, [r6, r9]
   14c58:	add	r1, r9, #1
   14c5c:	add	r9, r9, #2
   14c60:	cmp	r1, sl
   14c64:	movcc	r2, #39	; 0x27
   14c68:	strbcc	r2, [r6, r1]
   14c6c:	mov	r2, #0
   14c70:	b	14d34 <__assert_fail@plt+0x3a20>
   14c74:	ldr	r1, [sp, #80]	; 0x50
   14c78:	mov	r4, #0
   14c7c:	mov	r8, #0
   14c80:	tst	r1, #1
   14c84:	bne	14cc4 <__assert_fail@plt+0x39b0>
   14c88:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14c8c:	cmp	r0, #0
   14c90:	mov	r0, r5
   14c94:	beq	14cb8 <__assert_fail@plt+0x39a4>
   14c98:	ldr	r1, [fp, #16]
   14c9c:	ubfx	r0, r5, #5, #3
   14ca0:	mov	r2, #1
   14ca4:	ldr	r0, [r1, r0, lsl #2]
   14ca8:	and	r1, r5, #31
   14cac:	tst	r0, r2, lsl r1
   14cb0:	mov	r0, r5
   14cb4:	bne	14cc4 <__assert_fail@plt+0x39b0>
   14cb8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14cbc:	cmp	r1, #0
   14cc0:	beq	1511c <__assert_fail@plt+0x3e08>
   14cc4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14cc8:	tst	r1, #1
   14ccc:	bne	15460 <__assert_fail@plt+0x414c>
   14cd0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14cd4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14cd8:	cmp	r1, #2
   14cdc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14ce0:	movwne	r1, #1
   14ce4:	orr	r1, r1, r2
   14ce8:	tst	r1, #1
   14cec:	bne	14d24 <__assert_fail@plt+0x3a10>
   14cf0:	cmp	r9, sl
   14cf4:	movcc	r1, #39	; 0x27
   14cf8:	strbcc	r1, [r6, r9]
   14cfc:	add	r1, r9, #1
   14d00:	cmp	r1, sl
   14d04:	movcc	r2, #36	; 0x24
   14d08:	strbcc	r2, [r6, r1]
   14d0c:	add	r1, r9, #2
   14d10:	add	r9, r9, #3
   14d14:	cmp	r1, sl
   14d18:	movcc	r2, #39	; 0x27
   14d1c:	strbcc	r2, [r6, r1]
   14d20:	mov	r2, #1
   14d24:	cmp	r9, sl
   14d28:	movcc	r1, #92	; 0x5c
   14d2c:	strbcc	r1, [r6, r9]
   14d30:	add	r9, r9, #1
   14d34:	cmp	r9, sl
   14d38:	add	r7, r7, #1
   14d3c:	strbcc	r0, [r6, r9]
   14d40:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14d44:	add	r9, r9, #1
   14d48:	and	r0, r0, r4
   14d4c:	mov	r4, r0
   14d50:	cmn	lr, #1
   14d54:	bne	146c8 <__assert_fail@plt+0x33b4>
   14d58:	b	146d4 <__assert_fail@plt+0x33c0>
   14d5c:	ldr	r0, [sp, #28]
   14d60:	mov	r4, #0
   14d64:	mov	r8, #0
   14d68:	mov	r5, #0
   14d6c:	cmp	r0, #0
   14d70:	beq	14c88 <__assert_fail@plt+0x3974>
   14d74:	ldr	r4, [fp, #-52]	; 0xffffffcc
   14d78:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14d7c:	add	r7, r7, #1
   14d80:	cmn	lr, #1
   14d84:	bne	146c8 <__assert_fail@plt+0x33b4>
   14d88:	b	146d4 <__assert_fail@plt+0x33c0>
   14d8c:	mov	r0, #0
   14d90:	cmn	lr, #1
   14d94:	str	r0, [fp, #-36]	; 0xffffffdc
   14d98:	str	r0, [fp, #-40]	; 0xffffffd8
   14d9c:	bne	14db0 <__assert_fail@plt+0x3a9c>
   14da0:	mov	r0, ip
   14da4:	bl	111f4 <strlen@plt>
   14da8:	ldr	ip, [fp, #-84]	; 0xffffffac
   14dac:	mov	lr, r0
   14db0:	ldr	r0, [sp, #36]	; 0x24
   14db4:	str	sl, [sp, #56]	; 0x38
   14db8:	str	lr, [sp, #84]	; 0x54
   14dbc:	cmp	r0, #0
   14dc0:	beq	14fd8 <__assert_fail@plt+0x3cc4>
   14dc4:	add	r0, ip, r7
   14dc8:	mov	r4, #1
   14dcc:	mov	r6, #0
   14dd0:	sub	sl, fp, #40	; 0x28
   14dd4:	str	r0, [sp, #20]
   14dd8:	str	r6, [sp, #64]	; 0x40
   14ddc:	add	r6, r6, r7
   14de0:	sub	r0, fp, #44	; 0x2c
   14de4:	mov	r3, sl
   14de8:	add	r1, ip, r6
   14dec:	sub	r2, lr, r6
   14df0:	bl	18744 <__assert_fail@plt+0x7430>
   14df4:	cmn	r0, #2
   14df8:	beq	15134 <__assert_fail@plt+0x3e20>
   14dfc:	ldr	sl, [sp, #56]	; 0x38
   14e00:	cmn	r0, #1
   14e04:	beq	15128 <__assert_fail@plt+0x3e14>
   14e08:	cmp	r0, #0
   14e0c:	beq	1512c <__assert_fail@plt+0x3e18>
   14e10:	cmp	r0, #2
   14e14:	bcc	14ed4 <__assert_fail@plt+0x3bc0>
   14e18:	ldr	r1, [sp, #64]	; 0x40
   14e1c:	ldr	r2, [sp, #20]
   14e20:	add	r1, r2, r1
   14e24:	mov	r2, #1
   14e28:	ldrb	r3, [r1, r2]
   14e2c:	sub	r3, r3, #91	; 0x5b
   14e30:	cmp	r3, #33	; 0x21
   14e34:	bhi	14ec8 <__assert_fail@plt+0x3bb4>
   14e38:	add	r6, pc, #0
   14e3c:	ldr	pc, [r6, r3, lsl #2]
   14e40:	andeq	r5, r1, ip, lsl #9
   14e44:	andeq	r5, r1, ip, lsl #9
   14e48:	andeq	r4, r1, r8, asr #29
   14e4c:	andeq	r5, r1, ip, lsl #9
   14e50:	andeq	r4, r1, r8, asr #29
   14e54:	andeq	r5, r1, ip, lsl #9
   14e58:	andeq	r4, r1, r8, asr #29
   14e5c:	andeq	r4, r1, r8, asr #29
   14e60:	andeq	r4, r1, r8, asr #29
   14e64:	andeq	r4, r1, r8, asr #29
   14e68:	andeq	r4, r1, r8, asr #29
   14e6c:	andeq	r4, r1, r8, asr #29
   14e70:	andeq	r4, r1, r8, asr #29
   14e74:	andeq	r4, r1, r8, asr #29
   14e78:	andeq	r4, r1, r8, asr #29
   14e7c:	andeq	r4, r1, r8, asr #29
   14e80:	andeq	r4, r1, r8, asr #29
   14e84:	andeq	r4, r1, r8, asr #29
   14e88:	andeq	r4, r1, r8, asr #29
   14e8c:	andeq	r4, r1, r8, asr #29
   14e90:	andeq	r4, r1, r8, asr #29
   14e94:	andeq	r4, r1, r8, asr #29
   14e98:	andeq	r4, r1, r8, asr #29
   14e9c:	andeq	r4, r1, r8, asr #29
   14ea0:	andeq	r4, r1, r8, asr #29
   14ea4:	andeq	r4, r1, r8, asr #29
   14ea8:	andeq	r4, r1, r8, asr #29
   14eac:	andeq	r4, r1, r8, asr #29
   14eb0:	andeq	r4, r1, r8, asr #29
   14eb4:	andeq	r4, r1, r8, asr #29
   14eb8:	andeq	r4, r1, r8, asr #29
   14ebc:	andeq	r4, r1, r8, asr #29
   14ec0:	andeq	r4, r1, r8, asr #29
   14ec4:	andeq	r5, r1, ip, lsl #9
   14ec8:	add	r2, r2, #1
   14ecc:	cmp	r2, r0
   14ed0:	bcc	14e28 <__assert_fail@plt+0x3b14>
   14ed4:	ldr	r6, [sp, #64]	; 0x40
   14ed8:	add	r6, r0, r6
   14edc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14ee0:	bl	11128 <iswprint@plt>
   14ee4:	cmp	r0, #0
   14ee8:	sub	sl, fp, #40	; 0x28
   14eec:	movwne	r0, #1
   14ef0:	and	r4, r4, r0
   14ef4:	mov	r0, sl
   14ef8:	bl	110e0 <mbsinit@plt>
   14efc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14f00:	ldr	lr, [sp, #84]	; 0x54
   14f04:	cmp	r0, #0
   14f08:	beq	14dd8 <__assert_fail@plt+0x3ac4>
   14f0c:	b	15178 <__assert_fail@plt+0x3e64>
   14f10:	ldr	r0, [sp, #24]
   14f14:	cmp	r0, #0
   14f18:	beq	14fc0 <__assert_fail@plt+0x3cac>
   14f1c:	add	r0, r7, #2
   14f20:	cmp	r0, lr
   14f24:	bcs	14fc0 <__assert_fail@plt+0x3cac>
   14f28:	add	r1, ip, r7
   14f2c:	ldrb	r1, [r1, #1]
   14f30:	cmp	r1, #63	; 0x3f
   14f34:	bne	14fc0 <__assert_fail@plt+0x3cac>
   14f38:	ldrb	r5, [ip, r0]
   14f3c:	sub	r1, r5, #33	; 0x21
   14f40:	cmp	r1, #29
   14f44:	bhi	14fc0 <__assert_fail@plt+0x3cac>
   14f48:	movw	r3, #20929	; 0x51c1
   14f4c:	mov	r2, #1
   14f50:	movt	r3, #14336	; 0x3800
   14f54:	tst	r3, r2, lsl r1
   14f58:	beq	14fc0 <__assert_fail@plt+0x3cac>
   14f5c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14f60:	tst	r1, #1
   14f64:	bne	155b0 <__assert_fail@plt+0x429c>
   14f68:	cmp	r9, sl
   14f6c:	mov	r7, r0
   14f70:	mov	r4, #0
   14f74:	movcc	r1, #63	; 0x3f
   14f78:	strbcc	r1, [r6, r9]
   14f7c:	add	r1, r9, #1
   14f80:	cmp	r1, sl
   14f84:	movcc	r2, #34	; 0x22
   14f88:	strbcc	r2, [r6, r1]
   14f8c:	add	r1, r9, #2
   14f90:	cmp	r1, sl
   14f94:	movcc	r2, #34	; 0x22
   14f98:	strbcc	r2, [r6, r1]
   14f9c:	add	r1, r9, #3
   14fa0:	add	r9, r9, #4
   14fa4:	cmp	r1, sl
   14fa8:	movcc	r2, #63	; 0x3f
   14fac:	strbcc	r2, [r6, r1]
   14fb0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fb4:	cmp	r0, #0
   14fb8:	bne	149b0 <__assert_fail@plt+0x369c>
   14fbc:	b	14c88 <__assert_fail@plt+0x3974>
   14fc0:	mov	r5, #63	; 0x3f
   14fc4:	mov	r4, #0
   14fc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14fcc:	cmp	r0, #0
   14fd0:	bne	149b0 <__assert_fail@plt+0x369c>
   14fd4:	b	14c88 <__assert_fail@plt+0x3974>
   14fd8:	mov	r4, #1
   14fdc:	mov	r6, #0
   14fe0:	sub	sl, fp, #40	; 0x28
   14fe4:	str	r6, [sp, #64]	; 0x40
   14fe8:	add	r6, r6, r7
   14fec:	sub	r0, fp, #44	; 0x2c
   14ff0:	mov	r3, sl
   14ff4:	add	r1, ip, r6
   14ff8:	sub	r2, lr, r6
   14ffc:	bl	18744 <__assert_fail@plt+0x7430>
   15000:	cmn	r0, #2
   15004:	beq	15134 <__assert_fail@plt+0x3e20>
   15008:	cmn	r0, #1
   1500c:	beq	15128 <__assert_fail@plt+0x3e14>
   15010:	ldr	r6, [sp, #64]	; 0x40
   15014:	cmp	r0, #0
   15018:	beq	15174 <__assert_fail@plt+0x3e60>
   1501c:	add	r6, r0, r6
   15020:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15024:	bl	11128 <iswprint@plt>
   15028:	cmp	r0, #0
   1502c:	sub	sl, fp, #40	; 0x28
   15030:	movwne	r0, #1
   15034:	and	r4, r4, r0
   15038:	mov	r0, sl
   1503c:	bl	110e0 <mbsinit@plt>
   15040:	ldr	ip, [fp, #-84]	; 0xffffffac
   15044:	ldr	lr, [sp, #84]	; 0x54
   15048:	cmp	r0, #0
   1504c:	beq	14fe4 <__assert_fail@plt+0x3cd0>
   15050:	b	15178 <__assert_fail@plt+0x3e64>
   15054:	cmp	r9, sl
   15058:	mov	r2, #1
   1505c:	movcc	r0, #39	; 0x27
   15060:	strbcc	r0, [r6, r9]
   15064:	add	r0, r9, #1
   15068:	cmp	r0, sl
   1506c:	movcc	r1, #36	; 0x24
   15070:	strbcc	r1, [r6, r0]
   15074:	add	r0, r9, #2
   15078:	cmp	r0, sl
   1507c:	movcc	r1, #39	; 0x27
   15080:	strbcc	r1, [r6, r0]
   15084:	add	r0, r9, #3
   15088:	cmp	r0, sl
   1508c:	add	r9, r0, #1
   15090:	str	r2, [fp, #-48]	; 0xffffffd0
   15094:	movcc	r1, #92	; 0x5c
   15098:	strbcc	r1, [r6, r0]
   1509c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   150a0:	cmp	r1, #2
   150a4:	beq	15104 <__assert_fail@plt+0x3df0>
   150a8:	add	r1, r7, #1
   150ac:	mov	r4, #0
   150b0:	mov	r8, #1
   150b4:	mov	r5, #48	; 0x30
   150b8:	cmp	r1, lr
   150bc:	bcs	149a4 <__assert_fail@plt+0x3690>
   150c0:	ldrb	r1, [ip, r1]
   150c4:	sub	r1, r1, #48	; 0x30
   150c8:	uxtb	r1, r1
   150cc:	cmp	r1, #9
   150d0:	bhi	149a4 <__assert_fail@plt+0x3690>
   150d4:	cmp	r9, sl
   150d8:	movcc	r1, #48	; 0x30
   150dc:	strbcc	r1, [r6, r9]
   150e0:	add	r1, r0, #2
   150e4:	add	r9, r0, #3
   150e8:	cmp	r1, sl
   150ec:	movcc	r2, #48	; 0x30
   150f0:	strbcc	r2, [r6, r1]
   150f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   150f8:	cmp	r0, #0
   150fc:	bne	149b0 <__assert_fail@plt+0x369c>
   15100:	b	14c88 <__assert_fail@plt+0x3974>
   15104:	mov	r0, #48	; 0x30
   15108:	mov	r8, #1
   1510c:	mov	r4, #0
   15110:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15114:	cmp	r1, #0
   15118:	bne	14cc4 <__assert_fail@plt+0x39b0>
   1511c:	cmp	r8, #0
   15120:	beq	14c40 <__assert_fail@plt+0x392c>
   15124:	b	14a30 <__assert_fail@plt+0x371c>
   15128:	mov	r4, #0
   1512c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15130:	b	1516c <__assert_fail@plt+0x3e58>
   15134:	ldr	r1, [sp, #84]	; 0x54
   15138:	ldr	ip, [fp, #-84]	; 0xffffffac
   1513c:	mov	r4, #0
   15140:	cmp	r6, r1
   15144:	bcs	1516c <__assert_fail@plt+0x3e58>
   15148:	ldrb	r0, [ip, r6]
   1514c:	cmp	r0, #0
   15150:	beq	1516c <__assert_fail@plt+0x3e58>
   15154:	ldr	r0, [sp, #64]	; 0x40
   15158:	add	r0, r0, #1
   1515c:	add	r6, r0, r7
   15160:	str	r0, [sp, #64]	; 0x40
   15164:	cmp	r6, r1
   15168:	bcc	15148 <__assert_fail@plt+0x3e34>
   1516c:	ldr	r6, [sp, #64]	; 0x40
   15170:	b	15178 <__assert_fail@plt+0x3e64>
   15174:	ldr	ip, [fp, #-84]	; 0xffffffac
   15178:	mov	r1, r6
   1517c:	ldr	r6, [sp, #76]	; 0x4c
   15180:	ldr	sl, [sp, #56]	; 0x38
   15184:	ldr	r0, [sp, #44]	; 0x2c
   15188:	cmp	r1, #1
   1518c:	orr	r2, r4, r0
   15190:	mov	r0, r1
   15194:	bhi	151b4 <__assert_fail@plt+0x3ea0>
   15198:	tst	r2, #1
   1519c:	beq	151b4 <__assert_fail@plt+0x3ea0>
   151a0:	ldr	lr, [sp, #84]	; 0x54
   151a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   151a8:	cmp	r0, #0
   151ac:	bne	149b0 <__assert_fail@plt+0x369c>
   151b0:	b	14c88 <__assert_fail@plt+0x3974>
   151b4:	str	r2, [sp, #64]	; 0x40
   151b8:	add	r0, r0, r7
   151bc:	add	r1, r7, #1
   151c0:	ldr	lr, [sp, #84]	; 0x54
   151c4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   151c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   151cc:	mov	r3, #0
   151d0:	str	r0, [sp, #56]	; 0x38
   151d4:	ldr	r0, [sp, #64]	; 0x40
   151d8:	tst	r0, #1
   151dc:	bne	152c4 <__assert_fail@plt+0x3fb0>
   151e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   151e4:	tst	r0, #1
   151e8:	bne	15464 <__assert_fail@plt+0x4150>
   151ec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   151f0:	cmp	r7, #2
   151f4:	movwne	r3, #1
   151f8:	orr	r3, r3, r2
   151fc:	tst	r3, #1
   15200:	bne	15238 <__assert_fail@plt+0x3f24>
   15204:	cmp	r9, sl
   15208:	add	r3, r9, #1
   1520c:	movcc	r2, #39	; 0x27
   15210:	strbcc	r2, [r6, r9]
   15214:	cmp	r3, sl
   15218:	movcc	r2, #36	; 0x24
   1521c:	strbcc	r2, [r6, r3]
   15220:	add	r3, r9, #2
   15224:	add	r9, r9, #3
   15228:	cmp	r3, sl
   1522c:	movcc	r2, #39	; 0x27
   15230:	strbcc	r2, [r6, r3]
   15234:	mov	r2, #1
   15238:	cmp	r9, sl
   1523c:	mov	r0, r2
   15240:	movcc	r3, #92	; 0x5c
   15244:	strbcc	r3, [r6, r9]
   15248:	add	r3, r9, #1
   1524c:	cmp	r3, sl
   15250:	andcc	r7, r5, #192	; 0xc0
   15254:	movcc	r2, #48	; 0x30
   15258:	orrcc	r7, r2, r7, lsr #6
   1525c:	strbcc	r7, [r6, r3]
   15260:	add	r3, r9, #2
   15264:	add	r9, r9, #3
   15268:	cmp	r3, sl
   1526c:	lsrcc	r7, r5, #3
   15270:	movcc	r2, #6
   15274:	bficc	r7, r2, #3, #29
   15278:	mov	r2, #6
   1527c:	strbcc	r7, [r6, r3]
   15280:	bfi	r5, r2, #3, #29
   15284:	mov	r3, #1
   15288:	mov	r2, r0
   1528c:	ldr	r0, [sp, #56]	; 0x38
   15290:	and	r8, r3, #1
   15294:	cmp	r0, r1
   15298:	bhi	152f8 <__assert_fail@plt+0x3fe4>
   1529c:	b	15338 <__assert_fail@plt+0x4024>
   152a0:	cmp	r9, sl
   152a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   152a8:	strbcc	r5, [r6, r9]
   152ac:	add	r9, r9, #1
   152b0:	ldrb	r5, [ip, r1]
   152b4:	add	r1, r1, #1
   152b8:	ldr	r0, [sp, #64]	; 0x40
   152bc:	tst	r0, #1
   152c0:	beq	151e0 <__assert_fail@plt+0x3ecc>
   152c4:	ldr	r7, [fp, #-56]	; 0xffffffc8
   152c8:	tst	r7, #1
   152cc:	beq	152e0 <__assert_fail@plt+0x3fcc>
   152d0:	cmp	r9, sl
   152d4:	movcc	r7, #92	; 0x5c
   152d8:	strbcc	r7, [r6, r9]
   152dc:	add	r9, r9, #1
   152e0:	mov	r7, #0
   152e4:	str	r7, [fp, #-56]	; 0xffffffc8
   152e8:	ldr	r0, [sp, #56]	; 0x38
   152ec:	and	r8, r3, #1
   152f0:	cmp	r0, r1
   152f4:	bls	15338 <__assert_fail@plt+0x4024>
   152f8:	cmp	r8, #0
   152fc:	mvn	r7, r2
   15300:	movwne	r8, #1
   15304:	orr	r7, r7, r8
   15308:	tst	r7, #1
   1530c:	bne	152a0 <__assert_fail@plt+0x3f8c>
   15310:	cmp	r9, sl
   15314:	movcc	r7, #39	; 0x27
   15318:	strbcc	r7, [r6, r9]
   1531c:	add	r7, r9, #1
   15320:	add	r9, r9, #2
   15324:	cmp	r7, sl
   15328:	movcc	r2, #39	; 0x27
   1532c:	strbcc	r2, [r6, r7]
   15330:	mov	r2, #0
   15334:	b	152a0 <__assert_fail@plt+0x3f8c>
   15338:	cmp	r8, #0
   1533c:	sub	r7, r1, #1
   15340:	mov	r0, r5
   15344:	str	r2, [fp, #-48]	; 0xffffffd0
   15348:	movwne	r8, #1
   1534c:	cmp	r8, #0
   15350:	beq	14c40 <__assert_fail@plt+0x392c>
   15354:	b	14a30 <__assert_fail@plt+0x371c>
   15358:	mov	lr, r7
   1535c:	b	15364 <__assert_fail@plt+0x4050>
   15360:	mvn	lr, #0
   15364:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15368:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1536c:	eor	r0, r7, #2
   15370:	orr	r0, r0, r9
   15374:	clz	r0, r0
   15378:	lsr	r0, r0, #5
   1537c:	tst	r1, r0
   15380:	bne	15480 <__assert_fail@plt+0x416c>
   15384:	mov	r0, r1
   15388:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1538c:	cmp	r7, #2
   15390:	movwne	r1, #1
   15394:	orr	r0, r0, r1
   15398:	tst	r0, #1
   1539c:	ldreq	r0, [sp, #52]	; 0x34
   153a0:	streq	lr, [sp, #84]	; 0x54
   153a4:	eoreq	r0, r0, #1
   153a8:	tsteq	r0, #1
   153ac:	bne	15544 <__assert_fail@plt+0x4230>
   153b0:	tst	r4, #1
   153b4:	bne	15500 <__assert_fail@plt+0x41ec>
   153b8:	ldr	r6, [sp, #48]	; 0x30
   153bc:	mov	r8, #0
   153c0:	cmp	r6, #0
   153c4:	beq	1553c <__assert_fail@plt+0x4228>
   153c8:	ldr	r0, [sp, #80]	; 0x50
   153cc:	mov	r1, #0
   153d0:	cmp	sl, #0
   153d4:	mov	r4, #0
   153d8:	str	r1, [fp, #-72]	; 0xffffffb8
   153dc:	beq	142d0 <__assert_fail@plt+0x2fbc>
   153e0:	b	15544 <__assert_fail@plt+0x4230>
   153e4:	ldrb	r1, [r0, #3]
   153e8:	cmp	r1, #56	; 0x38
   153ec:	ldrbeq	r1, [r0, #4]
   153f0:	cmpeq	r1, #48	; 0x30
   153f4:	bne	144c8 <__assert_fail@plt+0x31b4>
   153f8:	ldrb	r1, [r0, #5]
   153fc:	cmp	r1, #51	; 0x33
   15400:	ldrbeq	r1, [r0, #6]
   15404:	cmpeq	r1, #48	; 0x30
   15408:	bne	144c8 <__assert_fail@plt+0x31b4>
   1540c:	ldrb	r0, [r0, #7]
   15410:	cmp	r0, #0
   15414:	movw	r0, #39296	; 0x9980
   15418:	movt	r0, #1
   1541c:	str	r0, [sp, #68]	; 0x44
   15420:	bne	144c8 <__assert_fail@plt+0x31b4>
   15424:	b	144e4 <__assert_fail@plt+0x31d0>
   15428:	ldrb	r1, [r0, #4]
   1542c:	cmp	r1, #48	; 0x30
   15430:	ldrbeq	r1, [r0, #5]
   15434:	cmpeq	r1, #51	; 0x33
   15438:	bne	145ac <__assert_fail@plt+0x3298>
   1543c:	ldrb	r1, [r0, #6]
   15440:	cmp	r1, #48	; 0x30
   15444:	ldrbeq	r0, [r0, #7]
   15448:	cmpeq	r0, #0
   1544c:	bne	145ac <__assert_fail@plt+0x3298>
   15450:	movw	r0, #39300	; 0x9984
   15454:	movt	r0, #1
   15458:	str	r0, [sp, #72]	; 0x48
   1545c:	b	145cc <__assert_fail@plt+0x32b8>
   15460:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15464:	ldr	r2, [sp, #80]	; 0x50
   15468:	b	154a0 <__assert_fail@plt+0x418c>
   1546c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15470:	mov	r2, #1
   15474:	mov	lr, r4
   15478:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1547c:	b	154a0 <__assert_fail@plt+0x418c>
   15480:	ldr	r2, [sp, #80]	; 0x50
   15484:	mov	r7, #2
   15488:	b	154a0 <__assert_fail@plt+0x418c>
   1548c:	ldr	r6, [sp, #76]	; 0x4c
   15490:	ldr	ip, [fp, #-84]	; 0xffffffac
   15494:	ldr	lr, [sp, #84]	; 0x54
   15498:	ldr	r2, [sp, #80]	; 0x50
   1549c:	mov	r7, #2
   154a0:	mov	r0, #0
   154a4:	ldr	r1, [fp, #12]
   154a8:	tst	r2, #1
   154ac:	mov	r2, r7
   154b0:	mov	r3, lr
   154b4:	str	r0, [sp, #8]
   154b8:	ldr	r0, [sp, #68]	; 0x44
   154bc:	movwne	r2, #4
   154c0:	cmp	r7, #2
   154c4:	movne	r2, r7
   154c8:	str	r2, [sp]
   154cc:	mov	r2, ip
   154d0:	bic	r1, r1, #2
   154d4:	str	r0, [sp, #12]
   154d8:	ldr	r0, [sp, #72]	; 0x48
   154dc:	str	r1, [sp, #4]
   154e0:	mov	r1, sl
   154e4:	str	r0, [sp, #16]
   154e8:	mov	r0, r6
   154ec:	bl	14254 <__assert_fail@plt+0x2f40>
   154f0:	mov	r9, r0
   154f4:	mov	r0, r9
   154f8:	sub	sp, fp, #28
   154fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15500:	mov	r0, #5
   15504:	ldr	r1, [sp, #48]	; 0x30
   15508:	ldr	r2, [fp, #-84]	; 0xffffffac
   1550c:	ldr	r3, [sp, #84]	; 0x54
   15510:	str	r0, [sp]
   15514:	ldr	r0, [fp, #12]
   15518:	str	r0, [sp, #4]
   1551c:	ldr	r0, [fp, #16]
   15520:	str	r0, [sp, #8]
   15524:	ldr	r0, [sp, #68]	; 0x44
   15528:	str	r0, [sp, #12]
   1552c:	ldr	r0, [sp, #72]	; 0x48
   15530:	str	r0, [sp, #16]
   15534:	ldr	r0, [sp, #76]	; 0x4c
   15538:	b	154ec <__assert_fail@plt+0x41d8>
   1553c:	mov	r0, #0
   15540:	str	r0, [fp, #-72]	; 0xffffffb8
   15544:	ldr	r1, [sp, #92]	; 0x5c
   15548:	cmp	r1, #0
   1554c:	beq	1558c <__assert_fail@plt+0x4278>
   15550:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15554:	ldr	r2, [sp, #76]	; 0x4c
   15558:	tst	r0, #1
   1555c:	bne	15590 <__assert_fail@plt+0x427c>
   15560:	ldrb	r0, [r1]
   15564:	cmp	r0, #0
   15568:	beq	15590 <__assert_fail@plt+0x427c>
   1556c:	add	r1, r1, #1
   15570:	cmp	r9, sl
   15574:	strbcc	r0, [r2, r9]
   15578:	add	r9, r9, #1
   1557c:	ldrb	r0, [r1], #1
   15580:	cmp	r0, #0
   15584:	bne	15570 <__assert_fail@plt+0x425c>
   15588:	b	15590 <__assert_fail@plt+0x427c>
   1558c:	ldr	r2, [sp, #76]	; 0x4c
   15590:	cmp	r9, sl
   15594:	movcc	r0, #0
   15598:	strbcc	r0, [r2, r9]
   1559c:	mov	r0, r9
   155a0:	sub	sp, fp, #28
   155a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155a8:	mov	r2, #1
   155ac:	b	15478 <__assert_fail@plt+0x4164>
   155b0:	ldr	r2, [sp, #80]	; 0x50
   155b4:	mov	r7, #5
   155b8:	b	154a0 <__assert_fail@plt+0x418c>
   155bc:	bl	112f0 <abort@plt>
   155c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155c4:	add	fp, sp, #28
   155c8:	sub	sp, sp, #28
   155cc:	movw	r5, #41472	; 0xa200
   155d0:	cmp	r2, #0
   155d4:	mov	r4, r1
   155d8:	mov	r7, r0
   155dc:	str	r0, [sp, #20]
   155e0:	movt	r5, #2
   155e4:	movne	r5, r2
   155e8:	bl	1120c <__errno_location@plt>
   155ec:	mov	sl, r0
   155f0:	ldm	r5, {r0, r1}
   155f4:	ldr	r2, [r5, #40]	; 0x28
   155f8:	ldr	r3, [r5, #44]	; 0x2c
   155fc:	add	r9, r5, #8
   15600:	ldr	r6, [sl]
   15604:	orr	r8, r1, #1
   15608:	mov	r1, #0
   1560c:	str	r6, [sp, #24]
   15610:	stm	sp, {r0, r8, r9}
   15614:	str	r2, [sp, #12]
   15618:	str	r3, [sp, #16]
   1561c:	mov	r0, #0
   15620:	mov	r2, r7
   15624:	mov	r3, r4
   15628:	mov	r6, r4
   1562c:	bl	14254 <__assert_fail@plt+0x2f40>
   15630:	add	r7, r0, #1
   15634:	mov	r0, r7
   15638:	bl	1674c <__assert_fail@plt+0x5438>
   1563c:	mov	r4, r0
   15640:	ldr	r0, [r5]
   15644:	ldr	r2, [r5, #44]	; 0x2c
   15648:	ldr	r1, [r5, #40]	; 0x28
   1564c:	mov	r3, r6
   15650:	stm	sp, {r0, r8, r9}
   15654:	str	r2, [sp, #16]
   15658:	str	r1, [sp, #12]
   1565c:	mov	r0, r4
   15660:	mov	r1, r7
   15664:	ldr	r2, [sp, #20]
   15668:	bl	14254 <__assert_fail@plt+0x2f40>
   1566c:	ldr	r0, [sp, #24]
   15670:	str	r0, [sl]
   15674:	mov	r0, r4
   15678:	sub	sp, fp, #28
   1567c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15684:	add	fp, sp, #28
   15688:	sub	sp, sp, #36	; 0x24
   1568c:	movw	r8, #41472	; 0xa200
   15690:	cmp	r3, #0
   15694:	mov	r4, r2
   15698:	str	r2, [sp, #24]
   1569c:	mov	r5, r1
   156a0:	mov	r6, r0
   156a4:	str	r0, [sp, #20]
   156a8:	movt	r8, #2
   156ac:	movne	r8, r3
   156b0:	bl	1120c <__errno_location@plt>
   156b4:	str	r0, [sp, #28]
   156b8:	cmp	r4, #0
   156bc:	add	sl, r8, #8
   156c0:	ldm	r8, {r3, r9}
   156c4:	ldr	r7, [r0]
   156c8:	ldr	r1, [r8, #40]	; 0x28
   156cc:	ldr	r2, [r8, #44]	; 0x2c
   156d0:	mov	r0, #0
   156d4:	orreq	r9, r9, #1
   156d8:	str	r7, [sp, #32]
   156dc:	mov	r7, r5
   156e0:	stm	sp, {r3, r9, sl}
   156e4:	str	r1, [sp, #12]
   156e8:	str	r2, [sp, #16]
   156ec:	mov	r1, #0
   156f0:	mov	r2, r6
   156f4:	mov	r3, r5
   156f8:	bl	14254 <__assert_fail@plt+0x2f40>
   156fc:	add	r4, r0, #1
   15700:	mov	r5, r0
   15704:	mov	r0, r4
   15708:	bl	1674c <__assert_fail@plt+0x5438>
   1570c:	mov	r6, r0
   15710:	ldr	r0, [r8]
   15714:	ldr	r2, [r8, #44]	; 0x2c
   15718:	ldr	r1, [r8, #40]	; 0x28
   1571c:	mov	r3, r7
   15720:	stm	sp, {r0, r9, sl}
   15724:	str	r2, [sp, #16]
   15728:	str	r1, [sp, #12]
   1572c:	mov	r0, r6
   15730:	mov	r1, r4
   15734:	ldr	r2, [sp, #20]
   15738:	bl	14254 <__assert_fail@plt+0x2f40>
   1573c:	ldr	r0, [sp, #24]
   15740:	ldr	r1, [sp, #32]
   15744:	ldr	r2, [sp, #28]
   15748:	cmp	r0, #0
   1574c:	str	r1, [r2]
   15750:	strne	r5, [r0]
   15754:	mov	r0, r6
   15758:	sub	sp, fp, #28
   1575c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15760:	push	{r4, r5, r6, r7, fp, lr}
   15764:	add	fp, sp, #16
   15768:	movw	r4, #41296	; 0xa150
   1576c:	movt	r4, #2
   15770:	ldrd	r6, [r4]
   15774:	cmp	r7, #2
   15778:	blt	157a4 <__assert_fail@plt+0x4490>
   1577c:	add	r5, r6, #12
   15780:	mov	r7, #0
   15784:	ldr	r0, [r5, r7, lsl #3]
   15788:	bl	13c30 <__assert_fail@plt+0x291c>
   1578c:	ldr	r1, [r4, #4]
   15790:	add	r2, r7, #2
   15794:	add	r0, r7, #1
   15798:	mov	r7, r0
   1579c:	cmp	r2, r1
   157a0:	blt	15784 <__assert_fail@plt+0x4470>
   157a4:	ldr	r0, [r6, #4]
   157a8:	movw	r5, #41520	; 0xa230
   157ac:	movt	r5, #2
   157b0:	cmp	r0, r5
   157b4:	beq	157c8 <__assert_fail@plt+0x44b4>
   157b8:	bl	13c30 <__assert_fail@plt+0x291c>
   157bc:	mov	r0, #256	; 0x100
   157c0:	str	r0, [r4, #8]
   157c4:	str	r5, [r4, #12]
   157c8:	add	r5, r4, #8
   157cc:	cmp	r6, r5
   157d0:	beq	157e0 <__assert_fail@plt+0x44cc>
   157d4:	mov	r0, r6
   157d8:	bl	13c30 <__assert_fail@plt+0x291c>
   157dc:	str	r5, [r4]
   157e0:	mov	r0, #1
   157e4:	str	r0, [r4, #4]
   157e8:	pop	{r4, r5, r6, r7, fp, pc}
   157ec:	movw	r3, #41472	; 0xa200
   157f0:	mvn	r2, #0
   157f4:	movt	r3, #2
   157f8:	b	157fc <__assert_fail@plt+0x44e8>
   157fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15800:	add	fp, sp, #28
   15804:	sub	sp, sp, #44	; 0x2c
   15808:	mov	r7, r3
   1580c:	str	r2, [sp, #36]	; 0x24
   15810:	str	r1, [sp, #32]
   15814:	mov	r5, r0
   15818:	bl	1120c <__errno_location@plt>
   1581c:	cmp	r5, #0
   15820:	blt	15984 <__assert_fail@plt+0x4670>
   15824:	cmn	r5, #-2147483647	; 0x80000001
   15828:	beq	15984 <__assert_fail@plt+0x4670>
   1582c:	movw	r8, #41296	; 0xa150
   15830:	mov	r4, r0
   15834:	movt	r8, #2
   15838:	ldr	r6, [r8]
   1583c:	ldr	r1, [r8, #4]
   15840:	ldr	r0, [r0]
   15844:	str	r4, [sp, #28]
   15848:	cmp	r1, r5
   1584c:	str	r0, [sp, #24]
   15850:	ble	1585c <__assert_fail@plt+0x4548>
   15854:	mov	sl, r6
   15858:	b	158c0 <__assert_fail@plt+0x45ac>
   1585c:	mov	r0, #8
   15860:	add	r9, r8, #8
   15864:	add	r2, r5, #1
   15868:	str	r1, [fp, #-32]	; 0xffffffe0
   1586c:	mvn	r3, #-2147483648	; 0x80000000
   15870:	str	r0, [sp]
   15874:	subs	r0, r6, r9
   15878:	sub	r2, r2, r1
   1587c:	sub	r1, fp, #32
   15880:	movne	r0, r6
   15884:	bl	1694c <__assert_fail@plt+0x5638>
   15888:	str	r0, [r8]
   1588c:	cmp	r6, r9
   15890:	mov	sl, r0
   15894:	ldrdeq	r0, [r8, #8]
   15898:	stmeq	sl, {r0, r1}
   1589c:	ldr	r1, [r8, #4]
   158a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   158a4:	add	r0, sl, r1, lsl #3
   158a8:	sub	r1, r2, r1
   158ac:	lsl	r2, r1, #3
   158b0:	mov	r1, #0
   158b4:	bl	11224 <memset@plt>
   158b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   158bc:	str	r0, [r8, #4]
   158c0:	mov	r9, sl
   158c4:	ldr	r6, [r9, r5, lsl #3]!
   158c8:	ldr	r4, [r9, #4]!
   158cc:	ldm	r7, {r0, r1}
   158d0:	ldr	r2, [r7, #40]	; 0x28
   158d4:	ldr	r3, [r7, #44]	; 0x2c
   158d8:	orr	r8, r1, #1
   158dc:	add	r1, r7, #8
   158e0:	stm	sp, {r0, r8}
   158e4:	add	r0, sp, #8
   158e8:	str	r1, [sp, #20]
   158ec:	stm	r0, {r1, r2, r3}
   158f0:	mov	r0, r4
   158f4:	mov	r1, r6
   158f8:	ldr	r2, [sp, #32]
   158fc:	ldr	r3, [sp, #36]	; 0x24
   15900:	bl	14254 <__assert_fail@plt+0x2f40>
   15904:	cmp	r6, r0
   15908:	bhi	1596c <__assert_fail@plt+0x4658>
   1590c:	add	r6, r0, #1
   15910:	movw	r0, #41520	; 0xa230
   15914:	movt	r0, #2
   15918:	str	r6, [sl, r5, lsl #3]
   1591c:	cmp	r4, r0
   15920:	beq	1592c <__assert_fail@plt+0x4618>
   15924:	mov	r0, r4
   15928:	bl	13c30 <__assert_fail@plt+0x291c>
   1592c:	mov	r0, r6
   15930:	bl	1674c <__assert_fail@plt+0x5438>
   15934:	str	r0, [r9]
   15938:	mov	r4, r0
   1593c:	add	r3, sp, #8
   15940:	ldr	r0, [r7]
   15944:	ldr	r1, [r7, #40]	; 0x28
   15948:	ldr	r2, [r7, #44]	; 0x2c
   1594c:	stm	sp, {r0, r8}
   15950:	ldr	r0, [sp, #20]
   15954:	stm	r3, {r0, r1, r2}
   15958:	mov	r0, r4
   1595c:	mov	r1, r6
   15960:	ldr	r2, [sp, #32]
   15964:	ldr	r3, [sp, #36]	; 0x24
   15968:	bl	14254 <__assert_fail@plt+0x2f40>
   1596c:	ldr	r1, [sp, #24]
   15970:	ldr	r0, [sp, #28]
   15974:	str	r1, [r0]
   15978:	mov	r0, r4
   1597c:	sub	sp, fp, #28
   15980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15984:	bl	112f0 <abort@plt>
   15988:	movw	r3, #41472	; 0xa200
   1598c:	movt	r3, #2
   15990:	b	157fc <__assert_fail@plt+0x44e8>
   15994:	movw	r3, #41472	; 0xa200
   15998:	mov	r1, r0
   1599c:	mov	r0, #0
   159a0:	mvn	r2, #0
   159a4:	movt	r3, #2
   159a8:	b	157fc <__assert_fail@plt+0x44e8>
   159ac:	movw	r3, #41472	; 0xa200
   159b0:	mov	r2, r1
   159b4:	mov	r1, r0
   159b8:	mov	r0, #0
   159bc:	movt	r3, #2
   159c0:	b	157fc <__assert_fail@plt+0x44e8>
   159c4:	push	{fp, lr}
   159c8:	mov	fp, sp
   159cc:	sub	sp, sp, #48	; 0x30
   159d0:	vmov.i32	q8, #0	; 0x00000000
   159d4:	mov	ip, #32
   159d8:	mov	r3, sp
   159dc:	mov	lr, r2
   159e0:	cmp	r1, #10
   159e4:	add	r2, r3, #16
   159e8:	vst1.64	{d16-d17}, [r3], ip
   159ec:	vst1.64	{d16-d17}, [r3]
   159f0:	vst1.64	{d16-d17}, [r2]
   159f4:	beq	15a14 <__assert_fail@plt+0x4700>
   159f8:	str	r1, [sp]
   159fc:	mov	r3, sp
   15a00:	mov	r1, lr
   15a04:	mvn	r2, #0
   15a08:	bl	157fc <__assert_fail@plt+0x44e8>
   15a0c:	mov	sp, fp
   15a10:	pop	{fp, pc}
   15a14:	bl	112f0 <abort@plt>
   15a18:	push	{r4, sl, fp, lr}
   15a1c:	add	fp, sp, #8
   15a20:	sub	sp, sp, #48	; 0x30
   15a24:	mov	ip, r3
   15a28:	mov	r3, sp
   15a2c:	vmov.i32	q8, #0	; 0x00000000
   15a30:	mov	lr, #32
   15a34:	cmp	r1, #10
   15a38:	add	r4, r3, #16
   15a3c:	vst1.64	{d16-d17}, [r3], lr
   15a40:	vst1.64	{d16-d17}, [r3]
   15a44:	vst1.64	{d16-d17}, [r4]
   15a48:	beq	15a68 <__assert_fail@plt+0x4754>
   15a4c:	str	r1, [sp]
   15a50:	mov	r1, r2
   15a54:	mov	r3, sp
   15a58:	mov	r2, ip
   15a5c:	bl	157fc <__assert_fail@plt+0x44e8>
   15a60:	sub	sp, fp, #8
   15a64:	pop	{r4, sl, fp, pc}
   15a68:	bl	112f0 <abort@plt>
   15a6c:	push	{fp, lr}
   15a70:	mov	fp, sp
   15a74:	sub	sp, sp, #48	; 0x30
   15a78:	mov	r3, sp
   15a7c:	vmov.i32	q8, #0	; 0x00000000
   15a80:	mov	ip, #32
   15a84:	cmp	r0, #10
   15a88:	add	r2, r3, #16
   15a8c:	vst1.64	{d16-d17}, [r3], ip
   15a90:	vst1.64	{d16-d17}, [r3]
   15a94:	vst1.64	{d16-d17}, [r2]
   15a98:	beq	15ab8 <__assert_fail@plt+0x47a4>
   15a9c:	str	r0, [sp]
   15aa0:	mov	r3, sp
   15aa4:	mov	r0, #0
   15aa8:	mvn	r2, #0
   15aac:	bl	157fc <__assert_fail@plt+0x44e8>
   15ab0:	mov	sp, fp
   15ab4:	pop	{fp, pc}
   15ab8:	bl	112f0 <abort@plt>
   15abc:	push	{fp, lr}
   15ac0:	mov	fp, sp
   15ac4:	sub	sp, sp, #48	; 0x30
   15ac8:	mov	r3, sp
   15acc:	vmov.i32	q8, #0	; 0x00000000
   15ad0:	mov	ip, #32
   15ad4:	cmp	r0, #10
   15ad8:	add	lr, r3, #16
   15adc:	vst1.64	{d16-d17}, [r3], ip
   15ae0:	vst1.64	{d16-d17}, [r3]
   15ae4:	vst1.64	{d16-d17}, [lr]
   15ae8:	beq	15b04 <__assert_fail@plt+0x47f0>
   15aec:	str	r0, [sp]
   15af0:	mov	r3, sp
   15af4:	mov	r0, #0
   15af8:	bl	157fc <__assert_fail@plt+0x44e8>
   15afc:	mov	sp, fp
   15b00:	pop	{fp, pc}
   15b04:	bl	112f0 <abort@plt>
   15b08:	push	{r4, sl, fp, lr}
   15b0c:	add	fp, sp, #8
   15b10:	sub	sp, sp, #48	; 0x30
   15b14:	mov	lr, r0
   15b18:	movw	r0, #41472	; 0xa200
   15b1c:	mov	r3, #32
   15b20:	mov	ip, r1
   15b24:	mov	r4, #1
   15b28:	movt	r0, #2
   15b2c:	add	r1, r0, #16
   15b30:	vld1.64	{d16-d17}, [r0], r3
   15b34:	mov	r3, sp
   15b38:	vld1.64	{d18-d19}, [r1]
   15b3c:	add	r1, r3, #16
   15b40:	vld1.64	{d20-d21}, [r0]
   15b44:	add	r0, r3, #32
   15b48:	vst1.64	{d18-d19}, [r1]
   15b4c:	mov	r1, r3
   15b50:	vst1.64	{d20-d21}, [r0]
   15b54:	mov	r0, #28
   15b58:	and	r0, r0, r2, lsr #3
   15b5c:	and	r2, r2, #31
   15b60:	vst1.64	{d16-d17}, [r1], r0
   15b64:	ldr	r0, [r1, #8]
   15b68:	bic	r4, r4, r0, lsr r2
   15b6c:	eor	r0, r0, r4, lsl r2
   15b70:	mov	r2, ip
   15b74:	str	r0, [r1, #8]
   15b78:	mov	r0, #0
   15b7c:	mov	r1, lr
   15b80:	bl	157fc <__assert_fail@plt+0x44e8>
   15b84:	sub	sp, fp, #8
   15b88:	pop	{r4, sl, fp, pc}
   15b8c:	push	{fp, lr}
   15b90:	mov	fp, sp
   15b94:	sub	sp, sp, #48	; 0x30
   15b98:	mov	ip, r0
   15b9c:	movw	r0, #41472	; 0xa200
   15ba0:	mov	r3, #32
   15ba4:	movt	r0, #2
   15ba8:	add	r2, r0, #16
   15bac:	vld1.64	{d16-d17}, [r0], r3
   15bb0:	mov	r3, sp
   15bb4:	vld1.64	{d18-d19}, [r2]
   15bb8:	add	r2, r3, #16
   15bbc:	vld1.64	{d20-d21}, [r0]
   15bc0:	add	r0, r3, #32
   15bc4:	vst1.64	{d18-d19}, [r2]
   15bc8:	mov	r2, r3
   15bcc:	vst1.64	{d20-d21}, [r0]
   15bd0:	mov	r0, #28
   15bd4:	and	r0, r0, r1, lsr #3
   15bd8:	and	r1, r1, #31
   15bdc:	vst1.64	{d16-d17}, [r2], r0
   15be0:	mov	r0, #1
   15be4:	ldr	lr, [r2, #8]
   15be8:	bic	r0, r0, lr, lsr r1
   15bec:	eor	r0, lr, r0, lsl r1
   15bf0:	mov	r1, ip
   15bf4:	str	r0, [r2, #8]
   15bf8:	mov	r0, #0
   15bfc:	mvn	r2, #0
   15c00:	bl	157fc <__assert_fail@plt+0x44e8>
   15c04:	mov	sp, fp
   15c08:	pop	{fp, pc}
   15c0c:	push	{fp, lr}
   15c10:	mov	fp, sp
   15c14:	sub	sp, sp, #48	; 0x30
   15c18:	movw	r2, #41472	; 0xa200
   15c1c:	mov	r3, #32
   15c20:	mov	r1, r0
   15c24:	movt	r2, #2
   15c28:	add	r0, r2, #16
   15c2c:	vld1.64	{d16-d17}, [r2], r3
   15c30:	mov	r3, sp
   15c34:	vld1.64	{d18-d19}, [r0]
   15c38:	add	r0, r3, #16
   15c3c:	vld1.64	{d20-d21}, [r2]
   15c40:	mov	r2, r3
   15c44:	vst1.64	{d18-d19}, [r0]
   15c48:	add	r0, r3, #32
   15c4c:	vst1.64	{d20-d21}, [r0]
   15c50:	mov	r0, #12
   15c54:	vst1.64	{d16-d17}, [r2], r0
   15c58:	ldr	r0, [r2]
   15c5c:	orr	r0, r0, #67108864	; 0x4000000
   15c60:	str	r0, [r2]
   15c64:	mov	r0, #0
   15c68:	mvn	r2, #0
   15c6c:	bl	157fc <__assert_fail@plt+0x44e8>
   15c70:	mov	sp, fp
   15c74:	pop	{fp, pc}
   15c78:	push	{fp, lr}
   15c7c:	mov	fp, sp
   15c80:	sub	sp, sp, #48	; 0x30
   15c84:	mov	ip, r1
   15c88:	mov	r1, r0
   15c8c:	movw	r0, #41472	; 0xa200
   15c90:	mov	r3, #32
   15c94:	movt	r0, #2
   15c98:	add	r2, r0, #16
   15c9c:	vld1.64	{d16-d17}, [r0], r3
   15ca0:	mov	r3, sp
   15ca4:	vld1.64	{d18-d19}, [r2]
   15ca8:	add	r2, r3, #16
   15cac:	vld1.64	{d20-d21}, [r0]
   15cb0:	add	r0, r3, #32
   15cb4:	vst1.64	{d18-d19}, [r2]
   15cb8:	mov	r2, r3
   15cbc:	vst1.64	{d20-d21}, [r0]
   15cc0:	mov	r0, #12
   15cc4:	vst1.64	{d16-d17}, [r2], r0
   15cc8:	ldr	r0, [r2]
   15ccc:	orr	r0, r0, #67108864	; 0x4000000
   15cd0:	str	r0, [r2]
   15cd4:	mov	r0, #0
   15cd8:	mov	r2, ip
   15cdc:	bl	157fc <__assert_fail@plt+0x44e8>
   15ce0:	mov	sp, fp
   15ce4:	pop	{fp, pc}
   15ce8:	push	{r4, sl, fp, lr}
   15cec:	add	fp, sp, #8
   15cf0:	sub	sp, sp, #96	; 0x60
   15cf4:	mov	ip, r2
   15cf8:	mov	r2, sp
   15cfc:	vmov.i32	q8, #0	; 0x00000000
   15d00:	mov	r4, #28
   15d04:	cmp	r1, #10
   15d08:	mov	r3, r2
   15d0c:	add	lr, r2, #16
   15d10:	vst1.64	{d16-d17}, [r3], r4
   15d14:	vst1.64	{d16-d17}, [lr]
   15d18:	vst1.32	{d16-d17}, [r3]
   15d1c:	beq	15d6c <__assert_fail@plt+0x4a58>
   15d20:	vld1.64	{d16-d17}, [r2], r4
   15d24:	vld1.64	{d18-d19}, [lr]
   15d28:	add	r3, sp, #48	; 0x30
   15d2c:	add	r4, r3, #4
   15d30:	vld1.32	{d20-d21}, [r2]
   15d34:	add	r2, r3, #20
   15d38:	vst1.32	{d16-d17}, [r4]
   15d3c:	vst1.32	{d18-d19}, [r2]
   15d40:	add	r2, r3, #32
   15d44:	vst1.32	{d20-d21}, [r2]
   15d48:	str	r1, [sp, #48]	; 0x30
   15d4c:	mvn	r2, #0
   15d50:	ldr	r1, [sp, #60]	; 0x3c
   15d54:	orr	r1, r1, #67108864	; 0x4000000
   15d58:	str	r1, [sp, #60]	; 0x3c
   15d5c:	mov	r1, ip
   15d60:	bl	157fc <__assert_fail@plt+0x44e8>
   15d64:	sub	sp, fp, #8
   15d68:	pop	{r4, sl, fp, pc}
   15d6c:	bl	112f0 <abort@plt>
   15d70:	push	{r4, r5, fp, lr}
   15d74:	add	fp, sp, #8
   15d78:	sub	sp, sp, #48	; 0x30
   15d7c:	mov	ip, r3
   15d80:	movw	r3, #41472	; 0xa200
   15d84:	mov	lr, #32
   15d88:	cmp	r1, #0
   15d8c:	mov	r5, sp
   15d90:	movt	r3, #2
   15d94:	cmpne	r2, #0
   15d98:	add	r4, r3, #16
   15d9c:	vld1.64	{d16-d17}, [r3], lr
   15da0:	vld1.64	{d18-d19}, [r4]
   15da4:	add	r4, r5, #16
   15da8:	vld1.64	{d20-d21}, [r3]
   15dac:	vst1.64	{d16-d17}, [r5], lr
   15db0:	mov	r3, #10
   15db4:	vst1.64	{d18-d19}, [r4]
   15db8:	vst1.64	{d20-d21}, [r5]
   15dbc:	str	r3, [sp]
   15dc0:	bne	15dc8 <__assert_fail@plt+0x4ab4>
   15dc4:	bl	112f0 <abort@plt>
   15dc8:	str	r2, [sp, #44]	; 0x2c
   15dcc:	str	r1, [sp, #40]	; 0x28
   15dd0:	mov	r3, sp
   15dd4:	mov	r1, ip
   15dd8:	mvn	r2, #0
   15ddc:	bl	157fc <__assert_fail@plt+0x44e8>
   15de0:	sub	sp, fp, #8
   15de4:	pop	{r4, r5, fp, pc}
   15de8:	push	{r4, r5, fp, lr}
   15dec:	add	fp, sp, #8
   15df0:	sub	sp, sp, #48	; 0x30
   15df4:	mov	lr, r3
   15df8:	movw	r3, #41472	; 0xa200
   15dfc:	mov	ip, #32
   15e00:	cmp	r1, #0
   15e04:	mov	r5, sp
   15e08:	movt	r3, #2
   15e0c:	cmpne	r2, #0
   15e10:	add	r4, r3, #16
   15e14:	vld1.64	{d16-d17}, [r3], ip
   15e18:	vld1.64	{d18-d19}, [r4]
   15e1c:	add	r4, r5, #16
   15e20:	vld1.64	{d20-d21}, [r3]
   15e24:	vst1.64	{d16-d17}, [r5], ip
   15e28:	mov	r3, #10
   15e2c:	vst1.64	{d18-d19}, [r4]
   15e30:	vst1.64	{d20-d21}, [r5]
   15e34:	str	r3, [sp]
   15e38:	bne	15e40 <__assert_fail@plt+0x4b2c>
   15e3c:	bl	112f0 <abort@plt>
   15e40:	ldr	ip, [fp, #8]
   15e44:	str	r2, [sp, #44]	; 0x2c
   15e48:	str	r1, [sp, #40]	; 0x28
   15e4c:	mov	r3, sp
   15e50:	mov	r1, lr
   15e54:	mov	r2, ip
   15e58:	bl	157fc <__assert_fail@plt+0x44e8>
   15e5c:	sub	sp, fp, #8
   15e60:	pop	{r4, r5, fp, pc}
   15e64:	push	{r4, sl, fp, lr}
   15e68:	add	fp, sp, #8
   15e6c:	sub	sp, sp, #48	; 0x30
   15e70:	mov	ip, r2
   15e74:	movw	r2, #41472	; 0xa200
   15e78:	mov	lr, #32
   15e7c:	cmp	r0, #0
   15e80:	mov	r4, sp
   15e84:	movt	r2, #2
   15e88:	cmpne	r1, #0
   15e8c:	add	r3, r2, #16
   15e90:	vld1.64	{d16-d17}, [r2], lr
   15e94:	vld1.64	{d18-d19}, [r3]
   15e98:	add	r3, r4, #16
   15e9c:	vld1.64	{d20-d21}, [r2]
   15ea0:	vst1.64	{d16-d17}, [r4], lr
   15ea4:	mov	r2, #10
   15ea8:	vst1.64	{d18-d19}, [r3]
   15eac:	vst1.64	{d20-d21}, [r4]
   15eb0:	str	r2, [sp]
   15eb4:	bne	15ebc <__assert_fail@plt+0x4ba8>
   15eb8:	bl	112f0 <abort@plt>
   15ebc:	str	r1, [sp, #44]	; 0x2c
   15ec0:	str	r0, [sp, #40]	; 0x28
   15ec4:	mov	r3, sp
   15ec8:	mov	r0, #0
   15ecc:	mov	r1, ip
   15ed0:	mvn	r2, #0
   15ed4:	bl	157fc <__assert_fail@plt+0x44e8>
   15ed8:	sub	sp, fp, #8
   15edc:	pop	{r4, sl, fp, pc}
   15ee0:	push	{r4, r5, fp, lr}
   15ee4:	add	fp, sp, #8
   15ee8:	sub	sp, sp, #48	; 0x30
   15eec:	mov	lr, r2
   15ef0:	movw	r2, #41472	; 0xa200
   15ef4:	mov	ip, r3
   15ef8:	mov	r3, #32
   15efc:	cmp	r0, #0
   15f00:	mov	r5, sp
   15f04:	movt	r2, #2
   15f08:	cmpne	r1, #0
   15f0c:	add	r4, r2, #16
   15f10:	vld1.64	{d16-d17}, [r2], r3
   15f14:	vld1.64	{d18-d19}, [r4]
   15f18:	add	r4, r5, #16
   15f1c:	vld1.64	{d20-d21}, [r2]
   15f20:	vst1.64	{d16-d17}, [r5], r3
   15f24:	mov	r2, #10
   15f28:	vst1.64	{d18-d19}, [r4]
   15f2c:	vst1.64	{d20-d21}, [r5]
   15f30:	str	r2, [sp]
   15f34:	bne	15f3c <__assert_fail@plt+0x4c28>
   15f38:	bl	112f0 <abort@plt>
   15f3c:	str	r1, [sp, #44]	; 0x2c
   15f40:	str	r0, [sp, #40]	; 0x28
   15f44:	mov	r3, sp
   15f48:	mov	r0, #0
   15f4c:	mov	r1, lr
   15f50:	mov	r2, ip
   15f54:	bl	157fc <__assert_fail@plt+0x44e8>
   15f58:	sub	sp, fp, #8
   15f5c:	pop	{r4, r5, fp, pc}
   15f60:	movw	r3, #41248	; 0xa120
   15f64:	movt	r3, #2
   15f68:	b	157fc <__assert_fail@plt+0x44e8>
   15f6c:	movw	r3, #41248	; 0xa120
   15f70:	mov	r2, r1
   15f74:	mov	r1, r0
   15f78:	mov	r0, #0
   15f7c:	movt	r3, #2
   15f80:	b	157fc <__assert_fail@plt+0x44e8>
   15f84:	movw	r3, #41248	; 0xa120
   15f88:	mvn	r2, #0
   15f8c:	movt	r3, #2
   15f90:	b	157fc <__assert_fail@plt+0x44e8>
   15f94:	movw	r3, #41248	; 0xa120
   15f98:	mov	r1, r0
   15f9c:	mov	r0, #0
   15fa0:	mvn	r2, #0
   15fa4:	movt	r3, #2
   15fa8:	b	157fc <__assert_fail@plt+0x44e8>
   15fac:	push	{r4, r5, r6, r7, fp, lr}
   15fb0:	add	fp, sp, #16
   15fb4:	mov	r4, r1
   15fb8:	mov	r1, #0
   15fbc:	mov	r6, r2
   15fc0:	bl	1129c <setlocale@plt>
   15fc4:	cmp	r0, #0
   15fc8:	beq	15ff8 <__assert_fail@plt+0x4ce4>
   15fcc:	mov	r7, r0
   15fd0:	bl	111f4 <strlen@plt>
   15fd4:	cmp	r0, r6
   15fd8:	bcs	16018 <__assert_fail@plt+0x4d04>
   15fdc:	add	r2, r0, #1
   15fe0:	mov	r0, r4
   15fe4:	mov	r1, r7
   15fe8:	bl	110c8 <memcpy@plt>
   15fec:	mov	r5, #0
   15ff0:	mov	r0, r5
   15ff4:	pop	{r4, r5, r6, r7, fp, pc}
   15ff8:	cmp	r6, #0
   15ffc:	mov	r5, #22
   16000:	movne	r0, #0
   16004:	strbne	r0, [r4]
   16008:	movne	r0, r5
   1600c:	popne	{r4, r5, r6, r7, fp, pc}
   16010:	mov	r0, r5
   16014:	pop	{r4, r5, r6, r7, fp, pc}
   16018:	mov	r5, #34	; 0x22
   1601c:	cmp	r6, #0
   16020:	beq	16040 <__assert_fail@plt+0x4d2c>
   16024:	sub	r6, r6, #1
   16028:	mov	r0, r4
   1602c:	mov	r1, r7
   16030:	mov	r2, r6
   16034:	bl	110c8 <memcpy@plt>
   16038:	mov	r0, #0
   1603c:	strb	r0, [r4, r6]
   16040:	mov	r0, r5
   16044:	pop	{r4, r5, r6, r7, fp, pc}
   16048:	mov	r1, #0
   1604c:	b	1129c <setlocale@plt>
   16050:	mov	r1, #0
   16054:	mov	r2, #3
   16058:	b	1852c <__assert_fail@plt+0x7218>
   1605c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16060:	add	fp, sp, #24
   16064:	sub	sp, sp, #32
   16068:	ldr	r6, [fp, #12]
   1606c:	ldr	r7, [fp, #8]
   16070:	mov	r4, r2
   16074:	mov	r8, r0
   16078:	cmp	r1, #0
   1607c:	beq	160a4 <__assert_fail@plt+0x4d90>
   16080:	movw	r2, #39388	; 0x99dc
   16084:	mov	r5, r1
   16088:	str	r3, [sp, #4]
   1608c:	str	r4, [sp]
   16090:	mov	r0, r8
   16094:	mov	r1, #1
   16098:	movt	r2, #1
   1609c:	mov	r3, r5
   160a0:	b	160bc <__assert_fail@plt+0x4da8>
   160a4:	movw	r2, #39400	; 0x99e8
   160a8:	str	r3, [sp]
   160ac:	mov	r0, r8
   160b0:	mov	r1, #1
   160b4:	mov	r3, r4
   160b8:	movt	r2, #1
   160bc:	bl	11248 <__fprintf_chk@plt>
   160c0:	movw	r1, #39407	; 0x99ef
   160c4:	mov	r0, #0
   160c8:	mov	r2, #5
   160cc:	movt	r1, #1
   160d0:	bl	11104 <dcgettext@plt>
   160d4:	movw	r2, #40125	; 0x9cbd
   160d8:	mov	r3, r0
   160dc:	movw	r0, #2022	; 0x7e6
   160e0:	mov	r1, #1
   160e4:	str	r0, [sp]
   160e8:	movt	r2, #1
   160ec:	mov	r0, r8
   160f0:	bl	11248 <__fprintf_chk@plt>
   160f4:	movw	r4, #38685	; 0x971d
   160f8:	mov	r1, r8
   160fc:	movt	r4, #1
   16100:	mov	r0, r4
   16104:	bl	11074 <fputs_unlocked@plt>
   16108:	movw	r1, #39411	; 0x99f3
   1610c:	mov	r0, #0
   16110:	mov	r2, #5
   16114:	movt	r1, #1
   16118:	bl	11104 <dcgettext@plt>
   1611c:	movw	r3, #39582	; 0x9a9e
   16120:	mov	r2, r0
   16124:	mov	r0, r8
   16128:	mov	r1, #1
   1612c:	movt	r3, #1
   16130:	bl	11248 <__fprintf_chk@plt>
   16134:	mov	r0, r4
   16138:	mov	r1, r8
   1613c:	bl	11074 <fputs_unlocked@plt>
   16140:	cmp	r6, #9
   16144:	bhi	16180 <__assert_fail@plt+0x4e6c>
   16148:	add	r0, pc, #0
   1614c:	ldr	pc, [r0, r6, lsl #2]
   16150:	andeq	r6, r1, r8, ror r1
   16154:	andeq	r6, r1, ip, lsl #3
   16158:			; <UNDEFINED> instruction: 0x000161bc
   1615c:	andeq	r6, r1, r4, ror #3
   16160:	andeq	r6, r1, ip, lsl #4
   16164:	andeq	r6, r1, r4, lsr r2
   16168:	andeq	r6, r1, ip, asr r2
   1616c:	muleq	r1, r4, r2
   16170:	andeq	r6, r1, ip, lsr r3
   16174:	andeq	r6, r1, r4, ror #5
   16178:	sub	sp, fp, #24
   1617c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16180:	movw	r1, #39935	; 0x9bff
   16184:	movt	r1, #1
   16188:	b	162ec <__assert_fail@plt+0x4fd8>
   1618c:	movw	r1, #39616	; 0x9ac0
   16190:	mov	r0, #0
   16194:	mov	r2, #5
   16198:	movt	r1, #1
   1619c:	bl	11104 <dcgettext@plt>
   161a0:	ldr	r3, [r7]
   161a4:	mov	r2, r0
   161a8:	mov	r0, r8
   161ac:	mov	r1, #1
   161b0:	sub	sp, fp, #24
   161b4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   161b8:	b	11248 <__fprintf_chk@plt>
   161bc:	movw	r1, #39632	; 0x9ad0
   161c0:	mov	r0, #0
   161c4:	mov	r2, #5
   161c8:	movt	r1, #1
   161cc:	bl	11104 <dcgettext@plt>
   161d0:	mov	r2, r0
   161d4:	ldr	r3, [r7]
   161d8:	ldr	r0, [r7, #4]
   161dc:	str	r0, [sp]
   161e0:	b	162d0 <__assert_fail@plt+0x4fbc>
   161e4:	movw	r1, #39655	; 0x9ae7
   161e8:	mov	r0, #0
   161ec:	mov	r2, #5
   161f0:	movt	r1, #1
   161f4:	bl	11104 <dcgettext@plt>
   161f8:	ldr	r3, [r7]
   161fc:	mov	r2, r0
   16200:	ldmib	r7, {r0, r1}
   16204:	stm	sp, {r0, r1}
   16208:	b	162d0 <__assert_fail@plt+0x4fbc>
   1620c:	movw	r1, #39683	; 0x9b03
   16210:	mov	r0, #0
   16214:	mov	r2, #5
   16218:	movt	r1, #1
   1621c:	bl	11104 <dcgettext@plt>
   16220:	ldr	r3, [r7]
   16224:	mov	r2, r0
   16228:	ldmib	r7, {r0, r1, r7}
   1622c:	stm	sp, {r0, r1, r7}
   16230:	b	162d0 <__assert_fail@plt+0x4fbc>
   16234:	movw	r1, #39715	; 0x9b23
   16238:	mov	r0, #0
   1623c:	mov	r2, #5
   16240:	movt	r1, #1
   16244:	bl	11104 <dcgettext@plt>
   16248:	ldr	r3, [r7]
   1624c:	mov	r2, r0
   16250:	ldmib	r7, {r0, r1, r6, r7}
   16254:	stm	sp, {r0, r1, r6, r7}
   16258:	b	162d0 <__assert_fail@plt+0x4fbc>
   1625c:	movw	r1, #39751	; 0x9b47
   16260:	mov	r0, #0
   16264:	mov	r2, #5
   16268:	movt	r1, #1
   1626c:	bl	11104 <dcgettext@plt>
   16270:	ldr	r3, [r7]
   16274:	mov	r2, r0
   16278:	ldmib	r7, {r0, r1, r6}
   1627c:	ldr	r5, [r7, #16]
   16280:	ldr	r7, [r7, #20]
   16284:	stm	sp, {r0, r1, r6}
   16288:	str	r5, [sp, #12]
   1628c:	str	r7, [sp, #16]
   16290:	b	162d0 <__assert_fail@plt+0x4fbc>
   16294:	movw	r1, #39791	; 0x9b6f
   16298:	mov	r0, #0
   1629c:	mov	r2, #5
   162a0:	movt	r1, #1
   162a4:	bl	11104 <dcgettext@plt>
   162a8:	ldr	r3, [r7]
   162ac:	mov	r2, r0
   162b0:	ldmib	r7, {r0, r1, r6}
   162b4:	ldr	r5, [r7, #16]
   162b8:	ldr	r4, [r7, #20]
   162bc:	ldr	r7, [r7, #24]
   162c0:	stm	sp, {r0, r1, r6}
   162c4:	str	r5, [sp, #12]
   162c8:	str	r4, [sp, #16]
   162cc:	str	r7, [sp, #20]
   162d0:	mov	r0, r8
   162d4:	mov	r1, #1
   162d8:	bl	11248 <__fprintf_chk@plt>
   162dc:	sub	sp, fp, #24
   162e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162e4:	movw	r1, #39883	; 0x9bcb
   162e8:	movt	r1, #1
   162ec:	mov	r0, #0
   162f0:	mov	r2, #5
   162f4:	bl	11104 <dcgettext@plt>
   162f8:	mov	ip, r0
   162fc:	ldr	r3, [r7]
   16300:	ldr	r0, [r7, #4]
   16304:	ldr	r1, [r7, #8]
   16308:	ldr	r6, [r7, #12]
   1630c:	ldr	r5, [r7, #16]
   16310:	ldr	r4, [r7, #20]
   16314:	ldr	r2, [r7, #24]
   16318:	ldr	lr, [r7, #28]
   1631c:	ldr	r7, [r7, #32]
   16320:	stm	sp, {r0, r1, r6}
   16324:	str	r5, [sp, #12]
   16328:	str	r4, [sp, #16]
   1632c:	str	r2, [sp, #20]
   16330:	str	lr, [sp, #24]
   16334:	str	r7, [sp, #28]
   16338:	b	16380 <__assert_fail@plt+0x506c>
   1633c:	movw	r1, #39835	; 0x9b9b
   16340:	mov	r0, #0
   16344:	mov	r2, #5
   16348:	movt	r1, #1
   1634c:	bl	11104 <dcgettext@plt>
   16350:	mov	ip, r0
   16354:	ldr	r3, [r7]
   16358:	ldmib	r7, {r0, r1, r6}
   1635c:	ldr	r5, [r7, #16]
   16360:	ldr	r4, [r7, #20]
   16364:	ldr	r2, [r7, #24]
   16368:	ldr	r7, [r7, #28]
   1636c:	stm	sp, {r0, r1, r6}
   16370:	str	r5, [sp, #12]
   16374:	str	r4, [sp, #16]
   16378:	str	r2, [sp, #20]
   1637c:	str	r7, [sp, #24]
   16380:	mov	r0, r8
   16384:	mov	r1, #1
   16388:	mov	r2, ip
   1638c:	bl	11248 <__fprintf_chk@plt>
   16390:	sub	sp, fp, #24
   16394:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16398:	push	{r4, sl, fp, lr}
   1639c:	add	fp, sp, #8
   163a0:	sub	sp, sp, #8
   163a4:	ldr	ip, [fp, #8]
   163a8:	mov	lr, #0
   163ac:	ldr	r4, [ip, lr, lsl #2]
   163b0:	add	lr, lr, #1
   163b4:	cmp	r4, #0
   163b8:	bne	163ac <__assert_fail@plt+0x5098>
   163bc:	sub	r4, lr, #1
   163c0:	str	ip, [sp]
   163c4:	str	r4, [sp, #4]
   163c8:	bl	1605c <__assert_fail@plt+0x4d48>
   163cc:	sub	sp, fp, #8
   163d0:	pop	{r4, sl, fp, pc}
   163d4:	push	{fp, lr}
   163d8:	mov	fp, sp
   163dc:	sub	sp, sp, #48	; 0x30
   163e0:	ldr	ip, [fp, #8]
   163e4:	ldr	lr, [ip]
   163e8:	cmp	lr, #0
   163ec:	str	lr, [sp, #8]
   163f0:	beq	1648c <__assert_fail@plt+0x5178>
   163f4:	ldr	lr, [ip, #4]
   163f8:	cmp	lr, #0
   163fc:	str	lr, [sp, #12]
   16400:	beq	16494 <__assert_fail@plt+0x5180>
   16404:	ldr	lr, [ip, #8]
   16408:	cmp	lr, #0
   1640c:	str	lr, [sp, #16]
   16410:	beq	1649c <__assert_fail@plt+0x5188>
   16414:	ldr	lr, [ip, #12]
   16418:	cmp	lr, #0
   1641c:	str	lr, [sp, #20]
   16420:	beq	164a4 <__assert_fail@plt+0x5190>
   16424:	ldr	lr, [ip, #16]
   16428:	cmp	lr, #0
   1642c:	str	lr, [sp, #24]
   16430:	beq	164ac <__assert_fail@plt+0x5198>
   16434:	ldr	lr, [ip, #20]
   16438:	cmp	lr, #0
   1643c:	str	lr, [sp, #28]
   16440:	beq	164b4 <__assert_fail@plt+0x51a0>
   16444:	ldr	lr, [ip, #24]
   16448:	cmp	lr, #0
   1644c:	str	lr, [sp, #32]
   16450:	beq	164bc <__assert_fail@plt+0x51a8>
   16454:	ldr	lr, [ip, #28]
   16458:	cmp	lr, #0
   1645c:	str	lr, [sp, #36]	; 0x24
   16460:	beq	164c4 <__assert_fail@plt+0x51b0>
   16464:	ldr	lr, [ip, #32]
   16468:	cmp	lr, #0
   1646c:	str	lr, [sp, #40]	; 0x28
   16470:	beq	164cc <__assert_fail@plt+0x51b8>
   16474:	ldr	lr, [ip, #36]	; 0x24
   16478:	mov	ip, #10
   1647c:	cmp	lr, #0
   16480:	str	lr, [sp, #44]	; 0x2c
   16484:	movweq	ip, #9
   16488:	b	164d0 <__assert_fail@plt+0x51bc>
   1648c:	mov	ip, #0
   16490:	b	164d0 <__assert_fail@plt+0x51bc>
   16494:	mov	ip, #1
   16498:	b	164d0 <__assert_fail@plt+0x51bc>
   1649c:	mov	ip, #2
   164a0:	b	164d0 <__assert_fail@plt+0x51bc>
   164a4:	mov	ip, #3
   164a8:	b	164d0 <__assert_fail@plt+0x51bc>
   164ac:	mov	ip, #4
   164b0:	b	164d0 <__assert_fail@plt+0x51bc>
   164b4:	mov	ip, #5
   164b8:	b	164d0 <__assert_fail@plt+0x51bc>
   164bc:	mov	ip, #6
   164c0:	b	164d0 <__assert_fail@plt+0x51bc>
   164c4:	mov	ip, #7
   164c8:	b	164d0 <__assert_fail@plt+0x51bc>
   164cc:	mov	ip, #8
   164d0:	add	lr, sp, #8
   164d4:	str	ip, [sp, #4]
   164d8:	str	lr, [sp]
   164dc:	bl	1605c <__assert_fail@plt+0x4d48>
   164e0:	mov	sp, fp
   164e4:	pop	{fp, pc}
   164e8:	push	{fp, lr}
   164ec:	mov	fp, sp
   164f0:	sub	sp, sp, #56	; 0x38
   164f4:	add	ip, fp, #8
   164f8:	str	ip, [sp, #12]
   164fc:	ldr	lr, [fp, #8]
   16500:	cmp	lr, #0
   16504:	str	lr, [sp, #16]
   16508:	beq	165a4 <__assert_fail@plt+0x5290>
   1650c:	ldr	lr, [ip, #4]
   16510:	cmp	lr, #0
   16514:	str	lr, [sp, #20]
   16518:	beq	165ac <__assert_fail@plt+0x5298>
   1651c:	ldr	lr, [ip, #8]
   16520:	cmp	lr, #0
   16524:	str	lr, [sp, #24]
   16528:	beq	165b4 <__assert_fail@plt+0x52a0>
   1652c:	ldr	lr, [ip, #12]
   16530:	cmp	lr, #0
   16534:	str	lr, [sp, #28]
   16538:	beq	165bc <__assert_fail@plt+0x52a8>
   1653c:	ldr	lr, [ip, #16]
   16540:	cmp	lr, #0
   16544:	str	lr, [sp, #32]
   16548:	beq	165c4 <__assert_fail@plt+0x52b0>
   1654c:	ldr	lr, [ip, #20]
   16550:	cmp	lr, #0
   16554:	str	lr, [sp, #36]	; 0x24
   16558:	beq	165cc <__assert_fail@plt+0x52b8>
   1655c:	ldr	lr, [ip, #24]
   16560:	cmp	lr, #0
   16564:	str	lr, [sp, #40]	; 0x28
   16568:	beq	165d4 <__assert_fail@plt+0x52c0>
   1656c:	ldr	lr, [ip, #28]
   16570:	cmp	lr, #0
   16574:	str	lr, [sp, #44]	; 0x2c
   16578:	beq	165dc <__assert_fail@plt+0x52c8>
   1657c:	ldr	lr, [ip, #32]
   16580:	cmp	lr, #0
   16584:	str	lr, [sp, #48]	; 0x30
   16588:	beq	165e4 <__assert_fail@plt+0x52d0>
   1658c:	ldr	lr, [ip, #36]	; 0x24
   16590:	mov	ip, #10
   16594:	cmp	lr, #0
   16598:	str	lr, [sp, #52]	; 0x34
   1659c:	movweq	ip, #9
   165a0:	b	165e8 <__assert_fail@plt+0x52d4>
   165a4:	mov	ip, #0
   165a8:	b	165e8 <__assert_fail@plt+0x52d4>
   165ac:	mov	ip, #1
   165b0:	b	165e8 <__assert_fail@plt+0x52d4>
   165b4:	mov	ip, #2
   165b8:	b	165e8 <__assert_fail@plt+0x52d4>
   165bc:	mov	ip, #3
   165c0:	b	165e8 <__assert_fail@plt+0x52d4>
   165c4:	mov	ip, #4
   165c8:	b	165e8 <__assert_fail@plt+0x52d4>
   165cc:	mov	ip, #5
   165d0:	b	165e8 <__assert_fail@plt+0x52d4>
   165d4:	mov	ip, #6
   165d8:	b	165e8 <__assert_fail@plt+0x52d4>
   165dc:	mov	ip, #7
   165e0:	b	165e8 <__assert_fail@plt+0x52d4>
   165e4:	mov	ip, #8
   165e8:	add	lr, sp, #16
   165ec:	str	ip, [sp, #4]
   165f0:	str	lr, [sp]
   165f4:	bl	1605c <__assert_fail@plt+0x4d48>
   165f8:	mov	sp, fp
   165fc:	pop	{fp, pc}
   16600:	push	{fp, lr}
   16604:	mov	fp, sp
   16608:	movw	r0, #41340	; 0xa17c
   1660c:	movt	r0, #2
   16610:	ldr	r1, [r0]
   16614:	movw	r0, #38685	; 0x971d
   16618:	movt	r0, #1
   1661c:	bl	11074 <fputs_unlocked@plt>
   16620:	movw	r1, #39995	; 0x9c3b
   16624:	mov	r0, #0
   16628:	mov	r2, #5
   1662c:	movt	r1, #1
   16630:	bl	11104 <dcgettext@plt>
   16634:	movw	r2, #40015	; 0x9c4f
   16638:	mov	r1, r0
   1663c:	mov	r0, #1
   16640:	movt	r2, #1
   16644:	bl	11230 <__printf_chk@plt>
   16648:	movw	r1, #40037	; 0x9c65
   1664c:	mov	r0, #0
   16650:	mov	r2, #5
   16654:	movt	r1, #1
   16658:	bl	11104 <dcgettext@plt>
   1665c:	movw	r2, #38243	; 0x9563
   16660:	movw	r3, #38494	; 0x965e
   16664:	mov	r1, r0
   16668:	mov	r0, #1
   1666c:	movt	r2, #1
   16670:	movt	r3, #1
   16674:	bl	11230 <__printf_chk@plt>
   16678:	movw	r1, #40057	; 0x9c79
   1667c:	mov	r0, #0
   16680:	mov	r2, #5
   16684:	movt	r1, #1
   16688:	bl	11104 <dcgettext@plt>
   1668c:	movw	r2, #40096	; 0x9ca0
   16690:	mov	r1, r0
   16694:	mov	r0, #1
   16698:	movt	r2, #1
   1669c:	pop	{fp, lr}
   166a0:	b	11230 <__printf_chk@plt>
   166a4:	push	{r4, r5, r6, sl, fp, lr}
   166a8:	add	fp, sp, #16
   166ac:	mov	r4, r2
   166b0:	mov	r5, r1
   166b4:	mov	r6, r0
   166b8:	bl	18990 <__assert_fail@plt+0x767c>
   166bc:	cmp	r0, #0
   166c0:	popne	{r4, r5, r6, sl, fp, pc}
   166c4:	cmp	r6, #0
   166c8:	beq	166dc <__assert_fail@plt+0x53c8>
   166cc:	cmp	r5, #0
   166d0:	cmpne	r4, #0
   166d4:	bne	166dc <__assert_fail@plt+0x53c8>
   166d8:	pop	{r4, r5, r6, sl, fp, pc}
   166dc:	bl	16c7c <__assert_fail@plt+0x5968>
   166e0:	push	{r4, r5, r6, sl, fp, lr}
   166e4:	add	fp, sp, #16
   166e8:	mov	r4, r2
   166ec:	mov	r5, r1
   166f0:	mov	r6, r0
   166f4:	bl	18990 <__assert_fail@plt+0x767c>
   166f8:	cmp	r0, #0
   166fc:	popne	{r4, r5, r6, sl, fp, pc}
   16700:	cmp	r6, #0
   16704:	beq	16718 <__assert_fail@plt+0x5404>
   16708:	cmp	r5, #0
   1670c:	cmpne	r4, #0
   16710:	bne	16718 <__assert_fail@plt+0x5404>
   16714:	pop	{r4, r5, r6, sl, fp, pc}
   16718:	bl	16c7c <__assert_fail@plt+0x5968>
   1671c:	push	{fp, lr}
   16720:	mov	fp, sp
   16724:	bl	18424 <__assert_fail@plt+0x7110>
   16728:	cmp	r0, #0
   1672c:	popne	{fp, pc}
   16730:	bl	16c7c <__assert_fail@plt+0x5968>
   16734:	push	{fp, lr}
   16738:	mov	fp, sp
   1673c:	bl	18424 <__assert_fail@plt+0x7110>
   16740:	cmp	r0, #0
   16744:	popne	{fp, pc}
   16748:	bl	16c7c <__assert_fail@plt+0x5968>
   1674c:	push	{fp, lr}
   16750:	mov	fp, sp
   16754:	bl	18424 <__assert_fail@plt+0x7110>
   16758:	cmp	r0, #0
   1675c:	popne	{fp, pc}
   16760:	bl	16c7c <__assert_fail@plt+0x5968>
   16764:	push	{r4, r5, fp, lr}
   16768:	add	fp, sp, #8
   1676c:	mov	r4, r1
   16770:	mov	r5, r0
   16774:	bl	18454 <__assert_fail@plt+0x7140>
   16778:	cmp	r0, #0
   1677c:	popne	{r4, r5, fp, pc}
   16780:	cmp	r5, #0
   16784:	beq	16794 <__assert_fail@plt+0x5480>
   16788:	cmp	r4, #0
   1678c:	bne	16794 <__assert_fail@plt+0x5480>
   16790:	pop	{r4, r5, fp, pc}
   16794:	bl	16c7c <__assert_fail@plt+0x5968>
   16798:	push	{fp, lr}
   1679c:	mov	fp, sp
   167a0:	cmp	r1, #0
   167a4:	orreq	r1, r1, #1
   167a8:	bl	18454 <__assert_fail@plt+0x7140>
   167ac:	cmp	r0, #0
   167b0:	popne	{fp, pc}
   167b4:	bl	16c7c <__assert_fail@plt+0x5968>
   167b8:	push	{fp, lr}
   167bc:	mov	fp, sp
   167c0:	clz	r3, r2
   167c4:	lsr	ip, r3, #5
   167c8:	clz	r3, r1
   167cc:	lsr	r3, r3, #5
   167d0:	orrs	r3, r3, ip
   167d4:	movwne	r1, #1
   167d8:	movwne	r2, #1
   167dc:	bl	18990 <__assert_fail@plt+0x767c>
   167e0:	cmp	r0, #0
   167e4:	popne	{fp, pc}
   167e8:	bl	16c7c <__assert_fail@plt+0x5968>
   167ec:	push	{fp, lr}
   167f0:	mov	fp, sp
   167f4:	mov	r2, r1
   167f8:	mov	r1, r0
   167fc:	mov	r0, #0
   16800:	bl	18990 <__assert_fail@plt+0x767c>
   16804:	cmp	r0, #0
   16808:	popne	{fp, pc}
   1680c:	bl	16c7c <__assert_fail@plt+0x5968>
   16810:	push	{fp, lr}
   16814:	mov	fp, sp
   16818:	mov	r2, r1
   1681c:	mov	r1, r0
   16820:	clz	r0, r2
   16824:	clz	r3, r1
   16828:	lsr	r0, r0, #5
   1682c:	lsr	r3, r3, #5
   16830:	orrs	r0, r3, r0
   16834:	movwne	r1, #1
   16838:	movwne	r2, #1
   1683c:	mov	r0, #0
   16840:	bl	18990 <__assert_fail@plt+0x767c>
   16844:	cmp	r0, #0
   16848:	popne	{fp, pc}
   1684c:	bl	16c7c <__assert_fail@plt+0x5968>
   16850:	push	{r4, r5, r6, sl, fp, lr}
   16854:	add	fp, sp, #16
   16858:	ldr	r5, [r1]
   1685c:	mov	r4, r1
   16860:	mov	r6, r0
   16864:	cmp	r0, #0
   16868:	beq	16880 <__assert_fail@plt+0x556c>
   1686c:	mov	r0, #1
   16870:	add	r0, r0, r5, lsr #1
   16874:	adds	r5, r5, r0
   16878:	bcc	16888 <__assert_fail@plt+0x5574>
   1687c:	b	168c4 <__assert_fail@plt+0x55b0>
   16880:	cmp	r5, #0
   16884:	movweq	r5, #64	; 0x40
   16888:	mov	r0, r6
   1688c:	mov	r1, r5
   16890:	mov	r2, #1
   16894:	bl	18990 <__assert_fail@plt+0x767c>
   16898:	cmp	r5, #0
   1689c:	mov	r1, r5
   168a0:	movwne	r1, #1
   168a4:	cmp	r0, #0
   168a8:	bne	168bc <__assert_fail@plt+0x55a8>
   168ac:	clz	r2, r6
   168b0:	lsr	r2, r2, #5
   168b4:	orrs	r1, r2, r1
   168b8:	bne	168c4 <__assert_fail@plt+0x55b0>
   168bc:	str	r5, [r4]
   168c0:	pop	{r4, r5, r6, sl, fp, pc}
   168c4:	bl	16c7c <__assert_fail@plt+0x5968>
   168c8:	push	{r4, r5, r6, r7, fp, lr}
   168cc:	add	fp, sp, #16
   168d0:	ldr	r5, [r1]
   168d4:	mov	r6, r2
   168d8:	mov	r4, r1
   168dc:	mov	r7, r0
   168e0:	cmp	r0, #0
   168e4:	beq	168fc <__assert_fail@plt+0x55e8>
   168e8:	mov	r0, #1
   168ec:	add	r0, r0, r5, lsr #1
   168f0:	adds	r5, r5, r0
   168f4:	bcc	16914 <__assert_fail@plt+0x5600>
   168f8:	b	16948 <__assert_fail@plt+0x5634>
   168fc:	cmp	r5, #0
   16900:	bne	16914 <__assert_fail@plt+0x5600>
   16904:	mov	r0, #64	; 0x40
   16908:	cmp	r6, #64	; 0x40
   1690c:	udiv	r5, r0, r6
   16910:	addhi	r5, r5, #1
   16914:	mov	r0, r7
   16918:	mov	r1, r5
   1691c:	mov	r2, r6
   16920:	bl	18990 <__assert_fail@plt+0x767c>
   16924:	cmp	r0, #0
   16928:	bne	16940 <__assert_fail@plt+0x562c>
   1692c:	cmp	r7, #0
   16930:	beq	16948 <__assert_fail@plt+0x5634>
   16934:	cmp	r6, #0
   16938:	cmpne	r5, #0
   1693c:	bne	16948 <__assert_fail@plt+0x5634>
   16940:	str	r5, [r4]
   16944:	pop	{r4, r5, r6, r7, fp, pc}
   16948:	bl	16c7c <__assert_fail@plt+0x5968>
   1694c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16950:	add	fp, sp, #24
   16954:	mov	r8, r1
   16958:	ldr	r1, [r1]
   1695c:	mov	r5, r0
   16960:	add	r0, r1, r1, asr #1
   16964:	cmp	r0, r1
   16968:	mvnvs	r0, #-2147483648	; 0x80000000
   1696c:	cmp	r0, r3
   16970:	mov	r7, r0
   16974:	movgt	r7, r3
   16978:	cmn	r3, #1
   1697c:	movle	r7, r0
   16980:	ldr	r0, [fp, #8]
   16984:	cmn	r0, #1
   16988:	ble	169b0 <__assert_fail@plt+0x569c>
   1698c:	cmp	r0, #0
   16990:	beq	16a04 <__assert_fail@plt+0x56f0>
   16994:	cmn	r7, #1
   16998:	ble	169d8 <__assert_fail@plt+0x56c4>
   1699c:	mvn	r4, #-2147483648	; 0x80000000
   169a0:	udiv	r6, r4, r0
   169a4:	cmp	r6, r7
   169a8:	bge	16a04 <__assert_fail@plt+0x56f0>
   169ac:	b	16a14 <__assert_fail@plt+0x5700>
   169b0:	cmn	r7, #1
   169b4:	ble	169f4 <__assert_fail@plt+0x56e0>
   169b8:	cmn	r0, #1
   169bc:	beq	16a04 <__assert_fail@plt+0x56f0>
   169c0:	mov	r6, #-2147483648	; 0x80000000
   169c4:	mvn	r4, #-2147483648	; 0x80000000
   169c8:	sdiv	r6, r6, r0
   169cc:	cmp	r6, r7
   169d0:	bge	16a04 <__assert_fail@plt+0x56f0>
   169d4:	b	16a14 <__assert_fail@plt+0x5700>
   169d8:	beq	16a04 <__assert_fail@plt+0x56f0>
   169dc:	mov	r6, #-2147483648	; 0x80000000
   169e0:	mvn	r4, #-2147483648	; 0x80000000
   169e4:	sdiv	r6, r6, r7
   169e8:	cmp	r6, r0
   169ec:	bge	16a04 <__assert_fail@plt+0x56f0>
   169f0:	b	16a14 <__assert_fail@plt+0x5700>
   169f4:	mvn	r4, #-2147483648	; 0x80000000
   169f8:	sdiv	r6, r4, r0
   169fc:	cmp	r7, r6
   16a00:	blt	16a14 <__assert_fail@plt+0x5700>
   16a04:	mul	r6, r7, r0
   16a08:	mov	r4, #64	; 0x40
   16a0c:	cmp	r6, #63	; 0x3f
   16a10:	bgt	16a1c <__assert_fail@plt+0x5708>
   16a14:	sdiv	r7, r4, r0
   16a18:	mul	r6, r7, r0
   16a1c:	cmp	r5, #0
   16a20:	moveq	r4, #0
   16a24:	streq	r4, [r8]
   16a28:	sub	r4, r7, r1
   16a2c:	cmp	r4, r2
   16a30:	bge	16adc <__assert_fail@plt+0x57c8>
   16a34:	add	r7, r1, r2
   16a38:	mov	r6, #0
   16a3c:	mov	r2, #0
   16a40:	cmp	r7, r3
   16a44:	movwgt	r6, #1
   16a48:	cmn	r3, #1
   16a4c:	movwgt	r2, #1
   16a50:	cmp	r7, r1
   16a54:	bvs	16b10 <__assert_fail@plt+0x57fc>
   16a58:	ands	r1, r2, r6
   16a5c:	bne	16b10 <__assert_fail@plt+0x57fc>
   16a60:	cmn	r0, #1
   16a64:	ble	16a8c <__assert_fail@plt+0x5778>
   16a68:	cmp	r0, #0
   16a6c:	beq	16ad8 <__assert_fail@plt+0x57c4>
   16a70:	cmn	r7, #1
   16a74:	ble	16ab0 <__assert_fail@plt+0x579c>
   16a78:	mvn	r1, #-2147483648	; 0x80000000
   16a7c:	udiv	r1, r1, r0
   16a80:	cmp	r1, r7
   16a84:	bge	16ad8 <__assert_fail@plt+0x57c4>
   16a88:	b	16b10 <__assert_fail@plt+0x57fc>
   16a8c:	cmn	r7, #1
   16a90:	ble	16ac8 <__assert_fail@plt+0x57b4>
   16a94:	cmn	r0, #1
   16a98:	beq	16ad8 <__assert_fail@plt+0x57c4>
   16a9c:	mov	r1, #-2147483648	; 0x80000000
   16aa0:	sdiv	r1, r1, r0
   16aa4:	cmp	r1, r7
   16aa8:	bge	16ad8 <__assert_fail@plt+0x57c4>
   16aac:	b	16b10 <__assert_fail@plt+0x57fc>
   16ab0:	beq	16ad8 <__assert_fail@plt+0x57c4>
   16ab4:	mov	r1, #-2147483648	; 0x80000000
   16ab8:	sdiv	r1, r1, r7
   16abc:	cmp	r1, r0
   16ac0:	bge	16ad8 <__assert_fail@plt+0x57c4>
   16ac4:	b	16b10 <__assert_fail@plt+0x57fc>
   16ac8:	mvn	r1, #-2147483648	; 0x80000000
   16acc:	sdiv	r1, r1, r0
   16ad0:	cmp	r7, r1
   16ad4:	blt	16b10 <__assert_fail@plt+0x57fc>
   16ad8:	mul	r6, r7, r0
   16adc:	mov	r0, r5
   16ae0:	mov	r1, r6
   16ae4:	bl	18454 <__assert_fail@plt+0x7140>
   16ae8:	cmp	r6, #0
   16aec:	movwne	r6, #1
   16af0:	cmp	r0, #0
   16af4:	bne	16b08 <__assert_fail@plt+0x57f4>
   16af8:	clz	r1, r5
   16afc:	lsr	r1, r1, #5
   16b00:	orrs	r1, r1, r6
   16b04:	bne	16b10 <__assert_fail@plt+0x57fc>
   16b08:	str	r7, [r8]
   16b0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16b10:	bl	16c7c <__assert_fail@plt+0x5968>
   16b14:	push	{fp, lr}
   16b18:	mov	fp, sp
   16b1c:	mov	r1, #1
   16b20:	bl	183d0 <__assert_fail@plt+0x70bc>
   16b24:	cmp	r0, #0
   16b28:	popne	{fp, pc}
   16b2c:	bl	16c7c <__assert_fail@plt+0x5968>
   16b30:	push	{fp, lr}
   16b34:	mov	fp, sp
   16b38:	bl	183d0 <__assert_fail@plt+0x70bc>
   16b3c:	cmp	r0, #0
   16b40:	popne	{fp, pc}
   16b44:	bl	16c7c <__assert_fail@plt+0x5968>
   16b48:	push	{fp, lr}
   16b4c:	mov	fp, sp
   16b50:	mov	r1, #1
   16b54:	bl	183d0 <__assert_fail@plt+0x70bc>
   16b58:	cmp	r0, #0
   16b5c:	popne	{fp, pc}
   16b60:	bl	16c7c <__assert_fail@plt+0x5968>
   16b64:	push	{fp, lr}
   16b68:	mov	fp, sp
   16b6c:	bl	183d0 <__assert_fail@plt+0x70bc>
   16b70:	cmp	r0, #0
   16b74:	popne	{fp, pc}
   16b78:	bl	16c7c <__assert_fail@plt+0x5968>
   16b7c:	push	{r4, r5, r6, sl, fp, lr}
   16b80:	add	fp, sp, #16
   16b84:	mov	r5, r0
   16b88:	mov	r0, r1
   16b8c:	mov	r4, r1
   16b90:	bl	18424 <__assert_fail@plt+0x7110>
   16b94:	cmp	r0, #0
   16b98:	beq	16bb4 <__assert_fail@plt+0x58a0>
   16b9c:	mov	r1, r5
   16ba0:	mov	r2, r4
   16ba4:	mov	r6, r0
   16ba8:	bl	110c8 <memcpy@plt>
   16bac:	mov	r0, r6
   16bb0:	pop	{r4, r5, r6, sl, fp, pc}
   16bb4:	bl	16c7c <__assert_fail@plt+0x5968>
   16bb8:	push	{r4, r5, r6, sl, fp, lr}
   16bbc:	add	fp, sp, #16
   16bc0:	mov	r5, r0
   16bc4:	mov	r0, r1
   16bc8:	mov	r4, r1
   16bcc:	bl	18424 <__assert_fail@plt+0x7110>
   16bd0:	cmp	r0, #0
   16bd4:	beq	16bf0 <__assert_fail@plt+0x58dc>
   16bd8:	mov	r1, r5
   16bdc:	mov	r2, r4
   16be0:	mov	r6, r0
   16be4:	bl	110c8 <memcpy@plt>
   16be8:	mov	r0, r6
   16bec:	pop	{r4, r5, r6, sl, fp, pc}
   16bf0:	bl	16c7c <__assert_fail@plt+0x5968>
   16bf4:	push	{r4, r5, r6, sl, fp, lr}
   16bf8:	add	fp, sp, #16
   16bfc:	mov	r5, r0
   16c00:	add	r0, r1, #1
   16c04:	mov	r4, r1
   16c08:	bl	18424 <__assert_fail@plt+0x7110>
   16c0c:	cmp	r0, #0
   16c10:	beq	16c38 <__assert_fail@plt+0x5924>
   16c14:	mov	r6, r0
   16c18:	mov	r0, #0
   16c1c:	mov	r1, r5
   16c20:	mov	r2, r4
   16c24:	strb	r0, [r6, r4]
   16c28:	mov	r0, r6
   16c2c:	bl	110c8 <memcpy@plt>
   16c30:	mov	r0, r6
   16c34:	pop	{r4, r5, r6, sl, fp, pc}
   16c38:	bl	16c7c <__assert_fail@plt+0x5968>
   16c3c:	push	{r4, r5, r6, sl, fp, lr}
   16c40:	add	fp, sp, #16
   16c44:	mov	r4, r0
   16c48:	bl	111f4 <strlen@plt>
   16c4c:	add	r5, r0, #1
   16c50:	mov	r0, r5
   16c54:	bl	18424 <__assert_fail@plt+0x7110>
   16c58:	cmp	r0, #0
   16c5c:	beq	16c78 <__assert_fail@plt+0x5964>
   16c60:	mov	r1, r4
   16c64:	mov	r2, r5
   16c68:	mov	r6, r0
   16c6c:	bl	110c8 <memcpy@plt>
   16c70:	mov	r0, r6
   16c74:	pop	{r4, r5, r6, sl, fp, pc}
   16c78:	bl	16c7c <__assert_fail@plt+0x5968>
   16c7c:	push	{fp, lr}
   16c80:	mov	fp, sp
   16c84:	movw	r0, #41244	; 0xa11c
   16c88:	movw	r1, #40172	; 0x9cec
   16c8c:	mov	r2, #5
   16c90:	movt	r0, #2
   16c94:	movt	r1, #1
   16c98:	ldr	r4, [r0]
   16c9c:	mov	r0, #0
   16ca0:	bl	11104 <dcgettext@plt>
   16ca4:	movw	r2, #38850	; 0x97c2
   16ca8:	mov	r3, r0
   16cac:	mov	r0, r4
   16cb0:	mov	r1, #0
   16cb4:	movt	r2, #1
   16cb8:	bl	11170 <error@plt>
   16cbc:	bl	112f0 <abort@plt>
   16cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cc4:	add	fp, sp, #28
   16cc8:	sub	sp, sp, #4
   16ccc:	mov	r9, r3
   16cd0:	mov	r6, r2
   16cd4:	mov	r7, r1
   16cd8:	mov	r4, r0
   16cdc:	bl	187a4 <__assert_fail@plt+0x7490>
   16ce0:	mov	r8, r0
   16ce4:	bl	1120c <__errno_location@plt>
   16ce8:	ldr	r5, [r0]
   16cec:	cmp	r5, #0
   16cf0:	beq	16da4 <__assert_fail@plt+0x5a90>
   16cf4:	movw	r1, #40189	; 0x9cfd
   16cf8:	mov	r0, #0
   16cfc:	mov	r2, #5
   16d00:	movt	r1, #1
   16d04:	bl	11104 <dcgettext@plt>
   16d08:	mov	r2, r0
   16d0c:	mov	r0, #0
   16d10:	mov	r1, r5
   16d14:	bl	11170 <error@plt>
   16d18:	movw	r1, #40214	; 0x9d16
   16d1c:	mov	r0, #0
   16d20:	mov	r2, #5
   16d24:	movt	r1, #1
   16d28:	bl	11104 <dcgettext@plt>
   16d2c:	mov	r2, r0
   16d30:	mov	r0, #0
   16d34:	mov	r1, #0
   16d38:	bl	11170 <error@plt>
   16d3c:	movw	r0, #41244	; 0xa11c
   16d40:	movw	r1, #40257	; 0x9d41
   16d44:	mov	r2, #5
   16d48:	movt	r0, #2
   16d4c:	movt	r1, #1
   16d50:	ldr	sl, [r0]
   16d54:	mov	r0, #0
   16d58:	bl	11104 <dcgettext@plt>
   16d5c:	mov	r5, r0
   16d60:	mov	r0, #0
   16d64:	mov	r1, #8
   16d68:	mov	r2, r4
   16d6c:	mov	r3, r7
   16d70:	bl	15a18 <__assert_fail@plt+0x4704>
   16d74:	mov	r4, r0
   16d78:	mov	r0, #1
   16d7c:	mov	r1, #8
   16d80:	mov	r2, r6
   16d84:	mov	r3, r9
   16d88:	bl	15a18 <__assert_fail@plt+0x4704>
   16d8c:	str	r0, [sp]
   16d90:	mov	r0, sl
   16d94:	mov	r1, #0
   16d98:	mov	r2, r5
   16d9c:	mov	r3, r4
   16da0:	bl	11170 <error@plt>
   16da4:	mov	r0, r8
   16da8:	sub	sp, fp, #28
   16dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16db4:	add	fp, sp, #28
   16db8:	sub	sp, sp, #4
   16dbc:	mov	r6, r3
   16dc0:	mov	r9, r2
   16dc4:	mov	r4, r1
   16dc8:	mov	r7, r0
   16dcc:	bl	188c0 <__assert_fail@plt+0x75ac>
   16dd0:	mov	r8, r0
   16dd4:	bl	1120c <__errno_location@plt>
   16dd8:	ldr	r5, [r0]
   16ddc:	cmp	r5, #0
   16de0:	beq	16e94 <__assert_fail@plt+0x5b80>
   16de4:	movw	r1, #40189	; 0x9cfd
   16de8:	mov	r0, #0
   16dec:	mov	r2, #5
   16df0:	movt	r1, #1
   16df4:	bl	11104 <dcgettext@plt>
   16df8:	mov	r2, r0
   16dfc:	mov	r0, #0
   16e00:	mov	r1, r5
   16e04:	bl	11170 <error@plt>
   16e08:	movw	r1, #40214	; 0x9d16
   16e0c:	mov	r0, #0
   16e10:	mov	r2, #5
   16e14:	movt	r1, #1
   16e18:	bl	11104 <dcgettext@plt>
   16e1c:	mov	r2, r0
   16e20:	mov	r0, #0
   16e24:	mov	r1, #0
   16e28:	bl	11170 <error@plt>
   16e2c:	movw	r0, #41244	; 0xa11c
   16e30:	movw	r1, #40257	; 0x9d41
   16e34:	mov	r2, #5
   16e38:	movt	r0, #2
   16e3c:	movt	r1, #1
   16e40:	ldr	sl, [r0]
   16e44:	mov	r0, #0
   16e48:	bl	11104 <dcgettext@plt>
   16e4c:	mov	r5, r0
   16e50:	sub	r3, r4, #1
   16e54:	mov	r0, #0
   16e58:	mov	r1, #8
   16e5c:	mov	r2, r7
   16e60:	bl	15a18 <__assert_fail@plt+0x4704>
   16e64:	mov	r4, r0
   16e68:	sub	r3, r6, #1
   16e6c:	mov	r0, #1
   16e70:	mov	r1, #8
   16e74:	mov	r2, r9
   16e78:	bl	15a18 <__assert_fail@plt+0x4704>
   16e7c:	str	r0, [sp]
   16e80:	mov	r0, sl
   16e84:	mov	r1, #0
   16e88:	mov	r2, r5
   16e8c:	mov	r3, r4
   16e90:	bl	11170 <error@plt>
   16e94:	mov	r0, r8
   16e98:	sub	sp, fp, #28
   16e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ea4:	add	fp, sp, #28
   16ea8:	sub	sp, sp, #20
   16eac:	cmp	r2, #37	; 0x25
   16eb0:	bcs	176fc <__assert_fail@plt+0x63e8>
   16eb4:	ldr	r9, [fp, #8]
   16eb8:	mov	r5, r2
   16ebc:	mov	r4, r1
   16ec0:	mov	r7, r0
   16ec4:	str	r3, [sp, #12]
   16ec8:	bl	1120c <__errno_location@plt>
   16ecc:	mov	r8, r0
   16ed0:	mov	r0, #0
   16ed4:	str	r0, [r8]
   16ed8:	bl	111d0 <__ctype_b_loc@plt>
   16edc:	ldr	r1, [r0]
   16ee0:	mov	r2, r7
   16ee4:	ldrb	r0, [r2], #1
   16ee8:	add	r3, r1, r0, lsl #1
   16eec:	ldrb	r3, [r3, #1]
   16ef0:	tst	r3, #32
   16ef4:	bne	16ee4 <__assert_fail@plt+0x5bd0>
   16ef8:	add	r6, sp, #16
   16efc:	cmp	r4, #0
   16f00:	mov	sl, #4
   16f04:	movne	r6, r4
   16f08:	cmp	r0, #45	; 0x2d
   16f0c:	beq	17098 <__assert_fail@plt+0x5d84>
   16f10:	mov	r0, r7
   16f14:	mov	r1, r6
   16f18:	mov	r2, r5
   16f1c:	bl	111e8 <strtoul@plt>
   16f20:	ldr	r5, [r6]
   16f24:	cmp	r5, r7
   16f28:	beq	17088 <__assert_fail@plt+0x5d74>
   16f2c:	mov	r4, r0
   16f30:	ldr	r0, [r8]
   16f34:	cmp	r0, #0
   16f38:	beq	170a4 <__assert_fail@plt+0x5d90>
   16f3c:	cmp	r0, #34	; 0x22
   16f40:	bne	17098 <__assert_fail@plt+0x5d84>
   16f44:	mov	sl, #1
   16f48:	cmp	r9, #0
   16f4c:	beq	176e8 <__assert_fail@plt+0x63d4>
   16f50:	ldrb	r7, [r5]
   16f54:	cmp	r7, #0
   16f58:	beq	176e8 <__assert_fail@plt+0x63d4>
   16f5c:	mov	r0, r9
   16f60:	mov	r1, r7
   16f64:	bl	11200 <strchr@plt>
   16f68:	cmp	r0, #0
   16f6c:	beq	17268 <__assert_fail@plt+0x5f54>
   16f70:	sub	r0, r7, #69	; 0x45
   16f74:	mov	lr, #1
   16f78:	mov	r8, #1024	; 0x400
   16f7c:	cmp	r0, #47	; 0x2f
   16f80:	bhi	1711c <__assert_fail@plt+0x5e08>
   16f84:	add	r1, pc, #0
   16f88:	ldr	pc, [r1, r0, lsl #2]
   16f8c:	andeq	r7, r1, ip, asr #32
   16f90:	andeq	r7, r1, ip, lsl r1
   16f94:	andeq	r7, r1, ip, asr #32
   16f98:	andeq	r7, r1, ip, lsl r1
   16f9c:	andeq	r7, r1, ip, lsl r1
   16fa0:	andeq	r7, r1, ip, lsl r1
   16fa4:	andeq	r7, r1, ip, asr #32
   16fa8:	andeq	r7, r1, ip, lsl r1
   16fac:	andeq	r7, r1, ip, asr #32
   16fb0:	andeq	r7, r1, ip, lsl r1
   16fb4:	andeq	r7, r1, ip, lsl r1
   16fb8:	andeq	r7, r1, ip, asr #32
   16fbc:	andeq	r7, r1, ip, lsl r1
   16fc0:	andeq	r7, r1, ip, lsl r1
   16fc4:	andeq	r7, r1, ip, lsl r1
   16fc8:	andeq	r7, r1, ip, asr #32
   16fcc:	andeq	r7, r1, ip, lsl r1
   16fd0:	andeq	r7, r1, ip, lsl r1
   16fd4:	andeq	r7, r1, ip, lsl r1
   16fd8:	andeq	r7, r1, ip, lsl r1
   16fdc:	andeq	r7, r1, ip, asr #32
   16fe0:	andeq	r7, r1, ip, asr #32
   16fe4:	andeq	r7, r1, ip, lsl r1
   16fe8:	andeq	r7, r1, ip, lsl r1
   16fec:	andeq	r7, r1, ip, lsl r1
   16ff0:	andeq	r7, r1, ip, lsl r1
   16ff4:	andeq	r7, r1, ip, lsl r1
   16ff8:	andeq	r7, r1, ip, lsl r1
   16ffc:	andeq	r7, r1, ip, lsl r1
   17000:	andeq	r7, r1, ip, lsl r1
   17004:	andeq	r7, r1, ip, lsl r1
   17008:	andeq	r7, r1, ip, lsl r1
   1700c:	andeq	r7, r1, ip, lsl r1
   17010:	andeq	r7, r1, ip, lsl r1
   17014:	andeq	r7, r1, ip, asr #32
   17018:	andeq	r7, r1, ip, lsl r1
   1701c:	andeq	r7, r1, ip, lsl r1
   17020:	andeq	r7, r1, ip, lsl r1
   17024:	andeq	r7, r1, ip, asr #32
   17028:	andeq	r7, r1, ip, lsl r1
   1702c:	andeq	r7, r1, ip, asr #32
   17030:	andeq	r7, r1, ip, lsl r1
   17034:	andeq	r7, r1, ip, lsl r1
   17038:	andeq	r7, r1, ip, lsl r1
   1703c:	andeq	r7, r1, ip, lsl r1
   17040:	andeq	r7, r1, ip, lsl r1
   17044:	andeq	r7, r1, ip, lsl r1
   17048:	andeq	r7, r1, ip, asr #32
   1704c:	mov	r0, r9
   17050:	mov	r1, #48	; 0x30
   17054:	bl	11200 <strchr@plt>
   17058:	cmp	r0, #0
   1705c:	beq	170dc <__assert_fail@plt+0x5dc8>
   17060:	ldrb	r0, [r5, #1]
   17064:	cmp	r0, #66	; 0x42
   17068:	cmpne	r0, #68	; 0x44
   1706c:	bne	170f0 <__assert_fail@plt+0x5ddc>
   17070:	mov	lr, #2
   17074:	mov	r8, #1000	; 0x3e8
   17078:	sub	r1, r7, #66	; 0x42
   1707c:	cmp	r1, #53	; 0x35
   17080:	bls	17128 <__assert_fail@plt+0x5e14>
   17084:	b	17268 <__assert_fail@plt+0x5f54>
   17088:	cmp	r9, #0
   1708c:	ldrbne	r1, [r7]
   17090:	cmpne	r1, #0
   17094:	bne	170b4 <__assert_fail@plt+0x5da0>
   17098:	mov	r0, sl
   1709c:	sub	sp, fp, #28
   170a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170a4:	mov	sl, r0
   170a8:	cmp	r9, #0
   170ac:	bne	16f50 <__assert_fail@plt+0x5c3c>
   170b0:	b	176e8 <__assert_fail@plt+0x63d4>
   170b4:	mov	r0, r9
   170b8:	bl	11200 <strchr@plt>
   170bc:	cmp	r0, #0
   170c0:	beq	17098 <__assert_fail@plt+0x5d84>
   170c4:	mov	r4, #1
   170c8:	mov	sl, #0
   170cc:	ldrb	r7, [r5]
   170d0:	cmp	r7, #0
   170d4:	bne	16f5c <__assert_fail@plt+0x5c48>
   170d8:	b	176e8 <__assert_fail@plt+0x63d4>
   170dc:	mov	lr, #1
   170e0:	sub	r1, r7, #66	; 0x42
   170e4:	cmp	r1, #53	; 0x35
   170e8:	bls	17128 <__assert_fail@plt+0x5e14>
   170ec:	b	17268 <__assert_fail@plt+0x5f54>
   170f0:	cmp	r0, #105	; 0x69
   170f4:	bne	17118 <__assert_fail@plt+0x5e04>
   170f8:	ldrb	r0, [r5, #2]
   170fc:	mov	lr, #1
   17100:	cmp	r0, #66	; 0x42
   17104:	movweq	lr, #3
   17108:	sub	r1, r7, #66	; 0x42
   1710c:	cmp	r1, #53	; 0x35
   17110:	bls	17128 <__assert_fail@plt+0x5e14>
   17114:	b	17268 <__assert_fail@plt+0x5f54>
   17118:	mov	lr, #1
   1711c:	sub	r1, r7, #66	; 0x42
   17120:	cmp	r1, #53	; 0x35
   17124:	bhi	17268 <__assert_fail@plt+0x5f54>
   17128:	add	r2, pc, #4
   1712c:	mov	r0, #0
   17130:	ldr	pc, [r2, r1, lsl #2]
   17134:	andeq	r7, r1, r0, lsr r4
   17138:	andeq	r7, r1, r8, ror #4
   1713c:	andeq	r7, r1, r8, ror #4
   17140:	andeq	r7, r1, ip, asr #8
   17144:	andeq	r7, r1, r8, ror #4
   17148:	andeq	r7, r1, ip, lsl #4
   1714c:	andeq	r7, r1, r8, ror #4
   17150:	andeq	r7, r1, r8, ror #4
   17154:	andeq	r7, r1, r8, ror #4
   17158:	andeq	r7, r1, r0, lsl #5
   1715c:	andeq	r7, r1, r8, ror #4
   17160:	andeq	r7, r1, r0, lsr #5
   17164:	andeq	r7, r1, r8, ror #4
   17168:	andeq	r7, r1, r8, ror #4
   1716c:	andeq	r7, r1, r4, lsl #10
   17170:	andeq	r7, r1, r8, ror #4
   17174:	andeq	r7, r1, r8, ror #4
   17178:	andeq	r7, r1, r8, ror #4
   1717c:	andeq	r7, r1, r0, ror #5
   17180:	andeq	r7, r1, r8, ror #4
   17184:	andeq	r7, r1, r8, ror #4
   17188:	andeq	r7, r1, r8, ror #4
   1718c:	andeq	r7, r1, r8, ror #4
   17190:	andeq	r7, r1, r0, lsr #11
   17194:	andeq	r7, r1, r8, asr r3
   17198:	andeq	r7, r1, r8, ror #4
   1719c:	andeq	r7, r1, r8, ror #4
   171a0:	andeq	r7, r1, r8, ror #4
   171a4:	andeq	r7, r1, r8, ror #4
   171a8:	andeq	r7, r1, r8, ror #4
   171ac:	andeq	r7, r1, r8, ror #4
   171b0:	andeq	r7, r1, r8, ror #4
   171b4:	muleq	r1, r8, r6
   171b8:	ldrdeq	r7, [r1], -r0
   171bc:	andeq	r7, r1, r8, ror #4
   171c0:	andeq	r7, r1, r8, ror #4
   171c4:	andeq	r7, r1, r8, ror #4
   171c8:	andeq	r7, r1, ip, lsl #4
   171cc:	andeq	r7, r1, r8, ror #4
   171d0:	andeq	r7, r1, r8, ror #4
   171d4:	andeq	r7, r1, r8, ror #4
   171d8:	andeq	r7, r1, r0, lsl #5
   171dc:	andeq	r7, r1, r8, ror #4
   171e0:	andeq	r7, r1, r0, lsr #5
   171e4:	andeq	r7, r1, r8, ror #4
   171e8:	andeq	r7, r1, r8, ror #4
   171ec:	andeq	r7, r1, r8, ror #4
   171f0:	andeq	r7, r1, r8, ror #4
   171f4:	andeq	r7, r1, r8, ror #4
   171f8:	andeq	r7, r1, r8, ror #4
   171fc:	andeq	r7, r1, r0, ror #5
   17200:	andeq	r7, r1, r8, ror #4
   17204:	andeq	r7, r1, r8, ror #4
   17208:			; <UNDEFINED> instruction: 0x000176bc
   1720c:	mvn	r0, #0
   17210:	mul	r1, r4, r8
   17214:	mov	r7, #0
   17218:	udiv	r0, r0, r8
   1721c:	cmp	r0, r4
   17220:	mvncc	r1, #0
   17224:	mul	r2, r1, r8
   17228:	cmp	r0, r1
   1722c:	mvncc	r2, #0
   17230:	cmp	r0, r2
   17234:	mul	r3, r2, r8
   17238:	mov	r2, #0
   1723c:	mvncc	r3, #0
   17240:	movwcc	r7, #1
   17244:	cmp	r0, r1
   17248:	mov	r1, #0
   1724c:	movwcc	r1, #1
   17250:	cmp	r0, r4
   17254:	mov	r4, r3
   17258:	movwcc	r2, #1
   1725c:	orr	r0, r2, r1
   17260:	orr	r0, r0, r7
   17264:	b	176d0 <__assert_fail@plt+0x63bc>
   17268:	ldr	r0, [sp, #12]
   1726c:	orr	sl, sl, #2
   17270:	str	r4, [r0]
   17274:	mov	r0, sl
   17278:	sub	sp, fp, #28
   1727c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17280:	mvn	r0, #0
   17284:	mul	r1, r4, r8
   17288:	udiv	r0, r0, r8
   1728c:	cmp	r0, r4
   17290:	mov	r0, #0
   17294:	mvncc	r1, #0
   17298:	movwcc	r0, #1
   1729c:	b	176cc <__assert_fail@plt+0x63b8>
   172a0:	mvn	r0, #0
   172a4:	mul	r1, r4, r8
   172a8:	mov	r3, #0
   172ac:	udiv	r0, r0, r8
   172b0:	cmp	r0, r4
   172b4:	mvncc	r1, #0
   172b8:	cmp	r0, r1
   172bc:	mul	r2, r1, r8
   172c0:	mov	r1, #0
   172c4:	mvncc	r2, #0
   172c8:	movwcc	r3, #1
   172cc:	cmp	r0, r4
   172d0:	movwcc	r1, #1
   172d4:	mov	r4, r2
   172d8:	orr	r0, r1, r3
   172dc:	b	176d0 <__assert_fail@plt+0x63bc>
   172e0:	mvn	r0, #0
   172e4:	mul	r1, r4, r8
   172e8:	mov	r7, #0
   172ec:	udiv	r0, r0, r8
   172f0:	cmp	r0, r4
   172f4:	mvncc	r1, #0
   172f8:	mul	r2, r1, r8
   172fc:	cmp	r0, r1
   17300:	mvncc	r2, #0
   17304:	mul	r3, r2, r8
   17308:	cmp	r0, r2
   1730c:	mvncc	r3, #0
   17310:	cmp	r0, r3
   17314:	mul	ip, r3, r8
   17318:	mov	r3, #0
   1731c:	mvncc	ip, #0
   17320:	movwcc	r7, #1
   17324:	cmp	r0, r2
   17328:	mov	r2, #0
   1732c:	movwcc	r2, #1
   17330:	cmp	r0, r1
   17334:	mov	r1, #0
   17338:	movwcc	r1, #1
   1733c:	cmp	r0, r4
   17340:	mov	r4, ip
   17344:	movwcc	r3, #1
   17348:	orr	r0, r3, r1
   1734c:	orr	r0, r0, r2
   17350:	orr	r0, r0, r7
   17354:	b	176d0 <__assert_fail@plt+0x63bc>
   17358:	mvn	r0, #0
   1735c:	str	lr, [sp, #8]
   17360:	mul	lr, r4, r8
   17364:	udiv	r0, r0, r8
   17368:	cmp	r0, r4
   1736c:	mvncc	lr, #0
   17370:	mul	r9, lr, r8
   17374:	cmp	r0, lr
   17378:	mvncc	r9, #0
   1737c:	mul	r7, r9, r8
   17380:	cmp	r0, r9
   17384:	mvncc	r7, #0
   17388:	mul	r3, r7, r8
   1738c:	cmp	r0, r7
   17390:	mvncc	r3, #0
   17394:	mul	r1, r3, r8
   17398:	cmp	r0, r3
   1739c:	mvncc	r1, #0
   173a0:	mul	r2, r1, r8
   173a4:	cmp	r0, r1
   173a8:	mvncc	r2, #0
   173ac:	mul	ip, r2, r8
   173b0:	cmp	r0, r2
   173b4:	mov	r8, #0
   173b8:	mov	r2, #0
   173bc:	mvncc	ip, #0
   173c0:	movwcc	r8, #1
   173c4:	cmp	r0, r1
   173c8:	mov	r1, #0
   173cc:	movwcc	r1, #1
   173d0:	cmp	r0, r3
   173d4:	mov	r3, #0
   173d8:	movwcc	r3, #1
   173dc:	cmp	r0, r7
   173e0:	mov	r7, #0
   173e4:	movwcc	r7, #1
   173e8:	cmp	r0, r9
   173ec:	mov	r9, #0
   173f0:	movwcc	r9, #1
   173f4:	cmp	r0, lr
   173f8:	mov	lr, #0
   173fc:	movwcc	lr, #1
   17400:	cmp	r0, r4
   17404:	mov	r4, ip
   17408:	movwcc	r2, #1
   1740c:	orr	r0, r2, lr
   17410:	ldr	lr, [sp, #8]
   17414:	orr	r0, r0, r9
   17418:	orr	r0, r0, r7
   1741c:	orr	r0, r0, r3
   17420:	orr	r0, r0, r1
   17424:	orr	r0, r0, r8
   17428:	and	r0, r0, #1
   1742c:	b	176d0 <__assert_fail@plt+0x63bc>
   17430:	mov	r1, #0
   17434:	lsr	r0, r4, #22
   17438:	cmp	r1, r4, lsr #22
   1743c:	lsl	r4, r4, #10
   17440:	movwne	r0, #1
   17444:	mvnne	r4, #0
   17448:	b	176d0 <__assert_fail@plt+0x63bc>
   1744c:	mvn	r0, #0
   17450:	mul	ip, r4, r8
   17454:	str	lr, [sp, #8]
   17458:	mov	r9, #0
   1745c:	udiv	r0, r0, r8
   17460:	cmp	r0, r4
   17464:	mvncc	ip, #0
   17468:	mul	r2, ip, r8
   1746c:	cmp	r0, ip
   17470:	mvncc	r2, #0
   17474:	mul	r3, r2, r8
   17478:	cmp	r0, r2
   1747c:	mvncc	r3, #0
   17480:	mul	r7, r3, r8
   17484:	cmp	r0, r3
   17488:	mvncc	r7, #0
   1748c:	mul	r1, r7, r8
   17490:	cmp	r0, r7
   17494:	mvncc	r1, #0
   17498:	mul	lr, r1, r8
   1749c:	cmp	r0, r1
   174a0:	mov	r8, #0
   174a4:	mov	r1, #0
   174a8:	mvncc	lr, #0
   174ac:	movwcc	r8, #1
   174b0:	cmp	r0, r7
   174b4:	mov	r7, #0
   174b8:	movwcc	r7, #1
   174bc:	cmp	r0, r3
   174c0:	mov	r3, #0
   174c4:	movwcc	r3, #1
   174c8:	cmp	r0, r2
   174cc:	mov	r2, #0
   174d0:	movwcc	r2, #1
   174d4:	cmp	r0, ip
   174d8:	movwcc	r1, #1
   174dc:	cmp	r0, r4
   174e0:	mov	r4, lr
   174e4:	ldr	lr, [sp, #8]
   174e8:	movwcc	r9, #1
   174ec:	orr	r0, r9, r1
   174f0:	orr	r0, r0, r2
   174f4:	orr	r0, r0, r3
   174f8:	orr	r0, r0, r7
   174fc:	orr	r0, r0, r8
   17500:	b	176d0 <__assert_fail@plt+0x63bc>
   17504:	mvn	r0, #0
   17508:	mul	r1, r4, r8
   1750c:	udiv	r0, r0, r8
   17510:	cmp	r0, r4
   17514:	mvncc	r1, #0
   17518:	mul	r2, r1, r8
   1751c:	cmp	r0, r1
   17520:	mvncc	r2, #0
   17524:	mul	r3, r2, r8
   17528:	cmp	r0, r2
   1752c:	mvncc	r3, #0
   17530:	mul	r7, r3, r8
   17534:	cmp	r0, r3
   17538:	mvncc	r7, #0
   1753c:	mul	ip, r7, r8
   17540:	cmp	r0, r7
   17544:	mov	r8, lr
   17548:	mov	lr, #0
   1754c:	mov	r7, #0
   17550:	mvncc	ip, #0
   17554:	movwcc	lr, #1
   17558:	cmp	r0, r3
   1755c:	mov	r3, #0
   17560:	movwcc	r3, #1
   17564:	cmp	r0, r2
   17568:	mov	r2, #0
   1756c:	movwcc	r2, #1
   17570:	cmp	r0, r1
   17574:	mov	r1, #0
   17578:	movwcc	r1, #1
   1757c:	cmp	r0, r4
   17580:	mov	r4, ip
   17584:	movwcc	r7, #1
   17588:	orr	r0, r7, r1
   1758c:	orr	r0, r0, r2
   17590:	orr	r0, r0, r3
   17594:	orr	r0, r0, lr
   17598:	mov	lr, r8
   1759c:	b	176d0 <__assert_fail@plt+0x63bc>
   175a0:	mvn	r0, #0
   175a4:	str	lr, [sp, #8]
   175a8:	mul	lr, r4, r8
   175ac:	udiv	r0, r0, r8
   175b0:	cmp	r0, r4
   175b4:	mvncc	lr, #0
   175b8:	mul	r9, lr, r8
   175bc:	cmp	r0, lr
   175c0:	mvncc	r9, #0
   175c4:	mul	r7, r9, r8
   175c8:	cmp	r0, r9
   175cc:	mvncc	r7, #0
   175d0:	mul	r3, r7, r8
   175d4:	cmp	r0, r7
   175d8:	mvncc	r3, #0
   175dc:	mul	r1, r3, r8
   175e0:	cmp	r0, r3
   175e4:	mvncc	r1, #0
   175e8:	mul	r2, r1, r8
   175ec:	cmp	r0, r1
   175f0:	mvncc	r2, #0
   175f4:	mul	ip, r2, r8
   175f8:	cmp	r0, r2
   175fc:	mvncc	ip, #0
   17600:	mul	r8, ip, r8
   17604:	cmp	r0, ip
   17608:	mov	ip, #0
   1760c:	mvncc	r8, #0
   17610:	str	r8, [sp, #4]
   17614:	mov	r8, #0
   17618:	movwcc	r8, #1
   1761c:	cmp	r0, r2
   17620:	mov	r2, #0
   17624:	movwcc	r2, #1
   17628:	cmp	r0, r1
   1762c:	mov	r1, #0
   17630:	movwcc	r1, #1
   17634:	cmp	r0, r3
   17638:	mov	r3, #0
   1763c:	movwcc	r3, #1
   17640:	cmp	r0, r7
   17644:	mov	r7, #0
   17648:	movwcc	r7, #1
   1764c:	cmp	r0, r9
   17650:	mov	r9, #0
   17654:	movwcc	r9, #1
   17658:	cmp	r0, lr
   1765c:	mov	lr, #0
   17660:	movwcc	lr, #1
   17664:	cmp	r0, r4
   17668:	ldr	r4, [sp, #4]
   1766c:	movwcc	ip, #1
   17670:	orr	r0, ip, lr
   17674:	ldr	lr, [sp, #8]
   17678:	orr	r0, r0, r9
   1767c:	orr	r0, r0, r7
   17680:	orr	r0, r0, r3
   17684:	orr	r0, r0, r1
   17688:	orr	r0, r0, r2
   1768c:	orr	r0, r0, r8
   17690:	and	r0, r0, #1
   17694:	b	176d0 <__assert_fail@plt+0x63bc>
   17698:	movw	r0, #65535	; 0xffff
   1769c:	movt	r0, #63	; 0x3f
   176a0:	add	r1, r0, #4194304	; 0x400000
   176a4:	mov	r0, #0
   176a8:	cmp	r4, r1
   176ac:	lsl	r4, r4, #9
   176b0:	movwhi	r0, #1
   176b4:	mvnhi	r4, #0
   176b8:	b	176d0 <__assert_fail@plt+0x63bc>
   176bc:	lsl	r1, r4, #1
   176c0:	cmp	r4, #0
   176c4:	lsr	r0, r4, #31
   176c8:	mvnlt	r1, #0
   176cc:	mov	r4, r1
   176d0:	add	r1, r5, lr
   176d4:	orr	sl, r0, sl
   176d8:	str	r1, [r6]
   176dc:	ldrb	r1, [r5, lr]
   176e0:	cmp	r1, #0
   176e4:	orrne	sl, sl, #2
   176e8:	ldr	r0, [sp, #12]
   176ec:	str	r4, [r0]
   176f0:	mov	r0, sl
   176f4:	sub	sp, fp, #28
   176f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176fc:	movw	r0, #40294	; 0x9d66
   17700:	movw	r1, #40332	; 0x9d8c
   17704:	movw	r3, #40348	; 0x9d9c
   17708:	mov	r2, #85	; 0x55
   1770c:	movt	r0, #1
   17710:	movt	r1, #1
   17714:	movt	r3, #1
   17718:	bl	11314 <__assert_fail@plt>
   1771c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17720:	add	fp, sp, #28
   17724:	sub	sp, sp, #44	; 0x2c
   17728:	cmp	r2, #37	; 0x25
   1772c:	bcs	183b0 <__assert_fail@plt+0x709c>
   17730:	ldr	sl, [fp, #8]
   17734:	mov	r6, r2
   17738:	mov	r7, r1
   1773c:	mov	r4, r0
   17740:	str	r3, [sp, #36]	; 0x24
   17744:	bl	1120c <__errno_location@plt>
   17748:	mov	r5, r0
   1774c:	mov	r0, #0
   17750:	str	r0, [r5]
   17754:	bl	111d0 <__ctype_b_loc@plt>
   17758:	ldr	r1, [r0]
   1775c:	mov	r2, r4
   17760:	ldrb	r0, [r2], #1
   17764:	add	r3, r1, r0, lsl #1
   17768:	ldrb	r3, [r3, #1]
   1776c:	tst	r3, #32
   17770:	bne	17760 <__assert_fail@plt+0x644c>
   17774:	sub	r9, fp, #32
   17778:	cmp	r7, #0
   1777c:	mov	r8, #4
   17780:	movne	r9, r7
   17784:	cmp	r0, #45	; 0x2d
   17788:	beq	17b48 <__assert_fail@plt+0x6834>
   1778c:	mov	r0, r4
   17790:	mov	r1, r9
   17794:	mov	r2, r6
   17798:	mov	r3, #0
   1779c:	bl	110d4 <__strtoull_internal@plt>
   177a0:	mov	r7, r1
   177a4:	ldr	r1, [r9]
   177a8:	cmp	r1, r4
   177ac:	beq	177e4 <__assert_fail@plt+0x64d0>
   177b0:	mov	r6, r0
   177b4:	ldr	r0, [r5]
   177b8:	cmp	r0, #0
   177bc:	beq	17b00 <__assert_fail@plt+0x67ec>
   177c0:	cmp	r0, #34	; 0x22
   177c4:	bne	17b48 <__assert_fail@plt+0x6834>
   177c8:	mov	r8, #1
   177cc:	cmp	sl, #0
   177d0:	beq	1839c <__assert_fail@plt+0x7088>
   177d4:	ldrb	r4, [r1]
   177d8:	cmp	r4, #0
   177dc:	bne	17828 <__assert_fail@plt+0x6514>
   177e0:	b	1839c <__assert_fail@plt+0x7088>
   177e4:	cmp	sl, #0
   177e8:	beq	17b48 <__assert_fail@plt+0x6834>
   177ec:	mov	r5, r1
   177f0:	ldrb	r1, [r4]
   177f4:	cmp	r1, #0
   177f8:	beq	17b48 <__assert_fail@plt+0x6834>
   177fc:	mov	r0, sl
   17800:	bl	11200 <strchr@plt>
   17804:	cmp	r0, #0
   17808:	beq	17b48 <__assert_fail@plt+0x6834>
   1780c:	mov	r1, r5
   17810:	mov	r8, #0
   17814:	mov	r6, #1
   17818:	mov	r7, #0
   1781c:	ldrb	r4, [r1]
   17820:	cmp	r4, #0
   17824:	beq	1839c <__assert_fail@plt+0x7088>
   17828:	str	r1, [sp, #32]
   1782c:	mov	r0, sl
   17830:	mov	r1, r4
   17834:	bl	11200 <strchr@plt>
   17838:	cmp	r0, #0
   1783c:	beq	17b3c <__assert_fail@plt+0x6828>
   17840:	sub	r0, r4, #69	; 0x45
   17844:	mov	r1, #1
   17848:	mov	r3, #0
   1784c:	mov	r5, #1024	; 0x400
   17850:	cmp	r0, #47	; 0x2f
   17854:	str	r1, [sp, #28]
   17858:	bhi	1795c <__assert_fail@plt+0x6648>
   1785c:	add	r1, pc, #0
   17860:	ldr	pc, [r1, r0, lsl #2]
   17864:	andeq	r7, r1, r4, lsr #18
   17868:	andeq	r7, r1, ip, asr r9
   1786c:	andeq	r7, r1, r4, lsr #18
   17870:	andeq	r7, r1, ip, asr r9
   17874:	andeq	r7, r1, ip, asr r9
   17878:	andeq	r7, r1, ip, asr r9
   1787c:	andeq	r7, r1, r4, lsr #18
   17880:	andeq	r7, r1, ip, asr r9
   17884:	andeq	r7, r1, r4, lsr #18
   17888:	andeq	r7, r1, ip, asr r9
   1788c:	andeq	r7, r1, ip, asr r9
   17890:	andeq	r7, r1, r4, lsr #18
   17894:	andeq	r7, r1, ip, asr r9
   17898:	andeq	r7, r1, ip, asr r9
   1789c:	andeq	r7, r1, ip, asr r9
   178a0:	andeq	r7, r1, r4, lsr #18
   178a4:	andeq	r7, r1, ip, asr r9
   178a8:	andeq	r7, r1, ip, asr r9
   178ac:	andeq	r7, r1, ip, asr r9
   178b0:	andeq	r7, r1, ip, asr r9
   178b4:	andeq	r7, r1, r4, lsr #18
   178b8:	andeq	r7, r1, r4, lsr #18
   178bc:	andeq	r7, r1, ip, asr r9
   178c0:	andeq	r7, r1, ip, asr r9
   178c4:	andeq	r7, r1, ip, asr r9
   178c8:	andeq	r7, r1, ip, asr r9
   178cc:	andeq	r7, r1, ip, asr r9
   178d0:	andeq	r7, r1, ip, asr r9
   178d4:	andeq	r7, r1, ip, asr r9
   178d8:	andeq	r7, r1, ip, asr r9
   178dc:	andeq	r7, r1, ip, asr r9
   178e0:	andeq	r7, r1, ip, asr r9
   178e4:	andeq	r7, r1, ip, asr r9
   178e8:	andeq	r7, r1, ip, asr r9
   178ec:	andeq	r7, r1, r4, lsr #18
   178f0:	andeq	r7, r1, ip, asr r9
   178f4:	andeq	r7, r1, ip, asr r9
   178f8:	andeq	r7, r1, ip, asr r9
   178fc:	andeq	r7, r1, r4, lsr #18
   17900:	andeq	r7, r1, ip, asr r9
   17904:	andeq	r7, r1, r4, lsr #18
   17908:	andeq	r7, r1, ip, asr r9
   1790c:	andeq	r7, r1, ip, asr r9
   17910:	andeq	r7, r1, ip, asr r9
   17914:	andeq	r7, r1, ip, asr r9
   17918:	andeq	r7, r1, ip, asr r9
   1791c:	andeq	r7, r1, ip, asr r9
   17920:	andeq	r7, r1, r4, lsr #18
   17924:	mov	r0, sl
   17928:	mov	r1, #48	; 0x30
   1792c:	bl	11200 <strchr@plt>
   17930:	cmp	r0, #0
   17934:	beq	17958 <__assert_fail@plt+0x6644>
   17938:	ldr	r1, [sp, #32]
   1793c:	ldrb	r0, [r1, #1]
   17940:	cmp	r0, #66	; 0x42
   17944:	cmpne	r0, #68	; 0x44
   17948:	bne	17b10 <__assert_fail@plt+0x67fc>
   1794c:	mov	r5, #1000	; 0x3e8
   17950:	mov	r0, #2
   17954:	str	r0, [sp, #28]
   17958:	mov	r3, #0
   1795c:	sub	r0, r4, #66	; 0x42
   17960:	cmp	r0, #53	; 0x35
   17964:	bhi	17b3c <__assert_fail@plt+0x6828>
   17968:	add	r1, pc, #0
   1796c:	ldr	pc, [r1, r0, lsl #2]
   17970:	andeq	r7, r1, ip, lsr #29
   17974:	andeq	r7, r1, ip, lsr fp
   17978:	andeq	r7, r1, ip, lsr fp
   1797c:	ldrdeq	r7, [r1], -r4
   17980:	andeq	r7, r1, ip, lsr fp
   17984:	andeq	r7, r1, r8, asr #20
   17988:	andeq	r7, r1, ip, lsr fp
   1798c:	andeq	r7, r1, ip, lsr fp
   17990:	andeq	r7, r1, ip, lsr fp
   17994:	andeq	r7, r1, r4, asr fp
   17998:	andeq	r7, r1, ip, lsr fp
   1799c:	muleq	r1, ip, fp
   179a0:	andeq	r7, r1, ip, lsr fp
   179a4:	andeq	r7, r1, ip, lsr fp
   179a8:	andeq	r8, r1, r8, lsr #32
   179ac:	andeq	r7, r1, ip, lsr fp
   179b0:	andeq	r7, r1, ip, lsr fp
   179b4:	andeq	r7, r1, ip, lsr fp
   179b8:	andeq	r7, r1, r8, lsr #24
   179bc:	andeq	r7, r1, ip, lsr fp
   179c0:	andeq	r7, r1, ip, lsr fp
   179c4:	andeq	r7, r1, ip, lsr fp
   179c8:	andeq	r7, r1, ip, lsr fp
   179cc:	andeq	r8, r1, r0, asr r1
   179d0:	andeq	r7, r1, r0, lsl sp
   179d4:	andeq	r7, r1, ip, lsr fp
   179d8:	andeq	r7, r1, ip, lsr fp
   179dc:	andeq	r7, r1, ip, lsr fp
   179e0:	andeq	r7, r1, ip, lsr fp
   179e4:	andeq	r7, r1, ip, lsr fp
   179e8:	andeq	r7, r1, ip, lsr fp
   179ec:	andeq	r7, r1, ip, lsr fp
   179f0:	andeq	r8, r1, r4, lsr #6
   179f4:	andeq	r8, r1, ip, ror r3
   179f8:	andeq	r7, r1, ip, lsr fp
   179fc:	andeq	r7, r1, ip, lsr fp
   17a00:	andeq	r7, r1, ip, lsr fp
   17a04:	andeq	r7, r1, r8, asr #20
   17a08:	andeq	r7, r1, ip, lsr fp
   17a0c:	andeq	r7, r1, ip, lsr fp
   17a10:	andeq	r7, r1, ip, lsr fp
   17a14:	andeq	r7, r1, r4, asr fp
   17a18:	andeq	r7, r1, ip, lsr fp
   17a1c:	muleq	r1, ip, fp
   17a20:	andeq	r7, r1, ip, lsr fp
   17a24:	andeq	r7, r1, ip, lsr fp
   17a28:	andeq	r7, r1, ip, lsr fp
   17a2c:	andeq	r7, r1, ip, lsr fp
   17a30:	andeq	r7, r1, ip, lsr fp
   17a34:	andeq	r7, r1, ip, lsr fp
   17a38:	andeq	r7, r1, r8, lsr #24
   17a3c:	andeq	r7, r1, ip, lsr fp
   17a40:	andeq	r7, r1, ip, lsr fp
   17a44:	andeq	r8, r1, r8, asr r3
   17a48:	mvn	r0, #0
   17a4c:	mvn	r1, #0
   17a50:	mov	r2, r5
   17a54:	mov	sl, r3
   17a58:	bl	189cc <__assert_fail@plt+0x76b8>
   17a5c:	subs	r3, r0, r6
   17a60:	mov	lr, #0
   17a64:	umull	r4, r2, r6, r5
   17a68:	str	r1, [sp, #20]
   17a6c:	sbcs	r3, r1, r7
   17a70:	mla	ip, r6, sl, r2
   17a74:	mov	r2, r1
   17a78:	movwcc	lr, #1
   17a7c:	mla	r7, r7, r5, ip
   17a80:	mov	r2, #0
   17a84:	cmp	lr, #0
   17a88:	mvnne	r4, #0
   17a8c:	mvnne	r7, #0
   17a90:	subs	r6, r0, r4
   17a94:	sbcs	r6, r1, r7
   17a98:	movwcc	r2, #1
   17a9c:	umull	r3, r6, r4, r5
   17aa0:	cmp	r2, #0
   17aa4:	str	r6, [sp, #16]
   17aa8:	mvnne	r3, #0
   17aac:	cmp	r2, #0
   17ab0:	umull	r6, ip, r3, r5
   17ab4:	mla	r1, r3, sl, ip
   17ab8:	ldr	ip, [sp, #16]
   17abc:	str	r1, [sp, #12]
   17ac0:	mla	r4, r4, sl, ip
   17ac4:	mla	r4, r7, r5, r4
   17ac8:	ldr	r7, [sp, #12]
   17acc:	mvnne	r4, #0
   17ad0:	subs	r0, r0, r3
   17ad4:	ldr	r0, [sp, #20]
   17ad8:	mla	r7, r4, r5, r7
   17adc:	sbcs	r0, r0, r4
   17ae0:	mov	r0, #0
   17ae4:	movwcc	r0, #1
   17ae8:	cmp	r0, #0
   17aec:	mov	r1, r0
   17af0:	orr	r0, lr, r2
   17af4:	mvnne	r7, #0
   17af8:	mvnne	r6, #0
   17afc:	b	18148 <__assert_fail@plt+0x6e34>
   17b00:	mov	r8, r0
   17b04:	cmp	sl, #0
   17b08:	bne	177d4 <__assert_fail@plt+0x64c0>
   17b0c:	b	1839c <__assert_fail@plt+0x7088>
   17b10:	cmp	r0, #105	; 0x69
   17b14:	mov	r3, #0
   17b18:	bne	1795c <__assert_fail@plt+0x6648>
   17b1c:	ldrb	r0, [r1, #2]
   17b20:	mov	r1, #1
   17b24:	cmp	r0, #66	; 0x42
   17b28:	movweq	r1, #3
   17b2c:	str	r1, [sp, #28]
   17b30:	sub	r0, r4, #66	; 0x42
   17b34:	cmp	r0, #53	; 0x35
   17b38:	bls	17968 <__assert_fail@plt+0x6654>
   17b3c:	ldr	r0, [sp, #36]	; 0x24
   17b40:	orr	r8, r8, #2
   17b44:	strd	r6, [r0]
   17b48:	mov	r0, r8
   17b4c:	sub	sp, fp, #28
   17b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b54:	mvn	r0, #0
   17b58:	mvn	r1, #0
   17b5c:	mov	r2, r5
   17b60:	mov	r4, r3
   17b64:	bl	189cc <__assert_fail@plt+0x76b8>
   17b68:	subs	r0, r0, r6
   17b6c:	mov	r2, #0
   17b70:	sbcs	r0, r1, r7
   17b74:	movwcc	r2, #1
   17b78:	umull	r0, r1, r6, r5
   17b7c:	mla	r1, r6, r4, r1
   17b80:	cmp	r2, #0
   17b84:	mov	r3, r2
   17b88:	mla	r7, r7, r5, r1
   17b8c:	mvnne	r0, #0
   17b90:	mvnne	r7, #0
   17b94:	mov	r6, r0
   17b98:	b	1837c <__assert_fail@plt+0x7068>
   17b9c:	mvn	r0, #0
   17ba0:	mvn	r1, #0
   17ba4:	mov	r2, r5
   17ba8:	str	r3, [sp, #24]
   17bac:	bl	189cc <__assert_fail@plt+0x76b8>
   17bb0:	subs	r3, r0, r6
   17bb4:	mov	ip, r0
   17bb8:	umull	r4, r0, r6, r5
   17bbc:	mov	sl, #0
   17bc0:	sbcs	r3, r1, r7
   17bc4:	str	r0, [sp, #20]
   17bc8:	ldr	r0, [sp, #24]
   17bcc:	mov	r3, #0
   17bd0:	movwcc	r3, #1
   17bd4:	cmp	r3, #0
   17bd8:	mvnne	r4, #0
   17bdc:	cmp	r3, #0
   17be0:	umull	lr, r2, r4, r5
   17be4:	mla	r2, r4, r0, r2
   17be8:	str	r2, [sp, #16]
   17bec:	ldr	r2, [sp, #20]
   17bf0:	mla	r6, r6, r0, r2
   17bf4:	ldr	r0, [sp, #16]
   17bf8:	mla	r6, r7, r5, r6
   17bfc:	mvnne	r6, #0
   17c00:	mla	r7, r6, r5, r0
   17c04:	subs	r0, ip, r4
   17c08:	sbcs	r0, r1, r6
   17c0c:	movwcc	sl, #1
   17c10:	cmp	sl, #0
   17c14:	orr	r3, r3, sl
   17c18:	mvnne	lr, #0
   17c1c:	mvnne	r7, #0
   17c20:	mov	r6, lr
   17c24:	b	1837c <__assert_fail@plt+0x7068>
   17c28:	mvn	r0, #0
   17c2c:	mvn	r1, #0
   17c30:	mov	r2, r5
   17c34:	mov	sl, r3
   17c38:	bl	189cc <__assert_fail@plt+0x76b8>
   17c3c:	subs	r3, r0, r6
   17c40:	mov	ip, r1
   17c44:	umull	r2, lr, r6, r5
   17c48:	str	r0, [sp, #20]
   17c4c:	sbcs	r3, r1, r7
   17c50:	mov	r1, #0
   17c54:	mla	r6, r6, sl, lr
   17c58:	mov	lr, #0
   17c5c:	str	ip, [sp, #16]
   17c60:	movwcc	r1, #1
   17c64:	mla	r7, r7, r5, r6
   17c68:	cmp	r1, #0
   17c6c:	mvnne	r2, #0
   17c70:	cmp	r1, #0
   17c74:	umull	r3, r4, r2, r5
   17c78:	mvnne	r7, #0
   17c7c:	mla	r4, r2, sl, r4
   17c80:	subs	r2, r0, r2
   17c84:	sbcs	r2, ip, r7
   17c88:	mla	r4, r7, r5, r4
   17c8c:	movwcc	lr, #1
   17c90:	mov	r2, #0
   17c94:	cmp	lr, #0
   17c98:	mvnne	r3, #0
   17c9c:	mvnne	r4, #0
   17ca0:	subs	r7, r0, r3
   17ca4:	mov	r0, r5
   17ca8:	sbcs	r7, ip, r4
   17cac:	movwcc	r2, #1
   17cb0:	umull	r5, r7, r3, r5
   17cb4:	cmp	r2, #0
   17cb8:	mla	r3, r3, sl, r7
   17cbc:	mvnne	r5, #0
   17cc0:	mla	r3, r4, r0, r3
   17cc4:	cmp	r2, #0
   17cc8:	umull	r6, ip, r5, r0
   17ccc:	mvnne	r3, #0
   17cd0:	mla	ip, r5, sl, ip
   17cd4:	mla	r7, r3, r0, ip
   17cd8:	ldr	r0, [sp, #20]
   17cdc:	subs	r0, r0, r5
   17ce0:	ldr	r0, [sp, #16]
   17ce4:	sbcs	r0, r0, r3
   17ce8:	mov	r0, #0
   17cec:	movwcc	r0, #1
   17cf0:	cmp	r0, #0
   17cf4:	mov	r3, r0
   17cf8:	orr	r0, r1, lr
   17cfc:	orr	r0, r0, r2
   17d00:	mvnne	r7, #0
   17d04:	mvnne	r6, #0
   17d08:	orr	r3, r0, r3
   17d0c:	b	1837c <__assert_fail@plt+0x7068>
   17d10:	mvn	r0, #0
   17d14:	mvn	r1, #0
   17d18:	mov	r2, r5
   17d1c:	mov	r4, r3
   17d20:	str	r3, [sp, #24]
   17d24:	bl	189cc <__assert_fail@plt+0x76b8>
   17d28:	umull	r3, r2, r6, r5
   17d2c:	mla	r2, r6, r4, r2
   17d30:	subs	r6, r0, r6
   17d34:	sbcs	r6, r1, r7
   17d38:	mla	r2, r7, r5, r2
   17d3c:	mov	r7, #0
   17d40:	mov	r6, #0
   17d44:	movwcc	r6, #1
   17d48:	cmp	r6, #0
   17d4c:	str	r6, [sp, #20]
   17d50:	mvnne	r3, #0
   17d54:	mvnne	r2, #0
   17d58:	subs	r4, r0, r3
   17d5c:	umull	r6, ip, r3, r5
   17d60:	sbcs	r4, r1, r2
   17d64:	ldr	r4, [sp, #24]
   17d68:	movwcc	r7, #1
   17d6c:	cmp	r7, #0
   17d70:	mov	lr, r7
   17d74:	str	r7, [sp, #16]
   17d78:	mvnne	r6, #0
   17d7c:	cmp	lr, #0
   17d80:	mov	lr, #0
   17d84:	umull	sl, r7, r6, r5
   17d88:	mla	r3, r3, r4, ip
   17d8c:	mla	r7, r6, r4, r7
   17d90:	mov	r4, r0
   17d94:	mla	r2, r2, r5, r3
   17d98:	mvnne	r2, #0
   17d9c:	subs	r3, r0, r6
   17da0:	mov	r0, #0
   17da4:	mla	r7, r2, r5, r7
   17da8:	sbcs	r2, r1, r2
   17dac:	mov	r3, r4
   17db0:	movwcc	r0, #1
   17db4:	str	r3, [sp, #4]
   17db8:	cmp	r0, #0
   17dbc:	str	r0, [sp, #12]
   17dc0:	mov	r0, r1
   17dc4:	mvnne	sl, #0
   17dc8:	mvnne	r7, #0
   17dcc:	str	r0, [sp, #8]
   17dd0:	subs	r2, r4, sl
   17dd4:	ldr	r4, [sp, #24]
   17dd8:	sbcs	r2, r1, r7
   17ddc:	movwcc	lr, #1
   17de0:	umull	r6, r2, sl, r5
   17de4:	cmp	lr, #0
   17de8:	mvnne	r6, #0
   17dec:	mla	r2, sl, r4, r2
   17df0:	cmp	lr, #0
   17df4:	umull	r1, ip, r6, r5
   17df8:	mla	r2, r7, r5, r2
   17dfc:	mla	ip, r6, r4, ip
   17e00:	mvnne	r2, #0
   17e04:	subs	r6, r3, r6
   17e08:	mla	r7, r2, r5, ip
   17e0c:	sbcs	r2, r0, r2
   17e10:	mov	ip, #0
   17e14:	movwcc	ip, #1
   17e18:	mov	r2, #0
   17e1c:	cmp	ip, #0
   17e20:	mvnne	r1, #0
   17e24:	mvnne	r7, #0
   17e28:	subs	r6, r3, r1
   17e2c:	ldr	r3, [sp, #24]
   17e30:	sbcs	r6, r0, r7
   17e34:	umull	r0, sl, r1, r5
   17e38:	movwcc	r2, #1
   17e3c:	cmp	r2, #0
   17e40:	mvnne	r0, #0
   17e44:	mla	r1, r1, r3, sl
   17e48:	cmp	r2, #0
   17e4c:	umull	r6, r4, r0, r5
   17e50:	mla	r1, r7, r5, r1
   17e54:	mla	r4, r0, r3, r4
   17e58:	ldr	r3, [sp, #4]
   17e5c:	mvnne	r1, #0
   17e60:	mla	r7, r1, r5, r4
   17e64:	ldr	r5, [sp, #16]
   17e68:	subs	r0, r3, r0
   17e6c:	ldr	r0, [sp, #8]
   17e70:	sbcs	r0, r0, r1
   17e74:	mov	r0, #0
   17e78:	movwcc	r0, #1
   17e7c:	cmp	r0, #0
   17e80:	mov	r1, r0
   17e84:	ldr	r0, [sp, #20]
   17e88:	mvnne	r7, #0
   17e8c:	mvnne	r6, #0
   17e90:	orr	r0, r0, r5
   17e94:	ldr	r5, [sp, #12]
   17e98:	orr	r0, r0, r5
   17e9c:	orr	r0, r0, lr
   17ea0:	orr	r0, r0, ip
   17ea4:	orr	r0, r0, r2
   17ea8:	b	18318 <__assert_fail@plt+0x7004>
   17eac:	mov	r1, #0
   17eb0:	lsl	r2, r7, #10
   17eb4:	lsl	r0, r6, #10
   17eb8:	lsr	r3, r7, #22
   17ebc:	cmp	r1, r7, lsr #22
   17ec0:	orr	r2, r2, r6, lsr #22
   17ec4:	mvnne	r0, #0
   17ec8:	movwne	r3, #1
   17ecc:	cmp	r1, r7, lsr #22
   17ed0:	b	18348 <__assert_fail@plt+0x7034>
   17ed4:	mvn	r0, #0
   17ed8:	mvn	r1, #0
   17edc:	mov	r2, r5
   17ee0:	mov	sl, r3
   17ee4:	bl	189cc <__assert_fail@plt+0x76b8>
   17ee8:	subs	r2, r0, r6
   17eec:	mov	ip, r0
   17ef0:	mov	r0, #0
   17ef4:	sbcs	r2, r1, r7
   17ef8:	movwcc	r0, #1
   17efc:	umull	r4, r2, r6, r5
   17f00:	cmp	r0, #0
   17f04:	mla	r2, r6, sl, r2
   17f08:	str	r0, [sp, #20]
   17f0c:	mvnne	r4, #0
   17f10:	cmp	r0, #0
   17f14:	mla	r2, r7, r5, r2
   17f18:	mov	r0, #0
   17f1c:	umull	lr, r3, r4, r5
   17f20:	mvnne	r2, #0
   17f24:	mla	r3, r4, sl, r3
   17f28:	mla	r6, r2, r5, r3
   17f2c:	subs	r3, ip, r4
   17f30:	sbcs	r2, r1, r2
   17f34:	mov	r3, r1
   17f38:	movwcc	r0, #1
   17f3c:	str	r3, [sp, #8]
   17f40:	cmp	r0, #0
   17f44:	str	r0, [sp, #16]
   17f48:	mov	r0, ip
   17f4c:	mvnne	lr, #0
   17f50:	mvnne	r6, #0
   17f54:	str	r0, [sp, #12]
   17f58:	subs	r2, ip, lr
   17f5c:	umull	r7, r4, lr, r5
   17f60:	sbcs	r2, r1, r6
   17f64:	mla	r4, lr, sl, r4
   17f68:	mov	r2, #0
   17f6c:	mla	r6, r6, r5, r4
   17f70:	mov	r4, #0
   17f74:	movwcc	r2, #1
   17f78:	cmp	r2, #0
   17f7c:	mvnne	r7, #0
   17f80:	cmp	r2, #0
   17f84:	umull	r1, ip, r7, r5
   17f88:	mvnne	r6, #0
   17f8c:	mla	ip, r7, sl, ip
   17f90:	subs	r7, r0, r7
   17f94:	mla	lr, r6, r5, ip
   17f98:	sbcs	r7, r3, r6
   17f9c:	mov	ip, #0
   17fa0:	movwcc	ip, #1
   17fa4:	cmp	ip, #0
   17fa8:	mvnne	r1, #0
   17fac:	mvnne	lr, #0
   17fb0:	subs	r7, r0, r1
   17fb4:	sbcs	r7, r3, lr
   17fb8:	movwcc	r4, #1
   17fbc:	umull	r0, r7, r1, r5
   17fc0:	cmp	r4, #0
   17fc4:	mla	r1, r1, sl, r7
   17fc8:	mvnne	r0, #0
   17fcc:	mla	r1, lr, r5, r1
   17fd0:	cmp	r4, #0
   17fd4:	umull	r6, r3, r0, r5
   17fd8:	mvnne	r1, #0
   17fdc:	mla	r3, r0, sl, r3
   17fe0:	mla	r7, r1, r5, r3
   17fe4:	ldr	r3, [sp, #12]
   17fe8:	subs	r0, r3, r0
   17fec:	ldr	r3, [sp, #16]
   17ff0:	ldr	r0, [sp, #8]
   17ff4:	sbcs	r0, r0, r1
   17ff8:	mov	r0, #0
   17ffc:	movwcc	r0, #1
   18000:	cmp	r0, #0
   18004:	mov	r1, r0
   18008:	ldr	r0, [sp, #20]
   1800c:	mvnne	r7, #0
   18010:	mvnne	r6, #0
   18014:	orr	r0, r0, r3
   18018:	orr	r0, r0, r2
   1801c:	orr	r0, r0, ip
   18020:	orr	r0, r0, r4
   18024:	b	18148 <__assert_fail@plt+0x6e34>
   18028:	mvn	r0, #0
   1802c:	mvn	r1, #0
   18030:	mov	r2, r5
   18034:	mov	sl, r3
   18038:	bl	189cc <__assert_fail@plt+0x76b8>
   1803c:	umull	r3, r2, r6, r5
   18040:	mov	lr, r1
   18044:	mov	r1, r0
   18048:	mla	r2, r6, sl, r2
   1804c:	subs	r6, r0, r6
   18050:	mov	r0, #0
   18054:	sbcs	r6, lr, r7
   18058:	mla	r2, r7, r5, r2
   1805c:	movwcc	r0, #1
   18060:	cmp	r0, #0
   18064:	str	r0, [sp, #20]
   18068:	mov	r0, r1
   1806c:	mvnne	r3, #0
   18070:	mvnne	r2, #0
   18074:	str	r0, [sp, #16]
   18078:	subs	r4, r1, r3
   1807c:	umull	r7, ip, r3, r5
   18080:	sbcs	r4, lr, r2
   18084:	mla	r3, r3, sl, ip
   18088:	mov	ip, #0
   1808c:	mov	r4, #0
   18090:	mla	r2, r2, r5, r3
   18094:	movwcc	r4, #1
   18098:	cmp	r4, #0
   1809c:	mvnne	r7, #0
   180a0:	cmp	r4, #0
   180a4:	umull	r1, r6, r7, r5
   180a8:	mvnne	r2, #0
   180ac:	mla	r6, r7, sl, r6
   180b0:	mla	r3, r2, r5, r6
   180b4:	subs	r6, r0, r7
   180b8:	sbcs	r2, lr, r2
   180bc:	movwcc	ip, #1
   180c0:	mov	r2, #0
   180c4:	cmp	ip, #0
   180c8:	mvnne	r1, #0
   180cc:	mvnne	r3, #0
   180d0:	subs	r6, r0, r1
   180d4:	sbcs	r6, lr, r3
   180d8:	movwcc	r2, #1
   180dc:	umull	r0, r6, r1, r5
   180e0:	cmp	r2, #0
   180e4:	str	r6, [sp, #12]
   180e8:	mvnne	r0, #0
   180ec:	cmp	r2, #0
   180f0:	umull	r6, r7, r0, r5
   180f4:	mla	r7, r0, sl, r7
   180f8:	str	r7, [sp, #8]
   180fc:	ldr	r7, [sp, #12]
   18100:	mla	r1, r1, sl, r7
   18104:	mla	r1, r3, r5, r1
   18108:	ldr	r3, [sp, #8]
   1810c:	mvnne	r1, #0
   18110:	mla	r7, r1, r5, r3
   18114:	ldr	r3, [sp, #16]
   18118:	subs	r0, r3, r0
   1811c:	sbcs	r0, lr, r1
   18120:	mov	r0, #0
   18124:	movwcc	r0, #1
   18128:	cmp	r0, #0
   1812c:	mov	r1, r0
   18130:	ldr	r0, [sp, #20]
   18134:	mvnne	r7, #0
   18138:	mvnne	r6, #0
   1813c:	orr	r0, r0, r4
   18140:	orr	r0, r0, ip
   18144:	orr	r0, r0, r2
   18148:	orr	r3, r0, r1
   1814c:	b	1837c <__assert_fail@plt+0x7068>
   18150:	mvn	r0, #0
   18154:	mvn	r1, #0
   18158:	mov	r2, r5
   1815c:	mov	sl, r3
   18160:	bl	189cc <__assert_fail@plt+0x76b8>
   18164:	mov	ip, r1
   18168:	subs	r1, r0, r6
   1816c:	umull	r3, lr, r6, r5
   18170:	mov	r2, r5
   18174:	sbcs	r1, ip, r7
   18178:	mla	r6, r6, sl, lr
   1817c:	str	ip, [sp, #4]
   18180:	mov	r1, #0
   18184:	mla	r7, r7, r2, r6
   18188:	movwcc	r1, #1
   1818c:	cmp	r1, #0
   18190:	str	r1, [sp, #20]
   18194:	mvnne	r3, #0
   18198:	cmp	r1, #0
   1819c:	mov	r1, r0
   181a0:	umull	r4, r5, r3, r5
   181a4:	mvnne	r7, #0
   181a8:	mov	lr, r1
   181ac:	mla	r5, r3, sl, r5
   181b0:	subs	r3, r0, r3
   181b4:	sbcs	r0, ip, r7
   181b8:	mla	r5, r7, r2, r5
   181bc:	mov	r0, #0
   181c0:	movwcc	r0, #1
   181c4:	cmp	r0, #0
   181c8:	str	r0, [sp, #16]
   181cc:	mvnne	r4, #0
   181d0:	mvnne	r5, #0
   181d4:	subs	r0, r1, r4
   181d8:	mov	r1, #0
   181dc:	sbcs	r0, ip, r5
   181e0:	movwcc	r1, #1
   181e4:	umull	r3, r0, r4, r2
   181e8:	cmp	r1, #0
   181ec:	mla	r0, r4, sl, r0
   181f0:	mov	r4, lr
   181f4:	str	r1, [sp, #12]
   181f8:	mvnne	r3, #0
   181fc:	mla	r0, r5, r2, r0
   18200:	cmp	r1, #0
   18204:	str	r4, [sp]
   18208:	umull	r7, r6, r3, r2
   1820c:	mvnne	r0, #0
   18210:	mla	r6, r3, sl, r6
   18214:	subs	r3, lr, r3
   18218:	mla	r5, r0, r2, r6
   1821c:	sbcs	r0, ip, r0
   18220:	mov	r3, #0
   18224:	mov	r0, #0
   18228:	movwcc	r0, #1
   1822c:	cmp	r0, #0
   18230:	str	r0, [sp, #8]
   18234:	mvnne	r7, #0
   18238:	mvnne	r5, #0
   1823c:	subs	r0, lr, r7
   18240:	sbcs	r0, ip, r5
   18244:	movwcc	r3, #1
   18248:	umull	r6, r0, r7, r2
   1824c:	cmp	r3, #0
   18250:	mla	r7, r7, sl, r0
   18254:	mov	r0, ip
   18258:	mvnne	r6, #0
   1825c:	mla	r7, r5, r2, r7
   18260:	cmp	r3, #0
   18264:	mov	r5, #0
   18268:	umull	r1, lr, r6, r2
   1826c:	mvnne	r7, #0
   18270:	mla	lr, r6, sl, lr
   18274:	subs	r6, r4, r6
   18278:	mla	lr, r7, r2, lr
   1827c:	sbcs	r7, ip, r7
   18280:	mov	ip, #0
   18284:	movwcc	ip, #1
   18288:	cmp	ip, #0
   1828c:	mvnne	r1, #0
   18290:	mvnne	lr, #0
   18294:	subs	r7, r4, r1
   18298:	sbcs	r7, r0, lr
   1829c:	movwcc	r5, #1
   182a0:	umull	r0, r7, r1, r2
   182a4:	cmp	r5, #0
   182a8:	mla	r1, r1, sl, r7
   182ac:	mvnne	r0, #0
   182b0:	mla	r1, lr, r2, r1
   182b4:	cmp	r5, #0
   182b8:	umull	r6, r4, r0, r2
   182bc:	mvnne	r1, #0
   182c0:	mla	r4, r0, sl, r4
   182c4:	mla	r7, r1, r2, r4
   182c8:	ldr	r2, [sp]
   182cc:	subs	r0, r2, r0
   182d0:	ldr	r2, [sp, #16]
   182d4:	ldr	r0, [sp, #4]
   182d8:	sbcs	r0, r0, r1
   182dc:	mov	r0, #0
   182e0:	movwcc	r0, #1
   182e4:	cmp	r0, #0
   182e8:	mov	r1, r0
   182ec:	ldr	r0, [sp, #20]
   182f0:	mvnne	r7, #0
   182f4:	mvnne	r6, #0
   182f8:	orr	r0, r0, r2
   182fc:	ldr	r2, [sp, #12]
   18300:	orr	r0, r0, r2
   18304:	ldr	r2, [sp, #8]
   18308:	orr	r0, r0, r2
   1830c:	orr	r0, r0, r3
   18310:	orr	r0, r0, ip
   18314:	orr	r0, r0, r5
   18318:	orr	r0, r0, r1
   1831c:	and	r3, r0, #1
   18320:	b	1837c <__assert_fail@plt+0x7068>
   18324:	mov	r1, #0
   18328:	lsl	r2, r7, #9
   1832c:	lsl	r0, r6, #9
   18330:	lsr	r3, r7, #23
   18334:	cmp	r1, r7, lsr #23
   18338:	orr	r2, r2, r6, lsr #23
   1833c:	mvnne	r0, #0
   18340:	movwne	r3, #1
   18344:	cmp	r1, r7, lsr #23
   18348:	mvnne	r2, #0
   1834c:	mov	r6, r0
   18350:	mov	r7, r2
   18354:	b	1837c <__assert_fail@plt+0x7068>
   18358:	lsl	r1, r7, #1
   1835c:	lsl	r0, r6, #1
   18360:	cmp	r7, #0
   18364:	lsr	r3, r7, #31
   18368:	orr	r1, r1, r6, lsr #31
   1836c:	mvnlt	r0, #0
   18370:	mvnlt	r1, #0
   18374:	mov	r6, r0
   18378:	mov	r7, r1
   1837c:	ldr	r1, [sp, #32]
   18380:	ldr	r2, [sp, #28]
   18384:	orr	r8, r3, r8
   18388:	add	r0, r1, r2
   1838c:	str	r0, [r9]
   18390:	ldrb	r0, [r1, r2]
   18394:	cmp	r0, #0
   18398:	orrne	r8, r8, #2
   1839c:	ldr	r0, [sp, #36]	; 0x24
   183a0:	strd	r6, [r0]
   183a4:	mov	r0, r8
   183a8:	sub	sp, fp, #28
   183ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183b0:	movw	r0, #40294	; 0x9d66
   183b4:	movw	r1, #40332	; 0x9d8c
   183b8:	movw	r3, #40429	; 0x9ded
   183bc:	mov	r2, #85	; 0x55
   183c0:	movt	r0, #1
   183c4:	movt	r1, #1
   183c8:	movt	r3, #1
   183cc:	bl	11314 <__assert_fail@plt>
   183d0:	clz	r2, r1
   183d4:	clz	r3, r0
   183d8:	lsr	r2, r2, #5
   183dc:	lsr	r3, r3, #5
   183e0:	orrs	r2, r3, r2
   183e4:	movwne	r1, #1
   183e8:	movwne	r0, #1
   183ec:	cmp	r1, #0
   183f0:	beq	18420 <__assert_fail@plt+0x710c>
   183f4:	mvn	r2, #-2147483648	; 0x80000000
   183f8:	udiv	r2, r2, r1
   183fc:	cmp	r2, r0
   18400:	bcs	18420 <__assert_fail@plt+0x710c>
   18404:	push	{fp, lr}
   18408:	mov	fp, sp
   1840c:	bl	1120c <__errno_location@plt>
   18410:	mov	r1, #12
   18414:	str	r1, [r0]
   18418:	mov	r0, #0
   1841c:	pop	{fp, pc}
   18420:	b	11068 <calloc@plt>
   18424:	cmp	r0, #0
   18428:	movweq	r0, #1
   1842c:	cmn	r0, #1
   18430:	ble	18438 <__assert_fail@plt+0x7124>
   18434:	b	11188 <malloc@plt>
   18438:	push	{fp, lr}
   1843c:	mov	fp, sp
   18440:	bl	1120c <__errno_location@plt>
   18444:	mov	r1, #12
   18448:	str	r1, [r0]
   1844c:	mov	r0, #0
   18450:	pop	{fp, pc}
   18454:	push	{fp, lr}
   18458:	mov	fp, sp
   1845c:	cmp	r0, #0
   18460:	beq	1847c <__assert_fail@plt+0x7168>
   18464:	cmp	r1, #0
   18468:	beq	18488 <__assert_fail@plt+0x7174>
   1846c:	cmn	r1, #1
   18470:	ble	18494 <__assert_fail@plt+0x7180>
   18474:	pop	{fp, lr}
   18478:	b	11110 <realloc@plt>
   1847c:	mov	r0, r1
   18480:	pop	{fp, lr}
   18484:	b	18424 <__assert_fail@plt+0x7110>
   18488:	bl	13c30 <__assert_fail@plt+0x291c>
   1848c:	mov	r0, #0
   18490:	pop	{fp, pc}
   18494:	bl	1120c <__errno_location@plt>
   18498:	mov	r1, #12
   1849c:	str	r1, [r0]
   184a0:	mov	r0, #0
   184a4:	pop	{fp, pc}
   184a8:	push	{r4, r5, r6, sl, fp, lr}
   184ac:	add	fp, sp, #16
   184b0:	mov	r4, r0
   184b4:	bl	11158 <__fpending@plt>
   184b8:	ldr	r6, [r4]
   184bc:	mov	r5, r0
   184c0:	mov	r0, r4
   184c4:	bl	13a78 <__assert_fail@plt+0x2764>
   184c8:	tst	r6, #32
   184cc:	bne	18504 <__assert_fail@plt+0x71f0>
   184d0:	cmp	r0, #0
   184d4:	mov	r4, r0
   184d8:	mvnne	r4, #0
   184dc:	cmp	r5, #0
   184e0:	bne	18510 <__assert_fail@plt+0x71fc>
   184e4:	cmp	r0, #0
   184e8:	beq	18510 <__assert_fail@plt+0x71fc>
   184ec:	bl	1120c <__errno_location@plt>
   184f0:	ldr	r0, [r0]
   184f4:	subs	r4, r0, #9
   184f8:	mvnne	r4, #0
   184fc:	mov	r0, r4
   18500:	pop	{r4, r5, r6, sl, fp, pc}
   18504:	mvn	r4, #0
   18508:	cmp	r0, #0
   1850c:	beq	18518 <__assert_fail@plt+0x7204>
   18510:	mov	r0, r4
   18514:	pop	{r4, r5, r6, sl, fp, pc}
   18518:	bl	1120c <__errno_location@plt>
   1851c:	mov	r1, #0
   18520:	str	r1, [r0]
   18524:	mov	r0, r4
   18528:	pop	{r4, r5, r6, sl, fp, pc}
   1852c:	sub	sp, sp, #8
   18530:	push	{r4, r5, r6, r7, fp, lr}
   18534:	add	fp, sp, #16
   18538:	sub	sp, sp, #8
   1853c:	mov	r5, r0
   18540:	add	r0, fp, #8
   18544:	cmp	r1, #11
   18548:	str	r3, [fp, #12]
   1854c:	str	r2, [fp, #8]
   18550:	str	r0, [sp, #4]
   18554:	bhi	18590 <__assert_fail@plt+0x727c>
   18558:	mov	r0, #1
   1855c:	movw	r2, #1300	; 0x514
   18560:	tst	r2, r0, lsl r1
   18564:	bne	18650 <__assert_fail@plt+0x733c>
   18568:	movw	r2, #2570	; 0xa0a
   1856c:	tst	r2, r0, lsl r1
   18570:	bne	185b8 <__assert_fail@plt+0x72a4>
   18574:	cmp	r1, #0
   18578:	bne	18590 <__assert_fail@plt+0x727c>
   1857c:	ldr	r0, [sp, #4]
   18580:	add	r1, r0, #4
   18584:	str	r1, [sp, #4]
   18588:	mov	r1, #0
   1858c:	b	1865c <__assert_fail@plt+0x7348>
   18590:	sub	r0, r1, #1024	; 0x400
   18594:	cmp	r0, #10
   18598:	bhi	18650 <__assert_fail@plt+0x733c>
   1859c:	mov	r2, #1
   185a0:	movw	r3, #645	; 0x285
   185a4:	tst	r3, r2, lsl r0
   185a8:	bne	18650 <__assert_fail@plt+0x733c>
   185ac:	movw	r3, #1282	; 0x502
   185b0:	tst	r3, r2, lsl r0
   185b4:	beq	185c4 <__assert_fail@plt+0x72b0>
   185b8:	mov	r0, r5
   185bc:	bl	11278 <fcntl64@plt>
   185c0:	b	18668 <__assert_fail@plt+0x7354>
   185c4:	cmp	r0, #6
   185c8:	bne	18650 <__assert_fail@plt+0x733c>
   185cc:	ldr	r0, [sp, #4]
   185d0:	movw	r7, #41776	; 0xa330
   185d4:	movt	r7, #2
   185d8:	add	r1, r0, #4
   185dc:	str	r1, [sp, #4]
   185e0:	ldr	r6, [r0]
   185e4:	ldr	r0, [r7]
   185e8:	cmp	r0, #0
   185ec:	blt	1868c <__assert_fail@plt+0x7378>
   185f0:	mov	r0, r5
   185f4:	movw	r1, #1030	; 0x406
   185f8:	mov	r2, r6
   185fc:	bl	11278 <fcntl64@plt>
   18600:	mov	r4, r0
   18604:	cmn	r0, #1
   18608:	bgt	18680 <__assert_fail@plt+0x736c>
   1860c:	bl	1120c <__errno_location@plt>
   18610:	ldr	r0, [r0]
   18614:	cmp	r0, #22
   18618:	bne	18680 <__assert_fail@plt+0x736c>
   1861c:	mov	r0, r5
   18620:	mov	r1, #0
   18624:	mov	r2, r6
   18628:	bl	11278 <fcntl64@plt>
   1862c:	mov	r4, r0
   18630:	cmp	r0, #0
   18634:	blt	1866c <__assert_fail@plt+0x7358>
   18638:	mvn	r0, #0
   1863c:	str	r0, [r7]
   18640:	mov	r0, #1
   18644:	cmp	r0, #0
   18648:	bne	186b8 <__assert_fail@plt+0x73a4>
   1864c:	b	1866c <__assert_fail@plt+0x7358>
   18650:	ldr	r0, [sp, #4]
   18654:	add	r2, r0, #4
   18658:	str	r2, [sp, #4]
   1865c:	ldr	r2, [r0]
   18660:	mov	r0, r5
   18664:	bl	11278 <fcntl64@plt>
   18668:	mov	r4, r0
   1866c:	mov	r0, r4
   18670:	sub	sp, fp, #16
   18674:	pop	{r4, r5, r6, r7, fp, lr}
   18678:	add	sp, sp, #8
   1867c:	bx	lr
   18680:	mov	r0, #1
   18684:	str	r0, [r7]
   18688:	b	1866c <__assert_fail@plt+0x7358>
   1868c:	mov	r0, r5
   18690:	mov	r1, #0
   18694:	mov	r2, r6
   18698:	bl	11278 <fcntl64@plt>
   1869c:	mov	r4, r0
   186a0:	ldr	r0, [r7]
   186a4:	add	r0, r0, #1
   186a8:	clz	r0, r0
   186ac:	lsr	r0, r0, #5
   186b0:	cmp	r0, #0
   186b4:	beq	1866c <__assert_fail@plt+0x7358>
   186b8:	cmp	r4, #0
   186bc:	blt	1866c <__assert_fail@plt+0x7358>
   186c0:	mov	r0, r4
   186c4:	mov	r1, #1
   186c8:	bl	11278 <fcntl64@plt>
   186cc:	cmp	r0, #0
   186d0:	blt	186ec <__assert_fail@plt+0x73d8>
   186d4:	orr	r2, r0, #1
   186d8:	mov	r0, r4
   186dc:	mov	r1, #2
   186e0:	bl	11278 <fcntl64@plt>
   186e4:	cmn	r0, #1
   186e8:	bne	1866c <__assert_fail@plt+0x7358>
   186ec:	bl	1120c <__errno_location@plt>
   186f0:	ldr	r6, [r0]
   186f4:	mov	r5, r0
   186f8:	mov	r0, r4
   186fc:	bl	112fc <close@plt>
   18700:	str	r6, [r5]
   18704:	mvn	r4, #0
   18708:	b	1866c <__assert_fail@plt+0x7358>
   1870c:	push	{fp, lr}
   18710:	mov	fp, sp
   18714:	mov	r0, #14
   18718:	bl	112b4 <nl_langinfo@plt>
   1871c:	movw	r1, #38786	; 0x9782
   18720:	cmp	r0, #0
   18724:	movt	r1, #1
   18728:	movne	r1, r0
   1872c:	movw	r0, #40508	; 0x9e3c
   18730:	ldrb	r2, [r1]
   18734:	movt	r0, #1
   18738:	cmp	r2, #0
   1873c:	movne	r0, r1
   18740:	pop	{fp, pc}
   18744:	push	{r4, r5, r6, r7, fp, lr}
   18748:	add	fp, sp, #16
   1874c:	sub	sp, sp, #8
   18750:	add	r5, sp, #4
   18754:	cmp	r0, #0
   18758:	mov	r7, r2
   1875c:	mov	r4, r1
   18760:	movne	r5, r0
   18764:	mov	r0, r5
   18768:	bl	11164 <mbrtowc@plt>
   1876c:	mov	r6, r0
   18770:	cmp	r7, #0
   18774:	beq	18798 <__assert_fail@plt+0x7484>
   18778:	cmn	r6, #2
   1877c:	bcc	18798 <__assert_fail@plt+0x7484>
   18780:	mov	r0, #0
   18784:	bl	13cfc <__assert_fail@plt+0x29e8>
   18788:	cmp	r0, #0
   1878c:	ldrbeq	r0, [r4]
   18790:	moveq	r6, #1
   18794:	streq	r0, [r5]
   18798:	mov	r0, r6
   1879c:	sub	sp, fp, #16
   187a0:	pop	{r4, r5, r6, r7, fp, pc}
   187a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187a8:	add	fp, sp, #28
   187ac:	sub	sp, sp, #28
   187b0:	mov	r4, r3
   187b4:	mov	r6, r2
   187b8:	mov	r5, r1
   187bc:	mov	r7, r0
   187c0:	cmp	r1, r3
   187c4:	bne	187e0 <__assert_fail@plt+0x74cc>
   187c8:	mov	r0, r7
   187cc:	mov	r1, r6
   187d0:	mov	r2, r5
   187d4:	bl	110f8 <memcmp@plt>
   187d8:	cmp	r0, #0
   187dc:	beq	188a8 <__assert_fail@plt+0x7594>
   187e0:	ldrb	r0, [r6, r4]
   187e4:	mov	r9, #0
   187e8:	str	r4, [sp, #24]
   187ec:	add	r8, r4, #1
   187f0:	str	r5, [sp, #16]
   187f4:	add	sl, r5, #1
   187f8:	str	r0, [sp, #8]
   187fc:	ldrb	r0, [r7, r5]
   18800:	strb	r9, [r7, r5]
   18804:	strb	r9, [r6, r4]
   18808:	str	r0, [sp, #4]
   1880c:	bl	1120c <__errno_location@plt>
   18810:	mov	r4, r7
   18814:	mov	r5, r0
   18818:	mov	r7, r6
   1881c:	str	r6, [sp, #20]
   18820:	str	r4, [sp, #12]
   18824:	mov	r0, r4
   18828:	mov	r1, r7
   1882c:	str	r9, [r5]
   18830:	bl	1117c <strcoll@plt>
   18834:	cmp	r0, #0
   18838:	bne	18888 <__assert_fail@plt+0x7574>
   1883c:	mov	r0, r4
   18840:	bl	111f4 <strlen@plt>
   18844:	add	r6, r0, #1
   18848:	mov	r0, r7
   1884c:	sub	sl, sl, r6
   18850:	bl	111f4 <strlen@plt>
   18854:	add	r0, r0, #1
   18858:	cmp	sl, #0
   1885c:	sub	r8, r8, r0
   18860:	beq	1887c <__assert_fail@plt+0x7568>
   18864:	add	r4, r4, r6
   18868:	add	r7, r7, r0
   1886c:	cmp	r8, #0
   18870:	bne	18824 <__assert_fail@plt+0x7510>
   18874:	mov	r0, #1
   18878:	b	18888 <__assert_fail@plt+0x7574>
   1887c:	cmp	r8, #0
   18880:	mvnne	r8, #0
   18884:	mov	r0, r8
   18888:	ldr	r1, [sp, #24]
   1888c:	ldr	r2, [sp, #20]
   18890:	ldr	r3, [sp, #16]
   18894:	ldmib	sp, {r5, r6, r7}
   18898:	strb	r5, [r7, r3]
   1889c:	strb	r6, [r2, r1]
   188a0:	sub	sp, fp, #28
   188a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188a8:	bl	1120c <__errno_location@plt>
   188ac:	mov	r1, r0
   188b0:	mov	r0, #0
   188b4:	str	r0, [r1]
   188b8:	sub	sp, fp, #28
   188bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188c4:	add	fp, sp, #28
   188c8:	sub	sp, sp, #4
   188cc:	mov	sl, r3
   188d0:	mov	r5, r2
   188d4:	mov	r6, r1
   188d8:	mov	r7, r0
   188dc:	cmp	r1, r3
   188e0:	bne	188fc <__assert_fail@plt+0x75e8>
   188e4:	mov	r0, r7
   188e8:	mov	r1, r5
   188ec:	mov	r2, r6
   188f0:	bl	110f8 <memcmp@plt>
   188f4:	cmp	r0, #0
   188f8:	beq	18978 <__assert_fail@plt+0x7664>
   188fc:	bl	1120c <__errno_location@plt>
   18900:	mov	r8, r0
   18904:	mov	r9, #0
   18908:	mov	r0, r7
   1890c:	mov	r1, r5
   18910:	str	r9, [r8]
   18914:	bl	1117c <strcoll@plt>
   18918:	cmp	r0, #0
   1891c:	bne	1895c <__assert_fail@plt+0x7648>
   18920:	mov	r0, r7
   18924:	bl	111f4 <strlen@plt>
   18928:	add	r4, r0, #1
   1892c:	mov	r0, r5
   18930:	sub	r6, r6, r4
   18934:	bl	111f4 <strlen@plt>
   18938:	add	r0, r0, #1
   1893c:	cmp	r6, #0
   18940:	sub	sl, sl, r0
   18944:	beq	18964 <__assert_fail@plt+0x7650>
   18948:	add	r7, r7, r4
   1894c:	add	r5, r5, r0
   18950:	cmp	sl, #0
   18954:	bne	18908 <__assert_fail@plt+0x75f4>
   18958:	mov	r0, #1
   1895c:	sub	sp, fp, #28
   18960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18964:	cmp	sl, #0
   18968:	mvnne	sl, #0
   1896c:	mov	r0, sl
   18970:	sub	sp, fp, #28
   18974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18978:	bl	1120c <__errno_location@plt>
   1897c:	mov	r1, r0
   18980:	mov	r0, #0
   18984:	str	r0, [r1]
   18988:	sub	sp, fp, #28
   1898c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18990:	cmp	r2, #0
   18994:	beq	189c4 <__assert_fail@plt+0x76b0>
   18998:	mvn	r3, #0
   1899c:	udiv	r3, r3, r2
   189a0:	cmp	r3, r1
   189a4:	bcs	189c4 <__assert_fail@plt+0x76b0>
   189a8:	push	{fp, lr}
   189ac:	mov	fp, sp
   189b0:	bl	1120c <__errno_location@plt>
   189b4:	mov	r1, #12
   189b8:	str	r1, [r0]
   189bc:	mov	r0, #0
   189c0:	pop	{fp, pc}
   189c4:	mul	r1, r2, r1
   189c8:	b	18454 <__assert_fail@plt+0x7140>
   189cc:	cmp	r3, #0
   189d0:	cmpeq	r2, #0
   189d4:	bne	189ec <__assert_fail@plt+0x76d8>
   189d8:	cmp	r1, #0
   189dc:	cmpeq	r0, #0
   189e0:	mvnne	r1, #0
   189e4:	mvnne	r0, #0
   189e8:	b	18a08 <__assert_fail@plt+0x76f4>
   189ec:	sub	sp, sp, #8
   189f0:	push	{sp, lr}
   189f4:	bl	18a18 <__assert_fail@plt+0x7704>
   189f8:	ldr	lr, [sp, #4]
   189fc:	add	sp, sp, #8
   18a00:	pop	{r2, r3}
   18a04:	bx	lr
   18a08:	push	{r1, lr}
   18a0c:	mov	r0, #8
   18a10:	bl	11080 <raise@plt>
   18a14:	pop	{r1, pc}
   18a18:	cmp	r1, r3
   18a1c:	cmpeq	r0, r2
   18a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a24:	mov	r4, r0
   18a28:	movcc	r0, #0
   18a2c:	mov	r5, r1
   18a30:	ldr	lr, [sp, #36]	; 0x24
   18a34:	movcc	r1, r0
   18a38:	bcc	18b34 <__assert_fail@plt+0x7820>
   18a3c:	cmp	r3, #0
   18a40:	clzeq	ip, r2
   18a44:	clzne	ip, r3
   18a48:	addeq	ip, ip, #32
   18a4c:	cmp	r5, #0
   18a50:	clzeq	r1, r4
   18a54:	addeq	r1, r1, #32
   18a58:	clzne	r1, r5
   18a5c:	sub	ip, ip, r1
   18a60:	sub	sl, ip, #32
   18a64:	lsl	r9, r3, ip
   18a68:	rsb	fp, ip, #32
   18a6c:	orr	r9, r9, r2, lsl sl
   18a70:	orr	r9, r9, r2, lsr fp
   18a74:	lsl	r8, r2, ip
   18a78:	cmp	r5, r9
   18a7c:	cmpeq	r4, r8
   18a80:	movcc	r0, #0
   18a84:	movcc	r1, r0
   18a88:	bcc	18aa4 <__assert_fail@plt+0x7790>
   18a8c:	mov	r0, #1
   18a90:	subs	r4, r4, r8
   18a94:	lsl	r1, r0, sl
   18a98:	orr	r1, r1, r0, lsr fp
   18a9c:	lsl	r0, r0, ip
   18aa0:	sbc	r5, r5, r9
   18aa4:	cmp	ip, #0
   18aa8:	beq	18b34 <__assert_fail@plt+0x7820>
   18aac:	lsr	r6, r8, #1
   18ab0:	orr	r6, r6, r9, lsl #31
   18ab4:	lsr	r7, r9, #1
   18ab8:	mov	r2, ip
   18abc:	b	18ae0 <__assert_fail@plt+0x77cc>
   18ac0:	subs	r3, r4, r6
   18ac4:	sbc	r8, r5, r7
   18ac8:	adds	r3, r3, r3
   18acc:	adc	r8, r8, r8
   18ad0:	adds	r4, r3, #1
   18ad4:	adc	r5, r8, #0
   18ad8:	subs	r2, r2, #1
   18adc:	beq	18afc <__assert_fail@plt+0x77e8>
   18ae0:	cmp	r5, r7
   18ae4:	cmpeq	r4, r6
   18ae8:	bcs	18ac0 <__assert_fail@plt+0x77ac>
   18aec:	adds	r4, r4, r4
   18af0:	adc	r5, r5, r5
   18af4:	subs	r2, r2, #1
   18af8:	bne	18ae0 <__assert_fail@plt+0x77cc>
   18afc:	lsr	r3, r4, ip
   18b00:	orr	r3, r3, r5, lsl fp
   18b04:	lsr	r2, r5, ip
   18b08:	orr	r3, r3, r5, lsr sl
   18b0c:	adds	r0, r0, r4
   18b10:	mov	r4, r3
   18b14:	lsl	r3, r2, ip
   18b18:	orr	r3, r3, r4, lsl sl
   18b1c:	lsl	ip, r4, ip
   18b20:	orr	r3, r3, r4, lsr fp
   18b24:	adc	r1, r1, r5
   18b28:	subs	r0, r0, ip
   18b2c:	mov	r5, r2
   18b30:	sbc	r1, r1, r3
   18b34:	cmp	lr, #0
   18b38:	strdne	r4, [lr]
   18b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b44:	mov	r7, r0
   18b48:	ldr	r6, [pc, #72]	; 18b98 <__assert_fail@plt+0x7884>
   18b4c:	ldr	r5, [pc, #72]	; 18b9c <__assert_fail@plt+0x7888>
   18b50:	add	r6, pc, r6
   18b54:	add	r5, pc, r5
   18b58:	sub	r6, r6, r5
   18b5c:	mov	r8, r1
   18b60:	mov	r9, r2
   18b64:	bl	1103c <fdopen@plt-0x20>
   18b68:	asrs	r6, r6, #2
   18b6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b70:	mov	r4, #0
   18b74:	add	r4, r4, #1
   18b78:	ldr	r3, [r5], #4
   18b7c:	mov	r2, r9
   18b80:	mov	r1, r8
   18b84:	mov	r0, r7
   18b88:	blx	r3
   18b8c:	cmp	r6, r4
   18b90:	bne	18b74 <__assert_fail@plt+0x7860>
   18b94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b98:			; <UNDEFINED> instruction: 0x000113b4
   18b9c:	andeq	r1, r1, ip, lsr #7
   18ba0:	bx	lr
   18ba4:	ldr	r3, [pc, #12]	; 18bb8 <__assert_fail@plt+0x78a4>
   18ba8:	mov	r1, #0
   18bac:	add	r3, pc, r3
   18bb0:	ldr	r2, [r3]
   18bb4:	b	11218 <__cxa_atexit@plt>
   18bb8:	andeq	r1, r1, r0, asr r5

Disassembly of section .fini:

00018bbc <.fini>:
   18bbc:	push	{r3, lr}
   18bc0:	pop	{r3, pc}
