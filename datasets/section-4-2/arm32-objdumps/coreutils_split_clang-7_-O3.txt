
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011358 <.init>:
   11358:	push	{r3, lr}
   1135c:	bl	1175c <__assert_fail@plt+0x48>
   11360:	pop	{r3, pc}

Disassembly of section .plt:

00011364 <fdopen@plt-0x14>:
   11364:	push	{lr}		; (str lr, [sp, #-4]!)
   11368:	ldr	lr, [pc, #4]	; 11374 <fdopen@plt-0x4>
   1136c:	add	lr, pc, lr
   11370:	ldr	pc, [lr, #8]!
   11374:	andeq	sl, r1, ip, lsl #25

00011378 <fdopen@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3212]!	; 0xc8c

00011384 <calloc@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3204]!	; 0xc84

00011390 <fputs_unlocked@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3196]!	; 0xc7c

0001139c <raise@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3188]!	; 0xc74

000113a8 <strcmp@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3180]!	; 0xc6c

000113b4 <strtol@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3172]!	; 0xc64

000113c0 <read@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3164]!	; 0xc5c

000113cc <fflush@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3156]!	; 0xc54

000113d8 <sigprocmask@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113e4 <memmove@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3140]!	; 0xc44

000113f0 <free@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3132]!	; 0xc3c

000113fc <_exit@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3124]!	; 0xc34

00011408 <memcpy@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3116]!	; 0xc2c

00011414 <__strtoull_internal@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3108]!	; 0xc24

00011420 <mbsinit@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3100]!	; 0xc1c

0001142c <ftruncate64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3092]!	; 0xc14

00011438 <fwrite_unlocked@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3084]!	; 0xc0c

00011444 <memcmp@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3076]!	; 0xc04

00011450 <dcgettext@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3068]!	; 0xbfc

0001145c <dup2@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3060]!	; 0xbf4

00011468 <realloc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3052]!	; 0xbec

00011474 <textdomain@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011480 <rawmemchr@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3036]!	; 0xbdc

0001148c <iswprint@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3028]!	; 0xbd4

00011498 <__fxstat64@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3020]!	; 0xbcc

000114a4 <sigaction@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3012]!	; 0xbc4

000114b0 <fwrite@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3004]!	; 0xbbc

000114bc <lseek64@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114c8 <waitpid@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #2988]!	; 0xbac

000114d4 <__ctype_get_mb_cur_max@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #2980]!	; 0xba4

000114e0 <strcpy@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114ec <__fpending@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #2964]!	; 0xb94

000114f8 <mbrtowc@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2956]!	; 0xb8c

00011504 <error@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2948]!	; 0xb84

00011510 <open64@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2940]!	; 0xb7c

0001151c <getenv@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2932]!	; 0xb74

00011528 <malloc@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2924]!	; 0xb6c

00011534 <sigaddset@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2916]!	; 0xb64

00011540 <__libc_start_main@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2908]!	; 0xb5c

0001154c <__freading@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2900]!	; 0xb54

00011558 <__gmon_start__@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2892]!	; 0xb4c

00011564 <getopt_long@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2884]!	; 0xb44

00011570 <__ctype_b_loc@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2876]!	; 0xb3c

0001157c <exit@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2868]!	; 0xb34

00011588 <strlen@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2860]!	; 0xb2c

00011594 <__libc_current_sigrtmax@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2852]!	; 0xb24

000115a0 <strchr@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2844]!	; 0xb1c

000115ac <setenv@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2836]!	; 0xb14

000115b8 <memrchr@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115c4 <getpagesize@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2820]!	; 0xb04

000115d0 <__errno_location@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2812]!	; 0xafc

000115dc <__sprintf_chk@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115e8 <__cxa_atexit@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2796]!	; 0xaec

000115f4 <memset@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2788]!	; 0xae4

00011600 <__printf_chk@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2780]!	; 0xadc

0001160c <write@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2772]!	; 0xad4

00011618 <fileno@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2764]!	; 0xacc

00011624 <__fprintf_chk@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2756]!	; 0xac4

00011630 <memchr@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2748]!	; 0xabc

0001163c <fclose@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2740]!	; 0xab4

00011648 <pipe@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2732]!	; 0xaac

00011654 <fseeko64@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011660 <fcntl64@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2716]!	; 0xa9c

0001166c <setlocale@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2708]!	; 0xa94

00011678 <sigemptyset@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2700]!	; 0xa8c

00011684 <fork@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2692]!	; 0xa84

00011690 <execl@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2684]!	; 0xa7c

0001169c <strrchr@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2676]!	; 0xa74

000116a8 <nl_langinfo@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2668]!	; 0xa6c

000116b4 <clearerr_unlocked@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2660]!	; 0xa64

000116c0 <bindtextdomain@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2652]!	; 0xa5c

000116cc <aligned_alloc@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2644]!	; 0xa54

000116d8 <__libc_current_sigrtmin@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #106496	; 0x1a000
   116e0:	ldr	pc, [ip, #2636]!	; 0xa4c

000116e4 <strncmp@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #106496	; 0x1a000
   116ec:	ldr	pc, [ip, #2628]!	; 0xa44

000116f0 <abort@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #106496	; 0x1a000
   116f8:	ldr	pc, [ip, #2620]!	; 0xa3c

000116fc <close@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #106496	; 0x1a000
   11704:	ldr	pc, [ip, #2612]!	; 0xa34

00011708 <strspn@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #106496	; 0x1a000
   11710:	ldr	pc, [ip, #2604]!	; 0xa2c

00011714 <__assert_fail@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #106496	; 0x1a000
   1171c:	ldr	pc, [ip, #2596]!	; 0xa24

Disassembly of section .text:

00011720 <.text>:
   11720:	mov	fp, #0
   11724:	mov	lr, #0
   11728:	pop	{r1}		; (ldr r1, [sp], #4)
   1172c:	mov	r2, sp
   11730:	push	{r2}		; (str r2, [sp, #-4]!)
   11734:	push	{r0}		; (str r0, [sp, #-4]!)
   11738:	ldr	ip, [pc, #16]	; 11750 <__assert_fail@plt+0x3c>
   1173c:	push	{ip}		; (str ip, [sp, #-4]!)
   11740:	ldr	r0, [pc, #12]	; 11754 <__assert_fail@plt+0x40>
   11744:	ldr	r3, [pc, #12]	; 11758 <__assert_fail@plt+0x44>
   11748:	bl	11540 <__libc_start_main@plt>
   1174c:	bl	116f0 <abort@plt>
   11750:	andeq	r9, r1, ip, lsr #30
   11754:	andeq	r1, r1, ip, lsl #22
   11758:	andeq	r9, r1, ip, asr #29
   1175c:	ldr	r3, [pc, #20]	; 11778 <__assert_fail@plt+0x64>
   11760:	ldr	r2, [pc, #20]	; 1177c <__assert_fail@plt+0x68>
   11764:	add	r3, pc, r3
   11768:	ldr	r2, [r3, r2]
   1176c:	cmp	r2, #0
   11770:	bxeq	lr
   11774:	b	11558 <__gmon_start__@plt>
   11778:	muleq	r1, r4, r8
   1177c:	andeq	r0, r0, r4, asr #2
   11780:	ldr	r0, [pc, #24]	; 117a0 <__assert_fail@plt+0x8c>
   11784:	ldr	r3, [pc, #24]	; 117a4 <__assert_fail@plt+0x90>
   11788:	cmp	r3, r0
   1178c:	bxeq	lr
   11790:	ldr	r3, [pc, #16]	; 117a8 <__assert_fail@plt+0x94>
   11794:	cmp	r3, #0
   11798:	bxeq	lr
   1179c:	bx	r3
   117a0:	andeq	ip, r2, ip, asr #6
   117a4:	andeq	ip, r2, ip, asr #6
   117a8:	andeq	r0, r0, r0
   117ac:	ldr	r0, [pc, #36]	; 117d8 <__assert_fail@plt+0xc4>
   117b0:	ldr	r1, [pc, #36]	; 117dc <__assert_fail@plt+0xc8>
   117b4:	sub	r1, r1, r0
   117b8:	asr	r1, r1, #2
   117bc:	add	r1, r1, r1, lsr #31
   117c0:	asrs	r1, r1, #1
   117c4:	bxeq	lr
   117c8:	ldr	r3, [pc, #16]	; 117e0 <__assert_fail@plt+0xcc>
   117cc:	cmp	r3, #0
   117d0:	bxeq	lr
   117d4:	bx	r3
   117d8:	andeq	ip, r2, ip, asr #6
   117dc:	andeq	ip, r2, ip, asr #6
   117e0:	andeq	r0, r0, r0
   117e4:	push	{r4, lr}
   117e8:	ldr	r4, [pc, #24]	; 11808 <__assert_fail@plt+0xf4>
   117ec:	ldrb	r3, [r4]
   117f0:	cmp	r3, #0
   117f4:	popne	{r4, pc}
   117f8:	bl	11780 <__assert_fail@plt+0x6c>
   117fc:	mov	r3, #1
   11800:	strb	r3, [r4]
   11804:	pop	{r4, pc}
   11808:	andeq	ip, r2, ip, ror #6
   1180c:	b	117ac <__assert_fail@plt+0x98>
   11810:	push	{fp, lr}
   11814:	mov	fp, sp
   11818:	sub	sp, sp, #56	; 0x38
   1181c:	mov	r4, r0
   11820:	cmp	r0, #0
   11824:	bne	11ac8 <__assert_fail@plt+0x3b4>
   11828:	movw	r1, #40827	; 0x9f7b
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	movt	r1, #1
   11838:	bl	11450 <dcgettext@plt>
   1183c:	mov	r1, r0
   11840:	movw	r0, #50468	; 0xc524
   11844:	movt	r0, #2
   11848:	ldr	r2, [r0]
   1184c:	mov	r0, #1
   11850:	bl	11600 <__printf_chk@plt>
   11854:	movw	r1, #40866	; 0x9fa2
   11858:	mov	r0, #0
   1185c:	mov	r2, #5
   11860:	movt	r1, #1
   11864:	bl	11450 <dcgettext@plt>
   11868:	movw	r7, #50020	; 0xc364
   1186c:	movt	r7, #2
   11870:	ldr	r1, [r7]
   11874:	bl	11390 <fputs_unlocked@plt>
   11878:	movw	r1, #43383	; 0xa977
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	movt	r1, #1
   11888:	bl	11450 <dcgettext@plt>
   1188c:	ldr	r1, [r7]
   11890:	bl	11390 <fputs_unlocked@plt>
   11894:	movw	r1, #43439	; 0xa9af
   11898:	mov	r0, #0
   1189c:	mov	r2, #5
   118a0:	movt	r1, #1
   118a4:	bl	11450 <dcgettext@plt>
   118a8:	ldr	r1, [r7]
   118ac:	bl	11390 <fputs_unlocked@plt>
   118b0:	ldr	r5, [r7]
   118b4:	movw	r1, #40972	; 0xa00c
   118b8:	mov	r0, #0
   118bc:	mov	r2, #5
   118c0:	movt	r1, #1
   118c4:	bl	11450 <dcgettext@plt>
   118c8:	mov	r2, r0
   118cc:	mov	r0, r5
   118d0:	mov	r1, #1
   118d4:	mov	r3, #2
   118d8:	bl	11624 <__fprintf_chk@plt>
   118dc:	movw	r1, #42062	; 0xa44e
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11450 <dcgettext@plt>
   118f0:	ldr	r1, [r7]
   118f4:	bl	11390 <fputs_unlocked@plt>
   118f8:	movw	r1, #42175	; 0xa4bf
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	11450 <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	11390 <fputs_unlocked@plt>
   11914:	movw	r1, #42220	; 0xa4ec
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	11450 <dcgettext@plt>
   11928:	ldr	r1, [r7]
   1192c:	bl	11390 <fputs_unlocked@plt>
   11930:	movw	r1, #43514	; 0xa9fa
   11934:	mov	r0, #0
   11938:	mov	r2, #5
   1193c:	movt	r1, #1
   11940:	bl	11450 <dcgettext@plt>
   11944:	ldr	r1, [r7]
   11948:	bl	11390 <fputs_unlocked@plt>
   1194c:	movw	r1, #42274	; 0xa522
   11950:	mov	r0, #0
   11954:	mov	r2, #5
   11958:	movt	r1, #1
   1195c:	bl	11450 <dcgettext@plt>
   11960:	ldr	r1, [r7]
   11964:	bl	11390 <fputs_unlocked@plt>
   11968:	movw	r0, #45344	; 0xb120
   1196c:	mov	r2, #48	; 0x30
   11970:	mov	r6, sp
   11974:	movw	r5, #42614	; 0xa676
   11978:	movt	r0, #1
   1197c:	movt	r5, #1
   11980:	add	r1, r0, #32
   11984:	add	r3, r0, #16
   11988:	vld1.64	{d18-d19}, [r0], r2
   1198c:	vld1.64	{d16-d17}, [r1]
   11990:	vld1.64	{d20-d21}, [r3]
   11994:	add	r1, r6, #32
   11998:	vldr	d22, [r0]
   1199c:	add	r0, r6, #16
   119a0:	vst1.64	{d16-d17}, [r1]
   119a4:	movw	r1, #43726	; 0xaace
   119a8:	vst1.64	{d20-d21}, [r0]
   119ac:	mov	r0, r6
   119b0:	vst1.64	{d18-d19}, [r0], r2
   119b4:	movt	r1, #1
   119b8:	vstr	d22, [r0]
   119bc:	mov	r0, r5
   119c0:	bl	113a8 <strcmp@plt>
   119c4:	cmp	r0, #0
   119c8:	ldrne	r1, [r6, #8]!
   119cc:	cmpne	r1, #0
   119d0:	bne	119bc <__assert_fail@plt+0x2a8>
   119d4:	ldr	r6, [r6, #4]
   119d8:	movw	r1, #43821	; 0xab2d
   119dc:	mov	r0, #0
   119e0:	mov	r2, #5
   119e4:	movt	r1, #1
   119e8:	bl	11450 <dcgettext@plt>
   119ec:	movw	r2, #43131	; 0xa87b
   119f0:	movw	r3, #43844	; 0xab44
   119f4:	mov	r1, r0
   119f8:	mov	r0, #1
   119fc:	movt	r2, #1
   11a00:	movt	r3, #1
   11a04:	bl	11600 <__printf_chk@plt>
   11a08:	cmp	r6, #0
   11a0c:	mov	r0, #5
   11a10:	mov	r1, #0
   11a14:	moveq	r6, r5
   11a18:	bl	1166c <setlocale@plt>
   11a1c:	cmp	r0, #0
   11a20:	beq	11a58 <__assert_fail@plt+0x344>
   11a24:	movw	r1, #43884	; 0xab6c
   11a28:	mov	r2, #3
   11a2c:	movt	r1, #1
   11a30:	bl	116e4 <strncmp@plt>
   11a34:	cmp	r0, #0
   11a38:	beq	11a58 <__assert_fail@plt+0x344>
   11a3c:	movw	r1, #43888	; 0xab70
   11a40:	mov	r0, #0
   11a44:	mov	r2, #5
   11a48:	movt	r1, #1
   11a4c:	bl	11450 <dcgettext@plt>
   11a50:	ldr	r1, [r7]
   11a54:	bl	11390 <fputs_unlocked@plt>
   11a58:	movw	r1, #43959	; 0xabb7
   11a5c:	mov	r0, #0
   11a60:	mov	r2, #5
   11a64:	movt	r1, #1
   11a68:	bl	11450 <dcgettext@plt>
   11a6c:	movw	r2, #43844	; 0xab44
   11a70:	mov	r1, r0
   11a74:	mov	r0, #1
   11a78:	mov	r3, r5
   11a7c:	movt	r2, #1
   11a80:	bl	11600 <__printf_chk@plt>
   11a84:	movw	r1, #43986	; 0xabd2
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	11450 <dcgettext@plt>
   11a98:	movw	r3, #42061	; 0xa44d
   11a9c:	mov	r1, r0
   11aa0:	movw	r0, #43754	; 0xaaea
   11aa4:	cmp	r6, r5
   11aa8:	mov	r2, r6
   11aac:	movt	r0, #1
   11ab0:	movt	r3, #1
   11ab4:	moveq	r3, r0
   11ab8:	mov	r0, #1
   11abc:	bl	11600 <__printf_chk@plt>
   11ac0:	mov	r0, r4
   11ac4:	bl	1157c <exit@plt>
   11ac8:	movw	r0, #50016	; 0xc360
   11acc:	movw	r1, #40788	; 0x9f54
   11ad0:	mov	r2, #5
   11ad4:	movt	r0, #2
   11ad8:	movt	r1, #1
   11adc:	ldr	r5, [r0]
   11ae0:	mov	r0, #0
   11ae4:	bl	11450 <dcgettext@plt>
   11ae8:	mov	r2, r0
   11aec:	movw	r0, #50468	; 0xc524
   11af0:	mov	r1, #1
   11af4:	movt	r0, #2
   11af8:	ldr	r3, [r0]
   11afc:	mov	r0, r5
   11b00:	bl	11624 <__fprintf_chk@plt>
   11b04:	mov	r0, r4
   11b08:	bl	1157c <exit@plt>
   11b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b10:	add	fp, sp, #28
   11b14:	sub	sp, sp, #252	; 0xfc
   11b18:	mov	r4, r1
   11b1c:	str	r0, [sp, #88]	; 0x58
   11b20:	bl	115c4 <getpagesize@plt>
   11b24:	str	r0, [sp, #76]	; 0x4c
   11b28:	ldr	r0, [r4]
   11b2c:	str	r4, [sp, #84]	; 0x54
   11b30:	bl	15510 <__assert_fail@plt+0x3dfc>
   11b34:	movw	r1, #42061	; 0xa44d
   11b38:	mov	r0, #6
   11b3c:	movt	r1, #1
   11b40:	bl	1166c <setlocale@plt>
   11b44:	movw	r5, #43135	; 0xa87f
   11b48:	movw	r1, #42620	; 0xa67c
   11b4c:	movt	r5, #1
   11b50:	movt	r1, #1
   11b54:	mov	r0, r5
   11b58:	bl	116c0 <bindtextdomain@plt>
   11b5c:	mov	r0, r5
   11b60:	bl	11474 <textdomain@plt>
   11b64:	movw	r0, #20692	; 0x50d4
   11b68:	movt	r0, #1
   11b6c:	bl	19f30 <__assert_fail@plt+0x881c>
   11b70:	movw	r2, #50392	; 0xc4d8
   11b74:	movw	r0, #45481	; 0xb1a9
   11b78:	movw	r1, #43060	; 0xa834
   11b7c:	mov	r8, #0
   11b80:	mov	sl, #0
   11b84:	movt	r2, #2
   11b88:	movt	r0, #1
   11b8c:	movt	r1, #1
   11b90:	stmib	r2, {r0, r1}
   11b94:	mov	r0, #0
   11b98:	str	r0, [sp, #100]	; 0x64
   11b9c:	mov	r0, #0
   11ba0:	str	r0, [sp, #72]	; 0x48
   11ba4:	mov	r0, #0
   11ba8:	str	r0, [sp, #68]	; 0x44
   11bac:	mov	r0, #0
   11bb0:	str	r0, [sp, #80]	; 0x50
   11bb4:	mov	r0, #0
   11bb8:	b	11c30 <__assert_fail@plt+0x51c>
   11bbc:	movw	r0, #50024	; 0xc368
   11bc0:	movw	r1, #42775	; 0xa717
   11bc4:	mov	r2, #5
   11bc8:	movt	r0, #2
   11bcc:	movt	r1, #1
   11bd0:	ldr	r5, [r0]
   11bd4:	mov	r0, #0
   11bd8:	bl	11450 <dcgettext@plt>
   11bdc:	movw	r2, #45056	; 0xb000
   11be0:	mvn	r1, #0
   11be4:	str	r0, [sp, #12]
   11be8:	mov	r0, r5
   11bec:	mov	r3, #0
   11bf0:	movt	r2, #1
   11bf4:	str	r1, [sp]
   11bf8:	mov	r1, #0
   11bfc:	str	r2, [sp, #8]
   11c00:	mov	r2, #1
   11c04:	str	r1, [sp, #4]
   11c08:	str	r1, [sp, #16]
   11c0c:	bl	18b78 <__assert_fail@plt+0x7464>
   11c10:	str	r0, [sp, #100]	; 0x64
   11c14:	mov	r8, r1
   11c18:	mov	r0, #2
   11c1c:	b	11c30 <__assert_fail@plt+0x51c>
   11c20:	ldr	r0, [sp, #92]	; 0x5c
   11c24:	cmp	r0, #0
   11c28:	beq	11bbc <__assert_fail@plt+0x4a8>
   11c2c:	b	13d84 <__assert_fail@plt+0x2670>
   11c30:	str	r0, [sp, #92]	; 0x5c
   11c34:	b	11c48 <__assert_fail@plt+0x534>
   11c38:	sub	r0, r7, #48	; 0x30
   11c3c:	mov	sl, r4
   11c40:	str	r0, [sp, #100]	; 0x64
   11c44:	asr	r8, r0, #31
   11c48:	movw	r0, #50008	; 0xc358
   11c4c:	ldr	r1, [sp, #84]	; 0x54
   11c50:	movw	r2, #42644	; 0xa694
   11c54:	movw	r3, #45072	; 0xb010
   11c58:	movt	r0, #2
   11c5c:	movt	r2, #1
   11c60:	movt	r3, #1
   11c64:	ldr	r4, [r0]
   11c68:	mov	r0, #0
   11c6c:	str	r0, [sp]
   11c70:	ldr	r0, [sp, #88]	; 0x58
   11c74:	bl	11564 <getopt_long@plt>
   11c78:	cmp	r4, #0
   11c7c:	mov	r7, r0
   11c80:	add	r0, r0, #3
   11c84:	movw	r1, #262	; 0x106
   11c88:	movweq	r4, #1
   11c8c:	cmp	r0, r1
   11c90:	bhi	13ca8 <__assert_fail@plt+0x2594>
   11c94:	add	r1, pc, #0
   11c98:	ldr	pc, [r1, r0, lsl #2]
   11c9c:			; <UNDEFINED> instruction: 0x00013cb0
   11ca0:	andeq	r3, r1, r4, lsl #26
   11ca4:	andeq	r2, r1, r8, asr #12
   11ca8:	andeq	r3, r1, r8, lsr #25
   11cac:	andeq	r3, r1, r8, lsr #25
   11cb0:	andeq	r3, r1, r8, lsr #25
   11cb4:	andeq	r3, r1, r8, lsr #25
   11cb8:	andeq	r3, r1, r8, lsr #25
   11cbc:	andeq	r3, r1, r8, lsr #25
   11cc0:	andeq	r3, r1, r8, lsr #25
   11cc4:	andeq	r3, r1, r8, lsr #25
   11cc8:	andeq	r3, r1, r8, lsr #25
   11ccc:	andeq	r3, r1, r8, lsr #25
   11cd0:	andeq	r3, r1, r8, lsr #25
   11cd4:	andeq	r3, r1, r8, lsr #25
   11cd8:	andeq	r3, r1, r8, lsr #25
   11cdc:	andeq	r3, r1, r8, lsr #25
   11ce0:	andeq	r3, r1, r8, lsr #25
   11ce4:	andeq	r3, r1, r8, lsr #25
   11ce8:	andeq	r3, r1, r8, lsr #25
   11cec:	andeq	r3, r1, r8, lsr #25
   11cf0:	andeq	r3, r1, r8, lsr #25
   11cf4:	andeq	r3, r1, r8, lsr #25
   11cf8:	andeq	r3, r1, r8, lsr #25
   11cfc:	andeq	r3, r1, r8, lsr #25
   11d00:	andeq	r3, r1, r8, lsr #25
   11d04:	andeq	r3, r1, r8, lsr #25
   11d08:	andeq	r3, r1, r8, lsr #25
   11d0c:	andeq	r3, r1, r8, lsr #25
   11d10:	andeq	r3, r1, r8, lsr #25
   11d14:	andeq	r3, r1, r8, lsr #25
   11d18:	andeq	r3, r1, r8, lsr #25
   11d1c:	andeq	r3, r1, r8, lsr #25
   11d20:	andeq	r3, r1, r8, lsr #25
   11d24:	andeq	r3, r1, r8, lsr #25
   11d28:	andeq	r3, r1, r8, lsr #25
   11d2c:	andeq	r3, r1, r8, lsr #25
   11d30:	andeq	r3, r1, r8, lsr #25
   11d34:	andeq	r3, r1, r8, lsr #25
   11d38:	andeq	r3, r1, r8, lsr #25
   11d3c:	andeq	r3, r1, r8, lsr #25
   11d40:	andeq	r3, r1, r8, lsr #25
   11d44:	andeq	r3, r1, r8, lsr #25
   11d48:	andeq	r3, r1, r8, lsr #25
   11d4c:	andeq	r3, r1, r8, lsr #25
   11d50:	andeq	r3, r1, r8, lsr #25
   11d54:	andeq	r3, r1, r8, lsr #25
   11d58:	andeq	r3, r1, r8, lsr #25
   11d5c:	andeq	r3, r1, r8, lsr #25
   11d60:	andeq	r3, r1, r8, lsr #25
   11d64:	andeq	r3, r1, r8, lsr #25
   11d68:	strheq	r2, [r1], -r8
   11d6c:	strheq	r2, [r1], -r8
   11d70:	strheq	r2, [r1], -r8
   11d74:	strheq	r2, [r1], -r8
   11d78:	strheq	r2, [r1], -r8
   11d7c:	strheq	r2, [r1], -r8
   11d80:	strheq	r2, [r1], -r8
   11d84:	strheq	r2, [r1], -r8
   11d88:	strheq	r2, [r1], -r8
   11d8c:	strheq	r2, [r1], -r8
   11d90:	andeq	r3, r1, r8, lsr #25
   11d94:	andeq	r3, r1, r8, lsr #25
   11d98:	andeq	r3, r1, r8, lsr #25
   11d9c:	andeq	r3, r1, r8, lsr #25
   11da0:	andeq	r3, r1, r8, lsr #25
   11da4:	andeq	r3, r1, r8, lsr #25
   11da8:	andeq	r3, r1, r8, lsr #25
   11dac:	andeq	r3, r1, r8, lsr #25
   11db0:	andeq	r3, r1, r8, lsr #25
   11db4:	andeq	r1, r1, r0, lsr #24
   11db8:	andeq	r3, r1, r8, lsr #25
   11dbc:	andeq	r3, r1, r8, lsr #25
   11dc0:	andeq	r3, r1, r8, lsr #25
   11dc4:	andeq	r3, r1, r8, lsr #25
   11dc8:	andeq	r3, r1, r8, lsr #25
   11dcc:	andeq	r3, r1, r8, lsr #25
   11dd0:	andeq	r3, r1, r8, lsr #25
   11dd4:	andeq	r3, r1, r8, lsr #25
   11dd8:	andeq	r3, r1, r8, lsr #25
   11ddc:	andeq	r3, r1, r8, lsr #25
   11de0:	andeq	r3, r1, r8, lsr #25
   11de4:	andeq	r3, r1, r8, lsr #25
   11de8:	andeq	r3, r1, r8, lsr #25
   11dec:	andeq	r3, r1, r8, lsr #25
   11df0:	andeq	r3, r1, r8, lsr #25
   11df4:	andeq	r3, r1, r8, lsr #25
   11df8:	andeq	r3, r1, r8, lsr #25
   11dfc:	andeq	r3, r1, r8, lsr #25
   11e00:	andeq	r3, r1, r8, lsr #25
   11e04:	andeq	r3, r1, r8, lsr #25
   11e08:	andeq	r3, r1, r8, lsr #25
   11e0c:	andeq	r3, r1, r8, lsr #25
   11e10:	andeq	r3, r1, r8, lsr #25
   11e14:	andeq	r3, r1, r8, lsr #25
   11e18:	andeq	r3, r1, r8, lsr #25
   11e1c:	andeq	r3, r1, r8, lsr #25
   11e20:	andeq	r3, r1, r8, lsr #25
   11e24:	andeq	r3, r1, r8, lsr #25
   11e28:	andeq	r3, r1, r8, lsr #25
   11e2c:	andeq	r2, r1, r0, lsl r2
   11e30:	andeq	r2, r1, r0, lsr #5
   11e34:	andeq	r3, r1, r8, lsr #25
   11e38:	andeq	r2, r1, ip, asr r1
   11e3c:	strdeq	r2, [r1], -ip
   11e40:	andeq	r3, r1, r8, lsr #25
   11e44:	andeq	r3, r1, r8, lsr #25
   11e48:	andeq	r3, r1, r8, lsr #25
   11e4c:	andeq	r3, r1, r8, lsr #25
   11e50:	andeq	r3, r1, r8, lsr #25
   11e54:	andeq	r3, r1, r8, lsr #25
   11e58:	ldrdeq	r2, [r1], -r8
   11e5c:	andeq	r3, r1, r8, lsr #25
   11e60:	andeq	r2, r1, r4, lsr #6
   11e64:	andeq	r3, r1, r8, lsr #25
   11e68:	andeq	r3, r1, r8, lsr #25
   11e6c:	andeq	r3, r1, r8, lsr #25
   11e70:	andeq	r3, r1, r8, lsr #25
   11e74:	andeq	r3, r1, r8, lsr #25
   11e78:	ldrdeq	r2, [r1], -ip
   11e7c:	strdeq	r2, [r1], -ip
   11e80:	andeq	r3, r1, r8, lsr #25
   11e84:	andeq	r3, r1, r8, lsr #25
   11e88:	andeq	r2, r1, ip, asr r1
   11e8c:	andeq	r3, r1, r8, lsr #25
   11e90:	andeq	r3, r1, r8, lsr #25
   11e94:	andeq	r3, r1, r8, lsr #25
   11e98:	andeq	r3, r1, r8, lsr #25
   11e9c:	andeq	r3, r1, r8, lsr #25
   11ea0:	andeq	r3, r1, r8, lsr #25
   11ea4:	andeq	r3, r1, r8, lsr #25
   11ea8:	andeq	r3, r1, r8, lsr #25
   11eac:	andeq	r3, r1, r8, lsr #25
   11eb0:	andeq	r3, r1, r8, lsr #25
   11eb4:	andeq	r3, r1, r8, lsr #25
   11eb8:	andeq	r3, r1, r8, lsr #25
   11ebc:	andeq	r3, r1, r8, lsr #25
   11ec0:	andeq	r3, r1, r8, lsr #25
   11ec4:	andeq	r3, r1, r8, lsr #25
   11ec8:	andeq	r3, r1, r8, lsr #25
   11ecc:	andeq	r3, r1, r8, lsr #25
   11ed0:	andeq	r3, r1, r8, lsr #25
   11ed4:	andeq	r3, r1, r8, lsr #25
   11ed8:	andeq	r3, r1, r8, lsr #25
   11edc:	andeq	r3, r1, r8, lsr #25
   11ee0:	andeq	r3, r1, r8, lsr #25
   11ee4:	andeq	r3, r1, r8, lsr #25
   11ee8:	andeq	r3, r1, r8, lsr #25
   11eec:	andeq	r3, r1, r8, lsr #25
   11ef0:	andeq	r3, r1, r8, lsr #25
   11ef4:	andeq	r3, r1, r8, lsr #25
   11ef8:	andeq	r3, r1, r8, lsr #25
   11efc:	andeq	r3, r1, r8, lsr #25
   11f00:	andeq	r3, r1, r8, lsr #25
   11f04:	andeq	r3, r1, r8, lsr #25
   11f08:	andeq	r3, r1, r8, lsr #25
   11f0c:	andeq	r3, r1, r8, lsr #25
   11f10:	andeq	r3, r1, r8, lsr #25
   11f14:	andeq	r3, r1, r8, lsr #25
   11f18:	andeq	r3, r1, r8, lsr #25
   11f1c:	andeq	r3, r1, r8, lsr #25
   11f20:	andeq	r3, r1, r8, lsr #25
   11f24:	andeq	r3, r1, r8, lsr #25
   11f28:	andeq	r3, r1, r8, lsr #25
   11f2c:	andeq	r3, r1, r8, lsr #25
   11f30:	andeq	r3, r1, r8, lsr #25
   11f34:	andeq	r3, r1, r8, lsr #25
   11f38:	andeq	r3, r1, r8, lsr #25
   11f3c:	andeq	r3, r1, r8, lsr #25
   11f40:	andeq	r3, r1, r8, lsr #25
   11f44:	andeq	r3, r1, r8, lsr #25
   11f48:	andeq	r3, r1, r8, lsr #25
   11f4c:	andeq	r3, r1, r8, lsr #25
   11f50:	andeq	r3, r1, r8, lsr #25
   11f54:	andeq	r3, r1, r8, lsr #25
   11f58:	andeq	r3, r1, r8, lsr #25
   11f5c:	andeq	r3, r1, r8, lsr #25
   11f60:	andeq	r3, r1, r8, lsr #25
   11f64:	andeq	r3, r1, r8, lsr #25
   11f68:	andeq	r3, r1, r8, lsr #25
   11f6c:	andeq	r3, r1, r8, lsr #25
   11f70:	andeq	r3, r1, r8, lsr #25
   11f74:	andeq	r3, r1, r8, lsr #25
   11f78:	andeq	r3, r1, r8, lsr #25
   11f7c:	andeq	r3, r1, r8, lsr #25
   11f80:	andeq	r3, r1, r8, lsr #25
   11f84:	andeq	r3, r1, r8, lsr #25
   11f88:	andeq	r3, r1, r8, lsr #25
   11f8c:	andeq	r3, r1, r8, lsr #25
   11f90:	andeq	r3, r1, r8, lsr #25
   11f94:	andeq	r3, r1, r8, lsr #25
   11f98:	andeq	r3, r1, r8, lsr #25
   11f9c:	andeq	r3, r1, r8, lsr #25
   11fa0:	andeq	r3, r1, r8, lsr #25
   11fa4:	andeq	r3, r1, r8, lsr #25
   11fa8:	andeq	r3, r1, r8, lsr #25
   11fac:	andeq	r3, r1, r8, lsr #25
   11fb0:	andeq	r3, r1, r8, lsr #25
   11fb4:	andeq	r3, r1, r8, lsr #25
   11fb8:	andeq	r3, r1, r8, lsr #25
   11fbc:	andeq	r3, r1, r8, lsr #25
   11fc0:	andeq	r3, r1, r8, lsr #25
   11fc4:	andeq	r3, r1, r8, lsr #25
   11fc8:	andeq	r3, r1, r8, lsr #25
   11fcc:	andeq	r3, r1, r8, lsr #25
   11fd0:	andeq	r3, r1, r8, lsr #25
   11fd4:	andeq	r3, r1, r8, lsr #25
   11fd8:	andeq	r3, r1, r8, lsr #25
   11fdc:	andeq	r3, r1, r8, lsr #25
   11fe0:	andeq	r3, r1, r8, lsr #25
   11fe4:	andeq	r3, r1, r8, lsr #25
   11fe8:	andeq	r3, r1, r8, lsr #25
   11fec:	andeq	r3, r1, r8, lsr #25
   11ff0:	andeq	r3, r1, r8, lsr #25
   11ff4:	andeq	r3, r1, r8, lsr #25
   11ff8:	andeq	r3, r1, r8, lsr #25
   11ffc:	andeq	r3, r1, r8, lsr #25
   12000:	andeq	r3, r1, r8, lsr #25
   12004:	andeq	r3, r1, r8, lsr #25
   12008:	andeq	r3, r1, r8, lsr #25
   1200c:	andeq	r3, r1, r8, lsr #25
   12010:	andeq	r3, r1, r8, lsr #25
   12014:	andeq	r3, r1, r8, lsr #25
   12018:	andeq	r3, r1, r8, lsr #25
   1201c:	andeq	r3, r1, r8, lsr #25
   12020:	andeq	r3, r1, r8, lsr #25
   12024:	andeq	r3, r1, r8, lsr #25
   12028:	andeq	r3, r1, r8, lsr #25
   1202c:	andeq	r3, r1, r8, lsr #25
   12030:	andeq	r3, r1, r8, lsr #25
   12034:	andeq	r3, r1, r8, lsr #25
   12038:	andeq	r3, r1, r8, lsr #25
   1203c:	andeq	r3, r1, r8, lsr #25
   12040:	andeq	r3, r1, r8, lsr #25
   12044:	andeq	r3, r1, r8, lsr #25
   12048:	andeq	r3, r1, r8, lsr #25
   1204c:	andeq	r3, r1, r8, lsr #25
   12050:	andeq	r3, r1, r8, lsr #25
   12054:	andeq	r3, r1, r8, lsr #25
   12058:	andeq	r3, r1, r8, lsr #25
   1205c:	andeq	r3, r1, r8, lsr #25
   12060:	andeq	r3, r1, r8, lsr #25
   12064:	andeq	r3, r1, r8, lsr #25
   12068:	andeq	r3, r1, r8, lsr #25
   1206c:	andeq	r3, r1, r8, lsr #25
   12070:	andeq	r3, r1, r8, lsr #25
   12074:	andeq	r3, r1, r8, lsr #25
   12078:	andeq	r3, r1, r8, lsr #25
   1207c:	andeq	r3, r1, r8, lsr #25
   12080:	andeq	r3, r1, r8, lsr #25
   12084:	andeq	r3, r1, r8, lsr #25
   12088:	andeq	r3, r1, r8, lsr #25
   1208c:	andeq	r3, r1, r8, lsr #25
   12090:	andeq	r3, r1, r8, lsr #25
   12094:	andeq	r3, r1, r8, lsr #25
   12098:	andeq	r3, r1, r8, lsr #25
   1209c:	andeq	r3, r1, r8, lsr #25
   120a0:	andeq	r3, r1, r8, lsr #25
   120a4:	andeq	r3, r1, r8, lsr #25
   120a8:	andeq	r2, r1, r0, lsl r3
   120ac:	andeq	r2, r1, r0, asr #7
   120b0:	andeq	r2, r1, r4, asr #8
   120b4:	andeq	r2, r1, r4, ror r2
   120b8:	ldr	r1, [sp, #92]	; 0x5c
   120bc:	cmp	r1, #0
   120c0:	beq	120ec <__assert_fail@plt+0x9d8>
   120c4:	ldr	r5, [sp, #100]	; 0x64
   120c8:	orr	r0, r1, #4
   120cc:	mov	r9, r8
   120d0:	cmp	r0, #4
   120d4:	bne	13d84 <__assert_fail@plt+0x2670>
   120d8:	cmp	sl, #0
   120dc:	str	r1, [sp, #92]	; 0x5c
   120e0:	cmpne	sl, r4
   120e4:	beq	12108 <__assert_fail@plt+0x9f4>
   120e8:	b	11c38 <__assert_fail@plt+0x524>
   120ec:	mov	r5, #0
   120f0:	mov	r1, #4
   120f4:	mov	r9, #0
   120f8:	cmp	sl, #0
   120fc:	str	r1, [sp, #92]	; 0x5c
   12100:	cmpne	sl, r4
   12104:	bne	11c38 <__assert_fail@plt+0x524>
   12108:	movw	r0, #39321	; 0x9999
   1210c:	movt	r0, #39321	; 0x9999
   12110:	subs	r0, r0, r5
   12114:	movw	r0, #39321	; 0x9999
   12118:	movt	r0, #6553	; 0x1999
   1211c:	sbcs	r0, r0, r9
   12120:	bcc	13d0c <__assert_fail@plt+0x25f8>
   12124:	mov	r0, #10
   12128:	add	r2, r9, r9, lsl #2
   1212c:	mov	sl, r4
   12130:	umull	r0, r1, r5, r0
   12134:	add	r1, r1, r2, lsl #1
   12138:	sub	r2, r7, #48	; 0x30
   1213c:	adds	r0, r0, r2
   12140:	adc	r1, r1, r2, asr #31
   12144:	str	r0, [sp, #100]	; 0x64
   12148:	subs	r0, r0, r5
   1214c:	mov	r8, r1
   12150:	sbcs	r0, r1, r9
   12154:	bcs	11c48 <__assert_fail@plt+0x534>
   12158:	b	13d0c <__assert_fail@plt+0x25f8>
   1215c:	movw	r6, #43000	; 0xa7f8
   12160:	movw	r0, #42989	; 0xa7ed
   12164:	cmp	r7, #100	; 0x64
   12168:	movt	r6, #1
   1216c:	movt	r0, #1
   12170:	moveq	r6, r0
   12174:	movw	r0, #49488	; 0xc150
   12178:	movt	r0, #2
   1217c:	str	r6, [r0, #4]
   12180:	movw	r0, #50024	; 0xc368
   12184:	movt	r0, #2
   12188:	ldr	r5, [r0]
   1218c:	cmp	r5, #0
   12190:	beq	11c48 <__assert_fail@plt+0x534>
   12194:	mov	r0, r5
   12198:	bl	11588 <strlen@plt>
   1219c:	mov	r4, r0
   121a0:	mov	r0, r5
   121a4:	mov	r1, r6
   121a8:	bl	11708 <strspn@plt>
   121ac:	cmp	r4, r0
   121b0:	bne	13db0 <__assert_fail@plt+0x269c>
   121b4:	ldrb	r0, [r5]
   121b8:	cmp	r0, #48	; 0x30
   121bc:	bne	121ec <__assert_fail@plt+0xad8>
   121c0:	movw	r2, #50024	; 0xc368
   121c4:	add	r0, r5, #1
   121c8:	movt	r2, #2
   121cc:	ldrb	r1, [r0]
   121d0:	cmp	r1, #0
   121d4:	beq	121e8 <__assert_fail@plt+0xad4>
   121d8:	str	r0, [r2]
   121dc:	ldrb	r1, [r0], #1
   121e0:	cmp	r1, #48	; 0x30
   121e4:	beq	121cc <__assert_fail@plt+0xab8>
   121e8:	sub	r5, r0, #1
   121ec:	movw	r0, #50392	; 0xc4d8
   121f0:	movt	r0, #2
   121f4:	str	r5, [r0, #20]
   121f8:	b	11c48 <__assert_fail@plt+0x534>
   121fc:	movw	r0, #50392	; 0xc4d8
   12200:	mov	r1, #1
   12204:	movt	r0, #2
   12208:	strb	r1, [r0, #1]
   1220c:	b	11c48 <__assert_fail@plt+0x534>
   12210:	movw	r0, #50024	; 0xc368
   12214:	movw	r1, #42671	; 0xa6af
   12218:	mov	r2, #5
   1221c:	movt	r0, #2
   12220:	movt	r1, #1
   12224:	ldr	r5, [r0]
   12228:	mov	r0, #0
   1222c:	bl	11450 <dcgettext@plt>
   12230:	mvn	r1, #-1073741824	; 0xc0000000
   12234:	mov	r2, #0
   12238:	str	r0, [sp, #12]
   1223c:	mov	r0, r5
   12240:	mov	r3, #0
   12244:	str	r1, [sp]
   12248:	movw	r1, #42061	; 0xa44d
   1224c:	str	r2, [sp, #4]
   12250:	str	r2, [sp, #16]
   12254:	mov	r2, #0
   12258:	movt	r1, #1
   1225c:	str	r1, [sp, #8]
   12260:	bl	18b78 <__assert_fail@plt+0x7464>
   12264:	movw	r1, #50392	; 0xc4d8
   12268:	movt	r1, #2
   1226c:	str	r0, [r1, #12]
   12270:	b	11c48 <__assert_fail@plt+0x534>
   12274:	movw	r0, #50024	; 0xc368
   12278:	movt	r0, #2
   1227c:	ldr	r5, [r0]
   12280:	mov	r0, r5
   12284:	bl	1501c <__assert_fail@plt+0x3908>
   12288:	cmp	r0, r5
   1228c:	bne	13dcc <__assert_fail@plt+0x26b8>
   12290:	movw	r0, #50392	; 0xc4d8
   12294:	movt	r0, #2
   12298:	str	r5, [r0, #16]
   1229c:	b	11c48 <__assert_fail@plt+0x534>
   122a0:	ldr	r0, [sp, #92]	; 0x5c
   122a4:	cmp	r0, #0
   122a8:	bne	13d84 <__assert_fail@plt+0x2670>
   122ac:	movw	r0, #50024	; 0xc368
   122b0:	movw	r1, #42775	; 0xa717
   122b4:	mov	r2, #5
   122b8:	movt	r0, #2
   122bc:	movt	r1, #1
   122c0:	ldr	r5, [r0]
   122c4:	mov	r0, #0
   122c8:	bl	11450 <dcgettext@plt>
   122cc:	mvn	r1, #0
   122d0:	str	r0, [sp, #12]
   122d4:	mov	r0, #0
   122d8:	str	r1, [sp]
   122dc:	mvn	r1, #-2147483648	; 0x80000000
   122e0:	str	r0, [sp, #16]
   122e4:	mov	r0, #1
   122e8:	str	r1, [sp, #4]
   122ec:	movw	r1, #45056	; 0xb000
   122f0:	str	r0, [sp, #92]	; 0x5c
   122f4:	movt	r1, #1
   122f8:	b	125b8 <__assert_fail@plt+0xea4>
   122fc:	movw	r0, #50392	; 0xc4d8
   12300:	mov	r1, #1
   12304:	movt	r0, #2
   12308:	strb	r1, [r0]
   1230c:	b	11c48 <__assert_fail@plt+0x534>
   12310:	movw	r0, #50392	; 0xc4d8
   12314:	mov	r1, #1
   12318:	movt	r0, #2
   1231c:	strb	r1, [r0, #2]
   12320:	b	11c48 <__assert_fail@plt+0x534>
   12324:	ldr	r0, [sp, #92]	; 0x5c
   12328:	cmp	r0, #0
   1232c:	bne	13d84 <__assert_fail@plt+0x2670>
   12330:	bl	11570 <__ctype_b_loc@plt>
   12334:	movw	r4, #50024	; 0xc368
   12338:	ldr	r1, [r0]
   1233c:	movt	r4, #2
   12340:	ldr	r5, [r4]
   12344:	ldrb	r2, [r5]
   12348:	add	r1, r1, r2, lsl #1
   1234c:	ldrb	r1, [r1, #1]
   12350:	tst	r1, #32
   12354:	beq	1237c <__assert_fail@plt+0xc68>
   12358:	add	r1, r5, #1
   1235c:	str	r1, [r4]
   12360:	ldrb	r2, [r1], #1
   12364:	ldr	r3, [r0]
   12368:	add	r2, r3, r2, lsl #1
   1236c:	ldrb	r2, [r2, #1]
   12370:	tst	r2, #32
   12374:	bne	1235c <__assert_fail@plt+0xc48>
   12378:	sub	r5, r1, #1
   1237c:	movw	r1, #42823	; 0xa747
   12380:	mov	r0, r5
   12384:	mov	r2, #2
   12388:	movt	r1, #1
   1238c:	bl	116e4 <strncmp@plt>
   12390:	cmp	r0, #0
   12394:	beq	124a0 <__assert_fail@plt+0xd8c>
   12398:	movw	r1, #42826	; 0xa74a
   1239c:	mov	r0, r5
   123a0:	mov	r2, #2
   123a4:	movt	r1, #1
   123a8:	bl	116e4 <strncmp@plt>
   123ac:	mov	r1, #5
   123b0:	cmp	r0, #0
   123b4:	bne	124ac <__assert_fail@plt+0xd98>
   123b8:	mov	r1, #6
   123bc:	b	124a4 <__assert_fail@plt+0xd90>
   123c0:	movw	r0, #50024	; 0xc368
   123c4:	movw	r1, #50392	; 0xc4d8
   123c8:	movt	r0, #2
   123cc:	movt	r1, #2
   123d0:	ldr	r0, [r0]
   123d4:	str	r0, [r1, #24]
   123d8:	b	11c48 <__assert_fail@plt+0x534>
   123dc:	movw	r0, #50024	; 0xc368
   123e0:	movt	r0, #2
   123e4:	ldr	r0, [r0]
   123e8:	ldrb	r1, [r0]
   123ec:	cmp	r1, #0
   123f0:	beq	13e10 <__assert_fail@plt+0x26fc>
   123f4:	ldrb	r2, [r0, #1]
   123f8:	cmp	r2, #0
   123fc:	beq	12418 <__assert_fail@plt+0xd04>
   12400:	movw	r1, #42877	; 0xa77d
   12404:	movt	r1, #1
   12408:	bl	113a8 <strcmp@plt>
   1240c:	mov	r1, #0
   12410:	cmp	r0, #0
   12414:	bne	13e1c <__assert_fail@plt+0x2708>
   12418:	movw	r0, #49488	; 0xc150
   1241c:	movt	r0, #2
   12420:	ldr	r0, [r0]
   12424:	cmp	r0, #0
   12428:	blt	12434 <__assert_fail@plt+0xd20>
   1242c:	cmp	r0, r1
   12430:	bne	13e58 <__assert_fail@plt+0x2744>
   12434:	movw	r0, #49488	; 0xc150
   12438:	movt	r0, #2
   1243c:	str	r1, [r0]
   12440:	b	11c48 <__assert_fail@plt+0x534>
   12444:	movw	r0, #50024	; 0xc368
   12448:	movw	r1, #43109	; 0xa865
   1244c:	mov	r2, #5
   12450:	movt	r0, #2
   12454:	movt	r1, #1
   12458:	ldr	r4, [r0]
   1245c:	mov	r0, #0
   12460:	bl	11450 <dcgettext@plt>
   12464:	movw	r2, #45056	; 0xb000
   12468:	mvn	r1, #-2147483647	; 0x80000001
   1246c:	str	r0, [sp, #12]
   12470:	mov	r0, r4
   12474:	mov	r3, #0
   12478:	movt	r2, #1
   1247c:	str	r1, [sp]
   12480:	mov	r1, #0
   12484:	str	r2, [sp, #8]
   12488:	mov	r2, #1
   1248c:	str	r1, [sp, #4]
   12490:	str	r1, [sp, #16]
   12494:	bl	18b78 <__assert_fail@plt+0x7464>
   12498:	str	r0, [sp, #80]	; 0x50
   1249c:	b	11c48 <__assert_fail@plt+0x534>
   124a0:	mov	r1, #7
   124a4:	add	r5, r5, #2
   124a8:	str	r5, [r4]
   124ac:	str	r1, [sp, #92]	; 0x5c
   124b0:	mov	r0, r5
   124b4:	mov	r1, #47	; 0x2f
   124b8:	bl	115a0 <strchr@plt>
   124bc:	cmp	r0, #0
   124c0:	beq	12584 <__assert_fail@plt+0xe70>
   124c4:	movw	r1, #42829	; 0xa74d
   124c8:	mov	r7, r0
   124cc:	mov	r0, #0
   124d0:	mov	r2, #5
   124d4:	movt	r1, #1
   124d8:	bl	11450 <dcgettext@plt>
   124dc:	mvn	r1, #0
   124e0:	str	r0, [sp, #12]
   124e4:	mov	r0, #0
   124e8:	mov	r2, #1
   124ec:	mov	r3, #0
   124f0:	str	r1, [sp]
   124f4:	str	r1, [sp, #4]
   124f8:	movw	r1, #42061	; 0xa44d
   124fc:	str	r0, [sp, #16]
   12500:	add	r0, r7, #1
   12504:	movt	r1, #1
   12508:	str	r1, [sp, #8]
   1250c:	bl	18b78 <__assert_fail@plt+0x7464>
   12510:	str	r0, [sp, #100]	; 0x64
   12514:	ldr	r0, [r4]
   12518:	mov	r8, r1
   1251c:	cmp	r0, r7
   12520:	beq	11c48 <__assert_fail@plt+0x534>
   12524:	movw	r0, #50024	; 0xc368
   12528:	mov	r4, #0
   1252c:	movw	r1, #44179	; 0xac93
   12530:	mov	r2, #5
   12534:	strb	r4, [r7]
   12538:	movt	r0, #2
   1253c:	movt	r1, #1
   12540:	ldr	r5, [r0]
   12544:	mov	r0, #0
   12548:	bl	11450 <dcgettext@plt>
   1254c:	ldr	r1, [sp, #100]	; 0x64
   12550:	mov	r2, #1
   12554:	mov	r3, #0
   12558:	stm	sp, {r1, r8}
   1255c:	movw	r1, #42061	; 0xa44d
   12560:	str	r0, [sp, #12]
   12564:	mov	r0, r5
   12568:	str	r4, [sp, #16]
   1256c:	movt	r1, #1
   12570:	str	r1, [sp, #8]
   12574:	bl	18b78 <__assert_fail@plt+0x7464>
   12578:	str	r0, [sp, #72]	; 0x48
   1257c:	str	r1, [sp, #68]	; 0x44
   12580:	b	11c48 <__assert_fail@plt+0x534>
   12584:	movw	r1, #42829	; 0xa74d
   12588:	mov	r0, #0
   1258c:	mov	r2, #5
   12590:	movt	r1, #1
   12594:	bl	11450 <dcgettext@plt>
   12598:	mvn	r1, #0
   1259c:	str	r0, [sp, #12]
   125a0:	mov	r0, #0
   125a4:	str	r1, [sp]
   125a8:	str	r1, [sp, #4]
   125ac:	movw	r1, #42061	; 0xa44d
   125b0:	str	r0, [sp, #16]
   125b4:	movt	r1, #1
   125b8:	str	r1, [sp, #8]
   125bc:	mov	r0, r5
   125c0:	mov	r2, #1
   125c4:	mov	r3, #0
   125c8:	bl	18b78 <__assert_fail@plt+0x7464>
   125cc:	str	r0, [sp, #100]	; 0x64
   125d0:	mov	r8, r1
   125d4:	b	11c48 <__assert_fail@plt+0x534>
   125d8:	ldr	r0, [sp, #92]	; 0x5c
   125dc:	cmp	r0, #0
   125e0:	bne	13d84 <__assert_fail@plt+0x2670>
   125e4:	movw	r0, #50024	; 0xc368
   125e8:	movw	r1, #42799	; 0xa72f
   125ec:	mov	r2, #5
   125f0:	movt	r0, #2
   125f4:	movt	r1, #1
   125f8:	ldr	r5, [r0]
   125fc:	mov	r0, #0
   12600:	bl	11450 <dcgettext@plt>
   12604:	mvn	r1, #0
   12608:	str	r0, [sp, #12]
   1260c:	mov	r0, #0
   12610:	mov	r2, #1
   12614:	mov	r3, #0
   12618:	str	r1, [sp]
   1261c:	str	r1, [sp, #4]
   12620:	movw	r1, #42061	; 0xa44d
   12624:	str	r0, [sp, #16]
   12628:	mov	r0, r5
   1262c:	movt	r1, #1
   12630:	str	r1, [sp, #8]
   12634:	bl	18b78 <__assert_fail@plt+0x7464>
   12638:	str	r0, [sp, #100]	; 0x64
   1263c:	mov	r8, r1
   12640:	mov	r0, #3
   12644:	b	11c30 <__assert_fail@plt+0x51c>
   12648:	ldr	r0, [sp, #72]	; 0x48
   1264c:	ldr	r1, [sp, #68]	; 0x44
   12650:	orrs	r0, r0, r1
   12654:	str	r0, [sp, #52]	; 0x34
   12658:	beq	12670 <__assert_fail@plt+0xf5c>
   1265c:	movw	r0, #50392	; 0xc4d8
   12660:	movt	r0, #2
   12664:	ldr	r0, [r0, #24]
   12668:	cmp	r0, #0
   1266c:	bne	13e8c <__assert_fail@plt+0x2778>
   12670:	ldr	r6, [sp, #92]	; 0x5c
   12674:	ldr	sl, [sp, #80]	; 0x50
   12678:	cmp	r6, #0
   1267c:	beq	126d4 <__assert_fail@plt+0xfc0>
   12680:	ldr	r0, [sp, #100]	; 0x64
   12684:	orrs	r0, r0, r8
   12688:	bne	126e4 <__assert_fail@plt+0xfd0>
   1268c:	movw	r1, #42799	; 0xa72f
   12690:	mov	r0, #0
   12694:	mov	r2, #5
   12698:	movt	r1, #1
   1269c:	bl	11450 <dcgettext@plt>
   126a0:	mov	r4, r0
   126a4:	movw	r0, #42878	; 0xa77e
   126a8:	movt	r0, #1
   126ac:	bl	1748c <__assert_fail@plt+0x5d78>
   126b0:	movw	r2, #43237	; 0xa8e5
   126b4:	str	r0, [sp]
   126b8:	mov	r0, #0
   126bc:	mov	r1, #0
   126c0:	mov	r3, r4
   126c4:	movt	r2, #1
   126c8:	bl	11504 <error@plt>
   126cc:	mov	r0, #1
   126d0:	bl	11810 <__assert_fail@plt+0xfc>
   126d4:	mov	r0, #1000	; 0x3e8
   126d8:	mov	r8, #0
   126dc:	mov	r6, #3
   126e0:	str	r0, [sp, #100]	; 0x64
   126e4:	movw	r0, #49488	; 0xc150
   126e8:	movt	r0, #2
   126ec:	ldr	r0, [r0]
   126f0:	cmn	r0, #1
   126f4:	bgt	12708 <__assert_fail@plt+0xff4>
   126f8:	movw	r1, #49488	; 0xc150
   126fc:	mov	r0, #10
   12700:	movt	r1, #2
   12704:	str	r0, [r1]
   12708:	str	r8, [sp, #96]	; 0x60
   1270c:	movw	r8, #50392	; 0xc4d8
   12710:	sub	r9, r6, #5
   12714:	mov	r4, #0
   12718:	mov	r7, #0
   1271c:	movt	r8, #2
   12720:	ldr	r0, [r8, #20]
   12724:	cmp	r0, #0
   12728:	movne	r1, #1
   1272c:	strbne	r1, [r8, #3]
   12730:	cmp	r9, #2
   12734:	bhi	12834 <__assert_fail@plt+0x1120>
   12738:	ldr	r1, [sp, #100]	; 0x64
   1273c:	str	r6, [sp, #92]	; 0x5c
   12740:	subs	r4, r1, #1
   12744:	ldr	r1, [sp, #96]	; 0x60
   12748:	sbc	r7, r1, #0
   1274c:	cmp	r0, #0
   12750:	beq	1277c <__assert_fail@plt+0x1068>
   12754:	movw	r1, #42061	; 0xa44d
   12758:	add	r3, sp, #104	; 0x68
   1275c:	mov	r2, #10
   12760:	mov	r5, #0
   12764:	movt	r1, #1
   12768:	str	r1, [sp]
   1276c:	mov	r1, #0
   12770:	bl	18b80 <__assert_fail@plt+0x746c>
   12774:	cmp	r0, #0
   12778:	beq	12788 <__assert_fail@plt+0x1074>
   1277c:	mov	r6, r4
   12780:	mov	r5, r7
   12784:	b	127d4 <__assert_fail@plt+0x10c0>
   12788:	ldr	r0, [sp, #104]	; 0x68
   1278c:	ldr	r6, [sp, #100]	; 0x64
   12790:	ldr	r1, [sp, #108]	; 0x6c
   12794:	ldr	r3, [sp, #96]	; 0x60
   12798:	subs	r2, r0, r6
   1279c:	mvn	r6, r6
   127a0:	sbcs	r2, r1, r3
   127a4:	mvn	r3, r3
   127a8:	mov	r2, #0
   127ac:	movwcc	r2, #1
   127b0:	subs	r6, r6, r0
   127b4:	sbcs	r3, r3, r1
   127b8:	movwcs	r5, #1
   127bc:	adds	r6, r4, r0
   127c0:	and	r2, r5, r2
   127c4:	adc	r5, r7, r1
   127c8:	cmp	r2, #0
   127cc:	moveq	r5, r7
   127d0:	moveq	r6, r4
   127d4:	movw	r0, #49488	; 0xc150
   127d8:	movt	r0, #2
   127dc:	ldr	r0, [r0, #4]
   127e0:	bl	11588 <strlen@plt>
   127e4:	mov	r8, r0
   127e8:	mov	r4, #0
   127ec:	mov	r7, #0
   127f0:	mov	r0, r6
   127f4:	mov	r1, r5
   127f8:	mov	r2, r8
   127fc:	mov	r3, #0
   12800:	bl	19d58 <__assert_fail@plt+0x8644>
   12804:	adds	r4, r4, #1
   12808:	adc	r7, r7, #0
   1280c:	subs	r2, r6, r8
   12810:	mov	r6, r0
   12814:	sbcs	r2, r5, #0
   12818:	mov	r5, r1
   1281c:	bcs	127f0 <__assert_fail@plt+0x10dc>
   12820:	ldr	r6, [sp, #92]	; 0x5c
   12824:	movw	r8, #50392	; 0xc4d8
   12828:	mov	r0, #1
   1282c:	movt	r8, #2
   12830:	strb	r0, [r8, #3]
   12834:	ldr	r5, [r8, #12]
   12838:	cmp	r5, #0
   1283c:	beq	12858 <__assert_fail@plt+0x1144>
   12840:	subs	r0, r5, r4
   12844:	rscs	r0, r7, #0
   12848:	bcc	13ee8 <__assert_fail@plt+0x27d4>
   1284c:	mov	r0, #1
   12850:	strb	r0, [r8, #3]
   12854:	b	1286c <__assert_fail@plt+0x1158>
   12858:	rsbs	r0, r4, #2
   1285c:	rscs	r0, r7, #0
   12860:	movcs	r4, #2
   12864:	mov	r5, r4
   12868:	str	r4, [r8, #12]
   1286c:	movw	r7, #50008	; 0xc358
   12870:	ldr	r0, [sp, #88]	; 0x58
   12874:	movt	r7, #2
   12878:	ldr	r1, [r7]
   1287c:	cmp	r1, r0
   12880:	bge	128dc <__assert_fail@plt+0x11c8>
   12884:	ldr	r2, [sp, #84]	; 0x54
   12888:	add	r0, r1, #1
   1288c:	str	r0, [r7]
   12890:	ldr	r1, [r2, r1, lsl #2]
   12894:	str	r1, [r8, #4]
   12898:	ldr	r1, [sp, #88]	; 0x58
   1289c:	cmp	r0, r1
   128a0:	blt	128ec <__assert_fail@plt+0x11d8>
   128a4:	mov	r1, r0
   128a8:	ldr	r0, [sp, #88]	; 0x58
   128ac:	cmp	r1, r0
   128b0:	bge	1290c <__assert_fail@plt+0x11f8>
   128b4:	movw	r1, #43244	; 0xa8ec
   128b8:	mov	r0, #0
   128bc:	mov	r2, #5
   128c0:	movt	r1, #1
   128c4:	bl	11450 <dcgettext@plt>
   128c8:	mov	r4, r0
   128cc:	ldr	r0, [r7]
   128d0:	ldr	r1, [sp, #84]	; 0x54
   128d4:	ldr	r0, [r1, r0, lsl #2]
   128d8:	b	13df0 <__assert_fail@plt+0x26dc>
   128dc:	mov	r0, r1
   128e0:	ldr	r1, [sp, #88]	; 0x58
   128e4:	cmp	r0, r1
   128e8:	bge	128a4 <__assert_fail@plt+0x1190>
   128ec:	ldr	r2, [sp, #84]	; 0x54
   128f0:	add	r1, r0, #1
   128f4:	str	r1, [r7]
   128f8:	ldr	r0, [r2, r0, lsl #2]
   128fc:	str	r0, [r8, #8]
   12900:	ldr	r0, [sp, #88]	; 0x58
   12904:	cmp	r1, r0
   12908:	blt	128b4 <__assert_fail@plt+0x11a0>
   1290c:	ldr	r0, [r8, #20]
   12910:	cmp	r0, #0
   12914:	beq	12924 <__assert_fail@plt+0x1210>
   12918:	bl	11588 <strlen@plt>
   1291c:	cmp	r0, r5
   12920:	bhi	13f10 <__assert_fail@plt+0x27fc>
   12924:	ldr	r4, [r8, #4]
   12928:	movw	r1, #45481	; 0xb1a9
   1292c:	movt	r1, #1
   12930:	mov	r0, r4
   12934:	bl	113a8 <strcmp@plt>
   12938:	cmp	r0, #0
   1293c:	beq	1295c <__assert_fail@plt+0x1248>
   12940:	mov	r0, #0
   12944:	mov	r1, r4
   12948:	mov	r2, #0
   1294c:	mov	r3, #0
   12950:	bl	152a4 <__assert_fail@plt+0x3b90>
   12954:	cmn	r0, #1
   12958:	ble	13f1c <__assert_fail@plt+0x2808>
   1295c:	movw	r4, #50032	; 0xc370
   12960:	mov	r0, #3
   12964:	mov	r1, #0
   12968:	movt	r4, #2
   1296c:	mov	r2, r4
   12970:	bl	11498 <__fxstat64@plt>
   12974:	cmp	r0, #0
   12978:	bne	13e98 <__assert_fail@plt+0x2784>
   1297c:	cmp	sl, #0
   12980:	bne	129b8 <__assert_fail@plt+0x12a4>
   12984:	ldr	r0, [r4, #56]	; 0x38
   12988:	mov	r2, #0
   1298c:	mov	r1, #0
   12990:	cmp	r0, #536870913	; 0x20000001
   12994:	mov	sl, r0
   12998:	movwcc	r2, #1
   1299c:	cmp	r0, #0
   129a0:	movwgt	r1, #1
   129a4:	ands	r1, r1, r2
   129a8:	moveq	sl, #512	; 0x200
   129ac:	moveq	sl, #131072	; 0x20000
   129b0:	cmp	r0, #131072	; 0x20000
   129b4:	movlt	sl, #131072	; 0x20000
   129b8:	ldr	r0, [sp, #76]	; 0x4c
   129bc:	add	r1, sl, #1
   129c0:	bl	18450 <__assert_fail@plt+0x6d3c>
   129c4:	cmp	r9, #1
   129c8:	str	r0, [sp, #84]	; 0x54
   129cc:	bhi	12ba8 <__assert_fail@plt+0x1494>
   129d0:	mov	r0, #1
   129d4:	mov	r2, #0
   129d8:	mov	r3, #0
   129dc:	str	r0, [sp]
   129e0:	mov	r0, #0
   129e4:	bl	114bc <lseek64@plt>
   129e8:	cmp	r1, #0
   129ec:	str	r0, [sp, #88]	; 0x58
   129f0:	blt	13f4c <__assert_fail@plt+0x2838>
   129f4:	mov	r9, r1
   129f8:	mov	r7, #0
   129fc:	mov	r2, #0
   12a00:	ldr	r0, [sp, #84]	; 0x54
   12a04:	mov	r5, r2
   12a08:	add	r1, r0, r2
   12a0c:	sub	r2, sl, r2
   12a10:	mov	r0, #0
   12a14:	bl	174a4 <__assert_fail@plt+0x5d90>
   12a18:	cmp	r0, #0
   12a1c:	beq	12b58 <__assert_fail@plt+0x1444>
   12a20:	cmn	r0, #1
   12a24:	beq	13f60 <__assert_fail@plt+0x284c>
   12a28:	mov	r2, r5
   12a2c:	mov	r1, r7
   12a30:	adds	r2, r5, r0
   12a34:	adc	r1, r7, #0
   12a38:	subs	r0, r2, sl
   12a3c:	mov	r7, r1
   12a40:	sbcs	r0, r1, #0
   12a44:	bcc	12a00 <__assert_fail@plt+0x12ec>
   12a48:	ldrd	r0, [r4, #48]	; 0x30
   12a4c:	str	r2, [sp, #36]	; 0x24
   12a50:	orrs	r2, r0, r1
   12a54:	beq	1405c <__assert_fail@plt+0x2948>
   12a58:	ldr	r2, [sp, #36]	; 0x24
   12a5c:	ldr	r3, [sp, #88]	; 0x58
   12a60:	adds	r2, r2, r3
   12a64:	ldr	r3, [r4, #16]
   12a68:	adc	r5, r7, r9
   12a6c:	and	r3, r3, #53248	; 0xd000
   12a70:	orr	r3, r3, #8192	; 0x2000
   12a74:	cmp	r3, #40960	; 0xa000
   12a78:	bne	12a88 <__assert_fail@plt+0x1374>
   12a7c:	subs	r3, r0, r2
   12a80:	sbcs	r3, r1, r5
   12a84:	bge	12b1c <__assert_fail@plt+0x1408>
   12a88:	mov	r0, #2
   12a8c:	mov	r9, r2
   12a90:	mov	r2, #0
   12a94:	mov	r3, #0
   12a98:	str	r0, [sp]
   12a9c:	mov	r0, #0
   12aa0:	bl	114bc <lseek64@plt>
   12aa4:	cmp	r1, #0
   12aa8:	blt	13f60 <__assert_fail@plt+0x284c>
   12aac:	mov	r3, r0
   12ab0:	mov	r4, r1
   12ab4:	eor	r0, r0, r9
   12ab8:	eor	r1, r1, r5
   12abc:	mov	r2, r9
   12ac0:	orrs	r0, r0, r1
   12ac4:	mov	r1, r5
   12ac8:	mov	r0, r9
   12acc:	beq	12b1c <__assert_fail@plt+0x1408>
   12ad0:	mov	r0, #0
   12ad4:	str	r3, [sp, #88]	; 0x58
   12ad8:	mov	r3, r5
   12adc:	str	r0, [sp]
   12ae0:	mov	r0, #0
   12ae4:	bl	114bc <lseek64@plt>
   12ae8:	ldr	r3, [sp, #88]	; 0x58
   12aec:	cmp	r1, #0
   12af0:	blt	13f60 <__assert_fail@plt+0x284c>
   12af4:	subs	r0, r3, r9
   12af8:	mov	r2, r9
   12afc:	sbcs	r0, r4, r5
   12b00:	mov	r0, #0
   12b04:	movwlt	r0, #1
   12b08:	cmp	r0, #0
   12b0c:	movne	r4, r5
   12b10:	movne	r3, r9
   12b14:	mov	r0, r3
   12b18:	mov	r1, r4
   12b1c:	ldr	r3, [sp, #36]	; 0x24
   12b20:	subs	r0, r0, r2
   12b24:	mov	r2, r7
   12b28:	sbc	r1, r1, r5
   12b2c:	adds	r3, r0, r3
   12b30:	mvn	r0, #-2147483648	; 0x80000000
   12b34:	adc	r2, r1, r7
   12b38:	mvn	r1, r3
   12b3c:	eor	r0, r2, r0
   12b40:	orrs	r0, r1, r0
   12b44:	beq	1405c <__assert_fail@plt+0x2948>
   12b48:	mov	r5, r3
   12b4c:	mov	r7, r2
   12b50:	cmn	r2, #1
   12b54:	ble	13f60 <__assert_fail@plt+0x284c>
   12b58:	ldr	r4, [sp, #96]	; 0x60
   12b5c:	cmn	r4, #1
   12b60:	ble	13fa4 <__assert_fail@plt+0x2890>
   12b64:	ldr	r2, [sp, #100]	; 0x64
   12b68:	subs	r0, r5, sl
   12b6c:	sbcs	r0, r7, sl, asr #31
   12b70:	mov	r0, sl
   12b74:	movlt	r0, r5
   12b78:	subs	r1, r2, r5
   12b7c:	str	r0, [sp, #88]	; 0x58
   12b80:	mov	r0, #0
   12b84:	sbcs	r1, r4, r7
   12b88:	movwcc	r0, #1
   12b8c:	cmp	r0, #0
   12b90:	moveq	r7, r4
   12b94:	moveq	r5, r2
   12b98:	ldr	r0, [r8, #24]
   12b9c:	cmp	r0, #0
   12ba0:	bne	12bc8 <__assert_fail@plt+0x14b4>
   12ba4:	b	12c18 <__assert_fail@plt+0x1504>
   12ba8:	ldr	r4, [sp, #96]	; 0x60
   12bac:	mvn	r0, #0
   12bb0:	mvn	r7, #-2147483648	; 0x80000000
   12bb4:	mvn	r5, #0
   12bb8:	str	r0, [sp, #88]	; 0x58
   12bbc:	ldr	r0, [r8, #24]
   12bc0:	cmp	r0, #0
   12bc4:	beq	12c18 <__assert_fail@plt+0x1504>
   12bc8:	movw	r0, #50136	; 0xc3d8
   12bcc:	movt	r0, #2
   12bd0:	bl	11678 <sigemptyset@plt>
   12bd4:	add	r2, sp, #104	; 0x68
   12bd8:	mov	r0, #13
   12bdc:	mov	r1, #0
   12be0:	bl	114a4 <sigaction@plt>
   12be4:	ldr	r0, [sp, #104]	; 0x68
   12be8:	cmp	r0, #1
   12bec:	beq	12c00 <__assert_fail@plt+0x14ec>
   12bf0:	movw	r0, #50136	; 0xc3d8
   12bf4:	mov	r1, #13
   12bf8:	movt	r0, #2
   12bfc:	bl	11534 <sigaddset@plt>
   12c00:	movw	r1, #50136	; 0xc3d8
   12c04:	movw	r2, #50264	; 0xc458
   12c08:	mov	r0, #0
   12c0c:	movt	r1, #2
   12c10:	movt	r2, #2
   12c14:	bl	113d8 <sigprocmask@plt>
   12c18:	sub	r0, r6, #1
   12c1c:	cmp	r0, #6
   12c20:	bhi	13ea8 <__assert_fail@plt+0x2794>
   12c24:	add	r1, pc, #4
   12c28:	str	sl, [sp, #80]	; 0x50
   12c2c:	ldr	pc, [r1, r0, lsl #2]
   12c30:	andeq	r2, r1, r0, lsr sp
   12c34:	andeq	r2, r1, r0, asr sp
   12c38:	andeq	r2, r1, ip, asr #24
   12c3c:	andeq	r2, r1, ip, asr #24
   12c40:	andeq	r3, r1, r0, asr #3
   12c44:	andeq	r3, r1, r8, ror #1
   12c48:	andeq	r3, r1, ip, lsr #3
   12c4c:	mov	r4, #0
   12c50:	mov	r9, #1
   12c54:	mov	r7, #0
   12c58:	ldr	sl, [sp, #84]	; 0x54
   12c5c:	ldr	r2, [sp, #80]	; 0x50
   12c60:	mov	r0, #0
   12c64:	mov	r1, sl
   12c68:	bl	174a4 <__assert_fail@plt+0x5d90>
   12c6c:	cmn	r0, #1
   12c70:	beq	13d4c <__assert_fail@plt+0x2638>
   12c74:	mov	r1, r0
   12c78:	movw	r0, #49488	; 0xc150
   12c7c:	mov	r8, sl
   12c80:	movt	r0, #2
   12c84:	str	r1, [sp, #92]	; 0x5c
   12c88:	ldr	r6, [r0]
   12c8c:	mov	r0, sl
   12c90:	strb	r6, [r8, r1]!
   12c94:	mov	r1, r6
   12c98:	bl	11480 <rawmemchr@plt>
   12c9c:	cmp	r0, r8
   12ca0:	beq	12d04 <__assert_fail@plt+0x15f0>
   12ca4:	add	r5, r0, #1
   12ca8:	ldr	r0, [sp, #100]	; 0x64
   12cac:	adds	r4, r4, #1
   12cb0:	adc	r7, r7, #0
   12cb4:	subs	r0, r4, r0
   12cb8:	ldr	r0, [sp, #96]	; 0x60
   12cbc:	sbcs	r0, r7, r0
   12cc0:	bcc	12cf0 <__assert_fail@plt+0x15dc>
   12cc4:	sub	r2, r5, sl
   12cc8:	and	r0, r9, #1
   12ccc:	mov	r1, sl
   12cd0:	bl	1459c <__assert_fail@plt+0x2e88>
   12cd4:	movw	r0, #49488	; 0xc150
   12cd8:	mov	r4, #0
   12cdc:	mov	r9, #1
   12ce0:	mov	sl, r5
   12ce4:	mov	r7, #0
   12ce8:	movt	r0, #2
   12cec:	ldr	r6, [r0]
   12cf0:	mov	r0, r5
   12cf4:	mov	r1, r6
   12cf8:	bl	11480 <rawmemchr@plt>
   12cfc:	cmp	r0, r8
   12d00:	bne	12ca4 <__assert_fail@plt+0x1590>
   12d04:	cmp	r8, sl
   12d08:	beq	12d20 <__assert_fail@plt+0x160c>
   12d0c:	sub	r2, r8, sl
   12d10:	and	r0, r9, #1
   12d14:	mov	r1, sl
   12d18:	bl	1459c <__assert_fail@plt+0x2e88>
   12d1c:	mov	r9, #0
   12d20:	ldr	r0, [sp, #92]	; 0x5c
   12d24:	cmp	r0, #0
   12d28:	bne	12c58 <__assert_fail@plt+0x1544>
   12d2c:	b	13c68 <__assert_fail@plt+0x2554>
   12d30:	mov	r0, #0
   12d34:	mov	r1, r4
   12d38:	str	r0, [sp, #8]
   12d3c:	str	r0, [sp, #12]
   12d40:	mvn	r0, #0
   12d44:	str	r0, [sp]
   12d48:	ldr	r0, [sp, #100]	; 0x64
   12d4c:	b	133e0 <__assert_fail@plt+0x1ccc>
   12d50:	mvn	r0, sl
   12d54:	mov	r9, #0
   12d58:	mov	r8, #0
   12d5c:	mov	r5, #0
   12d60:	mov	r6, #0
   12d64:	str	r0, [sp, #44]	; 0x2c
   12d68:	mov	r0, #0
   12d6c:	str	r0, [sp, #60]	; 0x3c
   12d70:	mov	r0, #0
   12d74:	str	r0, [sp, #56]	; 0x38
   12d78:	ldr	r7, [sp, #84]	; 0x54
   12d7c:	mov	r0, #0
   12d80:	mov	r2, sl
   12d84:	mov	r1, r7
   12d88:	bl	174a4 <__assert_fail@plt+0x5d90>
   12d8c:	cmp	r0, #0
   12d90:	beq	130a8 <__assert_fail@plt+0x1994>
   12d94:	str	r7, [sp, #92]	; 0x5c
   12d98:	cmn	r0, #1
   12d9c:	str	r0, [sp, #40]	; 0x28
   12da0:	mov	r7, r0
   12da4:	ldr	r0, [sp, #100]	; 0x64
   12da8:	beq	13d4c <__assert_fail@plt+0x2638>
   12dac:	subs	r0, r0, r5
   12db0:	ldr	r3, [sp, #92]	; 0x5c
   12db4:	str	r9, [sp, #72]	; 0x48
   12db8:	str	r7, [sp, #68]	; 0x44
   12dbc:	sbc	r1, r4, r6
   12dc0:	mov	r4, r8
   12dc4:	subs	r8, r0, r8
   12dc8:	sbc	r1, r1, #0
   12dcc:	subs	r0, r7, r8
   12dd0:	mov	r2, r8
   12dd4:	mov	sl, r8
   12dd8:	rscs	r0, r1, #0
   12ddc:	str	r1, [sp, #64]	; 0x40
   12de0:	mov	r0, #0
   12de4:	add	r1, r3, r8
   12de8:	movwcc	r0, #1
   12dec:	sub	r1, r1, #1
   12df0:	cmp	r0, #0
   12df4:	movw	r0, #49488	; 0xc150
   12df8:	movwne	r1, #0
   12dfc:	movt	r0, #2
   12e00:	movne	r2, r7
   12e04:	movwne	sl, #0
   12e08:	str	r1, [sp, #76]	; 0x4c
   12e0c:	ldr	r1, [r0]
   12e10:	mov	r0, r3
   12e14:	bl	115b8 <memrchr@plt>
   12e18:	mov	r9, r0
   12e1c:	cmp	r4, #0
   12e20:	str	r4, [sp, #88]	; 0x58
   12e24:	beq	12ec8 <__assert_fail@plt+0x17b4>
   12e28:	orrs	r0, r5, r6
   12e2c:	beq	12e38 <__assert_fail@plt+0x1724>
   12e30:	cmp	r9, #0
   12e34:	beq	12ea8 <__assert_fail@plt+0x1794>
   12e38:	mov	r7, r6
   12e3c:	mov	r6, r5
   12e40:	ldr	r5, [sp, #56]	; 0x38
   12e44:	ldr	r4, [sp, #88]	; 0x58
   12e48:	clz	r0, r0
   12e4c:	lsr	r0, r0, #5
   12e50:	mov	r1, r5
   12e54:	mov	r2, r4
   12e58:	bl	1459c <__assert_fail@plt+0x2e88>
   12e5c:	adds	r6, r6, r4
   12e60:	mov	r0, r7
   12e64:	adc	r0, r7, #0
   12e68:	ldr	r7, [sp, #80]	; 0x50
   12e6c:	str	r6, [sp, #52]	; 0x34
   12e70:	str	r0, [sp, #48]	; 0x30
   12e74:	cmp	r4, r7
   12e78:	bls	12e8c <__assert_fail@plt+0x1778>
   12e7c:	mov	r0, r5
   12e80:	mov	r1, r7
   12e84:	bl	18528 <__assert_fail@plt+0x6e14>
   12e88:	str	r0, [sp, #56]	; 0x38
   12e8c:	str	r7, [sp, #72]	; 0x48
   12e90:	cmp	r9, #0
   12e94:	bne	12ed8 <__assert_fail@plt+0x17c4>
   12e98:	ldr	r5, [sp, #52]	; 0x34
   12e9c:	ldr	r6, [sp, #48]	; 0x30
   12ea0:	mov	r0, #0
   12ea4:	str	r0, [sp, #88]	; 0x58
   12ea8:	ldr	r0, [sp, #60]	; 0x3c
   12eac:	ldr	r4, [sp, #76]	; 0x4c
   12eb0:	ldr	r1, [sp, #68]	; 0x44
   12eb4:	mov	ip, #1
   12eb8:	tst	r0, #1
   12ebc:	beq	12f44 <__assert_fail@plt+0x1830>
   12ec0:	mov	r7, r1
   12ec4:	b	12fa4 <__assert_fail@plt+0x1890>
   12ec8:	str	r6, [sp, #48]	; 0x30
   12ecc:	str	r5, [sp, #52]	; 0x34
   12ed0:	cmp	r9, #0
   12ed4:	beq	12e98 <__assert_fail@plt+0x1784>
   12ed8:	ldr	r1, [sp, #92]	; 0x5c
   12edc:	ldr	r6, [sp, #52]	; 0x34
   12ee0:	ldr	r4, [sp, #48]	; 0x30
   12ee4:	sub	r0, r9, r1
   12ee8:	add	r5, r0, #1
   12eec:	orr	r0, r6, r4
   12ef0:	clz	r0, r0
   12ef4:	mov	r2, r5
   12ef8:	lsr	r0, r0, #5
   12efc:	bl	1459c <__assert_fail@plt+0x2e88>
   12f00:	ldr	r1, [sp, #68]	; 0x44
   12f04:	ldr	r2, [sp, #64]	; 0x40
   12f08:	mov	ip, #1
   12f0c:	subs	r0, r1, r8
   12f10:	sub	r7, r1, r5
   12f14:	rscs	r0, r2, #0
   12f18:	subcs	sl, sl, r5
   12f1c:	adds	r6, r6, r5
   12f20:	add	r0, r9, #1
   12f24:	mov	r5, r6
   12f28:	mov	r6, r4
   12f2c:	str	r0, [sp, #92]	; 0x5c
   12f30:	mov	r0, #0
   12f34:	adc	r6, r4, #0
   12f38:	ldr	r4, [sp, #76]	; 0x4c
   12f3c:	str	r0, [sp, #88]	; 0x58
   12f40:	b	12fa8 <__assert_fail@plt+0x1894>
   12f44:	cmp	r4, #0
   12f48:	ldr	r4, [sp, #92]	; 0x5c
   12f4c:	mov	r9, r6
   12f50:	mov	r6, r5
   12f54:	mov	r5, r1
   12f58:	orr	r0, r6, r9
   12f5c:	movne	r5, sl
   12f60:	clz	r0, r0
   12f64:	mov	r2, r5
   12f68:	lsr	r0, r0, #5
   12f6c:	mov	r1, r4
   12f70:	bl	1459c <__assert_fail@plt+0x2e88>
   12f74:	ldr	r1, [sp, #68]	; 0x44
   12f78:	add	r4, r4, r5
   12f7c:	adds	r6, r6, r5
   12f80:	mov	ip, #0
   12f84:	str	r4, [sp, #92]	; 0x5c
   12f88:	ldr	r4, [sp, #76]	; 0x4c
   12f8c:	sub	r7, r1, r5
   12f90:	mov	r5, r6
   12f94:	mov	r6, r9
   12f98:	adc	r6, r9, #0
   12f9c:	cmp	r4, #0
   12fa0:	movwne	sl, #0
   12fa4:	ldr	r2, [sp, #64]	; 0x40
   12fa8:	subs	r0, r1, r8
   12fac:	mov	r1, r7
   12fb0:	mov	r3, r4
   12fb4:	rscs	r0, r2, #0
   12fb8:	mov	r2, sl
   12fbc:	mov	r0, #0
   12fc0:	movwcc	r0, #1
   12fc4:	cmp	r7, #0
   12fc8:	movwne	r1, #1
   12fcc:	cmp	sl, #0
   12fd0:	movwne	r2, #1
   12fd4:	cmp	r4, #0
   12fd8:	movwne	r3, #1
   12fdc:	tst	r3, r2
   12fe0:	andseq	r0, r0, r1
   12fe4:	beq	1302c <__assert_fail@plt+0x1918>
   12fe8:	ldr	r9, [sp, #72]	; 0x48
   12fec:	ldr	r8, [sp, #88]	; 0x58
   12ff0:	cmp	r4, #0
   12ff4:	str	ip, [sp, #68]	; 0x44
   12ff8:	moveq	sl, r7
   12ffc:	sub	r0, r9, r8
   13000:	cmp	r0, sl
   13004:	bcs	13038 <__assert_fail@plt+0x1924>
   13008:	ldr	r0, [sp, #44]	; 0x2c
   1300c:	cmp	r9, r0
   13010:	bhi	13e88 <__assert_fail@plt+0x2774>
   13014:	ldr	r0, [sp, #80]	; 0x50
   13018:	add	r9, r9, r0
   1301c:	ldr	r0, [sp, #56]	; 0x38
   13020:	mov	r1, r9
   13024:	bl	18528 <__assert_fail@plt+0x6e14>
   13028:	b	1303c <__assert_fail@plt+0x1928>
   1302c:	ldr	r9, [sp, #72]	; 0x48
   13030:	ldr	r8, [sp, #88]	; 0x58
   13034:	b	1306c <__assert_fail@plt+0x1958>
   13038:	ldr	r0, [sp, #56]	; 0x38
   1303c:	ldr	r4, [sp, #92]	; 0x5c
   13040:	str	r0, [sp, #56]	; 0x38
   13044:	add	r0, r0, r8
   13048:	mov	r2, sl
   1304c:	mov	r1, r4
   13050:	bl	11408 <memcpy@plt>
   13054:	add	r4, r4, sl
   13058:	ldr	ip, [sp, #68]	; 0x44
   1305c:	sub	r7, r7, sl
   13060:	add	r8, sl, r8
   13064:	str	r4, [sp, #92]	; 0x5c
   13068:	ldr	r4, [sp, #76]	; 0x4c
   1306c:	clz	r0, r4
   13070:	cmp	r4, #0
   13074:	ldr	r4, [sp, #96]	; 0x60
   13078:	lsr	r0, r0, #5
   1307c:	movwne	r5, #0
   13080:	movwne	r6, #0
   13084:	cmp	r7, #0
   13088:	and	r0, ip, r0
   1308c:	str	r0, [sp, #60]	; 0x3c
   13090:	ldr	r0, [sp, #100]	; 0x64
   13094:	bne	12dac <__assert_fail@plt+0x1698>
   13098:	ldr	r0, [sp, #40]	; 0x28
   1309c:	ldr	sl, [sp, #80]	; 0x50
   130a0:	cmp	r0, #0
   130a4:	bne	12d78 <__assert_fail@plt+0x1664>
   130a8:	ldr	r4, [sp, #56]	; 0x38
   130ac:	cmp	r8, #0
   130b0:	beq	130cc <__assert_fail@plt+0x19b8>
   130b4:	orr	r0, r5, r6
   130b8:	mov	r1, r4
   130bc:	mov	r2, r8
   130c0:	clz	r0, r0
   130c4:	lsr	r0, r0, #5
   130c8:	bl	1459c <__assert_fail@plt+0x2e88>
   130cc:	mov	r0, r4
   130d0:	bl	15374 <__assert_fail@plt+0x3c60>
   130d4:	mov	r0, #0
   130d8:	bl	116fc <close@plt>
   130dc:	cmp	r0, #0
   130e0:	beq	13c78 <__assert_fail@plt+0x2564>
   130e4:	b	13d4c <__assert_fail@plt+0x2638>
   130e8:	ldr	r2, [sp, #100]	; 0x64
   130ec:	ldr	r3, [sp, #72]	; 0x48
   130f0:	subs	r0, r2, #1
   130f4:	sbc	r1, r4, #0
   130f8:	subs	r3, r2, r3
   130fc:	ldr	r3, [sp, #68]	; 0x44
   13100:	sbcs	r3, r4, r3
   13104:	bcc	13fec <__assert_fail@plt+0x28d8>
   13108:	subs	r0, r0, r5
   1310c:	sbcs	r0, r1, r7
   13110:	bcs	13fec <__assert_fail@plt+0x28d8>
   13114:	mov	r0, r5
   13118:	mov	r1, r7
   1311c:	mov	r3, r4
   13120:	str	r5, [sp, #36]	; 0x24
   13124:	str	r7, [sp, #28]
   13128:	bl	19d58 <__assert_fail@plt+0x8644>
   1312c:	ldr	r7, [sp, #72]	; 0x48
   13130:	subs	r9, r0, #1
   13134:	ldr	r8, [sp, #88]	; 0x58
   13138:	mov	r5, #0
   1313c:	str	r0, [sp, #24]
   13140:	str	r1, [sp, #64]	; 0x40
   13144:	sbc	sl, r1, #0
   13148:	subs	r2, r7, #2
   1314c:	ldr	r2, [sp, #68]	; 0x44
   13150:	sbcs	r3, r2, #0
   13154:	bcc	13318 <__assert_fail@plt+0x1c04>
   13158:	subs	r7, r7, #1
   1315c:	umull	r3, r6, r0, r7
   13160:	sbc	r4, r2, #0
   13164:	mla	r0, r0, r4, r6
   13168:	subs	r6, r3, #1
   1316c:	mla	r1, r1, r7, r0
   13170:	sbc	r5, r1, #0
   13174:	subs	r0, r6, r8
   13178:	sbcs	r0, r5, #0
   1317c:	bge	13434 <__assert_fail@plt+0x1d20>
   13180:	ldr	r0, [sp, #84]	; 0x54
   13184:	sub	r8, r8, r6
   13188:	mov	r2, r8
   1318c:	add	r1, r0, r6
   13190:	bl	113e4 <memmove@plt>
   13194:	mov	r3, r5
   13198:	mov	sl, r5
   1319c:	mov	ip, r6
   131a0:	mov	r9, r6
   131a4:	mov	r5, #0
   131a8:	b	1346c <__assert_fail@plt+0x1d58>
   131ac:	ldr	r0, [sp, #52]	; 0x34
   131b0:	cmp	r0, #0
   131b4:	beq	1332c <__assert_fail@plt+0x1c18>
   131b8:	ldr	sl, [sp, #100]	; 0x64
   131bc:	b	13384 <__assert_fail@plt+0x1c70>
   131c0:	ldr	r0, [sp, #52]	; 0x34
   131c4:	cmp	r0, #0
   131c8:	beq	133b8 <__assert_fail@plt+0x1ca4>
   131cc:	ldr	r0, [sp, #72]	; 0x48
   131d0:	mov	r9, r7
   131d4:	ldr	r7, [sp, #100]	; 0x64
   131d8:	subs	sl, r0, #1
   131dc:	ldr	r0, [sp, #68]	; 0x44
   131e0:	sbc	r1, r0, #0
   131e4:	subs	r0, sl, r7
   131e8:	mov	r0, r1
   131ec:	str	r1, [sp, #96]	; 0x60
   131f0:	sbcs	r0, r1, r4
   131f4:	bcs	1403c <__assert_fail@plt+0x2928>
   131f8:	subs	r0, r5, r7
   131fc:	sbcs	r0, r9, r4
   13200:	bcc	1403c <__assert_fail@plt+0x2928>
   13204:	mov	r0, r5
   13208:	mov	r1, r9
   1320c:	mov	r2, r7
   13210:	mov	r3, r4
   13214:	bl	19d58 <__assert_fail@plt+0x8644>
   13218:	ldr	r6, [sp, #72]	; 0x48
   1321c:	ldr	r3, [sp, #68]	; 0x44
   13220:	umull	r8, r2, r0, r6
   13224:	mla	ip, r0, r3, r2
   13228:	eor	r2, r6, r7
   1322c:	eor	r7, r3, r4
   13230:	orrs	r3, r2, r7
   13234:	umull	r7, r2, r0, sl
   13238:	ldr	r3, [sp, #96]	; 0x60
   1323c:	mlane	r9, r1, r6, ip
   13240:	moveq	r8, r5
   13244:	mla	r0, r0, r3, r2
   13248:	ldr	r2, [sp, #88]	; 0x58
   1324c:	mla	r4, r1, sl, r0
   13250:	subs	r0, r7, r2
   13254:	sbcs	r0, r4, #0
   13258:	bge	13400 <__assert_fail@plt+0x1cec>
   1325c:	ldr	r0, [sp, #84]	; 0x54
   13260:	sub	r5, r2, r7
   13264:	mov	r2, r5
   13268:	add	r1, r0, r7
   1326c:	bl	113e4 <memmove@plt>
   13270:	subs	r0, r7, r8
   13274:	sbcs	r0, r4, r9
   13278:	bge	13c68 <__assert_fail@plt+0x2554>
   1327c:	cmn	r5, #1
   13280:	bne	132a0 <__assert_fail@plt+0x1b8c>
   13284:	ldr	r1, [sp, #84]	; 0x54
   13288:	ldr	r2, [sp, #80]	; 0x50
   1328c:	mov	r0, #0
   13290:	bl	174a4 <__assert_fail@plt+0x5d90>
   13294:	mov	r5, r0
   13298:	cmn	r0, #1
   1329c:	beq	13d4c <__assert_fail@plt+0x2638>
   132a0:	cmp	r5, #0
   132a4:	beq	13c68 <__assert_fail@plt+0x2554>
   132a8:	subs	r6, r8, r7
   132ac:	mov	sl, r9
   132b0:	sbc	r0, r9, r4
   132b4:	subs	r1, r5, r6
   132b8:	ldr	r1, [sp, #84]	; 0x54
   132bc:	rscs	r0, r0, #0
   132c0:	movlt	r6, r5
   132c4:	mov	r0, #1
   132c8:	mov	r2, r6
   132cc:	bl	15440 <__assert_fail@plt+0x3d2c>
   132d0:	cmp	r0, r6
   132d4:	beq	132fc <__assert_fail@plt+0x1be8>
   132d8:	bl	115d0 <__errno_location@plt>
   132dc:	ldr	r5, [r0]
   132e0:	cmp	r5, #32
   132e4:	bne	13ebc <__assert_fail@plt+0x27a8>
   132e8:	movw	r0, #50392	; 0xc4d8
   132ec:	movt	r0, #2
   132f0:	ldr	r0, [r0, #24]
   132f4:	cmp	r0, #0
   132f8:	beq	13ebc <__assert_fail@plt+0x27a8>
   132fc:	adds	r7, r7, r6
   13300:	mvn	r5, #0
   13304:	adc	r4, r4, #0
   13308:	subs	r0, r7, r8
   1330c:	sbcs	r0, r4, sl
   13310:	blt	1327c <__assert_fail@plt+0x1b68>
   13314:	b	13c68 <__assert_fail@plt+0x2554>
   13318:	mov	r7, #1
   1331c:	mov	ip, #0
   13320:	mov	r3, #0
   13324:	mov	r4, #0
   13328:	b	1346c <__assert_fail@plt+0x1d58>
   1332c:	ldr	sl, [sp, #100]	; 0x64
   13330:	cmp	r4, #0
   13334:	bne	13e88 <__assert_fail@plt+0x2774>
   13338:	mov	r0, sl
   1333c:	mov	r1, #16
   13340:	mov	r5, r8
   13344:	bl	185b0 <__assert_fail@plt+0x6e9c>
   13348:	mov	r7, r0
   1334c:	mov	r9, #0
   13350:	mvn	r8, #0
   13354:	mov	r6, #0
   13358:	bl	146a0 <__assert_fail@plt+0x2f8c>
   1335c:	ldr	r0, [r5, #32]
   13360:	bl	18a00 <__assert_fail@plt+0x72ec>
   13364:	mov	r1, r7
   13368:	str	r0, [r1, r6, lsl #4]!
   1336c:	add	r6, r6, #1
   13370:	subs	r0, r6, sl
   13374:	stmib	r1, {r8, r9}
   13378:	str	r9, [r1, #12]
   1337c:	rscs	r0, r4, #0
   13380:	bcc	13358 <__assert_fail@plt+0x1c44>
   13384:	mov	r0, #1
   13388:	mov	r9, #0
   1338c:	mov	r4, #0
   13390:	str	sl, [sp, #100]	; 0x64
   13394:	str	r7, [sp, #64]	; 0x40
   13398:	str	r0, [sp, #48]	; 0x30
   1339c:	mov	r0, #0
   133a0:	str	r0, [sp, #44]	; 0x2c
   133a4:	mov	r0, #0
   133a8:	str	r0, [sp, #92]	; 0x5c
   133ac:	mov	r0, #0
   133b0:	str	r0, [sp, #60]	; 0x3c
   133b4:	b	138ec <__assert_fail@plt+0x21d8>
   133b8:	ldr	r6, [sp, #100]	; 0x64
   133bc:	mov	r0, r5
   133c0:	mov	r1, r7
   133c4:	mov	r3, r4
   133c8:	mov	r2, r6
   133cc:	bl	19d58 <__assert_fail@plt+0x8644>
   133d0:	ldr	r2, [sp, #88]	; 0x58
   133d4:	str	r6, [sp, #8]
   133d8:	str	r4, [sp, #12]
   133dc:	str	r2, [sp]
   133e0:	ldr	r2, [sp, #84]	; 0x54
   133e4:	mov	r3, sl
   133e8:	bl	1406c <__assert_fail@plt+0x2958>
   133ec:	mov	r0, #0
   133f0:	bl	116fc <close@plt>
   133f4:	cmp	r0, #0
   133f8:	beq	13c78 <__assert_fail@plt+0x2564>
   133fc:	b	13d4c <__assert_fail@plt+0x2638>
   13400:	mov	r0, #1
   13404:	subs	r2, r7, r2
   13408:	str	r0, [sp]
   1340c:	sbc	r3, r4, #0
   13410:	mov	r0, #0
   13414:	bl	114bc <lseek64@plt>
   13418:	mvn	r5, #0
   1341c:	cmn	r1, #1
   13420:	ble	13d4c <__assert_fail@plt+0x2638>
   13424:	subs	r0, r7, r8
   13428:	sbcs	r0, r4, r9
   1342c:	bge	13c68 <__assert_fail@plt+0x2554>
   13430:	b	1327c <__assert_fail@plt+0x1b68>
   13434:	mov	r0, #1
   13438:	subs	r2, r6, r8
   1343c:	str	r0, [sp]
   13440:	sbc	r3, r5, #0
   13444:	mov	r0, #0
   13448:	bl	114bc <lseek64@plt>
   1344c:	mov	r3, r5
   13450:	mov	sl, r5
   13454:	mov	ip, r6
   13458:	mvn	r8, #0
   1345c:	cmn	r1, #1
   13460:	mov	r9, r6
   13464:	mov	r5, #0
   13468:	ble	13d4c <__assert_fail@plt+0x2638>
   1346c:	ldr	r2, [sp, #36]	; 0x24
   13470:	ldr	r1, [sp, #28]
   13474:	subs	r0, ip, r2
   13478:	sbcs	r0, r3, r1
   1347c:	bge	1389c <__assert_fail@plt+0x2188>
   13480:	subs	r0, r2, #1
   13484:	mov	r5, #0
   13488:	mov	r2, #1
   1348c:	str	r0, [sp, #60]	; 0x3c
   13490:	sbc	r0, r1, #0
   13494:	str	r0, [sp, #92]	; 0x5c
   13498:	mov	r0, #0
   1349c:	cmn	r8, #1
   134a0:	bne	134e0 <__assert_fail@plt+0x1dcc>
   134a4:	str	r2, [sp, #40]	; 0x28
   134a8:	ldr	r1, [sp, #84]	; 0x54
   134ac:	ldr	r2, [sp, #80]	; 0x50
   134b0:	str	r0, [sp, #88]	; 0x58
   134b4:	mov	r0, #0
   134b8:	mov	r6, ip
   134bc:	mov	r8, r3
   134c0:	bl	174a4 <__assert_fail@plt+0x5d90>
   134c4:	mov	r3, r8
   134c8:	mov	r8, r0
   134cc:	ldr	r2, [sp, #40]	; 0x28
   134d0:	ldr	r0, [sp, #88]	; 0x58
   134d4:	mov	ip, r6
   134d8:	cmn	r8, #1
   134dc:	beq	13d4c <__assert_fail@plt+0x2638>
   134e0:	cmp	r8, #0
   134e4:	beq	138a0 <__assert_fail@plt+0x218c>
   134e8:	ldr	r0, [sp, #36]	; 0x24
   134ec:	subs	r6, r0, ip
   134f0:	ldr	r0, [sp, #28]
   134f4:	sbc	r0, r0, r3
   134f8:	subs	r1, r8, r6
   134fc:	rscs	r0, r0, #0
   13500:	movlt	r6, r8
   13504:	cmp	r6, #0
   13508:	beq	1386c <__assert_fail@plt+0x2158>
   1350c:	ldr	r5, [sp, #84]	; 0x54
   13510:	mov	r1, #0
   13514:	str	r1, [sp, #20]
   13518:	add	r8, r5, r6
   1351c:	str	r8, [sp, #32]
   13520:	subs	r0, r9, ip
   13524:	str	r2, [sp, #44]	; 0x2c
   13528:	str	ip, [sp, #88]	; 0x58
   1352c:	str	r3, [sp, #76]	; 0x4c
   13530:	str	r6, [sp, #48]	; 0x30
   13534:	sbc	r1, sl, r3
   13538:	rsbs	r2, r0, #0
   1353c:	rscs	r2, r1, #0
   13540:	mov	r2, #0
   13544:	movwlt	r2, #1
   13548:	cmp	r2, #0
   1354c:	moveq	r1, r2
   13550:	movne	r2, r0
   13554:	subs	r0, r6, r2
   13558:	rscs	r0, r1, #0
   1355c:	movw	r1, #49488	; 0xc150
   13560:	movt	r1, #2
   13564:	movlt	r2, r6
   13568:	ldr	r1, [r1]
   1356c:	add	r0, r5, r2
   13570:	sub	r2, r6, r2
   13574:	bl	11630 <memchr@plt>
   13578:	mov	r2, r0
   1357c:	cmp	r0, #0
   13580:	mov	r0, r8
   13584:	ldr	r1, [sp, #68]	; 0x44
   13588:	addne	r0, r2, #1
   1358c:	movwne	r2, #1
   13590:	str	r0, [sp, #56]	; 0x38
   13594:	sub	r6, r0, r5
   13598:	ldr	r0, [sp, #72]	; 0x48
   1359c:	eor	r1, r4, r1
   135a0:	eor	r0, r7, r0
   135a4:	orrs	r0, r0, r1
   135a8:	bne	135d0 <__assert_fail@plt+0x1ebc>
   135ac:	mov	r1, r5
   135b0:	mov	r5, r2
   135b4:	mov	r0, #1
   135b8:	mov	r2, r6
   135bc:	bl	15440 <__assert_fail@plt+0x3d2c>
   135c0:	mov	r2, r5
   135c4:	cmp	r0, r6
   135c8:	beq	135f8 <__assert_fail@plt+0x1ee4>
   135cc:	b	1401c <__assert_fail@plt+0x2908>
   135d0:	ldr	r0, [sp, #52]	; 0x34
   135d4:	cmp	r0, #0
   135d8:	bne	135f8 <__assert_fail@plt+0x1ee4>
   135dc:	ldr	r0, [sp, #44]	; 0x2c
   135e0:	mov	r1, r5
   135e4:	mov	r5, r2
   135e8:	mov	r2, r6
   135ec:	and	r0, r0, #1
   135f0:	bl	1459c <__assert_fail@plt+0x2e88>
   135f4:	mov	r2, r5
   135f8:	ldr	ip, [sp, #88]	; 0x58
   135fc:	ldr	r3, [sp, #76]	; 0x4c
   13600:	eor	r1, r2, #1
   13604:	str	r6, [sp, #44]	; 0x2c
   13608:	adds	ip, ip, r6
   1360c:	adc	r3, r3, #0
   13610:	subs	r0, r9, ip
   13614:	sbcs	r0, sl, r3
   13618:	mov	r0, #0
   1361c:	movwge	r0, #1
   13620:	tst	r0, r1
   13624:	bne	1384c <__assert_fail@plt+0x2138>
   13628:	ldr	r0, [sp, #56]	; 0x38
   1362c:	str	r2, [sp, #40]	; 0x28
   13630:	ldr	lr, [sp, #72]	; 0x48
   13634:	ldr	r5, [sp, #68]	; 0x44
   13638:	ldr	r6, [sp, #64]	; 0x40
   1363c:	ldr	r2, [sp, #60]	; 0x3c
   13640:	str	ip, [sp, #88]	; 0x58
   13644:	str	r3, [sp, #76]	; 0x4c
   13648:	cmp	r0, r8
   1364c:	ldr	r8, [sp, #24]
   13650:	beq	136b0 <__assert_fail@plt+0x1f9c>
   13654:	ldr	r0, [sp, #52]	; 0x34
   13658:	cmp	r0, #0
   1365c:	beq	1371c <__assert_fail@plt+0x2008>
   13660:	adds	r7, r7, #1
   13664:	adc	r4, r4, #0
   13668:	subs	r0, lr, r7
   1366c:	sbcs	r0, r5, r4
   13670:	bcc	13c68 <__assert_fail@plt+0x2554>
   13674:	ldr	r0, [sp, #100]	; 0x64
   13678:	ldr	r1, [sp, #96]	; 0x60
   1367c:	adds	r9, r9, r8
   13680:	adc	sl, sl, r6
   13684:	eor	r0, r7, r0
   13688:	eor	r1, r4, r1
   1368c:	orr	r0, r0, r1
   13690:	cmp	r0, #0
   13694:	ldr	r0, [sp, #92]	; 0x5c
   13698:	moveq	r9, r2
   1369c:	moveq	sl, r0
   136a0:	subs	r0, r9, ip
   136a4:	sbcs	r0, sl, r3
   136a8:	blt	13660 <__assert_fail@plt+0x1f4c>
   136ac:	b	13848 <__assert_fail@plt+0x2134>
   136b0:	ldr	r0, [sp, #52]	; 0x34
   136b4:	cmp	r0, #0
   136b8:	beq	137b4 <__assert_fail@plt+0x20a0>
   136bc:	ldr	r0, [sp, #40]	; 0x28
   136c0:	tst	r0, #1
   136c4:	beq	13840 <__assert_fail@plt+0x212c>
   136c8:	adds	r7, r7, #1
   136cc:	adc	r4, r4, #0
   136d0:	subs	r0, lr, r7
   136d4:	sbcs	r0, r5, r4
   136d8:	bcc	13c68 <__assert_fail@plt+0x2554>
   136dc:	ldr	r0, [sp, #100]	; 0x64
   136e0:	ldr	r1, [sp, #96]	; 0x60
   136e4:	adds	r9, r9, r8
   136e8:	adc	sl, sl, r6
   136ec:	eor	r0, r7, r0
   136f0:	eor	r1, r4, r1
   136f4:	orr	r0, r0, r1
   136f8:	cmp	r0, #0
   136fc:	ldr	r0, [sp, #92]	; 0x5c
   13700:	moveq	r9, r2
   13704:	moveq	sl, r0
   13708:	subs	r1, r9, ip
   1370c:	mov	r0, #1
   13710:	sbcs	r1, sl, r3
   13714:	blt	136c0 <__assert_fail@plt+0x1fac>
   13718:	b	13848 <__assert_fail@plt+0x2134>
   1371c:	ldr	r5, [sp, #40]	; 0x28
   13720:	b	13750 <__assert_fail@plt+0x203c>
   13724:	mov	r0, #1
   13728:	mov	r1, #0
   1372c:	mov	r2, #0
   13730:	bl	1459c <__assert_fail@plt+0x2e88>
   13734:	ldr	r2, [sp, #60]	; 0x3c
   13738:	ldr	r3, [sp, #76]	; 0x4c
   1373c:	ldr	ip, [sp, #88]	; 0x58
   13740:	ldr	r6, [sp, #64]	; 0x40
   13744:	subs	r0, r9, ip
   13748:	sbcs	r0, sl, r3
   1374c:	bge	137a8 <__assert_fail@plt+0x2094>
   13750:	ldr	r0, [sp, #100]	; 0x64
   13754:	ldr	r1, [sp, #96]	; 0x60
   13758:	adds	r7, r7, #1
   1375c:	adc	r4, r4, #0
   13760:	adds	r9, r9, r8
   13764:	adc	sl, sl, r6
   13768:	eor	r0, r7, r0
   1376c:	eor	r1, r4, r1
   13770:	orr	r0, r0, r1
   13774:	cmp	r0, #0
   13778:	ldr	r0, [sp, #92]	; 0x5c
   1377c:	moveq	r9, r2
   13780:	moveq	sl, r0
   13784:	subs	r0, r9, ip
   13788:	sbcs	r0, sl, r3
   1378c:	mov	r0, #0
   13790:	movwlt	r0, #1
   13794:	blt	13724 <__assert_fail@plt+0x2010>
   13798:	and	r5, r5, r0
   1379c:	subs	r0, r9, ip
   137a0:	sbcs	r0, sl, r3
   137a4:	blt	13750 <__assert_fail@plt+0x203c>
   137a8:	tst	r5, #1
   137ac:	bne	13750 <__assert_fail@plt+0x203c>
   137b0:	b	13848 <__assert_fail@plt+0x2134>
   137b4:	ldr	r5, [sp, #40]	; 0x28
   137b8:	tst	r5, #1
   137bc:	beq	13840 <__assert_fail@plt+0x212c>
   137c0:	ldr	r0, [sp, #100]	; 0x64
   137c4:	ldr	r1, [sp, #96]	; 0x60
   137c8:	adds	r7, r7, #1
   137cc:	mov	r5, #0
   137d0:	adc	r4, r4, #0
   137d4:	adds	r9, r9, r8
   137d8:	adc	sl, sl, r6
   137dc:	eor	r0, r7, r0
   137e0:	eor	r1, r4, r1
   137e4:	orr	r0, r0, r1
   137e8:	cmp	r0, #0
   137ec:	ldr	r0, [sp, #92]	; 0x5c
   137f0:	moveq	r9, r2
   137f4:	moveq	sl, r0
   137f8:	subs	r0, r9, ip
   137fc:	sbcs	r0, sl, r3
   13800:	bge	13828 <__assert_fail@plt+0x2114>
   13804:	mov	r0, #1
   13808:	mov	r1, #0
   1380c:	mov	r2, #0
   13810:	mov	r5, #1
   13814:	bl	1459c <__assert_fail@plt+0x2e88>
   13818:	ldr	r2, [sp, #60]	; 0x3c
   1381c:	ldr	r3, [sp, #76]	; 0x4c
   13820:	ldr	ip, [sp, #88]	; 0x58
   13824:	ldr	r6, [sp, #64]	; 0x40
   13828:	subs	r0, r9, ip
   1382c:	sbcs	r0, sl, r3
   13830:	blt	137b8 <__assert_fail@plt+0x20a4>
   13834:	cmp	r5, #0
   13838:	bne	137b8 <__assert_fail@plt+0x20a4>
   1383c:	b	13848 <__assert_fail@plt+0x2134>
   13840:	mov	r0, #1
   13844:	str	r0, [sp, #20]
   13848:	ldr	r2, [sp, #40]	; 0x28
   1384c:	ldr	r5, [sp, #56]	; 0x38
   13850:	ldr	r8, [sp, #32]
   13854:	ldr	r6, [sp, #48]	; 0x30
   13858:	ldr	r0, [sp, #44]	; 0x2c
   1385c:	sub	r6, r6, r0
   13860:	cmp	r5, r8
   13864:	bne	13520 <__assert_fail@plt+0x1e0c>
   13868:	b	13874 <__assert_fail@plt+0x2160>
   1386c:	mov	r0, #0
   13870:	str	r0, [sp, #20]
   13874:	ldr	r0, [sp, #20]
   13878:	mvn	r8, #0
   1387c:	and	r5, r0, #1
   13880:	ldr	r0, [sp, #36]	; 0x24
   13884:	subs	r0, ip, r0
   13888:	ldr	r0, [sp, #28]
   1388c:	sbcs	r0, r3, r0
   13890:	mov	r0, #0
   13894:	blt	1349c <__assert_fail@plt+0x1d88>
   13898:	b	138a0 <__assert_fail@plt+0x218c>
   1389c:	mov	r0, #0
   138a0:	adds	r5, r7, r5
   138a4:	adc	r4, r4, r0
   138a8:	ldr	r0, [sp, #52]	; 0x34
   138ac:	cmp	r0, #0
   138b0:	beq	138d0 <__assert_fail@plt+0x21bc>
   138b4:	b	13c68 <__assert_fail@plt+0x2554>
   138b8:	mov	r0, #1
   138bc:	mov	r1, #0
   138c0:	mov	r2, #0
   138c4:	bl	1459c <__assert_fail@plt+0x2e88>
   138c8:	adds	r5, r5, #1
   138cc:	adc	r4, r4, #0
   138d0:	ldr	r0, [sp, #100]	; 0x64
   138d4:	subs	r0, r0, r5
   138d8:	ldr	r0, [sp, #96]	; 0x60
   138dc:	sbcs	r0, r0, r4
   138e0:	bcs	138b8 <__assert_fail@plt+0x21a4>
   138e4:	b	13c68 <__assert_fail@plt+0x2554>
   138e8:	ldr	r4, [sp, #88]	; 0x58
   138ec:	ldr	r5, [sp, #84]	; 0x54
   138f0:	ldr	r2, [sp, #80]	; 0x50
   138f4:	mov	r0, #0
   138f8:	mov	r1, r5
   138fc:	bl	174a4 <__assert_fail@plt+0x5d90>
   13900:	cmp	r0, #0
   13904:	beq	13bd0 <__assert_fail@plt+0x24bc>
   13908:	cmn	r0, #1
   1390c:	beq	13d4c <__assert_fail@plt+0x2638>
   13910:	add	r6, r5, r0
   13914:	ldr	r0, [sp, #52]	; 0x34
   13918:	str	r6, [sp, #56]	; 0x38
   1391c:	cmp	r0, #0
   13920:	bne	13ac8 <__assert_fail@plt+0x23b4>
   13924:	movw	r0, #49488	; 0xc150
   13928:	sub	r2, r6, r5
   1392c:	str	r4, [sp, #88]	; 0x58
   13930:	movt	r0, #2
   13934:	ldr	r1, [r0]
   13938:	mov	r0, r5
   1393c:	bl	11630 <memchr@plt>
   13940:	mov	r4, r0
   13944:	mov	r0, r7
   13948:	mov	r1, r9
   1394c:	mov	r2, sl
   13950:	bl	14e88 <__assert_fail@plt+0x3774>
   13954:	mov	r8, r0
   13958:	movw	r0, #50392	; 0xc4d8
   1395c:	cmp	r4, #0
   13960:	mov	sl, r6
   13964:	str	r4, [sp, #76]	; 0x4c
   13968:	movt	r0, #2
   1396c:	addne	sl, r4, #1
   13970:	ldrb	r0, [r0]
   13974:	sub	r6, sl, r5
   13978:	cmp	r0, #0
   1397c:	add	r0, r7, r9, lsl #4
   13980:	beq	139a0 <__assert_fail@plt+0x228c>
   13984:	ldr	r0, [r0, #4]
   13988:	mov	r1, r5
   1398c:	mov	r2, r6
   13990:	bl	15440 <__assert_fail@plt+0x3d2c>
   13994:	cmp	r0, r6
   13998:	bne	139bc <__assert_fail@plt+0x22a8>
   1399c:	b	139e0 <__assert_fail@plt+0x22cc>
   139a0:	ldr	r3, [r0, #8]
   139a4:	mov	r0, r5
   139a8:	mov	r1, r6
   139ac:	mov	r2, #1
   139b0:	bl	11438 <fwrite_unlocked@plt>
   139b4:	cmp	r0, #1
   139b8:	beq	139e0 <__assert_fail@plt+0x22cc>
   139bc:	bl	115d0 <__errno_location@plt>
   139c0:	ldr	r5, [r0]
   139c4:	cmp	r5, #32
   139c8:	bne	13e7c <__assert_fail@plt+0x2768>
   139cc:	movw	r0, #50392	; 0xc4d8
   139d0:	movt	r0, #2
   139d4:	ldr	r0, [r0, #24]
   139d8:	cmp	r0, #0
   139dc:	beq	13e7c <__assert_fail@plt+0x2768>
   139e0:	ldr	r4, [sp, #92]	; 0x5c
   139e4:	orr	r4, r4, r8
   139e8:	bl	115d0 <__errno_location@plt>
   139ec:	mov	r5, r0
   139f0:	ldr	r0, [r0]
   139f4:	str	r4, [sp, #92]	; 0x5c
   139f8:	subs	r6, r0, #32
   139fc:	movw	r0, #50392	; 0xc4d8
   13a00:	movt	r0, #2
   13a04:	movwne	r6, #1
   13a08:	tst	r4, #1
   13a0c:	ldr	r7, [r0, #24]
   13a10:	beq	13a40 <__assert_fail@plt+0x232c>
   13a14:	ldr	r0, [sp, #64]	; 0x40
   13a18:	add	r8, r0, r9, lsl #4
   13a1c:	mov	r4, r8
   13a20:	ldr	r0, [r4, #8]!
   13a24:	bl	151c0 <__assert_fail@plt+0x3aac>
   13a28:	cmp	r0, #0
   13a2c:	bne	13eac <__assert_fail@plt+0x2798>
   13a30:	mov	r0, #0
   13a34:	str	r0, [r4]
   13a38:	mvn	r0, #1
   13a3c:	str	r0, [r8, #4]
   13a40:	ldr	r4, [sp, #88]	; 0x58
   13a44:	clz	r0, r7
   13a48:	lsr	r0, r0, #5
   13a4c:	orr	r0, r6, r0
   13a50:	orr	r4, r4, r0
   13a54:	ldr	r0, [sp, #76]	; 0x4c
   13a58:	cmp	r0, #0
   13a5c:	beq	13aac <__assert_fail@plt+0x2398>
   13a60:	ldr	r0, [sp, #100]	; 0x64
   13a64:	ldr	r1, [sp, #96]	; 0x60
   13a68:	add	r9, r9, #1
   13a6c:	ldr	r6, [sp, #56]	; 0x38
   13a70:	eor	r0, r0, r9
   13a74:	orrs	r0, r0, r1
   13a78:	mov	r1, r0
   13a7c:	moveq	r9, r0
   13a80:	movwne	r1, #1
   13a84:	orr	r2, r1, r4
   13a88:	tst	r2, #1
   13a8c:	beq	13bec <__assert_fail@plt+0x24d8>
   13a90:	and	r4, r1, r4
   13a94:	ldr	r1, [sp, #60]	; 0x3c
   13a98:	clz	r0, r0
   13a9c:	lsr	r0, r0, #5
   13aa0:	orr	r1, r1, r0
   13aa4:	str	r1, [sp, #60]	; 0x3c
   13aa8:	b	13ab0 <__assert_fail@plt+0x239c>
   13aac:	ldr	r6, [sp, #56]	; 0x38
   13ab0:	cmp	sl, r6
   13ab4:	mov	r5, sl
   13ab8:	ldr	sl, [sp, #100]	; 0x64
   13abc:	ldr	r7, [sp, #64]	; 0x40
   13ac0:	bne	13924 <__assert_fail@plt+0x2210>
   13ac4:	b	138ec <__assert_fail@plt+0x21d8>
   13ac8:	movw	r8, #50392	; 0xc4d8
   13acc:	str	r4, [sp, #88]	; 0x58
   13ad0:	movt	r8, #2
   13ad4:	movw	r0, #49488	; 0xc150
   13ad8:	sub	r2, r6, r5
   13adc:	movt	r0, #2
   13ae0:	ldr	r1, [r0]
   13ae4:	mov	r0, r5
   13ae8:	bl	11630 <memchr@plt>
   13aec:	cmp	r0, #0
   13af0:	mov	r4, r0
   13af4:	ldr	r1, [sp, #48]	; 0x30
   13af8:	ldr	r2, [sp, #44]	; 0x2c
   13afc:	addne	r6, r0, #1
   13b00:	ldr	r0, [sp, #72]	; 0x48
   13b04:	eor	r0, r1, r0
   13b08:	ldr	r1, [sp, #68]	; 0x44
   13b0c:	eor	r1, r2, r1
   13b10:	orrs	r0, r0, r1
   13b14:	bne	13b7c <__assert_fail@plt+0x2468>
   13b18:	mov	r0, r8
   13b1c:	sub	r8, r6, r5
   13b20:	ldrb	r0, [r0]
   13b24:	cmp	r0, #0
   13b28:	beq	13b50 <__assert_fail@plt+0x243c>
   13b2c:	mov	r0, #1
   13b30:	mov	r1, r5
   13b34:	mov	r2, r8
   13b38:	bl	15440 <__assert_fail@plt+0x3d2c>
   13b3c:	cmp	r0, r8
   13b40:	movw	r8, #50392	; 0xc4d8
   13b44:	movt	r8, #2
   13b48:	beq	13b7c <__assert_fail@plt+0x2468>
   13b4c:	b	1401c <__assert_fail@plt+0x2908>
   13b50:	movw	r0, #50020	; 0xc364
   13b54:	mov	r1, r8
   13b58:	mov	r2, #1
   13b5c:	movt	r0, #2
   13b60:	ldr	r3, [r0]
   13b64:	mov	r0, r5
   13b68:	bl	11438 <fwrite_unlocked@plt>
   13b6c:	movw	r8, #50392	; 0xc4d8
   13b70:	cmp	r0, #1
   13b74:	movt	r8, #2
   13b78:	bne	1400c <__assert_fail@plt+0x28f8>
   13b7c:	cmp	r4, #0
   13b80:	beq	13bb8 <__assert_fail@plt+0x24a4>
   13b84:	ldr	r2, [sp, #48]	; 0x30
   13b88:	ldr	r1, [sp, #96]	; 0x60
   13b8c:	ldr	r3, [sp, #44]	; 0x2c
   13b90:	eor	r0, r2, sl
   13b94:	eor	r1, r3, r1
   13b98:	adds	r2, r2, #1
   13b9c:	orr	r0, r0, r1
   13ba0:	adc	r3, r3, #0
   13ba4:	cmp	r0, #0
   13ba8:	moveq	r3, r0
   13bac:	movweq	r2, #1
   13bb0:	str	r3, [sp, #44]	; 0x2c
   13bb4:	str	r2, [sp, #48]	; 0x30
   13bb8:	ldr	r0, [sp, #56]	; 0x38
   13bbc:	mov	r5, r6
   13bc0:	cmp	r6, r0
   13bc4:	mov	r6, r0
   13bc8:	bne	13ad4 <__assert_fail@plt+0x23c0>
   13bcc:	b	138e8 <__assert_fail@plt+0x21d4>
   13bd0:	ldr	r0, [sp, #52]	; 0x34
   13bd4:	cmp	r0, #0
   13bd8:	bne	13c68 <__assert_fail@plt+0x2554>
   13bdc:	ldr	r0, [sp, #60]	; 0x3c
   13be0:	tst	r0, #1
   13be4:	ldrne	r9, [sp, #100]	; 0x64
   13be8:	b	13bf0 <__assert_fail@plt+0x24dc>
   13bec:	ldr	r9, [sp, #100]	; 0x64
   13bf0:	ldr	r5, [sp, #64]	; 0x40
   13bf4:	ldr	r7, [sp, #100]	; 0x64
   13bf8:	mov	r4, #0
   13bfc:	mvn	r8, #1
   13c00:	cmp	r4, r9
   13c04:	bcc	13c2c <__assert_fail@plt+0x2518>
   13c08:	movw	r0, #50392	; 0xc4d8
   13c0c:	movt	r0, #2
   13c10:	ldrb	r0, [r0, #1]
   13c14:	cmp	r0, #0
   13c18:	bne	13c2c <__assert_fail@plt+0x2518>
   13c1c:	mov	r0, r5
   13c20:	mov	r1, r4
   13c24:	mov	r2, r7
   13c28:	bl	14e88 <__assert_fail@plt+0x3774>
   13c2c:	add	r6, r5, r4, lsl #4
   13c30:	ldr	r1, [r6, #4]
   13c34:	cmp	r1, #0
   13c38:	blt	13c50 <__assert_fail@plt+0x253c>
   13c3c:	mov	r2, r5
   13c40:	ldr	r3, [r2, r4, lsl #4]!
   13c44:	ldr	r0, [r2, #8]
   13c48:	ldr	r2, [r2, #12]
   13c4c:	bl	14318 <__assert_fail@plt+0x2c04>
   13c50:	add	r4, r4, #1
   13c54:	str	r8, [r6, #4]
   13c58:	subs	r0, r4, r7
   13c5c:	ldr	r0, [sp, #96]	; 0x60
   13c60:	rscs	r0, r0, #0
   13c64:	bcc	13c00 <__assert_fail@plt+0x24ec>
   13c68:	mov	r0, #0
   13c6c:	bl	116fc <close@plt>
   13c70:	cmp	r0, #0
   13c74:	bne	13d4c <__assert_fail@plt+0x2638>
   13c78:	movw	r0, #50392	; 0xc4d8
   13c7c:	movt	r0, #2
   13c80:	ldr	r2, [r0, #28]
   13c84:	ldr	r3, [r0, #32]
   13c88:	movw	r0, #49488	; 0xc150
   13c8c:	movt	r0, #2
   13c90:	ldr	r1, [r0, #8]
   13c94:	mov	r0, #0
   13c98:	bl	14318 <__assert_fail@plt+0x2c04>
   13c9c:	mov	r0, #0
   13ca0:	sub	sp, fp, #28
   13ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ca8:	mov	r0, #1
   13cac:	bl	11810 <__assert_fail@plt+0xfc>
   13cb0:	movw	r0, #49500	; 0xc15c
   13cb4:	movw	r2, #43163	; 0xa89b
   13cb8:	mov	r1, #0
   13cbc:	movw	r7, #43145	; 0xa889
   13cc0:	movt	r0, #2
   13cc4:	movt	r2, #1
   13cc8:	str	r1, [sp, #8]
   13ccc:	movw	r1, #42614	; 0xa676
   13cd0:	movt	r7, #1
   13cd4:	ldr	r3, [r0]
   13cd8:	movw	r0, #50020	; 0xc364
   13cdc:	str	r2, [sp, #4]
   13ce0:	movw	r2, #43131	; 0xa87b
   13ce4:	movt	r1, #1
   13ce8:	str	r7, [sp]
   13cec:	movt	r0, #2
   13cf0:	movt	r2, #1
   13cf4:	ldr	r0, [r0]
   13cf8:	bl	18294 <__assert_fail@plt+0x6b80>
   13cfc:	mov	r0, #0
   13d00:	bl	1157c <exit@plt>
   13d04:	mov	r0, #0
   13d08:	bl	11810 <__assert_fail@plt+0xfc>
   13d0c:	movw	r1, #42949	; 0xa7c5
   13d10:	mov	r0, #0
   13d14:	mov	r2, #5
   13d18:	movt	r1, #1
   13d1c:	bl	11450 <dcgettext@plt>
   13d20:	mov	r4, r0
   13d24:	add	r2, sp, #104	; 0x68
   13d28:	mov	r0, r5
   13d2c:	mov	r1, r9
   13d30:	bl	154b4 <__assert_fail@plt+0x3da0>
   13d34:	mov	r3, r0
   13d38:	str	r7, [sp]
   13d3c:	mov	r0, #1
   13d40:	mov	r1, #0
   13d44:	mov	r2, r4
   13d48:	bl	11504 <error@plt>
   13d4c:	bl	115d0 <__errno_location@plt>
   13d50:	ldr	r4, [r0]
   13d54:	movw	r0, #50392	; 0xc4d8
   13d58:	movt	r0, #2
   13d5c:	ldr	r2, [r0, #4]
   13d60:	mov	r0, #0
   13d64:	mov	r1, #3
   13d68:	bl	171e0 <__assert_fail@plt+0x5acc>
   13d6c:	movw	r2, #45018	; 0xafda
   13d70:	mov	r3, r0
   13d74:	mov	r0, #1
   13d78:	mov	r1, r4
   13d7c:	movt	r2, #1
   13d80:	bl	11504 <error@plt>
   13d84:	movw	r1, #42741	; 0xa6f5
   13d88:	movt	r1, #1
   13d8c:	mov	r0, #0
   13d90:	mov	r2, #5
   13d94:	bl	11450 <dcgettext@plt>
   13d98:	mov	r2, r0
   13d9c:	mov	r0, #0
   13da0:	mov	r1, #0
   13da4:	bl	11504 <error@plt>
   13da8:	mov	r0, #1
   13dac:	bl	11810 <__assert_fail@plt+0xfc>
   13db0:	movw	r0, #43017	; 0xa809
   13db4:	movw	r1, #43062	; 0xa836
   13db8:	cmp	r7, #100	; 0x64
   13dbc:	movt	r0, #1
   13dc0:	movt	r1, #1
   13dc4:	moveq	r1, r0
   13dc8:	b	13dd4 <__assert_fail@plt+0x26c0>
   13dcc:	movw	r1, #42693	; 0xa6c5
   13dd0:	movt	r1, #1
   13dd4:	mov	r0, #0
   13dd8:	mov	r2, #5
   13ddc:	bl	11450 <dcgettext@plt>
   13de0:	mov	r4, r0
   13de4:	movw	r0, #50024	; 0xc368
   13de8:	movt	r0, #2
   13dec:	ldr	r0, [r0]
   13df0:	bl	1748c <__assert_fail@plt+0x5d78>
   13df4:	mov	r3, r0
   13df8:	mov	r0, #0
   13dfc:	mov	r1, #0
   13e00:	mov	r2, r4
   13e04:	bl	11504 <error@plt>
   13e08:	mov	r0, #1
   13e0c:	bl	11810 <__assert_fail@plt+0xfc>
   13e10:	movw	r1, #42854	; 0xa766
   13e14:	movt	r1, #1
   13e18:	b	13e60 <__assert_fail@plt+0x274c>
   13e1c:	movw	r1, #42880	; 0xa780
   13e20:	mov	r0, #0
   13e24:	mov	r2, #5
   13e28:	movt	r1, #1
   13e2c:	bl	11450 <dcgettext@plt>
   13e30:	mov	r4, r0
   13e34:	movw	r0, #50024	; 0xc368
   13e38:	movt	r0, #2
   13e3c:	ldr	r0, [r0]
   13e40:	bl	1748c <__assert_fail@plt+0x5d78>
   13e44:	mov	r3, r0
   13e48:	mov	r0, #1
   13e4c:	mov	r1, #0
   13e50:	mov	r2, r4
   13e54:	bl	11504 <error@plt>
   13e58:	movw	r1, #42909	; 0xa79d
   13e5c:	movt	r1, #1
   13e60:	mov	r0, #0
   13e64:	mov	r2, #5
   13e68:	bl	11450 <dcgettext@plt>
   13e6c:	mov	r2, r0
   13e70:	mov	r0, #1
   13e74:	mov	r1, #0
   13e78:	bl	11504 <error@plt>
   13e7c:	ldr	r0, [sp, #64]	; 0x40
   13e80:	ldr	r2, [r0, r9, lsl #4]
   13e84:	b	13ec4 <__assert_fail@plt+0x27b0>
   13e88:	bl	18a40 <__assert_fail@plt+0x732c>
   13e8c:	movw	r1, #43183	; 0xa8af
   13e90:	movt	r1, #1
   13e94:	b	13d8c <__assert_fail@plt+0x2678>
   13e98:	bl	115d0 <__errno_location@plt>
   13e9c:	ldr	r4, [r0]
   13ea0:	ldr	r2, [r8, #4]
   13ea4:	b	13d60 <__assert_fail@plt+0x264c>
   13ea8:	bl	116f0 <abort@plt>
   13eac:	ldr	r0, [sp, #64]	; 0x40
   13eb0:	ldr	r4, [r5]
   13eb4:	ldr	r2, [r0, r9, lsl #4]
   13eb8:	b	13d60 <__assert_fail@plt+0x264c>
   13ebc:	movw	r2, #45481	; 0xb1a9
   13ec0:	movt	r2, #1
   13ec4:	mov	r0, #0
   13ec8:	mov	r1, #3
   13ecc:	bl	171e0 <__assert_fail@plt+0x5acc>
   13ed0:	movw	r2, #45018	; 0xafda
   13ed4:	mov	r3, r0
   13ed8:	mov	r0, #1
   13edc:	mov	r1, r5
   13ee0:	movt	r2, #1
   13ee4:	bl	11504 <error@plt>
   13ee8:	movw	r1, #44227	; 0xacc3
   13eec:	mov	r0, #0
   13ef0:	mov	r2, #5
   13ef4:	movt	r1, #1
   13ef8:	bl	11450 <dcgettext@plt>
   13efc:	mov	r2, r0
   13f00:	stm	sp, {r4, r7}
   13f04:	mov	r0, #1
   13f08:	mov	r1, #0
   13f0c:	bl	11504 <error@plt>
   13f10:	movw	r1, #43261	; 0xa8fd
   13f14:	movt	r1, #1
   13f18:	b	13d8c <__assert_fail@plt+0x2678>
   13f1c:	bl	115d0 <__errno_location@plt>
   13f20:	ldr	r4, [r0]
   13f24:	movw	r1, #43325	; 0xa93d
   13f28:	mov	r0, #0
   13f2c:	mov	r2, #5
   13f30:	movt	r1, #1
   13f34:	bl	11450 <dcgettext@plt>
   13f38:	ldr	r1, [r8, #4]
   13f3c:	mov	r5, r0
   13f40:	mov	r0, #4
   13f44:	bl	16f64 <__assert_fail@plt+0x5850>
   13f48:	b	13f90 <__assert_fail@plt+0x287c>
   13f4c:	bl	115d0 <__errno_location@plt>
   13f50:	ldr	r1, [r0]
   13f54:	cmp	r1, #29
   13f58:	moveq	r1, #0
   13f5c:	streq	r1, [r0]
   13f60:	bl	115d0 <__errno_location@plt>
   13f64:	ldr	r4, [r0]
   13f68:	movw	r1, #43352	; 0xa958
   13f6c:	mov	r0, #0
   13f70:	mov	r2, #5
   13f74:	movt	r1, #1
   13f78:	bl	11450 <dcgettext@plt>
   13f7c:	ldr	r2, [r8, #4]
   13f80:	mov	r5, r0
   13f84:	mov	r0, #0
   13f88:	mov	r1, #3
   13f8c:	bl	171e0 <__assert_fail@plt+0x5acc>
   13f90:	mov	r3, r0
   13f94:	mov	r0, #1
   13f98:	mov	r1, r4
   13f9c:	mov	r2, r5
   13fa0:	bl	11504 <error@plt>
   13fa4:	movw	r1, #42829	; 0xa74d
   13fa8:	mov	r0, #0
   13fac:	mov	r2, #5
   13fb0:	movt	r1, #1
   13fb4:	bl	11450 <dcgettext@plt>
   13fb8:	mov	r5, r0
   13fbc:	ldr	r0, [sp, #100]	; 0x64
   13fc0:	add	r2, sp, #104	; 0x68
   13fc4:	mov	r1, r4
   13fc8:	bl	154b4 <__assert_fail@plt+0x3da0>
   13fcc:	bl	1748c <__assert_fail@plt+0x5d78>
   13fd0:	movw	r2, #43237	; 0xa8e5
   13fd4:	str	r0, [sp]
   13fd8:	mov	r0, #1
   13fdc:	mov	r1, #75	; 0x4b
   13fe0:	mov	r3, r5
   13fe4:	movt	r2, #1
   13fe8:	bl	11504 <error@plt>
   13fec:	movw	r0, #44714	; 0xaeaa
   13ff0:	movw	r1, #44279	; 0xacf7
   13ff4:	movw	r3, #44822	; 0xaf16
   13ff8:	movw	r2, #867	; 0x363
   13ffc:	movt	r0, #1
   14000:	movt	r1, #1
   14004:	movt	r3, #1
   14008:	bl	11714 <__assert_fail@plt>
   1400c:	movw	r0, #50020	; 0xc364
   14010:	movt	r0, #2
   14014:	ldr	r0, [r0]
   14018:	bl	116b4 <clearerr_unlocked@plt>
   1401c:	bl	115d0 <__errno_location@plt>
   14020:	ldr	r4, [r0]
   14024:	movw	r1, #44898	; 0xaf62
   14028:	mov	r0, #0
   1402c:	mov	r2, #5
   14030:	movt	r1, #1
   14034:	bl	11450 <dcgettext@plt>
   14038:	b	13d6c <__assert_fail@plt+0x2658>
   1403c:	movw	r0, #44709	; 0xaea5
   14040:	movw	r1, #44279	; 0xacf7
   14044:	movw	r3, #44744	; 0xaec8
   14048:	mov	r2, #996	; 0x3e4
   1404c:	movt	r0, #1
   14050:	movt	r1, #1
   14054:	movt	r3, #1
   14058:	bl	11714 <__assert_fail@plt>
   1405c:	bl	115d0 <__errno_location@plt>
   14060:	mov	r1, #75	; 0x4b
   14064:	str	r1, [r0]
   14068:	b	13f60 <__assert_fail@plt+0x284c>
   1406c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14070:	add	fp, sp, #28
   14074:	sub	sp, sp, #36	; 0x24
   14078:	str	r2, [sp, #12]
   1407c:	ldr	r2, [fp, #16]
   14080:	mov	r7, r0
   14084:	ldr	r0, [fp, #20]
   14088:	ldr	r6, [fp, #8]
   1408c:	str	r3, [sp, #8]
   14090:	mov	r8, #0
   14094:	mov	r4, #1
   14098:	mov	r5, #1
   1409c:	mov	r3, r1
   140a0:	mov	sl, #0
   140a4:	str	r1, [sp, #32]
   140a8:	str	r7, [sp, #28]
   140ac:	subs	r2, r2, #1
   140b0:	sbc	r0, r0, #0
   140b4:	str	r2, [sp, #24]
   140b8:	str	r0, [sp, #20]
   140bc:	cmn	r6, #1
   140c0:	beq	14170 <__assert_fail@plt+0x2a5c>
   140c4:	ldr	r0, [sp, #8]
   140c8:	cmp	r6, r0
   140cc:	mov	r0, #0
   140d0:	movwcc	r0, #1
   140d4:	str	r0, [sp, #16]
   140d8:	subs	r0, r6, r7
   140dc:	rscs	r0, r3, #0
   140e0:	bcs	141f8 <__assert_fail@plt+0x2ae4>
   140e4:	ldr	r9, [sp, #12]
   140e8:	mov	r0, r5
   140ec:	cmp	r6, #0
   140f0:	beq	14284 <__assert_fail@plt+0x2b70>
   140f4:	orr	r1, r0, r4
   140f8:	mov	r5, #0
   140fc:	tst	r1, #1
   14100:	beq	14128 <__assert_fail@plt+0x2a14>
   14104:	mvn	r0, r0
   14108:	mov	r1, r9
   1410c:	mov	r2, r6
   14110:	mov	r5, r3
   14114:	orr	r0, r4, r0
   14118:	and	r0, r0, #1
   1411c:	bl	1459c <__assert_fail@plt+0x2e88>
   14120:	mov	r3, r5
   14124:	mov	r5, r0
   14128:	ldr	r9, [fp, #16]
   1412c:	ldr	r1, [fp, #20]
   14130:	and	r0, r4, #1
   14134:	adds	r8, r8, r0
   14138:	adc	sl, sl, #0
   1413c:	eor	r0, r8, r9
   14140:	eor	r1, sl, r1
   14144:	orrs	r0, r0, r1
   14148:	cmpeq	r5, #0
   1414c:	beq	142d8 <__assert_fail@plt+0x2bc4>
   14150:	subs	r7, r7, r6
   14154:	mov	r4, #0
   14158:	sbc	r3, r3, #0
   1415c:	ldr	r0, [sp, #16]
   14160:	mvn	r6, #0
   14164:	cmp	r0, #0
   14168:	beq	140bc <__assert_fail@plt+0x29a8>
   1416c:	b	142a4 <__assert_fail@plt+0x2b90>
   14170:	tst	r5, #1
   14174:	beq	14180 <__assert_fail@plt+0x2a6c>
   14178:	mov	r9, r3
   1417c:	b	141c0 <__assert_fail@plt+0x2aac>
   14180:	mov	r0, #1
   14184:	mov	r2, r7
   14188:	mov	r6, r3
   1418c:	str	r0, [sp]
   14190:	mov	r0, #0
   14194:	bl	114bc <lseek64@plt>
   14198:	and	r0, r0, r1
   1419c:	add	r1, r0, #1
   141a0:	cmn	r0, #1
   141a4:	ldr	r0, [sp, #32]
   141a8:	movwne	r1, #1
   141ac:	orr	r4, r4, r1
   141b0:	movne	r6, r0
   141b4:	ldr	r0, [sp, #28]
   141b8:	mov	r9, r6
   141bc:	movne	r7, r0
   141c0:	ldr	r1, [sp, #12]
   141c4:	ldr	r2, [sp, #8]
   141c8:	mov	r0, #0
   141cc:	bl	174a4 <__assert_fail@plt+0x5d90>
   141d0:	cmn	r0, #1
   141d4:	beq	142e0 <__assert_fail@plt+0x2bcc>
   141d8:	mov	r6, r0
   141dc:	clz	r0, r0
   141e0:	mov	r3, r9
   141e4:	lsr	r0, r0, #5
   141e8:	str	r0, [sp, #16]
   141ec:	subs	r0, r6, r7
   141f0:	rscs	r0, r3, #0
   141f4:	bcc	140e4 <__assert_fail@plt+0x29d0>
   141f8:	ldr	r9, [sp, #12]
   141fc:	tst	r4, #1
   14200:	bne	14210 <__assert_fail@plt+0x2afc>
   14204:	tst	r5, #1
   14208:	mov	r5, #0
   1420c:	beq	14224 <__assert_fail@plt+0x2b10>
   14210:	and	r0, r4, #1
   14214:	mov	r1, r9
   14218:	mov	r2, r7
   1421c:	bl	1459c <__assert_fail@plt+0x2e88>
   14220:	mov	r5, r0
   14224:	and	r0, r4, #1
   14228:	mov	r4, #0
   1422c:	adds	r8, r8, r0
   14230:	ldr	r0, [sp, #24]
   14234:	adc	sl, sl, #0
   14238:	subs	r0, r0, r8
   1423c:	ldr	r0, [sp, #20]
   14240:	sbcs	r0, r0, sl
   14244:	movwcs	r4, #1
   14248:	cmp	r4, #0
   1424c:	cmpeq	r5, #0
   14250:	beq	142a0 <__assert_fail@plt+0x2b8c>
   14254:	add	r9, r9, r7
   14258:	sub	r6, r6, r7
   1425c:	ldr	r7, [sp, #28]
   14260:	subs	r0, r6, r7
   14264:	ldr	r0, [sp, #32]
   14268:	rscs	r0, r0, #0
   1426c:	bcs	141fc <__assert_fail@plt+0x2ae8>
   14270:	ldr	r7, [sp, #28]
   14274:	ldr	r3, [sp, #32]
   14278:	mov	r0, r5
   1427c:	cmp	r6, #0
   14280:	bne	140f4 <__assert_fail@plt+0x29e0>
   14284:	ldr	r9, [fp, #16]
   14288:	mov	r5, r0
   1428c:	ldr	r0, [sp, #16]
   14290:	mvn	r6, #0
   14294:	cmp	r0, #0
   14298:	beq	140bc <__assert_fail@plt+0x29a8>
   1429c:	b	142a4 <__assert_fail@plt+0x2b90>
   142a0:	ldr	r9, [fp, #16]
   142a4:	ldr	r4, [fp, #20]
   142a8:	subs	r0, r8, r9
   142ac:	sbcs	r0, sl, r4
   142b0:	bcs	142d8 <__assert_fail@plt+0x2bc4>
   142b4:	mov	r0, #1
   142b8:	mov	r1, #0
   142bc:	mov	r2, #0
   142c0:	bl	1459c <__assert_fail@plt+0x2e88>
   142c4:	adds	r8, r8, #1
   142c8:	adc	sl, sl, #0
   142cc:	subs	r0, r8, r9
   142d0:	sbcs	r0, sl, r4
   142d4:	bcc	142b4 <__assert_fail@plt+0x2ba0>
   142d8:	sub	sp, fp, #28
   142dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142e0:	bl	115d0 <__errno_location@plt>
   142e4:	ldr	r4, [r0]
   142e8:	movw	r0, #50392	; 0xc4d8
   142ec:	mov	r1, #3
   142f0:	movt	r0, #2
   142f4:	ldr	r2, [r0, #4]
   142f8:	mov	r0, #0
   142fc:	bl	171e0 <__assert_fail@plt+0x5acc>
   14300:	movw	r2, #45018	; 0xafda
   14304:	mov	r3, r0
   14308:	mov	r0, #1
   1430c:	mov	r1, r4
   14310:	movt	r2, #1
   14314:	bl	11504 <error@plt>
   14318:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1431c:	add	fp, sp, #24
   14320:	sub	sp, sp, #32
   14324:	mov	r8, r3
   14328:	mov	r5, r2
   1432c:	mov	r6, r1
   14330:	mov	r7, r0
   14334:	cmp	r0, #0
   14338:	beq	14370 <__assert_fail@plt+0x2c5c>
   1433c:	mov	r0, r7
   14340:	bl	151c0 <__assert_fail@plt+0x3aac>
   14344:	cmp	r0, #0
   14348:	beq	14370 <__assert_fail@plt+0x2c5c>
   1434c:	bl	115d0 <__errno_location@plt>
   14350:	ldr	r4, [r0]
   14354:	cmp	r4, #32
   14358:	bne	14550 <__assert_fail@plt+0x2e3c>
   1435c:	movw	r0, #50392	; 0xc4d8
   14360:	movt	r0, #2
   14364:	ldr	r0, [r0, #24]
   14368:	cmp	r0, #0
   1436c:	beq	14550 <__assert_fail@plt+0x2e3c>
   14370:	cmp	r6, #0
   14374:	blt	143c4 <__assert_fail@plt+0x2cb0>
   14378:	cmp	r7, #0
   1437c:	bne	14390 <__assert_fail@plt+0x2c7c>
   14380:	mov	r0, r6
   14384:	bl	116fc <close@plt>
   14388:	cmn	r0, #1
   1438c:	ble	14548 <__assert_fail@plt+0x2e34>
   14390:	movw	r0, #50392	; 0xc4d8
   14394:	movt	r0, #2
   14398:	ldr	r1, [r0, #56]	; 0x38
   1439c:	cmp	r1, #0
   143a0:	beq	143c4 <__assert_fail@plt+0x2cb0>
   143a4:	ldr	r2, [r0, #60]	; 0x3c
   143a8:	mov	r3, #0
   143ac:	ldr	r7, [r2, r3, lsl #2]
   143b0:	cmp	r7, r6
   143b4:	beq	14504 <__assert_fail@plt+0x2df0>
   143b8:	add	r3, r3, #1
   143bc:	cmp	r3, r1
   143c0:	bcc	143ac <__assert_fail@plt+0x2c98>
   143c4:	cmp	r5, #1
   143c8:	blt	144fc <__assert_fail@plt+0x2de8>
   143cc:	mov	r0, #0
   143d0:	add	r1, sp, #28
   143d4:	mov	r2, #0
   143d8:	str	r0, [sp, #28]
   143dc:	mov	r0, r5
   143e0:	bl	114c8 <waitpid@plt>
   143e4:	cmn	r0, #1
   143e8:	bne	143fc <__assert_fail@plt+0x2ce8>
   143ec:	bl	115d0 <__errno_location@plt>
   143f0:	ldr	r4, [r0]
   143f4:	cmp	r4, #10
   143f8:	bne	14578 <__assert_fail@plt+0x2e64>
   143fc:	ldr	r0, [sp, #28]
   14400:	mov	r1, #16777216	; 0x1000000
   14404:	and	r5, r0, #127	; 0x7f
   14408:	add	r1, r1, r5, lsl #24
   1440c:	cmp	r1, #33554432	; 0x2000000
   14410:	blt	14498 <__assert_fail@plt+0x2d84>
   14414:	cmp	r5, #13
   14418:	beq	144fc <__assert_fail@plt+0x2de8>
   1441c:	add	r6, sp, #9
   14420:	mov	r0, r5
   14424:	mov	r1, r6
   14428:	bl	17ab0 <__assert_fail@plt+0x639c>
   1442c:	cmp	r0, #0
   14430:	beq	14450 <__assert_fail@plt+0x2d3c>
   14434:	movw	r3, #44938	; 0xaf8a
   14438:	add	r0, sp, #9
   1443c:	mov	r1, #1
   14440:	mov	r2, #19
   14444:	str	r5, [sp]
   14448:	movt	r3, #1
   1444c:	bl	115dc <__sprintf_chk@plt>
   14450:	movw	r1, #44941	; 0xaf8d
   14454:	mov	r0, #0
   14458:	mov	r2, #5
   1445c:	movt	r1, #1
   14460:	bl	11450 <dcgettext@plt>
   14464:	mov	r4, r0
   14468:	mov	r0, #0
   1446c:	mov	r1, #3
   14470:	mov	r2, r8
   14474:	bl	171e0 <__assert_fail@plt+0x5acc>
   14478:	mov	r3, r0
   1447c:	movw	r0, #50392	; 0xc4d8
   14480:	str	r6, [sp]
   14484:	movt	r0, #2
   14488:	ldr	r0, [r0, #24]
   1448c:	str	r0, [sp, #4]
   14490:	orr	r0, r5, #128	; 0x80
   14494:	b	144f0 <__assert_fail@plt+0x2ddc>
   14498:	cmp	r5, #0
   1449c:	bne	14520 <__assert_fail@plt+0x2e0c>
   144a0:	ubfx	r5, r0, #8, #8
   144a4:	cmp	r5, #0
   144a8:	beq	144fc <__assert_fail@plt+0x2de8>
   144ac:	movw	r1, #44982	; 0xafb6
   144b0:	mov	r0, #0
   144b4:	mov	r2, #5
   144b8:	movt	r1, #1
   144bc:	bl	11450 <dcgettext@plt>
   144c0:	mov	r4, r0
   144c4:	mov	r0, #0
   144c8:	mov	r1, #3
   144cc:	mov	r2, r8
   144d0:	bl	171e0 <__assert_fail@plt+0x5acc>
   144d4:	mov	r3, r0
   144d8:	movw	r0, #50392	; 0xc4d8
   144dc:	str	r5, [sp]
   144e0:	movt	r0, #2
   144e4:	ldr	r0, [r0, #24]
   144e8:	str	r0, [sp, #4]
   144ec:	mov	r0, r5
   144f0:	mov	r1, #0
   144f4:	mov	r2, r4
   144f8:	bl	11504 <error@plt>
   144fc:	sub	sp, fp, #24
   14500:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14504:	sub	r1, r1, #1
   14508:	str	r1, [r0, #56]	; 0x38
   1450c:	ldr	r0, [r2, r1, lsl #2]
   14510:	str	r0, [r2, r3, lsl #2]
   14514:	cmp	r5, #1
   14518:	bge	143cc <__assert_fail@plt+0x2cb8>
   1451c:	b	144fc <__assert_fail@plt+0x2de8>
   14520:	movw	r1, #45021	; 0xafdd
   14524:	mov	r0, #0
   14528:	mov	r2, #5
   1452c:	movt	r1, #1
   14530:	bl	11450 <dcgettext@plt>
   14534:	ldr	r3, [sp, #28]
   14538:	mov	r2, r0
   1453c:	mov	r0, #1
   14540:	mov	r1, #0
   14544:	bl	11504 <error@plt>
   14548:	bl	115d0 <__errno_location@plt>
   1454c:	ldr	r4, [r0]
   14550:	mov	r0, #0
   14554:	mov	r1, #3
   14558:	mov	r2, r8
   1455c:	bl	171e0 <__assert_fail@plt+0x5acc>
   14560:	movw	r2, #45018	; 0xafda
   14564:	mov	r3, r0
   14568:	mov	r0, #1
   1456c:	mov	r1, r4
   14570:	movt	r2, #1
   14574:	bl	11504 <error@plt>
   14578:	movw	r1, #44912	; 0xaf70
   1457c:	mov	r0, #0
   14580:	mov	r2, #5
   14584:	movt	r1, #1
   14588:	bl	11450 <dcgettext@plt>
   1458c:	mov	r2, r0
   14590:	mov	r0, #1
   14594:	mov	r1, r4
   14598:	bl	11504 <error@plt>
   1459c:	push	{r4, r5, r6, r7, fp, lr}
   145a0:	add	fp, sp, #16
   145a4:	mov	r4, r2
   145a8:	mov	r5, r1
   145ac:	cmp	r0, #0
   145b0:	beq	14624 <__assert_fail@plt+0x2f10>
   145b4:	cmp	r5, #0
   145b8:	cmpeq	r4, #0
   145bc:	bne	145d8 <__assert_fail@plt+0x2ec4>
   145c0:	movw	r0, #50392	; 0xc4d8
   145c4:	movt	r0, #2
   145c8:	ldrb	r1, [r0, #1]
   145cc:	mov	r0, #1
   145d0:	cmp	r1, #0
   145d4:	popne	{r4, r5, r6, r7, fp, pc}
   145d8:	movw	r6, #50392	; 0xc4d8
   145dc:	movw	r7, #49488	; 0xc150
   145e0:	mov	r0, #0
   145e4:	movt	r6, #2
   145e8:	movt	r7, #2
   145ec:	ldr	r2, [r6, #28]
   145f0:	ldr	r3, [r6, #32]
   145f4:	ldr	r1, [r7, #8]
   145f8:	bl	14318 <__assert_fail@plt+0x2c04>
   145fc:	bl	146a0 <__assert_fail@plt+0x2f8c>
   14600:	ldr	r0, [r6, #32]
   14604:	bl	14a08 <__assert_fail@plt+0x32f4>
   14608:	cmn	r0, #1
   1460c:	str	r0, [r7, #8]
   14610:	bgt	14630 <__assert_fail@plt+0x2f1c>
   14614:	bl	115d0 <__errno_location@plt>
   14618:	ldr	r4, [r0]
   1461c:	ldr	r2, [r6, #32]
   14620:	b	1467c <__assert_fail@plt+0x2f68>
   14624:	movw	r0, #49488	; 0xc150
   14628:	movt	r0, #2
   1462c:	ldr	r0, [r0, #8]
   14630:	mov	r1, r5
   14634:	mov	r2, r4
   14638:	bl	15440 <__assert_fail@plt+0x3d2c>
   1463c:	mov	r1, r0
   14640:	mov	r0, #1
   14644:	cmp	r1, r4
   14648:	beq	14674 <__assert_fail@plt+0x2f60>
   1464c:	bl	115d0 <__errno_location@plt>
   14650:	ldr	r4, [r0]
   14654:	movw	r1, #50392	; 0xc4d8
   14658:	movt	r1, #2
   1465c:	cmp	r4, #32
   14660:	bne	14678 <__assert_fail@plt+0x2f64>
   14664:	ldr	r2, [r1, #24]
   14668:	mov	r0, #0
   1466c:	cmp	r2, #0
   14670:	beq	14678 <__assert_fail@plt+0x2f64>
   14674:	pop	{r4, r5, r6, r7, fp, pc}
   14678:	ldr	r2, [r1, #32]
   1467c:	mov	r0, #0
   14680:	mov	r1, #3
   14684:	bl	171e0 <__assert_fail@plt+0x5acc>
   14688:	movw	r2, #45018	; 0xafda
   1468c:	mov	r3, r0
   14690:	mov	r0, #1
   14694:	mov	r1, r4
   14698:	movt	r2, #1
   1469c:	bl	11504 <error@plt>
   146a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   146a4:	add	fp, sp, #24
   146a8:	sub	sp, sp, #8
   146ac:	movw	r7, #50392	; 0xc4d8
   146b0:	movt	r7, #2
   146b4:	ldr	r9, [r7, #32]
   146b8:	cmp	r9, #0
   146bc:	beq	147ac <__assert_fail@plt+0x3098>
   146c0:	ldr	r3, [r7, #12]
   146c4:	cmp	r3, #0
   146c8:	beq	14788 <__assert_fail@plt+0x3074>
   146cc:	movw	r0, #49488	; 0xc150
   146d0:	ldrb	r6, [r7, #3]
   146d4:	ldr	r1, [r7, #52]	; 0x34
   146d8:	ldr	r2, [r7, #36]	; 0x24
   146dc:	movt	r0, #2
   146e0:	ldr	r0, [r0, #4]
   146e4:	cmp	r6, #0
   146e8:	beq	1472c <__assert_fail@plt+0x3018>
   146ec:	sub	r1, r1, #1
   146f0:	sub	r2, r2, #4
   146f4:	mov	r7, #0
   146f8:	ldr	r6, [r2, r3, lsl #2]
   146fc:	add	r6, r6, #1
   14700:	str	r6, [r2, r3, lsl #2]
   14704:	ldrb	r6, [r0, r6]
   14708:	cmp	r6, #0
   1470c:	strb	r6, [r1, r3]
   14710:	bne	149b8 <__assert_fail@plt+0x32a4>
   14714:	str	r7, [r2, r3, lsl #2]
   14718:	ldrb	r6, [r0]
   1471c:	strb	r6, [r1, r3]
   14720:	subs	r3, r3, #1
   14724:	bne	146f8 <__assert_fail@plt+0x2fe4>
   14728:	b	14788 <__assert_fail@plt+0x3074>
   1472c:	rsb	r3, r3, #1
   14730:	mov	r6, #0
   14734:	ldr	r5, [r2, -r3, lsl #2]
   14738:	cmp	r3, #0
   1473c:	add	r5, r5, #1
   14740:	str	r5, [r2, -r3, lsl #2]
   14744:	bne	1475c <__assert_fail@plt+0x3048>
   14748:	ldr	r4, [r2]
   1474c:	add	r4, r0, r4
   14750:	ldrb	r4, [r4, #1]
   14754:	cmp	r4, #0
   14758:	beq	147ac <__assert_fail@plt+0x3098>
   1475c:	ldrb	r5, [r0, r5]
   14760:	cmp	r5, #0
   14764:	strb	r5, [r1, -r3]
   14768:	bne	149b8 <__assert_fail@plt+0x32a4>
   1476c:	rsb	r5, r3, #0
   14770:	str	r6, [r2, r5, lsl #2]
   14774:	ldrb	r5, [r0]
   14778:	strb	r5, [r1, -r3]
   1477c:	add	r3, r3, #1
   14780:	cmp	r3, #1
   14784:	bne	14734 <__assert_fail@plt+0x3020>
   14788:	movw	r1, #44317	; 0xad1d
   1478c:	mov	r0, #0
   14790:	mov	r2, #5
   14794:	movt	r1, #1
   14798:	bl	11450 <dcgettext@plt>
   1479c:	mov	r2, r0
   147a0:	mov	r0, #1
   147a4:	mov	r1, #0
   147a8:	bl	11504 <error@plt>
   147ac:	ldr	r8, [r7, #44]	; 0x2c
   147b0:	cmp	r8, #0
   147b4:	beq	14820 <__assert_fail@plt+0x310c>
   147b8:	add	r1, r8, #2
   147bc:	str	r1, [r7, #44]	; 0x2c
   147c0:	ldr	r0, [r7, #12]
   147c4:	ldr	r5, [r7, #40]	; 0x28
   147c8:	add	r0, r0, #1
   147cc:	str	r0, [r7, #12]
   147d0:	add	r1, r1, #1
   147d4:	cmp	r1, r5
   147d8:	bcc	149e4 <__assert_fail@plt+0x32d0>
   147dc:	mov	r0, r9
   147e0:	bl	18528 <__assert_fail@plt+0x6e14>
   147e4:	mov	r4, r0
   147e8:	cmp	r8, #0
   147ec:	str	r0, [r7, #32]
   147f0:	beq	14844 <__assert_fail@plt+0x3130>
   147f4:	ldr	r1, [r7, #36]	; 0x24
   147f8:	movw	r0, #49488	; 0xc150
   147fc:	ldr	r2, [r7, #40]	; 0x28
   14800:	movt	r0, #2
   14804:	ldr	r0, [r0, #4]
   14808:	ldr	r1, [r1]
   1480c:	add	r5, r2, #1
   14810:	ldrb	r1, [r0, r1]
   14814:	strb	r1, [r4, r2]
   14818:	str	r5, [r7, #40]	; 0x28
   1481c:	b	14864 <__assert_fail@plt+0x3150>
   14820:	ldr	r0, [r7, #8]
   14824:	bl	11588 <strlen@plt>
   14828:	str	r0, [r7, #40]	; 0x28
   1482c:	mov	r5, r0
   14830:	ldr	r0, [r7, #16]
   14834:	cmp	r0, #0
   14838:	beq	149c0 <__assert_fail@plt+0x32ac>
   1483c:	bl	11588 <strlen@plt>
   14840:	b	149c4 <__assert_fail@plt+0x32b0>
   14844:	ldr	r5, [r7, #40]	; 0x28
   14848:	ldr	r1, [r7, #8]
   1484c:	mov	r0, r4
   14850:	mov	r2, r5
   14854:	bl	11408 <memcpy@plt>
   14858:	movw	r0, #49488	; 0xc150
   1485c:	movt	r0, #2
   14860:	ldr	r0, [r0, #4]
   14864:	add	r5, r4, r5
   14868:	str	r5, [r7, #52]	; 0x34
   1486c:	ldr	r6, [r7, #12]
   14870:	ldrb	r1, [r0]
   14874:	mov	r0, r5
   14878:	mov	r2, r6
   1487c:	bl	115f4 <memset@plt>
   14880:	ldr	r1, [r7, #16]
   14884:	cmp	r1, #0
   14888:	beq	14898 <__assert_fail@plt+0x3184>
   1488c:	ldr	r2, [r7, #48]	; 0x30
   14890:	add	r0, r5, r6
   14894:	bl	11408 <memcpy@plt>
   14898:	ldr	r0, [r7, #44]	; 0x2c
   1489c:	mov	r1, #0
   148a0:	strb	r1, [r4, r0]
   148a4:	ldr	r0, [r7, #36]	; 0x24
   148a8:	bl	15374 <__assert_fail@plt+0x3c60>
   148ac:	ldr	r0, [r7, #12]
   148b0:	mov	r1, #4
   148b4:	bl	188f4 <__assert_fail@plt+0x71e0>
   148b8:	str	r0, [r7, #36]	; 0x24
   148bc:	ldr	r9, [r7, #20]
   148c0:	cmp	r9, #0
   148c4:	beq	149b8 <__assert_fail@plt+0x32a4>
   148c8:	cmp	r8, #0
   148cc:	bne	149e8 <__assert_fail@plt+0x32d4>
   148d0:	mov	r5, r0
   148d4:	mov	r0, r9
   148d8:	bl	11588 <strlen@plt>
   148dc:	mov	r6, r0
   148e0:	ldr	r4, [r7, #12]
   148e4:	ldr	r0, [r7, #52]	; 0x34
   148e8:	mov	r1, r9
   148ec:	mov	r2, r6
   148f0:	add	r0, r0, r4
   148f4:	sub	r0, r0, r6
   148f8:	bl	11408 <memcpy@plt>
   148fc:	cmp	r6, #0
   14900:	beq	149b8 <__assert_fail@plt+0x32a4>
   14904:	add	r0, r5, r4, lsl #2
   14908:	cmp	r6, #4
   1490c:	bcc	14998 <__assert_fail@plt+0x3284>
   14910:	lsl	r1, r4, #2
   14914:	add	r7, r9, r6
   14918:	add	r3, r5, r4, lsl #2
   1491c:	sub	r1, r1, r6, lsl #2
   14920:	add	r1, r5, r1
   14924:	cmp	r1, r7
   14928:	cmpcc	r9, r3
   1492c:	bcc	14998 <__assert_fail@plt+0x3284>
   14930:	and	r1, r6, #3
   14934:	sub	r3, r3, #16
   14938:	sub	r7, r7, #4
   1493c:	vmov.i32	q8, #255	; 0x000000ff
   14940:	vmvn.i32	q9, #47	; 0x0000002f
   14944:	mvn	r5, #15
   14948:	sub	r2, r6, r1
   1494c:	sub	r6, r1, r6
   14950:	add	r0, r0, r6, lsl #2
   14954:	add	r6, sp, #4
   14958:	ldr	r4, [r7], #-4
   1495c:	subs	r2, r2, #4
   14960:	str	r4, [sp, #4]
   14964:	vld1.32	{d20[0]}, [r6 :32]
   14968:	vmovl.u8	q10, d20
   1496c:	vrev64.16	d20, d20
   14970:	vmovl.u16	q10, d20
   14974:	vand	q10, q10, q8
   14978:	vadd.i32	q10, q10, q9
   1497c:	vrev64.32	q10, q10
   14980:	vext.8	q10, q10, q10, #8
   14984:	vst1.32	{d20-d21}, [r3], r5
   14988:	bne	14958 <__assert_fail@plt+0x3244>
   1498c:	cmp	r1, #0
   14990:	bne	1499c <__assert_fail@plt+0x3288>
   14994:	b	149b8 <__assert_fail@plt+0x32a4>
   14998:	mov	r1, r6
   1499c:	sub	r0, r0, #4
   149a0:	sub	r2, r9, #1
   149a4:	ldrb	r3, [r2, r1]
   149a8:	subs	r1, r1, #1
   149ac:	sub	r3, r3, #48	; 0x30
   149b0:	str	r3, [r0], #-4
   149b4:	bne	149a4 <__assert_fail@plt+0x3290>
   149b8:	sub	sp, fp, #24
   149bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149c0:	mov	r0, #0
   149c4:	ldr	r2, [r7, #12]
   149c8:	add	r1, r0, r5
   149cc:	add	r1, r1, r2
   149d0:	str	r1, [r7, #44]	; 0x2c
   149d4:	str	r0, [r7, #48]	; 0x30
   149d8:	add	r1, r1, #1
   149dc:	cmp	r1, r5
   149e0:	bcs	147dc <__assert_fail@plt+0x30c8>
   149e4:	bl	18a40 <__assert_fail@plt+0x732c>
   149e8:	movw	r0, #44271	; 0xacef
   149ec:	movw	r1, #44279	; 0xacf7
   149f0:	movw	r3, #44291	; 0xad03
   149f4:	movw	r2, #409	; 0x199
   149f8:	movt	r0, #1
   149fc:	movt	r1, #1
   14a00:	movt	r3, #1
   14a04:	bl	11714 <__assert_fail@plt>
   14a08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a0c:	add	fp, sp, #24
   14a10:	sub	sp, sp, #112	; 0x70
   14a14:	movw	r5, #50392	; 0xc4d8
   14a18:	mov	r4, r0
   14a1c:	movt	r5, #2
   14a20:	ldr	r0, [r5, #24]
   14a24:	cmp	r0, #0
   14a28:	beq	14b24 <__assert_fail@plt+0x3410>
   14a2c:	movw	r0, #44440	; 0xad98
   14a30:	movt	r0, #1
   14a34:	bl	1151c <getenv@plt>
   14a38:	mov	r6, r0
   14a3c:	movw	r0, #44454	; 0xada6
   14a40:	mov	r1, r4
   14a44:	mov	r2, #1
   14a48:	movt	r0, #1
   14a4c:	bl	115ac <setenv@plt>
   14a50:	movw	r8, #44446	; 0xad9e
   14a54:	cmp	r6, #0
   14a58:	movt	r8, #1
   14a5c:	movne	r8, r6
   14a60:	cmp	r0, #0
   14a64:	bne	14d8c <__assert_fail@plt+0x3678>
   14a68:	ldrb	r0, [r5, #2]
   14a6c:	cmp	r0, #1
   14a70:	bne	14abc <__assert_fail@plt+0x33a8>
   14a74:	movw	r0, #50020	; 0xc364
   14a78:	movw	r1, #44499	; 0xadd3
   14a7c:	mov	r2, #5
   14a80:	movt	r0, #2
   14a84:	movt	r1, #1
   14a88:	ldr	r6, [r0]
   14a8c:	mov	r0, #0
   14a90:	bl	11450 <dcgettext@plt>
   14a94:	mov	r7, r0
   14a98:	mov	r0, #0
   14a9c:	mov	r1, #3
   14aa0:	mov	r2, r4
   14aa4:	bl	171e0 <__assert_fail@plt+0x5acc>
   14aa8:	mov	r3, r0
   14aac:	mov	r0, r6
   14ab0:	mov	r1, #1
   14ab4:	mov	r2, r7
   14ab8:	bl	11624 <__fprintf_chk@plt>
   14abc:	add	r0, sp, #8
   14ac0:	bl	11648 <pipe@plt>
   14ac4:	cmp	r0, #0
   14ac8:	bne	14da0 <__assert_fail@plt+0x368c>
   14acc:	bl	11684 <fork@plt>
   14ad0:	cmp	r0, #0
   14ad4:	beq	14c1c <__assert_fail@plt+0x3508>
   14ad8:	mov	r4, r0
   14adc:	cmn	r0, #1
   14ae0:	beq	14db4 <__assert_fail@plt+0x36a0>
   14ae4:	ldr	r0, [sp, #8]
   14ae8:	bl	116fc <close@plt>
   14aec:	cmp	r0, #0
   14af0:	bne	14dc8 <__assert_fail@plt+0x36b4>
   14af4:	str	r4, [r5, #28]
   14af8:	ldr	r1, [r5, #56]	; 0x38
   14afc:	ldr	r0, [r5, #64]	; 0x40
   14b00:	cmp	r1, r0
   14b04:	bne	14ce0 <__assert_fail@plt+0x35cc>
   14b08:	ldr	r0, [r5, #60]	; 0x3c
   14b0c:	add	r1, r5, #64	; 0x40
   14b10:	mov	r2, #4
   14b14:	bl	1868c <__assert_fail@plt+0x6f78>
   14b18:	str	r0, [r5, #60]	; 0x3c
   14b1c:	ldr	r1, [r5, #56]	; 0x38
   14b20:	b	14ce4 <__assert_fail@plt+0x35d0>
   14b24:	ldrb	r0, [r5, #2]
   14b28:	cmp	r0, #1
   14b2c:	bne	14b74 <__assert_fail@plt+0x3460>
   14b30:	movw	r0, #50020	; 0xc364
   14b34:	movw	r1, #44348	; 0xad3c
   14b38:	mov	r2, #5
   14b3c:	movt	r0, #2
   14b40:	movt	r1, #1
   14b44:	ldr	r5, [r0]
   14b48:	mov	r0, #0
   14b4c:	bl	11450 <dcgettext@plt>
   14b50:	mov	r6, r0
   14b54:	mov	r0, #4
   14b58:	mov	r1, r4
   14b5c:	bl	16f64 <__assert_fail@plt+0x5850>
   14b60:	mov	r3, r0
   14b64:	mov	r0, r5
   14b68:	mov	r1, #1
   14b6c:	mov	r2, r6
   14b70:	bl	11624 <__fprintf_chk@plt>
   14b74:	mov	r0, r4
   14b78:	mov	r1, #65	; 0x41
   14b7c:	movw	r2, #438	; 0x1b6
   14b80:	bl	1525c <__assert_fail@plt+0x3b48>
   14b84:	mov	r5, r0
   14b88:	cmp	r0, #0
   14b8c:	blt	14c10 <__assert_fail@plt+0x34fc>
   14b90:	add	r2, sp, #8
   14b94:	mov	r0, #3
   14b98:	mov	r1, r5
   14b9c:	bl	11498 <__fxstat64@plt>
   14ba0:	cmp	r0, #0
   14ba4:	bne	14ddc <__assert_fail@plt+0x36c8>
   14ba8:	movw	r0, #50032	; 0xc370
   14bac:	ldr	r1, [sp, #104]	; 0x68
   14bb0:	ldr	r7, [sp, #108]	; 0x6c
   14bb4:	movt	r0, #2
   14bb8:	ldrd	r2, [r0, #96]	; 0x60
   14bbc:	eor	r3, r3, r7
   14bc0:	eor	r1, r2, r1
   14bc4:	orrs	r1, r1, r3
   14bc8:	bne	14be8 <__assert_fail@plt+0x34d4>
   14bcc:	ldrd	r0, [r0]
   14bd0:	ldr	r2, [sp, #8]
   14bd4:	ldr	r3, [sp, #12]
   14bd8:	eor	r1, r1, r3
   14bdc:	eor	r0, r0, r2
   14be0:	orrs	r0, r0, r1
   14be4:	beq	14e0c <__assert_fail@plt+0x36f8>
   14be8:	mov	r0, r5
   14bec:	mov	r2, #0
   14bf0:	mov	r3, #0
   14bf4:	bl	1142c <ftruncate64@plt>
   14bf8:	cmp	r0, #0
   14bfc:	beq	14c10 <__assert_fail@plt+0x34fc>
   14c00:	ldr	r0, [sp, #24]
   14c04:	and	r0, r0, #61440	; 0xf000
   14c08:	cmp	r0, #32768	; 0x8000
   14c0c:	beq	14e44 <__assert_fail@plt+0x3730>
   14c10:	mov	r0, r5
   14c14:	sub	sp, fp, #24
   14c18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c1c:	ldr	r0, [r5, #56]	; 0x38
   14c20:	cmp	r0, #0
   14c24:	beq	14c50 <__assert_fail@plt+0x353c>
   14c28:	mov	r4, #0
   14c2c:	ldr	r0, [r5, #60]	; 0x3c
   14c30:	ldr	r0, [r0, r4, lsl #2]
   14c34:	bl	116fc <close@plt>
   14c38:	cmp	r0, #0
   14c3c:	bne	14d04 <__assert_fail@plt+0x35f0>
   14c40:	ldr	r0, [r5, #56]	; 0x38
   14c44:	add	r4, r4, #1
   14c48:	cmp	r4, r0
   14c4c:	bcc	14c2c <__assert_fail@plt+0x3518>
   14c50:	ldr	r0, [sp, #12]
   14c54:	bl	116fc <close@plt>
   14c58:	cmp	r0, #0
   14c5c:	bne	14d18 <__assert_fail@plt+0x3604>
   14c60:	ldr	r0, [sp, #8]
   14c64:	cmp	r0, #0
   14c68:	bne	14d44 <__assert_fail@plt+0x3630>
   14c6c:	movw	r1, #50264	; 0xc458
   14c70:	mov	r0, #2
   14c74:	mov	r2, #0
   14c78:	mov	r4, #0
   14c7c:	movt	r1, #2
   14c80:	bl	113d8 <sigprocmask@plt>
   14c84:	mov	r0, r8
   14c88:	bl	1501c <__assert_fail@plt+0x3908>
   14c8c:	ldr	r3, [r5, #24]
   14c90:	movw	r2, #44621	; 0xae4d
   14c94:	mov	r1, r0
   14c98:	mov	r0, r8
   14c9c:	str	r4, [sp]
   14ca0:	movt	r2, #1
   14ca4:	bl	11690 <execl@plt>
   14ca8:	bl	115d0 <__errno_location@plt>
   14cac:	ldr	r4, [r0]
   14cb0:	movw	r1, #44624	; 0xae50
   14cb4:	mov	r0, #0
   14cb8:	mov	r2, #5
   14cbc:	movt	r1, #1
   14cc0:	bl	11450 <dcgettext@plt>
   14cc4:	mov	r2, r0
   14cc8:	ldr	r0, [r5, #24]
   14ccc:	mov	r1, r4
   14cd0:	mov	r3, r8
   14cd4:	str	r0, [sp]
   14cd8:	mov	r0, #1
   14cdc:	bl	11504 <error@plt>
   14ce0:	ldr	r0, [r5, #60]	; 0x3c
   14ce4:	add	r2, r1, #1
   14ce8:	str	r2, [r5, #56]	; 0x38
   14cec:	ldr	r2, [sp, #12]
   14cf0:	str	r2, [r0, r1, lsl #2]
   14cf4:	ldr	r5, [sp, #12]
   14cf8:	mov	r0, r5
   14cfc:	sub	sp, fp, #24
   14d00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d04:	bl	115d0 <__errno_location@plt>
   14d08:	ldr	r4, [r0]
   14d0c:	movw	r1, #44545	; 0xae01
   14d10:	movt	r1, #1
   14d14:	b	14d28 <__assert_fail@plt+0x3614>
   14d18:	bl	115d0 <__errno_location@plt>
   14d1c:	ldr	r4, [r0]
   14d20:	movw	r1, #44564	; 0xae14
   14d24:	movt	r1, #1
   14d28:	mov	r0, #0
   14d2c:	mov	r2, #5
   14d30:	bl	11450 <dcgettext@plt>
   14d34:	mov	r2, r0
   14d38:	mov	r0, #1
   14d3c:	mov	r1, r4
   14d40:	bl	11504 <error@plt>
   14d44:	mov	r1, #0
   14d48:	bl	1145c <dup2@plt>
   14d4c:	cmp	r0, #0
   14d50:	bne	14d78 <__assert_fail@plt+0x3664>
   14d54:	ldr	r0, [sp, #8]
   14d58:	bl	116fc <close@plt>
   14d5c:	cmp	r0, #0
   14d60:	beq	14c6c <__assert_fail@plt+0x3558>
   14d64:	bl	115d0 <__errno_location@plt>
   14d68:	ldr	r4, [r0]
   14d6c:	movw	r1, #44602	; 0xae3a
   14d70:	movt	r1, #1
   14d74:	b	14d28 <__assert_fail@plt+0x3614>
   14d78:	bl	115d0 <__errno_location@plt>
   14d7c:	ldr	r4, [r0]
   14d80:	movw	r1, #44584	; 0xae28
   14d84:	movt	r1, #1
   14d88:	b	14d28 <__assert_fail@plt+0x3614>
   14d8c:	bl	115d0 <__errno_location@plt>
   14d90:	ldr	r4, [r0]
   14d94:	movw	r1, #44459	; 0xadab
   14d98:	movt	r1, #1
   14d9c:	b	14d28 <__assert_fail@plt+0x3614>
   14da0:	bl	115d0 <__errno_location@plt>
   14da4:	ldr	r4, [r0]
   14da8:	movw	r1, #44523	; 0xadeb
   14dac:	movt	r1, #1
   14db0:	b	14d28 <__assert_fail@plt+0x3614>
   14db4:	bl	115d0 <__errno_location@plt>
   14db8:	ldr	r4, [r0]
   14dbc:	movw	r1, #44658	; 0xae72
   14dc0:	movt	r1, #1
   14dc4:	b	14d28 <__assert_fail@plt+0x3614>
   14dc8:	bl	115d0 <__errno_location@plt>
   14dcc:	ldr	r4, [r0]
   14dd0:	movw	r1, #44682	; 0xae8a
   14dd4:	movt	r1, #1
   14dd8:	b	14d28 <__assert_fail@plt+0x3614>
   14ddc:	bl	115d0 <__errno_location@plt>
   14de0:	ldr	r5, [r0]
   14de4:	movw	r1, #44366	; 0xad4e
   14de8:	mov	r0, #0
   14dec:	mov	r2, #5
   14df0:	movt	r1, #1
   14df4:	bl	11450 <dcgettext@plt>
   14df8:	mov	r6, r0
   14dfc:	mov	r0, #4
   14e00:	mov	r1, r4
   14e04:	bl	16f64 <__assert_fail@plt+0x5850>
   14e08:	b	14e74 <__assert_fail@plt+0x3760>
   14e0c:	movw	r1, #44384	; 0xad60
   14e10:	mov	r0, #0
   14e14:	mov	r2, #5
   14e18:	movt	r1, #1
   14e1c:	bl	11450 <dcgettext@plt>
   14e20:	mov	r5, r0
   14e24:	mov	r0, #4
   14e28:	mov	r1, r4
   14e2c:	bl	16f64 <__assert_fail@plt+0x5850>
   14e30:	mov	r3, r0
   14e34:	mov	r0, #1
   14e38:	mov	r1, #0
   14e3c:	mov	r2, r5
   14e40:	bl	11504 <error@plt>
   14e44:	bl	115d0 <__errno_location@plt>
   14e48:	ldr	r5, [r0]
   14e4c:	movw	r1, #44419	; 0xad83
   14e50:	mov	r0, #0
   14e54:	mov	r2, #5
   14e58:	movt	r1, #1
   14e5c:	bl	11450 <dcgettext@plt>
   14e60:	mov	r6, r0
   14e64:	mov	r0, #0
   14e68:	mov	r1, #3
   14e6c:	mov	r2, r4
   14e70:	bl	171e0 <__assert_fail@plt+0x5acc>
   14e74:	mov	r3, r0
   14e78:	mov	r0, #1
   14e7c:	mov	r1, r5
   14e80:	mov	r2, r6
   14e84:	bl	11504 <error@plt>
   14e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e8c:	add	fp, sp, #28
   14e90:	sub	sp, sp, #12
   14e94:	mov	r4, r0
   14e98:	add	r0, r0, r1, lsl #4
   14e9c:	mov	r5, r1
   14ea0:	mov	r9, #0
   14ea4:	mov	r7, r0
   14ea8:	ldr	r1, [r7, #4]!
   14eac:	cmn	r1, #1
   14eb0:	ble	14ec0 <__assert_fail@plt+0x37ac>
   14eb4:	and	r0, r9, #1
   14eb8:	sub	sp, fp, #28
   14ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec0:	sub	r8, r2, #1
   14ec4:	cmp	r5, #0
   14ec8:	mov	r9, #0
   14ecc:	str	r0, [sp, #4]
   14ed0:	str	r7, [sp, #8]
   14ed4:	mov	r6, r8
   14ed8:	subne	r6, r5, #1
   14edc:	ldr	r0, [r4, r5, lsl #4]
   14ee0:	cmn	r1, #1
   14ee4:	bne	14f14 <__assert_fail@plt+0x3800>
   14ee8:	b	14f28 <__assert_fail@plt+0x3814>
   14eec:	ldr	r7, [sp, #8]
   14ef0:	mov	r0, #0
   14ef4:	str	r0, [sl]
   14ef8:	mvn	r0, #1
   14efc:	str	r0, [r9]
   14f00:	mov	r9, #1
   14f04:	ldr	r1, [r7]
   14f08:	ldr	r0, [r4, r5, lsl #4]
   14f0c:	cmn	r1, #1
   14f10:	beq	14f28 <__assert_fail@plt+0x3814>
   14f14:	movw	r1, #3073	; 0xc01
   14f18:	bl	1525c <__assert_fail@plt+0x3b48>
   14f1c:	cmn	r0, #1
   14f20:	ble	14f34 <__assert_fail@plt+0x3820>
   14f24:	b	14f9c <__assert_fail@plt+0x3888>
   14f28:	bl	14a08 <__assert_fail@plt+0x32f4>
   14f2c:	cmn	r0, #1
   14f30:	bgt	14f9c <__assert_fail@plt+0x3888>
   14f34:	bl	115d0 <__errno_location@plt>
   14f38:	ldr	r1, [r0]
   14f3c:	mov	r7, r0
   14f40:	sub	r0, r1, #23
   14f44:	cmp	r0, #1
   14f48:	bhi	14fe0 <__assert_fail@plt+0x38cc>
   14f4c:	add	sl, r4, r6, lsl #4
   14f50:	mov	r9, sl
   14f54:	ldr	r0, [r9, #4]!
   14f58:	cmn	r0, #1
   14f5c:	bgt	14f7c <__assert_fail@plt+0x3868>
   14f60:	cmp	r6, #0
   14f64:	mov	r0, r8
   14f68:	subne	r0, r6, #1
   14f6c:	cmp	r0, r5
   14f70:	mov	r6, r0
   14f74:	bne	14f4c <__assert_fail@plt+0x3838>
   14f78:	b	14fe0 <__assert_fail@plt+0x38cc>
   14f7c:	ldr	r0, [sl, #8]!
   14f80:	bl	151c0 <__assert_fail@plt+0x3aac>
   14f84:	cmp	r0, #0
   14f88:	beq	14eec <__assert_fail@plt+0x37d8>
   14f8c:	ldr	r2, [r4, r6, lsl #4]
   14f90:	ldr	r4, [r7]
   14f94:	mov	r0, #0
   14f98:	b	14fec <__assert_fail@plt+0x38d8>
   14f9c:	movw	r1, #44910	; 0xaf6e
   14fa0:	str	r0, [r7]
   14fa4:	movt	r1, #1
   14fa8:	bl	11378 <fdopen@plt>
   14fac:	ldr	r2, [sp, #4]
   14fb0:	cmp	r0, #0
   14fb4:	str	r0, [r2, #8]
   14fb8:	beq	1500c <__assert_fail@plt+0x38f8>
   14fbc:	movw	r0, #50392	; 0xc4d8
   14fc0:	movt	r0, #2
   14fc4:	ldr	r1, [r0, #28]
   14fc8:	str	r1, [r2, #12]
   14fcc:	mov	r1, #0
   14fd0:	str	r1, [r0, #28]
   14fd4:	and	r0, r9, #1
   14fd8:	sub	sp, fp, #28
   14fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe0:	ldr	r2, [r4, r5, lsl #4]
   14fe4:	mov	r0, #0
   14fe8:	mov	r4, r1
   14fec:	mov	r1, #3
   14ff0:	bl	171e0 <__assert_fail@plt+0x5acc>
   14ff4:	movw	r2, #45018	; 0xafda
   14ff8:	mov	r3, r0
   14ffc:	mov	r0, #1
   15000:	mov	r1, r4
   15004:	movt	r2, #1
   15008:	bl	11504 <error@plt>
   1500c:	bl	115d0 <__errno_location@plt>
   15010:	ldr	r2, [r4, r5, lsl #4]
   15014:	ldr	r4, [r0]
   15018:	b	14f94 <__assert_fail@plt+0x3880>
   1501c:	sub	r0, r0, #1
   15020:	ldrb	r3, [r0, #1]!
   15024:	cmp	r3, #47	; 0x2f
   15028:	beq	15020 <__assert_fail@plt+0x390c>
   1502c:	mov	r2, #0
   15030:	mov	r1, r0
   15034:	uxtb	r3, r3
   15038:	cmp	r3, #47	; 0x2f
   1503c:	beq	15064 <__assert_fail@plt+0x3950>
   15040:	cmp	r3, #0
   15044:	bxeq	lr
   15048:	tst	r2, #1
   1504c:	mov	r2, #0
   15050:	movne	r0, r1
   15054:	ldrb	r3, [r1, #1]!
   15058:	uxtb	r3, r3
   1505c:	cmp	r3, #47	; 0x2f
   15060:	bne	15040 <__assert_fail@plt+0x392c>
   15064:	ldrb	r3, [r1, #1]!
   15068:	mov	r2, #1
   1506c:	uxtb	r3, r3
   15070:	cmp	r3, #47	; 0x2f
   15074:	bne	15040 <__assert_fail@plt+0x392c>
   15078:	b	15064 <__assert_fail@plt+0x3950>
   1507c:	push	{r4, sl, fp, lr}
   15080:	add	fp, sp, #8
   15084:	mov	r4, r0
   15088:	bl	11588 <strlen@plt>
   1508c:	mov	r1, r0
   15090:	sub	r2, r4, #1
   15094:	mov	r0, r1
   15098:	cmp	r1, #2
   1509c:	popcc	{r4, sl, fp, pc}
   150a0:	ldrb	r3, [r2, r0]
   150a4:	sub	r1, r0, #1
   150a8:	cmp	r3, #47	; 0x2f
   150ac:	beq	15094 <__assert_fail@plt+0x3980>
   150b0:	pop	{r4, sl, fp, pc}
   150b4:	movw	r1, #50460	; 0xc51c
   150b8:	movt	r1, #2
   150bc:	str	r0, [r1, #4]
   150c0:	bx	lr
   150c4:	movw	r1, #50460	; 0xc51c
   150c8:	movt	r1, #2
   150cc:	strb	r0, [r1]
   150d0:	bx	lr
   150d4:	push	{r4, r5, r6, sl, fp, lr}
   150d8:	add	fp, sp, #16
   150dc:	sub	sp, sp, #8
   150e0:	movw	r0, #50020	; 0xc364
   150e4:	movt	r0, #2
   150e8:	ldr	r0, [r0]
   150ec:	bl	1990c <__assert_fail@plt+0x81f8>
   150f0:	cmp	r0, #0
   150f4:	beq	1511c <__assert_fail@plt+0x3a08>
   150f8:	movw	r5, #50460	; 0xc51c
   150fc:	movt	r5, #2
   15100:	ldrb	r0, [r5]
   15104:	cmp	r0, #0
   15108:	beq	15148 <__assert_fail@plt+0x3a34>
   1510c:	bl	115d0 <__errno_location@plt>
   15110:	ldr	r0, [r0]
   15114:	cmp	r0, #32
   15118:	bne	15148 <__assert_fail@plt+0x3a34>
   1511c:	movw	r0, #50016	; 0xc360
   15120:	movt	r0, #2
   15124:	ldr	r0, [r0]
   15128:	bl	1990c <__assert_fail@plt+0x81f8>
   1512c:	cmp	r0, #0
   15130:	subeq	sp, fp, #16
   15134:	popeq	{r4, r5, r6, sl, fp, pc}
   15138:	movw	r0, #49504	; 0xc160
   1513c:	movt	r0, #2
   15140:	ldr	r0, [r0]
   15144:	bl	113fc <_exit@plt>
   15148:	movw	r1, #44898	; 0xaf62
   1514c:	mov	r0, #0
   15150:	mov	r2, #5
   15154:	movt	r1, #1
   15158:	bl	11450 <dcgettext@plt>
   1515c:	ldr	r6, [r5, #4]
   15160:	mov	r4, r0
   15164:	bl	115d0 <__errno_location@plt>
   15168:	ldr	r5, [r0]
   1516c:	cmp	r6, #0
   15170:	bne	1518c <__assert_fail@plt+0x3a78>
   15174:	movw	r2, #45018	; 0xafda
   15178:	mov	r0, #0
   1517c:	mov	r1, r5
   15180:	mov	r3, r4
   15184:	movt	r2, #1
   15188:	b	151ac <__assert_fail@plt+0x3a98>
   1518c:	mov	r0, r6
   15190:	bl	17104 <__assert_fail@plt+0x59f0>
   15194:	movw	r2, #43237	; 0xa8e5
   15198:	mov	r3, r0
   1519c:	str	r4, [sp]
   151a0:	mov	r0, #0
   151a4:	mov	r1, r5
   151a8:	movt	r2, #1
   151ac:	bl	11504 <error@plt>
   151b0:	movw	r0, #49504	; 0xc160
   151b4:	movt	r0, #2
   151b8:	ldr	r0, [r0]
   151bc:	bl	113fc <_exit@plt>
   151c0:	push	{r4, r5, r6, sl, fp, lr}
   151c4:	add	fp, sp, #16
   151c8:	sub	sp, sp, #8
   151cc:	mov	r4, r0
   151d0:	bl	11618 <fileno@plt>
   151d4:	cmn	r0, #1
   151d8:	ble	1524c <__assert_fail@plt+0x3b38>
   151dc:	mov	r0, r4
   151e0:	bl	1154c <__freading@plt>
   151e4:	cmp	r0, #0
   151e8:	beq	15214 <__assert_fail@plt+0x3b00>
   151ec:	mov	r0, r4
   151f0:	bl	11618 <fileno@plt>
   151f4:	mov	r1, #1
   151f8:	mov	r2, #0
   151fc:	mov	r3, #0
   15200:	str	r1, [sp]
   15204:	bl	114bc <lseek64@plt>
   15208:	and	r0, r0, r1
   1520c:	cmn	r0, #1
   15210:	beq	1524c <__assert_fail@plt+0x3b38>
   15214:	mov	r0, r4
   15218:	bl	1530c <__assert_fail@plt+0x3bf8>
   1521c:	cmp	r0, #0
   15220:	beq	1524c <__assert_fail@plt+0x3b38>
   15224:	bl	115d0 <__errno_location@plt>
   15228:	ldr	r6, [r0]
   1522c:	mov	r5, r0
   15230:	mov	r0, r4
   15234:	bl	1163c <fclose@plt>
   15238:	cmp	r6, #0
   1523c:	strne	r6, [r5]
   15240:	mvnne	r0, #0
   15244:	sub	sp, fp, #16
   15248:	pop	{r4, r5, r6, sl, fp, pc}
   1524c:	mov	r0, r4
   15250:	sub	sp, fp, #16
   15254:	pop	{r4, r5, r6, sl, fp, lr}
   15258:	b	1163c <fclose@plt>
   1525c:	sub	sp, sp, #8
   15260:	push	{fp, lr}
   15264:	mov	fp, sp
   15268:	sub	sp, sp, #8
   1526c:	str	r2, [fp, #8]
   15270:	mov	r2, #0
   15274:	tst	r1, #64	; 0x40
   15278:	str	r3, [fp, #12]
   1527c:	addne	r2, fp, #8
   15280:	orrne	r2, r2, #4
   15284:	strne	r2, [sp, #4]
   15288:	ldrne	r2, [fp, #8]
   1528c:	bl	11510 <open64@plt>
   15290:	bl	17dc4 <__assert_fail@plt+0x66b0>
   15294:	mov	sp, fp
   15298:	pop	{fp, lr}
   1529c:	add	sp, sp, #8
   152a0:	bx	lr
   152a4:	push	{r4, r5, r6, r7, fp, lr}
   152a8:	add	fp, sp, #16
   152ac:	mov	r5, r0
   152b0:	mov	r0, r1
   152b4:	mov	r1, r2
   152b8:	mov	r2, r3
   152bc:	bl	11510 <open64@plt>
   152c0:	mov	r4, r0
   152c4:	cmp	r0, r5
   152c8:	beq	15304 <__assert_fail@plt+0x3bf0>
   152cc:	cmp	r4, #0
   152d0:	blt	15304 <__assert_fail@plt+0x3bf0>
   152d4:	mov	r0, r4
   152d8:	mov	r1, r5
   152dc:	bl	1145c <dup2@plt>
   152e0:	mov	r5, r0
   152e4:	bl	115d0 <__errno_location@plt>
   152e8:	ldr	r7, [r0]
   152ec:	mov	r6, r0
   152f0:	mov	r0, r4
   152f4:	bl	116fc <close@plt>
   152f8:	mov	r0, r5
   152fc:	str	r7, [r6]
   15300:	pop	{r4, r5, r6, r7, fp, pc}
   15304:	mov	r0, r4
   15308:	pop	{r4, r5, r6, r7, fp, pc}
   1530c:	push	{r4, sl, fp, lr}
   15310:	add	fp, sp, #8
   15314:	sub	sp, sp, #8
   15318:	mov	r4, r0
   1531c:	cmp	r0, #0
   15320:	beq	1533c <__assert_fail@plt+0x3c28>
   15324:	mov	r0, r4
   15328:	bl	1154c <__freading@plt>
   1532c:	cmp	r0, #0
   15330:	ldrbne	r0, [r4, #1]
   15334:	tstne	r0, #1
   15338:	bne	1534c <__assert_fail@plt+0x3c38>
   1533c:	mov	r0, r4
   15340:	sub	sp, fp, #8
   15344:	pop	{r4, sl, fp, lr}
   15348:	b	113cc <fflush@plt>
   1534c:	mov	r0, #1
   15350:	mov	r2, #0
   15354:	mov	r3, #0
   15358:	str	r0, [sp]
   1535c:	mov	r0, r4
   15360:	bl	1539c <__assert_fail@plt+0x3c88>
   15364:	mov	r0, r4
   15368:	sub	sp, fp, #8
   1536c:	pop	{r4, sl, fp, lr}
   15370:	b	113cc <fflush@plt>
   15374:	push	{r4, r5, r6, sl, fp, lr}
   15378:	add	fp, sp, #16
   1537c:	mov	r4, r0
   15380:	bl	115d0 <__errno_location@plt>
   15384:	ldr	r6, [r0]
   15388:	mov	r5, r0
   1538c:	mov	r0, r4
   15390:	bl	113f0 <free@plt>
   15394:	str	r6, [r5]
   15398:	pop	{r4, r5, r6, sl, fp, pc}
   1539c:	push	{r4, r5, r6, r7, fp, lr}
   153a0:	add	fp, sp, #16
   153a4:	sub	sp, sp, #8
   153a8:	mov	r4, r0
   153ac:	ldr	r0, [r0, #4]
   153b0:	mov	r5, r3
   153b4:	mov	r6, r2
   153b8:	ldr	r1, [r4, #8]
   153bc:	cmp	r1, r0
   153c0:	bne	153dc <__assert_fail@plt+0x3cc8>
   153c4:	ldrd	r0, [r4, #16]
   153c8:	cmp	r1, r0
   153cc:	bne	153dc <__assert_fail@plt+0x3cc8>
   153d0:	ldr	r0, [r4, #36]	; 0x24
   153d4:	cmp	r0, #0
   153d8:	beq	153f4 <__assert_fail@plt+0x3ce0>
   153dc:	mov	r0, r4
   153e0:	mov	r2, r6
   153e4:	mov	r3, r5
   153e8:	sub	sp, fp, #16
   153ec:	pop	{r4, r5, r6, r7, fp, lr}
   153f0:	b	11654 <fseeko64@plt>
   153f4:	ldr	r7, [fp, #8]
   153f8:	mov	r0, r4
   153fc:	bl	11618 <fileno@plt>
   15400:	mov	r2, r6
   15404:	mov	r3, r5
   15408:	str	r7, [sp]
   1540c:	bl	114bc <lseek64@plt>
   15410:	and	r2, r0, r1
   15414:	cmn	r2, #1
   15418:	mvneq	r0, #0
   1541c:	subeq	sp, fp, #16
   15420:	popeq	{r4, r5, r6, r7, fp, pc}
   15424:	strd	r0, [r4, #80]	; 0x50
   15428:	ldr	r0, [r4]
   1542c:	bic	r0, r0, #16
   15430:	str	r0, [r4]
   15434:	mov	r0, #0
   15438:	sub	sp, fp, #16
   1543c:	pop	{r4, r5, r6, r7, fp, pc}
   15440:	push	{r4, r5, r6, r7, fp, lr}
   15444:	add	fp, sp, #16
   15448:	cmp	r2, #0
   1544c:	moveq	r4, #0
   15450:	moveq	r0, r4
   15454:	popeq	{r4, r5, r6, r7, fp, pc}
   15458:	mov	r5, r2
   1545c:	mov	r6, r1
   15460:	mov	r7, r0
   15464:	mov	r4, #0
   15468:	mov	r0, r7
   1546c:	mov	r1, r6
   15470:	mov	r2, r5
   15474:	bl	17508 <__assert_fail@plt+0x5df4>
   15478:	cmn	r0, #1
   1547c:	beq	15498 <__assert_fail@plt+0x3d84>
   15480:	cmp	r0, #0
   15484:	beq	154a0 <__assert_fail@plt+0x3d8c>
   15488:	subs	r5, r5, r0
   1548c:	add	r6, r6, r0
   15490:	add	r4, r0, r4
   15494:	bne	15468 <__assert_fail@plt+0x3d54>
   15498:	mov	r0, r4
   1549c:	pop	{r4, r5, r6, r7, fp, pc}
   154a0:	bl	115d0 <__errno_location@plt>
   154a4:	mov	r1, #28
   154a8:	str	r1, [r0]
   154ac:	mov	r0, r4
   154b0:	pop	{r4, r5, r6, r7, fp, pc}
   154b4:	push	{r4, r5, r6, sl, fp, lr}
   154b8:	add	fp, sp, #16
   154bc:	mov	r5, r0
   154c0:	mov	r0, #0
   154c4:	mov	r4, r1
   154c8:	add	r6, r2, #19
   154cc:	strb	r0, [r2, #20]
   154d0:	mov	r0, r5
   154d4:	mov	r1, r4
   154d8:	mov	r2, #10
   154dc:	mov	r3, #0
   154e0:	bl	19d58 <__assert_fail@plt+0x8644>
   154e4:	add	r2, r0, r0, lsl #2
   154e8:	sub	r2, r5, r2, lsl #1
   154ec:	orr	r2, r2, #48	; 0x30
   154f0:	strb	r2, [r6], #-1
   154f4:	rsbs	r2, r5, #9
   154f8:	mov	r5, r0
   154fc:	rscs	r2, r4, #0
   15500:	mov	r4, r1
   15504:	bcc	154d0 <__assert_fail@plt+0x3dbc>
   15508:	add	r0, r6, #1
   1550c:	pop	{r4, r5, r6, sl, fp, pc}
   15510:	push	{r4, r5, fp, lr}
   15514:	add	fp, sp, #8
   15518:	cmp	r0, #0
   1551c:	beq	155b0 <__assert_fail@plt+0x3e9c>
   15520:	mov	r1, #47	; 0x2f
   15524:	mov	r4, r0
   15528:	bl	1169c <strrchr@plt>
   1552c:	cmp	r0, #0
   15530:	mov	r5, r4
   15534:	addne	r5, r0, #1
   15538:	sub	r0, r5, r4
   1553c:	cmp	r0, #7
   15540:	blt	15594 <__assert_fail@plt+0x3e80>
   15544:	movw	r1, #45471	; 0xb19f
   15548:	sub	r0, r5, #7
   1554c:	mov	r2, #7
   15550:	movt	r1, #1
   15554:	bl	116e4 <strncmp@plt>
   15558:	cmp	r0, #0
   1555c:	bne	15594 <__assert_fail@plt+0x3e80>
   15560:	movw	r1, #45479	; 0xb1a7
   15564:	mov	r0, r5
   15568:	mov	r2, #3
   1556c:	movt	r1, #1
   15570:	bl	116e4 <strncmp@plt>
   15574:	cmp	r0, #0
   15578:	beq	15584 <__assert_fail@plt+0x3e70>
   1557c:	mov	r4, r5
   15580:	b	15594 <__assert_fail@plt+0x3e80>
   15584:	movw	r0, #50000	; 0xc350
   15588:	add	r4, r5, #3
   1558c:	movt	r0, #2
   15590:	str	r4, [r0]
   15594:	movw	r0, #50004	; 0xc354
   15598:	movt	r0, #2
   1559c:	str	r4, [r0]
   155a0:	movw	r0, #50468	; 0xc524
   155a4:	movt	r0, #2
   155a8:	str	r4, [r0]
   155ac:	pop	{r4, r5, fp, pc}
   155b0:	movw	r0, #50016	; 0xc360
   155b4:	mov	r1, #55	; 0x37
   155b8:	mov	r2, #1
   155bc:	movt	r0, #2
   155c0:	ldr	r3, [r0]
   155c4:	movw	r0, #45415	; 0xb167
   155c8:	movt	r0, #1
   155cc:	bl	114b0 <fwrite@plt>
   155d0:	bl	116f0 <abort@plt>
   155d4:	push	{r4, r5, r6, sl, fp, lr}
   155d8:	add	fp, sp, #16
   155dc:	mov	r4, r0
   155e0:	movw	r0, #50472	; 0xc528
   155e4:	movt	r0, #2
   155e8:	cmp	r4, #0
   155ec:	moveq	r4, r0
   155f0:	bl	115d0 <__errno_location@plt>
   155f4:	ldr	r6, [r0]
   155f8:	mov	r5, r0
   155fc:	mov	r0, r4
   15600:	mov	r1, #48	; 0x30
   15604:	bl	18940 <__assert_fail@plt+0x722c>
   15608:	str	r6, [r5]
   1560c:	pop	{r4, r5, r6, sl, fp, pc}
   15610:	movw	r1, #50472	; 0xc528
   15614:	cmp	r0, #0
   15618:	movt	r1, #2
   1561c:	movne	r1, r0
   15620:	ldr	r0, [r1]
   15624:	bx	lr
   15628:	movw	r2, #50472	; 0xc528
   1562c:	cmp	r0, #0
   15630:	movt	r2, #2
   15634:	movne	r2, r0
   15638:	str	r1, [r2]
   1563c:	bx	lr
   15640:	movw	r3, #50472	; 0xc528
   15644:	cmp	r0, #0
   15648:	movt	r3, #2
   1564c:	movne	r3, r0
   15650:	ubfx	r0, r1, #5, #3
   15654:	and	r1, r1, #31
   15658:	add	r0, r3, r0, lsl #2
   1565c:	ldr	r3, [r0, #8]
   15660:	eor	r2, r2, r3, lsr r1
   15664:	and	r2, r2, #1
   15668:	eor	r2, r3, r2, lsl r1
   1566c:	str	r2, [r0, #8]
   15670:	mov	r0, #1
   15674:	and	r0, r0, r3, lsr r1
   15678:	bx	lr
   1567c:	movw	r2, #50472	; 0xc528
   15680:	cmp	r0, #0
   15684:	movt	r2, #2
   15688:	movne	r2, r0
   1568c:	ldr	r0, [r2, #4]
   15690:	str	r1, [r2, #4]
   15694:	bx	lr
   15698:	movw	r3, #50472	; 0xc528
   1569c:	cmp	r0, #0
   156a0:	movt	r3, #2
   156a4:	movne	r3, r0
   156a8:	cmp	r1, #0
   156ac:	mov	r0, #10
   156b0:	cmpne	r2, #0
   156b4:	str	r0, [r3]
   156b8:	bne	156c8 <__assert_fail@plt+0x3fb4>
   156bc:	push	{fp, lr}
   156c0:	mov	fp, sp
   156c4:	bl	116f0 <abort@plt>
   156c8:	str	r1, [r3, #40]	; 0x28
   156cc:	str	r2, [r3, #44]	; 0x2c
   156d0:	bx	lr
   156d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156d8:	add	fp, sp, #28
   156dc:	sub	sp, sp, #20
   156e0:	mov	r7, r0
   156e4:	ldr	r0, [fp, #8]
   156e8:	movw	r5, #50472	; 0xc528
   156ec:	mov	r8, r3
   156f0:	mov	r9, r2
   156f4:	mov	sl, r1
   156f8:	movt	r5, #2
   156fc:	cmp	r0, #0
   15700:	movne	r5, r0
   15704:	bl	115d0 <__errno_location@plt>
   15708:	mov	r4, r0
   1570c:	ldm	r5, {r0, r1}
   15710:	ldr	r2, [r5, #40]	; 0x28
   15714:	ldr	r3, [r5, #44]	; 0x2c
   15718:	add	r5, r5, #8
   1571c:	ldr	r6, [r4]
   15720:	stm	sp, {r0, r1, r5}
   15724:	str	r2, [sp, #12]
   15728:	str	r3, [sp, #16]
   1572c:	mov	r0, r7
   15730:	mov	r1, sl
   15734:	mov	r2, r9
   15738:	mov	r3, r8
   1573c:	bl	1574c <__assert_fail@plt+0x4038>
   15740:	str	r6, [r4]
   15744:	sub	sp, fp, #28
   15748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1574c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15750:	add	fp, sp, #28
   15754:	sub	sp, sp, #156	; 0x9c
   15758:	str	r0, [sp, #76]	; 0x4c
   1575c:	ldr	r0, [fp, #12]
   15760:	mov	r6, r1
   15764:	str	r3, [sp, #84]	; 0x54
   15768:	str	r2, [fp, #-84]	; 0xffffffac
   1576c:	and	r1, r0, #4
   15770:	str	r1, [sp, #24]
   15774:	and	r1, r0, #1
   15778:	str	r1, [sp, #28]
   1577c:	ubfx	r8, r0, #1, #1
   15780:	bl	114d4 <__ctype_get_mb_cur_max@plt>
   15784:	str	r0, [sp, #32]
   15788:	ldr	r0, [fp, #24]
   1578c:	ldr	r7, [fp, #8]
   15790:	mov	r1, #0
   15794:	mov	r2, #0
   15798:	mov	r4, #1
   1579c:	str	r1, [sp, #52]	; 0x34
   157a0:	str	r0, [sp, #72]	; 0x48
   157a4:	ldr	r0, [fp, #20]
   157a8:	str	r0, [sp, #68]	; 0x44
   157ac:	mov	r0, #0
   157b0:	str	r0, [sp, #48]	; 0x30
   157b4:	mov	r0, #0
   157b8:	str	r0, [sp, #92]	; 0x5c
   157bc:	mov	r0, #0
   157c0:	str	r0, [fp, #-76]	; 0xffffffb4
   157c4:	mov	r0, #0
   157c8:	cmp	r7, #10
   157cc:	bhi	16ab4 <__assert_fail@plt+0x53a0>
   157d0:	add	r1, pc, #28
   157d4:	mov	sl, r6
   157d8:	ldr	r6, [sp, #76]	; 0x4c
   157dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   157e0:	ldr	lr, [sp, #84]	; 0x54
   157e4:	mov	r9, #0
   157e8:	mov	r3, #1
   157ec:	mov	r5, #0
   157f0:	ldr	pc, [r1, r7, lsl #2]
   157f4:	andeq	r5, r1, r4, asr #17
   157f8:	andeq	r5, r1, r0, lsl #18
   157fc:	ldrdeq	r5, [r1], -r4
   15800:			; <UNDEFINED> instruction: 0x000158bc
   15804:	strdeq	r5, [r1], -r4
   15808:	andeq	r5, r1, r8, lsr #18
   1580c:	andeq	r5, r1, r4, ror #17
   15810:	andeq	r5, r1, r4, lsr fp
   15814:	andeq	r5, r1, r0, lsr #16
   15818:	andeq	r5, r1, r0, lsr #16
   1581c:	andeq	r5, r1, r8, asr #21
   15820:	mov	r9, r4
   15824:	movw	r4, #45559	; 0xb1f7
   15828:	mov	r5, r8
   1582c:	mov	r8, r2
   15830:	mov	r0, #0
   15834:	mov	r2, #5
   15838:	movt	r4, #1
   1583c:	mov	r1, r4
   15840:	bl	11450 <dcgettext@plt>
   15844:	cmp	r0, r4
   15848:	str	r0, [sp, #68]	; 0x44
   1584c:	bne	159dc <__assert_fail@plt+0x42c8>
   15850:	bl	19990 <__assert_fail@plt+0x827c>
   15854:	ldrb	r1, [r0]
   15858:	and	r1, r1, #223	; 0xdf
   1585c:	cmp	r1, #71	; 0x47
   15860:	beq	159a8 <__assert_fail@plt+0x4294>
   15864:	cmp	r1, #85	; 0x55
   15868:	bne	159c0 <__assert_fail@plt+0x42ac>
   1586c:	ldrb	r1, [r0, #1]
   15870:	and	r1, r1, #223	; 0xdf
   15874:	cmp	r1, #84	; 0x54
   15878:	bne	159c0 <__assert_fail@plt+0x42ac>
   1587c:	ldrb	r1, [r0, #2]
   15880:	and	r1, r1, #223	; 0xdf
   15884:	cmp	r1, #70	; 0x46
   15888:	bne	159c0 <__assert_fail@plt+0x42ac>
   1588c:	ldrb	r1, [r0, #3]
   15890:	cmp	r1, #45	; 0x2d
   15894:	ldrbeq	r1, [r0, #4]
   15898:	cmpeq	r1, #56	; 0x38
   1589c:	bne	159c0 <__assert_fail@plt+0x42ac>
   158a0:	ldrb	r0, [r0, #5]
   158a4:	cmp	r0, #0
   158a8:	movw	r0, #45563	; 0xb1fb
   158ac:	movt	r0, #1
   158b0:	str	r0, [sp, #68]	; 0x44
   158b4:	bne	159c0 <__assert_fail@plt+0x42ac>
   158b8:	b	159dc <__assert_fail@plt+0x42c8>
   158bc:	mov	r0, #1
   158c0:	b	15900 <__assert_fail@plt+0x41ec>
   158c4:	mov	r7, #0
   158c8:	mov	r9, #0
   158cc:	mov	r3, r0
   158d0:	b	159a0 <__assert_fail@plt+0x428c>
   158d4:	tst	r8, #1
   158d8:	bne	15900 <__assert_fail@plt+0x41ec>
   158dc:	mov	r3, r0
   158e0:	b	15958 <__assert_fail@plt+0x4244>
   158e4:	mov	r0, #1
   158e8:	mov	r9, #0
   158ec:	mov	r7, #5
   158f0:	b	1593c <__assert_fail@plt+0x4228>
   158f4:	mov	r3, #1
   158f8:	tst	r8, #1
   158fc:	beq	15958 <__assert_fail@plt+0x4244>
   15900:	mov	r1, #1
   15904:	mov	r9, #0
   15908:	mov	r7, #2
   1590c:	mov	r3, r0
   15910:	mov	r5, #1
   15914:	str	r1, [fp, #-76]	; 0xffffffb4
   15918:	movw	r1, #45561	; 0xb1f9
   1591c:	movt	r1, #1
   15920:	str	r1, [sp, #92]	; 0x5c
   15924:	b	15b34 <__assert_fail@plt+0x4420>
   15928:	mov	r7, #5
   1592c:	tst	r8, #1
   15930:	beq	15978 <__assert_fail@plt+0x4264>
   15934:	mov	r0, #1
   15938:	mov	r9, #0
   1593c:	str	r0, [fp, #-76]	; 0xffffffb4
   15940:	movw	r0, #44656	; 0xae70
   15944:	mov	r3, #1
   15948:	mov	r5, #1
   1594c:	movt	r0, #1
   15950:	str	r0, [sp, #92]	; 0x5c
   15954:	b	15b34 <__assert_fail@plt+0x4420>
   15958:	cmp	sl, #0
   1595c:	mov	r9, #1
   15960:	mov	r7, #2
   15964:	movne	r0, #39	; 0x27
   15968:	strbne	r0, [r6]
   1596c:	movw	r0, #45561	; 0xb1f9
   15970:	movt	r0, #1
   15974:	b	15994 <__assert_fail@plt+0x4280>
   15978:	cmp	sl, #0
   1597c:	mov	r9, #1
   15980:	mov	r3, #1
   15984:	movne	r0, #34	; 0x22
   15988:	strbne	r0, [r6]
   1598c:	movw	r0, #44656	; 0xae70
   15990:	movt	r0, #1
   15994:	str	r0, [sp, #92]	; 0x5c
   15998:	mov	r0, #1
   1599c:	str	r0, [fp, #-76]	; 0xffffffb4
   159a0:	mov	r5, #0
   159a4:	b	15b34 <__assert_fail@plt+0x4420>
   159a8:	ldrb	r1, [r0, #1]
   159ac:	and	r1, r1, #223	; 0xdf
   159b0:	cmp	r1, #66	; 0x42
   159b4:	ldrbeq	r1, [r0, #2]
   159b8:	cmpeq	r1, #49	; 0x31
   159bc:	beq	168dc <__assert_fail@plt+0x51c8>
   159c0:	movw	r0, #45561	; 0xb1f9
   159c4:	movw	r1, #44656	; 0xae70
   159c8:	cmp	r7, #9
   159cc:	movt	r0, #1
   159d0:	movt	r1, #1
   159d4:	moveq	r0, r1
   159d8:	str	r0, [sp, #68]	; 0x44
   159dc:	movw	r4, #45561	; 0xb1f9
   159e0:	mov	r0, #0
   159e4:	mov	r2, #5
   159e8:	movt	r4, #1
   159ec:	mov	r1, r4
   159f0:	bl	11450 <dcgettext@plt>
   159f4:	cmp	r0, r4
   159f8:	str	r0, [sp, #72]	; 0x48
   159fc:	beq	15a0c <__assert_fail@plt+0x42f8>
   15a00:	mov	r4, r9
   15a04:	mov	r2, r8
   15a08:	b	15ac4 <__assert_fail@plt+0x43b0>
   15a0c:	bl	19990 <__assert_fail@plt+0x827c>
   15a10:	ldrb	r1, [r0]
   15a14:	mov	r4, r9
   15a18:	and	r1, r1, #223	; 0xdf
   15a1c:	cmp	r1, #71	; 0x47
   15a20:	beq	15a7c <__assert_fail@plt+0x4368>
   15a24:	cmp	r1, #85	; 0x55
   15a28:	mov	r2, r8
   15a2c:	bne	15aa4 <__assert_fail@plt+0x4390>
   15a30:	ldrb	r1, [r0, #1]
   15a34:	and	r1, r1, #223	; 0xdf
   15a38:	cmp	r1, #84	; 0x54
   15a3c:	bne	15aa4 <__assert_fail@plt+0x4390>
   15a40:	ldrb	r1, [r0, #2]
   15a44:	and	r1, r1, #223	; 0xdf
   15a48:	cmp	r1, #70	; 0x46
   15a4c:	ldrbeq	r1, [r0, #3]
   15a50:	cmpeq	r1, #45	; 0x2d
   15a54:	bne	15aa4 <__assert_fail@plt+0x4390>
   15a58:	ldrb	r1, [r0, #4]
   15a5c:	cmp	r1, #56	; 0x38
   15a60:	ldrbeq	r0, [r0, #5]
   15a64:	cmpeq	r0, #0
   15a68:	bne	15aa4 <__assert_fail@plt+0x4390>
   15a6c:	movw	r0, #45567	; 0xb1ff
   15a70:	movt	r0, #1
   15a74:	str	r0, [sp, #72]	; 0x48
   15a78:	b	15ac4 <__assert_fail@plt+0x43b0>
   15a7c:	ldrb	r1, [r0, #1]
   15a80:	mov	r2, r8
   15a84:	and	r1, r1, #223	; 0xdf
   15a88:	cmp	r1, #66	; 0x42
   15a8c:	bne	15aa4 <__assert_fail@plt+0x4390>
   15a90:	ldrb	r1, [r0, #2]
   15a94:	cmp	r1, #49	; 0x31
   15a98:	ldrbeq	r1, [r0, #3]
   15a9c:	cmpeq	r1, #56	; 0x38
   15aa0:	beq	16920 <__assert_fail@plt+0x520c>
   15aa4:	movw	r0, #45561	; 0xb1f9
   15aa8:	cmp	r7, #9
   15aac:	movt	r0, #1
   15ab0:	mov	r1, r0
   15ab4:	movw	r0, #44656	; 0xae70
   15ab8:	movt	r0, #1
   15abc:	moveq	r1, r0
   15ac0:	str	r1, [sp, #72]	; 0x48
   15ac4:	mov	r8, r5
   15ac8:	mov	r9, #0
   15acc:	tst	r8, #1
   15ad0:	mov	r5, r8
   15ad4:	str	r2, [fp, #-48]	; 0xffffffd0
   15ad8:	bne	15b10 <__assert_fail@plt+0x43fc>
   15adc:	ldr	r0, [sp, #68]	; 0x44
   15ae0:	ldrb	r0, [r0]
   15ae4:	cmp	r0, #0
   15ae8:	beq	15b10 <__assert_fail@plt+0x43fc>
   15aec:	ldr	r1, [sp, #68]	; 0x44
   15af0:	mov	r9, #0
   15af4:	add	r1, r1, #1
   15af8:	cmp	r9, sl
   15afc:	strbcc	r0, [r6, r9]
   15b00:	ldrb	r0, [r1, r9]
   15b04:	add	r9, r9, #1
   15b08:	cmp	r0, #0
   15b0c:	bne	15af8 <__assert_fail@plt+0x43e4>
   15b10:	ldr	r8, [sp, #72]	; 0x48
   15b14:	mov	r0, r8
   15b18:	bl	11588 <strlen@plt>
   15b1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b20:	ldr	lr, [sp, #84]	; 0x54
   15b24:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15b28:	str	r0, [fp, #-76]	; 0xffffffb4
   15b2c:	str	r8, [sp, #92]	; 0x5c
   15b30:	mov	r3, #1
   15b34:	ldr	r0, [fp, #16]
   15b38:	str	r7, [fp, #-64]	; 0xffffffc0
   15b3c:	str	r5, [fp, #-72]	; 0xffffffb8
   15b40:	str	r3, [sp, #80]	; 0x50
   15b44:	cmp	r0, #0
   15b48:	movwne	r0, #1
   15b4c:	and	r0, r0, r5
   15b50:	str	r0, [fp, #-88]	; 0xffffffa8
   15b54:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15b58:	cmp	r0, #0
   15b5c:	movwne	r0, #1
   15b60:	subs	r7, r7, #2
   15b64:	and	r1, r0, r5
   15b68:	str	r7, [fp, #-80]	; 0xffffffb0
   15b6c:	and	r1, r3, r1
   15b70:	str	r1, [sp, #40]	; 0x28
   15b74:	clz	r1, r7
   15b78:	lsr	r1, r1, #5
   15b7c:	and	r1, r1, r5
   15b80:	eor	r5, r5, #1
   15b84:	str	r1, [sp, #36]	; 0x24
   15b88:	mov	r1, r7
   15b8c:	str	r5, [sp, #88]	; 0x58
   15b90:	mov	r7, #0
   15b94:	movwne	r1, #1
   15b98:	orr	r5, r1, r5
   15b9c:	and	r1, r1, r3
   15ba0:	and	r0, r0, r1
   15ba4:	str	r5, [sp, #60]	; 0x3c
   15ba8:	str	r1, [fp, #-68]	; 0xffffffbc
   15bac:	str	r0, [fp, #-60]	; 0xffffffc4
   15bb0:	eor	r0, r3, #1
   15bb4:	str	r0, [sp, #44]	; 0x2c
   15bb8:	cmn	lr, #1
   15bbc:	beq	15bcc <__assert_fail@plt+0x44b8>
   15bc0:	cmp	r7, lr
   15bc4:	bne	15bd8 <__assert_fail@plt+0x44c4>
   15bc8:	b	16850 <__assert_fail@plt+0x513c>
   15bcc:	ldrb	r0, [ip, r7]
   15bd0:	cmp	r0, #0
   15bd4:	beq	16858 <__assert_fail@plt+0x5144>
   15bd8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15bdc:	mov	r8, #0
   15be0:	str	r4, [fp, #-52]	; 0xffffffcc
   15be4:	str	r2, [fp, #-48]	; 0xffffffd0
   15be8:	cmp	r0, #0
   15bec:	beq	15c20 <__assert_fail@plt+0x450c>
   15bf0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15bf4:	add	r4, r7, r0
   15bf8:	cmp	r0, #2
   15bfc:	bcc	15c18 <__assert_fail@plt+0x4504>
   15c00:	cmn	lr, #1
   15c04:	bne	15c18 <__assert_fail@plt+0x4504>
   15c08:	mov	r0, ip
   15c0c:	bl	11588 <strlen@plt>
   15c10:	ldr	ip, [fp, #-84]	; 0xffffffac
   15c14:	mov	lr, r0
   15c18:	cmp	r4, lr
   15c1c:	bls	15c38 <__assert_fail@plt+0x4524>
   15c20:	mov	r0, #0
   15c24:	str	r0, [fp, #-56]	; 0xffffffc8
   15c28:	ldrb	r5, [ip, r7]
   15c2c:	cmp	r5, #126	; 0x7e
   15c30:	bls	15c88 <__assert_fail@plt+0x4574>
   15c34:	b	16090 <__assert_fail@plt+0x497c>
   15c38:	ldr	r1, [sp, #92]	; 0x5c
   15c3c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15c40:	add	r0, ip, r7
   15c44:	mov	r4, lr
   15c48:	bl	11444 <memcmp@plt>
   15c4c:	ldr	r2, [sp, #88]	; 0x58
   15c50:	cmp	r0, #0
   15c54:	mov	r1, r0
   15c58:	movwne	r1, #1
   15c5c:	orr	r1, r1, r2
   15c60:	tst	r1, #1
   15c64:	beq	16964 <__assert_fail@plt+0x5250>
   15c68:	ldr	ip, [fp, #-84]	; 0xffffffac
   15c6c:	clz	r0, r0
   15c70:	mov	lr, r4
   15c74:	lsr	r0, r0, #5
   15c78:	str	r0, [fp, #-56]	; 0xffffffc8
   15c7c:	ldrb	r5, [ip, r7]
   15c80:	cmp	r5, #126	; 0x7e
   15c84:	bhi	16090 <__assert_fail@plt+0x497c>
   15c88:	add	r3, pc, #16
   15c8c:	mov	r4, #1
   15c90:	mov	r2, #110	; 0x6e
   15c94:	mov	r0, #97	; 0x61
   15c98:	mov	r1, #0
   15c9c:	ldr	pc, [r3, r5, lsl #2]
   15ca0:	andeq	r5, r1, r0, ror pc
   15ca4:	muleq	r1, r0, r0
   15ca8:	muleq	r1, r0, r0
   15cac:	muleq	r1, r0, r0
   15cb0:	muleq	r1, r0, r0
   15cb4:	muleq	r1, r0, r0
   15cb8:	muleq	r1, r0, r0
   15cbc:	andeq	r6, r1, ip, ror #2
   15cc0:	andeq	r5, r1, r0, asr pc
   15cc4:	andeq	r5, r1, r8, lsr pc
   15cc8:	andeq	r5, r1, ip, asr pc
   15ccc:	andeq	r5, r1, ip, ror #31
   15cd0:	andeq	r5, r1, r0, lsr pc
   15cd4:	andeq	r5, r1, r8, asr pc
   15cd8:	muleq	r1, r0, r0
   15cdc:	muleq	r1, r0, r0
   15ce0:	muleq	r1, r0, r0
   15ce4:	muleq	r1, r0, r0
   15ce8:	muleq	r1, r0, r0
   15cec:	muleq	r1, r0, r0
   15cf0:	muleq	r1, r0, r0
   15cf4:	muleq	r1, r0, r0
   15cf8:	muleq	r1, r0, r0
   15cfc:	muleq	r1, r0, r0
   15d00:	muleq	r1, r0, r0
   15d04:	muleq	r1, r0, r0
   15d08:	muleq	r1, r0, r0
   15d0c:	muleq	r1, r0, r0
   15d10:	muleq	r1, r0, r0
   15d14:	muleq	r1, r0, r0
   15d18:	muleq	r1, r0, r0
   15d1c:	muleq	r1, r0, r0
   15d20:	andeq	r6, r1, r8, ror #1
   15d24:	andeq	r6, r1, ip, ror #1
   15d28:	andeq	r6, r1, ip, ror #1
   15d2c:			; <UNDEFINED> instruction: 0x00015ebc
   15d30:	andeq	r6, r1, ip, ror #1
   15d34:	muleq	r1, ip, lr
   15d38:	andeq	r6, r1, ip, ror #1
   15d3c:	strdeq	r5, [r1], -r4
   15d40:	andeq	r6, r1, ip, ror #1
   15d44:	andeq	r6, r1, ip, ror #1
   15d48:	andeq	r6, r1, ip, ror #1
   15d4c:	muleq	r1, ip, lr
   15d50:	muleq	r1, ip, lr
   15d54:	muleq	r1, ip, lr
   15d58:	muleq	r1, ip, lr
   15d5c:	muleq	r1, ip, lr
   15d60:	muleq	r1, ip, lr
   15d64:	muleq	r1, ip, lr
   15d68:	muleq	r1, ip, lr
   15d6c:	muleq	r1, ip, lr
   15d70:	muleq	r1, ip, lr
   15d74:	muleq	r1, ip, lr
   15d78:	muleq	r1, ip, lr
   15d7c:	muleq	r1, ip, lr
   15d80:	muleq	r1, ip, lr
   15d84:	muleq	r1, ip, lr
   15d88:	muleq	r1, ip, lr
   15d8c:	andeq	r6, r1, ip, ror #1
   15d90:	andeq	r6, r1, ip, ror #1
   15d94:	andeq	r6, r1, ip, ror #1
   15d98:	andeq	r6, r1, ip, ror #1
   15d9c:			; <UNDEFINED> instruction: 0x00015fb0
   15da0:	muleq	r1, r0, r0
   15da4:	muleq	r1, ip, lr
   15da8:	muleq	r1, ip, lr
   15dac:	muleq	r1, ip, lr
   15db0:	muleq	r1, ip, lr
   15db4:	muleq	r1, ip, lr
   15db8:	muleq	r1, ip, lr
   15dbc:	muleq	r1, ip, lr
   15dc0:	muleq	r1, ip, lr
   15dc4:	muleq	r1, ip, lr
   15dc8:	muleq	r1, ip, lr
   15dcc:	muleq	r1, ip, lr
   15dd0:	muleq	r1, ip, lr
   15dd4:	muleq	r1, ip, lr
   15dd8:	muleq	r1, ip, lr
   15ddc:	muleq	r1, ip, lr
   15de0:	muleq	r1, ip, lr
   15de4:	muleq	r1, ip, lr
   15de8:	muleq	r1, ip, lr
   15dec:	muleq	r1, ip, lr
   15df0:	muleq	r1, ip, lr
   15df4:	muleq	r1, ip, lr
   15df8:	muleq	r1, ip, lr
   15dfc:	muleq	r1, ip, lr
   15e00:	muleq	r1, ip, lr
   15e04:	muleq	r1, ip, lr
   15e08:	muleq	r1, ip, lr
   15e0c:	andeq	r6, r1, ip, ror #1
   15e10:	strdeq	r5, [r1], -ip
   15e14:	muleq	r1, ip, lr
   15e18:	andeq	r6, r1, ip, ror #1
   15e1c:	muleq	r1, ip, lr
   15e20:	andeq	r6, r1, ip, ror #1
   15e24:	muleq	r1, ip, lr
   15e28:	muleq	r1, ip, lr
   15e2c:	muleq	r1, ip, lr
   15e30:	muleq	r1, ip, lr
   15e34:	muleq	r1, ip, lr
   15e38:	muleq	r1, ip, lr
   15e3c:	muleq	r1, ip, lr
   15e40:	muleq	r1, ip, lr
   15e44:	muleq	r1, ip, lr
   15e48:	muleq	r1, ip, lr
   15e4c:	muleq	r1, ip, lr
   15e50:	muleq	r1, ip, lr
   15e54:	muleq	r1, ip, lr
   15e58:	muleq	r1, ip, lr
   15e5c:	muleq	r1, ip, lr
   15e60:	muleq	r1, ip, lr
   15e64:	muleq	r1, ip, lr
   15e68:	muleq	r1, ip, lr
   15e6c:	muleq	r1, ip, lr
   15e70:	muleq	r1, ip, lr
   15e74:	muleq	r1, ip, lr
   15e78:	muleq	r1, ip, lr
   15e7c:	muleq	r1, ip, lr
   15e80:	muleq	r1, ip, lr
   15e84:	muleq	r1, ip, lr
   15e88:	muleq	r1, ip, lr
   15e8c:	ldrdeq	r5, [r1], -ip
   15e90:	andeq	r6, r1, ip, ror #1
   15e94:	ldrdeq	r5, [r1], -ip
   15e98:			; <UNDEFINED> instruction: 0x00015ebc
   15e9c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15ea0:	cmp	r0, #0
   15ea4:	beq	16180 <__assert_fail@plt+0x4a6c>
   15ea8:	ldr	r0, [fp, #16]
   15eac:	cmp	r0, #0
   15eb0:	mov	r0, r5
   15eb4:	bne	16190 <__assert_fail@plt+0x4a7c>
   15eb8:	b	161b0 <__assert_fail@plt+0x4a9c>
   15ebc:	mov	r4, #0
   15ec0:	cmp	r7, #0
   15ec4:	beq	160e8 <__assert_fail@plt+0x49d4>
   15ec8:	mov	r8, #0
   15ecc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15ed0:	cmp	r0, #0
   15ed4:	bne	15ea8 <__assert_fail@plt+0x4794>
   15ed8:	b	16180 <__assert_fail@plt+0x4a6c>
   15edc:	mov	r4, #0
   15ee0:	cmn	lr, #1
   15ee4:	beq	160c0 <__assert_fail@plt+0x49ac>
   15ee8:	cmp	r7, #0
   15eec:	bne	15ec8 <__assert_fail@plt+0x47b4>
   15ef0:	cmp	lr, #1
   15ef4:	beq	160e8 <__assert_fail@plt+0x49d4>
   15ef8:	b	15ec8 <__assert_fail@plt+0x47b4>
   15efc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15f00:	cmp	r0, #2
   15f04:	bne	16118 <__assert_fail@plt+0x4a04>
   15f08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15f0c:	tst	r0, #1
   15f10:	bne	16978 <__assert_fail@plt+0x5264>
   15f14:	mov	r8, #0
   15f18:	mov	r0, #92	; 0x5c
   15f1c:	mov	r4, #0
   15f20:	cmp	r8, #0
   15f24:	beq	16138 <__assert_fail@plt+0x4a24>
   15f28:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15f2c:	b	1622c <__assert_fail@plt+0x4b18>
   15f30:	mov	r0, #102	; 0x66
   15f34:	b	1616c <__assert_fail@plt+0x4a58>
   15f38:	mov	r2, #116	; 0x74
   15f3c:	ldr	r0, [sp, #60]	; 0x3c
   15f40:	tst	r0, #1
   15f44:	mov	r0, r2
   15f48:	bne	1616c <__assert_fail@plt+0x4a58>
   15f4c:	b	16978 <__assert_fail@plt+0x5264>
   15f50:	mov	r0, #98	; 0x62
   15f54:	b	1616c <__assert_fail@plt+0x4a58>
   15f58:	mov	r2, #114	; 0x72
   15f5c:	ldr	r0, [sp, #60]	; 0x3c
   15f60:	tst	r0, #1
   15f64:	mov	r0, r2
   15f68:	bne	1616c <__assert_fail@plt+0x4a58>
   15f6c:	b	16978 <__assert_fail@plt+0x5264>
   15f70:	ldr	r0, [sp, #80]	; 0x50
   15f74:	tst	r0, #1
   15f78:	beq	16254 <__assert_fail@plt+0x4b40>
   15f7c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15f80:	tst	r0, #1
   15f84:	bne	16aa0 <__assert_fail@plt+0x538c>
   15f88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15f8c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15f90:	cmp	r0, #2
   15f94:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15f98:	movwne	r0, #1
   15f9c:	orr	r0, r0, r2
   15fa0:	tst	r0, #1
   15fa4:	beq	1654c <__assert_fail@plt+0x4e38>
   15fa8:	mov	r0, r9
   15fac:	b	16580 <__assert_fail@plt+0x4e6c>
   15fb0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15fb4:	mov	r8, #0
   15fb8:	mov	r5, #63	; 0x3f
   15fbc:	cmp	r0, #5
   15fc0:	beq	16408 <__assert_fail@plt+0x4cf4>
   15fc4:	cmp	r0, #2
   15fc8:	bne	164b8 <__assert_fail@plt+0x4da4>
   15fcc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15fd0:	tst	r0, #1
   15fd4:	bne	16978 <__assert_fail@plt+0x5264>
   15fd8:	mov	r4, #0
   15fdc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15fe0:	cmp	r0, #0
   15fe4:	bne	15ea8 <__assert_fail@plt+0x4794>
   15fe8:	b	16180 <__assert_fail@plt+0x4a6c>
   15fec:	mov	r0, #118	; 0x76
   15ff0:	b	1616c <__assert_fail@plt+0x4a58>
   15ff4:	mov	r0, #1
   15ff8:	mov	r5, #39	; 0x27
   15ffc:	str	r0, [sp, #52]	; 0x34
   16000:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16004:	cmp	r0, #2
   16008:	bne	1607c <__assert_fail@plt+0x4968>
   1600c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16010:	tst	r0, #1
   16014:	bne	16978 <__assert_fail@plt+0x5264>
   16018:	ldr	r2, [sp, #48]	; 0x30
   1601c:	clz	r1, sl
   16020:	mov	r8, #0
   16024:	lsr	r1, r1, #5
   16028:	cmp	r2, #0
   1602c:	mov	r0, r2
   16030:	movwne	r0, #1
   16034:	orrs	r0, r0, r1
   16038:	moveq	r2, sl
   1603c:	moveq	sl, r0
   16040:	cmp	r9, sl
   16044:	str	r2, [sp, #48]	; 0x30
   16048:	movcc	r0, #39	; 0x27
   1604c:	strbcc	r0, [r6, r9]
   16050:	add	r0, r9, #1
   16054:	cmp	r0, sl
   16058:	movcc	r1, #92	; 0x5c
   1605c:	strbcc	r1, [r6, r0]
   16060:	add	r0, r9, #2
   16064:	add	r9, r9, #3
   16068:	cmp	r0, sl
   1606c:	movcc	r1, #39	; 0x27
   16070:	strbcc	r1, [r6, r0]
   16074:	mov	r0, #0
   16078:	str	r0, [fp, #-48]	; 0xffffffd0
   1607c:	mov	r4, #1
   16080:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16084:	cmp	r0, #0
   16088:	bne	15ea8 <__assert_fail@plt+0x4794>
   1608c:	b	16180 <__assert_fail@plt+0x4a6c>
   16090:	ldr	r0, [sp, #32]
   16094:	cmp	r0, #1
   16098:	bne	16284 <__assert_fail@plt+0x4b70>
   1609c:	str	lr, [sp, #84]	; 0x54
   160a0:	bl	11570 <__ctype_b_loc@plt>
   160a4:	ldr	r0, [r0]
   160a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   160ac:	mov	r1, #1
   160b0:	add	r0, r0, r5, lsl #1
   160b4:	ldrb	r0, [r0, #1]
   160b8:	ubfx	r4, r0, #6, #1
   160bc:	b	1667c <__assert_fail@plt+0x4f68>
   160c0:	cmp	r7, #0
   160c4:	ldrbeq	r0, [ip, #1]
   160c8:	cmpeq	r0, #0
   160cc:	beq	160e8 <__assert_fail@plt+0x49d4>
   160d0:	mvn	lr, #0
   160d4:	mov	r8, #0
   160d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   160dc:	cmp	r0, #0
   160e0:	bne	15ea8 <__assert_fail@plt+0x4794>
   160e4:	b	16180 <__assert_fail@plt+0x4a6c>
   160e8:	mov	r1, #1
   160ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   160f0:	cmp	r0, #2
   160f4:	bne	16104 <__assert_fail@plt+0x49f0>
   160f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   160fc:	tst	r0, #1
   16100:	bne	16978 <__assert_fail@plt+0x5264>
   16104:	mov	r4, r1
   16108:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1610c:	cmp	r0, #0
   16110:	bne	15ea8 <__assert_fail@plt+0x4794>
   16114:	b	16180 <__assert_fail@plt+0x4a6c>
   16118:	ldr	r1, [sp, #40]	; 0x28
   1611c:	mov	r8, #0
   16120:	mov	r0, #92	; 0x5c
   16124:	cmp	r1, #0
   16128:	beq	1616c <__assert_fail@plt+0x4a58>
   1612c:	mov	r4, #0
   16130:	cmp	r8, #0
   16134:	bne	15f28 <__assert_fail@plt+0x4814>
   16138:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1613c:	tst	r2, #1
   16140:	beq	1622c <__assert_fail@plt+0x4b18>
   16144:	cmp	r9, sl
   16148:	movcc	r1, #39	; 0x27
   1614c:	strbcc	r1, [r6, r9]
   16150:	add	r1, r9, #1
   16154:	add	r9, r9, #2
   16158:	cmp	r1, sl
   1615c:	movcc	r2, #39	; 0x27
   16160:	strbcc	r2, [r6, r1]
   16164:	mov	r2, #0
   16168:	b	1622c <__assert_fail@plt+0x4b18>
   1616c:	ldr	r1, [sp, #80]	; 0x50
   16170:	mov	r4, #0
   16174:	mov	r8, #0
   16178:	tst	r1, #1
   1617c:	bne	161bc <__assert_fail@plt+0x4aa8>
   16180:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16184:	cmp	r0, #0
   16188:	mov	r0, r5
   1618c:	beq	161b0 <__assert_fail@plt+0x4a9c>
   16190:	ldr	r1, [fp, #16]
   16194:	ubfx	r0, r5, #5, #3
   16198:	mov	r2, #1
   1619c:	ldr	r0, [r1, r0, lsl #2]
   161a0:	and	r1, r5, #31
   161a4:	tst	r0, r2, lsl r1
   161a8:	mov	r0, r5
   161ac:	bne	161bc <__assert_fail@plt+0x4aa8>
   161b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   161b4:	cmp	r1, #0
   161b8:	beq	16614 <__assert_fail@plt+0x4f00>
   161bc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   161c0:	tst	r1, #1
   161c4:	bne	16958 <__assert_fail@plt+0x5244>
   161c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   161cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   161d0:	cmp	r1, #2
   161d4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   161d8:	movwne	r1, #1
   161dc:	orr	r1, r1, r2
   161e0:	tst	r1, #1
   161e4:	bne	1621c <__assert_fail@plt+0x4b08>
   161e8:	cmp	r9, sl
   161ec:	movcc	r1, #39	; 0x27
   161f0:	strbcc	r1, [r6, r9]
   161f4:	add	r1, r9, #1
   161f8:	cmp	r1, sl
   161fc:	movcc	r2, #36	; 0x24
   16200:	strbcc	r2, [r6, r1]
   16204:	add	r1, r9, #2
   16208:	add	r9, r9, #3
   1620c:	cmp	r1, sl
   16210:	movcc	r2, #39	; 0x27
   16214:	strbcc	r2, [r6, r1]
   16218:	mov	r2, #1
   1621c:	cmp	r9, sl
   16220:	movcc	r1, #92	; 0x5c
   16224:	strbcc	r1, [r6, r9]
   16228:	add	r9, r9, #1
   1622c:	cmp	r9, sl
   16230:	add	r7, r7, #1
   16234:	strbcc	r0, [r6, r9]
   16238:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1623c:	add	r9, r9, #1
   16240:	and	r0, r0, r4
   16244:	mov	r4, r0
   16248:	cmn	lr, #1
   1624c:	bne	15bc0 <__assert_fail@plt+0x44ac>
   16250:	b	15bcc <__assert_fail@plt+0x44b8>
   16254:	ldr	r0, [sp, #28]
   16258:	mov	r4, #0
   1625c:	mov	r8, #0
   16260:	mov	r5, #0
   16264:	cmp	r0, #0
   16268:	beq	16180 <__assert_fail@plt+0x4a6c>
   1626c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   16270:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16274:	add	r7, r7, #1
   16278:	cmn	lr, #1
   1627c:	bne	15bc0 <__assert_fail@plt+0x44ac>
   16280:	b	15bcc <__assert_fail@plt+0x44b8>
   16284:	mov	r0, #0
   16288:	cmn	lr, #1
   1628c:	str	r0, [fp, #-36]	; 0xffffffdc
   16290:	str	r0, [fp, #-40]	; 0xffffffd8
   16294:	bne	162a8 <__assert_fail@plt+0x4b94>
   16298:	mov	r0, ip
   1629c:	bl	11588 <strlen@plt>
   162a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   162a4:	mov	lr, r0
   162a8:	ldr	r0, [sp, #36]	; 0x24
   162ac:	str	sl, [sp, #56]	; 0x38
   162b0:	str	lr, [sp, #84]	; 0x54
   162b4:	cmp	r0, #0
   162b8:	beq	164d0 <__assert_fail@plt+0x4dbc>
   162bc:	add	r0, ip, r7
   162c0:	mov	r4, #1
   162c4:	mov	r6, #0
   162c8:	sub	sl, fp, #40	; 0x28
   162cc:	str	r0, [sp, #20]
   162d0:	str	r6, [sp, #64]	; 0x40
   162d4:	add	r6, r6, r7
   162d8:	sub	r0, fp, #44	; 0x2c
   162dc:	mov	r3, sl
   162e0:	add	r1, ip, r6
   162e4:	sub	r2, lr, r6
   162e8:	bl	199c8 <__assert_fail@plt+0x82b4>
   162ec:	cmn	r0, #2
   162f0:	beq	1662c <__assert_fail@plt+0x4f18>
   162f4:	ldr	sl, [sp, #56]	; 0x38
   162f8:	cmn	r0, #1
   162fc:	beq	16620 <__assert_fail@plt+0x4f0c>
   16300:	cmp	r0, #0
   16304:	beq	16624 <__assert_fail@plt+0x4f10>
   16308:	cmp	r0, #2
   1630c:	bcc	163cc <__assert_fail@plt+0x4cb8>
   16310:	ldr	r1, [sp, #64]	; 0x40
   16314:	ldr	r2, [sp, #20]
   16318:	add	r1, r2, r1
   1631c:	mov	r2, #1
   16320:	ldrb	r3, [r1, r2]
   16324:	sub	r3, r3, #91	; 0x5b
   16328:	cmp	r3, #33	; 0x21
   1632c:	bhi	163c0 <__assert_fail@plt+0x4cac>
   16330:	add	r6, pc, #0
   16334:	ldr	pc, [r6, r3, lsl #2]
   16338:	andeq	r6, r1, r4, lsl #19
   1633c:	andeq	r6, r1, r4, lsl #19
   16340:	andeq	r6, r1, r0, asr #7
   16344:	andeq	r6, r1, r4, lsl #19
   16348:	andeq	r6, r1, r0, asr #7
   1634c:	andeq	r6, r1, r4, lsl #19
   16350:	andeq	r6, r1, r0, asr #7
   16354:	andeq	r6, r1, r0, asr #7
   16358:	andeq	r6, r1, r0, asr #7
   1635c:	andeq	r6, r1, r0, asr #7
   16360:	andeq	r6, r1, r0, asr #7
   16364:	andeq	r6, r1, r0, asr #7
   16368:	andeq	r6, r1, r0, asr #7
   1636c:	andeq	r6, r1, r0, asr #7
   16370:	andeq	r6, r1, r0, asr #7
   16374:	andeq	r6, r1, r0, asr #7
   16378:	andeq	r6, r1, r0, asr #7
   1637c:	andeq	r6, r1, r0, asr #7
   16380:	andeq	r6, r1, r0, asr #7
   16384:	andeq	r6, r1, r0, asr #7
   16388:	andeq	r6, r1, r0, asr #7
   1638c:	andeq	r6, r1, r0, asr #7
   16390:	andeq	r6, r1, r0, asr #7
   16394:	andeq	r6, r1, r0, asr #7
   16398:	andeq	r6, r1, r0, asr #7
   1639c:	andeq	r6, r1, r0, asr #7
   163a0:	andeq	r6, r1, r0, asr #7
   163a4:	andeq	r6, r1, r0, asr #7
   163a8:	andeq	r6, r1, r0, asr #7
   163ac:	andeq	r6, r1, r0, asr #7
   163b0:	andeq	r6, r1, r0, asr #7
   163b4:	andeq	r6, r1, r0, asr #7
   163b8:	andeq	r6, r1, r0, asr #7
   163bc:	andeq	r6, r1, r4, lsl #19
   163c0:	add	r2, r2, #1
   163c4:	cmp	r2, r0
   163c8:	bcc	16320 <__assert_fail@plt+0x4c0c>
   163cc:	ldr	r6, [sp, #64]	; 0x40
   163d0:	add	r6, r0, r6
   163d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   163d8:	bl	1148c <iswprint@plt>
   163dc:	cmp	r0, #0
   163e0:	sub	sl, fp, #40	; 0x28
   163e4:	movwne	r0, #1
   163e8:	and	r4, r4, r0
   163ec:	mov	r0, sl
   163f0:	bl	11420 <mbsinit@plt>
   163f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   163f8:	ldr	lr, [sp, #84]	; 0x54
   163fc:	cmp	r0, #0
   16400:	beq	162d0 <__assert_fail@plt+0x4bbc>
   16404:	b	16670 <__assert_fail@plt+0x4f5c>
   16408:	ldr	r0, [sp, #24]
   1640c:	cmp	r0, #0
   16410:	beq	164b8 <__assert_fail@plt+0x4da4>
   16414:	add	r0, r7, #2
   16418:	cmp	r0, lr
   1641c:	bcs	164b8 <__assert_fail@plt+0x4da4>
   16420:	add	r1, ip, r7
   16424:	ldrb	r1, [r1, #1]
   16428:	cmp	r1, #63	; 0x3f
   1642c:	bne	164b8 <__assert_fail@plt+0x4da4>
   16430:	ldrb	r5, [ip, r0]
   16434:	sub	r1, r5, #33	; 0x21
   16438:	cmp	r1, #29
   1643c:	bhi	164b8 <__assert_fail@plt+0x4da4>
   16440:	movw	r3, #20929	; 0x51c1
   16444:	mov	r2, #1
   16448:	movt	r3, #14336	; 0x3800
   1644c:	tst	r3, r2, lsl r1
   16450:	beq	164b8 <__assert_fail@plt+0x4da4>
   16454:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16458:	tst	r1, #1
   1645c:	bne	16aa8 <__assert_fail@plt+0x5394>
   16460:	cmp	r9, sl
   16464:	mov	r7, r0
   16468:	mov	r4, #0
   1646c:	movcc	r1, #63	; 0x3f
   16470:	strbcc	r1, [r6, r9]
   16474:	add	r1, r9, #1
   16478:	cmp	r1, sl
   1647c:	movcc	r2, #34	; 0x22
   16480:	strbcc	r2, [r6, r1]
   16484:	add	r1, r9, #2
   16488:	cmp	r1, sl
   1648c:	movcc	r2, #34	; 0x22
   16490:	strbcc	r2, [r6, r1]
   16494:	add	r1, r9, #3
   16498:	add	r9, r9, #4
   1649c:	cmp	r1, sl
   164a0:	movcc	r2, #63	; 0x3f
   164a4:	strbcc	r2, [r6, r1]
   164a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   164ac:	cmp	r0, #0
   164b0:	bne	15ea8 <__assert_fail@plt+0x4794>
   164b4:	b	16180 <__assert_fail@plt+0x4a6c>
   164b8:	mov	r5, #63	; 0x3f
   164bc:	mov	r4, #0
   164c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   164c4:	cmp	r0, #0
   164c8:	bne	15ea8 <__assert_fail@plt+0x4794>
   164cc:	b	16180 <__assert_fail@plt+0x4a6c>
   164d0:	mov	r4, #1
   164d4:	mov	r6, #0
   164d8:	sub	sl, fp, #40	; 0x28
   164dc:	str	r6, [sp, #64]	; 0x40
   164e0:	add	r6, r6, r7
   164e4:	sub	r0, fp, #44	; 0x2c
   164e8:	mov	r3, sl
   164ec:	add	r1, ip, r6
   164f0:	sub	r2, lr, r6
   164f4:	bl	199c8 <__assert_fail@plt+0x82b4>
   164f8:	cmn	r0, #2
   164fc:	beq	1662c <__assert_fail@plt+0x4f18>
   16500:	cmn	r0, #1
   16504:	beq	16620 <__assert_fail@plt+0x4f0c>
   16508:	ldr	r6, [sp, #64]	; 0x40
   1650c:	cmp	r0, #0
   16510:	beq	1666c <__assert_fail@plt+0x4f58>
   16514:	add	r6, r0, r6
   16518:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1651c:	bl	1148c <iswprint@plt>
   16520:	cmp	r0, #0
   16524:	sub	sl, fp, #40	; 0x28
   16528:	movwne	r0, #1
   1652c:	and	r4, r4, r0
   16530:	mov	r0, sl
   16534:	bl	11420 <mbsinit@plt>
   16538:	ldr	ip, [fp, #-84]	; 0xffffffac
   1653c:	ldr	lr, [sp, #84]	; 0x54
   16540:	cmp	r0, #0
   16544:	beq	164dc <__assert_fail@plt+0x4dc8>
   16548:	b	16670 <__assert_fail@plt+0x4f5c>
   1654c:	cmp	r9, sl
   16550:	mov	r2, #1
   16554:	movcc	r0, #39	; 0x27
   16558:	strbcc	r0, [r6, r9]
   1655c:	add	r0, r9, #1
   16560:	cmp	r0, sl
   16564:	movcc	r1, #36	; 0x24
   16568:	strbcc	r1, [r6, r0]
   1656c:	add	r0, r9, #2
   16570:	cmp	r0, sl
   16574:	movcc	r1, #39	; 0x27
   16578:	strbcc	r1, [r6, r0]
   1657c:	add	r0, r9, #3
   16580:	cmp	r0, sl
   16584:	add	r9, r0, #1
   16588:	str	r2, [fp, #-48]	; 0xffffffd0
   1658c:	movcc	r1, #92	; 0x5c
   16590:	strbcc	r1, [r6, r0]
   16594:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16598:	cmp	r1, #2
   1659c:	beq	165fc <__assert_fail@plt+0x4ee8>
   165a0:	add	r1, r7, #1
   165a4:	mov	r4, #0
   165a8:	mov	r8, #1
   165ac:	mov	r5, #48	; 0x30
   165b0:	cmp	r1, lr
   165b4:	bcs	15e9c <__assert_fail@plt+0x4788>
   165b8:	ldrb	r1, [ip, r1]
   165bc:	sub	r1, r1, #48	; 0x30
   165c0:	uxtb	r1, r1
   165c4:	cmp	r1, #9
   165c8:	bhi	15e9c <__assert_fail@plt+0x4788>
   165cc:	cmp	r9, sl
   165d0:	movcc	r1, #48	; 0x30
   165d4:	strbcc	r1, [r6, r9]
   165d8:	add	r1, r0, #2
   165dc:	add	r9, r0, #3
   165e0:	cmp	r1, sl
   165e4:	movcc	r2, #48	; 0x30
   165e8:	strbcc	r2, [r6, r1]
   165ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   165f0:	cmp	r0, #0
   165f4:	bne	15ea8 <__assert_fail@plt+0x4794>
   165f8:	b	16180 <__assert_fail@plt+0x4a6c>
   165fc:	mov	r0, #48	; 0x30
   16600:	mov	r8, #1
   16604:	mov	r4, #0
   16608:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1660c:	cmp	r1, #0
   16610:	bne	161bc <__assert_fail@plt+0x4aa8>
   16614:	cmp	r8, #0
   16618:	beq	16138 <__assert_fail@plt+0x4a24>
   1661c:	b	15f28 <__assert_fail@plt+0x4814>
   16620:	mov	r4, #0
   16624:	ldr	ip, [fp, #-84]	; 0xffffffac
   16628:	b	16664 <__assert_fail@plt+0x4f50>
   1662c:	ldr	r1, [sp, #84]	; 0x54
   16630:	ldr	ip, [fp, #-84]	; 0xffffffac
   16634:	mov	r4, #0
   16638:	cmp	r6, r1
   1663c:	bcs	16664 <__assert_fail@plt+0x4f50>
   16640:	ldrb	r0, [ip, r6]
   16644:	cmp	r0, #0
   16648:	beq	16664 <__assert_fail@plt+0x4f50>
   1664c:	ldr	r0, [sp, #64]	; 0x40
   16650:	add	r0, r0, #1
   16654:	add	r6, r0, r7
   16658:	str	r0, [sp, #64]	; 0x40
   1665c:	cmp	r6, r1
   16660:	bcc	16640 <__assert_fail@plt+0x4f2c>
   16664:	ldr	r6, [sp, #64]	; 0x40
   16668:	b	16670 <__assert_fail@plt+0x4f5c>
   1666c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16670:	mov	r1, r6
   16674:	ldr	r6, [sp, #76]	; 0x4c
   16678:	ldr	sl, [sp, #56]	; 0x38
   1667c:	ldr	r0, [sp, #44]	; 0x2c
   16680:	cmp	r1, #1
   16684:	orr	r2, r4, r0
   16688:	mov	r0, r1
   1668c:	bhi	166ac <__assert_fail@plt+0x4f98>
   16690:	tst	r2, #1
   16694:	beq	166ac <__assert_fail@plt+0x4f98>
   16698:	ldr	lr, [sp, #84]	; 0x54
   1669c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   166a0:	cmp	r0, #0
   166a4:	bne	15ea8 <__assert_fail@plt+0x4794>
   166a8:	b	16180 <__assert_fail@plt+0x4a6c>
   166ac:	str	r2, [sp, #64]	; 0x40
   166b0:	add	r0, r0, r7
   166b4:	add	r1, r7, #1
   166b8:	ldr	lr, [sp, #84]	; 0x54
   166bc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   166c0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   166c4:	mov	r3, #0
   166c8:	str	r0, [sp, #56]	; 0x38
   166cc:	ldr	r0, [sp, #64]	; 0x40
   166d0:	tst	r0, #1
   166d4:	bne	167bc <__assert_fail@plt+0x50a8>
   166d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   166dc:	tst	r0, #1
   166e0:	bne	1695c <__assert_fail@plt+0x5248>
   166e4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   166e8:	cmp	r7, #2
   166ec:	movwne	r3, #1
   166f0:	orr	r3, r3, r2
   166f4:	tst	r3, #1
   166f8:	bne	16730 <__assert_fail@plt+0x501c>
   166fc:	cmp	r9, sl
   16700:	add	r3, r9, #1
   16704:	movcc	r2, #39	; 0x27
   16708:	strbcc	r2, [r6, r9]
   1670c:	cmp	r3, sl
   16710:	movcc	r2, #36	; 0x24
   16714:	strbcc	r2, [r6, r3]
   16718:	add	r3, r9, #2
   1671c:	add	r9, r9, #3
   16720:	cmp	r3, sl
   16724:	movcc	r2, #39	; 0x27
   16728:	strbcc	r2, [r6, r3]
   1672c:	mov	r2, #1
   16730:	cmp	r9, sl
   16734:	mov	r0, r2
   16738:	movcc	r3, #92	; 0x5c
   1673c:	strbcc	r3, [r6, r9]
   16740:	add	r3, r9, #1
   16744:	cmp	r3, sl
   16748:	andcc	r7, r5, #192	; 0xc0
   1674c:	movcc	r2, #48	; 0x30
   16750:	orrcc	r7, r2, r7, lsr #6
   16754:	strbcc	r7, [r6, r3]
   16758:	add	r3, r9, #2
   1675c:	add	r9, r9, #3
   16760:	cmp	r3, sl
   16764:	lsrcc	r7, r5, #3
   16768:	movcc	r2, #6
   1676c:	bficc	r7, r2, #3, #29
   16770:	mov	r2, #6
   16774:	strbcc	r7, [r6, r3]
   16778:	bfi	r5, r2, #3, #29
   1677c:	mov	r3, #1
   16780:	mov	r2, r0
   16784:	ldr	r0, [sp, #56]	; 0x38
   16788:	and	r8, r3, #1
   1678c:	cmp	r0, r1
   16790:	bhi	167f0 <__assert_fail@plt+0x50dc>
   16794:	b	16830 <__assert_fail@plt+0x511c>
   16798:	cmp	r9, sl
   1679c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   167a0:	strbcc	r5, [r6, r9]
   167a4:	add	r9, r9, #1
   167a8:	ldrb	r5, [ip, r1]
   167ac:	add	r1, r1, #1
   167b0:	ldr	r0, [sp, #64]	; 0x40
   167b4:	tst	r0, #1
   167b8:	beq	166d8 <__assert_fail@plt+0x4fc4>
   167bc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   167c0:	tst	r7, #1
   167c4:	beq	167d8 <__assert_fail@plt+0x50c4>
   167c8:	cmp	r9, sl
   167cc:	movcc	r7, #92	; 0x5c
   167d0:	strbcc	r7, [r6, r9]
   167d4:	add	r9, r9, #1
   167d8:	mov	r7, #0
   167dc:	str	r7, [fp, #-56]	; 0xffffffc8
   167e0:	ldr	r0, [sp, #56]	; 0x38
   167e4:	and	r8, r3, #1
   167e8:	cmp	r0, r1
   167ec:	bls	16830 <__assert_fail@plt+0x511c>
   167f0:	cmp	r8, #0
   167f4:	mvn	r7, r2
   167f8:	movwne	r8, #1
   167fc:	orr	r7, r7, r8
   16800:	tst	r7, #1
   16804:	bne	16798 <__assert_fail@plt+0x5084>
   16808:	cmp	r9, sl
   1680c:	movcc	r7, #39	; 0x27
   16810:	strbcc	r7, [r6, r9]
   16814:	add	r7, r9, #1
   16818:	add	r9, r9, #2
   1681c:	cmp	r7, sl
   16820:	movcc	r2, #39	; 0x27
   16824:	strbcc	r2, [r6, r7]
   16828:	mov	r2, #0
   1682c:	b	16798 <__assert_fail@plt+0x5084>
   16830:	cmp	r8, #0
   16834:	sub	r7, r1, #1
   16838:	mov	r0, r5
   1683c:	str	r2, [fp, #-48]	; 0xffffffd0
   16840:	movwne	r8, #1
   16844:	cmp	r8, #0
   16848:	beq	16138 <__assert_fail@plt+0x4a24>
   1684c:	b	15f28 <__assert_fail@plt+0x4814>
   16850:	mov	lr, r7
   16854:	b	1685c <__assert_fail@plt+0x5148>
   16858:	mvn	lr, #0
   1685c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16860:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16864:	eor	r0, r7, #2
   16868:	orr	r0, r0, r9
   1686c:	clz	r0, r0
   16870:	lsr	r0, r0, #5
   16874:	tst	r1, r0
   16878:	bne	16978 <__assert_fail@plt+0x5264>
   1687c:	mov	r0, r1
   16880:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16884:	cmp	r7, #2
   16888:	movwne	r1, #1
   1688c:	orr	r0, r0, r1
   16890:	tst	r0, #1
   16894:	ldreq	r0, [sp, #52]	; 0x34
   16898:	streq	lr, [sp, #84]	; 0x54
   1689c:	eoreq	r0, r0, #1
   168a0:	tsteq	r0, #1
   168a4:	bne	16a3c <__assert_fail@plt+0x5328>
   168a8:	tst	r4, #1
   168ac:	bne	169f8 <__assert_fail@plt+0x52e4>
   168b0:	ldr	r6, [sp, #48]	; 0x30
   168b4:	mov	r8, #0
   168b8:	cmp	r6, #0
   168bc:	beq	16a34 <__assert_fail@plt+0x5320>
   168c0:	ldr	r0, [sp, #80]	; 0x50
   168c4:	mov	r1, #0
   168c8:	cmp	sl, #0
   168cc:	mov	r4, #0
   168d0:	str	r1, [fp, #-72]	; 0xffffffb8
   168d4:	beq	157c8 <__assert_fail@plt+0x40b4>
   168d8:	b	16a3c <__assert_fail@plt+0x5328>
   168dc:	ldrb	r1, [r0, #3]
   168e0:	cmp	r1, #56	; 0x38
   168e4:	ldrbeq	r1, [r0, #4]
   168e8:	cmpeq	r1, #48	; 0x30
   168ec:	bne	159c0 <__assert_fail@plt+0x42ac>
   168f0:	ldrb	r1, [r0, #5]
   168f4:	cmp	r1, #51	; 0x33
   168f8:	ldrbeq	r1, [r0, #6]
   168fc:	cmpeq	r1, #48	; 0x30
   16900:	bne	159c0 <__assert_fail@plt+0x42ac>
   16904:	ldrb	r0, [r0, #7]
   16908:	cmp	r0, #0
   1690c:	movw	r0, #45571	; 0xb203
   16910:	movt	r0, #1
   16914:	str	r0, [sp, #68]	; 0x44
   16918:	bne	159c0 <__assert_fail@plt+0x42ac>
   1691c:	b	159dc <__assert_fail@plt+0x42c8>
   16920:	ldrb	r1, [r0, #4]
   16924:	cmp	r1, #48	; 0x30
   16928:	ldrbeq	r1, [r0, #5]
   1692c:	cmpeq	r1, #51	; 0x33
   16930:	bne	15aa4 <__assert_fail@plt+0x4390>
   16934:	ldrb	r1, [r0, #6]
   16938:	cmp	r1, #48	; 0x30
   1693c:	ldrbeq	r0, [r0, #7]
   16940:	cmpeq	r0, #0
   16944:	bne	15aa4 <__assert_fail@plt+0x4390>
   16948:	movw	r0, #45575	; 0xb207
   1694c:	movt	r0, #1
   16950:	str	r0, [sp, #72]	; 0x48
   16954:	b	15ac4 <__assert_fail@plt+0x43b0>
   16958:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1695c:	ldr	r2, [sp, #80]	; 0x50
   16960:	b	16998 <__assert_fail@plt+0x5284>
   16964:	ldr	ip, [fp, #-84]	; 0xffffffac
   16968:	mov	r2, #1
   1696c:	mov	lr, r4
   16970:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16974:	b	16998 <__assert_fail@plt+0x5284>
   16978:	ldr	r2, [sp, #80]	; 0x50
   1697c:	mov	r7, #2
   16980:	b	16998 <__assert_fail@plt+0x5284>
   16984:	ldr	r6, [sp, #76]	; 0x4c
   16988:	ldr	ip, [fp, #-84]	; 0xffffffac
   1698c:	ldr	lr, [sp, #84]	; 0x54
   16990:	ldr	r2, [sp, #80]	; 0x50
   16994:	mov	r7, #2
   16998:	mov	r0, #0
   1699c:	ldr	r1, [fp, #12]
   169a0:	tst	r2, #1
   169a4:	mov	r2, r7
   169a8:	mov	r3, lr
   169ac:	str	r0, [sp, #8]
   169b0:	ldr	r0, [sp, #68]	; 0x44
   169b4:	movwne	r2, #4
   169b8:	cmp	r7, #2
   169bc:	movne	r2, r7
   169c0:	str	r2, [sp]
   169c4:	mov	r2, ip
   169c8:	bic	r1, r1, #2
   169cc:	str	r0, [sp, #12]
   169d0:	ldr	r0, [sp, #72]	; 0x48
   169d4:	str	r1, [sp, #4]
   169d8:	mov	r1, sl
   169dc:	str	r0, [sp, #16]
   169e0:	mov	r0, r6
   169e4:	bl	1574c <__assert_fail@plt+0x4038>
   169e8:	mov	r9, r0
   169ec:	mov	r0, r9
   169f0:	sub	sp, fp, #28
   169f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f8:	mov	r0, #5
   169fc:	ldr	r1, [sp, #48]	; 0x30
   16a00:	ldr	r2, [fp, #-84]	; 0xffffffac
   16a04:	ldr	r3, [sp, #84]	; 0x54
   16a08:	str	r0, [sp]
   16a0c:	ldr	r0, [fp, #12]
   16a10:	str	r0, [sp, #4]
   16a14:	ldr	r0, [fp, #16]
   16a18:	str	r0, [sp, #8]
   16a1c:	ldr	r0, [sp, #68]	; 0x44
   16a20:	str	r0, [sp, #12]
   16a24:	ldr	r0, [sp, #72]	; 0x48
   16a28:	str	r0, [sp, #16]
   16a2c:	ldr	r0, [sp, #76]	; 0x4c
   16a30:	b	169e4 <__assert_fail@plt+0x52d0>
   16a34:	mov	r0, #0
   16a38:	str	r0, [fp, #-72]	; 0xffffffb8
   16a3c:	ldr	r1, [sp, #92]	; 0x5c
   16a40:	cmp	r1, #0
   16a44:	beq	16a84 <__assert_fail@plt+0x5370>
   16a48:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16a4c:	ldr	r2, [sp, #76]	; 0x4c
   16a50:	tst	r0, #1
   16a54:	bne	16a88 <__assert_fail@plt+0x5374>
   16a58:	ldrb	r0, [r1]
   16a5c:	cmp	r0, #0
   16a60:	beq	16a88 <__assert_fail@plt+0x5374>
   16a64:	add	r1, r1, #1
   16a68:	cmp	r9, sl
   16a6c:	strbcc	r0, [r2, r9]
   16a70:	add	r9, r9, #1
   16a74:	ldrb	r0, [r1], #1
   16a78:	cmp	r0, #0
   16a7c:	bne	16a68 <__assert_fail@plt+0x5354>
   16a80:	b	16a88 <__assert_fail@plt+0x5374>
   16a84:	ldr	r2, [sp, #76]	; 0x4c
   16a88:	cmp	r9, sl
   16a8c:	movcc	r0, #0
   16a90:	strbcc	r0, [r2, r9]
   16a94:	mov	r0, r9
   16a98:	sub	sp, fp, #28
   16a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aa0:	mov	r2, #1
   16aa4:	b	16970 <__assert_fail@plt+0x525c>
   16aa8:	ldr	r2, [sp, #80]	; 0x50
   16aac:	mov	r7, #5
   16ab0:	b	16998 <__assert_fail@plt+0x5284>
   16ab4:	bl	116f0 <abort@plt>
   16ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16abc:	add	fp, sp, #28
   16ac0:	sub	sp, sp, #28
   16ac4:	movw	r5, #50472	; 0xc528
   16ac8:	cmp	r2, #0
   16acc:	mov	r4, r1
   16ad0:	mov	r7, r0
   16ad4:	str	r0, [sp, #20]
   16ad8:	movt	r5, #2
   16adc:	movne	r5, r2
   16ae0:	bl	115d0 <__errno_location@plt>
   16ae4:	mov	sl, r0
   16ae8:	ldm	r5, {r0, r1}
   16aec:	ldr	r2, [r5, #40]	; 0x28
   16af0:	ldr	r3, [r5, #44]	; 0x2c
   16af4:	add	r9, r5, #8
   16af8:	ldr	r6, [sl]
   16afc:	orr	r8, r1, #1
   16b00:	mov	r1, #0
   16b04:	str	r6, [sp, #24]
   16b08:	stm	sp, {r0, r8, r9}
   16b0c:	str	r2, [sp, #12]
   16b10:	str	r3, [sp, #16]
   16b14:	mov	r0, #0
   16b18:	mov	r2, r7
   16b1c:	mov	r3, r4
   16b20:	mov	r6, r4
   16b24:	bl	1574c <__assert_fail@plt+0x4038>
   16b28:	add	r7, r0, #1
   16b2c:	mov	r0, r7
   16b30:	bl	18510 <__assert_fail@plt+0x6dfc>
   16b34:	mov	r4, r0
   16b38:	ldr	r0, [r5]
   16b3c:	ldr	r2, [r5, #44]	; 0x2c
   16b40:	ldr	r1, [r5, #40]	; 0x28
   16b44:	mov	r3, r6
   16b48:	stm	sp, {r0, r8, r9}
   16b4c:	str	r2, [sp, #16]
   16b50:	str	r1, [sp, #12]
   16b54:	mov	r0, r4
   16b58:	mov	r1, r7
   16b5c:	ldr	r2, [sp, #20]
   16b60:	bl	1574c <__assert_fail@plt+0x4038>
   16b64:	ldr	r0, [sp, #24]
   16b68:	str	r0, [sl]
   16b6c:	mov	r0, r4
   16b70:	sub	sp, fp, #28
   16b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b7c:	add	fp, sp, #28
   16b80:	sub	sp, sp, #36	; 0x24
   16b84:	movw	r8, #50472	; 0xc528
   16b88:	cmp	r3, #0
   16b8c:	mov	r4, r2
   16b90:	str	r2, [sp, #24]
   16b94:	mov	r5, r1
   16b98:	mov	r6, r0
   16b9c:	str	r0, [sp, #20]
   16ba0:	movt	r8, #2
   16ba4:	movne	r8, r3
   16ba8:	bl	115d0 <__errno_location@plt>
   16bac:	str	r0, [sp, #28]
   16bb0:	cmp	r4, #0
   16bb4:	add	sl, r8, #8
   16bb8:	ldm	r8, {r3, r9}
   16bbc:	ldr	r7, [r0]
   16bc0:	ldr	r1, [r8, #40]	; 0x28
   16bc4:	ldr	r2, [r8, #44]	; 0x2c
   16bc8:	mov	r0, #0
   16bcc:	orreq	r9, r9, #1
   16bd0:	str	r7, [sp, #32]
   16bd4:	mov	r7, r5
   16bd8:	stm	sp, {r3, r9, sl}
   16bdc:	str	r1, [sp, #12]
   16be0:	str	r2, [sp, #16]
   16be4:	mov	r1, #0
   16be8:	mov	r2, r6
   16bec:	mov	r3, r5
   16bf0:	bl	1574c <__assert_fail@plt+0x4038>
   16bf4:	add	r4, r0, #1
   16bf8:	mov	r5, r0
   16bfc:	mov	r0, r4
   16c00:	bl	18510 <__assert_fail@plt+0x6dfc>
   16c04:	mov	r6, r0
   16c08:	ldr	r0, [r8]
   16c0c:	ldr	r2, [r8, #44]	; 0x2c
   16c10:	ldr	r1, [r8, #40]	; 0x28
   16c14:	mov	r3, r7
   16c18:	stm	sp, {r0, r9, sl}
   16c1c:	str	r2, [sp, #16]
   16c20:	str	r1, [sp, #12]
   16c24:	mov	r0, r6
   16c28:	mov	r1, r4
   16c2c:	ldr	r2, [sp, #20]
   16c30:	bl	1574c <__assert_fail@plt+0x4038>
   16c34:	ldr	r0, [sp, #24]
   16c38:	ldr	r1, [sp, #32]
   16c3c:	ldr	r2, [sp, #28]
   16c40:	cmp	r0, #0
   16c44:	str	r1, [r2]
   16c48:	strne	r5, [r0]
   16c4c:	mov	r0, r6
   16c50:	sub	sp, fp, #28
   16c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c58:	push	{r4, r5, r6, r7, fp, lr}
   16c5c:	add	fp, sp, #16
   16c60:	movw	r4, #49560	; 0xc198
   16c64:	movt	r4, #2
   16c68:	ldrd	r6, [r4]
   16c6c:	cmp	r7, #2
   16c70:	blt	16c9c <__assert_fail@plt+0x5588>
   16c74:	add	r5, r6, #12
   16c78:	mov	r7, #0
   16c7c:	ldr	r0, [r5, r7, lsl #3]
   16c80:	bl	15374 <__assert_fail@plt+0x3c60>
   16c84:	ldr	r1, [r4, #4]
   16c88:	add	r2, r7, #2
   16c8c:	add	r0, r7, #1
   16c90:	mov	r7, r0
   16c94:	cmp	r2, r1
   16c98:	blt	16c7c <__assert_fail@plt+0x5568>
   16c9c:	ldr	r0, [r6, #4]
   16ca0:	movw	r5, #50520	; 0xc558
   16ca4:	movt	r5, #2
   16ca8:	cmp	r0, r5
   16cac:	beq	16cc0 <__assert_fail@plt+0x55ac>
   16cb0:	bl	15374 <__assert_fail@plt+0x3c60>
   16cb4:	mov	r0, #256	; 0x100
   16cb8:	str	r0, [r4, #8]
   16cbc:	str	r5, [r4, #12]
   16cc0:	add	r5, r4, #8
   16cc4:	cmp	r6, r5
   16cc8:	beq	16cd8 <__assert_fail@plt+0x55c4>
   16ccc:	mov	r0, r6
   16cd0:	bl	15374 <__assert_fail@plt+0x3c60>
   16cd4:	str	r5, [r4]
   16cd8:	mov	r0, #1
   16cdc:	str	r0, [r4, #4]
   16ce0:	pop	{r4, r5, r6, r7, fp, pc}
   16ce4:	movw	r3, #50472	; 0xc528
   16ce8:	mvn	r2, #0
   16cec:	movt	r3, #2
   16cf0:	b	16cf4 <__assert_fail@plt+0x55e0>
   16cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cf8:	add	fp, sp, #28
   16cfc:	sub	sp, sp, #44	; 0x2c
   16d00:	mov	r7, r3
   16d04:	str	r2, [sp, #36]	; 0x24
   16d08:	str	r1, [sp, #32]
   16d0c:	mov	r5, r0
   16d10:	bl	115d0 <__errno_location@plt>
   16d14:	cmp	r5, #0
   16d18:	blt	16e7c <__assert_fail@plt+0x5768>
   16d1c:	cmn	r5, #-2147483647	; 0x80000001
   16d20:	beq	16e7c <__assert_fail@plt+0x5768>
   16d24:	movw	r8, #49560	; 0xc198
   16d28:	mov	r4, r0
   16d2c:	movt	r8, #2
   16d30:	ldr	r6, [r8]
   16d34:	ldr	r1, [r8, #4]
   16d38:	ldr	r0, [r0]
   16d3c:	str	r4, [sp, #28]
   16d40:	cmp	r1, r5
   16d44:	str	r0, [sp, #24]
   16d48:	ble	16d54 <__assert_fail@plt+0x5640>
   16d4c:	mov	sl, r6
   16d50:	b	16db8 <__assert_fail@plt+0x56a4>
   16d54:	mov	r0, #8
   16d58:	add	r9, r8, #8
   16d5c:	add	r2, r5, #1
   16d60:	str	r1, [fp, #-32]	; 0xffffffe0
   16d64:	mvn	r3, #-2147483648	; 0x80000000
   16d68:	str	r0, [sp]
   16d6c:	subs	r0, r6, r9
   16d70:	sub	r2, r2, r1
   16d74:	sub	r1, fp, #32
   16d78:	movne	r0, r6
   16d7c:	bl	18710 <__assert_fail@plt+0x6ffc>
   16d80:	str	r0, [r8]
   16d84:	cmp	r6, r9
   16d88:	mov	sl, r0
   16d8c:	ldrdeq	r0, [r8, #8]
   16d90:	stmeq	sl, {r0, r1}
   16d94:	ldr	r1, [r8, #4]
   16d98:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16d9c:	add	r0, sl, r1, lsl #3
   16da0:	sub	r1, r2, r1
   16da4:	lsl	r2, r1, #3
   16da8:	mov	r1, #0
   16dac:	bl	115f4 <memset@plt>
   16db0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16db4:	str	r0, [r8, #4]
   16db8:	mov	r9, sl
   16dbc:	ldr	r6, [r9, r5, lsl #3]!
   16dc0:	ldr	r4, [r9, #4]!
   16dc4:	ldm	r7, {r0, r1}
   16dc8:	ldr	r2, [r7, #40]	; 0x28
   16dcc:	ldr	r3, [r7, #44]	; 0x2c
   16dd0:	orr	r8, r1, #1
   16dd4:	add	r1, r7, #8
   16dd8:	stm	sp, {r0, r8}
   16ddc:	add	r0, sp, #8
   16de0:	str	r1, [sp, #20]
   16de4:	stm	r0, {r1, r2, r3}
   16de8:	mov	r0, r4
   16dec:	mov	r1, r6
   16df0:	ldr	r2, [sp, #32]
   16df4:	ldr	r3, [sp, #36]	; 0x24
   16df8:	bl	1574c <__assert_fail@plt+0x4038>
   16dfc:	cmp	r6, r0
   16e00:	bhi	16e64 <__assert_fail@plt+0x5750>
   16e04:	add	r6, r0, #1
   16e08:	movw	r0, #50520	; 0xc558
   16e0c:	movt	r0, #2
   16e10:	str	r6, [sl, r5, lsl #3]
   16e14:	cmp	r4, r0
   16e18:	beq	16e24 <__assert_fail@plt+0x5710>
   16e1c:	mov	r0, r4
   16e20:	bl	15374 <__assert_fail@plt+0x3c60>
   16e24:	mov	r0, r6
   16e28:	bl	18510 <__assert_fail@plt+0x6dfc>
   16e2c:	str	r0, [r9]
   16e30:	mov	r4, r0
   16e34:	add	r3, sp, #8
   16e38:	ldr	r0, [r7]
   16e3c:	ldr	r1, [r7, #40]	; 0x28
   16e40:	ldr	r2, [r7, #44]	; 0x2c
   16e44:	stm	sp, {r0, r8}
   16e48:	ldr	r0, [sp, #20]
   16e4c:	stm	r3, {r0, r1, r2}
   16e50:	mov	r0, r4
   16e54:	mov	r1, r6
   16e58:	ldr	r2, [sp, #32]
   16e5c:	ldr	r3, [sp, #36]	; 0x24
   16e60:	bl	1574c <__assert_fail@plt+0x4038>
   16e64:	ldr	r1, [sp, #24]
   16e68:	ldr	r0, [sp, #28]
   16e6c:	str	r1, [r0]
   16e70:	mov	r0, r4
   16e74:	sub	sp, fp, #28
   16e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e7c:	bl	116f0 <abort@plt>
   16e80:	movw	r3, #50472	; 0xc528
   16e84:	movt	r3, #2
   16e88:	b	16cf4 <__assert_fail@plt+0x55e0>
   16e8c:	movw	r3, #50472	; 0xc528
   16e90:	mov	r1, r0
   16e94:	mov	r0, #0
   16e98:	mvn	r2, #0
   16e9c:	movt	r3, #2
   16ea0:	b	16cf4 <__assert_fail@plt+0x55e0>
   16ea4:	movw	r3, #50472	; 0xc528
   16ea8:	mov	r2, r1
   16eac:	mov	r1, r0
   16eb0:	mov	r0, #0
   16eb4:	movt	r3, #2
   16eb8:	b	16cf4 <__assert_fail@plt+0x55e0>
   16ebc:	push	{fp, lr}
   16ec0:	mov	fp, sp
   16ec4:	sub	sp, sp, #48	; 0x30
   16ec8:	vmov.i32	q8, #0	; 0x00000000
   16ecc:	mov	ip, #32
   16ed0:	mov	r3, sp
   16ed4:	mov	lr, r2
   16ed8:	cmp	r1, #10
   16edc:	add	r2, r3, #16
   16ee0:	vst1.64	{d16-d17}, [r3], ip
   16ee4:	vst1.64	{d16-d17}, [r3]
   16ee8:	vst1.64	{d16-d17}, [r2]
   16eec:	beq	16f0c <__assert_fail@plt+0x57f8>
   16ef0:	str	r1, [sp]
   16ef4:	mov	r3, sp
   16ef8:	mov	r1, lr
   16efc:	mvn	r2, #0
   16f00:	bl	16cf4 <__assert_fail@plt+0x55e0>
   16f04:	mov	sp, fp
   16f08:	pop	{fp, pc}
   16f0c:	bl	116f0 <abort@plt>
   16f10:	push	{r4, sl, fp, lr}
   16f14:	add	fp, sp, #8
   16f18:	sub	sp, sp, #48	; 0x30
   16f1c:	mov	ip, r3
   16f20:	mov	r3, sp
   16f24:	vmov.i32	q8, #0	; 0x00000000
   16f28:	mov	lr, #32
   16f2c:	cmp	r1, #10
   16f30:	add	r4, r3, #16
   16f34:	vst1.64	{d16-d17}, [r3], lr
   16f38:	vst1.64	{d16-d17}, [r3]
   16f3c:	vst1.64	{d16-d17}, [r4]
   16f40:	beq	16f60 <__assert_fail@plt+0x584c>
   16f44:	str	r1, [sp]
   16f48:	mov	r1, r2
   16f4c:	mov	r3, sp
   16f50:	mov	r2, ip
   16f54:	bl	16cf4 <__assert_fail@plt+0x55e0>
   16f58:	sub	sp, fp, #8
   16f5c:	pop	{r4, sl, fp, pc}
   16f60:	bl	116f0 <abort@plt>
   16f64:	push	{fp, lr}
   16f68:	mov	fp, sp
   16f6c:	sub	sp, sp, #48	; 0x30
   16f70:	mov	r3, sp
   16f74:	vmov.i32	q8, #0	; 0x00000000
   16f78:	mov	ip, #32
   16f7c:	cmp	r0, #10
   16f80:	add	r2, r3, #16
   16f84:	vst1.64	{d16-d17}, [r3], ip
   16f88:	vst1.64	{d16-d17}, [r3]
   16f8c:	vst1.64	{d16-d17}, [r2]
   16f90:	beq	16fb0 <__assert_fail@plt+0x589c>
   16f94:	str	r0, [sp]
   16f98:	mov	r3, sp
   16f9c:	mov	r0, #0
   16fa0:	mvn	r2, #0
   16fa4:	bl	16cf4 <__assert_fail@plt+0x55e0>
   16fa8:	mov	sp, fp
   16fac:	pop	{fp, pc}
   16fb0:	bl	116f0 <abort@plt>
   16fb4:	push	{fp, lr}
   16fb8:	mov	fp, sp
   16fbc:	sub	sp, sp, #48	; 0x30
   16fc0:	mov	r3, sp
   16fc4:	vmov.i32	q8, #0	; 0x00000000
   16fc8:	mov	ip, #32
   16fcc:	cmp	r0, #10
   16fd0:	add	lr, r3, #16
   16fd4:	vst1.64	{d16-d17}, [r3], ip
   16fd8:	vst1.64	{d16-d17}, [r3]
   16fdc:	vst1.64	{d16-d17}, [lr]
   16fe0:	beq	16ffc <__assert_fail@plt+0x58e8>
   16fe4:	str	r0, [sp]
   16fe8:	mov	r3, sp
   16fec:	mov	r0, #0
   16ff0:	bl	16cf4 <__assert_fail@plt+0x55e0>
   16ff4:	mov	sp, fp
   16ff8:	pop	{fp, pc}
   16ffc:	bl	116f0 <abort@plt>
   17000:	push	{r4, sl, fp, lr}
   17004:	add	fp, sp, #8
   17008:	sub	sp, sp, #48	; 0x30
   1700c:	mov	lr, r0
   17010:	movw	r0, #50472	; 0xc528
   17014:	mov	r3, #32
   17018:	mov	ip, r1
   1701c:	mov	r4, #1
   17020:	movt	r0, #2
   17024:	add	r1, r0, #16
   17028:	vld1.64	{d16-d17}, [r0], r3
   1702c:	mov	r3, sp
   17030:	vld1.64	{d18-d19}, [r1]
   17034:	add	r1, r3, #16
   17038:	vld1.64	{d20-d21}, [r0]
   1703c:	add	r0, r3, #32
   17040:	vst1.64	{d18-d19}, [r1]
   17044:	mov	r1, r3
   17048:	vst1.64	{d20-d21}, [r0]
   1704c:	mov	r0, #28
   17050:	and	r0, r0, r2, lsr #3
   17054:	and	r2, r2, #31
   17058:	vst1.64	{d16-d17}, [r1], r0
   1705c:	ldr	r0, [r1, #8]
   17060:	bic	r4, r4, r0, lsr r2
   17064:	eor	r0, r0, r4, lsl r2
   17068:	mov	r2, ip
   1706c:	str	r0, [r1, #8]
   17070:	mov	r0, #0
   17074:	mov	r1, lr
   17078:	bl	16cf4 <__assert_fail@plt+0x55e0>
   1707c:	sub	sp, fp, #8
   17080:	pop	{r4, sl, fp, pc}
   17084:	push	{fp, lr}
   17088:	mov	fp, sp
   1708c:	sub	sp, sp, #48	; 0x30
   17090:	mov	ip, r0
   17094:	movw	r0, #50472	; 0xc528
   17098:	mov	r3, #32
   1709c:	movt	r0, #2
   170a0:	add	r2, r0, #16
   170a4:	vld1.64	{d16-d17}, [r0], r3
   170a8:	mov	r3, sp
   170ac:	vld1.64	{d18-d19}, [r2]
   170b0:	add	r2, r3, #16
   170b4:	vld1.64	{d20-d21}, [r0]
   170b8:	add	r0, r3, #32
   170bc:	vst1.64	{d18-d19}, [r2]
   170c0:	mov	r2, r3
   170c4:	vst1.64	{d20-d21}, [r0]
   170c8:	mov	r0, #28
   170cc:	and	r0, r0, r1, lsr #3
   170d0:	and	r1, r1, #31
   170d4:	vst1.64	{d16-d17}, [r2], r0
   170d8:	mov	r0, #1
   170dc:	ldr	lr, [r2, #8]
   170e0:	bic	r0, r0, lr, lsr r1
   170e4:	eor	r0, lr, r0, lsl r1
   170e8:	mov	r1, ip
   170ec:	str	r0, [r2, #8]
   170f0:	mov	r0, #0
   170f4:	mvn	r2, #0
   170f8:	bl	16cf4 <__assert_fail@plt+0x55e0>
   170fc:	mov	sp, fp
   17100:	pop	{fp, pc}
   17104:	push	{fp, lr}
   17108:	mov	fp, sp
   1710c:	sub	sp, sp, #48	; 0x30
   17110:	movw	r2, #50472	; 0xc528
   17114:	mov	r3, #32
   17118:	mov	r1, r0
   1711c:	movt	r2, #2
   17120:	add	r0, r2, #16
   17124:	vld1.64	{d16-d17}, [r2], r3
   17128:	mov	r3, sp
   1712c:	vld1.64	{d18-d19}, [r0]
   17130:	add	r0, r3, #16
   17134:	vld1.64	{d20-d21}, [r2]
   17138:	mov	r2, r3
   1713c:	vst1.64	{d18-d19}, [r0]
   17140:	add	r0, r3, #32
   17144:	vst1.64	{d20-d21}, [r0]
   17148:	mov	r0, #12
   1714c:	vst1.64	{d16-d17}, [r2], r0
   17150:	ldr	r0, [r2]
   17154:	orr	r0, r0, #67108864	; 0x4000000
   17158:	str	r0, [r2]
   1715c:	mov	r0, #0
   17160:	mvn	r2, #0
   17164:	bl	16cf4 <__assert_fail@plt+0x55e0>
   17168:	mov	sp, fp
   1716c:	pop	{fp, pc}
   17170:	push	{fp, lr}
   17174:	mov	fp, sp
   17178:	sub	sp, sp, #48	; 0x30
   1717c:	mov	ip, r1
   17180:	mov	r1, r0
   17184:	movw	r0, #50472	; 0xc528
   17188:	mov	r3, #32
   1718c:	movt	r0, #2
   17190:	add	r2, r0, #16
   17194:	vld1.64	{d16-d17}, [r0], r3
   17198:	mov	r3, sp
   1719c:	vld1.64	{d18-d19}, [r2]
   171a0:	add	r2, r3, #16
   171a4:	vld1.64	{d20-d21}, [r0]
   171a8:	add	r0, r3, #32
   171ac:	vst1.64	{d18-d19}, [r2]
   171b0:	mov	r2, r3
   171b4:	vst1.64	{d20-d21}, [r0]
   171b8:	mov	r0, #12
   171bc:	vst1.64	{d16-d17}, [r2], r0
   171c0:	ldr	r0, [r2]
   171c4:	orr	r0, r0, #67108864	; 0x4000000
   171c8:	str	r0, [r2]
   171cc:	mov	r0, #0
   171d0:	mov	r2, ip
   171d4:	bl	16cf4 <__assert_fail@plt+0x55e0>
   171d8:	mov	sp, fp
   171dc:	pop	{fp, pc}
   171e0:	push	{r4, sl, fp, lr}
   171e4:	add	fp, sp, #8
   171e8:	sub	sp, sp, #96	; 0x60
   171ec:	mov	ip, r2
   171f0:	mov	r2, sp
   171f4:	vmov.i32	q8, #0	; 0x00000000
   171f8:	mov	r4, #28
   171fc:	cmp	r1, #10
   17200:	mov	r3, r2
   17204:	add	lr, r2, #16
   17208:	vst1.64	{d16-d17}, [r3], r4
   1720c:	vst1.64	{d16-d17}, [lr]
   17210:	vst1.32	{d16-d17}, [r3]
   17214:	beq	17264 <__assert_fail@plt+0x5b50>
   17218:	vld1.64	{d16-d17}, [r2], r4
   1721c:	vld1.64	{d18-d19}, [lr]
   17220:	add	r3, sp, #48	; 0x30
   17224:	add	r4, r3, #4
   17228:	vld1.32	{d20-d21}, [r2]
   1722c:	add	r2, r3, #20
   17230:	vst1.32	{d16-d17}, [r4]
   17234:	vst1.32	{d18-d19}, [r2]
   17238:	add	r2, r3, #32
   1723c:	vst1.32	{d20-d21}, [r2]
   17240:	str	r1, [sp, #48]	; 0x30
   17244:	mvn	r2, #0
   17248:	ldr	r1, [sp, #60]	; 0x3c
   1724c:	orr	r1, r1, #67108864	; 0x4000000
   17250:	str	r1, [sp, #60]	; 0x3c
   17254:	mov	r1, ip
   17258:	bl	16cf4 <__assert_fail@plt+0x55e0>
   1725c:	sub	sp, fp, #8
   17260:	pop	{r4, sl, fp, pc}
   17264:	bl	116f0 <abort@plt>
   17268:	push	{r4, r5, fp, lr}
   1726c:	add	fp, sp, #8
   17270:	sub	sp, sp, #48	; 0x30
   17274:	mov	ip, r3
   17278:	movw	r3, #50472	; 0xc528
   1727c:	mov	lr, #32
   17280:	cmp	r1, #0
   17284:	mov	r5, sp
   17288:	movt	r3, #2
   1728c:	cmpne	r2, #0
   17290:	add	r4, r3, #16
   17294:	vld1.64	{d16-d17}, [r3], lr
   17298:	vld1.64	{d18-d19}, [r4]
   1729c:	add	r4, r5, #16
   172a0:	vld1.64	{d20-d21}, [r3]
   172a4:	vst1.64	{d16-d17}, [r5], lr
   172a8:	mov	r3, #10
   172ac:	vst1.64	{d18-d19}, [r4]
   172b0:	vst1.64	{d20-d21}, [r5]
   172b4:	str	r3, [sp]
   172b8:	bne	172c0 <__assert_fail@plt+0x5bac>
   172bc:	bl	116f0 <abort@plt>
   172c0:	str	r2, [sp, #44]	; 0x2c
   172c4:	str	r1, [sp, #40]	; 0x28
   172c8:	mov	r3, sp
   172cc:	mov	r1, ip
   172d0:	mvn	r2, #0
   172d4:	bl	16cf4 <__assert_fail@plt+0x55e0>
   172d8:	sub	sp, fp, #8
   172dc:	pop	{r4, r5, fp, pc}
   172e0:	push	{r4, r5, fp, lr}
   172e4:	add	fp, sp, #8
   172e8:	sub	sp, sp, #48	; 0x30
   172ec:	mov	lr, r3
   172f0:	movw	r3, #50472	; 0xc528
   172f4:	mov	ip, #32
   172f8:	cmp	r1, #0
   172fc:	mov	r5, sp
   17300:	movt	r3, #2
   17304:	cmpne	r2, #0
   17308:	add	r4, r3, #16
   1730c:	vld1.64	{d16-d17}, [r3], ip
   17310:	vld1.64	{d18-d19}, [r4]
   17314:	add	r4, r5, #16
   17318:	vld1.64	{d20-d21}, [r3]
   1731c:	vst1.64	{d16-d17}, [r5], ip
   17320:	mov	r3, #10
   17324:	vst1.64	{d18-d19}, [r4]
   17328:	vst1.64	{d20-d21}, [r5]
   1732c:	str	r3, [sp]
   17330:	bne	17338 <__assert_fail@plt+0x5c24>
   17334:	bl	116f0 <abort@plt>
   17338:	ldr	ip, [fp, #8]
   1733c:	str	r2, [sp, #44]	; 0x2c
   17340:	str	r1, [sp, #40]	; 0x28
   17344:	mov	r3, sp
   17348:	mov	r1, lr
   1734c:	mov	r2, ip
   17350:	bl	16cf4 <__assert_fail@plt+0x55e0>
   17354:	sub	sp, fp, #8
   17358:	pop	{r4, r5, fp, pc}
   1735c:	push	{r4, sl, fp, lr}
   17360:	add	fp, sp, #8
   17364:	sub	sp, sp, #48	; 0x30
   17368:	mov	ip, r2
   1736c:	movw	r2, #50472	; 0xc528
   17370:	mov	lr, #32
   17374:	cmp	r0, #0
   17378:	mov	r4, sp
   1737c:	movt	r2, #2
   17380:	cmpne	r1, #0
   17384:	add	r3, r2, #16
   17388:	vld1.64	{d16-d17}, [r2], lr
   1738c:	vld1.64	{d18-d19}, [r3]
   17390:	add	r3, r4, #16
   17394:	vld1.64	{d20-d21}, [r2]
   17398:	vst1.64	{d16-d17}, [r4], lr
   1739c:	mov	r2, #10
   173a0:	vst1.64	{d18-d19}, [r3]
   173a4:	vst1.64	{d20-d21}, [r4]
   173a8:	str	r2, [sp]
   173ac:	bne	173b4 <__assert_fail@plt+0x5ca0>
   173b0:	bl	116f0 <abort@plt>
   173b4:	str	r1, [sp, #44]	; 0x2c
   173b8:	str	r0, [sp, #40]	; 0x28
   173bc:	mov	r3, sp
   173c0:	mov	r0, #0
   173c4:	mov	r1, ip
   173c8:	mvn	r2, #0
   173cc:	bl	16cf4 <__assert_fail@plt+0x55e0>
   173d0:	sub	sp, fp, #8
   173d4:	pop	{r4, sl, fp, pc}
   173d8:	push	{r4, r5, fp, lr}
   173dc:	add	fp, sp, #8
   173e0:	sub	sp, sp, #48	; 0x30
   173e4:	mov	lr, r2
   173e8:	movw	r2, #50472	; 0xc528
   173ec:	mov	ip, r3
   173f0:	mov	r3, #32
   173f4:	cmp	r0, #0
   173f8:	mov	r5, sp
   173fc:	movt	r2, #2
   17400:	cmpne	r1, #0
   17404:	add	r4, r2, #16
   17408:	vld1.64	{d16-d17}, [r2], r3
   1740c:	vld1.64	{d18-d19}, [r4]
   17410:	add	r4, r5, #16
   17414:	vld1.64	{d20-d21}, [r2]
   17418:	vst1.64	{d16-d17}, [r5], r3
   1741c:	mov	r2, #10
   17420:	vst1.64	{d18-d19}, [r4]
   17424:	vst1.64	{d20-d21}, [r5]
   17428:	str	r2, [sp]
   1742c:	bne	17434 <__assert_fail@plt+0x5d20>
   17430:	bl	116f0 <abort@plt>
   17434:	str	r1, [sp, #44]	; 0x2c
   17438:	str	r0, [sp, #40]	; 0x28
   1743c:	mov	r3, sp
   17440:	mov	r0, #0
   17444:	mov	r1, lr
   17448:	mov	r2, ip
   1744c:	bl	16cf4 <__assert_fail@plt+0x55e0>
   17450:	sub	sp, fp, #8
   17454:	pop	{r4, r5, fp, pc}
   17458:	movw	r3, #49512	; 0xc168
   1745c:	movt	r3, #2
   17460:	b	16cf4 <__assert_fail@plt+0x55e0>
   17464:	movw	r3, #49512	; 0xc168
   17468:	mov	r2, r1
   1746c:	mov	r1, r0
   17470:	mov	r0, #0
   17474:	movt	r3, #2
   17478:	b	16cf4 <__assert_fail@plt+0x55e0>
   1747c:	movw	r3, #49512	; 0xc168
   17480:	mvn	r2, #0
   17484:	movt	r3, #2
   17488:	b	16cf4 <__assert_fail@plt+0x55e0>
   1748c:	movw	r3, #49512	; 0xc168
   17490:	mov	r1, r0
   17494:	mov	r0, #0
   17498:	mvn	r2, #0
   1749c:	movt	r3, #2
   174a0:	b	16cf4 <__assert_fail@plt+0x55e0>
   174a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   174a8:	add	fp, sp, #24
   174ac:	movw	r8, #0
   174b0:	mov	r6, r2
   174b4:	mov	r4, r1
   174b8:	mov	r5, r0
   174bc:	movt	r8, #32752	; 0x7ff0
   174c0:	mov	r0, r5
   174c4:	mov	r1, r4
   174c8:	mov	r2, r6
   174cc:	bl	113c0 <read@plt>
   174d0:	mov	r7, r0
   174d4:	cmn	r0, #1
   174d8:	bgt	17500 <__assert_fail@plt+0x5dec>
   174dc:	bl	115d0 <__errno_location@plt>
   174e0:	ldr	r0, [r0]
   174e4:	cmp	r0, #4
   174e8:	beq	174c0 <__assert_fail@plt+0x5dac>
   174ec:	cmp	r6, r8
   174f0:	bls	17500 <__assert_fail@plt+0x5dec>
   174f4:	cmp	r0, #22
   174f8:	mov	r6, r8
   174fc:	beq	174c0 <__assert_fail@plt+0x5dac>
   17500:	mov	r0, r7
   17504:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17508:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1750c:	add	fp, sp, #24
   17510:	movw	r8, #0
   17514:	mov	r6, r2
   17518:	mov	r4, r1
   1751c:	mov	r5, r0
   17520:	movt	r8, #32752	; 0x7ff0
   17524:	mov	r0, r5
   17528:	mov	r1, r4
   1752c:	mov	r2, r6
   17530:	bl	1160c <write@plt>
   17534:	mov	r7, r0
   17538:	cmn	r0, #1
   1753c:	bgt	17564 <__assert_fail@plt+0x5e50>
   17540:	bl	115d0 <__errno_location@plt>
   17544:	ldr	r0, [r0]
   17548:	cmp	r0, #4
   1754c:	beq	17524 <__assert_fail@plt+0x5e10>
   17550:	cmp	r6, r8
   17554:	bls	17564 <__assert_fail@plt+0x5e50>
   17558:	cmp	r0, #22
   1755c:	mov	r6, r8
   17560:	beq	17524 <__assert_fail@plt+0x5e10>
   17564:	mov	r0, r7
   17568:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1756c:	push	{r4, r5, r6, r7, fp, lr}
   17570:	add	fp, sp, #16
   17574:	sub	sp, sp, #8
   17578:	mov	r5, r0
   1757c:	ldrb	r0, [r0]
   17580:	mov	r4, r1
   17584:	sub	r0, r0, #48	; 0x30
   17588:	cmp	r0, #10
   1758c:	bcs	175c8 <__assert_fail@plt+0x5eb4>
   17590:	add	r1, sp, #4
   17594:	mov	r0, r5
   17598:	mov	r2, #10
   1759c:	bl	113b4 <strtol@plt>
   175a0:	cmp	r0, #64	; 0x40
   175a4:	bgt	17a9c <__assert_fail@plt+0x6388>
   175a8:	ldr	r1, [sp, #4]
   175ac:	ldrb	r1, [r1]
   175b0:	cmp	r1, #0
   175b4:	mvnne	r0, #0
   175b8:	str	r0, [r4]
   175bc:	asr	r0, r0, #31
   175c0:	sub	sp, fp, #16
   175c4:	pop	{r4, r5, r6, r7, fp, pc}
   175c8:	movw	r6, #49576	; 0xc1a8
   175cc:	mov	r1, r5
   175d0:	movt	r6, #2
   175d4:	add	r0, r6, #4
   175d8:	bl	113a8 <strcmp@plt>
   175dc:	cmp	r0, #0
   175e0:	beq	17928 <__assert_fail@plt+0x6214>
   175e4:	add	r0, r6, #16
   175e8:	mov	r1, r5
   175ec:	bl	113a8 <strcmp@plt>
   175f0:	cmp	r0, #0
   175f4:	beq	17930 <__assert_fail@plt+0x621c>
   175f8:	add	r0, r6, #28
   175fc:	mov	r1, r5
   17600:	bl	113a8 <strcmp@plt>
   17604:	cmp	r0, #0
   17608:	beq	17938 <__assert_fail@plt+0x6224>
   1760c:	add	r0, r6, #40	; 0x28
   17610:	mov	r1, r5
   17614:	bl	113a8 <strcmp@plt>
   17618:	cmp	r0, #0
   1761c:	beq	17940 <__assert_fail@plt+0x622c>
   17620:	add	r0, r6, #52	; 0x34
   17624:	mov	r1, r5
   17628:	bl	113a8 <strcmp@plt>
   1762c:	cmp	r0, #0
   17630:	beq	17948 <__assert_fail@plt+0x6234>
   17634:	add	r0, r6, #64	; 0x40
   17638:	mov	r1, r5
   1763c:	bl	113a8 <strcmp@plt>
   17640:	cmp	r0, #0
   17644:	beq	17950 <__assert_fail@plt+0x623c>
   17648:	add	r0, r6, #76	; 0x4c
   1764c:	mov	r1, r5
   17650:	bl	113a8 <strcmp@plt>
   17654:	cmp	r0, #0
   17658:	beq	17958 <__assert_fail@plt+0x6244>
   1765c:	add	r0, r6, #88	; 0x58
   17660:	mov	r1, r5
   17664:	bl	113a8 <strcmp@plt>
   17668:	cmp	r0, #0
   1766c:	beq	17960 <__assert_fail@plt+0x624c>
   17670:	add	r0, r6, #100	; 0x64
   17674:	mov	r1, r5
   17678:	bl	113a8 <strcmp@plt>
   1767c:	cmp	r0, #0
   17680:	beq	17968 <__assert_fail@plt+0x6254>
   17684:	add	r0, r6, #112	; 0x70
   17688:	mov	r1, r5
   1768c:	bl	113a8 <strcmp@plt>
   17690:	cmp	r0, #0
   17694:	beq	17970 <__assert_fail@plt+0x625c>
   17698:	add	r0, r6, #124	; 0x7c
   1769c:	mov	r1, r5
   176a0:	bl	113a8 <strcmp@plt>
   176a4:	cmp	r0, #0
   176a8:	beq	17978 <__assert_fail@plt+0x6264>
   176ac:	add	r0, r6, #136	; 0x88
   176b0:	mov	r1, r5
   176b4:	bl	113a8 <strcmp@plt>
   176b8:	cmp	r0, #0
   176bc:	beq	17980 <__assert_fail@plt+0x626c>
   176c0:	add	r0, r6, #148	; 0x94
   176c4:	mov	r1, r5
   176c8:	bl	113a8 <strcmp@plt>
   176cc:	cmp	r0, #0
   176d0:	beq	17988 <__assert_fail@plt+0x6274>
   176d4:	add	r0, r6, #160	; 0xa0
   176d8:	mov	r1, r5
   176dc:	bl	113a8 <strcmp@plt>
   176e0:	cmp	r0, #0
   176e4:	beq	17990 <__assert_fail@plt+0x627c>
   176e8:	add	r0, r6, #172	; 0xac
   176ec:	mov	r1, r5
   176f0:	bl	113a8 <strcmp@plt>
   176f4:	cmp	r0, #0
   176f8:	beq	17998 <__assert_fail@plt+0x6284>
   176fc:	add	r0, r6, #184	; 0xb8
   17700:	mov	r1, r5
   17704:	bl	113a8 <strcmp@plt>
   17708:	cmp	r0, #0
   1770c:	beq	179a0 <__assert_fail@plt+0x628c>
   17710:	add	r0, r6, #196	; 0xc4
   17714:	mov	r1, r5
   17718:	bl	113a8 <strcmp@plt>
   1771c:	cmp	r0, #0
   17720:	beq	179a8 <__assert_fail@plt+0x6294>
   17724:	add	r0, r6, #208	; 0xd0
   17728:	mov	r1, r5
   1772c:	bl	113a8 <strcmp@plt>
   17730:	cmp	r0, #0
   17734:	beq	179b0 <__assert_fail@plt+0x629c>
   17738:	add	r0, r6, #220	; 0xdc
   1773c:	mov	r1, r5
   17740:	bl	113a8 <strcmp@plt>
   17744:	cmp	r0, #0
   17748:	beq	179b8 <__assert_fail@plt+0x62a4>
   1774c:	add	r0, r6, #232	; 0xe8
   17750:	mov	r1, r5
   17754:	bl	113a8 <strcmp@plt>
   17758:	cmp	r0, #0
   1775c:	beq	179c0 <__assert_fail@plt+0x62ac>
   17760:	add	r0, r6, #244	; 0xf4
   17764:	mov	r1, r5
   17768:	bl	113a8 <strcmp@plt>
   1776c:	cmp	r0, #0
   17770:	beq	179c8 <__assert_fail@plt+0x62b4>
   17774:	add	r0, r6, #256	; 0x100
   17778:	mov	r1, r5
   1777c:	bl	113a8 <strcmp@plt>
   17780:	cmp	r0, #0
   17784:	beq	179d0 <__assert_fail@plt+0x62bc>
   17788:	add	r0, r6, #268	; 0x10c
   1778c:	mov	r1, r5
   17790:	bl	113a8 <strcmp@plt>
   17794:	cmp	r0, #0
   17798:	beq	179d8 <__assert_fail@plt+0x62c4>
   1779c:	add	r0, r6, #280	; 0x118
   177a0:	mov	r1, r5
   177a4:	bl	113a8 <strcmp@plt>
   177a8:	cmp	r0, #0
   177ac:	beq	179e0 <__assert_fail@plt+0x62cc>
   177b0:	add	r0, r6, #292	; 0x124
   177b4:	mov	r1, r5
   177b8:	bl	113a8 <strcmp@plt>
   177bc:	cmp	r0, #0
   177c0:	beq	179e8 <__assert_fail@plt+0x62d4>
   177c4:	add	r0, r6, #304	; 0x130
   177c8:	mov	r1, r5
   177cc:	bl	113a8 <strcmp@plt>
   177d0:	cmp	r0, #0
   177d4:	beq	179f0 <__assert_fail@plt+0x62dc>
   177d8:	add	r0, r6, #316	; 0x13c
   177dc:	mov	r1, r5
   177e0:	bl	113a8 <strcmp@plt>
   177e4:	cmp	r0, #0
   177e8:	beq	179f8 <__assert_fail@plt+0x62e4>
   177ec:	add	r0, r6, #328	; 0x148
   177f0:	mov	r1, r5
   177f4:	bl	113a8 <strcmp@plt>
   177f8:	cmp	r0, #0
   177fc:	beq	17a00 <__assert_fail@plt+0x62ec>
   17800:	add	r0, r6, #340	; 0x154
   17804:	mov	r1, r5
   17808:	bl	113a8 <strcmp@plt>
   1780c:	cmp	r0, #0
   17810:	beq	17a08 <__assert_fail@plt+0x62f4>
   17814:	add	r0, r6, #352	; 0x160
   17818:	mov	r1, r5
   1781c:	bl	113a8 <strcmp@plt>
   17820:	cmp	r0, #0
   17824:	beq	17a10 <__assert_fail@plt+0x62fc>
   17828:	add	r0, r6, #364	; 0x16c
   1782c:	mov	r1, r5
   17830:	bl	113a8 <strcmp@plt>
   17834:	cmp	r0, #0
   17838:	beq	17a18 <__assert_fail@plt+0x6304>
   1783c:	add	r0, r6, #376	; 0x178
   17840:	mov	r1, r5
   17844:	bl	113a8 <strcmp@plt>
   17848:	cmp	r0, #0
   1784c:	beq	17a20 <__assert_fail@plt+0x630c>
   17850:	add	r0, r6, #388	; 0x184
   17854:	mov	r1, r5
   17858:	bl	113a8 <strcmp@plt>
   1785c:	cmp	r0, #0
   17860:	beq	17a28 <__assert_fail@plt+0x6314>
   17864:	add	r0, r6, #400	; 0x190
   17868:	mov	r1, r5
   1786c:	bl	113a8 <strcmp@plt>
   17870:	cmp	r0, #0
   17874:	beq	17a30 <__assert_fail@plt+0x631c>
   17878:	add	r0, r6, #412	; 0x19c
   1787c:	mov	r1, r5
   17880:	bl	113a8 <strcmp@plt>
   17884:	cmp	r0, #0
   17888:	beq	17a38 <__assert_fail@plt+0x6324>
   1788c:	bl	116d8 <__libc_current_sigrtmin@plt>
   17890:	mov	r6, r0
   17894:	bl	11594 <__libc_current_sigrtmax@plt>
   17898:	mov	r7, r0
   1789c:	cmp	r6, #0
   178a0:	ble	178c0 <__assert_fail@plt+0x61ac>
   178a4:	movw	r1, #45664	; 0xb260
   178a8:	mov	r0, r5
   178ac:	mov	r2, #5
   178b0:	movt	r1, #1
   178b4:	bl	116e4 <strncmp@plt>
   178b8:	cmp	r0, #0
   178bc:	beq	17a54 <__assert_fail@plt+0x6340>
   178c0:	cmp	r7, #1
   178c4:	blt	17a9c <__assert_fail@plt+0x6388>
   178c8:	movw	r1, #45670	; 0xb266
   178cc:	mov	r0, r5
   178d0:	mov	r2, #5
   178d4:	movt	r1, #1
   178d8:	bl	116e4 <strncmp@plt>
   178dc:	cmp	r0, #0
   178e0:	bne	17a9c <__assert_fail@plt+0x6388>
   178e4:	add	r0, r5, #5
   178e8:	mov	r1, sp
   178ec:	mov	r2, #10
   178f0:	bl	113b4 <strtol@plt>
   178f4:	ldr	r1, [sp]
   178f8:	ldrb	r1, [r1]
   178fc:	cmp	r1, #0
   17900:	bne	17a9c <__assert_fail@plt+0x6388>
   17904:	sub	r1, r6, r7
   17908:	cmp	r1, r0
   1790c:	cmple	r0, #0
   17910:	bgt	17a9c <__assert_fail@plt+0x6388>
   17914:	add	r0, r0, r7
   17918:	str	r0, [r4]
   1791c:	asr	r0, r0, #31
   17920:	sub	sp, fp, #16
   17924:	pop	{r4, r5, r6, r7, fp, pc}
   17928:	mov	r0, #0
   1792c:	b	17a3c <__assert_fail@plt+0x6328>
   17930:	mov	r0, #1
   17934:	b	17a3c <__assert_fail@plt+0x6328>
   17938:	mov	r0, #2
   1793c:	b	17a3c <__assert_fail@plt+0x6328>
   17940:	mov	r0, #3
   17944:	b	17a3c <__assert_fail@plt+0x6328>
   17948:	mov	r0, #4
   1794c:	b	17a3c <__assert_fail@plt+0x6328>
   17950:	mov	r0, #5
   17954:	b	17a3c <__assert_fail@plt+0x6328>
   17958:	mov	r0, #6
   1795c:	b	17a3c <__assert_fail@plt+0x6328>
   17960:	mov	r0, #7
   17964:	b	17a3c <__assert_fail@plt+0x6328>
   17968:	mov	r0, #8
   1796c:	b	17a3c <__assert_fail@plt+0x6328>
   17970:	mov	r0, #9
   17974:	b	17a3c <__assert_fail@plt+0x6328>
   17978:	mov	r0, #10
   1797c:	b	17a3c <__assert_fail@plt+0x6328>
   17980:	mov	r0, #11
   17984:	b	17a3c <__assert_fail@plt+0x6328>
   17988:	mov	r0, #12
   1798c:	b	17a3c <__assert_fail@plt+0x6328>
   17990:	mov	r0, #13
   17994:	b	17a3c <__assert_fail@plt+0x6328>
   17998:	mov	r0, #14
   1799c:	b	17a3c <__assert_fail@plt+0x6328>
   179a0:	mov	r0, #15
   179a4:	b	17a3c <__assert_fail@plt+0x6328>
   179a8:	mov	r0, #16
   179ac:	b	17a3c <__assert_fail@plt+0x6328>
   179b0:	mov	r0, #17
   179b4:	b	17a3c <__assert_fail@plt+0x6328>
   179b8:	mov	r0, #18
   179bc:	b	17a3c <__assert_fail@plt+0x6328>
   179c0:	mov	r0, #19
   179c4:	b	17a3c <__assert_fail@plt+0x6328>
   179c8:	mov	r0, #20
   179cc:	b	17a3c <__assert_fail@plt+0x6328>
   179d0:	mov	r0, #21
   179d4:	b	17a3c <__assert_fail@plt+0x6328>
   179d8:	mov	r0, #22
   179dc:	b	17a3c <__assert_fail@plt+0x6328>
   179e0:	mov	r0, #23
   179e4:	b	17a3c <__assert_fail@plt+0x6328>
   179e8:	mov	r0, #24
   179ec:	b	17a3c <__assert_fail@plt+0x6328>
   179f0:	mov	r0, #25
   179f4:	b	17a3c <__assert_fail@plt+0x6328>
   179f8:	mov	r0, #26
   179fc:	b	17a3c <__assert_fail@plt+0x6328>
   17a00:	mov	r0, #27
   17a04:	b	17a3c <__assert_fail@plt+0x6328>
   17a08:	mov	r0, #28
   17a0c:	b	17a3c <__assert_fail@plt+0x6328>
   17a10:	mov	r0, #29
   17a14:	b	17a3c <__assert_fail@plt+0x6328>
   17a18:	mov	r0, #30
   17a1c:	b	17a3c <__assert_fail@plt+0x6328>
   17a20:	mov	r0, #31
   17a24:	b	17a3c <__assert_fail@plt+0x6328>
   17a28:	mov	r0, #32
   17a2c:	b	17a3c <__assert_fail@plt+0x6328>
   17a30:	mov	r0, #33	; 0x21
   17a34:	b	17a3c <__assert_fail@plt+0x6328>
   17a38:	mov	r0, #34	; 0x22
   17a3c:	add	r0, r0, r0, lsl #1
   17a40:	ldr	r0, [r6, r0, lsl #2]
   17a44:	str	r0, [r4]
   17a48:	asr	r0, r0, #31
   17a4c:	sub	sp, fp, #16
   17a50:	pop	{r4, r5, r6, r7, fp, pc}
   17a54:	add	r0, r5, #5
   17a58:	mov	r1, sp
   17a5c:	mov	r2, #10
   17a60:	bl	113b4 <strtol@plt>
   17a64:	sub	r1, r7, r6
   17a68:	cmp	r0, r1
   17a6c:	bgt	17a9c <__assert_fail@plt+0x6388>
   17a70:	cmp	r0, #0
   17a74:	blt	17a9c <__assert_fail@plt+0x6388>
   17a78:	ldr	r1, [sp]
   17a7c:	ldrb	r1, [r1]
   17a80:	cmp	r1, #0
   17a84:	bne	17a9c <__assert_fail@plt+0x6388>
   17a88:	add	r0, r0, r6
   17a8c:	str	r0, [r4]
   17a90:	asr	r0, r0, #31
   17a94:	sub	sp, fp, #16
   17a98:	pop	{r4, r5, r6, r7, fp, pc}
   17a9c:	mvn	r0, #0
   17aa0:	str	r0, [r4]
   17aa4:	asr	r0, r0, #31
   17aa8:	sub	sp, fp, #16
   17aac:	pop	{r4, r5, r6, r7, fp, pc}
   17ab0:	push	{r4, r5, r6, r7, fp, lr}
   17ab4:	add	fp, sp, #16
   17ab8:	sub	sp, sp, #8
   17abc:	mov	r6, r0
   17ac0:	movw	r0, #49576	; 0xc1a8
   17ac4:	mov	r4, r1
   17ac8:	mov	r5, #0
   17acc:	movt	r0, #2
   17ad0:	ldr	r1, [r0]
   17ad4:	cmp	r1, r6
   17ad8:	mov	r1, #0
   17adc:	beq	17d00 <__assert_fail@plt+0x65ec>
   17ae0:	ldr	r2, [r0, #12]
   17ae4:	mov	r1, #1
   17ae8:	cmp	r2, r6
   17aec:	beq	17d00 <__assert_fail@plt+0x65ec>
   17af0:	ldr	r2, [r0, #24]
   17af4:	mov	r1, #2
   17af8:	cmp	r2, r6
   17afc:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b00:	ldr	r2, [r0, #36]	; 0x24
   17b04:	mov	r1, #3
   17b08:	cmp	r2, r6
   17b0c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b10:	ldr	r2, [r0, #48]	; 0x30
   17b14:	mov	r1, #4
   17b18:	cmp	r2, r6
   17b1c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b20:	ldr	r2, [r0, #60]	; 0x3c
   17b24:	mov	r1, #5
   17b28:	cmp	r2, r6
   17b2c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b30:	ldr	r2, [r0, #72]	; 0x48
   17b34:	mov	r1, #6
   17b38:	cmp	r2, r6
   17b3c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b40:	ldr	r2, [r0, #84]	; 0x54
   17b44:	mov	r1, #7
   17b48:	cmp	r2, r6
   17b4c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b50:	ldr	r2, [r0, #96]	; 0x60
   17b54:	mov	r1, #8
   17b58:	cmp	r2, r6
   17b5c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b60:	ldr	r2, [r0, #108]	; 0x6c
   17b64:	mov	r1, #9
   17b68:	cmp	r2, r6
   17b6c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b70:	ldr	r2, [r0, #120]	; 0x78
   17b74:	mov	r1, #10
   17b78:	cmp	r2, r6
   17b7c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b80:	ldr	r2, [r0, #132]	; 0x84
   17b84:	mov	r1, #11
   17b88:	cmp	r2, r6
   17b8c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17b90:	ldr	r2, [r0, #144]	; 0x90
   17b94:	mov	r1, #12
   17b98:	cmp	r2, r6
   17b9c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17ba0:	ldr	r2, [r0, #156]	; 0x9c
   17ba4:	mov	r1, #13
   17ba8:	cmp	r2, r6
   17bac:	beq	17d00 <__assert_fail@plt+0x65ec>
   17bb0:	ldr	r2, [r0, #168]	; 0xa8
   17bb4:	mov	r1, #14
   17bb8:	cmp	r2, r6
   17bbc:	beq	17d00 <__assert_fail@plt+0x65ec>
   17bc0:	ldr	r2, [r0, #180]	; 0xb4
   17bc4:	mov	r1, #15
   17bc8:	cmp	r2, r6
   17bcc:	beq	17d00 <__assert_fail@plt+0x65ec>
   17bd0:	ldr	r2, [r0, #192]	; 0xc0
   17bd4:	mov	r1, #16
   17bd8:	cmp	r2, r6
   17bdc:	beq	17d00 <__assert_fail@plt+0x65ec>
   17be0:	ldr	r2, [r0, #204]	; 0xcc
   17be4:	mov	r1, #17
   17be8:	cmp	r2, r6
   17bec:	beq	17d00 <__assert_fail@plt+0x65ec>
   17bf0:	ldr	r2, [r0, #216]	; 0xd8
   17bf4:	mov	r1, #18
   17bf8:	cmp	r2, r6
   17bfc:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c00:	ldr	r2, [r0, #228]	; 0xe4
   17c04:	mov	r1, #19
   17c08:	cmp	r2, r6
   17c0c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c10:	ldr	r2, [r0, #240]	; 0xf0
   17c14:	mov	r1, #20
   17c18:	cmp	r2, r6
   17c1c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c20:	ldr	r2, [r0, #252]	; 0xfc
   17c24:	mov	r1, #21
   17c28:	cmp	r2, r6
   17c2c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c30:	ldr	r2, [r0, #264]	; 0x108
   17c34:	mov	r1, #22
   17c38:	cmp	r2, r6
   17c3c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c40:	ldr	r2, [r0, #276]	; 0x114
   17c44:	mov	r1, #23
   17c48:	cmp	r2, r6
   17c4c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c50:	ldr	r2, [r0, #288]	; 0x120
   17c54:	mov	r1, #24
   17c58:	cmp	r2, r6
   17c5c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c60:	ldr	r2, [r0, #300]	; 0x12c
   17c64:	mov	r1, #25
   17c68:	cmp	r2, r6
   17c6c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c70:	ldr	r2, [r0, #312]	; 0x138
   17c74:	mov	r1, #26
   17c78:	cmp	r2, r6
   17c7c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c80:	ldr	r2, [r0, #324]	; 0x144
   17c84:	mov	r1, #27
   17c88:	cmp	r2, r6
   17c8c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17c90:	ldr	r2, [r0, #336]	; 0x150
   17c94:	mov	r1, #28
   17c98:	cmp	r2, r6
   17c9c:	beq	17d00 <__assert_fail@plt+0x65ec>
   17ca0:	ldr	r2, [r0, #348]	; 0x15c
   17ca4:	mov	r1, #29
   17ca8:	cmp	r2, r6
   17cac:	beq	17d00 <__assert_fail@plt+0x65ec>
   17cb0:	ldr	r2, [r0, #360]	; 0x168
   17cb4:	mov	r1, #30
   17cb8:	cmp	r2, r6
   17cbc:	beq	17d00 <__assert_fail@plt+0x65ec>
   17cc0:	ldr	r2, [r0, #372]	; 0x174
   17cc4:	mov	r1, #31
   17cc8:	cmp	r2, r6
   17ccc:	beq	17d00 <__assert_fail@plt+0x65ec>
   17cd0:	ldr	r2, [r0, #384]	; 0x180
   17cd4:	mov	r1, #32
   17cd8:	cmp	r2, r6
   17cdc:	beq	17d00 <__assert_fail@plt+0x65ec>
   17ce0:	ldr	r2, [r0, #396]	; 0x18c
   17ce4:	mov	r1, #33	; 0x21
   17ce8:	cmp	r2, r6
   17cec:	beq	17d00 <__assert_fail@plt+0x65ec>
   17cf0:	ldr	r2, [r0, #408]	; 0x198
   17cf4:	mov	r1, #34	; 0x22
   17cf8:	cmp	r2, r6
   17cfc:	bne	17d20 <__assert_fail@plt+0x660c>
   17d00:	add	r1, r1, r1, lsl #1
   17d04:	add	r0, r0, r1, lsl #2
   17d08:	add	r1, r0, #4
   17d0c:	mov	r0, r4
   17d10:	bl	114e0 <strcpy@plt>
   17d14:	mov	r0, r5
   17d18:	sub	sp, fp, #16
   17d1c:	pop	{r4, r5, r6, r7, fp, pc}
   17d20:	bl	116d8 <__libc_current_sigrtmin@plt>
   17d24:	mov	r7, r0
   17d28:	mvn	r5, #0
   17d2c:	bl	11594 <__libc_current_sigrtmax@plt>
   17d30:	cmp	r7, r6
   17d34:	bgt	17d14 <__assert_fail@plt+0x6600>
   17d38:	cmp	r0, r6
   17d3c:	blt	17d14 <__assert_fail@plt+0x6600>
   17d40:	sub	r1, r0, r7
   17d44:	add	r1, r1, r1, lsr #31
   17d48:	add	r1, r7, r1, asr #1
   17d4c:	cmp	r1, r6
   17d50:	bge	17d7c <__assert_fail@plt+0x6668>
   17d54:	mov	r1, #88	; 0x58
   17d58:	mov	r7, r0
   17d5c:	strh	r1, [r4, #4]
   17d60:	movw	r1, #21586	; 0x5452
   17d64:	movt	r1, #16717	; 0x414d
   17d68:	str	r1, [r4]
   17d6c:	subs	r0, r6, r7
   17d70:	mov	r5, #0
   17d74:	bne	17d9c <__assert_fail@plt+0x6688>
   17d78:	b	17d14 <__assert_fail@plt+0x6600>
   17d7c:	mov	r0, #78	; 0x4e
   17d80:	strh	r0, [r4, #4]
   17d84:	movw	r0, #21586	; 0x5452
   17d88:	movt	r0, #18765	; 0x494d
   17d8c:	str	r0, [r4]
   17d90:	subs	r0, r6, r7
   17d94:	mov	r5, #0
   17d98:	beq	17d14 <__assert_fail@plt+0x6600>
   17d9c:	movw	r3, #45676	; 0xb26c
   17da0:	str	r0, [sp]
   17da4:	add	r0, r4, #5
   17da8:	mov	r1, #1
   17dac:	mvn	r2, #0
   17db0:	movt	r3, #1
   17db4:	bl	115dc <__sprintf_chk@plt>
   17db8:	mov	r0, r5
   17dbc:	sub	sp, fp, #16
   17dc0:	pop	{r4, r5, r6, r7, fp, pc}
   17dc4:	push	{r4, r5, r6, r7, fp, lr}
   17dc8:	add	fp, sp, #16
   17dcc:	mov	r4, r0
   17dd0:	cmp	r0, #2
   17dd4:	movhi	r0, r4
   17dd8:	pophi	{r4, r5, r6, r7, fp, pc}
   17ddc:	mov	r0, r4
   17de0:	bl	19a64 <__assert_fail@plt+0x8350>
   17de4:	mov	r5, r0
   17de8:	bl	115d0 <__errno_location@plt>
   17dec:	ldr	r7, [r0]
   17df0:	mov	r6, r0
   17df4:	mov	r0, r4
   17df8:	bl	116fc <close@plt>
   17dfc:	mov	r0, r5
   17e00:	str	r7, [r6]
   17e04:	pop	{r4, r5, r6, r7, fp, pc}
   17e08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17e0c:	add	fp, sp, #24
   17e10:	sub	sp, sp, #32
   17e14:	ldr	r6, [fp, #12]
   17e18:	ldr	r7, [fp, #8]
   17e1c:	mov	r4, r2
   17e20:	mov	r8, r0
   17e24:	cmp	r1, #0
   17e28:	beq	17e50 <__assert_fail@plt+0x673c>
   17e2c:	movw	r2, #45680	; 0xb270
   17e30:	mov	r5, r1
   17e34:	str	r3, [sp, #4]
   17e38:	str	r4, [sp]
   17e3c:	mov	r0, r8
   17e40:	mov	r1, #1
   17e44:	movt	r2, #1
   17e48:	mov	r3, r5
   17e4c:	b	17e68 <__assert_fail@plt+0x6754>
   17e50:	movw	r2, #45692	; 0xb27c
   17e54:	str	r3, [sp]
   17e58:	mov	r0, r8
   17e5c:	mov	r1, #1
   17e60:	mov	r3, r4
   17e64:	movt	r2, #1
   17e68:	bl	11624 <__fprintf_chk@plt>
   17e6c:	movw	r1, #45699	; 0xb283
   17e70:	mov	r0, #0
   17e74:	mov	r2, #5
   17e78:	movt	r1, #1
   17e7c:	bl	11450 <dcgettext@plt>
   17e80:	movw	r2, #46417	; 0xb551
   17e84:	mov	r3, r0
   17e88:	movw	r0, #2022	; 0x7e6
   17e8c:	mov	r1, #1
   17e90:	str	r0, [sp]
   17e94:	movt	r2, #1
   17e98:	mov	r0, r8
   17e9c:	bl	11624 <__fprintf_chk@plt>
   17ea0:	movw	r4, #42060	; 0xa44c
   17ea4:	mov	r1, r8
   17ea8:	movt	r4, #1
   17eac:	mov	r0, r4
   17eb0:	bl	11390 <fputs_unlocked@plt>
   17eb4:	movw	r1, #45703	; 0xb287
   17eb8:	mov	r0, #0
   17ebc:	mov	r2, #5
   17ec0:	movt	r1, #1
   17ec4:	bl	11450 <dcgettext@plt>
   17ec8:	movw	r3, #45874	; 0xb332
   17ecc:	mov	r2, r0
   17ed0:	mov	r0, r8
   17ed4:	mov	r1, #1
   17ed8:	movt	r3, #1
   17edc:	bl	11624 <__fprintf_chk@plt>
   17ee0:	mov	r0, r4
   17ee4:	mov	r1, r8
   17ee8:	bl	11390 <fputs_unlocked@plt>
   17eec:	cmp	r6, #9
   17ef0:	bhi	17f2c <__assert_fail@plt+0x6818>
   17ef4:	add	r0, pc, #0
   17ef8:	ldr	pc, [r0, r6, lsl #2]
   17efc:	andeq	r7, r1, r4, lsr #30
   17f00:	andeq	r7, r1, r8, lsr pc
   17f04:	andeq	r7, r1, r8, ror #30
   17f08:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   17f0c:			; <UNDEFINED> instruction: 0x00017fb8
   17f10:	andeq	r7, r1, r0, ror #31
   17f14:	andeq	r8, r1, r8
   17f18:	andeq	r8, r1, r0, asr #32
   17f1c:	andeq	r8, r1, r8, ror #1
   17f20:	muleq	r1, r0, r0
   17f24:	sub	sp, fp, #24
   17f28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f2c:	movw	r1, #46227	; 0xb493
   17f30:	movt	r1, #1
   17f34:	b	18098 <__assert_fail@plt+0x6984>
   17f38:	movw	r1, #45908	; 0xb354
   17f3c:	mov	r0, #0
   17f40:	mov	r2, #5
   17f44:	movt	r1, #1
   17f48:	bl	11450 <dcgettext@plt>
   17f4c:	ldr	r3, [r7]
   17f50:	mov	r2, r0
   17f54:	mov	r0, r8
   17f58:	mov	r1, #1
   17f5c:	sub	sp, fp, #24
   17f60:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17f64:	b	11624 <__fprintf_chk@plt>
   17f68:	movw	r1, #45924	; 0xb364
   17f6c:	mov	r0, #0
   17f70:	mov	r2, #5
   17f74:	movt	r1, #1
   17f78:	bl	11450 <dcgettext@plt>
   17f7c:	mov	r2, r0
   17f80:	ldr	r3, [r7]
   17f84:	ldr	r0, [r7, #4]
   17f88:	str	r0, [sp]
   17f8c:	b	1807c <__assert_fail@plt+0x6968>
   17f90:	movw	r1, #45947	; 0xb37b
   17f94:	mov	r0, #0
   17f98:	mov	r2, #5
   17f9c:	movt	r1, #1
   17fa0:	bl	11450 <dcgettext@plt>
   17fa4:	ldr	r3, [r7]
   17fa8:	mov	r2, r0
   17fac:	ldmib	r7, {r0, r1}
   17fb0:	stm	sp, {r0, r1}
   17fb4:	b	1807c <__assert_fail@plt+0x6968>
   17fb8:	movw	r1, #45975	; 0xb397
   17fbc:	mov	r0, #0
   17fc0:	mov	r2, #5
   17fc4:	movt	r1, #1
   17fc8:	bl	11450 <dcgettext@plt>
   17fcc:	ldr	r3, [r7]
   17fd0:	mov	r2, r0
   17fd4:	ldmib	r7, {r0, r1, r7}
   17fd8:	stm	sp, {r0, r1, r7}
   17fdc:	b	1807c <__assert_fail@plt+0x6968>
   17fe0:	movw	r1, #46007	; 0xb3b7
   17fe4:	mov	r0, #0
   17fe8:	mov	r2, #5
   17fec:	movt	r1, #1
   17ff0:	bl	11450 <dcgettext@plt>
   17ff4:	ldr	r3, [r7]
   17ff8:	mov	r2, r0
   17ffc:	ldmib	r7, {r0, r1, r6, r7}
   18000:	stm	sp, {r0, r1, r6, r7}
   18004:	b	1807c <__assert_fail@plt+0x6968>
   18008:	movw	r1, #46043	; 0xb3db
   1800c:	mov	r0, #0
   18010:	mov	r2, #5
   18014:	movt	r1, #1
   18018:	bl	11450 <dcgettext@plt>
   1801c:	ldr	r3, [r7]
   18020:	mov	r2, r0
   18024:	ldmib	r7, {r0, r1, r6}
   18028:	ldr	r5, [r7, #16]
   1802c:	ldr	r7, [r7, #20]
   18030:	stm	sp, {r0, r1, r6}
   18034:	str	r5, [sp, #12]
   18038:	str	r7, [sp, #16]
   1803c:	b	1807c <__assert_fail@plt+0x6968>
   18040:	movw	r1, #46083	; 0xb403
   18044:	mov	r0, #0
   18048:	mov	r2, #5
   1804c:	movt	r1, #1
   18050:	bl	11450 <dcgettext@plt>
   18054:	ldr	r3, [r7]
   18058:	mov	r2, r0
   1805c:	ldmib	r7, {r0, r1, r6}
   18060:	ldr	r5, [r7, #16]
   18064:	ldr	r4, [r7, #20]
   18068:	ldr	r7, [r7, #24]
   1806c:	stm	sp, {r0, r1, r6}
   18070:	str	r5, [sp, #12]
   18074:	str	r4, [sp, #16]
   18078:	str	r7, [sp, #20]
   1807c:	mov	r0, r8
   18080:	mov	r1, #1
   18084:	bl	11624 <__fprintf_chk@plt>
   18088:	sub	sp, fp, #24
   1808c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18090:	movw	r1, #46175	; 0xb45f
   18094:	movt	r1, #1
   18098:	mov	r0, #0
   1809c:	mov	r2, #5
   180a0:	bl	11450 <dcgettext@plt>
   180a4:	mov	ip, r0
   180a8:	ldr	r3, [r7]
   180ac:	ldr	r0, [r7, #4]
   180b0:	ldr	r1, [r7, #8]
   180b4:	ldr	r6, [r7, #12]
   180b8:	ldr	r5, [r7, #16]
   180bc:	ldr	r4, [r7, #20]
   180c0:	ldr	r2, [r7, #24]
   180c4:	ldr	lr, [r7, #28]
   180c8:	ldr	r7, [r7, #32]
   180cc:	stm	sp, {r0, r1, r6}
   180d0:	str	r5, [sp, #12]
   180d4:	str	r4, [sp, #16]
   180d8:	str	r2, [sp, #20]
   180dc:	str	lr, [sp, #24]
   180e0:	str	r7, [sp, #28]
   180e4:	b	1812c <__assert_fail@plt+0x6a18>
   180e8:	movw	r1, #46127	; 0xb42f
   180ec:	mov	r0, #0
   180f0:	mov	r2, #5
   180f4:	movt	r1, #1
   180f8:	bl	11450 <dcgettext@plt>
   180fc:	mov	ip, r0
   18100:	ldr	r3, [r7]
   18104:	ldmib	r7, {r0, r1, r6}
   18108:	ldr	r5, [r7, #16]
   1810c:	ldr	r4, [r7, #20]
   18110:	ldr	r2, [r7, #24]
   18114:	ldr	r7, [r7, #28]
   18118:	stm	sp, {r0, r1, r6}
   1811c:	str	r5, [sp, #12]
   18120:	str	r4, [sp, #16]
   18124:	str	r2, [sp, #20]
   18128:	str	r7, [sp, #24]
   1812c:	mov	r0, r8
   18130:	mov	r1, #1
   18134:	mov	r2, ip
   18138:	bl	11624 <__fprintf_chk@plt>
   1813c:	sub	sp, fp, #24
   18140:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18144:	push	{r4, sl, fp, lr}
   18148:	add	fp, sp, #8
   1814c:	sub	sp, sp, #8
   18150:	ldr	ip, [fp, #8]
   18154:	mov	lr, #0
   18158:	ldr	r4, [ip, lr, lsl #2]
   1815c:	add	lr, lr, #1
   18160:	cmp	r4, #0
   18164:	bne	18158 <__assert_fail@plt+0x6a44>
   18168:	sub	r4, lr, #1
   1816c:	str	ip, [sp]
   18170:	str	r4, [sp, #4]
   18174:	bl	17e08 <__assert_fail@plt+0x66f4>
   18178:	sub	sp, fp, #8
   1817c:	pop	{r4, sl, fp, pc}
   18180:	push	{fp, lr}
   18184:	mov	fp, sp
   18188:	sub	sp, sp, #48	; 0x30
   1818c:	ldr	ip, [fp, #8]
   18190:	ldr	lr, [ip]
   18194:	cmp	lr, #0
   18198:	str	lr, [sp, #8]
   1819c:	beq	18238 <__assert_fail@plt+0x6b24>
   181a0:	ldr	lr, [ip, #4]
   181a4:	cmp	lr, #0
   181a8:	str	lr, [sp, #12]
   181ac:	beq	18240 <__assert_fail@plt+0x6b2c>
   181b0:	ldr	lr, [ip, #8]
   181b4:	cmp	lr, #0
   181b8:	str	lr, [sp, #16]
   181bc:	beq	18248 <__assert_fail@plt+0x6b34>
   181c0:	ldr	lr, [ip, #12]
   181c4:	cmp	lr, #0
   181c8:	str	lr, [sp, #20]
   181cc:	beq	18250 <__assert_fail@plt+0x6b3c>
   181d0:	ldr	lr, [ip, #16]
   181d4:	cmp	lr, #0
   181d8:	str	lr, [sp, #24]
   181dc:	beq	18258 <__assert_fail@plt+0x6b44>
   181e0:	ldr	lr, [ip, #20]
   181e4:	cmp	lr, #0
   181e8:	str	lr, [sp, #28]
   181ec:	beq	18260 <__assert_fail@plt+0x6b4c>
   181f0:	ldr	lr, [ip, #24]
   181f4:	cmp	lr, #0
   181f8:	str	lr, [sp, #32]
   181fc:	beq	18268 <__assert_fail@plt+0x6b54>
   18200:	ldr	lr, [ip, #28]
   18204:	cmp	lr, #0
   18208:	str	lr, [sp, #36]	; 0x24
   1820c:	beq	18270 <__assert_fail@plt+0x6b5c>
   18210:	ldr	lr, [ip, #32]
   18214:	cmp	lr, #0
   18218:	str	lr, [sp, #40]	; 0x28
   1821c:	beq	18278 <__assert_fail@plt+0x6b64>
   18220:	ldr	lr, [ip, #36]	; 0x24
   18224:	mov	ip, #10
   18228:	cmp	lr, #0
   1822c:	str	lr, [sp, #44]	; 0x2c
   18230:	movweq	ip, #9
   18234:	b	1827c <__assert_fail@plt+0x6b68>
   18238:	mov	ip, #0
   1823c:	b	1827c <__assert_fail@plt+0x6b68>
   18240:	mov	ip, #1
   18244:	b	1827c <__assert_fail@plt+0x6b68>
   18248:	mov	ip, #2
   1824c:	b	1827c <__assert_fail@plt+0x6b68>
   18250:	mov	ip, #3
   18254:	b	1827c <__assert_fail@plt+0x6b68>
   18258:	mov	ip, #4
   1825c:	b	1827c <__assert_fail@plt+0x6b68>
   18260:	mov	ip, #5
   18264:	b	1827c <__assert_fail@plt+0x6b68>
   18268:	mov	ip, #6
   1826c:	b	1827c <__assert_fail@plt+0x6b68>
   18270:	mov	ip, #7
   18274:	b	1827c <__assert_fail@plt+0x6b68>
   18278:	mov	ip, #8
   1827c:	add	lr, sp, #8
   18280:	str	ip, [sp, #4]
   18284:	str	lr, [sp]
   18288:	bl	17e08 <__assert_fail@plt+0x66f4>
   1828c:	mov	sp, fp
   18290:	pop	{fp, pc}
   18294:	push	{fp, lr}
   18298:	mov	fp, sp
   1829c:	sub	sp, sp, #56	; 0x38
   182a0:	add	ip, fp, #8
   182a4:	str	ip, [sp, #12]
   182a8:	ldr	lr, [fp, #8]
   182ac:	cmp	lr, #0
   182b0:	str	lr, [sp, #16]
   182b4:	beq	18350 <__assert_fail@plt+0x6c3c>
   182b8:	ldr	lr, [ip, #4]
   182bc:	cmp	lr, #0
   182c0:	str	lr, [sp, #20]
   182c4:	beq	18358 <__assert_fail@plt+0x6c44>
   182c8:	ldr	lr, [ip, #8]
   182cc:	cmp	lr, #0
   182d0:	str	lr, [sp, #24]
   182d4:	beq	18360 <__assert_fail@plt+0x6c4c>
   182d8:	ldr	lr, [ip, #12]
   182dc:	cmp	lr, #0
   182e0:	str	lr, [sp, #28]
   182e4:	beq	18368 <__assert_fail@plt+0x6c54>
   182e8:	ldr	lr, [ip, #16]
   182ec:	cmp	lr, #0
   182f0:	str	lr, [sp, #32]
   182f4:	beq	18370 <__assert_fail@plt+0x6c5c>
   182f8:	ldr	lr, [ip, #20]
   182fc:	cmp	lr, #0
   18300:	str	lr, [sp, #36]	; 0x24
   18304:	beq	18378 <__assert_fail@plt+0x6c64>
   18308:	ldr	lr, [ip, #24]
   1830c:	cmp	lr, #0
   18310:	str	lr, [sp, #40]	; 0x28
   18314:	beq	18380 <__assert_fail@plt+0x6c6c>
   18318:	ldr	lr, [ip, #28]
   1831c:	cmp	lr, #0
   18320:	str	lr, [sp, #44]	; 0x2c
   18324:	beq	18388 <__assert_fail@plt+0x6c74>
   18328:	ldr	lr, [ip, #32]
   1832c:	cmp	lr, #0
   18330:	str	lr, [sp, #48]	; 0x30
   18334:	beq	18390 <__assert_fail@plt+0x6c7c>
   18338:	ldr	lr, [ip, #36]	; 0x24
   1833c:	mov	ip, #10
   18340:	cmp	lr, #0
   18344:	str	lr, [sp, #52]	; 0x34
   18348:	movweq	ip, #9
   1834c:	b	18394 <__assert_fail@plt+0x6c80>
   18350:	mov	ip, #0
   18354:	b	18394 <__assert_fail@plt+0x6c80>
   18358:	mov	ip, #1
   1835c:	b	18394 <__assert_fail@plt+0x6c80>
   18360:	mov	ip, #2
   18364:	b	18394 <__assert_fail@plt+0x6c80>
   18368:	mov	ip, #3
   1836c:	b	18394 <__assert_fail@plt+0x6c80>
   18370:	mov	ip, #4
   18374:	b	18394 <__assert_fail@plt+0x6c80>
   18378:	mov	ip, #5
   1837c:	b	18394 <__assert_fail@plt+0x6c80>
   18380:	mov	ip, #6
   18384:	b	18394 <__assert_fail@plt+0x6c80>
   18388:	mov	ip, #7
   1838c:	b	18394 <__assert_fail@plt+0x6c80>
   18390:	mov	ip, #8
   18394:	add	lr, sp, #16
   18398:	str	ip, [sp, #4]
   1839c:	str	lr, [sp]
   183a0:	bl	17e08 <__assert_fail@plt+0x66f4>
   183a4:	mov	sp, fp
   183a8:	pop	{fp, pc}
   183ac:	push	{fp, lr}
   183b0:	mov	fp, sp
   183b4:	movw	r0, #50020	; 0xc364
   183b8:	movt	r0, #2
   183bc:	ldr	r1, [r0]
   183c0:	movw	r0, #42060	; 0xa44c
   183c4:	movt	r0, #1
   183c8:	bl	11390 <fputs_unlocked@plt>
   183cc:	movw	r1, #46287	; 0xb4cf
   183d0:	mov	r0, #0
   183d4:	mov	r2, #5
   183d8:	movt	r1, #1
   183dc:	bl	11450 <dcgettext@plt>
   183e0:	movw	r2, #46307	; 0xb4e3
   183e4:	mov	r1, r0
   183e8:	mov	r0, #1
   183ec:	movt	r2, #1
   183f0:	bl	11600 <__printf_chk@plt>
   183f4:	movw	r1, #46329	; 0xb4f9
   183f8:	mov	r0, #0
   183fc:	mov	r2, #5
   18400:	movt	r1, #1
   18404:	bl	11450 <dcgettext@plt>
   18408:	movw	r2, #43131	; 0xa87b
   1840c:	movw	r3, #43844	; 0xab44
   18410:	mov	r1, r0
   18414:	mov	r0, #1
   18418:	movt	r2, #1
   1841c:	movt	r3, #1
   18420:	bl	11600 <__printf_chk@plt>
   18424:	movw	r1, #46349	; 0xb50d
   18428:	mov	r0, #0
   1842c:	mov	r2, #5
   18430:	movt	r1, #1
   18434:	bl	11450 <dcgettext@plt>
   18438:	movw	r2, #46388	; 0xb534
   1843c:	mov	r1, r0
   18440:	mov	r0, #1
   18444:	movt	r2, #1
   18448:	pop	{fp, lr}
   1844c:	b	11600 <__printf_chk@plt>
   18450:	push	{fp, lr}
   18454:	mov	fp, sp
   18458:	bl	116cc <aligned_alloc@plt>
   1845c:	cmp	r0, #0
   18460:	popne	{fp, pc}
   18464:	bl	18a40 <__assert_fail@plt+0x732c>
   18468:	push	{r4, r5, r6, sl, fp, lr}
   1846c:	add	fp, sp, #16
   18470:	mov	r4, r2
   18474:	mov	r5, r1
   18478:	mov	r6, r0
   1847c:	bl	19a28 <__assert_fail@plt+0x8314>
   18480:	cmp	r0, #0
   18484:	popne	{r4, r5, r6, sl, fp, pc}
   18488:	cmp	r6, #0
   1848c:	beq	184a0 <__assert_fail@plt+0x6d8c>
   18490:	cmp	r5, #0
   18494:	cmpne	r4, #0
   18498:	bne	184a0 <__assert_fail@plt+0x6d8c>
   1849c:	pop	{r4, r5, r6, sl, fp, pc}
   184a0:	bl	18a40 <__assert_fail@plt+0x732c>
   184a4:	push	{r4, r5, r6, sl, fp, lr}
   184a8:	add	fp, sp, #16
   184ac:	mov	r4, r2
   184b0:	mov	r5, r1
   184b4:	mov	r6, r0
   184b8:	bl	19a28 <__assert_fail@plt+0x8314>
   184bc:	cmp	r0, #0
   184c0:	popne	{r4, r5, r6, sl, fp, pc}
   184c4:	cmp	r6, #0
   184c8:	beq	184dc <__assert_fail@plt+0x6dc8>
   184cc:	cmp	r5, #0
   184d0:	cmpne	r4, #0
   184d4:	bne	184dc <__assert_fail@plt+0x6dc8>
   184d8:	pop	{r4, r5, r6, sl, fp, pc}
   184dc:	bl	18a40 <__assert_fail@plt+0x732c>
   184e0:	push	{fp, lr}
   184e4:	mov	fp, sp
   184e8:	bl	19888 <__assert_fail@plt+0x8174>
   184ec:	cmp	r0, #0
   184f0:	popne	{fp, pc}
   184f4:	bl	18a40 <__assert_fail@plt+0x732c>
   184f8:	push	{fp, lr}
   184fc:	mov	fp, sp
   18500:	bl	19888 <__assert_fail@plt+0x8174>
   18504:	cmp	r0, #0
   18508:	popne	{fp, pc}
   1850c:	bl	18a40 <__assert_fail@plt+0x732c>
   18510:	push	{fp, lr}
   18514:	mov	fp, sp
   18518:	bl	19888 <__assert_fail@plt+0x8174>
   1851c:	cmp	r0, #0
   18520:	popne	{fp, pc}
   18524:	bl	18a40 <__assert_fail@plt+0x732c>
   18528:	push	{r4, r5, fp, lr}
   1852c:	add	fp, sp, #8
   18530:	mov	r4, r1
   18534:	mov	r5, r0
   18538:	bl	198b8 <__assert_fail@plt+0x81a4>
   1853c:	cmp	r0, #0
   18540:	popne	{r4, r5, fp, pc}
   18544:	cmp	r5, #0
   18548:	beq	18558 <__assert_fail@plt+0x6e44>
   1854c:	cmp	r4, #0
   18550:	bne	18558 <__assert_fail@plt+0x6e44>
   18554:	pop	{r4, r5, fp, pc}
   18558:	bl	18a40 <__assert_fail@plt+0x732c>
   1855c:	push	{fp, lr}
   18560:	mov	fp, sp
   18564:	cmp	r1, #0
   18568:	orreq	r1, r1, #1
   1856c:	bl	198b8 <__assert_fail@plt+0x81a4>
   18570:	cmp	r0, #0
   18574:	popne	{fp, pc}
   18578:	bl	18a40 <__assert_fail@plt+0x732c>
   1857c:	push	{fp, lr}
   18580:	mov	fp, sp
   18584:	clz	r3, r2
   18588:	lsr	ip, r3, #5
   1858c:	clz	r3, r1
   18590:	lsr	r3, r3, #5
   18594:	orrs	r3, r3, ip
   18598:	movwne	r1, #1
   1859c:	movwne	r2, #1
   185a0:	bl	19a28 <__assert_fail@plt+0x8314>
   185a4:	cmp	r0, #0
   185a8:	popne	{fp, pc}
   185ac:	bl	18a40 <__assert_fail@plt+0x732c>
   185b0:	push	{fp, lr}
   185b4:	mov	fp, sp
   185b8:	mov	r2, r1
   185bc:	mov	r1, r0
   185c0:	mov	r0, #0
   185c4:	bl	19a28 <__assert_fail@plt+0x8314>
   185c8:	cmp	r0, #0
   185cc:	popne	{fp, pc}
   185d0:	bl	18a40 <__assert_fail@plt+0x732c>
   185d4:	push	{fp, lr}
   185d8:	mov	fp, sp
   185dc:	mov	r2, r1
   185e0:	mov	r1, r0
   185e4:	clz	r0, r2
   185e8:	clz	r3, r1
   185ec:	lsr	r0, r0, #5
   185f0:	lsr	r3, r3, #5
   185f4:	orrs	r0, r3, r0
   185f8:	movwne	r1, #1
   185fc:	movwne	r2, #1
   18600:	mov	r0, #0
   18604:	bl	19a28 <__assert_fail@plt+0x8314>
   18608:	cmp	r0, #0
   1860c:	popne	{fp, pc}
   18610:	bl	18a40 <__assert_fail@plt+0x732c>
   18614:	push	{r4, r5, r6, sl, fp, lr}
   18618:	add	fp, sp, #16
   1861c:	ldr	r5, [r1]
   18620:	mov	r4, r1
   18624:	mov	r6, r0
   18628:	cmp	r0, #0
   1862c:	beq	18644 <__assert_fail@plt+0x6f30>
   18630:	mov	r0, #1
   18634:	add	r0, r0, r5, lsr #1
   18638:	adds	r5, r5, r0
   1863c:	bcc	1864c <__assert_fail@plt+0x6f38>
   18640:	b	18688 <__assert_fail@plt+0x6f74>
   18644:	cmp	r5, #0
   18648:	movweq	r5, #64	; 0x40
   1864c:	mov	r0, r6
   18650:	mov	r1, r5
   18654:	mov	r2, #1
   18658:	bl	19a28 <__assert_fail@plt+0x8314>
   1865c:	cmp	r5, #0
   18660:	mov	r1, r5
   18664:	movwne	r1, #1
   18668:	cmp	r0, #0
   1866c:	bne	18680 <__assert_fail@plt+0x6f6c>
   18670:	clz	r2, r6
   18674:	lsr	r2, r2, #5
   18678:	orrs	r1, r2, r1
   1867c:	bne	18688 <__assert_fail@plt+0x6f74>
   18680:	str	r5, [r4]
   18684:	pop	{r4, r5, r6, sl, fp, pc}
   18688:	bl	18a40 <__assert_fail@plt+0x732c>
   1868c:	push	{r4, r5, r6, r7, fp, lr}
   18690:	add	fp, sp, #16
   18694:	ldr	r5, [r1]
   18698:	mov	r6, r2
   1869c:	mov	r4, r1
   186a0:	mov	r7, r0
   186a4:	cmp	r0, #0
   186a8:	beq	186c0 <__assert_fail@plt+0x6fac>
   186ac:	mov	r0, #1
   186b0:	add	r0, r0, r5, lsr #1
   186b4:	adds	r5, r5, r0
   186b8:	bcc	186d8 <__assert_fail@plt+0x6fc4>
   186bc:	b	1870c <__assert_fail@plt+0x6ff8>
   186c0:	cmp	r5, #0
   186c4:	bne	186d8 <__assert_fail@plt+0x6fc4>
   186c8:	mov	r0, #64	; 0x40
   186cc:	cmp	r6, #64	; 0x40
   186d0:	udiv	r5, r0, r6
   186d4:	addhi	r5, r5, #1
   186d8:	mov	r0, r7
   186dc:	mov	r1, r5
   186e0:	mov	r2, r6
   186e4:	bl	19a28 <__assert_fail@plt+0x8314>
   186e8:	cmp	r0, #0
   186ec:	bne	18704 <__assert_fail@plt+0x6ff0>
   186f0:	cmp	r7, #0
   186f4:	beq	1870c <__assert_fail@plt+0x6ff8>
   186f8:	cmp	r6, #0
   186fc:	cmpne	r5, #0
   18700:	bne	1870c <__assert_fail@plt+0x6ff8>
   18704:	str	r5, [r4]
   18708:	pop	{r4, r5, r6, r7, fp, pc}
   1870c:	bl	18a40 <__assert_fail@plt+0x732c>
   18710:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18714:	add	fp, sp, #24
   18718:	mov	r8, r1
   1871c:	ldr	r1, [r1]
   18720:	mov	r5, r0
   18724:	add	r0, r1, r1, asr #1
   18728:	cmp	r0, r1
   1872c:	mvnvs	r0, #-2147483648	; 0x80000000
   18730:	cmp	r0, r3
   18734:	mov	r7, r0
   18738:	movgt	r7, r3
   1873c:	cmn	r3, #1
   18740:	movle	r7, r0
   18744:	ldr	r0, [fp, #8]
   18748:	cmn	r0, #1
   1874c:	ble	18774 <__assert_fail@plt+0x7060>
   18750:	cmp	r0, #0
   18754:	beq	187c8 <__assert_fail@plt+0x70b4>
   18758:	cmn	r7, #1
   1875c:	ble	1879c <__assert_fail@plt+0x7088>
   18760:	mvn	r4, #-2147483648	; 0x80000000
   18764:	udiv	r6, r4, r0
   18768:	cmp	r6, r7
   1876c:	bge	187c8 <__assert_fail@plt+0x70b4>
   18770:	b	187d8 <__assert_fail@plt+0x70c4>
   18774:	cmn	r7, #1
   18778:	ble	187b8 <__assert_fail@plt+0x70a4>
   1877c:	cmn	r0, #1
   18780:	beq	187c8 <__assert_fail@plt+0x70b4>
   18784:	mov	r6, #-2147483648	; 0x80000000
   18788:	mvn	r4, #-2147483648	; 0x80000000
   1878c:	sdiv	r6, r6, r0
   18790:	cmp	r6, r7
   18794:	bge	187c8 <__assert_fail@plt+0x70b4>
   18798:	b	187d8 <__assert_fail@plt+0x70c4>
   1879c:	beq	187c8 <__assert_fail@plt+0x70b4>
   187a0:	mov	r6, #-2147483648	; 0x80000000
   187a4:	mvn	r4, #-2147483648	; 0x80000000
   187a8:	sdiv	r6, r6, r7
   187ac:	cmp	r6, r0
   187b0:	bge	187c8 <__assert_fail@plt+0x70b4>
   187b4:	b	187d8 <__assert_fail@plt+0x70c4>
   187b8:	mvn	r4, #-2147483648	; 0x80000000
   187bc:	sdiv	r6, r4, r0
   187c0:	cmp	r7, r6
   187c4:	blt	187d8 <__assert_fail@plt+0x70c4>
   187c8:	mul	r6, r7, r0
   187cc:	mov	r4, #64	; 0x40
   187d0:	cmp	r6, #63	; 0x3f
   187d4:	bgt	187e0 <__assert_fail@plt+0x70cc>
   187d8:	sdiv	r7, r4, r0
   187dc:	mul	r6, r7, r0
   187e0:	cmp	r5, #0
   187e4:	moveq	r4, #0
   187e8:	streq	r4, [r8]
   187ec:	sub	r4, r7, r1
   187f0:	cmp	r4, r2
   187f4:	bge	188a0 <__assert_fail@plt+0x718c>
   187f8:	add	r7, r1, r2
   187fc:	mov	r6, #0
   18800:	mov	r2, #0
   18804:	cmp	r7, r3
   18808:	movwgt	r6, #1
   1880c:	cmn	r3, #1
   18810:	movwgt	r2, #1
   18814:	cmp	r7, r1
   18818:	bvs	188d4 <__assert_fail@plt+0x71c0>
   1881c:	ands	r1, r2, r6
   18820:	bne	188d4 <__assert_fail@plt+0x71c0>
   18824:	cmn	r0, #1
   18828:	ble	18850 <__assert_fail@plt+0x713c>
   1882c:	cmp	r0, #0
   18830:	beq	1889c <__assert_fail@plt+0x7188>
   18834:	cmn	r7, #1
   18838:	ble	18874 <__assert_fail@plt+0x7160>
   1883c:	mvn	r1, #-2147483648	; 0x80000000
   18840:	udiv	r1, r1, r0
   18844:	cmp	r1, r7
   18848:	bge	1889c <__assert_fail@plt+0x7188>
   1884c:	b	188d4 <__assert_fail@plt+0x71c0>
   18850:	cmn	r7, #1
   18854:	ble	1888c <__assert_fail@plt+0x7178>
   18858:	cmn	r0, #1
   1885c:	beq	1889c <__assert_fail@plt+0x7188>
   18860:	mov	r1, #-2147483648	; 0x80000000
   18864:	sdiv	r1, r1, r0
   18868:	cmp	r1, r7
   1886c:	bge	1889c <__assert_fail@plt+0x7188>
   18870:	b	188d4 <__assert_fail@plt+0x71c0>
   18874:	beq	1889c <__assert_fail@plt+0x7188>
   18878:	mov	r1, #-2147483648	; 0x80000000
   1887c:	sdiv	r1, r1, r7
   18880:	cmp	r1, r0
   18884:	bge	1889c <__assert_fail@plt+0x7188>
   18888:	b	188d4 <__assert_fail@plt+0x71c0>
   1888c:	mvn	r1, #-2147483648	; 0x80000000
   18890:	sdiv	r1, r1, r0
   18894:	cmp	r7, r1
   18898:	blt	188d4 <__assert_fail@plt+0x71c0>
   1889c:	mul	r6, r7, r0
   188a0:	mov	r0, r5
   188a4:	mov	r1, r6
   188a8:	bl	198b8 <__assert_fail@plt+0x81a4>
   188ac:	cmp	r6, #0
   188b0:	movwne	r6, #1
   188b4:	cmp	r0, #0
   188b8:	bne	188cc <__assert_fail@plt+0x71b8>
   188bc:	clz	r1, r5
   188c0:	lsr	r1, r1, #5
   188c4:	orrs	r1, r1, r6
   188c8:	bne	188d4 <__assert_fail@plt+0x71c0>
   188cc:	str	r7, [r8]
   188d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   188d4:	bl	18a40 <__assert_fail@plt+0x732c>
   188d8:	push	{fp, lr}
   188dc:	mov	fp, sp
   188e0:	mov	r1, #1
   188e4:	bl	19834 <__assert_fail@plt+0x8120>
   188e8:	cmp	r0, #0
   188ec:	popne	{fp, pc}
   188f0:	bl	18a40 <__assert_fail@plt+0x732c>
   188f4:	push	{fp, lr}
   188f8:	mov	fp, sp
   188fc:	bl	19834 <__assert_fail@plt+0x8120>
   18900:	cmp	r0, #0
   18904:	popne	{fp, pc}
   18908:	bl	18a40 <__assert_fail@plt+0x732c>
   1890c:	push	{fp, lr}
   18910:	mov	fp, sp
   18914:	mov	r1, #1
   18918:	bl	19834 <__assert_fail@plt+0x8120>
   1891c:	cmp	r0, #0
   18920:	popne	{fp, pc}
   18924:	bl	18a40 <__assert_fail@plt+0x732c>
   18928:	push	{fp, lr}
   1892c:	mov	fp, sp
   18930:	bl	19834 <__assert_fail@plt+0x8120>
   18934:	cmp	r0, #0
   18938:	popne	{fp, pc}
   1893c:	bl	18a40 <__assert_fail@plt+0x732c>
   18940:	push	{r4, r5, r6, sl, fp, lr}
   18944:	add	fp, sp, #16
   18948:	mov	r5, r0
   1894c:	mov	r0, r1
   18950:	mov	r4, r1
   18954:	bl	19888 <__assert_fail@plt+0x8174>
   18958:	cmp	r0, #0
   1895c:	beq	18978 <__assert_fail@plt+0x7264>
   18960:	mov	r1, r5
   18964:	mov	r2, r4
   18968:	mov	r6, r0
   1896c:	bl	11408 <memcpy@plt>
   18970:	mov	r0, r6
   18974:	pop	{r4, r5, r6, sl, fp, pc}
   18978:	bl	18a40 <__assert_fail@plt+0x732c>
   1897c:	push	{r4, r5, r6, sl, fp, lr}
   18980:	add	fp, sp, #16
   18984:	mov	r5, r0
   18988:	mov	r0, r1
   1898c:	mov	r4, r1
   18990:	bl	19888 <__assert_fail@plt+0x8174>
   18994:	cmp	r0, #0
   18998:	beq	189b4 <__assert_fail@plt+0x72a0>
   1899c:	mov	r1, r5
   189a0:	mov	r2, r4
   189a4:	mov	r6, r0
   189a8:	bl	11408 <memcpy@plt>
   189ac:	mov	r0, r6
   189b0:	pop	{r4, r5, r6, sl, fp, pc}
   189b4:	bl	18a40 <__assert_fail@plt+0x732c>
   189b8:	push	{r4, r5, r6, sl, fp, lr}
   189bc:	add	fp, sp, #16
   189c0:	mov	r5, r0
   189c4:	add	r0, r1, #1
   189c8:	mov	r4, r1
   189cc:	bl	19888 <__assert_fail@plt+0x8174>
   189d0:	cmp	r0, #0
   189d4:	beq	189fc <__assert_fail@plt+0x72e8>
   189d8:	mov	r6, r0
   189dc:	mov	r0, #0
   189e0:	mov	r1, r5
   189e4:	mov	r2, r4
   189e8:	strb	r0, [r6, r4]
   189ec:	mov	r0, r6
   189f0:	bl	11408 <memcpy@plt>
   189f4:	mov	r0, r6
   189f8:	pop	{r4, r5, r6, sl, fp, pc}
   189fc:	bl	18a40 <__assert_fail@plt+0x732c>
   18a00:	push	{r4, r5, r6, sl, fp, lr}
   18a04:	add	fp, sp, #16
   18a08:	mov	r4, r0
   18a0c:	bl	11588 <strlen@plt>
   18a10:	add	r5, r0, #1
   18a14:	mov	r0, r5
   18a18:	bl	19888 <__assert_fail@plt+0x8174>
   18a1c:	cmp	r0, #0
   18a20:	beq	18a3c <__assert_fail@plt+0x7328>
   18a24:	mov	r1, r4
   18a28:	mov	r2, r5
   18a2c:	mov	r6, r0
   18a30:	bl	11408 <memcpy@plt>
   18a34:	mov	r0, r6
   18a38:	pop	{r4, r5, r6, sl, fp, pc}
   18a3c:	bl	18a40 <__assert_fail@plt+0x732c>
   18a40:	push	{fp, lr}
   18a44:	mov	fp, sp
   18a48:	movw	r0, #49504	; 0xc160
   18a4c:	movw	r1, #46464	; 0xb580
   18a50:	mov	r2, #5
   18a54:	movt	r0, #2
   18a58:	movt	r1, #1
   18a5c:	ldr	r4, [r0]
   18a60:	mov	r0, #0
   18a64:	bl	11450 <dcgettext@plt>
   18a68:	movw	r2, #45018	; 0xafda
   18a6c:	mov	r3, r0
   18a70:	mov	r0, r4
   18a74:	mov	r1, #0
   18a78:	movt	r2, #1
   18a7c:	bl	11504 <error@plt>
   18a80:	bl	116f0 <abort@plt>
   18a84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a88:	add	fp, sp, #24
   18a8c:	sub	sp, sp, #16
   18a90:	mov	r8, r0
   18a94:	ldr	r0, [fp, #16]
   18a98:	mov	r5, r3
   18a9c:	mov	r6, r2
   18aa0:	mov	r2, r1
   18aa4:	add	r3, sp, #8
   18aa8:	mov	r1, #0
   18aac:	str	r0, [sp]
   18ab0:	mov	r0, r8
   18ab4:	bl	18b80 <__assert_fail@plt+0x746c>
   18ab8:	cmp	r0, #0
   18abc:	bne	18b48 <__assert_fail@plt+0x7434>
   18ac0:	ldr	r4, [sp, #8]
   18ac4:	ldr	r7, [sp, #12]
   18ac8:	subs	r0, r4, r6
   18acc:	sbcs	r0, r7, r5
   18ad0:	bcc	18af4 <__assert_fail@plt+0x73e0>
   18ad4:	ldr	r1, [fp, #8]
   18ad8:	ldr	r0, [fp, #12]
   18adc:	subs	r1, r1, r4
   18ae0:	sbcs	r0, r0, r7
   18ae4:	movcs	r0, r4
   18ae8:	movcs	r1, r7
   18aec:	subcs	sp, fp, #24
   18af0:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   18af4:	bl	115d0 <__errno_location@plt>
   18af8:	subs	r1, r4, #1073741824	; 0x40000000
   18afc:	sbcs	r1, r7, #0
   18b00:	movcc	r1, #34	; 0x22
   18b04:	movcs	r1, #75	; 0x4b
   18b08:	str	r1, [r0]
   18b0c:	ldr	r6, [r0]
   18b10:	ldr	r4, [fp, #24]
   18b14:	ldr	r5, [fp, #20]
   18b18:	mov	r0, r8
   18b1c:	bl	1748c <__assert_fail@plt+0x5d78>
   18b20:	subs	r1, r6, #22
   18b24:	movw	r2, #43237	; 0xa8e5
   18b28:	str	r0, [sp]
   18b2c:	mov	r3, r5
   18b30:	movne	r1, r6
   18b34:	cmp	r4, #0
   18b38:	movt	r2, #1
   18b3c:	movweq	r4, #1
   18b40:	mov	r0, r4
   18b44:	bl	11504 <error@plt>
   18b48:	cmp	r0, #1
   18b4c:	beq	18b64 <__assert_fail@plt+0x7450>
   18b50:	cmp	r0, #3
   18b54:	bne	18b70 <__assert_fail@plt+0x745c>
   18b58:	bl	115d0 <__errno_location@plt>
   18b5c:	mov	r1, #0
   18b60:	b	18b08 <__assert_fail@plt+0x73f4>
   18b64:	bl	115d0 <__errno_location@plt>
   18b68:	mov	r1, #75	; 0x4b
   18b6c:	b	18b08 <__assert_fail@plt+0x73f4>
   18b70:	bl	115d0 <__errno_location@plt>
   18b74:	b	18b0c <__assert_fail@plt+0x73f8>
   18b78:	mov	r1, #10
   18b7c:	b	18a84 <__assert_fail@plt+0x7370>
   18b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b84:	add	fp, sp, #28
   18b88:	sub	sp, sp, #44	; 0x2c
   18b8c:	cmp	r2, #37	; 0x25
   18b90:	bcs	19814 <__assert_fail@plt+0x8100>
   18b94:	ldr	sl, [fp, #8]
   18b98:	mov	r6, r2
   18b9c:	mov	r7, r1
   18ba0:	mov	r4, r0
   18ba4:	str	r3, [sp, #36]	; 0x24
   18ba8:	bl	115d0 <__errno_location@plt>
   18bac:	mov	r5, r0
   18bb0:	mov	r0, #0
   18bb4:	str	r0, [r5]
   18bb8:	bl	11570 <__ctype_b_loc@plt>
   18bbc:	ldr	r1, [r0]
   18bc0:	mov	r2, r4
   18bc4:	ldrb	r0, [r2], #1
   18bc8:	add	r3, r1, r0, lsl #1
   18bcc:	ldrb	r3, [r3, #1]
   18bd0:	tst	r3, #32
   18bd4:	bne	18bc4 <__assert_fail@plt+0x74b0>
   18bd8:	sub	r9, fp, #32
   18bdc:	cmp	r7, #0
   18be0:	mov	r8, #4
   18be4:	movne	r9, r7
   18be8:	cmp	r0, #45	; 0x2d
   18bec:	beq	18fac <__assert_fail@plt+0x7898>
   18bf0:	mov	r0, r4
   18bf4:	mov	r1, r9
   18bf8:	mov	r2, r6
   18bfc:	mov	r3, #0
   18c00:	bl	11414 <__strtoull_internal@plt>
   18c04:	mov	r7, r1
   18c08:	ldr	r1, [r9]
   18c0c:	cmp	r1, r4
   18c10:	beq	18c48 <__assert_fail@plt+0x7534>
   18c14:	mov	r6, r0
   18c18:	ldr	r0, [r5]
   18c1c:	cmp	r0, #0
   18c20:	beq	18f64 <__assert_fail@plt+0x7850>
   18c24:	cmp	r0, #34	; 0x22
   18c28:	bne	18fac <__assert_fail@plt+0x7898>
   18c2c:	mov	r8, #1
   18c30:	cmp	sl, #0
   18c34:	beq	19800 <__assert_fail@plt+0x80ec>
   18c38:	ldrb	r4, [r1]
   18c3c:	cmp	r4, #0
   18c40:	bne	18c8c <__assert_fail@plt+0x7578>
   18c44:	b	19800 <__assert_fail@plt+0x80ec>
   18c48:	cmp	sl, #0
   18c4c:	beq	18fac <__assert_fail@plt+0x7898>
   18c50:	mov	r5, r1
   18c54:	ldrb	r1, [r4]
   18c58:	cmp	r1, #0
   18c5c:	beq	18fac <__assert_fail@plt+0x7898>
   18c60:	mov	r0, sl
   18c64:	bl	115a0 <strchr@plt>
   18c68:	cmp	r0, #0
   18c6c:	beq	18fac <__assert_fail@plt+0x7898>
   18c70:	mov	r1, r5
   18c74:	mov	r8, #0
   18c78:	mov	r6, #1
   18c7c:	mov	r7, #0
   18c80:	ldrb	r4, [r1]
   18c84:	cmp	r4, #0
   18c88:	beq	19800 <__assert_fail@plt+0x80ec>
   18c8c:	str	r1, [sp, #32]
   18c90:	mov	r0, sl
   18c94:	mov	r1, r4
   18c98:	bl	115a0 <strchr@plt>
   18c9c:	cmp	r0, #0
   18ca0:	beq	18fa0 <__assert_fail@plt+0x788c>
   18ca4:	sub	r0, r4, #69	; 0x45
   18ca8:	mov	r1, #1
   18cac:	mov	r3, #0
   18cb0:	mov	r5, #1024	; 0x400
   18cb4:	cmp	r0, #47	; 0x2f
   18cb8:	str	r1, [sp, #28]
   18cbc:	bhi	18dc0 <__assert_fail@plt+0x76ac>
   18cc0:	add	r1, pc, #0
   18cc4:	ldr	pc, [r1, r0, lsl #2]
   18cc8:	andeq	r8, r1, r8, lsl #27
   18ccc:	andeq	r8, r1, r0, asr #27
   18cd0:	andeq	r8, r1, r8, lsl #27
   18cd4:	andeq	r8, r1, r0, asr #27
   18cd8:	andeq	r8, r1, r0, asr #27
   18cdc:	andeq	r8, r1, r0, asr #27
   18ce0:	andeq	r8, r1, r8, lsl #27
   18ce4:	andeq	r8, r1, r0, asr #27
   18ce8:	andeq	r8, r1, r8, lsl #27
   18cec:	andeq	r8, r1, r0, asr #27
   18cf0:	andeq	r8, r1, r0, asr #27
   18cf4:	andeq	r8, r1, r8, lsl #27
   18cf8:	andeq	r8, r1, r0, asr #27
   18cfc:	andeq	r8, r1, r0, asr #27
   18d00:	andeq	r8, r1, r0, asr #27
   18d04:	andeq	r8, r1, r8, lsl #27
   18d08:	andeq	r8, r1, r0, asr #27
   18d0c:	andeq	r8, r1, r0, asr #27
   18d10:	andeq	r8, r1, r0, asr #27
   18d14:	andeq	r8, r1, r0, asr #27
   18d18:	andeq	r8, r1, r8, lsl #27
   18d1c:	andeq	r8, r1, r8, lsl #27
   18d20:	andeq	r8, r1, r0, asr #27
   18d24:	andeq	r8, r1, r0, asr #27
   18d28:	andeq	r8, r1, r0, asr #27
   18d2c:	andeq	r8, r1, r0, asr #27
   18d30:	andeq	r8, r1, r0, asr #27
   18d34:	andeq	r8, r1, r0, asr #27
   18d38:	andeq	r8, r1, r0, asr #27
   18d3c:	andeq	r8, r1, r0, asr #27
   18d40:	andeq	r8, r1, r0, asr #27
   18d44:	andeq	r8, r1, r0, asr #27
   18d48:	andeq	r8, r1, r0, asr #27
   18d4c:	andeq	r8, r1, r0, asr #27
   18d50:	andeq	r8, r1, r8, lsl #27
   18d54:	andeq	r8, r1, r0, asr #27
   18d58:	andeq	r8, r1, r0, asr #27
   18d5c:	andeq	r8, r1, r0, asr #27
   18d60:	andeq	r8, r1, r8, lsl #27
   18d64:	andeq	r8, r1, r0, asr #27
   18d68:	andeq	r8, r1, r8, lsl #27
   18d6c:	andeq	r8, r1, r0, asr #27
   18d70:	andeq	r8, r1, r0, asr #27
   18d74:	andeq	r8, r1, r0, asr #27
   18d78:	andeq	r8, r1, r0, asr #27
   18d7c:	andeq	r8, r1, r0, asr #27
   18d80:	andeq	r8, r1, r0, asr #27
   18d84:	andeq	r8, r1, r8, lsl #27
   18d88:	mov	r0, sl
   18d8c:	mov	r1, #48	; 0x30
   18d90:	bl	115a0 <strchr@plt>
   18d94:	cmp	r0, #0
   18d98:	beq	18dbc <__assert_fail@plt+0x76a8>
   18d9c:	ldr	r1, [sp, #32]
   18da0:	ldrb	r0, [r1, #1]
   18da4:	cmp	r0, #66	; 0x42
   18da8:	cmpne	r0, #68	; 0x44
   18dac:	bne	18f74 <__assert_fail@plt+0x7860>
   18db0:	mov	r5, #1000	; 0x3e8
   18db4:	mov	r0, #2
   18db8:	str	r0, [sp, #28]
   18dbc:	mov	r3, #0
   18dc0:	sub	r0, r4, #66	; 0x42
   18dc4:	cmp	r0, #53	; 0x35
   18dc8:	bhi	18fa0 <__assert_fail@plt+0x788c>
   18dcc:	add	r1, pc, #0
   18dd0:	ldr	pc, [r1, r0, lsl #2]
   18dd4:	andeq	r9, r1, r0, lsl r3
   18dd8:	andeq	r8, r1, r0, lsr #31
   18ddc:	andeq	r8, r1, r0, lsr #31
   18de0:	andeq	r9, r1, r8, lsr r3
   18de4:	andeq	r8, r1, r0, lsr #31
   18de8:	andeq	r8, r1, ip, lsr #29
   18dec:	andeq	r8, r1, r0, lsr #31
   18df0:	andeq	r8, r1, r0, lsr #31
   18df4:	andeq	r8, r1, r0, lsr #31
   18df8:			; <UNDEFINED> instruction: 0x00018fb8
   18dfc:	andeq	r8, r1, r0, lsr #31
   18e00:	andeq	r9, r1, r0
   18e04:	andeq	r8, r1, r0, lsr #31
   18e08:	andeq	r8, r1, r0, lsr #31
   18e0c:	andeq	r9, r1, ip, lsl #9
   18e10:	andeq	r8, r1, r0, lsr #31
   18e14:	andeq	r8, r1, r0, lsr #31
   18e18:	andeq	r8, r1, r0, lsr #31
   18e1c:	andeq	r9, r1, ip, lsl #1
   18e20:	andeq	r8, r1, r0, lsr #31
   18e24:	andeq	r8, r1, r0, lsr #31
   18e28:	andeq	r8, r1, r0, lsr #31
   18e2c:	andeq	r8, r1, r0, lsr #31
   18e30:			; <UNDEFINED> instruction: 0x000195b4
   18e34:	andeq	r9, r1, r4, ror r1
   18e38:	andeq	r8, r1, r0, lsr #31
   18e3c:	andeq	r8, r1, r0, lsr #31
   18e40:	andeq	r8, r1, r0, lsr #31
   18e44:	andeq	r8, r1, r0, lsr #31
   18e48:	andeq	r8, r1, r0, lsr #31
   18e4c:	andeq	r8, r1, r0, lsr #31
   18e50:	andeq	r8, r1, r0, lsr #31
   18e54:	andeq	r9, r1, r8, lsl #15
   18e58:	andeq	r9, r1, r0, ror #15
   18e5c:	andeq	r8, r1, r0, lsr #31
   18e60:	andeq	r8, r1, r0, lsr #31
   18e64:	andeq	r8, r1, r0, lsr #31
   18e68:	andeq	r8, r1, ip, lsr #29
   18e6c:	andeq	r8, r1, r0, lsr #31
   18e70:	andeq	r8, r1, r0, lsr #31
   18e74:	andeq	r8, r1, r0, lsr #31
   18e78:			; <UNDEFINED> instruction: 0x00018fb8
   18e7c:	andeq	r8, r1, r0, lsr #31
   18e80:	andeq	r9, r1, r0
   18e84:	andeq	r8, r1, r0, lsr #31
   18e88:	andeq	r8, r1, r0, lsr #31
   18e8c:	andeq	r8, r1, r0, lsr #31
   18e90:	andeq	r8, r1, r0, lsr #31
   18e94:	andeq	r8, r1, r0, lsr #31
   18e98:	andeq	r8, r1, r0, lsr #31
   18e9c:	andeq	r9, r1, ip, lsl #1
   18ea0:	andeq	r8, r1, r0, lsr #31
   18ea4:	andeq	r8, r1, r0, lsr #31
   18ea8:			; <UNDEFINED> instruction: 0x000197bc
   18eac:	mvn	r0, #0
   18eb0:	mvn	r1, #0
   18eb4:	mov	r2, r5
   18eb8:	mov	sl, r3
   18ebc:	bl	19d58 <__assert_fail@plt+0x8644>
   18ec0:	subs	r3, r0, r6
   18ec4:	mov	lr, #0
   18ec8:	umull	r4, r2, r6, r5
   18ecc:	str	r1, [sp, #20]
   18ed0:	sbcs	r3, r1, r7
   18ed4:	mla	ip, r6, sl, r2
   18ed8:	mov	r2, r1
   18edc:	movwcc	lr, #1
   18ee0:	mla	r7, r7, r5, ip
   18ee4:	mov	r2, #0
   18ee8:	cmp	lr, #0
   18eec:	mvnne	r4, #0
   18ef0:	mvnne	r7, #0
   18ef4:	subs	r6, r0, r4
   18ef8:	sbcs	r6, r1, r7
   18efc:	movwcc	r2, #1
   18f00:	umull	r3, r6, r4, r5
   18f04:	cmp	r2, #0
   18f08:	str	r6, [sp, #16]
   18f0c:	mvnne	r3, #0
   18f10:	cmp	r2, #0
   18f14:	umull	r6, ip, r3, r5
   18f18:	mla	r1, r3, sl, ip
   18f1c:	ldr	ip, [sp, #16]
   18f20:	str	r1, [sp, #12]
   18f24:	mla	r4, r4, sl, ip
   18f28:	mla	r4, r7, r5, r4
   18f2c:	ldr	r7, [sp, #12]
   18f30:	mvnne	r4, #0
   18f34:	subs	r0, r0, r3
   18f38:	ldr	r0, [sp, #20]
   18f3c:	mla	r7, r4, r5, r7
   18f40:	sbcs	r0, r0, r4
   18f44:	mov	r0, #0
   18f48:	movwcc	r0, #1
   18f4c:	cmp	r0, #0
   18f50:	mov	r1, r0
   18f54:	orr	r0, lr, r2
   18f58:	mvnne	r7, #0
   18f5c:	mvnne	r6, #0
   18f60:	b	195ac <__assert_fail@plt+0x7e98>
   18f64:	mov	r8, r0
   18f68:	cmp	sl, #0
   18f6c:	bne	18c38 <__assert_fail@plt+0x7524>
   18f70:	b	19800 <__assert_fail@plt+0x80ec>
   18f74:	cmp	r0, #105	; 0x69
   18f78:	mov	r3, #0
   18f7c:	bne	18dc0 <__assert_fail@plt+0x76ac>
   18f80:	ldrb	r0, [r1, #2]
   18f84:	mov	r1, #1
   18f88:	cmp	r0, #66	; 0x42
   18f8c:	movweq	r1, #3
   18f90:	str	r1, [sp, #28]
   18f94:	sub	r0, r4, #66	; 0x42
   18f98:	cmp	r0, #53	; 0x35
   18f9c:	bls	18dcc <__assert_fail@plt+0x76b8>
   18fa0:	ldr	r0, [sp, #36]	; 0x24
   18fa4:	orr	r8, r8, #2
   18fa8:	strd	r6, [r0]
   18fac:	mov	r0, r8
   18fb0:	sub	sp, fp, #28
   18fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fb8:	mvn	r0, #0
   18fbc:	mvn	r1, #0
   18fc0:	mov	r2, r5
   18fc4:	mov	r4, r3
   18fc8:	bl	19d58 <__assert_fail@plt+0x8644>
   18fcc:	subs	r0, r0, r6
   18fd0:	mov	r2, #0
   18fd4:	sbcs	r0, r1, r7
   18fd8:	movwcc	r2, #1
   18fdc:	umull	r0, r1, r6, r5
   18fe0:	mla	r1, r6, r4, r1
   18fe4:	cmp	r2, #0
   18fe8:	mov	r3, r2
   18fec:	mla	r7, r7, r5, r1
   18ff0:	mvnne	r0, #0
   18ff4:	mvnne	r7, #0
   18ff8:	mov	r6, r0
   18ffc:	b	197e0 <__assert_fail@plt+0x80cc>
   19000:	mvn	r0, #0
   19004:	mvn	r1, #0
   19008:	mov	r2, r5
   1900c:	str	r3, [sp, #24]
   19010:	bl	19d58 <__assert_fail@plt+0x8644>
   19014:	subs	r3, r0, r6
   19018:	mov	ip, r0
   1901c:	umull	r4, r0, r6, r5
   19020:	mov	sl, #0
   19024:	sbcs	r3, r1, r7
   19028:	str	r0, [sp, #20]
   1902c:	ldr	r0, [sp, #24]
   19030:	mov	r3, #0
   19034:	movwcc	r3, #1
   19038:	cmp	r3, #0
   1903c:	mvnne	r4, #0
   19040:	cmp	r3, #0
   19044:	umull	lr, r2, r4, r5
   19048:	mla	r2, r4, r0, r2
   1904c:	str	r2, [sp, #16]
   19050:	ldr	r2, [sp, #20]
   19054:	mla	r6, r6, r0, r2
   19058:	ldr	r0, [sp, #16]
   1905c:	mla	r6, r7, r5, r6
   19060:	mvnne	r6, #0
   19064:	mla	r7, r6, r5, r0
   19068:	subs	r0, ip, r4
   1906c:	sbcs	r0, r1, r6
   19070:	movwcc	sl, #1
   19074:	cmp	sl, #0
   19078:	orr	r3, r3, sl
   1907c:	mvnne	lr, #0
   19080:	mvnne	r7, #0
   19084:	mov	r6, lr
   19088:	b	197e0 <__assert_fail@plt+0x80cc>
   1908c:	mvn	r0, #0
   19090:	mvn	r1, #0
   19094:	mov	r2, r5
   19098:	mov	sl, r3
   1909c:	bl	19d58 <__assert_fail@plt+0x8644>
   190a0:	subs	r3, r0, r6
   190a4:	mov	ip, r1
   190a8:	umull	r2, lr, r6, r5
   190ac:	str	r0, [sp, #20]
   190b0:	sbcs	r3, r1, r7
   190b4:	mov	r1, #0
   190b8:	mla	r6, r6, sl, lr
   190bc:	mov	lr, #0
   190c0:	str	ip, [sp, #16]
   190c4:	movwcc	r1, #1
   190c8:	mla	r7, r7, r5, r6
   190cc:	cmp	r1, #0
   190d0:	mvnne	r2, #0
   190d4:	cmp	r1, #0
   190d8:	umull	r3, r4, r2, r5
   190dc:	mvnne	r7, #0
   190e0:	mla	r4, r2, sl, r4
   190e4:	subs	r2, r0, r2
   190e8:	sbcs	r2, ip, r7
   190ec:	mla	r4, r7, r5, r4
   190f0:	movwcc	lr, #1
   190f4:	mov	r2, #0
   190f8:	cmp	lr, #0
   190fc:	mvnne	r3, #0
   19100:	mvnne	r4, #0
   19104:	subs	r7, r0, r3
   19108:	mov	r0, r5
   1910c:	sbcs	r7, ip, r4
   19110:	movwcc	r2, #1
   19114:	umull	r5, r7, r3, r5
   19118:	cmp	r2, #0
   1911c:	mla	r3, r3, sl, r7
   19120:	mvnne	r5, #0
   19124:	mla	r3, r4, r0, r3
   19128:	cmp	r2, #0
   1912c:	umull	r6, ip, r5, r0
   19130:	mvnne	r3, #0
   19134:	mla	ip, r5, sl, ip
   19138:	mla	r7, r3, r0, ip
   1913c:	ldr	r0, [sp, #20]
   19140:	subs	r0, r0, r5
   19144:	ldr	r0, [sp, #16]
   19148:	sbcs	r0, r0, r3
   1914c:	mov	r0, #0
   19150:	movwcc	r0, #1
   19154:	cmp	r0, #0
   19158:	mov	r3, r0
   1915c:	orr	r0, r1, lr
   19160:	orr	r0, r0, r2
   19164:	mvnne	r7, #0
   19168:	mvnne	r6, #0
   1916c:	orr	r3, r0, r3
   19170:	b	197e0 <__assert_fail@plt+0x80cc>
   19174:	mvn	r0, #0
   19178:	mvn	r1, #0
   1917c:	mov	r2, r5
   19180:	mov	r4, r3
   19184:	str	r3, [sp, #24]
   19188:	bl	19d58 <__assert_fail@plt+0x8644>
   1918c:	umull	r3, r2, r6, r5
   19190:	mla	r2, r6, r4, r2
   19194:	subs	r6, r0, r6
   19198:	sbcs	r6, r1, r7
   1919c:	mla	r2, r7, r5, r2
   191a0:	mov	r7, #0
   191a4:	mov	r6, #0
   191a8:	movwcc	r6, #1
   191ac:	cmp	r6, #0
   191b0:	str	r6, [sp, #20]
   191b4:	mvnne	r3, #0
   191b8:	mvnne	r2, #0
   191bc:	subs	r4, r0, r3
   191c0:	umull	r6, ip, r3, r5
   191c4:	sbcs	r4, r1, r2
   191c8:	ldr	r4, [sp, #24]
   191cc:	movwcc	r7, #1
   191d0:	cmp	r7, #0
   191d4:	mov	lr, r7
   191d8:	str	r7, [sp, #16]
   191dc:	mvnne	r6, #0
   191e0:	cmp	lr, #0
   191e4:	mov	lr, #0
   191e8:	umull	sl, r7, r6, r5
   191ec:	mla	r3, r3, r4, ip
   191f0:	mla	r7, r6, r4, r7
   191f4:	mov	r4, r0
   191f8:	mla	r2, r2, r5, r3
   191fc:	mvnne	r2, #0
   19200:	subs	r3, r0, r6
   19204:	mov	r0, #0
   19208:	mla	r7, r2, r5, r7
   1920c:	sbcs	r2, r1, r2
   19210:	mov	r3, r4
   19214:	movwcc	r0, #1
   19218:	str	r3, [sp, #4]
   1921c:	cmp	r0, #0
   19220:	str	r0, [sp, #12]
   19224:	mov	r0, r1
   19228:	mvnne	sl, #0
   1922c:	mvnne	r7, #0
   19230:	str	r0, [sp, #8]
   19234:	subs	r2, r4, sl
   19238:	ldr	r4, [sp, #24]
   1923c:	sbcs	r2, r1, r7
   19240:	movwcc	lr, #1
   19244:	umull	r6, r2, sl, r5
   19248:	cmp	lr, #0
   1924c:	mvnne	r6, #0
   19250:	mla	r2, sl, r4, r2
   19254:	cmp	lr, #0
   19258:	umull	r1, ip, r6, r5
   1925c:	mla	r2, r7, r5, r2
   19260:	mla	ip, r6, r4, ip
   19264:	mvnne	r2, #0
   19268:	subs	r6, r3, r6
   1926c:	mla	r7, r2, r5, ip
   19270:	sbcs	r2, r0, r2
   19274:	mov	ip, #0
   19278:	movwcc	ip, #1
   1927c:	mov	r2, #0
   19280:	cmp	ip, #0
   19284:	mvnne	r1, #0
   19288:	mvnne	r7, #0
   1928c:	subs	r6, r3, r1
   19290:	ldr	r3, [sp, #24]
   19294:	sbcs	r6, r0, r7
   19298:	umull	r0, sl, r1, r5
   1929c:	movwcc	r2, #1
   192a0:	cmp	r2, #0
   192a4:	mvnne	r0, #0
   192a8:	mla	r1, r1, r3, sl
   192ac:	cmp	r2, #0
   192b0:	umull	r6, r4, r0, r5
   192b4:	mla	r1, r7, r5, r1
   192b8:	mla	r4, r0, r3, r4
   192bc:	ldr	r3, [sp, #4]
   192c0:	mvnne	r1, #0
   192c4:	mla	r7, r1, r5, r4
   192c8:	ldr	r5, [sp, #16]
   192cc:	subs	r0, r3, r0
   192d0:	ldr	r0, [sp, #8]
   192d4:	sbcs	r0, r0, r1
   192d8:	mov	r0, #0
   192dc:	movwcc	r0, #1
   192e0:	cmp	r0, #0
   192e4:	mov	r1, r0
   192e8:	ldr	r0, [sp, #20]
   192ec:	mvnne	r7, #0
   192f0:	mvnne	r6, #0
   192f4:	orr	r0, r0, r5
   192f8:	ldr	r5, [sp, #12]
   192fc:	orr	r0, r0, r5
   19300:	orr	r0, r0, lr
   19304:	orr	r0, r0, ip
   19308:	orr	r0, r0, r2
   1930c:	b	1977c <__assert_fail@plt+0x8068>
   19310:	mov	r1, #0
   19314:	lsl	r2, r7, #10
   19318:	lsl	r0, r6, #10
   1931c:	lsr	r3, r7, #22
   19320:	cmp	r1, r7, lsr #22
   19324:	orr	r2, r2, r6, lsr #22
   19328:	mvnne	r0, #0
   1932c:	movwne	r3, #1
   19330:	cmp	r1, r7, lsr #22
   19334:	b	197ac <__assert_fail@plt+0x8098>
   19338:	mvn	r0, #0
   1933c:	mvn	r1, #0
   19340:	mov	r2, r5
   19344:	mov	sl, r3
   19348:	bl	19d58 <__assert_fail@plt+0x8644>
   1934c:	subs	r2, r0, r6
   19350:	mov	ip, r0
   19354:	mov	r0, #0
   19358:	sbcs	r2, r1, r7
   1935c:	movwcc	r0, #1
   19360:	umull	r4, r2, r6, r5
   19364:	cmp	r0, #0
   19368:	mla	r2, r6, sl, r2
   1936c:	str	r0, [sp, #20]
   19370:	mvnne	r4, #0
   19374:	cmp	r0, #0
   19378:	mla	r2, r7, r5, r2
   1937c:	mov	r0, #0
   19380:	umull	lr, r3, r4, r5
   19384:	mvnne	r2, #0
   19388:	mla	r3, r4, sl, r3
   1938c:	mla	r6, r2, r5, r3
   19390:	subs	r3, ip, r4
   19394:	sbcs	r2, r1, r2
   19398:	mov	r3, r1
   1939c:	movwcc	r0, #1
   193a0:	str	r3, [sp, #8]
   193a4:	cmp	r0, #0
   193a8:	str	r0, [sp, #16]
   193ac:	mov	r0, ip
   193b0:	mvnne	lr, #0
   193b4:	mvnne	r6, #0
   193b8:	str	r0, [sp, #12]
   193bc:	subs	r2, ip, lr
   193c0:	umull	r7, r4, lr, r5
   193c4:	sbcs	r2, r1, r6
   193c8:	mla	r4, lr, sl, r4
   193cc:	mov	r2, #0
   193d0:	mla	r6, r6, r5, r4
   193d4:	mov	r4, #0
   193d8:	movwcc	r2, #1
   193dc:	cmp	r2, #0
   193e0:	mvnne	r7, #0
   193e4:	cmp	r2, #0
   193e8:	umull	r1, ip, r7, r5
   193ec:	mvnne	r6, #0
   193f0:	mla	ip, r7, sl, ip
   193f4:	subs	r7, r0, r7
   193f8:	mla	lr, r6, r5, ip
   193fc:	sbcs	r7, r3, r6
   19400:	mov	ip, #0
   19404:	movwcc	ip, #1
   19408:	cmp	ip, #0
   1940c:	mvnne	r1, #0
   19410:	mvnne	lr, #0
   19414:	subs	r7, r0, r1
   19418:	sbcs	r7, r3, lr
   1941c:	movwcc	r4, #1
   19420:	umull	r0, r7, r1, r5
   19424:	cmp	r4, #0
   19428:	mla	r1, r1, sl, r7
   1942c:	mvnne	r0, #0
   19430:	mla	r1, lr, r5, r1
   19434:	cmp	r4, #0
   19438:	umull	r6, r3, r0, r5
   1943c:	mvnne	r1, #0
   19440:	mla	r3, r0, sl, r3
   19444:	mla	r7, r1, r5, r3
   19448:	ldr	r3, [sp, #12]
   1944c:	subs	r0, r3, r0
   19450:	ldr	r3, [sp, #16]
   19454:	ldr	r0, [sp, #8]
   19458:	sbcs	r0, r0, r1
   1945c:	mov	r0, #0
   19460:	movwcc	r0, #1
   19464:	cmp	r0, #0
   19468:	mov	r1, r0
   1946c:	ldr	r0, [sp, #20]
   19470:	mvnne	r7, #0
   19474:	mvnne	r6, #0
   19478:	orr	r0, r0, r3
   1947c:	orr	r0, r0, r2
   19480:	orr	r0, r0, ip
   19484:	orr	r0, r0, r4
   19488:	b	195ac <__assert_fail@plt+0x7e98>
   1948c:	mvn	r0, #0
   19490:	mvn	r1, #0
   19494:	mov	r2, r5
   19498:	mov	sl, r3
   1949c:	bl	19d58 <__assert_fail@plt+0x8644>
   194a0:	umull	r3, r2, r6, r5
   194a4:	mov	lr, r1
   194a8:	mov	r1, r0
   194ac:	mla	r2, r6, sl, r2
   194b0:	subs	r6, r0, r6
   194b4:	mov	r0, #0
   194b8:	sbcs	r6, lr, r7
   194bc:	mla	r2, r7, r5, r2
   194c0:	movwcc	r0, #1
   194c4:	cmp	r0, #0
   194c8:	str	r0, [sp, #20]
   194cc:	mov	r0, r1
   194d0:	mvnne	r3, #0
   194d4:	mvnne	r2, #0
   194d8:	str	r0, [sp, #16]
   194dc:	subs	r4, r1, r3
   194e0:	umull	r7, ip, r3, r5
   194e4:	sbcs	r4, lr, r2
   194e8:	mla	r3, r3, sl, ip
   194ec:	mov	ip, #0
   194f0:	mov	r4, #0
   194f4:	mla	r2, r2, r5, r3
   194f8:	movwcc	r4, #1
   194fc:	cmp	r4, #0
   19500:	mvnne	r7, #0
   19504:	cmp	r4, #0
   19508:	umull	r1, r6, r7, r5
   1950c:	mvnne	r2, #0
   19510:	mla	r6, r7, sl, r6
   19514:	mla	r3, r2, r5, r6
   19518:	subs	r6, r0, r7
   1951c:	sbcs	r2, lr, r2
   19520:	movwcc	ip, #1
   19524:	mov	r2, #0
   19528:	cmp	ip, #0
   1952c:	mvnne	r1, #0
   19530:	mvnne	r3, #0
   19534:	subs	r6, r0, r1
   19538:	sbcs	r6, lr, r3
   1953c:	movwcc	r2, #1
   19540:	umull	r0, r6, r1, r5
   19544:	cmp	r2, #0
   19548:	str	r6, [sp, #12]
   1954c:	mvnne	r0, #0
   19550:	cmp	r2, #0
   19554:	umull	r6, r7, r0, r5
   19558:	mla	r7, r0, sl, r7
   1955c:	str	r7, [sp, #8]
   19560:	ldr	r7, [sp, #12]
   19564:	mla	r1, r1, sl, r7
   19568:	mla	r1, r3, r5, r1
   1956c:	ldr	r3, [sp, #8]
   19570:	mvnne	r1, #0
   19574:	mla	r7, r1, r5, r3
   19578:	ldr	r3, [sp, #16]
   1957c:	subs	r0, r3, r0
   19580:	sbcs	r0, lr, r1
   19584:	mov	r0, #0
   19588:	movwcc	r0, #1
   1958c:	cmp	r0, #0
   19590:	mov	r1, r0
   19594:	ldr	r0, [sp, #20]
   19598:	mvnne	r7, #0
   1959c:	mvnne	r6, #0
   195a0:	orr	r0, r0, r4
   195a4:	orr	r0, r0, ip
   195a8:	orr	r0, r0, r2
   195ac:	orr	r3, r0, r1
   195b0:	b	197e0 <__assert_fail@plt+0x80cc>
   195b4:	mvn	r0, #0
   195b8:	mvn	r1, #0
   195bc:	mov	r2, r5
   195c0:	mov	sl, r3
   195c4:	bl	19d58 <__assert_fail@plt+0x8644>
   195c8:	mov	ip, r1
   195cc:	subs	r1, r0, r6
   195d0:	umull	r3, lr, r6, r5
   195d4:	mov	r2, r5
   195d8:	sbcs	r1, ip, r7
   195dc:	mla	r6, r6, sl, lr
   195e0:	str	ip, [sp, #4]
   195e4:	mov	r1, #0
   195e8:	mla	r7, r7, r2, r6
   195ec:	movwcc	r1, #1
   195f0:	cmp	r1, #0
   195f4:	str	r1, [sp, #20]
   195f8:	mvnne	r3, #0
   195fc:	cmp	r1, #0
   19600:	mov	r1, r0
   19604:	umull	r4, r5, r3, r5
   19608:	mvnne	r7, #0
   1960c:	mov	lr, r1
   19610:	mla	r5, r3, sl, r5
   19614:	subs	r3, r0, r3
   19618:	sbcs	r0, ip, r7
   1961c:	mla	r5, r7, r2, r5
   19620:	mov	r0, #0
   19624:	movwcc	r0, #1
   19628:	cmp	r0, #0
   1962c:	str	r0, [sp, #16]
   19630:	mvnne	r4, #0
   19634:	mvnne	r5, #0
   19638:	subs	r0, r1, r4
   1963c:	mov	r1, #0
   19640:	sbcs	r0, ip, r5
   19644:	movwcc	r1, #1
   19648:	umull	r3, r0, r4, r2
   1964c:	cmp	r1, #0
   19650:	mla	r0, r4, sl, r0
   19654:	mov	r4, lr
   19658:	str	r1, [sp, #12]
   1965c:	mvnne	r3, #0
   19660:	mla	r0, r5, r2, r0
   19664:	cmp	r1, #0
   19668:	str	r4, [sp]
   1966c:	umull	r7, r6, r3, r2
   19670:	mvnne	r0, #0
   19674:	mla	r6, r3, sl, r6
   19678:	subs	r3, lr, r3
   1967c:	mla	r5, r0, r2, r6
   19680:	sbcs	r0, ip, r0
   19684:	mov	r3, #0
   19688:	mov	r0, #0
   1968c:	movwcc	r0, #1
   19690:	cmp	r0, #0
   19694:	str	r0, [sp, #8]
   19698:	mvnne	r7, #0
   1969c:	mvnne	r5, #0
   196a0:	subs	r0, lr, r7
   196a4:	sbcs	r0, ip, r5
   196a8:	movwcc	r3, #1
   196ac:	umull	r6, r0, r7, r2
   196b0:	cmp	r3, #0
   196b4:	mla	r7, r7, sl, r0
   196b8:	mov	r0, ip
   196bc:	mvnne	r6, #0
   196c0:	mla	r7, r5, r2, r7
   196c4:	cmp	r3, #0
   196c8:	mov	r5, #0
   196cc:	umull	r1, lr, r6, r2
   196d0:	mvnne	r7, #0
   196d4:	mla	lr, r6, sl, lr
   196d8:	subs	r6, r4, r6
   196dc:	mla	lr, r7, r2, lr
   196e0:	sbcs	r7, ip, r7
   196e4:	mov	ip, #0
   196e8:	movwcc	ip, #1
   196ec:	cmp	ip, #0
   196f0:	mvnne	r1, #0
   196f4:	mvnne	lr, #0
   196f8:	subs	r7, r4, r1
   196fc:	sbcs	r7, r0, lr
   19700:	movwcc	r5, #1
   19704:	umull	r0, r7, r1, r2
   19708:	cmp	r5, #0
   1970c:	mla	r1, r1, sl, r7
   19710:	mvnne	r0, #0
   19714:	mla	r1, lr, r2, r1
   19718:	cmp	r5, #0
   1971c:	umull	r6, r4, r0, r2
   19720:	mvnne	r1, #0
   19724:	mla	r4, r0, sl, r4
   19728:	mla	r7, r1, r2, r4
   1972c:	ldr	r2, [sp]
   19730:	subs	r0, r2, r0
   19734:	ldr	r2, [sp, #16]
   19738:	ldr	r0, [sp, #4]
   1973c:	sbcs	r0, r0, r1
   19740:	mov	r0, #0
   19744:	movwcc	r0, #1
   19748:	cmp	r0, #0
   1974c:	mov	r1, r0
   19750:	ldr	r0, [sp, #20]
   19754:	mvnne	r7, #0
   19758:	mvnne	r6, #0
   1975c:	orr	r0, r0, r2
   19760:	ldr	r2, [sp, #12]
   19764:	orr	r0, r0, r2
   19768:	ldr	r2, [sp, #8]
   1976c:	orr	r0, r0, r2
   19770:	orr	r0, r0, r3
   19774:	orr	r0, r0, ip
   19778:	orr	r0, r0, r5
   1977c:	orr	r0, r0, r1
   19780:	and	r3, r0, #1
   19784:	b	197e0 <__assert_fail@plt+0x80cc>
   19788:	mov	r1, #0
   1978c:	lsl	r2, r7, #9
   19790:	lsl	r0, r6, #9
   19794:	lsr	r3, r7, #23
   19798:	cmp	r1, r7, lsr #23
   1979c:	orr	r2, r2, r6, lsr #23
   197a0:	mvnne	r0, #0
   197a4:	movwne	r3, #1
   197a8:	cmp	r1, r7, lsr #23
   197ac:	mvnne	r2, #0
   197b0:	mov	r6, r0
   197b4:	mov	r7, r2
   197b8:	b	197e0 <__assert_fail@plt+0x80cc>
   197bc:	lsl	r1, r7, #1
   197c0:	lsl	r0, r6, #1
   197c4:	cmp	r7, #0
   197c8:	lsr	r3, r7, #31
   197cc:	orr	r1, r1, r6, lsr #31
   197d0:	mvnlt	r0, #0
   197d4:	mvnlt	r1, #0
   197d8:	mov	r6, r0
   197dc:	mov	r7, r1
   197e0:	ldr	r1, [sp, #32]
   197e4:	ldr	r2, [sp, #28]
   197e8:	orr	r8, r3, r8
   197ec:	add	r0, r1, r2
   197f0:	str	r0, [r9]
   197f4:	ldrb	r0, [r1, r2]
   197f8:	cmp	r0, #0
   197fc:	orrne	r8, r8, #2
   19800:	ldr	r0, [sp, #36]	; 0x24
   19804:	strd	r6, [r0]
   19808:	mov	r0, r8
   1980c:	sub	sp, fp, #28
   19810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19814:	movw	r0, #46481	; 0xb591
   19818:	movw	r1, #46519	; 0xb5b7
   1981c:	movw	r3, #46535	; 0xb5c7
   19820:	mov	r2, #85	; 0x55
   19824:	movt	r0, #1
   19828:	movt	r1, #1
   1982c:	movt	r3, #1
   19830:	bl	11714 <__assert_fail@plt>
   19834:	clz	r2, r1
   19838:	clz	r3, r0
   1983c:	lsr	r2, r2, #5
   19840:	lsr	r3, r3, #5
   19844:	orrs	r2, r3, r2
   19848:	movwne	r1, #1
   1984c:	movwne	r0, #1
   19850:	cmp	r1, #0
   19854:	beq	19884 <__assert_fail@plt+0x8170>
   19858:	mvn	r2, #-2147483648	; 0x80000000
   1985c:	udiv	r2, r2, r1
   19860:	cmp	r2, r0
   19864:	bcs	19884 <__assert_fail@plt+0x8170>
   19868:	push	{fp, lr}
   1986c:	mov	fp, sp
   19870:	bl	115d0 <__errno_location@plt>
   19874:	mov	r1, #12
   19878:	str	r1, [r0]
   1987c:	mov	r0, #0
   19880:	pop	{fp, pc}
   19884:	b	11384 <calloc@plt>
   19888:	cmp	r0, #0
   1988c:	movweq	r0, #1
   19890:	cmn	r0, #1
   19894:	ble	1989c <__assert_fail@plt+0x8188>
   19898:	b	11528 <malloc@plt>
   1989c:	push	{fp, lr}
   198a0:	mov	fp, sp
   198a4:	bl	115d0 <__errno_location@plt>
   198a8:	mov	r1, #12
   198ac:	str	r1, [r0]
   198b0:	mov	r0, #0
   198b4:	pop	{fp, pc}
   198b8:	push	{fp, lr}
   198bc:	mov	fp, sp
   198c0:	cmp	r0, #0
   198c4:	beq	198e0 <__assert_fail@plt+0x81cc>
   198c8:	cmp	r1, #0
   198cc:	beq	198ec <__assert_fail@plt+0x81d8>
   198d0:	cmn	r1, #1
   198d4:	ble	198f8 <__assert_fail@plt+0x81e4>
   198d8:	pop	{fp, lr}
   198dc:	b	11468 <realloc@plt>
   198e0:	mov	r0, r1
   198e4:	pop	{fp, lr}
   198e8:	b	19888 <__assert_fail@plt+0x8174>
   198ec:	bl	15374 <__assert_fail@plt+0x3c60>
   198f0:	mov	r0, #0
   198f4:	pop	{fp, pc}
   198f8:	bl	115d0 <__errno_location@plt>
   198fc:	mov	r1, #12
   19900:	str	r1, [r0]
   19904:	mov	r0, #0
   19908:	pop	{fp, pc}
   1990c:	push	{r4, r5, r6, sl, fp, lr}
   19910:	add	fp, sp, #16
   19914:	mov	r4, r0
   19918:	bl	114ec <__fpending@plt>
   1991c:	ldr	r6, [r4]
   19920:	mov	r5, r0
   19924:	mov	r0, r4
   19928:	bl	151c0 <__assert_fail@plt+0x3aac>
   1992c:	tst	r6, #32
   19930:	bne	19968 <__assert_fail@plt+0x8254>
   19934:	cmp	r0, #0
   19938:	mov	r4, r0
   1993c:	mvnne	r4, #0
   19940:	cmp	r5, #0
   19944:	bne	19974 <__assert_fail@plt+0x8260>
   19948:	cmp	r0, #0
   1994c:	beq	19974 <__assert_fail@plt+0x8260>
   19950:	bl	115d0 <__errno_location@plt>
   19954:	ldr	r0, [r0]
   19958:	subs	r4, r0, #9
   1995c:	mvnne	r4, #0
   19960:	mov	r0, r4
   19964:	pop	{r4, r5, r6, sl, fp, pc}
   19968:	mvn	r4, #0
   1996c:	cmp	r0, #0
   19970:	beq	1997c <__assert_fail@plt+0x8268>
   19974:	mov	r0, r4
   19978:	pop	{r4, r5, r6, sl, fp, pc}
   1997c:	bl	115d0 <__errno_location@plt>
   19980:	mov	r1, #0
   19984:	str	r1, [r0]
   19988:	mov	r0, r4
   1998c:	pop	{r4, r5, r6, sl, fp, pc}
   19990:	push	{fp, lr}
   19994:	mov	fp, sp
   19998:	mov	r0, #14
   1999c:	bl	116a8 <nl_langinfo@plt>
   199a0:	movw	r1, #42061	; 0xa44d
   199a4:	cmp	r0, #0
   199a8:	movt	r1, #1
   199ac:	movne	r1, r0
   199b0:	movw	r0, #46614	; 0xb616
   199b4:	ldrb	r2, [r1]
   199b8:	movt	r0, #1
   199bc:	cmp	r2, #0
   199c0:	movne	r0, r1
   199c4:	pop	{fp, pc}
   199c8:	push	{r4, r5, r6, r7, fp, lr}
   199cc:	add	fp, sp, #16
   199d0:	sub	sp, sp, #8
   199d4:	add	r5, sp, #4
   199d8:	cmp	r0, #0
   199dc:	mov	r7, r2
   199e0:	mov	r4, r1
   199e4:	movne	r5, r0
   199e8:	mov	r0, r5
   199ec:	bl	114f8 <mbrtowc@plt>
   199f0:	mov	r6, r0
   199f4:	cmp	r7, #0
   199f8:	beq	19a1c <__assert_fail@plt+0x8308>
   199fc:	cmn	r6, #2
   19a00:	bcc	19a1c <__assert_fail@plt+0x8308>
   19a04:	mov	r0, #0
   19a08:	bl	19c50 <__assert_fail@plt+0x853c>
   19a0c:	cmp	r0, #0
   19a10:	ldrbeq	r0, [r4]
   19a14:	moveq	r6, #1
   19a18:	streq	r0, [r5]
   19a1c:	mov	r0, r6
   19a20:	sub	sp, fp, #16
   19a24:	pop	{r4, r5, r6, r7, fp, pc}
   19a28:	cmp	r2, #0
   19a2c:	beq	19a5c <__assert_fail@plt+0x8348>
   19a30:	mvn	r3, #0
   19a34:	udiv	r3, r3, r2
   19a38:	cmp	r3, r1
   19a3c:	bcs	19a5c <__assert_fail@plt+0x8348>
   19a40:	push	{fp, lr}
   19a44:	mov	fp, sp
   19a48:	bl	115d0 <__errno_location@plt>
   19a4c:	mov	r1, #12
   19a50:	str	r1, [r0]
   19a54:	mov	r0, #0
   19a58:	pop	{fp, pc}
   19a5c:	mul	r1, r2, r1
   19a60:	b	198b8 <__assert_fail@plt+0x81a4>
   19a64:	mov	r1, #0
   19a68:	mov	r2, #3
   19a6c:	b	19a70 <__assert_fail@plt+0x835c>
   19a70:	sub	sp, sp, #8
   19a74:	push	{r4, r5, r6, r7, fp, lr}
   19a78:	add	fp, sp, #16
   19a7c:	sub	sp, sp, #8
   19a80:	mov	r5, r0
   19a84:	add	r0, fp, #8
   19a88:	cmp	r1, #11
   19a8c:	str	r3, [fp, #12]
   19a90:	str	r2, [fp, #8]
   19a94:	str	r0, [sp, #4]
   19a98:	bhi	19ad4 <__assert_fail@plt+0x83c0>
   19a9c:	mov	r0, #1
   19aa0:	movw	r2, #1300	; 0x514
   19aa4:	tst	r2, r0, lsl r1
   19aa8:	bne	19b94 <__assert_fail@plt+0x8480>
   19aac:	movw	r2, #2570	; 0xa0a
   19ab0:	tst	r2, r0, lsl r1
   19ab4:	bne	19afc <__assert_fail@plt+0x83e8>
   19ab8:	cmp	r1, #0
   19abc:	bne	19ad4 <__assert_fail@plt+0x83c0>
   19ac0:	ldr	r0, [sp, #4]
   19ac4:	add	r1, r0, #4
   19ac8:	str	r1, [sp, #4]
   19acc:	mov	r1, #0
   19ad0:	b	19ba0 <__assert_fail@plt+0x848c>
   19ad4:	sub	r0, r1, #1024	; 0x400
   19ad8:	cmp	r0, #10
   19adc:	bhi	19b94 <__assert_fail@plt+0x8480>
   19ae0:	mov	r2, #1
   19ae4:	movw	r3, #645	; 0x285
   19ae8:	tst	r3, r2, lsl r0
   19aec:	bne	19b94 <__assert_fail@plt+0x8480>
   19af0:	movw	r3, #1282	; 0x502
   19af4:	tst	r3, r2, lsl r0
   19af8:	beq	19b08 <__assert_fail@plt+0x83f4>
   19afc:	mov	r0, r5
   19b00:	bl	11660 <fcntl64@plt>
   19b04:	b	19bac <__assert_fail@plt+0x8498>
   19b08:	cmp	r0, #6
   19b0c:	bne	19b94 <__assert_fail@plt+0x8480>
   19b10:	ldr	r0, [sp, #4]
   19b14:	movw	r7, #50776	; 0xc658
   19b18:	movt	r7, #2
   19b1c:	add	r1, r0, #4
   19b20:	str	r1, [sp, #4]
   19b24:	ldr	r6, [r0]
   19b28:	ldr	r0, [r7]
   19b2c:	cmp	r0, #0
   19b30:	blt	19bd0 <__assert_fail@plt+0x84bc>
   19b34:	mov	r0, r5
   19b38:	movw	r1, #1030	; 0x406
   19b3c:	mov	r2, r6
   19b40:	bl	11660 <fcntl64@plt>
   19b44:	mov	r4, r0
   19b48:	cmn	r0, #1
   19b4c:	bgt	19bc4 <__assert_fail@plt+0x84b0>
   19b50:	bl	115d0 <__errno_location@plt>
   19b54:	ldr	r0, [r0]
   19b58:	cmp	r0, #22
   19b5c:	bne	19bc4 <__assert_fail@plt+0x84b0>
   19b60:	mov	r0, r5
   19b64:	mov	r1, #0
   19b68:	mov	r2, r6
   19b6c:	bl	11660 <fcntl64@plt>
   19b70:	mov	r4, r0
   19b74:	cmp	r0, #0
   19b78:	blt	19bb0 <__assert_fail@plt+0x849c>
   19b7c:	mvn	r0, #0
   19b80:	str	r0, [r7]
   19b84:	mov	r0, #1
   19b88:	cmp	r0, #0
   19b8c:	bne	19bfc <__assert_fail@plt+0x84e8>
   19b90:	b	19bb0 <__assert_fail@plt+0x849c>
   19b94:	ldr	r0, [sp, #4]
   19b98:	add	r2, r0, #4
   19b9c:	str	r2, [sp, #4]
   19ba0:	ldr	r2, [r0]
   19ba4:	mov	r0, r5
   19ba8:	bl	11660 <fcntl64@plt>
   19bac:	mov	r4, r0
   19bb0:	mov	r0, r4
   19bb4:	sub	sp, fp, #16
   19bb8:	pop	{r4, r5, r6, r7, fp, lr}
   19bbc:	add	sp, sp, #8
   19bc0:	bx	lr
   19bc4:	mov	r0, #1
   19bc8:	str	r0, [r7]
   19bcc:	b	19bb0 <__assert_fail@plt+0x849c>
   19bd0:	mov	r0, r5
   19bd4:	mov	r1, #0
   19bd8:	mov	r2, r6
   19bdc:	bl	11660 <fcntl64@plt>
   19be0:	mov	r4, r0
   19be4:	ldr	r0, [r7]
   19be8:	add	r0, r0, #1
   19bec:	clz	r0, r0
   19bf0:	lsr	r0, r0, #5
   19bf4:	cmp	r0, #0
   19bf8:	beq	19bb0 <__assert_fail@plt+0x849c>
   19bfc:	cmp	r4, #0
   19c00:	blt	19bb0 <__assert_fail@plt+0x849c>
   19c04:	mov	r0, r4
   19c08:	mov	r1, #1
   19c0c:	bl	11660 <fcntl64@plt>
   19c10:	cmp	r0, #0
   19c14:	blt	19c30 <__assert_fail@plt+0x851c>
   19c18:	orr	r2, r0, #1
   19c1c:	mov	r0, r4
   19c20:	mov	r1, #2
   19c24:	bl	11660 <fcntl64@plt>
   19c28:	cmn	r0, #1
   19c2c:	bne	19bb0 <__assert_fail@plt+0x849c>
   19c30:	bl	115d0 <__errno_location@plt>
   19c34:	ldr	r6, [r0]
   19c38:	mov	r5, r0
   19c3c:	mov	r0, r4
   19c40:	bl	116fc <close@plt>
   19c44:	str	r6, [r5]
   19c48:	mvn	r4, #0
   19c4c:	b	19bb0 <__assert_fail@plt+0x849c>
   19c50:	push	{r4, sl, fp, lr}
   19c54:	add	fp, sp, #8
   19c58:	sub	sp, sp, #264	; 0x108
   19c5c:	add	r1, sp, #7
   19c60:	movw	r2, #257	; 0x101
   19c64:	bl	19cb4 <__assert_fail@plt+0x85a0>
   19c68:	mov	r4, #0
   19c6c:	cmp	r0, #0
   19c70:	bne	19ca8 <__assert_fail@plt+0x8594>
   19c74:	movw	r1, #46620	; 0xb61c
   19c78:	add	r0, sp, #7
   19c7c:	movt	r1, #1
   19c80:	bl	113a8 <strcmp@plt>
   19c84:	cmp	r0, #0
   19c88:	beq	19ca8 <__assert_fail@plt+0x8594>
   19c8c:	movw	r1, #46622	; 0xb61e
   19c90:	add	r0, sp, #7
   19c94:	movt	r1, #1
   19c98:	bl	113a8 <strcmp@plt>
   19c9c:	mov	r4, r0
   19ca0:	cmp	r0, #0
   19ca4:	movwne	r4, #1
   19ca8:	mov	r0, r4
   19cac:	sub	sp, fp, #8
   19cb0:	pop	{r4, sl, fp, pc}
   19cb4:	push	{r4, r5, r6, r7, fp, lr}
   19cb8:	add	fp, sp, #16
   19cbc:	mov	r4, r1
   19cc0:	mov	r1, #0
   19cc4:	mov	r6, r2
   19cc8:	bl	1166c <setlocale@plt>
   19ccc:	cmp	r0, #0
   19cd0:	beq	19d00 <__assert_fail@plt+0x85ec>
   19cd4:	mov	r7, r0
   19cd8:	bl	11588 <strlen@plt>
   19cdc:	cmp	r0, r6
   19ce0:	bcs	19d20 <__assert_fail@plt+0x860c>
   19ce4:	add	r2, r0, #1
   19ce8:	mov	r0, r4
   19cec:	mov	r1, r7
   19cf0:	bl	11408 <memcpy@plt>
   19cf4:	mov	r5, #0
   19cf8:	mov	r0, r5
   19cfc:	pop	{r4, r5, r6, r7, fp, pc}
   19d00:	cmp	r6, #0
   19d04:	mov	r5, #22
   19d08:	movne	r0, #0
   19d0c:	strbne	r0, [r4]
   19d10:	movne	r0, r5
   19d14:	popne	{r4, r5, r6, r7, fp, pc}
   19d18:	mov	r0, r5
   19d1c:	pop	{r4, r5, r6, r7, fp, pc}
   19d20:	mov	r5, #34	; 0x22
   19d24:	cmp	r6, #0
   19d28:	beq	19d48 <__assert_fail@plt+0x8634>
   19d2c:	sub	r6, r6, #1
   19d30:	mov	r0, r4
   19d34:	mov	r1, r7
   19d38:	mov	r2, r6
   19d3c:	bl	11408 <memcpy@plt>
   19d40:	mov	r0, #0
   19d44:	strb	r0, [r4, r6]
   19d48:	mov	r0, r5
   19d4c:	pop	{r4, r5, r6, r7, fp, pc}
   19d50:	mov	r1, #0
   19d54:	b	1166c <setlocale@plt>
   19d58:	cmp	r3, #0
   19d5c:	cmpeq	r2, #0
   19d60:	bne	19d78 <__assert_fail@plt+0x8664>
   19d64:	cmp	r1, #0
   19d68:	cmpeq	r0, #0
   19d6c:	mvnne	r1, #0
   19d70:	mvnne	r0, #0
   19d74:	b	19d94 <__assert_fail@plt+0x8680>
   19d78:	sub	sp, sp, #8
   19d7c:	push	{sp, lr}
   19d80:	bl	19da4 <__assert_fail@plt+0x8690>
   19d84:	ldr	lr, [sp, #4]
   19d88:	add	sp, sp, #8
   19d8c:	pop	{r2, r3}
   19d90:	bx	lr
   19d94:	push	{r1, lr}
   19d98:	mov	r0, #8
   19d9c:	bl	1139c <raise@plt>
   19da0:	pop	{r1, pc}
   19da4:	cmp	r1, r3
   19da8:	cmpeq	r0, r2
   19dac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19db0:	mov	r4, r0
   19db4:	movcc	r0, #0
   19db8:	mov	r5, r1
   19dbc:	ldr	lr, [sp, #36]	; 0x24
   19dc0:	movcc	r1, r0
   19dc4:	bcc	19ec0 <__assert_fail@plt+0x87ac>
   19dc8:	cmp	r3, #0
   19dcc:	clzeq	ip, r2
   19dd0:	clzne	ip, r3
   19dd4:	addeq	ip, ip, #32
   19dd8:	cmp	r5, #0
   19ddc:	clzeq	r1, r4
   19de0:	addeq	r1, r1, #32
   19de4:	clzne	r1, r5
   19de8:	sub	ip, ip, r1
   19dec:	sub	sl, ip, #32
   19df0:	lsl	r9, r3, ip
   19df4:	rsb	fp, ip, #32
   19df8:	orr	r9, r9, r2, lsl sl
   19dfc:	orr	r9, r9, r2, lsr fp
   19e00:	lsl	r8, r2, ip
   19e04:	cmp	r5, r9
   19e08:	cmpeq	r4, r8
   19e0c:	movcc	r0, #0
   19e10:	movcc	r1, r0
   19e14:	bcc	19e30 <__assert_fail@plt+0x871c>
   19e18:	mov	r0, #1
   19e1c:	subs	r4, r4, r8
   19e20:	lsl	r1, r0, sl
   19e24:	orr	r1, r1, r0, lsr fp
   19e28:	lsl	r0, r0, ip
   19e2c:	sbc	r5, r5, r9
   19e30:	cmp	ip, #0
   19e34:	beq	19ec0 <__assert_fail@plt+0x87ac>
   19e38:	lsr	r6, r8, #1
   19e3c:	orr	r6, r6, r9, lsl #31
   19e40:	lsr	r7, r9, #1
   19e44:	mov	r2, ip
   19e48:	b	19e6c <__assert_fail@plt+0x8758>
   19e4c:	subs	r3, r4, r6
   19e50:	sbc	r8, r5, r7
   19e54:	adds	r3, r3, r3
   19e58:	adc	r8, r8, r8
   19e5c:	adds	r4, r3, #1
   19e60:	adc	r5, r8, #0
   19e64:	subs	r2, r2, #1
   19e68:	beq	19e88 <__assert_fail@plt+0x8774>
   19e6c:	cmp	r5, r7
   19e70:	cmpeq	r4, r6
   19e74:	bcs	19e4c <__assert_fail@plt+0x8738>
   19e78:	adds	r4, r4, r4
   19e7c:	adc	r5, r5, r5
   19e80:	subs	r2, r2, #1
   19e84:	bne	19e6c <__assert_fail@plt+0x8758>
   19e88:	lsr	r3, r4, ip
   19e8c:	orr	r3, r3, r5, lsl fp
   19e90:	lsr	r2, r5, ip
   19e94:	orr	r3, r3, r5, lsr sl
   19e98:	adds	r0, r0, r4
   19e9c:	mov	r4, r3
   19ea0:	lsl	r3, r2, ip
   19ea4:	orr	r3, r3, r4, lsl sl
   19ea8:	lsl	ip, r4, ip
   19eac:	orr	r3, r3, r4, lsr fp
   19eb0:	adc	r1, r1, r5
   19eb4:	subs	r0, r0, ip
   19eb8:	mov	r5, r2
   19ebc:	sbc	r1, r1, r3
   19ec0:	cmp	lr, #0
   19ec4:	strdne	r4, [lr]
   19ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ecc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ed0:	mov	r7, r0
   19ed4:	ldr	r6, [pc, #72]	; 19f24 <__assert_fail@plt+0x8810>
   19ed8:	ldr	r5, [pc, #72]	; 19f28 <__assert_fail@plt+0x8814>
   19edc:	add	r6, pc, r6
   19ee0:	add	r5, pc, r5
   19ee4:	sub	r6, r6, r5
   19ee8:	mov	r8, r1
   19eec:	mov	r9, r2
   19ef0:	bl	11358 <fdopen@plt-0x20>
   19ef4:	asrs	r6, r6, #2
   19ef8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19efc:	mov	r4, #0
   19f00:	add	r4, r4, #1
   19f04:	ldr	r3, [r5], #4
   19f08:	mov	r2, r9
   19f0c:	mov	r1, r8
   19f10:	mov	r0, r7
   19f14:	blx	r3
   19f18:	cmp	r6, r4
   19f1c:	bne	19f00 <__assert_fail@plt+0x87ec>
   19f20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f24:	andeq	r2, r1, r8, lsr #32
   19f28:	andeq	r2, r1, r0, lsr #32
   19f2c:	bx	lr
   19f30:	ldr	r3, [pc, #12]	; 19f44 <__assert_fail@plt+0x8830>
   19f34:	mov	r1, #0
   19f38:	add	r3, pc, r3
   19f3c:	ldr	r2, [r3]
   19f40:	b	115e8 <__cxa_atexit@plt>
   19f44:	andeq	r2, r1, ip, lsl #4

Disassembly of section .fini:

00019f48 <.fini>:
   19f48:	push	{r3, lr}
   19f4c:	pop	{r3, pc}
