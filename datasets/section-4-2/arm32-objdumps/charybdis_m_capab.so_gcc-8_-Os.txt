
../repos/charybdis/modules/.libs/m_capab.so:     file format elf32-littlearm


Disassembly of section .init:

0000053c <_init>:
 53c:	push	{r3, lr}
 540:	bl	5d4 <call_weak_fn>
 544:	pop	{r3, pc}

Disassembly of section .plt:

00000548 <.plt>:
 548:	push	{lr}		; (str lr, [sp, #-4]!)
 54c:	ldr	lr, [pc, #4]	; 558 <.plt+0x10>
 550:	add	lr, pc, lr
 554:	ldr	pc, [lr, #8]!
 558:	.word	0x00010aa8

0000055c <__cxa_finalize@plt>:
 55c:	add	ip, pc, #0, 12
 560:	add	ip, ip, #16, 20	; 0x10000
 564:	ldr	pc, [ip, #2728]!	; 0xaa8

00000568 <free@plt>:
 568:	add	ip, pc, #0, 12
 56c:	add	ip, ip, #16, 20	; 0x10000
 570:	ldr	pc, [ip, #2720]!	; 0xaa0

00000574 <rb_outofmemory@plt>:
 574:	add	ip, pc, #0, 12
 578:	add	ip, ip, #16, 20	; 0x10000
 57c:	ldr	pc, [ip, #2712]!	; 0xa98

00000580 <strcpy@plt>:
 580:	add	ip, pc, #0, 12
 584:	add	ip, ip, #16, 20	; 0x10000
 588:	ldr	pc, [ip, #2704]!	; 0xa90

0000058c <malloc@plt>:
 58c:	add	ip, pc, #0, 12
 590:	add	ip, ip, #16, 20	; 0x10000
 594:	ldr	pc, [ip, #2696]!	; 0xa88

00000598 <__gmon_start__@plt>:
 598:	add	ip, pc, #0, 12
 59c:	add	ip, ip, #16, 20	; 0x10000
 5a0:	ldr	pc, [ip, #2688]!	; 0xa80

000005a4 <strlen@plt>:
 5a4:	add	ip, pc, #0, 12
 5a8:	add	ip, ip, #16, 20	; 0x10000
 5ac:	ldr	pc, [ip, #2680]!	; 0xa78

000005b0 <capability_get@plt>:
 5b0:	add	ip, pc, #0, 12
 5b4:	add	ip, ip, #16, 20	; 0x10000
 5b8:	ldr	pc, [ip, #2672]!	; 0xa70

000005bc <rb_strtok_r@plt>:
 5bc:	add	ip, pc, #0, 12
 5c0:	add	ip, ip, #16, 20	; 0x10000
 5c4:	ldr	pc, [ip, #2664]!	; 0xa68

000005c8 <exit_client@plt>:
 5c8:	add	ip, pc, #0, 12
 5cc:	add	ip, ip, #16, 20	; 0x10000
 5d0:	ldr	pc, [ip, #2656]!	; 0xa60

Disassembly of section .text:

000005d4 <call_weak_fn>:
 5d4:	ldr	r3, [pc, #20]	; 5f0 <call_weak_fn+0x1c>
 5d8:	ldr	r2, [pc, #20]	; 5f4 <call_weak_fn+0x20>
 5dc:	add	r3, pc, r3
 5e0:	ldr	r2, [r3, r2]
 5e4:	cmp	r2, #0
 5e8:	bxeq	lr
 5ec:	b	598 <__gmon_start__@plt>
 5f0:	.word	0x00010a1c
 5f4:	.word	0x00000048

000005f8 <deregister_tm_clones>:
 5f8:	ldr	r0, [pc, #44]	; 62c <deregister_tm_clones+0x34>
 5fc:	ldr	r3, [pc, #44]	; 630 <deregister_tm_clones+0x38>
 600:	add	r0, pc, r0
 604:	add	r3, pc, r3
 608:	cmp	r3, r0
 60c:	ldr	r3, [pc, #32]	; 634 <deregister_tm_clones+0x3c>
 610:	add	r3, pc, r3
 614:	bxeq	lr
 618:	ldr	r2, [pc, #24]	; 638 <deregister_tm_clones+0x40>
 61c:	ldr	r3, [r3, r2]
 620:	cmp	r3, #0
 624:	bxeq	lr
 628:	bx	r3
 62c:	.word	0x00010b08
 630:	.word	0x00010b04
 634:	.word	0x000109e8
 638:	.word	0x00000040

0000063c <register_tm_clones>:
 63c:	ldr	r0, [pc, #56]	; 67c <register_tm_clones+0x40>
 640:	ldr	r3, [pc, #56]	; 680 <register_tm_clones+0x44>
 644:	add	r0, pc, r0
 648:	add	r3, pc, r3
 64c:	sub	r1, r3, r0
 650:	ldr	r3, [pc, #44]	; 684 <register_tm_clones+0x48>
 654:	asr	r1, r1, #2
 658:	add	r3, pc, r3
 65c:	add	r1, r1, r1, lsr #31
 660:	asrs	r1, r1, #1
 664:	bxeq	lr
 668:	ldr	r2, [pc, #24]	; 688 <register_tm_clones+0x4c>
 66c:	ldr	r3, [r3, r2]
 670:	cmp	r3, #0
 674:	bxeq	lr
 678:	bx	r3
 67c:	.word	0x00010ac4
 680:	.word	0x00010ac0
 684:	.word	0x000109a0
 688:	.word	0x0000004c

0000068c <__do_global_dtors_aux>:
 68c:	ldr	r3, [pc, #76]	; 6e0 <__do_global_dtors_aux+0x54>
 690:	ldr	r2, [pc, #76]	; 6e4 <__do_global_dtors_aux+0x58>
 694:	add	r3, pc, r3
 698:	add	r2, pc, r2
 69c:	ldrb	r3, [r3]
 6a0:	cmp	r3, #0
 6a4:	bxne	lr
 6a8:	ldr	r3, [pc, #56]	; 6e8 <__do_global_dtors_aux+0x5c>
 6ac:	push	{r4, lr}
 6b0:	ldr	r3, [r2, r3]
 6b4:	cmp	r3, #0
 6b8:	beq	6c8 <__do_global_dtors_aux+0x3c>
 6bc:	ldr	r3, [pc, #40]	; 6ec <__do_global_dtors_aux+0x60>
 6c0:	ldr	r0, [pc, r3]
 6c4:	bl	55c <__cxa_finalize@plt>
 6c8:	bl	5f8 <deregister_tm_clones>
 6cc:	ldr	r3, [pc, #28]	; 6f0 <__do_global_dtors_aux+0x64>
 6d0:	mov	r2, #1
 6d4:	add	r3, pc, r3
 6d8:	strb	r2, [r3]
 6dc:	pop	{r4, pc}
 6e0:	.word	0x00010a74
 6e4:	.word	0x00010960
 6e8:	.word	0x00000038
 6ec:	.word	0x00010988
 6f0:	.word	0x00010a34

000006f4 <frame_dummy>:
 6f4:	b	63c <register_tm_clones>

000006f8 <rb_strdup>:
 6f8:	push	{r4, r5, r6, lr}
 6fc:	mov	r5, r0
 700:	bl	5a4 <strlen@plt>
 704:	add	r0, r0, #1
 708:	bl	58c <malloc@plt>
 70c:	subs	r4, r0, #0
 710:	bne	718 <rb_strdup+0x20>
 714:	bl	574 <rb_outofmemory@plt>
 718:	mov	r1, r5
 71c:	bl	580 <strcpy@plt>
 720:	mov	r0, r4
 724:	pop	{r4, r5, r6, pc}

00000728 <me_gcap>:
 728:	push	{r4, r5, r6, r7, r8, fp, lr}
 72c:	add	fp, sp, #24
 730:	sub	sp, sp, #12
 734:	mov	r4, r2
 738:	ldr	r6, [fp, #4]
 73c:	ldr	r5, [pc, #216]	; 81c <me_gcap+0xf4>
 740:	ldr	r8, [r6, #4]
 744:	add	r5, pc, r5
 748:	mov	r0, r8
 74c:	bl	5a4 <strlen@plt>
 750:	add	r0, r0, #8
 754:	mov	r1, r8
 758:	bic	r0, r0, #7
 75c:	sub	sp, sp, r0
 760:	mov	r7, sp
 764:	mov	r0, r7
 768:	bl	580 <strcpy@plt>
 76c:	ldrh	r3, [r4, #80]	; 0x50
 770:	cmp	r3, #32
 774:	bne	7d8 <me_gcap+0xb0>
 778:	ldr	r3, [r4, #28]
 77c:	ldr	r0, [r3, #64]	; 0x40
 780:	cmp	r0, #0
 784:	beq	7a0 <me_gcap+0x78>
 788:	ldrb	r2, [r0]
 78c:	cmp	r2, #0
 790:	beq	7a0 <me_gcap+0x78>
 794:	mov	r2, #0
 798:	str	r2, [r3, #60]	; 0x3c
 79c:	bl	568 <free@plt>
 7a0:	ldr	r8, [r4, #28]
 7a4:	ldr	r0, [r6, #4]
 7a8:	sub	r6, fp, #32
 7ac:	bl	6f8 <rb_strdup>
 7b0:	ldr	r1, [pc, #104]	; 820 <me_gcap+0xf8>
 7b4:	mov	r2, r6
 7b8:	str	r0, [r8, #64]	; 0x40
 7bc:	mov	r0, r7
 7c0:	ldr	r7, [pc, #92]	; 824 <me_gcap+0xfc>
 7c4:	add	r1, pc, r1
 7c8:	bl	5bc <rb_strtok_r@plt>
 7cc:	add	r7, pc, r7
 7d0:	cmp	r0, #0
 7d4:	bne	7e0 <me_gcap+0xb8>
 7d8:	sub	sp, fp, #24
 7dc:	pop	{r4, r5, r6, r7, r8, fp, pc}
 7e0:	ldr	r3, [pc, #64]	; 828 <me_gcap+0x100>
 7e4:	mov	r1, r0
 7e8:	mov	r2, #0
 7ec:	ldr	r3, [r5, r3]
 7f0:	ldr	r0, [r3]
 7f4:	bl	5b0 <capability_get@plt>
 7f8:	ldr	r2, [r4, #28]
 7fc:	mov	r1, r7
 800:	ldr	r3, [r2, #60]	; 0x3c
 804:	orr	r0, r3, r0
 808:	str	r0, [r2, #60]	; 0x3c
 80c:	mov	r2, r6
 810:	mov	r0, #0
 814:	bl	5bc <rb_strtok_r@plt>
 818:	b	7d0 <me_gcap+0xa8>
 81c:	.word	0x000108b4
 820:	.word	0x00000207
 824:	.word	0x000001ff
 828:	.word	0x0000003c

0000082c <mr_capab>:
 82c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 830:	add	fp, sp, #32
 834:	sub	sp, sp, #12
 838:	ldr	r2, [r1, #432]	; 0x1b0
 83c:	ldr	r6, [pc, #292]	; 968 <mr_capab+0x13c>
 840:	cmp	r2, #0
 844:	add	r6, pc, r6
 848:	beq	88c <mr_capab+0x60>
 84c:	ldr	r0, [r1, #24]
 850:	mov	r4, r1
 854:	cmp	r0, #0
 858:	bne	88c <mr_capab+0x60>
 85c:	mov	r7, r3
 860:	ldr	r3, [pc, #260]	; 96c <mr_capab+0x140>
 864:	ldr	r0, [r2, #296]	; 0x128
 868:	ldr	r3, [r6, r3]
 86c:	ldr	r3, [r3]
 870:	bics	r3, r0, r3
 874:	beq	894 <mr_capab+0x68>
 878:	ldr	r3, [pc, #240]	; 970 <mr_capab+0x144>
 87c:	mov	r2, r1
 880:	mov	r0, r1
 884:	add	r3, pc, r3
 888:	bl	5c8 <exit_client@plt>
 88c:	sub	sp, fp, #32
 890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 894:	ldr	r3, [pc, #216]	; 974 <mr_capab+0x148>
 898:	ldr	r3, [r6, r3]
 89c:	ldr	r3, [r3]
 8a0:	orr	r3, r3, r0
 8a4:	ldr	r0, [r2, #288]	; 0x120
 8a8:	str	r3, [r2, #296]	; 0x128
 8ac:	cmp	r0, #0
 8b0:	beq	8b8 <mr_capab+0x8c>
 8b4:	bl	568 <free@plt>
 8b8:	ldr	r3, [fp, #4]
 8bc:	ldr	r9, [pc, #180]	; 978 <mr_capab+0x14c>
 8c0:	ldr	sl, [pc, #180]	; 97c <mr_capab+0x150>
 8c4:	ldr	r5, [r4, #432]	; 0x1b0
 8c8:	add	r9, pc, r9
 8cc:	ldr	r0, [r3, #4]
 8d0:	bl	6f8 <rb_strdup>
 8d4:	add	sl, pc, sl
 8d8:	str	r0, [r5, #288]	; 0x120
 8dc:	mov	r5, #1
 8e0:	cmp	r5, r7
 8e4:	bge	88c <mr_capab+0x60>
 8e8:	ldr	r3, [fp, #4]
 8ec:	ldr	r8, [r3, r5, lsl #2]
 8f0:	mov	r0, r8
 8f4:	bl	5a4 <strlen@plt>
 8f8:	add	r0, r0, #8
 8fc:	mov	r1, r8
 900:	bic	r0, r0, #7
 904:	sub	r8, fp, #40	; 0x28
 908:	sub	sp, sp, r0
 90c:	mov	r3, sp
 910:	mov	r0, r3
 914:	bl	580 <strcpy@plt>
 918:	mov	r2, r8
 91c:	mov	r1, r9
 920:	bl	5bc <rb_strtok_r@plt>
 924:	cmp	r0, #0
 928:	addeq	r5, r5, #1
 92c:	beq	8e0 <mr_capab+0xb4>
 930:	ldr	r3, [pc, #72]	; 980 <mr_capab+0x154>
 934:	mov	r1, r0
 938:	mov	r2, #0
 93c:	ldr	r3, [r6, r3]
 940:	ldr	r0, [r3]
 944:	bl	5b0 <capability_get@plt>
 948:	ldr	r2, [r4, #432]	; 0x1b0
 94c:	mov	r1, sl
 950:	ldr	r3, [r2, #296]	; 0x128
 954:	orr	r0, r3, r0
 958:	str	r0, [r2, #296]	; 0x128
 95c:	mov	r2, r8
 960:	mov	r0, #0
 964:	b	920 <mr_capab+0xf4>
 968:	.word	0x000107b4
 96c:	.word	0x00000044
 970:	.word	0x00000149
 974:	.word	0x00000034
 978:	.word	0x00000103
 97c:	.word	0x000000f7
 980:	.word	0x0000003c

Disassembly of section .fini:

00000984 <_fini>:
 984:	push	{r3, lr}
 988:	pop	{r3, pc}
