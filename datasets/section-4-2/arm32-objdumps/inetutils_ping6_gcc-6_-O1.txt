
../repos/inetutils/ping/ping6:     file format elf32-littlearm


Disassembly of section .init:

000110b4 <.init>:
   110b4:	push	{r3, lr}
   110b8:	bl	1147c <__assert_fail@plt+0x48>
   110bc:	pop	{r3, pc}

Disassembly of section .plt:

000110c0 <calloc@plt-0x14>:
   110c0:	push	{lr}		; (str lr, [sp, #-4]!)
   110c4:	ldr	lr, [pc, #4]	; 110d0 <calloc@plt-0x4>
   110c8:	add	lr, pc, lr
   110cc:	ldr	pc, [lr, #8]!
   110d0:	andeq	sl, r1, r0, lsr pc

000110d4 <calloc@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3888]!	; 0xf30

000110e0 <fputs_unlocked@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3880]!	; 0xf28

000110ec <raise@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3872]!	; 0xf20

000110f8 <setbuf@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3864]!	; 0xf18

00011104 <strcmp@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3856]!	; 0xf10

00011110 <strtol@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3848]!	; 0xf08

0001111c <setsockopt@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3840]!	; 0xf00

00011128 <printf@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3832]!	; 0xef8

00011134 <fflush@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3824]!	; 0xef0

00011140 <getuid@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3816]!	; 0xee8

0001114c <memmove@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3808]!	; 0xee0

00011158 <strchrnul@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3800]!	; 0xed8

00011164 <free@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3792]!	; 0xed0

00011170 <gai_strerror@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3784]!	; 0xec8

0001117c <strndup@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3776]!	; 0xec0

00011188 <memcpy@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3768]!	; 0xeb8

00011194 <signal@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3760]!	; 0xeb0

000111a0 <fwrite_unlocked@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3752]!	; 0xea8

000111ac <inet_ntoa@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3744]!	; 0xea0

000111b8 <select@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3736]!	; 0xe98

000111c4 <sleep@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3728]!	; 0xe90

000111d0 <gethostbyaddr@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3720]!	; 0xe88

000111dc <strdup@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3712]!	; 0xe80

000111e8 <realloc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3704]!	; 0xe78

000111f4 <strcasecmp@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3696]!	; 0xe70

00011200 <funlockfile@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3688]!	; 0xe68

0001120c <fwrite@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3680]!	; 0xe60

00011218 <gettimeofday@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3672]!	; 0xe58

00011224 <error@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3664]!	; 0xe50

00011230 <getenv@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3656]!	; 0xe48

0001123c <puts@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3648]!	; 0xe40

00011248 <malloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3640]!	; 0xe38

00011254 <__libc_start_main@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3632]!	; 0xe30

00011260 <strerror@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3624]!	; 0xe28

0001126c <__ctype_tolower_loc@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3616]!	; 0xe20

00011278 <__gmon_start__@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3608]!	; 0xe18

00011284 <mempcpy@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3600]!	; 0xe10

00011290 <__ctype_b_loc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3592]!	; 0xe08

0001129c <getpid@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3584]!	; 0xe00

000112a8 <exit@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3576]!	; 0xdf8

000112b4 <strtoul@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3568]!	; 0xdf0

000112c0 <strlen@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3560]!	; 0xde8

000112cc <strchr@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3552]!	; 0xde0

000112d8 <fprintf@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3544]!	; 0xdd8

000112e4 <__errno_location@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3536]!	; 0xdd0

000112f0 <snprintf@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3528]!	; 0xdc8

000112fc <strerror_r@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3520]!	; 0xdc0

00011308 <setvbuf@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3512]!	; 0xdb8

00011314 <memset@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011320 <putchar@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3496]!	; 0xda8

0001132c <memchr@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3488]!	; 0xda0

00011338 <sendto@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3480]!	; 0xd98

00011344 <__overflow@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3472]!	; 0xd90

00011350 <setlocale@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3464]!	; 0xd88

0001135c <getnameinfo@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3456]!	; 0xd80

00011368 <strrchr@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3448]!	; 0xd78

00011374 <vfprintf@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3440]!	; 0xd70

00011380 <fputc@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3432]!	; 0xd68

0001138c <setuid@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3424]!	; 0xd60

00011398 <sscanf@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3416]!	; 0xd58

000113a4 <putc@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3408]!	; 0xd50

000113b0 <flockfile@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3400]!	; 0xd48

000113bc <vsnprintf@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #106496	; 0x1a000
   113c4:	ldr	pc, [ip, #3392]!	; 0xd40

000113c8 <recvmsg@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #106496	; 0x1a000
   113d0:	ldr	pc, [ip, #3384]!	; 0xd38

000113d4 <qsort@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #106496	; 0x1a000
   113dc:	ldr	pc, [ip, #3376]!	; 0xd30

000113e0 <freeaddrinfo@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #106496	; 0x1a000
   113e8:	ldr	pc, [ip, #3368]!	; 0xd28

000113ec <getaddrinfo@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #106496	; 0x1a000
   113f4:	ldr	pc, [ip, #3360]!	; 0xd20

000113f8 <inet_ntop@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #106496	; 0x1a000
   11400:	ldr	pc, [ip, #3352]!	; 0xd18

00011404 <socket@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #106496	; 0x1a000
   1140c:	ldr	pc, [ip, #3344]!	; 0xd10

00011410 <strncmp@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #106496	; 0x1a000
   11418:	ldr	pc, [ip, #3336]!	; 0xd08

0001141c <abort@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #106496	; 0x1a000
   11424:	ldr	pc, [ip, #3328]!	; 0xd00

00011428 <close@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #106496	; 0x1a000
   11430:	ldr	pc, [ip, #3320]!	; 0xcf8

00011434 <__assert_fail@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #106496	; 0x1a000
   1143c:	ldr	pc, [ip, #3312]!	; 0xcf0

Disassembly of section .text:

00011440 <argp_failure@@Base-0x3b40>:
   11440:	mov	fp, #0
   11444:	mov	lr, #0
   11448:	pop	{r1}		; (ldr r1, [sp], #4)
   1144c:	mov	r2, sp
   11450:	push	{r2}		; (str r2, [sp, #-4]!)
   11454:	push	{r0}		; (str r0, [sp, #-4]!)
   11458:	ldr	ip, [pc, #16]	; 11470 <__assert_fail@plt+0x3c>
   1145c:	push	{ip}		; (str ip, [sp, #-4]!)
   11460:	ldr	r0, [pc, #12]	; 11474 <__assert_fail@plt+0x40>
   11464:	ldr	r3, [pc, #12]	; 11478 <__assert_fail@plt+0x44>
   11468:	bl	11254 <__libc_start_main@plt>
   1146c:	bl	1141c <abort@plt>
   11470:	andeq	r9, r1, r8, lsl #24
   11474:	andeq	r2, r1, r8, lsr #17
   11478:	andeq	r9, r1, r8, lsr #23
   1147c:	ldr	r3, [pc, #20]	; 11498 <__assert_fail@plt+0x64>
   11480:	ldr	r2, [pc, #20]	; 1149c <__assert_fail@plt+0x68>
   11484:	add	r3, pc, r3
   11488:	ldr	r2, [r3, r2]
   1148c:	cmp	r2, #0
   11490:	bxeq	lr
   11494:	b	11278 <__gmon_start__@plt>
   11498:	andeq	sl, r1, r4, ror fp
   1149c:	andeq	r0, r0, r0, lsr r1
   114a0:	ldr	r3, [pc, #28]	; 114c4 <__assert_fail@plt+0x90>
   114a4:	ldr	r0, [pc, #28]	; 114c8 <__assert_fail@plt+0x94>
   114a8:	sub	r3, r3, r0
   114ac:	cmp	r3, #6
   114b0:	bxls	lr
   114b4:	ldr	r3, [pc, #16]	; 114cc <__assert_fail@plt+0x98>
   114b8:	cmp	r3, #0
   114bc:	bxeq	lr
   114c0:	bx	r3
   114c4:	ldrdeq	ip, [r2], -r3
   114c8:	ldrdeq	ip, [r2], -r0
   114cc:	andeq	r0, r0, r0
   114d0:	ldr	r1, [pc, #36]	; 114fc <__assert_fail@plt+0xc8>
   114d4:	ldr	r0, [pc, #36]	; 11500 <__assert_fail@plt+0xcc>
   114d8:	sub	r1, r1, r0
   114dc:	asr	r1, r1, #2
   114e0:	add	r1, r1, r1, lsr #31
   114e4:	asrs	r1, r1, #1
   114e8:	bxeq	lr
   114ec:	ldr	r3, [pc, #16]	; 11504 <__assert_fail@plt+0xd0>
   114f0:	cmp	r3, #0
   114f4:	bxeq	lr
   114f8:	bx	r3
   114fc:	ldrdeq	ip, [r2], -r0
   11500:	ldrdeq	ip, [r2], -r0
   11504:	andeq	r0, r0, r0
   11508:	push	{r4, lr}
   1150c:	ldr	r4, [pc, #24]	; 1152c <__assert_fail@plt+0xf8>
   11510:	ldrb	r3, [r4]
   11514:	cmp	r3, #0
   11518:	popne	{r4, pc}
   1151c:	bl	114a0 <__assert_fail@plt+0x6c>
   11520:	mov	r3, #1
   11524:	strb	r3, [r4]
   11528:	pop	{r4, pc}
   1152c:	andeq	ip, r2, r0, ror #7
   11530:	ldr	r0, [pc, #40]	; 11560 <__assert_fail@plt+0x12c>
   11534:	ldr	r3, [r0]
   11538:	cmp	r3, #0
   1153c:	bne	11544 <__assert_fail@plt+0x110>
   11540:	b	114d0 <__assert_fail@plt+0x9c>
   11544:	ldr	r3, [pc, #24]	; 11564 <__assert_fail@plt+0x130>
   11548:	cmp	r3, #0
   1154c:	beq	11540 <__assert_fail@plt+0x10c>
   11550:	push	{r4, lr}
   11554:	blx	r3
   11558:	pop	{r4, lr}
   1155c:	b	114d0 <__assert_fail@plt+0x9c>
   11560:	andeq	fp, r2, r4, lsl pc
   11564:	andeq	r0, r0, r0
   11568:	mov	r2, #1
   1156c:	ldr	r3, [pc, #4]	; 11578 <__assert_fail@plt+0x144>
   11570:	str	r2, [r3]
   11574:	bx	lr
   11578:	andeq	ip, r2, r4, ror #7
   1157c:	push	{r4, r5, lr}
   11580:	sub	sp, sp, #12
   11584:	mov	r4, r1
   11588:	cmp	r0, #112	; 0x70
   1158c:	beq	117d4 <__assert_fail@plt+0x3a0>
   11590:	bgt	11648 <__assert_fail@plt+0x214>
   11594:	cmp	r0, #102	; 0x66
   11598:	beq	11700 <__assert_fail@plt+0x2cc>
   1159c:	bgt	115c0 <__assert_fail@plt+0x18c>
   115a0:	cmp	r0, #99	; 0x63
   115a4:	beq	116c4 <__assert_fail@plt+0x290>
   115a8:	cmp	r0, #100	; 0x64
   115ac:	beq	116e8 <__assert_fail@plt+0x2b4>
   115b0:	cmp	r0, #84	; 0x54
   115b4:	beq	11828 <__assert_fail@plt+0x3f4>
   115b8:	mov	r0, #7
   115bc:	b	116e0 <__assert_fail@plt+0x2ac>
   115c0:	cmp	r0, #108	; 0x6c
   115c4:	beq	1174c <__assert_fail@plt+0x318>
   115c8:	cmp	r0, #110	; 0x6e
   115cc:	beq	117bc <__assert_fail@plt+0x388>
   115d0:	cmp	r0, #105	; 0x69
   115d4:	bne	115b8 <__assert_fail@plt+0x184>
   115d8:	ldr	r2, [pc, #708]	; 118a4 <__assert_fail@plt+0x470>
   115dc:	ldr	r3, [r2]
   115e0:	orr	r3, r3, #2
   115e4:	str	r3, [r2]
   115e8:	mov	r2, #0
   115ec:	mov	r1, r2
   115f0:	mov	r0, r4
   115f4:	bl	12c80 <__assert_fail@plt+0x184c>
   115f8:	mov	r3, #1000	; 0x3e8
   115fc:	mul	r0, r3, r0
   11600:	ldr	r3, [pc, #672]	; 118a8 <__assert_fail@plt+0x474>
   11604:	str	r0, [r3]
   11608:	ldr	r3, [pc, #668]	; 118ac <__assert_fail@plt+0x478>
   1160c:	ldrb	r3, [r3, #8]
   11610:	eor	r3, r3, #1
   11614:	cmp	r0, #199	; 0xc7
   11618:	movhi	r0, #0
   1161c:	andls	r0, r3, #1
   11620:	cmp	r0, #0
   11624:	moveq	r0, #0
   11628:	beq	116e0 <__assert_fail@plt+0x2ac>
   1162c:	mov	r3, r4
   11630:	ldr	r2, [pc, #632]	; 118b0 <__assert_fail@plt+0x47c>
   11634:	mov	r1, #0
   11638:	mov	r0, #1
   1163c:	bl	11224 <error@plt>
   11640:	mov	r0, #0
   11644:	b	116e0 <__assert_fail@plt+0x2ac>
   11648:	cmp	r0, #118	; 0x76
   1164c:	beq	11858 <__assert_fail@plt+0x424>
   11650:	bgt	11688 <__assert_fail@plt+0x254>
   11654:	cmp	r0, #114	; 0x72
   11658:	beq	11810 <__assert_fail@plt+0x3dc>
   1165c:	blt	117f8 <__assert_fail@plt+0x3c4>
   11660:	cmp	r0, #115	; 0x73
   11664:	bne	115b8 <__assert_fail@plt+0x184>
   11668:	mov	r2, #1
   1166c:	ldr	r1, [pc, #576]	; 118b4 <__assert_fail@plt+0x480>
   11670:	mov	r0, r4
   11674:	bl	12c80 <__assert_fail@plt+0x184c>
   11678:	ldr	r3, [pc, #568]	; 118b8 <__assert_fail@plt+0x484>
   1167c:	str	r0, [r3, #4]
   11680:	mov	r0, #0
   11684:	b	116e0 <__assert_fail@plt+0x2ac>
   11688:	cmp	r0, #256	; 0x100
   1168c:	beq	11870 <__assert_fail@plt+0x43c>
   11690:	ldr	r3, [pc, #548]	; 118bc <__assert_fail@plt+0x488>
   11694:	cmp	r0, r3
   11698:	beq	11890 <__assert_fail@plt+0x45c>
   1169c:	cmp	r0, #119	; 0x77
   116a0:	bne	115b8 <__assert_fail@plt+0x184>
   116a4:	mov	r2, #0
   116a8:	mvn	r1, #-2147483648	; 0x80000000
   116ac:	mov	r0, r4
   116b0:	bl	12c80 <__assert_fail@plt+0x184c>
   116b4:	ldr	r3, [pc, #508]	; 118b8 <__assert_fail@plt+0x484>
   116b8:	str	r0, [r3, #12]
   116bc:	mov	r0, #0
   116c0:	b	116e0 <__assert_fail@plt+0x2ac>
   116c4:	mov	r2, #0
   116c8:	mov	r1, r2
   116cc:	mov	r0, r4
   116d0:	bl	12c80 <__assert_fail@plt+0x184c>
   116d4:	ldr	r3, [pc, #464]	; 118ac <__assert_fail@plt+0x478>
   116d8:	str	r0, [r3, #4]
   116dc:	mov	r0, #0
   116e0:	add	sp, sp, #12
   116e4:	pop	{r4, r5, pc}
   116e8:	ldr	r2, [pc, #464]	; 118c0 <__assert_fail@plt+0x48c>
   116ec:	ldr	r3, [r2]
   116f0:	orr	r3, r3, #1
   116f4:	str	r3, [r2]
   116f8:	mov	r0, #0
   116fc:	b	116e0 <__assert_fail@plt+0x2ac>
   11700:	ldr	r3, [pc, #420]	; 118ac <__assert_fail@plt+0x478>
   11704:	ldrb	r3, [r3, #8]
   11708:	cmp	r3, #0
   1170c:	beq	11738 <__assert_fail@plt+0x304>
   11710:	ldr	r2, [pc, #396]	; 118a4 <__assert_fail@plt+0x470>
   11714:	ldr	r3, [r2]
   11718:	orr	r3, r3, #1
   1171c:	str	r3, [r2]
   11720:	mov	r1, #0
   11724:	ldr	r3, [pc, #408]	; 118c4 <__assert_fail@plt+0x490>
   11728:	ldr	r0, [r3]
   1172c:	bl	110f8 <setbuf@plt>
   11730:	mov	r0, #0
   11734:	b	116e0 <__assert_fail@plt+0x2ac>
   11738:	ldr	r2, [pc, #392]	; 118c8 <__assert_fail@plt+0x494>
   1173c:	mov	r1, #0
   11740:	mov	r0, #1
   11744:	bl	11224 <error@plt>
   11748:	b	11710 <__assert_fail@plt+0x2dc>
   1174c:	ldr	r3, [pc, #344]	; 118ac <__assert_fail@plt+0x478>
   11750:	ldrb	r3, [r3, #8]
   11754:	cmp	r3, #0
   11758:	beq	117a8 <__assert_fail@plt+0x374>
   1175c:	mov	r2, #0
   11760:	add	r1, sp, #4
   11764:	mov	r0, r4
   11768:	bl	112b4 <strtoul@plt>
   1176c:	ldr	r3, [pc, #312]	; 118ac <__assert_fail@plt+0x478>
   11770:	str	r0, [r3, #12]
   11774:	ldr	r3, [sp, #4]
   11778:	ldrb	r3, [r3]
   1177c:	cmp	r3, #0
   11780:	bne	11790 <__assert_fail@plt+0x35c>
   11784:	cmp	r0, #0
   11788:	movge	r0, #0
   1178c:	bge	116e0 <__assert_fail@plt+0x2ac>
   11790:	ldr	r2, [pc, #308]	; 118cc <__assert_fail@plt+0x498>
   11794:	mov	r1, #0
   11798:	mov	r0, #1
   1179c:	bl	11224 <error@plt>
   117a0:	mov	r0, #0
   117a4:	b	116e0 <__assert_fail@plt+0x2ac>
   117a8:	ldr	r2, [pc, #288]	; 118d0 <__assert_fail@plt+0x49c>
   117ac:	mov	r1, #0
   117b0:	mov	r0, #1
   117b4:	bl	11224 <error@plt>
   117b8:	b	1175c <__assert_fail@plt+0x328>
   117bc:	ldr	r2, [pc, #224]	; 118a4 <__assert_fail@plt+0x470>
   117c0:	ldr	r3, [r2]
   117c4:	orr	r3, r3, #4
   117c8:	str	r3, [r2]
   117cc:	mov	r0, #0
   117d0:	b	116e0 <__assert_fail@plt+0x2ac>
   117d4:	ldr	r5, [pc, #248]	; 118d4 <__assert_fail@plt+0x4a0>
   117d8:	mov	r2, r5
   117dc:	ldr	r1, [pc, #212]	; 118b8 <__assert_fail@plt+0x484>
   117e0:	mov	r0, r4
   117e4:	bl	12de8 <__assert_fail@plt+0x19b4>
   117e8:	ldr	r3, [pc, #232]	; 118d8 <__assert_fail@plt+0x4a4>
   117ec:	str	r5, [r3]
   117f0:	mov	r0, #0
   117f4:	b	116e0 <__assert_fail@plt+0x2ac>
   117f8:	ldr	r2, [pc, #164]	; 118a4 <__assert_fail@plt+0x470>
   117fc:	ldr	r3, [r2]
   11800:	orr	r3, r3, #8
   11804:	str	r3, [r2]
   11808:	mov	r0, #0
   1180c:	b	116e0 <__assert_fail@plt+0x2ac>
   11810:	ldr	r2, [pc, #168]	; 118c0 <__assert_fail@plt+0x48c>
   11814:	ldr	r3, [r2]
   11818:	orr	r3, r3, #5
   1181c:	str	r3, [r2]
   11820:	mov	r0, #0
   11824:	b	116e0 <__assert_fail@plt+0x2ac>
   11828:	ldr	r2, [pc, #116]	; 118a4 <__assert_fail@plt+0x470>
   1182c:	ldr	r3, [r2]
   11830:	orr	r3, r3, #256	; 0x100
   11834:	str	r3, [r2]
   11838:	mov	r2, #0
   1183c:	mov	r1, r2
   11840:	mov	r0, r4
   11844:	bl	12c80 <__assert_fail@plt+0x184c>
   11848:	ldr	r3, [pc, #104]	; 118b8 <__assert_fail@plt+0x484>
   1184c:	str	r0, [r3, #8]
   11850:	mov	r0, #0
   11854:	b	116e0 <__assert_fail@plt+0x2ac>
   11858:	ldr	r2, [pc, #68]	; 118a4 <__assert_fail@plt+0x470>
   1185c:	ldr	r3, [r2]
   11860:	orr	r3, r3, #32
   11864:	str	r3, [r2]
   11868:	mov	r0, #0
   1186c:	b	116e0 <__assert_fail@plt+0x2ac>
   11870:	mov	r2, #0
   11874:	mov	r1, #255	; 0xff
   11878:	mov	r0, r4
   1187c:	bl	12c80 <__assert_fail@plt+0x184c>
   11880:	ldr	r3, [pc, #36]	; 118ac <__assert_fail@plt+0x478>
   11884:	str	r0, [r3, #32]
   11888:	mov	r0, #0
   1188c:	b	116e0 <__assert_fail@plt+0x2ac>
   11890:	ldr	r1, [pc, #68]	; 118dc <__assert_fail@plt+0x4a8>
   11894:	mov	r0, r2
   11898:	bl	163fc <argp_error@@Base>
   1189c:	mov	r0, #7
   118a0:	b	116e0 <__assert_fail@plt+0x2ac>
   118a4:	andeq	ip, r2, ip, asr #8
   118a8:	andeq	ip, r2, r4, asr r4
   118ac:	andeq	ip, r2, r4, ror #7
   118b0:			; <UNDEFINED> instruction: 0x00019cb8
   118b4:	strdeq	pc, [r0], -r7
   118b8:	andeq	ip, r2, ip, lsr r1
   118bc:	tsteq	r0, r2
   118c0:	andeq	ip, r2, r0, asr r4
   118c4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   118c8:	muleq	r1, r8, ip
   118cc:	strdeq	r9, [r1], -r4
   118d0:	ldrdeq	r9, [r1], -r4
   118d4:	strdeq	ip, [r2], -r4
   118d8:	andeq	ip, r2, r4, asr #8
   118dc:	andeq	r9, r1, ip, lsl #26
   118e0:	push	{r4, lr}
   118e4:	ldr	r1, [r0, #4]
   118e8:	ldr	r0, [pc, #4]	; 118f4 <__assert_fail@plt+0x4c0>
   118ec:	bl	11128 <printf@plt>
   118f0:	pop	{r4, pc}
   118f4:	andeq	r9, r1, r4, lsr #26
   118f8:	push	{r4, r5, r6, r7, lr}
   118fc:	vpush	{d8}
   11900:	sub	sp, sp, #28
   11904:	ldr	r3, [pc, #332]	; 11a58 <__assert_fail@plt+0x624>
   11908:	ldr	r0, [r3]
   1190c:	bl	11134 <fflush@plt>
   11910:	ldr	r4, [pc, #324]	; 11a5c <__assert_fail@plt+0x628>
   11914:	ldr	r3, [r4, #36]	; 0x24
   11918:	ldr	r1, [r3, #52]	; 0x34
   1191c:	ldr	r0, [pc, #316]	; 11a60 <__assert_fail@plt+0x62c>
   11920:	bl	11128 <printf@plt>
   11924:	ldr	r3, [r4, #36]	; 0x24
   11928:	ldr	r1, [r3, #112]	; 0x70
   1192c:	ldr	r0, [pc, #304]	; 11a64 <__assert_fail@plt+0x630>
   11930:	bl	11128 <printf@plt>
   11934:	ldr	r3, [r4, #36]	; 0x24
   11938:	ldr	r1, [r3, #116]	; 0x74
   1193c:	ldr	r0, [pc, #292]	; 11a68 <__assert_fail@plt+0x634>
   11940:	bl	11128 <printf@plt>
   11944:	ldr	r3, [r4, #36]	; 0x24
   11948:	ldr	r1, [r3, #120]	; 0x78
   1194c:	cmp	r1, #0
   11950:	bne	119dc <__assert_fail@plt+0x5a8>
   11954:	ldr	r3, [pc, #256]	; 11a5c <__assert_fail@plt+0x628>
   11958:	ldr	r3, [r3, #36]	; 0x24
   1195c:	ldr	r1, [r3, #112]	; 0x70
   11960:	cmp	r1, #0
   11964:	beq	11990 <__assert_fail@plt+0x55c>
   11968:	ldr	r0, [r3, #116]	; 0x74
   1196c:	cmp	r1, r0
   11970:	bcc	119e8 <__assert_fail@plt+0x5b4>
   11974:	sub	r0, r1, r0
   11978:	mov	r3, #100	; 0x64
   1197c:	mul	r0, r3, r0
   11980:	bl	1974c <argp_parse@@Base+0x2c24>
   11984:	mov	r1, r0
   11988:	ldr	r0, [pc, #220]	; 11a6c <__assert_fail@plt+0x638>
   1198c:	bl	11128 <printf@plt>
   11990:	mov	r0, #10
   11994:	bl	11320 <putchar@plt>
   11998:	ldr	r3, [pc, #188]	; 11a5c <__assert_fail@plt+0x628>
   1199c:	ldr	r2, [r3, #36]	; 0x24
   119a0:	ldr	r3, [r2, #116]	; 0x74
   119a4:	cmp	r3, #0
   119a8:	beq	119bc <__assert_fail@plt+0x588>
   119ac:	ldr	r1, [pc, #188]	; 11a70 <__assert_fail@plt+0x63c>
   119b0:	ldr	r1, [r1, #4]
   119b4:	cmp	r1, #7
   119b8:	bhi	119f4 <__assert_fail@plt+0x5c0>
   119bc:	ldr	r3, [pc, #152]	; 11a5c <__assert_fail@plt+0x628>
   119c0:	ldr	r3, [r3, #36]	; 0x24
   119c4:	ldr	r0, [r3, #116]	; 0x74
   119c8:	clz	r0, r0
   119cc:	lsr	r0, r0, #5
   119d0:	add	sp, sp, #28
   119d4:	vpop	{d8}
   119d8:	pop	{r4, r5, r6, r7, pc}
   119dc:	ldr	r0, [pc, #144]	; 11a74 <__assert_fail@plt+0x640>
   119e0:	bl	11128 <printf@plt>
   119e4:	b	11954 <__assert_fail@plt+0x520>
   119e8:	ldr	r0, [pc, #136]	; 11a78 <__assert_fail@plt+0x644>
   119ec:	bl	11128 <printf@plt>
   119f0:	b	11990 <__assert_fail@plt+0x55c>
   119f4:	ldr	r1, [r2, #68]	; 0x44
   119f8:	ldr	r2, [r2, #120]	; 0x78
   119fc:	add	r3, r3, r2
   11a00:	vmov	s15, r3
   11a04:	vcvt.f64.u32	d7, s15
   11a08:	vldr	d6, [r1, #16]
   11a0c:	vdiv.f64	d8, d6, d7
   11a10:	ldrd	r4, [r1]
   11a14:	ldrd	r6, [r1, #8]
   11a18:	vldr	d6, [r1, #24]
   11a1c:	vdiv.f64	d0, d6, d7
   11a20:	vldr	d1, [pc, #40]	; 11a50 <__assert_fail@plt+0x61c>
   11a24:	vmls.f64	d0, d8, d8
   11a28:	bl	12f00 <__assert_fail@plt+0x1acc>
   11a2c:	vstr	d0, [sp, #16]
   11a30:	strd	r6, [sp, #8]
   11a34:	vstr	d8, [sp]
   11a38:	mov	r2, r4
   11a3c:	mov	r3, r5
   11a40:	ldr	r0, [pc, #52]	; 11a7c <__assert_fail@plt+0x648>
   11a44:	bl	11128 <printf@plt>
   11a48:	b	119bc <__assert_fail@plt+0x588>
   11a4c:	nop			; (mov r0, r0)
   11a50:	rscsle	sl, r1, #252, 18	; 0x3f0000
   11a54:	svccc	0x0040624d
   11a58:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11a5c:	andeq	ip, r2, r4, ror #7
   11a60:	andeq	r9, r1, ip, lsr sp
   11a64:	andeq	r9, r1, r8, asr sp
   11a68:	andeq	r9, r1, r4, ror sp
   11a6c:	andeq	r9, r1, r4, asr #27
   11a70:	andeq	ip, r2, ip, lsr r1
   11a74:	andeq	r9, r1, ip, lsl #27
   11a78:	andeq	r9, r1, r0, lsr #27
   11a7c:	ldrdeq	r9, [r1], -r8
   11a80:	push	{r4, lr}
   11a84:	mov	r4, r0
   11a88:	ldr	r0, [pc, #80]	; 11ae0 <__assert_fail@plt+0x6ac>
   11a8c:	bl	11128 <printf@plt>
   11a90:	ldrb	r1, [r4, #1]
   11a94:	ldr	r3, [pc, #72]	; 11ae4 <__assert_fail@plt+0x6b0>
   11a98:	ldr	r3, [r3, #16]
   11a9c:	cmp	r3, r1
   11aa0:	beq	11ad0 <__assert_fail@plt+0x69c>
   11aa4:	ldr	r3, [pc, #60]	; 11ae8 <__assert_fail@plt+0x6b4>
   11aa8:	add	r0, r3, #16
   11aac:	ldr	r2, [r3]
   11ab0:	cmp	r2, r1
   11ab4:	beq	11ad4 <__assert_fail@plt+0x6a0>
   11ab8:	add	r3, r3, #8
   11abc:	cmp	r3, r0
   11ac0:	bcc	11aac <__assert_fail@plt+0x678>
   11ac4:	ldr	r0, [pc, #32]	; 11aec <__assert_fail@plt+0x6b8>
   11ac8:	bl	11128 <printf@plt>
   11acc:	pop	{r4, pc}
   11ad0:	ldr	r3, [pc, #24]	; 11af0 <__assert_fail@plt+0x6bc>
   11ad4:	ldr	r0, [r3, #4]
   11ad8:	bl	1123c <puts@plt>
   11adc:	pop	{r4, pc}
   11ae0:	andeq	r9, r1, r0, lsl lr
   11ae4:	andeq	ip, r2, ip, lsr r1
   11ae8:	andeq	ip, r2, r4, asr r1
   11aec:	andeq	r9, r1, r4, lsr #28
   11af0:	andeq	ip, r2, ip, asr #2
   11af4:	push	{r4, lr}
   11af8:	mov	r4, r0
   11afc:	ldr	r0, [pc, #68]	; 11b48 <__assert_fail@plt+0x714>
   11b00:	bl	11128 <printf@plt>
   11b04:	ldrb	r1, [r4, #1]
   11b08:	ldr	r3, [pc, #60]	; 11b4c <__assert_fail@plt+0x718>
   11b0c:	ldr	r3, [r3, #40]	; 0x28
   11b10:	cmp	r3, r1
   11b14:	beq	11b38 <__assert_fail@plt+0x704>
   11b18:	ldr	r3, [pc, #44]	; 11b4c <__assert_fail@plt+0x718>
   11b1c:	ldr	r3, [r3, #48]	; 0x30
   11b20:	cmp	r3, r1
   11b24:	ldreq	r3, [pc, #36]	; 11b50 <__assert_fail@plt+0x71c>
   11b28:	beq	11b3c <__assert_fail@plt+0x708>
   11b2c:	ldr	r0, [pc, #32]	; 11b54 <__assert_fail@plt+0x720>
   11b30:	bl	11128 <printf@plt>
   11b34:	pop	{r4, pc}
   11b38:	ldr	r3, [pc, #24]	; 11b58 <__assert_fail@plt+0x724>
   11b3c:	ldr	r0, [r3, #4]
   11b40:	bl	1123c <puts@plt>
   11b44:	pop	{r4, pc}
   11b48:	andeq	r9, r1, r8, lsr lr
   11b4c:	andeq	ip, r2, ip, lsr r1
   11b50:	andeq	ip, r2, ip, ror #2
   11b54:	andeq	r9, r1, r4, lsr #28
   11b58:	andeq	ip, r2, r4, ror #2
   11b5c:	push	{r4, lr}
   11b60:	mov	r4, r0
   11b64:	ldr	r0, [pc, #80]	; 11bbc <__assert_fail@plt+0x788>
   11b68:	bl	11128 <printf@plt>
   11b6c:	ldrb	r1, [r4, #1]
   11b70:	ldr	r3, [pc, #72]	; 11bc0 <__assert_fail@plt+0x78c>
   11b74:	ldr	r3, [r3, #56]	; 0x38
   11b78:	cmp	r3, r1
   11b7c:	beq	11bac <__assert_fail@plt+0x778>
   11b80:	ldr	r3, [pc, #60]	; 11bc4 <__assert_fail@plt+0x790>
   11b84:	add	r0, r3, #32
   11b88:	ldr	r2, [r3]
   11b8c:	cmp	r2, r1
   11b90:	beq	11bb0 <__assert_fail@plt+0x77c>
   11b94:	add	r3, r3, #8
   11b98:	cmp	r3, r0
   11b9c:	bcc	11b88 <__assert_fail@plt+0x754>
   11ba0:	ldr	r0, [pc, #32]	; 11bc8 <__assert_fail@plt+0x794>
   11ba4:	bl	11128 <printf@plt>
   11ba8:	pop	{r4, pc}
   11bac:	ldr	r3, [pc, #24]	; 11bcc <__assert_fail@plt+0x798>
   11bb0:	ldr	r0, [r3, #4]
   11bb4:	bl	1123c <puts@plt>
   11bb8:	pop	{r4, pc}
   11bbc:	andeq	r9, r1, r8, asr #28
   11bc0:	andeq	ip, r2, ip, lsr r1
   11bc4:	andeq	ip, r2, ip, ror r1
   11bc8:	andeq	r9, r1, r4, lsr #28
   11bcc:	andeq	ip, r2, r4, ror r1
   11bd0:	push	{r4, r5, r6, lr}
   11bd4:	sub	sp, sp, #16
   11bd8:	mov	r4, r0
   11bdc:	ldr	r3, [pc, #340]	; 11d38 <__assert_fail@plt+0x904>
   11be0:	ldr	r3, [r3, #4]
   11be4:	cmp	r3, #7
   11be8:	movls	r2, #0
   11bec:	bhi	11cec <__assert_fail@plt+0x8b8>
   11bf0:	ldr	r3, [pc, #324]	; 11d3c <__assert_fail@plt+0x908>
   11bf4:	ldr	r1, [r3]
   11bf8:	cmp	r1, #0
   11bfc:	beq	11c20 <__assert_fail@plt+0x7ec>
   11c00:	ldr	r3, [pc, #304]	; 11d38 <__assert_fail@plt+0x904>
   11c04:	ldr	r3, [r3, #4]
   11c08:	cmp	r2, r3
   11c0c:	subcc	r3, r3, r2
   11c10:	mov	r0, #1
   11c14:	str	r0, [sp]
   11c18:	mov	r0, r4
   11c1c:	bl	13038 <__assert_fail@plt+0x1c04>
   11c20:	mov	r1, #1
   11c24:	mov	r0, r4
   11c28:	bl	12fb8 <__assert_fail@plt+0x1b84>
   11c2c:	subs	r6, r0, #0
   11c30:	bne	11d1c <__assert_fail@plt+0x8e8>
   11c34:	ldr	r5, [r4, #56]	; 0x38
   11c38:	add	r5, r5, #8
   11c3c:	ldr	r1, [r4, #72]	; 0x48
   11c40:	lsl	r1, r1, #3
   11c44:	ldr	r0, [r4, #112]	; 0x70
   11c48:	bl	19938 <argp_parse@@Base+0x2e10>
   11c4c:	ldr	r2, [r4, #76]	; 0x4c
   11c50:	and	r0, r1, #7
   11c54:	ldrb	r3, [r2, r1, asr #3]
   11c58:	mov	ip, #1
   11c5c:	bic	r3, r3, ip, lsl r0
   11c60:	strb	r3, [r2, r1, asr #3]
   11c64:	ldr	r2, [r4, #80]	; 0x50
   11c68:	mvn	r3, #127	; 0x7f
   11c6c:	strb	r3, [r2]
   11c70:	mov	r3, #0
   11c74:	strb	r3, [r2, #1]
   11c78:	strh	r3, [r2, #2]
   11c7c:	ldr	r1, [r4, #60]	; 0x3c
   11c80:	rev16	r1, r1
   11c84:	strh	r1, [r2, #4]
   11c88:	ldr	r1, [r4, #112]	; 0x70
   11c8c:	rev16	r1, r1
   11c90:	strh	r1, [r2, #6]
   11c94:	add	r2, r4, #24
   11c98:	mov	r1, #28
   11c9c:	str	r1, [sp, #4]
   11ca0:	str	r2, [sp]
   11ca4:	mov	r2, r5
   11ca8:	ldr	r1, [r4, #80]	; 0x50
   11cac:	ldr	r0, [r4]
   11cb0:	bl	11338 <sendto@plt>
   11cb4:	subs	r3, r0, #0
   11cb8:	blt	11d1c <__assert_fail@plt+0x8e8>
   11cbc:	ldr	r2, [r4, #112]	; 0x70
   11cc0:	add	r2, r2, #1
   11cc4:	str	r2, [r4, #112]	; 0x70
   11cc8:	cmp	r5, r3
   11ccc:	beq	11ce0 <__assert_fail@plt+0x8ac>
   11cd0:	mov	r2, r5
   11cd4:	ldr	r1, [r4, #52]	; 0x34
   11cd8:	ldr	r0, [pc, #96]	; 11d40 <__assert_fail@plt+0x90c>
   11cdc:	bl	11128 <printf@plt>
   11ce0:	mov	r0, r6
   11ce4:	add	sp, sp, #16
   11ce8:	pop	{r4, r5, r6, pc}
   11cec:	mov	r1, #0
   11cf0:	add	r0, sp, #8
   11cf4:	bl	11218 <gettimeofday@plt>
   11cf8:	mov	r3, #1
   11cfc:	str	r3, [sp]
   11d00:	mov	r3, #8
   11d04:	mov	r2, #0
   11d08:	add	r1, sp, r3
   11d0c:	mov	r0, r4
   11d10:	bl	13038 <__assert_fail@plt+0x1c04>
   11d14:	mov	r2, #8
   11d18:	b	11bf0 <__assert_fail@plt+0x7bc>
   11d1c:	bl	112e4 <__errno_location@plt>
   11d20:	ldr	r2, [pc, #28]	; 11d44 <__assert_fail@plt+0x910>
   11d24:	ldr	r1, [r0]
   11d28:	mov	r0, #1
   11d2c:	bl	11224 <error@plt>
   11d30:	mvn	r6, #0
   11d34:	b	11ce0 <__assert_fail@plt+0x8ac>
   11d38:	andeq	ip, r2, ip, lsr r1
   11d3c:	andeq	ip, r2, r8, asr #8
   11d40:	andeq	r9, r1, r4, ror #28
   11d44:	andeq	r9, r1, r8, lsl #29
   11d48:	push	{r4, r5, r6, r7, r8, r9, lr}
   11d4c:	sub	sp, sp, #124	; 0x7c
   11d50:	mov	r6, r0
   11d54:	mov	r3, #46	; 0x2e
   11d58:	add	r2, sp, #24
   11d5c:	add	r1, r0, #32
   11d60:	mov	r0, #10
   11d64:	bl	113f8 <inet_ntop@plt>
   11d68:	mov	r3, #46	; 0x2e
   11d6c:	add	r2, sp, #72	; 0x48
   11d70:	add	r1, r6, #16
   11d74:	mov	r0, #10
   11d78:	bl	113f8 <inet_ntop@plt>
   11d7c:	ldr	r0, [pc, #268]	; 11e90 <__assert_fail@plt+0xa5c>
   11d80:	bl	11128 <printf@plt>
   11d84:	add	r5, r6, #7
   11d88:	mov	r4, #0
   11d8c:	ldr	r9, [pc, #256]	; 11e94 <__assert_fail@plt+0xa60>
   11d90:	ldr	r8, [pc, #256]	; 11e98 <__assert_fail@plt+0xa64>
   11d94:	ldr	r7, [pc, #256]	; 11e9c <__assert_fail@plt+0xa68>
   11d98:	and	r2, r4, #1
   11d9c:	cmp	r2, #0
   11da0:	movne	r2, r9
   11da4:	moveq	r2, r8
   11da8:	ldrb	r1, [r5, #1]!
   11dac:	mov	r0, r7
   11db0:	bl	11128 <printf@plt>
   11db4:	add	r4, r4, #1
   11db8:	cmp	r4, #8
   11dbc:	bne	11d98 <__assert_fail@plt+0x964>
   11dc0:	ldr	r0, [pc, #216]	; 11ea0 <__assert_fail@plt+0xa6c>
   11dc4:	bl	1123c <puts@plt>
   11dc8:	ldr	r0, [pc, #212]	; 11ea4 <__assert_fail@plt+0xa70>
   11dcc:	bl	1123c <puts@plt>
   11dd0:	ldr	r1, [r6, #8]
   11dd4:	rev	r1, r1
   11dd8:	ldrh	r3, [r6, #12]
   11ddc:	rev16	r3, r3
   11de0:	uxth	r3, r3
   11de4:	lsr	r2, r1, #20
   11de8:	add	r0, sp, #24
   11dec:	str	r0, [sp, #16]
   11df0:	add	r0, sp, #72	; 0x48
   11df4:	str	r0, [sp, #12]
   11df8:	ldrb	r0, [r6, #15]
   11dfc:	str	r0, [sp, #8]
   11e00:	ldrb	r0, [r6, #14]
   11e04:	str	r0, [sp, #4]
   11e08:	str	r3, [sp]
   11e0c:	bic	r3, r1, #-16777216	; 0xff000000
   11e10:	bic	r3, r3, #15728640	; 0xf00000
   11e14:	uxtb	r2, r2
   11e18:	lsr	r1, r1, #28
   11e1c:	ldr	r0, [pc, #132]	; 11ea8 <__assert_fail@plt+0xa74>
   11e20:	bl	11128 <printf@plt>
   11e24:	ldrb	r3, [r6, #14]
   11e28:	cmp	r3, #58	; 0x3a
   11e2c:	beq	11e40 <__assert_fail@plt+0xa0c>
   11e30:	mov	r0, #10
   11e34:	bl	11320 <putchar@plt>
   11e38:	add	sp, sp, #124	; 0x7c
   11e3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11e40:	ldrh	r3, [r6, #12]
   11e44:	rev16	r3, r3
   11e48:	uxth	r3, r3
   11e4c:	ldrb	r2, [r6, #49]	; 0x31
   11e50:	ldrb	r1, [r6, #48]	; 0x30
   11e54:	ldr	r0, [pc, #80]	; 11eac <__assert_fail@plt+0xa78>
   11e58:	bl	11128 <printf@plt>
   11e5c:	ldrb	r3, [r6, #48]	; 0x30
   11e60:	sub	r3, r3, #128	; 0x80
   11e64:	cmp	r3, #1
   11e68:	bhi	11e30 <__assert_fail@plt+0x9fc>
   11e6c:	ldrh	r1, [r6, #52]	; 0x34
   11e70:	rev16	r1, r1
   11e74:	ldrh	r2, [r6, #54]	; 0x36
   11e78:	rev16	r2, r2
   11e7c:	uxth	r2, r2
   11e80:	uxth	r1, r1
   11e84:	ldr	r0, [pc, #36]	; 11eb0 <__assert_fail@plt+0xa7c>
   11e88:	bl	11128 <printf@plt>
   11e8c:	b	11e30 <__assert_fail@plt+0x9fc>
   11e90:	muleq	r1, r8, lr
   11e94:	andeq	r9, r1, r8, lsr #29
   11e98:	andeq	sl, r1, r8, ror #31
   11e9c:	andeq	r9, r1, ip, lsr #29
   11ea0:			; <UNDEFINED> instruction: 0x00019eb4
   11ea4:	andeq	r9, r1, r0, asr #29
   11ea8:	andeq	r9, r1, r4, ror #29
   11eac:	andeq	r9, r1, ip, lsl #30
   11eb0:	andeq	r9, r1, r4, lsr pc
   11eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb8:	vpush	{d8-d10}
   11ebc:	sub	sp, sp, #1824	; 0x720
   11ec0:	sub	sp, sp, #4
   11ec4:	mov	r5, r0
   11ec8:	ldr	r3, [pc, #1444]	; 12474 <__assert_fail@plt+0x1040>
   11ecc:	ldr	r3, [r3]
   11ed0:	and	r3, r3, #3
   11ed4:	cmp	r3, #3
   11ed8:	beq	120f4 <__assert_fail@plt+0xcc0>
   11edc:	add	r7, sp, #1536	; 0x600
   11ee0:	mov	r6, #32
   11ee4:	mov	r2, r6
   11ee8:	mov	r1, #0
   11eec:	mov	r0, r7
   11ef0:	bl	11314 <memset@plt>
   11ef4:	ldr	r2, [pc, #1308]	; 12418 <__assert_fail@plt+0xfe4>
   11ef8:	ldr	r3, [pc, #1308]	; 1241c <__assert_fail@plt+0xfe8>
   11efc:	add	r1, sp, #1536	; 0x600
   11f00:	strd	r2, [r1]
   11f04:	ldr	r3, [pc, #1300]	; 12420 <__assert_fail@plt+0xfec>
   11f08:	ldr	r4, [r3, #36]	; 0x24
   11f0c:	ldr	r3, [pc, #1296]	; 12424 <__assert_fail@plt+0xff0>
   11f10:	ldr	r3, [r3, #4]
   11f14:	str	r3, [r4, #56]	; 0x38
   11f18:	str	r7, [r4, #68]	; 0x44
   11f1c:	mov	r2, r6
   11f20:	mov	r1, #0
   11f24:	add	r0, sp, #512	; 0x200
   11f28:	bl	11314 <memset@plt>
   11f2c:	mov	r3, #10
   11f30:	str	r3, [sp, #516]	; 0x204
   11f34:	mov	r3, #194	; 0xc2
   11f38:	str	r3, [sp, #512]	; 0x200
   11f3c:	add	r3, sp, #256	; 0x100
   11f40:	add	r2, sp, #512	; 0x200
   11f44:	mov	r1, #0
   11f48:	mov	r0, r5
   11f4c:	bl	113ec <getaddrinfo@plt>
   11f50:	cmp	r0, #0
   11f54:	bne	12108 <__assert_fail@plt+0xcd4>
   11f58:	ldr	r6, [sp, #256]	; 0x100
   11f5c:	ldr	r2, [r6, #16]
   11f60:	ldr	r1, [r6, #20]
   11f64:	add	r0, r4, #24
   11f68:	bl	11188 <memcpy@plt>
   11f6c:	ldr	r0, [r6, #24]
   11f70:	cmp	r0, #0
   11f74:	moveq	r0, r5
   11f78:	bl	111dc <strdup@plt>
   11f7c:	str	r0, [r4, #52]	; 0x34
   11f80:	ldr	r0, [sp, #256]	; 0x100
   11f84:	bl	113e0 <freeaddrinfo@plt>
   11f88:	ldr	r3, [r4, #52]	; 0x34
   11f8c:	cmp	r3, #0
   11f90:	beq	12110 <__assert_fail@plt+0xcdc>
   11f94:	ldr	r3, [pc, #1156]	; 12420 <__assert_fail@plt+0xfec>
   11f98:	ldr	r0, [r3, #36]	; 0x24
   11f9c:	mov	r3, #1
   11fa0:	str	r3, [sp, #8]
   11fa4:	mov	r3, #0
   11fa8:	str	r3, [sp, #4]
   11fac:	str	r3, [sp]
   11fb0:	mov	r3, #256	; 0x100
   11fb4:	add	r2, sp, #1568	; 0x620
   11fb8:	mov	r1, #28
   11fbc:	add	r0, r0, #24
   11fc0:	bl	1135c <getnameinfo@plt>
   11fc4:	cmp	r0, #0
   11fc8:	beq	11fec <__assert_fail@plt+0xbb8>
   11fcc:	cmn	r0, #11
   11fd0:	beq	12128 <__assert_fail@plt+0xcf4>
   11fd4:	bl	11170 <gai_strerror@plt>
   11fd8:	mov	r3, r0
   11fdc:	ldr	r2, [pc, #1092]	; 12428 <__assert_fail@plt+0xff4>
   11fe0:	mov	r1, #0
   11fe4:	mov	r0, #1
   11fe8:	bl	11224 <error@plt>
   11fec:	ldr	r3, [pc, #1068]	; 12420 <__assert_fail@plt+0xfec>
   11ff0:	ldr	r1, [r3, #36]	; 0x24
   11ff4:	ldr	r3, [pc, #1064]	; 12424 <__assert_fail@plt+0xff0>
   11ff8:	ldr	r3, [r3, #4]
   11ffc:	add	r2, sp, #1568	; 0x620
   12000:	ldr	r1, [r1, #52]	; 0x34
   12004:	ldr	r0, [pc, #1056]	; 1242c <__assert_fail@plt+0xff8>
   12008:	bl	11128 <printf@plt>
   1200c:	ldr	r3, [pc, #1120]	; 12474 <__assert_fail@plt+0x1040>
   12010:	ldr	r3, [r3]
   12014:	tst	r3, #32
   12018:	bne	12138 <__assert_fail@plt+0xd04>
   1201c:	mov	r0, #10
   12020:	bl	11320 <putchar@plt>
   12024:	ldr	r4, [pc, #1012]	; 12420 <__assert_fail@plt+0xfec>
   12028:	ldr	sl, [r4, #36]	; 0x24
   1202c:	ldr	r1, [pc, #1020]	; 12430 <__assert_fail@plt+0xffc>
   12030:	mov	r0, #2
   12034:	bl	11194 <signal@plt>
   12038:	ldr	r3, [sl]
   1203c:	add	r3, r3, #1
   12040:	str	r3, [sp, #16]
   12044:	mov	r3, #0
   12048:	str	r3, [sp, #52]	; 0x34
   1204c:	add	r2, sp, #52	; 0x34
   12050:	str	r3, [r2, #4]
   12054:	str	r3, [sp, #68]	; 0x44
   12058:	str	r3, [sp, #72]	; 0x48
   1205c:	add	r2, sp, #76	; 0x4c
   12060:	str	r2, [sp, #20]
   12064:	str	r3, [sp, #76]	; 0x4c
   12068:	str	r3, [r2, #4]
   1206c:	ldr	r3, [r4, #12]
   12070:	cmp	r3, #0
   12074:	beq	12098 <__assert_fail@plt+0xc64>
   12078:	mov	r4, #0
   1207c:	ldr	r5, [pc, #924]	; 12420 <__assert_fail@plt+0xfec>
   12080:	mov	r0, sl
   12084:	bl	11bd0 <__assert_fail@plt+0x79c>
   12088:	add	r4, r4, #1
   1208c:	ldr	r3, [r5, #12]
   12090:	cmp	r4, r3
   12094:	bcc	12080 <__assert_fail@plt+0xc4c>
   12098:	ldr	r3, [pc, #980]	; 12474 <__assert_fail@plt+0x1040>
   1209c:	ldr	r3, [r3]
   120a0:	tst	r3, #1
   120a4:	beq	12154 <__assert_fail@plt+0xd20>
   120a8:	ldr	r3, [pc, #900]	; 12434 <__assert_fail@plt+0x1000>
   120ac:	str	r3, [sp, #72]	; 0x48
   120b0:	mov	r1, #0
   120b4:	add	r0, sp, #60	; 0x3c
   120b8:	bl	11218 <gettimeofday@plt>
   120bc:	mov	r0, sl
   120c0:	bl	11bd0 <__assert_fail@plt+0x79c>
   120c4:	mov	r3, #0
   120c8:	str	r3, [sp, #24]
   120cc:	str	r3, [sp, #20]
   120d0:	str	r3, [sp, #36]	; 0x24
   120d4:	ldr	r8, [pc, #836]	; 12420 <__assert_fail@plt+0xfec>
   120d8:	ldr	r4, [pc, #856]	; 12438 <__assert_fail@plt+0x1004>
   120dc:	ldr	fp, [pc, #832]	; 12424 <__assert_fail@plt+0xff0>
   120e0:	add	r3, fp, #128	; 0x80
   120e4:	str	r3, [sp, #44]	; 0x2c
   120e8:	vldr	d10, [pc, #792]	; 12408 <__assert_fail@plt+0xfd4>
   120ec:	vldr	d9, [pc, #796]	; 12410 <__assert_fail@plt+0xfdc>
   120f0:	b	12728 <__assert_fail@plt+0x12f4>
   120f4:	ldr	r2, [pc, #832]	; 1243c <__assert_fail@plt+0x1008>
   120f8:	mov	r1, #0
   120fc:	mov	r0, #1
   12100:	bl	11224 <error@plt>
   12104:	b	11edc <__assert_fail@plt+0xaa8>
   12108:	mov	r0, #0
   1210c:	bl	1771c <argp_parse@@Base+0xbf4>
   12110:	mov	r3, r5
   12114:	ldr	r2, [pc, #804]	; 12440 <__assert_fail@plt+0x100c>
   12118:	mov	r1, #0
   1211c:	mov	r0, #1
   12120:	bl	11224 <error@plt>
   12124:	b	11f94 <__assert_fail@plt+0xb60>
   12128:	bl	112e4 <__errno_location@plt>
   1212c:	ldr	r0, [r0]
   12130:	bl	11260 <strerror@plt>
   12134:	b	11fd8 <__assert_fail@plt+0xba4>
   12138:	ldr	r3, [pc, #736]	; 12420 <__assert_fail@plt+0xfec>
   1213c:	ldr	r3, [r3, #36]	; 0x24
   12140:	ldr	r1, [r3, #60]	; 0x3c
   12144:	mov	r2, r1
   12148:	ldr	r0, [pc, #756]	; 12444 <__assert_fail@plt+0x1010>
   1214c:	bl	11128 <printf@plt>
   12150:	b	1201c <__assert_fail@plt+0xbe8>
   12154:	ldr	r1, [sl, #20]
   12158:	ldr	r3, [pc, #744]	; 12448 <__assert_fail@plt+0x1014>
   1215c:	umull	r2, r3, r3, r1
   12160:	lsr	r3, r3, #6
   12164:	str	r3, [sp, #68]	; 0x44
   12168:	mov	r2, #1000	; 0x3e8
   1216c:	mul	r3, r2, r3
   12170:	sub	r3, r1, r3
   12174:	mul	r2, r2, r3
   12178:	str	r2, [sp, #72]	; 0x48
   1217c:	b	120b0 <__assert_fail@plt+0xc7c>
   12180:	bl	112e4 <__errno_location@plt>
   12184:	ldr	r1, [r0]
   12188:	cmp	r1, #4
   1218c:	beq	12728 <__assert_fail@plt+0x12f4>
   12190:	ldr	r2, [pc, #692]	; 1244c <__assert_fail@plt+0x1018>
   12194:	mov	r0, #1
   12198:	bl	11224 <error@plt>
   1219c:	b	12728 <__assert_fail@plt+0x12f4>
   121a0:	ldr	r3, [sl, #80]	; 0x50
   121a4:	str	r3, [sp, #84]	; 0x54
   121a8:	ldr	r3, [sl, #56]	; 0x38
   121ac:	add	r3, r3, #8
   121b0:	str	r3, [sp, #88]	; 0x58
   121b4:	add	r3, sl, #84	; 0x54
   121b8:	str	r3, [sp, #32]
   121bc:	str	r3, [sp, #100]	; 0x64
   121c0:	mov	r3, #28
   121c4:	str	r3, [sp, #104]	; 0x68
   121c8:	add	r3, sp, #84	; 0x54
   121cc:	str	r3, [sp, #108]	; 0x6c
   121d0:	mov	r3, #1
   121d4:	str	r3, [sp, #112]	; 0x70
   121d8:	add	r3, sp, #512	; 0x200
   121dc:	str	r3, [sp, #116]	; 0x74
   121e0:	mov	r3, #1024	; 0x400
   121e4:	str	r3, [sp, #120]	; 0x78
   121e8:	mov	r2, #0
   121ec:	str	r2, [sp, #124]	; 0x7c
   121f0:	add	r1, sp, #100	; 0x64
   121f4:	ldr	r0, [sl]
   121f8:	bl	113c8 <recvmsg@plt>
   121fc:	subs	r3, r0, #0
   12200:	str	r3, [sp, #28]
   12204:	blt	12390 <__assert_fail@plt+0xf5c>
   12208:	ldr	r2, [sp, #120]	; 0x78
   1220c:	cmp	r2, #11
   12210:	movls	r3, #0
   12214:	ldrhi	r3, [sp, #116]	; 0x74
   12218:	ldr	r1, [sp, #116]	; 0x74
   1221c:	add	r1, r1, r2
   12220:	mov	r0, #0
   12224:	mov	r2, r3
   12228:	cmp	r2, #0
   1222c:	beq	12294 <__assert_fail@plt+0xe60>
   12230:	ldr	r3, [r2, #4]
   12234:	cmp	r3, #41	; 0x29
   12238:	beq	12280 <__assert_fail@plt+0xe4c>
   1223c:	ldr	r3, [r2]
   12240:	cmp	r3, #11
   12244:	bls	1229c <__assert_fail@plt+0xe68>
   12248:	add	r3, r3, #3
   1224c:	bic	r3, r3, #3
   12250:	add	r3, r2, r3
   12254:	mov	r2, r0
   12258:	add	ip, r3, #12
   1225c:	cmp	r1, ip
   12260:	bcc	12228 <__assert_fail@plt+0xdf4>
   12264:	ldr	ip, [r3]
   12268:	add	ip, ip, #3
   1226c:	bic	ip, ip, #3
   12270:	add	ip, r3, ip
   12274:	cmp	r1, ip
   12278:	bcc	12228 <__assert_fail@plt+0xdf4>
   1227c:	b	12224 <__assert_fail@plt+0xdf0>
   12280:	ldr	r3, [r2, #8]
   12284:	cmp	r3, #52	; 0x34
   12288:	bne	1223c <__assert_fail@plt+0xe08>
   1228c:	ldr	r7, [r2, #12]
   12290:	b	122a0 <__assert_fail@plt+0xe6c>
   12294:	mvn	r7, #0
   12298:	b	122a0 <__assert_fail@plt+0xe6c>
   1229c:	mvn	r7, #0
   122a0:	ldr	r6, [sl, #80]	; 0x50
   122a4:	ldrb	r3, [r6]
   122a8:	cmp	r3, #129	; 0x81
   122ac:	beq	1247c <__assert_fail@plt+0x1048>
   122b0:	ldr	r3, [r8, #36]	; 0x24
   122b4:	ldr	r1, [r6, #32]
   122b8:	ldr	r2, [r3, #32]
   122bc:	cmp	r1, r2
   122c0:	bne	12390 <__assert_fail@plt+0xf5c>
   122c4:	ldr	r1, [r6, #36]	; 0x24
   122c8:	ldr	r2, [r3, #36]	; 0x24
   122cc:	cmp	r1, r2
   122d0:	bne	12390 <__assert_fail@plt+0xf5c>
   122d4:	ldr	r1, [r6, #40]	; 0x28
   122d8:	ldr	r2, [r3, #40]	; 0x28
   122dc:	cmp	r1, r2
   122e0:	bne	12390 <__assert_fail@plt+0xf5c>
   122e4:	ldr	r2, [r6, #44]	; 0x2c
   122e8:	ldr	r3, [r3, #44]	; 0x2c
   122ec:	cmp	r2, r3
   122f0:	bne	12390 <__assert_fail@plt+0xf5c>
   122f4:	ldrb	r3, [r6, #14]
   122f8:	cmp	r3, #58	; 0x3a
   122fc:	bne	12390 <__assert_fail@plt+0xf5c>
   12300:	ldrb	r3, [r6, #48]	; 0x30
   12304:	cmp	r3, #128	; 0x80
   12308:	bne	12390 <__assert_fail@plt+0xf5c>
   1230c:	ldr	r3, [sl, #60]	; 0x3c
   12310:	rev16	r3, r3
   12314:	uxth	r3, r3
   12318:	ldrh	r2, [r6, #52]	; 0x34
   1231c:	cmp	r2, r3
   12320:	bne	12390 <__assert_fail@plt+0xf5c>
   12324:	mov	r1, #28
   12328:	ldr	r0, [sp, #32]
   1232c:	bl	13164 <__assert_fail@plt+0x1d30>
   12330:	mov	r5, r0
   12334:	mov	r2, r0
   12338:	ldr	r1, [sp, #28]
   1233c:	ldr	r0, [pc, #268]	; 12450 <__assert_fail@plt+0x101c>
   12340:	bl	11128 <printf@plt>
   12344:	mov	r0, r5
   12348:	bl	1771c <argp_parse@@Base+0xbf4>
   1234c:	ldrb	r1, [r6]
   12350:	ldr	r3, [fp, #96]	; 0x60
   12354:	cmp	r1, r3
   12358:	beq	126a0 <__assert_fail@plt+0x126c>
   1235c:	add	r3, fp, #104	; 0x68
   12360:	ldr	r0, [sp, #44]	; 0x2c
   12364:	ldr	r2, [r3]
   12368:	cmp	r1, r2
   1236c:	beq	126a4 <__assert_fail@plt+0x1270>
   12370:	add	r3, r3, #8
   12374:	cmp	r3, r0
   12378:	bcc	12364 <__assert_fail@plt+0xf30>
   1237c:	ldr	r0, [pc, #208]	; 12454 <__assert_fail@plt+0x1020>
   12380:	bl	11128 <printf@plt>
   12384:	ldr	r3, [sp, #24]
   12388:	add	r3, r3, #1
   1238c:	str	r3, [sp, #24]
   12390:	ldr	r3, [sp, #36]	; 0x24
   12394:	cmp	r3, #0
   12398:	beq	126cc <__assert_fail@plt+0x1298>
   1239c:	ldr	r1, [fp, #12]
   123a0:	add	r0, sl, #12
   123a4:	bl	13118 <__assert_fail@plt+0x1ce4>
   123a8:	cmp	r0, #0
   123ac:	bne	123d4 <__assert_fail@plt+0xfa0>
   123b0:	ldr	r3, [sl, #8]
   123b4:	ldr	r2, [sp, #24]
   123b8:	cmp	r3, r2
   123bc:	movhi	r2, #0
   123c0:	movls	r2, #1
   123c4:	cmp	r3, #0
   123c8:	moveq	r2, #0
   123cc:	cmp	r2, #0
   123d0:	beq	12728 <__assert_fail@plt+0x12f4>
   123d4:	mov	r0, sl
   123d8:	bl	130dc <__assert_fail@plt+0x1ca8>
   123dc:	bl	118f8 <__assert_fail@plt+0x4c4>
   123e0:	mov	r4, r0
   123e4:	ldr	r3, [pc, #52]	; 12420 <__assert_fail@plt+0xfec>
   123e8:	ldr	r3, [r3, #36]	; 0x24
   123ec:	ldr	r0, [r3, #52]	; 0x34
   123f0:	bl	1771c <argp_parse@@Base+0xbf4>
   123f4:	mov	r0, r4
   123f8:	add	sp, sp, #1824	; 0x720
   123fc:	add	sp, sp, #4
   12400:	vpop	{d8-d10}
   12404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   12414:	addmi	r4, pc, r0
   12418:			; <UNDEFINED> instruction: 0xff800000
   1241c:	bicmi	ip, sp, r4, ror #26
   12420:	andeq	ip, r2, r4, ror #7
   12424:	andeq	ip, r2, ip, lsr r1
   12428:	andeq	r9, r1, ip, ror pc
   1242c:	andeq	r9, r1, ip, lsl #31
   12430:	andeq	r1, r1, r8, ror #10
   12434:	andeq	r2, r0, r0, lsl r7
   12438:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   1243c:	andeq	r9, r1, ip, asr #30
   12440:	andeq	r9, r1, ip, ror #30
   12444:	andeq	r9, r1, ip, lsr #31
   12448:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   1244c:	andeq	r9, r1, r0, asr #31
   12450:	andeq	sl, r1, r0, lsr r0
   12454:	andeq	sl, r1, r4, asr #32
   12458:	ldrdeq	r9, [r1], -r0
   1245c:	ldrdeq	ip, [r2], -r8
   12460:	andeq	r9, r1, r8, ror #31
   12464:	strdeq	r9, [r1], -r0
   12468:	andeq	sl, r1, r0, lsl r0
   1246c:	andeq	sl, r1, r8, lsl r0
   12470:	andeq	sl, r1, r8, lsr #32
   12474:	andeq	ip, r2, ip, asr #8
   12478:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1247c:	ldrh	r3, [r6, #4]
   12480:	rev16	r3, r3
   12484:	uxth	r3, r3
   12488:	ldr	r2, [sl, #60]	; 0x3c
   1248c:	cmp	r3, r2
   12490:	bne	12390 <__assert_fail@plt+0xf5c>
   12494:	ldrh	r0, [r6, #6]
   12498:	rev16	r0, r0
   1249c:	ldr	r1, [sl, #72]	; 0x48
   124a0:	lsl	r1, r1, #3
   124a4:	uxth	r0, r0
   124a8:	bl	19b78 <argp_parse@@Base+0x3050>
   124ac:	ldr	r2, [sl, #76]	; 0x4c
   124b0:	ldrb	r3, [r2, r1, asr #3]
   124b4:	and	r0, r1, #7
   124b8:	asr	ip, r3, r0
   124bc:	ands	ip, ip, #1
   124c0:	str	ip, [sp, #40]	; 0x28
   124c4:	ldrne	r3, [sl, #120]	; 0x78
   124c8:	addne	r3, r3, #1
   124cc:	strne	r3, [sl, #120]	; 0x78
   124d0:	moveq	ip, #1
   124d4:	orreq	r3, r3, ip, lsl r0
   124d8:	strbeq	r3, [r2, r1, asr #3]
   124dc:	ldreq	r3, [sl, #116]	; 0x74
   124e0:	addeq	r3, r3, ip
   124e4:	streq	r3, [sl, #116]	; 0x74
   124e8:	ldr	r9, [sl, #68]	; 0x44
   124ec:	mov	r1, #0
   124f0:	add	r0, sp, #92	; 0x5c
   124f4:	bl	11218 <gettimeofday@plt>
   124f8:	ldr	r3, [sp, #28]
   124fc:	sub	r3, r3, #8
   12500:	cmp	r3, #7
   12504:	vmovls.f64	d8, d10
   12508:	movls	r9, #0
   1250c:	bhi	125f0 <__assert_fail@plt+0x11bc>
   12510:	ldr	r3, [pc, #-164]	; 12474 <__assert_fail@plt+0x1040>
   12514:	ldr	r3, [r3]
   12518:	tst	r3, #8
   1251c:	bne	12384 <__assert_fail@plt+0xf50>
   12520:	tst	r3, #1
   12524:	bne	12668 <__assert_fail@plt+0x1234>
   12528:	and	r3, r3, #4
   1252c:	cmp	r3, #0
   12530:	moveq	r5, #32
   12534:	str	r5, [sp, #8]
   12538:	mov	r3, #0
   1253c:	str	r3, [sp, #4]
   12540:	str	r3, [sp]
   12544:	mov	r3, #256	; 0x100
   12548:	add	r2, sp, r3
   1254c:	mov	r1, #28
   12550:	ldr	r0, [sp, #32]
   12554:	bl	1135c <getnameinfo@plt>
   12558:	cmp	r0, #0
   1255c:	beq	12598 <__assert_fail@plt+0x1164>
   12560:	cmn	r0, #11
   12564:	bne	1267c <__assert_fail@plt+0x1248>
   12568:	bl	112e4 <__errno_location@plt>
   1256c:	ldr	r0, [r0]
   12570:	bl	11260 <strerror@plt>
   12574:	mov	r2, r0
   12578:	ldr	r1, [pc, #-296]	; 12458 <__assert_fail@plt+0x1024>
   1257c:	ldr	r3, [pc, #-296]	; 1245c <__assert_fail@plt+0x1028>
   12580:	ldr	r0, [r3]
   12584:	bl	112d8 <fprintf@plt>
   12588:	add	r3, sp, #256	; 0x100
   1258c:	ldr	r2, [pc, #-308]	; 12460 <__assert_fail@plt+0x102c>
   12590:	ldm	r2, {r0, r1}
   12594:	stm	r3, {r0, r1}
   12598:	ldrh	r3, [r6, #6]
   1259c:	rev16	r3, r3
   125a0:	uxth	r3, r3
   125a4:	add	r2, sp, #256	; 0x100
   125a8:	ldr	r1, [sp, #28]
   125ac:	ldr	r0, [pc, #-336]	; 12464 <__assert_fail@plt+0x1030>
   125b0:	bl	11128 <printf@plt>
   125b4:	cmp	r7, #0
   125b8:	blt	125c8 <__assert_fail@plt+0x1194>
   125bc:	mov	r1, r7
   125c0:	ldr	r0, [pc, #-352]	; 12468 <__assert_fail@plt+0x1034>
   125c4:	bl	11128 <printf@plt>
   125c8:	cmp	r9, #0
   125cc:	bne	12684 <__assert_fail@plt+0x1250>
   125d0:	ldr	r3, [sp, #40]	; 0x28
   125d4:	cmp	r3, #0
   125d8:	bne	12694 <__assert_fail@plt+0x1260>
   125dc:	ldr	r3, [pc, #-364]	; 12478 <__assert_fail@plt+0x1044>
   125e0:	ldr	r1, [r3]
   125e4:	mov	r0, #10
   125e8:	bl	113a4 <putc@plt>
   125ec:	b	12384 <__assert_fail@plt+0xf50>
   125f0:	mov	r2, r6
   125f4:	add	r3, sp, #256	; 0x100
   125f8:	ldr	r0, [r2, #8]!
   125fc:	ldr	r1, [r2, #4]
   12600:	stmia	r3!, {r0, r1}
   12604:	add	r1, sp, #256	; 0x100
   12608:	add	r0, sp, #92	; 0x5c
   1260c:	bl	12ea8 <__assert_fail@plt+0x1a74>
   12610:	vldr	s15, [sp, #92]	; 0x5c
   12614:	vcvt.f64.s32	d7, s15
   12618:	vldr	s13, [sp, #96]	; 0x60
   1261c:	vcvt.f64.s32	d6, s13
   12620:	vdiv.f64	d8, d6, d9
   12624:	vmla.f64	d8, d7, d9
   12628:	vldr	d7, [r9, #16]
   1262c:	vadd.f64	d7, d7, d8
   12630:	vstr	d7, [r9, #16]
   12634:	vldr	d7, [r9, #24]
   12638:	vmla.f64	d7, d8, d8
   1263c:	vstr	d7, [r9, #24]
   12640:	vldr	d7, [r9]
   12644:	vcmpe.f64	d8, d7
   12648:	vmrs	APSR_nzcv, fpscr
   1264c:	vstrmi	d8, [r9]
   12650:	vldr	d7, [r9, #8]
   12654:	vcmpe.f64	d8, d7
   12658:	vmrs	APSR_nzcv, fpscr
   1265c:	vstrgt	d8, [r9, #8]
   12660:	mov	r9, r5
   12664:	b	12510 <__assert_fail@plt+0x10dc>
   12668:	ldr	r3, [pc, #-504]	; 12478 <__assert_fail@plt+0x1044>
   1266c:	ldr	r1, [r3]
   12670:	mov	r0, #8
   12674:	bl	113a4 <putc@plt>
   12678:	b	12384 <__assert_fail@plt+0xf50>
   1267c:	bl	11170 <gai_strerror@plt>
   12680:	b	12574 <__assert_fail@plt+0x1140>
   12684:	vmov	r2, r3, d8
   12688:	ldr	r0, [pc, #-548]	; 1246c <__assert_fail@plt+0x1038>
   1268c:	bl	11128 <printf@plt>
   12690:	b	125d0 <__assert_fail@plt+0x119c>
   12694:	ldr	r0, [pc, #-556]	; 12470 <__assert_fail@plt+0x103c>
   12698:	bl	11128 <printf@plt>
   1269c:	b	125dc <__assert_fail@plt+0x11a8>
   126a0:	add	r3, fp, #96	; 0x60
   126a4:	ldr	r3, [r3, #4]
   126a8:	mov	r0, r6
   126ac:	blx	r3
   126b0:	ldr	r3, [pc, #-580]	; 12474 <__assert_fail@plt+0x1040>
   126b4:	ldr	r3, [r3]
   126b8:	tst	r3, #32
   126bc:	beq	12384 <__assert_fail@plt+0xf50>
   126c0:	mov	r0, r6
   126c4:	bl	11d48 <__assert_fail@plt+0x914>
   126c8:	b	12384 <__assert_fail@plt+0xf50>
   126cc:	add	r3, sp, #76	; 0x4c
   126d0:	str	r3, [sp, #28]
   126d4:	mov	r1, #0
   126d8:	mov	r0, r3
   126dc:	bl	11218 <gettimeofday@plt>
   126e0:	ldr	r3, [sp, #28]
   126e4:	str	r3, [sp, #36]	; 0x24
   126e8:	b	1239c <__assert_fail@plt+0xf68>
   126ec:	mov	r0, sl
   126f0:	bl	11bd0 <__assert_fail@plt+0x79c>
   126f4:	ldr	r3, [pc, #-648]	; 12474 <__assert_fail@plt+0x1040>
   126f8:	ldr	r3, [r3]
   126fc:	and	r3, r3, #9
   12700:	cmp	r3, #1
   12704:	beq	12894 <__assert_fail@plt+0x1460>
   12708:	ldr	r1, [fp, #12]
   1270c:	add	r0, sl, #12
   12710:	bl	13118 <__assert_fail@plt+0x1ce4>
   12714:	cmp	r0, #0
   12718:	bne	123d4 <__assert_fail@plt+0xfa0>
   1271c:	mov	r1, #0
   12720:	add	r0, sp, #60	; 0x3c
   12724:	bl	11218 <gettimeofday@plt>
   12728:	ldr	r3, [r8]
   1272c:	cmp	r3, #0
   12730:	bne	123d4 <__assert_fail@plt+0xfa0>
   12734:	add	r3, sp, #124	; 0x7c
   12738:	add	r2, sp, #252	; 0xfc
   1273c:	mov	r1, #0
   12740:	str	r1, [r3, #4]!
   12744:	cmp	r2, r3
   12748:	bne	12740 <__assert_fail@plt+0x130c>
   1274c:	ldr	r3, [sl]
   12750:	add	r2, r3, #31
   12754:	cmp	r3, #0
   12758:	movge	r2, r3
   1275c:	asr	r2, r2, #5
   12760:	add	r1, sp, #1824	; 0x720
   12764:	add	r2, r1, r2, lsl #2
   12768:	asr	r1, r3, #31
   1276c:	lsr	r1, r1, #27
   12770:	add	r3, r3, r1
   12774:	and	r3, r3, #31
   12778:	sub	r3, r3, r1
   1277c:	ldr	r1, [r2, #-1696]	; 0xfffff960
   12780:	mov	r0, #1
   12784:	orr	r3, r1, r0, lsl r3
   12788:	str	r3, [r2, #-1696]	; 0xfffff960
   1278c:	mov	r1, #0
   12790:	add	r0, sp, #76	; 0x4c
   12794:	bl	11218 <gettimeofday@plt>
   12798:	ldr	r3, [sp, #68]	; 0x44
   1279c:	ldr	r2, [sp, #60]	; 0x3c
   127a0:	add	r2, r2, r3
   127a4:	ldr	r3, [sp, #76]	; 0x4c
   127a8:	sub	r2, r2, r3
   127ac:	str	r2, [sp, #52]	; 0x34
   127b0:	ldr	r1, [sp, #72]	; 0x48
   127b4:	ldr	r3, [sp, #64]	; 0x40
   127b8:	add	r3, r3, r1
   127bc:	ldr	r1, [sp, #80]	; 0x50
   127c0:	sub	r3, r3, r1
   127c4:	str	r3, [sp, #56]	; 0x38
   127c8:	cmp	r3, #0
   127cc:	bge	127e8 <__assert_fail@plt+0x13b4>
   127d0:	add	r3, r3, #999424	; 0xf4000
   127d4:	sub	r2, r2, #1
   127d8:	adds	r3, r3, #576	; 0x240
   127dc:	bmi	127d0 <__assert_fail@plt+0x139c>
   127e0:	str	r3, [sp, #56]	; 0x38
   127e4:	str	r2, [sp, #52]	; 0x34
   127e8:	ldr	r3, [sp, #56]	; 0x38
   127ec:	cmp	r3, r4
   127f0:	ble	1281c <__assert_fail@plt+0x13e8>
   127f4:	ldr	r2, [sp, #52]	; 0x34
   127f8:	add	r2, r2, #1
   127fc:	sub	r3, r3, #999424	; 0xf4000
   12800:	sub	r3, r3, #576	; 0x240
   12804:	mov	r1, r2
   12808:	add	r2, r2, #1
   1280c:	cmp	r3, r4
   12810:	bgt	127fc <__assert_fail@plt+0x13c8>
   12814:	str	r3, [sp, #56]	; 0x38
   12818:	str	r1, [sp, #52]	; 0x34
   1281c:	ldr	r3, [sp, #52]	; 0x34
   12820:	cmp	r3, #0
   12824:	movlt	r3, #0
   12828:	strlt	r3, [sp, #56]	; 0x38
   1282c:	strlt	r3, [sp, #52]	; 0x34
   12830:	add	r3, sp, #52	; 0x34
   12834:	str	r3, [sp]
   12838:	mov	r3, #0
   1283c:	mov	r2, r3
   12840:	add	r1, sp, #128	; 0x80
   12844:	ldr	r0, [sp, #16]
   12848:	bl	111b8 <select@plt>
   1284c:	subs	r5, r0, #0
   12850:	blt	12180 <__assert_fail@plt+0xd4c>
   12854:	cmp	r5, #1
   12858:	beq	121a0 <__assert_fail@plt+0xd6c>
   1285c:	ldr	r3, [sl, #8]
   12860:	cmp	r3, #0
   12864:	beq	126ec <__assert_fail@plt+0x12b8>
   12868:	ldr	r2, [sl, #112]	; 0x70
   1286c:	cmp	r3, r2
   12870:	bhi	126ec <__assert_fail@plt+0x12b8>
   12874:	ldr	r3, [sp, #20]
   12878:	cmp	r3, #0
   1287c:	bne	123d4 <__assert_fail@plt+0xfa0>
   12880:	mov	r3, #10
   12884:	str	r3, [sp, #68]	; 0x44
   12888:	mov	r3, #1
   1288c:	str	r3, [sp, #20]
   12890:	b	1271c <__assert_fail@plt+0x12e8>
   12894:	ldr	r3, [pc, #-1060]	; 12478 <__assert_fail@plt+0x1044>
   12898:	ldr	r1, [r3]
   1289c:	mov	r0, #46	; 0x2e
   128a0:	bl	113a4 <putc@plt>
   128a4:	b	12708 <__assert_fail@plt+0x12d4>
   128a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   128ac:	sub	sp, sp, #52	; 0x34
   128b0:	mov	r5, r0
   128b4:	mov	r6, r1
   128b8:	ldr	r0, [r1]
   128bc:	bl	1782c <argp_parse@@Base+0xd04>
   128c0:	ldr	r1, [pc, #880]	; 12c38 <__assert_fail@plt+0x1804>
   128c4:	mov	r0, #6
   128c8:	bl	11350 <setlocale@plt>
   128cc:	bl	11140 <getuid@plt>
   128d0:	cmp	r0, #0
   128d4:	moveq	r2, #1
   128d8:	ldreq	r3, [pc, #860]	; 12c3c <__assert_fail@plt+0x1808>
   128dc:	strbeq	r2, [r3, #8]
   128e0:	ldr	r2, [pc, #856]	; 12c40 <__assert_fail@plt+0x180c>
   128e4:	ldr	r3, [pc, #856]	; 12c44 <__assert_fail@plt+0x1810>
   128e8:	str	r2, [r3]
   128ec:	ldr	r4, [pc, #852]	; 12c48 <__assert_fail@plt+0x1814>
   128f0:	add	r1, r4, #128	; 0x80
   128f4:	ldr	r0, [pc, #848]	; 12c4c <__assert_fail@plt+0x1818>
   128f8:	bl	17634 <argp_parse@@Base+0xb0c>
   128fc:	mov	r3, #0
   12900:	str	r3, [sp, #4]
   12904:	add	r2, sp, #44	; 0x2c
   12908:	str	r2, [sp]
   1290c:	mov	r2, r6
   12910:	mov	r1, r5
   12914:	add	r0, r4, #136	; 0x88
   12918:	bl	16b28 <argp_parse@@Base>
   1291c:	bl	1129c <getpid@plt>
   12920:	mov	r8, r0
   12924:	mov	r3, #1
   12928:	str	r3, [sp, #8]
   1292c:	mov	r2, #58	; 0x3a
   12930:	mov	r1, #3
   12934:	mov	r0, #10
   12938:	bl	11404 <socket@plt>
   1293c:	subs	r9, r0, #0
   12940:	blt	12b24 <__assert_fail@plt+0x16f0>
   12944:	mov	r2, #32
   12948:	mov	r1, #255	; 0xff
   1294c:	add	r0, sp, #12
   12950:	bl	11314 <memset@plt>
   12954:	mvn	r3, #2
   12958:	str	r3, [sp, #28]
   1295c:	mvn	r3, #30
   12960:	str	r3, [sp, #12]
   12964:	mov	r3, #32
   12968:	str	r3, [sp]
   1296c:	add	r3, sp, #12
   12970:	mov	r2, #1
   12974:	mov	r1, #58	; 0x3a
   12978:	mov	r0, r9
   1297c:	bl	1111c <setsockopt@plt>
   12980:	cmp	r0, #0
   12984:	bne	12b5c <__assert_fail@plt+0x1728>
   12988:	mov	r3, #4
   1298c:	str	r3, [sp]
   12990:	add	r3, sp, #8
   12994:	mov	r2, #51	; 0x33
   12998:	mov	r1, #41	; 0x29
   1299c:	mov	r0, r9
   129a0:	bl	1111c <setsockopt@plt>
   129a4:	subs	r7, r0, #0
   129a8:	bne	12b68 <__assert_fail@plt+0x1734>
   129ac:	mov	r0, #124	; 0x7c
   129b0:	bl	18324 <argp_parse@@Base+0x17fc>
   129b4:	subs	r4, r0, #0
   129b8:	beq	12b74 <__assert_fail@plt+0x1740>
   129bc:	mov	r2, #124	; 0x7c
   129c0:	mov	r1, #0
   129c4:	mov	r0, r4
   129c8:	bl	11314 <memset@plt>
   129cc:	str	r9, [r4]
   129d0:	mov	r3, #1000	; 0x3e8
   129d4:	str	r3, [r4, #20]
   129d8:	mov	r3, #8
   129dc:	str	r3, [r4, #56]	; 0x38
   129e0:	uxth	r8, r8
   129e4:	str	r8, [r4, #60]	; 0x3c
   129e8:	mov	r3, #128	; 0x80
   129ec:	str	r3, [r4, #72]	; 0x48
   129f0:	mov	r1, #0
   129f4:	add	r0, r4, #12
   129f8:	bl	11218 <gettimeofday@plt>
   129fc:	ldr	r3, [pc, #568]	; 12c3c <__assert_fail@plt+0x1808>
   12a00:	str	r4, [r3, #36]	; 0x24
   12a04:	ldr	r0, [r4]
   12a08:	mov	r3, #4
   12a0c:	str	r3, [sp]
   12a10:	ldr	r3, [pc, #568]	; 12c50 <__assert_fail@plt+0x181c>
   12a14:	mov	r2, #6
   12a18:	mov	r1, #1
   12a1c:	bl	1111c <setsockopt@plt>
   12a20:	bl	11140 <getuid@plt>
   12a24:	bl	1138c <setuid@plt>
   12a28:	cmp	r0, #0
   12a2c:	bne	12b80 <__assert_fail@plt+0x174c>
   12a30:	mov	r3, #0
   12a34:	mov	r2, #1
   12a38:	mov	r1, r3
   12a3c:	ldr	r0, [pc, #528]	; 12c54 <__assert_fail@plt+0x1820>
   12a40:	ldr	r0, [r0]
   12a44:	bl	11308 <setvbuf@plt>
   12a48:	ldr	r3, [sp, #44]	; 0x2c
   12a4c:	sub	r5, r5, r3
   12a50:	add	r6, r6, r3, lsl #2
   12a54:	ldr	r3, [pc, #480]	; 12c3c <__assert_fail@plt+0x1808>
   12a58:	ldr	r1, [r3, #4]
   12a5c:	cmp	r1, #0
   12a60:	bne	12b98 <__assert_fail@plt+0x1764>
   12a64:	ldr	r3, [pc, #492]	; 12c58 <__assert_fail@plt+0x1824>
   12a68:	ldr	r1, [r3]
   12a6c:	cmp	r1, #0
   12a70:	bne	12ba4 <__assert_fail@plt+0x1770>
   12a74:	ldr	r3, [pc, #480]	; 12c5c <__assert_fail@plt+0x1828>
   12a78:	ldr	r3, [r3]
   12a7c:	tst	r3, #2
   12a80:	bne	12bbc <__assert_fail@plt+0x1788>
   12a84:	ldr	r3, [pc, #432]	; 12c3c <__assert_fail@plt+0x1808>
   12a88:	ldr	r3, [r3, #32]
   12a8c:	cmp	r3, #0
   12a90:	ble	12ac0 <__assert_fail@plt+0x168c>
   12a94:	ldr	r3, [pc, #416]	; 12c3c <__assert_fail@plt+0x1808>
   12a98:	ldr	r0, [r3, #36]	; 0x24
   12a9c:	mov	r2, #4
   12aa0:	str	r2, [sp]
   12aa4:	add	r3, r3, #32
   12aa8:	mov	r2, #16
   12aac:	mov	r1, #41	; 0x29
   12ab0:	ldr	r0, [r0]
   12ab4:	bl	1111c <setsockopt@plt>
   12ab8:	cmp	r0, #0
   12abc:	blt	12bd4 <__assert_fail@plt+0x17a0>
   12ac0:	ldr	r3, [pc, #404]	; 12c5c <__assert_fail@plt+0x1828>
   12ac4:	ldr	r3, [r3]
   12ac8:	tst	r3, #256	; 0x100
   12acc:	bne	12bec <__assert_fail@plt+0x17b8>
   12ad0:	ldr	r3, [pc, #368]	; 12c48 <__assert_fail@plt+0x1814>
   12ad4:	ldr	r1, [r3]
   12ad8:	ldr	r3, [pc, #384]	; 12c60 <__assert_fail@plt+0x182c>
   12adc:	ldr	r0, [r3]
   12ae0:	bl	12d30 <__assert_fail@plt+0x18fc>
   12ae4:	cmp	r5, #0
   12ae8:	beq	12c30 <__assert_fail@plt+0x17fc>
   12aec:	ldr	r8, [pc, #328]	; 12c3c <__assert_fail@plt+0x1808>
   12af0:	mov	r4, #0
   12af4:	ldr	r0, [r6], #4
   12af8:	bl	11eb4 <__assert_fail@plt+0xa80>
   12afc:	orr	r7, r7, r0
   12b00:	ldr	r3, [r8, #36]	; 0x24
   12b04:	str	r4, [r3, #112]	; 0x70
   12b08:	str	r4, [r3, #116]	; 0x74
   12b0c:	str	r4, [r3, #120]	; 0x78
   12b10:	subs	r5, r5, #1
   12b14:	bne	12af4 <__assert_fail@plt+0x16c0>
   12b18:	mov	r0, r7
   12b1c:	add	sp, sp, #52	; 0x34
   12b20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12b24:	bl	112e4 <__errno_location@plt>
   12b28:	ldr	r1, [r0]
   12b2c:	cmp	r1, #13
   12b30:	cmpne	r1, #1
   12b34:	beq	12b4c <__assert_fail@plt+0x1718>
   12b38:	mov	r2, #0
   12b3c:	ldr	r3, [pc, #248]	; 12c3c <__assert_fail@plt+0x1808>
   12b40:	str	r2, [r3, #36]	; 0x24
   12b44:	mov	r0, #1
   12b48:	bl	112a8 <exit@plt>
   12b4c:	ldr	r2, [pc, #272]	; 12c64 <__assert_fail@plt+0x1830>
   12b50:	mov	r0, #1
   12b54:	bl	11224 <error@plt>
   12b58:	b	12b38 <__assert_fail@plt+0x1704>
   12b5c:	mov	r0, r9
   12b60:	bl	11428 <close@plt>
   12b64:	b	12b38 <__assert_fail@plt+0x1704>
   12b68:	mov	r0, r9
   12b6c:	bl	11428 <close@plt>
   12b70:	b	12b38 <__assert_fail@plt+0x1704>
   12b74:	mov	r0, r9
   12b78:	bl	11428 <close@plt>
   12b7c:	b	12b38 <__assert_fail@plt+0x1704>
   12b80:	bl	112e4 <__errno_location@plt>
   12b84:	ldr	r2, [pc, #220]	; 12c68 <__assert_fail@plt+0x1834>
   12b88:	ldr	r1, [r0]
   12b8c:	mov	r0, #1
   12b90:	bl	11224 <error@plt>
   12b94:	b	12a30 <__assert_fail@plt+0x15fc>
   12b98:	ldr	r0, [r3, #36]	; 0x24
   12b9c:	bl	1309c <__assert_fail@plt+0x1c68>
   12ba0:	b	12a64 <__assert_fail@plt+0x1630>
   12ba4:	mov	r3, #4
   12ba8:	ldr	r2, [pc, #160]	; 12c50 <__assert_fail@plt+0x181c>
   12bac:	ldr	r0, [pc, #136]	; 12c3c <__assert_fail@plt+0x1808>
   12bb0:	ldr	r0, [r0, #36]	; 0x24
   12bb4:	bl	130a4 <__assert_fail@plt+0x1c70>
   12bb8:	b	12a74 <__assert_fail@plt+0x1640>
   12bbc:	ldr	r3, [pc, #168]	; 12c6c <__assert_fail@plt+0x1838>
   12bc0:	ldr	r1, [r3]
   12bc4:	ldr	r3, [pc, #112]	; 12c3c <__assert_fail@plt+0x1808>
   12bc8:	ldr	r0, [r3, #36]	; 0x24
   12bcc:	bl	130d4 <__assert_fail@plt+0x1ca0>
   12bd0:	b	12a84 <__assert_fail@plt+0x1650>
   12bd4:	bl	112e4 <__errno_location@plt>
   12bd8:	ldr	r2, [pc, #144]	; 12c70 <__assert_fail@plt+0x183c>
   12bdc:	ldr	r1, [r0]
   12be0:	mov	r0, #0
   12be4:	bl	11224 <error@plt>
   12be8:	b	12ac0 <__assert_fail@plt+0x168c>
   12bec:	ldr	r3, [pc, #72]	; 12c3c <__assert_fail@plt+0x1808>
   12bf0:	ldr	r0, [r3, #36]	; 0x24
   12bf4:	mov	r3, #4
   12bf8:	str	r3, [sp]
   12bfc:	ldr	r3, [pc, #112]	; 12c74 <__assert_fail@plt+0x1840>
   12c00:	mov	r2, #67	; 0x43
   12c04:	mov	r1, #41	; 0x29
   12c08:	ldr	r0, [r0]
   12c0c:	bl	1111c <setsockopt@plt>
   12c10:	cmp	r0, #0
   12c14:	bge	12ad0 <__assert_fail@plt+0x169c>
   12c18:	bl	112e4 <__errno_location@plt>
   12c1c:	ldr	r2, [pc, #84]	; 12c78 <__assert_fail@plt+0x1844>
   12c20:	ldr	r1, [r0]
   12c24:	mov	r0, #1
   12c28:	bl	11224 <error@plt>
   12c2c:	b	12ad0 <__assert_fail@plt+0x169c>
   12c30:	mov	r7, r5
   12c34:	b	12b18 <__assert_fail@plt+0x16e4>
   12c38:	andeq	sl, r1, r8, ror #31
   12c3c:	andeq	ip, r2, r4, ror #7
   12c40:	andeq	sl, r1, ip, asr r0
   12c44:	andeq	ip, r2, r8, asr r4
   12c48:	andeq	ip, r2, ip, lsr r1
   12c4c:	andeq	sl, r1, r4, ror r0
   12c50:	andeq	ip, r2, r0, ror #3
   12c54:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12c58:	andeq	ip, r2, r0, asr r4
   12c5c:	andeq	ip, r2, ip, asr #8
   12c60:	andeq	ip, r2, r4, asr #8
   12c64:	andeq	sl, r1, ip, ror r0
   12c68:	andeq	sl, r1, r8, lsl #1
   12c6c:	andeq	ip, r2, r4, asr r4
   12c70:	muleq	r1, r0, r0
   12c74:	andeq	ip, r2, r4, asr #2
   12c78:	andeq	sl, r1, ip, lsr #1
   12c7c:	andeq	r0, r0, r0
   12c80:	push	{r4, r5, r6, r7, lr}
   12c84:	sub	sp, sp, #20
   12c88:	mov	r7, r0
   12c8c:	mov	r5, r1
   12c90:	mov	r6, r2
   12c94:	mov	r2, #0
   12c98:	add	r1, sp, #12
   12c9c:	bl	112b4 <strtoul@plt>
   12ca0:	mov	r4, r0
   12ca4:	ldr	r3, [sp, #12]
   12ca8:	ldrb	r2, [r3]
   12cac:	cmp	r2, #0
   12cb0:	bne	12cd8 <__assert_fail@plt+0x18a4>
   12cb4:	cmp	r4, #0
   12cb8:	cmpeq	r6, #0
   12cbc:	beq	12cf4 <__assert_fail@plt+0x18c0>
   12cc0:	cmp	r5, #0
   12cc4:	cmpne	r4, r5
   12cc8:	bhi	12d0c <__assert_fail@plt+0x18d8>
   12ccc:	mov	r0, r4
   12cd0:	add	sp, sp, #20
   12cd4:	pop	{r4, r5, r6, r7, pc}
   12cd8:	str	r3, [sp]
   12cdc:	mov	r3, r7
   12ce0:	ldr	r2, [pc, #60]	; 12d24 <__assert_fail@plt+0x18f0>
   12ce4:	mov	r1, #0
   12ce8:	mov	r0, #1
   12cec:	bl	11224 <error@plt>
   12cf0:	b	12cb4 <__assert_fail@plt+0x1880>
   12cf4:	mov	r3, r7
   12cf8:	ldr	r2, [pc, #40]	; 12d28 <__assert_fail@plt+0x18f4>
   12cfc:	mov	r1, #0
   12d00:	mov	r0, #1
   12d04:	bl	11224 <error@plt>
   12d08:	b	12cc0 <__assert_fail@plt+0x188c>
   12d0c:	mov	r3, r7
   12d10:	ldr	r2, [pc, #20]	; 12d2c <__assert_fail@plt+0x18f8>
   12d14:	mov	r1, #0
   12d18:	mov	r0, #1
   12d1c:	bl	11224 <error@plt>
   12d20:	b	12ccc <__assert_fail@plt+0x1898>
   12d24:			; <UNDEFINED> instruction: 0x0001a4b0
   12d28:			; <UNDEFINED> instruction: 0x00019cb8
   12d2c:	ldrdeq	sl, [r1], -r0
   12d30:	ldr	r3, [pc, #168]	; 12de0 <__assert_fail@plt+0x19ac>
   12d34:	ldr	r3, [r3]
   12d38:	cmp	r3, #0
   12d3c:	bxeq	lr
   12d40:	push	{r4, r5, r6, lr}
   12d44:	mov	r5, r1
   12d48:	mov	r4, r0
   12d4c:	mov	r0, r3
   12d50:	bl	17d04 <argp_parse@@Base+0x11dc>
   12d54:	ldr	r3, [pc, #136]	; 12de4 <__assert_fail@plt+0x19b0>
   12d58:	str	r0, [r3]
   12d5c:	cmp	r4, #0
   12d60:	beq	12da4 <__assert_fail@plt+0x1970>
   12d64:	ldr	r3, [pc, #116]	; 12de0 <__assert_fail@plt+0x19ac>
   12d68:	ldr	r3, [r3]
   12d6c:	add	r3, r0, r3
   12d70:	cmp	r0, r3
   12d74:	popcs	{r4, r5, r6, pc}
   12d78:	sub	r2, r0, #1
   12d7c:	sub	r0, r3, #1
   12d80:	mov	r3, #0
   12d84:	ldrb	ip, [r4, r3]
   12d88:	strb	ip, [r2, #1]!
   12d8c:	add	r3, r3, #1
   12d90:	cmp	r3, r5
   12d94:	movcs	r3, #0
   12d98:	cmp	r0, r2
   12d9c:	bne	12d84 <__assert_fail@plt+0x1950>
   12da0:	pop	{r4, r5, r6, pc}
   12da4:	ldr	r3, [pc, #52]	; 12de0 <__assert_fail@plt+0x19ac>
   12da8:	ldr	r3, [r3]
   12dac:	cmp	r3, #0
   12db0:	beq	12ddc <__assert_fail@plt+0x19a8>
   12db4:	mov	r3, #0
   12db8:	ldr	r0, [pc, #36]	; 12de4 <__assert_fail@plt+0x19b0>
   12dbc:	ldr	r1, [pc, #28]	; 12de0 <__assert_fail@plt+0x19ac>
   12dc0:	ldr	r2, [r0]
   12dc4:	strb	r3, [r2, r3]
   12dc8:	add	r3, r3, #1
   12dcc:	ldr	r2, [r1]
   12dd0:	cmp	r2, r3
   12dd4:	bhi	12dc0 <__assert_fail@plt+0x198c>
   12dd8:	pop	{r4, r5, r6, pc}
   12ddc:	pop	{r4, r5, r6, pc}
   12de0:	andeq	ip, r2, r0, asr #2
   12de4:	andeq	ip, r2, r8, asr #8
   12de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dec:	sub	sp, sp, #12
   12df0:	mov	r7, r1
   12df4:	ldrb	r3, [r0]
   12df8:	cmp	r3, #0
   12dfc:	beq	12e88 <__assert_fail@plt+0x1a54>
   12e00:	mov	r4, r0
   12e04:	ldr	r3, [r1]
   12e08:	cmp	r3, #0
   12e0c:	ble	12e98 <__assert_fail@plt+0x1a64>
   12e10:	sub	r6, r2, #1
   12e14:	mov	r5, #0
   12e18:	ldr	r8, [pc, #128]	; 12ea0 <__assert_fail@plt+0x1a6c>
   12e1c:	ldr	fp, [pc, #128]	; 12ea4 <__assert_fail@plt+0x1a70>
   12e20:	mov	sl, r5
   12e24:	mov	r9, #1
   12e28:	b	12e54 <__assert_fail@plt+0x1a20>
   12e2c:	ldr	r3, [sp, #4]
   12e30:	strb	r3, [r6, #1]!
   12e34:	add	r5, r5, #1
   12e38:	ldr	r3, [sp]
   12e3c:	ldrb	r3, [r4, r3]!
   12e40:	cmp	r3, #0
   12e44:	beq	12e8c <__assert_fail@plt+0x1a58>
   12e48:	ldr	r3, [r7]
   12e4c:	cmp	r3, r5
   12e50:	ble	12e8c <__assert_fail@plt+0x1a58>
   12e54:	mov	r3, sp
   12e58:	add	r2, sp, #4
   12e5c:	mov	r1, r8
   12e60:	mov	r0, r4
   12e64:	bl	11398 <sscanf@plt>
   12e68:	cmp	r0, #1
   12e6c:	beq	12e2c <__assert_fail@plt+0x19f8>
   12e70:	mov	r3, r4
   12e74:	mov	r2, fp
   12e78:	mov	r1, sl
   12e7c:	mov	r0, r9
   12e80:	bl	11224 <error@plt>
   12e84:	b	12e2c <__assert_fail@plt+0x19f8>
   12e88:	mov	r5, #0
   12e8c:	str	r5, [r7]
   12e90:	add	sp, sp, #12
   12e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e98:	mov	r5, #0
   12e9c:	b	12e8c <__assert_fail@plt+0x1a58>
   12ea0:	andeq	sl, r1, ip, ror #9
   12ea4:	strdeq	sl, [r1], -r4
   12ea8:	ldr	r3, [r0, #4]
   12eac:	ldr	r2, [r1, #4]
   12eb0:	sub	r3, r3, r2
   12eb4:	str	r3, [r0, #4]
   12eb8:	cmp	r3, #0
   12ebc:	blt	12ed4 <__assert_fail@plt+0x1aa0>
   12ec0:	ldr	r3, [r0]
   12ec4:	ldr	r2, [r1]
   12ec8:	sub	r3, r3, r2
   12ecc:	str	r3, [r0]
   12ed0:	bx	lr
   12ed4:	ldr	r2, [r0]
   12ed8:	sub	r2, r2, #1
   12edc:	str	r2, [r0]
   12ee0:	add	r3, r3, #999424	; 0xf4000
   12ee4:	add	r3, r3, #576	; 0x240
   12ee8:	str	r3, [r0, #4]
   12eec:	b	12ec0 <__assert_fail@plt+0x1a8c>
   12ef0:	vcmpe.f64	d0, #0.0
   12ef4:	vmrs	APSR_nzcv, fpscr
   12ef8:	vnegmi.f64	d0, d0
   12efc:	bx	lr
   12f00:	vcmpe.f64	d0, #0.0
   12f04:	vmrs	APSR_nzcv, fpscr
   12f08:	bmi	12f5c <__assert_fail@plt+0x1b28>
   12f0c:	vcmpe.f64	d0, d1
   12f10:	vmrs	APSR_nzcv, fpscr
   12f14:	bmi	12f64 <__assert_fail@plt+0x1b30>
   12f18:	vldr	d6, [pc, #80]	; 12f70 <__assert_fail@plt+0x1b3c>
   12f1c:	vmul.f64	d6, d0, d6
   12f20:	vldr	d3, [pc, #72]	; 12f70 <__assert_fail@plt+0x1b3c>
   12f24:	vldr	d4, [pc, #76]	; 12f78 <__assert_fail@plt+0x1b44>
   12f28:	vdiv.f64	d7, d0, d6
   12f2c:	vadd.f64	d7, d7, d6
   12f30:	vmul.f64	d7, d7, d3
   12f34:	vsub.f64	d5, d7, d6
   12f38:	vcmpe.f64	d5, d4
   12f3c:	vmrs	APSR_nzcv, fpscr
   12f40:	vnegmi.f64	d5, d5
   12f44:	vmov.f64	d6, d7
   12f48:	vcmpe.f64	d1, d5
   12f4c:	vmrs	APSR_nzcv, fpscr
   12f50:	bmi	12f28 <__assert_fail@plt+0x1af4>
   12f54:	vmov.f64	d0, d7
   12f58:	bx	lr
   12f5c:	vldr	d7, [pc, #20]	; 12f78 <__assert_fail@plt+0x1b44>
   12f60:	b	12f54 <__assert_fail@plt+0x1b20>
   12f64:	vldr	d7, [pc, #12]	; 12f78 <__assert_fail@plt+0x1b44>
   12f68:	b	12f54 <__assert_fail@plt+0x1b20>
   12f6c:	nop			; (mov r0, r0)
   12f70:	andeq	r0, r0, r0
   12f74:	svccc	0x00e00000
	...
   12f80:	mvn	r0, r0
   12f84:	lsr	r0, r0, #31
   12f88:	bx	lr
   12f8c:	push	{r4, lr}
   12f90:	mov	r4, r0
   12f94:	bic	r3, r2, #-2147483648	; 0x80000000
   12f98:	cmp	r2, #0
   12f9c:	ldrge	r2, [pc, #12]	; 12fb0 <__assert_fail@plt+0x1b7c>
   12fa0:	ldrlt	r2, [pc, #12]	; 12fb4 <__assert_fail@plt+0x1b80>
   12fa4:	bl	112f0 <snprintf@plt>
   12fa8:	mov	r0, r4
   12fac:	pop	{r4, pc}
   12fb0:	andeq	sl, r1, r0, lsl r5
   12fb4:	andeq	sl, r1, r4, lsl r5
   12fb8:	push	{r4, lr}
   12fbc:	mov	r4, r0
   12fc0:	ldr	r3, [r0, #80]	; 0x50
   12fc4:	cmp	r3, #0
   12fc8:	beq	12fe0 <__assert_fail@plt+0x1bac>
   12fcc:	ldr	r3, [r4, #76]	; 0x4c
   12fd0:	cmp	r3, #0
   12fd4:	beq	13008 <__assert_fail@plt+0x1bd4>
   12fd8:	mov	r0, #0
   12fdc:	pop	{r4, pc}
   12fe0:	cmp	r1, #0
   12fe4:	ldr	r0, [r0, #56]	; 0x38
   12fe8:	addne	r0, r0, #8
   12fec:	addeq	r0, r0, #80	; 0x50
   12ff0:	bl	18324 <argp_parse@@Base+0x17fc>
   12ff4:	str	r0, [r4, #80]	; 0x50
   12ff8:	cmp	r0, #0
   12ffc:	bne	12fcc <__assert_fail@plt+0x1b98>
   13000:	mvn	r0, #0
   13004:	pop	{r4, pc}
   13008:	ldr	r0, [r4, #72]	; 0x48
   1300c:	bl	18324 <argp_parse@@Base+0x17fc>
   13010:	str	r0, [r4, #76]	; 0x4c
   13014:	cmp	r0, #0
   13018:	beq	13030 <__assert_fail@plt+0x1bfc>
   1301c:	ldr	r2, [r4, #72]	; 0x48
   13020:	mov	r1, #0
   13024:	bl	11314 <memset@plt>
   13028:	mov	r0, #0
   1302c:	pop	{r4, pc}
   13030:	mvn	r0, #0
   13034:	pop	{r4, pc}
   13038:	push	{r4, r5, r6, r7, r8, lr}
   1303c:	mov	r8, r0
   13040:	mov	r7, r1
   13044:	mov	r4, r2
   13048:	mov	r5, r3
   1304c:	ldrb	r1, [sp, #24]
   13050:	bl	12fb8 <__assert_fail@plt+0x1b84>
   13054:	subs	r6, r0, #0
   13058:	bne	1308c <__assert_fail@plt+0x1c58>
   1305c:	add	r3, r4, r5
   13060:	ldr	r2, [r8, #56]	; 0x38
   13064:	cmp	r2, r3
   13068:	bcc	13094 <__assert_fail@plt+0x1c60>
   1306c:	ldr	r0, [r8, #80]	; 0x50
   13070:	add	r0, r0, #8
   13074:	mov	r2, r5
   13078:	mov	r1, r7
   1307c:	add	r0, r0, r4
   13080:	bl	11188 <memcpy@plt>
   13084:	mov	r0, r6
   13088:	pop	{r4, r5, r6, r7, r8, pc}
   1308c:	mvn	r6, #0
   13090:	b	13084 <__assert_fail@plt+0x1c50>
   13094:	mvn	r6, #0
   13098:	b	13084 <__assert_fail@plt+0x1c50>
   1309c:	str	r1, [r0, #8]
   130a0:	bx	lr
   130a4:	push	{lr}		; (str lr, [sp, #-4]!)
   130a8:	sub	sp, sp, #20
   130ac:	add	ip, sp, #16
   130b0:	str	r2, [ip, #-4]!
   130b4:	ldr	r0, [r0]
   130b8:	str	r3, [sp]
   130bc:	mov	r3, ip
   130c0:	mov	r2, r1
   130c4:	mov	r1, #1
   130c8:	bl	1111c <setsockopt@plt>
   130cc:	add	sp, sp, #20
   130d0:	pop	{pc}		; (ldr pc, [sp], #4)
   130d4:	str	r1, [r0, #20]
   130d8:	bx	lr
   130dc:	push	{r4, lr}
   130e0:	mov	r4, r0
   130e4:	ldr	r0, [r0, #80]	; 0x50
   130e8:	cmp	r0, #0
   130ec:	beq	130fc <__assert_fail@plt+0x1cc8>
   130f0:	bl	1771c <argp_parse@@Base+0xbf4>
   130f4:	mov	r3, #0
   130f8:	str	r3, [r4, #80]	; 0x50
   130fc:	ldr	r0, [r4, #76]	; 0x4c
   13100:	cmp	r0, #0
   13104:	popeq	{r4, pc}
   13108:	bl	1771c <argp_parse@@Base+0xbf4>
   1310c:	mov	r3, #0
   13110:	str	r3, [r4, #76]	; 0x4c
   13114:	pop	{r4, pc}
   13118:	push	{r4, r5, lr}
   1311c:	sub	sp, sp, #12
   13120:	mov	r5, r0
   13124:	mov	r4, r1
   13128:	mov	r1, #0
   1312c:	mov	r0, sp
   13130:	bl	11218 <gettimeofday@plt>
   13134:	cmn	r4, #1
   13138:	moveq	r0, #0
   1313c:	beq	1315c <__assert_fail@plt+0x1d28>
   13140:	mov	r1, r5
   13144:	mov	r0, sp
   13148:	bl	12ea8 <__assert_fail@plt+0x1a74>
   1314c:	ldr	r0, [sp]
   13150:	cmp	r4, r0
   13154:	movgt	r0, #0
   13158:	movle	r0, #1
   1315c:	add	sp, sp, #12
   13160:	pop	{r4, r5, pc}
   13164:	push	{r4, r5, r6, lr}
   13168:	sub	sp, sp, #320	; 0x140
   1316c:	mov	r4, r0
   13170:	mov	r5, r1
   13174:	mov	r3, #1
   13178:	str	r3, [sp, #8]
   1317c:	mov	r3, #0
   13180:	str	r3, [sp, #4]
   13184:	str	r3, [sp]
   13188:	mov	r3, #46	; 0x2e
   1318c:	add	r2, sp, #272	; 0x110
   13190:	bl	1135c <getnameinfo@plt>
   13194:	cmp	r0, #0
   13198:	beq	131e8 <__assert_fail@plt+0x1db4>
   1319c:	cmn	r0, #11
   131a0:	beq	131d4 <__assert_fail@plt+0x1da0>
   131a4:	bl	11170 <gai_strerror@plt>
   131a8:	mov	r2, r0
   131ac:	ldr	r1, [pc, #216]	; 1328c <__assert_fail@plt+0x1e58>
   131b0:	ldr	r3, [pc, #216]	; 13290 <__assert_fail@plt+0x1e5c>
   131b4:	ldr	r0, [r3]
   131b8:	bl	112d8 <fprintf@plt>
   131bc:	ldr	r0, [pc, #208]	; 13294 <__assert_fail@plt+0x1e60>
   131c0:	bl	1828c <argp_parse@@Base+0x1764>
   131c4:	mov	r4, r0
   131c8:	mov	r0, r4
   131cc:	add	sp, sp, #320	; 0x140
   131d0:	pop	{r4, r5, r6, pc}
   131d4:	bl	112e4 <__errno_location@plt>
   131d8:	ldr	r0, [r0]
   131dc:	bl	11260 <strerror@plt>
   131e0:	mov	r2, r0
   131e4:	b	131ac <__assert_fail@plt+0x1d78>
   131e8:	ldr	r3, [pc, #168]	; 13298 <__assert_fail@plt+0x1e64>
   131ec:	ldr	r3, [r3]
   131f0:	tst	r3, #4
   131f4:	bne	1326c <__assert_fail@plt+0x1e38>
   131f8:	mov	r3, #40	; 0x28
   131fc:	str	r3, [sp, #8]
   13200:	mov	r3, #0
   13204:	str	r3, [sp, #4]
   13208:	str	r3, [sp]
   1320c:	mov	r3, #256	; 0x100
   13210:	add	r2, sp, #16
   13214:	mov	r1, r5
   13218:	mov	r0, r4
   1321c:	bl	1135c <getnameinfo@plt>
   13220:	cmp	r0, #0
   13224:	bne	1327c <__assert_fail@plt+0x1e48>
   13228:	add	r6, sp, #272	; 0x110
   1322c:	mov	r0, r6
   13230:	bl	112c0 <strlen@plt>
   13234:	mov	r5, r0
   13238:	add	r0, sp, #16
   1323c:	bl	112c0 <strlen@plt>
   13240:	add	r5, r5, r0
   13244:	add	r5, r5, #4
   13248:	mov	r0, r5
   1324c:	bl	17d04 <argp_parse@@Base+0x11dc>
   13250:	mov	r4, r0
   13254:	str	r6, [sp]
   13258:	add	r3, sp, #16
   1325c:	ldr	r2, [pc, #56]	; 1329c <__assert_fail@plt+0x1e68>
   13260:	mov	r1, r5
   13264:	bl	112f0 <snprintf@plt>
   13268:	b	131c8 <__assert_fail@plt+0x1d94>
   1326c:	add	r0, sp, #272	; 0x110
   13270:	bl	1828c <argp_parse@@Base+0x1764>
   13274:	mov	r4, r0
   13278:	b	131c8 <__assert_fail@plt+0x1d94>
   1327c:	add	r0, sp, #272	; 0x110
   13280:	bl	1828c <argp_parse@@Base+0x1764>
   13284:	mov	r4, r0
   13288:	b	131c8 <__assert_fail@plt+0x1d94>
   1328c:	ldrdeq	r9, [r1], -r0
   13290:	ldrdeq	ip, [r2], -r8
   13294:	andeq	r9, r1, r8, ror #31
   13298:	andeq	ip, r2, ip, asr #8
   1329c:	andeq	sl, r1, ip, lsl r5
   132a0:	push	{r4, r5, r6, r7, lr}
   132a4:	sub	sp, sp, #20
   132a8:	str	r0, [sp, #12]
   132ac:	ldr	r3, [pc, #188]	; 13370 <__assert_fail@plt+0x1f3c>
   132b0:	ldr	r3, [r3]
   132b4:	tst	r3, #4
   132b8:	bne	13338 <__assert_fail@plt+0x1f04>
   132bc:	mov	r2, #2
   132c0:	mov	r1, #4
   132c4:	add	r0, sp, #12
   132c8:	bl	111d0 <gethostbyaddr@plt>
   132cc:	subs	r6, r0, #0
   132d0:	beq	13348 <__assert_fail@plt+0x1f14>
   132d4:	ldr	r0, [sp, #12]
   132d8:	bl	111ac <inet_ntoa@plt>
   132dc:	mov	r7, r0
   132e0:	bl	112c0 <strlen@plt>
   132e4:	mov	r4, r0
   132e8:	ldr	r0, [r6]
   132ec:	cmp	r0, #0
   132f0:	addeq	r4, r4, #1
   132f4:	beq	13304 <__assert_fail@plt+0x1ed0>
   132f8:	bl	112c0 <strlen@plt>
   132fc:	add	r4, r4, #5
   13300:	add	r4, r4, r0
   13304:	mov	r0, r4
   13308:	bl	17d04 <argp_parse@@Base+0x11dc>
   1330c:	mov	r5, r0
   13310:	ldr	r3, [r6]
   13314:	cmp	r3, #0
   13318:	beq	1335c <__assert_fail@plt+0x1f28>
   1331c:	str	r7, [sp]
   13320:	ldr	r2, [pc, #76]	; 13374 <__assert_fail@plt+0x1f40>
   13324:	mov	r1, r4
   13328:	bl	112f0 <snprintf@plt>
   1332c:	mov	r0, r5
   13330:	add	sp, sp, #20
   13334:	pop	{r4, r5, r6, r7, pc}
   13338:	bl	111ac <inet_ntoa@plt>
   1333c:	bl	1828c <argp_parse@@Base+0x1764>
   13340:	mov	r5, r0
   13344:	b	1332c <__assert_fail@plt+0x1ef8>
   13348:	ldr	r0, [sp, #12]
   1334c:	bl	111ac <inet_ntoa@plt>
   13350:	bl	1828c <argp_parse@@Base+0x1764>
   13354:	mov	r5, r0
   13358:	b	1332c <__assert_fail@plt+0x1ef8>
   1335c:	mov	r3, r7
   13360:	ldr	r2, [pc, #16]	; 13378 <__assert_fail@plt+0x1f44>
   13364:	mov	r1, r4
   13368:	bl	112f0 <snprintf@plt>
   1336c:	b	1332c <__assert_fail@plt+0x1ef8>
   13370:	andeq	ip, r2, ip, asr #8
   13374:	andeq	sl, r1, ip, lsl r5
   13378:	ldrdeq	r9, [r1], -r0
   1337c:	ldr	r3, [r0]
   13380:	ldr	r2, [r0, #4]
   13384:	cmp	r2, #0
   13388:	beq	133c4 <__assert_fail@plt+0x1f90>
   1338c:	add	r3, r3, #24
   13390:	b	133a0 <__assert_fail@plt+0x1f6c>
   13394:	add	r3, r3, #24
   13398:	subs	r2, r2, #1
   1339c:	beq	133bc <__assert_fail@plt+0x1f88>
   133a0:	ldr	r0, [r3, #-24]	; 0xffffffe8
   133a4:	cmp	r0, #0
   133a8:	beq	13394 <__assert_fail@plt+0x1f60>
   133ac:	ldr	r1, [r3, #-12]
   133b0:	tst	r1, #2
   133b4:	bne	13394 <__assert_fail@plt+0x1f60>
   133b8:	bx	lr
   133bc:	mov	r0, #0
   133c0:	bx	lr
   133c4:	mov	r0, #0
   133c8:	bx	lr
   133cc:	ldr	r2, [r0, #8]
   133d0:	cmp	r2, #0
   133d4:	beq	133e0 <__assert_fail@plt+0x1fac>
   133d8:	mov	r0, #0
   133dc:	bx	lr
   133e0:	ldr	r2, [r1, #8]
   133e4:	cmp	r2, #0
   133e8:	bne	133d8 <__assert_fail@plt+0x1fa4>
   133ec:	ldr	r2, [r0, #12]
   133f0:	ldr	r1, [r1, #12]
   133f4:	orr	r2, r2, r1
   133f8:	tst	r2, #16
   133fc:	ldreq	r2, [r3]
   13400:	addeq	r1, r2, #1
   13404:	streq	r1, [r3]
   13408:	ldreq	r3, [r0, #4]
   1340c:	strbeq	r3, [r2]
   13410:	b	133d8 <__assert_fail@plt+0x1fa4>
   13414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13418:	sub	sp, sp, #12
   1341c:	ldr	r4, [r0]
   13420:	ldr	r9, [r0, #8]
   13424:	ldr	r5, [r0, #4]
   13428:	cmp	r5, #0
   1342c:	beq	13480 <__assert_fail@plt+0x204c>
   13430:	str	r3, [sp, #4]
   13434:	str	r2, [sp]
   13438:	mov	fp, r1
   1343c:	mov	sl, r4
   13440:	mov	r8, #0
   13444:	b	134c0 <__assert_fail@plt+0x208c>
   13448:	and	r3, r6, #4
   1344c:	cmp	r3, #0
   13450:	moveq	sl, r4
   13454:	tst	r6, #2
   13458:	beq	13464 <__assert_fail@plt+0x2030>
   1345c:	add	r9, r9, #1
   13460:	b	1349c <__assert_fail@plt+0x2068>
   13464:	ldr	r3, [sp, #4]
   13468:	ldr	r2, [sp]
   1346c:	mov	r1, sl
   13470:	mov	r0, r4
   13474:	blx	fp
   13478:	mov	r8, r0
   1347c:	b	1345c <__assert_fail@plt+0x2028>
   13480:	mov	r8, #0
   13484:	mov	r0, r8
   13488:	add	sp, sp, #12
   1348c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13490:	ldrb	r3, [r9]
   13494:	cmp	r3, r7
   13498:	beq	13448 <__assert_fail@plt+0x2014>
   1349c:	add	r4, r4, #24
   134a0:	subs	r5, r5, #1
   134a4:	movne	r3, #1
   134a8:	moveq	r3, #0
   134ac:	cmp	r8, #0
   134b0:	movne	r3, #0
   134b4:	andeq	r3, r3, #1
   134b8:	cmp	r3, #0
   134bc:	beq	13484 <__assert_fail@plt+0x2050>
   134c0:	ldr	r6, [r4, #12]
   134c4:	tst	r6, #8
   134c8:	bne	1349c <__assert_fail@plt+0x2068>
   134cc:	ldr	r7, [r4, #4]
   134d0:	sub	r3, r7, #1
   134d4:	cmp	r3, #254	; 0xfe
   134d8:	bhi	1349c <__assert_fail@plt+0x2068>
   134dc:	bl	11290 <__ctype_b_loc@plt>
   134e0:	ldr	r2, [r0]
   134e4:	lsl	r3, r7, #1
   134e8:	ldrh	r3, [r2, r3]
   134ec:	tst	r3, #16384	; 0x4000
   134f0:	bne	13490 <__assert_fail@plt+0x205c>
   134f4:	b	1349c <__assert_fail@plt+0x2068>
   134f8:	push	{r4, r5, r6, lr}
   134fc:	ldr	r4, [r0, #12]
   13500:	ands	r4, r4, #8
   13504:	movne	r4, #0
   13508:	bne	13538 <__assert_fail@plt+0x2104>
   1350c:	ldr	r5, [r0, #4]
   13510:	sub	r3, r5, #1
   13514:	cmp	r3, #254	; 0xfe
   13518:	bhi	13538 <__assert_fail@plt+0x2104>
   1351c:	bl	11290 <__ctype_b_loc@plt>
   13520:	ldr	r2, [r0]
   13524:	lsl	r3, r5, #1
   13528:	ldrh	r3, [r2, r3]
   1352c:	and	r3, r3, #16384	; 0x4000
   13530:	cmp	r3, #0
   13534:	movne	r4, r5
   13538:	mov	r0, r4
   1353c:	pop	{r4, r5, r6, pc}
   13540:	push	{r4, lr}
   13544:	mov	r4, r0
   13548:	bl	11290 <__ctype_b_loc@plt>
   1354c:	b	13558 <__assert_fail@plt+0x2124>
   13550:	add	r3, r3, #1
   13554:	str	r3, [r4]
   13558:	ldr	r3, [r4]
   1355c:	ldrb	r2, [r3]
   13560:	ldr	ip, [r0]
   13564:	lsl	r1, r2, #1
   13568:	ldrh	r1, [ip, r1]
   1356c:	tst	r1, #8192	; 0x2000
   13570:	bne	13550 <__assert_fail@plt+0x211c>
   13574:	subs	ip, r2, #45	; 0x2d
   13578:	movne	ip, #1
   1357c:	cmp	r2, #0
   13580:	beq	135b4 <__assert_fail@plt+0x2180>
   13584:	tst	r1, #8
   13588:	bne	135b4 <__assert_fail@plt+0x2180>
   1358c:	add	r3, r3, #1
   13590:	str	r3, [r4]
   13594:	ldrb	r2, [r3]
   13598:	cmp	r2, #0
   1359c:	beq	135b4 <__assert_fail@plt+0x2180>
   135a0:	ldr	r1, [r0]
   135a4:	lsl	r2, r2, #1
   135a8:	ldrh	r2, [r1, r2]
   135ac:	tst	r2, #8
   135b0:	beq	1358c <__assert_fail@plt+0x2158>
   135b4:	mov	r0, ip
   135b8:	pop	{r4, pc}
   135bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135c0:	add	fp, sp, #32
   135c4:	sub	sp, sp, #12
   135c8:	ldr	r5, [r0, #4]
   135cc:	cmp	r5, #0
   135d0:	bne	135dc <__assert_fail@plt+0x21a8>
   135d4:	sub	sp, fp, #32
   135d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135dc:	mov	r9, r1
   135e0:	mov	r6, r0
   135e4:	ldr	r0, [r0, #8]
   135e8:	bl	112c0 <strlen@plt>
   135ec:	add	r3, r0, #15
   135f0:	bic	r3, r3, #7
   135f4:	sub	sp, sp, r3
   135f8:	mov	sl, sp
   135fc:	sub	r7, fp, #36	; 0x24
   13600:	str	sp, [r7, #-4]!
   13604:	ldr	r4, [r6]
   13608:	ldr	r8, [pc, #336]	; 13760 <__assert_fail@plt+0x232c>
   1360c:	ldr	r2, [r4, #20]
   13610:	mov	r3, r7
   13614:	ldr	r2, [r2, #24]
   13618:	mov	r1, r8
   1361c:	mov	r0, r4
   13620:	bl	13414 <__assert_fail@plt+0x1fe0>
   13624:	add	r4, r4, #28
   13628:	subs	r5, r5, #1
   1362c:	bne	1360c <__assert_fail@plt+0x21d8>
   13630:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13634:	cmp	sl, r3
   13638:	bcc	13690 <__assert_fail@plt+0x225c>
   1363c:	ldr	r4, [r6]
   13640:	ldr	r5, [r6, #4]
   13644:	cmp	r5, #0
   13648:	beq	135d4 <__assert_fail@plt+0x21a0>
   1364c:	ldr	r7, [pc, #272]	; 13764 <__assert_fail@plt+0x2330>
   13650:	ldr	r2, [r4, #20]
   13654:	mov	r3, r9
   13658:	ldr	r2, [r2, #24]
   1365c:	mov	r1, r7
   13660:	mov	r0, r4
   13664:	bl	13414 <__assert_fail@plt+0x1fe0>
   13668:	add	r4, r4, #28
   1366c:	subs	r5, r5, #1
   13670:	bne	13650 <__assert_fail@plt+0x221c>
   13674:	ldr	r7, [r6]
   13678:	ldr	r8, [r6, #4]
   1367c:	cmp	r8, #0
   13680:	beq	135d4 <__assert_fail@plt+0x21a0>
   13684:	add	r7, r7, #28
   13688:	ldr	sl, [pc, #216]	; 13768 <__assert_fail@plt+0x2334>
   1368c:	b	13748 <__assert_fail@plt+0x2314>
   13690:	add	r2, r3, #1
   13694:	str	r2, [fp, #-40]	; 0xffffffd8
   13698:	mov	r2, #0
   1369c:	strb	r2, [r3]
   136a0:	mov	r2, sl
   136a4:	ldr	r1, [pc, #192]	; 1376c <__assert_fail@plt+0x2338>
   136a8:	mov	r0, r9
   136ac:	bl	18ab0 <argp_parse@@Base+0x1f88>
   136b0:	b	1363c <__assert_fail@plt+0x2208>
   136b4:	tst	r1, #16
   136b8:	bne	136dc <__assert_fail@plt+0x22a8>
   136bc:	ldr	r3, [r6, #8]
   136c0:	cmp	r3, #0
   136c4:	beq	1372c <__assert_fail@plt+0x22f8>
   136c8:	tst	r1, #1
   136cc:	ldrne	r1, [pc, #156]	; 13770 <__assert_fail@plt+0x233c>
   136d0:	moveq	r1, sl
   136d4:	mov	r0, r9
   136d8:	bl	18ab0 <argp_parse@@Base+0x1f88>
   136dc:	add	r4, r4, #24
   136e0:	subs	r5, r5, #1
   136e4:	beq	1373c <__assert_fail@plt+0x2308>
   136e8:	ldr	r2, [r4]
   136ec:	cmp	r2, #0
   136f0:	beq	136dc <__assert_fail@plt+0x22a8>
   136f4:	ldr	r1, [r4, #12]
   136f8:	and	r3, r1, #4
   136fc:	cmp	r3, #0
   13700:	moveq	r6, r4
   13704:	tst	r1, #2
   13708:	bne	136dc <__assert_fail@plt+0x22a8>
   1370c:	ldr	r3, [r4, #8]
   13710:	ldr	r0, [r6, #12]
   13714:	orr	r1, r1, r0
   13718:	cmp	r3, #0
   1371c:	beq	136b4 <__assert_fail@plt+0x2280>
   13720:	tst	r1, #16
   13724:	beq	136c8 <__assert_fail@plt+0x2294>
   13728:	b	136dc <__assert_fail@plt+0x22a8>
   1372c:	ldr	r1, [pc, #64]	; 13774 <__assert_fail@plt+0x2340>
   13730:	mov	r0, r9
   13734:	bl	18ab0 <argp_parse@@Base+0x1f88>
   13738:	b	136dc <__assert_fail@plt+0x22a8>
   1373c:	add	r7, r7, #28
   13740:	subs	r8, r8, #1
   13744:	beq	135d4 <__assert_fail@plt+0x21a0>
   13748:	ldr	r4, [r7, #-28]	; 0xffffffe4
   1374c:	ldr	r5, [r7, #-24]	; 0xffffffe8
   13750:	cmp	r5, #0
   13754:	beq	1373c <__assert_fail@plt+0x2308>
   13758:	mov	r6, r4
   1375c:	b	136e8 <__assert_fail@plt+0x22b4>
   13760:	andeq	r3, r1, ip, asr #7
   13764:	andeq	r3, r1, ip, lsl #20
   13768:	andeq	sl, r1, r4, ror #11
   1376c:	andeq	sl, r1, ip, asr #11
   13770:	ldrdeq	sl, [r1], -r4
   13774:	strdeq	sl, [r1], -r0
   13778:	push	{r4, r5, r6, lr}
   1377c:	mov	r5, r0
   13780:	ldr	r0, [r0, #12]
   13784:	cmp	r0, #0
   13788:	beq	137a0 <__assert_fail@plt+0x236c>
   1378c:	ldr	r4, [r0, #24]
   13790:	bl	1771c <argp_parse@@Base+0xbf4>
   13794:	mov	r0, r4
   13798:	cmp	r4, #0
   1379c:	bne	1378c <__assert_fail@plt+0x2358>
   137a0:	ldr	r3, [r5, #4]
   137a4:	cmp	r3, #0
   137a8:	bne	137b8 <__assert_fail@plt+0x2384>
   137ac:	mov	r0, r5
   137b0:	bl	1771c <argp_parse@@Base+0xbf4>
   137b4:	pop	{r4, r5, r6, pc}
   137b8:	ldr	r0, [r5]
   137bc:	bl	1771c <argp_parse@@Base+0xbf4>
   137c0:	ldr	r0, [r5, #8]
   137c4:	bl	1771c <argp_parse@@Base+0xbf4>
   137c8:	b	137ac <__assert_fail@plt+0x2378>
   137cc:	push	{r4, r5, r6, r7, r8, lr}
   137d0:	mov	r6, r1
   137d4:	ldr	r7, [r0]
   137d8:	ldr	r3, [r0, #4]
   137dc:	sub	r8, r3, #1
   137e0:	cmp	r3, #0
   137e4:	bne	13840 <__assert_fail@plt+0x240c>
   137e8:	mov	r7, #0
   137ec:	b	13828 <__assert_fail@plt+0x23f4>
   137f0:	sub	r5, r5, #1
   137f4:	add	r4, r4, #24
   137f8:	cmn	r5, #1
   137fc:	beq	13830 <__assert_fail@plt+0x23fc>
   13800:	ldr	r0, [r4, #-24]	; 0xffffffe8
   13804:	cmp	r0, #0
   13808:	beq	137f0 <__assert_fail@plt+0x23bc>
   1380c:	ldr	r3, [r4, #-12]
   13810:	tst	r3, #2
   13814:	bne	137f0 <__assert_fail@plt+0x23bc>
   13818:	mov	r1, r6
   1381c:	bl	11104 <strcmp@plt>
   13820:	cmp	r0, #0
   13824:	bne	137f0 <__assert_fail@plt+0x23bc>
   13828:	mov	r0, r7
   1382c:	pop	{r4, r5, r6, r7, r8, pc}
   13830:	add	r7, r7, #28
   13834:	sub	r8, r8, #1
   13838:	cmn	r8, #1
   1383c:	beq	1385c <__assert_fail@plt+0x2428>
   13840:	ldr	r4, [r7]
   13844:	ldr	r3, [r7, #4]
   13848:	sub	r5, r3, #1
   1384c:	cmp	r3, #0
   13850:	beq	13830 <__assert_fail@plt+0x23fc>
   13854:	add	r4, r4, #24
   13858:	b	13800 <__assert_fail@plt+0x23cc>
   1385c:	mov	r7, #0
   13860:	b	13828 <__assert_fail@plt+0x23f4>
   13864:	push	{r4, r5, r6, lr}
   13868:	ldr	r4, [r0, #16]
   1386c:	ldr	r0, [r0, #8]
   13870:	cmp	r0, #0
   13874:	moveq	r5, #0
   13878:	beq	1388c <__assert_fail@plt+0x2458>
   1387c:	mov	r1, #10
   13880:	bl	112cc <strchr@plt>
   13884:	adds	r5, r0, #0
   13888:	movne	r5, #1
   1388c:	cmp	r4, #0
   13890:	beq	138b4 <__assert_fail@plt+0x2480>
   13894:	ldr	r0, [r4]
   13898:	cmp	r0, #0
   1389c:	beq	138b4 <__assert_fail@plt+0x2480>
   138a0:	bl	13864 <__assert_fail@plt+0x2430>
   138a4:	add	r5, r5, r0
   138a8:	ldr	r0, [r4, #16]!
   138ac:	cmp	r0, #0
   138b0:	bne	138a0 <__assert_fail@plt+0x246c>
   138b4:	mov	r0, r5
   138b8:	pop	{r4, r5, r6, pc}
   138bc:	push	{r4, r5, r6, r7, r8, lr}
   138c0:	mov	r4, r0
   138c4:	mov	r5, r1
   138c8:	ldr	r3, [r0, #28]
   138cc:	ldr	r2, [r0, #24]
   138d0:	sub	r3, r3, r2
   138d4:	ldr	r2, [r0, #16]
   138d8:	cmp	r3, r2
   138dc:	bhi	138f8 <__assert_fail@plt+0x24c4>
   138e0:	ldr	r3, [r4, #20]
   138e4:	cmp	r3, #0
   138e8:	subge	r5, r5, r3
   138ec:	mov	r6, #32
   138f0:	mov	r7, #1
   138f4:	b	13914 <__assert_fail@plt+0x24e0>
   138f8:	bl	1841c <argp_parse@@Base+0x18f4>
   138fc:	b	138e0 <__assert_fail@plt+0x24ac>
   13900:	ldr	r3, [r4, #28]
   13904:	add	r2, r3, #1
   13908:	str	r2, [r4, #28]
   1390c:	strb	r6, [r3]
   13910:	sub	r5, r5, #1
   13914:	cmp	r5, #0
   13918:	ble	13944 <__assert_fail@plt+0x2510>
   1391c:	ldr	r2, [r4, #28]
   13920:	ldr	r3, [r4, #32]
   13924:	cmp	r2, r3
   13928:	bcc	13900 <__assert_fail@plt+0x24cc>
   1392c:	mov	r1, r7
   13930:	mov	r0, r4
   13934:	bl	189c0 <argp_parse@@Base+0x1e98>
   13938:	cmp	r0, #0
   1393c:	beq	13910 <__assert_fail@plt+0x24dc>
   13940:	b	13900 <__assert_fail@plt+0x24cc>
   13944:	pop	{r4, r5, r6, r7, r8, pc}
   13948:	push	{r4, r5, r6, lr}
   1394c:	mov	r4, r0
   13950:	mov	r5, r1
   13954:	ldr	r3, [r0, #28]
   13958:	ldr	r2, [r0, #24]
   1395c:	sub	r3, r3, r2
   13960:	ldr	r2, [r0, #16]
   13964:	cmp	r3, r2
   13968:	bhi	139ac <__assert_fail@plt+0x2578>
   1396c:	ldr	r3, [r4, #20]
   13970:	cmp	r3, #0
   13974:	addge	r5, r5, r3
   13978:	ldr	r3, [r4, #8]
   1397c:	cmp	r5, r3
   13980:	bcc	139cc <__assert_fail@plt+0x2598>
   13984:	ldr	r2, [r4, #28]
   13988:	ldr	r3, [r4, #32]
   1398c:	cmp	r2, r3
   13990:	bcs	139b4 <__assert_fail@plt+0x2580>
   13994:	ldr	r3, [r4, #28]
   13998:	add	r2, r3, #1
   1399c:	str	r2, [r4, #28]
   139a0:	mov	r2, #10
   139a4:	strb	r2, [r3]
   139a8:	pop	{r4, r5, r6, pc}
   139ac:	bl	1841c <argp_parse@@Base+0x18f4>
   139b0:	b	1396c <__assert_fail@plt+0x2538>
   139b4:	mov	r1, #1
   139b8:	mov	r0, r4
   139bc:	bl	189c0 <argp_parse@@Base+0x1e98>
   139c0:	cmp	r0, #0
   139c4:	popeq	{r4, r5, r6, pc}
   139c8:	b	13994 <__assert_fail@plt+0x2560>
   139cc:	ldr	r2, [r4, #28]
   139d0:	ldr	r3, [r4, #32]
   139d4:	cmp	r2, r3
   139d8:	bcs	139f4 <__assert_fail@plt+0x25c0>
   139dc:	ldr	r3, [r4, #28]
   139e0:	add	r2, r3, #1
   139e4:	str	r2, [r4, #28]
   139e8:	mov	r2, #32
   139ec:	strb	r2, [r3]
   139f0:	pop	{r4, r5, r6, pc}
   139f4:	mov	r1, #1
   139f8:	mov	r0, r4
   139fc:	bl	189c0 <argp_parse@@Base+0x1e98>
   13a00:	cmp	r0, #0
   13a04:	bne	139dc <__assert_fail@plt+0x25a8>
   13a08:	pop	{r4, r5, r6, pc}
   13a0c:	push	{r4, r5, r6, lr}
   13a10:	ldr	r5, [r0, #8]
   13a14:	ldr	r2, [r0, #12]
   13a18:	ldr	ip, [r1, #12]
   13a1c:	orr	r2, r2, ip
   13a20:	cmp	r5, #0
   13a24:	beq	13a70 <__assert_fail@plt+0x263c>
   13a28:	tst	r2, #16
   13a2c:	bne	13a68 <__assert_fail@plt+0x2634>
   13a30:	mov	r6, r3
   13a34:	mov	r4, r0
   13a38:	tst	r2, #1
   13a3c:	bne	13a80 <__assert_fail@plt+0x264c>
   13a40:	mov	r0, r5
   13a44:	bl	112c0 <strlen@plt>
   13a48:	add	r1, r0, #6
   13a4c:	mov	r0, r6
   13a50:	bl	13948 <__assert_fail@plt+0x2514>
   13a54:	mov	r3, r5
   13a58:	ldr	r2, [r4, #4]
   13a5c:	ldr	r1, [pc, #52]	; 13a98 <__assert_fail@plt+0x2664>
   13a60:	mov	r0, r6
   13a64:	bl	18ab0 <argp_parse@@Base+0x1f88>
   13a68:	mov	r0, #0
   13a6c:	pop	{r4, r5, r6, pc}
   13a70:	ldr	r5, [r1, #8]
   13a74:	cmp	r5, #0
   13a78:	beq	13a68 <__assert_fail@plt+0x2634>
   13a7c:	b	13a28 <__assert_fail@plt+0x25f4>
   13a80:	mov	r3, r5
   13a84:	ldr	r2, [r0, #4]
   13a88:	ldr	r1, [pc, #12]	; 13a9c <__assert_fail@plt+0x2668>
   13a8c:	mov	r0, r6
   13a90:	bl	18ab0 <argp_parse@@Base+0x1f88>
   13a94:	b	13a68 <__assert_fail@plt+0x2634>
   13a98:	andeq	sl, r1, r4, lsl #12
   13a9c:	strdeq	sl, [r1], -r8
   13aa0:	push	{r4, r5, r6, lr}
   13aa4:	subs	r5, r2, #0
   13aa8:	popeq	{r4, r5, r6, pc}
   13aac:	ldr	ip, [r5, #20]
   13ab0:	cmp	ip, #0
   13ab4:	popeq	{r4, r5, r6, pc}
   13ab8:	mov	r6, r1
   13abc:	mov	r4, r0
   13ac0:	mov	r1, r3
   13ac4:	mov	r0, r5
   13ac8:	bl	1759c <argp_parse@@Base+0xa74>
   13acc:	ldr	r3, [r5, #20]
   13ad0:	mov	r2, r0
   13ad4:	mov	r1, r4
   13ad8:	mov	r0, r6
   13adc:	blx	r3
   13ae0:	pop	{r4, r5, r6, pc}
   13ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ae8:	sub	sp, sp, #28
   13aec:	str	r1, [sp, #16]
   13af0:	mov	r8, r2
   13af4:	mov	r4, r3
   13af8:	ldr	r5, [sp, #64]	; 0x40
   13afc:	ldr	r3, [r2]
   13b00:	mov	r6, r3
   13b04:	str	r3, [sp, #20]
   13b08:	ldr	sl, [r0, #16]
   13b0c:	ldr	r2, [r0, #8]
   13b10:	mov	ip, r2
   13b14:	str	r2, [sp, #12]
   13b18:	mov	r3, r1
   13b1c:	mov	r2, r0
   13b20:	ldr	r1, [pc, #424]	; 13cd0 <__assert_fail@plt+0x289c>
   13b24:	mov	r0, ip
   13b28:	bl	13aa0 <__assert_fail@plt+0x266c>
   13b2c:	subs	r3, r0, #0
   13b30:	str	r3, [sp, #8]
   13b34:	beq	13cbc <__assert_fail@plt+0x2888>
   13b38:	mov	r1, #10
   13b3c:	mov	r0, r3
   13b40:	bl	11158 <strchrnul@plt>
   13b44:	mov	r7, r0
   13b48:	ldrb	r3, [r0]
   13b4c:	cmp	r3, #0
   13b50:	beq	13c8c <__assert_fail@plt+0x2858>
   13b54:	ldrb	fp, [r6]
   13b58:	cmp	fp, #0
   13b5c:	ble	13c84 <__assert_fail@plt+0x2850>
   13b60:	mov	r6, #0
   13b64:	add	r9, r0, #1
   13b68:	mov	r1, #10
   13b6c:	mov	r0, r9
   13b70:	bl	11158 <strchrnul@plt>
   13b74:	add	r6, r6, #1
   13b78:	cmp	r6, fp
   13b7c:	bne	13b64 <__assert_fail@plt+0x2730>
   13b80:	mov	r7, r0
   13b84:	ldr	r3, [r8]
   13b88:	add	r3, r3, #1
   13b8c:	str	r3, [r8]
   13b90:	mov	fp, #1
   13b94:	add	r1, r7, #1
   13b98:	sub	r1, r1, r9
   13b9c:	mov	r0, r5
   13ba0:	bl	13948 <__assert_fail@plt+0x2514>
   13ba4:	sub	r6, r7, r9
   13ba8:	ldr	r3, [r5, #28]
   13bac:	add	r3, r3, r6
   13bb0:	ldr	r2, [r5, #32]
   13bb4:	cmp	r2, r3
   13bb8:	bcs	13bd0 <__assert_fail@plt+0x279c>
   13bbc:	mov	r1, r6
   13bc0:	mov	r0, r5
   13bc4:	bl	189c0 <argp_parse@@Base+0x1e98>
   13bc8:	cmp	r0, #0
   13bcc:	beq	13bec <__assert_fail@plt+0x27b8>
   13bd0:	mov	r2, r6
   13bd4:	mov	r1, r9
   13bd8:	ldr	r0, [r5, #28]
   13bdc:	bl	11188 <memcpy@plt>
   13be0:	ldr	r3, [r5, #28]
   13be4:	add	r6, r3, r6
   13be8:	str	r6, [r5, #28]
   13bec:	ldr	r3, [sp, #12]
   13bf0:	ldr	r2, [sp, #8]
   13bf4:	cmp	r3, r2
   13bf8:	bne	13c98 <__assert_fail@plt+0x2864>
   13bfc:	cmp	sl, #0
   13c00:	beq	13c40 <__assert_fail@plt+0x280c>
   13c04:	ldr	r0, [sl]
   13c08:	cmp	r0, #0
   13c0c:	beq	13c40 <__assert_fail@plt+0x280c>
   13c10:	mov	r3, r4
   13c14:	ldr	r4, [sp, #16]
   13c18:	str	r5, [sp]
   13c1c:	mov	r2, r8
   13c20:	mov	r1, r4
   13c24:	bl	13ae4 <__assert_fail@plt+0x26b0>
   13c28:	clz	r3, r0
   13c2c:	lsr	r3, r3, #5
   13c30:	ldr	r0, [sl, #16]!
   13c34:	cmp	r0, #0
   13c38:	bne	13c18 <__assert_fail@plt+0x27e4>
   13c3c:	mov	r4, r3
   13c40:	cmp	r4, #0
   13c44:	moveq	fp, #0
   13c48:	andne	fp, fp, #1
   13c4c:	cmp	fp, #0
   13c50:	beq	13c74 <__assert_fail@plt+0x2840>
   13c54:	ldrb	r3, [r7]
   13c58:	cmp	r3, #0
   13c5c:	bne	13ca4 <__assert_fail@plt+0x2870>
   13c60:	ldr	r2, [sp, #20]
   13c64:	ldrb	r3, [r2]
   13c68:	cmp	r3, #0
   13c6c:	movne	r3, #0
   13c70:	strbne	r3, [r2]
   13c74:	clz	r0, r4
   13c78:	lsr	r0, r0, #5
   13c7c:	add	sp, sp, #28
   13c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c84:	ldr	r9, [sp, #8]
   13c88:	b	13b84 <__assert_fail@plt+0x2750>
   13c8c:	ldr	r9, [sp, #8]
   13c90:	mov	fp, #0
   13c94:	b	13b94 <__assert_fail@plt+0x2760>
   13c98:	mov	r0, r2
   13c9c:	bl	1771c <argp_parse@@Base+0xbf4>
   13ca0:	b	13bfc <__assert_fail@plt+0x27c8>
   13ca4:	ldr	r2, [sp, #20]
   13ca8:	ldrb	r3, [r2]
   13cac:	add	r3, r3, #1
   13cb0:	strb	r3, [r2]
   13cb4:	mov	r4, #0
   13cb8:	b	13c74 <__assert_fail@plt+0x2840>
   13cbc:	cmp	sl, #0
   13cc0:	beq	13c74 <__assert_fail@plt+0x2840>
   13cc4:	ldr	r7, [sp, #8]
   13cc8:	mov	fp, #0
   13ccc:	b	13c04 <__assert_fail@plt+0x27d0>
   13cd0:	andeq	r0, r0, #6
   13cd4:	push	{r4, r5, r6, r7, r8, lr}
   13cd8:	mov	r7, r0
   13cdc:	mov	r4, r2
   13ce0:	ldr	r3, [r2, #16]
   13ce4:	mov	r2, r1
   13ce8:	ldr	r1, [pc, #448]	; 13eb0 <__assert_fail@plt+0x2a7c>
   13cec:	bl	13aa0 <__assert_fail@plt+0x266c>
   13cf0:	subs	r5, r0, #0
   13cf4:	beq	13e48 <__assert_fail@plt+0x2a14>
   13cf8:	ldrb	r3, [r5]
   13cfc:	cmp	r3, #0
   13d00:	beq	13e3c <__assert_fail@plt+0x2a08>
   13d04:	ldr	r3, [r4, #8]
   13d08:	ldr	r3, [r3]
   13d0c:	cmp	r3, #0
   13d10:	beq	13d3c <__assert_fail@plt+0x2908>
   13d14:	ldr	r6, [r4, #4]
   13d18:	ldr	r2, [r6, #28]
   13d1c:	ldr	r3, [r6, #32]
   13d20:	cmp	r2, r3
   13d24:	bcs	13e5c <__assert_fail@plt+0x2a28>
   13d28:	ldr	r3, [r6, #28]
   13d2c:	add	r2, r3, #1
   13d30:	str	r2, [r6, #28]
   13d34:	mov	r2, #10
   13d38:	strb	r2, [r3]
   13d3c:	ldr	r8, [pc, #368]	; 13eb4 <__assert_fail@plt+0x2a80>
   13d40:	ldr	r1, [r8, #24]
   13d44:	ldr	r0, [r4, #4]
   13d48:	bl	138bc <__assert_fail@plt+0x2488>
   13d4c:	ldr	r6, [r4, #4]
   13d50:	ldr	r8, [r8, #24]
   13d54:	ldr	r3, [r6, #28]
   13d58:	ldr	r2, [r6, #24]
   13d5c:	sub	r3, r3, r2
   13d60:	ldr	r2, [r6, #16]
   13d64:	cmp	r3, r2
   13d68:	bhi	13e74 <__assert_fail@plt+0x2a40>
   13d6c:	str	r8, [r6, #4]
   13d70:	ldr	r6, [r4, #4]
   13d74:	ldr	r3, [pc, #312]	; 13eb4 <__assert_fail@plt+0x2a80>
   13d78:	ldr	r8, [r3, #24]
   13d7c:	ldr	r3, [r6, #28]
   13d80:	ldr	r2, [r6, #24]
   13d84:	sub	r3, r3, r2
   13d88:	ldr	r2, [r6, #16]
   13d8c:	cmp	r3, r2
   13d90:	bhi	13e80 <__assert_fail@plt+0x2a4c>
   13d94:	str	r8, [r6, #12]
   13d98:	mov	r0, r5
   13d9c:	bl	112c0 <strlen@plt>
   13da0:	subs	r8, r0, #0
   13da4:	beq	13df0 <__assert_fail@plt+0x29bc>
   13da8:	ldr	r6, [r4, #4]
   13dac:	ldr	r3, [r6, #28]
   13db0:	add	r3, r3, r8
   13db4:	ldr	r2, [r6, #32]
   13db8:	cmp	r2, r3
   13dbc:	bcs	13dd4 <__assert_fail@plt+0x29a0>
   13dc0:	mov	r1, r8
   13dc4:	mov	r0, r6
   13dc8:	bl	189c0 <argp_parse@@Base+0x1e98>
   13dcc:	cmp	r0, #0
   13dd0:	beq	13df0 <__assert_fail@plt+0x29bc>
   13dd4:	mov	r2, r8
   13dd8:	mov	r1, r5
   13ddc:	ldr	r0, [r6, #28]
   13de0:	bl	11188 <memcpy@plt>
   13de4:	ldr	r3, [r6, #28]
   13de8:	add	r8, r3, r8
   13dec:	str	r8, [r6, #28]
   13df0:	ldr	r6, [r4, #4]
   13df4:	ldr	r3, [r6, #28]
   13df8:	ldr	r2, [r6, #24]
   13dfc:	sub	r3, r3, r2
   13e00:	ldr	r2, [r6, #16]
   13e04:	cmp	r3, r2
   13e08:	bhi	13e8c <__assert_fail@plt+0x2a58>
   13e0c:	mov	r3, #0
   13e10:	str	r3, [r6, #4]
   13e14:	ldr	r6, [r4, #4]
   13e18:	ldr	r2, [r6, #28]
   13e1c:	ldr	r3, [r6, #32]
   13e20:	cmp	r2, r3
   13e24:	bcs	13e98 <__assert_fail@plt+0x2a64>
   13e28:	ldr	r3, [r6, #28]
   13e2c:	add	r2, r3, #1
   13e30:	str	r2, [r6, #28]
   13e34:	mov	r2, #10
   13e38:	strb	r2, [r3]
   13e3c:	ldr	r3, [r4, #8]
   13e40:	mov	r2, #1
   13e44:	str	r2, [r3, #4]
   13e48:	cmp	r7, r5
   13e4c:	popeq	{r4, r5, r6, r7, r8, pc}
   13e50:	mov	r0, r5
   13e54:	bl	1771c <argp_parse@@Base+0xbf4>
   13e58:	pop	{r4, r5, r6, r7, r8, pc}
   13e5c:	mov	r1, #1
   13e60:	mov	r0, r6
   13e64:	bl	189c0 <argp_parse@@Base+0x1e98>
   13e68:	cmp	r0, #0
   13e6c:	beq	13d3c <__assert_fail@plt+0x2908>
   13e70:	b	13d28 <__assert_fail@plt+0x28f4>
   13e74:	mov	r0, r6
   13e78:	bl	1841c <argp_parse@@Base+0x18f4>
   13e7c:	b	13d6c <__assert_fail@plt+0x2938>
   13e80:	mov	r0, r6
   13e84:	bl	1841c <argp_parse@@Base+0x18f4>
   13e88:	b	13d94 <__assert_fail@plt+0x2960>
   13e8c:	mov	r0, r6
   13e90:	bl	1841c <argp_parse@@Base+0x18f4>
   13e94:	b	13e0c <__assert_fail@plt+0x29d8>
   13e98:	mov	r1, #1
   13e9c:	mov	r0, r6
   13ea0:	bl	189c0 <argp_parse@@Base+0x1e98>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13e3c <__assert_fail@plt+0x2a08>
   13eac:	b	13e28 <__assert_fail@plt+0x29f4>
   13eb0:	andeq	r0, r0, #3
   13eb4:	muleq	r2, r4, r3
   13eb8:	push	{r4, r5, r6, r7, r8, lr}
   13ebc:	mov	r6, r0
   13ec0:	mov	r4, r1
   13ec4:	ldr	r3, [r1, #12]
   13ec8:	cmp	r3, #0
   13ecc:	beq	13fec <__assert_fail@plt+0x2bb8>
   13ed0:	ldr	r3, [r1, #8]
   13ed4:	ldr	r7, [r3]
   13ed8:	ldr	r2, [r1]
   13edc:	ldr	r5, [r2, #16]
   13ee0:	ldr	r3, [r3, #4]
   13ee4:	cmp	r3, #0
   13ee8:	cmpne	r7, #0
   13eec:	beq	13f28 <__assert_fail@plt+0x2af4>
   13ef0:	ldr	r2, [r2, #12]
   13ef4:	ldr	r3, [r7, #12]
   13ef8:	cmp	r2, r3
   13efc:	beq	13f28 <__assert_fail@plt+0x2af4>
   13f00:	ldr	r8, [r1, #4]
   13f04:	ldr	r2, [r8, #28]
   13f08:	ldr	r3, [r8, #32]
   13f0c:	cmp	r2, r3
   13f10:	bcs	13fc8 <__assert_fail@plt+0x2b94>
   13f14:	ldr	r3, [r8, #28]
   13f18:	add	r2, r3, #1
   13f1c:	str	r2, [r8, #28]
   13f20:	mov	r2, #10
   13f24:	strb	r2, [r3]
   13f28:	cmp	r5, #0
   13f2c:	beq	13fb0 <__assert_fail@plt+0x2b7c>
   13f30:	ldr	r0, [r5]
   13f34:	cmp	r0, #0
   13f38:	beq	13fb0 <__assert_fail@plt+0x2b7c>
   13f3c:	ldrb	r3, [r0]
   13f40:	cmp	r3, #0
   13f44:	beq	13fb0 <__assert_fail@plt+0x2b7c>
   13f48:	cmp	r7, #0
   13f4c:	beq	13f7c <__assert_fail@plt+0x2b48>
   13f50:	ldr	r3, [r7, #16]
   13f54:	cmp	r5, r3
   13f58:	beq	13fb0 <__assert_fail@plt+0x2b7c>
   13f5c:	cmp	r3, #0
   13f60:	beq	13f7c <__assert_fail@plt+0x2b48>
   13f64:	ldr	r3, [r3, #12]
   13f68:	cmp	r3, #0
   13f6c:	cmpne	r5, r3
   13f70:	bne	13f64 <__assert_fail@plt+0x2b30>
   13f74:	cmp	r5, r3
   13f78:	beq	13fb0 <__assert_fail@plt+0x2b7c>
   13f7c:	ldr	r3, [r4, #4]
   13f80:	ldr	r7, [r3, #12]
   13f84:	mov	r2, r4
   13f88:	ldr	r1, [r5, #16]
   13f8c:	bl	13cd4 <__assert_fail@plt+0x28a0>
   13f90:	ldr	r5, [r4, #4]
   13f94:	ldr	r3, [r5, #28]
   13f98:	ldr	r2, [r5, #24]
   13f9c:	sub	r3, r3, r2
   13fa0:	ldr	r2, [r5, #16]
   13fa4:	cmp	r3, r2
   13fa8:	bhi	13fe0 <__assert_fail@plt+0x2bac>
   13fac:	str	r7, [r5, #12]
   13fb0:	mov	r3, #0
   13fb4:	str	r3, [r4, #12]
   13fb8:	mov	r1, r6
   13fbc:	ldr	r0, [r4, #4]
   13fc0:	bl	138bc <__assert_fail@plt+0x2488>
   13fc4:	pop	{r4, r5, r6, r7, r8, pc}
   13fc8:	mov	r1, #1
   13fcc:	mov	r0, r8
   13fd0:	bl	189c0 <argp_parse@@Base+0x1e98>
   13fd4:	cmp	r0, #0
   13fd8:	beq	13f28 <__assert_fail@plt+0x2af4>
   13fdc:	b	13f14 <__assert_fail@plt+0x2ae0>
   13fe0:	mov	r0, r5
   13fe4:	bl	1841c <argp_parse@@Base+0x18f4>
   13fe8:	b	13fac <__assert_fail@plt+0x2b78>
   13fec:	ldr	r5, [r1, #4]
   13ff0:	ldr	r3, [r5, #28]
   13ff4:	add	r3, r3, #2
   13ff8:	ldr	r2, [r5, #32]
   13ffc:	cmp	r2, r3
   14000:	bcs	14018 <__assert_fail@plt+0x2be4>
   14004:	mov	r1, #2
   14008:	mov	r0, r5
   1400c:	bl	189c0 <argp_parse@@Base+0x1e98>
   14010:	cmp	r0, #0
   14014:	beq	13fb8 <__assert_fail@plt+0x2b84>
   14018:	ldr	r3, [r5, #28]
   1401c:	ldr	r2, [pc, #20]	; 14038 <__assert_fail@plt+0x2c04>
   14020:	ldrh	r2, [r2]
   14024:	strh	r2, [r3]
   14028:	ldr	r3, [r5, #28]
   1402c:	add	r3, r3, #2
   14030:	str	r3, [r5, #28]
   14034:	b	13fb8 <__assert_fail@plt+0x2b84>
   14038:	andeq	r9, r1, r8, lsl #27
   1403c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14040:	sub	sp, sp, #28
   14044:	mov	fp, r0
   14048:	str	r1, [sp, #8]
   1404c:	mov	r6, r2
   14050:	mov	r8, r3
   14054:	ldr	r7, [sp, #64]	; 0x40
   14058:	ldr	r5, [sp, #68]	; 0x44
   1405c:	ldr	r9, [r0, #12]
   14060:	ldr	r3, [r0, #16]
   14064:	str	r3, [sp, #16]
   14068:	cmp	r9, #0
   1406c:	beq	144c8 <__assert_fail@plt+0x3094>
   14070:	mov	r1, #11
   14074:	mov	r0, r9
   14078:	bl	112cc <strchr@plt>
   1407c:	cmp	r6, #0
   14080:	beq	14378 <__assert_fail@plt+0x2f44>
   14084:	cmp	r0, #0
   14088:	addne	r9, r0, #1
   1408c:	beq	144b0 <__assert_fail@plt+0x307c>
   14090:	ldr	r3, [fp, #20]
   14094:	cmp	r3, #0
   14098:	movne	sl, #0
   1409c:	beq	144b8 <__assert_fail@plt+0x3084>
   140a0:	ldr	r1, [sp, #8]
   140a4:	mov	r0, fp
   140a8:	bl	1759c <argp_parse@@Base+0xa74>
   140ac:	str	r0, [sp, #12]
   140b0:	ldr	r3, [fp, #20]
   140b4:	ldr	r2, [pc, #1140]	; 14530 <__assert_fail@plt+0x30fc>
   140b8:	ldr	r0, [pc, #1140]	; 14534 <__assert_fail@plt+0x3100>
   140bc:	cmp	r6, #0
   140c0:	moveq	r0, r2
   140c4:	ldr	r2, [sp, #12]
   140c8:	mov	r1, r9
   140cc:	blx	r3
   140d0:	mov	r4, r0
   140d4:	cmp	r4, #0
   140d8:	beq	14468 <__assert_fail@plt+0x3034>
   140dc:	cmp	r8, #0
   140e0:	beq	14108 <__assert_fail@plt+0x2cd4>
   140e4:	ldr	r2, [r5, #28]
   140e8:	ldr	r3, [r5, #32]
   140ec:	cmp	r2, r3
   140f0:	bcs	143bc <__assert_fail@plt+0x2f88>
   140f4:	ldr	r3, [r5, #28]
   140f8:	add	r2, r3, #1
   140fc:	str	r2, [r5, #28]
   14100:	mov	r2, #10
   14104:	strb	r2, [r3]
   14108:	cmp	r4, r9
   1410c:	movne	r3, #0
   14110:	moveq	r3, #1
   14114:	cmp	sl, #0
   14118:	moveq	r3, #0
   1411c:	cmp	r3, #0
   14120:	beq	143d4 <__assert_fail@plt+0x2fa0>
   14124:	ldr	r3, [r5, #28]
   14128:	add	r3, r3, sl
   1412c:	ldr	r2, [r5, #32]
   14130:	cmp	r2, r3
   14134:	bcs	1414c <__assert_fail@plt+0x2d18>
   14138:	mov	r1, sl
   1413c:	mov	r0, r5
   14140:	bl	189c0 <argp_parse@@Base+0x1e98>
   14144:	cmp	r0, #0
   14148:	beq	14168 <__assert_fail@plt+0x2d34>
   1414c:	mov	r2, sl
   14150:	mov	r1, r9
   14154:	ldr	r0, [r5, #28]
   14158:	bl	11188 <memcpy@plt>
   1415c:	ldr	r3, [r5, #28]
   14160:	add	r3, r3, sl
   14164:	str	r3, [r5, #28]
   14168:	ldr	r3, [r5, #28]
   1416c:	ldr	r2, [r5, #24]
   14170:	sub	r3, r3, r2
   14174:	ldr	r2, [r5, #16]
   14178:	cmp	r3, r2
   1417c:	bhi	14434 <__assert_fail@plt+0x3000>
   14180:	ldr	r3, [r5, #20]
   14184:	bic	r3, r3, r3, asr #31
   14188:	ldr	r2, [r5, #4]
   1418c:	cmp	r2, r3
   14190:	bcs	141b8 <__assert_fail@plt+0x2d84>
   14194:	ldr	r2, [r5, #28]
   14198:	ldr	r3, [r5, #32]
   1419c:	cmp	r2, r3
   141a0:	bcs	14440 <__assert_fail@plt+0x300c>
   141a4:	ldr	r3, [r5, #28]
   141a8:	add	r2, r3, #1
   141ac:	str	r2, [r5, #28]
   141b0:	mov	r2, #10
   141b4:	strb	r2, [r3]
   141b8:	cmp	r4, r9
   141bc:	moveq	r4, #1
   141c0:	bne	14458 <__assert_fail@plt+0x3024>
   141c4:	cmp	r9, #0
   141c8:	cmpne	sl, #0
   141cc:	beq	141e4 <__assert_fail@plt+0x2db0>
   141d0:	ldr	r3, [fp, #20]
   141d4:	cmp	r3, #0
   141d8:	beq	142f0 <__assert_fail@plt+0x2ebc>
   141dc:	mov	r0, r9
   141e0:	bl	1771c <argp_parse@@Base+0xbf4>
   141e4:	cmp	r6, #0
   141e8:	beq	142f0 <__assert_fail@plt+0x2ebc>
   141ec:	ldr	r3, [fp, #20]
   141f0:	cmp	r3, #0
   141f4:	beq	142f0 <__assert_fail@plt+0x2ebc>
   141f8:	ldr	r2, [sp, #12]
   141fc:	mov	r1, #0
   14200:	ldr	r0, [pc, #816]	; 14538 <__assert_fail@plt+0x3104>
   14204:	blx	r3
   14208:	subs	r9, r0, #0
   1420c:	beq	142f0 <__assert_fail@plt+0x2ebc>
   14210:	orrs	r3, r8, r4
   14214:	beq	1423c <__assert_fail@plt+0x2e08>
   14218:	ldr	r2, [r5, #28]
   1421c:	ldr	r3, [r5, #32]
   14220:	cmp	r2, r3
   14224:	bcs	14470 <__assert_fail@plt+0x303c>
   14228:	ldr	r3, [r5, #28]
   1422c:	add	r2, r3, #1
   14230:	str	r2, [r5, #28]
   14234:	mov	r2, #10
   14238:	strb	r2, [r3]
   1423c:	mov	r0, r9
   14240:	bl	112c0 <strlen@plt>
   14244:	subs	r4, r0, #0
   14248:	beq	14290 <__assert_fail@plt+0x2e5c>
   1424c:	ldr	r3, [r5, #28]
   14250:	add	r3, r3, r4
   14254:	ldr	r2, [r5, #32]
   14258:	cmp	r2, r3
   1425c:	bcs	14274 <__assert_fail@plt+0x2e40>
   14260:	mov	r1, r4
   14264:	mov	r0, r5
   14268:	bl	189c0 <argp_parse@@Base+0x1e98>
   1426c:	cmp	r0, #0
   14270:	beq	14290 <__assert_fail@plt+0x2e5c>
   14274:	mov	r2, r4
   14278:	mov	r1, r9
   1427c:	ldr	r0, [r5, #28]
   14280:	bl	11188 <memcpy@plt>
   14284:	ldr	r3, [r5, #28]
   14288:	add	r4, r3, r4
   1428c:	str	r4, [r5, #28]
   14290:	mov	r0, r9
   14294:	bl	1771c <argp_parse@@Base+0xbf4>
   14298:	ldr	r3, [r5, #28]
   1429c:	ldr	r2, [r5, #24]
   142a0:	sub	r3, r3, r2
   142a4:	ldr	r2, [r5, #16]
   142a8:	cmp	r3, r2
   142ac:	bhi	14488 <__assert_fail@plt+0x3054>
   142b0:	ldr	r3, [r5, #20]
   142b4:	bic	r3, r3, r3, asr #31
   142b8:	ldr	r2, [r5, #4]
   142bc:	cmp	r2, r3
   142c0:	movcs	r4, #1
   142c4:	bcs	142f0 <__assert_fail@plt+0x2ebc>
   142c8:	ldr	r2, [r5, #28]
   142cc:	ldr	r3, [r5, #32]
   142d0:	cmp	r2, r3
   142d4:	bcs	14494 <__assert_fail@plt+0x3060>
   142d8:	ldr	r3, [r5, #28]
   142dc:	add	r2, r3, #1
   142e0:	str	r2, [r5, #28]
   142e4:	mov	r2, #10
   142e8:	strb	r2, [r3]
   142ec:	mov	r4, #1
   142f0:	ldr	r3, [sp, #16]
   142f4:	cmp	r3, #0
   142f8:	beq	1436c <__assert_fail@plt+0x2f38>
   142fc:	ldr	r0, [r3]
   14300:	cmp	r0, #0
   14304:	beq	1436c <__assert_fail@plt+0x2f38>
   14308:	clz	r9, r7
   1430c:	lsr	r9, r9, #5
   14310:	cmp	r7, #0
   14314:	cmpne	r4, #0
   14318:	bne	1436c <__assert_fail@plt+0x2f38>
   1431c:	mov	sl, r3
   14320:	ldr	fp, [sp, #8]
   14324:	orrs	r3, r8, r4
   14328:	str	r5, [sp, #4]
   1432c:	str	r7, [sp]
   14330:	movne	r3, #1
   14334:	moveq	r3, #0
   14338:	mov	r2, r6
   1433c:	mov	r1, fp
   14340:	bl	1403c <__assert_fail@plt+0x2c08>
   14344:	orr	r4, r4, r0
   14348:	ldr	r0, [sl, #16]
   1434c:	cmp	r0, #0
   14350:	beq	1436c <__assert_fail@plt+0x2f38>
   14354:	add	sl, sl, #16
   14358:	cmp	r4, #0
   1435c:	movne	r3, r9
   14360:	orreq	r3, r9, #1
   14364:	cmp	r3, #0
   14368:	bne	14324 <__assert_fail@plt+0x2ef0>
   1436c:	mov	r0, r4
   14370:	add	sp, sp, #28
   14374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14378:	cmp	r0, #0
   1437c:	beq	14500 <__assert_fail@plt+0x30cc>
   14380:	sub	sl, r0, r9
   14384:	ldr	r3, [fp, #20]
   14388:	cmp	r3, #0
   1438c:	beq	143ac <__assert_fail@plt+0x2f78>
   14390:	cmp	sl, #0
   14394:	beq	140a0 <__assert_fail@plt+0x2c6c>
   14398:	mov	r1, sl
   1439c:	mov	r0, r9
   143a0:	bl	1117c <strndup@plt>
   143a4:	mov	r9, r0
   143a8:	b	140a0 <__assert_fail@plt+0x2c6c>
   143ac:	mov	r4, r9
   143b0:	mov	r3, #0
   143b4:	str	r3, [sp, #12]
   143b8:	b	140dc <__assert_fail@plt+0x2ca8>
   143bc:	mov	r1, #1
   143c0:	mov	r0, r5
   143c4:	bl	189c0 <argp_parse@@Base+0x1e98>
   143c8:	cmp	r0, #0
   143cc:	beq	14108 <__assert_fail@plt+0x2cd4>
   143d0:	b	140f4 <__assert_fail@plt+0x2cc0>
   143d4:	mov	r0, r4
   143d8:	bl	112c0 <strlen@plt>
   143dc:	subs	r3, r0, #0
   143e0:	mov	r1, r3
   143e4:	str	r3, [sp, #20]
   143e8:	beq	14168 <__assert_fail@plt+0x2d34>
   143ec:	ldr	r3, [r5, #28]
   143f0:	add	r3, r3, r1
   143f4:	ldr	r2, [r5, #32]
   143f8:	cmp	r2, r3
   143fc:	bcs	14410 <__assert_fail@plt+0x2fdc>
   14400:	mov	r0, r5
   14404:	bl	189c0 <argp_parse@@Base+0x1e98>
   14408:	cmp	r0, #0
   1440c:	beq	14168 <__assert_fail@plt+0x2d34>
   14410:	ldr	r2, [sp, #20]
   14414:	mov	r1, r4
   14418:	ldr	r0, [r5, #28]
   1441c:	bl	11188 <memcpy@plt>
   14420:	ldr	r3, [r5, #28]
   14424:	ldr	r2, [sp, #20]
   14428:	add	r3, r3, r2
   1442c:	str	r3, [r5, #28]
   14430:	b	14168 <__assert_fail@plt+0x2d34>
   14434:	mov	r0, r5
   14438:	bl	1841c <argp_parse@@Base+0x18f4>
   1443c:	b	14180 <__assert_fail@plt+0x2d4c>
   14440:	mov	r1, #1
   14444:	mov	r0, r5
   14448:	bl	189c0 <argp_parse@@Base+0x1e98>
   1444c:	cmp	r0, #0
   14450:	beq	141b8 <__assert_fail@plt+0x2d84>
   14454:	b	141a4 <__assert_fail@plt+0x2d70>
   14458:	mov	r0, r4
   1445c:	bl	1771c <argp_parse@@Base+0xbf4>
   14460:	mov	r4, #1
   14464:	b	141c4 <__assert_fail@plt+0x2d90>
   14468:	mov	r4, #0
   1446c:	b	141c4 <__assert_fail@plt+0x2d90>
   14470:	mov	r1, #1
   14474:	mov	r0, r5
   14478:	bl	189c0 <argp_parse@@Base+0x1e98>
   1447c:	cmp	r0, #0
   14480:	beq	1423c <__assert_fail@plt+0x2e08>
   14484:	b	14228 <__assert_fail@plt+0x2df4>
   14488:	mov	r0, r5
   1448c:	bl	1841c <argp_parse@@Base+0x18f4>
   14490:	b	142b0 <__assert_fail@plt+0x2e7c>
   14494:	mov	r1, #1
   14498:	mov	r0, r5
   1449c:	bl	189c0 <argp_parse@@Base+0x1e98>
   144a0:	cmp	r0, #0
   144a4:	moveq	r4, #1
   144a8:	beq	142f0 <__assert_fail@plt+0x2ebc>
   144ac:	b	142d8 <__assert_fail@plt+0x2ea4>
   144b0:	mov	r9, #0
   144b4:	b	14090 <__assert_fail@plt+0x2c5c>
   144b8:	mov	r4, r9
   144bc:	mov	sl, #0
   144c0:	str	sl, [sp, #12]
   144c4:	b	140d4 <__assert_fail@plt+0x2ca0>
   144c8:	ldr	r3, [r0, #20]
   144cc:	cmp	r3, #0
   144d0:	movne	sl, #0
   144d4:	bne	140a0 <__assert_fail@plt+0x2c6c>
   144d8:	mov	r3, r9
   144dc:	cmp	r9, #0
   144e0:	moveq	r4, #0
   144e4:	streq	r4, [sp, #12]
   144e8:	beq	141e4 <__assert_fail@plt+0x2db0>
   144ec:	mov	r4, r9
   144f0:	mov	r9, r3
   144f4:	mov	sl, #0
   144f8:	str	sl, [sp, #12]
   144fc:	b	140dc <__assert_fail@plt+0x2ca8>
   14500:	ldr	r3, [fp, #20]
   14504:	cmp	r3, #0
   14508:	moveq	r3, r9
   1450c:	beq	144dc <__assert_fail@plt+0x30a8>
   14510:	ldr	r1, [sp, #8]
   14514:	mov	r0, fp
   14518:	bl	1759c <argp_parse@@Base+0xa74>
   1451c:	str	r0, [sp, #12]
   14520:	ldr	r3, [fp, #20]
   14524:	mov	sl, #0
   14528:	ldr	r0, [pc]	; 14530 <__assert_fail@plt+0x30fc>
   1452c:	b	140c4 <__assert_fail@plt+0x2c90>
   14530:	andeq	r0, r0, #1
   14534:	andeq	r0, r0, #2
   14538:	andeq	r0, r0, #4
   1453c:	ldr	r3, [r0, #12]
   14540:	ldr	r2, [r1, #12]
   14544:	cmp	r3, r2
   14548:	beq	145a0 <__assert_fail@plt+0x316c>
   1454c:	push	{r4, r5, r6, lr}
   14550:	mov	r5, r1
   14554:	mov	r4, r0
   14558:	mov	r1, r2
   1455c:	mov	r0, r3
   14560:	bl	1453c <__assert_fail@plt+0x3108>
   14564:	subs	r3, r0, #0
   14568:	bne	14598 <__assert_fail@plt+0x3164>
   1456c:	ldr	r0, [r4, #8]
   14570:	ldr	r3, [r5, #8]
   14574:	mvn	r2, r3
   14578:	lsr	r2, r2, #31
   1457c:	cmp	r2, r0, lsr #31
   14580:	subne	r3, r0, r3
   14584:	subeq	r3, r3, r0
   14588:	cmp	r3, #0
   1458c:	ldreq	r3, [r5, #4]
   14590:	ldreq	r0, [r4, #4]
   14594:	subeq	r3, r3, r0
   14598:	mov	r0, r3
   1459c:	pop	{r4, r5, r6, pc}
   145a0:	ldr	r2, [r0, #8]
   145a4:	ldr	r3, [r1, #8]
   145a8:	mvn	ip, r3
   145ac:	lsr	ip, ip, #31
   145b0:	cmp	ip, r2, lsr #31
   145b4:	subne	r3, r2, r3
   145b8:	subeq	r3, r3, r2
   145bc:	cmp	r3, #0
   145c0:	ldreq	r3, [r1, #4]
   145c4:	ldreq	r0, [r0, #4]
   145c8:	subeq	r3, r3, r0
   145cc:	mov	r0, r3
   145d0:	bx	lr
   145d4:	push	{r4, r5, r6, r7, r8, lr}
   145d8:	sub	sp, sp, #8
   145dc:	ldr	lr, [r0, #16]
   145e0:	cmp	lr, #0
   145e4:	movne	r2, lr
   145e8:	bne	145f8 <__assert_fail@plt+0x31c4>
   145ec:	ldr	ip, [r0, #12]
   145f0:	b	14608 <__assert_fail@plt+0x31d4>
   145f4:	mov	r2, r3
   145f8:	ldr	r3, [r2, #12]
   145fc:	cmp	r3, #0
   14600:	bne	145f4 <__assert_fail@plt+0x31c0>
   14604:	ldr	ip, [r2, #8]
   14608:	ldr	r5, [r1, #16]
   1460c:	cmp	r5, #0
   14610:	movne	r2, r5
   14614:	bne	14624 <__assert_fail@plt+0x31f0>
   14618:	ldr	r4, [r1, #12]
   1461c:	b	14634 <__assert_fail@plt+0x3200>
   14620:	mov	r2, r3
   14624:	ldr	r3, [r2, #12]
   14628:	cmp	r3, #0
   1462c:	bne	14620 <__assert_fail@plt+0x31ec>
   14630:	ldr	r4, [r2, #8]
   14634:	mvn	r3, r4
   14638:	lsr	r3, r3, #31
   1463c:	cmp	r3, ip, lsr #31
   14640:	subne	r4, ip, r4
   14644:	subeq	r4, r4, ip
   14648:	cmp	r4, #0
   1464c:	bne	146b4 <__assert_fail@plt+0x3280>
   14650:	adds	r4, r5, #0
   14654:	movne	r4, #1
   14658:	cmp	lr, #0
   1465c:	rsbeq	r4, r4, #0
   14660:	rsbne	r4, r4, #1
   14664:	cmp	r4, #0
   14668:	bne	146b4 <__assert_fail@plt+0x3280>
   1466c:	mov	r6, r1
   14670:	mov	r7, r0
   14674:	cmp	lr, #0
   14678:	beq	14704 <__assert_fail@plt+0x32d0>
   1467c:	ldr	ip, [lr, #20]
   14680:	ldr	r2, [r5, #20]
   14684:	cmp	ip, r2
   14688:	ble	146c0 <__assert_fail@plt+0x328c>
   1468c:	mov	r0, lr
   14690:	ldr	r0, [r0, #12]
   14694:	ldr	r3, [r0, #20]
   14698:	cmp	r2, r3
   1469c:	blt	14690 <__assert_fail@plt+0x325c>
   146a0:	mov	r1, r5
   146a4:	bl	1453c <__assert_fail@plt+0x3108>
   146a8:	subs	r4, r0, #0
   146ac:	cmp	r0, #0
   146b0:	moveq	r4, #1
   146b4:	mov	r0, r4
   146b8:	add	sp, sp, #8
   146bc:	pop	{r4, r5, r6, r7, r8, pc}
   146c0:	cmp	ip, r2
   146c4:	bge	146f0 <__assert_fail@plt+0x32bc>
   146c8:	mov	r1, r5
   146cc:	ldr	r1, [r1, #12]
   146d0:	ldr	r3, [r1, #20]
   146d4:	cmp	ip, r3
   146d8:	blt	146cc <__assert_fail@plt+0x3298>
   146dc:	mov	r0, lr
   146e0:	bl	1453c <__assert_fail@plt+0x3108>
   146e4:	subs	r4, r0, #0
   146e8:	mvneq	r4, #0
   146ec:	b	146b4 <__assert_fail@plt+0x3280>
   146f0:	mov	r1, r5
   146f4:	mov	r0, lr
   146f8:	bl	1453c <__assert_fail@plt+0x3108>
   146fc:	subs	r4, r0, #0
   14700:	bne	146b4 <__assert_fail@plt+0x3280>
   14704:	ldr	r3, [r7, #12]
   14708:	ldr	r4, [r6, #12]
   1470c:	mvn	r2, r4
   14710:	lsr	r2, r2, #31
   14714:	cmp	r2, r3, lsr #31
   14718:	subne	r4, r3, r4
   1471c:	subeq	r4, r4, r3
   14720:	cmp	r4, #0
   14724:	bne	146b4 <__assert_fail@plt+0x3280>
   14728:	mov	r0, r7
   1472c:	bl	1337c <__assert_fail@plt+0x1f48>
   14730:	mov	r5, r0
   14734:	str	r0, [sp]
   14738:	mov	r0, r6
   1473c:	bl	1337c <__assert_fail@plt+0x1f48>
   14740:	str	r0, [sp, #4]
   14744:	ldr	r3, [r7]
   14748:	ldr	r3, [r3, #12]
   1474c:	adds	r5, r5, #0
   14750:	movne	r5, #1
   14754:	ands	r3, r5, r3, lsr #3
   14758:	beq	1489c <__assert_fail@plt+0x3468>
   1475c:	mov	r0, sp
   14760:	bl	13540 <__assert_fail@plt+0x210c>
   14764:	adds	r5, r0, #0
   14768:	movne	r5, #1
   1476c:	ldr	r3, [r6]
   14770:	ldr	r0, [r3, #12]
   14774:	ands	r0, r0, #8
   14778:	beq	14798 <__assert_fail@plt+0x3364>
   1477c:	ldr	r3, [sp, #4]
   14780:	cmp	r3, #0
   14784:	beq	14894 <__assert_fail@plt+0x3460>
   14788:	add	r0, sp, #4
   1478c:	bl	13540 <__assert_fail@plt+0x210c>
   14790:	adds	r0, r0, #0
   14794:	movne	r0, #1
   14798:	subs	r4, r5, r0
   1479c:	bne	146b4 <__assert_fail@plt+0x3280>
   147a0:	ldr	r2, [r7, #20]
   147a4:	ldr	r4, [pc, #276]	; 148c0 <__assert_fail@plt+0x348c>
   147a8:	mov	r3, #0
   147ac:	ldr	r2, [r2, #24]
   147b0:	mov	r1, r4
   147b4:	mov	r0, r7
   147b8:	bl	13414 <__assert_fail@plt+0x1fe0>
   147bc:	mov	r5, r0
   147c0:	uxtb	r8, r0
   147c4:	ldr	r2, [r6, #20]
   147c8:	mov	r3, #0
   147cc:	ldr	r2, [r2, #24]
   147d0:	mov	r1, r4
   147d4:	mov	r0, r6
   147d8:	bl	13414 <__assert_fail@plt+0x1fe0>
   147dc:	uxtb	r7, r0
   147e0:	cmp	r8, #0
   147e4:	movne	r5, r8
   147e8:	bne	147fc <__assert_fail@plt+0x33c8>
   147ec:	ldr	r3, [sp]
   147f0:	cmp	r3, #0
   147f4:	ldrbne	r5, [r3]
   147f8:	moveq	r5, #0
   147fc:	cmp	r7, #0
   14800:	uxtbne	r6, r0
   14804:	bne	14818 <__assert_fail@plt+0x33e4>
   14808:	ldr	r3, [sp, #4]
   1480c:	cmp	r3, #0
   14810:	ldrbne	r6, [r3]
   14814:	moveq	r6, #0
   14818:	bl	1126c <__ctype_tolower_loc@plt>
   1481c:	ldr	r3, [r0]
   14820:	ldr	r4, [r3, r5, lsl #2]
   14824:	ldr	r3, [r3, r6, lsl #2]
   14828:	subs	r4, r4, r3
   1482c:	bne	146b4 <__assert_fail@plt+0x3280>
   14830:	subs	r4, r6, r5
   14834:	bne	146b4 <__assert_fail@plt+0x3280>
   14838:	adds	r4, r7, #0
   1483c:	movne	r4, #1
   14840:	cmp	r8, #0
   14844:	rsbeq	r4, r4, #0
   14848:	rsbne	r4, r4, #1
   1484c:	cmp	r4, #0
   14850:	bne	146b4 <__assert_fail@plt+0x3280>
   14854:	cmp	r8, #0
   14858:	bne	146b4 <__assert_fail@plt+0x3280>
   1485c:	ldr	r0, [sp]
   14860:	ldr	r1, [sp, #4]
   14864:	adds	r4, r1, #0
   14868:	movne	r4, #1
   1486c:	cmp	r0, #0
   14870:	rsbeq	r4, r4, #0
   14874:	rsbne	r4, r4, #1
   14878:	cmp	r4, #0
   1487c:	bne	146b4 <__assert_fail@plt+0x3280>
   14880:	cmp	r0, #0
   14884:	beq	146b4 <__assert_fail@plt+0x3280>
   14888:	bl	111f4 <strcasecmp@plt>
   1488c:	mov	r4, r0
   14890:	b	146b4 <__assert_fail@plt+0x3280>
   14894:	mov	r0, r4
   14898:	b	14798 <__assert_fail@plt+0x3364>
   1489c:	ldr	r3, [r6]
   148a0:	ldr	r3, [r3, #12]
   148a4:	tst	r3, #8
   148a8:	beq	147a0 <__assert_fail@plt+0x336c>
   148ac:	ldr	r3, [sp, #4]
   148b0:	cmp	r3, #0
   148b4:	movne	r5, r4
   148b8:	bne	14788 <__assert_fail@plt+0x3354>
   148bc:	b	147a0 <__assert_fail@plt+0x336c>
   148c0:	strdeq	r3, [r1], -r8
   148c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148c8:	sub	sp, sp, #52	; 0x34
   148cc:	str	r0, [sp, #24]
   148d0:	str	r1, [sp, #28]
   148d4:	ldr	r2, [r0, #16]
   148d8:	str	r2, [sp, #8]
   148dc:	ldr	r5, [r0]
   148e0:	mov	r0, #16
   148e4:	bl	18324 <argp_parse@@Base+0x17fc>
   148e8:	subs	fp, r0, #0
   148ec:	beq	1491c <__assert_fail@plt+0x34e8>
   148f0:	mov	r3, #0
   148f4:	str	r3, [fp, #4]
   148f8:	str	r3, [fp, #12]
   148fc:	cmp	r5, r3
   14900:	beq	14af4 <__assert_fail@plt+0x36c0>
   14904:	ldr	r4, [r5, #12]
   14908:	ands	r4, r4, #4
   1490c:	bne	14930 <__assert_fail@plt+0x34fc>
   14910:	add	r6, r5, #24
   14914:	mov	r8, r3
   14918:	b	14958 <__assert_fail@plt+0x3524>
   1491c:	ldr	r3, [pc, #1576]	; 14f4c <__assert_fail@plt+0x3b18>
   14920:	ldr	r2, [pc, #1576]	; 14f50 <__assert_fail@plt+0x3b1c>
   14924:	ldr	r1, [pc, #1576]	; 14f54 <__assert_fail@plt+0x3b20>
   14928:	ldr	r0, [pc, #1576]	; 14f58 <__assert_fail@plt+0x3b24>
   1492c:	bl	11434 <__assert_fail@plt>
   14930:	ldr	r3, [pc, #1556]	; 14f4c <__assert_fail@plt+0x3b18>
   14934:	mov	r2, #460	; 0x1cc
   14938:	ldr	r1, [pc, #1556]	; 14f54 <__assert_fail@plt+0x3b20>
   1493c:	ldr	r0, [pc, #1560]	; 14f5c <__assert_fail@plt+0x3b28>
   14940:	bl	11434 <__assert_fail@plt>
   14944:	ldr	r2, [fp, #4]
   14948:	add	r2, r2, #1
   1494c:	str	r2, [fp, #4]
   14950:	b	14980 <__assert_fail@plt+0x354c>
   14954:	add	r6, r6, #24
   14958:	mov	r3, r6
   1495c:	ldr	r2, [r6, #-20]	; 0xffffffec
   14960:	cmp	r2, #0
   14964:	bne	14974 <__assert_fail@plt+0x3540>
   14968:	ldr	r2, [r6, #-24]	; 0xffffffe8
   1496c:	cmp	r2, #0
   14970:	beq	149b8 <__assert_fail@plt+0x3584>
   14974:	ldr	r2, [r3, #-12]
   14978:	tst	r2, #4
   1497c:	beq	14944 <__assert_fail@plt+0x3510>
   14980:	ldr	r2, [r3, #-12]
   14984:	tst	r2, #8
   14988:	bne	14954 <__assert_fail@plt+0x3520>
   1498c:	ldr	r7, [r3, #-20]	; 0xffffffec
   14990:	sub	r3, r7, #1
   14994:	cmp	r3, #254	; 0xfe
   14998:	bhi	14954 <__assert_fail@plt+0x3520>
   1499c:	bl	11290 <__ctype_b_loc@plt>
   149a0:	ldr	r3, [r0]
   149a4:	lsl	r7, r7, #1
   149a8:	ldrh	r3, [r3, r7]
   149ac:	tst	r3, #16384	; 0x4000
   149b0:	addne	r8, r8, #1
   149b4:	b	14954 <__assert_fail@plt+0x3520>
   149b8:	ldr	r2, [r6, #-8]
   149bc:	cmp	r2, #0
   149c0:	bne	14974 <__assert_fail@plt+0x3540>
   149c4:	ldr	r2, [r6, #-4]
   149c8:	cmp	r2, #0
   149cc:	bne	14974 <__assert_fail@plt+0x3540>
   149d0:	ldr	r0, [fp, #4]
   149d4:	rsb	r0, r0, r0, lsl #3
   149d8:	lsl	r0, r0, #2
   149dc:	bl	18324 <argp_parse@@Base+0x17fc>
   149e0:	str	r0, [fp]
   149e4:	add	r0, r8, #1
   149e8:	bl	18324 <argp_parse@@Base+0x17fc>
   149ec:	str	r0, [fp, #8]
   149f0:	ldr	r8, [fp]
   149f4:	cmp	r0, #0
   149f8:	cmpne	r8, #0
   149fc:	bne	14a14 <__assert_fail@plt+0x35e0>
   14a00:	ldr	r3, [pc, #1348]	; 14f4c <__assert_fail@plt+0x3b18>
   14a04:	ldr	r2, [pc, #1364]	; 14f60 <__assert_fail@plt+0x3b2c>
   14a08:	ldr	r1, [pc, #1348]	; 14f54 <__assert_fail@plt+0x3b20>
   14a0c:	ldr	r0, [pc, #1360]	; 14f64 <__assert_fail@plt+0x3b30>
   14a10:	bl	11434 <__assert_fail@plt>
   14a14:	ldr	r2, [fp, #4]
   14a18:	ldr	r3, [pc, #1352]	; 14f68 <__assert_fail@plt+0x3b34>
   14a1c:	cmp	r2, r3
   14a20:	addls	r8, r8, #28
   14a24:	movls	r7, r0
   14a28:	movls	sl, #0
   14a2c:	bls	14a78 <__assert_fail@plt+0x3644>
   14a30:	ldr	r3, [pc, #1300]	; 14f4c <__assert_fail@plt+0x3b18>
   14a34:	mov	r2, #476	; 0x1dc
   14a38:	ldr	r1, [pc, #1300]	; 14f54 <__assert_fail@plt+0x3b20>
   14a3c:	ldr	r0, [pc, #1320]	; 14f6c <__assert_fail@plt+0x3b38>
   14a40:	bl	11434 <__assert_fail@plt>
   14a44:	ldr	r3, [r5, #4]
   14a48:	cmp	r3, #0
   14a4c:	addeq	r9, r4, #1
   14a50:	movne	r9, r4
   14a54:	b	14abc <__assert_fail@plt+0x3688>
   14a58:	ldr	r3, [r5, #16]
   14a5c:	cmp	r3, #0
   14a60:	bne	14e68 <__assert_fail@plt+0x3a34>
   14a64:	ldr	r3, [r5, #20]
   14a68:	cmp	r3, #0
   14a6c:	bne	14e68 <__assert_fail@plt+0x3a34>
   14a70:	add	r8, r8, #28
   14a74:	mov	r4, r9
   14a78:	ldr	r3, [r5, #4]
   14a7c:	cmp	r3, #0
   14a80:	bne	14a90 <__assert_fail@plt+0x365c>
   14a84:	ldr	r3, [r5]
   14a88:	cmp	r3, #0
   14a8c:	beq	14ad4 <__assert_fail@plt+0x36a0>
   14a90:	mov	r6, r8
   14a94:	str	r5, [r8, #-28]	; 0xffffffe4
   14a98:	str	sl, [r8, #-24]	; 0xffffffe8
   14a9c:	str	r7, [r8, #-20]	; 0xffffffec
   14aa0:	ldr	r9, [r5, #20]
   14aa4:	cmp	r9, #0
   14aa8:	bne	14abc <__assert_fail@plt+0x3688>
   14aac:	ldr	r3, [r5]
   14ab0:	cmp	r3, #0
   14ab4:	movne	r9, r4
   14ab8:	beq	14a44 <__assert_fail@plt+0x3610>
   14abc:	str	r9, [r6, #-16]
   14ac0:	ldr	r3, [sp, #28]
   14ac4:	str	r3, [r6, #-12]
   14ac8:	ldr	r3, [sp, #24]
   14acc:	str	r3, [r6, #-8]
   14ad0:	b	14e74 <__assert_fail@plt+0x3a40>
   14ad4:	ldr	r3, [r5, #16]
   14ad8:	cmp	r3, #0
   14adc:	bne	14a90 <__assert_fail@plt+0x365c>
   14ae0:	ldr	r3, [r5, #20]
   14ae4:	cmp	r3, #0
   14ae8:	bne	14a90 <__assert_fail@plt+0x365c>
   14aec:	mov	r3, #0
   14af0:	strb	r3, [r7]
   14af4:	ldr	r3, [sp, #8]
   14af8:	cmp	r3, #0
   14afc:	beq	14e38 <__assert_fail@plt+0x3a04>
   14b00:	ldr	r3, [r3]
   14b04:	cmp	r3, #0
   14b08:	beq	14e38 <__assert_fail@plt+0x3a04>
   14b0c:	add	r3, fp, #12
   14b10:	str	r3, [sp, #44]	; 0x2c
   14b14:	str	fp, [sp, #20]
   14b18:	b	14ba8 <__assert_fail@plt+0x3774>
   14b1c:	ldr	r1, [sp, #28]
   14b20:	b	14c28 <__assert_fail@plt+0x37f4>
   14b24:	mov	r2, r3
   14b28:	ldr	r3, [r2, #24]
   14b2c:	cmp	r3, #0
   14b30:	bne	14b24 <__assert_fail@plt+0x36f0>
   14b34:	add	r2, r2, #24
   14b38:	ldr	r1, [sp, #16]
   14b3c:	ldr	r3, [r1, #12]
   14b40:	str	r3, [r2]
   14b44:	mov	r2, #0
   14b48:	str	r2, [r1, #12]
   14b4c:	ldr	r3, [r1, #4]
   14b50:	cmp	r3, r2
   14b54:	beq	14b8c <__assert_fail@plt+0x3758>
   14b58:	ldr	r0, [sp, #20]
   14b5c:	ldr	r2, [r0, #4]
   14b60:	cmp	r2, #0
   14b64:	bne	14c50 <__assert_fail@plt+0x381c>
   14b68:	str	r3, [r0, #4]
   14b6c:	mov	r2, r1
   14b70:	ldr	r3, [r1]
   14b74:	str	r3, [r0]
   14b78:	ldr	r3, [r2, #8]
   14b7c:	str	r3, [r0, #8]
   14b80:	mov	r3, r2
   14b84:	mov	r2, #0
   14b88:	str	r2, [r3, #4]
   14b8c:	ldr	r0, [sp, #16]
   14b90:	bl	13778 <__assert_fail@plt+0x2344>
   14b94:	ldr	r2, [sp, #8]
   14b98:	ldr	r3, [r2, #16]!
   14b9c:	str	r2, [sp, #8]
   14ba0:	cmp	r3, #0
   14ba4:	beq	14e34 <__assert_fail@plt+0x3a00>
   14ba8:	ldr	r3, [sp, #8]
   14bac:	ldr	r4, [r3, #12]
   14bb0:	cmp	r4, #0
   14bb4:	bne	14bc4 <__assert_fail@plt+0x3790>
   14bb8:	ldr	r3, [r3, #8]
   14bbc:	cmp	r3, #0
   14bc0:	beq	14b1c <__assert_fail@plt+0x36e8>
   14bc4:	ldr	r2, [sp, #8]
   14bc8:	ldr	r5, [r2, #8]
   14bcc:	ldr	r7, [sp, #24]
   14bd0:	ldr	r3, [r7, #16]
   14bd4:	sub	r3, r2, r3
   14bd8:	asr	r6, r3, #4
   14bdc:	mov	r0, #28
   14be0:	bl	18324 <argp_parse@@Base+0x17fc>
   14be4:	subs	r1, r0, #0
   14be8:	beq	14c28 <__assert_fail@plt+0x37f4>
   14bec:	str	r4, [r1, #8]
   14bf0:	str	r5, [r1]
   14bf4:	str	r6, [r1, #4]
   14bf8:	ldr	r3, [sp, #28]
   14bfc:	str	r3, [r1, #12]
   14c00:	str	r7, [r1, #16]
   14c04:	cmp	r3, #0
   14c08:	ldrne	r3, [r3, #20]
   14c0c:	addne	r3, r3, #1
   14c10:	moveq	r3, #0
   14c14:	str	r3, [r1, #20]
   14c18:	ldr	r2, [sp, #20]
   14c1c:	ldr	r3, [r2, #12]
   14c20:	str	r3, [r1, #24]
   14c24:	str	r1, [r2, #12]
   14c28:	ldr	r3, [sp, #8]
   14c2c:	ldr	r0, [r3]
   14c30:	bl	148c4 <__assert_fail@plt+0x3490>
   14c34:	str	r0, [sp, #16]
   14c38:	ldr	r3, [sp, #20]
   14c3c:	ldr	r2, [r3, #12]
   14c40:	cmp	r2, #0
   14c44:	ldreq	r2, [sp, #44]	; 0x2c
   14c48:	bne	14b28 <__assert_fail@plt+0x36f4>
   14c4c:	b	14b38 <__assert_fail@plt+0x3704>
   14c50:	add	r3, r3, r2
   14c54:	str	r3, [sp, #36]	; 0x24
   14c58:	rsb	r0, r3, r3, lsl #3
   14c5c:	lsl	r0, r0, #2
   14c60:	bl	18324 <argp_parse@@Base+0x17fc>
   14c64:	mov	r4, r0
   14c68:	str	r0, [sp, #32]
   14c6c:	ldr	r3, [sp, #20]
   14c70:	ldr	r0, [r3, #8]
   14c74:	bl	112c0 <strlen@plt>
   14c78:	mov	r6, r0
   14c7c:	ldr	r3, [sp, #16]
   14c80:	ldr	r0, [r3, #8]
   14c84:	bl	112c0 <strlen@plt>
   14c88:	add	r0, r6, r0
   14c8c:	add	r0, r0, #1
   14c90:	bl	18324 <argp_parse@@Base+0x17fc>
   14c94:	mov	sl, r0
   14c98:	cmp	r4, #0
   14c9c:	cmpne	r0, #0
   14ca0:	beq	14d6c <__assert_fail@plt+0x3938>
   14ca4:	ldr	r3, [sp, #36]	; 0x24
   14ca8:	ldr	r2, [pc, #696]	; 14f68 <__assert_fail@plt+0x3b34>
   14cac:	cmp	r3, r2
   14cb0:	bhi	14d80 <__assert_fail@plt+0x394c>
   14cb4:	ldr	r5, [sp, #20]
   14cb8:	ldr	r2, [r5]
   14cbc:	mov	r1, r2
   14cc0:	str	r2, [sp, #40]	; 0x28
   14cc4:	ldr	r4, [r5, #4]
   14cc8:	rsb	r7, r4, r4, lsl #3
   14ccc:	lsl	r7, r7, #2
   14cd0:	mov	r2, r7
   14cd4:	ldr	r8, [sp, #32]
   14cd8:	mov	r0, r8
   14cdc:	bl	11284 <mempcpy@plt>
   14ce0:	ldr	r3, [sp, #16]
   14ce4:	ldr	r1, [r3, #4]
   14ce8:	str	r1, [sp, #4]
   14cec:	rsb	r2, r1, r1, lsl #3
   14cf0:	lsl	r2, r2, #2
   14cf4:	ldr	r1, [r3]
   14cf8:	bl	11188 <memcpy@plt>
   14cfc:	ldr	r5, [r5, #8]
   14d00:	mov	r2, r6
   14d04:	mov	r1, r5
   14d08:	mov	r0, sl
   14d0c:	bl	11188 <memcpy@plt>
   14d10:	cmp	r4, #0
   14d14:	beq	14d94 <__assert_fail@plt+0x3960>
   14d18:	mov	r2, r8
   14d1c:	ldr	r3, [r2, #8]
   14d20:	sub	r3, r3, r5
   14d24:	add	r3, sl, r3
   14d28:	str	r3, [r2, #8]
   14d2c:	add	r2, r2, #28
   14d30:	subs	r4, r4, #1
   14d34:	bne	14d1c <__assert_fail@plt+0x38e8>
   14d38:	ldr	r3, [sp, #32]
   14d3c:	add	r7, r3, r7
   14d40:	add	r3, sl, r6
   14d44:	str	r3, [sp, #12]
   14d48:	ldr	r2, [sp, #16]
   14d4c:	ldr	r8, [r2, #8]
   14d50:	ldr	r2, [sp, #4]
   14d54:	cmp	r2, #0
   14d58:	beq	14dfc <__assert_fail@plt+0x39c8>
   14d5c:	add	r9, r7, #28
   14d60:	mov	fp, r3
   14d64:	sub	r7, r3, #1
   14d68:	b	14de4 <__assert_fail@plt+0x39b0>
   14d6c:	ldr	r3, [pc, #508]	; 14f70 <__assert_fail@plt+0x3b3c>
   14d70:	ldr	r2, [pc, #508]	; 14f74 <__assert_fail@plt+0x3b40>
   14d74:	ldr	r1, [pc, #472]	; 14f54 <__assert_fail@plt+0x3b20>
   14d78:	ldr	r0, [pc, #504]	; 14f78 <__assert_fail@plt+0x3b44>
   14d7c:	bl	11434 <__assert_fail@plt>
   14d80:	ldr	r3, [pc, #488]	; 14f70 <__assert_fail@plt+0x3b3c>
   14d84:	mov	r2, #972	; 0x3cc
   14d88:	ldr	r1, [pc, #452]	; 14f54 <__assert_fail@plt+0x3b20>
   14d8c:	ldr	r0, [pc, #488]	; 14f7c <__assert_fail@plt+0x3b48>
   14d90:	bl	11434 <__assert_fail@plt>
   14d94:	ldr	r7, [sp, #32]
   14d98:	b	14d40 <__assert_fail@plt+0x390c>
   14d9c:	ldr	r3, [sp, #12]
   14da0:	cmp	sl, r3
   14da4:	bcs	14f3c <__assert_fail@plt+0x3b08>
   14da8:	ldrb	r3, [sl]
   14dac:	cmp	r3, r1
   14db0:	beq	14f44 <__assert_fail@plt+0x3b10>
   14db4:	mov	r3, sl
   14db8:	cmp	r7, r3
   14dbc:	beq	14f3c <__assert_fail@plt+0x3b08>
   14dc0:	ldrb	r2, [r3, #1]!
   14dc4:	cmp	r2, r1
   14dc8:	bne	14db8 <__assert_fail@plt+0x3984>
   14dcc:	b	14f44 <__assert_fail@plt+0x3b10>
   14dd0:	add	r9, r9, #28
   14dd4:	ldr	r3, [sp, #4]
   14dd8:	subs	r3, r3, #1
   14ddc:	str	r3, [sp, #4]
   14de0:	beq	14e00 <__assert_fail@plt+0x39cc>
   14de4:	str	fp, [r9, #-20]	; 0xffffffec
   14de8:	ldr	r5, [r9, #-24]	; 0xffffffe8
   14dec:	ldr	r4, [r9, #-28]	; 0xffffffe4
   14df0:	cmp	r5, #0
   14df4:	bne	14f04 <__assert_fail@plt+0x3ad0>
   14df8:	b	14dd0 <__assert_fail@plt+0x399c>
   14dfc:	ldr	fp, [sp, #12]
   14e00:	mov	r3, #0
   14e04:	strb	r3, [fp]
   14e08:	ldr	r0, [sp, #40]	; 0x28
   14e0c:	bl	1771c <argp_parse@@Base+0xbf4>
   14e10:	ldr	r4, [sp, #20]
   14e14:	ldr	r0, [r4, #8]
   14e18:	bl	1771c <argp_parse@@Base+0xbf4>
   14e1c:	ldr	r2, [sp, #32]
   14e20:	str	r2, [r4]
   14e24:	ldr	r2, [sp, #36]	; 0x24
   14e28:	str	r2, [r4, #4]
   14e2c:	str	sl, [r4, #8]
   14e30:	b	14b8c <__assert_fail@plt+0x3758>
   14e34:	ldr	fp, [sp, #20]
   14e38:	mov	r0, fp
   14e3c:	add	sp, sp, #52	; 0x34
   14e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e44:	strb	r4, [r7]
   14e48:	add	r7, r7, #1
   14e4c:	add	r5, r5, #24
   14e50:	ldr	r3, [r5, #4]
   14e54:	cmp	r3, #0
   14e58:	bne	14e68 <__assert_fail@plt+0x3a34>
   14e5c:	ldr	r3, [r5]
   14e60:	cmp	r3, #0
   14e64:	beq	14a58 <__assert_fail@plt+0x3624>
   14e68:	ldr	r3, [r5, #12]
   14e6c:	tst	r3, #4
   14e70:	beq	14a70 <__assert_fail@plt+0x363c>
   14e74:	ldr	r3, [r6, #-24]	; 0xffffffe8
   14e78:	add	r3, r3, #1
   14e7c:	str	r3, [r6, #-24]	; 0xffffffe8
   14e80:	ldr	r3, [r5, #12]
   14e84:	tst	r3, #8
   14e88:	bne	14e4c <__assert_fail@plt+0x3a18>
   14e8c:	ldr	r4, [r5, #4]
   14e90:	sub	r3, r4, #1
   14e94:	cmp	r3, #254	; 0xfe
   14e98:	bhi	14e4c <__assert_fail@plt+0x3a18>
   14e9c:	bl	11290 <__ctype_b_loc@plt>
   14ea0:	ldr	r2, [r0]
   14ea4:	lsl	r3, r4, #1
   14ea8:	ldrh	r3, [r2, r3]
   14eac:	tst	r3, #16384	; 0x4000
   14eb0:	beq	14e4c <__assert_fail@plt+0x3a18>
   14eb4:	uxtb	r4, r4
   14eb8:	ldr	r3, [fp, #8]
   14ebc:	cmp	r3, r7
   14ec0:	bcs	14e44 <__assert_fail@plt+0x3a10>
   14ec4:	ldrb	r2, [r3]
   14ec8:	cmp	r2, r4
   14ecc:	beq	14e4c <__assert_fail@plt+0x3a18>
   14ed0:	sub	r1, r7, #1
   14ed4:	cmp	r3, r1
   14ed8:	beq	14e44 <__assert_fail@plt+0x3a10>
   14edc:	ldrb	r2, [r3, #1]!
   14ee0:	cmp	r2, r4
   14ee4:	bne	14ed4 <__assert_fail@plt+0x3aa0>
   14ee8:	b	14e4c <__assert_fail@plt+0x3a18>
   14eec:	ldrb	r1, [r8]
   14ef0:	cmp	r1, r6
   14ef4:	beq	14d9c <__assert_fail@plt+0x3968>
   14ef8:	add	r4, r4, #24
   14efc:	subs	r5, r5, #1
   14f00:	beq	14dd0 <__assert_fail@plt+0x399c>
   14f04:	ldr	r3, [r4, #12]
   14f08:	tst	r3, #8
   14f0c:	bne	14ef8 <__assert_fail@plt+0x3ac4>
   14f10:	ldr	r6, [r4, #4]
   14f14:	sub	r3, r6, #1
   14f18:	cmp	r3, #254	; 0xfe
   14f1c:	bhi	14ef8 <__assert_fail@plt+0x3ac4>
   14f20:	bl	11290 <__ctype_b_loc@plt>
   14f24:	ldr	r2, [r0]
   14f28:	lsl	r3, r6, #1
   14f2c:	ldrh	r3, [r2, r3]
   14f30:	tst	r3, #16384	; 0x4000
   14f34:	bne	14eec <__assert_fail@plt+0x3ab8>
   14f38:	b	14ef8 <__assert_fail@plt+0x3ac4>
   14f3c:	strb	r1, [fp]
   14f40:	add	fp, fp, #1
   14f44:	add	r8, r8, #1
   14f48:	b	14ef8 <__assert_fail@plt+0x3ac4>
   14f4c:	andeq	sl, r1, r4, lsr #10
   14f50:	andeq	r0, r0, r2, asr #3
   14f54:	andeq	sl, r1, r0, lsl r6
   14f58:	andeq	sl, r1, ip, lsl r6
   14f5c:	andeq	sl, r1, r0, lsr #12
   14f60:	ldrdeq	r0, [r0], -sl
   14f64:	andeq	sl, r1, r0, lsr r6
   14f68:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   14f6c:	andeq	sl, r1, r4, asr r6
   14f70:	andeq	sl, r1, r0, lsr r5
   14f74:	andeq	r0, r0, sl, asr #7
   14f78:	muleq	r1, r0, r6
   14f7c:	andeq	sl, r1, ip, lsr #13

00014f80 <argp_failure@@Base>:
   14f80:	push	{r3}		; (str r3, [sp, #-4]!)
   14f84:	push	{r4, r5, r6, r7, lr}
   14f88:	sub	sp, sp, #200	; 0xc8
   14f8c:	mov	r7, r1
   14f90:	mov	r6, r2
   14f94:	subs	r5, r0, #0
   14f98:	beq	150e8 <argp_failure@@Base+0x168>
   14f9c:	ldr	r3, [r5, #16]
   14fa0:	tst	r3, #2
   14fa4:	bne	150d8 <argp_failure@@Base+0x158>
   14fa8:	ldr	r4, [r5, #44]	; 0x2c
   14fac:	cmp	r4, #0
   14fb0:	beq	150d8 <argp_failure@@Base+0x158>
   14fb4:	mov	r0, r4
   14fb8:	bl	113b0 <flockfile@plt>
   14fbc:	ldr	r0, [r5, #40]	; 0x28
   14fc0:	mov	r1, r4
   14fc4:	bl	110e0 <fputs_unlocked@plt>
   14fc8:	ldr	r3, [sp, #220]	; 0xdc
   14fcc:	cmp	r3, #0
   14fd0:	beq	1502c <argp_failure@@Base+0xac>
   14fd4:	add	r3, sp, #224	; 0xe0
   14fd8:	str	r3, [sp]
   14fdc:	ldr	r3, [r4, #20]
   14fe0:	ldr	r2, [r4, #24]
   14fe4:	cmp	r3, r2
   14fe8:	addcc	r2, r3, #1
   14fec:	strcc	r2, [r4, #20]
   14ff0:	movcc	r2, #58	; 0x3a
   14ff4:	strbcc	r2, [r3]
   14ff8:	bcs	1510c <argp_failure@@Base+0x18c>
   14ffc:	ldr	r3, [r4, #20]
   15000:	ldr	r2, [r4, #24]
   15004:	cmp	r3, r2
   15008:	addcc	r2, r3, #1
   1500c:	strcc	r2, [r4, #20]
   15010:	movcc	r2, #32
   15014:	strbcc	r2, [r3]
   15018:	bcs	1511c <argp_failure@@Base+0x19c>
   1501c:	ldr	r2, [sp]
   15020:	ldr	r1, [sp, #220]	; 0xdc
   15024:	mov	r0, r4
   15028:	bl	11374 <vfprintf@plt>
   1502c:	cmp	r6, #0
   15030:	beq	15094 <argp_failure@@Base+0x114>
   15034:	ldr	r3, [r4, #20]
   15038:	ldr	r2, [r4, #24]
   1503c:	cmp	r3, r2
   15040:	addcc	r2, r3, #1
   15044:	strcc	r2, [r4, #20]
   15048:	movcc	r2, #58	; 0x3a
   1504c:	strbcc	r2, [r3]
   15050:	bcs	1512c <argp_failure@@Base+0x1ac>
   15054:	ldr	r3, [r4, #20]
   15058:	ldr	r2, [r4, #24]
   1505c:	cmp	r3, r2
   15060:	addcc	r2, r3, #1
   15064:	strcc	r2, [r4, #20]
   15068:	movcc	r2, #32
   1506c:	strbcc	r2, [r3]
   15070:	bcs	1513c <argp_failure@@Base+0x1bc>
   15074:	mov	r2, #200	; 0xc8
   15078:	mov	r1, sp
   1507c:	mov	r0, r6
   15080:	bl	112fc <strerror_r@plt>
   15084:	cmp	r0, #0
   15088:	beq	1514c <argp_failure@@Base+0x1cc>
   1508c:	mov	r1, r4
   15090:	bl	110e0 <fputs_unlocked@plt>
   15094:	ldr	r3, [r4, #20]
   15098:	ldr	r2, [r4, #24]
   1509c:	cmp	r3, r2
   150a0:	addcc	r2, r3, #1
   150a4:	strcc	r2, [r4, #20]
   150a8:	movcc	r2, #10
   150ac:	strbcc	r2, [r3]
   150b0:	bcs	15164 <argp_failure@@Base+0x1e4>
   150b4:	mov	r0, r4
   150b8:	bl	11200 <funlockfile@plt>
   150bc:	cmp	r7, #0
   150c0:	beq	150d8 <argp_failure@@Base+0x158>
   150c4:	cmp	r5, #0
   150c8:	beq	15174 <argp_failure@@Base+0x1f4>
   150cc:	ldr	r3, [r5, #16]
   150d0:	tst	r3, #32
   150d4:	beq	15174 <argp_failure@@Base+0x1f4>
   150d8:	add	sp, sp, #200	; 0xc8
   150dc:	pop	{r4, r5, r6, r7, lr}
   150e0:	add	sp, sp, #4
   150e4:	bx	lr
   150e8:	ldr	r3, [pc, #140]	; 1517c <argp_failure@@Base+0x1fc>
   150ec:	ldr	r4, [r3]
   150f0:	cmp	r4, #0
   150f4:	beq	150d8 <argp_failure@@Base+0x158>
   150f8:	mov	r0, r4
   150fc:	bl	113b0 <flockfile@plt>
   15100:	ldr	r3, [pc, #120]	; 15180 <argp_failure@@Base+0x200>
   15104:	ldr	r0, [r3]
   15108:	b	14fc0 <argp_failure@@Base+0x40>
   1510c:	mov	r1, #58	; 0x3a
   15110:	mov	r0, r4
   15114:	bl	11344 <__overflow@plt>
   15118:	b	14ffc <argp_failure@@Base+0x7c>
   1511c:	mov	r1, #32
   15120:	mov	r0, r4
   15124:	bl	11344 <__overflow@plt>
   15128:	b	1501c <argp_failure@@Base+0x9c>
   1512c:	mov	r1, #58	; 0x3a
   15130:	mov	r0, r4
   15134:	bl	11344 <__overflow@plt>
   15138:	b	15054 <argp_failure@@Base+0xd4>
   1513c:	mov	r1, #32
   15140:	mov	r0, r4
   15144:	bl	11344 <__overflow@plt>
   15148:	b	15074 <argp_failure@@Base+0xf4>
   1514c:	mov	r0, r6
   15150:	bl	11260 <strerror@plt>
   15154:	ldr	r3, [pc, #40]	; 15184 <argp_failure@@Base+0x204>
   15158:	cmp	r0, #0
   1515c:	moveq	r0, r3
   15160:	b	1508c <argp_failure@@Base+0x10c>
   15164:	mov	r1, #10
   15168:	mov	r0, r4
   1516c:	bl	11344 <__overflow@plt>
   15170:	b	150b4 <argp_failure@@Base+0x134>
   15174:	mov	r0, r7
   15178:	bl	112a8 <exit@plt>
   1517c:	ldrdeq	ip, [r2], -r8
   15180:	ldrdeq	ip, [r2], -r0
   15184:	andeq	sl, r1, r0, ror #13
   15188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1518c:	add	fp, sp, #32
   15190:	sub	sp, sp, #108	; 0x6c
   15194:	str	r0, [fp, #-112]	; 0xffffff90
   15198:	str	r1, [fp, #-100]	; 0xffffff9c
   1519c:	str	r3, [fp, #-104]	; 0xffffff98
   151a0:	subs	r3, r2, #0
   151a4:	str	r3, [fp, #-132]	; 0xffffff7c
   151a8:	beq	16214 <argp_failure@@Base+0x1294>
   151ac:	mov	r0, r3
   151b0:	bl	113b0 <flockfile@plt>
   151b4:	ldr	r3, [pc, #3772]	; 16078 <argp_failure@@Base+0x10f8>
   151b8:	ldr	r3, [r3, #36]	; 0x24
   151bc:	str	r3, [fp, #-108]	; 0xffffff94
   151c0:	cmp	r3, #0
   151c4:	beq	1529c <argp_failure@@Base+0x31c>
   151c8:	mov	r3, #0
   151cc:	ldr	r2, [pc, #3748]	; 16078 <argp_failure@@Base+0x10f8>
   151d0:	ldr	r2, [r2, #32]
   151d4:	mov	r1, r3
   151d8:	ldr	r0, [fp, #-132]	; 0xffffff7c
   151dc:	bl	183a4 <argp_parse@@Base+0x187c>
   151e0:	subs	sl, r0, #0
   151e4:	beq	15648 <argp_failure@@Base+0x6c8>
   151e8:	ldr	r3, [fp, #-104]	; 0xffffff98
   151ec:	tst	r3, #11
   151f0:	moveq	r3, #0
   151f4:	streq	r3, [fp, #-108]	; 0xffffff94
   151f8:	bne	15654 <argp_failure@@Base+0x6d4>
   151fc:	ldr	r3, [fp, #-104]	; 0xffffff98
   15200:	tst	r3, #3
   15204:	moveq	r4, #0
   15208:	bne	156d8 <argp_failure@@Base+0x758>
   1520c:	ldr	r3, [fp, #-104]	; 0xffffff98
   15210:	tst	r3, #16
   15214:	bne	158d4 <argp_failure@@Base+0x954>
   15218:	ldr	r3, [fp, #-104]	; 0xffffff98
   1521c:	tst	r3, #4
   15220:	bne	158fc <argp_failure@@Base+0x97c>
   15224:	ldr	r3, [fp, #-104]	; 0xffffff98
   15228:	tst	r3, #8
   1522c:	beq	16188 <argp_failure@@Base+0x1208>
   15230:	ldr	r3, [fp, #-108]	; 0xffffff94
   15234:	ldr	r3, [r3, #4]
   15238:	cmp	r3, #0
   1523c:	beq	16188 <argp_failure@@Base+0x1208>
   15240:	cmp	r4, #0
   15244:	beq	1526c <argp_failure@@Base+0x2ec>
   15248:	ldr	r2, [sl, #28]
   1524c:	ldr	r3, [sl, #32]
   15250:	cmp	r2, r3
   15254:	bcs	15918 <argp_failure@@Base+0x998>
   15258:	ldr	r3, [sl, #28]
   1525c:	add	r2, r3, #1
   15260:	str	r2, [sl, #28]
   15264:	mov	r2, #10
   15268:	strb	r2, [r3]
   1526c:	mov	r3, #0
   15270:	str	r3, [fp, #-88]	; 0xffffffa8
   15274:	str	r3, [fp, #-84]	; 0xffffffac
   15278:	str	r3, [fp, #-80]	; 0xffffffb0
   1527c:	ldr	r3, [fp, #-108]	; 0xffffff94
   15280:	ldr	r2, [r3]
   15284:	str	r2, [fp, #-96]	; 0xffffffa0
   15288:	ldr	r3, [r3, #4]
   1528c:	str	r3, [fp, #-120]	; 0xffffff88
   15290:	cmp	r3, #0
   15294:	bne	15d00 <argp_failure@@Base+0xd80>
   15298:	b	16184 <argp_failure@@Base+0x1204>
   1529c:	ldr	r0, [pc, #3452]	; 16020 <argp_failure@@Base+0x10a0>
   152a0:	bl	11230 <getenv@plt>
   152a4:	mov	r9, r0
   152a8:	sub	ip, fp, #76	; 0x4c
   152ac:	ldr	lr, [pc, #3524]	; 16078 <argp_failure@@Base+0x10f8>
   152b0:	ldm	lr!, {r0, r1, r2, r3}
   152b4:	stmia	ip!, {r0, r1, r2, r3}
   152b8:	ldm	lr!, {r0, r1, r2, r3}
   152bc:	stmia	ip!, {r0, r1, r2, r3}
   152c0:	ldm	lr, {r0, r1}
   152c4:	stm	ip, {r0, r1}
   152c8:	cmp	r9, #0
   152cc:	ldrne	sl, [pc, #3408]	; 16024 <argp_failure@@Base+0x10a4>
   152d0:	addne	r8, sl, #168	; 0xa8
   152d4:	bne	15578 <argp_failure@@Base+0x5f8>
   152d8:	b	151c8 <argp_failure@@Base+0x248>
   152dc:	mov	r5, r3
   152e0:	mov	r9, r5
   152e4:	mov	r3, r5
   152e8:	ldrb	r0, [r3], #1
   152ec:	lsl	r2, r0, #1
   152f0:	ldrh	r2, [r1, r2]
   152f4:	tst	r2, #8192	; 0x2000
   152f8:	bne	152dc <argp_failure@@Base+0x35c>
   152fc:	tst	r2, #1024	; 0x400
   15300:	beq	15570 <argp_failure@@Base+0x5f0>
   15304:	cmp	r0, #95	; 0x5f
   15308:	cmpne	r0, #45	; 0x2d
   1530c:	moveq	r3, #1
   15310:	movne	r3, #0
   15314:	lsl	r2, r2, #28
   15318:	orrs	r3, r3, r2, lsr #31
   1531c:	beq	16298 <argp_failure@@Base+0x1318>
   15320:	mov	r4, r5
   15324:	ldrb	r3, [r4, #1]!
   15328:	lsl	r2, r3, #1
   1532c:	ldrh	r2, [r1, r2]
   15330:	lsl	r2, r2, #28
   15334:	cmp	r3, #95	; 0x5f
   15338:	cmpne	r3, #45	; 0x2d
   1533c:	moveq	r3, #1
   15340:	movne	r3, #0
   15344:	orrs	r3, r3, r2, lsr #31
   15348:	bne	15324 <argp_failure@@Base+0x3a4>
   1534c:	sub	r5, r4, r5
   15350:	ldrb	r3, [r4]
   15354:	lsl	r2, r3, #1
   15358:	ldrh	r2, [r1, r2]
   1535c:	tst	r2, #8192	; 0x2000
   15360:	beq	15378 <argp_failure@@Base+0x3f8>
   15364:	ldrb	r3, [r4, #1]!
   15368:	lsl	r2, r3, #1
   1536c:	ldrh	r2, [r1, r2]
   15370:	tst	r2, #8192	; 0x2000
   15374:	bne	15364 <argp_failure@@Base+0x3e4>
   15378:	cmp	r3, #44	; 0x2c
   1537c:	cmpne	r3, #0
   15380:	beq	162b0 <argp_failure@@Base+0x1330>
   15384:	cmp	r3, #61	; 0x3d
   15388:	beq	153b0 <argp_failure@@Base+0x430>
   1538c:	ldrb	r3, [r4]
   15390:	lsl	r3, r3, #1
   15394:	ldrh	r3, [r1, r3]
   15398:	tst	r3, #2048	; 0x800
   1539c:	bne	15430 <argp_failure@@Base+0x4b0>
   153a0:	ldr	r3, [fp, #-108]	; 0xffffff94
   153a4:	str	r3, [fp, #-96]	; 0xffffffa0
   153a8:	str	r3, [fp, #-116]	; 0xffffff8c
   153ac:	b	162c4 <argp_failure@@Base+0x1344>
   153b0:	add	r2, r4, #1
   153b4:	ldrb	r3, [r4, #1]
   153b8:	lsl	r3, r3, #1
   153bc:	ldrh	r3, [r1, r3]
   153c0:	tst	r3, #8192	; 0x2000
   153c4:	beq	162a8 <argp_failure@@Base+0x1328>
   153c8:	ldrb	r3, [r2, #1]!
   153cc:	lsl	r3, r3, #1
   153d0:	ldrh	r3, [r1, r3]
   153d4:	tst	r3, #8192	; 0x2000
   153d8:	bne	153c8 <argp_failure@@Base+0x448>
   153dc:	mov	r4, r2
   153e0:	b	1538c <argp_failure@@Base+0x40c>
   153e4:	ldrb	r3, [r9, #1]
   153e8:	cmp	r3, #111	; 0x6f
   153ec:	movne	r3, #1
   153f0:	strne	r3, [fp, #-96]	; 0xffffffa0
   153f4:	strne	r3, [fp, #-116]	; 0xffffff8c
   153f8:	bne	162c4 <argp_failure@@Base+0x1344>
   153fc:	ldrb	r3, [r9, #2]
   15400:	cmp	r3, #45	; 0x2d
   15404:	movne	r3, #1
   15408:	strne	r3, [fp, #-96]	; 0xffffffa0
   1540c:	strne	r3, [fp, #-116]	; 0xffffff8c
   15410:	bne	162c4 <argp_failure@@Base+0x1344>
   15414:	add	r9, r9, #3
   15418:	sub	r5, r5, #3
   1541c:	ldr	r3, [fp, #-108]	; 0xffffff94
   15420:	str	r3, [fp, #-116]	; 0xffffff8c
   15424:	mov	r3, #1
   15428:	str	r3, [fp, #-96]	; 0xffffffa0
   1542c:	b	162c4 <argp_failure@@Base+0x1344>
   15430:	mov	r2, #10
   15434:	mov	r1, #0
   15438:	mov	r0, r4
   1543c:	bl	11110 <strtol@plt>
   15440:	str	r0, [fp, #-116]	; 0xffffff8c
   15444:	ldr	r2, [r6]
   15448:	ldrb	r3, [r4]
   1544c:	lsl	r3, r3, #1
   15450:	ldrh	r3, [r2, r3]
   15454:	tst	r3, #2048	; 0x800
   15458:	beq	15470 <argp_failure@@Base+0x4f0>
   1545c:	ldrb	r3, [r4, #1]!
   15460:	lsl	r3, r3, #1
   15464:	ldrh	r3, [r2, r3]
   15468:	tst	r3, #2048	; 0x800
   1546c:	bne	1545c <argp_failure@@Base+0x4dc>
   15470:	ldrb	r3, [r4]
   15474:	lsl	r3, r3, #1
   15478:	ldrh	r3, [r2, r3]
   1547c:	tst	r3, #8192	; 0x2000
   15480:	beq	154a4 <argp_failure@@Base+0x524>
   15484:	ldrb	r3, [r4, #1]!
   15488:	lsl	r3, r3, #1
   1548c:	ldrh	r3, [r2, r3]
   15490:	tst	r3, #8192	; 0x2000
   15494:	bne	15484 <argp_failure@@Base+0x504>
   15498:	ldr	r3, [fp, #-108]	; 0xffffff94
   1549c:	str	r3, [fp, #-96]	; 0xffffffa0
   154a0:	b	162c4 <argp_failure@@Base+0x1344>
   154a4:	ldr	r3, [fp, #-108]	; 0xffffff94
   154a8:	str	r3, [fp, #-96]	; 0xffffffa0
   154ac:	b	162c4 <argp_failure@@Base+0x1344>
   154b0:	str	r9, [sp, #4]
   154b4:	str	r7, [sp]
   154b8:	ldr	r3, [pc, #2920]	; 16028 <argp_failure@@Base+0x10a8>
   154bc:	mov	r2, #0
   154c0:	mov	r1, r2
   154c4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   154c8:	bl	14f80 <argp_failure@@Base>
   154cc:	b	15534 <argp_failure@@Base+0x5b4>
   154d0:	add	r6, r6, #16
   154d4:	cmp	r6, r8
   154d8:	beq	15550 <argp_failure@@Base+0x5d0>
   154dc:	mov	r0, r6
   154e0:	bl	112c0 <strlen@plt>
   154e4:	mov	r7, r0
   154e8:	cmp	r0, r5
   154ec:	bne	154d0 <argp_failure@@Base+0x550>
   154f0:	mov	r2, r5
   154f4:	mov	r1, r6
   154f8:	mov	r0, r9
   154fc:	bl	11410 <strncmp@plt>
   15500:	cmp	r0, #0
   15504:	bne	154d0 <argp_failure@@Base+0x550>
   15508:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1550c:	cmp	r3, #0
   15510:	beq	15520 <argp_failure@@Base+0x5a0>
   15514:	ldrb	r3, [r6, #14]
   15518:	cmp	r3, #0
   1551c:	beq	154b0 <argp_failure@@Base+0x530>
   15520:	ldrb	r3, [r6, #15]
   15524:	sub	r2, fp, #36	; 0x24
   15528:	add	r3, r2, r3
   1552c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15530:	str	r2, [r3, #-40]	; 0xffffffd8
   15534:	cmp	r6, r8
   15538:	beq	15550 <argp_failure@@Base+0x5d0>
   1553c:	ldrb	r3, [r4]
   15540:	cmp	r3, #44	; 0x2c
   15544:	addeq	r9, r4, #1
   15548:	movne	r9, r4
   1554c:	b	15578 <argp_failure@@Base+0x5f8>
   15550:	str	r9, [sp, #4]
   15554:	str	r5, [sp]
   15558:	ldr	r3, [pc, #2764]	; 1602c <argp_failure@@Base+0x10ac>
   1555c:	mov	r2, #0
   15560:	mov	r1, r2
   15564:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15568:	bl	14f80 <argp_failure@@Base>
   1556c:	b	1553c <argp_failure@@Base+0x5bc>
   15570:	cmp	r0, #0
   15574:	bne	15598 <argp_failure@@Base+0x618>
   15578:	ldrb	r3, [r9]
   1557c:	cmp	r3, #0
   15580:	beq	155b0 <argp_failure@@Base+0x630>
   15584:	bl	11290 <__ctype_b_loc@plt>
   15588:	mov	r6, r0
   1558c:	ldr	r1, [r0]
   15590:	mov	r5, r9
   15594:	b	152e0 <argp_failure@@Base+0x360>
   15598:	str	r5, [sp]
   1559c:	ldr	r3, [pc, #2700]	; 16030 <argp_failure@@Base+0x10b0>
   155a0:	mov	r2, #0
   155a4:	mov	r1, r2
   155a8:	ldr	r0, [fp, #-100]	; 0xffffff9c
   155ac:	bl	14f80 <argp_failure@@Base>
   155b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   155b4:	ldr	r3, [pc, #2680]	; 16034 <argp_failure@@Base+0x10b4>
   155b8:	add	r1, r3, #144	; 0x90
   155bc:	add	r3, r3, #16
   155c0:	cmp	r3, r1
   155c4:	beq	15618 <argp_failure@@Base+0x698>
   155c8:	ldrb	r2, [r3, #14]
   155cc:	cmp	r2, #0
   155d0:	bne	155bc <argp_failure@@Base+0x63c>
   155d4:	ldrb	r2, [r3, #15]
   155d8:	cmp	r2, #32
   155dc:	beq	155bc <argp_failure@@Base+0x63c>
   155e0:	sub	ip, fp, #36	; 0x24
   155e4:	add	r2, ip, r2
   155e8:	ldr	r2, [r2, #-40]	; 0xffffffd8
   155ec:	cmp	r2, r0
   155f0:	blt	155bc <argp_failure@@Base+0x63c>
   155f4:	str	r3, [sp, #4]
   155f8:	ldr	r3, [pc, #2616]	; 16038 <argp_failure@@Base+0x10b8>
   155fc:	str	r3, [sp]
   15600:	ldr	r3, [pc, #2612]	; 1603c <argp_failure@@Base+0x10bc>
   15604:	mov	r2, #0
   15608:	mov	r1, r2
   1560c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15610:	bl	14f80 <argp_failure@@Base>
   15614:	b	151c8 <argp_failure@@Base+0x248>
   15618:	ldr	r4, [pc, #2648]	; 16078 <argp_failure@@Base+0x10f8>
   1561c:	mov	ip, r4
   15620:	sub	lr, fp, #76	; 0x4c
   15624:	ldm	lr!, {r0, r1, r2, r3}
   15628:	stmia	ip!, {r0, r1, r2, r3}
   1562c:	ldm	lr!, {r0, r1, r2, r3}
   15630:	stmia	ip!, {r0, r1, r2, r3}
   15634:	ldm	lr, {r0, r1}
   15638:	stm	ip, {r0, r1}
   1563c:	mov	r3, #1
   15640:	str	r3, [r4, #36]	; 0x24
   15644:	b	151c8 <argp_failure@@Base+0x248>
   15648:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1564c:	bl	11200 <funlockfile@plt>
   15650:	b	16214 <argp_failure@@Base+0x1294>
   15654:	mov	r1, #0
   15658:	ldr	r0, [fp, #-112]	; 0xffffff90
   1565c:	bl	148c4 <__assert_fail@plt+0x3490>
   15660:	str	r0, [fp, #-108]	; 0xffffff94
   15664:	ldr	r1, [pc, #2516]	; 16040 <argp_failure@@Base+0x10c0>
   15668:	bl	137cc <__assert_fail@plt+0x2398>
   1566c:	cmp	r0, #0
   15670:	mvnne	r3, #0
   15674:	strne	r3, [r0, #12]
   15678:	ldr	r1, [pc, #2500]	; 16044 <argp_failure@@Base+0x10c4>
   1567c:	ldr	r0, [fp, #-108]	; 0xffffff94
   15680:	bl	137cc <__assert_fail@plt+0x2398>
   15684:	cmp	r0, #0
   15688:	mvnne	r3, #0
   1568c:	strne	r3, [r0, #12]
   15690:	ldr	r0, [fp, #-108]	; 0xffffff94
   15694:	ldr	r3, [r0, #4]
   15698:	cmp	r3, #0
   1569c:	beq	151fc <argp_failure@@Base+0x27c>
   156a0:	ldr	r2, [r0]
   156a4:	mov	r3, #0
   156a8:	str	r3, [r2, #24]
   156ac:	add	r3, r3, #1
   156b0:	add	r2, r2, #28
   156b4:	ldr	r1, [r0, #4]
   156b8:	cmp	r3, r1
   156bc:	bcc	156a8 <argp_failure@@Base+0x728>
   156c0:	ldr	r3, [pc, #2432]	; 16048 <argp_failure@@Base+0x10c8>
   156c4:	mov	r2, #28
   156c8:	ldr	r0, [fp, #-108]	; 0xffffff94
   156cc:	ldr	r0, [r0]
   156d0:	bl	113d4 <qsort@plt>
   156d4:	b	151fc <argp_failure@@Base+0x27c>
   156d8:	ldr	r0, [fp, #-112]	; 0xffffff90
   156dc:	bl	13864 <__assert_fail@plt+0x2430>
   156e0:	mov	r2, r0
   156e4:	add	r3, r0, #14
   156e8:	bic	r3, r3, #7
   156ec:	sub	sp, sp, r3
   156f0:	add	r8, sp, #8
   156f4:	mov	r1, #0
   156f8:	mov	r0, r8
   156fc:	bl	11314 <memset@plt>
   15700:	mov	r5, #1
   15704:	ldr	r4, [pc, #2412]	; 16078 <argp_failure@@Base+0x10f8>
   15708:	ldr	r9, [pc, #2364]	; 1604c <argp_failure@@Base+0x10cc>
   1570c:	str	r8, [fp, #-96]	; 0xffffffa0
   15710:	ldr	r8, [fp, #-104]	; 0xffffff98
   15714:	b	157c4 <argp_failure@@Base+0x844>
   15718:	mov	r0, sl
   1571c:	bl	1841c <argp_parse@@Base+0x18f4>
   15720:	b	157e0 <argp_failure@@Base+0x860>
   15724:	mov	r0, sl
   15728:	bl	1841c <argp_parse@@Base+0x18f4>
   1572c:	b	15828 <argp_failure@@Base+0x8a8>
   15730:	mov	r1, sl
   15734:	ldr	r0, [fp, #-108]	; 0xffffff94
   15738:	bl	135bc <__assert_fail@plt+0x2188>
   1573c:	orr	r8, r8, #2
   15740:	str	sl, [sp]
   15744:	mov	r3, #1
   15748:	sub	r2, fp, #76	; 0x4c
   1574c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   15750:	ldr	r0, [fp, #-112]	; 0xffffff90
   15754:	bl	13ae4 <__assert_fail@plt+0x26b0>
   15758:	mov	r6, r0
   1575c:	ldr	r3, [sl, #28]
   15760:	ldr	r2, [sl, #24]
   15764:	sub	r3, r3, r2
   15768:	ldr	r2, [sl, #16]
   1576c:	cmp	r3, r2
   15770:	bhi	15898 <argp_failure@@Base+0x918>
   15774:	str	r7, [sl, #12]
   15778:	ldr	r3, [sl, #28]
   1577c:	ldr	r2, [sl, #24]
   15780:	sub	r3, r3, r2
   15784:	ldr	r2, [sl, #16]
   15788:	cmp	r3, r2
   1578c:	bhi	158a4 <argp_failure@@Base+0x924>
   15790:	str	r5, [sl, #4]
   15794:	ldr	r2, [sl, #28]
   15798:	ldr	r3, [sl, #32]
   1579c:	cmp	r2, r3
   157a0:	bcs	158b0 <argp_failure@@Base+0x930>
   157a4:	ldr	r3, [sl, #28]
   157a8:	add	r2, r3, #1
   157ac:	str	r2, [sl, #28]
   157b0:	mov	r2, #10
   157b4:	strb	r2, [r3]
   157b8:	mov	r5, #0
   157bc:	cmp	r6, r5
   157c0:	beq	158c8 <argp_failure@@Base+0x948>
   157c4:	ldr	r6, [r4, #28]
   157c8:	ldr	r3, [sl, #28]
   157cc:	ldr	r2, [sl, #24]
   157d0:	sub	r3, r3, r2
   157d4:	ldr	r2, [sl, #16]
   157d8:	cmp	r3, r2
   157dc:	bhi	15718 <argp_failure@@Base+0x798>
   157e0:	ldr	r7, [sl, #12]
   157e4:	str	r6, [sl, #12]
   157e8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   157ec:	str	r3, [fp, #-76]	; 0xffffffb4
   157f0:	cmp	r5, #0
   157f4:	ldr	r3, [fp, #4]
   157f8:	ldrne	r2, [pc, #2128]	; 16050 <argp_failure@@Base+0x10d0>
   157fc:	ldreq	r2, [pc, #2128]	; 16054 <argp_failure@@Base+0x10d4>
   15800:	mov	r1, r9
   15804:	mov	r0, sl
   15808:	bl	18ab0 <argp_parse@@Base+0x1f88>
   1580c:	ldr	r6, [r4, #28]
   15810:	ldr	r3, [sl, #28]
   15814:	ldr	r2, [sl, #24]
   15818:	sub	r3, r3, r2
   1581c:	ldr	r2, [sl, #16]
   15820:	cmp	r3, r2
   15824:	bhi	15724 <argp_failure@@Base+0x7a4>
   15828:	ldr	r5, [sl, #4]
   1582c:	str	r6, [sl, #4]
   15830:	tst	r8, #2
   15834:	beq	15730 <argp_failure@@Base+0x7b0>
   15838:	ldr	r3, [fp, #-108]	; 0xffffff94
   1583c:	ldr	r3, [r3, #4]
   15840:	cmp	r3, #0
   15844:	beq	15740 <argp_failure@@Base+0x7c0>
   15848:	ldr	r3, [sl, #28]
   1584c:	add	r3, r3, #12
   15850:	ldr	r2, [sl, #32]
   15854:	cmp	r2, r3
   15858:	bcs	15870 <argp_failure@@Base+0x8f0>
   1585c:	mov	r1, #12
   15860:	mov	r0, sl
   15864:	bl	189c0 <argp_parse@@Base+0x1e98>
   15868:	cmp	r0, #0
   1586c:	beq	15740 <argp_failure@@Base+0x7c0>
   15870:	ldr	ip, [sl, #28]
   15874:	ldr	r3, [pc, #2012]	; 16058 <argp_failure@@Base+0x10d8>
   15878:	ldm	r3!, {r0, r1, r2}
   1587c:	str	r0, [ip]
   15880:	str	r1, [ip, #4]
   15884:	str	r2, [ip, #8]
   15888:	ldr	r3, [sl, #28]
   1588c:	add	r3, r3, #12
   15890:	str	r3, [sl, #28]
   15894:	b	15740 <argp_failure@@Base+0x7c0>
   15898:	mov	r0, sl
   1589c:	bl	1841c <argp_parse@@Base+0x18f4>
   158a0:	b	15774 <argp_failure@@Base+0x7f4>
   158a4:	mov	r0, sl
   158a8:	bl	1841c <argp_parse@@Base+0x18f4>
   158ac:	b	15790 <argp_failure@@Base+0x810>
   158b0:	mov	r1, #1
   158b4:	mov	r0, sl
   158b8:	bl	189c0 <argp_parse@@Base+0x1e98>
   158bc:	cmp	r0, #0
   158c0:	beq	157b8 <argp_failure@@Base+0x838>
   158c4:	b	157a4 <argp_failure@@Base+0x824>
   158c8:	str	r8, [fp, #-104]	; 0xffffff98
   158cc:	mov	r4, #1
   158d0:	b	1520c <argp_failure@@Base+0x28c>
   158d4:	str	sl, [sp, #4]
   158d8:	mov	r3, #1
   158dc:	str	r3, [sp]
   158e0:	mov	r3, #0
   158e4:	mov	r2, r3
   158e8:	ldr	r1, [fp, #-100]	; 0xffffff9c
   158ec:	ldr	r0, [fp, #-112]	; 0xffffff90
   158f0:	bl	1403c <__assert_fail@plt+0x2c08>
   158f4:	orr	r4, r4, r0
   158f8:	b	15218 <argp_failure@@Base+0x298>
   158fc:	ldr	r3, [fp, #4]
   15900:	mov	r2, r3
   15904:	ldr	r1, [pc, #1872]	; 1605c <argp_failure@@Base+0x10dc>
   15908:	mov	r0, sl
   1590c:	bl	18ab0 <argp_parse@@Base+0x1f88>
   15910:	mov	r4, #1
   15914:	b	15224 <argp_failure@@Base+0x2a4>
   15918:	mov	r1, #1
   1591c:	mov	r0, sl
   15920:	bl	189c0 <argp_parse@@Base+0x1e98>
   15924:	cmp	r0, #0
   15928:	beq	1526c <argp_failure@@Base+0x2ec>
   1592c:	b	15258 <argp_failure@@Base+0x2d8>
   15930:	mov	r0, sl
   15934:	bl	1841c <argp_parse@@Base+0x18f4>
   15938:	b	15d24 <argp_failure@@Base+0xda4>
   1593c:	add	r3, r3, #24
   15940:	subs	r2, r2, #1
   15944:	beq	15968 <argp_failure@@Base+0x9e8>
   15948:	ldr	r1, [r3, #-24]	; 0xffffffe8
   1594c:	cmp	r1, #0
   15950:	beq	1593c <argp_failure@@Base+0x9bc>
   15954:	ldr	r1, [r3, #-12]
   15958:	tst	r1, #2
   1595c:	bne	1593c <argp_failure@@Base+0x9bc>
   15960:	mov	r3, #1
   15964:	str	r3, [fp, #-116]	; 0xffffff8c
   15968:	ldr	r3, [pc, #1800]	; 16078 <argp_failure@@Base+0x10f8>
   1596c:	ldr	r4, [r3, #8]
   15970:	ldr	r3, [sl, #28]
   15974:	ldr	r2, [sl, #24]
   15978:	sub	r3, r3, r2
   1597c:	ldr	r2, [sl, #16]
   15980:	cmp	r3, r2
   15984:	bhi	159a4 <argp_failure@@Base+0xa24>
   15988:	str	r4, [sl, #12]
   1598c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15990:	ldr	r5, [r3, #4]
   15994:	cmp	r5, #0
   15998:	beq	15aa0 <argp_failure@@Base+0xb20>
   1599c:	mov	r4, r8
   159a0:	b	162e4 <argp_failure@@Base+0x1364>
   159a4:	mov	r0, sl
   159a8:	bl	1841c <argp_parse@@Base+0x18f4>
   159ac:	b	15988 <argp_failure@@Base+0xa08>
   159b0:	tst	r6, #2
   159b4:	beq	159c0 <argp_failure@@Base+0xa40>
   159b8:	add	r9, r9, #1
   159bc:	b	162d8 <argp_failure@@Base+0x1358>
   159c0:	sub	r1, fp, #76	; 0x4c
   159c4:	ldr	r3, [pc, #1708]	; 16078 <argp_failure@@Base+0x10f8>
   159c8:	ldr	r0, [r3, #8]
   159cc:	bl	13eb8 <__assert_fail@plt+0x2a84>
   159d0:	ldr	r2, [sl, #28]
   159d4:	ldr	r3, [sl, #32]
   159d8:	cmp	r2, r3
   159dc:	bcs	15a5c <argp_failure@@Base+0xadc>
   159e0:	ldr	r3, [sl, #28]
   159e4:	add	r2, r3, #1
   159e8:	str	r2, [sl, #28]
   159ec:	mov	r2, #45	; 0x2d
   159f0:	strb	r2, [r3]
   159f4:	ldrb	r6, [r9]
   159f8:	ldr	r2, [sl, #28]
   159fc:	ldr	r3, [sl, #32]
   15a00:	cmp	r2, r3
   15a04:	bcs	15a74 <argp_failure@@Base+0xaf4>
   15a08:	ldr	r3, [sl, #28]
   15a0c:	add	r2, r3, #1
   15a10:	str	r2, [sl, #28]
   15a14:	strb	r6, [r3]
   15a18:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15a1c:	cmp	r3, #0
   15a20:	beq	15a34 <argp_failure@@Base+0xab4>
   15a24:	ldr	r3, [pc, #1612]	; 16078 <argp_failure@@Base+0x10f8>
   15a28:	ldr	r3, [r3]
   15a2c:	cmp	r3, #0
   15a30:	beq	15a8c <argp_failure@@Base+0xb0c>
   15a34:	ldr	r2, [r8, #8]
   15a38:	cmp	r2, #0
   15a3c:	beq	159b8 <argp_failure@@Base+0xa38>
   15a40:	ldr	r3, [r8, #12]
   15a44:	tst	r3, #1
   15a48:	ldrne	r1, [pc, #1552]	; 16060 <argp_failure@@Base+0x10e0>
   15a4c:	ldreq	r1, [pc, #1552]	; 16064 <argp_failure@@Base+0x10e4>
   15a50:	mov	r0, sl
   15a54:	bl	18ab0 <argp_parse@@Base+0x1f88>
   15a58:	b	159b8 <argp_failure@@Base+0xa38>
   15a5c:	mov	r1, #1
   15a60:	mov	r0, sl
   15a64:	bl	189c0 <argp_parse@@Base+0x1e98>
   15a68:	cmp	r0, #0
   15a6c:	beq	159f4 <argp_failure@@Base+0xa74>
   15a70:	b	159e0 <argp_failure@@Base+0xa60>
   15a74:	mov	r1, #1
   15a78:	mov	r0, sl
   15a7c:	bl	189c0 <argp_parse@@Base+0x1e98>
   15a80:	cmp	r0, #0
   15a84:	beq	15a18 <argp_failure@@Base+0xa98>
   15a88:	b	15a08 <argp_failure@@Base+0xa88>
   15a8c:	ldr	r3, [r8, #8]
   15a90:	cmp	r3, #0
   15a94:	movne	r3, #1
   15a98:	strne	r3, [fp, #-80]	; 0xffffffb0
   15a9c:	b	159b8 <argp_failure@@Base+0xa38>
   15aa0:	ldr	r3, [r8, #12]
   15aa4:	tst	r3, #8
   15aa8:	beq	15b84 <argp_failure@@Base+0xc04>
   15aac:	ldr	r3, [pc, #1476]	; 16078 <argp_failure@@Base+0x10f8>
   15ab0:	ldr	r4, [r3, #16]
   15ab4:	ldr	r3, [sl, #28]
   15ab8:	ldr	r2, [sl, #24]
   15abc:	sub	r3, r3, r2
   15ac0:	ldr	r2, [sl, #16]
   15ac4:	cmp	r3, r2
   15ac8:	bhi	15ae8 <argp_failure@@Base+0xb68>
   15acc:	str	r4, [sl, #12]
   15ad0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15ad4:	ldr	r5, [r3, #4]
   15ad8:	cmp	r5, #0
   15adc:	beq	15c38 <argp_failure@@Base+0xcb8>
   15ae0:	add	r4, r8, #24
   15ae4:	b	15b1c <argp_failure@@Base+0xb9c>
   15ae8:	mov	r0, sl
   15aec:	bl	1841c <argp_parse@@Base+0x18f4>
   15af0:	b	15acc <argp_failure@@Base+0xb4c>
   15af4:	mov	r2, r6
   15af8:	mov	r1, r7
   15afc:	ldr	r0, [sl, #28]
   15b00:	bl	11188 <memcpy@plt>
   15b04:	ldr	r3, [sl, #28]
   15b08:	add	r6, r3, r6
   15b0c:	str	r6, [sl, #28]
   15b10:	add	r4, r4, #24
   15b14:	subs	r5, r5, #1
   15b18:	beq	15c38 <argp_failure@@Base+0xcb8>
   15b1c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15b20:	cmp	r3, #0
   15b24:	beq	15b10 <argp_failure@@Base+0xb90>
   15b28:	ldr	r3, [r4, #-12]
   15b2c:	tst	r3, #2
   15b30:	bne	15b10 <argp_failure@@Base+0xb90>
   15b34:	sub	r1, fp, #76	; 0x4c
   15b38:	ldr	r3, [pc, #1336]	; 16078 <argp_failure@@Base+0x10f8>
   15b3c:	ldr	r0, [r3, #16]
   15b40:	bl	13eb8 <__assert_fail@plt+0x2a84>
   15b44:	ldr	r7, [r4, #-24]	; 0xffffffe8
   15b48:	mov	r0, r7
   15b4c:	bl	112c0 <strlen@plt>
   15b50:	subs	r6, r0, #0
   15b54:	beq	15b10 <argp_failure@@Base+0xb90>
   15b58:	ldr	r3, [sl, #28]
   15b5c:	add	r3, r3, r6
   15b60:	ldr	r2, [sl, #32]
   15b64:	cmp	r2, r3
   15b68:	bcs	15af4 <argp_failure@@Base+0xb74>
   15b6c:	mov	r1, r6
   15b70:	mov	r0, sl
   15b74:	bl	189c0 <argp_parse@@Base+0x1e98>
   15b78:	cmp	r0, #0
   15b7c:	beq	15b10 <argp_failure@@Base+0xb90>
   15b80:	b	15af4 <argp_failure@@Base+0xb74>
   15b84:	ldr	r3, [pc, #1260]	; 16078 <argp_failure@@Base+0x10f8>
   15b88:	ldr	r4, [r3, #12]
   15b8c:	ldr	r3, [sl, #28]
   15b90:	ldr	r2, [sl, #24]
   15b94:	sub	r3, r3, r2
   15b98:	ldr	r2, [sl, #16]
   15b9c:	cmp	r3, r2
   15ba0:	bhi	15bc0 <argp_failure@@Base+0xc40>
   15ba4:	str	r4, [sl, #12]
   15ba8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15bac:	ldr	r5, [r3, #4]
   15bb0:	cmp	r5, #0
   15bb4:	beq	15c38 <argp_failure@@Base+0xcb8>
   15bb8:	add	r4, r8, #24
   15bbc:	b	15bd8 <argp_failure@@Base+0xc58>
   15bc0:	mov	r0, sl
   15bc4:	bl	1841c <argp_parse@@Base+0x18f4>
   15bc8:	b	15ba4 <argp_failure@@Base+0xc24>
   15bcc:	add	r4, r4, #24
   15bd0:	subs	r5, r5, #1
   15bd4:	beq	15c38 <argp_failure@@Base+0xcb8>
   15bd8:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15bdc:	cmp	r3, #0
   15be0:	beq	15bcc <argp_failure@@Base+0xc4c>
   15be4:	ldr	r3, [r4, #-12]
   15be8:	tst	r3, #2
   15bec:	bne	15bcc <argp_failure@@Base+0xc4c>
   15bf0:	sub	r1, fp, #76	; 0x4c
   15bf4:	ldr	r3, [pc, #1148]	; 16078 <argp_failure@@Base+0x10f8>
   15bf8:	ldr	r0, [r3, #12]
   15bfc:	bl	13eb8 <__assert_fail@plt+0x2a84>
   15c00:	ldr	r2, [r4, #-24]	; 0xffffffe8
   15c04:	ldr	r1, [pc, #1116]	; 16068 <argp_failure@@Base+0x10e8>
   15c08:	mov	r0, sl
   15c0c:	bl	18ab0 <argp_parse@@Base+0x1f88>
   15c10:	ldr	r2, [r8, #8]
   15c14:	cmp	r2, #0
   15c18:	beq	15bcc <argp_failure@@Base+0xc4c>
   15c1c:	ldr	r3, [r8, #12]
   15c20:	tst	r3, #1
   15c24:	ldrne	r1, [pc, #1088]	; 1606c <argp_failure@@Base+0x10ec>
   15c28:	ldreq	r1, [pc, #1088]	; 16070 <argp_failure@@Base+0x10f0>
   15c2c:	mov	r0, sl
   15c30:	bl	18ab0 <argp_parse@@Base+0x1f88>
   15c34:	b	15bcc <argp_failure@@Base+0xc4c>
   15c38:	ldr	r3, [sl, #28]
   15c3c:	ldr	r2, [sl, #24]
   15c40:	sub	r3, r3, r2
   15c44:	ldr	r2, [sl, #16]
   15c48:	cmp	r3, r2
   15c4c:	bhi	15d8c <argp_failure@@Base+0xe0c>
   15c50:	mov	r3, #0
   15c54:	str	r3, [sl, #4]
   15c58:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15c5c:	cmp	r3, #0
   15c60:	beq	15db0 <argp_failure@@Base+0xe30>
   15c64:	ldr	r3, [r8, #12]
   15c68:	tst	r3, #8
   15c6c:	bne	15c98 <argp_failure@@Base+0xd18>
   15c70:	ldr	r4, [r8, #4]
   15c74:	sub	r3, r4, #1
   15c78:	cmp	r3, #254	; 0xfe
   15c7c:	bhi	15c98 <argp_failure@@Base+0xd18>
   15c80:	bl	11290 <__ctype_b_loc@plt>
   15c84:	ldr	r3, [r0]
   15c88:	lsl	r4, r4, #1
   15c8c:	ldrh	r3, [r3, r4]
   15c90:	tst	r3, #16384	; 0x4000
   15c94:	bne	15ca4 <argp_failure@@Base+0xd24>
   15c98:	ldr	r3, [r8]
   15c9c:	cmp	r3, #0
   15ca0:	beq	15d98 <argp_failure@@Base+0xe18>
   15ca4:	ldr	r3, [sl, #28]
   15ca8:	ldr	r2, [sl, #24]
   15cac:	sub	r3, r3, r2
   15cb0:	ldr	r2, [sl, #16]
   15cb4:	cmp	r3, r2
   15cb8:	bhi	16008 <argp_failure@@Base+0x1088>
   15cbc:	ldr	r3, [fp, #-124]	; 0xffffff84
   15cc0:	str	r3, [sl, #4]
   15cc4:	ldr	r3, [sl, #28]
   15cc8:	ldr	r2, [sl, #24]
   15ccc:	sub	r3, r3, r2
   15cd0:	ldr	r2, [sl, #16]
   15cd4:	cmp	r3, r2
   15cd8:	bhi	16014 <argp_failure@@Base+0x1094>
   15cdc:	ldr	r3, [fp, #-128]	; 0xffffff80
   15ce0:	str	r3, [sl, #12]
   15ce4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15ce8:	add	r3, r3, #28
   15cec:	str	r3, [fp, #-96]	; 0xffffffa0
   15cf0:	ldr	r3, [fp, #-120]	; 0xffffff88
   15cf4:	subs	r3, r3, #1
   15cf8:	str	r3, [fp, #-120]	; 0xffffff88
   15cfc:	beq	1608c <argp_failure@@Base+0x110c>
   15d00:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15d04:	ldr	r8, [r3]
   15d08:	ldr	r9, [r3, #8]
   15d0c:	ldr	r3, [sl, #28]
   15d10:	ldr	r2, [sl, #24]
   15d14:	sub	r3, r3, r2
   15d18:	ldr	r2, [sl, #16]
   15d1c:	cmp	r3, r2
   15d20:	bhi	15930 <argp_failure@@Base+0x9b0>
   15d24:	ldr	r3, [sl, #4]
   15d28:	str	r3, [fp, #-124]	; 0xffffff84
   15d2c:	mov	r3, #0
   15d30:	str	r3, [sl, #4]
   15d34:	ldr	r3, [sl, #12]
   15d38:	str	r3, [fp, #-128]	; 0xffffff80
   15d3c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15d40:	str	r2, [fp, #-76]	; 0xffffffb4
   15d44:	str	sl, [fp, #-72]	; 0xffffffb8
   15d48:	sub	r3, fp, #88	; 0x58
   15d4c:	str	r3, [fp, #-68]	; 0xffffffbc
   15d50:	mov	r3, #1
   15d54:	str	r3, [fp, #-64]	; 0xffffffc0
   15d58:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15d5c:	str	r3, [fp, #-60]	; 0xffffffc4
   15d60:	ldr	r3, [r8, #12]
   15d64:	ands	r3, r3, #8
   15d68:	str	r3, [fp, #-116]	; 0xffffff8c
   15d6c:	movne	r3, #0
   15d70:	strne	r3, [fp, #-116]	; 0xffffff8c
   15d74:	bne	15968 <argp_failure@@Base+0x9e8>
   15d78:	ldr	r2, [r2, #4]
   15d7c:	cmp	r2, #0
   15d80:	beq	15968 <argp_failure@@Base+0x9e8>
   15d84:	add	r3, r8, #24
   15d88:	b	15948 <argp_failure@@Base+0x9c8>
   15d8c:	mov	r0, sl
   15d90:	bl	1841c <argp_parse@@Base+0x18f4>
   15d94:	b	15c50 <argp_failure@@Base+0xcd0>
   15d98:	sub	r2, fp, #76	; 0x4c
   15d9c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15da0:	ldr	r1, [r3, #20]
   15da4:	ldr	r0, [r8, #16]
   15da8:	bl	13cd4 <__assert_fail@plt+0x28a0>
   15dac:	b	15f08 <argp_failure@@Base+0xf88>
   15db0:	ldr	r7, [r8, #16]
   15db4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15db8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15dbc:	ldr	r2, [r2, #20]
   15dc0:	ldr	r1, [r8, #4]
   15dc4:	mov	r0, r7
   15dc8:	bl	13aa0 <__assert_fail@plt+0x266c>
   15dcc:	subs	r4, r0, #0
   15dd0:	beq	15ec4 <argp_failure@@Base+0xf44>
   15dd4:	ldrb	r3, [r4]
   15dd8:	cmp	r3, #0
   15ddc:	beq	15ebc <argp_failure@@Base+0xf3c>
   15de0:	ldr	r3, [sl, #28]
   15de4:	ldr	r2, [sl, #24]
   15de8:	sub	r3, r3, r2
   15dec:	ldr	r2, [sl, #16]
   15df0:	cmp	r3, r2
   15df4:	bhi	15f14 <argp_failure@@Base+0xf94>
   15df8:	ldr	r5, [sl, #20]
   15dfc:	bic	r5, r5, r5, asr #31
   15e00:	ldr	r3, [pc, #624]	; 16078 <argp_failure@@Base+0x10f8>
   15e04:	ldr	r6, [r3, #20]
   15e08:	str	r6, [sl, #4]
   15e0c:	ldr	r3, [pc, #612]	; 16078 <argp_failure@@Base+0x10f8>
   15e10:	ldr	r6, [r3, #20]
   15e14:	ldr	r3, [sl, #28]
   15e18:	ldr	r2, [sl, #24]
   15e1c:	sub	r3, r3, r2
   15e20:	ldr	r2, [sl, #16]
   15e24:	cmp	r3, r2
   15e28:	bhi	15f50 <argp_failure@@Base+0xfd0>
   15e2c:	str	r6, [sl, #12]
   15e30:	ldr	r3, [pc, #576]	; 16078 <argp_failure@@Base+0x10f8>
   15e34:	ldr	r1, [r3, #20]
   15e38:	add	r3, r1, #3
   15e3c:	cmp	r3, r5
   15e40:	bcs	15f74 <argp_failure@@Base+0xff4>
   15e44:	ldr	r2, [sl, #28]
   15e48:	ldr	r3, [sl, #32]
   15e4c:	cmp	r2, r3
   15e50:	bcs	15f5c <argp_failure@@Base+0xfdc>
   15e54:	ldr	r3, [sl, #28]
   15e58:	add	r2, r3, #1
   15e5c:	str	r2, [sl, #28]
   15e60:	mov	r2, #10
   15e64:	strb	r2, [r3]
   15e68:	mov	r0, r4
   15e6c:	bl	112c0 <strlen@plt>
   15e70:	subs	r5, r0, #0
   15e74:	beq	15ebc <argp_failure@@Base+0xf3c>
   15e78:	ldr	r3, [sl, #28]
   15e7c:	add	r3, r3, r5
   15e80:	ldr	r2, [sl, #32]
   15e84:	cmp	r2, r3
   15e88:	bcs	15ea0 <argp_failure@@Base+0xf20>
   15e8c:	mov	r1, r5
   15e90:	mov	r0, sl
   15e94:	bl	189c0 <argp_parse@@Base+0x1e98>
   15e98:	cmp	r0, #0
   15e9c:	beq	15ebc <argp_failure@@Base+0xf3c>
   15ea0:	mov	r2, r5
   15ea4:	mov	r1, r4
   15ea8:	ldr	r0, [sl, #28]
   15eac:	bl	11188 <memcpy@plt>
   15eb0:	ldr	r3, [sl, #28]
   15eb4:	add	r5, r3, r5
   15eb8:	str	r5, [sl, #28]
   15ebc:	cmp	r7, r4
   15ec0:	bne	15fd8 <argp_failure@@Base+0x1058>
   15ec4:	ldr	r3, [sl, #28]
   15ec8:	ldr	r2, [sl, #24]
   15ecc:	sub	r3, r3, r2
   15ed0:	ldr	r2, [sl, #16]
   15ed4:	cmp	r3, r2
   15ed8:	bhi	15fe4 <argp_failure@@Base+0x1064>
   15edc:	mov	r3, #0
   15ee0:	str	r3, [sl, #4]
   15ee4:	ldr	r2, [sl, #28]
   15ee8:	ldr	r3, [sl, #32]
   15eec:	cmp	r2, r3
   15ef0:	bcs	15ff0 <argp_failure@@Base+0x1070>
   15ef4:	ldr	r3, [sl, #28]
   15ef8:	add	r2, r3, #1
   15efc:	str	r2, [sl, #28]
   15f00:	mov	r2, #10
   15f04:	strb	r2, [r3]
   15f08:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15f0c:	str	r3, [fp, #-88]	; 0xffffffa8
   15f10:	b	15ca4 <argp_failure@@Base+0xd24>
   15f14:	mov	r0, sl
   15f18:	bl	1841c <argp_parse@@Base+0x18f4>
   15f1c:	ldr	r5, [sl, #20]
   15f20:	bic	r5, r5, r5, asr #31
   15f24:	ldr	r3, [pc, #332]	; 16078 <argp_failure@@Base+0x10f8>
   15f28:	ldr	r6, [r3, #20]
   15f2c:	ldr	r3, [sl, #28]
   15f30:	ldr	r2, [sl, #24]
   15f34:	sub	r3, r3, r2
   15f38:	ldr	r2, [sl, #16]
   15f3c:	cmp	r3, r2
   15f40:	bls	15e08 <argp_failure@@Base+0xe88>
   15f44:	mov	r0, sl
   15f48:	bl	1841c <argp_parse@@Base+0x18f4>
   15f4c:	b	15e08 <argp_failure@@Base+0xe88>
   15f50:	mov	r0, sl
   15f54:	bl	1841c <argp_parse@@Base+0x18f4>
   15f58:	b	15e2c <argp_failure@@Base+0xeac>
   15f5c:	mov	r1, #1
   15f60:	mov	r0, sl
   15f64:	bl	189c0 <argp_parse@@Base+0x1e98>
   15f68:	cmp	r0, #0
   15f6c:	beq	15e68 <argp_failure@@Base+0xee8>
   15f70:	b	15e54 <argp_failure@@Base+0xed4>
   15f74:	cmp	r1, r5
   15f78:	bhi	15fcc <argp_failure@@Base+0x104c>
   15f7c:	ldr	r3, [sl, #28]
   15f80:	add	r3, r3, #3
   15f84:	ldr	r2, [sl, #32]
   15f88:	cmp	r2, r3
   15f8c:	bcs	15fa4 <argp_failure@@Base+0x1024>
   15f90:	mov	r1, #3
   15f94:	mov	r0, sl
   15f98:	bl	189c0 <argp_parse@@Base+0x1e98>
   15f9c:	cmp	r0, #0
   15fa0:	beq	15e68 <argp_failure@@Base+0xee8>
   15fa4:	ldr	r3, [sl, #28]
   15fa8:	ldr	r2, [pc, #196]	; 16074 <argp_failure@@Base+0x10f4>
   15fac:	ldrh	r1, [r2]
   15fb0:	ldrb	r2, [r2, #2]
   15fb4:	strh	r1, [r3]
   15fb8:	strb	r2, [r3, #2]
   15fbc:	ldr	r3, [sl, #28]
   15fc0:	add	r3, r3, #3
   15fc4:	str	r3, [sl, #28]
   15fc8:	b	15e68 <argp_failure@@Base+0xee8>
   15fcc:	mov	r0, sl
   15fd0:	bl	138bc <__assert_fail@plt+0x2488>
   15fd4:	b	15e68 <argp_failure@@Base+0xee8>
   15fd8:	mov	r0, r4
   15fdc:	bl	1771c <argp_parse@@Base+0xbf4>
   15fe0:	b	15ec4 <argp_failure@@Base+0xf44>
   15fe4:	mov	r0, sl
   15fe8:	bl	1841c <argp_parse@@Base+0x18f4>
   15fec:	b	15edc <argp_failure@@Base+0xf5c>
   15ff0:	mov	r1, #1
   15ff4:	mov	r0, sl
   15ff8:	bl	189c0 <argp_parse@@Base+0x1e98>
   15ffc:	cmp	r0, #0
   16000:	beq	15f08 <argp_failure@@Base+0xf88>
   16004:	b	15ef4 <argp_failure@@Base+0xf74>
   16008:	mov	r0, sl
   1600c:	bl	1841c <argp_parse@@Base+0x18f4>
   16010:	b	15cbc <argp_failure@@Base+0xd3c>
   16014:	mov	r0, sl
   16018:	bl	1841c <argp_parse@@Base+0x18f4>
   1601c:	b	15cdc <argp_failure@@Base+0xd5c>
   16020:	strdeq	sl, [r1], -r8
   16024:	andeq	sl, r1, r4, lsr #10
   16028:	andeq	sl, r1, r8, lsl #14
   1602c:	andeq	sl, r1, r8, lsr r7
   16030:	andeq	sl, r1, r0, ror #14
   16034:	andeq	sl, r1, ip, lsr r5
   16038:			; <UNDEFINED> instruction: 0x0001a7b4
   1603c:	andeq	sl, r1, r0, lsl #15
   16040:			; <UNDEFINED> instruction: 0x0001a7bc
   16044:	andeq	sl, r1, r4, asr #15
   16048:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1604c:	ldrdeq	sl, [r1], -r4
   16050:	andeq	sl, r1, ip, asr #15
   16054:	ldrdeq	sl, [r1], -ip
   16058:	andeq	sl, r1, r4, ror #15
   1605c:	strdeq	sl, [r1], -r4
   16060:	andeq	sl, r1, ip, lsr #16
   16064:	andeq	sl, r1, r4, lsr #20
   16068:	andeq	sl, r1, r4, lsr r8
   1606c:	andeq	sl, r1, ip, lsr r8
   16070:	andeq	sl, r1, r4, asr #16
   16074:	andeq	sl, r1, r8, asr #16
   16078:	muleq	r2, r4, r3
   1607c:	andeq	r0, r0, #5
   16080:	andeq	sl, r1, ip, asr #16
   16084:	andeq	ip, r2, r8, asr r4
   16088:	andeq	sl, r1, r0, asr #17
   1608c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16090:	cmp	r3, #0
   16094:	beq	16184 <argp_failure@@Base+0x1204>
   16098:	ldr	r3, [pc, #-40]	; 16078 <argp_failure@@Base+0x10f8>
   1609c:	ldr	r3, [r3, #4]
   160a0:	cmp	r3, #0
   160a4:	beq	16184 <argp_failure@@Base+0x1204>
   160a8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   160ac:	cmp	r3, #0
   160b0:	ldrne	r2, [r3]
   160b4:	moveq	r2, #0
   160b8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   160bc:	ldr	r1, [pc, #-72]	; 1607c <argp_failure@@Base+0x10fc>
   160c0:	ldr	r0, [pc, #-72]	; 16080 <argp_failure@@Base+0x1100>
   160c4:	bl	13aa0 <__assert_fail@plt+0x266c>
   160c8:	subs	r4, r0, #0
   160cc:	beq	16184 <argp_failure@@Base+0x1204>
   160d0:	ldrb	r3, [r4]
   160d4:	cmp	r3, #0
   160d8:	beq	16178 <argp_failure@@Base+0x11f8>
   160dc:	ldr	r2, [sl, #28]
   160e0:	ldr	r3, [sl, #32]
   160e4:	cmp	r2, r3
   160e8:	bcs	1621c <argp_failure@@Base+0x129c>
   160ec:	ldr	r3, [sl, #28]
   160f0:	add	r2, r3, #1
   160f4:	str	r2, [sl, #28]
   160f8:	mov	r2, #10
   160fc:	strb	r2, [r3]
   16100:	mov	r0, r4
   16104:	bl	112c0 <strlen@plt>
   16108:	subs	r5, r0, #0
   1610c:	beq	16154 <argp_failure@@Base+0x11d4>
   16110:	ldr	r3, [sl, #28]
   16114:	add	r3, r3, r5
   16118:	ldr	r2, [sl, #32]
   1611c:	cmp	r2, r3
   16120:	bcs	16138 <argp_failure@@Base+0x11b8>
   16124:	mov	r1, r5
   16128:	mov	r0, sl
   1612c:	bl	189c0 <argp_parse@@Base+0x1e98>
   16130:	cmp	r0, #0
   16134:	beq	16154 <argp_failure@@Base+0x11d4>
   16138:	mov	r2, r5
   1613c:	mov	r1, r4
   16140:	ldr	r0, [sl, #28]
   16144:	bl	11188 <memcpy@plt>
   16148:	ldr	r3, [sl, #28]
   1614c:	add	r5, r3, r5
   16150:	str	r5, [sl, #28]
   16154:	ldr	r2, [sl, #28]
   16158:	ldr	r3, [sl, #32]
   1615c:	cmp	r2, r3
   16160:	bcs	16234 <argp_failure@@Base+0x12b4>
   16164:	ldr	r3, [sl, #28]
   16168:	add	r2, r3, #1
   1616c:	str	r2, [sl, #28]
   16170:	mov	r2, #10
   16174:	strb	r2, [r3]
   16178:	ldr	r3, [pc, #-256]	; 16080 <argp_failure@@Base+0x1100>
   1617c:	cmp	r4, r3
   16180:	bne	1624c <argp_failure@@Base+0x12cc>
   16184:	mov	r4, #1
   16188:	ldr	r3, [fp, #-104]	; 0xffffff98
   1618c:	tst	r3, #32
   16190:	bne	16258 <argp_failure@@Base+0x12d8>
   16194:	ldr	r3, [fp, #-104]	; 0xffffff98
   16198:	tst	r3, #64	; 0x40
   1619c:	beq	161f0 <argp_failure@@Base+0x1270>
   161a0:	ldr	r3, [pc, #-292]	; 16084 <argp_failure@@Base+0x1104>
   161a4:	ldr	r3, [r3]
   161a8:	cmp	r3, #0
   161ac:	beq	161f0 <argp_failure@@Base+0x1270>
   161b0:	cmp	r4, #0
   161b4:	beq	161dc <argp_failure@@Base+0x125c>
   161b8:	ldr	r2, [sl, #28]
   161bc:	ldr	r3, [sl, #32]
   161c0:	cmp	r2, r3
   161c4:	bcs	16280 <argp_failure@@Base+0x1300>
   161c8:	ldr	r3, [sl, #28]
   161cc:	add	r2, r3, #1
   161d0:	str	r2, [sl, #28]
   161d4:	mov	r2, #10
   161d8:	strb	r2, [r3]
   161dc:	ldr	r3, [pc, #-352]	; 16084 <argp_failure@@Base+0x1104>
   161e0:	ldr	r2, [r3]
   161e4:	ldr	r1, [pc, #-356]	; 16088 <argp_failure@@Base+0x1108>
   161e8:	mov	r0, sl
   161ec:	bl	18ab0 <argp_parse@@Base+0x1f88>
   161f0:	ldr	r0, [fp, #-132]	; 0xffffff7c
   161f4:	bl	11200 <funlockfile@plt>
   161f8:	ldr	r3, [fp, #-108]	; 0xffffff94
   161fc:	cmp	r3, #0
   16200:	beq	1620c <argp_failure@@Base+0x128c>
   16204:	mov	r0, r3
   16208:	bl	13778 <__assert_fail@plt+0x2344>
   1620c:	mov	r0, sl
   16210:	bl	18980 <argp_parse@@Base+0x1e58>
   16214:	sub	sp, fp, #32
   16218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1621c:	mov	r1, #1
   16220:	mov	r0, sl
   16224:	bl	189c0 <argp_parse@@Base+0x1e98>
   16228:	cmp	r0, #0
   1622c:	beq	16100 <argp_failure@@Base+0x1180>
   16230:	b	160ec <argp_failure@@Base+0x116c>
   16234:	mov	r1, #1
   16238:	mov	r0, sl
   1623c:	bl	189c0 <argp_parse@@Base+0x1e98>
   16240:	cmp	r0, #0
   16244:	beq	16178 <argp_failure@@Base+0x11f8>
   16248:	b	16164 <argp_failure@@Base+0x11e4>
   1624c:	mov	r0, r4
   16250:	bl	1771c <argp_parse@@Base+0xbf4>
   16254:	b	16184 <argp_failure@@Base+0x1204>
   16258:	str	sl, [sp, #4]
   1625c:	mov	r3, #0
   16260:	str	r3, [sp]
   16264:	mov	r3, r4
   16268:	mov	r2, #1
   1626c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16270:	ldr	r0, [fp, #-112]	; 0xffffff90
   16274:	bl	1403c <__assert_fail@plt+0x2c08>
   16278:	orr	r4, r4, r0
   1627c:	b	16194 <argp_failure@@Base+0x1214>
   16280:	mov	r1, #1
   16284:	mov	r0, sl
   16288:	bl	189c0 <argp_parse@@Base+0x1e98>
   1628c:	cmp	r0, #0
   16290:	beq	161dc <argp_failure@@Base+0x125c>
   16294:	b	161c8 <argp_failure@@Base+0x1248>
   16298:	ldrb	r3, [r5]
   1629c:	mov	r4, r5
   162a0:	mov	r5, #0
   162a4:	b	15378 <argp_failure@@Base+0x3f8>
   162a8:	mov	r4, r2
   162ac:	b	1538c <argp_failure@@Base+0x40c>
   162b0:	cmp	r0, #110	; 0x6e
   162b4:	beq	153e4 <argp_failure@@Base+0x464>
   162b8:	mov	r3, #1
   162bc:	str	r3, [fp, #-96]	; 0xffffffa0
   162c0:	str	r3, [fp, #-116]	; 0xffffff8c
   162c4:	add	r6, sl, #24
   162c8:	b	154dc <argp_failure@@Base+0x55c>
   162cc:	ldrb	r3, [r9]
   162d0:	cmp	r7, r3
   162d4:	beq	159b0 <argp_failure@@Base+0xa30>
   162d8:	add	r4, r4, #24
   162dc:	subs	r5, r5, #1
   162e0:	beq	15aa0 <argp_failure@@Base+0xb20>
   162e4:	ldr	r6, [r4, #12]
   162e8:	tst	r6, #8
   162ec:	bne	162d8 <argp_failure@@Base+0x1358>
   162f0:	ldr	r7, [r4, #4]
   162f4:	sub	r3, r7, #1
   162f8:	cmp	r3, #254	; 0xfe
   162fc:	bhi	162d8 <argp_failure@@Base+0x1358>
   16300:	bl	11290 <__ctype_b_loc@plt>
   16304:	ldr	r2, [r0]
   16308:	lsl	r3, r7, #1
   1630c:	ldrh	r3, [r2, r3]
   16310:	tst	r3, #16384	; 0x4000
   16314:	bne	162cc <argp_failure@@Base+0x134c>
   16318:	b	162d8 <argp_failure@@Base+0x1358>

0001631c <argp_help@@Base>:
   1631c:	push	{lr}		; (str lr, [sp, #-4]!)
   16320:	sub	sp, sp, #12
   16324:	str	r3, [sp]
   16328:	mov	r3, r2
   1632c:	mov	r2, r1
   16330:	mov	r1, #0
   16334:	bl	15188 <argp_failure@@Base+0x208>
   16338:	add	sp, sp, #12
   1633c:	pop	{pc}		; (ldr pc, [sp], #4)

00016340 <argp_state_help@@Base>:
   16340:	push	{r4, r5, lr}
   16344:	sub	sp, sp, #12
   16348:	mov	r5, r2
   1634c:	subs	r4, r0, #0
   16350:	beq	163b4 <argp_state_help@@Base+0x74>
   16354:	ldr	r3, [r4, #16]
   16358:	tst	r3, #2
   1635c:	bne	163ac <argp_state_help@@Base+0x6c>
   16360:	cmp	r1, #0
   16364:	beq	163ac <argp_state_help@@Base+0x6c>
   16368:	ldr	r3, [r4, #16]
   1636c:	tst	r3, #64	; 0x40
   16370:	orrne	r5, r5, #128	; 0x80
   16374:	ldr	r0, [r4]
   16378:	ldr	r3, [r4, #40]	; 0x28
   1637c:	str	r3, [sp]
   16380:	mov	r3, r5
   16384:	mov	r2, r1
   16388:	mov	r1, r4
   1638c:	bl	15188 <argp_failure@@Base+0x208>
   16390:	ldr	r3, [r4, #16]
   16394:	tst	r3, #32
   16398:	bne	163ac <argp_state_help@@Base+0x6c>
   1639c:	tst	r5, #256	; 0x100
   163a0:	bne	163e0 <argp_state_help@@Base+0xa0>
   163a4:	tst	r5, #512	; 0x200
   163a8:	bne	163ec <argp_state_help@@Base+0xac>
   163ac:	add	sp, sp, #12
   163b0:	pop	{r4, r5, pc}
   163b4:	cmp	r1, #0
   163b8:	beq	163ac <argp_state_help@@Base+0x6c>
   163bc:	ldr	r3, [pc, #48]	; 163f4 <argp_state_help@@Base+0xb4>
   163c0:	ldr	r3, [r3]
   163c4:	str	r3, [sp]
   163c8:	mov	r3, r2
   163cc:	mov	r2, r1
   163d0:	mov	r1, #0
   163d4:	mov	r0, r1
   163d8:	bl	15188 <argp_failure@@Base+0x208>
   163dc:	b	1639c <argp_state_help@@Base+0x5c>
   163e0:	ldr	r3, [pc, #16]	; 163f8 <argp_state_help@@Base+0xb8>
   163e4:	ldr	r0, [r3]
   163e8:	bl	112a8 <exit@plt>
   163ec:	mov	r0, #0
   163f0:	bl	112a8 <exit@plt>
   163f4:	ldrdeq	ip, [r2], -r0
   163f8:			; <UNDEFINED> instruction: 0x0002c3bc

000163fc <argp_error@@Base>:
   163fc:	push	{r1, r2, r3}
   16400:	push	{r4, r5, lr}
   16404:	sub	sp, sp, #8
   16408:	subs	r5, r0, #0
   1640c:	beq	164dc <argp_error@@Base+0xe0>
   16410:	ldr	r3, [r5, #16]
   16414:	tst	r3, #2
   16418:	bne	164cc <argp_error@@Base+0xd0>
   1641c:	ldr	r4, [r5, #44]	; 0x2c
   16420:	cmp	r4, #0
   16424:	beq	164cc <argp_error@@Base+0xd0>
   16428:	mov	r0, r4
   1642c:	bl	113b0 <flockfile@plt>
   16430:	add	r3, sp, #24
   16434:	str	r3, [sp, #4]
   16438:	ldr	r0, [r5, #40]	; 0x28
   1643c:	mov	r1, r4
   16440:	bl	110e0 <fputs_unlocked@plt>
   16444:	ldr	r3, [r4, #20]
   16448:	ldr	r2, [r4, #24]
   1644c:	cmp	r3, r2
   16450:	addcc	r2, r3, #1
   16454:	strcc	r2, [r4, #20]
   16458:	movcc	r2, #58	; 0x3a
   1645c:	strbcc	r2, [r3]
   16460:	bcs	16508 <argp_error@@Base+0x10c>
   16464:	ldr	r3, [r4, #20]
   16468:	ldr	r2, [r4, #24]
   1646c:	cmp	r3, r2
   16470:	addcc	r2, r3, #1
   16474:	strcc	r2, [r4, #20]
   16478:	movcc	r2, #32
   1647c:	strbcc	r2, [r3]
   16480:	bcs	16518 <argp_error@@Base+0x11c>
   16484:	ldr	r2, [sp, #4]
   16488:	ldr	r1, [sp, #20]
   1648c:	mov	r0, r4
   16490:	bl	11374 <vfprintf@plt>
   16494:	ldr	r3, [r4, #20]
   16498:	ldr	r2, [r4, #24]
   1649c:	cmp	r3, r2
   164a0:	addcc	r2, r3, #1
   164a4:	strcc	r2, [r4, #20]
   164a8:	movcc	r2, #10
   164ac:	strbcc	r2, [r3]
   164b0:	bcs	16528 <argp_error@@Base+0x12c>
   164b4:	mov	r2, #260	; 0x104
   164b8:	mov	r1, r4
   164bc:	mov	r0, r5
   164c0:	bl	16340 <argp_state_help@@Base>
   164c4:	mov	r0, r4
   164c8:	bl	11200 <funlockfile@plt>
   164cc:	add	sp, sp, #8
   164d0:	pop	{r4, r5, lr}
   164d4:	add	sp, sp, #12
   164d8:	bx	lr
   164dc:	ldr	r3, [pc, #84]	; 16538 <argp_error@@Base+0x13c>
   164e0:	ldr	r4, [r3]
   164e4:	cmp	r4, #0
   164e8:	beq	164cc <argp_error@@Base+0xd0>
   164ec:	mov	r0, r4
   164f0:	bl	113b0 <flockfile@plt>
   164f4:	add	r3, sp, #24
   164f8:	str	r3, [sp, #4]
   164fc:	ldr	r3, [pc, #56]	; 1653c <argp_error@@Base+0x140>
   16500:	ldr	r0, [r3]
   16504:	b	1643c <argp_error@@Base+0x40>
   16508:	mov	r1, #58	; 0x3a
   1650c:	mov	r0, r4
   16510:	bl	11344 <__overflow@plt>
   16514:	b	16464 <argp_error@@Base+0x68>
   16518:	mov	r1, #32
   1651c:	mov	r0, r4
   16520:	bl	11344 <__overflow@plt>
   16524:	b	16484 <argp_error@@Base+0x88>
   16528:	mov	r1, #10
   1652c:	mov	r0, r4
   16530:	bl	11344 <__overflow@plt>
   16534:	b	164b4 <argp_error@@Base+0xb8>
   16538:	ldrdeq	ip, [r2], -r8
   1653c:	ldrdeq	ip, [r2], -r0
   16540:	ldr	ip, [r0]
   16544:	cmp	ip, #0
   16548:	beq	1659c <argp_error@@Base+0x1a0>
   1654c:	push	{r4, r5, r6, lr}
   16550:	mov	ip, r2
   16554:	mov	r5, r1
   16558:	mov	r4, r0
   1655c:	ldr	r2, [r0, #32]
   16560:	str	r2, [r1, #36]	; 0x24
   16564:	ldr	r2, [r0, #24]
   16568:	str	r2, [r1, #28]
   1656c:	ldr	r2, [r0, #28]
   16570:	str	r2, [r1, #32]
   16574:	ldr	r2, [r0, #12]
   16578:	str	r2, [r1, #20]
   1657c:	ldr	r6, [r0]
   16580:	mov	r2, r1
   16584:	mov	r1, r3
   16588:	mov	r0, ip
   1658c:	blx	r6
   16590:	ldr	r3, [r5, #36]	; 0x24
   16594:	str	r3, [r4, #32]
   16598:	pop	{r4, r5, r6, pc}
   1659c:	mov	r0, #7
   165a0:	bx	lr
   165a4:	push	{r4, r5, r6, lr}
   165a8:	ldr	r5, [r0, #16]
   165ac:	ldr	r3, [r0]
   165b0:	cmp	r3, #0
   165b4:	beq	165cc <argp_error@@Base+0x1d0>
   165b8:	ldr	r2, [r1, #8]
   165bc:	add	r2, r2, #1
   165c0:	str	r2, [r1, #8]
   165c4:	mov	r2, #0
   165c8:	b	16620 <argp_error@@Base+0x224>
   165cc:	ldr	r3, [r0, #4]
   165d0:	cmp	r3, #0
   165d4:	ldrne	r3, [r1, #8]
   165d8:	addne	r3, r3, #1
   165dc:	strne	r3, [r1, #8]
   165e0:	cmp	r5, #0
   165e4:	popeq	{r4, r5, r6, pc}
   165e8:	ldr	r0, [r5]
   165ec:	cmp	r0, #0
   165f0:	popeq	{r4, r5, r6, pc}
   165f4:	mov	r4, r1
   165f8:	mov	r1, r4
   165fc:	bl	165a4 <argp_error@@Base+0x1a8>
   16600:	ldr	r3, [r4, #12]
   16604:	add	r3, r3, #1
   16608:	str	r3, [r4, #12]
   1660c:	ldr	r0, [r5, #16]!
   16610:	cmp	r0, #0
   16614:	bne	165f8 <argp_error@@Base+0x1fc>
   16618:	pop	{r4, r5, r6, pc}
   1661c:	add	r2, r2, #1
   16620:	add	r3, r3, #24
   16624:	ldr	r0, [r3, #-20]	; 0xffffffec
   16628:	cmp	r0, #0
   1662c:	bne	1661c <argp_error@@Base+0x220>
   16630:	ldr	r0, [r3, #-24]	; 0xffffffe8
   16634:	cmp	r0, #0
   16638:	bne	1661c <argp_error@@Base+0x220>
   1663c:	ldr	r0, [r3, #-8]
   16640:	cmp	r0, #0
   16644:	bne	1661c <argp_error@@Base+0x220>
   16648:	ldr	r0, [r3, #-4]
   1664c:	cmp	r0, #0
   16650:	bne	1661c <argp_error@@Base+0x220>
   16654:	add	r0, r2, r2, lsl #1
   16658:	ldr	r3, [r1]
   1665c:	add	r3, r3, r0
   16660:	str	r3, [r1]
   16664:	ldr	r3, [r1, #4]
   16668:	add	r2, r3, r2
   1666c:	str	r2, [r1, #4]
   16670:	b	165e0 <argp_error@@Base+0x1e4>
   16674:	cmp	r0, #86	; 0x56
   16678:	beq	16684 <argp_error@@Base+0x288>
   1667c:	mov	r0, #7
   16680:	bx	lr
   16684:	push	{r4, lr}
   16688:	mov	r4, r2
   1668c:	ldr	r3, [pc, #100]	; 166f8 <argp_error@@Base+0x2fc>
   16690:	ldr	r3, [r3]
   16694:	cmp	r3, #0
   16698:	beq	166bc <argp_error@@Base+0x2c0>
   1669c:	mov	r1, r2
   166a0:	ldr	r0, [r2, #48]	; 0x30
   166a4:	blx	r3
   166a8:	ldr	r3, [r4, #16]
   166ac:	tst	r3, #32
   166b0:	beq	166f0 <argp_error@@Base+0x2f4>
   166b4:	mov	r0, #0
   166b8:	pop	{r4, pc}
   166bc:	ldr	r3, [pc, #56]	; 166fc <argp_error@@Base+0x300>
   166c0:	ldr	r2, [r3]
   166c4:	cmp	r2, #0
   166c8:	beq	166dc <argp_error@@Base+0x2e0>
   166cc:	ldr	r1, [pc, #44]	; 16700 <argp_error@@Base+0x304>
   166d0:	ldr	r0, [r4, #48]	; 0x30
   166d4:	bl	112d8 <fprintf@plt>
   166d8:	b	166a8 <argp_error@@Base+0x2ac>
   166dc:	ldr	r2, [pc, #32]	; 16704 <argp_error@@Base+0x308>
   166e0:	ldr	r1, [pc, #32]	; 16708 <argp_error@@Base+0x30c>
   166e4:	mov	r0, r4
   166e8:	bl	163fc <argp_error@@Base>
   166ec:	b	166a8 <argp_error@@Base+0x2ac>
   166f0:	mov	r0, #0
   166f4:	bl	112a8 <exit@plt>
   166f8:	andeq	ip, r2, r0, lsl r4
   166fc:	andeq	ip, r2, ip, asr r4
   16700:	andeq	sl, r1, r8, ror fp
   16704:	andeq	sl, r1, ip, ror #19
   16708:	ldrdeq	r9, [r1], -r0
   1670c:	push	{r4, r5, r6, lr}
   16710:	mov	r4, r2
   16714:	cmn	r0, #3
   16718:	beq	167b4 <argp_error@@Base+0x3b8>
   1671c:	mov	r5, r1
   16720:	ble	1674c <argp_error@@Base+0x350>
   16724:	cmn	r0, #2
   16728:	beq	167cc <argp_error@@Base+0x3d0>
   1672c:	cmp	r0, #63	; 0x3f
   16730:	bne	16810 <argp_error@@Base+0x414>
   16734:	ldr	r2, [pc, #228]	; 16820 <argp_error@@Base+0x424>
   16738:	ldr	r1, [r4, #48]	; 0x30
   1673c:	mov	r0, r4
   16740:	bl	16340 <argp_state_help@@Base>
   16744:	mov	r0, #0
   16748:	pop	{r4, r5, r6, pc}
   1674c:	cmn	r0, #4
   16750:	bne	16810 <argp_error@@Base+0x414>
   16754:	mov	r2, #10
   16758:	mov	r1, #0
   1675c:	ldr	r0, [pc, #192]	; 16824 <argp_error@@Base+0x428>
   16760:	cmp	r5, r1
   16764:	movne	r0, r5
   16768:	bl	11110 <strtol@plt>
   1676c:	ldr	r3, [pc, #180]	; 16828 <argp_error@@Base+0x42c>
   16770:	str	r0, [r3]
   16774:	ldr	r2, [r3]
   16778:	sub	r1, r2, #1
   1677c:	str	r1, [r3]
   16780:	cmp	r2, #0
   16784:	ble	16818 <argp_error@@Base+0x41c>
   16788:	mov	r5, #1
   1678c:	mov	r4, r3
   16790:	mov	r0, r5
   16794:	bl	111c4 <sleep@plt>
   16798:	ldr	r3, [r4]
   1679c:	sub	r2, r3, #1
   167a0:	str	r2, [r4]
   167a4:	cmp	r3, #0
   167a8:	bgt	16790 <argp_error@@Base+0x394>
   167ac:	mov	r0, #0
   167b0:	pop	{r4, r5, r6, pc}
   167b4:	ldr	r2, [pc, #112]	; 1682c <argp_error@@Base+0x430>
   167b8:	ldr	r1, [r4, #48]	; 0x30
   167bc:	mov	r0, r4
   167c0:	bl	16340 <argp_state_help@@Base>
   167c4:	mov	r0, #0
   167c8:	pop	{r4, r5, r6, pc}
   167cc:	ldr	r3, [pc, #92]	; 16830 <argp_error@@Base+0x434>
   167d0:	str	r1, [r3]
   167d4:	mov	r0, r1
   167d8:	bl	1765c <argp_parse@@Base+0xb34>
   167dc:	str	r0, [r4, #40]	; 0x28
   167e0:	ldr	r3, [pc, #76]	; 16834 <argp_error@@Base+0x438>
   167e4:	str	r0, [r3]
   167e8:	ldr	r3, [r4, #16]
   167ec:	and	r3, r3, #3
   167f0:	cmp	r3, #1
   167f4:	beq	16800 <argp_error@@Base+0x404>
   167f8:	mov	r0, #0
   167fc:	pop	{r4, r5, r6, pc}
   16800:	ldr	r3, [r4, #8]
   16804:	str	r5, [r3]
   16808:	mov	r0, #0
   1680c:	pop	{r4, r5, r6, pc}
   16810:	mov	r0, #7
   16814:	pop	{r4, r5, r6, pc}
   16818:	mov	r0, #0
   1681c:	pop	{r4, r5, r6, pc}
   16820:	andeq	r0, r0, sl, ror r2
   16824:	andeq	sl, r1, r0, lsl sl
   16828:	andeq	ip, r2, ip, lsl #8
   1682c:	andeq	r0, r0, r1, lsl #4
   16830:	ldrdeq	ip, [r2], -r4
   16834:	ldrdeq	ip, [r2], -r0
   16838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1683c:	sub	sp, sp, #36	; 0x24
   16840:	str	r0, [sp, #12]
   16844:	str	r1, [sp, #16]
   16848:	str	r2, [sp, #20]
   1684c:	mov	r8, r3
   16850:	ldr	sl, [sp, #72]	; 0x48
   16854:	ldr	r9, [r0]
   16858:	ldr	r5, [r0, #16]
   1685c:	cmp	r9, #0
   16860:	addne	r6, r9, #24
   16864:	strne	r5, [sp, #28]
   16868:	strne	r8, [sp, #24]
   1686c:	bne	16978 <argp_error@@Base+0x57c>
   16870:	ldr	r3, [sp, #12]
   16874:	ldr	r3, [r3, #4]
   16878:	cmp	r3, #0
   1687c:	moveq	r0, r8
   16880:	moveq	r8, #0
   16884:	beq	16904 <argp_error@@Base+0x508>
   16888:	ldr	r2, [sp, #12]
   1688c:	ldr	r3, [r2, #4]
   16890:	str	r3, [r8]
   16894:	str	r2, [r8, #4]
   16898:	ldr	r3, [sl, #4]
   1689c:	str	r3, [r8, #8]
   168a0:	mov	r3, #0
   168a4:	str	r3, [r8, #12]
   168a8:	ldr	r2, [sp, #16]
   168ac:	str	r2, [r8, #16]
   168b0:	ldr	r2, [sp, #20]
   168b4:	str	r2, [r8, #20]
   168b8:	str	r3, [r8, #24]
   168bc:	str	r3, [r8, #32]
   168c0:	str	r3, [r8, #28]
   168c4:	cmp	r5, r3
   168c8:	beq	16900 <argp_error@@Base+0x504>
   168cc:	ldr	r3, [r5]
   168d0:	cmp	r3, #0
   168d4:	beq	16b20 <argp_error@@Base+0x724>
   168d8:	mov	r3, #0
   168dc:	add	r3, r3, #1
   168e0:	ldr	r2, [r5, r3, lsl #4]
   168e4:	cmp	r2, #0
   168e8:	bne	168dc <argp_error@@Base+0x4e0>
   168ec:	ldr	r2, [sl, #12]
   168f0:	str	r2, [r8, #28]
   168f4:	ldr	r2, [sl, #12]
   168f8:	add	r3, r2, r3, lsl #2
   168fc:	str	r3, [sl, #12]
   16900:	add	r0, r8, #36	; 0x24
   16904:	cmp	r5, #0
   16908:	beq	16944 <argp_error@@Base+0x548>
   1690c:	ldr	ip, [r5]
   16910:	cmp	ip, #0
   16914:	beq	16944 <argp_error@@Base+0x548>
   16918:	mov	r2, #0
   1691c:	add	r4, r2, #1
   16920:	str	sl, [sp]
   16924:	mov	r3, r0
   16928:	mov	r1, r8
   1692c:	mov	r0, ip
   16930:	bl	16838 <argp_error@@Base+0x43c>
   16934:	ldr	ip, [r5, r4, lsl #4]
   16938:	mov	r2, r4
   1693c:	cmp	ip, #0
   16940:	bne	1691c <argp_error@@Base+0x520>
   16944:	add	sp, sp, #36	; 0x24
   16948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1694c:	ldr	r0, [r4, #16]!
   16950:	cmp	r0, #0
   16954:	beq	16a60 <argp_error@@Base+0x664>
   16958:	mov	r1, r7
   1695c:	bl	11104 <strcmp@plt>
   16960:	cmp	r0, #0
   16964:	bne	1694c <argp_error@@Base+0x550>
   16968:	sub	r4, r4, fp
   1696c:	cmn	r4, #15
   16970:	blt	16a60 <argp_error@@Base+0x664>
   16974:	add	r6, r6, #24
   16978:	sub	r2, r6, #24
   1697c:	mov	r8, r6
   16980:	ldr	r4, [r6, #-20]	; 0xffffffec
   16984:	cmp	r4, #0
   16988:	bne	16998 <argp_error@@Base+0x59c>
   1698c:	ldr	r3, [r6, #-24]	; 0xffffffe8
   16990:	cmp	r3, #0
   16994:	beq	16afc <argp_error@@Base+0x700>
   16998:	ldr	r3, [r8, #-12]
   1699c:	and	r1, r3, #4
   169a0:	cmp	r1, #0
   169a4:	moveq	r9, r2
   169a8:	ldr	r5, [r9, #12]
   169ac:	ands	r5, r5, #8
   169b0:	bne	16974 <argp_error@@Base+0x578>
   169b4:	tst	r3, #8
   169b8:	bne	16a3c <argp_error@@Base+0x640>
   169bc:	sub	r3, r4, #1
   169c0:	cmp	r3, #254	; 0xfe
   169c4:	bhi	16a3c <argp_error@@Base+0x640>
   169c8:	bl	11290 <__ctype_b_loc@plt>
   169cc:	ldr	r3, [r0]
   169d0:	lsl	r4, r4, #1
   169d4:	ldrh	r3, [r3, r4]
   169d8:	tst	r3, #16384	; 0x4000
   169dc:	beq	16a3c <argp_error@@Base+0x640>
   169e0:	ldr	r3, [sl, #4]
   169e4:	add	r2, r3, #1
   169e8:	str	r2, [sl, #4]
   169ec:	ldr	r2, [r8, #-20]	; 0xffffffec
   169f0:	strb	r2, [r3]
   169f4:	ldr	r3, [r9, #8]
   169f8:	cmp	r3, #0
   169fc:	beq	16a30 <argp_error@@Base+0x634>
   16a00:	ldr	r3, [sl, #4]
   16a04:	add	r2, r3, #1
   16a08:	str	r2, [sl, #4]
   16a0c:	mov	r2, #58	; 0x3a
   16a10:	strb	r2, [r3]
   16a14:	ldr	r3, [r9, #12]
   16a18:	tst	r3, #1
   16a1c:	ldrne	r3, [sl, #4]
   16a20:	addne	r2, r3, #1
   16a24:	strne	r2, [sl, #4]
   16a28:	movne	r2, #58	; 0x3a
   16a2c:	strbne	r2, [r3]
   16a30:	ldr	r3, [sl, #4]
   16a34:	mov	r2, #0
   16a38:	strb	r2, [r3]
   16a3c:	ldr	r7, [r8, #-24]	; 0xffffffe8
   16a40:	cmp	r7, #0
   16a44:	beq	16974 <argp_error@@Base+0x578>
   16a48:	ldr	r3, [sl]
   16a4c:	ldr	fp, [r3, #8]
   16a50:	ldr	r0, [fp]
   16a54:	cmp	r0, #0
   16a58:	movne	r4, fp
   16a5c:	bne	16958 <argp_error@@Base+0x55c>
   16a60:	ldr	r3, [sl, #8]
   16a64:	str	r7, [r3]
   16a68:	ldr	r3, [sl, #8]
   16a6c:	ldr	r2, [r9, #8]
   16a70:	cmp	r2, #0
   16a74:	beq	16a8c <argp_error@@Base+0x690>
   16a78:	ldr	r5, [r9, #12]
   16a7c:	and	r5, r5, #1
   16a80:	cmp	r5, #0
   16a84:	movne	r5, #2
   16a88:	moveq	r5, #1
   16a8c:	str	r5, [r3, #4]
   16a90:	ldr	r3, [sl, #8]
   16a94:	mov	r2, #0
   16a98:	str	r2, [r3, #8]
   16a9c:	ldr	r1, [sl, #8]
   16aa0:	ldr	r0, [r8, #-20]	; 0xffffffec
   16aa4:	cmp	r0, r2
   16aa8:	ldreq	r0, [r9, #4]
   16aac:	bic	r0, r0, #-16777216	; 0xff000000
   16ab0:	ldr	r3, [sl]
   16ab4:	ldr	r3, [r3, #48]	; 0x30
   16ab8:	ldr	r2, [sp, #24]
   16abc:	sub	r3, r2, r3
   16ac0:	asr	r3, r3, #2
   16ac4:	rsb	r2, r3, r3, lsl #3
   16ac8:	add	r2, r2, r2, lsl #6
   16acc:	add	r2, r3, r2, lsl #3
   16ad0:	rsb	r2, r2, r2, lsl #15
   16ad4:	add	r3, r3, r2, lsl #3
   16ad8:	add	r3, r3, #1
   16adc:	add	r3, r0, r3, lsl #24
   16ae0:	str	r3, [r1, #12]
   16ae4:	ldr	r3, [sl, #8]
   16ae8:	add	r2, r3, #16
   16aec:	str	r2, [sl, #8]
   16af0:	mov	r2, #0
   16af4:	str	r2, [r3, #16]
   16af8:	b	16974 <argp_error@@Base+0x578>
   16afc:	ldr	r3, [r6, #-8]
   16b00:	cmp	r3, #0
   16b04:	bne	16998 <argp_error@@Base+0x59c>
   16b08:	ldr	r3, [r6, #-4]
   16b0c:	cmp	r3, #0
   16b10:	bne	16998 <argp_error@@Base+0x59c>
   16b14:	ldr	r5, [sp, #28]
   16b18:	ldr	r8, [sp, #24]
   16b1c:	b	16888 <argp_error@@Base+0x48c>
   16b20:	mov	r3, #0
   16b24:	b	168ec <argp_error@@Base+0x4f0>

00016b28 <argp_parse@@Base>:
   16b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b2c:	add	fp, sp, #32
   16b30:	sub	sp, sp, #220	; 0xdc
   16b34:	mov	r8, r0
   16b38:	str	r1, [fp, #-236]	; 0xffffff14
   16b3c:	str	r2, [fp, #-232]	; 0xffffff18
   16b40:	mov	r6, r3
   16b44:	tst	r3, #1
   16b48:	bne	16b78 <argp_parse@@Base+0x50>
   16b4c:	ldr	r3, [pc, #2548]	; 17548 <argp_parse@@Base+0xa20>
   16b50:	ldr	r3, [r3]
   16b54:	cmp	r3, #0
   16b58:	moveq	r3, r2
   16b5c:	ldreq	r2, [r3]
   16b60:	ldreq	r3, [pc, #2528]	; 17548 <argp_parse@@Base+0xa20>
   16b64:	streq	r2, [r3]
   16b68:	ldr	r3, [pc, #2524]	; 1754c <argp_parse@@Base+0xa24>
   16b6c:	ldr	r3, [r3]
   16b70:	cmp	r3, #0
   16b74:	beq	16d68 <argp_parse@@Base+0x240>
   16b78:	tst	r6, #16
   16b7c:	beq	16d80 <argp_parse@@Base+0x258>
   16b80:	mov	r2, #36	; 0x24
   16b84:	mov	r1, #0
   16b88:	sub	r0, fp, #196	; 0xc4
   16b8c:	bl	11314 <memset@plt>
   16b90:	ands	r3, r6, #4
   16b94:	str	r3, [fp, #-240]	; 0xffffff10
   16b98:	moveq	r3, #1
   16b9c:	movne	r3, #0
   16ba0:	str	r3, [fp, #-228]	; 0xffffff1c
   16ba4:	mov	r3, #0
   16ba8:	str	r3, [fp, #-224]	; 0xffffff20
   16bac:	str	r3, [fp, #-220]	; 0xffffff24
   16bb0:	str	r3, [fp, #-216]	; 0xffffff28
   16bb4:	cmp	r8, r3
   16bb8:	beq	16bc8 <argp_parse@@Base+0xa0>
   16bbc:	sub	r1, fp, #228	; 0xe4
   16bc0:	mov	r0, r8
   16bc4:	bl	165a4 <argp_error@@Base+0x1a8>
   16bc8:	ldr	r4, [fp, #-220]	; 0xffffff24
   16bcc:	add	r4, r4, #1
   16bd0:	add	r4, r4, r4, lsl #3
   16bd4:	lsl	r4, r4, #2
   16bd8:	ldr	r9, [fp, #-216]	; 0xffffff28
   16bdc:	lsl	r9, r9, #2
   16be0:	add	sl, r9, r4
   16be4:	ldr	r5, [fp, #-224]	; 0xffffff20
   16be8:	add	r5, r5, #1
   16bec:	add	r5, sl, r5, lsl #4
   16bf0:	ldr	r0, [fp, #-228]	; 0xffffff1c
   16bf4:	add	r0, r0, #1
   16bf8:	add	r0, r0, r5
   16bfc:	bl	18324 <argp_parse@@Base+0x17fc>
   16c00:	mov	r7, r0
   16c04:	str	r0, [fp, #-40]	; 0xffffffd8
   16c08:	cmp	r0, #0
   16c0c:	moveq	r4, #12
   16c10:	beq	17398 <argp_parse@@Base+0x870>
   16c14:	str	r0, [fp, #-112]	; 0xffffff90
   16c18:	add	r4, r0, r4
   16c1c:	str	r4, [fp, #-104]	; 0xffffff98
   16c20:	add	r3, r0, sl
   16c24:	str	r3, [fp, #-244]	; 0xffffff0c
   16c28:	str	r3, [fp, #-152]	; 0xffffff68
   16c2c:	add	sl, r0, r5
   16c30:	str	sl, [fp, #-156]	; 0xffffff64
   16c34:	mov	r3, #1
   16c38:	str	r3, [fp, #-196]	; 0xffffff3c
   16c3c:	str	r3, [fp, #-192]	; 0xffffff40
   16c40:	sub	ip, fp, #148	; 0x94
   16c44:	sub	lr, fp, #196	; 0xc4
   16c48:	ldm	lr!, {r0, r1, r2, r3}
   16c4c:	stmia	ip!, {r0, r1, r2, r3}
   16c50:	ldm	lr!, {r0, r1, r2, r3}
   16c54:	stmia	ip!, {r0, r1, r2, r3}
   16c58:	ldr	r3, [lr]
   16c5c:	str	r3, [ip]
   16c60:	mov	r2, r9
   16c64:	mov	r1, #0
   16c68:	mov	r0, r4
   16c6c:	bl	11314 <memset@plt>
   16c70:	sub	r3, fp, #160	; 0xa0
   16c74:	str	r3, [fp, #-212]	; 0xffffff2c
   16c78:	str	sl, [fp, #-208]	; 0xffffff30
   16c7c:	ldr	r3, [fp, #-244]	; 0xffffff0c
   16c80:	str	r3, [fp, #-204]	; 0xffffff34
   16c84:	str	r4, [fp, #-200]	; 0xffffff38
   16c88:	tst	r6, #8
   16c8c:	beq	16e18 <argp_parse@@Base+0x2f0>
   16c90:	add	sl, sl, #1
   16c94:	str	sl, [fp, #-208]	; 0xffffff30
   16c98:	mov	r3, #45	; 0x2d
   16c9c:	strb	r3, [r7, r5]
   16ca0:	mov	r3, #0
   16ca4:	ldr	r2, [fp, #-208]	; 0xffffff30
   16ca8:	strb	r3, [r2]
   16cac:	ldr	r2, [fp, #-204]	; 0xffffff34
   16cb0:	str	r3, [r2]
   16cb4:	str	r8, [fp, #-160]	; 0xffffff60
   16cb8:	cmp	r8, r3
   16cbc:	beq	16e34 <argp_parse@@Base+0x30c>
   16cc0:	sub	r3, fp, #212	; 0xd4
   16cc4:	str	r3, [sp]
   16cc8:	ldr	r3, [fp, #-112]	; 0xffffff90
   16ccc:	mov	r2, #0
   16cd0:	mov	r1, r2
   16cd4:	mov	r0, r8
   16cd8:	bl	16838 <argp_error@@Base+0x43c>
   16cdc:	str	r0, [fp, #-108]	; 0xffffff94
   16ce0:	mov	r2, #56	; 0x38
   16ce4:	mov	r1, #0
   16ce8:	sub	r0, fp, #96	; 0x60
   16cec:	bl	11314 <memset@plt>
   16cf0:	ldr	r3, [fp, #-160]	; 0xffffff60
   16cf4:	str	r3, [fp, #-96]	; 0xffffffa0
   16cf8:	ldr	r3, [fp, #-236]	; 0xffffff14
   16cfc:	str	r3, [fp, #-92]	; 0xffffffa4
   16d00:	ldr	r3, [fp, #-232]	; 0xffffff18
   16d04:	str	r3, [fp, #-88]	; 0xffffffa8
   16d08:	str	r6, [fp, #-80]	; 0xffffffb0
   16d0c:	ldr	r3, [pc, #2108]	; 17550 <argp_parse@@Base+0xa28>
   16d10:	ldr	r3, [r3]
   16d14:	str	r3, [fp, #-52]	; 0xffffffcc
   16d18:	ldr	r3, [pc, #2100]	; 17554 <argp_parse@@Base+0xa2c>
   16d1c:	ldr	r3, [r3]
   16d20:	str	r3, [fp, #-48]	; 0xffffffd0
   16d24:	sub	r3, fp, #160	; 0xa0
   16d28:	str	r3, [fp, #-44]	; 0xffffffd4
   16d2c:	mov	r3, #1
   16d30:	str	r3, [fp, #-100]	; 0xffffff9c
   16d34:	ldr	r3, [fp, #-112]	; 0xffffff90
   16d38:	ldr	r2, [fp, #-108]	; 0xffffff94
   16d3c:	cmp	r3, r2
   16d40:	bcs	16ecc <argp_parse@@Base+0x3a4>
   16d44:	ldr	r2, [fp, #8]
   16d48:	str	r2, [r3, #24]
   16d4c:	ldr	r5, [fp, #-112]	; 0xffffff90
   16d50:	ldr	r3, [fp, #-108]	; 0xffffff94
   16d54:	cmp	r5, r3
   16d58:	bcs	16ed8 <argp_parse@@Base+0x3b0>
   16d5c:	ldr	r7, [pc, #2036]	; 17558 <argp_parse@@Base+0xa30>
   16d60:	mov	r6, #0
   16d64:	b	16e70 <argp_parse@@Base+0x348>
   16d68:	ldr	r3, [fp, #-232]	; 0xffffff18
   16d6c:	ldr	r0, [r3]
   16d70:	bl	1765c <argp_parse@@Base+0xb34>
   16d74:	ldr	r3, [pc, #2000]	; 1754c <argp_parse@@Base+0xa24>
   16d78:	str	r0, [r3]
   16d7c:	b	16b78 <argp_parse@@Base+0x50>
   16d80:	sub	sp, sp, #72	; 0x48
   16d84:	add	r5, sp, #8
   16d88:	sub	sp, sp, #40	; 0x28
   16d8c:	add	r4, sp, #8
   16d90:	mov	r1, #0
   16d94:	str	r1, [r4]
   16d98:	str	r1, [r4, #4]
   16d9c:	str	r1, [r4, #8]
   16da0:	str	r1, [r4, #12]
   16da4:	str	r1, [r4, #20]
   16da8:	str	r1, [r4, #24]
   16dac:	str	r5, [r4, #16]
   16db0:	mov	r2, #64	; 0x40
   16db4:	mov	r0, r5
   16db8:	bl	11314 <memset@plt>
   16dbc:	cmp	r8, #0
   16dc0:	addne	r3, r5, #16
   16dc4:	strne	r8, [r5]
   16dc8:	moveq	r3, r5
   16dcc:	ldr	r2, [pc, #1928]	; 1755c <argp_parse@@Base+0xa34>
   16dd0:	str	r2, [r3]
   16dd4:	ldr	r2, [pc, #1924]	; 17560 <argp_parse@@Base+0xa38>
   16dd8:	ldr	r2, [r2]
   16ddc:	cmp	r2, #0
   16de0:	beq	16e00 <argp_parse@@Base+0x2d8>
   16de4:	add	r2, r3, #32
   16de8:	ldr	r1, [pc, #1908]	; 17564 <argp_parse@@Base+0xa3c>
   16dec:	str	r1, [r3, #16]
   16df0:	mov	r3, #0
   16df4:	str	r3, [r2]
   16df8:	mov	r8, r4
   16dfc:	b	16b80 <argp_parse@@Base+0x58>
   16e00:	ldr	r2, [pc, #1888]	; 17568 <argp_parse@@Base+0xa40>
   16e04:	ldr	r2, [r2]
   16e08:	cmp	r2, #0
   16e0c:	addeq	r2, r3, #16
   16e10:	bne	16de4 <argp_parse@@Base+0x2bc>
   16e14:	b	16df0 <argp_parse@@Base+0x2c8>
   16e18:	ldr	r3, [fp, #-240]	; 0xffffff10
   16e1c:	cmp	r3, #0
   16e20:	addne	sl, sl, #1
   16e24:	strne	sl, [fp, #-208]	; 0xffffff30
   16e28:	movne	r3, #43	; 0x2b
   16e2c:	strbne	r3, [r7, r5]
   16e30:	b	16ca0 <argp_parse@@Base+0x178>
   16e34:	ldr	r3, [fp, #-112]	; 0xffffff90
   16e38:	str	r3, [fp, #-108]	; 0xffffff94
   16e3c:	b	16ce0 <argp_parse@@Base+0x1b8>
   16e40:	mov	r3, r6
   16e44:	mov	r2, r7
   16e48:	sub	r1, fp, #96	; 0x60
   16e4c:	mov	r0, r5
   16e50:	bl	16540 <argp_error@@Base+0x144>
   16e54:	add	r5, r5, #36	; 0x24
   16e58:	ldr	r3, [fp, #-108]	; 0xffffff94
   16e5c:	cmp	r5, r3
   16e60:	bcs	16ebc <argp_parse@@Base+0x394>
   16e64:	cmp	r0, #7
   16e68:	cmpne	r0, #0
   16e6c:	bne	16ebc <argp_parse@@Base+0x394>
   16e70:	ldr	r3, [r5, #16]
   16e74:	cmp	r3, #0
   16e78:	ldrne	r2, [r5, #20]
   16e7c:	ldrne	r3, [r3, #28]
   16e80:	ldrne	r3, [r3, r2, lsl #2]
   16e84:	strne	r3, [r5, #24]
   16e88:	ldr	r3, [r5]
   16e8c:	cmp	r3, #0
   16e90:	bne	16e40 <argp_parse@@Base+0x318>
   16e94:	ldr	r3, [r5, #4]
   16e98:	ldr	r3, [r3, #16]
   16e9c:	cmp	r3, #0
   16ea0:	beq	16e40 <argp_parse@@Base+0x318>
   16ea4:	ldr	r3, [r3]
   16ea8:	cmp	r3, #0
   16eac:	ldrne	r3, [r5, #28]
   16eb0:	ldrne	r2, [r5, #24]
   16eb4:	strne	r2, [r3]
   16eb8:	b	16e40 <argp_parse@@Base+0x318>
   16ebc:	mov	r4, r0
   16ec0:	cmp	r0, #7
   16ec4:	beq	16ed8 <argp_parse@@Base+0x3b0>
   16ec8:	b	16ed0 <argp_parse@@Base+0x3a8>
   16ecc:	mov	r4, #0
   16ed0:	cmp	r4, #0
   16ed4:	bne	17398 <argp_parse@@Base+0x870>
   16ed8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16edc:	tst	r3, #2
   16ee0:	moveq	r3, #1
   16ee4:	streq	r3, [fp, #-144]	; 0xffffff70
   16ee8:	beq	16f14 <argp_parse@@Base+0x3ec>
   16eec:	mov	r2, #0
   16ef0:	str	r2, [fp, #-144]	; 0xffffff70
   16ef4:	tst	r3, #1
   16ef8:	beq	16f14 <argp_parse@@Base+0x3ec>
   16efc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16f00:	sub	r3, r3, #4
   16f04:	str	r3, [fp, #-88]	; 0xffffffa8
   16f08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16f0c:	add	r3, r3, #1
   16f10:	str	r3, [fp, #-92]	; 0xffffffa4
   16f14:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16f18:	ldr	r2, [fp, #-232]	; 0xffffff18
   16f1c:	cmp	r2, r3
   16f20:	beq	16f40 <argp_parse@@Base+0x418>
   16f24:	ldr	r3, [pc, #1568]	; 1754c <argp_parse@@Base+0xa24>
   16f28:	ldr	r3, [r3]
   16f2c:	str	r3, [fp, #-56]	; 0xffffffc8
   16f30:	mov	r6, #0
   16f34:	mov	sl, #1
   16f38:	mvn	r9, #0
   16f3c:	b	171b0 <argp_parse@@Base+0x688>
   16f40:	ldr	r0, [r2]
   16f44:	cmp	r0, #0
   16f48:	beq	16f24 <argp_parse@@Base+0x3fc>
   16f4c:	bl	1765c <argp_parse@@Base+0xb34>
   16f50:	str	r0, [fp, #-56]	; 0xffffffc8
   16f54:	b	16f30 <argp_parse@@Base+0x408>
   16f58:	ldr	r3, [fp, #-84]	; 0xffffffac
   16f5c:	str	r3, [fp, #-148]	; 0xffffff6c
   16f60:	str	r9, [fp, #-140]	; 0xffffff74
   16f64:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16f68:	tst	r3, #64	; 0x40
   16f6c:	beq	17038 <argp_parse@@Base+0x510>
   16f70:	sub	r3, fp, #148	; 0x94
   16f74:	str	r3, [sp, #4]
   16f78:	str	r6, [sp]
   16f7c:	ldr	r3, [fp, #-152]	; 0xffffff68
   16f80:	ldr	r2, [fp, #-156]	; 0xffffff64
   16f84:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16f88:	ldr	r0, [fp, #-92]	; 0xffffffa4
   16f8c:	bl	177f8 <argp_parse@@Base+0xcd0>
   16f90:	mov	r5, r0
   16f94:	ldr	r4, [fp, #-148]	; 0xffffff6c
   16f98:	str	r4, [fp, #-84]	; 0xffffffac
   16f9c:	cmn	r5, #1
   16fa0:	beq	17060 <argp_parse@@Base+0x538>
   16fa4:	cmp	r5, #63	; 0x3f
   16fa8:	beq	1708c <argp_parse@@Base+0x564>
   16fac:	cmp	r5, #1
   16fb0:	beq	170c4 <argp_parse@@Base+0x59c>
   16fb4:	ldr	r4, [fp, #-136]	; 0xffffff78
   16fb8:	asrs	r3, r5, #24
   16fbc:	bne	17170 <argp_parse@@Base+0x648>
   16fc0:	mov	r1, r5
   16fc4:	ldr	r0, [fp, #-156]	; 0xffffff64
   16fc8:	bl	112cc <strchr@plt>
   16fcc:	subs	r1, r0, #0
   16fd0:	beq	17020 <argp_parse@@Base+0x4f8>
   16fd4:	ldr	r0, [fp, #-112]	; 0xffffff90
   16fd8:	ldr	r2, [fp, #-108]	; 0xffffff94
   16fdc:	cmp	r2, r0
   16fe0:	bls	17020 <argp_parse@@Base+0x4f8>
   16fe4:	ldr	r3, [r0, #8]
   16fe8:	cmp	r1, r3
   16fec:	bcc	17008 <argp_parse@@Base+0x4e0>
   16ff0:	add	r0, r0, #36	; 0x24
   16ff4:	cmp	r2, r0
   16ff8:	bls	17020 <argp_parse@@Base+0x4f8>
   16ffc:	ldr	r3, [r0, #8]
   17000:	cmp	r1, r3
   17004:	bcs	16ff0 <argp_parse@@Base+0x4c8>
   17008:	mov	r3, r4
   1700c:	mov	r2, r5
   17010:	sub	r1, fp, #96	; 0x60
   17014:	bl	16540 <argp_error@@Base+0x144>
   17018:	cmp	r0, #7
   1701c:	bne	171a8 <argp_parse@@Base+0x680>
   17020:	ldr	r3, [pc, #1348]	; 1756c <argp_parse@@Base+0xa44>
   17024:	mov	r2, r5
   17028:	ldr	r1, [pc, #1344]	; 17570 <argp_parse@@Base+0xa48>
   1702c:	sub	r0, fp, #96	; 0x60
   17030:	bl	163fc <argp_error@@Base>
   17034:	b	17250 <argp_parse@@Base+0x728>
   17038:	sub	r3, fp, #148	; 0x94
   1703c:	str	r3, [sp, #4]
   17040:	str	r6, [sp]
   17044:	ldr	r3, [fp, #-152]	; 0xffffff68
   17048:	ldr	r2, [fp, #-156]	; 0xffffff64
   1704c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17050:	ldr	r0, [fp, #-92]	; 0xffffffa4
   17054:	bl	1779c <argp_parse@@Base+0xc74>
   17058:	mov	r5, r0
   1705c:	b	16f94 <argp_parse@@Base+0x46c>
   17060:	str	r6, [fp, #-100]	; 0xffffff9c
   17064:	cmp	r4, #1
   17068:	ble	171d8 <argp_parse@@Base+0x6b0>
   1706c:	sub	r3, r4, #-1073741823	; 0xc0000001
   17070:	ldr	r1, [pc, #1276]	; 17574 <argp_parse@@Base+0xa4c>
   17074:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17078:	ldr	r0, [r2, r3, lsl #2]
   1707c:	bl	11104 <strcmp@plt>
   17080:	cmp	r0, #0
   17084:	streq	r4, [fp, #-72]	; 0xffffffb8
   17088:	b	171d8 <argp_parse@@Base+0x6b0>
   1708c:	ldr	r3, [fp, #-140]	; 0xffffff74
   17090:	cmn	r3, #1
   17094:	beq	16fb4 <argp_parse@@Base+0x48c>
   17098:	mov	r3, #0
   1709c:	b	17260 <argp_parse@@Base+0x738>
   170a0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   170a4:	tst	r2, #4
   170a8:	movne	r3, #1
   170ac:	bne	17260 <argp_parse@@Base+0x738>
   170b0:	add	r2, r3, #1
   170b4:	str	r2, [fp, #-84]	; 0xffffffac
   170b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   170bc:	ldr	r3, [r2, r3, lsl #2]
   170c0:	str	r3, [fp, #-136]	; 0xffffff78
   170c4:	ldr	r7, [fp, #-136]	; 0xffffff78
   170c8:	ldr	r8, [fp, #-84]	; 0xffffffac
   170cc:	sub	r8, r8, #1
   170d0:	str	r8, [fp, #-84]	; 0xffffffac
   170d4:	ldr	r5, [fp, #-112]	; 0xffffff90
   170d8:	ldr	r3, [fp, #-108]	; 0xffffff94
   170dc:	cmp	r3, r5
   170e0:	bhi	1712c <argp_parse@@Base+0x604>
   170e4:	b	17168 <argp_parse@@Base+0x640>
   170e8:	ldr	r3, [fp, #-84]	; 0xffffffac
   170ec:	sub	r3, r3, #1
   170f0:	str	r3, [fp, #-84]	; 0xffffffac
   170f4:	mov	r3, r6
   170f8:	ldr	r2, [pc, #1144]	; 17578 <argp_parse@@Base+0xa50>
   170fc:	sub	r1, fp, #96	; 0x60
   17100:	mov	r0, r5
   17104:	bl	16540 <argp_error@@Base+0x144>
   17108:	add	r5, r5, #36	; 0x24
   1710c:	ldr	r3, [fp, #-108]	; 0xffffff94
   17110:	cmp	r5, r3
   17114:	movcs	r3, #0
   17118:	movcc	r3, #1
   1711c:	cmp	r0, #7
   17120:	movne	r3, #0
   17124:	cmp	r3, #0
   17128:	beq	1750c <argp_parse@@Base+0x9e4>
   1712c:	ldr	r3, [fp, #-84]	; 0xffffffac
   17130:	add	r3, r3, #1
   17134:	str	r3, [fp, #-84]	; 0xffffffac
   17138:	mov	r3, r7
   1713c:	mov	r2, r6
   17140:	sub	r1, fp, #96	; 0x60
   17144:	mov	r0, r5
   17148:	bl	16540 <argp_error@@Base+0x144>
   1714c:	cmp	r0, #7
   17150:	beq	170e8 <argp_parse@@Base+0x5c0>
   17154:	add	r5, r5, #36	; 0x24
   17158:	cmp	r0, #0
   1715c:	beq	1751c <argp_parse@@Base+0x9f4>
   17160:	cmp	r0, #7
   17164:	bne	171a8 <argp_parse@@Base+0x680>
   17168:	mov	r5, #1
   1716c:	b	17250 <argp_parse@@Base+0x728>
   17170:	ands	r1, r5, #8388608	; 0x800000
   17174:	movne	r1, #-16777216	; 0xff000000
   17178:	bic	r2, r5, #-16777216	; 0xff000000
   1717c:	add	r0, r3, r3, lsl #3
   17180:	lsl	r0, r0, #2
   17184:	sub	r0, r0, #36	; 0x24
   17188:	mov	r3, r4
   1718c:	orr	r2, r2, r1
   17190:	sub	r1, fp, #96	; 0x60
   17194:	ldr	ip, [fp, #-112]	; 0xffffff90
   17198:	add	r0, ip, r0
   1719c:	bl	16540 <argp_error@@Base+0x144>
   171a0:	cmp	r0, #7
   171a4:	beq	171f0 <argp_parse@@Base+0x6c8>
   171a8:	cmp	r0, #0
   171ac:	bne	17300 <argp_parse@@Base+0x7d8>
   171b0:	ldr	r3, [fp, #-72]	; 0xffffffb8
   171b4:	cmp	r3, #0
   171b8:	beq	171cc <argp_parse@@Base+0x6a4>
   171bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   171c0:	cmp	r3, r2
   171c4:	strgt	r6, [fp, #-72]	; 0xffffffb8
   171c8:	ble	171d8 <argp_parse@@Base+0x6b0>
   171cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   171d0:	cmp	r3, #0
   171d4:	bne	16f58 <argp_parse@@Base+0x430>
   171d8:	ldr	r3, [fp, #-84]	; 0xffffffac
   171dc:	ldr	r2, [fp, #-92]	; 0xffffffa4
   171e0:	cmp	r3, r2
   171e4:	blt	170a0 <argp_parse@@Base+0x578>
   171e8:	mov	r3, #1
   171ec:	b	17260 <argp_parse@@Base+0x738>
   171f0:	ldr	r3, [fp, #-152]	; 0xffffff68
   171f4:	ldr	r2, [r3, #12]
   171f8:	cmp	r2, r5
   171fc:	beq	17230 <argp_parse@@Base+0x708>
   17200:	ldr	r2, [r3]
   17204:	cmp	r2, #0
   17208:	beq	172f8 <argp_parse@@Base+0x7d0>
   1720c:	add	r3, r3, #16
   17210:	ldr	r2, [r3, #12]
   17214:	cmp	r2, r5
   17218:	beq	17230 <argp_parse@@Base+0x708>
   1721c:	ldr	r2, [r3]
   17220:	cmp	r2, #0
   17224:	bne	1720c <argp_parse@@Base+0x6e4>
   17228:	ldr	r2, [pc, #844]	; 1757c <argp_parse@@Base+0xa54>
   1722c:	b	17240 <argp_parse@@Base+0x718>
   17230:	ldr	r2, [r3]
   17234:	ldr	r3, [pc, #832]	; 1757c <argp_parse@@Base+0xa54>
   17238:	cmp	r2, #0
   1723c:	moveq	r2, r3
   17240:	ldr	r3, [pc, #804]	; 1756c <argp_parse@@Base+0xa44>
   17244:	ldr	r1, [pc, #820]	; 17580 <argp_parse@@Base+0xa58>
   17248:	sub	r0, fp, #96	; 0x60
   1724c:	bl	163fc <argp_error@@Base>
   17250:	add	r5, r5, #1
   17254:	bics	r3, r5, #2
   17258:	moveq	r3, #1
   1725c:	movne	r3, #0
   17260:	cmp	r3, #0
   17264:	moveq	r4, #7
   17268:	beq	17304 <argp_parse@@Base+0x7dc>
   1726c:	ldr	r3, [fp, #-84]	; 0xffffffac
   17270:	ldr	r2, [fp, #-92]	; 0xffffffa4
   17274:	cmp	r3, r2
   17278:	beq	173a4 <argp_parse@@Base+0x87c>
   1727c:	ldr	r2, [fp, #4]
   17280:	cmp	r2, #0
   17284:	strne	r3, [r2]
   17288:	beq	174a0 <argp_parse@@Base+0x978>
   1728c:	ldr	r5, [fp, #-108]	; 0xffffff94
   17290:	sub	r5, r5, #36	; 0x24
   17294:	ldr	r3, [fp, #-112]	; 0xffffff90
   17298:	cmp	r5, r3
   1729c:	bcc	174dc <argp_parse@@Base+0x9b4>
   172a0:	ldr	r7, [pc, #732]	; 17584 <argp_parse@@Base+0xa5c>
   172a4:	mov	r6, #0
   172a8:	mov	r3, r6
   172ac:	mov	r2, r7
   172b0:	sub	r1, fp, #96	; 0x60
   172b4:	mov	r0, r5
   172b8:	bl	16540 <argp_error@@Base+0x144>
   172bc:	sub	r5, r5, #36	; 0x24
   172c0:	ldr	r3, [fp, #-112]	; 0xffffff90
   172c4:	cmp	r5, r3
   172c8:	bcc	172d8 <argp_parse@@Base+0x7b0>
   172cc:	cmp	r0, #7
   172d0:	cmpne	r0, #0
   172d4:	beq	172a8 <argp_parse@@Base+0x780>
   172d8:	mov	r4, r0
   172dc:	cmp	r0, #7
   172e0:	moveq	r4, #0
   172e4:	ldr	r5, [fp, #-108]	; 0xffffff94
   172e8:	sub	r5, r5, #36	; 0x24
   172ec:	cmp	r3, r5
   172f0:	bls	1735c <argp_parse@@Base+0x834>
   172f4:	b	17390 <argp_parse@@Base+0x868>
   172f8:	ldr	r2, [pc, #636]	; 1757c <argp_parse@@Base+0xa54>
   172fc:	b	17240 <argp_parse@@Base+0x718>
   17300:	mov	r4, r0
   17304:	cmp	r4, #7
   17308:	beq	174c4 <argp_parse@@Base+0x99c>
   1730c:	ldr	r5, [fp, #-112]	; 0xffffff90
   17310:	ldr	r3, [fp, #-108]	; 0xffffff94
   17314:	cmp	r3, r5
   17318:	bls	17348 <argp_parse@@Base+0x820>
   1731c:	ldr	r7, [pc, #612]	; 17588 <argp_parse@@Base+0xa60>
   17320:	mov	r6, #0
   17324:	mov	r3, r6
   17328:	mov	r2, r7
   1732c:	sub	r1, fp, #96	; 0x60
   17330:	mov	r0, r5
   17334:	bl	16540 <argp_error@@Base+0x144>
   17338:	add	r5, r5, #36	; 0x24
   1733c:	ldr	r3, [fp, #-108]	; 0xffffff94
   17340:	cmp	r5, r3
   17344:	bcc	17324 <argp_parse@@Base+0x7fc>
   17348:	ldr	r5, [fp, #-108]	; 0xffffff94
   1734c:	sub	r5, r5, #36	; 0x24
   17350:	ldr	r3, [fp, #-112]	; 0xffffff90
   17354:	cmp	r3, r5
   17358:	bhi	17388 <argp_parse@@Base+0x860>
   1735c:	ldr	r7, [pc, #552]	; 1758c <argp_parse@@Base+0xa64>
   17360:	mov	r6, #0
   17364:	mov	r3, r6
   17368:	mov	r2, r7
   1736c:	sub	r1, fp, #96	; 0x60
   17370:	mov	r0, r5
   17374:	bl	16540 <argp_error@@Base+0x144>
   17378:	sub	r5, r5, #36	; 0x24
   1737c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17380:	cmp	r5, r3
   17384:	bcs	17364 <argp_parse@@Base+0x83c>
   17388:	cmp	r4, #7
   1738c:	moveq	r4, #22
   17390:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17394:	bl	1771c <argp_parse@@Base+0xbf4>
   17398:	mov	r0, r4
   1739c:	sub	sp, fp, #32
   173a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173a4:	ldr	r6, [fp, #-112]	; 0xffffff90
   173a8:	ldr	r5, [fp, #-108]	; 0xffffff94
   173ac:	cmp	r6, r5
   173b0:	bcs	174e4 <argp_parse@@Base+0x9bc>
   173b4:	mov	r4, #0
   173b8:	ldr	r8, [pc, #464]	; 17590 <argp_parse@@Base+0xa68>
   173bc:	mov	r7, r4
   173c0:	mov	r0, r4
   173c4:	b	173e4 <argp_parse@@Base+0x8bc>
   173c8:	add	r6, r6, #36	; 0x24
   173cc:	ldr	r5, [fp, #-108]	; 0xffffff94
   173d0:	cmp	r6, r5
   173d4:	bcs	17410 <argp_parse@@Base+0x8e8>
   173d8:	cmp	r0, #7
   173dc:	cmpne	r0, #0
   173e0:	bne	17408 <argp_parse@@Base+0x8e0>
   173e4:	ldr	r3, [r6, #12]
   173e8:	cmp	r3, #0
   173ec:	bne	173c8 <argp_parse@@Base+0x8a0>
   173f0:	mov	r3, r7
   173f4:	mov	r2, r8
   173f8:	sub	r1, fp, #96	; 0x60
   173fc:	mov	r0, r6
   17400:	bl	16540 <argp_error@@Base+0x144>
   17404:	b	173c8 <argp_parse@@Base+0x8a0>
   17408:	mov	r4, r0
   1740c:	b	17474 <argp_parse@@Base+0x94c>
   17410:	mov	r4, r0
   17414:	sub	r5, r5, #36	; 0x24
   17418:	ldr	r3, [fp, #-112]	; 0xffffff90
   1741c:	cmp	r3, r5
   17420:	bhi	17474 <argp_parse@@Base+0x94c>
   17424:	cmp	r0, #0
   17428:	cmpne	r0, #7
   1742c:	bne	17474 <argp_parse@@Base+0x94c>
   17430:	ldr	r7, [pc, #348]	; 17594 <argp_parse@@Base+0xa6c>
   17434:	mov	r6, #0
   17438:	mov	r3, r6
   1743c:	mov	r2, r7
   17440:	sub	r1, fp, #96	; 0x60
   17444:	mov	r0, r5
   17448:	bl	16540 <argp_error@@Base+0x144>
   1744c:	sub	r5, r5, #36	; 0x24
   17450:	ldr	r3, [fp, #-112]	; 0xffffff90
   17454:	cmp	r5, r3
   17458:	bcc	17470 <argp_parse@@Base+0x948>
   1745c:	cmp	r0, #7
   17460:	cmpne	r0, #0
   17464:	beq	17438 <argp_parse@@Base+0x910>
   17468:	mov	r4, r0
   1746c:	b	17474 <argp_parse@@Base+0x94c>
   17470:	mov	r4, r0
   17474:	cmp	r4, #7
   17478:	beq	174f8 <argp_parse@@Base+0x9d0>
   1747c:	ldr	r3, [fp, #4]
   17480:	cmp	r3, #0
   17484:	beq	1753c <argp_parse@@Base+0xa14>
   17488:	ldr	r3, [fp, #-84]	; 0xffffffac
   1748c:	ldr	r2, [fp, #4]
   17490:	str	r3, [r2]
   17494:	cmp	r4, #0
   17498:	beq	1728c <argp_parse@@Base+0x764>
   1749c:	b	17304 <argp_parse@@Base+0x7dc>
   174a0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   174a4:	tst	r3, #2
   174a8:	bne	174c4 <argp_parse@@Base+0x99c>
   174ac:	ldr	r0, [fp, #-52]	; 0xffffffcc
   174b0:	cmp	r0, #0
   174b4:	beq	174c4 <argp_parse@@Base+0x99c>
   174b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   174bc:	ldr	r1, [pc, #212]	; 17598 <argp_parse@@Base+0xa70>
   174c0:	bl	112d8 <fprintf@plt>
   174c4:	mov	r2, #260	; 0x104
   174c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   174cc:	sub	r0, fp, #96	; 0x60
   174d0:	bl	16340 <argp_state_help@@Base>
   174d4:	mov	r4, #7
   174d8:	b	1730c <argp_parse@@Base+0x7e4>
   174dc:	mov	r4, #0
   174e0:	b	17388 <argp_parse@@Base+0x860>
   174e4:	sub	r5, r5, #36	; 0x24
   174e8:	cmp	r6, r5
   174ec:	movhi	r4, #0
   174f0:	bls	17430 <argp_parse@@Base+0x908>
   174f4:	b	1747c <argp_parse@@Base+0x954>
   174f8:	ldr	r3, [fp, #4]
   174fc:	cmp	r3, #0
   17500:	movne	r4, #0
   17504:	bne	17488 <argp_parse@@Base+0x960>
   17508:	b	1728c <argp_parse@@Base+0x764>
   1750c:	cmp	r0, #0
   17510:	bne	17160 <argp_parse@@Base+0x638>
   17514:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17518:	str	r3, [fp, #-84]	; 0xffffffac
   1751c:	ldr	r3, [fp, #-84]	; 0xffffffac
   17520:	cmp	r8, r3
   17524:	sublt	r8, r3, r8
   17528:	ldrlt	r3, [r5, #-24]	; 0xffffffe8
   1752c:	addlt	r8, r3, r8
   17530:	strlt	r8, [r5, #-24]	; 0xffffffe8
   17534:	strge	sl, [fp, #-100]	; 0xffffff9c
   17538:	b	171b0 <argp_parse@@Base+0x688>
   1753c:	cmp	r4, #0
   17540:	beq	1728c <argp_parse@@Base+0x764>
   17544:	b	1730c <argp_parse@@Base+0x7e4>
   17548:	ldrdeq	ip, [r2], -r4
   1754c:	ldrdeq	ip, [r2], -r0
   17550:	ldrdeq	ip, [r2], -r8
   17554:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   17558:	tsteq	r0, r3
   1755c:	ldrdeq	sl, [r1], -r4
   17560:	andeq	ip, r2, ip, asr r4
   17564:	strdeq	sl, [r1], -r0
   17568:	andeq	ip, r2, r0, lsl r4
   1756c:	andeq	sl, r1, ip, lsl #18
   17570:	andeq	sl, r1, r0, lsr #20
   17574:	andeq	sl, r1, ip, lsl sl
   17578:	tsteq	r0, r6
   1757c:	andeq	sl, r1, r8, lsl sl
   17580:	andeq	sl, r1, r8, lsr #20
   17584:	tsteq	r0, r4
   17588:	tsteq	r0, r5
   1758c:	tsteq	r0, r7
   17590:	tsteq	r0, r2
   17594:	tsteq	r0, r1
   17598:	andeq	sl, r1, r4, lsr sl
   1759c:	cmp	r1, #0
   175a0:	beq	175ec <argp_parse@@Base+0xac4>
   175a4:	ldr	r2, [r1, #52]	; 0x34
   175a8:	ldr	r3, [r2, #48]	; 0x30
   175ac:	ldr	r1, [r2, #52]	; 0x34
   175b0:	cmp	r3, r1
   175b4:	bcs	175f4 <argp_parse@@Base+0xacc>
   175b8:	ldr	r2, [r3, #4]
   175bc:	cmp	r0, r2
   175c0:	beq	175dc <argp_parse@@Base+0xab4>
   175c4:	add	r3, r3, #36	; 0x24
   175c8:	cmp	r3, r1
   175cc:	bcs	175e4 <argp_parse@@Base+0xabc>
   175d0:	ldr	r2, [r3, #4]
   175d4:	cmp	r2, r0
   175d8:	bne	175c4 <argp_parse@@Base+0xa9c>
   175dc:	ldr	r0, [r3, #24]
   175e0:	bx	lr
   175e4:	mov	r0, #0
   175e8:	bx	lr
   175ec:	mov	r0, #0
   175f0:	bx	lr
   175f4:	mov	r0, #0
   175f8:	bx	lr
   175fc:	push	{lr}		; (str lr, [sp, #-4]!)
   17600:	sub	sp, sp, #12
   17604:	ldr	r3, [pc, #28]	; 17628 <argp_parse@@Base+0xb00>
   17608:	ldr	r1, [r3]
   1760c:	ldr	r3, [r3, #4]
   17610:	str	r3, [sp]
   17614:	ldr	r3, [pc, #16]	; 1762c <argp_parse@@Base+0xb04>
   17618:	ldr	r2, [pc, #16]	; 17630 <argp_parse@@Base+0xb08>
   1761c:	bl	17bdc <argp_parse@@Base+0x10b4>
   17620:	add	sp, sp, #12
   17624:	pop	{pc}		; (ldr pc, [sp], #4)
   17628:	andeq	ip, r2, r4, lsl r4
   1762c:	andeq	sl, r1, ip, lsl #22
   17630:	andeq	sl, r1, ip, lsl fp
   17634:	ldr	r2, [pc, #20]	; 17650 <argp_parse@@Base+0xb28>
   17638:	ldr	r3, [pc, #20]	; 17654 <argp_parse@@Base+0xb2c>
   1763c:	str	r2, [r3]
   17640:	ldr	r3, [pc, #16]	; 17658 <argp_parse@@Base+0xb30>
   17644:	str	r0, [r3]
   17648:	str	r1, [r3, #4]
   1764c:	bx	lr
   17650:	strdeq	r7, [r1], -ip
   17654:	andeq	ip, r2, r0, lsl r4
   17658:	andeq	ip, r2, r4, lsl r4
   1765c:	ldrb	r3, [r0]
   17660:	cmp	r3, #47	; 0x2f
   17664:	bne	17674 <argp_parse@@Base+0xb4c>
   17668:	ldrb	r3, [r0, #1]!
   1766c:	cmp	r3, #47	; 0x2f
   17670:	beq	17668 <argp_parse@@Base+0xb40>
   17674:	ldrb	r2, [r0]
   17678:	cmp	r2, #0
   1767c:	bxeq	lr
   17680:	push	{lr}		; (str lr, [sp, #-4]!)
   17684:	mov	r1, r0
   17688:	mov	r3, #0
   1768c:	mov	lr, #1
   17690:	mov	ip, r3
   17694:	b	176a4 <argp_parse@@Base+0xb7c>
   17698:	ldrb	r2, [r1, #1]!
   1769c:	cmp	r2, #0
   176a0:	beq	176c0 <argp_parse@@Base+0xb98>
   176a4:	cmp	r2, #47	; 0x2f
   176a8:	moveq	r3, lr
   176ac:	beq	17698 <argp_parse@@Base+0xb70>
   176b0:	cmp	r3, #0
   176b4:	movne	r0, r1
   176b8:	movne	r3, ip
   176bc:	b	17698 <argp_parse@@Base+0xb70>
   176c0:	pop	{pc}		; (ldr pc, [sp], #4)
   176c4:	push	{r4, lr}
   176c8:	mov	r4, r0
   176cc:	bl	112c0 <strlen@plt>
   176d0:	cmp	r0, #1
   176d4:	popls	{r4, pc}
   176d8:	sub	r3, r0, #1
   176dc:	add	r2, r4, r3
   176e0:	ldrb	r1, [r4, r3]
   176e4:	cmp	r1, #47	; 0x2f
   176e8:	popne	{r4, pc}
   176ec:	cmp	r3, #1
   176f0:	beq	17714 <argp_parse@@Base+0xbec>
   176f4:	sub	r0, r3, #1
   176f8:	ldrb	r1, [r2, #-1]!
   176fc:	cmp	r1, #47	; 0x2f
   17700:	beq	1770c <argp_parse@@Base+0xbe4>
   17704:	mov	r0, r3
   17708:	pop	{r4, pc}
   1770c:	mov	r3, r0
   17710:	b	176ec <argp_parse@@Base+0xbc4>
   17714:	mov	r0, #1
   17718:	pop	{r4, pc}
   1771c:	push	{r4, r5, lr}
   17720:	sub	sp, sp, #12
   17724:	mov	r5, r0
   17728:	bl	112e4 <__errno_location@plt>
   1772c:	mov	r4, r0
   17730:	ldr	r3, [r0]
   17734:	str	r3, [sp]
   17738:	str	r3, [sp, #4]
   1773c:	mov	r3, #0
   17740:	str	r3, [r0]
   17744:	mov	r0, r5
   17748:	bl	11164 <free@plt>
   1774c:	ldr	r3, [r4]
   17750:	cmp	r3, #0
   17754:	moveq	r3, #4
   17758:	movne	r3, #0
   1775c:	add	r2, sp, #8
   17760:	add	r3, r2, r3
   17764:	ldr	r3, [r3, #-8]
   17768:	str	r3, [r4]
   1776c:	add	sp, sp, #12
   17770:	pop	{r4, r5, pc}
   17774:	push	{lr}		; (str lr, [sp, #-4]!)
   17778:	sub	sp, sp, #20
   1777c:	mov	ip, #0
   17780:	str	ip, [sp, #8]
   17784:	str	ip, [sp, #4]
   17788:	ldr	ip, [sp, #24]
   1778c:	str	ip, [sp]
   17790:	bl	19668 <argp_parse@@Base+0x2b40>
   17794:	add	sp, sp, #20
   17798:	pop	{pc}		; (ldr pc, [sp], #4)
   1779c:	push	{lr}		; (str lr, [sp, #-4]!)
   177a0:	sub	sp, sp, #20
   177a4:	mov	ip, #0
   177a8:	str	ip, [sp, #12]
   177ac:	ldr	lr, [sp, #28]
   177b0:	str	lr, [sp, #8]
   177b4:	str	ip, [sp, #4]
   177b8:	ldr	ip, [sp, #24]
   177bc:	str	ip, [sp]
   177c0:	bl	190ec <argp_parse@@Base+0x25c4>
   177c4:	add	sp, sp, #20
   177c8:	pop	{pc}		; (ldr pc, [sp], #4)
   177cc:	push	{lr}		; (str lr, [sp, #-4]!)
   177d0:	sub	sp, sp, #20
   177d4:	mov	ip, #0
   177d8:	str	ip, [sp, #8]
   177dc:	mov	ip, #1
   177e0:	str	ip, [sp, #4]
   177e4:	ldr	ip, [sp, #24]
   177e8:	str	ip, [sp]
   177ec:	bl	19668 <argp_parse@@Base+0x2b40>
   177f0:	add	sp, sp, #20
   177f4:	pop	{pc}		; (ldr pc, [sp], #4)
   177f8:	push	{lr}		; (str lr, [sp, #-4]!)
   177fc:	sub	sp, sp, #20
   17800:	mov	ip, #0
   17804:	str	ip, [sp, #12]
   17808:	ldr	ip, [sp, #28]
   1780c:	str	ip, [sp, #8]
   17810:	mov	ip, #1
   17814:	str	ip, [sp, #4]
   17818:	ldr	ip, [sp, #24]
   1781c:	str	ip, [sp]
   17820:	bl	190ec <argp_parse@@Base+0x25c4>
   17824:	add	sp, sp, #20
   17828:	pop	{pc}		; (ldr pc, [sp], #4)
   1782c:	push	{r4, r5, r6, lr}
   17830:	subs	r4, r0, #0
   17834:	beq	178ac <argp_parse@@Base+0xd84>
   17838:	mov	r1, #47	; 0x2f
   1783c:	mov	r0, r4
   17840:	bl	11368 <strrchr@plt>
   17844:	cmp	r0, #0
   17848:	addne	r5, r0, #1
   1784c:	moveq	r5, r4
   17850:	sub	r3, r5, r4
   17854:	cmp	r3, #6
   17858:	ble	17898 <argp_parse@@Base+0xd70>
   1785c:	mov	r2, #7
   17860:	ldr	r1, [pc, #96]	; 178c8 <argp_parse@@Base+0xda0>
   17864:	sub	r0, r5, #7
   17868:	bl	11410 <strncmp@plt>
   1786c:	cmp	r0, #0
   17870:	bne	17898 <argp_parse@@Base+0xd70>
   17874:	mov	r2, #3
   17878:	ldr	r1, [pc, #76]	; 178cc <argp_parse@@Base+0xda4>
   1787c:	mov	r0, r5
   17880:	bl	11410 <strncmp@plt>
   17884:	cmp	r0, #0
   17888:	addeq	r4, r5, #3
   1788c:	ldreq	r3, [pc, #60]	; 178d0 <argp_parse@@Base+0xda8>
   17890:	streq	r4, [r3]
   17894:	movne	r4, r5
   17898:	ldr	r3, [pc, #52]	; 178d4 <argp_parse@@Base+0xdac>
   1789c:	str	r4, [r3]
   178a0:	ldr	r3, [pc, #48]	; 178d8 <argp_parse@@Base+0xdb0>
   178a4:	str	r4, [r3]
   178a8:	pop	{r4, r5, r6, pc}
   178ac:	ldr	r3, [pc, #40]	; 178dc <argp_parse@@Base+0xdb4>
   178b0:	ldr	r3, [r3]
   178b4:	mov	r2, #55	; 0x37
   178b8:	mov	r1, #1
   178bc:	ldr	r0, [pc, #28]	; 178e0 <argp_parse@@Base+0xdb8>
   178c0:	bl	1120c <fwrite@plt>
   178c4:	bl	1141c <abort@plt>
   178c8:	andeq	sl, r1, r4, ror #22
   178cc:	andeq	sl, r1, ip, ror #22
   178d0:	ldrdeq	ip, [r2], -r0
   178d4:	andeq	ip, r2, ip, lsl r4
   178d8:	ldrdeq	ip, [r2], -r4
   178dc:	ldrdeq	ip, [r2], -r8
   178e0:	andeq	sl, r1, ip, lsr #22
   178e4:	push	{r4, r5, r6, lr}
   178e8:	sub	sp, sp, #32
   178ec:	mov	r4, r0
   178f0:	ldr	r5, [sp, #48]	; 0x30
   178f4:	ldr	r6, [sp, #52]	; 0x34
   178f8:	cmp	r1, #0
   178fc:	beq	17984 <argp_parse@@Base+0xe5c>
   17900:	str	r3, [sp]
   17904:	mov	r3, r2
   17908:	mov	r2, r1
   1790c:	ldr	r1, [pc, #644]	; 17b98 <argp_parse@@Base+0x1070>
   17910:	bl	112d8 <fprintf@plt>
   17914:	ldr	r3, [pc, #640]	; 17b9c <argp_parse@@Base+0x1074>
   17918:	ldr	r2, [pc, #640]	; 17ba0 <argp_parse@@Base+0x1078>
   1791c:	ldr	r1, [pc, #640]	; 17ba4 <argp_parse@@Base+0x107c>
   17920:	mov	r0, r4
   17924:	bl	112d8 <fprintf@plt>
   17928:	mov	r1, r4
   1792c:	mov	r0, #10
   17930:	bl	11380 <fputc@plt>
   17934:	ldr	r2, [pc, #620]	; 17ba8 <argp_parse@@Base+0x1080>
   17938:	ldr	r1, [pc, #620]	; 17bac <argp_parse@@Base+0x1084>
   1793c:	mov	r0, r4
   17940:	bl	112d8 <fprintf@plt>
   17944:	mov	r1, r4
   17948:	mov	r0, #10
   1794c:	bl	11380 <fputc@plt>
   17950:	cmp	r6, #9
   17954:	ldrls	pc, [pc, r6, lsl #2]
   17958:	b	17b48 <argp_parse@@Base+0x1020>
   1795c:	andeq	r7, r1, r0, lsr #19
   17960:	muleq	r1, r0, r9
   17964:	andeq	r7, r1, r8, lsr #19
   17968:	andeq	r7, r1, r0, asr #19
   1796c:	andeq	r7, r1, r0, ror #19
   17970:	andeq	r7, r1, r8, lsl #20
   17974:	andeq	r7, r1, r8, lsr sl
   17978:	andeq	r7, r1, r0, ror sl
   1797c:			; <UNDEFINED> instruction: 0x00017ab0
   17980:	strdeq	r7, [r1], -r8
   17984:	ldr	r1, [pc, #548]	; 17bb0 <argp_parse@@Base+0x1088>
   17988:	bl	112d8 <fprintf@plt>
   1798c:	b	17914 <argp_parse@@Base+0xdec>
   17990:	ldr	r2, [r5]
   17994:	ldr	r1, [pc, #536]	; 17bb4 <argp_parse@@Base+0x108c>
   17998:	mov	r0, r4
   1799c:	bl	112d8 <fprintf@plt>
   179a0:	add	sp, sp, #32
   179a4:	pop	{r4, r5, r6, pc}
   179a8:	ldr	r3, [r5, #4]
   179ac:	ldr	r2, [r5]
   179b0:	ldr	r1, [pc, #512]	; 17bb8 <argp_parse@@Base+0x1090>
   179b4:	mov	r0, r4
   179b8:	bl	112d8 <fprintf@plt>
   179bc:	b	179a0 <argp_parse@@Base+0xe78>
   179c0:	ldr	r3, [r5, #4]
   179c4:	ldr	r2, [r5]
   179c8:	ldr	r1, [r5, #8]
   179cc:	str	r1, [sp]
   179d0:	ldr	r1, [pc, #484]	; 17bbc <argp_parse@@Base+0x1094>
   179d4:	mov	r0, r4
   179d8:	bl	112d8 <fprintf@plt>
   179dc:	b	179a0 <argp_parse@@Base+0xe78>
   179e0:	ldr	r3, [r5, #4]
   179e4:	ldr	r2, [r5]
   179e8:	ldr	r1, [r5, #12]
   179ec:	str	r1, [sp, #4]
   179f0:	ldr	r1, [r5, #8]
   179f4:	str	r1, [sp]
   179f8:	ldr	r1, [pc, #448]	; 17bc0 <argp_parse@@Base+0x1098>
   179fc:	mov	r0, r4
   17a00:	bl	112d8 <fprintf@plt>
   17a04:	b	179a0 <argp_parse@@Base+0xe78>
   17a08:	ldr	r3, [r5, #4]
   17a0c:	ldr	r2, [r5]
   17a10:	ldr	r1, [r5, #16]
   17a14:	str	r1, [sp, #8]
   17a18:	ldr	r1, [r5, #12]
   17a1c:	str	r1, [sp, #4]
   17a20:	ldr	r1, [r5, #8]
   17a24:	str	r1, [sp]
   17a28:	ldr	r1, [pc, #404]	; 17bc4 <argp_parse@@Base+0x109c>
   17a2c:	mov	r0, r4
   17a30:	bl	112d8 <fprintf@plt>
   17a34:	b	179a0 <argp_parse@@Base+0xe78>
   17a38:	ldr	r3, [r5, #4]
   17a3c:	ldr	r2, [r5]
   17a40:	ldr	r1, [r5, #20]
   17a44:	str	r1, [sp, #12]
   17a48:	ldr	r1, [r5, #16]
   17a4c:	str	r1, [sp, #8]
   17a50:	ldr	r1, [r5, #12]
   17a54:	str	r1, [sp, #4]
   17a58:	ldr	r1, [r5, #8]
   17a5c:	str	r1, [sp]
   17a60:	ldr	r1, [pc, #352]	; 17bc8 <argp_parse@@Base+0x10a0>
   17a64:	mov	r0, r4
   17a68:	bl	112d8 <fprintf@plt>
   17a6c:	b	179a0 <argp_parse@@Base+0xe78>
   17a70:	ldr	r3, [r5, #4]
   17a74:	ldr	r2, [r5]
   17a78:	ldr	r1, [r5, #24]
   17a7c:	str	r1, [sp, #16]
   17a80:	ldr	r1, [r5, #20]
   17a84:	str	r1, [sp, #12]
   17a88:	ldr	r1, [r5, #16]
   17a8c:	str	r1, [sp, #8]
   17a90:	ldr	r1, [r5, #12]
   17a94:	str	r1, [sp, #4]
   17a98:	ldr	r1, [r5, #8]
   17a9c:	str	r1, [sp]
   17aa0:	ldr	r1, [pc, #292]	; 17bcc <argp_parse@@Base+0x10a4>
   17aa4:	mov	r0, r4
   17aa8:	bl	112d8 <fprintf@plt>
   17aac:	b	179a0 <argp_parse@@Base+0xe78>
   17ab0:	ldr	r3, [r5, #4]
   17ab4:	ldr	r2, [r5]
   17ab8:	ldr	r1, [r5, #28]
   17abc:	str	r1, [sp, #20]
   17ac0:	ldr	r1, [r5, #24]
   17ac4:	str	r1, [sp, #16]
   17ac8:	ldr	r1, [r5, #20]
   17acc:	str	r1, [sp, #12]
   17ad0:	ldr	r1, [r5, #16]
   17ad4:	str	r1, [sp, #8]
   17ad8:	ldr	r1, [r5, #12]
   17adc:	str	r1, [sp, #4]
   17ae0:	ldr	r1, [r5, #8]
   17ae4:	str	r1, [sp]
   17ae8:	ldr	r1, [pc, #224]	; 17bd0 <argp_parse@@Base+0x10a8>
   17aec:	mov	r0, r4
   17af0:	bl	112d8 <fprintf@plt>
   17af4:	b	179a0 <argp_parse@@Base+0xe78>
   17af8:	ldr	r3, [r5, #4]
   17afc:	ldr	r2, [r5]
   17b00:	ldr	r1, [r5, #32]
   17b04:	str	r1, [sp, #24]
   17b08:	ldr	r1, [r5, #28]
   17b0c:	str	r1, [sp, #20]
   17b10:	ldr	r1, [r5, #24]
   17b14:	str	r1, [sp, #16]
   17b18:	ldr	r1, [r5, #20]
   17b1c:	str	r1, [sp, #12]
   17b20:	ldr	r1, [r5, #16]
   17b24:	str	r1, [sp, #8]
   17b28:	ldr	r1, [r5, #12]
   17b2c:	str	r1, [sp, #4]
   17b30:	ldr	r1, [r5, #8]
   17b34:	str	r1, [sp]
   17b38:	ldr	r1, [pc, #148]	; 17bd4 <argp_parse@@Base+0x10ac>
   17b3c:	mov	r0, r4
   17b40:	bl	112d8 <fprintf@plt>
   17b44:	b	179a0 <argp_parse@@Base+0xe78>
   17b48:	ldr	r3, [r5, #4]
   17b4c:	ldr	r2, [r5]
   17b50:	ldr	r1, [r5, #32]
   17b54:	str	r1, [sp, #24]
   17b58:	ldr	r1, [r5, #28]
   17b5c:	str	r1, [sp, #20]
   17b60:	ldr	r1, [r5, #24]
   17b64:	str	r1, [sp, #16]
   17b68:	ldr	r1, [r5, #20]
   17b6c:	str	r1, [sp, #12]
   17b70:	ldr	r1, [r5, #16]
   17b74:	str	r1, [sp, #8]
   17b78:	ldr	r1, [r5, #12]
   17b7c:	str	r1, [sp, #4]
   17b80:	ldr	r1, [r5, #8]
   17b84:	str	r1, [sp]
   17b88:	ldr	r1, [pc, #72]	; 17bd8 <argp_parse@@Base+0x10b0>
   17b8c:	mov	r0, r4
   17b90:	bl	112d8 <fprintf@plt>
   17b94:	b	179a0 <argp_parse@@Base+0xe78>
   17b98:	andeq	sl, r1, r0, ror fp
   17b9c:	andeq	r0, r0, r6, ror #15
   17ba0:	andeq	sl, r1, ip, ror fp
   17ba4:	andeq	sl, r1, ip, ror lr
   17ba8:	andeq	sl, r1, r0, lsl #23
   17bac:	andeq	sl, r1, r4, lsr #23
   17bb0:	andeq	r9, r1, r4, lsl #30
   17bb4:	andeq	sl, r1, r0, asr ip
   17bb8:	andeq	sl, r1, r0, ror #24
   17bbc:	andeq	sl, r1, r8, ror ip
   17bc0:	muleq	r1, r4, ip
   17bc4:			; <UNDEFINED> instruction: 0x0001acb4
   17bc8:	ldrdeq	sl, [r1], -r8
   17bcc:	andeq	sl, r1, r0, lsl #26
   17bd0:	andeq	sl, r1, ip, lsr #26
   17bd4:	andeq	sl, r1, ip, asr sp
   17bd8:	muleq	r1, r0, sp
   17bdc:	push	{r4, r5, lr}
   17be0:	sub	sp, sp, #12
   17be4:	ldr	r5, [sp, #24]
   17be8:	ldr	ip, [r5]
   17bec:	cmp	ip, #0
   17bf0:	beq	17c20 <argp_parse@@Base+0x10f8>
   17bf4:	mov	lr, r5
   17bf8:	mov	ip, #0
   17bfc:	add	ip, ip, #1
   17c00:	ldr	r4, [lr, #4]!
   17c04:	cmp	r4, #0
   17c08:	bne	17bfc <argp_parse@@Base+0x10d4>
   17c0c:	str	ip, [sp, #4]
   17c10:	str	r5, [sp]
   17c14:	bl	178e4 <argp_parse@@Base+0xdbc>
   17c18:	add	sp, sp, #12
   17c1c:	pop	{r4, r5, pc}
   17c20:	mov	ip, #0
   17c24:	b	17c0c <argp_parse@@Base+0x10e4>
   17c28:	push	{r4, r5, lr}
   17c2c:	sub	sp, sp, #52	; 0x34
   17c30:	ldr	r4, [sp, #64]	; 0x40
   17c34:	sub	r4, r4, #4
   17c38:	add	r5, sp, #4
   17c3c:	mov	ip, #0
   17c40:	ldr	lr, [r4, #4]!
   17c44:	str	lr, [r5, #4]!
   17c48:	cmp	lr, #0
   17c4c:	beq	17c5c <argp_parse@@Base+0x1134>
   17c50:	add	ip, ip, #1
   17c54:	cmp	ip, #10
   17c58:	bne	17c40 <argp_parse@@Base+0x1118>
   17c5c:	str	ip, [sp, #4]
   17c60:	add	ip, sp, #8
   17c64:	str	ip, [sp]
   17c68:	bl	178e4 <argp_parse@@Base+0xdbc>
   17c6c:	add	sp, sp, #52	; 0x34
   17c70:	pop	{r4, r5, pc}
   17c74:	push	{r3}		; (str r3, [sp, #-4]!)
   17c78:	push	{lr}		; (str lr, [sp, #-4]!)
   17c7c:	sub	sp, sp, #16
   17c80:	add	r3, sp, #24
   17c84:	str	r3, [sp, #12]
   17c88:	str	r3, [sp]
   17c8c:	ldr	r3, [sp, #20]
   17c90:	bl	17c28 <argp_parse@@Base+0x1100>
   17c94:	add	sp, sp, #16
   17c98:	pop	{lr}		; (ldr lr, [sp], #4)
   17c9c:	add	sp, sp, #4
   17ca0:	bx	lr
   17ca4:	push	{r4, lr}
   17ca8:	ldr	r3, [pc, #52]	; 17ce4 <argp_parse@@Base+0x11bc>
   17cac:	ldr	r1, [r3]
   17cb0:	mov	r0, #10
   17cb4:	bl	11380 <fputc@plt>
   17cb8:	ldr	r1, [pc, #40]	; 17ce8 <argp_parse@@Base+0x11c0>
   17cbc:	ldr	r0, [pc, #40]	; 17cec <argp_parse@@Base+0x11c4>
   17cc0:	bl	11128 <printf@plt>
   17cc4:	ldr	r2, [pc, #36]	; 17cf0 <argp_parse@@Base+0x11c8>
   17cc8:	ldr	r1, [pc, #36]	; 17cf4 <argp_parse@@Base+0x11cc>
   17ccc:	ldr	r0, [pc, #36]	; 17cf8 <argp_parse@@Base+0x11d0>
   17cd0:	bl	11128 <printf@plt>
   17cd4:	ldr	r1, [pc, #32]	; 17cfc <argp_parse@@Base+0x11d4>
   17cd8:	ldr	r0, [pc, #32]	; 17d00 <argp_parse@@Base+0x11d8>
   17cdc:	bl	11128 <printf@plt>
   17ce0:	pop	{r4, pc}
   17ce4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   17ce8:	andeq	sl, r1, ip, asr #27
   17cec:	andeq	sl, r1, r4, ror #27
   17cf0:	strdeq	sl, [r1], -r8
   17cf4:	andeq	sl, r1, ip, lsl fp
   17cf8:	andeq	sl, r1, r0, lsr #28
   17cfc:	andeq	sl, r1, r4, lsr lr
   17d00:	andeq	sl, r1, r4, asr lr
   17d04:	push	{r4, lr}
   17d08:	bl	18324 <argp_parse@@Base+0x17fc>
   17d0c:	cmp	r0, #0
   17d10:	popne	{r4, pc}
   17d14:	bl	182a8 <argp_parse@@Base+0x1780>
   17d18:	push	{r4, lr}
   17d1c:	bl	18324 <argp_parse@@Base+0x17fc>
   17d20:	cmp	r0, #0
   17d24:	popne	{r4, pc}
   17d28:	bl	182a8 <argp_parse@@Base+0x1780>
   17d2c:	push	{r4, lr}
   17d30:	bl	17d04 <argp_parse@@Base+0x11dc>
   17d34:	pop	{r4, pc}
   17d38:	push	{r4, r5, r6, lr}
   17d3c:	mov	r5, r0
   17d40:	mov	r4, r1
   17d44:	bl	18354 <argp_parse@@Base+0x182c>
   17d48:	cmp	r0, #0
   17d4c:	popne	{r4, r5, r6, pc}
   17d50:	adds	r4, r4, #0
   17d54:	movne	r4, #1
   17d58:	cmp	r5, #0
   17d5c:	orreq	r4, r4, #1
   17d60:	cmp	r4, #0
   17d64:	popeq	{r4, r5, r6, pc}
   17d68:	bl	182a8 <argp_parse@@Base+0x1780>
   17d6c:	push	{r4, lr}
   17d70:	cmp	r1, #0
   17d74:	orreq	r1, r1, #1
   17d78:	bl	18354 <argp_parse@@Base+0x182c>
   17d7c:	cmp	r0, #0
   17d80:	popne	{r4, pc}
   17d84:	bl	182a8 <argp_parse@@Base+0x1780>
   17d88:	push	{r4, r5, r6, lr}
   17d8c:	mov	r6, r0
   17d90:	mov	r5, r1
   17d94:	mov	r4, r2
   17d98:	bl	19700 <argp_parse@@Base+0x2bd8>
   17d9c:	cmp	r0, #0
   17da0:	popne	{r4, r5, r6, pc}
   17da4:	cmp	r6, #0
   17da8:	beq	17db8 <argp_parse@@Base+0x1290>
   17dac:	cmp	r5, #0
   17db0:	cmpne	r4, #0
   17db4:	popeq	{r4, r5, r6, pc}
   17db8:	bl	182a8 <argp_parse@@Base+0x1780>
   17dbc:	push	{r4, lr}
   17dc0:	bl	17d88 <argp_parse@@Base+0x1260>
   17dc4:	pop	{r4, pc}
   17dc8:	push	{r4, lr}
   17dcc:	mov	ip, r1
   17dd0:	mov	r3, r2
   17dd4:	cmp	r2, #0
   17dd8:	cmpne	r1, #0
   17ddc:	moveq	r3, #1
   17de0:	moveq	ip, r3
   17de4:	mov	r2, r3
   17de8:	mov	r1, ip
   17dec:	bl	19700 <argp_parse@@Base+0x2bd8>
   17df0:	cmp	r0, #0
   17df4:	popne	{r4, pc}
   17df8:	bl	182a8 <argp_parse@@Base+0x1780>
   17dfc:	push	{r4, lr}
   17e00:	mov	r2, r1
   17e04:	mov	r1, r0
   17e08:	mov	r0, #0
   17e0c:	bl	17d88 <argp_parse@@Base+0x1260>
   17e10:	pop	{r4, pc}
   17e14:	push	{r4, lr}
   17e18:	mov	r2, r1
   17e1c:	mov	r1, r0
   17e20:	mov	r0, #0
   17e24:	bl	17dc8 <argp_parse@@Base+0x12a0>
   17e28:	pop	{r4, pc}
   17e2c:	push	{r4, r5, r6, r7, r8, lr}
   17e30:	mov	r5, r1
   17e34:	mov	r6, r2
   17e38:	ldr	r4, [r1]
   17e3c:	subs	r7, r0, #0
   17e40:	beq	17e5c <argp_parse@@Base+0x1334>
   17e44:	lsr	r2, r4, #1
   17e48:	add	r3, r2, #1
   17e4c:	mvn	r3, r3
   17e50:	cmp	r4, r3
   17e54:	bls	17e80 <argp_parse@@Base+0x1358>
   17e58:	bl	182a8 <argp_parse@@Base+0x1780>
   17e5c:	cmp	r4, #0
   17e60:	bne	17e88 <argp_parse@@Base+0x1360>
   17e64:	mov	r1, r2
   17e68:	mov	r0, #64	; 0x40
   17e6c:	bl	1974c <argp_parse@@Base+0x2c24>
   17e70:	cmp	r0, #0
   17e74:	movne	r4, r0
   17e78:	addeq	r4, r0, #1
   17e7c:	b	17e88 <argp_parse@@Base+0x1360>
   17e80:	add	r4, r4, #1
   17e84:	add	r4, r4, r2
   17e88:	mov	r2, r6
   17e8c:	mov	r1, r4
   17e90:	mov	r0, r7
   17e94:	bl	17d88 <argp_parse@@Base+0x1260>
   17e98:	str	r4, [r5]
   17e9c:	pop	{r4, r5, r6, r7, r8, pc}
   17ea0:	push	{r4, lr}
   17ea4:	mov	r2, #1
   17ea8:	bl	17e2c <argp_parse@@Base+0x1304>
   17eac:	pop	{r4, pc}
   17eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eb4:	sub	sp, sp, #12
   17eb8:	mov	fp, r0
   17ebc:	mov	sl, r1
   17ec0:	mov	r9, r2
   17ec4:	mov	r7, r3
   17ec8:	ldr	r6, [sp, #48]	; 0x30
   17ecc:	ldr	r5, [r1]
   17ed0:	asrs	r4, r5, #1
   17ed4:	bmi	18030 <argp_parse@@Base+0x1508>
   17ed8:	cmp	r5, #0
   17edc:	blt	18044 <argp_parse@@Base+0x151c>
   17ee0:	mvn	r3, #-2147483648	; 0x80000000
   17ee4:	sub	r3, r3, r4
   17ee8:	cmp	r5, r3
   17eec:	movle	r3, #0
   17ef0:	movgt	r3, #1
   17ef4:	cmp	r3, #0
   17ef8:	addeq	r4, r4, r5
   17efc:	mvnne	r4, #-2147483648	; 0x80000000
   17f00:	mvn	r8, r7
   17f04:	lsr	r8, r8, #31
   17f08:	cmp	r7, r4
   17f0c:	movge	r3, #0
   17f10:	andlt	r3, r8, #1
   17f14:	cmp	r3, #0
   17f18:	movne	r4, r7
   17f1c:	cmp	r6, #0
   17f20:	blt	18058 <argp_parse@@Base+0x1530>
   17f24:	cmp	r6, #0
   17f28:	beq	18104 <argp_parse@@Base+0x15dc>
   17f2c:	cmp	r4, #0
   17f30:	blt	180b4 <argp_parse@@Base+0x158c>
   17f34:	mov	r1, r6
   17f38:	mvn	r0, #-2147483648	; 0x80000000
   17f3c:	bl	19958 <argp_parse@@Base+0x2e30>
   17f40:	cmp	r0, r4
   17f44:	movge	r0, #0
   17f48:	movlt	r0, #1
   17f4c:	cmp	r0, #0
   17f50:	mvnne	r3, #-2147483648	; 0x80000000
   17f54:	strne	r3, [sp, #4]
   17f58:	beq	180ec <argp_parse@@Base+0x15c4>
   17f5c:	mov	r1, r6
   17f60:	ldr	r0, [sp, #4]
   17f64:	bl	19958 <argp_parse@@Base+0x2e30>
   17f68:	mov	r4, r0
   17f6c:	mov	r1, r6
   17f70:	ldr	r0, [sp, #4]
   17f74:	bl	19b78 <argp_parse@@Base+0x3050>
   17f78:	ldr	r3, [sp, #4]
   17f7c:	sub	r1, r3, r1
   17f80:	cmp	fp, #0
   17f84:	moveq	r3, #0
   17f88:	streq	r3, [sl]
   17f8c:	sub	r3, r4, r5
   17f90:	cmp	r3, r9
   17f94:	bge	1801c <argp_parse@@Base+0x14f4>
   17f98:	cmp	r9, #0
   17f9c:	blt	18110 <argp_parse@@Base+0x15e8>
   17fa0:	cmp	r5, #0
   17fa4:	blt	18124 <argp_parse@@Base+0x15fc>
   17fa8:	mvn	r3, #-2147483648	; 0x80000000
   17fac:	sub	r3, r3, r9
   17fb0:	cmp	r5, r3
   17fb4:	movle	r3, #0
   17fb8:	movgt	r3, #1
   17fbc:	cmp	r3, #0
   17fc0:	bne	181cc <argp_parse@@Base+0x16a4>
   17fc4:	add	r5, r5, r9
   17fc8:	mov	r4, r5
   17fcc:	cmp	r7, r5
   17fd0:	movge	r7, #0
   17fd4:	andlt	r7, r8, #1
   17fd8:	cmp	r7, #0
   17fdc:	bne	181cc <argp_parse@@Base+0x16a4>
   17fe0:	cmp	r6, #0
   17fe4:	blt	18138 <argp_parse@@Base+0x1610>
   17fe8:	cmp	r6, #0
   17fec:	beq	18018 <argp_parse@@Base+0x14f0>
   17ff0:	cmp	r5, #0
   17ff4:	blt	18194 <argp_parse@@Base+0x166c>
   17ff8:	mov	r1, r6
   17ffc:	mvn	r0, #-2147483648	; 0x80000000
   18000:	bl	19958 <argp_parse@@Base+0x2e30>
   18004:	cmp	r5, r0
   18008:	movle	r0, #0
   1800c:	movgt	r0, #1
   18010:	cmp	r0, #0
   18014:	bne	181cc <argp_parse@@Base+0x16a4>
   18018:	mul	r1, r5, r6
   1801c:	mov	r0, fp
   18020:	bl	17d38 <argp_parse@@Base+0x1210>
   18024:	str	r4, [sl]
   18028:	add	sp, sp, #12
   1802c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18030:	rsb	r3, r4, #-2147483648	; 0x80000000
   18034:	cmp	r5, r3
   18038:	movge	r3, #0
   1803c:	movlt	r3, #1
   18040:	b	17ef4 <argp_parse@@Base+0x13cc>
   18044:	rsb	r3, r5, #-2147483648	; 0x80000000
   18048:	cmp	r4, r3
   1804c:	movge	r3, #0
   18050:	movlt	r3, #1
   18054:	b	17ef4 <argp_parse@@Base+0x13cc>
   18058:	cmp	r4, #0
   1805c:	blt	18084 <argp_parse@@Base+0x155c>
   18060:	cmn	r6, #1
   18064:	beq	180a0 <argp_parse@@Base+0x1578>
   18068:	mov	r1, r6
   1806c:	mov	r0, #-2147483648	; 0x80000000
   18070:	bl	19958 <argp_parse@@Base+0x2e30>
   18074:	cmp	r0, r4
   18078:	movge	r0, #0
   1807c:	movlt	r0, #1
   18080:	b	17f4c <argp_parse@@Base+0x1424>
   18084:	mov	r1, r6
   18088:	mvn	r0, #-2147483648	; 0x80000000
   1808c:	bl	19958 <argp_parse@@Base+0x2e30>
   18090:	cmp	r0, r4
   18094:	movle	r0, #0
   18098:	movgt	r0, #1
   1809c:	b	17f4c <argp_parse@@Base+0x1424>
   180a0:	add	r0, r4, #-2147483648	; 0x80000000
   180a4:	cmp	r0, #0
   180a8:	movle	r0, #0
   180ac:	movgt	r0, #1
   180b0:	b	17f4c <argp_parse@@Base+0x1424>
   180b4:	cmn	r4, #1
   180b8:	beq	180d8 <argp_parse@@Base+0x15b0>
   180bc:	mov	r1, r4
   180c0:	mov	r0, #-2147483648	; 0x80000000
   180c4:	bl	19958 <argp_parse@@Base+0x2e30>
   180c8:	cmp	r6, r0
   180cc:	movle	r0, #0
   180d0:	movgt	r0, #1
   180d4:	b	17f4c <argp_parse@@Base+0x1424>
   180d8:	add	r0, r6, #-2147483648	; 0x80000000
   180dc:	cmp	r0, #0
   180e0:	movle	r0, #0
   180e4:	movgt	r0, #1
   180e8:	b	17f4c <argp_parse@@Base+0x1424>
   180ec:	mul	r1, r6, r4
   180f0:	cmp	r1, #63	; 0x3f
   180f4:	movle	r3, #64	; 0x40
   180f8:	strle	r3, [sp, #4]
   180fc:	bgt	17f80 <argp_parse@@Base+0x1458>
   18100:	b	17f5c <argp_parse@@Base+0x1434>
   18104:	mov	r3, #64	; 0x40
   18108:	str	r3, [sp, #4]
   1810c:	b	17f5c <argp_parse@@Base+0x1434>
   18110:	rsb	r3, r9, #-2147483648	; 0x80000000
   18114:	cmp	r5, r3
   18118:	movge	r3, #0
   1811c:	movlt	r3, #1
   18120:	b	17fbc <argp_parse@@Base+0x1494>
   18124:	rsb	r3, r5, #-2147483648	; 0x80000000
   18128:	cmp	r9, r3
   1812c:	movge	r3, #0
   18130:	movlt	r3, #1
   18134:	b	17fbc <argp_parse@@Base+0x1494>
   18138:	cmp	r5, #0
   1813c:	blt	18164 <argp_parse@@Base+0x163c>
   18140:	cmn	r6, #1
   18144:	beq	18180 <argp_parse@@Base+0x1658>
   18148:	mov	r1, r6
   1814c:	mov	r0, #-2147483648	; 0x80000000
   18150:	bl	19958 <argp_parse@@Base+0x2e30>
   18154:	cmp	r5, r0
   18158:	movle	r0, #0
   1815c:	movgt	r0, #1
   18160:	b	18010 <argp_parse@@Base+0x14e8>
   18164:	mov	r1, r6
   18168:	mvn	r0, #-2147483648	; 0x80000000
   1816c:	bl	19958 <argp_parse@@Base+0x2e30>
   18170:	cmp	r5, r0
   18174:	movge	r0, #0
   18178:	movlt	r0, #1
   1817c:	b	18010 <argp_parse@@Base+0x14e8>
   18180:	add	r0, r5, #-2147483648	; 0x80000000
   18184:	cmp	r0, #0
   18188:	movle	r0, #0
   1818c:	movgt	r0, #1
   18190:	b	18010 <argp_parse@@Base+0x14e8>
   18194:	cmn	r5, #1
   18198:	beq	181b8 <argp_parse@@Base+0x1690>
   1819c:	mov	r1, r5
   181a0:	mov	r0, #-2147483648	; 0x80000000
   181a4:	bl	19958 <argp_parse@@Base+0x2e30>
   181a8:	cmp	r6, r0
   181ac:	movle	r0, #0
   181b0:	movgt	r0, #1
   181b4:	b	18010 <argp_parse@@Base+0x14e8>
   181b8:	add	r0, r6, #-2147483648	; 0x80000000
   181bc:	cmp	r0, #0
   181c0:	movle	r0, #0
   181c4:	movgt	r0, #1
   181c8:	b	18010 <argp_parse@@Base+0x14e8>
   181cc:	bl	182a8 <argp_parse@@Base+0x1780>
   181d0:	push	{r4, lr}
   181d4:	bl	182d4 <argp_parse@@Base+0x17ac>
   181d8:	cmp	r0, #0
   181dc:	popne	{r4, pc}
   181e0:	bl	182a8 <argp_parse@@Base+0x1780>
   181e4:	push	{r4, lr}
   181e8:	mov	r1, #1
   181ec:	bl	181d0 <argp_parse@@Base+0x16a8>
   181f0:	pop	{r4, pc}
   181f4:	push	{r4, lr}
   181f8:	bl	182d4 <argp_parse@@Base+0x17ac>
   181fc:	cmp	r0, #0
   18200:	popne	{r4, pc}
   18204:	bl	182a8 <argp_parse@@Base+0x1780>
   18208:	push	{r4, lr}
   1820c:	mov	r1, #1
   18210:	bl	181f4 <argp_parse@@Base+0x16cc>
   18214:	pop	{r4, pc}
   18218:	push	{r4, r5, r6, lr}
   1821c:	mov	r5, r0
   18220:	mov	r4, r1
   18224:	mov	r0, r1
   18228:	bl	17d04 <argp_parse@@Base+0x11dc>
   1822c:	mov	r2, r4
   18230:	mov	r1, r5
   18234:	bl	11188 <memcpy@plt>
   18238:	pop	{r4, r5, r6, pc}
   1823c:	push	{r4, r5, r6, lr}
   18240:	mov	r5, r0
   18244:	mov	r4, r1
   18248:	mov	r0, r1
   1824c:	bl	17d18 <argp_parse@@Base+0x11f0>
   18250:	mov	r2, r4
   18254:	mov	r1, r5
   18258:	bl	11188 <memcpy@plt>
   1825c:	pop	{r4, r5, r6, pc}
   18260:	push	{r4, r5, r6, lr}
   18264:	mov	r5, r0
   18268:	mov	r4, r1
   1826c:	add	r0, r1, #1
   18270:	bl	17d18 <argp_parse@@Base+0x11f0>
   18274:	mov	r2, #0
   18278:	strb	r2, [r0, r4]
   1827c:	mov	r2, r4
   18280:	mov	r1, r5
   18284:	bl	11188 <memcpy@plt>
   18288:	pop	{r4, r5, r6, pc}
   1828c:	push	{r4, lr}
   18290:	mov	r4, r0
   18294:	bl	112c0 <strlen@plt>
   18298:	add	r1, r0, #1
   1829c:	mov	r0, r4
   182a0:	bl	18218 <argp_parse@@Base+0x16f0>
   182a4:	pop	{r4, pc}
   182a8:	push	{r4, lr}
   182ac:	ldr	r3, [pc, #20]	; 182c8 <argp_parse@@Base+0x17a0>
   182b0:	ldr	r0, [r3]
   182b4:	ldr	r3, [pc, #16]	; 182cc <argp_parse@@Base+0x17a4>
   182b8:	ldr	r2, [pc, #16]	; 182d0 <argp_parse@@Base+0x17a8>
   182bc:	mov	r1, #0
   182c0:	bl	11224 <error@plt>
   182c4:	bl	1141c <abort@plt>
   182c8:	andeq	ip, r2, r0, asr #7
   182cc:	andeq	sl, r1, ip, lsr #29
   182d0:	ldrdeq	r9, [r1], -r0
   182d4:	push	{r4, lr}
   182d8:	mov	r2, r0
   182dc:	mov	r3, r1
   182e0:	cmp	r1, #0
   182e4:	cmpne	r0, #0
   182e8:	moveq	r3, #1
   182ec:	moveq	r2, r3
   182f0:	umull	r0, r1, r2, r3
   182f4:	cmp	r0, #0
   182f8:	cmpge	r1, #0
   182fc:	bne	18310 <argp_parse@@Base+0x17e8>
   18300:	mov	r1, r3
   18304:	mov	r0, r2
   18308:	bl	110d4 <calloc@plt>
   1830c:	pop	{r4, pc}
   18310:	bl	112e4 <__errno_location@plt>
   18314:	mov	r3, #12
   18318:	str	r3, [r0]
   1831c:	mov	r0, #0
   18320:	pop	{r4, pc}
   18324:	push	{r4, lr}
   18328:	cmp	r0, #0
   1832c:	moveq	r0, #1
   18330:	cmp	r0, #0
   18334:	blt	18340 <argp_parse@@Base+0x1818>
   18338:	bl	11248 <malloc@plt>
   1833c:	pop	{r4, pc}
   18340:	bl	112e4 <__errno_location@plt>
   18344:	mov	r3, #12
   18348:	str	r3, [r0]
   1834c:	mov	r0, #0
   18350:	pop	{r4, pc}
   18354:	push	{r4, lr}
   18358:	cmp	r0, #0
   1835c:	beq	18378 <argp_parse@@Base+0x1850>
   18360:	cmp	r1, #0
   18364:	beq	18384 <argp_parse@@Base+0x185c>
   18368:	cmp	r1, #0
   1836c:	blt	18390 <argp_parse@@Base+0x1868>
   18370:	bl	111e8 <realloc@plt>
   18374:	pop	{r4, pc}
   18378:	mov	r0, r1
   1837c:	bl	18324 <argp_parse@@Base+0x17fc>
   18380:	pop	{r4, pc}
   18384:	bl	1771c <argp_parse@@Base+0xbf4>
   18388:	mov	r0, #0
   1838c:	pop	{r4, pc}
   18390:	bl	112e4 <__errno_location@plt>
   18394:	mov	r3, #12
   18398:	str	r3, [r0]
   1839c:	mov	r0, #0
   183a0:	pop	{r4, pc}
   183a4:	push	{r4, r5, r6, r7, r8, lr}
   183a8:	mov	r8, r0
   183ac:	mov	r7, r1
   183b0:	mov	r6, r2
   183b4:	mov	r5, r3
   183b8:	mov	r0, #36	; 0x24
   183bc:	bl	18324 <argp_parse@@Base+0x17fc>
   183c0:	subs	r4, r0, #0
   183c4:	beq	18404 <argp_parse@@Base+0x18dc>
   183c8:	str	r8, [r4]
   183cc:	str	r7, [r4, #4]
   183d0:	str	r6, [r4, #8]
   183d4:	str	r5, [r4, #12]
   183d8:	mov	r3, #0
   183dc:	str	r3, [r4, #20]
   183e0:	str	r3, [r4, #16]
   183e4:	mov	r0, #200	; 0xc8
   183e8:	bl	18324 <argp_parse@@Base+0x17fc>
   183ec:	str	r0, [r4, #24]
   183f0:	cmp	r0, #0
   183f4:	strne	r0, [r4, #28]
   183f8:	addne	r0, r0, #200	; 0xc8
   183fc:	strne	r0, [r4, #32]
   18400:	beq	1840c <argp_parse@@Base+0x18e4>
   18404:	mov	r0, r4
   18408:	pop	{r4, r5, r6, r7, r8, pc}
   1840c:	mov	r0, r4
   18410:	bl	1771c <argp_parse@@Base+0xbf4>
   18414:	mov	r4, #0
   18418:	b	18404 <argp_parse@@Base+0x18dc>
   1841c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18420:	sub	sp, sp, #20
   18424:	mov	r4, r0
   18428:	ldr	r2, [r0, #24]
   1842c:	ldr	r3, [r0, #16]
   18430:	add	r9, r2, r3
   18434:	mov	sl, #32
   18438:	b	184e4 <argp_parse@@Base+0x19bc>
   1843c:	add	r5, r5, #1
   18440:	cmp	r6, r5
   18444:	beq	18474 <argp_parse@@Base+0x194c>
   18448:	ldr	r0, [r4]
   1844c:	ldr	r3, [r0, #20]
   18450:	ldr	r2, [r0, #24]
   18454:	cmp	r3, r2
   18458:	addcc	r2, r3, #1
   1845c:	strcc	r2, [r0, #20]
   18460:	strbcc	sl, [r3]
   18464:	bcc	1843c <argp_parse@@Base+0x1914>
   18468:	mov	r1, sl
   1846c:	bl	11344 <__overflow@plt>
   18470:	b	1843c <argp_parse@@Base+0x1914>
   18474:	str	r6, [r4, #20]
   18478:	ldr	fp, [r4, #28]
   1847c:	str	fp, [sp, #8]
   18480:	str	r9, [sp, #4]
   18484:	sub	r3, fp, r9
   18488:	str	r3, [sp]
   1848c:	mov	r2, r3
   18490:	mov	r1, #10
   18494:	mov	r0, r9
   18498:	bl	1132c <memchr@plt>
   1849c:	mov	r7, r0
   184a0:	ldr	r3, [r4, #20]
   184a4:	cmp	r3, #0
   184a8:	movlt	r3, #0
   184ac:	strlt	r3, [r4, #20]
   184b0:	cmp	r7, #0
   184b4:	beq	18554 <argp_parse@@Base+0x1a2c>
   184b8:	ldr	r0, [r4, #20]
   184bc:	mov	r5, r7
   184c0:	ldr	r8, [r4, #8]
   184c4:	ldr	r3, [sp, #4]
   184c8:	sub	r3, r7, r3
   184cc:	add	r3, r3, r0
   184d0:	cmp	r3, r8
   184d4:	bge	185a4 <argp_parse@@Base+0x1a7c>
   184d8:	mov	r3, #0
   184dc:	str	r3, [r4, #20]
   184e0:	add	r9, r7, #1
   184e4:	ldr	fp, [r4, #28]
   184e8:	cmp	r9, fp
   184ec:	bcs	1858c <argp_parse@@Base+0x1a64>
   184f0:	ldr	r3, [r4, #20]
   184f4:	cmp	r3, #0
   184f8:	bne	18478 <argp_parse@@Base+0x1950>
   184fc:	ldr	r6, [r4, #4]
   18500:	cmp	r6, #0
   18504:	beq	18950 <argp_parse@@Base+0x1e28>
   18508:	add	r3, fp, r6
   1850c:	ldr	r2, [r4, #32]
   18510:	cmp	r2, r3
   18514:	movls	r5, #0
   18518:	bls	18448 <argp_parse@@Base+0x1920>
   1851c:	add	r5, r9, r6
   18520:	sub	r2, fp, r9
   18524:	mov	r1, r9
   18528:	mov	r0, r5
   1852c:	bl	1114c <memmove@plt>
   18530:	ldr	r3, [r4, #28]
   18534:	add	r3, r3, r6
   18538:	str	r3, [r4, #28]
   1853c:	mov	r2, r6
   18540:	mov	r1, sl
   18544:	mov	r0, r9
   18548:	bl	11314 <memset@plt>
   1854c:	mov	r9, r5
   18550:	b	18474 <argp_parse@@Base+0x194c>
   18554:	ldr	r3, [r4, #20]
   18558:	ldr	r2, [sp]
   1855c:	add	r3, r2, r3
   18560:	ldr	r6, [r4, #8]
   18564:	cmp	r3, r6
   18568:	bcc	18588 <argp_parse@@Base+0x1a60>
   1856c:	sub	r6, r6, #1
   18570:	ldr	r3, [r4, #12]
   18574:	str	r3, [sp, #12]
   18578:	cmp	r3, #0
   1857c:	blt	18698 <argp_parse@@Base+0x1b70>
   18580:	mov	r7, fp
   18584:	b	185b8 <argp_parse@@Base+0x1a90>
   18588:	str	r3, [r4, #20]
   1858c:	ldr	r3, [r4, #28]
   18590:	ldr	r2, [r4, #24]
   18594:	sub	r3, r3, r2
   18598:	str	r3, [r4, #16]
   1859c:	add	sp, sp, #20
   185a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185a4:	sub	r6, r8, #1
   185a8:	ldr	r3, [r4, #12]
   185ac:	str	r3, [sp, #12]
   185b0:	cmp	r3, #0
   185b4:	blt	1864c <argp_parse@@Base+0x1b24>
   185b8:	ldr	r5, [r4, #20]
   185bc:	rsb	r5, r5, #1
   185c0:	add	r5, r5, r6
   185c4:	adds	r5, r9, r5
   185c8:	bcs	18978 <argp_parse@@Base+0x1e50>
   185cc:	bl	11290 <__ctype_b_loc@plt>
   185d0:	ldr	r0, [r0]
   185d4:	mov	r3, r5
   185d8:	mov	r1, r3
   185dc:	sub	r3, r3, #1
   185e0:	ldrb	r2, [r1]
   185e4:	lsl	r2, r2, #1
   185e8:	ldrh	r2, [r0, r2]
   185ec:	tst	r2, #1
   185f0:	bne	186b8 <argp_parse@@Base+0x1b90>
   185f4:	mov	r1, r3
   185f8:	cmp	r3, r9
   185fc:	bcs	185d8 <argp_parse@@Base+0x1ab0>
   18600:	add	r6, r1, #1
   18604:	cmp	r6, r9
   18608:	bhi	186f4 <argp_parse@@Base+0x1bcc>
   1860c:	cmp	r5, r7
   18610:	bcs	187a4 <argp_parse@@Base+0x1c7c>
   18614:	add	r6, r5, #1
   18618:	mov	r8, r7
   1861c:	mov	r5, r6
   18620:	cmp	r8, r6
   18624:	beq	187a4 <argp_parse@@Base+0x1c7c>
   18628:	bl	11290 <__ctype_b_loc@plt>
   1862c:	add	r6, r6, #1
   18630:	ldrb	r3, [r5]
   18634:	ldr	r2, [r0]
   18638:	lsl	r3, r3, #1
   1863c:	ldrh	r3, [r2, r3]
   18640:	tst	r3, #1
   18644:	beq	1861c <argp_parse@@Base+0x1af4>
   18648:	b	187b8 <argp_parse@@Base+0x1c90>
   1864c:	cmp	fp, r7
   18650:	bls	18698 <argp_parse@@Base+0x1b70>
   18654:	sub	r0, r6, r0
   18658:	ldr	r3, [sp, #8]
   1865c:	sub	r2, r3, r7
   18660:	mov	r1, r7
   18664:	add	r0, r9, r0
   18668:	bl	1114c <memmove@plt>
   1866c:	ldr	r3, [r4, #20]
   18670:	sub	r6, r6, r3
   18674:	add	r6, r9, r6
   18678:	sub	r5, r6, r7
   1867c:	ldr	r3, [r4, #28]
   18680:	sub	r5, r3, r5
   18684:	str	r5, [r4, #28]
   18688:	mov	r3, #0
   1868c:	str	r3, [r4, #20]
   18690:	add	r9, r9, r8
   18694:	b	184e4 <argp_parse@@Base+0x19bc>
   18698:	ldr	r3, [r4, #20]
   1869c:	ldr	r2, [sp]
   186a0:	add	r3, r2, r3
   186a4:	str	r3, [r4, #20]
   186a8:	sub	r3, r6, r3
   186ac:	add	r3, fp, r3
   186b0:	str	r3, [r4, #28]
   186b4:	b	1858c <argp_parse@@Base+0x1a64>
   186b8:	add	r6, r1, #1
   186bc:	cmp	r6, r9
   186c0:	bls	1860c <argp_parse@@Base+0x1ae4>
   186c4:	cmp	r1, r9
   186c8:	bcc	186f4 <argp_parse@@Base+0x1bcc>
   186cc:	sub	ip, r9, #1
   186d0:	mov	r1, r3
   186d4:	cmp	ip, r3
   186d8:	beq	186f4 <argp_parse@@Base+0x1bcc>
   186dc:	sub	r3, r3, #1
   186e0:	ldrb	r2, [r1]
   186e4:	lsl	r2, r2, #1
   186e8:	ldrh	r2, [r0, r2]
   186ec:	tst	r2, #1
   186f0:	bne	186d0 <argp_parse@@Base+0x1ba8>
   186f4:	add	r5, r1, #1
   186f8:	ldr	r3, [sp]
   186fc:	add	r3, r3, #1
   18700:	add	r3, r9, r3
   18704:	cmp	r6, r3
   18708:	beq	187dc <argp_parse@@Base+0x1cb4>
   1870c:	add	r3, r5, #1
   18710:	sub	r3, r6, r3
   18714:	ldr	r2, [sp, #12]
   18718:	cmp	r3, r2
   1871c:	bge	187f4 <argp_parse@@Base+0x1ccc>
   18720:	cmp	r6, fp
   18724:	bcs	187f4 <argp_parse@@Base+0x1ccc>
   18728:	ldr	r3, [r4, #32]
   1872c:	ldr	r2, [sp, #8]
   18730:	sub	r3, r3, r2
   18734:	ldr	r2, [sp, #12]
   18738:	add	r2, r2, #1
   1873c:	cmp	r3, r2
   18740:	bgt	1883c <argp_parse@@Base+0x1d14>
   18744:	ldr	r0, [r4, #24]
   18748:	cmp	r5, r0
   1874c:	bls	18760 <argp_parse@@Base+0x1c38>
   18750:	ldr	r3, [r4]
   18754:	sub	r2, r5, r0
   18758:	mov	r1, #1
   1875c:	bl	111a0 <fwrite_unlocked@plt>
   18760:	ldr	r0, [r4]
   18764:	ldr	r3, [r0, #20]
   18768:	ldr	r2, [r0, #24]
   1876c:	cmp	r3, r2
   18770:	addcc	r2, r3, #1
   18774:	strcc	r2, [r0, #20]
   18778:	movcc	r2, #10
   1877c:	strbcc	r2, [r3]
   18780:	bcs	18888 <argp_parse@@Base+0x1d60>
   18784:	ldr	r7, [r4, #24]
   18788:	ldr	r3, [sp, #4]
   1878c:	sub	r3, r3, r7
   18790:	ldr	r2, [sp]
   18794:	add	r3, r2, r3
   18798:	str	r3, [sp]
   1879c:	mov	r9, r7
   187a0:	b	18804 <argp_parse@@Base+0x1cdc>
   187a4:	cmp	r5, r7
   187a8:	moveq	r3, #0
   187ac:	streq	r3, [r4, #20]
   187b0:	addeq	r9, r7, #1
   187b4:	beq	184e4 <argp_parse@@Base+0x19bc>
   187b8:	bl	11290 <__ctype_b_loc@plt>
   187bc:	ldr	r2, [r0]
   187c0:	mov	r6, r5
   187c4:	ldrb	r3, [r6, #1]!
   187c8:	lsl	r3, r3, #1
   187cc:	ldrh	r3, [r2, r3]
   187d0:	tst	r3, #1
   187d4:	bne	187c4 <argp_parse@@Base+0x1c9c>
   187d8:	b	186f8 <argp_parse@@Base+0x1bd0>
   187dc:	ldr	r3, [r4, #32]
   187e0:	sub	r3, r3, r5
   187e4:	ldr	r2, [sp, #12]
   187e8:	add	r2, r2, #1
   187ec:	cmp	r3, r2
   187f0:	blt	18720 <argp_parse@@Base+0x1bf8>
   187f4:	mov	r3, #10
   187f8:	strb	r3, [r5]
   187fc:	mov	r7, r9
   18800:	add	r9, r5, #1
   18804:	mov	r8, r6
   18808:	ldr	r3, [r4, #12]
   1880c:	sub	r2, r6, r9
   18810:	cmp	r2, r3
   18814:	bge	188a4 <argp_parse@@Base+0x1d7c>
   18818:	ldr	r2, [sp]
   1881c:	add	r2, r2, #1
   18820:	add	r2, r7, r2
   18824:	cmp	r6, r2
   18828:	beq	18894 <argp_parse@@Base+0x1d6c>
   1882c:	cmp	r3, #0
   18830:	movgt	r5, #0
   18834:	bgt	18908 <argp_parse@@Base+0x1de0>
   18838:	b	188c8 <argp_parse@@Base+0x1da0>
   1883c:	ldr	r3, [sp, #8]
   18840:	sub	r7, r3, r6
   18844:	mov	r0, r2
   18848:	mov	r2, r7
   1884c:	mov	r1, r6
   18850:	add	r0, r5, r0
   18854:	bl	1114c <memmove@plt>
   18858:	ldr	r6, [r4, #12]
   1885c:	add	r6, r6, #1
   18860:	add	r6, r5, r6
   18864:	add	r7, r6, r7
   18868:	ldr	r3, [sp, #4]
   1886c:	sub	r3, r7, r3
   18870:	str	r3, [sp]
   18874:	mov	r3, #10
   18878:	strb	r3, [r5]
   1887c:	mov	r7, r9
   18880:	add	r9, r5, #1
   18884:	b	18804 <argp_parse@@Base+0x1cdc>
   18888:	mov	r1, #10
   1888c:	bl	11344 <__overflow@plt>
   18890:	b	18784 <argp_parse@@Base+0x1c5c>
   18894:	ldr	r2, [r4, #32]
   18898:	sub	r2, r2, r6
   1889c:	cmp	r3, r2
   188a0:	bgt	1882c <argp_parse@@Base+0x1d04>
   188a4:	cmp	r3, #0
   188a8:	ble	188c8 <argp_parse@@Base+0x1da0>
   188ac:	mov	r3, r9
   188b0:	strb	sl, [r3], #1
   188b4:	sub	r1, r3, r9
   188b8:	ldr	r2, [r4, #12]
   188bc:	cmp	r1, r2
   188c0:	blt	188b0 <argp_parse@@Base+0x1d88>
   188c4:	mov	r9, r3
   188c8:	cmp	r9, r6
   188cc:	bcc	18934 <argp_parse@@Base+0x1e0c>
   188d0:	sub	r7, r8, r7
   188d4:	ldr	r3, [sp]
   188d8:	sub	r7, r3, r7
   188dc:	add	r7, r9, r7
   188e0:	str	r7, [r4, #28]
   188e4:	ldr	r3, [r4, #12]
   188e8:	cmp	r3, #0
   188ec:	mvneq	r3, #0
   188f0:	str	r3, [r4, #20]
   188f4:	b	184e4 <argp_parse@@Base+0x19bc>
   188f8:	add	r5, r5, #1
   188fc:	ldr	r3, [r4, #12]
   18900:	cmp	r3, r5
   18904:	ble	188c8 <argp_parse@@Base+0x1da0>
   18908:	ldr	r0, [r4]
   1890c:	ldr	r3, [r0, #20]
   18910:	ldr	r2, [r0, #24]
   18914:	cmp	r3, r2
   18918:	addcc	r2, r3, #1
   1891c:	strcc	r2, [r0, #20]
   18920:	strbcc	sl, [r3]
   18924:	bcc	188f8 <argp_parse@@Base+0x1dd0>
   18928:	mov	r1, sl
   1892c:	bl	11344 <__overflow@plt>
   18930:	b	188f8 <argp_parse@@Base+0x1dd0>
   18934:	ldr	r3, [sp]
   18938:	add	r2, r7, r3
   1893c:	sub	r2, r2, r8
   18940:	mov	r1, r6
   18944:	mov	r0, r9
   18948:	bl	1114c <memmove@plt>
   1894c:	b	188d0 <argp_parse@@Base+0x1da8>
   18950:	str	fp, [sp, #8]
   18954:	str	r9, [sp, #4]
   18958:	sub	r3, fp, r9
   1895c:	str	r3, [sp]
   18960:	mov	r2, r3
   18964:	mov	r1, #10
   18968:	mov	r0, r9
   1896c:	bl	1132c <memchr@plt>
   18970:	mov	r7, r0
   18974:	b	184b0 <argp_parse@@Base+0x1988>
   18978:	mov	r1, r5
   1897c:	b	18600 <argp_parse@@Base+0x1ad8>
   18980:	push	{r4, lr}
   18984:	mov	r4, r0
   18988:	bl	1841c <argp_parse@@Base+0x18f4>
   1898c:	ldr	r2, [r4, #28]
   18990:	ldr	r0, [r4, #24]
   18994:	cmp	r2, r0
   18998:	bls	189ac <argp_parse@@Base+0x1e84>
   1899c:	ldr	r3, [r4]
   189a0:	sub	r2, r2, r0
   189a4:	mov	r1, #1
   189a8:	bl	111a0 <fwrite_unlocked@plt>
   189ac:	ldr	r0, [r4, #24]
   189b0:	bl	1771c <argp_parse@@Base+0xbf4>
   189b4:	mov	r0, r4
   189b8:	bl	1771c <argp_parse@@Base+0xbf4>
   189bc:	pop	{r4, pc}
   189c0:	ldr	r3, [r0, #32]
   189c4:	ldr	r2, [r0, #28]
   189c8:	sub	r3, r3, r2
   189cc:	cmp	r3, r1
   189d0:	bcc	189dc <argp_parse@@Base+0x1eb4>
   189d4:	mov	r0, #1
   189d8:	bx	lr
   189dc:	push	{r4, r5, r6, lr}
   189e0:	mov	r5, r1
   189e4:	mov	r4, r0
   189e8:	bl	1841c <argp_parse@@Base+0x18f4>
   189ec:	ldr	r0, [r4, #24]
   189f0:	ldr	r2, [r4, #28]
   189f4:	ldr	r3, [r4]
   189f8:	sub	r2, r2, r0
   189fc:	mov	r1, #1
   18a00:	bl	111a0 <fwrite_unlocked@plt>
   18a04:	ldr	r2, [r4, #28]
   18a08:	ldr	r3, [r4, #24]
   18a0c:	sub	r1, r2, r3
   18a10:	cmp	r0, r1
   18a14:	bne	18a58 <argp_parse@@Base+0x1f30>
   18a18:	str	r3, [r4, #28]
   18a1c:	mov	r2, #0
   18a20:	str	r2, [r4, #16]
   18a24:	ldr	r1, [r4, #32]
   18a28:	sub	r1, r1, r3
   18a2c:	cmp	r5, r1
   18a30:	bls	18a50 <argp_parse@@Base+0x1f28>
   18a34:	adds	r5, r5, r1
   18a38:	bcc	18a84 <argp_parse@@Base+0x1f5c>
   18a3c:	bl	112e4 <__errno_location@plt>
   18a40:	mov	r3, #12
   18a44:	str	r3, [r0]
   18a48:	mov	r0, #0
   18a4c:	pop	{r4, r5, r6, pc}
   18a50:	mov	r0, #1
   18a54:	pop	{r4, r5, r6, pc}
   18a58:	sub	r2, r2, r0
   18a5c:	str	r2, [r4, #28]
   18a60:	ldr	r1, [r4, #16]
   18a64:	sub	r1, r1, r0
   18a68:	str	r1, [r4, #16]
   18a6c:	sub	r2, r2, r3
   18a70:	add	r1, r3, r0
   18a74:	mov	r0, r3
   18a78:	bl	1114c <memmove@plt>
   18a7c:	mov	r0, #0
   18a80:	pop	{r4, r5, r6, pc}
   18a84:	mov	r1, r5
   18a88:	mov	r0, r3
   18a8c:	bl	18354 <argp_parse@@Base+0x182c>
   18a90:	cmp	r0, #0
   18a94:	beq	18a3c <argp_parse@@Base+0x1f14>
   18a98:	str	r0, [r4, #24]
   18a9c:	add	r5, r0, r5
   18aa0:	str	r5, [r4, #32]
   18aa4:	str	r0, [r4, #28]
   18aa8:	mov	r0, #1
   18aac:	pop	{r4, r5, r6, pc}
   18ab0:	push	{r1, r2, r3}
   18ab4:	push	{r4, r5, r6, r7, lr}
   18ab8:	sub	sp, sp, #8
   18abc:	mov	r5, r0
   18ac0:	ldr	r7, [sp, #28]
   18ac4:	mov	r1, #150	; 0x96
   18ac8:	add	r6, sp, #32
   18acc:	mov	r0, r5
   18ad0:	bl	189c0 <argp_parse@@Base+0x1e98>
   18ad4:	cmp	r0, #0
   18ad8:	beq	18b0c <argp_parse@@Base+0x1fe4>
   18adc:	str	r6, [sp, #4]
   18ae0:	ldr	r0, [r5, #28]
   18ae4:	ldr	r4, [r5, #32]
   18ae8:	sub	r4, r4, r0
   18aec:	mov	r3, r6
   18af0:	mov	r2, r7
   18af4:	mov	r1, r4
   18af8:	bl	113bc <vsnprintf@plt>
   18afc:	cmp	r4, r0
   18b00:	bhi	18b14 <argp_parse@@Base+0x1fec>
   18b04:	add	r1, r0, #1
   18b08:	b	18acc <argp_parse@@Base+0x1fa4>
   18b0c:	mvn	r0, #0
   18b10:	b	18b20 <argp_parse@@Base+0x1ff8>
   18b14:	ldr	r3, [r5, #28]
   18b18:	add	r3, r3, r0
   18b1c:	str	r3, [r5, #28]
   18b20:	add	sp, sp, #8
   18b24:	pop	{r4, r5, r6, r7, lr}
   18b28:	add	sp, sp, #12
   18b2c:	bx	lr
   18b30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b34:	ldr	r4, [r1, #28]
   18b38:	ldr	r5, [r1, #32]
   18b3c:	ldr	r6, [r1]
   18b40:	add	r7, r0, r5, lsl #2
   18b44:	b	18b7c <argp_parse@@Base+0x2054>
   18b48:	cmp	sl, #0
   18b4c:	ble	18b78 <argp_parse@@Base+0x2050>
   18b50:	add	r2, r0, r4, lsl #2
   18b54:	sub	r3, r6, sl
   18b58:	add	r3, r0, r3, lsl #2
   18b5c:	add	r8, r0, r6, lsl #2
   18b60:	ldr	ip, [r2]
   18b64:	ldr	lr, [r3]
   18b68:	str	lr, [r2], #4
   18b6c:	str	ip, [r3], #4
   18b70:	cmp	r3, r8
   18b74:	bne	18b60 <argp_parse@@Base+0x2038>
   18b78:	sub	r6, r6, sl
   18b7c:	cmp	r6, r5
   18b80:	movle	r3, #0
   18b84:	movgt	r3, #1
   18b88:	cmp	r4, r5
   18b8c:	movge	r3, #0
   18b90:	cmp	r3, #0
   18b94:	beq	18be0 <argp_parse@@Base+0x20b8>
   18b98:	sub	r9, r6, r5
   18b9c:	sub	sl, r5, r4
   18ba0:	cmp	r9, sl
   18ba4:	bgt	18b48 <argp_parse@@Base+0x2020>
   18ba8:	cmp	r9, #0
   18bac:	addgt	r3, r0, r4, lsl #2
   18bb0:	addgt	r8, r9, r4
   18bb4:	addgt	r8, r0, r8, lsl #2
   18bb8:	movgt	r2, r7
   18bbc:	ble	18bd8 <argp_parse@@Base+0x20b0>
   18bc0:	ldr	ip, [r3]
   18bc4:	ldr	lr, [r2]
   18bc8:	str	lr, [r3], #4
   18bcc:	str	ip, [r2], #4
   18bd0:	cmp	r3, r8
   18bd4:	bne	18bc0 <argp_parse@@Base+0x2098>
   18bd8:	add	r4, r4, r9
   18bdc:	b	18b7c <argp_parse@@Base+0x2054>
   18be0:	ldr	r0, [r1]
   18be4:	ldr	r3, [r1, #32]
   18be8:	sub	r2, r0, r3
   18bec:	ldr	r3, [r1, #28]
   18bf0:	add	r3, r3, r2
   18bf4:	str	r3, [r1, #28]
   18bf8:	str	r0, [r1, #32]
   18bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c04:	sub	sp, sp, #44	; 0x2c
   18c08:	str	r0, [sp, #20]
   18c0c:	str	r1, [sp, #12]
   18c10:	str	r2, [sp, #24]
   18c14:	str	r3, [sp, #8]
   18c18:	ldr	fp, [sp, #88]	; 0x58
   18c1c:	ldr	sl, [fp, #20]
   18c20:	ldrb	r3, [sl]
   18c24:	cmp	r3, #0
   18c28:	cmpne	r3, #61	; 0x3d
   18c2c:	beq	18c68 <argp_parse@@Base+0x2140>
   18c30:	mov	r8, sl
   18c34:	ldrb	r3, [r8, #1]!
   18c38:	cmp	r3, #0
   18c3c:	cmpne	r3, #61	; 0x3d
   18c40:	bne	18c34 <argp_parse@@Base+0x210c>
   18c44:	sub	r7, r8, sl
   18c48:	ldr	r5, [sp, #8]
   18c4c:	ldr	r3, [r5]
   18c50:	str	r3, [sp, #16]
   18c54:	cmp	r3, #0
   18c58:	beq	18f5c <argp_parse@@Base+0x2434>
   18c5c:	mov	r4, r3
   18c60:	mov	r6, #0
   18c64:	b	18c80 <argp_parse@@Base+0x2158>
   18c68:	mov	r8, sl
   18c6c:	b	18c44 <argp_parse@@Base+0x211c>
   18c70:	add	r6, r6, #1
   18c74:	ldr	r4, [r5, #16]!
   18c78:	cmp	r4, #0
   18c7c:	beq	18cb8 <argp_parse@@Base+0x2190>
   18c80:	mov	r9, r5
   18c84:	mov	r2, r7
   18c88:	mov	r1, sl
   18c8c:	mov	r0, r4
   18c90:	bl	11410 <strncmp@plt>
   18c94:	cmp	r0, #0
   18c98:	bne	18c70 <argp_parse@@Base+0x2148>
   18c9c:	mov	r0, r4
   18ca0:	bl	112c0 <strlen@plt>
   18ca4:	cmp	r7, r0
   18ca8:	bne	18c70 <argp_parse@@Base+0x2148>
   18cac:	cmp	r5, #0
   18cb0:	strne	r6, [sp, #28]
   18cb4:	bne	18f0c <argp_parse@@Base+0x23e4>
   18cb8:	ldr	r4, [sp, #8]
   18cbc:	mvn	r3, #0
   18cc0:	str	r3, [sp, #28]
   18cc4:	mov	sl, #0
   18cc8:	str	sl, [sp, #36]	; 0x24
   18ccc:	mov	r5, sl
   18cd0:	mov	r9, sl
   18cd4:	str	r8, [sp, #32]
   18cd8:	mov	r8, sl
   18cdc:	ldr	r0, [sp, #16]
   18ce0:	b	18d30 <argp_parse@@Base+0x2208>
   18ce4:	ldr	r2, [r9, #8]
   18ce8:	ldr	r3, [r4, #8]
   18cec:	cmp	r2, r3
   18cf0:	bne	18d68 <argp_parse@@Base+0x2240>
   18cf4:	ldr	r2, [r9, #12]
   18cf8:	ldr	r3, [r4, #12]
   18cfc:	cmp	r2, r3
   18d00:	bne	18d68 <argp_parse@@Base+0x2240>
   18d04:	b	18d20 <argp_parse@@Base+0x21f8>
   18d08:	cmp	r8, #0
   18d0c:	moveq	sl, #1
   18d10:	beq	18d20 <argp_parse@@Base+0x21f8>
   18d14:	mov	sl, #1
   18d18:	mov	r3, #1
   18d1c:	strb	r3, [r8, r5]
   18d20:	add	r5, r5, #1
   18d24:	ldr	r0, [r4, #16]!
   18d28:	cmp	r0, #0
   18d2c:	beq	18dd0 <argp_parse@@Base+0x22a8>
   18d30:	mov	r2, r7
   18d34:	ldr	r1, [fp, #20]
   18d38:	bl	11410 <strncmp@plt>
   18d3c:	cmp	r0, #0
   18d40:	bne	18d20 <argp_parse@@Base+0x21f8>
   18d44:	cmp	r9, #0
   18d48:	beq	18dbc <argp_parse@@Base+0x2294>
   18d4c:	ldr	r3, [sp, #84]	; 0x54
   18d50:	cmp	r3, #0
   18d54:	bne	18d68 <argp_parse@@Base+0x2240>
   18d58:	ldr	r2, [r9, #4]
   18d5c:	ldr	r3, [r4, #4]
   18d60:	cmp	r2, r3
   18d64:	beq	18ce4 <argp_parse@@Base+0x21bc>
   18d68:	cmp	sl, #0
   18d6c:	bne	18d20 <argp_parse@@Base+0x21f8>
   18d70:	ldr	r3, [sp, #92]	; 0x5c
   18d74:	cmp	r3, #0
   18d78:	beq	18d08 <argp_parse@@Base+0x21e0>
   18d7c:	cmp	r8, #0
   18d80:	bne	18d18 <argp_parse@@Base+0x21f0>
   18d84:	mov	r0, r6
   18d88:	bl	18324 <argp_parse@@Base+0x17fc>
   18d8c:	subs	r8, r0, #0
   18d90:	beq	18dc8 <argp_parse@@Base+0x22a0>
   18d94:	mov	r2, r6
   18d98:	mov	r1, #0
   18d9c:	mov	r0, r8
   18da0:	bl	11314 <memset@plt>
   18da4:	ldr	r3, [sp, #28]
   18da8:	mov	r2, #1
   18dac:	strb	r2, [r8, r3]
   18db0:	mov	r3, #1
   18db4:	str	r3, [sp, #36]	; 0x24
   18db8:	b	18d18 <argp_parse@@Base+0x21f0>
   18dbc:	str	r5, [sp, #28]
   18dc0:	mov	r9, r4
   18dc4:	b	18d20 <argp_parse@@Base+0x21f8>
   18dc8:	mov	sl, #1
   18dcc:	b	18d20 <argp_parse@@Base+0x21f8>
   18dd0:	mov	r3, r8
   18dd4:	str	r8, [sp, #16]
   18dd8:	ldr	r8, [sp, #32]
   18ddc:	cmp	sl, #0
   18de0:	cmpeq	r3, #0
   18de4:	beq	18f04 <argp_parse@@Base+0x23dc>
   18de8:	ldr	r3, [sp, #92]	; 0x5c
   18dec:	cmp	r3, #0
   18df0:	beq	18e20 <argp_parse@@Base+0x22f8>
   18df4:	cmp	sl, #0
   18df8:	beq	18e5c <argp_parse@@Base+0x2334>
   18dfc:	ldr	r3, [sp, #12]
   18e00:	ldr	r2, [r3]
   18e04:	ldr	r3, [pc, #708]	; 190d0 <argp_parse@@Base+0x25a8>
   18e08:	ldr	r0, [r3]
   18e0c:	ldr	r3, [fp, #20]
   18e10:	str	r3, [sp]
   18e14:	ldr	r3, [sp, #96]	; 0x60
   18e18:	ldr	r1, [pc, #692]	; 190d4 <argp_parse@@Base+0x25ac>
   18e1c:	bl	112d8 <fprintf@plt>
   18e20:	ldr	r3, [sp, #36]	; 0x24
   18e24:	cmp	r3, #0
   18e28:	bne	18ef8 <argp_parse@@Base+0x23d0>
   18e2c:	ldr	r4, [fp, #20]
   18e30:	mov	r0, r4
   18e34:	bl	112c0 <strlen@plt>
   18e38:	add	r0, r4, r0
   18e3c:	str	r0, [fp, #20]
   18e40:	ldr	r3, [fp]
   18e44:	add	r3, r3, #1
   18e48:	str	r3, [fp]
   18e4c:	mov	r3, #0
   18e50:	str	r3, [fp, #8]
   18e54:	mov	r0, #63	; 0x3f
   18e58:	b	19050 <argp_parse@@Base+0x2528>
   18e5c:	ldr	r4, [pc, #620]	; 190d0 <argp_parse@@Base+0x25a8>
   18e60:	ldr	r0, [r4]
   18e64:	bl	113b0 <flockfile@plt>
   18e68:	ldr	r3, [sp, #12]
   18e6c:	ldr	r2, [r3]
   18e70:	ldr	r0, [r4]
   18e74:	ldr	r3, [fp, #20]
   18e78:	str	r3, [sp]
   18e7c:	ldr	r3, [sp, #96]	; 0x60
   18e80:	ldr	r1, [pc, #592]	; 190d8 <argp_parse@@Base+0x25b0>
   18e84:	bl	112d8 <fprintf@plt>
   18e88:	cmp	r6, #0
   18e8c:	ble	18edc <argp_parse@@Base+0x23b4>
   18e90:	ldr	r3, [sp, #16]
   18e94:	mov	r4, r3
   18e98:	add	r6, r3, r6
   18e9c:	ldr	r7, [pc, #568]	; 190dc <argp_parse@@Base+0x25b4>
   18ea0:	ldr	r5, [pc, #552]	; 190d0 <argp_parse@@Base+0x25a8>
   18ea4:	ldr	r8, [sp, #8]
   18ea8:	b	18eb8 <argp_parse@@Base+0x2390>
   18eac:	add	sl, sl, #1
   18eb0:	cmp	r4, r6
   18eb4:	beq	18edc <argp_parse@@Base+0x23b4>
   18eb8:	ldrb	r3, [r4], #1
   18ebc:	cmp	r3, #0
   18ec0:	beq	18eac <argp_parse@@Base+0x2384>
   18ec4:	ldr	r3, [r8, sl, lsl #4]
   18ec8:	ldr	r2, [sp, #96]	; 0x60
   18ecc:	mov	r1, r7
   18ed0:	ldr	r0, [r5]
   18ed4:	bl	112d8 <fprintf@plt>
   18ed8:	b	18eac <argp_parse@@Base+0x2384>
   18edc:	ldr	r4, [pc, #492]	; 190d0 <argp_parse@@Base+0x25a8>
   18ee0:	ldr	r1, [r4]
   18ee4:	mov	r0, #10
   18ee8:	bl	11380 <fputc@plt>
   18eec:	ldr	r0, [r4]
   18ef0:	bl	11200 <funlockfile@plt>
   18ef4:	b	18e20 <argp_parse@@Base+0x22f8>
   18ef8:	ldr	r0, [sp, #16]
   18efc:	bl	1771c <argp_parse@@Base+0xbf4>
   18f00:	b	18e2c <argp_parse@@Base+0x2304>
   18f04:	cmp	r9, #0
   18f08:	beq	18f5c <argp_parse@@Base+0x2434>
   18f0c:	ldr	r2, [fp]
   18f10:	add	r3, r2, #1
   18f14:	str	r3, [fp]
   18f18:	mov	r1, #0
   18f1c:	str	r1, [fp, #20]
   18f20:	ldrb	r1, [r8]
   18f24:	cmp	r1, #0
   18f28:	beq	1901c <argp_parse@@Base+0x24f4>
   18f2c:	ldr	r3, [r9, #4]
   18f30:	cmp	r3, #0
   18f34:	addne	r8, r8, #1
   18f38:	strne	r8, [fp, #12]
   18f3c:	bne	19028 <argp_parse@@Base+0x2500>
   18f40:	ldr	r3, [sp, #92]	; 0x5c
   18f44:	cmp	r3, #0
   18f48:	bne	18ff4 <argp_parse@@Base+0x24cc>
   18f4c:	ldr	r3, [r9, #12]
   18f50:	str	r3, [fp, #8]
   18f54:	mov	r0, #63	; 0x3f
   18f58:	b	19050 <argp_parse@@Base+0x2528>
   18f5c:	ldr	r3, [sp, #84]	; 0x54
   18f60:	cmp	r3, #0
   18f64:	bne	18f94 <argp_parse@@Base+0x246c>
   18f68:	ldr	r3, [sp, #92]	; 0x5c
   18f6c:	cmp	r3, #0
   18f70:	bne	18fcc <argp_parse@@Base+0x24a4>
   18f74:	mov	r2, #0
   18f78:	str	r2, [fp, #20]
   18f7c:	ldr	r3, [fp]
   18f80:	add	r3, r3, #1
   18f84:	str	r3, [fp]
   18f88:	str	r2, [fp, #8]
   18f8c:	mov	r0, #63	; 0x3f
   18f90:	b	19050 <argp_parse@@Base+0x2528>
   18f94:	ldr	r3, [fp]
   18f98:	ldr	r2, [sp, #12]
   18f9c:	ldr	r3, [r2, r3, lsl #2]
   18fa0:	ldrb	r3, [r3, #1]
   18fa4:	cmp	r3, #45	; 0x2d
   18fa8:	beq	18f68 <argp_parse@@Base+0x2440>
   18fac:	ldr	r3, [fp, #20]
   18fb0:	ldrb	r1, [r3]
   18fb4:	ldr	r0, [sp, #24]
   18fb8:	bl	112cc <strchr@plt>
   18fbc:	cmp	r0, #0
   18fc0:	beq	18f68 <argp_parse@@Base+0x2440>
   18fc4:	mvn	r0, #0
   18fc8:	b	19050 <argp_parse@@Base+0x2528>
   18fcc:	ldr	r3, [sp, #12]
   18fd0:	ldr	r2, [r3]
   18fd4:	ldr	r3, [pc, #244]	; 190d0 <argp_parse@@Base+0x25a8>
   18fd8:	ldr	r0, [r3]
   18fdc:	ldr	r3, [fp, #20]
   18fe0:	str	r3, [sp]
   18fe4:	ldr	r3, [sp, #96]	; 0x60
   18fe8:	ldr	r1, [pc, #240]	; 190e0 <argp_parse@@Base+0x25b8>
   18fec:	bl	112d8 <fprintf@plt>
   18ff0:	b	18f74 <argp_parse@@Base+0x244c>
   18ff4:	ldr	r3, [sp, #12]
   18ff8:	ldr	r2, [r3]
   18ffc:	ldr	r3, [pc, #204]	; 190d0 <argp_parse@@Base+0x25a8>
   19000:	ldr	r0, [r3]
   19004:	ldr	r3, [r9]
   19008:	str	r3, [sp]
   1900c:	ldr	r3, [sp, #96]	; 0x60
   19010:	ldr	r1, [pc, #204]	; 190e4 <argp_parse@@Base+0x25bc>
   19014:	bl	112d8 <fprintf@plt>
   19018:	b	18f4c <argp_parse@@Base+0x2424>
   1901c:	ldr	r1, [r9, #4]
   19020:	cmp	r1, #1
   19024:	beq	19058 <argp_parse@@Base+0x2530>
   19028:	ldr	r3, [sp, #80]	; 0x50
   1902c:	cmp	r3, #0
   19030:	ldrne	r2, [sp, #28]
   19034:	strne	r2, [r3]
   19038:	ldr	r3, [r9, #8]
   1903c:	cmp	r3, #0
   19040:	ldrne	r2, [r9, #12]
   19044:	strne	r2, [r3]
   19048:	movne	r0, #0
   1904c:	ldreq	r0, [r9, #12]
   19050:	add	sp, sp, #44	; 0x2c
   19054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19058:	ldr	r1, [sp, #20]
   1905c:	cmp	r3, r1
   19060:	bge	1907c <argp_parse@@Base+0x2554>
   19064:	add	r2, r2, #2
   19068:	str	r2, [fp]
   1906c:	ldr	r2, [sp, #12]
   19070:	ldr	r3, [r2, r3, lsl #2]
   19074:	str	r3, [fp, #12]
   19078:	b	19028 <argp_parse@@Base+0x2500>
   1907c:	ldr	r3, [sp, #92]	; 0x5c
   19080:	cmp	r3, #0
   19084:	bne	190a8 <argp_parse@@Base+0x2580>
   19088:	ldr	r3, [r9, #12]
   1908c:	str	r3, [fp, #8]
   19090:	ldr	r3, [sp, #24]
   19094:	ldrb	r0, [r3]
   19098:	cmp	r0, #58	; 0x3a
   1909c:	moveq	r0, #58	; 0x3a
   190a0:	movne	r0, #63	; 0x3f
   190a4:	b	19050 <argp_parse@@Base+0x2528>
   190a8:	ldr	r3, [sp, #12]
   190ac:	ldr	r2, [r3]
   190b0:	ldr	r3, [pc, #24]	; 190d0 <argp_parse@@Base+0x25a8>
   190b4:	ldr	r0, [r3]
   190b8:	ldr	r3, [r9]
   190bc:	str	r3, [sp]
   190c0:	ldr	r3, [sp, #96]	; 0x60
   190c4:	ldr	r1, [pc, #28]	; 190e8 <argp_parse@@Base+0x25c0>
   190c8:	bl	112d8 <fprintf@plt>
   190cc:	b	19088 <argp_parse@@Base+0x2560>
   190d0:	ldrdeq	ip, [r2], -r8
   190d4:	andeq	sl, r1, r0, asr #29
   190d8:	andeq	sl, r1, r0, ror #29
   190dc:	andeq	sl, r1, r0, lsl pc
   190e0:	andeq	sl, r1, r8, lsl pc
   190e4:	andeq	sl, r1, r8, lsr pc
   190e8:	andeq	sl, r1, r8, ror #30
   190ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190f0:	sub	sp, sp, #36	; 0x24
   190f4:	str	r3, [sp, #24]
   190f8:	ldr	r4, [sp, #80]	; 0x50
   190fc:	ldr	r8, [r4, #4]
   19100:	subs	r5, r0, #0
   19104:	ble	1960c <argp_parse@@Base+0x2ae4>
   19108:	mov	r9, r1
   1910c:	mov	r6, r2
   19110:	mov	r3, #0
   19114:	str	r3, [r4, #12]
   19118:	ldr	r3, [r4]
   1911c:	cmp	r3, #0
   19120:	beq	19144 <argp_parse@@Base+0x261c>
   19124:	ldr	r3, [r4, #16]
   19128:	cmp	r3, #0
   1912c:	beq	1914c <argp_parse@@Base+0x2624>
   19130:	ldrb	r3, [r2]
   19134:	sub	r3, r3, #43	; 0x2b
   19138:	tst	r3, #253	; 0xfd
   1913c:	addeq	r6, r2, #1
   19140:	b	191a8 <argp_parse@@Base+0x2680>
   19144:	mov	r3, #1
   19148:	str	r3, [r4]
   1914c:	ldr	r3, [r4]
   19150:	str	r3, [r4, #32]
   19154:	str	r3, [r4, #28]
   19158:	mov	r3, #0
   1915c:	str	r3, [r4, #20]
   19160:	ldrb	r3, [r6]
   19164:	cmp	r3, #45	; 0x2d
   19168:	moveq	r3, #2
   1916c:	streq	r3, [r4, #24]
   19170:	addeq	r6, r6, #1
   19174:	beq	191a0 <argp_parse@@Base+0x2678>
   19178:	cmp	r3, #43	; 0x2b
   1917c:	moveq	r3, #0
   19180:	streq	r3, [r4, #24]
   19184:	addeq	r6, r6, #1
   19188:	beq	191a0 <argp_parse@@Base+0x2678>
   1918c:	ldr	r3, [sp, #84]	; 0x54
   19190:	cmp	r3, #0
   19194:	beq	19244 <argp_parse@@Base+0x271c>
   19198:	mov	r3, #0
   1919c:	str	r3, [r4, #24]
   191a0:	mov	r3, #1
   191a4:	str	r3, [r4, #16]
   191a8:	ldrb	r3, [r6]
   191ac:	cmp	r3, #58	; 0x3a
   191b0:	moveq	r8, #0
   191b4:	ldr	r3, [r4, #20]
   191b8:	cmp	r3, #0
   191bc:	beq	191cc <argp_parse@@Base+0x26a4>
   191c0:	ldrb	r3, [r3]
   191c4:	cmp	r3, #0
   191c8:	bne	19358 <argp_parse@@Base+0x2830>
   191cc:	ldr	r3, [r4]
   191d0:	ldr	r2, [r4, #32]
   191d4:	cmp	r2, r3
   191d8:	strgt	r3, [r4, #32]
   191dc:	ldr	r2, [r4, #28]
   191e0:	cmp	r3, r2
   191e4:	strlt	r3, [r4, #28]
   191e8:	ldr	r2, [r4, #24]
   191ec:	cmp	r2, #1
   191f0:	beq	19260 <argp_parse@@Base+0x2738>
   191f4:	ldr	r7, [r4]
   191f8:	cmp	r5, r7
   191fc:	beq	192e4 <argp_parse@@Base+0x27bc>
   19200:	ldr	sl, [r9, r7, lsl #2]
   19204:	ldr	r1, [pc, #1088]	; 1964c <argp_parse@@Base+0x2b24>
   19208:	mov	r0, sl
   1920c:	bl	11104 <strcmp@plt>
   19210:	cmp	r0, #0
   19214:	bne	1961c <argp_parse@@Base+0x2af4>
   19218:	add	r7, r7, #1
   1921c:	str	r7, [r4]
   19220:	ldr	r2, [r4, #28]
   19224:	ldr	r3, [r4, #32]
   19228:	cmp	r7, r3
   1922c:	cmpne	r2, r3
   19230:	beq	192d4 <argp_parse@@Base+0x27ac>
   19234:	mov	r1, r4
   19238:	mov	r0, r9
   1923c:	bl	18b30 <argp_parse@@Base+0x2008>
   19240:	b	192dc <argp_parse@@Base+0x27b4>
   19244:	ldr	r0, [pc, #1028]	; 19650 <argp_parse@@Base+0x2b28>
   19248:	bl	11230 <getenv@plt>
   1924c:	cmp	r0, #0
   19250:	bne	19198 <argp_parse@@Base+0x2670>
   19254:	mov	r3, #1
   19258:	str	r3, [r4, #24]
   1925c:	b	191a0 <argp_parse@@Base+0x2678>
   19260:	ldr	r2, [r4, #32]
   19264:	ldr	r1, [r4, #28]
   19268:	cmp	r1, r2
   1926c:	cmpne	r3, r2
   19270:	beq	19284 <argp_parse@@Base+0x275c>
   19274:	mov	r1, r4
   19278:	mov	r0, r9
   1927c:	bl	18b30 <argp_parse@@Base+0x2008>
   19280:	b	1928c <argp_parse@@Base+0x2764>
   19284:	cmp	r3, r2
   19288:	strne	r3, [r4, #28]
   1928c:	ldr	r3, [r4]
   19290:	cmp	r5, r3
   19294:	ble	192cc <argp_parse@@Base+0x27a4>
   19298:	add	r1, r9, r3, lsl #2
   1929c:	b	192b0 <argp_parse@@Base+0x2788>
   192a0:	add	r3, r3, #1
   192a4:	str	r3, [r4]
   192a8:	cmp	r5, r3
   192ac:	beq	192cc <argp_parse@@Base+0x27a4>
   192b0:	ldr	r2, [r1], #4
   192b4:	ldrb	r0, [r2]
   192b8:	cmp	r0, #45	; 0x2d
   192bc:	bne	192a0 <argp_parse@@Base+0x2778>
   192c0:	ldrb	r2, [r2, #1]
   192c4:	cmp	r2, #0
   192c8:	beq	192a0 <argp_parse@@Base+0x2778>
   192cc:	str	r3, [r4, #32]
   192d0:	b	191f4 <argp_parse@@Base+0x26cc>
   192d4:	cmp	r2, r3
   192d8:	streq	r7, [r4, #28]
   192dc:	str	r5, [r4, #32]
   192e0:	str	r5, [r4]
   192e4:	ldr	r3, [r4, #28]
   192e8:	ldr	r2, [r4, #32]
   192ec:	cmp	r3, r2
   192f0:	mvneq	r0, #0
   192f4:	strne	r3, [r4]
   192f8:	mvnne	r0, #0
   192fc:	b	1945c <argp_parse@@Base+0x2934>
   19300:	ldrb	r1, [sl, #1]
   19304:	cmp	r1, #0
   19308:	beq	19628 <argp_parse@@Base+0x2b00>
   1930c:	ldr	r3, [sp, #24]
   19310:	cmp	r3, #0
   19314:	beq	19348 <argp_parse@@Base+0x2820>
   19318:	cmp	r1, #45	; 0x2d
   1931c:	beq	193c0 <argp_parse@@Base+0x2898>
   19320:	ldr	r3, [sp, #76]	; 0x4c
   19324:	cmp	r3, #0
   19328:	beq	19348 <argp_parse@@Base+0x2820>
   1932c:	ldrb	r3, [sl, #2]
   19330:	cmp	r3, #0
   19334:	bne	19400 <argp_parse@@Base+0x28d8>
   19338:	mov	r0, r6
   1933c:	bl	112cc <strchr@plt>
   19340:	cmp	r0, #0
   19344:	beq	19400 <argp_parse@@Base+0x28d8>
   19348:	ldr	r3, [r4]
   1934c:	ldr	r3, [r9, r3, lsl #2]
   19350:	add	r3, r3, #1
   19354:	str	r3, [r4, #20]
   19358:	ldr	sl, [r4, #20]
   1935c:	add	fp, sl, #1
   19360:	str	fp, [r4, #20]
   19364:	ldrb	r7, [sl]
   19368:	str	r7, [sp, #28]
   1936c:	mov	r1, r7
   19370:	mov	r0, r6
   19374:	bl	112cc <strchr@plt>
   19378:	ldrb	r3, [sl, #1]
   1937c:	cmp	r3, #0
   19380:	ldreq	r3, [r4]
   19384:	addeq	r3, r3, #1
   19388:	streq	r3, [r4]
   1938c:	sub	r3, r7, #58	; 0x3a
   19390:	uxtb	r3, r3
   19394:	cmp	r0, #0
   19398:	cmpne	r3, #1
   1939c:	bls	19448 <argp_parse@@Base+0x2920>
   193a0:	ldrb	r3, [r0]
   193a4:	cmp	r3, #87	; 0x57
   193a8:	beq	19480 <argp_parse@@Base+0x2958>
   193ac:	ldrb	r3, [r0, #1]
   193b0:	cmp	r3, #58	; 0x3a
   193b4:	beq	1954c <argp_parse@@Base+0x2a24>
   193b8:	mov	r0, r7
   193bc:	b	1945c <argp_parse@@Base+0x2934>
   193c0:	add	sl, sl, #2
   193c4:	str	sl, [r4, #20]
   193c8:	ldr	r3, [pc, #636]	; 1964c <argp_parse@@Base+0x2b24>
   193cc:	str	r3, [sp, #16]
   193d0:	str	r8, [sp, #12]
   193d4:	str	r4, [sp, #8]
   193d8:	ldr	r3, [sp, #76]	; 0x4c
   193dc:	str	r3, [sp, #4]
   193e0:	ldr	r3, [sp, #72]	; 0x48
   193e4:	str	r3, [sp]
   193e8:	ldr	r3, [sp, #24]
   193ec:	mov	r2, r6
   193f0:	mov	r1, r9
   193f4:	mov	r0, r5
   193f8:	bl	18c00 <argp_parse@@Base+0x20d8>
   193fc:	b	1945c <argp_parse@@Base+0x2934>
   19400:	add	sl, sl, #1
   19404:	str	sl, [r4, #20]
   19408:	ldr	r3, [pc, #580]	; 19654 <argp_parse@@Base+0x2b2c>
   1940c:	str	r3, [sp, #16]
   19410:	str	r8, [sp, #12]
   19414:	str	r4, [sp, #8]
   19418:	ldr	r3, [sp, #76]	; 0x4c
   1941c:	str	r3, [sp, #4]
   19420:	ldr	r3, [sp, #72]	; 0x48
   19424:	str	r3, [sp]
   19428:	ldr	r3, [sp, #24]
   1942c:	mov	r2, r6
   19430:	mov	r1, r9
   19434:	mov	r0, r5
   19438:	bl	18c00 <argp_parse@@Base+0x20d8>
   1943c:	cmn	r0, #1
   19440:	bne	1945c <argp_parse@@Base+0x2934>
   19444:	b	19348 <argp_parse@@Base+0x2820>
   19448:	cmp	r8, #0
   1944c:	bne	19464 <argp_parse@@Base+0x293c>
   19450:	ldr	r3, [sp, #28]
   19454:	str	r3, [r4, #8]
   19458:	mov	r0, #63	; 0x3f
   1945c:	add	sp, sp, #36	; 0x24
   19460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19464:	ldr	r3, [sp, #28]
   19468:	ldr	r2, [r9]
   1946c:	ldr	r1, [pc, #484]	; 19658 <argp_parse@@Base+0x2b30>
   19470:	ldr	r0, [pc, #484]	; 1965c <argp_parse@@Base+0x2b34>
   19474:	ldr	r0, [r0]
   19478:	bl	112d8 <fprintf@plt>
   1947c:	b	19450 <argp_parse@@Base+0x2928>
   19480:	ldrb	r3, [r0, #1]
   19484:	ldr	r2, [sp, #24]
   19488:	cmp	r3, #59	; 0x3b
   1948c:	movne	r3, #0
   19490:	moveq	r3, #1
   19494:	cmp	r2, #0
   19498:	moveq	r3, #0
   1949c:	cmp	r3, #0
   194a0:	beq	193ac <argp_parse@@Base+0x2884>
   194a4:	ldrb	r3, [sl, #1]
   194a8:	cmp	r3, #0
   194ac:	strne	fp, [r4, #12]
   194b0:	bne	194c8 <argp_parse@@Base+0x29a0>
   194b4:	ldr	r3, [r4]
   194b8:	cmp	r5, r3
   194bc:	beq	1950c <argp_parse@@Base+0x29e4>
   194c0:	ldr	r3, [r9, r3, lsl #2]
   194c4:	str	r3, [r4, #12]
   194c8:	ldr	r3, [r4, #12]
   194cc:	str	r3, [r4, #20]
   194d0:	mov	r3, #0
   194d4:	str	r3, [r4, #12]
   194d8:	ldr	r2, [pc, #384]	; 19660 <argp_parse@@Base+0x2b38>
   194dc:	str	r2, [sp, #16]
   194e0:	str	r8, [sp, #12]
   194e4:	str	r4, [sp, #8]
   194e8:	str	r3, [sp, #4]
   194ec:	ldr	r3, [sp, #72]	; 0x48
   194f0:	str	r3, [sp]
   194f4:	ldr	r3, [sp, #24]
   194f8:	mov	r2, r6
   194fc:	mov	r1, r9
   19500:	mov	r0, r5
   19504:	bl	18c00 <argp_parse@@Base+0x20d8>
   19508:	b	1945c <argp_parse@@Base+0x2934>
   1950c:	cmp	r8, #0
   19510:	bne	19530 <argp_parse@@Base+0x2a08>
   19514:	ldr	r3, [sp, #28]
   19518:	str	r3, [r4, #8]
   1951c:	ldrb	r0, [r6]
   19520:	cmp	r0, #58	; 0x3a
   19524:	moveq	r0, #58	; 0x3a
   19528:	movne	r0, #63	; 0x3f
   1952c:	b	1945c <argp_parse@@Base+0x2934>
   19530:	ldr	r3, [sp, #28]
   19534:	ldr	r2, [r9]
   19538:	ldr	r1, [pc, #292]	; 19664 <argp_parse@@Base+0x2b3c>
   1953c:	ldr	r0, [pc, #280]	; 1965c <argp_parse@@Base+0x2b34>
   19540:	ldr	r0, [r0]
   19544:	bl	112d8 <fprintf@plt>
   19548:	b	19514 <argp_parse@@Base+0x29ec>
   1954c:	ldrb	r3, [r0, #2]
   19550:	cmp	r3, #58	; 0x3a
   19554:	beq	19580 <argp_parse@@Base+0x2a58>
   19558:	ldrb	r3, [sl, #1]
   1955c:	cmp	r3, #0
   19560:	beq	195ac <argp_parse@@Base+0x2a84>
   19564:	str	fp, [r4, #12]
   19568:	ldr	r3, [r4]
   1956c:	add	r3, r3, #1
   19570:	str	r3, [r4]
   19574:	mov	r3, #0
   19578:	str	r3, [r4, #20]
   1957c:	b	193b8 <argp_parse@@Base+0x2890>
   19580:	ldrb	r3, [sl, #1]
   19584:	cmp	r3, #0
   19588:	strne	fp, [r4, #12]
   1958c:	ldrne	r3, [r4]
   19590:	addne	r3, r3, #1
   19594:	strne	r3, [r4]
   19598:	moveq	r3, #0
   1959c:	streq	r3, [r4, #12]
   195a0:	mov	r3, #0
   195a4:	str	r3, [r4, #20]
   195a8:	b	193b8 <argp_parse@@Base+0x2890>
   195ac:	ldr	r3, [r4]
   195b0:	cmp	r5, r3
   195b4:	beq	195cc <argp_parse@@Base+0x2aa4>
   195b8:	add	r2, r3, #1
   195bc:	str	r2, [r4]
   195c0:	ldr	r3, [r9, r3, lsl #2]
   195c4:	str	r3, [r4, #12]
   195c8:	b	19574 <argp_parse@@Base+0x2a4c>
   195cc:	cmp	r8, #0
   195d0:	bne	195f0 <argp_parse@@Base+0x2ac8>
   195d4:	ldr	r3, [sp, #28]
   195d8:	str	r3, [r4, #8]
   195dc:	ldrb	r7, [r6]
   195e0:	cmp	r7, #58	; 0x3a
   195e4:	moveq	r7, #58	; 0x3a
   195e8:	movne	r7, #63	; 0x3f
   195ec:	b	19574 <argp_parse@@Base+0x2a4c>
   195f0:	ldr	r3, [sp, #28]
   195f4:	ldr	r2, [r9]
   195f8:	ldr	r1, [pc, #100]	; 19664 <argp_parse@@Base+0x2b3c>
   195fc:	ldr	r0, [pc, #88]	; 1965c <argp_parse@@Base+0x2b34>
   19600:	ldr	r0, [r0]
   19604:	bl	112d8 <fprintf@plt>
   19608:	b	195d4 <argp_parse@@Base+0x2aac>
   1960c:	mvn	r0, #0
   19610:	b	1945c <argp_parse@@Base+0x2934>
   19614:	mvn	r0, #0
   19618:	b	1945c <argp_parse@@Base+0x2934>
   1961c:	ldrb	r3, [sl]
   19620:	cmp	r3, #45	; 0x2d
   19624:	beq	19300 <argp_parse@@Base+0x27d8>
   19628:	ldr	r3, [r4, #24]
   1962c:	cmp	r3, #0
   19630:	beq	19614 <argp_parse@@Base+0x2aec>
   19634:	add	r3, r7, #1
   19638:	str	r3, [r4]
   1963c:	ldr	r3, [r9, r7, lsl #2]
   19640:	str	r3, [r4, #12]
   19644:	mov	r0, #1
   19648:	b	1945c <argp_parse@@Base+0x2934>
   1964c:	andeq	sl, r1, ip, lsl sl
   19650:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19654:	andeq	sl, r1, r0, lsr #31
   19658:	andeq	sl, r1, r4, lsr #31
   1965c:	ldrdeq	ip, [r2], -r8
   19660:	andeq	sl, r1, ip, ror #31
   19664:	andeq	sl, r1, r0, asr #31
   19668:	push	{r4, r5, lr}
   1966c:	sub	sp, sp, #20
   19670:	ldr	r4, [pc, #84]	; 196cc <argp_parse@@Base+0x2ba4>
   19674:	ldr	r5, [pc, #84]	; 196d0 <argp_parse@@Base+0x2ba8>
   19678:	ldr	ip, [r5]
   1967c:	str	ip, [r4]
   19680:	ldr	ip, [r5, #4]
   19684:	str	ip, [r4, #4]
   19688:	ldr	ip, [sp, #40]	; 0x28
   1968c:	str	ip, [sp, #12]
   19690:	str	r4, [sp, #8]
   19694:	ldr	ip, [sp, #36]	; 0x24
   19698:	str	ip, [sp, #4]
   1969c:	ldr	ip, [sp, #32]
   196a0:	str	ip, [sp]
   196a4:	bl	190ec <argp_parse@@Base+0x25c4>
   196a8:	ldr	r3, [r4]
   196ac:	str	r3, [r5]
   196b0:	ldr	r2, [r4, #12]
   196b4:	ldr	r3, [pc, #24]	; 196d4 <argp_parse@@Base+0x2bac>
   196b8:	str	r2, [r3]
   196bc:	ldr	r3, [r4, #8]
   196c0:	str	r3, [r5, #8]
   196c4:	add	sp, sp, #20
   196c8:	pop	{r4, r5, pc}
   196cc:	andeq	ip, r2, r0, lsr #8
   196d0:	andeq	ip, r2, r4, asr #7
   196d4:	andeq	ip, r2, r0, ror #8
   196d8:	push	{lr}		; (str lr, [sp, #-4]!)
   196dc:	sub	sp, sp, #20
   196e0:	mov	r3, #1
   196e4:	str	r3, [sp, #8]
   196e8:	mov	r3, #0
   196ec:	str	r3, [sp, #4]
   196f0:	str	r3, [sp]
   196f4:	bl	19668 <argp_parse@@Base+0x2b40>
   196f8:	add	sp, sp, #20
   196fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19700:	push	{r4, r5, r6, lr}
   19704:	mov	r6, r0
   19708:	mov	r5, r1
   1970c:	subs	r4, r2, #0
   19710:	beq	1973c <argp_parse@@Base+0x2c14>
   19714:	mov	r1, r4
   19718:	mvn	r0, #0
   1971c:	bl	1974c <argp_parse@@Base+0x2c24>
   19720:	cmp	r0, r5
   19724:	bcs	1973c <argp_parse@@Base+0x2c14>
   19728:	bl	112e4 <__errno_location@plt>
   1972c:	mov	r3, #12
   19730:	str	r3, [r0]
   19734:	mov	r0, #0
   19738:	pop	{r4, r5, r6, pc}
   1973c:	mul	r1, r5, r4
   19740:	mov	r0, r6
   19744:	bl	18354 <argp_parse@@Base+0x182c>
   19748:	pop	{r4, r5, r6, pc}
   1974c:	subs	r2, r1, #1
   19750:	bxeq	lr
   19754:	bcc	1992c <argp_parse@@Base+0x2e04>
   19758:	cmp	r0, r1
   1975c:	bls	19910 <argp_parse@@Base+0x2de8>
   19760:	tst	r1, r2
   19764:	beq	1991c <argp_parse@@Base+0x2df4>
   19768:	clz	r3, r0
   1976c:	clz	r2, r1
   19770:	sub	r3, r2, r3
   19774:	rsbs	r3, r3, #31
   19778:	addne	r3, r3, r3, lsl #1
   1977c:	mov	r2, #0
   19780:	addne	pc, pc, r3, lsl #2
   19784:	nop			; (mov r0, r0)
   19788:	cmp	r0, r1, lsl #31
   1978c:	adc	r2, r2, r2
   19790:	subcs	r0, r0, r1, lsl #31
   19794:	cmp	r0, r1, lsl #30
   19798:	adc	r2, r2, r2
   1979c:	subcs	r0, r0, r1, lsl #30
   197a0:	cmp	r0, r1, lsl #29
   197a4:	adc	r2, r2, r2
   197a8:	subcs	r0, r0, r1, lsl #29
   197ac:	cmp	r0, r1, lsl #28
   197b0:	adc	r2, r2, r2
   197b4:	subcs	r0, r0, r1, lsl #28
   197b8:	cmp	r0, r1, lsl #27
   197bc:	adc	r2, r2, r2
   197c0:	subcs	r0, r0, r1, lsl #27
   197c4:	cmp	r0, r1, lsl #26
   197c8:	adc	r2, r2, r2
   197cc:	subcs	r0, r0, r1, lsl #26
   197d0:	cmp	r0, r1, lsl #25
   197d4:	adc	r2, r2, r2
   197d8:	subcs	r0, r0, r1, lsl #25
   197dc:	cmp	r0, r1, lsl #24
   197e0:	adc	r2, r2, r2
   197e4:	subcs	r0, r0, r1, lsl #24
   197e8:	cmp	r0, r1, lsl #23
   197ec:	adc	r2, r2, r2
   197f0:	subcs	r0, r0, r1, lsl #23
   197f4:	cmp	r0, r1, lsl #22
   197f8:	adc	r2, r2, r2
   197fc:	subcs	r0, r0, r1, lsl #22
   19800:	cmp	r0, r1, lsl #21
   19804:	adc	r2, r2, r2
   19808:	subcs	r0, r0, r1, lsl #21
   1980c:	cmp	r0, r1, lsl #20
   19810:	adc	r2, r2, r2
   19814:	subcs	r0, r0, r1, lsl #20
   19818:	cmp	r0, r1, lsl #19
   1981c:	adc	r2, r2, r2
   19820:	subcs	r0, r0, r1, lsl #19
   19824:	cmp	r0, r1, lsl #18
   19828:	adc	r2, r2, r2
   1982c:	subcs	r0, r0, r1, lsl #18
   19830:	cmp	r0, r1, lsl #17
   19834:	adc	r2, r2, r2
   19838:	subcs	r0, r0, r1, lsl #17
   1983c:	cmp	r0, r1, lsl #16
   19840:	adc	r2, r2, r2
   19844:	subcs	r0, r0, r1, lsl #16
   19848:	cmp	r0, r1, lsl #15
   1984c:	adc	r2, r2, r2
   19850:	subcs	r0, r0, r1, lsl #15
   19854:	cmp	r0, r1, lsl #14
   19858:	adc	r2, r2, r2
   1985c:	subcs	r0, r0, r1, lsl #14
   19860:	cmp	r0, r1, lsl #13
   19864:	adc	r2, r2, r2
   19868:	subcs	r0, r0, r1, lsl #13
   1986c:	cmp	r0, r1, lsl #12
   19870:	adc	r2, r2, r2
   19874:	subcs	r0, r0, r1, lsl #12
   19878:	cmp	r0, r1, lsl #11
   1987c:	adc	r2, r2, r2
   19880:	subcs	r0, r0, r1, lsl #11
   19884:	cmp	r0, r1, lsl #10
   19888:	adc	r2, r2, r2
   1988c:	subcs	r0, r0, r1, lsl #10
   19890:	cmp	r0, r1, lsl #9
   19894:	adc	r2, r2, r2
   19898:	subcs	r0, r0, r1, lsl #9
   1989c:	cmp	r0, r1, lsl #8
   198a0:	adc	r2, r2, r2
   198a4:	subcs	r0, r0, r1, lsl #8
   198a8:	cmp	r0, r1, lsl #7
   198ac:	adc	r2, r2, r2
   198b0:	subcs	r0, r0, r1, lsl #7
   198b4:	cmp	r0, r1, lsl #6
   198b8:	adc	r2, r2, r2
   198bc:	subcs	r0, r0, r1, lsl #6
   198c0:	cmp	r0, r1, lsl #5
   198c4:	adc	r2, r2, r2
   198c8:	subcs	r0, r0, r1, lsl #5
   198cc:	cmp	r0, r1, lsl #4
   198d0:	adc	r2, r2, r2
   198d4:	subcs	r0, r0, r1, lsl #4
   198d8:	cmp	r0, r1, lsl #3
   198dc:	adc	r2, r2, r2
   198e0:	subcs	r0, r0, r1, lsl #3
   198e4:	cmp	r0, r1, lsl #2
   198e8:	adc	r2, r2, r2
   198ec:	subcs	r0, r0, r1, lsl #2
   198f0:	cmp	r0, r1, lsl #1
   198f4:	adc	r2, r2, r2
   198f8:	subcs	r0, r0, r1, lsl #1
   198fc:	cmp	r0, r1
   19900:	adc	r2, r2, r2
   19904:	subcs	r0, r0, r1
   19908:	mov	r0, r2
   1990c:	bx	lr
   19910:	moveq	r0, #1
   19914:	movne	r0, #0
   19918:	bx	lr
   1991c:	clz	r2, r1
   19920:	rsb	r2, r2, #31
   19924:	lsr	r0, r0, r2
   19928:	bx	lr
   1992c:	cmp	r0, #0
   19930:	mvnne	r0, #0
   19934:	b	19b98 <argp_parse@@Base+0x3070>
   19938:	cmp	r1, #0
   1993c:	beq	1992c <argp_parse@@Base+0x2e04>
   19940:	push	{r0, r1, lr}
   19944:	bl	1974c <argp_parse@@Base+0x2c24>
   19948:	pop	{r1, r2, lr}
   1994c:	mul	r3, r2, r0
   19950:	sub	r1, r1, r3
   19954:	bx	lr
   19958:	cmp	r1, #0
   1995c:	beq	19b68 <argp_parse@@Base+0x3040>
   19960:	eor	ip, r0, r1
   19964:	rsbmi	r1, r1, #0
   19968:	subs	r2, r1, #1
   1996c:	beq	19b34 <argp_parse@@Base+0x300c>
   19970:	movs	r3, r0
   19974:	rsbmi	r3, r0, #0
   19978:	cmp	r3, r1
   1997c:	bls	19b40 <argp_parse@@Base+0x3018>
   19980:	tst	r1, r2
   19984:	beq	19b50 <argp_parse@@Base+0x3028>
   19988:	clz	r2, r3
   1998c:	clz	r0, r1
   19990:	sub	r2, r0, r2
   19994:	rsbs	r2, r2, #31
   19998:	addne	r2, r2, r2, lsl #1
   1999c:	mov	r0, #0
   199a0:	addne	pc, pc, r2, lsl #2
   199a4:	nop			; (mov r0, r0)
   199a8:	cmp	r3, r1, lsl #31
   199ac:	adc	r0, r0, r0
   199b0:	subcs	r3, r3, r1, lsl #31
   199b4:	cmp	r3, r1, lsl #30
   199b8:	adc	r0, r0, r0
   199bc:	subcs	r3, r3, r1, lsl #30
   199c0:	cmp	r3, r1, lsl #29
   199c4:	adc	r0, r0, r0
   199c8:	subcs	r3, r3, r1, lsl #29
   199cc:	cmp	r3, r1, lsl #28
   199d0:	adc	r0, r0, r0
   199d4:	subcs	r3, r3, r1, lsl #28
   199d8:	cmp	r3, r1, lsl #27
   199dc:	adc	r0, r0, r0
   199e0:	subcs	r3, r3, r1, lsl #27
   199e4:	cmp	r3, r1, lsl #26
   199e8:	adc	r0, r0, r0
   199ec:	subcs	r3, r3, r1, lsl #26
   199f0:	cmp	r3, r1, lsl #25
   199f4:	adc	r0, r0, r0
   199f8:	subcs	r3, r3, r1, lsl #25
   199fc:	cmp	r3, r1, lsl #24
   19a00:	adc	r0, r0, r0
   19a04:	subcs	r3, r3, r1, lsl #24
   19a08:	cmp	r3, r1, lsl #23
   19a0c:	adc	r0, r0, r0
   19a10:	subcs	r3, r3, r1, lsl #23
   19a14:	cmp	r3, r1, lsl #22
   19a18:	adc	r0, r0, r0
   19a1c:	subcs	r3, r3, r1, lsl #22
   19a20:	cmp	r3, r1, lsl #21
   19a24:	adc	r0, r0, r0
   19a28:	subcs	r3, r3, r1, lsl #21
   19a2c:	cmp	r3, r1, lsl #20
   19a30:	adc	r0, r0, r0
   19a34:	subcs	r3, r3, r1, lsl #20
   19a38:	cmp	r3, r1, lsl #19
   19a3c:	adc	r0, r0, r0
   19a40:	subcs	r3, r3, r1, lsl #19
   19a44:	cmp	r3, r1, lsl #18
   19a48:	adc	r0, r0, r0
   19a4c:	subcs	r3, r3, r1, lsl #18
   19a50:	cmp	r3, r1, lsl #17
   19a54:	adc	r0, r0, r0
   19a58:	subcs	r3, r3, r1, lsl #17
   19a5c:	cmp	r3, r1, lsl #16
   19a60:	adc	r0, r0, r0
   19a64:	subcs	r3, r3, r1, lsl #16
   19a68:	cmp	r3, r1, lsl #15
   19a6c:	adc	r0, r0, r0
   19a70:	subcs	r3, r3, r1, lsl #15
   19a74:	cmp	r3, r1, lsl #14
   19a78:	adc	r0, r0, r0
   19a7c:	subcs	r3, r3, r1, lsl #14
   19a80:	cmp	r3, r1, lsl #13
   19a84:	adc	r0, r0, r0
   19a88:	subcs	r3, r3, r1, lsl #13
   19a8c:	cmp	r3, r1, lsl #12
   19a90:	adc	r0, r0, r0
   19a94:	subcs	r3, r3, r1, lsl #12
   19a98:	cmp	r3, r1, lsl #11
   19a9c:	adc	r0, r0, r0
   19aa0:	subcs	r3, r3, r1, lsl #11
   19aa4:	cmp	r3, r1, lsl #10
   19aa8:	adc	r0, r0, r0
   19aac:	subcs	r3, r3, r1, lsl #10
   19ab0:	cmp	r3, r1, lsl #9
   19ab4:	adc	r0, r0, r0
   19ab8:	subcs	r3, r3, r1, lsl #9
   19abc:	cmp	r3, r1, lsl #8
   19ac0:	adc	r0, r0, r0
   19ac4:	subcs	r3, r3, r1, lsl #8
   19ac8:	cmp	r3, r1, lsl #7
   19acc:	adc	r0, r0, r0
   19ad0:	subcs	r3, r3, r1, lsl #7
   19ad4:	cmp	r3, r1, lsl #6
   19ad8:	adc	r0, r0, r0
   19adc:	subcs	r3, r3, r1, lsl #6
   19ae0:	cmp	r3, r1, lsl #5
   19ae4:	adc	r0, r0, r0
   19ae8:	subcs	r3, r3, r1, lsl #5
   19aec:	cmp	r3, r1, lsl #4
   19af0:	adc	r0, r0, r0
   19af4:	subcs	r3, r3, r1, lsl #4
   19af8:	cmp	r3, r1, lsl #3
   19afc:	adc	r0, r0, r0
   19b00:	subcs	r3, r3, r1, lsl #3
   19b04:	cmp	r3, r1, lsl #2
   19b08:	adc	r0, r0, r0
   19b0c:	subcs	r3, r3, r1, lsl #2
   19b10:	cmp	r3, r1, lsl #1
   19b14:	adc	r0, r0, r0
   19b18:	subcs	r3, r3, r1, lsl #1
   19b1c:	cmp	r3, r1
   19b20:	adc	r0, r0, r0
   19b24:	subcs	r3, r3, r1
   19b28:	cmp	ip, #0
   19b2c:	rsbmi	r0, r0, #0
   19b30:	bx	lr
   19b34:	teq	ip, r0
   19b38:	rsbmi	r0, r0, #0
   19b3c:	bx	lr
   19b40:	movcc	r0, #0
   19b44:	asreq	r0, ip, #31
   19b48:	orreq	r0, r0, #1
   19b4c:	bx	lr
   19b50:	clz	r2, r1
   19b54:	rsb	r2, r2, #31
   19b58:	cmp	ip, #0
   19b5c:	lsr	r0, r3, r2
   19b60:	rsbmi	r0, r0, #0
   19b64:	bx	lr
   19b68:	cmp	r0, #0
   19b6c:	mvngt	r0, #-2147483648	; 0x80000000
   19b70:	movlt	r0, #-2147483648	; 0x80000000
   19b74:	b	19b98 <argp_parse@@Base+0x3070>
   19b78:	cmp	r1, #0
   19b7c:	beq	19b68 <argp_parse@@Base+0x3040>
   19b80:	push	{r0, r1, lr}
   19b84:	bl	19960 <argp_parse@@Base+0x2e38>
   19b88:	pop	{r1, r2, lr}
   19b8c:	mul	r3, r2, r0
   19b90:	sub	r1, r1, r3
   19b94:	bx	lr
   19b98:	push	{r1, lr}
   19b9c:	mov	r0, #8
   19ba0:	bl	110ec <raise@plt>
   19ba4:	pop	{r1, pc}
   19ba8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19bac:	mov	r7, r0
   19bb0:	ldr	r6, [pc, #72]	; 19c00 <argp_parse@@Base+0x30d8>
   19bb4:	ldr	r5, [pc, #72]	; 19c04 <argp_parse@@Base+0x30dc>
   19bb8:	add	r6, pc, r6
   19bbc:	add	r5, pc, r5
   19bc0:	sub	r6, r6, r5
   19bc4:	mov	r8, r1
   19bc8:	mov	r9, r2
   19bcc:	bl	110b4 <calloc@plt-0x20>
   19bd0:	asrs	r6, r6, #2
   19bd4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19bd8:	mov	r4, #0
   19bdc:	add	r4, r4, #1
   19be0:	ldr	r3, [r5], #4
   19be4:	mov	r2, r9
   19be8:	mov	r1, r8
   19bec:	mov	r0, r7
   19bf0:	blx	r3
   19bf4:	cmp	r6, r4
   19bf8:	bne	19bdc <argp_parse@@Base+0x30b4>
   19bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c00:	andeq	r2, r1, r0, asr r3
   19c04:	andeq	r2, r1, r8, asr #6
   19c08:	bx	lr

Disassembly of section .fini:

00019c0c <.fini>:
   19c0c:	push	{r3, lr}
   19c10:	pop	{r3, pc}
