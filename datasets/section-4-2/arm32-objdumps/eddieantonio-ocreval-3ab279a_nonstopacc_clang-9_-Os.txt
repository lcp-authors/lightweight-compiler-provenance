
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

00010b18 <.init>:
   10b18:	push	{r3, lr}
   10b1c:	bl	10d34 <__assert_fail@plt+0x4c>
   10b20:	pop	{r3, pc}

Disassembly of section .plt:

00010b24 <calloc@plt-0x14>:
   10b24:	push	{lr}		; (str lr, [sp, #-4]!)
   10b28:	ldr	lr, [pc, #4]	; 10b34 <calloc@plt-0x4>
   10b2c:	add	lr, pc, lr
   10b30:	ldr	pc, [lr, #8]!
   10b34:	andeq	r6, r1, ip, asr #9

00010b38 <calloc@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #90112	; 0x16000
   10b40:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b44 <strcmp@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #90112	; 0x16000
   10b4c:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b50 <printf@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #90112	; 0x16000
   10b58:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b5c <fopen@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #90112	; 0x16000
   10b64:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b68 <free@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #90112	; 0x16000
   10b70:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b74 <utf8proc_get_property@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #90112	; 0x16000
   10b7c:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b80 <fgets@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #90112	; 0x16000
   10b88:	ldr	pc, [ip, #1180]!	; 0x49c

00010b8c <utf8proc_encode_char@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #90112	; 0x16000
   10b94:	ldr	pc, [ip, #1172]!	; 0x494

00010b98 <strdup@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #90112	; 0x16000
   10ba0:	ldr	pc, [ip, #1164]!	; 0x48c

00010ba4 <rewind@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #90112	; 0x16000
   10bac:	ldr	pc, [ip, #1156]!	; 0x484

00010bb0 <unlink@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #90112	; 0x16000
   10bb8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bbc <utf8proc_tolower@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #90112	; 0x16000
   10bc4:	ldr	pc, [ip, #1140]!	; 0x474

00010bc8 <__xstat@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #90112	; 0x16000
   10bd0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bd4 <fread@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #90112	; 0x16000
   10bdc:	ldr	pc, [ip, #1124]!	; 0x464

00010be0 <utf8proc_iterate@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #90112	; 0x16000
   10be8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bec <malloc@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #90112	; 0x16000
   10bf4:	ldr	pc, [ip, #1108]!	; 0x454

00010bf8 <__libc_start_main@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #90112	; 0x16000
   10c00:	ldr	pc, [ip, #1100]!	; 0x44c

00010c04 <__sysv_signal@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #90112	; 0x16000
   10c0c:	ldr	pc, [ip, #1092]!	; 0x444

00010c10 <__gmon_start__@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #90112	; 0x16000
   10c18:	ldr	pc, [ip, #1084]!	; 0x43c

00010c1c <getpid@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #90112	; 0x16000
   10c24:	ldr	pc, [ip, #1076]!	; 0x434

00010c28 <exit@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #90112	; 0x16000
   10c30:	ldr	pc, [ip, #1068]!	; 0x42c

00010c34 <bcmp@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #90112	; 0x16000
   10c3c:	ldr	pc, [ip, #1060]!	; 0x424

00010c40 <utf8proc_category@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #90112	; 0x16000
   10c48:	ldr	pc, [ip, #1052]!	; 0x41c

00010c4c <strlen@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #90112	; 0x16000
   10c54:	ldr	pc, [ip, #1044]!	; 0x414

00010c58 <fprintf@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #90112	; 0x16000
   10c60:	ldr	pc, [ip, #1036]!	; 0x40c

00010c64 <__isoc99_sscanf@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #90112	; 0x16000
   10c6c:	ldr	pc, [ip, #1028]!	; 0x404

00010c70 <fclose@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #90112	; 0x16000
   10c78:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c7c <utf8proc_NFC@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #90112	; 0x16000
   10c84:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c88 <fputc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #90112	; 0x16000
   10c90:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c94 <sprintf@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #90112	; 0x16000
   10c9c:	ldr	pc, [ip, #996]!	; 0x3e4

00010ca0 <atoi@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #988]!	; 0x3dc

00010cac <utf8proc_errmsg@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #980]!	; 0x3d4

00010cb8 <fputs@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #972]!	; 0x3cc

00010cc4 <strncmp@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #964]!	; 0x3c4

00010cd0 <abort@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #956]!	; 0x3bc

00010cdc <getc@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #948]!	; 0x3b4

00010ce8 <__assert_fail@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #940]!	; 0x3ac

Disassembly of section .text:

00010cf8 <error@@Base-0x1868>:
   10cf8:	mov	fp, #0
   10cfc:	mov	lr, #0
   10d00:	pop	{r1}		; (ldr r1, [sp], #4)
   10d04:	mov	r2, sp
   10d08:	push	{r2}		; (str r2, [sp, #-4]!)
   10d0c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d10:	ldr	ip, [pc, #16]	; 10d28 <__assert_fail@plt+0x40>
   10d14:	push	{ip}		; (str ip, [sp, #-4]!)
   10d18:	ldr	r0, [pc, #12]	; 10d2c <__assert_fail@plt+0x44>
   10d1c:	ldr	r3, [pc, #12]	; 10d30 <__assert_fail@plt+0x48>
   10d20:	bl	10bf8 <__libc_start_main@plt>
   10d24:	bl	10cd0 <abort@plt>
   10d28:	andeq	r3, r1, r8, rrx
   10d2c:	andeq	r1, r1, r0, lsl r0
   10d30:	andeq	r3, r1, r8
   10d34:	ldr	r3, [pc, #20]	; 10d50 <__assert_fail@plt+0x68>
   10d38:	ldr	r2, [pc, #20]	; 10d54 <__assert_fail@plt+0x6c>
   10d3c:	add	r3, pc, r3
   10d40:	ldr	r2, [r3, r2]
   10d44:	cmp	r2, #0
   10d48:	bxeq	lr
   10d4c:	b	10c10 <__gmon_start__@plt>
   10d50:			; <UNDEFINED> instruction: 0x000162bc
   10d54:	andeq	r0, r0, r0, lsr #1
   10d58:	ldr	r0, [pc, #24]	; 10d78 <__assert_fail@plt+0x90>
   10d5c:	ldr	r3, [pc, #24]	; 10d7c <__assert_fail@plt+0x94>
   10d60:	cmp	r3, r0
   10d64:	bxeq	lr
   10d68:	ldr	r3, [pc, #16]	; 10d80 <__assert_fail@plt+0x98>
   10d6c:	cmp	r3, #0
   10d70:	bxeq	lr
   10d74:	bx	r3
   10d78:	andeq	r7, r2, r0, asr #1
   10d7c:	andeq	r7, r2, r0, asr #1
   10d80:	andeq	r0, r0, r0
   10d84:	ldr	r0, [pc, #36]	; 10db0 <__assert_fail@plt+0xc8>
   10d88:	ldr	r1, [pc, #36]	; 10db4 <__assert_fail@plt+0xcc>
   10d8c:	sub	r1, r1, r0
   10d90:	asr	r1, r1, #2
   10d94:	add	r1, r1, r1, lsr #31
   10d98:	asrs	r1, r1, #1
   10d9c:	bxeq	lr
   10da0:	ldr	r3, [pc, #16]	; 10db8 <__assert_fail@plt+0xd0>
   10da4:	cmp	r3, #0
   10da8:	bxeq	lr
   10dac:	bx	r3
   10db0:	andeq	r7, r2, r0, asr #1
   10db4:	andeq	r7, r2, r0, asr #1
   10db8:	andeq	r0, r0, r0
   10dbc:	push	{r4, lr}
   10dc0:	ldr	r4, [pc, #24]	; 10de0 <__assert_fail@plt+0xf8>
   10dc4:	ldrb	r3, [r4]
   10dc8:	cmp	r3, #0
   10dcc:	popne	{r4, pc}
   10dd0:	bl	10d58 <__assert_fail@plt+0x70>
   10dd4:	mov	r3, #1
   10dd8:	strb	r3, [r4]
   10ddc:	pop	{r4, pc}
   10de0:	ldrdeq	r7, [r2], -r0
   10de4:	b	10d84 <__assert_fail@plt+0x9c>
   10de8:	push	{fp, lr}
   10dec:	mov	fp, sp
   10df0:	bl	119c4 <__assert_fail@plt+0xcdc>
   10df4:	cmp	r0, #0
   10df8:	popeq	{fp, pc}
   10dfc:	movw	r2, #29000	; 0x7148
   10e00:	ldr	r1, [r0, #12]
   10e04:	ldr	r0, [r0, #16]
   10e08:	movt	r2, #2
   10e0c:	ldr	r3, [r2]
   10e10:	sub	r1, r3, r1
   10e14:	str	r1, [r2]
   10e18:	movw	r1, #46140	; 0xb43c
   10e1c:	movt	r1, #2
   10e20:	ldr	r2, [r1]
   10e24:	sub	r0, r2, r0
   10e28:	str	r0, [r1]
   10e2c:	pop	{fp, pc}
   10e30:	movw	r0, #46140	; 0xb43c
   10e34:	movw	r1, #29000	; 0x7148
   10e38:	movw	r3, #28884	; 0x70d4
   10e3c:	vldr	d16, [pc, #76]	; 10e90 <__assert_fail@plt+0x1a8>
   10e40:	movt	r0, #2
   10e44:	movt	r1, #2
   10e48:	movt	r3, #2
   10e4c:	ldr	r2, [r1]
   10e50:	ldr	r0, [r0]
   10e54:	ldr	r1, [r3]
   10e58:	sub	r0, r2, r0
   10e5c:	vmov	s2, r2
   10e60:	vmov	s0, r0
   10e64:	add	r0, r1, #1
   10e68:	vcvt.f64.s32	d17, s0
   10e6c:	vcvt.f64.s32	d18, s2
   10e70:	str	r0, [r3]
   10e74:	movw	r0, #12424	; 0x3088
   10e78:	movt	r0, #1
   10e7c:	vmul.f64	d16, d17, d16
   10e80:	vdiv.f64	d16, d16, d18
   10e84:	vmov	r2, r3, d16
   10e88:	b	10b50 <printf@plt>
   10e8c:	nop	{0}
   10e90:	andeq	r0, r0, r0
   10e94:	subsmi	r0, r9, r0
   10e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	add	fp, sp, #28
   10ea0:	sub	sp, sp, #4
   10ea4:	vpush	{d8}
   10ea8:	movw	r5, #29036	; 0x716c
   10eac:	movw	r7, #29000	; 0x7148
   10eb0:	movw	r6, #46140	; 0xb43c
   10eb4:	movt	r5, #2
   10eb8:	movt	r7, #2
   10ebc:	movt	r6, #2
   10ec0:	ldm	r5, {r0, r1}
   10ec4:	str	r1, [r6]
   10ec8:	cmp	r0, #0
   10ecc:	str	r0, [r7]
   10ed0:	beq	10ffc <__assert_fail@plt+0x314>
   10ed4:	sub	r2, r0, r1
   10ed8:	movw	r9, #28884	; 0x70d4
   10edc:	vldr	d8, [pc, #292]	; 11008 <__assert_fail@plt+0x320>
   10ee0:	vmov	s2, r0
   10ee4:	vmov	s0, r2
   10ee8:	movt	r9, #2
   10eec:	ldr	r1, [r9]
   10ef0:	vcvt.f64.s32	d16, s0
   10ef4:	vcvt.f64.s32	d17, s2
   10ef8:	add	r0, r1, #1
   10efc:	str	r0, [r9]
   10f00:	movw	r0, #12424	; 0x3088
   10f04:	movt	r0, #1
   10f08:	vmul.f64	d16, d16, d8
   10f0c:	vdiv.f64	d16, d16, d17
   10f10:	vmov	r2, r3, d16
   10f14:	bl	10b50 <printf@plt>
   10f18:	movw	r0, #29020	; 0x715c
   10f1c:	movt	r0, #2
   10f20:	ldr	r4, [r0]
   10f24:	cmp	r4, #0
   10f28:	beq	10ffc <__assert_fail@plt+0x314>
   10f2c:	movw	r8, #12424	; 0x3088
   10f30:	movw	r0, #9048	; 0x2358
   10f34:	add	sl, r5, #992	; 0x3e0
   10f38:	movt	r8, #1
   10f3c:	add	r5, r5, r0
   10f40:	ldr	r1, [r4, #8]
   10f44:	mov	r0, sl
   10f48:	bl	119c4 <__assert_fail@plt+0xcdc>
   10f4c:	cmp	r0, #0
   10f50:	beq	10f74 <__assert_fail@plt+0x28c>
   10f54:	ldr	r1, [r0, #12]
   10f58:	ldr	r2, [r7]
   10f5c:	ldr	r0, [r0, #16]
   10f60:	sub	r1, r2, r1
   10f64:	str	r1, [r7]
   10f68:	ldr	r1, [r6]
   10f6c:	sub	r0, r1, r0
   10f70:	str	r0, [r6]
   10f74:	ldr	r1, [r4, #8]
   10f78:	mov	r0, r5
   10f7c:	bl	119c4 <__assert_fail@plt+0xcdc>
   10f80:	cmp	r0, #0
   10f84:	beq	10fac <__assert_fail@plt+0x2c4>
   10f88:	ldr	r1, [r0, #12]
   10f8c:	ldr	r2, [r0, #16]
   10f90:	ldr	r0, [r7]
   10f94:	sub	r0, r0, r1
   10f98:	ldr	r1, [r6]
   10f9c:	str	r0, [r7]
   10fa0:	sub	r1, r1, r2
   10fa4:	str	r1, [r6]
   10fa8:	b	10fb0 <__assert_fail@plt+0x2c8>
   10fac:	ldr	r0, [r7]
   10fb0:	cmp	r0, #0
   10fb4:	beq	10ffc <__assert_fail@plt+0x314>
   10fb8:	ldr	r1, [r6]
   10fbc:	vmov	s2, r0
   10fc0:	sub	r2, r0, r1
   10fc4:	ldr	r1, [r9]
   10fc8:	vmov	s0, r2
   10fcc:	add	r0, r1, #1
   10fd0:	vcvt.f64.s32	d16, s0
   10fd4:	vcvt.f64.s32	d17, s2
   10fd8:	str	r0, [r9]
   10fdc:	mov	r0, r8
   10fe0:	vmul.f64	d16, d16, d8
   10fe4:	vdiv.f64	d16, d16, d17
   10fe8:	vmov	r2, r3, d16
   10fec:	bl	10b50 <printf@plt>
   10ff0:	ldr	r4, [r4, #4]
   10ff4:	cmp	r4, #0
   10ff8:	bne	10f40 <__assert_fail@plt+0x258>
   10ffc:	vpop	{d8}
   11000:	add	sp, sp, #4
   11004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11008:	andeq	r0, r0, r0
   1100c:	subsmi	r0, r9, r0
   11010:	push	{fp, lr}
   11014:	mov	fp, sp
   11018:	sub	sp, sp, #8
   1101c:	movw	r2, #12436	; 0x3094
   11020:	str	r0, [sp, #4]
   11024:	add	r0, sp, #4
   11028:	mov	r3, #0
   1102c:	mov	r4, r1
   11030:	movt	r2, #1
   11034:	bl	122f4 <__assert_fail@plt+0x160c>
   11038:	ldr	r0, [sp, #4]
   1103c:	cmp	r0, #2
   11040:	bne	11088 <__assert_fail@plt+0x3a0>
   11044:	movw	r5, #29004	; 0x714c
   11048:	ldr	r1, [r4]
   1104c:	movw	r2, #28844	; 0x70ac
   11050:	movt	r5, #2
   11054:	movt	r2, #2
   11058:	mov	r0, r5
   1105c:	bl	12730 <error@@Base+0x1d0>
   11060:	movw	r0, #29020	; 0x715c
   11064:	mov	r1, r5
   11068:	movt	r0, #2
   1106c:	bl	11c24 <__assert_fail@plt+0xf3c>
   11070:	ldr	r1, [r4, #4]
   11074:	movw	r0, #29036	; 0x716c
   11078:	movt	r0, #2
   1107c:	bl	11118 <__assert_fail@plt+0x430>
   11080:	bl	10e98 <__assert_fail@plt+0x1b0>
   11084:	bl	12520 <__assert_fail@plt+0x1838>
   11088:	movw	r0, #12472	; 0x30b8
   1108c:	movt	r0, #1
   11090:	bl	12560 <error@@Base>
   11094:	andeq	r0, r0, r0
   11098:	ldm	r0, {r3, ip}
   1109c:	add	r2, ip, r2
   110a0:	add	r1, r3, r1
   110a4:	stm	r0, {r1, r2}
   110a8:	bx	lr
   110ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   110b0:	add	fp, sp, #24
   110b4:	mov	r8, r3
   110b8:	mov	r5, r2
   110bc:	mov	r4, r1
   110c0:	mov	r6, r0
   110c4:	bl	119c4 <__assert_fail@plt+0xcdc>
   110c8:	mov	r7, r0
   110cc:	cmp	r0, #0
   110d0:	bne	110fc <__assert_fail@plt+0x414>
   110d4:	mov	r0, #1
   110d8:	mov	r1, #20
   110dc:	bl	120cc <__assert_fail@plt+0x13e4>
   110e0:	mov	r7, r0
   110e4:	mov	r0, r4
   110e8:	bl	10b98 <strdup@plt>
   110ec:	str	r0, [r7, #8]
   110f0:	mov	r0, r6
   110f4:	mov	r1, r7
   110f8:	bl	11a48 <__assert_fail@plt+0xd60>
   110fc:	ldr	r0, [r7, #12]
   11100:	ldr	r1, [r7, #16]
   11104:	add	r0, r0, r5
   11108:	add	r1, r1, r8
   1110c:	str	r0, [r7, #12]
   11110:	str	r1, [r7, #16]
   11114:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11118:	push	{r4, r5, r6, r7, fp, lr}
   1111c:	add	fp, sp, #16
   11120:	sub	sp, sp, #8
   11124:	mov	r6, r1
   11128:	movw	r1, #26357	; 0x66f5
   1112c:	mov	r5, r0
   11130:	movt	r1, #1
   11134:	mov	r0, r6
   11138:	bl	12168 <__assert_fail@plt+0x1480>
   1113c:	mov	r4, r0
   11140:	movw	r0, #28888	; 0x70d8
   11144:	mov	r1, #99	; 0x63
   11148:	movt	r0, #2
   1114c:	mov	r2, r4
   11150:	bl	10b80 <fgets@plt>
   11154:	cmp	r0, #0
   11158:	beq	112a8 <__assert_fail@plt+0x5c0>
   1115c:	movw	r0, #28888	; 0x70d8
   11160:	movw	r1, #12496	; 0x30d0
   11164:	mov	r2, #45	; 0x2d
   11168:	movt	r0, #2
   1116c:	movt	r1, #1
   11170:	bl	10c34 <bcmp@plt>
   11174:	cmp	r0, #0
   11178:	bne	112a8 <__assert_fail@plt+0x5c0>
   1117c:	movw	r0, #28888	; 0x70d8
   11180:	mov	r1, #99	; 0x63
   11184:	mov	r2, r4
   11188:	movt	r0, #2
   1118c:	bl	10b80 <fgets@plt>
   11190:	cmp	r0, #0
   11194:	beq	112a8 <__assert_fail@plt+0x5c0>
   11198:	movw	r0, #28888	; 0x70d8
   1119c:	movw	r1, #26287	; 0x66af
   111a0:	mov	r2, #48	; 0x30
   111a4:	movt	r0, #2
   111a8:	movt	r1, #1
   111ac:	bl	10c34 <bcmp@plt>
   111b0:	cmp	r0, #0
   111b4:	bne	112a8 <__assert_fail@plt+0x5c0>
   111b8:	add	r1, sp, #4
   111bc:	mov	r0, r4
   111c0:	bl	112c4 <__assert_fail@plt+0x5dc>
   111c4:	cmp	r0, #0
   111c8:	beq	112a8 <__assert_fail@plt+0x5c0>
   111cc:	mov	r1, sp
   111d0:	mov	r0, r4
   111d4:	bl	112c4 <__assert_fail@plt+0x5dc>
   111d8:	cmp	r0, #0
   111dc:	beq	112a8 <__assert_fail@plt+0x5c0>
   111e0:	movw	r0, #28888	; 0x70d8
   111e4:	mov	r1, #99	; 0x63
   111e8:	mov	r2, r4
   111ec:	movt	r0, #2
   111f0:	bl	10b80 <fgets@plt>
   111f4:	cmp	r0, #0
   111f8:	beq	112a8 <__assert_fail@plt+0x5c0>
   111fc:	movw	r0, #28888	; 0x70d8
   11200:	mov	r1, #99	; 0x63
   11204:	mov	r2, r4
   11208:	movt	r0, #2
   1120c:	bl	10b80 <fgets@plt>
   11210:	cmp	r0, #0
   11214:	beq	112a8 <__assert_fail@plt+0x5c0>
   11218:	ldr	r2, [sp, #4]
   1121c:	ldm	r5, {r0, r1}
   11220:	add	r0, r0, r2
   11224:	ldr	r2, [sp]
   11228:	add	r1, r1, r2
   1122c:	stm	r5, {r0, r1}
   11230:	add	r1, r5, #8
   11234:	mov	r0, r4
   11238:	bl	1131c <__assert_fail@plt+0x634>
   1123c:	mov	r7, r0
   11240:	add	r1, r5, #416	; 0x1a0
   11244:	mov	r0, r4
   11248:	bl	1131c <__assert_fail@plt+0x634>
   1124c:	mov	r6, r0
   11250:	add	r1, r5, #824	; 0x338
   11254:	mov	r0, r4
   11258:	bl	1131c <__assert_fail@plt+0x634>
   1125c:	ldr	r0, [sp, #4]
   11260:	cmp	r0, #1
   11264:	blt	11298 <__assert_fail@plt+0x5b0>
   11268:	add	r1, r5, #920	; 0x398
   1126c:	mov	r0, r4
   11270:	bl	1131c <__assert_fail@plt+0x634>
   11274:	cmp	r7, #1
   11278:	addge	r1, r5, #992	; 0x3e0
   1127c:	movge	r0, r4
   11280:	blge	1141c <__assert_fail@plt+0x734>
   11284:	cmp	r6, #1
   11288:	movwge	r0, #9048	; 0x2358
   1128c:	addge	r1, r5, r0
   11290:	movge	r0, r4
   11294:	blge	1141c <__assert_fail@plt+0x734>
   11298:	mov	r0, r4
   1129c:	bl	121e0 <__assert_fail@plt+0x14f8>
   112a0:	sub	sp, fp, #16
   112a4:	pop	{r4, r5, r6, r7, fp, pc}
   112a8:	movw	r0, #12544	; 0x3100
   112ac:	movw	r1, #12562	; 0x3112
   112b0:	cmp	r6, #0
   112b4:	movt	r0, #1
   112b8:	movt	r1, #1
   112bc:	movne	r1, r6
   112c0:	bl	125a0 <error@@Base+0x40>
   112c4:	push	{r4, sl, fp, lr}
   112c8:	add	fp, sp, #8
   112cc:	mov	r2, r0
   112d0:	movw	r0, #28888	; 0x70d8
   112d4:	mov	r4, r1
   112d8:	mov	r1, #99	; 0x63
   112dc:	movt	r0, #2
   112e0:	bl	10b80 <fgets@plt>
   112e4:	cmp	r0, #0
   112e8:	beq	11314 <__assert_fail@plt+0x62c>
   112ec:	movw	r0, #28888	; 0x70d8
   112f0:	movw	r1, #12677	; 0x3185
   112f4:	mov	r2, r4
   112f8:	movt	r0, #2
   112fc:	movt	r1, #1
   11300:	bl	10c64 <__isoc99_sscanf@plt>
   11304:	sub	r0, r0, #1
   11308:	clz	r0, r0
   1130c:	lsr	r0, r0, #5
   11310:	pop	{r4, sl, fp, pc}
   11314:	mov	r0, #0
   11318:	pop	{r4, sl, fp, pc}
   1131c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11320:	add	fp, sp, #28
   11324:	sub	sp, sp, #12
   11328:	mov	r5, r0
   1132c:	movw	r0, #28888	; 0x70d8
   11330:	mov	r4, r1
   11334:	mov	r1, #99	; 0x63
   11338:	movt	r0, #2
   1133c:	mov	r2, r5
   11340:	bl	10b80 <fgets@plt>
   11344:	mov	r6, #0
   11348:	cmp	r0, #0
   1134c:	beq	11410 <__assert_fail@plt+0x728>
   11350:	movw	r7, #28888	; 0x70d8
   11354:	mov	r1, #99	; 0x63
   11358:	mov	r2, r5
   1135c:	movt	r7, #2
   11360:	mov	r0, r7
   11364:	bl	10b80 <fgets@plt>
   11368:	cmp	r0, #0
   1136c:	beq	11410 <__assert_fail@plt+0x728>
   11370:	add	r1, sp, #8
   11374:	add	r2, sp, #4
   11378:	mov	r0, r5
   1137c:	bl	118bc <__assert_fail@plt+0xbd4>
   11380:	cmp	r0, #0
   11384:	beq	11410 <__assert_fail@plt+0x728>
   11388:	movw	r8, #12665	; 0x3179
   1138c:	mov	r6, #0
   11390:	add	r7, r7, #29
   11394:	add	r9, sp, #8
   11398:	add	sl, sp, #4
   1139c:	movt	r8, #1
   113a0:	mov	r0, r7
   113a4:	bl	10ca0 <atoi@plt>
   113a8:	cmp	r0, #0
   113ac:	beq	113b8 <__assert_fail@plt+0x6d0>
   113b0:	ldr	r1, [sp, #8]
   113b4:	b	113d8 <__assert_fail@plt+0x6f0>
   113b8:	mov	r0, r7
   113bc:	mov	r1, r8
   113c0:	mov	r2, #8
   113c4:	bl	10c34 <bcmp@plt>
   113c8:	ldr	r1, [sp, #8]
   113cc:	cmp	r0, #0
   113d0:	movwne	r0, #11
   113d4:	moveq	r6, r1
   113d8:	mov	r2, r4
   113dc:	ldr	r0, [r2, r0, lsl #3]!
   113e0:	add	r0, r0, r1
   113e4:	ldr	r1, [sp, #4]
   113e8:	str	r0, [r2]
   113ec:	ldr	r0, [r2, #4]
   113f0:	add	r0, r0, r1
   113f4:	mov	r1, r9
   113f8:	str	r0, [r2, #4]
   113fc:	mov	r0, r5
   11400:	mov	r2, sl
   11404:	bl	118bc <__assert_fail@plt+0xbd4>
   11408:	cmp	r0, #0
   1140c:	bne	113a0 <__assert_fail@plt+0x6b8>
   11410:	mov	r0, r6
   11414:	sub	sp, fp, #28
   11418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1141c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11420:	add	fp, sp, #28
   11424:	sub	sp, sp, #12
   11428:	mov	r5, r0
   1142c:	movw	r0, #28888	; 0x70d8
   11430:	mov	r4, r1
   11434:	mov	r1, #99	; 0x63
   11438:	movt	r0, #2
   1143c:	mov	r2, r5
   11440:	bl	10b80 <fgets@plt>
   11444:	cmp	r0, #0
   11448:	beq	114d0 <__assert_fail@plt+0x7e8>
   1144c:	movw	r6, #28888	; 0x70d8
   11450:	mov	r1, #99	; 0x63
   11454:	mov	r2, r5
   11458:	movt	r6, #2
   1145c:	mov	r0, r6
   11460:	bl	10b80 <fgets@plt>
   11464:	cmp	r0, #0
   11468:	beq	114d0 <__assert_fail@plt+0x7e8>
   1146c:	add	r1, sp, #8
   11470:	add	r2, sp, #4
   11474:	mov	r0, r5
   11478:	bl	118bc <__assert_fail@plt+0xbd4>
   1147c:	cmp	r0, #0
   11480:	beq	114d0 <__assert_fail@plt+0x7e8>
   11484:	mov	sl, #0
   11488:	add	r7, r6, #29
   1148c:	add	r8, sp, #8
   11490:	add	r9, sp, #4
   11494:	mov	r0, r6
   11498:	bl	10c4c <strlen@plt>
   1149c:	ldr	r2, [sp, #8]
   114a0:	ldr	r3, [sp, #4]
   114a4:	add	r0, r0, r6
   114a8:	mov	r1, r7
   114ac:	strb	sl, [r0, #-1]
   114b0:	mov	r0, r4
   114b4:	bl	110ac <__assert_fail@plt+0x3c4>
   114b8:	mov	r0, r5
   114bc:	mov	r1, r8
   114c0:	mov	r2, r9
   114c4:	bl	118bc <__assert_fail@plt+0xbd4>
   114c8:	cmp	r0, #0
   114cc:	bne	11494 <__assert_fail@plt+0x7ac>
   114d0:	sub	sp, fp, #28
   114d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   114dc:	add	fp, sp, #24
   114e0:	sub	sp, sp, #8
   114e4:	mov	r2, r1
   114e8:	movw	r1, #12568	; 0x3118
   114ec:	mov	r5, r0
   114f0:	movt	r1, #1
   114f4:	mov	r0, r2
   114f8:	bl	12168 <__assert_fail@plt+0x1480>
   114fc:	movw	r1, #12570	; 0x311a
   11500:	movw	r2, #12496	; 0x30d0
   11504:	movw	r3, #26287	; 0x66af
   11508:	mov	r4, r0
   1150c:	movt	r1, #1
   11510:	movt	r2, #1
   11514:	movt	r3, #1
   11518:	bl	10c58 <fprintf@plt>
   1151c:	ldr	r2, [r5]
   11520:	movw	r1, #12575	; 0x311f
   11524:	mov	r0, r4
   11528:	movt	r1, #1
   1152c:	bl	10c58 <fprintf@plt>
   11530:	ldr	r2, [r5, #4]
   11534:	movw	r1, #12589	; 0x312d
   11538:	mov	r0, r4
   1153c:	movt	r1, #1
   11540:	bl	10c58 <fprintf@plt>
   11544:	mov	r0, r4
   11548:	mov	r1, r5
   1154c:	bl	11650 <__assert_fail@plt+0x968>
   11550:	movw	r0, #12611	; 0x3143
   11554:	mov	r1, r4
   11558:	movt	r0, #1
   1155c:	bl	10cb8 <fputs@plt>
   11560:	movw	r3, #12624	; 0x3150
   11564:	mov	r7, #1
   11568:	mov	r8, #0
   1156c:	add	r1, r5, #8
   11570:	mov	r0, r4
   11574:	mov	r2, #50	; 0x32
   11578:	movt	r3, #1
   1157c:	str	r8, [sp]
   11580:	str	r7, [sp, #4]
   11584:	bl	116b0 <__assert_fail@plt+0x9c8>
   11588:	movw	r3, #12643	; 0x3163
   1158c:	add	r6, r5, #416	; 0x1a0
   11590:	mov	r0, r4
   11594:	mov	r2, #50	; 0x32
   11598:	str	r8, [sp]
   1159c:	str	r7, [sp, #4]
   115a0:	movt	r3, #1
   115a4:	mov	r1, r6
   115a8:	bl	116b0 <__assert_fail@plt+0x9c8>
   115ac:	movw	r3, #12634	; 0x315a
   115b0:	add	r1, r5, #824	; 0x338
   115b4:	mov	r0, r4
   115b8:	mov	r2, #10
   115bc:	str	r7, [sp]
   115c0:	str	r7, [sp, #4]
   115c4:	movt	r3, #1
   115c8:	bl	116b0 <__assert_fail@plt+0x9c8>
   115cc:	ldr	r0, [r5]
   115d0:	cmp	r0, #1
   115d4:	blt	1163c <__assert_fail@plt+0x954>
   115d8:	movw	r3, #12657	; 0x3171
   115dc:	add	r1, r5, #920	; 0x398
   115e0:	mov	r0, r4
   115e4:	mov	r2, #8
   115e8:	str	r8, [sp]
   115ec:	str	r8, [sp, #4]
   115f0:	movt	r3, #1
   115f4:	bl	116b0 <__assert_fail@plt+0x9c8>
   115f8:	ldr	r0, [r5, #8]
   115fc:	cmp	r0, #1
   11600:	blt	11618 <__assert_fail@plt+0x930>
   11604:	movw	r2, #12624	; 0x3150
   11608:	add	r1, r5, #992	; 0x3e0
   1160c:	mov	r0, r4
   11610:	movt	r2, #1
   11614:	bl	117f0 <__assert_fail@plt+0xb08>
   11618:	ldr	r0, [r6]
   1161c:	cmp	r0, #1
   11620:	blt	1163c <__assert_fail@plt+0x954>
   11624:	movw	r2, #12643	; 0x3163
   11628:	movw	r0, #9048	; 0x2358
   1162c:	movt	r2, #1
   11630:	add	r1, r5, r0
   11634:	mov	r0, r4
   11638:	bl	117f0 <__assert_fail@plt+0xb08>
   1163c:	mov	r0, r4
   11640:	sub	sp, fp, #24
   11644:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11648:	b	121e0 <__assert_fail@plt+0x14f8>
   1164c:	nop	{0}
   11650:	mov	ip, r0
   11654:	ldr	r0, [r1]
   11658:	cmp	r0, #0
   1165c:	beq	11698 <__assert_fail@plt+0x9b0>
   11660:	ldr	r1, [r1, #4]
   11664:	vldr	d16, [pc, #60]	; 116a8 <__assert_fail@plt+0x9c0>
   11668:	vmov	s2, r0
   1166c:	sub	r1, r0, r1
   11670:	mov	r0, ip
   11674:	vmov	s0, r1
   11678:	movw	r1, #12690	; 0x3192
   1167c:	movt	r1, #1
   11680:	vcvt.f64.s32	d17, s0
   11684:	vcvt.f64.s32	d18, s2
   11688:	vmul.f64	d16, d17, d16
   1168c:	vdiv.f64	d16, d16, d18
   11690:	vmov	r2, r3, d16
   11694:	b	10c58 <fprintf@plt>
   11698:	movw	r0, #12681	; 0x3189
   1169c:	mov	r1, ip
   116a0:	movt	r0, #1
   116a4:	b	10cb8 <fputs@plt>
   116a8:	andeq	r0, r0, r0
   116ac:	subsmi	r0, r9, r0
   116b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116b4:	add	fp, sp, #28
   116b8:	sub	sp, sp, #4
   116bc:	mov	r5, r1
   116c0:	movw	r1, #12696	; 0x3198
   116c4:	mov	r7, r2
   116c8:	mov	r2, r3
   116cc:	mov	r4, r0
   116d0:	movt	r1, #1
   116d4:	bl	10c58 <fprintf@plt>
   116d8:	movw	r0, #12744	; 0x31c8
   116dc:	mov	r1, r4
   116e0:	movt	r0, #1
   116e4:	bl	10cb8 <fputs@plt>
   116e8:	movw	r0, #12771	; 0x31e3
   116ec:	mov	r1, r4
   116f0:	movt	r0, #1
   116f4:	bl	10cb8 <fputs@plt>
   116f8:	ldrb	sl, [fp, #8]
   116fc:	movw	r0, #12701	; 0x319d
   11700:	movw	r1, #12697	; 0x3199
   11704:	movw	r2, #12708	; 0x31a4
   11708:	movt	r0, #1
   1170c:	movt	r1, #1
   11710:	movt	r2, #1
   11714:	cmp	sl, #0
   11718:	movne	r2, r0
   1171c:	mov	r0, r4
   11720:	bl	10c58 <fprintf@plt>
   11724:	ldr	r1, [fp, #12]
   11728:	lsl	r0, r7, #16
   1172c:	sxth	r6, r7
   11730:	cmp	r0, #65536	; 0x10000
   11734:	str	r1, [sp]
   11738:	blt	11784 <__assert_fail@plt+0xa9c>
   1173c:	movw	r8, #12715	; 0x31ab
   11740:	mov	r7, #1
   11744:	mov	r9, #1
   11748:	movt	r8, #1
   1174c:	mov	r1, r5
   11750:	ldr	r0, [r1, r7, lsl #3]!
   11754:	cmp	r0, #1
   11758:	blt	11774 <__assert_fail@plt+0xa8c>
   1175c:	mov	r0, r4
   11760:	bl	1191c <__assert_fail@plt+0xc34>
   11764:	mov	r0, r4
   11768:	mov	r1, r8
   1176c:	mov	r2, r7
   11770:	bl	10c58 <fprintf@plt>
   11774:	add	r9, r9, #1
   11778:	sxth	r7, r9
   1177c:	cmp	r6, r7
   11780:	bge	1174c <__assert_fail@plt+0xa64>
   11784:	cmp	sl, #0
   11788:	beq	117b8 <__assert_fail@plt+0xad0>
   1178c:	add	r1, r5, r6, lsl #3
   11790:	ldr	r0, [r1, #8]!
   11794:	cmp	r0, #1
   11798:	blt	117b8 <__assert_fail@plt+0xad0>
   1179c:	mov	r0, r4
   117a0:	bl	1191c <__assert_fail@plt+0xc34>
   117a4:	movw	r1, #12724	; 0x31b4
   117a8:	mov	r0, r4
   117ac:	mov	r2, r6
   117b0:	movt	r1, #1
   117b4:	bl	10c58 <fprintf@plt>
   117b8:	ldr	r0, [sp]
   117bc:	tst	r0, #255	; 0xff
   117c0:	beq	117e8 <__assert_fail@plt+0xb00>
   117c4:	mov	r0, r4
   117c8:	mov	r1, r5
   117cc:	bl	1191c <__assert_fail@plt+0xc34>
   117d0:	movw	r0, #12665	; 0x3179
   117d4:	mov	r1, r4
   117d8:	movt	r0, #1
   117dc:	sub	sp, fp, #28
   117e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117e4:	b	10cb8 <fputs@plt>
   117e8:	sub	sp, fp, #28
   117ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117f0:	push	{r4, r5, r6, r7, fp, lr}
   117f4:	add	fp, sp, #16
   117f8:	mov	r5, r0
   117fc:	mov	r0, r1
   11800:	mov	r6, r2
   11804:	mov	r4, r1
   11808:	bl	11b58 <__assert_fail@plt+0xe70>
   1180c:	movw	r0, #8048	; 0x1f70
   11810:	movw	r2, #6524	; 0x197c
   11814:	ldr	r1, [r4, r0]!
   11818:	movt	r2, #1
   1181c:	ldr	r0, [r4, #4]
   11820:	bl	12ecc <error@@Base+0x96c>
   11824:	movw	r1, #12696	; 0x3198
   11828:	mov	r0, r5
   1182c:	mov	r2, r6
   11830:	movt	r1, #1
   11834:	bl	10c58 <fprintf@plt>
   11838:	movw	r0, #12744	; 0x31c8
   1183c:	mov	r1, r5
   11840:	movt	r0, #1
   11844:	bl	10cb8 <fputs@plt>
   11848:	movw	r0, #12771	; 0x31e3
   1184c:	mov	r1, r5
   11850:	movt	r0, #1
   11854:	bl	10cb8 <fputs@plt>
   11858:	mov	r0, #10
   1185c:	mov	r1, r5
   11860:	bl	10c88 <fputc@plt>
   11864:	ldr	r0, [r4, #4]
   11868:	cmp	r0, #1
   1186c:	blt	118b8 <__assert_fail@plt+0xbd0>
   11870:	movw	r6, #12697	; 0x3199
   11874:	mov	r7, #0
   11878:	movt	r6, #1
   1187c:	ldr	r0, [r4]
   11880:	ldr	r0, [r0, r7, lsl #2]
   11884:	add	r1, r0, #12
   11888:	mov	r0, r5
   1188c:	bl	1191c <__assert_fail@plt+0xc34>
   11890:	ldr	r0, [r4]
   11894:	mov	r1, r6
   11898:	ldr	r0, [r0, r7, lsl #2]
   1189c:	ldr	r2, [r0, #8]
   118a0:	mov	r0, r5
   118a4:	bl	10c58 <fprintf@plt>
   118a8:	ldr	r0, [r4, #4]
   118ac:	add	r7, r7, #1
   118b0:	cmp	r7, r0
   118b4:	blt	1187c <__assert_fail@plt+0xb94>
   118b8:	pop	{r4, r5, r6, r7, fp, pc}
   118bc:	push	{r4, r5, fp, lr}
   118c0:	add	fp, sp, #8
   118c4:	mov	r4, r2
   118c8:	mov	r2, r0
   118cc:	movw	r0, #28888	; 0x70d8
   118d0:	mov	r5, r1
   118d4:	mov	r1, #99	; 0x63
   118d8:	movt	r0, #2
   118dc:	bl	10b80 <fgets@plt>
   118e0:	cmp	r0, #0
   118e4:	beq	11914 <__assert_fail@plt+0xc2c>
   118e8:	movw	r0, #28888	; 0x70d8
   118ec:	movw	r1, #12673	; 0x3181
   118f0:	mov	r2, r5
   118f4:	mov	r3, r4
   118f8:	movt	r0, #2
   118fc:	movt	r1, #1
   11900:	bl	10c64 <__isoc99_sscanf@plt>
   11904:	sub	r0, r0, #2
   11908:	clz	r0, r0
   1190c:	lsr	r0, r0, #5
   11910:	pop	{r4, r5, fp, pc}
   11914:	mov	r0, #0
   11918:	pop	{r4, r5, fp, pc}
   1191c:	push	{r4, r5, fp, lr}
   11920:	add	fp, sp, #8
   11924:	mov	r4, r0
   11928:	cmp	r1, #0
   1192c:	beq	11958 <__assert_fail@plt+0xc70>
   11930:	mov	r5, r1
   11934:	ldm	r1, {r2, r3}
   11938:	movw	r1, #12733	; 0x31bd
   1193c:	mov	r0, r4
   11940:	movt	r1, #1
   11944:	bl	10c58 <fprintf@plt>
   11948:	mov	r0, r4
   1194c:	mov	r1, r5
   11950:	bl	11650 <__assert_fail@plt+0x968>
   11954:	b	11968 <__assert_fail@plt+0xc80>
   11958:	movw	r0, #12744	; 0x31c8
   1195c:	mov	r1, r4
   11960:	movt	r0, #1
   11964:	bl	10cb8 <fputs@plt>
   11968:	movw	r0, #12771	; 0x31e3
   1196c:	mov	r1, r4
   11970:	movt	r0, #1
   11974:	pop	{r4, r5, fp, lr}
   11978:	b	10cb8 <fputs@plt>
   1197c:	ldr	r1, [r1, #8]
   11980:	ldr	r0, [r0, #8]
   11984:	b	120ec <__assert_fail@plt+0x1404>
   11988:	push	{r4, r5, r6, sl, fp, lr}
   1198c:	add	fp, sp, #16
   11990:	mov	r4, r0
   11994:	movw	r0, #8048	; 0x1f70
   11998:	movw	r6, #503	; 0x1f7
   1199c:	add	r5, r4, r0
   119a0:	mov	r0, r4
   119a4:	bl	12d24 <error@@Base+0x7c4>
   119a8:	subs	r6, r6, #1
   119ac:	add	r4, r4, #16
   119b0:	bne	119a0 <__assert_fail@plt+0xcb8>
   119b4:	mov	r0, #0
   119b8:	str	r0, [r5]
   119bc:	str	r0, [r5, #4]
   119c0:	pop	{r4, r5, r6, sl, fp, pc}
   119c4:	push	{r4, r5, r6, sl, fp, lr}
   119c8:	add	fp, sp, #16
   119cc:	mov	r5, r1
   119d0:	ldrb	r1, [r1]
   119d4:	mov	r4, #0
   119d8:	mov	r2, #0
   119dc:	cmp	r1, #0
   119e0:	beq	11a14 <__assert_fail@plt+0xd2c>
   119e4:	add	r3, r5, #1
   119e8:	mov	r2, #0
   119ec:	uxtab	r2, r2, r1
   119f0:	ldrb	r1, [r3], #1
   119f4:	cmp	r1, #0
   119f8:	bne	119ec <__assert_fail@plt+0xd04>
   119fc:	movw	r1, #20065	; 0x4e61
   11a00:	movt	r1, #33354	; 0x824a
   11a04:	umull	r1, r3, r2, r1
   11a08:	lsr	r1, r3, #8
   11a0c:	movw	r3, #503	; 0x1f7
   11a10:	mls	r2, r1, r3, r2
   11a14:	ldr	r6, [r0, r2, lsl #4]
   11a18:	cmp	r6, #0
   11a1c:	beq	11a40 <__assert_fail@plt+0xd58>
   11a20:	ldr	r1, [r6, #8]
   11a24:	mov	r0, r5
   11a28:	bl	10b44 <strcmp@plt>
   11a2c:	cmp	r0, #0
   11a30:	beq	11a3c <__assert_fail@plt+0xd54>
   11a34:	ldr	r6, [r6, #4]
   11a38:	b	11a18 <__assert_fail@plt+0xd30>
   11a3c:	mov	r4, r6
   11a40:	mov	r0, r4
   11a44:	pop	{r4, r5, r6, sl, fp, pc}
   11a48:	push	{r4, r5, fp, lr}
   11a4c:	add	fp, sp, #8
   11a50:	movw	r2, #8048	; 0x1f70
   11a54:	add	r5, r0, r2
   11a58:	ldr	r2, [r1, #8]
   11a5c:	ldrb	r3, [r2]
   11a60:	cmp	r3, #0
   11a64:	beq	11a9c <__assert_fail@plt+0xdb4>
   11a68:	add	r4, r2, #1
   11a6c:	mov	r2, #0
   11a70:	uxtab	r2, r2, r3
   11a74:	ldrb	r3, [r4], #1
   11a78:	cmp	r3, #0
   11a7c:	bne	11a70 <__assert_fail@plt+0xd88>
   11a80:	movw	r3, #20065	; 0x4e61
   11a84:	movt	r3, #33354	; 0x824a
   11a88:	umull	r3, r4, r2, r3
   11a8c:	lsr	r3, r4, #8
   11a90:	movw	r4, #503	; 0x1f7
   11a94:	mls	r2, r3, r4, r2
   11a98:	b	11aa0 <__assert_fail@plt+0xdb8>
   11a9c:	mov	r2, #0
   11aa0:	add	r0, r0, r2, lsl #4
   11aa4:	bl	12d30 <error@@Base+0x7d0>
   11aa8:	ldr	r0, [r5]
   11aac:	cmp	r0, #0
   11ab0:	beq	11ac0 <__assert_fail@plt+0xdd8>
   11ab4:	bl	10b68 <free@plt>
   11ab8:	mov	r0, #0
   11abc:	str	r0, [r5]
   11ac0:	ldr	r0, [r5, #4]
   11ac4:	add	r0, r0, #1
   11ac8:	str	r0, [r5, #4]
   11acc:	pop	{r4, r5, fp, pc}
   11ad0:	push	{r4, r5, fp, lr}
   11ad4:	add	fp, sp, #8
   11ad8:	movw	r2, #8048	; 0x1f70
   11adc:	add	r5, r0, r2
   11ae0:	ldr	r2, [r1, #8]
   11ae4:	ldrb	r3, [r2]
   11ae8:	cmp	r3, #0
   11aec:	beq	11b24 <__assert_fail@plt+0xe3c>
   11af0:	add	r4, r2, #1
   11af4:	mov	r2, #0
   11af8:	uxtab	r2, r2, r3
   11afc:	ldrb	r3, [r4], #1
   11b00:	cmp	r3, #0
   11b04:	bne	11af8 <__assert_fail@plt+0xe10>
   11b08:	movw	r3, #20065	; 0x4e61
   11b0c:	movt	r3, #33354	; 0x824a
   11b10:	umull	r3, r4, r2, r3
   11b14:	lsr	r3, r4, #8
   11b18:	movw	r4, #503	; 0x1f7
   11b1c:	mls	r2, r3, r4, r2
   11b20:	b	11b28 <__assert_fail@plt+0xe40>
   11b24:	mov	r2, #0
   11b28:	add	r0, r0, r2, lsl #4
   11b2c:	bl	12db8 <error@@Base+0x858>
   11b30:	ldr	r0, [r5]
   11b34:	cmp	r0, #0
   11b38:	beq	11b48 <__assert_fail@plt+0xe60>
   11b3c:	bl	10b68 <free@plt>
   11b40:	mov	r0, #0
   11b44:	str	r0, [r5]
   11b48:	ldr	r0, [r5, #4]
   11b4c:	sub	r0, r0, #1
   11b50:	str	r0, [r5, #4]
   11b54:	pop	{r4, r5, fp, pc}
   11b58:	push	{r4, r5, fp, lr}
   11b5c:	add	fp, sp, #8
   11b60:	mov	r4, r0
   11b64:	movw	r0, #8048	; 0x1f70
   11b68:	mov	r5, r4
   11b6c:	ldr	r0, [r5, r0]!
   11b70:	cmp	r0, #0
   11b74:	bne	11bc8 <__assert_fail@plt+0xee0>
   11b78:	ldr	r0, [r5, #4]
   11b7c:	cmp	r0, #0
   11b80:	popeq	{r4, r5, fp, pc}
   11b84:	mov	r1, #4
   11b88:	bl	120cc <__assert_fail@plt+0x13e4>
   11b8c:	str	r0, [r5]
   11b90:	mov	r0, #0
   11b94:	movw	ip, #503	; 0x1f7
   11b98:	mov	r2, #0
   11b9c:	ldr	r3, [r4, r2, lsl #4]
   11ba0:	cmp	r3, #0
   11ba4:	beq	11bbc <__assert_fail@plt+0xed4>
   11ba8:	ldr	r1, [r5]
   11bac:	str	r3, [r1, r0, lsl #2]
   11bb0:	add	r0, r0, #1
   11bb4:	ldr	r3, [r3, #4]
   11bb8:	b	11ba0 <__assert_fail@plt+0xeb8>
   11bbc:	add	r2, r2, #1
   11bc0:	cmp	r2, ip
   11bc4:	bne	11b9c <__assert_fail@plt+0xeb4>
   11bc8:	pop	{r4, r5, fp, pc}
   11bcc:	push	{r4, r5, r6, r7, fp, lr}
   11bd0:	add	fp, sp, #16
   11bd4:	mov	r5, r0
   11bd8:	movw	r0, #8048	; 0x1f70
   11bdc:	mov	r4, r1
   11be0:	movw	r7, #503	; 0x1f7
   11be4:	add	r6, r5, r0
   11be8:	mov	r0, r5
   11bec:	mov	r1, r4
   11bf0:	bl	12e8c <error@@Base+0x92c>
   11bf4:	subs	r7, r7, #1
   11bf8:	add	r5, r5, #16
   11bfc:	bne	11be8 <__assert_fail@plt+0xf00>
   11c00:	ldr	r0, [r6]
   11c04:	cmp	r0, #0
   11c08:	beq	11c18 <__assert_fail@plt+0xf30>
   11c0c:	bl	10b68 <free@plt>
   11c10:	mov	r0, #0
   11c14:	str	r0, [r6]
   11c18:	mov	r0, #0
   11c1c:	str	r0, [r6, #4]
   11c20:	pop	{r4, r5, r6, r7, fp, pc}
   11c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c28:	add	fp, sp, #28
   11c2c:	sub	sp, sp, #20
   11c30:	ldr	sl, [r1]
   11c34:	str	r0, [sp]
   11c38:	cmp	sl, #0
   11c3c:	str	sl, [sp, #8]
   11c40:	beq	11f88 <__assert_fail@plt+0x12a0>
   11c44:	add	r9, sp, #4
   11c48:	mov	r7, #17
   11c4c:	mov	r6, r9
   11c50:	mov	r0, r6
   11c54:	mov	r8, r7
   11c58:	bl	12008 <__assert_fail@plt+0x1320>
   11c5c:	mov	r6, r0
   11c60:	bl	12050 <__assert_fail@plt+0x1368>
   11c64:	mov	r7, r0
   11c68:	mov	r0, r6
   11c6c:	bl	12008 <__assert_fail@plt+0x1320>
   11c70:	mov	r5, r0
   11c74:	bl	12050 <__assert_fail@plt+0x1368>
   11c78:	mov	r4, r0
   11c7c:	mov	r0, r5
   11c80:	bl	12008 <__assert_fail@plt+0x1320>
   11c84:	bl	12050 <__assert_fail@plt+0x1368>
   11c88:	cmp	r7, #1
   11c8c:	cmpeq	r4, #2
   11c90:	beq	11de4 <__assert_fail@plt+0x10fc>
   11c94:	sub	r1, r7, #1
   11c98:	cmp	r1, #3
   11c9c:	subcs	r1, r4, #1
   11ca0:	cmpcs	r1, #3
   11ca4:	bcc	11e64 <__assert_fail@plt+0x117c>
   11ca8:	orr	r2, r7, #1
   11cac:	orr	r1, r4, #1
   11cb0:	cmp	r2, #9
   11cb4:	cmpeq	r1, #9
   11cb8:	beq	11de4 <__assert_fail@plt+0x10fc>
   11cbc:	cmp	r2, #9
   11cc0:	bne	11ce8 <__assert_fail@plt+0x1000>
   11cc4:	cmp	r4, #13
   11cc8:	bhi	11ce8 <__assert_fail@plt+0x1000>
   11ccc:	mov	r3, #1
   11cd0:	mov	r5, #13312	; 0x3400
   11cd4:	tst	r5, r3, lsl r4
   11cd8:	beq	11ce8 <__assert_fail@plt+0x1000>
   11cdc:	orr	r3, r0, #1
   11ce0:	cmp	r3, #9
   11ce4:	beq	11de4 <__assert_fail@plt+0x10fc>
   11ce8:	orr	r3, r8, #1
   11cec:	cmp	r3, #9
   11cf0:	bne	11d14 <__assert_fail@plt+0x102c>
   11cf4:	cmp	r7, #13
   11cf8:	bhi	11d14 <__assert_fail@plt+0x102c>
   11cfc:	mov	r3, #1
   11d00:	mov	r5, #13312	; 0x3400
   11d04:	tst	r5, r3, lsl r7
   11d08:	beq	11d14 <__assert_fail@plt+0x102c>
   11d0c:	cmp	r1, #9
   11d10:	beq	11de4 <__assert_fail@plt+0x10fc>
   11d14:	cmp	r7, #8
   11d18:	cmpeq	r4, #10
   11d1c:	beq	11de4 <__assert_fail@plt+0x10fc>
   11d20:	cmp	r7, #8
   11d24:	cmpeq	r4, #11
   11d28:	beq	11dd0 <__assert_fail@plt+0x10e8>
   11d2c:	cmp	r8, #8
   11d30:	cmpeq	r7, #11
   11d34:	beq	11ddc <__assert_fail@plt+0x10f4>
   11d38:	sub	r2, r2, #9
   11d3c:	sub	r3, r7, #15
   11d40:	clz	r2, r2
   11d44:	clz	r3, r3
   11d48:	lsr	ip, r2, #5
   11d4c:	sub	r2, r4, #15
   11d50:	lsr	r3, r3, #5
   11d54:	clz	r2, r2
   11d58:	orr	r5, r3, ip
   11d5c:	lsr	r2, r2, #5
   11d60:	tst	r5, r2
   11d64:	subeq	r1, r1, #9
   11d68:	clzeq	r1, r1
   11d6c:	lsreq	r1, r1, #5
   11d70:	andseq	r1, r3, r1
   11d74:	bne	11de4 <__assert_fail@plt+0x10fc>
   11d78:	cmp	r8, #15
   11d7c:	bne	11da0 <__assert_fail@plt+0x10b8>
   11d80:	subs	r1, r7, #10
   11d84:	orr	r2, r7, #2
   11d88:	movwne	r1, #1
   11d8c:	subs	r2, r2, #14
   11d90:	movwne	r2, #1
   11d94:	tst	r1, r2
   11d98:	cmpeq	r4, #15
   11d9c:	beq	11de4 <__assert_fail@plt+0x10fc>
   11da0:	cmp	r7, #15
   11da4:	bne	11df4 <__assert_fail@plt+0x110c>
   11da8:	subs	r1, r4, #10
   11dac:	orr	r2, r4, #2
   11db0:	movwne	r1, #1
   11db4:	subs	r2, r2, #14
   11db8:	movwne	r2, #1
   11dbc:	tst	r1, r2
   11dc0:	bne	11e00 <__assert_fail@plt+0x1118>
   11dc4:	cmp	r0, #15
   11dc8:	beq	11de4 <__assert_fail@plt+0x10fc>
   11dcc:	b	11e00 <__assert_fail@plt+0x1118>
   11dd0:	cmp	r0, #8
   11dd4:	beq	11de4 <__assert_fail@plt+0x10fc>
   11dd8:	b	11d2c <__assert_fail@plt+0x1044>
   11ddc:	cmp	r4, #8
   11de0:	bne	11d38 <__assert_fail@plt+0x1050>
   11de4:	ldr	r0, [r6, #4]
   11de8:	cmp	r0, #0
   11dec:	bne	11c50 <__assert_fail@plt+0xf68>
   11df0:	b	11e6c <__assert_fail@plt+0x1184>
   11df4:	cmp	r7, #7
   11df8:	cmpeq	r4, #7
   11dfc:	beq	11de4 <__assert_fail@plt+0x10fc>
   11e00:	cmp	r4, #16
   11e04:	bne	11e30 <__assert_fail@plt+0x1148>
   11e08:	orr	r0, r7, #8
   11e0c:	sub	r1, r7, #16
   11e10:	sub	r0, r0, #15
   11e14:	clz	r1, r1
   11e18:	clz	r0, r0
   11e1c:	lsr	r1, r1, #5
   11e20:	lsr	r0, r0, #5
   11e24:	orr	r0, r0, ip
   11e28:	orrs	r0, r1, r0
   11e2c:	bne	11de4 <__assert_fail@plt+0x10fc>
   11e30:	cmp	r7, #16
   11e34:	bne	11e58 <__assert_fail@plt+0x1170>
   11e38:	cmp	r4, #16
   11e3c:	bhi	11e64 <__assert_fail@plt+0x117c>
   11e40:	movw	r1, #33664	; 0x8380
   11e44:	mov	r0, #1
   11e48:	movt	r1, #1
   11e4c:	tst	r1, r0, lsl r4
   11e50:	bne	11de4 <__assert_fail@plt+0x10fc>
   11e54:	b	11e64 <__assert_fail@plt+0x117c>
   11e58:	cmp	r7, #5
   11e5c:	cmpeq	r4, #5
   11e60:	beq	11de4 <__assert_fail@plt+0x10fc>
   11e64:	cmp	r6, #0
   11e68:	beq	11f88 <__assert_fail@plt+0x12a0>
   11e6c:	mov	r7, r6
   11e70:	ldr	r6, [r6, #4]
   11e74:	cmp	r6, #0
   11e78:	beq	11e90 <__assert_fail@plt+0x11a8>
   11e7c:	mov	r0, r6
   11e80:	bl	12050 <__assert_fail@plt+0x1368>
   11e84:	orr	r0, r0, #2
   11e88:	cmp	r0, #6
   11e8c:	beq	11e6c <__assert_fail@plt+0x1184>
   11e90:	ldr	r0, [sl, #12]
   11e94:	bl	10b74 <utf8proc_get_property@plt>
   11e98:	ldrsh	r0, [r0]
   11e9c:	sub	r1, r0, #1
   11ea0:	cmp	r1, #12
   11ea4:	bcs	11f7c <__assert_fail@plt+0x1294>
   11ea8:	ldr	r5, [r7, #4]
   11eac:	cmp	r5, sl
   11eb0:	beq	11f20 <__assert_fail@plt+0x1238>
   11eb4:	mov	r4, #0
   11eb8:	mov	r6, sl
   11ebc:	cmp	r6, #0
   11ec0:	beq	11f90 <__assert_fail@plt+0x12a8>
   11ec4:	ldr	r0, [r6, #12]
   11ec8:	mov	r1, r9
   11ecc:	bl	10b8c <utf8proc_encode_char@plt>
   11ed0:	cmp	r0, #0
   11ed4:	beq	11fa8 <__assert_fail@plt+0x12c0>
   11ed8:	ldr	r6, [r6, #4]
   11edc:	add	r4, r0, r4
   11ee0:	cmp	r6, r5
   11ee4:	bne	11ebc <__assert_fail@plt+0x11d4>
   11ee8:	add	r0, r4, #1
   11eec:	bl	10bec <malloc@plt>
   11ef0:	mov	r4, r0
   11ef4:	mov	r6, #0
   11ef8:	cmp	sl, #0
   11efc:	beq	11fc8 <__assert_fail@plt+0x12e0>
   11f00:	ldr	r0, [sl, #12]
   11f04:	add	r1, r4, r6
   11f08:	bl	10b8c <utf8proc_encode_char@plt>
   11f0c:	ldr	sl, [sl, #4]
   11f10:	add	r6, r0, r6
   11f14:	cmp	sl, r5
   11f18:	bne	11ef8 <__assert_fail@plt+0x1210>
   11f1c:	b	11f30 <__assert_fail@plt+0x1248>
   11f20:	mov	r0, #1
   11f24:	bl	10bec <malloc@plt>
   11f28:	mov	r4, r0
   11f2c:	mov	r6, #0
   11f30:	mov	r0, #0
   11f34:	mov	r1, #12
   11f38:	strb	r0, [r4, r6]
   11f3c:	mov	r0, #1
   11f40:	bl	120cc <__assert_fail@plt+0x13e4>
   11f44:	mov	r5, r0
   11f48:	mov	r0, r4
   11f4c:	bl	10c7c <utf8proc_NFC@plt>
   11f50:	str	r0, [r5, #8]
   11f54:	ldr	r0, [sp]
   11f58:	mov	r1, r5
   11f5c:	bl	12d90 <error@@Base+0x830>
   11f60:	mov	r0, r4
   11f64:	bl	10b68 <free@plt>
   11f68:	ldr	sl, [r7, #4]
   11f6c:	cmp	sl, #0
   11f70:	str	sl, [sp, #8]
   11f74:	bne	11c48 <__assert_fail@plt+0xf60>
   11f78:	b	11f88 <__assert_fail@plt+0x12a0>
   11f7c:	cmp	r0, #29
   11f80:	beq	11ea8 <__assert_fail@plt+0x11c0>
   11f84:	b	11f68 <__assert_fail@plt+0x1280>
   11f88:	sub	sp, fp, #28
   11f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f90:	movw	r0, #25899	; 0x652b
   11f94:	movw	r1, #25892	; 0x6524
   11f98:	movw	r3, #25915	; 0x653b
   11f9c:	mov	r2, #249	; 0xf9
   11fa0:	movt	r0, #1
   11fa4:	b	11fbc <__assert_fail@plt+0x12d4>
   11fa8:	movw	r0, #25941	; 0x6555
   11fac:	movw	r1, #25892	; 0x6524
   11fb0:	movw	r3, #25915	; 0x653b
   11fb4:	mov	r2, #253	; 0xfd
   11fb8:	movt	r0, #1
   11fbc:	movt	r1, #1
   11fc0:	movt	r3, #1
   11fc4:	bl	10ce8 <__assert_fail@plt>
   11fc8:	movw	r0, #25899	; 0x652b
   11fcc:	movw	r1, #25892	; 0x6524
   11fd0:	movw	r3, #25960	; 0x6568
   11fd4:	movw	r2, #269	; 0x10d
   11fd8:	movt	r0, #1
   11fdc:	movt	r1, #1
   11fe0:	movt	r3, #1
   11fe4:	bl	10ce8 <__assert_fail@plt>
   11fe8:	push	{r4, sl, fp, lr}
   11fec:	add	fp, sp, #8
   11ff0:	mov	r4, r0
   11ff4:	ldr	r0, [r0, #8]
   11ff8:	bl	10b68 <free@plt>
   11ffc:	mov	r0, r4
   12000:	pop	{r4, sl, fp, lr}
   12004:	b	10b68 <free@plt>
   12008:	push	{r4, r5, fp, lr}
   1200c:	add	fp, sp, #8
   12010:	mov	r4, #0
   12014:	cmp	r0, #0
   12018:	beq	12048 <__assert_fail@plt+0x1360>
   1201c:	ldr	r5, [r0, #4]
   12020:	cmp	r5, #0
   12024:	beq	12048 <__assert_fail@plt+0x1360>
   12028:	mov	r0, r5
   1202c:	bl	12050 <__assert_fail@plt+0x1368>
   12030:	orr	r0, r0, #2
   12034:	cmp	r0, #6
   12038:	bne	12044 <__assert_fail@plt+0x135c>
   1203c:	ldr	r5, [r5, #4]
   12040:	b	12020 <__assert_fail@plt+0x1338>
   12044:	mov	r4, r5
   12048:	mov	r0, r4
   1204c:	pop	{r4, r5, fp, pc}
   12050:	push	{r4, sl, fp, lr}
   12054:	add	fp, sp, #8
   12058:	cmp	r0, #0
   1205c:	beq	120bc <__assert_fail@plt+0x13d4>
   12060:	ldr	lr, [r0, #12]
   12064:	movw	ip, #12776	; 0x31e8
   12068:	mov	r3, #0
   1206c:	movw	r2, #1092	; 0x444
   12070:	movt	ip, #1
   12074:	sub	r0, r2, r3
   12078:	add	r1, r3, r0, lsr #1
   1207c:	add	r0, r1, r1, lsl #1
   12080:	ldr	r4, [ip, r0, lsl #2]
   12084:	cmp	r4, lr
   12088:	bls	1209c <__assert_fail@plt+0x13b4>
   1208c:	sub	r2, r1, #1
   12090:	cmp	r2, r3
   12094:	bcs	12074 <__assert_fail@plt+0x138c>
   12098:	b	120b4 <__assert_fail@plt+0x13cc>
   1209c:	add	r0, ip, r0, lsl #2
   120a0:	ldr	r3, [r0, #4]
   120a4:	cmp	r3, lr
   120a8:	bcs	120c4 <__assert_fail@plt+0x13dc>
   120ac:	add	r3, r1, #1
   120b0:	b	12090 <__assert_fail@plt+0x13a8>
   120b4:	mov	r0, #0
   120b8:	pop	{r4, sl, fp, pc}
   120bc:	mov	r0, #18
   120c0:	pop	{r4, sl, fp, pc}
   120c4:	ldr	r0, [r0, #8]
   120c8:	pop	{r4, sl, fp, pc}
   120cc:	push	{fp, lr}
   120d0:	mov	fp, sp
   120d4:	bl	10b38 <calloc@plt>
   120d8:	cmp	r0, #0
   120dc:	popne	{fp, pc}
   120e0:	movw	r0, #25984	; 0x6580
   120e4:	movt	r0, #1
   120e8:	bl	12560 <error@@Base>
   120ec:	push	{r4, r5, r6, sl, fp, lr}
   120f0:	add	fp, sp, #16
   120f4:	ldrb	r3, [r0]
   120f8:	ldrb	ip, [r1]
   120fc:	mov	r2, r0
   12100:	mov	r0, #0
   12104:	cmp	r3, #0
   12108:	beq	12140 <__assert_fail@plt+0x1458>
   1210c:	add	r6, r2, #1
   12110:	add	lr, r1, #1
   12114:	mov	r2, #0
   12118:	uxtb	r4, ip
   1211c:	uxtb	r5, r3
   12120:	cmp	r5, r4
   12124:	bne	12150 <__assert_fail@plt+0x1468>
   12128:	ldrb	r3, [r6, r2]
   1212c:	ldrb	ip, [lr, r2]
   12130:	add	r2, r2, #1
   12134:	cmp	r3, #0
   12138:	bne	12118 <__assert_fail@plt+0x1430>
   1213c:	b	12144 <__assert_fail@plt+0x145c>
   12140:	mov	r2, #0
   12144:	cmp	ip, #0
   12148:	beq	12164 <__assert_fail@plt+0x147c>
   1214c:	mov	r3, #0
   12150:	ldrb	r1, [r1, r2]
   12154:	uxtb	r2, r3
   12158:	mov	r0, #1
   1215c:	cmp	r2, r1
   12160:	mvncc	r0, #0
   12164:	pop	{r4, r5, r6, sl, fp, pc}
   12168:	push	{r4, r5, fp, lr}
   1216c:	add	fp, sp, #8
   12170:	mov	r5, r1
   12174:	cmp	r0, #0
   12178:	beq	121ac <__assert_fail@plt+0x14c4>
   1217c:	mov	r1, r5
   12180:	mov	r4, r0
   12184:	bl	10b5c <fopen@plt>
   12188:	cmp	r0, #0
   1218c:	popne	{r4, r5, fp, pc}
   12190:	ldrb	r0, [r5]
   12194:	cmp	r0, #119	; 0x77
   12198:	bne	121d0 <__assert_fail@plt+0x14e8>
   1219c:	movw	r0, #26010	; 0x659a
   121a0:	mov	r1, r4
   121a4:	movt	r0, #1
   121a8:	bl	125a0 <error@@Base+0x40>
   121ac:	ldrb	r0, [r5]
   121b0:	movw	r1, #28872	; 0x70c8
   121b4:	movw	r2, #28876	; 0x70cc
   121b8:	movt	r1, #2
   121bc:	movt	r2, #2
   121c0:	cmp	r0, #114	; 0x72
   121c4:	moveq	r2, r1
   121c8:	ldr	r0, [r2]
   121cc:	pop	{r4, r5, fp, pc}
   121d0:	movw	r0, #26032	; 0x65b0
   121d4:	mov	r1, r4
   121d8:	movt	r0, #1
   121dc:	bl	125a0 <error@@Base+0x40>
   121e0:	movw	r1, #28872	; 0x70c8
   121e4:	movt	r1, #2
   121e8:	ldr	r1, [r1]
   121ec:	cmp	r1, r0
   121f0:	bxeq	lr
   121f4:	movw	r1, #28876	; 0x70cc
   121f8:	movt	r1, #2
   121fc:	ldr	r1, [r1]
   12200:	cmp	r1, r0
   12204:	beq	1220c <__assert_fail@plt+0x1524>
   12208:	b	10c70 <fclose@plt>
   1220c:	bx	lr
   12210:	push	{fp, lr}
   12214:	mov	fp, sp
   12218:	sub	sp, sp, #88	; 0x58
   1221c:	mov	r1, sp
   12220:	bl	1306c <error@@Base+0xb0c>
   12224:	clz	r0, r0
   12228:	lsr	r0, r0, #5
   1222c:	mov	sp, fp
   12230:	pop	{fp, pc}
   12234:	push	{r4, sl, fp, lr}
   12238:	add	fp, sp, #8
   1223c:	movw	r0, #28988	; 0x713c
   12240:	movt	r0, #2
   12244:	ldrh	r1, [r0]
   12248:	add	r1, r1, #1
   1224c:	strh	r1, [r0]
   12250:	sxth	r0, r1
   12254:	bl	12268 <__assert_fail@plt+0x1580>
   12258:	mov	r4, r0
   1225c:	bl	10bb0 <unlink@plt>
   12260:	mov	r0, r4
   12264:	pop	{r4, sl, fp, pc}
   12268:	push	{r4, r5, fp, lr}
   1226c:	add	fp, sp, #8
   12270:	sub	sp, sp, #104	; 0x68
   12274:	mov	r4, r0
   12278:	movw	r0, #46148	; 0xb444
   1227c:	movt	r0, #2
   12280:	ldr	r5, [r0]
   12284:	bl	10c1c <getpid@plt>
   12288:	movw	r1, #26073	; 0x65d9
   1228c:	mov	r3, r0
   12290:	sxth	r0, r4
   12294:	add	r4, sp, #4
   12298:	mov	r2, r5
   1229c:	movt	r1, #1
   122a0:	str	r0, [sp]
   122a4:	mov	r0, r4
   122a8:	bl	10c94 <sprintf@plt>
   122ac:	mov	r0, r4
   122b0:	bl	10b98 <strdup@plt>
   122b4:	sub	sp, fp, #8
   122b8:	pop	{r4, r5, fp, pc}
   122bc:	push	{r4, sl, fp, lr}
   122c0:	add	fp, sp, #8
   122c4:	mov	r4, r0
   122c8:	bl	10c4c <strlen@plt>
   122cc:	sub	r0, r0, #1
   122d0:	sxth	r0, r0
   122d4:	cmp	r0, #0
   122d8:	bmi	122e8 <__assert_fail@plt+0x1600>
   122dc:	ldrb	r1, [r4, r0]
   122e0:	cmp	r1, #47	; 0x2f
   122e4:	bne	122cc <__assert_fail@plt+0x15e4>
   122e8:	add	r0, r0, r4
   122ec:	add	r0, r0, #1
   122f0:	pop	{r4, sl, fp, pc}
   122f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f8:	add	fp, sp, #28
   122fc:	sub	sp, sp, #12
   12300:	stmib	sp, {r0, r1}
   12304:	mov	r6, r3
   12308:	str	r2, [sp]
   1230c:	ldr	r4, [r1]
   12310:	mov	r0, r4
   12314:	bl	10c4c <strlen@plt>
   12318:	sub	r0, r0, #1
   1231c:	sxth	r0, r0
   12320:	cmp	r0, #0
   12324:	bmi	12334 <__assert_fail@plt+0x164c>
   12328:	ldrb	r1, [r4, r0]
   1232c:	cmp	r1, #47	; 0x2f
   12330:	bne	12318 <__assert_fail@plt+0x1630>
   12334:	add	r0, r0, r4
   12338:	movw	r1, #46148	; 0xb444
   1233c:	movw	r4, #9768	; 0x2628
   12340:	movt	r1, #2
   12344:	movt	r4, #1
   12348:	add	r0, r0, #1
   1234c:	str	r0, [r1]
   12350:	mov	r0, #2
   12354:	mov	r1, r4
   12358:	bl	10c04 <__sysv_signal@plt>
   1235c:	mov	r0, #15
   12360:	mov	r1, r4
   12364:	bl	10c04 <__sysv_signal@plt>
   12368:	ldr	r0, [sp, #4]
   1236c:	ldr	r5, [r0]
   12370:	cmp	r5, #1
   12374:	bne	1238c <__assert_fail@plt+0x16a4>
   12378:	movw	r0, #28856	; 0x70b8
   1237c:	movt	r0, #2
   12380:	ldrb	r0, [r0]
   12384:	cmp	r0, #0
   12388:	bne	12508 <__assert_fail@plt+0x1820>
   1238c:	ldr	ip, [sp, #8]
   12390:	mov	r8, #0
   12394:	cmp	r5, #2
   12398:	blt	124e4 <__assert_fail@plt+0x17fc>
   1239c:	mov	r8, #0
   123a0:	mov	r7, #1
   123a4:	mov	r9, #1
   123a8:	ldr	r4, [ip, r7, lsl #2]
   123ac:	ldrb	r0, [r4]
   123b0:	cmp	r0, #45	; 0x2d
   123b4:	bne	1248c <__assert_fail@plt+0x17a4>
   123b8:	ldrb	sl, [r4, #1]
   123bc:	cmp	sl, #0
   123c0:	beq	1248c <__assert_fail@plt+0x17a4>
   123c4:	mov	r0, r4
   123c8:	bl	10c4c <strlen@plt>
   123cc:	mov	r2, r0
   123d0:	movw	r0, #26102	; 0x65f6
   123d4:	mov	r1, r4
   123d8:	movt	r0, #1
   123dc:	bl	10cc4 <strncmp@plt>
   123e0:	cmp	r0, #0
   123e4:	beq	12508 <__assert_fail@plt+0x1820>
   123e8:	ldr	ip, [sp, #8]
   123ec:	add	r1, r7, #1
   123f0:	mov	r0, #0
   123f4:	cmp	r1, r5
   123f8:	ldrlt	r0, [ip, r1, lsl #2]
   123fc:	cmp	r6, #0
   12400:	ldrbne	r2, [r6]
   12404:	cmpne	r2, #0
   12408:	beq	124f8 <__assert_fail@plt+0x1810>
   1240c:	mov	r1, #0
   12410:	cmp	sl, r2
   12414:	beq	1243c <__assert_fail@plt+0x1754>
   12418:	mov	r2, #1
   1241c:	sxth	r1, r2
   12420:	add	r3, r1, r1, lsl #1
   12424:	ldrb	r3, [r6, r3, lsl #2]
   12428:	cmp	r3, #0
   1242c:	beq	124f8 <__assert_fail@plt+0x1810>
   12430:	add	r2, r2, #1
   12434:	cmp	sl, r3
   12438:	bne	1241c <__assert_fail@plt+0x1734>
   1243c:	add	r1, r1, r1, lsl #1
   12440:	add	r3, r6, r1, lsl #2
   12444:	ldr	r1, [r3, #4]
   12448:	cmp	r1, #0
   1244c:	beq	124ac <__assert_fail@plt+0x17c4>
   12450:	mov	r2, r4
   12454:	cmp	r0, #0
   12458:	ldrb	r7, [r2, #2]!
   1245c:	cmpeq	r7, #0
   12460:	beq	124ac <__assert_fail@plt+0x17c4>
   12464:	ldr	r3, [r1]
   12468:	cmp	r3, #0
   1246c:	bne	12510 <__assert_fail@plt+0x1828>
   12470:	cmp	r7, #0
   12474:	movne	r0, r2
   12478:	str	r0, [r1]
   1247c:	ldrb	r0, [r2]
   12480:	cmp	r0, #0
   12484:	addeq	r9, r9, #1
   12488:	b	12498 <__assert_fail@plt+0x17b0>
   1248c:	sxth	r0, r8
   12490:	add	r8, r8, #1
   12494:	str	r4, [ip, r0, lsl #2]
   12498:	add	r9, r9, #1
   1249c:	sxth	r7, r9
   124a0:	cmp	r5, r7
   124a4:	bgt	123a8 <__assert_fail@plt+0x16c0>
   124a8:	b	124e4 <__assert_fail@plt+0x17fc>
   124ac:	ldr	r0, [r3, #8]
   124b0:	cmp	r0, #0
   124b4:	beq	124f8 <__assert_fail@plt+0x1810>
   124b8:	ldrb	r1, [r4, #2]
   124bc:	cmp	r1, #0
   124c0:	bne	124f8 <__assert_fail@plt+0x1810>
   124c4:	ldrb	r1, [r0]
   124c8:	cmp	r1, #0
   124cc:	bne	12510 <__assert_fail@plt+0x1828>
   124d0:	mov	r1, #1
   124d4:	strb	r1, [r0]
   124d8:	ldr	r0, [sp, #4]
   124dc:	ldr	r5, [r0]
   124e0:	b	12498 <__assert_fail@plt+0x17b0>
   124e4:	ldr	r1, [sp, #4]
   124e8:	sxth	r0, r8
   124ec:	str	r0, [r1]
   124f0:	sub	sp, fp, #28
   124f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f8:	movw	r0, #26123	; 0x660b
   124fc:	mov	r1, r4
   12500:	movt	r0, #1
   12504:	bl	125a0 <error@@Base+0x40>
   12508:	ldr	r0, [sp]
   1250c:	bl	12658 <error@@Base+0xf8>
   12510:	movw	r0, #26138	; 0x661a
   12514:	mov	r1, r4
   12518:	movt	r0, #1
   1251c:	bl	125a0 <error@@Base+0x40>
   12520:	push	{fp, lr}
   12524:	mov	fp, sp
   12528:	mov	r0, #0
   1252c:	bl	12530 <__assert_fail@plt+0x1848>
   12530:	push	{fp, lr}
   12534:	mov	fp, sp
   12538:	mov	r4, r0
   1253c:	movw	r0, #46152	; 0xb448
   12540:	movt	r0, #2
   12544:	ldr	r0, [r0]
   12548:	cmp	r0, #0
   1254c:	beq	12554 <__assert_fail@plt+0x186c>
   12550:	blx	r0
   12554:	bl	126a8 <error@@Base+0x148>
   12558:	mov	r0, r4
   1255c:	bl	10c28 <exit@plt>

00012560 <error@@Base>:
   12560:	push	{fp, lr}
   12564:	mov	fp, sp
   12568:	mov	r3, r0
   1256c:	movw	r0, #46148	; 0xb444
   12570:	movw	r1, #26052	; 0x65c4
   12574:	movt	r0, #2
   12578:	movt	r1, #1
   1257c:	ldr	r2, [r0]
   12580:	movw	r0, #28864	; 0x70c0
   12584:	movt	r0, #2
   12588:	ldr	r0, [r0]
   1258c:	bl	10c58 <fprintf@plt>
   12590:	movw	r0, #28860	; 0x70bc
   12594:	movt	r0, #2
   12598:	ldr	r0, [r0]
   1259c:	bl	12530 <__assert_fail@plt+0x1848>
   125a0:	push	{fp, lr}
   125a4:	mov	fp, sp
   125a8:	sub	sp, sp, #8
   125ac:	mov	r3, r0
   125b0:	movw	r0, #46148	; 0xb444
   125b4:	str	r1, [sp]
   125b8:	movw	r1, #26060	; 0x65cc
   125bc:	movt	r0, #2
   125c0:	movt	r1, #1
   125c4:	ldr	r2, [r0]
   125c8:	movw	r0, #28864	; 0x70c0
   125cc:	movt	r0, #2
   125d0:	ldr	r0, [r0]
   125d4:	bl	10c58 <fprintf@plt>
   125d8:	movw	r0, #28860	; 0x70bc
   125dc:	movt	r0, #2
   125e0:	ldr	r0, [r0]
   125e4:	bl	12530 <__assert_fail@plt+0x1848>
   125e8:	push	{fp, lr}
   125ec:	mov	fp, sp
   125f0:	sub	sp, sp, #8
   125f4:	mov	r3, r0
   125f8:	movw	r0, #46148	; 0xb444
   125fc:	str	r1, [sp]
   12600:	movw	r1, #26060	; 0x65cc
   12604:	movt	r0, #2
   12608:	movt	r1, #1
   1260c:	ldr	r2, [r0]
   12610:	movw	r0, #28864	; 0x70c0
   12614:	movt	r0, #2
   12618:	ldr	r0, [r0]
   1261c:	bl	10c58 <fprintf@plt>
   12620:	mov	sp, fp
   12624:	pop	{fp, pc}
   12628:	push	{fp, lr}
   1262c:	mov	fp, sp
   12630:	movw	r0, #28990	; 0x713e
   12634:	movt	r0, #2
   12638:	ldrb	r1, [r0]
   1263c:	cmp	r1, #1
   12640:	popeq	{fp, pc}
   12644:	mov	r1, #1
   12648:	strb	r1, [r0]
   1264c:	movw	r0, #26087	; 0x65e7
   12650:	movt	r0, #1
   12654:	bl	12560 <error@@Base>
   12658:	push	{fp, lr}
   1265c:	mov	fp, sp
   12660:	mov	r3, r0
   12664:	movw	r0, #46144	; 0xb440
   12668:	movt	r0, #2
   1266c:	ldr	r0, [r0]
   12670:	cmp	r0, #0
   12674:	bne	126a0 <error@@Base+0x140>
   12678:	movw	r0, #46148	; 0xb444
   1267c:	movw	r1, #26108	; 0x65fc
   12680:	movt	r0, #2
   12684:	movt	r1, #1
   12688:	ldr	r2, [r0]
   1268c:	movw	r0, #28864	; 0x70c0
   12690:	movt	r0, #2
   12694:	ldr	r0, [r0]
   12698:	bl	10c58 <fprintf@plt>
   1269c:	bl	12520 <__assert_fail@plt+0x1838>
   126a0:	blx	r0
   126a4:	bl	12520 <__assert_fail@plt+0x1838>
   126a8:	push	{r4, r5, r6, sl, fp, lr}
   126ac:	add	fp, sp, #16
   126b0:	movw	r5, #28988	; 0x713c
   126b4:	movt	r5, #2
   126b8:	ldrsh	r0, [r5]
   126bc:	cmp	r0, #1
   126c0:	blt	126f4 <error@@Base+0x194>
   126c4:	mov	r6, #1
   126c8:	sxth	r0, r6
   126cc:	bl	12268 <__assert_fail@plt+0x1580>
   126d0:	mov	r4, r0
   126d4:	bl	10bb0 <unlink@plt>
   126d8:	mov	r0, r4
   126dc:	bl	10b68 <free@plt>
   126e0:	add	r0, r6, #1
   126e4:	sxth	r6, r0
   126e8:	ldrsh	r0, [r5]
   126ec:	cmp	r6, r0
   126f0:	ble	126c8 <error@@Base+0x168>
   126f4:	pop	{r4, r5, r6, sl, fp, pc}
   126f8:	push	{r4, r5, r6, sl, fp, lr}
   126fc:	add	fp, sp, #16
   12700:	mov	r5, r1
   12704:	mov	r6, r0
   12708:	mov	r0, #1
   1270c:	mov	r1, #16
   12710:	mov	r4, r2
   12714:	bl	120cc <__assert_fail@plt+0x13e4>
   12718:	str	r4, [r0, #12]
   1271c:	mov	r1, r0
   12720:	strb	r5, [r0, #8]
   12724:	mov	r0, r6
   12728:	pop	{r4, r5, r6, sl, fp, lr}
   1272c:	b	12d90 <error@@Base+0x830>
   12730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12734:	add	fp, sp, #28
   12738:	sub	sp, sp, #124	; 0x7c
   1273c:	mov	r4, r2
   12740:	mov	r2, r1
   12744:	cmp	r1, #0
   12748:	str	r0, [sp, #16]
   1274c:	bne	1275c <error@@Base+0x1fc>
   12750:	ldrb	r0, [r4]
   12754:	cmp	r0, #0
   12758:	bne	12a88 <error@@Base+0x528>
   1275c:	ldr	r0, [sp, #16]
   12760:	movw	r1, #26357	; 0x66f5
   12764:	movt	r1, #1
   12768:	ldr	r0, [r0, #4]
   1276c:	str	r0, [sp, #4]
   12770:	mov	r0, r2
   12774:	bl	12168 <__assert_fail@plt+0x1480>
   12778:	mov	r6, r0
   1277c:	ldrb	r0, [r4]
   12780:	cmp	r0, #0
   12784:	beq	127cc <error@@Base+0x26c>
   12788:	add	r0, sp, #20
   1278c:	mov	r1, #99	; 0x63
   12790:	mov	r2, r6
   12794:	bl	10b80 <fgets@plt>
   12798:	cmp	r0, #0
   1279c:	beq	127bc <error@@Base+0x25c>
   127a0:	movw	r1, #26223	; 0x666f
   127a4:	add	r0, sp, #20
   127a8:	mov	r2, #51	; 0x33
   127ac:	movt	r1, #1
   127b0:	bl	10c34 <bcmp@plt>
   127b4:	cmp	r0, #0
   127b8:	beq	12a14 <error@@Base+0x4b4>
   127bc:	mov	r0, r6
   127c0:	bl	10ba4 <rewind@plt>
   127c4:	mov	r5, #0
   127c8:	strb	r5, [r4, #11]
   127cc:	ldr	r9, [r4, #4]
   127d0:	ldrb	r8, [r4, #1]
   127d4:	mov	r0, r6
   127d8:	str	r4, [sp, #8]
   127dc:	cmp	r9, #0
   127e0:	movweq	r9, #94	; 0x5e
   127e4:	bl	10cdc <getc@plt>
   127e8:	cmn	r0, #1
   127ec:	beq	128b0 <error@@Base+0x350>
   127f0:	add	r1, sp, #20
   127f4:	mov	sl, #0
   127f8:	sub	r4, fp, #32
   127fc:	add	r1, r1, #1
   12800:	str	r1, [sp, #12]
   12804:	movw	r1, #28160	; 0x6e00
   12808:	movt	r1, #2
   1280c:	add	r1, r1, r0
   12810:	ldrsb	r5, [r1]
   12814:	cmp	r5, #0
   12818:	ble	12a68 <error@@Base+0x508>
   1281c:	cmp	r5, #1
   12820:	strb	r0, [sp, #20]
   12824:	beq	12848 <error@@Base+0x2e8>
   12828:	ldr	r0, [sp, #12]
   1282c:	sub	r7, r5, #1
   12830:	mov	r1, #1
   12834:	mov	r3, r6
   12838:	mov	r2, r7
   1283c:	bl	10bd4 <fread@plt>
   12840:	cmp	r0, r7
   12844:	bne	12a7c <error@@Base+0x51c>
   12848:	add	r0, sp, #20
   1284c:	mov	r1, #4
   12850:	mov	r2, r4
   12854:	bl	10be0 <utf8proc_iterate@plt>
   12858:	cmp	r0, r5
   1285c:	bne	12a74 <error@@Base+0x514>
   12860:	ldr	r5, [fp, #-32]	; 0xffffffe0
   12864:	cmp	r8, #0
   12868:	beq	12878 <error@@Base+0x318>
   1286c:	mov	r7, #1
   12870:	cmp	r5, r9
   12874:	beq	1289c <error@@Base+0x33c>
   12878:	mov	r0, #1
   1287c:	mov	r1, #16
   12880:	bl	120cc <__assert_fail@plt+0x13e4>
   12884:	str	r5, [r0, #12]
   12888:	mov	r1, r0
   1288c:	strb	sl, [r0, #8]
   12890:	ldr	r0, [sp, #16]
   12894:	bl	12d90 <error@@Base+0x830>
   12898:	mov	r7, #0
   1289c:	mov	r0, r6
   128a0:	bl	10cdc <getc@plt>
   128a4:	cmn	r0, #1
   128a8:	mov	sl, r7
   128ac:	bne	12804 <error@@Base+0x2a4>
   128b0:	mov	r0, r6
   128b4:	bl	121e0 <__assert_fail@plt+0x14f8>
   128b8:	ldr	r8, [sp, #8]
   128bc:	ldr	r9, [sp, #4]
   128c0:	ldrb	r0, [r8, #9]
   128c4:	cmp	r0, #0
   128c8:	beq	129d4 <error@@Base+0x474>
   128cc:	cmp	r9, #0
   128d0:	ldr	r0, [sp, #16]
   128d4:	addne	r0, r9, #4
   128d8:	ldr	r6, [r0]
   128dc:	cmp	r6, #0
   128e0:	beq	129d4 <error@@Base+0x474>
   128e4:	mov	r5, #32
   128e8:	mov	r7, r6
   128ec:	ldr	r4, [r7, #12]
   128f0:	mov	r0, r4
   128f4:	bl	10b74 <utf8proc_get_property@plt>
   128f8:	cmp	r4, #10
   128fc:	ble	12918 <error@@Base+0x3b8>
   12900:	sub	r1, r4, #11
   12904:	cmp	r1, #3
   12908:	bcc	1293c <error@@Base+0x3dc>
   1290c:	cmp	r4, #160	; 0xa0
   12910:	beq	1293c <error@@Base+0x3dc>
   12914:	b	12928 <error@@Base+0x3c8>
   12918:	cmp	r4, #9
   1291c:	beq	1293c <error@@Base+0x3dc>
   12920:	cmp	r4, #10
   12924:	beq	12940 <error@@Base+0x3e0>
   12928:	ldrsh	r0, [r0]
   1292c:	sub	r0, r0, #23
   12930:	cmp	r0, #2
   12934:	strls	r5, [r7, #12]
   12938:	b	12940 <error@@Base+0x3e0>
   1293c:	str	r5, [r7, #12]
   12940:	ldr	r7, [r7, #4]
   12944:	cmp	r7, #0
   12948:	bne	128ec <error@@Base+0x38c>
   1294c:	mov	r4, #0
   12950:	ldr	r1, [r6, #12]
   12954:	ldr	r5, [r6, #4]
   12958:	cmp	r1, #32
   1295c:	bne	12998 <error@@Base+0x438>
   12960:	tst	r4, #255	; 0xff
   12964:	cmpne	r5, #0
   12968:	beq	129b4 <error@@Base+0x454>
   1296c:	ldr	r1, [r5, #12]
   12970:	cmp	r1, #10
   12974:	beq	129b4 <error@@Base+0x454>
   12978:	mov	r0, #1
   1297c:	cmp	r1, #32
   12980:	bne	129ac <error@@Base+0x44c>
   12984:	ldrb	r0, [r6, #8]
   12988:	ldrb	r1, [r5, #8]
   1298c:	orr	r0, r1, r0
   12990:	strb	r0, [r5, #8]
   12994:	b	129b4 <error@@Base+0x454>
   12998:	subs	r0, r1, #10
   1299c:	movwne	r0, #1
   129a0:	tst	r4, #255	; 0xff
   129a4:	cmpeq	r1, #10
   129a8:	beq	129b4 <error@@Base+0x454>
   129ac:	mov	r4, r0
   129b0:	b	129c8 <error@@Base+0x468>
   129b4:	ldr	r0, [sp, #16]
   129b8:	mov	r1, r6
   129bc:	bl	12db8 <error@@Base+0x858>
   129c0:	mov	r0, r6
   129c4:	bl	10b68 <free@plt>
   129c8:	cmp	r5, #0
   129cc:	mov	r6, r5
   129d0:	bne	12950 <error@@Base+0x3f0>
   129d4:	ldrb	r0, [r8, #10]
   129d8:	cmp	r0, #0
   129dc:	beq	12a0c <error@@Base+0x4ac>
   129e0:	cmp	r9, #0
   129e4:	ldr	r0, [sp, #16]
   129e8:	addne	r0, r9, #4
   129ec:	ldr	r4, [r0]
   129f0:	cmp	r4, #0
   129f4:	beq	12a0c <error@@Base+0x4ac>
   129f8:	ldr	r0, [r4, #12]
   129fc:	bl	10bbc <utf8proc_tolower@plt>
   12a00:	str	r0, [r4, #12]
   12a04:	ldr	r4, [r4, #4]
   12a08:	b	129f0 <error@@Base+0x490>
   12a0c:	sub	sp, fp, #28
   12a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a14:	movw	r8, #26279	; 0x66a7
   12a18:	mov	r7, #0
   12a1c:	add	r9, sp, #20
   12a20:	mov	r5, #1
   12a24:	movt	r8, #1
   12a28:	mov	r0, r9
   12a2c:	mov	r1, #99	; 0x63
   12a30:	mov	r2, r6
   12a34:	bl	10b80 <fgets@plt>
   12a38:	cmp	r0, #0
   12a3c:	beq	127c8 <error@@Base+0x268>
   12a40:	mov	r0, r9
   12a44:	mov	r1, r8
   12a48:	mov	r2, #56	; 0x38
   12a4c:	bl	10c34 <bcmp@plt>
   12a50:	cmp	r0, #0
   12a54:	addeq	r7, r7, #1
   12a58:	uxth	r0, r7
   12a5c:	cmp	r0, #2
   12a60:	bcc	12a28 <error@@Base+0x4c8>
   12a64:	b	127c8 <error@@Base+0x268>
   12a68:	movw	r0, #26335	; 0x66df
   12a6c:	movt	r0, #1
   12a70:	bl	12560 <error@@Base>
   12a74:	bl	10cac <utf8proc_errmsg@plt>
   12a78:	bl	12560 <error@@Base>
   12a7c:	movw	r0, #26359	; 0x66f7
   12a80:	movt	r0, #1
   12a84:	bl	12560 <error@@Base>
   12a88:	movw	r0, #26155	; 0x662b
   12a8c:	movw	r1, #26171	; 0x663b
   12a90:	movt	r0, #1
   12a94:	movt	r1, #1
   12a98:	bl	125a0 <error@@Base+0x40>
   12a9c:	push	{fp, lr}
   12aa0:	mov	fp, sp
   12aa4:	bl	10b8c <utf8proc_encode_char@plt>
   12aa8:	cmp	r0, #0
   12aac:	sxtbgt	r0, r0
   12ab0:	popgt	{fp, pc}
   12ab4:	movw	r0, #26181	; 0x6645
   12ab8:	movt	r0, #1
   12abc:	bl	12560 <error@@Base>
   12ac0:	push	{r4, r5, r6, r7, fp, lr}
   12ac4:	add	fp, sp, #16
   12ac8:	mov	r6, r3
   12acc:	mov	r4, r2
   12ad0:	mov	r5, r1
   12ad4:	tst	r0, #255	; 0xff
   12ad8:	beq	12af8 <error@@Base+0x598>
   12adc:	mov	r0, #94	; 0x5e
   12ae0:	mov	r1, r4
   12ae4:	bl	10b8c <utf8proc_encode_char@plt>
   12ae8:	cmp	r0, #0
   12aec:	ble	12b94 <error@@Base+0x634>
   12af0:	sxtb	r7, r0
   12af4:	b	12afc <error@@Base+0x59c>
   12af8:	mov	r7, #0
   12afc:	cmp	r5, #10
   12b00:	bne	12b28 <error@@Base+0x5c8>
   12b04:	movw	r0, #26071	; 0x65d7
   12b08:	movw	r1, #26204	; 0x665c
   12b0c:	tst	r6, #255	; 0xff
   12b10:	movt	r0, #1
   12b14:	movt	r1, #1
   12b18:	moveq	r1, r0
   12b1c:	add	r0, r4, r7
   12b20:	pop	{r4, r5, r6, r7, fp, lr}
   12b24:	b	10c94 <sprintf@plt>
   12b28:	mov	r0, r5
   12b2c:	bl	10b74 <utf8proc_get_property@plt>
   12b30:	cmp	r5, #32
   12b34:	beq	12b48 <error@@Base+0x5e8>
   12b38:	ldrsh	r0, [r0]
   12b3c:	sub	r1, r0, #1
   12b40:	cmp	r1, #22
   12b44:	bcs	12ba0 <error@@Base+0x640>
   12b48:	mov	r0, r5
   12b4c:	bl	10c40 <utf8proc_category@plt>
   12b50:	sub	r0, r0, #6
   12b54:	cmp	r0, #2
   12b58:	bhi	12b74 <error@@Base+0x614>
   12b5c:	add	r1, r4, r7
   12b60:	movw	r0, #9676	; 0x25cc
   12b64:	bl	10b8c <utf8proc_encode_char@plt>
   12b68:	cmp	r0, #0
   12b6c:	ble	12b94 <error@@Base+0x634>
   12b70:	sxtab	r7, r7, r0
   12b74:	add	r1, r4, r7
   12b78:	mov	r0, r5
   12b7c:	bl	10b8c <utf8proc_encode_char@plt>
   12b80:	cmp	r0, #0
   12b84:	sxtabgt	r0, r7, r0
   12b88:	movgt	r1, #0
   12b8c:	strbgt	r1, [r4, r0]
   12b90:	popgt	{r4, r5, r6, r7, fp, pc}
   12b94:	movw	r0, #26181	; 0x6645
   12b98:	movt	r0, #1
   12b9c:	bl	12560 <error@@Base>
   12ba0:	cmp	r0, #29
   12ba4:	beq	12b48 <error@@Base+0x5e8>
   12ba8:	add	r0, r4, r7
   12bac:	cmp	r5, #255	; 0xff
   12bb0:	bhi	12bc0 <error@@Base+0x660>
   12bb4:	movw	r1, #26209	; 0x6661
   12bb8:	movt	r1, #1
   12bbc:	b	12bc8 <error@@Base+0x668>
   12bc0:	movw	r1, #26216	; 0x6668
   12bc4:	movt	r1, #1
   12bc8:	mov	r2, r5
   12bcc:	pop	{r4, r5, r6, r7, fp, lr}
   12bd0:	b	10c94 <sprintf@plt>
   12bd4:	push	{r4, r5, r6, r7, fp, lr}
   12bd8:	add	fp, sp, #16
   12bdc:	sub	sp, sp, #16
   12be0:	mov	r6, r2
   12be4:	mov	r2, r1
   12be8:	movw	r1, #12568	; 0x3118
   12bec:	mov	r5, r0
   12bf0:	movt	r1, #1
   12bf4:	mov	r0, r2
   12bf8:	bl	12168 <__assert_fail@plt+0x1480>
   12bfc:	mov	r4, r0
   12c00:	cmp	r6, #0
   12c04:	beq	12c40 <error@@Base+0x6e0>
   12c08:	movw	r0, #26223	; 0x666f
   12c0c:	mov	r1, r4
   12c10:	movt	r0, #1
   12c14:	bl	10cb8 <fputs@plt>
   12c18:	movw	r7, #26279	; 0x66a7
   12c1c:	mov	r1, r4
   12c20:	movt	r7, #1
   12c24:	mov	r0, r7
   12c28:	bl	10cb8 <fputs@plt>
   12c2c:	mov	r0, r4
   12c30:	blx	r6
   12c34:	mov	r0, r7
   12c38:	mov	r1, r4
   12c3c:	bl	10cb8 <fputs@plt>
   12c40:	ldr	r6, [r5]
   12c44:	cmp	r6, #0
   12c48:	beq	12c7c <error@@Base+0x71c>
   12c4c:	add	r5, sp, #7
   12c50:	ldr	r1, [r6, #12]
   12c54:	ldrb	r0, [r6, #8]
   12c58:	mov	r2, r5
   12c5c:	mov	r3, #0
   12c60:	bl	12ac0 <error@@Base+0x560>
   12c64:	mov	r0, r5
   12c68:	mov	r1, r4
   12c6c:	bl	10cb8 <fputs@plt>
   12c70:	ldr	r6, [r6, #4]
   12c74:	cmp	r6, #0
   12c78:	bne	12c50 <error@@Base+0x6f0>
   12c7c:	mov	r0, r4
   12c80:	bl	121e0 <__assert_fail@plt+0x14f8>
   12c84:	sub	sp, fp, #16
   12c88:	pop	{r4, r5, r6, r7, fp, pc}
   12c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c90:	add	fp, sp, #28
   12c94:	sub	sp, sp, #4
   12c98:	mov	r9, #0
   12c9c:	mov	sl, r0
   12ca0:	str	r9, [sp]
   12ca4:	ldrb	r0, [r1]
   12ca8:	cmp	r0, #0
   12cac:	beq	12d0c <error@@Base+0x7ac>
   12cb0:	mov	r4, r1
   12cb4:	mov	r8, sp
   12cb8:	mov	r7, #1
   12cbc:	mov	r0, r4
   12cc0:	mvn	r1, #0
   12cc4:	mov	r2, r8
   12cc8:	bl	10be0 <utf8proc_iterate@plt>
   12ccc:	cmp	r0, #1
   12cd0:	blt	12d14 <error@@Base+0x7b4>
   12cd4:	ldr	r5, [sp]
   12cd8:	mov	r6, r0
   12cdc:	mov	r0, #1
   12ce0:	mov	r1, #16
   12ce4:	bl	120cc <__assert_fail@plt+0x13e4>
   12ce8:	str	r5, [r0, #12]
   12cec:	mov	r1, r0
   12cf0:	strb	r9, [r0, #8]
   12cf4:	mov	r0, sl
   12cf8:	bl	12d90 <error@@Base+0x830>
   12cfc:	ldrb	r0, [r4, r6]!
   12d00:	cmp	r0, #0
   12d04:	bne	12cbc <error@@Base+0x75c>
   12d08:	b	12d18 <error@@Base+0x7b8>
   12d0c:	mov	r7, #1
   12d10:	b	12d18 <error@@Base+0x7b8>
   12d14:	mov	r7, #0
   12d18:	mov	r0, r7
   12d1c:	sub	sp, fp, #28
   12d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d24:	vmov.i32	q8, #0	; 0x00000000
   12d28:	vst1.32	{d16-d17}, [r0]
   12d2c:	bx	lr
   12d30:	ldr	r3, [r0]
   12d34:	mov	r2, r1
   12d38:	mov	r1, #0
   12d3c:	b	12d40 <error@@Base+0x7e0>
   12d40:	push	{r4, sl, fp, lr}
   12d44:	add	fp, sp, #8
   12d48:	cmp	r1, #0
   12d4c:	mov	r4, r0
   12d50:	stm	r2, {r1, r3}
   12d54:	addne	r0, r1, #4
   12d58:	cmp	r3, #0
   12d5c:	addeq	r3, r4, #4
   12d60:	str	r2, [r0]
   12d64:	str	r2, [r3]
   12d68:	ldr	r0, [r4, #8]
   12d6c:	cmp	r0, #0
   12d70:	beq	12d80 <error@@Base+0x820>
   12d74:	bl	10b68 <free@plt>
   12d78:	mov	r0, #0
   12d7c:	str	r0, [r4, #8]
   12d80:	ldr	r0, [r4, #12]
   12d84:	add	r0, r0, #1
   12d88:	str	r0, [r4, #12]
   12d8c:	pop	{r4, sl, fp, pc}
   12d90:	mov	r2, r1
   12d94:	ldr	r1, [r0, #4]
   12d98:	mov	r3, #0
   12d9c:	b	12d40 <error@@Base+0x7e0>
   12da0:	mov	r3, r2
   12da4:	mov	r2, r1
   12da8:	ldr	r1, [r3]
   12dac:	b	12d40 <error@@Base+0x7e0>
   12db0:	ldr	r3, [r1, #4]
   12db4:	b	12d40 <error@@Base+0x7e0>
   12db8:	push	{r4, r5, fp, lr}
   12dbc:	add	fp, sp, #8
   12dc0:	mov	r4, r0
   12dc4:	ldm	r1, {r0, r2}
   12dc8:	cmp	r0, #0
   12dcc:	beq	12ddc <error@@Base+0x87c>
   12dd0:	str	r2, [r0, #4]
   12dd4:	ldr	r2, [r1, #4]
   12dd8:	b	12de0 <error@@Base+0x880>
   12ddc:	str	r2, [r4]
   12de0:	cmp	r2, #0
   12de4:	mov	r5, #0
   12de8:	addeq	r2, r4, #4
   12dec:	str	r0, [r2]
   12df0:	str	r5, [r1]
   12df4:	str	r5, [r1, #4]
   12df8:	ldr	r0, [r4, #8]
   12dfc:	cmp	r0, #0
   12e00:	beq	12e0c <error@@Base+0x8ac>
   12e04:	bl	10b68 <free@plt>
   12e08:	str	r5, [r4, #8]
   12e0c:	ldr	r0, [r4, #12]
   12e10:	sub	r0, r0, #1
   12e14:	str	r0, [r4, #12]
   12e18:	pop	{r4, r5, fp, pc}
   12e1c:	push	{r4, sl, fp, lr}
   12e20:	add	fp, sp, #8
   12e24:	mov	r4, r0
   12e28:	ldr	r0, [r0, #8]
   12e2c:	cmp	r0, #0
   12e30:	beq	12e38 <error@@Base+0x8d8>
   12e34:	pop	{r4, sl, fp, pc}
   12e38:	ldr	r0, [r4, #12]
   12e3c:	cmp	r0, #0
   12e40:	beq	12e34 <error@@Base+0x8d4>
   12e44:	mov	r1, #4
   12e48:	bl	120cc <__assert_fail@plt+0x13e4>
   12e4c:	str	r0, [r4, #8]
   12e50:	ldr	r1, [r4]
   12e54:	cmp	r1, #0
   12e58:	beq	12e34 <error@@Base+0x8d4>
   12e5c:	str	r1, [r0]
   12e60:	ldr	r0, [r1, #4]
   12e64:	cmp	r0, #0
   12e68:	popeq	{r4, sl, fp, pc}
   12e6c:	mov	r1, #4
   12e70:	ldr	r2, [r4, #8]
   12e74:	str	r0, [r2, r1]
   12e78:	add	r1, r1, #4
   12e7c:	ldr	r0, [r0, #4]
   12e80:	cmp	r0, #0
   12e84:	bne	12e70 <error@@Base+0x910>
   12e88:	b	12e34 <error@@Base+0x8d4>
   12e8c:	push	{r4, r5, r6, sl, fp, lr}
   12e90:	add	fp, sp, #16
   12e94:	ldr	r6, [r0]
   12e98:	cmp	r6, #0
   12e9c:	beq	12ec8 <error@@Base+0x968>
   12ea0:	mov	r4, r1
   12ea4:	mov	r5, r0
   12ea8:	mov	r0, r5
   12eac:	mov	r1, r6
   12eb0:	bl	12db8 <error@@Base+0x858>
   12eb4:	mov	r0, r6
   12eb8:	blx	r4
   12ebc:	ldr	r6, [r5]
   12ec0:	cmp	r6, #0
   12ec4:	bne	12ea8 <error@@Base+0x948>
   12ec8:	pop	{r4, r5, r6, sl, fp, pc}
   12ecc:	cmp	r0, #2
   12ed0:	bxlt	lr
   12ed4:	movw	r3, #28996	; 0x7144
   12ed8:	movt	r3, #2
   12edc:	str	r2, [r3]
   12ee0:	movw	r2, #28992	; 0x7140
   12ee4:	movt	r2, #2
   12ee8:	str	r1, [r2]
   12eec:	sub	r1, r0, #1
   12ef0:	mov	r0, #0
   12ef4:	b	12ef8 <error@@Base+0x998>
   12ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12efc:	add	fp, sp, #28
   12f00:	sub	sp, sp, #4
   12f04:	movw	r7, #28992	; 0x7140
   12f08:	movw	sl, #28996	; 0x7144
   12f0c:	mov	r8, r1
   12f10:	mov	r9, r0
   12f14:	movt	r7, #2
   12f18:	movt	sl, #2
   12f1c:	ldr	r0, [r7]
   12f20:	cmp	r9, r8
   12f24:	mov	r5, r8
   12f28:	mov	r4, r9
   12f2c:	ldr	r6, [r0, r9, lsl #2]
   12f30:	bge	12fe0 <error@@Base+0xa80>
   12f34:	mov	r4, r9
   12f38:	mov	r5, r8
   12f3c:	cmp	r4, r5
   12f40:	bge	12f68 <error@@Base+0xa08>
   12f44:	ldr	r0, [r7]
   12f48:	ldr	r2, [sl]
   12f4c:	ldr	r1, [r0, r5, lsl #2]
   12f50:	mov	r0, r6
   12f54:	blx	r2
   12f58:	cmn	r0, #1
   12f5c:	bgt	12f68 <error@@Base+0xa08>
   12f60:	sub	r5, r5, #1
   12f64:	b	12f3c <error@@Base+0x9dc>
   12f68:	cmp	r4, r5
   12f6c:	beq	12f80 <error@@Base+0xa20>
   12f70:	ldr	r0, [r7]
   12f74:	ldr	r1, [r0, r5, lsl #2]
   12f78:	str	r1, [r0, r4, lsl #2]
   12f7c:	add	r4, r4, #1
   12f80:	cmp	r4, r5
   12f84:	bge	12fb4 <error@@Base+0xa54>
   12f88:	ldr	r0, [r7]
   12f8c:	ldr	r2, [sl]
   12f90:	ldr	r1, [r0, r4, lsl #2]
   12f94:	mov	r0, r6
   12f98:	blx	r2
   12f9c:	cmp	r0, #1
   12fa0:	blt	12fb4 <error@@Base+0xa54>
   12fa4:	add	r4, r4, #1
   12fa8:	cmp	r5, r4
   12fac:	bne	12f88 <error@@Base+0xa28>
   12fb0:	b	12fd8 <error@@Base+0xa78>
   12fb4:	cmp	r4, r5
   12fb8:	beq	12fcc <error@@Base+0xa6c>
   12fbc:	ldr	r0, [r7]
   12fc0:	ldr	r1, [r0, r4, lsl #2]
   12fc4:	str	r1, [r0, r5, lsl #2]
   12fc8:	sub	r5, r5, #1
   12fcc:	cmp	r4, r5
   12fd0:	blt	12f3c <error@@Base+0x9dc>
   12fd4:	b	12fdc <error@@Base+0xa7c>
   12fd8:	mov	r4, r5
   12fdc:	ldr	r0, [r7]
   12fe0:	sub	r1, r5, #1
   12fe4:	str	r6, [r0, r5, lsl #2]
   12fe8:	cmp	r1, r9
   12fec:	movgt	r0, r9
   12ff0:	blgt	12ef8 <error@@Base+0x998>
   12ff4:	add	r9, r4, #1
   12ff8:	cmp	r9, r8
   12ffc:	blt	12f1c <error@@Base+0x9bc>
   13000:	sub	sp, fp, #28
   13004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13008:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1300c:	mov	r7, r0
   13010:	ldr	r6, [pc, #72]	; 13060 <error@@Base+0xb00>
   13014:	ldr	r5, [pc, #72]	; 13064 <error@@Base+0xb04>
   13018:	add	r6, pc, r6
   1301c:	add	r5, pc, r5
   13020:	sub	r6, r6, r5
   13024:	mov	r8, r1
   13028:	mov	r9, r2
   1302c:	bl	10b18 <calloc@plt-0x20>
   13030:	asrs	r6, r6, #2
   13034:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13038:	mov	r4, #0
   1303c:	add	r4, r4, #1
   13040:	ldr	r3, [r5], #4
   13044:	mov	r2, r9
   13048:	mov	r1, r8
   1304c:	mov	r0, r7
   13050:	blx	r3
   13054:	cmp	r6, r4
   13058:	bne	1303c <error@@Base+0xadc>
   1305c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13060:	ldrdeq	r3, [r1], -ip
   13064:	ldrdeq	r3, [r1], -r4
   13068:	bx	lr
   1306c:	mov	r2, r1
   13070:	mov	r1, r0
   13074:	mov	r0, #3
   13078:	b	10bc8 <__xstat@plt>

Disassembly of section .fini:

0001307c <.fini>:
   1307c:	push	{r3, lr}
   13080:	pop	{r3, pc}
