
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000117e8 <.init>:
   117e8:	push	{r3, lr}
   117ec:	bl	11cfc <__assert_fail@plt+0x50>
   117f0:	pop	{r3, pc}

Disassembly of section .plt:

000117f4 <pthread_mutex_unlock@plt-0x14>:
   117f4:	push	{lr}		; (str lr, [sp, #-4]!)
   117f8:	ldr	lr, [pc, #4]	; 11804 <pthread_mutex_unlock@plt-0x4>
   117fc:	add	lr, pc, lr
   11800:	ldr	pc, [lr, #8]!
   11804:	strdeq	pc, [r2], -ip

00011808 <pthread_mutex_unlock@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #192512	; 0x2f000
   11810:	ldr	pc, [ip, #2044]!	; 0x7fc

00011814 <fdopen@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #192512	; 0x2f000
   1181c:	ldr	pc, [ip, #2036]!	; 0x7f4

00011820 <calloc@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #192512	; 0x2f000
   11828:	ldr	pc, [ip, #2028]!	; 0x7ec

0001182c <wctype@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #192512	; 0x2f000
   11834:	ldr	pc, [ip, #2020]!	; 0x7e4

00011838 <raise@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #192512	; 0x2f000
   11840:	ldr	pc, [ip, #2012]!	; 0x7dc

00011844 <wcrtomb@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #192512	; 0x2f000
   1184c:	ldr	pc, [ip, #2004]!	; 0x7d4

00011850 <iswctype@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #192512	; 0x2f000
   11858:	ldr	pc, [ip, #1996]!	; 0x7cc

0001185c <strcmp@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #192512	; 0x2f000
   11864:	ldr	pc, [ip, #1988]!	; 0x7c4

00011868 <printf@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #192512	; 0x2f000
   11870:	ldr	pc, [ip, #1980]!	; 0x7bc

00011874 <pthread_mutex_destroy@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #192512	; 0x2f000
   1187c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011880 <fflush@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #192512	; 0x2f000
   11888:	ldr	pc, [ip, #1964]!	; 0x7ac

0001188c <wcwidth@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #192512	; 0x2f000
   11894:	ldr	pc, [ip, #1956]!	; 0x7a4

00011898 <getuid@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #192512	; 0x2f000
   118a0:	ldr	pc, [ip, #1948]!	; 0x79c

000118a4 <memmove@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #192512	; 0x2f000
   118ac:	ldr	pc, [ip, #1940]!	; 0x794

000118b0 <free@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #192512	; 0x2f000
   118b8:	ldr	pc, [ip, #1932]!	; 0x78c

000118bc <pthread_mutex_lock@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #192512	; 0x2f000
   118c4:	ldr	pc, [ip, #1924]!	; 0x784

000118c8 <ferror@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #192512	; 0x2f000
   118d0:	ldr	pc, [ip, #1916]!	; 0x77c

000118d4 <strndup@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #192512	; 0x2f000
   118dc:	ldr	pc, [ip, #1908]!	; 0x774

000118e0 <_exit@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #192512	; 0x2f000
   118e8:	ldr	pc, [ip, #1900]!	; 0x76c

000118ec <memcpy@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #192512	; 0x2f000
   118f4:	ldr	pc, [ip, #1892]!	; 0x764

000118f8 <pthread_mutex_init@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #192512	; 0x2f000
   11900:	ldr	pc, [ip, #1884]!	; 0x75c

00011904 <__strtoull_internal@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #192512	; 0x2f000
   1190c:	ldr	pc, [ip, #1876]!	; 0x754

00011910 <towlower@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #192512	; 0x2f000
   11918:	ldr	pc, [ip, #1868]!	; 0x74c

0001191c <mbsinit@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #192512	; 0x2f000
   11924:	ldr	pc, [ip, #1860]!	; 0x744

00011928 <time@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #192512	; 0x2f000
   11930:	ldr	pc, [ip, #1852]!	; 0x73c

00011934 <memcmp@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #192512	; 0x2f000
   1193c:	ldr	pc, [ip, #1844]!	; 0x734

00011940 <dcgettext@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #192512	; 0x2f000
   11948:	ldr	pc, [ip, #1836]!	; 0x72c

0001194c <realloc@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #192512	; 0x2f000
   11954:	ldr	pc, [ip, #1828]!	; 0x724

00011958 <textdomain@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #192512	; 0x2f000
   11960:	ldr	pc, [ip, #1820]!	; 0x71c

00011964 <iswcntrl@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #192512	; 0x2f000
   1196c:	ldr	pc, [ip, #1812]!	; 0x714

00011970 <geteuid@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #192512	; 0x2f000
   11978:	ldr	pc, [ip, #1804]!	; 0x70c

0001197c <iswprint@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #192512	; 0x2f000
   11984:	ldr	pc, [ip, #1796]!	; 0x704

00011988 <setgroups@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #192512	; 0x2f000
   11990:	ldr	pc, [ip, #1788]!	; 0x6fc

00011994 <__fxstat64@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #192512	; 0x2f000
   1199c:	ldr	pc, [ip, #1780]!	; 0x6f4

000119a0 <fwrite@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #192512	; 0x2f000
   119a8:	ldr	pc, [ip, #1772]!	; 0x6ec

000119ac <lseek64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #192512	; 0x2f000
   119b4:	ldr	pc, [ip, #1764]!	; 0x6e4

000119b8 <__ctype_get_mb_cur_max@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #192512	; 0x2f000
   119c0:	ldr	pc, [ip, #1756]!	; 0x6dc

000119c4 <fread@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #192512	; 0x2f000
   119cc:	ldr	pc, [ip, #1748]!	; 0x6d4

000119d0 <__fpending@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #192512	; 0x2f000
   119d8:	ldr	pc, [ip, #1740]!	; 0x6cc

000119dc <mbrtowc@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #192512	; 0x2f000
   119e4:	ldr	pc, [ip, #1732]!	; 0x6c4

000119e8 <error@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #192512	; 0x2f000
   119f0:	ldr	pc, [ip, #1724]!	; 0x6bc

000119f4 <fnmatch@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #192512	; 0x2f000
   119fc:	ldr	pc, [ip, #1716]!	; 0x6b4

00011a00 <open64@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #192512	; 0x2f000
   11a08:	ldr	pc, [ip, #1708]!	; 0x6ac

00011a0c <getenv@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #192512	; 0x2f000
   11a14:	ldr	pc, [ip, #1700]!	; 0x6a4

00011a18 <setgid@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #192512	; 0x2f000
   11a20:	ldr	pc, [ip, #1692]!	; 0x69c

00011a24 <malloc@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #192512	; 0x2f000
   11a2c:	ldr	pc, [ip, #1684]!	; 0x694

00011a30 <__libc_start_main@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #192512	; 0x2f000
   11a38:	ldr	pc, [ip, #1676]!	; 0x68c

00011a3c <strftime@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #192512	; 0x2f000
   11a44:	ldr	pc, [ip, #1668]!	; 0x684

00011a48 <__freading@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #192512	; 0x2f000
   11a50:	ldr	pc, [ip, #1660]!	; 0x67c

00011a54 <localtime@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #192512	; 0x2f000
   11a5c:	ldr	pc, [ip, #1652]!	; 0x674

00011a60 <__ctype_tolower_loc@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #192512	; 0x2f000
   11a68:	ldr	pc, [ip, #1644]!	; 0x66c

00011a6c <__ctype_toupper_loc@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #192512	; 0x2f000
   11a74:	ldr	pc, [ip, #1636]!	; 0x664

00011a78 <__gmon_start__@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #192512	; 0x2f000
   11a80:	ldr	pc, [ip, #1628]!	; 0x65c

00011a84 <getopt_long@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #192512	; 0x2f000
   11a8c:	ldr	pc, [ip, #1620]!	; 0x654

00011a90 <__ctype_b_loc@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #192512	; 0x2f000
   11a98:	ldr	pc, [ip, #1612]!	; 0x64c

00011a9c <exit@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #192512	; 0x2f000
   11aa4:	ldr	pc, [ip, #1604]!	; 0x644

00011aa8 <feof@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #192512	; 0x2f000
   11ab0:	ldr	pc, [ip, #1596]!	; 0x63c

00011ab4 <strtoul@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #192512	; 0x2f000
   11abc:	ldr	pc, [ip, #1588]!	; 0x634

00011ac0 <strlen@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #192512	; 0x2f000
   11ac8:	ldr	pc, [ip, #1580]!	; 0x62c

00011acc <strchr@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #192512	; 0x2f000
   11ad4:	ldr	pc, [ip, #1572]!	; 0x624

00011ad8 <fprintf@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #192512	; 0x2f000
   11ae0:	ldr	pc, [ip, #1564]!	; 0x61c

00011ae4 <ungetc@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #192512	; 0x2f000
   11aec:	ldr	pc, [ip, #1556]!	; 0x614

00011af0 <__errno_location@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #192512	; 0x2f000
   11af8:	ldr	pc, [ip, #1548]!	; 0x60c

00011afc <iswalnum@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #192512	; 0x2f000
   11b04:	ldr	pc, [ip, #1540]!	; 0x604

00011b08 <strncasecmp@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #192512	; 0x2f000
   11b10:	ldr	pc, [ip, #1532]!	; 0x5fc

00011b14 <__cxa_atexit@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #192512	; 0x2f000
   11b1c:	ldr	pc, [ip, #1524]!	; 0x5f4

00011b20 <getgid@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #192512	; 0x2f000
   11b28:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b2c <memset@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #192512	; 0x2f000
   11b34:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b38 <btowc@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #192512	; 0x2f000
   11b40:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b44 <fgetc@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #192512	; 0x2f000
   11b4c:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b50 <fileno@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #192512	; 0x2f000
   11b58:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b5c <difftime@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #192512	; 0x2f000
   11b64:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b68 <memchr@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #192512	; 0x2f000
   11b70:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b74 <fclose@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #192512	; 0x2f000
   11b7c:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b80 <strnlen@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #192512	; 0x2f000
   11b88:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b8c <fseeko64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #192512	; 0x2f000
   11b94:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b98 <fcntl64@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #192512	; 0x2f000
   11ba0:	ldr	pc, [ip, #1436]!	; 0x59c

00011ba4 <setlocale@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #192512	; 0x2f000
   11bac:	ldr	pc, [ip, #1428]!	; 0x594

00011bb0 <strrchr@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #192512	; 0x2f000
   11bb8:	ldr	pc, [ip, #1420]!	; 0x58c

00011bbc <nl_langinfo@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #192512	; 0x2f000
   11bc4:	ldr	pc, [ip, #1412]!	; 0x584

00011bc8 <fputc@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #192512	; 0x2f000
   11bd0:	ldr	pc, [ip, #1404]!	; 0x57c

00011bd4 <setuid@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #192512	; 0x2f000
   11bdc:	ldr	pc, [ip, #1396]!	; 0x574

00011be0 <localeconv@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #192512	; 0x2f000
   11be8:	ldr	pc, [ip, #1388]!	; 0x56c

00011bec <clearerr@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #192512	; 0x2f000
   11bf4:	ldr	pc, [ip, #1380]!	; 0x564

00011bf8 <sprintf@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #192512	; 0x2f000
   11c00:	ldr	pc, [ip, #1372]!	; 0x55c

00011c04 <putc@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #192512	; 0x2f000
   11c0c:	ldr	pc, [ip, #1364]!	; 0x554

00011c10 <strpbrk@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #192512	; 0x2f000
   11c18:	ldr	pc, [ip, #1356]!	; 0x54c

00011c1c <bindtextdomain@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #192512	; 0x2f000
   11c24:	ldr	pc, [ip, #1348]!	; 0x544

00011c28 <getdelim@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #192512	; 0x2f000
   11c30:	ldr	pc, [ip, #1340]!	; 0x53c

00011c34 <__xstat64@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #192512	; 0x2f000
   11c3c:	ldr	pc, [ip, #1332]!	; 0x534

00011c40 <isatty@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #192512	; 0x2f000
   11c48:	ldr	pc, [ip, #1324]!	; 0x52c

00011c4c <towupper@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #192512	; 0x2f000
   11c54:	ldr	pc, [ip, #1316]!	; 0x524

00011c58 <fputs@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #192512	; 0x2f000
   11c60:	ldr	pc, [ip, #1308]!	; 0x51c

00011c64 <strncmp@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #192512	; 0x2f000
   11c6c:	ldr	pc, [ip, #1300]!	; 0x514

00011c70 <abort@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #192512	; 0x2f000
   11c78:	ldr	pc, [ip, #1292]!	; 0x50c

00011c7c <getc@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #192512	; 0x2f000
   11c84:	ldr	pc, [ip, #1284]!	; 0x504

00011c88 <close@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #192512	; 0x2f000
   11c90:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c94 <__lxstat64@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #192512	; 0x2f000
   11c9c:	ldr	pc, [ip, #1268]!	; 0x4f4

00011ca0 <dcngettext@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #192512	; 0x2f000
   11ca8:	ldr	pc, [ip, #1260]!	; 0x4ec

00011cac <__assert_fail@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #192512	; 0x2f000
   11cb4:	ldr	pc, [ip, #1252]!	; 0x4e4

Disassembly of section .text:

00011cc0 <.text>:
   11cc0:	mov	fp, #0
   11cc4:	mov	lr, #0
   11cc8:	pop	{r1}		; (ldr r1, [sp], #4)
   11ccc:	mov	r2, sp
   11cd0:	push	{r2}		; (str r2, [sp, #-4]!)
   11cd4:	push	{r0}		; (str r0, [sp, #-4]!)
   11cd8:	ldr	ip, [pc, #16]	; 11cf0 <__assert_fail@plt+0x44>
   11cdc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ce0:	ldr	r0, [pc, #12]	; 11cf4 <__assert_fail@plt+0x48>
   11ce4:	ldr	r3, [pc, #12]	; 11cf8 <__assert_fail@plt+0x4c>
   11ce8:	bl	11a30 <__libc_start_main@plt>
   11cec:	bl	11c70 <abort@plt>
   11cf0:	andeq	lr, r2, r8, lsl #29
   11cf4:			; <UNDEFINED> instruction: 0x00011db0
   11cf8:	andeq	lr, r2, r8, lsr #28
   11cfc:	ldr	r3, [pc, #20]	; 11d18 <__assert_fail@plt+0x6c>
   11d00:	ldr	r2, [pc, #20]	; 11d1c <__assert_fail@plt+0x70>
   11d04:	add	r3, pc, r3
   11d08:	ldr	r2, [r3, r2]
   11d0c:	cmp	r2, #0
   11d10:	bxeq	lr
   11d14:	b	11a78 <__gmon_start__@plt>
   11d18:	strdeq	pc, [r2], -r4
   11d1c:	muleq	r0, ip, r1
   11d20:	ldr	r0, [pc, #24]	; 11d40 <__assert_fail@plt+0x94>
   11d24:	ldr	r3, [pc, #24]	; 11d44 <__assert_fail@plt+0x98>
   11d28:	cmp	r3, r0
   11d2c:	bxeq	lr
   11d30:	ldr	r3, [pc, #16]	; 11d48 <__assert_fail@plt+0x9c>
   11d34:	cmp	r3, #0
   11d38:	bxeq	lr
   11d3c:	bx	r3
   11d40:	strdeq	r1, [r4], -ip
   11d44:	strdeq	r1, [r4], -ip
   11d48:	andeq	r0, r0, r0
   11d4c:	ldr	r0, [pc, #36]	; 11d78 <__assert_fail@plt+0xcc>
   11d50:	ldr	r1, [pc, #36]	; 11d7c <__assert_fail@plt+0xd0>
   11d54:	sub	r1, r1, r0
   11d58:	asr	r1, r1, #2
   11d5c:	add	r1, r1, r1, lsr #31
   11d60:	asrs	r1, r1, #1
   11d64:	bxeq	lr
   11d68:	ldr	r3, [pc, #16]	; 11d80 <__assert_fail@plt+0xd4>
   11d6c:	cmp	r3, #0
   11d70:	bxeq	lr
   11d74:	bx	r3
   11d78:	strdeq	r1, [r4], -ip
   11d7c:	strdeq	r1, [r4], -ip
   11d80:	andeq	r0, r0, r0
   11d84:	push	{r4, lr}
   11d88:	ldr	r4, [pc, #24]	; 11da8 <__assert_fail@plt+0xfc>
   11d8c:	ldrb	r3, [r4]
   11d90:	cmp	r3, #0
   11d94:	popne	{r4, pc}
   11d98:	bl	11d20 <__assert_fail@plt+0x74>
   11d9c:	mov	r3, #1
   11da0:	strb	r3, [r4]
   11da4:	pop	{r4, pc}
   11da8:	andeq	r1, r4, ip, lsl r2
   11dac:	b	11d4c <__assert_fail@plt+0xa0>
   11db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11db4:	add	fp, sp, #28
   11db8:	sub	sp, sp, #4
   11dbc:	vpush	{d8-d12}
   11dc0:	sub	sp, sp, #168	; 0xa8
   11dc4:	sub	sp, sp, #3072	; 0xc00
   11dc8:	str	r0, [sp, #204]	; 0xcc
   11dcc:	movw	r0, #61108	; 0xeeb4
   11dd0:	str	r1, [sp, #140]	; 0x8c
   11dd4:	mov	r1, #131072	; 0x20000
   11dd8:	movt	r0, #2
   11ddc:	bl	15224 <__assert_fail@plt+0x3578>
   11de0:	cmp	r0, #0
   11de4:	blt	11e08 <__assert_fail@plt+0x15c>
   11de8:	mov	r1, #2
   11dec:	mov	r2, #1
   11df0:	mov	r4, r0
   11df4:	bl	1aff0 <__assert_fail@plt+0x9344>
   11df8:	cmp	r0, #0
   11dfc:	beq	11e4c <__assert_fail@plt+0x1a0>
   11e00:	mov	r0, r4
   11e04:	bl	11c88 <close@plt>
   11e08:	movw	r0, #61132	; 0xeecc
   11e0c:	mov	r1, #131072	; 0x20000
   11e10:	movt	r0, #2
   11e14:	bl	15224 <__assert_fail@plt+0x3578>
   11e18:	cmp	r0, #0
   11e1c:	blt	11e40 <__assert_fail@plt+0x194>
   11e20:	mov	r1, #2
   11e24:	mov	r2, #1
   11e28:	mov	r4, r0
   11e2c:	bl	1aff0 <__assert_fail@plt+0x9344>
   11e30:	cmp	r0, #0
   11e34:	beq	11e5c <__assert_fail@plt+0x1b0>
   11e38:	mov	r0, r4
   11e3c:	bl	11c88 <close@plt>
   11e40:	mvn	r0, #0
   11e44:	str	r0, [sp, #132]	; 0x84
   11e48:	b	11e7c <__assert_fail@plt+0x1d0>
   11e4c:	movw	r0, #64344	; 0xfb58
   11e50:	str	r4, [sp, #132]	; 0x84
   11e54:	movt	r0, #2
   11e58:	b	11e6c <__assert_fail@plt+0x1c0>
   11e5c:	movw	r0, #64344	; 0xfb58
   11e60:	str	r4, [sp, #132]	; 0x84
   11e64:	movt	r0, #2
   11e68:	add	r0, r0, #4
   11e6c:	ldr	r0, [r0]
   11e70:	movw	r1, #4640	; 0x1220
   11e74:	movt	r1, #4
   11e78:	str	r0, [r1]
   11e7c:	bl	11970 <geteuid@plt>
   11e80:	mov	r5, r0
   11e84:	bl	11898 <getuid@plt>
   11e88:	mov	r6, r0
   11e8c:	bl	11b20 <getgid@plt>
   11e90:	mov	r4, r0
   11e94:	cmp	r5, #0
   11e98:	bne	11eb4 <__assert_fail@plt+0x208>
   11e9c:	sub	r1, fp, #728	; 0x2d8
   11ea0:	mov	r0, #1
   11ea4:	str	r4, [fp, #-728]	; 0xfffffd28
   11ea8:	bl	11988 <setgroups@plt>
   11eac:	cmp	r0, #0
   11eb0:	bne	13b0c <__assert_fail@plt+0x1e60>
   11eb4:	bl	11af0 <__errno_location@plt>
   11eb8:	cmp	r6, r5
   11ebc:	str	r0, [sp, #196]	; 0xc4
   11ec0:	cmpne	r6, #0
   11ec4:	beq	11ef8 <__assert_fail@plt+0x24c>
   11ec8:	ldr	r1, [sp, #196]	; 0xc4
   11ecc:	mov	r0, #0
   11ed0:	str	r0, [r1]
   11ed4:	bl	11898 <getuid@plt>
   11ed8:	bl	11bd4 <setuid@plt>
   11edc:	cmp	r0, #0
   11ee0:	bne	13b30 <__assert_fail@plt+0x1e84>
   11ee4:	mov	r0, #0
   11ee8:	mov	r5, #0
   11eec:	bl	11bd4 <setuid@plt>
   11ef0:	cmp	r0, #0
   11ef4:	beq	13b4c <__assert_fail@plt+0x1ea0>
   11ef8:	ldr	r1, [sp, #196]	; 0xc4
   11efc:	mov	r0, #0
   11f00:	str	r0, [r1]
   11f04:	mov	r0, r4
   11f08:	bl	11a18 <setgid@plt>
   11f0c:	cmp	r0, #0
   11f10:	bne	13a58 <__assert_fail@plt+0x1dac>
   11f14:	ldr	r5, [sp, #140]	; 0x8c
   11f18:	ldr	r0, [r5]
   11f1c:	cmp	r0, #0
   11f20:	movweq	r0, #62650	; 0xf4ba
   11f24:	movteq	r0, #2
   11f28:	bl	17834 <__assert_fail@plt+0x5b88>
   11f2c:	movw	r1, #64311	; 0xfb37
   11f30:	mov	r0, #6
   11f34:	movt	r1, #2
   11f38:	bl	11ba4 <setlocale@plt>
   11f3c:	movw	r4, #64873	; 0xfd69
   11f40:	movw	r1, #61290	; 0xef6a
   11f44:	movt	r4, #2
   11f48:	movt	r1, #2
   11f4c:	mov	r0, r4
   11f50:	bl	11c1c <bindtextdomain@plt>
   11f54:	mov	r0, r4
   11f58:	bl	11958 <textdomain@plt>
   11f5c:	mov	r0, #0
   11f60:	bl	178f8 <__assert_fail@plt+0x5c4c>
   11f64:	movw	r1, #4644	; 0x1224
   11f68:	movt	r1, #4
   11f6c:	str	r0, [r1]
   11f70:	movw	r0, #20796	; 0x513c
   11f74:	movt	r0, #1
   11f78:	bl	2ee8c <__assert_fail@plt+0x1d1e0>
   11f7c:	cmp	r0, #0
   11f80:	bne	13a2c <__assert_fail@plt+0x1d80>
   11f84:	movw	r0, #15304	; 0x3bc8
   11f88:	movt	r0, #1
   11f8c:	bl	2ee8c <__assert_fail@plt+0x1d1e0>
   11f90:	cmp	r0, #0
   11f94:	bne	13a2c <__assert_fail@plt+0x1d80>
   11f98:	movw	r0, #4664	; 0x1238
   11f9c:	mov	r1, #1
   11fa0:	vmov.i32	q8, #0	; 0x00000000
   11fa4:	movt	r0, #4
   11fa8:	strb	r1, [r0]
   11fac:	movw	r0, #4648	; 0x1228
   11fb0:	movt	r0, #4
   11fb4:	vst1.64	{d16-d17}, [r0]
   11fb8:	movw	r0, #61349	; 0xefa5
   11fbc:	movt	r0, #2
   11fc0:	bl	11a0c <getenv@plt>
   11fc4:	str	r0, [sp, #156]	; 0x9c
   11fc8:	movw	r0, #4668	; 0x123c
   11fcc:	mov	r7, #0
   11fd0:	movw	r4, #61361	; 0xefb1
   11fd4:	movw	r6, #64356	; 0xfb64
   11fd8:	sub	lr, fp, #1024	; 0x400
   11fdc:	mvn	r8, #0
   11fe0:	mov	sl, #0
   11fe4:	movt	r0, #4
   11fe8:	sub	r9, lr, #356	; 0x164
   11fec:	movt	r4, #2
   11ff0:	movt	r6, #2
   11ff4:	str	r7, [r0]
   11ff8:	mov	r0, #0
   11ffc:	str	r0, [sp, #200]	; 0xc8
   12000:	mov	r0, #0
   12004:	str	r0, [sp, #180]	; 0xb4
   12008:	mov	r0, #0
   1200c:	str	r0, [sp, #108]	; 0x6c
   12010:	mov	r0, #0
   12014:	str	r0, [sp, #148]	; 0x94
   12018:	mov	r0, #0
   1201c:	str	r0, [sp, #212]	; 0xd4
   12020:	mov	r0, #0
   12024:	str	r0, [sp, #208]	; 0xd0
   12028:	mov	r0, #0
   1202c:	str	r0, [sp, #152]	; 0x98
   12030:	mov	r0, #0
   12034:	b	1203c <__assert_fail@plt+0x390>
   12038:	mov	r0, #1
   1203c:	str	r0, [sp, #192]	; 0xc0
   12040:	b	12054 <__assert_fail@plt+0x3a8>
   12044:	movw	r0, #4676	; 0x1244
   12048:	mov	r1, #1
   1204c:	movt	r0, #4
   12050:	strb	r1, [r0]
   12054:	ldr	r0, [sp, #204]	; 0xcc
   12058:	mov	r1, r5
   1205c:	mov	r2, r4
   12060:	mov	r3, r6
   12064:	str	r8, [fp, #-1380]	; 0xfffffa9c
   12068:	str	r9, [sp]
   1206c:	bl	11a84 <getopt_long@plt>
   12070:	sub	r1, r0, #48	; 0x30
   12074:	cmp	r1, #209	; 0xd1
   12078:	bhi	1256c <__assert_fail@plt+0x8c0>
   1207c:	add	r0, pc, #0
   12080:	ldr	pc, [r0, r1, lsl #2]
   12084:	andeq	r2, r1, ip, asr #7
   12088:	andeq	r3, r1, r0, lsl r9
   1208c:	andeq	r3, r1, r0, lsl r9
   12090:	andeq	r3, r1, r0, lsl r9
   12094:	andeq	r3, r1, r0, lsl r9
   12098:	andeq	r3, r1, r0, lsl r9
   1209c:	andeq	r3, r1, r0, lsl r9
   120a0:	andeq	r3, r1, r0, lsl r9
   120a4:	andeq	r3, r1, r0, lsl r9
   120a8:	andeq	r3, r1, r0, lsl r9
   120ac:	andeq	r3, r1, r0, lsl r9
   120b0:	andeq	r3, r1, r0, lsl r9
   120b4:	andeq	r3, r1, r0, lsl r9
   120b8:	andeq	r3, r1, r0, lsl r9
   120bc:	andeq	r3, r1, r0, lsl r9
   120c0:	andeq	r3, r1, r0, lsl r9
   120c4:	andeq	r3, r1, r0, lsl r9
   120c8:	andeq	r2, r1, r8, lsr r0
   120cc:	andeq	r3, r1, r0, lsl r9
   120d0:	andeq	r3, r1, r0, lsl r9
   120d4:	andeq	r3, r1, r0, lsl r9
   120d8:	andeq	r2, r1, r0, lsl #10
   120dc:	andeq	r3, r1, r0, lsl r9
   120e0:	andeq	r3, r1, r0, lsl r9
   120e4:	andeq	r2, r1, r4, asr #32
   120e8:	andeq	r3, r1, r0, lsl r9
   120ec:	andeq	r3, r1, r0, lsl r9
   120f0:	andeq	r3, r1, r0, lsl r9
   120f4:	andeq	r2, r1, r8, asr r4
   120f8:	andeq	r3, r1, r0, lsl r9
   120fc:	andeq	r3, r1, r0, lsl r9
   12100:	andeq	r3, r1, r0, lsl r9
   12104:	andeq	r2, r1, r4, asr #32
   12108:	andeq	r3, r1, r0, lsl r9
   1210c:	andeq	r3, r1, r0, lsl r9
   12110:	andeq	r2, r1, r8, ror #8
   12114:	andeq	r3, r1, r0, lsl r9
   12118:	andeq	r3, r1, r0, lsl r9
   1211c:	andeq	r3, r1, r0, lsl r9
   12120:	andeq	r3, r1, r0, lsl r9
   12124:	andeq	r3, r1, r0, lsl r9
   12128:	andeq	r3, r1, r0, lsl r9
   1212c:	andeq	r3, r1, r0, lsl r9
   12130:	andeq	r3, r1, r0, lsl r9
   12134:	andeq	r3, r1, r0, lsl r9
   12138:	andeq	r3, r1, r0, lsl r9
   1213c:	andeq	r3, r1, r0, lsl r9
   12140:	andeq	r3, r1, r0, lsl r9
   12144:	andeq	r3, r1, r0, lsl r9
   12148:	andeq	r3, r1, r0, lsl r9
   1214c:	andeq	r2, r1, r0, asr #8
   12150:	andeq	r2, r1, ip, lsl #9
   12154:	andeq	r2, r1, r4, lsr #8
   12158:	muleq	r1, r8, r4
   1215c:	andeq	r3, r1, r0, lsl r9
   12160:	andeq	r3, r1, r0, lsl r9
   12164:	andeq	r3, r1, r8, lsl r9
   12168:	andeq	r2, r1, r4, lsl r5
   1216c:	andeq	r3, r1, r0, lsl r9
   12170:	andeq	r3, r1, r0, lsl r9
   12174:	andeq	r2, r1, ip, ror #7
   12178:	andeq	r2, r1, r4, asr r0
   1217c:	andeq	r3, r1, r0, lsl r9
   12180:	andeq	r3, r1, r0, lsl r9
   12184:	andeq	r2, r1, ip, asr #8
   12188:	andeq	r3, r1, r0, lsl r9
   1218c:	andeq	r2, r1, r0, lsr #10
   12190:	andeq	r2, r1, r4, asr r0
   12194:	andeq	r3, r1, r0, lsl r9
   12198:	andeq	r3, r1, r0, lsl r9
   1219c:	andeq	r2, r1, r4, lsr #11
   121a0:	andeq	r2, r1, ip, lsr #10
   121a4:	andeq	r3, r1, r0, lsl r9
   121a8:	andeq	r3, r1, r0, lsl r9
   121ac:	andeq	r3, r1, r0, lsl r9
   121b0:	andeq	r3, r1, r0, lsl r9
   121b4:	andeq	r3, r1, r0, lsl r9
   121b8:	andeq	r3, r1, r0, lsl r9
   121bc:	andeq	r3, r1, r0, lsl r9
   121c0:	andeq	r3, r1, r0, lsl r9
   121c4:	andeq	r3, r1, r0, lsl r9
   121c8:	andeq	r3, r1, r0, lsl r9
   121cc:	andeq	r3, r1, r0, lsl r9
   121d0:	andeq	r3, r1, r0, lsl r9
   121d4:	andeq	r3, r1, r0, lsl r9
   121d8:	andeq	r3, r1, r0, lsl r9
   121dc:	andeq	r3, r1, r0, lsl r9
   121e0:	andeq	r3, r1, r0, lsl r9
   121e4:	andeq	r3, r1, r0, lsl r9
   121e8:	andeq	r3, r1, r0, lsl r9
   121ec:	andeq	r3, r1, r0, lsl r9
   121f0:	andeq	r3, r1, r0, lsl r9
   121f4:	andeq	r3, r1, r0, lsl r9
   121f8:	andeq	r3, r1, r0, lsl r9
   121fc:	andeq	r3, r1, r0, lsl r9
   12200:	andeq	r3, r1, r0, lsl r9
   12204:	andeq	r3, r1, r0, lsl r9
   12208:	andeq	r3, r1, r0, lsl r9
   1220c:	andeq	r3, r1, r0, lsl r9
   12210:	andeq	r3, r1, r0, lsl r9
   12214:	andeq	r3, r1, r0, lsl r9
   12218:	andeq	r3, r1, r0, lsl r9
   1221c:	andeq	r3, r1, r0, lsl r9
   12220:	andeq	r3, r1, r0, lsl r9
   12224:	andeq	r3, r1, r0, lsl r9
   12228:	andeq	r3, r1, r0, lsl r9
   1222c:	andeq	r3, r1, r0, lsl r9
   12230:	andeq	r3, r1, r0, lsl r9
   12234:	andeq	r3, r1, r0, lsl r9
   12238:	andeq	r3, r1, r0, lsl r9
   1223c:	andeq	r3, r1, r0, lsl r9
   12240:	andeq	r3, r1, r0, lsl r9
   12244:	andeq	r3, r1, r0, lsl r9
   12248:	andeq	r3, r1, r0, lsl r9
   1224c:	andeq	r3, r1, r0, lsl r9
   12250:	andeq	r3, r1, r0, lsl r9
   12254:	andeq	r3, r1, r0, lsl r9
   12258:	andeq	r3, r1, r0, lsl r9
   1225c:	andeq	r3, r1, r0, lsl r9
   12260:	andeq	r3, r1, r0, lsl r9
   12264:	andeq	r3, r1, r0, lsl r9
   12268:	andeq	r3, r1, r0, lsl r9
   1226c:	andeq	r3, r1, r0, lsl r9
   12270:	andeq	r3, r1, r0, lsl r9
   12274:	andeq	r3, r1, r0, lsl r9
   12278:	andeq	r3, r1, r0, lsl r9
   1227c:	andeq	r3, r1, r0, lsl r9
   12280:	andeq	r3, r1, r0, lsl r9
   12284:	andeq	r3, r1, r0, lsl r9
   12288:	andeq	r3, r1, r0, lsl r9
   1228c:	andeq	r3, r1, r0, lsl r9
   12290:	andeq	r3, r1, r0, lsl r9
   12294:	andeq	r3, r1, r0, lsl r9
   12298:	andeq	r3, r1, r0, lsl r9
   1229c:	andeq	r3, r1, r0, lsl r9
   122a0:	andeq	r3, r1, r0, lsl r9
   122a4:	andeq	r3, r1, r0, lsl r9
   122a8:	andeq	r3, r1, r0, lsl r9
   122ac:	andeq	r3, r1, r0, lsl r9
   122b0:	andeq	r3, r1, r0, lsl r9
   122b4:	andeq	r3, r1, r0, lsl r9
   122b8:	andeq	r3, r1, r0, lsl r9
   122bc:	andeq	r3, r1, r0, lsl r9
   122c0:	andeq	r3, r1, r0, lsl r9
   122c4:	andeq	r3, r1, r0, lsl r9
   122c8:	andeq	r3, r1, r0, lsl r9
   122cc:	andeq	r3, r1, r0, lsl r9
   122d0:	andeq	r3, r1, r0, lsl r9
   122d4:	andeq	r3, r1, r0, lsl r9
   122d8:	andeq	r3, r1, r0, lsl r9
   122dc:	andeq	r3, r1, r0, lsl r9
   122e0:	andeq	r3, r1, r0, lsl r9
   122e4:	andeq	r3, r1, r0, lsl r9
   122e8:	andeq	r3, r1, r0, lsl r9
   122ec:	andeq	r3, r1, r0, lsl r9
   122f0:	andeq	r3, r1, r0, lsl r9
   122f4:	andeq	r3, r1, r0, lsl r9
   122f8:	andeq	r3, r1, r0, lsl r9
   122fc:	andeq	r3, r1, r0, lsl r9
   12300:	andeq	r3, r1, r0, lsl r9
   12304:	andeq	r3, r1, r0, lsl r9
   12308:	andeq	r3, r1, r0, lsl r9
   1230c:	andeq	r3, r1, r0, lsl r9
   12310:	andeq	r3, r1, r0, lsl r9
   12314:	andeq	r3, r1, r0, lsl r9
   12318:	andeq	r3, r1, r0, lsl r9
   1231c:	andeq	r3, r1, r0, lsl r9
   12320:	andeq	r3, r1, r0, lsl r9
   12324:	andeq	r3, r1, r0, lsl r9
   12328:	andeq	r3, r1, r0, lsl r9
   1232c:	andeq	r3, r1, r0, lsl r9
   12330:	andeq	r3, r1, r0, lsl r9
   12334:	andeq	r3, r1, r0, lsl r9
   12338:	andeq	r3, r1, r0, lsl r9
   1233c:	andeq	r3, r1, r0, lsl r9
   12340:	andeq	r3, r1, r0, lsl r9
   12344:	andeq	r3, r1, r0, lsl r9
   12348:	andeq	r3, r1, r0, lsl r9
   1234c:	andeq	r3, r1, r0, lsl r9
   12350:	andeq	r3, r1, r0, lsl r9
   12354:	andeq	r3, r1, r0, lsl r9
   12358:	andeq	r3, r1, r0, lsl r9
   1235c:	andeq	r3, r1, r0, lsl r9
   12360:	andeq	r3, r1, r0, lsl r9
   12364:	andeq	r3, r1, r0, lsl r9
   12368:	andeq	r3, r1, r0, lsl r9
   1236c:	andeq	r3, r1, r0, lsl r9
   12370:	andeq	r3, r1, r0, lsl r9
   12374:	andeq	r3, r1, r0, lsl r9
   12378:	andeq	r3, r1, r0, lsl r9
   1237c:	andeq	r3, r1, r0, lsl r9
   12380:	andeq	r3, r1, r0, lsl r9
   12384:	andeq	r3, r1, r0, lsl r9
   12388:	andeq	r3, r1, r0, lsl r9
   1238c:	andeq	r3, r1, r0, lsl r9
   12390:	andeq	r3, r1, r0, lsl r9
   12394:	andeq	r3, r1, r0, lsl r9
   12398:	andeq	r3, r1, r0, lsl r9
   1239c:	andeq	r3, r1, r0, lsl r9
   123a0:	andeq	r3, r1, r0, lsl r9
   123a4:	andeq	r3, r1, r0, lsl r9
   123a8:	andeq	r3, r1, r0, lsl r9
   123ac:	andeq	r3, r1, r0, lsl r9
   123b0:	andeq	r3, r1, r0, lsl r9
   123b4:	andeq	r3, r1, r0, lsl r9
   123b8:	andeq	r3, r1, r0, lsl r9
   123bc:	andeq	r3, r1, r0, lsl r9
   123c0:	andeq	r3, r1, r0, lsl r9
   123c4:	andeq	r2, r1, r4, ror r4
   123c8:	andeq	r2, r1, ip, lsr #9
   123cc:	movw	r0, #4664	; 0x1238
   123d0:	movw	r1, #4672	; 0x1240
   123d4:	movt	r0, #4
   123d8:	movt	r1, #4
   123dc:	strb	r7, [r0]
   123e0:	mov	r0, #1
   123e4:	strb	r0, [r1]
   123e8:	b	12054 <__assert_fail@plt+0x3a8>
   123ec:	movw	r0, #4632	; 0x1218
   123f0:	movw	r3, #4648	; 0x1228
   123f4:	sub	r1, fp, #728	; 0x2d8
   123f8:	mov	r2, #10
   123fc:	str	r7, [sp]
   12400:	movt	r0, #4
   12404:	movt	r3, #4
   12408:	ldr	r0, [r0]
   1240c:	str	r0, [fp, #-728]	; 0xfffffd28
   12410:	bl	1a308 <__assert_fail@plt+0x865c>
   12414:	cmp	r0, #0
   12418:	bne	13920 <__assert_fail@plt+0x1c74>
   1241c:	mov	sl, #1
   12420:	b	12054 <__assert_fail@plt+0x3a8>
   12424:	movw	r0, #4632	; 0x1218
   12428:	movt	r0, #4
   1242c:	ldr	r0, [r0]
   12430:	cmp	r0, #0
   12434:	str	r0, [sp, #156]	; 0x9c
   12438:	bne	12054 <__assert_fail@plt+0x3a8>
   1243c:	b	13944 <__assert_fail@plt+0x1c98>
   12440:	mov	r0, #1
   12444:	str	r0, [sp, #148]	; 0x94
   12448:	b	12054 <__assert_fail@plt+0x3a8>
   1244c:	mov	r0, #1
   12450:	str	r0, [sp, #180]	; 0xb4
   12454:	b	12054 <__assert_fail@plt+0x3a8>
   12458:	movw	r0, #4676	; 0x1244
   1245c:	movt	r0, #4
   12460:	strb	r7, [r0]
   12464:	b	12054 <__assert_fail@plt+0x3a8>
   12468:	mov	r0, #1
   1246c:	str	r0, [sp, #152]	; 0x98
   12470:	b	12054 <__assert_fail@plt+0x3a8>
   12474:	movw	r0, #4632	; 0x1218
   12478:	movt	r0, #4
   1247c:	ldr	r0, [r0]
   12480:	bl	14dbc <__assert_fail@plt+0x3110>
   12484:	str	r0, [sp, #208]	; 0xd0
   12488:	b	12054 <__assert_fail@plt+0x3a8>
   1248c:	mov	r0, #1
   12490:	str	r0, [sp, #108]	; 0x6c
   12494:	b	12054 <__assert_fail@plt+0x3a8>
   12498:	movw	r0, #4668	; 0x123c
   1249c:	mov	r1, #1
   124a0:	movt	r0, #4
   124a4:	str	r1, [r0]
   124a8:	b	12054 <__assert_fail@plt+0x3a8>
   124ac:	movw	r0, #4632	; 0x1218
   124b0:	movt	r0, #4
   124b4:	ldr	r5, [r0]
   124b8:	ldrb	r0, [r5]
   124bc:	cmp	r0, #0
   124c0:	beq	13964 <__assert_fail@plt+0x1cb8>
   124c4:	ldr	r0, [sp, #196]	; 0xc4
   124c8:	sub	r1, fp, #728	; 0x2d8
   124cc:	mov	r2, #10
   124d0:	str	r7, [r0]
   124d4:	mov	r0, r5
   124d8:	bl	11ab4 <strtoul@plt>
   124dc:	cmp	r0, #0
   124e0:	beq	12538 <__assert_fail@plt+0x88c>
   124e4:	cmn	r0, #1
   124e8:	bne	12548 <__assert_fail@plt+0x89c>
   124ec:	ldr	r1, [sp, #196]	; 0xc4
   124f0:	ldr	r1, [r1]
   124f4:	cmp	r1, #34	; 0x22
   124f8:	bne	12548 <__assert_fail@plt+0x89c>
   124fc:	b	13988 <__assert_fail@plt+0x1cdc>
   12500:	movw	r0, #4668	; 0x123c
   12504:	mov	r1, #2
   12508:	movt	r0, #4
   1250c:	str	r1, [r0]
   12510:	b	12054 <__assert_fail@plt+0x3a8>
   12514:	mov	r0, #1
   12518:	str	r0, [sp, #200]	; 0xc8
   1251c:	b	12054 <__assert_fail@plt+0x3a8>
   12520:	mov	r0, #1
   12524:	str	r0, [sp, #212]	; 0xd4
   12528:	b	12054 <__assert_fail@plt+0x3a8>
   1252c:	mov	r0, #0
   12530:	str	r0, [sp, #148]	; 0x94
   12534:	b	12054 <__assert_fail@plt+0x3a8>
   12538:	ldr	r1, [sp, #196]	; 0xc4
   1253c:	ldr	r1, [r1]
   12540:	cmp	r1, #22
   12544:	beq	13990 <__assert_fail@plt+0x1ce4>
   12548:	ldr	r1, [fp, #-728]	; 0xfffffd28
   1254c:	ldrb	r1, [r1]
   12550:	cmp	r1, #0
   12554:	bne	139d0 <__assert_fail@plt+0x1d24>
   12558:	ldr	r5, [sp, #140]	; 0x8c
   1255c:	movw	r1, #4520	; 0x11a8
   12560:	movt	r1, #4
   12564:	str	r0, [r1]
   12568:	b	12054 <__assert_fail@plt+0x3a8>
   1256c:	cmn	r0, #1
   12570:	bne	13910 <__assert_fail@plt+0x1c64>
   12574:	ldr	r0, [sp, #132]	; 0x84
   12578:	cmp	r0, #0
   1257c:	blt	125b8 <__assert_fail@plt+0x90c>
   12580:	ldr	r5, [sp, #156]	; 0x9c
   12584:	ldr	r7, [sp, #152]	; 0x98
   12588:	mov	r8, sl
   1258c:	cmp	r5, #0
   12590:	beq	125c4 <__assert_fail@plt+0x918>
   12594:	bl	11c88 <close@plt>
   12598:	mvn	r0, #0
   1259c:	str	r0, [sp, #132]	; 0x84
   125a0:	b	125c4 <__assert_fail@plt+0x918>
   125a4:	movw	r0, #62650	; 0xf4ba
   125a8:	movt	r0, #2
   125ac:	bl	148e8 <__assert_fail@plt+0x2c3c>
   125b0:	mov	r5, #0
   125b4:	b	138b8 <__assert_fail@plt+0x1c0c>
   125b8:	ldr	r7, [sp, #152]	; 0x98
   125bc:	ldr	r5, [sp, #156]	; 0x9c
   125c0:	mov	r8, sl
   125c4:	ldr	r0, [sp, #108]	; 0x6c
   125c8:	orrs	r0, r7, r0
   125cc:	ldr	r0, [sp, #180]	; 0xb4
   125d0:	movweq	r0, #1
   125d4:	cmp	r7, #0
   125d8:	str	r0, [sp, #180]	; 0xb4
   125dc:	movw	r0, #4616	; 0x1208
   125e0:	movt	r0, #4
   125e4:	beq	125fc <__assert_fail@plt+0x950>
   125e8:	ldr	r0, [r0]
   125ec:	ldr	r1, [sp, #204]	; 0xcc
   125f0:	subs	r0, r0, r1
   125f4:	moveq	r8, r0
   125f8:	b	12614 <__assert_fail@plt+0x968>
   125fc:	ldr	r0, [r0]
   12600:	ldr	r1, [sp, #204]	; 0xcc
   12604:	cmp	r0, r1
   12608:	ldreq	r0, [sp, #108]	; 0x6c
   1260c:	cmpeq	r0, #0
   12610:	beq	13b9c <__assert_fail@plt+0x1ef0>
   12614:	mov	r0, #1
   12618:	bl	11c40 <isatty@plt>
   1261c:	sub	r0, r0, #1
   12620:	movw	r1, #4677	; 0x1245
   12624:	cmp	r5, #0
   12628:	clz	r0, r0
   1262c:	movt	r1, #4
   12630:	lsr	r0, r0, #5
   12634:	strb	r0, [r1]
   12638:	beq	1265c <__assert_fail@plt+0x9b0>
   1263c:	movw	r1, #2200	; 0x898
   12640:	add	r0, sp, #328	; 0x148
   12644:	add	r3, sp, #332	; 0x14c
   12648:	mov	r2, #1
   1264c:	str	r0, [sp]
   12650:	movt	r1, #3
   12654:	mov	r0, r5
   12658:	bl	14fa0 <__assert_fail@plt+0x32f4>
   1265c:	ldr	r2, [sp, #192]	; 0xc0
   12660:	movw	r0, #18032	; 0x4670
   12664:	movw	r1, #17864	; 0x45c8
   12668:	vldr	d9, [pc, #976]	; 12a40 <__assert_fail@plt+0xd94>
   1266c:	vldr	d12, [pc, #980]	; 12a48 <__assert_fail@plt+0xd9c>
   12670:	mov	sl, #0
   12674:	vmov.i32	q5, #0	; 0x00000000
   12678:	mov	r4, #0
   1267c:	str	r8, [sp, #120]	; 0x78
   12680:	movt	r0, #1
   12684:	movt	r1, #1
   12688:	cmp	r2, #0
   1268c:	movw	r2, #17080	; 0x42b8
   12690:	moveq	r1, r0
   12694:	movw	r0, #17044	; 0x4294
   12698:	movt	r2, #1
   1269c:	str	r1, [sp, #100]	; 0x64
   126a0:	ldr	r1, [sp, #200]	; 0xc8
   126a4:	movt	r0, #1
   126a8:	cmp	r1, #0
   126ac:	movne	r2, r0
   126b0:	movw	r0, #16860	; 0x41dc
   126b4:	str	r2, [sp, #192]	; 0xc0
   126b8:	movw	r2, #16952	; 0x4238
   126bc:	movt	r0, #1
   126c0:	movt	r2, #1
   126c4:	movne	r2, r0
   126c8:	ldr	r0, [sp, #208]	; 0xd0
   126cc:	cmp	r1, #0
   126d0:	str	r2, [sp, #188]	; 0xbc
   126d4:	orrne	r0, r0, #4194304	; 0x400000
   126d8:	str	r0, [sp, #208]	; 0xd0
   126dc:	ldr	r0, [sp, #180]	; 0xb4
   126e0:	orr	r0, r0, r7
   126e4:	str	r0, [sp, #20]
   126e8:	add	r0, sp, #336	; 0x150
   126ec:	add	r1, r0, #276	; 0x114
   126f0:	str	r1, [sp, #88]	; 0x58
   126f4:	add	r1, r0, #148	; 0x94
   126f8:	str	r1, [sp, #84]	; 0x54
   126fc:	add	r1, r0, #260	; 0x104
   12700:	str	r1, [sp, #80]	; 0x50
   12704:	add	r1, r0, #132	; 0x84
   12708:	str	r1, [sp, #76]	; 0x4c
   1270c:	add	r1, r0, #244	; 0xf4
   12710:	str	r1, [sp, #72]	; 0x48
   12714:	add	r1, r0, #116	; 0x74
   12718:	str	r1, [sp, #68]	; 0x44
   1271c:	add	r1, r0, #228	; 0xe4
   12720:	str	r1, [sp, #64]	; 0x40
   12724:	add	r1, r0, #100	; 0x64
   12728:	str	r1, [sp, #60]	; 0x3c
   1272c:	add	r1, r0, #212	; 0xd4
   12730:	str	r1, [sp, #56]	; 0x38
   12734:	add	r1, r0, #84	; 0x54
   12738:	str	r1, [sp, #52]	; 0x34
   1273c:	add	r1, r0, #196	; 0xc4
   12740:	str	r1, [sp, #48]	; 0x30
   12744:	add	r1, r0, #68	; 0x44
   12748:	str	r1, [sp, #44]	; 0x2c
   1274c:	add	r1, r0, #180	; 0xb4
   12750:	str	r1, [sp, #40]	; 0x28
   12754:	add	r1, r0, #52	; 0x34
   12758:	str	r1, [sp, #36]	; 0x24
   1275c:	add	r1, r0, #164	; 0xa4
   12760:	str	r1, [sp, #32]
   12764:	add	r1, r0, #292	; 0x124
   12768:	str	r1, [sp, #104]	; 0x68
   1276c:	add	r1, r0, #36	; 0x24
   12770:	add	r0, r0, #16
   12774:	str	r0, [sp, #28]
   12778:	add	r0, sp, #224	; 0xe0
   1277c:	str	r1, [sp, #116]	; 0x74
   12780:	add	r1, r0, #80	; 0x50
   12784:	add	r0, r0, #48	; 0x30
   12788:	str	r0, [sp, #92]	; 0x5c
   1278c:	mov	r0, #0
   12790:	str	r1, [sp, #96]	; 0x60
   12794:	str	r0, [sp, #24]
   12798:	cmp	r8, #0
   1279c:	beq	127c0 <__assert_fail@plt+0xb14>
   127a0:	movw	r0, #4648	; 0x1228
   127a4:	movt	r0, #4
   127a8:	mov	r3, r0
   127ac:	ldr	r0, [r0]
   127b0:	ldmib	r3, {r1, r2, r3}
   127b4:	subs	r0, r2, r0
   127b8:	sbcs	r0, r3, r1
   127bc:	bcs	13810 <__assert_fail@plt+0x1b64>
   127c0:	movw	r1, #4680	; 0x1248
   127c4:	cmp	r5, #0
   127c8:	movt	r1, #4
   127cc:	add	r0, r1, #16
   127d0:	vst1.64	{d10-d11}, [r0]
   127d4:	mov	r0, r1
   127d8:	mov	r1, #32
   127dc:	vst1.64	{d10-d11}, [r0], r1
   127e0:	vst1.64	{d10-d11}, [r0]
   127e4:	beq	12850 <__assert_fail@plt+0xba4>
   127e8:	ldr	r1, [sp, #328]	; 0x148
   127ec:	mov	r6, #0
   127f0:	cmp	r1, #0
   127f4:	beq	12880 <__assert_fail@plt+0xbd4>
   127f8:	cmp	r1, #1
   127fc:	bne	1288c <__assert_fail@plt+0xbe0>
   12800:	ldr	r2, [sp, #332]	; 0x14c
   12804:	mov	r0, r5
   12808:	movw	r9, #61108	; 0xeeb4
   1280c:	movt	r9, #2
   12810:	ldrb	r2, [r0, r2]!
   12814:	cmp	r2, #46	; 0x2e
   12818:	beq	128a0 <__assert_fail@plt+0xbf4>
   1281c:	cmp	r2, #45	; 0x2d
   12820:	bne	12894 <__assert_fail@plt+0xbe8>
   12824:	ldr	r0, [sp, #24]
   12828:	tst	r0, #1
   1282c:	bne	138cc <__assert_fail@plt+0x1c20>
   12830:	mov	r0, #0
   12834:	movw	r9, #61527	; 0xf057
   12838:	mov	r4, #0
   1283c:	str	r0, [sp, #176]	; 0xb0
   12840:	mov	r0, #1
   12844:	movt	r9, #2
   12848:	str	r0, [sp, #24]
   1284c:	b	128d0 <__assert_fail@plt+0xc24>
   12850:	ldr	r0, [sp, #132]	; 0x84
   12854:	cmn	r0, #1
   12858:	beq	13810 <__assert_fail@plt+0x1b64>
   1285c:	movw	r1, #4640	; 0x1220
   12860:	mov	r4, r0
   12864:	mvn	r0, #0
   12868:	movt	r1, #4
   1286c:	str	r0, [sp, #132]	; 0x84
   12870:	ldr	r9, [r1]
   12874:	mov	r1, #0
   12878:	str	r1, [sp, #176]	; 0xb0
   1287c:	b	128d0 <__assert_fail@plt+0xc24>
   12880:	movw	r9, #61108	; 0xeeb4
   12884:	movt	r9, #2
   12888:	b	128a0 <__assert_fail@plt+0xbf4>
   1288c:	ldr	r0, [sp, #332]	; 0x14c
   12890:	add	r0, r5, r0
   12894:	bl	118d4 <strndup@plt>
   12898:	mov	r9, r0
   1289c:	mov	r6, r0
   128a0:	mov	r0, r9
   128a4:	mov	r1, #131072	; 0x20000
   128a8:	str	r6, [sp, #176]	; 0xb0
   128ac:	bl	15224 <__assert_fail@plt+0x3578>
   128b0:	cmp	r0, #0
   128b4:	blt	13884 <__assert_fail@plt+0x1bd8>
   128b8:	mov	r1, #2
   128bc:	mov	r2, #1
   128c0:	mov	r4, r0
   128c4:	bl	1aff0 <__assert_fail@plt+0x9344>
   128c8:	cmp	r0, #0
   128cc:	bne	1387c <__assert_fail@plt+0x1bd0>
   128d0:	mov	r0, #3
   128d4:	mov	r1, r4
   128d8:	add	r2, sp, #224	; 0xe0
   128dc:	bl	11994 <__fxstat64@plt>
   128e0:	cmp	r0, #0
   128e4:	str	r9, [sp, #112]	; 0x70
   128e8:	beq	12938 <__assert_fail@plt+0xc8c>
   128ec:	ldr	r0, [sp, #196]	; 0xc4
   128f0:	mov	r1, #8
   128f4:	mov	r2, r9
   128f8:	ldr	r5, [r0]
   128fc:	mov	r0, #0
   12900:	str	r0, [sp, #184]	; 0xb8
   12904:	mov	r0, #0
   12908:	bl	18e98 <__assert_fail@plt+0x71ec>
   1290c:	movw	r2, #2212	; 0x8a4
   12910:	mov	r3, r0
   12914:	mov	r0, #0
   12918:	mov	r1, r5
   1291c:	movt	r2, #3
   12920:	bl	119e8 <error@plt>
   12924:	mov	r0, #0
   12928:	str	r0, [sp, #164]	; 0xa4
   1292c:	mov	r0, #0
   12930:	str	r0, [sp, #136]	; 0x88
   12934:	b	12a84 <__assert_fail@plt+0xdd8>
   12938:	ldr	r0, [sp, #92]	; 0x5c
   1293c:	ldrd	r0, [r0]
   12940:	str	r0, [sp, #164]	; 0xa4
   12944:	ldr	r0, [sp, #96]	; 0x60
   12948:	str	r1, [sp, #136]	; 0x88
   1294c:	ldrd	r0, [r0]
   12950:	str	r0, [sp, #216]	; 0xd8
   12954:	sub	r0, fp, #728	; 0x2d8
   12958:	str	r1, [sp, #220]	; 0xdc
   1295c:	bl	11928 <time@plt>
   12960:	cmn	r0, #1
   12964:	beq	12a50 <__assert_fail@plt+0xda4>
   12968:	ldr	r1, [sp, #304]	; 0x130
   1296c:	ldr	r0, [fp, #-728]	; 0xfffffd28
   12970:	bl	11b5c <difftime@plt>
   12974:	movw	r0, #4520	; 0x11a8
   12978:	movw	r1, #20864	; 0x5180
   1297c:	vmov.f64	d8, d0
   12980:	movt	r0, #4
   12984:	movt	r1, #1
   12988:	ldr	r0, [r0]
   1298c:	mul	r0, r0, r1
   12990:	vmov	s0, r0
   12994:	vcvt.f64.u32	d16, s0
   12998:	vcmpe.f64	d8, d16
   1299c:	vmrs	APSR_nzcv, fpscr
   129a0:	ble	12a7c <__assert_fail@plt+0xdd0>
   129a4:	movw	r1, #61559	; 0xf077
   129a8:	mov	r0, #0
   129ac:	mov	r2, #5
   129b0:	movt	r1, #2
   129b4:	bl	11940 <dcgettext@plt>
   129b8:	mov	r8, r0
   129bc:	mov	r0, #0
   129c0:	mov	r1, #8
   129c4:	mov	r2, r9
   129c8:	bl	18e98 <__assert_fail@plt+0x71ec>
   129cc:	str	r0, [sp, #184]	; 0xb8
   129d0:	movw	r0, #4520	; 0x11a8
   129d4:	movw	r9, #64724	; 0xfcd4
   129d8:	mov	r2, #5
   129dc:	movt	r0, #4
   129e0:	movt	r9, #2
   129e4:	ldr	r5, [r0]
   129e8:	mov	r0, #0
   129ec:	mov	r1, r9
   129f0:	bl	11940 <dcgettext@plt>
   129f4:	mov	r6, r7
   129f8:	mov	r7, r0
   129fc:	mov	r0, #0
   12a00:	mov	r1, r9
   12a04:	mov	r2, #5
   12a08:	bl	11940 <dcgettext@plt>
   12a0c:	vdiv.f64	d16, d8, d9
   12a10:	str	r0, [sp, #16]
   12a14:	mov	r0, #0
   12a18:	mov	r1, #0
   12a1c:	mov	r2, r8
   12a20:	vstr	d16, [sp, #8]
   12a24:	stm	sp, {r5, r7}
   12a28:	mov	r7, r6
   12a2c:	ldr	r3, [sp, #184]	; 0xb8
   12a30:	ldr	r9, [sp, #112]	; 0x70
   12a34:	bl	119e8 <error@plt>
   12a38:	b	12a7c <__assert_fail@plt+0xdd0>
   12a3c:	nop	{0}
   12a40:	andeq	r0, r0, r0
   12a44:	rscsmi	r1, r5, r0, lsl #16
   12a48:	andeq	r0, r0, r0
   12a4c:	subsmi	r0, r9, r0
   12a50:	ldr	r0, [sp, #196]	; 0xc4
   12a54:	movw	r1, #61535	; 0xf05f
   12a58:	mov	r2, #5
   12a5c:	movt	r1, #2
   12a60:	ldr	r5, [r0]
   12a64:	mov	r0, #0
   12a68:	bl	11940 <dcgettext@plt>
   12a6c:	mov	r2, r0
   12a70:	mov	r0, #0
   12a74:	mov	r1, r5
   12a78:	bl	119e8 <error@plt>
   12a7c:	mov	r0, #1
   12a80:	str	r0, [sp, #184]	; 0xb8
   12a84:	movw	r1, #64853	; 0xfd55
   12a88:	mov	r0, r4
   12a8c:	movt	r1, #2
   12a90:	bl	11814 <fdopen@plt>
   12a94:	cmp	r0, #0
   12a98:	beq	13884 <__assert_fail@plt+0x1bd8>
   12a9c:	mov	r6, r0
   12aa0:	movw	r0, #4616	; 0x1208
   12aa4:	str	sl, [sp, #340]	; 0x154
   12aa8:	str	sl, [sp, #344]	; 0x158
   12aac:	movt	r0, #4
   12ab0:	ldr	r8, [r0]
   12ab4:	movw	r0, #4728	; 0x1278
   12ab8:	movt	r0, #4
   12abc:	str	sl, [r0]
   12ac0:	movw	r0, #4732	; 0x127c
   12ac4:	movt	r0, #4
   12ac8:	str	sl, [r0]
   12acc:	movw	r0, #4736	; 0x1280
   12ad0:	movt	r0, #4
   12ad4:	str	sl, [r0]
   12ad8:	movw	r0, #4740	; 0x1284
   12adc:	movt	r0, #4
   12ae0:	strb	sl, [r0]
   12ae4:	add	r0, sp, #360	; 0x168
   12ae8:	stm	r0, {r6, r9, sl}
   12aec:	mov	r0, #128	; 0x80
   12af0:	str	r0, [sp, #352]	; 0x160
   12af4:	movw	r0, #4668	; 0x123c
   12af8:	movt	r0, #4
   12afc:	ldr	r0, [r0]
   12b00:	str	r0, [sp, #168]	; 0xa8
   12b04:	mov	r0, #128	; 0x80
   12b08:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12b0c:	mov	r1, #1
   12b10:	mov	r2, #2
   12b14:	mov	r3, r6
   12b18:	mov	r5, r0
   12b1c:	str	r0, [sp, #348]	; 0x15c
   12b20:	bl	119c4 <fread@plt>
   12b24:	mov	r4, r0
   12b28:	ldr	r0, [sp, #184]	; 0xb8
   12b2c:	cmp	r0, #0
   12b30:	mov	r1, r0
   12b34:	add	r0, sp, #216	; 0xd8
   12b38:	movne	r1, r0
   12b3c:	cmp	r4, #3
   12b40:	str	r1, [sp, #144]	; 0x90
   12b44:	bcs	13a0c <__assert_fail@plt+0x1d60>
   12b48:	cmp	r4, #2
   12b4c:	str	r6, [sp, #172]	; 0xac
   12b50:	ldrbeq	r0, [r5, #1]
   12b54:	cmpeq	r0, #0
   12b58:	beq	131e4 <__assert_fail@plt+0x1538>
   12b5c:	add	r0, r5, r4
   12b60:	rsb	r2, r4, #10
   12b64:	mov	r1, #1
   12b68:	mov	r3, r6
   12b6c:	bl	119c4 <fread@plt>
   12b70:	add	r5, r0, r4
   12b74:	ldr	r4, [sp, #348]	; 0x15c
   12b78:	cmp	r5, #10
   12b7c:	bcc	12b9c <__assert_fail@plt+0xef0>
   12b80:	movw	r1, #64729	; 0xfcd9
   12b84:	mov	r0, r4
   12b88:	mov	r2, #10
   12b8c:	movt	r1, #2
   12b90:	bl	11934 <memcmp@plt>
   12b94:	cmp	r0, #0
   12b98:	beq	12d60 <__assert_fail@plt+0x10b4>
   12b9c:	ldr	r0, [sp, #352]	; 0x160
   12ba0:	movw	r7, #4728	; 0x1278
   12ba4:	movt	r7, #4
   12ba8:	cmp	r0, #255	; 0xff
   12bac:	bhi	12bd0 <__assert_fail@plt+0xf24>
   12bb0:	ldr	r1, [sp, #28]
   12bb4:	mov	r0, #256	; 0x100
   12bb8:	mov	r2, #1
   12bbc:	str	r0, [sp, #352]	; 0x160
   12bc0:	mov	r0, r4
   12bc4:	bl	19e4c <__assert_fail@plt+0x81a0>
   12bc8:	mov	r4, r0
   12bcc:	str	r0, [sp, #348]	; 0x15c
   12bd0:	cmp	r5, #255	; 0xff
   12bd4:	bgt	12bfc <__assert_fail@plt+0xf50>
   12bd8:	ldr	r3, [sp, #360]	; 0x168
   12bdc:	add	r0, r4, r5
   12be0:	rsb	r2, r5, #256	; 0x100
   12be4:	mov	r1, #1
   12be8:	bl	119c4 <fread@plt>
   12bec:	add	r0, r0, r5
   12bf0:	cmp	r0, #256	; 0x100
   12bf4:	bne	13a64 <__assert_fail@plt+0x1db8>
   12bf8:	ldr	r4, [sp, #348]	; 0x15c
   12bfc:	ldr	r1, [sp, #116]	; 0x74
   12c00:	add	r0, r4, #256	; 0x100
   12c04:	add	r6, sp, #336	; 0x150
   12c08:	cmp	r1, r0
   12c0c:	ldrcc	r0, [sp, #104]	; 0x68
   12c10:	cmpcc	r4, r0
   12c14:	bcc	12d0c <__assert_fail@plt+0x1060>
   12c18:	mov	r0, r4
   12c1c:	mov	r1, #224	; 0xe0
   12c20:	vld2.8	{d16-d19}, [r0], r1
   12c24:	ldr	r1, [sp, #116]	; 0x74
   12c28:	vst1.32	{d16-d17}, [r1]
   12c2c:	ldr	r1, [sp, #32]
   12c30:	vst1.32	{d18-d19}, [r1]
   12c34:	add	r1, r4, #32
   12c38:	vld2.8	{d16-d19}, [r1]
   12c3c:	ldr	r1, [sp, #36]	; 0x24
   12c40:	vst1.32	{d16-d17}, [r1]
   12c44:	ldr	r1, [sp, #40]	; 0x28
   12c48:	vst1.32	{d18-d19}, [r1]
   12c4c:	add	r1, r4, #64	; 0x40
   12c50:	vld2.8	{d16-d19}, [r1]
   12c54:	ldr	r1, [sp, #44]	; 0x2c
   12c58:	vst1.32	{d16-d17}, [r1]
   12c5c:	ldr	r1, [sp, #48]	; 0x30
   12c60:	vst1.32	{d18-d19}, [r1]
   12c64:	add	r1, r4, #96	; 0x60
   12c68:	vld2.8	{d16-d19}, [r1]
   12c6c:	ldr	r1, [sp, #52]	; 0x34
   12c70:	vst1.32	{d16-d17}, [r1]
   12c74:	ldr	r1, [sp, #56]	; 0x38
   12c78:	vst1.32	{d18-d19}, [r1]
   12c7c:	add	r1, r4, #128	; 0x80
   12c80:	vld2.8	{d16-d19}, [r1]
   12c84:	ldr	r1, [sp, #60]	; 0x3c
   12c88:	vorr	q10, q8, q8
   12c8c:	vorr	q8, q9, q9
   12c90:	vst1.32	{d20-d21}, [r1]
   12c94:	ldr	r1, [sp, #64]	; 0x40
   12c98:	vst1.32	{d16-d17}, [r1]
   12c9c:	add	r1, r4, #160	; 0xa0
   12ca0:	vld2.8	{d16-d19}, [r1]
   12ca4:	ldr	r1, [sp, #68]	; 0x44
   12ca8:	vorr	q10, q8, q8
   12cac:	vorr	q8, q9, q9
   12cb0:	vst1.32	{d20-d21}, [r1]
   12cb4:	ldr	r1, [sp, #72]	; 0x48
   12cb8:	vst1.32	{d16-d17}, [r1]
   12cbc:	add	r1, r4, #192	; 0xc0
   12cc0:	vld2.8	{d16-d19}, [r1]
   12cc4:	ldr	r1, [sp, #76]	; 0x4c
   12cc8:	vorr	q10, q8, q8
   12ccc:	vorr	q8, q9, q9
   12cd0:	vst1.32	{d20-d21}, [r1]
   12cd4:	ldr	r1, [sp, #80]	; 0x50
   12cd8:	vst1.32	{d16-d17}, [r1]
   12cdc:	vld2.8	{d16-d19}, [r0]
   12ce0:	ldr	r0, [sp, #84]	; 0x54
   12ce4:	vorr	q10, q8, q8
   12ce8:	vorr	q8, q9, q9
   12cec:	vst1.32	{d20-d21}, [r0]
   12cf0:	ldr	r0, [sp, #88]	; 0x58
   12cf4:	vst1.32	{d16-d17}, [r0]
   12cf8:	mov	r0, #1
   12cfc:	str	r0, [sp, #128]	; 0x80
   12d00:	mov	r0, #0
   12d04:	str	r0, [sp, #160]	; 0xa0
   12d08:	b	12d48 <__assert_fail@plt+0x109c>
   12d0c:	add	r0, r4, #1
   12d10:	mov	r1, #0
   12d14:	ldrb	r3, [r0, #-1]
   12d18:	add	r2, r6, r1
   12d1c:	add	r1, r1, #1
   12d20:	cmp	r1, #128	; 0x80
   12d24:	strb	r3, [r2, #36]	; 0x24
   12d28:	ldrb	r3, [r0]
   12d2c:	add	r0, r0, #2
   12d30:	strb	r3, [r2, #164]	; 0xa4
   12d34:	bne	12d14 <__assert_fail@plt+0x1068>
   12d38:	mov	r0, #0
   12d3c:	str	r0, [sp, #160]	; 0xa0
   12d40:	mov	r0, #1
   12d44:	str	r0, [sp, #128]	; 0x80
   12d48:	movw	r4, #16080	; 0x3ed0
   12d4c:	movw	r0, #62725	; 0xf505
   12d50:	movt	r4, #1
   12d54:	movt	r0, #2
   12d58:	str	r0, [sp, #124]	; 0x7c
   12d5c:	b	12d8c <__assert_fail@plt+0x10e0>
   12d60:	mov	r0, #0
   12d64:	movw	r4, #15480	; 0x3c78
   12d68:	str	r0, [sp, #160]	; 0xa0
   12d6c:	movw	r0, #62657	; 0xf4c1
   12d70:	movt	r4, #1
   12d74:	movt	r0, #2
   12d78:	str	r0, [sp, #124]	; 0x7c
   12d7c:	mov	r0, #0
   12d80:	str	r0, [sp, #128]	; 0x80
   12d84:	movw	r7, #4728	; 0x1278
   12d88:	movt	r7, #4
   12d8c:	ldr	r0, [sp, #204]	; 0xcc
   12d90:	sub	r6, r0, r8
   12d94:	mov	r0, #12
   12d98:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12d9c:	stm	r0, {r4, sl}
   12da0:	movw	r4, #4732	; 0x127c
   12da4:	mov	r5, r0
   12da8:	str	sl, [r0, #8]
   12dac:	mov	r1, r7
   12db0:	movt	r4, #4
   12db4:	ldr	r0, [r4]
   12db8:	cmp	r0, #0
   12dbc:	addne	r1, r0, #8
   12dc0:	ldr	r0, [sp, #148]	; 0x94
   12dc4:	str	r5, [r1]
   12dc8:	str	r5, [r4]
   12dcc:	cmp	r0, #0
   12dd0:	beq	12e08 <__assert_fail@plt+0x115c>
   12dd4:	mov	r0, #12
   12dd8:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12ddc:	mov	r5, r0
   12de0:	movw	r0, #16648	; 0x4108
   12de4:	mov	r1, r7
   12de8:	movt	r0, #1
   12dec:	stm	r5, {r0, sl}
   12df0:	str	sl, [r5, #8]
   12df4:	ldr	r0, [r4]
   12df8:	cmp	r0, #0
   12dfc:	addne	r1, r0, #8
   12e00:	str	r5, [r1]
   12e04:	str	r5, [r4]
   12e08:	cmp	r6, #1
   12e0c:	blt	12f70 <__assert_fail@plt+0x12c4>
   12e10:	ldr	r0, [sp, #140]	; 0x8c
   12e14:	add	r9, r0, r8, lsl #2
   12e18:	mov	r8, #0
   12e1c:	movw	r1, #4740	; 0x1284
   12e20:	mov	r0, #1
   12e24:	movt	r1, #4
   12e28:	strb	r0, [r1]
   12e2c:	ldr	r0, [sp, #212]	; 0xd4
   12e30:	ldr	r4, [r9, r8, lsl #2]
   12e34:	cmp	r0, #0
   12e38:	beq	12ec8 <__assert_fail@plt+0x121c>
   12e3c:	mov	r0, #32
   12e40:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12e44:	ldr	sl, [sp, #208]	; 0xd0
   12e48:	mov	r7, r0
   12e4c:	add	r0, r0, #16
   12e50:	vst1.32	{d10-d11}, [r0]
   12e54:	mov	r5, r7
   12e58:	mov	r0, #20
   12e5c:	vst1.32	{d10-d11}, [r5], r0
   12e60:	mov	r0, sl
   12e64:	bl	1c94c <__assert_fail@plt+0xaca0>
   12e68:	mov	r0, #100	; 0x64
   12e6c:	str	r0, [r7, #4]
   12e70:	mov	r0, #100	; 0x64
   12e74:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12e78:	str	r0, [r7]
   12e7c:	str	sl, [r7, #12]
   12e80:	mov	sl, #0
   12e84:	mov	r0, r4
   12e88:	str	sl, [r7, #16]
   12e8c:	str	sl, [r5]
   12e90:	bl	11ac0 <strlen@plt>
   12e94:	mov	r1, r0
   12e98:	mov	r0, r4
   12e9c:	mov	r2, r7
   12ea0:	bl	1b420 <__assert_fail@plt+0x9774>
   12ea4:	cmp	r0, #0
   12ea8:	bne	138f8 <__assert_fail@plt+0x1c4c>
   12eac:	mov	r0, #12
   12eb0:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12eb4:	mov	r5, r0
   12eb8:	movw	r0, #16680	; 0x4128
   12ebc:	movt	r0, #1
   12ec0:	str	r0, [r5]
   12ec4:	b	12f3c <__assert_fail@plt+0x1290>
   12ec8:	movw	r1, #63510	; 0xf816
   12ecc:	mov	r0, r4
   12ed0:	movt	r1, #2
   12ed4:	bl	11c10 <strpbrk@plt>
   12ed8:	cmp	r0, #0
   12edc:	beq	12f04 <__assert_fail@plt+0x1258>
   12ee0:	mov	r0, #12
   12ee4:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12ee8:	mov	r5, r0
   12eec:	ldr	r0, [sp, #200]	; 0xc8
   12ef0:	cmp	r0, #0
   12ef4:	beq	12f2c <__assert_fail@plt+0x1280>
   12ef8:	movw	r0, #16764	; 0x417c
   12efc:	movt	r0, #1
   12f00:	b	12f34 <__assert_fail@plt+0x1288>
   12f04:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   12f08:	cmp	r0, #1
   12f0c:	ldr	r7, [sp, #192]	; 0xc0
   12f10:	ldr	r0, [sp, #188]	; 0xbc
   12f14:	moveq	r7, r0
   12f18:	mov	r0, #12
   12f1c:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12f20:	mov	r5, r0
   12f24:	str	r7, [r0]
   12f28:	b	12f38 <__assert_fail@plt+0x128c>
   12f2c:	movw	r0, #16812	; 0x41ac
   12f30:	movt	r0, #1
   12f34:	str	r0, [r5]
   12f38:	mov	r7, r4
   12f3c:	movw	r4, #4732	; 0x127c
   12f40:	stmib	r5, {r7, sl}
   12f44:	movw	r1, #4728	; 0x1278
   12f48:	add	r8, r8, #1
   12f4c:	movt	r4, #4
   12f50:	movt	r1, #4
   12f54:	ldr	r0, [r4]
   12f58:	cmp	r0, #0
   12f5c:	addne	r1, r0, #8
   12f60:	cmp	r8, r6
   12f64:	str	r5, [r1]
   12f68:	str	r5, [r4]
   12f6c:	blt	12e1c <__assert_fail@plt+0x1170>
   12f70:	ldr	r0, [sp, #168]	; 0xa8
   12f74:	cmp	r0, #2
   12f78:	beq	12fcc <__assert_fail@plt+0x1320>
   12f7c:	ldr	r7, [sp, #152]	; 0x98
   12f80:	movw	r9, #4728	; 0x1278
   12f84:	cmp	r0, #1
   12f88:	movt	r9, #4
   12f8c:	bne	13054 <__assert_fail@plt+0x13a8>
   12f90:	movw	r1, #4740	; 0x1284
   12f94:	mov	r0, #1
   12f98:	movt	r1, #4
   12f9c:	strb	r0, [r1]
   12fa0:	movw	r0, #4676	; 0x1244
   12fa4:	movt	r0, #4
   12fa8:	ldrb	r4, [r0]
   12fac:	mov	r0, #12
   12fb0:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12fb4:	cmp	r4, #0
   12fb8:	beq	13008 <__assert_fail@plt+0x135c>
   12fbc:	movw	r1, #17168	; 0x4310
   12fc0:	movt	r1, #1
   12fc4:	str	r1, [r0]
   12fc8:	b	1302c <__assert_fail@plt+0x1380>
   12fcc:	movw	r1, #4740	; 0x1284
   12fd0:	mov	r0, #1
   12fd4:	movt	r1, #4
   12fd8:	strb	r0, [r1]
   12fdc:	movw	r0, #4676	; 0x1244
   12fe0:	movt	r0, #4
   12fe4:	ldrb	r4, [r0]
   12fe8:	mov	r0, #12
   12fec:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   12ff0:	ldr	r7, [sp, #152]	; 0x98
   12ff4:	cmp	r4, #0
   12ff8:	beq	13018 <__assert_fail@plt+0x136c>
   12ffc:	movw	r1, #17272	; 0x4378
   13000:	movt	r1, #1
   13004:	b	13020 <__assert_fail@plt+0x1374>
   13008:	movw	r1, #17116	; 0x42dc
   1300c:	movt	r1, #1
   13010:	str	r1, [r0]
   13014:	b	1302c <__assert_fail@plt+0x1380>
   13018:	movw	r1, #17220	; 0x4344
   1301c:	movt	r1, #1
   13020:	movw	r9, #4728	; 0x1278
   13024:	str	r1, [r0]
   13028:	movt	r9, #4
   1302c:	movw	r4, #4732	; 0x127c
   13030:	mov	r2, r9
   13034:	str	sl, [r0, #4]
   13038:	str	sl, [r0, #8]
   1303c:	movt	r4, #4
   13040:	ldr	r1, [r4]
   13044:	cmp	r1, #0
   13048:	addne	r2, r1, #8
   1304c:	str	r0, [r2]
   13050:	str	r0, [r4]
   13054:	cmp	r7, #0
   13058:	beq	13094 <__assert_fail@plt+0x13e8>
   1305c:	mov	r0, #12
   13060:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   13064:	movw	r1, #17324	; 0x43ac
   13068:	mov	r2, r9
   1306c:	movt	r1, #1
   13070:	str	r1, [r0]
   13074:	movw	r1, #4680	; 0x1248
   13078:	movt	r1, #4
   1307c:	stmib	r0, {r1, sl}
   13080:	ldr	r1, [r4]
   13084:	cmp	r1, #0
   13088:	addne	r2, r1, #8
   1308c:	str	r0, [r2]
   13090:	str	r0, [r4]
   13094:	ldr	r0, [sp, #180]	; 0xb4
   13098:	ldr	r8, [sp, #120]	; 0x78
   1309c:	cmp	r0, #0
   130a0:	beq	130fc <__assert_fail@plt+0x1450>
   130a4:	movw	r0, #4664	; 0x1238
   130a8:	movt	r0, #4
   130ac:	ldrb	r4, [r0]
   130b0:	mov	r0, #12
   130b4:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   130b8:	movw	r1, #17708	; 0x452c
   130bc:	movw	r2, #17592	; 0x44b8
   130c0:	cmp	r4, #0
   130c4:	movw	r4, #4732	; 0x127c
   130c8:	movt	r1, #1
   130cc:	movt	r2, #1
   130d0:	movt	r4, #4
   130d4:	movne	r1, r2
   130d8:	movw	r2, #4728	; 0x1278
   130dc:	stm	r0, {r1, sl}
   130e0:	movt	r2, #4
   130e4:	str	sl, [r0, #8]
   130e8:	ldr	r1, [r4]
   130ec:	cmp	r1, #0
   130f0:	addne	r2, r1, #8
   130f4:	str	r0, [r2]
   130f8:	str	r0, [r4]
   130fc:	mov	r0, #12
   13100:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   13104:	cmp	r8, #0
   13108:	beq	13118 <__assert_fail@plt+0x146c>
   1310c:	movw	r1, #17776	; 0x4570
   13110:	movt	r1, #1
   13114:	b	13120 <__assert_fail@plt+0x1474>
   13118:	movw	r1, #17832	; 0x45a8
   1311c:	movt	r1, #1
   13120:	ldr	r2, [r4]
   13124:	str	r1, [r0]
   13128:	movw	r1, #4648	; 0x1228
   1312c:	movt	r1, #4
   13130:	str	r1, [r0, #4]
   13134:	movw	r1, #4728	; 0x1278
   13138:	str	sl, [r0, #8]
   1313c:	movt	r1, #4
   13140:	cmp	r2, #0
   13144:	addne	r1, r2, #8
   13148:	cmp	r6, #2
   1314c:	str	r0, [r1]
   13150:	str	r0, [r4]
   13154:	movw	r0, #18204	; 0x471c
   13158:	movt	r0, #1
   1315c:	blt	13174 <__assert_fail@plt+0x14c8>
   13160:	ldr	r0, [r5, #8]
   13164:	movw	r1, #4736	; 0x1280
   13168:	movt	r1, #4
   1316c:	str	r0, [r1]
   13170:	ldr	r0, [sp, #100]	; 0x64
   13174:	movw	r5, #4744	; 0x1288
   13178:	cmp	r7, #0
   1317c:	movt	r5, #4
   13180:	str	r0, [r5]
   13184:	beq	131a8 <__assert_fail@plt+0x14fc>
   13188:	movw	r1, #62729	; 0xf509
   1318c:	mov	r0, #0
   13190:	mov	r2, #5
   13194:	movt	r1, #2
   13198:	bl	11940 <dcgettext@plt>
   1319c:	ldr	r1, [sp, #364]	; 0x16c
   131a0:	ldr	r2, [sp, #124]	; 0x7c
   131a4:	bl	11868 <printf@plt>
   131a8:	ldr	r0, [sp, #360]	; 0x168
   131ac:	bl	11c7c <getc@plt>
   131b0:	ldr	r1, [sp, #160]	; 0xa0
   131b4:	add	r4, sp, #336	; 0x150
   131b8:	str	r0, [sp, #336]	; 0x150
   131bc:	cmp	r1, #0
   131c0:	cmnne	r0, #1
   131c4:	bne	131d4 <__assert_fail@plt+0x1528>
   131c8:	cmn	r0, #1
   131cc:	bne	133b4 <__assert_fail@plt+0x1708>
   131d0:	b	133d4 <__assert_fail@plt+0x1728>
   131d4:	ldr	r1, [sp, #360]	; 0x168
   131d8:	bl	11ae4 <ungetc@plt>
   131dc:	str	sl, [sp, #336]	; 0x150
   131e0:	b	133b4 <__assert_fail@plt+0x1708>
   131e4:	bl	11a90 <__ctype_b_loc@plt>
   131e8:	ldrb	r1, [r5]
   131ec:	ldr	r0, [r0]
   131f0:	add	r0, r0, r1, lsl #1
   131f4:	ldrb	r0, [r0, #1]
   131f8:	tst	r0, #8
   131fc:	beq	12b5c <__assert_fail@plt+0xeb0>
   13200:	sub	r9, r1, #48	; 0x30
   13204:	cmp	r1, #50	; 0x32
   13208:	bcc	132a8 <__assert_fail@plt+0x15fc>
   1320c:	movw	r1, #63012	; 0xf624
   13210:	mov	r0, #0
   13214:	mov	r2, #5
   13218:	mov	r4, #0
   1321c:	movt	r1, #2
   13220:	bl	11940 <dcgettext@plt>
   13224:	ldr	r6, [sp, #112]	; 0x70
   13228:	mov	r8, r0
   1322c:	mov	r0, #0
   13230:	mov	r1, #8
   13234:	mov	r2, r6
   13238:	bl	18e98 <__assert_fail@plt+0x71ec>
   1323c:	mov	r3, r0
   13240:	ldrb	r0, [r5, #1]
   13244:	mov	r1, #0
   13248:	mov	r2, r8
   1324c:	str	r0, [sp]
   13250:	mov	r0, #0
   13254:	bl	119e8 <error@plt>
   13258:	movw	r1, #62348	; 0xf38c
   1325c:	mov	r0, #0
   13260:	mov	r2, #5
   13264:	movt	r1, #2
   13268:	bl	11940 <dcgettext@plt>
   1326c:	mov	r2, r6
   13270:	ldr	r6, [sp, #172]	; 0xac
   13274:	mov	r5, r0
   13278:	mov	r0, #0
   1327c:	mov	r1, #8
   13280:	bl	18e98 <__assert_fail@plt+0x71ec>
   13284:	mov	r3, r0
   13288:	mov	r0, #0
   1328c:	mov	r1, #0
   13290:	mov	r2, r5
   13294:	str	r9, [sp]
   13298:	bl	119e8 <error@plt>
   1329c:	ldr	r5, [sp, #156]	; 0x9c
   132a0:	ldr	r8, [sp, #120]	; 0x78
   132a4:	b	137c0 <__assert_fail@plt+0x1b14>
   132a8:	cmp	r9, #1
   132ac:	bne	132f0 <__assert_fail@plt+0x1644>
   132b0:	movw	r0, #4668	; 0x123c
   132b4:	movt	r0, #4
   132b8:	ldr	r0, [r0]
   132bc:	cmp	r0, #2
   132c0:	bne	13318 <__assert_fail@plt+0x166c>
   132c4:	movw	r1, #62421	; 0xf3d5
   132c8:	mov	r0, #0
   132cc:	mov	r2, #5
   132d0:	mov	r4, #0
   132d4:	movt	r1, #2
   132d8:	bl	11940 <dcgettext@plt>
   132dc:	mov	r2, r0
   132e0:	mov	r0, #0
   132e4:	mov	r1, #0
   132e8:	bl	119e8 <error@plt>
   132ec:	b	1329c <__assert_fail@plt+0x15f0>
   132f0:	mov	r0, #1
   132f4:	movw	r4, #15480	; 0x3c78
   132f8:	str	r0, [sp, #160]	; 0xa0
   132fc:	mov	r0, #0
   13300:	movt	r4, #1
   13304:	str	r0, [sp, #128]	; 0x80
   13308:	movw	r0, #62649	; 0xf4b9
   1330c:	movt	r0, #2
   13310:	str	r0, [sp, #124]	; 0x7c
   13314:	b	12d84 <__assert_fail@plt+0x10d8>
   13318:	ldr	r0, [sp, #20]
   1331c:	movw	r7, #4728	; 0x1278
   13320:	movt	r7, #4
   13324:	cmp	r0, #0
   13328:	ldrne	r0, [sp, #168]	; 0xa8
   1332c:	cmpne	r0, #1
   13330:	bne	13348 <__assert_fail@plt+0x169c>
   13334:	mov	r0, #1
   13338:	str	r0, [sp, #160]	; 0xa0
   1333c:	mov	r0, #0
   13340:	str	r0, [sp, #128]	; 0x80
   13344:	b	13394 <__assert_fail@plt+0x16e8>
   13348:	mov	r0, #1
   1334c:	movw	r1, #62593	; 0xf481
   13350:	mov	r2, #5
   13354:	str	r0, [sp, #160]	; 0xa0
   13358:	mov	r0, #0
   1335c:	movt	r1, #2
   13360:	str	r0, [sp, #128]	; 0x80
   13364:	mov	r0, #0
   13368:	bl	11940 <dcgettext@plt>
   1336c:	ldr	r2, [sp, #112]	; 0x70
   13370:	mov	r4, r0
   13374:	mov	r0, #0
   13378:	mov	r1, #8
   1337c:	bl	18e98 <__assert_fail@plt+0x71ec>
   13380:	mov	r3, r0
   13384:	mov	r0, #0
   13388:	mov	r1, #0
   1338c:	mov	r2, r4
   13390:	bl	119e8 <error@plt>
   13394:	movw	r0, #62649	; 0xf4b9
   13398:	movw	r4, #15480	; 0x3c78
   1339c:	movt	r0, #2
   133a0:	movt	r4, #1
   133a4:	str	r0, [sp, #124]	; 0x7c
   133a8:	mov	r0, #1
   133ac:	str	r0, [sp, #168]	; 0xa8
   133b0:	b	12d8c <__assert_fail@plt+0x10e0>
   133b4:	ldr	r1, [r5]
   133b8:	mov	r0, r4
   133bc:	blx	r1
   133c0:	cmp	r0, #8
   133c4:	beq	133d4 <__assert_fail@plt+0x1728>
   133c8:	ldr	r0, [sp, #336]	; 0x150
   133cc:	cmn	r0, #1
   133d0:	bne	133b4 <__assert_fail@plt+0x1708>
   133d4:	cmp	r7, #0
   133d8:	beq	13764 <__assert_fail@plt+0x1ab8>
   133dc:	ldr	r0, [sp, #128]	; 0x80
   133e0:	cmp	r0, #0
   133e4:	beq	13460 <__assert_fail@plt+0x17b4>
   133e8:	movw	r1, #62763	; 0xf52b
   133ec:	mov	r0, #0
   133f0:	mov	r2, #5
   133f4:	movt	r1, #2
   133f8:	bl	11940 <dcgettext@plt>
   133fc:	movw	r1, #62818	; 0xf562
   13400:	mov	r4, r0
   13404:	mov	r0, #0
   13408:	mov	r2, #5
   1340c:	movt	r1, #2
   13410:	bl	11940 <dcgettext@plt>
   13414:	mov	r1, r0
   13418:	ldr	r0, [sp, #368]	; 0x170
   1341c:	cmp	r0, #2
   13420:	beq	13438 <__assert_fail@plt+0x178c>
   13424:	cmp	r0, #1
   13428:	bne	13448 <__assert_fail@plt+0x179c>
   1342c:	movw	r0, #2212	; 0x8a4
   13430:	mov	r1, r4
   13434:	b	1343c <__assert_fail@plt+0x1790>
   13438:	movw	r0, #2212	; 0x8a4
   1343c:	movt	r0, #3
   13440:	bl	11868 <printf@plt>
   13444:	b	13460 <__assert_fail@plt+0x17b4>
   13448:	movw	r1, #62870	; 0xf596
   1344c:	mov	r0, #0
   13450:	mov	r2, #5
   13454:	movt	r1, #2
   13458:	bl	11940 <dcgettext@plt>
   1345c:	bl	11868 <printf@plt>
   13460:	ldr	r0, [sp, #136]	; 0x88
   13464:	ldr	r1, [sp, #164]	; 0xa4
   13468:	orrs	r0, r1, r0
   1346c:	ldreq	r0, [sp, #144]	; 0x90
   13470:	cmpeq	r0, #0
   13474:	beq	13764 <__assert_fail@plt+0x1ab8>
   13478:	ldr	r0, [sp, #184]	; 0xb8
   1347c:	sub	r9, fp, #728	; 0x2d8
   13480:	cmp	r0, #0
   13484:	beq	13528 <__assert_fail@plt+0x187c>
   13488:	ldr	r0, [sp, #144]	; 0x90
   1348c:	bl	11a54 <localtime@plt>
   13490:	cmp	r0, #0
   13494:	beq	13528 <__assert_fail@plt+0x187c>
   13498:	mov	r4, r0
   1349c:	movw	r2, #63680	; 0xf8c0
   134a0:	mov	r0, r9
   134a4:	mov	r1, #20
   134a8:	movt	r2, #2
   134ac:	mov	r3, r4
   134b0:	bl	11a3c <strftime@plt>
   134b4:	cmp	r0, #19
   134b8:	bne	13a8c <__assert_fail@plt+0x1de0>
   134bc:	ldrb	r0, [fp, #-709]	; 0xfffffd3b
   134c0:	cmp	r0, #0
   134c4:	bne	13aac <__assert_fail@plt+0x1e00>
   134c8:	ldrb	r0, [fp, #-710]	; 0xfffffd3a
   134cc:	cmp	r0, #0
   134d0:	beq	13acc <__assert_fail@plt+0x1e20>
   134d4:	movw	r1, #63837	; 0xf95d
   134d8:	mov	r0, #0
   134dc:	mov	r2, #5
   134e0:	movt	r1, #2
   134e4:	bl	11940 <dcgettext@plt>
   134e8:	ldr	r1, [sp, #144]	; 0x90
   134ec:	ldr	r2, [r1, #4]
   134f0:	mov	r1, r9
   134f4:	bl	11868 <printf@plt>
   134f8:	movw	r2, #63876	; 0xf984
   134fc:	mov	r0, r9
   13500:	mov	r1, #20
   13504:	mov	r3, r4
   13508:	movt	r2, #2
   1350c:	bl	11a3c <strftime@plt>
   13510:	cmp	r0, #5
   13514:	bne	13aec <__assert_fail@plt+0x1e40>
   13518:	movw	r0, #543	; 0x21f
   1351c:	mov	r1, r9
   13520:	movt	r0, #3
   13524:	bl	11868 <printf@plt>
   13528:	ldr	r4, [sp, #164]	; 0xa4
   1352c:	movw	r1, #63892	; 0xf994
   13530:	movw	r2, #63923	; 0xf9b3
   13534:	mov	r0, #5
   13538:	str	r0, [sp]
   1353c:	mov	r0, #0
   13540:	movt	r1, #2
   13544:	movt	r2, #2
   13548:	mov	r3, r4
   1354c:	bl	11ca0 <dcngettext@plt>
   13550:	mov	r8, r0
   13554:	mov	r5, #1
   13558:	mov	r0, r4
   1355c:	mov	r1, #0
   13560:	mov	r2, r9
   13564:	mov	r3, #0
   13568:	stm	sp, {r5, sl}
   1356c:	str	r5, [sp, #8]
   13570:	str	sl, [sp, #12]
   13574:	bl	15270 <__assert_fail@plt+0x35c4>
   13578:	mov	r1, r0
   1357c:	mov	r0, r8
   13580:	bl	11868 <printf@plt>
   13584:	movw	r0, #4740	; 0x1284
   13588:	movw	r1, #63979	; 0xf9eb
   1358c:	mov	r2, #5
   13590:	movt	r0, #4
   13594:	movt	r1, #2
   13598:	ldrb	r0, [r0]
   1359c:	cmp	r0, #0
   135a0:	movw	r0, #63955	; 0xf9d3
   135a4:	movt	r0, #2
   135a8:	movne	r1, r0
   135ac:	mov	r0, #0
   135b0:	bl	11940 <dcgettext@plt>
   135b4:	movw	r8, #4680	; 0x1248
   135b8:	mov	r4, r0
   135bc:	mov	r2, r9
   135c0:	mov	r3, #0
   135c4:	movt	r8, #4
   135c8:	ldrd	r0, [r8, #8]
   135cc:	stm	sp, {r5, sl}
   135d0:	str	r5, [sp, #8]
   135d4:	str	sl, [sp, #12]
   135d8:	bl	15270 <__assert_fail@plt+0x35c4>
   135dc:	mov	r1, r0
   135e0:	mov	r0, r4
   135e4:	bl	11868 <printf@plt>
   135e8:	movw	r1, #63998	; 0xf9fe
   135ec:	mov	r0, #0
   135f0:	mov	r2, #5
   135f4:	movt	r1, #2
   135f8:	bl	11940 <dcgettext@plt>
   135fc:	str	r0, [sp, #184]	; 0xb8
   13600:	ldrd	r0, [r8, #16]
   13604:	mov	r2, r9
   13608:	mov	r3, #0
   1360c:	stm	sp, {r5, sl}
   13610:	str	r5, [sp, #8]
   13614:	str	sl, [sp, #12]
   13618:	bl	15270 <__assert_fail@plt+0x35c4>
   1361c:	str	r0, [sp, #168]	; 0xa8
   13620:	ldrd	r0, [r8, #24]
   13624:	sub	lr, fp, #1024	; 0x400
   13628:	mov	r9, #0
   1362c:	mov	r3, #0
   13630:	sub	r2, lr, #356	; 0x164
   13634:	stm	sp, {r5, r9}
   13638:	str	r5, [sp, #8]
   1363c:	str	r9, [sp, #12]
   13640:	bl	15270 <__assert_fail@plt+0x35c4>
   13644:	mov	r4, r0
   13648:	ldrd	r0, [r8, #32]
   1364c:	add	r2, sp, #1280	; 0x500
   13650:	mov	r3, #0
   13654:	stm	sp, {r5, r9}
   13658:	str	r5, [sp, #8]
   1365c:	str	r9, [sp, #12]
   13660:	bl	15270 <__assert_fail@plt+0x35c4>
   13664:	mov	sl, r7
   13668:	mov	r7, r0
   1366c:	ldrd	r0, [r8, #40]	; 0x28
   13670:	add	r2, sp, #628	; 0x274
   13674:	mov	r3, #0
   13678:	stm	sp, {r5, r9}
   1367c:	str	r5, [sp, #8]
   13680:	str	r9, [sp, #12]
   13684:	bl	15270 <__assert_fail@plt+0x35c4>
   13688:	str	r0, [sp]
   1368c:	ldr	r0, [sp, #184]	; 0xb8
   13690:	ldr	r1, [sp, #168]	; 0xa8
   13694:	mov	r3, r7
   13698:	mov	r2, r4
   1369c:	mov	r7, sl
   136a0:	bl	11868 <printf@plt>
   136a4:	cmp	r6, #0
   136a8:	bne	13748 <__assert_fail@plt+0x1a9c>
   136ac:	movw	r0, #4740	; 0x1284
   136b0:	movt	r0, #4
   136b4:	ldrb	r0, [r0]
   136b8:	cmp	r0, #1
   136bc:	bne	136d0 <__assert_fail@plt+0x1a24>
   136c0:	movw	r1, #64178	; 0xfab2
   136c4:	mov	r0, #0
   136c8:	movt	r1, #2
   136cc:	b	1373c <__assert_fail@plt+0x1a90>
   136d0:	movw	r5, #4680	; 0x1248
   136d4:	movt	r5, #4
   136d8:	ldrd	r0, [r5, #16]
   136dc:	orrs	r0, r0, r1
   136e0:	beq	13730 <__assert_fail@plt+0x1a84>
   136e4:	movw	r1, #64266	; 0xfb0a
   136e8:	mov	r0, #0
   136ec:	mov	r2, #5
   136f0:	movt	r1, #2
   136f4:	bl	11940 <dcgettext@plt>
   136f8:	mov	r4, r0
   136fc:	ldrd	r0, [r5, #16]
   13700:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   13704:	ldr	r2, [sp, #164]	; 0xa4
   13708:	vmov	d17, r0, r1
   1370c:	mov	r0, r4
   13710:	vmov	s0, r2
   13714:	vcvt.f64.u32	d16, s0
   13718:	vsub.f64	d16, d17, d16
   1371c:	vmul.f64	d16, d16, d12
   13720:	vdiv.f64	d16, d16, d17
   13724:	vmov	r2, r3, d16
   13728:	bl	11868 <printf@plt>
   1372c:	b	13748 <__assert_fail@plt+0x1a9c>
   13730:	movw	r1, #64312	; 0xfb38
   13734:	mov	r0, #0
   13738:	movt	r1, #2
   1373c:	mov	r2, #5
   13740:	bl	11940 <dcgettext@plt>
   13744:	bl	11868 <printf@plt>
   13748:	movw	r0, #4628	; 0x1214
   1374c:	movt	r0, #4
   13750:	ldr	r1, [r0]
   13754:	mov	r0, #10
   13758:	bl	11c04 <putc@plt>
   1375c:	ldr	r8, [sp, #120]	; 0x78
   13760:	mov	sl, #0
   13764:	ldr	r0, [sp, #360]	; 0x168
   13768:	bl	118c8 <ferror@plt>
   1376c:	cmp	r0, #0
   13770:	beq	137ac <__assert_fail@plt+0x1b00>
   13774:	ldr	r0, [sp, #196]	; 0xc4
   13778:	ldr	r2, [sp, #364]	; 0x16c
   1377c:	mov	r1, #8
   13780:	mov	r4, #0
   13784:	ldr	r5, [r0]
   13788:	mov	r0, #0
   1378c:	bl	18e98 <__assert_fail@plt+0x71ec>
   13790:	movw	r2, #2212	; 0x8a4
   13794:	mov	r3, r0
   13798:	mov	r0, #0
   1379c:	mov	r1, r5
   137a0:	movt	r2, #3
   137a4:	bl	119e8 <error@plt>
   137a8:	b	137b8 <__assert_fail@plt+0x1b0c>
   137ac:	movw	r0, #4648	; 0x1228
   137b0:	movt	r0, #4
   137b4:	ldr	r4, [r0, #8]
   137b8:	ldr	r5, [sp, #156]	; 0x9c
   137bc:	ldr	r6, [sp, #172]	; 0xac
   137c0:	mov	r0, r6
   137c4:	bl	11b74 <fclose@plt>
   137c8:	cmn	r0, #1
   137cc:	beq	13868 <__assert_fail@plt+0x1bbc>
   137d0:	ldr	r0, [sp, #176]	; 0xb0
   137d4:	cmp	r0, #0
   137d8:	beq	137e0 <__assert_fail@plt+0x1b34>
   137dc:	bl	1b22c <__assert_fail@plt+0x9580>
   137e0:	cmp	r5, #0
   137e4:	beq	13810 <__assert_fail@plt+0x1b64>
   137e8:	movw	r1, #2200	; 0x898
   137ec:	add	r0, sp, #328	; 0x148
   137f0:	mov	r2, #0
   137f4:	add	r3, sp, #332	; 0x14c
   137f8:	str	r0, [sp]
   137fc:	mov	r0, r5
   13800:	movt	r1, #3
   13804:	bl	14fa0 <__assert_fail@plt+0x32f4>
   13808:	cmp	r0, #0
   1380c:	bne	12798 <__assert_fail@plt+0xaec>
   13810:	ldr	r0, [sp, #108]	; 0x6c
   13814:	cmp	r0, #0
   13818:	beq	1382c <__assert_fail@plt+0x1b80>
   1381c:	movw	r0, #61627	; 0xf0bb
   13820:	mov	r1, r4
   13824:	movt	r0, #2
   13828:	bl	11868 <printf@plt>
   1382c:	mov	r5, #0
   13830:	cmp	r4, #0
   13834:	bne	138b8 <__assert_fail@plt+0x1c0c>
   13838:	movw	r1, #4648	; 0x1228
   1383c:	clz	r0, r8
   13840:	movt	r1, #4
   13844:	lsr	r0, r0, #5
   13848:	ldrd	r2, [r1]
   1384c:	orrs	r1, r2, r3
   13850:	movwne	r1, #1
   13854:	orr	r0, r0, r1
   13858:	clz	r1, r7
   1385c:	lsr	r1, r1, #5
   13860:	and	r5, r1, r0
   13864:	b	138b8 <__assert_fail@plt+0x1c0c>
   13868:	ldr	r0, [sp, #196]	; 0xc4
   1386c:	ldr	r2, [sp, #112]	; 0x70
   13870:	mov	r5, #0
   13874:	mov	r1, #8
   13878:	b	13894 <__assert_fail@plt+0x1be8>
   1387c:	mov	r0, r4
   13880:	bl	11c88 <close@plt>
   13884:	ldr	r0, [sp, #196]	; 0xc4
   13888:	mov	r5, #0
   1388c:	mov	r1, #8
   13890:	mov	r2, r9
   13894:	ldr	r4, [r0]
   13898:	mov	r0, #0
   1389c:	bl	18e98 <__assert_fail@plt+0x71ec>
   138a0:	movw	r2, #2212	; 0x8a4
   138a4:	mov	r3, r0
   138a8:	mov	r0, #0
   138ac:	mov	r1, r4
   138b0:	movt	r2, #3
   138b4:	bl	119e8 <error@plt>
   138b8:	mov	r0, r5
   138bc:	sub	sp, fp, #72	; 0x48
   138c0:	vpop	{d8-d12}
   138c4:	add	sp, sp, #4
   138c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138cc:	movw	r1, #61464	; 0xf018
   138d0:	mov	r0, #0
   138d4:	mov	r2, #5
   138d8:	mov	r5, #0
   138dc:	movt	r1, #2
   138e0:	bl	11940 <dcgettext@plt>
   138e4:	mov	r2, r0
   138e8:	mov	r0, #0
   138ec:	mov	r1, #0
   138f0:	bl	119e8 <error@plt>
   138f4:	b	138b8 <__assert_fail@plt+0x1c0c>
   138f8:	movw	r2, #2212	; 0x8a4
   138fc:	mov	r3, r0
   13900:	mov	r0, #1
   13904:	mov	r1, #0
   13908:	movt	r2, #3
   1390c:	bl	119e8 <error@plt>
   13910:	mov	r0, #1
   13914:	bl	13bd8 <__assert_fail@plt+0x1f2c>
   13918:	mov	r0, #0
   1391c:	bl	13bd8 <__assert_fail@plt+0x1f2c>
   13920:	movw	r1, #4632	; 0x1218
   13924:	movw	r3, #64356	; 0xfb64
   13928:	movt	r1, #4
   1392c:	movt	r3, #2
   13930:	ldr	r2, [r1]
   13934:	ldr	r1, [fp, #-1380]	; 0xfffffa9c
   13938:	str	r2, [sp]
   1393c:	mov	r2, #108	; 0x6c
   13940:	bl	1a244 <__assert_fail@plt+0x8598>
   13944:	movw	r0, #61382	; 0xefc6
   13948:	movw	r1, #61397	; 0xefd5
   1394c:	movw	r3, #61406	; 0xefde
   13950:	movw	r2, #1613	; 0x64d
   13954:	movt	r0, #2
   13958:	movt	r1, #2
   1395c:	movt	r3, #2
   13960:	bl	11cac <__assert_fail@plt>
   13964:	movw	r1, #62237	; 0xf31d
   13968:	mov	r0, #0
   1396c:	mov	r2, #5
   13970:	movt	r1, #2
   13974:	bl	11940 <dcgettext@plt>
   13978:	mov	r2, r0
   1397c:	mov	r0, #1
   13980:	mov	r1, #0
   13984:	bl	119e8 <error@plt>
   13988:	mov	r4, #34	; 0x22
   1398c:	b	13994 <__assert_fail@plt+0x1ce8>
   13990:	mov	r4, #22
   13994:	movw	r1, #62298	; 0xf35a
   13998:	mov	r0, #0
   1399c:	mov	r2, #5
   139a0:	movt	r1, #2
   139a4:	bl	11940 <dcgettext@plt>
   139a8:	mov	r6, r0
   139ac:	mov	r0, #0
   139b0:	mov	r1, #8
   139b4:	mov	r2, r5
   139b8:	bl	18e98 <__assert_fail@plt+0x71ec>
   139bc:	mov	r3, r0
   139c0:	mov	r0, #1
   139c4:	mov	r1, r4
   139c8:	mov	r2, r6
   139cc:	bl	119e8 <error@plt>
   139d0:	movw	r1, #62298	; 0xf35a
   139d4:	mov	r0, #0
   139d8:	mov	r2, #5
   139dc:	movt	r1, #2
   139e0:	bl	11940 <dcgettext@plt>
   139e4:	mov	r4, r0
   139e8:	mov	r0, #0
   139ec:	mov	r1, #8
   139f0:	mov	r2, r5
   139f4:	bl	18e98 <__assert_fail@plt+0x71ec>
   139f8:	mov	r3, r0
   139fc:	mov	r0, #1
   13a00:	mov	r1, #0
   13a04:	mov	r2, r4
   13a08:	bl	119e8 <error@plt>
   13a0c:	movw	r0, #62928	; 0xf5d0
   13a10:	movw	r1, #61397	; 0xefd5
   13a14:	movw	r3, #62937	; 0xf5d9
   13a18:	movw	r2, #935	; 0x3a7
   13a1c:	movt	r0, #2
   13a20:	movt	r1, #2
   13a24:	movt	r3, #2
   13a28:	bl	11cac <__assert_fail@plt>
   13a2c:	ldr	r0, [sp, #196]	; 0xc4
   13a30:	movw	r1, #61314	; 0xef82
   13a34:	mov	r2, #5
   13a38:	movt	r1, #2
   13a3c:	ldr	r4, [r0]
   13a40:	mov	r0, #0
   13a44:	bl	11940 <dcgettext@plt>
   13a48:	mov	r2, r0
   13a4c:	mov	r0, #1
   13a50:	mov	r1, r4
   13a54:	bl	119e8 <error@plt>
   13a58:	movw	r1, #61257	; 0xef49
   13a5c:	movt	r1, #2
   13a60:	b	13b38 <__assert_fail@plt+0x1e8c>
   13a64:	movw	r1, #62670	; 0xf4ce
   13a68:	mov	r0, #0
   13a6c:	mov	r2, #5
   13a70:	movt	r1, #2
   13a74:	bl	11940 <dcgettext@plt>
   13a78:	ldr	r2, [sp, #112]	; 0x70
   13a7c:	mov	r4, r0
   13a80:	mov	r0, #0
   13a84:	mov	r1, #8
   13a88:	b	139f4 <__assert_fail@plt+0x1d48>
   13a8c:	movw	r0, #63698	; 0xf8d2
   13a90:	movw	r1, #61397	; 0xefd5
   13a94:	movw	r3, #63724	; 0xf8ec
   13a98:	movw	r2, #845	; 0x34d
   13a9c:	movt	r0, #2
   13aa0:	movt	r1, #2
   13aa4:	movt	r3, #2
   13aa8:	bl	11cac <__assert_fail@plt>
   13aac:	movw	r0, #63779	; 0xf923
   13ab0:	movw	r1, #61397	; 0xefd5
   13ab4:	movw	r3, #63724	; 0xf8ec
   13ab8:	movw	r2, #846	; 0x34e
   13abc:	movt	r0, #2
   13ac0:	movt	r1, #2
   13ac4:	movt	r3, #2
   13ac8:	bl	11cac <__assert_fail@plt>
   13acc:	movw	r0, #63808	; 0xf940
   13ad0:	movw	r1, #61397	; 0xefd5
   13ad4:	movw	r3, #63724	; 0xf8ec
   13ad8:	movw	r2, #847	; 0x34f
   13adc:	movt	r0, #2
   13ae0:	movt	r1, #2
   13ae4:	movt	r3, #2
   13ae8:	bl	11cac <__assert_fail@plt>
   13aec:	movw	r0, #63879	; 0xf987
   13af0:	movw	r1, #61397	; 0xefd5
   13af4:	movw	r3, #63724	; 0xf8ec
   13af8:	movw	r2, #851	; 0x353
   13afc:	movt	r0, #2
   13b00:	movt	r1, #2
   13b04:	movt	r3, #2
   13b08:	bl	11cac <__assert_fail@plt>
   13b0c:	movw	r1, #61160	; 0xeee8
   13b10:	mov	r0, #0
   13b14:	mov	r2, #5
   13b18:	movt	r1, #2
   13b1c:	bl	11940 <dcgettext@plt>
   13b20:	mov	r4, r0
   13b24:	bl	11af0 <__errno_location@plt>
   13b28:	str	r0, [sp, #196]	; 0xc4
   13b2c:	b	13b6c <__assert_fail@plt+0x1ec0>
   13b30:	movw	r1, #61192	; 0xef08
   13b34:	movt	r1, #2
   13b38:	mov	r0, #0
   13b3c:	mov	r2, #5
   13b40:	bl	11940 <dcgettext@plt>
   13b44:	mov	r4, r0
   13b48:	b	13b6c <__assert_fail@plt+0x1ec0>
   13b4c:	movw	r1, #61225	; 0xef29
   13b50:	mov	r0, #0
   13b54:	mov	r2, #5
   13b58:	movt	r1, #2
   13b5c:	bl	11940 <dcgettext@plt>
   13b60:	mov	r4, r0
   13b64:	ldr	r0, [sp, #196]	; 0xc4
   13b68:	str	r5, [r0]
   13b6c:	ldr	r0, [sp, #196]	; 0xc4
   13b70:	mov	r1, #8
   13b74:	mov	r2, r4
   13b78:	ldr	r5, [r0]
   13b7c:	mov	r0, #0
   13b80:	bl	18e98 <__assert_fail@plt+0x71ec>
   13b84:	movw	r2, #2212	; 0x8a4
   13b88:	mov	r3, r0
   13b8c:	mov	r0, #1
   13b90:	mov	r1, r5
   13b94:	movt	r2, #3
   13b98:	bl	119e8 <error@plt>
   13b9c:	movw	r1, #61438	; 0xeffe
   13ba0:	mov	r0, #0
   13ba4:	mov	r2, #5
   13ba8:	movt	r1, #2
   13bac:	bl	11940 <dcgettext@plt>
   13bb0:	mov	r2, r0
   13bb4:	mov	r0, #0
   13bb8:	mov	r1, #0
   13bbc:	bl	119e8 <error@plt>
   13bc0:	mov	r0, #1
   13bc4:	bl	13bd8 <__assert_fail@plt+0x1f2c>
   13bc8:	movw	r0, #4644	; 0x1224
   13bcc:	movt	r0, #4
   13bd0:	ldr	r0, [r0]
   13bd4:	b	1b22c <__assert_fail@plt+0x9580>
   13bd8:	push	{fp, lr}
   13bdc:	mov	fp, sp
   13be0:	cmp	r0, #0
   13be4:	bne	13c34 <__assert_fail@plt+0x1f88>
   13be8:	movw	r5, #4628	; 0x1214
   13bec:	movw	r1, #61821	; 0xf17d
   13bf0:	mov	r0, #0
   13bf4:	mov	r2, #5
   13bf8:	movt	r5, #4
   13bfc:	movt	r1, #2
   13c00:	ldr	r4, [r5]
   13c04:	bl	11940 <dcgettext@plt>
   13c08:	movw	r6, #4756	; 0x1294
   13c0c:	mov	r1, r0
   13c10:	mov	r0, r4
   13c14:	movt	r6, #4
   13c18:	ldr	r2, [r6]
   13c1c:	bl	11ad8 <fprintf@plt>
   13c20:	ldr	r0, [r5]
   13c24:	ldr	r1, [r6]
   13c28:	bl	1502c <__assert_fail@plt+0x3380>
   13c2c:	mov	r0, #0
   13c30:	bl	11a9c <exit@plt>
   13c34:	mov	r4, r0
   13c38:	movw	r0, #4624	; 0x1210
   13c3c:	movw	r1, #61782	; 0xf156
   13c40:	mov	r2, #5
   13c44:	movt	r0, #4
   13c48:	movt	r1, #2
   13c4c:	ldr	r5, [r0]
   13c50:	mov	r0, #0
   13c54:	bl	11940 <dcgettext@plt>
   13c58:	mov	r1, r0
   13c5c:	movw	r0, #4756	; 0x1294
   13c60:	movt	r0, #4
   13c64:	ldr	r2, [r0]
   13c68:	mov	r0, r5
   13c6c:	bl	11ad8 <fprintf@plt>
   13c70:	mov	r0, r4
   13c74:	bl	11a9c <exit@plt>
   13c78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c7c:	add	fp, sp, #24
   13c80:	sub	sp, sp, #8
   13c84:	mov	r4, r0
   13c88:	ldr	r0, [r0]
   13c8c:	cmp	r0, #128	; 0x80
   13c90:	bne	13cc0 <__assert_fail@plt+0x2014>
   13c94:	ldr	r5, [r4, #24]
   13c98:	mov	r0, r5
   13c9c:	bl	11b44 <fgetc@plt>
   13ca0:	mov	r6, r0
   13ca4:	mov	r0, r5
   13ca8:	bl	11b44 <fgetc@plt>
   13cac:	ldr	r1, [r4, #4]
   13cb0:	uxtb	r0, r0
   13cb4:	orr	r0, r0, r6, lsl #8
   13cb8:	sxtah	r6, r1, r0
   13cbc:	b	13cd0 <__assert_fail@plt+0x2024>
   13cc0:	ldr	r1, [r4, #4]
   13cc4:	addlt	r6, r1, r0
   13cc8:	addge	r0, r0, r1
   13ccc:	subge	r6, r0, #256	; 0x100
   13cd0:	cmp	r6, #0
   13cd4:	str	r6, [r4, #4]
   13cd8:	blt	13e34 <__assert_fail@plt+0x2188>
   13cdc:	ldr	r0, [r4, #8]
   13ce0:	cmp	r6, r0
   13ce4:	bgt	13e34 <__assert_fail@plt+0x2188>
   13ce8:	ldr	r3, [r4, #24]
   13cec:	mov	r0, #0
   13cf0:	mov	r1, sp
   13cf4:	mov	r2, #0
   13cf8:	str	r0, [sp, #4]
   13cfc:	str	r0, [sp]
   13d00:	add	r0, sp, #4
   13d04:	bl	11c28 <getdelim@plt>
   13d08:	cmp	r0, #0
   13d0c:	blt	13e28 <__assert_fail@plt+0x217c>
   13d10:	ldr	r1, [sp, #4]
   13d14:	cmp	r1, #0
   13d18:	beq	13e70 <__assert_fail@plt+0x21c4>
   13d1c:	ldr	r2, [r4, #16]
   13d20:	add	r8, r0, #1
   13d24:	mov	r5, r0
   13d28:	ldr	r0, [r4, #12]
   13d2c:	add	r7, r8, r6
   13d30:	cmp	r7, r2
   13d34:	bls	13d54 <__assert_fail@plt+0x20a8>
   13d38:	mov	r1, r7
   13d3c:	bl	1b388 <__assert_fail@plt+0x96dc>
   13d40:	cmp	r0, #0
   13d44:	beq	13e28 <__assert_fail@plt+0x217c>
   13d48:	str	r0, [r4, #12]
   13d4c:	str	r7, [r4, #16]
   13d50:	ldr	r1, [sp, #4]
   13d54:	add	r0, r0, r6
   13d58:	mov	r2, r8
   13d5c:	bl	118ec <memcpy@plt>
   13d60:	ldr	r0, [sp, #4]
   13d64:	bl	1b22c <__assert_fail@plt+0x9580>
   13d68:	cmp	r5, #1
   13d6c:	blt	13e28 <__assert_fail@plt+0x217c>
   13d70:	ldr	r0, [r4, #24]
   13d74:	bl	11c7c <getc@plt>
   13d78:	str	r0, [r4]
   13d7c:	ldr	r0, [r4, #4]
   13d80:	add	r0, r0, r5
   13d84:	subs	r1, r0, #1
   13d88:	str	r1, [r4, #8]
   13d8c:	bgt	13dd0 <__assert_fail@plt+0x2124>
   13d90:	movw	r1, #63149	; 0xf6ad
   13d94:	mov	r0, #0
   13d98:	mov	r2, #5
   13d9c:	movt	r1, #2
   13da0:	bl	11940 <dcgettext@plt>
   13da4:	ldr	r2, [r4, #28]
   13da8:	mov	r5, r0
   13dac:	mov	r0, #0
   13db0:	mov	r1, #8
   13db4:	bl	18e98 <__assert_fail@plt+0x71ec>
   13db8:	mov	r3, r0
   13dbc:	mov	r0, #1
   13dc0:	mov	r1, #0
   13dc4:	mov	r2, r5
   13dc8:	bl	119e8 <error@plt>
   13dcc:	ldr	r1, [r4, #8]
   13dd0:	ldr	r0, [r4, #12]
   13dd4:	add	r2, r0, r1
   13dd8:	ldrb	r3, [r2, #-1]
   13ddc:	cmp	r3, #0
   13de0:	beq	13e90 <__assert_fail@plt+0x21e4>
   13de4:	ldrb	r1, [r0, r1]
   13de8:	cmp	r1, #0
   13dec:	bne	13eb0 <__assert_fail@plt+0x2204>
   13df0:	ldrb	r1, [r2, #1]
   13df4:	cmp	r1, #0
   13df8:	streq	r0, [r4, #20]
   13dfc:	moveq	r0, #1
   13e00:	subeq	sp, fp, #24
   13e04:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e08:	movw	r0, #63273	; 0xf729
   13e0c:	movw	r1, #61397	; 0xefd5
   13e10:	movw	r3, #63203	; 0xf6e3
   13e14:	movw	r2, #570	; 0x23a
   13e18:	movt	r0, #2
   13e1c:	movt	r1, #2
   13e20:	movt	r3, #2
   13e24:	bl	11cac <__assert_fail@plt>
   13e28:	mov	r0, #8
   13e2c:	sub	sp, fp, #24
   13e30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e34:	movw	r1, #63149	; 0xf6ad
   13e38:	mov	r0, #0
   13e3c:	mov	r2, #5
   13e40:	movt	r1, #2
   13e44:	bl	11940 <dcgettext@plt>
   13e48:	ldr	r2, [r4, #28]
   13e4c:	mov	r5, r0
   13e50:	mov	r0, #0
   13e54:	mov	r1, #8
   13e58:	bl	18e98 <__assert_fail@plt+0x71ec>
   13e5c:	mov	r3, r0
   13e60:	mov	r0, #1
   13e64:	mov	r1, #0
   13e68:	mov	r2, r5
   13e6c:	bl	119e8 <error@plt>
   13e70:	movw	r0, #63286	; 0xf736
   13e74:	movw	r1, #61397	; 0xefd5
   13e78:	movw	r3, #63296	; 0xf740
   13e7c:	mov	r2, #245	; 0xf5
   13e80:	movt	r0, #2
   13e84:	movt	r1, #2
   13e88:	movt	r3, #2
   13e8c:	bl	11cac <__assert_fail@plt>
   13e90:	movw	r0, #63190	; 0xf6d6
   13e94:	movw	r1, #61397	; 0xefd5
   13e98:	movw	r3, #63203	; 0xf6e3
   13e9c:	mov	r2, #568	; 0x238
   13ea0:	movt	r0, #2
   13ea4:	movt	r1, #2
   13ea8:	movt	r3, #2
   13eac:	bl	11cac <__assert_fail@plt>
   13eb0:	movw	r0, #63260	; 0xf71c
   13eb4:	movw	r1, #61397	; 0xefd5
   13eb8:	movw	r3, #63203	; 0xf6e3
   13ebc:	movw	r2, #569	; 0x239
   13ec0:	movt	r0, #2
   13ec4:	movt	r1, #2
   13ec8:	movt	r3, #2
   13ecc:	bl	11cac <__assert_fail@plt>
   13ed0:	push	{r4, r5, r6, r7, fp, lr}
   13ed4:	add	fp, sp, #16
   13ed8:	mov	r4, r0
   13edc:	ldr	r0, [r0]
   13ee0:	cmn	r0, #1
   13ee4:	moveq	r0, #8
   13ee8:	popeq	{r4, r5, r6, r7, fp, pc}
   13eec:	cmp	r0, #30
   13ef0:	bne	13f5c <__assert_fail@plt+0x22b0>
   13ef4:	ldr	r5, [r4, #4]
   13ef8:	ldr	r2, [r4, #8]
   13efc:	ldr	r0, [r4, #24]
   13f00:	ldr	r1, [r4, #28]
   13f04:	sub	r3, r5, #14
   13f08:	cmp	r5, #13
   13f0c:	str	r3, [r4, #4]
   13f10:	subgt	r2, r2, r3
   13f14:	add	r3, r4, #32
   13f18:	bl	14798 <__assert_fail@plt+0x2aec>
   13f1c:	rsb	r1, r5, #14
   13f20:	cmp	r0, r1
   13f24:	blt	140c8 <__assert_fail@plt+0x241c>
   13f28:	ldr	r1, [r4, #4]
   13f2c:	add	r6, r1, r0
   13f30:	cmn	r6, #1
   13f34:	str	r6, [r4, #4]
   13f38:	bgt	13f74 <__assert_fail@plt+0x22c8>
   13f3c:	movw	r0, #63489	; 0xf801
   13f40:	movw	r1, #61397	; 0xefd5
   13f44:	movw	r3, #63437	; 0xf7cd
   13f48:	mov	r2, #480	; 0x1e0
   13f4c:	movt	r0, #2
   13f50:	movt	r1, #2
   13f54:	movt	r3, #2
   13f58:	bl	11cac <__assert_fail@plt>
   13f5c:	ldr	r1, [r4, #4]
   13f60:	add	r0, r0, r1
   13f64:	sub	r6, r0, #14
   13f68:	cmp	r6, #0
   13f6c:	str	r6, [r4, #4]
   13f70:	blt	140e8 <__assert_fail@plt+0x243c>
   13f74:	ldr	r0, [r4, #24]
   13f78:	bl	11c7c <getc@plt>
   13f7c:	cmp	r0, #31
   13f80:	str	r0, [r4]
   13f84:	blt	14070 <__assert_fail@plt+0x23c4>
   13f88:	add	r5, r4, #16
   13f8c:	cmp	r0, #127	; 0x7f
   13f90:	bgt	13fd4 <__assert_fail@plt+0x2328>
   13f94:	cmn	r6, #1
   13f98:	beq	140c0 <__assert_fail@plt+0x2414>
   13f9c:	ldr	r1, [r5]
   13fa0:	add	r7, r6, #1
   13fa4:	cmp	r1, r7
   13fa8:	bcs	14010 <__assert_fail@plt+0x2364>
   13fac:	str	r7, [r4, #16]
   13fb0:	mov	r1, r5
   13fb4:	mov	r2, #1
   13fb8:	ldr	r0, [r4, #12]
   13fbc:	bl	19e4c <__assert_fail@plt+0x81a0>
   13fc0:	str	r0, [r4, #12]
   13fc4:	mov	r1, r0
   13fc8:	ldr	r0, [r4]
   13fcc:	add	r1, r1, r6
   13fd0:	b	1404c <__assert_fail@plt+0x23a0>
   13fd4:	cmn	r6, #2
   13fd8:	bcs	140c0 <__assert_fail@plt+0x2414>
   13fdc:	ldr	r1, [r5]
   13fe0:	add	r7, r6, #2
   13fe4:	cmp	r1, r7
   13fe8:	bcs	1401c <__assert_fail@plt+0x2370>
   13fec:	str	r7, [r4, #16]
   13ff0:	mov	r1, r5
   13ff4:	mov	r2, #1
   13ff8:	ldr	r0, [r4, #12]
   13ffc:	bl	19e4c <__assert_fail@plt+0x81a0>
   14000:	str	r0, [r4, #12]
   14004:	mov	r1, r0
   14008:	ldr	r0, [r4]
   1400c:	b	14020 <__assert_fail@plt+0x2374>
   14010:	ldr	r1, [r4, #12]
   14014:	add	r1, r1, r6
   14018:	b	1404c <__assert_fail@plt+0x23a0>
   1401c:	ldr	r1, [r4, #12]
   14020:	and	r0, r0, #127	; 0x7f
   14024:	str	r0, [r4]
   14028:	add	r0, r4, r0
   1402c:	ldrb	r0, [r0, #36]	; 0x24
   14030:	strb	r0, [r1, r6]
   14034:	ldr	r0, [r4]
   14038:	ldr	r1, [r4, #12]
   1403c:	add	r0, r4, r0
   14040:	add	r1, r1, r6
   14044:	ldrb	r0, [r0, #164]	; 0xa4
   14048:	add	r1, r1, #1
   1404c:	strb	r0, [r1]
   14050:	mov	r6, r7
   14054:	ldr	r0, [r4, #24]
   14058:	bl	11c7c <getc@plt>
   1405c:	cmp	r0, #30
   14060:	str	r0, [r4]
   14064:	bgt	13f8c <__assert_fail@plt+0x22e0>
   14068:	cmn	r6, #1
   1406c:	beq	140c0 <__assert_fail@plt+0x2414>
   14070:	mov	r1, r4
   14074:	add	r2, r6, #1
   14078:	mov	r5, r4
   1407c:	ldr	r0, [r1, #16]!
   14080:	cmp	r0, r2
   14084:	bcs	140a0 <__assert_fail@plt+0x23f4>
   14088:	ldr	r0, [r5, #12]!
   1408c:	str	r2, [r5, #4]
   14090:	mov	r2, #1
   14094:	bl	19e4c <__assert_fail@plt+0x81a0>
   14098:	str	r0, [r5]
   1409c:	b	140a4 <__assert_fail@plt+0x23f8>
   140a0:	ldr	r0, [r5, #12]!
   140a4:	mov	r1, #0
   140a8:	strb	r1, [r0, r6]
   140ac:	str	r6, [r4, #8]
   140b0:	ldr	r0, [r5]
   140b4:	str	r0, [r4, #20]
   140b8:	mov	r0, #1
   140bc:	pop	{r4, r5, r6, r7, fp, pc}
   140c0:	mov	r0, r4
   140c4:	bl	14764 <__assert_fail@plt+0x2ab8>
   140c8:	movw	r0, #63422	; 0xf7be
   140cc:	movw	r1, #61397	; 0xefd5
   140d0:	movw	r3, #63437	; 0xf7cd
   140d4:	movw	r2, #478	; 0x1de
   140d8:	movt	r0, #2
   140dc:	movt	r1, #2
   140e0:	movt	r3, #2
   140e4:	bl	11cac <__assert_fail@plt>
   140e8:	movw	r0, #63489	; 0xf801
   140ec:	movw	r1, #61397	; 0xefd5
   140f0:	movw	r3, #63437	; 0xf7cd
   140f4:	movw	r2, #485	; 0x1e5
   140f8:	movt	r0, #2
   140fc:	movt	r1, #2
   14100:	movt	r3, #2
   14104:	bl	11cac <__assert_fail@plt>
   14108:	push	{r4, sl, fp, lr}
   1410c:	add	fp, sp, #8
   14110:	mov	r4, r0
   14114:	ldr	r0, [r0, #12]
   14118:	bl	15098 <__assert_fail@plt+0x33ec>
   1411c:	str	r0, [r4, #20]
   14120:	mov	r0, #1
   14124:	pop	{r4, sl, fp, pc}
   14128:	push	{r4, r5, fp, lr}
   1412c:	add	fp, sp, #8
   14130:	sub	sp, sp, #8
   14134:	ldr	r5, [r0, #20]
   14138:	mov	r4, r1
   1413c:	mov	r0, r5
   14140:	bl	11ac0 <strlen@plt>
   14144:	mov	r2, r0
   14148:	mov	r0, #0
   1414c:	mov	r1, r5
   14150:	mov	r3, #0
   14154:	str	r0, [sp, #4]
   14158:	mov	r0, r4
   1415c:	str	r2, [sp]
   14160:	bl	202f8 <__assert_fail@plt+0xe64c>
   14164:	mov	r1, #2
   14168:	cmp	r0, #0
   1416c:	movwlt	r1, #4
   14170:	mov	r0, r1
   14174:	sub	sp, fp, #8
   14178:	pop	{r4, r5, fp, pc}
   1417c:	push	{fp, lr}
   14180:	mov	fp, sp
   14184:	mov	r2, r1
   14188:	ldr	r1, [r0, #20]
   1418c:	mov	r0, r2
   14190:	mov	r2, #16
   14194:	bl	119f4 <fnmatch@plt>
   14198:	mov	r1, #4
   1419c:	cmp	r0, #0
   141a0:	movweq	r1, #2
   141a4:	mov	r0, r1
   141a8:	pop	{fp, pc}
   141ac:	push	{fp, lr}
   141b0:	mov	fp, sp
   141b4:	mov	r2, r1
   141b8:	ldr	r1, [r0, #20]
   141bc:	mov	r0, r2
   141c0:	mov	r2, #0
   141c4:	bl	119f4 <fnmatch@plt>
   141c8:	mov	r1, #4
   141cc:	cmp	r0, #0
   141d0:	movweq	r1, #2
   141d4:	mov	r0, r1
   141d8:	pop	{fp, pc}
   141dc:	push	{r4, r5, fp, lr}
   141e0:	add	fp, sp, #8
   141e4:	mov	r4, r1
   141e8:	mov	r5, r0
   141ec:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   141f0:	cmp	r0, #1
   141f4:	bne	14218 <__assert_fail@plt+0x256c>
   141f8:	ldr	r0, [r5, #20]
   141fc:	mov	r1, r4
   14200:	bl	2c868 <__assert_fail@plt+0x1abbc>
   14204:	mov	r1, #2
   14208:	cmp	r0, #0
   1420c:	movweq	r1, #4
   14210:	mov	r0, r1
   14214:	pop	{r4, r5, fp, pc}
   14218:	movw	r0, #63516	; 0xf81c
   1421c:	movw	r1, #61397	; 0xefd5
   14220:	movw	r3, #63532	; 0xf82c
   14224:	movw	r2, #714	; 0x2ca
   14228:	movt	r0, #2
   1422c:	movt	r1, #2
   14230:	movt	r3, #2
   14234:	bl	11cac <__assert_fail@plt>
   14238:	push	{r4, r5, fp, lr}
   1423c:	add	fp, sp, #8
   14240:	mov	r4, r1
   14244:	mov	r5, r0
   14248:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   1424c:	cmp	r0, #1
   14250:	bne	14274 <__assert_fail@plt+0x25c8>
   14254:	ldr	r0, [r5, #20]
   14258:	mov	r1, r4
   1425c:	bl	2d5fc <__assert_fail@plt+0x1b950>
   14260:	mov	r1, #2
   14264:	cmp	r0, #0
   14268:	movweq	r1, #4
   1426c:	mov	r0, r1
   14270:	pop	{r4, r5, fp, pc}
   14274:	movw	r0, #63516	; 0xf81c
   14278:	movw	r1, #61397	; 0xefd5
   1427c:	movw	r3, #63605	; 0xf875
   14280:	movw	r2, #690	; 0x2b2
   14284:	movt	r0, #2
   14288:	movt	r1, #2
   1428c:	movt	r3, #2
   14290:	bl	11cac <__assert_fail@plt>
   14294:	push	{fp, lr}
   14298:	mov	fp, sp
   1429c:	ldr	r0, [r0, #20]
   142a0:	bl	15da8 <__assert_fail@plt+0x40fc>
   142a4:	mov	r1, #2
   142a8:	cmp	r0, #0
   142ac:	movweq	r1, #4
   142b0:	mov	r0, r1
   142b4:	pop	{fp, pc}
   142b8:	push	{fp, lr}
   142bc:	mov	fp, sp
   142c0:	ldr	r0, [r0, #20]
   142c4:	bl	16b80 <__assert_fail@plt+0x4ed4>
   142c8:	mov	r1, #2
   142cc:	cmp	r0, #0
   142d0:	movweq	r1, #4
   142d4:	mov	r0, r1
   142d8:	pop	{fp, pc}
   142dc:	push	{fp, lr}
   142e0:	mov	fp, sp
   142e4:	sub	sp, sp, #104	; 0x68
   142e8:	ldr	r1, [r0, #12]
   142ec:	mov	r2, sp
   142f0:	mov	r0, #3
   142f4:	bl	11c34 <__xstat64@plt>
   142f8:	mov	r1, #4
   142fc:	cmp	r0, #0
   14300:	movweq	r1, #1
   14304:	mov	r0, r1
   14308:	mov	sp, fp
   1430c:	pop	{fp, pc}
   14310:	push	{fp, lr}
   14314:	mov	fp, sp
   14318:	sub	sp, sp, #104	; 0x68
   1431c:	ldr	r1, [r0, #12]
   14320:	mov	r2, sp
   14324:	mov	r0, #3
   14328:	bl	11c94 <__lxstat64@plt>
   1432c:	mov	r1, #4
   14330:	cmp	r0, #0
   14334:	movweq	r1, #1
   14338:	mov	r0, r1
   1433c:	mov	sp, fp
   14340:	pop	{fp, pc}
   14344:	push	{fp, lr}
   14348:	mov	fp, sp
   1434c:	sub	sp, sp, #104	; 0x68
   14350:	ldr	r1, [r0, #12]
   14354:	mov	r2, sp
   14358:	mov	r0, #3
   1435c:	bl	11c34 <__xstat64@plt>
   14360:	mov	r1, #1
   14364:	cmp	r0, #0
   14368:	movweq	r1, #4
   1436c:	mov	r0, r1
   14370:	mov	sp, fp
   14374:	pop	{fp, pc}
   14378:	push	{fp, lr}
   1437c:	mov	fp, sp
   14380:	sub	sp, sp, #104	; 0x68
   14384:	ldr	r1, [r0, #12]
   14388:	mov	r2, sp
   1438c:	mov	r0, #3
   14390:	bl	11c94 <__lxstat64@plt>
   14394:	mov	r1, #1
   14398:	cmp	r0, #0
   1439c:	movweq	r1, #4
   143a0:	mov	r0, r1
   143a4:	mov	sp, fp
   143a8:	pop	{fp, pc}
   143ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143b0:	add	fp, sp, #28
   143b4:	sub	sp, sp, #4
   143b8:	ldr	r5, [r0, #12]
   143bc:	mov	r8, r1
   143c0:	mov	r0, r5
   143c4:	bl	11ac0 <strlen@plt>
   143c8:	vldr	s1, [pc, #224]	; 144b0 <__assert_fail@plt+0x2804>
   143cc:	add	r1, r8, #8
   143d0:	vld1.64	{d16-d17}, [r1]
   143d4:	vldr	s0, [pc, #216]	; 144b4 <__assert_fail@plt+0x2808>
   143d8:	vmov	s2, r0
   143dc:	vmov.f32	s3, s1
   143e0:	vadd.i64	q8, q0, q8
   143e4:	vst1.64	{d16-d17}, [r1]
   143e8:	ldrb	r1, [r5]
   143ec:	cmp	r1, #0
   143f0:	beq	144a4 <__assert_fail@plt+0x27f8>
   143f4:	add	r5, r5, #1
   143f8:	mov	r4, #0
   143fc:	mov	r9, #1
   14400:	mov	r6, #0
   14404:	mov	sl, #0
   14408:	sxtb	r0, r1
   1440c:	uxtb	r7, r1
   14410:	mov	r2, #1
   14414:	cmp	r0, #0
   14418:	mov	r0, #1
   1441c:	movwlt	sl, #1
   14420:	cmp	r7, #10
   14424:	beq	14448 <__assert_fail@plt+0x279c>
   14428:	bl	11a90 <__ctype_b_loc@plt>
   1442c:	ldr	r0, [r0]
   14430:	add	r0, r0, r7, lsl #1
   14434:	ldrb	r0, [r0, #1]
   14438:	tst	r0, #32
   1443c:	mov	r0, r4
   14440:	movne	r6, r9
   14444:	mov	r2, r6
   14448:	ldrb	r1, [r5], #1
   1444c:	mov	r4, r0
   14450:	mov	r6, r2
   14454:	cmp	r1, #0
   14458:	bne	14408 <__assert_fail@plt+0x275c>
   1445c:	cmp	sl, #0
   14460:	beq	14474 <__assert_fail@plt+0x27c8>
   14464:	ldrd	r4, [r8, #40]	; 0x28
   14468:	adds	r4, r4, #1
   1446c:	adc	r5, r5, #0
   14470:	strd	r4, [r8, #40]	; 0x28
   14474:	cmp	r2, #0
   14478:	beq	1448c <__assert_fail@plt+0x27e0>
   1447c:	ldrd	r2, [r8, #24]
   14480:	adds	r2, r2, #1
   14484:	adc	r3, r3, #0
   14488:	strd	r2, [r8, #24]
   1448c:	cmp	r0, #0
   14490:	beq	144a4 <__assert_fail@plt+0x27f8>
   14494:	ldrd	r0, [r8, #32]
   14498:	adds	r0, r0, #1
   1449c:	adc	r1, r1, #0
   144a0:	strd	r0, [r8, #32]
   144a4:	mov	r0, #1
   144a8:	sub	sp, fp, #28
   144ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b0:	andeq	r0, r0, r0
   144b4:	andeq	r0, r0, r1
   144b8:	push	{r4, sl, fp, lr}
   144bc:	add	fp, sp, #8
   144c0:	sub	sp, sp, #8
   144c4:	movw	r1, #4677	; 0x1245
   144c8:	movw	r4, #4628	; 0x1214
   144cc:	ldr	r0, [r0, #12]
   144d0:	movw	r3, #2212	; 0x8a4
   144d4:	movt	r1, #4
   144d8:	movt	r4, #4
   144dc:	movt	r3, #3
   144e0:	ldrb	r2, [r1]
   144e4:	movw	r1, #4644	; 0x1224
   144e8:	ldr	ip, [r4]
   144ec:	movt	r1, #4
   144f0:	ldr	r1, [r1]
   144f4:	str	r0, [sp]
   144f8:	mov	r0, ip
   144fc:	bl	14998 <__assert_fail@plt+0x2cec>
   14500:	movw	r0, #4672	; 0x1240
   14504:	movt	r0, #4
   14508:	ldrb	r1, [r0]
   1450c:	mov	r0, #10
   14510:	cmp	r1, #0
   14514:	ldr	r1, [r4]
   14518:	movwne	r0, #0
   1451c:	bl	11c04 <putc@plt>
   14520:	mov	r0, #1
   14524:	sub	sp, fp, #8
   14528:	pop	{r4, sl, fp, pc}
   1452c:	push	{r4, sl, fp, lr}
   14530:	add	fp, sp, #8
   14534:	movw	r4, #4628	; 0x1214
   14538:	ldr	r0, [r0, #12]
   1453c:	movt	r4, #4
   14540:	ldr	r1, [r4]
   14544:	bl	11c58 <fputs@plt>
   14548:	movw	r0, #4672	; 0x1240
   1454c:	movt	r0, #4
   14550:	ldrb	r1, [r0]
   14554:	mov	r0, #10
   14558:	cmp	r1, #0
   1455c:	ldr	r1, [r4]
   14560:	movwne	r0, #0
   14564:	bl	11c04 <putc@plt>
   14568:	mov	r0, #1
   1456c:	pop	{r4, sl, fp, pc}
   14570:	push	{r4, r5, fp, lr}
   14574:	add	fp, sp, #8
   14578:	ldr	r0, [r1, #8]
   1457c:	ldr	r2, [r1, #12]
   14580:	ldr	ip, [r1]
   14584:	ldr	r3, [r1, #4]
   14588:	adds	r4, r0, #1
   1458c:	mov	r0, #8
   14590:	adc	r5, r2, #0
   14594:	strd	r4, [r1, #8]
   14598:	subs	r1, r4, ip
   1459c:	sbcs	r1, r5, r3
   145a0:	movwcc	r0, #1
   145a4:	pop	{r4, r5, fp, pc}
   145a8:	ldr	r0, [r1, #8]
   145ac:	ldr	r3, [r1, #12]
   145b0:	adds	r0, r0, #1
   145b4:	str	r0, [r1, #8]
   145b8:	adc	r3, r3, #0
   145bc:	mov	r0, #1
   145c0:	str	r3, [r1, #12]
   145c4:	bx	lr
   145c8:	push	{r4, r5, r6, r7, fp, lr}
   145cc:	add	fp, sp, #16
   145d0:	movw	r6, #4736	; 0x1280
   145d4:	mov	r4, r0
   145d8:	movw	r0, #4728	; 0x1278
   145dc:	movt	r6, #4
   145e0:	movt	r0, #4
   145e4:	ldr	r7, [r6]
   145e8:	ldr	r5, [r0]
   145ec:	cmp	r5, r7
   145f0:	beq	14634 <__assert_fail@plt+0x2988>
   145f4:	ldr	r2, [r5]
   145f8:	ldr	r1, [r5, #4]
   145fc:	mov	r0, r4
   14600:	blx	r2
   14604:	ldr	r5, [r5, #8]
   14608:	mov	r1, r0
   1460c:	cmp	r5, r7
   14610:	andsne	r0, r1, #3
   14614:	bne	145f4 <__assert_fail@plt+0x2948>
   14618:	mov	r0, #4
   1461c:	cmp	r1, #1
   14620:	beq	14664 <__assert_fail@plt+0x29b8>
   14624:	tst	r1, #12
   14628:	mov	r0, r1
   1462c:	popne	{r4, r5, r6, r7, fp, pc}
   14630:	ldr	r5, [r6]
   14634:	cmp	r5, #0
   14638:	beq	14668 <__assert_fail@plt+0x29bc>
   1463c:	ldr	r2, [r5]
   14640:	ldr	r1, [r5, #4]
   14644:	mov	r0, r4
   14648:	blx	r2
   1464c:	ldr	r5, [r5, #8]
   14650:	cmp	r5, #0
   14654:	andsne	r1, r0, #1
   14658:	bne	1463c <__assert_fail@plt+0x2990>
   1465c:	cmp	r0, #1
   14660:	moveq	r0, #2
   14664:	pop	{r4, r5, r6, r7, fp, pc}
   14668:	mov	r0, #2
   1466c:	pop	{r4, r5, r6, r7, fp, pc}
   14670:	push	{r4, r5, r6, r7, fp, lr}
   14674:	add	fp, sp, #16
   14678:	movw	r5, #4736	; 0x1280
   1467c:	mov	r4, r0
   14680:	movw	r0, #4728	; 0x1278
   14684:	movt	r5, #4
   14688:	movt	r0, #4
   1468c:	ldr	r6, [r5]
   14690:	ldr	r7, [r0]
   14694:	cmp	r7, r6
   14698:	moveq	r0, #5
   1469c:	popeq	{r4, r5, r6, r7, fp, pc}
   146a0:	ldr	r2, [r7]
   146a4:	ldr	r1, [r7, #4]
   146a8:	mov	r0, r4
   146ac:	blx	r2
   146b0:	ldr	r7, [r7, #8]
   146b4:	mov	r1, r0
   146b8:	cmp	r7, r6
   146bc:	andsne	r0, r1, #5
   146c0:	bne	146a0 <__assert_fail@plt+0x29f4>
   146c4:	mov	r0, #4
   146c8:	cmp	r1, #1
   146cc:	beq	14710 <__assert_fail@plt+0x2a64>
   146d0:	tst	r1, #12
   146d4:	mov	r0, r1
   146d8:	popne	{r4, r5, r6, r7, fp, pc}
   146dc:	ldr	r5, [r5]
   146e0:	cmp	r5, #0
   146e4:	beq	14714 <__assert_fail@plt+0x2a68>
   146e8:	ldr	r2, [r5]
   146ec:	ldr	r1, [r5, #4]
   146f0:	mov	r0, r4
   146f4:	blx	r2
   146f8:	ldr	r5, [r5, #8]
   146fc:	cmp	r5, #0
   14700:	andsne	r1, r0, #1
   14704:	bne	146e8 <__assert_fail@plt+0x2a3c>
   14708:	cmp	r0, #1
   1470c:	moveq	r0, #2
   14710:	pop	{r4, r5, r6, r7, fp, pc}
   14714:	mov	r0, #2
   14718:	pop	{r4, r5, r6, r7, fp, pc}
   1471c:	push	{r4, r5, fp, lr}
   14720:	add	fp, sp, #8
   14724:	mov	r4, r0
   14728:	movw	r0, #4728	; 0x1278
   1472c:	movt	r0, #4
   14730:	ldr	r5, [r0]
   14734:	cmp	r5, #0
   14738:	moveq	r0, #3
   1473c:	popeq	{r4, r5, fp, pc}
   14740:	ldr	r2, [r5]
   14744:	ldr	r1, [r5, #4]
   14748:	mov	r0, r4
   1474c:	blx	r2
   14750:	ldr	r5, [r5, #8]
   14754:	cmp	r5, #0
   14758:	andsne	r1, r0, #3
   1475c:	bne	14740 <__assert_fail@plt+0x2a94>
   14760:	pop	{r4, r5, fp, pc}
   14764:	push	{fp, lr}
   14768:	mov	fp, sp
   1476c:	movw	r1, #63353	; 0xf779
   14770:	mov	r4, r0
   14774:	mov	r0, #0
   14778:	mov	r2, #5
   1477c:	movt	r1, #2
   14780:	bl	11940 <dcgettext@plt>
   14784:	ldr	r3, [r4, #28]
   14788:	mov	r2, r0
   1478c:	mov	r0, #1
   14790:	mov	r1, #0
   14794:	bl	119e8 <error@plt>
   14798:	push	{r4, r5, r6, r7, fp, lr}
   1479c:	add	fp, sp, #16
   147a0:	sub	sp, sp, #8
   147a4:	mov	r4, r3
   147a8:	mov	r6, r2
   147ac:	mov	r5, r1
   147b0:	mov	r7, r0
   147b4:	bl	11bec <clearerr@plt>
   147b8:	add	r0, sp, #4
   147bc:	mov	r1, #4
   147c0:	mov	r2, #1
   147c4:	mov	r3, r7
   147c8:	bl	119c4 <fread@plt>
   147cc:	cmp	r0, #1
   147d0:	bne	1486c <__assert_fail@plt+0x2bc0>
   147d4:	ldr	r1, [r4]
   147d8:	ldr	r0, [sp, #4]
   147dc:	rev	r7, r0
   147e0:	cmp	r1, #2
   147e4:	beq	14844 <__assert_fail@plt+0x2b98>
   147e8:	cmp	r1, #0
   147ec:	bne	14848 <__assert_fail@plt+0x2b9c>
   147f0:	cmp	r0, r6
   147f4:	ble	14850 <__assert_fail@plt+0x2ba4>
   147f8:	cmp	r7, r6
   147fc:	bgt	14848 <__assert_fail@plt+0x2b9c>
   14800:	movw	r1, #64789	; 0xfd15
   14804:	mov	r0, #0
   14808:	mov	r2, #5
   1480c:	movt	r1, #2
   14810:	bl	11940 <dcgettext@plt>
   14814:	mov	r6, r0
   14818:	mov	r0, #0
   1481c:	mov	r1, #8
   14820:	mov	r2, r5
   14824:	bl	18e98 <__assert_fail@plt+0x71ec>
   14828:	mov	r3, r0
   1482c:	mov	r0, #0
   14830:	mov	r1, #0
   14834:	mov	r2, r6
   14838:	bl	119e8 <error@plt>
   1483c:	mov	r0, #2
   14840:	str	r0, [r4]
   14844:	mov	r0, r7
   14848:	sub	sp, fp, #16
   1484c:	pop	{r4, r5, r6, r7, fp, pc}
   14850:	cmp	r7, r6
   14854:	movgt	r1, #1
   14858:	strgt	r1, [r4]
   1485c:	subgt	sp, fp, #16
   14860:	popgt	{r4, r5, r6, r7, fp, pc}
   14864:	sub	sp, fp, #16
   14868:	pop	{r4, r5, r6, r7, fp, pc}
   1486c:	mov	r0, #0
   14870:	mov	r1, #8
   14874:	mov	r2, r5
   14878:	bl	18e98 <__assert_fail@plt+0x71ec>
   1487c:	mov	r4, r0
   14880:	mov	r0, r7
   14884:	bl	11aa8 <feof@plt>
   14888:	cmp	r0, #0
   1488c:	bne	148c0 <__assert_fail@plt+0x2c14>
   14890:	bl	11af0 <__errno_location@plt>
   14894:	ldr	r5, [r0]
   14898:	movw	r1, #64760	; 0xfcf8
   1489c:	mov	r0, #0
   148a0:	mov	r2, #5
   148a4:	movt	r1, #2
   148a8:	bl	11940 <dcgettext@plt>
   148ac:	mov	r2, r0
   148b0:	mov	r0, #1
   148b4:	mov	r1, r5
   148b8:	mov	r3, r4
   148bc:	bl	119e8 <error@plt>
   148c0:	movw	r1, #64739	; 0xfce3
   148c4:	mov	r0, #0
   148c8:	mov	r2, #5
   148cc:	movt	r1, #2
   148d0:	bl	11940 <dcgettext@plt>
   148d4:	mov	r2, r0
   148d8:	mov	r0, #1
   148dc:	mov	r1, #0
   148e0:	mov	r3, r4
   148e4:	bl	119e8 <error@plt>
   148e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   148ec:	add	fp, sp, #24
   148f0:	sub	sp, sp, #16
   148f4:	mov	r8, r0
   148f8:	movw	r0, #4624	; 0x1210
   148fc:	movt	r0, #4
   14900:	ldr	r0, [r0]
   14904:	bl	1b1d0 <__assert_fail@plt+0x9524>
   14908:	movw	r0, #4628	; 0x1214
   1490c:	movw	r1, #64883	; 0xfd73
   14910:	mov	r2, #5
   14914:	mov	r9, #0
   14918:	movt	r0, #4
   1491c:	movt	r1, #2
   14920:	ldr	r6, [r0]
   14924:	movw	r0, #4524	; 0x11ac
   14928:	movt	r0, #4
   1492c:	ldr	r5, [r0]
   14930:	mov	r0, #0
   14934:	bl	11940 <dcgettext@plt>
   14938:	movw	r1, #64898	; 0xfd82
   1493c:	mov	r7, r0
   14940:	mov	r0, #0
   14944:	mov	r2, #5
   14948:	movt	r1, #2
   1494c:	bl	11940 <dcgettext@plt>
   14950:	movw	r1, #64913	; 0xfd91
   14954:	mov	r4, r0
   14958:	mov	r0, #0
   1495c:	mov	r2, #5
   14960:	movt	r1, #2
   14964:	bl	11940 <dcgettext@plt>
   14968:	movw	r2, #64869	; 0xfd65
   1496c:	str	r0, [sp, #8]
   14970:	mov	r0, r6
   14974:	mov	r1, r8
   14978:	mov	r3, r5
   1497c:	str	r7, [sp]
   14980:	str	r4, [sp, #4]
   14984:	str	r9, [sp, #12]
   14988:	movt	r2, #2
   1498c:	bl	19a88 <__assert_fail@plt+0x7ddc>
   14990:	sub	sp, fp, #24
   14994:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1499c:	add	fp, sp, #28
   149a0:	sub	sp, sp, #12
   149a4:	sub	sp, sp, #8192	; 0x2000
   149a8:	ldr	r7, [fp, #8]
   149ac:	mov	r9, r3
   149b0:	mov	sl, r0
   149b4:	cmp	r2, #0
   149b8:	beq	14a58 <__assert_fail@plt+0x2dac>
   149bc:	add	r4, sp, #8
   149c0:	mov	r8, r1
   149c4:	str	r1, [sp]
   149c8:	mov	r1, #8192	; 0x2000
   149cc:	mov	r2, r7
   149d0:	mvn	r3, #0
   149d4:	mov	r0, r4
   149d8:	bl	179f8 <__assert_fail@plt+0x5d4c>
   149dc:	mov	r5, r0
   149e0:	cmp	r0, #8192	; 0x2000
   149e4:	mov	r6, r4
   149e8:	bcc	14a14 <__assert_fail@plt+0x2d68>
   149ec:	add	r4, r5, #1
   149f0:	mov	r0, r4
   149f4:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   149f8:	mov	r1, r4
   149fc:	mov	r2, r7
   14a00:	mvn	r3, #0
   14a04:	mov	r6, r0
   14a08:	str	r8, [sp]
   14a0c:	add	r4, sp, #8
   14a10:	bl	179f8 <__assert_fail@plt+0x5d4c>
   14a14:	mov	r0, r6
   14a18:	mov	r1, r5
   14a1c:	bl	14a70 <__assert_fail@plt+0x2dc4>
   14a20:	mov	r1, #0
   14a24:	mov	r2, r6
   14a28:	strb	r1, [r6, r0]
   14a2c:	mov	r0, sl
   14a30:	mov	r1, r9
   14a34:	bl	11ad8 <fprintf@plt>
   14a38:	mov	r5, r0
   14a3c:	cmp	r6, r4
   14a40:	beq	14a4c <__assert_fail@plt+0x2da0>
   14a44:	mov	r0, r6
   14a48:	bl	1b22c <__assert_fail@plt+0x9580>
   14a4c:	mov	r0, r5
   14a50:	sub	sp, fp, #28
   14a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a58:	mov	r0, sl
   14a5c:	mov	r1, r9
   14a60:	mov	r2, r7
   14a64:	sub	sp, fp, #28
   14a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a6c:	b	11ad8 <fprintf@plt>
   14a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a74:	add	fp, sp, #28
   14a78:	sub	sp, sp, #20
   14a7c:	mov	r5, r1
   14a80:	mov	r4, r0
   14a84:	add	sl, r0, r1
   14a88:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   14a8c:	cmp	r0, #2
   14a90:	bcs	14acc <__assert_fail@plt+0x2e20>
   14a94:	cmp	r5, #1
   14a98:	blt	14db0 <__assert_fail@plt+0x3104>
   14a9c:	bl	11a90 <__ctype_b_loc@plt>
   14aa0:	mov	r1, #63	; 0x3f
   14aa4:	ldrb	r2, [r4]
   14aa8:	ldr	r3, [r0]
   14aac:	add	r2, r3, r2, lsl #1
   14ab0:	ldrb	r2, [r2, #1]
   14ab4:	tst	r2, #64	; 0x40
   14ab8:	strbeq	r1, [r4]
   14abc:	add	r4, r4, #1
   14ac0:	cmp	r4, sl
   14ac4:	bcc	14aa4 <__assert_fail@plt+0x2df8>
   14ac8:	b	14db0 <__assert_fail@plt+0x3104>
   14acc:	cmp	r5, #1
   14ad0:	mov	r9, r4
   14ad4:	blt	14dac <__assert_fail@plt+0x3100>
   14ad8:	mov	r3, #0
   14adc:	add	r6, sp, #4
   14ae0:	add	r5, sp, #8
   14ae4:	mov	r9, r4
   14ae8:	mov	r7, r4
   14aec:	ldrb	r0, [r7]
   14af0:	sub	r1, r0, #32
   14af4:	cmp	r1, #94	; 0x5e
   14af8:	bhi	14c94 <__assert_fail@plt+0x2fe8>
   14afc:	add	r2, pc, #0
   14b00:	ldr	pc, [r2, r1, lsl #2]
   14b04:	andeq	r4, r1, r0, lsl #25
   14b08:	andeq	r4, r1, r0, lsl #25
   14b0c:	andeq	r4, r1, r0, lsl #25
   14b10:	andeq	r4, r1, r0, lsl #25
   14b14:	muleq	r1, r4, ip
   14b18:	andeq	r4, r1, r0, lsl #25
   14b1c:	andeq	r4, r1, r0, lsl #25
   14b20:	andeq	r4, r1, r0, lsl #25
   14b24:	andeq	r4, r1, r0, lsl #25
   14b28:	andeq	r4, r1, r0, lsl #25
   14b2c:	andeq	r4, r1, r0, lsl #25
   14b30:	andeq	r4, r1, r0, lsl #25
   14b34:	andeq	r4, r1, r0, lsl #25
   14b38:	andeq	r4, r1, r0, lsl #25
   14b3c:	andeq	r4, r1, r0, lsl #25
   14b40:	andeq	r4, r1, r0, lsl #25
   14b44:	andeq	r4, r1, r0, lsl #25
   14b48:	andeq	r4, r1, r0, lsl #25
   14b4c:	andeq	r4, r1, r0, lsl #25
   14b50:	andeq	r4, r1, r0, lsl #25
   14b54:	andeq	r4, r1, r0, lsl #25
   14b58:	andeq	r4, r1, r0, lsl #25
   14b5c:	andeq	r4, r1, r0, lsl #25
   14b60:	andeq	r4, r1, r0, lsl #25
   14b64:	andeq	r4, r1, r0, lsl #25
   14b68:	andeq	r4, r1, r0, lsl #25
   14b6c:	andeq	r4, r1, r0, lsl #25
   14b70:	andeq	r4, r1, r0, lsl #25
   14b74:	andeq	r4, r1, r0, lsl #25
   14b78:	andeq	r4, r1, r0, lsl #25
   14b7c:	andeq	r4, r1, r0, lsl #25
   14b80:	andeq	r4, r1, r0, lsl #25
   14b84:	muleq	r1, r4, ip
   14b88:	andeq	r4, r1, r0, lsl #25
   14b8c:	andeq	r4, r1, r0, lsl #25
   14b90:	andeq	r4, r1, r0, lsl #25
   14b94:	andeq	r4, r1, r0, lsl #25
   14b98:	andeq	r4, r1, r0, lsl #25
   14b9c:	andeq	r4, r1, r0, lsl #25
   14ba0:	andeq	r4, r1, r0, lsl #25
   14ba4:	andeq	r4, r1, r0, lsl #25
   14ba8:	andeq	r4, r1, r0, lsl #25
   14bac:	andeq	r4, r1, r0, lsl #25
   14bb0:	andeq	r4, r1, r0, lsl #25
   14bb4:	andeq	r4, r1, r0, lsl #25
   14bb8:	andeq	r4, r1, r0, lsl #25
   14bbc:	andeq	r4, r1, r0, lsl #25
   14bc0:	andeq	r4, r1, r0, lsl #25
   14bc4:	andeq	r4, r1, r0, lsl #25
   14bc8:	andeq	r4, r1, r0, lsl #25
   14bcc:	andeq	r4, r1, r0, lsl #25
   14bd0:	andeq	r4, r1, r0, lsl #25
   14bd4:	andeq	r4, r1, r0, lsl #25
   14bd8:	andeq	r4, r1, r0, lsl #25
   14bdc:	andeq	r4, r1, r0, lsl #25
   14be0:	andeq	r4, r1, r0, lsl #25
   14be4:	andeq	r4, r1, r0, lsl #25
   14be8:	andeq	r4, r1, r0, lsl #25
   14bec:	andeq	r4, r1, r0, lsl #25
   14bf0:	andeq	r4, r1, r0, lsl #25
   14bf4:	andeq	r4, r1, r0, lsl #25
   14bf8:	andeq	r4, r1, r0, lsl #25
   14bfc:	andeq	r4, r1, r0, lsl #25
   14c00:	andeq	r4, r1, r0, lsl #25
   14c04:	muleq	r1, r4, ip
   14c08:	andeq	r4, r1, r0, lsl #25
   14c0c:	andeq	r4, r1, r0, lsl #25
   14c10:	andeq	r4, r1, r0, lsl #25
   14c14:	andeq	r4, r1, r0, lsl #25
   14c18:	andeq	r4, r1, r0, lsl #25
   14c1c:	andeq	r4, r1, r0, lsl #25
   14c20:	andeq	r4, r1, r0, lsl #25
   14c24:	andeq	r4, r1, r0, lsl #25
   14c28:	andeq	r4, r1, r0, lsl #25
   14c2c:	andeq	r4, r1, r0, lsl #25
   14c30:	andeq	r4, r1, r0, lsl #25
   14c34:	andeq	r4, r1, r0, lsl #25
   14c38:	andeq	r4, r1, r0, lsl #25
   14c3c:	andeq	r4, r1, r0, lsl #25
   14c40:	andeq	r4, r1, r0, lsl #25
   14c44:	andeq	r4, r1, r0, lsl #25
   14c48:	andeq	r4, r1, r0, lsl #25
   14c4c:	andeq	r4, r1, r0, lsl #25
   14c50:	andeq	r4, r1, r0, lsl #25
   14c54:	andeq	r4, r1, r0, lsl #25
   14c58:	andeq	r4, r1, r0, lsl #25
   14c5c:	andeq	r4, r1, r0, lsl #25
   14c60:	andeq	r4, r1, r0, lsl #25
   14c64:	andeq	r4, r1, r0, lsl #25
   14c68:	andeq	r4, r1, r0, lsl #25
   14c6c:	andeq	r4, r1, r0, lsl #25
   14c70:	andeq	r4, r1, r0, lsl #25
   14c74:	andeq	r4, r1, r0, lsl #25
   14c78:	andeq	r4, r1, r0, lsl #25
   14c7c:	andeq	r4, r1, r0, lsl #25
   14c80:	strb	r0, [r9], #1
   14c84:	add	r7, r7, #1
   14c88:	cmp	r7, sl
   14c8c:	bcc	14aec <__assert_fail@plt+0x2e40>
   14c90:	b	14dac <__assert_fail@plt+0x3100>
   14c94:	str	r3, [sp, #12]
   14c98:	str	r3, [sp, #8]
   14c9c:	sub	r2, sl, r7
   14ca0:	mov	r0, r6
   14ca4:	mov	r1, r7
   14ca8:	mov	r3, r5
   14cac:	bl	1b328 <__assert_fail@plt+0x967c>
   14cb0:	cmp	r0, #0
   14cb4:	beq	14cd0 <__assert_fail@plt+0x3024>
   14cb8:	mov	r5, r0
   14cbc:	cmn	r0, #2
   14cc0:	beq	14d84 <__assert_fail@plt+0x30d8>
   14cc4:	cmn	r5, #1
   14cc8:	bne	14cd4 <__assert_fail@plt+0x3028>
   14ccc:	b	14d8c <__assert_fail@plt+0x30e0>
   14cd0:	mov	r5, #1
   14cd4:	ldr	r0, [sp, #4]
   14cd8:	add	r8, r7, r5
   14cdc:	bl	1188c <wcwidth@plt>
   14ce0:	cmp	r0, #0
   14ce4:	blt	14d60 <__assert_fail@plt+0x30b4>
   14ce8:	cmp	r5, #16
   14cec:	bcc	14d3c <__assert_fail@plt+0x3090>
   14cf0:	cmp	r9, r8
   14cf4:	addcc	r0, r9, r5
   14cf8:	cmpcc	r7, r0
   14cfc:	bcc	14d3c <__assert_fail@plt+0x3090>
   14d00:	bic	ip, r5, #15
   14d04:	mov	lr, r6
   14d08:	mov	r6, r9
   14d0c:	add	r2, r7, ip
   14d10:	add	r1, r9, ip
   14d14:	sub	r0, r5, ip
   14d18:	mov	r3, ip
   14d1c:	vld1.8	{d16-d17}, [r7]!
   14d20:	subs	r3, r3, #16
   14d24:	vst1.8	{d16-d17}, [r6]!
   14d28:	bne	14d1c <__assert_fail@plt+0x3070>
   14d2c:	cmp	r5, ip
   14d30:	mov	r6, lr
   14d34:	bne	14d48 <__assert_fail@plt+0x309c>
   14d38:	b	14d58 <__assert_fail@plt+0x30ac>
   14d3c:	mov	r0, r5
   14d40:	mov	r1, r9
   14d44:	mov	r2, r7
   14d48:	ldrb	r3, [r2], #1
   14d4c:	subs	r0, r0, #1
   14d50:	strb	r3, [r1], #1
   14d54:	bne	14d48 <__assert_fail@plt+0x309c>
   14d58:	add	r9, r9, r5
   14d5c:	b	14d68 <__assert_fail@plt+0x30bc>
   14d60:	mov	r0, #63	; 0x3f
   14d64:	strb	r0, [r9], #1
   14d68:	add	r5, sp, #8
   14d6c:	mov	r0, r5
   14d70:	bl	1191c <mbsinit@plt>
   14d74:	cmp	r0, #0
   14d78:	mov	r7, r8
   14d7c:	beq	14c9c <__assert_fail@plt+0x2ff0>
   14d80:	b	14d9c <__assert_fail@plt+0x30f0>
   14d84:	mov	r8, sl
   14d88:	b	14d90 <__assert_fail@plt+0x30e4>
   14d8c:	add	r8, r7, #1
   14d90:	mov	r0, #63	; 0x3f
   14d94:	add	r5, sp, #8
   14d98:	strb	r0, [r9], #1
   14d9c:	mov	r7, r8
   14da0:	mov	r3, #0
   14da4:	cmp	r7, sl
   14da8:	bcc	14aec <__assert_fail@plt+0x2e40>
   14dac:	sub	r5, r9, r4
   14db0:	mov	r0, r5
   14db4:	sub	sp, fp, #28
   14db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dc0:	add	fp, sp, #28
   14dc4:	sub	sp, sp, #12
   14dc8:	movw	sl, #64928	; 0xfda0
   14dcc:	mov	r8, r0
   14dd0:	mov	r6, #0
   14dd4:	mov	r7, #0
   14dd8:	movt	sl, #2
   14ddc:	add	r4, sl, #8
   14de0:	ldr	r5, [r4, #-8]
   14de4:	mov	r1, r8
   14de8:	mov	r0, r5
   14dec:	bl	1185c <strcmp@plt>
   14df0:	cmp	r0, #0
   14df4:	beq	14eb8 <__assert_fail@plt+0x320c>
   14df8:	mov	r0, r5
   14dfc:	bl	19468 <__assert_fail@plt+0x77bc>
   14e00:	bl	11ac0 <strlen@plt>
   14e04:	add	r0, r7, r0
   14e08:	add	r6, r6, #1
   14e0c:	add	r4, r4, #12
   14e10:	add	r7, r0, #2
   14e14:	cmp	r6, #13
   14e18:	bcc	14de0 <__assert_fail@plt+0x3134>
   14e1c:	add	r0, r7, #1
   14e20:	str	r8, [sp, #8]
   14e24:	bl	19ca0 <__assert_fail@plt+0x7ff4>
   14e28:	mov	r6, r0
   14e2c:	mov	r4, #0
   14e30:	movw	r8, #8236	; 0x202c
   14e34:	mov	r9, #0
   14e38:	str	r0, [sp, #4]
   14e3c:	ldr	r0, [sl, -r9]
   14e40:	cmp	r9, #0
   14e44:	strhne	r8, [r6]
   14e48:	strbne	r4, [r6, #2]!
   14e4c:	bl	19468 <__assert_fail@plt+0x77bc>
   14e50:	mov	r7, r0
   14e54:	bl	11ac0 <strlen@plt>
   14e58:	mov	r5, r0
   14e5c:	add	r2, r0, #1
   14e60:	mov	r0, r6
   14e64:	mov	r1, r7
   14e68:	bl	118ec <memcpy@plt>
   14e6c:	sub	r9, r9, #12
   14e70:	add	r6, r6, r5
   14e74:	cmn	r9, #156	; 0x9c
   14e78:	bne	14e3c <__assert_fail@plt+0x3190>
   14e7c:	movw	r1, #65087	; 0xfe3f
   14e80:	mov	r0, #0
   14e84:	mov	r2, #5
   14e88:	movt	r1, #2
   14e8c:	bl	11940 <dcgettext@plt>
   14e90:	mov	r5, r0
   14e94:	ldr	r0, [sp, #8]
   14e98:	bl	19468 <__assert_fail@plt+0x77bc>
   14e9c:	mov	r3, r0
   14ea0:	ldr	r0, [sp, #4]
   14ea4:	mov	r1, #0
   14ea8:	mov	r2, r5
   14eac:	str	r0, [sp]
   14eb0:	mov	r0, #1
   14eb4:	bl	119e8 <error@plt>
   14eb8:	ldr	r0, [r4]
   14ebc:	sub	sp, fp, #28
   14ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec4:	mov	r1, r0
   14ec8:	mov	r0, #0
   14ecc:	cmp	r1, #12
   14ed0:	addls	r0, r1, r1, lsl #1
   14ed4:	movwls	r1, #64928	; 0xfda0
   14ed8:	movtls	r1, #2
   14edc:	ldrls	r0, [r1, r0, lsl #2]
   14ee0:	bx	lr
   14ee4:	mov	r1, r0
   14ee8:	mvn	r0, #0
   14eec:	cmp	r1, #12
   14ef0:	bxhi	lr
   14ef4:	add	r0, r1, r1, lsl #1
   14ef8:	movw	r1, #64928	; 0xfda0
   14efc:	movt	r1, #2
   14f00:	add	r0, r1, r0, lsl #2
   14f04:	ldr	r0, [r0, #8]
   14f08:	bx	lr
   14f0c:	mov	r1, r0
   14f10:	mov	r0, #0
   14f14:	cmp	r1, #12
   14f18:	bxhi	lr
   14f1c:	add	r0, r1, r1, lsl #1
   14f20:	movw	r1, #64928	; 0xfda0
   14f24:	movt	r1, #2
   14f28:	add	r0, r1, r0, lsl #2
   14f2c:	ldr	r0, [r0, #4]
   14f30:	bx	lr
   14f34:	push	{r4, sl, fp, lr}
   14f38:	add	fp, sp, #8
   14f3c:	mov	lr, r0
   14f40:	mvn	r0, #0
   14f44:	cmp	lr, #12
   14f48:	bhi	14f9c <__assert_fail@plt+0x32f0>
   14f4c:	cmp	lr, #0
   14f50:	popeq	{r4, sl, fp, pc}
   14f54:	movw	r3, #64928	; 0xfda0
   14f58:	add	r2, lr, lr, lsl #1
   14f5c:	movt	r3, #2
   14f60:	add	r2, r3, r2, lsl #2
   14f64:	ldr	ip, [r2, #8]
   14f68:	add	r2, r3, #4
   14f6c:	mov	r3, #0
   14f70:	ldr	r4, [r2]
   14f74:	tst	r4, r1
   14f78:	beq	14f8c <__assert_fail@plt+0x32e0>
   14f7c:	ldr	r4, [r2, #4]
   14f80:	cmp	ip, r4
   14f84:	moveq	r0, r3
   14f88:	popeq	{r4, sl, fp, pc}
   14f8c:	add	r3, r3, #1
   14f90:	add	r2, r2, #12
   14f94:	cmp	r3, lr
   14f98:	bcc	14f70 <__assert_fail@plt+0x32c4>
   14f9c:	pop	{r4, sl, fp, pc}
   14fa0:	push	{r4, r5, fp, lr}
   14fa4:	add	fp, sp, #8
   14fa8:	ldr	r5, [fp, #8]
   14fac:	cmp	r2, #0
   14fb0:	beq	14fc8 <__assert_fail@plt+0x331c>
   14fb4:	mov	r2, #0
   14fb8:	str	r2, [r3]
   14fbc:	str	r2, [r5]
   14fc0:	ldr	r2, [r3]
   14fc4:	b	14ff0 <__assert_fail@plt+0x3344>
   14fc8:	ldr	r2, [r5]
   14fcc:	ldr	r4, [r3]
   14fd0:	add	r2, r4, r2
   14fd4:	str	r2, [r3]
   14fd8:	ldrb	r4, [r0, r2]
   14fdc:	cmp	r4, #0
   14fe0:	moveq	r0, #0
   14fe4:	popeq	{r4, r5, fp, pc}
   14fe8:	add	r2, r2, #1
   14fec:	str	r2, [r3]
   14ff0:	add	r4, r0, r2
   14ff4:	ldrb	r0, [r1]
   14ff8:	cmp	r0, #0
   14ffc:	beq	15018 <__assert_fail@plt+0x336c>
   15000:	mov	r0, r4
   15004:	bl	11c10 <strpbrk@plt>
   15008:	cmp	r0, #0
   1500c:	beq	15018 <__assert_fail@plt+0x336c>
   15010:	sub	r0, r0, r4
   15014:	b	15020 <__assert_fail@plt+0x3374>
   15018:	mov	r0, r4
   1501c:	bl	11ac0 <strlen@plt>
   15020:	str	r0, [r5]
   15024:	mov	r0, #1
   15028:	pop	{r4, r5, fp, pc}
   1502c:	push	{r4, r5, fp, lr}
   15030:	add	fp, sp, #8
   15034:	sub	sp, sp, #16
   15038:	mov	r4, r1
   1503c:	movw	r1, #65248	; 0xfee0
   15040:	mov	r5, r0
   15044:	mov	r0, #0
   15048:	mov	r2, #5
   1504c:	movt	r1, #2
   15050:	bl	11940 <dcgettext@plt>
   15054:	movw	r2, #65493	; 0xffd5
   15058:	movw	r3, #64869	; 0xfd65
   1505c:	mov	r1, r0
   15060:	movw	r0, #4
   15064:	movt	r2, #2
   15068:	movt	r0, #3
   1506c:	movt	r3, #2
   15070:	str	r2, [sp, #4]
   15074:	movw	r2, #65454	; 0xffae
   15078:	str	r3, [sp]
   1507c:	str	r0, [sp, #8]
   15080:	mov	r0, r5
   15084:	mov	r3, r4
   15088:	movt	r2, #2
   1508c:	bl	11ad8 <fprintf@plt>
   15090:	sub	sp, fp, #8
   15094:	pop	{r4, r5, fp, pc}
   15098:	sub	r0, r0, #1
   1509c:	ldrb	r3, [r0, #1]!
   150a0:	cmp	r3, #47	; 0x2f
   150a4:	beq	1509c <__assert_fail@plt+0x33f0>
   150a8:	mov	r2, #0
   150ac:	mov	r1, r0
   150b0:	b	150cc <__assert_fail@plt+0x3420>
   150b4:	cmp	r3, #0
   150b8:	bxeq	lr
   150bc:	tst	r2, #1
   150c0:	mov	r2, #0
   150c4:	movne	r0, r1
   150c8:	ldrb	r3, [r1, #1]!
   150cc:	uxtb	r3, r3
   150d0:	cmp	r3, #47	; 0x2f
   150d4:	bne	150b4 <__assert_fail@plt+0x3408>
   150d8:	ldrb	r3, [r1, #1]!
   150dc:	mov	r2, #1
   150e0:	b	150cc <__assert_fail@plt+0x3420>
   150e4:	push	{r4, sl, fp, lr}
   150e8:	add	fp, sp, #8
   150ec:	mov	r4, r0
   150f0:	bl	11ac0 <strlen@plt>
   150f4:	mov	r1, r0
   150f8:	sub	r2, r4, #1
   150fc:	mov	r0, r1
   15100:	cmp	r1, #2
   15104:	popcc	{r4, sl, fp, pc}
   15108:	ldrb	r3, [r2, r0]
   1510c:	sub	r1, r0, #1
   15110:	cmp	r3, #47	; 0x2f
   15114:	beq	150fc <__assert_fail@plt+0x3450>
   15118:	pop	{r4, sl, fp, pc}
   1511c:	movw	r1, #4748	; 0x128c
   15120:	movt	r1, #4
   15124:	str	r0, [r1]
   15128:	bx	lr
   1512c:	movw	r1, #4752	; 0x1290
   15130:	movt	r1, #4
   15134:	strb	r0, [r1]
   15138:	bx	lr
   1513c:	push	{r4, r5, r6, sl, fp, lr}
   15140:	add	fp, sp, #16
   15144:	sub	sp, sp, #8
   15148:	movw	r0, #4628	; 0x1214
   1514c:	movt	r0, #4
   15150:	ldr	r0, [r0]
   15154:	bl	2e4d8 <__assert_fail@plt+0x1c82c>
   15158:	cmp	r0, #0
   1515c:	beq	15184 <__assert_fail@plt+0x34d8>
   15160:	movw	r0, #4752	; 0x1290
   15164:	movt	r0, #4
   15168:	ldrb	r0, [r0]
   1516c:	cmp	r0, #0
   15170:	beq	151a4 <__assert_fail@plt+0x34f8>
   15174:	bl	11af0 <__errno_location@plt>
   15178:	ldr	r0, [r0]
   1517c:	cmp	r0, #32
   15180:	bne	151a4 <__assert_fail@plt+0x34f8>
   15184:	movw	r0, #4624	; 0x1210
   15188:	movt	r0, #4
   1518c:	ldr	r0, [r0]
   15190:	bl	2e4d8 <__assert_fail@plt+0x1c82c>
   15194:	cmp	r0, #0
   15198:	subeq	sp, fp, #16
   1519c:	popeq	{r4, r5, r6, sl, fp, pc}
   151a0:	b	15214 <__assert_fail@plt+0x3568>
   151a4:	movw	r1, #26
   151a8:	mov	r0, #0
   151ac:	mov	r2, #5
   151b0:	movt	r1, #3
   151b4:	bl	11940 <dcgettext@plt>
   151b8:	mov	r4, r0
   151bc:	movw	r0, #4748	; 0x128c
   151c0:	movt	r0, #4
   151c4:	ldr	r6, [r0]
   151c8:	bl	11af0 <__errno_location@plt>
   151cc:	ldr	r5, [r0]
   151d0:	cmp	r6, #0
   151d4:	bne	151f0 <__assert_fail@plt+0x3544>
   151d8:	movw	r2, #2212	; 0x8a4
   151dc:	mov	r0, #0
   151e0:	mov	r1, r5
   151e4:	mov	r3, r4
   151e8:	movt	r2, #3
   151ec:	b	15210 <__assert_fail@plt+0x3564>
   151f0:	mov	r0, r6
   151f4:	bl	190e0 <__assert_fail@plt+0x7434>
   151f8:	movw	r2, #38	; 0x26
   151fc:	mov	r3, r0
   15200:	str	r4, [sp]
   15204:	mov	r0, #0
   15208:	mov	r1, r5
   1520c:	movt	r2, #3
   15210:	bl	119e8 <error@plt>
   15214:	movw	r0, #4528	; 0x11b0
   15218:	movt	r0, #4
   1521c:	ldr	r0, [r0]
   15220:	bl	118e0 <_exit@plt>
   15224:	sub	sp, sp, #8
   15228:	push	{fp, lr}
   1522c:	mov	fp, sp
   15230:	sub	sp, sp, #8
   15234:	str	r2, [fp, #8]
   15238:	mov	r2, #0
   1523c:	tst	r1, #64	; 0x40
   15240:	str	r3, [fp, #12]
   15244:	addne	r2, fp, #8
   15248:	orrne	r2, r2, #4
   1524c:	strne	r2, [sp, #4]
   15250:	ldrne	r2, [fp, #8]
   15254:	bl	11a00 <open64@plt>
   15258:	bl	195d0 <__assert_fail@plt+0x7924>
   1525c:	mov	sp, fp
   15260:	pop	{fp, lr}
   15264:	add	sp, sp, #8
   15268:	bx	lr
   1526c:	andeq	r0, r0, r0
   15270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15274:	add	fp, sp, #28
   15278:	sub	sp, sp, #4
   1527c:	vpush	{d8-d9}
   15280:	sub	sp, sp, #96	; 0x60
   15284:	mov	r7, r3
   15288:	mov	r6, r2
   1528c:	mov	r9, r1
   15290:	str	r0, [sp, #36]	; 0x24
   15294:	bl	11be0 <localeconv@plt>
   15298:	ldr	r5, [r0]
   1529c:	mov	r4, r0
   152a0:	mov	r0, r5
   152a4:	bl	11ac0 <strlen@plt>
   152a8:	movw	r2, #61525	; 0xf055
   152ac:	sub	r1, r0, #1
   152b0:	cmp	r1, #16
   152b4:	movt	r2, #2
   152b8:	movcc	r2, r5
   152bc:	ldr	r5, [r4, #4]
   152c0:	ldr	r4, [r4, #8]
   152c4:	movcs	r0, #1
   152c8:	str	r0, [sp, #8]
   152cc:	str	r2, [sp, #4]
   152d0:	mov	r0, r5
   152d4:	bl	11ac0 <strlen@plt>
   152d8:	movw	r3, #64311	; 0xfb37
   152dc:	cmp	r0, #17
   152e0:	movw	r0, #647	; 0x287
   152e4:	ldr	r2, [fp, #16]
   152e8:	ldr	sl, [fp, #8]
   152ec:	ldr	r8, [fp, #12]
   152f0:	str	r6, [sp, #20]
   152f4:	str	r7, [sp, #28]
   152f8:	str	r4, [sp, #12]
   152fc:	movt	r3, #2
   15300:	add	r1, r6, r0
   15304:	movcc	r3, r5
   15308:	ands	r0, r7, #32
   1530c:	ldr	r5, [fp, #20]
   15310:	str	r1, [sp, #24]
   15314:	str	r0, [sp, #16]
   15318:	mov	r0, #1000	; 0x3e8
   1531c:	str	r3, [sp, #44]	; 0x2c
   15320:	movwne	r0, #1024	; 0x400
   15324:	str	r0, [sp, #32]
   15328:	and	r0, r7, #3
   1532c:	str	r0, [sp, #40]	; 0x28
   15330:	subs	r0, sl, r2
   15334:	sbcs	r0, r8, r5
   15338:	bcs	1542c <__assert_fail@plt+0x3780>
   1533c:	orrs	r0, sl, r8
   15340:	mov	r4, r9
   15344:	beq	15514 <__assert_fail@plt+0x3868>
   15348:	ldr	r5, [fp, #20]
   1534c:	mov	r0, r2
   15350:	mov	r2, sl
   15354:	mov	r3, r8
   15358:	mov	r1, r5
   1535c:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   15360:	ldr	r2, [fp, #16]
   15364:	mov	r6, r0
   15368:	mov	r3, r1
   1536c:	umull	r0, r1, r0, sl
   15370:	mla	r1, r6, r8, r1
   15374:	mla	r1, r3, sl, r1
   15378:	subs	r0, r2, r0
   1537c:	sbc	r1, r5, r1
   15380:	orrs	r0, r0, r1
   15384:	bne	15514 <__assert_fail@plt+0x3868>
   15388:	ldr	r5, [sp, #36]	; 0x24
   1538c:	mov	r1, r4
   15390:	mov	r2, r6
   15394:	mov	r8, r3
   15398:	mov	r0, r5
   1539c:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   153a0:	mov	r7, r0
   153a4:	mov	r9, r1
   153a8:	umull	r0, r1, r0, r6
   153ac:	mov	r2, #10
   153b0:	mov	r3, r8
   153b4:	mla	r1, r7, r8, r1
   153b8:	subs	r0, r5, r0
   153bc:	mla	r1, r9, r6, r1
   153c0:	umull	sl, r0, r0, r2
   153c4:	mov	r2, r6
   153c8:	sbc	r1, r4, r1
   153cc:	add	r1, r1, r1, lsl #2
   153d0:	add	r5, r0, r1, lsl #1
   153d4:	mov	r0, sl
   153d8:	mov	r1, r5
   153dc:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   153e0:	mov	r4, r0
   153e4:	umull	r0, r2, r0, r6
   153e8:	mla	r2, r4, r8, r2
   153ec:	subs	r0, sl, r0
   153f0:	mla	r1, r1, r6, r2
   153f4:	mov	r2, #2
   153f8:	sbc	r1, r5, r1
   153fc:	subs	r3, r6, r0, lsl #1
   15400:	lsl	r1, r1, #1
   15404:	orr	r1, r1, r0, lsr #31
   15408:	sbcs	r3, r8, r1
   1540c:	orr	r5, r1, r0, lsl #1
   15410:	movwcc	r2, #3
   15414:	cmp	r5, #0
   15418:	movwne	r5, #1
   1541c:	rsbs	r0, r6, r0, lsl #1
   15420:	sbcs	r0, r1, r8
   15424:	movcs	r5, r2
   15428:	b	154a4 <__assert_fail@plt+0x37f8>
   1542c:	mov	r0, sl
   15430:	mov	r1, r8
   15434:	mov	r3, r5
   15438:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   1543c:	ldr	r2, [fp, #16]
   15440:	mov	r6, r0
   15444:	mov	r3, r1
   15448:	mov	r4, r9
   1544c:	umull	r0, r1, r0, r2
   15450:	mla	r1, r6, r5, r1
   15454:	subs	r0, sl, r0
   15458:	mla	r1, r3, r2, r1
   1545c:	sbc	r1, r8, r1
   15460:	orrs	r0, r0, r1
   15464:	bne	15514 <__assert_fail@plt+0x3868>
   15468:	ldr	r5, [sp, #36]	; 0x24
   1546c:	mov	r2, r6
   15470:	umull	r7, r0, r6, r5
   15474:	mla	r0, r6, r4, r0
   15478:	mla	r9, r3, r5, r0
   1547c:	mov	r0, r7
   15480:	mov	r1, r9
   15484:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   15488:	ldr	r2, [fp, #16]
   1548c:	eor	r1, r1, r4
   15490:	eor	r0, r0, r5
   15494:	orrs	r0, r0, r1
   15498:	bne	15514 <__assert_fail@plt+0x3868>
   1549c:	mov	r5, #0
   154a0:	mov	r4, #0
   154a4:	ldr	r0, [sp, #28]
   154a8:	ldr	r2, [sp, #32]
   154ac:	mvn	r6, #0
   154b0:	ands	r8, r0, #16
   154b4:	beq	154c8 <__assert_fail@plt+0x381c>
   154b8:	subs	r0, r7, r2
   154bc:	mov	r6, #0
   154c0:	sbcs	r0, r9, #0
   154c4:	bcs	15a00 <__assert_fail@plt+0x3d54>
   154c8:	ldr	r0, [sp, #24]
   154cc:	mov	sl, r7
   154d0:	str	r0, [sp, #36]	; 0x24
   154d4:	ldr	r0, [sp, #40]	; 0x28
   154d8:	cmp	r0, #0
   154dc:	beq	15814 <__assert_fail@plt+0x3b68>
   154e0:	cmp	r0, #1
   154e4:	bne	15888 <__assert_fail@plt+0x3bdc>
   154e8:	rsbs	r1, r5, #0
   154ec:	mov	r0, #0
   154f0:	and	r3, sl, #1
   154f4:	ldr	r5, [sp, #36]	; 0x24
   154f8:	sbc	r0, r0, #0
   154fc:	eor	r1, r3, r1
   15500:	orrs	r0, r1, r0
   15504:	addne	r4, r4, #1
   15508:	cmp	r4, #5
   1550c:	bgt	15824 <__assert_fail@plt+0x3b78>
   15510:	b	15878 <__assert_fail@plt+0x3bcc>
   15514:	ldr	r9, [fp, #20]
   15518:	mov	r0, r2
   1551c:	mov	r1, r9
   15520:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   15524:	vmov	d8, r0, r1
   15528:	ldr	r0, [sp, #36]	; 0x24
   1552c:	mov	r1, r4
   15530:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   15534:	mov	r6, r0
   15538:	mov	r7, r1
   1553c:	mov	r0, sl
   15540:	mov	r1, r8
   15544:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   15548:	vmov	d17, r6, r7
   1554c:	ldr	r7, [sp, #28]
   15550:	vmov	d16, r0, r1
   15554:	vdiv.f64	d16, d16, d8
   15558:	vmul.f64	d8, d16, d17
   1555c:	tst	r7, #16
   15560:	bne	155d4 <__assert_fail@plt+0x3928>
   15564:	ldr	r0, [sp, #40]	; 0x28
   15568:	ldr	sl, [sp, #20]
   1556c:	cmp	r0, #1
   15570:	beq	15774 <__assert_fail@plt+0x3ac8>
   15574:	vldr	d16, [pc, #772]	; 15880 <__assert_fail@plt+0x3bd4>
   15578:	ldr	r8, [sp, #24]
   1557c:	vcmpe.f64	d8, d16
   15580:	vmrs	APSR_nzcv, fpscr
   15584:	bpl	15778 <__assert_fail@plt+0x3acc>
   15588:	mov	r6, r0
   1558c:	vmov	r0, r1, d8
   15590:	bl	2ecc0 <__assert_fail@plt+0x1d014>
   15594:	mov	r4, r0
   15598:	mov	r5, r1
   1559c:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   155a0:	vmov	d16, r0, r1
   155a4:	clz	r0, r6
   155a8:	mov	r2, #0
   155ac:	vcmp.f64	d8, d16
   155b0:	lsr	r0, r0, #5
   155b4:	vmrs	APSR_nzcv, fpscr
   155b8:	movwne	r2, #1
   155bc:	and	r0, r0, r2
   155c0:	adds	r0, r0, r4
   155c4:	adc	r1, r5, #0
   155c8:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   155cc:	vmov	d8, r0, r1
   155d0:	b	15778 <__assert_fail@plt+0x3acc>
   155d4:	ldr	r0, [sp, #32]
   155d8:	vmov.f64	d16, #112	; 0x3f800000  1.0
   155dc:	mov	r6, #0
   155e0:	vmov	s0, r0
   155e4:	vcvt.f64.u32	d17, s0
   155e8:	ldr	sl, [sp, #20]
   155ec:	add	r6, r6, #1
   155f0:	vmul.f64	d16, d16, d17
   155f4:	cmp	r6, #7
   155f8:	vmulls.f64	d18, d16, d17
   155fc:	vcmpels.f64	d18, d8
   15600:	vmrsls	APSR_nzcv, fpscr
   15604:	bls	155ec <__assert_fail@plt+0x3940>
   15608:	ldr	r0, [sp, #40]	; 0x28
   1560c:	ldr	r8, [sp, #24]
   15610:	ldr	r5, [sp, #8]
   15614:	vdiv.f64	d8, d8, d16
   15618:	vmov.f64	d16, d8
   1561c:	cmp	r0, #1
   15620:	beq	15684 <__assert_fail@plt+0x39d8>
   15624:	vldr	d16, [pc, #596]	; 15880 <__assert_fail@plt+0x3bd4>
   15628:	vcmpe.f64	d8, d16
   1562c:	vmov.f64	d16, d8
   15630:	vmrs	APSR_nzcv, fpscr
   15634:	bpl	15684 <__assert_fail@plt+0x39d8>
   15638:	vmov	r0, r1, d8
   1563c:	bl	2ecc0 <__assert_fail@plt+0x1d014>
   15640:	mov	r4, r0
   15644:	mov	r5, r1
   15648:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   1564c:	vmov	d16, r0, r1
   15650:	ldr	r0, [sp, #40]	; 0x28
   15654:	mov	r2, #0
   15658:	vcmp.f64	d8, d16
   1565c:	vmrs	APSR_nzcv, fpscr
   15660:	movwne	r2, #1
   15664:	clz	r0, r0
   15668:	lsr	r0, r0, #5
   1566c:	and	r0, r0, r2
   15670:	adds	r0, r0, r4
   15674:	adc	r1, r5, #0
   15678:	ldr	r5, [sp, #8]
   1567c:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   15680:	vmov	d16, r0, r1
   15684:	movw	r1, #51	; 0x33
   15688:	vmov	r2, r3, d16
   1568c:	mov	r0, sl
   15690:	movt	r1, #3
   15694:	bl	11bf8 <sprintf@plt>
   15698:	ldr	r1, [sp, #16]
   1569c:	mov	r0, #3
   156a0:	cmp	r1, #0
   156a4:	movwne	r0, #2
   156a8:	add	r4, r0, r5
   156ac:	mov	r0, sl
   156b0:	bl	11ac0 <strlen@plt>
   156b4:	cmp	r4, r0
   156b8:	bcc	156dc <__assert_fail@plt+0x3a30>
   156bc:	mov	r2, r0
   156c0:	add	r5, r5, #1
   156c4:	tst	r7, #8
   156c8:	beq	157a0 <__assert_fail@plt+0x3af4>
   156cc:	add	r0, sl, r2
   156d0:	ldrb	r0, [r0, #-1]
   156d4:	cmp	r0, #48	; 0x30
   156d8:	bne	157a0 <__assert_fail@plt+0x3af4>
   156dc:	ldr	r0, [sp, #40]	; 0x28
   156e0:	vmov.f64	d9, #36	; 0x41200000  10.0
   156e4:	vmul.f64	d8, d8, d9
   156e8:	cmp	r0, #1
   156ec:	beq	15748 <__assert_fail@plt+0x3a9c>
   156f0:	vldr	d16, [pc, #392]	; 15880 <__assert_fail@plt+0x3bd4>
   156f4:	vcmpe.f64	d8, d16
   156f8:	vmrs	APSR_nzcv, fpscr
   156fc:	bpl	15748 <__assert_fail@plt+0x3a9c>
   15700:	vmov	r0, r1, d8
   15704:	bl	2ecc0 <__assert_fail@plt+0x1d014>
   15708:	mov	r4, r0
   1570c:	mov	r5, r1
   15710:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   15714:	vmov	d16, r0, r1
   15718:	ldr	r0, [sp, #40]	; 0x28
   1571c:	mov	r2, #0
   15720:	vcmp.f64	d8, d16
   15724:	vmrs	APSR_nzcv, fpscr
   15728:	movwne	r2, #1
   1572c:	clz	r0, r0
   15730:	lsr	r0, r0, #5
   15734:	and	r0, r0, r2
   15738:	adds	r0, r0, r4
   1573c:	adc	r1, r5, #0
   15740:	bl	2ec00 <__assert_fail@plt+0x1cf54>
   15744:	vmov	d8, r0, r1
   15748:	movw	r1, #45	; 0x2d
   1574c:	vdiv.f64	d16, d8, d9
   15750:	mov	r0, sl
   15754:	vmov	r2, r3, d16
   15758:	movt	r1, #3
   1575c:	bl	11bf8 <sprintf@plt>
   15760:	mov	r0, sl
   15764:	bl	11ac0 <strlen@plt>
   15768:	mov	r2, r0
   1576c:	mov	r5, #0
   15770:	b	157a0 <__assert_fail@plt+0x3af4>
   15774:	ldr	r8, [sp, #24]
   15778:	movw	r1, #45	; 0x2d
   1577c:	vmov	r2, r3, d8
   15780:	mov	r0, sl
   15784:	movt	r1, #3
   15788:	bl	11bf8 <sprintf@plt>
   1578c:	mov	r0, sl
   15790:	bl	11ac0 <strlen@plt>
   15794:	mov	r2, r0
   15798:	mov	r5, #0
   1579c:	mvn	r6, #0
   157a0:	sub	r4, r8, r2
   157a4:	mov	r1, sl
   157a8:	mov	r0, r4
   157ac:	bl	118a4 <memmove@plt>
   157b0:	sub	r5, r8, r5
   157b4:	tst	r7, #4
   157b8:	bne	158e0 <__assert_fail@plt+0x3c34>
   157bc:	ldr	r3, [sp, #32]
   157c0:	ldr	r5, [fp, #16]
   157c4:	tst	r7, #128	; 0x80
   157c8:	beq	15b1c <__assert_fail@plt+0x3e70>
   157cc:	cmn	r6, #1
   157d0:	bgt	15ab4 <__assert_fail@plt+0x3e08>
   157d4:	subs	r0, r5, #2
   157d8:	mov	r6, #0
   157dc:	sbcs	r0, r9, #0
   157e0:	bcc	15ab4 <__assert_fail@plt+0x3e08>
   157e4:	mov	r0, #0
   157e8:	mov	r1, #1
   157ec:	mov	r6, #0
   157f0:	cmp	r6, #7
   157f4:	beq	15ab0 <__assert_fail@plt+0x3e04>
   157f8:	umull	r1, r2, r1, r3
   157fc:	add	r6, r6, #1
   15800:	mla	r0, r0, r3, r2
   15804:	subs	r2, r1, r5
   15808:	sbcs	r2, r0, r9
   1580c:	bcc	157f0 <__assert_fail@plt+0x3b44>
   15810:	b	15ab4 <__assert_fail@plt+0x3e08>
   15814:	add	r0, r4, r5
   15818:	ldr	r5, [sp, #36]	; 0x24
   1581c:	cmp	r0, #1
   15820:	blt	15878 <__assert_fail@plt+0x3bcc>
   15824:	adds	sl, sl, #1
   15828:	adc	r9, r9, #0
   1582c:	cmp	r6, #7
   15830:	bgt	15878 <__assert_fail@plt+0x3bcc>
   15834:	cmp	r8, #0
   15838:	beq	15878 <__assert_fail@plt+0x3bcc>
   1583c:	eor	r0, sl, r2
   15840:	orrs	r0, r0, r9
   15844:	ldreq	r0, [sp, #28]
   15848:	addeq	r6, r6, #1
   1584c:	moveq	r9, #0
   15850:	moveq	sl, #1
   15854:	tsteq	r0, #8
   15858:	bne	15878 <__assert_fail@plt+0x3bcc>
   1585c:	ldr	r2, [sp, #8]
   15860:	mov	r0, #48	; 0x30
   15864:	ldr	r1, [sp, #4]
   15868:	strb	r0, [r5, #-1]!
   1586c:	sub	r5, r5, r2
   15870:	mov	r0, r5
   15874:	bl	118ec <memcpy@plt>
   15878:	ldr	r8, [sp, #24]
   1587c:	b	15890 <__assert_fail@plt+0x3be4>
   15880:	andeq	r0, r0, r0
   15884:	mvnsmi	r0, #0
   15888:	ldr	r8, [sp, #24]
   1588c:	ldr	r5, [sp, #36]	; 0x24
   15890:	mov	r4, r5
   15894:	mov	r0, sl
   15898:	mov	r1, r9
   1589c:	mov	r2, #10
   158a0:	mov	r3, #0
   158a4:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   158a8:	add	r2, r0, r0, lsl #2
   158ac:	sub	r2, sl, r2, lsl #1
   158b0:	orr	r2, r2, #48	; 0x30
   158b4:	strb	r2, [r4, #-1]!
   158b8:	rsbs	r2, sl, #9
   158bc:	mov	sl, r0
   158c0:	rscs	r2, r9, #0
   158c4:	mov	r9, r1
   158c8:	bcc	15894 <__assert_fail@plt+0x3be8>
   158cc:	ldr	r7, [sp, #28]
   158d0:	ldr	r9, [fp, #20]
   158d4:	ldr	sl, [sp, #20]
   158d8:	tst	r7, #4
   158dc:	beq	157bc <__assert_fail@plt+0x3b10>
   158e0:	ldr	r0, [sp, #44]	; 0x2c
   158e4:	mov	r7, r5
   158e8:	str	r6, [sp, #8]
   158ec:	sub	r5, r5, r4
   158f0:	bl	11ac0 <strlen@plt>
   158f4:	add	r8, sp, #48	; 0x30
   158f8:	str	r0, [sp, #40]	; 0x28
   158fc:	mov	r1, r4
   15900:	mov	r2, r5
   15904:	mov	r0, r8
   15908:	bl	118ec <memcpy@plt>
   1590c:	ldr	r0, [sp, #12]
   15910:	ldrb	r6, [r0]
   15914:	cmp	r6, #255	; 0xff
   15918:	mov	r9, r6
   1591c:	moveq	r9, r5
   15920:	cmp	r6, #0
   15924:	mvneq	r9, #0
   15928:	cmp	r9, r5
   1592c:	movhi	r9, r5
   15930:	sub	r4, r7, r9
   15934:	sub	r7, r5, r9
   15938:	mov	r2, r9
   1593c:	add	r1, r8, r7
   15940:	mov	r0, r4
   15944:	bl	118ec <memcpy@plt>
   15948:	cmp	r7, #0
   1594c:	beq	159d8 <__assert_fail@plt+0x3d2c>
   15950:	clz	r0, r6
   15954:	ldr	r8, [sp, #12]
   15958:	lsr	sl, r0, #5
   1595c:	ldr	r0, [sp, #40]	; 0x28
   15960:	rsb	r0, r0, #0
   15964:	str	r0, [sp, #36]	; 0x24
   15968:	ldr	r0, [sp, #36]	; 0x24
   1596c:	ldr	r1, [sp, #44]	; 0x2c
   15970:	ldr	r2, [sp, #40]	; 0x28
   15974:	add	r4, r4, r0
   15978:	mov	r0, r4
   1597c:	bl	118ec <memcpy@plt>
   15980:	tst	sl, #1
   15984:	add	r0, sp, #48	; 0x30
   15988:	addeq	r8, r8, #1
   1598c:	ldrb	r6, [r8]
   15990:	cmp	r6, #255	; 0xff
   15994:	mov	r5, r6
   15998:	moveq	r5, r7
   1599c:	cmp	r6, #0
   159a0:	moveq	r5, r9
   159a4:	cmp	r7, r5
   159a8:	movcc	r5, r7
   159ac:	sub	r7, r7, r5
   159b0:	sub	r4, r4, r5
   159b4:	mov	r2, r5
   159b8:	add	r1, r0, r7
   159bc:	mov	r0, r4
   159c0:	bl	118ec <memcpy@plt>
   159c4:	clz	r0, r6
   159c8:	cmp	r7, #0
   159cc:	mov	r9, r5
   159d0:	lsr	sl, r0, #5
   159d4:	bne	15968 <__assert_fail@plt+0x3cbc>
   159d8:	ldr	r8, [sp, #24]
   159dc:	ldr	sl, [sp, #20]
   159e0:	ldr	r7, [sp, #28]
   159e4:	ldr	r3, [sp, #32]
   159e8:	ldr	r9, [fp, #20]
   159ec:	ldr	r5, [fp, #16]
   159f0:	ldr	r6, [sp, #8]
   159f4:	tst	r7, #128	; 0x80
   159f8:	bne	157cc <__assert_fail@plt+0x3b20>
   159fc:	b	15b1c <__assert_fail@plt+0x3e70>
   15a00:	mov	r6, #0
   15a04:	mov	r0, r7
   15a08:	mov	r1, r9
   15a0c:	mov	r3, #0
   15a10:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   15a14:	ldr	r2, [sp, #32]
   15a18:	mov	sl, r0
   15a1c:	mov	r9, r1
   15a20:	mls	r0, r0, r2, r7
   15a24:	add	r0, r0, r0, lsl #2
   15a28:	add	r0, r4, r0, lsl #1
   15a2c:	udiv	r4, r0, r2
   15a30:	mls	r0, r4, r2, r0
   15a34:	lsl	r0, r0, #1
   15a38:	add	r0, r0, r5, lsr #1
   15a3c:	cmp	r0, r2
   15a40:	bcs	15a58 <__assert_fail@plt+0x3dac>
   15a44:	add	r1, r0, r5
   15a48:	cmn	r0, r5
   15a4c:	movwne	r1, #1
   15a50:	mov	r5, r1
   15a54:	b	15a68 <__assert_fail@plt+0x3dbc>
   15a58:	add	r0, r0, r5
   15a5c:	mov	r5, #2
   15a60:	cmp	r2, r0
   15a64:	movwcc	r5, #3
   15a68:	add	r6, r6, #1
   15a6c:	cmp	r6, #7
   15a70:	bhi	15a84 <__assert_fail@plt+0x3dd8>
   15a74:	subs	r0, sl, r2
   15a78:	mov	r7, sl
   15a7c:	sbcs	r0, r9, #0
   15a80:	bcs	15a04 <__assert_fail@plt+0x3d58>
   15a84:	rsbs	r0, sl, #9
   15a88:	rscs	r0, r9, #0
   15a8c:	bcc	15b38 <__assert_fail@plt+0x3e8c>
   15a90:	ldr	r0, [sp, #40]	; 0x28
   15a94:	cmp	r0, #1
   15a98:	bne	15b40 <__assert_fail@plt+0x3e94>
   15a9c:	and	r0, r4, #1
   15aa0:	add	r0, r5, r0
   15aa4:	cmp	r0, #2
   15aa8:	bhi	15b50 <__assert_fail@plt+0x3ea4>
   15aac:	b	15b84 <__assert_fail@plt+0x3ed8>
   15ab0:	mov	r6, #8
   15ab4:	and	r0, r7, #256	; 0x100
   15ab8:	tst	r7, #64	; 0x40
   15abc:	orrsne	r1, r6, r0
   15ac0:	movne	r1, #32
   15ac4:	addne	r8, sl, #648	; 0x288
   15ac8:	strbne	r1, [sl, #647]	; 0x287
   15acc:	cmp	r6, #0
   15ad0:	beq	15af8 <__assert_fail@plt+0x3e4c>
   15ad4:	ldr	r1, [sp, #16]
   15ad8:	cmp	r1, #0
   15adc:	moveq	r1, #107	; 0x6b
   15ae0:	cmpeq	r6, #1
   15ae4:	beq	15af4 <__assert_fail@plt+0x3e48>
   15ae8:	movw	r1, #132	; 0x84
   15aec:	movt	r1, #3
   15af0:	ldrb	r1, [r1, r6]
   15af4:	strb	r1, [r8], #1
   15af8:	cmp	r0, #0
   15afc:	beq	15b1c <__assert_fail@plt+0x3e70>
   15b00:	ldr	r0, [sp, #16]
   15b04:	cmp	r0, #0
   15b08:	cmpne	r6, #0
   15b0c:	movne	r0, #105	; 0x69
   15b10:	strbne	r0, [r8], #1
   15b14:	mov	r0, #66	; 0x42
   15b18:	strb	r0, [r8], #1
   15b1c:	mov	r0, #0
   15b20:	strb	r0, [r8]
   15b24:	mov	r0, r4
   15b28:	sub	sp, fp, #48	; 0x30
   15b2c:	vpop	{d8-d9}
   15b30:	add	sp, sp, #4
   15b34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b38:	ldr	r0, [sp, #24]
   15b3c:	b	154d0 <__assert_fail@plt+0x3824>
   15b40:	cmp	r0, #0
   15b44:	bne	15b84 <__assert_fail@plt+0x3ed8>
   15b48:	cmp	r5, #0
   15b4c:	beq	15b84 <__assert_fail@plt+0x3ed8>
   15b50:	adds	r0, sl, #1
   15b54:	add	r4, r4, #1
   15b58:	mov	r5, #0
   15b5c:	adc	r1, r9, #0
   15b60:	cmp	r4, #10
   15b64:	bne	15b84 <__assert_fail@plt+0x3ed8>
   15b68:	rsbs	r3, r0, #9
   15b6c:	mov	r4, #0
   15b70:	mov	sl, r0
   15b74:	mov	r9, r1
   15b78:	mov	r5, #0
   15b7c:	rscs	r3, r1, #0
   15b80:	bcc	15bd4 <__assert_fail@plt+0x3f28>
   15b84:	ldr	r0, [sp, #28]
   15b88:	tst	r0, #8
   15b8c:	beq	15ba4 <__assert_fail@plt+0x3ef8>
   15b90:	cmp	r4, #0
   15b94:	bne	15ba4 <__assert_fail@plt+0x3ef8>
   15b98:	ldr	r0, [sp, #24]
   15b9c:	str	r0, [sp, #36]	; 0x24
   15ba0:	b	15bcc <__assert_fail@plt+0x3f20>
   15ba4:	ldr	r1, [sp, #20]
   15ba8:	ldr	r2, [sp, #8]
   15bac:	add	r0, r4, #48	; 0x30
   15bb0:	strb	r0, [r1, #646]!	; 0x286
   15bb4:	sub	r0, r1, r2
   15bb8:	ldr	r1, [sp, #4]
   15bbc:	str	r0, [sp, #36]	; 0x24
   15bc0:	bl	118ec <memcpy@plt>
   15bc4:	ldr	r2, [sp, #32]
   15bc8:	mov	r5, #0
   15bcc:	mov	r4, #0
   15bd0:	b	154d4 <__assert_fail@plt+0x3828>
   15bd4:	ldr	r0, [sp, #24]
   15bd8:	mov	r5, #0
   15bdc:	mov	sl, #10
   15be0:	mov	r9, #0
   15be4:	b	154d0 <__assert_fail@plt+0x3824>
   15be8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15bec:	add	fp, sp, #24
   15bf0:	sub	sp, sp, #8
   15bf4:	mov	r4, r2
   15bf8:	mov	r8, r1
   15bfc:	cmp	r0, #0
   15c00:	bne	15c2c <__assert_fail@plt+0x3f80>
   15c04:	movw	r0, #57	; 0x39
   15c08:	movt	r0, #3
   15c0c:	bl	11a0c <getenv@plt>
   15c10:	cmp	r0, #0
   15c14:	bne	15c2c <__assert_fail@plt+0x3f80>
   15c18:	movw	r0, #68	; 0x44
   15c1c:	movt	r0, #3
   15c20:	bl	11a0c <getenv@plt>
   15c24:	cmp	r0, #0
   15c28:	beq	15d50 <__assert_fail@plt+0x40a4>
   15c2c:	mov	r6, r0
   15c30:	movw	r7, #156	; 0x9c
   15c34:	movw	r1, #144	; 0x90
   15c38:	mov	r3, #4
   15c3c:	ldrb	r5, [r6], #1
   15c40:	movt	r7, #3
   15c44:	movt	r1, #3
   15c48:	mov	r2, r7
   15c4c:	cmp	r5, #39	; 0x27
   15c50:	movne	r6, r0
   15c54:	mov	r0, r6
   15c58:	bl	2e05c <__assert_fail@plt+0x1c3b0>
   15c5c:	sub	r1, r5, #39	; 0x27
   15c60:	cmp	r0, #0
   15c64:	clz	r1, r1
   15c68:	lsr	r1, r1, #5
   15c6c:	lsl	r5, r1, #2
   15c70:	blt	15c98 <__assert_fail@plt+0x3fec>
   15c74:	ldr	r0, [r7, r0, lsl #2]
   15c78:	mov	r2, #1
   15c7c:	mov	r1, #0
   15c80:	str	r2, [r4]
   15c84:	str	r1, [r4, #4]
   15c88:	orr	r1, r0, r5
   15c8c:	mov	r0, #0
   15c90:	str	r1, [r8]
   15c94:	b	15cc8 <__assert_fail@plt+0x401c>
   15c98:	movw	r0, #78	; 0x4e
   15c9c:	add	r1, sp, #4
   15ca0:	mov	r2, #0
   15ca4:	mov	r3, r4
   15ca8:	mov	r7, #0
   15cac:	movt	r0, #3
   15cb0:	str	r0, [sp]
   15cb4:	mov	r0, r6
   15cb8:	bl	1a308 <__assert_fail@plt+0x865c>
   15cbc:	cmp	r0, #0
   15cc0:	beq	15d0c <__assert_fail@plt+0x4060>
   15cc4:	str	r7, [r8]
   15cc8:	ldrd	r2, [r4]
   15ccc:	orrs	r1, r2, r3
   15cd0:	beq	15cdc <__assert_fail@plt+0x4030>
   15cd4:	sub	sp, fp, #24
   15cd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cdc:	movw	r0, #114	; 0x72
   15ce0:	movt	r0, #3
   15ce4:	bl	11a0c <getenv@plt>
   15ce8:	cmp	r0, #0
   15cec:	mov	r2, #512	; 0x200
   15cf0:	mov	r0, #4
   15cf4:	mov	r1, #0
   15cf8:	movweq	r2, #1024	; 0x400
   15cfc:	str	r2, [r4]
   15d00:	str	r1, [r4, #4]
   15d04:	sub	sp, fp, #24
   15d08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d0c:	ldrb	r0, [r6]
   15d10:	sub	r0, r0, #48	; 0x30
   15d14:	uxtb	r0, r0
   15d18:	cmp	r0, #10
   15d1c:	bcc	15d48 <__assert_fail@plt+0x409c>
   15d20:	ldr	r0, [sp, #4]
   15d24:	cmp	r0, r6
   15d28:	beq	15d78 <__assert_fail@plt+0x40cc>
   15d2c:	ldrb	r2, [r6, #1]
   15d30:	add	r1, r6, #1
   15d34:	mov	r6, r1
   15d38:	sub	r2, r2, #48	; 0x30
   15d3c:	uxtb	r2, r2
   15d40:	cmp	r2, #10
   15d44:	bcs	15d24 <__assert_fail@plt+0x4078>
   15d48:	mov	r1, r5
   15d4c:	b	15c8c <__assert_fail@plt+0x3fe0>
   15d50:	movw	r0, #114	; 0x72
   15d54:	movt	r0, #3
   15d58:	bl	11a0c <getenv@plt>
   15d5c:	mov	r2, #512	; 0x200
   15d60:	cmp	r0, #0
   15d64:	mov	r1, #0
   15d68:	movweq	r2, #1024	; 0x400
   15d6c:	str	r2, [r4]
   15d70:	str	r1, [r4, #4]
   15d74:	b	15c8c <__assert_fail@plt+0x3fe0>
   15d78:	ldrb	r2, [r0, #-1]
   15d7c:	orr	r1, r5, #384	; 0x180
   15d80:	cmp	r2, #66	; 0x42
   15d84:	mov	r2, r1
   15d88:	orrne	r2, r5, #128	; 0x80
   15d8c:	bne	15da0 <__assert_fail@plt+0x40f4>
   15d90:	ldrb	r0, [r0, #-2]
   15d94:	cmp	r0, #105	; 0x69
   15d98:	orreq	r1, r2, #32
   15d9c:	b	15c8c <__assert_fail@plt+0x3fe0>
   15da0:	orr	r1, r2, #32
   15da4:	b	15c8c <__assert_fail@plt+0x3fe0>
   15da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dac:	add	fp, sp, #28
   15db0:	sub	sp, sp, #388	; 0x184
   15db4:	mov	r5, r1
   15db8:	mov	r9, r0
   15dbc:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   15dc0:	cmp	r0, #2
   15dc4:	str	r5, [sp, #20]
   15dc8:	bcc	15e3c <__assert_fail@plt+0x4190>
   15dcc:	sub	r6, fp, #88	; 0x58
   15dd0:	mov	r7, #0
   15dd4:	mov	r0, r6
   15dd8:	str	r7, [fp, #-80]	; 0xffffffb0
   15ddc:	str	r7, [fp, #-84]	; 0xffffffac
   15de0:	strb	r7, [fp, #-88]	; 0xffffffa8
   15de4:	str	r5, [fp, #-72]	; 0xffffffb8
   15de8:	strb	r7, [fp, #-76]	; 0xffffffb4
   15dec:	bl	175f8 <__assert_fail@plt+0x594c>
   15df0:	ldrb	r5, [fp, #-64]	; 0xffffffc0
   15df4:	ldr	r4, [fp, #-60]	; 0xffffffc4
   15df8:	cmp	r5, #0
   15dfc:	beq	15e08 <__assert_fail@plt+0x415c>
   15e00:	cmp	r4, #0
   15e04:	beq	15ea4 <__assert_fail@plt+0x41f8>
   15e08:	ldr	r0, [sp, #20]
   15e0c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15e10:	str	r7, [fp, #-136]	; 0xffffff78
   15e14:	str	r7, [fp, #-140]	; 0xffffff74
   15e18:	strb	r7, [fp, #-144]	; 0xffffff70
   15e1c:	str	r0, [fp, #-128]	; 0xffffff80
   15e20:	add	r0, r6, #32
   15e24:	strb	r7, [fp, #-132]	; 0xffffff7c
   15e28:	cmp	r1, r0
   15e2c:	beq	1600c <__assert_fail@plt+0x4360>
   15e30:	ldr	r6, [fp, #-68]	; 0xffffffbc
   15e34:	mov	r7, r1
   15e38:	b	16024 <__assert_fail@plt+0x4378>
   15e3c:	ldrb	r4, [r5]
   15e40:	cmp	r4, #0
   15e44:	beq	15ea4 <__assert_fail@plt+0x41f8>
   15e48:	bl	11a90 <__ctype_b_loc@plt>
   15e4c:	ldr	r8, [r0]
   15e50:	str	r0, [sp]
   15e54:	add	r0, r8, r4, lsl #1
   15e58:	ldrb	r0, [r0, #1]
   15e5c:	tst	r0, #1
   15e60:	beq	15e70 <__assert_fail@plt+0x41c4>
   15e64:	bl	11a60 <__ctype_tolower_loc@plt>
   15e68:	ldr	r0, [r0]
   15e6c:	ldrb	r4, [r0, r4, lsl #2]
   15e70:	ldrb	r6, [r9]
   15e74:	cmp	r6, #0
   15e78:	beq	16414 <__assert_fail@plt+0x4768>
   15e7c:	mov	r0, #0
   15e80:	mov	sl, r9
   15e84:	mov	r9, r5
   15e88:	mov	r1, #0
   15e8c:	mov	r7, #0
   15e90:	str	r4, [sp, #8]
   15e94:	str	r0, [sp, #4]
   15e98:	mov	r0, #1
   15e9c:	str	r0, [sp, #12]
   15ea0:	b	15f34 <__assert_fail@plt+0x4288>
   15ea4:	mov	r4, r9
   15ea8:	b	16428 <__assert_fail@plt+0x477c>
   15eac:	ldr	r0, [sp, #12]
   15eb0:	tst	r0, #1
   15eb4:	beq	15f48 <__assert_fail@plt+0x429c>
   15eb8:	cmp	r9, #0
   15ebc:	beq	15eec <__assert_fail@plt+0x4240>
   15ec0:	ldr	r0, [sp, #4]
   15ec4:	mov	r4, r1
   15ec8:	sub	r1, r1, r0
   15ecc:	mov	r0, r9
   15ed0:	bl	11b80 <strnlen@plt>
   15ed4:	ldrb	r0, [r9, r0]!
   15ed8:	str	r4, [sp, #4]
   15edc:	cmp	r0, #0
   15ee0:	beq	15eec <__assert_fail@plt+0x4240>
   15ee4:	str	r4, [sp, #4]
   15ee8:	b	15f48 <__assert_fail@plt+0x429c>
   15eec:	mov	r0, r5
   15ef0:	bl	11ac0 <strlen@plt>
   15ef4:	mov	r2, r0
   15ef8:	mov	r0, sl
   15efc:	mov	r1, r5
   15f00:	sub	r3, fp, #88	; 0x58
   15f04:	mov	r6, sl
   15f08:	bl	168bc <__assert_fail@plt+0x4c10>
   15f0c:	cmp	r0, #0
   15f10:	bne	1643c <__assert_fail@plt+0x4790>
   15f14:	ldr	r1, [sp, #12]
   15f18:	ldrb	r6, [r6]
   15f1c:	mov	r9, #0
   15f20:	and	r1, r1, r0
   15f24:	ldr	r0, [sp]
   15f28:	str	r1, [sp, #12]
   15f2c:	ldr	r8, [r0]
   15f30:	b	15f48 <__assert_fail@plt+0x429c>
   15f34:	add	r0, r7, r7, lsl #2
   15f38:	str	r1, [sp, #16]
   15f3c:	cmp	r1, r0
   15f40:	cmpcs	r7, #10
   15f44:	bcs	15eac <__assert_fail@plt+0x4200>
   15f48:	uxtb	r4, r6
   15f4c:	add	r0, r8, r4, lsl #1
   15f50:	ldrb	r0, [r0, #1]
   15f54:	tst	r0, #1
   15f58:	beq	15f68 <__assert_fail@plt+0x42bc>
   15f5c:	bl	11a60 <__ctype_tolower_loc@plt>
   15f60:	ldr	r0, [r0]
   15f64:	ldr	r4, [r0, r4, lsl #2]
   15f68:	ldr	r0, [sp, #8]
   15f6c:	cmp	r4, r0
   15f70:	bne	15fe4 <__assert_fail@plt+0x4338>
   15f74:	mov	r4, #1
   15f78:	ldrb	r6, [r5, r4]
   15f7c:	cmp	r6, #0
   15f80:	beq	1641c <__assert_fail@plt+0x4770>
   15f84:	ldrb	r5, [sl, r4]
   15f88:	cmp	r5, #0
   15f8c:	beq	16414 <__assert_fail@plt+0x4768>
   15f90:	add	r0, r8, r5, lsl #1
   15f94:	ldrb	r0, [r0, #1]
   15f98:	tst	r0, #1
   15f9c:	beq	15fac <__assert_fail@plt+0x4300>
   15fa0:	bl	11a60 <__ctype_tolower_loc@plt>
   15fa4:	ldr	r0, [r0]
   15fa8:	ldr	r5, [r0, r5, lsl #2]
   15fac:	add	r0, r8, r6, lsl #1
   15fb0:	ldrb	r0, [r0, #1]
   15fb4:	tst	r0, #1
   15fb8:	beq	15fc8 <__assert_fail@plt+0x431c>
   15fbc:	bl	11a60 <__ctype_tolower_loc@plt>
   15fc0:	ldr	r0, [r0]
   15fc4:	ldr	r6, [r0, r6, lsl #2]
   15fc8:	cmp	r5, r6
   15fcc:	ldr	r5, [sp, #20]
   15fd0:	add	r4, r4, #1
   15fd4:	beq	15f78 <__assert_fail@plt+0x42cc>
   15fd8:	ldr	r0, [sp, #16]
   15fdc:	add	r0, r0, r4
   15fe0:	b	15fec <__assert_fail@plt+0x4340>
   15fe4:	ldr	r0, [sp, #16]
   15fe8:	add	r0, r0, #1
   15fec:	str	r0, [sp, #16]
   15ff0:	ldrb	r6, [sl, #1]!
   15ff4:	add	r7, r7, #1
   15ff8:	mov	r4, #0
   15ffc:	ldr	r1, [sp, #16]
   16000:	cmp	r6, #0
   16004:	bne	15f34 <__assert_fail@plt+0x4288>
   16008:	b	16428 <__assert_fail@plt+0x477c>
   1600c:	ldr	r6, [fp, #-68]	; 0xffffffbc
   16010:	sub	r0, fp, #184	; 0xb8
   16014:	add	r7, r0, #16
   16018:	mov	r0, r7
   1601c:	mov	r2, r6
   16020:	bl	118ec <memcpy@plt>
   16024:	cmp	r5, #0
   16028:	str	r6, [fp, #-180]	; 0xffffff4c
   1602c:	str	r7, [fp, #-184]	; 0xffffff48
   16030:	strb	r5, [fp, #-176]	; 0xffffff50
   16034:	beq	16048 <__assert_fail@plt+0x439c>
   16038:	mov	r0, r4
   1603c:	str	r4, [fp, #-172]	; 0xffffff54
   16040:	bl	11910 <towlower@plt>
   16044:	str	r0, [fp, #-172]	; 0xffffff54
   16048:	mov	r4, #0
   1604c:	add	r0, sp, #176	; 0xb0
   16050:	str	r4, [sp, #184]	; 0xb8
   16054:	str	r4, [sp, #180]	; 0xb4
   16058:	strb	r4, [sp, #176]	; 0xb0
   1605c:	str	r9, [sp, #192]	; 0xc0
   16060:	strb	r4, [sp, #188]	; 0xbc
   16064:	bl	175f8 <__assert_fail@plt+0x594c>
   16068:	ldrb	r0, [sp, #200]	; 0xc8
   1606c:	cmp	r0, #0
   16070:	beq	16080 <__assert_fail@plt+0x43d4>
   16074:	ldr	r0, [sp, #204]	; 0xcc
   16078:	cmp	r0, #0
   1607c:	beq	16428 <__assert_fail@plt+0x477c>
   16080:	add	r0, sp, #24
   16084:	mov	r7, #0
   16088:	sub	r5, fp, #144	; 0x90
   1608c:	mov	r1, #0
   16090:	mov	r8, #0
   16094:	add	r0, r0, #4
   16098:	str	r0, [sp]
   1609c:	add	r0, sp, #136	; 0x88
   160a0:	add	sl, r0, #16
   160a4:	add	r0, sp, #176	; 0xb0
   160a8:	add	r0, r0, #32
   160ac:	str	r0, [sp, #16]
   160b0:	mov	r0, #1
   160b4:	str	r0, [sp, #4]
   160b8:	mov	r0, #0
   160bc:	str	r0, [sp, #8]
   160c0:	add	r0, r1, r1, lsl #2
   160c4:	mov	r6, r8
   160c8:	str	r1, [sp, #12]
   160cc:	cmp	r8, r0
   160d0:	bcc	16184 <__assert_fail@plt+0x44d8>
   160d4:	ldr	r0, [sp, #4]
   160d8:	tst	r0, #1
   160dc:	beq	16184 <__assert_fail@plt+0x44d8>
   160e0:	cmp	r1, #10
   160e4:	bcc	16184 <__assert_fail@plt+0x44d8>
   160e8:	ldr	r1, [sp, #8]
   160ec:	subs	r0, r6, r1
   160f0:	beq	16134 <__assert_fail@plt+0x4488>
   160f4:	sub	r4, r1, r6
   160f8:	mov	r0, r5
   160fc:	bl	175f8 <__assert_fail@plt+0x594c>
   16100:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16104:	cmp	r0, #0
   16108:	beq	16118 <__assert_fail@plt+0x446c>
   1610c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16110:	cmp	r0, #0
   16114:	beq	16134 <__assert_fail@plt+0x4488>
   16118:	strb	r7, [fp, #-132]	; 0xffffff7c
   1611c:	adds	r4, r4, #1
   16120:	ldr	r0, [fp, #-128]	; 0xffffff80
   16124:	ldr	r1, [fp, #-124]	; 0xffffff84
   16128:	add	r0, r0, r1
   1612c:	str	r0, [fp, #-128]	; 0xffffff80
   16130:	bne	160f8 <__assert_fail@plt+0x444c>
   16134:	mov	r0, r5
   16138:	bl	175f8 <__assert_fail@plt+0x594c>
   1613c:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16140:	cmp	r0, #0
   16144:	beq	16180 <__assert_fail@plt+0x44d4>
   16148:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1614c:	str	r6, [sp, #8]
   16150:	cmp	r0, #0
   16154:	bne	16184 <__assert_fail@plt+0x44d8>
   16158:	ldr	r1, [sp, #20]
   1615c:	mov	r0, r9
   16160:	add	r2, sp, #80	; 0x50
   16164:	bl	16448 <__assert_fail@plt+0x479c>
   16168:	mov	r1, #0
   1616c:	cmp	r0, #0
   16170:	str	r6, [sp, #8]
   16174:	str	r1, [sp, #4]
   16178:	beq	16184 <__assert_fail@plt+0x44d8>
   1617c:	b	16434 <__assert_fail@plt+0x4788>
   16180:	str	r6, [sp, #8]
   16184:	ldr	r0, [sp, #192]	; 0xc0
   16188:	ldr	r1, [sp, #16]
   1618c:	ldr	r4, [sp, #196]	; 0xc4
   16190:	cmp	r0, r1
   16194:	bne	161ac <__assert_fail@plt+0x4500>
   16198:	ldr	r1, [sp, #16]
   1619c:	mov	r0, sl
   161a0:	mov	r2, r4
   161a4:	bl	118ec <memcpy@plt>
   161a8:	mov	r0, sl
   161ac:	str	r4, [sp, #140]	; 0x8c
   161b0:	str	r0, [sp, #136]	; 0x88
   161b4:	ldrb	r0, [sp, #200]	; 0xc8
   161b8:	add	r8, r6, #1
   161bc:	cmp	r0, #0
   161c0:	strb	r0, [sp, #144]	; 0x90
   161c4:	beq	161ec <__assert_fail@plt+0x4540>
   161c8:	ldr	r0, [sp, #204]	; 0xcc
   161cc:	str	r0, [sp, #148]	; 0x94
   161d0:	bl	11910 <towlower@plt>
   161d4:	str	r0, [sp, #148]	; 0x94
   161d8:	ldrb	r0, [sp, #144]	; 0x90
   161dc:	cmp	r0, #0
   161e0:	ldrbne	r0, [fp, #-176]	; 0xffffff50
   161e4:	cmpne	r0, #0
   161e8:	bne	16214 <__assert_fail@plt+0x4568>
   161ec:	ldr	r2, [sp, #140]	; 0x8c
   161f0:	ldr	r0, [fp, #-180]	; 0xffffff4c
   161f4:	cmp	r2, r0
   161f8:	bne	163cc <__assert_fail@plt+0x4720>
   161fc:	ldr	r1, [fp, #-184]	; 0xffffff48
   16200:	ldr	r0, [sp, #136]	; 0x88
   16204:	bl	11934 <memcmp@plt>
   16208:	cmp	r0, #0
   1620c:	bne	163cc <__assert_fail@plt+0x4720>
   16210:	b	16224 <__assert_fail@plt+0x4578>
   16214:	ldr	r0, [fp, #-172]	; 0xffffff54
   16218:	ldr	r1, [sp, #148]	; 0x94
   1621c:	cmp	r1, r0
   16220:	bne	163cc <__assert_fail@plt+0x4720>
   16224:	add	r1, sp, #176	; 0xb0
   16228:	mov	r2, #48	; 0x30
   1622c:	add	r3, sp, #80	; 0x50
   16230:	add	r0, r1, #16
   16234:	vld1.64	{d16-d17}, [r1], r2
   16238:	ldr	r2, [sp, #16]
   1623c:	vld1.64	{d18-d19}, [r0]
   16240:	add	r0, r3, #16
   16244:	vld1.64	{d20-d21}, [r2]
   16248:	vldr	d22, [r1]
   1624c:	mov	r1, #12
   16250:	vst1.64	{d18-d19}, [r0]
   16254:	add	r0, r3, #32
   16258:	vst1.64	{d20-d21}, [r0]
   1625c:	mov	r0, r3
   16260:	vst1.64	{d16-d17}, [r0], r1
   16264:	strb	r7, [r0]
   16268:	ldr	r0, [sp, #20]
   1626c:	vstr	d22, [sp, #128]	; 0x80
   16270:	ldr	r1, [sp, #100]	; 0x64
   16274:	str	r0, [sp, #40]	; 0x28
   16278:	ldr	r0, [sp, #96]	; 0x60
   1627c:	strb	r7, [sp, #24]
   16280:	add	r0, r0, r1
   16284:	str	r0, [sp, #96]	; 0x60
   16288:	ldr	r0, [sp]
   1628c:	str	r7, [r0]
   16290:	str	r7, [r0, #4]
   16294:	add	r0, sp, #24
   16298:	strb	r7, [sp, #36]	; 0x24
   1629c:	bl	175f8 <__assert_fail@plt+0x594c>
   162a0:	ldrb	r0, [sp, #48]	; 0x30
   162a4:	cmp	r0, #0
   162a8:	beq	162b8 <__assert_fail@plt+0x460c>
   162ac:	ldr	r0, [sp, #52]	; 0x34
   162b0:	cmp	r0, #0
   162b4:	beq	16444 <__assert_fail@plt+0x4798>
   162b8:	strb	r7, [sp, #36]	; 0x24
   162bc:	mov	r5, sl
   162c0:	ldr	r0, [sp, #40]	; 0x28
   162c4:	ldr	r1, [sp, #44]	; 0x2c
   162c8:	add	r0, r0, r1
   162cc:	str	r0, [sp, #40]	; 0x28
   162d0:	add	r0, sp, #24
   162d4:	bl	175f8 <__assert_fail@plt+0x594c>
   162d8:	ldrb	r0, [sp, #48]	; 0x30
   162dc:	cmp	r0, #0
   162e0:	beq	162f0 <__assert_fail@plt+0x4644>
   162e4:	ldr	r0, [sp, #52]	; 0x34
   162e8:	cmp	r0, #0
   162ec:	beq	16424 <__assert_fail@plt+0x4778>
   162f0:	add	r8, r6, #2
   162f4:	add	r0, sp, #80	; 0x50
   162f8:	bl	175f8 <__assert_fail@plt+0x594c>
   162fc:	ldr	r0, [sp, #108]	; 0x6c
   16300:	ldrb	r1, [sp, #104]	; 0x68
   16304:	cmp	r0, #0
   16308:	bne	16314 <__assert_fail@plt+0x4668>
   1630c:	cmp	r1, #0
   16310:	bne	16414 <__assert_fail@plt+0x4768>
   16314:	cmp	r1, #0
   16318:	ldrbne	r1, [sp, #48]	; 0x30
   1631c:	cmpne	r1, #0
   16320:	bne	1635c <__assert_fail@plt+0x46b0>
   16324:	ldr	r4, [sp, #100]	; 0x64
   16328:	ldr	r0, [sp, #44]	; 0x2c
   1632c:	cmp	r4, r0
   16330:	bne	163c4 <__assert_fail@plt+0x4718>
   16334:	ldr	sl, [sp, #40]	; 0x28
   16338:	ldr	r6, [sp, #96]	; 0x60
   1633c:	mov	r2, r4
   16340:	mov	r0, r6
   16344:	mov	r1, sl
   16348:	bl	11934 <memcmp@plt>
   1634c:	cmp	r0, #0
   16350:	mov	r0, r4
   16354:	beq	16384 <__assert_fail@plt+0x46d8>
   16358:	b	163c4 <__assert_fail@plt+0x4718>
   1635c:	bl	11910 <towlower@plt>
   16360:	mov	r4, r0
   16364:	ldr	r0, [sp, #52]	; 0x34
   16368:	bl	11910 <towlower@plt>
   1636c:	cmp	r4, r0
   16370:	bne	163c4 <__assert_fail@plt+0x4718>
   16374:	ldr	sl, [sp, #40]	; 0x28
   16378:	ldr	r4, [sp, #44]	; 0x2c
   1637c:	ldr	r6, [sp, #96]	; 0x60
   16380:	ldr	r0, [sp, #100]	; 0x64
   16384:	add	r0, r6, r0
   16388:	strb	r7, [sp, #92]	; 0x5c
   1638c:	strb	r7, [sp, #36]	; 0x24
   16390:	str	r0, [sp, #96]	; 0x60
   16394:	add	r0, sl, r4
   16398:	str	r0, [sp, #40]	; 0x28
   1639c:	add	r0, sp, #24
   163a0:	bl	175f8 <__assert_fail@plt+0x594c>
   163a4:	ldrb	r0, [sp, #48]	; 0x30
   163a8:	add	r8, r8, #1
   163ac:	cmp	r0, #0
   163b0:	beq	162f4 <__assert_fail@plt+0x4648>
   163b4:	ldr	r0, [sp, #52]	; 0x34
   163b8:	cmp	r0, #0
   163bc:	bne	162f4 <__assert_fail@plt+0x4648>
   163c0:	b	16424 <__assert_fail@plt+0x4778>
   163c4:	mov	sl, r5
   163c8:	sub	r5, fp, #144	; 0x90
   163cc:	mov	r4, #0
   163d0:	ldr	r6, [sp, #12]
   163d4:	strb	r4, [sp, #188]	; 0xbc
   163d8:	ldr	r0, [sp, #192]	; 0xc0
   163dc:	ldr	r1, [sp, #196]	; 0xc4
   163e0:	add	r6, r6, #1
   163e4:	add	r0, r0, r1
   163e8:	str	r0, [sp, #192]	; 0xc0
   163ec:	add	r0, sp, #176	; 0xb0
   163f0:	bl	175f8 <__assert_fail@plt+0x594c>
   163f4:	ldrb	r0, [sp, #200]	; 0xc8
   163f8:	mov	r1, r6
   163fc:	cmp	r0, #0
   16400:	beq	160c0 <__assert_fail@plt+0x4414>
   16404:	ldr	r0, [sp, #204]	; 0xcc
   16408:	cmp	r0, #0
   1640c:	bne	160c0 <__assert_fail@plt+0x4414>
   16410:	b	16428 <__assert_fail@plt+0x477c>
   16414:	mov	r4, #0
   16418:	b	16428 <__assert_fail@plt+0x477c>
   1641c:	mov	r4, sl
   16420:	b	16428 <__assert_fail@plt+0x477c>
   16424:	ldr	r4, [sp, #192]	; 0xc0
   16428:	mov	r0, r4
   1642c:	sub	sp, fp, #28
   16430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16434:	ldr	r4, [sp, #80]	; 0x50
   16438:	b	16428 <__assert_fail@plt+0x477c>
   1643c:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16440:	b	16428 <__assert_fail@plt+0x477c>
   16444:	bl	11c70 <abort@plt>
   16448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1644c:	add	fp, sp, #28
   16450:	sub	sp, sp, #180	; 0xb4
   16454:	mov	r7, r0
   16458:	mov	r0, r1
   1645c:	mov	sl, r2
   16460:	mov	r4, r1
   16464:	bl	16acc <__assert_fail@plt+0x4e20>
   16468:	mov	r6, r0
   1646c:	movw	r0, #47662	; 0xba2e
   16470:	mov	r5, #0
   16474:	movt	r0, #744	; 0x2e8
   16478:	cmp	r6, r0
   1647c:	bhi	168ac <__assert_fail@plt+0x4c00>
   16480:	mov	r0, #44	; 0x2c
   16484:	mul	r0, r6, r0
   16488:	cmp	r0, #4016	; 0xfb0
   1648c:	bhi	164b4 <__assert_fail@plt+0x4808>
   16490:	add	r0, r0, #22
   16494:	bic	r0, r0, #7
   16498:	sub	r0, sp, r0
   1649c:	add	r1, r0, #15
   164a0:	bic	r8, r1, #15
   164a4:	mov	sp, r0
   164a8:	cmp	r8, #0
   164ac:	bne	164c4 <__assert_fail@plt+0x4818>
   164b0:	b	168ac <__assert_fail@plt+0x4c00>
   164b4:	bl	2e6bc <__assert_fail@plt+0x1ca10>
   164b8:	mov	r8, r0
   164bc:	cmp	r8, #0
   164c0:	beq	168ac <__assert_fail@plt+0x4c00>
   164c4:	mov	r9, #0
   164c8:	str	r7, [fp, #-196]	; 0xffffff3c
   164cc:	str	r9, [fp, #-80]	; 0xffffffb0
   164d0:	str	r9, [fp, #-84]	; 0xffffffac
   164d4:	strb	r9, [fp, #-88]	; 0xffffffa8
   164d8:	str	r4, [fp, #-72]	; 0xffffffb8
   164dc:	sub	r4, fp, #88	; 0x58
   164e0:	strb	r9, [fp, #-76]	; 0xffffffb4
   164e4:	mov	r0, r4
   164e8:	bl	175f8 <__assert_fail@plt+0x594c>
   164ec:	add	r0, r6, r6, lsl #2
   164f0:	add	r3, r8, r0, lsl #3
   164f4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   164f8:	str	r3, [fp, #-188]	; 0xffffff44
   164fc:	cmp	r0, #0
   16500:	beq	16510 <__assert_fail@plt+0x4864>
   16504:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16508:	cmp	r0, #0
   1650c:	beq	165a0 <__assert_fail@plt+0x48f4>
   16510:	add	r7, r8, #16
   16514:	add	r5, r4, #32
   16518:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1651c:	cmp	r0, r5
   16520:	bne	16538 <__assert_fail@plt+0x488c>
   16524:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16528:	mov	r0, r7
   1652c:	mov	r1, r5
   16530:	bl	118ec <memcpy@plt>
   16534:	mov	r0, r7
   16538:	str	r0, [r7, #-16]
   1653c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16540:	str	r0, [r7, #-12]
   16544:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16548:	cmp	r0, #0
   1654c:	strb	r0, [r7, #-8]
   16550:	beq	16564 <__assert_fail@plt+0x48b8>
   16554:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16558:	str	r0, [r7, #-4]
   1655c:	bl	11910 <towlower@plt>
   16560:	str	r0, [r7, #-4]
   16564:	strb	r9, [fp, #-76]	; 0xffffffb4
   16568:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1656c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16570:	add	r0, r0, r1
   16574:	str	r0, [fp, #-72]	; 0xffffffb8
   16578:	mov	r0, r4
   1657c:	bl	175f8 <__assert_fail@plt+0x594c>
   16580:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16584:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16588:	ldr	r3, [fp, #-188]	; 0xffffff44
   1658c:	add	r7, r7, #40	; 0x28
   16590:	cmp	r1, #0
   16594:	beq	16518 <__assert_fail@plt+0x486c>
   16598:	cmp	r0, #0
   1659c:	bne	16518 <__assert_fail@plt+0x486c>
   165a0:	mov	r0, #1
   165a4:	cmp	r6, #3
   165a8:	str	sl, [fp, #-204]	; 0xffffff34
   165ac:	str	r6, [fp, #-192]	; 0xffffff40
   165b0:	str	r0, [r3, #4]
   165b4:	bcc	1667c <__assert_fail@plt+0x49d0>
   165b8:	mov	r4, #2
   165bc:	mov	r5, #0
   165c0:	add	r0, r4, r4, lsl #2
   165c4:	add	r0, r8, r0, lsl #3
   165c8:	ldrb	sl, [r0, #-32]	; 0xffffffe0
   165cc:	sub	r7, r0, #28
   165d0:	sub	r9, r0, #40	; 0x28
   165d4:	sub	r6, r0, #36	; 0x24
   165d8:	cmp	sl, #0
   165dc:	bne	165f4 <__assert_fail@plt+0x4948>
   165e0:	b	1661c <__assert_fail@plt+0x4970>
   165e4:	ldr	r0, [r3, r5, lsl #2]
   165e8:	sub	r5, r5, r0
   165ec:	cmp	sl, #0
   165f0:	beq	1661c <__assert_fail@plt+0x4970>
   165f4:	add	r0, r5, r5, lsl #2
   165f8:	add	r0, r8, r0, lsl #3
   165fc:	ldrb	r1, [r0, #8]
   16600:	cmp	r1, #0
   16604:	beq	1661c <__assert_fail@plt+0x4970>
   16608:	ldr	r0, [r0, #12]
   1660c:	ldr	r1, [r7]
   16610:	cmp	r1, r0
   16614:	bne	1664c <__assert_fail@plt+0x49a0>
   16618:	b	16660 <__assert_fail@plt+0x49b4>
   1661c:	add	r0, r5, r5, lsl #2
   16620:	ldr	r2, [r6]
   16624:	add	r1, r8, r0, lsl #3
   16628:	ldr	r1, [r1, #4]
   1662c:	cmp	r2, r1
   16630:	bne	1664c <__assert_fail@plt+0x49a0>
   16634:	ldr	r1, [r8, r0, lsl #3]
   16638:	ldr	r0, [r9]
   1663c:	bl	11934 <memcmp@plt>
   16640:	ldr	r3, [fp, #-188]	; 0xffffff44
   16644:	cmp	r0, #0
   16648:	beq	16660 <__assert_fail@plt+0x49b4>
   1664c:	cmp	r5, #0
   16650:	bne	165e4 <__assert_fail@plt+0x4938>
   16654:	mov	r5, #0
   16658:	mov	r0, r4
   1665c:	b	16668 <__assert_fail@plt+0x49bc>
   16660:	add	r5, r5, #1
   16664:	sub	r0, r4, r5
   16668:	str	r0, [r3, r4, lsl #2]
   1666c:	ldr	r0, [fp, #-192]	; 0xffffff40
   16670:	add	r4, r4, #1
   16674:	cmp	r4, r0
   16678:	bne	165c0 <__assert_fail@plt+0x4914>
   1667c:	ldr	r0, [fp, #-204]	; 0xffffff34
   16680:	mov	r1, #0
   16684:	str	r1, [r0]
   16688:	ldr	r0, [fp, #-196]	; 0xffffff3c
   1668c:	str	r1, [fp, #-80]	; 0xffffffb0
   16690:	str	r1, [fp, #-84]	; 0xffffffac
   16694:	strb	r1, [fp, #-88]	; 0xffffffa8
   16698:	str	r1, [fp, #-136]	; 0xffffff78
   1669c:	str	r1, [fp, #-140]	; 0xffffff74
   166a0:	str	r0, [fp, #-72]	; 0xffffffb8
   166a4:	str	r0, [fp, #-128]	; 0xffffff80
   166a8:	sub	r0, fp, #144	; 0x90
   166ac:	strb	r1, [fp, #-144]	; 0xffffff70
   166b0:	strb	r1, [fp, #-76]	; 0xffffffb4
   166b4:	strb	r1, [fp, #-132]	; 0xffffff7c
   166b8:	bl	175f8 <__assert_fail@plt+0x594c>
   166bc:	ldrb	r9, [fp, #-120]	; 0xffffff88
   166c0:	ldr	r6, [fp, #-116]	; 0xffffff8c
   166c4:	cmp	r9, #0
   166c8:	beq	166d4 <__assert_fail@plt+0x4a28>
   166cc:	cmp	r6, #0
   166d0:	beq	168a0 <__assert_fail@plt+0x4bf4>
   166d4:	sub	r0, fp, #184	; 0xb8
   166d8:	sub	r4, fp, #88	; 0x58
   166dc:	mov	r7, #0
   166e0:	add	r0, r0, #16
   166e4:	str	r0, [fp, #-200]	; 0xffffff38
   166e8:	sub	r0, fp, #144	; 0x90
   166ec:	add	r0, r0, #32
   166f0:	str	r0, [fp, #-196]	; 0xffffff3c
   166f4:	ldr	sl, [fp, #-128]	; 0xffffff80
   166f8:	ldr	r1, [fp, #-196]	; 0xffffff3c
   166fc:	ldr	r5, [fp, #-124]	; 0xffffff84
   16700:	cmp	sl, r1
   16704:	bne	1671c <__assert_fail@plt+0x4a70>
   16708:	ldr	sl, [fp, #-200]	; 0xffffff38
   1670c:	ldr	r1, [fp, #-196]	; 0xffffff3c
   16710:	mov	r2, r5
   16714:	mov	r0, sl
   16718:	bl	118ec <memcpy@plt>
   1671c:	tst	r9, #255	; 0xff
   16720:	str	r5, [fp, #-180]	; 0xffffff4c
   16724:	str	sl, [fp, #-184]	; 0xffffff48
   16728:	strb	r9, [fp, #-176]	; 0xffffff50
   1672c:	beq	1675c <__assert_fail@plt+0x4ab0>
   16730:	mov	r0, r6
   16734:	str	r6, [fp, #-172]	; 0xffffff54
   16738:	bl	11910 <towlower@plt>
   1673c:	str	r0, [fp, #-172]	; 0xffffff54
   16740:	add	r0, r7, r7, lsl #2
   16744:	add	r0, r8, r0, lsl #3
   16748:	ldrb	r1, [r0, #8]
   1674c:	cmp	r1, #0
   16750:	ldrbne	r1, [fp, #-176]	; 0xffffff50
   16754:	cmpne	r1, #0
   16758:	bne	16838 <__assert_fail@plt+0x4b8c>
   1675c:	add	r0, r7, r7, lsl #2
   16760:	add	r1, r8, r0, lsl #3
   16764:	ldr	r2, [r1, #4]
   16768:	ldr	r1, [fp, #-180]	; 0xffffff4c
   1676c:	cmp	r2, r1
   16770:	bne	16788 <__assert_fail@plt+0x4adc>
   16774:	ldr	r0, [r8, r0, lsl #3]
   16778:	ldr	r1, [fp, #-184]	; 0xffffff48
   1677c:	bl	11934 <memcmp@plt>
   16780:	cmp	r0, #0
   16784:	beq	16848 <__assert_fail@plt+0x4b9c>
   16788:	cmp	r7, #0
   1678c:	mov	r6, #0
   16790:	beq	167e8 <__assert_fail@plt+0x4b3c>
   16794:	ldr	r0, [fp, #-188]	; 0xffffff44
   16798:	ldr	r5, [r0, r7, lsl #2]
   1679c:	sub	r7, r7, r5
   167a0:	cmp	r5, #0
   167a4:	beq	16870 <__assert_fail@plt+0x4bc4>
   167a8:	mov	r0, r4
   167ac:	bl	175f8 <__assert_fail@plt+0x594c>
   167b0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   167b4:	cmp	r0, #0
   167b8:	beq	167c8 <__assert_fail@plt+0x4b1c>
   167bc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   167c0:	cmp	r0, #0
   167c4:	beq	168b8 <__assert_fail@plt+0x4c0c>
   167c8:	strb	r6, [fp, #-76]	; 0xffffffb4
   167cc:	subs	r5, r5, #1
   167d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   167d4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   167d8:	add	r0, r0, r1
   167dc:	str	r0, [fp, #-72]	; 0xffffffb8
   167e0:	bne	167a8 <__assert_fail@plt+0x4afc>
   167e4:	b	16870 <__assert_fail@plt+0x4bc4>
   167e8:	mov	r0, r4
   167ec:	bl	175f8 <__assert_fail@plt+0x594c>
   167f0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   167f4:	cmp	r0, #0
   167f8:	beq	16808 <__assert_fail@plt+0x4b5c>
   167fc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16800:	cmp	r0, #0
   16804:	beq	168b8 <__assert_fail@plt+0x4c0c>
   16808:	mov	r7, #0
   1680c:	strb	r7, [fp, #-76]	; 0xffffffb4
   16810:	strb	r7, [fp, #-132]	; 0xffffff7c
   16814:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16818:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1681c:	add	r0, r0, r1
   16820:	ldr	r1, [fp, #-124]	; 0xffffff84
   16824:	str	r0, [fp, #-72]	; 0xffffffb8
   16828:	ldr	r0, [fp, #-128]	; 0xffffff80
   1682c:	add	r0, r0, r1
   16830:	str	r0, [fp, #-128]	; 0xffffff80
   16834:	b	16870 <__assert_fail@plt+0x4bc4>
   16838:	ldr	r0, [r0, #12]
   1683c:	ldr	r1, [fp, #-172]	; 0xffffff54
   16840:	cmp	r0, r1
   16844:	bne	16788 <__assert_fail@plt+0x4adc>
   16848:	mov	r0, #0
   1684c:	add	r7, r7, #1
   16850:	strb	r0, [fp, #-132]	; 0xffffff7c
   16854:	ldr	r0, [fp, #-128]	; 0xffffff80
   16858:	ldr	r1, [fp, #-124]	; 0xffffff84
   1685c:	add	r0, r0, r1
   16860:	str	r0, [fp, #-128]	; 0xffffff80
   16864:	ldr	r0, [fp, #-192]	; 0xffffff40
   16868:	cmp	r7, r0
   1686c:	beq	16894 <__assert_fail@plt+0x4be8>
   16870:	sub	r0, fp, #144	; 0x90
   16874:	bl	175f8 <__assert_fail@plt+0x594c>
   16878:	ldrb	r9, [fp, #-120]	; 0xffffff88
   1687c:	ldr	r6, [fp, #-116]	; 0xffffff8c
   16880:	cmp	r9, #0
   16884:	beq	166f4 <__assert_fail@plt+0x4a48>
   16888:	cmp	r6, #0
   1688c:	bne	166f4 <__assert_fail@plt+0x4a48>
   16890:	b	168a0 <__assert_fail@plt+0x4bf4>
   16894:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16898:	ldr	r1, [fp, #-204]	; 0xffffff34
   1689c:	str	r0, [r1]
   168a0:	mov	r0, r8
   168a4:	bl	2e72c <__assert_fail@plt+0x1ca80>
   168a8:	mov	r5, #1
   168ac:	mov	r0, r5
   168b0:	sub	sp, fp, #28
   168b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168b8:	bl	11c70 <abort@plt>
   168bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168c0:	add	fp, sp, #28
   168c4:	sub	sp, sp, #28
   168c8:	mov	r4, #0
   168cc:	cmn	r2, #-536870911	; 0xe0000001
   168d0:	bhi	16ac0 <__assert_fail@plt+0x4e14>
   168d4:	str	r0, [fp, #-48]	; 0xffffffd0
   168d8:	lsl	r0, r2, #2
   168dc:	mov	r5, r3
   168e0:	mov	r8, r2
   168e4:	mov	r9, r1
   168e8:	cmp	r0, #4016	; 0xfb0
   168ec:	bhi	16914 <__assert_fail@plt+0x4c68>
   168f0:	add	r0, r0, #22
   168f4:	bic	r0, r0, #7
   168f8:	sub	r0, sp, r0
   168fc:	add	r1, r0, #15
   16900:	bic	sl, r1, #15
   16904:	mov	sp, r0
   16908:	cmp	sl, #0
   1690c:	bne	16924 <__assert_fail@plt+0x4c78>
   16910:	b	16ac0 <__assert_fail@plt+0x4e14>
   16914:	bl	2e6bc <__assert_fail@plt+0x1ca10>
   16918:	mov	sl, r0
   1691c:	cmp	sl, #0
   16920:	beq	16ac0 <__assert_fail@plt+0x4e14>
   16924:	mov	r0, #1
   16928:	cmp	r8, #3
   1692c:	str	r5, [fp, #-52]	; 0xffffffcc
   16930:	str	r0, [sl, #4]
   16934:	bcc	169d4 <__assert_fail@plt+0x4d28>
   16938:	bl	11a90 <__ctype_b_loc@plt>
   1693c:	ldr	r5, [r0]
   16940:	mov	r4, #0
   16944:	mov	r7, #2
   16948:	str	r8, [fp, #-36]	; 0xffffffdc
   1694c:	add	r0, r9, r7
   16950:	ldrb	r6, [r0, #-1]
   16954:	add	r0, r5, r6, lsl #1
   16958:	ldrb	r0, [r0, #1]
   1695c:	tst	r0, #1
   16960:	beq	1697c <__assert_fail@plt+0x4cd0>
   16964:	bl	11a60 <__ctype_tolower_loc@plt>
   16968:	ldr	r0, [r0]
   1696c:	ldrb	r6, [r0, r6, lsl #2]
   16970:	b	1697c <__assert_fail@plt+0x4cd0>
   16974:	ldr	r0, [sl, r4, lsl #2]
   16978:	sub	r4, r4, r0
   1697c:	ldrb	r8, [r9, r4]
   16980:	add	r0, r5, r8, lsl #1
   16984:	ldrb	r0, [r0, #1]
   16988:	tst	r0, #1
   1698c:	beq	1699c <__assert_fail@plt+0x4cf0>
   16990:	bl	11a60 <__ctype_tolower_loc@plt>
   16994:	ldr	r0, [r0]
   16998:	ldr	r8, [r0, r8, lsl #2]
   1699c:	cmp	r6, r8
   169a0:	beq	169b8 <__assert_fail@plt+0x4d0c>
   169a4:	cmp	r4, #0
   169a8:	bne	16974 <__assert_fail@plt+0x4cc8>
   169ac:	mov	r4, #0
   169b0:	mov	r0, r7
   169b4:	b	169c0 <__assert_fail@plt+0x4d14>
   169b8:	add	r4, r4, #1
   169bc:	sub	r0, r7, r4
   169c0:	ldr	r8, [fp, #-36]	; 0xffffffdc
   169c4:	str	r0, [sl, r7, lsl #2]
   169c8:	add	r7, r7, #1
   169cc:	cmp	r7, r8
   169d0:	bne	1694c <__assert_fail@plt+0x4ca0>
   169d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   169d8:	ldr	r7, [fp, #-48]	; 0xffffffd0
   169dc:	mov	r5, #0
   169e0:	str	r5, [r0]
   169e4:	ldrb	r6, [r7]
   169e8:	cmp	r6, #0
   169ec:	beq	16ab4 <__assert_fail@plt+0x4e08>
   169f0:	bl	11a90 <__ctype_b_loc@plt>
   169f4:	ldr	r1, [r0]
   169f8:	str	r7, [fp, #-40]	; 0xffffffd8
   169fc:	str	r1, [fp, #-44]	; 0xffffffd4
   16a00:	ldrb	r4, [r9, r5]
   16a04:	add	r0, r1, r4, lsl #1
   16a08:	ldrb	r0, [r0, #1]
   16a0c:	tst	r0, #1
   16a10:	beq	16a24 <__assert_fail@plt+0x4d78>
   16a14:	bl	11a60 <__ctype_tolower_loc@plt>
   16a18:	ldr	r0, [r0]
   16a1c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16a20:	ldr	r4, [r0, r4, lsl #2]
   16a24:	uxtb	r6, r6
   16a28:	add	r0, r1, r6, lsl #1
   16a2c:	ldrb	r0, [r0, #1]
   16a30:	tst	r0, #1
   16a34:	beq	16a48 <__assert_fail@plt+0x4d9c>
   16a38:	bl	11a60 <__ctype_tolower_loc@plt>
   16a3c:	ldr	r0, [r0]
   16a40:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16a44:	ldr	r6, [r0, r6, lsl #2]
   16a48:	cmp	r4, r6
   16a4c:	bne	16a64 <__assert_fail@plt+0x4db8>
   16a50:	add	r5, r5, #1
   16a54:	cmp	r5, r8
   16a58:	beq	16aa8 <__assert_fail@plt+0x4dfc>
   16a5c:	add	r7, r7, #1
   16a60:	b	16a98 <__assert_fail@plt+0x4dec>
   16a64:	cmp	r5, #0
   16a68:	beq	16a84 <__assert_fail@plt+0x4dd8>
   16a6c:	ldr	r0, [sl, r5, lsl #2]
   16a70:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16a74:	add	r2, r2, r0
   16a78:	sub	r5, r5, r0
   16a7c:	str	r2, [fp, #-40]	; 0xffffffd8
   16a80:	b	16a98 <__assert_fail@plt+0x4dec>
   16a84:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16a88:	add	r7, r7, #1
   16a8c:	mov	r5, #0
   16a90:	add	r0, r0, #1
   16a94:	str	r0, [fp, #-40]	; 0xffffffd8
   16a98:	ldrb	r6, [r7]
   16a9c:	cmp	r6, #0
   16aa0:	bne	16a00 <__assert_fail@plt+0x4d54>
   16aa4:	b	16ab4 <__assert_fail@plt+0x4e08>
   16aa8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16aac:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16ab0:	str	r1, [r0]
   16ab4:	mov	r0, sl
   16ab8:	bl	2e72c <__assert_fail@plt+0x1ca80>
   16abc:	mov	r4, #1
   16ac0:	mov	r0, r4
   16ac4:	sub	sp, fp, #28
   16ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16acc:	push	{r4, r5, r6, sl, fp, lr}
   16ad0:	add	fp, sp, #16
   16ad4:	sub	sp, sp, #56	; 0x38
   16ad8:	mov	r5, r0
   16adc:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   16ae0:	cmp	r0, #2
   16ae4:	bcc	16b70 <__assert_fail@plt+0x4ec4>
   16ae8:	mov	r4, #0
   16aec:	mov	r0, sp
   16af0:	str	r4, [sp, #8]
   16af4:	str	r4, [sp, #4]
   16af8:	strb	r4, [sp]
   16afc:	str	r5, [sp, #16]
   16b00:	strb	r4, [sp, #12]
   16b04:	bl	175f8 <__assert_fail@plt+0x594c>
   16b08:	ldrb	r0, [sp, #24]
   16b0c:	cmp	r0, #0
   16b10:	beq	16b20 <__assert_fail@plt+0x4e74>
   16b14:	ldr	r0, [sp, #28]
   16b18:	cmp	r0, #0
   16b1c:	beq	16b64 <__assert_fail@plt+0x4eb8>
   16b20:	mov	r6, #0
   16b24:	mov	r5, sp
   16b28:	mov	r4, #0
   16b2c:	strb	r6, [sp, #12]
   16b30:	ldr	r0, [sp, #16]
   16b34:	ldr	r1, [sp, #20]
   16b38:	add	r0, r0, r1
   16b3c:	str	r0, [sp, #16]
   16b40:	mov	r0, r5
   16b44:	bl	175f8 <__assert_fail@plt+0x594c>
   16b48:	ldrb	r1, [sp, #24]
   16b4c:	ldr	r0, [sp, #28]
   16b50:	add	r4, r4, #1
   16b54:	cmp	r1, #0
   16b58:	beq	16b2c <__assert_fail@plt+0x4e80>
   16b5c:	cmp	r0, #0
   16b60:	bne	16b2c <__assert_fail@plt+0x4e80>
   16b64:	mov	r0, r4
   16b68:	sub	sp, fp, #16
   16b6c:	pop	{r4, r5, r6, sl, fp, pc}
   16b70:	mov	r0, r5
   16b74:	sub	sp, fp, #16
   16b78:	pop	{r4, r5, r6, sl, fp, lr}
   16b7c:	b	11ac0 <strlen@plt>
   16b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b84:	add	fp, sp, #28
   16b88:	sub	sp, sp, #308	; 0x134
   16b8c:	mov	r5, r1
   16b90:	mov	r6, r0
   16b94:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   16b98:	cmp	r0, #2
   16b9c:	bcc	16f44 <__assert_fail@plt+0x5298>
   16ba0:	mov	r4, #0
   16ba4:	sub	r0, fp, #88	; 0x58
   16ba8:	str	r4, [fp, #-80]	; 0xffffffb0
   16bac:	str	r4, [fp, #-84]	; 0xffffffac
   16bb0:	strb	r4, [fp, #-88]	; 0xffffffa8
   16bb4:	str	r5, [fp, #-72]	; 0xffffffb8
   16bb8:	strb	r4, [fp, #-76]	; 0xffffffb4
   16bbc:	bl	175f8 <__assert_fail@plt+0x594c>
   16bc0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16bc4:	cmp	r0, #0
   16bc8:	beq	16bd8 <__assert_fail@plt+0x4f2c>
   16bcc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16bd0:	cmp	r0, #0
   16bd4:	beq	17064 <__assert_fail@plt+0x53b8>
   16bd8:	add	r0, sp, #136	; 0x88
   16bdc:	str	r4, [fp, #-136]	; 0xffffff78
   16be0:	str	r4, [fp, #-140]	; 0xffffff74
   16be4:	strb	r4, [fp, #-144]	; 0xffffff70
   16be8:	str	r5, [fp, #-128]	; 0xffffff80
   16bec:	str	r4, [sp, #144]	; 0x90
   16bf0:	str	r4, [sp, #140]	; 0x8c
   16bf4:	str	r6, [sp, #152]	; 0x98
   16bf8:	strb	r4, [sp, #136]	; 0x88
   16bfc:	str	r5, [sp, #16]
   16c00:	strb	r4, [fp, #-132]	; 0xffffff7c
   16c04:	strb	r4, [sp, #148]	; 0x94
   16c08:	bl	175f8 <__assert_fail@plt+0x594c>
   16c0c:	ldrb	r0, [sp, #160]	; 0xa0
   16c10:	cmp	r0, #0
   16c14:	beq	16c24 <__assert_fail@plt+0x4f78>
   16c18:	ldr	r0, [sp, #164]	; 0xa4
   16c1c:	cmp	r0, #0
   16c20:	beq	17070 <__assert_fail@plt+0x53c4>
   16c24:	add	r0, sp, #24
   16c28:	mov	r8, #1
   16c2c:	mov	sl, #0
   16c30:	sub	r5, fp, #144	; 0x90
   16c34:	mov	r1, #0
   16c38:	mov	r7, #0
   16c3c:	mov	r9, #0
   16c40:	add	r0, r0, #4
   16c44:	str	r0, [sp, #12]
   16c48:	add	r0, sp, #136	; 0x88
   16c4c:	add	r0, r0, #16
   16c50:	str	r0, [sp, #8]
   16c54:	add	r0, r9, r9, lsl #2
   16c58:	mov	r4, r7
   16c5c:	cmp	r7, r0
   16c60:	bcc	16d08 <__assert_fail@plt+0x505c>
   16c64:	tst	r8, #1
   16c68:	beq	16d08 <__assert_fail@plt+0x505c>
   16c6c:	cmp	r9, #10
   16c70:	bcc	16d08 <__assert_fail@plt+0x505c>
   16c74:	subs	r0, r4, r1
   16c78:	beq	16cbc <__assert_fail@plt+0x5010>
   16c7c:	sub	r7, r1, r4
   16c80:	mov	r0, r5
   16c84:	bl	175f8 <__assert_fail@plt+0x594c>
   16c88:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16c8c:	cmp	r0, #0
   16c90:	beq	16ca0 <__assert_fail@plt+0x4ff4>
   16c94:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16c98:	cmp	r0, #0
   16c9c:	beq	16cbc <__assert_fail@plt+0x5010>
   16ca0:	strb	sl, [fp, #-132]	; 0xffffff7c
   16ca4:	adds	r7, r7, #1
   16ca8:	ldr	r0, [fp, #-128]	; 0xffffff80
   16cac:	ldr	r1, [fp, #-124]	; 0xffffff84
   16cb0:	add	r0, r0, r1
   16cb4:	str	r0, [fp, #-128]	; 0xffffff80
   16cb8:	bne	16c80 <__assert_fail@plt+0x4fd4>
   16cbc:	mov	r0, r5
   16cc0:	bl	175f8 <__assert_fail@plt+0x594c>
   16cc4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16cc8:	cmp	r0, #0
   16ccc:	beq	16d04 <__assert_fail@plt+0x5058>
   16cd0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16cd4:	mov	r1, r4
   16cd8:	cmp	r0, #0
   16cdc:	bne	16d08 <__assert_fail@plt+0x505c>
   16ce0:	ldr	r1, [sp, #16]
   16ce4:	mov	r0, r6
   16ce8:	add	r2, sp, #80	; 0x50
   16cec:	bl	17098 <__assert_fail@plt+0x53ec>
   16cf0:	mov	r8, #0
   16cf4:	cmp	r0, #0
   16cf8:	mov	r1, r4
   16cfc:	beq	16d08 <__assert_fail@plt+0x505c>
   16d00:	b	1708c <__assert_fail@plt+0x53e0>
   16d04:	mov	r1, r4
   16d08:	ldrb	r0, [sp, #160]	; 0xa0
   16d0c:	add	r7, r4, #1
   16d10:	str	r1, [sp, #20]
   16d14:	cmp	r0, #0
   16d18:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   16d1c:	cmpne	r0, #0
   16d20:	bne	16d4c <__assert_fail@plt+0x50a0>
   16d24:	ldr	r2, [sp, #156]	; 0x9c
   16d28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16d2c:	cmp	r2, r0
   16d30:	bne	16f00 <__assert_fail@plt+0x5254>
   16d34:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16d38:	ldr	r0, [sp, #152]	; 0x98
   16d3c:	bl	11934 <memcmp@plt>
   16d40:	cmp	r0, #0
   16d44:	bne	16f00 <__assert_fail@plt+0x5254>
   16d48:	b	16d5c <__assert_fail@plt+0x50b0>
   16d4c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16d50:	ldr	r1, [sp, #164]	; 0xa4
   16d54:	cmp	r1, r0
   16d58:	bne	16f00 <__assert_fail@plt+0x5254>
   16d5c:	add	r2, sp, #136	; 0x88
   16d60:	mov	r1, #48	; 0x30
   16d64:	add	r3, sp, #80	; 0x50
   16d68:	str	r9, [sp]
   16d6c:	str	r8, [sp, #4]
   16d70:	mov	r0, r2
   16d74:	add	r2, r2, #32
   16d78:	vld1.64	{d16-d17}, [r0], r1
   16d7c:	ldr	r1, [sp, #8]
   16d80:	vld1.64	{d20-d21}, [r2]
   16d84:	vld1.64	{d18-d19}, [r1]
   16d88:	add	r1, r3, #16
   16d8c:	vldr	d22, [r0]
   16d90:	add	r0, r3, #32
   16d94:	vst1.64	{d20-d21}, [r0]
   16d98:	mov	r0, r3
   16d9c:	vst1.64	{d18-d19}, [r1]
   16da0:	mov	r1, #12
   16da4:	vst1.64	{d16-d17}, [r0], r1
   16da8:	strb	sl, [r0]
   16dac:	ldr	r0, [sp, #16]
   16db0:	vstr	d22, [sp, #128]	; 0x80
   16db4:	ldr	r1, [sp, #100]	; 0x64
   16db8:	str	r0, [sp, #40]	; 0x28
   16dbc:	ldr	r0, [sp, #96]	; 0x60
   16dc0:	strb	sl, [sp, #24]
   16dc4:	add	r0, r0, r1
   16dc8:	str	r0, [sp, #96]	; 0x60
   16dcc:	ldr	r0, [sp, #12]
   16dd0:	str	sl, [r0]
   16dd4:	str	sl, [r0, #4]
   16dd8:	add	r0, sp, #24
   16ddc:	strb	sl, [sp, #36]	; 0x24
   16de0:	bl	175f8 <__assert_fail@plt+0x594c>
   16de4:	ldrb	r0, [sp, #48]	; 0x30
   16de8:	cmp	r0, #0
   16dec:	beq	16dfc <__assert_fail@plt+0x5150>
   16df0:	ldr	r0, [sp, #52]	; 0x34
   16df4:	cmp	r0, #0
   16df8:	beq	17094 <__assert_fail@plt+0x53e8>
   16dfc:	strb	sl, [sp, #36]	; 0x24
   16e00:	ldr	r0, [sp, #40]	; 0x28
   16e04:	ldr	r1, [sp, #44]	; 0x2c
   16e08:	add	r0, r0, r1
   16e0c:	str	r0, [sp, #40]	; 0x28
   16e10:	add	r0, sp, #24
   16e14:	bl	175f8 <__assert_fail@plt+0x594c>
   16e18:	ldrb	r0, [sp, #48]	; 0x30
   16e1c:	cmp	r0, #0
   16e20:	beq	16e30 <__assert_fail@plt+0x5184>
   16e24:	ldr	r0, [sp, #52]	; 0x34
   16e28:	cmp	r0, #0
   16e2c:	beq	1707c <__assert_fail@plt+0x53d0>
   16e30:	add	r7, r4, #2
   16e34:	add	r0, sp, #80	; 0x50
   16e38:	bl	175f8 <__assert_fail@plt+0x594c>
   16e3c:	ldr	r0, [sp, #108]	; 0x6c
   16e40:	ldrb	r1, [sp, #104]	; 0x68
   16e44:	cmp	r0, #0
   16e48:	bne	16e54 <__assert_fail@plt+0x51a8>
   16e4c:	cmp	r1, #0
   16e50:	bne	1706c <__assert_fail@plt+0x53c0>
   16e54:	cmp	r1, #0
   16e58:	ldrbne	r1, [sp, #48]	; 0x30
   16e5c:	cmpne	r1, #0
   16e60:	bne	16e9c <__assert_fail@plt+0x51f0>
   16e64:	ldr	r4, [sp, #100]	; 0x64
   16e68:	ldr	r0, [sp, #44]	; 0x2c
   16e6c:	cmp	r4, r0
   16e70:	bne	16ef8 <__assert_fail@plt+0x524c>
   16e74:	ldr	r8, [sp, #40]	; 0x28
   16e78:	ldr	r9, [sp, #96]	; 0x60
   16e7c:	mov	r2, r4
   16e80:	mov	r0, r9
   16e84:	mov	r1, r8
   16e88:	bl	11934 <memcmp@plt>
   16e8c:	cmp	r0, #0
   16e90:	mov	r0, r4
   16e94:	beq	16eb8 <__assert_fail@plt+0x520c>
   16e98:	b	16ef8 <__assert_fail@plt+0x524c>
   16e9c:	ldr	r1, [sp, #52]	; 0x34
   16ea0:	cmp	r0, r1
   16ea4:	bne	16ef8 <__assert_fail@plt+0x524c>
   16ea8:	ldr	r8, [sp, #40]	; 0x28
   16eac:	ldr	r4, [sp, #44]	; 0x2c
   16eb0:	ldr	r9, [sp, #96]	; 0x60
   16eb4:	ldr	r0, [sp, #100]	; 0x64
   16eb8:	add	r0, r9, r0
   16ebc:	strb	sl, [sp, #92]	; 0x5c
   16ec0:	strb	sl, [sp, #36]	; 0x24
   16ec4:	str	r0, [sp, #96]	; 0x60
   16ec8:	add	r0, r8, r4
   16ecc:	str	r0, [sp, #40]	; 0x28
   16ed0:	add	r0, sp, #24
   16ed4:	bl	175f8 <__assert_fail@plt+0x594c>
   16ed8:	ldrb	r0, [sp, #48]	; 0x30
   16edc:	add	r7, r7, #1
   16ee0:	cmp	r0, #0
   16ee4:	beq	16e34 <__assert_fail@plt+0x5188>
   16ee8:	ldr	r0, [sp, #52]	; 0x34
   16eec:	cmp	r0, #0
   16ef0:	bne	16e34 <__assert_fail@plt+0x5188>
   16ef4:	b	1707c <__assert_fail@plt+0x53d0>
   16ef8:	ldr	r8, [sp, #4]
   16efc:	ldr	r9, [sp]
   16f00:	mov	r4, #0
   16f04:	add	r9, r9, #1
   16f08:	strb	r4, [sp, #148]	; 0x94
   16f0c:	ldr	r0, [sp, #152]	; 0x98
   16f10:	ldr	r1, [sp, #156]	; 0x9c
   16f14:	add	r0, r0, r1
   16f18:	str	r0, [sp, #152]	; 0x98
   16f1c:	add	r0, sp, #136	; 0x88
   16f20:	bl	175f8 <__assert_fail@plt+0x594c>
   16f24:	ldrb	r0, [sp, #160]	; 0xa0
   16f28:	ldr	r1, [sp, #20]
   16f2c:	cmp	r0, #0
   16f30:	beq	16c54 <__assert_fail@plt+0x4fa8>
   16f34:	ldr	r0, [sp, #164]	; 0xa4
   16f38:	cmp	r0, #0
   16f3c:	bne	16c54 <__assert_fail@plt+0x4fa8>
   16f40:	b	17070 <__assert_fail@plt+0x53c4>
   16f44:	ldrb	r7, [r5]
   16f48:	cmp	r7, #0
   16f4c:	beq	17064 <__assert_fail@plt+0x53b8>
   16f50:	ldrb	r9, [r6]
   16f54:	cmp	r9, #0
   16f58:	beq	1706c <__assert_fail@plt+0x53c0>
   16f5c:	mov	r3, #1
   16f60:	mov	ip, #0
   16f64:	mov	lr, r5
   16f68:	mov	r8, #0
   16f6c:	mov	sl, #0
   16f70:	str	r7, [sp, #16]
   16f74:	add	r0, sl, sl, lsl #2
   16f78:	cmp	r8, r0
   16f7c:	bcc	1700c <__assert_fail@plt+0x5360>
   16f80:	tst	r3, #1
   16f84:	beq	1700c <__assert_fail@plt+0x5360>
   16f88:	cmp	sl, #10
   16f8c:	bcc	1700c <__assert_fail@plt+0x5360>
   16f90:	cmp	lr, #0
   16f94:	str	r3, [sp, #20]
   16f98:	beq	16fcc <__assert_fail@plt+0x5320>
   16f9c:	sub	r1, r8, ip
   16fa0:	mov	r0, lr
   16fa4:	mov	r7, lr
   16fa8:	bl	11b80 <strnlen@plt>
   16fac:	mov	lr, r7
   16fb0:	mov	ip, r8
   16fb4:	ldrb	r0, [lr, r0]!
   16fb8:	cmp	r0, #0
   16fbc:	beq	16fcc <__assert_fail@plt+0x5320>
   16fc0:	ldr	r3, [sp, #20]
   16fc4:	mov	ip, r8
   16fc8:	b	17008 <__assert_fail@plt+0x535c>
   16fcc:	mov	r0, r5
   16fd0:	mov	r4, ip
   16fd4:	bl	11ac0 <strlen@plt>
   16fd8:	mov	r2, r0
   16fdc:	mov	r0, r6
   16fe0:	mov	r1, r5
   16fe4:	sub	r3, fp, #88	; 0x58
   16fe8:	bl	174a0 <__assert_fail@plt+0x57f4>
   16fec:	cmp	r0, #0
   16ff0:	bne	17084 <__assert_fail@plt+0x53d8>
   16ff4:	ldr	r3, [sp, #20]
   16ff8:	ldrb	r9, [r6]
   16ffc:	mov	lr, #0
   17000:	mov	ip, r4
   17004:	and	r3, r3, r0
   17008:	ldr	r7, [sp, #16]
   1700c:	uxtb	r0, r9
   17010:	cmp	r0, r7
   17014:	bne	17048 <__assert_fail@plt+0x539c>
   17018:	mov	r0, #1
   1701c:	ldrb	r1, [r5, r0]
   17020:	cmp	r1, #0
   17024:	beq	17064 <__assert_fail@plt+0x53b8>
   17028:	ldrb	r2, [r6, r0]
   1702c:	cmp	r2, #0
   17030:	beq	1706c <__assert_fail@plt+0x53c0>
   17034:	add	r0, r0, #1
   17038:	cmp	r2, r1
   1703c:	beq	1701c <__assert_fail@plt+0x5370>
   17040:	add	r8, r8, r0
   17044:	b	1704c <__assert_fail@plt+0x53a0>
   17048:	add	r8, r8, #1
   1704c:	ldrb	r9, [r6, #1]!
   17050:	add	sl, sl, #1
   17054:	mov	r4, #0
   17058:	cmp	r9, #0
   1705c:	bne	16f74 <__assert_fail@plt+0x52c8>
   17060:	b	17070 <__assert_fail@plt+0x53c4>
   17064:	mov	r4, r6
   17068:	b	17070 <__assert_fail@plt+0x53c4>
   1706c:	mov	r4, #0
   17070:	mov	r0, r4
   17074:	sub	sp, fp, #28
   17078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1707c:	ldr	r4, [sp, #152]	; 0x98
   17080:	b	17070 <__assert_fail@plt+0x53c4>
   17084:	ldr	r4, [fp, #-88]	; 0xffffffa8
   17088:	b	17070 <__assert_fail@plt+0x53c4>
   1708c:	ldr	r4, [sp, #80]	; 0x50
   17090:	b	17070 <__assert_fail@plt+0x53c4>
   17094:	bl	11c70 <abort@plt>
   17098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1709c:	add	fp, sp, #28
   170a0:	sub	sp, sp, #132	; 0x84
   170a4:	mov	r4, r0
   170a8:	mov	r0, r1
   170ac:	mov	r8, r2
   170b0:	mov	r7, r1
   170b4:	bl	16acc <__assert_fail@plt+0x4e20>
   170b8:	mov	sl, r0
   170bc:	movw	r0, #47662	; 0xba2e
   170c0:	mov	r5, #0
   170c4:	movt	r0, #744	; 0x2e8
   170c8:	cmp	sl, r0
   170cc:	bhi	17490 <__assert_fail@plt+0x57e4>
   170d0:	mov	r0, #44	; 0x2c
   170d4:	mul	r0, sl, r0
   170d8:	cmp	r0, #4016	; 0xfb0
   170dc:	bhi	17104 <__assert_fail@plt+0x5458>
   170e0:	add	r0, r0, #22
   170e4:	bic	r0, r0, #7
   170e8:	sub	r0, sp, r0
   170ec:	add	r1, r0, #15
   170f0:	bic	r9, r1, #15
   170f4:	mov	sp, r0
   170f8:	cmp	r9, #0
   170fc:	bne	17114 <__assert_fail@plt+0x5468>
   17100:	b	17490 <__assert_fail@plt+0x57e4>
   17104:	bl	2e6bc <__assert_fail@plt+0x1ca10>
   17108:	mov	r9, r0
   1710c:	cmp	r9, #0
   17110:	beq	17490 <__assert_fail@plt+0x57e4>
   17114:	sub	r6, fp, #88	; 0x58
   17118:	str	r4, [fp, #-160]	; 0xffffff60
   1711c:	mov	r4, #0
   17120:	mov	r0, r6
   17124:	str	r4, [fp, #-80]	; 0xffffffb0
   17128:	str	r4, [fp, #-84]	; 0xffffffac
   1712c:	strb	r4, [fp, #-88]	; 0xffffffa8
   17130:	str	r7, [fp, #-72]	; 0xffffffb8
   17134:	strb	r4, [fp, #-76]	; 0xffffffb4
   17138:	bl	175f8 <__assert_fail@plt+0x594c>
   1713c:	add	r0, sl, sl, lsl #2
   17140:	add	r3, r9, r0, lsl #3
   17144:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17148:	str	r3, [fp, #-148]	; 0xffffff6c
   1714c:	cmp	r0, #0
   17150:	beq	17160 <__assert_fail@plt+0x54b4>
   17154:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17158:	cmp	r0, #0
   1715c:	beq	171e4 <__assert_fail@plt+0x5538>
   17160:	add	r7, r9, #16
   17164:	add	r5, r6, #32
   17168:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1716c:	cmp	r0, r5
   17170:	bne	17188 <__assert_fail@plt+0x54dc>
   17174:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17178:	mov	r0, r7
   1717c:	mov	r1, r5
   17180:	bl	118ec <memcpy@plt>
   17184:	mov	r0, r7
   17188:	str	r0, [r7, #-16]
   1718c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17190:	str	r0, [r7, #-12]
   17194:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17198:	strb	r0, [r7, #-8]
   1719c:	cmp	r0, #0
   171a0:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   171a4:	strne	r0, [r7, #-4]
   171a8:	strb	r4, [fp, #-76]	; 0xffffffb4
   171ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   171b0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   171b4:	add	r0, r0, r1
   171b8:	str	r0, [fp, #-72]	; 0xffffffb8
   171bc:	mov	r0, r6
   171c0:	bl	175f8 <__assert_fail@plt+0x594c>
   171c4:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   171c8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   171cc:	ldr	r3, [fp, #-148]	; 0xffffff6c
   171d0:	add	r7, r7, #40	; 0x28
   171d4:	cmp	r1, #0
   171d8:	beq	17168 <__assert_fail@plt+0x54bc>
   171dc:	cmp	r0, #0
   171e0:	bne	17168 <__assert_fail@plt+0x54bc>
   171e4:	mov	r0, #1
   171e8:	cmp	sl, #3
   171ec:	str	r8, [fp, #-156]	; 0xffffff64
   171f0:	str	sl, [fp, #-152]	; 0xffffff68
   171f4:	str	r0, [r3, #4]
   171f8:	bcc	172c0 <__assert_fail@plt+0x5614>
   171fc:	mov	r4, #2
   17200:	mov	r5, #0
   17204:	add	r0, r4, r4, lsl #2
   17208:	add	r0, r9, r0, lsl #3
   1720c:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   17210:	sub	r7, r0, #28
   17214:	sub	sl, r0, #40	; 0x28
   17218:	sub	r6, r0, #36	; 0x24
   1721c:	cmp	r8, #0
   17220:	bne	17238 <__assert_fail@plt+0x558c>
   17224:	b	17260 <__assert_fail@plt+0x55b4>
   17228:	ldr	r0, [r3, r5, lsl #2]
   1722c:	sub	r5, r5, r0
   17230:	cmp	r8, #0
   17234:	beq	17260 <__assert_fail@plt+0x55b4>
   17238:	add	r0, r5, r5, lsl #2
   1723c:	add	r0, r9, r0, lsl #3
   17240:	ldrb	r1, [r0, #8]
   17244:	cmp	r1, #0
   17248:	beq	17260 <__assert_fail@plt+0x55b4>
   1724c:	ldr	r0, [r0, #12]
   17250:	ldr	r1, [r7]
   17254:	cmp	r1, r0
   17258:	bne	17290 <__assert_fail@plt+0x55e4>
   1725c:	b	172a4 <__assert_fail@plt+0x55f8>
   17260:	add	r0, r5, r5, lsl #2
   17264:	ldr	r2, [r6]
   17268:	add	r1, r9, r0, lsl #3
   1726c:	ldr	r1, [r1, #4]
   17270:	cmp	r2, r1
   17274:	bne	17290 <__assert_fail@plt+0x55e4>
   17278:	ldr	r1, [r9, r0, lsl #3]
   1727c:	ldr	r0, [sl]
   17280:	bl	11934 <memcmp@plt>
   17284:	ldr	r3, [fp, #-148]	; 0xffffff6c
   17288:	cmp	r0, #0
   1728c:	beq	172a4 <__assert_fail@plt+0x55f8>
   17290:	cmp	r5, #0
   17294:	bne	17228 <__assert_fail@plt+0x557c>
   17298:	mov	r5, #0
   1729c:	mov	r0, r4
   172a0:	b	172ac <__assert_fail@plt+0x5600>
   172a4:	add	r5, r5, #1
   172a8:	sub	r0, r4, r5
   172ac:	str	r0, [r3, r4, lsl #2]
   172b0:	ldr	r0, [fp, #-152]	; 0xffffff68
   172b4:	add	r4, r4, #1
   172b8:	cmp	r4, r0
   172bc:	bne	17204 <__assert_fail@plt+0x5558>
   172c0:	ldr	r8, [fp, #-156]	; 0xffffff64
   172c4:	ldr	r0, [fp, #-160]	; 0xffffff60
   172c8:	mov	r6, #0
   172cc:	str	r6, [r8]
   172d0:	str	r6, [fp, #-80]	; 0xffffffb0
   172d4:	str	r6, [fp, #-84]	; 0xffffffac
   172d8:	strb	r6, [fp, #-88]	; 0xffffffa8
   172dc:	str	r0, [fp, #-72]	; 0xffffffb8
   172e0:	str	r6, [fp, #-136]	; 0xffffff78
   172e4:	str	r6, [fp, #-140]	; 0xffffff74
   172e8:	str	r0, [fp, #-128]	; 0xffffff80
   172ec:	sub	r0, fp, #144	; 0x90
   172f0:	strb	r6, [fp, #-144]	; 0xffffff70
   172f4:	strb	r6, [fp, #-76]	; 0xffffffb4
   172f8:	strb	r6, [fp, #-132]	; 0xffffff7c
   172fc:	bl	175f8 <__assert_fail@plt+0x594c>
   17300:	ldr	r0, [fp, #-116]	; 0xffffff8c
   17304:	ldrb	r1, [fp, #-120]	; 0xffffff88
   17308:	cmp	r0, #0
   1730c:	bne	17318 <__assert_fail@plt+0x566c>
   17310:	cmp	r1, #0
   17314:	bne	17484 <__assert_fail@plt+0x57d8>
   17318:	clz	r1, r1
   1731c:	sub	r4, fp, #88	; 0x58
   17320:	mov	sl, #0
   17324:	lsr	r1, r1, #5
   17328:	add	r2, sl, sl, lsl #2
   1732c:	tst	r1, #1
   17330:	add	r3, r9, r2, lsl #3
   17334:	bne	1735c <__assert_fail@plt+0x56b0>
   17338:	ldrb	r1, [r3, #8]
   1733c:	cmp	r1, #0
   17340:	beq	1735c <__assert_fail@plt+0x56b0>
   17344:	ldr	r1, [r3, #12]
   17348:	cmp	r1, r0
   1734c:	bne	17388 <__assert_fail@plt+0x56dc>
   17350:	ldr	r7, [fp, #-128]	; 0xffffff80
   17354:	ldr	r5, [fp, #-124]	; 0xffffff84
   17358:	b	173e4 <__assert_fail@plt+0x5738>
   1735c:	ldr	r5, [r3, #4]
   17360:	ldr	r0, [fp, #-124]	; 0xffffff84
   17364:	cmp	r5, r0
   17368:	bne	17388 <__assert_fail@plt+0x56dc>
   1736c:	ldr	r7, [fp, #-128]	; 0xffffff80
   17370:	ldr	r0, [r9, r2, lsl #3]
   17374:	mov	r2, r5
   17378:	mov	r1, r7
   1737c:	bl	11934 <memcmp@plt>
   17380:	cmp	r0, #0
   17384:	beq	173e4 <__assert_fail@plt+0x5738>
   17388:	cmp	sl, #0
   1738c:	beq	17404 <__assert_fail@plt+0x5758>
   17390:	ldr	r0, [fp, #-148]	; 0xffffff6c
   17394:	ldr	r5, [r0, sl, lsl #2]
   17398:	sub	sl, sl, r5
   1739c:	cmp	r5, #0
   173a0:	beq	17450 <__assert_fail@plt+0x57a4>
   173a4:	mov	r0, r4
   173a8:	bl	175f8 <__assert_fail@plt+0x594c>
   173ac:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   173b0:	cmp	r0, #0
   173b4:	beq	173c4 <__assert_fail@plt+0x5718>
   173b8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   173bc:	cmp	r0, #0
   173c0:	beq	1749c <__assert_fail@plt+0x57f0>
   173c4:	strb	r6, [fp, #-76]	; 0xffffffb4
   173c8:	subs	r5, r5, #1
   173cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   173d0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   173d4:	add	r0, r0, r1
   173d8:	str	r0, [fp, #-72]	; 0xffffffb8
   173dc:	bne	173a4 <__assert_fail@plt+0x56f8>
   173e0:	b	17450 <__assert_fail@plt+0x57a4>
   173e4:	add	r0, r7, r5
   173e8:	strb	r6, [fp, #-132]	; 0xffffff7c
   173ec:	add	sl, sl, #1
   173f0:	str	r0, [fp, #-128]	; 0xffffff80
   173f4:	ldr	r0, [fp, #-152]	; 0xffffff68
   173f8:	cmp	sl, r0
   173fc:	bne	17450 <__assert_fail@plt+0x57a4>
   17400:	b	1747c <__assert_fail@plt+0x57d0>
   17404:	mov	r0, r4
   17408:	bl	175f8 <__assert_fail@plt+0x594c>
   1740c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17410:	cmp	r0, #0
   17414:	beq	17424 <__assert_fail@plt+0x5778>
   17418:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1741c:	cmp	r0, #0
   17420:	beq	1749c <__assert_fail@plt+0x57f0>
   17424:	mov	sl, #0
   17428:	strb	sl, [fp, #-76]	; 0xffffffb4
   1742c:	strb	sl, [fp, #-132]	; 0xffffff7c
   17430:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17434:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17438:	add	r0, r0, r1
   1743c:	ldr	r1, [fp, #-124]	; 0xffffff84
   17440:	str	r0, [fp, #-72]	; 0xffffffb8
   17444:	ldr	r0, [fp, #-128]	; 0xffffff80
   17448:	add	r0, r0, r1
   1744c:	str	r0, [fp, #-128]	; 0xffffff80
   17450:	sub	r0, fp, #144	; 0x90
   17454:	bl	175f8 <__assert_fail@plt+0x594c>
   17458:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1745c:	clz	r0, r2
   17460:	lsr	r1, r0, #5
   17464:	ldr	r0, [fp, #-116]	; 0xffffff8c
   17468:	cmp	r0, #0
   1746c:	bne	17328 <__assert_fail@plt+0x567c>
   17470:	cmp	r2, #0
   17474:	beq	17328 <__assert_fail@plt+0x567c>
   17478:	b	17484 <__assert_fail@plt+0x57d8>
   1747c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17480:	str	r0, [r8]
   17484:	mov	r0, r9
   17488:	bl	2e72c <__assert_fail@plt+0x1ca80>
   1748c:	mov	r5, #1
   17490:	mov	r0, r5
   17494:	sub	sp, fp, #28
   17498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1749c:	bl	11c70 <abort@plt>
   174a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   174a4:	add	fp, sp, #24
   174a8:	mov	r4, #0
   174ac:	cmn	r2, #-536870911	; 0xe0000001
   174b0:	bhi	175ec <__assert_fail@plt+0x5940>
   174b4:	mov	r7, r0
   174b8:	lsl	r0, r2, #2
   174bc:	mov	r8, r3
   174c0:	mov	r5, r2
   174c4:	mov	r6, r1
   174c8:	cmp	r0, #4016	; 0xfb0
   174cc:	bhi	174f4 <__assert_fail@plt+0x5848>
   174d0:	add	r0, r0, #22
   174d4:	bic	r0, r0, #7
   174d8:	sub	r1, sp, r0
   174dc:	add	r0, r1, #15
   174e0:	bic	r0, r0, #15
   174e4:	mov	sp, r1
   174e8:	cmp	r0, #0
   174ec:	bne	17500 <__assert_fail@plt+0x5854>
   174f0:	b	175ec <__assert_fail@plt+0x5940>
   174f4:	bl	2e6bc <__assert_fail@plt+0x1ca10>
   174f8:	cmp	r0, #0
   174fc:	beq	175ec <__assert_fail@plt+0x5940>
   17500:	mov	r1, #1
   17504:	cmp	r5, #3
   17508:	str	r1, [r0, #4]
   1750c:	bcc	17570 <__assert_fail@plt+0x58c4>
   17510:	mov	r1, #2
   17514:	mov	r2, #0
   17518:	add	r3, r6, r1
   1751c:	ldrb	r4, [r6, r2]
   17520:	ldrb	r3, [r3, #-1]
   17524:	cmp	r3, r4
   17528:	bne	17544 <__assert_fail@plt+0x5898>
   1752c:	b	17558 <__assert_fail@plt+0x58ac>
   17530:	ldr	r4, [r0, r2, lsl #2]
   17534:	sub	r2, r2, r4
   17538:	ldrb	r4, [r6, r2]
   1753c:	cmp	r3, r4
   17540:	beq	17558 <__assert_fail@plt+0x58ac>
   17544:	cmp	r2, #0
   17548:	bne	17530 <__assert_fail@plt+0x5884>
   1754c:	mov	r2, #0
   17550:	mov	r3, r1
   17554:	b	17560 <__assert_fail@plt+0x58b4>
   17558:	add	r2, r2, #1
   1755c:	sub	r3, r1, r2
   17560:	str	r3, [r0, r1, lsl #2]
   17564:	add	r1, r1, #1
   17568:	cmp	r1, r5
   1756c:	bne	17518 <__assert_fail@plt+0x586c>
   17570:	mov	r1, #0
   17574:	str	r1, [r8]
   17578:	ldrb	r3, [r7]
   1757c:	cmp	r3, #0
   17580:	beq	175e4 <__assert_fail@plt+0x5938>
   17584:	mov	r2, r7
   17588:	ldrb	r4, [r6, r1]
   1758c:	uxtb	r3, r3
   17590:	cmp	r4, r3
   17594:	bne	175ac <__assert_fail@plt+0x5900>
   17598:	add	r1, r1, #1
   1759c:	cmp	r1, r5
   175a0:	beq	175e0 <__assert_fail@plt+0x5934>
   175a4:	add	r7, r7, #1
   175a8:	b	175d0 <__assert_fail@plt+0x5924>
   175ac:	cmp	r1, #0
   175b0:	beq	175c4 <__assert_fail@plt+0x5918>
   175b4:	ldr	r3, [r0, r1, lsl #2]
   175b8:	sub	r1, r1, r3
   175bc:	add	r2, r2, r3
   175c0:	b	175d0 <__assert_fail@plt+0x5924>
   175c4:	add	r7, r7, #1
   175c8:	add	r2, r2, #1
   175cc:	mov	r1, #0
   175d0:	ldrb	r3, [r7]
   175d4:	cmp	r3, #0
   175d8:	bne	17588 <__assert_fail@plt+0x58dc>
   175dc:	b	175e4 <__assert_fail@plt+0x5938>
   175e0:	str	r2, [r8]
   175e4:	bl	2e72c <__assert_fail@plt+0x1ca80>
   175e8:	mov	r4, #1
   175ec:	mov	r0, r4
   175f0:	sub	sp, fp, #24
   175f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175f8:	push	{r4, r5, r6, r7, fp, lr}
   175fc:	add	fp, sp, #16
   17600:	mov	r4, r0
   17604:	ldrb	r0, [r0, #12]
   17608:	cmp	r0, #0
   1760c:	popne	{r4, r5, r6, r7, fp, pc}
   17610:	ldrb	r0, [r4]
   17614:	ldr	r6, [r4, #16]
   17618:	cmp	r0, #0
   1761c:	beq	1767c <__assert_fail@plt+0x59d0>
   17620:	add	r5, r4, #4
   17624:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   17628:	mov	r1, r0
   1762c:	mov	r0, r6
   17630:	bl	195a0 <__assert_fail@plt+0x78f4>
   17634:	add	r7, r4, #28
   17638:	mov	r2, r0
   1763c:	mov	r1, r6
   17640:	mov	r3, r5
   17644:	mov	r0, r7
   17648:	bl	1b328 <__assert_fail@plt+0x967c>
   1764c:	cmn	r0, #2
   17650:	str	r0, [r4, #20]
   17654:	beq	176f8 <__assert_fail@plt+0x5a4c>
   17658:	cmp	r0, #0
   1765c:	beq	176b4 <__assert_fail@plt+0x5a08>
   17660:	cmn	r0, #1
   17664:	bne	176d8 <__assert_fail@plt+0x5a2c>
   17668:	mov	r0, #0
   1766c:	strb	r0, [r4, #24]
   17670:	mov	r0, #1
   17674:	str	r0, [r4, #20]
   17678:	b	1770c <__assert_fail@plt+0x5a60>
   1767c:	ldrb	r0, [r6]
   17680:	movw	r2, #2232	; 0x8b8
   17684:	movt	r2, #3
   17688:	ubfx	r1, r0, #5, #3
   1768c:	ldr	r1, [r2, r1, lsl #2]
   17690:	and	r2, r0, #31
   17694:	mov	r0, #1
   17698:	tst	r1, r0, lsl r2
   1769c:	beq	17718 <__assert_fail@plt+0x5a6c>
   176a0:	str	r0, [r4, #20]
   176a4:	ldrb	r1, [r6]
   176a8:	strb	r0, [r4, #24]
   176ac:	str	r1, [r4, #28]
   176b0:	b	1770c <__assert_fail@plt+0x5a60>
   176b4:	mov	r0, #1
   176b8:	str	r0, [r4, #20]
   176bc:	ldr	r0, [r4, #16]
   176c0:	ldrb	r0, [r0]
   176c4:	cmp	r0, #0
   176c8:	bne	17738 <__assert_fail@plt+0x5a8c>
   176cc:	ldr	r0, [r7]
   176d0:	cmp	r0, #0
   176d4:	bne	17758 <__assert_fail@plt+0x5aac>
   176d8:	mov	r0, #1
   176dc:	strb	r0, [r4, #24]
   176e0:	mov	r0, r5
   176e4:	bl	1191c <mbsinit@plt>
   176e8:	cmp	r0, #0
   176ec:	movne	r0, #0
   176f0:	strbne	r0, [r4]
   176f4:	b	1770c <__assert_fail@plt+0x5a60>
   176f8:	ldr	r0, [r4, #16]
   176fc:	bl	11ac0 <strlen@plt>
   17700:	str	r0, [r4, #20]
   17704:	mov	r0, #0
   17708:	strb	r0, [r4, #24]
   1770c:	mov	r0, #1
   17710:	strb	r0, [r4, #12]
   17714:	pop	{r4, r5, r6, r7, fp, pc}
   17718:	add	r5, r4, #4
   1771c:	mov	r0, r5
   17720:	bl	1191c <mbsinit@plt>
   17724:	cmp	r0, #0
   17728:	beq	17778 <__assert_fail@plt+0x5acc>
   1772c:	mov	r0, #1
   17730:	strb	r0, [r4]
   17734:	b	17624 <__assert_fail@plt+0x5978>
   17738:	movw	r0, #247	; 0xf7
   1773c:	movw	r1, #187	; 0xbb
   17740:	movw	r3, #199	; 0xc7
   17744:	mov	r2, #171	; 0xab
   17748:	movt	r0, #3
   1774c:	movt	r1, #3
   17750:	movt	r3, #3
   17754:	bl	11cac <__assert_fail@plt>
   17758:	movw	r0, #270	; 0x10e
   1775c:	movw	r1, #187	; 0xbb
   17760:	movw	r3, #199	; 0xc7
   17764:	mov	r2, #172	; 0xac
   17768:	movt	r0, #3
   1776c:	movt	r1, #3
   17770:	movt	r3, #3
   17774:	bl	11cac <__assert_fail@plt>
   17778:	movw	r0, #164	; 0xa4
   1777c:	movw	r1, #187	; 0xbb
   17780:	movw	r3, #199	; 0xc7
   17784:	mov	r2, #143	; 0x8f
   17788:	movt	r0, #3
   1778c:	movt	r1, #3
   17790:	movt	r3, #3
   17794:	bl	11cac <__assert_fail@plt>
   17798:	ldr	r2, [r0, #16]
   1779c:	add	r1, r2, r1
   177a0:	str	r1, [r0, #16]
   177a4:	bx	lr
   177a8:	push	{r4, r5, r6, sl, fp, lr}
   177ac:	add	fp, sp, #16
   177b0:	mov	r5, r1
   177b4:	ldrb	r1, [r1]
   177b8:	mov	r4, r0
   177bc:	strb	r1, [r0], #4
   177c0:	cmp	r1, #0
   177c4:	beq	177d4 <__assert_fail@plt+0x5b28>
   177c8:	ldmib	r5, {r1, r2}
   177cc:	stm	r0, {r1, r2}
   177d0:	b	177e0 <__assert_fail@plt+0x5b34>
   177d4:	mov	r1, #0
   177d8:	str	r1, [r0]
   177dc:	str	r1, [r0, #4]
   177e0:	ldrb	r0, [r5, #12]
   177e4:	strb	r0, [r4, #12]
   177e8:	add	r0, r5, #32
   177ec:	ldr	r1, [r5, #16]
   177f0:	cmp	r1, r0
   177f4:	beq	17800 <__assert_fail@plt+0x5b54>
   177f8:	mov	r6, r1
   177fc:	b	17810 <__assert_fail@plt+0x5b64>
   17800:	ldr	r2, [r5, #20]
   17804:	add	r6, r4, #32
   17808:	mov	r0, r6
   1780c:	bl	118ec <memcpy@plt>
   17810:	str	r6, [r4, #16]
   17814:	ldr	r0, [r5, #20]
   17818:	str	r0, [r4, #20]
   1781c:	ldrb	r0, [r5, #24]
   17820:	strb	r0, [r4, #24]
   17824:	cmp	r0, #0
   17828:	ldrne	r0, [r5, #28]
   1782c:	strne	r0, [r4, #28]
   17830:	pop	{r4, r5, r6, sl, fp, pc}
   17834:	push	{r4, r5, fp, lr}
   17838:	add	fp, sp, #8
   1783c:	cmp	r0, #0
   17840:	beq	178d4 <__assert_fail@plt+0x5c28>
   17844:	mov	r1, #47	; 0x2f
   17848:	mov	r4, r0
   1784c:	bl	11bb0 <strrchr@plt>
   17850:	cmp	r0, #0
   17854:	mov	r5, r4
   17858:	addne	r5, r0, #1
   1785c:	sub	r0, r5, r4
   17860:	cmp	r0, #7
   17864:	blt	178b8 <__assert_fail@plt+0x5c0c>
   17868:	movw	r1, #344	; 0x158
   1786c:	sub	r0, r5, #7
   17870:	mov	r2, #7
   17874:	movt	r1, #3
   17878:	bl	11c64 <strncmp@plt>
   1787c:	cmp	r0, #0
   17880:	bne	178b8 <__assert_fail@plt+0x5c0c>
   17884:	movw	r1, #352	; 0x160
   17888:	mov	r0, r5
   1788c:	mov	r2, #3
   17890:	movt	r1, #3
   17894:	bl	11c64 <strncmp@plt>
   17898:	cmp	r0, #0
   1789c:	beq	178a8 <__assert_fail@plt+0x5bfc>
   178a0:	mov	r4, r5
   178a4:	b	178b8 <__assert_fail@plt+0x5c0c>
   178a8:	movw	r0, #4608	; 0x1200
   178ac:	add	r4, r5, #3
   178b0:	movt	r0, #4
   178b4:	str	r4, [r0]
   178b8:	movw	r0, #4612	; 0x1204
   178bc:	movt	r0, #4
   178c0:	str	r4, [r0]
   178c4:	movw	r0, #4756	; 0x1294
   178c8:	movt	r0, #4
   178cc:	str	r4, [r0]
   178d0:	pop	{r4, r5, fp, pc}
   178d4:	movw	r0, #4624	; 0x1210
   178d8:	mov	r1, #55	; 0x37
   178dc:	mov	r2, #1
   178e0:	movt	r0, #4
   178e4:	ldr	r3, [r0]
   178e8:	movw	r0, #288	; 0x120
   178ec:	movt	r0, #3
   178f0:	bl	119a0 <fwrite@plt>
   178f4:	bl	11c70 <abort@plt>
   178f8:	push	{r4, r5, r6, sl, fp, lr}
   178fc:	add	fp, sp, #16
   17900:	mov	r4, r0
   17904:	movw	r0, #4760	; 0x1298
   17908:	movt	r0, #4
   1790c:	cmp	r4, #0
   17910:	moveq	r4, r0
   17914:	bl	11af0 <__errno_location@plt>
   17918:	ldr	r6, [r0]
   1791c:	mov	r5, r0
   17920:	mov	r0, r4
   17924:	mov	r1, #48	; 0x30
   17928:	bl	1a100 <__assert_fail@plt+0x8454>
   1792c:	str	r6, [r5]
   17930:	pop	{r4, r5, r6, sl, fp, pc}
   17934:	movw	r1, #4760	; 0x1298
   17938:	cmp	r0, #0
   1793c:	movt	r1, #4
   17940:	movne	r1, r0
   17944:	ldr	r0, [r1]
   17948:	bx	lr
   1794c:	movw	r2, #4760	; 0x1298
   17950:	cmp	r0, #0
   17954:	movt	r2, #4
   17958:	movne	r2, r0
   1795c:	str	r1, [r2]
   17960:	bx	lr
   17964:	movw	r3, #4760	; 0x1298
   17968:	cmp	r0, #0
   1796c:	movt	r3, #4
   17970:	movne	r3, r0
   17974:	ubfx	r0, r1, #5, #3
   17978:	and	r1, r1, #31
   1797c:	add	r0, r3, r0, lsl #2
   17980:	ldr	r3, [r0, #8]
   17984:	eor	r2, r2, r3, lsr r1
   17988:	and	r2, r2, #1
   1798c:	eor	r2, r3, r2, lsl r1
   17990:	str	r2, [r0, #8]
   17994:	mov	r0, #1
   17998:	and	r0, r0, r3, lsr r1
   1799c:	bx	lr
   179a0:	movw	r2, #4760	; 0x1298
   179a4:	cmp	r0, #0
   179a8:	movt	r2, #4
   179ac:	movne	r2, r0
   179b0:	ldr	r0, [r2, #4]
   179b4:	str	r1, [r2, #4]
   179b8:	bx	lr
   179bc:	movw	r3, #4760	; 0x1298
   179c0:	cmp	r0, #0
   179c4:	movt	r3, #4
   179c8:	movne	r3, r0
   179cc:	cmp	r1, #0
   179d0:	mov	r0, #10
   179d4:	cmpne	r2, #0
   179d8:	str	r0, [r3]
   179dc:	bne	179ec <__assert_fail@plt+0x5d40>
   179e0:	push	{fp, lr}
   179e4:	mov	fp, sp
   179e8:	bl	11c70 <abort@plt>
   179ec:	str	r1, [r3, #40]	; 0x28
   179f0:	str	r2, [r3, #44]	; 0x2c
   179f4:	bx	lr
   179f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179fc:	add	fp, sp, #28
   17a00:	sub	sp, sp, #20
   17a04:	mov	r7, r0
   17a08:	ldr	r0, [fp, #8]
   17a0c:	movw	r5, #4760	; 0x1298
   17a10:	mov	r8, r3
   17a14:	mov	r9, r2
   17a18:	mov	sl, r1
   17a1c:	movt	r5, #4
   17a20:	cmp	r0, #0
   17a24:	movne	r5, r0
   17a28:	bl	11af0 <__errno_location@plt>
   17a2c:	mov	r4, r0
   17a30:	ldm	r5, {r0, r1}
   17a34:	ldr	r2, [r5, #40]	; 0x28
   17a38:	ldr	r3, [r5, #44]	; 0x2c
   17a3c:	add	r5, r5, #8
   17a40:	ldr	r6, [r4]
   17a44:	stm	sp, {r0, r1, r5}
   17a48:	str	r2, [sp, #12]
   17a4c:	str	r3, [sp, #16]
   17a50:	mov	r0, r7
   17a54:	mov	r1, sl
   17a58:	mov	r2, r9
   17a5c:	mov	r3, r8
   17a60:	bl	17a70 <__assert_fail@plt+0x5dc4>
   17a64:	str	r6, [r4]
   17a68:	sub	sp, fp, #28
   17a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a74:	add	fp, sp, #28
   17a78:	sub	sp, sp, #156	; 0x9c
   17a7c:	str	r0, [sp, #80]	; 0x50
   17a80:	ldr	r0, [fp, #12]
   17a84:	mov	r6, r1
   17a88:	mov	r9, r3
   17a8c:	str	r2, [fp, #-84]	; 0xffffffac
   17a90:	and	r1, r0, #4
   17a94:	str	r1, [sp, #32]
   17a98:	and	r1, r0, #1
   17a9c:	str	r1, [sp, #36]	; 0x24
   17aa0:	ubfx	r4, r0, #1, #1
   17aa4:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   17aa8:	str	r0, [sp, #40]	; 0x28
   17aac:	ldr	r0, [fp, #24]
   17ab0:	ldr	r7, [fp, #8]
   17ab4:	mov	r1, #0
   17ab8:	mov	r5, #1
   17abc:	str	r1, [fp, #-56]	; 0xffffffc8
   17ac0:	mov	r1, #0
   17ac4:	str	r1, [sp, #60]	; 0x3c
   17ac8:	str	r0, [sp, #76]	; 0x4c
   17acc:	ldr	r0, [fp, #20]
   17ad0:	str	r0, [sp, #72]	; 0x48
   17ad4:	mov	r0, #0
   17ad8:	str	r0, [sp, #56]	; 0x38
   17adc:	mov	r0, #0
   17ae0:	str	r0, [sp, #92]	; 0x5c
   17ae4:	mov	r0, #0
   17ae8:	str	r0, [fp, #-76]	; 0xffffffb4
   17aec:	mov	r0, #0
   17af0:	cmp	r7, #10
   17af4:	bhi	18a74 <__assert_fail@plt+0x6dc8>
   17af8:	add	r1, pc, #28
   17afc:	mov	sl, r6
   17b00:	ldr	r6, [sp, #80]	; 0x50
   17b04:	ldr	ip, [fp, #-84]	; 0xffffffac
   17b08:	mov	r8, #0
   17b0c:	mov	r2, #1
   17b10:	mov	r3, #0
   17b14:	mov	lr, r9
   17b18:	ldr	pc, [r1, r7, lsl #2]
   17b1c:	andeq	r7, r1, r0, lsl #24
   17b20:	andeq	r7, r1, ip, lsr #24
   17b24:	strdeq	r7, [r1], -r0
   17b28:	andeq	r7, r1, r8, ror #23
   17b2c:	andeq	r7, r1, r0, lsr #24
   17b30:	andeq	r7, r1, r4, ror ip
   17b34:	andeq	r7, r1, r0, lsl ip
   17b38:	ldrdeq	r7, [r1], -r0
   17b3c:	andeq	r7, r1, r8, asr #22
   17b40:	andeq	r7, r1, r8, asr #22
   17b44:	andeq	r7, r1, r0, ror fp
   17b48:	movw	r0, #434	; 0x1b2
   17b4c:	mov	r1, r7
   17b50:	movt	r0, #3
   17b54:	bl	19480 <__assert_fail@plt+0x77d4>
   17b58:	str	r0, [sp, #72]	; 0x48
   17b5c:	movw	r0, #63201	; 0xf6e1
   17b60:	mov	r1, r7
   17b64:	movt	r0, #2
   17b68:	bl	19480 <__assert_fail@plt+0x77d4>
   17b6c:	str	r0, [sp, #76]	; 0x4c
   17b70:	str	r5, [fp, #-48]	; 0xffffffd0
   17b74:	mov	r8, #0
   17b78:	mov	r5, r7
   17b7c:	tst	r4, #1
   17b80:	bne	17bb8 <__assert_fail@plt+0x5f0c>
   17b84:	ldr	r0, [sp, #72]	; 0x48
   17b88:	ldrb	r0, [r0]
   17b8c:	cmp	r0, #0
   17b90:	beq	17bb8 <__assert_fail@plt+0x5f0c>
   17b94:	ldr	r1, [sp, #72]	; 0x48
   17b98:	mov	r8, #0
   17b9c:	add	r1, r1, #1
   17ba0:	cmp	r8, sl
   17ba4:	strbcc	r0, [r6, r8]
   17ba8:	ldrb	r0, [r1, r8]
   17bac:	add	r8, r8, #1
   17bb0:	cmp	r0, #0
   17bb4:	bne	17ba0 <__assert_fail@plt+0x5ef4>
   17bb8:	ldr	r7, [sp, #76]	; 0x4c
   17bbc:	mov	r0, r7
   17bc0:	bl	11ac0 <strlen@plt>
   17bc4:	str	r7, [sp, #92]	; 0x5c
   17bc8:	mov	r7, r5
   17bcc:	ldr	ip, [fp, #-84]	; 0xffffffac
   17bd0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17bd4:	str	r0, [fp, #-76]	; 0xffffffb4
   17bd8:	mov	r2, #1
   17bdc:	mov	r3, r4
   17be0:	mov	lr, r9
   17be4:	b	17cd0 <__assert_fail@plt+0x6024>
   17be8:	mov	r0, #1
   17bec:	b	17c2c <__assert_fail@plt+0x5f80>
   17bf0:	tst	r4, #1
   17bf4:	bne	17c2c <__assert_fail@plt+0x5f80>
   17bf8:	mov	r2, r0
   17bfc:	b	17c54 <__assert_fail@plt+0x5fa8>
   17c00:	mov	r7, #0
   17c04:	mov	r8, #0
   17c08:	mov	r2, r0
   17c0c:	b	17ccc <__assert_fail@plt+0x6020>
   17c10:	mov	r0, #1
   17c14:	mov	r8, #0
   17c18:	mov	r7, #5
   17c1c:	b	17c88 <__assert_fail@plt+0x5fdc>
   17c20:	mov	r2, #1
   17c24:	tst	r4, #1
   17c28:	beq	17c54 <__assert_fail@plt+0x5fa8>
   17c2c:	mov	r1, #1
   17c30:	mov	r8, #0
   17c34:	mov	r7, #2
   17c38:	mov	r2, r0
   17c3c:	mov	r3, #1
   17c40:	str	r1, [fp, #-76]	; 0xffffffb4
   17c44:	movw	r1, #63201	; 0xf6e1
   17c48:	movt	r1, #2
   17c4c:	str	r1, [sp, #92]	; 0x5c
   17c50:	b	17cd0 <__assert_fail@plt+0x6024>
   17c54:	cmp	sl, #0
   17c58:	mov	r8, #1
   17c5c:	mov	r7, #2
   17c60:	movne	r0, #39	; 0x27
   17c64:	strbne	r0, [r6]
   17c68:	movw	r0, #63201	; 0xf6e1
   17c6c:	movt	r0, #2
   17c70:	b	17cc0 <__assert_fail@plt+0x6014>
   17c74:	mov	r7, #5
   17c78:	tst	r4, #1
   17c7c:	beq	17ca4 <__assert_fail@plt+0x5ff8>
   17c80:	mov	r0, #1
   17c84:	mov	r8, #0
   17c88:	str	r0, [fp, #-76]	; 0xffffffb4
   17c8c:	movw	r0, #432	; 0x1b0
   17c90:	mov	r2, #1
   17c94:	mov	r3, #1
   17c98:	movt	r0, #3
   17c9c:	str	r0, [sp, #92]	; 0x5c
   17ca0:	b	17cd0 <__assert_fail@plt+0x6024>
   17ca4:	cmp	sl, #0
   17ca8:	mov	r8, #1
   17cac:	mov	r2, #1
   17cb0:	movne	r0, #34	; 0x22
   17cb4:	strbne	r0, [r6]
   17cb8:	movw	r0, #432	; 0x1b0
   17cbc:	movt	r0, #3
   17cc0:	str	r0, [sp, #92]	; 0x5c
   17cc4:	mov	r0, #1
   17cc8:	str	r0, [fp, #-76]	; 0xffffffb4
   17ccc:	mov	r3, #0
   17cd0:	ldr	r0, [fp, #16]
   17cd4:	str	r3, [fp, #-72]	; 0xffffffb8
   17cd8:	str	r7, [fp, #-64]	; 0xffffffc0
   17cdc:	str	r2, [sp, #84]	; 0x54
   17ce0:	cmp	r0, #0
   17ce4:	movwne	r0, #1
   17ce8:	and	r0, r0, r3
   17cec:	str	r0, [fp, #-88]	; 0xffffffa8
   17cf0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17cf4:	cmp	r0, #0
   17cf8:	movwne	r0, #1
   17cfc:	subs	r4, r7, #2
   17d00:	mov	r7, #0
   17d04:	and	r1, r0, r3
   17d08:	str	r4, [fp, #-80]	; 0xffffffb0
   17d0c:	and	r1, r2, r1
   17d10:	str	r1, [sp, #48]	; 0x30
   17d14:	clz	r1, r4
   17d18:	lsr	r1, r1, #5
   17d1c:	and	r1, r1, r3
   17d20:	eor	r3, r3, #1
   17d24:	str	r1, [sp, #64]	; 0x40
   17d28:	mov	r1, r4
   17d2c:	str	r3, [sp, #88]	; 0x58
   17d30:	movwne	r1, #1
   17d34:	orr	r3, r1, r3
   17d38:	and	r1, r1, r2
   17d3c:	and	r0, r0, r1
   17d40:	str	r3, [sp, #68]	; 0x44
   17d44:	str	r1, [fp, #-68]	; 0xffffffbc
   17d48:	str	r0, [fp, #-60]	; 0xffffffc4
   17d4c:	eor	r0, r2, #1
   17d50:	str	r0, [sp, #52]	; 0x34
   17d54:	cmn	lr, #1
   17d58:	beq	17d68 <__assert_fail@plt+0x60bc>
   17d5c:	cmp	r7, lr
   17d60:	bne	17d74 <__assert_fail@plt+0x60c8>
   17d64:	b	1889c <__assert_fail@plt+0x6bf0>
   17d68:	ldrb	r0, [ip, r7]
   17d6c:	cmp	r0, #0
   17d70:	beq	188a4 <__assert_fail@plt+0x6bf8>
   17d74:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17d78:	mov	r9, #0
   17d7c:	str	r5, [fp, #-48]	; 0xffffffd0
   17d80:	cmp	r0, #0
   17d84:	beq	17db8 <__assert_fail@plt+0x610c>
   17d88:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17d8c:	add	r4, r7, r0
   17d90:	cmp	r0, #2
   17d94:	bcc	17db0 <__assert_fail@plt+0x6104>
   17d98:	cmn	lr, #1
   17d9c:	bne	17db0 <__assert_fail@plt+0x6104>
   17da0:	mov	r0, ip
   17da4:	bl	11ac0 <strlen@plt>
   17da8:	ldr	ip, [fp, #-84]	; 0xffffffac
   17dac:	mov	lr, r0
   17db0:	cmp	r4, lr
   17db4:	bls	17dc0 <__assert_fail@plt+0x6114>
   17db8:	mov	r0, #0
   17dbc:	b	17e00 <__assert_fail@plt+0x6154>
   17dc0:	ldr	r1, [sp, #92]	; 0x5c
   17dc4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17dc8:	add	r0, ip, r7
   17dcc:	mov	r4, lr
   17dd0:	bl	11934 <memcmp@plt>
   17dd4:	ldr	r2, [sp, #88]	; 0x58
   17dd8:	cmp	r0, #0
   17ddc:	mov	r1, r0
   17de0:	movwne	r1, #1
   17de4:	orr	r1, r1, r2
   17de8:	tst	r1, #1
   17dec:	beq	18934 <__assert_fail@plt+0x6c88>
   17df0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17df4:	clz	r0, r0
   17df8:	mov	lr, r4
   17dfc:	lsr	r0, r0, #5
   17e00:	str	r0, [fp, #-52]	; 0xffffffcc
   17e04:	ldrb	r5, [ip, r7]
   17e08:	cmp	r5, #126	; 0x7e
   17e0c:	bhi	181c4 <__assert_fail@plt+0x6518>
   17e10:	add	r3, pc, #16
   17e14:	mov	r4, #1
   17e18:	mov	r2, #110	; 0x6e
   17e1c:	mov	r0, #97	; 0x61
   17e20:	mov	r1, #0
   17e24:	ldr	pc, [r3, r5, lsl #2]
   17e28:	andeq	r8, r1, r0, asr #1
   17e2c:	andeq	r8, r1, r4, asr #3
   17e30:	andeq	r8, r1, r4, asr #3
   17e34:	andeq	r8, r1, r4, asr #3
   17e38:	andeq	r8, r1, r4, asr #3
   17e3c:	andeq	r8, r1, r4, asr #3
   17e40:	andeq	r8, r1, r4, asr #3
   17e44:	andeq	r8, r1, r8, ror r2
   17e48:	andeq	r8, r1, r0, lsr #1
   17e4c:	muleq	r1, r8, r0
   17e50:	andeq	r8, r1, ip, lsr #1
   17e54:	andeq	r8, r1, ip, lsr #2
   17e58:	muleq	r1, r0, r0
   17e5c:	andeq	r8, r1, r8, lsr #1
   17e60:	andeq	r8, r1, r4, asr #3
   17e64:	andeq	r8, r1, r4, asr #3
   17e68:	andeq	r8, r1, r4, asr #3
   17e6c:	andeq	r8, r1, r4, asr #3
   17e70:	andeq	r8, r1, r4, asr #3
   17e74:	andeq	r8, r1, r4, asr #3
   17e78:	andeq	r8, r1, r4, asr #3
   17e7c:	andeq	r8, r1, r4, asr #3
   17e80:	andeq	r8, r1, r4, asr #3
   17e84:	andeq	r8, r1, r4, asr #3
   17e88:	andeq	r8, r1, r4, asr #3
   17e8c:	andeq	r8, r1, r4, asr #3
   17e90:	andeq	r8, r1, r4, asr #3
   17e94:	andeq	r8, r1, r4, asr #3
   17e98:	andeq	r8, r1, r4, asr #3
   17e9c:	andeq	r8, r1, r4, asr #3
   17ea0:	andeq	r8, r1, r4, asr #3
   17ea4:	andeq	r8, r1, r4, asr #3
   17ea8:	andeq	r8, r1, r0, lsr r2
   17eac:	andeq	r8, r1, r4, lsr r2
   17eb0:	andeq	r8, r1, r4, lsr r2
   17eb4:	andeq	r8, r1, r8, lsr r0
   17eb8:	andeq	r8, r1, r4, lsr r2
   17ebc:	andeq	r8, r1, r4, lsr #32
   17ec0:	andeq	r8, r1, r4, lsr r2
   17ec4:	andeq	r8, r1, r4, lsr r1
   17ec8:	andeq	r8, r1, r4, lsr r2
   17ecc:	andeq	r8, r1, r4, lsr r2
   17ed0:	andeq	r8, r1, r4, lsr r2
   17ed4:	andeq	r8, r1, r4, lsr #32
   17ed8:	andeq	r8, r1, r4, lsr #32
   17edc:	andeq	r8, r1, r4, lsr #32
   17ee0:	andeq	r8, r1, r4, lsr #32
   17ee4:	andeq	r8, r1, r4, lsr #32
   17ee8:	andeq	r8, r1, r4, lsr #32
   17eec:	andeq	r8, r1, r4, lsr #32
   17ef0:	andeq	r8, r1, r4, lsr #32
   17ef4:	andeq	r8, r1, r4, lsr #32
   17ef8:	andeq	r8, r1, r4, lsr #32
   17efc:	andeq	r8, r1, r4, lsr #32
   17f00:	andeq	r8, r1, r4, lsr #32
   17f04:	andeq	r8, r1, r4, lsr #32
   17f08:	andeq	r8, r1, r4, lsr #32
   17f0c:	andeq	r8, r1, r4, lsr #32
   17f10:	andeq	r8, r1, r4, lsr #32
   17f14:	andeq	r8, r1, r4, lsr r2
   17f18:	andeq	r8, r1, r4, lsr r2
   17f1c:	andeq	r8, r1, r4, lsr r2
   17f20:	andeq	r8, r1, r4, lsr r2
   17f24:	andeq	r8, r1, r0, lsl #2
   17f28:	andeq	r8, r1, r4, asr #3
   17f2c:	andeq	r8, r1, r4, lsr #32
   17f30:	andeq	r8, r1, r4, lsr #32
   17f34:	andeq	r8, r1, r4, lsr #32
   17f38:	andeq	r8, r1, r4, lsr #32
   17f3c:	andeq	r8, r1, r4, lsr #32
   17f40:	andeq	r8, r1, r4, lsr #32
   17f44:	andeq	r8, r1, r4, lsr #32
   17f48:	andeq	r8, r1, r4, lsr #32
   17f4c:	andeq	r8, r1, r4, lsr #32
   17f50:	andeq	r8, r1, r4, lsr #32
   17f54:	andeq	r8, r1, r4, lsr #32
   17f58:	andeq	r8, r1, r4, lsr #32
   17f5c:	andeq	r8, r1, r4, lsr #32
   17f60:	andeq	r8, r1, r4, lsr #32
   17f64:	andeq	r8, r1, r4, lsr #32
   17f68:	andeq	r8, r1, r4, lsr #32
   17f6c:	andeq	r8, r1, r4, lsr #32
   17f70:	andeq	r8, r1, r4, lsr #32
   17f74:	andeq	r8, r1, r4, lsr #32
   17f78:	andeq	r8, r1, r4, lsr #32
   17f7c:	andeq	r8, r1, r4, lsr #32
   17f80:	andeq	r8, r1, r4, lsr #32
   17f84:	andeq	r8, r1, r4, lsr #32
   17f88:	andeq	r8, r1, r4, lsr #32
   17f8c:	andeq	r8, r1, r4, lsr #32
   17f90:	andeq	r8, r1, r4, lsr #32
   17f94:	andeq	r8, r1, r4, lsr r2
   17f98:	andeq	r8, r1, ip, rrx
   17f9c:	andeq	r8, r1, r4, lsr #32
   17fa0:	andeq	r8, r1, r4, lsr r2
   17fa4:	andeq	r8, r1, r4, lsr #32
   17fa8:	andeq	r8, r1, r4, lsr r2
   17fac:	andeq	r8, r1, r4, lsr #32
   17fb0:	andeq	r8, r1, r4, lsr #32
   17fb4:	andeq	r8, r1, r4, lsr #32
   17fb8:	andeq	r8, r1, r4, lsr #32
   17fbc:	andeq	r8, r1, r4, lsr #32
   17fc0:	andeq	r8, r1, r4, lsr #32
   17fc4:	andeq	r8, r1, r4, lsr #32
   17fc8:	andeq	r8, r1, r4, lsr #32
   17fcc:	andeq	r8, r1, r4, lsr #32
   17fd0:	andeq	r8, r1, r4, lsr #32
   17fd4:	andeq	r8, r1, r4, lsr #32
   17fd8:	andeq	r8, r1, r4, lsr #32
   17fdc:	andeq	r8, r1, r4, lsr #32
   17fe0:	andeq	r8, r1, r4, lsr #32
   17fe4:	andeq	r8, r1, r4, lsr #32
   17fe8:	andeq	r8, r1, r4, lsr #32
   17fec:	andeq	r8, r1, r4, lsr #32
   17ff0:	andeq	r8, r1, r4, lsr #32
   17ff4:	andeq	r8, r1, r4, lsr #32
   17ff8:	andeq	r8, r1, r4, lsr #32
   17ffc:	andeq	r8, r1, r4, lsr #32
   18000:	andeq	r8, r1, r4, lsr #32
   18004:	andeq	r8, r1, r4, lsr #32
   18008:	andeq	r8, r1, r4, lsr #32
   1800c:	andeq	r8, r1, r4, lsr #32
   18010:	andeq	r8, r1, r4, lsr #32
   18014:	andeq	r8, r1, ip, asr #32
   18018:	andeq	r8, r1, r4, lsr r2
   1801c:	andeq	r8, r1, ip, asr #32
   18020:	andeq	r8, r1, r8, lsr r0
   18024:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18028:	cmp	r0, #0
   1802c:	beq	1828c <__assert_fail@plt+0x65e0>
   18030:	ldr	r0, [fp, #16]
   18034:	b	18290 <__assert_fail@plt+0x65e4>
   18038:	mov	r4, #0
   1803c:	cmp	r7, #0
   18040:	beq	18230 <__assert_fail@plt+0x6584>
   18044:	mov	r9, #0
   18048:	b	18024 <__assert_fail@plt+0x6378>
   1804c:	mov	r4, #0
   18050:	cmn	lr, #1
   18054:	beq	18214 <__assert_fail@plt+0x6568>
   18058:	cmp	r7, #0
   1805c:	bne	18044 <__assert_fail@plt+0x6398>
   18060:	cmp	lr, #1
   18064:	beq	18230 <__assert_fail@plt+0x6584>
   18068:	b	18044 <__assert_fail@plt+0x6398>
   1806c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18070:	cmp	r0, #2
   18074:	bne	18254 <__assert_fail@plt+0x65a8>
   18078:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1807c:	tst	r0, #1
   18080:	bne	18950 <__assert_fail@plt+0x6ca4>
   18084:	mov	r9, #0
   18088:	mov	r0, #92	; 0x5c
   1808c:	b	18268 <__assert_fail@plt+0x65bc>
   18090:	mov	r0, #102	; 0x66
   18094:	b	18278 <__assert_fail@plt+0x65cc>
   18098:	mov	r2, #116	; 0x74
   1809c:	b	180ac <__assert_fail@plt+0x6400>
   180a0:	mov	r0, #98	; 0x62
   180a4:	b	18278 <__assert_fail@plt+0x65cc>
   180a8:	mov	r2, #114	; 0x72
   180ac:	ldr	r0, [sp, #68]	; 0x44
   180b0:	tst	r0, #1
   180b4:	mov	r0, r2
   180b8:	bne	18278 <__assert_fail@plt+0x65cc>
   180bc:	b	18950 <__assert_fail@plt+0x6ca4>
   180c0:	ldr	r0, [sp, #84]	; 0x54
   180c4:	tst	r0, #1
   180c8:	beq	18368 <__assert_fail@plt+0x66bc>
   180cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   180d0:	tst	r0, #1
   180d4:	bne	18a60 <__assert_fail@plt+0x6db4>
   180d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   180dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   180e0:	cmp	r0, #2
   180e4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   180e8:	movwne	r0, #1
   180ec:	orr	r0, r0, r2
   180f0:	tst	r0, #1
   180f4:	beq	18738 <__assert_fail@plt+0x6a8c>
   180f8:	mov	r0, r8
   180fc:	b	1876c <__assert_fail@plt+0x6ac0>
   18100:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18104:	mov	r9, #0
   18108:	mov	r5, #63	; 0x3f
   1810c:	cmp	r0, #5
   18110:	beq	1851c <__assert_fail@plt+0x6870>
   18114:	cmp	r0, #2
   18118:	bne	185c0 <__assert_fail@plt+0x6914>
   1811c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18120:	tst	r0, #1
   18124:	beq	185c4 <__assert_fail@plt+0x6918>
   18128:	b	18950 <__assert_fail@plt+0x6ca4>
   1812c:	mov	r0, #118	; 0x76
   18130:	b	18278 <__assert_fail@plt+0x65cc>
   18134:	mov	r0, #1
   18138:	mov	r5, #39	; 0x27
   1813c:	str	r0, [sp, #60]	; 0x3c
   18140:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18144:	cmp	r0, #2
   18148:	bne	181bc <__assert_fail@plt+0x6510>
   1814c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18150:	tst	r0, #1
   18154:	bne	18950 <__assert_fail@plt+0x6ca4>
   18158:	ldr	r2, [sp, #56]	; 0x38
   1815c:	clz	r1, sl
   18160:	mov	r9, #0
   18164:	lsr	r1, r1, #5
   18168:	cmp	r2, #0
   1816c:	mov	r0, r2
   18170:	movwne	r0, #1
   18174:	orrs	r0, r0, r1
   18178:	moveq	r2, sl
   1817c:	moveq	sl, r0
   18180:	cmp	r8, sl
   18184:	str	r2, [sp, #56]	; 0x38
   18188:	movcc	r0, #39	; 0x27
   1818c:	strbcc	r0, [r6, r8]
   18190:	add	r0, r8, #1
   18194:	cmp	r0, sl
   18198:	movcc	r1, #92	; 0x5c
   1819c:	strbcc	r1, [r6, r0]
   181a0:	add	r0, r8, #2
   181a4:	add	r8, r8, #3
   181a8:	cmp	r0, sl
   181ac:	movcc	r1, #39	; 0x27
   181b0:	strbcc	r1, [r6, r0]
   181b4:	mov	r0, #0
   181b8:	str	r0, [fp, #-56]	; 0xffffffc8
   181bc:	mov	r4, #1
   181c0:	b	18024 <__assert_fail@plt+0x6378>
   181c4:	ldr	r0, [sp, #40]	; 0x28
   181c8:	cmp	r0, #1
   181cc:	bne	18394 <__assert_fail@plt+0x66e8>
   181d0:	str	lr, [sp, #28]
   181d4:	bl	11a90 <__ctype_b_loc@plt>
   181d8:	ldr	r0, [r0]
   181dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   181e0:	mov	r1, #1
   181e4:	add	r0, r0, r5, lsl #1
   181e8:	ldrb	r0, [r0, #1]
   181ec:	ubfx	r4, r0, #6, #1
   181f0:	ldr	r0, [sp, #52]	; 0x34
   181f4:	mov	r2, r1
   181f8:	cmp	r1, #1
   181fc:	orr	r0, r4, r0
   18200:	bhi	185cc <__assert_fail@plt+0x6920>
   18204:	tst	r0, #1
   18208:	beq	185cc <__assert_fail@plt+0x6920>
   1820c:	ldr	lr, [sp, #28]
   18210:	b	18024 <__assert_fail@plt+0x6378>
   18214:	cmp	r7, #0
   18218:	ldrbeq	r0, [ip, #1]
   1821c:	cmpeq	r0, #0
   18220:	beq	18230 <__assert_fail@plt+0x6584>
   18224:	mvn	lr, #0
   18228:	mov	r9, #0
   1822c:	b	18024 <__assert_fail@plt+0x6378>
   18230:	mov	r1, #1
   18234:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18238:	cmp	r0, #2
   1823c:	bne	1824c <__assert_fail@plt+0x65a0>
   18240:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18244:	tst	r0, #1
   18248:	bne	18950 <__assert_fail@plt+0x6ca4>
   1824c:	mov	r4, r1
   18250:	b	18024 <__assert_fail@plt+0x6378>
   18254:	ldr	r1, [sp, #48]	; 0x30
   18258:	mov	r9, #0
   1825c:	mov	r0, #92	; 0x5c
   18260:	cmp	r1, #0
   18264:	beq	18278 <__assert_fail@plt+0x65cc>
   18268:	mov	r4, #0
   1826c:	cmp	r9, #0
   18270:	beq	18804 <__assert_fail@plt+0x6b58>
   18274:	b	18840 <__assert_fail@plt+0x6b94>
   18278:	ldr	r1, [sp, #84]	; 0x54
   1827c:	mov	r4, #0
   18280:	mov	r9, #0
   18284:	tst	r1, #1
   18288:	bne	182c8 <__assert_fail@plt+0x661c>
   1828c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   18290:	cmp	r0, #0
   18294:	mov	r0, r5
   18298:	beq	182bc <__assert_fail@plt+0x6610>
   1829c:	ldr	r1, [fp, #16]
   182a0:	ubfx	r0, r5, #5, #3
   182a4:	mov	r2, #1
   182a8:	ldr	r0, [r1, r0, lsl #2]
   182ac:	and	r1, r5, #31
   182b0:	tst	r0, r2, lsl r1
   182b4:	mov	r0, r5
   182b8:	bne	182c8 <__assert_fail@plt+0x661c>
   182bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   182c0:	cmp	r1, #0
   182c4:	beq	187fc <__assert_fail@plt+0x6b50>
   182c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   182cc:	tst	r1, #1
   182d0:	bne	18928 <__assert_fail@plt+0x6c7c>
   182d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   182d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   182dc:	cmp	r1, #2
   182e0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   182e4:	movwne	r1, #1
   182e8:	orr	r1, r1, r2
   182ec:	tst	r1, #1
   182f0:	beq	182fc <__assert_fail@plt+0x6650>
   182f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   182f8:	b	18338 <__assert_fail@plt+0x668c>
   182fc:	cmp	r8, sl
   18300:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18304:	movcc	r1, #39	; 0x27
   18308:	strbcc	r1, [r6, r8]
   1830c:	add	r1, r8, #1
   18310:	cmp	r1, sl
   18314:	movcc	r2, #36	; 0x24
   18318:	strbcc	r2, [r6, r1]
   1831c:	add	r1, r8, #2
   18320:	add	r8, r8, #3
   18324:	cmp	r1, sl
   18328:	movcc	r2, #39	; 0x27
   1832c:	strbcc	r2, [r6, r1]
   18330:	mov	r1, #1
   18334:	str	r1, [fp, #-56]	; 0xffffffc8
   18338:	cmp	r8, sl
   1833c:	movcc	r1, #92	; 0x5c
   18340:	strbcc	r1, [r6, r8]
   18344:	add	r8, r8, #1
   18348:	cmp	r8, sl
   1834c:	and	r5, r5, r4
   18350:	add	r7, r7, #1
   18354:	strbcc	r0, [r6, r8]
   18358:	add	r8, r8, #1
   1835c:	cmn	lr, #1
   18360:	bne	17d5c <__assert_fail@plt+0x60b0>
   18364:	b	17d68 <__assert_fail@plt+0x60bc>
   18368:	ldr	r0, [sp, #36]	; 0x24
   1836c:	mov	r4, #0
   18370:	mov	r9, #0
   18374:	mov	r5, #0
   18378:	cmp	r0, #0
   1837c:	beq	1828c <__assert_fail@plt+0x65e0>
   18380:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18384:	add	r7, r7, #1
   18388:	cmn	lr, #1
   1838c:	bne	17d5c <__assert_fail@plt+0x60b0>
   18390:	b	17d68 <__assert_fail@plt+0x60bc>
   18394:	mov	r0, #0
   18398:	cmn	lr, #1
   1839c:	str	r0, [fp, #-36]	; 0xffffffdc
   183a0:	str	r0, [fp, #-40]	; 0xffffffd8
   183a4:	bne	183b8 <__assert_fail@plt+0x670c>
   183a8:	mov	r0, ip
   183ac:	bl	11ac0 <strlen@plt>
   183b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   183b4:	mov	lr, r0
   183b8:	add	r0, ip, r7
   183bc:	mov	r4, #1
   183c0:	mov	r6, #0
   183c4:	str	lr, [sp, #28]
   183c8:	str	r0, [sp, #24]
   183cc:	sub	r0, fp, #40	; 0x28
   183d0:	mov	r3, r0
   183d4:	str	r6, [sp, #44]	; 0x2c
   183d8:	add	r6, r6, r7
   183dc:	sub	r0, fp, #44	; 0x2c
   183e0:	add	r1, ip, r6
   183e4:	sub	r2, lr, r6
   183e8:	bl	1b328 <__assert_fail@plt+0x967c>
   183ec:	cmp	r0, #0
   183f0:	beq	18888 <__assert_fail@plt+0x6bdc>
   183f4:	cmn	r0, #1
   183f8:	beq	18848 <__assert_fail@plt+0x6b9c>
   183fc:	ldr	lr, [sp, #28]
   18400:	cmn	r0, #2
   18404:	beq	18850 <__assert_fail@plt+0x6ba4>
   18408:	ldr	r2, [sp, #64]	; 0x40
   1840c:	cmp	r0, #2
   18410:	mov	r1, #0
   18414:	movwcc	r1, #1
   18418:	eor	r2, r2, #1
   1841c:	orrs	r1, r2, r1
   18420:	bne	184e0 <__assert_fail@plt+0x6834>
   18424:	ldr	r1, [sp, #44]	; 0x2c
   18428:	ldr	r2, [sp, #24]
   1842c:	add	r1, r2, r1
   18430:	mov	r2, #1
   18434:	ldrb	r3, [r1, r2]
   18438:	sub	r3, r3, #91	; 0x5b
   1843c:	cmp	r3, #33	; 0x21
   18440:	bhi	184d4 <__assert_fail@plt+0x6828>
   18444:	add	r6, pc, #0
   18448:	ldr	pc, [r6, r3, lsl #2]
   1844c:	andeq	r8, r1, r8, asr #18
   18450:	andeq	r8, r1, r8, asr #18
   18454:	ldrdeq	r8, [r1], -r4
   18458:	andeq	r8, r1, r8, asr #18
   1845c:	ldrdeq	r8, [r1], -r4
   18460:	andeq	r8, r1, r8, asr #18
   18464:	ldrdeq	r8, [r1], -r4
   18468:	ldrdeq	r8, [r1], -r4
   1846c:	ldrdeq	r8, [r1], -r4
   18470:	ldrdeq	r8, [r1], -r4
   18474:	ldrdeq	r8, [r1], -r4
   18478:	ldrdeq	r8, [r1], -r4
   1847c:	ldrdeq	r8, [r1], -r4
   18480:	ldrdeq	r8, [r1], -r4
   18484:	ldrdeq	r8, [r1], -r4
   18488:	ldrdeq	r8, [r1], -r4
   1848c:	ldrdeq	r8, [r1], -r4
   18490:	ldrdeq	r8, [r1], -r4
   18494:	ldrdeq	r8, [r1], -r4
   18498:	ldrdeq	r8, [r1], -r4
   1849c:	ldrdeq	r8, [r1], -r4
   184a0:	ldrdeq	r8, [r1], -r4
   184a4:	ldrdeq	r8, [r1], -r4
   184a8:	ldrdeq	r8, [r1], -r4
   184ac:	ldrdeq	r8, [r1], -r4
   184b0:	ldrdeq	r8, [r1], -r4
   184b4:	ldrdeq	r8, [r1], -r4
   184b8:	ldrdeq	r8, [r1], -r4
   184bc:	ldrdeq	r8, [r1], -r4
   184c0:	ldrdeq	r8, [r1], -r4
   184c4:	ldrdeq	r8, [r1], -r4
   184c8:	ldrdeq	r8, [r1], -r4
   184cc:	ldrdeq	r8, [r1], -r4
   184d0:	andeq	r8, r1, r8, asr #18
   184d4:	add	r2, r2, #1
   184d8:	cmp	r2, r0
   184dc:	bcc	18434 <__assert_fail@plt+0x6788>
   184e0:	ldr	r6, [sp, #44]	; 0x2c
   184e4:	add	r6, r0, r6
   184e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   184ec:	bl	1197c <iswprint@plt>
   184f0:	cmp	r0, #0
   184f4:	movwne	r0, #1
   184f8:	and	r4, r4, r0
   184fc:	sub	r0, fp, #40	; 0x28
   18500:	bl	1191c <mbsinit@plt>
   18504:	ldr	lr, [sp, #28]
   18508:	ldr	ip, [fp, #-84]	; 0xffffffac
   1850c:	sub	r3, fp, #40	; 0x28
   18510:	cmp	r0, #0
   18514:	beq	183d4 <__assert_fail@plt+0x6728>
   18518:	b	18890 <__assert_fail@plt+0x6be4>
   1851c:	ldr	r0, [sp, #32]
   18520:	cmp	r0, #0
   18524:	beq	185c0 <__assert_fail@plt+0x6914>
   18528:	add	r0, r7, #2
   1852c:	cmp	r0, lr
   18530:	bcs	185c0 <__assert_fail@plt+0x6914>
   18534:	add	r1, ip, r7
   18538:	ldrb	r1, [r1, #1]
   1853c:	cmp	r1, #63	; 0x3f
   18540:	bne	185c0 <__assert_fail@plt+0x6914>
   18544:	ldrb	r5, [ip, r0]
   18548:	sub	r1, r5, #33	; 0x21
   1854c:	cmp	r1, #29
   18550:	bhi	185c0 <__assert_fail@plt+0x6914>
   18554:	movw	r3, #20929	; 0x51c1
   18558:	mov	r2, #1
   1855c:	movt	r3, #14336	; 0x3800
   18560:	tst	r3, r2, lsl r1
   18564:	beq	185c0 <__assert_fail@plt+0x6914>
   18568:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1856c:	tst	r1, #1
   18570:	bne	18a68 <__assert_fail@plt+0x6dbc>
   18574:	cmp	r8, sl
   18578:	mov	r7, r0
   1857c:	mov	r4, #0
   18580:	movcc	r1, #63	; 0x3f
   18584:	strbcc	r1, [r6, r8]
   18588:	add	r1, r8, #1
   1858c:	cmp	r1, sl
   18590:	movcc	r2, #34	; 0x22
   18594:	strbcc	r2, [r6, r1]
   18598:	add	r1, r8, #2
   1859c:	cmp	r1, sl
   185a0:	movcc	r2, #34	; 0x22
   185a4:	strbcc	r2, [r6, r1]
   185a8:	add	r1, r8, #3
   185ac:	add	r8, r8, #4
   185b0:	cmp	r1, sl
   185b4:	movcc	r2, #63	; 0x3f
   185b8:	strbcc	r2, [r6, r1]
   185bc:	b	18024 <__assert_fail@plt+0x6378>
   185c0:	mov	r5, #63	; 0x3f
   185c4:	mov	r4, #0
   185c8:	b	18024 <__assert_fail@plt+0x6378>
   185cc:	add	r1, r2, r7
   185d0:	ldr	lr, [sp, #28]
   185d4:	mov	r3, #0
   185d8:	str	r1, [sp, #44]	; 0x2c
   185dc:	add	r1, r7, #1
   185e0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   185e4:	tst	r0, #1
   185e8:	bne	186bc <__assert_fail@plt+0x6a10>
   185ec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   185f0:	tst	r2, #1
   185f4:	bne	189b0 <__assert_fail@plt+0x6d04>
   185f8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   185fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18600:	cmp	r7, #2
   18604:	movwne	r3, #1
   18608:	orr	r3, r3, r2
   1860c:	tst	r3, #1
   18610:	bne	1864c <__assert_fail@plt+0x69a0>
   18614:	cmp	r8, sl
   18618:	add	r3, r8, #1
   1861c:	movcc	r2, #39	; 0x27
   18620:	strbcc	r2, [r6, r8]
   18624:	cmp	r3, sl
   18628:	movcc	r2, #36	; 0x24
   1862c:	strbcc	r2, [r6, r3]
   18630:	add	r3, r8, #2
   18634:	add	r8, r8, #3
   18638:	cmp	r3, sl
   1863c:	movcc	r2, #39	; 0x27
   18640:	strbcc	r2, [r6, r3]
   18644:	mov	r2, #1
   18648:	str	r2, [fp, #-56]	; 0xffffffc8
   1864c:	cmp	r8, sl
   18650:	movcc	r3, #92	; 0x5c
   18654:	strbcc	r3, [r6, r8]
   18658:	add	r3, r8, #1
   1865c:	cmp	r3, sl
   18660:	andcc	r7, r5, #192	; 0xc0
   18664:	movcc	r2, #48	; 0x30
   18668:	orrcc	r7, r2, r7, lsr #6
   1866c:	strbcc	r7, [r6, r3]
   18670:	add	r3, r8, #2
   18674:	add	r8, r8, #3
   18678:	cmp	r3, sl
   1867c:	lsrcc	r7, r5, #3
   18680:	movcc	r2, #6
   18684:	bficc	r7, r2, #3, #29
   18688:	mov	r2, #6
   1868c:	strbcc	r7, [r6, r3]
   18690:	bfi	r5, r2, #3, #29
   18694:	mov	r3, #1
   18698:	b	186e0 <__assert_fail@plt+0x6a34>
   1869c:	cmp	r8, sl
   186a0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   186a4:	strbcc	r5, [r6, r8]
   186a8:	add	r8, r8, #1
   186ac:	ldrb	r5, [ip, r1]
   186b0:	add	r1, r1, #1
   186b4:	tst	r0, #1
   186b8:	beq	185ec <__assert_fail@plt+0x6940>
   186bc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   186c0:	tst	r2, #1
   186c4:	beq	186d8 <__assert_fail@plt+0x6a2c>
   186c8:	cmp	r8, sl
   186cc:	movcc	r7, #92	; 0x5c
   186d0:	strbcc	r7, [r6, r8]
   186d4:	add	r8, r8, #1
   186d8:	mov	r2, #0
   186dc:	str	r2, [fp, #-52]	; 0xffffffcc
   186e0:	ldr	r2, [sp, #44]	; 0x2c
   186e4:	and	r9, r3, #1
   186e8:	cmp	r2, r1
   186ec:	bls	187ec <__assert_fail@plt+0x6b40>
   186f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   186f4:	cmp	r9, #0
   186f8:	movwne	r9, #1
   186fc:	mvn	r7, r2
   18700:	orr	r7, r7, r9
   18704:	tst	r7, #1
   18708:	bne	1869c <__assert_fail@plt+0x69f0>
   1870c:	cmp	r8, sl
   18710:	movcc	r7, #39	; 0x27
   18714:	strbcc	r7, [r6, r8]
   18718:	add	r7, r8, #1
   1871c:	add	r8, r8, #2
   18720:	cmp	r7, sl
   18724:	movcc	r2, #39	; 0x27
   18728:	strbcc	r2, [r6, r7]
   1872c:	mov	r2, #0
   18730:	str	r2, [fp, #-56]	; 0xffffffc8
   18734:	b	1869c <__assert_fail@plt+0x69f0>
   18738:	cmp	r8, sl
   1873c:	mov	r2, #1
   18740:	movcc	r0, #39	; 0x27
   18744:	strbcc	r0, [r6, r8]
   18748:	add	r0, r8, #1
   1874c:	cmp	r0, sl
   18750:	movcc	r1, #36	; 0x24
   18754:	strbcc	r1, [r6, r0]
   18758:	add	r0, r8, #2
   1875c:	cmp	r0, sl
   18760:	movcc	r1, #39	; 0x27
   18764:	strbcc	r1, [r6, r0]
   18768:	add	r0, r8, #3
   1876c:	cmp	r0, sl
   18770:	add	r8, r0, #1
   18774:	str	r2, [fp, #-56]	; 0xffffffc8
   18778:	movcc	r1, #92	; 0x5c
   1877c:	strbcc	r1, [r6, r0]
   18780:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18784:	cmp	r1, #2
   18788:	beq	187dc <__assert_fail@plt+0x6b30>
   1878c:	add	r1, r7, #1
   18790:	mov	r4, #0
   18794:	mov	r9, #1
   18798:	mov	r5, #48	; 0x30
   1879c:	cmp	r1, lr
   187a0:	bcs	18024 <__assert_fail@plt+0x6378>
   187a4:	ldrb	r1, [ip, r1]
   187a8:	sub	r1, r1, #48	; 0x30
   187ac:	uxtb	r1, r1
   187b0:	cmp	r1, #9
   187b4:	bhi	18024 <__assert_fail@plt+0x6378>
   187b8:	cmp	r8, sl
   187bc:	movcc	r1, #48	; 0x30
   187c0:	strbcc	r1, [r6, r8]
   187c4:	add	r1, r0, #2
   187c8:	add	r8, r0, #3
   187cc:	cmp	r1, sl
   187d0:	movcc	r2, #48	; 0x30
   187d4:	strbcc	r2, [r6, r1]
   187d8:	b	18024 <__assert_fail@plt+0x6378>
   187dc:	mov	r0, #48	; 0x30
   187e0:	mov	r9, #1
   187e4:	mov	r4, #0
   187e8:	b	182bc <__assert_fail@plt+0x6610>
   187ec:	cmp	r9, #0
   187f0:	sub	r7, r1, #1
   187f4:	mov	r0, r5
   187f8:	movwne	r9, #1
   187fc:	cmp	r9, #0
   18800:	bne	18840 <__assert_fail@plt+0x6b94>
   18804:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18808:	tst	r1, #1
   1880c:	beq	18840 <__assert_fail@plt+0x6b94>
   18810:	cmp	r8, sl
   18814:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18818:	movcc	r1, #39	; 0x27
   1881c:	strbcc	r1, [r6, r8]
   18820:	add	r1, r8, #1
   18824:	add	r8, r8, #2
   18828:	cmp	r1, sl
   1882c:	movcc	r2, #39	; 0x27
   18830:	strbcc	r2, [r6, r1]
   18834:	mov	r1, #0
   18838:	str	r1, [fp, #-56]	; 0xffffffc8
   1883c:	b	18348 <__assert_fail@plt+0x669c>
   18840:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18844:	b	18348 <__assert_fail@plt+0x669c>
   18848:	mov	r4, #0
   1884c:	b	18888 <__assert_fail@plt+0x6bdc>
   18850:	mov	r4, #0
   18854:	cmp	lr, r6
   18858:	bls	18888 <__assert_fail@plt+0x6bdc>
   1885c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18860:	ldr	r6, [sp, #44]	; 0x2c
   18864:	ldr	r0, [sp, #24]
   18868:	ldrb	r0, [r0, r6]
   1886c:	cmp	r0, #0
   18870:	beq	18890 <__assert_fail@plt+0x6be4>
   18874:	add	r6, r6, #1
   18878:	add	r0, r7, r6
   1887c:	cmp	r0, lr
   18880:	bcc	18864 <__assert_fail@plt+0x6bb8>
   18884:	b	18890 <__assert_fail@plt+0x6be4>
   18888:	ldr	ip, [fp, #-84]	; 0xffffffac
   1888c:	ldr	r6, [sp, #44]	; 0x2c
   18890:	mov	r1, r6
   18894:	ldr	r6, [sp, #80]	; 0x50
   18898:	b	181f0 <__assert_fail@plt+0x6544>
   1889c:	mov	lr, r7
   188a0:	b	188a8 <__assert_fail@plt+0x6bfc>
   188a4:	mvn	lr, #0
   188a8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   188ac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   188b0:	eor	r0, r7, #2
   188b4:	orr	r0, r0, r8
   188b8:	clz	r0, r0
   188bc:	lsr	r0, r0, #5
   188c0:	tst	r1, r0
   188c4:	bne	18950 <__assert_fail@plt+0x6ca4>
   188c8:	mov	r0, r1
   188cc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   188d0:	cmp	r7, #2
   188d4:	movwne	r1, #1
   188d8:	orr	r0, r0, r1
   188dc:	tst	r0, #1
   188e0:	ldreq	r0, [sp, #60]	; 0x3c
   188e4:	eoreq	r0, r0, #1
   188e8:	tsteq	r0, #1
   188ec:	bne	189fc <__assert_fail@plt+0x6d50>
   188f0:	mov	r9, lr
   188f4:	tst	r5, #1
   188f8:	bne	189b8 <__assert_fail@plt+0x6d0c>
   188fc:	ldr	r6, [sp, #56]	; 0x38
   18900:	mov	r4, #0
   18904:	cmp	r6, #0
   18908:	beq	189f4 <__assert_fail@plt+0x6d48>
   1890c:	ldr	r0, [sp, #84]	; 0x54
   18910:	mov	r1, #0
   18914:	cmp	sl, #0
   18918:	mov	r5, #0
   1891c:	str	r1, [fp, #-72]	; 0xffffffb8
   18920:	beq	17af0 <__assert_fail@plt+0x5e44>
   18924:	b	189fc <__assert_fail@plt+0x6d50>
   18928:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1892c:	ldr	r2, [sp, #84]	; 0x54
   18930:	b	18958 <__assert_fail@plt+0x6cac>
   18934:	ldr	ip, [fp, #-84]	; 0xffffffac
   18938:	mov	r2, #1
   1893c:	mov	lr, r4
   18940:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18944:	b	18958 <__assert_fail@plt+0x6cac>
   18948:	ldr	r6, [sp, #80]	; 0x50
   1894c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18950:	ldr	r2, [sp, #84]	; 0x54
   18954:	mov	r7, #2
   18958:	mov	r0, #0
   1895c:	ldr	r1, [fp, #12]
   18960:	tst	r2, #1
   18964:	mov	r2, r7
   18968:	mov	r3, lr
   1896c:	str	r0, [sp, #8]
   18970:	ldr	r0, [sp, #72]	; 0x48
   18974:	movwne	r2, #4
   18978:	cmp	r7, #2
   1897c:	movne	r2, r7
   18980:	str	r2, [sp]
   18984:	mov	r2, ip
   18988:	bic	r1, r1, #2
   1898c:	str	r0, [sp, #12]
   18990:	ldr	r0, [sp, #76]	; 0x4c
   18994:	str	r1, [sp, #4]
   18998:	mov	r1, sl
   1899c:	str	r0, [sp, #16]
   189a0:	mov	r0, r6
   189a4:	bl	17a70 <__assert_fail@plt+0x5dc4>
   189a8:	mov	r8, r0
   189ac:	b	18a54 <__assert_fail@plt+0x6da8>
   189b0:	ldr	r2, [sp, #84]	; 0x54
   189b4:	b	18958 <__assert_fail@plt+0x6cac>
   189b8:	mov	r0, #5
   189bc:	ldr	r1, [sp, #56]	; 0x38
   189c0:	ldr	r2, [fp, #-84]	; 0xffffffac
   189c4:	mov	r3, r9
   189c8:	str	r0, [sp]
   189cc:	ldr	r0, [fp, #12]
   189d0:	str	r0, [sp, #4]
   189d4:	ldr	r0, [fp, #16]
   189d8:	str	r0, [sp, #8]
   189dc:	ldr	r0, [sp, #72]	; 0x48
   189e0:	str	r0, [sp, #12]
   189e4:	ldr	r0, [sp, #76]	; 0x4c
   189e8:	str	r0, [sp, #16]
   189ec:	ldr	r0, [sp, #80]	; 0x50
   189f0:	b	189a4 <__assert_fail@plt+0x6cf8>
   189f4:	mov	r0, #0
   189f8:	str	r0, [fp, #-72]	; 0xffffffb8
   189fc:	ldr	r1, [sp, #92]	; 0x5c
   18a00:	cmp	r1, #0
   18a04:	beq	18a44 <__assert_fail@plt+0x6d98>
   18a08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18a0c:	ldr	r2, [sp, #80]	; 0x50
   18a10:	tst	r0, #1
   18a14:	bne	18a48 <__assert_fail@plt+0x6d9c>
   18a18:	ldrb	r0, [r1]
   18a1c:	cmp	r0, #0
   18a20:	beq	18a48 <__assert_fail@plt+0x6d9c>
   18a24:	add	r1, r1, #1
   18a28:	cmp	r8, sl
   18a2c:	strbcc	r0, [r2, r8]
   18a30:	add	r8, r8, #1
   18a34:	ldrb	r0, [r1], #1
   18a38:	cmp	r0, #0
   18a3c:	bne	18a28 <__assert_fail@plt+0x6d7c>
   18a40:	b	18a48 <__assert_fail@plt+0x6d9c>
   18a44:	ldr	r2, [sp, #80]	; 0x50
   18a48:	cmp	r8, sl
   18a4c:	movcc	r0, #0
   18a50:	strbcc	r0, [r2, r8]
   18a54:	mov	r0, r8
   18a58:	sub	sp, fp, #28
   18a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a60:	mov	r2, #1
   18a64:	b	18940 <__assert_fail@plt+0x6c94>
   18a68:	ldr	r2, [sp, #84]	; 0x54
   18a6c:	mov	r7, #5
   18a70:	b	18958 <__assert_fail@plt+0x6cac>
   18a74:	bl	11c70 <abort@plt>
   18a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a7c:	add	fp, sp, #28
   18a80:	sub	sp, sp, #28
   18a84:	movw	r5, #4760	; 0x1298
   18a88:	cmp	r2, #0
   18a8c:	mov	r4, r1
   18a90:	mov	r7, r0
   18a94:	str	r0, [sp, #20]
   18a98:	movt	r5, #4
   18a9c:	movne	r5, r2
   18aa0:	bl	11af0 <__errno_location@plt>
   18aa4:	mov	sl, r0
   18aa8:	ldm	r5, {r0, r1}
   18aac:	ldr	r2, [r5, #40]	; 0x28
   18ab0:	ldr	r3, [r5, #44]	; 0x2c
   18ab4:	add	r9, r5, #8
   18ab8:	ldr	r6, [sl]
   18abc:	orr	r8, r1, #1
   18ac0:	mov	r1, #0
   18ac4:	str	r6, [sp, #24]
   18ac8:	stm	sp, {r0, r8, r9}
   18acc:	str	r2, [sp, #12]
   18ad0:	str	r3, [sp, #16]
   18ad4:	mov	r0, #0
   18ad8:	mov	r2, r7
   18adc:	mov	r3, r4
   18ae0:	mov	r6, r4
   18ae4:	bl	17a70 <__assert_fail@plt+0x5dc4>
   18ae8:	add	r7, r0, #1
   18aec:	mov	r0, r7
   18af0:	bl	19cd0 <__assert_fail@plt+0x8024>
   18af4:	mov	r4, r0
   18af8:	ldr	r0, [r5]
   18afc:	ldr	r2, [r5, #44]	; 0x2c
   18b00:	ldr	r1, [r5, #40]	; 0x28
   18b04:	mov	r3, r6
   18b08:	stm	sp, {r0, r8, r9}
   18b0c:	str	r2, [sp, #16]
   18b10:	str	r1, [sp, #12]
   18b14:	mov	r0, r4
   18b18:	mov	r1, r7
   18b1c:	ldr	r2, [sp, #20]
   18b20:	bl	17a70 <__assert_fail@plt+0x5dc4>
   18b24:	ldr	r0, [sp, #24]
   18b28:	str	r0, [sl]
   18b2c:	mov	r0, r4
   18b30:	sub	sp, fp, #28
   18b34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b3c:	add	fp, sp, #28
   18b40:	sub	sp, sp, #36	; 0x24
   18b44:	movw	r8, #4760	; 0x1298
   18b48:	cmp	r3, #0
   18b4c:	mov	r4, r2
   18b50:	str	r2, [sp, #24]
   18b54:	mov	r5, r1
   18b58:	mov	r6, r0
   18b5c:	str	r0, [sp, #20]
   18b60:	movt	r8, #4
   18b64:	movne	r8, r3
   18b68:	bl	11af0 <__errno_location@plt>
   18b6c:	str	r0, [sp, #28]
   18b70:	cmp	r4, #0
   18b74:	add	sl, r8, #8
   18b78:	ldm	r8, {r3, r9}
   18b7c:	ldr	r7, [r0]
   18b80:	ldr	r1, [r8, #40]	; 0x28
   18b84:	ldr	r2, [r8, #44]	; 0x2c
   18b88:	mov	r0, #0
   18b8c:	orreq	r9, r9, #1
   18b90:	str	r7, [sp, #32]
   18b94:	mov	r7, r5
   18b98:	stm	sp, {r3, r9, sl}
   18b9c:	str	r1, [sp, #12]
   18ba0:	str	r2, [sp, #16]
   18ba4:	mov	r1, #0
   18ba8:	mov	r2, r6
   18bac:	mov	r3, r5
   18bb0:	bl	17a70 <__assert_fail@plt+0x5dc4>
   18bb4:	add	r4, r0, #1
   18bb8:	mov	r5, r0
   18bbc:	mov	r0, r4
   18bc0:	bl	19cd0 <__assert_fail@plt+0x8024>
   18bc4:	mov	r6, r0
   18bc8:	ldr	r0, [r8]
   18bcc:	ldr	r2, [r8, #44]	; 0x2c
   18bd0:	ldr	r1, [r8, #40]	; 0x28
   18bd4:	mov	r3, r7
   18bd8:	stm	sp, {r0, r9, sl}
   18bdc:	str	r2, [sp, #16]
   18be0:	str	r1, [sp, #12]
   18be4:	mov	r0, r6
   18be8:	mov	r1, r4
   18bec:	ldr	r2, [sp, #20]
   18bf0:	bl	17a70 <__assert_fail@plt+0x5dc4>
   18bf4:	ldr	r0, [sp, #24]
   18bf8:	ldr	r1, [sp, #32]
   18bfc:	ldr	r2, [sp, #28]
   18c00:	cmp	r0, #0
   18c04:	str	r1, [r2]
   18c08:	strne	r5, [r0]
   18c0c:	mov	r0, r6
   18c10:	sub	sp, fp, #28
   18c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c1c:	add	fp, sp, #24
   18c20:	movw	r5, #4540	; 0x11bc
   18c24:	movw	r8, #4536	; 0x11b8
   18c28:	movt	r5, #4
   18c2c:	movt	r8, #4
   18c30:	ldr	r0, [r5]
   18c34:	ldr	r4, [r8]
   18c38:	cmp	r0, #2
   18c3c:	blt	18c68 <__assert_fail@plt+0x6fbc>
   18c40:	add	r7, r4, #12
   18c44:	mov	r6, #0
   18c48:	ldr	r0, [r7, r6, lsl #3]
   18c4c:	bl	1b22c <__assert_fail@plt+0x9580>
   18c50:	ldr	r1, [r5]
   18c54:	add	r2, r6, #2
   18c58:	add	r0, r6, #1
   18c5c:	mov	r6, r0
   18c60:	cmp	r2, r1
   18c64:	blt	18c48 <__assert_fail@plt+0x6f9c>
   18c68:	ldr	r0, [r4, #4]
   18c6c:	movw	r7, #4808	; 0x12c8
   18c70:	movt	r7, #4
   18c74:	cmp	r0, r7
   18c78:	beq	18c90 <__assert_fail@plt+0x6fe4>
   18c7c:	bl	1b22c <__assert_fail@plt+0x9580>
   18c80:	movw	r0, #4544	; 0x11c0
   18c84:	mov	r6, #256	; 0x100
   18c88:	movt	r0, #4
   18c8c:	strd	r6, [r0]
   18c90:	movw	r6, #4544	; 0x11c0
   18c94:	movt	r6, #4
   18c98:	cmp	r4, r6
   18c9c:	beq	18cac <__assert_fail@plt+0x7000>
   18ca0:	mov	r0, r4
   18ca4:	bl	1b22c <__assert_fail@plt+0x9580>
   18ca8:	str	r6, [r8]
   18cac:	mov	r0, #1
   18cb0:	str	r0, [r5]
   18cb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18cb8:	movw	r3, #4760	; 0x1298
   18cbc:	mvn	r2, #0
   18cc0:	movt	r3, #4
   18cc4:	b	18cc8 <__assert_fail@plt+0x701c>
   18cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ccc:	add	fp, sp, #28
   18cd0:	sub	sp, sp, #44	; 0x2c
   18cd4:	mov	r7, r3
   18cd8:	str	r2, [sp, #36]	; 0x24
   18cdc:	str	r1, [sp, #32]
   18ce0:	mov	r5, r0
   18ce4:	bl	11af0 <__errno_location@plt>
   18ce8:	cmp	r5, #0
   18cec:	blt	18e58 <__assert_fail@plt+0x71ac>
   18cf0:	cmn	r5, #-2147483647	; 0x80000001
   18cf4:	beq	18e58 <__assert_fail@plt+0x71ac>
   18cf8:	movw	r8, #4540	; 0x11bc
   18cfc:	movw	r4, #4536	; 0x11b8
   18d00:	str	r0, [sp, #28]
   18d04:	ldr	r0, [r0]
   18d08:	movt	r8, #4
   18d0c:	movt	r4, #4
   18d10:	ldr	r1, [r8]
   18d14:	ldr	r6, [r4]
   18d18:	str	r0, [sp, #24]
   18d1c:	cmp	r1, r5
   18d20:	ble	18d2c <__assert_fail@plt+0x7080>
   18d24:	mov	sl, r6
   18d28:	b	18d94 <__assert_fail@plt+0x70e8>
   18d2c:	movw	r9, #4544	; 0x11c0
   18d30:	mov	r0, #8
   18d34:	add	r2, r5, #1
   18d38:	str	r1, [fp, #-32]	; 0xffffffe0
   18d3c:	mvn	r3, #-2147483648	; 0x80000000
   18d40:	movt	r9, #4
   18d44:	str	r0, [sp]
   18d48:	sub	r2, r2, r1
   18d4c:	sub	r1, fp, #32
   18d50:	subs	r0, r6, r9
   18d54:	movne	r0, r6
   18d58:	bl	19ed0 <__assert_fail@plt+0x8224>
   18d5c:	cmp	r6, r9
   18d60:	mov	sl, r0
   18d64:	str	r0, [r4]
   18d68:	ldrdeq	r0, [r9]
   18d6c:	stmeq	sl, {r0, r1}
   18d70:	ldr	r1, [r8]
   18d74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18d78:	add	r0, sl, r1, lsl #3
   18d7c:	sub	r1, r2, r1
   18d80:	lsl	r2, r1, #3
   18d84:	mov	r1, #0
   18d88:	bl	11b2c <memset@plt>
   18d8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18d90:	str	r0, [r8]
   18d94:	mov	r9, sl
   18d98:	ldr	r6, [r9, r5, lsl #3]!
   18d9c:	ldr	r4, [r9, #4]!
   18da0:	ldm	r7, {r0, r1}
   18da4:	ldr	r2, [r7, #40]	; 0x28
   18da8:	ldr	r3, [r7, #44]	; 0x2c
   18dac:	orr	r8, r1, #1
   18db0:	add	r1, r7, #8
   18db4:	stm	sp, {r0, r8}
   18db8:	add	r0, sp, #8
   18dbc:	str	r1, [sp, #20]
   18dc0:	stm	r0, {r1, r2, r3}
   18dc4:	mov	r0, r4
   18dc8:	mov	r1, r6
   18dcc:	ldr	r2, [sp, #32]
   18dd0:	ldr	r3, [sp, #36]	; 0x24
   18dd4:	bl	17a70 <__assert_fail@plt+0x5dc4>
   18dd8:	cmp	r6, r0
   18ddc:	bhi	18e40 <__assert_fail@plt+0x7194>
   18de0:	add	r6, r0, #1
   18de4:	movw	r0, #4808	; 0x12c8
   18de8:	movt	r0, #4
   18dec:	str	r6, [sl, r5, lsl #3]
   18df0:	cmp	r4, r0
   18df4:	beq	18e00 <__assert_fail@plt+0x7154>
   18df8:	mov	r0, r4
   18dfc:	bl	1b22c <__assert_fail@plt+0x9580>
   18e00:	mov	r0, r6
   18e04:	bl	19cd0 <__assert_fail@plt+0x8024>
   18e08:	str	r0, [r9]
   18e0c:	mov	r4, r0
   18e10:	add	r3, sp, #8
   18e14:	ldr	r0, [r7]
   18e18:	ldr	r1, [r7, #40]	; 0x28
   18e1c:	ldr	r2, [r7, #44]	; 0x2c
   18e20:	stm	sp, {r0, r8}
   18e24:	ldr	r0, [sp, #20]
   18e28:	stm	r3, {r0, r1, r2}
   18e2c:	mov	r0, r4
   18e30:	mov	r1, r6
   18e34:	ldr	r2, [sp, #32]
   18e38:	ldr	r3, [sp, #36]	; 0x24
   18e3c:	bl	17a70 <__assert_fail@plt+0x5dc4>
   18e40:	ldr	r0, [sp, #28]
   18e44:	ldr	r1, [sp, #24]
   18e48:	str	r1, [r0]
   18e4c:	mov	r0, r4
   18e50:	sub	sp, fp, #28
   18e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e58:	bl	11c70 <abort@plt>
   18e5c:	movw	r3, #4760	; 0x1298
   18e60:	movt	r3, #4
   18e64:	b	18cc8 <__assert_fail@plt+0x701c>
   18e68:	movw	r3, #4760	; 0x1298
   18e6c:	mov	r1, r0
   18e70:	mov	r0, #0
   18e74:	mvn	r2, #0
   18e78:	movt	r3, #4
   18e7c:	b	18cc8 <__assert_fail@plt+0x701c>
   18e80:	movw	r3, #4760	; 0x1298
   18e84:	mov	r2, r1
   18e88:	mov	r1, r0
   18e8c:	mov	r0, #0
   18e90:	movt	r3, #4
   18e94:	b	18cc8 <__assert_fail@plt+0x701c>
   18e98:	push	{fp, lr}
   18e9c:	mov	fp, sp
   18ea0:	sub	sp, sp, #48	; 0x30
   18ea4:	vmov.i32	q8, #0	; 0x00000000
   18ea8:	mov	ip, #32
   18eac:	mov	r3, sp
   18eb0:	mov	lr, r2
   18eb4:	cmp	r1, #10
   18eb8:	add	r2, r3, #16
   18ebc:	vst1.64	{d16-d17}, [r3], ip
   18ec0:	vst1.64	{d16-d17}, [r3]
   18ec4:	vst1.64	{d16-d17}, [r2]
   18ec8:	beq	18ee8 <__assert_fail@plt+0x723c>
   18ecc:	str	r1, [sp]
   18ed0:	mov	r3, sp
   18ed4:	mov	r1, lr
   18ed8:	mvn	r2, #0
   18edc:	bl	18cc8 <__assert_fail@plt+0x701c>
   18ee0:	mov	sp, fp
   18ee4:	pop	{fp, pc}
   18ee8:	bl	11c70 <abort@plt>
   18eec:	push	{r4, sl, fp, lr}
   18ef0:	add	fp, sp, #8
   18ef4:	sub	sp, sp, #48	; 0x30
   18ef8:	mov	ip, r3
   18efc:	mov	r3, sp
   18f00:	vmov.i32	q8, #0	; 0x00000000
   18f04:	mov	lr, #32
   18f08:	cmp	r1, #10
   18f0c:	add	r4, r3, #16
   18f10:	vst1.64	{d16-d17}, [r3], lr
   18f14:	vst1.64	{d16-d17}, [r3]
   18f18:	vst1.64	{d16-d17}, [r4]
   18f1c:	beq	18f3c <__assert_fail@plt+0x7290>
   18f20:	str	r1, [sp]
   18f24:	mov	r1, r2
   18f28:	mov	r3, sp
   18f2c:	mov	r2, ip
   18f30:	bl	18cc8 <__assert_fail@plt+0x701c>
   18f34:	sub	sp, fp, #8
   18f38:	pop	{r4, sl, fp, pc}
   18f3c:	bl	11c70 <abort@plt>
   18f40:	push	{fp, lr}
   18f44:	mov	fp, sp
   18f48:	sub	sp, sp, #48	; 0x30
   18f4c:	mov	r3, sp
   18f50:	vmov.i32	q8, #0	; 0x00000000
   18f54:	mov	ip, #32
   18f58:	cmp	r0, #10
   18f5c:	add	r2, r3, #16
   18f60:	vst1.64	{d16-d17}, [r3], ip
   18f64:	vst1.64	{d16-d17}, [r3]
   18f68:	vst1.64	{d16-d17}, [r2]
   18f6c:	beq	18f8c <__assert_fail@plt+0x72e0>
   18f70:	str	r0, [sp]
   18f74:	mov	r3, sp
   18f78:	mov	r0, #0
   18f7c:	mvn	r2, #0
   18f80:	bl	18cc8 <__assert_fail@plt+0x701c>
   18f84:	mov	sp, fp
   18f88:	pop	{fp, pc}
   18f8c:	bl	11c70 <abort@plt>
   18f90:	push	{fp, lr}
   18f94:	mov	fp, sp
   18f98:	sub	sp, sp, #48	; 0x30
   18f9c:	mov	r3, sp
   18fa0:	vmov.i32	q8, #0	; 0x00000000
   18fa4:	mov	ip, #32
   18fa8:	cmp	r0, #10
   18fac:	add	lr, r3, #16
   18fb0:	vst1.64	{d16-d17}, [r3], ip
   18fb4:	vst1.64	{d16-d17}, [r3]
   18fb8:	vst1.64	{d16-d17}, [lr]
   18fbc:	beq	18fd8 <__assert_fail@plt+0x732c>
   18fc0:	str	r0, [sp]
   18fc4:	mov	r3, sp
   18fc8:	mov	r0, #0
   18fcc:	bl	18cc8 <__assert_fail@plt+0x701c>
   18fd0:	mov	sp, fp
   18fd4:	pop	{fp, pc}
   18fd8:	bl	11c70 <abort@plt>
   18fdc:	push	{r4, sl, fp, lr}
   18fe0:	add	fp, sp, #8
   18fe4:	sub	sp, sp, #48	; 0x30
   18fe8:	mov	lr, r0
   18fec:	movw	r0, #4760	; 0x1298
   18ff0:	mov	r3, #32
   18ff4:	mov	ip, r1
   18ff8:	mov	r4, #1
   18ffc:	movt	r0, #4
   19000:	add	r1, r0, #16
   19004:	vld1.64	{d16-d17}, [r0], r3
   19008:	mov	r3, sp
   1900c:	vld1.64	{d18-d19}, [r1]
   19010:	add	r1, r3, #16
   19014:	vld1.64	{d20-d21}, [r0]
   19018:	add	r0, r3, #32
   1901c:	vst1.64	{d18-d19}, [r1]
   19020:	mov	r1, r3
   19024:	vst1.64	{d20-d21}, [r0]
   19028:	mov	r0, #28
   1902c:	and	r0, r0, r2, lsr #3
   19030:	and	r2, r2, #31
   19034:	vst1.64	{d16-d17}, [r1], r0
   19038:	ldr	r0, [r1, #8]
   1903c:	bic	r4, r4, r0, lsr r2
   19040:	eor	r0, r0, r4, lsl r2
   19044:	mov	r2, ip
   19048:	str	r0, [r1, #8]
   1904c:	mov	r0, #0
   19050:	mov	r1, lr
   19054:	bl	18cc8 <__assert_fail@plt+0x701c>
   19058:	sub	sp, fp, #8
   1905c:	pop	{r4, sl, fp, pc}
   19060:	push	{fp, lr}
   19064:	mov	fp, sp
   19068:	sub	sp, sp, #48	; 0x30
   1906c:	mov	ip, r0
   19070:	movw	r0, #4760	; 0x1298
   19074:	mov	r3, #32
   19078:	movt	r0, #4
   1907c:	add	r2, r0, #16
   19080:	vld1.64	{d16-d17}, [r0], r3
   19084:	mov	r3, sp
   19088:	vld1.64	{d18-d19}, [r2]
   1908c:	add	r2, r3, #16
   19090:	vld1.64	{d20-d21}, [r0]
   19094:	add	r0, r3, #32
   19098:	vst1.64	{d18-d19}, [r2]
   1909c:	mov	r2, r3
   190a0:	vst1.64	{d20-d21}, [r0]
   190a4:	mov	r0, #28
   190a8:	and	r0, r0, r1, lsr #3
   190ac:	and	r1, r1, #31
   190b0:	vst1.64	{d16-d17}, [r2], r0
   190b4:	mov	r0, #1
   190b8:	ldr	lr, [r2, #8]
   190bc:	bic	r0, r0, lr, lsr r1
   190c0:	eor	r0, lr, r0, lsl r1
   190c4:	mov	r1, ip
   190c8:	str	r0, [r2, #8]
   190cc:	mov	r0, #0
   190d0:	mvn	r2, #0
   190d4:	bl	18cc8 <__assert_fail@plt+0x701c>
   190d8:	mov	sp, fp
   190dc:	pop	{fp, pc}
   190e0:	push	{fp, lr}
   190e4:	mov	fp, sp
   190e8:	sub	sp, sp, #48	; 0x30
   190ec:	movw	r2, #4760	; 0x1298
   190f0:	mov	r3, #32
   190f4:	mov	r1, r0
   190f8:	movt	r2, #4
   190fc:	add	r0, r2, #16
   19100:	vld1.64	{d16-d17}, [r2], r3
   19104:	mov	r3, sp
   19108:	vld1.64	{d18-d19}, [r0]
   1910c:	add	r0, r3, #16
   19110:	vld1.64	{d20-d21}, [r2]
   19114:	mov	r2, r3
   19118:	vst1.64	{d18-d19}, [r0]
   1911c:	add	r0, r3, #32
   19120:	vst1.64	{d20-d21}, [r0]
   19124:	mov	r0, #12
   19128:	vst1.64	{d16-d17}, [r2], r0
   1912c:	ldr	r0, [r2]
   19130:	orr	r0, r0, #67108864	; 0x4000000
   19134:	str	r0, [r2]
   19138:	mov	r0, #0
   1913c:	mvn	r2, #0
   19140:	bl	18cc8 <__assert_fail@plt+0x701c>
   19144:	mov	sp, fp
   19148:	pop	{fp, pc}
   1914c:	push	{fp, lr}
   19150:	mov	fp, sp
   19154:	sub	sp, sp, #48	; 0x30
   19158:	mov	ip, r1
   1915c:	mov	r1, r0
   19160:	movw	r0, #4760	; 0x1298
   19164:	mov	r3, #32
   19168:	movt	r0, #4
   1916c:	add	r2, r0, #16
   19170:	vld1.64	{d16-d17}, [r0], r3
   19174:	mov	r3, sp
   19178:	vld1.64	{d18-d19}, [r2]
   1917c:	add	r2, r3, #16
   19180:	vld1.64	{d20-d21}, [r0]
   19184:	add	r0, r3, #32
   19188:	vst1.64	{d18-d19}, [r2]
   1918c:	mov	r2, r3
   19190:	vst1.64	{d20-d21}, [r0]
   19194:	mov	r0, #12
   19198:	vst1.64	{d16-d17}, [r2], r0
   1919c:	ldr	r0, [r2]
   191a0:	orr	r0, r0, #67108864	; 0x4000000
   191a4:	str	r0, [r2]
   191a8:	mov	r0, #0
   191ac:	mov	r2, ip
   191b0:	bl	18cc8 <__assert_fail@plt+0x701c>
   191b4:	mov	sp, fp
   191b8:	pop	{fp, pc}
   191bc:	push	{r4, sl, fp, lr}
   191c0:	add	fp, sp, #8
   191c4:	sub	sp, sp, #96	; 0x60
   191c8:	mov	ip, r2
   191cc:	mov	r2, sp
   191d0:	vmov.i32	q8, #0	; 0x00000000
   191d4:	mov	r4, #28
   191d8:	cmp	r1, #10
   191dc:	mov	r3, r2
   191e0:	add	lr, r2, #16
   191e4:	vst1.64	{d16-d17}, [r3], r4
   191e8:	vst1.64	{d16-d17}, [lr]
   191ec:	vst1.32	{d16-d17}, [r3]
   191f0:	beq	19240 <__assert_fail@plt+0x7594>
   191f4:	vld1.64	{d16-d17}, [r2], r4
   191f8:	vld1.64	{d18-d19}, [lr]
   191fc:	add	r3, sp, #48	; 0x30
   19200:	add	r4, r3, #4
   19204:	vld1.32	{d20-d21}, [r2]
   19208:	add	r2, r3, #20
   1920c:	vst1.32	{d16-d17}, [r4]
   19210:	vst1.32	{d18-d19}, [r2]
   19214:	add	r2, r3, #32
   19218:	vst1.32	{d20-d21}, [r2]
   1921c:	str	r1, [sp, #48]	; 0x30
   19220:	mvn	r2, #0
   19224:	ldr	r1, [sp, #60]	; 0x3c
   19228:	orr	r1, r1, #67108864	; 0x4000000
   1922c:	str	r1, [sp, #60]	; 0x3c
   19230:	mov	r1, ip
   19234:	bl	18cc8 <__assert_fail@plt+0x701c>
   19238:	sub	sp, fp, #8
   1923c:	pop	{r4, sl, fp, pc}
   19240:	bl	11c70 <abort@plt>
   19244:	push	{r4, r5, fp, lr}
   19248:	add	fp, sp, #8
   1924c:	sub	sp, sp, #48	; 0x30
   19250:	mov	ip, r3
   19254:	movw	r3, #4760	; 0x1298
   19258:	mov	lr, #32
   1925c:	cmp	r1, #0
   19260:	mov	r5, sp
   19264:	movt	r3, #4
   19268:	cmpne	r2, #0
   1926c:	add	r4, r3, #16
   19270:	vld1.64	{d16-d17}, [r3], lr
   19274:	vld1.64	{d18-d19}, [r4]
   19278:	add	r4, r5, #16
   1927c:	vld1.64	{d20-d21}, [r3]
   19280:	vst1.64	{d16-d17}, [r5], lr
   19284:	mov	r3, #10
   19288:	vst1.64	{d18-d19}, [r4]
   1928c:	vst1.64	{d20-d21}, [r5]
   19290:	str	r3, [sp]
   19294:	bne	1929c <__assert_fail@plt+0x75f0>
   19298:	bl	11c70 <abort@plt>
   1929c:	str	r2, [sp, #44]	; 0x2c
   192a0:	str	r1, [sp, #40]	; 0x28
   192a4:	mov	r3, sp
   192a8:	mov	r1, ip
   192ac:	mvn	r2, #0
   192b0:	bl	18cc8 <__assert_fail@plt+0x701c>
   192b4:	sub	sp, fp, #8
   192b8:	pop	{r4, r5, fp, pc}
   192bc:	push	{r4, r5, fp, lr}
   192c0:	add	fp, sp, #8
   192c4:	sub	sp, sp, #48	; 0x30
   192c8:	mov	lr, r3
   192cc:	movw	r3, #4760	; 0x1298
   192d0:	mov	ip, #32
   192d4:	cmp	r1, #0
   192d8:	mov	r5, sp
   192dc:	movt	r3, #4
   192e0:	cmpne	r2, #0
   192e4:	add	r4, r3, #16
   192e8:	vld1.64	{d16-d17}, [r3], ip
   192ec:	vld1.64	{d18-d19}, [r4]
   192f0:	add	r4, r5, #16
   192f4:	vld1.64	{d20-d21}, [r3]
   192f8:	vst1.64	{d16-d17}, [r5], ip
   192fc:	mov	r3, #10
   19300:	vst1.64	{d18-d19}, [r4]
   19304:	vst1.64	{d20-d21}, [r5]
   19308:	str	r3, [sp]
   1930c:	bne	19314 <__assert_fail@plt+0x7668>
   19310:	bl	11c70 <abort@plt>
   19314:	ldr	ip, [fp, #8]
   19318:	str	r2, [sp, #44]	; 0x2c
   1931c:	str	r1, [sp, #40]	; 0x28
   19320:	mov	r3, sp
   19324:	mov	r1, lr
   19328:	mov	r2, ip
   1932c:	bl	18cc8 <__assert_fail@plt+0x701c>
   19330:	sub	sp, fp, #8
   19334:	pop	{r4, r5, fp, pc}
   19338:	push	{r4, sl, fp, lr}
   1933c:	add	fp, sp, #8
   19340:	sub	sp, sp, #48	; 0x30
   19344:	mov	ip, r2
   19348:	movw	r2, #4760	; 0x1298
   1934c:	mov	lr, #32
   19350:	cmp	r0, #0
   19354:	mov	r4, sp
   19358:	movt	r2, #4
   1935c:	cmpne	r1, #0
   19360:	add	r3, r2, #16
   19364:	vld1.64	{d16-d17}, [r2], lr
   19368:	vld1.64	{d18-d19}, [r3]
   1936c:	add	r3, r4, #16
   19370:	vld1.64	{d20-d21}, [r2]
   19374:	vst1.64	{d16-d17}, [r4], lr
   19378:	mov	r2, #10
   1937c:	vst1.64	{d18-d19}, [r3]
   19380:	vst1.64	{d20-d21}, [r4]
   19384:	str	r2, [sp]
   19388:	bne	19390 <__assert_fail@plt+0x76e4>
   1938c:	bl	11c70 <abort@plt>
   19390:	str	r1, [sp, #44]	; 0x2c
   19394:	str	r0, [sp, #40]	; 0x28
   19398:	mov	r3, sp
   1939c:	mov	r0, #0
   193a0:	mov	r1, ip
   193a4:	mvn	r2, #0
   193a8:	bl	18cc8 <__assert_fail@plt+0x701c>
   193ac:	sub	sp, fp, #8
   193b0:	pop	{r4, sl, fp, pc}
   193b4:	push	{r4, r5, fp, lr}
   193b8:	add	fp, sp, #8
   193bc:	sub	sp, sp, #48	; 0x30
   193c0:	mov	lr, r2
   193c4:	movw	r2, #4760	; 0x1298
   193c8:	mov	ip, r3
   193cc:	mov	r3, #32
   193d0:	cmp	r0, #0
   193d4:	mov	r5, sp
   193d8:	movt	r2, #4
   193dc:	cmpne	r1, #0
   193e0:	add	r4, r2, #16
   193e4:	vld1.64	{d16-d17}, [r2], r3
   193e8:	vld1.64	{d18-d19}, [r4]
   193ec:	add	r4, r5, #16
   193f0:	vld1.64	{d20-d21}, [r2]
   193f4:	vst1.64	{d16-d17}, [r5], r3
   193f8:	mov	r2, #10
   193fc:	vst1.64	{d18-d19}, [r4]
   19400:	vst1.64	{d20-d21}, [r5]
   19404:	str	r2, [sp]
   19408:	bne	19410 <__assert_fail@plt+0x7764>
   1940c:	bl	11c70 <abort@plt>
   19410:	str	r1, [sp, #44]	; 0x2c
   19414:	str	r0, [sp, #40]	; 0x28
   19418:	mov	r3, sp
   1941c:	mov	r0, #0
   19420:	mov	r1, lr
   19424:	mov	r2, ip
   19428:	bl	18cc8 <__assert_fail@plt+0x701c>
   1942c:	sub	sp, fp, #8
   19430:	pop	{r4, r5, fp, pc}
   19434:	movw	r3, #4552	; 0x11c8
   19438:	movt	r3, #4
   1943c:	b	18cc8 <__assert_fail@plt+0x701c>
   19440:	movw	r3, #4552	; 0x11c8
   19444:	mov	r2, r1
   19448:	mov	r1, r0
   1944c:	mov	r0, #0
   19450:	movt	r3, #4
   19454:	b	18cc8 <__assert_fail@plt+0x701c>
   19458:	movw	r3, #4552	; 0x11c8
   1945c:	mvn	r2, #0
   19460:	movt	r3, #4
   19464:	b	18cc8 <__assert_fail@plt+0x701c>
   19468:	movw	r3, #4552	; 0x11c8
   1946c:	mov	r1, r0
   19470:	mov	r0, #0
   19474:	mvn	r2, #0
   19478:	movt	r3, #4
   1947c:	b	18cc8 <__assert_fail@plt+0x701c>
   19480:	push	{r4, r5, fp, lr}
   19484:	add	fp, sp, #8
   19488:	mov	r5, r0
   1948c:	mov	r4, r1
   19490:	mov	r0, #0
   19494:	mov	r2, #5
   19498:	mov	r1, r5
   1949c:	bl	11940 <dcgettext@plt>
   194a0:	cmp	r0, r5
   194a4:	popne	{r4, r5, fp, pc}
   194a8:	bl	2e684 <__assert_fail@plt+0x1c9d8>
   194ac:	ldrb	r1, [r0]
   194b0:	and	r1, r1, #223	; 0xdf
   194b4:	cmp	r1, #71	; 0x47
   194b8:	beq	19520 <__assert_fail@plt+0x7874>
   194bc:	cmp	r1, #85	; 0x55
   194c0:	bne	19544 <__assert_fail@plt+0x7898>
   194c4:	ldrb	r1, [r0, #1]
   194c8:	and	r1, r1, #223	; 0xdf
   194cc:	cmp	r1, #84	; 0x54
   194d0:	bne	19544 <__assert_fail@plt+0x7898>
   194d4:	ldrb	r1, [r0, #2]
   194d8:	and	r1, r1, #223	; 0xdf
   194dc:	cmp	r1, #70	; 0x46
   194e0:	ldrbeq	r1, [r0, #3]
   194e4:	cmpeq	r1, #45	; 0x2d
   194e8:	bne	19544 <__assert_fail@plt+0x7898>
   194ec:	ldrb	r1, [r0, #4]
   194f0:	cmp	r1, #56	; 0x38
   194f4:	ldrbeq	r0, [r0, #5]
   194f8:	cmpeq	r0, #0
   194fc:	bne	19544 <__assert_fail@plt+0x7898>
   19500:	ldrb	r1, [r5]
   19504:	movw	r2, #436	; 0x1b4
   19508:	movw	r0, #440	; 0x1b8
   1950c:	movt	r2, #3
   19510:	movt	r0, #3
   19514:	cmp	r1, #96	; 0x60
   19518:	moveq	r0, r2
   1951c:	pop	{r4, r5, fp, pc}
   19520:	ldrb	r1, [r0, #1]
   19524:	and	r1, r1, #223	; 0xdf
   19528:	cmp	r1, #66	; 0x42
   1952c:	bne	19544 <__assert_fail@plt+0x7898>
   19530:	ldrb	r1, [r0, #2]
   19534:	cmp	r1, #49	; 0x31
   19538:	ldrbeq	r1, [r0, #3]
   1953c:	cmpeq	r1, #56	; 0x38
   19540:	beq	19560 <__assert_fail@plt+0x78b4>
   19544:	movw	r1, #432	; 0x1b0
   19548:	movw	r0, #63201	; 0xf6e1
   1954c:	cmp	r4, #9
   19550:	movt	r1, #3
   19554:	movt	r0, #2
   19558:	moveq	r0, r1
   1955c:	pop	{r4, r5, fp, pc}
   19560:	ldrb	r1, [r0, #4]
   19564:	cmp	r1, #48	; 0x30
   19568:	ldrbeq	r1, [r0, #5]
   1956c:	cmpeq	r1, #51	; 0x33
   19570:	bne	19544 <__assert_fail@plt+0x7898>
   19574:	ldrb	r1, [r0, #6]
   19578:	cmp	r1, #48	; 0x30
   1957c:	ldrbeq	r0, [r0, #7]
   19580:	cmpeq	r0, #0
   19584:	bne	19544 <__assert_fail@plt+0x7898>
   19588:	ldrb	r1, [r5]
   1958c:	movw	r2, #444	; 0x1bc
   19590:	movw	r0, #448	; 0x1c0
   19594:	movt	r2, #3
   19598:	movt	r0, #3
   1959c:	b	19514 <__assert_fail@plt+0x7868>
   195a0:	push	{r4, r5, fp, lr}
   195a4:	add	fp, sp, #8
   195a8:	mov	r4, r1
   195ac:	mov	r1, #0
   195b0:	mov	r5, r0
   195b4:	mov	r2, r4
   195b8:	bl	11b68 <memchr@plt>
   195bc:	rsb	r1, r5, #1
   195c0:	cmp	r0, #0
   195c4:	addne	r4, r1, r0
   195c8:	mov	r0, r4
   195cc:	pop	{r4, r5, fp, pc}
   195d0:	push	{r4, r5, r6, r7, fp, lr}
   195d4:	add	fp, sp, #16
   195d8:	mov	r4, r0
   195dc:	cmp	r0, #2
   195e0:	movhi	r0, r4
   195e4:	pophi	{r4, r5, r6, r7, fp, pc}
   195e8:	mov	r0, r4
   195ec:	bl	2e8a8 <__assert_fail@plt+0x1cbfc>
   195f0:	mov	r5, r0
   195f4:	bl	11af0 <__errno_location@plt>
   195f8:	ldr	r7, [r0]
   195fc:	mov	r6, r0
   19600:	mov	r0, r4
   19604:	bl	11c88 <close@plt>
   19608:	mov	r0, r5
   1960c:	str	r7, [r6]
   19610:	pop	{r4, r5, r6, r7, fp, pc}
   19614:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19618:	add	fp, sp, #24
   1961c:	sub	sp, sp, #32
   19620:	ldr	r7, [fp, #12]
   19624:	ldr	r6, [fp, #8]
   19628:	mov	r4, r2
   1962c:	mov	r5, r0
   19630:	cmp	r1, #0
   19634:	beq	19654 <__assert_fail@plt+0x79a8>
   19638:	mov	r2, r1
   1963c:	movw	r1, #536	; 0x218
   19640:	str	r3, [sp]
   19644:	mov	r0, r5
   19648:	mov	r3, r4
   1964c:	movt	r1, #3
   19650:	b	19664 <__assert_fail@plt+0x79b8>
   19654:	movw	r1, #548	; 0x224
   19658:	mov	r0, r5
   1965c:	mov	r2, r4
   19660:	movt	r1, #3
   19664:	bl	11ad8 <fprintf@plt>
   19668:	movw	r1, #555	; 0x22b
   1966c:	mov	r0, #0
   19670:	mov	r2, #5
   19674:	movt	r1, #3
   19678:	bl	11940 <dcgettext@plt>
   1967c:	movw	r1, #1251	; 0x4e3
   19680:	mov	r2, r0
   19684:	mov	r0, r5
   19688:	movw	r3, #2022	; 0x7e6
   1968c:	movt	r1, #3
   19690:	bl	11ad8 <fprintf@plt>
   19694:	mov	r0, #10
   19698:	mov	r1, r5
   1969c:	bl	11bc8 <fputc@plt>
   196a0:	movw	r1, #559	; 0x22f
   196a4:	mov	r0, #0
   196a8:	mov	r2, #5
   196ac:	movt	r1, #3
   196b0:	bl	11940 <dcgettext@plt>
   196b4:	movw	r2, #730	; 0x2da
   196b8:	mov	r1, r0
   196bc:	mov	r0, r5
   196c0:	movt	r2, #3
   196c4:	bl	11ad8 <fprintf@plt>
   196c8:	mov	r0, #10
   196cc:	mov	r1, r5
   196d0:	bl	11bc8 <fputc@plt>
   196d4:	cmp	r7, #9
   196d8:	bhi	19714 <__assert_fail@plt+0x7a68>
   196dc:	add	r0, pc, #0
   196e0:	ldr	pc, [r0, r7, lsl #2]
   196e4:	andeq	r9, r1, ip, lsl #14
   196e8:	andeq	r9, r1, r0, lsr #14
   196ec:	andeq	r9, r1, ip, asr #14
   196f0:	andeq	r9, r1, r8, ror r7
   196f4:	andeq	r9, r1, r0, lsr #15
   196f8:	andeq	r9, r1, ip, asr #15
   196fc:	andeq	r9, r1, r0, lsl #16
   19700:	andeq	r9, r1, r0, asr #16
   19704:	ldrdeq	r9, [r1], -ip
   19708:	andeq	r9, r1, r4, lsl #17
   1970c:	sub	sp, fp, #24
   19710:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19714:	movw	r1, #1083	; 0x43b
   19718:	movt	r1, #3
   1971c:	b	1988c <__assert_fail@plt+0x7be0>
   19720:	movw	r1, #764	; 0x2fc
   19724:	mov	r0, #0
   19728:	mov	r2, #5
   1972c:	movt	r1, #3
   19730:	bl	11940 <dcgettext@plt>
   19734:	ldr	r2, [r6]
   19738:	mov	r1, r0
   1973c:	mov	r0, r5
   19740:	sub	sp, fp, #24
   19744:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19748:	b	11ad8 <fprintf@plt>
   1974c:	movw	r1, #780	; 0x30c
   19750:	mov	r0, #0
   19754:	mov	r2, #5
   19758:	movt	r1, #3
   1975c:	bl	11940 <dcgettext@plt>
   19760:	ldm	r6, {r2, r3}
   19764:	mov	r1, r0
   19768:	mov	r0, r5
   1976c:	sub	sp, fp, #24
   19770:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19774:	b	11ad8 <fprintf@plt>
   19778:	movw	r1, #803	; 0x323
   1977c:	mov	r0, #0
   19780:	mov	r2, #5
   19784:	movt	r1, #3
   19788:	bl	11940 <dcgettext@plt>
   1978c:	mov	r1, r0
   19790:	ldm	r6, {r2, r3}
   19794:	ldr	r0, [r6, #8]
   19798:	str	r0, [sp]
   1979c:	b	19838 <__assert_fail@plt+0x7b8c>
   197a0:	movw	r1, #831	; 0x33f
   197a4:	mov	r0, #0
   197a8:	mov	r2, #5
   197ac:	movt	r1, #3
   197b0:	bl	11940 <dcgettext@plt>
   197b4:	ldm	r6, {r2, r3}
   197b8:	mov	r1, r0
   197bc:	ldr	r0, [r6, #8]
   197c0:	ldr	r7, [r6, #12]
   197c4:	stm	sp, {r0, r7}
   197c8:	b	19838 <__assert_fail@plt+0x7b8c>
   197cc:	movw	r1, #863	; 0x35f
   197d0:	mov	r0, #0
   197d4:	mov	r2, #5
   197d8:	movt	r1, #3
   197dc:	bl	11940 <dcgettext@plt>
   197e0:	ldm	r6, {r2, r3}
   197e4:	mov	r1, r0
   197e8:	ldr	r0, [r6, #8]
   197ec:	ldr	r7, [r6, #12]
   197f0:	ldr	r6, [r6, #16]
   197f4:	stm	sp, {r0, r7}
   197f8:	str	r6, [sp, #8]
   197fc:	b	19838 <__assert_fail@plt+0x7b8c>
   19800:	movw	r1, #899	; 0x383
   19804:	mov	r0, #0
   19808:	mov	r2, #5
   1980c:	movt	r1, #3
   19810:	bl	11940 <dcgettext@plt>
   19814:	ldm	r6, {r2, r3}
   19818:	mov	r1, r0
   1981c:	ldr	r0, [r6, #8]
   19820:	ldr	r7, [r6, #12]
   19824:	ldr	r4, [r6, #16]
   19828:	ldr	r6, [r6, #20]
   1982c:	stm	sp, {r0, r7}
   19830:	str	r4, [sp, #8]
   19834:	str	r6, [sp, #12]
   19838:	mov	r0, r5
   1983c:	b	1992c <__assert_fail@plt+0x7c80>
   19840:	movw	r1, #939	; 0x3ab
   19844:	mov	r0, #0
   19848:	mov	r2, #5
   1984c:	movt	r1, #3
   19850:	bl	11940 <dcgettext@plt>
   19854:	ldm	r6, {r2, r3}
   19858:	mov	ip, r0
   1985c:	ldr	r0, [r6, #8]
   19860:	ldr	r7, [r6, #12]
   19864:	ldr	r4, [r6, #16]
   19868:	ldr	r1, [r6, #20]
   1986c:	ldr	r6, [r6, #24]
   19870:	stm	sp, {r0, r7}
   19874:	str	r4, [sp, #8]
   19878:	str	r1, [sp, #12]
   1987c:	str	r6, [sp, #16]
   19880:	b	19924 <__assert_fail@plt+0x7c78>
   19884:	movw	r1, #1031	; 0x407
   19888:	movt	r1, #3
   1988c:	mov	r0, #0
   19890:	mov	r2, #5
   19894:	bl	11940 <dcgettext@plt>
   19898:	mov	ip, r0
   1989c:	ldr	r2, [r6]
   198a0:	ldr	r3, [r6, #4]
   198a4:	ldr	r0, [r6, #8]
   198a8:	ldr	r7, [r6, #12]
   198ac:	ldr	r4, [r6, #16]
   198b0:	ldr	r1, [r6, #20]
   198b4:	ldr	lr, [r6, #24]
   198b8:	ldr	r8, [r6, #28]
   198bc:	ldr	r6, [r6, #32]
   198c0:	stm	sp, {r0, r7}
   198c4:	str	r4, [sp, #8]
   198c8:	str	r1, [sp, #12]
   198cc:	str	lr, [sp, #16]
   198d0:	str	r8, [sp, #20]
   198d4:	str	r6, [sp, #24]
   198d8:	b	19924 <__assert_fail@plt+0x7c78>
   198dc:	movw	r1, #983	; 0x3d7
   198e0:	mov	r0, #0
   198e4:	mov	r2, #5
   198e8:	movt	r1, #3
   198ec:	bl	11940 <dcgettext@plt>
   198f0:	ldm	r6, {r2, r3}
   198f4:	mov	ip, r0
   198f8:	ldr	r0, [r6, #8]
   198fc:	ldr	r7, [r6, #12]
   19900:	ldr	r4, [r6, #16]
   19904:	ldr	r1, [r6, #20]
   19908:	ldr	lr, [r6, #24]
   1990c:	ldr	r6, [r6, #28]
   19910:	stm	sp, {r0, r7}
   19914:	str	r4, [sp, #8]
   19918:	str	r1, [sp, #12]
   1991c:	str	lr, [sp, #16]
   19920:	str	r6, [sp, #20]
   19924:	mov	r0, r5
   19928:	mov	r1, ip
   1992c:	bl	11ad8 <fprintf@plt>
   19930:	sub	sp, fp, #24
   19934:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19938:	push	{r4, sl, fp, lr}
   1993c:	add	fp, sp, #8
   19940:	sub	sp, sp, #8
   19944:	ldr	ip, [fp, #8]
   19948:	mov	lr, #0
   1994c:	ldr	r4, [ip, lr, lsl #2]
   19950:	add	lr, lr, #1
   19954:	cmp	r4, #0
   19958:	bne	1994c <__assert_fail@plt+0x7ca0>
   1995c:	sub	r4, lr, #1
   19960:	str	ip, [sp]
   19964:	str	r4, [sp, #4]
   19968:	bl	19614 <__assert_fail@plt+0x7968>
   1996c:	sub	sp, fp, #8
   19970:	pop	{r4, sl, fp, pc}
   19974:	push	{fp, lr}
   19978:	mov	fp, sp
   1997c:	sub	sp, sp, #48	; 0x30
   19980:	ldr	ip, [fp, #8]
   19984:	ldr	lr, [ip]
   19988:	cmp	lr, #0
   1998c:	str	lr, [sp, #8]
   19990:	beq	19a2c <__assert_fail@plt+0x7d80>
   19994:	ldr	lr, [ip, #4]
   19998:	cmp	lr, #0
   1999c:	str	lr, [sp, #12]
   199a0:	beq	19a34 <__assert_fail@plt+0x7d88>
   199a4:	ldr	lr, [ip, #8]
   199a8:	cmp	lr, #0
   199ac:	str	lr, [sp, #16]
   199b0:	beq	19a3c <__assert_fail@plt+0x7d90>
   199b4:	ldr	lr, [ip, #12]
   199b8:	cmp	lr, #0
   199bc:	str	lr, [sp, #20]
   199c0:	beq	19a44 <__assert_fail@plt+0x7d98>
   199c4:	ldr	lr, [ip, #16]
   199c8:	cmp	lr, #0
   199cc:	str	lr, [sp, #24]
   199d0:	beq	19a4c <__assert_fail@plt+0x7da0>
   199d4:	ldr	lr, [ip, #20]
   199d8:	cmp	lr, #0
   199dc:	str	lr, [sp, #28]
   199e0:	beq	19a54 <__assert_fail@plt+0x7da8>
   199e4:	ldr	lr, [ip, #24]
   199e8:	cmp	lr, #0
   199ec:	str	lr, [sp, #32]
   199f0:	beq	19a5c <__assert_fail@plt+0x7db0>
   199f4:	ldr	lr, [ip, #28]
   199f8:	cmp	lr, #0
   199fc:	str	lr, [sp, #36]	; 0x24
   19a00:	beq	19a64 <__assert_fail@plt+0x7db8>
   19a04:	ldr	lr, [ip, #32]
   19a08:	cmp	lr, #0
   19a0c:	str	lr, [sp, #40]	; 0x28
   19a10:	beq	19a6c <__assert_fail@plt+0x7dc0>
   19a14:	ldr	lr, [ip, #36]	; 0x24
   19a18:	mov	ip, #10
   19a1c:	cmp	lr, #0
   19a20:	str	lr, [sp, #44]	; 0x2c
   19a24:	movweq	ip, #9
   19a28:	b	19a70 <__assert_fail@plt+0x7dc4>
   19a2c:	mov	ip, #0
   19a30:	b	19a70 <__assert_fail@plt+0x7dc4>
   19a34:	mov	ip, #1
   19a38:	b	19a70 <__assert_fail@plt+0x7dc4>
   19a3c:	mov	ip, #2
   19a40:	b	19a70 <__assert_fail@plt+0x7dc4>
   19a44:	mov	ip, #3
   19a48:	b	19a70 <__assert_fail@plt+0x7dc4>
   19a4c:	mov	ip, #4
   19a50:	b	19a70 <__assert_fail@plt+0x7dc4>
   19a54:	mov	ip, #5
   19a58:	b	19a70 <__assert_fail@plt+0x7dc4>
   19a5c:	mov	ip, #6
   19a60:	b	19a70 <__assert_fail@plt+0x7dc4>
   19a64:	mov	ip, #7
   19a68:	b	19a70 <__assert_fail@plt+0x7dc4>
   19a6c:	mov	ip, #8
   19a70:	add	lr, sp, #8
   19a74:	str	ip, [sp, #4]
   19a78:	str	lr, [sp]
   19a7c:	bl	19614 <__assert_fail@plt+0x7968>
   19a80:	mov	sp, fp
   19a84:	pop	{fp, pc}
   19a88:	push	{fp, lr}
   19a8c:	mov	fp, sp
   19a90:	sub	sp, sp, #56	; 0x38
   19a94:	add	ip, fp, #8
   19a98:	str	ip, [sp, #12]
   19a9c:	ldr	lr, [fp, #8]
   19aa0:	cmp	lr, #0
   19aa4:	str	lr, [sp, #16]
   19aa8:	beq	19b44 <__assert_fail@plt+0x7e98>
   19aac:	ldr	lr, [ip, #4]
   19ab0:	cmp	lr, #0
   19ab4:	str	lr, [sp, #20]
   19ab8:	beq	19b4c <__assert_fail@plt+0x7ea0>
   19abc:	ldr	lr, [ip, #8]
   19ac0:	cmp	lr, #0
   19ac4:	str	lr, [sp, #24]
   19ac8:	beq	19b54 <__assert_fail@plt+0x7ea8>
   19acc:	ldr	lr, [ip, #12]
   19ad0:	cmp	lr, #0
   19ad4:	str	lr, [sp, #28]
   19ad8:	beq	19b5c <__assert_fail@plt+0x7eb0>
   19adc:	ldr	lr, [ip, #16]
   19ae0:	cmp	lr, #0
   19ae4:	str	lr, [sp, #32]
   19ae8:	beq	19b64 <__assert_fail@plt+0x7eb8>
   19aec:	ldr	lr, [ip, #20]
   19af0:	cmp	lr, #0
   19af4:	str	lr, [sp, #36]	; 0x24
   19af8:	beq	19b6c <__assert_fail@plt+0x7ec0>
   19afc:	ldr	lr, [ip, #24]
   19b00:	cmp	lr, #0
   19b04:	str	lr, [sp, #40]	; 0x28
   19b08:	beq	19b74 <__assert_fail@plt+0x7ec8>
   19b0c:	ldr	lr, [ip, #28]
   19b10:	cmp	lr, #0
   19b14:	str	lr, [sp, #44]	; 0x2c
   19b18:	beq	19b7c <__assert_fail@plt+0x7ed0>
   19b1c:	ldr	lr, [ip, #32]
   19b20:	cmp	lr, #0
   19b24:	str	lr, [sp, #48]	; 0x30
   19b28:	beq	19b84 <__assert_fail@plt+0x7ed8>
   19b2c:	ldr	lr, [ip, #36]	; 0x24
   19b30:	mov	ip, #10
   19b34:	cmp	lr, #0
   19b38:	str	lr, [sp, #52]	; 0x34
   19b3c:	movweq	ip, #9
   19b40:	b	19b88 <__assert_fail@plt+0x7edc>
   19b44:	mov	ip, #0
   19b48:	b	19b88 <__assert_fail@plt+0x7edc>
   19b4c:	mov	ip, #1
   19b50:	b	19b88 <__assert_fail@plt+0x7edc>
   19b54:	mov	ip, #2
   19b58:	b	19b88 <__assert_fail@plt+0x7edc>
   19b5c:	mov	ip, #3
   19b60:	b	19b88 <__assert_fail@plt+0x7edc>
   19b64:	mov	ip, #4
   19b68:	b	19b88 <__assert_fail@plt+0x7edc>
   19b6c:	mov	ip, #5
   19b70:	b	19b88 <__assert_fail@plt+0x7edc>
   19b74:	mov	ip, #6
   19b78:	b	19b88 <__assert_fail@plt+0x7edc>
   19b7c:	mov	ip, #7
   19b80:	b	19b88 <__assert_fail@plt+0x7edc>
   19b84:	mov	ip, #8
   19b88:	add	lr, sp, #16
   19b8c:	str	ip, [sp, #4]
   19b90:	str	lr, [sp]
   19b94:	bl	19614 <__assert_fail@plt+0x7968>
   19b98:	mov	sp, fp
   19b9c:	pop	{fp, pc}
   19ba0:	push	{fp, lr}
   19ba4:	mov	fp, sp
   19ba8:	movw	r0, #4628	; 0x1214
   19bac:	movt	r0, #4
   19bb0:	ldr	r1, [r0]
   19bb4:	mov	r0, #10
   19bb8:	bl	11bc8 <fputc@plt>
   19bbc:	movw	r1, #1143	; 0x477
   19bc0:	mov	r0, #0
   19bc4:	mov	r2, #5
   19bc8:	movt	r1, #3
   19bcc:	bl	11940 <dcgettext@plt>
   19bd0:	movw	r1, #4
   19bd4:	movt	r1, #3
   19bd8:	bl	11868 <printf@plt>
   19bdc:	movw	r1, #1163	; 0x48b
   19be0:	mov	r0, #0
   19be4:	mov	r2, #5
   19be8:	movt	r1, #3
   19bec:	bl	11940 <dcgettext@plt>
   19bf0:	movw	r1, #64869	; 0xfd65
   19bf4:	movw	r2, #65454	; 0xffae
   19bf8:	movt	r1, #2
   19bfc:	movt	r2, #2
   19c00:	bl	11868 <printf@plt>
   19c04:	movw	r1, #1183	; 0x49f
   19c08:	mov	r0, #0
   19c0c:	mov	r2, #5
   19c10:	movt	r1, #3
   19c14:	bl	11940 <dcgettext@plt>
   19c18:	movw	r1, #1222	; 0x4c6
   19c1c:	movt	r1, #3
   19c20:	pop	{fp, lr}
   19c24:	b	11868 <printf@plt>
   19c28:	push	{r4, r5, r6, sl, fp, lr}
   19c2c:	add	fp, sp, #16
   19c30:	mov	r4, r2
   19c34:	mov	r5, r1
   19c38:	mov	r6, r0
   19c3c:	bl	1b3dc <__assert_fail@plt+0x9730>
   19c40:	cmp	r0, #0
   19c44:	popne	{r4, r5, r6, sl, fp, pc}
   19c48:	cmp	r6, #0
   19c4c:	beq	19c60 <__assert_fail@plt+0x7fb4>
   19c50:	cmp	r5, #0
   19c54:	cmpne	r4, #0
   19c58:	bne	19c60 <__assert_fail@plt+0x7fb4>
   19c5c:	pop	{r4, r5, r6, sl, fp, pc}
   19c60:	bl	1a200 <__assert_fail@plt+0x8554>
   19c64:	push	{r4, r5, r6, sl, fp, lr}
   19c68:	add	fp, sp, #16
   19c6c:	mov	r4, r2
   19c70:	mov	r5, r1
   19c74:	mov	r6, r0
   19c78:	bl	1b3dc <__assert_fail@plt+0x9730>
   19c7c:	cmp	r0, #0
   19c80:	popne	{r4, r5, r6, sl, fp, pc}
   19c84:	cmp	r6, #0
   19c88:	beq	19c9c <__assert_fail@plt+0x7ff0>
   19c8c:	cmp	r5, #0
   19c90:	cmpne	r4, #0
   19c94:	bne	19c9c <__assert_fail@plt+0x7ff0>
   19c98:	pop	{r4, r5, r6, sl, fp, pc}
   19c9c:	bl	1a200 <__assert_fail@plt+0x8554>
   19ca0:	push	{fp, lr}
   19ca4:	mov	fp, sp
   19ca8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   19cac:	cmp	r0, #0
   19cb0:	popne	{fp, pc}
   19cb4:	bl	1a200 <__assert_fail@plt+0x8554>
   19cb8:	push	{fp, lr}
   19cbc:	mov	fp, sp
   19cc0:	bl	1b2f8 <__assert_fail@plt+0x964c>
   19cc4:	cmp	r0, #0
   19cc8:	popne	{fp, pc}
   19ccc:	bl	1a200 <__assert_fail@plt+0x8554>
   19cd0:	push	{fp, lr}
   19cd4:	mov	fp, sp
   19cd8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   19cdc:	cmp	r0, #0
   19ce0:	popne	{fp, pc}
   19ce4:	bl	1a200 <__assert_fail@plt+0x8554>
   19ce8:	push	{r4, r5, fp, lr}
   19cec:	add	fp, sp, #8
   19cf0:	mov	r4, r1
   19cf4:	mov	r5, r0
   19cf8:	bl	1b388 <__assert_fail@plt+0x96dc>
   19cfc:	cmp	r0, #0
   19d00:	popne	{r4, r5, fp, pc}
   19d04:	cmp	r5, #0
   19d08:	beq	19d18 <__assert_fail@plt+0x806c>
   19d0c:	cmp	r4, #0
   19d10:	bne	19d18 <__assert_fail@plt+0x806c>
   19d14:	pop	{r4, r5, fp, pc}
   19d18:	bl	1a200 <__assert_fail@plt+0x8554>
   19d1c:	push	{fp, lr}
   19d20:	mov	fp, sp
   19d24:	cmp	r1, #0
   19d28:	orreq	r1, r1, #1
   19d2c:	bl	1b388 <__assert_fail@plt+0x96dc>
   19d30:	cmp	r0, #0
   19d34:	popne	{fp, pc}
   19d38:	bl	1a200 <__assert_fail@plt+0x8554>
   19d3c:	push	{fp, lr}
   19d40:	mov	fp, sp
   19d44:	clz	r3, r2
   19d48:	lsr	ip, r3, #5
   19d4c:	clz	r3, r1
   19d50:	lsr	r3, r3, #5
   19d54:	orrs	r3, r3, ip
   19d58:	movwne	r1, #1
   19d5c:	movwne	r2, #1
   19d60:	bl	1b3dc <__assert_fail@plt+0x9730>
   19d64:	cmp	r0, #0
   19d68:	popne	{fp, pc}
   19d6c:	bl	1a200 <__assert_fail@plt+0x8554>
   19d70:	push	{fp, lr}
   19d74:	mov	fp, sp
   19d78:	mov	r2, r1
   19d7c:	mov	r1, r0
   19d80:	mov	r0, #0
   19d84:	bl	1b3dc <__assert_fail@plt+0x9730>
   19d88:	cmp	r0, #0
   19d8c:	popne	{fp, pc}
   19d90:	bl	1a200 <__assert_fail@plt+0x8554>
   19d94:	push	{fp, lr}
   19d98:	mov	fp, sp
   19d9c:	mov	r2, r1
   19da0:	mov	r1, r0
   19da4:	clz	r0, r2
   19da8:	clz	r3, r1
   19dac:	lsr	r0, r0, #5
   19db0:	lsr	r3, r3, #5
   19db4:	orrs	r0, r3, r0
   19db8:	movwne	r1, #1
   19dbc:	movwne	r2, #1
   19dc0:	mov	r0, #0
   19dc4:	bl	1b3dc <__assert_fail@plt+0x9730>
   19dc8:	cmp	r0, #0
   19dcc:	popne	{fp, pc}
   19dd0:	bl	1a200 <__assert_fail@plt+0x8554>
   19dd4:	push	{r4, r5, r6, sl, fp, lr}
   19dd8:	add	fp, sp, #16
   19ddc:	ldr	r5, [r1]
   19de0:	mov	r4, r1
   19de4:	mov	r6, r0
   19de8:	cmp	r0, #0
   19dec:	beq	19e04 <__assert_fail@plt+0x8158>
   19df0:	mov	r0, #1
   19df4:	add	r0, r0, r5, lsr #1
   19df8:	adds	r5, r5, r0
   19dfc:	bcc	19e0c <__assert_fail@plt+0x8160>
   19e00:	b	19e48 <__assert_fail@plt+0x819c>
   19e04:	cmp	r5, #0
   19e08:	movweq	r5, #64	; 0x40
   19e0c:	mov	r0, r6
   19e10:	mov	r1, r5
   19e14:	mov	r2, #1
   19e18:	bl	1b3dc <__assert_fail@plt+0x9730>
   19e1c:	cmp	r5, #0
   19e20:	mov	r1, r5
   19e24:	movwne	r1, #1
   19e28:	cmp	r0, #0
   19e2c:	bne	19e40 <__assert_fail@plt+0x8194>
   19e30:	clz	r2, r6
   19e34:	lsr	r2, r2, #5
   19e38:	orrs	r1, r2, r1
   19e3c:	bne	19e48 <__assert_fail@plt+0x819c>
   19e40:	str	r5, [r4]
   19e44:	pop	{r4, r5, r6, sl, fp, pc}
   19e48:	bl	1a200 <__assert_fail@plt+0x8554>
   19e4c:	push	{r4, r5, r6, r7, fp, lr}
   19e50:	add	fp, sp, #16
   19e54:	ldr	r5, [r1]
   19e58:	mov	r6, r2
   19e5c:	mov	r4, r1
   19e60:	mov	r7, r0
   19e64:	cmp	r0, #0
   19e68:	beq	19e80 <__assert_fail@plt+0x81d4>
   19e6c:	mov	r0, #1
   19e70:	add	r0, r0, r5, lsr #1
   19e74:	adds	r5, r5, r0
   19e78:	bcc	19e98 <__assert_fail@plt+0x81ec>
   19e7c:	b	19ecc <__assert_fail@plt+0x8220>
   19e80:	cmp	r5, #0
   19e84:	bne	19e98 <__assert_fail@plt+0x81ec>
   19e88:	mov	r0, #64	; 0x40
   19e8c:	cmp	r6, #64	; 0x40
   19e90:	udiv	r5, r0, r6
   19e94:	addhi	r5, r5, #1
   19e98:	mov	r0, r7
   19e9c:	mov	r1, r5
   19ea0:	mov	r2, r6
   19ea4:	bl	1b3dc <__assert_fail@plt+0x9730>
   19ea8:	cmp	r0, #0
   19eac:	bne	19ec4 <__assert_fail@plt+0x8218>
   19eb0:	cmp	r7, #0
   19eb4:	beq	19ecc <__assert_fail@plt+0x8220>
   19eb8:	cmp	r6, #0
   19ebc:	cmpne	r5, #0
   19ec0:	bne	19ecc <__assert_fail@plt+0x8220>
   19ec4:	str	r5, [r4]
   19ec8:	pop	{r4, r5, r6, r7, fp, pc}
   19ecc:	bl	1a200 <__assert_fail@plt+0x8554>
   19ed0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ed4:	add	fp, sp, #24
   19ed8:	mov	r8, r1
   19edc:	ldr	r1, [r1]
   19ee0:	mov	r5, r0
   19ee4:	add	r0, r1, r1, asr #1
   19ee8:	cmp	r0, r1
   19eec:	mvnvs	r0, #-2147483648	; 0x80000000
   19ef0:	cmp	r0, r3
   19ef4:	mov	r7, r0
   19ef8:	movgt	r7, r3
   19efc:	cmn	r3, #1
   19f00:	movle	r7, r0
   19f04:	ldr	r0, [fp, #8]
   19f08:	cmn	r0, #1
   19f0c:	ble	19f34 <__assert_fail@plt+0x8288>
   19f10:	cmp	r0, #0
   19f14:	beq	19f88 <__assert_fail@plt+0x82dc>
   19f18:	cmn	r7, #1
   19f1c:	ble	19f5c <__assert_fail@plt+0x82b0>
   19f20:	mvn	r4, #-2147483648	; 0x80000000
   19f24:	udiv	r6, r4, r0
   19f28:	cmp	r6, r7
   19f2c:	bge	19f88 <__assert_fail@plt+0x82dc>
   19f30:	b	19f98 <__assert_fail@plt+0x82ec>
   19f34:	cmn	r7, #1
   19f38:	ble	19f78 <__assert_fail@plt+0x82cc>
   19f3c:	cmn	r0, #1
   19f40:	beq	19f88 <__assert_fail@plt+0x82dc>
   19f44:	mov	r6, #-2147483648	; 0x80000000
   19f48:	mvn	r4, #-2147483648	; 0x80000000
   19f4c:	sdiv	r6, r6, r0
   19f50:	cmp	r6, r7
   19f54:	bge	19f88 <__assert_fail@plt+0x82dc>
   19f58:	b	19f98 <__assert_fail@plt+0x82ec>
   19f5c:	beq	19f88 <__assert_fail@plt+0x82dc>
   19f60:	mov	r6, #-2147483648	; 0x80000000
   19f64:	mvn	r4, #-2147483648	; 0x80000000
   19f68:	sdiv	r6, r6, r7
   19f6c:	cmp	r6, r0
   19f70:	bge	19f88 <__assert_fail@plt+0x82dc>
   19f74:	b	19f98 <__assert_fail@plt+0x82ec>
   19f78:	mvn	r4, #-2147483648	; 0x80000000
   19f7c:	sdiv	r6, r4, r0
   19f80:	cmp	r7, r6
   19f84:	blt	19f98 <__assert_fail@plt+0x82ec>
   19f88:	mul	r6, r7, r0
   19f8c:	mov	r4, #64	; 0x40
   19f90:	cmp	r6, #63	; 0x3f
   19f94:	bgt	19fa0 <__assert_fail@plt+0x82f4>
   19f98:	sdiv	r7, r4, r0
   19f9c:	mul	r6, r7, r0
   19fa0:	cmp	r5, #0
   19fa4:	moveq	r4, #0
   19fa8:	streq	r4, [r8]
   19fac:	sub	r4, r7, r1
   19fb0:	cmp	r4, r2
   19fb4:	bge	1a060 <__assert_fail@plt+0x83b4>
   19fb8:	add	r7, r1, r2
   19fbc:	mov	r6, #0
   19fc0:	mov	r2, #0
   19fc4:	cmp	r7, r3
   19fc8:	movwgt	r6, #1
   19fcc:	cmn	r3, #1
   19fd0:	movwgt	r2, #1
   19fd4:	cmp	r7, r1
   19fd8:	bvs	1a094 <__assert_fail@plt+0x83e8>
   19fdc:	ands	r1, r2, r6
   19fe0:	bne	1a094 <__assert_fail@plt+0x83e8>
   19fe4:	cmn	r0, #1
   19fe8:	ble	1a010 <__assert_fail@plt+0x8364>
   19fec:	cmp	r0, #0
   19ff0:	beq	1a05c <__assert_fail@plt+0x83b0>
   19ff4:	cmn	r7, #1
   19ff8:	ble	1a034 <__assert_fail@plt+0x8388>
   19ffc:	mvn	r1, #-2147483648	; 0x80000000
   1a000:	udiv	r1, r1, r0
   1a004:	cmp	r1, r7
   1a008:	bge	1a05c <__assert_fail@plt+0x83b0>
   1a00c:	b	1a094 <__assert_fail@plt+0x83e8>
   1a010:	cmn	r7, #1
   1a014:	ble	1a04c <__assert_fail@plt+0x83a0>
   1a018:	cmn	r0, #1
   1a01c:	beq	1a05c <__assert_fail@plt+0x83b0>
   1a020:	mov	r1, #-2147483648	; 0x80000000
   1a024:	sdiv	r1, r1, r0
   1a028:	cmp	r1, r7
   1a02c:	bge	1a05c <__assert_fail@plt+0x83b0>
   1a030:	b	1a094 <__assert_fail@plt+0x83e8>
   1a034:	beq	1a05c <__assert_fail@plt+0x83b0>
   1a038:	mov	r1, #-2147483648	; 0x80000000
   1a03c:	sdiv	r1, r1, r7
   1a040:	cmp	r1, r0
   1a044:	bge	1a05c <__assert_fail@plt+0x83b0>
   1a048:	b	1a094 <__assert_fail@plt+0x83e8>
   1a04c:	mvn	r1, #-2147483648	; 0x80000000
   1a050:	sdiv	r1, r1, r0
   1a054:	cmp	r7, r1
   1a058:	blt	1a094 <__assert_fail@plt+0x83e8>
   1a05c:	mul	r6, r7, r0
   1a060:	mov	r0, r5
   1a064:	mov	r1, r6
   1a068:	bl	1b388 <__assert_fail@plt+0x96dc>
   1a06c:	cmp	r6, #0
   1a070:	movwne	r6, #1
   1a074:	cmp	r0, #0
   1a078:	bne	1a08c <__assert_fail@plt+0x83e0>
   1a07c:	clz	r1, r5
   1a080:	lsr	r1, r1, #5
   1a084:	orrs	r1, r1, r6
   1a088:	bne	1a094 <__assert_fail@plt+0x83e8>
   1a08c:	str	r7, [r8]
   1a090:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a094:	bl	1a200 <__assert_fail@plt+0x8554>
   1a098:	push	{fp, lr}
   1a09c:	mov	fp, sp
   1a0a0:	mov	r1, #1
   1a0a4:	bl	1af9c <__assert_fail@plt+0x92f0>
   1a0a8:	cmp	r0, #0
   1a0ac:	popne	{fp, pc}
   1a0b0:	bl	1a200 <__assert_fail@plt+0x8554>
   1a0b4:	push	{fp, lr}
   1a0b8:	mov	fp, sp
   1a0bc:	bl	1af9c <__assert_fail@plt+0x92f0>
   1a0c0:	cmp	r0, #0
   1a0c4:	popne	{fp, pc}
   1a0c8:	bl	1a200 <__assert_fail@plt+0x8554>
   1a0cc:	push	{fp, lr}
   1a0d0:	mov	fp, sp
   1a0d4:	mov	r1, #1
   1a0d8:	bl	1af9c <__assert_fail@plt+0x92f0>
   1a0dc:	cmp	r0, #0
   1a0e0:	popne	{fp, pc}
   1a0e4:	bl	1a200 <__assert_fail@plt+0x8554>
   1a0e8:	push	{fp, lr}
   1a0ec:	mov	fp, sp
   1a0f0:	bl	1af9c <__assert_fail@plt+0x92f0>
   1a0f4:	cmp	r0, #0
   1a0f8:	popne	{fp, pc}
   1a0fc:	bl	1a200 <__assert_fail@plt+0x8554>
   1a100:	push	{r4, r5, r6, sl, fp, lr}
   1a104:	add	fp, sp, #16
   1a108:	mov	r5, r0
   1a10c:	mov	r0, r1
   1a110:	mov	r4, r1
   1a114:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1a118:	cmp	r0, #0
   1a11c:	beq	1a138 <__assert_fail@plt+0x848c>
   1a120:	mov	r1, r5
   1a124:	mov	r2, r4
   1a128:	mov	r6, r0
   1a12c:	bl	118ec <memcpy@plt>
   1a130:	mov	r0, r6
   1a134:	pop	{r4, r5, r6, sl, fp, pc}
   1a138:	bl	1a200 <__assert_fail@plt+0x8554>
   1a13c:	push	{r4, r5, r6, sl, fp, lr}
   1a140:	add	fp, sp, #16
   1a144:	mov	r5, r0
   1a148:	mov	r0, r1
   1a14c:	mov	r4, r1
   1a150:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1a154:	cmp	r0, #0
   1a158:	beq	1a174 <__assert_fail@plt+0x84c8>
   1a15c:	mov	r1, r5
   1a160:	mov	r2, r4
   1a164:	mov	r6, r0
   1a168:	bl	118ec <memcpy@plt>
   1a16c:	mov	r0, r6
   1a170:	pop	{r4, r5, r6, sl, fp, pc}
   1a174:	bl	1a200 <__assert_fail@plt+0x8554>
   1a178:	push	{r4, r5, r6, sl, fp, lr}
   1a17c:	add	fp, sp, #16
   1a180:	mov	r5, r0
   1a184:	add	r0, r1, #1
   1a188:	mov	r4, r1
   1a18c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1a190:	cmp	r0, #0
   1a194:	beq	1a1bc <__assert_fail@plt+0x8510>
   1a198:	mov	r6, r0
   1a19c:	mov	r0, #0
   1a1a0:	mov	r1, r5
   1a1a4:	mov	r2, r4
   1a1a8:	strb	r0, [r6, r4]
   1a1ac:	mov	r0, r6
   1a1b0:	bl	118ec <memcpy@plt>
   1a1b4:	mov	r0, r6
   1a1b8:	pop	{r4, r5, r6, sl, fp, pc}
   1a1bc:	bl	1a200 <__assert_fail@plt+0x8554>
   1a1c0:	push	{r4, r5, r6, sl, fp, lr}
   1a1c4:	add	fp, sp, #16
   1a1c8:	mov	r4, r0
   1a1cc:	bl	11ac0 <strlen@plt>
   1a1d0:	add	r5, r0, #1
   1a1d4:	mov	r0, r5
   1a1d8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1a1dc:	cmp	r0, #0
   1a1e0:	beq	1a1fc <__assert_fail@plt+0x8550>
   1a1e4:	mov	r1, r4
   1a1e8:	mov	r2, r5
   1a1ec:	mov	r6, r0
   1a1f0:	bl	118ec <memcpy@plt>
   1a1f4:	mov	r0, r6
   1a1f8:	pop	{r4, r5, r6, sl, fp, pc}
   1a1fc:	bl	1a200 <__assert_fail@plt+0x8554>
   1a200:	push	{fp, lr}
   1a204:	mov	fp, sp
   1a208:	movw	r0, #4528	; 0x11b0
   1a20c:	movw	r1, #1298	; 0x512
   1a210:	mov	r2, #5
   1a214:	movt	r0, #4
   1a218:	movt	r1, #3
   1a21c:	ldr	r4, [r0]
   1a220:	mov	r0, #0
   1a224:	bl	11940 <dcgettext@plt>
   1a228:	movw	r2, #2212	; 0x8a4
   1a22c:	mov	r3, r0
   1a230:	mov	r0, r4
   1a234:	mov	r1, #0
   1a238:	movt	r2, #3
   1a23c:	bl	119e8 <error@plt>
   1a240:	bl	11c70 <abort@plt>
   1a244:	push	{fp, lr}
   1a248:	mov	fp, sp
   1a24c:	sub	sp, sp, #8
   1a250:	movw	ip, #4528	; 0x11b0
   1a254:	movt	ip, #4
   1a258:	ldr	ip, [ip]
   1a25c:	str	ip, [sp, #4]
   1a260:	ldr	ip, [fp, #8]
   1a264:	str	ip, [sp]
   1a268:	bl	1a270 <__assert_fail@plt+0x85c4>
   1a26c:	bl	11c70 <abort@plt>
   1a270:	push	{r4, r5, r6, r7, fp, lr}
   1a274:	add	fp, sp, #16
   1a278:	sub	sp, sp, #16
   1a27c:	sub	r0, r0, #1
   1a280:	cmp	r0, #4
   1a284:	bcs	1a304 <__assert_fail@plt+0x8658>
   1a288:	mov	r5, r1
   1a28c:	movw	r1, #1412	; 0x584
   1a290:	ldr	r4, [fp, #12]
   1a294:	ldr	r6, [fp, #8]
   1a298:	movt	r1, #3
   1a29c:	cmn	r5, #1
   1a2a0:	ldr	r1, [r1, r0, lsl #2]
   1a2a4:	ble	1a2b8 <__assert_fail@plt+0x860c>
   1a2a8:	ldr	r7, [r3, r5, lsl #4]
   1a2ac:	movw	r5, #1315	; 0x523
   1a2b0:	movt	r5, #3
   1a2b4:	b	1a2d4 <__assert_fail@plt+0x8628>
   1a2b8:	mov	r0, #0
   1a2bc:	add	r7, sp, #14
   1a2c0:	strb	r0, [sp, #15]
   1a2c4:	movw	r0, #1315	; 0x523
   1a2c8:	strb	r2, [sp, #14]
   1a2cc:	movt	r0, #3
   1a2d0:	sub	r5, r0, r5
   1a2d4:	mov	r0, #0
   1a2d8:	mov	r2, #5
   1a2dc:	bl	11940 <dcgettext@plt>
   1a2e0:	mov	r2, r0
   1a2e4:	mov	r0, r4
   1a2e8:	mov	r1, #0
   1a2ec:	mov	r3, r5
   1a2f0:	str	r7, [sp]
   1a2f4:	str	r6, [sp, #4]
   1a2f8:	bl	119e8 <error@plt>
   1a2fc:	sub	sp, fp, #16
   1a300:	pop	{r4, r5, r6, r7, fp, pc}
   1a304:	bl	11c70 <abort@plt>
   1a308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a30c:	add	fp, sp, #28
   1a310:	sub	sp, sp, #44	; 0x2c
   1a314:	cmp	r2, #37	; 0x25
   1a318:	bcs	1af7c <__assert_fail@plt+0x92d0>
   1a31c:	ldr	sl, [fp, #8]
   1a320:	mov	r6, r2
   1a324:	mov	r7, r1
   1a328:	mov	r4, r0
   1a32c:	str	r3, [sp, #36]	; 0x24
   1a330:	bl	11af0 <__errno_location@plt>
   1a334:	mov	r5, r0
   1a338:	mov	r0, #0
   1a33c:	str	r0, [r5]
   1a340:	bl	11a90 <__ctype_b_loc@plt>
   1a344:	ldr	r1, [r0]
   1a348:	mov	r2, r4
   1a34c:	ldrb	r0, [r2], #1
   1a350:	add	r3, r1, r0, lsl #1
   1a354:	ldrb	r3, [r3, #1]
   1a358:	tst	r3, #32
   1a35c:	bne	1a34c <__assert_fail@plt+0x86a0>
   1a360:	sub	r9, fp, #32
   1a364:	cmp	r7, #0
   1a368:	mov	r8, #4
   1a36c:	movne	r9, r7
   1a370:	cmp	r0, #45	; 0x2d
   1a374:	beq	1af70 <__assert_fail@plt+0x92c4>
   1a378:	mov	r0, r4
   1a37c:	mov	r1, r9
   1a380:	mov	r2, r6
   1a384:	mov	r3, #0
   1a388:	bl	11904 <__strtoull_internal@plt>
   1a38c:	mov	r7, r1
   1a390:	ldr	r1, [r9]
   1a394:	cmp	r1, r4
   1a398:	beq	1a3c4 <__assert_fail@plt+0x8718>
   1a39c:	mov	r6, r0
   1a3a0:	ldr	r0, [r5]
   1a3a4:	cmp	r0, #0
   1a3a8:	beq	1a400 <__assert_fail@plt+0x8754>
   1a3ac:	cmp	r0, #34	; 0x22
   1a3b0:	bne	1af70 <__assert_fail@plt+0x92c4>
   1a3b4:	mov	r8, #1
   1a3b8:	cmp	sl, #0
   1a3bc:	bne	1a40c <__assert_fail@plt+0x8760>
   1a3c0:	b	1af68 <__assert_fail@plt+0x92bc>
   1a3c4:	cmp	sl, #0
   1a3c8:	beq	1af70 <__assert_fail@plt+0x92c4>
   1a3cc:	mov	r5, r1
   1a3d0:	ldrb	r1, [r4]
   1a3d4:	cmp	r1, #0
   1a3d8:	beq	1af70 <__assert_fail@plt+0x92c4>
   1a3dc:	mov	r0, sl
   1a3e0:	bl	11acc <strchr@plt>
   1a3e4:	cmp	r0, #0
   1a3e8:	beq	1af70 <__assert_fail@plt+0x92c4>
   1a3ec:	mov	r1, r5
   1a3f0:	mov	r8, #0
   1a3f4:	mov	r6, #1
   1a3f8:	mov	r7, #0
   1a3fc:	b	1a40c <__assert_fail@plt+0x8760>
   1a400:	mov	r8, r0
   1a404:	cmp	sl, #0
   1a408:	beq	1af68 <__assert_fail@plt+0x92bc>
   1a40c:	ldrb	r4, [r1]
   1a410:	cmp	r4, #0
   1a414:	beq	1af68 <__assert_fail@plt+0x92bc>
   1a418:	str	r1, [sp, #32]
   1a41c:	mov	r0, sl
   1a420:	mov	r1, r4
   1a424:	bl	11acc <strchr@plt>
   1a428:	cmp	r0, #0
   1a42c:	beq	1a6f0 <__assert_fail@plt+0x8a44>
   1a430:	sub	r0, r4, #69	; 0x45
   1a434:	mov	r1, #1
   1a438:	mov	r3, #0
   1a43c:	mov	r5, #1024	; 0x400
   1a440:	cmp	r0, #47	; 0x2f
   1a444:	str	r1, [sp, #28]
   1a448:	bhi	1a54c <__assert_fail@plt+0x88a0>
   1a44c:	add	r1, pc, #0
   1a450:	ldr	pc, [r1, r0, lsl #2]
   1a454:	andeq	sl, r1, r4, lsl r5
   1a458:	andeq	sl, r1, ip, asr #10
   1a45c:	andeq	sl, r1, r4, lsl r5
   1a460:	andeq	sl, r1, ip, asr #10
   1a464:	andeq	sl, r1, ip, asr #10
   1a468:	andeq	sl, r1, ip, asr #10
   1a46c:	andeq	sl, r1, r4, lsl r5
   1a470:	andeq	sl, r1, ip, asr #10
   1a474:	andeq	sl, r1, r4, lsl r5
   1a478:	andeq	sl, r1, ip, asr #10
   1a47c:	andeq	sl, r1, ip, asr #10
   1a480:	andeq	sl, r1, r4, lsl r5
   1a484:	andeq	sl, r1, ip, asr #10
   1a488:	andeq	sl, r1, ip, asr #10
   1a48c:	andeq	sl, r1, ip, asr #10
   1a490:	andeq	sl, r1, r4, lsl r5
   1a494:	andeq	sl, r1, ip, asr #10
   1a498:	andeq	sl, r1, ip, asr #10
   1a49c:	andeq	sl, r1, ip, asr #10
   1a4a0:	andeq	sl, r1, ip, asr #10
   1a4a4:	andeq	sl, r1, r4, lsl r5
   1a4a8:	andeq	sl, r1, r4, lsl r5
   1a4ac:	andeq	sl, r1, ip, asr #10
   1a4b0:	andeq	sl, r1, ip, asr #10
   1a4b4:	andeq	sl, r1, ip, asr #10
   1a4b8:	andeq	sl, r1, ip, asr #10
   1a4bc:	andeq	sl, r1, ip, asr #10
   1a4c0:	andeq	sl, r1, ip, asr #10
   1a4c4:	andeq	sl, r1, ip, asr #10
   1a4c8:	andeq	sl, r1, ip, asr #10
   1a4cc:	andeq	sl, r1, ip, asr #10
   1a4d0:	andeq	sl, r1, ip, asr #10
   1a4d4:	andeq	sl, r1, ip, asr #10
   1a4d8:	andeq	sl, r1, ip, asr #10
   1a4dc:	andeq	sl, r1, r4, lsl r5
   1a4e0:	andeq	sl, r1, ip, asr #10
   1a4e4:	andeq	sl, r1, ip, asr #10
   1a4e8:	andeq	sl, r1, ip, asr #10
   1a4ec:	andeq	sl, r1, r4, lsl r5
   1a4f0:	andeq	sl, r1, ip, asr #10
   1a4f4:	andeq	sl, r1, r4, lsl r5
   1a4f8:	andeq	sl, r1, ip, asr #10
   1a4fc:	andeq	sl, r1, ip, asr #10
   1a500:	andeq	sl, r1, ip, asr #10
   1a504:	andeq	sl, r1, ip, asr #10
   1a508:	andeq	sl, r1, ip, asr #10
   1a50c:	andeq	sl, r1, ip, asr #10
   1a510:	andeq	sl, r1, r4, lsl r5
   1a514:	mov	r0, sl
   1a518:	mov	r1, #48	; 0x30
   1a51c:	bl	11acc <strchr@plt>
   1a520:	cmp	r0, #0
   1a524:	beq	1a548 <__assert_fail@plt+0x889c>
   1a528:	ldr	r1, [sp, #32]
   1a52c:	ldrb	r0, [r1, #1]
   1a530:	cmp	r0, #66	; 0x42
   1a534:	cmpne	r0, #68	; 0x44
   1a538:	bne	1a6fc <__assert_fail@plt+0x8a50>
   1a53c:	mov	r5, #1000	; 0x3e8
   1a540:	mov	r0, #2
   1a544:	str	r0, [sp, #28]
   1a548:	mov	r3, #0
   1a54c:	sub	r0, r4, #66	; 0x42
   1a550:	cmp	r0, #53	; 0x35
   1a554:	bhi	1a6f0 <__assert_fail@plt+0x8a44>
   1a558:	add	r1, pc, #0
   1a55c:	ldr	pc, [r1, r0, lsl #2]
   1a560:	andeq	sl, r1, r8, ror sl
   1a564:	strdeq	sl, [r1], -r0
   1a568:	strdeq	sl, [r1], -r0
   1a56c:	andeq	sl, r1, r0, lsr #21
   1a570:	strdeq	sl, [r1], -r0
   1a574:	andeq	sl, r1, r8, lsr r6
   1a578:	strdeq	sl, [r1], -r0
   1a57c:	strdeq	sl, [r1], -r0
   1a580:	strdeq	sl, [r1], -r0
   1a584:	andeq	sl, r1, r0, lsr #14
   1a588:	strdeq	sl, [r1], -r0
   1a58c:	andeq	sl, r1, r8, ror #14
   1a590:	strdeq	sl, [r1], -r0
   1a594:	strdeq	sl, [r1], -r0
   1a598:	strdeq	sl, [r1], -r4
   1a59c:	strdeq	sl, [r1], -r0
   1a5a0:	strdeq	sl, [r1], -r0
   1a5a4:	strdeq	sl, [r1], -r0
   1a5a8:	strdeq	sl, [r1], -r4
   1a5ac:	strdeq	sl, [r1], -r0
   1a5b0:	strdeq	sl, [r1], -r0
   1a5b4:	strdeq	sl, [r1], -r0
   1a5b8:	strdeq	sl, [r1], -r0
   1a5bc:	andeq	sl, r1, ip, lsl sp
   1a5c0:	ldrdeq	sl, [r1], -ip
   1a5c4:	strdeq	sl, [r1], -r0
   1a5c8:	strdeq	sl, [r1], -r0
   1a5cc:	strdeq	sl, [r1], -r0
   1a5d0:	strdeq	sl, [r1], -r0
   1a5d4:	strdeq	sl, [r1], -r0
   1a5d8:	strdeq	sl, [r1], -r0
   1a5dc:	strdeq	sl, [r1], -r0
   1a5e0:	strdeq	sl, [r1], -r0
   1a5e4:	andeq	sl, r1, r8, asr #30
   1a5e8:	strdeq	sl, [r1], -r0
   1a5ec:	strdeq	sl, [r1], -r0
   1a5f0:	strdeq	sl, [r1], -r0
   1a5f4:	andeq	sl, r1, r8, lsr r6
   1a5f8:	strdeq	sl, [r1], -r0
   1a5fc:	strdeq	sl, [r1], -r0
   1a600:	strdeq	sl, [r1], -r0
   1a604:	andeq	sl, r1, r0, lsr #14
   1a608:	strdeq	sl, [r1], -r0
   1a60c:	andeq	sl, r1, r8, ror #14
   1a610:	strdeq	sl, [r1], -r0
   1a614:	strdeq	sl, [r1], -r0
   1a618:	strdeq	sl, [r1], -r0
   1a61c:	strdeq	sl, [r1], -r0
   1a620:	strdeq	sl, [r1], -r0
   1a624:	strdeq	sl, [r1], -r0
   1a628:	strdeq	sl, [r1], -r4
   1a62c:	strdeq	sl, [r1], -r0
   1a630:	strdeq	sl, [r1], -r0
   1a634:	andeq	sl, r1, r4, lsr #30
   1a638:	mvn	r0, #0
   1a63c:	mvn	r1, #0
   1a640:	mov	r2, r5
   1a644:	mov	sl, r3
   1a648:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   1a64c:	subs	r3, r0, r6
   1a650:	mov	lr, #0
   1a654:	umull	r4, r2, r6, r5
   1a658:	str	r1, [sp, #20]
   1a65c:	sbcs	r3, r1, r7
   1a660:	mla	ip, r6, sl, r2
   1a664:	mov	r2, r1
   1a668:	movwcc	lr, #1
   1a66c:	mla	r7, r7, r5, ip
   1a670:	mov	r2, #0
   1a674:	cmp	lr, #0
   1a678:	mvnne	r4, #0
   1a67c:	mvnne	r7, #0
   1a680:	subs	r6, r0, r4
   1a684:	sbcs	r6, r1, r7
   1a688:	movwcc	r2, #1
   1a68c:	umull	r3, r6, r4, r5
   1a690:	cmp	r2, #0
   1a694:	str	r6, [sp, #16]
   1a698:	mvnne	r3, #0
   1a69c:	cmp	r2, #0
   1a6a0:	umull	r6, ip, r3, r5
   1a6a4:	mla	r1, r3, sl, ip
   1a6a8:	ldr	ip, [sp, #16]
   1a6ac:	str	r1, [sp, #12]
   1a6b0:	mla	r4, r4, sl, ip
   1a6b4:	mla	r4, r7, r5, r4
   1a6b8:	ldr	r7, [sp, #12]
   1a6bc:	mvnne	r4, #0
   1a6c0:	subs	r0, r0, r3
   1a6c4:	ldr	r0, [sp, #20]
   1a6c8:	mla	r7, r4, r5, r7
   1a6cc:	sbcs	r0, r0, r4
   1a6d0:	mov	r0, #0
   1a6d4:	movwcc	r0, #1
   1a6d8:	cmp	r0, #0
   1a6dc:	mov	r1, r0
   1a6e0:	orr	r0, lr, r2
   1a6e4:	mvnne	r7, #0
   1a6e8:	mvnne	r6, #0
   1a6ec:	b	1ad14 <__assert_fail@plt+0x9068>
   1a6f0:	ldr	r0, [sp, #36]	; 0x24
   1a6f4:	orr	r8, r8, #2
   1a6f8:	b	1af6c <__assert_fail@plt+0x92c0>
   1a6fc:	cmp	r0, #105	; 0x69
   1a700:	mov	r3, #0
   1a704:	bne	1a54c <__assert_fail@plt+0x88a0>
   1a708:	ldrb	r0, [r1, #2]
   1a70c:	mov	r1, #1
   1a710:	cmp	r0, #66	; 0x42
   1a714:	movweq	r1, #3
   1a718:	str	r1, [sp, #28]
   1a71c:	b	1a54c <__assert_fail@plt+0x88a0>
   1a720:	mvn	r0, #0
   1a724:	mvn	r1, #0
   1a728:	mov	r2, r5
   1a72c:	mov	r4, r3
   1a730:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   1a734:	subs	r0, r0, r6
   1a738:	mov	r2, #0
   1a73c:	sbcs	r0, r1, r7
   1a740:	movwcc	r2, #1
   1a744:	umull	r0, r1, r6, r5
   1a748:	mla	r1, r6, r4, r1
   1a74c:	cmp	r2, #0
   1a750:	mov	r3, r2
   1a754:	mla	r7, r7, r5, r1
   1a758:	mvnne	r0, #0
   1a75c:	mvnne	r7, #0
   1a760:	mov	r6, r0
   1a764:	b	1af48 <__assert_fail@plt+0x929c>
   1a768:	mvn	r0, #0
   1a76c:	mvn	r1, #0
   1a770:	mov	r2, r5
   1a774:	str	r3, [sp, #24]
   1a778:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   1a77c:	subs	r3, r0, r6
   1a780:	mov	ip, r0
   1a784:	umull	r4, r0, r6, r5
   1a788:	mov	sl, #0
   1a78c:	sbcs	r3, r1, r7
   1a790:	str	r0, [sp, #20]
   1a794:	ldr	r0, [sp, #24]
   1a798:	mov	r3, #0
   1a79c:	movwcc	r3, #1
   1a7a0:	cmp	r3, #0
   1a7a4:	mvnne	r4, #0
   1a7a8:	cmp	r3, #0
   1a7ac:	umull	lr, r2, r4, r5
   1a7b0:	mla	r2, r4, r0, r2
   1a7b4:	str	r2, [sp, #16]
   1a7b8:	ldr	r2, [sp, #20]
   1a7bc:	mla	r6, r6, r0, r2
   1a7c0:	ldr	r0, [sp, #16]
   1a7c4:	mla	r6, r7, r5, r6
   1a7c8:	mvnne	r6, #0
   1a7cc:	mla	r7, r6, r5, r0
   1a7d0:	subs	r0, ip, r4
   1a7d4:	sbcs	r0, r1, r6
   1a7d8:	movwcc	sl, #1
   1a7dc:	cmp	sl, #0
   1a7e0:	orr	r3, r3, sl
   1a7e4:	mvnne	lr, #0
   1a7e8:	mvnne	r7, #0
   1a7ec:	mov	r6, lr
   1a7f0:	b	1af48 <__assert_fail@plt+0x929c>
   1a7f4:	mvn	r0, #0
   1a7f8:	mvn	r1, #0
   1a7fc:	mov	r2, r5
   1a800:	mov	sl, r3
   1a804:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   1a808:	subs	r3, r0, r6
   1a80c:	mov	ip, r1
   1a810:	umull	r2, lr, r6, r5
   1a814:	str	r0, [sp, #20]
   1a818:	sbcs	r3, r1, r7
   1a81c:	mov	r1, #0
   1a820:	mla	r6, r6, sl, lr
   1a824:	mov	lr, #0
   1a828:	str	ip, [sp, #16]
   1a82c:	movwcc	r1, #1
   1a830:	mla	r7, r7, r5, r6
   1a834:	cmp	r1, #0
   1a838:	mvnne	r2, #0
   1a83c:	cmp	r1, #0
   1a840:	umull	r3, r4, r2, r5
   1a844:	mvnne	r7, #0
   1a848:	mla	r4, r2, sl, r4
   1a84c:	subs	r2, r0, r2
   1a850:	sbcs	r2, ip, r7
   1a854:	mla	r4, r7, r5, r4
   1a858:	movwcc	lr, #1
   1a85c:	mov	r2, #0
   1a860:	cmp	lr, #0
   1a864:	mvnne	r3, #0
   1a868:	mvnne	r4, #0
   1a86c:	subs	r7, r0, r3
   1a870:	mov	r0, r5
   1a874:	sbcs	r7, ip, r4
   1a878:	movwcc	r2, #1
   1a87c:	umull	r5, r7, r3, r5
   1a880:	cmp	r2, #0
   1a884:	mla	r3, r3, sl, r7
   1a888:	mvnne	r5, #0
   1a88c:	mla	r3, r4, r0, r3
   1a890:	cmp	r2, #0
   1a894:	umull	r6, ip, r5, r0
   1a898:	mvnne	r3, #0
   1a89c:	mla	ip, r5, sl, ip
   1a8a0:	mla	r7, r3, r0, ip
   1a8a4:	ldr	r0, [sp, #20]
   1a8a8:	subs	r0, r0, r5
   1a8ac:	ldr	r0, [sp, #16]
   1a8b0:	sbcs	r0, r0, r3
   1a8b4:	mov	r0, #0
   1a8b8:	movwcc	r0, #1
   1a8bc:	cmp	r0, #0
   1a8c0:	mov	r3, r0
   1a8c4:	orr	r0, r1, lr
   1a8c8:	orr	r0, r0, r2
   1a8cc:	mvnne	r7, #0
   1a8d0:	mvnne	r6, #0
   1a8d4:	orr	r3, r0, r3
   1a8d8:	b	1af48 <__assert_fail@plt+0x929c>
   1a8dc:	mvn	r0, #0
   1a8e0:	mvn	r1, #0
   1a8e4:	mov	r2, r5
   1a8e8:	mov	r4, r3
   1a8ec:	str	r3, [sp, #24]
   1a8f0:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   1a8f4:	umull	r3, r2, r6, r5
   1a8f8:	mla	r2, r6, r4, r2
   1a8fc:	subs	r6, r0, r6
   1a900:	sbcs	r6, r1, r7
   1a904:	mla	r2, r7, r5, r2
   1a908:	mov	r7, #0
   1a90c:	mov	r6, #0
   1a910:	movwcc	r6, #1
   1a914:	cmp	r6, #0
   1a918:	str	r6, [sp, #20]
   1a91c:	mvnne	r3, #0
   1a920:	mvnne	r2, #0
   1a924:	subs	r4, r0, r3
   1a928:	umull	r6, ip, r3, r5
   1a92c:	sbcs	r4, r1, r2
   1a930:	ldr	r4, [sp, #24]
   1a934:	movwcc	r7, #1
   1a938:	cmp	r7, #0
   1a93c:	mov	lr, r7
   1a940:	str	r7, [sp, #16]
   1a944:	mvnne	r6, #0
   1a948:	cmp	lr, #0
   1a94c:	mov	lr, #0
   1a950:	umull	sl, r7, r6, r5
   1a954:	mla	r3, r3, r4, ip
   1a958:	mla	r7, r6, r4, r7
   1a95c:	mov	r4, r0
   1a960:	mla	r2, r2, r5, r3
   1a964:	mvnne	r2, #0
   1a968:	subs	r3, r0, r6
   1a96c:	mov	r0, #0
   1a970:	mla	r7, r2, r5, r7
   1a974:	sbcs	r2, r1, r2
   1a978:	mov	r3, r4
   1a97c:	movwcc	r0, #1
   1a980:	str	r3, [sp, #4]
   1a984:	cmp	r0, #0
   1a988:	str	r0, [sp, #12]
   1a98c:	mov	r0, r1
   1a990:	mvnne	sl, #0
   1a994:	mvnne	r7, #0
   1a998:	str	r0, [sp, #8]
   1a99c:	subs	r2, r4, sl
   1a9a0:	ldr	r4, [sp, #24]
   1a9a4:	sbcs	r2, r1, r7
   1a9a8:	movwcc	lr, #1
   1a9ac:	umull	r6, r2, sl, r5
   1a9b0:	cmp	lr, #0
   1a9b4:	mvnne	r6, #0
   1a9b8:	mla	r2, sl, r4, r2
   1a9bc:	cmp	lr, #0
   1a9c0:	umull	r1, ip, r6, r5
   1a9c4:	mla	r2, r7, r5, r2
   1a9c8:	mla	ip, r6, r4, ip
   1a9cc:	mvnne	r2, #0
   1a9d0:	subs	r6, r3, r6
   1a9d4:	mla	r7, r2, r5, ip
   1a9d8:	sbcs	r2, r0, r2
   1a9dc:	mov	ip, #0
   1a9e0:	movwcc	ip, #1
   1a9e4:	mov	r2, #0
   1a9e8:	cmp	ip, #0
   1a9ec:	mvnne	r1, #0
   1a9f0:	mvnne	r7, #0
   1a9f4:	subs	r6, r3, r1
   1a9f8:	ldr	r3, [sp, #24]
   1a9fc:	sbcs	r6, r0, r7
   1aa00:	umull	r0, sl, r1, r5
   1aa04:	movwcc	r2, #1
   1aa08:	cmp	r2, #0
   1aa0c:	mvnne	r0, #0
   1aa10:	mla	r1, r1, r3, sl
   1aa14:	cmp	r2, #0
   1aa18:	umull	r6, r4, r0, r5
   1aa1c:	mla	r1, r7, r5, r1
   1aa20:	mla	r4, r0, r3, r4
   1aa24:	ldr	r3, [sp, #4]
   1aa28:	mvnne	r1, #0
   1aa2c:	mla	r7, r1, r5, r4
   1aa30:	ldr	r5, [sp, #16]
   1aa34:	subs	r0, r3, r0
   1aa38:	ldr	r0, [sp, #8]
   1aa3c:	sbcs	r0, r0, r1
   1aa40:	mov	r0, #0
   1aa44:	movwcc	r0, #1
   1aa48:	cmp	r0, #0
   1aa4c:	mov	r1, r0
   1aa50:	ldr	r0, [sp, #20]
   1aa54:	mvnne	r7, #0
   1aa58:	mvnne	r6, #0
   1aa5c:	orr	r0, r0, r5
   1aa60:	ldr	r5, [sp, #12]
   1aa64:	orr	r0, r0, r5
   1aa68:	orr	r0, r0, lr
   1aa6c:	orr	r0, r0, ip
   1aa70:	orr	r0, r0, r2
   1aa74:	b	1aee4 <__assert_fail@plt+0x9238>
   1aa78:	mov	r1, #0
   1aa7c:	lsl	r2, r7, #10
   1aa80:	lsl	r0, r6, #10
   1aa84:	lsr	r3, r7, #22
   1aa88:	cmp	r1, r7, lsr #22
   1aa8c:	orr	r2, r2, r6, lsr #22
   1aa90:	mvnne	r0, #0
   1aa94:	movwne	r3, #1
   1aa98:	cmp	r1, r7, lsr #22
   1aa9c:	b	1af14 <__assert_fail@plt+0x9268>
   1aaa0:	mvn	r0, #0
   1aaa4:	mvn	r1, #0
   1aaa8:	mov	r2, r5
   1aaac:	mov	sl, r3
   1aab0:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   1aab4:	subs	r2, r0, r6
   1aab8:	mov	ip, r0
   1aabc:	mov	r0, #0
   1aac0:	sbcs	r2, r1, r7
   1aac4:	movwcc	r0, #1
   1aac8:	umull	r4, r2, r6, r5
   1aacc:	cmp	r0, #0
   1aad0:	mla	r2, r6, sl, r2
   1aad4:	str	r0, [sp, #20]
   1aad8:	mvnne	r4, #0
   1aadc:	cmp	r0, #0
   1aae0:	mla	r2, r7, r5, r2
   1aae4:	mov	r0, #0
   1aae8:	umull	lr, r3, r4, r5
   1aaec:	mvnne	r2, #0
   1aaf0:	mla	r3, r4, sl, r3
   1aaf4:	mla	r6, r2, r5, r3
   1aaf8:	subs	r3, ip, r4
   1aafc:	sbcs	r2, r1, r2
   1ab00:	mov	r3, r1
   1ab04:	movwcc	r0, #1
   1ab08:	str	r3, [sp, #8]
   1ab0c:	cmp	r0, #0
   1ab10:	str	r0, [sp, #16]
   1ab14:	mov	r0, ip
   1ab18:	mvnne	lr, #0
   1ab1c:	mvnne	r6, #0
   1ab20:	str	r0, [sp, #12]
   1ab24:	subs	r2, ip, lr
   1ab28:	umull	r7, r4, lr, r5
   1ab2c:	sbcs	r2, r1, r6
   1ab30:	mla	r4, lr, sl, r4
   1ab34:	mov	r2, #0
   1ab38:	mla	r6, r6, r5, r4
   1ab3c:	mov	r4, #0
   1ab40:	movwcc	r2, #1
   1ab44:	cmp	r2, #0
   1ab48:	mvnne	r7, #0
   1ab4c:	cmp	r2, #0
   1ab50:	umull	r1, ip, r7, r5
   1ab54:	mvnne	r6, #0
   1ab58:	mla	ip, r7, sl, ip
   1ab5c:	subs	r7, r0, r7
   1ab60:	mla	lr, r6, r5, ip
   1ab64:	sbcs	r7, r3, r6
   1ab68:	mov	ip, #0
   1ab6c:	movwcc	ip, #1
   1ab70:	cmp	ip, #0
   1ab74:	mvnne	r1, #0
   1ab78:	mvnne	lr, #0
   1ab7c:	subs	r7, r0, r1
   1ab80:	sbcs	r7, r3, lr
   1ab84:	movwcc	r4, #1
   1ab88:	umull	r0, r7, r1, r5
   1ab8c:	cmp	r4, #0
   1ab90:	mla	r1, r1, sl, r7
   1ab94:	mvnne	r0, #0
   1ab98:	mla	r1, lr, r5, r1
   1ab9c:	cmp	r4, #0
   1aba0:	umull	r6, r3, r0, r5
   1aba4:	mvnne	r1, #0
   1aba8:	mla	r3, r0, sl, r3
   1abac:	mla	r7, r1, r5, r3
   1abb0:	ldr	r3, [sp, #12]
   1abb4:	subs	r0, r3, r0
   1abb8:	ldr	r3, [sp, #16]
   1abbc:	ldr	r0, [sp, #8]
   1abc0:	sbcs	r0, r0, r1
   1abc4:	mov	r0, #0
   1abc8:	movwcc	r0, #1
   1abcc:	cmp	r0, #0
   1abd0:	mov	r1, r0
   1abd4:	ldr	r0, [sp, #20]
   1abd8:	mvnne	r7, #0
   1abdc:	mvnne	r6, #0
   1abe0:	orr	r0, r0, r3
   1abe4:	orr	r0, r0, r2
   1abe8:	orr	r0, r0, ip
   1abec:	orr	r0, r0, r4
   1abf0:	b	1ad14 <__assert_fail@plt+0x9068>
   1abf4:	mvn	r0, #0
   1abf8:	mvn	r1, #0
   1abfc:	mov	r2, r5
   1ac00:	mov	sl, r3
   1ac04:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   1ac08:	umull	r3, r2, r6, r5
   1ac0c:	mov	lr, r1
   1ac10:	mov	r1, r0
   1ac14:	mla	r2, r6, sl, r2
   1ac18:	subs	r6, r0, r6
   1ac1c:	mov	r0, #0
   1ac20:	sbcs	r6, lr, r7
   1ac24:	mla	r2, r7, r5, r2
   1ac28:	movwcc	r0, #1
   1ac2c:	cmp	r0, #0
   1ac30:	str	r0, [sp, #20]
   1ac34:	mov	r0, r1
   1ac38:	mvnne	r3, #0
   1ac3c:	mvnne	r2, #0
   1ac40:	str	r0, [sp, #16]
   1ac44:	subs	r4, r1, r3
   1ac48:	umull	r7, ip, r3, r5
   1ac4c:	sbcs	r4, lr, r2
   1ac50:	mla	r3, r3, sl, ip
   1ac54:	mov	ip, #0
   1ac58:	mov	r4, #0
   1ac5c:	mla	r2, r2, r5, r3
   1ac60:	movwcc	r4, #1
   1ac64:	cmp	r4, #0
   1ac68:	mvnne	r7, #0
   1ac6c:	cmp	r4, #0
   1ac70:	umull	r1, r6, r7, r5
   1ac74:	mvnne	r2, #0
   1ac78:	mla	r6, r7, sl, r6
   1ac7c:	mla	r3, r2, r5, r6
   1ac80:	subs	r6, r0, r7
   1ac84:	sbcs	r2, lr, r2
   1ac88:	movwcc	ip, #1
   1ac8c:	mov	r2, #0
   1ac90:	cmp	ip, #0
   1ac94:	mvnne	r1, #0
   1ac98:	mvnne	r3, #0
   1ac9c:	subs	r6, r0, r1
   1aca0:	sbcs	r6, lr, r3
   1aca4:	movwcc	r2, #1
   1aca8:	umull	r0, r6, r1, r5
   1acac:	cmp	r2, #0
   1acb0:	str	r6, [sp, #12]
   1acb4:	mvnne	r0, #0
   1acb8:	cmp	r2, #0
   1acbc:	umull	r6, r7, r0, r5
   1acc0:	mla	r7, r0, sl, r7
   1acc4:	str	r7, [sp, #8]
   1acc8:	ldr	r7, [sp, #12]
   1accc:	mla	r1, r1, sl, r7
   1acd0:	mla	r1, r3, r5, r1
   1acd4:	ldr	r3, [sp, #8]
   1acd8:	mvnne	r1, #0
   1acdc:	mla	r7, r1, r5, r3
   1ace0:	ldr	r3, [sp, #16]
   1ace4:	subs	r0, r3, r0
   1ace8:	sbcs	r0, lr, r1
   1acec:	mov	r0, #0
   1acf0:	movwcc	r0, #1
   1acf4:	cmp	r0, #0
   1acf8:	mov	r1, r0
   1acfc:	ldr	r0, [sp, #20]
   1ad00:	mvnne	r7, #0
   1ad04:	mvnne	r6, #0
   1ad08:	orr	r0, r0, r4
   1ad0c:	orr	r0, r0, ip
   1ad10:	orr	r0, r0, r2
   1ad14:	orr	r3, r0, r1
   1ad18:	b	1af48 <__assert_fail@plt+0x929c>
   1ad1c:	mvn	r0, #0
   1ad20:	mvn	r1, #0
   1ad24:	mov	r2, r5
   1ad28:	mov	sl, r3
   1ad2c:	bl	2ec74 <__assert_fail@plt+0x1cfc8>
   1ad30:	mov	ip, r1
   1ad34:	subs	r1, r0, r6
   1ad38:	umull	r3, lr, r6, r5
   1ad3c:	mov	r2, r5
   1ad40:	sbcs	r1, ip, r7
   1ad44:	mla	r6, r6, sl, lr
   1ad48:	str	ip, [sp, #4]
   1ad4c:	mov	r1, #0
   1ad50:	mla	r7, r7, r2, r6
   1ad54:	movwcc	r1, #1
   1ad58:	cmp	r1, #0
   1ad5c:	str	r1, [sp, #20]
   1ad60:	mvnne	r3, #0
   1ad64:	cmp	r1, #0
   1ad68:	mov	r1, r0
   1ad6c:	umull	r4, r5, r3, r5
   1ad70:	mvnne	r7, #0
   1ad74:	mov	lr, r1
   1ad78:	mla	r5, r3, sl, r5
   1ad7c:	subs	r3, r0, r3
   1ad80:	sbcs	r0, ip, r7
   1ad84:	mla	r5, r7, r2, r5
   1ad88:	mov	r0, #0
   1ad8c:	movwcc	r0, #1
   1ad90:	cmp	r0, #0
   1ad94:	str	r0, [sp, #16]
   1ad98:	mvnne	r4, #0
   1ad9c:	mvnne	r5, #0
   1ada0:	subs	r0, r1, r4
   1ada4:	mov	r1, #0
   1ada8:	sbcs	r0, ip, r5
   1adac:	movwcc	r1, #1
   1adb0:	umull	r3, r0, r4, r2
   1adb4:	cmp	r1, #0
   1adb8:	mla	r0, r4, sl, r0
   1adbc:	mov	r4, lr
   1adc0:	str	r1, [sp, #12]
   1adc4:	mvnne	r3, #0
   1adc8:	mla	r0, r5, r2, r0
   1adcc:	cmp	r1, #0
   1add0:	str	r4, [sp]
   1add4:	umull	r7, r6, r3, r2
   1add8:	mvnne	r0, #0
   1addc:	mla	r6, r3, sl, r6
   1ade0:	subs	r3, lr, r3
   1ade4:	mla	r5, r0, r2, r6
   1ade8:	sbcs	r0, ip, r0
   1adec:	mov	r3, #0
   1adf0:	mov	r0, #0
   1adf4:	movwcc	r0, #1
   1adf8:	cmp	r0, #0
   1adfc:	str	r0, [sp, #8]
   1ae00:	mvnne	r7, #0
   1ae04:	mvnne	r5, #0
   1ae08:	subs	r0, lr, r7
   1ae0c:	sbcs	r0, ip, r5
   1ae10:	movwcc	r3, #1
   1ae14:	umull	r6, r0, r7, r2
   1ae18:	cmp	r3, #0
   1ae1c:	mla	r7, r7, sl, r0
   1ae20:	mov	r0, ip
   1ae24:	mvnne	r6, #0
   1ae28:	mla	r7, r5, r2, r7
   1ae2c:	cmp	r3, #0
   1ae30:	mov	r5, #0
   1ae34:	umull	r1, lr, r6, r2
   1ae38:	mvnne	r7, #0
   1ae3c:	mla	lr, r6, sl, lr
   1ae40:	subs	r6, r4, r6
   1ae44:	mla	lr, r7, r2, lr
   1ae48:	sbcs	r7, ip, r7
   1ae4c:	mov	ip, #0
   1ae50:	movwcc	ip, #1
   1ae54:	cmp	ip, #0
   1ae58:	mvnne	r1, #0
   1ae5c:	mvnne	lr, #0
   1ae60:	subs	r7, r4, r1
   1ae64:	sbcs	r7, r0, lr
   1ae68:	movwcc	r5, #1
   1ae6c:	umull	r0, r7, r1, r2
   1ae70:	cmp	r5, #0
   1ae74:	mla	r1, r1, sl, r7
   1ae78:	mvnne	r0, #0
   1ae7c:	mla	r1, lr, r2, r1
   1ae80:	cmp	r5, #0
   1ae84:	umull	r6, r4, r0, r2
   1ae88:	mvnne	r1, #0
   1ae8c:	mla	r4, r0, sl, r4
   1ae90:	mla	r7, r1, r2, r4
   1ae94:	ldr	r2, [sp]
   1ae98:	subs	r0, r2, r0
   1ae9c:	ldr	r2, [sp, #16]
   1aea0:	ldr	r0, [sp, #4]
   1aea4:	sbcs	r0, r0, r1
   1aea8:	mov	r0, #0
   1aeac:	movwcc	r0, #1
   1aeb0:	cmp	r0, #0
   1aeb4:	mov	r1, r0
   1aeb8:	ldr	r0, [sp, #20]
   1aebc:	mvnne	r7, #0
   1aec0:	mvnne	r6, #0
   1aec4:	orr	r0, r0, r2
   1aec8:	ldr	r2, [sp, #12]
   1aecc:	orr	r0, r0, r2
   1aed0:	ldr	r2, [sp, #8]
   1aed4:	orr	r0, r0, r2
   1aed8:	orr	r0, r0, r3
   1aedc:	orr	r0, r0, ip
   1aee0:	orr	r0, r0, r5
   1aee4:	orr	r0, r0, r1
   1aee8:	and	r3, r0, #1
   1aeec:	b	1af48 <__assert_fail@plt+0x929c>
   1aef0:	mov	r1, #0
   1aef4:	lsl	r2, r7, #9
   1aef8:	lsl	r0, r6, #9
   1aefc:	lsr	r3, r7, #23
   1af00:	cmp	r1, r7, lsr #23
   1af04:	orr	r2, r2, r6, lsr #23
   1af08:	mvnne	r0, #0
   1af0c:	movwne	r3, #1
   1af10:	cmp	r1, r7, lsr #23
   1af14:	mvnne	r2, #0
   1af18:	mov	r6, r0
   1af1c:	mov	r7, r2
   1af20:	b	1af48 <__assert_fail@plt+0x929c>
   1af24:	lsl	r1, r7, #1
   1af28:	lsl	r0, r6, #1
   1af2c:	cmp	r7, #0
   1af30:	lsr	r3, r7, #31
   1af34:	orr	r1, r1, r6, lsr #31
   1af38:	mvnlt	r0, #0
   1af3c:	mvnlt	r1, #0
   1af40:	mov	r6, r0
   1af44:	mov	r7, r1
   1af48:	ldr	r1, [sp, #32]
   1af4c:	ldr	r2, [sp, #28]
   1af50:	orr	r8, r3, r8
   1af54:	add	r0, r1, r2
   1af58:	str	r0, [r9]
   1af5c:	ldrb	r0, [r1, r2]
   1af60:	cmp	r0, #0
   1af64:	orrne	r8, r8, #2
   1af68:	ldr	r0, [sp, #36]	; 0x24
   1af6c:	strd	r6, [r0]
   1af70:	mov	r0, r8
   1af74:	sub	sp, fp, #28
   1af78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af7c:	movw	r0, #1428	; 0x594
   1af80:	movw	r1, #1466	; 0x5ba
   1af84:	movw	r3, #1478	; 0x5c6
   1af88:	mov	r2, #84	; 0x54
   1af8c:	movt	r0, #3
   1af90:	movt	r1, #3
   1af94:	movt	r3, #3
   1af98:	bl	11cac <__assert_fail@plt>
   1af9c:	clz	r2, r1
   1afa0:	clz	r3, r0
   1afa4:	lsr	r2, r2, #5
   1afa8:	lsr	r3, r3, #5
   1afac:	orrs	r2, r3, r2
   1afb0:	movwne	r1, #1
   1afb4:	movwne	r0, #1
   1afb8:	cmp	r1, #0
   1afbc:	beq	1afec <__assert_fail@plt+0x9340>
   1afc0:	mvn	r2, #-2147483648	; 0x80000000
   1afc4:	udiv	r2, r2, r1
   1afc8:	cmp	r2, r0
   1afcc:	bcs	1afec <__assert_fail@plt+0x9340>
   1afd0:	push	{fp, lr}
   1afd4:	mov	fp, sp
   1afd8:	bl	11af0 <__errno_location@plt>
   1afdc:	mov	r1, #12
   1afe0:	str	r1, [r0]
   1afe4:	mov	r0, #0
   1afe8:	pop	{fp, pc}
   1afec:	b	11820 <calloc@plt>
   1aff0:	sub	sp, sp, #8
   1aff4:	push	{r4, r5, r6, r7, fp, lr}
   1aff8:	add	fp, sp, #16
   1affc:	sub	sp, sp, #8
   1b000:	mov	r5, r0
   1b004:	add	r0, fp, #8
   1b008:	cmp	r1, #11
   1b00c:	str	r3, [fp, #12]
   1b010:	str	r2, [fp, #8]
   1b014:	str	r0, [sp, #4]
   1b018:	bhi	1b054 <__assert_fail@plt+0x93a8>
   1b01c:	mov	r0, #1
   1b020:	movw	r2, #1300	; 0x514
   1b024:	tst	r2, r0, lsl r1
   1b028:	bne	1b114 <__assert_fail@plt+0x9468>
   1b02c:	movw	r2, #2570	; 0xa0a
   1b030:	tst	r2, r0, lsl r1
   1b034:	bne	1b07c <__assert_fail@plt+0x93d0>
   1b038:	cmp	r1, #0
   1b03c:	bne	1b054 <__assert_fail@plt+0x93a8>
   1b040:	ldr	r0, [sp, #4]
   1b044:	add	r1, r0, #4
   1b048:	str	r1, [sp, #4]
   1b04c:	mov	r1, #0
   1b050:	b	1b120 <__assert_fail@plt+0x9474>
   1b054:	sub	r0, r1, #1024	; 0x400
   1b058:	cmp	r0, #10
   1b05c:	bhi	1b114 <__assert_fail@plt+0x9468>
   1b060:	mov	r2, #1
   1b064:	movw	r3, #645	; 0x285
   1b068:	tst	r3, r2, lsl r0
   1b06c:	bne	1b114 <__assert_fail@plt+0x9468>
   1b070:	movw	r3, #1282	; 0x502
   1b074:	tst	r3, r2, lsl r0
   1b078:	beq	1b088 <__assert_fail@plt+0x93dc>
   1b07c:	mov	r0, r5
   1b080:	bl	11b98 <fcntl64@plt>
   1b084:	b	1b12c <__assert_fail@plt+0x9480>
   1b088:	cmp	r0, #6
   1b08c:	bne	1b114 <__assert_fail@plt+0x9468>
   1b090:	ldr	r0, [sp, #4]
   1b094:	movw	r7, #5064	; 0x13c8
   1b098:	movt	r7, #4
   1b09c:	add	r1, r0, #4
   1b0a0:	str	r1, [sp, #4]
   1b0a4:	ldr	r6, [r0]
   1b0a8:	ldr	r0, [r7]
   1b0ac:	cmp	r0, #0
   1b0b0:	blt	1b150 <__assert_fail@plt+0x94a4>
   1b0b4:	mov	r0, r5
   1b0b8:	movw	r1, #1030	; 0x406
   1b0bc:	mov	r2, r6
   1b0c0:	bl	11b98 <fcntl64@plt>
   1b0c4:	mov	r4, r0
   1b0c8:	cmn	r0, #1
   1b0cc:	bgt	1b144 <__assert_fail@plt+0x9498>
   1b0d0:	bl	11af0 <__errno_location@plt>
   1b0d4:	ldr	r0, [r0]
   1b0d8:	cmp	r0, #22
   1b0dc:	bne	1b144 <__assert_fail@plt+0x9498>
   1b0e0:	mov	r0, r5
   1b0e4:	mov	r1, #0
   1b0e8:	mov	r2, r6
   1b0ec:	bl	11b98 <fcntl64@plt>
   1b0f0:	mov	r4, r0
   1b0f4:	cmp	r0, #0
   1b0f8:	blt	1b130 <__assert_fail@plt+0x9484>
   1b0fc:	mvn	r0, #0
   1b100:	str	r0, [r7]
   1b104:	mov	r0, #1
   1b108:	cmp	r0, #0
   1b10c:	bne	1b17c <__assert_fail@plt+0x94d0>
   1b110:	b	1b130 <__assert_fail@plt+0x9484>
   1b114:	ldr	r0, [sp, #4]
   1b118:	add	r2, r0, #4
   1b11c:	str	r2, [sp, #4]
   1b120:	ldr	r2, [r0]
   1b124:	mov	r0, r5
   1b128:	bl	11b98 <fcntl64@plt>
   1b12c:	mov	r4, r0
   1b130:	mov	r0, r4
   1b134:	sub	sp, fp, #16
   1b138:	pop	{r4, r5, r6, r7, fp, lr}
   1b13c:	add	sp, sp, #8
   1b140:	bx	lr
   1b144:	mov	r0, #1
   1b148:	str	r0, [r7]
   1b14c:	b	1b130 <__assert_fail@plt+0x9484>
   1b150:	mov	r0, r5
   1b154:	mov	r1, #0
   1b158:	mov	r2, r6
   1b15c:	bl	11b98 <fcntl64@plt>
   1b160:	mov	r4, r0
   1b164:	ldr	r0, [r7]
   1b168:	add	r0, r0, #1
   1b16c:	clz	r0, r0
   1b170:	lsr	r0, r0, #5
   1b174:	cmp	r0, #0
   1b178:	beq	1b130 <__assert_fail@plt+0x9484>
   1b17c:	cmp	r4, #0
   1b180:	blt	1b130 <__assert_fail@plt+0x9484>
   1b184:	mov	r0, r4
   1b188:	mov	r1, #1
   1b18c:	bl	11b98 <fcntl64@plt>
   1b190:	cmp	r0, #0
   1b194:	blt	1b1b0 <__assert_fail@plt+0x9504>
   1b198:	orr	r2, r0, #1
   1b19c:	mov	r0, r4
   1b1a0:	mov	r1, #2
   1b1a4:	bl	11b98 <fcntl64@plt>
   1b1a8:	cmn	r0, #1
   1b1ac:	bne	1b130 <__assert_fail@plt+0x9484>
   1b1b0:	bl	11af0 <__errno_location@plt>
   1b1b4:	ldr	r6, [r0]
   1b1b8:	mov	r5, r0
   1b1bc:	mov	r0, r4
   1b1c0:	bl	11c88 <close@plt>
   1b1c4:	str	r6, [r5]
   1b1c8:	mvn	r4, #0
   1b1cc:	b	1b130 <__assert_fail@plt+0x9484>
   1b1d0:	push	{r4, sl, fp, lr}
   1b1d4:	add	fp, sp, #8
   1b1d8:	sub	sp, sp, #8
   1b1dc:	mov	r4, r0
   1b1e0:	cmp	r0, #0
   1b1e4:	beq	1b200 <__assert_fail@plt+0x9554>
   1b1e8:	mov	r0, r4
   1b1ec:	bl	11a48 <__freading@plt>
   1b1f0:	cmp	r0, #0
   1b1f4:	ldrbne	r0, [r4, #1]
   1b1f8:	tstne	r0, #1
   1b1fc:	bne	1b210 <__assert_fail@plt+0x9564>
   1b200:	mov	r0, r4
   1b204:	sub	sp, fp, #8
   1b208:	pop	{r4, sl, fp, lr}
   1b20c:	b	11880 <fflush@plt>
   1b210:	mov	r0, #1
   1b214:	mov	r2, #0
   1b218:	mov	r3, #0
   1b21c:	str	r0, [sp]
   1b220:	mov	r0, r4
   1b224:	bl	1b254 <__assert_fail@plt+0x95a8>
   1b228:	b	1b200 <__assert_fail@plt+0x9554>
   1b22c:	push	{r4, r5, r6, sl, fp, lr}
   1b230:	add	fp, sp, #16
   1b234:	mov	r4, r0
   1b238:	bl	11af0 <__errno_location@plt>
   1b23c:	ldr	r6, [r0]
   1b240:	mov	r5, r0
   1b244:	mov	r0, r4
   1b248:	bl	118b0 <free@plt>
   1b24c:	str	r6, [r5]
   1b250:	pop	{r4, r5, r6, sl, fp, pc}
   1b254:	push	{r4, r5, r6, r7, fp, lr}
   1b258:	add	fp, sp, #16
   1b25c:	sub	sp, sp, #8
   1b260:	mov	r4, r0
   1b264:	ldr	r0, [r0, #4]
   1b268:	mov	r5, r3
   1b26c:	mov	r6, r2
   1b270:	ldr	r1, [r4, #8]
   1b274:	cmp	r1, r0
   1b278:	bne	1b294 <__assert_fail@plt+0x95e8>
   1b27c:	ldrd	r0, [r4, #16]
   1b280:	cmp	r1, r0
   1b284:	bne	1b294 <__assert_fail@plt+0x95e8>
   1b288:	ldr	r0, [r4, #36]	; 0x24
   1b28c:	cmp	r0, #0
   1b290:	beq	1b2ac <__assert_fail@plt+0x9600>
   1b294:	mov	r0, r4
   1b298:	mov	r2, r6
   1b29c:	mov	r3, r5
   1b2a0:	sub	sp, fp, #16
   1b2a4:	pop	{r4, r5, r6, r7, fp, lr}
   1b2a8:	b	11b8c <fseeko64@plt>
   1b2ac:	ldr	r7, [fp, #8]
   1b2b0:	mov	r0, r4
   1b2b4:	bl	11b50 <fileno@plt>
   1b2b8:	mov	r2, r6
   1b2bc:	mov	r3, r5
   1b2c0:	str	r7, [sp]
   1b2c4:	bl	119ac <lseek64@plt>
   1b2c8:	and	r2, r0, r1
   1b2cc:	cmn	r2, #1
   1b2d0:	mvneq	r0, #0
   1b2d4:	subeq	sp, fp, #16
   1b2d8:	popeq	{r4, r5, r6, r7, fp, pc}
   1b2dc:	strd	r0, [r4, #80]	; 0x50
   1b2e0:	ldr	r0, [r4]
   1b2e4:	bic	r0, r0, #16
   1b2e8:	str	r0, [r4]
   1b2ec:	mov	r0, #0
   1b2f0:	sub	sp, fp, #16
   1b2f4:	pop	{r4, r5, r6, r7, fp, pc}
   1b2f8:	cmp	r0, #0
   1b2fc:	movweq	r0, #1
   1b300:	cmn	r0, #1
   1b304:	ble	1b30c <__assert_fail@plt+0x9660>
   1b308:	b	11a24 <malloc@plt>
   1b30c:	push	{fp, lr}
   1b310:	mov	fp, sp
   1b314:	bl	11af0 <__errno_location@plt>
   1b318:	mov	r1, #12
   1b31c:	str	r1, [r0]
   1b320:	mov	r0, #0
   1b324:	pop	{fp, pc}
   1b328:	push	{r4, r5, r6, r7, fp, lr}
   1b32c:	add	fp, sp, #16
   1b330:	sub	sp, sp, #8
   1b334:	add	r5, sp, #4
   1b338:	cmp	r0, #0
   1b33c:	mov	r7, r2
   1b340:	mov	r4, r1
   1b344:	movne	r5, r0
   1b348:	mov	r0, r5
   1b34c:	bl	119dc <mbrtowc@plt>
   1b350:	mov	r6, r0
   1b354:	cmp	r7, #0
   1b358:	beq	1b37c <__assert_fail@plt+0x96d0>
   1b35c:	cmn	r6, #2
   1b360:	bcc	1b37c <__assert_fail@plt+0x96d0>
   1b364:	mov	r0, #0
   1b368:	bl	2e620 <__assert_fail@plt+0x1c974>
   1b36c:	cmp	r0, #0
   1b370:	ldrbeq	r0, [r4]
   1b374:	moveq	r6, #1
   1b378:	streq	r0, [r5]
   1b37c:	mov	r0, r6
   1b380:	sub	sp, fp, #16
   1b384:	pop	{r4, r5, r6, r7, fp, pc}
   1b388:	push	{fp, lr}
   1b38c:	mov	fp, sp
   1b390:	cmp	r0, #0
   1b394:	beq	1b3b0 <__assert_fail@plt+0x9704>
   1b398:	cmp	r1, #0
   1b39c:	beq	1b3bc <__assert_fail@plt+0x9710>
   1b3a0:	cmn	r1, #1
   1b3a4:	ble	1b3c8 <__assert_fail@plt+0x971c>
   1b3a8:	pop	{fp, lr}
   1b3ac:	b	1194c <realloc@plt>
   1b3b0:	mov	r0, r1
   1b3b4:	pop	{fp, lr}
   1b3b8:	b	1b2f8 <__assert_fail@plt+0x964c>
   1b3bc:	bl	1b22c <__assert_fail@plt+0x9580>
   1b3c0:	mov	r0, #0
   1b3c4:	pop	{fp, pc}
   1b3c8:	bl	11af0 <__errno_location@plt>
   1b3cc:	mov	r1, #12
   1b3d0:	str	r1, [r0]
   1b3d4:	mov	r0, #0
   1b3d8:	pop	{fp, pc}
   1b3dc:	cmp	r2, #0
   1b3e0:	beq	1b410 <__assert_fail@plt+0x9764>
   1b3e4:	mvn	r3, #0
   1b3e8:	udiv	r3, r3, r2
   1b3ec:	cmp	r3, r1
   1b3f0:	bcs	1b410 <__assert_fail@plt+0x9764>
   1b3f4:	push	{fp, lr}
   1b3f8:	mov	fp, sp
   1b3fc:	bl	11af0 <__errno_location@plt>
   1b400:	mov	r1, #12
   1b404:	str	r1, [r0]
   1b408:	mov	r0, #0
   1b40c:	pop	{fp, pc}
   1b410:	mul	r1, r2, r1
   1b414:	b	1b388 <__assert_fail@plt+0x96dc>
	...
   1b420:	push	{fp, lr}
   1b424:	mov	fp, sp
   1b428:	mov	lr, r0
   1b42c:	movw	r0, #5068	; 0x13cc
   1b430:	mov	ip, r1
   1b434:	ldrb	r1, [r2, #28]
   1b438:	movt	r0, #4
   1b43c:	ldr	r3, [r0]
   1b440:	mov	r0, #16
   1b444:	and	r1, r1, #111	; 0x6f
   1b448:	and	r0, r0, r3, lsr #21
   1b44c:	orr	r0, r1, r0
   1b450:	mov	r1, lr
   1b454:	orr	r0, r0, #128	; 0x80
   1b458:	strb	r0, [r2, #28]
   1b45c:	mov	r0, r2
   1b460:	mov	r2, ip
   1b464:	bl	1b4a0 <__assert_fail@plt+0x97f4>
   1b468:	cmp	r0, #0
   1b46c:	moveq	r0, #0
   1b470:	popeq	{fp, pc}
   1b474:	movw	r1, #1944	; 0x798
   1b478:	mov	r2, #5
   1b47c:	movt	r1, #3
   1b480:	ldr	r0, [r1, r0, lsl #2]
   1b484:	movw	r1, #1560	; 0x618
   1b488:	movt	r1, #3
   1b48c:	add	r1, r1, r0
   1b490:	mov	r0, #0
   1b494:	pop	{fp, lr}
   1b498:	b	11940 <dcgettext@plt>
   1b49c:	nop	{0}
   1b4a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4a4:	add	fp, sp, #28
   1b4a8:	sub	sp, sp, #140	; 0x8c
   1b4ac:	mov	r9, r0
   1b4b0:	mov	r0, #0
   1b4b4:	str	r1, [sp, #20]
   1b4b8:	str	r3, [sp, #24]
   1b4bc:	mov	sl, r2
   1b4c0:	str	r0, [fp, #-52]	; 0xffffffcc
   1b4c4:	str	r0, [r9, #8]
   1b4c8:	str	r3, [r9, #12]
   1b4cc:	str	r0, [r9, #24]
   1b4d0:	ldrb	r0, [r9, #28]
   1b4d4:	and	r0, r0, #144	; 0x90
   1b4d8:	strb	r0, [r9, #28]
   1b4dc:	ldm	r9, {r0, r1}
   1b4e0:	cmp	r1, #159	; 0x9f
   1b4e4:	bls	1bc30 <__assert_fail@plt+0x9f84>
   1b4e8:	mov	r1, #160	; 0xa0
   1b4ec:	mov	r2, #160	; 0xa0
   1b4f0:	str	r0, [sp, #28]
   1b4f4:	str	r1, [r9, #8]
   1b4f8:	mov	r1, #0
   1b4fc:	bl	11b2c <memset@plt>
   1b500:	ldr	r3, [sp, #28]
   1b504:	mov	r0, #31
   1b508:	str	r0, [r3, #64]	; 0x40
   1b50c:	movw	r0, #43689	; 0xaaa9
   1b510:	movt	r0, #2730	; 0xaaa
   1b514:	cmp	sl, r0
   1b518:	bhi	1b6a4 <__assert_fail@plt+0x99f8>
   1b51c:	add	r5, sl, #1
   1b520:	mov	r4, r3
   1b524:	lsl	r0, r5, #3
   1b528:	str	r5, [r3, #4]
   1b52c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1b530:	str	r0, [r4]
   1b534:	mov	r0, #1
   1b538:	mov	r4, r0
   1b53c:	lsl	r0, r0, #1
   1b540:	cmp	r4, sl
   1b544:	bls	1b538 <__assert_fail@plt+0x988c>
   1b548:	mov	r0, #12
   1b54c:	mov	r1, r4
   1b550:	str	r5, [sp, #12]
   1b554:	bl	1af9c <__assert_fail@plt+0x92f0>
   1b558:	ldr	r5, [sp, #28]
   1b55c:	str	r0, [r5, #32]
   1b560:	sub	r0, r4, #1
   1b564:	str	r0, [r5, #68]	; 0x44
   1b568:	bl	119b8 <__ctype_get_mb_cur_max@plt>
   1b56c:	str	r0, [r5, #92]	; 0x5c
   1b570:	mov	r0, #14
   1b574:	bl	11bbc <nl_langinfo@plt>
   1b578:	ldrb	r1, [r0]
   1b57c:	orr	r1, r1, #32
   1b580:	cmp	r1, #117	; 0x75
   1b584:	bne	1b5d8 <__assert_fail@plt+0x992c>
   1b588:	ldrb	r1, [r0, #1]
   1b58c:	orr	r1, r1, #32
   1b590:	cmp	r1, #116	; 0x74
   1b594:	bne	1b5d8 <__assert_fail@plt+0x992c>
   1b598:	ldrb	r1, [r0, #2]
   1b59c:	orr	r1, r1, #32
   1b5a0:	cmp	r1, #102	; 0x66
   1b5a4:	bne	1b5d8 <__assert_fail@plt+0x992c>
   1b5a8:	ldrb	r1, [r0, #3]!
   1b5ac:	cmp	r1, #45	; 0x2d
   1b5b0:	movw	r1, #2060	; 0x80c
   1b5b4:	addeq	r0, r0, #1
   1b5b8:	movt	r1, #3
   1b5bc:	bl	1185c <strcmp@plt>
   1b5c0:	cmp	r0, #0
   1b5c4:	bne	1b5d8 <__assert_fail@plt+0x992c>
   1b5c8:	ldr	r1, [sp, #28]
   1b5cc:	ldrb	r0, [r1, #88]	; 0x58
   1b5d0:	orr	r0, r0, #4
   1b5d4:	strb	r0, [r1, #88]	; 0x58
   1b5d8:	ldr	r3, [sp, #28]
   1b5dc:	ldrb	r0, [r3, #88]	; 0x58
   1b5e0:	and	r1, r0, #247	; 0xf7
   1b5e4:	strb	r1, [r3, #88]	; 0x58
   1b5e8:	ldr	r1, [r3, #92]	; 0x5c
   1b5ec:	cmp	r1, #2
   1b5f0:	blt	1b690 <__assert_fail@plt+0x99e4>
   1b5f4:	tst	r0, #4
   1b5f8:	bne	1b684 <__assert_fail@plt+0x99d8>
   1b5fc:	mov	r0, #32
   1b600:	mov	r1, #1
   1b604:	mov	r5, #1
   1b608:	bl	1af9c <__assert_fail@plt+0x92f0>
   1b60c:	ldr	r3, [sp, #28]
   1b610:	cmp	r0, #0
   1b614:	str	r0, [r3, #60]	; 0x3c
   1b618:	beq	1b6a4 <__assert_fail@plt+0x99f8>
   1b61c:	mov	r6, #0
   1b620:	mov	r7, #0
   1b624:	mov	r8, #0
   1b628:	add	r4, r6, r8
   1b62c:	mov	r0, r4
   1b630:	bl	11b38 <btowc@plt>
   1b634:	ldr	r3, [sp, #28]
   1b638:	cmn	r0, #1
   1b63c:	ldrne	r1, [r3, #60]	; 0x3c
   1b640:	ldrne	r2, [r1, r7, lsl #2]
   1b644:	orrne	r2, r2, r5, lsl r8
   1b648:	strne	r2, [r1, r7, lsl #2]
   1b64c:	cmp	r4, #127	; 0x7f
   1b650:	bhi	1b664 <__assert_fail@plt+0x99b8>
   1b654:	cmp	r4, r0
   1b658:	ldrbne	r0, [r3, #88]	; 0x58
   1b65c:	orrne	r0, r0, #8
   1b660:	strbne	r0, [r3, #88]	; 0x58
   1b664:	add	r8, r8, #1
   1b668:	cmp	r8, #32
   1b66c:	bne	1b628 <__assert_fail@plt+0x997c>
   1b670:	add	r7, r7, #1
   1b674:	add	r6, r6, #32
   1b678:	cmp	r7, #8
   1b67c:	bne	1b624 <__assert_fail@plt+0x9978>
   1b680:	b	1b690 <__assert_fail@plt+0x99e4>
   1b684:	movw	r0, #2012	; 0x7dc
   1b688:	movt	r0, #3
   1b68c:	str	r0, [r3, #60]	; 0x3c
   1b690:	ldr	r0, [r3]
   1b694:	cmp	r0, #0
   1b698:	ldrne	r0, [r3, #32]
   1b69c:	cmpne	r0, #0
   1b6a0:	bne	1b6c4 <__assert_fail@plt+0x9a18>
   1b6a4:	mov	r4, #12
   1b6a8:	mov	r0, r3
   1b6ac:	str	r4, [fp, #-52]	; 0xffffffcc
   1b6b0:	bl	1cff0 <__assert_fail@plt+0xb344>
   1b6b4:	mov	r0, #0
   1b6b8:	str	r0, [r9]
   1b6bc:	str	r0, [r9, #4]
   1b6c0:	b	1c860 <__assert_fail@plt+0xabb4>
   1b6c4:	movw	r0, #0
   1b6c8:	movw	r1, #0
   1b6cc:	mov	r4, #0
   1b6d0:	movt	r0, #0
   1b6d4:	movt	r1, #0
   1b6d8:	str	r4, [fp, #-52]	; 0xffffffcc
   1b6dc:	orrs	r0, r1, r0
   1b6e0:	str	r0, [sp, #8]
   1b6e4:	beq	1b700 <__assert_fail@plt+0x9a54>
   1b6e8:	add	r0, r3, #136	; 0x88
   1b6ec:	mov	r1, #0
   1b6f0:	bl	118f8 <pthread_mutex_init@plt>
   1b6f4:	ldr	r3, [sp, #28]
   1b6f8:	cmp	r0, #0
   1b6fc:	bne	1b6a4 <__assert_fail@plt+0x99f8>
   1b700:	add	r1, sp, #32
   1b704:	vmov.i32	q8, #0	; 0x00000000
   1b708:	ldr	r5, [r9, #20]
   1b70c:	ldr	r7, [sp, #20]
   1b710:	ldr	r2, [sp, #24]
   1b714:	add	r0, r1, #64	; 0x40
   1b718:	vst1.32	{d16-d17}, [r0]
   1b71c:	add	r0, r1, #52	; 0x34
   1b720:	vst1.32	{d16-d17}, [r0]
   1b724:	add	r0, r1, #36	; 0x24
   1b728:	vst1.32	{d16-d17}, [r0]
   1b72c:	add	r0, r1, #20
   1b730:	vst1.32	{d16-d17}, [r0]
   1b734:	add	r0, r1, #4
   1b738:	add	r1, r1, #44	; 0x2c
   1b73c:	vst1.32	{d16-d17}, [r0]
   1b740:	str	r7, [sp, #32]
   1b744:	ubfx	r0, r2, #22, #1
   1b748:	vdup.32	q8, sl
   1b74c:	strb	r0, [sp, #104]	; 0x68
   1b750:	and	r0, r2, #4194304	; 0x400000
   1b754:	str	r5, [sp, #96]	; 0x60
   1b758:	orrs	r6, r0, r5
   1b75c:	str	r0, [sp, #16]
   1b760:	movwne	r6, #1
   1b764:	cmp	sl, #1
   1b768:	strb	r6, [sp, #107]	; 0x6b
   1b76c:	ldr	r0, [r3, #92]	; 0x5c
   1b770:	str	r0, [sp, #112]	; 0x70
   1b774:	ldrb	r2, [r3, #88]	; 0x58
   1b778:	vst1.32	{d16-d17}, [r1]
   1b77c:	ubfx	r1, r2, #3, #1
   1b780:	strb	r1, [sp, #106]	; 0x6a
   1b784:	ubfx	r1, r2, #2, #1
   1b788:	strb	r1, [sp, #105]	; 0x69
   1b78c:	blt	1b810 <__assert_fail@plt+0x9b64>
   1b790:	cmp	r0, #2
   1b794:	blt	1b7c8 <__assert_fail@plt+0x9b1c>
   1b798:	ldr	r0, [sp, #12]
   1b79c:	mov	r8, #12
   1b7a0:	cmn	r0, #-1073741823	; 0xc0000001
   1b7a4:	bhi	1bc28 <__assert_fail@plt+0x9f7c>
   1b7a8:	lsl	r1, r0, #2
   1b7ac:	mov	r0, #0
   1b7b0:	bl	1b388 <__assert_fail@plt+0x96dc>
   1b7b4:	ldr	r3, [sp, #28]
   1b7b8:	cmp	r0, #0
   1b7bc:	beq	1bc28 <__assert_fail@plt+0x9f7c>
   1b7c0:	ldr	r7, [sp, #20]
   1b7c4:	str	r0, [sp, #40]	; 0x28
   1b7c8:	ldr	r8, [sp, #12]
   1b7cc:	cmp	r6, #0
   1b7d0:	mov	r4, #0
   1b7d4:	mov	r6, #0
   1b7d8:	beq	1b804 <__assert_fail@plt+0x9b58>
   1b7dc:	mov	r0, #0
   1b7e0:	mov	r1, r8
   1b7e4:	bl	1b388 <__assert_fail@plt+0x96dc>
   1b7e8:	cmp	r0, #0
   1b7ec:	beq	1bc24 <__assert_fail@plt+0x9f78>
   1b7f0:	ldr	r3, [sp, #28]
   1b7f4:	ldr	r7, [sp, #20]
   1b7f8:	mov	r4, r0
   1b7fc:	mov	r6, #1
   1b800:	str	r0, [sp, #36]	; 0x24
   1b804:	str	r8, [sp, #68]	; 0x44
   1b808:	ldr	r0, [r3, #92]	; 0x5c
   1b80c:	b	1b814 <__assert_fail@plt+0x9b68>
   1b810:	mov	r8, #0
   1b814:	ldr	r1, [sp, #16]
   1b818:	cmp	r6, #0
   1b81c:	moveq	r4, r7
   1b820:	str	r4, [sp, #36]	; 0x24
   1b824:	cmp	r1, #0
   1b828:	beq	1b90c <__assert_fail@plt+0x9c60>
   1b82c:	cmp	r0, #2
   1b830:	blt	1b920 <__assert_fail@plt+0x9c74>
   1b834:	add	r0, sp, #32
   1b838:	bl	205b0 <__assert_fail@plt+0xe904>
   1b83c:	cmp	r0, #0
   1b840:	bne	1b904 <__assert_fail@plt+0x9c58>
   1b844:	ldr	r1, [sp, #28]
   1b848:	add	r5, sp, #32
   1b84c:	ldr	r0, [sp, #64]	; 0x40
   1b850:	cmp	r0, sl
   1b854:	bge	1ba10 <__assert_fail@plt+0x9d64>
   1b858:	ldr	r0, [r1, #92]	; 0x5c
   1b85c:	ldr	r2, [sp, #60]	; 0x3c
   1b860:	ldr	r1, [sp, #68]	; 0x44
   1b864:	add	r0, r0, r2
   1b868:	cmp	r1, r0
   1b86c:	bgt	1ba10 <__assert_fail@plt+0x9d64>
   1b870:	ldr	r0, [sp, #112]	; 0x70
   1b874:	lsl	r6, r1, #1
   1b878:	cmp	r0, #2
   1b87c:	blt	1b8c8 <__assert_fail@plt+0x9c1c>
   1b880:	mov	r8, #12
   1b884:	cmn	r6, #-1073741823	; 0xc0000001
   1b888:	bhi	1bc28 <__assert_fail@plt+0x9f7c>
   1b88c:	ldr	r0, [sp, #40]	; 0x28
   1b890:	lsl	r4, r1, #3
   1b894:	mov	r1, r4
   1b898:	bl	1b388 <__assert_fail@plt+0x96dc>
   1b89c:	cmp	r0, #0
   1b8a0:	beq	1bc28 <__assert_fail@plt+0x9f7c>
   1b8a4:	str	r0, [sp, #40]	; 0x28
   1b8a8:	ldr	r0, [sp, #44]	; 0x2c
   1b8ac:	cmp	r0, #0
   1b8b0:	beq	1b8c8 <__assert_fail@plt+0x9c1c>
   1b8b4:	mov	r1, r4
   1b8b8:	bl	1b388 <__assert_fail@plt+0x96dc>
   1b8bc:	cmp	r0, #0
   1b8c0:	beq	1bc28 <__assert_fail@plt+0x9f7c>
   1b8c4:	str	r0, [sp, #44]	; 0x2c
   1b8c8:	ldrb	r0, [sp, #107]	; 0x6b
   1b8cc:	cmp	r0, #0
   1b8d0:	beq	1b8ec <__assert_fail@plt+0x9c40>
   1b8d4:	ldr	r0, [sp, #36]	; 0x24
   1b8d8:	mov	r1, r6
   1b8dc:	bl	1b388 <__assert_fail@plt+0x96dc>
   1b8e0:	cmp	r0, #0
   1b8e4:	beq	1bc24 <__assert_fail@plt+0x9f78>
   1b8e8:	str	r0, [sp, #36]	; 0x24
   1b8ec:	mov	r0, r5
   1b8f0:	str	r6, [sp, #68]	; 0x44
   1b8f4:	bl	205b0 <__assert_fail@plt+0xe904>
   1b8f8:	ldr	r1, [sp, #28]
   1b8fc:	cmp	r0, #0
   1b900:	beq	1b84c <__assert_fail@plt+0x9ba0>
   1b904:	mov	r8, r0
   1b908:	b	1bc28 <__assert_fail@plt+0x9f7c>
   1b90c:	cmp	r0, #2
   1b910:	blt	1b98c <__assert_fail@plt+0x9ce0>
   1b914:	add	r0, sp, #32
   1b918:	bl	20c70 <__assert_fail@plt+0xefc4>
   1b91c:	b	1ba10 <__assert_fail@plt+0x9d64>
   1b920:	cmp	r8, sl
   1b924:	movgt	r8, sl
   1b928:	cmp	r8, #1
   1b92c:	blt	1b9f4 <__assert_fail@plt+0x9d48>
   1b930:	mov	r0, #0
   1b934:	mov	r4, #0
   1b938:	b	1b948 <__assert_fail@plt+0x9c9c>
   1b93c:	ldr	r7, [sp, #32]
   1b940:	ldr	r0, [sp, #56]	; 0x38
   1b944:	ldr	r5, [sp, #96]	; 0x60
   1b948:	add	r0, r7, r0
   1b94c:	cmp	r5, #0
   1b950:	ldrb	r6, [r0, r4]
   1b954:	ldrbne	r6, [r5, r6]
   1b958:	add	r0, r6, #128	; 0x80
   1b95c:	lsr	r0, r0, #7
   1b960:	cmp	r0, #2
   1b964:	bhi	1b974 <__assert_fail@plt+0x9cc8>
   1b968:	bl	11a6c <__ctype_toupper_loc@plt>
   1b96c:	ldr	r0, [r0]
   1b970:	ldr	r6, [r0, r6, lsl #2]
   1b974:	ldr	r0, [sp, #36]	; 0x24
   1b978:	strb	r6, [r0, r4]
   1b97c:	add	r4, r4, #1
   1b980:	cmp	r4, r8
   1b984:	blt	1b93c <__assert_fail@plt+0x9c90>
   1b988:	b	1b9f8 <__assert_fail@plt+0x9d4c>
   1b98c:	cmp	r5, #0
   1b990:	beq	1b9f8 <__assert_fail@plt+0x9d4c>
   1b994:	cmp	r8, sl
   1b998:	movgt	r8, sl
   1b99c:	cmp	r8, #1
   1b9a0:	blt	1ba04 <__assert_fail@plt+0x9d58>
   1b9a4:	ldrb	r0, [r7]
   1b9a8:	cmp	r8, #1
   1b9ac:	ldrb	r0, [r5, r0]
   1b9b0:	strb	r0, [r4]
   1b9b4:	mov	r0, #1
   1b9b8:	beq	1ba08 <__assert_fail@plt+0x9d5c>
   1b9bc:	mov	r0, #1
   1b9c0:	ldr	r1, [sp, #32]
   1b9c4:	ldr	r3, [sp, #56]	; 0x38
   1b9c8:	ldr	r7, [sp, #96]	; 0x60
   1b9cc:	ldr	r2, [sp, #36]	; 0x24
   1b9d0:	add	r1, r1, r3
   1b9d4:	ldrb	r1, [r1, r0]
   1b9d8:	ldrb	r1, [r7, r1]
   1b9dc:	strb	r1, [r2, r0]
   1b9e0:	add	r0, r0, #1
   1b9e4:	cmp	r0, r8
   1b9e8:	blt	1b9c0 <__assert_fail@plt+0x9d14>
   1b9ec:	mov	r0, r8
   1b9f0:	b	1ba08 <__assert_fail@plt+0x9d5c>
   1b9f4:	mov	r8, #0
   1b9f8:	str	r8, [sp, #64]	; 0x40
   1b9fc:	str	r8, [sp, #60]	; 0x3c
   1ba00:	b	1ba10 <__assert_fail@plt+0x9d64>
   1ba04:	mov	r0, #0
   1ba08:	str	r0, [sp, #64]	; 0x40
   1ba0c:	str	r0, [sp, #60]	; 0x3c
   1ba10:	mov	r5, #0
   1ba14:	ldr	r4, [sp, #24]
   1ba18:	sub	r8, fp, #48	; 0x30
   1ba1c:	add	r6, sp, #32
   1ba20:	str	r5, [fp, #-52]	; 0xffffffcc
   1ba24:	str	r5, [r9, #24]
   1ba28:	mov	r0, r8
   1ba2c:	mov	r1, r6
   1ba30:	ldr	r7, [r9]
   1ba34:	orr	r2, r4, #8388608	; 0x800000
   1ba38:	str	r4, [r7, #128]	; 0x80
   1ba3c:	bl	210bc <__assert_fail@plt+0xf410>
   1ba40:	ldr	r1, [sp, #72]	; 0x48
   1ba44:	mov	r2, r8
   1ba48:	mov	r3, r4
   1ba4c:	str	r5, [sp]
   1ba50:	add	r0, r1, r0
   1ba54:	mov	r1, r9
   1ba58:	str	r0, [sp, #72]	; 0x48
   1ba5c:	sub	r0, fp, #52	; 0x34
   1ba60:	str	r0, [sp, #4]
   1ba64:	mov	r0, r6
   1ba68:	bl	20e4c <__assert_fail@plt+0xf1a0>
   1ba6c:	ldr	r5, [sp, #28]
   1ba70:	mov	r4, r0
   1ba74:	cmp	r0, #0
   1ba78:	bne	1ba88 <__assert_fail@plt+0x9ddc>
   1ba7c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1ba80:	cmp	r0, #0
   1ba84:	bne	1bcb4 <__assert_fail@plt+0xa008>
   1ba88:	ldr	r1, [r7, #64]	; 0x40
   1ba8c:	cmp	r1, #31
   1ba90:	beq	1bc4c <__assert_fail@plt+0x9fa0>
   1ba94:	ldr	r0, [r7, #56]	; 0x38
   1ba98:	add	r2, r1, #1
   1ba9c:	add	r0, r0, r1, lsl #5
   1baa0:	mov	r1, #0
   1baa4:	vmov.i32	q8, #0	; 0x00000000
   1baa8:	str	r2, [r7, #64]	; 0x40
   1baac:	add	r6, r0, #4
   1bab0:	mov	r2, #2
   1bab4:	str	r1, [r0, #20]
   1bab8:	str	r1, [r0, #24]
   1babc:	str	r2, [r0, #28]
   1bac0:	mov	r0, #28
   1bac4:	mov	r1, r6
   1bac8:	vst1.32	{d16-d17}, [r1], r0
   1bacc:	mvn	r0, #0
   1bad0:	str	r0, [r1]
   1bad4:	cmp	r4, #0
   1bad8:	mov	r0, r6
   1badc:	beq	1bb30 <__assert_fail@plt+0x9e84>
   1bae0:	ldr	r1, [r7, #64]	; 0x40
   1bae4:	cmp	r1, #31
   1bae8:	beq	1bc80 <__assert_fail@plt+0x9fd4>
   1baec:	ldr	r0, [r7, #56]	; 0x38
   1baf0:	add	r2, r1, #1
   1baf4:	add	r0, r0, r1, lsl #5
   1baf8:	mov	r1, #0
   1bafc:	mvn	r3, #0
   1bb00:	cmp	r6, #0
   1bb04:	str	r2, [r7, #64]	; 0x40
   1bb08:	str	r1, [r0, #4]!
   1bb0c:	mov	r2, #16
   1bb10:	add	ip, r0, #20
   1bb14:	stmib	r0, {r4, r6}
   1bb18:	str	r1, [r0, #12]
   1bb1c:	str	r1, [r0, #16]
   1bb20:	stm	ip, {r1, r2, r3}
   1bb24:	str	r0, [r4]
   1bb28:	beq	1bcac <__assert_fail@plt+0xa000>
   1bb2c:	str	r0, [r6]
   1bb30:	cmp	r6, #0
   1bb34:	cmpne	r0, #0
   1bb38:	beq	1bcac <__assert_fail@plt+0xa000>
   1bb3c:	str	r0, [r5, #52]	; 0x34
   1bb40:	ldr	sl, [r9]
   1bb44:	ldr	r0, [sl, #4]
   1bb48:	lsl	r0, r0, #2
   1bb4c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1bb50:	str	r0, [sl, #12]
   1bb54:	ldr	r0, [sl, #4]
   1bb58:	lsl	r0, r0, #2
   1bb5c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1bb60:	str	r0, [sl, #16]
   1bb64:	ldr	r0, [sl, #4]
   1bb68:	add	r0, r0, r0, lsl #1
   1bb6c:	lsl	r0, r0, #2
   1bb70:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1bb74:	str	r0, [sl, #20]
   1bb78:	ldr	r0, [sl, #4]
   1bb7c:	add	r0, r0, r0, lsl #1
   1bb80:	lsl	r0, r0, #2
   1bb84:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1bb88:	str	r0, [sl, #24]
   1bb8c:	ldr	r1, [sl, #12]
   1bb90:	cmp	r1, #0
   1bb94:	ldrne	r1, [sl, #16]
   1bb98:	cmpne	r1, #0
   1bb9c:	beq	1bbb0 <__assert_fail@plt+0x9f04>
   1bba0:	cmp	r0, #0
   1bba4:	ldrne	r0, [sl, #20]
   1bba8:	cmpne	r0, #0
   1bbac:	bne	1bbbc <__assert_fail@plt+0x9f10>
   1bbb0:	mov	r0, #12
   1bbb4:	str	r0, [fp, #-52]	; 0xffffffcc
   1bbb8:	b	1bcbc <__assert_fail@plt+0xa010>
   1bbbc:	ldr	r0, [r9, #24]
   1bbc0:	lsl	r0, r0, #2
   1bbc4:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1bbc8:	cmp	r0, #0
   1bbcc:	str	r0, [sl, #132]	; 0x84
   1bbd0:	beq	1bc1c <__assert_fail@plt+0x9f70>
   1bbd4:	ldr	r1, [r9, #24]
   1bbd8:	cmp	r1, #0
   1bbdc:	beq	1bd74 <__assert_fail@plt+0xa0c8>
   1bbe0:	mov	r2, #0
   1bbe4:	cmp	r1, #4
   1bbe8:	bcc	1bd64 <__assert_fail@plt+0xa0b8>
   1bbec:	add	r3, pc, #876	; 0x36c
   1bbf0:	bic	r2, r1, #3
   1bbf4:	vmov.i32	q8, #4	; 0x00000004
   1bbf8:	mov	r7, r0
   1bbfc:	vld1.64	{d18-d19}, [r3 :128]
   1bc00:	mov	r3, r2
   1bc04:	vadd.i32	q10, q9, q8
   1bc08:	vst1.32	{d18-d19}, [r7]!
   1bc0c:	subs	r3, r3, #4
   1bc10:	vorr	q9, q10, q10
   1bc14:	bne	1bc04 <__assert_fail@plt+0x9f58>
   1bc18:	b	1bd6c <__assert_fail@plt+0xa0c0>
   1bc1c:	add	r8, sl, #52	; 0x34
   1bc20:	b	1bf2c <__assert_fail@plt+0xa280>
   1bc24:	mov	r8, #12
   1bc28:	str	r8, [fp, #-52]	; 0xffffffcc
   1bc2c:	b	1bcbc <__assert_fail@plt+0xa010>
   1bc30:	mov	r1, #160	; 0xa0
   1bc34:	mov	r4, #160	; 0xa0
   1bc38:	bl	1b388 <__assert_fail@plt+0x96dc>
   1bc3c:	cmp	r0, #0
   1bc40:	beq	1bc78 <__assert_fail@plt+0x9fcc>
   1bc44:	stm	r9, {r0, r4}
   1bc48:	b	1b4e8 <__assert_fail@plt+0x983c>
   1bc4c:	mov	r0, #996	; 0x3e4
   1bc50:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1bc54:	cmp	r0, #0
   1bc58:	beq	1bd58 <__assert_fail@plt+0xa0ac>
   1bc5c:	ldr	r1, [r7, #56]	; 0x38
   1bc60:	ldr	r5, [sp, #28]
   1bc64:	str	r1, [r0]
   1bc68:	mov	r1, #0
   1bc6c:	str	r1, [r7, #64]	; 0x40
   1bc70:	str	r0, [r7, #56]	; 0x38
   1bc74:	b	1ba98 <__assert_fail@plt+0x9dec>
   1bc78:	mov	r4, #12
   1bc7c:	b	1c860 <__assert_fail@plt+0xabb4>
   1bc80:	mov	r0, #996	; 0x3e4
   1bc84:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1bc88:	ldr	r5, [sp, #28]
   1bc8c:	cmp	r0, #0
   1bc90:	beq	1bcac <__assert_fail@plt+0xa000>
   1bc94:	ldr	r1, [r7, #56]	; 0x38
   1bc98:	str	r1, [r0]
   1bc9c:	mov	r1, #0
   1bca0:	str	r1, [r7, #64]	; 0x40
   1bca4:	str	r0, [r7, #56]	; 0x38
   1bca8:	b	1baf0 <__assert_fail@plt+0x9e44>
   1bcac:	mov	r0, #12
   1bcb0:	str	r0, [fp, #-52]	; 0xffffffcc
   1bcb4:	mov	r0, #0
   1bcb8:	str	r0, [r5, #52]	; 0x34
   1bcbc:	ldr	r4, [r9]
   1bcc0:	ldr	r0, [r4, #56]	; 0x38
   1bcc4:	cmp	r0, #0
   1bcc8:	beq	1bce0 <__assert_fail@plt+0xa034>
   1bccc:	ldr	r5, [r0]
   1bcd0:	bl	1b22c <__assert_fail@plt+0x9580>
   1bcd4:	cmp	r5, #0
   1bcd8:	mov	r0, r5
   1bcdc:	bne	1bccc <__assert_fail@plt+0xa020>
   1bce0:	mov	r0, #31
   1bce4:	mov	r5, #0
   1bce8:	str	r0, [r4, #64]	; 0x40
   1bcec:	str	r5, [r4, #52]	; 0x34
   1bcf0:	str	r5, [r4, #56]	; 0x38
   1bcf4:	ldr	r0, [r4, #16]
   1bcf8:	bl	1b22c <__assert_fail@plt+0x9580>
   1bcfc:	str	r5, [r4, #16]
   1bd00:	ldr	r0, [sp, #40]	; 0x28
   1bd04:	bl	1b22c <__assert_fail@plt+0x9580>
   1bd08:	ldr	r0, [sp, #44]	; 0x2c
   1bd0c:	bl	1b22c <__assert_fail@plt+0x9580>
   1bd10:	ldrb	r0, [sp, #107]	; 0x6b
   1bd14:	cmp	r0, #0
   1bd18:	beq	1bd24 <__assert_fail@plt+0xa078>
   1bd1c:	ldr	r0, [sp, #36]	; 0x24
   1bd20:	bl	1b22c <__assert_fail@plt+0x9580>
   1bd24:	ldr	r0, [sp, #8]
   1bd28:	cmp	r0, #0
   1bd2c:	beq	1bd3c <__assert_fail@plt+0xa090>
   1bd30:	ldr	r0, [sp, #28]
   1bd34:	add	r0, r0, #136	; 0x88
   1bd38:	bl	11874 <pthread_mutex_destroy@plt>
   1bd3c:	ldr	r0, [sp, #28]
   1bd40:	bl	1cff0 <__assert_fail@plt+0xb344>
   1bd44:	mov	r0, #0
   1bd48:	str	r0, [r9]
   1bd4c:	str	r0, [r9, #4]
   1bd50:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1bd54:	b	1c860 <__assert_fail@plt+0xabb4>
   1bd58:	ldr	r5, [sp, #28]
   1bd5c:	mov	r6, #0
   1bd60:	b	1bad4 <__assert_fail@plt+0x9e28>
   1bd64:	str	r2, [r0, r2, lsl #2]
   1bd68:	add	r2, r2, #1
   1bd6c:	cmp	r1, r2
   1bd70:	bne	1bd64 <__assert_fail@plt+0xa0b8>
   1bd74:	mov	r8, sl
   1bd78:	ldr	r2, [r8, #52]!	; 0x34
   1bd7c:	ldrb	r1, [r2, #24]
   1bd80:	cmp	r1, #17
   1bd84:	beq	1bdb0 <__assert_fail@plt+0xa104>
   1bd88:	cmp	r1, #4
   1bd8c:	bne	1be00 <__assert_fail@plt+0xa154>
   1bd90:	ldr	r1, [r2, #20]
   1bd94:	mov	r3, #1
   1bd98:	ldr	r0, [r0, r1, lsl #2]
   1bd9c:	str	r0, [r2, #20]
   1bda0:	ldr	r1, [sl, #80]	; 0x50
   1bda4:	orr	r0, r1, r3, lsl r0
   1bda8:	str	r0, [sl, #80]	; 0x50
   1bdac:	b	1be00 <__assert_fail@plt+0xa154>
   1bdb0:	ldr	r1, [r2, #4]
   1bdb4:	cmp	r1, #0
   1bdb8:	beq	1be00 <__assert_fail@plt+0xa154>
   1bdbc:	ldrb	r3, [r1, #24]
   1bdc0:	cmp	r3, #17
   1bdc4:	bne	1be00 <__assert_fail@plt+0xa154>
   1bdc8:	ldr	r3, [r1, #4]
   1bdcc:	ldr	r1, [r1, #20]
   1bdd0:	cmp	r3, #0
   1bdd4:	str	r3, [r2, #4]
   1bdd8:	strne	r2, [r3]
   1bddc:	cmp	r1, #31
   1bde0:	ldr	r3, [r2, #20]
   1bde4:	ldr	r3, [r0, r3, lsl #2]
   1bde8:	str	r3, [r0, r1, lsl #2]
   1bdec:	bgt	1be00 <__assert_fail@plt+0xa154>
   1bdf0:	ldr	r0, [sl, #80]	; 0x50
   1bdf4:	mov	r3, #1
   1bdf8:	bic	r0, r0, r3, lsl r1
   1bdfc:	b	1bda8 <__assert_fail@plt+0xa0fc>
   1be00:	mov	r0, #1
   1be04:	b	1be10 <__assert_fail@plt+0xa164>
   1be08:	str	r1, [sl, #80]	; 0x50
   1be0c:	mov	r2, r7
   1be10:	ldr	r7, [r2, #4]
   1be14:	cmp	r7, #0
   1be18:	bne	1be48 <__assert_fail@plt+0xa19c>
   1be1c:	mov	r3, #0
   1be20:	ldr	r7, [r2, #8]
   1be24:	mov	r1, r2
   1be28:	cmp	r7, r3
   1be2c:	cmpne	r7, #0
   1be30:	bne	1be48 <__assert_fail@plt+0xa19c>
   1be34:	ldr	r2, [r1]
   1be38:	mov	r3, r1
   1be3c:	cmp	r2, #0
   1be40:	bne	1be20 <__assert_fail@plt+0xa174>
   1be44:	b	1bee4 <__assert_fail@plt+0xa238>
   1be48:	ldrb	r1, [r7, #24]
   1be4c:	cmp	r1, #17
   1be50:	beq	1be88 <__assert_fail@plt+0xa1dc>
   1be54:	cmp	r1, #4
   1be58:	mov	r2, r7
   1be5c:	bne	1be10 <__assert_fail@plt+0xa164>
   1be60:	ldr	r1, [sl, #132]	; 0x84
   1be64:	mov	r2, r7
   1be68:	cmp	r1, #0
   1be6c:	beq	1be10 <__assert_fail@plt+0xa164>
   1be70:	ldr	r2, [r7, #20]
   1be74:	ldr	r1, [r1, r2, lsl #2]
   1be78:	str	r1, [r7, #20]
   1be7c:	ldr	r2, [sl, #80]	; 0x50
   1be80:	orr	r1, r2, r0, lsl r1
   1be84:	b	1be08 <__assert_fail@plt+0xa15c>
   1be88:	ldr	r3, [r7, #4]
   1be8c:	mov	r2, r7
   1be90:	cmp	r3, #0
   1be94:	beq	1be10 <__assert_fail@plt+0xa164>
   1be98:	ldrb	r1, [r3, #24]
   1be9c:	mov	r2, r7
   1bea0:	cmp	r1, #17
   1bea4:	bne	1be10 <__assert_fail@plt+0xa164>
   1bea8:	ldr	r1, [r3, #4]
   1beac:	ldr	r3, [r3, #20]
   1beb0:	cmp	r1, #0
   1beb4:	str	r1, [r7, #4]
   1beb8:	strne	r7, [r1]
   1bebc:	cmp	r3, #31
   1bec0:	ldr	r1, [r7, #20]
   1bec4:	ldr	r2, [sl, #132]	; 0x84
   1bec8:	ldr	r1, [r2, r1, lsl #2]
   1becc:	str	r1, [r2, r3, lsl #2]
   1bed0:	mov	r2, r7
   1bed4:	bgt	1be10 <__assert_fail@plt+0xa164>
   1bed8:	ldr	r1, [sl, #80]	; 0x50
   1bedc:	bic	r1, r1, r0, lsl r3
   1bee0:	b	1be08 <__assert_fail@plt+0xa15c>
   1bee4:	ldr	r1, [r9, #24]
   1bee8:	cmp	r1, #0
   1beec:	beq	1bf1c <__assert_fail@plt+0xa270>
   1bef0:	ldr	r0, [sl, #132]	; 0x84
   1bef4:	mov	r2, #0
   1bef8:	ldr	r3, [r0, r2, lsl #2]
   1befc:	cmp	r2, r3
   1bf00:	bne	1bf10 <__assert_fail@plt+0xa264>
   1bf04:	add	r2, r2, #1
   1bf08:	cmp	r2, r1
   1bf0c:	bcc	1bef8 <__assert_fail@plt+0xa24c>
   1bf10:	cmp	r2, r1
   1bf14:	beq	1bf20 <__assert_fail@plt+0xa274>
   1bf18:	b	1bf2c <__assert_fail@plt+0xa280>
   1bf1c:	ldr	r0, [sl, #132]	; 0x84
   1bf20:	bl	1b22c <__assert_fail@plt+0x9580>
   1bf24:	mov	r0, #0
   1bf28:	str	r0, [sl, #132]	; 0x84
   1bf2c:	ldr	r0, [r8]
   1bf30:	mov	r7, #0
   1bf34:	sub	r5, fp, #48	; 0x30
   1bf38:	mov	r4, r0
   1bf3c:	ldr	r0, [r0, #4]
   1bf40:	cmp	r0, #0
   1bf44:	bne	1bf38 <__assert_fail@plt+0xa28c>
   1bf48:	ldr	r0, [r4, #8]
   1bf4c:	cmp	r0, #0
   1bf50:	bne	1bf38 <__assert_fail@plt+0xa28c>
   1bf54:	mov	r2, #0
   1bf58:	b	1bf78 <__assert_fail@plt+0xa2cc>
   1bf5c:	nop	{0}
   1bf60:	andeq	r0, r0, r0
   1bf64:	andeq	r0, r0, r1
   1bf68:	andeq	r0, r0, r2
   1bf6c:	andeq	r0, r0, r3
   1bf70:	ldr	r2, [r1, #4]
   1bf74:	mov	r4, r1
   1bf78:	cmp	r2, #0
   1bf7c:	str	r7, [fp, #-48]	; 0xffffffd0
   1bf80:	beq	1bfa8 <__assert_fail@plt+0xa2fc>
   1bf84:	ldrb	r0, [r2, #24]
   1bf88:	cmp	r0, #17
   1bf8c:	bne	1bfa8 <__assert_fail@plt+0xa2fc>
   1bf90:	mov	r0, r5
   1bf94:	mov	r1, r9
   1bf98:	bl	252c4 <__assert_fail@plt+0x13618>
   1bf9c:	cmp	r0, #0
   1bfa0:	str	r0, [r4, #4]
   1bfa4:	strne	r4, [r0]
   1bfa8:	ldr	r2, [r4, #8]
   1bfac:	cmp	r2, #0
   1bfb0:	beq	1bfd8 <__assert_fail@plt+0xa32c>
   1bfb4:	ldrb	r0, [r2, #24]
   1bfb8:	cmp	r0, #17
   1bfbc:	bne	1bfd8 <__assert_fail@plt+0xa32c>
   1bfc0:	mov	r0, r5
   1bfc4:	mov	r1, r9
   1bfc8:	bl	252c4 <__assert_fail@plt+0x13618>
   1bfcc:	cmp	r0, #0
   1bfd0:	str	r0, [r4, #8]
   1bfd4:	strne	r4, [r0]
   1bfd8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1bfdc:	cmp	r0, #0
   1bfe0:	bne	1bbb4 <__assert_fail@plt+0x9f08>
   1bfe4:	ldr	r1, [r4]
   1bfe8:	cmp	r1, #0
   1bfec:	beq	1c004 <__assert_fail@plt+0xa358>
   1bff0:	ldr	r0, [r1, #8]
   1bff4:	cmp	r0, r4
   1bff8:	cmpne	r0, #0
   1bffc:	beq	1bf70 <__assert_fail@plt+0xa2c4>
   1c000:	b	1bf38 <__assert_fail@plt+0xa28c>
   1c004:	ldr	r0, [sl, #52]	; 0x34
   1c008:	mov	r4, r0
   1c00c:	ldr	r0, [r0, #4]
   1c010:	cmp	r0, #0
   1c014:	bne	1c008 <__assert_fail@plt+0xa35c>
   1c018:	ldr	r0, [r4, #8]
   1c01c:	cmp	r0, #0
   1c020:	bne	1c008 <__assert_fail@plt+0xa35c>
   1c024:	ldr	r2, [r4, #24]
   1c028:	uxtb	r0, r2
   1c02c:	cmp	r0, #16
   1c030:	bne	1c04c <__assert_fail@plt+0xa3a0>
   1c034:	ldr	r0, [r4, #4]
   1c038:	ldr	r1, [r0, #12]
   1c03c:	str	r1, [r4, #12]
   1c040:	ldr	r0, [r0, #28]
   1c044:	str	r0, [r4, #28]
   1c048:	b	1c08c <__assert_fail@plt+0xa3e0>
   1c04c:	str	r4, [r4, #12]
   1c050:	mov	r0, sl
   1c054:	ldr	r1, [r4, #20]
   1c058:	bl	25580 <__assert_fail@plt+0x138d4>
   1c05c:	cmn	r0, #1
   1c060:	str	r0, [r4, #28]
   1c064:	beq	1bbb0 <__assert_fail@plt+0x9f04>
   1c068:	ldrb	r1, [r4, #24]
   1c06c:	cmp	r1, #12
   1c070:	bne	1c08c <__assert_fail@plt+0xa3e0>
   1c074:	ldr	r1, [sl]
   1c078:	ldr	r2, [r4, #20]
   1c07c:	add	r0, r1, r0, lsl #3
   1c080:	ldr	r1, [r0, #4]
   1c084:	bfi	r1, r2, #8, #10
   1c088:	str	r1, [r0, #4]
   1c08c:	ldr	r1, [r4]
   1c090:	cmp	r1, #0
   1c094:	beq	1c0b8 <__assert_fail@plt+0xa40c>
   1c098:	ldr	r0, [r1, #8]
   1c09c:	cmp	r0, r4
   1c0a0:	mov	r4, r1
   1c0a4:	beq	1c024 <__assert_fail@plt+0xa378>
   1c0a8:	cmp	r0, #0
   1c0ac:	mov	r4, r1
   1c0b0:	beq	1c024 <__assert_fail@plt+0xa378>
   1c0b4:	b	1c008 <__assert_fail@plt+0xa35c>
   1c0b8:	ldr	r4, [r8]
   1c0bc:	ldrb	r0, [r4, #24]
   1c0c0:	cmp	r0, #16
   1c0c4:	beq	1c0dc <__assert_fail@plt+0xa430>
   1c0c8:	cmp	r0, #11
   1c0cc:	bne	1c0ec <__assert_fail@plt+0xa440>
   1c0d0:	ldr	r0, [r4, #4]
   1c0d4:	str	r4, [r0, #16]
   1c0d8:	b	1c110 <__assert_fail@plt+0xa464>
   1c0dc:	ldmib	r4, {r0, r1}
   1c0e0:	ldr	r2, [r1, #12]
   1c0e4:	str	r2, [r0, #16]
   1c0e8:	b	1c108 <__assert_fail@plt+0xa45c>
   1c0ec:	ldr	r0, [r4, #4]
   1c0f0:	cmp	r0, #0
   1c0f4:	ldrne	r1, [r4, #16]
   1c0f8:	strne	r1, [r0, #16]
   1c0fc:	ldr	r1, [r4, #8]
   1c100:	cmp	r1, #0
   1c104:	beq	1c110 <__assert_fail@plt+0xa464>
   1c108:	ldr	r2, [r4, #16]
   1c10c:	str	r2, [r1, #16]
   1c110:	mov	r1, r4
   1c114:	b	1c134 <__assert_fail@plt+0xa488>
   1c118:	ldr	r3, [r1, #16]
   1c11c:	str	r3, [r2, #16]
   1c120:	b	1c134 <__assert_fail@plt+0xa488>
   1c124:	ldmib	r1, {r0, r2}
   1c128:	ldr	r3, [r2, #12]
   1c12c:	str	r3, [r0, #16]
   1c130:	b	1c118 <__assert_fail@plt+0xa46c>
   1c134:	cmp	r0, #0
   1c138:	bne	1c168 <__assert_fail@plt+0xa4bc>
   1c13c:	mov	r3, #0
   1c140:	ldr	r0, [r1, #8]
   1c144:	mov	r2, r1
   1c148:	cmp	r0, r3
   1c14c:	cmpne	r0, #0
   1c150:	bne	1c168 <__assert_fail@plt+0xa4bc>
   1c154:	ldr	r1, [r2]
   1c158:	mov	r3, r2
   1c15c:	cmp	r1, #0
   1c160:	bne	1c140 <__assert_fail@plt+0xa494>
   1c164:	b	1c1ac <__assert_fail@plt+0xa500>
   1c168:	mov	r1, r0
   1c16c:	ldrb	r0, [r0, #24]
   1c170:	cmp	r0, #16
   1c174:	beq	1c124 <__assert_fail@plt+0xa478>
   1c178:	cmp	r0, #11
   1c17c:	bne	1c18c <__assert_fail@plt+0xa4e0>
   1c180:	ldr	r0, [r1, #4]
   1c184:	str	r1, [r0, #16]
   1c188:	b	1c134 <__assert_fail@plt+0xa488>
   1c18c:	ldr	r0, [r1, #4]
   1c190:	cmp	r0, #0
   1c194:	ldrne	r2, [r1, #16]
   1c198:	strne	r2, [r0, #16]
   1c19c:	ldr	r2, [r1, #8]
   1c1a0:	cmp	r2, #0
   1c1a4:	beq	1c134 <__assert_fail@plt+0xa488>
   1c1a8:	b	1c118 <__assert_fail@plt+0xa46c>
   1c1ac:	mov	r0, sl
   1c1b0:	mov	r1, r4
   1c1b4:	bl	2512c <__assert_fail@plt+0x13480>
   1c1b8:	cmp	r0, #0
   1c1bc:	bne	1bbb4 <__assert_fail@plt+0x9f08>
   1c1c0:	ldr	r7, [r4, #4]
   1c1c4:	cmp	r7, #0
   1c1c8:	bne	1c1f8 <__assert_fail@plt+0xa54c>
   1c1cc:	mov	r1, #0
   1c1d0:	ldr	r7, [r4, #8]
   1c1d4:	mov	r0, r4
   1c1d8:	cmp	r7, r1
   1c1dc:	cmpne	r7, #0
   1c1e0:	bne	1c1f8 <__assert_fail@plt+0xa54c>
   1c1e4:	ldr	r4, [r0]
   1c1e8:	mov	r1, r0
   1c1ec:	cmp	r4, #0
   1c1f0:	bne	1c1d0 <__assert_fail@plt+0xa524>
   1c1f4:	b	1c214 <__assert_fail@plt+0xa568>
   1c1f8:	mov	r0, sl
   1c1fc:	mov	r1, r7
   1c200:	bl	2512c <__assert_fail@plt+0x13480>
   1c204:	cmp	r0, #0
   1c208:	mov	r4, r7
   1c20c:	beq	1c1c0 <__assert_fail@plt+0xa514>
   1c210:	b	1bbb4 <__assert_fail@plt+0x9f08>
   1c214:	ldr	r0, [sl, #8]
   1c218:	cmp	r0, #0
   1c21c:	beq	1c2c0 <__assert_fail@plt+0xa614>
   1c220:	mov	r5, #0
   1c224:	sub	r4, fp, #48	; 0x30
   1c228:	mov	r7, #0
   1c22c:	ldr	r0, [sl, #24]
   1c230:	add	r6, r7, r7, lsl #1
   1c234:	add	r0, r0, r6, lsl #2
   1c238:	ldr	r0, [r0, #4]
   1c23c:	cmp	r0, #0
   1c240:	beq	1c24c <__assert_fail@plt+0xa5a0>
   1c244:	mov	r1, r5
   1c248:	b	1c28c <__assert_fail@plt+0xa5e0>
   1c24c:	mov	r0, r4
   1c250:	mov	r1, sl
   1c254:	mov	r2, r7
   1c258:	mov	r3, #1
   1c25c:	bl	25750 <__assert_fail@plt+0x13aa4>
   1c260:	cmp	r0, #0
   1c264:	bne	1bbb4 <__assert_fail@plt+0x9f08>
   1c268:	ldr	r0, [sl, #24]
   1c26c:	mov	r1, r5
   1c270:	add	r0, r0, r6, lsl #2
   1c274:	ldr	r0, [r0, #4]
   1c278:	cmp	r0, #0
   1c27c:	bne	1c28c <__assert_fail@plt+0xa5e0>
   1c280:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c284:	bl	1b22c <__assert_fail@plt+0x9580>
   1c288:	mov	r1, #1
   1c28c:	ldr	r2, [sl, #8]
   1c290:	add	r0, r7, #1
   1c294:	subs	r3, r0, r2
   1c298:	mov	r7, r3
   1c29c:	movwne	r3, #1
   1c2a0:	movne	r7, r0
   1c2a4:	tst	r1, #1
   1c2a8:	and	r5, r1, r3
   1c2ac:	cmpeq	r0, r2
   1c2b0:	bne	1c22c <__assert_fail@plt+0xa580>
   1c2b4:	add	r0, r0, r0, lsl #1
   1c2b8:	lsl	r0, r0, #2
   1c2bc:	b	1c2c4 <__assert_fail@plt+0xa618>
   1c2c0:	mov	r0, #0
   1c2c4:	ldrb	r1, [r9, #28]
   1c2c8:	str	r9, [sp, #12]
   1c2cc:	tst	r1, #16
   1c2d0:	bne	1c2ec <__assert_fail@plt+0xa640>
   1c2d4:	ldr	r1, [sp, #12]
   1c2d8:	ldr	r1, [r1, #24]
   1c2dc:	cmp	r1, #0
   1c2e0:	ldrbne	r1, [sl, #88]	; 0x58
   1c2e4:	tstne	r1, #1
   1c2e8:	bne	1c2f8 <__assert_fail@plt+0xa64c>
   1c2ec:	ldr	r1, [sl, #76]	; 0x4c
   1c2f0:	cmp	r1, #0
   1c2f4:	beq	1c430 <__assert_fail@plt+0xa784>
   1c2f8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1c2fc:	cmp	r0, #0
   1c300:	str	r0, [sl, #28]
   1c304:	beq	1c86c <__assert_fail@plt+0xabc0>
   1c308:	ldr	r1, [sl, #8]
   1c30c:	cmp	r1, #0
   1c310:	beq	1c430 <__assert_fail@plt+0xa784>
   1c314:	mov	r1, #0
   1c318:	str	r1, [r0]
   1c31c:	str	r1, [r0, #4]
   1c320:	str	r1, [r0, #8]
   1c324:	ldr	r0, [sl, #8]
   1c328:	cmp	r0, #2
   1c32c:	bcc	1c35c <__assert_fail@plt+0xa6b0>
   1c330:	mov	r2, #1
   1c334:	mov	r3, #12
   1c338:	ldr	r0, [sl, #28]
   1c33c:	add	r2, r2, #1
   1c340:	str	r1, [r0, r3]!
   1c344:	add	r3, r3, #12
   1c348:	str	r1, [r0, #4]
   1c34c:	str	r1, [r0, #8]
   1c350:	ldr	r0, [sl, #8]
   1c354:	cmp	r2, r0
   1c358:	bcc	1c338 <__assert_fail@plt+0xa68c>
   1c35c:	cmp	r0, #0
   1c360:	beq	1c430 <__assert_fail@plt+0xa784>
   1c364:	ldr	ip, [sl, #24]
   1c368:	mov	r6, #0
   1c36c:	add	lr, r6, r6, lsl #1
   1c370:	add	r2, ip, lr, lsl #2
   1c374:	ldr	r3, [r2, #4]
   1c378:	cmp	r3, #1
   1c37c:	blt	1c424 <__assert_fail@plt+0xa778>
   1c380:	ldr	r1, [r2, #8]
   1c384:	mov	r5, #0
   1c388:	str	lr, [sp, #24]
   1c38c:	str	r1, [sp, #20]
   1c390:	ldr	r0, [r1, r5, lsl #2]
   1c394:	ldr	r4, [sl, #28]
   1c398:	add	r0, r0, r0, lsl #1
   1c39c:	mov	r3, r4
   1c3a0:	ldr	r7, [r3, r0, lsl #2]!
   1c3a4:	mov	r8, r3
   1c3a8:	ldr	r2, [r8, #4]!
   1c3ac:	cmp	r7, r2
   1c3b0:	bne	1c3f8 <__assert_fail@plt+0xa74c>
   1c3b4:	mov	r1, #2
   1c3b8:	mov	r9, sl
   1c3bc:	add	sl, r4, r0, lsl #2
   1c3c0:	add	r1, r1, r7, lsl #1
   1c3c4:	str	r1, [r3]
   1c3c8:	lsl	r1, r1, #2
   1c3cc:	ldr	r0, [sl, #8]!
   1c3d0:	bl	1b388 <__assert_fail@plt+0x96dc>
   1c3d4:	cmp	r0, #0
   1c3d8:	beq	1c86c <__assert_fail@plt+0xabc0>
   1c3dc:	str	r0, [sl]
   1c3e0:	ldr	lr, [sp, #24]
   1c3e4:	ldr	r1, [sp, #20]
   1c3e8:	mov	sl, r9
   1c3ec:	ldr	ip, [r9, #24]
   1c3f0:	ldr	r2, [r8]
   1c3f4:	b	1c400 <__assert_fail@plt+0xa754>
   1c3f8:	add	r0, r4, r0, lsl #2
   1c3fc:	ldr	r0, [r0, #8]
   1c400:	add	r3, r2, #1
   1c404:	add	r5, r5, #1
   1c408:	str	r3, [r8]
   1c40c:	str	r6, [r0, r2, lsl #2]
   1c410:	add	r0, ip, lr, lsl #2
   1c414:	ldr	r0, [r0, #4]
   1c418:	cmp	r5, r0
   1c41c:	blt	1c390 <__assert_fail@plt+0xa6e4>
   1c420:	ldr	r0, [sl, #8]
   1c424:	add	r6, r6, #1
   1c428:	cmp	r6, r0
   1c42c:	bcc	1c36c <__assert_fail@plt+0xa6c0>
   1c430:	mov	r0, #0
   1c434:	str	r0, [fp, #-52]	; 0xffffffcc
   1c438:	ldr	r0, [sp, #16]
   1c43c:	cmp	r0, #0
   1c440:	bne	1c58c <__assert_fail@plt+0xa8e0>
   1c444:	ldr	r0, [sp, #28]
   1c448:	ldrb	r2, [r0, #88]	; 0x58
   1c44c:	ands	r0, r2, #4
   1c450:	beq	1c58c <__assert_fail@plt+0xa8e0>
   1c454:	ldr	r0, [sp, #12]
   1c458:	ldr	r0, [r0, #20]
   1c45c:	cmp	r0, #0
   1c460:	bne	1c58c <__assert_fail@plt+0xa8e0>
   1c464:	ldr	r5, [sp, #28]
   1c468:	mov	r9, #0
   1c46c:	ldr	r7, [r5, #8]
   1c470:	cmp	r7, #0
   1c474:	beq	1c560 <__assert_fail@plt+0xa8b4>
   1c478:	ldr	r3, [r5]
   1c47c:	mov	r8, #0
   1c480:	mov	ip, #1
   1c484:	mov	lr, #139	; 0x8b
   1c488:	mov	r6, #0
   1c48c:	mov	r4, #0
   1c490:	add	r5, r3, r4, lsl #3
   1c494:	ldrb	r1, [r5, #4]
   1c498:	sub	r1, r1, #1
   1c49c:	cmp	r1, #11
   1c4a0:	bhi	1c948 <__assert_fail@plt+0xac9c>
   1c4a4:	add	r0, pc, #0
   1c4a8:	ldr	pc, [r0, r1, lsl #2]
   1c4ac:	andeq	ip, r1, r0, asr #10
   1c4b0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c4b4:	andeq	ip, r1, ip, ror #9
   1c4b8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c4bc:	andeq	ip, r1, r8, asr r5
   1c4c0:	andeq	ip, r1, ip, lsl #11
   1c4c4:	andeq	ip, r1, r8, asr #18
   1c4c8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c4cc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c4d0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c4d4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c4d8:	andeq	ip, r1, r0, lsr #10
   1c4dc:	add	r4, r4, #1
   1c4e0:	cmp	r4, r7
   1c4e4:	bcc	1c490 <__assert_fail@plt+0xa7e4>
   1c4e8:	b	1c884 <__assert_fail@plt+0xabd8>
   1c4ec:	ldr	r5, [r3, r4, lsl #3]
   1c4f0:	ldr	r0, [r5, #16]
   1c4f4:	cmp	r0, #0
   1c4f8:	bne	1c58c <__assert_fail@plt+0xa8e0>
   1c4fc:	ldr	r0, [r5, #20]
   1c500:	cmp	r0, #0
   1c504:	ldreq	r0, [r5, #24]
   1c508:	cmpeq	r0, #0
   1c50c:	bne	1c58c <__assert_fail@plt+0xa8e0>
   1c510:	ldr	r0, [r5, #28]
   1c514:	cmp	r0, #0
   1c518:	beq	1c4dc <__assert_fail@plt+0xa830>
   1c51c:	b	1c58c <__assert_fail@plt+0xa8e0>
   1c520:	ldr	r0, [r3, r4, lsl #3]
   1c524:	sub	r0, r0, #16
   1c528:	ror	r1, r0, #4
   1c52c:	cmp	r1, #7
   1c530:	bhi	1c58c <__assert_fail@plt+0xa8e0>
   1c534:	tst	lr, ip, lsl r1
   1c538:	bne	1c4dc <__assert_fail@plt+0xa830>
   1c53c:	b	1c58c <__assert_fail@plt+0xa8e0>
   1c540:	ldrsb	r0, [r5]
   1c544:	cmp	r0, #0
   1c548:	mov	r0, #0
   1c54c:	movwlt	r0, #1
   1c550:	orr	r6, r6, r0
   1c554:	b	1c4dc <__assert_fail@plt+0xa830>
   1c558:	mov	r8, #1
   1c55c:	b	1c4dc <__assert_fail@plt+0xa830>
   1c560:	mov	r8, #0
   1c564:	mov	r0, #1
   1c568:	and	r1, r2, #249	; 0xf9
   1c56c:	str	r0, [r5, #92]	; 0x5c
   1c570:	ldr	r0, [r5, #76]	; 0x4c
   1c574:	cmp	r0, #0
   1c578:	movwgt	r9, #1
   1c57c:	orr	r0, r8, r9
   1c580:	and	r0, r0, #1
   1c584:	orr	r0, r1, r0, lsl #1
   1c588:	strb	r0, [r5, #88]	; 0x58
   1c58c:	ldr	r1, [sp, #28]
   1c590:	ldr	r2, [r1, #52]	; 0x34
   1c594:	ldr	r0, [r1, #24]
   1c598:	ldr	r2, [r2, #12]
   1c59c:	ldr	r2, [r2, #28]
   1c5a0:	str	r2, [r1, #72]	; 0x48
   1c5a4:	add	r2, r2, r2, lsl #1
   1c5a8:	add	r5, r0, r2, lsl #2
   1c5ac:	mov	r4, r5
   1c5b0:	ldr	sl, [r4, #4]!
   1c5b4:	str	sl, [fp, #-44]	; 0xffffffd4
   1c5b8:	ldr	r0, [r4]
   1c5bc:	cmp	r0, #1
   1c5c0:	blt	1c70c <__assert_fail@plt+0xaa60>
   1c5c4:	lsl	r0, sl, #2
   1c5c8:	str	sl, [fp, #-48]	; 0xffffffd0
   1c5cc:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1c5d0:	cmp	r0, #0
   1c5d4:	str	r0, [fp, #-40]	; 0xffffffd8
   1c5d8:	beq	1c92c <__assert_fail@plt+0xac80>
   1c5dc:	mov	r6, r0
   1c5e0:	ldr	r0, [r4]
   1c5e4:	ldr	r1, [r5, #8]
   1c5e8:	lsl	r2, r0, #2
   1c5ec:	mov	r0, r6
   1c5f0:	bl	118ec <memcpy@plt>
   1c5f4:	ldr	r1, [sp, #28]
   1c5f8:	mov	r0, #0
   1c5fc:	cmp	sl, #1
   1c600:	str	r0, [fp, #-32]	; 0xffffffe0
   1c604:	ldrge	r0, [r1, #76]	; 0x4c
   1c608:	cmpge	r0, #1
   1c60c:	blt	1c720 <__assert_fail@plt+0xaa74>
   1c610:	mov	ip, #0
   1c614:	sub	r8, fp, #48	; 0x30
   1c618:	mov	r9, #1
   1c61c:	b	1c624 <__assert_fail@plt+0xa978>
   1c620:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1c624:	ldr	r7, [r6, ip, lsl #2]
   1c628:	ldr	r2, [r1]
   1c62c:	add	r3, r2, r7, lsl #3
   1c630:	ldrb	r3, [r3, #4]
   1c634:	cmp	r3, #4
   1c638:	bne	1c6fc <__assert_fail@plt+0xaa50>
   1c63c:	mov	r3, #0
   1c640:	cmp	sl, #1
   1c644:	blt	1c678 <__assert_fail@plt+0xa9cc>
   1c648:	ldr	r5, [r6, r3, lsl #2]
   1c64c:	add	r4, r2, r5, lsl #3
   1c650:	ldrb	r4, [r4, #4]
   1c654:	cmp	r4, #9
   1c658:	bne	1c66c <__assert_fail@plt+0xa9c0>
   1c65c:	ldr	r4, [r2, r7, lsl #3]
   1c660:	ldr	r5, [r2, r5, lsl #3]
   1c664:	cmp	r5, r4
   1c668:	beq	1c678 <__assert_fail@plt+0xa9cc>
   1c66c:	add	r3, r3, #1
   1c670:	cmp	r3, sl
   1c674:	blt	1c648 <__assert_fail@plt+0xa99c>
   1c678:	cmp	r3, sl
   1c67c:	beq	1c6fc <__assert_fail@plt+0xaa50>
   1c680:	ldr	r2, [r1, #20]
   1c684:	add	r0, r7, r7, lsl #1
   1c688:	cmp	sl, #1
   1c68c:	add	r0, r2, r0, lsl #2
   1c690:	ldr	r0, [r0, #8]
   1c694:	ldr	r0, [r0]
   1c698:	blt	1c6d4 <__assert_fail@plt+0xaa28>
   1c69c:	mov	r2, #0
   1c6a0:	subs	r3, sl, #1
   1c6a4:	beq	1c6c8 <__assert_fail@plt+0xaa1c>
   1c6a8:	add	r5, r2, r3
   1c6ac:	lsr	r4, r5, #1
   1c6b0:	ldr	r7, [r6, r4, lsl #2]
   1c6b4:	cmp	r7, r0
   1c6b8:	movge	r3, r4
   1c6bc:	addlt	r2, r9, r5, lsr #1
   1c6c0:	cmp	r2, r3
   1c6c4:	bcc	1c6a8 <__assert_fail@plt+0xa9fc>
   1c6c8:	ldr	r2, [r6, r2, lsl #2]
   1c6cc:	cmp	r2, r0
   1c6d0:	beq	1c6fc <__assert_fail@plt+0xaa50>
   1c6d4:	ldr	r2, [r1, #24]
   1c6d8:	add	r1, r0, r0, lsl #1
   1c6dc:	mov	r0, r8
   1c6e0:	add	r1, r2, r1, lsl #2
   1c6e4:	bl	25e20 <__assert_fail@plt+0x14174>
   1c6e8:	cmp	r0, #0
   1c6ec:	bne	1c87c <__assert_fail@plt+0xabd0>
   1c6f0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1c6f4:	ldr	r1, [sp, #28]
   1c6f8:	mov	ip, #0
   1c6fc:	add	ip, ip, #1
   1c700:	cmp	ip, sl
   1c704:	blt	1c620 <__assert_fail@plt+0xa974>
   1c708:	b	1c720 <__assert_fail@plt+0xaa74>
   1c70c:	mov	r0, #0
   1c710:	str	r0, [fp, #-44]	; 0xffffffd4
   1c714:	str	r0, [fp, #-48]	; 0xffffffd0
   1c718:	str	r0, [fp, #-40]	; 0xffffffd8
   1c71c:	str	r0, [fp, #-32]	; 0xffffffe0
   1c720:	sub	r0, fp, #32
   1c724:	sub	r2, fp, #48	; 0x30
   1c728:	mov	r3, #0
   1c72c:	bl	260ec <__assert_fail@plt+0x14440>
   1c730:	ldr	r1, [sp, #28]
   1c734:	ldr	r7, [sp, #12]
   1c738:	cmp	r0, #0
   1c73c:	str	r0, [r1, #36]	; 0x24
   1c740:	beq	1c7c8 <__assert_fail@plt+0xab1c>
   1c744:	ldrsb	r2, [r0, #52]	; 0x34
   1c748:	cmn	r2, #1
   1c74c:	ble	1c760 <__assert_fail@plt+0xaab4>
   1c750:	str	r0, [r1, #40]	; 0x28
   1c754:	str	r0, [r1, #44]	; 0x2c
   1c758:	str	r0, [r1, #48]	; 0x30
   1c75c:	b	1c7dc <__assert_fail@plt+0xab30>
   1c760:	sub	r4, fp, #32
   1c764:	sub	r6, fp, #48	; 0x30
   1c768:	mov	r3, #1
   1c76c:	mov	r0, r4
   1c770:	mov	r2, r6
   1c774:	bl	260ec <__assert_fail@plt+0x14440>
   1c778:	ldr	r1, [sp, #28]
   1c77c:	mov	r2, r6
   1c780:	mov	r3, #2
   1c784:	str	r0, [r1, #40]	; 0x28
   1c788:	ldr	r1, [sp, #28]
   1c78c:	mov	r0, r4
   1c790:	bl	260ec <__assert_fail@plt+0x14440>
   1c794:	ldr	r1, [sp, #28]
   1c798:	mov	r2, r6
   1c79c:	mov	r3, #6
   1c7a0:	str	r0, [r1, #44]	; 0x2c
   1c7a4:	ldr	r1, [sp, #28]
   1c7a8:	mov	r0, r4
   1c7ac:	bl	260ec <__assert_fail@plt+0x14440>
   1c7b0:	ldr	r2, [sp, #28]
   1c7b4:	str	r0, [r2, #48]	; 0x30
   1c7b8:	ldr	r1, [r2, #40]	; 0x28
   1c7bc:	cmp	r1, #0
   1c7c0:	cmpne	r0, #0
   1c7c4:	bne	1c7d0 <__assert_fail@plt+0xab24>
   1c7c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1c7cc:	b	1c7e8 <__assert_fail@plt+0xab3c>
   1c7d0:	ldr	r0, [r2, #44]	; 0x2c
   1c7d4:	cmp	r0, #0
   1c7d8:	beq	1c7c8 <__assert_fail@plt+0xab1c>
   1c7dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c7e0:	bl	1b22c <__assert_fail@plt+0x9580>
   1c7e4:	mov	r0, #0
   1c7e8:	str	r0, [fp, #-52]	; 0xffffffcc
   1c7ec:	ldr	r5, [r7]
   1c7f0:	ldr	r0, [r5, #56]	; 0x38
   1c7f4:	cmp	r0, #0
   1c7f8:	beq	1c810 <__assert_fail@plt+0xab64>
   1c7fc:	ldr	r4, [r0]
   1c800:	bl	1b22c <__assert_fail@plt+0x9580>
   1c804:	cmp	r4, #0
   1c808:	mov	r0, r4
   1c80c:	bne	1c7fc <__assert_fail@plt+0xab50>
   1c810:	mov	r0, #31
   1c814:	mov	r4, #0
   1c818:	str	r0, [r5, #64]	; 0x40
   1c81c:	str	r4, [r5, #52]	; 0x34
   1c820:	str	r4, [r5, #56]	; 0x38
   1c824:	ldr	r0, [r5, #16]
   1c828:	bl	1b22c <__assert_fail@plt+0x9580>
   1c82c:	str	r4, [r5, #16]
   1c830:	ldr	r0, [sp, #40]	; 0x28
   1c834:	bl	1b22c <__assert_fail@plt+0x9580>
   1c838:	ldr	r0, [sp, #44]	; 0x2c
   1c83c:	bl	1b22c <__assert_fail@plt+0x9580>
   1c840:	ldrb	r0, [sp, #107]	; 0x6b
   1c844:	cmp	r0, #0
   1c848:	beq	1c854 <__assert_fail@plt+0xaba8>
   1c84c:	ldr	r0, [sp, #36]	; 0x24
   1c850:	bl	1b22c <__assert_fail@plt+0x9580>
   1c854:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1c858:	cmp	r0, #0
   1c85c:	bne	1c8fc <__assert_fail@plt+0xac50>
   1c860:	mov	r0, r4
   1c864:	sub	sp, fp, #28
   1c868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c86c:	ldr	r9, [sp, #12]
   1c870:	mov	r0, #12
   1c874:	str	r0, [fp, #-52]	; 0xffffffcc
   1c878:	b	1bcbc <__assert_fail@plt+0xa010>
   1c87c:	ldr	r7, [sp, #12]
   1c880:	b	1c7e8 <__assert_fail@plt+0xab3c>
   1c884:	orr	r0, r6, r8
   1c888:	tst	r0, #1
   1c88c:	beq	1c8f4 <__assert_fail@plt+0xac48>
   1c890:	ldr	r5, [sp, #28]
   1c894:	mov	r2, #0
   1c898:	mov	r7, #7
   1c89c:	b	1c8a4 <__assert_fail@plt+0xabf8>
   1c8a0:	ldr	r3, [r5]
   1c8a4:	add	r3, r3, r2, lsl #3
   1c8a8:	ldr	r6, [r3, #4]
   1c8ac:	uxtb	r1, r6
   1c8b0:	cmp	r1, #5
   1c8b4:	beq	1c8d4 <__assert_fail@plt+0xac28>
   1c8b8:	cmp	r1, #1
   1c8bc:	bne	1c8dc <__assert_fail@plt+0xac30>
   1c8c0:	ldrsb	r0, [r3]
   1c8c4:	cmn	r0, #1
   1c8c8:	bicle	r0, r6, #2097152	; 0x200000
   1c8cc:	strle	r0, [r3, #4]
   1c8d0:	b	1c8dc <__assert_fail@plt+0xac30>
   1c8d4:	bfi	r6, r7, #0, #8
   1c8d8:	str	r6, [r3, #4]
   1c8dc:	ldr	r0, [r5, #8]
   1c8e0:	add	r2, r2, #1
   1c8e4:	cmp	r2, r0
   1c8e8:	bcc	1c8a0 <__assert_fail@plt+0xabf4>
   1c8ec:	ldrb	r2, [r5, #88]	; 0x58
   1c8f0:	b	1c564 <__assert_fail@plt+0xa8b8>
   1c8f4:	ldr	r5, [sp, #28]
   1c8f8:	b	1c564 <__assert_fail@plt+0xa8b8>
   1c8fc:	ldr	r0, [sp, #8]
   1c900:	cmp	r0, #0
   1c904:	beq	1c914 <__assert_fail@plt+0xac68>
   1c908:	ldr	r0, [sp, #28]
   1c90c:	add	r0, r0, #136	; 0x88
   1c910:	bl	11874 <pthread_mutex_destroy@plt>
   1c914:	ldr	r0, [sp, #28]
   1c918:	bl	1cff0 <__assert_fail@plt+0xb344>
   1c91c:	mov	r0, #0
   1c920:	str	r0, [r7]
   1c924:	str	r0, [r7, #4]
   1c928:	b	1bd50 <__assert_fail@plt+0xa0a4>
   1c92c:	ldr	r7, [sp, #12]
   1c930:	mov	r0, #0
   1c934:	str	r0, [fp, #-48]	; 0xffffffd0
   1c938:	str	r0, [fp, #-44]	; 0xffffffd4
   1c93c:	mov	r0, #12
   1c940:	str	r0, [fp, #-32]	; 0xffffffe0
   1c944:	b	1c7e8 <__assert_fail@plt+0xab3c>
   1c948:	bl	11c70 <abort@plt>
   1c94c:	movw	r2, #5068	; 0x13cc
   1c950:	movt	r2, #4
   1c954:	ldr	r1, [r2]
   1c958:	str	r0, [r2]
   1c95c:	mov	r0, r1
   1c960:	bx	lr
   1c964:	push	{r4, r5, r6, sl, fp, lr}
   1c968:	add	fp, sp, #16
   1c96c:	ldr	r5, [r0, #16]
   1c970:	ldr	r6, [r0]
   1c974:	mov	r4, r0
   1c978:	mov	r1, #0
   1c97c:	mov	r2, #256	; 0x100
   1c980:	mov	r0, r5
   1c984:	bl	11b2c <memset@plt>
   1c988:	ldr	r1, [r6, #36]	; 0x24
   1c98c:	mov	r0, r4
   1c990:	mov	r2, r5
   1c994:	bl	1ca00 <__assert_fail@plt+0xad54>
   1c998:	ldr	r0, [r6, #36]	; 0x24
   1c99c:	ldr	r1, [r6, #40]	; 0x28
   1c9a0:	cmp	r0, r1
   1c9a4:	beq	1c9b8 <__assert_fail@plt+0xad0c>
   1c9a8:	mov	r0, r4
   1c9ac:	mov	r2, r5
   1c9b0:	bl	1ca00 <__assert_fail@plt+0xad54>
   1c9b4:	ldr	r0, [r6, #36]	; 0x24
   1c9b8:	ldr	r1, [r6, #44]	; 0x2c
   1c9bc:	cmp	r0, r1
   1c9c0:	beq	1c9d4 <__assert_fail@plt+0xad28>
   1c9c4:	mov	r0, r4
   1c9c8:	mov	r2, r5
   1c9cc:	bl	1ca00 <__assert_fail@plt+0xad54>
   1c9d0:	ldr	r0, [r6, #36]	; 0x24
   1c9d4:	ldr	r1, [r6, #48]	; 0x30
   1c9d8:	cmp	r0, r1
   1c9dc:	beq	1c9ec <__assert_fail@plt+0xad40>
   1c9e0:	mov	r0, r4
   1c9e4:	mov	r2, r5
   1c9e8:	bl	1ca00 <__assert_fail@plt+0xad54>
   1c9ec:	ldrb	r0, [r4, #28]
   1c9f0:	orr	r0, r0, #8
   1c9f4:	strb	r0, [r4, #28]
   1c9f8:	mov	r0, #0
   1c9fc:	pop	{r4, r5, r6, sl, fp, pc}
   1ca00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca04:	add	fp, sp, #28
   1ca08:	sub	sp, sp, #316	; 0x13c
   1ca0c:	ldr	r8, [r0]
   1ca10:	str	r0, [sp, #20]
   1ca14:	mov	r3, #0
   1ca18:	str	r2, [sp, #36]	; 0x24
   1ca1c:	ldr	r0, [r8, #92]	; 0x5c
   1ca20:	cmp	r0, #1
   1ca24:	ldreq	r0, [sp, #20]
   1ca28:	ldrbeq	r0, [r0, #14]
   1ca2c:	ubfxeq	r3, r0, #6, #1
   1ca30:	ldr	r0, [r1, #8]
   1ca34:	cmp	r0, #1
   1ca38:	blt	1cdcc <__assert_fail@plt+0xb120>
   1ca3c:	add	r0, sp, #40	; 0x28
   1ca40:	mov	r4, #1
   1ca44:	mov	r2, #0
   1ca48:	str	r3, [sp, #32]
   1ca4c:	str	r1, [sp, #12]
   1ca50:	str	r8, [sp, #24]
   1ca54:	add	r0, r0, #1
   1ca58:	str	r0, [sp, #8]
   1ca5c:	movw	r0, #1
   1ca60:	movt	r0, #32
   1ca64:	add	r0, r0, #254	; 0xfe
   1ca68:	str	r0, [sp, #4]
   1ca6c:	ldr	r0, [r1, #12]
   1ca70:	str	r2, [sp, #16]
   1ca74:	ldr	sl, [r0, r2, lsl #2]
   1ca78:	ldr	r0, [r8]
   1ca7c:	add	r1, r0, sl, lsl #3
   1ca80:	ldrb	r5, [r1, #4]
   1ca84:	sub	r1, r5, #1
   1ca88:	cmp	r1, #6
   1ca8c:	bhi	1cdb4 <__assert_fail@plt+0xb108>
   1ca90:	add	r2, pc, #0
   1ca94:	ldr	pc, [r2, r1, lsl #2]
   1ca98:			; <UNDEFINED> instruction: 0x0001cab4
   1ca9c:	ldrdeq	ip, [r1], -r4
   1caa0:	andeq	ip, r1, r4, asr #23
   1caa4:			; <UNDEFINED> instruction: 0x0001cdb4
   1caa8:	ldrdeq	ip, [r1], -r4
   1caac:	andeq	ip, r1, r8, ror #24
   1cab0:	ldrdeq	ip, [r1], -r4
   1cab4:	ldrb	r5, [r0, sl, lsl #3]
   1cab8:	ldr	r0, [sp, #36]	; 0x24
   1cabc:	cmp	r3, #0
   1cac0:	strb	r4, [r0, r5]
   1cac4:	beq	1cae0 <__assert_fail@plt+0xae34>
   1cac8:	bl	11a60 <__ctype_tolower_loc@plt>
   1cacc:	ldr	r0, [r0]
   1cad0:	ldr	r3, [sp, #32]
   1cad4:	ldr	r1, [sp, #36]	; 0x24
   1cad8:	ldr	r0, [r0, r5, lsl #2]
   1cadc:	strb	r4, [r1, r0]
   1cae0:	ldr	r0, [sp, #20]
   1cae4:	ldrb	r0, [r0, #14]
   1cae8:	tst	r0, #64	; 0x40
   1caec:	beq	1cdb4 <__assert_fail@plt+0xb108>
   1caf0:	ldr	r0, [r8, #92]	; 0x5c
   1caf4:	cmp	r0, #2
   1caf8:	blt	1cdb4 <__assert_fail@plt+0xb108>
   1cafc:	ldr	r0, [r8]
   1cb00:	add	r1, sl, #1
   1cb04:	ldr	r5, [sp, #4]
   1cb08:	movw	r6, #1
   1cb0c:	add	r9, sp, #40	; 0x28
   1cb10:	mov	r7, #0
   1cb14:	movt	r6, #32
   1cb18:	ldrb	r0, [r0, sl, lsl #3]
   1cb1c:	strb	r0, [sp, #40]	; 0x28
   1cb20:	ldr	r0, [r8, #8]
   1cb24:	cmp	r1, r0
   1cb28:	ldr	r0, [sp, #8]
   1cb2c:	bcs	1cb6c <__assert_fail@plt+0xaec0>
   1cb30:	ldr	r0, [sp, #8]
   1cb34:	ldr	r1, [r8]
   1cb38:	add	r1, r1, sl, lsl #3
   1cb3c:	ldr	r2, [r1, #12]
   1cb40:	and	r2, r2, r5
   1cb44:	cmp	r2, r6
   1cb48:	bne	1cb6c <__assert_fail@plt+0xaec0>
   1cb4c:	ldrb	r1, [r1, #8]
   1cb50:	add	r3, sl, #2
   1cb54:	strb	r1, [r0], #1
   1cb58:	add	r1, sl, #1
   1cb5c:	ldr	r2, [r8, #8]
   1cb60:	mov	sl, r1
   1cb64:	cmp	r3, r2
   1cb68:	bcc	1cb34 <__assert_fail@plt+0xae88>
   1cb6c:	sub	r6, r0, r9
   1cb70:	sub	r5, fp, #48	; 0x30
   1cb74:	sub	r0, fp, #36	; 0x24
   1cb78:	mov	r1, r9
   1cb7c:	str	r7, [fp, #-44]	; 0xffffffd4
   1cb80:	str	r7, [fp, #-48]	; 0xffffffd0
   1cb84:	mov	r2, r6
   1cb88:	mov	r3, r5
   1cb8c:	bl	1b328 <__assert_fail@plt+0x967c>
   1cb90:	cmp	r0, r6
   1cb94:	bne	1cce4 <__assert_fail@plt+0xb038>
   1cb98:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cb9c:	bl	11910 <towlower@plt>
   1cba0:	mov	r1, r0
   1cba4:	mov	r0, r9
   1cba8:	mov	r2, r5
   1cbac:	bl	11844 <wcrtomb@plt>
   1cbb0:	cmn	r0, #1
   1cbb4:	ldrbne	r0, [sp, #40]	; 0x28
   1cbb8:	ldrne	r1, [sp, #36]	; 0x24
   1cbbc:	strbne	r4, [r1, r0]
   1cbc0:	b	1cce4 <__assert_fail@plt+0xb038>
   1cbc4:	ldr	r5, [sp, #36]	; 0x24
   1cbc8:	mov	r7, #0
   1cbcc:	mov	r6, #0
   1cbd0:	mov	r9, #0
   1cbd4:	str	sl, [sp, #28]
   1cbd8:	b	1cbec <__assert_fail@plt+0xaf40>
   1cbdc:	ldr	r0, [r8]
   1cbe0:	add	r7, r7, #128	; 0x80
   1cbe4:	add	r5, r5, #32
   1cbe8:	add	r6, r6, #32
   1cbec:	ldr	r0, [r0, sl, lsl #3]
   1cbf0:	mov	sl, #0
   1cbf4:	ldr	r8, [r0, r9, lsl #2]
   1cbf8:	tst	r8, r4, lsl sl
   1cbfc:	beq	1cc44 <__assert_fail@plt+0xaf98>
   1cc00:	mov	r0, r5
   1cc04:	cmp	r3, #0
   1cc08:	strb	r4, [r0, sl]!
   1cc0c:	beq	1cc44 <__assert_fail@plt+0xaf98>
   1cc10:	add	r1, r6, sl
   1cc14:	add	r1, r1, #128	; 0x80
   1cc18:	lsr	r1, r1, #7
   1cc1c:	cmp	r1, #2
   1cc20:	bhi	1cc40 <__assert_fail@plt+0xaf94>
   1cc24:	bl	11a60 <__ctype_tolower_loc@plt>
   1cc28:	ldr	r0, [r0]
   1cc2c:	ldr	r1, [sp, #36]	; 0x24
   1cc30:	ldr	r3, [sp, #32]
   1cc34:	add	r0, r0, r7
   1cc38:	ldr	r0, [r0, sl, lsl #2]
   1cc3c:	add	r0, r1, r0
   1cc40:	strb	r4, [r0]
   1cc44:	add	sl, sl, #1
   1cc48:	cmp	sl, #32
   1cc4c:	bne	1cbf8 <__assert_fail@plt+0xaf4c>
   1cc50:	ldr	r8, [sp, #24]
   1cc54:	ldr	sl, [sp, #28]
   1cc58:	add	r9, r9, #1
   1cc5c:	cmp	r9, #8
   1cc60:	bne	1cbdc <__assert_fail@plt+0xaf30>
   1cc64:	b	1cdb4 <__assert_fail@plt+0xb108>
   1cc68:	ldr	r6, [r0, sl, lsl #3]
   1cc6c:	ldr	r0, [r8, #92]	; 0x5c
   1cc70:	cmp	r0, #2
   1cc74:	blt	1ccec <__assert_fail@plt+0xb040>
   1cc78:	ldr	r0, [r6, #36]	; 0x24
   1cc7c:	cmp	r0, #0
   1cc80:	bne	1cc98 <__assert_fail@plt+0xafec>
   1cc84:	ldrb	r0, [r6, #16]
   1cc88:	tst	r0, #1
   1cc8c:	ldreq	r0, [r6, #32]
   1cc90:	cmpeq	r0, #0
   1cc94:	beq	1ccec <__assert_fail@plt+0xb040>
   1cc98:	mov	r6, #0
   1cc9c:	add	r5, sp, #40	; 0x28
   1cca0:	sub	r7, fp, #48	; 0x30
   1cca4:	strb	r6, [fp, #-48]	; 0xffffffd0
   1cca8:	mov	r0, #0
   1ccac:	mov	r1, r7
   1ccb0:	mov	r2, #1
   1ccb4:	mov	r3, r5
   1ccb8:	str	r6, [sp, #44]	; 0x2c
   1ccbc:	str	r6, [sp, #40]	; 0x28
   1ccc0:	bl	1b328 <__assert_fail@plt+0x967c>
   1ccc4:	cmn	r0, #2
   1ccc8:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1cccc:	ldreq	r0, [sp, #36]	; 0x24
   1ccd0:	strbeq	r4, [r0, r1]
   1ccd4:	add	r0, r1, #1
   1ccd8:	tst	r0, #255	; 0xff
   1ccdc:	strb	r0, [fp, #-48]	; 0xffffffd0
   1cce0:	bne	1cca8 <__assert_fail@plt+0xaffc>
   1cce4:	ldr	r3, [sp, #32]
   1cce8:	b	1cdb4 <__assert_fail@plt+0xb108>
   1ccec:	ldr	r0, [r6, #20]
   1ccf0:	cmp	r0, #1
   1ccf4:	blt	1cdb4 <__assert_fail@plt+0xb108>
   1ccf8:	mov	r9, #0
   1ccfc:	mov	r0, #0
   1cd00:	add	r7, sp, #40	; 0x28
   1cd04:	sub	r2, fp, #48	; 0x30
   1cd08:	str	r0, [fp, #-44]	; 0xffffffd4
   1cd0c:	str	r0, [fp, #-48]	; 0xffffffd0
   1cd10:	ldr	r0, [r6]
   1cd14:	ldr	r1, [r0, r9, lsl #2]
   1cd18:	mov	r0, r7
   1cd1c:	bl	11844 <wcrtomb@plt>
   1cd20:	ldr	r3, [sp, #32]
   1cd24:	cmn	r0, #1
   1cd28:	beq	1cd58 <__assert_fail@plt+0xb0ac>
   1cd2c:	ldrb	r5, [sp, #40]	; 0x28
   1cd30:	ldr	r0, [sp, #36]	; 0x24
   1cd34:	cmp	r3, #0
   1cd38:	strb	r4, [r0, r5]
   1cd3c:	beq	1cd58 <__assert_fail@plt+0xb0ac>
   1cd40:	bl	11a60 <__ctype_tolower_loc@plt>
   1cd44:	ldr	r0, [r0]
   1cd48:	ldr	r3, [sp, #32]
   1cd4c:	ldr	r1, [sp, #36]	; 0x24
   1cd50:	ldr	r0, [r0, r5, lsl #2]
   1cd54:	strb	r4, [r1, r0]
   1cd58:	ldr	r0, [sp, #20]
   1cd5c:	ldrb	r0, [r0, #14]
   1cd60:	tst	r0, #64	; 0x40
   1cd64:	beq	1cda4 <__assert_fail@plt+0xb0f8>
   1cd68:	ldr	r0, [r8, #92]	; 0x5c
   1cd6c:	cmp	r0, #2
   1cd70:	blt	1cda4 <__assert_fail@plt+0xb0f8>
   1cd74:	ldr	r0, [r6]
   1cd78:	ldr	r0, [r0, r9, lsl #2]
   1cd7c:	bl	11910 <towlower@plt>
   1cd80:	mov	r1, r0
   1cd84:	mov	r0, r7
   1cd88:	sub	r2, fp, #48	; 0x30
   1cd8c:	bl	11844 <wcrtomb@plt>
   1cd90:	cmn	r0, #1
   1cd94:	ldr	r3, [sp, #32]
   1cd98:	ldrbne	r0, [sp, #40]	; 0x28
   1cd9c:	ldrne	r1, [sp, #36]	; 0x24
   1cda0:	strbne	r4, [r1, r0]
   1cda4:	ldr	r0, [r6, #20]
   1cda8:	add	r9, r9, #1
   1cdac:	cmp	r9, r0
   1cdb0:	blt	1ccfc <__assert_fail@plt+0xb050>
   1cdb4:	ldr	r1, [sp, #12]
   1cdb8:	ldr	r2, [sp, #16]
   1cdbc:	ldr	r0, [r1, #8]
   1cdc0:	add	r2, r2, #1
   1cdc4:	cmp	r2, r0
   1cdc8:	blt	1ca6c <__assert_fail@plt+0xadc0>
   1cdcc:	sub	sp, fp, #28
   1cdd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdd4:	ldr	r0, [sp, #36]	; 0x24
   1cdd8:	mov	r1, #1
   1cddc:	mov	r2, #256	; 0x100
   1cde0:	bl	11b2c <memset@plt>
   1cde4:	cmp	r5, #2
   1cde8:	ldreq	r1, [sp, #20]
   1cdec:	ldrbeq	r0, [r1, #28]
   1cdf0:	orreq	r0, r0, #1
   1cdf4:	strbeq	r0, [r1, #28]
   1cdf8:	sub	sp, fp, #28
   1cdfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ce04:	add	fp, sp, #24
   1ce08:	mov	r4, r0
   1ce0c:	mov	r0, #0
   1ce10:	mov	r6, r2
   1ce14:	mov	r8, r1
   1ce18:	str	r0, [r4]
   1ce1c:	str	r0, [r4, #4]
   1ce20:	str	r0, [r4, #8]
   1ce24:	mov	r0, #256	; 0x100
   1ce28:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1ce2c:	cmp	r0, #0
   1ce30:	str	r0, [r4, #16]
   1ce34:	beq	1cee4 <__assert_fail@plt+0xb238>
   1ce38:	movw	r0, #45820	; 0xb2fc
   1ce3c:	tst	r6, #1
   1ce40:	and	r1, r6, #2
   1ce44:	movt	r0, #3
   1ce48:	movweq	r0, #710	; 0x2c6
   1ce4c:	movteq	r0, #257	; 0x101
   1ce50:	tst	r6, #4
   1ce54:	orr	r5, r0, r1, lsl #21
   1ce58:	bne	1ce6c <__assert_fail@plt+0xb1c0>
   1ce5c:	ldrb	r0, [r4, #28]
   1ce60:	and	r0, r0, #127	; 0x7f
   1ce64:	strb	r0, [r4, #28]
   1ce68:	b	1ce8c <__assert_fail@plt+0xb1e0>
   1ce6c:	ldrb	r0, [r4, #28]
   1ce70:	mvn	r1, #127	; 0x7f
   1ce74:	orr	r0, r0, r1
   1ce78:	movw	r1, #45758	; 0xb2be
   1ce7c:	movt	r1, #323	; 0x143
   1ce80:	strb	r0, [r4, #28]
   1ce84:	and	r1, r5, r1
   1ce88:	orr	r5, r1, #256	; 0x100
   1ce8c:	and	r1, r6, #8
   1ce90:	and	r0, r0, #239	; 0xef
   1ce94:	mov	r7, #0
   1ce98:	orr	r0, r0, r1, lsl #1
   1ce9c:	str	r7, [r4, #20]
   1cea0:	strb	r0, [r4, #28]
   1cea4:	mov	r0, r8
   1cea8:	bl	11ac0 <strlen@plt>
   1ceac:	mov	r2, r0
   1ceb0:	mov	r0, r4
   1ceb4:	mov	r1, r8
   1ceb8:	mov	r3, r5
   1cebc:	bl	1b4a0 <__assert_fail@plt+0x97f4>
   1cec0:	mov	r5, r0
   1cec4:	cmp	r0, #16
   1cec8:	movweq	r5, #8
   1cecc:	cmp	r5, #0
   1ced0:	bne	1cef0 <__assert_fail@plt+0xb244>
   1ced4:	mov	r0, r4
   1ced8:	bl	1c964 <__assert_fail@plt+0xacb8>
   1cedc:	mov	r0, r7
   1cee0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cee4:	mov	r7, #12
   1cee8:	mov	r0, r7
   1ceec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cef0:	ldr	r0, [r4, #16]
   1cef4:	bl	1b22c <__assert_fail@plt+0x9580>
   1cef8:	mov	r0, r5
   1cefc:	str	r7, [r4, #16]
   1cf00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cf04:	push	{r4, r5, r6, r7, fp, lr}
   1cf08:	add	fp, sp, #16
   1cf0c:	cmp	r0, #17
   1cf10:	bcs	1cf84 <__assert_fail@plt+0xb2d8>
   1cf14:	movw	r1, #1944	; 0x798
   1cf18:	mov	r4, r2
   1cf1c:	mov	r2, #5
   1cf20:	mov	r5, r3
   1cf24:	movt	r1, #3
   1cf28:	ldr	r0, [r1, r0, lsl #2]
   1cf2c:	movw	r1, #1560	; 0x618
   1cf30:	movt	r1, #3
   1cf34:	add	r1, r1, r0
   1cf38:	mov	r0, #0
   1cf3c:	bl	11940 <dcgettext@plt>
   1cf40:	mov	r6, r0
   1cf44:	bl	11ac0 <strlen@plt>
   1cf48:	add	r7, r0, #1
   1cf4c:	cmp	r5, #0
   1cf50:	beq	1cf6c <__assert_fail@plt+0xb2c0>
   1cf54:	cmp	r7, r5
   1cf58:	mov	r2, r7
   1cf5c:	bhi	1cf74 <__assert_fail@plt+0xb2c8>
   1cf60:	mov	r0, r4
   1cf64:	mov	r1, r6
   1cf68:	bl	118ec <memcpy@plt>
   1cf6c:	mov	r0, r7
   1cf70:	pop	{r4, r5, r6, r7, fp, pc}
   1cf74:	sub	r2, r5, #1
   1cf78:	mov	r0, #0
   1cf7c:	strb	r0, [r4, r2]
   1cf80:	b	1cf60 <__assert_fail@plt+0xb2b4>
   1cf84:	bl	11c70 <abort@plt>
   1cf88:	push	{r4, r5, fp, lr}
   1cf8c:	add	fp, sp, #8
   1cf90:	ldr	r5, [r0]
   1cf94:	mov	r4, r0
   1cf98:	cmp	r5, #0
   1cf9c:	beq	1cfc8 <__assert_fail@plt+0xb31c>
   1cfa0:	movw	r0, #0
   1cfa4:	movw	r1, #0
   1cfa8:	movt	r0, #0
   1cfac:	movt	r1, #0
   1cfb0:	orrs	r0, r1, r0
   1cfb4:	beq	1cfc0 <__assert_fail@plt+0xb314>
   1cfb8:	add	r0, r5, #136	; 0x88
   1cfbc:	bl	11874 <pthread_mutex_destroy@plt>
   1cfc0:	mov	r0, r5
   1cfc4:	bl	1cff0 <__assert_fail@plt+0xb344>
   1cfc8:	mov	r5, #0
   1cfcc:	str	r5, [r4]
   1cfd0:	str	r5, [r4, #4]
   1cfd4:	ldr	r0, [r4, #16]
   1cfd8:	bl	1b22c <__assert_fail@plt+0x9580>
   1cfdc:	str	r5, [r4, #16]
   1cfe0:	ldr	r0, [r4, #20]
   1cfe4:	bl	1b22c <__assert_fail@plt+0x9580>
   1cfe8:	str	r5, [r4, #20]
   1cfec:	pop	{r4, r5, fp, pc}
   1cff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cff4:	add	fp, sp, #28
   1cff8:	sub	sp, sp, #4
   1cffc:	mov	sl, r0
   1d000:	ldr	r0, [r0]
   1d004:	cmp	r0, #0
   1d008:	ldrne	r1, [sl, #8]
   1d00c:	cmpne	r1, #0
   1d010:	beq	1d088 <__assert_fail@plt+0xb3dc>
   1d014:	movw	r7, #255	; 0xff
   1d018:	mov	r6, #0
   1d01c:	movt	r7, #4
   1d020:	b	1d028 <__assert_fail@plt+0xb37c>
   1d024:	ldr	r0, [sl]
   1d028:	add	r1, r0, r6, lsl #3
   1d02c:	ldr	r1, [r1, #4]
   1d030:	and	r1, r1, r7
   1d034:	cmp	r1, #3
   1d038:	beq	1d070 <__assert_fail@plt+0xb3c4>
   1d03c:	cmp	r1, #6
   1d040:	bne	1d078 <__assert_fail@plt+0xb3cc>
   1d044:	ldr	r5, [r0, r6, lsl #3]
   1d048:	ldr	r0, [r5]
   1d04c:	bl	1b22c <__assert_fail@plt+0x9580>
   1d050:	ldr	r0, [r5, #4]
   1d054:	bl	1b22c <__assert_fail@plt+0x9580>
   1d058:	ldr	r0, [r5, #8]
   1d05c:	bl	1b22c <__assert_fail@plt+0x9580>
   1d060:	ldr	r0, [r5, #12]
   1d064:	bl	1b22c <__assert_fail@plt+0x9580>
   1d068:	mov	r0, r5
   1d06c:	b	1d074 <__assert_fail@plt+0xb3c8>
   1d070:	ldr	r0, [r0, r6, lsl #3]
   1d074:	bl	1b22c <__assert_fail@plt+0x9580>
   1d078:	ldr	r0, [sl, #8]
   1d07c:	add	r6, r6, #1
   1d080:	cmp	r6, r0
   1d084:	bcc	1d024 <__assert_fail@plt+0xb378>
   1d088:	ldr	r0, [sl, #12]
   1d08c:	bl	1b22c <__assert_fail@plt+0x9580>
   1d090:	ldr	r0, [sl, #8]
   1d094:	cmp	r0, #0
   1d098:	beq	1d104 <__assert_fail@plt+0xb458>
   1d09c:	add	r7, sl, #20
   1d0a0:	add	r8, sl, #28
   1d0a4:	add	r9, sl, #24
   1d0a8:	mov	r5, #0
   1d0ac:	mov	r6, #8
   1d0b0:	ldr	r0, [r9]
   1d0b4:	cmp	r0, #0
   1d0b8:	beq	1d0c4 <__assert_fail@plt+0xb418>
   1d0bc:	ldr	r0, [r0, r6]
   1d0c0:	bl	1b22c <__assert_fail@plt+0x9580>
   1d0c4:	ldr	r0, [r8]
   1d0c8:	cmp	r0, #0
   1d0cc:	beq	1d0d8 <__assert_fail@plt+0xb42c>
   1d0d0:	ldr	r0, [r0, r6]
   1d0d4:	bl	1b22c <__assert_fail@plt+0x9580>
   1d0d8:	ldr	r0, [r7]
   1d0dc:	cmp	r0, #0
   1d0e0:	beq	1d0ec <__assert_fail@plt+0xb440>
   1d0e4:	ldr	r0, [r0, r6]
   1d0e8:	bl	1b22c <__assert_fail@plt+0x9580>
   1d0ec:	ldr	r0, [sl, #8]
   1d0f0:	add	r5, r5, #1
   1d0f4:	add	r6, r6, #12
   1d0f8:	cmp	r5, r0
   1d0fc:	bcc	1d0b0 <__assert_fail@plt+0xb404>
   1d100:	b	1d110 <__assert_fail@plt+0xb464>
   1d104:	add	r8, sl, #28
   1d108:	add	r9, sl, #24
   1d10c:	add	r7, sl, #20
   1d110:	ldr	r0, [r7]
   1d114:	bl	1b22c <__assert_fail@plt+0x9580>
   1d118:	ldr	r0, [r9]
   1d11c:	bl	1b22c <__assert_fail@plt+0x9580>
   1d120:	ldr	r0, [r8]
   1d124:	bl	1b22c <__assert_fail@plt+0x9580>
   1d128:	ldr	r0, [sl]
   1d12c:	bl	1b22c <__assert_fail@plt+0x9580>
   1d130:	ldr	r5, [sl, #32]
   1d134:	cmp	r5, #0
   1d138:	beq	1d198 <__assert_fail@plt+0xb4ec>
   1d13c:	mov	r6, #0
   1d140:	b	1d14c <__assert_fail@plt+0xb4a0>
   1d144:	ldr	r5, [sl, #32]
   1d148:	add	r6, r6, #1
   1d14c:	add	r0, r6, r6, lsl #1
   1d150:	ldr	r0, [r5, r0, lsl #2]!
   1d154:	add	r7, r5, #8
   1d158:	cmp	r0, #1
   1d15c:	blt	1d180 <__assert_fail@plt+0xb4d4>
   1d160:	mov	r4, #0
   1d164:	ldr	r0, [r7]
   1d168:	ldr	r0, [r0, r4, lsl #2]
   1d16c:	bl	2054c <__assert_fail@plt+0xe8a0>
   1d170:	ldr	r0, [r5]
   1d174:	add	r4, r4, #1
   1d178:	cmp	r4, r0
   1d17c:	blt	1d164 <__assert_fail@plt+0xb4b8>
   1d180:	ldr	r0, [r7]
   1d184:	bl	1b22c <__assert_fail@plt+0x9580>
   1d188:	ldr	r0, [sl, #68]	; 0x44
   1d18c:	cmp	r6, r0
   1d190:	bcc	1d144 <__assert_fail@plt+0xb498>
   1d194:	ldr	r5, [sl, #32]
   1d198:	mov	r0, r5
   1d19c:	bl	1b22c <__assert_fail@plt+0x9580>
   1d1a0:	ldr	r0, [sl, #60]	; 0x3c
   1d1a4:	movw	r1, #2012	; 0x7dc
   1d1a8:	movt	r1, #3
   1d1ac:	cmp	r0, r1
   1d1b0:	beq	1d1b8 <__assert_fail@plt+0xb50c>
   1d1b4:	bl	1b22c <__assert_fail@plt+0x9580>
   1d1b8:	ldr	r0, [sl, #132]	; 0x84
   1d1bc:	bl	1b22c <__assert_fail@plt+0x9580>
   1d1c0:	mov	r0, sl
   1d1c4:	sub	sp, fp, #28
   1d1c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1cc:	b	1b22c <__assert_fail@plt+0x9580>
   1d1d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1d4:	add	fp, sp, #28
   1d1d8:	sub	sp, sp, #28
   1d1dc:	ldr	sl, [fp, #8]
   1d1e0:	mov	r7, #2
   1d1e4:	cmp	sl, #7
   1d1e8:	bhi	1d2bc <__assert_fail@plt+0xb610>
   1d1ec:	mov	r5, r0
   1d1f0:	ldr	r0, [r0]
   1d1f4:	mov	r6, r3
   1d1f8:	mov	r9, r2
   1d1fc:	mov	r4, r1
   1d200:	tst	sl, #4
   1d204:	str	r0, [sp, #24]
   1d208:	bne	1d220 <__assert_fail@plt+0xb574>
   1d20c:	mov	r0, r4
   1d210:	bl	11ac0 <strlen@plt>
   1d214:	mov	r7, r0
   1d218:	mov	r8, #0
   1d21c:	b	1d228 <__assert_fail@plt+0xb57c>
   1d220:	ldr	r8, [r6]
   1d224:	ldr	r7, [r6, #4]
   1d228:	movw	r0, #0
   1d22c:	movw	r1, #0
   1d230:	movt	r0, #0
   1d234:	movt	r1, #0
   1d238:	orrs	r0, r1, r0
   1d23c:	str	r0, [sp, #20]
   1d240:	beq	1d250 <__assert_fail@plt+0xb5a4>
   1d244:	ldr	r0, [sp, #24]
   1d248:	add	r0, r0, #136	; 0x88
   1d24c:	bl	118bc <pthread_mutex_lock@plt>
   1d250:	ldrb	r0, [r5, #28]
   1d254:	tst	r0, #16
   1d258:	bne	1d26c <__assert_fail@plt+0xb5c0>
   1d25c:	str	r7, [sp]
   1d260:	stmib	sp, {r7, r9}
   1d264:	str	r6, [sp, #12]
   1d268:	b	1d280 <__assert_fail@plt+0xb5d4>
   1d26c:	mov	r0, #0
   1d270:	str	r7, [sp]
   1d274:	str	r7, [sp, #4]
   1d278:	str	r0, [sp, #8]
   1d27c:	str	r0, [sp, #12]
   1d280:	mov	r0, r5
   1d284:	mov	r1, r4
   1d288:	mov	r2, r7
   1d28c:	mov	r3, r8
   1d290:	str	sl, [sp, #16]
   1d294:	bl	1d2c8 <__assert_fail@plt+0xb61c>
   1d298:	mov	r7, r0
   1d29c:	ldr	r0, [sp, #20]
   1d2a0:	cmp	r0, #0
   1d2a4:	beq	1d2b4 <__assert_fail@plt+0xb608>
   1d2a8:	ldr	r0, [sp, #24]
   1d2ac:	add	r0, r0, #136	; 0x88
   1d2b0:	bl	11808 <pthread_mutex_unlock@plt>
   1d2b4:	cmp	r7, #0
   1d2b8:	movwne	r7, #1
   1d2bc:	mov	r0, r7
   1d2c0:	sub	sp, fp, #28
   1d2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2cc:	add	fp, sp, #28
   1d2d0:	sub	sp, sp, #412	; 0x19c
   1d2d4:	ldr	r8, [r0]
   1d2d8:	str	r2, [sp, #68]	; 0x44
   1d2dc:	str	r1, [sp, #100]	; 0x64
   1d2e0:	mov	sl, r0
   1d2e4:	add	r0, sp, #104	; 0x68
   1d2e8:	mov	r1, #0
   1d2ec:	mov	r2, #136	; 0x88
   1d2f0:	mov	r6, r3
   1d2f4:	mov	r4, #0
   1d2f8:	bl	11b2c <memset@plt>
   1d2fc:	str	r8, [sp, #188]	; 0xbc
   1d300:	ldr	r0, [fp, #8]
   1d304:	mov	ip, #0
   1d308:	ldr	r1, [sl, #16]
   1d30c:	cmp	r1, #0
   1d310:	beq	1d32c <__assert_fail@plt+0xb680>
   1d314:	ldrb	r2, [sl, #28]
   1d318:	and	r2, r2, #9
   1d31c:	cmp	r2, #8
   1d320:	movne	r1, #0
   1d324:	subs	ip, r6, r0
   1d328:	movne	ip, r1
   1d32c:	ldr	r2, [sl, #24]
   1d330:	ldr	r7, [fp, #16]
   1d334:	ldr	r1, [sl, #8]
   1d338:	mov	r9, #1
   1d33c:	mvn	r3, r2
   1d340:	cmp	r2, r7
   1d344:	addcc	r4, r3, r7
   1d348:	cmp	r1, #0
   1d34c:	str	r4, [sp, #32]
   1d350:	beq	1fd20 <__assert_fail@plt+0xe074>
   1d354:	ldr	r1, [r8, #36]	; 0x24
   1d358:	cmp	r1, #0
   1d35c:	ldrne	r2, [r8, #40]	; 0x28
   1d360:	cmpne	r2, #0
   1d364:	beq	1fd20 <__assert_fail@plt+0xe074>
   1d368:	ldr	r3, [r8, #44]	; 0x2c
   1d36c:	cmp	r3, #0
   1d370:	ldrne	r7, [r8, #48]	; 0x30
   1d374:	cmpne	r7, #0
   1d378:	beq	1fd20 <__assert_fail@plt+0xe074>
   1d37c:	ldr	r1, [r1, #8]
   1d380:	ldr	r7, [sl, #20]
   1d384:	cmp	r1, #0
   1d388:	bne	1d398 <__assert_fail@plt+0xb6ec>
   1d38c:	ldr	r1, [r2, #8]
   1d390:	cmp	r1, #0
   1d394:	beq	1ef20 <__assert_fail@plt+0xd274>
   1d398:	str	r0, [sp, #76]	; 0x4c
   1d39c:	ldr	r0, [sp, #32]
   1d3a0:	ldr	r1, [fp, #16]
   1d3a4:	subs	lr, r1, r0
   1d3a8:	mov	r0, #1
   1d3ac:	str	r0, [sp, #44]	; 0x2c
   1d3b0:	bne	1d3c4 <__assert_fail@plt+0xb718>
   1d3b4:	ldr	r0, [r8, #76]	; 0x4c
   1d3b8:	cmp	r0, #0
   1d3bc:	movwne	r0, #1
   1d3c0:	str	r0, [sp, #44]	; 0x2c
   1d3c4:	ldr	r0, [sl, #12]
   1d3c8:	ldr	r2, [r8, #92]	; 0x5c
   1d3cc:	ldr	r3, [sp, #100]	; 0x64
   1d3d0:	ldr	r1, [r8, #8]
   1d3d4:	str	r7, [sp, #168]	; 0xa8
   1d3d8:	str	sl, [sp, #80]	; 0x50
   1d3dc:	str	r3, [sp, #104]	; 0x68
   1d3e0:	str	r2, [sp, #184]	; 0xb8
   1d3e4:	ubfx	r3, r0, #22, #1
   1d3e8:	and	r0, r0, #4194304	; 0x400000
   1d3ec:	ldr	r4, [sp, #68]	; 0x44
   1d3f0:	add	r5, r1, #1
   1d3f4:	orrs	sl, r7, r0
   1d3f8:	strb	r3, [sp, #176]	; 0xb0
   1d3fc:	add	r3, sp, #104	; 0x68
   1d400:	movwne	sl, #1
   1d404:	add	r3, r3, #44	; 0x2c
   1d408:	cmp	r2, r5
   1d40c:	strb	sl, [sp, #179]	; 0xb3
   1d410:	movgt	r5, r2
   1d414:	ldrb	r0, [r8, #88]	; 0x58
   1d418:	vdup.32	q8, r4
   1d41c:	vst1.32	{d16-d17}, [r3]
   1d420:	ubfx	r3, r0, #3, #1
   1d424:	strb	r3, [sp, #178]	; 0xb2
   1d428:	ubfx	r0, r0, #2, #1
   1d42c:	str	r8, [sp, #96]	; 0x60
   1d430:	str	ip, [sp, #88]	; 0x58
   1d434:	str	r7, [sp, #84]	; 0x54
   1d438:	strb	r0, [sp, #177]	; 0xb1
   1d43c:	add	r0, r4, #1
   1d440:	cmp	r0, r5
   1d444:	movlt	r5, r0
   1d448:	cmp	r2, #2
   1d44c:	blt	1d488 <__assert_fail@plt+0xb7dc>
   1d450:	mov	r9, #12
   1d454:	cmn	r5, #-1073741823	; 0xc0000001
   1d458:	bhi	1fccc <__assert_fail@plt+0xe020>
   1d45c:	lsl	r1, r5, #2
   1d460:	mov	r0, #0
   1d464:	mov	r4, lr
   1d468:	bl	1b388 <__assert_fail@plt+0x96dc>
   1d46c:	ldr	r7, [sp, #84]	; 0x54
   1d470:	ldr	ip, [sp, #88]	; 0x58
   1d474:	cmp	r0, #0
   1d478:	beq	1fccc <__assert_fail@plt+0xe020>
   1d47c:	ldr	r8, [sp, #96]	; 0x60
   1d480:	mov	lr, r4
   1d484:	str	r0, [sp, #112]	; 0x70
   1d488:	cmp	sl, #0
   1d48c:	ldr	sl, [sp, #80]	; 0x50
   1d490:	mov	r4, #1
   1d494:	beq	1d4c4 <__assert_fail@plt+0xb818>
   1d498:	mov	r0, #0
   1d49c:	mov	r1, r5
   1d4a0:	mov	r9, lr
   1d4a4:	mov	r4, #0
   1d4a8:	bl	1b388 <__assert_fail@plt+0x96dc>
   1d4ac:	cmp	r0, #0
   1d4b0:	beq	1faf8 <__assert_fail@plt+0xde4c>
   1d4b4:	ldr	ip, [sp, #88]	; 0x58
   1d4b8:	ldr	r7, [sp, #84]	; 0x54
   1d4bc:	mov	lr, r9
   1d4c0:	str	r0, [sp, #108]	; 0x6c
   1d4c4:	add	r1, r8, #96	; 0x60
   1d4c8:	str	r5, [sp, #140]	; 0x8c
   1d4cc:	ldr	r0, [fp, #12]
   1d4d0:	cmp	r4, #0
   1d4d4:	str	r1, [sp, #172]	; 0xac
   1d4d8:	ldrb	r1, [r8, #88]	; 0x58
   1d4dc:	ubfx	r1, r1, #4, #1
   1d4e0:	strb	r1, [sp, #182]	; 0xb6
   1d4e4:	mov	r1, #0
   1d4e8:	beq	1d504 <__assert_fail@plt+0xb858>
   1d4ec:	ldr	r1, [sp, #100]	; 0x64
   1d4f0:	str	r1, [sp, #108]	; 0x6c
   1d4f4:	ldr	r1, [r8, #92]	; 0x5c
   1d4f8:	cmp	r1, #1
   1d4fc:	ldr	r1, [sp, #68]	; 0x44
   1d500:	movwgt	r1, #0
   1d504:	str	r1, [sp, #136]	; 0x88
   1d508:	str	r1, [sp, #132]	; 0x84
   1d50c:	str	r0, [sp, #160]	; 0xa0
   1d510:	str	r0, [sp, #156]	; 0x9c
   1d514:	str	lr, [sp, #92]	; 0x5c
   1d518:	ldrb	r0, [sl, #28]
   1d51c:	lsr	r0, r0, #7
   1d520:	strb	r0, [sp, #181]	; 0xb5
   1d524:	mvn	r0, #0
   1d528:	ldr	r8, [r8, #76]	; 0x4c
   1d52c:	str	r0, [sp, #196]	; 0xc4
   1d530:	ldr	r0, [fp, #24]
   1d534:	lsl	sl, r8, #1
   1d538:	cmp	r8, #1
   1d53c:	str	r0, [sp, #192]	; 0xc0
   1d540:	blt	1d598 <__assert_fail@plt+0xb8ec>
   1d544:	movw	r0, #43690	; 0xaaaa
   1d548:	mov	r9, #12
   1d54c:	movt	r0, #2730	; 0xaaa
   1d550:	cmp	sl, r0
   1d554:	bhi	1fccc <__assert_fail@plt+0xe020>
   1d558:	add	r0, r8, r8, lsl #1
   1d55c:	mov	r4, r5
   1d560:	lsl	r0, r0, #4
   1d564:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1d568:	mov	r5, r0
   1d56c:	str	r0, [sp, #220]	; 0xdc
   1d570:	lsl	r0, r8, #3
   1d574:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1d578:	cmp	r0, #0
   1d57c:	str	r0, [sp, #236]	; 0xec
   1d580:	beq	1fccc <__assert_fail@plt+0xe020>
   1d584:	add	lr, sp, #84	; 0x54
   1d588:	cmp	r5, #0
   1d58c:	mov	r5, r4
   1d590:	ldm	lr, {r7, ip, lr}
   1d594:	beq	1fccc <__assert_fail@plt+0xe020>
   1d598:	mov	r0, #1
   1d59c:	cmp	lr, #1
   1d5a0:	str	r0, [sp, #224]	; 0xe0
   1d5a4:	str	sl, [sp, #216]	; 0xd8
   1d5a8:	str	sl, [sp, #232]	; 0xe8
   1d5ac:	bhi	1d5c0 <__assert_fail@plt+0xb914>
   1d5b0:	ldr	r0, [sp, #96]	; 0x60
   1d5b4:	ldrb	r0, [r0, #88]	; 0x58
   1d5b8:	tst	r0, #2
   1d5bc:	beq	1d5ec <__assert_fail@plt+0xb940>
   1d5c0:	mov	r9, #12
   1d5c4:	cmn	r5, #-1073741822	; 0xc0000002
   1d5c8:	bhi	1fccc <__assert_fail@plt+0xe020>
   1d5cc:	mov	r0, #4
   1d5d0:	add	r0, r0, r5, lsl #2
   1d5d4:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1d5d8:	ldr	r7, [sp, #84]	; 0x54
   1d5dc:	ldr	ip, [sp, #88]	; 0x58
   1d5e0:	cmp	r0, #0
   1d5e4:	str	r0, [sp, #204]	; 0xcc
   1d5e8:	beq	1fccc <__assert_fail@plt+0xe020>
   1d5ec:	ldr	r1, [fp, #24]
   1d5f0:	ldr	r2, [sp, #76]	; 0x4c
   1d5f4:	str	r6, [fp, #-200]	; 0xffffff38
   1d5f8:	mov	r8, #1
   1d5fc:	mov	r5, r6
   1d600:	mov	r0, #4
   1d604:	tst	r1, #1
   1d608:	mov	r1, #4
   1d60c:	mov	r4, r2
   1d610:	movweq	r1, #6
   1d614:	cmp	r2, r6
   1d618:	str	r1, [sp, #164]	; 0xa4
   1d61c:	ldr	r1, [sp, #96]	; 0x60
   1d620:	mvnlt	r8, #0
   1d624:	movlt	r4, r6
   1d628:	movlt	r5, r2
   1d62c:	cmp	ip, #0
   1d630:	ldr	r1, [r1, #92]	; 0x5c
   1d634:	str	r1, [sp, #60]	; 0x3c
   1d638:	beq	1d67c <__assert_fail@plt+0xb9d0>
   1d63c:	cmp	r1, #1
   1d640:	beq	1d660 <__assert_fail@plt+0xb9b4>
   1d644:	ldr	r0, [sp, #80]	; 0x50
   1d648:	ldr	r0, [r0, #12]
   1d64c:	and	r0, r0, #4194304	; 0x400000
   1d650:	orr	r0, r7, r0
   1d654:	clz	r0, r0
   1d658:	lsr	r0, r0, #5
   1d65c:	lsl	r0, r0, #2
   1d660:	cmp	r7, #0
   1d664:	mov	r1, r7
   1d668:	movwne	r1, #1
   1d66c:	cmp	r2, r6
   1d670:	orrge	r1, r1, #2
   1d674:	orr	r0, r1, r0
   1d678:	b	1d680 <__assert_fail@plt+0xb9d4>
   1d67c:	mov	r0, #8
   1d680:	add	r1, sp, #104	; 0x68
   1d684:	cmp	r2, r6
   1d688:	sub	r0, r0, #4
   1d68c:	str	r4, [sp, #52]	; 0x34
   1d690:	str	r5, [sp, #48]	; 0x30
   1d694:	str	r8, [sp, #64]	; 0x40
   1d698:	add	r1, r1, #32
   1d69c:	str	r0, [sp, #76]	; 0x4c
   1d6a0:	str	r1, [sp, #24]
   1d6a4:	sub	r1, fp, #200	; 0xc8
   1d6a8:	movwlt	r1, #0
   1d6ac:	cmp	r1, #0
   1d6b0:	str	r1, [sp, #36]	; 0x24
   1d6b4:	movwne	r1, #1
   1d6b8:	str	r1, [sp, #40]	; 0x28
   1d6bc:	sub	r1, fp, #192	; 0xc0
   1d6c0:	add	r1, r1, #16
   1d6c4:	str	r1, [sp, #28]
   1d6c8:	b	1dd98 <__assert_fail@plt+0xc0ec>
   1d6cc:	mov	r1, #0
   1d6d0:	sub	r0, fp, #188	; 0xbc
   1d6d4:	str	r8, [fp, #-192]	; 0xffffff40
   1d6d8:	stm	r0, {r1, r6, sl}
   1d6dc:	ldr	r0, [sp, #28]
   1d6e0:	str	r1, [r0]
   1d6e4:	str	r1, [r0, #4]
   1d6e8:	str	r1, [r0, #8]
   1d6ec:	add	r0, sp, #104	; 0x68
   1d6f0:	sub	r1, fp, #192	; 0xc0
   1d6f4:	bl	2ae40 <__assert_fail@plt+0x19194>
   1d6f8:	mov	r9, r0
   1d6fc:	mov	r0, #0
   1d700:	bl	1b22c <__assert_fail@plt+0x9580>
   1d704:	cmp	r9, #0
   1d708:	bne	1d808 <__assert_fail@plt+0xbb5c>
   1d70c:	ldr	r0, [r8]
   1d710:	mov	r4, #0
   1d714:	cmp	r0, #0
   1d718:	beq	1dbc8 <__assert_fail@plt+0xbf1c>
   1d71c:	b	1ed48 <__assert_fail@plt+0xd09c>
   1d720:	mov	r9, r0
   1d724:	b	1ed38 <__assert_fail@plt+0xd08c>
   1d728:	sxtb	r0, r0
   1d72c:	cmn	r0, #1
   1d730:	ble	1d788 <__assert_fail@plt+0xbadc>
   1d734:	ldr	r0, [sp, #44]	; 0x2c
   1d738:	mov	lr, #1
   1d73c:	mov	r9, sl
   1d740:	cmp	r0, #0
   1d744:	bne	1e114 <__assert_fail@plt+0xc468>
   1d748:	mov	r9, sl
   1d74c:	ldr	r8, [sp, #64]	; 0x40
   1d750:	mov	sl, r5
   1d754:	cmn	r9, #1
   1d758:	beq	1dbdc <__assert_fail@plt+0xbf30>
   1d75c:	b	1ea20 <__assert_fail@plt+0xcd74>
   1d760:	ldr	r0, [r8, #8]
   1d764:	cmp	r0, #1
   1d768:	blt	1dd0c <__assert_fail@plt+0xc060>
   1d76c:	ldr	r4, [sp, #188]	; 0xbc
   1d770:	mov	r9, #0
   1d774:	b	1dc78 <__assert_fail@plt+0xbfcc>
   1d778:	ldr	r0, [sp, #192]	; 0xc0
   1d77c:	and	r0, r0, #2
   1d780:	eor	r3, r0, #10
   1d784:	b	1eaa0 <__assert_fail@plt+0xcdf4>
   1d788:	cmn	sl, #1
   1d78c:	ble	1d7cc <__assert_fail@plt+0xbb20>
   1d790:	ldr	r0, [sp, #152]	; 0x98
   1d794:	cmp	r0, sl
   1d798:	beq	1dd50 <__assert_fail@plt+0xc0a4>
   1d79c:	ldr	r0, [sp, #184]	; 0xb8
   1d7a0:	cmp	r0, #2
   1d7a4:	blt	1d7d4 <__assert_fail@plt+0xbb28>
   1d7a8:	ldr	r0, [sp, #112]	; 0x70
   1d7ac:	mov	r1, sl
   1d7b0:	ldr	r4, [r0, r1, lsl #2]
   1d7b4:	cmn	r4, #1
   1d7b8:	bne	1d850 <__assert_fail@plt+0xbba4>
   1d7bc:	sub	r2, r1, #1
   1d7c0:	cmp	r1, #0
   1d7c4:	mov	r1, r2
   1d7c8:	bgt	1d7b0 <__assert_fail@plt+0xbb04>
   1d7cc:	ldr	r3, [sp, #164]	; 0xa4
   1d7d0:	b	1d874 <__assert_fail@plt+0xbbc8>
   1d7d4:	ldr	r0, [sp, #108]	; 0x6c
   1d7d8:	ldr	r1, [sp, #172]	; 0xac
   1d7dc:	mov	r3, #1
   1d7e0:	ldrb	r0, [r0, sl]
   1d7e4:	ubfx	r2, r0, #5, #3
   1d7e8:	ldr	r1, [r1, r2, lsl #2]
   1d7ec:	and	r2, r0, #31
   1d7f0:	tst	r1, r3, lsl r2
   1d7f4:	bne	1d874 <__assert_fail@plt+0xbbc8>
   1d7f8:	mov	r3, #0
   1d7fc:	cmp	r0, #10
   1d800:	beq	1d868 <__assert_fail@plt+0xbbbc>
   1d804:	b	1d874 <__assert_fail@plt+0xbbc8>
   1d808:	mov	r0, #0
   1d80c:	str	r0, [sp, #56]	; 0x38
   1d810:	b	1dc1c <__assert_fail@plt+0xbf70>
   1d814:	mov	r0, r4
   1d818:	bl	11afc <iswalnum@plt>
   1d81c:	mov	r3, #1
   1d820:	cmp	r4, #95	; 0x5f
   1d824:	beq	1eb14 <__assert_fail@plt+0xce68>
   1d828:	cmp	r0, #0
   1d82c:	beq	1eafc <__assert_fail@plt+0xce50>
   1d830:	b	1eb14 <__assert_fail@plt+0xce68>
   1d834:	mov	r0, r5
   1d838:	bl	11afc <iswalnum@plt>
   1d83c:	cmp	r5, #95	; 0x5f
   1d840:	beq	1e0c8 <__assert_fail@plt+0xc41c>
   1d844:	cmp	r0, #0
   1d848:	beq	1e02c <__assert_fail@plt+0xc380>
   1d84c:	b	1e0c8 <__assert_fail@plt+0xc41c>
   1d850:	ldrb	r0, [sp, #182]	; 0xb6
   1d854:	cmp	r0, #0
   1d858:	bne	1dd60 <__assert_fail@plt+0xc0b4>
   1d85c:	mov	r3, #0
   1d860:	cmp	r4, #10
   1d864:	bne	1d874 <__assert_fail@plt+0xbbc8>
   1d868:	ldrb	r3, [sp, #181]	; 0xb5
   1d86c:	cmp	r3, #0
   1d870:	movwne	r3, #2
   1d874:	ldr	r0, [r8, #8]
   1d878:	cmp	r0, #1
   1d87c:	blt	1d928 <__assert_fail@plt+0xbc7c>
   1d880:	ldr	r6, [sp, #188]	; 0xbc
   1d884:	str	r7, [sp, #16]
   1d888:	ldr	r7, [r8, #12]
   1d88c:	str	sl, [sp, #20]
   1d890:	and	ip, r3, #8
   1d894:	and	sl, r3, #2
   1d898:	and	r3, r3, #1
   1d89c:	mov	r2, #0
   1d8a0:	ldr	r6, [r6]
   1d8a4:	ldr	r1, [r7, r2, lsl #2]
   1d8a8:	add	r4, r6, r1, lsl #3
   1d8ac:	mov	lr, r1
   1d8b0:	ldr	r4, [r4, #4]
   1d8b4:	uxtb	r1, r4
   1d8b8:	cmp	r1, #2
   1d8bc:	bne	1d90c <__assert_fail@plt+0xbc60>
   1d8c0:	movw	r1, #65280	; 0xff00
   1d8c4:	movt	r1, #3
   1d8c8:	tst	r4, r1
   1d8cc:	beq	1d930 <__assert_fail@plt+0xbc84>
   1d8d0:	cmp	r3, #0
   1d8d4:	bne	1d8e0 <__assert_fail@plt+0xbc34>
   1d8d8:	ands	r1, r4, #1024	; 0x400
   1d8dc:	bne	1d90c <__assert_fail@plt+0xbc60>
   1d8e0:	cmp	r3, #0
   1d8e4:	andsne	r1, r4, #2048	; 0x800
   1d8e8:	bne	1d90c <__assert_fail@plt+0xbc60>
   1d8ec:	cmp	sl, #0
   1d8f0:	bne	1d8fc <__assert_fail@plt+0xbc50>
   1d8f4:	ands	r1, r4, #8192	; 0x2000
   1d8f8:	bne	1d90c <__assert_fail@plt+0xbc60>
   1d8fc:	cmp	ip, #0
   1d900:	bne	1d930 <__assert_fail@plt+0xbc84>
   1d904:	ands	r1, r4, #32768	; 0x8000
   1d908:	beq	1d930 <__assert_fail@plt+0xbc84>
   1d90c:	add	r2, r2, #1
   1d910:	mov	lr, #0
   1d914:	cmp	r2, r0
   1d918:	blt	1d8a4 <__assert_fail@plt+0xbbf8>
   1d91c:	ldr	sl, [sp, #20]
   1d920:	ldr	r7, [sp, #16]
   1d924:	b	1e114 <__assert_fail@plt+0xc468>
   1d928:	mov	lr, #0
   1d92c:	b	1e114 <__assert_fail@plt+0xc468>
   1d930:	ldr	sl, [sp, #20]
   1d934:	ldr	r1, [sp, #44]	; 0x2c
   1d938:	clz	r0, lr
   1d93c:	ldr	r7, [sp, #16]
   1d940:	cmp	lr, #0
   1d944:	lsr	r0, r0, #5
   1d948:	movwne	lr, #1
   1d94c:	mov	r9, sl
   1d950:	orr	r0, r1, r0
   1d954:	mvneq	r9, #0
   1d958:	cmp	r0, #0
   1d95c:	beq	1d748 <__assert_fail@plt+0xba9c>
   1d960:	b	1e114 <__assert_fail@plt+0xc468>
   1d964:	ldr	r3, [sp, #164]	; 0xa4
   1d968:	movw	r9, #65280	; 0xff00
   1d96c:	movt	r9, #3
   1d970:	b	1dab4 <__assert_fail@plt+0xbe08>
   1d974:	ldr	r0, [sp, #192]	; 0xc0
   1d978:	and	r0, r0, #2
   1d97c:	eor	r3, r0, #10
   1d980:	b	1dab4 <__assert_fail@plt+0xbe08>
   1d984:	mov	r0, r7
   1d988:	bl	11afc <iswalnum@plt>
   1d98c:	mov	r3, #1
   1d990:	cmp	r7, #95	; 0x5f
   1d994:	beq	1d968 <__assert_fail@plt+0xbcbc>
   1d998:	movw	r9, #65280	; 0xff00
   1d99c:	cmp	r0, #0
   1d9a0:	movt	r9, #3
   1d9a4:	beq	1da9c <__assert_fail@plt+0xbdf0>
   1d9a8:	b	1dab4 <__assert_fail@plt+0xbe08>
   1d9ac:	ldr	r1, [r4]
   1d9b0:	cmp	r1, #0
   1d9b4:	bne	1ec94 <__assert_fail@plt+0xcfe8>
   1d9b8:	cmp	sl, #1
   1d9bc:	blt	1dbc8 <__assert_fail@plt+0xbf1c>
   1d9c0:	ldr	r0, [sp, #204]	; 0xcc
   1d9c4:	str	r4, [sp, #56]	; 0x38
   1d9c8:	lsl	r4, sl, #2
   1d9cc:	mov	r5, sl
   1d9d0:	sub	r0, r0, #4
   1d9d4:	ldr	r6, [r0, r5, lsl #2]
   1d9d8:	cmp	r6, #0
   1d9dc:	ldrbne	r1, [r6, #52]	; 0x34
   1d9e0:	tstne	r1, #16
   1d9e4:	bne	1da00 <__assert_fail@plt+0xbd54>
   1d9e8:	sub	r5, r5, #1
   1d9ec:	sub	r4, r4, #4
   1d9f0:	add	r1, r5, #1
   1d9f4:	cmp	r1, #2
   1d9f8:	bge	1d9d4 <__assert_fail@plt+0xbd28>
   1d9fc:	b	1dbc4 <__assert_fail@plt+0xbf18>
   1da00:	cmp	r5, #0
   1da04:	ble	1d964 <__assert_fail@plt+0xbcb8>
   1da08:	ldr	r0, [sp, #152]	; 0x98
   1da0c:	movw	r9, #65280	; 0xff00
   1da10:	movt	r9, #3
   1da14:	add	r0, r0, #1
   1da18:	cmp	r0, r5
   1da1c:	beq	1d974 <__assert_fail@plt+0xbcc8>
   1da20:	ldr	r0, [sp, #184]	; 0xb8
   1da24:	cmp	r0, #2
   1da28:	blt	1da58 <__assert_fail@plt+0xbdac>
   1da2c:	ldr	r0, [sp, #112]	; 0x70
   1da30:	mov	r1, r5
   1da34:	sub	r0, r0, #4
   1da38:	ldr	r7, [r0, r1, lsl #2]
   1da3c:	cmn	r7, #1
   1da40:	bne	1da90 <__assert_fail@plt+0xbde4>
   1da44:	sub	r1, r1, #1
   1da48:	cmp	r1, #0
   1da4c:	bgt	1da38 <__assert_fail@plt+0xbd8c>
   1da50:	ldr	r3, [sp, #164]	; 0xa4
   1da54:	b	1dab4 <__assert_fail@plt+0xbe08>
   1da58:	ldr	r0, [sp, #108]	; 0x6c
   1da5c:	ldr	r1, [sp, #172]	; 0xac
   1da60:	mov	r3, #1
   1da64:	add	r0, r0, r5
   1da68:	ldrb	r0, [r0, #-1]
   1da6c:	ubfx	r2, r0, #5, #3
   1da70:	ldr	r1, [r1, r2, lsl #2]
   1da74:	and	r2, r0, #31
   1da78:	tst	r1, r3, lsl r2
   1da7c:	bne	1dab4 <__assert_fail@plt+0xbe08>
   1da80:	mov	r3, #0
   1da84:	cmp	r0, #10
   1da88:	beq	1daa8 <__assert_fail@plt+0xbdfc>
   1da8c:	b	1dab4 <__assert_fail@plt+0xbe08>
   1da90:	ldrb	r0, [sp, #182]	; 0xb6
   1da94:	cmp	r0, #0
   1da98:	bne	1d984 <__assert_fail@plt+0xbcd8>
   1da9c:	mov	r3, #0
   1daa0:	cmp	r7, #10
   1daa4:	bne	1dab4 <__assert_fail@plt+0xbe08>
   1daa8:	ldrb	r3, [sp, #181]	; 0xb5
   1daac:	cmp	r3, #0
   1dab0:	movwne	r3, #2
   1dab4:	ldr	r0, [r6, #8]
   1dab8:	sub	sl, r5, #1
   1dabc:	cmp	r0, #1
   1dac0:	blt	1db58 <__assert_fail@plt+0xbeac>
   1dac4:	and	r1, r3, #8
   1dac8:	ldr	r7, [r6, #12]
   1dacc:	and	lr, r3, #1
   1dad0:	mov	r2, #0
   1dad4:	str	r1, [sp, #16]
   1dad8:	and	r1, r3, #2
   1dadc:	str	r1, [sp, #20]
   1dae0:	ldr	r1, [sp, #188]	; 0xbc
   1dae4:	ldr	r1, [r1]
   1dae8:	ldr	r6, [r7, r2, lsl #2]
   1daec:	add	r3, r1, r6, lsl #3
   1daf0:	ldr	ip, [r3, #4]
   1daf4:	uxtb	r3, ip
   1daf8:	cmp	r3, #2
   1dafc:	bne	1db4c <__assert_fail@plt+0xbea0>
   1db00:	tst	ip, r9
   1db04:	beq	1db5c <__assert_fail@plt+0xbeb0>
   1db08:	cmp	lr, #0
   1db0c:	bne	1db18 <__assert_fail@plt+0xbe6c>
   1db10:	ands	r3, ip, #1024	; 0x400
   1db14:	bne	1db4c <__assert_fail@plt+0xbea0>
   1db18:	cmp	lr, #0
   1db1c:	andsne	r3, ip, #2048	; 0x800
   1db20:	bne	1db4c <__assert_fail@plt+0xbea0>
   1db24:	ldr	r3, [sp, #20]
   1db28:	cmp	r3, #0
   1db2c:	bne	1db38 <__assert_fail@plt+0xbe8c>
   1db30:	ands	r3, ip, #8192	; 0x2000
   1db34:	bne	1db4c <__assert_fail@plt+0xbea0>
   1db38:	ldr	r3, [sp, #16]
   1db3c:	cmp	r3, #0
   1db40:	bne	1db5c <__assert_fail@plt+0xbeb0>
   1db44:	ands	r3, ip, #32768	; 0x8000
   1db48:	beq	1db5c <__assert_fail@plt+0xbeb0>
   1db4c:	add	r2, r2, #1
   1db50:	cmp	r2, r0
   1db54:	blt	1dae8 <__assert_fail@plt+0xbe3c>
   1db58:	mov	r6, #0
   1db5c:	ldr	r0, [sp, #56]	; 0x38
   1db60:	mov	r2, r4
   1db64:	mov	r1, #0
   1db68:	mov	r4, r0
   1db6c:	bl	11b2c <memset@plt>
   1db70:	sub	r0, fp, #188	; 0xbc
   1db74:	str	r8, [fp, #-192]	; 0xffffff40
   1db78:	mov	r1, #0
   1db7c:	stm	r0, {r4, r6, sl}
   1db80:	ldr	r0, [sp, #28]
   1db84:	str	r1, [r0]
   1db88:	str	r1, [r0, #4]
   1db8c:	str	r1, [r0, #8]
   1db90:	add	r0, sp, #104	; 0x68
   1db94:	sub	r1, fp, #192	; 0xc0
   1db98:	bl	2ae40 <__assert_fail@plt+0x19194>
   1db9c:	mov	r9, r0
   1dba0:	mov	r0, #0
   1dba4:	bl	1b22c <__assert_fail@plt+0x9580>
   1dba8:	cmp	r9, #0
   1dbac:	bne	1dc18 <__assert_fail@plt+0xbf6c>
   1dbb0:	ldr	r0, [r8]
   1dbb4:	cmp	r0, #0
   1dbb8:	beq	1d9ac <__assert_fail@plt+0xbd00>
   1dbbc:	sub	sl, r5, #1
   1dbc0:	b	1ec94 <__assert_fail@plt+0xcfe8>
   1dbc4:	ldr	r4, [sp, #56]	; 0x38
   1dbc8:	mov	r0, r8
   1dbcc:	bl	1b22c <__assert_fail@plt+0x9580>
   1dbd0:	mov	r0, r4
   1dbd4:	bl	1b22c <__assert_fail@plt+0x9580>
   1dbd8:	ldr	r8, [sp, #64]	; 0x40
   1dbdc:	add	r0, sp, #104	; 0x68
   1dbe0:	bl	27078 <__assert_fail@plt+0x153cc>
   1dbe4:	ldr	r0, [fp, #-200]	; 0xffffff38
   1dbe8:	ldr	r5, [sp, #48]	; 0x30
   1dbec:	ldr	r4, [sp, #52]	; 0x34
   1dbf0:	mov	r9, #1
   1dbf4:	add	r6, r0, r8
   1dbf8:	cmp	r6, r5
   1dbfc:	str	r6, [fp, #-200]	; 0xffffff38
   1dc00:	blt	1fccc <__assert_fail@plt+0xe020>
   1dc04:	ldr	ip, [sp, #88]	; 0x58
   1dc08:	ldr	r7, [sp, #84]	; 0x54
   1dc0c:	cmp	r4, r6
   1dc10:	bge	1dd98 <__assert_fail@plt+0xc0ec>
   1dc14:	b	1fccc <__assert_fail@plt+0xe020>
   1dc18:	str	r4, [sp, #56]	; 0x38
   1dc1c:	mov	r0, r8
   1dc20:	bl	1b22c <__assert_fail@plt+0x9580>
   1dc24:	ldr	r0, [sp, #56]	; 0x38
   1dc28:	bl	1b22c <__assert_fail@plt+0x9580>
   1dc2c:	ldr	r8, [sp, #96]	; 0x60
   1dc30:	ldr	sl, [sp, #92]	; 0x5c
   1dc34:	ldr	r5, [sp, #80]	; 0x50
   1dc38:	cmp	r9, #0
   1dc3c:	sub	r6, fp, #48	; 0x30
   1dc40:	beq	1ed7c <__assert_fail@plt+0xd0d0>
   1dc44:	ldr	r8, [sp, #64]	; 0x40
   1dc48:	cmp	r9, #1
   1dc4c:	beq	1dbdc <__assert_fail@plt+0xbf30>
   1dc50:	b	1fccc <__assert_fail@plt+0xe020>
   1dc54:	ldr	r0, [sp, #236]	; 0xec
   1dc58:	lsl	r1, r7, #3
   1dc5c:	bl	1b388 <__assert_fail@plt+0x96dc>
   1dc60:	cmp	r0, #0
   1dc64:	beq	1dd44 <__assert_fail@plt+0xc098>
   1dc68:	str	r0, [sp, #236]	; 0xec
   1dc6c:	lsl	r0, r7, #1
   1dc70:	str	r0, [sp, #232]	; 0xe8
   1dc74:	b	1dcc0 <__assert_fail@plt+0xc014>
   1dc78:	ldr	r1, [r8, #12]
   1dc7c:	ldr	r6, [r1, r9, lsl #2]
   1dc80:	ldr	r1, [r4]
   1dc84:	add	r2, r1, r6, lsl #3
   1dc88:	ldrb	r2, [r2, #4]
   1dc8c:	cmp	r2, #8
   1dc90:	bne	1dd00 <__assert_fail@plt+0xc054>
   1dc94:	ldr	r1, [r1, r6, lsl #3]
   1dc98:	cmp	r1, #31
   1dc9c:	bgt	1dd00 <__assert_fail@plt+0xc054>
   1dca0:	ldr	r2, [r4, #80]	; 0x50
   1dca4:	mov	r3, #1
   1dca8:	tst	r2, r3, lsl r1
   1dcac:	beq	1dd00 <__assert_fail@plt+0xc054>
   1dcb0:	ldr	r7, [sp, #228]	; 0xe4
   1dcb4:	ldr	r0, [sp, #232]	; 0xe8
   1dcb8:	cmp	r7, r0
   1dcbc:	beq	1dc54 <__assert_fail@plt+0xbfa8>
   1dcc0:	mov	r0, #1
   1dcc4:	mov	r1, #24
   1dcc8:	bl	1af9c <__assert_fail@plt+0x92f0>
   1dccc:	ldr	r1, [sp, #228]	; 0xe4
   1dcd0:	ldr	r2, [sp, #236]	; 0xec
   1dcd4:	str	r0, [r2, r1, lsl #2]
   1dcd8:	ldr	r0, [sp, #236]	; 0xec
   1dcdc:	ldr	r0, [r0, r1, lsl #2]
   1dce0:	cmp	r0, #0
   1dce4:	beq	1dd44 <__assert_fail@plt+0xc098>
   1dce8:	add	r1, r1, #1
   1dcec:	str	r6, [r0, #4]
   1dcf0:	str	r1, [sp, #228]	; 0xe4
   1dcf4:	mov	r1, #0
   1dcf8:	str	r1, [r0]
   1dcfc:	ldr	r0, [r8, #8]
   1dd00:	add	r9, r9, #1
   1dd04:	cmp	r9, r0
   1dd08:	blt	1dc78 <__assert_fail@plt+0xbfcc>
   1dd0c:	mov	r7, #0
   1dd10:	str	r7, [fp, #-196]	; 0xffffff3c
   1dd14:	ldrb	r0, [r8, #52]	; 0x34
   1dd18:	tst	r0, #64	; 0x40
   1dd1c:	beq	1e100 <__assert_fail@plt+0xc454>
   1dd20:	add	r1, r8, #4
   1dd24:	add	r0, sp, #104	; 0x68
   1dd28:	bl	2721c <__assert_fail@plt+0x15570>
   1dd2c:	mov	r7, #0
   1dd30:	cmp	r0, #0
   1dd34:	str	r0, [fp, #-196]	; 0xffffff3c
   1dd38:	beq	1e100 <__assert_fail@plt+0xc454>
   1dd3c:	mov	r9, r0
   1dd40:	b	1d74c <__assert_fail@plt+0xbaa0>
   1dd44:	mov	r9, #12
   1dd48:	mov	sl, r5
   1dd4c:	b	1ea28 <__assert_fail@plt+0xcd7c>
   1dd50:	ldr	r0, [sp, #192]	; 0xc0
   1dd54:	and	r0, r0, #2
   1dd58:	eor	r3, r0, #10
   1dd5c:	b	1d874 <__assert_fail@plt+0xbbc8>
   1dd60:	mov	r0, r4
   1dd64:	mov	r6, r7
   1dd68:	bl	11afc <iswalnum@plt>
   1dd6c:	mov	r3, #1
   1dd70:	cmp	r4, #95	; 0x5f
   1dd74:	beq	1dd8c <__assert_fail@plt+0xc0e0>
   1dd78:	ldr	r5, [sp, #92]	; 0x5c
   1dd7c:	cmp	r0, #0
   1dd80:	mov	r7, r6
   1dd84:	beq	1d85c <__assert_fail@plt+0xbbb0>
   1dd88:	b	1d874 <__assert_fail@plt+0xbbc8>
   1dd8c:	ldr	r5, [sp, #92]	; 0x5c
   1dd90:	mov	r7, r6
   1dd94:	b	1d874 <__assert_fail@plt+0xbbc8>
   1dd98:	ldr	r1, [sp, #76]	; 0x4c
   1dd9c:	cmp	r1, #4
   1dda0:	bhi	1dea4 <__assert_fail@plt+0xc1f8>
   1dda4:	add	r0, pc, #0
   1dda8:	ldr	pc, [r0, r1, lsl #2]
   1ddac:	andeq	sp, r1, r0, asr #27
   1ddb0:	andeq	sp, r1, r0, asr #27
   1ddb4:	andeq	sp, r1, ip, lsl #28
   1ddb8:	andeq	sp, r1, ip, lsr lr
   1ddbc:	andeq	sp, r1, ip, lsr #30
   1ddc0:	mov	r9, #1
   1ddc4:	cmp	r6, r5
   1ddc8:	blt	1fccc <__assert_fail@plt+0xe020>
   1ddcc:	ldr	r1, [sp, #68]	; 0x44
   1ddd0:	mov	r0, #0
   1ddd4:	cmp	r6, r1
   1ddd8:	ldrlt	r0, [sp, #100]	; 0x64
   1dddc:	ldrblt	r0, [r0, r6]
   1dde0:	cmp	r7, #0
   1dde4:	ldrbne	r0, [r7, r0]
   1dde8:	ldrb	r0, [ip, r0]
   1ddec:	cmp	r0, #0
   1ddf0:	bne	1df2c <__assert_fail@plt+0xc280>
   1ddf4:	sub	r0, r6, #1
   1ddf8:	cmp	r6, r5
   1ddfc:	mov	r6, r0
   1de00:	str	r0, [fp, #-200]	; 0xffffff38
   1de04:	bgt	1ddd0 <__assert_fail@plt+0xc124>
   1de08:	b	1fccc <__assert_fail@plt+0xe020>
   1de0c:	ldr	r1, [sp, #100]	; 0x64
   1de10:	cmp	r6, r4
   1de14:	bge	1de6c <__assert_fail@plt+0xc1c0>
   1de18:	ldrb	r0, [r1, r6]
   1de1c:	ldrb	r0, [ip, r0]
   1de20:	cmp	r0, #0
   1de24:	bne	1de6c <__assert_fail@plt+0xc1c0>
   1de28:	add	r6, r6, #1
   1de2c:	cmp	r6, r4
   1de30:	str	r6, [fp, #-200]	; 0xffffff38
   1de34:	blt	1de18 <__assert_fail@plt+0xc16c>
   1de38:	b	1de6c <__assert_fail@plt+0xc1c0>
   1de3c:	cmp	r6, r4
   1de40:	bge	1de6c <__assert_fail@plt+0xc1c0>
   1de44:	ldr	r1, [sp, #100]	; 0x64
   1de48:	ldrb	r0, [r1, r6]
   1de4c:	ldrb	r0, [r7, r0]
   1de50:	ldrb	r0, [ip, r0]
   1de54:	cmp	r0, #0
   1de58:	bne	1de6c <__assert_fail@plt+0xc1c0>
   1de5c:	add	r6, r6, #1
   1de60:	cmp	r6, r4
   1de64:	str	r6, [fp, #-200]	; 0xffffff38
   1de68:	blt	1de48 <__assert_fail@plt+0xc19c>
   1de6c:	cmp	r6, r4
   1de70:	bne	1df2c <__assert_fail@plt+0xc280>
   1de74:	ldr	r1, [sp, #68]	; 0x44
   1de78:	mov	r0, #0
   1de7c:	mov	r6, r4
   1de80:	cmp	r4, r1
   1de84:	ldr	r1, [sp, #100]	; 0x64
   1de88:	ldrblt	r0, [r1, r4]
   1de8c:	cmp	r7, #0
   1de90:	ldrbne	r0, [r7, r0]
   1de94:	ldrb	r0, [ip, r0]
   1de98:	cmp	r0, #0
   1de9c:	bne	1df2c <__assert_fail@plt+0xc280>
   1dea0:	b	1fe74 <__assert_fail@plt+0xe1c8>
   1dea4:	ldr	r0, [sp, #128]	; 0x80
   1dea8:	ldr	r2, [sp, #136]	; 0x88
   1deac:	sub	r1, r6, r0
   1deb0:	cmp	r1, r2
   1deb4:	bcs	1def8 <__assert_fail@plt+0xc24c>
   1deb8:	ldr	r3, [sp, #132]	; 0x84
   1debc:	mov	r2, #0
   1dec0:	cmp	r1, r3
   1dec4:	ldrcc	r2, [sp, #108]	; 0x6c
   1dec8:	ldrbcc	r2, [r2, r1]
   1decc:	ldrb	r1, [ip, r2]
   1ded0:	cmp	r1, #0
   1ded4:	bne	1df2c <__assert_fail@plt+0xc280>
   1ded8:	add	r6, r6, r8
   1dedc:	mov	r9, #1
   1dee0:	cmp	r6, r5
   1dee4:	str	r6, [fp, #-200]	; 0xffffff38
   1dee8:	blt	1fccc <__assert_fail@plt+0xe020>
   1deec:	cmp	r6, r4
   1def0:	ble	1dea8 <__assert_fail@plt+0xc1fc>
   1def4:	b	1fccc <__assert_fail@plt+0xe020>
   1def8:	ldr	r2, [fp, #24]
   1defc:	add	r0, sp, #104	; 0x68
   1df00:	mov	r1, r6
   1df04:	bl	2666c <__assert_fail@plt+0x149c0>
   1df08:	cmp	r0, #0
   1df0c:	bne	1fb0c <__assert_fail@plt+0xde60>
   1df10:	ldr	r0, [sp, #128]	; 0x80
   1df14:	ldr	r6, [fp, #-200]	; 0xffffff38
   1df18:	ldr	ip, [sp, #88]	; 0x58
   1df1c:	ldr	r4, [sp, #52]	; 0x34
   1df20:	ldr	r5, [sp, #48]	; 0x30
   1df24:	sub	r1, r6, r0
   1df28:	b	1deb8 <__assert_fail@plt+0xc20c>
   1df2c:	ldr	r2, [fp, #24]
   1df30:	add	r0, sp, #104	; 0x68
   1df34:	mov	r1, r6
   1df38:	bl	2666c <__assert_fail@plt+0x149c0>
   1df3c:	cmp	r0, #0
   1df40:	bne	1fb0c <__assert_fail@plt+0xde60>
   1df44:	ldr	r0, [sp, #60]	; 0x3c
   1df48:	cmp	r0, #1
   1df4c:	ldrne	r0, [sp, #132]	; 0x84
   1df50:	cmpne	r0, #0
   1df54:	bne	1dfdc <__assert_fail@plt+0xc330>
   1df58:	mov	r0, #0
   1df5c:	str	r0, [sp, #212]	; 0xd4
   1df60:	str	r0, [sp, #224]	; 0xe0
   1df64:	str	r0, [sp, #208]	; 0xd0
   1df68:	str	r0, [fp, #-196]	; 0xffffff3c
   1df6c:	ldr	r4, [sp, #188]	; 0xbc
   1df70:	ldr	sl, [sp, #144]	; 0x90
   1df74:	ldr	r8, [r4, #36]	; 0x24
   1df78:	ldrsb	r0, [r8, #52]	; 0x34
   1df7c:	cmn	r0, #1
   1df80:	bgt	1e0cc <__assert_fail@plt+0xc420>
   1df84:	cmp	sl, #0
   1df88:	ble	1dfcc <__assert_fail@plt+0xc320>
   1df8c:	ldr	r1, [sp, #152]	; 0x98
   1df90:	sub	r0, sl, #1
   1df94:	cmp	r1, r0
   1df98:	beq	1e0b4 <__assert_fail@plt+0xc408>
   1df9c:	ldr	r1, [sp, #184]	; 0xb8
   1dfa0:	cmp	r1, #2
   1dfa4:	blt	1dff0 <__assert_fail@plt+0xc344>
   1dfa8:	ldr	r0, [sp, #112]	; 0x70
   1dfac:	mov	r1, sl
   1dfb0:	sub	r0, r0, #4
   1dfb4:	ldr	r5, [r0, r1, lsl #2]
   1dfb8:	cmn	r5, #1
   1dfbc:	bne	1e020 <__assert_fail@plt+0xc374>
   1dfc0:	sub	r1, r1, #1
   1dfc4:	cmp	r1, #0
   1dfc8:	bgt	1dfb4 <__assert_fail@plt+0xc308>
   1dfcc:	ldr	r3, [sp, #164]	; 0xa4
   1dfd0:	tst	r3, #1
   1dfd4:	beq	1e048 <__assert_fail@plt+0xc39c>
   1dfd8:	b	1e0c8 <__assert_fail@plt+0xc41c>
   1dfdc:	ldr	r0, [sp, #112]	; 0x70
   1dfe0:	ldr	r0, [r0]
   1dfe4:	cmn	r0, #1
   1dfe8:	bne	1df58 <__assert_fail@plt+0xc2ac>
   1dfec:	b	1dbe4 <__assert_fail@plt+0xbf38>
   1dff0:	ldr	r1, [sp, #108]	; 0x6c
   1dff4:	ldr	r2, [sp, #172]	; 0xac
   1dff8:	mov	r3, #1
   1dffc:	ldrb	r0, [r1, r0]
   1e000:	ubfx	r1, r0, #5, #3
   1e004:	ldr	r1, [r2, r1, lsl #2]
   1e008:	and	r2, r0, #31
   1e00c:	tst	r1, r3, lsl r2
   1e010:	bne	1e0c8 <__assert_fail@plt+0xc41c>
   1e014:	cmp	r0, #10
   1e018:	beq	1e034 <__assert_fail@plt+0xc388>
   1e01c:	b	1e0cc <__assert_fail@plt+0xc420>
   1e020:	ldrb	r0, [sp, #182]	; 0xb6
   1e024:	cmp	r0, #0
   1e028:	bne	1d834 <__assert_fail@plt+0xbb88>
   1e02c:	cmp	r5, #10
   1e030:	bne	1e0cc <__assert_fail@plt+0xc420>
   1e034:	ldrb	r3, [sp, #181]	; 0xb5
   1e038:	cmp	r3, #0
   1e03c:	movwne	r3, #2
   1e040:	tst	r3, #1
   1e044:	bne	1e0c8 <__assert_fail@plt+0xc41c>
   1e048:	cmp	r3, #0
   1e04c:	beq	1e0cc <__assert_fail@plt+0xc420>
   1e050:	ands	r1, r3, #2
   1e054:	and	r0, r3, #4
   1e058:	cmpne	r0, #0
   1e05c:	bne	1e094 <__assert_fail@plt+0xc3e8>
   1e060:	cmp	r1, #0
   1e064:	bne	1e0a4 <__assert_fail@plt+0xc3f8>
   1e068:	ldr	r8, [r4, #36]	; 0x24
   1e06c:	cmp	r0, #0
   1e070:	beq	1e0cc <__assert_fail@plt+0xc420>
   1e074:	ldr	r2, [r8, #40]	; 0x28
   1e078:	sub	r0, fp, #196	; 0xc4
   1e07c:	mov	r1, r4
   1e080:	bl	260ec <__assert_fail@plt+0x14440>
   1e084:	mov	r8, r0
   1e088:	cmp	r8, #0
   1e08c:	bne	1e0d4 <__assert_fail@plt+0xc428>
   1e090:	b	1faf8 <__assert_fail@plt+0xde4c>
   1e094:	ldr	r8, [r4, #48]	; 0x30
   1e098:	cmp	r8, #0
   1e09c:	bne	1e0d4 <__assert_fail@plt+0xc428>
   1e0a0:	b	1faf8 <__assert_fail@plt+0xde4c>
   1e0a4:	ldr	r8, [r4, #44]	; 0x2c
   1e0a8:	cmp	r8, #0
   1e0ac:	bne	1e0d4 <__assert_fail@plt+0xc428>
   1e0b0:	b	1faf8 <__assert_fail@plt+0xde4c>
   1e0b4:	ldr	r0, [sp, #192]	; 0xc0
   1e0b8:	and	r0, r0, #2
   1e0bc:	eor	r3, r0, #10
   1e0c0:	tst	r3, #1
   1e0c4:	beq	1e048 <__assert_fail@plt+0xc39c>
   1e0c8:	ldr	r8, [r4, #40]	; 0x28
   1e0cc:	cmp	r8, #0
   1e0d0:	beq	1faf8 <__assert_fail@plt+0xde4c>
   1e0d4:	ldr	r0, [sp, #204]	; 0xcc
   1e0d8:	ldr	r1, [sp, #40]	; 0x28
   1e0dc:	ldr	r5, [sp, #92]	; 0x5c
   1e0e0:	cmp	r0, #0
   1e0e4:	mov	r7, r1
   1e0e8:	beq	1e100 <__assert_fail@plt+0xc454>
   1e0ec:	str	r8, [r0, sl, lsl #2]
   1e0f0:	mov	r7, r1
   1e0f4:	ldr	r0, [r4, #76]	; 0x4c
   1e0f8:	cmp	r0, #0
   1e0fc:	bne	1d760 <__assert_fail@plt+0xbab4>
   1e100:	ldrb	r0, [r8, #52]	; 0x34
   1e104:	mov	lr, #0
   1e108:	mvn	r9, #0
   1e10c:	tst	r0, #16
   1e110:	bne	1d728 <__assert_fail@plt+0xba7c>
   1e114:	ldr	r0, [sp, #144]	; 0x90
   1e118:	ldr	r1, [sp, #160]	; 0xa0
   1e11c:	str	lr, [sp, #56]	; 0x38
   1e120:	cmp	r1, r0
   1e124:	ble	1e9f4 <__assert_fail@plt+0xcd48>
   1e128:	ldr	r1, [sp, #36]	; 0x24
   1e12c:	str	r1, [sp, #72]	; 0x48
   1e130:	b	1e8e0 <__assert_fail@plt+0xcc34>
   1e134:	ldr	r0, [fp, #-196]	; 0xffffff3c
   1e138:	cmp	r0, #0
   1e13c:	bne	1faf8 <__assert_fail@plt+0xde4c>
   1e140:	ldr	r0, [sp, #56]	; 0x38
   1e144:	ldr	r1, [sp, #44]	; 0x2c
   1e148:	clz	r0, r0
   1e14c:	lsr	r0, r0, #5
   1e150:	orr	r0, r1, r0
   1e154:	cmp	r0, #1
   1e158:	bne	1e9fc <__assert_fail@plt+0xcd50>
   1e15c:	ldr	r0, [sp, #204]	; 0xcc
   1e160:	cmp	r0, #0
   1e164:	bne	1e1bc <__assert_fail@plt+0xc510>
   1e168:	b	1e9fc <__assert_fail@plt+0xcd50>
   1e16c:	ldr	r0, [sp, #144]	; 0x90
   1e170:	cmn	r0, #1
   1e174:	ble	1e1b0 <__assert_fail@plt+0xc504>
   1e178:	ldr	r1, [sp, #152]	; 0x98
   1e17c:	cmp	r1, r0
   1e180:	beq	1e844 <__assert_fail@plt+0xcb98>
   1e184:	ldr	r1, [sp, #184]	; 0xb8
   1e188:	cmp	r1, #2
   1e18c:	blt	1e218 <__assert_fail@plt+0xc56c>
   1e190:	ldr	r1, [sp, #112]	; 0x70
   1e194:	ldr	r4, [r1, r0, lsl #2]
   1e198:	cmn	r4, #1
   1e19c:	bne	1e24c <__assert_fail@plt+0xc5a0>
   1e1a0:	sub	r2, r0, #1
   1e1a4:	cmp	r0, #0
   1e1a8:	mov	r0, r2
   1e1ac:	bgt	1e194 <__assert_fail@plt+0xc4e8>
   1e1b0:	ldr	r3, [sp, #164]	; 0xa4
   1e1b4:	b	1e270 <__assert_fail@plt+0xc5c4>
   1e1b8:	ldr	r0, [sp, #204]	; 0xcc
   1e1bc:	ldr	r2, [sp, #144]	; 0x90
   1e1c0:	ldr	r1, [sp, #208]	; 0xd0
   1e1c4:	add	r2, r2, #1
   1e1c8:	sub	r3, r2, #1
   1e1cc:	cmp	r3, r1
   1e1d0:	bge	1e9fc <__assert_fail@plt+0xcd50>
   1e1d4:	str	r2, [sp, #144]	; 0x90
   1e1d8:	ldr	r3, [r0, r2, lsl #2]
   1e1dc:	add	r2, r2, #1
   1e1e0:	cmp	r3, #0
   1e1e4:	beq	1e1c8 <__assert_fail@plt+0xc51c>
   1e1e8:	sub	r0, fp, #196	; 0xc4
   1e1ec:	add	r1, sp, #104	; 0x68
   1e1f0:	mov	r2, #0
   1e1f4:	bl	27db0 <__assert_fail@plt+0x16104>
   1e1f8:	cmp	r0, #0
   1e1fc:	mov	r8, r0
   1e200:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   1e204:	cmpeq	r0, #0
   1e208:	beq	1e1b8 <__assert_fail@plt+0xc50c>
   1e20c:	cmp	r8, #0
   1e210:	bne	1e994 <__assert_fail@plt+0xcce8>
   1e214:	b	1e9fc <__assert_fail@plt+0xcd50>
   1e218:	ldr	r1, [sp, #108]	; 0x6c
   1e21c:	ldr	r2, [sp, #172]	; 0xac
   1e220:	mov	r3, #1
   1e224:	ldrb	r0, [r1, r0]
   1e228:	ubfx	r1, r0, #5, #3
   1e22c:	ldr	r1, [r2, r1, lsl #2]
   1e230:	and	r2, r0, #31
   1e234:	tst	r1, r3, lsl r2
   1e238:	bne	1e270 <__assert_fail@plt+0xc5c4>
   1e23c:	mov	r3, #0
   1e240:	cmp	r0, #10
   1e244:	beq	1e264 <__assert_fail@plt+0xc5b8>
   1e248:	b	1e270 <__assert_fail@plt+0xc5c4>
   1e24c:	ldrb	r0, [sp, #182]	; 0xb6
   1e250:	cmp	r0, #0
   1e254:	bne	1e86c <__assert_fail@plt+0xcbc0>
   1e258:	mov	r3, #0
   1e25c:	cmp	r4, #10
   1e260:	bne	1e270 <__assert_fail@plt+0xc5c4>
   1e264:	ldrb	r3, [sp, #181]	; 0xb5
   1e268:	cmp	r3, #0
   1e26c:	movwne	r3, #2
   1e270:	ldr	r0, [r8, #8]
   1e274:	cmp	r0, #1
   1e278:	blt	1e9e0 <__assert_fail@plt+0xcd34>
   1e27c:	ldr	r1, [sp, #188]	; 0xbc
   1e280:	ldr	r6, [r8, #12]
   1e284:	and	ip, r3, #8
   1e288:	and	lr, r3, #2
   1e28c:	and	r3, r3, #1
   1e290:	mov	r4, #0
   1e294:	str	r7, [sp, #16]
   1e298:	str	sl, [sp, #20]
   1e29c:	ldr	r5, [r1]
   1e2a0:	ldr	r1, [r6, r4, lsl #2]
   1e2a4:	add	r7, r5, r1, lsl #3
   1e2a8:	ldr	r7, [r7, #4]
   1e2ac:	uxtb	r2, r7
   1e2b0:	cmp	r2, #2
   1e2b4:	bne	1e304 <__assert_fail@plt+0xc658>
   1e2b8:	movw	r2, #65280	; 0xff00
   1e2bc:	movt	r2, #3
   1e2c0:	tst	r7, r2
   1e2c4:	beq	1e31c <__assert_fail@plt+0xc670>
   1e2c8:	cmp	r3, #0
   1e2cc:	bne	1e2d8 <__assert_fail@plt+0xc62c>
   1e2d0:	ands	r2, r7, #1024	; 0x400
   1e2d4:	bne	1e304 <__assert_fail@plt+0xc658>
   1e2d8:	cmp	r3, #0
   1e2dc:	andsne	r2, r7, #2048	; 0x800
   1e2e0:	bne	1e304 <__assert_fail@plt+0xc658>
   1e2e4:	cmp	lr, #0
   1e2e8:	bne	1e2f4 <__assert_fail@plt+0xc648>
   1e2ec:	ands	r2, r7, #8192	; 0x2000
   1e2f0:	bne	1e304 <__assert_fail@plt+0xc658>
   1e2f4:	cmp	ip, #0
   1e2f8:	bne	1e31c <__assert_fail@plt+0xc670>
   1e2fc:	ands	r2, r7, #32768	; 0x8000
   1e300:	beq	1e31c <__assert_fail@plt+0xc670>
   1e304:	add	r4, r4, #1
   1e308:	cmp	r4, r0
   1e30c:	blt	1e2a0 <__assert_fail@plt+0xc5f4>
   1e310:	ldr	sl, [sp, #20]
   1e314:	ldr	r7, [sp, #16]
   1e318:	b	1e9e0 <__assert_fail@plt+0xcd34>
   1e31c:	ldr	sl, [sp, #20]
   1e320:	ldr	r7, [sp, #16]
   1e324:	cmp	r1, #0
   1e328:	bne	1e9c0 <__assert_fail@plt+0xcd14>
   1e32c:	b	1e9e0 <__assert_fail@plt+0xcd34>
   1e330:	ldr	r0, [r5, #8]
   1e334:	cmp	r0, #1
   1e338:	blt	1e768 <__assert_fail@plt+0xcabc>
   1e33c:	ldr	lr, [sp, #188]	; 0xbc
   1e340:	mov	r3, #0
   1e344:	str	sl, [sp, #20]
   1e348:	str	r7, [sp, #16]
   1e34c:	str	lr, [sp, #4]
   1e350:	b	1e734 <__assert_fail@plt+0xca88>
   1e354:	movw	r0, #65280	; 0xff00
   1e358:	str	r3, [sp, #8]
   1e35c:	movt	r0, #3
   1e360:	tst	r6, r0
   1e364:	beq	1e478 <__assert_fail@plt+0xc7cc>
   1e368:	ldr	r0, [sp, #144]	; 0x90
   1e36c:	cmn	r0, #1
   1e370:	ble	1e3b4 <__assert_fail@plt+0xc708>
   1e374:	ldr	r1, [sp, #152]	; 0x98
   1e378:	cmp	r1, r0
   1e37c:	beq	1e68c <__assert_fail@plt+0xc9e0>
   1e380:	ldr	r1, [sp, #184]	; 0xb8
   1e384:	cmp	r1, #2
   1e388:	blt	1e3bc <__assert_fail@plt+0xc710>
   1e38c:	ldr	r1, [sp, #112]	; 0x70
   1e390:	ldr	sl, [sp, #20]
   1e394:	ldr	r3, [sp, #8]
   1e398:	ldr	r8, [r1, r0, lsl #2]
   1e39c:	cmn	r8, #1
   1e3a0:	bne	1e3fc <__assert_fail@plt+0xc750>
   1e3a4:	sub	r2, r0, #1
   1e3a8:	cmp	r0, #0
   1e3ac:	mov	r0, r2
   1e3b0:	bgt	1e398 <__assert_fail@plt+0xc6ec>
   1e3b4:	ldr	r1, [sp, #164]	; 0xa4
   1e3b8:	b	1e420 <__assert_fail@plt+0xc774>
   1e3bc:	ldr	r1, [sp, #108]	; 0x6c
   1e3c0:	ldr	r2, [sp, #172]	; 0xac
   1e3c4:	mov	ip, #0
   1e3c8:	ldrb	r0, [r1, r0]
   1e3cc:	ubfx	r1, r0, #5, #3
   1e3d0:	ldr	sl, [sp, #20]
   1e3d4:	ldr	r3, [r2, r1, lsl #2]
   1e3d8:	and	r2, r0, #31
   1e3dc:	mov	r1, #1
   1e3e0:	tst	r3, r1, lsl r2
   1e3e4:	ldr	r3, [sp, #8]
   1e3e8:	bne	1e438 <__assert_fail@plt+0xc78c>
   1e3ec:	mov	r1, #0
   1e3f0:	cmp	r0, #10
   1e3f4:	beq	1e414 <__assert_fail@plt+0xc768>
   1e3f8:	b	1e420 <__assert_fail@plt+0xc774>
   1e3fc:	ldrb	r0, [sp, #182]	; 0xb6
   1e400:	cmp	r0, #0
   1e404:	bne	1e6c0 <__assert_fail@plt+0xca14>
   1e408:	mov	r1, #0
   1e40c:	cmp	r8, #10
   1e410:	bne	1e420 <__assert_fail@plt+0xc774>
   1e414:	ldrb	r1, [sp, #181]	; 0xb5
   1e418:	cmp	r1, #0
   1e41c:	movwne	r1, #2
   1e420:	and	r0, r1, #1
   1e424:	tst	r6, #1024	; 0x400
   1e428:	eor	ip, r0, #1
   1e42c:	beq	1e438 <__assert_fail@plt+0xc78c>
   1e430:	cmp	r0, #0
   1e434:	beq	1e758 <__assert_fail@plt+0xcaac>
   1e438:	ldr	r0, [lr]
   1e43c:	ldr	r2, [sp, #12]
   1e440:	cmp	ip, #0
   1e444:	add	r0, r0, r2, lsl #3
   1e448:	ldr	r0, [r0, #4]
   1e44c:	bne	1e458 <__assert_fail@plt+0xc7ac>
   1e450:	ands	r2, r0, #2048	; 0x800
   1e454:	bne	1e758 <__assert_fail@plt+0xcaac>
   1e458:	tst	r1, #2
   1e45c:	bne	1e468 <__assert_fail@plt+0xc7bc>
   1e460:	ands	r2, r0, #8192	; 0x2000
   1e464:	bne	1e758 <__assert_fail@plt+0xcaac>
   1e468:	tst	r1, #8
   1e46c:	bne	1e478 <__assert_fail@plt+0xc7cc>
   1e470:	ands	r0, r0, #32768	; 0x8000
   1e474:	bne	1e758 <__assert_fail@plt+0xcaac>
   1e478:	ldr	r3, [sp, #144]	; 0x90
   1e47c:	ldr	r1, [sp, #12]
   1e480:	mov	r0, lr
   1e484:	add	r2, sp, #104	; 0x68
   1e488:	bl	29840 <__assert_fail@plt+0x17b94>
   1e48c:	ldr	r3, [sp, #8]
   1e490:	ldr	lr, [sp, #4]
   1e494:	ldr	r7, [sp, #16]
   1e498:	cmp	r0, #0
   1e49c:	beq	1e758 <__assert_fail@plt+0xcaac>
   1e4a0:	ldr	r1, [sp, #224]	; 0xe0
   1e4a4:	cmp	r1, r0
   1e4a8:	movlt	r1, r0
   1e4ac:	str	r1, [sp, #224]	; 0xe0
   1e4b0:	ldr	r3, [sp, #144]	; 0x90
   1e4b4:	ldr	r2, [sp, #140]	; 0x8c
   1e4b8:	ldr	r1, [sp, #152]	; 0x98
   1e4bc:	ldr	r7, [sp, #208]	; 0xd0
   1e4c0:	add	r6, r3, r0
   1e4c4:	cmp	r2, r6
   1e4c8:	cmple	r2, r1
   1e4cc:	blt	1e4e0 <__assert_fail@plt+0xc834>
   1e4d0:	ldr	r0, [sp, #132]	; 0x84
   1e4d4:	cmp	r0, r6
   1e4d8:	cmple	r0, r1
   1e4dc:	bge	1e4f8 <__assert_fail@plt+0xc84c>
   1e4e0:	add	r1, r6, #1
   1e4e4:	add	r0, sp, #104	; 0x68
   1e4e8:	bl	27ba8 <__assert_fail@plt+0x15efc>
   1e4ec:	ldr	lr, [sp, #4]
   1e4f0:	cmp	r0, #0
   1e4f4:	bne	1e854 <__assert_fail@plt+0xcba8>
   1e4f8:	cmp	r6, r7
   1e4fc:	ble	1e524 <__assert_fail@plt+0xc878>
   1e500:	sub	r0, r6, r7
   1e504:	mov	r1, #0
   1e508:	lsl	r2, r0, #2
   1e50c:	ldr	r0, [sp, #204]	; 0xcc
   1e510:	add	r0, r0, r7, lsl #2
   1e514:	add	r0, r0, #4
   1e518:	bl	11b2c <memset@plt>
   1e51c:	ldr	lr, [sp, #4]
   1e520:	str	r6, [sp, #208]	; 0xd0
   1e524:	mov	r0, #0
   1e528:	ldr	r2, [sp, #12]
   1e52c:	str	r0, [fp, #-48]	; 0xffffffd0
   1e530:	ldr	r0, [sp, #204]	; 0xcc
   1e534:	ldr	r1, [lr, #24]
   1e538:	ldr	r7, [r0, r6, lsl #2]
   1e53c:	ldr	r0, [lr, #12]
   1e540:	ldr	r0, [r0, r2, lsl #2]
   1e544:	cmp	r7, #0
   1e548:	add	r0, r0, r0, lsl #1
   1e54c:	add	r2, r1, r0, lsl #2
   1e550:	beq	1e574 <__assert_fail@plt+0xc8c8>
   1e554:	ldr	r1, [r7, #40]	; 0x28
   1e558:	sub	r0, fp, #192	; 0xc0
   1e55c:	bl	27fc4 <__assert_fail@plt+0x16318>
   1e560:	ldr	sl, [sp, #20]
   1e564:	cmp	r0, #0
   1e568:	str	r0, [fp, #-48]	; 0xffffffd0
   1e56c:	beq	1e588 <__assert_fail@plt+0xc8dc>
   1e570:	b	1e858 <__assert_fail@plt+0xcbac>
   1e574:	vldr	d16, [r2]
   1e578:	ldr	r0, [r2, #8]
   1e57c:	ldr	sl, [sp, #20]
   1e580:	str	r0, [fp, #-184]	; 0xffffff48
   1e584:	vstr	d16, [fp, #-192]	; 0xffffff40
   1e588:	cmp	r6, #0
   1e58c:	ble	1e6a4 <__assert_fail@plt+0xc9f8>
   1e590:	ldr	r1, [sp, #152]	; 0x98
   1e594:	sub	r0, r6, #1
   1e598:	cmp	r1, r0
   1e59c:	ldr	r1, [sp, #4]
   1e5a0:	beq	1e6b0 <__assert_fail@plt+0xca04>
   1e5a4:	ldr	r2, [sp, #184]	; 0xb8
   1e5a8:	cmp	r2, #2
   1e5ac:	blt	1e5dc <__assert_fail@plt+0xc930>
   1e5b0:	ldr	r0, [sp, #112]	; 0x70
   1e5b4:	mov	r2, r6
   1e5b8:	sub	r0, r0, #4
   1e5bc:	ldr	r8, [r0, r2, lsl #2]
   1e5c0:	cmn	r8, #1
   1e5c4:	bne	1e618 <__assert_fail@plt+0xc96c>
   1e5c8:	sub	r2, r2, #1
   1e5cc:	cmp	r2, #0
   1e5d0:	bgt	1e5bc <__assert_fail@plt+0xc910>
   1e5d4:	ldr	r3, [sp, #164]	; 0xa4
   1e5d8:	b	1e63c <__assert_fail@plt+0xc990>
   1e5dc:	ldr	r3, [sp, #108]	; 0x6c
   1e5e0:	ldr	r2, [sp, #172]	; 0xac
   1e5e4:	mov	ip, r7
   1e5e8:	ldrb	r0, [r3, r0]
   1e5ec:	ubfx	r3, r0, #5, #3
   1e5f0:	ldr	r7, [r2, r3, lsl #2]
   1e5f4:	and	r2, r0, #31
   1e5f8:	mov	r3, #1
   1e5fc:	tst	r7, r3, lsl r2
   1e600:	mov	r7, ip
   1e604:	bne	1e63c <__assert_fail@plt+0xc990>
   1e608:	mov	r3, #0
   1e60c:	cmp	r0, #10
   1e610:	beq	1e630 <__assert_fail@plt+0xc984>
   1e614:	b	1e63c <__assert_fail@plt+0xc990>
   1e618:	ldrb	r0, [sp, #182]	; 0xb6
   1e61c:	cmp	r0, #0
   1e620:	bne	1e6f0 <__assert_fail@plt+0xca44>
   1e624:	mov	r3, #0
   1e628:	cmp	r8, #10
   1e62c:	bne	1e63c <__assert_fail@plt+0xc990>
   1e630:	ldrb	r3, [sp, #181]	; 0xb5
   1e634:	cmp	r3, #0
   1e638:	movwne	r3, #2
   1e63c:	sub	r0, fp, #48	; 0x30
   1e640:	sub	r2, fp, #192	; 0xc0
   1e644:	bl	260ec <__assert_fail@plt+0x14440>
   1e648:	ldr	r1, [sp, #204]	; 0xcc
   1e64c:	cmp	r7, #0
   1e650:	str	r0, [r1, r6, lsl #2]
   1e654:	beq	1e660 <__assert_fail@plt+0xc9b4>
   1e658:	ldr	r0, [fp, #-184]	; 0xffffff48
   1e65c:	bl	1b22c <__assert_fail@plt+0x9580>
   1e660:	ldr	r0, [sp, #204]	; 0xcc
   1e664:	ldr	r7, [sp, #16]
   1e668:	ldr	lr, [sp, #4]
   1e66c:	ldr	r3, [sp, #8]
   1e670:	ldr	r0, [r0, r6, lsl #2]
   1e674:	cmp	r0, #0
   1e678:	bne	1e758 <__assert_fail@plt+0xcaac>
   1e67c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e680:	cmp	r0, #0
   1e684:	beq	1e758 <__assert_fail@plt+0xcaac>
   1e688:	b	1e860 <__assert_fail@plt+0xcbb4>
   1e68c:	ldr	r0, [sp, #192]	; 0xc0
   1e690:	ldr	sl, [sp, #20]
   1e694:	ldr	r3, [sp, #8]
   1e698:	and	r0, r0, #2
   1e69c:	eor	r1, r0, #10
   1e6a0:	b	1e420 <__assert_fail@plt+0xc774>
   1e6a4:	ldr	r3, [sp, #164]	; 0xa4
   1e6a8:	ldr	r1, [sp, #4]
   1e6ac:	b	1e63c <__assert_fail@plt+0xc990>
   1e6b0:	ldr	r0, [sp, #192]	; 0xc0
   1e6b4:	and	r0, r0, #2
   1e6b8:	eor	r3, r0, #10
   1e6bc:	b	1e63c <__assert_fail@plt+0xc990>
   1e6c0:	mov	r0, r8
   1e6c4:	bl	11afc <iswalnum@plt>
   1e6c8:	mov	r1, #1
   1e6cc:	mov	ip, #0
   1e6d0:	cmp	r8, #95	; 0x5f
   1e6d4:	beq	1e718 <__assert_fail@plt+0xca6c>
   1e6d8:	ldr	sl, [sp, #20]
   1e6dc:	ldr	lr, [sp, #4]
   1e6e0:	ldr	r3, [sp, #8]
   1e6e4:	cmp	r0, #0
   1e6e8:	beq	1e408 <__assert_fail@plt+0xc75c>
   1e6ec:	b	1e438 <__assert_fail@plt+0xc78c>
   1e6f0:	mov	r0, r8
   1e6f4:	bl	11afc <iswalnum@plt>
   1e6f8:	mov	r3, #1
   1e6fc:	cmp	r8, #95	; 0x5f
   1e700:	beq	1e728 <__assert_fail@plt+0xca7c>
   1e704:	ldr	sl, [sp, #20]
   1e708:	ldr	r1, [sp, #4]
   1e70c:	cmp	r0, #0
   1e710:	beq	1e624 <__assert_fail@plt+0xc978>
   1e714:	b	1e63c <__assert_fail@plt+0xc990>
   1e718:	ldr	sl, [sp, #20]
   1e71c:	ldr	lr, [sp, #4]
   1e720:	ldr	r3, [sp, #8]
   1e724:	b	1e438 <__assert_fail@plt+0xc78c>
   1e728:	ldr	sl, [sp, #20]
   1e72c:	ldr	r1, [sp, #4]
   1e730:	b	1e63c <__assert_fail@plt+0xc990>
   1e734:	ldr	r0, [r5, #12]
   1e738:	ldr	r2, [r0, r3, lsl #2]
   1e73c:	ldr	r0, [lr]
   1e740:	add	r0, r0, r2, lsl #3
   1e744:	mov	r1, r2
   1e748:	str	r2, [sp, #12]
   1e74c:	ldr	r6, [r0, #4]
   1e750:	tst	r6, #1048576	; 0x100000
   1e754:	bne	1e354 <__assert_fail@plt+0xc6a8>
   1e758:	ldr	r0, [r5, #8]
   1e75c:	add	r3, r3, #1
   1e760:	cmp	r3, r0
   1e764:	blt	1e734 <__assert_fail@plt+0xca88>
   1e768:	mov	r0, #0
   1e76c:	str	r0, [fp, #-196]	; 0xffffff3c
   1e770:	b	1e920 <__assert_fail@plt+0xcc74>
   1e774:	add	r1, r0, #2
   1e778:	add	r0, sp, #104	; 0x68
   1e77c:	bl	27ba8 <__assert_fail@plt+0x15efc>
   1e780:	cmp	r0, #0
   1e784:	str	r0, [fp, #-196]	; 0xffffff3c
   1e788:	beq	1e914 <__assert_fail@plt+0xcc68>
   1e78c:	b	1faf8 <__assert_fail@plt+0xde4c>
   1e790:	ldr	r0, [sp, #144]	; 0x90
   1e794:	cmp	r0, #0
   1e798:	ble	1e7d8 <__assert_fail@plt+0xcb2c>
   1e79c:	ldr	r2, [sp, #152]	; 0x98
   1e7a0:	sub	r1, r0, #1
   1e7a4:	cmp	r2, r1
   1e7a8:	beq	1e89c <__assert_fail@plt+0xcbf0>
   1e7ac:	ldr	r2, [sp, #184]	; 0xb8
   1e7b0:	cmp	r2, #2
   1e7b4:	blt	1e7e0 <__assert_fail@plt+0xcb34>
   1e7b8:	ldr	r1, [sp, #112]	; 0x70
   1e7bc:	sub	r1, r1, #4
   1e7c0:	ldr	r8, [r1, r0, lsl #2]
   1e7c4:	cmn	r8, #1
   1e7c8:	bne	1e814 <__assert_fail@plt+0xcb68>
   1e7cc:	sub	r0, r0, #1
   1e7d0:	cmp	r0, #0
   1e7d4:	bgt	1e7c0 <__assert_fail@plt+0xcb14>
   1e7d8:	ldr	r1, [sp, #164]	; 0xa4
   1e7dc:	b	1e838 <__assert_fail@plt+0xcb8c>
   1e7e0:	ldr	r0, [sp, #108]	; 0x6c
   1e7e4:	ldr	r2, [sp, #172]	; 0xac
   1e7e8:	ldrb	r0, [r0, r1]
   1e7ec:	ubfx	r1, r0, #5, #3
   1e7f0:	ldr	ip, [r2, r1, lsl #2]
   1e7f4:	and	r2, r0, #31
   1e7f8:	mov	r1, #1
   1e7fc:	tst	ip, r1, lsl r2
   1e800:	bne	1e838 <__assert_fail@plt+0xcb8c>
   1e804:	mov	r1, #0
   1e808:	cmp	r0, #10
   1e80c:	beq	1e82c <__assert_fail@plt+0xcb80>
   1e810:	b	1e838 <__assert_fail@plt+0xcb8c>
   1e814:	ldrb	r0, [sp, #182]	; 0xb6
   1e818:	cmp	r0, #0
   1e81c:	bne	1e8a4 <__assert_fail@plt+0xcbf8>
   1e820:	mov	r1, #0
   1e824:	cmp	r8, #10
   1e828:	bne	1e838 <__assert_fail@plt+0xcb8c>
   1e82c:	ldrb	r1, [sp, #181]	; 0xb5
   1e830:	cmp	r1, #0
   1e834:	movwne	r1, #2
   1e838:	bfi	r6, r1, #8, #1
   1e83c:	ldr	r8, [r3, r6, lsl #2]
   1e840:	b	1e96c <__assert_fail@plt+0xccc0>
   1e844:	ldr	r0, [sp, #192]	; 0xc0
   1e848:	and	r0, r0, #2
   1e84c:	eor	r3, r0, #10
   1e850:	b	1e270 <__assert_fail@plt+0xc5c4>
   1e854:	str	r0, [fp, #-48]	; 0xffffffd0
   1e858:	ldr	sl, [sp, #20]
   1e85c:	ldr	r7, [sp, #16]
   1e860:	mov	r8, #0
   1e864:	str	r0, [fp, #-196]	; 0xffffff3c
   1e868:	b	1e96c <__assert_fail@plt+0xccc0>
   1e86c:	mov	r0, r4
   1e870:	mov	r5, r7
   1e874:	bl	11afc <iswalnum@plt>
   1e878:	mov	r3, #1
   1e87c:	cmp	r4, #95	; 0x5f
   1e880:	beq	1e894 <__assert_fail@plt+0xcbe8>
   1e884:	cmp	r0, #0
   1e888:	mov	r7, r5
   1e88c:	beq	1e258 <__assert_fail@plt+0xc5ac>
   1e890:	b	1e270 <__assert_fail@plt+0xc5c4>
   1e894:	mov	r7, r5
   1e898:	b	1e270 <__assert_fail@plt+0xc5c4>
   1e89c:	mov	r1, #10
   1e8a0:	b	1e838 <__assert_fail@plt+0xcb8c>
   1e8a4:	mov	r0, r8
   1e8a8:	str	r3, [sp, #12]
   1e8ac:	str	r7, [sp, #16]
   1e8b0:	bl	11afc <iswalnum@plt>
   1e8b4:	mov	r1, #1
   1e8b8:	cmp	r8, #95	; 0x5f
   1e8bc:	beq	1e8d4 <__assert_fail@plt+0xcc28>
   1e8c0:	ldr	r7, [sp, #16]
   1e8c4:	ldr	r3, [sp, #12]
   1e8c8:	cmp	r0, #0
   1e8cc:	beq	1e820 <__assert_fail@plt+0xcb74>
   1e8d0:	b	1e838 <__assert_fail@plt+0xcb8c>
   1e8d4:	ldr	r7, [sp, #16]
   1e8d8:	ldr	r3, [sp, #12]
   1e8dc:	b	1e838 <__assert_fail@plt+0xcb8c>
   1e8e0:	ldr	r2, [sp, #140]	; 0x8c
   1e8e4:	ldr	r1, [sp, #152]	; 0x98
   1e8e8:	add	r4, r0, #1
   1e8ec:	mov	r5, r8
   1e8f0:	cmp	r4, r2
   1e8f4:	blt	1e900 <__assert_fail@plt+0xcc54>
   1e8f8:	cmp	r2, r1
   1e8fc:	blt	1e774 <__assert_fail@plt+0xcac8>
   1e900:	ldr	r2, [sp, #132]	; 0x84
   1e904:	cmp	r4, r2
   1e908:	blt	1e914 <__assert_fail@plt+0xcc68>
   1e90c:	cmp	r2, r1
   1e910:	blt	1e774 <__assert_fail@plt+0xcac8>
   1e914:	ldrb	r0, [r5, #52]	; 0x34
   1e918:	tst	r0, #32
   1e91c:	bne	1e330 <__assert_fail@plt+0xc684>
   1e920:	ldr	r1, [sp, #144]	; 0x90
   1e924:	ldr	r0, [sp, #108]	; 0x6c
   1e928:	add	r2, r1, #1
   1e92c:	str	r2, [sp, #144]	; 0x90
   1e930:	ldrb	r6, [r0, r1]
   1e934:	ldr	r0, [r5, #44]	; 0x2c
   1e938:	cmp	r0, #0
   1e93c:	bne	1e968 <__assert_fail@plt+0xccbc>
   1e940:	ldr	r3, [r5, #48]	; 0x30
   1e944:	cmp	r3, #0
   1e948:	bne	1e790 <__assert_fail@plt+0xcae4>
   1e94c:	ldr	r0, [sp, #188]	; 0xbc
   1e950:	mov	r1, r5
   1e954:	bl	29d44 <__assert_fail@plt+0x18098>
   1e958:	cmp	r0, #0
   1e95c:	bne	1e934 <__assert_fail@plt+0xcc88>
   1e960:	mov	r0, #12
   1e964:	b	1e860 <__assert_fail@plt+0xcbb4>
   1e968:	ldr	r8, [r0, r6, lsl #2]
   1e96c:	ldr	r0, [sp, #204]	; 0xcc
   1e970:	cmp	r0, #0
   1e974:	beq	1e98c <__assert_fail@plt+0xcce0>
   1e978:	sub	r0, fp, #196	; 0xc4
   1e97c:	add	r1, sp, #104	; 0x68
   1e980:	mov	r2, r8
   1e984:	bl	27db0 <__assert_fail@plt+0x16104>
   1e988:	mov	r8, r0
   1e98c:	cmp	r8, #0
   1e990:	beq	1e134 <__assert_fail@plt+0xc488>
   1e994:	sub	r0, r5, r8
   1e998:	clz	r0, r0
   1e99c:	lsr	r0, r0, #5
   1e9a0:	ands	r7, r7, r0
   1e9a4:	ldrb	r0, [r8, #52]	; 0x34
   1e9a8:	movne	sl, r4
   1e9ac:	tst	r0, #16
   1e9b0:	beq	1e9e0 <__assert_fail@plt+0xcd34>
   1e9b4:	sxtb	r0, r0
   1e9b8:	cmn	r0, #1
   1e9bc:	ble	1e16c <__assert_fail@plt+0xc4c0>
   1e9c0:	ldr	r0, [sp, #44]	; 0x2c
   1e9c4:	ldr	r9, [sp, #144]	; 0x90
   1e9c8:	cmp	r0, #0
   1e9cc:	beq	1ea10 <__assert_fail@plt+0xcd64>
   1e9d0:	mov	r0, #0
   1e9d4:	str	r0, [sp, #72]	; 0x48
   1e9d8:	mov	r0, #1
   1e9dc:	str	r0, [sp, #56]	; 0x38
   1e9e0:	ldr	r0, [sp, #144]	; 0x90
   1e9e4:	ldr	r1, [sp, #160]	; 0xa0
   1e9e8:	cmp	r1, r0
   1e9ec:	bgt	1e8e0 <__assert_fail@plt+0xcc34>
   1e9f0:	b	1e9fc <__assert_fail@plt+0xcd50>
   1e9f4:	ldr	r0, [sp, #36]	; 0x24
   1e9f8:	str	r0, [sp, #72]	; 0x48
   1e9fc:	ldr	r1, [sp, #72]	; 0x48
   1ea00:	cmp	r1, #0
   1ea04:	ldrne	r0, [r1]
   1ea08:	addne	r0, r0, sl
   1ea0c:	strne	r0, [r1]
   1ea10:	ldr	sl, [sp, #92]	; 0x5c
   1ea14:	ldr	r8, [sp, #64]	; 0x40
   1ea18:	cmn	r9, #1
   1ea1c:	beq	1dbdc <__assert_fail@plt+0xbf30>
   1ea20:	cmn	r9, #2
   1ea24:	beq	1faf8 <__assert_fail@plt+0xde4c>
   1ea28:	ldr	r5, [sp, #80]	; 0x50
   1ea2c:	str	r9, [sp, #196]	; 0xc4
   1ea30:	ldr	r8, [sp, #96]	; 0x60
   1ea34:	cmp	sl, #2
   1ea38:	ldrb	r0, [r5, #28]
   1ea3c:	bcc	1ea48 <__assert_fail@plt+0xcd9c>
   1ea40:	ands	r1, r0, #16
   1ea44:	beq	1ea54 <__assert_fail@plt+0xcda8>
   1ea48:	ldr	r1, [r8, #76]	; 0x4c
   1ea4c:	cmp	r1, #0
   1ea50:	beq	1ebb4 <__assert_fail@plt+0xcf08>
   1ea54:	ldr	r0, [sp, #204]	; 0xcc
   1ea58:	cmn	r9, #1
   1ea5c:	ldr	r5, [r0, r9, lsl #2]
   1ea60:	ble	1ea9c <__assert_fail@plt+0xcdf0>
   1ea64:	ldr	r0, [sp, #152]	; 0x98
   1ea68:	cmp	r0, r9
   1ea6c:	beq	1d778 <__assert_fail@plt+0xbacc>
   1ea70:	ldr	r0, [sp, #184]	; 0xb8
   1ea74:	cmp	r0, #2
   1ea78:	blt	1eaac <__assert_fail@plt+0xce00>
   1ea7c:	ldr	r0, [sp, #112]	; 0x70
   1ea80:	ldr	r4, [r0, r9, lsl #2]
   1ea84:	cmn	r4, #1
   1ea88:	bne	1eae8 <__assert_fail@plt+0xce3c>
   1ea8c:	sub	r1, r9, #1
   1ea90:	cmp	r9, #0
   1ea94:	mov	r9, r1
   1ea98:	bgt	1ea80 <__assert_fail@plt+0xcdd4>
   1ea9c:	ldr	r3, [sp, #164]	; 0xa4
   1eaa0:	movw	r9, #65280	; 0xff00
   1eaa4:	movt	r9, #3
   1eaa8:	b	1eb14 <__assert_fail@plt+0xce68>
   1eaac:	ldr	r0, [sp, #108]	; 0x6c
   1eab0:	ldr	r1, [sp, #172]	; 0xac
   1eab4:	mov	r3, #1
   1eab8:	ldrb	r0, [r0, r9]
   1eabc:	movw	r9, #65280	; 0xff00
   1eac0:	movt	r9, #3
   1eac4:	ubfx	r2, r0, #5, #3
   1eac8:	ldr	r1, [r1, r2, lsl #2]
   1eacc:	and	r2, r0, #31
   1ead0:	tst	r1, r3, lsl r2
   1ead4:	bne	1eb14 <__assert_fail@plt+0xce68>
   1ead8:	mov	r3, #0
   1eadc:	cmp	r0, #10
   1eae0:	beq	1eb08 <__assert_fail@plt+0xce5c>
   1eae4:	b	1eb14 <__assert_fail@plt+0xce68>
   1eae8:	ldrb	r0, [sp, #182]	; 0xb6
   1eaec:	movw	r9, #65280	; 0xff00
   1eaf0:	movt	r9, #3
   1eaf4:	cmp	r0, #0
   1eaf8:	bne	1d814 <__assert_fail@plt+0xbb68>
   1eafc:	mov	r3, #0
   1eb00:	cmp	r4, #10
   1eb04:	bne	1eb14 <__assert_fail@plt+0xce68>
   1eb08:	ldrb	r3, [sp, #181]	; 0xb5
   1eb0c:	cmp	r3, #0
   1eb10:	movwne	r3, #2
   1eb14:	ldr	r0, [r5, #8]
   1eb18:	cmp	r0, #1
   1eb1c:	blt	1eba4 <__assert_fail@plt+0xcef8>
   1eb20:	ldr	r1, [sp, #188]	; 0xbc
   1eb24:	ldr	r6, [r5, #12]
   1eb28:	and	ip, r3, #8
   1eb2c:	and	lr, r3, #2
   1eb30:	and	r3, r3, #1
   1eb34:	mov	r4, #0
   1eb38:	ldr	r5, [r1]
   1eb3c:	ldr	r7, [r6, r4, lsl #2]
   1eb40:	add	r1, r5, r7, lsl #3
   1eb44:	ldr	r1, [r1, #4]
   1eb48:	uxtb	r2, r1
   1eb4c:	cmp	r2, #2
   1eb50:	bne	1eb98 <__assert_fail@plt+0xceec>
   1eb54:	tst	r1, r9
   1eb58:	beq	1eba8 <__assert_fail@plt+0xcefc>
   1eb5c:	cmp	r3, #0
   1eb60:	bne	1eb6c <__assert_fail@plt+0xcec0>
   1eb64:	ands	r2, r1, #1024	; 0x400
   1eb68:	bne	1eb98 <__assert_fail@plt+0xceec>
   1eb6c:	cmp	r3, #0
   1eb70:	andsne	r2, r1, #2048	; 0x800
   1eb74:	bne	1eb98 <__assert_fail@plt+0xceec>
   1eb78:	cmp	lr, #0
   1eb7c:	bne	1eb88 <__assert_fail@plt+0xcedc>
   1eb80:	ands	r2, r1, #8192	; 0x2000
   1eb84:	bne	1eb98 <__assert_fail@plt+0xceec>
   1eb88:	cmp	ip, #0
   1eb8c:	bne	1eba8 <__assert_fail@plt+0xcefc>
   1eb90:	ands	r1, r1, #32768	; 0x8000
   1eb94:	beq	1eba8 <__assert_fail@plt+0xcefc>
   1eb98:	add	r4, r4, #1
   1eb9c:	cmp	r4, r0
   1eba0:	blt	1eb3c <__assert_fail@plt+0xce90>
   1eba4:	mov	r7, #0
   1eba8:	ldr	r5, [sp, #80]	; 0x50
   1ebac:	str	r7, [sp, #200]	; 0xc8
   1ebb0:	ldrb	r0, [r5, #28]
   1ebb4:	sub	r6, fp, #48	; 0x30
   1ebb8:	cmp	sl, #2
   1ebbc:	bcc	1ebd4 <__assert_fail@plt+0xcf28>
   1ebc0:	ands	r0, r0, #16
   1ebc4:	bne	1ebd4 <__assert_fail@plt+0xcf28>
   1ebc8:	ldrb	r0, [r8, #88]	; 0x58
   1ebcc:	tst	r0, #1
   1ebd0:	bne	1ebe0 <__assert_fail@plt+0xcf34>
   1ebd4:	ldr	r0, [r8, #76]	; 0x4c
   1ebd8:	cmp	r0, #0
   1ebdc:	beq	1ed7c <__assert_fail@plt+0xd0d0>
   1ebe0:	ldr	sl, [sp, #196]	; 0xc4
   1ebe4:	cmn	sl, #-1073741823	; 0xc0000001
   1ebe8:	bcs	1faf8 <__assert_fail@plt+0xde4c>
   1ebec:	ldr	r0, [sp, #188]	; 0xbc
   1ebf0:	ldr	r6, [sp, #200]	; 0xc8
   1ebf4:	str	r0, [sp, #72]	; 0x48
   1ebf8:	mov	r0, #4
   1ebfc:	add	r4, r0, sl, lsl #2
   1ec00:	mov	r0, r4
   1ec04:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1ec08:	mov	r8, r0
   1ec0c:	cmp	r0, #0
   1ec10:	beq	1fd2c <__assert_fail@plt+0xe080>
   1ec14:	ldr	r0, [sp, #72]	; 0x48
   1ec18:	ldr	r0, [r0, #76]	; 0x4c
   1ec1c:	cmp	r0, #0
   1ec20:	beq	1d6cc <__assert_fail@plt+0xba20>
   1ec24:	mov	r0, r4
   1ec28:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1ec2c:	cmp	r0, #0
   1ec30:	beq	1fd2c <__assert_fail@plt+0xe080>
   1ec34:	mov	r1, #0
   1ec38:	mov	r2, r4
   1ec3c:	mov	r5, r0
   1ec40:	bl	11b2c <memset@plt>
   1ec44:	sub	r0, fp, #188	; 0xbc
   1ec48:	str	r8, [fp, #-192]	; 0xffffff40
   1ec4c:	mov	r1, #0
   1ec50:	stm	r0, {r5, r6, sl}
   1ec54:	ldr	r0, [sp, #28]
   1ec58:	str	r1, [r0]
   1ec5c:	str	r1, [r0, #4]
   1ec60:	str	r1, [r0, #8]
   1ec64:	add	r0, sp, #104	; 0x68
   1ec68:	sub	r1, fp, #192	; 0xc0
   1ec6c:	bl	2ae40 <__assert_fail@plt+0x19194>
   1ec70:	mov	r9, r0
   1ec74:	mov	r0, #0
   1ec78:	bl	1b22c <__assert_fail@plt+0x9580>
   1ec7c:	cmp	r9, #0
   1ec80:	mov	r4, r5
   1ec84:	bne	1dc18 <__assert_fail@plt+0xbf6c>
   1ec88:	ldr	r0, [r8]
   1ec8c:	cmp	r0, #0
   1ec90:	beq	1d9ac <__assert_fail@plt+0xbd00>
   1ec94:	mov	r1, #0
   1ec98:	cmp	sl, #0
   1ec9c:	mov	r9, #0
   1eca0:	str	r1, [sp, #56]	; 0x38
   1eca4:	blt	1ed38 <__assert_fail@plt+0xd08c>
   1eca8:	mov	r7, #0
   1ecac:	b	1ecc0 <__assert_fail@plt+0xd014>
   1ecb0:	add	r0, r8, r7, lsl #2
   1ecb4:	add	r1, r7, #1
   1ecb8:	ldr	r0, [r0, #4]
   1ecbc:	mov	r7, r1
   1ecc0:	ldr	r2, [r4, r7, lsl #2]
   1ecc4:	cmp	r0, #0
   1ecc8:	beq	1ed28 <__assert_fail@plt+0xd07c>
   1eccc:	cmp	r2, #0
   1ecd0:	beq	1ed1c <__assert_fail@plt+0xd070>
   1ecd4:	sub	r5, fp, #48	; 0x30
   1ecd8:	add	r1, r0, #4
   1ecdc:	add	r2, r2, #4
   1ece0:	mov	r0, r5
   1ece4:	bl	27fc4 <__assert_fail@plt+0x16318>
   1ece8:	cmp	r0, #0
   1ecec:	str	r0, [fp, #-196]	; 0xffffff3c
   1ecf0:	bne	1d720 <__assert_fail@plt+0xba74>
   1ecf4:	ldr	r1, [sp, #72]	; 0x48
   1ecf8:	sub	r0, fp, #196	; 0xc4
   1ecfc:	mov	r2, r5
   1ed00:	bl	295b0 <__assert_fail@plt+0x17904>
   1ed04:	str	r0, [r8, r7, lsl #2]
   1ed08:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ed0c:	bl	1b22c <__assert_fail@plt+0x9580>
   1ed10:	ldr	r9, [fp, #-196]	; 0xffffff3c
   1ed14:	cmp	r9, #0
   1ed18:	bne	1ed38 <__assert_fail@plt+0xd08c>
   1ed1c:	cmp	r7, sl
   1ed20:	blt	1ecb0 <__assert_fail@plt+0xd004>
   1ed24:	b	1ed34 <__assert_fail@plt+0xd088>
   1ed28:	str	r2, [r8, r7, lsl #2]
   1ed2c:	cmp	r7, sl
   1ed30:	blt	1ecb0 <__assert_fail@plt+0xd004>
   1ed34:	mov	r9, #0
   1ed38:	mov	r0, r4
   1ed3c:	bl	1b22c <__assert_fail@plt+0x9580>
   1ed40:	cmp	r9, #0
   1ed44:	bne	1dc1c <__assert_fail@plt+0xbf70>
   1ed48:	ldr	r0, [sp, #204]	; 0xcc
   1ed4c:	bl	1b22c <__assert_fail@plt+0x9580>
   1ed50:	mov	r0, #0
   1ed54:	str	r6, [sp, #200]	; 0xc8
   1ed58:	str	r8, [sp, #204]	; 0xcc
   1ed5c:	str	sl, [sp, #196]	; 0xc4
   1ed60:	bl	1b22c <__assert_fail@plt+0x9580>
   1ed64:	mov	r0, #0
   1ed68:	bl	1b22c <__assert_fail@plt+0x9580>
   1ed6c:	ldr	r8, [sp, #96]	; 0x60
   1ed70:	ldr	sl, [sp, #92]	; 0x5c
   1ed74:	ldr	r5, [sp, #80]	; 0x50
   1ed78:	sub	r6, fp, #48	; 0x30
   1ed7c:	cmp	sl, #0
   1ed80:	beq	1fcc8 <__assert_fail@plt+0xe01c>
   1ed84:	ldr	r4, [sp, #32]
   1ed88:	cmp	sl, #1
   1ed8c:	beq	1edb0 <__assert_fail@plt+0xd104>
   1ed90:	ldr	r1, [fp, #16]
   1ed94:	mvn	r0, r4
   1ed98:	add	r0, r0, r1
   1ed9c:	mov	r1, #255	; 0xff
   1eda0:	lsl	r2, r0, #3
   1eda4:	ldr	r0, [fp, #20]
   1eda8:	add	r0, r0, #8
   1edac:	bl	11b2c <memset@plt>
   1edb0:	ldr	r0, [sp, #196]	; 0xc4
   1edb4:	ldr	r1, [fp, #20]
   1edb8:	mov	r9, #0
   1edbc:	cmp	sl, #2
   1edc0:	str	r9, [r1]
   1edc4:	str	r0, [r1, #4]
   1edc8:	bcc	1fba8 <__assert_fail@plt+0xdefc>
   1edcc:	ldrb	r0, [r5, #28]
   1edd0:	ands	r0, r0, #16
   1edd4:	bne	1fba8 <__assert_fail@plt+0xdefc>
   1edd8:	ldrb	r1, [r8, #88]	; 0x58
   1eddc:	mov	r0, #0
   1ede0:	tst	r1, #1
   1ede4:	mov	r1, #0
   1ede8:	beq	1edfc <__assert_fail@plt+0xd150>
   1edec:	ldr	r2, [r8, #76]	; 0x4c
   1edf0:	mov	r1, #0
   1edf4:	cmp	r2, #0
   1edf8:	movwgt	r1, #1
   1edfc:	movw	r2, #2048	; 0x800
   1ee00:	ldr	r7, [r5]
   1ee04:	cmp	r1, #0
   1ee08:	mov	r1, #0
   1ee0c:	movt	r2, #3
   1ee10:	vldr	d16, [r2]
   1ee14:	ldr	r2, [r2, #8]
   1ee18:	str	r2, [fp, #-40]	; 0xffffffd8
   1ee1c:	mov	r2, #16
   1ee20:	vstr	d16, [fp, #-48]	; 0xffffffd0
   1ee24:	str	r2, [fp, #-188]	; 0xffffff44
   1ee28:	sub	r2, fp, #192	; 0xc0
   1ee2c:	str	r0, [fp, #-192]	; 0xffffff40
   1ee30:	add	r5, r2, #12
   1ee34:	str	r5, [fp, #-184]	; 0xffffff48
   1ee38:	beq	1ee58 <__assert_fail@plt+0xd1ac>
   1ee3c:	mov	r0, #48	; 0x30
   1ee40:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1ee44:	cmp	r0, #0
   1ee48:	str	r0, [fp, #-40]	; 0xffffffd8
   1ee4c:	beq	1faf8 <__assert_fail@plt+0xde4c>
   1ee50:	ldr	r0, [fp, #-192]	; 0xffffff40
   1ee54:	mov	r1, r6
   1ee58:	str	r7, [sp, #68]	; 0x44
   1ee5c:	ldr	r7, [r7, #72]	; 0x48
   1ee60:	cmp	r0, sl
   1ee64:	str	r5, [sp, #76]	; 0x4c
   1ee68:	str	r1, [sp, #80]	; 0x50
   1ee6c:	bcs	1ef58 <__assert_fail@plt+0xd2ac>
   1ee70:	ldr	r2, [sp, #76]	; 0x4c
   1ee74:	sub	r0, fp, #192	; 0xc0
   1ee78:	mov	r1, sl
   1ee7c:	mov	r3, #8
   1ee80:	bl	2e560 <__assert_fail@plt+0x1c8b4>
   1ee84:	cmp	r0, #0
   1ee88:	bne	1ef5c <__assert_fail@plt+0xd2b0>
   1ee8c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1ee90:	ldr	r1, [sp, #76]	; 0x4c
   1ee94:	cmp	r0, r1
   1ee98:	beq	1eea0 <__assert_fail@plt+0xd1f4>
   1ee9c:	bl	1b22c <__assert_fail@plt+0x9580>
   1eea0:	mov	r0, #16
   1eea4:	mov	r9, #12
   1eea8:	str	r0, [fp, #-188]	; 0xffffff44
   1eeac:	mov	r0, #0
   1eeb0:	str	r0, [fp, #-192]	; 0xffffff40
   1eeb4:	ldr	r0, [sp, #76]	; 0x4c
   1eeb8:	str	r0, [fp, #-184]	; 0xffffff48
   1eebc:	ldr	r0, [sp, #80]	; 0x50
   1eec0:	cmp	r0, #0
   1eec4:	beq	1fccc <__assert_fail@plt+0xe020>
   1eec8:	ldr	r0, [sp, #80]	; 0x50
   1eecc:	ldr	r1, [r0]
   1eed0:	ldr	r0, [r0, #8]
   1eed4:	cmp	r1, #1
   1eed8:	blt	1fdd4 <__assert_fail@plt+0xe128>
   1eedc:	ldr	r4, [sp, #80]	; 0x50
   1eee0:	mov	r5, #0
   1eee4:	mov	r6, #0
   1eee8:	add	r0, r0, r5
   1eeec:	ldr	r0, [r0, #20]
   1eef0:	bl	1b22c <__assert_fail@plt+0x9580>
   1eef4:	ldr	r0, [r4, #8]
   1eef8:	add	r0, r0, r5
   1eefc:	ldr	r0, [r0, #8]
   1ef00:	bl	1b22c <__assert_fail@plt+0x9580>
   1ef04:	ldr	r1, [r4]
   1ef08:	ldr	r0, [r4, #8]
   1ef0c:	add	r6, r6, #1
   1ef10:	add	r5, r5, #24
   1ef14:	cmp	r6, r1
   1ef18:	blt	1eee8 <__assert_fail@plt+0xd23c>
   1ef1c:	b	1fdd4 <__assert_fail@plt+0xe128>
   1ef20:	ldr	r1, [r3, #8]
   1ef24:	cmp	r1, #0
   1ef28:	beq	1ef38 <__assert_fail@plt+0xd28c>
   1ef2c:	ldrsb	r1, [sl, #28]
   1ef30:	cmp	r1, #0
   1ef34:	blt	1d398 <__assert_fail@plt+0xb6ec>
   1ef38:	mov	r1, #0
   1ef3c:	cmp	r6, #0
   1ef40:	str	r1, [sp, #76]	; 0x4c
   1ef44:	beq	1faf0 <__assert_fail@plt+0xde44>
   1ef48:	cmp	r0, #0
   1ef4c:	mov	r6, #0
   1ef50:	bne	1fd20 <__assert_fail@plt+0xe074>
   1ef54:	b	1d39c <__assert_fail@plt+0xb6f0>
   1ef58:	str	sl, [fp, #-192]	; 0xffffff40
   1ef5c:	ldr	r5, [fp, #20]
   1ef60:	ldr	r0, [fp, #-184]	; 0xffffff48
   1ef64:	lsl	r2, sl, #3
   1ef68:	str	r2, [sp, #56]	; 0x38
   1ef6c:	mov	r1, r5
   1ef70:	str	r0, [sp, #60]	; 0x3c
   1ef74:	bl	118ec <memcpy@plt>
   1ef78:	ldr	r6, [r5]
   1ef7c:	ldr	r0, [r5, #4]
   1ef80:	mov	ip, #0
   1ef84:	cmp	r6, r0
   1ef88:	ble	1f018 <__assert_fail@plt+0xd36c>
   1ef8c:	mov	r0, ip
   1ef90:	bl	1b22c <__assert_fail@plt+0x9580>
   1ef94:	ldr	r0, [fp, #-184]	; 0xffffff48
   1ef98:	ldr	r5, [sp, #76]	; 0x4c
   1ef9c:	cmp	r0, r5
   1efa0:	beq	1efa8 <__assert_fail@plt+0xd2fc>
   1efa4:	bl	1b22c <__assert_fail@plt+0x9580>
   1efa8:	ldr	r6, [sp, #80]	; 0x50
   1efac:	mov	r0, #16
   1efb0:	str	r0, [fp, #-188]	; 0xffffff44
   1efb4:	mov	r0, #0
   1efb8:	str	r0, [fp, #-192]	; 0xffffff40
   1efbc:	str	r5, [fp, #-184]	; 0xffffff48
   1efc0:	cmp	r6, #0
   1efc4:	beq	1fba8 <__assert_fail@plt+0xdefc>
   1efc8:	ldr	r1, [r6]
   1efcc:	ldr	r0, [r6, #8]
   1efd0:	cmp	r1, #1
   1efd4:	blt	1fba0 <__assert_fail@plt+0xdef4>
   1efd8:	mov	r4, #0
   1efdc:	mov	r5, #0
   1efe0:	add	r0, r0, r4
   1efe4:	ldr	r0, [r0, #20]
   1efe8:	bl	1b22c <__assert_fail@plt+0x9580>
   1efec:	ldr	r0, [r6, #8]
   1eff0:	add	r0, r0, r4
   1eff4:	ldr	r0, [r0, #8]
   1eff8:	bl	1b22c <__assert_fail@plt+0x9580>
   1effc:	ldr	r1, [r6]
   1f000:	ldr	r0, [r6, #8]
   1f004:	add	r5, r5, #1
   1f008:	add	r4, r4, #24
   1f00c:	cmp	r5, r1
   1f010:	blt	1efe0 <__assert_fail@plt+0xd334>
   1f014:	b	1fba0 <__assert_fail@plt+0xdef4>
   1f018:	lsl	r0, sl, #4
   1f01c:	mov	lr, #1
   1f020:	mov	r1, #0
   1f024:	mov	ip, #0
   1f028:	str	r0, [sp, #48]	; 0x30
   1f02c:	mov	r0, #0
   1f030:	str	r0, [sp, #52]	; 0x34
   1f034:	ldr	r0, [sp, #68]	; 0x44
   1f038:	mov	r5, r1
   1f03c:	ldr	r0, [r0]
   1f040:	add	r1, r0, r7, lsl #3
   1f044:	ldr	r3, [r1, #4]
   1f048:	uxtb	r2, r3
   1f04c:	cmp	r2, #9
   1f050:	beq	1f080 <__assert_fail@plt+0xd3d4>
   1f054:	cmp	r2, #8
   1f058:	bne	1f0f4 <__assert_fail@plt+0xd448>
   1f05c:	ldr	r0, [r0, r7, lsl #3]
   1f060:	add	r0, r0, #1
   1f064:	cmp	r0, sl
   1f068:	bge	1f0f4 <__assert_fail@plt+0xd448>
   1f06c:	ldr	r1, [fp, #20]
   1f070:	str	r6, [r1, r0, lsl #3]!
   1f074:	mvn	r0, #0
   1f078:	str	r0, [r1, #4]
   1f07c:	b	1f0f4 <__assert_fail@plt+0xd448>
   1f080:	ldr	r0, [r0, r7, lsl #3]
   1f084:	add	r0, r0, #1
   1f088:	cmp	r0, sl
   1f08c:	bge	1f0f4 <__assert_fail@plt+0xd448>
   1f090:	ldr	r1, [fp, #20]
   1f094:	ldr	r2, [r1, r0, lsl #3]
   1f098:	cmp	r2, r6
   1f09c:	bge	1f0b0 <__assert_fail@plt+0xd404>
   1f0a0:	add	r0, r1, r0, lsl #3
   1f0a4:	str	r6, [r0, #4]
   1f0a8:	ldr	r0, [sp, #60]	; 0x3c
   1f0ac:	b	1f0d0 <__assert_fail@plt+0xd424>
   1f0b0:	tst	r3, #524288	; 0x80000
   1f0b4:	beq	1f0e8 <__assert_fail@plt+0xd43c>
   1f0b8:	ldr	r1, [sp, #60]	; 0x3c
   1f0bc:	ldr	r1, [r1, r0, lsl #3]
   1f0c0:	cmn	r1, #1
   1f0c4:	beq	1f0e8 <__assert_fail@plt+0xd43c>
   1f0c8:	ldr	r0, [fp, #20]
   1f0cc:	ldr	r1, [sp, #60]	; 0x3c
   1f0d0:	ldr	r2, [sp, #56]	; 0x38
   1f0d4:	str	ip, [sp, #64]	; 0x40
   1f0d8:	bl	118ec <memcpy@plt>
   1f0dc:	ldr	ip, [sp, #64]	; 0x40
   1f0e0:	mov	lr, #1
   1f0e4:	b	1f0f4 <__assert_fail@plt+0xd448>
   1f0e8:	ldr	r1, [fp, #20]
   1f0ec:	add	r0, r1, r0, lsl #3
   1f0f0:	str	r6, [r0, #4]
   1f0f4:	ldr	r0, [fp, #20]
   1f0f8:	ldr	r0, [r0, #4]
   1f0fc:	cmp	r6, r0
   1f100:	ldreq	r0, [sp, #200]	; 0xc8
   1f104:	cmpeq	r7, r0
   1f108:	beq	1f164 <__assert_fail@plt+0xd4b8>
   1f10c:	ldr	r0, [sp, #80]	; 0x50
   1f110:	cmp	r0, #0
   1f114:	beq	1f1a8 <__assert_fail@plt+0xd4fc>
   1f118:	mov	r2, r5
   1f11c:	cmp	r5, #1
   1f120:	blt	1f244 <__assert_fail@plt+0xd598>
   1f124:	mov	r0, #0
   1f128:	subs	r1, r2, #1
   1f12c:	str	r6, [sp, #72]	; 0x48
   1f130:	beq	1f154 <__assert_fail@plt+0xd4a8>
   1f134:	add	r2, r0, r1
   1f138:	lsr	r3, r2, #1
   1f13c:	ldr	r6, [ip, r3, lsl #2]
   1f140:	cmp	r6, r7
   1f144:	movge	r1, r3
   1f148:	addlt	r0, lr, r2, lsr #1
   1f14c:	cmp	r0, r1
   1f150:	bcc	1f134 <__assert_fail@plt+0xd488>
   1f154:	ldr	r0, [ip, r0, lsl #2]
   1f158:	ldr	r6, [sp, #72]	; 0x48
   1f15c:	cmp	r0, r7
   1f160:	bne	1f1a8 <__assert_fail@plt+0xd4fc>
   1f164:	ldr	r6, [sp, #80]	; 0x50
   1f168:	cmp	r6, #0
   1f16c:	beq	1fb1c <__assert_fail@plt+0xde70>
   1f170:	ldr	r5, [sp, #76]	; 0x4c
   1f174:	mov	r0, #0
   1f178:	ldr	r2, [fp, #20]
   1f17c:	ldr	r1, [r2, r0, lsl #3]
   1f180:	cmp	r1, #0
   1f184:	blt	1f198 <__assert_fail@plt+0xd4ec>
   1f188:	add	r1, r2, r0, lsl #3
   1f18c:	ldr	r1, [r1, #4]
   1f190:	cmn	r1, #1
   1f194:	beq	1f1b0 <__assert_fail@plt+0xd504>
   1f198:	add	r0, r0, #1
   1f19c:	cmp	r0, sl
   1f1a0:	bcc	1f178 <__assert_fail@plt+0xd4cc>
   1f1a4:	b	1fb20 <__assert_fail@plt+0xde74>
   1f1a8:	mov	r2, r5
   1f1ac:	b	1f244 <__assert_fail@plt+0xd598>
   1f1b0:	ldr	r0, [r6]
   1f1b4:	cmp	r0, #0
   1f1b8:	beq	1fb20 <__assert_fail@plt+0xde74>
   1f1bc:	sub	r0, r0, #1
   1f1c0:	ldr	r7, [sp, #56]	; 0x38
   1f1c4:	str	ip, [sp, #64]	; 0x40
   1f1c8:	str	r0, [r6]
   1f1cc:	add	r5, r0, r0, lsl #1
   1f1d0:	ldr	r4, [r6, #8]
   1f1d4:	mov	r2, r7
   1f1d8:	ldr	r0, [r4, r5, lsl #3]!
   1f1dc:	str	r0, [sp, #72]	; 0x48
   1f1e0:	ldr	r1, [r4, #8]
   1f1e4:	ldr	r0, [fp, #20]
   1f1e8:	bl	118ec <memcpy@plt>
   1f1ec:	ldr	r0, [r4, #8]
   1f1f0:	mov	r2, r7
   1f1f4:	add	r1, r0, sl, lsl #3
   1f1f8:	ldr	r0, [sp, #60]	; 0x3c
   1f1fc:	bl	118ec <memcpy@plt>
   1f200:	ldr	r0, [sp, #64]	; 0x40
   1f204:	bl	1b22c <__assert_fail@plt+0x9580>
   1f208:	ldr	r0, [r6, #8]
   1f20c:	add	r0, r0, r5, lsl #3
   1f210:	ldr	r0, [r0, #8]
   1f214:	bl	1b22c <__assert_fail@plt+0x9580>
   1f218:	ldr	r0, [r6, #8]
   1f21c:	add	r0, r0, r5, lsl #3
   1f220:	ldr	r7, [r0, #4]
   1f224:	ldr	ip, [r0, #20]
   1f228:	cmn	r7, #1
   1f22c:	ble	1fb14 <__assert_fail@plt+0xde68>
   1f230:	ldr	r1, [r0, #12]
   1f234:	ldr	r2, [r0, #16]
   1f238:	ldr	r6, [sp, #72]	; 0x48
   1f23c:	mov	lr, #1
   1f240:	str	r1, [sp, #52]	; 0x34
   1f244:	ldr	r5, [sp, #188]	; 0xbc
   1f248:	ldr	r0, [r5]
   1f24c:	add	r1, r0, r7, lsl #3
   1f250:	ldr	r1, [r1, #4]
   1f254:	tst	r1, #8
   1f258:	bne	1f2f8 <__assert_fail@plt+0xd64c>
   1f25c:	tst	r1, #1048576	; 0x100000
   1f260:	bne	1f380 <__assert_fail@plt+0xd6d4>
   1f264:	uxtb	r1, r1
   1f268:	cmp	r1, #4
   1f26c:	bne	1f3b4 <__assert_fail@plt+0xd708>
   1f270:	ldr	r0, [r0, r7, lsl #3]
   1f274:	mov	r4, #0
   1f278:	add	r0, r0, #1
   1f27c:	cmp	r0, sl
   1f280:	bge	1f29c <__assert_fail@plt+0xd5f0>
   1f284:	ldr	r1, [fp, #20]
   1f288:	mov	r3, r2
   1f28c:	ldr	r2, [r1, r0, lsl #3]!
   1f290:	ldr	r1, [r1, #4]
   1f294:	sub	r4, r1, r2
   1f298:	mov	r2, r3
   1f29c:	ldr	r1, [sp, #80]	; 0x50
   1f2a0:	cmp	r1, #0
   1f2a4:	beq	1f6f0 <__assert_fail@plt+0xda44>
   1f2a8:	cmp	r0, sl
   1f2ac:	bge	1f2f0 <__assert_fail@plt+0xd644>
   1f2b0:	mov	r3, r2
   1f2b4:	ldr	r2, [fp, #20]
   1f2b8:	ldr	r1, [r2, r0, lsl #3]
   1f2bc:	cmn	r1, #1
   1f2c0:	beq	1f2f0 <__assert_fail@plt+0xd644>
   1f2c4:	add	r0, r2, r0, lsl #3
   1f2c8:	ldr	r0, [r0, #4]
   1f2cc:	cmn	r0, #1
   1f2d0:	beq	1f2f0 <__assert_fail@plt+0xd644>
   1f2d4:	cmp	r4, #0
   1f2d8:	mov	r2, r3
   1f2dc:	beq	1f714 <__assert_fail@plt+0xda68>
   1f2e0:	ldr	r0, [sp, #132]	; 0x84
   1f2e4:	sub	r0, r0, r6
   1f2e8:	cmp	r0, r4
   1f2ec:	bge	1f8f4 <__assert_fail@plt+0xdc48>
   1f2f0:	ldr	r7, [sp, #80]	; 0x50
   1f2f4:	b	1f58c <__assert_fail@plt+0xd8e0>
   1f2f8:	ldr	r0, [sp, #204]	; 0xcc
   1f2fc:	ldr	r4, [r5, #20]
   1f300:	cmp	r2, #1
   1f304:	ldr	r0, [r0, r6, lsl #2]
   1f308:	str	r0, [sp, #88]	; 0x58
   1f30c:	blt	1f360 <__assert_fail@plt+0xd6b4>
   1f310:	str	r4, [sp, #100]	; 0x64
   1f314:	mov	r5, r6
   1f318:	mov	r4, r2
   1f31c:	mov	r0, #0
   1f320:	subs	r1, r2, #1
   1f324:	beq	1f348 <__assert_fail@plt+0xd69c>
   1f328:	add	r2, r0, r1
   1f32c:	lsr	r3, r2, #1
   1f330:	ldr	r6, [ip, r3, lsl #2]
   1f334:	cmp	r6, r7
   1f338:	movge	r1, r3
   1f33c:	addlt	r0, lr, r2, lsr #1
   1f340:	cmp	r0, r1
   1f344:	bcc	1f328 <__assert_fail@plt+0xd67c>
   1f348:	ldr	r0, [ip, r0, lsl #2]
   1f34c:	mov	r2, r4
   1f350:	ldr	r4, [sp, #100]	; 0x64
   1f354:	mov	r6, r5
   1f358:	cmp	r0, r7
   1f35c:	beq	1f494 <__assert_fail@plt+0xd7e8>
   1f360:	ldr	r0, [sp, #52]	; 0x34
   1f364:	cmp	r0, #0
   1f368:	beq	1f470 <__assert_fail@plt+0xd7c4>
   1f36c:	cmp	r2, #0
   1f370:	bne	1f93c <__assert_fail@plt+0xdc90>
   1f374:	str	r7, [ip]
   1f378:	mov	r2, #1
   1f37c:	b	1f494 <__assert_fail@plt+0xd7e8>
   1f380:	mov	r0, r5
   1f384:	mov	r1, r7
   1f388:	add	r2, sp, #104	; 0x68
   1f38c:	mov	r3, r6
   1f390:	str	r5, [sp, #100]	; 0x64
   1f394:	mov	r4, ip
   1f398:	bl	29840 <__assert_fail@plt+0x17b94>
   1f39c:	mov	lr, #1
   1f3a0:	mov	ip, r4
   1f3a4:	mov	r1, r0
   1f3a8:	ldr	r5, [sp, #100]	; 0x64
   1f3ac:	cmp	r1, #0
   1f3b0:	bne	1f3e0 <__assert_fail@plt+0xd734>
   1f3b4:	ldr	r0, [r5]
   1f3b8:	mov	r2, r6
   1f3bc:	mov	r4, ip
   1f3c0:	add	r1, r0, r7, lsl #3
   1f3c4:	add	r0, sp, #104	; 0x68
   1f3c8:	bl	29b34 <__assert_fail@plt+0x17e88>
   1f3cc:	mov	lr, #1
   1f3d0:	mov	ip, r4
   1f3d4:	mov	r1, #1
   1f3d8:	cmp	r0, #0
   1f3dc:	beq	1f580 <__assert_fail@plt+0xd8d4>
   1f3e0:	ldr	r0, [r5, #12]
   1f3e4:	add	r6, r1, r6
   1f3e8:	ldr	r5, [r0, r7, lsl #2]
   1f3ec:	ldr	r7, [sp, #80]	; 0x50
   1f3f0:	cmp	r7, #0
   1f3f4:	beq	1f62c <__assert_fail@plt+0xd980>
   1f3f8:	ldr	r0, [sp, #196]	; 0xc4
   1f3fc:	cmp	r6, r0
   1f400:	bgt	1f58c <__assert_fail@plt+0xd8e0>
   1f404:	ldr	r0, [sp, #204]	; 0xcc
   1f408:	ldr	r0, [r0, r6, lsl #2]
   1f40c:	cmp	r0, #0
   1f410:	beq	1f58c <__assert_fail@plt+0xd8e0>
   1f414:	ldr	r1, [r0, #8]
   1f418:	cmp	r1, #1
   1f41c:	blt	1f58c <__assert_fail@plt+0xd8e0>
   1f420:	ldr	r0, [r0, #12]
   1f424:	mov	r4, r6
   1f428:	subs	r1, r1, #1
   1f42c:	mov	r2, #0
   1f430:	beq	1f458 <__assert_fail@plt+0xd7ac>
   1f434:	mov	r2, #0
   1f438:	add	r3, r2, r1
   1f43c:	lsr	r7, r3, #1
   1f440:	ldr	r6, [r0, r7, lsl #2]
   1f444:	cmp	r6, r5
   1f448:	movge	r1, r7
   1f44c:	addlt	r2, lr, r3, lsr #1
   1f450:	cmp	r2, r1
   1f454:	bcc	1f438 <__assert_fail@plt+0xd78c>
   1f458:	ldr	r0, [r0, r2, lsl #2]
   1f45c:	mov	r6, r4
   1f460:	mov	r1, #0
   1f464:	cmp	r0, r5
   1f468:	beq	1f80c <__assert_fail@plt+0xdb60>
   1f46c:	b	1f580 <__assert_fail@plt+0xd8d4>
   1f470:	mov	r0, #4
   1f474:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1f478:	cmp	r0, #0
   1f47c:	beq	1fe7c <__assert_fail@plt+0xe1d0>
   1f480:	mov	ip, r0
   1f484:	str	r7, [r0]
   1f488:	mov	r0, #1
   1f48c:	mov	r2, #1
   1f490:	str	r0, [sp, #52]	; 0x34
   1f494:	add	r0, r7, r7, lsl #1
   1f498:	add	r1, r4, r0, lsl #2
   1f49c:	ldr	lr, [r1, #4]
   1f4a0:	cmp	lr, #1
   1f4a4:	blt	1f580 <__assert_fail@plt+0xd8d4>
   1f4a8:	ldr	r0, [r1, #8]
   1f4ac:	str	r2, [sp, #44]	; 0x2c
   1f4b0:	str	r6, [sp, #72]	; 0x48
   1f4b4:	mov	r6, #0
   1f4b8:	mvn	r5, #0
   1f4bc:	str	ip, [sp, #64]	; 0x40
   1f4c0:	str	r0, [sp, #84]	; 0x54
   1f4c4:	ldr	r0, [sp, #88]	; 0x58
   1f4c8:	ldr	r2, [r0, #8]
   1f4cc:	sub	r1, r2, #1
   1f4d0:	cmp	r2, #1
   1f4d4:	blt	1f554 <__assert_fail@plt+0xd8a8>
   1f4d8:	ldr	r0, [sp, #84]	; 0x54
   1f4dc:	str	r5, [sp, #100]	; 0x64
   1f4e0:	mov	r5, #0
   1f4e4:	cmp	r1, #0
   1f4e8:	ldr	r7, [r0, r6, lsl #2]
   1f4ec:	ldr	r0, [sp, #88]	; 0x58
   1f4f0:	ldr	r4, [r0, #12]
   1f4f4:	beq	1f520 <__assert_fail@plt+0xd874>
   1f4f8:	mov	r3, r1
   1f4fc:	mov	ip, #1
   1f500:	add	r0, r5, r3
   1f504:	lsr	r8, r0, #1
   1f508:	ldr	sl, [r4, r8, lsl #2]
   1f50c:	cmp	sl, r7
   1f510:	movge	r3, r8
   1f514:	addlt	r5, ip, r0, lsr #1
   1f518:	cmp	r5, r3
   1f51c:	bcc	1f500 <__assert_fail@plt+0xd854>
   1f520:	ldr	r0, [r4, r5, lsl #2]
   1f524:	cmp	r0, r7
   1f528:	bne	1f548 <__assert_fail@plt+0xd89c>
   1f52c:	ldr	r4, [sp, #100]	; 0x64
   1f530:	ldr	r8, [sp, #96]	; 0x60
   1f534:	ldr	sl, [sp, #92]	; 0x5c
   1f538:	cmn	r4, #1
   1f53c:	bne	1f63c <__assert_fail@plt+0xd990>
   1f540:	mov	r5, r7
   1f544:	b	1f554 <__assert_fail@plt+0xd8a8>
   1f548:	ldr	r8, [sp, #96]	; 0x60
   1f54c:	ldr	sl, [sp, #92]	; 0x5c
   1f550:	ldr	r5, [sp, #100]	; 0x64
   1f554:	add	r6, r6, #1
   1f558:	cmp	r6, lr
   1f55c:	blt	1f4d0 <__assert_fail@plt+0xd824>
   1f560:	ldr	ip, [sp, #64]	; 0x40
   1f564:	ldr	r6, [sp, #72]	; 0x48
   1f568:	ldr	r1, [sp, #44]	; 0x2c
   1f56c:	mov	lr, #1
   1f570:	cmn	r5, #1
   1f574:	bgt	1f814 <__assert_fail@plt+0xdb68>
   1f578:	cmn	r5, #2
   1f57c:	beq	1fde0 <__assert_fail@plt+0xe134>
   1f580:	ldr	r7, [sp, #80]	; 0x50
   1f584:	cmp	r7, #0
   1f588:	beq	1fd44 <__assert_fail@plt+0xe098>
   1f58c:	ldr	r0, [r7]
   1f590:	mov	r4, #0
   1f594:	cmp	r0, #0
   1f598:	beq	1fd48 <__assert_fail@plt+0xe09c>
   1f59c:	sub	r0, r0, #1
   1f5a0:	ldr	r5, [sp, #56]	; 0x38
   1f5a4:	str	ip, [sp, #64]	; 0x40
   1f5a8:	str	r0, [r7]
   1f5ac:	add	r6, r0, r0, lsl #1
   1f5b0:	ldr	r4, [r7, #8]
   1f5b4:	mov	r2, r5
   1f5b8:	ldr	r0, [r4, r6, lsl #3]!
   1f5bc:	str	r0, [sp, #72]	; 0x48
   1f5c0:	ldr	r1, [r4, #8]
   1f5c4:	ldr	r0, [fp, #20]
   1f5c8:	bl	118ec <memcpy@plt>
   1f5cc:	ldr	r0, [r4, #8]
   1f5d0:	mov	r2, r5
   1f5d4:	add	r1, r0, sl, lsl #3
   1f5d8:	ldr	r0, [sp, #60]	; 0x3c
   1f5dc:	bl	118ec <memcpy@plt>
   1f5e0:	ldr	r0, [sp, #64]	; 0x40
   1f5e4:	bl	1b22c <__assert_fail@plt+0x9580>
   1f5e8:	ldr	r0, [r7, #8]
   1f5ec:	add	r0, r0, r6, lsl #3
   1f5f0:	ldr	r0, [r0, #8]
   1f5f4:	bl	1b22c <__assert_fail@plt+0x9580>
   1f5f8:	ldr	r0, [r7, #8]
   1f5fc:	add	r0, r0, r6, lsl #3
   1f600:	ldr	r7, [r0, #4]
   1f604:	ldr	ip, [r0, #20]
   1f608:	cmn	r7, #1
   1f60c:	ble	1fb00 <__assert_fail@plt+0xde54>
   1f610:	ldr	r1, [r0, #12]
   1f614:	ldr	r4, [sp, #32]
   1f618:	ldr	r6, [sp, #72]	; 0x48
   1f61c:	mov	lr, #1
   1f620:	str	r1, [sp, #52]	; 0x34
   1f624:	ldr	r1, [r0, #16]
   1f628:	b	1f81c <__assert_fail@plt+0xdb70>
   1f62c:	mov	r1, #0
   1f630:	cmn	r5, #1
   1f634:	bgt	1f814 <__assert_fail@plt+0xdb68>
   1f638:	b	1f578 <__assert_fail@plt+0xd8cc>
   1f63c:	ldr	r1, [sp, #44]	; 0x2c
   1f640:	ldr	ip, [sp, #64]	; 0x40
   1f644:	mov	lr, #1
   1f648:	cmp	r1, #1
   1f64c:	blt	1f6a0 <__assert_fail@plt+0xd9f4>
   1f650:	mov	r0, #0
   1f654:	subs	r1, r1, #1
   1f658:	beq	1f67c <__assert_fail@plt+0xd9d0>
   1f65c:	add	r2, r0, r1
   1f660:	lsr	r3, r2, #1
   1f664:	ldr	r6, [ip, r3, lsl #2]
   1f668:	cmp	r6, r4
   1f66c:	movge	r1, r3
   1f670:	addlt	r0, lr, r2, lsr #1
   1f674:	cmp	r0, r1
   1f678:	bcc	1f65c <__assert_fail@plt+0xd9b0>
   1f67c:	ldr	r0, [ip, r0, lsl #2]
   1f680:	ldr	r1, [sp, #44]	; 0x2c
   1f684:	cmp	r0, r4
   1f688:	bne	1f6a0 <__assert_fail@plt+0xd9f4>
   1f68c:	ldr	r6, [sp, #72]	; 0x48
   1f690:	mov	r5, r7
   1f694:	cmn	r5, #1
   1f698:	bgt	1f814 <__assert_fail@plt+0xdb68>
   1f69c:	b	1f578 <__assert_fail@plt+0xd8cc>
   1f6a0:	ldr	r5, [sp, #80]	; 0x50
   1f6a4:	cmp	r5, #0
   1f6a8:	beq	1f804 <__assert_fail@plt+0xdb58>
   1f6ac:	ldr	r6, [r5]
   1f6b0:	ldr	r0, [r5, #4]
   1f6b4:	add	r1, r6, #1
   1f6b8:	cmp	r1, r0
   1f6bc:	str	r1, [r5]
   1f6c0:	bne	1f738 <__assert_fail@plt+0xda8c>
   1f6c4:	ldr	r0, [r5, #8]
   1f6c8:	add	r1, r1, r1, lsl #1
   1f6cc:	lsl	r1, r1, #4
   1f6d0:	bl	1b388 <__assert_fail@plt+0x96dc>
   1f6d4:	cmp	r0, #0
   1f6d8:	beq	1fddc <__assert_fail@plt+0xe130>
   1f6dc:	str	r0, [r5, #8]
   1f6e0:	ldr	r1, [r5, #4]
   1f6e4:	lsl	r1, r1, #1
   1f6e8:	str	r1, [r5, #4]
   1f6ec:	b	1f73c <__assert_fail@plt+0xda90>
   1f6f0:	cmp	r4, #0
   1f6f4:	beq	1f714 <__assert_fail@plt+0xda68>
   1f6f8:	ldr	r0, [r5, #12]
   1f6fc:	add	r6, r4, r6
   1f700:	mov	r1, #0
   1f704:	ldr	r5, [r0, r7, lsl #2]
   1f708:	cmn	r5, #1
   1f70c:	bgt	1f814 <__assert_fail@plt+0xdb68>
   1f710:	b	1f578 <__assert_fail@plt+0xd8cc>
   1f714:	ldr	r0, [sp, #52]	; 0x34
   1f718:	str	r5, [sp, #100]	; 0x64
   1f71c:	cmp	r0, #0
   1f720:	beq	1f830 <__assert_fail@plt+0xdb84>
   1f724:	cmp	r2, #0
   1f728:	bne	1fa14 <__assert_fail@plt+0xdd68>
   1f72c:	str	r7, [ip]
   1f730:	mov	r5, #1
   1f734:	b	1f858 <__assert_fail@plt+0xdbac>
   1f738:	ldr	r0, [r5, #8]
   1f73c:	ldr	r1, [sp, #72]	; 0x48
   1f740:	add	r6, r6, r6, lsl #1
   1f744:	str	r1, [r0, r6, lsl #3]!
   1f748:	str	r7, [r0, #4]
   1f74c:	ldr	r0, [sp, #48]	; 0x30
   1f750:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1f754:	ldr	r1, [r5, #8]
   1f758:	cmp	r0, #0
   1f75c:	add	r4, r1, r6, lsl #3
   1f760:	str	r0, [r4, #8]!
   1f764:	beq	1fddc <__assert_fail@plt+0xe130>
   1f768:	ldr	r7, [sp, #56]	; 0x38
   1f76c:	ldr	r1, [fp, #20]
   1f770:	mov	r2, r7
   1f774:	bl	118ec <memcpy@plt>
   1f778:	ldr	r0, [r4]
   1f77c:	ldr	r1, [sp, #60]	; 0x3c
   1f780:	mov	r2, r7
   1f784:	add	r0, r0, sl, lsl #3
   1f788:	bl	118ec <memcpy@plt>
   1f78c:	ldr	r0, [r5, #8]
   1f790:	ldr	r1, [sp, #44]	; 0x2c
   1f794:	add	r6, r0, r6, lsl #3
   1f798:	cmp	r1, #1
   1f79c:	mov	r5, r6
   1f7a0:	str	r1, [r5, #16]!
   1f7a4:	sub	r4, r5, #4
   1f7a8:	blt	1f7ec <__assert_fail@plt+0xdb40>
   1f7ac:	lsl	r7, r1, #2
   1f7b0:	str	r1, [r4]
   1f7b4:	mov	r0, r7
   1f7b8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1f7bc:	cmp	r0, #0
   1f7c0:	str	r0, [r6, #20]
   1f7c4:	beq	1fe84 <__assert_fail@plt+0xe1d8>
   1f7c8:	ldr	r4, [sp, #64]	; 0x40
   1f7cc:	mov	r2, r7
   1f7d0:	mov	r1, r4
   1f7d4:	bl	118ec <memcpy@plt>
   1f7d8:	ldr	r6, [sp, #72]	; 0x48
   1f7dc:	ldr	r1, [sp, #44]	; 0x2c
   1f7e0:	ldr	r5, [sp, #100]	; 0x64
   1f7e4:	mov	ip, r4
   1f7e8:	b	1f56c <__assert_fail@plt+0xd8c0>
   1f7ec:	ldr	ip, [sp, #64]	; 0x40
   1f7f0:	mov	r0, #0
   1f7f4:	mov	lr, #1
   1f7f8:	str	r0, [r4]
   1f7fc:	str	r0, [r4, #4]
   1f800:	str	r0, [r4, #8]
   1f804:	ldr	r6, [sp, #72]	; 0x48
   1f808:	ldr	r5, [sp, #100]	; 0x64
   1f80c:	cmn	r5, #1
   1f810:	ble	1f578 <__assert_fail@plt+0xd8cc>
   1f814:	ldr	r4, [sp, #32]
   1f818:	mov	r7, r5
   1f81c:	ldr	r0, [fp, #20]
   1f820:	ldr	r0, [r0, #4]
   1f824:	cmp	r6, r0
   1f828:	ble	1f034 <__assert_fail@plt+0xd388>
   1f82c:	b	1ef8c <__assert_fail@plt+0xd2e0>
   1f830:	mov	r0, #4
   1f834:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1f838:	cmp	r0, #0
   1f83c:	beq	1fe7c <__assert_fail@plt+0xe1d0>
   1f840:	mov	ip, r0
   1f844:	str	r7, [r0]
   1f848:	mov	r0, #1
   1f84c:	mov	r5, #1
   1f850:	mov	lr, #1
   1f854:	str	r0, [sp, #52]	; 0x34
   1f858:	ldr	r0, [sp, #204]	; 0xcc
   1f85c:	ldr	r0, [r0, r6, lsl #2]
   1f860:	ldr	r1, [r0, #8]
   1f864:	cmp	r1, #1
   1f868:	blt	1f8ec <__assert_fail@plt+0xdc40>
   1f86c:	ldr	r2, [sp, #100]	; 0x64
   1f870:	add	r3, r7, r7, lsl #1
   1f874:	str	r5, [sp, #44]	; 0x2c
   1f878:	ldr	r0, [r0, #12]
   1f87c:	str	r4, [sp, #88]	; 0x58
   1f880:	str	r6, [sp, #72]	; 0x48
   1f884:	ldr	r2, [r2, #20]
   1f888:	add	r2, r2, r3, lsl #2
   1f88c:	ldr	r2, [r2, #8]
   1f890:	ldr	r5, [r2]
   1f894:	subs	r2, r1, #1
   1f898:	mov	r1, #0
   1f89c:	beq	1f8c8 <__assert_fail@plt+0xdc1c>
   1f8a0:	add	r3, r1, r2
   1f8a4:	mov	r4, r5
   1f8a8:	lsr	r6, r3, #1
   1f8ac:	ldr	r5, [r0, r6, lsl #2]
   1f8b0:	cmp	r5, r4
   1f8b4:	mov	r5, r4
   1f8b8:	movge	r2, r6
   1f8bc:	addlt	r1, lr, r3, lsr #1
   1f8c0:	cmp	r1, r2
   1f8c4:	bcc	1f8a0 <__assert_fail@plt+0xdbf4>
   1f8c8:	ldr	r0, [r0, r1, lsl #2]
   1f8cc:	ldr	r6, [sp, #72]	; 0x48
   1f8d0:	ldr	r1, [sp, #88]	; 0x58
   1f8d4:	cmp	r0, r5
   1f8d8:	bne	1f3a8 <__assert_fail@plt+0xd6fc>
   1f8dc:	ldr	r1, [sp, #44]	; 0x2c
   1f8e0:	cmn	r5, #1
   1f8e4:	bgt	1f814 <__assert_fail@plt+0xdb68>
   1f8e8:	b	1f578 <__assert_fail@plt+0xd8cc>
   1f8ec:	ldr	r5, [sp, #100]	; 0x64
   1f8f0:	b	1f3b4 <__assert_fail@plt+0xd708>
   1f8f4:	ldr	r2, [sp, #108]	; 0x6c
   1f8f8:	str	ip, [sp, #64]	; 0x40
   1f8fc:	add	r0, r2, r1
   1f900:	add	r1, r2, r6
   1f904:	mov	r2, r4
   1f908:	bl	11934 <memcmp@plt>
   1f90c:	cmp	r0, #0
   1f910:	beq	1f920 <__assert_fail@plt+0xdc74>
   1f914:	ldr	r7, [sp, #80]	; 0x50
   1f918:	ldr	ip, [sp, #64]	; 0x40
   1f91c:	b	1f58c <__assert_fail@plt+0xd8e0>
   1f920:	ldr	r0, [r5, #12]
   1f924:	ldr	ip, [sp, #64]	; 0x40
   1f928:	add	r6, r4, r6
   1f92c:	mov	lr, #1
   1f930:	ldr	r5, [r0, r7, lsl #2]
   1f934:	ldr	r7, [sp, #80]	; 0x50
   1f938:	b	1f3f8 <__assert_fail@plt+0xd74c>
   1f93c:	ldr	r0, [sp, #52]	; 0x34
   1f940:	mov	r8, r2
   1f944:	str	r4, [sp, #100]	; 0x64
   1f948:	cmp	r0, r2
   1f94c:	bne	1f980 <__assert_fail@plt+0xdcd4>
   1f950:	lsl	r1, r8, #3
   1f954:	mov	r0, ip
   1f958:	mov	r4, r8
   1f95c:	mov	r5, ip
   1f960:	bl	1b388 <__assert_fail@plt+0x96dc>
   1f964:	mov	ip, r5
   1f968:	cmp	r0, #0
   1f96c:	beq	1fde0 <__assert_fail@plt+0xe134>
   1f970:	mov	r1, r8
   1f974:	mov	ip, r0
   1f978:	lsl	r1, r8, #1
   1f97c:	str	r1, [sp, #52]	; 0x34
   1f980:	ldr	r0, [ip]
   1f984:	mov	r2, r8
   1f988:	cmp	r0, r7
   1f98c:	ble	1f9c8 <__assert_fail@plt+0xdd1c>
   1f990:	cmp	r8, #1
   1f994:	blt	1f9f8 <__assert_fail@plt+0xdd4c>
   1f998:	mov	r0, r8
   1f99c:	add	r1, ip, r8, lsl #2
   1f9a0:	add	r0, r8, #1
   1f9a4:	mov	r2, r1
   1f9a8:	ldr	r3, [r2, #-4]!
   1f9ac:	sub	r0, r0, #1
   1f9b0:	cmp	r0, #1
   1f9b4:	str	r3, [r1]
   1f9b8:	mov	r1, r2
   1f9bc:	bgt	1f9a8 <__assert_fail@plt+0xdcfc>
   1f9c0:	sub	r2, r0, #1
   1f9c4:	b	1f9f8 <__assert_fail@plt+0xdd4c>
   1f9c8:	add	r0, ip, r8, lsl #2
   1f9cc:	ldr	r1, [r0, #-4]
   1f9d0:	cmp	r1, r7
   1f9d4:	ble	1f9f8 <__assert_fail@plt+0xdd4c>
   1f9d8:	sub	r2, r8, #2
   1f9dc:	str	r1, [r0]
   1f9e0:	sub	r2, r2, #1
   1f9e4:	ldr	r1, [r0, #-8]
   1f9e8:	sub	r0, r0, #4
   1f9ec:	cmp	r1, r7
   1f9f0:	bgt	1f9dc <__assert_fail@plt+0xdd30>
   1f9f4:	add	r2, r2, #2
   1f9f8:	str	r7, [ip, r2, lsl #2]
   1f9fc:	mov	r2, r8
   1fa00:	ldr	sl, [sp, #92]	; 0x5c
   1fa04:	ldr	r4, [sp, #100]	; 0x64
   1fa08:	add	r2, r8, #1
   1fa0c:	ldr	r8, [sp, #96]	; 0x60
   1fa10:	b	1f494 <__assert_fail@plt+0xd7e8>
   1fa14:	ldr	r0, [sp, #52]	; 0x34
   1fa18:	mov	r8, r2
   1fa1c:	str	r4, [sp, #88]	; 0x58
   1fa20:	cmp	r0, r2
   1fa24:	bne	1fa58 <__assert_fail@plt+0xddac>
   1fa28:	lsl	r1, r8, #3
   1fa2c:	mov	r0, ip
   1fa30:	mov	r5, r8
   1fa34:	mov	r4, ip
   1fa38:	bl	1b388 <__assert_fail@plt+0x96dc>
   1fa3c:	mov	ip, r4
   1fa40:	cmp	r0, #0
   1fa44:	beq	1fde0 <__assert_fail@plt+0xe134>
   1fa48:	mov	r1, r8
   1fa4c:	mov	ip, r0
   1fa50:	lsl	r1, r8, #1
   1fa54:	str	r1, [sp, #52]	; 0x34
   1fa58:	ldr	r0, [ip]
   1fa5c:	mov	r2, r8
   1fa60:	cmp	r0, r7
   1fa64:	ble	1faa0 <__assert_fail@plt+0xddf4>
   1fa68:	cmp	r8, #1
   1fa6c:	blt	1fad0 <__assert_fail@plt+0xde24>
   1fa70:	mov	r0, r8
   1fa74:	add	r1, ip, r8, lsl #2
   1fa78:	add	r0, r8, #1
   1fa7c:	mov	r2, r1
   1fa80:	ldr	r3, [r2, #-4]!
   1fa84:	sub	r0, r0, #1
   1fa88:	cmp	r0, #1
   1fa8c:	str	r3, [r1]
   1fa90:	mov	r1, r2
   1fa94:	bgt	1fa80 <__assert_fail@plt+0xddd4>
   1fa98:	sub	r2, r0, #1
   1fa9c:	b	1fad0 <__assert_fail@plt+0xde24>
   1faa0:	add	r0, ip, r8, lsl #2
   1faa4:	ldr	r1, [r0, #-4]
   1faa8:	cmp	r1, r7
   1faac:	ble	1fad0 <__assert_fail@plt+0xde24>
   1fab0:	sub	r2, r8, #2
   1fab4:	str	r1, [r0]
   1fab8:	sub	r2, r2, #1
   1fabc:	ldr	r1, [r0, #-8]
   1fac0:	sub	r0, r0, #4
   1fac4:	cmp	r1, r7
   1fac8:	bgt	1fab4 <__assert_fail@plt+0xde08>
   1facc:	add	r2, r2, #2
   1fad0:	mov	r5, r8
   1fad4:	ldr	sl, [sp, #92]	; 0x5c
   1fad8:	ldr	r4, [sp, #88]	; 0x58
   1fadc:	mov	lr, #1
   1fae0:	str	r7, [ip, r2, lsl #2]
   1fae4:	add	r5, r8, #1
   1fae8:	ldr	r8, [sp, #96]	; 0x60
   1faec:	b	1f858 <__assert_fail@plt+0xdbac>
   1faf0:	mov	r6, #0
   1faf4:	b	1d39c <__assert_fail@plt+0xb6f0>
   1faf8:	mov	r9, #12
   1fafc:	b	1fccc <__assert_fail@plt+0xe020>
   1fb00:	ldr	r7, [sp, #80]	; 0x50
   1fb04:	mov	r4, #0
   1fb08:	b	1fd48 <__assert_fail@plt+0xe09c>
   1fb0c:	mov	r9, r0
   1fb10:	b	1fccc <__assert_fail@plt+0xe020>
   1fb14:	ldr	r4, [sp, #32]
   1fb18:	ldr	r6, [sp, #80]	; 0x50
   1fb1c:	ldr	r5, [sp, #76]	; 0x4c
   1fb20:	mov	r0, ip
   1fb24:	bl	1b22c <__assert_fail@plt+0x9580>
   1fb28:	ldr	r0, [fp, #-184]	; 0xffffff48
   1fb2c:	cmp	r0, r5
   1fb30:	beq	1fb38 <__assert_fail@plt+0xde8c>
   1fb34:	bl	1b22c <__assert_fail@plt+0x9580>
   1fb38:	mov	r0, #16
   1fb3c:	cmp	r6, #0
   1fb40:	str	r0, [fp, #-188]	; 0xffffff44
   1fb44:	mov	r0, #0
   1fb48:	str	r0, [fp, #-192]	; 0xffffff40
   1fb4c:	str	r5, [fp, #-184]	; 0xffffff48
   1fb50:	beq	1fba8 <__assert_fail@plt+0xdefc>
   1fb54:	ldr	r1, [r6]
   1fb58:	ldr	r0, [r6, #8]
   1fb5c:	cmp	r1, #1
   1fb60:	blt	1fba0 <__assert_fail@plt+0xdef4>
   1fb64:	mov	r4, #0
   1fb68:	mov	r5, #0
   1fb6c:	add	r0, r0, r4
   1fb70:	ldr	r0, [r0, #20]
   1fb74:	bl	1b22c <__assert_fail@plt+0x9580>
   1fb78:	ldr	r0, [r6, #8]
   1fb7c:	add	r0, r0, r4
   1fb80:	ldr	r0, [r0, #8]
   1fb84:	bl	1b22c <__assert_fail@plt+0x9580>
   1fb88:	ldr	r1, [r6]
   1fb8c:	ldr	r0, [r6, #8]
   1fb90:	add	r5, r5, #1
   1fb94:	add	r4, r4, #24
   1fb98:	cmp	r5, r1
   1fb9c:	blt	1fb6c <__assert_fail@plt+0xdec0>
   1fba0:	bl	1b22c <__assert_fail@plt+0x9580>
   1fba4:	ldr	r4, [sp, #32]
   1fba8:	ldr	r0, [fp, #20]
   1fbac:	ldrb	r1, [sp, #180]	; 0xb4
   1fbb0:	ldr	r2, [fp, #16]
   1fbb4:	add	r0, r0, #4
   1fbb8:	b	1fc00 <__assert_fail@plt+0xdf54>
   1fbbc:	ldr	r7, [sp, #132]	; 0x84
   1fbc0:	ldr	r6, [sp, #24]
   1fbc4:	ldr	ip, [sp, #116]	; 0x74
   1fbc8:	cmp	r3, r7
   1fbcc:	mov	r5, r6
   1fbd0:	addne	r5, ip, r3, lsl #2
   1fbd4:	ldr	r3, [r5]
   1fbd8:	str	r3, [r0, #-4]
   1fbdc:	ldr	r5, [r0]
   1fbe0:	cmp	r5, r7
   1fbe4:	addne	r6, ip, r5, lsl #2
   1fbe8:	ldr	r7, [r6]
   1fbec:	ldr	r6, [fp, #20]
   1fbf0:	add	r6, r6, r9, lsl #3
   1fbf4:	str	r7, [r0]
   1fbf8:	add	r6, r6, #4
   1fbfc:	b	1fc1c <__assert_fail@plt+0xdf70>
   1fc00:	ldr	r3, [r0, #-4]
   1fc04:	cmn	r3, #1
   1fc08:	beq	1fc30 <__assert_fail@plt+0xdf84>
   1fc0c:	cmp	r1, #0
   1fc10:	bne	1fbbc <__assert_fail@plt+0xdf10>
   1fc14:	ldr	r7, [r0]
   1fc18:	mov	r6, r0
   1fc1c:	ldr	r5, [fp, #-200]	; 0xffffff38
   1fc20:	add	r3, r3, r5
   1fc24:	str	r3, [r0, #-4]
   1fc28:	add	r3, r7, r5
   1fc2c:	str	r3, [r6]
   1fc30:	sub	r2, r2, #1
   1fc34:	add	r0, r0, #8
   1fc38:	add	r9, r9, #1
   1fc3c:	cmp	r4, r2
   1fc40:	bne	1fc00 <__assert_fail@plt+0xdf54>
   1fc44:	cmp	r4, #1
   1fc48:	blt	1fc60 <__assert_fail@plt+0xdfb4>
   1fc4c:	ldr	r0, [fp, #20]
   1fc50:	lsl	r2, r4, #3
   1fc54:	mov	r1, #255	; 0xff
   1fc58:	add	r0, r0, sl, lsl #3
   1fc5c:	bl	11b2c <memset@plt>
   1fc60:	ldr	r0, [r8, #132]	; 0x84
   1fc64:	mov	r9, #0
   1fc68:	cmp	r0, #0
   1fc6c:	beq	1fccc <__assert_fail@plt+0xe020>
   1fc70:	cmp	sl, #2
   1fc74:	bcc	1fccc <__assert_fail@plt+0xe020>
   1fc78:	ldr	r1, [fp, #16]
   1fc7c:	ldr	r2, [sp, #32]
   1fc80:	ldr	r6, [fp, #20]
   1fc84:	sub	r1, r1, #1
   1fc88:	sub	r1, r1, r2
   1fc8c:	mov	r2, #0
   1fc90:	ldr	r3, [r0, r2, lsl #2]
   1fc94:	cmp	r2, r3
   1fc98:	beq	1fcbc <__assert_fail@plt+0xe010>
   1fc9c:	add	r3, r6, r3, lsl #3
   1fca0:	add	r7, r6, r2, lsl #3
   1fca4:	ldr	r3, [r3, #8]
   1fca8:	str	r3, [r7, #8]
   1fcac:	ldr	r3, [r0, r2, lsl #2]
   1fcb0:	add	r3, r6, r3, lsl #3
   1fcb4:	ldr	r3, [r3, #12]
   1fcb8:	str	r3, [r7, #12]
   1fcbc:	add	r2, r2, #1
   1fcc0:	cmp	r1, r2
   1fcc4:	bne	1fc90 <__assert_fail@plt+0xdfe4>
   1fcc8:	mov	r9, #0
   1fccc:	ldr	r0, [sp, #204]	; 0xcc
   1fcd0:	bl	1b22c <__assert_fail@plt+0x9580>
   1fcd4:	ldr	r0, [sp, #96]	; 0x60
   1fcd8:	ldr	r0, [r0, #76]	; 0x4c
   1fcdc:	cmp	r0, #0
   1fce0:	beq	1fcfc <__assert_fail@plt+0xe050>
   1fce4:	add	r0, sp, #104	; 0x68
   1fce8:	bl	27078 <__assert_fail@plt+0x153cc>
   1fcec:	ldr	r0, [sp, #236]	; 0xec
   1fcf0:	bl	1b22c <__assert_fail@plt+0x9580>
   1fcf4:	ldr	r0, [sp, #220]	; 0xdc
   1fcf8:	bl	1b22c <__assert_fail@plt+0x9580>
   1fcfc:	ldr	r0, [sp, #112]	; 0x70
   1fd00:	bl	1b22c <__assert_fail@plt+0x9580>
   1fd04:	ldr	r0, [sp, #116]	; 0x74
   1fd08:	bl	1b22c <__assert_fail@plt+0x9580>
   1fd0c:	ldrb	r0, [sp, #179]	; 0xb3
   1fd10:	cmp	r0, #0
   1fd14:	beq	1fd20 <__assert_fail@plt+0xe074>
   1fd18:	ldr	r0, [sp, #108]	; 0x6c
   1fd1c:	bl	1b22c <__assert_fail@plt+0x9580>
   1fd20:	mov	r0, r9
   1fd24:	sub	sp, fp, #28
   1fd28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd2c:	mov	r0, r8
   1fd30:	bl	1b22c <__assert_fail@plt+0x9580>
   1fd34:	mov	r0, #0
   1fd38:	bl	1b22c <__assert_fail@plt+0x9580>
   1fd3c:	mov	r9, #12
   1fd40:	b	1fccc <__assert_fail@plt+0xe020>
   1fd44:	mov	r4, #1
   1fd48:	mov	r0, ip
   1fd4c:	bl	1b22c <__assert_fail@plt+0x9580>
   1fd50:	ldr	r0, [fp, #-184]	; 0xffffff48
   1fd54:	ldr	r1, [sp, #76]	; 0x4c
   1fd58:	cmp	r0, r1
   1fd5c:	beq	1fd64 <__assert_fail@plt+0xe0b8>
   1fd60:	bl	1b22c <__assert_fail@plt+0x9580>
   1fd64:	mov	r0, #16
   1fd68:	mov	r9, #1
   1fd6c:	cmp	r4, #0
   1fd70:	str	r0, [fp, #-188]	; 0xffffff44
   1fd74:	mov	r0, #0
   1fd78:	str	r0, [fp, #-192]	; 0xffffff40
   1fd7c:	ldr	r0, [sp, #76]	; 0x4c
   1fd80:	str	r0, [fp, #-184]	; 0xffffff48
   1fd84:	bne	1fccc <__assert_fail@plt+0xe020>
   1fd88:	ldr	r1, [r7]
   1fd8c:	ldr	r0, [r7, #8]
   1fd90:	cmp	r1, #1
   1fd94:	blt	1fdd4 <__assert_fail@plt+0xe128>
   1fd98:	mov	r5, #0
   1fd9c:	mov	r6, #0
   1fda0:	add	r0, r0, r5
   1fda4:	ldr	r0, [r0, #20]
   1fda8:	bl	1b22c <__assert_fail@plt+0x9580>
   1fdac:	ldr	r0, [r7, #8]
   1fdb0:	add	r0, r0, r5
   1fdb4:	ldr	r0, [r0, #8]
   1fdb8:	bl	1b22c <__assert_fail@plt+0x9580>
   1fdbc:	ldr	r1, [r7]
   1fdc0:	ldr	r0, [r7, #8]
   1fdc4:	add	r6, r6, #1
   1fdc8:	add	r5, r5, #24
   1fdcc:	cmp	r6, r1
   1fdd0:	blt	1fda0 <__assert_fail@plt+0xe0f4>
   1fdd4:	bl	1b22c <__assert_fail@plt+0x9580>
   1fdd8:	b	1fccc <__assert_fail@plt+0xe020>
   1fddc:	ldr	ip, [sp, #64]	; 0x40
   1fde0:	mov	r0, ip
   1fde4:	bl	1b22c <__assert_fail@plt+0x9580>
   1fde8:	ldr	r0, [fp, #-184]	; 0xffffff48
   1fdec:	ldr	r4, [sp, #76]	; 0x4c
   1fdf0:	cmp	r0, r4
   1fdf4:	beq	1fdfc <__assert_fail@plt+0xe150>
   1fdf8:	bl	1b22c <__assert_fail@plt+0x9580>
   1fdfc:	mov	r0, #16
   1fe00:	mov	r9, #12
   1fe04:	str	r0, [fp, #-188]	; 0xffffff44
   1fe08:	mov	r0, #0
   1fe0c:	str	r0, [fp, #-192]	; 0xffffff40
   1fe10:	ldr	r0, [sp, #80]	; 0x50
   1fe14:	str	r4, [fp, #-184]	; 0xffffff48
   1fe18:	cmp	r0, #0
   1fe1c:	beq	1fccc <__assert_fail@plt+0xe020>
   1fe20:	ldr	r1, [r0]
   1fe24:	ldr	r0, [r0, #8]
   1fe28:	cmp	r1, #1
   1fe2c:	blt	1fdd4 <__assert_fail@plt+0xe128>
   1fe30:	ldr	r4, [sp, #80]	; 0x50
   1fe34:	mov	r5, #0
   1fe38:	mov	r6, #0
   1fe3c:	add	r0, r0, r5
   1fe40:	ldr	r0, [r0, #20]
   1fe44:	bl	1b22c <__assert_fail@plt+0x9580>
   1fe48:	ldr	r0, [r4, #8]
   1fe4c:	add	r0, r0, r5
   1fe50:	ldr	r0, [r0, #8]
   1fe54:	bl	1b22c <__assert_fail@plt+0x9580>
   1fe58:	ldr	r1, [r4]
   1fe5c:	ldr	r0, [r4, #8]
   1fe60:	add	r6, r6, #1
   1fe64:	add	r5, r5, #24
   1fe68:	cmp	r6, r1
   1fe6c:	blt	1fe3c <__assert_fail@plt+0xe190>
   1fe70:	b	1fdd4 <__assert_fail@plt+0xe128>
   1fe74:	mov	r9, #1
   1fe78:	b	1fccc <__assert_fail@plt+0xe020>
   1fe7c:	mov	ip, #0
   1fe80:	b	1fde0 <__assert_fail@plt+0xe134>
   1fe84:	ldr	ip, [sp, #64]	; 0x40
   1fe88:	mov	r0, #0
   1fe8c:	str	r0, [r5]
   1fe90:	str	r0, [r4]
   1fe94:	b	1fde0 <__assert_fail@plt+0xe134>
   1fe98:	push	{fp, lr}
   1fe9c:	mov	fp, sp
   1fea0:	sub	sp, sp, #16
   1fea4:	mov	ip, #1
   1fea8:	str	r2, [sp, #4]
   1feac:	str	ip, [sp, #12]
   1feb0:	mov	ip, #0
   1feb4:	str	ip, [sp]
   1feb8:	ldr	ip, [fp, #8]
   1febc:	str	ip, [sp, #8]
   1fec0:	bl	1fecc <__assert_fail@plt+0xe220>
   1fec4:	mov	sp, fp
   1fec8:	pop	{fp, pc}
   1fecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fed0:	add	fp, sp, #28
   1fed4:	sub	sp, sp, #44	; 0x2c
   1fed8:	mvn	r6, #0
   1fedc:	cmp	r3, #0
   1fee0:	blt	20048 <__assert_fail@plt+0xe39c>
   1fee4:	mov	r5, r3
   1fee8:	mov	r9, r2
   1feec:	cmp	r3, r2
   1fef0:	bgt	20048 <__assert_fail@plt+0xe39c>
   1fef4:	mov	r7, r0
   1fef8:	ldr	r0, [fp, #8]
   1fefc:	mov	r8, r9
   1ff00:	mov	sl, r1
   1ff04:	movw	r1, #0
   1ff08:	ldr	r6, [r7]
   1ff0c:	movt	r1, #0
   1ff10:	add	r0, r0, r5
   1ff14:	cmp	r0, r9
   1ff18:	bicle	r8, r0, r0, asr #31
   1ff1c:	movw	r0, #0
   1ff20:	movt	r0, #0
   1ff24:	orrs	r4, r1, r0
   1ff28:	beq	1ff34 <__assert_fail@plt+0xe288>
   1ff2c:	add	r0, r6, #136	; 0x88
   1ff30:	bl	118bc <pthread_mutex_lock@plt>
   1ff34:	ldrb	r0, [r7, #28]
   1ff38:	str	r6, [sp, #24]
   1ff3c:	ldr	r6, [fp, #16]
   1ff40:	cmp	r8, r5
   1ff44:	ubfx	r1, r0, #5, #2
   1ff48:	str	r4, [sp, #36]	; 0x24
   1ff4c:	str	sl, [sp, #32]
   1ff50:	str	r1, [sp, #28]
   1ff54:	ble	1ff78 <__assert_fail@plt+0xe2cc>
   1ff58:	tst	r0, #8
   1ff5c:	bne	1ff78 <__assert_fail@plt+0xe2cc>
   1ff60:	ldr	r1, [r7, #16]
   1ff64:	cmp	r1, #0
   1ff68:	beq	1ff78 <__assert_fail@plt+0xe2cc>
   1ff6c:	mov	r0, r7
   1ff70:	bl	1c964 <__assert_fail@plt+0xacb8>
   1ff74:	ldrb	r0, [r7, #28]
   1ff78:	mov	sl, #1
   1ff7c:	mov	r4, #0
   1ff80:	cmp	r6, #0
   1ff84:	str	r7, [fp, #-32]	; 0xffffffe0
   1ff88:	beq	1ffd4 <__assert_fail@plt+0xe328>
   1ff8c:	ands	r1, r0, #16
   1ff90:	bne	1ffd4 <__assert_fail@plt+0xe328>
   1ff94:	and	r0, r0, #6
   1ff98:	cmp	r0, #4
   1ff9c:	bne	1ffc4 <__assert_fail@plt+0xe318>
   1ffa0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ffa4:	ldr	sl, [r6]
   1ffa8:	ldr	r0, [r0, #24]
   1ffac:	cmp	sl, r0
   1ffb0:	bhi	1ffcc <__assert_fail@plt+0xe320>
   1ffb4:	cmp	sl, #1
   1ffb8:	movwlt	r6, #0
   1ffbc:	movwlt	sl, #1
   1ffc0:	b	1ffd0 <__assert_fail@plt+0xe324>
   1ffc4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ffc8:	ldr	r0, [r0, #24]
   1ffcc:	add	sl, r0, #1
   1ffd0:	mov	r4, r6
   1ffd4:	lsl	r0, sl, #3
   1ffd8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   1ffdc:	cmp	r0, #0
   1ffe0:	beq	2025c <__assert_fail@plt+0xe5b0>
   1ffe4:	mov	r7, r0
   1ffe8:	ldr	r0, [fp, #12]
   1ffec:	str	r8, [sp]
   1fff0:	mov	r2, r9
   1fff4:	mov	r3, r5
   1fff8:	stmib	sp, {r0, sl}
   1fffc:	str	r7, [sp, #12]
   20000:	ldr	r0, [sp, #28]
   20004:	ldr	r1, [sp, #32]
   20008:	str	r0, [sp, #16]
   2000c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20010:	bl	1d2c8 <__assert_fail@plt+0xb61c>
   20014:	cmp	r0, #0
   20018:	beq	20054 <__assert_fail@plt+0xe3a8>
   2001c:	mvn	r6, #1
   20020:	cmp	r0, #1
   20024:	mvneq	r6, #0
   20028:	ldr	r4, [sp, #36]	; 0x24
   2002c:	mov	r0, r7
   20030:	bl	1b22c <__assert_fail@plt+0x9580>
   20034:	cmp	r4, #0
   20038:	beq	20048 <__assert_fail@plt+0xe39c>
   2003c:	ldr	r0, [sp, #24]
   20040:	add	r0, r0, #136	; 0x88
   20044:	bl	11808 <pthread_mutex_unlock@plt>
   20048:	mov	r0, r6
   2004c:	sub	sp, fp, #28
   20050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20054:	cmp	r4, #0
   20058:	str	r5, [sp, #32]
   2005c:	beq	20178 <__assert_fail@plt+0xe4cc>
   20060:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20064:	add	r9, sl, #1
   20068:	ldrb	r0, [r0, #28]
   2006c:	ubfx	r0, r0, #1, #2
   20070:	cmp	r0, #1
   20074:	beq	200d4 <__assert_fail@plt+0xe428>
   20078:	mov	ip, #2
   2007c:	cmp	r0, #0
   20080:	bne	200e4 <__assert_fail@plt+0xe438>
   20084:	mov	r5, r7
   20088:	lsl	r7, r9, #2
   2008c:	mov	r0, r7
   20090:	bl	1b2f8 <__assert_fail@plt+0x964c>
   20094:	mov	r6, #0
   20098:	cmp	r0, #0
   2009c:	str	r0, [r4, #4]
   200a0:	beq	20270 <__assert_fail@plt+0xe5c4>
   200a4:	mov	r0, r7
   200a8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   200ac:	cmp	r0, #0
   200b0:	str	r0, [r4, #8]
   200b4:	beq	202d0 <__assert_fail@plt+0xe624>
   200b8:	str	r9, [r4]
   200bc:	mov	ip, #1
   200c0:	mov	r7, r5
   200c4:	cmp	sl, #1
   200c8:	bge	200ec <__assert_fail@plt+0xe440>
   200cc:	mov	sl, #0
   200d0:	b	2012c <__assert_fail@plt+0xe480>
   200d4:	ldr	r0, [r4]
   200d8:	mov	ip, #1
   200dc:	cmp	r9, r0
   200e0:	bhi	20278 <__assert_fail@plt+0xe5cc>
   200e4:	cmp	sl, #1
   200e8:	blt	200cc <__assert_fail@plt+0xe420>
   200ec:	mov	r8, r7
   200f0:	ldmib	r4, {r6, r7}
   200f4:	mov	r2, #0
   200f8:	cmp	sl, #3
   200fc:	bhi	201a4 <__assert_fail@plt+0xe4f8>
   20100:	add	r0, r8, r2, lsl #3
   20104:	add	r0, r0, #4
   20108:	ldr	r1, [r0, #-4]
   2010c:	str	r1, [r6, r2, lsl #2]
   20110:	ldr	r1, [r0]
   20114:	add	r0, r0, #8
   20118:	str	r1, [r7, r2, lsl #2]
   2011c:	add	r2, r2, #1
   20120:	cmp	sl, r2
   20124:	bne	20108 <__assert_fail@plt+0xe45c>
   20128:	mov	r7, r8
   2012c:	ldr	r0, [r4]
   20130:	cmp	sl, r0
   20134:	bcs	20158 <__assert_fail@plt+0xe4ac>
   20138:	ldmib	r4, {r0, r1}
   2013c:	mvn	r2, #0
   20140:	str	r2, [r1, sl, lsl #2]
   20144:	str	r2, [r0, sl, lsl #2]
   20148:	add	sl, sl, #1
   2014c:	ldr	r3, [r4]
   20150:	cmp	sl, r3
   20154:	bcc	20140 <__assert_fail@plt+0xe494>
   20158:	mov	r6, ip
   2015c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   20160:	cmp	r6, #0
   20164:	ldrb	r0, [r1, #28]
   20168:	and	r0, r0, #249	; 0xf9
   2016c:	orr	r0, r0, r6, lsl #1
   20170:	strb	r0, [r1, #28]
   20174:	beq	2019c <__assert_fail@plt+0xe4f0>
   20178:	ldr	r0, [fp, #20]
   2017c:	cmp	r0, #0
   20180:	beq	20194 <__assert_fail@plt+0xe4e8>
   20184:	ldr	r0, [r7, #4]
   20188:	ldr	r1, [sp, #32]
   2018c:	sub	r6, r0, r1
   20190:	b	20028 <__assert_fail@plt+0xe37c>
   20194:	ldr	r6, [r7]
   20198:	b	20028 <__assert_fail@plt+0xe37c>
   2019c:	mvn	r6, #1
   201a0:	b	20028 <__assert_fail@plt+0xe37c>
   201a4:	str	ip, [sp, #28]
   201a8:	add	ip, r7, sl, lsl #2
   201ac:	mov	lr, #0
   201b0:	add	r5, r8, sl, lsl #3
   201b4:	mov	r9, #0
   201b8:	add	r3, r6, sl, lsl #2
   201bc:	mov	r1, #0
   201c0:	mov	r0, r8
   201c4:	mov	r2, #0
   201c8:	cmp	r8, ip
   201cc:	mov	r0, #0
   201d0:	movwcc	lr, #1
   201d4:	cmp	r5, r7
   201d8:	movwhi	r9, #1
   201dc:	cmp	r8, r3
   201e0:	movwcc	r1, #1
   201e4:	cmp	r5, r6
   201e8:	mov	r5, #0
   201ec:	movwhi	r5, #1
   201f0:	cmp	r7, r3
   201f4:	mov	r3, #0
   201f8:	movwcc	r3, #1
   201fc:	cmp	r6, ip
   20200:	movwcc	r0, #1
   20204:	tst	r0, r3
   20208:	bne	20254 <__assert_fail@plt+0xe5a8>
   2020c:	ands	r0, r5, r1
   20210:	bne	20254 <__assert_fail@plt+0xe5a8>
   20214:	ldr	ip, [sp, #28]
   20218:	ands	r0, r9, lr
   2021c:	bne	20100 <__assert_fail@plt+0xe454>
   20220:	bic	r2, sl, #3
   20224:	mov	r1, r7
   20228:	mov	r0, r6
   2022c:	mov	r5, r8
   20230:	mov	r3, r2
   20234:	vld2.32	{d16-d19}, [r5]!
   20238:	subs	r3, r3, #4
   2023c:	vst1.32	{d16-d17}, [r0]!
   20240:	vst1.32	{d18-d19}, [r1]!
   20244:	bne	20234 <__assert_fail@plt+0xe588>
   20248:	cmp	sl, r2
   2024c:	bne	20100 <__assert_fail@plt+0xe454>
   20250:	b	20128 <__assert_fail@plt+0xe47c>
   20254:	ldr	ip, [sp, #28]
   20258:	b	20100 <__assert_fail@plt+0xe454>
   2025c:	ldr	r4, [sp, #36]	; 0x24
   20260:	mvn	r6, #1
   20264:	cmp	r4, #0
   20268:	bne	2003c <__assert_fail@plt+0xe390>
   2026c:	b	20048 <__assert_fail@plt+0xe39c>
   20270:	mov	r7, r5
   20274:	b	2015c <__assert_fail@plt+0xe4b0>
   20278:	ldr	r0, [r4, #4]
   2027c:	mov	r8, r7
   20280:	lsl	r7, r9, #2
   20284:	mov	r1, r7
   20288:	bl	1b388 <__assert_fail@plt+0x96dc>
   2028c:	mov	r6, #0
   20290:	cmp	r0, #0
   20294:	beq	202e0 <__assert_fail@plt+0xe634>
   20298:	mov	r5, r0
   2029c:	ldr	r0, [r4, #8]
   202a0:	mov	r1, r7
   202a4:	bl	1b388 <__assert_fail@plt+0x96dc>
   202a8:	cmp	r0, #0
   202ac:	beq	202e8 <__assert_fail@plt+0xe63c>
   202b0:	mov	r7, r8
   202b4:	mov	ip, #1
   202b8:	str	r9, [r4]
   202bc:	str	r5, [r4, #4]
   202c0:	str	r0, [r4, #8]
   202c4:	cmp	sl, #1
   202c8:	bge	200ec <__assert_fail@plt+0xe440>
   202cc:	b	200cc <__assert_fail@plt+0xe420>
   202d0:	ldr	r0, [r4, #4]
   202d4:	bl	1b22c <__assert_fail@plt+0x9580>
   202d8:	mov	r7, r5
   202dc:	b	2015c <__assert_fail@plt+0xe4b0>
   202e0:	mov	r7, r8
   202e4:	b	2015c <__assert_fail@plt+0xe4b0>
   202e8:	mov	r0, r5
   202ec:	bl	1b22c <__assert_fail@plt+0x9580>
   202f0:	mov	r7, r8
   202f4:	b	2015c <__assert_fail@plt+0xe4b0>
   202f8:	push	{fp, lr}
   202fc:	mov	fp, sp
   20300:	sub	sp, sp, #16
   20304:	mov	ip, #0
   20308:	str	r2, [sp, #4]
   2030c:	str	ip, [sp, #12]
   20310:	ldr	ip, [fp, #12]
   20314:	str	ip, [sp, #8]
   20318:	ldr	ip, [fp, #8]
   2031c:	str	ip, [sp]
   20320:	bl	1fecc <__assert_fail@plt+0xe220>
   20324:	mov	sp, fp
   20328:	pop	{fp, pc}
   2032c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20330:	add	fp, sp, #28
   20334:	sub	sp, sp, #20
   20338:	ldr	r4, [fp, #8]
   2033c:	mov	r8, r1
   20340:	mov	r1, r0
   20344:	mov	r6, r2
   20348:	orr	r0, r4, r2
   2034c:	ldr	r2, [fp, #20]
   20350:	orr	r0, r0, r2
   20354:	cmp	r0, #0
   20358:	blt	20418 <__assert_fail@plt+0xe76c>
   2035c:	adds	sl, r6, r4
   20360:	bvs	20418 <__assert_fail@plt+0xe76c>
   20364:	mov	r5, #0
   20368:	cmp	r4, #1
   2036c:	blt	203c4 <__assert_fail@plt+0xe718>
   20370:	mov	r9, r3
   20374:	cmp	r6, #1
   20378:	blt	203cc <__assert_fail@plt+0xe720>
   2037c:	mov	r0, sl
   20380:	mov	r5, r1
   20384:	bl	1b2f8 <__assert_fail@plt+0x964c>
   20388:	cmp	r0, #0
   2038c:	beq	20418 <__assert_fail@plt+0xe76c>
   20390:	mov	r1, r8
   20394:	mov	r2, r6
   20398:	mov	r7, r0
   2039c:	bl	118ec <memcpy@plt>
   203a0:	add	r0, r7, r6
   203a4:	mov	r1, r9
   203a8:	mov	r2, r4
   203ac:	bl	118ec <memcpy@plt>
   203b0:	ldr	r2, [fp, #20]
   203b4:	mov	r1, r5
   203b8:	mov	r4, r7
   203bc:	mov	r5, #0
   203c0:	b	203d4 <__assert_fail@plt+0xe728>
   203c4:	mov	r7, r8
   203c8:	b	203d0 <__assert_fail@plt+0xe724>
   203cc:	mov	r7, r9
   203d0:	mov	r4, #0
   203d4:	ldr	r0, [fp, #16]
   203d8:	ldr	r3, [fp, #12]
   203dc:	mov	r6, #1
   203e0:	str	r2, [sp, #4]
   203e4:	mov	r2, sl
   203e8:	str	r5, [sp]
   203ec:	str	r6, [sp, #12]
   203f0:	str	r0, [sp, #8]
   203f4:	mov	r0, r1
   203f8:	mov	r1, r7
   203fc:	bl	1fecc <__assert_fail@plt+0xe220>
   20400:	mov	r5, r0
   20404:	mov	r0, r4
   20408:	bl	1b22c <__assert_fail@plt+0x9580>
   2040c:	mov	r0, r5
   20410:	sub	sp, fp, #28
   20414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20418:	mvn	r0, #1
   2041c:	sub	sp, fp, #28
   20420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20428:	add	fp, sp, #28
   2042c:	sub	sp, sp, #20
   20430:	ldr	r4, [fp, #8]
   20434:	mov	r8, r1
   20438:	mov	r1, r0
   2043c:	mov	r6, r2
   20440:	orr	r0, r4, r2
   20444:	ldr	r2, [fp, #24]
   20448:	orr	r0, r0, r2
   2044c:	cmp	r0, #0
   20450:	blt	20510 <__assert_fail@plt+0xe864>
   20454:	adds	sl, r6, r4
   20458:	bvs	20510 <__assert_fail@plt+0xe864>
   2045c:	mov	r5, #0
   20460:	cmp	r4, #1
   20464:	blt	204bc <__assert_fail@plt+0xe810>
   20468:	mov	r9, r3
   2046c:	cmp	r6, #1
   20470:	blt	204c4 <__assert_fail@plt+0xe818>
   20474:	mov	r0, sl
   20478:	mov	r5, r1
   2047c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   20480:	cmp	r0, #0
   20484:	beq	20510 <__assert_fail@plt+0xe864>
   20488:	mov	r1, r8
   2048c:	mov	r2, r6
   20490:	mov	r7, r0
   20494:	bl	118ec <memcpy@plt>
   20498:	add	r0, r7, r6
   2049c:	mov	r1, r9
   204a0:	mov	r2, r4
   204a4:	bl	118ec <memcpy@plt>
   204a8:	ldr	r2, [fp, #24]
   204ac:	mov	r1, r5
   204b0:	mov	r4, r7
   204b4:	mov	r5, #0
   204b8:	b	204cc <__assert_fail@plt+0xe820>
   204bc:	mov	r7, r8
   204c0:	b	204c8 <__assert_fail@plt+0xe81c>
   204c4:	mov	r7, r9
   204c8:	mov	r4, #0
   204cc:	ldr	r0, [fp, #20]
   204d0:	ldr	r6, [fp, #16]
   204d4:	ldr	r3, [fp, #12]
   204d8:	str	r2, [sp, #4]
   204dc:	mov	r2, sl
   204e0:	str	r5, [sp, #12]
   204e4:	str	r0, [sp, #8]
   204e8:	mov	r0, r1
   204ec:	mov	r1, r7
   204f0:	str	r6, [sp]
   204f4:	bl	1fecc <__assert_fail@plt+0xe220>
   204f8:	mov	r5, r0
   204fc:	mov	r0, r4
   20500:	bl	1b22c <__assert_fail@plt+0x9580>
   20504:	mov	r0, r5
   20508:	sub	sp, fp, #28
   2050c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20510:	mvn	r0, #1
   20514:	sub	sp, fp, #28
   20518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2051c:	ldrb	ip, [r0, #28]
   20520:	cmp	r2, #0
   20524:	bic	ip, ip, #6
   20528:	orrne	ip, ip, #2
   2052c:	strb	ip, [r0, #28]
   20530:	ldr	r0, [sp]
   20534:	moveq	r0, r2
   20538:	cmp	r2, #0
   2053c:	moveq	r3, r2
   20540:	stm	r1, {r2, r3}
   20544:	str	r0, [r1, #8]
   20548:	bx	lr
   2054c:	push	{r4, sl, fp, lr}
   20550:	add	fp, sp, #8
   20554:	mov	r4, r0
   20558:	ldr	r0, [r0, #24]
   2055c:	bl	1b22c <__assert_fail@plt+0x9580>
   20560:	ldr	r0, [r4, #36]	; 0x24
   20564:	bl	1b22c <__assert_fail@plt+0x9580>
   20568:	ldr	r0, [r4, #40]	; 0x28
   2056c:	add	r1, r4, #4
   20570:	cmp	r0, r1
   20574:	beq	20588 <__assert_fail@plt+0xe8dc>
   20578:	ldr	r0, [r0, #8]
   2057c:	bl	1b22c <__assert_fail@plt+0x9580>
   20580:	ldr	r0, [r4, #40]	; 0x28
   20584:	bl	1b22c <__assert_fail@plt+0x9580>
   20588:	ldr	r0, [r4, #12]
   2058c:	bl	1b22c <__assert_fail@plt+0x9580>
   20590:	ldr	r0, [r4, #48]	; 0x30
   20594:	bl	1b22c <__assert_fail@plt+0x9580>
   20598:	ldr	r0, [r4, #44]	; 0x2c
   2059c:	bl	1b22c <__assert_fail@plt+0x9580>
   205a0:	mov	r0, r4
   205a4:	pop	{r4, sl, fp, lr}
   205a8:	b	1b22c <__assert_fail@plt+0x9580>
   205ac:	nop	{0}
   205b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205b4:	add	fp, sp, #28
   205b8:	sub	sp, sp, #92	; 0x5c
   205bc:	mov	r9, r0
   205c0:	ldrb	r0, [r0, #74]	; 0x4a
   205c4:	ldr	r2, [r9, #36]	; 0x24
   205c8:	ldr	r1, [r9, #48]	; 0x30
   205cc:	ldr	r4, [r9, #28]
   205d0:	cmp	r2, r1
   205d4:	movgt	r2, r1
   205d8:	cmp	r0, #0
   205dc:	str	r2, [sp]
   205e0:	bne	20600 <__assert_fail@plt+0xe954>
   205e4:	mov	r7, r9
   205e8:	ldr	r0, [r7, #64]!	; 0x40
   205ec:	cmp	r0, #0
   205f0:	bne	20600 <__assert_fail@plt+0xe954>
   205f4:	ldrb	r0, [r9, #76]	; 0x4c
   205f8:	cmp	r0, #0
   205fc:	beq	20608 <__assert_fail@plt+0xe95c>
   20600:	ldr	r6, [r9, #32]
   20604:	b	207e4 <__assert_fail@plt+0xeb38>
   20608:	ldr	r0, [sp]
   2060c:	cmp	r0, r4
   20610:	ble	20620 <__assert_fail@plt+0xe974>
   20614:	add	r8, r9, #16
   20618:	mov	sl, r4
   2061c:	b	20678 <__assert_fail@plt+0xe9cc>
   20620:	mov	sl, r4
   20624:	str	r4, [sp, #4]
   20628:	b	208f4 <__assert_fail@plt+0xec48>
   2062c:	add	r0, r4, #1
   20630:	cmp	r0, #2
   20634:	bcc	20648 <__assert_fail@plt+0xe99c>
   20638:	ldr	r0, [r9, #36]	; 0x24
   2063c:	ldr	r1, [r9, #48]	; 0x30
   20640:	cmp	r0, r1
   20644:	blt	207d0 <__assert_fail@plt+0xeb24>
   20648:	ldr	r0, [r9, #4]
   2064c:	ldr	r1, [sp, #4]
   20650:	cmn	r4, #1
   20654:	strb	sl, [r0, r1]
   20658:	ldr	r0, [r9, #8]
   2065c:	str	sl, [r0, r1, lsl #2]
   20660:	add	sl, r1, #1
   20664:	bne	207b0 <__assert_fail@plt+0xeb04>
   20668:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2066c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20670:	stm	r8, {r0, r1}
   20674:	b	207b0 <__assert_fail@plt+0xeb04>
   20678:	ldr	r5, [r9, #24]
   2067c:	ldr	r4, [r9]
   20680:	str	sl, [sp, #4]
   20684:	add	r0, r5, sl
   20688:	ldrb	sl, [r4, r0]
   2068c:	tst	sl, #128	; 0x80
   20690:	bne	206d8 <__assert_fail@plt+0xea2c>
   20694:	mov	r0, r8
   20698:	bl	1191c <mbsinit@plt>
   2069c:	cmp	r0, #0
   206a0:	beq	206d8 <__assert_fail@plt+0xea2c>
   206a4:	mov	r0, sl
   206a8:	bl	11c4c <towupper@plt>
   206ac:	cmp	r0, #128	; 0x80
   206b0:	bcs	206d0 <__assert_fail@plt+0xea24>
   206b4:	ldr	r2, [sp, #4]
   206b8:	ldr	r1, [r9, #4]
   206bc:	strb	r0, [r1, r2]
   206c0:	add	sl, r2, #1
   206c4:	ldr	r1, [r9, #8]
   206c8:	str	r0, [r1, r2, lsl #2]
   206cc:	b	207b0 <__assert_fail@plt+0xeb04>
   206d0:	ldr	r4, [r9]
   206d4:	ldr	r5, [r9, #24]
   206d8:	ldm	r8, {r0, r1}
   206dc:	mov	r3, r8
   206e0:	str	r1, [fp, #-36]	; 0xffffffdc
   206e4:	str	r0, [fp, #-40]	; 0xffffffd8
   206e8:	ldm	sp, {r0, r1}
   206ec:	sub	r2, r0, r1
   206f0:	add	r0, r4, r5
   206f4:	add	r1, r0, r1
   206f8:	add	r0, sp, #12
   206fc:	bl	1b328 <__assert_fail@plt+0x967c>
   20700:	mov	r4, r0
   20704:	sub	r0, r0, #1
   20708:	cmn	r0, #4
   2070c:	bhi	2062c <__assert_fail@plt+0xe980>
   20710:	ldr	r0, [sp, #12]
   20714:	bl	11c4c <towupper@plt>
   20718:	mov	r5, r0
   2071c:	ldr	r0, [sp, #12]
   20720:	cmp	r5, r0
   20724:	bne	20748 <__assert_fail@plt+0xea9c>
   20728:	ldr	r1, [r9]
   2072c:	ldr	r2, [r9, #24]
   20730:	ldr	r0, [r9, #4]
   20734:	ldr	r6, [sp, #4]
   20738:	add	r1, r1, r2
   2073c:	add	r0, r0, r6
   20740:	add	r1, r1, r6
   20744:	b	20774 <__assert_fail@plt+0xeac8>
   20748:	add	sl, sp, #16
   2074c:	mov	r1, r5
   20750:	sub	r2, fp, #40	; 0x28
   20754:	mov	r0, sl
   20758:	bl	11844 <wcrtomb@plt>
   2075c:	cmp	r4, r0
   20760:	bne	207c4 <__assert_fail@plt+0xeb18>
   20764:	ldr	r0, [r9, #4]
   20768:	ldr	r6, [sp, #4]
   2076c:	mov	r1, sl
   20770:	add	r0, r0, r6
   20774:	mov	r2, r4
   20778:	bl	118ec <memcpy@plt>
   2077c:	ldr	r0, [r9, #8]
   20780:	add	sl, r6, #1
   20784:	str	r5, [r0, r6, lsl #2]
   20788:	add	r5, r4, r6
   2078c:	cmp	sl, r5
   20790:	bge	207b0 <__assert_fail@plt+0xeb04>
   20794:	add	r0, r0, r6, lsl #2
   20798:	mvn	r1, #3
   2079c:	add	r2, r1, r4, lsl #2
   207a0:	add	r0, r0, #4
   207a4:	mov	r1, #255	; 0xff
   207a8:	bl	11b2c <memset@plt>
   207ac:	mov	sl, r5
   207b0:	ldr	r0, [sp]
   207b4:	str	sl, [sp, #4]
   207b8:	cmp	r0, sl
   207bc:	bgt	20678 <__assert_fail@plt+0xe9cc>
   207c0:	b	208f4 <__assert_fail@plt+0xec48>
   207c4:	ldr	r6, [sp, #4]
   207c8:	mov	sl, r6
   207cc:	b	207fc <__assert_fail@plt+0xeb50>
   207d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   207d4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   207d8:	stm	r8, {r0, r1}
   207dc:	ldr	sl, [sp, #4]
   207e0:	b	208f4 <__assert_fail@plt+0xec48>
   207e4:	ldr	r0, [sp]
   207e8:	cmp	r4, r0
   207ec:	bge	208ec <__assert_fail@plt+0xec40>
   207f0:	add	r7, r9, #64	; 0x40
   207f4:	add	r8, r9, #16
   207f8:	mov	sl, r4
   207fc:	ldm	r8, {r0, r1}
   20800:	str	r6, [sp, #4]
   20804:	str	r0, [fp, #-40]	; 0xffffffd8
   20808:	ldr	r0, [sp]
   2080c:	str	r1, [fp, #-36]	; 0xffffffdc
   20810:	sub	r2, r0, sl
   20814:	ldr	r0, [r7]
   20818:	cmp	r0, #0
   2081c:	bne	2090c <__assert_fail@plt+0xec60>
   20820:	ldr	r0, [r9]
   20824:	ldr	r1, [r9, #24]
   20828:	add	r0, r0, r1
   2082c:	add	r4, r0, r6
   20830:	add	r0, sp, #8
   20834:	mov	r1, r4
   20838:	mov	r3, r8
   2083c:	bl	1b328 <__assert_fail@plt+0x967c>
   20840:	sub	r6, r0, #1
   20844:	mov	r5, r0
   20848:	cmn	r6, #4
   2084c:	bhi	2095c <__assert_fail@plt+0xecb0>
   20850:	ldr	r0, [sp, #8]
   20854:	bl	11c4c <towupper@plt>
   20858:	mov	r7, r0
   2085c:	ldr	r0, [sp, #8]
   20860:	cmp	r7, r0
   20864:	bne	20874 <__assert_fail@plt+0xebc8>
   20868:	ldr	r0, [r9, #4]
   2086c:	mov	r1, r4
   20870:	b	20894 <__assert_fail@plt+0xebe8>
   20874:	add	r0, sp, #16
   20878:	sub	r2, fp, #40	; 0x28
   2087c:	mov	r1, r7
   20880:	bl	11844 <wcrtomb@plt>
   20884:	cmp	r0, r5
   20888:	bne	209d8 <__assert_fail@plt+0xed2c>
   2088c:	ldr	r0, [r9, #4]
   20890:	add	r1, sp, #16
   20894:	add	r0, r0, sl
   20898:	mov	r2, r5
   2089c:	bl	118ec <memcpy@plt>
   208a0:	ldrb	r0, [r9, #76]	; 0x4c
   208a4:	ldr	r6, [sp, #4]
   208a8:	cmp	r0, #0
   208ac:	bne	20a6c <__assert_fail@plt+0xedc0>
   208b0:	ldr	r0, [r9, #8]
   208b4:	add	r4, r5, sl
   208b8:	add	r1, sl, #1
   208bc:	add	r6, r5, r6
   208c0:	cmp	r1, r4
   208c4:	str	r7, [r0, sl, lsl #2]
   208c8:	bge	208e4 <__assert_fail@plt+0xec38>
   208cc:	add	r0, r0, r1, lsl #2
   208d0:	mvn	r1, #3
   208d4:	add	r2, r1, r5, lsl #2
   208d8:	mov	r1, #255	; 0xff
   208dc:	bl	11b2c <memset@plt>
   208e0:	b	207e4 <__assert_fail@plt+0xeb38>
   208e4:	mov	r4, r1
   208e8:	b	207e4 <__assert_fail@plt+0xeb38>
   208ec:	str	r6, [sp, #4]
   208f0:	mov	sl, r4
   208f4:	ldr	r0, [sp, #4]
   208f8:	str	sl, [r9, #28]
   208fc:	str	r0, [r9, #32]
   20900:	mov	r0, #0
   20904:	sub	sp, fp, #28
   20908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2090c:	cmp	r2, #1
   20910:	add	r4, sp, #16
   20914:	ldrge	r1, [r9, #80]	; 0x50
   20918:	cmpge	r1, #1
   2091c:	blt	20830 <__assert_fail@plt+0xeb84>
   20920:	ldr	r7, [r9, #24]
   20924:	ldr	r3, [r9]
   20928:	add	r4, sp, #16
   2092c:	add	r7, r6, r7
   20930:	add	r3, r3, r7
   20934:	mov	r7, #0
   20938:	ldrb	r5, [r3, r7]
   2093c:	ldrb	r5, [r0, r5]
   20940:	strb	r5, [r4, r7]
   20944:	add	r7, r7, #1
   20948:	cmp	r7, r2
   2094c:	bge	20830 <__assert_fail@plt+0xeb84>
   20950:	cmp	r7, r1
   20954:	blt	20938 <__assert_fail@plt+0xec8c>
   20958:	b	20830 <__assert_fail@plt+0xeb84>
   2095c:	add	r0, r5, #1
   20960:	cmp	r0, #2
   20964:	bcc	20978 <__assert_fail@plt+0xeccc>
   20968:	ldr	r0, [r9, #36]	; 0x24
   2096c:	ldr	r1, [r9, #48]	; 0x30
   20970:	cmp	r0, r1
   20974:	blt	20ad8 <__assert_fail@plt+0xee2c>
   20978:	ldr	r2, [r9, #24]
   2097c:	ldr	r6, [sp, #4]
   20980:	ldr	r0, [r9]
   20984:	ldr	r1, [r9, #64]	; 0x40
   20988:	add	r4, sl, #1
   2098c:	add	r2, r2, r6
   20990:	cmp	r1, #0
   20994:	ldrb	r0, [r0, r2]
   20998:	ldrbne	r0, [r1, r0]
   2099c:	ldr	r1, [r9, #4]
   209a0:	strb	r0, [r1, sl]
   209a4:	ldrb	r1, [r9, #76]	; 0x4c
   209a8:	cmp	r1, #0
   209ac:	ldrne	r1, [r9, #12]
   209b0:	strne	r6, [r1, sl, lsl #2]
   209b4:	add	r6, r6, #1
   209b8:	cmn	r5, #1
   209bc:	ldr	r1, [r9, #8]
   209c0:	str	r0, [r1, sl, lsl #2]
   209c4:	bne	207e4 <__assert_fail@plt+0xeb38>
   209c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   209cc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   209d0:	stm	r8, {r0, r1}
   209d4:	b	207e4 <__assert_fail@plt+0xeb38>
   209d8:	mov	r3, r0
   209dc:	cmn	r0, #1
   209e0:	beq	20868 <__assert_fail@plt+0xebbc>
   209e4:	ldr	r1, [r9, #36]	; 0x24
   209e8:	add	r4, r3, sl
   209ec:	cmp	r4, r1
   209f0:	bhi	20ad8 <__assert_fail@plt+0xee2c>
   209f4:	ldr	r0, [r9, #12]
   209f8:	cmp	r0, #0
   209fc:	bne	20a1c <__assert_fail@plt+0xed70>
   20a00:	lsl	r0, r1, #2
   20a04:	mov	r8, r3
   20a08:	bl	1b2f8 <__assert_fail@plt+0x964c>
   20a0c:	mov	r3, r8
   20a10:	cmp	r0, #0
   20a14:	str	r0, [r9, #12]
   20a18:	beq	20ae8 <__assert_fail@plt+0xee3c>
   20a1c:	ldrb	r1, [r9, #76]	; 0x4c
   20a20:	cmp	r1, #0
   20a24:	bne	20b0c <__assert_fail@plt+0xee60>
   20a28:	cmp	sl, #0
   20a2c:	beq	20b04 <__assert_fail@plt+0xee58>
   20a30:	mov	r1, #0
   20a34:	cmp	sl, #4
   20a38:	bcc	20af4 <__assert_fail@plt+0xee48>
   20a3c:	add	r2, pc, #524	; 0x20c
   20a40:	bic	r1, sl, #3
   20a44:	vmov.i32	q8, #4	; 0x00000004
   20a48:	vld1.64	{d18-d19}, [r2 :128]
   20a4c:	mov	ip, r1
   20a50:	mov	r2, r0
   20a54:	vadd.i32	q10, q9, q8
   20a58:	vst1.32	{d18-d19}, [r2]!
   20a5c:	subs	ip, ip, #4
   20a60:	vorr	q9, q10, q10
   20a64:	bne	20a54 <__assert_fail@plt+0xeda8>
   20a68:	b	20afc <__assert_fail@plt+0xee50>
   20a6c:	ldr	r0, [r9, #12]
   20a70:	mov	r1, #0
   20a74:	cmp	r5, #4
   20a78:	bcc	20ab4 <__assert_fail@plt+0xee08>
   20a7c:	add	r3, pc, #460	; 0x1cc
   20a80:	bic	r1, r5, #3
   20a84:	add	r2, r0, sl, lsl #2
   20a88:	vdup.32	q8, r6
   20a8c:	vmov.i32	q10, #4	; 0x00000004
   20a90:	vld1.64	{d18-d19}, [r3 :128]
   20a94:	mov	r3, r1
   20a98:	vadd.i32	q11, q9, q8
   20a9c:	vadd.i32	q9, q9, q10
   20aa0:	subs	r3, r3, #4
   20aa4:	vst1.32	{d22-d23}, [r2]!
   20aa8:	bne	20a98 <__assert_fail@plt+0xedec>
   20aac:	cmp	r5, r1
   20ab0:	beq	208b0 <__assert_fail@plt+0xec04>
   20ab4:	add	r2, r6, r1
   20ab8:	sub	r3, r5, r1
   20abc:	add	r1, sl, r1
   20ac0:	add	r0, r0, r1, lsl #2
   20ac4:	str	r2, [r0], #4
   20ac8:	add	r2, r2, #1
   20acc:	subs	r3, r3, #1
   20ad0:	bne	20ac4 <__assert_fail@plt+0xee18>
   20ad4:	b	208b0 <__assert_fail@plt+0xec04>
   20ad8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   20adc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20ae0:	stm	r8, {r0, r1}
   20ae4:	b	208f4 <__assert_fail@plt+0xec48>
   20ae8:	mov	r0, #12
   20aec:	sub	sp, fp, #28
   20af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20af4:	str	r1, [r0, r1, lsl #2]
   20af8:	add	r1, r1, #1
   20afc:	cmp	sl, r1
   20b00:	bne	20af4 <__assert_fail@plt+0xee48>
   20b04:	mov	r0, #1
   20b08:	strb	r0, [r9, #76]	; 0x4c
   20b0c:	ldr	r0, [r9, #4]
   20b10:	add	r1, sp, #16
   20b14:	mov	r2, r3
   20b18:	mov	r8, r3
   20b1c:	add	r0, r0, sl
   20b20:	bl	118ec <memcpy@plt>
   20b24:	ldr	lr, [r9, #8]
   20b28:	ldr	ip, [sp, #4]
   20b2c:	cmp	r8, #2
   20b30:	str	r7, [lr, sl, lsl #2]
   20b34:	ldr	r2, [r9, #12]
   20b38:	str	ip, [r2, sl, lsl #2]
   20b3c:	bcc	20c10 <__assert_fail@plt+0xef64>
   20b40:	sub	r0, r8, #1
   20b44:	mov	r1, #1
   20b48:	cmp	r0, #4
   20b4c:	bcs	20b58 <__assert_fail@plt+0xeeac>
   20b50:	ldr	ip, [sp, #4]
   20b54:	b	20be0 <__assert_fail@plt+0xef34>
   20b58:	str	r0, [sp]
   20b5c:	add	r3, r8, sl
   20b60:	add	r0, sl, #1
   20b64:	add	r7, lr, r0, lsl #2
   20b68:	add	ip, lr, r3, lsl #2
   20b6c:	add	r0, r2, r0, lsl #2
   20b70:	cmp	r0, ip
   20b74:	ldr	ip, [sp, #4]
   20b78:	addcc	r3, r2, r3, lsl #2
   20b7c:	cmpcc	r7, r3
   20b80:	bcc	20be0 <__assert_fail@plt+0xef34>
   20b84:	add	r1, pc, #212	; 0xd4
   20b88:	vdup.32	q8, ip
   20b8c:	vdup.32	q9, r6
   20b90:	vdup.32	q10, r5
   20b94:	vmov.i32	q12, #4	; 0x00000004
   20b98:	vmov.i8	q13, #255	; 0xff
   20b9c:	vld1.64	{d22-d23}, [r1 :128]
   20ba0:	ldr	r1, [sp]
   20ba4:	bic	ip, r1, #3
   20ba8:	orr	r1, ip, #1
   20bac:	mov	r3, ip
   20bb0:	vcgt.u32	q14, q10, q11
   20bb4:	subs	r3, r3, #4
   20bb8:	vbsl	q14, q11, q9
   20bbc:	vadd.i32	q11, q11, q12
   20bc0:	vadd.i32	q14, q14, q8
   20bc4:	vst1.32	{d28-d29}, [r0]!
   20bc8:	vst1.32	{d26-d27}, [r7]!
   20bcc:	bne	20bb0 <__assert_fail@plt+0xef04>
   20bd0:	ldr	r0, [sp]
   20bd4:	cmp	r0, ip
   20bd8:	ldr	ip, [sp, #4]
   20bdc:	beq	20c10 <__assert_fail@plt+0xef64>
   20be0:	add	r2, r2, sl, lsl #2
   20be4:	add	r0, lr, sl, lsl #2
   20be8:	mvn	r3, #0
   20bec:	cmp	r1, r5
   20bf0:	mov	r7, r6
   20bf4:	movcc	r7, r1
   20bf8:	add	r7, r7, ip
   20bfc:	str	r7, [r2, r1, lsl #2]
   20c00:	str	r3, [r0, r1, lsl #2]
   20c04:	add	r1, r1, #1
   20c08:	cmp	r8, r1
   20c0c:	bne	20bec <__assert_fail@plt+0xef40>
   20c10:	ldr	r0, [r9, #48]	; 0x30
   20c14:	ldr	r2, [r9, #52]	; 0x34
   20c18:	sub	r1, r8, r5
   20c1c:	mov	r6, ip
   20c20:	add	r6, r5, r6
   20c24:	add	r0, r0, r1
   20c28:	cmp	r2, ip
   20c2c:	str	r0, [r9, #48]	; 0x30
   20c30:	ldrgt	r2, [r9, #56]	; 0x38
   20c34:	addgt	r1, r2, r1
   20c38:	strgt	r1, [r9, #56]	; 0x38
   20c3c:	ldr	r1, [r9, #36]	; 0x24
   20c40:	cmp	r1, r0
   20c44:	movgt	r1, r0
   20c48:	str	r1, [sp]
   20c4c:	b	207e4 <__assert_fail@plt+0xeb38>
   20c50:	andeq	r0, r0, r0
   20c54:	andeq	r0, r0, r1
   20c58:	andeq	r0, r0, r2
   20c5c:	andeq	r0, r0, r3
   20c60:	andeq	r0, r0, r1
   20c64:	andeq	r0, r0, r2
   20c68:	andeq	r0, r0, r3
   20c6c:	andeq	r0, r0, r4
   20c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c74:	add	fp, sp, #28
   20c78:	sub	sp, sp, #68	; 0x44
   20c7c:	mov	r4, r0
   20c80:	ldr	r6, [r0, #28]
   20c84:	ldr	r7, [r0, #36]	; 0x24
   20c88:	ldr	r0, [r0, #48]	; 0x30
   20c8c:	cmp	r7, r0
   20c90:	movgt	r7, r0
   20c94:	cmp	r7, r6
   20c98:	ble	20e38 <__assert_fail@plt+0xf18c>
   20c9c:	add	r8, r4, #16
   20ca0:	mov	r5, sp
   20ca4:	ldm	r8, {r9, sl}
   20ca8:	ldr	r0, [r4, #64]	; 0x40
   20cac:	sub	r2, r7, r6
   20cb0:	cmp	r0, #0
   20cb4:	bne	20d84 <__assert_fail@plt+0xf0d8>
   20cb8:	ldr	r0, [r4]
   20cbc:	ldr	r1, [r4, #24]
   20cc0:	add	r0, r0, r1
   20cc4:	add	r1, r0, r6
   20cc8:	mov	r0, r5
   20ccc:	mov	r3, r8
   20cd0:	bl	1b328 <__assert_fail@plt+0x967c>
   20cd4:	add	r1, r0, #1
   20cd8:	cmp	r1, #2
   20cdc:	bcc	20cf8 <__assert_fail@plt+0xf04c>
   20ce0:	cmn	r0, #2
   20ce4:	bne	20d34 <__assert_fail@plt+0xf088>
   20ce8:	ldr	r0, [r4, #36]	; 0x24
   20cec:	ldr	r1, [r4, #48]	; 0x30
   20cf0:	cmp	r0, r1
   20cf4:	blt	20e34 <__assert_fail@plt+0xf188>
   20cf8:	ldr	r1, [r4, #24]
   20cfc:	ldr	r0, [r4]
   20d00:	mov	r2, sl
   20d04:	mov	sl, r5
   20d08:	add	r1, r1, r6
   20d0c:	ldrb	r1, [r0, r1]
   20d10:	str	r1, [sp]
   20d14:	ldr	r0, [r4, #64]	; 0x40
   20d18:	cmp	r0, #0
   20d1c:	ldrbne	r1, [r0, r1]
   20d20:	mov	r0, #1
   20d24:	strne	r1, [sp]
   20d28:	str	r9, [r8]
   20d2c:	str	r2, [r8, #4]
   20d30:	b	20d3c <__assert_fail@plt+0xf090>
   20d34:	ldr	r1, [sp]
   20d38:	mov	sl, r5
   20d3c:	ldr	r3, [r4, #8]
   20d40:	add	r5, r0, r6
   20d44:	str	r1, [r3, r6, lsl #2]
   20d48:	add	r1, r6, #1
   20d4c:	cmp	r1, r5
   20d50:	bge	20d70 <__assert_fail@plt+0xf0c4>
   20d54:	mvn	r1, #3
   20d58:	add	r2, r1, r0, lsl #2
   20d5c:	add	r0, r3, r6, lsl #2
   20d60:	mov	r1, #255	; 0xff
   20d64:	add	r0, r0, #4
   20d68:	bl	11b2c <memset@plt>
   20d6c:	mov	r1, r5
   20d70:	cmp	r7, r1
   20d74:	mov	r6, r1
   20d78:	mov	r5, sl
   20d7c:	bgt	20ca4 <__assert_fail@plt+0xeff8>
   20d80:	b	20e3c <__assert_fail@plt+0xf190>
   20d84:	cmp	r2, #1
   20d88:	add	r1, sp, #4
   20d8c:	blt	20cc8 <__assert_fail@plt+0xf01c>
   20d90:	ldr	r1, [r4, #80]	; 0x50
   20d94:	cmp	r1, #1
   20d98:	add	r1, sp, #4
   20d9c:	blt	20cc8 <__assert_fail@plt+0xf01c>
   20da0:	ldm	r4, {r1, r3}
   20da4:	mov	lr, r5
   20da8:	ldr	r5, [r4, #24]
   20dac:	cmp	r2, #2
   20db0:	add	r5, r6, r5
   20db4:	ldrb	r1, [r1, r5]
   20db8:	mov	r5, lr
   20dbc:	ldrb	r0, [r0, r1]
   20dc0:	add	r1, sp, #4
   20dc4:	strb	r0, [r3, r6]
   20dc8:	strb	r0, [sp, #4]
   20dcc:	blt	20cc8 <__assert_fail@plt+0xf01c>
   20dd0:	ldr	r0, [r4, #80]	; 0x50
   20dd4:	add	r1, sp, #4
   20dd8:	cmp	r0, #2
   20ddc:	blt	20cc8 <__assert_fail@plt+0xf01c>
   20de0:	mov	r0, #1
   20de4:	ldm	r4, {r1, ip}
   20de8:	ldr	r5, [r4, #24]
   20dec:	ldr	r3, [r4, #64]	; 0x40
   20df0:	add	r1, r1, r5
   20df4:	add	r1, r1, r6
   20df8:	ldrb	r1, [r1, r0]
   20dfc:	ldrb	r1, [r3, r1]
   20e00:	add	r3, ip, r6
   20e04:	strb	r1, [r3, r0]
   20e08:	add	r3, sp, #4
   20e0c:	strb	r1, [r3, r0]
   20e10:	add	r0, r0, #1
   20e14:	cmp	r0, r2
   20e18:	bge	20e28 <__assert_fail@plt+0xf17c>
   20e1c:	ldr	r1, [r4, #80]	; 0x50
   20e20:	cmp	r0, r1
   20e24:	blt	20de4 <__assert_fail@plt+0xf138>
   20e28:	add	r1, sp, #4
   20e2c:	mov	r5, lr
   20e30:	b	20cc8 <__assert_fail@plt+0xf01c>
   20e34:	stm	r8, {r9, sl}
   20e38:	mov	r1, r6
   20e3c:	str	r1, [r4, #28]
   20e40:	str	r1, [r4, #32]
   20e44:	sub	sp, fp, #28
   20e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e50:	add	fp, sp, #28
   20e54:	sub	sp, sp, #28
   20e58:	ldr	r9, [r1]
   20e5c:	mov	r5, r0
   20e60:	ldr	r4, [fp, #12]
   20e64:	mov	r6, r2
   20e68:	str	r1, [sp, #16]
   20e6c:	str	r3, [sp, #20]
   20e70:	ldr	r0, [r9, #84]	; 0x54
   20e74:	str	r4, [sp, #4]
   20e78:	str	r0, [sp, #12]
   20e7c:	ldr	r0, [fp, #8]
   20e80:	str	r0, [sp]
   20e84:	mov	r0, r5
   20e88:	bl	218f4 <__assert_fail@plt+0xfc48>
   20e8c:	mov	r7, r0
   20e90:	cmp	r0, #0
   20e94:	bne	20ea4 <__assert_fail@plt+0xf1f8>
   20e98:	ldr	r0, [r4]
   20e9c:	cmp	r0, #0
   20ea0:	bne	210b4 <__assert_fail@plt+0xf408>
   20ea4:	ldrb	r0, [r6, #4]
   20ea8:	cmp	r0, #10
   20eac:	bne	20ff0 <__assert_fail@plt+0xf344>
   20eb0:	ldr	r0, [sp, #20]
   20eb4:	mov	sl, #0
   20eb8:	orr	r0, r0, #8388608	; 0x800000
   20ebc:	str	r0, [sp, #24]
   20ec0:	b	20f60 <__assert_fail@plt+0xf2b4>
   20ec4:	ldr	r1, [fp, #8]
   20ec8:	cmp	r1, #0
   20ecc:	beq	20edc <__assert_fail@plt+0xf230>
   20ed0:	cmp	r0, #9
   20ed4:	mov	r8, #0
   20ed8:	beq	20f90 <__assert_fail@plt+0xf2e4>
   20edc:	ldr	r0, [sp, #12]
   20ee0:	ldr	r4, [r9, #84]	; 0x54
   20ee4:	ldr	r1, [sp, #16]
   20ee8:	ldr	r3, [sp, #20]
   20eec:	mov	r2, r6
   20ef0:	str	r0, [r9, #84]	; 0x54
   20ef4:	ldr	r0, [fp, #8]
   20ef8:	str	r0, [sp]
   20efc:	ldr	r0, [fp, #12]
   20f00:	str	r0, [sp, #4]
   20f04:	mov	r0, r5
   20f08:	bl	218f4 <__assert_fail@plt+0xfc48>
   20f0c:	mov	r8, r0
   20f10:	cmp	r0, #0
   20f14:	bne	20f28 <__assert_fail@plt+0xf27c>
   20f18:	ldr	r0, [fp, #12]
   20f1c:	ldr	r0, [r0]
   20f20:	cmp	r0, #0
   20f24:	bne	21000 <__assert_fail@plt+0xf354>
   20f28:	ldr	r0, [r9, #84]	; 0x54
   20f2c:	orr	r0, r0, r4
   20f30:	str	r0, [r9, #84]	; 0x54
   20f34:	b	20f90 <__assert_fail@plt+0xf2e4>
   20f38:	mov	r0, #996	; 0x3e4
   20f3c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   20f40:	cmp	r0, #0
   20f44:	beq	210a8 <__assert_fail@plt+0xf3fc>
   20f48:	ldr	r1, [r9, #56]	; 0x38
   20f4c:	str	r1, [r0]
   20f50:	mov	r1, #0
   20f54:	str	r1, [r9, #64]	; 0x40
   20f58:	str	r0, [r9, #56]	; 0x38
   20f5c:	b	20fa0 <__assert_fail@plt+0xf2f4>
   20f60:	ldr	r2, [sp, #24]
   20f64:	mov	r0, r6
   20f68:	mov	r1, r5
   20f6c:	bl	210bc <__assert_fail@plt+0xf410>
   20f70:	ldr	r1, [r5, #40]	; 0x28
   20f74:	mov	r8, #0
   20f78:	add	r0, r1, r0
   20f7c:	str	r0, [r5, #40]	; 0x28
   20f80:	ldrb	r0, [r6, #4]
   20f84:	orr	r1, r0, #8
   20f88:	cmp	r1, #10
   20f8c:	bne	20ec4 <__assert_fail@plt+0xf218>
   20f90:	ldr	r1, [r9, #64]	; 0x40
   20f94:	cmp	r1, #31
   20f98:	beq	20f38 <__assert_fail@plt+0xf28c>
   20f9c:	ldr	r0, [r9, #56]	; 0x38
   20fa0:	add	r2, r1, #1
   20fa4:	add	r4, r0, r1, lsl #5
   20fa8:	mov	r0, #10
   20fac:	cmp	r7, #0
   20fb0:	str	r2, [r9, #64]	; 0x40
   20fb4:	str	sl, [r4, #4]!
   20fb8:	stmib	r4, {r7, r8, sl}
   20fbc:	str	sl, [r4, #16]
   20fc0:	str	sl, [r4, #20]
   20fc4:	str	r0, [r4, #24]
   20fc8:	mvn	r0, #0
   20fcc:	str	r0, [r4, #28]
   20fd0:	strne	r4, [r7]
   20fd4:	cmp	r8, #0
   20fd8:	mov	r7, r4
   20fdc:	strne	r4, [r8]
   20fe0:	ldrb	r0, [r6, #4]
   20fe4:	cmp	r0, #10
   20fe8:	beq	20f60 <__assert_fail@plt+0xf2b4>
   20fec:	b	20ff4 <__assert_fail@plt+0xf348>
   20ff0:	mov	r4, r7
   20ff4:	mov	r0, r4
   20ff8:	sub	sp, fp, #28
   20ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21000:	mov	r4, #0
   21004:	cmp	r7, #0
   21008:	beq	20ff4 <__assert_fail@plt+0xf348>
   2100c:	movw	r8, #255	; 0xff
   21010:	movt	r8, #4
   21014:	mov	r6, r7
   21018:	ldr	r7, [r7, #4]
   2101c:	cmp	r7, #0
   21020:	bne	21014 <__assert_fail@plt+0xf368>
   21024:	ldr	r7, [r6, #8]
   21028:	cmp	r7, #0
   2102c:	bne	21014 <__assert_fail@plt+0xf368>
   21030:	ldr	r0, [r6, #24]
   21034:	and	r0, r0, r8
   21038:	cmp	r0, #3
   2103c:	beq	21074 <__assert_fail@plt+0xf3c8>
   21040:	cmp	r0, #6
   21044:	bne	2107c <__assert_fail@plt+0xf3d0>
   21048:	ldr	r5, [r6, #20]
   2104c:	ldr	r0, [r5]
   21050:	bl	1b22c <__assert_fail@plt+0x9580>
   21054:	ldr	r0, [r5, #4]
   21058:	bl	1b22c <__assert_fail@plt+0x9580>
   2105c:	ldr	r0, [r5, #8]
   21060:	bl	1b22c <__assert_fail@plt+0x9580>
   21064:	ldr	r0, [r5, #12]
   21068:	bl	1b22c <__assert_fail@plt+0x9580>
   2106c:	mov	r0, r5
   21070:	b	21078 <__assert_fail@plt+0xf3cc>
   21074:	ldr	r0, [r6, #20]
   21078:	bl	1b22c <__assert_fail@plt+0x9580>
   2107c:	ldr	r0, [r6]
   21080:	cmp	r0, #0
   21084:	beq	20ff4 <__assert_fail@plt+0xf348>
   21088:	ldr	r7, [r0, #8]
   2108c:	cmp	r7, r6
   21090:	mov	r6, r0
   21094:	beq	21030 <__assert_fail@plt+0xf384>
   21098:	cmp	r7, #0
   2109c:	mov	r6, r0
   210a0:	beq	21030 <__assert_fail@plt+0xf384>
   210a4:	b	21014 <__assert_fail@plt+0xf368>
   210a8:	ldr	r1, [fp, #12]
   210ac:	mov	r0, #12
   210b0:	str	r0, [r1]
   210b4:	mov	r4, #0
   210b8:	b	20ff4 <__assert_fail@plt+0xf348>
   210bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   210c0:	add	fp, sp, #24
   210c4:	sub	sp, sp, #8
   210c8:	mov	r9, r0
   210cc:	mov	r7, r1
   210d0:	ldr	r0, [r1, #40]	; 0x28
   210d4:	ldr	r1, [r1, #56]	; 0x38
   210d8:	cmp	r1, r0
   210dc:	ble	211c4 <__assert_fail@plt+0xf518>
   210e0:	ldr	r1, [r7, #4]
   210e4:	mov	r5, r9
   210e8:	mov	r8, r2
   210ec:	ldrb	r6, [r1, r0]
   210f0:	strb	r6, [r5], #4
   210f4:	ldr	r0, [r5]
   210f8:	bic	r1, r0, #6291456	; 0x600000
   210fc:	str	r1, [r5]
   21100:	ldr	r3, [r7, #80]	; 0x50
   21104:	cmp	r3, #2
   21108:	blt	2112c <__assert_fail@plt+0xf480>
   2110c:	ldr	r2, [r7, #28]
   21110:	ldr	r1, [r7, #40]	; 0x28
   21114:	cmp	r1, r2
   21118:	beq	2112c <__assert_fail@plt+0xf480>
   2111c:	ldr	r2, [r7, #8]
   21120:	ldr	r1, [r2, r1, lsl #2]
   21124:	cmn	r1, #1
   21128:	beq	21600 <__assert_fail@plt+0xf954>
   2112c:	movw	r1, #65280	; 0xff00
   21130:	cmp	r6, #92	; 0x5c
   21134:	movt	r1, #65439	; 0xff9f
   21138:	bne	211d4 <__assert_fail@plt+0xf528>
   2113c:	ldr	r6, [r7, #40]	; 0x28
   21140:	ldr	r4, [r7, #48]	; 0x30
   21144:	add	r2, r6, #1
   21148:	cmp	r2, r4
   2114c:	bge	21228 <__assert_fail@plt+0xf57c>
   21150:	ldrb	r4, [r7, #75]	; 0x4b
   21154:	cmp	r4, #0
   21158:	bne	21884 <__assert_fail@plt+0xfbd8>
   2115c:	ldr	r3, [r7, #4]
   21160:	ldrb	r6, [r3, r2]
   21164:	and	r0, r0, r1
   21168:	strb	r6, [r9]
   2116c:	orr	r4, r0, #1
   21170:	str	r4, [r9, #4]
   21174:	ldr	r0, [r7, #80]	; 0x50
   21178:	cmp	r0, #2
   2117c:	blt	2144c <__assert_fail@plt+0xf7a0>
   21180:	ldr	r0, [r7, #8]
   21184:	ldr	r1, [r7, #40]	; 0x28
   21188:	add	r0, r0, r1, lsl #2
   2118c:	ldr	r4, [r0, #4]
   21190:	mov	r0, r4
   21194:	bl	11afc <iswalnum@plt>
   21198:	sub	r1, r4, #95	; 0x5f
   2119c:	cmp	r0, #0
   211a0:	clz	r1, r1
   211a4:	movwne	r0, #1
   211a8:	lsr	r1, r1, #5
   211ac:	orr	r0, r1, r0
   211b0:	ldr	r1, [r5]
   211b4:	bic	r1, r1, #4194304	; 0x400000
   211b8:	orr	r0, r1, r0, lsl #22
   211bc:	uxtb	r1, r6
   211c0:	b	21470 <__assert_fail@plt+0xf7c4>
   211c4:	mov	r0, #2
   211c8:	mov	r4, #0
   211cc:	strb	r0, [r9, #4]
   211d0:	b	21878 <__assert_fail@plt+0xfbcc>
   211d4:	and	r0, r0, r1
   211d8:	orr	r4, r0, #1
   211dc:	str	r4, [r5]
   211e0:	ldr	r0, [r7, #80]	; 0x50
   211e4:	cmp	r0, #2
   211e8:	blt	21234 <__assert_fail@plt+0xf588>
   211ec:	ldr	r0, [r7, #8]
   211f0:	ldr	r1, [r7, #40]	; 0x28
   211f4:	ldr	r4, [r0, r1, lsl #2]
   211f8:	mov	r0, r4
   211fc:	bl	11afc <iswalnum@plt>
   21200:	sub	r1, r4, #95	; 0x5f
   21204:	cmp	r0, #0
   21208:	clz	r1, r1
   2120c:	movwne	r0, #1
   21210:	lsr	r1, r1, #5
   21214:	orr	r0, r1, r0
   21218:	ldr	r1, [r5]
   2121c:	bic	r1, r1, #4194304	; 0x400000
   21220:	orr	r0, r1, r0, lsl #22
   21224:	b	21254 <__assert_fail@plt+0xf5a8>
   21228:	and	r0, r0, r1
   2122c:	orr	r0, r0, #36	; 0x24
   21230:	b	21614 <__assert_fail@plt+0xf968>
   21234:	bl	11a90 <__ctype_b_loc@plt>
   21238:	ldr	r0, [r0]
   2123c:	cmp	r6, #95	; 0x5f
   21240:	add	r0, r0, r6, lsl #1
   21244:	ldrh	r0, [r0]
   21248:	ubfx	r0, r0, #3, #1
   2124c:	movweq	r0, #1
   21250:	orr	r0, r4, r0, lsl #22
   21254:	sub	r1, r6, #10
   21258:	mov	r4, #1
   2125c:	str	r0, [r5]
   21260:	cmp	r1, #115	; 0x73
   21264:	bhi	21878 <__assert_fail@plt+0xfbcc>
   21268:	add	r2, pc, #0
   2126c:	ldr	pc, [r2, r1, lsl #2]
   21270:	andeq	r1, r2, r0, asr #8
   21274:	andeq	r1, r2, r8, ror r8
   21278:	andeq	r1, r2, r8, ror r8
   2127c:	andeq	r1, r2, r8, ror r8
   21280:	andeq	r1, r2, r8, ror r8
   21284:	andeq	r1, r2, r8, ror r8
   21288:	andeq	r1, r2, r8, ror r8
   2128c:	andeq	r1, r2, r8, ror r8
   21290:	andeq	r1, r2, r8, ror r8
   21294:	andeq	r1, r2, r8, ror r8
   21298:	andeq	r1, r2, r8, ror r8
   2129c:	andeq	r1, r2, r8, ror r8
   212a0:	andeq	r1, r2, r8, ror r8
   212a4:	andeq	r1, r2, r8, ror r8
   212a8:	andeq	r1, r2, r8, ror r8
   212ac:	andeq	r1, r2, r8, ror r8
   212b0:	andeq	r1, r2, r8, ror r8
   212b4:	andeq	r1, r2, r8, ror r8
   212b8:	andeq	r1, r2, r8, ror r8
   212bc:	andeq	r1, r2, r8, ror r8
   212c0:	andeq	r1, r2, r8, ror r8
   212c4:	andeq	r1, r2, r8, ror r8
   212c8:	andeq	r1, r2, r8, ror r8
   212cc:	andeq	r1, r2, r8, ror r8
   212d0:	andeq	r1, r2, r8, ror r8
   212d4:	andeq	r1, r2, r8, ror r8
   212d8:	andeq	r1, r2, r0, lsr #12
   212dc:	andeq	r1, r2, r8, ror r8
   212e0:	andeq	r1, r2, r8, ror r8
   212e4:	andeq	r1, r2, r8, ror r8
   212e8:	andeq	r1, r2, r8, ror r6
   212ec:	andeq	r1, r2, r4, lsl #13
   212f0:	muleq	r2, r0, r6
   212f4:	muleq	r2, r8, r6
   212f8:	andeq	r1, r2, r8, ror r8
   212fc:	andeq	r1, r2, r8, ror r8
   21300:	andeq	r1, r2, r8, lsr #13
   21304:	andeq	r1, r2, r8, ror r8
   21308:	andeq	r1, r2, r8, ror r8
   2130c:	andeq	r1, r2, r8, ror r8
   21310:	andeq	r1, r2, r8, ror r8
   21314:	andeq	r1, r2, r8, ror r8
   21318:	andeq	r1, r2, r8, ror r8
   2131c:	andeq	r1, r2, r8, ror r8
   21320:	andeq	r1, r2, r8, ror r8
   21324:	andeq	r1, r2, r8, ror r8
   21328:	andeq	r1, r2, r8, ror r8
   2132c:	andeq	r1, r2, r8, ror r8
   21330:	andeq	r1, r2, r8, ror r8
   21334:	andeq	r1, r2, r8, ror r8
   21338:	andeq	r1, r2, r8, ror r8
   2133c:	andeq	r1, r2, r8, ror r8
   21340:	andeq	r1, r2, r8, ror r8
   21344:			; <UNDEFINED> instruction: 0x000216b0
   21348:	andeq	r1, r2, r8, ror r8
   2134c:	andeq	r1, r2, r8, ror r8
   21350:	andeq	r1, r2, r8, ror r8
   21354:	andeq	r1, r2, r8, ror r8
   21358:	andeq	r1, r2, r8, ror r8
   2135c:	andeq	r1, r2, r8, ror r8
   21360:	andeq	r1, r2, r8, ror r8
   21364:	andeq	r1, r2, r8, ror r8
   21368:	andeq	r1, r2, r8, ror r8
   2136c:	andeq	r1, r2, r8, ror r8
   21370:	andeq	r1, r2, r8, ror r8
   21374:	andeq	r1, r2, r8, ror r8
   21378:	andeq	r1, r2, r8, ror r8
   2137c:	andeq	r1, r2, r8, ror r8
   21380:	andeq	r1, r2, r8, ror r8
   21384:	andeq	r1, r2, r8, ror r8
   21388:	andeq	r1, r2, r8, ror r8
   2138c:	andeq	r1, r2, r8, ror r8
   21390:	andeq	r1, r2, r8, ror r8
   21394:	andeq	r1, r2, r8, ror r8
   21398:	andeq	r1, r2, r8, ror r8
   2139c:	andeq	r1, r2, r8, ror r8
   213a0:	andeq	r1, r2, r8, ror r8
   213a4:	andeq	r1, r2, r8, ror r8
   213a8:	andeq	r1, r2, r8, ror r8
   213ac:	andeq	r1, r2, r8, ror r8
   213b0:	andeq	r1, r2, r8, ror r8
   213b4:	andeq	r1, r2, r0, asr #13
   213b8:	andeq	r1, r2, r8, ror r8
   213bc:	andeq	r1, r2, r8, ror r8
   213c0:	andeq	r1, r2, r8, asr #13
   213c4:	andeq	r1, r2, r8, ror r8
   213c8:	andeq	r1, r2, r8, ror r8
   213cc:	andeq	r1, r2, r8, ror r8
   213d0:	andeq	r1, r2, r8, ror r8
   213d4:	andeq	r1, r2, r8, ror r8
   213d8:	andeq	r1, r2, r8, ror r8
   213dc:	andeq	r1, r2, r8, ror r8
   213e0:	andeq	r1, r2, r8, ror r8
   213e4:	andeq	r1, r2, r8, ror r8
   213e8:	andeq	r1, r2, r8, ror r8
   213ec:	andeq	r1, r2, r8, ror r8
   213f0:	andeq	r1, r2, r8, ror r8
   213f4:	andeq	r1, r2, r8, ror r8
   213f8:	andeq	r1, r2, r8, ror r8
   213fc:	andeq	r1, r2, r8, ror r8
   21400:	andeq	r1, r2, r8, ror r8
   21404:	andeq	r1, r2, r8, ror r8
   21408:	andeq	r1, r2, r8, ror r8
   2140c:	andeq	r1, r2, r8, ror r8
   21410:	andeq	r1, r2, r8, ror r8
   21414:	andeq	r1, r2, r8, ror r8
   21418:	andeq	r1, r2, r8, ror r8
   2141c:	andeq	r1, r2, r8, ror r8
   21420:	andeq	r1, r2, r8, ror r8
   21424:	andeq	r1, r2, r8, ror r8
   21428:	andeq	r1, r2, r8, ror r8
   2142c:	andeq	r1, r2, r8, ror r8
   21430:	andeq	r1, r2, r8, ror r8
   21434:	strdeq	r1, [r2], -r0
   21438:	andeq	r1, r2, r0, lsl #14
   2143c:	andeq	r1, r2, r4, lsl r7
   21440:	tst	r8, #2048	; 0x800
   21444:	bne	2170c <__assert_fail@plt+0xfa60>
   21448:	b	21878 <__assert_fail@plt+0xfbcc>
   2144c:	bl	11a90 <__ctype_b_loc@plt>
   21450:	ldr	r0, [r0]
   21454:	uxtb	r1, r6
   21458:	cmp	r1, #95	; 0x5f
   2145c:	add	r0, r0, r1, lsl #1
   21460:	ldrh	r0, [r0]
   21464:	ubfx	r0, r0, #3, #1
   21468:	movweq	r0, #1
   2146c:	orr	r0, r4, r0, lsl #22
   21470:	mvn	r2, #38	; 0x26
   21474:	mov	r4, #2
   21478:	str	r0, [r5]
   2147c:	uxtab	r2, r2, r6
   21480:	cmp	r2, #86	; 0x56
   21484:	bhi	21878 <__assert_fail@plt+0xfbcc>
   21488:	add	r3, pc, #0
   2148c:	ldr	pc, [r3, r2, lsl #2]
   21490:	andeq	r1, r2, r0, asr r7
   21494:	andeq	r1, r2, r0, ror #14
   21498:	andeq	r1, r2, r0, ror r7
   2149c:	andeq	r1, r2, r8, ror r8
   214a0:	andeq	r1, r2, r0, lsl #15
   214a4:	andeq	r1, r2, r8, ror r8
   214a8:	andeq	r1, r2, r8, ror r8
   214ac:	andeq	r1, r2, r8, ror r8
   214b0:	andeq	r1, r2, r8, ror r8
   214b4:	andeq	r1, r2, r8, ror r8
   214b8:	andeq	r1, r2, ip, ror #11
   214bc:	andeq	r1, r2, ip, ror #11
   214c0:	andeq	r1, r2, ip, ror #11
   214c4:	andeq	r1, r2, ip, ror #11
   214c8:	andeq	r1, r2, ip, ror #11
   214cc:	andeq	r1, r2, ip, ror #11
   214d0:	andeq	r1, r2, ip, ror #11
   214d4:	andeq	r1, r2, ip, ror #11
   214d8:	andeq	r1, r2, ip, ror #11
   214dc:	andeq	r1, r2, r8, ror r8
   214e0:	andeq	r1, r2, r8, ror r8
   214e4:	muleq	r2, r8, r7
   214e8:	andeq	r1, r2, r8, ror r8
   214ec:	andeq	r1, r2, r8, lsr #15
   214f0:			; <UNDEFINED> instruction: 0x000217b8
   214f4:	andeq	r1, r2, r8, ror r8
   214f8:	andeq	r1, r2, r8, ror r8
   214fc:	ldrdeq	r1, [r2], -r0
   21500:	andeq	r1, r2, r8, ror r8
   21504:	andeq	r1, r2, r8, ror r8
   21508:	andeq	r1, r2, r8, ror r8
   2150c:	andeq	r1, r2, r8, ror r8
   21510:	andeq	r1, r2, r8, ror r8
   21514:	andeq	r1, r2, r8, ror r8
   21518:	andeq	r1, r2, r8, ror r8
   2151c:	andeq	r1, r2, r8, ror r8
   21520:	andeq	r1, r2, r8, ror r8
   21524:	andeq	r1, r2, r8, ror r8
   21528:	andeq	r1, r2, r8, ror r8
   2152c:	andeq	r1, r2, r8, ror r8
   21530:	andeq	r1, r2, r8, ror r8
   21534:	andeq	r1, r2, r8, ror r8
   21538:	andeq	r1, r2, r8, ror r8
   2153c:	andeq	r1, r2, r8, ror r8
   21540:	andeq	r1, r2, r0, ror #15
   21544:	andeq	r1, r2, r8, ror r8
   21548:	andeq	r1, r2, r8, ror r8
   2154c:	andeq	r1, r2, r8, ror r8
   21550:	strdeq	r1, [r2], -r0
   21554:	andeq	r1, r2, r8, ror r8
   21558:	andeq	r1, r2, r8, ror r8
   2155c:	andeq	r1, r2, r8, ror r8
   21560:	andeq	r1, r2, r8, ror r8
   21564:	andeq	r1, r2, r8, ror r8
   21568:	andeq	r1, r2, r8, ror r8
   2156c:	andeq	r1, r2, r8, ror r8
   21570:	andeq	r1, r2, r8, ror r8
   21574:	andeq	r1, r2, r0, lsl #16
   21578:	andeq	r1, r2, r8, ror r8
   2157c:	andeq	r1, r2, r0, lsl r8
   21580:	andeq	r1, r2, r8, ror r8
   21584:	andeq	r1, r2, r8, ror r8
   21588:	andeq	r1, r2, r8, ror r8
   2158c:	andeq	r1, r2, r8, ror r8
   21590:	andeq	r1, r2, r8, ror r8
   21594:	andeq	r1, r2, r8, ror r8
   21598:	andeq	r1, r2, r8, ror r8
   2159c:	andeq	r1, r2, r8, ror r8
   215a0:	andeq	r1, r2, r8, ror r8
   215a4:	andeq	r1, r2, r8, ror r8
   215a8:	andeq	r1, r2, r8, ror r8
   215ac:	andeq	r1, r2, r8, ror r8
   215b0:	andeq	r1, r2, r8, ror r8
   215b4:	andeq	r1, r2, r8, ror r8
   215b8:	andeq	r1, r2, r8, ror r8
   215bc:	andeq	r1, r2, r8, ror r8
   215c0:	andeq	r1, r2, r0, lsr #16
   215c4:	andeq	r1, r2, r8, ror r8
   215c8:	andeq	r1, r2, r8, ror r8
   215cc:	andeq	r1, r2, r8, ror r8
   215d0:	andeq	r1, r2, r0, lsr r8
   215d4:	andeq	r1, r2, r8, ror r8
   215d8:	andeq	r1, r2, r8, ror r8
   215dc:	andeq	r1, r2, r8, ror r8
   215e0:	andeq	r1, r2, r0, asr #16
   215e4:	andeq	r1, r2, r4, asr r8
   215e8:	andeq	r1, r2, r0, ror #16
   215ec:	tst	r8, #16384	; 0x4000
   215f0:	bne	21878 <__assert_fail@plt+0xfbcc>
   215f4:	sub	r1, r1, #49	; 0x31
   215f8:	mov	r2, #4
   215fc:	b	216e0 <__assert_fail@plt+0xfa34>
   21600:	movw	r1, #65280	; 0xff00
   21604:	movt	r1, #65439	; 0xff9f
   21608:	and	r0, r0, r1
   2160c:	orr	r0, r0, #1
   21610:	orr	r0, r0, #2097152	; 0x200000
   21614:	str	r0, [r5]
   21618:	mov	r4, #1
   2161c:	b	21878 <__assert_fail@plt+0xfbcc>
   21620:	tst	r8, #8
   21624:	bne	21670 <__assert_fail@plt+0xf9c4>
   21628:	ldr	r1, [r7, #40]	; 0x28
   2162c:	ldr	r2, [r7, #48]	; 0x30
   21630:	add	r1, r1, #1
   21634:	cmp	r1, r2
   21638:	beq	21670 <__assert_fail@plt+0xf9c4>
   2163c:	str	r1, [r7, #40]	; 0x28
   21640:	mov	r0, sp
   21644:	mov	r1, r7
   21648:	mov	r2, r8
   2164c:	bl	210bc <__assert_fail@plt+0xf410>
   21650:	ldr	r0, [r7, #40]	; 0x28
   21654:	sub	r0, r0, #1
   21658:	str	r0, [r7, #40]	; 0x28
   2165c:	ldrb	r0, [sp, #4]
   21660:	sub	r0, r0, #9
   21664:	cmp	r0, #1
   21668:	bhi	21878 <__assert_fail@plt+0xfbcc>
   2166c:	ldr	r0, [r5]
   21670:	mov	r1, #32
   21674:	b	216dc <__assert_fail@plt+0xfa30>
   21678:	tst	r8, #8192	; 0x2000
   2167c:	bne	21768 <__assert_fail@plt+0xfabc>
   21680:	b	21878 <__assert_fail@plt+0xfbcc>
   21684:	tst	r8, #8192	; 0x2000
   21688:	bne	21778 <__assert_fail@plt+0xfacc>
   2168c:	b	21878 <__assert_fail@plt+0xfbcc>
   21690:	mov	r1, #11
   21694:	b	21870 <__assert_fail@plt+0xfbc4>
   21698:	movw	r1, #1026	; 0x402
   2169c:	tst	r8, r1
   216a0:	bne	21878 <__assert_fail@plt+0xfbcc>
   216a4:	b	21790 <__assert_fail@plt+0xfae4>
   216a8:	mov	r1, #5
   216ac:	b	21870 <__assert_fail@plt+0xfbc4>
   216b0:	movw	r1, #1026	; 0x402
   216b4:	tst	r8, r1
   216b8:	bne	21878 <__assert_fail@plt+0xfbcc>
   216bc:	b	217c8 <__assert_fail@plt+0xfb1c>
   216c0:	mov	r1, #20
   216c4:	b	21870 <__assert_fail@plt+0xfbc4>
   216c8:	movw	r1, #8
   216cc:	movt	r1, #128	; 0x80
   216d0:	tst	r8, r1
   216d4:	beq	21724 <__assert_fail@plt+0xfa78>
   216d8:	mov	r1, #16
   216dc:	mov	r2, #12
   216e0:	bfi	r0, r2, #0, #8
   216e4:	str	r1, [r9]
   216e8:	str	r0, [r9, #4]
   216ec:	b	21878 <__assert_fail@plt+0xfbcc>
   216f0:	and	r1, r8, #4608	; 0x1200
   216f4:	cmp	r1, #4608	; 0x1200
   216f8:	beq	2184c <__assert_fail@plt+0xfba0>
   216fc:	b	21878 <__assert_fail@plt+0xfbcc>
   21700:	and	r1, r8, #33792	; 0x8400
   21704:	cmp	r1, #32768	; 0x8000
   21708:	bne	21878 <__assert_fail@plt+0xfbcc>
   2170c:	mov	r1, #10
   21710:	b	21870 <__assert_fail@plt+0xfbc4>
   21714:	and	r1, r8, #4608	; 0x1200
   21718:	cmp	r1, #4608	; 0x1200
   2171c:	beq	2186c <__assert_fail@plt+0xfbc0>
   21720:	b	21878 <__assert_fail@plt+0xfbcc>
   21724:	ldr	r1, [r7, #40]	; 0x28
   21728:	cmp	r1, #0
   2172c:	beq	216d8 <__assert_fail@plt+0xfa2c>
   21730:	tst	r8, #2048	; 0x800
   21734:	beq	21878 <__assert_fail@plt+0xfbcc>
   21738:	ldr	r2, [r7, #4]
   2173c:	add	r1, r2, r1
   21740:	ldrb	r1, [r1, #-1]
   21744:	cmp	r1, #10
   21748:	beq	216d8 <__assert_fail@plt+0xfa2c>
   2174c:	b	21878 <__assert_fail@plt+0xfbcc>
   21750:	tst	r8, #524288	; 0x80000
   21754:	bne	21878 <__assert_fail@plt+0xfbcc>
   21758:	mov	r1, #128	; 0x80
   2175c:	b	216dc <__assert_fail@plt+0xfa30>
   21760:	tst	r8, #8192	; 0x2000
   21764:	bne	21878 <__assert_fail@plt+0xfbcc>
   21768:	mov	r1, #8
   2176c:	b	21870 <__assert_fail@plt+0xfbc4>
   21770:	tst	r8, #8192	; 0x2000
   21774:	bne	21878 <__assert_fail@plt+0xfbcc>
   21778:	mov	r1, #9
   2177c:	b	21870 <__assert_fail@plt+0xfbc4>
   21780:	movw	r1, #1026	; 0x402
   21784:	and	r1, r8, r1
   21788:	cmp	r1, #2
   2178c:	bne	21878 <__assert_fail@plt+0xfbcc>
   21790:	mov	r1, #18
   21794:	b	21870 <__assert_fail@plt+0xfbc4>
   21798:	tst	r8, #524288	; 0x80000
   2179c:	bne	21878 <__assert_fail@plt+0xfbcc>
   217a0:	mov	r1, #6
   217a4:	b	216dc <__assert_fail@plt+0xfa30>
   217a8:	tst	r8, #524288	; 0x80000
   217ac:	bne	21878 <__assert_fail@plt+0xfbcc>
   217b0:	mov	r1, #9
   217b4:	b	216dc <__assert_fail@plt+0xfa30>
   217b8:	movw	r1, #1026	; 0x402
   217bc:	and	r1, r8, r1
   217c0:	cmp	r1, #2
   217c4:	bne	21878 <__assert_fail@plt+0xfbcc>
   217c8:	mov	r1, #19
   217cc:	b	21870 <__assert_fail@plt+0xfbc4>
   217d0:	tst	r8, #524288	; 0x80000
   217d4:	bne	21878 <__assert_fail@plt+0xfbcc>
   217d8:	mov	r1, #512	; 0x200
   217dc:	b	216dc <__assert_fail@plt+0xfa30>
   217e0:	tst	r8, #524288	; 0x80000
   217e4:	bne	21878 <__assert_fail@plt+0xfbcc>
   217e8:	mov	r1, #35	; 0x23
   217ec:	b	21870 <__assert_fail@plt+0xfbc4>
   217f0:	tst	r8, #524288	; 0x80000
   217f4:	bne	21878 <__assert_fail@plt+0xfbcc>
   217f8:	mov	r1, #33	; 0x21
   217fc:	b	21870 <__assert_fail@plt+0xfbc4>
   21800:	tst	r8, #524288	; 0x80000
   21804:	bne	21878 <__assert_fail@plt+0xfbcc>
   21808:	mov	r1, #64	; 0x40
   2180c:	b	216dc <__assert_fail@plt+0xfa30>
   21810:	tst	r8, #524288	; 0x80000
   21814:	bne	21878 <__assert_fail@plt+0xfbcc>
   21818:	mov	r1, #256	; 0x100
   2181c:	b	216dc <__assert_fail@plt+0xfa30>
   21820:	tst	r8, #524288	; 0x80000
   21824:	bne	21878 <__assert_fail@plt+0xfbcc>
   21828:	mov	r1, #34	; 0x22
   2182c:	b	21870 <__assert_fail@plt+0xfbc4>
   21830:	tst	r8, #524288	; 0x80000
   21834:	bne	21878 <__assert_fail@plt+0xfbcc>
   21838:	mov	r1, #32
   2183c:	b	21870 <__assert_fail@plt+0xfbc4>
   21840:	and	r1, r8, #4608	; 0x1200
   21844:	cmp	r1, #512	; 0x200
   21848:	bne	21878 <__assert_fail@plt+0xfbcc>
   2184c:	mov	r1, #23
   21850:	b	21870 <__assert_fail@plt+0xfbc4>
   21854:	tst	r8, #33792	; 0x8400
   21858:	bne	21878 <__assert_fail@plt+0xfbcc>
   2185c:	b	2170c <__assert_fail@plt+0xfa60>
   21860:	and	r1, r8, #4608	; 0x1200
   21864:	cmp	r1, #512	; 0x200
   21868:	bne	21878 <__assert_fail@plt+0xfbcc>
   2186c:	mov	r1, #24
   21870:	bfi	r0, r1, #0, #8
   21874:	str	r0, [r5]
   21878:	mov	r0, r4
   2187c:	sub	sp, fp, #24
   21880:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21884:	cmp	r3, #2
   21888:	blt	218b8 <__assert_fail@plt+0xfc0c>
   2188c:	ldr	r3, [r7, #8]
   21890:	ldr	r4, [r3, r2, lsl #2]
   21894:	cmn	r4, #1
   21898:	beq	2115c <__assert_fail@plt+0xf4b0>
   2189c:	ldr	r4, [r7, #28]
   218a0:	add	r6, r6, #2
   218a4:	cmp	r4, r6
   218a8:	beq	218b8 <__assert_fail@plt+0xfc0c>
   218ac:	ldr	r3, [r3, r6, lsl #2]
   218b0:	cmn	r3, #1
   218b4:	beq	2115c <__assert_fail@plt+0xf4b0>
   218b8:	ldrb	r3, [r7, #76]	; 0x4c
   218bc:	mov	r6, r2
   218c0:	ldr	r4, [r7, #24]
   218c4:	ldr	ip, [r7]
   218c8:	cmp	r3, #0
   218cc:	ldrne	r6, [r7, #12]
   218d0:	ldrne	r6, [r6, r2, lsl #2]
   218d4:	cmp	r3, #0
   218d8:	add	r6, r4, r6
   218dc:	add	r6, ip, r6
   218e0:	ldrsb	r6, [r6]
   218e4:	beq	21164 <__assert_fail@plt+0xf4b8>
   218e8:	cmn	r6, #1
   218ec:	ble	2115c <__assert_fail@plt+0xf4b0>
   218f0:	b	21164 <__assert_fail@plt+0xf4b8>
   218f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218f8:	add	fp, sp, #28
   218fc:	sub	sp, sp, #20
   21900:	ldr	r4, [fp, #12]
   21904:	ldr	r7, [fp, #8]
   21908:	ldr	sl, [r1]
   2190c:	mov	r6, r2
   21910:	str	r0, [sp, #12]
   21914:	str	r1, [sp, #8]
   21918:	str	r3, [sp, #16]
   2191c:	str	r4, [sp, #4]
   21920:	str	r7, [sp]
   21924:	bl	21c40 <__assert_fail@plt+0xff94>
   21928:	mov	r3, r4
   2192c:	mov	r4, r0
   21930:	cmp	r0, #0
   21934:	bne	21954 <__assert_fail@plt+0xfca8>
   21938:	ldr	r0, [r3]
   2193c:	cmp	r0, #0
   21940:	beq	21954 <__assert_fail@plt+0xfca8>
   21944:	b	21c2c <__assert_fail@plt+0xff80>
   21948:	cmp	r4, #0
   2194c:	mov	r7, r8
   21950:	moveq	r4, r5
   21954:	ldrb	r0, [r6, #4]
   21958:	orr	r1, r0, #8
   2195c:	cmp	r1, #10
   21960:	beq	21c30 <__assert_fail@plt+0xff84>
   21964:	cmp	r7, #0
   21968:	beq	21974 <__assert_fail@plt+0xfcc8>
   2196c:	cmp	r0, #9
   21970:	beq	21c30 <__assert_fail@plt+0xff84>
   21974:	str	r3, [sp, #4]
   21978:	mov	r9, r3
   2197c:	ldr	r0, [sp, #12]
   21980:	ldr	r1, [sp, #8]
   21984:	ldr	r3, [sp, #16]
   21988:	mov	r2, r6
   2198c:	mov	r8, r7
   21990:	str	r7, [sp]
   21994:	bl	21c40 <__assert_fail@plt+0xff94>
   21998:	mov	r3, r9
   2199c:	mov	r5, r0
   219a0:	cmp	r0, #0
   219a4:	bne	219b4 <__assert_fail@plt+0xfd08>
   219a8:	ldr	r0, [r3]
   219ac:	cmp	r0, #0
   219b0:	bne	21a44 <__assert_fail@plt+0xfd98>
   219b4:	cmp	r4, #0
   219b8:	cmpne	r5, #0
   219bc:	beq	21948 <__assert_fail@plt+0xfc9c>
   219c0:	ldr	r1, [sl, #64]	; 0x40
   219c4:	cmp	r1, #31
   219c8:	beq	21a18 <__assert_fail@plt+0xfd6c>
   219cc:	ldr	r0, [sl, #56]	; 0x38
   219d0:	add	r2, r1, #1
   219d4:	add	r0, r0, r1, lsl #5
   219d8:	mov	r1, #0
   219dc:	mov	r7, r8
   219e0:	str	r2, [sl, #64]	; 0x40
   219e4:	str	r1, [r0, #4]!
   219e8:	stmib	r0, {r4, r5}
   219ec:	str	r1, [r0, #12]
   219f0:	str	r1, [r0, #16]
   219f4:	str	r1, [r0, #20]
   219f8:	mov	r1, #16
   219fc:	str	r1, [r0, #24]
   21a00:	mvn	r1, #0
   21a04:	str	r1, [r0, #28]
   21a08:	str	r0, [r4]
   21a0c:	str	r0, [r5]
   21a10:	mov	r4, r0
   21a14:	b	21954 <__assert_fail@plt+0xfca8>
   21a18:	mov	r0, #996	; 0x3e4
   21a1c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   21a20:	cmp	r0, #0
   21a24:	beq	21ae8 <__assert_fail@plt+0xfe3c>
   21a28:	ldr	r1, [sl, #56]	; 0x38
   21a2c:	mov	r3, r9
   21a30:	str	r1, [r0]
   21a34:	mov	r1, #0
   21a38:	str	r1, [sl, #64]	; 0x40
   21a3c:	str	r0, [sl, #56]	; 0x38
   21a40:	b	219d0 <__assert_fail@plt+0xfd24>
   21a44:	cmp	r4, #0
   21a48:	beq	21c2c <__assert_fail@plt+0xff80>
   21a4c:	movw	r5, #255	; 0xff
   21a50:	movt	r5, #4
   21a54:	mov	r6, r4
   21a58:	ldr	r4, [r4, #4]
   21a5c:	cmp	r4, #0
   21a60:	bne	21a54 <__assert_fail@plt+0xfda8>
   21a64:	ldr	r4, [r6, #8]
   21a68:	cmp	r4, #0
   21a6c:	bne	21a54 <__assert_fail@plt+0xfda8>
   21a70:	ldr	r0, [r6, #24]
   21a74:	and	r0, r0, r5
   21a78:	cmp	r0, #3
   21a7c:	beq	21ab4 <__assert_fail@plt+0xfe08>
   21a80:	cmp	r0, #6
   21a84:	bne	21abc <__assert_fail@plt+0xfe10>
   21a88:	ldr	r4, [r6, #20]
   21a8c:	ldr	r0, [r4]
   21a90:	bl	1b22c <__assert_fail@plt+0x9580>
   21a94:	ldr	r0, [r4, #4]
   21a98:	bl	1b22c <__assert_fail@plt+0x9580>
   21a9c:	ldr	r0, [r4, #8]
   21aa0:	bl	1b22c <__assert_fail@plt+0x9580>
   21aa4:	ldr	r0, [r4, #12]
   21aa8:	bl	1b22c <__assert_fail@plt+0x9580>
   21aac:	mov	r0, r4
   21ab0:	b	21ab8 <__assert_fail@plt+0xfe0c>
   21ab4:	ldr	r0, [r6, #20]
   21ab8:	bl	1b22c <__assert_fail@plt+0x9580>
   21abc:	ldr	r0, [r6]
   21ac0:	cmp	r0, #0
   21ac4:	beq	21c2c <__assert_fail@plt+0xff80>
   21ac8:	ldr	r4, [r0, #8]
   21acc:	cmp	r4, r6
   21ad0:	mov	r6, r0
   21ad4:	beq	21a70 <__assert_fail@plt+0xfdc4>
   21ad8:	cmp	r4, #0
   21adc:	mov	r6, r0
   21ae0:	beq	21a70 <__assert_fail@plt+0xfdc4>
   21ae4:	b	21a54 <__assert_fail@plt+0xfda8>
   21ae8:	movw	r6, #255	; 0xff
   21aec:	mov	r1, r9
   21af0:	movt	r6, #4
   21af4:	mov	r7, r5
   21af8:	ldr	r5, [r5, #4]
   21afc:	cmp	r5, #0
   21b00:	bne	21af4 <__assert_fail@plt+0xfe48>
   21b04:	ldr	r5, [r7, #8]
   21b08:	cmp	r5, #0
   21b0c:	bne	21af4 <__assert_fail@plt+0xfe48>
   21b10:	ldr	r0, [r7, #24]
   21b14:	and	r0, r0, r6
   21b18:	cmp	r0, #3
   21b1c:	beq	21b54 <__assert_fail@plt+0xfea8>
   21b20:	cmp	r0, #6
   21b24:	bne	21b60 <__assert_fail@plt+0xfeb4>
   21b28:	ldr	r5, [r7, #20]
   21b2c:	ldr	r0, [r5]
   21b30:	bl	1b22c <__assert_fail@plt+0x9580>
   21b34:	ldr	r0, [r5, #4]
   21b38:	bl	1b22c <__assert_fail@plt+0x9580>
   21b3c:	ldr	r0, [r5, #8]
   21b40:	bl	1b22c <__assert_fail@plt+0x9580>
   21b44:	ldr	r0, [r5, #12]
   21b48:	bl	1b22c <__assert_fail@plt+0x9580>
   21b4c:	mov	r0, r5
   21b50:	b	21b58 <__assert_fail@plt+0xfeac>
   21b54:	ldr	r0, [r7, #20]
   21b58:	bl	1b22c <__assert_fail@plt+0x9580>
   21b5c:	mov	r1, r9
   21b60:	ldr	r0, [r7]
   21b64:	cmp	r0, #0
   21b68:	beq	21b8c <__assert_fail@plt+0xfee0>
   21b6c:	ldr	r5, [r0, #8]
   21b70:	cmp	r5, r7
   21b74:	mov	r7, r0
   21b78:	beq	21b10 <__assert_fail@plt+0xfe64>
   21b7c:	cmp	r5, #0
   21b80:	mov	r7, r0
   21b84:	beq	21b10 <__assert_fail@plt+0xfe64>
   21b88:	b	21af4 <__assert_fail@plt+0xfe48>
   21b8c:	mov	r5, r4
   21b90:	ldr	r4, [r4, #4]
   21b94:	cmp	r4, #0
   21b98:	bne	21b8c <__assert_fail@plt+0xfee0>
   21b9c:	ldr	r4, [r5, #8]
   21ba0:	cmp	r4, #0
   21ba4:	bne	21b8c <__assert_fail@plt+0xfee0>
   21ba8:	ldr	r0, [r5, #24]
   21bac:	and	r0, r0, r6
   21bb0:	cmp	r0, #3
   21bb4:	beq	21bec <__assert_fail@plt+0xff40>
   21bb8:	cmp	r0, #6
   21bbc:	bne	21bf8 <__assert_fail@plt+0xff4c>
   21bc0:	ldr	r4, [r5, #20]
   21bc4:	ldr	r0, [r4]
   21bc8:	bl	1b22c <__assert_fail@plt+0x9580>
   21bcc:	ldr	r0, [r4, #4]
   21bd0:	bl	1b22c <__assert_fail@plt+0x9580>
   21bd4:	ldr	r0, [r4, #8]
   21bd8:	bl	1b22c <__assert_fail@plt+0x9580>
   21bdc:	ldr	r0, [r4, #12]
   21be0:	bl	1b22c <__assert_fail@plt+0x9580>
   21be4:	mov	r0, r4
   21be8:	b	21bf0 <__assert_fail@plt+0xff44>
   21bec:	ldr	r0, [r5, #20]
   21bf0:	bl	1b22c <__assert_fail@plt+0x9580>
   21bf4:	mov	r1, r9
   21bf8:	ldr	r0, [r5]
   21bfc:	cmp	r0, #0
   21c00:	beq	21c24 <__assert_fail@plt+0xff78>
   21c04:	ldr	r4, [r0, #8]
   21c08:	cmp	r4, r5
   21c0c:	mov	r5, r0
   21c10:	beq	21ba8 <__assert_fail@plt+0xfefc>
   21c14:	cmp	r4, #0
   21c18:	mov	r5, r0
   21c1c:	beq	21ba8 <__assert_fail@plt+0xfefc>
   21c20:	b	21b8c <__assert_fail@plt+0xfee0>
   21c24:	mov	r0, #12
   21c28:	str	r0, [r1]
   21c2c:	mov	r4, #0
   21c30:	mov	r0, r4
   21c34:	sub	sp, fp, #28
   21c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c3c:	nop	{0}
   21c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c44:	add	fp, sp, #28
   21c48:	sub	sp, sp, #148	; 0x94
   21c4c:	str	r0, [sp, #24]
   21c50:	ldr	r0, [r2, #4]
   21c54:	mov	r7, r1
   21c58:	mov	lr, r2
   21c5c:	mvn	r1, #0
   21c60:	mov	r6, r3
   21c64:	mov	sl, #0
   21c68:	ldr	r2, [fp, #12]
   21c6c:	ldr	r8, [r7]
   21c70:	uxtab	r1, r1, r0
   21c74:	cmp	r1, #35	; 0x23
   21c78:	str	r2, [sp, #16]
   21c7c:	str	lr, [sp, #44]	; 0x2c
   21c80:	bhi	21dac <__assert_fail@plt+0x10100>
   21c84:	add	r2, pc, #0
   21c88:	ldr	pc, [r2, r1, lsl #2]
   21c8c:	andeq	r2, r2, r8, rrx
   21c90:	andeq	r3, r2, r8, lsr sl
   21c94:	andeq	r1, r2, ip, lsr #27
   21c98:	andeq	r1, r2, r0, lsr lr
   21c9c:			; <UNDEFINED> instruction: 0x00021eb0
   21ca0:	andeq	r1, r2, ip, lsr #27
   21ca4:	andeq	r1, r2, ip, lsr #27
   21ca8:	andeq	r1, r2, r8, lsl pc
   21cac:			; <UNDEFINED> instruction: 0x00021dbc
   21cb0:	andeq	r3, r2, r8, lsr sl
   21cb4:	andeq	r1, r2, ip, lsr #27
   21cb8:	andeq	r1, r2, r0, lsr #31
   21cbc:	andeq	r1, r2, ip, lsr #27
   21cc0:	andeq	r1, r2, ip, lsr #27
   21cc4:	andeq	r1, r2, ip, lsr #27
   21cc8:	andeq	r1, r2, ip, lsr #27
   21ccc:	andeq	r1, r2, ip, lsr #27
   21cd0:	andeq	r1, r2, ip, lsr #27
   21cd4:	andeq	r1, r2, ip, lsr #27
   21cd8:	andeq	r2, r2, r8, lsr r2
   21cdc:	andeq	r1, r2, ip, lsr #27
   21ce0:	andeq	r1, r2, ip, lsr #27
   21ce4:	andeq	r1, r2, r4, lsr #27
   21ce8:	andeq	r1, r2, ip, asr #27
   21cec:	andeq	r1, r2, ip, lsr #27
   21cf0:	andeq	r1, r2, ip, lsr #27
   21cf4:	andeq	r1, r2, ip, lsr #27
   21cf8:	andeq	r1, r2, ip, lsr #27
   21cfc:	andeq	r1, r2, ip, lsr #27
   21d00:	andeq	r1, r2, ip, lsr #27
   21d04:	andeq	r1, r2, ip, lsr #27
   21d08:	andeq	r1, r2, ip, lsl sp
   21d0c:	andeq	r1, r2, ip, lsl sp
   21d10:	andeq	r1, r2, r0, asr #26
   21d14:	andeq	r1, r2, r0, asr #26
   21d18:	andeq	r2, r2, r0, lsr r2
   21d1c:	ldr	r1, [sp, #24]
   21d20:	mvn	r2, #32
   21d24:	movw	r3, #2068	; 0x814
   21d28:	uxtab	r0, r2, r0
   21d2c:	movw	r2, #2062	; 0x80e
   21d30:	movt	r3, #3
   21d34:	clz	r0, r0
   21d38:	movt	r2, #3
   21d3c:	b	21d60 <__assert_fail@plt+0x100b4>
   21d40:	ldr	r1, [sp, #24]
   21d44:	mvn	r2, #34	; 0x22
   21d48:	movw	r3, #64311	; 0xfb37
   21d4c:	uxtab	r0, r2, r0
   21d50:	movw	r2, #2070	; 0x816
   21d54:	movt	r3, #2
   21d58:	clz	r0, r0
   21d5c:	movt	r2, #3
   21d60:	lsr	r0, r0, #5
   21d64:	ldr	r1, [r1, #64]	; 0x40
   21d68:	str	r0, [sp]
   21d6c:	ldr	r4, [sp, #16]
   21d70:	str	r4, [sp, #4]
   21d74:	mov	r0, r8
   21d78:	bl	2407c <__assert_fail@plt+0x123d0>
   21d7c:	mov	r7, r0
   21d80:	cmp	r0, #0
   21d84:	bne	21d9c <__assert_fail@plt+0x100f0>
   21d88:	ldr	r0, [r4]
   21d8c:	cmp	r0, #0
   21d90:	ldr	lr, [sp, #44]	; 0x2c
   21d94:	beq	22cd4 <__assert_fail@plt+0x11028>
   21d98:	b	23a38 <__assert_fail@plt+0x11d8c>
   21d9c:	ldr	lr, [sp, #44]	; 0x2c
   21da0:	b	22cd4 <__assert_fail@plt+0x11028>
   21da4:	tst	r6, #16777216	; 0x1000000
   21da8:	bne	21e28 <__assert_fail@plt+0x1017c>
   21dac:	tst	r6, #32
   21db0:	bne	21e28 <__assert_fail@plt+0x1017c>
   21db4:	tst	r6, #16
   21db8:	bne	222b4 <__assert_fail@plt+0x10608>
   21dbc:	tst	r6, #131072	; 0x20000
   21dc0:	uxtbeq	r1, r0
   21dc4:	cmpeq	r1, #9
   21dc8:	beq	222fc <__assert_fail@plt+0x10650>
   21dcc:	mov	r1, #1
   21dd0:	bfi	r0, r1, #0, #8
   21dd4:	str	r0, [lr, #4]
   21dd8:	ldr	r1, [r8, #64]	; 0x40
   21ddc:	cmp	r1, #31
   21de0:	beq	23b90 <__assert_fail@plt+0x11ee4>
   21de4:	ldr	r0, [r8, #56]	; 0x38
   21de8:	add	r2, r1, #1
   21dec:	add	r7, r0, r1, lsl #5
   21df0:	mov	r0, #0
   21df4:	str	r2, [r8, #64]	; 0x40
   21df8:	str	r0, [r7, #4]!
   21dfc:	str	r0, [r7, #4]
   21e00:	str	r0, [r7, #8]
   21e04:	ldm	lr, {r1, r2}
   21e08:	str	r0, [r7, #12]
   21e0c:	str	r0, [r7, #16]
   21e10:	mvn	r0, #0
   21e14:	str	r0, [r7, #28]
   21e18:	bic	r0, r2, #786432	; 0xc0000
   21e1c:	str	r1, [r7, #20]
   21e20:	str	r0, [r7, #24]
   21e24:	b	22cd4 <__assert_fail@plt+0x11028>
   21e28:	mov	r0, #13
   21e2c:	b	22bd8 <__assert_fail@plt+0x10f2c>
   21e30:	ldr	r0, [lr]
   21e34:	ldr	r2, [r8, #84]	; 0x54
   21e38:	mov	r1, #1
   21e3c:	tst	r2, r1, lsl r0
   21e40:	beq	23bd4 <__assert_fail@plt+0x11f28>
   21e44:	lsl	r0, r1, r0
   21e48:	ldr	r1, [r8, #64]	; 0x40
   21e4c:	ldr	r2, [r8, #80]	; 0x50
   21e50:	orr	r0, r2, r0
   21e54:	cmp	r1, #31
   21e58:	str	r0, [r8, #80]	; 0x50
   21e5c:	beq	23c4c <__assert_fail@plt+0x11fa0>
   21e60:	ldr	r0, [r8, #56]	; 0x38
   21e64:	add	r2, r1, #1
   21e68:	add	r7, r0, r1, lsl #5
   21e6c:	mov	r0, #0
   21e70:	str	r2, [r8, #64]	; 0x40
   21e74:	str	r0, [r7, #4]!
   21e78:	str	r0, [r7, #4]
   21e7c:	str	r0, [r7, #8]
   21e80:	ldm	lr, {r1, r2}
   21e84:	str	r0, [r7, #12]
   21e88:	str	r0, [r7, #16]
   21e8c:	mvn	r0, #0
   21e90:	str	r0, [r7, #28]
   21e94:	bic	r0, r2, #786432	; 0xc0000
   21e98:	str	r1, [r7, #20]
   21e9c:	str	r0, [r7, #24]
   21ea0:	ldr	r0, [r8, #76]	; 0x4c
   21ea4:	add	r0, r0, #1
   21ea8:	str	r0, [r8, #76]	; 0x4c
   21eac:	b	21f08 <__assert_fail@plt+0x1025c>
   21eb0:	ldr	r1, [r8, #64]	; 0x40
   21eb4:	cmp	r1, #31
   21eb8:	beq	23bdc <__assert_fail@plt+0x11f30>
   21ebc:	ldr	r0, [r8, #56]	; 0x38
   21ec0:	add	r2, r1, #1
   21ec4:	add	r7, r0, r1, lsl #5
   21ec8:	mov	r0, #0
   21ecc:	str	r2, [r8, #64]	; 0x40
   21ed0:	str	r0, [r7, #4]!
   21ed4:	str	r0, [r7, #4]
   21ed8:	str	r0, [r7, #8]
   21edc:	ldm	lr, {r1, r2}
   21ee0:	str	r0, [r7, #12]
   21ee4:	str	r0, [r7, #16]
   21ee8:	mvn	r0, #0
   21eec:	str	r0, [r7, #28]
   21ef0:	bic	r0, r2, #786432	; 0xc0000
   21ef4:	str	r1, [r7, #20]
   21ef8:	str	r0, [r7, #24]
   21efc:	ldr	r0, [r8, #92]	; 0x5c
   21f00:	cmp	r0, #2
   21f04:	blt	22cd4 <__assert_fail@plt+0x11028>
   21f08:	ldrb	r0, [r8, #88]	; 0x58
   21f0c:	orr	r0, r0, #2
   21f10:	strb	r0, [r8, #88]	; 0x58
   21f14:	b	22cd4 <__assert_fail@plt+0x11028>
   21f18:	ldr	r4, [r7, #24]
   21f1c:	mov	sl, r6
   21f20:	orr	r2, r6, #8388608	; 0x800000
   21f24:	ldr	r6, [sp, #24]
   21f28:	ldr	r5, [fp, #8]
   21f2c:	add	r0, r4, #1
   21f30:	mov	r1, r6
   21f34:	str	r0, [r7, #24]
   21f38:	mov	r0, lr
   21f3c:	bl	210bc <__assert_fail@plt+0xf410>
   21f40:	ldr	r1, [r6, #40]	; 0x28
   21f44:	ldr	lr, [sp, #44]	; 0x2c
   21f48:	mov	r9, #0
   21f4c:	add	r0, r1, r0
   21f50:	str	r0, [r6, #40]	; 0x28
   21f54:	ldrb	r0, [lr, #4]
   21f58:	cmp	r0, #9
   21f5c:	beq	22c68 <__assert_fail@plt+0x10fbc>
   21f60:	add	r0, r5, #1
   21f64:	mov	r1, r7
   21f68:	mov	r2, lr
   21f6c:	mov	r3, sl
   21f70:	mov	r6, lr
   21f74:	str	r0, [sp]
   21f78:	ldr	r5, [sp, #16]
   21f7c:	str	r5, [sp, #4]
   21f80:	ldr	r0, [sp, #24]
   21f84:	bl	20e4c <__assert_fail@plt+0xf1a0>
   21f88:	mov	r9, r0
   21f8c:	ldr	r0, [r5]
   21f90:	cmp	r0, #0
   21f94:	beq	22c58 <__assert_fail@plt+0x10fac>
   21f98:	mov	sl, #0
   21f9c:	b	23a38 <__assert_fail@plt+0x11d8c>
   21fa0:	ldr	r0, [lr]
   21fa4:	ldr	r7, [sp, #24]
   21fa8:	movw	r1, #783	; 0x30f
   21fac:	tst	r0, r1
   21fb0:	beq	21ff8 <__assert_fail@plt+0x1034c>
   21fb4:	ldrb	r0, [r8, #88]	; 0x58
   21fb8:	tst	r0, #16
   21fbc:	bne	21ff4 <__assert_fail@plt+0x10348>
   21fc0:	orr	r1, r0, #16
   21fc4:	tst	r0, #8
   21fc8:	strb	r1, [r8, #88]	; 0x58
   21fcc:	bne	23ea8 <__assert_fail@plt+0x121fc>
   21fd0:	add	r1, pc, #824	; 0x338
   21fd4:	tst	r0, #4
   21fd8:	vld1.64	{d16-d17}, [r1 :128]
   21fdc:	add	r1, r8, #96	; 0x60
   21fe0:	vst1.32	{d16-d17}, [r1]
   21fe4:	beq	23eb4 <__assert_fail@plt+0x12208>
   21fe8:	vmov.i32	q8, #0	; 0x00000000
   21fec:	add	r0, r8, #112	; 0x70
   21ff0:	vst1.32	{d16-d17}, [r0]
   21ff4:	ldr	r0, [lr]
   21ff8:	cmp	r0, #512	; 0x200
   21ffc:	beq	22acc <__assert_fail@plt+0x10e20>
   22000:	cmp	r0, #256	; 0x100
   22004:	bne	22be4 <__assert_fail@plt+0x10f38>
   22008:	mov	r0, #6
   2200c:	mov	r4, r8
   22010:	str	r0, [lr]
   22014:	ldr	r1, [r4, #64]!	; 0x40
   22018:	cmp	r1, #31
   2201c:	beq	23dfc <__assert_fail@plt+0x12150>
   22020:	ldr	r0, [r8, #56]	; 0x38
   22024:	add	r2, r1, #1
   22028:	add	r5, r0, r1, lsl #5
   2202c:	mov	r0, #0
   22030:	str	r2, [r4]
   22034:	str	r0, [r5, #4]!
   22038:	str	r0, [r5, #4]
   2203c:	str	r0, [r5, #8]
   22040:	ldm	lr, {r1, r2}
   22044:	str	r0, [r5, #12]
   22048:	str	r0, [r5, #16]
   2204c:	mvn	r0, #0
   22050:	str	r0, [r5, #28]
   22054:	bic	r0, r2, #786432	; 0xc0000
   22058:	str	r1, [r5, #20]
   2205c:	str	r0, [r5, #24]
   22060:	mov	r0, #9
   22064:	b	22b28 <__assert_fail@plt+0x10e7c>
   22068:	ldr	r1, [r8, #64]	; 0x40
   2206c:	cmp	r1, #31
   22070:	beq	23c08 <__assert_fail@plt+0x11f5c>
   22074:	ldr	r0, [r8, #56]	; 0x38
   22078:	ldr	r3, [sp, #24]
   2207c:	add	r2, r1, #1
   22080:	add	r4, r0, r1, lsl #5
   22084:	mov	r0, #0
   22088:	str	r2, [r8, #64]	; 0x40
   2208c:	str	r0, [r4, #4]!
   22090:	str	r0, [r4, #4]
   22094:	str	r0, [r4, #8]
   22098:	ldm	lr, {r1, r2}
   2209c:	str	r0, [r4, #12]
   220a0:	str	r0, [r4, #16]
   220a4:	mvn	r0, #0
   220a8:	str	r0, [r4, #28]
   220ac:	bic	r0, r2, #786432	; 0xc0000
   220b0:	str	r1, [r4, #20]
   220b4:	str	r0, [r4, #24]
   220b8:	ldr	r0, [r8, #92]	; 0x5c
   220bc:	cmp	r0, #2
   220c0:	blt	222f4 <__assert_fail@plt+0x10648>
   220c4:	ldr	r0, [r3, #40]	; 0x28
   220c8:	ldr	r1, [r3, #56]	; 0x38
   220cc:	cmp	r1, r0
   220d0:	ble	222f4 <__assert_fail@plt+0x10648>
   220d4:	mov	r5, #0
   220d8:	mvn	sl, #0
   220dc:	mov	r9, r6
   220e0:	ldr	r6, [sp, #24]
   220e4:	ldr	r1, [r6, #28]
   220e8:	cmp	r0, r1
   220ec:	beq	23a44 <__assert_fail@plt+0x11d98>
   220f0:	ldr	r1, [r6, #8]
   220f4:	ldr	r0, [r1, r0, lsl #2]
   220f8:	cmn	r0, #1
   220fc:	bne	23a44 <__assert_fail@plt+0x11d98>
   22100:	mov	r0, lr
   22104:	mov	r1, r6
   22108:	mov	r2, r9
   2210c:	bl	210bc <__assert_fail@plt+0xf410>
   22110:	ldr	r1, [r6, #40]	; 0x28
   22114:	add	r0, r1, r0
   22118:	str	r0, [r6, #40]	; 0x28
   2211c:	ldr	r1, [r8, #64]	; 0x40
   22120:	cmp	r1, #31
   22124:	beq	221d0 <__assert_fail@plt+0x10524>
   22128:	ldr	r0, [r8, #56]	; 0x38
   2212c:	ldr	lr, [sp, #44]	; 0x2c
   22130:	add	r2, r1, #1
   22134:	add	r6, r0, r1, lsl #5
   22138:	str	r2, [r8, #64]	; 0x40
   2213c:	str	r5, [r6, #4]!
   22140:	str	r5, [r6, #4]
   22144:	str	r5, [r6, #8]
   22148:	ldm	lr, {r0, r1}
   2214c:	str	r5, [r6, #12]
   22150:	str	r5, [r6, #16]
   22154:	str	sl, [r6, #28]
   22158:	str	r0, [r6, #20]
   2215c:	bic	r0, r1, #786432	; 0xc0000
   22160:	str	r0, [r6, #24]
   22164:	ldr	r1, [r8, #64]	; 0x40
   22168:	cmp	r1, #31
   2216c:	beq	221f8 <__assert_fail@plt+0x1054c>
   22170:	ldr	r0, [r8, #56]	; 0x38
   22174:	add	r2, r1, #1
   22178:	add	r7, r0, r1, lsl #5
   2217c:	mov	r0, #16
   22180:	cmp	r6, #0
   22184:	str	r2, [r8, #64]	; 0x40
   22188:	str	r5, [r7, #4]!
   2218c:	stmib	r7, {r4, r6}
   22190:	str	r5, [r7, #12]
   22194:	str	r5, [r7, #16]
   22198:	str	r5, [r7, #20]
   2219c:	str	r0, [r7, #24]
   221a0:	str	sl, [r7, #28]
   221a4:	str	r7, [r4]
   221a8:	beq	23e94 <__assert_fail@plt+0x121e8>
   221ac:	ldr	r1, [sp, #24]
   221b0:	str	r7, [r6]
   221b4:	mov	r4, r7
   221b8:	mov	r6, r9
   221bc:	ldr	r0, [r1, #40]	; 0x28
   221c0:	ldr	r1, [r1, #56]	; 0x38
   221c4:	cmp	r1, r0
   221c8:	bgt	220dc <__assert_fail@plt+0x10430>
   221cc:	b	22cd4 <__assert_fail@plt+0x11028>
   221d0:	mov	r0, #996	; 0x3e4
   221d4:	bl	1b2f8 <__assert_fail@plt+0x964c>
   221d8:	cmp	r0, #0
   221dc:	beq	22224 <__assert_fail@plt+0x10578>
   221e0:	ldr	r1, [r8, #56]	; 0x38
   221e4:	str	r1, [r0]
   221e8:	mov	r1, #0
   221ec:	str	r1, [r8, #64]	; 0x40
   221f0:	str	r0, [r8, #56]	; 0x38
   221f4:	b	2212c <__assert_fail@plt+0x10480>
   221f8:	mov	r0, #996	; 0x3e4
   221fc:	bl	1b2f8 <__assert_fail@plt+0x964c>
   22200:	ldr	lr, [sp, #44]	; 0x2c
   22204:	cmp	r0, #0
   22208:	beq	23e94 <__assert_fail@plt+0x121e8>
   2220c:	ldr	r1, [r8, #56]	; 0x38
   22210:	str	r1, [r0]
   22214:	mov	r1, #0
   22218:	str	r1, [r8, #64]	; 0x40
   2221c:	str	r0, [r8, #56]	; 0x38
   22220:	b	22174 <__assert_fail@plt+0x104c8>
   22224:	ldr	lr, [sp, #44]	; 0x2c
   22228:	mov	r6, #0
   2222c:	b	22164 <__assert_fail@plt+0x104b8>
   22230:	mov	r0, #5
   22234:	b	22bd8 <__assert_fail@plt+0x10f2c>
   22238:	mov	sl, #0
   2223c:	mov	r0, #32
   22240:	mov	r1, #1
   22244:	str	sl, [fp, #-32]	; 0xffffffe0
   22248:	bl	1af9c <__assert_fail@plt+0x92f0>
   2224c:	mov	r4, r0
   22250:	mov	r0, #40	; 0x28
   22254:	mov	r1, #1
   22258:	bl	1af9c <__assert_fail@plt+0x92f0>
   2225c:	mov	r5, r0
   22260:	cmp	r4, #0
   22264:	cmpne	r5, #0
   22268:	beq	23c38 <__assert_fail@plt+0x11f8c>
   2226c:	str	r5, [sp, #48]	; 0x30
   22270:	mov	r2, r6
   22274:	ldr	r5, [sp, #44]	; 0x2c
   22278:	ldr	r7, [sp, #24]
   2227c:	mov	r0, r5
   22280:	mov	r1, r7
   22284:	bl	24438 <__assert_fail@plt+0x1278c>
   22288:	mov	r3, r0
   2228c:	ldr	r0, [r5, #4]
   22290:	mov	r2, r5
   22294:	uxtb	r1, r0
   22298:	cmp	r1, #25
   2229c:	beq	22320 <__assert_fail@plt+0x10674>
   222a0:	ldr	sl, [sp, #48]	; 0x30
   222a4:	cmp	r1, #2
   222a8:	beq	23bcc <__assert_fail@plt+0x11f20>
   222ac:	mov	r1, #0
   222b0:	b	22378 <__assert_fail@plt+0x106cc>
   222b4:	ldr	r4, [sp, #24]
   222b8:	mov	r0, lr
   222bc:	mov	r2, r6
   222c0:	mov	r5, lr
   222c4:	mov	r1, r4
   222c8:	bl	210bc <__assert_fail@plt+0xf410>
   222cc:	ldr	r1, [r4, #40]	; 0x28
   222d0:	mov	r2, r5
   222d4:	mov	r3, r6
   222d8:	add	r0, r1, r0
   222dc:	mov	r1, r7
   222e0:	str	r0, [r4, #40]	; 0x28
   222e4:	mov	r0, r4
   222e8:	sub	sp, fp, #28
   222ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222f0:	b	21c40 <__assert_fail@plt+0xff94>
   222f4:	mov	r7, r4
   222f8:	b	22cd4 <__assert_fail@plt+0x11028>
   222fc:	mov	r0, #16
   22300:	b	22bd8 <__assert_fail@plt+0x10f2c>
   22304:	nop	{0}
   22308:	nop	{0}
   2230c:	nop	{0}
   22310:	andeq	r0, r0, r0
   22314:	mvnseq	r0, #0
   22318:			; <UNDEFINED> instruction: 0x87fffffe
   2231c:			; <UNDEFINED> instruction: 0x07fffffe
   22320:	ldr	sl, [sp, #48]	; 0x30
   22324:	tst	r6, #256	; 0x100
   22328:	mov	r1, r7
   2232c:	ldrb	r0, [sl, #16]
   22330:	orr	r0, r0, #1
   22334:	strb	r0, [sl, #16]
   22338:	ldrne	r0, [r4]
   2233c:	orrne	r0, r0, #1024	; 0x400
   22340:	strne	r0, [r4]
   22344:	ldr	r0, [r7, #40]	; 0x28
   22348:	add	r0, r0, r3
   2234c:	str	r0, [r7, #40]	; 0x28
   22350:	mov	r0, r2
   22354:	mov	r2, r6
   22358:	bl	24438 <__assert_fail@plt+0x1278c>
   2235c:	ldr	r2, [sp, #44]	; 0x2c
   22360:	mov	r3, r0
   22364:	ldr	r0, [r2, #4]
   22368:	uxtb	r1, r0
   2236c:	cmp	r1, #2
   22370:	beq	23bcc <__assert_fail@plt+0x11f20>
   22374:	mov	r1, #1
   22378:	str	r1, [sp, #36]	; 0x24
   2237c:	uxtb	r1, r0
   22380:	str	r4, [sp, #52]	; 0x34
   22384:	str	r6, [sp, #40]	; 0x28
   22388:	cmp	r1, #21
   2238c:	ldr	r5, [sp, #40]	; 0x28
   22390:	moveq	r1, #1
   22394:	bfieq	r0, r1, #0, #8
   22398:	mov	r1, r7
   2239c:	streq	r0, [r2, #4]
   223a0:	mov	r0, #3
   223a4:	str	r0, [fp, #-40]	; 0xffffffd8
   223a8:	sub	r0, fp, #80	; 0x50
   223ac:	str	r0, [fp, #-36]	; 0xffffffdc
   223b0:	mov	r0, #1
   223b4:	str	r5, [sp]
   223b8:	str	r0, [sp, #4]
   223bc:	sub	r0, fp, #40	; 0x28
   223c0:	bl	245b0 <__assert_fail@plt+0x12904>
   223c4:	cmp	r0, #0
   223c8:	bne	23bbc <__assert_fail@plt+0x11f10>
   223cc:	and	r0, r5, #65536	; 0x10000
   223d0:	str	r0, [sp, #32]
   223d4:	mov	r0, #0
   223d8:	str	r0, [sp, #28]
   223dc:	mov	r0, #0
   223e0:	str	r0, [sp, #20]
   223e4:	ldr	r6, [sp, #24]
   223e8:	ldr	r7, [sp, #44]	; 0x2c
   223ec:	mov	r0, r7
   223f0:	mov	r1, r6
   223f4:	mov	r2, r5
   223f8:	bl	24438 <__assert_fail@plt+0x1278c>
   223fc:	ldr	r5, [fp, #-40]	; 0xffffffd8
   22400:	ldr	r4, [sp, #52]	; 0x34
   22404:	mov	r9, r0
   22408:	cmp	r5, #2
   2240c:	beq	225d8 <__assert_fail@plt+0x1092c>
   22410:	cmp	r5, #4
   22414:	bne	22454 <__assert_fail@plt+0x107a8>
   22418:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2241c:	ldr	r0, [r6, #64]	; 0x40
   22420:	mov	r2, sl
   22424:	sub	r3, fp, #32
   22428:	str	r1, [sp]
   2242c:	ldr	r1, [sp, #40]	; 0x28
   22430:	str	r1, [sp, #4]
   22434:	mov	r1, r4
   22438:	bl	24874 <__assert_fail@plt+0x12bc8>
   2243c:	ldr	r1, [sp, #16]
   22440:	ldr	lr, [sp, #44]	; 0x2c
   22444:	cmp	r0, #0
   22448:	str	r0, [r1]
   2244c:	beq	22618 <__assert_fail@plt+0x1096c>
   22450:	b	23c8c <__assert_fail@plt+0x11fe0>
   22454:	ldr	lr, [sp, #44]	; 0x2c
   22458:	mov	r7, r9
   2245c:	mov	r9, #7
   22460:	ldrb	r0, [lr, #4]
   22464:	cmp	r0, #22
   22468:	beq	22478 <__assert_fail@plt+0x107cc>
   2246c:	cmp	r0, #2
   22470:	bne	22590 <__assert_fail@plt+0x108e4>
   22474:	b	23c7c <__assert_fail@plt+0x11fd0>
   22478:	ldr	r4, [sp, #24]
   2247c:	ldr	r2, [sp, #40]	; 0x28
   22480:	mov	r6, r7
   22484:	ldr	r0, [r4, #40]	; 0x28
   22488:	mov	r1, r4
   2248c:	add	r0, r0, r7
   22490:	str	r0, [r4, #40]	; 0x28
   22494:	add	r0, sp, #56	; 0x38
   22498:	bl	24438 <__assert_fail@plt+0x1278c>
   2249c:	mov	r3, r0
   224a0:	ldrb	r0, [sp, #60]	; 0x3c
   224a4:	cmp	r0, #21
   224a8:	beq	22578 <__assert_fail@plt+0x108cc>
   224ac:	cmp	r0, #2
   224b0:	beq	23c7c <__assert_fail@plt+0x11fd0>
   224b4:	ldr	r7, [sp, #40]	; 0x28
   224b8:	mov	r0, #3
   224bc:	add	r2, sp, #56	; 0x38
   224c0:	str	r0, [fp, #-48]	; 0xffffffd0
   224c4:	add	r0, sp, #64	; 0x40
   224c8:	str	r0, [fp, #-44]	; 0xffffffd4
   224cc:	mov	r0, #1
   224d0:	str	r0, [sp, #4]
   224d4:	sub	r0, fp, #48	; 0x30
   224d8:	str	r7, [sp]
   224dc:	ldr	r4, [sp, #24]
   224e0:	mov	r1, r4
   224e4:	bl	245b0 <__assert_fail@plt+0x12904>
   224e8:	cmp	r0, #0
   224ec:	bne	23bbc <__assert_fail@plt+0x11f10>
   224f0:	ldr	r0, [sp, #44]	; 0x2c
   224f4:	mov	r1, r4
   224f8:	mov	r2, r7
   224fc:	bl	24438 <__assert_fail@plt+0x1278c>
   22500:	ldr	r4, [fp, #-48]	; 0xffffffd0
   22504:	mov	r9, #11
   22508:	str	r0, [sp, #12]
   2250c:	cmp	r4, #2
   22510:	cmpne	r4, #4
   22514:	beq	23c7c <__assert_fail@plt+0x11fd0>
   22518:	cmp	r5, #3
   2251c:	bne	22530 <__assert_fail@plt+0x10884>
   22520:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22524:	bl	11ac0 <strlen@plt>
   22528:	cmp	r0, #1
   2252c:	bhi	23c78 <__assert_fail@plt+0x11fcc>
   22530:	cmp	r4, #3
   22534:	bne	22548 <__assert_fail@plt+0x1089c>
   22538:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2253c:	bl	11ac0 <strlen@plt>
   22540:	cmp	r0, #1
   22544:	bhi	23c78 <__assert_fail@plt+0x11fcc>
   22548:	ldr	lr, [sp, #44]	; 0x2c
   2254c:	cmp	r5, #3
   22550:	beq	226cc <__assert_fail@plt+0x10a20>
   22554:	mov	r7, #0
   22558:	cmp	r5, #0
   2255c:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   22560:	cmp	r4, #3
   22564:	beq	226dc <__assert_fail@plt+0x10a30>
   22568:	mov	sl, #0
   2256c:	cmp	r4, #0
   22570:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   22574:	b	226e4 <__assert_fail@plt+0x10a38>
   22578:	ldr	r0, [r4, #40]	; 0x28
   2257c:	ldr	lr, [sp, #44]	; 0x2c
   22580:	sub	r0, r0, r6
   22584:	str	r0, [r4, #40]	; 0x28
   22588:	mov	r0, #1
   2258c:	strb	r0, [lr, #4]
   22590:	cmp	r5, #1
   22594:	beq	22670 <__assert_fail@plt+0x109c4>
   22598:	ldr	r6, [sp, #24]
   2259c:	ldr	r4, [sp, #52]	; 0x34
   225a0:	ldr	sl, [sp, #48]	; 0x30
   225a4:	cmp	r5, #2
   225a8:	mov	r9, r7
   225ac:	beq	225d8 <__assert_fail@plt+0x1092c>
   225b0:	cmp	r5, #3
   225b4:	bne	226a8 <__assert_fail@plt+0x109fc>
   225b8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   225bc:	mov	r0, r7
   225c0:	bl	11ac0 <strlen@plt>
   225c4:	cmp	r0, #1
   225c8:	mov	r3, #1
   225cc:	bne	23c78 <__assert_fail@plt+0x11fcc>
   225d0:	ldrb	r0, [r7]
   225d4:	b	225f4 <__assert_fail@plt+0x10948>
   225d8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   225dc:	mov	r0, r7
   225e0:	bl	11ac0 <strlen@plt>
   225e4:	cmp	r0, #1
   225e8:	bne	23c78 <__assert_fail@plt+0x11fcc>
   225ec:	ldrb	r0, [r7]
   225f0:	mov	r3, #1
   225f4:	ubfx	r1, r0, #5, #3
   225f8:	and	r0, r0, #31
   225fc:	ldr	r2, [r4, r1, lsl #2]
   22600:	orr	r0, r2, r3, lsl r0
   22604:	str	r0, [r4, r1, lsl #2]
   22608:	mov	r1, #0
   2260c:	ldr	r0, [sp, #16]
   22610:	ldr	lr, [sp, #44]	; 0x2c
   22614:	str	r1, [r0]
   22618:	ldrb	r0, [lr, #4]
   2261c:	cmp	r0, #21
   22620:	beq	22890 <__assert_fail@plt+0x10be4>
   22624:	cmp	r0, #2
   22628:	beq	23bc4 <__assert_fail@plt+0x11f18>
   2262c:	mov	r0, #3
   22630:	ldr	r5, [sp, #40]	; 0x28
   22634:	mov	r1, r6
   22638:	mov	r2, lr
   2263c:	mov	r3, r9
   22640:	mov	r7, lr
   22644:	str	r0, [fp, #-40]	; 0xffffffd8
   22648:	sub	r0, fp, #80	; 0x50
   2264c:	str	r0, [fp, #-36]	; 0xffffffdc
   22650:	mov	r0, #0
   22654:	str	r0, [sp, #4]
   22658:	sub	r0, fp, #40	; 0x28
   2265c:	str	r5, [sp]
   22660:	bl	245b0 <__assert_fail@plt+0x12904>
   22664:	cmp	r0, #0
   22668:	beq	223ec <__assert_fail@plt+0x10740>
   2266c:	b	23bbc <__assert_fail@plt+0x11f10>
   22670:	ldr	sl, [sp, #48]	; 0x30
   22674:	ldr	r0, [sp, #28]
   22678:	ldr	r4, [sp, #52]	; 0x34
   2267c:	ldr	r1, [sl, #20]
   22680:	cmp	r0, r1
   22684:	beq	227fc <__assert_fail@plt+0x10b50>
   22688:	ldr	r0, [sl]
   2268c:	ldr	r6, [sp, #24]
   22690:	ldr	r3, [fp, #-36]	; 0xffffffdc
   22694:	add	r2, r1, #1
   22698:	mov	r9, r7
   2269c:	str	r2, [sl, #20]
   226a0:	str	r3, [r0, r1, lsl #2]
   226a4:	b	22618 <__assert_fail@plt+0x1096c>
   226a8:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   226ac:	mov	r3, #1
   226b0:	ubfx	r1, r0, #5, #3
   226b4:	ldr	lr, [sp, #44]	; 0x2c
   226b8:	and	r0, r0, #31
   226bc:	ldr	r2, [r4, r1, lsl #2]
   226c0:	orr	r0, r2, r3, lsl r0
   226c4:	str	r0, [r4, r1, lsl #2]
   226c8:	b	22618 <__assert_fail@plt+0x1096c>
   226cc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   226d0:	ldrb	r7, [r0]
   226d4:	cmp	r4, #3
   226d8:	bne	22568 <__assert_fail@plt+0x108bc>
   226dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   226e0:	ldrb	sl, [r0]
   226e4:	cmp	r5, #3
   226e8:	cmpne	r5, #0
   226ec:	bne	22710 <__assert_fail@plt+0x10a64>
   226f0:	ldr	r0, [r8, #92]	; 0x5c
   226f4:	cmp	r0, #2
   226f8:	blt	22714 <__assert_fail@plt+0x10a68>
   226fc:	mov	r0, r7
   22700:	bl	11b38 <btowc@plt>
   22704:	ldr	lr, [sp, #44]	; 0x2c
   22708:	mov	r7, r0
   2270c:	b	22714 <__assert_fail@plt+0x10a68>
   22710:	ldr	r7, [fp, #-36]	; 0xffffffdc
   22714:	cmp	r4, #3
   22718:	cmpne	r4, #0
   2271c:	bne	22740 <__assert_fail@plt+0x10a94>
   22720:	ldr	r0, [r8, #92]	; 0x5c
   22724:	cmp	r0, #2
   22728:	blt	22744 <__assert_fail@plt+0x10a98>
   2272c:	mov	r0, sl
   22730:	bl	11b38 <btowc@plt>
   22734:	ldr	lr, [sp, #44]	; 0x2c
   22738:	mov	sl, r0
   2273c:	b	22744 <__assert_fail@plt+0x10a98>
   22740:	ldr	sl, [fp, #-44]	; 0xffffffd4
   22744:	cmn	r7, #1
   22748:	mov	r9, #3
   2274c:	cmnne	sl, #1
   22750:	beq	23c7c <__assert_fail@plt+0x11fd0>
   22754:	ldr	r0, [sp, #32]
   22758:	cmp	r0, #0
   2275c:	beq	2276c <__assert_fail@plt+0x10ac0>
   22760:	cmp	r7, sl
   22764:	mov	r9, #11
   22768:	bhi	23c7c <__assert_fail@plt+0x11fd0>
   2276c:	ldr	r0, [r8, #92]	; 0x5c
   22770:	cmp	r0, #2
   22774:	blt	227b0 <__assert_fail@plt+0x10b04>
   22778:	ldr	r4, [sp, #48]	; 0x30
   2277c:	ldr	r1, [sp, #20]
   22780:	mov	r5, #1
   22784:	ldr	r0, [r4, #32]
   22788:	cmp	r1, r0
   2278c:	beq	2283c <__assert_fail@plt+0x10b90>
   22790:	ldmib	r4, {r6, r9}
   22794:	str	r7, [r6, r0, lsl #2]
   22798:	ldr	r0, [r4, #32]
   2279c:	add	r1, r0, #1
   227a0:	str	r1, [r4, #32]
   227a4:	ldr	r4, [sp, #52]	; 0x34
   227a8:	str	sl, [r9, r0, lsl #2]
   227ac:	b	227b8 <__assert_fail@plt+0x10b0c>
   227b0:	ldr	r4, [sp, #52]	; 0x34
   227b4:	mov	r5, #1
   227b8:	ldr	r6, [sp, #24]
   227bc:	ldr	r9, [sp, #12]
   227c0:	mov	r0, #0
   227c4:	cmp	r7, r0
   227c8:	cmpls	r0, sl
   227cc:	ubfxls	r1, r0, #5, #3
   227d0:	andls	r3, r0, #31
   227d4:	add	r0, r0, #1
   227d8:	ldrls	r2, [r4, r1, lsl #2]
   227dc:	orrls	r2, r2, r5, lsl r3
   227e0:	strls	r2, [r4, r1, lsl #2]
   227e4:	cmp	r0, #256	; 0x100
   227e8:	bne	227c4 <__assert_fail@plt+0x10b18>
   227ec:	ldr	r0, [sp, #16]
   227f0:	ldr	sl, [sp, #48]	; 0x30
   227f4:	mov	r1, #0
   227f8:	b	22614 <__assert_fail@plt+0x10968>
   227fc:	ldr	r1, [sp, #28]
   22800:	mov	r0, #1
   22804:	orr	r1, r0, r1, lsl #1
   22808:	ldr	r0, [sl]
   2280c:	str	r1, [sp, #28]
   22810:	lsl	r1, r1, #2
   22814:	bl	1b388 <__assert_fail@plt+0x96dc>
   22818:	cmp	r0, #0
   2281c:	beq	24048 <__assert_fail@plt+0x1239c>
   22820:	ldr	sl, [sp, #48]	; 0x30
   22824:	ldr	r6, [sp, #24]
   22828:	ldr	lr, [sp, #44]	; 0x2c
   2282c:	ldr	r4, [sp, #52]	; 0x34
   22830:	str	r0, [sl]
   22834:	ldr	r1, [sl, #20]
   22838:	b	22690 <__assert_fail@plt+0x109e4>
   2283c:	ldr	r0, [sp, #20]
   22840:	orr	r0, r5, r0, lsl #1
   22844:	lsl	r9, r0, #2
   22848:	str	r0, [sp, #20]
   2284c:	ldr	r0, [r4, #4]
   22850:	mov	r1, r9
   22854:	bl	1b388 <__assert_fail@plt+0x96dc>
   22858:	mov	r6, r0
   2285c:	ldr	r0, [r4, #8]
   22860:	mov	r1, r9
   22864:	bl	1b388 <__assert_fail@plt+0x96dc>
   22868:	mov	r9, r0
   2286c:	cmp	r6, #0
   22870:	cmpne	r9, #0
   22874:	beq	24064 <__assert_fail@plt+0x123b8>
   22878:	ldr	r4, [sp, #48]	; 0x30
   2287c:	mov	r5, #1
   22880:	stmib	r4, {r6, r9}
   22884:	ldr	r0, [r4, #32]
   22888:	ldr	lr, [sp, #44]	; 0x2c
   2288c:	b	22794 <__assert_fail@plt+0x10ae8>
   22890:	ldr	r0, [r6, #40]	; 0x28
   22894:	add	r0, r0, r9
   22898:	str	r0, [r6, #40]	; 0x28
   2289c:	ldr	r0, [sp, #36]	; 0x24
   228a0:	cmp	r0, #0
   228a4:	beq	228c4 <__assert_fail@plt+0x10c18>
   228a8:	vld1.32	{d16-d17}, [r4]
   228ac:	mov	r0, r4
   228b0:	vmvn	q8, q8
   228b4:	vst1.32	{d16-d17}, [r0]!
   228b8:	vld1.32	{d16-d17}, [r0]
   228bc:	vmvn	q8, q8
   228c0:	vst1.32	{d16-d17}, [r0]
   228c4:	ldr	r0, [r8, #92]	; 0x5c
   228c8:	cmp	r0, #2
   228cc:	blt	22948 <__assert_fail@plt+0x10c9c>
   228d0:	ldm	r4, {r1, r2, r3, r7}
   228d4:	ldr	r6, [r8, #60]	; 0x3c
   228d8:	ldr	r5, [r6]
   228dc:	and	r1, r1, r5
   228e0:	str	r1, [r4]
   228e4:	ldr	r1, [r6, #4]
   228e8:	and	r1, r2, r1
   228ec:	str	r1, [r4, #4]
   228f0:	ldr	r1, [r6, #8]
   228f4:	and	r1, r3, r1
   228f8:	str	r1, [r4, #8]
   228fc:	ldr	r1, [r6, #12]
   22900:	and	r1, r7, r1
   22904:	str	r1, [r4, #12]
   22908:	ldr	r1, [r4, #16]
   2290c:	ldr	r2, [r6, #16]
   22910:	and	r1, r1, r2
   22914:	str	r1, [r4, #16]
   22918:	ldr	r1, [r6, #20]
   2291c:	ldr	r2, [r4, #20]
   22920:	and	r1, r2, r1
   22924:	str	r1, [r4, #20]
   22928:	ldr	r1, [r6, #24]
   2292c:	ldr	r2, [r4, #24]
   22930:	and	r1, r2, r1
   22934:	str	r1, [r4, #24]
   22938:	ldr	r1, [r6, #28]
   2293c:	ldr	r2, [r4, #28]
   22940:	and	r1, r2, r1
   22944:	str	r1, [r4, #28]
   22948:	ldr	r1, [sl, #20]
   2294c:	ldr	r6, [sp, #40]	; 0x28
   22950:	cmp	r1, #0
   22954:	bne	2297c <__assert_fail@plt+0x10cd0>
   22958:	ldr	r1, [sl, #24]
   2295c:	cmp	r1, #0
   22960:	bne	2297c <__assert_fail@plt+0x10cd0>
   22964:	ldr	r1, [sl, #28]
   22968:	cmp	r1, #0
   2296c:	bne	2297c <__assert_fail@plt+0x10cd0>
   22970:	ldr	r1, [sl, #32]
   22974:	cmp	r1, #0
   22978:	beq	23af4 <__assert_fail@plt+0x11e48>
   2297c:	ldrb	r0, [r8, #88]	; 0x58
   22980:	orr	r0, r0, #2
   22984:	strb	r0, [r8, #88]	; 0x58
   22988:	ldr	r1, [r8, #64]	; 0x40
   2298c:	cmp	r1, #31
   22990:	beq	23cd4 <__assert_fail@plt+0x12028>
   22994:	ldr	r0, [r8, #56]	; 0x38
   22998:	add	r2, r1, #1
   2299c:	add	r0, r0, r1, lsl #5
   229a0:	mov	r1, #6
   229a4:	vmov.i32	q8, #0	; 0x00000000
   229a8:	str	r2, [r8, #64]	; 0x40
   229ac:	mov	r2, #0
   229b0:	add	r9, r0, #4
   229b4:	str	r2, [r0, #20]
   229b8:	str	sl, [r0, #24]
   229bc:	str	r1, [r0, #28]
   229c0:	mov	r0, #28
   229c4:	mov	r1, r9
   229c8:	vst1.32	{d16-d17}, [r1], r0
   229cc:	mvn	r0, #0
   229d0:	str	r0, [r1]
   229d4:	ldr	r0, [r4]
   229d8:	cmp	r0, #0
   229dc:	bne	22a34 <__assert_fail@plt+0x10d88>
   229e0:	ldr	r0, [r4, #4]
   229e4:	cmp	r0, #0
   229e8:	bne	22a34 <__assert_fail@plt+0x10d88>
   229ec:	ldr	r0, [r4, #8]
   229f0:	cmp	r0, #0
   229f4:	bne	22a34 <__assert_fail@plt+0x10d88>
   229f8:	ldr	r0, [r4, #12]
   229fc:	cmp	r0, #0
   22a00:	bne	22a34 <__assert_fail@plt+0x10d88>
   22a04:	ldr	r0, [r4, #16]
   22a08:	cmp	r0, #0
   22a0c:	bne	22a34 <__assert_fail@plt+0x10d88>
   22a10:	ldr	r0, [r4, #20]
   22a14:	cmp	r0, #0
   22a18:	bne	22a34 <__assert_fail@plt+0x10d88>
   22a1c:	ldr	r0, [r4, #24]
   22a20:	cmp	r0, #0
   22a24:	bne	22a34 <__assert_fail@plt+0x10d88>
   22a28:	ldr	r0, [r4, #28]
   22a2c:	cmp	r0, #0
   22a30:	beq	23d88 <__assert_fail@plt+0x120dc>
   22a34:	ldr	r1, [r8, #64]	; 0x40
   22a38:	cmp	r1, #31
   22a3c:	beq	23d00 <__assert_fail@plt+0x12054>
   22a40:	ldr	r0, [r8, #56]	; 0x38
   22a44:	add	r2, r1, #1
   22a48:	add	r0, r0, r1, lsl #5
   22a4c:	mov	r1, #3
   22a50:	vmov.i32	q8, #0	; 0x00000000
   22a54:	str	r2, [r8, #64]	; 0x40
   22a58:	mov	r2, #0
   22a5c:	add	r5, r0, #4
   22a60:	str	r2, [r0, #20]
   22a64:	str	r4, [r0, #24]
   22a68:	str	r1, [r0, #28]
   22a6c:	mov	r0, #28
   22a70:	mov	r1, r5
   22a74:	vst1.32	{d16-d17}, [r1], r0
   22a78:	mvn	r0, #0
   22a7c:	str	r0, [r1]
   22a80:	ldr	r1, [r8, #64]	; 0x40
   22a84:	cmp	r1, #31
   22a88:	beq	23d2c <__assert_fail@plt+0x12080>
   22a8c:	ldr	r0, [r8, #56]	; 0x38
   22a90:	add	r2, r1, #1
   22a94:	add	r7, r0, r1, lsl #5
   22a98:	mov	r0, #0
   22a9c:	mov	r1, #10
   22aa0:	str	r2, [r8, #64]	; 0x40
   22aa4:	str	r0, [r7, #4]!
   22aa8:	mvn	r2, #0
   22aac:	add	r3, r7, #20
   22ab0:	stmib	r7, {r5, r9}
   22ab4:	str	r0, [r7, #12]
   22ab8:	str	r0, [r7, #16]
   22abc:	stm	r3, {r0, r1, r2}
   22ac0:	str	r7, [r5]
   22ac4:	str	r7, [r9]
   22ac8:	b	22cd4 <__assert_fail@plt+0x11028>
   22acc:	mov	r0, #5
   22ad0:	mov	r4, r8
   22ad4:	str	r0, [lr]
   22ad8:	ldr	r1, [r4, #64]!	; 0x40
   22adc:	cmp	r1, #31
   22ae0:	beq	23e30 <__assert_fail@plt+0x12184>
   22ae4:	ldr	r0, [r8, #56]	; 0x38
   22ae8:	add	r2, r1, #1
   22aec:	add	r5, r0, r1, lsl #5
   22af0:	mov	r0, #0
   22af4:	str	r2, [r4]
   22af8:	str	r0, [r5, #4]!
   22afc:	str	r0, [r5, #4]
   22b00:	str	r0, [r5, #8]
   22b04:	ldm	lr, {r1, r2}
   22b08:	str	r0, [r5, #12]
   22b0c:	str	r0, [r5, #16]
   22b10:	mvn	r0, #0
   22b14:	str	r0, [r5, #28]
   22b18:	bic	r0, r2, #786432	; 0xc0000
   22b1c:	str	r1, [r5, #20]
   22b20:	str	r0, [r5, #24]
   22b24:	mov	r0, #10
   22b28:	str	r0, [lr]
   22b2c:	mov	r9, r6
   22b30:	ldr	r1, [r4]
   22b34:	cmp	r1, #31
   22b38:	beq	23d9c <__assert_fail@plt+0x120f0>
   22b3c:	ldr	r0, [r8, #56]	; 0x38
   22b40:	add	r2, r1, #1
   22b44:	add	r6, r0, r1, lsl #5
   22b48:	mov	r0, #0
   22b4c:	str	r2, [r4]
   22b50:	str	r0, [r6, #4]!
   22b54:	str	r0, [r6, #4]
   22b58:	str	r0, [r6, #8]
   22b5c:	ldm	lr, {r1, r2}
   22b60:	str	r0, [r6, #12]
   22b64:	str	r0, [r6, #16]
   22b68:	mvn	r0, #0
   22b6c:	str	r0, [r6, #28]
   22b70:	bic	r0, r2, #786432	; 0xc0000
   22b74:	str	r1, [r6, #20]
   22b78:	str	r0, [r6, #24]
   22b7c:	ldr	r1, [r4]
   22b80:	cmp	r1, #31
   22b84:	beq	23dd0 <__assert_fail@plt+0x12124>
   22b88:	ldr	r0, [r8, #56]	; 0x38
   22b8c:	add	r2, r1, #1
   22b90:	cmp	r5, #0
   22b94:	str	r2, [r4]
   22b98:	add	r4, r0, r1, lsl #5
   22b9c:	mov	r0, #0
   22ba0:	mov	r1, #10
   22ba4:	mvn	r2, #0
   22ba8:	str	r0, [r4, #4]!
   22bac:	add	r3, r4, #20
   22bb0:	stmib	r4, {r5, r6}
   22bb4:	str	r0, [r4, #12]
   22bb8:	str	r0, [r4, #16]
   22bbc:	stm	r3, {r0, r1, r2}
   22bc0:	strne	r4, [r5]
   22bc4:	cmp	r6, #0
   22bc8:	strne	r4, [r6]
   22bcc:	cmpne	r5, #0
   22bd0:	bne	22c34 <__assert_fail@plt+0x10f88>
   22bd4:	mov	r0, #12
   22bd8:	ldr	r1, [sp, #16]
   22bdc:	str	r0, [r1]
   22be0:	b	23a38 <__assert_fail@plt+0x11d8c>
   22be4:	ldr	r1, [r8, #64]	; 0x40
   22be8:	mov	r9, r6
   22bec:	cmp	r1, #31
   22bf0:	beq	23e64 <__assert_fail@plt+0x121b8>
   22bf4:	ldr	r0, [r8, #56]	; 0x38
   22bf8:	add	r2, r1, #1
   22bfc:	add	r4, r0, r1, lsl #5
   22c00:	mov	r0, #0
   22c04:	str	r2, [r8, #64]	; 0x40
   22c08:	str	r0, [r4, #4]!
   22c0c:	str	r0, [r4, #4]
   22c10:	str	r0, [r4, #8]
   22c14:	ldm	lr, {r1, r2}
   22c18:	str	r0, [r4, #12]
   22c1c:	str	r0, [r4, #16]
   22c20:	mvn	r0, #0
   22c24:	str	r0, [r4, #28]
   22c28:	bic	r0, r2, #786432	; 0xc0000
   22c2c:	str	r1, [r4, #20]
   22c30:	str	r0, [r4, #24]
   22c34:	mov	r0, lr
   22c38:	mov	r1, r7
   22c3c:	mov	r2, r9
   22c40:	bl	210bc <__assert_fail@plt+0xf410>
   22c44:	ldr	r1, [r7, #40]	; 0x28
   22c48:	mov	sl, r4
   22c4c:	add	r0, r1, r0
   22c50:	str	r0, [r7, #40]	; 0x28
   22c54:	b	23a38 <__assert_fail@plt+0x11d8c>
   22c58:	ldrb	r0, [r6, #4]
   22c5c:	cmp	r0, #9
   22c60:	bne	23f50 <__assert_fail@plt+0x122a4>
   22c64:	mov	lr, r6
   22c68:	cmp	r4, #8
   22c6c:	ldrls	r0, [r8, #84]	; 0x54
   22c70:	movls	r1, #1
   22c74:	orrls	r0, r0, r1, lsl r4
   22c78:	strls	r0, [r8, #84]	; 0x54
   22c7c:	ldr	r1, [r8, #64]	; 0x40
   22c80:	cmp	r1, #31
   22c84:	beq	23d58 <__assert_fail@plt+0x120ac>
   22c88:	ldr	r0, [r8, #56]	; 0x38
   22c8c:	mov	r6, sl
   22c90:	add	r0, r0, r1, lsl #5
   22c94:	add	r2, r1, #1
   22c98:	mov	r1, #0
   22c9c:	mvn	r3, #0
   22ca0:	cmp	r9, #0
   22ca4:	mov	r7, r0
   22ca8:	str	r2, [r8, #64]	; 0x40
   22cac:	mov	r2, #17
   22cb0:	str	r1, [r7, #4]!
   22cb4:	add	ip, r7, #20
   22cb8:	str	r9, [r7, #4]
   22cbc:	str	r1, [r7, #8]
   22cc0:	str	r1, [r7, #12]
   22cc4:	str	r1, [r7, #16]
   22cc8:	stm	ip, {r1, r2, r3}
   22ccc:	strne	r7, [r9]
   22cd0:	str	r4, [r0, #24]
   22cd4:	mov	r4, r6
   22cd8:	ldr	r6, [sp, #24]
   22cdc:	mov	r0, lr
   22ce0:	mov	r2, r4
   22ce4:	mov	r1, r6
   22ce8:	bl	210bc <__assert_fail@plt+0xf410>
   22cec:	ldr	r1, [r6, #40]	; 0x28
   22cf0:	ldr	ip, [sp, #44]	; 0x2c
   22cf4:	add	r0, r1, r0
   22cf8:	str	r0, [r6, #40]	; 0x28
   22cfc:	add	r0, r8, #56	; 0x38
   22d00:	add	r8, r8, #64	; 0x40
   22d04:	str	r0, [sp, #20]
   22d08:	and	r0, r4, #2097152	; 0x200000
   22d0c:	str	r0, [sp, #12]
   22d10:	str	r4, [sp, #40]	; 0x28
   22d14:	and	r0, r4, #16777216	; 0x1000000
   22d18:	mov	r4, #0
   22d1c:	str	r0, [sp, #28]
   22d20:	ldrb	r0, [ip, #4]
   22d24:	mov	sl, r7
   22d28:	cmp	r0, #23
   22d2c:	bhi	23a38 <__assert_fail@plt+0x11d8c>
   22d30:	movw	r2, #2048	; 0x800
   22d34:	mov	r1, #1
   22d38:	movt	r2, #140	; 0x8c
   22d3c:	tst	r2, r1, lsl r0
   22d40:	beq	23a38 <__assert_fail@plt+0x11d8c>
   22d44:	cmp	r0, #23
   22d48:	str	sl, [sp, #36]	; 0x24
   22d4c:	bne	22d60 <__assert_fail@plt+0x110b4>
   22d50:	ldm	ip, {r5, sl}
   22d54:	ldr	r7, [r6, #40]	; 0x28
   22d58:	mvn	r2, #0
   22d5c:	b	22d94 <__assert_fail@plt+0x110e8>
   22d60:	cmp	r0, #19
   22d64:	sub	r0, r0, #18
   22d68:	mvn	r5, #0
   22d6c:	clz	r0, r0
   22d70:	movweq	r5, #1
   22d74:	lsr	r9, r0, #5
   22d78:	b	22f78 <__assert_fail@plt+0x112cc>
   22d7c:	add	r0, r9, r9, lsl #2
   22d80:	add	r0, r1, r0, lsl #1
   22d84:	movw	r1, #32816	; 0x8030
   22d88:	sub	r2, r0, #48	; 0x30
   22d8c:	cmp	r0, r1
   22d90:	movwgt	r2, #32768	; 0x8000
   22d94:	mov	r9, r2
   22d98:	ldr	r2, [sp, #40]	; 0x28
   22d9c:	mov	r0, ip
   22da0:	mov	r1, r6
   22da4:	bl	210bc <__assert_fail@plt+0xf410>
   22da8:	ldr	r1, [r6, #40]	; 0x28
   22dac:	ldr	ip, [sp, #44]	; 0x2c
   22db0:	add	r0, r1, r0
   22db4:	str	r0, [r6, #40]	; 0x28
   22db8:	ldrb	r0, [ip, #4]
   22dbc:	ldrb	r1, [ip]
   22dc0:	cmp	r0, #24
   22dc4:	beq	22e0c <__assert_fail@plt+0x11160>
   22dc8:	cmp	r0, #2
   22dcc:	beq	22e5c <__assert_fail@plt+0x111b0>
   22dd0:	cmp	r1, #44	; 0x2c
   22dd4:	beq	22e0c <__assert_fail@plt+0x11160>
   22dd8:	mvn	r2, #1
   22ddc:	cmp	r1, #48	; 0x30
   22de0:	bcc	22d94 <__assert_fail@plt+0x110e8>
   22de4:	cmp	r0, #1
   22de8:	bne	22d94 <__assert_fail@plt+0x110e8>
   22dec:	cmn	r9, #2
   22df0:	beq	22d94 <__assert_fail@plt+0x110e8>
   22df4:	cmp	r1, #57	; 0x39
   22df8:	bhi	22d94 <__assert_fail@plt+0x110e8>
   22dfc:	cmn	r9, #1
   22e00:	bne	22d7c <__assert_fail@plt+0x110d0>
   22e04:	sub	r2, r1, #48	; 0x30
   22e08:	b	22d94 <__assert_fail@plt+0x110e8>
   22e0c:	cmn	r9, #1
   22e10:	bne	22e3c <__assert_fail@plt+0x11190>
   22e14:	cmp	r1, #44	; 0x2c
   22e18:	moveq	r9, #0
   22e1c:	cmpeq	r0, #1
   22e20:	beq	22e84 <__assert_fail@plt+0x111d8>
   22e24:	ldr	r0, [sp, #16]
   22e28:	mov	r1, #10
   22e2c:	str	r1, [r0]
   22e30:	ldr	sl, [sp, #36]	; 0x24
   22e34:	mov	r7, #0
   22e38:	b	23948 <__assert_fail@plt+0x11c9c>
   22e3c:	cmn	r9, #2
   22e40:	mov	r2, r9
   22e44:	beq	22e5c <__assert_fail@plt+0x111b0>
   22e48:	cmp	r0, #24
   22e4c:	beq	22e90 <__assert_fail@plt+0x111e4>
   22e50:	cmp	r0, #1
   22e54:	cmpeq	r1, #44	; 0x2c
   22e58:	beq	22e84 <__assert_fail@plt+0x111d8>
   22e5c:	ldr	r1, [sp, #12]
   22e60:	cmp	r1, #0
   22e64:	beq	23524 <__assert_fail@plt+0x11878>
   22e68:	mov	r0, #1
   22e6c:	str	r7, [r6, #40]	; 0x28
   22e70:	bfi	sl, r0, #0, #8
   22e74:	stm	ip, {r5, sl}
   22e78:	ldr	sl, [sp, #36]	; 0x24
   22e7c:	mov	r7, sl
   22e80:	b	23948 <__assert_fail@plt+0x11c9c>
   22e84:	mvn	r2, #0
   22e88:	str	sl, [sp, #52]	; 0x34
   22e8c:	b	22ebc <__assert_fail@plt+0x11210>
   22e90:	ldr	sl, [sp, #36]	; 0x24
   22e94:	mov	r5, r9
   22e98:	cmp	r0, #24
   22e9c:	beq	22f64 <__assert_fail@plt+0x112b8>
   22ea0:	b	23504 <__assert_fail@plt+0x11858>
   22ea4:	add	r0, sl, sl, lsl #2
   22ea8:	add	r0, r1, r0, lsl #1
   22eac:	movw	r1, #32816	; 0x8030
   22eb0:	sub	r2, r0, #48	; 0x30
   22eb4:	cmp	r0, r1
   22eb8:	movwgt	r2, #32768	; 0x8000
   22ebc:	mov	sl, r2
   22ec0:	ldr	r2, [sp, #40]	; 0x28
   22ec4:	mov	r0, ip
   22ec8:	mov	r1, r6
   22ecc:	bl	210bc <__assert_fail@plt+0xf410>
   22ed0:	ldr	r1, [r6, #40]	; 0x28
   22ed4:	ldr	ip, [sp, #44]	; 0x2c
   22ed8:	add	r0, r1, r0
   22edc:	str	r0, [r6, #40]	; 0x28
   22ee0:	ldrb	r0, [ip, #4]
   22ee4:	cmp	r0, #24
   22ee8:	beq	22f34 <__assert_fail@plt+0x11288>
   22eec:	cmp	r0, #2
   22ef0:	beq	234cc <__assert_fail@plt+0x11820>
   22ef4:	ldrb	r1, [ip]
   22ef8:	cmp	r1, #44	; 0x2c
   22efc:	beq	22f34 <__assert_fail@plt+0x11288>
   22f00:	mvn	r2, #1
   22f04:	cmp	r1, #48	; 0x30
   22f08:	bcc	22ebc <__assert_fail@plt+0x11210>
   22f0c:	cmp	r0, #1
   22f10:	bne	22ebc <__assert_fail@plt+0x11210>
   22f14:	cmn	sl, #2
   22f18:	beq	22ebc <__assert_fail@plt+0x11210>
   22f1c:	cmp	r1, #57	; 0x39
   22f20:	bhi	22ebc <__assert_fail@plt+0x11210>
   22f24:	cmn	sl, #1
   22f28:	bne	22ea4 <__assert_fail@plt+0x111f8>
   22f2c:	sub	r2, r1, #48	; 0x30
   22f30:	b	22ebc <__assert_fail@plt+0x11210>
   22f34:	cmn	sl, #2
   22f38:	beq	234cc <__assert_fail@plt+0x11820>
   22f3c:	cmn	sl, #1
   22f40:	mov	r5, sl
   22f44:	beq	22f58 <__assert_fail@plt+0x112ac>
   22f48:	ldr	sl, [sp, #36]	; 0x24
   22f4c:	cmp	r9, r5
   22f50:	ble	22f5c <__assert_fail@plt+0x112b0>
   22f54:	b	23504 <__assert_fail@plt+0x11858>
   22f58:	ldr	sl, [sp, #36]	; 0x24
   22f5c:	cmp	r0, #24
   22f60:	bne	23504 <__assert_fail@plt+0x11858>
   22f64:	cmn	r5, #1
   22f68:	mov	r0, r5
   22f6c:	moveq	r0, r9
   22f70:	cmp	r0, #32768	; 0x8000
   22f74:	bge	23510 <__assert_fail@plt+0x11864>
   22f78:	ldr	r2, [sp, #40]	; 0x28
   22f7c:	mov	r0, ip
   22f80:	mov	r1, r6
   22f84:	bl	210bc <__assert_fail@plt+0xf410>
   22f88:	ldr	r1, [r6, #40]	; 0x28
   22f8c:	mov	r7, #0
   22f90:	cmp	sl, #0
   22f94:	add	r0, r1, r0
   22f98:	str	r0, [r6, #40]	; 0x28
   22f9c:	beq	233c8 <__assert_fail@plt+0x1171c>
   22fa0:	ldr	lr, [sp, #20]
   22fa4:	orrs	r0, r5, r9
   22fa8:	beq	233d0 <__assert_fail@plt+0x11724>
   22fac:	mov	r0, #0
   22fb0:	cmp	r9, #1
   22fb4:	mov	r7, sl
   22fb8:	str	r0, [sp, #32]
   22fbc:	ldr	ip, [sp, #44]	; 0x2c
   22fc0:	str	r5, [sp, #48]	; 0x30
   22fc4:	bge	23478 <__assert_fail@plt+0x117cc>
   22fc8:	ldrb	r0, [r7, #24]
   22fcc:	cmp	r0, #17
   22fd0:	bne	23040 <__assert_fail@plt+0x11394>
   22fd4:	ldr	r0, [r7, #20]
   22fd8:	mov	r2, r7
   22fdc:	mov	r1, r2
   22fe0:	ldr	r2, [r2, #4]
   22fe4:	cmp	r2, #0
   22fe8:	bne	22fdc <__assert_fail@plt+0x11330>
   22fec:	ldr	r2, [r1, #8]
   22ff0:	cmp	r2, #0
   22ff4:	bne	22fdc <__assert_fail@plt+0x11330>
   22ff8:	ldr	r2, [r1, #24]
   22ffc:	uxtb	r3, r2
   23000:	cmp	r3, #17
   23004:	ldreq	r3, [r1, #20]
   23008:	cmpeq	r3, r0
   2300c:	orreq	r2, r2, #524288	; 0x80000
   23010:	streq	r2, [r1, #24]
   23014:	ldr	r3, [r1]
   23018:	cmp	r3, #0
   2301c:	beq	23040 <__assert_fail@plt+0x11394>
   23020:	ldr	r2, [r3, #8]
   23024:	cmp	r2, r1
   23028:	mov	r1, r3
   2302c:	beq	22ff8 <__assert_fail@plt+0x1134c>
   23030:	cmp	r2, #0
   23034:	mov	r1, r3
   23038:	beq	22ff8 <__assert_fail@plt+0x1134c>
   2303c:	b	22fdc <__assert_fail@plt+0x11330>
   23040:	ldr	r1, [r8]
   23044:	cmn	r5, #1
   23048:	mov	r6, #10
   2304c:	movweq	r6, #11
   23050:	cmp	r1, #31
   23054:	beq	23498 <__assert_fail@plt+0x117ec>
   23058:	ldr	r0, [lr]
   2305c:	add	r2, r1, #1
   23060:	add	sl, r0, r1, lsl #5
   23064:	mvn	r0, #0
   23068:	str	r2, [r8]
   2306c:	str	r4, [sl, #4]!
   23070:	str	r7, [sl, #4]
   23074:	str	r4, [sl, #8]
   23078:	str	r4, [sl, #12]
   2307c:	str	r4, [sl, #16]
   23080:	str	r4, [sl, #20]
   23084:	str	r6, [sl, #24]
   23088:	str	r0, [sl, #28]
   2308c:	add	r0, r9, #2
   23090:	str	sl, [r7]
   23094:	cmp	r0, r5
   23098:	bgt	2335c <__assert_fail@plt+0x116b0>
   2309c:	mov	r6, sl
   230a0:	b	230b0 <__assert_fail@plt+0x11404>
   230a4:	ldr	sl, [r7]
   230a8:	mov	r0, r1
   230ac:	add	r0, r1, #1
   230b0:	ldr	r1, [r8]
   230b4:	str	r0, [sp, #52]	; 0x34
   230b8:	cmp	r1, #31
   230bc:	beq	232a8 <__assert_fail@plt+0x115fc>
   230c0:	ldr	r0, [lr]
   230c4:	add	r3, r1, #1
   230c8:	add	r9, r0, r1, lsl #5
   230cc:	add	r2, r7, #20
   230d0:	sub	r5, fp, #80	; 0x50
   230d4:	str	r3, [r8]
   230d8:	str	r4, [r9, #4]!
   230dc:	str	r4, [r9, #4]
   230e0:	str	r4, [r9, #8]
   230e4:	ldm	r2, {r0, r1}
   230e8:	mvn	r2, #0
   230ec:	str	r4, [r9, #12]
   230f0:	str	r4, [r9, #16]
   230f4:	str	r2, [r9, #28]
   230f8:	str	r0, [r9, #20]
   230fc:	bic	r0, r1, #786432	; 0xc0000
   23100:	str	r0, [r9, #24]
   23104:	mov	r0, r9
   23108:	str	r9, [fp, #-80]	; 0xffffffb0
   2310c:	b	23150 <__assert_fail@plt+0x114a4>
   23110:	add	r3, r1, #1
   23114:	add	r0, r0, r1, lsl #5
   23118:	add	r2, r7, #20
   2311c:	str	r3, [r8]
   23120:	str	r4, [r0, #4]!
   23124:	mvn	r3, #0
   23128:	str	r4, [r0, #4]
   2312c:	str	r4, [r0, #8]
   23130:	ldm	r2, {r1, r2}
   23134:	str	r4, [r0, #12]
   23138:	str	r4, [r0, #16]
   2313c:	str	r3, [r0, #28]
   23140:	str	r1, [r0, #20]
   23144:	bic	r1, r2, #786432	; 0xc0000
   23148:	str	r1, [r0, #24]
   2314c:	str	r0, [r5]
   23150:	str	sl, [r0]
   23154:	ldr	r0, [r5]
   23158:	ldr	r1, [r0, #24]
   2315c:	orr	r1, r1, #262144	; 0x40000
   23160:	str	r1, [r0, #24]
   23164:	ldr	r0, [r7, #4]
   23168:	ldr	sl, [r5]
   2316c:	cmp	r0, #0
   23170:	beq	23180 <__assert_fail@plt+0x114d4>
   23174:	add	r5, sl, #4
   23178:	mov	r7, r0
   2317c:	b	231b4 <__assert_fail@plt+0x11508>
   23180:	mov	r1, #0
   23184:	mov	r0, r7
   23188:	ldr	r7, [r7, #8]
   2318c:	cmp	r7, r1
   23190:	cmpne	r7, #0
   23194:	bne	231b0 <__assert_fail@plt+0x11504>
   23198:	ldr	r7, [r0]
   2319c:	ldr	sl, [sl]
   231a0:	mov	r1, r0
   231a4:	cmp	r7, #0
   231a8:	bne	23184 <__assert_fail@plt+0x114d8>
   231ac:	b	231f8 <__assert_fail@plt+0x1154c>
   231b0:	add	r5, sl, #8
   231b4:	ldr	r1, [r8]
   231b8:	cmp	r1, #31
   231bc:	beq	231c8 <__assert_fail@plt+0x1151c>
   231c0:	ldr	r0, [lr]
   231c4:	b	23110 <__assert_fail@plt+0x11464>
   231c8:	mov	r0, #996	; 0x3e4
   231cc:	bl	1b2f8 <__assert_fail@plt+0x964c>
   231d0:	cmp	r0, #0
   231d4:	beq	23344 <__assert_fail@plt+0x11698>
   231d8:	ldr	lr, [sp, #20]
   231dc:	ldr	ip, [sp, #44]	; 0x2c
   231e0:	ldr	r1, [lr]
   231e4:	str	r1, [r0]
   231e8:	mov	r1, #0
   231ec:	str	r0, [lr]
   231f0:	str	r1, [r8]
   231f4:	b	23110 <__assert_fail@plt+0x11464>
   231f8:	mov	r7, r9
   231fc:	ldr	r1, [r8]
   23200:	cmp	r1, #31
   23204:	beq	232d8 <__assert_fail@plt+0x1162c>
   23208:	ldr	r0, [lr]
   2320c:	add	r2, r1, #1
   23210:	add	r5, r0, r1, lsl #5
   23214:	mov	r0, #16
   23218:	cmp	r7, #0
   2321c:	str	r2, [r8]
   23220:	str	r4, [r5, #4]!
   23224:	stmib	r5, {r6, r7}
   23228:	str	r4, [r5, #12]
   2322c:	str	r4, [r5, #16]
   23230:	str	r4, [r5, #20]
   23234:	str	r0, [r5, #24]
   23238:	mvn	r0, #0
   2323c:	str	r0, [r5, #28]
   23240:	str	r5, [r6]
   23244:	beq	23930 <__assert_fail@plt+0x11c84>
   23248:	str	r5, [r7]
   2324c:	ldr	r1, [r8]
   23250:	cmp	r1, #31
   23254:	beq	23308 <__assert_fail@plt+0x1165c>
   23258:	ldr	r0, [lr]
   2325c:	add	r2, r1, #1
   23260:	add	r6, r0, r1, lsl #5
   23264:	mov	r0, #10
   23268:	ldr	r1, [sp, #52]	; 0x34
   2326c:	str	r2, [r8]
   23270:	str	r4, [r6, #4]!
   23274:	str	r5, [r6, #4]
   23278:	str	r4, [r6, #8]
   2327c:	str	r4, [r6, #12]
   23280:	str	r4, [r6, #16]
   23284:	str	r4, [r6, #20]
   23288:	str	r0, [r6, #24]
   2328c:	mvn	r0, #0
   23290:	str	r0, [r6, #28]
   23294:	ldr	r0, [sp, #48]	; 0x30
   23298:	str	r6, [r5]
   2329c:	cmp	r1, r0
   232a0:	blt	230a4 <__assert_fail@plt+0x113f8>
   232a4:	b	23358 <__assert_fail@plt+0x116ac>
   232a8:	mov	r0, #996	; 0x3e4
   232ac:	bl	1b2f8 <__assert_fail@plt+0x964c>
   232b0:	cmp	r0, #0
   232b4:	beq	23338 <__assert_fail@plt+0x1168c>
   232b8:	ldr	lr, [sp, #20]
   232bc:	ldr	ip, [sp, #44]	; 0x2c
   232c0:	ldr	r1, [lr]
   232c4:	str	r1, [r0]
   232c8:	mov	r1, #0
   232cc:	str	r0, [lr]
   232d0:	str	r1, [r8]
   232d4:	b	230c4 <__assert_fail@plt+0x11418>
   232d8:	mov	r0, #996	; 0x3e4
   232dc:	bl	1b2f8 <__assert_fail@plt+0x964c>
   232e0:	ldr	lr, [sp, #20]
   232e4:	ldr	ip, [sp, #44]	; 0x2c
   232e8:	cmp	r0, #0
   232ec:	beq	23930 <__assert_fail@plt+0x11c84>
   232f0:	ldr	r1, [lr]
   232f4:	str	r1, [r0]
   232f8:	mov	r1, #0
   232fc:	str	r0, [lr]
   23300:	str	r1, [r8]
   23304:	b	2320c <__assert_fail@plt+0x11560>
   23308:	mov	r0, #996	; 0x3e4
   2330c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23310:	ldr	lr, [sp, #20]
   23314:	ldr	ip, [sp, #44]	; 0x2c
   23318:	cmp	r0, #0
   2331c:	beq	23930 <__assert_fail@plt+0x11c84>
   23320:	ldr	r1, [lr]
   23324:	str	r1, [r0]
   23328:	mov	r1, #0
   2332c:	str	r0, [lr]
   23330:	str	r1, [r8]
   23334:	b	2325c <__assert_fail@plt+0x115b0>
   23338:	mov	r7, #0
   2333c:	str	r7, [fp, #-80]	; 0xffffffb0
   23340:	b	2334c <__assert_fail@plt+0x116a0>
   23344:	mov	r7, #0
   23348:	str	r7, [r5]
   2334c:	ldr	ip, [sp, #44]	; 0x2c
   23350:	ldr	lr, [sp, #20]
   23354:	b	231fc <__assert_fail@plt+0x11550>
   23358:	mov	sl, r6
   2335c:	ldr	r5, [sp, #32]
   23360:	ldr	r6, [sp, #24]
   23364:	cmp	r5, #0
   23368:	beq	233bc <__assert_fail@plt+0x11710>
   2336c:	ldr	r1, [r8]
   23370:	cmp	r1, #31
   23374:	beq	234d4 <__assert_fail@plt+0x11828>
   23378:	ldr	r0, [lr]
   2337c:	add	r2, r1, #1
   23380:	add	r7, r0, r1, lsl #5
   23384:	mov	r0, #0
   23388:	mov	r1, #16
   2338c:	str	r2, [r8]
   23390:	str	r0, [r7, #4]!
   23394:	stmib	r7, {r5, sl}
   23398:	str	r0, [r7, #12]
   2339c:	str	r0, [r7, #16]
   233a0:	str	r0, [r7, #20]
   233a4:	str	r1, [r7, #24]
   233a8:	mvn	r1, #0
   233ac:	str	r1, [r7, #28]
   233b0:	str	r7, [r5]
   233b4:	str	r7, [sl]
   233b8:	b	23968 <__assert_fail@plt+0x11cbc>
   233bc:	mov	r0, #0
   233c0:	mov	r7, sl
   233c4:	b	23968 <__assert_fail@plt+0x11cbc>
   233c8:	ldr	ip, [sp, #44]	; 0x2c
   233cc:	b	23948 <__assert_fail@plt+0x11c9c>
   233d0:	ldr	ip, [sp, #44]	; 0x2c
   233d4:	mov	r0, sl
   233d8:	mov	r5, r0
   233dc:	ldr	r0, [r0, #4]
   233e0:	cmp	r0, #0
   233e4:	bne	233d8 <__assert_fail@plt+0x1172c>
   233e8:	ldr	r0, [r5, #8]
   233ec:	cmp	r0, #0
   233f0:	bne	233d8 <__assert_fail@plt+0x1172c>
   233f4:	ldr	r0, [r5, #24]
   233f8:	movw	r1, #255	; 0xff
   233fc:	movt	r1, #4
   23400:	and	r0, r0, r1
   23404:	cmp	r0, #3
   23408:	beq	23440 <__assert_fail@plt+0x11794>
   2340c:	cmp	r0, #6
   23410:	bne	2344c <__assert_fail@plt+0x117a0>
   23414:	ldr	r9, [r5, #20]
   23418:	ldr	r0, [r9]
   2341c:	bl	1b22c <__assert_fail@plt+0x9580>
   23420:	ldr	r0, [r9, #4]
   23424:	bl	1b22c <__assert_fail@plt+0x9580>
   23428:	ldr	r0, [r9, #8]
   2342c:	bl	1b22c <__assert_fail@plt+0x9580>
   23430:	ldr	r0, [r9, #12]
   23434:	bl	1b22c <__assert_fail@plt+0x9580>
   23438:	mov	r0, r9
   2343c:	b	23444 <__assert_fail@plt+0x11798>
   23440:	ldr	r0, [r5, #20]
   23444:	bl	1b22c <__assert_fail@plt+0x9580>
   23448:	ldr	ip, [sp, #44]	; 0x2c
   2344c:	ldr	r1, [r5]
   23450:	cmp	r1, #0
   23454:	beq	23948 <__assert_fail@plt+0x11c9c>
   23458:	ldr	r0, [r1, #8]
   2345c:	cmp	r0, r5
   23460:	mov	r5, r1
   23464:	beq	233f4 <__assert_fail@plt+0x11748>
   23468:	cmp	r0, #0
   2346c:	mov	r5, r1
   23470:	beq	233f4 <__assert_fail@plt+0x11748>
   23474:	b	233d8 <__assert_fail@plt+0x1172c>
   23478:	mov	r5, sl
   2347c:	str	r9, [sp, #8]
   23480:	beq	2377c <__assert_fail@plt+0x11ad0>
   23484:	ldr	r9, [sp, #36]	; 0x24
   23488:	mov	r0, #2
   2348c:	ldr	r5, [r9]
   23490:	mov	sl, r9
   23494:	b	235c4 <__assert_fail@plt+0x11918>
   23498:	mov	r0, #996	; 0x3e4
   2349c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   234a0:	ldr	lr, [sp, #20]
   234a4:	ldr	ip, [sp, #44]	; 0x2c
   234a8:	cmp	r0, #0
   234ac:	beq	23930 <__assert_fail@plt+0x11c84>
   234b0:	ldr	r1, [lr]
   234b4:	ldr	r5, [sp, #48]	; 0x30
   234b8:	str	r1, [r0]
   234bc:	mov	r1, #0
   234c0:	str	r0, [lr]
   234c4:	str	r1, [r8]
   234c8:	b	2305c <__assert_fail@plt+0x113b0>
   234cc:	ldr	sl, [sp, #52]	; 0x34
   234d0:	b	22e5c <__assert_fail@plt+0x111b0>
   234d4:	mov	r0, #996	; 0x3e4
   234d8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   234dc:	cmp	r0, #0
   234e0:	beq	2353c <__assert_fail@plt+0x11890>
   234e4:	ldr	r2, [sp, #20]
   234e8:	ldr	ip, [sp, #44]	; 0x2c
   234ec:	ldr	r1, [r2]
   234f0:	str	r1, [r0]
   234f4:	mov	r1, #0
   234f8:	str	r0, [r2]
   234fc:	str	r1, [r8]
   23500:	b	2337c <__assert_fail@plt+0x116d0>
   23504:	ldr	r0, [sp, #16]
   23508:	mov	r1, #10
   2350c:	b	23518 <__assert_fail@plt+0x1186c>
   23510:	ldr	r0, [sp, #16]
   23514:	mov	r1, #15
   23518:	str	r1, [r0]
   2351c:	mov	r7, #0
   23520:	b	23948 <__assert_fail@plt+0x11c9c>
   23524:	ldr	r1, [sp, #16]
   23528:	cmp	r0, #2
   2352c:	mov	r0, #10
   23530:	movweq	r0, #9
   23534:	str	r0, [r1]
   23538:	b	22e30 <__assert_fail@plt+0x11184>
   2353c:	ldr	ip, [sp, #44]	; 0x2c
   23540:	b	22e30 <__assert_fail@plt+0x11184>
   23544:	mov	r0, #996	; 0x3e4
   23548:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2354c:	cmp	r0, #0
   23550:	beq	235a4 <__assert_fail@plt+0x118f8>
   23554:	ldr	lr, [sp, #20]
   23558:	ldr	ip, [sp, #44]	; 0x2c
   2355c:	ldr	r1, [lr]
   23560:	str	r1, [r0]
   23564:	mov	r1, #0
   23568:	str	r0, [lr]
   2356c:	str	r1, [r8]
   23570:	b	235d8 <__assert_fail@plt+0x1192c>
   23574:	mov	r0, #996	; 0x3e4
   23578:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2357c:	ldr	lr, [sp, #20]
   23580:	ldr	ip, [sp, #44]	; 0x2c
   23584:	cmp	r0, #0
   23588:	beq	23930 <__assert_fail@plt+0x11c84>
   2358c:	ldr	r1, [lr]
   23590:	str	r1, [r0]
   23594:	mov	r1, #0
   23598:	str	r0, [lr]
   2359c:	str	r1, [r8]
   235a0:	b	23720 <__assert_fail@plt+0x11a74>
   235a4:	mov	sl, #0
   235a8:	str	sl, [fp, #-80]	; 0xffffffb0
   235ac:	b	235b8 <__assert_fail@plt+0x1190c>
   235b0:	mov	sl, #0
   235b4:	str	sl, [r6]
   235b8:	ldr	ip, [sp, #44]	; 0x2c
   235bc:	ldr	lr, [sp, #20]
   235c0:	b	23710 <__assert_fail@plt+0x11a64>
   235c4:	ldr	r1, [r8]
   235c8:	str	r0, [sp, #52]	; 0x34
   235cc:	cmp	r1, #31
   235d0:	beq	23544 <__assert_fail@plt+0x11898>
   235d4:	ldr	r0, [lr]
   235d8:	add	r3, r1, #1
   235dc:	add	r7, r0, r1, lsl #5
   235e0:	add	r2, sl, #20
   235e4:	sub	r6, fp, #80	; 0x50
   235e8:	str	r3, [r8]
   235ec:	str	r4, [r7, #4]!
   235f0:	str	r4, [r7, #4]
   235f4:	str	r4, [r7, #8]
   235f8:	ldm	r2, {r0, r1}
   235fc:	mvn	r2, #0
   23600:	str	r4, [r7, #12]
   23604:	str	r4, [r7, #16]
   23608:	str	r2, [r7, #28]
   2360c:	str	r0, [r7, #20]
   23610:	bic	r0, r1, #786432	; 0xc0000
   23614:	str	r0, [r7, #24]
   23618:	mov	r0, r7
   2361c:	str	r7, [fp, #-80]	; 0xffffffb0
   23620:	b	23664 <__assert_fail@plt+0x119b8>
   23624:	add	r3, r1, #1
   23628:	add	r0, r0, r1, lsl #5
   2362c:	add	r2, sl, #20
   23630:	str	r3, [r8]
   23634:	str	r4, [r0, #4]!
   23638:	mvn	r3, #0
   2363c:	str	r4, [r0, #4]
   23640:	str	r4, [r0, #8]
   23644:	ldm	r2, {r1, r2}
   23648:	str	r4, [r0, #12]
   2364c:	str	r4, [r0, #16]
   23650:	str	r3, [r0, #28]
   23654:	str	r1, [r0, #20]
   23658:	bic	r1, r2, #786432	; 0xc0000
   2365c:	str	r1, [r0, #24]
   23660:	str	r0, [r6]
   23664:	str	r5, [r0]
   23668:	ldr	r0, [r6]
   2366c:	ldr	r1, [r0, #24]
   23670:	orr	r1, r1, #262144	; 0x40000
   23674:	str	r1, [r0, #24]
   23678:	ldr	r0, [sl, #4]
   2367c:	ldr	r5, [r6]
   23680:	cmp	r0, #0
   23684:	beq	23694 <__assert_fail@plt+0x119e8>
   23688:	add	r6, r5, #4
   2368c:	mov	sl, r0
   23690:	b	236c8 <__assert_fail@plt+0x11a1c>
   23694:	mov	r1, #0
   23698:	mov	r0, sl
   2369c:	ldr	sl, [sl, #8]
   236a0:	cmp	sl, r1
   236a4:	cmpne	sl, #0
   236a8:	bne	236c4 <__assert_fail@plt+0x11a18>
   236ac:	ldr	sl, [r0]
   236b0:	ldr	r5, [r5]
   236b4:	mov	r1, r0
   236b8:	cmp	sl, #0
   236bc:	bne	23698 <__assert_fail@plt+0x119ec>
   236c0:	b	2370c <__assert_fail@plt+0x11a60>
   236c4:	add	r6, r5, #8
   236c8:	ldr	r1, [r8]
   236cc:	cmp	r1, #31
   236d0:	beq	236dc <__assert_fail@plt+0x11a30>
   236d4:	ldr	r0, [lr]
   236d8:	b	23624 <__assert_fail@plt+0x11978>
   236dc:	mov	r0, #996	; 0x3e4
   236e0:	bl	1b2f8 <__assert_fail@plt+0x964c>
   236e4:	cmp	r0, #0
   236e8:	beq	235b0 <__assert_fail@plt+0x11904>
   236ec:	ldr	lr, [sp, #20]
   236f0:	ldr	ip, [sp, #44]	; 0x2c
   236f4:	ldr	r1, [lr]
   236f8:	str	r1, [r0]
   236fc:	mov	r1, #0
   23700:	str	r0, [lr]
   23704:	str	r1, [r8]
   23708:	b	23624 <__assert_fail@plt+0x11978>
   2370c:	mov	sl, r7
   23710:	ldr	r1, [r8]
   23714:	cmp	r1, #31
   23718:	beq	23574 <__assert_fail@plt+0x118c8>
   2371c:	ldr	r0, [lr]
   23720:	add	r2, r1, #1
   23724:	add	r1, r0, r1, lsl #5
   23728:	mov	r0, #16
   2372c:	cmp	sl, #0
   23730:	str	r2, [r8]
   23734:	str	r4, [r1, #4]!
   23738:	stmib	r1, {r9, sl}
   2373c:	str	r4, [r1, #12]
   23740:	str	r4, [r1, #16]
   23744:	str	r4, [r1, #20]
   23748:	str	r0, [r1, #24]
   2374c:	mvn	r0, #0
   23750:	str	r0, [r1, #28]
   23754:	str	r1, [r9]
   23758:	beq	23930 <__assert_fail@plt+0x11c84>
   2375c:	mov	r5, r1
   23760:	str	r1, [sl]
   23764:	ldr	r2, [sp, #52]	; 0x34
   23768:	ldr	r1, [sp, #8]
   2376c:	mov	r9, r5
   23770:	add	r0, r2, #1
   23774:	cmp	r2, r1
   23778:	blt	235c4 <__assert_fail@plt+0x11918>
   2377c:	ldr	r1, [sp, #48]	; 0x30
   23780:	ldr	r2, [sp, #8]
   23784:	mov	r0, #0
   23788:	cmp	r2, r1
   2378c:	bne	2379c <__assert_fail@plt+0x11af0>
   23790:	ldr	r6, [sp, #24]
   23794:	mov	r7, r5
   23798:	b	23968 <__assert_fail@plt+0x11cbc>
   2379c:	mov	r9, sl
   237a0:	ldr	r1, [r8]
   237a4:	str	r5, [sp, #32]
   237a8:	ldr	r6, [r9], #20
   237ac:	cmp	r1, #31
   237b0:	beq	238f0 <__assert_fail@plt+0x11c44>
   237b4:	ldr	r0, [lr]
   237b8:	add	r2, r1, #1
   237bc:	add	r7, r0, r1, lsl #5
   237c0:	str	r2, [r8]
   237c4:	str	r4, [r7, #4]!
   237c8:	mvn	r2, #0
   237cc:	str	r4, [r7, #4]
   237d0:	str	r4, [r7, #8]
   237d4:	ldm	r9, {r0, r1}
   237d8:	str	r4, [r7, #12]
   237dc:	str	r4, [r7, #16]
   237e0:	str	r2, [r7, #28]
   237e4:	sub	r9, fp, #80	; 0x50
   237e8:	str	r0, [r7, #20]
   237ec:	bic	r0, r1, #786432	; 0xc0000
   237f0:	str	r0, [r7, #24]
   237f4:	mov	r0, r7
   237f8:	str	r7, [fp, #-80]	; 0xffffffb0
   237fc:	b	23840 <__assert_fail@plt+0x11b94>
   23800:	add	r3, r1, #1
   23804:	add	r0, r0, r1, lsl #5
   23808:	add	r2, sl, #20
   2380c:	str	r3, [r8]
   23810:	str	r4, [r0, #4]!
   23814:	mvn	r3, #0
   23818:	str	r4, [r0, #4]
   2381c:	str	r4, [r0, #8]
   23820:	ldm	r2, {r1, r2}
   23824:	str	r4, [r0, #12]
   23828:	str	r4, [r0, #16]
   2382c:	str	r3, [r0, #28]
   23830:	str	r1, [r0, #20]
   23834:	bic	r1, r2, #786432	; 0xc0000
   23838:	str	r1, [r0, #24]
   2383c:	str	r0, [r9]
   23840:	str	r6, [r0]
   23844:	ldr	r0, [r9]
   23848:	ldr	r1, [r0, #24]
   2384c:	orr	r1, r1, #262144	; 0x40000
   23850:	str	r1, [r0, #24]
   23854:	ldr	r0, [sl, #4]
   23858:	ldr	r6, [r9]
   2385c:	cmp	r0, #0
   23860:	beq	23870 <__assert_fail@plt+0x11bc4>
   23864:	add	r9, r6, #4
   23868:	mov	sl, r0
   2386c:	b	238ac <__assert_fail@plt+0x11c00>
   23870:	ldr	r5, [sp, #48]	; 0x30
   23874:	ldr	r9, [sp, #8]
   23878:	mov	r1, #0
   2387c:	mov	r0, sl
   23880:	ldr	sl, [sl, #8]
   23884:	cmp	sl, r1
   23888:	cmpne	sl, #0
   2388c:	bne	238a8 <__assert_fail@plt+0x11bfc>
   23890:	ldr	sl, [r0]
   23894:	ldr	r6, [r6]
   23898:	mov	r1, r0
   2389c:	cmp	sl, #0
   238a0:	bne	2387c <__assert_fail@plt+0x11bd0>
   238a4:	b	22fc8 <__assert_fail@plt+0x1131c>
   238a8:	add	r9, r6, #8
   238ac:	ldr	r1, [r8]
   238b0:	cmp	r1, #31
   238b4:	beq	238c0 <__assert_fail@plt+0x11c14>
   238b8:	ldr	r0, [lr]
   238bc:	b	23800 <__assert_fail@plt+0x11b54>
   238c0:	mov	r0, #996	; 0x3e4
   238c4:	bl	1b2f8 <__assert_fail@plt+0x964c>
   238c8:	cmp	r0, #0
   238cc:	beq	23928 <__assert_fail@plt+0x11c7c>
   238d0:	ldr	lr, [sp, #20]
   238d4:	ldr	ip, [sp, #44]	; 0x2c
   238d8:	ldr	r1, [lr]
   238dc:	str	r1, [r0]
   238e0:	mov	r1, #0
   238e4:	str	r0, [lr]
   238e8:	str	r1, [r8]
   238ec:	b	23800 <__assert_fail@plt+0x11b54>
   238f0:	mov	r0, #996	; 0x3e4
   238f4:	bl	1b2f8 <__assert_fail@plt+0x964c>
   238f8:	cmp	r0, #0
   238fc:	beq	23920 <__assert_fail@plt+0x11c74>
   23900:	ldr	lr, [sp, #20]
   23904:	ldr	ip, [sp, #44]	; 0x2c
   23908:	ldr	r1, [lr]
   2390c:	str	r1, [r0]
   23910:	mov	r1, #0
   23914:	str	r0, [lr]
   23918:	str	r1, [r8]
   2391c:	b	237b8 <__assert_fail@plt+0x11b0c>
   23920:	str	r4, [fp, #-80]	; 0xffffffb0
   23924:	b	2392c <__assert_fail@plt+0x11c80>
   23928:	str	r4, [r9]
   2392c:	ldr	ip, [sp, #44]	; 0x2c
   23930:	ldr	r0, [sp, #16]
   23934:	ldr	r6, [sp, #24]
   23938:	ldr	sl, [sp, #36]	; 0x24
   2393c:	mov	r1, #12
   23940:	mov	r7, #0
   23944:	str	r1, [r0]
   23948:	clz	r0, r7
   2394c:	cmp	r7, #0
   23950:	lsr	r0, r0, #5
   23954:	bne	23968 <__assert_fail@plt+0x11cbc>
   23958:	ldr	r1, [sp, #16]
   2395c:	ldr	r1, [r1]
   23960:	cmp	r1, #0
   23964:	bne	23a50 <__assert_fail@plt+0x11da4>
   23968:	ldr	r1, [sp, #28]
   2396c:	cmp	r1, #0
   23970:	beq	22d20 <__assert_fail@plt+0x11074>
   23974:	ldrb	r1, [ip, #4]
   23978:	cmp	r1, #23
   2397c:	cmpne	r1, #11
   23980:	bne	22d20 <__assert_fail@plt+0x11074>
   23984:	ldr	r8, [sp, #16]
   23988:	movw	r6, #255	; 0xff
   2398c:	cmp	r0, #0
   23990:	movt	r6, #4
   23994:	bne	23a2c <__assert_fail@plt+0x11d80>
   23998:	mov	r5, r7
   2399c:	ldr	r7, [r7, #4]
   239a0:	cmp	r7, #0
   239a4:	bne	23998 <__assert_fail@plt+0x11cec>
   239a8:	ldr	r7, [r5, #8]
   239ac:	cmp	r7, #0
   239b0:	bne	23998 <__assert_fail@plt+0x11cec>
   239b4:	ldr	r0, [r5, #24]
   239b8:	and	r0, r0, r6
   239bc:	cmp	r0, #3
   239c0:	beq	239f8 <__assert_fail@plt+0x11d4c>
   239c4:	cmp	r0, #6
   239c8:	bne	23a00 <__assert_fail@plt+0x11d54>
   239cc:	ldr	r4, [r5, #20]
   239d0:	ldr	r0, [r4]
   239d4:	bl	1b22c <__assert_fail@plt+0x9580>
   239d8:	ldr	r0, [r4, #4]
   239dc:	bl	1b22c <__assert_fail@plt+0x9580>
   239e0:	ldr	r0, [r4, #8]
   239e4:	bl	1b22c <__assert_fail@plt+0x9580>
   239e8:	ldr	r0, [r4, #12]
   239ec:	bl	1b22c <__assert_fail@plt+0x9580>
   239f0:	mov	r0, r4
   239f4:	b	239fc <__assert_fail@plt+0x11d50>
   239f8:	ldr	r0, [r5, #20]
   239fc:	bl	1b22c <__assert_fail@plt+0x9580>
   23a00:	ldr	r0, [r5]
   23a04:	cmp	r0, #0
   23a08:	beq	23a2c <__assert_fail@plt+0x11d80>
   23a0c:	ldr	r7, [r0, #8]
   23a10:	cmp	r7, r5
   23a14:	mov	r5, r0
   23a18:	beq	239b4 <__assert_fail@plt+0x11d08>
   23a1c:	cmp	r7, #0
   23a20:	mov	r5, r0
   23a24:	beq	239b4 <__assert_fail@plt+0x11d08>
   23a28:	b	23998 <__assert_fail@plt+0x11cec>
   23a2c:	mov	r0, #13
   23a30:	mov	sl, #0
   23a34:	str	r0, [r8]
   23a38:	mov	r0, sl
   23a3c:	sub	sp, fp, #28
   23a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a44:	mov	r7, r4
   23a48:	mov	r6, r9
   23a4c:	b	22cd4 <__assert_fail@plt+0x11028>
   23a50:	cmp	sl, #0
   23a54:	beq	21f98 <__assert_fail@plt+0x102ec>
   23a58:	movw	r6, #255	; 0xff
   23a5c:	movt	r6, #4
   23a60:	mov	r5, sl
   23a64:	ldr	sl, [sl, #4]
   23a68:	cmp	sl, #0
   23a6c:	bne	23a60 <__assert_fail@plt+0x11db4>
   23a70:	ldr	sl, [r5, #8]
   23a74:	cmp	sl, #0
   23a78:	bne	23a60 <__assert_fail@plt+0x11db4>
   23a7c:	ldr	r0, [r5, #24]
   23a80:	and	r0, r0, r6
   23a84:	cmp	r0, #3
   23a88:	beq	23ac0 <__assert_fail@plt+0x11e14>
   23a8c:	cmp	r0, #6
   23a90:	bne	23ac8 <__assert_fail@plt+0x11e1c>
   23a94:	ldr	r4, [r5, #20]
   23a98:	ldr	r0, [r4]
   23a9c:	bl	1b22c <__assert_fail@plt+0x9580>
   23aa0:	ldr	r0, [r4, #4]
   23aa4:	bl	1b22c <__assert_fail@plt+0x9580>
   23aa8:	ldr	r0, [r4, #8]
   23aac:	bl	1b22c <__assert_fail@plt+0x9580>
   23ab0:	ldr	r0, [r4, #12]
   23ab4:	bl	1b22c <__assert_fail@plt+0x9580>
   23ab8:	mov	r0, r4
   23abc:	b	23ac4 <__assert_fail@plt+0x11e18>
   23ac0:	ldr	r0, [r5, #20]
   23ac4:	bl	1b22c <__assert_fail@plt+0x9580>
   23ac8:	ldr	r0, [r5]
   23acc:	cmp	r0, #0
   23ad0:	beq	21f98 <__assert_fail@plt+0x102ec>
   23ad4:	ldr	sl, [r0, #8]
   23ad8:	cmp	sl, r5
   23adc:	mov	r5, r0
   23ae0:	beq	23a7c <__assert_fail@plt+0x11dd0>
   23ae4:	cmp	sl, #0
   23ae8:	mov	r5, r0
   23aec:	beq	23a7c <__assert_fail@plt+0x11dd0>
   23af0:	b	23a60 <__assert_fail@plt+0x11db4>
   23af4:	cmp	r0, #2
   23af8:	blt	23b14 <__assert_fail@plt+0x11e68>
   23afc:	ldr	r0, [sl, #36]	; 0x24
   23b00:	cmp	r0, #0
   23b04:	bne	2297c <__assert_fail@plt+0x10cd0>
   23b08:	ldrb	r0, [sl, #16]
   23b0c:	tst	r0, #1
   23b10:	bne	2297c <__assert_fail@plt+0x10cd0>
   23b14:	ldr	r0, [sl]
   23b18:	bl	1b22c <__assert_fail@plt+0x9580>
   23b1c:	ldr	r0, [sl, #4]
   23b20:	bl	1b22c <__assert_fail@plt+0x9580>
   23b24:	ldr	r0, [sl, #8]
   23b28:	bl	1b22c <__assert_fail@plt+0x9580>
   23b2c:	ldr	r0, [sl, #12]
   23b30:	bl	1b22c <__assert_fail@plt+0x9580>
   23b34:	mov	r0, sl
   23b38:	bl	1b22c <__assert_fail@plt+0x9580>
   23b3c:	ldr	r1, [r8, #64]	; 0x40
   23b40:	cmp	r1, #31
   23b44:	beq	24020 <__assert_fail@plt+0x12374>
   23b48:	ldr	r0, [r8, #56]	; 0x38
   23b4c:	add	r2, r1, #1
   23b50:	add	r0, r0, r1, lsl #5
   23b54:	ldr	lr, [sp, #44]	; 0x2c
   23b58:	mov	r1, #3
   23b5c:	vmov.i32	q8, #0	; 0x00000000
   23b60:	str	r2, [r8, #64]	; 0x40
   23b64:	mov	r2, #0
   23b68:	add	r7, r0, #4
   23b6c:	str	r2, [r0, #20]
   23b70:	str	r4, [r0, #24]
   23b74:	str	r1, [r0, #28]
   23b78:	mov	r0, #28
   23b7c:	mov	r1, r7
   23b80:	vst1.32	{d16-d17}, [r1], r0
   23b84:	mvn	r0, #0
   23b88:	str	r0, [r1]
   23b8c:	b	22cd4 <__assert_fail@plt+0x11028>
   23b90:	mov	r0, #996	; 0x3e4
   23b94:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23b98:	cmp	r0, #0
   23b9c:	beq	23e94 <__assert_fail@plt+0x121e8>
   23ba0:	ldr	r1, [r8, #56]	; 0x38
   23ba4:	ldr	lr, [sp, #44]	; 0x2c
   23ba8:	str	r1, [r0]
   23bac:	mov	r1, #0
   23bb0:	str	r1, [r8, #64]	; 0x40
   23bb4:	str	r0, [r8, #56]	; 0x38
   23bb8:	b	21de8 <__assert_fail@plt+0x1013c>
   23bbc:	mov	r9, r0
   23bc0:	b	23c7c <__assert_fail@plt+0x11fd0>
   23bc4:	mov	r9, #7
   23bc8:	b	23c7c <__assert_fail@plt+0x11fd0>
   23bcc:	mov	r0, #2
   23bd0:	b	24058 <__assert_fail@plt+0x123ac>
   23bd4:	mov	r0, #6
   23bd8:	b	22bd8 <__assert_fail@plt+0x10f2c>
   23bdc:	mov	r0, #996	; 0x3e4
   23be0:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23be4:	cmp	r0, #0
   23be8:	beq	23e94 <__assert_fail@plt+0x121e8>
   23bec:	ldr	r1, [r8, #56]	; 0x38
   23bf0:	ldr	lr, [sp, #44]	; 0x2c
   23bf4:	str	r1, [r0]
   23bf8:	mov	r1, #0
   23bfc:	str	r1, [r8, #64]	; 0x40
   23c00:	str	r0, [r8, #56]	; 0x38
   23c04:	b	21ec0 <__assert_fail@plt+0x10214>
   23c08:	mov	r0, #996	; 0x3e4
   23c0c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23c10:	cmp	r0, #0
   23c14:	beq	23e94 <__assert_fail@plt+0x121e8>
   23c18:	ldr	r1, [r8, #56]	; 0x38
   23c1c:	ldr	r3, [sp, #24]
   23c20:	ldr	lr, [sp, #44]	; 0x2c
   23c24:	str	r1, [r0]
   23c28:	mov	r1, #0
   23c2c:	str	r1, [r8, #64]	; 0x40
   23c30:	str	r0, [r8, #56]	; 0x38
   23c34:	b	2207c <__assert_fail@plt+0x103d0>
   23c38:	mov	r0, r4
   23c3c:	bl	1b22c <__assert_fail@plt+0x9580>
   23c40:	mov	r0, r5
   23c44:	bl	1b22c <__assert_fail@plt+0x9580>
   23c48:	b	22bd4 <__assert_fail@plt+0x10f28>
   23c4c:	mov	r0, #996	; 0x3e4
   23c50:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23c54:	cmp	r0, #0
   23c58:	beq	23e94 <__assert_fail@plt+0x121e8>
   23c5c:	ldr	r1, [r8, #56]	; 0x38
   23c60:	ldr	lr, [sp, #44]	; 0x2c
   23c64:	str	r1, [r0]
   23c68:	mov	r1, #0
   23c6c:	str	r1, [r8, #64]	; 0x40
   23c70:	str	r0, [r8, #56]	; 0x38
   23c74:	b	21e64 <__assert_fail@plt+0x101b8>
   23c78:	mov	r9, #3
   23c7c:	ldr	r0, [sp, #16]
   23c80:	ldr	r4, [sp, #52]	; 0x34
   23c84:	ldr	sl, [sp, #48]	; 0x30
   23c88:	str	r9, [r0]
   23c8c:	ldr	r6, [sp, #40]	; 0x28
   23c90:	mov	r0, r4
   23c94:	bl	1b22c <__assert_fail@plt+0x9580>
   23c98:	ldr	r0, [sl]
   23c9c:	bl	1b22c <__assert_fail@plt+0x9580>
   23ca0:	ldr	r0, [sl, #4]
   23ca4:	bl	1b22c <__assert_fail@plt+0x9580>
   23ca8:	ldr	r0, [sl, #8]
   23cac:	bl	1b22c <__assert_fail@plt+0x9580>
   23cb0:	ldr	r0, [sl, #12]
   23cb4:	bl	1b22c <__assert_fail@plt+0x9580>
   23cb8:	mov	r0, sl
   23cbc:	bl	1b22c <__assert_fail@plt+0x9580>
   23cc0:	ldr	r0, [sp, #16]
   23cc4:	mov	r7, #0
   23cc8:	mov	sl, #0
   23ccc:	ldr	r0, [r0]
   23cd0:	b	21d8c <__assert_fail@plt+0x100e0>
   23cd4:	mov	r0, #996	; 0x3e4
   23cd8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23cdc:	cmp	r0, #0
   23ce0:	beq	24054 <__assert_fail@plt+0x123a8>
   23ce4:	ldr	r1, [r8, #56]	; 0x38
   23ce8:	ldr	lr, [sp, #44]	; 0x2c
   23cec:	str	r1, [r0]
   23cf0:	mov	r1, #0
   23cf4:	str	r1, [r8, #64]	; 0x40
   23cf8:	str	r0, [r8, #56]	; 0x38
   23cfc:	b	22998 <__assert_fail@plt+0x10cec>
   23d00:	mov	r0, #996	; 0x3e4
   23d04:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23d08:	cmp	r0, #0
   23d0c:	beq	24054 <__assert_fail@plt+0x123a8>
   23d10:	ldr	r1, [r8, #56]	; 0x38
   23d14:	ldr	lr, [sp, #44]	; 0x2c
   23d18:	str	r1, [r0]
   23d1c:	mov	r1, #0
   23d20:	str	r1, [r8, #64]	; 0x40
   23d24:	str	r0, [r8, #56]	; 0x38
   23d28:	b	22a44 <__assert_fail@plt+0x10d98>
   23d2c:	mov	r0, #996	; 0x3e4
   23d30:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23d34:	cmp	r0, #0
   23d38:	beq	24054 <__assert_fail@plt+0x123a8>
   23d3c:	ldr	r1, [r8, #56]	; 0x38
   23d40:	ldr	lr, [sp, #44]	; 0x2c
   23d44:	str	r1, [r0]
   23d48:	mov	r1, #0
   23d4c:	str	r1, [r8, #64]	; 0x40
   23d50:	str	r0, [r8, #56]	; 0x38
   23d54:	b	22a90 <__assert_fail@plt+0x10de4>
   23d58:	mov	r0, #996	; 0x3e4
   23d5c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23d60:	cmp	r0, #0
   23d64:	beq	23e94 <__assert_fail@plt+0x121e8>
   23d68:	ldr	r1, [r8, #56]	; 0x38
   23d6c:	ldr	lr, [sp, #44]	; 0x2c
   23d70:	mov	r6, sl
   23d74:	str	r1, [r0]
   23d78:	mov	r1, #0
   23d7c:	str	r1, [r8, #64]	; 0x40
   23d80:	str	r0, [r8, #56]	; 0x38
   23d84:	b	22c90 <__assert_fail@plt+0x10fe4>
   23d88:	mov	r0, r4
   23d8c:	bl	1b22c <__assert_fail@plt+0x9580>
   23d90:	ldr	lr, [sp, #44]	; 0x2c
   23d94:	mov	r7, r9
   23d98:	b	22cd4 <__assert_fail@plt+0x11028>
   23d9c:	mov	r0, #996	; 0x3e4
   23da0:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23da4:	cmp	r0, #0
   23da8:	beq	23f3c <__assert_fail@plt+0x12290>
   23dac:	ldr	r1, [r8, #56]	; 0x38
   23db0:	ldr	r7, [sp, #24]
   23db4:	ldr	lr, [sp, #44]	; 0x2c
   23db8:	mov	sl, #0
   23dbc:	str	r1, [r0]
   23dc0:	mov	r1, #0
   23dc4:	str	r1, [r8, #64]	; 0x40
   23dc8:	str	r0, [r8, #56]	; 0x38
   23dcc:	b	22b40 <__assert_fail@plt+0x10e94>
   23dd0:	mov	r0, #996	; 0x3e4
   23dd4:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23dd8:	ldr	lr, [sp, #44]	; 0x2c
   23ddc:	cmp	r0, #0
   23de0:	beq	22bd4 <__assert_fail@plt+0x10f28>
   23de4:	ldr	r1, [r8, #56]	; 0x38
   23de8:	str	r1, [r0]
   23dec:	mov	r1, #0
   23df0:	str	r1, [r8, #64]	; 0x40
   23df4:	str	r0, [r8, #56]	; 0x38
   23df8:	b	22b8c <__assert_fail@plt+0x10ee0>
   23dfc:	mov	r0, #996	; 0x3e4
   23e00:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23e04:	cmp	r0, #0
   23e08:	beq	23ffc <__assert_fail@plt+0x12350>
   23e0c:	ldr	r1, [r8, #56]	; 0x38
   23e10:	ldr	r7, [sp, #24]
   23e14:	ldr	lr, [sp, #44]	; 0x2c
   23e18:	mov	sl, #0
   23e1c:	str	r1, [r0]
   23e20:	mov	r1, #0
   23e24:	str	r1, [r8, #64]	; 0x40
   23e28:	str	r0, [r8, #56]	; 0x38
   23e2c:	b	22024 <__assert_fail@plt+0x10378>
   23e30:	mov	r0, #996	; 0x3e4
   23e34:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23e38:	cmp	r0, #0
   23e3c:	beq	24008 <__assert_fail@plt+0x1235c>
   23e40:	ldr	r1, [r8, #56]	; 0x38
   23e44:	ldr	r7, [sp, #24]
   23e48:	ldr	lr, [sp, #44]	; 0x2c
   23e4c:	mov	sl, #0
   23e50:	str	r1, [r0]
   23e54:	mov	r1, #0
   23e58:	str	r1, [r8, #64]	; 0x40
   23e5c:	str	r0, [r8, #56]	; 0x38
   23e60:	b	22ae8 <__assert_fail@plt+0x10e3c>
   23e64:	mov	r0, #996	; 0x3e4
   23e68:	bl	1b2f8 <__assert_fail@plt+0x964c>
   23e6c:	cmp	r0, #0
   23e70:	beq	23e94 <__assert_fail@plt+0x121e8>
   23e74:	ldr	r1, [r8, #56]	; 0x38
   23e78:	ldr	r7, [sp, #24]
   23e7c:	ldr	lr, [sp, #44]	; 0x2c
   23e80:	str	r1, [r0]
   23e84:	mov	r1, #0
   23e88:	str	r1, [r8, #64]	; 0x40
   23e8c:	str	r0, [r8, #56]	; 0x38
   23e90:	b	22bf8 <__assert_fail@plt+0x10f4c>
   23e94:	mov	r0, #12
   23e98:	ldr	r1, [sp, #16]
   23e9c:	mov	sl, #0
   23ea0:	str	r0, [r1]
   23ea4:	b	23a38 <__assert_fail@plt+0x11d8c>
   23ea8:	mov	r4, #0
   23eac:	mov	r9, #0
   23eb0:	b	23ebc <__assert_fail@plt+0x12210>
   23eb4:	mov	r9, #4
   23eb8:	mov	r4, #128	; 0x80
   23ebc:	bl	11a90 <__ctype_b_loc@plt>
   23ec0:	ldr	r0, [r0]
   23ec4:	ldr	r7, [sp, #24]
   23ec8:	ldr	lr, [sp, #44]	; 0x2c
   23ecc:	mov	r1, #1
   23ed0:	mov	sl, #0
   23ed4:	add	r5, r0, r4, lsl #1
   23ed8:	add	r0, r8, r9, lsl #2
   23edc:	mov	ip, r6
   23ee0:	mov	r3, #0
   23ee4:	add	r2, r0, #96	; 0x60
   23ee8:	mov	r0, r5
   23eec:	add	r6, r4, r3
   23ef0:	cmp	r6, #95	; 0x5f
   23ef4:	beq	23f04 <__assert_fail@plt+0x12258>
   23ef8:	ldrh	r6, [r0]
   23efc:	ands	r6, r6, #8
   23f00:	beq	23f10 <__assert_fail@plt+0x12264>
   23f04:	ldr	r6, [r2]
   23f08:	orr	r6, r6, r1, lsl r3
   23f0c:	str	r6, [r2]
   23f10:	add	r3, r3, #1
   23f14:	add	r0, r0, #2
   23f18:	cmp	r3, #32
   23f1c:	bne	23eec <__assert_fail@plt+0x12240>
   23f20:	add	r9, r9, #1
   23f24:	add	r5, r5, #64	; 0x40
   23f28:	add	r4, r4, #32
   23f2c:	mov	r6, ip
   23f30:	cmp	r9, #8
   23f34:	bne	23ed8 <__assert_fail@plt+0x1222c>
   23f38:	b	21ff4 <__assert_fail@plt+0x10348>
   23f3c:	ldr	r7, [sp, #24]
   23f40:	ldr	lr, [sp, #44]	; 0x2c
   23f44:	mov	r6, #0
   23f48:	mov	sl, #0
   23f4c:	b	22b7c <__assert_fail@plt+0x10ed0>
   23f50:	cmp	r9, #0
   23f54:	beq	23ff4 <__assert_fail@plt+0x12348>
   23f58:	movw	r5, #255	; 0xff
   23f5c:	movt	r5, #4
   23f60:	mov	r6, r9
   23f64:	ldr	r9, [r9, #4]
   23f68:	cmp	r9, #0
   23f6c:	bne	23f60 <__assert_fail@plt+0x122b4>
   23f70:	ldr	r9, [r6, #8]
   23f74:	cmp	r9, #0
   23f78:	bne	23f60 <__assert_fail@plt+0x122b4>
   23f7c:	ldr	r0, [r6, #24]
   23f80:	and	r0, r0, r5
   23f84:	cmp	r0, #3
   23f88:	beq	23fc0 <__assert_fail@plt+0x12314>
   23f8c:	cmp	r0, #6
   23f90:	bne	23fc8 <__assert_fail@plt+0x1231c>
   23f94:	ldr	r4, [r6, #20]
   23f98:	ldr	r0, [r4]
   23f9c:	bl	1b22c <__assert_fail@plt+0x9580>
   23fa0:	ldr	r0, [r4, #4]
   23fa4:	bl	1b22c <__assert_fail@plt+0x9580>
   23fa8:	ldr	r0, [r4, #8]
   23fac:	bl	1b22c <__assert_fail@plt+0x9580>
   23fb0:	ldr	r0, [r4, #12]
   23fb4:	bl	1b22c <__assert_fail@plt+0x9580>
   23fb8:	mov	r0, r4
   23fbc:	b	23fc4 <__assert_fail@plt+0x12318>
   23fc0:	ldr	r0, [r6, #20]
   23fc4:	bl	1b22c <__assert_fail@plt+0x9580>
   23fc8:	ldr	r0, [r6]
   23fcc:	cmp	r0, #0
   23fd0:	beq	23ff4 <__assert_fail@plt+0x12348>
   23fd4:	ldr	r9, [r0, #8]
   23fd8:	cmp	r9, r6
   23fdc:	mov	r6, r0
   23fe0:	beq	23f7c <__assert_fail@plt+0x122d0>
   23fe4:	cmp	r9, #0
   23fe8:	mov	r6, r0
   23fec:	beq	23f7c <__assert_fail@plt+0x122d0>
   23ff0:	b	23f60 <__assert_fail@plt+0x122b4>
   23ff4:	mov	r0, #8
   23ff8:	b	23e98 <__assert_fail@plt+0x121ec>
   23ffc:	mov	r5, #0
   24000:	mov	r0, #9
   24004:	b	24010 <__assert_fail@plt+0x12364>
   24008:	mov	r5, #0
   2400c:	mov	r0, #10
   24010:	ldr	r7, [sp, #24]
   24014:	ldr	lr, [sp, #44]	; 0x2c
   24018:	mov	sl, #0
   2401c:	b	22b28 <__assert_fail@plt+0x10e7c>
   24020:	mov	r0, #996	; 0x3e4
   24024:	bl	1b2f8 <__assert_fail@plt+0x964c>
   24028:	cmp	r0, #0
   2402c:	beq	24054 <__assert_fail@plt+0x123a8>
   24030:	ldr	r1, [r8, #56]	; 0x38
   24034:	str	r1, [r0]
   24038:	mov	r1, #0
   2403c:	str	r1, [r8, #64]	; 0x40
   24040:	str	r0, [r8, #56]	; 0x38
   24044:	b	23b4c <__assert_fail@plt+0x11ea0>
   24048:	ldr	r6, [sp, #40]	; 0x28
   2404c:	ldr	r4, [sp, #52]	; 0x34
   24050:	ldr	sl, [sp, #48]	; 0x30
   24054:	mov	r0, #12
   24058:	ldr	r1, [sp, #16]
   2405c:	str	r0, [r1]
   24060:	b	23c90 <__assert_fail@plt+0x11fe4>
   24064:	mov	r0, r6
   24068:	bl	1b22c <__assert_fail@plt+0x9580>
   2406c:	mov	r0, r9
   24070:	bl	1b22c <__assert_fail@plt+0x9580>
   24074:	mov	r9, #12
   24078:	b	23c7c <__assert_fail@plt+0x11fd0>
   2407c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24080:	add	fp, sp, #28
   24084:	sub	sp, sp, #12
   24088:	mov	r9, r1
   2408c:	mov	r6, r0
   24090:	mov	r4, #0
   24094:	mov	r0, #32
   24098:	mov	r1, #1
   2409c:	mov	sl, r3
   240a0:	mov	r5, r2
   240a4:	str	r4, [sp, #8]
   240a8:	bl	1af9c <__assert_fail@plt+0x92f0>
   240ac:	ldr	r1, [fp, #12]
   240b0:	cmp	r0, #0
   240b4:	beq	24404 <__assert_fail@plt+0x12758>
   240b8:	mov	r7, r0
   240bc:	mov	r0, #40	; 0x28
   240c0:	mov	r1, #1
   240c4:	bl	1af9c <__assert_fail@plt+0x92f0>
   240c8:	cmp	r0, #0
   240cc:	beq	24324 <__assert_fail@plt+0x12678>
   240d0:	mov	r8, r0
   240d4:	ldrb	r0, [r0, #16]
   240d8:	ldr	r1, [fp, #8]
   240dc:	mov	r4, #0
   240e0:	add	r3, sp, #8
   240e4:	str	r5, [sp]
   240e8:	mov	r2, r8
   240ec:	str	r4, [sp, #4]
   240f0:	and	r0, r0, #254	; 0xfe
   240f4:	orr	r0, r0, r1
   240f8:	mov	r1, r7
   240fc:	strb	r0, [r8, #16]
   24100:	mov	r0, r9
   24104:	bl	24874 <__assert_fail@plt+0x12bc8>
   24108:	cmp	r0, #0
   2410c:	bne	24340 <__assert_fail@plt+0x12694>
   24110:	ldrb	r0, [sl]
   24114:	cmp	r0, #0
   24118:	beq	24144 <__assert_fail@plt+0x12498>
   2411c:	add	r1, sl, #1
   24120:	mov	r2, #1
   24124:	ubfx	r3, r0, #5, #3
   24128:	and	r0, r0, #31
   2412c:	ldr	r5, [r7, r3, lsl #2]
   24130:	orr	r0, r5, r2, lsl r0
   24134:	str	r0, [r7, r3, lsl #2]
   24138:	ldrb	r0, [r1], #1
   2413c:	cmp	r0, #0
   24140:	bne	24124 <__assert_fail@plt+0x12478>
   24144:	ldr	r0, [fp, #8]
   24148:	cmp	r0, #0
   2414c:	beq	2416c <__assert_fail@plt+0x124c0>
   24150:	vld1.32	{d16-d17}, [r7]
   24154:	mov	r0, r7
   24158:	vmvn	q8, q8
   2415c:	vst1.32	{d16-d17}, [r0]!
   24160:	vld1.32	{d16-d17}, [r0]
   24164:	vmvn	q8, q8
   24168:	vst1.32	{d16-d17}, [r0]
   2416c:	ldr	r0, [r6, #92]	; 0x5c
   24170:	cmp	r0, #2
   24174:	blt	241f0 <__assert_fail@plt+0x12544>
   24178:	ldm	r7, {r0, r1, r2, ip}
   2417c:	ldr	r5, [r6, #60]	; 0x3c
   24180:	ldr	r3, [r5]
   24184:	and	r0, r0, r3
   24188:	str	r0, [r7]
   2418c:	ldr	r0, [r5, #4]
   24190:	and	r0, r1, r0
   24194:	str	r0, [r7, #4]
   24198:	ldr	r0, [r5, #8]
   2419c:	and	r0, r2, r0
   241a0:	str	r0, [r7, #8]
   241a4:	ldr	r0, [r5, #12]
   241a8:	and	r0, ip, r0
   241ac:	str	r0, [r7, #12]
   241b0:	ldr	r0, [r7, #16]
   241b4:	ldr	r1, [r5, #16]
   241b8:	and	r0, r0, r1
   241bc:	str	r0, [r7, #16]
   241c0:	ldr	r0, [r5, #20]
   241c4:	ldr	r1, [r7, #20]
   241c8:	and	r0, r1, r0
   241cc:	str	r0, [r7, #20]
   241d0:	ldr	r0, [r5, #24]
   241d4:	ldr	r1, [r7, #24]
   241d8:	and	r0, r1, r0
   241dc:	str	r0, [r7, #24]
   241e0:	ldr	r0, [r5, #28]
   241e4:	ldr	r1, [r7, #28]
   241e8:	and	r0, r1, r0
   241ec:	str	r0, [r7, #28]
   241f0:	ldr	r1, [r6, #64]	; 0x40
   241f4:	cmp	r1, #31
   241f8:	beq	24380 <__assert_fail@plt+0x126d4>
   241fc:	ldr	r0, [r6, #56]	; 0x38
   24200:	add	r2, r1, #1
   24204:	add	r0, r0, r1, lsl #5
   24208:	mov	r1, #3
   2420c:	vmov.i32	q8, #0	; 0x00000000
   24210:	str	r2, [r6, #64]	; 0x40
   24214:	mov	r2, #0
   24218:	add	r5, r0, #4
   2421c:	str	r2, [r0, #20]
   24220:	str	r7, [r0, #24]
   24224:	str	r1, [r0, #28]
   24228:	mov	r0, #28
   2422c:	mov	r1, r5
   24230:	vst1.32	{d16-d17}, [r1], r0
   24234:	mvn	r0, #0
   24238:	str	r0, [r1]
   2423c:	ldr	r0, [r6, #92]	; 0x5c
   24240:	cmp	r0, #2
   24244:	blt	242ec <__assert_fail@plt+0x12640>
   24248:	ldrb	r0, [r6, #88]	; 0x58
   2424c:	orr	r0, r0, #2
   24250:	strb	r0, [r6, #88]	; 0x58
   24254:	ldr	r1, [r6, #64]	; 0x40
   24258:	cmp	r1, #31
   2425c:	beq	243a8 <__assert_fail@plt+0x126fc>
   24260:	ldr	r0, [r6, #56]	; 0x38
   24264:	add	r0, r0, r1, lsl #5
   24268:	add	r2, r1, #1
   2426c:	mov	r1, #6
   24270:	mov	r4, #0
   24274:	vmov.i32	q8, #0	; 0x00000000
   24278:	add	r7, r0, #4
   2427c:	str	r2, [r6, #64]	; 0x40
   24280:	str	r4, [r0, #20]
   24284:	str	r8, [r0, #24]
   24288:	str	r1, [r0, #28]
   2428c:	mov	r0, #28
   24290:	mov	r1, r7
   24294:	vst1.32	{d16-d17}, [r1], r0
   24298:	mvn	r0, #0
   2429c:	str	r0, [r1]
   242a0:	ldr	r1, [r6, #64]	; 0x40
   242a4:	cmp	r1, #31
   242a8:	beq	24410 <__assert_fail@plt+0x12764>
   242ac:	ldr	r0, [r6, #56]	; 0x38
   242b0:	add	r2, r1, #1
   242b4:	add	r4, r0, r1, lsl #5
   242b8:	mov	r0, #0
   242bc:	mov	r1, #10
   242c0:	str	r2, [r6, #64]	; 0x40
   242c4:	str	r0, [r4, #4]!
   242c8:	mvn	r2, #0
   242cc:	add	r3, r4, #20
   242d0:	stmib	r4, {r5, r7}
   242d4:	str	r0, [r4, #12]
   242d8:	str	r0, [r4, #16]
   242dc:	stm	r3, {r0, r1, r2}
   242e0:	str	r4, [r5]
   242e4:	str	r4, [r7]
   242e8:	b	24318 <__assert_fail@plt+0x1266c>
   242ec:	ldr	r0, [r8]
   242f0:	bl	1b22c <__assert_fail@plt+0x9580>
   242f4:	ldr	r0, [r8, #4]
   242f8:	bl	1b22c <__assert_fail@plt+0x9580>
   242fc:	ldr	r0, [r8, #8]
   24300:	bl	1b22c <__assert_fail@plt+0x9580>
   24304:	ldr	r0, [r8, #12]
   24308:	bl	1b22c <__assert_fail@plt+0x9580>
   2430c:	mov	r0, r8
   24310:	bl	1b22c <__assert_fail@plt+0x9580>
   24314:	mov	r4, r5
   24318:	mov	r0, r4
   2431c:	sub	sp, fp, #28
   24320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24324:	mov	r0, r7
   24328:	bl	1b22c <__assert_fail@plt+0x9580>
   2432c:	ldr	r1, [fp, #12]
   24330:	mov	r0, #12
   24334:	mov	r4, #0
   24338:	str	r0, [r1]
   2433c:	b	24318 <__assert_fail@plt+0x1266c>
   24340:	mov	r5, r0
   24344:	mov	r0, r7
   24348:	bl	1b22c <__assert_fail@plt+0x9580>
   2434c:	ldr	r0, [r8]
   24350:	bl	1b22c <__assert_fail@plt+0x9580>
   24354:	ldr	r0, [r8, #4]
   24358:	bl	1b22c <__assert_fail@plt+0x9580>
   2435c:	ldr	r0, [r8, #8]
   24360:	bl	1b22c <__assert_fail@plt+0x9580>
   24364:	ldr	r0, [r8, #12]
   24368:	bl	1b22c <__assert_fail@plt+0x9580>
   2436c:	mov	r0, r8
   24370:	bl	1b22c <__assert_fail@plt+0x9580>
   24374:	ldr	r0, [fp, #12]
   24378:	str	r5, [r0]
   2437c:	b	24318 <__assert_fail@plt+0x1266c>
   24380:	mov	r0, #996	; 0x3e4
   24384:	bl	1b2f8 <__assert_fail@plt+0x964c>
   24388:	cmp	r0, #0
   2438c:	beq	243d0 <__assert_fail@plt+0x12724>
   24390:	ldr	r1, [r6, #56]	; 0x38
   24394:	str	r1, [r0]
   24398:	mov	r1, #0
   2439c:	str	r1, [r6, #64]	; 0x40
   243a0:	str	r0, [r6, #56]	; 0x38
   243a4:	b	24200 <__assert_fail@plt+0x12554>
   243a8:	mov	r0, #996	; 0x3e4
   243ac:	bl	1b2f8 <__assert_fail@plt+0x964c>
   243b0:	cmp	r0, #0
   243b4:	beq	243d0 <__assert_fail@plt+0x12724>
   243b8:	ldr	r1, [r6, #56]	; 0x38
   243bc:	str	r1, [r0]
   243c0:	mov	r1, #0
   243c4:	str	r1, [r6, #64]	; 0x40
   243c8:	str	r0, [r6, #56]	; 0x38
   243cc:	b	24264 <__assert_fail@plt+0x125b8>
   243d0:	mov	r0, r7
   243d4:	bl	1b22c <__assert_fail@plt+0x9580>
   243d8:	ldr	r0, [r8]
   243dc:	bl	1b22c <__assert_fail@plt+0x9580>
   243e0:	ldr	r0, [r8, #4]
   243e4:	bl	1b22c <__assert_fail@plt+0x9580>
   243e8:	ldr	r0, [r8, #8]
   243ec:	bl	1b22c <__assert_fail@plt+0x9580>
   243f0:	ldr	r0, [r8, #12]
   243f4:	bl	1b22c <__assert_fail@plt+0x9580>
   243f8:	mov	r0, r8
   243fc:	bl	1b22c <__assert_fail@plt+0x9580>
   24400:	ldr	r1, [fp, #12]
   24404:	mov	r0, #12
   24408:	str	r0, [r1]
   2440c:	b	24318 <__assert_fail@plt+0x1266c>
   24410:	mov	r0, #996	; 0x3e4
   24414:	bl	1b2f8 <__assert_fail@plt+0x964c>
   24418:	cmp	r0, #0
   2441c:	beq	24318 <__assert_fail@plt+0x1266c>
   24420:	ldr	r1, [r6, #56]	; 0x38
   24424:	str	r1, [r0]
   24428:	mov	r1, #0
   2442c:	str	r1, [r6, #64]	; 0x40
   24430:	str	r0, [r6, #56]	; 0x38
   24434:	b	242b0 <__assert_fail@plt+0x12604>
   24438:	push	{fp, lr}
   2443c:	mov	fp, sp
   24440:	ldr	ip, [r1, #40]	; 0x28
   24444:	ldr	r3, [r1, #56]	; 0x38
   24448:	cmp	r3, ip
   2444c:	ble	244cc <__assert_fail@plt+0x12820>
   24450:	ldr	r3, [r1, #4]
   24454:	ldrb	lr, [r3, ip]
   24458:	strb	lr, [r0]
   2445c:	ldr	r3, [r1, #80]	; 0x50
   24460:	cmp	r3, #2
   24464:	blt	24488 <__assert_fail@plt+0x127dc>
   24468:	ldr	r3, [r1, #28]
   2446c:	ldr	ip, [r1, #40]	; 0x28
   24470:	cmp	ip, r3
   24474:	beq	24488 <__assert_fail@plt+0x127dc>
   24478:	ldr	r3, [r1, #8]
   2447c:	ldr	r3, [r3, ip, lsl #2]
   24480:	cmn	r3, #1
   24484:	beq	2457c <__assert_fail@plt+0x128d0>
   24488:	tst	r2, #1
   2448c:	beq	244e0 <__assert_fail@plt+0x12834>
   24490:	cmp	lr, #92	; 0x5c
   24494:	bne	244e0 <__assert_fail@plt+0x12834>
   24498:	ldr	r2, [r1, #40]	; 0x28
   2449c:	ldr	r3, [r1, #48]	; 0x30
   244a0:	add	r2, r2, #1
   244a4:	cmp	r2, r3
   244a8:	bge	2457c <__assert_fail@plt+0x128d0>
   244ac:	str	r2, [r1, #40]	; 0x28
   244b0:	ldr	r1, [r1, #4]
   244b4:	ldrb	r2, [r1, r2]
   244b8:	mov	r1, #1
   244bc:	strb	r1, [r0, #4]
   244c0:	strb	r2, [r0]
   244c4:	mov	r0, r1
   244c8:	pop	{fp, pc}
   244cc:	mov	r1, #2
   244d0:	strb	r1, [r0, #4]
   244d4:	mov	r1, #0
   244d8:	mov	r0, r1
   244dc:	pop	{fp, pc}
   244e0:	cmp	lr, #92	; 0x5c
   244e4:	bgt	24538 <__assert_fail@plt+0x1288c>
   244e8:	cmp	lr, #45	; 0x2d
   244ec:	beq	24550 <__assert_fail@plt+0x128a4>
   244f0:	cmp	lr, #91	; 0x5b
   244f4:	bne	2457c <__assert_fail@plt+0x128d0>
   244f8:	ldr	r3, [r1, #40]	; 0x28
   244fc:	ldr	ip, [r1, #48]	; 0x30
   24500:	add	r3, r3, #1
   24504:	cmp	r3, ip
   24508:	bge	2456c <__assert_fail@plt+0x128c0>
   2450c:	ldr	r1, [r1, #4]
   24510:	ldrb	r1, [r1, r3]
   24514:	cmp	r1, #61	; 0x3d
   24518:	strb	r1, [r0]
   2451c:	beq	2458c <__assert_fail@plt+0x128e0>
   24520:	cmp	r1, #58	; 0x3a
   24524:	beq	24594 <__assert_fail@plt+0x128e8>
   24528:	cmp	r1, #46	; 0x2e
   2452c:	bne	24574 <__assert_fail@plt+0x128c8>
   24530:	mov	r1, #26
   24534:	b	245a0 <__assert_fail@plt+0x128f4>
   24538:	cmp	lr, #93	; 0x5d
   2453c:	beq	24558 <__assert_fail@plt+0x128ac>
   24540:	cmp	lr, #94	; 0x5e
   24544:	bne	2457c <__assert_fail@plt+0x128d0>
   24548:	mov	r1, #25
   2454c:	b	2455c <__assert_fail@plt+0x128b0>
   24550:	mov	r1, #22
   24554:	b	2455c <__assert_fail@plt+0x128b0>
   24558:	mov	r1, #21
   2455c:	strb	r1, [r0, #4]
   24560:	mov	r1, #1
   24564:	mov	r0, r1
   24568:	pop	{fp, pc}
   2456c:	mov	r1, #0
   24570:	strb	r1, [r0]
   24574:	mov	r1, #91	; 0x5b
   24578:	strb	r1, [r0]
   2457c:	mov	r1, #1
   24580:	strb	r1, [r0, #4]
   24584:	mov	r0, r1
   24588:	pop	{fp, pc}
   2458c:	mov	r1, #28
   24590:	b	245a0 <__assert_fail@plt+0x128f4>
   24594:	tst	r2, #4
   24598:	beq	24574 <__assert_fail@plt+0x128c8>
   2459c:	mov	r1, #30
   245a0:	strb	r1, [r0, #4]
   245a4:	mov	r1, #2
   245a8:	mov	r0, r1
   245ac:	pop	{fp, pc}
   245b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   245b4:	add	fp, sp, #24
   245b8:	sub	sp, sp, #8
   245bc:	mov	r5, r2
   245c0:	ldr	r2, [r1, #80]	; 0x50
   245c4:	mov	r9, r0
   245c8:	ldr	r0, [r1, #40]	; 0x28
   245cc:	cmp	r2, #1
   245d0:	beq	24640 <__assert_fail@plt+0x12994>
   245d4:	ldr	r4, [r1, #28]
   245d8:	add	r2, r0, #1
   245dc:	cmp	r2, r4
   245e0:	bge	24640 <__assert_fail@plt+0x12994>
   245e4:	ldr	ip, [r1, #8]
   245e8:	mov	r2, #1
   245ec:	add	r6, ip, r0, lsl #2
   245f0:	ldr	r7, [r6, r2, lsl #2]
   245f4:	cmn	r7, #1
   245f8:	bne	24610 <__assert_fail@plt+0x12964>
   245fc:	add	r2, r2, #1
   24600:	add	r7, r0, r2
   24604:	cmp	r7, r4
   24608:	blt	245f0 <__assert_fail@plt+0x12944>
   2460c:	b	24618 <__assert_fail@plt+0x1296c>
   24610:	cmp	r2, #2
   24614:	bcc	24640 <__assert_fail@plt+0x12994>
   24618:	mov	r3, #1
   2461c:	str	r3, [r9]
   24620:	ldr	r0, [ip, r0, lsl #2]
   24624:	str	r0, [r9, #4]
   24628:	ldr	r0, [r1, #40]	; 0x28
   2462c:	add	r0, r0, r2
   24630:	str	r0, [r1, #40]	; 0x28
   24634:	mov	r0, #0
   24638:	sub	sp, fp, #24
   2463c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24640:	add	r2, r0, r3
   24644:	str	r2, [r1, #40]	; 0x28
   24648:	ldrb	r6, [r5, #4]
   2464c:	sub	r0, r6, #22
   24650:	cmp	r0, #8
   24654:	bhi	2485c <__assert_fail@plt+0x12bb0>
   24658:	add	r3, pc, #0
   2465c:	ldr	pc, [r3, r0, lsl #2]
   24660:	andeq	r4, r2, r4, lsr r8
   24664:	andeq	r4, r2, ip, asr r8
   24668:	andeq	r4, r2, ip, asr r8
   2466c:	andeq	r4, r2, ip, asr r8
   24670:	andeq	r4, r2, r4, lsl #13
   24674:	andeq	r4, r2, ip, asr r8
   24678:	andeq	r4, r2, r4, lsl #13
   2467c:	andeq	r4, r2, ip, asr r8
   24680:	andeq	r4, r2, r4, lsl #13
   24684:	ldr	r3, [r1, #56]	; 0x38
   24688:	mov	r0, #7
   2468c:	cmp	r3, r2
   24690:	ble	2486c <__assert_fail@plt+0x12bc0>
   24694:	ldrb	r3, [r5]
   24698:	mov	r2, #0
   2469c:	b	246a8 <__assert_fail@plt+0x129fc>
   246a0:	ldrb	r6, [r5, #4]
   246a4:	add	r2, r2, #1
   246a8:	uxtb	r7, r6
   246ac:	cmp	r7, #30
   246b0:	bne	246c0 <__assert_fail@plt+0x12a14>
   246b4:	ldrb	r7, [r1, #75]	; 0x4b
   246b8:	cmp	r7, #0
   246bc:	bne	24710 <__assert_fail@plt+0x12a64>
   246c0:	ldr	r4, [r1, #40]	; 0x28
   246c4:	ldr	r7, [r1, #4]
   246c8:	add	r6, r4, #1
   246cc:	str	r6, [r1, #40]	; 0x28
   246d0:	ldrb	r4, [r7, r4]
   246d4:	ldr	r7, [r1, #56]	; 0x38
   246d8:	cmp	r7, r6
   246dc:	ble	2486c <__assert_fail@plt+0x12bc0>
   246e0:	uxtb	r7, r4
   246e4:	cmp	r7, r3
   246e8:	bne	246fc <__assert_fail@plt+0x12a50>
   246ec:	ldr	r7, [r1, #4]
   246f0:	ldrb	r7, [r7, r6]
   246f4:	cmp	r7, #93	; 0x5d
   246f8:	beq	247e4 <__assert_fail@plt+0x12b38>
   246fc:	ldr	r7, [r9, #4]
   24700:	cmp	r2, #30
   24704:	strb	r4, [r7, r2]
   24708:	bls	246a0 <__assert_fail@plt+0x129f4>
   2470c:	b	2486c <__assert_fail@plt+0x12bc0>
   24710:	ldrb	r7, [r1, #76]	; 0x4c
   24714:	cmp	r7, #0
   24718:	beq	247b0 <__assert_fail@plt+0x12b04>
   2471c:	ldr	lr, [r1, #28]
   24720:	ldr	ip, [r1, #40]	; 0x28
   24724:	cmp	ip, lr
   24728:	beq	2473c <__assert_fail@plt+0x12a90>
   2472c:	ldr	r4, [r1, #8]
   24730:	ldr	r4, [r4, ip, lsl #2]
   24734:	cmn	r4, #1
   24738:	beq	247d0 <__assert_fail@plt+0x12b24>
   2473c:	ldr	r6, [r1, #12]
   24740:	ldr	r7, [r1, #24]
   24744:	ldr	r4, [r1]
   24748:	ldr	r6, [r6, ip, lsl #2]
   2474c:	add	r6, r7, r6
   24750:	add	r4, r4, r6
   24754:	ldrsb	r4, [r4]
   24758:	cmn	r4, #1
   2475c:	ble	247d0 <__assert_fail@plt+0x12b24>
   24760:	ldr	r7, [r1, #80]	; 0x50
   24764:	mov	r6, #1
   24768:	cmp	r7, #1
   2476c:	beq	247a4 <__assert_fail@plt+0x12af8>
   24770:	add	r7, ip, #1
   24774:	cmp	r7, lr
   24778:	bge	247a4 <__assert_fail@plt+0x12af8>
   2477c:	ldr	r6, [r1, #8]
   24780:	add	r8, r6, ip, lsl #2
   24784:	mov	r6, #1
   24788:	ldr	r7, [r8, r6, lsl #2]
   2478c:	cmn	r7, #1
   24790:	bne	247a4 <__assert_fail@plt+0x12af8>
   24794:	add	r6, r6, #1
   24798:	add	r7, ip, r6
   2479c:	cmp	r7, lr
   247a0:	blt	24788 <__assert_fail@plt+0x12adc>
   247a4:	add	r6, r6, ip
   247a8:	str	r6, [r1, #40]	; 0x28
   247ac:	b	246d4 <__assert_fail@plt+0x12a28>
   247b0:	ldr	r7, [r1, #40]	; 0x28
   247b4:	ldr	r4, [r1, #24]
   247b8:	ldr	ip, [r1]
   247bc:	add	r6, r7, #1
   247c0:	add	r7, r7, r4
   247c4:	str	r6, [r1, #40]	; 0x28
   247c8:	ldrb	r4, [ip, r7]
   247cc:	b	246d4 <__assert_fail@plt+0x12a28>
   247d0:	add	r6, ip, #1
   247d4:	str	r6, [r1, #40]	; 0x28
   247d8:	ldr	r7, [r1, #4]
   247dc:	ldrb	r4, [r7, ip]
   247e0:	b	246d4 <__assert_fail@plt+0x12a28>
   247e4:	add	r0, r6, #1
   247e8:	str	r0, [r1, #40]	; 0x28
   247ec:	mov	r0, #0
   247f0:	ldr	r1, [r9, #4]
   247f4:	strb	r0, [r1, r2]
   247f8:	ldrb	r1, [r5, #4]
   247fc:	cmp	r1, #30
   24800:	beq	2481c <__assert_fail@plt+0x12b70>
   24804:	cmp	r1, #28
   24808:	beq	24824 <__assert_fail@plt+0x12b78>
   2480c:	cmp	r1, #26
   24810:	bne	2486c <__assert_fail@plt+0x12bc0>
   24814:	mov	r1, #3
   24818:	b	24828 <__assert_fail@plt+0x12b7c>
   2481c:	mov	r1, #4
   24820:	b	24828 <__assert_fail@plt+0x12b7c>
   24824:	mov	r1, #2
   24828:	str	r1, [r9]
   2482c:	sub	sp, fp, #24
   24830:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24834:	ldr	r0, [fp, #12]
   24838:	cmp	r0, #0
   2483c:	bne	2485c <__assert_fail@plt+0x12bb0>
   24840:	ldr	r2, [fp, #8]
   24844:	mov	r0, sp
   24848:	bl	24438 <__assert_fail@plt+0x1278c>
   2484c:	ldrb	r1, [sp, #4]
   24850:	mov	r0, #11
   24854:	cmp	r1, #21
   24858:	bne	2486c <__assert_fail@plt+0x12bc0>
   2485c:	mov	r0, #0
   24860:	str	r0, [r9]
   24864:	ldrb	r1, [r5]
   24868:	strb	r1, [r9, #4]
   2486c:	sub	sp, fp, #24
   24870:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24874:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24878:	add	fp, sp, #24
   2487c:	mov	r8, r0
   24880:	ldrb	r0, [fp, #14]
   24884:	ldr	r6, [fp, #8]
   24888:	mov	r5, r3
   2488c:	mov	r7, r2
   24890:	mov	r4, r1
   24894:	tst	r0, #64	; 0x40
   24898:	beq	248d4 <__assert_fail@plt+0x12c28>
   2489c:	movw	r1, #2076	; 0x81c
   248a0:	mov	r0, r6
   248a4:	movt	r1, #3
   248a8:	bl	1185c <strcmp@plt>
   248ac:	cmp	r0, #0
   248b0:	beq	248cc <__assert_fail@plt+0x12c20>
   248b4:	movw	r1, #2082	; 0x822
   248b8:	mov	r0, r6
   248bc:	movt	r1, #3
   248c0:	bl	1185c <strcmp@plt>
   248c4:	cmp	r0, #0
   248c8:	bne	248d4 <__assert_fail@plt+0x12c28>
   248cc:	movw	r6, #2088	; 0x828
   248d0:	movt	r6, #3
   248d4:	ldr	r0, [r5]
   248d8:	ldr	r1, [r7, #36]	; 0x24
   248dc:	cmp	r0, r1
   248e0:	beq	24e00 <__assert_fail@plt+0x13154>
   248e4:	mov	r0, r6
   248e8:	bl	1182c <wctype@plt>
   248ec:	ldr	r2, [r7, #36]	; 0x24
   248f0:	ldr	r1, [r7, #12]
   248f4:	add	r3, r2, #1
   248f8:	str	r3, [r7, #36]	; 0x24
   248fc:	str	r0, [r1, r2, lsl #2]
   24900:	movw	r1, #2062	; 0x80e
   24904:	mov	r0, r6
   24908:	movt	r1, #3
   2490c:	bl	1185c <strcmp@plt>
   24910:	cmp	r0, #0
   24914:	beq	24a78 <__assert_fail@plt+0x12dcc>
   24918:	movw	r1, #2094	; 0x82e
   2491c:	mov	r0, r6
   24920:	movt	r1, #3
   24924:	bl	1185c <strcmp@plt>
   24928:	cmp	r0, #0
   2492c:	beq	24acc <__assert_fail@plt+0x12e20>
   24930:	movw	r1, #2082	; 0x822
   24934:	mov	r0, r6
   24938:	movt	r1, #3
   2493c:	bl	1185c <strcmp@plt>
   24940:	cmp	r0, #0
   24944:	beq	24b20 <__assert_fail@plt+0x12e74>
   24948:	movw	r1, #2070	; 0x816
   2494c:	mov	r0, r6
   24950:	movt	r1, #3
   24954:	bl	1185c <strcmp@plt>
   24958:	cmp	r0, #0
   2495c:	beq	24b74 <__assert_fail@plt+0x12ec8>
   24960:	movw	r1, #2088	; 0x828
   24964:	mov	r0, r6
   24968:	movt	r1, #3
   2496c:	bl	1185c <strcmp@plt>
   24970:	cmp	r0, #0
   24974:	beq	24bc8 <__assert_fail@plt+0x12f1c>
   24978:	movw	r1, #2119	; 0x847
   2497c:	mov	r0, r6
   24980:	movt	r1, #3
   24984:	bl	1185c <strcmp@plt>
   24988:	cmp	r0, #0
   2498c:	beq	24c1c <__assert_fail@plt+0x12f70>
   24990:	movw	r1, #61723	; 0xf11b
   24994:	mov	r0, r6
   24998:	movt	r1, #2
   2499c:	bl	1185c <strcmp@plt>
   249a0:	cmp	r0, #0
   249a4:	beq	24c70 <__assert_fail@plt+0x12fc4>
   249a8:	movw	r1, #2076	; 0x81c
   249ac:	mov	r0, r6
   249b0:	movt	r1, #3
   249b4:	bl	1185c <strcmp@plt>
   249b8:	cmp	r0, #0
   249bc:	beq	24cc0 <__assert_fail@plt+0x13014>
   249c0:	movw	r1, #2100	; 0x834
   249c4:	mov	r0, r6
   249c8:	movt	r1, #3
   249cc:	bl	1185c <strcmp@plt>
   249d0:	cmp	r0, #0
   249d4:	beq	24d10 <__assert_fail@plt+0x13064>
   249d8:	movw	r1, #2106	; 0x83a
   249dc:	mov	r0, r6
   249e0:	movt	r1, #3
   249e4:	bl	1185c <strcmp@plt>
   249e8:	cmp	r0, #0
   249ec:	beq	24d60 <__assert_fail@plt+0x130b4>
   249f0:	movw	r1, #2112	; 0x840
   249f4:	mov	r0, r6
   249f8:	movt	r1, #3
   249fc:	bl	1185c <strcmp@plt>
   24a00:	cmp	r0, #0
   24a04:	beq	24db0 <__assert_fail@plt+0x13104>
   24a08:	movw	r1, #2118	; 0x846
   24a0c:	mov	r0, r6
   24a10:	movt	r1, #3
   24a14:	bl	1185c <strcmp@plt>
   24a18:	mov	r1, r0
   24a1c:	mov	r0, #4
   24a20:	cmp	r1, #0
   24a24:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   24a28:	bl	11a90 <__ctype_b_loc@plt>
   24a2c:	ldr	r1, [r0]
   24a30:	mov	r2, #0
   24a34:	mov	r3, #1
   24a38:	cmp	r8, #0
   24a3c:	bne	24f68 <__assert_fail@plt+0x132bc>
   24a40:	ldrb	r0, [r1, #1]
   24a44:	tst	r0, #16
   24a48:	beq	24a60 <__assert_fail@plt+0x12db4>
   24a4c:	ubfx	r0, r2, #5, #3
   24a50:	and	r6, r2, #31
   24a54:	ldr	r7, [r4, r0, lsl #2]
   24a58:	orr	r7, r7, r3, lsl r6
   24a5c:	str	r7, [r4, r0, lsl #2]
   24a60:	add	r2, r2, #1
   24a64:	add	r1, r1, #2
   24a68:	mov	r0, #0
   24a6c:	cmp	r2, #256	; 0x100
   24a70:	bne	24a40 <__assert_fail@plt+0x12d94>
   24a74:	b	24dfc <__assert_fail@plt+0x13150>
   24a78:	bl	11a90 <__ctype_b_loc@plt>
   24a7c:	ldr	r1, [r0]
   24a80:	cmp	r8, #0
   24a84:	bne	24ea4 <__assert_fail@plt+0x131f8>
   24a88:	mov	r0, #0
   24a8c:	mov	r2, #1
   24a90:	b	24aa8 <__assert_fail@plt+0x12dfc>
   24a94:	add	r0, r0, #1
   24a98:	add	r1, r1, #2
   24a9c:	cmp	r0, #256	; 0x100
   24aa0:	moveq	r0, #0
   24aa4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   24aa8:	ldrb	r3, [r1]
   24aac:	tst	r3, #8
   24ab0:	beq	24a94 <__assert_fail@plt+0x12de8>
   24ab4:	ubfx	r3, r0, #5, #3
   24ab8:	and	r6, r0, #31
   24abc:	ldr	r7, [r4, r3, lsl #2]
   24ac0:	orr	r7, r7, r2, lsl r6
   24ac4:	str	r7, [r4, r3, lsl #2]
   24ac8:	b	24a94 <__assert_fail@plt+0x12de8>
   24acc:	bl	11a90 <__ctype_b_loc@plt>
   24ad0:	ldr	r1, [r0]
   24ad4:	cmp	r8, #0
   24ad8:	bne	24f24 <__assert_fail@plt+0x13278>
   24adc:	mov	r0, #0
   24ae0:	mov	r2, #1
   24ae4:	b	24afc <__assert_fail@plt+0x12e50>
   24ae8:	add	r0, r0, #1
   24aec:	add	r1, r1, #2
   24af0:	cmp	r0, #256	; 0x100
   24af4:	moveq	r0, #0
   24af8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   24afc:	ldrb	r3, [r1]
   24b00:	tst	r3, #2
   24b04:	beq	24ae8 <__assert_fail@plt+0x12e3c>
   24b08:	ubfx	r3, r0, #5, #3
   24b0c:	and	r6, r0, #31
   24b10:	ldr	r7, [r4, r3, lsl #2]
   24b14:	orr	r7, r7, r2, lsl r6
   24b18:	str	r7, [r4, r3, lsl #2]
   24b1c:	b	24ae8 <__assert_fail@plt+0x12e3c>
   24b20:	bl	11a90 <__ctype_b_loc@plt>
   24b24:	ldr	r1, [r0]
   24b28:	cmp	r8, #0
   24b2c:	bne	24fe0 <__assert_fail@plt+0x13334>
   24b30:	mov	r0, #0
   24b34:	mov	r2, #1
   24b38:	b	24b50 <__assert_fail@plt+0x12ea4>
   24b3c:	add	r0, r0, #1
   24b40:	add	r1, r1, #2
   24b44:	cmp	r0, #256	; 0x100
   24b48:	moveq	r0, #0
   24b4c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   24b50:	ldrb	r3, [r1, #1]
   24b54:	tst	r3, #2
   24b58:	beq	24b3c <__assert_fail@plt+0x12e90>
   24b5c:	ubfx	r3, r0, #5, #3
   24b60:	and	r6, r0, #31
   24b64:	ldr	r7, [r4, r3, lsl #2]
   24b68:	orr	r7, r7, r2, lsl r6
   24b6c:	str	r7, [r4, r3, lsl #2]
   24b70:	b	24b3c <__assert_fail@plt+0x12e90>
   24b74:	bl	11a90 <__ctype_b_loc@plt>
   24b78:	ldr	r1, [r0]
   24b7c:	cmp	r8, #0
   24b80:	bne	25060 <__assert_fail@plt+0x133b4>
   24b84:	mov	r0, #0
   24b88:	mov	r2, #1
   24b8c:	b	24ba4 <__assert_fail@plt+0x12ef8>
   24b90:	add	r0, r0, #1
   24b94:	add	r1, r1, #2
   24b98:	cmp	r0, #256	; 0x100
   24b9c:	moveq	r0, #0
   24ba0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   24ba4:	ldrb	r3, [r1, #1]
   24ba8:	tst	r3, #32
   24bac:	beq	24b90 <__assert_fail@plt+0x12ee4>
   24bb0:	ubfx	r3, r0, #5, #3
   24bb4:	and	r6, r0, #31
   24bb8:	ldr	r7, [r4, r3, lsl #2]
   24bbc:	orr	r7, r7, r2, lsl r6
   24bc0:	str	r7, [r4, r3, lsl #2]
   24bc4:	b	24b90 <__assert_fail@plt+0x12ee4>
   24bc8:	bl	11a90 <__ctype_b_loc@plt>
   24bcc:	ldr	r1, [r0]
   24bd0:	cmp	r8, #0
   24bd4:	bne	250a4 <__assert_fail@plt+0x133f8>
   24bd8:	mov	r0, #0
   24bdc:	mov	r2, #1
   24be0:	b	24bf8 <__assert_fail@plt+0x12f4c>
   24be4:	add	r0, r0, #1
   24be8:	add	r1, r1, #2
   24bec:	cmp	r0, #256	; 0x100
   24bf0:	moveq	r0, #0
   24bf4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   24bf8:	ldrb	r3, [r1, #1]
   24bfc:	tst	r3, #4
   24c00:	beq	24be4 <__assert_fail@plt+0x12f38>
   24c04:	ubfx	r3, r0, #5, #3
   24c08:	and	r6, r0, #31
   24c0c:	ldr	r7, [r4, r3, lsl #2]
   24c10:	orr	r7, r7, r2, lsl r6
   24c14:	str	r7, [r4, r3, lsl #2]
   24c18:	b	24be4 <__assert_fail@plt+0x12f38>
   24c1c:	bl	11a90 <__ctype_b_loc@plt>
   24c20:	ldr	r1, [r0]
   24c24:	cmp	r8, #0
   24c28:	bne	250e8 <__assert_fail@plt+0x1343c>
   24c2c:	mov	r0, #0
   24c30:	mov	r2, #1
   24c34:	b	24c4c <__assert_fail@plt+0x12fa0>
   24c38:	add	r0, r0, #1
   24c3c:	add	r1, r1, #2
   24c40:	cmp	r0, #256	; 0x100
   24c44:	moveq	r0, #0
   24c48:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   24c4c:	ldrb	r3, [r1, #1]
   24c50:	tst	r3, #8
   24c54:	beq	24c38 <__assert_fail@plt+0x12f8c>
   24c58:	ubfx	r3, r0, #5, #3
   24c5c:	and	r6, r0, #31
   24c60:	ldr	r7, [r4, r3, lsl #2]
   24c64:	orr	r7, r7, r2, lsl r6
   24c68:	str	r7, [r4, r3, lsl #2]
   24c6c:	b	24c38 <__assert_fail@plt+0x12f8c>
   24c70:	bl	11a90 <__ctype_b_loc@plt>
   24c74:	ldr	r1, [r0]
   24c78:	mov	r2, #0
   24c7c:	mov	r3, #1
   24c80:	cmp	r8, #0
   24c84:	bne	24e2c <__assert_fail@plt+0x13180>
   24c88:	ldrb	r0, [r1, #1]
   24c8c:	tst	r0, #64	; 0x40
   24c90:	beq	24ca8 <__assert_fail@plt+0x12ffc>
   24c94:	ubfx	r0, r2, #5, #3
   24c98:	and	r6, r2, #31
   24c9c:	ldr	r7, [r4, r0, lsl #2]
   24ca0:	orr	r7, r7, r3, lsl r6
   24ca4:	str	r7, [r4, r0, lsl #2]
   24ca8:	add	r2, r2, #1
   24cac:	add	r1, r1, #2
   24cb0:	mov	r0, #0
   24cb4:	cmp	r2, #256	; 0x100
   24cb8:	bne	24c88 <__assert_fail@plt+0x12fdc>
   24cbc:	b	24dfc <__assert_fail@plt+0x13150>
   24cc0:	bl	11a90 <__ctype_b_loc@plt>
   24cc4:	ldr	r1, [r0]
   24cc8:	mov	r2, #0
   24ccc:	mov	r3, #1
   24cd0:	cmp	r8, #0
   24cd4:	bne	24e68 <__assert_fail@plt+0x131bc>
   24cd8:	ldrb	r0, [r1, #1]
   24cdc:	tst	r0, #1
   24ce0:	beq	24cf8 <__assert_fail@plt+0x1304c>
   24ce4:	ubfx	r0, r2, #5, #3
   24ce8:	and	r6, r2, #31
   24cec:	ldr	r7, [r4, r0, lsl #2]
   24cf0:	orr	r7, r7, r3, lsl r6
   24cf4:	str	r7, [r4, r0, lsl #2]
   24cf8:	add	r2, r2, #1
   24cfc:	add	r1, r1, #2
   24d00:	mov	r0, #0
   24d04:	cmp	r2, #256	; 0x100
   24d08:	bne	24cd8 <__assert_fail@plt+0x1302c>
   24d0c:	b	24dfc <__assert_fail@plt+0x13150>
   24d10:	bl	11a90 <__ctype_b_loc@plt>
   24d14:	ldr	r1, [r0]
   24d18:	mov	r2, #0
   24d1c:	mov	r3, #1
   24d20:	cmp	r8, #0
   24d24:	bne	24ee8 <__assert_fail@plt+0x1323c>
   24d28:	ldrb	r0, [r1]
   24d2c:	tst	r0, #1
   24d30:	beq	24d48 <__assert_fail@plt+0x1309c>
   24d34:	ubfx	r0, r2, #5, #3
   24d38:	and	r6, r2, #31
   24d3c:	ldr	r7, [r4, r0, lsl #2]
   24d40:	orr	r7, r7, r3, lsl r6
   24d44:	str	r7, [r4, r0, lsl #2]
   24d48:	add	r2, r2, #1
   24d4c:	add	r1, r1, #2
   24d50:	mov	r0, #0
   24d54:	cmp	r2, #256	; 0x100
   24d58:	bne	24d28 <__assert_fail@plt+0x1307c>
   24d5c:	b	24dfc <__assert_fail@plt+0x13150>
   24d60:	bl	11a90 <__ctype_b_loc@plt>
   24d64:	ldr	r1, [r0]
   24d68:	mov	r2, #0
   24d6c:	mov	r3, #1
   24d70:	cmp	r8, #0
   24d74:	bne	24fa4 <__assert_fail@plt+0x132f8>
   24d78:	ldrsh	r0, [r1]
   24d7c:	cmn	r0, #1
   24d80:	bgt	24d98 <__assert_fail@plt+0x130ec>
   24d84:	ubfx	r0, r2, #5, #3
   24d88:	and	r6, r2, #31
   24d8c:	ldr	r7, [r4, r0, lsl #2]
   24d90:	orr	r7, r7, r3, lsl r6
   24d94:	str	r7, [r4, r0, lsl #2]
   24d98:	add	r2, r2, #1
   24d9c:	add	r1, r1, #2
   24da0:	mov	r0, #0
   24da4:	cmp	r2, #256	; 0x100
   24da8:	bne	24d78 <__assert_fail@plt+0x130cc>
   24dac:	b	24dfc <__assert_fail@plt+0x13150>
   24db0:	bl	11a90 <__ctype_b_loc@plt>
   24db4:	ldr	r1, [r0]
   24db8:	mov	r2, #0
   24dbc:	mov	r3, #1
   24dc0:	cmp	r8, #0
   24dc4:	bne	25024 <__assert_fail@plt+0x13378>
   24dc8:	ldrb	r0, [r1]
   24dcc:	tst	r0, #4
   24dd0:	beq	24de8 <__assert_fail@plt+0x1313c>
   24dd4:	ubfx	r0, r2, #5, #3
   24dd8:	and	r6, r2, #31
   24ddc:	ldr	r7, [r4, r0, lsl #2]
   24de0:	orr	r7, r7, r3, lsl r6
   24de4:	str	r7, [r4, r0, lsl #2]
   24de8:	add	r2, r2, #1
   24dec:	add	r1, r1, #2
   24df0:	mov	r0, #0
   24df4:	cmp	r2, #256	; 0x100
   24df8:	bne	24dc8 <__assert_fail@plt+0x1311c>
   24dfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24e00:	mov	r1, #1
   24e04:	orr	r9, r1, r0, lsl #1
   24e08:	ldr	r0, [r7, #12]
   24e0c:	lsl	r1, r9, #2
   24e10:	bl	1b388 <__assert_fail@plt+0x96dc>
   24e14:	cmp	r0, #0
   24e18:	moveq	r0, #12
   24e1c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   24e20:	str	r0, [r7, #12]
   24e24:	str	r9, [r5]
   24e28:	b	248e4 <__assert_fail@plt+0x12c38>
   24e2c:	ldrb	r0, [r1, #1]
   24e30:	tst	r0, #64	; 0x40
   24e34:	beq	24e50 <__assert_fail@plt+0x131a4>
   24e38:	ldrb	r0, [r8, r2]
   24e3c:	ubfx	r7, r0, #5, #3
   24e40:	and	r0, r0, #31
   24e44:	ldr	r6, [r4, r7, lsl #2]
   24e48:	orr	r0, r6, r3, lsl r0
   24e4c:	str	r0, [r4, r7, lsl #2]
   24e50:	add	r2, r2, #1
   24e54:	add	r1, r1, #2
   24e58:	mov	r0, #0
   24e5c:	cmp	r2, #256	; 0x100
   24e60:	bne	24e2c <__assert_fail@plt+0x13180>
   24e64:	b	24dfc <__assert_fail@plt+0x13150>
   24e68:	ldrb	r0, [r1, #1]
   24e6c:	tst	r0, #1
   24e70:	beq	24e8c <__assert_fail@plt+0x131e0>
   24e74:	ldrb	r0, [r8, r2]
   24e78:	ubfx	r7, r0, #5, #3
   24e7c:	and	r0, r0, #31
   24e80:	ldr	r6, [r4, r7, lsl #2]
   24e84:	orr	r0, r6, r3, lsl r0
   24e88:	str	r0, [r4, r7, lsl #2]
   24e8c:	add	r2, r2, #1
   24e90:	add	r1, r1, #2
   24e94:	mov	r0, #0
   24e98:	cmp	r2, #256	; 0x100
   24e9c:	bne	24e68 <__assert_fail@plt+0x131bc>
   24ea0:	b	24dfc <__assert_fail@plt+0x13150>
   24ea4:	mov	r2, #0
   24ea8:	mov	r3, #1
   24eac:	ldrb	r0, [r1]
   24eb0:	tst	r0, #8
   24eb4:	beq	24ed0 <__assert_fail@plt+0x13224>
   24eb8:	ldrb	r0, [r8, r2]
   24ebc:	ubfx	r7, r0, #5, #3
   24ec0:	and	r0, r0, #31
   24ec4:	ldr	r6, [r4, r7, lsl #2]
   24ec8:	orr	r0, r6, r3, lsl r0
   24ecc:	str	r0, [r4, r7, lsl #2]
   24ed0:	add	r2, r2, #1
   24ed4:	add	r1, r1, #2
   24ed8:	mov	r0, #0
   24edc:	cmp	r2, #256	; 0x100
   24ee0:	bne	24eac <__assert_fail@plt+0x13200>
   24ee4:	b	24dfc <__assert_fail@plt+0x13150>
   24ee8:	ldrb	r0, [r1]
   24eec:	tst	r0, #1
   24ef0:	beq	24f0c <__assert_fail@plt+0x13260>
   24ef4:	ldrb	r0, [r8, r2]
   24ef8:	ubfx	r7, r0, #5, #3
   24efc:	and	r0, r0, #31
   24f00:	ldr	r6, [r4, r7, lsl #2]
   24f04:	orr	r0, r6, r3, lsl r0
   24f08:	str	r0, [r4, r7, lsl #2]
   24f0c:	add	r2, r2, #1
   24f10:	add	r1, r1, #2
   24f14:	mov	r0, #0
   24f18:	cmp	r2, #256	; 0x100
   24f1c:	bne	24ee8 <__assert_fail@plt+0x1323c>
   24f20:	b	24dfc <__assert_fail@plt+0x13150>
   24f24:	mov	r2, #0
   24f28:	mov	r3, #1
   24f2c:	ldrb	r0, [r1]
   24f30:	tst	r0, #2
   24f34:	beq	24f50 <__assert_fail@plt+0x132a4>
   24f38:	ldrb	r0, [r8, r2]
   24f3c:	ubfx	r7, r0, #5, #3
   24f40:	and	r0, r0, #31
   24f44:	ldr	r6, [r4, r7, lsl #2]
   24f48:	orr	r0, r6, r3, lsl r0
   24f4c:	str	r0, [r4, r7, lsl #2]
   24f50:	add	r2, r2, #1
   24f54:	add	r1, r1, #2
   24f58:	mov	r0, #0
   24f5c:	cmp	r2, #256	; 0x100
   24f60:	bne	24f2c <__assert_fail@plt+0x13280>
   24f64:	b	24dfc <__assert_fail@plt+0x13150>
   24f68:	ldrb	r0, [r1, #1]
   24f6c:	tst	r0, #16
   24f70:	beq	24f8c <__assert_fail@plt+0x132e0>
   24f74:	ldrb	r0, [r8, r2]
   24f78:	ubfx	r7, r0, #5, #3
   24f7c:	and	r0, r0, #31
   24f80:	ldr	r6, [r4, r7, lsl #2]
   24f84:	orr	r0, r6, r3, lsl r0
   24f88:	str	r0, [r4, r7, lsl #2]
   24f8c:	add	r2, r2, #1
   24f90:	add	r1, r1, #2
   24f94:	mov	r0, #0
   24f98:	cmp	r2, #256	; 0x100
   24f9c:	bne	24f68 <__assert_fail@plt+0x132bc>
   24fa0:	b	24dfc <__assert_fail@plt+0x13150>
   24fa4:	ldrsh	r0, [r1]
   24fa8:	cmn	r0, #1
   24fac:	bgt	24fc8 <__assert_fail@plt+0x1331c>
   24fb0:	ldrb	r0, [r8, r2]
   24fb4:	ubfx	r7, r0, #5, #3
   24fb8:	and	r0, r0, #31
   24fbc:	ldr	r6, [r4, r7, lsl #2]
   24fc0:	orr	r0, r6, r3, lsl r0
   24fc4:	str	r0, [r4, r7, lsl #2]
   24fc8:	add	r2, r2, #1
   24fcc:	add	r1, r1, #2
   24fd0:	mov	r0, #0
   24fd4:	cmp	r2, #256	; 0x100
   24fd8:	bne	24fa4 <__assert_fail@plt+0x132f8>
   24fdc:	b	24dfc <__assert_fail@plt+0x13150>
   24fe0:	mov	r2, #0
   24fe4:	mov	r3, #1
   24fe8:	ldrb	r0, [r1, #1]
   24fec:	tst	r0, #2
   24ff0:	beq	2500c <__assert_fail@plt+0x13360>
   24ff4:	ldrb	r0, [r8, r2]
   24ff8:	ubfx	r7, r0, #5, #3
   24ffc:	and	r0, r0, #31
   25000:	ldr	r6, [r4, r7, lsl #2]
   25004:	orr	r0, r6, r3, lsl r0
   25008:	str	r0, [r4, r7, lsl #2]
   2500c:	add	r2, r2, #1
   25010:	add	r1, r1, #2
   25014:	mov	r0, #0
   25018:	cmp	r2, #256	; 0x100
   2501c:	bne	24fe8 <__assert_fail@plt+0x1333c>
   25020:	b	24dfc <__assert_fail@plt+0x13150>
   25024:	ldrb	r0, [r1]
   25028:	tst	r0, #4
   2502c:	beq	25048 <__assert_fail@plt+0x1339c>
   25030:	ldrb	r0, [r8, r2]
   25034:	ubfx	r7, r0, #5, #3
   25038:	and	r0, r0, #31
   2503c:	ldr	r6, [r4, r7, lsl #2]
   25040:	orr	r0, r6, r3, lsl r0
   25044:	str	r0, [r4, r7, lsl #2]
   25048:	add	r2, r2, #1
   2504c:	add	r1, r1, #2
   25050:	mov	r0, #0
   25054:	cmp	r2, #256	; 0x100
   25058:	bne	25024 <__assert_fail@plt+0x13378>
   2505c:	b	24dfc <__assert_fail@plt+0x13150>
   25060:	mov	r2, #0
   25064:	mov	r3, #1
   25068:	ldrb	r0, [r1, #1]
   2506c:	tst	r0, #32
   25070:	beq	2508c <__assert_fail@plt+0x133e0>
   25074:	ldrb	r0, [r8, r2]
   25078:	ubfx	r7, r0, #5, #3
   2507c:	and	r0, r0, #31
   25080:	ldr	r6, [r4, r7, lsl #2]
   25084:	orr	r0, r6, r3, lsl r0
   25088:	str	r0, [r4, r7, lsl #2]
   2508c:	add	r2, r2, #1
   25090:	add	r1, r1, #2
   25094:	mov	r0, #0
   25098:	cmp	r2, #256	; 0x100
   2509c:	bne	25068 <__assert_fail@plt+0x133bc>
   250a0:	b	24dfc <__assert_fail@plt+0x13150>
   250a4:	mov	r2, #0
   250a8:	mov	r3, #1
   250ac:	ldrb	r0, [r1, #1]
   250b0:	tst	r0, #4
   250b4:	beq	250d0 <__assert_fail@plt+0x13424>
   250b8:	ldrb	r0, [r8, r2]
   250bc:	ubfx	r7, r0, #5, #3
   250c0:	and	r0, r0, #31
   250c4:	ldr	r6, [r4, r7, lsl #2]
   250c8:	orr	r0, r6, r3, lsl r0
   250cc:	str	r0, [r4, r7, lsl #2]
   250d0:	add	r2, r2, #1
   250d4:	add	r1, r1, #2
   250d8:	mov	r0, #0
   250dc:	cmp	r2, #256	; 0x100
   250e0:	bne	250ac <__assert_fail@plt+0x13400>
   250e4:	b	24dfc <__assert_fail@plt+0x13150>
   250e8:	mov	r2, #0
   250ec:	mov	r3, #1
   250f0:	ldrb	r0, [r1, #1]
   250f4:	tst	r0, #8
   250f8:	beq	25114 <__assert_fail@plt+0x13468>
   250fc:	ldrb	r0, [r8, r2]
   25100:	ubfx	r7, r0, #5, #3
   25104:	and	r0, r0, #31
   25108:	ldr	r6, [r4, r7, lsl #2]
   2510c:	orr	r0, r6, r3, lsl r0
   25110:	str	r0, [r4, r7, lsl #2]
   25114:	add	r2, r2, #1
   25118:	add	r1, r1, #2
   2511c:	mov	r0, #0
   25120:	cmp	r2, #256	; 0x100
   25124:	bne	250f0 <__assert_fail@plt+0x13444>
   25128:	b	24dfc <__assert_fail@plt+0x13150>
   2512c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25130:	add	fp, sp, #24
   25134:	ldrb	r3, [r1, #24]
   25138:	ldr	r2, [r1, #28]
   2513c:	mov	r4, #0
   25140:	sub	r3, r3, #2
   25144:	cmp	r3, #14
   25148:	bhi	2526c <__assert_fail@plt+0x135c0>
   2514c:	add	r7, pc, #0
   25150:	ldr	pc, [r7, r3, lsl #2]
   25154:	andeq	r5, r2, r0, lsr #5
   25158:	andeq	r5, r2, ip, ror #4
   2515c:	andeq	r5, r2, r4, lsl #5
   25160:	andeq	r5, r2, ip, ror #4
   25164:	andeq	r5, r2, ip, ror #4
   25168:	andeq	r5, r2, ip, ror #4
   2516c:	muleq	r2, r0, r1
   25170:	muleq	r2, r0, r1
   25174:	andeq	r5, r2, r4, ror #3
   25178:	andeq	r5, r2, r4, ror #3
   2517c:	muleq	r2, r0, r1
   25180:	andeq	r5, r2, ip, ror #4
   25184:	andeq	r5, r2, ip, ror #4
   25188:	andeq	r5, r2, ip, ror #4
   2518c:	andeq	r5, r2, r0, lsr #5
   25190:	ldr	r1, [r1, #16]
   25194:	ldr	r5, [r1, #28]
   25198:	ldr	r6, [r0, #20]
   2519c:	add	r0, r2, r2, lsl #1
   251a0:	mov	r1, #1
   251a4:	str	r1, [r6, r0, lsl #2]!
   251a8:	mov	r0, #4
   251ac:	mov	r7, r6
   251b0:	str	r1, [r7, #4]!
   251b4:	bl	1b2f8 <__assert_fail@plt+0x964c>
   251b8:	cmp	r0, #0
   251bc:	str	r0, [r6, #8]
   251c0:	strne	r5, [r0]
   251c4:	movne	r0, r4
   251c8:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   251cc:	mov	r0, #0
   251d0:	str	r0, [r7]
   251d4:	str	r0, [r6]
   251d8:	mov	r4, #12
   251dc:	mov	r0, r4
   251e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   251e4:	ldrb	r3, [r0, #88]	; 0x58
   251e8:	add	r6, r1, #16
   251ec:	add	r5, r2, r2, lsl #1
   251f0:	orr	r3, r3, #1
   251f4:	strb	r3, [r0, #88]	; 0x58
   251f8:	mov	r3, r6
   251fc:	ldr	r7, [r1, #4]
   25200:	ldr	r1, [r1, #8]
   25204:	cmp	r1, #0
   25208:	addne	r3, r1, #12
   2520c:	cmp	r7, #0
   25210:	ldr	r1, [r3]
   25214:	addne	r6, r7, #12
   25218:	ldr	r8, [r1, #28]
   2521c:	ldr	r1, [r6]
   25220:	ldr	r6, [r0, #20]
   25224:	mov	r0, #2
   25228:	ldr	r9, [r1, #28]
   2522c:	mov	r7, r6
   25230:	str	r0, [r7, r5, lsl #2]!
   25234:	mov	r0, #8
   25238:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2523c:	cmp	r0, #0
   25240:	str	r0, [r7, #8]
   25244:	beq	251d8 <__assert_fail@plt+0x1352c>
   25248:	add	r1, r6, r5, lsl #2
   2524c:	cmp	r9, r8
   25250:	add	r1, r1, #4
   25254:	bne	252a8 <__assert_fail@plt+0x135fc>
   25258:	mov	r2, #1
   2525c:	str	r2, [r1]
   25260:	str	r9, [r0]
   25264:	mov	r0, r4
   25268:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2526c:	ldr	r1, [r1, #16]
   25270:	ldr	r0, [r0, #12]
   25274:	ldr	r1, [r1, #28]
   25278:	str	r1, [r0, r2, lsl #2]
   2527c:	mov	r0, r4
   25280:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25284:	ldr	r7, [r1, #16]
   25288:	ldr	r3, [r0, #12]
   2528c:	ldr	r5, [r7, #28]
   25290:	str	r5, [r3, r2, lsl #2]
   25294:	ldrb	r1, [r1, #24]
   25298:	cmp	r1, #4
   2529c:	beq	25198 <__assert_fail@plt+0x134ec>
   252a0:	mov	r0, r4
   252a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   252a8:	mov	r2, #2
   252ac:	str	r2, [r1]
   252b0:	stmge	r0, {r8, r9}
   252b4:	strlt	r9, [r0]
   252b8:	strlt	r8, [r0, #4]
   252bc:	mov	r0, r4
   252c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   252c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252c8:	add	fp, sp, #28
   252cc:	sub	sp, sp, #4
   252d0:	ldr	r6, [r2, #4]
   252d4:	mov	r8, r0
   252d8:	ldr	r5, [r1]
   252dc:	mov	r9, r2
   252e0:	cmp	r6, #0
   252e4:	ldrbne	r0, [r1, #28]
   252e8:	andsne	r0, r0, #16
   252ec:	bne	25490 <__assert_fail@plt+0x137e4>
   252f0:	ldr	r1, [r5, #64]	; 0x40
   252f4:	cmp	r1, #31
   252f8:	beq	254b8 <__assert_fail@plt+0x1380c>
   252fc:	ldr	r0, [r5, #56]	; 0x38
   25300:	add	r2, r1, #1
   25304:	add	r0, r0, r1, lsl #5
   25308:	mov	r1, #0
   2530c:	vmov.i32	q8, #0	; 0x00000000
   25310:	str	r2, [r5, #64]	; 0x40
   25314:	add	sl, r0, #4
   25318:	mov	r2, #8
   2531c:	str	r1, [r0, #20]
   25320:	str	r1, [r0, #24]
   25324:	str	r2, [r0, #28]
   25328:	mov	r0, #28
   2532c:	mov	r1, sl
   25330:	vst1.32	{d16-d17}, [r1], r0
   25334:	mvn	r0, #0
   25338:	str	r0, [r1]
   2533c:	ldr	r1, [r5, #64]	; 0x40
   25340:	cmp	r1, #31
   25344:	beq	254e0 <__assert_fail@plt+0x13834>
   25348:	ldr	r0, [r5, #56]	; 0x38
   2534c:	add	r2, r1, #1
   25350:	add	r0, r0, r1, lsl #5
   25354:	mov	r1, #0
   25358:	vmov.i32	q8, #0	; 0x00000000
   2535c:	str	r2, [r5, #64]	; 0x40
   25360:	add	r7, r0, #4
   25364:	mov	r2, #9
   25368:	str	r1, [r0, #20]
   2536c:	str	r1, [r0, #24]
   25370:	str	r2, [r0, #28]
   25374:	mov	r0, #28
   25378:	mov	r1, r7
   2537c:	vst1.32	{d16-d17}, [r1], r0
   25380:	mvn	r0, #0
   25384:	str	r0, [r1]
   25388:	cmp	r6, #0
   2538c:	mov	r4, r7
   25390:	beq	253e0 <__assert_fail@plt+0x13734>
   25394:	ldr	r1, [r5, #64]	; 0x40
   25398:	cmp	r1, #31
   2539c:	beq	25530 <__assert_fail@plt+0x13884>
   253a0:	ldr	r0, [r5, #56]	; 0x38
   253a4:	add	r2, r1, #1
   253a8:	add	r4, r0, r1, lsl #5
   253ac:	mov	r0, #0
   253b0:	mov	r1, #16
   253b4:	cmp	r7, #0
   253b8:	str	r2, [r5, #64]	; 0x40
   253bc:	str	r0, [r4, #4]!
   253c0:	mvn	r2, #0
   253c4:	add	r3, r4, #20
   253c8:	stmib	r4, {r6, r7}
   253cc:	str	r0, [r4, #12]
   253d0:	str	r0, [r4, #16]
   253d4:	stm	r3, {r0, r1, r2}
   253d8:	str	r4, [r6]
   253dc:	strne	r4, [r7]
   253e0:	ldr	r1, [r5, #64]	; 0x40
   253e4:	cmp	r1, #31
   253e8:	beq	25508 <__assert_fail@plt+0x1385c>
   253ec:	ldr	r0, [r5, #56]	; 0x38
   253f0:	add	r2, r1, #1
   253f4:	add	r6, r0, r1, lsl #5
   253f8:	mov	r0, #0
   253fc:	mov	r1, #16
   25400:	cmp	sl, #0
   25404:	str	r2, [r5, #64]	; 0x40
   25408:	str	r0, [r6, #4]!
   2540c:	mvn	r2, #0
   25410:	add	r3, r6, #20
   25414:	str	sl, [r6, #4]
   25418:	str	r4, [r6, #8]
   2541c:	str	r0, [r6, #12]
   25420:	str	r0, [r6, #16]
   25424:	stm	r3, {r0, r1, r2}
   25428:	strne	r6, [sl]
   2542c:	cmp	r4, #0
   25430:	strne	r6, [r4]
   25434:	cmp	r7, #0
   25438:	beq	25448 <__assert_fail@plt+0x1379c>
   2543c:	cmp	sl, #0
   25440:	cmpne	r4, #0
   25444:	bne	25458 <__assert_fail@plt+0x137ac>
   25448:	mov	r0, #12
   2544c:	mov	r6, #0
   25450:	str	r0, [r8]
   25454:	b	254ac <__assert_fail@plt+0x13800>
   25458:	cmp	r6, #0
   2545c:	beq	25448 <__assert_fail@plt+0x1379c>
   25460:	ldr	r0, [r9, #20]
   25464:	str	r0, [r7, #20]
   25468:	str	r0, [sl, #20]
   2546c:	ldr	r1, [r9, #24]
   25470:	ldr	r0, [r7, #24]
   25474:	lsr	r1, r1, #19
   25478:	bfi	r0, r1, #19, #1
   2547c:	str	r0, [r7, #24]
   25480:	ldr	r0, [sl, #24]
   25484:	bfi	r0, r1, #19, #1
   25488:	str	r0, [sl, #24]
   2548c:	b	254ac <__assert_fail@plt+0x13800>
   25490:	ldr	r0, [r9, #20]
   25494:	cmp	r0, #31
   25498:	bgt	254ac <__assert_fail@plt+0x13800>
   2549c:	ldr	r1, [r5, #80]	; 0x50
   254a0:	mov	r2, #1
   254a4:	tst	r1, r2, lsl r0
   254a8:	bne	252f0 <__assert_fail@plt+0x13644>
   254ac:	mov	r0, r6
   254b0:	sub	sp, fp, #28
   254b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   254b8:	mov	r0, #996	; 0x3e4
   254bc:	bl	1b2f8 <__assert_fail@plt+0x964c>
   254c0:	cmp	r0, #0
   254c4:	beq	25558 <__assert_fail@plt+0x138ac>
   254c8:	ldr	r1, [r5, #56]	; 0x38
   254cc:	str	r1, [r0]
   254d0:	mov	r1, #0
   254d4:	str	r1, [r5, #64]	; 0x40
   254d8:	str	r0, [r5, #56]	; 0x38
   254dc:	b	25300 <__assert_fail@plt+0x13654>
   254e0:	mov	r0, #996	; 0x3e4
   254e4:	bl	1b2f8 <__assert_fail@plt+0x964c>
   254e8:	cmp	r0, #0
   254ec:	beq	25560 <__assert_fail@plt+0x138b4>
   254f0:	ldr	r1, [r5, #56]	; 0x38
   254f4:	str	r1, [r0]
   254f8:	mov	r1, #0
   254fc:	str	r1, [r5, #64]	; 0x40
   25500:	str	r0, [r5, #56]	; 0x38
   25504:	b	2534c <__assert_fail@plt+0x136a0>
   25508:	mov	r0, #996	; 0x3e4
   2550c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   25510:	cmp	r0, #0
   25514:	beq	25568 <__assert_fail@plt+0x138bc>
   25518:	ldr	r1, [r5, #56]	; 0x38
   2551c:	str	r1, [r0]
   25520:	mov	r1, #0
   25524:	str	r1, [r5, #64]	; 0x40
   25528:	str	r0, [r5, #56]	; 0x38
   2552c:	b	253f0 <__assert_fail@plt+0x13744>
   25530:	mov	r0, #996	; 0x3e4
   25534:	bl	1b2f8 <__assert_fail@plt+0x964c>
   25538:	cmp	r0, #0
   2553c:	beq	25578 <__assert_fail@plt+0x138cc>
   25540:	ldr	r1, [r5, #56]	; 0x38
   25544:	str	r1, [r0]
   25548:	mov	r1, #0
   2554c:	str	r1, [r5, #64]	; 0x40
   25550:	str	r0, [r5, #56]	; 0x38
   25554:	b	253a4 <__assert_fail@plt+0x136f8>
   25558:	mov	sl, #0
   2555c:	b	2533c <__assert_fail@plt+0x13690>
   25560:	mov	r7, #0
   25564:	b	25388 <__assert_fail@plt+0x136dc>
   25568:	mov	r6, #0
   2556c:	cmp	r7, #0
   25570:	bne	2543c <__assert_fail@plt+0x13790>
   25574:	b	25448 <__assert_fail@plt+0x1379c>
   25578:	mov	r4, #0
   2557c:	b	253e0 <__assert_fail@plt+0x13734>
   25580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25584:	add	fp, sp, #28
   25588:	sub	sp, sp, #12
   2558c:	mov	r4, r0
   25590:	ldr	r7, [r0, #4]
   25594:	ldr	r0, [r0, #8]
   25598:	mov	r5, r2
   2559c:	mov	r9, r1
   255a0:	cmp	r0, r7
   255a4:	bcs	25670 <__assert_fail@plt+0x139c4>
   255a8:	ldr	r1, [r4]
   255ac:	str	r9, [r1, r0, lsl #3]!
   255b0:	str	r5, [r1, #4]
   255b4:	ldr	r0, [r4]
   255b8:	ldr	r1, [r4, #8]
   255bc:	add	r0, r0, r1, lsl #3
   255c0:	ldr	r1, [r0, #4]
   255c4:	bfc	r1, #8, #10
   255c8:	str	r1, [r0, #4]
   255cc:	uxtb	r1, r5
   255d0:	cmp	r1, #5
   255d4:	bne	255e8 <__assert_fail@plt+0x1393c>
   255d8:	ldr	r2, [r4, #92]	; 0x5c
   255dc:	mov	r0, #1048576	; 0x100000
   255e0:	cmp	r2, #1
   255e4:	bgt	255f8 <__assert_fail@plt+0x1394c>
   255e8:	sub	r0, r1, #6
   255ec:	clz	r0, r0
   255f0:	lsr	r0, r0, #5
   255f4:	lsl	r0, r0, #20
   255f8:	ldr	r1, [r4]
   255fc:	ldr	r2, [r4, #8]
   25600:	add	r1, r1, r2, lsl #3
   25604:	ldr	r2, [r1, #4]
   25608:	bic	r2, r2, #1048576	; 0x100000
   2560c:	orr	r0, r2, r0
   25610:	mvn	r2, #0
   25614:	str	r0, [r1, #4]
   25618:	ldr	r0, [r4, #8]
   2561c:	ldr	r1, [r4, #12]
   25620:	str	r2, [r1, r0, lsl #2]
   25624:	mov	r2, #0
   25628:	ldr	r0, [r4, #8]
   2562c:	ldr	r1, [r4, #20]
   25630:	add	r0, r0, r0, lsl #1
   25634:	str	r2, [r1, r0, lsl #2]!
   25638:	str	r2, [r1, #4]
   2563c:	str	r2, [r1, #8]
   25640:	ldr	r0, [r4, #8]
   25644:	ldr	r1, [r4, #24]
   25648:	add	r0, r0, r0, lsl #1
   2564c:	str	r2, [r1, r0, lsl #2]!
   25650:	str	r2, [r1, #4]
   25654:	str	r2, [r1, #8]
   25658:	ldr	r6, [r4, #8]
   2565c:	add	r0, r6, #1
   25660:	str	r0, [r4, #8]
   25664:	mov	r0, r6
   25668:	sub	sp, fp, #28
   2566c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25670:	movw	r0, #21845	; 0x5555
   25674:	lsl	r1, r7, #1
   25678:	mvn	r6, #0
   2567c:	movt	r0, #5461	; 0x1555
   25680:	cmp	r1, r0
   25684:	bhi	25664 <__assert_fail@plt+0x139b8>
   25688:	ldr	r0, [r4]
   2568c:	str	r1, [sp, #8]
   25690:	lsl	r1, r7, #4
   25694:	bl	1b388 <__assert_fail@plt+0x96dc>
   25698:	cmp	r0, #0
   2569c:	beq	25664 <__assert_fail@plt+0x139b8>
   256a0:	str	r0, [r4]
   256a4:	lsl	r8, r7, #3
   256a8:	ldr	r0, [r4, #12]
   256ac:	mov	r1, r8
   256b0:	bl	1b388 <__assert_fail@plt+0x96dc>
   256b4:	str	r0, [sp, #4]
   256b8:	ldr	r0, [r4, #16]
   256bc:	mov	r1, r8
   256c0:	bl	1b388 <__assert_fail@plt+0x96dc>
   256c4:	mov	r2, r0
   256c8:	ldr	r0, [r4, #20]
   256cc:	add	r1, r7, r7, lsl #1
   256d0:	lsl	r8, r1, #3
   256d4:	mov	r7, r2
   256d8:	mov	r1, r8
   256dc:	bl	1b388 <__assert_fail@plt+0x96dc>
   256e0:	mov	sl, r0
   256e4:	ldr	r0, [r4, #24]
   256e8:	mov	r1, r8
   256ec:	bl	1b388 <__assert_fail@plt+0x96dc>
   256f0:	mov	r8, r0
   256f4:	ldr	r0, [sp, #4]
   256f8:	cmp	r0, #0
   256fc:	beq	2570c <__assert_fail@plt+0x13a60>
   25700:	cmp	r7, #0
   25704:	cmpne	sl, #0
   25708:	bne	2572c <__assert_fail@plt+0x13a80>
   2570c:	bl	1b22c <__assert_fail@plt+0x9580>
   25710:	mov	r0, r7
   25714:	bl	1b22c <__assert_fail@plt+0x9580>
   25718:	mov	r0, sl
   2571c:	bl	1b22c <__assert_fail@plt+0x9580>
   25720:	mov	r0, r8
   25724:	bl	1b22c <__assert_fail@plt+0x9580>
   25728:	b	25664 <__assert_fail@plt+0x139b8>
   2572c:	cmp	r8, #0
   25730:	beq	2570c <__assert_fail@plt+0x13a60>
   25734:	add	r1, r4, #12
   25738:	stm	r1, {r0, r7, sl}
   2573c:	str	r8, [r4, #24]
   25740:	ldr	r0, [sp, #8]
   25744:	str	r0, [r4, #4]
   25748:	ldr	r0, [r4, #8]
   2574c:	b	255a8 <__assert_fail@plt+0x138fc>
   25750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25754:	add	fp, sp, #28
   25758:	sub	sp, sp, #44	; 0x2c
   2575c:	mov	r8, r0
   25760:	ldr	r0, [r1, #20]
   25764:	add	r4, r2, r2, lsl #1
   25768:	mov	r5, r1
   2576c:	mov	r1, #0
   25770:	mov	r9, r3
   25774:	mov	r6, r2
   25778:	add	r0, r0, r4, lsl #2
   2577c:	ldr	r0, [r0, #4]
   25780:	str	r1, [sp, #36]	; 0x24
   25784:	add	r0, r0, #1
   25788:	str	r0, [sp, #32]
   2578c:	lsl	r0, r0, #2
   25790:	bl	1b2f8 <__assert_fail@plt+0x964c>
   25794:	cmp	r0, #0
   25798:	str	r0, [sp, #40]	; 0x28
   2579c:	beq	25964 <__assert_fail@plt+0x13cb8>
   257a0:	mov	r1, #1
   257a4:	str	r6, [r0]
   257a8:	str	r1, [sp, #36]	; 0x24
   257ac:	mvn	r1, #0
   257b0:	ldr	r0, [r5, #24]
   257b4:	add	r0, r0, r4, lsl #2
   257b8:	str	r1, [r0, #4]
   257bc:	ldr	r2, [r5]
   257c0:	add	r0, r2, r6, lsl #3
   257c4:	ldr	r0, [r0, #4]
   257c8:	ubfx	r1, r0, #8, #10
   257cc:	cmp	r1, #0
   257d0:	beq	2582c <__assert_fail@plt+0x13b80>
   257d4:	ldr	r3, [r5, #20]
   257d8:	add	r3, r3, r4, lsl #2
   257dc:	ldr	r7, [r3, #4]
   257e0:	cmp	r7, #0
   257e4:	beq	2582c <__assert_fail@plt+0x13b80>
   257e8:	ldr	r3, [r3, #8]
   257ec:	ldr	r3, [r3]
   257f0:	add	r2, r2, r3, lsl #3
   257f4:	ldrb	r2, [r2, #6]
   257f8:	tst	r2, #4
   257fc:	bne	2582c <__assert_fail@plt+0x13b80>
   25800:	str	r1, [sp]
   25804:	mov	r0, r5
   25808:	mov	r1, r6
   2580c:	mov	r2, r6
   25810:	mov	r3, r6
   25814:	bl	25970 <__assert_fail@plt+0x13cc4>
   25818:	cmp	r0, #0
   2581c:	bne	2595c <__assert_fail@plt+0x13cb0>
   25820:	ldr	r0, [r5]
   25824:	add	r0, r0, r6, lsl #3
   25828:	ldr	r0, [r0, #4]
   2582c:	tst	r0, #8
   25830:	beq	25930 <__assert_fail@plt+0x13c84>
   25834:	ldr	r0, [r5, #20]
   25838:	add	r1, r0, r4, lsl #2
   2583c:	ldr	r1, [r1, #4]
   25840:	cmp	r1, #1
   25844:	blt	25930 <__assert_fail@plt+0x13c84>
   25848:	str	r8, [sp, #12]
   2584c:	mov	r8, #0
   25850:	add	r7, sp, #16
   25854:	add	sl, sp, #32
   25858:	mov	r6, #0
   2585c:	str	r9, [sp, #8]
   25860:	add	r0, r0, r4, lsl #2
   25864:	ldr	r0, [r0, #8]
   25868:	ldr	r2, [r0, r6, lsl #2]
   2586c:	ldr	r0, [r5, #24]
   25870:	add	r9, r2, r2, lsl #1
   25874:	add	r0, r0, r9, lsl #2
   25878:	ldr	r1, [r0, #4]
   2587c:	cmn	r1, #1
   25880:	beq	258e8 <__assert_fail@plt+0x13c3c>
   25884:	cmp	r1, #0
   25888:	bne	258a8 <__assert_fail@plt+0x13bfc>
   2588c:	mov	r0, r7
   25890:	mov	r1, r5
   25894:	mov	r3, #0
   25898:	bl	25750 <__assert_fail@plt+0x13aa4>
   2589c:	cmp	r0, #0
   258a0:	beq	258b8 <__assert_fail@plt+0x13c0c>
   258a4:	b	2595c <__assert_fail@plt+0x13cb0>
   258a8:	vldr	d16, [r0]
   258ac:	ldr	r0, [r0, #8]
   258b0:	str	r0, [sp, #24]
   258b4:	vstr	d16, [sp, #16]
   258b8:	mov	r0, sl
   258bc:	mov	r1, r7
   258c0:	bl	25e20 <__assert_fail@plt+0x14174>
   258c4:	cmp	r0, #0
   258c8:	bne	2595c <__assert_fail@plt+0x13cb0>
   258cc:	ldr	r0, [r5, #24]
   258d0:	add	r0, r0, r9, lsl #2
   258d4:	ldr	r0, [r0, #4]
   258d8:	cmp	r0, #0
   258dc:	bne	258ec <__assert_fail@plt+0x13c40>
   258e0:	ldr	r0, [sp, #24]
   258e4:	bl	1b22c <__assert_fail@plt+0x9580>
   258e8:	mov	r8, #1
   258ec:	ldr	r0, [r5, #20]
   258f0:	add	r6, r6, #1
   258f4:	add	r1, r0, r4, lsl #2
   258f8:	ldr	r1, [r1, #4]
   258fc:	cmp	r6, r1
   25900:	blt	25860 <__assert_fail@plt+0x13bb4>
   25904:	tst	r8, #1
   25908:	ldr	r8, [sp, #12]
   2590c:	ldr	r0, [sp, #8]
   25910:	beq	25930 <__assert_fail@plt+0x13c84>
   25914:	cmp	r0, #0
   25918:	bne	25930 <__assert_fail@plt+0x13c84>
   2591c:	ldr	r0, [r5, #24]
   25920:	mov	r1, #0
   25924:	add	r0, r0, r4, lsl #2
   25928:	str	r1, [r0, #4]
   2592c:	b	25948 <__assert_fail@plt+0x13c9c>
   25930:	ldr	r0, [r5, #24]
   25934:	vldr	d16, [sp, #32]
   25938:	ldr	r1, [sp, #40]	; 0x28
   2593c:	add	r0, r0, r4, lsl #2
   25940:	str	r1, [r0, #8]
   25944:	vstr	d16, [r0]
   25948:	ldr	r0, [sp, #40]	; 0x28
   2594c:	vldr	d16, [sp, #32]
   25950:	str	r0, [r8, #8]
   25954:	mov	r0, #0
   25958:	vstr	d16, [r8]
   2595c:	sub	sp, fp, #28
   25960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25964:	mov	r0, #12
   25968:	sub	sp, fp, #28
   2596c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25974:	add	fp, sp, #28
   25978:	sub	sp, sp, #20
   2597c:	mov	r9, r0
   25980:	ldr	r0, [fp, #8]
   25984:	mov	sl, r2
   25988:	mov	r8, r1
   2598c:	str	r3, [sp, #8]
   25990:	str	r0, [sp, #16]
   25994:	ldr	r2, [r9]
   25998:	add	r3, r2, r8, lsl #3
   2599c:	ldrb	r0, [r3, #4]!
   259a0:	cmp	r0, #4
   259a4:	bne	25a94 <__assert_fail@plt+0x13de8>
   259a8:	ldr	r0, [r9, #12]
   259ac:	ldr	r1, [r9, #20]
   259b0:	add	r6, sl, sl, lsl #1
   259b4:	ldr	r4, [r0, r8, lsl #2]
   259b8:	add	r0, r1, r6, lsl #2
   259bc:	mov	r1, #0
   259c0:	str	r1, [r0, #4]
   259c4:	mov	r0, r9
   259c8:	ldr	r1, [r2, r4, lsl #3]!
   259cc:	ldr	r2, [r2, #4]
   259d0:	bl	25580 <__assert_fail@plt+0x138d4>
   259d4:	mov	r7, r0
   259d8:	mov	r0, #12
   259dc:	cmn	r7, #1
   259e0:	str	r0, [sp, #12]
   259e4:	beq	25e14 <__assert_fail@plt+0x14168>
   259e8:	ldr	r1, [r9]
   259ec:	movw	r0, #65280	; 0xff00
   259f0:	movw	r3, #255	; 0xff
   259f4:	movt	r0, #3
   259f8:	movt	r3, #65532	; 0xfffc
   259fc:	mov	ip, r0
   25a00:	ldr	r0, [sp, #16]
   25a04:	add	r1, r1, r7, lsl #3
   25a08:	ldr	r2, [r1, #4]
   25a0c:	and	r0, ip, r0, lsl #8
   25a10:	and	r2, r2, r3
   25a14:	orr	r0, r2, r0
   25a18:	str	r0, [r1, #4]
   25a1c:	ldr	r0, [r9]
   25a20:	add	r1, r0, r4, lsl #3
   25a24:	add	r0, r0, r7, lsl #3
   25a28:	ldr	r1, [r1, #4]
   25a2c:	ldr	r2, [r0, #4]
   25a30:	and	r1, r1, ip
   25a34:	orr	r1, r1, r2
   25a38:	str	r1, [r0, #4]
   25a3c:	ldr	r0, [r9]
   25a40:	add	r0, r0, r7, lsl #3
   25a44:	ldr	r1, [r0, #4]
   25a48:	orr	r1, r1, #262144	; 0x40000
   25a4c:	str	r1, [r0, #4]
   25a50:	ldr	r0, [r9, #16]
   25a54:	str	r4, [r0, r7, lsl #2]
   25a58:	ldr	r0, [r9, #12]
   25a5c:	ldr	r1, [r0, r8, lsl #2]
   25a60:	str	r1, [r0, sl, lsl #2]
   25a64:	mov	r1, r7
   25a68:	ldr	r0, [r9, #20]
   25a6c:	add	r0, r0, r6, lsl #2
   25a70:	bl	25fb0 <__assert_fail@plt+0x14304>
   25a74:	mov	r1, #0
   25a78:	cmp	r0, #0
   25a7c:	mov	r8, r4
   25a80:	mov	sl, r7
   25a84:	beq	25e14 <__assert_fail@plt+0x14168>
   25a88:	cmp	r1, #0
   25a8c:	beq	25994 <__assert_fail@plt+0x13ce8>
   25a90:	b	25dec <__assert_fail@plt+0x14140>
   25a94:	ldr	r0, [r9, #20]
   25a98:	add	ip, r8, r8, lsl #1
   25a9c:	add	r7, r0, ip, lsl #2
   25aa0:	ldr	r1, [r7, #4]
   25aa4:	cmp	r1, #0
   25aa8:	beq	25e00 <__assert_fail@plt+0x14154>
   25aac:	ldr	r7, [r7, #8]
   25ab0:	add	r6, sl, sl, lsl #1
   25ab4:	cmp	r1, #1
   25ab8:	add	r0, r0, r6, lsl #2
   25abc:	ldr	r5, [r7]
   25ac0:	mov	r7, #0
   25ac4:	str	r7, [r0, #4]
   25ac8:	bne	25b04 <__assert_fail@plt+0x13e58>
   25acc:	ldr	r1, [sp, #8]
   25ad0:	cmp	r8, r1
   25ad4:	bne	25d04 <__assert_fail@plt+0x14058>
   25ad8:	cmp	sl, r8
   25adc:	beq	25d04 <__assert_fail@plt+0x14058>
   25ae0:	mov	r1, r5
   25ae4:	bl	25fb0 <__assert_fail@plt+0x14304>
   25ae8:	ldr	r8, [sp, #8]
   25aec:	cmp	r0, #0
   25af0:	mov	r1, #1
   25af4:	movwne	r1, #2
   25af8:	cmp	r1, #0
   25afc:	beq	25994 <__assert_fail@plt+0x13ce8>
   25b00:	b	25dec <__assert_fail@plt+0x14140>
   25b04:	ldr	r1, [r9, #8]
   25b08:	ldr	r8, [sp, #16]
   25b0c:	str	r6, [sp, #4]
   25b10:	sub	r3, r1, #1
   25b14:	cmp	r3, #1
   25b18:	blt	25b68 <__assert_fail@plt+0x13ebc>
   25b1c:	add	r3, r2, r3, lsl #3
   25b20:	ldr	r6, [r3, #4]
   25b24:	ands	r3, r6, #262144	; 0x40000
   25b28:	beq	25b68 <__assert_fail@plt+0x13ebc>
   25b2c:	ldr	r4, [r9, #16]
   25b30:	sub	r3, r2, #12
   25b34:	sub	r4, r4, #4
   25b38:	ldr	r7, [r4, r1, lsl #2]
   25b3c:	cmp	r7, r5
   25b40:	ubfxeq	r7, r6, #8, #10
   25b44:	cmpeq	r7, r8
   25b48:	beq	25dcc <__assert_fail@plt+0x14120>
   25b4c:	sub	r7, r1, #2
   25b50:	cmp	r7, #1
   25b54:	blt	25b68 <__assert_fail@plt+0x13ebc>
   25b58:	ldr	r6, [r3, r1, lsl #3]
   25b5c:	sub	r1, r1, #1
   25b60:	ands	r7, r6, #262144	; 0x40000
   25b64:	bne	25b38 <__assert_fail@plt+0x13e8c>
   25b68:	ldr	r1, [r2, r5, lsl #3]!
   25b6c:	mov	r0, r9
   25b70:	mov	sl, ip
   25b74:	ldr	r2, [r2, #4]
   25b78:	bl	25580 <__assert_fail@plt+0x138d4>
   25b7c:	mov	r4, r0
   25b80:	mov	r0, #12
   25b84:	cmn	r4, #1
   25b88:	str	r0, [sp, #12]
   25b8c:	beq	25e14 <__assert_fail@plt+0x14168>
   25b90:	ldr	r1, [r9]
   25b94:	movw	r0, #65280	; 0xff00
   25b98:	movw	r7, #255	; 0xff
   25b9c:	ldr	r6, [sp, #4]
   25ba0:	movt	r0, #3
   25ba4:	movt	r7, #65532	; 0xfffc
   25ba8:	mov	r3, r0
   25bac:	and	r0, r0, r8, lsl #8
   25bb0:	add	r1, r1, r4, lsl #3
   25bb4:	ldr	r2, [r1, #4]
   25bb8:	and	r2, r2, r7
   25bbc:	orr	r0, r2, r0
   25bc0:	str	r0, [r1, #4]
   25bc4:	ldr	r0, [r9]
   25bc8:	add	r1, r0, r5, lsl #3
   25bcc:	add	r0, r0, r4, lsl #3
   25bd0:	ldr	r1, [r1, #4]
   25bd4:	ldr	r2, [r0, #4]
   25bd8:	and	r1, r1, r3
   25bdc:	orr	r1, r1, r2
   25be0:	str	r1, [r0, #4]
   25be4:	ldr	r0, [r9]
   25be8:	add	r0, r0, r4, lsl #3
   25bec:	ldr	r1, [r0, #4]
   25bf0:	orr	r1, r1, #262144	; 0x40000
   25bf4:	str	r1, [r0, #4]
   25bf8:	mov	r1, r4
   25bfc:	ldr	r0, [r9, #16]
   25c00:	str	r5, [r0, r4, lsl #2]
   25c04:	ldr	r0, [r9, #20]
   25c08:	add	r0, r0, r6, lsl #2
   25c0c:	bl	25fb0 <__assert_fail@plt+0x14304>
   25c10:	cmp	r0, #0
   25c14:	beq	25e14 <__assert_fail@plt+0x14168>
   25c18:	ldr	r0, [sp, #16]
   25c1c:	ldr	r3, [sp, #8]
   25c20:	mov	r1, r5
   25c24:	mov	r2, r4
   25c28:	str	r0, [sp]
   25c2c:	mov	r0, r9
   25c30:	bl	25970 <__assert_fail@plt+0x13cc4>
   25c34:	cmp	r0, #0
   25c38:	bne	25e10 <__assert_fail@plt+0x14164>
   25c3c:	ldr	r1, [r9, #20]
   25c40:	ldr	r0, [r9]
   25c44:	add	r1, r1, sl, lsl #2
   25c48:	ldr	r1, [r1, #8]
   25c4c:	ldr	r8, [r1, #4]
   25c50:	ldr	r1, [r0, r8, lsl #3]!
   25c54:	ldr	r2, [r0, #4]
   25c58:	mov	r0, r9
   25c5c:	bl	25580 <__assert_fail@plt+0x138d4>
   25c60:	mov	sl, r0
   25c64:	mov	r0, #12
   25c68:	cmn	sl, #1
   25c6c:	str	r0, [sp, #12]
   25c70:	beq	25e14 <__assert_fail@plt+0x14168>
   25c74:	ldr	r1, [r9]
   25c78:	movw	r0, #65280	; 0xff00
   25c7c:	movw	r7, #255	; 0xff
   25c80:	movt	r0, #3
   25c84:	movt	r7, #65532	; 0xfffc
   25c88:	mov	r3, r0
   25c8c:	ldr	r0, [sp, #16]
   25c90:	add	r1, r1, sl, lsl #3
   25c94:	ldr	r2, [r1, #4]
   25c98:	and	r0, r3, r0, lsl #8
   25c9c:	and	r2, r2, r7
   25ca0:	orr	r0, r2, r0
   25ca4:	str	r0, [r1, #4]
   25ca8:	ldr	r0, [r9]
   25cac:	add	r1, r0, r8, lsl #3
   25cb0:	add	r0, r0, sl, lsl #3
   25cb4:	ldr	r1, [r1, #4]
   25cb8:	ldr	r2, [r0, #4]
   25cbc:	and	r1, r1, r3
   25cc0:	orr	r1, r1, r2
   25cc4:	str	r1, [r0, #4]
   25cc8:	ldr	r0, [r9]
   25ccc:	add	r0, r0, sl, lsl #3
   25cd0:	ldr	r1, [r0, #4]
   25cd4:	orr	r1, r1, #262144	; 0x40000
   25cd8:	str	r1, [r0, #4]
   25cdc:	mov	r1, sl
   25ce0:	ldr	r0, [r9, #16]
   25ce4:	str	r8, [r0, sl, lsl #2]
   25ce8:	ldr	r0, [r9, #20]
   25cec:	add	r0, r0, r6, lsl #2
   25cf0:	bl	25fb0 <__assert_fail@plt+0x14304>
   25cf4:	mov	r1, #0
   25cf8:	cmp	r0, #0
   25cfc:	bne	25a88 <__assert_fail@plt+0x13ddc>
   25d00:	b	25e14 <__assert_fail@plt+0x14168>
   25d04:	ldr	r1, [r2, r5, lsl #3]!
   25d08:	ldr	r4, [r3]
   25d0c:	mov	r0, r9
   25d10:	ldr	r2, [r2, #4]
   25d14:	bl	25580 <__assert_fail@plt+0x138d4>
   25d18:	mov	sl, r0
   25d1c:	ubfx	r0, r4, #8, #10
   25d20:	mov	r1, #12
   25d24:	cmn	sl, #1
   25d28:	str	r1, [sp, #12]
   25d2c:	beq	25e14 <__assert_fail@plt+0x14168>
   25d30:	ldr	r1, [sp, #16]
   25d34:	movw	r7, #255	; 0xff
   25d38:	movt	r7, #65532	; 0xfffc
   25d3c:	orr	r1, r0, r1
   25d40:	movw	r0, #65280	; 0xff00
   25d44:	movt	r0, #3
   25d48:	str	r1, [sp, #16]
   25d4c:	mov	r3, r0
   25d50:	and	r0, r0, r1, lsl #8
   25d54:	ldr	r1, [r9]
   25d58:	add	r1, r1, sl, lsl #3
   25d5c:	ldr	r2, [r1, #4]
   25d60:	and	r2, r2, r7
   25d64:	orr	r0, r2, r0
   25d68:	str	r0, [r1, #4]
   25d6c:	ldr	r0, [r9]
   25d70:	add	r1, r0, r5, lsl #3
   25d74:	add	r0, r0, sl, lsl #3
   25d78:	ldr	r1, [r1, #4]
   25d7c:	ldr	r2, [r0, #4]
   25d80:	and	r1, r1, r3
   25d84:	orr	r1, r1, r2
   25d88:	str	r1, [r0, #4]
   25d8c:	ldr	r0, [r9]
   25d90:	add	r0, r0, sl, lsl #3
   25d94:	ldr	r1, [r0, #4]
   25d98:	orr	r1, r1, #262144	; 0x40000
   25d9c:	str	r1, [r0, #4]
   25da0:	mov	r1, sl
   25da4:	ldr	r0, [r9, #16]
   25da8:	str	r5, [r0, sl, lsl #2]
   25dac:	ldr	r0, [r9, #20]
   25db0:	add	r0, r0, r6, lsl #2
   25db4:	bl	25fb0 <__assert_fail@plt+0x14304>
   25db8:	mov	r1, #0
   25dbc:	cmp	r0, #0
   25dc0:	mov	r8, r5
   25dc4:	bne	25a88 <__assert_fail@plt+0x13ddc>
   25dc8:	b	25e14 <__assert_fail@plt+0x14168>
   25dcc:	sub	r1, r1, #1
   25dd0:	mov	sl, ip
   25dd4:	bl	25fb0 <__assert_fail@plt+0x14304>
   25dd8:	ldr	r6, [sp, #4]
   25ddc:	cmp	r0, #0
   25de0:	bne	25c3c <__assert_fail@plt+0x13f90>
   25de4:	mov	r0, #12
   25de8:	b	25e10 <__assert_fail@plt+0x14164>
   25dec:	mov	r0, #12
   25df0:	cmp	r1, #2
   25df4:	str	r0, [sp, #12]
   25df8:	beq	25e0c <__assert_fail@plt+0x14160>
   25dfc:	b	25e14 <__assert_fail@plt+0x14168>
   25e00:	ldr	r0, [r9, #12]
   25e04:	ldr	r1, [r0, r8, lsl #2]
   25e08:	str	r1, [r0, sl, lsl #2]
   25e0c:	mov	r0, #0
   25e10:	str	r0, [sp, #12]
   25e14:	ldr	r0, [sp, #12]
   25e18:	sub	sp, fp, #28
   25e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25e24:	add	fp, sp, #24
   25e28:	mov	r8, #0
   25e2c:	cmp	r1, #0
   25e30:	beq	25f88 <__assert_fail@plt+0x142dc>
   25e34:	mov	r5, r0
   25e38:	ldr	r0, [r1, #4]
   25e3c:	mov	r9, r1
   25e40:	cmp	r0, #0
   25e44:	beq	25f88 <__assert_fail@plt+0x142dc>
   25e48:	ldr	r1, [r5, #4]
   25e4c:	ldr	r2, [r5]
   25e50:	add	r3, r1, r0, lsl #1
   25e54:	cmp	r2, r3
   25e58:	bge	25e88 <__assert_fail@plt+0x141dc>
   25e5c:	add	r7, r2, r0
   25e60:	ldr	r0, [r5, #8]
   25e64:	lsl	r1, r7, #3
   25e68:	bl	1b388 <__assert_fail@plt+0x96dc>
   25e6c:	cmp	r0, #0
   25e70:	beq	25fa4 <__assert_fail@plt+0x142f8>
   25e74:	str	r0, [r5, #8]
   25e78:	lsl	r0, r7, #1
   25e7c:	str	r0, [r5]
   25e80:	ldr	r1, [r5, #4]
   25e84:	ldr	r0, [r9, #4]
   25e88:	cmp	r1, #0
   25e8c:	beq	25f90 <__assert_fail@plt+0x142e4>
   25e90:	add	r7, r1, r0, lsl #1
   25e94:	sub	r1, r1, #1
   25e98:	sub	r0, r0, #1
   25e9c:	orr	r2, r0, r1
   25ea0:	cmp	r2, #0
   25ea4:	blt	25ef0 <__assert_fail@plt+0x14244>
   25ea8:	ldr	r2, [r9, #8]
   25eac:	ldr	r3, [r5, #8]
   25eb0:	ldr	r4, [r2, r0, lsl #2]
   25eb4:	ldr	r6, [r3, r1, lsl #2]
   25eb8:	cmp	r6, r4
   25ebc:	bne	25ecc <__assert_fail@plt+0x14220>
   25ec0:	sub	r1, r1, #1
   25ec4:	sub	r0, r0, #1
   25ec8:	b	25ee4 <__assert_fail@plt+0x14238>
   25ecc:	bge	25ee0 <__assert_fail@plt+0x14234>
   25ed0:	sub	r7, r7, #1
   25ed4:	sub	r0, r0, #1
   25ed8:	str	r4, [r3, r7, lsl #2]
   25edc:	b	25ee4 <__assert_fail@plt+0x14238>
   25ee0:	sub	r1, r1, #1
   25ee4:	orr	r6, r0, r1
   25ee8:	cmn	r6, #1
   25eec:	bgt	25eb0 <__assert_fail@plt+0x14204>
   25ef0:	cmp	r0, #0
   25ef4:	blt	25f14 <__assert_fail@plt+0x14268>
   25ef8:	add	r2, r0, #1
   25efc:	ldr	r0, [r5, #8]
   25f00:	ldr	r1, [r9, #8]
   25f04:	sub	r7, r7, r2
   25f08:	lsl	r2, r2, #2
   25f0c:	add	r0, r0, r7, lsl #2
   25f10:	bl	118ec <memcpy@plt>
   25f14:	ldr	r0, [r5, #4]
   25f18:	ldr	r2, [r9, #4]
   25f1c:	sub	r1, r0, #1
   25f20:	add	r3, r1, r2, lsl #1
   25f24:	sub	r2, r3, r7
   25f28:	adds	r2, r2, #1
   25f2c:	beq	25f88 <__assert_fail@plt+0x142dc>
   25f30:	add	r0, r2, r0
   25f34:	str	r0, [r5, #4]
   25f38:	ldr	r0, [r5, #8]
   25f3c:	ldr	r6, [r0, r1, lsl #2]
   25f40:	ldr	r5, [r0, r3, lsl #2]
   25f44:	cmp	r5, r6
   25f48:	ble	25f64 <__assert_fail@plt+0x142b8>
   25f4c:	add	r6, r2, r1
   25f50:	subs	r2, r2, #1
   25f54:	sub	r3, r3, #1
   25f58:	str	r5, [r0, r6, lsl #2]
   25f5c:	bne	25f3c <__assert_fail@plt+0x14290>
   25f60:	b	25f88 <__assert_fail@plt+0x142dc>
   25f64:	add	r5, r2, r1
   25f68:	cmp	r1, #0
   25f6c:	str	r6, [r0, r5, lsl #2]
   25f70:	sub	r6, r1, #1
   25f74:	mov	r1, r6
   25f78:	bgt	25f3c <__assert_fail@plt+0x14290>
   25f7c:	add	r1, r0, r7, lsl #2
   25f80:	lsl	r2, r2, #2
   25f84:	bl	118ec <memcpy@plt>
   25f88:	mov	r0, r8
   25f8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25f90:	str	r0, [r5, #4]
   25f94:	ldr	r0, [r5, #8]
   25f98:	ldr	r2, [r9, #4]
   25f9c:	ldr	r1, [r9, #8]
   25fa0:	b	25f80 <__assert_fail@plt+0x142d4>
   25fa4:	mov	r8, #12
   25fa8:	mov	r0, r8
   25fac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25fb0:	push	{r4, r5, r6, sl, fp, lr}
   25fb4:	add	fp, sp, #16
   25fb8:	ldr	r2, [r0]
   25fbc:	mov	r5, r1
   25fc0:	mov	r4, r0
   25fc4:	cmp	r2, #0
   25fc8:	beq	25ff8 <__assert_fail@plt+0x1434c>
   25fcc:	ldr	r1, [r4, #4]
   25fd0:	cmp	r1, #0
   25fd4:	bne	26034 <__assert_fail@plt+0x14388>
   25fd8:	ldr	r0, [r4, #8]
   25fdc:	str	r5, [r0]
   25fe0:	ldr	r0, [r4, #4]
   25fe4:	mov	r6, #1
   25fe8:	add	r0, r0, #1
   25fec:	str	r0, [r4, #4]
   25ff0:	mov	r0, r6
   25ff4:	pop	{r4, r5, r6, sl, fp, pc}
   25ff8:	mov	r6, #1
   25ffc:	mov	r0, #4
   26000:	str	r6, [r4]
   26004:	str	r6, [r4, #4]
   26008:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2600c:	cmp	r0, #0
   26010:	str	r0, [r4, #8]
   26014:	strne	r5, [r0]
   26018:	movne	r0, r6
   2601c:	popne	{r4, r5, r6, sl, fp, pc}
   26020:	mov	r6, #0
   26024:	mov	r0, r6
   26028:	str	r6, [r4]
   2602c:	str	r6, [r4, #4]
   26030:	pop	{r4, r5, r6, sl, fp, pc}
   26034:	cmp	r2, r1
   26038:	bne	26064 <__assert_fail@plt+0x143b8>
   2603c:	lsl	r0, r2, #1
   26040:	lsl	r1, r2, #3
   26044:	str	r0, [r4]
   26048:	ldr	r0, [r4, #8]
   2604c:	bl	1b388 <__assert_fail@plt+0x96dc>
   26050:	cmp	r0, #0
   26054:	beq	260e0 <__assert_fail@plt+0x14434>
   26058:	str	r0, [r4, #8]
   2605c:	ldr	r1, [r4, #4]
   26060:	b	26068 <__assert_fail@plt+0x143bc>
   26064:	ldr	r0, [r4, #8]
   26068:	ldr	r2, [r0]
   2606c:	cmp	r2, r5
   26070:	ble	260a8 <__assert_fail@plt+0x143fc>
   26074:	cmp	r1, #1
   26078:	blt	260d8 <__assert_fail@plt+0x1442c>
   2607c:	add	r2, r0, r1, lsl #2
   26080:	add	r1, r1, #1
   26084:	mov	r3, r2
   26088:	ldr	r6, [r3, #-4]!
   2608c:	sub	r1, r1, #1
   26090:	cmp	r1, #1
   26094:	str	r6, [r2]
   26098:	mov	r2, r3
   2609c:	bgt	26088 <__assert_fail@plt+0x143dc>
   260a0:	sub	r1, r1, #1
   260a4:	b	260d8 <__assert_fail@plt+0x1442c>
   260a8:	add	r2, r0, r1, lsl #2
   260ac:	ldr	r3, [r2, #-4]
   260b0:	cmp	r3, r5
   260b4:	ble	260d8 <__assert_fail@plt+0x1442c>
   260b8:	sub	r1, r1, #2
   260bc:	str	r3, [r2]
   260c0:	sub	r1, r1, #1
   260c4:	ldr	r3, [r2, #-8]
   260c8:	sub	r2, r2, #4
   260cc:	cmp	r3, r5
   260d0:	bgt	260bc <__assert_fail@plt+0x14410>
   260d4:	add	r1, r1, #2
   260d8:	str	r5, [r0, r1, lsl #2]
   260dc:	b	25fe0 <__assert_fail@plt+0x14334>
   260e0:	mov	r6, #0
   260e4:	mov	r0, r6
   260e8:	pop	{r4, r5, r6, sl, fp, pc}
   260ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260f0:	add	fp, sp, #28
   260f4:	sub	sp, sp, #28
   260f8:	ldr	lr, [r2, #4]
   260fc:	str	r2, [sp, #24]
   26100:	cmp	lr, #0
   26104:	beq	262a0 <__assert_fail@plt+0x145f4>
   26108:	mov	r9, r3
   2610c:	add	r7, lr, r3
   26110:	cmp	lr, #1
   26114:	str	r0, [sp, #4]
   26118:	blt	2618c <__assert_fail@plt+0x144e0>
   2611c:	ldr	r0, [sp, #24]
   26120:	mov	r2, #0
   26124:	cmp	lr, #4
   26128:	ldr	r5, [r0, #8]
   2612c:	bcc	26174 <__assert_fail@plt+0x144c8>
   26130:	mov	r0, #0
   26134:	bic	r2, lr, #3
   26138:	vdup.32	q8, r0
   2613c:	mov	r3, r2
   26140:	mov	r0, r5
   26144:	vmov.32	d16[0], r7
   26148:	vld1.32	{d18-d19}, [r0]!
   2614c:	subs	r3, r3, #4
   26150:	vadd.i32	q8, q9, q8
   26154:	bne	26148 <__assert_fail@plt+0x1449c>
   26158:	vext.8	q9, q8, q8, #8
   2615c:	cmp	lr, r2
   26160:	vadd.i32	q8, q8, q9
   26164:	vdup.32	q9, d16[1]
   26168:	vadd.i32	q8, q8, q9
   2616c:	vmov.32	r7, d16[0]
   26170:	beq	2618c <__assert_fail@plt+0x144e0>
   26174:	add	r3, r5, r2, lsl #2
   26178:	sub	r2, lr, r2
   2617c:	ldr	r0, [r3], #4
   26180:	subs	r2, r2, #1
   26184:	add	r7, r0, r7
   26188:	bne	2617c <__assert_fail@plt+0x144d0>
   2618c:	ldr	r0, [r1, #32]
   26190:	mov	sl, r1
   26194:	ldr	r1, [r1, #68]	; 0x44
   26198:	and	r1, r1, r7
   2619c:	add	r2, r1, r1, lsl #1
   261a0:	ldr	r1, [r0, r2, lsl #2]
   261a4:	cmp	r1, #1
   261a8:	blt	26240 <__assert_fail@plt+0x14594>
   261ac:	add	r0, r0, r2, lsl #2
   261b0:	sub	ip, lr, #1
   261b4:	mov	r3, #0
   261b8:	ldr	r8, [r0, #8]
   261bc:	b	26200 <__assert_fail@plt+0x14554>
   261c0:	ldr	r0, [r5, #4]
   261c4:	cmp	r0, lr
   261c8:	bne	26234 <__assert_fail@plt+0x14588>
   261cc:	mov	r0, ip
   261d0:	add	r6, r0, #1
   261d4:	cmp	r6, #1
   261d8:	blt	264e4 <__assert_fail@plt+0x14838>
   261dc:	ldr	r2, [sp, #24]
   261e0:	ldr	r6, [r2, #8]
   261e4:	ldr	r2, [r5, #8]
   261e8:	ldr	r6, [r6, r0, lsl #2]
   261ec:	ldr	r2, [r2, r0, lsl #2]
   261f0:	sub	r0, r0, #1
   261f4:	cmp	r2, r6
   261f8:	beq	261d0 <__assert_fail@plt+0x14524>
   261fc:	b	26234 <__assert_fail@plt+0x14588>
   26200:	ldr	r4, [r8, r3, lsl #2]
   26204:	ldr	r0, [r4]
   26208:	cmp	r0, r7
   2620c:	bne	26234 <__assert_fail@plt+0x14588>
   26210:	ldrb	r0, [r4, #52]	; 0x34
   26214:	and	r0, r0, #15
   26218:	cmp	r0, r9
   2621c:	bne	26234 <__assert_fail@plt+0x14588>
   26220:	ldr	r0, [sp, #24]
   26224:	cmp	r0, #0
   26228:	ldrne	r5, [r4, #40]	; 0x28
   2622c:	cmpne	r5, #0
   26230:	bne	261c0 <__assert_fail@plt+0x14514>
   26234:	add	r3, r3, #1
   26238:	cmp	r3, r1
   2623c:	blt	26200 <__assert_fail@plt+0x14554>
   26240:	mov	r0, #56	; 0x38
   26244:	mov	r1, #1
   26248:	bl	1af9c <__assert_fail@plt+0x92f0>
   2624c:	cmp	r0, #0
   26250:	beq	26504 <__assert_fail@plt+0x14858>
   26254:	mov	r4, r0
   26258:	ldr	r0, [sp, #24]
   2625c:	add	r6, r4, #4
   26260:	ldr	r8, [r0, #4]
   26264:	cmp	r8, #1
   26268:	str	r8, [r4, #8]
   2626c:	blt	262ac <__assert_fail@plt+0x14600>
   26270:	lsl	r0, r8, #2
   26274:	str	r8, [r4, #4]
   26278:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2627c:	cmp	r0, #0
   26280:	str	r0, [r4, #12]
   26284:	beq	26518 <__assert_fail@plt+0x1486c>
   26288:	ldr	r1, [sp, #24]
   2628c:	ldr	r8, [r1, #4]
   26290:	ldr	r1, [r1, #8]
   26294:	lsl	r2, r8, #2
   26298:	bl	118ec <memcpy@plt>
   2629c:	b	262bc <__assert_fail@plt+0x14610>
   262a0:	mov	r4, #0
   262a4:	str	r4, [r0]
   262a8:	b	264e4 <__assert_fail@plt+0x14838>
   262ac:	mov	r0, #0
   262b0:	str	r0, [r6]
   262b4:	str	r0, [r6, #4]
   262b8:	str	r0, [r6, #8]
   262bc:	str	r6, [r4, #40]	; 0x28
   262c0:	and	r0, r9, #15
   262c4:	cmp	r8, #1
   262c8:	ldrb	r1, [r4, #52]	; 0x34
   262cc:	and	r1, r1, #240	; 0xf0
   262d0:	orr	r0, r1, r0
   262d4:	strb	r0, [r4, #52]	; 0x34
   262d8:	mov	r0, sl
   262dc:	blt	264d0 <__assert_fail@plt+0x14824>
   262e0:	movw	lr, #65280	; 0xff00
   262e4:	and	r1, r9, #4
   262e8:	and	ip, r9, #1
   262ec:	mov	r5, #0
   262f0:	str	r0, [sp, #16]
   262f4:	str	r1, [sp]
   262f8:	and	r1, r9, #2
   262fc:	movt	lr, #3
   26300:	mov	r9, #0
   26304:	str	ip, [sp, #12]
   26308:	str	r1, [sp, #8]
   2630c:	add	r1, lr, #255	; 0xff
   26310:	str	r1, [sp, #20]
   26314:	b	26354 <__assert_fail@plt+0x146a8>
   26318:	sub	r2, r2, #1
   2631c:	cmp	r2, r1
   26320:	str	r2, [r4, #8]
   26324:	ble	264c0 <__assert_fail@plt+0x14814>
   26328:	ldr	r2, [r4, #12]
   2632c:	add	r3, r2, r1, lsl #2
   26330:	ldr	r3, [r3, #4]
   26334:	str	r3, [r2, r1, lsl #2]
   26338:	add	r1, r1, #1
   2633c:	ldr	r3, [r4, #8]
   26340:	cmp	r1, r3
   26344:	blt	2632c <__assert_fail@plt+0x14680>
   26348:	ldr	r1, [sp, #24]
   2634c:	ldr	r8, [r1, #4]
   26350:	b	264c0 <__assert_fail@plt+0x14814>
   26354:	ldr	r1, [sp, #24]
   26358:	ldr	r2, [r0]
   2635c:	ldr	r1, [r1, #8]
   26360:	ldr	r1, [r1, r9, lsl #2]
   26364:	add	r1, r2, r1, lsl #3
   26368:	ldr	sl, [r1, #4]
   2636c:	ldr	r1, [sp, #20]
   26370:	and	r1, sl, r1
   26374:	cmp	r1, #1
   26378:	beq	264c4 <__assert_fail@plt+0x14818>
   2637c:	ldrb	r3, [r4, #52]	; 0x34
   26380:	mov	r2, #32
   26384:	and	r1, sl, lr
   26388:	and	r2, r2, sl, lsr #15
   2638c:	orr	r2, r3, r2
   26390:	uxtb	r3, sl
   26394:	cmp	r3, #2
   26398:	strb	r2, [r4, #52]	; 0x34
   2639c:	beq	263b0 <__assert_fail@plt+0x14704>
   263a0:	cmp	r3, #4
   263a4:	bne	263bc <__assert_fail@plt+0x14710>
   263a8:	mov	r3, #64	; 0x40
   263ac:	b	263b4 <__assert_fail@plt+0x14708>
   263b0:	mov	r3, #16
   263b4:	orr	r2, r2, r3
   263b8:	strb	r2, [r4, #52]	; 0x34
   263bc:	cmp	r1, #0
   263c0:	beq	264c4 <__assert_fail@plt+0x14818>
   263c4:	ldr	r1, [r4, #40]	; 0x28
   263c8:	cmp	r1, r6
   263cc:	beq	263e4 <__assert_fail@plt+0x14738>
   263d0:	cmp	ip, #0
   263d4:	bne	26478 <__assert_fail@plt+0x147cc>
   263d8:	ands	r1, sl, #256	; 0x100
   263dc:	bne	264ac <__assert_fail@plt+0x14800>
   263e0:	b	26478 <__assert_fail@plt+0x147cc>
   263e4:	mov	r0, #12
   263e8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   263ec:	cmp	r0, #0
   263f0:	beq	264fc <__assert_fail@plt+0x14850>
   263f4:	mov	r5, r0
   263f8:	str	r0, [r4, #40]	; 0x28
   263fc:	ldr	r0, [sp, #24]
   26400:	ldr	r8, [r0, #4]
   26404:	cmp	r8, #1
   26408:	str	r8, [r5, #4]
   2640c:	blt	26440 <__assert_fail@plt+0x14794>
   26410:	lsl	r0, r8, #2
   26414:	str	r8, [r5]
   26418:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2641c:	cmp	r0, #0
   26420:	str	r0, [r5, #8]
   26424:	beq	264f0 <__assert_fail@plt+0x14844>
   26428:	ldr	r1, [sp, #24]
   2642c:	ldr	r8, [r1, #4]
   26430:	ldr	r1, [r1, #8]
   26434:	lsl	r2, r8, #2
   26438:	bl	118ec <memcpy@plt>
   2643c:	b	26450 <__assert_fail@plt+0x147a4>
   26440:	mov	r0, #0
   26444:	str	r0, [r5]
   26448:	str	r0, [r5, #4]
   2644c:	str	r0, [r5, #8]
   26450:	ldrb	r0, [r4, #52]	; 0x34
   26454:	ldr	ip, [sp, #12]
   26458:	movw	lr, #65280	; 0xff00
   2645c:	mov	r5, #0
   26460:	movt	lr, #3
   26464:	orr	r0, r0, #128	; 0x80
   26468:	strb	r0, [r4, #52]	; 0x34
   2646c:	ldr	r0, [sp, #16]
   26470:	cmp	ip, #0
   26474:	beq	263d8 <__assert_fail@plt+0x1472c>
   26478:	cmp	ip, #0
   2647c:	andsne	r1, sl, #512	; 0x200
   26480:	bne	264ac <__assert_fail@plt+0x14800>
   26484:	ldr	r1, [sp, #8]
   26488:	cmp	r1, #0
   2648c:	bne	26498 <__assert_fail@plt+0x147ec>
   26490:	ands	r1, sl, #4096	; 0x1000
   26494:	bne	264ac <__assert_fail@plt+0x14800>
   26498:	ldr	r1, [sp]
   2649c:	cmp	r1, #0
   264a0:	bne	264c4 <__assert_fail@plt+0x14818>
   264a4:	ands	r1, sl, #16384	; 0x4000
   264a8:	beq	264c4 <__assert_fail@plt+0x14818>
   264ac:	sub	r1, r9, r5
   264b0:	cmp	r1, #0
   264b4:	ldrge	r2, [r4, #8]
   264b8:	cmpge	r2, r1
   264bc:	bgt	26318 <__assert_fail@plt+0x1466c>
   264c0:	add	r5, r5, #1
   264c4:	add	r9, r9, #1
   264c8:	cmp	r9, r8
   264cc:	blt	26354 <__assert_fail@plt+0x146a8>
   264d0:	mov	r1, r4
   264d4:	mov	r2, r7
   264d8:	bl	26530 <__assert_fail@plt+0x14884>
   264dc:	cmp	r0, #0
   264e0:	bne	264fc <__assert_fail@plt+0x14850>
   264e4:	mov	r0, r4
   264e8:	sub	sp, fp, #28
   264ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264f0:	mov	r0, #0
   264f4:	str	r0, [r5]
   264f8:	str	r0, [r5, #4]
   264fc:	mov	r0, r4
   26500:	bl	2054c <__assert_fail@plt+0xe8a0>
   26504:	ldr	r1, [sp, #4]
   26508:	mov	r0, #12
   2650c:	mov	r4, #0
   26510:	str	r0, [r1]
   26514:	b	264e4 <__assert_fail@plt+0x14838>
   26518:	mov	r0, #0
   2651c:	str	r0, [r4, #4]
   26520:	str	r0, [r4, #8]
   26524:	mov	r0, r4
   26528:	bl	1b22c <__assert_fail@plt+0x9580>
   2652c:	b	26504 <__assert_fail@plt+0x14858>
   26530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26534:	add	fp, sp, #28
   26538:	sub	sp, sp, #4
   2653c:	str	r2, [r1]
   26540:	mov	r4, r1
   26544:	mov	r7, r0
   26548:	mov	r0, #0
   2654c:	mov	r9, r2
   26550:	ldr	r1, [r1, #8]
   26554:	str	r1, [r4, #16]
   26558:	str	r0, [r4, #20]
   2655c:	lsl	r0, r1, #2
   26560:	bl	1b2f8 <__assert_fail@plt+0x964c>
   26564:	mov	r8, #12
   26568:	cmp	r0, #0
   2656c:	str	r0, [r4, #24]
   26570:	beq	26630 <__assert_fail@plt+0x14984>
   26574:	ldr	r1, [r4, #8]
   26578:	cmp	r1, #1
   2657c:	blt	265f0 <__assert_fail@plt+0x14944>
   26580:	mov	r5, #0
   26584:	mov	sl, #2
   26588:	ldr	r2, [r4, #12]
   2658c:	ldr	r6, [r2, r5, lsl #2]
   26590:	ldr	r2, [r7]
   26594:	add	r2, r2, r6, lsl #3
   26598:	ldrb	r2, [r2, #4]
   2659c:	tst	r2, #8
   265a0:	bne	265e4 <__assert_fail@plt+0x14938>
   265a4:	ldr	r2, [r4, #16]
   265a8:	ldr	r1, [r4, #20]
   265ac:	cmp	r2, r1
   265b0:	bne	265d4 <__assert_fail@plt+0x14928>
   265b4:	add	r1, sl, r2, lsl #1
   265b8:	str	r1, [r4, #16]
   265bc:	lsl	r1, r1, #2
   265c0:	bl	1b388 <__assert_fail@plt+0x96dc>
   265c4:	cmp	r0, #0
   265c8:	beq	26630 <__assert_fail@plt+0x14984>
   265cc:	str	r0, [r4, #24]
   265d0:	ldr	r1, [r4, #20]
   265d4:	add	r2, r1, #1
   265d8:	str	r2, [r4, #20]
   265dc:	str	r6, [r0, r1, lsl #2]
   265e0:	ldr	r1, [r4, #8]
   265e4:	add	r5, r5, #1
   265e8:	cmp	r5, r1
   265ec:	blt	26588 <__assert_fail@plt+0x148dc>
   265f0:	ldr	r1, [r7, #68]	; 0x44
   265f4:	ldr	r0, [r7, #32]
   265f8:	and	r1, r1, r9
   265fc:	mov	r5, r0
   26600:	add	r2, r1, r1, lsl #1
   26604:	ldr	r1, [r5, r2, lsl #2]!
   26608:	mov	r6, r5
   2660c:	ldr	r3, [r6, #4]!
   26610:	cmp	r3, r1
   26614:	ble	2663c <__assert_fail@plt+0x14990>
   26618:	add	r0, r0, r2, lsl #2
   2661c:	ldr	r0, [r0, #8]
   26620:	add	r2, r1, #1
   26624:	mov	r8, #0
   26628:	str	r2, [r5]
   2662c:	str	r4, [r0, r1, lsl #2]
   26630:	mov	r0, r8
   26634:	sub	sp, fp, #28
   26638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2663c:	add	r7, r0, r2, lsl #2
   26640:	mov	r2, #2
   26644:	ldr	r0, [r7, #8]!
   26648:	add	r9, r2, r1, lsl #1
   2664c:	lsl	r1, r9, #2
   26650:	bl	1b388 <__assert_fail@plt+0x96dc>
   26654:	cmp	r0, #0
   26658:	beq	26630 <__assert_fail@plt+0x14984>
   2665c:	str	r0, [r7]
   26660:	str	r9, [r6]
   26664:	ldr	r1, [r5]
   26668:	b	26620 <__assert_fail@plt+0x14974>
   2666c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26670:	add	fp, sp, #28
   26674:	sub	sp, sp, #36	; 0x24
   26678:	mov	r4, r0
   2667c:	ldr	r0, [r0, #24]
   26680:	mov	r6, r2
   26684:	mov	r9, r1
   26688:	cmp	r0, r1
   2668c:	ble	2688c <__assert_fail@plt+0x14be0>
   26690:	ldr	r0, [r4, #80]	; 0x50
   26694:	mov	r1, #4
   26698:	mov	r5, r9
   2669c:	cmp	r0, #2
   266a0:	movge	r0, #0
   266a4:	strge	r0, [r4, #16]
   266a8:	strge	r0, [r4, #20]
   266ac:	mov	r0, #0
   266b0:	tst	r6, #1
   266b4:	str	r0, [r4, #24]
   266b8:	str	r0, [r4, #28]
   266bc:	str	r0, [r4, #32]
   266c0:	strb	r0, [r4, #76]	; 0x4c
   266c4:	movweq	r1, #6
   266c8:	ldr	r2, [r4, #44]	; 0x2c
   266cc:	ldr	r3, [r4, #52]	; 0x34
   266d0:	str	r2, [r4, #48]	; 0x30
   266d4:	str	r3, [r4, #56]	; 0x38
   266d8:	str	r1, [r4, #60]	; 0x3c
   266dc:	ldrb	r1, [r4, #75]	; 0x4b
   266e0:	cmp	r1, #0
   266e4:	ldreq	r1, [r4]
   266e8:	streq	r1, [r4, #4]
   266ec:	cmp	r5, #0
   266f0:	beq	26814 <__assert_fail@plt+0x14b68>
   266f4:	ldr	r1, [r4, #32]
   266f8:	cmp	r5, r1
   266fc:	bge	2689c <__assert_fail@plt+0x14bf0>
   26700:	ldrb	r0, [r4, #76]	; 0x4c
   26704:	cmp	r0, #0
   26708:	bne	2699c <__assert_fail@plt+0x14cf0>
   2670c:	cmp	r5, #0
   26710:	ble	26754 <__assert_fail@plt+0x14aa8>
   26714:	ldr	r1, [r4, #48]	; 0x30
   26718:	sub	r0, r5, #1
   2671c:	cmp	r1, r0
   26720:	beq	26a54 <__assert_fail@plt+0x14da8>
   26724:	ldr	r1, [r4, #80]	; 0x50
   26728:	cmp	r1, #2
   2672c:	blt	2675c <__assert_fail@plt+0x14ab0>
   26730:	ldr	r0, [r4, #8]
   26734:	mov	r1, r5
   26738:	sub	r0, r0, #4
   2673c:	ldr	r6, [r0, r1, lsl #2]
   26740:	cmn	r6, #1
   26744:	bne	26790 <__assert_fail@plt+0x14ae4>
   26748:	sub	r1, r1, #1
   2674c:	cmp	r1, #0
   26750:	bgt	2673c <__assert_fail@plt+0x14a90>
   26754:	ldr	r1, [r4, #60]	; 0x3c
   26758:	b	267b4 <__assert_fail@plt+0x14b08>
   2675c:	ldr	r1, [r4, #4]
   26760:	ldr	r2, [r4, #68]	; 0x44
   26764:	ldrb	r0, [r1, r0]
   26768:	ubfx	r1, r0, #5, #3
   2676c:	and	r3, r0, #31
   26770:	ldr	r2, [r2, r1, lsl #2]
   26774:	mov	r1, #1
   26778:	tst	r2, r1, lsl r3
   2677c:	bne	267b4 <__assert_fail@plt+0x14b08>
   26780:	mov	r1, #0
   26784:	cmp	r0, #10
   26788:	beq	267a8 <__assert_fail@plt+0x14afc>
   2678c:	b	267b4 <__assert_fail@plt+0x14b08>
   26790:	ldrb	r0, [r4, #78]	; 0x4e
   26794:	cmp	r0, #0
   26798:	bne	26d10 <__assert_fail@plt+0x15064>
   2679c:	mov	r1, #0
   267a0:	cmp	r6, #10
   267a4:	bne	267b4 <__assert_fail@plt+0x14b08>
   267a8:	ldrb	r1, [r4, #77]	; 0x4d
   267ac:	cmp	r1, #0
   267b0:	movwne	r1, #2
   267b4:	str	r1, [r4, #60]	; 0x3c
   267b8:	ldr	r0, [r4, #80]	; 0x50
   267bc:	cmp	r0, #2
   267c0:	blt	267dc <__assert_fail@plt+0x14b30>
   267c4:	ldr	r2, [r4, #28]
   267c8:	ldr	r0, [r4, #8]
   267cc:	sub	r2, r2, r5
   267d0:	add	r1, r0, r5, lsl #2
   267d4:	lsl	r2, r2, #2
   267d8:	bl	118a4 <memmove@plt>
   267dc:	ldrb	r0, [r4, #75]	; 0x4b
   267e0:	cmp	r0, #0
   267e4:	bne	26a3c <__assert_fail@plt+0x14d90>
   267e8:	ldr	r0, [r4, #28]
   267ec:	ldr	r1, [r4, #32]
   267f0:	sub	r0, r0, r5
   267f4:	sub	r1, r1, r5
   267f8:	str	r0, [r4, #28]
   267fc:	str	r1, [r4, #32]
   26800:	ldrb	r0, [r4, #75]	; 0x4b
   26804:	cmp	r0, #0
   26808:	ldreq	r0, [r4, #4]
   2680c:	addeq	r0, r0, r5
   26810:	streq	r0, [r4, #4]
   26814:	str	r9, [r4, #24]
   26818:	ldr	r0, [r4, #48]	; 0x30
   2681c:	ldr	r3, [r4, #80]	; 0x50
   26820:	ldr	r2, [r4, #56]	; 0x38
   26824:	sub	r1, r0, r5
   26828:	cmp	r3, #2
   2682c:	sub	r0, r2, r5
   26830:	str	r1, [r4, #48]	; 0x30
   26834:	str	r0, [r4, #56]	; 0x38
   26838:	blt	26860 <__assert_fail@plt+0x14bb4>
   2683c:	ldrb	r0, [r4, #72]	; 0x48
   26840:	cmp	r0, #0
   26844:	beq	26874 <__assert_fail@plt+0x14bc8>
   26848:	mov	r0, r4
   2684c:	bl	205b0 <__assert_fail@plt+0xe904>
   26850:	cmp	r0, #0
   26854:	beq	2687c <__assert_fail@plt+0x14bd0>
   26858:	sub	sp, fp, #28
   2685c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26860:	ldrb	r0, [r4, #75]	; 0x4b
   26864:	cmp	r0, #0
   26868:	bne	26a60 <__assert_fail@plt+0x14db4>
   2686c:	str	r1, [r4, #28]
   26870:	b	2687c <__assert_fail@plt+0x14bd0>
   26874:	mov	r0, r4
   26878:	bl	20c70 <__assert_fail@plt+0xefc4>
   2687c:	mov	r0, #0
   26880:	str	r0, [r4, #40]	; 0x28
   26884:	sub	sp, fp, #28
   26888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2688c:	sub	r5, r9, r0
   26890:	cmp	r5, #0
   26894:	bne	266f4 <__assert_fail@plt+0x14a48>
   26898:	b	26814 <__assert_fail@plt+0x14b68>
   2689c:	ldrb	r2, [r4, #76]	; 0x4c
   268a0:	ldr	lr, [r4, #28]
   268a4:	cmp	r2, #0
   268a8:	bne	26f30 <__assert_fail@plt+0x15284>
   268ac:	mov	r2, #0
   268b0:	str	r2, [r4, #28]
   268b4:	ldr	r3, [r4, #80]	; 0x50
   268b8:	cmp	r3, #2
   268bc:	blt	26ae4 <__assert_fail@plt+0x14e38>
   268c0:	ldrb	r2, [r4, #73]	; 0x49
   268c4:	cmp	r2, #0
   268c8:	beq	26984 <__assert_fail@plt+0x14cd8>
   268cc:	ldr	r7, [r4]
   268d0:	sub	r3, r5, r3
   268d4:	add	ip, r7, r0
   268d8:	add	r3, ip, r3
   268dc:	add	r8, ip, r5
   268e0:	cmp	r3, r7
   268e4:	movcc	r3, r7
   268e8:	mov	r7, r8
   268ec:	sub	r7, r7, #1
   268f0:	cmp	r7, r3
   268f4:	bcc	26984 <__assert_fail@plt+0x14cd8>
   268f8:	ldrb	r2, [r7]
   268fc:	and	r2, r2, #192	; 0xc0
   26900:	cmp	r2, #128	; 0x80
   26904:	beq	268ec <__assert_fail@plt+0x14c40>
   26908:	ldr	r0, [r4, #48]	; 0x30
   2690c:	mov	sl, lr
   26910:	mov	r1, r7
   26914:	add	r3, ip, r0
   26918:	ldr	r0, [r4, #64]	; 0x40
   2691c:	sub	r2, r3, r7
   26920:	cmp	r0, #0
   26924:	bne	27008 <__assert_fail@plt+0x1535c>
   26928:	mov	r0, #0
   2692c:	add	r3, sp, #24
   26930:	str	r0, [sp, #28]
   26934:	str	r0, [sp, #24]
   26938:	add	r0, sp, #20
   2693c:	bl	1b328 <__assert_fail@plt+0x967c>
   26940:	sub	r1, r8, r7
   26944:	mvn	r7, #0
   26948:	cmp	r0, r1
   2694c:	bcc	26970 <__assert_fail@plt+0x14cc4>
   26950:	cmn	r0, #3
   26954:	bhi	26970 <__assert_fail@plt+0x14cc4>
   26958:	mov	r2, #0
   2695c:	sub	r0, r0, r1
   26960:	str	r2, [r4, #16]
   26964:	str	r2, [r4, #20]
   26968:	str	r0, [r4, #28]
   2696c:	ldr	r7, [sp, #20]
   26970:	cmn	r7, #1
   26974:	bne	26e54 <__assert_fail@plt+0x151a8>
   26978:	ldr	r0, [r4, #24]
   2697c:	ldr	r1, [r4, #32]
   26980:	mov	lr, sl
   26984:	add	r8, r1, r0
   26988:	cmp	r8, r9
   2698c:	bge	26d30 <__assert_fail@plt+0x15084>
   26990:	add	sl, r4, #16
   26994:	str	lr, [sp]
   26998:	b	26df4 <__assert_fail@plt+0x15148>
   2699c:	ldr	ip, [r4, #12]
   269a0:	ldr	r0, [r4, #28]
   269a4:	mov	r1, #0
   269a8:	add	r2, r1, r0
   269ac:	add	r2, r2, r2, lsr #31
   269b0:	asr	r7, r2, #1
   269b4:	ldr	r3, [ip, r7, lsl #2]
   269b8:	mov	r2, r7
   269bc:	cmp	r3, r5
   269c0:	bgt	269d0 <__assert_fail@plt+0x14d24>
   269c4:	bge	269dc <__assert_fail@plt+0x14d30>
   269c8:	add	r1, r7, #1
   269cc:	mov	r2, r0
   269d0:	cmp	r1, r2
   269d4:	mov	r0, r2
   269d8:	blt	269a8 <__assert_fail@plt+0x14cfc>
   269dc:	mov	r8, #0
   269e0:	cmp	r3, r5
   269e4:	movwlt	r8, #1
   269e8:	add	sl, r7, r8
   269ec:	cmp	sl, #0
   269f0:	ble	26a34 <__assert_fail@plt+0x14d88>
   269f4:	ldr	r1, [r4, #48]	; 0x30
   269f8:	sub	r0, sl, #1
   269fc:	cmp	r1, r0
   26a00:	beq	26f58 <__assert_fail@plt+0x152ac>
   26a04:	ldr	r1, [r4, #80]	; 0x50
   26a08:	cmp	r1, #2
   26a0c:	blt	26b40 <__assert_fail@plt+0x14e94>
   26a10:	ldr	r0, [r4, #8]
   26a14:	mov	r1, sl
   26a18:	sub	r0, r0, #4
   26a1c:	ldr	r6, [r0, r1, lsl #2]
   26a20:	cmn	r6, #1
   26a24:	bne	26b74 <__assert_fail@plt+0x14ec8>
   26a28:	sub	r1, r1, #1
   26a2c:	cmp	r1, #0
   26a30:	bgt	26a1c <__assert_fail@plt+0x14d70>
   26a34:	ldr	r1, [r4, #60]	; 0x3c
   26a38:	b	26b98 <__assert_fail@plt+0x14eec>
   26a3c:	ldr	r2, [r4, #28]
   26a40:	ldr	r0, [r4, #4]
   26a44:	add	r1, r0, r5
   26a48:	sub	r2, r2, r5
   26a4c:	bl	118a4 <memmove@plt>
   26a50:	b	267e8 <__assert_fail@plt+0x14b3c>
   26a54:	and	r0, r6, #2
   26a58:	eor	r1, r0, #10
   26a5c:	b	267b4 <__assert_fail@plt+0x14b08>
   26a60:	ldrb	r0, [r4, #72]	; 0x48
   26a64:	cmp	r0, #0
   26a68:	beq	26d3c <__assert_fail@plt+0x15090>
   26a6c:	ldr	r6, [r4, #36]	; 0x24
   26a70:	ldr	r5, [r4, #28]
   26a74:	cmp	r6, r1
   26a78:	movgt	r6, r1
   26a7c:	cmp	r5, r6
   26a80:	blt	26a8c <__assert_fail@plt+0x14de0>
   26a84:	b	26ad8 <__assert_fail@plt+0x14e2c>
   26a88:	ldr	r9, [r4, #24]
   26a8c:	ldr	r1, [r4]
   26a90:	ldr	r0, [r4, #64]	; 0x40
   26a94:	add	r1, r1, r9
   26a98:	cmp	r0, #0
   26a9c:	ldrb	r7, [r1, r5]
   26aa0:	ldrbne	r7, [r0, r7]
   26aa4:	add	r0, r7, #128	; 0x80
   26aa8:	lsr	r0, r0, #7
   26aac:	cmp	r0, #2
   26ab0:	bhi	26ac0 <__assert_fail@plt+0x14e14>
   26ab4:	bl	11a6c <__ctype_toupper_loc@plt>
   26ab8:	ldr	r0, [r0]
   26abc:	ldr	r7, [r0, r7, lsl #2]
   26ac0:	ldr	r0, [r4, #4]
   26ac4:	strb	r7, [r0, r5]
   26ac8:	add	r5, r5, #1
   26acc:	cmp	r5, r6
   26ad0:	blt	26a88 <__assert_fail@plt+0x14ddc>
   26ad4:	mov	r5, r6
   26ad8:	str	r5, [r4, #28]
   26adc:	str	r5, [r4, #32]
   26ae0:	b	2687c <__assert_fail@plt+0x14bd0>
   26ae4:	ldr	r3, [r4]
   26ae8:	add	r0, r5, r0
   26aec:	ldr	r1, [r4, #64]	; 0x40
   26af0:	add	r0, r3, r0
   26af4:	cmp	r1, #0
   26af8:	ldrb	r0, [r0, #-1]
   26afc:	str	r2, [r4, #32]
   26b00:	ldrbne	r0, [r1, r0]
   26b04:	ldr	r1, [r4, #68]	; 0x44
   26b08:	ubfx	r2, r0, #5, #3
   26b0c:	and	r3, r0, #31
   26b10:	ldr	r2, [r1, r2, lsl #2]
   26b14:	mov	r1, #1
   26b18:	tst	r2, r1, lsl r3
   26b1c:	bne	26b38 <__assert_fail@plt+0x14e8c>
   26b20:	mov	r1, #0
   26b24:	cmp	r0, #10
   26b28:	bne	26b38 <__assert_fail@plt+0x14e8c>
   26b2c:	ldrb	r1, [r4, #77]	; 0x4d
   26b30:	cmp	r1, #0
   26b34:	movwne	r1, #2
   26b38:	str	r1, [r4, #60]	; 0x3c
   26b3c:	b	26800 <__assert_fail@plt+0x14b54>
   26b40:	ldr	r1, [r4, #4]
   26b44:	ldr	r2, [r4, #68]	; 0x44
   26b48:	ldrb	r0, [r1, r0]
   26b4c:	ubfx	r1, r0, #5, #3
   26b50:	and	r3, r0, #31
   26b54:	ldr	r2, [r2, r1, lsl #2]
   26b58:	mov	r1, #1
   26b5c:	tst	r2, r1, lsl r3
   26b60:	bne	26b98 <__assert_fail@plt+0x14eec>
   26b64:	mov	r1, #0
   26b68:	cmp	r0, #10
   26b6c:	beq	26b8c <__assert_fail@plt+0x14ee0>
   26b70:	b	26b98 <__assert_fail@plt+0x14eec>
   26b74:	ldrb	r0, [r4, #78]	; 0x4e
   26b78:	cmp	r0, #0
   26b7c:	bne	26fb8 <__assert_fail@plt+0x1530c>
   26b80:	mov	r1, #0
   26b84:	cmp	r6, #10
   26b88:	bne	26b98 <__assert_fail@plt+0x14eec>
   26b8c:	ldrb	r1, [r4, #77]	; 0x4d
   26b90:	cmp	r1, #0
   26b94:	movwne	r1, #2
   26b98:	str	r1, [r4, #60]	; 0x3c
   26b9c:	cmp	sl, r5
   26ba0:	ldr	r2, [r4, #28]
   26ba4:	bne	26c34 <__assert_fail@plt+0x14f88>
   26ba8:	cmp	r2, r5
   26bac:	ble	26c34 <__assert_fail@plt+0x14f88>
   26bb0:	ldr	r0, [r4, #12]
   26bb4:	ldr	r0, [r0, r5, lsl #2]
   26bb8:	cmp	r0, r5
   26bbc:	bne	26c34 <__assert_fail@plt+0x14f88>
   26bc0:	ldr	r0, [r4, #8]
   26bc4:	sub	r2, r2, r5
   26bc8:	lsl	r2, r2, #2
   26bcc:	add	r1, r0, r5, lsl #2
   26bd0:	bl	118a4 <memmove@plt>
   26bd4:	ldr	r2, [r4, #28]
   26bd8:	ldr	r0, [r4, #4]
   26bdc:	add	r1, r0, r5
   26be0:	sub	r2, r2, r5
   26be4:	bl	118a4 <memmove@plt>
   26be8:	ldr	r0, [r4, #28]
   26bec:	ldr	r1, [r4, #32]
   26bf0:	sub	r0, r0, r5
   26bf4:	sub	r1, r1, r5
   26bf8:	cmp	r0, #1
   26bfc:	str	r0, [r4, #28]
   26c00:	str	r1, [r4, #32]
   26c04:	blt	26800 <__assert_fail@plt+0x14b54>
   26c08:	ldr	r0, [r4, #12]
   26c0c:	mov	r2, #0
   26c10:	add	r1, r0, r5, lsl #2
   26c14:	ldr	r3, [r1, r2, lsl #2]
   26c18:	sub	r3, r3, r5
   26c1c:	str	r3, [r0, r2, lsl #2]
   26c20:	add	r2, r2, #1
   26c24:	ldr	r3, [r4, #28]
   26c28:	cmp	r2, r3
   26c2c:	blt	26c14 <__assert_fail@plt+0x14f68>
   26c30:	b	26800 <__assert_fail@plt+0x14b54>
   26c34:	mov	r0, #0
   26c38:	strb	r0, [r4, #76]	; 0x4c
   26c3c:	sub	r0, r5, r9
   26c40:	ldr	r1, [r4, #44]	; 0x2c
   26c44:	ldr	r3, [r4, #52]	; 0x34
   26c48:	add	r1, r0, r1
   26c4c:	add	r0, r0, r3
   26c50:	str	r1, [r4, #48]	; 0x30
   26c54:	str	r0, [r4, #56]	; 0x38
   26c58:	add	r0, r7, r8
   26c5c:	sub	r1, r0, #1
   26c60:	add	r0, r1, #1
   26c64:	cmp	r0, #1
   26c68:	blt	26c80 <__assert_fail@plt+0x14fd4>
   26c6c:	ldr	r3, [r4, #12]
   26c70:	ldr	r3, [r3, r1, lsl #2]
   26c74:	sub	r1, r1, #1
   26c78:	cmp	r3, r5
   26c7c:	beq	26c60 <__assert_fail@plt+0x14fb4>
   26c80:	cmp	r0, r2
   26c84:	bge	26ca4 <__assert_fail@plt+0x14ff8>
   26c88:	ldr	r1, [r4, #8]
   26c8c:	ldr	r3, [r1, r0, lsl #2]
   26c90:	cmn	r3, #1
   26c94:	bne	26ca4 <__assert_fail@plt+0x14ff8>
   26c98:	add	r0, r0, #1
   26c9c:	cmp	r0, r2
   26ca0:	blt	26c8c <__assert_fail@plt+0x14fe0>
   26ca4:	cmp	r0, r2
   26ca8:	bne	26cbc <__assert_fail@plt+0x15010>
   26cac:	mov	r0, #0
   26cb0:	str	r0, [r4, #28]
   26cb4:	str	r0, [r4, #32]
   26cb8:	b	26800 <__assert_fail@plt+0x14b54>
   26cbc:	ldr	r1, [r4, #12]
   26cc0:	ldr	r0, [r1, r0, lsl #2]
   26cc4:	subs	r2, r0, r5
   26cc8:	str	r2, [r4, #28]
   26ccc:	beq	26dbc <__assert_fail@plt+0x15110>
   26cd0:	cmp	r2, #1
   26cd4:	blt	26cf8 <__assert_fail@plt+0x1504c>
   26cd8:	ldr	r0, [r4, #8]
   26cdc:	mov	r1, #0
   26ce0:	mvn	r3, #0
   26ce4:	str	r3, [r0, r1, lsl #2]
   26ce8:	add	r1, r1, #1
   26cec:	ldr	r2, [r4, #28]
   26cf0:	cmp	r1, r2
   26cf4:	blt	26ce4 <__assert_fail@plt+0x15038>
   26cf8:	ldr	r0, [r4, #4]
   26cfc:	mov	r1, #255	; 0xff
   26d00:	bl	11b2c <memset@plt>
   26d04:	ldr	r0, [r4, #28]
   26d08:	str	r0, [r4, #32]
   26d0c:	b	26800 <__assert_fail@plt+0x14b54>
   26d10:	mov	r0, r6
   26d14:	bl	11afc <iswalnum@plt>
   26d18:	mov	r1, #1
   26d1c:	cmp	r6, #95	; 0x5f
   26d20:	beq	267b4 <__assert_fail@plt+0x14b08>
   26d24:	cmp	r0, #0
   26d28:	beq	2679c <__assert_fail@plt+0x14af0>
   26d2c:	b	267b4 <__assert_fail@plt+0x14b08>
   26d30:	sub	r0, r8, r9
   26d34:	str	r0, [r4, #28]
   26d38:	b	26e70 <__assert_fail@plt+0x151c4>
   26d3c:	ldr	r3, [r4, #64]	; 0x40
   26d40:	cmp	r3, #0
   26d44:	beq	2687c <__assert_fail@plt+0x14bd0>
   26d48:	ldr	r0, [r4, #36]	; 0x24
   26d4c:	ldr	r2, [r4, #28]
   26d50:	cmp	r0, r1
   26d54:	movgt	r0, r1
   26d58:	cmp	r2, r0
   26d5c:	bge	26db0 <__assert_fail@plt+0x15104>
   26d60:	ldr	r7, [r4]
   26d64:	add	r1, r2, r9
   26d68:	ldr	r6, [r4, #4]
   26d6c:	ldrb	r1, [r7, r1]
   26d70:	ldrb	r1, [r3, r1]
   26d74:	strb	r1, [r6, r2]
   26d78:	add	r1, r2, #1
   26d7c:	cmp	r1, r0
   26d80:	bge	26dac <__assert_fail@plt+0x15100>
   26d84:	ldm	r4, {r2, r3}
   26d88:	ldr	r7, [r4, #24]
   26d8c:	ldr	r6, [r4, #64]	; 0x40
   26d90:	add	r2, r2, r7
   26d94:	ldrb	r2, [r2, r1]
   26d98:	ldrb	r2, [r6, r2]
   26d9c:	strb	r2, [r3, r1]
   26da0:	add	r1, r1, #1
   26da4:	cmp	r1, r0
   26da8:	blt	26d84 <__assert_fail@plt+0x150d8>
   26dac:	mov	r2, r0
   26db0:	str	r2, [r4, #28]
   26db4:	str	r2, [r4, #32]
   26db8:	b	2687c <__assert_fail@plt+0x14bd0>
   26dbc:	mov	r0, #0
   26dc0:	str	r0, [r4, #32]
   26dc4:	b	26800 <__assert_fail@plt+0x14b54>
   26dc8:	cmp	r7, #0
   26dcc:	mov	r1, #0
   26dd0:	ldr	r3, [sp, #4]
   26dd4:	ldr	r2, [sp, #8]
   26dd8:	cmpne	r0, #0
   26ddc:	ldrne	r0, [r4]
   26de0:	ldrbne	r1, [r0, r8]
   26de4:	stm	sl, {r2, r3}
   26de8:	mov	r0, #1
   26dec:	mov	r7, r1
   26df0:	b	26e34 <__assert_fail@plt+0x15188>
   26df4:	ldr	r0, [r4]
   26df8:	ldr	r2, [r4, #44]	; 0x2c
   26dfc:	mov	r3, sl
   26e00:	add	r1, r0, r8
   26e04:	ldr	r0, [sl]
   26e08:	sub	r7, r2, r8
   26e0c:	mov	r2, r7
   26e10:	str	r0, [sp, #8]
   26e14:	ldr	r0, [sl, #4]
   26e18:	str	r0, [sp, #4]
   26e1c:	add	r0, sp, #24
   26e20:	bl	1b328 <__assert_fail@plt+0x967c>
   26e24:	sub	r1, r0, #1
   26e28:	cmn	r1, #3
   26e2c:	bcs	26dc8 <__assert_fail@plt+0x1511c>
   26e30:	ldr	r7, [sp, #24]
   26e34:	add	r8, r0, r8
   26e38:	cmp	r8, r9
   26e3c:	blt	26df4 <__assert_fail@plt+0x15148>
   26e40:	ldr	lr, [sp]
   26e44:	sub	r0, r8, r9
   26e48:	cmn	r7, #1
   26e4c:	str	r0, [r4, #28]
   26e50:	beq	26e70 <__assert_fail@plt+0x151c4>
   26e54:	ldrb	r0, [r4, #78]	; 0x4e
   26e58:	cmp	r0, #0
   26e5c:	bne	26fd8 <__assert_fail@plt+0x1532c>
   26e60:	mov	r1, #0
   26e64:	cmp	r7, #10
   26e68:	beq	26f08 <__assert_fail@plt+0x1525c>
   26e6c:	b	26f14 <__assert_fail@plt+0x15268>
   26e70:	cmp	lr, #0
   26e74:	ble	26eb4 <__assert_fail@plt+0x15208>
   26e78:	ldr	r1, [r4, #48]	; 0x30
   26e7c:	sub	r0, lr, #1
   26e80:	cmp	r1, r0
   26e84:	beq	26fac <__assert_fail@plt+0x15300>
   26e88:	ldr	r1, [r4, #80]	; 0x50
   26e8c:	cmp	r1, #2
   26e90:	blt	26ebc <__assert_fail@plt+0x15210>
   26e94:	ldr	r0, [r4, #8]
   26e98:	sub	r0, r0, #4
   26e9c:	ldr	r6, [r0, lr, lsl #2]
   26ea0:	cmn	r6, #1
   26ea4:	bne	26ef0 <__assert_fail@plt+0x15244>
   26ea8:	sub	lr, lr, #1
   26eac:	cmp	lr, #0
   26eb0:	bgt	26e9c <__assert_fail@plt+0x151f0>
   26eb4:	ldr	r1, [r4, #60]	; 0x3c
   26eb8:	b	26f14 <__assert_fail@plt+0x15268>
   26ebc:	ldr	r1, [r4, #4]
   26ec0:	ldr	r2, [r4, #68]	; 0x44
   26ec4:	ldrb	r0, [r1, r0]
   26ec8:	ubfx	r1, r0, #5, #3
   26ecc:	and	r3, r0, #31
   26ed0:	ldr	r2, [r2, r1, lsl #2]
   26ed4:	mov	r1, #1
   26ed8:	tst	r2, r1, lsl r3
   26edc:	bne	26f14 <__assert_fail@plt+0x15268>
   26ee0:	mov	r1, #0
   26ee4:	cmp	r0, #10
   26ee8:	beq	26f08 <__assert_fail@plt+0x1525c>
   26eec:	b	26f14 <__assert_fail@plt+0x15268>
   26ef0:	ldrb	r0, [r4, #78]	; 0x4e
   26ef4:	cmp	r0, #0
   26ef8:	bne	27050 <__assert_fail@plt+0x153a4>
   26efc:	mov	r1, #0
   26f00:	cmp	r6, #10
   26f04:	bne	26f14 <__assert_fail@plt+0x15268>
   26f08:	ldrb	r1, [r4, #77]	; 0x4d
   26f0c:	cmp	r1, #0
   26f10:	movwne	r1, #2
   26f14:	str	r1, [r4, #60]	; 0x3c
   26f18:	mov	r0, #0
   26f1c:	ldr	r2, [r4, #28]
   26f20:	cmp	r2, #0
   26f24:	bne	26f64 <__assert_fail@plt+0x152b8>
   26f28:	str	r0, [r4, #32]
   26f2c:	b	26800 <__assert_fail@plt+0x14b54>
   26f30:	mov	r2, #0
   26f34:	strb	r2, [r4, #76]	; 0x4c
   26f38:	sub	r2, r5, r9
   26f3c:	ldr	r3, [r4, #44]	; 0x2c
   26f40:	ldr	r7, [r4, #52]	; 0x34
   26f44:	add	r3, r2, r3
   26f48:	add	r2, r2, r7
   26f4c:	str	r3, [r4, #48]	; 0x30
   26f50:	str	r2, [r4, #56]	; 0x38
   26f54:	b	268ac <__assert_fail@plt+0x14c00>
   26f58:	and	r0, r6, #2
   26f5c:	eor	r1, r0, #10
   26f60:	b	26b98 <__assert_fail@plt+0x14eec>
   26f64:	cmp	r2, #1
   26f68:	blt	26f8c <__assert_fail@plt+0x152e0>
   26f6c:	ldr	r0, [r4, #8]
   26f70:	mov	r1, #0
   26f74:	mvn	r3, #0
   26f78:	str	r3, [r0, r1, lsl #2]
   26f7c:	add	r1, r1, #1
   26f80:	ldr	r2, [r4, #28]
   26f84:	cmp	r1, r2
   26f88:	blt	26f78 <__assert_fail@plt+0x152cc>
   26f8c:	ldrb	r0, [r4, #75]	; 0x4b
   26f90:	cmp	r0, #0
   26f94:	beq	26ffc <__assert_fail@plt+0x15350>
   26f98:	ldr	r0, [r4, #4]
   26f9c:	mov	r1, #255	; 0xff
   26fa0:	bl	11b2c <memset@plt>
   26fa4:	ldr	r0, [r4, #28]
   26fa8:	b	26f28 <__assert_fail@plt+0x1527c>
   26fac:	and	r0, r6, #2
   26fb0:	eor	r1, r0, #10
   26fb4:	b	26f14 <__assert_fail@plt+0x15268>
   26fb8:	mov	r0, r6
   26fbc:	bl	11afc <iswalnum@plt>
   26fc0:	mov	r1, #1
   26fc4:	cmp	r6, #95	; 0x5f
   26fc8:	beq	26b98 <__assert_fail@plt+0x14eec>
   26fcc:	cmp	r0, #0
   26fd0:	beq	26b80 <__assert_fail@plt+0x14ed4>
   26fd4:	b	26b98 <__assert_fail@plt+0x14eec>
   26fd8:	mov	r0, r7
   26fdc:	bl	11afc <iswalnum@plt>
   26fe0:	mov	r1, #1
   26fe4:	cmp	r7, #95	; 0x5f
   26fe8:	beq	26f14 <__assert_fail@plt+0x15268>
   26fec:	cmp	r0, #0
   26ff0:	mov	r2, r7
   26ff4:	beq	26e60 <__assert_fail@plt+0x151b4>
   26ff8:	b	26f14 <__assert_fail@plt+0x15268>
   26ffc:	mov	r0, r2
   27000:	str	r2, [r4, #32]
   27004:	b	26800 <__assert_fail@plt+0x14b54>
   27008:	cmp	r2, #1
   2700c:	blt	27070 <__assert_fail@plt+0x153c4>
   27010:	sub	r1, r7, #1
   27014:	sub	r1, r1, r3
   27018:	mvn	r3, #1
   2701c:	cmn	r1, #7
   27020:	mvnle	r1, #6
   27024:	sub	ip, r3, r1
   27028:	add	r1, sp, #14
   2702c:	ldrb	r3, [r7, ip]
   27030:	sub	lr, ip, #1
   27034:	ldrb	r3, [r0, r3]
   27038:	strb	r3, [r1, ip]
   2703c:	add	r3, ip, #1
   27040:	mov	ip, lr
   27044:	cmp	r3, #1
   27048:	bgt	2702c <__assert_fail@plt+0x15380>
   2704c:	b	26928 <__assert_fail@plt+0x14c7c>
   27050:	mov	r0, r6
   27054:	bl	11afc <iswalnum@plt>
   27058:	mov	r1, #1
   2705c:	cmp	r6, #95	; 0x5f
   27060:	beq	26f14 <__assert_fail@plt+0x15268>
   27064:	cmp	r0, #0
   27068:	beq	26efc <__assert_fail@plt+0x15250>
   2706c:	b	26f14 <__assert_fail@plt+0x15268>
   27070:	add	r1, sp, #14
   27074:	b	26928 <__assert_fail@plt+0x14c7c>
   27078:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2707c:	add	fp, sp, #24
   27080:	mov	r8, r0
   27084:	ldr	r0, [r0, #124]	; 0x7c
   27088:	cmp	r0, #1
   2708c:	blt	27110 <__assert_fail@plt+0x15464>
   27090:	mov	r7, #0
   27094:	ldr	r0, [r8, #132]	; 0x84
   27098:	ldr	r5, [r0, r7, lsl #2]
   2709c:	ldr	r0, [r5, #16]
   270a0:	cmp	r0, #1
   270a4:	blt	270d4 <__assert_fail@plt+0x15428>
   270a8:	mov	r4, #0
   270ac:	ldr	r0, [r5, #20]
   270b0:	ldr	r6, [r0, r4, lsl #2]
   270b4:	ldr	r0, [r6, #16]
   270b8:	bl	1b22c <__assert_fail@plt+0x9580>
   270bc:	mov	r0, r6
   270c0:	bl	1b22c <__assert_fail@plt+0x9580>
   270c4:	ldr	r0, [r5, #16]
   270c8:	add	r4, r4, #1
   270cc:	cmp	r4, r0
   270d0:	blt	270ac <__assert_fail@plt+0x15400>
   270d4:	ldr	r0, [r5, #20]
   270d8:	bl	1b22c <__assert_fail@plt+0x9580>
   270dc:	ldr	r0, [r5, #8]
   270e0:	cmp	r0, #0
   270e4:	beq	270f8 <__assert_fail@plt+0x1544c>
   270e8:	ldr	r0, [r0, #8]
   270ec:	bl	1b22c <__assert_fail@plt+0x9580>
   270f0:	ldr	r0, [r5, #8]
   270f4:	bl	1b22c <__assert_fail@plt+0x9580>
   270f8:	mov	r0, r5
   270fc:	bl	1b22c <__assert_fail@plt+0x9580>
   27100:	ldr	r0, [r8, #124]	; 0x7c
   27104:	add	r7, r7, #1
   27108:	cmp	r7, r0
   2710c:	blt	27094 <__assert_fail@plt+0x153e8>
   27110:	mov	r0, #0
   27114:	str	r0, [r8, #108]	; 0x6c
   27118:	str	r0, [r8, #124]	; 0x7c
   2711c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27124:	add	fp, sp, #28
   27128:	sub	sp, sp, #4
   2712c:	mov	sl, r0
   27130:	ldr	r0, [r1, #4]
   27134:	cmp	r0, #1
   27138:	blt	27204 <__assert_fail@plt+0x15558>
   2713c:	ldr	r7, [sl, #84]	; 0x54
   27140:	mov	r8, r2
   27144:	mov	r5, r1
   27148:	mov	r4, #0
   2714c:	b	27174 <__assert_fail@plt+0x154c8>
   27150:	ldr	r0, [sl, #132]	; 0x84
   27154:	lsl	r1, r9, #3
   27158:	bl	1b388 <__assert_fail@plt+0x96dc>
   2715c:	cmp	r0, #0
   27160:	beq	27210 <__assert_fail@plt+0x15564>
   27164:	lsl	r1, r9, #1
   27168:	str	r1, [sl, #128]	; 0x80
   2716c:	str	r0, [sl, #132]	; 0x84
   27170:	b	271bc <__assert_fail@plt+0x15510>
   27174:	ldr	r1, [r5, #8]
   27178:	ldr	r6, [r1, r4, lsl #2]
   2717c:	ldr	r1, [r7]
   27180:	add	r2, r1, r6, lsl #3
   27184:	ldrb	r2, [r2, #4]
   27188:	cmp	r2, #8
   2718c:	bne	271f8 <__assert_fail@plt+0x1554c>
   27190:	ldr	r1, [r1, r6, lsl #3]
   27194:	cmp	r1, #31
   27198:	bgt	271f8 <__assert_fail@plt+0x1554c>
   2719c:	ldr	r2, [r7, #80]	; 0x50
   271a0:	mov	r3, #1
   271a4:	tst	r2, r3, lsl r1
   271a8:	beq	271f8 <__assert_fail@plt+0x1554c>
   271ac:	ldr	r9, [sl, #124]	; 0x7c
   271b0:	ldr	r0, [sl, #128]	; 0x80
   271b4:	cmp	r9, r0
   271b8:	beq	27150 <__assert_fail@plt+0x154a4>
   271bc:	mov	r0, #1
   271c0:	mov	r1, #24
   271c4:	bl	1af9c <__assert_fail@plt+0x92f0>
   271c8:	ldr	r1, [sl, #124]	; 0x7c
   271cc:	ldr	r2, [sl, #132]	; 0x84
   271d0:	str	r0, [r2, r1, lsl #2]
   271d4:	ldr	r0, [sl, #132]	; 0x84
   271d8:	ldr	r0, [r0, r1, lsl #2]
   271dc:	cmp	r0, #0
   271e0:	beq	27210 <__assert_fail@plt+0x15564>
   271e4:	add	r1, r1, #1
   271e8:	str	r6, [r0, #4]
   271ec:	str	r1, [sl, #124]	; 0x7c
   271f0:	str	r8, [r0]
   271f4:	ldr	r0, [r5, #4]
   271f8:	add	r4, r4, #1
   271fc:	cmp	r4, r0
   27200:	blt	27174 <__assert_fail@plt+0x154c8>
   27204:	mov	r0, #0
   27208:	sub	sp, fp, #28
   2720c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27210:	mov	r0, #12
   27214:	sub	sp, fp, #28
   27218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2721c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27220:	add	fp, sp, #28
   27224:	sub	sp, sp, #76	; 0x4c
   27228:	mov	r9, r0
   2722c:	ldr	r0, [r1, #4]
   27230:	cmp	r0, #1
   27234:	blt	27b6c <__assert_fail@plt+0x15ec0>
   27238:	ldr	r2, [r9, #84]	; 0x54
   2723c:	ldr	r8, [r9, #40]	; 0x28
   27240:	mov	r3, #0
   27244:	str	r9, [sp, #40]	; 0x28
   27248:	str	r1, [sp, #16]
   2724c:	str	r8, [sp, #52]	; 0x34
   27250:	str	r2, [sp, #20]
   27254:	b	2728c <__assert_fail@plt+0x155e0>
   27258:	ldr	r0, [r9, #88]	; 0x58
   2725c:	and	r0, r0, #2
   27260:	eor	r1, r0, #10
   27264:	b	27370 <__assert_fail@plt+0x156c4>
   27268:	mov	r0, r4
   2726c:	bl	11afc <iswalnum@plt>
   27270:	mov	r1, #1
   27274:	mov	r2, #0
   27278:	cmp	r4, #95	; 0x5f
   2727c:	beq	27388 <__assert_fail@plt+0x156dc>
   27280:	cmp	r0, #0
   27284:	beq	27358 <__assert_fail@plt+0x156ac>
   27288:	b	27388 <__assert_fail@plt+0x156dc>
   2728c:	ldr	r0, [r1, #8]
   27290:	str	r3, [sp, #24]
   27294:	ldr	r3, [r0, r3, lsl #2]
   27298:	ldr	r0, [r2]
   2729c:	add	r5, r0, r3, lsl #3
   272a0:	mov	r1, r3
   272a4:	str	r3, [sp, #48]	; 0x30
   272a8:	ldr	r6, [r5, #4]!
   272ac:	uxtb	r0, r6
   272b0:	cmp	r0, #4
   272b4:	bne	27b50 <__assert_fail@plt+0x15ea4>
   272b8:	movw	r0, #65280	; 0xff00
   272bc:	movt	r0, #3
   272c0:	tst	r6, r0
   272c4:	beq	273bc <__assert_fail@plt+0x15710>
   272c8:	cmn	r8, #1
   272cc:	ble	2730c <__assert_fail@plt+0x15660>
   272d0:	ldr	r0, [r9, #48]	; 0x30
   272d4:	cmp	r0, r8
   272d8:	beq	27258 <__assert_fail@plt+0x155ac>
   272dc:	ldr	r0, [r9, #80]	; 0x50
   272e0:	cmp	r0, #2
   272e4:	blt	27314 <__assert_fail@plt+0x15668>
   272e8:	ldr	r0, [r9, #8]
   272ec:	mov	r1, r8
   272f0:	ldr	r4, [r0, r1, lsl #2]
   272f4:	cmn	r4, #1
   272f8:	bne	2734c <__assert_fail@plt+0x156a0>
   272fc:	sub	r2, r1, #1
   27300:	cmp	r1, #0
   27304:	mov	r1, r2
   27308:	bgt	272f0 <__assert_fail@plt+0x15644>
   2730c:	ldr	r1, [r9, #60]	; 0x3c
   27310:	b	27370 <__assert_fail@plt+0x156c4>
   27314:	ldr	r0, [r9, #4]
   27318:	ldr	r1, [r9, #68]	; 0x44
   2731c:	ldrb	r0, [r0, r8]
   27320:	ubfx	r2, r0, #5, #3
   27324:	and	r7, r0, #31
   27328:	ldr	r3, [r1, r2, lsl #2]
   2732c:	mov	r1, #1
   27330:	mov	r2, #0
   27334:	tst	r3, r1, lsl r7
   27338:	bne	27388 <__assert_fail@plt+0x156dc>
   2733c:	mov	r1, #0
   27340:	cmp	r0, #10
   27344:	beq	27364 <__assert_fail@plt+0x156b8>
   27348:	b	27370 <__assert_fail@plt+0x156c4>
   2734c:	ldrb	r0, [r9, #78]	; 0x4e
   27350:	cmp	r0, #0
   27354:	bne	27268 <__assert_fail@plt+0x155bc>
   27358:	mov	r1, #0
   2735c:	cmp	r4, #10
   27360:	bne	27370 <__assert_fail@plt+0x156c4>
   27364:	ldrb	r1, [r9, #77]	; 0x4d
   27368:	cmp	r1, #0
   2736c:	movwne	r1, #2
   27370:	and	r0, r1, #1
   27374:	tst	r6, #1024	; 0x400
   27378:	eor	r2, r0, #1
   2737c:	beq	27388 <__assert_fail@plt+0x156dc>
   27380:	cmp	r0, #0
   27384:	beq	27b50 <__assert_fail@plt+0x15ea4>
   27388:	ldr	r0, [r5]
   2738c:	cmp	r2, #0
   27390:	bne	2739c <__assert_fail@plt+0x156f0>
   27394:	ands	r2, r0, #2048	; 0x800
   27398:	bne	27b50 <__assert_fail@plt+0x15ea4>
   2739c:	tst	r1, #2
   273a0:	bne	273ac <__assert_fail@plt+0x15700>
   273a4:	ands	r2, r0, #8192	; 0x2000
   273a8:	bne	27b50 <__assert_fail@plt+0x15ea4>
   273ac:	tst	r1, #8
   273b0:	bne	273bc <__assert_fail@plt+0x15710>
   273b4:	ands	r0, r0, #32768	; 0x8000
   273b8:	bne	27b50 <__assert_fail@plt+0x15ea4>
   273bc:	ldr	r2, [r9, #108]	; 0x6c
   273c0:	ldr	r0, [r9, #84]	; 0x54
   273c4:	ldr	ip, [r9, #4]
   273c8:	cmp	r2, #1
   273cc:	str	r0, [sp, #28]
   273d0:	str	r2, [sp, #12]
   273d4:	blt	27414 <__assert_fail@plt+0x15768>
   273d8:	ldr	r1, [r9, #116]	; 0x74
   273dc:	mov	r0, #0
   273e0:	mov	r5, #1
   273e4:	add	r3, r2, r0
   273e8:	add	r3, r3, r3, lsr #31
   273ec:	asr	r7, r3, #1
   273f0:	add	r6, r7, r7, lsl #1
   273f4:	add	r6, r1, r6, lsl #3
   273f8:	ldr	r6, [r6, #4]
   273fc:	cmp	r6, r8
   27400:	addlt	r0, r5, r3, asr #1
   27404:	movge	r2, r7
   27408:	cmp	r0, r2
   2740c:	blt	273e4 <__assert_fail@plt+0x15738>
   27410:	b	27418 <__assert_fail@plt+0x1576c>
   27414:	mov	r0, #0
   27418:	ldr	r1, [sp, #12]
   2741c:	ldr	r5, [sp, #28]
   27420:	cmp	r0, r1
   27424:	bge	27468 <__assert_fail@plt+0x157bc>
   27428:	cmn	r0, #1
   2742c:	beq	27468 <__assert_fail@plt+0x157bc>
   27430:	ldr	r1, [r9, #116]	; 0x74
   27434:	add	r0, r0, r0, lsl #1
   27438:	add	r0, r1, r0, lsl #3
   2743c:	ldr	r1, [r0, #4]
   27440:	cmp	r1, r8
   27444:	bne	27468 <__assert_fail@plt+0x157bc>
   27448:	ldr	r1, [r0]
   2744c:	ldr	r2, [sp, #48]	; 0x30
   27450:	cmp	r1, r2
   27454:	beq	27878 <__assert_fail@plt+0x15bcc>
   27458:	ldrb	r1, [r0, #20]
   2745c:	add	r0, r0, #24
   27460:	cmp	r1, #0
   27464:	bne	27448 <__assert_fail@plt+0x1579c>
   27468:	ldr	r0, [r9, #124]	; 0x7c
   2746c:	cmp	r0, #1
   27470:	blt	27878 <__assert_fail@plt+0x15bcc>
   27474:	ldr	r0, [r5]
   27478:	ldr	r1, [sp, #48]	; 0x30
   2747c:	mov	r2, #0
   27480:	ldr	r1, [r0, r1, lsl #3]
   27484:	str	r1, [sp, #36]	; 0x24
   27488:	b	27490 <__assert_fail@plt+0x157e4>
   2748c:	ldr	r0, [r5]
   27490:	ldr	r1, [r9, #132]	; 0x84
   27494:	str	r2, [sp, #32]
   27498:	ldr	lr, [r1, r2, lsl #2]
   2749c:	ldr	r1, [lr, #4]
   274a0:	ldr	r0, [r0, r1, lsl #3]
   274a4:	ldr	r1, [sp, #36]	; 0x24
   274a8:	cmp	r0, r1
   274ac:	bne	27848 <__assert_fail@plt+0x15b9c>
   274b0:	ldr	r0, [lr, #16]
   274b4:	ldr	r2, [lr]
   274b8:	mov	r8, #0
   274bc:	str	lr, [sp, #44]	; 0x2c
   274c0:	cmp	r0, #1
   274c4:	blt	274d4 <__assert_fail@plt+0x15828>
   274c8:	ldr	r6, [sp, #52]	; 0x34
   274cc:	mov	r7, r2
   274d0:	b	27558 <__assert_fail@plt+0x158ac>
   274d4:	ldr	r6, [sp, #52]	; 0x34
   274d8:	b	27604 <__assert_fail@plt+0x15958>
   274dc:	ldr	r2, [r9, #48]	; 0x30
   274e0:	cmp	r5, r2
   274e4:	bgt	27600 <__assert_fail@plt+0x15954>
   274e8:	ldr	r0, [r9, #36]	; 0x24
   274ec:	ldr	r3, [r9, #104]	; 0x68
   274f0:	cmp	r0, r5
   274f4:	cmple	r0, r2
   274f8:	blt	27508 <__assert_fail@plt+0x1585c>
   274fc:	cmp	r1, r5
   27500:	cmple	r1, r2
   27504:	bge	27524 <__assert_fail@plt+0x15878>
   27508:	ldr	r0, [sp, #40]	; 0x28
   2750c:	add	r1, r5, #1
   27510:	mov	r9, r3
   27514:	bl	27ba8 <__assert_fail@plt+0x15efc>
   27518:	mov	r3, r9
   2751c:	cmp	r0, #0
   27520:	bne	27b80 <__assert_fail@plt+0x15ed4>
   27524:	ldr	r9, [sp, #40]	; 0x28
   27528:	cmp	r5, r3
   2752c:	ble	27550 <__assert_fail@plt+0x158a4>
   27530:	sub	r0, r5, r3
   27534:	mov	r1, #0
   27538:	lsl	r2, r0, #2
   2753c:	ldr	r0, [r9, #100]	; 0x64
   27540:	add	r0, r0, r3, lsl #2
   27544:	add	r0, r0, #4
   27548:	bl	11b2c <memset@plt>
   2754c:	str	r5, [r9, #104]	; 0x68
   27550:	ldr	ip, [r9, #4]
   27554:	b	27584 <__assert_fail@plt+0x158d8>
   27558:	ldr	r1, [lr, #20]
   2755c:	ldr	sl, [r1, r8, lsl #2]
   27560:	ldr	r1, [sl, #4]
   27564:	sub	r4, r1, r7
   27568:	str	r1, [fp, #-48]	; 0xffffffd0
   2756c:	cmp	r4, #1
   27570:	blt	275a4 <__assert_fail@plt+0x158f8>
   27574:	ldr	r1, [r9, #28]
   27578:	add	r5, r4, r6
   2757c:	cmp	r5, r1
   27580:	bgt	274dc <__assert_fail@plt+0x15830>
   27584:	add	r0, ip, r6
   27588:	add	r1, ip, r7
   2758c:	mov	r2, r4
   27590:	mov	r5, ip
   27594:	bl	11934 <memcmp@plt>
   27598:	ldr	lr, [sp, #44]	; 0x2c
   2759c:	cmp	r0, #0
   275a0:	bne	275f8 <__assert_fail@plt+0x1594c>
   275a4:	ldr	r0, [sp, #52]	; 0x34
   275a8:	ldr	r3, [sp, #48]	; 0x30
   275ac:	mov	r1, lr
   275b0:	mov	r2, sl
   275b4:	mov	r5, lr
   275b8:	str	r0, [sp]
   275bc:	mov	r0, r9
   275c0:	bl	28248 <__assert_fail@plt+0x1659c>
   275c4:	cmp	r0, #1
   275c8:	bhi	27b80 <__assert_fail@plt+0x15ed4>
   275cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   275d0:	ldr	r0, [r5, #16]
   275d4:	ldr	ip, [r9, #4]
   275d8:	add	r8, r8, #1
   275dc:	add	r6, r4, r6
   275e0:	mov	lr, r5
   275e4:	mov	r1, r9
   275e8:	cmp	r8, r0
   275ec:	mov	r7, r2
   275f0:	blt	27558 <__assert_fail@plt+0x158ac>
   275f4:	b	27604 <__assert_fail@plt+0x15958>
   275f8:	ldr	r0, [lr, #16]
   275fc:	mov	ip, r5
   27600:	mov	r2, r7
   27604:	ldr	r5, [sp, #28]
   27608:	cmp	r8, r0
   2760c:	bge	27618 <__assert_fail@plt+0x1596c>
   27610:	ldr	r8, [sp, #52]	; 0x34
   27614:	b	27848 <__assert_fail@plt+0x15b9c>
   27618:	cmp	r8, #0
   2761c:	ldr	r8, [sp, #52]	; 0x34
   27620:	addne	r2, r2, #1
   27624:	cmp	r2, r8
   27628:	bgt	27848 <__assert_fail@plt+0x15b9c>
   2762c:	b	2779c <__assert_fail@plt+0x15af0>
   27630:	cmn	r4, #1
   27634:	beq	27834 <__assert_fail@plt+0x15b88>
   27638:	ldr	r1, [lr, #8]
   2763c:	str	r6, [fp, #-48]	; 0xffffffd0
   27640:	mov	r6, ip
   27644:	mov	r5, r9
   27648:	cmp	r1, #0
   2764c:	bne	2767c <__assert_fail@plt+0x159d0>
   27650:	ldr	r0, [lr]
   27654:	add	r1, sl, #1
   27658:	mov	r9, #12
   2765c:	sub	r1, r1, r0
   27660:	mov	r0, #12
   27664:	bl	1af9c <__assert_fail@plt+0x92f0>
   27668:	ldr	lr, [sp, #44]	; 0x2c
   2766c:	mov	r1, r0
   27670:	cmp	r0, #0
   27674:	str	r0, [lr, #8]
   27678:	beq	27b70 <__assert_fail@plt+0x15ec4>
   2767c:	ldr	r3, [lr]
   27680:	ldr	r2, [lr, #4]
   27684:	stm	sp, {r4, sl}
   27688:	mov	r0, #9
   2768c:	str	r0, [sp, #8]
   27690:	ldr	r0, [sp, #40]	; 0x28
   27694:	bl	2840c <__assert_fail@plt+0x16760>
   27698:	mov	ip, r6
   2769c:	ldr	lr, [sp, #44]	; 0x2c
   276a0:	ldr	r6, [fp, #-48]	; 0xffffffd0
   276a4:	cmp	r0, #1
   276a8:	beq	27838 <__assert_fail@plt+0x15b8c>
   276ac:	mov	r9, r0
   276b0:	cmp	r0, #0
   276b4:	bne	27b70 <__assert_fail@plt+0x15ec4>
   276b8:	ldr	r1, [lr, #12]
   276bc:	ldr	r0, [lr, #16]
   276c0:	ldr	r7, [sp, #40]	; 0x28
   276c4:	cmp	r0, r1
   276c8:	beq	2776c <__assert_fail@plt+0x15ac0>
   276cc:	mov	r0, #1
   276d0:	mov	r1, #20
   276d4:	bl	1af9c <__assert_fail@plt+0x92f0>
   276d8:	cmp	r0, #0
   276dc:	beq	27b88 <__assert_fail@plt+0x15edc>
   276e0:	ldr	r1, [sp, #44]	; 0x2c
   276e4:	mov	r2, r0
   276e8:	ldr	r0, [r1, #16]
   276ec:	ldr	r3, [r1, #20]
   276f0:	str	r2, [r3, r0, lsl #2]
   276f4:	stm	r2, {r4, sl}
   276f8:	add	r0, r0, #1
   276fc:	ldr	r3, [sp, #48]	; 0x30
   27700:	str	r0, [r1, #16]
   27704:	mov	r0, r7
   27708:	str	r8, [sp]
   2770c:	bl	28248 <__assert_fail@plt+0x1659c>
   27710:	cmp	r0, #1
   27714:	bhi	27b80 <__assert_fail@plt+0x15ed4>
   27718:	ldr	ip, [r7, #4]
   2771c:	ldr	lr, [sp, #44]	; 0x2c
   27720:	ldr	r6, [fp, #-48]	; 0xffffffd0
   27724:	b	27838 <__assert_fail@plt+0x15b8c>
   27728:	ldr	r0, [r9, #48]	; 0x30
   2772c:	cmp	r6, r0
   27730:	bge	27848 <__assert_fail@plt+0x15b9c>
   27734:	add	r4, r6, #1
   27738:	mov	r0, r9
   2773c:	mov	r7, r5
   27740:	mov	r5, r6
   27744:	mov	r1, r4
   27748:	bl	27ba8 <__assert_fail@plt+0x15efc>
   2774c:	cmp	r0, #0
   27750:	bne	27b80 <__assert_fail@plt+0x15ed4>
   27754:	ldr	ip, [r9, #4]
   27758:	ldr	lr, [sp, #44]	; 0x2c
   2775c:	mov	r6, r5
   27760:	mov	r5, r7
   27764:	mov	r1, r9
   27768:	b	277bc <__assert_fail@plt+0x15b10>
   2776c:	mov	r1, #1
   27770:	mov	r5, lr
   27774:	orr	r6, r1, r0, lsl #1
   27778:	ldr	r0, [lr, #20]
   2777c:	lsl	r1, r6, #2
   27780:	bl	1b388 <__assert_fail@plt+0x96dc>
   27784:	cmp	r0, #0
   27788:	beq	27b88 <__assert_fail@plt+0x15edc>
   2778c:	str	r6, [r5, #12]
   27790:	str	r0, [r5, #20]
   27794:	ldr	r5, [sp, #28]
   27798:	b	276cc <__assert_fail@plt+0x15a20>
   2779c:	ldr	r0, [lr]
   277a0:	mov	sl, r2
   277a4:	cmp	r2, r0
   277a8:	ble	277d4 <__assert_fail@plt+0x15b28>
   277ac:	ldr	r0, [r9, #28]
   277b0:	cmp	r6, r0
   277b4:	bge	27728 <__assert_fail@plt+0x15a7c>
   277b8:	add	r4, r6, #1
   277bc:	add	r1, ip, sl
   277c0:	ldrb	r0, [ip, r6]
   277c4:	ldrb	r1, [r1, #-1]
   277c8:	cmp	r0, r1
   277cc:	beq	277d8 <__assert_fail@plt+0x15b2c>
   277d0:	b	27848 <__assert_fail@plt+0x15b9c>
   277d4:	mov	r4, r6
   277d8:	ldr	r0, [r9, #100]	; 0x64
   277dc:	mov	r6, r4
   277e0:	ldr	r2, [r0, sl, lsl #2]
   277e4:	cmp	r2, #0
   277e8:	beq	27838 <__assert_fail@plt+0x15b8c>
   277ec:	ldr	r0, [r2, #8]
   277f0:	cmp	r0, #1
   277f4:	blt	27838 <__assert_fail@plt+0x15b8c>
   277f8:	mov	r9, r5
   277fc:	ldr	r1, [r5]
   27800:	ldr	r2, [r2, #12]
   27804:	ldr	r5, [sp, #36]	; 0x24
   27808:	mov	r3, #0
   2780c:	ldr	r4, [r2, r3, lsl #2]
   27810:	add	r7, r1, r4, lsl #3
   27814:	ldrb	r7, [r7, #4]
   27818:	cmp	r7, #9
   2781c:	ldreq	r7, [r1, r4, lsl #3]
   27820:	cmpeq	r7, r5
   27824:	beq	27630 <__assert_fail@plt+0x15984>
   27828:	add	r3, r3, #1
   2782c:	cmp	r3, r0
   27830:	blt	2780c <__assert_fail@plt+0x15b60>
   27834:	mov	r5, r9
   27838:	ldr	r9, [sp, #40]	; 0x28
   2783c:	add	r2, sl, #1
   27840:	cmp	sl, r8
   27844:	blt	2779c <__assert_fail@plt+0x15af0>
   27848:	ldr	r2, [sp, #32]
   2784c:	ldr	r0, [r9, #124]	; 0x7c
   27850:	add	r2, r2, #1
   27854:	cmp	r2, r0
   27858:	blt	2748c <__assert_fail@plt+0x157e0>
   2785c:	mov	r1, #0
   27860:	ldr	r0, [r9, #108]	; 0x6c
   27864:	str	r1, [fp, #-32]	; 0xffffffe0
   27868:	ldr	r1, [sp, #12]
   2786c:	cmp	r1, r0
   27870:	bge	27b50 <__assert_fail@plt+0x15ea4>
   27874:	b	278c0 <__assert_fail@plt+0x15c14>
   27878:	mov	r0, #0
   2787c:	str	r0, [fp, #-32]	; 0xffffffe0
   27880:	b	27b50 <__assert_fail@plt+0x15ea4>
   27884:	ldr	r0, [r3, #88]	; 0x58
   27888:	and	r0, r0, #2
   2788c:	eor	sl, r0, #10
   27890:	b	279f4 <__assert_fail@plt+0x15d48>
   27894:	mov	r0, r4
   27898:	bl	11afc <iswalnum@plt>
   2789c:	mov	sl, #1
   278a0:	cmp	r4, #95	; 0x5f
   278a4:	beq	278b8 <__assert_fail@plt+0x15c0c>
   278a8:	ldr	r3, [sp, #40]	; 0x28
   278ac:	cmp	r0, #0
   278b0:	beq	279dc <__assert_fail@plt+0x15d30>
   278b4:	b	279f4 <__assert_fail@plt+0x15d48>
   278b8:	ldr	r3, [sp, #40]	; 0x28
   278bc:	b	279f4 <__assert_fail@plt+0x15d48>
   278c0:	ldr	r0, [r9, #116]	; 0x74
   278c4:	mov	r5, r1
   278c8:	add	r1, r1, r1, lsl #1
   278cc:	ldr	r3, [sp, #48]	; 0x30
   278d0:	ldr	r2, [r0, r1, lsl #3]
   278d4:	cmp	r2, r3
   278d8:	bne	27b34 <__assert_fail@plt+0x15e88>
   278dc:	add	r0, r0, r1, lsl #3
   278e0:	ldr	r2, [sp, #52]	; 0x34
   278e4:	ldr	r1, [r0, #4]
   278e8:	cmp	r1, r2
   278ec:	bne	27b34 <__assert_fail@plt+0x15e88>
   278f0:	ldr	r2, [r0, #8]
   278f4:	ldr	r6, [r0, #12]
   278f8:	ldr	r0, [sp, #20]
   278fc:	ldr	r8, [r0, #24]
   27900:	cmp	r6, r2
   27904:	bne	27920 <__assert_fail@plt+0x15c74>
   27908:	ldr	r1, [sp, #48]	; 0x30
   2790c:	ldr	r0, [r0, #20]
   27910:	add	r1, r1, r1, lsl #1
   27914:	add	r0, r0, r1, lsl #2
   27918:	ldr	r0, [r0, #8]
   2791c:	b	2792c <__assert_fail@plt+0x15c80>
   27920:	ldr	r0, [r0, #12]
   27924:	ldr	r1, [sp, #48]	; 0x30
   27928:	add	r0, r0, r1, lsl #2
   2792c:	ldr	r9, [r0]
   27930:	ldr	r0, [sp, #52]	; 0x34
   27934:	str	r2, [fp, #-48]	; 0xffffffd0
   27938:	add	r0, r6, r0
   2793c:	sub	r7, r0, r2
   27940:	cmp	r7, #0
   27944:	ble	2798c <__assert_fail@plt+0x15ce0>
   27948:	ldr	r3, [sp, #40]	; 0x28
   2794c:	sub	r0, r7, #1
   27950:	ldr	r1, [r3, #48]	; 0x30
   27954:	cmp	r1, r0
   27958:	beq	27884 <__assert_fail@plt+0x15bd8>
   2795c:	ldr	r1, [r3, #80]	; 0x50
   27960:	cmp	r1, #2
   27964:	blt	27998 <__assert_fail@plt+0x15cec>
   27968:	ldr	r0, [r3, #8]
   2796c:	mov	r1, r7
   27970:	sub	r0, r0, #4
   27974:	ldr	r4, [r0, r1, lsl #2]
   27978:	cmn	r4, #1
   2797c:	bne	279cc <__assert_fail@plt+0x15d20>
   27980:	sub	r1, r1, #1
   27984:	cmp	r1, #0
   27988:	bgt	27974 <__assert_fail@plt+0x15cc8>
   2798c:	ldr	r3, [sp, #40]	; 0x28
   27990:	ldr	sl, [r3, #60]	; 0x3c
   27994:	b	279f4 <__assert_fail@plt+0x15d48>
   27998:	ldr	r1, [r3, #4]
   2799c:	ldr	r2, [r3, #68]	; 0x44
   279a0:	mov	sl, #1
   279a4:	ldrb	r0, [r1, r0]
   279a8:	ubfx	r1, r0, #5, #3
   279ac:	ldr	r1, [r2, r1, lsl #2]
   279b0:	and	r2, r0, #31
   279b4:	tst	r1, sl, lsl r2
   279b8:	bne	279f4 <__assert_fail@plt+0x15d48>
   279bc:	mov	sl, #0
   279c0:	cmp	r0, #10
   279c4:	beq	279e8 <__assert_fail@plt+0x15d3c>
   279c8:	b	279f4 <__assert_fail@plt+0x15d48>
   279cc:	ldr	r3, [sp, #40]	; 0x28
   279d0:	ldrb	r0, [r3, #78]	; 0x4e
   279d4:	cmp	r0, #0
   279d8:	bne	27894 <__assert_fail@plt+0x15be8>
   279dc:	mov	sl, #0
   279e0:	cmp	r4, #10
   279e4:	bne	279f4 <__assert_fail@plt+0x15d48>
   279e8:	ldrb	sl, [r3, #77]	; 0x4d
   279ec:	cmp	sl, #0
   279f0:	movwne	sl, #2
   279f4:	ldr	r0, [r3, #100]	; 0x64
   279f8:	ldr	r2, [sp, #52]	; 0x34
   279fc:	add	r1, r9, r9, lsl #1
   27a00:	mov	r4, r3
   27a04:	add	r8, r8, r1, lsl #2
   27a08:	ldr	r2, [r0, r2, lsl #2]
   27a0c:	ldr	r0, [r0, r7, lsl #2]
   27a10:	cmp	r2, #0
   27a14:	ldrne	r2, [r2, #8]
   27a18:	moveq	r2, #0
   27a1c:	cmp	r0, #0
   27a20:	str	r2, [sp, #44]	; 0x2c
   27a24:	beq	27a90 <__assert_fail@plt+0x15de4>
   27a28:	ldr	r1, [r0, #40]	; 0x28
   27a2c:	sub	r4, fp, #44	; 0x2c
   27a30:	mov	r2, r8
   27a34:	mov	r0, r4
   27a38:	bl	27fc4 <__assert_fail@plt+0x16318>
   27a3c:	cmp	r0, #0
   27a40:	str	r0, [fp, #-32]	; 0xffffffe0
   27a44:	bne	27b90 <__assert_fail@plt+0x15ee4>
   27a48:	ldr	r1, [sp, #20]
   27a4c:	sub	r0, fp, #32
   27a50:	mov	r2, r4
   27a54:	mov	r3, sl
   27a58:	bl	260ec <__assert_fail@plt+0x14440>
   27a5c:	ldr	r4, [sp, #40]	; 0x28
   27a60:	ldr	r1, [r4, #100]	; 0x64
   27a64:	str	r0, [r1, r7, lsl #2]
   27a68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27a6c:	bl	1b22c <__assert_fail@plt+0x9580>
   27a70:	ldr	r0, [r4, #100]	; 0x64
   27a74:	ldr	r1, [r0, r7, lsl #2]
   27a78:	cmp	r1, #0
   27a7c:	bne	27ad8 <__assert_fail@plt+0x15e2c>
   27a80:	ldr	r9, [fp, #-32]	; 0xffffffe0
   27a84:	cmp	r9, #0
   27a88:	beq	27ad8 <__assert_fail@plt+0x15e2c>
   27a8c:	b	27b74 <__assert_fail@plt+0x15ec8>
   27a90:	ldr	r1, [sp, #20]
   27a94:	sub	r0, fp, #32
   27a98:	mov	r2, r8
   27a9c:	mov	r3, sl
   27aa0:	bl	260ec <__assert_fail@plt+0x14440>
   27aa4:	ldr	r1, [r4, #100]	; 0x64
   27aa8:	str	r0, [r1, r7, lsl #2]
   27aac:	ldr	r0, [r4, #100]	; 0x64
   27ab0:	ldr	r1, [r0, r7, lsl #2]
   27ab4:	cmp	r1, #0
   27ab8:	bne	27ad8 <__assert_fail@plt+0x15e2c>
   27abc:	ldr	r9, [fp, #-32]	; 0xffffffe0
   27ac0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   27ac4:	cmp	r9, #0
   27ac8:	bne	27b74 <__assert_fail@plt+0x15ec8>
   27acc:	cmp	r6, r1
   27ad0:	bne	27b34 <__assert_fail@plt+0x15e88>
   27ad4:	b	27ae4 <__assert_fail@plt+0x15e38>
   27ad8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   27adc:	cmp	r6, r1
   27ae0:	bne	27b34 <__assert_fail@plt+0x15e88>
   27ae4:	ldr	r1, [sp, #52]	; 0x34
   27ae8:	ldr	r0, [r0, r1, lsl #2]
   27aec:	ldr	r1, [sp, #44]	; 0x2c
   27af0:	ldr	r0, [r0, #8]
   27af4:	cmp	r0, r1
   27af8:	ble	27b34 <__assert_fail@plt+0x15e88>
   27afc:	ldr	r4, [sp, #40]	; 0x28
   27b00:	ldr	r2, [sp, #52]	; 0x34
   27b04:	mov	r1, r8
   27b08:	mov	r0, r4
   27b0c:	bl	27120 <__assert_fail@plt+0x15474>
   27b10:	cmp	r0, #0
   27b14:	str	r0, [fp, #-32]	; 0xffffffe0
   27b18:	bne	27ba0 <__assert_fail@plt+0x15ef4>
   27b1c:	mov	r0, r4
   27b20:	mov	r1, r8
   27b24:	bl	2721c <__assert_fail@plt+0x15570>
   27b28:	cmp	r0, #0
   27b2c:	str	r0, [fp, #-32]	; 0xffffffe0
   27b30:	bne	27ba0 <__assert_fail@plt+0x15ef4>
   27b34:	ldr	r9, [sp, #40]	; 0x28
   27b38:	ldr	r8, [sp, #52]	; 0x34
   27b3c:	mov	r1, r5
   27b40:	add	r1, r5, #1
   27b44:	ldr	r0, [r9, #108]	; 0x6c
   27b48:	cmp	r1, r0
   27b4c:	blt	278c0 <__assert_fail@plt+0x15c14>
   27b50:	ldr	r1, [sp, #16]
   27b54:	ldr	r3, [sp, #24]
   27b58:	ldr	r2, [sp, #20]
   27b5c:	ldr	r0, [r1, #4]
   27b60:	add	r3, r3, #1
   27b64:	cmp	r3, r0
   27b68:	blt	2728c <__assert_fail@plt+0x155e0>
   27b6c:	mov	r9, #0
   27b70:	str	r9, [fp, #-32]	; 0xffffffe0
   27b74:	mov	r0, r9
   27b78:	sub	sp, fp, #28
   27b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b80:	mov	r9, r0
   27b84:	b	27b70 <__assert_fail@plt+0x15ec4>
   27b88:	mov	r9, #12
   27b8c:	b	27b70 <__assert_fail@plt+0x15ec4>
   27b90:	mov	r9, r0
   27b94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   27b98:	bl	1b22c <__assert_fail@plt+0x9580>
   27b9c:	b	27b74 <__assert_fail@plt+0x15ec8>
   27ba0:	mov	r9, r0
   27ba4:	b	27b74 <__assert_fail@plt+0x15ec8>
   27ba8:	push	{r4, r5, r6, r7, fp, lr}
   27bac:	add	fp, sp, #16
   27bb0:	mov	r4, r0
   27bb4:	ldr	r0, [r0, #36]	; 0x24
   27bb8:	mov	r5, #12
   27bbc:	cmn	r0, #-536870910	; 0xe0000002
   27bc0:	bhi	27da8 <__assert_fail@plt+0x160fc>
   27bc4:	ldr	r6, [r4, #48]	; 0x30
   27bc8:	ldr	r2, [r4, #80]	; 0x50
   27bcc:	cmp	r6, r0, lsl #1
   27bd0:	lslge	r6, r0, #1
   27bd4:	cmp	r6, r1
   27bd8:	movle	r6, r1
   27bdc:	cmp	r2, #2
   27be0:	blt	27c28 <__assert_fail@plt+0x15f7c>
   27be4:	cmn	r6, #-1073741823	; 0xc0000001
   27be8:	bhi	27da8 <__assert_fail@plt+0x160fc>
   27bec:	ldr	r0, [r4, #8]
   27bf0:	lsl	r7, r6, #2
   27bf4:	mov	r1, r7
   27bf8:	bl	1b388 <__assert_fail@plt+0x96dc>
   27bfc:	cmp	r0, #0
   27c00:	beq	27da8 <__assert_fail@plt+0x160fc>
   27c04:	str	r0, [r4, #8]
   27c08:	ldr	r0, [r4, #12]
   27c0c:	cmp	r0, #0
   27c10:	beq	27c28 <__assert_fail@plt+0x15f7c>
   27c14:	mov	r1, r7
   27c18:	bl	1b388 <__assert_fail@plt+0x96dc>
   27c1c:	cmp	r0, #0
   27c20:	beq	27da8 <__assert_fail@plt+0x160fc>
   27c24:	str	r0, [r4, #12]
   27c28:	ldrb	r0, [r4, #75]	; 0x4b
   27c2c:	cmp	r0, #0
   27c30:	beq	27c4c <__assert_fail@plt+0x15fa0>
   27c34:	ldr	r0, [r4, #4]
   27c38:	mov	r1, r6
   27c3c:	bl	1b388 <__assert_fail@plt+0x96dc>
   27c40:	cmp	r0, #0
   27c44:	beq	27da8 <__assert_fail@plt+0x160fc>
   27c48:	str	r0, [r4, #4]
   27c4c:	str	r6, [r4, #36]	; 0x24
   27c50:	ldr	r0, [r4, #100]	; 0x64
   27c54:	cmp	r0, #0
   27c58:	beq	27c74 <__assert_fail@plt+0x15fc8>
   27c5c:	mov	r1, #4
   27c60:	add	r1, r1, r6, lsl #2
   27c64:	bl	1b388 <__assert_fail@plt+0x96dc>
   27c68:	cmp	r0, #0
   27c6c:	beq	27da8 <__assert_fail@plt+0x160fc>
   27c70:	str	r0, [r4, #100]	; 0x64
   27c74:	ldrb	r1, [r4, #72]	; 0x48
   27c78:	ldr	r0, [r4, #80]	; 0x50
   27c7c:	cmp	r1, #0
   27c80:	beq	27ca0 <__assert_fail@plt+0x15ff4>
   27c84:	cmp	r0, #2
   27c88:	blt	27cb4 <__assert_fail@plt+0x16008>
   27c8c:	mov	r0, r4
   27c90:	bl	205b0 <__assert_fail@plt+0xe904>
   27c94:	cmp	r0, #0
   27c98:	popne	{r4, r5, r6, r7, fp, pc}
   27c9c:	b	27da4 <__assert_fail@plt+0x160f8>
   27ca0:	cmp	r0, #2
   27ca4:	blt	27d2c <__assert_fail@plt+0x16080>
   27ca8:	mov	r0, r4
   27cac:	bl	20c70 <__assert_fail@plt+0xefc4>
   27cb0:	b	27da4 <__assert_fail@plt+0x160f8>
   27cb4:	ldr	r6, [r4, #36]	; 0x24
   27cb8:	ldr	r0, [r4, #48]	; 0x30
   27cbc:	ldr	r5, [r4, #28]
   27cc0:	cmp	r6, r0
   27cc4:	movgt	r6, r0
   27cc8:	cmp	r5, r6
   27ccc:	bge	27d20 <__assert_fail@plt+0x16074>
   27cd0:	ldr	r1, [r4]
   27cd4:	ldr	r2, [r4, #24]
   27cd8:	ldr	r0, [r4, #64]	; 0x40
   27cdc:	add	r1, r1, r2
   27ce0:	cmp	r0, #0
   27ce4:	ldrb	r7, [r1, r5]
   27ce8:	ldrbne	r7, [r0, r7]
   27cec:	add	r0, r7, #128	; 0x80
   27cf0:	lsr	r0, r0, #7
   27cf4:	cmp	r0, #2
   27cf8:	bhi	27d08 <__assert_fail@plt+0x1605c>
   27cfc:	bl	11a6c <__ctype_toupper_loc@plt>
   27d00:	ldr	r0, [r0]
   27d04:	ldr	r7, [r0, r7, lsl #2]
   27d08:	ldr	r0, [r4, #4]
   27d0c:	strb	r7, [r0, r5]
   27d10:	add	r5, r5, #1
   27d14:	cmp	r5, r6
   27d18:	blt	27cd0 <__assert_fail@plt+0x16024>
   27d1c:	mov	r5, r6
   27d20:	str	r5, [r4, #28]
   27d24:	str	r5, [r4, #32]
   27d28:	b	27da4 <__assert_fail@plt+0x160f8>
   27d2c:	ldr	r2, [r4, #64]	; 0x40
   27d30:	cmp	r2, #0
   27d34:	beq	27da4 <__assert_fail@plt+0x160f8>
   27d38:	ldr	r0, [r4, #36]	; 0x24
   27d3c:	ldr	r3, [r4, #48]	; 0x30
   27d40:	ldr	r1, [r4, #28]
   27d44:	cmp	r0, r3
   27d48:	movgt	r0, r3
   27d4c:	cmp	r1, r0
   27d50:	bge	27d9c <__assert_fail@plt+0x160f0>
   27d54:	ldm	r4, {r3, r7}
   27d58:	ldr	r6, [r4, #24]
   27d5c:	add	r6, r6, r1
   27d60:	ldrb	r3, [r3, r6]
   27d64:	ldrb	r2, [r2, r3]
   27d68:	strb	r2, [r7, r1]
   27d6c:	b	27d8c <__assert_fail@plt+0x160e0>
   27d70:	ldm	r4, {r2, r3}
   27d74:	ldr	r7, [r4, #24]
   27d78:	ldr	r6, [r4, #64]	; 0x40
   27d7c:	add	r2, r2, r7
   27d80:	ldrb	r2, [r2, r1]
   27d84:	ldrb	r2, [r6, r2]
   27d88:	strb	r2, [r3, r1]
   27d8c:	add	r1, r1, #1
   27d90:	cmp	r1, r0
   27d94:	blt	27d70 <__assert_fail@plt+0x160c4>
   27d98:	mov	r1, r0
   27d9c:	str	r1, [r4, #28]
   27da0:	str	r1, [r4, #32]
   27da4:	mov	r5, #0
   27da8:	mov	r0, r5
   27dac:	pop	{r4, r5, r6, r7, fp, pc}
   27db0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   27db4:	add	fp, sp, #24
   27db8:	sub	sp, sp, #16
   27dbc:	mov	r9, r0
   27dc0:	mov	r4, r1
   27dc4:	ldr	r5, [r1, #40]	; 0x28
   27dc8:	ldr	r7, [r1, #84]	; 0x54
   27dcc:	ldr	r0, [r1, #100]	; 0x64
   27dd0:	ldr	r1, [r1, #104]	; 0x68
   27dd4:	mov	r6, r2
   27dd8:	cmp	r5, r1
   27ddc:	ble	27dec <__assert_fail@plt+0x16140>
   27de0:	str	r6, [r0, r5, lsl #2]
   27de4:	str	r5, [r4, #104]	; 0x68
   27de8:	b	27f20 <__assert_fail@plt+0x16274>
   27dec:	ldr	r1, [r0, r5, lsl #2]
   27df0:	cmp	r1, #0
   27df4:	beq	27e30 <__assert_fail@plt+0x16184>
   27df8:	ldr	r2, [r1, #40]	; 0x28
   27dfc:	cmp	r6, #0
   27e00:	beq	27e38 <__assert_fail@plt+0x1618c>
   27e04:	ldr	r8, [r6, #40]	; 0x28
   27e08:	mov	r0, sp
   27e0c:	mov	r1, r8
   27e10:	bl	27fc4 <__assert_fail@plt+0x16318>
   27e14:	cmp	r0, #0
   27e18:	str	r0, [r9]
   27e1c:	bne	27f8c <__assert_fail@plt+0x162e0>
   27e20:	ldr	r0, [r4, #40]	; 0x28
   27e24:	cmp	r0, #0
   27e28:	bgt	27e58 <__assert_fail@plt+0x161ac>
   27e2c:	b	27e94 <__assert_fail@plt+0x161e8>
   27e30:	str	r6, [r0, r5, lsl #2]
   27e34:	b	27f20 <__assert_fail@plt+0x16274>
   27e38:	ldr	r0, [r2, #8]
   27e3c:	vldr	d16, [r2]
   27e40:	mov	r8, #0
   27e44:	str	r0, [sp, #8]
   27e48:	mov	r0, r5
   27e4c:	vstr	d16, [sp]
   27e50:	cmp	r0, #0
   27e54:	ble	27e94 <__assert_fail@plt+0x161e8>
   27e58:	ldr	r2, [r4, #48]	; 0x30
   27e5c:	sub	r1, r0, #1
   27e60:	cmp	r2, r1
   27e64:	beq	27f94 <__assert_fail@plt+0x162e8>
   27e68:	ldr	r2, [r4, #80]	; 0x50
   27e6c:	cmp	r2, #2
   27e70:	blt	27e9c <__assert_fail@plt+0x161f0>
   27e74:	ldr	r1, [r4, #8]
   27e78:	sub	r1, r1, #4
   27e7c:	ldr	r6, [r1, r0, lsl #2]
   27e80:	cmn	r6, #1
   27e84:	bne	27ed0 <__assert_fail@plt+0x16224>
   27e88:	sub	r0, r0, #1
   27e8c:	cmp	r0, #0
   27e90:	bgt	27e7c <__assert_fail@plt+0x161d0>
   27e94:	ldr	r3, [r4, #60]	; 0x3c
   27e98:	b	27ef4 <__assert_fail@plt+0x16248>
   27e9c:	ldr	r0, [r4, #4]
   27ea0:	ldr	r2, [r4, #68]	; 0x44
   27ea4:	mov	r3, #1
   27ea8:	ldrb	r0, [r0, r1]
   27eac:	ubfx	r1, r0, #5, #3
   27eb0:	ldr	r1, [r2, r1, lsl #2]
   27eb4:	and	r2, r0, #31
   27eb8:	tst	r1, r3, lsl r2
   27ebc:	bne	27ef4 <__assert_fail@plt+0x16248>
   27ec0:	mov	r3, #0
   27ec4:	cmp	r0, #10
   27ec8:	beq	27ee8 <__assert_fail@plt+0x1623c>
   27ecc:	b	27ef4 <__assert_fail@plt+0x16248>
   27ed0:	ldrb	r0, [r4, #78]	; 0x4e
   27ed4:	cmp	r0, #0
   27ed8:	bne	27fa4 <__assert_fail@plt+0x162f8>
   27edc:	mov	r3, #0
   27ee0:	cmp	r6, #10
   27ee4:	bne	27ef4 <__assert_fail@plt+0x16248>
   27ee8:	ldrb	r3, [r4, #77]	; 0x4d
   27eec:	cmp	r3, #0
   27ef0:	movwne	r3, #2
   27ef4:	mov	r2, sp
   27ef8:	mov	r0, r9
   27efc:	mov	r1, r7
   27f00:	bl	260ec <__assert_fail@plt+0x14440>
   27f04:	mov	r6, r0
   27f08:	ldr	r0, [r4, #100]	; 0x64
   27f0c:	cmp	r8, #0
   27f10:	str	r6, [r0, r5, lsl #2]
   27f14:	beq	27f20 <__assert_fail@plt+0x16274>
   27f18:	ldr	r0, [sp, #8]
   27f1c:	bl	1b22c <__assert_fail@plt+0x9580>
   27f20:	cmp	r6, #0
   27f24:	ldrne	r0, [r7, #76]	; 0x4c
   27f28:	cmpne	r0, #0
   27f2c:	bne	27f3c <__assert_fail@plt+0x16290>
   27f30:	mov	r0, r6
   27f34:	sub	sp, fp, #24
   27f38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27f3c:	add	r7, r6, #4
   27f40:	mov	r0, r4
   27f44:	mov	r2, r5
   27f48:	mov	r1, r7
   27f4c:	bl	27120 <__assert_fail@plt+0x15474>
   27f50:	cmp	r0, #0
   27f54:	str	r0, [r9]
   27f58:	bne	27f8c <__assert_fail@plt+0x162e0>
   27f5c:	ldrb	r0, [r6, #52]	; 0x34
   27f60:	tst	r0, #64	; 0x40
   27f64:	beq	27f30 <__assert_fail@plt+0x16284>
   27f68:	mov	r0, r4
   27f6c:	mov	r1, r7
   27f70:	bl	2721c <__assert_fail@plt+0x15570>
   27f74:	str	r0, [r9]
   27f78:	cmp	r0, #0
   27f7c:	mov	r6, #0
   27f80:	ldreq	r0, [r4, #100]	; 0x64
   27f84:	ldreq	r6, [r0, r5, lsl #2]
   27f88:	b	27f30 <__assert_fail@plt+0x16284>
   27f8c:	mov	r6, #0
   27f90:	b	27f30 <__assert_fail@plt+0x16284>
   27f94:	ldr	r0, [r4, #88]	; 0x58
   27f98:	and	r0, r0, #2
   27f9c:	eor	r3, r0, #10
   27fa0:	b	27ef4 <__assert_fail@plt+0x16248>
   27fa4:	mov	r0, r6
   27fa8:	bl	11afc <iswalnum@plt>
   27fac:	mov	r3, #1
   27fb0:	cmp	r6, #95	; 0x5f
   27fb4:	beq	27ef4 <__assert_fail@plt+0x16248>
   27fb8:	cmp	r0, #0
   27fbc:	beq	27edc <__assert_fail@plt+0x16230>
   27fc0:	b	27ef4 <__assert_fail@plt+0x16248>
   27fc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fc8:	add	fp, sp, #28
   27fcc:	sub	sp, sp, #20
   27fd0:	mov	sl, r2
   27fd4:	cmp	r1, #0
   27fd8:	str	r0, [sp, #16]
   27fdc:	beq	28044 <__assert_fail@plt+0x16398>
   27fe0:	ldr	r0, [r1, #4]
   27fe4:	mov	r8, r1
   27fe8:	cmp	sl, #0
   27fec:	beq	28000 <__assert_fail@plt+0x16354>
   27ff0:	cmp	r0, #1
   27ff4:	ldrge	r1, [sl, #4]
   27ff8:	cmpge	r1, #1
   27ffc:	bge	280b8 <__assert_fail@plt+0x1640c>
   28000:	cmp	r0, #1
   28004:	blt	28044 <__assert_fail@plt+0x16398>
   28008:	ldr	r1, [sp, #16]
   2800c:	str	r0, [r1, #4]
   28010:	ldr	r1, [r8, #4]
   28014:	cmp	r1, #1
   28018:	blt	2809c <__assert_fail@plt+0x163f0>
   2801c:	ldr	r4, [sp, #16]
   28020:	str	r0, [r4]
   28024:	lsl	r0, r0, #2
   28028:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2802c:	cmp	r0, #0
   28030:	str	r0, [r4, #8]
   28034:	beq	2822c <__assert_fail@plt+0x16580>
   28038:	ldr	r2, [r8, #4]
   2803c:	ldr	r1, [r8, #8]
   28040:	b	28090 <__assert_fail@plt+0x163e4>
   28044:	cmp	sl, #0
   28048:	beq	2809c <__assert_fail@plt+0x163f0>
   2804c:	ldr	r0, [sl, #4]
   28050:	cmp	r0, #1
   28054:	blt	2809c <__assert_fail@plt+0x163f0>
   28058:	ldr	r1, [sp, #16]
   2805c:	str	r0, [r1, #4]
   28060:	ldr	r1, [sl, #4]
   28064:	cmp	r1, #1
   28068:	blt	2809c <__assert_fail@plt+0x163f0>
   2806c:	ldr	r4, [sp, #16]
   28070:	str	r0, [r4]
   28074:	lsl	r0, r0, #2
   28078:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2807c:	cmp	r0, #0
   28080:	str	r0, [r4, #8]
   28084:	beq	2822c <__assert_fail@plt+0x16580>
   28088:	ldr	r2, [sl, #4]
   2808c:	ldr	r1, [sl, #8]
   28090:	lsl	r2, r2, #2
   28094:	bl	118ec <memcpy@plt>
   28098:	b	28220 <__assert_fail@plt+0x16574>
   2809c:	ldr	r1, [sp, #16]
   280a0:	mov	r0, #0
   280a4:	str	r0, [r1]
   280a8:	str	r0, [r1, #4]
   280ac:	str	r0, [r1, #8]
   280b0:	sub	sp, fp, #28
   280b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280b8:	ldr	r4, [sp, #16]
   280bc:	add	r0, r1, r0
   280c0:	str	r0, [r4]
   280c4:	lsl	r0, r0, #2
   280c8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   280cc:	cmp	r0, #0
   280d0:	str	r0, [r4, #8]
   280d4:	beq	2823c <__assert_fail@plt+0x16590>
   280d8:	ldr	r9, [sl, #4]
   280dc:	ldr	lr, [r8, #4]
   280e0:	mov	r1, #0
   280e4:	mov	r7, #0
   280e8:	cmp	r9, #0
   280ec:	movwgt	r1, #1
   280f0:	cmp	lr, #1
   280f4:	blt	281c0 <__assert_fail@plt+0x16514>
   280f8:	mov	r2, #0
   280fc:	mov	ip, #0
   28100:	str	r2, [sp, #8]
   28104:	mov	r2, #0
   28108:	str	r2, [sp, #12]
   2810c:	mov	r2, #0
   28110:	ldr	r4, [sp, #12]
   28114:	mov	r7, ip
   28118:	tst	r1, #1
   2811c:	beq	281f0 <__assert_fail@plt+0x16544>
   28120:	ldr	r1, [sl, #8]
   28124:	ldr	r5, [r1, r7, lsl #2]
   28128:	ldr	r1, [r8, #8]
   2812c:	ldr	r3, [r1, r2, lsl #2]
   28130:	cmp	r3, r5
   28134:	ble	2815c <__assert_fail@plt+0x164b0>
   28138:	add	r7, r7, #1
   2813c:	mov	r1, #0
   28140:	str	r5, [r0, r4, lsl #2]
   28144:	add	r4, r4, #1
   28148:	cmp	r9, r7
   2814c:	movwgt	r1, #1
   28150:	cmp	lr, r2
   28154:	bgt	28118 <__assert_fail@plt+0x1646c>
   28158:	b	281c4 <__assert_fail@plt+0x16518>
   2815c:	str	r3, [r0, r4, lsl #2]
   28160:	ldr	r6, [sp, #8]
   28164:	add	r1, r7, #1
   28168:	mov	ip, r7
   2816c:	add	r2, r2, #1
   28170:	ldr	r9, [sl, #4]
   28174:	ldr	lr, [r8, #4]
   28178:	moveq	ip, r1
   2817c:	str	r1, [sp, #4]
   28180:	mov	r1, #0
   28184:	sub	r6, r6, #1
   28188:	cmp	r9, ip
   2818c:	str	r6, [sp, #8]
   28190:	add	r6, r4, #1
   28194:	movwgt	r1, #1
   28198:	cmp	lr, r2
   2819c:	str	r6, [sp, #12]
   281a0:	bgt	28110 <__assert_fail@plt+0x16464>
   281a4:	ldr	r2, [sp, #4]
   281a8:	cmp	r3, r5
   281ac:	add	r4, r4, #1
   281b0:	moveq	r7, r2
   281b4:	cmp	r1, #0
   281b8:	bne	281cc <__assert_fail@plt+0x16520>
   281bc:	b	28218 <__assert_fail@plt+0x1656c>
   281c0:	mov	r4, #0
   281c4:	cmp	r1, #0
   281c8:	beq	28218 <__assert_fail@plt+0x1656c>
   281cc:	ldr	r1, [sl, #8]
   281d0:	sub	r2, r9, r7
   281d4:	add	r0, r0, r4, lsl #2
   281d8:	lsl	r2, r2, #2
   281dc:	add	r1, r1, r7, lsl #2
   281e0:	bl	118ec <memcpy@plt>
   281e4:	sub	r0, r4, r7
   281e8:	add	r4, r0, r9
   281ec:	b	28218 <__assert_fail@plt+0x1656c>
   281f0:	ldr	r1, [r8, #8]
   281f4:	add	r0, r0, r4, lsl #2
   281f8:	add	r1, r1, r2, lsl #2
   281fc:	sub	r2, lr, r2
   28200:	lsl	r2, r2, #2
   28204:	bl	118ec <memcpy@plt>
   28208:	ldr	r0, [r8, #4]
   2820c:	ldr	r1, [sp, #8]
   28210:	add	r0, r0, r1
   28214:	add	r4, r0, r4
   28218:	ldr	r0, [sp, #16]
   2821c:	str	r4, [r0, #4]
   28220:	mov	r0, #0
   28224:	sub	sp, fp, #28
   28228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2822c:	ldr	r1, [sp, #16]
   28230:	mov	r0, #0
   28234:	str	r0, [r1]
   28238:	str	r0, [r1, #4]
   2823c:	mov	r0, #12
   28240:	sub	sp, fp, #28
   28244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2824c:	add	fp, sp, #28
   28250:	sub	sp, sp, #12
   28254:	mov	r6, r2
   28258:	mov	r7, r3
   2825c:	ldr	r2, [r2]
   28260:	ldr	r9, [fp, #8]
   28264:	mov	r4, r0
   28268:	mov	r0, #8
   2826c:	mov	r8, r1
   28270:	ldr	r3, [r6, #4]
   28274:	str	r0, [sp, #8]
   28278:	add	r1, r6, #8
   2827c:	mov	r0, r4
   28280:	stm	sp, {r7, r9}
   28284:	bl	2840c <__assert_fail@plt+0x16760>
   28288:	mov	r5, r0
   2828c:	cmp	r0, #0
   28290:	beq	282a0 <__assert_fail@plt+0x165f4>
   28294:	mov	r0, r5
   28298:	sub	sp, fp, #28
   2829c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282a0:	ldr	r0, [r4, #108]	; 0x6c
   282a4:	ldr	r1, [r4, #112]	; 0x70
   282a8:	ldr	sl, [r6, #4]
   282ac:	ldr	r5, [r8]
   282b0:	cmp	r0, r1
   282b4:	blt	28304 <__assert_fail@plt+0x16658>
   282b8:	ldr	r0, [r4, #116]	; 0x74
   282bc:	add	r1, r1, r1, lsl #1
   282c0:	lsl	r1, r1, #4
   282c4:	bl	1b388 <__assert_fail@plt+0x96dc>
   282c8:	cmp	r0, #0
   282cc:	beq	283fc <__assert_fail@plt+0x16750>
   282d0:	str	r0, [r4, #116]	; 0x74
   282d4:	ldr	r1, [r4, #108]	; 0x6c
   282d8:	ldr	r2, [r4, #112]	; 0x70
   282dc:	add	r1, r1, r1, lsl #1
   282e0:	add	r0, r0, r1, lsl #3
   282e4:	add	r1, r2, r2, lsl #1
   282e8:	lsl	r2, r1, #3
   282ec:	mov	r1, #0
   282f0:	bl	11b2c <memset@plt>
   282f4:	ldr	r1, [r4, #112]	; 0x70
   282f8:	ldr	r0, [r4, #108]	; 0x6c
   282fc:	lsl	r1, r1, #1
   28300:	str	r1, [r4, #112]	; 0x70
   28304:	ldr	r1, [r4, #116]	; 0x74
   28308:	cmp	r0, #1
   2830c:	blt	2832c <__assert_fail@plt+0x16680>
   28310:	sub	r2, r0, #1
   28314:	add	r2, r2, r2, lsl #1
   28318:	add	r2, r1, r2, lsl #3
   2831c:	ldr	r3, [r2, #4]
   28320:	cmp	r3, r9
   28324:	moveq	r3, #1
   28328:	strbeq	r3, [r2, #20]
   2832c:	add	r2, r0, r0, lsl #1
   28330:	cmp	sl, r5
   28334:	mov	r3, #0
   28338:	add	r0, r0, #1
   2833c:	str	r7, [r1, r2, lsl #3]!
   28340:	mov	r2, #0
   28344:	mvneq	r3, #0
   28348:	str	r9, [r1, #4]
   2834c:	str	r5, [r1, #8]
   28350:	str	sl, [r1, #12]
   28354:	str	r3, [r1, #16]
   28358:	str	r0, [r4, #108]	; 0x6c
   2835c:	strb	r2, [r1, #20]
   28360:	sub	r0, sl, r5
   28364:	ldr	r1, [r4, #120]	; 0x78
   28368:	cmp	r1, r0
   2836c:	strlt	r0, [r4, #120]	; 0x78
   28370:	ldr	r0, [r6, #4]
   28374:	ldr	r1, [r8]
   28378:	ldr	r7, [r4, #104]	; 0x68
   2837c:	add	r0, r0, r9
   28380:	sub	r6, r0, r1
   28384:	ldr	r0, [r4, #36]	; 0x24
   28388:	cmp	r0, r6
   2838c:	ldrle	r1, [r4, #48]	; 0x30
   28390:	cmple	r0, r1
   28394:	blt	283e0 <__assert_fail@plt+0x16734>
   28398:	ldr	r0, [r4, #28]
   2839c:	cmp	r0, r6
   283a0:	ldrle	r1, [r4, #48]	; 0x30
   283a4:	cmple	r0, r1
   283a8:	blt	283e0 <__assert_fail@plt+0x16734>
   283ac:	mov	r5, #0
   283b0:	cmp	r6, r7
   283b4:	ble	28294 <__assert_fail@plt+0x165e8>
   283b8:	sub	r0, r6, r7
   283bc:	mov	r1, #0
   283c0:	mov	r5, #0
   283c4:	lsl	r2, r0, #2
   283c8:	ldr	r0, [r4, #100]	; 0x64
   283cc:	add	r0, r0, r7, lsl #2
   283d0:	add	r0, r0, #4
   283d4:	bl	11b2c <memset@plt>
   283d8:	str	r6, [r4, #104]	; 0x68
   283dc:	b	28294 <__assert_fail@plt+0x165e8>
   283e0:	add	r1, r6, #1
   283e4:	mov	r0, r4
   283e8:	bl	27ba8 <__assert_fail@plt+0x15efc>
   283ec:	mov	r5, r0
   283f0:	cmp	r0, #0
   283f4:	bne	28294 <__assert_fail@plt+0x165e8>
   283f8:	b	283ac <__assert_fail@plt+0x16700>
   283fc:	ldr	r0, [r4, #116]	; 0x74
   28400:	bl	1b22c <__assert_fail@plt+0x9580>
   28404:	mov	r5, #12
   28408:	b	28294 <__assert_fail@plt+0x165e8>
   2840c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28410:	add	fp, sp, #28
   28414:	sub	sp, sp, #84	; 0x54
   28418:	ldr	sl, [r0, #84]	; 0x54
   2841c:	mov	r8, r2
   28420:	mov	r2, #0
   28424:	mov	r9, r3
   28428:	ldr	r3, [fp, #12]
   2842c:	str	r0, [sp, #40]	; 0x28
   28430:	str	r2, [fp, #-52]	; 0xffffffcc
   28434:	ldr	r5, [r1, #4]
   28438:	ldr	r2, [sl]
   2843c:	str	sl, [sp, #20]
   28440:	ldr	r2, [r2, r8, lsl #3]
   28444:	str	r2, [sp, #24]
   28448:	ldr	r2, [r0, #120]	; 0x78
   2844c:	add	r2, r2, r3
   28450:	cmp	r5, r2
   28454:	ble	28d28 <__assert_fail@plt+0x1707c>
   28458:	add	r4, r1, #8
   2845c:	ldr	r2, [r0, #40]	; 0x28
   28460:	ldr	r5, [r1]
   28464:	ldr	r3, [r0, #88]	; 0x58
   28468:	str	r1, [sp, #16]
   2846c:	str	r2, [sp, #12]
   28470:	ldr	r2, [r0, #100]	; 0x64
   28474:	cmp	r5, #0
   28478:	moveq	r5, r9
   2847c:	cmp	r5, #0
   28480:	str	r2, [sp, #8]
   28484:	ldr	r2, [r4]
   28488:	str	r2, [r0, #100]	; 0x64
   2848c:	str	r5, [r0, #40]	; 0x28
   28490:	ble	284d4 <__assert_fail@plt+0x16828>
   28494:	ldr	r2, [r0, #48]	; 0x30
   28498:	sub	r7, r5, #1
   2849c:	cmp	r2, r7
   284a0:	beq	28d98 <__assert_fail@plt+0x170ec>
   284a4:	ldr	r2, [r0, #80]	; 0x50
   284a8:	cmp	r2, #2
   284ac:	blt	28518 <__assert_fail@plt+0x1686c>
   284b0:	ldr	r2, [r0, #8]
   284b4:	mov	r3, r5
   284b8:	sub	r2, r2, #4
   284bc:	ldr	r6, [r2, r3, lsl #2]
   284c0:	cmn	r6, #1
   284c4:	bne	2854c <__assert_fail@plt+0x168a0>
   284c8:	sub	r3, r3, #1
   284cc:	cmp	r3, #0
   284d0:	bgt	284bc <__assert_fail@plt+0x16810>
   284d4:	ldr	r7, [r0, #60]	; 0x3c
   284d8:	cmp	r5, r9
   284dc:	beq	2857c <__assert_fail@plt+0x168d0>
   284e0:	ldr	r0, [sp, #40]	; 0x28
   284e4:	ldr	r0, [r0, #100]	; 0x64
   284e8:	ldr	r4, [r0, r5, lsl #2]
   284ec:	cmp	r4, #0
   284f0:	beq	28638 <__assert_fail@plt+0x1698c>
   284f4:	ldrb	r0, [r4, #52]	; 0x34
   284f8:	ldr	r8, [fp, #16]
   284fc:	tst	r0, #64	; 0x40
   28500:	bne	28650 <__assert_fail@plt+0x169a4>
   28504:	mov	r0, #0
   28508:	str	r0, [sp, #52]	; 0x34
   2850c:	str	r0, [sp, #48]	; 0x30
   28510:	str	r0, [sp, #56]	; 0x38
   28514:	b	2869c <__assert_fail@plt+0x169f0>
   28518:	ldr	r3, [r0, #4]
   2851c:	ldr	r2, [r0, #68]	; 0x44
   28520:	ldrb	r0, [r3, r7]
   28524:	mov	r7, #1
   28528:	ubfx	r1, r0, #5, #3
   2852c:	ldr	r1, [r2, r1, lsl #2]
   28530:	and	r2, r0, #31
   28534:	tst	r1, r7, lsl r2
   28538:	bne	28574 <__assert_fail@plt+0x168c8>
   2853c:	mov	r7, #0
   28540:	cmp	r0, #10
   28544:	beq	28564 <__assert_fail@plt+0x168b8>
   28548:	b	28574 <__assert_fail@plt+0x168c8>
   2854c:	ldrb	r0, [r0, #78]	; 0x4e
   28550:	cmp	r0, #0
   28554:	bne	28dd4 <__assert_fail@plt+0x17128>
   28558:	mov	r7, #0
   2855c:	cmp	r6, #10
   28560:	bne	28574 <__assert_fail@plt+0x168c8>
   28564:	ldr	r0, [sp, #40]	; 0x28
   28568:	ldrb	r7, [r0, #77]	; 0x4d
   2856c:	cmp	r7, #0
   28570:	movwne	r7, #2
   28574:	cmp	r5, r9
   28578:	bne	284e0 <__assert_fail@plt+0x16834>
   2857c:	mov	r0, #1
   28580:	str	r0, [sp, #52]	; 0x34
   28584:	str	r0, [sp, #48]	; 0x30
   28588:	mov	r0, #4
   2858c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   28590:	cmp	r0, #0
   28594:	str	r0, [sp, #56]	; 0x38
   28598:	beq	28dbc <__assert_fail@plt+0x17110>
   2859c:	str	r8, [r0]
   285a0:	ldr	r8, [fp, #16]
   285a4:	ldr	r2, [sp, #24]
   285a8:	mov	r0, #0
   285ac:	add	r1, sp, #48	; 0x30
   285b0:	str	r0, [fp, #-52]	; 0xffffffcc
   285b4:	mov	r0, sl
   285b8:	mov	r3, r8
   285bc:	bl	28df4 <__assert_fail@plt+0x17148>
   285c0:	cmp	r0, #0
   285c4:	str	r0, [fp, #-52]	; 0xffffffcc
   285c8:	bne	28dac <__assert_fail@plt+0x17100>
   285cc:	ldr	r0, [sp, #52]	; 0x34
   285d0:	cmp	r0, #0
   285d4:	beq	285fc <__assert_fail@plt+0x16950>
   285d8:	ldr	r0, [sp, #40]	; 0x28
   285dc:	ldr	r3, [sp, #24]
   285e0:	add	r1, sp, #48	; 0x30
   285e4:	mov	r2, r5
   285e8:	str	r8, [sp]
   285ec:	bl	28f30 <__assert_fail@plt+0x17284>
   285f0:	cmp	r0, #0
   285f4:	str	r0, [fp, #-52]	; 0xffffffcc
   285f8:	bne	28dac <__assert_fail@plt+0x17100>
   285fc:	ldr	r1, [sp, #20]
   28600:	sub	r0, fp, #52	; 0x34
   28604:	add	r2, sp, #48	; 0x30
   28608:	mov	r3, r7
   2860c:	bl	260ec <__assert_fail@plt+0x14440>
   28610:	mov	r4, r0
   28614:	cmp	r0, #0
   28618:	bne	28628 <__assert_fail@plt+0x1697c>
   2861c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   28620:	cmp	r0, #0
   28624:	bne	28d18 <__assert_fail@plt+0x1706c>
   28628:	ldr	r0, [sp, #40]	; 0x28
   2862c:	ldr	r0, [r0, #100]	; 0x64
   28630:	str	r4, [r0, r5, lsl #2]
   28634:	b	2869c <__assert_fail@plt+0x169f0>
   28638:	ldr	r8, [fp, #16]
   2863c:	mov	r4, #0
   28640:	str	r4, [sp, #52]	; 0x34
   28644:	str	r4, [sp, #48]	; 0x30
   28648:	str	r4, [sp, #56]	; 0x38
   2864c:	b	2869c <__assert_fail@plt+0x169f0>
   28650:	ldr	r0, [r4, #8]
   28654:	cmp	r0, #1
   28658:	str	r0, [sp, #52]	; 0x34
   2865c:	blt	28cc4 <__assert_fail@plt+0x17018>
   28660:	str	r0, [sp, #48]	; 0x30
   28664:	lsl	r0, r0, #2
   28668:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2866c:	cmp	r0, #0
   28670:	str	r0, [sp, #56]	; 0x38
   28674:	beq	28dbc <__assert_fail@plt+0x17110>
   28678:	ldr	r2, [r4, #8]
   2867c:	ldr	r1, [r4, #12]
   28680:	lsl	r2, r2, #2
   28684:	bl	118ec <memcpy@plt>
   28688:	ldrb	r0, [r4, #52]	; 0x34
   2868c:	mov	r1, #0
   28690:	str	r1, [fp, #-52]	; 0xffffffcc
   28694:	tst	r0, #64	; 0x40
   28698:	bne	285d8 <__assert_fail@plt+0x1692c>
   2869c:	str	r4, [sp, #36]	; 0x24
   286a0:	ldr	r4, [fp, #12]
   286a4:	mov	r9, r4
   286a8:	cmp	r5, r4
   286ac:	bge	28c14 <__assert_fail@plt+0x16f68>
   286b0:	ldr	r7, [sp, #40]	; 0x28
   286b4:	ldr	r4, [sp, #20]
   286b8:	ldr	sl, [sp, #24]
   286bc:	mov	r0, #0
   286c0:	str	r0, [sp, #32]
   286c4:	ldr	r0, [r7, #120]	; 0x78
   286c8:	ldr	r1, [sp, #32]
   286cc:	cmp	r1, r0
   286d0:	bgt	28c18 <__assert_fail@plt+0x16f6c>
   286d4:	mov	r0, #0
   286d8:	add	r1, r5, #1
   286dc:	str	r0, [sp, #52]	; 0x34
   286e0:	str	r1, [sp, #28]
   286e4:	ldr	r0, [r7, #100]	; 0x64
   286e8:	ldr	r0, [r0, r1, lsl #2]
   286ec:	cmp	r0, #0
   286f0:	beq	2870c <__assert_fail@plt+0x16a60>
   286f4:	add	r1, r0, #4
   286f8:	add	r0, sp, #48	; 0x30
   286fc:	bl	25e20 <__assert_fail@plt+0x14174>
   28700:	cmp	r0, #0
   28704:	str	r0, [fp, #-52]	; 0xffffffcc
   28708:	bne	28d18 <__assert_fail@plt+0x1706c>
   2870c:	ldr	r1, [sp, #36]	; 0x24
   28710:	cmp	r1, #0
   28714:	beq	28a88 <__assert_fail@plt+0x16ddc>
   28718:	mov	r0, #0
   2871c:	ldr	r8, [r7, #84]	; 0x54
   28720:	str	r0, [fp, #-32]	; 0xffffffe0
   28724:	str	r0, [fp, #-44]	; 0xffffffd4
   28728:	str	r0, [fp, #-48]	; 0xffffffd0
   2872c:	str	r0, [fp, #-40]	; 0xffffffd8
   28730:	ldr	r1, [r1, #20]
   28734:	cmp	r1, #1
   28738:	blt	28a78 <__assert_fail@plt+0x16dcc>
   2873c:	str	r5, [sp, #44]	; 0x2c
   28740:	ldr	r5, [sp, #36]	; 0x24
   28744:	mov	r4, #0
   28748:	b	288bc <__assert_fail@plt+0x16c10>
   2874c:	cmp	r2, r1
   28750:	bne	2877c <__assert_fail@plt+0x16ad0>
   28754:	lsl	r0, r2, #1
   28758:	lsl	r1, r2, #3
   2875c:	str	r0, [sp, #48]	; 0x30
   28760:	ldr	r0, [sp, #56]	; 0x38
   28764:	bl	1b388 <__assert_fail@plt+0x96dc>
   28768:	cmp	r0, #0
   2876c:	beq	28ce8 <__assert_fail@plt+0x1703c>
   28770:	str	r0, [sp, #56]	; 0x38
   28774:	ldr	r1, [sp, #52]	; 0x34
   28778:	b	28780 <__assert_fail@plt+0x16ad4>
   2877c:	ldr	r0, [sp, #56]	; 0x38
   28780:	ldr	r2, [r0]
   28784:	cmp	r2, r6
   28788:	ble	287c4 <__assert_fail@plt+0x16b18>
   2878c:	cmp	r1, #1
   28790:	blt	287f4 <__assert_fail@plt+0x16b48>
   28794:	add	r2, r0, r1, lsl #2
   28798:	add	r1, r1, #1
   2879c:	mov	r3, r2
   287a0:	ldr	r7, [r3, #-4]!
   287a4:	sub	r1, r1, #1
   287a8:	cmp	r1, #1
   287ac:	str	r7, [r2]
   287b0:	mov	r2, r3
   287b4:	bgt	287a0 <__assert_fail@plt+0x16af4>
   287b8:	ldr	r7, [sp, #40]	; 0x28
   287bc:	sub	r1, r1, #1
   287c0:	b	287f4 <__assert_fail@plt+0x16b48>
   287c4:	add	r2, r0, r1, lsl #2
   287c8:	ldr	r3, [r2, #-4]
   287cc:	cmp	r3, r6
   287d0:	ble	287f4 <__assert_fail@plt+0x16b48>
   287d4:	sub	r1, r1, #2
   287d8:	str	r3, [r2]
   287dc:	sub	r1, r1, #1
   287e0:	ldr	r3, [r2, #-8]
   287e4:	sub	r2, r2, #4
   287e8:	cmp	r3, r6
   287ec:	bgt	287d8 <__assert_fail@plt+0x16b2c>
   287f0:	add	r1, r1, #2
   287f4:	str	r6, [r0, r1, lsl #2]
   287f8:	b	28a1c <__assert_fail@plt+0x16d70>
   287fc:	cmp	r2, r1
   28800:	bne	2882c <__assert_fail@plt+0x16b80>
   28804:	lsl	r0, r2, #1
   28808:	lsl	r1, r2, #3
   2880c:	str	r0, [fp, #-48]	; 0xffffffd0
   28810:	ldr	r0, [fp, #-40]	; 0xffffffd8
   28814:	bl	1b388 <__assert_fail@plt+0x96dc>
   28818:	cmp	r0, #0
   2881c:	beq	28ce8 <__assert_fail@plt+0x1703c>
   28820:	str	r0, [fp, #-40]	; 0xffffffd8
   28824:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28828:	b	28830 <__assert_fail@plt+0x16b84>
   2882c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   28830:	ldr	r2, [r0]
   28834:	cmp	r2, r5
   28838:	ble	28874 <__assert_fail@plt+0x16bc8>
   2883c:	cmp	r1, #1
   28840:	blt	2886c <__assert_fail@plt+0x16bc0>
   28844:	add	r2, r0, r1, lsl #2
   28848:	add	r1, r1, #1
   2884c:	mov	r3, r2
   28850:	ldr	r7, [r3, #-4]!
   28854:	sub	r1, r1, #1
   28858:	cmp	r1, #1
   2885c:	str	r7, [r2]
   28860:	mov	r2, r3
   28864:	bgt	28850 <__assert_fail@plt+0x16ba4>
   28868:	sub	r1, r1, #1
   2886c:	ldr	r7, [sp, #40]	; 0x28
   28870:	b	288a8 <__assert_fail@plt+0x16bfc>
   28874:	add	r2, r0, r1, lsl #2
   28878:	ldr	r7, [sp, #40]	; 0x28
   2887c:	ldr	r3, [r2, #-4]
   28880:	cmp	r3, r5
   28884:	ble	288a8 <__assert_fail@plt+0x16bfc>
   28888:	sub	r1, r1, #2
   2888c:	str	r3, [r2]
   28890:	sub	r1, r1, #1
   28894:	ldr	r3, [r2, #-8]
   28898:	sub	r2, r2, #4
   2889c:	cmp	r3, r5
   288a0:	bgt	2888c <__assert_fail@plt+0x16be0>
   288a4:	add	r1, r1, #2
   288a8:	str	r5, [r0, r1, lsl #2]
   288ac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   288b0:	add	r0, r0, #1
   288b4:	str	r0, [fp, #-44]	; 0xffffffd4
   288b8:	b	28994 <__assert_fail@plt+0x16ce8>
   288bc:	ldr	r0, [r5, #24]
   288c0:	ldr	sl, [r0, r4, lsl #2]
   288c4:	ldr	r0, [r8]
   288c8:	add	r1, r0, sl, lsl #3
   288cc:	ldrb	r1, [r1, #6]
   288d0:	tst	r1, #16
   288d4:	beq	289dc <__assert_fail@plt+0x16d30>
   288d8:	ldr	r5, [sp, #44]	; 0x2c
   288dc:	mov	r0, r8
   288e0:	mov	r1, sl
   288e4:	mov	r2, r7
   288e8:	mov	r3, r5
   288ec:	bl	29840 <__assert_fail@plt+0x17b94>
   288f0:	mov	r9, r0
   288f4:	cmp	r0, #2
   288f8:	blt	289c8 <__assert_fail@plt+0x16d1c>
   288fc:	ldr	r0, [sp, #40]	; 0x28
   28900:	ldr	r1, [r8, #12]
   28904:	add	r6, r9, r5
   28908:	ldr	r0, [r0, #100]	; 0x64
   2890c:	ldr	r5, [r1, sl, lsl #2]
   28910:	mov	r1, #0
   28914:	ldr	r0, [r0, r6, lsl #2]
   28918:	str	r1, [fp, #-44]	; 0xffffffd4
   2891c:	cmp	r0, #0
   28920:	beq	2893c <__assert_fail@plt+0x16c90>
   28924:	add	r1, r0, #4
   28928:	sub	r0, fp, #48	; 0x30
   2892c:	bl	25e20 <__assert_fail@plt+0x14174>
   28930:	cmp	r0, #0
   28934:	str	r0, [fp, #-32]	; 0xffffffe0
   28938:	bne	28cf0 <__assert_fail@plt+0x17044>
   2893c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   28940:	cmp	r2, #0
   28944:	beq	2896c <__assert_fail@plt+0x16cc0>
   28948:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2894c:	cmp	r1, #0
   28950:	bne	287fc <__assert_fail@plt+0x16b50>
   28954:	ldr	r0, [fp, #-40]	; 0xffffffd8
   28958:	str	r5, [r0]
   2895c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   28960:	add	r0, r0, #1
   28964:	str	r0, [fp, #-44]	; 0xffffffd4
   28968:	b	28990 <__assert_fail@plt+0x16ce4>
   2896c:	mov	r0, #1
   28970:	str	r0, [fp, #-44]	; 0xffffffd4
   28974:	str	r0, [fp, #-48]	; 0xffffffd0
   28978:	mov	r0, #4
   2897c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   28980:	cmp	r0, #0
   28984:	str	r0, [fp, #-40]	; 0xffffffd8
   28988:	beq	28d00 <__assert_fail@plt+0x17054>
   2898c:	str	r5, [r0]
   28990:	ldr	r7, [sp, #40]	; 0x28
   28994:	sub	r0, fp, #32
   28998:	mov	r1, r8
   2899c:	sub	r2, fp, #48	; 0x30
   289a0:	bl	295b0 <__assert_fail@plt+0x17904>
   289a4:	ldr	r1, [r7, #100]	; 0x64
   289a8:	str	r0, [r1, r6, lsl #2]
   289ac:	ldr	r0, [r7, #100]	; 0x64
   289b0:	ldr	r0, [r0, r6, lsl #2]
   289b4:	cmp	r0, #0
   289b8:	bne	289c8 <__assert_fail@plt+0x16d1c>
   289bc:	ldr	r7, [fp, #-32]	; 0xffffffe0
   289c0:	cmp	r7, #0
   289c4:	bne	28cf4 <__assert_fail@plt+0x17048>
   289c8:	ldr	r7, [sp, #40]	; 0x28
   289cc:	ldr	r5, [sp, #36]	; 0x24
   289d0:	cmp	r9, #0
   289d4:	bne	289f4 <__assert_fail@plt+0x16d48>
   289d8:	ldr	r0, [r8]
   289dc:	ldr	r2, [sp, #44]	; 0x2c
   289e0:	add	r1, r0, sl, lsl #3
   289e4:	mov	r0, r7
   289e8:	bl	29b34 <__assert_fail@plt+0x17e88>
   289ec:	cmp	r0, #0
   289f0:	beq	28a50 <__assert_fail@plt+0x16da4>
   289f4:	ldr	r0, [r8, #12]
   289f8:	ldr	r2, [sp, #48]	; 0x30
   289fc:	ldr	r6, [r0, sl, lsl #2]
   28a00:	cmp	r2, #0
   28a04:	beq	28a2c <__assert_fail@plt+0x16d80>
   28a08:	ldr	r1, [sp, #52]	; 0x34
   28a0c:	cmp	r1, #0
   28a10:	bne	2874c <__assert_fail@plt+0x16aa0>
   28a14:	ldr	r0, [sp, #56]	; 0x38
   28a18:	str	r6, [r0]
   28a1c:	ldr	r0, [sp, #52]	; 0x34
   28a20:	add	r0, r0, #1
   28a24:	str	r0, [sp, #52]	; 0x34
   28a28:	b	28a50 <__assert_fail@plt+0x16da4>
   28a2c:	mov	r0, #1
   28a30:	str	r0, [sp, #52]	; 0x34
   28a34:	str	r0, [sp, #48]	; 0x30
   28a38:	mov	r0, #4
   28a3c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   28a40:	cmp	r0, #0
   28a44:	str	r0, [sp, #56]	; 0x38
   28a48:	beq	28cdc <__assert_fail@plt+0x17030>
   28a4c:	str	r6, [r0]
   28a50:	ldr	r0, [r5, #20]
   28a54:	add	r4, r4, #1
   28a58:	cmp	r4, r0
   28a5c:	blt	288bc <__assert_fail@plt+0x16c10>
   28a60:	ldr	r4, [fp, #12]
   28a64:	ldr	r0, [fp, #-40]	; 0xffffffd8
   28a68:	ldr	sl, [sp, #24]
   28a6c:	ldr	r5, [sp, #44]	; 0x2c
   28a70:	mov	r9, r4
   28a74:	ldr	r4, [sp, #20]
   28a78:	bl	1b22c <__assert_fail@plt+0x9580>
   28a7c:	ldr	r8, [fp, #16]
   28a80:	mov	r0, #0
   28a84:	str	r0, [fp, #-52]	; 0xffffffcc
   28a88:	ldr	r0, [sp, #52]	; 0x34
   28a8c:	cmp	r0, #0
   28a90:	beq	28adc <__assert_fail@plt+0x16e30>
   28a94:	add	r6, sp, #48	; 0x30
   28a98:	mov	r0, r4
   28a9c:	mov	r2, sl
   28aa0:	mov	r3, r8
   28aa4:	mov	r1, r6
   28aa8:	bl	28df4 <__assert_fail@plt+0x17148>
   28aac:	cmp	r0, #0
   28ab0:	str	r0, [fp, #-52]	; 0xffffffcc
   28ab4:	bne	28d18 <__assert_fail@plt+0x1706c>
   28ab8:	ldr	r2, [sp, #28]
   28abc:	mov	r0, r7
   28ac0:	mov	r1, r6
   28ac4:	mov	r3, sl
   28ac8:	str	r8, [sp]
   28acc:	bl	28f30 <__assert_fail@plt+0x17284>
   28ad0:	cmp	r0, #0
   28ad4:	str	r0, [fp, #-52]	; 0xffffffcc
   28ad8:	bne	28d18 <__assert_fail@plt+0x1706c>
   28adc:	cmn	r5, #1
   28ae0:	ble	28b1c <__assert_fail@plt+0x16e70>
   28ae4:	ldr	r0, [r7, #48]	; 0x30
   28ae8:	cmp	r0, r5
   28aec:	beq	28be0 <__assert_fail@plt+0x16f34>
   28af0:	ldr	r0, [r7, #80]	; 0x50
   28af4:	cmp	r0, #2
   28af8:	blt	28b28 <__assert_fail@plt+0x16e7c>
   28afc:	ldr	r0, [r7, #8]
   28b00:	ldr	r6, [r0, r5, lsl #2]
   28b04:	cmn	r6, #1
   28b08:	bne	28b60 <__assert_fail@plt+0x16eb4>
   28b0c:	sub	r1, r5, #1
   28b10:	cmp	r5, #0
   28b14:	mov	r5, r1
   28b18:	bgt	28b00 <__assert_fail@plt+0x16e54>
   28b1c:	ldr	r3, [r7, #60]	; 0x3c
   28b20:	add	r5, sp, #48	; 0x30
   28b24:	b	28b88 <__assert_fail@plt+0x16edc>
   28b28:	ldr	r0, [r7, #4]
   28b2c:	ldr	r1, [r7, #68]	; 0x44
   28b30:	mov	r3, #1
   28b34:	ldrb	r0, [r0, r5]
   28b38:	add	r5, sp, #48	; 0x30
   28b3c:	ubfx	r2, r0, #5, #3
   28b40:	ldr	r1, [r1, r2, lsl #2]
   28b44:	and	r2, r0, #31
   28b48:	tst	r1, r3, lsl r2
   28b4c:	bne	28b88 <__assert_fail@plt+0x16edc>
   28b50:	mov	r3, #0
   28b54:	cmp	r0, #10
   28b58:	beq	28b7c <__assert_fail@plt+0x16ed0>
   28b5c:	b	28b88 <__assert_fail@plt+0x16edc>
   28b60:	ldrb	r0, [r7, #78]	; 0x4e
   28b64:	add	r5, sp, #48	; 0x30
   28b68:	cmp	r0, #0
   28b6c:	bne	28bf4 <__assert_fail@plt+0x16f48>
   28b70:	mov	r3, #0
   28b74:	cmp	r6, #10
   28b78:	bne	28b88 <__assert_fail@plt+0x16edc>
   28b7c:	ldrb	r3, [r7, #77]	; 0x4d
   28b80:	cmp	r3, #0
   28b84:	movwne	r3, #2
   28b88:	sub	r0, fp, #52	; 0x34
   28b8c:	mov	r1, r4
   28b90:	mov	r2, r5
   28b94:	bl	260ec <__assert_fail@plt+0x14440>
   28b98:	cmp	r0, #0
   28b9c:	str	r0, [sp, #36]	; 0x24
   28ba0:	bne	28bb0 <__assert_fail@plt+0x16f04>
   28ba4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   28ba8:	cmp	r0, #0
   28bac:	bne	28d18 <__assert_fail@plt+0x1706c>
   28bb0:	ldr	r1, [sp, #28]
   28bb4:	ldr	r2, [sp, #36]	; 0x24
   28bb8:	ldr	r0, [r7, #100]	; 0x64
   28bbc:	str	r2, [r0, r1, lsl #2]
   28bc0:	cmp	r2, #0
   28bc4:	ldr	r2, [sp, #32]
   28bc8:	mov	r0, #0
   28bcc:	mov	r5, r1
   28bd0:	addeq	r0, r2, #1
   28bd4:	cmp	r1, r9
   28bd8:	blt	286c0 <__assert_fail@plt+0x16a14>
   28bdc:	b	28c1c <__assert_fail@plt+0x16f70>
   28be0:	ldr	r0, [r7, #88]	; 0x58
   28be4:	add	r5, sp, #48	; 0x30
   28be8:	and	r0, r0, #2
   28bec:	eor	r3, r0, #10
   28bf0:	b	28b88 <__assert_fail@plt+0x16edc>
   28bf4:	mov	r0, r6
   28bf8:	bl	11afc <iswalnum@plt>
   28bfc:	mov	r3, #1
   28c00:	cmp	r6, #95	; 0x5f
   28c04:	beq	28b88 <__assert_fail@plt+0x16edc>
   28c08:	cmp	r0, #0
   28c0c:	beq	28b70 <__assert_fail@plt+0x16ec4>
   28c10:	b	28b88 <__assert_fail@plt+0x16edc>
   28c14:	ldr	r7, [sp, #40]	; 0x28
   28c18:	mov	r1, r5
   28c1c:	ldr	r0, [sp, #56]	; 0x38
   28c20:	mov	r4, r1
   28c24:	bl	1b22c <__assert_fail@plt+0x9580>
   28c28:	ldr	r0, [r7, #100]	; 0x64
   28c2c:	mov	sl, #1
   28c30:	ldr	r1, [r0, r9, lsl #2]
   28c34:	ldr	r0, [sp, #16]
   28c38:	str	r4, [r0]
   28c3c:	ldr	r0, [sp, #12]
   28c40:	cmp	r1, #0
   28c44:	addne	r1, r1, #4
   28c48:	str	r0, [r7, #40]	; 0x28
   28c4c:	ldr	r0, [sp, #8]
   28c50:	str	r0, [r7, #100]	; 0x64
   28c54:	beq	28cb8 <__assert_fail@plt+0x1700c>
   28c58:	ldr	r2, [r1, #4]
   28c5c:	cmp	r2, #1
   28c60:	blt	28cb4 <__assert_fail@plt+0x17008>
   28c64:	ldr	r0, [fp, #8]
   28c68:	ldr	r1, [r1, #8]
   28c6c:	subs	r2, r2, #1
   28c70:	mov	sl, #0
   28c74:	mov	r3, #0
   28c78:	beq	28ca4 <__assert_fail@plt+0x16ff8>
   28c7c:	mov	r3, #0
   28c80:	mov	r7, #1
   28c84:	add	r5, r3, r2
   28c88:	lsr	r4, r5, #1
   28c8c:	ldr	r6, [r1, r4, lsl #2]
   28c90:	cmp	r6, r0
   28c94:	movge	r2, r4
   28c98:	addlt	r3, r7, r5, lsr #1
   28c9c:	cmp	r3, r2
   28ca0:	bcc	28c84 <__assert_fail@plt+0x16fd8>
   28ca4:	ldr	r1, [r1, r3, lsl #2]
   28ca8:	cmp	r1, r0
   28cac:	movne	sl, #1
   28cb0:	b	28cb8 <__assert_fail@plt+0x1700c>
   28cb4:	mov	sl, #1
   28cb8:	mov	r0, sl
   28cbc:	sub	sp, fp, #28
   28cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28cc4:	mov	r0, #0
   28cc8:	str	r0, [sp, #52]	; 0x34
   28ccc:	str	r0, [sp, #48]	; 0x30
   28cd0:	str	r0, [sp, #56]	; 0x38
   28cd4:	str	r0, [fp, #-52]	; 0xffffffcc
   28cd8:	b	285fc <__assert_fail@plt+0x16950>
   28cdc:	mov	r0, #0
   28ce0:	str	r0, [sp, #48]	; 0x30
   28ce4:	str	r0, [sp, #52]	; 0x34
   28ce8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   28cec:	b	28d0c <__assert_fail@plt+0x17060>
   28cf0:	mov	r7, r0
   28cf4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   28cf8:	bl	1b22c <__assert_fail@plt+0x9580>
   28cfc:	b	28d14 <__assert_fail@plt+0x17068>
   28d00:	mov	r0, #0
   28d04:	str	r0, [fp, #-48]	; 0xffffffd0
   28d08:	str	r0, [fp, #-44]	; 0xffffffd4
   28d0c:	bl	1b22c <__assert_fail@plt+0x9580>
   28d10:	mov	r7, #12
   28d14:	str	r7, [fp, #-52]	; 0xffffffcc
   28d18:	ldr	r0, [sp, #56]	; 0x38
   28d1c:	bl	1b22c <__assert_fail@plt+0x9580>
   28d20:	ldr	sl, [fp, #-52]	; 0xffffffcc
   28d24:	b	28cb8 <__assert_fail@plt+0x1700c>
   28d28:	mov	r6, r1
   28d2c:	mvn	r1, #-2147483648	; 0x80000000
   28d30:	mov	sl, #12
   28d34:	sub	r1, r1, r5
   28d38:	cmp	r1, r2
   28d3c:	ble	28cb8 <__assert_fail@plt+0x1700c>
   28d40:	add	r0, r2, #1
   28d44:	add	r7, r0, r5
   28d48:	str	r0, [sp, #44]	; 0x2c
   28d4c:	cmn	r7, #-1073741823	; 0xc0000001
   28d50:	bhi	28cb8 <__assert_fail@plt+0x1700c>
   28d54:	mov	r4, r6
   28d58:	lsl	r1, r7, #2
   28d5c:	ldr	r0, [r4, #8]!
   28d60:	bl	1b388 <__assert_fail@plt+0x96dc>
   28d64:	cmp	r0, #0
   28d68:	beq	28cb8 <__assert_fail@plt+0x1700c>
   28d6c:	ldr	r1, [sp, #44]	; 0x2c
   28d70:	str	r7, [r6, #4]
   28d74:	str	r0, [r6, #8]
   28d78:	add	r0, r0, r5, lsl #2
   28d7c:	lsl	r2, r1, #2
   28d80:	mov	r1, #0
   28d84:	bl	11b2c <memset@plt>
   28d88:	ldr	r0, [sp, #40]	; 0x28
   28d8c:	ldr	sl, [sp, #20]
   28d90:	mov	r1, r6
   28d94:	b	2845c <__assert_fail@plt+0x167b0>
   28d98:	and	r0, r3, #2
   28d9c:	eor	r7, r0, #10
   28da0:	cmp	r5, r9
   28da4:	beq	2857c <__assert_fail@plt+0x168d0>
   28da8:	b	284e0 <__assert_fail@plt+0x16834>
   28dac:	mov	sl, r0
   28db0:	ldr	r0, [sp, #56]	; 0x38
   28db4:	bl	1b22c <__assert_fail@plt+0x9580>
   28db8:	b	28cb8 <__assert_fail@plt+0x1700c>
   28dbc:	mov	r0, #0
   28dc0:	mov	sl, #12
   28dc4:	str	r0, [sp, #48]	; 0x30
   28dc8:	str	r0, [sp, #52]	; 0x34
   28dcc:	str	sl, [fp, #-52]	; 0xffffffcc
   28dd0:	b	28cb8 <__assert_fail@plt+0x1700c>
   28dd4:	mov	r0, r6
   28dd8:	bl	11afc <iswalnum@plt>
   28ddc:	mov	r7, #1
   28de0:	cmp	r6, #95	; 0x5f
   28de4:	beq	28574 <__assert_fail@plt+0x168c8>
   28de8:	cmp	r0, #0
   28dec:	beq	28558 <__assert_fail@plt+0x168ac>
   28df0:	b	28574 <__assert_fail@plt+0x168c8>
   28df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28df8:	add	fp, sp, #28
   28dfc:	sub	sp, sp, #28
   28e00:	str	r0, [sp, #12]
   28e04:	ldr	r0, [r1, #4]
   28e08:	mov	r4, r1
   28e0c:	mov	r1, #0
   28e10:	mov	sl, r3
   28e14:	mov	r8, r2
   28e18:	str	r1, [sp, #20]
   28e1c:	str	r0, [sp, #16]
   28e20:	lsl	r0, r0, #2
   28e24:	bl	1b2f8 <__assert_fail@plt+0x964c>
   28e28:	cmp	r0, #0
   28e2c:	str	r0, [sp, #24]
   28e30:	beq	28f28 <__assert_fail@plt+0x1727c>
   28e34:	ldr	r0, [r4, #4]
   28e38:	cmp	r0, #1
   28e3c:	blt	28f00 <__assert_fail@plt+0x17254>
   28e40:	mov	r9, #0
   28e44:	str	r4, [sp, #8]
   28e48:	ldr	r0, [r4, #8]
   28e4c:	ldr	r1, [sp, #12]
   28e50:	ldr	r2, [r0, r9, lsl #2]
   28e54:	ldr	r1, [r1, #24]
   28e58:	add	r0, r2, r2, lsl #1
   28e5c:	add	r1, r1, r0, lsl #2
   28e60:	ldr	r0, [r1, #4]
   28e64:	cmp	r0, #1
   28e68:	blt	28ea4 <__assert_fail@plt+0x171f8>
   28e6c:	ldr	r7, [sp, #12]
   28e70:	ldr	r3, [r1, #8]
   28e74:	mov	r6, #0
   28e78:	ldr	r7, [r7]
   28e7c:	ldr	r4, [r3, r6, lsl #2]
   28e80:	add	r5, r7, r4, lsl #3
   28e84:	ldrb	r5, [r5, #4]
   28e88:	cmp	r5, sl
   28e8c:	ldreq	r5, [r7, r4, lsl #3]
   28e90:	cmpeq	r5, r8
   28e94:	beq	28ecc <__assert_fail@plt+0x17220>
   28e98:	add	r6, r6, #1
   28e9c:	cmp	r6, r0
   28ea0:	blt	28e7c <__assert_fail@plt+0x171d0>
   28ea4:	add	r0, sp, #16
   28ea8:	bl	25e20 <__assert_fail@plt+0x14174>
   28eac:	cmp	r0, #0
   28eb0:	bne	28ef0 <__assert_fail@plt+0x17244>
   28eb4:	ldr	r4, [sp, #8]
   28eb8:	add	r9, r9, #1
   28ebc:	ldr	r0, [r4, #4]
   28ec0:	cmp	r9, r0
   28ec4:	blt	28e48 <__assert_fail@plt+0x1719c>
   28ec8:	b	28f00 <__assert_fail@plt+0x17254>
   28ecc:	cmn	r4, #1
   28ed0:	beq	28ea4 <__assert_fail@plt+0x171f8>
   28ed4:	ldr	r0, [sp, #12]
   28ed8:	add	r1, sp, #16
   28edc:	mov	r3, r8
   28ee0:	str	sl, [sp]
   28ee4:	bl	29478 <__assert_fail@plt+0x177cc>
   28ee8:	cmp	r0, #0
   28eec:	beq	28eb4 <__assert_fail@plt+0x17208>
   28ef0:	mov	r7, r0
   28ef4:	ldr	r0, [sp, #24]
   28ef8:	bl	1b22c <__assert_fail@plt+0x9580>
   28efc:	b	28f1c <__assert_fail@plt+0x17270>
   28f00:	ldr	r0, [r4, #8]
   28f04:	bl	1b22c <__assert_fail@plt+0x9580>
   28f08:	vldr	d16, [sp, #16]
   28f0c:	ldr	r0, [sp, #24]
   28f10:	mov	r7, #0
   28f14:	str	r0, [r4, #8]
   28f18:	vstr	d16, [r4]
   28f1c:	mov	r0, r7
   28f20:	sub	sp, fp, #28
   28f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f28:	mov	r7, #12
   28f2c:	b	28f1c <__assert_fail@plt+0x17270>
   28f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28f34:	add	fp, sp, #28
   28f38:	sub	sp, sp, #52	; 0x34
   28f3c:	ldr	ip, [r0, #108]	; 0x6c
   28f40:	mov	lr, r1
   28f44:	ldr	r1, [r0, #84]	; 0x54
   28f48:	str	r0, [sp, #24]
   28f4c:	mov	sl, r2
   28f50:	mov	r8, #0
   28f54:	mov	r0, #0
   28f58:	cmp	ip, #1
   28f5c:	str	r1, [sp, #28]
   28f60:	blt	28fa4 <__assert_fail@plt+0x172f8>
   28f64:	ldr	r0, [sp, #24]
   28f68:	mov	r7, #1
   28f6c:	mov	r1, ip
   28f70:	ldr	r2, [r0, #116]	; 0x74
   28f74:	mov	r0, #0
   28f78:	add	r6, r1, r0
   28f7c:	add	r6, r6, r6, lsr #31
   28f80:	asr	r4, r6, #1
   28f84:	add	r5, r4, r4, lsl #1
   28f88:	add	r5, r2, r5, lsl #3
   28f8c:	ldr	r5, [r5, #4]
   28f90:	cmp	r5, sl
   28f94:	addlt	r0, r7, r6, asr #1
   28f98:	movge	r1, r4
   28f9c:	cmp	r0, r1
   28fa0:	blt	28f78 <__assert_fail@plt+0x172cc>
   28fa4:	cmp	r0, ip
   28fa8:	bge	2946c <__assert_fail@plt+0x177c0>
   28fac:	cmn	r0, #1
   28fb0:	beq	2946c <__assert_fail@plt+0x177c0>
   28fb4:	ldr	r1, [sp, #24]
   28fb8:	add	r0, r0, r0, lsl #1
   28fbc:	str	r0, [sp, #8]
   28fc0:	ldr	r1, [r1, #116]	; 0x74
   28fc4:	add	r0, r1, r0, lsl #3
   28fc8:	ldr	r0, [r0, #4]
   28fcc:	cmp	r0, sl
   28fd0:	bne	2946c <__assert_fail@plt+0x177c0>
   28fd4:	str	r3, [sp, #12]
   28fd8:	mov	r9, #1
   28fdc:	str	lr, [sp, #16]
   28fe0:	b	28fec <__assert_fail@plt+0x17340>
   28fe4:	ldr	r0, [sp, #24]
   28fe8:	ldr	r1, [r0, #116]	; 0x74
   28fec:	ldr	r0, [sp, #8]
   28ff0:	add	r0, r1, r0, lsl #3
   28ff4:	mov	r8, r0
   28ff8:	ldr	r0, [lr, #4]
   28ffc:	cmp	r0, #1
   29000:	blt	292fc <__assert_fail@plt+0x17650>
   29004:	subs	r6, r0, #1
   29008:	ldr	r2, [r8]
   2900c:	ldr	r0, [lr, #8]
   29010:	mov	r3, #0
   29014:	beq	2903c <__assert_fail@plt+0x17390>
   29018:	mov	r1, r6
   2901c:	add	r7, r3, r1
   29020:	lsr	r5, r7, #1
   29024:	ldr	r4, [r0, r5, lsl #2]
   29028:	cmp	r4, r2
   2902c:	movge	r1, r5
   29030:	addlt	r3, r9, r7, lsr #1
   29034:	cmp	r3, r1
   29038:	bcc	2901c <__assert_fail@plt+0x17370>
   2903c:	ldr	r1, [r0, r3, lsl #2]
   29040:	cmp	r1, r2
   29044:	bne	292fc <__assert_fail@plt+0x17650>
   29048:	ldr	r3, [r8, #12]
   2904c:	ldr	r1, [r8, #8]
   29050:	add	r3, r3, sl
   29054:	sub	r7, r3, r1
   29058:	cmp	r7, sl
   2905c:	bne	29148 <__assert_fail@plt+0x1749c>
   29060:	ldr	r1, [sp, #28]
   29064:	add	r2, r2, r2, lsl #1
   29068:	cmp	r6, #0
   2906c:	ldr	r1, [r1, #20]
   29070:	add	r1, r1, r2, lsl #2
   29074:	mov	r2, #0
   29078:	ldr	r1, [r1, #8]
   2907c:	ldr	r4, [r1]
   29080:	beq	290a4 <__assert_fail@plt+0x173f8>
   29084:	add	r1, r2, r6
   29088:	lsr	r3, r1, #1
   2908c:	ldr	r7, [r0, r3, lsl #2]
   29090:	cmp	r7, r4
   29094:	movge	r6, r3
   29098:	addlt	r2, r9, r1, lsr #1
   2909c:	cmp	r2, r6
   290a0:	bcc	29084 <__assert_fail@plt+0x173d8>
   290a4:	ldr	r1, [r0, r2, lsl #2]
   290a8:	mov	r0, #4
   290ac:	cmp	r1, r4
   290b0:	beq	292f0 <__assert_fail@plt+0x17644>
   290b4:	mov	r0, #4
   290b8:	str	r9, [sp, #36]	; 0x24
   290bc:	str	r9, [sp, #32]
   290c0:	bl	1b2f8 <__assert_fail@plt+0x964c>
   290c4:	cmp	r0, #0
   290c8:	str	r0, [sp, #40]	; 0x28
   290cc:	beq	29310 <__assert_fail@plt+0x17664>
   290d0:	mov	r6, #0
   290d4:	str	r4, [r0]
   290d8:	ldr	r0, [sp, #28]
   290dc:	ldr	r2, [sp, #12]
   290e0:	ldr	r3, [fp, #8]
   290e4:	add	r4, sp, #32
   290e8:	str	r6, [fp, #-32]	; 0xffffffe0
   290ec:	mov	r1, r4
   290f0:	bl	28df4 <__assert_fail@plt+0x17148>
   290f4:	ldr	r5, [sp, #16]
   290f8:	mov	r7, r0
   290fc:	mov	r1, r4
   29100:	mov	r0, r5
   29104:	bl	25e20 <__assert_fail@plt+0x14174>
   29108:	mov	r4, r0
   2910c:	ldr	r0, [sp, #40]	; 0x28
   29110:	bl	1b22c <__assert_fail@plt+0x9580>
   29114:	orr	r0, r7, r6
   29118:	mov	lr, r5
   2911c:	orrs	r0, r0, r4
   29120:	mov	r0, #2
   29124:	beq	292f0 <__assert_fail@plt+0x17644>
   29128:	cmp	r7, #0
   2912c:	mov	r0, #1
   29130:	movne	r4, r7
   29134:	cmp	r6, #0
   29138:	movne	r4, r6
   2913c:	str	r4, [fp, #-32]	; 0xffffffe0
   29140:	str	r4, [sp, #20]
   29144:	b	292f0 <__assert_fail@plt+0x17644>
   29148:	ldr	r0, [sp, #24]
   2914c:	ldr	r0, [r0, #100]	; 0x64
   29150:	ldr	r5, [r0, r7, lsl #2]
   29154:	ldr	r0, [sp, #28]
   29158:	ldr	r0, [r0, #12]
   2915c:	cmp	r5, #0
   29160:	ldr	r4, [r0, r2, lsl #2]
   29164:	beq	2922c <__assert_fail@plt+0x17580>
   29168:	ldr	ip, [r5, #8]
   2916c:	cmp	ip, #0
   29170:	ble	29258 <__assert_fail@plt+0x175ac>
   29174:	ldr	r0, [r5, #12]
   29178:	subs	r3, ip, #1
   2917c:	mov	r2, #0
   29180:	str	r7, [sp, #4]
   29184:	beq	291a8 <__assert_fail@plt+0x174fc>
   29188:	add	r6, r2, r3
   2918c:	lsr	r7, r6, #1
   29190:	ldr	r1, [r0, r7, lsl #2]
   29194:	cmp	r1, r4
   29198:	movge	r3, r7
   2919c:	addlt	r2, r9, r6, lsr #1
   291a0:	cmp	r2, r3
   291a4:	bcc	29188 <__assert_fail@plt+0x174dc>
   291a8:	ldr	r1, [r0, r2, lsl #2]
   291ac:	mov	r0, #4
   291b0:	cmp	r1, r4
   291b4:	beq	292f0 <__assert_fail@plt+0x17644>
   291b8:	ldr	r7, [sp, #4]
   291bc:	cmp	ip, #1
   291c0:	str	ip, [sp, #36]	; 0x24
   291c4:	blt	2925c <__assert_fail@plt+0x175b0>
   291c8:	lsl	r0, ip, #2
   291cc:	str	ip, [sp, #32]
   291d0:	bl	1b2f8 <__assert_fail@plt+0x964c>
   291d4:	cmp	r0, #0
   291d8:	str	r0, [sp, #40]	; 0x28
   291dc:	beq	29378 <__assert_fail@plt+0x176cc>
   291e0:	ldr	r2, [r5, #8]
   291e4:	ldr	r1, [r5, #12]
   291e8:	mov	r5, r0
   291ec:	lsl	r2, r2, #2
   291f0:	bl	118ec <memcpy@plt>
   291f4:	ldr	r1, [sp, #32]
   291f8:	mov	r6, #0
   291fc:	str	r6, [fp, #-32]	; 0xffffffe0
   29200:	cmp	r1, #0
   29204:	beq	29270 <__assert_fail@plt+0x175c4>
   29208:	ldr	r0, [sp, #36]	; 0x24
   2920c:	cmp	r0, #0
   29210:	bne	2938c <__assert_fail@plt+0x176e0>
   29214:	str	r4, [r5]
   29218:	str	r9, [sp, #36]	; 0x24
   2921c:	mov	r6, #0
   29220:	cmp	r6, #0
   29224:	beq	29298 <__assert_fail@plt+0x175ec>
   29228:	b	29350 <__assert_fail@plt+0x176a4>
   2922c:	mov	r0, #4
   29230:	str	r9, [sp, #36]	; 0x24
   29234:	str	r9, [sp, #32]
   29238:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2923c:	cmp	r0, #0
   29240:	str	r0, [sp, #40]	; 0x28
   29244:	beq	29324 <__assert_fail@plt+0x17678>
   29248:	str	r4, [r0]
   2924c:	mov	r0, #0
   29250:	str	r0, [fp, #-32]	; 0xffffffe0
   29254:	b	29298 <__assert_fail@plt+0x175ec>
   29258:	str	ip, [sp, #36]	; 0x24
   2925c:	mov	r6, #0
   29260:	str	r6, [sp, #36]	; 0x24
   29264:	str	r6, [sp, #32]
   29268:	str	r6, [sp, #40]	; 0x28
   2926c:	str	r6, [fp, #-32]	; 0xffffffe0
   29270:	mov	r0, #4
   29274:	str	r9, [sp, #36]	; 0x24
   29278:	str	r9, [sp, #32]
   2927c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   29280:	cmp	r0, #0
   29284:	str	r0, [sp, #40]	; 0x28
   29288:	beq	29344 <__assert_fail@plt+0x17698>
   2928c:	str	r4, [r0]
   29290:	cmp	r6, #0
   29294:	bne	29350 <__assert_fail@plt+0x176a4>
   29298:	ldr	r1, [sp, #28]
   2929c:	sub	r0, fp, #32
   292a0:	add	r2, sp, #32
   292a4:	bl	295b0 <__assert_fail@plt+0x17904>
   292a8:	ldr	r4, [sp, #24]
   292ac:	ldr	r1, [r4, #100]	; 0x64
   292b0:	str	r0, [r1, r7, lsl #2]
   292b4:	ldr	r0, [sp, #40]	; 0x28
   292b8:	bl	1b22c <__assert_fail@plt+0x9580>
   292bc:	ldr	r0, [r4, #100]	; 0x64
   292c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   292c4:	ldr	r0, [r0, r7, lsl #2]
   292c8:	cmp	r1, #0
   292cc:	mov	r2, r1
   292d0:	movwne	r2, #1
   292d4:	clz	r0, r0
   292d8:	lsr	r0, r0, #5
   292dc:	ands	r0, r0, r2
   292e0:	ldr	r2, [sp, #20]
   292e4:	movne	r2, r1
   292e8:	str	r2, [sp, #20]
   292ec:	ldr	lr, [sp, #16]
   292f0:	cmp	r0, #0
   292f4:	cmpne	r0, #4
   292f8:	bne	29458 <__assert_fail@plt+0x177ac>
   292fc:	ldrb	r1, [r8, #20]
   29300:	add	r0, r8, #24
   29304:	cmp	r1, #0
   29308:	bne	28ff4 <__assert_fail@plt+0x17348>
   2930c:	b	29468 <__assert_fail@plt+0x177bc>
   29310:	mov	r0, #0
   29314:	mov	r6, #12
   29318:	str	r0, [sp, #32]
   2931c:	str	r0, [sp, #36]	; 0x24
   29320:	b	290d8 <__assert_fail@plt+0x1742c>
   29324:	mov	r0, #0
   29328:	mov	r1, #12
   2932c:	str	r0, [sp, #32]
   29330:	str	r0, [sp, #36]	; 0x24
   29334:	mov	r0, #12
   29338:	str	r1, [fp, #-32]	; 0xffffffe0
   2933c:	str	r0, [sp, #20]
   29340:	b	29370 <__assert_fail@plt+0x176c4>
   29344:	mov	r0, #0
   29348:	str	r0, [sp, #32]
   2934c:	str	r0, [sp, #36]	; 0x24
   29350:	clz	r0, r6
   29354:	lsr	r4, r0, #5
   29358:	ldr	r0, [sp, #40]	; 0x28
   2935c:	bl	1b22c <__assert_fail@plt+0x9580>
   29360:	cmp	r4, #0
   29364:	movwne	r6, #12
   29368:	str	r6, [sp, #20]
   2936c:	str	r6, [fp, #-32]	; 0xffffffe0
   29370:	mov	r0, #1
   29374:	b	292ec <__assert_fail@plt+0x17640>
   29378:	mov	r0, #0
   2937c:	mov	r6, #12
   29380:	str	r0, [sp, #32]
   29384:	str	r0, [sp, #36]	; 0x24
   29388:	b	2926c <__assert_fail@plt+0x175c0>
   2938c:	cmp	r1, r0
   29390:	bne	293bc <__assert_fail@plt+0x17710>
   29394:	lsl	r0, r1, #1
   29398:	lsl	r1, r1, #3
   2939c:	str	r0, [sp, #32]
   293a0:	mov	r0, r5
   293a4:	bl	1b388 <__assert_fail@plt+0x96dc>
   293a8:	cmp	r0, #0
   293ac:	beq	29450 <__assert_fail@plt+0x177a4>
   293b0:	str	r0, [sp, #40]	; 0x28
   293b4:	mov	r5, r0
   293b8:	ldr	r0, [sp, #36]	; 0x24
   293bc:	ldr	r1, [r5]
   293c0:	cmp	r1, r4
   293c4:	ble	293fc <__assert_fail@plt+0x17750>
   293c8:	cmp	r0, #1
   293cc:	blt	2942c <__assert_fail@plt+0x17780>
   293d0:	add	r1, r5, r0, lsl #2
   293d4:	add	r0, r0, #1
   293d8:	mov	r2, r1
   293dc:	ldr	r3, [r2, #-4]!
   293e0:	sub	r0, r0, #1
   293e4:	cmp	r0, #1
   293e8:	str	r3, [r1]
   293ec:	mov	r1, r2
   293f0:	bgt	293dc <__assert_fail@plt+0x17730>
   293f4:	sub	r0, r0, #1
   293f8:	b	2942c <__assert_fail@plt+0x17780>
   293fc:	add	r1, r5, r0, lsl #2
   29400:	ldr	r2, [r1, #-4]
   29404:	cmp	r2, r4
   29408:	ble	2942c <__assert_fail@plt+0x17780>
   2940c:	sub	r0, r0, #2
   29410:	str	r2, [r1]
   29414:	sub	r0, r0, #1
   29418:	ldr	r2, [r1, #-8]
   2941c:	sub	r1, r1, #4
   29420:	cmp	r2, r4
   29424:	bgt	29410 <__assert_fail@plt+0x17764>
   29428:	add	r0, r0, #2
   2942c:	str	r4, [r5, r0, lsl #2]
   29430:	ldr	r7, [sp, #4]
   29434:	mov	r6, #0
   29438:	ldr	r0, [sp, #36]	; 0x24
   2943c:	add	r0, r0, #1
   29440:	str	r0, [sp, #36]	; 0x24
   29444:	cmp	r6, #0
   29448:	beq	29298 <__assert_fail@plt+0x175ec>
   2944c:	b	29350 <__assert_fail@plt+0x176a4>
   29450:	mov	r6, #0
   29454:	b	29350 <__assert_fail@plt+0x176a4>
   29458:	cmp	r0, #2
   2945c:	beq	28fe4 <__assert_fail@plt+0x17338>
   29460:	ldr	r8, [sp, #20]
   29464:	b	2946c <__assert_fail@plt+0x177c0>
   29468:	mov	r8, #0
   2946c:	mov	r0, r8
   29470:	sub	sp, fp, #28
   29474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2947c:	add	fp, sp, #28
   29480:	sub	sp, sp, #4
   29484:	ldr	r4, [fp, #8]
   29488:	mov	r9, r3
   2948c:	mov	r7, r2
   29490:	mov	r8, r1
   29494:	mov	sl, r0
   29498:	mov	r5, #1
   2949c:	b	294ac <__assert_fail@plt+0x17800>
   294a0:	add	r0, r0, r7, lsl #2
   294a4:	ldr	r0, [r0, #8]
   294a8:	ldr	r7, [r0]
   294ac:	ldr	r0, [r8, #4]
   294b0:	cmp	r0, #1
   294b4:	blt	294fc <__assert_fail@plt+0x17850>
   294b8:	subs	r2, r0, #1
   294bc:	ldr	r0, [r8, #8]
   294c0:	mov	ip, r4
   294c4:	mov	r1, #0
   294c8:	beq	294ec <__assert_fail@plt+0x17840>
   294cc:	add	r3, r1, r2
   294d0:	lsr	r6, r3, #1
   294d4:	ldr	r4, [r0, r6, lsl #2]
   294d8:	cmp	r4, r7
   294dc:	movge	r2, r6
   294e0:	addlt	r1, r5, r3, lsr #1
   294e4:	cmp	r1, r2
   294e8:	bcc	294cc <__assert_fail@plt+0x17820>
   294ec:	ldr	r0, [r0, r1, lsl #2]
   294f0:	mov	r4, ip
   294f4:	cmp	r0, r7
   294f8:	beq	29598 <__assert_fail@plt+0x178ec>
   294fc:	ldr	r0, [sl]
   29500:	add	r1, r0, r7, lsl #3
   29504:	ldrb	r1, [r1, #4]
   29508:	cmp	r1, r4
   2950c:	ldreq	r0, [r0, r7, lsl #3]
   29510:	cmpeq	r0, r9
   29514:	beq	2957c <__assert_fail@plt+0x178d0>
   29518:	mov	r0, r8
   2951c:	mov	r1, r7
   29520:	bl	25fb0 <__assert_fail@plt+0x14304>
   29524:	cmp	r0, #0
   29528:	beq	295a4 <__assert_fail@plt+0x178f8>
   2952c:	ldr	r0, [sl, #20]
   29530:	add	r7, r7, r7, lsl #1
   29534:	add	r1, r0, r7, lsl #2
   29538:	ldr	r2, [r1, #4]
   2953c:	cmp	r2, #2
   29540:	beq	29550 <__assert_fail@plt+0x178a4>
   29544:	cmp	r2, #0
   29548:	bne	294a0 <__assert_fail@plt+0x177f4>
   2954c:	b	29598 <__assert_fail@plt+0x178ec>
   29550:	ldr	r0, [r1, #8]
   29554:	mov	r1, r8
   29558:	mov	r3, r9
   2955c:	ldr	r2, [r0, #4]
   29560:	mov	r0, sl
   29564:	str	r4, [sp]
   29568:	bl	29478 <__assert_fail@plt+0x177cc>
   2956c:	cmp	r0, #0
   29570:	bne	2959c <__assert_fail@plt+0x178f0>
   29574:	ldr	r0, [sl, #20]
   29578:	b	294a0 <__assert_fail@plt+0x177f4>
   2957c:	cmp	r4, #9
   29580:	bne	29598 <__assert_fail@plt+0x178ec>
   29584:	mov	r0, r8
   29588:	mov	r1, r7
   2958c:	bl	25fb0 <__assert_fail@plt+0x14304>
   29590:	cmp	r0, #0
   29594:	beq	295a4 <__assert_fail@plt+0x178f8>
   29598:	mov	r0, #0
   2959c:	sub	sp, fp, #28
   295a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   295a4:	mov	r0, #12
   295a8:	sub	sp, fp, #28
   295ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   295b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   295b4:	add	fp, sp, #28
   295b8:	sub	sp, sp, #4
   295bc:	ldr	sl, [r2, #4]
   295c0:	cmp	sl, #0
   295c4:	beq	29800 <__assert_fail@plt+0x17b54>
   295c8:	mov	r7, r2
   295cc:	mov	r9, r1
   295d0:	cmp	sl, #1
   295d4:	mov	r6, sl
   295d8:	blt	2964c <__assert_fail@plt+0x179a0>
   295dc:	ldr	r5, [r7, #8]
   295e0:	mov	r2, #0
   295e4:	cmp	sl, #4
   295e8:	mov	r6, sl
   295ec:	bcc	29634 <__assert_fail@plt+0x17988>
   295f0:	mov	r1, #0
   295f4:	bic	r2, sl, #3
   295f8:	vdup.32	q8, r1
   295fc:	mov	r3, r2
   29600:	mov	r1, r5
   29604:	vmov.32	d16[0], sl
   29608:	vld1.32	{d18-d19}, [r1]!
   2960c:	subs	r3, r3, #4
   29610:	vadd.i32	q8, q9, q8
   29614:	bne	29608 <__assert_fail@plt+0x1795c>
   29618:	vext.8	q9, q8, q8, #8
   2961c:	cmp	sl, r2
   29620:	vadd.i32	q8, q8, q9
   29624:	vdup.32	q9, d16[1]
   29628:	vadd.i32	q8, q8, q9
   2962c:	vmov.32	r6, d16[0]
   29630:	beq	2964c <__assert_fail@plt+0x179a0>
   29634:	add	r1, r5, r2, lsl #2
   29638:	sub	r2, sl, r2
   2963c:	ldr	r3, [r1], #4
   29640:	subs	r2, r2, #1
   29644:	add	r6, r3, r6
   29648:	bne	2963c <__assert_fail@plt+0x17990>
   2964c:	ldr	r1, [r9, #68]	; 0x44
   29650:	ldr	r2, [r9, #32]
   29654:	str	r0, [sp]
   29658:	and	r1, r1, r6
   2965c:	add	r3, r1, r1, lsl #1
   29660:	ldr	r1, [r2, r3, lsl #2]
   29664:	cmp	r1, #1
   29668:	blt	296dc <__assert_fail@plt+0x17a30>
   2966c:	add	r2, r2, r3, lsl #2
   29670:	sub	ip, sl, #1
   29674:	mov	r5, #0
   29678:	ldr	lr, [r2, #8]
   2967c:	b	296b0 <__assert_fail@plt+0x17a04>
   29680:	mov	r3, ip
   29684:	add	r2, r3, #1
   29688:	cmp	r2, #1
   2968c:	blt	297f4 <__assert_fail@plt+0x17b48>
   29690:	ldr	r2, [r7, #8]
   29694:	ldr	r0, [r4, #12]
   29698:	ldr	r2, [r2, r3, lsl #2]
   2969c:	ldr	r0, [r0, r3, lsl #2]
   296a0:	sub	r3, r3, #1
   296a4:	cmp	r0, r2
   296a8:	beq	29684 <__assert_fail@plt+0x179d8>
   296ac:	b	296d0 <__assert_fail@plt+0x17a24>
   296b0:	cmp	r7, #0
   296b4:	beq	296d0 <__assert_fail@plt+0x17a24>
   296b8:	ldr	r4, [lr, r5, lsl #2]
   296bc:	ldr	r3, [r4]
   296c0:	cmp	r6, r3
   296c4:	ldreq	r3, [r4, #8]
   296c8:	cmpeq	r3, sl
   296cc:	beq	29680 <__assert_fail@plt+0x179d4>
   296d0:	add	r5, r5, #1
   296d4:	cmp	r5, r1
   296d8:	blt	296b0 <__assert_fail@plt+0x17a04>
   296dc:	mov	r0, #56	; 0x38
   296e0:	mov	r1, #1
   296e4:	bl	1af9c <__assert_fail@plt+0x92f0>
   296e8:	cmp	r0, #0
   296ec:	beq	2982c <__assert_fail@plt+0x17b80>
   296f0:	mov	r4, r0
   296f4:	ldr	r0, [r7, #4]
   296f8:	add	sl, r4, #4
   296fc:	cmp	r0, #1
   29700:	str	r0, [r4, #8]
   29704:	blt	297c8 <__assert_fail@plt+0x17b1c>
   29708:	str	r0, [r4, #4]
   2970c:	lsl	r0, r0, #2
   29710:	bl	1b2f8 <__assert_fail@plt+0x964c>
   29714:	cmp	r0, #0
   29718:	str	r0, [r4, #12]
   2971c:	beq	29818 <__assert_fail@plt+0x17b6c>
   29720:	ldmib	r7, {r5, r7}
   29724:	lsl	r2, r5, #2
   29728:	mov	r1, r7
   2972c:	bl	118ec <memcpy@plt>
   29730:	cmp	r5, #1
   29734:	str	sl, [r4, #40]	; 0x28
   29738:	blt	297dc <__assert_fail@plt+0x17b30>
   2973c:	ldr	sl, [r9]
   29740:	movw	ip, #65280	; 0xff00
   29744:	mov	lr, #32
   29748:	movt	ip, #3
   2974c:	add	r2, ip, #255	; 0xff
   29750:	ldr	r0, [r7]
   29754:	add	r1, sl, r0, lsl #3
   29758:	ldr	r0, [r1, #4]!
   2975c:	and	r3, r0, r2
   29760:	cmp	r3, #1
   29764:	beq	297b8 <__assert_fail@plt+0x17b0c>
   29768:	ldrb	r8, [r4, #52]	; 0x34
   2976c:	and	r3, lr, r0, lsr #15
   29770:	uxtb	r0, r0
   29774:	cmp	r0, #12
   29778:	orr	r3, r8, r3
   2977c:	strb	r3, [r4, #52]	; 0x34
   29780:	beq	297b0 <__assert_fail@plt+0x17b04>
   29784:	cmp	r0, #4
   29788:	beq	2979c <__assert_fail@plt+0x17af0>
   2978c:	cmp	r0, #2
   29790:	bne	297a4 <__assert_fail@plt+0x17af8>
   29794:	orr	r0, r3, #16
   29798:	b	297b4 <__assert_fail@plt+0x17b08>
   2979c:	orr	r0, r3, #64	; 0x40
   297a0:	b	297b4 <__assert_fail@plt+0x17b08>
   297a4:	ldr	r0, [r1]
   297a8:	tst	r0, ip
   297ac:	beq	297b8 <__assert_fail@plt+0x17b0c>
   297b0:	orr	r0, r3, #128	; 0x80
   297b4:	strb	r0, [r4, #52]	; 0x34
   297b8:	add	r7, r7, #4
   297bc:	subs	r5, r5, #1
   297c0:	bne	29750 <__assert_fail@plt+0x17aa4>
   297c4:	b	297dc <__assert_fail@plt+0x17b30>
   297c8:	mov	r0, #0
   297cc:	str	r0, [sl]
   297d0:	str	r0, [sl, #4]
   297d4:	str	r0, [sl, #8]
   297d8:	str	sl, [r4, #40]	; 0x28
   297dc:	mov	r0, r9
   297e0:	mov	r1, r4
   297e4:	mov	r2, r6
   297e8:	bl	26530 <__assert_fail@plt+0x14884>
   297ec:	cmp	r0, #0
   297f0:	bne	2980c <__assert_fail@plt+0x17b60>
   297f4:	mov	r0, r4
   297f8:	sub	sp, fp, #28
   297fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29800:	mov	r4, #0
   29804:	str	r4, [r0]
   29808:	b	297f4 <__assert_fail@plt+0x17b48>
   2980c:	mov	r0, r4
   29810:	bl	2054c <__assert_fail@plt+0xe8a0>
   29814:	b	2982c <__assert_fail@plt+0x17b80>
   29818:	mov	r0, #0
   2981c:	str	r0, [r4, #4]
   29820:	str	r0, [r4, #8]
   29824:	mov	r0, r4
   29828:	bl	1b22c <__assert_fail@plt+0x9580>
   2982c:	ldr	r1, [sp]
   29830:	mov	r0, #12
   29834:	mov	r4, #0
   29838:	str	r0, [r1]
   2983c:	b	297f4 <__assert_fail@plt+0x17b48>
   29840:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29844:	add	fp, sp, #24
   29848:	ldr	lr, [r0]
   2984c:	add	r7, lr, r1, lsl #3
   29850:	ldrb	r9, [r7, #4]
   29854:	cmp	r9, #7
   29858:	beq	29a24 <__assert_fail@plt+0x17d78>
   2985c:	ldr	ip, [r2, #80]	; 0x50
   29860:	mov	r6, #1
   29864:	cmp	ip, #1
   29868:	beq	298a4 <__assert_fail@plt+0x17bf8>
   2986c:	ldr	r5, [r2, #28]
   29870:	add	r7, r3, #1
   29874:	cmp	r7, r5
   29878:	bge	298a4 <__assert_fail@plt+0x17bf8>
   2987c:	ldr	r6, [r2, #8]
   29880:	add	r7, r6, r3, lsl #2
   29884:	mov	r6, #1
   29888:	ldr	r4, [r7, r6, lsl #2]
   2988c:	cmn	r4, #1
   29890:	bne	298a4 <__assert_fail@plt+0x17bf8>
   29894:	add	r6, r6, #1
   29898:	add	r4, r3, r6
   2989c:	cmp	r4, r5
   298a0:	blt	29888 <__assert_fail@plt+0x17bdc>
   298a4:	mov	r8, #0
   298a8:	cmp	r9, #5
   298ac:	bne	298f4 <__assert_fail@plt+0x17c48>
   298b0:	cmp	r6, #2
   298b4:	blt	29a14 <__assert_fail@plt+0x17d68>
   298b8:	ldr	r0, [r0, #128]	; 0x80
   298bc:	tst	r0, #64	; 0x40
   298c0:	bne	298d4 <__assert_fail@plt+0x17c28>
   298c4:	ldr	r1, [r2, #4]
   298c8:	ldrb	r1, [r1, r3]
   298cc:	cmp	r1, #10
   298d0:	beq	29a14 <__assert_fail@plt+0x17d68>
   298d4:	tst	r0, #128	; 0x80
   298d8:	beq	29a10 <__assert_fail@plt+0x17d64>
   298dc:	ldr	r0, [r2, #4]
   298e0:	ldrb	r0, [r0, r3]
   298e4:	cmp	r0, #0
   298e8:	movne	r8, r6
   298ec:	mov	r0, r8
   298f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   298f4:	cmp	r9, #6
   298f8:	bne	29a14 <__assert_fail@plt+0x17d68>
   298fc:	cmp	r6, #2
   29900:	blt	29a14 <__assert_fail@plt+0x17d68>
   29904:	ldr	r7, [lr, r1, lsl #3]
   29908:	ldr	r0, [r7, #32]
   2990c:	cmp	r0, #0
   29910:	bne	2992c <__assert_fail@plt+0x17c80>
   29914:	ldr	r1, [r7, #36]	; 0x24
   29918:	cmp	r1, #0
   2991c:	bne	2992c <__assert_fail@plt+0x17c80>
   29920:	ldr	r1, [r7, #20]
   29924:	cmp	r1, #0
   29928:	beq	29a1c <__assert_fail@plt+0x17d70>
   2992c:	cmp	ip, #1
   29930:	bne	29940 <__assert_fail@plt+0x17c94>
   29934:	ldr	r1, [r2, #4]
   29938:	ldrb	r5, [r1, r3]
   2993c:	b	29948 <__assert_fail@plt+0x17c9c>
   29940:	ldr	r1, [r2, #8]
   29944:	ldr	r5, [r1, r3, lsl #2]
   29948:	ldr	r1, [r7, #20]
   2994c:	cmp	r1, #1
   29950:	blt	29974 <__assert_fail@plt+0x17cc8>
   29954:	ldr	r2, [r7]
   29958:	mov	r3, #0
   2995c:	ldr	r4, [r2, r3, lsl #2]
   29960:	cmp	r5, r4
   29964:	beq	299f0 <__assert_fail@plt+0x17d44>
   29968:	add	r3, r3, #1
   2996c:	cmp	r3, r1
   29970:	blt	2995c <__assert_fail@plt+0x17cb0>
   29974:	ldr	r1, [r7, #36]	; 0x24
   29978:	cmp	r1, #1
   2997c:	blt	299b0 <__assert_fail@plt+0x17d04>
   29980:	mov	r4, #0
   29984:	ldr	r0, [r7, #12]
   29988:	ldr	r1, [r0, r4, lsl #2]
   2998c:	mov	r0, r5
   29990:	bl	11850 <iswctype@plt>
   29994:	cmp	r0, #0
   29998:	bne	299f0 <__assert_fail@plt+0x17d44>
   2999c:	ldr	r0, [r7, #36]	; 0x24
   299a0:	add	r4, r4, #1
   299a4:	cmp	r4, r0
   299a8:	blt	29984 <__assert_fail@plt+0x17cd8>
   299ac:	ldr	r0, [r7, #32]
   299b0:	cmp	r0, #1
   299b4:	blt	299e8 <__assert_fail@plt+0x17d3c>
   299b8:	ldr	r1, [r7, #4]
   299bc:	mov	r2, #0
   299c0:	ldr	r3, [r1, r2, lsl #2]
   299c4:	cmp	r3, r5
   299c8:	bhi	299dc <__assert_fail@plt+0x17d30>
   299cc:	ldr	r3, [r7, #8]
   299d0:	ldr	r3, [r3, r2, lsl #2]
   299d4:	cmp	r5, r3
   299d8:	bls	299f0 <__assert_fail@plt+0x17d44>
   299dc:	add	r2, r2, #1
   299e0:	cmp	r2, r0
   299e4:	blt	299c0 <__assert_fail@plt+0x17d14>
   299e8:	mov	r0, #0
   299ec:	b	299f4 <__assert_fail@plt+0x17d48>
   299f0:	mov	r0, r6
   299f4:	ldrb	r1, [r7, #16]
   299f8:	tst	r1, #1
   299fc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   29a00:	cmp	r0, #0
   29a04:	bgt	29a14 <__assert_fail@plt+0x17d68>
   29a08:	cmp	r6, #1
   29a0c:	movle	r6, #1
   29a10:	mov	r8, r6
   29a14:	mov	r0, r8
   29a18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29a1c:	mov	r5, #0
   29a20:	b	29948 <__assert_fail@plt+0x17c9c>
   29a24:	ldr	r0, [r2, #4]
   29a28:	mov	r8, #0
   29a2c:	ldrb	r6, [r0, r3]
   29a30:	cmp	r6, #194	; 0xc2
   29a34:	bcc	29a14 <__assert_fail@plt+0x17d68>
   29a38:	ldr	r1, [r2, #48]	; 0x30
   29a3c:	add	r2, r3, #2
   29a40:	cmp	r2, r1
   29a44:	bgt	29a14 <__assert_fail@plt+0x17d68>
   29a48:	add	r0, r0, r3
   29a4c:	cmp	r6, #223	; 0xdf
   29a50:	ldrb	r7, [r0, #1]
   29a54:	bhi	29a78 <__assert_fail@plt+0x17dcc>
   29a58:	mov	r8, #2
   29a5c:	cmp	r7, #191	; 0xbf
   29a60:	sxtb	r0, r7
   29a64:	movwhi	r8, #0
   29a68:	cmn	r0, #1
   29a6c:	movwgt	r8, #0
   29a70:	mov	r0, r8
   29a74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29a78:	cmp	r6, #239	; 0xef
   29a7c:	bhi	29a98 <__assert_fail@plt+0x17dec>
   29a80:	mov	r2, #3
   29a84:	cmp	r6, #224	; 0xe0
   29a88:	bne	29af4 <__assert_fail@plt+0x17e48>
   29a8c:	cmp	r7, #160	; 0xa0
   29a90:	bcc	29a14 <__assert_fail@plt+0x17d68>
   29a94:	b	29af4 <__assert_fail@plt+0x17e48>
   29a98:	cmp	r6, #247	; 0xf7
   29a9c:	bhi	29ab8 <__assert_fail@plt+0x17e0c>
   29aa0:	mov	r2, #4
   29aa4:	cmp	r6, #240	; 0xf0
   29aa8:	bne	29af4 <__assert_fail@plt+0x17e48>
   29aac:	cmp	r7, #144	; 0x90
   29ab0:	bcc	29a14 <__assert_fail@plt+0x17d68>
   29ab4:	b	29af4 <__assert_fail@plt+0x17e48>
   29ab8:	cmp	r6, #251	; 0xfb
   29abc:	bhi	29ad8 <__assert_fail@plt+0x17e2c>
   29ac0:	mov	r2, #5
   29ac4:	cmp	r6, #248	; 0xf8
   29ac8:	bne	29af4 <__assert_fail@plt+0x17e48>
   29acc:	cmp	r7, #136	; 0x88
   29ad0:	bcc	29a14 <__assert_fail@plt+0x17d68>
   29ad4:	b	29af4 <__assert_fail@plt+0x17e48>
   29ad8:	cmp	r6, #253	; 0xfd
   29adc:	bhi	29a14 <__assert_fail@plt+0x17d68>
   29ae0:	mov	r2, #6
   29ae4:	cmp	r6, #252	; 0xfc
   29ae8:	bne	29af4 <__assert_fail@plt+0x17e48>
   29aec:	cmp	r7, #132	; 0x84
   29af0:	bcc	29a14 <__assert_fail@plt+0x17d68>
   29af4:	add	r3, r2, r3
   29af8:	cmp	r3, r1
   29afc:	bgt	29a14 <__assert_fail@plt+0x17d68>
   29b00:	mov	r1, #1
   29b04:	b	29b18 <__assert_fail@plt+0x17e6c>
   29b08:	add	r1, r1, #1
   29b0c:	cmp	r1, r2
   29b10:	movcs	r0, r2
   29b14:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   29b18:	ldrb	r3, [r0, r1]
   29b1c:	sxtb	r7, r3
   29b20:	cmn	r7, #1
   29b24:	bgt	29a14 <__assert_fail@plt+0x17d68>
   29b28:	cmp	r3, #191	; 0xbf
   29b2c:	bls	29b08 <__assert_fail@plt+0x17e5c>
   29b30:	b	29a14 <__assert_fail@plt+0x17d68>
   29b34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29b38:	add	fp, sp, #24
   29b3c:	ldr	r4, [r1, #4]
   29b40:	mov	r6, r0
   29b44:	mvn	r0, #0
   29b48:	mov	r8, #0
   29b4c:	uxtab	r3, r0, r4
   29b50:	cmp	r3, #6
   29b54:	bhi	29cf0 <__assert_fail@plt+0x18044>
   29b58:	ldr	r0, [r6, #4]
   29b5c:	mov	r9, r1
   29b60:	ldrb	r1, [r0, r2]
   29b64:	add	r7, pc, #4
   29b68:	sxtb	r0, r1
   29b6c:	ldr	pc, [r7, r3, lsl #2]
   29b70:	andeq	r9, r2, ip, lsl #23
   29b74:	strdeq	r9, [r2], -r0
   29b78:	andeq	r9, r2, r0, lsr #23
   29b7c:	strdeq	r9, [r2], -r0
   29b80:	andeq	r9, r2, r8, asr #23
   29b84:	strdeq	r9, [r2], -r0
   29b88:	andeq	r9, r2, r0, asr #23
   29b8c:	ldrb	r3, [r9]
   29b90:	uxtb	r7, r0
   29b94:	cmp	r3, r7
   29b98:	beq	29bfc <__assert_fail@plt+0x17f50>
   29b9c:	b	29cf0 <__assert_fail@plt+0x18044>
   29ba0:	ldr	r3, [r9]
   29ba4:	ubfx	r7, r1, #5, #3
   29ba8:	mov	r5, #1
   29bac:	ldr	r3, [r3, r7, lsl #2]
   29bb0:	and	r7, r1, #31
   29bb4:	tst	r3, r5, lsl r7
   29bb8:	bne	29bfc <__assert_fail@plt+0x17f50>
   29bbc:	b	29cf0 <__assert_fail@plt+0x18044>
   29bc0:	cmp	r0, #0
   29bc4:	blt	29cf0 <__assert_fail@plt+0x18044>
   29bc8:	cmp	r1, #0
   29bcc:	beq	29bec <__assert_fail@plt+0x17f40>
   29bd0:	cmp	r1, #10
   29bd4:	bne	29bfc <__assert_fail@plt+0x17f50>
   29bd8:	ldr	r3, [r6, #84]	; 0x54
   29bdc:	ldrb	r3, [r3, #128]	; 0x80
   29be0:	tst	r3, #64	; 0x40
   29be4:	beq	29cf0 <__assert_fail@plt+0x18044>
   29be8:	b	29bfc <__assert_fail@plt+0x17f50>
   29bec:	ldr	r3, [r6, #84]	; 0x54
   29bf0:	ldrb	r3, [r3, #128]	; 0x80
   29bf4:	tst	r3, #128	; 0x80
   29bf8:	bne	29cf0 <__assert_fail@plt+0x18044>
   29bfc:	movw	r3, #65280	; 0xff00
   29c00:	movt	r3, #3
   29c04:	tst	r4, r3
   29c08:	beq	29c54 <__assert_fail@plt+0x17fa8>
   29c0c:	cmn	r2, #1
   29c10:	ble	29c4c <__assert_fail@plt+0x17fa0>
   29c14:	ldr	r3, [r6, #48]	; 0x30
   29c18:	cmp	r3, r2
   29c1c:	beq	29d10 <__assert_fail@plt+0x18064>
   29c20:	ldr	r3, [r6, #80]	; 0x50
   29c24:	cmp	r3, #2
   29c28:	blt	29c60 <__assert_fail@plt+0x17fb4>
   29c2c:	ldr	r0, [r6, #8]
   29c30:	ldr	r7, [r0, r2, lsl #2]
   29c34:	cmn	r7, #1
   29c38:	bne	29c90 <__assert_fail@plt+0x17fe4>
   29c3c:	sub	r1, r2, #1
   29c40:	cmp	r2, #0
   29c44:	mov	r2, r1
   29c48:	bgt	29c30 <__assert_fail@plt+0x17f84>
   29c4c:	ldr	r1, [r6, #60]	; 0x3c
   29c50:	b	29cb4 <__assert_fail@plt+0x18008>
   29c54:	mov	r8, #1
   29c58:	mov	r0, r8
   29c5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29c60:	ldr	r2, [r6, #68]	; 0x44
   29c64:	ubfx	r3, r1, #5, #3
   29c68:	and	r7, r1, #31
   29c6c:	mov	r1, #1
   29c70:	ldr	r3, [r2, r3, lsl #2]
   29c74:	mov	r2, #0
   29c78:	tst	r3, r1, lsl r7
   29c7c:	bne	29ccc <__assert_fail@plt+0x18020>
   29c80:	mov	r1, #0
   29c84:	cmp	r0, #10
   29c88:	beq	29ca8 <__assert_fail@plt+0x17ffc>
   29c8c:	b	29cb4 <__assert_fail@plt+0x18008>
   29c90:	ldrb	r0, [r6, #78]	; 0x4e
   29c94:	cmp	r0, #0
   29c98:	bne	29d20 <__assert_fail@plt+0x18074>
   29c9c:	mov	r1, #0
   29ca0:	cmp	r7, #10
   29ca4:	bne	29cb4 <__assert_fail@plt+0x18008>
   29ca8:	ldrb	r1, [r6, #77]	; 0x4d
   29cac:	cmp	r1, #0
   29cb0:	movwne	r1, #2
   29cb4:	and	r0, r1, #1
   29cb8:	tst	r4, #1024	; 0x400
   29cbc:	eor	r2, r0, #1
   29cc0:	beq	29ccc <__assert_fail@plt+0x18020>
   29cc4:	cmp	r0, #0
   29cc8:	beq	29cf0 <__assert_fail@plt+0x18044>
   29ccc:	ldr	r0, [r9, #4]
   29cd0:	cmp	r2, #0
   29cd4:	bne	29ce0 <__assert_fail@plt+0x18034>
   29cd8:	ands	r2, r0, #2048	; 0x800
   29cdc:	bne	29cf0 <__assert_fail@plt+0x18044>
   29ce0:	tst	r1, #2
   29ce4:	bne	29cf8 <__assert_fail@plt+0x1804c>
   29ce8:	ands	r2, r0, #8192	; 0x2000
   29cec:	beq	29cf8 <__assert_fail@plt+0x1804c>
   29cf0:	mov	r0, r8
   29cf4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29cf8:	and	r0, r0, #32768	; 0x8000
   29cfc:	mov	r2, #1
   29d00:	and	r1, r1, #8
   29d04:	eor	r0, r2, r0, lsr #15
   29d08:	orr	r0, r0, r1, lsr #3
   29d0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29d10:	ldr	r0, [r6, #88]	; 0x58
   29d14:	and	r0, r0, #2
   29d18:	eor	r1, r0, #10
   29d1c:	b	29cb4 <__assert_fail@plt+0x18008>
   29d20:	mov	r0, r7
   29d24:	bl	11afc <iswalnum@plt>
   29d28:	mov	r1, #1
   29d2c:	mov	r2, #0
   29d30:	cmp	r7, #95	; 0x5f
   29d34:	beq	29ccc <__assert_fail@plt+0x18020>
   29d38:	cmp	r0, #0
   29d3c:	beq	29c9c <__assert_fail@plt+0x17ff0>
   29d40:	b	29ccc <__assert_fail@plt+0x18020>
   29d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d48:	add	fp, sp, #28
   29d4c:	sub	sp, sp, #4
   29d50:	vpush	{d8-d9}
   29d54:	sub	sp, sp, #2256	; 0x8d0
   29d58:	sub	sp, sp, #12288	; 0x3000
   29d5c:	mov	r6, #0
   29d60:	sub	lr, fp, #1024	; 0x400
   29d64:	mov	r8, r1
   29d68:	str	r0, [sp, #148]	; 0x94
   29d6c:	vmov.i32	q4, #0	; 0x00000000
   29d70:	str	r6, [r1, #44]	; 0x2c
   29d74:	str	r6, [r1, #48]	; 0x30
   29d78:	sub	r1, lr, #56	; 0x38
   29d7c:	mov	r0, r1
   29d80:	vst1.64	{d8-d9}, [r0]!
   29d84:	vst1.64	{d8-d9}, [r0]
   29d88:	ldr	r0, [r8, #8]
   29d8c:	cmp	r0, #1
   29d90:	blt	2ad00 <__assert_fail@plt+0x19054>
   29d94:	ldr	r2, [sp, #148]	; 0x94
   29d98:	mov	r7, #0
   29d9c:	mov	r6, #0
   29da0:	str	r8, [sp, #24]
   29da4:	add	r0, r2, #112	; 0x70
   29da8:	str	r0, [sp, #4]
   29dac:	add	r0, r2, #96	; 0x60
   29db0:	str	r0, [sp]
   29db4:	add	r0, r1, #16
   29db8:	str	r0, [sp, #8]
   29dbc:	ldr	r0, [r8, #12]
   29dc0:	ldr	r1, [sp, #148]	; 0x94
   29dc4:	ldr	r0, [r0, r7, lsl #2]
   29dc8:	ldr	r2, [r1]
   29dcc:	add	r9, r2, r0, lsl #3
   29dd0:	ldr	r1, [r9, #4]!
   29dd4:	uxtb	r3, r1
   29dd8:	cmp	r3, #1
   29ddc:	str	r3, [sp, #92]	; 0x5c
   29de0:	bne	29e24 <__assert_fail@plt+0x18178>
   29de4:	str	r2, [sp, #16]
   29de8:	ldrb	r2, [r2, r0, lsl #3]
   29dec:	sub	lr, fp, #1024	; 0x400
   29df0:	str	r0, [sp, #20]
   29df4:	mov	r0, r7
   29df8:	mov	r4, #1
   29dfc:	sub	r7, lr, #56	; 0x38
   29e00:	mov	r5, r7
   29e04:	ubfx	r3, r2, #5, #3
   29e08:	ldr	r8, [sp, #24]
   29e0c:	and	r2, r2, #31
   29e10:	ldr	r7, [r7, r3, lsl #2]
   29e14:	orr	r2, r7, r4, lsl r2
   29e18:	mov	r7, r0
   29e1c:	str	r2, [r5, r3, lsl #2]
   29e20:	b	29f80 <__assert_fail@plt+0x182d4>
   29e24:	cmp	r3, #7
   29e28:	beq	29e78 <__assert_fail@plt+0x181cc>
   29e2c:	cmp	r3, #5
   29e30:	beq	29ed0 <__assert_fail@plt+0x18224>
   29e34:	cmp	r3, #3
   29e38:	bne	2a6fc <__assert_fail@plt+0x18a50>
   29e3c:	str	r2, [sp, #16]
   29e40:	ldr	r2, [r2, r0, lsl #3]
   29e44:	sub	lr, fp, #1024	; 0x400
   29e48:	str	r0, [sp, #20]
   29e4c:	sub	r3, lr, #56	; 0x38
   29e50:	vld1.64	{d16-d17}, [r3]
   29e54:	vld1.32	{d18-d19}, [r2]!
   29e58:	vorr	q8, q8, q9
   29e5c:	vst1.64	{d16-d17}, [r3]
   29e60:	vld1.32	{d16-d17}, [r2]
   29e64:	ldr	r2, [sp, #8]
   29e68:	vld1.32	{d18-d19}, [r2]
   29e6c:	vorr	q8, q9, q8
   29e70:	vst1.32	{d16-d17}, [r2]
   29e74:	b	29f80 <__assert_fail@plt+0x182d4>
   29e78:	str	r0, [sp, #20]
   29e7c:	ldr	r0, [sp, #148]	; 0x94
   29e80:	str	r2, [sp, #16]
   29e84:	mvn	r2, #0
   29e88:	str	r2, [fp, #-1068]	; 0xfffffbd4
   29e8c:	str	r2, [fp, #-1072]	; 0xfffffbd0
   29e90:	str	r2, [fp, #-1076]	; 0xfffffbcc
   29e94:	str	r2, [fp, #-1080]	; 0xfffffbc8
   29e98:	ldr	r3, [r0, #128]	; 0x80
   29e9c:	and	r2, r3, #128	; 0x80
   29ea0:	ands	r3, r3, #64	; 0x40
   29ea4:	beq	29eb0 <__assert_fail@plt+0x18204>
   29ea8:	cmp	r2, #0
   29eac:	beq	29f80 <__assert_fail@plt+0x182d4>
   29eb0:	cmp	r3, #0
   29eb4:	mvn	r3, #1
   29eb8:	movweq	r3, #64510	; 0xfbfe
   29ebc:	movteq	r3, #65535	; 0xffff
   29ec0:	cmp	r2, #0
   29ec4:	mvneq	r3, #1024	; 0x400
   29ec8:	str	r3, [fp, #-1080]	; 0xfffffbc8
   29ecc:	b	29f80 <__assert_fail@plt+0x182d4>
   29ed0:	str	r2, [sp, #16]
   29ed4:	ldr	r2, [sp, #148]	; 0x94
   29ed8:	mov	r4, r7
   29edc:	str	r0, [sp, #20]
   29ee0:	ldr	r2, [r2, #92]	; 0x5c
   29ee4:	cmp	r2, #2
   29ee8:	blt	29f28 <__assert_fail@plt+0x1827c>
   29eec:	ldr	r0, [sp, #148]	; 0x94
   29ef0:	sub	lr, fp, #1024	; 0x400
   29ef4:	sub	r3, lr, #56	; 0x38
   29ef8:	vld1.64	{d16-d17}, [r3]
   29efc:	ldr	r2, [r0, #60]	; 0x3c
   29f00:	vld1.32	{d18-d19}, [r2]!
   29f04:	vorr	q8, q8, q9
   29f08:	vst1.64	{d16-d17}, [r3]
   29f0c:	vld1.32	{d18-d19}, [r2]
   29f10:	ldr	r2, [sp, #8]
   29f14:	vld1.32	{d20-d21}, [r2]
   29f18:	vorr	q9, q10, q9
   29f1c:	vst1.32	{d18-d19}, [r2]
   29f20:	vmov.32	r2, d16[0]
   29f24:	b	29f4c <__assert_fail@plt+0x182a0>
   29f28:	mvn	r2, #0
   29f2c:	str	r2, [fp, #-1052]	; 0xfffffbe4
   29f30:	str	r2, [fp, #-1056]	; 0xfffffbe0
   29f34:	str	r2, [fp, #-1060]	; 0xfffffbdc
   29f38:	str	r2, [fp, #-1064]	; 0xfffffbd8
   29f3c:	str	r2, [fp, #-1068]	; 0xfffffbd4
   29f40:	str	r2, [fp, #-1072]	; 0xfffffbd0
   29f44:	str	r2, [fp, #-1076]	; 0xfffffbcc
   29f48:	str	r2, [fp, #-1080]	; 0xfffffbc8
   29f4c:	ldr	r0, [sp, #148]	; 0x94
   29f50:	ldr	r8, [sp, #24]
   29f54:	ldr	r3, [r0, #128]	; 0x80
   29f58:	ands	r7, r3, #64	; 0x40
   29f5c:	and	r3, r3, #128	; 0x80
   29f60:	biceq	r2, r2, #1024	; 0x400
   29f64:	mov	r7, r4
   29f68:	beq	29f74 <__assert_fail@plt+0x182c8>
   29f6c:	cmp	r3, #0
   29f70:	beq	29f80 <__assert_fail@plt+0x182d4>
   29f74:	cmp	r3, #0
   29f78:	bicne	r2, r2, #1
   29f7c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   29f80:	ldr	sl, [sp, #92]	; 0x5c
   29f84:	movw	r2, #65280	; 0xff00
   29f88:	movt	r2, #3
   29f8c:	ands	r2, r1, r2
   29f90:	beq	2a240 <__assert_fail@plt+0x18594>
   29f94:	tst	r1, #8192	; 0x2000
   29f98:	beq	29fc4 <__assert_fail@plt+0x18318>
   29f9c:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   29fa0:	sub	lr, fp, #1024	; 0x400
   29fa4:	sub	r3, lr, #56	; 0x38
   29fa8:	vst1.64	{d8-d9}, [r3]!
   29fac:	vst1.64	{d8-d9}, [r3]
   29fb0:	tst	r2, #1024	; 0x400
   29fb4:	beq	2a6fc <__assert_fail@plt+0x18a50>
   29fb8:	ldr	sl, [sp, #92]	; 0x5c
   29fbc:	mov	r2, #1024	; 0x400
   29fc0:	str	r2, [fp, #-1080]	; 0xfffffbc8
   29fc4:	tst	r1, #32768	; 0x8000
   29fc8:	bne	2a1c8 <__assert_fail@plt+0x1851c>
   29fcc:	tst	r1, #1024	; 0x400
   29fd0:	beq	2a150 <__assert_fail@plt+0x184a4>
   29fd4:	cmp	sl, #1
   29fd8:	ldrbeq	r2, [r9, #2]
   29fdc:	tsteq	r2, #64	; 0x40
   29fe0:	beq	2a1c8 <__assert_fail@plt+0x1851c>
   29fe4:	ldr	r0, [sp, #148]	; 0x94
   29fe8:	ldr	r2, [r0, #92]	; 0x5c
   29fec:	cmp	r2, #1
   29ff0:	ble	2a080 <__assert_fail@plt+0x183d4>
   29ff4:	ldr	r0, [sp, #148]	; 0x94
   29ff8:	ldr	r3, [sp]
   29ffc:	sub	lr, fp, #1024	; 0x400
   2a000:	ldr	r2, [r0, #60]	; 0x3c
   2a004:	vld1.32	{d16-d17}, [r3]
   2a008:	sub	r3, lr, #56	; 0x38
   2a00c:	vld1.64	{d20-d21}, [r3]
   2a010:	vld1.32	{d18-d19}, [r2]!
   2a014:	vorn	q8, q8, q9
   2a018:	vand	q8, q10, q8
   2a01c:	vst1.64	{d16-d17}, [r3]
   2a020:	vmov.32	r3, d16[1]
   2a024:	vld1.32	{d18-d19}, [r2]
   2a028:	ldr	r2, [sp, #4]
   2a02c:	vld1.32	{d20-d21}, [r2]
   2a030:	ldr	r2, [sp, #8]
   2a034:	vld1.32	{d22-d23}, [r2]
   2a038:	vorn	q9, q10, q9
   2a03c:	vand	q9, q11, q9
   2a040:	vst1.32	{d18-d19}, [r2]
   2a044:	vmov.32	r2, d16[0]
   2a048:	orr	r2, r3, r2
   2a04c:	vmov.32	r3, d17[0]
   2a050:	orr	r2, r2, r3
   2a054:	vmov.32	r3, d17[1]
   2a058:	orr	r2, r2, r3
   2a05c:	vmov.32	r3, d18[0]
   2a060:	orr	r2, r2, r3
   2a064:	vmov.32	r3, d18[1]
   2a068:	orr	r2, r2, r3
   2a06c:	vmov.32	r3, d19[0]
   2a070:	orr	r2, r2, r3
   2a074:	vmov.32	r3, d19[1]
   2a078:	orr	r2, r2, r3
   2a07c:	b	2a144 <__assert_fail@plt+0x18498>
   2a080:	ldr	r4, [sp, #148]	; 0x94
   2a084:	str	r6, [sp, #144]	; 0x90
   2a088:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   2a08c:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   2a090:	str	r7, [sp, #12]
   2a094:	ldr	r5, [r4, #116]	; 0x74
   2a098:	ldr	ip, [r4, #104]	; 0x68
   2a09c:	ldr	r0, [r4, #108]	; 0x6c
   2a0a0:	ldr	r3, [r4, #96]	; 0x60
   2a0a4:	ldr	lr, [r4, #100]	; 0x64
   2a0a8:	ldr	r8, [r4, #112]	; 0x70
   2a0ac:	ldr	sl, [r4, #124]	; 0x7c
   2a0b0:	str	r5, [sp, #136]	; 0x88
   2a0b4:	ldr	r5, [r4, #120]	; 0x78
   2a0b8:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   2a0bc:	and	r2, r2, r0
   2a0c0:	and	ip, r6, ip
   2a0c4:	ldr	r0, [sp, #136]	; 0x88
   2a0c8:	str	r5, [sp, #140]	; 0x8c
   2a0cc:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   2a0d0:	and	r7, r4, r3
   2a0d4:	str	r7, [fp, #-1080]	; 0xfffffbc8
   2a0d8:	and	lr, r5, lr
   2a0dc:	str	lr, [fp, #-1076]	; 0xfffffbcc
   2a0e0:	str	ip, [fp, #-1072]	; 0xfffffbd0
   2a0e4:	str	r2, [fp, #-1068]	; 0xfffffbd4
   2a0e8:	orr	r7, lr, r7
   2a0ec:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   2a0f0:	orr	r7, r7, ip
   2a0f4:	orr	r2, r7, r2
   2a0f8:	ldr	r7, [sp, #12]
   2a0fc:	and	r6, r6, r8
   2a100:	ldr	r8, [sp, #24]
   2a104:	str	r6, [fp, #-1064]	; 0xfffffbd8
   2a108:	orr	r2, r2, r6
   2a10c:	ldr	r6, [sp, #144]	; 0x90
   2a110:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2a114:	and	r4, r4, r0
   2a118:	ldr	r0, [sp, #140]	; 0x8c
   2a11c:	str	r4, [fp, #-1060]	; 0xfffffbdc
   2a120:	orr	r2, r2, r4
   2a124:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   2a128:	and	r3, r3, r0
   2a12c:	str	r3, [fp, #-1056]	; 0xfffffbe0
   2a130:	orr	r2, r2, r3
   2a134:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   2a138:	and	r5, r5, sl
   2a13c:	str	r5, [fp, #-1052]	; 0xfffffbe4
   2a140:	orr	r2, r2, r5
   2a144:	ldr	sl, [sp, #92]	; 0x5c
   2a148:	cmp	r2, #0
   2a14c:	beq	2a6fc <__assert_fail@plt+0x18a50>
   2a150:	tst	r1, #2048	; 0x800
   2a154:	beq	2a240 <__assert_fail@plt+0x18594>
   2a158:	cmp	sl, #1
   2a15c:	bne	2a16c <__assert_fail@plt+0x184c0>
   2a160:	ldrb	r0, [r9, #2]
   2a164:	tst	r0, #64	; 0x40
   2a168:	bne	2a1c8 <__assert_fail@plt+0x1851c>
   2a16c:	ldr	r0, [sp, #148]	; 0x94
   2a170:	sub	lr, fp, #1024	; 0x400
   2a174:	sub	r1, lr, #56	; 0x38
   2a178:	ldr	r0, [r0, #92]	; 0x5c
   2a17c:	cmp	r0, #1
   2a180:	ble	2a1d4 <__assert_fail@plt+0x18528>
   2a184:	ldr	r0, [sp, #148]	; 0x94
   2a188:	ldr	r2, [sp]
   2a18c:	vld1.64	{d20-d21}, [r1]
   2a190:	ldr	r0, [r0, #60]	; 0x3c
   2a194:	vld1.32	{d16-d17}, [r2]
   2a198:	vld1.32	{d18-d19}, [r0]!
   2a19c:	vand	q8, q9, q8
   2a1a0:	vbic	q9, q10, q8
   2a1a4:	vst1.64	{d18-d19}, [r1]
   2a1a8:	ldr	r1, [sp, #4]
   2a1ac:	vld1.32	{d20-d21}, [r0]
   2a1b0:	ldr	r0, [sp, #8]
   2a1b4:	vld1.32	{d16-d17}, [r1]
   2a1b8:	vld1.32	{d22-d23}, [r0]
   2a1bc:	vand	q8, q10, q8
   2a1c0:	vbic	q8, q11, q8
   2a1c4:	b	2a1fc <__assert_fail@plt+0x18550>
   2a1c8:	sub	lr, fp, #1024	; 0x400
   2a1cc:	sub	r0, lr, #56	; 0x38
   2a1d0:	b	2a6f4 <__assert_fail@plt+0x18a48>
   2a1d4:	ldr	r0, [sp]
   2a1d8:	vld1.64	{d18-d19}, [r1]
   2a1dc:	vld1.32	{d16-d17}, [r0]
   2a1e0:	ldr	r0, [sp, #4]
   2a1e4:	vbic	q9, q9, q8
   2a1e8:	vst1.64	{d18-d19}, [r1]
   2a1ec:	vld1.32	{d16-d17}, [r0]
   2a1f0:	ldr	r0, [sp, #8]
   2a1f4:	vld1.32	{d20-d21}, [r0]
   2a1f8:	vbic	q8, q10, q8
   2a1fc:	vst1.32	{d16-d17}, [r0]
   2a200:	vmov.32	r0, d18[0]
   2a204:	vmov.32	r1, d18[1]
   2a208:	orr	r0, r1, r0
   2a20c:	vmov.32	r1, d19[0]
   2a210:	orr	r0, r0, r1
   2a214:	vmov.32	r1, d19[1]
   2a218:	orr	r0, r0, r1
   2a21c:	vmov.32	r1, d16[0]
   2a220:	orr	r0, r0, r1
   2a224:	vmov.32	r1, d16[1]
   2a228:	orr	r0, r0, r1
   2a22c:	vmov.32	r1, d17[0]
   2a230:	orr	r0, r0, r1
   2a234:	vmov.32	r1, d17[1]
   2a238:	orrs	r0, r0, r1
   2a23c:	beq	2a6fc <__assert_fail@plt+0x18a50>
   2a240:	cmp	r6, #1
   2a244:	blt	2a610 <__assert_fail@plt+0x18964>
   2a248:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   2a24c:	ldr	lr, [fp, #-1080]	; 0xfffffbc8
   2a250:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   2a254:	ldr	r1, [fp, #-1072]	; 0xfffffbd0
   2a258:	ldr	r8, [fp, #-1068]	; 0xfffffbd4
   2a25c:	str	r7, [sp, #12]
   2a260:	mov	r9, #0
   2a264:	add	r7, sp, #152	; 0x98
   2a268:	str	r0, [sp, #96]	; 0x60
   2a26c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   2a270:	str	r0, [sp, #136]	; 0x88
   2a274:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   2a278:	str	r0, [sp, #128]	; 0x80
   2a27c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   2a280:	str	r0, [sp, #132]	; 0x84
   2a284:	sub	r0, fp, #6144	; 0x1800
   2a288:	sub	r4, r0, #104	; 0x68
   2a28c:	mov	ip, r1
   2a290:	cmp	sl, #1
   2a294:	str	r5, [sp, #140]	; 0x8c
   2a298:	bne	2a2c0 <__assert_fail@plt+0x18614>
   2a29c:	ldr	r0, [sp, #20]
   2a2a0:	ldr	r1, [sp, #16]
   2a2a4:	mov	r2, #1
   2a2a8:	ldrb	r0, [r1, r0, lsl #3]
   2a2ac:	ubfx	r1, r0, #5, #3
   2a2b0:	and	r0, r0, #31
   2a2b4:	ldr	r1, [r7, r1, lsl #2]
   2a2b8:	tst	r1, r2, lsl r0
   2a2bc:	beq	2a53c <__assert_fail@plt+0x18890>
   2a2c0:	str	r4, [sp, #112]	; 0x70
   2a2c4:	str	r6, [sp, #144]	; 0x90
   2a2c8:	str	r9, [sp, #108]	; 0x6c
   2a2cc:	mov	r3, r8
   2a2d0:	mov	r5, lr
   2a2d4:	ldm	r7, {r0, r2, sl}
   2a2d8:	ldr	r8, [sp, #140]	; 0x8c
   2a2dc:	ldr	r1, [r7, #12]
   2a2e0:	str	ip, [sp, #100]	; 0x64
   2a2e4:	ldr	r4, [sp, #132]	; 0x84
   2a2e8:	ldr	r9, [r7, #20]
   2a2ec:	str	r3, [sp, #104]	; 0x68
   2a2f0:	and	r6, sl, ip
   2a2f4:	ldr	ip, [r7, #16]
   2a2f8:	str	r0, [sp, #124]	; 0x7c
   2a2fc:	and	r0, r0, lr
   2a300:	str	r2, [sp, #116]	; 0x74
   2a304:	and	r2, r2, r8
   2a308:	str	r1, [sp, #120]	; 0x78
   2a30c:	ldr	lr, [r7, #24]
   2a310:	str	r0, [sp, #84]	; 0x54
   2a314:	orr	r0, r2, r0
   2a318:	str	r2, [sp, #80]	; 0x50
   2a31c:	and	r2, r1, r3
   2a320:	ldr	r1, [sp, #136]	; 0x88
   2a324:	str	r6, [sp, #88]	; 0x58
   2a328:	orr	r0, r0, r6
   2a32c:	str	r2, [sp, #76]	; 0x4c
   2a330:	ldr	r6, [sp, #96]	; 0x60
   2a334:	orr	r0, r0, r2
   2a338:	and	r2, ip, r4
   2a33c:	str	r2, [sp, #72]	; 0x48
   2a340:	orr	r0, r0, r2
   2a344:	ldr	r2, [sp, #128]	; 0x80
   2a348:	and	r2, r9, r2
   2a34c:	str	r2, [sp, #68]	; 0x44
   2a350:	orr	r0, r0, r2
   2a354:	and	r2, lr, r1
   2a358:	str	r2, [sp, #64]	; 0x40
   2a35c:	orr	r0, r0, r2
   2a360:	ldr	r2, [r7, #28]
   2a364:	and	r3, r2, r6
   2a368:	orrs	r0, r0, r3
   2a36c:	beq	2a504 <__assert_fail@plt+0x18858>
   2a370:	ldr	r0, [sp, #124]	; 0x7c
   2a374:	str	r3, [sp, #28]
   2a378:	ldr	r3, [sp, #104]	; 0x68
   2a37c:	str	r4, [sp, #132]	; 0x84
   2a380:	bic	r0, r5, r0
   2a384:	str	r0, [sp, #56]	; 0x38
   2a388:	ldr	r0, [sp, #116]	; 0x74
   2a38c:	bic	r0, r8, r0
   2a390:	ldr	r8, [sp, #100]	; 0x64
   2a394:	str	r0, [sp, #52]	; 0x34
   2a398:	bic	r0, r8, sl
   2a39c:	bic	r1, sl, r8
   2a3a0:	str	r0, [sp, #60]	; 0x3c
   2a3a4:	ldr	r0, [sp, #120]	; 0x78
   2a3a8:	bic	r0, r3, r0
   2a3ac:	str	r0, [sp, #48]	; 0x30
   2a3b0:	bic	r0, r4, ip
   2a3b4:	ldr	r4, [sp, #128]	; 0x80
   2a3b8:	str	r0, [sp, #44]	; 0x2c
   2a3bc:	bic	r0, r4, r9
   2a3c0:	str	r0, [sp, #40]	; 0x28
   2a3c4:	ldr	r0, [sp, #136]	; 0x88
   2a3c8:	bic	r0, r0, lr
   2a3cc:	str	r0, [sp, #36]	; 0x24
   2a3d0:	bic	r0, r6, r2
   2a3d4:	bic	r2, r2, r6
   2a3d8:	str	r0, [sp, #32]
   2a3dc:	ldr	r0, [sp, #124]	; 0x7c
   2a3e0:	bic	r8, r0, r5
   2a3e4:	ldr	r5, [sp, #140]	; 0x8c
   2a3e8:	ldr	r0, [sp, #116]	; 0x74
   2a3ec:	str	r1, [sp, #140]	; 0x8c
   2a3f0:	bic	r5, r0, r5
   2a3f4:	orr	r0, r5, r8
   2a3f8:	orr	r0, r0, r1
   2a3fc:	ldr	r1, [sp, #120]	; 0x78
   2a400:	bic	sl, r1, r3
   2a404:	ldr	r1, [sp, #132]	; 0x84
   2a408:	orr	r0, r0, sl
   2a40c:	bic	r1, ip, r1
   2a410:	orr	r3, r0, r1
   2a414:	bic	r0, r9, r4
   2a418:	orr	r4, r3, r0
   2a41c:	ldr	r3, [sp, #136]	; 0x88
   2a420:	bic	r3, lr, r3
   2a424:	orr	r4, r4, r3
   2a428:	orrs	r4, r4, r2
   2a42c:	beq	2a52c <__assert_fail@plt+0x18880>
   2a430:	ldr	r6, [sp, #144]	; 0x90
   2a434:	add	r4, sp, #152	; 0x98
   2a438:	sub	lr, fp, #6144	; 0x1800
   2a43c:	mov	ip, r4
   2a440:	str	r8, [r4, r6, lsl #5]
   2a444:	mov	r4, r5
   2a448:	add	r5, ip, r6, lsl #5
   2a44c:	str	r4, [r5, #4]
   2a450:	ldr	r4, [sp, #140]	; 0x8c
   2a454:	str	r4, [r5, #8]
   2a458:	str	sl, [r5, #12]
   2a45c:	str	r1, [r5, #16]
   2a460:	str	r0, [r5, #20]
   2a464:	ldr	r0, [sp, #84]	; 0x54
   2a468:	str	r3, [r5, #24]
   2a46c:	str	r2, [r5, #28]
   2a470:	ldr	r4, [sp, #112]	; 0x70
   2a474:	sub	r1, lr, #104	; 0x68
   2a478:	str	r0, [r7]
   2a47c:	ldr	r0, [sp, #80]	; 0x50
   2a480:	str	r0, [r7, #4]
   2a484:	ldr	r0, [sp, #88]	; 0x58
   2a488:	str	r0, [r7, #8]
   2a48c:	ldr	r0, [sp, #76]	; 0x4c
   2a490:	str	r0, [r7, #12]
   2a494:	ldr	r0, [sp, #72]	; 0x48
   2a498:	str	r0, [r7, #16]
   2a49c:	ldr	r0, [sp, #68]	; 0x44
   2a4a0:	str	r0, [r7, #20]
   2a4a4:	ldr	r0, [sp, #64]	; 0x40
   2a4a8:	str	r0, [r7, #24]
   2a4ac:	ldr	r0, [sp, #28]
   2a4b0:	str	r0, [r7, #28]
   2a4b4:	add	r0, r6, r6, lsl #1
   2a4b8:	add	r5, r1, r0, lsl #2
   2a4bc:	ldr	r0, [r4, #4]
   2a4c0:	mov	r8, r5
   2a4c4:	str	r0, [r8, #4]!
   2a4c8:	ldr	sl, [r4, #4]
   2a4cc:	cmp	sl, #1
   2a4d0:	blt	2a548 <__assert_fail@plt+0x1889c>
   2a4d4:	str	r0, [r5]
   2a4d8:	lsl	r0, r0, #2
   2a4dc:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2a4e0:	ldr	r9, [sp, #108]	; 0x6c
   2a4e4:	ldr	r6, [sp, #60]	; 0x3c
   2a4e8:	cmp	r0, #0
   2a4ec:	str	r0, [r5, #8]
   2a4f0:	beq	2ac88 <__assert_fail@plt+0x18fdc>
   2a4f4:	ldr	r1, [r4, #8]
   2a4f8:	lsl	r2, sl, #2
   2a4fc:	bl	118ec <memcpy@plt>
   2a500:	b	2a560 <__assert_fail@plt+0x188b4>
   2a504:	ldr	r0, [sp, #104]	; 0x68
   2a508:	ldr	r9, [sp, #108]	; 0x6c
   2a50c:	ldr	r6, [sp, #144]	; 0x90
   2a510:	ldr	r4, [sp, #112]	; 0x70
   2a514:	ldr	sl, [sp, #92]	; 0x5c
   2a518:	ldr	r1, [sp, #100]	; 0x64
   2a51c:	mov	lr, r5
   2a520:	mov	r5, r8
   2a524:	mov	r8, r0
   2a528:	b	2a5f8 <__assert_fail@plt+0x1894c>
   2a52c:	ldr	r9, [sp, #108]	; 0x6c
   2a530:	ldr	r4, [sp, #112]	; 0x70
   2a534:	ldr	r6, [sp, #60]	; 0x3c
   2a538:	b	2a56c <__assert_fail@plt+0x188c0>
   2a53c:	ldr	r5, [sp, #140]	; 0x8c
   2a540:	mov	r1, ip
   2a544:	b	2a5f8 <__assert_fail@plt+0x1894c>
   2a548:	ldr	r9, [sp, #108]	; 0x6c
   2a54c:	ldr	r6, [sp, #60]	; 0x3c
   2a550:	mov	r0, #0
   2a554:	str	r0, [r5]
   2a558:	str	r0, [r5, #4]
   2a55c:	str	r0, [r5, #8]
   2a560:	ldr	r0, [sp, #144]	; 0x90
   2a564:	add	r0, r0, #1
   2a568:	str	r0, [sp, #144]	; 0x90
   2a56c:	ldr	r0, [sp, #24]
   2a570:	ldr	r1, [sp, #12]
   2a574:	ldr	r0, [r0, #12]
   2a578:	ldr	r1, [r0, r1, lsl #2]
   2a57c:	mov	r0, r4
   2a580:	bl	25fb0 <__assert_fail@plt+0x14304>
   2a584:	cmp	r0, #0
   2a588:	beq	2ac04 <__assert_fail@plt+0x18f58>
   2a58c:	ldr	lr, [sp, #56]	; 0x38
   2a590:	ldr	ip, [sp, #52]	; 0x34
   2a594:	ldr	r8, [sp, #48]	; 0x30
   2a598:	ldr	r2, [sp, #44]	; 0x2c
   2a59c:	mov	sl, r6
   2a5a0:	ldr	r3, [sp, #36]	; 0x24
   2a5a4:	ldr	r5, [sp, #32]
   2a5a8:	mov	r1, #0
   2a5ac:	orr	r0, ip, lr
   2a5b0:	orr	r0, r0, r6
   2a5b4:	ldr	r6, [sp, #40]	; 0x28
   2a5b8:	orr	r0, r0, r8
   2a5bc:	orr	r0, r0, r2
   2a5c0:	orr	r0, r0, r6
   2a5c4:	orr	r0, r0, r3
   2a5c8:	orrs	r0, r0, r5
   2a5cc:	movweq	r1, #17
   2a5d0:	cmp	r1, #0
   2a5d4:	bne	2a618 <__assert_fail@plt+0x1896c>
   2a5d8:	str	r6, [sp, #128]	; 0x80
   2a5dc:	mov	r1, sl
   2a5e0:	ldr	sl, [sp, #92]	; 0x5c
   2a5e4:	ldr	r6, [sp, #144]	; 0x90
   2a5e8:	str	r5, [sp, #96]	; 0x60
   2a5ec:	mov	r5, ip
   2a5f0:	str	r3, [sp, #136]	; 0x88
   2a5f4:	str	r2, [sp, #132]	; 0x84
   2a5f8:	add	r9, r9, #1
   2a5fc:	add	r4, r4, #12
   2a600:	add	r7, r7, #32
   2a604:	cmp	r9, r6
   2a608:	blt	2a28c <__assert_fail@plt+0x185e0>
   2a60c:	b	2a63c <__assert_fail@plt+0x18990>
   2a610:	mov	r9, #0
   2a614:	b	2a674 <__assert_fail@plt+0x189c8>
   2a618:	cmp	r1, #17
   2a61c:	bne	2a710 <__assert_fail@plt+0x18a64>
   2a620:	str	r6, [sp, #128]	; 0x80
   2a624:	ldr	r1, [sp, #60]	; 0x3c
   2a628:	ldr	r6, [sp, #144]	; 0x90
   2a62c:	str	r5, [sp, #96]	; 0x60
   2a630:	mov	r5, ip
   2a634:	str	r3, [sp, #136]	; 0x88
   2a638:	str	r2, [sp, #132]	; 0x84
   2a63c:	ldr	r0, [sp, #132]	; 0x84
   2a640:	str	r1, [fp, #-1072]	; 0xfffffbd0
   2a644:	str	r5, [fp, #-1076]	; 0xfffffbcc
   2a648:	str	r8, [fp, #-1068]	; 0xfffffbd4
   2a64c:	ldr	r8, [sp, #24]
   2a650:	ldr	r7, [sp, #12]
   2a654:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2a658:	ldr	r0, [sp, #128]	; 0x80
   2a65c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2a660:	ldr	r0, [sp, #136]	; 0x88
   2a664:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2a668:	ldr	r0, [sp, #96]	; 0x60
   2a66c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2a670:	str	lr, [fp, #-1080]	; 0xfffffbc8
   2a674:	sub	lr, fp, #1024	; 0x400
   2a678:	cmp	r9, r6
   2a67c:	sub	r1, lr, #56	; 0x38
   2a680:	bne	2a6fc <__assert_fail@plt+0x18a50>
   2a684:	mov	r0, r1
   2a688:	sub	lr, fp, #6144	; 0x1800
   2a68c:	mov	r2, #1
   2a690:	mov	sl, r7
   2a694:	vld1.32	{d16-d17}, [r0]!
   2a698:	sub	r3, lr, #104	; 0x68
   2a69c:	vld1.64	{d18-d19}, [r0]
   2a6a0:	add	r0, sp, #152	; 0x98
   2a6a4:	add	r0, r0, r9, lsl #5
   2a6a8:	vst1.32	{d16-d17}, [r0]!
   2a6ac:	vst1.32	{d18-d19}, [r0]
   2a6b0:	ldr	r0, [r8, #12]
   2a6b4:	ldr	r6, [r0, r7, lsl #2]
   2a6b8:	add	r0, r9, r9, lsl #1
   2a6bc:	mov	r7, r1
   2a6c0:	add	r4, r3, r0, lsl #2
   2a6c4:	str	r2, [r3, r0, lsl #2]
   2a6c8:	mov	r0, #4
   2a6cc:	mov	r5, r4
   2a6d0:	str	r2, [r5, #4]!
   2a6d4:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2a6d8:	cmp	r0, #0
   2a6dc:	str	r0, [r4, #8]
   2a6e0:	beq	2ad34 <__assert_fail@plt+0x19088>
   2a6e4:	str	r6, [r0]
   2a6e8:	mov	r0, r7
   2a6ec:	add	r6, r9, #1
   2a6f0:	mov	r7, sl
   2a6f4:	vst1.64	{d8-d9}, [r0]!
   2a6f8:	vst1.64	{d8-d9}, [r0]
   2a6fc:	ldr	r0, [r8, #8]
   2a700:	add	r7, r7, #1
   2a704:	cmp	r7, r0
   2a708:	blt	29dbc <__assert_fail@plt+0x18110>
   2a70c:	b	2a74c <__assert_fail@plt+0x18aa0>
   2a710:	ldr	r1, [sp, #60]	; 0x3c
   2a714:	ldr	r7, [sp, #12]
   2a718:	cmp	r0, #0
   2a71c:	str	r1, [fp, #-1072]	; 0xfffffbd0
   2a720:	str	ip, [fp, #-1076]	; 0xfffffbcc
   2a724:	str	r8, [fp, #-1068]	; 0xfffffbd4
   2a728:	str	r2, [fp, #-1064]	; 0xfffffbd8
   2a72c:	str	r6, [fp, #-1060]	; 0xfffffbdc
   2a730:	ldr	r8, [sp, #24]
   2a734:	ldr	r6, [sp, #144]	; 0x90
   2a738:	str	r3, [fp, #-1056]	; 0xfffffbe0
   2a73c:	str	r5, [fp, #-1052]	; 0xfffffbe4
   2a740:	str	lr, [fp, #-1080]	; 0xfffffbc8
   2a744:	bne	2a6fc <__assert_fail@plt+0x18a50>
   2a748:	b	2a754 <__assert_fail@plt+0x18aa8>
   2a74c:	cmp	r6, #0
   2a750:	ble	2ad00 <__assert_fail@plt+0x19054>
   2a754:	mov	r0, #0
   2a758:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2a75c:	add	r0, r6, #1
   2a760:	str	r0, [fp, #-3140]	; 0xfffff3bc
   2a764:	lsl	r0, r0, #2
   2a768:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2a76c:	cmp	r0, #0
   2a770:	str	r0, [fp, #-3132]	; 0xfffff3c4
   2a774:	mov	r0, #0
   2a778:	movweq	r0, #12
   2a77c:	str	r0, [fp, #-56]	; 0xffffffc8
   2a780:	beq	2ad4c <__assert_fail@plt+0x190a0>
   2a784:	sub	lr, fp, #3072	; 0xc00
   2a788:	vmov.i32	q8, #0	; 0x00000000
   2a78c:	mov	r1, #0
   2a790:	mov	r2, #0
   2a794:	mov	r4, #0
   2a798:	mov	r3, #0
   2a79c:	mov	r8, #0
   2a7a0:	sub	r0, lr, #104	; 0x68
   2a7a4:	sub	lr, fp, #3072	; 0xc00
   2a7a8:	vst1.64	{d16-d17}, [r0]!
   2a7ac:	sub	r5, lr, #68	; 0x44
   2a7b0:	vst1.64	{d16-d17}, [r0]
   2a7b4:	mov	r0, #0
   2a7b8:	str	r0, [sp, #140]	; 0x8c
   2a7bc:	mov	r0, #0
   2a7c0:	str	r0, [sp, #136]	; 0x88
   2a7c4:	mov	r0, #0
   2a7c8:	str	r0, [sp, #132]	; 0x84
   2a7cc:	mov	r0, #0
   2a7d0:	str	r0, [sp, #128]	; 0x80
   2a7d4:	mov	r0, #0
   2a7d8:	str	r0, [sp, #144]	; 0x90
   2a7dc:	mov	r0, #0
   2a7e0:	str	r0, [sp, #112]	; 0x70
   2a7e4:	mov	r0, #0
   2a7e8:	sub	lr, fp, #6144	; 0x1800
   2a7ec:	str	r2, [sp, #124]	; 0x7c
   2a7f0:	str	r3, [sp, #116]	; 0x74
   2a7f4:	str	r4, [sp, #120]	; 0x78
   2a7f8:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2a7fc:	add	r0, r8, r8, lsl #1
   2a800:	sub	r2, lr, #104	; 0x68
   2a804:	add	r0, r2, r0, lsl #2
   2a808:	ldr	r7, [r0, #4]
   2a80c:	cmp	r7, #1
   2a810:	blt	2a868 <__assert_fail@plt+0x18bbc>
   2a814:	ldr	r4, [r0, #8]
   2a818:	mov	r9, #0
   2a81c:	ldr	r2, [sp, #148]	; 0x94
   2a820:	ldr	r0, [r4, r9, lsl #2]
   2a824:	ldr	r2, [r2, #12]
   2a828:	ldr	r0, [r2, r0, lsl #2]
   2a82c:	cmn	r0, #1
   2a830:	beq	2a858 <__assert_fail@plt+0x18bac>
   2a834:	ldr	r1, [sp, #148]	; 0x94
   2a838:	add	r0, r0, r0, lsl #1
   2a83c:	ldr	r1, [r1, #24]
   2a840:	add	r1, r1, r0, lsl #2
   2a844:	mov	r0, r5
   2a848:	bl	25e20 <__assert_fail@plt+0x14174>
   2a84c:	mov	r1, #0
   2a850:	cmp	r0, #0
   2a854:	bne	2ab8c <__assert_fail@plt+0x18ee0>
   2a858:	add	r9, r9, #1
   2a85c:	cmp	r9, r7
   2a860:	blt	2a81c <__assert_fail@plt+0x18b70>
   2a864:	str	r1, [fp, #-56]	; 0xffffffc8
   2a868:	ldr	r1, [sp, #148]	; 0x94
   2a86c:	sub	r0, fp, #56	; 0x38
   2a870:	mov	r2, r5
   2a874:	mov	r3, #0
   2a878:	bl	260ec <__assert_fail@plt+0x14440>
   2a87c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2a880:	mov	r7, r0
   2a884:	sub	lr, fp, #1024	; 0x400
   2a888:	add	r4, sp, #152	; 0x98
   2a88c:	sub	r0, lr, #56	; 0x38
   2a890:	cmp	r7, #0
   2a894:	str	r7, [r0, r8, lsl #2]
   2a898:	bne	2a8a4 <__assert_fail@plt+0x18bf8>
   2a89c:	cmp	r1, #0
   2a8a0:	bne	2ac44 <__assert_fail@plt+0x18f98>
   2a8a4:	ldrsb	r0, [r7, #52]	; 0x34
   2a8a8:	cmn	r0, #1
   2a8ac:	ble	2a8cc <__assert_fail@plt+0x18c20>
   2a8b0:	sub	lr, fp, #3072	; 0xc00
   2a8b4:	sub	r0, lr, #56	; 0x38
   2a8b8:	sub	lr, fp, #2048	; 0x800
   2a8bc:	str	r7, [r0, r8, lsl #2]
   2a8c0:	sub	r0, lr, #56	; 0x38
   2a8c4:	str	r7, [r0, r8, lsl #2]
   2a8c8:	b	2a95c <__assert_fail@plt+0x18cb0>
   2a8cc:	ldr	r1, [sp, #148]	; 0x94
   2a8d0:	sub	r0, fp, #56	; 0x38
   2a8d4:	mov	r2, r5
   2a8d8:	mov	r3, #1
   2a8dc:	bl	260ec <__assert_fail@plt+0x14440>
   2a8e0:	sub	lr, fp, #2048	; 0x800
   2a8e4:	cmp	r0, #0
   2a8e8:	sub	r1, lr, #56	; 0x38
   2a8ec:	str	r0, [r1, r8, lsl #2]
   2a8f0:	bne	2a900 <__assert_fail@plt+0x18c54>
   2a8f4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2a8f8:	cmp	r1, #0
   2a8fc:	bne	2ac44 <__assert_fail@plt+0x18f98>
   2a900:	cmp	r7, r0
   2a904:	beq	2a928 <__assert_fail@plt+0x18c7c>
   2a908:	ldr	r0, [sp, #148]	; 0x94
   2a90c:	ldr	r1, [sp, #112]	; 0x70
   2a910:	ldr	r0, [r0, #92]	; 0x5c
   2a914:	cmp	r0, #1
   2a918:	mov	r0, #0
   2a91c:	movwgt	r0, #1
   2a920:	orr	r1, r1, r0
   2a924:	str	r1, [sp, #112]	; 0x70
   2a928:	ldr	r1, [sp, #148]	; 0x94
   2a92c:	sub	r0, fp, #56	; 0x38
   2a930:	mov	r2, r5
   2a934:	mov	r3, #2
   2a938:	bl	260ec <__assert_fail@plt+0x14440>
   2a93c:	sub	lr, fp, #3072	; 0xc00
   2a940:	cmp	r0, #0
   2a944:	sub	r1, lr, #56	; 0x38
   2a948:	str	r0, [r1, r8, lsl #2]
   2a94c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2a950:	bne	2a95c <__assert_fail@plt+0x18cb0>
   2a954:	cmp	r1, #0
   2a958:	bne	2ac44 <__assert_fail@plt+0x18f98>
   2a95c:	ldr	r0, [r4, r8, lsl #5]
   2a960:	ldr	r2, [sp, #144]	; 0x90
   2a964:	mov	r9, r6
   2a968:	orr	r2, r2, r0
   2a96c:	add	r0, r4, r8, lsl #5
   2a970:	mov	r4, r5
   2a974:	add	r8, r8, #1
   2a978:	str	r2, [sp, #144]	; 0x90
   2a97c:	cmp	r8, r9
   2a980:	ldmib	r0, {ip, lr}
   2a984:	ldr	r7, [r0, #12]
   2a988:	ldr	r3, [r0, #16]
   2a98c:	ldr	r5, [r0, #20]
   2a990:	ldr	r6, [r0, #24]
   2a994:	ldr	r0, [r0, #28]
   2a998:	ldr	r2, [sp, #140]	; 0x8c
   2a99c:	orr	r2, r2, r0
   2a9a0:	mov	r0, r9
   2a9a4:	str	r2, [sp, #140]	; 0x8c
   2a9a8:	ldr	r2, [sp, #124]	; 0x7c
   2a9ac:	orr	r2, r2, r6
   2a9b0:	ldr	r6, [sp, #136]	; 0x88
   2a9b4:	orr	r6, r6, r5
   2a9b8:	mov	r5, r4
   2a9bc:	ldr	r4, [sp, #120]	; 0x78
   2a9c0:	str	r6, [sp, #136]	; 0x88
   2a9c4:	mov	r6, r9
   2a9c8:	orr	r4, r4, r3
   2a9cc:	ldr	r3, [sp, #132]	; 0x84
   2a9d0:	orr	r3, r3, r7
   2a9d4:	str	r3, [sp, #132]	; 0x84
   2a9d8:	ldr	r3, [sp, #128]	; 0x80
   2a9dc:	orr	r3, r3, lr
   2a9e0:	str	r3, [sp, #128]	; 0x80
   2a9e4:	ldr	r3, [sp, #116]	; 0x74
   2a9e8:	orr	r3, r3, ip
   2a9ec:	blt	2a7e4 <__assert_fail@plt+0x18b38>
   2a9f0:	ldr	r7, [sp, #144]	; 0x90
   2a9f4:	ldr	r0, [sp, #128]	; 0x80
   2a9f8:	str	r3, [fp, #-3172]	; 0xfffff39c
   2a9fc:	ldr	sl, [sp, #112]	; 0x70
   2aa00:	str	r7, [fp, #-3176]	; 0xfffff398
   2aa04:	str	r0, [fp, #-3168]	; 0xfffff3a0
   2aa08:	ldr	r0, [sp, #132]	; 0x84
   2aa0c:	tst	sl, #1
   2aa10:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2aa14:	ldr	r0, [sp, #136]	; 0x88
   2aa18:	str	r4, [fp, #-3160]	; 0xfffff3a8
   2aa1c:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2aa20:	ldr	r0, [sp, #140]	; 0x8c
   2aa24:	str	r2, [fp, #-3152]	; 0xfffff3b0
   2aa28:	str	r0, [fp, #-3148]	; 0xfffff3b4
   2aa2c:	mov	r0, #4
   2aa30:	bne	2ad58 <__assert_fail@plt+0x190ac>
   2aa34:	mov	r1, #256	; 0x100
   2aa38:	bl	1af9c <__assert_fail@plt+0x92f0>
   2aa3c:	ldr	r1, [sp, #24]
   2aa40:	sub	lr, fp, #3072	; 0xc00
   2aa44:	cmp	r0, #0
   2aa48:	sub	r8, lr, #104	; 0x68
   2aa4c:	str	r0, [r1, #44]	; 0x2c
   2aa50:	beq	2abd0 <__assert_fail@plt+0x18f24>
   2aa54:	mov	r1, #0
   2aa58:	mov	r3, r7
   2aa5c:	mov	r2, #0
   2aa60:	add	r4, sp, #152	; 0x98
   2aa64:	cmp	r3, #0
   2aa68:	beq	2ab08 <__assert_fail@plt+0x18e5c>
   2aa6c:	ldr	r7, [sp, #148]	; 0x94
   2aa70:	lsl	r6, r2, #5
   2aa74:	mov	r5, #1
   2aa78:	add	r7, r7, r2, lsl #2
   2aa7c:	add	ip, r7, #96	; 0x60
   2aa80:	b	2aad4 <__assert_fail@plt+0x18e28>
   2aa84:	mov	lr, #0
   2aa88:	str	sl, [sp, #112]	; 0x70
   2aa8c:	ldr	r7, [r4, lr, lsl #3]
   2aa90:	add	lr, lr, #4
   2aa94:	tst	r7, r5
   2aa98:	beq	2aa8c <__assert_fail@plt+0x18de0>
   2aa9c:	ldr	r7, [ip]
   2aaa0:	mov	sl, r4
   2aaa4:	sub	r4, fp, #1024	; 0x400
   2aaa8:	sub	r4, r4, #56	; 0x38
   2aaac:	tst	r7, r5
   2aab0:	sub	r7, fp, #2048	; 0x800
   2aab4:	sub	r7, r7, #56	; 0x38
   2aab8:	moveq	r7, r4
   2aabc:	mov	r4, sl
   2aac0:	ldr	sl, [sp, #112]	; 0x70
   2aac4:	add	r7, r7, lr
   2aac8:	ldr	r7, [r7, #-4]
   2aacc:	str	r7, [r0, r6, lsl #2]
   2aad0:	b	2aadc <__assert_fail@plt+0x18e30>
   2aad4:	tst	r3, #1
   2aad8:	bne	2aa84 <__assert_fail@plt+0x18dd8>
   2aadc:	lsr	r7, r3, #1
   2aae0:	cmp	r1, r3, lsr #1
   2aae4:	add	r6, r6, #1
   2aae8:	lsl	r5, r5, #1
   2aaec:	mov	r3, r7
   2aaf0:	bne	2aad4 <__assert_fail@plt+0x18e28>
   2aaf4:	b	2ab08 <__assert_fail@plt+0x18e5c>
   2aaf8:	ldr	r3, [r8, r2, lsl #2]
   2aafc:	add	r4, r4, #4
   2ab00:	cmp	r3, #0
   2ab04:	bne	2aa6c <__assert_fail@plt+0x18dc0>
   2ab08:	add	r2, r2, #1
   2ab0c:	cmp	r2, #8
   2ab10:	bne	2aaf8 <__assert_fail@plt+0x18e4c>
   2ab14:	ldr	r7, [sp, #144]	; 0x90
   2ab18:	tst	r7, #1024	; 0x400
   2ab1c:	beq	2ab60 <__assert_fail@plt+0x18eb4>
   2ab20:	mov	r1, #0
   2ab24:	add	r2, sp, #152	; 0x98
   2ab28:	add	r3, r2, r1, lsl #5
   2ab2c:	ldrb	r3, [r3, #1]
   2ab30:	tst	r3, #4
   2ab34:	bne	2ab48 <__assert_fail@plt+0x18e9c>
   2ab38:	add	r1, r1, #1
   2ab3c:	cmp	r1, r9
   2ab40:	blt	2ab28 <__assert_fail@plt+0x18e7c>
   2ab44:	b	2ab60 <__assert_fail@plt+0x18eb4>
   2ab48:	sub	lr, fp, #3072	; 0xc00
   2ab4c:	tst	sl, #1
   2ab50:	sub	r2, lr, #56	; 0x38
   2ab54:	ldr	r1, [r2, r1, lsl #2]
   2ab58:	str	r1, [r0, #40]	; 0x28
   2ab5c:	strne	r1, [r0, #1064]	; 0x428
   2ab60:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2ab64:	bl	1b22c <__assert_fail@plt+0x9580>
   2ab68:	sub	lr, fp, #6144	; 0x1800
   2ab6c:	sub	r0, lr, #104	; 0x68
   2ab70:	add	r4, r0, #8
   2ab74:	ldr	r0, [r4], #12
   2ab78:	bl	1b22c <__assert_fail@plt+0x9580>
   2ab7c:	subs	r9, r9, #1
   2ab80:	bne	2ab74 <__assert_fail@plt+0x18ec8>
   2ab84:	mov	r0, #1
   2ab88:	b	2ad24 <__assert_fail@plt+0x19078>
   2ab8c:	ldr	r1, [sp, #116]	; 0x74
   2ab90:	str	r0, [fp, #-56]	; 0xffffffc8
   2ab94:	str	r1, [fp, #-3172]	; 0xfffff39c
   2ab98:	ldr	r1, [sp, #144]	; 0x90
   2ab9c:	str	r1, [fp, #-3176]	; 0xfffff398
   2aba0:	ldr	r1, [sp, #128]	; 0x80
   2aba4:	str	r1, [fp, #-3168]	; 0xfffff3a0
   2aba8:	ldr	r1, [sp, #132]	; 0x84
   2abac:	str	r1, [fp, #-3164]	; 0xfffff3a4
   2abb0:	ldr	r1, [sp, #120]	; 0x78
   2abb4:	str	r1, [fp, #-3160]	; 0xfffff3a8
   2abb8:	ldr	r1, [sp, #136]	; 0x88
   2abbc:	str	r1, [fp, #-3156]	; 0xfffff3ac
   2abc0:	ldr	r1, [sp, #124]	; 0x7c
   2abc4:	str	r1, [fp, #-3152]	; 0xfffff3b0
   2abc8:	ldr	r1, [sp, #140]	; 0x8c
   2abcc:	str	r1, [fp, #-3148]	; 0xfffff3b4
   2abd0:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2abd4:	bl	1b22c <__assert_fail@plt+0x9580>
   2abd8:	cmp	r6, #1
   2abdc:	blt	2abfc <__assert_fail@plt+0x18f50>
   2abe0:	sub	lr, fp, #6144	; 0x1800
   2abe4:	sub	r0, lr, #104	; 0x68
   2abe8:	add	r4, r0, #8
   2abec:	ldr	r0, [r4], #12
   2abf0:	bl	1b22c <__assert_fail@plt+0x9580>
   2abf4:	subs	r6, r6, #1
   2abf8:	bne	2abec <__assert_fail@plt+0x18f40>
   2abfc:	mov	r0, #0
   2ac00:	b	2ad24 <__assert_fail@plt+0x19078>
   2ac04:	ldr	r0, [sp, #52]	; 0x34
   2ac08:	str	r6, [fp, #-1072]	; 0xfffffbd0
   2ac0c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2ac10:	ldr	r0, [sp, #48]	; 0x30
   2ac14:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2ac18:	ldr	r0, [sp, #44]	; 0x2c
   2ac1c:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2ac20:	ldr	r0, [sp, #40]	; 0x28
   2ac24:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2ac28:	ldr	r0, [sp, #36]	; 0x24
   2ac2c:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2ac30:	ldr	r0, [sp, #32]
   2ac34:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2ac38:	ldr	r0, [sp, #56]	; 0x38
   2ac3c:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2ac40:	b	2acd0 <__assert_fail@plt+0x19024>
   2ac44:	ldr	r0, [sp, #116]	; 0x74
   2ac48:	str	r0, [fp, #-3172]	; 0xfffff39c
   2ac4c:	ldr	r0, [sp, #144]	; 0x90
   2ac50:	str	r0, [fp, #-3176]	; 0xfffff398
   2ac54:	ldr	r0, [sp, #128]	; 0x80
   2ac58:	str	r0, [fp, #-3168]	; 0xfffff3a0
   2ac5c:	ldr	r0, [sp, #132]	; 0x84
   2ac60:	str	r0, [fp, #-3164]	; 0xfffff3a4
   2ac64:	ldr	r0, [sp, #120]	; 0x78
   2ac68:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2ac6c:	ldr	r0, [sp, #136]	; 0x88
   2ac70:	str	r0, [fp, #-3156]	; 0xfffff3ac
   2ac74:	ldr	r0, [sp, #124]	; 0x7c
   2ac78:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2ac7c:	ldr	r0, [sp, #140]	; 0x8c
   2ac80:	str	r0, [fp, #-3148]	; 0xfffff3b4
   2ac84:	b	2abd0 <__assert_fail@plt+0x18f24>
   2ac88:	ldr	r0, [sp, #52]	; 0x34
   2ac8c:	str	r6, [fp, #-1072]	; 0xfffffbd0
   2ac90:	str	r0, [fp, #-1076]	; 0xfffffbcc
   2ac94:	ldr	r0, [sp, #48]	; 0x30
   2ac98:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2ac9c:	ldr	r0, [sp, #44]	; 0x2c
   2aca0:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2aca4:	ldr	r0, [sp, #40]	; 0x28
   2aca8:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2acac:	ldr	r0, [sp, #36]	; 0x24
   2acb0:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2acb4:	ldr	r0, [sp, #32]
   2acb8:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2acbc:	ldr	r0, [sp, #56]	; 0x38
   2acc0:	str	r0, [fp, #-1080]	; 0xfffffbc8
   2acc4:	mov	r0, #0
   2acc8:	str	r0, [r8]
   2accc:	str	r0, [r5]
   2acd0:	ldr	r8, [sp, #24]
   2acd4:	ldr	r9, [sp, #144]	; 0x90
   2acd8:	cmp	r9, #1
   2acdc:	blt	2acfc <__assert_fail@plt+0x19050>
   2ace0:	sub	lr, fp, #6144	; 0x1800
   2ace4:	sub	r0, lr, #104	; 0x68
   2ace8:	add	r4, r0, #8
   2acec:	ldr	r0, [r4], #12
   2acf0:	bl	1b22c <__assert_fail@plt+0x9580>
   2acf4:	subs	r9, r9, #1
   2acf8:	bne	2acec <__assert_fail@plt+0x19040>
   2acfc:	mvn	r6, #0
   2ad00:	mov	r0, #0
   2ad04:	cmp	r6, #0
   2ad08:	bne	2ad24 <__assert_fail@plt+0x19078>
   2ad0c:	mov	r0, #4
   2ad10:	mov	r1, #256	; 0x100
   2ad14:	bl	1af9c <__assert_fail@plt+0x92f0>
   2ad18:	cmp	r0, #0
   2ad1c:	str	r0, [r8, #44]	; 0x2c
   2ad20:	movwne	r0, #1
   2ad24:	sub	sp, fp, #48	; 0x30
   2ad28:	vpop	{d8-d9}
   2ad2c:	add	sp, sp, #4
   2ad30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad34:	mov	r0, #0
   2ad38:	str	r0, [r5]
   2ad3c:	str	r0, [r4]
   2ad40:	cmp	r9, #1
   2ad44:	bge	2ace0 <__assert_fail@plt+0x19034>
   2ad48:	b	2acfc <__assert_fail@plt+0x19050>
   2ad4c:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   2ad50:	bl	1b22c <__assert_fail@plt+0x9580>
   2ad54:	b	2abe0 <__assert_fail@plt+0x18f34>
   2ad58:	mov	r1, #512	; 0x200
   2ad5c:	bl	1af9c <__assert_fail@plt+0x92f0>
   2ad60:	ldr	r1, [sp, #24]
   2ad64:	cmp	r0, #0
   2ad68:	str	r0, [r1, #48]	; 0x30
   2ad6c:	beq	2abd0 <__assert_fail@plt+0x18f24>
   2ad70:	sub	lr, fp, #1024	; 0x400
   2ad74:	mov	r3, #0
   2ad78:	add	r8, sp, #152	; 0x98
   2ad7c:	mov	r5, r7
   2ad80:	mov	r6, #0
   2ad84:	sub	r1, lr, #56	; 0x38
   2ad88:	sub	lr, r1, #4
   2ad8c:	sub	r1, fp, #2048	; 0x800
   2ad90:	sub	r1, r1, #56	; 0x38
   2ad94:	sub	ip, r1, #4
   2ad98:	cmp	r5, #0
   2ad9c:	beq	2ae30 <__assert_fail@plt+0x19184>
   2ada0:	lsl	r4, r6, #5
   2ada4:	mov	r1, #1
   2ada8:	b	2adf4 <__assert_fail@plt+0x19148>
   2adac:	mov	r2, r8
   2adb0:	str	lr, [sp, #148]	; 0x94
   2adb4:	mov	sl, lr
   2adb8:	mov	lr, ip
   2adbc:	ldr	r7, [r2], #32
   2adc0:	add	sl, sl, #4
   2adc4:	add	lr, lr, #4
   2adc8:	tst	r7, r1
   2adcc:	beq	2adbc <__assert_fail@plt+0x19110>
   2add0:	ldr	r2, [sl]
   2add4:	mov	r7, r0
   2add8:	str	r2, [r7, r4, lsl #2]!
   2addc:	ldr	r2, [lr]
   2ade0:	ldr	sl, [sp, #112]	; 0x70
   2ade4:	ldr	lr, [sp, #148]	; 0x94
   2ade8:	str	r2, [r7, #1024]	; 0x400
   2adec:	ldr	r7, [sp, #144]	; 0x90
   2adf0:	b	2adfc <__assert_fail@plt+0x19150>
   2adf4:	tst	r5, #1
   2adf8:	bne	2adac <__assert_fail@plt+0x19100>
   2adfc:	lsr	r2, r5, #1
   2ae00:	cmp	r3, r5, lsr #1
   2ae04:	add	r4, r4, #1
   2ae08:	lsl	r1, r1, #1
   2ae0c:	mov	r5, r2
   2ae10:	bne	2adf4 <__assert_fail@plt+0x19148>
   2ae14:	b	2ae30 <__assert_fail@plt+0x19184>
   2ae18:	sub	r1, fp, #3072	; 0xc00
   2ae1c:	add	r8, r8, #4
   2ae20:	sub	r1, r1, #104	; 0x68
   2ae24:	ldr	r5, [r1, r6, lsl #2]
   2ae28:	cmp	r5, #0
   2ae2c:	bne	2ada0 <__assert_fail@plt+0x190f4>
   2ae30:	add	r6, r6, #1
   2ae34:	cmp	r6, #8
   2ae38:	bne	2ae18 <__assert_fail@plt+0x1916c>
   2ae3c:	b	2ab18 <__assert_fail@plt+0x18e6c>
   2ae40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae44:	add	fp, sp, #28
   2ae48:	sub	sp, sp, #52	; 0x34
   2ae4c:	ldr	r4, [r1, #8]
   2ae50:	ldr	r8, [r1, #12]
   2ae54:	mov	r6, r0
   2ae58:	mov	r0, #1
   2ae5c:	mov	r5, r1
   2ae60:	str	r0, [sp, #44]	; 0x2c
   2ae64:	str	r0, [sp, #40]	; 0x28
   2ae68:	mov	r0, #4
   2ae6c:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2ae70:	cmp	r0, #0
   2ae74:	str	r0, [sp, #48]	; 0x30
   2ae78:	beq	2b274 <__assert_fail@plt+0x195c8>
   2ae7c:	str	r4, [r0]
   2ae80:	add	r3, sp, #40	; 0x28
   2ae84:	mov	r0, r6
   2ae88:	mov	r1, r5
   2ae8c:	mov	r2, r8
   2ae90:	str	r6, [sp, #24]
   2ae94:	bl	2b290 <__assert_fail@plt+0x195e4>
   2ae98:	cmp	r0, #0
   2ae9c:	bne	2b22c <__assert_fail@plt+0x19580>
   2aea0:	add	r0, r5, #16
   2aea4:	mov	r1, #0
   2aea8:	str	r5, [sp, #16]
   2aeac:	str	r0, [sp, #20]
   2aeb0:	cmp	r8, #1
   2aeb4:	blt	2b234 <__assert_fail@plt+0x19588>
   2aeb8:	ldr	r0, [r5]
   2aebc:	ldr	r7, [sp, #24]
   2aec0:	ldr	r2, [r0, r8, lsl #2]
   2aec4:	cmp	r2, #0
   2aec8:	mov	r2, #0
   2aecc:	addeq	r2, r1, #1
   2aed0:	ldr	r1, [r7, #120]	; 0x78
   2aed4:	cmp	r2, r1
   2aed8:	bgt	2b23c <__assert_fail@plt+0x19590>
   2aedc:	mov	r0, #0
   2aee0:	str	r8, [sp, #28]
   2aee4:	sub	r8, r8, #1
   2aee8:	str	r2, [sp, #12]
   2aeec:	str	r0, [sp, #44]	; 0x2c
   2aef0:	ldr	r0, [r7, #100]	; 0x64
   2aef4:	ldr	r6, [r0, r8, lsl #2]
   2aef8:	cmp	r6, #0
   2aefc:	beq	2b20c <__assert_fail@plt+0x19560>
   2af00:	ldr	r0, [r6, #20]
   2af04:	cmp	r0, #1
   2af08:	blt	2b20c <__assert_fail@plt+0x19560>
   2af0c:	ldr	r0, [r7, #84]	; 0x54
   2af10:	mov	r9, #0
   2af14:	str	r6, [sp, #32]
   2af18:	str	r0, [sp, #36]	; 0x24
   2af1c:	b	2afd0 <__assert_fail@plt+0x19324>
   2af20:	cmp	r2, r1
   2af24:	bne	2af50 <__assert_fail@plt+0x192a4>
   2af28:	lsl	r0, r2, #1
   2af2c:	lsl	r1, r2, #3
   2af30:	str	r0, [sp, #40]	; 0x28
   2af34:	ldr	r0, [sp, #48]	; 0x30
   2af38:	bl	1b388 <__assert_fail@plt+0x96dc>
   2af3c:	cmp	r0, #0
   2af40:	beq	2b288 <__assert_fail@plt+0x195dc>
   2af44:	str	r0, [sp, #48]	; 0x30
   2af48:	ldr	r1, [sp, #44]	; 0x2c
   2af4c:	b	2af54 <__assert_fail@plt+0x192a8>
   2af50:	ldr	r0, [sp, #48]	; 0x30
   2af54:	ldr	r2, [r0]
   2af58:	cmp	r2, sl
   2af5c:	ble	2af98 <__assert_fail@plt+0x192ec>
   2af60:	cmp	r1, #1
   2af64:	blt	2afc8 <__assert_fail@plt+0x1931c>
   2af68:	add	r2, r0, r1, lsl #2
   2af6c:	add	r1, r1, #1
   2af70:	mov	r3, r2
   2af74:	ldr	r7, [r3, #-4]!
   2af78:	sub	r1, r1, #1
   2af7c:	cmp	r1, #1
   2af80:	str	r7, [r2]
   2af84:	mov	r2, r3
   2af88:	bgt	2af74 <__assert_fail@plt+0x192c8>
   2af8c:	ldr	r7, [sp, #24]
   2af90:	sub	r1, r1, #1
   2af94:	b	2afc8 <__assert_fail@plt+0x1931c>
   2af98:	add	r2, r0, r1, lsl #2
   2af9c:	ldr	r3, [r2, #-4]
   2afa0:	cmp	r3, sl
   2afa4:	ble	2afc8 <__assert_fail@plt+0x1931c>
   2afa8:	sub	r1, r1, #2
   2afac:	str	r3, [r2]
   2afb0:	sub	r1, r1, #1
   2afb4:	ldr	r3, [r2, #-8]
   2afb8:	sub	r2, r2, #4
   2afbc:	cmp	r3, sl
   2afc0:	bgt	2afac <__assert_fail@plt+0x19300>
   2afc4:	add	r1, r1, #2
   2afc8:	str	sl, [r0, r1, lsl #2]
   2afcc:	b	2b1c8 <__assert_fail@plt+0x1951c>
   2afd0:	ldr	r0, [r6, #24]
   2afd4:	ldr	sl, [r0, r9, lsl #2]
   2afd8:	ldr	r0, [sp, #36]	; 0x24
   2afdc:	ldr	r0, [r0]
   2afe0:	add	r0, r0, sl, lsl #3
   2afe4:	ldrb	r0, [r0, #6]
   2afe8:	tst	r0, #16
   2afec:	bne	2b090 <__assert_fail@plt+0x193e4>
   2aff0:	ldr	r0, [sp, #36]	; 0x24
   2aff4:	mov	r2, r8
   2aff8:	ldr	r0, [r0]
   2affc:	add	r1, r0, sl, lsl #3
   2b000:	mov	r0, r7
   2b004:	bl	29b34 <__assert_fail@plt+0x17e88>
   2b008:	cmp	r0, #0
   2b00c:	beq	2b1fc <__assert_fail@plt+0x19550>
   2b010:	ldr	r0, [r5]
   2b014:	ldr	r1, [sp, #28]
   2b018:	ldr	r0, [r0, r1, lsl #2]
   2b01c:	cmp	r0, #0
   2b020:	beq	2b1fc <__assert_fail@plt+0x19550>
   2b024:	ldr	r2, [r0, #8]
   2b028:	cmp	r2, #1
   2b02c:	blt	2b1fc <__assert_fail@plt+0x19550>
   2b030:	ldr	r1, [sp, #36]	; 0x24
   2b034:	ldr	r0, [r0, #12]
   2b038:	subs	r3, r2, #1
   2b03c:	mov	r2, #0
   2b040:	ldr	r1, [r1, #12]
   2b044:	ldr	r1, [r1, sl, lsl #2]
   2b048:	beq	2b070 <__assert_fail@plt+0x193c4>
   2b04c:	mov	r5, #1
   2b050:	add	r7, r2, r3
   2b054:	lsr	r6, r7, #1
   2b058:	ldr	r4, [r0, r6, lsl #2]
   2b05c:	cmp	r4, r1
   2b060:	movge	r3, r6
   2b064:	addlt	r2, r5, r7, lsr #1
   2b068:	cmp	r2, r3
   2b06c:	bcc	2b050 <__assert_fail@plt+0x193a4>
   2b070:	ldr	r2, [r0, r2, lsl #2]
   2b074:	ldr	r5, [sp, #16]
   2b078:	ldr	r7, [sp, #24]
   2b07c:	ldr	r6, [sp, #32]
   2b080:	mov	r0, #1
   2b084:	cmp	r2, r1
   2b088:	beq	2b170 <__assert_fail@plt+0x194c4>
   2b08c:	b	2b1fc <__assert_fail@plt+0x19550>
   2b090:	ldr	r4, [r7, #84]	; 0x54
   2b094:	mov	r6, r5
   2b098:	ldr	r5, [r5, #12]
   2b09c:	mov	r1, sl
   2b0a0:	mov	r2, r7
   2b0a4:	mov	r3, r8
   2b0a8:	mov	r0, r4
   2b0ac:	bl	29840 <__assert_fail@plt+0x17b94>
   2b0b0:	cmp	r0, #1
   2b0b4:	blt	2b0d8 <__assert_fail@plt+0x1942c>
   2b0b8:	add	r1, r0, r8
   2b0bc:	mov	r3, r8
   2b0c0:	cmp	r1, r5
   2b0c4:	ble	2b0ec <__assert_fail@plt+0x19440>
   2b0c8:	mov	r5, r6
   2b0cc:	ldr	r6, [sp, #32]
   2b0d0:	mov	r8, r3
   2b0d4:	b	2b170 <__assert_fail@plt+0x194c4>
   2b0d8:	mov	r5, r6
   2b0dc:	ldr	r6, [sp, #32]
   2b0e0:	cmp	r0, #0
   2b0e4:	bne	2b170 <__assert_fail@plt+0x194c4>
   2b0e8:	b	2aff0 <__assert_fail@plt+0x19344>
   2b0ec:	ldr	r2, [r6]
   2b0f0:	mov	r5, r6
   2b0f4:	ldr	r6, [sp, #32]
   2b0f8:	mov	r8, r3
   2b0fc:	ldr	r2, [r2, r1, lsl #2]
   2b100:	cmp	r2, #0
   2b104:	beq	2aff0 <__assert_fail@plt+0x19344>
   2b108:	ldr	r3, [r2, #8]
   2b10c:	cmp	r3, #1
   2b110:	blt	2aff0 <__assert_fail@plt+0x19344>
   2b114:	ldr	r1, [r4, #12]
   2b118:	ldr	r2, [r2, #12]
   2b11c:	subs	r4, r3, #1
   2b120:	mov	r3, #0
   2b124:	ldr	ip, [r1, sl, lsl #2]
   2b128:	beq	2b150 <__assert_fail@plt+0x194a4>
   2b12c:	mov	r5, #1
   2b130:	add	r6, r3, r4
   2b134:	lsr	r7, r6, #1
   2b138:	ldr	r1, [r2, r7, lsl #2]
   2b13c:	cmp	r1, ip
   2b140:	movge	r4, r7
   2b144:	addlt	r3, r5, r6, lsr #1
   2b148:	cmp	r3, r4
   2b14c:	bcc	2b130 <__assert_fail@plt+0x19484>
   2b150:	ldr	r5, [sp, #16]
   2b154:	ldr	r7, [sp, #24]
   2b158:	ldr	r6, [sp, #32]
   2b15c:	cmp	r0, #0
   2b160:	beq	2aff0 <__assert_fail@plt+0x19344>
   2b164:	ldr	r1, [r2, r3, lsl #2]
   2b168:	cmp	r1, ip
   2b16c:	bne	2aff0 <__assert_fail@plt+0x19344>
   2b170:	ldr	r1, [r5, #20]
   2b174:	cmp	r1, #0
   2b178:	beq	2b1a8 <__assert_fail@plt+0x194fc>
   2b17c:	ldr	r1, [sp, #36]	; 0x24
   2b180:	add	r3, r0, r8
   2b184:	mov	r0, r7
   2b188:	ldr	r1, [r1, #12]
   2b18c:	ldr	r2, [r1, sl, lsl #2]
   2b190:	ldr	r1, [sp, #20]
   2b194:	str	sl, [sp]
   2b198:	str	r8, [sp, #4]
   2b19c:	bl	2c3a8 <__assert_fail@plt+0x1a6fc>
   2b1a0:	cmp	r0, #0
   2b1a4:	bne	2b1fc <__assert_fail@plt+0x19550>
   2b1a8:	ldr	r2, [sp, #40]	; 0x28
   2b1ac:	cmp	r2, #0
   2b1b0:	beq	2b1d8 <__assert_fail@plt+0x1952c>
   2b1b4:	ldr	r1, [sp, #44]	; 0x2c
   2b1b8:	cmp	r1, #0
   2b1bc:	bne	2af20 <__assert_fail@plt+0x19274>
   2b1c0:	ldr	r0, [sp, #48]	; 0x30
   2b1c4:	str	sl, [r0]
   2b1c8:	ldr	r0, [sp, #44]	; 0x2c
   2b1cc:	add	r0, r0, #1
   2b1d0:	str	r0, [sp, #44]	; 0x2c
   2b1d4:	b	2b1fc <__assert_fail@plt+0x19550>
   2b1d8:	mov	r0, #1
   2b1dc:	str	r0, [sp, #44]	; 0x2c
   2b1e0:	str	r0, [sp, #40]	; 0x28
   2b1e4:	mov	r0, #4
   2b1e8:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2b1ec:	cmp	r0, #0
   2b1f0:	str	r0, [sp, #48]	; 0x30
   2b1f4:	beq	2b260 <__assert_fail@plt+0x195b4>
   2b1f8:	str	sl, [r0]
   2b1fc:	ldr	r0, [r6, #20]
   2b200:	add	r9, r9, #1
   2b204:	cmp	r9, r0
   2b208:	blt	2afd0 <__assert_fail@plt+0x19324>
   2b20c:	mov	r0, r7
   2b210:	mov	r1, r5
   2b214:	mov	r2, r8
   2b218:	add	r3, sp, #40	; 0x28
   2b21c:	bl	2b290 <__assert_fail@plt+0x195e4>
   2b220:	ldr	r1, [sp, #12]
   2b224:	cmp	r0, #0
   2b228:	beq	2aeb0 <__assert_fail@plt+0x19204>
   2b22c:	mov	r7, r0
   2b230:	b	2b24c <__assert_fail@plt+0x195a0>
   2b234:	mov	r7, #0
   2b238:	b	2b24c <__assert_fail@plt+0x195a0>
   2b23c:	lsl	r2, r8, #2
   2b240:	mov	r1, #0
   2b244:	mov	r7, #0
   2b248:	bl	11b2c <memset@plt>
   2b24c:	ldr	r0, [sp, #48]	; 0x30
   2b250:	bl	1b22c <__assert_fail@plt+0x9580>
   2b254:	mov	r0, r7
   2b258:	sub	sp, fp, #28
   2b25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b260:	mov	r0, #0
   2b264:	mov	r7, #12
   2b268:	str	r0, [sp, #40]	; 0x28
   2b26c:	str	r0, [sp, #44]	; 0x2c
   2b270:	b	2b24c <__assert_fail@plt+0x195a0>
   2b274:	mov	r0, #0
   2b278:	mov	r7, #12
   2b27c:	str	r0, [sp, #40]	; 0x28
   2b280:	str	r0, [sp, #44]	; 0x2c
   2b284:	b	2b254 <__assert_fail@plt+0x195a8>
   2b288:	mov	r7, #12
   2b28c:	b	2b24c <__assert_fail@plt+0x195a0>
   2b290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b294:	add	fp, sp, #28
   2b298:	sub	sp, sp, #132	; 0x84
   2b29c:	mov	r9, r0
   2b2a0:	ldr	r8, [r0, #84]	; 0x54
   2b2a4:	mov	r0, #0
   2b2a8:	mov	sl, r1
   2b2ac:	mov	r5, r2
   2b2b0:	str	r0, [fp, #-76]	; 0xffffffb4
   2b2b4:	str	r5, [sp, #68]	; 0x44
   2b2b8:	ldr	r1, [r9, #100]	; 0x64
   2b2bc:	ldr	r2, [r1, r2, lsl #2]
   2b2c0:	cmp	r2, #0
   2b2c4:	mov	r1, r2
   2b2c8:	addne	r1, r1, #4
   2b2cc:	str	r1, [sp, #80]	; 0x50
   2b2d0:	ldr	r1, [r3, #4]
   2b2d4:	cmp	r1, #0
   2b2d8:	beq	2b6e0 <__assert_fail@plt+0x19a34>
   2b2dc:	mov	lr, r3
   2b2e0:	cmp	r2, #0
   2b2e4:	str	r2, [sp, #48]	; 0x30
   2b2e8:	beq	2b6ac <__assert_fail@plt+0x19a00>
   2b2ec:	mov	r0, #0
   2b2f0:	mov	r1, r8
   2b2f4:	mov	r2, lr
   2b2f8:	str	r8, [sp, #76]	; 0x4c
   2b2fc:	str	lr, [sp, #56]	; 0x38
   2b300:	str	r0, [fp, #-72]	; 0xffffffb8
   2b304:	sub	r0, fp, #72	; 0x48
   2b308:	bl	295b0 <__assert_fail@plt+0x17904>
   2b30c:	ldr	r8, [fp, #-72]	; 0xffffffb8
   2b310:	cmp	r8, #0
   2b314:	bne	2bdb4 <__assert_fail@plt+0x1a108>
   2b318:	mov	r5, r0
   2b31c:	mov	r4, r0
   2b320:	ldr	r2, [sp, #56]	; 0x38
   2b324:	ldr	r0, [r5, #28]!
   2b328:	cmp	r0, #0
   2b32c:	bne	2b3c0 <__assert_fail@plt+0x19714>
   2b330:	ldr	r0, [r2, #4]
   2b334:	mov	r6, #0
   2b338:	mov	r7, r2
   2b33c:	str	r0, [r4, #28]
   2b340:	lsl	r0, r0, #2
   2b344:	str	r6, [r4, #32]
   2b348:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2b34c:	cmp	r0, #0
   2b350:	mov	r8, #12
   2b354:	str	r0, [r4, #36]	; 0x24
   2b358:	movweq	r6, #12
   2b35c:	str	r6, [fp, #-72]	; 0xffffffb8
   2b360:	beq	2bdb4 <__assert_fail@plt+0x1a108>
   2b364:	ldr	r0, [r7, #4]
   2b368:	mov	r2, r7
   2b36c:	cmp	r0, #1
   2b370:	blt	2b3c0 <__assert_fail@plt+0x19714>
   2b374:	mov	r4, #0
   2b378:	ldr	r0, [r2, #8]
   2b37c:	ldr	r1, [sp, #76]	; 0x4c
   2b380:	mov	r6, r2
   2b384:	ldr	r0, [r0, r4, lsl #2]
   2b388:	ldr	r1, [r1, #28]
   2b38c:	add	r0, r0, r0, lsl #1
   2b390:	add	r1, r1, r0, lsl #2
   2b394:	mov	r0, r5
   2b398:	bl	25e20 <__assert_fail@plt+0x14174>
   2b39c:	cmp	r0, #0
   2b3a0:	bne	2bdb0 <__assert_fail@plt+0x1a104>
   2b3a4:	ldr	r0, [r6, #4]
   2b3a8:	add	r4, r4, #1
   2b3ac:	mov	r2, r6
   2b3b0:	cmp	r4, r0
   2b3b4:	blt	2b378 <__assert_fail@plt+0x196cc>
   2b3b8:	mov	r0, #0
   2b3bc:	str	r0, [fp, #-72]	; 0xffffffb8
   2b3c0:	ldr	r1, [sp, #80]	; 0x50
   2b3c4:	mov	r0, r2
   2b3c8:	mov	r2, r5
   2b3cc:	bl	2be14 <__assert_fail@plt+0x1a168>
   2b3d0:	cmp	r0, #0
   2b3d4:	str	r0, [fp, #-76]	; 0xffffffb4
   2b3d8:	bne	2bde8 <__assert_fail@plt+0x1a13c>
   2b3dc:	ldr	r0, [sl, #20]
   2b3e0:	ldr	r5, [sp, #68]	; 0x44
   2b3e4:	ldr	lr, [sp, #56]	; 0x38
   2b3e8:	ldr	r8, [sp, #76]	; 0x4c
   2b3ec:	cmp	r0, #0
   2b3f0:	beq	2b6ac <__assert_fail@plt+0x19a00>
   2b3f4:	ldr	r3, [sp, #80]	; 0x50
   2b3f8:	cmp	r0, #1
   2b3fc:	str	r9, [sp, #52]	; 0x34
   2b400:	blt	2b6a0 <__assert_fail@plt+0x199f4>
   2b404:	ldr	r0, [sp, #52]	; 0x34
   2b408:	mov	r1, #0
   2b40c:	str	sl, [sp, #60]	; 0x3c
   2b410:	ldr	r0, [r0, #116]	; 0x74
   2b414:	str	r0, [sp, #64]	; 0x40
   2b418:	ldr	r0, [sl, #24]
   2b41c:	str	r1, [sp, #72]	; 0x48
   2b420:	ldr	r0, [r0, r1, lsl #2]
   2b424:	ldr	r1, [sp, #64]	; 0x40
   2b428:	add	r0, r0, r0, lsl #1
   2b42c:	add	r1, r1, r0, lsl #3
   2b430:	ldr	r2, [r1, #8]
   2b434:	cmp	r2, r5
   2b438:	bge	2b688 <__assert_fail@plt+0x199dc>
   2b43c:	ldr	r1, [r1, #4]
   2b440:	cmp	r1, r5
   2b444:	blt	2b688 <__assert_fail@plt+0x199dc>
   2b448:	ldr	r1, [sp, #64]	; 0x40
   2b44c:	ldr	r2, [r8]
   2b450:	ldr	r0, [r1, r0, lsl #3]!
   2b454:	ldr	r1, [r1, #12]
   2b458:	ldr	sl, [r2, r0, lsl #3]
   2b45c:	ldr	r0, [lr, #4]
   2b460:	cmp	r1, r5
   2b464:	bne	2b610 <__assert_fail@plt+0x19964>
   2b468:	cmp	r0, #1
   2b46c:	blt	2b688 <__assert_fail@plt+0x199dc>
   2b470:	ldr	r3, [lr, #8]
   2b474:	mvn	r9, #0
   2b478:	mvn	r1, #0
   2b47c:	ldr	r6, [r3]
   2b480:	add	r7, r2, r6, lsl #3
   2b484:	ldrb	r7, [r7, #4]
   2b488:	cmp	r7, #9
   2b48c:	beq	2b4a8 <__assert_fail@plt+0x197fc>
   2b490:	cmp	r7, #8
   2b494:	bne	2b4b4 <__assert_fail@plt+0x19808>
   2b498:	ldr	r7, [r2, r6, lsl #3]
   2b49c:	cmp	sl, r7
   2b4a0:	moveq	r1, r6
   2b4a4:	b	2b4b4 <__assert_fail@plt+0x19808>
   2b4a8:	ldr	r7, [r2, r6, lsl #3]
   2b4ac:	cmp	sl, r7
   2b4b0:	moveq	r9, r6
   2b4b4:	add	r3, r3, #4
   2b4b8:	subs	r0, r0, #1
   2b4bc:	bne	2b47c <__assert_fail@plt+0x197d0>
   2b4c0:	cmp	r1, #0
   2b4c4:	blt	2b4e4 <__assert_fail@plt+0x19838>
   2b4c8:	ldr	r0, [sp, #76]	; 0x4c
   2b4cc:	ldr	r3, [sp, #80]	; 0x50
   2b4d0:	mov	r2, lr
   2b4d4:	bl	2c030 <__assert_fail@plt+0x1a384>
   2b4d8:	ldr	lr, [sp, #56]	; 0x38
   2b4dc:	cmp	r0, #0
   2b4e0:	bne	2bd9c <__assert_fail@plt+0x1a0f0>
   2b4e4:	cmp	r9, #0
   2b4e8:	ldr	r3, [sp, #80]	; 0x50
   2b4ec:	ldr	r8, [sp, #76]	; 0x4c
   2b4f0:	ldrge	ip, [lr, #4]
   2b4f4:	cmpge	ip, #1
   2b4f8:	blt	2b688 <__assert_fail@plt+0x199dc>
   2b4fc:	mov	sl, #0
   2b500:	ldr	r0, [lr, #8]
   2b504:	ldr	r1, [r0, sl, lsl #2]
   2b508:	ldr	r0, [r8, #28]
   2b50c:	add	lr, r1, r1, lsl #1
   2b510:	add	r2, r0, lr, lsl #2
   2b514:	ldr	r0, [r2, #4]
   2b518:	cmp	r0, #1
   2b51c:	blt	2b578 <__assert_fail@plt+0x198cc>
   2b520:	ldr	r4, [r2, #8]
   2b524:	mov	r3, ip
   2b528:	mov	r7, #0
   2b52c:	subs	r0, r0, #1
   2b530:	beq	2b558 <__assert_fail@plt+0x198ac>
   2b534:	add	r6, r7, r0
   2b538:	mov	ip, #1
   2b53c:	lsr	r5, r6, #1
   2b540:	ldr	r2, [r4, r5, lsl #2]
   2b544:	cmp	r2, r9
   2b548:	movge	r0, r5
   2b54c:	addlt	r7, ip, r6, lsr #1
   2b550:	cmp	r7, r0
   2b554:	bcc	2b534 <__assert_fail@plt+0x19888>
   2b558:	ldr	r0, [r4, r7, lsl #2]
   2b55c:	mov	ip, r3
   2b560:	ldr	r5, [sp, #68]	; 0x44
   2b564:	ldr	r3, [sp, #80]	; 0x50
   2b568:	cmp	r0, r9
   2b56c:	bne	2b578 <__assert_fail@plt+0x198cc>
   2b570:	ldr	lr, [sp, #56]	; 0x38
   2b574:	b	2b600 <__assert_fail@plt+0x19954>
   2b578:	ldr	r0, [r8, #24]
   2b57c:	add	r2, r0, lr, lsl #2
   2b580:	ldr	lr, [sp, #56]	; 0x38
   2b584:	ldr	r0, [r2, #4]
   2b588:	cmp	r0, #1
   2b58c:	blt	2b5d4 <__assert_fail@plt+0x19928>
   2b590:	ldr	r2, [r2, #8]
   2b594:	mov	r4, #0
   2b598:	subs	r0, r0, #1
   2b59c:	beq	2b5c4 <__assert_fail@plt+0x19918>
   2b5a0:	add	r7, r4, r0
   2b5a4:	lsr	r6, r7, #1
   2b5a8:	ldr	r5, [r2, r6, lsl #2]
   2b5ac:	cmp	r5, r9
   2b5b0:	movge	r0, r6
   2b5b4:	mov	r6, #1
   2b5b8:	addlt	r4, r6, r7, lsr #1
   2b5bc:	cmp	r4, r0
   2b5c0:	bcc	2b5a0 <__assert_fail@plt+0x198f4>
   2b5c4:	ldr	r0, [r2, r4, lsl #2]
   2b5c8:	ldr	r5, [sp, #68]	; 0x44
   2b5cc:	cmp	r0, r9
   2b5d0:	beq	2b600 <__assert_fail@plt+0x19954>
   2b5d4:	mov	r0, r8
   2b5d8:	mov	r2, lr
   2b5dc:	mov	r4, lr
   2b5e0:	bl	2c030 <__assert_fail@plt+0x1a384>
   2b5e4:	cmp	r0, #0
   2b5e8:	bne	2bd9c <__assert_fail@plt+0x1a0f0>
   2b5ec:	ldr	ip, [r4, #4]
   2b5f0:	ldr	r3, [sp, #80]	; 0x50
   2b5f4:	ldr	r8, [sp, #76]	; 0x4c
   2b5f8:	sub	sl, sl, #1
   2b5fc:	mov	lr, r4
   2b600:	add	sl, sl, #1
   2b604:	cmp	sl, ip
   2b608:	blt	2b500 <__assert_fail@plt+0x19854>
   2b60c:	b	2b688 <__assert_fail@plt+0x199dc>
   2b610:	cmp	r0, #1
   2b614:	blt	2b688 <__assert_fail@plt+0x199dc>
   2b618:	mov	r4, #0
   2b61c:	b	2b624 <__assert_fail@plt+0x19978>
   2b620:	ldr	r2, [r8]
   2b624:	ldr	r1, [lr, #8]
   2b628:	ldr	r1, [r1, r4, lsl #2]
   2b62c:	add	r7, r2, r1, lsl #3
   2b630:	ldr	r7, [r7, #4]
   2b634:	and	r7, r7, #254	; 0xfe
   2b638:	orr	r7, r7, #1
   2b63c:	cmp	r7, #9
   2b640:	ldreq	r2, [r2, r1, lsl #3]
   2b644:	cmpeq	sl, r2
   2b648:	beq	2b65c <__assert_fail@plt+0x199b0>
   2b64c:	add	r4, r4, #1
   2b650:	cmp	r4, r0
   2b654:	blt	2b620 <__assert_fail@plt+0x19974>
   2b658:	b	2b688 <__assert_fail@plt+0x199dc>
   2b65c:	mov	r0, r8
   2b660:	mov	r2, lr
   2b664:	mov	r6, lr
   2b668:	bl	2c030 <__assert_fail@plt+0x1a384>
   2b66c:	cmp	r0, #0
   2b670:	bne	2bd9c <__assert_fail@plt+0x1a0f0>
   2b674:	ldr	r0, [r6, #4]
   2b678:	ldr	r3, [sp, #80]	; 0x50
   2b67c:	ldr	r8, [sp, #76]	; 0x4c
   2b680:	mov	lr, r6
   2b684:	b	2b64c <__assert_fail@plt+0x199a0>
   2b688:	ldr	sl, [sp, #60]	; 0x3c
   2b68c:	ldr	r1, [sp, #72]	; 0x48
   2b690:	ldr	r0, [sl, #20]
   2b694:	add	r1, r1, #1
   2b698:	cmp	r1, r0
   2b69c:	blt	2b418 <__assert_fail@plt+0x1976c>
   2b6a0:	ldr	r9, [sp, #52]	; 0x34
   2b6a4:	mov	r0, #0
   2b6a8:	str	r0, [fp, #-76]	; 0xffffffb4
   2b6ac:	sub	r0, fp, #76	; 0x4c
   2b6b0:	mov	r1, r8
   2b6b4:	mov	r2, lr
   2b6b8:	bl	295b0 <__assert_fail@plt+0x17904>
   2b6bc:	ldr	r1, [sl]
   2b6c0:	ldr	r2, [sp, #48]	; 0x30
   2b6c4:	str	r0, [r1, r5, lsl #2]
   2b6c8:	ldr	r8, [fp, #-76]	; 0xffffffb4
   2b6cc:	cmp	r8, #0
   2b6d0:	bne	2bd90 <__assert_fail@plt+0x1a0e4>
   2b6d4:	cmp	r2, #0
   2b6d8:	bne	2b6f0 <__assert_fail@plt+0x19a44>
   2b6dc:	b	2bd8c <__assert_fail@plt+0x1a0e0>
   2b6e0:	ldr	r1, [sl]
   2b6e4:	str	r0, [r1, r5, lsl #2]
   2b6e8:	cmp	r2, #0
   2b6ec:	beq	2bd8c <__assert_fail@plt+0x1a0e0>
   2b6f0:	ldr	r0, [r9, #100]	; 0x64
   2b6f4:	ldr	r0, [r0, r5, lsl #2]
   2b6f8:	ldrb	r0, [r0, #52]	; 0x34
   2b6fc:	tst	r0, #64	; 0x40
   2b700:	beq	2bd8c <__assert_fail@plt+0x1a0e0>
   2b704:	ldr	r0, [r9, #84]	; 0x54
   2b708:	str	r0, [sp, #56]	; 0x38
   2b70c:	ldr	r0, [r9, #108]	; 0x6c
   2b710:	cmp	r0, #1
   2b714:	blt	2bd74 <__assert_fail@plt+0x1a0c8>
   2b718:	ldr	r1, [r9, #116]	; 0x74
   2b71c:	ldr	r8, [sp, #80]	; 0x50
   2b720:	mov	lr, #0
   2b724:	mov	r2, #1
   2b728:	mov	r3, r0
   2b72c:	add	r7, r3, lr
   2b730:	add	r7, r7, r7, lsr #31
   2b734:	asr	r6, r7, #1
   2b738:	add	r4, r6, r6, lsl #1
   2b73c:	add	r4, r1, r4, lsl #3
   2b740:	ldr	r4, [r4, #4]
   2b744:	cmp	r4, r5
   2b748:	addlt	lr, r2, r7, asr #1
   2b74c:	movge	r3, r6
   2b750:	cmp	lr, r3
   2b754:	blt	2b72c <__assert_fail@plt+0x19a80>
   2b758:	cmp	lr, r0
   2b75c:	bge	2bd84 <__assert_fail@plt+0x1a0d8>
   2b760:	cmn	lr, #1
   2b764:	beq	2bd84 <__assert_fail@plt+0x1a0d8>
   2b768:	ldr	r0, [r9, #116]	; 0x74
   2b76c:	add	r1, lr, lr, lsl #1
   2b770:	str	r1, [sp, #28]
   2b774:	add	r0, r0, r1, lsl #3
   2b778:	ldr	r0, [r0, #4]
   2b77c:	cmp	r0, r5
   2b780:	bne	2bd84 <__assert_fail@plt+0x1a0d8>
   2b784:	mov	r1, #0
   2b788:	ldr	r7, [sp, #56]	; 0x38
   2b78c:	str	r1, [fp, #-72]	; 0xffffffb8
   2b790:	ldr	r0, [r8, #4]
   2b794:	cmp	r0, #0
   2b798:	ble	2bda8 <__assert_fail@plt+0x1a0fc>
   2b79c:	sub	r0, fp, #72	; 0x48
   2b7a0:	mov	r2, #0
   2b7a4:	str	sl, [sp, #60]	; 0x3c
   2b7a8:	str	r9, [sp, #52]	; 0x34
   2b7ac:	str	lr, [sp, #48]	; 0x30
   2b7b0:	add	r0, r0, #16
   2b7b4:	str	r0, [sp, #12]
   2b7b8:	add	r0, sl, #16
   2b7bc:	str	r0, [sp, #36]	; 0x24
   2b7c0:	mov	r0, #0
   2b7c4:	str	r0, [sp, #64]	; 0x40
   2b7c8:	ldr	r0, [r8, #8]
   2b7cc:	ldr	r1, [sl, #8]
   2b7d0:	str	r4, [sp, #76]	; 0x4c
   2b7d4:	str	r2, [sp, #44]	; 0x2c
   2b7d8:	ldr	r3, [r0, r2, lsl #2]
   2b7dc:	ldr	r0, [r7]
   2b7e0:	add	r0, r0, r3, lsl #3
   2b7e4:	cmp	r3, r1
   2b7e8:	str	r3, [sp, #72]	; 0x48
   2b7ec:	ldrb	r0, [r0, #4]
   2b7f0:	bne	2b80c <__assert_fail@plt+0x19b60>
   2b7f4:	cmp	r0, #4
   2b7f8:	bne	2bd50 <__assert_fail@plt+0x1a0a4>
   2b7fc:	ldr	r0, [sl, #12]
   2b800:	cmp	r0, r5
   2b804:	bne	2b814 <__assert_fail@plt+0x19b68>
   2b808:	b	2bd50 <__assert_fail@plt+0x1a0a4>
   2b80c:	cmp	r0, #4
   2b810:	bne	2bd50 <__assert_fail@plt+0x1a0a4>
   2b814:	ldr	r0, [r9, #116]	; 0x74
   2b818:	ldr	r1, [sp, #28]
   2b81c:	ldr	r4, [sp, #72]	; 0x48
   2b820:	mov	r9, lr
   2b824:	add	r6, r0, r1, lsl #3
   2b828:	b	2bc60 <__assert_fail@plt+0x19fb4>
   2b82c:	ldr	r5, [sp, #68]	; 0x44
   2b830:	ldr	r7, [sp, #56]	; 0x38
   2b834:	ldr	r4, [sp, #72]	; 0x48
   2b838:	mov	r0, r6
   2b83c:	b	2bd3c <__assert_fail@plt+0x1a090>
   2b840:	ldr	r0, [sp, #64]	; 0x40
   2b844:	cmp	r0, #0
   2b848:	beq	2b88c <__assert_fail@plt+0x19be0>
   2b84c:	ldr	r0, [sp, #20]
   2b850:	str	r5, [fp, #-60]	; 0xffffffc4
   2b854:	str	r4, [fp, #-64]	; 0xffffffc0
   2b858:	cmp	r0, #0
   2b85c:	beq	2b990 <__assert_fail@plt+0x19ce4>
   2b860:	ldr	r6, [sp, #40]	; 0x28
   2b864:	cmp	r6, #0
   2b868:	bne	2bc48 <__assert_fail@plt+0x19f9c>
   2b86c:	ldr	r4, [sp, #76]	; 0x4c
   2b870:	mov	r0, #1
   2b874:	mov	r1, #1
   2b878:	str	r0, [sp, #40]	; 0x28
   2b87c:	str	r9, [r4]
   2b880:	str	r1, [fp, #-52]	; 0xffffffcc
   2b884:	str	r4, [sp, #24]
   2b888:	b	2ba1c <__assert_fail@plt+0x19d70>
   2b88c:	add	r0, sl, #12
   2b890:	mov	r3, #20
   2b894:	sub	r2, fp, #72	; 0x48
   2b898:	vld1.32	{d16-d17}, [r0]
   2b89c:	mov	r0, sl
   2b8a0:	add	r1, r2, #12
   2b8a4:	vld1.32	{d18-d19}, [r0], r3
   2b8a8:	vst1.32	{d16-d17}, [r1]
   2b8ac:	mov	r1, r2
   2b8b0:	vst1.64	{d18-d19}, [r1], r3
   2b8b4:	ldr	r6, [r0]
   2b8b8:	mov	r0, #0
   2b8bc:	cmp	r6, #1
   2b8c0:	str	r6, [r1]
   2b8c4:	blt	2b978 <__assert_fail@plt+0x19ccc>
   2b8c8:	lsl	r0, r6, #2
   2b8cc:	str	r6, [fp, #-56]	; 0xffffffc8
   2b8d0:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2b8d4:	cmp	r0, #0
   2b8d8:	str	r0, [fp, #-48]	; 0xffffffd0
   2b8dc:	beq	2bdf8 <__assert_fail@plt+0x1a14c>
   2b8e0:	mov	r8, r0
   2b8e4:	ldr	r0, [sl, #20]
   2b8e8:	ldr	r1, [sl, #24]
   2b8ec:	lsl	r2, r0, #2
   2b8f0:	mov	r0, r8
   2b8f4:	bl	118ec <memcpy@plt>
   2b8f8:	str	r4, [fp, #-64]	; 0xffffffc0
   2b8fc:	str	r5, [fp, #-60]	; 0xffffffc4
   2b900:	mov	r4, r8
   2b904:	lsl	r0, r6, #1
   2b908:	lsl	r1, r6, #3
   2b90c:	str	r0, [sp, #20]
   2b910:	str	r0, [fp, #-56]	; 0xffffffc8
   2b914:	mov	r0, r8
   2b918:	bl	1b388 <__assert_fail@plt+0x96dc>
   2b91c:	cmp	r0, #0
   2b920:	beq	2be0c <__assert_fail@plt+0x1a160>
   2b924:	mov	r4, r0
   2b928:	mov	r8, r0
   2b92c:	str	r0, [fp, #-48]	; 0xffffffd0
   2b930:	str	r0, [sp, #16]
   2b934:	ldr	r0, [r4]
   2b938:	cmp	r0, r9
   2b93c:	ble	2b9d4 <__assert_fail@plt+0x19d28>
   2b940:	cmp	r6, #1
   2b944:	mov	r2, r6
   2b948:	blt	2ba08 <__assert_fail@plt+0x19d5c>
   2b94c:	add	r1, r4, r6, lsl #2
   2b950:	add	r0, r6, #1
   2b954:	mov	r2, r1
   2b958:	ldr	r3, [r2, #-4]!
   2b95c:	sub	r0, r0, #1
   2b960:	cmp	r0, #1
   2b964:	str	r3, [r1]
   2b968:	mov	r1, r2
   2b96c:	bgt	2b958 <__assert_fail@plt+0x19cac>
   2b970:	sub	r2, r0, #1
   2b974:	b	2ba08 <__assert_fail@plt+0x19d5c>
   2b978:	ldr	r1, [sp, #12]
   2b97c:	str	r0, [r1]
   2b980:	str	r0, [r1, #4]
   2b984:	str	r0, [r1, #8]
   2b988:	str	r5, [fp, #-60]	; 0xffffffc4
   2b98c:	str	r4, [fp, #-64]	; 0xffffffc0
   2b990:	mov	r0, #1
   2b994:	str	r0, [fp, #-52]	; 0xffffffcc
   2b998:	str	r0, [fp, #-56]	; 0xffffffc8
   2b99c:	mov	r0, #4
   2b9a0:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2b9a4:	cmp	r0, #0
   2b9a8:	str	r0, [fp, #-48]	; 0xffffffd0
   2b9ac:	beq	2bdf8 <__assert_fail@plt+0x1a14c>
   2b9b0:	mov	r4, r0
   2b9b4:	str	r9, [r0]
   2b9b8:	mov	r0, #1
   2b9bc:	str	r0, [sp, #40]	; 0x28
   2b9c0:	mov	r0, #1
   2b9c4:	str	r4, [sp, #16]
   2b9c8:	str	r4, [sp, #24]
   2b9cc:	str	r0, [sp, #20]
   2b9d0:	b	2ba1c <__assert_fail@plt+0x19d70>
   2b9d4:	add	r0, r4, r6, lsl #2
   2b9d8:	mov	r2, r6
   2b9dc:	ldr	r1, [r0, #-4]
   2b9e0:	cmp	r1, r9
   2b9e4:	ble	2ba08 <__assert_fail@plt+0x19d5c>
   2b9e8:	sub	r2, r6, #2
   2b9ec:	str	r1, [r0]
   2b9f0:	sub	r2, r2, #1
   2b9f4:	ldr	r1, [r0, #-8]
   2b9f8:	sub	r0, r0, #4
   2b9fc:	cmp	r1, r9
   2ba00:	bgt	2b9ec <__assert_fail@plt+0x19d40>
   2ba04:	add	r2, r2, #2
   2ba08:	add	r6, r6, #1
   2ba0c:	str	r9, [r4, r2, lsl #2]
   2ba10:	str	r8, [sp, #24]
   2ba14:	str	r6, [sp, #40]	; 0x28
   2ba18:	str	r6, [fp, #-52]	; 0xffffffcc
   2ba1c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2ba20:	sub	r1, fp, #72	; 0x48
   2ba24:	str	r0, [sp, #64]	; 0x40
   2ba28:	ldr	r0, [r0, r5, lsl #2]
   2ba2c:	str	r0, [sp, #32]
   2ba30:	ldr	r0, [sp, #52]	; 0x34
   2ba34:	bl	2ae40 <__assert_fail@plt+0x19194>
   2ba38:	cmp	r0, #0
   2ba3c:	bne	2bdf0 <__assert_fail@plt+0x1a144>
   2ba40:	ldr	r6, [sl, #4]
   2ba44:	str	r4, [sp, #76]	; 0x4c
   2ba48:	ldr	lr, [sp, #48]	; 0x30
   2ba4c:	ldr	r4, [sp, #72]	; 0x48
   2ba50:	ldr	r2, [sp, #64]	; 0x40
   2ba54:	cmp	r6, #0
   2ba58:	beq	2baf0 <__assert_fail@plt+0x19e44>
   2ba5c:	cmp	r5, #0
   2ba60:	blt	2baec <__assert_fail@plt+0x19e40>
   2ba64:	mov	r0, #0
   2ba68:	mov	sl, r0
   2ba6c:	ldr	r0, [r2, r0, lsl #2]
   2ba70:	ldr	r1, [r6, sl, lsl #2]
   2ba74:	cmp	r1, #0
   2ba78:	beq	2badc <__assert_fail@plt+0x19e30>
   2ba7c:	cmp	r0, #0
   2ba80:	beq	2bae0 <__assert_fail@plt+0x19e34>
   2ba84:	sub	r4, fp, #44	; 0x2c
   2ba88:	add	r2, r0, #4
   2ba8c:	add	r1, r1, #4
   2ba90:	mov	r0, r4
   2ba94:	bl	27fc4 <__assert_fail@plt+0x16318>
   2ba98:	cmp	r0, #0
   2ba9c:	str	r0, [fp, #-32]	; 0xffffffe0
   2baa0:	bne	2bdbc <__assert_fail@plt+0x1a110>
   2baa4:	sub	r0, fp, #32
   2baa8:	mov	r1, r7
   2baac:	mov	r2, r4
   2bab0:	bl	295b0 <__assert_fail@plt+0x17904>
   2bab4:	str	r0, [r6, sl, lsl #2]
   2bab8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2babc:	bl	1b22c <__assert_fail@plt+0x9580>
   2bac0:	ldr	r8, [fp, #-32]	; 0xffffffe0
   2bac4:	ldr	lr, [sp, #48]	; 0x30
   2bac8:	ldr	r4, [sp, #72]	; 0x48
   2bacc:	ldr	r2, [sp, #64]	; 0x40
   2bad0:	cmp	r8, #0
   2bad4:	beq	2bae0 <__assert_fail@plt+0x19e34>
   2bad8:	b	2bdc0 <__assert_fail@plt+0x1a114>
   2badc:	str	r0, [r6, sl, lsl #2]
   2bae0:	add	r0, sl, #1
   2bae4:	cmp	sl, r5
   2bae8:	blt	2ba68 <__assert_fail@plt+0x19dbc>
   2baec:	ldr	sl, [sp, #60]	; 0x3c
   2baf0:	ldr	r0, [sp, #32]
   2baf4:	str	r0, [r2, r5, lsl #2]
   2baf8:	ldr	r0, [sp, #40]	; 0x28
   2bafc:	cmp	r0, #1
   2bb00:	blt	2bb48 <__assert_fail@plt+0x19e9c>
   2bb04:	ldr	r8, [sp, #80]	; 0x50
   2bb08:	subs	r0, r0, #1
   2bb0c:	mov	r4, #1
   2bb10:	mov	r1, #0
   2bb14:	beq	2bb50 <__assert_fail@plt+0x19ea4>
   2bb18:	mov	r2, r0
   2bb1c:	ldr	r6, [sp, #76]	; 0x4c
   2bb20:	add	r3, r1, r2
   2bb24:	lsr	r7, r3, #1
   2bb28:	ldr	r6, [r6, r7, lsl #2]
   2bb2c:	cmp	r6, r9
   2bb30:	ldr	r6, [sp, #76]	; 0x4c
   2bb34:	movge	r2, r7
   2bb38:	addlt	r1, r4, r3, lsr #1
   2bb3c:	cmp	r1, r2
   2bb40:	bcc	2bb1c <__assert_fail@plt+0x19e70>
   2bb44:	b	2bb54 <__assert_fail@plt+0x19ea8>
   2bb48:	ldr	r8, [sp, #80]	; 0x50
   2bb4c:	b	2bc34 <__assert_fail@plt+0x19f88>
   2bb50:	ldr	r6, [sp, #76]	; 0x4c
   2bb54:	ldr	r2, [r6, r1, lsl #2]
   2bb58:	cmp	r2, r9
   2bb5c:	mov	r2, r1
   2bb60:	mvnne	r2, #0
   2bb64:	cmp	r2, #0
   2bb68:	blt	2bba8 <__assert_fail@plt+0x19efc>
   2bb6c:	ldr	r3, [sp, #40]	; 0x28
   2bb70:	ldr	r7, [sp, #56]	; 0x38
   2bb74:	ldr	r4, [sp, #72]	; 0x48
   2bb78:	cmp	r3, r2
   2bb7c:	ble	2bbbc <__assert_fail@plt+0x19f10>
   2bb80:	cmp	r0, r2
   2bb84:	str	r0, [fp, #-52]	; 0xffffffcc
   2bb88:	ble	2bbc8 <__assert_fail@plt+0x19f1c>
   2bb8c:	ldr	r3, [sp, #40]	; 0x28
   2bb90:	mvn	r2, r1
   2bb94:	add	r3, r3, r2
   2bb98:	cmp	r3, #4
   2bb9c:	bcs	2bbd4 <__assert_fail@plt+0x19f28>
   2bba0:	mov	r2, r1
   2bba4:	b	2bc14 <__assert_fail@plt+0x19f68>
   2bba8:	ldr	r0, [sp, #16]
   2bbac:	ldr	r7, [sp, #56]	; 0x38
   2bbb0:	ldr	r4, [sp, #72]	; 0x48
   2bbb4:	str	r0, [sp, #24]
   2bbb8:	b	2bc34 <__assert_fail@plt+0x19f88>
   2bbbc:	ldr	r0, [sp, #16]
   2bbc0:	str	r0, [sp, #24]
   2bbc4:	b	2bc34 <__assert_fail@plt+0x19f88>
   2bbc8:	ldr	r1, [sp, #16]
   2bbcc:	str	r1, [sp, #24]
   2bbd0:	b	2bc30 <__assert_fail@plt+0x19f84>
   2bbd4:	mov	r7, r6
   2bbd8:	bic	r6, r3, #3
   2bbdc:	add	r2, r1, r6
   2bbe0:	add	r1, r7, r1, lsl #2
   2bbe4:	mov	r7, r6
   2bbe8:	add	r1, r1, #4
   2bbec:	sub	r5, r1, #4
   2bbf0:	vld1.32	{d16-d17}, [r1]!
   2bbf4:	subs	r7, r7, #4
   2bbf8:	vst1.32	{d16-d17}, [r5]
   2bbfc:	bne	2bbec <__assert_fail@plt+0x19f40>
   2bc00:	cmp	r3, r6
   2bc04:	ldr	r5, [sp, #68]	; 0x44
   2bc08:	ldr	r7, [sp, #56]	; 0x38
   2bc0c:	ldr	r6, [sp, #76]	; 0x4c
   2bc10:	beq	2bc2c <__assert_fail@plt+0x19f80>
   2bc14:	add	r1, r6, r2, lsl #2
   2bc18:	ldr	r1, [r1, #4]
   2bc1c:	str	r1, [r6, r2, lsl #2]
   2bc20:	add	r2, r2, #1
   2bc24:	cmp	r0, r2
   2bc28:	bne	2bc14 <__assert_fail@plt+0x19f68>
   2bc2c:	str	r6, [sp, #24]
   2bc30:	str	r0, [sp, #40]	; 0x28
   2bc34:	ldr	r0, [sp, #52]	; 0x34
   2bc38:	add	r1, r9, r9, lsl #1
   2bc3c:	ldr	r0, [r0, #116]	; 0x74
   2bc40:	add	r0, r0, r1, lsl #3
   2bc44:	b	2bd3c <__assert_fail@plt+0x1a090>
   2bc48:	ldr	r0, [sp, #20]
   2bc4c:	ldr	r4, [sp, #76]	; 0x4c
   2bc50:	ldr	r8, [sp, #24]
   2bc54:	cmp	r0, r6
   2bc58:	beq	2b904 <__assert_fail@plt+0x19c58>
   2bc5c:	b	2b934 <__assert_fail@plt+0x19c88>
   2bc60:	ldr	r0, [r6]
   2bc64:	cmp	r0, r4
   2bc68:	bne	2bd38 <__assert_fail@plt+0x1a08c>
   2bc6c:	ldr	r0, [r6, #8]
   2bc70:	ldr	r1, [r6, #12]
   2bc74:	subs	r0, r1, r0
   2bc78:	add	ip, r0, r5
   2bc7c:	beq	2bc8c <__assert_fail@plt+0x19fe0>
   2bc80:	ldr	r1, [r7, #12]
   2bc84:	add	r1, r1, r4, lsl #2
   2bc88:	b	2bc9c <__assert_fail@plt+0x19ff0>
   2bc8c:	ldr	r1, [r7, #20]
   2bc90:	add	r2, r4, r4, lsl #1
   2bc94:	add	r1, r1, r2, lsl #2
   2bc98:	ldr	r1, [r1, #8]
   2bc9c:	ldr	r2, [sl, #12]
   2bca0:	cmp	ip, r2
   2bca4:	bgt	2bd38 <__assert_fail@plt+0x1a08c>
   2bca8:	ldr	r2, [sl]
   2bcac:	ldr	r2, [r2, ip, lsl #2]
   2bcb0:	cmp	r2, #0
   2bcb4:	beq	2bd38 <__assert_fail@plt+0x1a08c>
   2bcb8:	ldr	r3, [r2, #8]
   2bcbc:	cmp	r3, #1
   2bcc0:	blt	2bd38 <__assert_fail@plt+0x1a08c>
   2bcc4:	ldr	r1, [r1]
   2bcc8:	ldr	r2, [r2, #12]
   2bccc:	subs	r7, r3, #1
   2bcd0:	mov	r3, #0
   2bcd4:	beq	2bcfc <__assert_fail@plt+0x1a050>
   2bcd8:	add	r5, r3, r7
   2bcdc:	lsr	r4, r5, #1
   2bce0:	ldr	r0, [r2, r4, lsl #2]
   2bce4:	cmp	r0, r1
   2bce8:	mov	r0, #1
   2bcec:	movge	r7, r4
   2bcf0:	addlt	r3, r0, r5, lsr #1
   2bcf4:	cmp	r3, r7
   2bcf8:	bcc	2bcd8 <__assert_fail@plt+0x1a02c>
   2bcfc:	ldr	r0, [r2, r3, lsl #2]
   2bd00:	cmp	r0, r1
   2bd04:	bne	2b82c <__assert_fail@plt+0x19b80>
   2bd08:	stm	sp, {r1, ip}
   2bd0c:	ldr	r4, [sp, #72]	; 0x48
   2bd10:	ldr	r5, [sp, #68]	; 0x44
   2bd14:	ldr	r0, [sp, #52]	; 0x34
   2bd18:	ldr	r1, [sp, #36]	; 0x24
   2bd1c:	mov	r2, r4
   2bd20:	mov	r3, r5
   2bd24:	bl	2c3a8 <__assert_fail@plt+0x1a6fc>
   2bd28:	ldr	r7, [sp, #56]	; 0x38
   2bd2c:	cmp	r0, #0
   2bd30:	beq	2b840 <__assert_fail@plt+0x19b94>
   2bd34:	ldr	lr, [sp, #48]	; 0x30
   2bd38:	mov	r0, r6
   2bd3c:	add	r6, r0, #24
   2bd40:	ldrb	r0, [r0, #20]
   2bd44:	add	r9, r9, #1
   2bd48:	cmp	r0, #0
   2bd4c:	bne	2bc60 <__assert_fail@plt+0x19fb4>
   2bd50:	ldr	r2, [sp, #44]	; 0x2c
   2bd54:	ldr	r0, [r8, #4]
   2bd58:	ldr	r9, [sp, #52]	; 0x34
   2bd5c:	ldr	r4, [sp, #76]	; 0x4c
   2bd60:	add	r2, r2, #1
   2bd64:	cmp	r2, r0
   2bd68:	blt	2b7c8 <__assert_fail@plt+0x19b1c>
   2bd6c:	mov	r8, #0
   2bd70:	b	2bdc4 <__assert_fail@plt+0x1a118>
   2bd74:	ldr	r8, [sp, #80]	; 0x50
   2bd78:	mov	lr, #0
   2bd7c:	cmp	lr, r0
   2bd80:	blt	2b760 <__assert_fail@plt+0x19ab4>
   2bd84:	mov	r0, #0
   2bd88:	str	r0, [fp, #-76]	; 0xffffffb4
   2bd8c:	mov	r8, #0
   2bd90:	mov	r0, r8
   2bd94:	sub	sp, fp, #28
   2bd98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd9c:	mov	r8, r0
   2bda0:	str	r0, [fp, #-76]	; 0xffffffb4
   2bda4:	b	2bd90 <__assert_fail@plt+0x1a0e4>
   2bda8:	str	r1, [fp, #-76]	; 0xffffffb4
   2bdac:	b	2bd8c <__assert_fail@plt+0x1a0e0>
   2bdb0:	str	r0, [fp, #-72]	; 0xffffffb8
   2bdb4:	str	r8, [fp, #-76]	; 0xffffffb4
   2bdb8:	b	2bd90 <__assert_fail@plt+0x1a0e4>
   2bdbc:	mov	r8, r0
   2bdc0:	ldr	r4, [sp, #76]	; 0x4c
   2bdc4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2bdc8:	cmp	r0, #0
   2bdcc:	beq	2bdd8 <__assert_fail@plt+0x1a12c>
   2bdd0:	mov	r0, r4
   2bdd4:	bl	1b22c <__assert_fail@plt+0x9580>
   2bdd8:	cmp	r8, #0
   2bddc:	str	r8, [fp, #-76]	; 0xffffffb4
   2bde0:	moveq	r8, #0
   2bde4:	b	2bd90 <__assert_fail@plt+0x1a0e4>
   2bde8:	mov	r8, r0
   2bdec:	b	2bd90 <__assert_fail@plt+0x1a0e4>
   2bdf0:	mov	r8, r0
   2bdf4:	b	2bdc4 <__assert_fail@plt+0x1a118>
   2bdf8:	mov	r4, #0
   2bdfc:	mov	r8, #12
   2be00:	str	r4, [fp, #-56]	; 0xffffffc8
   2be04:	str	r4, [fp, #-52]	; 0xffffffcc
   2be08:	b	2bdc4 <__assert_fail@plt+0x1a118>
   2be0c:	mov	r8, #12
   2be10:	b	2bdc4 <__assert_fail@plt+0x1a118>
   2be14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be18:	add	fp, sp, #28
   2be1c:	sub	sp, sp, #12
   2be20:	ldr	ip, [r1, #4]
   2be24:	mov	sl, r0
   2be28:	mov	r0, #0
   2be2c:	cmp	ip, #0
   2be30:	ldrne	lr, [r2, #4]
   2be34:	cmpne	lr, #0
   2be38:	bne	2be44 <__assert_fail@plt+0x1a198>
   2be3c:	sub	sp, fp, #28
   2be40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be44:	mov	r7, r1
   2be48:	ldr	r1, [sl, #4]
   2be4c:	ldr	r6, [sl]
   2be50:	add	r3, lr, ip
   2be54:	add	r4, r1, r3
   2be58:	cmp	r4, r6
   2be5c:	ble	2bea0 <__assert_fail@plt+0x1a1f4>
   2be60:	mov	r5, r2
   2be64:	mov	r2, sl
   2be68:	add	r4, r6, r3
   2be6c:	ldr	r0, [r2, #8]!
   2be70:	lsl	r1, r4, #2
   2be74:	str	r2, [sp, #8]
   2be78:	bl	1b388 <__assert_fail@plt+0x96dc>
   2be7c:	cmp	r0, #0
   2be80:	beq	2c024 <__assert_fail@plt+0x1a378>
   2be84:	str	r4, [sl]
   2be88:	str	r0, [sl, #8]
   2be8c:	mov	r2, r5
   2be90:	ldr	r1, [sl, #4]
   2be94:	ldr	lr, [r5, #4]
   2be98:	ldr	ip, [r7, #4]
   2be9c:	b	2bea8 <__assert_fail@plt+0x1a1fc>
   2bea0:	add	r0, sl, #8
   2bea4:	str	r0, [sp, #8]
   2bea8:	str	r2, [sp, #4]
   2beac:	ldr	r2, [r2, #8]
   2beb0:	ldr	r4, [r7, #8]
   2beb4:	add	r3, ip, r1
   2beb8:	sub	r8, r1, #1
   2bebc:	add	r9, r3, lr
   2bec0:	sub	ip, ip, #1
   2bec4:	sub	r3, lr, #1
   2bec8:	ldr	r1, [r2, r3, lsl #2]
   2becc:	ldr	r6, [r4, ip, lsl #2]
   2bed0:	cmp	r6, r1
   2bed4:	beq	2bf00 <__assert_fail@plt+0x1a254>
   2bed8:	blt	2bef0 <__assert_fail@plt+0x1a244>
   2bedc:	sub	r5, ip, #1
   2bee0:	cmp	ip, #0
   2bee4:	mov	ip, r5
   2bee8:	bgt	2becc <__assert_fail@plt+0x1a220>
   2beec:	b	2bf7c <__assert_fail@plt+0x1a2d0>
   2bef0:	cmp	lr, #2
   2bef4:	mov	lr, r3
   2bef8:	bge	2bec4 <__assert_fail@plt+0x1a218>
   2befc:	b	2bf7c <__assert_fail@plt+0x1a2d0>
   2bf00:	mov	r0, r9
   2bf04:	cmp	r8, #0
   2bf08:	blt	2bf54 <__assert_fail@plt+0x1a2a8>
   2bf0c:	ldr	r1, [sp, #8]
   2bf10:	ldr	r9, [r1]
   2bf14:	mov	r1, r8
   2bf18:	ldr	r5, [r9, r1, lsl #2]
   2bf1c:	cmp	r5, r6
   2bf20:	ble	2bf38 <__assert_fail@plt+0x1a28c>
   2bf24:	sub	r8, r1, #1
   2bf28:	cmp	r1, #0
   2bf2c:	mov	r1, r8
   2bf30:	bgt	2bf18 <__assert_fail@plt+0x1a26c>
   2bf34:	b	2bf54 <__assert_fail@plt+0x1a2a8>
   2bf38:	mov	r8, r1
   2bf3c:	bne	2bf54 <__assert_fail@plt+0x1a2a8>
   2bf40:	mov	r8, r1
   2bf44:	mov	r9, r0
   2bf48:	cmp	ip, #1
   2bf4c:	bge	2bf70 <__assert_fail@plt+0x1a2c4>
   2bf50:	b	2bf7c <__assert_fail@plt+0x1a2d0>
   2bf54:	ldr	r1, [sp, #8]
   2bf58:	mov	r9, r0
   2bf5c:	sub	r9, r0, #1
   2bf60:	ldr	r1, [r1]
   2bf64:	str	r6, [r1, r9, lsl #2]
   2bf68:	cmp	ip, #1
   2bf6c:	blt	2bf7c <__assert_fail@plt+0x1a2d0>
   2bf70:	cmp	lr, #2
   2bf74:	mov	lr, r3
   2bf78:	bge	2bec0 <__assert_fail@plt+0x1a214>
   2bf7c:	ldr	lr, [r7, #4]
   2bf80:	ldr	r7, [sp, #4]
   2bf84:	ldr	r2, [sl, #4]
   2bf88:	ldr	r0, [sl, #8]
   2bf8c:	ldr	r4, [r7, #4]
   2bf90:	subs	r1, r2, #1
   2bf94:	add	r3, r1, lr
   2bf98:	add	r3, r3, r4
   2bf9c:	sub	r5, r3, r9
   2bfa0:	add	r6, r5, #1
   2bfa4:	cmpge	r5, #0
   2bfa8:	add	r7, r6, r2
   2bfac:	str	r7, [sl, #4]
   2bfb0:	blt	2c008 <__assert_fail@plt+0x1a35c>
   2bfb4:	add	r2, r2, r4
   2bfb8:	add	r2, r2, lr
   2bfbc:	sub	r2, r2, r9
   2bfc0:	add	r7, r0, r2, lsl #2
   2bfc4:	ldr	r2, [r0, r1, lsl #2]
   2bfc8:	ldr	r5, [r0, r3, lsl #2]
   2bfcc:	cmp	r5, r2
   2bfd0:	bgt	2bfec <__assert_fail@plt+0x1a340>
   2bfd4:	str	r2, [r7, r1, lsl #2]
   2bfd8:	sub	r2, r1, #1
   2bfdc:	cmp	r1, #0
   2bfe0:	mov	r1, r2
   2bfe4:	bgt	2bfc4 <__assert_fail@plt+0x1a318>
   2bfe8:	b	2c008 <__assert_fail@plt+0x1a35c>
   2bfec:	str	r5, [r7, r1, lsl #2]
   2bff0:	sub	r7, r7, #4
   2bff4:	subs	r6, r6, #1
   2bff8:	sub	r3, r3, #1
   2bffc:	mov	r2, #0
   2c000:	bne	2bfc4 <__assert_fail@plt+0x1a318>
   2c004:	b	2c00c <__assert_fail@plt+0x1a360>
   2c008:	mov	r2, r6
   2c00c:	add	r1, r0, r9, lsl #2
   2c010:	lsl	r2, r2, #2
   2c014:	bl	118ec <memcpy@plt>
   2c018:	mov	r0, #0
   2c01c:	sub	sp, fp, #28
   2c020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c024:	mov	r0, #12
   2c028:	sub	sp, fp, #28
   2c02c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c034:	add	fp, sp, #28
   2c038:	sub	sp, sp, #44	; 0x2c
   2c03c:	mov	ip, r0
   2c040:	ldr	r0, [r0, #28]
   2c044:	mov	r8, r2
   2c048:	add	r2, r1, r1, lsl #1
   2c04c:	mov	r9, #0
   2c050:	str	r3, [sp, #4]
   2c054:	str	r9, [sp, #36]	; 0x24
   2c058:	str	r9, [sp, #32]
   2c05c:	str	r9, [sp, #40]	; 0x28
   2c060:	add	r2, r0, r2, lsl #2
   2c064:	mov	r0, r2
   2c068:	ldr	r6, [r0, #4]!
   2c06c:	cmp	r6, #1
   2c070:	str	r0, [sp, #28]
   2c074:	blt	2c380 <__assert_fail@plt+0x1a6d4>
   2c078:	add	r4, r2, #8
   2c07c:	mov	sl, #1
   2c080:	str	r2, [sp]
   2c084:	str	r1, [sp, #12]
   2c088:	str	ip, [sp, #8]
   2c08c:	str	r4, [sp, #20]
   2c090:	ldr	r3, [r4]
   2c094:	ldr	r0, [r3, r9, lsl #2]
   2c098:	cmp	r0, r1
   2c09c:	beq	2c24c <__assert_fail@plt+0x1a5a0>
   2c0a0:	ldr	r2, [ip]
   2c0a4:	add	r2, r2, r0, lsl #3
   2c0a8:	ldrb	r2, [r2, #4]
   2c0ac:	tst	r2, #8
   2c0b0:	beq	2c24c <__assert_fail@plt+0x1a5a0>
   2c0b4:	ldr	r2, [ip, #20]
   2c0b8:	add	r0, r0, r0, lsl #1
   2c0bc:	mvn	lr, #0
   2c0c0:	str	r6, [sp, #24]
   2c0c4:	str	r0, [sp, #16]
   2c0c8:	add	r0, r2, r0, lsl #2
   2c0cc:	ldr	r7, [r0, #4]
   2c0d0:	ldr	r0, [r0, #8]
   2c0d4:	cmp	r7, #2
   2c0d8:	ldr	r5, [r0]
   2c0dc:	ldrge	lr, [r0, #4]
   2c0e0:	cmp	r6, #1
   2c0e4:	blt	2c128 <__assert_fail@plt+0x1a47c>
   2c0e8:	mov	r2, #0
   2c0ec:	subs	r7, r6, #1
   2c0f0:	beq	2c114 <__assert_fail@plt+0x1a468>
   2c0f4:	add	r4, r2, r7
   2c0f8:	lsr	r6, r4, #1
   2c0fc:	ldr	r0, [r3, r6, lsl #2]
   2c100:	cmp	r0, r5
   2c104:	movge	r7, r6
   2c108:	addlt	r2, sl, r4, lsr #1
   2c10c:	cmp	r2, r7
   2c110:	bcc	2c0f4 <__assert_fail@plt+0x1a448>
   2c114:	ldr	r0, [r3, r2, lsl #2]
   2c118:	ldr	r4, [sp, #20]
   2c11c:	ldr	r6, [sp, #24]
   2c120:	cmp	r0, r5
   2c124:	beq	2c180 <__assert_fail@plt+0x1a4d4>
   2c128:	ldr	r0, [r8, #4]
   2c12c:	cmp	r0, #1
   2c130:	blt	2c180 <__assert_fail@plt+0x1a4d4>
   2c134:	ldr	r1, [r8, #8]
   2c138:	subs	r4, r0, #1
   2c13c:	mov	r7, #0
   2c140:	beq	2c164 <__assert_fail@plt+0x1a4b8>
   2c144:	add	r0, r7, r4
   2c148:	lsr	r6, r0, #1
   2c14c:	ldr	ip, [r1, r6, lsl #2]
   2c150:	cmp	ip, r5
   2c154:	movge	r4, r6
   2c158:	addlt	r7, sl, r0, lsr #1
   2c15c:	cmp	r7, r4
   2c160:	bcc	2c144 <__assert_fail@plt+0x1a498>
   2c164:	ldr	r0, [r1, r7, lsl #2]
   2c168:	ldr	r1, [sp, #12]
   2c16c:	ldr	ip, [sp, #8]
   2c170:	ldr	r4, [sp, #20]
   2c174:	ldr	r6, [sp, #24]
   2c178:	cmp	r0, r5
   2c17c:	beq	2c21c <__assert_fail@plt+0x1a570>
   2c180:	cmp	lr, #1
   2c184:	blt	2c24c <__assert_fail@plt+0x1a5a0>
   2c188:	cmp	r6, #1
   2c18c:	blt	2c1cc <__assert_fail@plt+0x1a520>
   2c190:	mov	r2, #0
   2c194:	subs	r7, r6, #1
   2c198:	beq	2c1bc <__assert_fail@plt+0x1a510>
   2c19c:	add	r0, r2, r7
   2c1a0:	lsr	r6, r0, #1
   2c1a4:	ldr	r5, [r3, r6, lsl #2]
   2c1a8:	cmp	r5, lr
   2c1ac:	movge	r7, r6
   2c1b0:	addlt	r2, sl, r0, lsr #1
   2c1b4:	cmp	r2, r7
   2c1b8:	bcc	2c19c <__assert_fail@plt+0x1a4f0>
   2c1bc:	ldr	r0, [r3, r2, lsl #2]
   2c1c0:	ldr	r6, [sp, #24]
   2c1c4:	cmp	r0, lr
   2c1c8:	beq	2c24c <__assert_fail@plt+0x1a5a0>
   2c1cc:	ldr	r0, [r8, #4]
   2c1d0:	cmp	r0, #1
   2c1d4:	blt	2c24c <__assert_fail@plt+0x1a5a0>
   2c1d8:	ldr	r4, [r8, #8]
   2c1dc:	subs	r7, r0, #1
   2c1e0:	mov	r3, #0
   2c1e4:	beq	2c208 <__assert_fail@plt+0x1a55c>
   2c1e8:	add	r0, r3, r7
   2c1ec:	lsr	r6, r0, #1
   2c1f0:	ldr	r5, [r4, r6, lsl #2]
   2c1f4:	cmp	r5, lr
   2c1f8:	movge	r7, r6
   2c1fc:	addlt	r3, sl, r0, lsr #1
   2c200:	cmp	r3, r7
   2c204:	bcc	2c1e8 <__assert_fail@plt+0x1a53c>
   2c208:	ldr	r0, [r4, r3, lsl #2]
   2c20c:	ldr	r4, [sp, #20]
   2c210:	ldr	r6, [sp, #24]
   2c214:	cmp	r0, lr
   2c218:	bne	2c24c <__assert_fail@plt+0x1a5a0>
   2c21c:	ldr	r0, [ip, #28]
   2c220:	ldr	r1, [sp, #16]
   2c224:	add	r2, r0, r1, lsl #2
   2c228:	ldr	r1, [sp, #4]
   2c22c:	add	r0, sp, #32
   2c230:	bl	2be14 <__assert_fail@plt+0x1a168>
   2c234:	cmp	r0, #0
   2c238:	bne	2c398 <__assert_fail@plt+0x1a6ec>
   2c23c:	ldr	r0, [sp, #28]
   2c240:	ldr	r1, [sp, #12]
   2c244:	ldr	ip, [sp, #8]
   2c248:	ldr	r6, [r0]
   2c24c:	add	r9, r9, #1
   2c250:	cmp	r9, r6
   2c254:	blt	2c090 <__assert_fail@plt+0x1a3e4>
   2c258:	ldr	r0, [sp]
   2c25c:	cmp	r6, #0
   2c260:	ble	2c380 <__assert_fail@plt+0x1a6d4>
   2c264:	ldr	r9, [sp, #36]	; 0x24
   2c268:	ldr	lr, [r0, #8]
   2c26c:	ldr	r0, [sp, #40]	; 0x28
   2c270:	mov	ip, #0
   2c274:	mov	r6, #1
   2c278:	sub	r1, r9, #1
   2c27c:	str	lr, [sp, #20]
   2c280:	str	r9, [sp, #16]
   2c284:	str	r1, [sp, #24]
   2c288:	b	2c2ac <__assert_fail@plt+0x1a600>
   2c28c:	add	r3, r1, r2, lsl #2
   2c290:	ldr	r3, [r3, #4]
   2c294:	str	r3, [r1, r2, lsl #2]
   2c298:	add	r2, r2, #1
   2c29c:	ldr	r3, [r8, #4]
   2c2a0:	cmp	r2, r3
   2c2a4:	blt	2c28c <__assert_fail@plt+0x1a5e0>
   2c2a8:	b	2c368 <__assert_fail@plt+0x1a6bc>
   2c2ac:	ldr	r5, [lr, ip, lsl #2]
   2c2b0:	cmp	r9, #1
   2c2b4:	blt	2c2f4 <__assert_fail@plt+0x1a648>
   2c2b8:	ldr	r2, [sp, #24]
   2c2bc:	mov	r1, #0
   2c2c0:	cmp	r2, #0
   2c2c4:	beq	2c2e8 <__assert_fail@plt+0x1a63c>
   2c2c8:	add	r3, r1, r2
   2c2cc:	lsr	r4, r3, #1
   2c2d0:	ldr	r7, [r0, r4, lsl #2]
   2c2d4:	cmp	r7, r5
   2c2d8:	movge	r2, r4
   2c2dc:	addlt	r1, r6, r3, lsr #1
   2c2e0:	cmp	r1, r2
   2c2e4:	bcc	2c2c8 <__assert_fail@plt+0x1a61c>
   2c2e8:	ldr	r1, [r0, r1, lsl #2]
   2c2ec:	cmp	r1, r5
   2c2f0:	beq	2c368 <__assert_fail@plt+0x1a6bc>
   2c2f4:	ldr	r3, [r8, #4]
   2c2f8:	cmp	r3, #1
   2c2fc:	blt	2c368 <__assert_fail@plt+0x1a6bc>
   2c300:	mov	r1, r8
   2c304:	subs	sl, r3, #1
   2c308:	mov	r2, #0
   2c30c:	ldr	r1, [r8, #8]
   2c310:	beq	2c338 <__assert_fail@plt+0x1a68c>
   2c314:	mov	r4, sl
   2c318:	add	r7, r2, r4
   2c31c:	lsr	lr, r7, #1
   2c320:	ldr	r9, [r1, lr, lsl #2]
   2c324:	cmp	r9, r5
   2c328:	movge	r4, lr
   2c32c:	addlt	r2, r6, r7, lsr #1
   2c330:	cmp	r2, r4
   2c334:	bcc	2c318 <__assert_fail@plt+0x1a66c>
   2c338:	ldr	r7, [r1, r2, lsl #2]
   2c33c:	ldr	lr, [sp, #20]
   2c340:	ldr	r9, [sp, #16]
   2c344:	mov	r4, r2
   2c348:	cmp	r7, r5
   2c34c:	mvnne	r4, #0
   2c350:	cmp	r4, #0
   2c354:	blt	2c368 <__assert_fail@plt+0x1a6bc>
   2c358:	cmp	r3, r4
   2c35c:	strgt	sl, [r8, #4]
   2c360:	cmpgt	sl, r4
   2c364:	bgt	2c28c <__assert_fail@plt+0x1a5e0>
   2c368:	ldr	r1, [sp, #28]
   2c36c:	add	ip, ip, #1
   2c370:	ldr	r1, [r1]
   2c374:	cmp	ip, r1
   2c378:	blt	2c2ac <__assert_fail@plt+0x1a600>
   2c37c:	b	2c384 <__assert_fail@plt+0x1a6d8>
   2c380:	ldr	r0, [sp, #40]	; 0x28
   2c384:	bl	1b22c <__assert_fail@plt+0x9580>
   2c388:	mov	r5, #0
   2c38c:	mov	r0, r5
   2c390:	sub	sp, fp, #28
   2c394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c398:	mov	r5, r0
   2c39c:	ldr	r0, [sp, #40]	; 0x28
   2c3a0:	bl	1b22c <__assert_fail@plt+0x9580>
   2c3a4:	b	2c38c <__assert_fail@plt+0x1a6e0>
   2c3a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c3ac:	add	fp, sp, #28
   2c3b0:	sub	sp, sp, #28
   2c3b4:	ldr	ip, [r0, #108]	; 0x6c
   2c3b8:	str	r1, [sp, #24]
   2c3bc:	ldr	r1, [r0, #84]	; 0x54
   2c3c0:	mov	r4, r3
   2c3c4:	str	r2, [sp, #8]
   2c3c8:	str	r0, [sp, #16]
   2c3cc:	cmp	ip, #1
   2c3d0:	str	r1, [sp, #20]
   2c3d4:	blt	2c43c <__assert_fail@plt+0x1a790>
   2c3d8:	ldr	r1, [r0, #116]	; 0x74
   2c3dc:	mov	r9, #0
   2c3e0:	mov	r2, #1
   2c3e4:	mov	r3, ip
   2c3e8:	add	r7, r3, r9
   2c3ec:	add	r7, r7, r7, lsr #31
   2c3f0:	asr	r6, r7, #1
   2c3f4:	add	r5, r6, r6, lsl #1
   2c3f8:	add	r5, r1, r5, lsl #3
   2c3fc:	ldr	r5, [r5, #4]
   2c400:	cmp	r5, r4
   2c404:	addlt	r9, r2, r7, asr #1
   2c408:	movge	r3, r6
   2c40c:	cmp	r9, r3
   2c410:	blt	2c3e8 <__assert_fail@plt+0x1a73c>
   2c414:	cmp	r9, ip
   2c418:	bge	2c448 <__assert_fail@plt+0x1a79c>
   2c41c:	ldr	r0, [sp, #16]
   2c420:	add	r2, r9, r9, lsl #1
   2c424:	ldr	r1, [r0, #116]	; 0x74
   2c428:	add	r1, r1, r2, lsl #3
   2c42c:	ldr	r1, [r1, #4]
   2c430:	cmp	r1, r4
   2c434:	mvnne	r9, #0
   2c438:	b	2c44c <__assert_fail@plt+0x1a7a0>
   2c43c:	mov	r9, #0
   2c440:	cmp	r9, ip
   2c444:	blt	2c41c <__assert_fail@plt+0x1a770>
   2c448:	mvn	r9, #0
   2c44c:	ldr	r8, [fp, #12]
   2c450:	cmp	ip, #1
   2c454:	blt	2c49c <__assert_fail@plt+0x1a7f0>
   2c458:	ldr	r0, [sp, #16]
   2c45c:	mov	r6, #0
   2c460:	mov	r2, #1
   2c464:	mov	r3, ip
   2c468:	ldr	r1, [r0, #116]	; 0x74
   2c46c:	add	r7, r3, r6
   2c470:	add	r7, r7, r7, lsr #31
   2c474:	asr	r5, r7, #1
   2c478:	add	r0, r5, r5, lsl #1
   2c47c:	add	r0, r1, r0, lsl #3
   2c480:	ldr	r0, [r0, #4]
   2c484:	cmp	r0, r8
   2c488:	addlt	r6, r2, r7, asr #1
   2c48c:	movge	r3, r5
   2c490:	cmp	r6, r3
   2c494:	blt	2c46c <__assert_fail@plt+0x1a7c0>
   2c498:	b	2c4a0 <__assert_fail@plt+0x1a7f4>
   2c49c:	mov	r6, #0
   2c4a0:	cmp	r6, ip
   2c4a4:	ldr	ip, [sp, #16]
   2c4a8:	bge	2c4c8 <__assert_fail@plt+0x1a81c>
   2c4ac:	ldr	r0, [ip, #116]	; 0x74
   2c4b0:	add	r1, r6, r6, lsl #1
   2c4b4:	add	r0, r0, r1, lsl #3
   2c4b8:	ldr	r0, [r0, #4]
   2c4bc:	cmp	r0, r8
   2c4c0:	mvnne	r6, #0
   2c4c4:	b	2c4cc <__assert_fail@plt+0x1a820>
   2c4c8:	mvn	r6, #0
   2c4cc:	ldr	r0, [sp, #24]
   2c4d0:	ldr	r0, [r0, #4]
   2c4d4:	cmp	r0, #1
   2c4d8:	blt	2c658 <__assert_fail@plt+0x1a9ac>
   2c4dc:	mov	sl, #0
   2c4e0:	str	r4, [sp, #12]
   2c4e4:	ldr	r0, [sp, #24]
   2c4e8:	ldr	r3, [ip, #116]	; 0x74
   2c4ec:	ldr	r5, [sp, #20]
   2c4f0:	ldr	r0, [r0, #8]
   2c4f4:	ldr	r5, [r5]
   2c4f8:	ldr	r2, [r0, sl, lsl #2]
   2c4fc:	mov	r0, r3
   2c500:	add	r1, r2, r2, lsl #1
   2c504:	ldr	r7, [r0, r1, lsl #3]!
   2c508:	ldr	r0, [r0, #8]
   2c50c:	ldr	r5, [r5, r7, lsl #3]
   2c510:	mvn	r7, #0
   2c514:	cmp	r0, r4
   2c518:	ble	2c524 <__assert_fail@plt+0x1a878>
   2c51c:	mvn	r8, #0
   2c520:	b	2c5b0 <__assert_fail@plt+0x1a904>
   2c524:	add	r1, r3, r1, lsl #3
   2c528:	mov	r8, #1
   2c52c:	ldr	r1, [r1, #12]
   2c530:	cmp	r1, r4
   2c534:	blt	2c5b0 <__assert_fail@plt+0x1a904>
   2c538:	sub	r1, r1, r4
   2c53c:	mov	lr, r5
   2c540:	cmp	r0, r4
   2c544:	mov	r4, #1
   2c548:	clz	r1, r1
   2c54c:	lsr	r5, r1, #5
   2c550:	lsl	r1, r5, #1
   2c554:	orreq	r1, r4, r5, lsl #1
   2c558:	cmp	r1, #0
   2c55c:	beq	2c5a4 <__assert_fail@plt+0x1a8f8>
   2c560:	ldr	r3, [sp, #8]
   2c564:	mov	r0, ip
   2c568:	mov	r2, lr
   2c56c:	str	r9, [sp]
   2c570:	mov	r5, lr
   2c574:	bl	2c664 <__assert_fail@plt+0x1a9b8>
   2c578:	mov	r8, r0
   2c57c:	ldr	r0, [sp, #24]
   2c580:	ldr	ip, [sp, #16]
   2c584:	ldr	r4, [sp, #12]
   2c588:	ldr	r0, [r0, #8]
   2c58c:	ldr	r3, [ip, #116]	; 0x74
   2c590:	ldr	r2, [r0, sl, lsl #2]
   2c594:	add	r0, r2, r2, lsl #1
   2c598:	add	r0, r3, r0, lsl #3
   2c59c:	ldr	r0, [r0, #8]
   2c5a0:	b	2c5b0 <__assert_fail@plt+0x1a904>
   2c5a4:	ldr	r4, [sp, #12]
   2c5a8:	mov	r8, #0
   2c5ac:	mov	r5, lr
   2c5b0:	ldr	r1, [fp, #12]
   2c5b4:	cmp	r0, r1
   2c5b8:	bgt	2c620 <__assert_fail@plt+0x1a974>
   2c5bc:	add	r1, r2, r2, lsl #1
   2c5c0:	ldr	r2, [fp, #12]
   2c5c4:	mov	r7, #1
   2c5c8:	add	r1, r3, r1, lsl #3
   2c5cc:	ldr	r1, [r1, #12]
   2c5d0:	cmp	r1, r2
   2c5d4:	blt	2c620 <__assert_fail@plt+0x1a974>
   2c5d8:	ldr	r2, [fp, #12]
   2c5dc:	sub	r1, r1, r2
   2c5e0:	mov	r3, r2
   2c5e4:	clz	r1, r1
   2c5e8:	cmp	r0, r3
   2c5ec:	mov	r0, #1
   2c5f0:	lsr	r2, r1, #5
   2c5f4:	lsl	r1, r2, #1
   2c5f8:	orreq	r1, r0, r2, lsl #1
   2c5fc:	cmp	r1, #0
   2c600:	beq	2c640 <__assert_fail@plt+0x1a994>
   2c604:	ldr	r3, [fp, #8]
   2c608:	mov	r0, ip
   2c60c:	mov	r2, r5
   2c610:	str	r6, [sp]
   2c614:	bl	2c664 <__assert_fail@plt+0x1a9b8>
   2c618:	ldr	ip, [sp, #16]
   2c61c:	mov	r7, r0
   2c620:	cmp	r7, r8
   2c624:	bne	2c64c <__assert_fail@plt+0x1a9a0>
   2c628:	ldr	r0, [sp, #24]
   2c62c:	add	sl, sl, #1
   2c630:	ldr	r0, [r0, #4]
   2c634:	cmp	sl, r0
   2c638:	blt	2c4e4 <__assert_fail@plt+0x1a838>
   2c63c:	b	2c658 <__assert_fail@plt+0x1a9ac>
   2c640:	mov	r7, #0
   2c644:	cmp	r7, r8
   2c648:	beq	2c628 <__assert_fail@plt+0x1a97c>
   2c64c:	mov	r0, #1
   2c650:	sub	sp, fp, #28
   2c654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c658:	mov	r0, #0
   2c65c:	sub	sp, fp, #28
   2c660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c668:	add	fp, sp, #28
   2c66c:	sub	sp, sp, #36	; 0x24
   2c670:	ldr	r4, [r0, #84]	; 0x54
   2c674:	mov	r7, r0
   2c678:	mov	r5, r1
   2c67c:	add	r1, r3, r3, lsl #1
   2c680:	str	r3, [sp, #32]
   2c684:	ldr	r0, [r4, #24]
   2c688:	add	r1, r0, r1, lsl #2
   2c68c:	mov	lr, r1
   2c690:	ldr	r0, [lr, #4]!
   2c694:	cmp	r0, #1
   2c698:	blt	2c834 <__assert_fail@plt+0x1ab88>
   2c69c:	mov	ip, #1
   2c6a0:	mov	r6, r2
   2c6a4:	and	r3, r5, #2
   2c6a8:	mov	sl, #0
   2c6ac:	mvn	r2, ip, lsl r2
   2c6b0:	cmp	r6, #31
   2c6b4:	str	r3, [sp, #16]
   2c6b8:	str	r2, [sp, #24]
   2c6bc:	lsl	r2, ip, r6
   2c6c0:	and	ip, r5, #1
   2c6c4:	str	r2, [sp, #28]
   2c6c8:	mov	r2, #0
   2c6cc:	str	ip, [sp, #12]
   2c6d0:	movwgt	r2, #1
   2c6d4:	orr	r2, r2, r3, lsr #1
   2c6d8:	add	r3, r1, #8
   2c6dc:	str	r2, [sp, #20]
   2c6e0:	stmib	sp, {r3, lr}
   2c6e4:	ldr	r1, [r3]
   2c6e8:	ldr	r9, [r1, sl, lsl #2]
   2c6ec:	ldr	r1, [r4]
   2c6f0:	add	r2, r1, r9, lsl #3
   2c6f4:	ldrb	r2, [r2, #4]
   2c6f8:	cmp	r2, #9
   2c6fc:	beq	2c7f8 <__assert_fail@plt+0x1ab4c>
   2c700:	cmp	r2, #8
   2c704:	beq	2c814 <__assert_fail@plt+0x1ab68>
   2c708:	cmp	r2, #4
   2c70c:	bne	2c828 <__assert_fail@plt+0x1ab7c>
   2c710:	ldr	r1, [fp, #8]
   2c714:	cmn	r1, #1
   2c718:	beq	2c828 <__assert_fail@plt+0x1ab7c>
   2c71c:	ldr	r1, [fp, #8]
   2c720:	ldr	r0, [r7, #116]	; 0x74
   2c724:	add	r1, r1, r1, lsl #1
   2c728:	add	r0, r0, r1, lsl #3
   2c72c:	add	r8, r0, #16
   2c730:	ldr	r0, [r8, #-16]
   2c734:	cmp	r0, r9
   2c738:	bne	2c7d4 <__assert_fail@plt+0x1ab28>
   2c73c:	cmp	r6, #31
   2c740:	bgt	2c754 <__assert_fail@plt+0x1aaa8>
   2c744:	ldr	r0, [r8]
   2c748:	ldr	r1, [sp, #28]
   2c74c:	tst	r0, r1
   2c750:	beq	2c7d4 <__assert_fail@plt+0x1ab28>
   2c754:	ldr	r0, [r4, #20]
   2c758:	add	r1, r9, r9, lsl #1
   2c75c:	add	r0, r0, r1, lsl #2
   2c760:	ldr	r0, [r0, #8]
   2c764:	ldr	r3, [r0]
   2c768:	ldr	r0, [sp, #32]
   2c76c:	cmp	r3, r0
   2c770:	beq	2c840 <__assert_fail@plt+0x1ab94>
   2c774:	ldr	r0, [fp, #8]
   2c778:	mov	r1, r5
   2c77c:	mov	r2, r6
   2c780:	str	r0, [sp]
   2c784:	mov	r0, r7
   2c788:	bl	2c664 <__assert_fail@plt+0x1a9b8>
   2c78c:	cmp	r0, #0
   2c790:	beq	2c7a8 <__assert_fail@plt+0x1aafc>
   2c794:	cmn	r0, #1
   2c798:	beq	2c854 <__assert_fail@plt+0x1aba8>
   2c79c:	cmp	r6, #31
   2c7a0:	ble	2c7c4 <__assert_fail@plt+0x1ab18>
   2c7a4:	b	2c7d4 <__assert_fail@plt+0x1ab28>
   2c7a8:	ldr	r0, [sp, #20]
   2c7ac:	cmp	r0, #0
   2c7b0:	beq	2c7c4 <__assert_fail@plt+0x1ab18>
   2c7b4:	ldr	r0, [sp, #16]
   2c7b8:	cmp	r0, #0
   2c7bc:	beq	2c7d4 <__assert_fail@plt+0x1ab28>
   2c7c0:	b	2c850 <__assert_fail@plt+0x1aba4>
   2c7c4:	ldr	r0, [r8]
   2c7c8:	ldr	r1, [sp, #24]
   2c7cc:	and	r0, r0, r1
   2c7d0:	str	r0, [r8]
   2c7d4:	ldrb	r0, [r8, #4]
   2c7d8:	add	r8, r8, #24
   2c7dc:	cmp	r0, #0
   2c7e0:	bne	2c730 <__assert_fail@plt+0x1aa84>
   2c7e4:	ldr	lr, [sp, #8]
   2c7e8:	ldr	ip, [sp, #12]
   2c7ec:	ldr	r3, [sp, #4]
   2c7f0:	ldr	r0, [lr]
   2c7f4:	b	2c828 <__assert_fail@plt+0x1ab7c>
   2c7f8:	ldr	r2, [sp, #16]
   2c7fc:	cmp	r2, #0
   2c800:	beq	2c828 <__assert_fail@plt+0x1ab7c>
   2c804:	ldr	r1, [r1, r9, lsl #3]
   2c808:	cmp	r1, r6
   2c80c:	bne	2c828 <__assert_fail@plt+0x1ab7c>
   2c810:	b	2c850 <__assert_fail@plt+0x1aba4>
   2c814:	cmp	ip, #0
   2c818:	beq	2c828 <__assert_fail@plt+0x1ab7c>
   2c81c:	ldr	r1, [r1, r9, lsl #3]
   2c820:	cmp	r1, r6
   2c824:	beq	2c85c <__assert_fail@plt+0x1abb0>
   2c828:	add	sl, sl, #1
   2c82c:	cmp	sl, r0
   2c830:	blt	2c6e4 <__assert_fail@plt+0x1aa38>
   2c834:	ubfx	r0, r5, #1, #1
   2c838:	sub	sp, fp, #28
   2c83c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c840:	ldr	r0, [sp, #12]
   2c844:	rsb	r0, r0, #0
   2c848:	sub	sp, fp, #28
   2c84c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c850:	mov	r0, #0
   2c854:	sub	sp, fp, #28
   2c858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c85c:	mvn	r0, #0
   2c860:	sub	sp, fp, #28
   2c864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c86c:	add	fp, sp, #28
   2c870:	sub	sp, sp, #52	; 0x34
   2c874:	sub	sp, sp, #1024	; 0x400
   2c878:	mov	r9, r0
   2c87c:	ldrb	r0, [r0]
   2c880:	mov	sl, r1
   2c884:	cmp	r0, #0
   2c888:	beq	2cb24 <__assert_fail@plt+0x1ae78>
   2c88c:	mov	r8, #1
   2c890:	mov	r4, #0
   2c894:	ldrb	r7, [sl, r4]
   2c898:	cmp	r7, #0
   2c89c:	beq	2c908 <__assert_fail@plt+0x1ac5c>
   2c8a0:	uxtb	r6, r0
   2c8a4:	bl	11a90 <__ctype_b_loc@plt>
   2c8a8:	ldr	r5, [r0]
   2c8ac:	add	r0, r5, r6, lsl #1
   2c8b0:	ldrb	r0, [r0, #1]
   2c8b4:	tst	r0, #1
   2c8b8:	beq	2c8c8 <__assert_fail@plt+0x1ac1c>
   2c8bc:	bl	11a60 <__ctype_tolower_loc@plt>
   2c8c0:	ldr	r0, [r0]
   2c8c4:	ldr	r6, [r0, r6, lsl #2]
   2c8c8:	add	r0, r5, r7, lsl #1
   2c8cc:	ldrb	r0, [r0, #1]
   2c8d0:	tst	r0, #1
   2c8d4:	beq	2c8e4 <__assert_fail@plt+0x1ac38>
   2c8d8:	bl	11a60 <__ctype_tolower_loc@plt>
   2c8dc:	ldr	r0, [r0]
   2c8e0:	ldr	r7, [r0, r7, lsl #2]
   2c8e4:	sub	r0, r6, r7
   2c8e8:	clz	r0, r0
   2c8ec:	lsr	r0, r0, #5
   2c8f0:	and	r8, r8, r0
   2c8f4:	add	r0, r9, r4
   2c8f8:	add	r4, r4, #1
   2c8fc:	ldrb	r0, [r0, #1]
   2c900:	cmp	r0, #0
   2c904:	bne	2c894 <__assert_fail@plt+0x1abe8>
   2c908:	add	r0, sl, r4
   2c90c:	mov	r4, r9
   2c910:	ldrb	r1, [r0]
   2c914:	cmp	r1, #0
   2c918:	movwne	r4, #0
   2c91c:	tst	r8, #1
   2c920:	cmpeq	r1, #0
   2c924:	bne	2cb34 <__assert_fail@plt+0x1ae88>
   2c928:	sub	r8, r0, sl
   2c92c:	add	r0, r9, #1
   2c930:	cmp	r8, #31
   2c934:	str	r0, [sp, #20]
   2c938:	str	r8, [sp, #40]	; 0x28
   2c93c:	bhi	2cb40 <__assert_fail@plt+0x1ae94>
   2c940:	add	r2, sp, #44	; 0x2c
   2c944:	mov	r0, sl
   2c948:	mov	r1, r8
   2c94c:	bl	2d3a4 <__assert_fail@plt+0x1b6f8>
   2c950:	ldr	r5, [sp, #44]	; 0x2c
   2c954:	mov	r6, r0
   2c958:	mov	r0, sl
   2c95c:	mov	r2, r6
   2c960:	add	r1, sl, r5
   2c964:	bl	11b08 <strncasecmp@plt>
   2c968:	cmp	r0, #0
   2c96c:	beq	2cf9c <__assert_fail@plt+0x1b2f0>
   2c970:	sub	r0, r8, r6
   2c974:	mov	r1, #0
   2c978:	mov	r2, #1
   2c97c:	mov	r4, #0
   2c980:	cmp	r6, r0
   2c984:	movcs	r0, r6
   2c988:	add	r0, r0, #1
   2c98c:	str	r0, [sp, #12]
   2c990:	str	r0, [sp, #44]	; 0x2c
   2c994:	add	r0, r9, r8
   2c998:	bl	11b68 <memchr@plt>
   2c99c:	cmp	r8, #0
   2c9a0:	beq	2cb34 <__assert_fail@plt+0x1ae88>
   2c9a4:	cmp	r0, #0
   2c9a8:	str	r9, [sp, #24]
   2c9ac:	bne	2cb34 <__assert_fail@plt+0x1ae88>
   2c9b0:	add	r0, sl, r6
   2c9b4:	ldr	r5, [sp, #40]	; 0x28
   2c9b8:	sub	r8, sl, #1
   2c9bc:	str	r0, [sp, #36]	; 0x24
   2c9c0:	ldr	r0, [sp, #24]
   2c9c4:	add	r0, r0, r6
   2c9c8:	add	r0, r0, #1
   2c9cc:	str	r0, [sp, #8]
   2c9d0:	mov	r0, #0
   2c9d4:	str	r0, [sp, #32]
   2c9d8:	ldr	r0, [sp, #40]	; 0x28
   2c9dc:	mov	r9, r6
   2c9e0:	str	r5, [sp, #28]
   2c9e4:	cmp	r0, r6
   2c9e8:	bls	2ca64 <__assert_fail@plt+0x1adb8>
   2c9ec:	ldr	r0, [sp, #8]
   2c9f0:	ldr	r1, [sp, #32]
   2c9f4:	add	r4, r0, r1
   2c9f8:	bl	11a90 <__ctype_b_loc@plt>
   2c9fc:	ldr	sl, [r0]
   2ca00:	mov	r6, #0
   2ca04:	ldr	r0, [sp, #36]	; 0x24
   2ca08:	ldrb	r7, [r0, r6]
   2ca0c:	add	r0, sl, r7, lsl #1
   2ca10:	ldrb	r0, [r0, #1]
   2ca14:	tst	r0, #1
   2ca18:	beq	2ca28 <__assert_fail@plt+0x1ad7c>
   2ca1c:	bl	11a60 <__ctype_tolower_loc@plt>
   2ca20:	ldr	r0, [r0]
   2ca24:	ldr	r7, [r0, r7, lsl #2]
   2ca28:	ldrb	r5, [r4, r6]
   2ca2c:	add	r0, sl, r5, lsl #1
   2ca30:	ldrb	r0, [r0, #1]
   2ca34:	tst	r0, #1
   2ca38:	beq	2ca48 <__assert_fail@plt+0x1ad9c>
   2ca3c:	bl	11a60 <__ctype_tolower_loc@plt>
   2ca40:	ldr	r0, [r0]
   2ca44:	ldr	r5, [r0, r5, lsl #2]
   2ca48:	cmp	r7, r5
   2ca4c:	bne	2cad8 <__assert_fail@plt+0x1ae2c>
   2ca50:	ldr	r1, [sp, #40]	; 0x28
   2ca54:	add	r6, r6, #1
   2ca58:	add	r0, r9, r6
   2ca5c:	cmp	r0, r1
   2ca60:	bcc	2ca04 <__assert_fail@plt+0x1ad58>
   2ca64:	ldr	r0, [sp, #24]
   2ca68:	ldr	r1, [sp, #32]
   2ca6c:	mov	r6, r9
   2ca70:	add	sl, r0, r1
   2ca74:	cmp	r6, #0
   2ca78:	beq	2d388 <__assert_fail@plt+0x1b6dc>
   2ca7c:	bl	11a90 <__ctype_b_loc@plt>
   2ca80:	ldrb	r7, [r8, r6]
   2ca84:	ldr	r5, [r0]
   2ca88:	add	r0, r5, r7, lsl #1
   2ca8c:	ldrb	r0, [r0, #1]
   2ca90:	tst	r0, #1
   2ca94:	beq	2caa4 <__assert_fail@plt+0x1adf8>
   2ca98:	bl	11a60 <__ctype_tolower_loc@plt>
   2ca9c:	ldr	r0, [r0]
   2caa0:	ldr	r7, [r0, r7, lsl #2]
   2caa4:	ldrb	r4, [sl, r6]
   2caa8:	add	r0, r5, r4, lsl #1
   2caac:	ldrb	r0, [r0, #1]
   2cab0:	tst	r0, #1
   2cab4:	beq	2cac4 <__assert_fail@plt+0x1ae18>
   2cab8:	bl	11a60 <__ctype_tolower_loc@plt>
   2cabc:	ldr	r0, [r0]
   2cac0:	ldr	r4, [r0, r4, lsl #2]
   2cac4:	sub	r6, r6, #1
   2cac8:	cmp	r7, r4
   2cacc:	beq	2ca74 <__assert_fail@plt+0x1adc8>
   2cad0:	ldr	r1, [sp, #12]
   2cad4:	b	2cadc <__assert_fail@plt+0x1ae30>
   2cad8:	add	r1, r6, #1
   2cadc:	ldr	r2, [sp, #32]
   2cae0:	ldr	r0, [sp, #20]
   2cae4:	ldr	r3, [sp, #28]
   2cae8:	mov	r4, #0
   2caec:	add	r2, r1, r2
   2caf0:	ldr	r1, [sp, #40]	; 0x28
   2caf4:	add	r0, r0, r3
   2caf8:	str	r2, [sp, #32]
   2cafc:	add	r5, r2, r1
   2cb00:	mov	r1, #0
   2cb04:	sub	r2, r5, r3
   2cb08:	bl	11b68 <memchr@plt>
   2cb0c:	cmp	r0, #0
   2cb10:	bne	2cb34 <__assert_fail@plt+0x1ae88>
   2cb14:	mov	r6, r9
   2cb18:	cmp	r5, #0
   2cb1c:	bne	2c9d8 <__assert_fail@plt+0x1ad2c>
   2cb20:	b	2cb34 <__assert_fail@plt+0x1ae88>
   2cb24:	ldrb	r0, [sl]
   2cb28:	cmp	r0, #0
   2cb2c:	movne	r9, #0
   2cb30:	mov	r4, r9
   2cb34:	mov	r0, r4
   2cb38:	sub	sp, fp, #28
   2cb3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb40:	sub	r2, fp, #36	; 0x24
   2cb44:	mov	r0, sl
   2cb48:	mov	r1, r8
   2cb4c:	sub	r6, r8, #1
   2cb50:	bl	2d3a4 <__assert_fail@plt+0x1b6f8>
   2cb54:	add	r2, sp, #44	; 0x2c
   2cb58:	str	r0, [sp, #16]
   2cb5c:	vdup.32	q8, r8
   2cb60:	mov	r1, #1008	; 0x3f0
   2cb64:	add	r0, r2, #16
   2cb68:	vst1.32	{d16-d17}, [r0]
   2cb6c:	add	r0, r2, #32
   2cb70:	vst1.32	{d16-d17}, [r0]
   2cb74:	add	r0, r2, #48	; 0x30
   2cb78:	vst1.32	{d16-d17}, [r0]
   2cb7c:	add	r0, r2, #64	; 0x40
   2cb80:	vst1.32	{d16-d17}, [r0]
   2cb84:	add	r0, r2, #80	; 0x50
   2cb88:	vst1.32	{d16-d17}, [r0]
   2cb8c:	add	r0, r2, #96	; 0x60
   2cb90:	vst1.32	{d16-d17}, [r0]
   2cb94:	add	r0, r2, #112	; 0x70
   2cb98:	vst1.32	{d16-d17}, [r0]
   2cb9c:	add	r0, r2, #128	; 0x80
   2cba0:	vst1.32	{d16-d17}, [r0]
   2cba4:	add	r0, r2, #144	; 0x90
   2cba8:	vst1.32	{d16-d17}, [r0]
   2cbac:	add	r0, r2, #160	; 0xa0
   2cbb0:	vst1.32	{d16-d17}, [r0]
   2cbb4:	add	r0, r2, #176	; 0xb0
   2cbb8:	vst1.32	{d16-d17}, [r0]
   2cbbc:	add	r0, r2, #192	; 0xc0
   2cbc0:	vst1.32	{d16-d17}, [r0]
   2cbc4:	add	r0, r2, #208	; 0xd0
   2cbc8:	vst1.32	{d16-d17}, [r0]
   2cbcc:	add	r0, r2, #224	; 0xe0
   2cbd0:	vst1.32	{d16-d17}, [r0]
   2cbd4:	add	r0, r2, #240	; 0xf0
   2cbd8:	vst1.32	{d16-d17}, [r0]
   2cbdc:	add	r0, r2, #256	; 0x100
   2cbe0:	vst1.32	{d16-d17}, [r0]
   2cbe4:	add	r0, r2, #272	; 0x110
   2cbe8:	vst1.32	{d16-d17}, [r0]
   2cbec:	mov	r0, r2
   2cbf0:	vst1.32	{d16-d17}, [r0], r1
   2cbf4:	add	r1, r2, #304	; 0x130
   2cbf8:	vst1.32	{d16-d17}, [r1]
   2cbfc:	add	r1, r2, #288	; 0x120
   2cc00:	vst1.32	{d16-d17}, [r1]
   2cc04:	add	r1, r2, #320	; 0x140
   2cc08:	vst1.32	{d16-d17}, [r1]
   2cc0c:	add	r1, r2, #336	; 0x150
   2cc10:	vst1.32	{d16-d17}, [r1]
   2cc14:	add	r1, r2, #352	; 0x160
   2cc18:	vst1.32	{d16-d17}, [r1]
   2cc1c:	add	r1, r2, #368	; 0x170
   2cc20:	vst1.32	{d16-d17}, [r1]
   2cc24:	add	r1, r2, #384	; 0x180
   2cc28:	vst1.32	{d16-d17}, [r1]
   2cc2c:	add	r1, r2, #400	; 0x190
   2cc30:	vst1.32	{d16-d17}, [r1]
   2cc34:	add	r1, r2, #416	; 0x1a0
   2cc38:	vst1.32	{d16-d17}, [r1]
   2cc3c:	add	r1, r2, #432	; 0x1b0
   2cc40:	vst1.32	{d16-d17}, [r1]
   2cc44:	add	r1, r2, #448	; 0x1c0
   2cc48:	vst1.32	{d16-d17}, [r1]
   2cc4c:	add	r1, r2, #464	; 0x1d0
   2cc50:	vst1.32	{d16-d17}, [r1]
   2cc54:	add	r1, r2, #480	; 0x1e0
   2cc58:	vst1.32	{d16-d17}, [r1]
   2cc5c:	add	r1, r2, #496	; 0x1f0
   2cc60:	vst1.32	{d16-d17}, [r1]
   2cc64:	add	r1, r2, #512	; 0x200
   2cc68:	vst1.32	{d16-d17}, [r1]
   2cc6c:	add	r1, r2, #528	; 0x210
   2cc70:	vst1.32	{d16-d17}, [r1]
   2cc74:	add	r1, r2, #544	; 0x220
   2cc78:	vst1.32	{d16-d17}, [r1]
   2cc7c:	add	r1, r2, #560	; 0x230
   2cc80:	vst1.32	{d16-d17}, [r1]
   2cc84:	add	r1, r2, #576	; 0x240
   2cc88:	vst1.32	{d16-d17}, [r1]
   2cc8c:	add	r1, r2, #608	; 0x260
   2cc90:	vst1.32	{d16-d17}, [r1]
   2cc94:	add	r1, r2, #592	; 0x250
   2cc98:	vst1.32	{d16-d17}, [r1]
   2cc9c:	add	r1, r2, #624	; 0x270
   2cca0:	vst1.32	{d16-d17}, [r1]
   2cca4:	add	r1, r2, #640	; 0x280
   2cca8:	vst1.32	{d16-d17}, [r1]
   2ccac:	add	r1, r2, #656	; 0x290
   2ccb0:	vst1.32	{d16-d17}, [r1]
   2ccb4:	add	r1, r2, #672	; 0x2a0
   2ccb8:	vst1.32	{d16-d17}, [r1]
   2ccbc:	add	r1, r2, #688	; 0x2b0
   2ccc0:	vst1.32	{d16-d17}, [r1]
   2ccc4:	add	r1, r2, #704	; 0x2c0
   2ccc8:	vst1.32	{d16-d17}, [r1]
   2cccc:	add	r1, r2, #720	; 0x2d0
   2ccd0:	vst1.32	{d16-d17}, [r1]
   2ccd4:	add	r1, r2, #736	; 0x2e0
   2ccd8:	vst1.32	{d16-d17}, [r1]
   2ccdc:	add	r1, r2, #752	; 0x2f0
   2cce0:	vst1.32	{d16-d17}, [r1]
   2cce4:	add	r1, r2, #768	; 0x300
   2cce8:	vst1.32	{d16-d17}, [r1]
   2ccec:	add	r1, r2, #784	; 0x310
   2ccf0:	vst1.32	{d16-d17}, [r1]
   2ccf4:	add	r1, r2, #800	; 0x320
   2ccf8:	vst1.32	{d16-d17}, [r1]
   2ccfc:	add	r1, r2, #816	; 0x330
   2cd00:	vst1.32	{d16-d17}, [r1]
   2cd04:	add	r1, r2, #832	; 0x340
   2cd08:	vst1.32	{d16-d17}, [r1]
   2cd0c:	add	r1, r2, #848	; 0x350
   2cd10:	vst1.32	{d16-d17}, [r1]
   2cd14:	add	r1, r2, #864	; 0x360
   2cd18:	vst1.32	{d16-d17}, [r1]
   2cd1c:	add	r1, r2, #880	; 0x370
   2cd20:	vst1.32	{d16-d17}, [r1]
   2cd24:	add	r1, r2, #912	; 0x390
   2cd28:	vst1.32	{d16-d17}, [r1]
   2cd2c:	add	r1, r2, #896	; 0x380
   2cd30:	vst1.32	{d16-d17}, [r1]
   2cd34:	add	r1, r2, #928	; 0x3a0
   2cd38:	vst1.32	{d16-d17}, [r1]
   2cd3c:	add	r1, r2, #944	; 0x3b0
   2cd40:	vst1.32	{d16-d17}, [r1]
   2cd44:	add	r1, r2, #960	; 0x3c0
   2cd48:	vst1.32	{d16-d17}, [r1]
   2cd4c:	add	r1, r2, #976	; 0x3d0
   2cd50:	vst1.32	{d16-d17}, [r1]
   2cd54:	add	r1, r2, #992	; 0x3e0
   2cd58:	vst1.32	{d16-d17}, [r1]
   2cd5c:	vst1.32	{d16-d17}, [r0]
   2cd60:	bl	11a90 <__ctype_b_loc@plt>
   2cd64:	ldr	r4, [r0]
   2cd68:	mov	r5, sl
   2cd6c:	str	r6, [sp, #32]
   2cd70:	ldrb	r7, [r5]
   2cd74:	add	r0, r4, r7, lsl #1
   2cd78:	ldrb	r0, [r0, #1]
   2cd7c:	tst	r0, #1
   2cd80:	beq	2cd90 <__assert_fail@plt+0x1b0e4>
   2cd84:	bl	11a60 <__ctype_tolower_loc@plt>
   2cd88:	ldr	r0, [r0]
   2cd8c:	ldr	r7, [r0, r7, lsl #2]
   2cd90:	add	r0, sp, #44	; 0x2c
   2cd94:	add	r5, r5, #1
   2cd98:	str	r6, [r0, r7, lsl #2]
   2cd9c:	sub	r6, r6, #1
   2cda0:	cmn	r6, #1
   2cda4:	bne	2cd70 <__assert_fail@plt+0x1b0c4>
   2cda8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   2cdac:	ldr	r4, [sp, #16]
   2cdb0:	mov	r0, sl
   2cdb4:	add	r1, sl, r5
   2cdb8:	mov	r2, r4
   2cdbc:	bl	11b08 <strncasecmp@plt>
   2cdc0:	cmp	r0, #0
   2cdc4:	beq	2d170 <__assert_fail@plt+0x1b4c4>
   2cdc8:	sub	r0, r8, r4
   2cdcc:	mov	r1, #0
   2cdd0:	mov	r2, #1
   2cdd4:	cmp	r4, r0
   2cdd8:	movcs	r0, r4
   2cddc:	mov	r4, #0
   2cde0:	add	r0, r0, #1
   2cde4:	str	r0, [sp, #12]
   2cde8:	str	r0, [fp, #-36]	; 0xffffffdc
   2cdec:	add	r0, r9, r8
   2cdf0:	bl	11b68 <memchr@plt>
   2cdf4:	cmp	r8, #0
   2cdf8:	beq	2cb34 <__assert_fail@plt+0x1ae88>
   2cdfc:	cmp	r0, #0
   2ce00:	str	r9, [sp, #24]
   2ce04:	bne	2cb34 <__assert_fail@plt+0x1ae88>
   2ce08:	ldr	r1, [sp, #16]
   2ce0c:	add	r0, sl, r1
   2ce10:	str	r0, [sp, #28]
   2ce14:	ldr	r0, [sp, #24]
   2ce18:	add	r0, r0, r1
   2ce1c:	add	r0, r0, #1
   2ce20:	str	r0, [sp, #8]
   2ce24:	sub	r0, sl, #1
   2ce28:	str	r0, [sp, #36]	; 0x24
   2ce2c:	bl	11a90 <__ctype_b_loc@plt>
   2ce30:	ldr	r5, [r0]
   2ce34:	mov	sl, #0
   2ce38:	mov	r9, r8
   2ce3c:	ldr	r0, [sp, #24]
   2ce40:	ldrb	r4, [r0, r9]
   2ce44:	add	r0, r5, r4, lsl #1
   2ce48:	ldrb	r0, [r0, #1]
   2ce4c:	tst	r0, #1
   2ce50:	beq	2ce60 <__assert_fail@plt+0x1b1b4>
   2ce54:	bl	11a60 <__ctype_tolower_loc@plt>
   2ce58:	ldr	r0, [r0]
   2ce5c:	ldr	r4, [r0, r4, lsl #2]
   2ce60:	add	r0, sp, #44	; 0x2c
   2ce64:	ldr	r1, [r0, r4, lsl #2]
   2ce68:	cmp	r1, #0
   2ce6c:	bne	2cf64 <__assert_fail@plt+0x1b2b8>
   2ce70:	ldr	r0, [sp, #32]
   2ce74:	ldr	r1, [sp, #16]
   2ce78:	cmp	r1, r0
   2ce7c:	bcs	2cef0 <__assert_fail@plt+0x1b244>
   2ce80:	ldr	r0, [sp, #8]
   2ce84:	mov	r4, #0
   2ce88:	add	r8, r0, sl
   2ce8c:	ldr	r0, [sp, #28]
   2ce90:	ldrb	r6, [r0, r4]
   2ce94:	add	r0, r5, r6, lsl #1
   2ce98:	ldrb	r0, [r0, #1]
   2ce9c:	tst	r0, #1
   2cea0:	beq	2ceb0 <__assert_fail@plt+0x1b204>
   2cea4:	bl	11a60 <__ctype_tolower_loc@plt>
   2cea8:	ldr	r0, [r0]
   2ceac:	ldr	r6, [r0, r6, lsl #2]
   2ceb0:	ldrb	r7, [r8, r4]
   2ceb4:	add	r0, r5, r7, lsl #1
   2ceb8:	ldrb	r0, [r0, #1]
   2cebc:	tst	r0, #1
   2cec0:	beq	2ced0 <__assert_fail@plt+0x1b224>
   2cec4:	bl	11a60 <__ctype_tolower_loc@plt>
   2cec8:	ldr	r0, [r0]
   2cecc:	ldr	r7, [r0, r7, lsl #2]
   2ced0:	cmp	r6, r7
   2ced4:	bne	2cf5c <__assert_fail@plt+0x1b2b0>
   2ced8:	ldr	r0, [sp, #16]
   2cedc:	ldr	r1, [sp, #32]
   2cee0:	add	r4, r4, #1
   2cee4:	add	r0, r0, r4
   2cee8:	cmp	r0, r1
   2ceec:	bcc	2ce8c <__assert_fail@plt+0x1b1e0>
   2cef0:	ldr	r0, [sp, #24]
   2cef4:	ldr	r6, [sp, #16]
   2cef8:	add	r8, r0, sl
   2cefc:	cmp	r6, #0
   2cf00:	beq	2d398 <__assert_fail@plt+0x1b6ec>
   2cf04:	ldr	r0, [sp, #36]	; 0x24
   2cf08:	ldrb	r7, [r0, r6]
   2cf0c:	add	r0, r5, r7, lsl #1
   2cf10:	ldrb	r0, [r0, #1]
   2cf14:	tst	r0, #1
   2cf18:	beq	2cf28 <__assert_fail@plt+0x1b27c>
   2cf1c:	bl	11a60 <__ctype_tolower_loc@plt>
   2cf20:	ldr	r0, [r0]
   2cf24:	ldr	r7, [r0, r7, lsl #2]
   2cf28:	ldrb	r4, [r8, r6]
   2cf2c:	add	r0, r5, r4, lsl #1
   2cf30:	ldrb	r0, [r0, #1]
   2cf34:	tst	r0, #1
   2cf38:	beq	2cf48 <__assert_fail@plt+0x1b29c>
   2cf3c:	bl	11a60 <__ctype_tolower_loc@plt>
   2cf40:	ldr	r0, [r0]
   2cf44:	ldr	r4, [r0, r4, lsl #2]
   2cf48:	sub	r6, r6, #1
   2cf4c:	cmp	r7, r4
   2cf50:	beq	2cefc <__assert_fail@plt+0x1b250>
   2cf54:	ldr	r1, [sp, #12]
   2cf58:	b	2cf60 <__assert_fail@plt+0x1b2b4>
   2cf5c:	add	r1, r4, #1
   2cf60:	ldr	r8, [sp, #40]	; 0x28
   2cf64:	ldr	r0, [sp, #20]
   2cf68:	add	sl, r1, sl
   2cf6c:	mov	r1, #0
   2cf70:	mov	r4, #0
   2cf74:	add	r6, sl, r8
   2cf78:	sub	r2, r6, r9
   2cf7c:	add	r0, r0, r9
   2cf80:	bl	11b68 <memchr@plt>
   2cf84:	cmp	r0, #0
   2cf88:	bne	2cb34 <__assert_fail@plt+0x1ae88>
   2cf8c:	cmp	r6, #0
   2cf90:	mov	r9, r6
   2cf94:	bne	2ce3c <__assert_fail@plt+0x1b190>
   2cf98:	b	2cb34 <__assert_fail@plt+0x1ae88>
   2cf9c:	add	r0, r9, r8
   2cfa0:	mov	r1, #0
   2cfa4:	mov	r2, #1
   2cfa8:	mov	r4, #0
   2cfac:	bl	11b68 <memchr@plt>
   2cfb0:	cmp	r8, #0
   2cfb4:	beq	2cb34 <__assert_fail@plt+0x1ae88>
   2cfb8:	cmp	r0, #0
   2cfbc:	str	r5, [sp, #12]
   2cfc0:	str	sl, [sp, #36]	; 0x24
   2cfc4:	str	r9, [sp, #24]
   2cfc8:	bne	2cb34 <__assert_fail@plt+0x1ae88>
   2cfcc:	ldr	r0, [sp, #40]	; 0x28
   2cfd0:	ldr	r1, [sp, #12]
   2cfd4:	mov	sl, #0
   2cfd8:	str	r6, [sp, #16]
   2cfdc:	sub	r1, r0, r1
   2cfe0:	mov	r5, r0
   2cfe4:	str	r1, [sp, #8]
   2cfe8:	ldr	r1, [sp, #36]	; 0x24
   2cfec:	sub	r9, r1, #1
   2cff0:	rsb	r1, r6, #0
   2cff4:	str	r1, [sp, #4]
   2cff8:	mov	r1, #0
   2cffc:	str	r1, [sp, #32]
   2d000:	ldr	r0, [sp, #40]	; 0x28
   2d004:	cmp	r6, sl
   2d008:	mov	r4, r6
   2d00c:	str	r5, [sp, #28]
   2d010:	movcc	r4, sl
   2d014:	cmp	r4, r0
   2d018:	bcs	2d090 <__assert_fail@plt+0x1b3e4>
   2d01c:	ldr	r0, [sp, #24]
   2d020:	ldr	r1, [sp, #32]
   2d024:	add	r8, r0, r1
   2d028:	bl	11a90 <__ctype_b_loc@plt>
   2d02c:	ldr	r5, [r0]
   2d030:	ldr	r0, [sp, #36]	; 0x24
   2d034:	ldrb	r6, [r0, r4]
   2d038:	add	r0, r5, r6, lsl #1
   2d03c:	ldrb	r0, [r0, #1]
   2d040:	tst	r0, #1
   2d044:	beq	2d054 <__assert_fail@plt+0x1b3a8>
   2d048:	bl	11a60 <__ctype_tolower_loc@plt>
   2d04c:	ldr	r0, [r0]
   2d050:	ldr	r6, [r0, r6, lsl #2]
   2d054:	add	r0, r8, r4
   2d058:	ldrb	r7, [r0, #1]
   2d05c:	add	r0, r5, r7, lsl #1
   2d060:	ldrb	r0, [r0, #1]
   2d064:	tst	r0, #1
   2d068:	beq	2d078 <__assert_fail@plt+0x1b3cc>
   2d06c:	bl	11a60 <__ctype_tolower_loc@plt>
   2d070:	ldr	r0, [r0]
   2d074:	ldr	r7, [r0, r7, lsl #2]
   2d078:	cmp	r6, r7
   2d07c:	bne	2d118 <__assert_fail@plt+0x1b46c>
   2d080:	ldr	r0, [sp, #40]	; 0x28
   2d084:	add	r4, r4, #1
   2d088:	cmp	r4, r0
   2d08c:	bcc	2d030 <__assert_fail@plt+0x1b384>
   2d090:	ldr	r0, [sp, #24]
   2d094:	ldr	r1, [sp, #32]
   2d098:	add	r8, r0, r1
   2d09c:	ldr	r0, [sp, #16]
   2d0a0:	mov	r5, r0
   2d0a4:	cmp	sl, r0
   2d0a8:	bcs	2d100 <__assert_fail@plt+0x1b454>
   2d0ac:	bl	11a90 <__ctype_b_loc@plt>
   2d0b0:	ldrb	r6, [r9, r5]
   2d0b4:	ldr	r7, [r0]
   2d0b8:	add	r0, r7, r6, lsl #1
   2d0bc:	ldrb	r0, [r0, #1]
   2d0c0:	tst	r0, #1
   2d0c4:	beq	2d0d4 <__assert_fail@plt+0x1b428>
   2d0c8:	bl	11a60 <__ctype_tolower_loc@plt>
   2d0cc:	ldr	r0, [r0]
   2d0d0:	ldr	r6, [r0, r6, lsl #2]
   2d0d4:	ldrb	r4, [r8, r5]
   2d0d8:	add	r0, r7, r4, lsl #1
   2d0dc:	ldrb	r0, [r0, #1]
   2d0e0:	tst	r0, #1
   2d0e4:	beq	2d0f4 <__assert_fail@plt+0x1b448>
   2d0e8:	bl	11a60 <__ctype_tolower_loc@plt>
   2d0ec:	ldr	r0, [r0]
   2d0f0:	ldr	r4, [r0, r4, lsl #2]
   2d0f4:	sub	r0, r5, #1
   2d0f8:	cmp	r6, r4
   2d0fc:	beq	2d0a0 <__assert_fail@plt+0x1b3f4>
   2d100:	add	r0, sl, #1
   2d104:	ldr	sl, [sp, #8]
   2d108:	ldr	r1, [sp, #12]
   2d10c:	cmp	r5, r0
   2d110:	bcs	2d128 <__assert_fail@plt+0x1b47c>
   2d114:	b	2d388 <__assert_fail@plt+0x1b6dc>
   2d118:	ldr	r0, [sp, #4]
   2d11c:	mov	sl, #0
   2d120:	add	r0, r0, r4
   2d124:	add	r1, r0, #1
   2d128:	ldr	r2, [sp, #32]
   2d12c:	ldr	r0, [sp, #20]
   2d130:	ldr	r3, [sp, #28]
   2d134:	mov	r4, #0
   2d138:	add	r2, r1, r2
   2d13c:	ldr	r1, [sp, #40]	; 0x28
   2d140:	add	r0, r0, r3
   2d144:	str	r2, [sp, #32]
   2d148:	add	r5, r2, r1
   2d14c:	mov	r1, #0
   2d150:	sub	r2, r5, r3
   2d154:	bl	11b68 <memchr@plt>
   2d158:	cmp	r0, #0
   2d15c:	bne	2cb34 <__assert_fail@plt+0x1ae88>
   2d160:	ldr	r6, [sp, #16]
   2d164:	cmp	r5, #0
   2d168:	bne	2d000 <__assert_fail@plt+0x1b354>
   2d16c:	b	2cb34 <__assert_fail@plt+0x1ae88>
   2d170:	add	r0, r9, r8
   2d174:	mov	r1, #0
   2d178:	mov	r2, #1
   2d17c:	mov	r4, #0
   2d180:	bl	11b68 <memchr@plt>
   2d184:	cmp	r8, #0
   2d188:	beq	2cb34 <__assert_fail@plt+0x1ae88>
   2d18c:	cmp	r0, #0
   2d190:	str	r5, [sp, #12]
   2d194:	str	sl, [sp, #36]	; 0x24
   2d198:	str	r9, [sp, #24]
   2d19c:	bne	2cb34 <__assert_fail@plt+0x1ae88>
   2d1a0:	ldr	r0, [sp, #12]
   2d1a4:	sub	r0, r8, r0
   2d1a8:	str	r0, [sp, #8]
   2d1ac:	ldr	r0, [sp, #36]	; 0x24
   2d1b0:	sub	r0, r0, #1
   2d1b4:	str	r0, [sp, #28]
   2d1b8:	ldr	r0, [sp, #16]
   2d1bc:	rsb	r0, r0, #0
   2d1c0:	str	r0, [sp]
   2d1c4:	bl	11a90 <__ctype_b_loc@plt>
   2d1c8:	ldr	r5, [r0]
   2d1cc:	mov	sl, #0
   2d1d0:	mov	r7, r8
   2d1d4:	mov	r9, #0
   2d1d8:	ldr	r0, [sp, #24]
   2d1dc:	ldrb	r4, [r0, r7]
   2d1e0:	add	r0, r5, r4, lsl #1
   2d1e4:	ldrb	r0, [r0, #1]
   2d1e8:	tst	r0, #1
   2d1ec:	beq	2d1fc <__assert_fail@plt+0x1b550>
   2d1f0:	bl	11a60 <__ctype_tolower_loc@plt>
   2d1f4:	ldr	r0, [r0]
   2d1f8:	ldr	r4, [r0, r4, lsl #2]
   2d1fc:	add	r0, sp, #44	; 0x2c
   2d200:	ldr	r0, [r0, r4, lsl #2]
   2d204:	cmp	r0, #0
   2d208:	beq	2d230 <__assert_fail@plt+0x1b584>
   2d20c:	ldr	r1, [sp, #12]
   2d210:	ldr	r2, [sp, #8]
   2d214:	cmp	r0, r1
   2d218:	mov	r1, r0
   2d21c:	movcc	r1, r2
   2d220:	cmp	r9, #0
   2d224:	mov	r9, #0
   2d228:	moveq	r1, r0
   2d22c:	b	2d350 <__assert_fail@plt+0x1b6a4>
   2d230:	ldr	r4, [sp, #16]
   2d234:	ldr	r0, [sp, #32]
   2d238:	str	r7, [sp, #4]
   2d23c:	cmp	r4, r9
   2d240:	movcc	r4, r9
   2d244:	cmp	r4, r0
   2d248:	bcs	2d2b4 <__assert_fail@plt+0x1b608>
   2d24c:	ldr	r0, [sp, #24]
   2d250:	add	r8, r0, sl
   2d254:	ldr	r0, [sp, #36]	; 0x24
   2d258:	ldrb	r6, [r0, r4]
   2d25c:	add	r0, r5, r6, lsl #1
   2d260:	ldrb	r0, [r0, #1]
   2d264:	tst	r0, #1
   2d268:	beq	2d278 <__assert_fail@plt+0x1b5cc>
   2d26c:	bl	11a60 <__ctype_tolower_loc@plt>
   2d270:	ldr	r0, [r0]
   2d274:	ldr	r6, [r0, r6, lsl #2]
   2d278:	add	r0, r8, r4
   2d27c:	ldrb	r7, [r0, #1]
   2d280:	add	r0, r5, r7, lsl #1
   2d284:	ldrb	r0, [r0, #1]
   2d288:	tst	r0, #1
   2d28c:	beq	2d29c <__assert_fail@plt+0x1b5f0>
   2d290:	bl	11a60 <__ctype_tolower_loc@plt>
   2d294:	ldr	r0, [r0]
   2d298:	ldr	r7, [r0, r7, lsl #2]
   2d29c:	cmp	r6, r7
   2d2a0:	bne	2d338 <__assert_fail@plt+0x1b68c>
   2d2a4:	ldr	r0, [sp, #32]
   2d2a8:	add	r4, r4, #1
   2d2ac:	cmp	r4, r0
   2d2b0:	bcc	2d254 <__assert_fail@plt+0x1b5a8>
   2d2b4:	ldr	r0, [sp, #24]
   2d2b8:	add	r8, r0, sl
   2d2bc:	ldr	r0, [sp, #16]
   2d2c0:	mov	r7, r0
   2d2c4:	cmp	r9, r0
   2d2c8:	bcs	2d31c <__assert_fail@plt+0x1b670>
   2d2cc:	ldr	r0, [sp, #28]
   2d2d0:	ldrb	r6, [r0, r7]
   2d2d4:	add	r0, r5, r6, lsl #1
   2d2d8:	ldrb	r0, [r0, #1]
   2d2dc:	tst	r0, #1
   2d2e0:	beq	2d2f0 <__assert_fail@plt+0x1b644>
   2d2e4:	bl	11a60 <__ctype_tolower_loc@plt>
   2d2e8:	ldr	r0, [r0]
   2d2ec:	ldr	r6, [r0, r6, lsl #2]
   2d2f0:	ldrb	r4, [r8, r7]
   2d2f4:	add	r0, r5, r4, lsl #1
   2d2f8:	ldrb	r0, [r0, #1]
   2d2fc:	tst	r0, #1
   2d300:	beq	2d310 <__assert_fail@plt+0x1b664>
   2d304:	bl	11a60 <__ctype_tolower_loc@plt>
   2d308:	ldr	r0, [r0]
   2d30c:	ldr	r4, [r0, r4, lsl #2]
   2d310:	sub	r0, r7, #1
   2d314:	cmp	r6, r4
   2d318:	beq	2d2c0 <__assert_fail@plt+0x1b614>
   2d31c:	add	r0, r9, #1
   2d320:	ldr	r1, [sp, #12]
   2d324:	ldr	r8, [sp, #40]	; 0x28
   2d328:	cmp	r7, r0
   2d32c:	ldmib	sp, {r7, r9}
   2d330:	bcs	2d350 <__assert_fail@plt+0x1b6a4>
   2d334:	b	2d398 <__assert_fail@plt+0x1b6ec>
   2d338:	ldr	r0, [sp]
   2d33c:	ldr	r8, [sp, #40]	; 0x28
   2d340:	ldr	r7, [sp, #4]
   2d344:	mov	r9, #0
   2d348:	add	r0, r0, r4
   2d34c:	add	r1, r0, #1
   2d350:	ldr	r0, [sp, #20]
   2d354:	add	sl, r1, sl
   2d358:	mov	r1, #0
   2d35c:	mov	r4, #0
   2d360:	add	r6, sl, r8
   2d364:	sub	r2, r6, r7
   2d368:	add	r0, r0, r7
   2d36c:	bl	11b68 <memchr@plt>
   2d370:	cmp	r0, #0
   2d374:	bne	2cb34 <__assert_fail@plt+0x1ae88>
   2d378:	cmp	r6, #0
   2d37c:	mov	r7, r6
   2d380:	bne	2d1d8 <__assert_fail@plt+0x1b52c>
   2d384:	b	2cb34 <__assert_fail@plt+0x1ae88>
   2d388:	ldr	r0, [sp, #20]
   2d38c:	ldr	r1, [sp, #32]
   2d390:	add	r4, r0, r1
   2d394:	b	2cb34 <__assert_fail@plt+0x1ae88>
   2d398:	ldr	r0, [sp, #20]
   2d39c:	add	r4, r0, sl
   2d3a0:	b	2cb34 <__assert_fail@plt+0x1ae88>
   2d3a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d3a8:	add	fp, sp, #28
   2d3ac:	sub	sp, sp, #20
   2d3b0:	mov	r6, r1
   2d3b4:	cmp	r1, #3
   2d3b8:	str	r0, [sp, #16]
   2d3bc:	bcs	2d3d4 <__assert_fail@plt+0x1b728>
   2d3c0:	mov	r0, #1
   2d3c4:	str	r0, [r2]
   2d3c8:	sub	r0, r6, #1
   2d3cc:	sub	sp, fp, #28
   2d3d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d3d4:	str	r2, [sp]
   2d3d8:	bl	11a90 <__ctype_b_loc@plt>
   2d3dc:	ldr	r2, [r0]
   2d3e0:	mov	r0, #0
   2d3e4:	mvn	r4, #0
   2d3e8:	mov	r7, #1
   2d3ec:	mov	r5, #1
   2d3f0:	mov	r1, #1
   2d3f4:	str	r6, [sp, #12]
   2d3f8:	str	r2, [sp, #4]
   2d3fc:	mov	r6, r0
   2d400:	ldr	r0, [sp, #16]
   2d404:	str	r1, [sp, #8]
   2d408:	ldrb	r8, [r0, r7]
   2d40c:	add	r0, r2, r8, lsl #1
   2d410:	ldrb	r0, [r0, #1]
   2d414:	tst	r0, #1
   2d418:	beq	2d42c <__assert_fail@plt+0x1b780>
   2d41c:	bl	11a60 <__ctype_tolower_loc@plt>
   2d420:	ldr	r0, [r0]
   2d424:	ldr	r2, [sp, #4]
   2d428:	ldrb	r8, [r0, r8, lsl #2]
   2d42c:	ldr	r1, [sp, #16]
   2d430:	add	r0, r4, r5
   2d434:	mov	r9, r4
   2d438:	ldrb	sl, [r1, r0]
   2d43c:	add	r0, r2, sl, lsl #1
   2d440:	ldrb	r0, [r0, #1]
   2d444:	tst	r0, #1
   2d448:	beq	2d45c <__assert_fail@plt+0x1b7b0>
   2d44c:	bl	11a60 <__ctype_tolower_loc@plt>
   2d450:	ldr	r0, [r0]
   2d454:	ldr	r2, [sp, #4]
   2d458:	ldrb	sl, [r0, sl, lsl #2]
   2d45c:	cmp	r8, sl
   2d460:	bcs	2d478 <__assert_fail@plt+0x1b7cc>
   2d464:	mov	r4, r9
   2d468:	sub	r1, r7, r9
   2d46c:	mov	r5, #1
   2d470:	mov	r0, r7
   2d474:	b	2d4a8 <__assert_fail@plt+0x1b7fc>
   2d478:	bne	2d498 <__assert_fail@plt+0x1b7ec>
   2d47c:	ldr	r1, [sp, #8]
   2d480:	cmp	r5, r1
   2d484:	bne	2d4b0 <__assert_fail@plt+0x1b804>
   2d488:	add	r0, r6, r5
   2d48c:	mov	r1, r5
   2d490:	mov	r5, #1
   2d494:	b	2d4b8 <__assert_fail@plt+0x1b80c>
   2d498:	add	r0, r6, #1
   2d49c:	mov	r1, #1
   2d4a0:	mov	r5, #1
   2d4a4:	mov	r4, r6
   2d4a8:	ldr	r6, [sp, #12]
   2d4ac:	b	2d4c0 <__assert_fail@plt+0x1b814>
   2d4b0:	add	r5, r5, #1
   2d4b4:	mov	r0, r6
   2d4b8:	ldr	r6, [sp, #12]
   2d4bc:	mov	r4, r9
   2d4c0:	add	r7, r0, r5
   2d4c4:	cmp	r7, r6
   2d4c8:	bcc	2d3fc <__assert_fail@plt+0x1b750>
   2d4cc:	ldr	r0, [sp]
   2d4d0:	cmp	r6, #2
   2d4d4:	str	r4, [sp, #4]
   2d4d8:	str	r1, [r0]
   2d4dc:	bcc	2d5d0 <__assert_fail@plt+0x1b924>
   2d4e0:	bl	11a90 <__ctype_b_loc@plt>
   2d4e4:	ldr	r3, [r0]
   2d4e8:	mov	r0, #0
   2d4ec:	mvn	r5, #0
   2d4f0:	mov	r7, #1
   2d4f4:	mov	sl, #1
   2d4f8:	mov	r9, #1
   2d4fc:	str	r3, [sp, #8]
   2d500:	mov	r4, r0
   2d504:	ldr	r0, [sp, #16]
   2d508:	ldrb	r6, [r0, r7]
   2d50c:	add	r0, r3, r6, lsl #1
   2d510:	ldrb	r0, [r0, #1]
   2d514:	tst	r0, #1
   2d518:	beq	2d52c <__assert_fail@plt+0x1b880>
   2d51c:	bl	11a60 <__ctype_tolower_loc@plt>
   2d520:	ldr	r0, [r0]
   2d524:	ldr	r3, [sp, #8]
   2d528:	ldrb	r6, [r0, r6, lsl #2]
   2d52c:	ldr	r1, [sp, #16]
   2d530:	add	r0, r5, sl
   2d534:	mov	r8, r5
   2d538:	ldrb	r5, [r1, r0]
   2d53c:	add	r0, r3, r5, lsl #1
   2d540:	ldrb	r0, [r0, #1]
   2d544:	tst	r0, #1
   2d548:	beq	2d55c <__assert_fail@plt+0x1b8b0>
   2d54c:	bl	11a60 <__ctype_tolower_loc@plt>
   2d550:	ldr	r0, [r0]
   2d554:	ldr	r3, [sp, #8]
   2d558:	ldrb	r5, [r0, r5, lsl #2]
   2d55c:	cmp	r5, r6
   2d560:	bcs	2d578 <__assert_fail@plt+0x1b8cc>
   2d564:	mov	r5, r8
   2d568:	sub	r9, r7, r8
   2d56c:	mov	sl, #1
   2d570:	mov	r0, r7
   2d574:	b	2d5a8 <__assert_fail@plt+0x1b8fc>
   2d578:	cmp	r6, r5
   2d57c:	bne	2d598 <__assert_fail@plt+0x1b8ec>
   2d580:	cmp	sl, r9
   2d584:	bne	2d5b0 <__assert_fail@plt+0x1b904>
   2d588:	add	r0, r4, sl
   2d58c:	mov	r9, sl
   2d590:	mov	sl, #1
   2d594:	b	2d5b8 <__assert_fail@plt+0x1b90c>
   2d598:	add	r0, r4, #1
   2d59c:	mov	r9, #1
   2d5a0:	mov	sl, #1
   2d5a4:	mov	r5, r4
   2d5a8:	ldr	r1, [sp, #12]
   2d5ac:	b	2d5c0 <__assert_fail@plt+0x1b914>
   2d5b0:	add	sl, sl, #1
   2d5b4:	mov	r0, r4
   2d5b8:	ldr	r1, [sp, #12]
   2d5bc:	mov	r5, r8
   2d5c0:	add	r7, r0, sl
   2d5c4:	cmp	r7, r1
   2d5c8:	bcc	2d500 <__assert_fail@plt+0x1b854>
   2d5cc:	b	2d5d8 <__assert_fail@plt+0x1b92c>
   2d5d0:	mvn	r5, #0
   2d5d4:	mov	r9, #1
   2d5d8:	ldr	r0, [sp, #4]
   2d5dc:	add	r1, r5, #1
   2d5e0:	add	r0, r0, #1
   2d5e4:	cmp	r1, r0
   2d5e8:	ldrcs	r0, [sp]
   2d5ec:	strcs	r9, [r0]
   2d5f0:	movcs	r0, r1
   2d5f4:	sub	sp, fp, #28
   2d5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d5fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d600:	add	fp, sp, #28
   2d604:	sub	sp, sp, #36	; 0x24
   2d608:	sub	sp, sp, #1024	; 0x400
   2d60c:	ldrb	r3, [r0]
   2d610:	mov	r5, r0
   2d614:	cmp	r3, #0
   2d618:	beq	2d6cc <__assert_fail@plt+0x1ba20>
   2d61c:	mov	r0, #1
   2d620:	mov	r2, #0
   2d624:	ldrb	r7, [r1, r2]
   2d628:	cmp	r7, #0
   2d62c:	uxtbne	r3, r3
   2d630:	subne	r3, r3, r7
   2d634:	clzne	r3, r3
   2d638:	lsrne	r3, r3, #5
   2d63c:	andne	r0, r0, r3
   2d640:	addne	r3, r5, r2
   2d644:	addne	r2, r2, #1
   2d648:	ldrbne	r3, [r3, #1]
   2d64c:	cmpne	r3, #0
   2d650:	bne	2d624 <__assert_fail@plt+0x1b978>
   2d654:	add	r8, r1, r2
   2d658:	mov	r7, r5
   2d65c:	ldrb	r2, [r8]
   2d660:	cmp	r2, #0
   2d664:	movwne	r7, #0
   2d668:	tst	r0, #1
   2d66c:	cmpeq	r2, #0
   2d670:	bne	2d6dc <__assert_fail@plt+0x1ba30>
   2d674:	sub	r4, r8, r1
   2d678:	ldrb	r1, [r1]
   2d67c:	add	r0, r5, #1
   2d680:	bl	11acc <strchr@plt>
   2d684:	cmp	r4, #1
   2d688:	beq	2d6e8 <__assert_fail@plt+0x1ba3c>
   2d68c:	cmp	r0, #0
   2d690:	mov	r7, r0
   2d694:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2d698:	add	r1, r5, r4
   2d69c:	sub	r5, r8, r4
   2d6a0:	str	r0, [sp, #24]
   2d6a4:	str	r4, [sp, #28]
   2d6a8:	subs	r9, r1, r0
   2d6ac:	movwcc	r9, #1
   2d6b0:	cmp	r4, #31
   2d6b4:	bhi	2d6f0 <__assert_fail@plt+0x1ba44>
   2d6b8:	cmp	r4, #3
   2d6bc:	bcs	2d7f4 <__assert_fail@plt+0x1bb48>
   2d6c0:	sub	r6, r4, #1
   2d6c4:	mov	r4, #1
   2d6c8:	b	2de08 <__assert_fail@plt+0x1c15c>
   2d6cc:	ldrb	r0, [r1]
   2d6d0:	cmp	r0, #0
   2d6d4:	movne	r5, #0
   2d6d8:	mov	r7, r5
   2d6dc:	mov	r0, r7
   2d6e0:	sub	sp, fp, #28
   2d6e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d6e8:	mov	r7, r0
   2d6ec:	b	2d6dc <__assert_fail@plt+0x1ba30>
   2d6f0:	mvn	r1, #0
   2d6f4:	mov	r0, #0
   2d6f8:	mov	r2, #1
   2d6fc:	mov	ip, #1
   2d700:	mov	r3, #1
   2d704:	add	r6, r1, r3
   2d708:	ldrb	r7, [r5, r2]
   2d70c:	ldrb	r6, [r5, r6]
   2d710:	cmp	r7, r6
   2d714:	bcs	2d728 <__assert_fail@plt+0x1ba7c>
   2d718:	sub	ip, r2, r1
   2d71c:	mov	r3, #1
   2d720:	mov	r0, r2
   2d724:	b	2d75c <__assert_fail@plt+0x1bab0>
   2d728:	bne	2d740 <__assert_fail@plt+0x1ba94>
   2d72c:	cmp	r3, ip
   2d730:	bne	2d758 <__assert_fail@plt+0x1baac>
   2d734:	add	r0, r0, ip
   2d738:	mov	r3, #1
   2d73c:	b	2d75c <__assert_fail@plt+0x1bab0>
   2d740:	add	r2, r0, #1
   2d744:	mov	r1, r0
   2d748:	mov	r3, #1
   2d74c:	mov	ip, #1
   2d750:	mov	r0, r2
   2d754:	b	2d75c <__assert_fail@plt+0x1bab0>
   2d758:	add	r3, r3, #1
   2d75c:	add	r2, r3, r0
   2d760:	cmp	r2, r4
   2d764:	bcc	2d704 <__assert_fail@plt+0x1ba58>
   2d768:	cmp	r4, #2
   2d76c:	bcc	2d8f8 <__assert_fail@plt+0x1bc4c>
   2d770:	mvn	lr, #0
   2d774:	mov	r2, #0
   2d778:	mov	r3, #1
   2d77c:	mov	sl, #1
   2d780:	mov	r6, #1
   2d784:	add	r7, lr, r6
   2d788:	ldrb	r0, [r5, r3]
   2d78c:	ldrb	r7, [r5, r7]
   2d790:	cmp	r7, r0
   2d794:	bcs	2d7a8 <__assert_fail@plt+0x1bafc>
   2d798:	sub	sl, r3, lr
   2d79c:	mov	r6, #1
   2d7a0:	mov	r2, r3
   2d7a4:	b	2d7e0 <__assert_fail@plt+0x1bb34>
   2d7a8:	cmp	r0, r7
   2d7ac:	bne	2d7c4 <__assert_fail@plt+0x1bb18>
   2d7b0:	cmp	r6, sl
   2d7b4:	bne	2d7dc <__assert_fail@plt+0x1bb30>
   2d7b8:	add	r2, r2, sl
   2d7bc:	mov	r6, #1
   2d7c0:	b	2d7e0 <__assert_fail@plt+0x1bb34>
   2d7c4:	add	r0, r2, #1
   2d7c8:	mov	lr, r2
   2d7cc:	mov	r6, #1
   2d7d0:	mov	sl, #1
   2d7d4:	mov	r2, r0
   2d7d8:	b	2d7e0 <__assert_fail@plt+0x1bb34>
   2d7dc:	add	r6, r6, #1
   2d7e0:	ldr	r0, [sp, #28]
   2d7e4:	add	r3, r6, r2
   2d7e8:	cmp	r3, r0
   2d7ec:	bcc	2d784 <__assert_fail@plt+0x1bad8>
   2d7f0:	b	2d900 <__assert_fail@plt+0x1bc54>
   2d7f4:	mvn	r1, #0
   2d7f8:	mov	r0, #0
   2d7fc:	mov	r2, #1
   2d800:	mov	ip, #1
   2d804:	mov	r3, #1
   2d808:	add	r6, r1, r3
   2d80c:	ldrb	r7, [r5, r2]
   2d810:	ldrb	r6, [r5, r6]
   2d814:	cmp	r7, r6
   2d818:	bcs	2d82c <__assert_fail@plt+0x1bb80>
   2d81c:	sub	ip, r2, r1
   2d820:	mov	r3, #1
   2d824:	mov	r0, r2
   2d828:	b	2d860 <__assert_fail@plt+0x1bbb4>
   2d82c:	bne	2d844 <__assert_fail@plt+0x1bb98>
   2d830:	cmp	r3, ip
   2d834:	bne	2d85c <__assert_fail@plt+0x1bbb0>
   2d838:	add	r0, r0, ip
   2d83c:	mov	r3, #1
   2d840:	b	2d860 <__assert_fail@plt+0x1bbb4>
   2d844:	add	r2, r0, #1
   2d848:	mov	r1, r0
   2d84c:	mov	r3, #1
   2d850:	mov	ip, #1
   2d854:	mov	r0, r2
   2d858:	b	2d860 <__assert_fail@plt+0x1bbb4>
   2d85c:	add	r3, r3, #1
   2d860:	add	r2, r3, r0
   2d864:	cmp	r2, r4
   2d868:	bcc	2d808 <__assert_fail@plt+0x1bb5c>
   2d86c:	cmp	r4, #2
   2d870:	bcc	2ddec <__assert_fail@plt+0x1c140>
   2d874:	mvn	lr, #0
   2d878:	mov	r2, #0
   2d87c:	mov	r3, #1
   2d880:	mov	r4, #1
   2d884:	mov	r6, #1
   2d888:	add	r7, lr, r6
   2d88c:	ldrb	r0, [r5, r3]
   2d890:	ldrb	r7, [r5, r7]
   2d894:	cmp	r7, r0
   2d898:	bcs	2d8ac <__assert_fail@plt+0x1bc00>
   2d89c:	sub	r4, r3, lr
   2d8a0:	mov	r6, #1
   2d8a4:	mov	r2, r3
   2d8a8:	b	2d8e4 <__assert_fail@plt+0x1bc38>
   2d8ac:	cmp	r0, r7
   2d8b0:	bne	2d8c8 <__assert_fail@plt+0x1bc1c>
   2d8b4:	cmp	r6, r4
   2d8b8:	bne	2d8e0 <__assert_fail@plt+0x1bc34>
   2d8bc:	add	r2, r2, r4
   2d8c0:	mov	r6, #1
   2d8c4:	b	2d8e4 <__assert_fail@plt+0x1bc38>
   2d8c8:	add	r0, r2, #1
   2d8cc:	mov	lr, r2
   2d8d0:	mov	r6, #1
   2d8d4:	mov	r4, #1
   2d8d8:	mov	r2, r0
   2d8dc:	b	2d8e4 <__assert_fail@plt+0x1bc38>
   2d8e0:	add	r6, r6, #1
   2d8e4:	ldr	r0, [sp, #28]
   2d8e8:	add	r3, r6, r2
   2d8ec:	cmp	r3, r0
   2d8f0:	bcc	2d888 <__assert_fail@plt+0x1bbdc>
   2d8f4:	b	2ddf4 <__assert_fail@plt+0x1c148>
   2d8f8:	mov	sl, #1
   2d8fc:	mvn	lr, #0
   2d900:	ldr	r2, [sp, #28]
   2d904:	add	r6, sp, #32
   2d908:	add	r0, r6, #16
   2d90c:	mov	r3, r6
   2d910:	vdup.32	q8, r2
   2d914:	vst1.32	{d16-d17}, [r0]
   2d918:	add	r0, r6, #32
   2d91c:	vst1.32	{d16-d17}, [r0]
   2d920:	add	r0, r6, #48	; 0x30
   2d924:	vst1.32	{d16-d17}, [r0]
   2d928:	add	r0, r6, #64	; 0x40
   2d92c:	vst1.32	{d16-d17}, [r0]
   2d930:	add	r0, r6, #80	; 0x50
   2d934:	vst1.32	{d16-d17}, [r0]
   2d938:	add	r0, r6, #96	; 0x60
   2d93c:	vst1.32	{d16-d17}, [r0]
   2d940:	add	r0, r6, #112	; 0x70
   2d944:	vst1.32	{d16-d17}, [r0]
   2d948:	add	r0, r6, #128	; 0x80
   2d94c:	vst1.32	{d16-d17}, [r0]
   2d950:	add	r0, r6, #144	; 0x90
   2d954:	vst1.32	{d16-d17}, [r0]
   2d958:	add	r0, r6, #160	; 0xa0
   2d95c:	vst1.32	{d16-d17}, [r0]
   2d960:	add	r0, r6, #176	; 0xb0
   2d964:	vst1.32	{d16-d17}, [r0]
   2d968:	add	r0, r6, #192	; 0xc0
   2d96c:	vst1.32	{d16-d17}, [r0]
   2d970:	add	r0, r6, #208	; 0xd0
   2d974:	vst1.32	{d16-d17}, [r0]
   2d978:	add	r0, r6, #224	; 0xe0
   2d97c:	vst1.32	{d16-d17}, [r0]
   2d980:	add	r0, r6, #240	; 0xf0
   2d984:	vst1.32	{d16-d17}, [r0]
   2d988:	add	r0, r6, #256	; 0x100
   2d98c:	vst1.32	{d16-d17}, [r0]
   2d990:	add	r0, r6, #272	; 0x110
   2d994:	vst1.32	{d16-d17}, [r0]
   2d998:	add	r0, r6, #288	; 0x120
   2d99c:	vst1.32	{d16-d17}, [r0]
   2d9a0:	mov	r0, #1008	; 0x3f0
   2d9a4:	vst1.32	{d16-d17}, [r3], r0
   2d9a8:	add	r0, r6, #320	; 0x140
   2d9ac:	vst1.32	{d16-d17}, [r0]
   2d9b0:	add	r0, r6, #304	; 0x130
   2d9b4:	vst1.32	{d16-d17}, [r0]
   2d9b8:	add	r0, r6, #336	; 0x150
   2d9bc:	vst1.32	{d16-d17}, [r0]
   2d9c0:	add	r0, r6, #352	; 0x160
   2d9c4:	vst1.32	{d16-d17}, [r0]
   2d9c8:	add	r0, r6, #368	; 0x170
   2d9cc:	vst1.32	{d16-d17}, [r0]
   2d9d0:	add	r0, r6, #384	; 0x180
   2d9d4:	vst1.32	{d16-d17}, [r0]
   2d9d8:	add	r0, r6, #400	; 0x190
   2d9dc:	vst1.32	{d16-d17}, [r0]
   2d9e0:	add	r0, r6, #416	; 0x1a0
   2d9e4:	vst1.32	{d16-d17}, [r0]
   2d9e8:	add	r0, r6, #432	; 0x1b0
   2d9ec:	vst1.32	{d16-d17}, [r0]
   2d9f0:	add	r0, r6, #448	; 0x1c0
   2d9f4:	vst1.32	{d16-d17}, [r0]
   2d9f8:	add	r0, r6, #464	; 0x1d0
   2d9fc:	vst1.32	{d16-d17}, [r0]
   2da00:	add	r0, r6, #480	; 0x1e0
   2da04:	vst1.32	{d16-d17}, [r0]
   2da08:	add	r0, r6, #496	; 0x1f0
   2da0c:	vst1.32	{d16-d17}, [r0]
   2da10:	add	r0, r6, #512	; 0x200
   2da14:	vst1.32	{d16-d17}, [r0]
   2da18:	add	r0, r6, #528	; 0x210
   2da1c:	vst1.32	{d16-d17}, [r0]
   2da20:	add	r0, r6, #544	; 0x220
   2da24:	vst1.32	{d16-d17}, [r0]
   2da28:	add	r0, r6, #560	; 0x230
   2da2c:	vst1.32	{d16-d17}, [r0]
   2da30:	add	r0, r6, #576	; 0x240
   2da34:	vst1.32	{d16-d17}, [r0]
   2da38:	add	r0, r6, #592	; 0x250
   2da3c:	vst1.32	{d16-d17}, [r0]
   2da40:	add	r0, r6, #624	; 0x270
   2da44:	vst1.32	{d16-d17}, [r0]
   2da48:	add	r0, r6, #608	; 0x260
   2da4c:	vst1.32	{d16-d17}, [r0]
   2da50:	add	r0, r6, #640	; 0x280
   2da54:	vst1.32	{d16-d17}, [r0]
   2da58:	add	r0, r6, #656	; 0x290
   2da5c:	vst1.32	{d16-d17}, [r0]
   2da60:	add	r0, r6, #672	; 0x2a0
   2da64:	vst1.32	{d16-d17}, [r0]
   2da68:	add	r0, r6, #688	; 0x2b0
   2da6c:	vst1.32	{d16-d17}, [r0]
   2da70:	add	r0, r6, #704	; 0x2c0
   2da74:	vst1.32	{d16-d17}, [r0]
   2da78:	add	r0, r6, #720	; 0x2d0
   2da7c:	vst1.32	{d16-d17}, [r0]
   2da80:	add	r0, r6, #736	; 0x2e0
   2da84:	vst1.32	{d16-d17}, [r0]
   2da88:	add	r0, r6, #752	; 0x2f0
   2da8c:	vst1.32	{d16-d17}, [r0]
   2da90:	add	r0, r6, #768	; 0x300
   2da94:	vst1.32	{d16-d17}, [r0]
   2da98:	add	r0, r6, #784	; 0x310
   2da9c:	vst1.32	{d16-d17}, [r0]
   2daa0:	add	r0, r6, #800	; 0x320
   2daa4:	vst1.32	{d16-d17}, [r0]
   2daa8:	add	r0, r6, #816	; 0x330
   2daac:	vst1.32	{d16-d17}, [r0]
   2dab0:	add	r0, r6, #832	; 0x340
   2dab4:	vst1.32	{d16-d17}, [r0]
   2dab8:	add	r0, r6, #848	; 0x350
   2dabc:	vst1.32	{d16-d17}, [r0]
   2dac0:	add	r0, r6, #864	; 0x360
   2dac4:	vst1.32	{d16-d17}, [r0]
   2dac8:	add	r0, r6, #880	; 0x370
   2dacc:	vst1.32	{d16-d17}, [r0]
   2dad0:	add	r0, r6, #896	; 0x380
   2dad4:	vst1.32	{d16-d17}, [r0]
   2dad8:	add	r0, r6, #928	; 0x3a0
   2dadc:	vst1.32	{d16-d17}, [r0]
   2dae0:	add	r0, r6, #912	; 0x390
   2dae4:	vst1.32	{d16-d17}, [r0]
   2dae8:	add	r0, r6, #944	; 0x3b0
   2daec:	vst1.32	{d16-d17}, [r0]
   2daf0:	add	r0, r6, #960	; 0x3c0
   2daf4:	vst1.32	{d16-d17}, [r0]
   2daf8:	add	r0, r6, #976	; 0x3d0
   2dafc:	vst1.32	{d16-d17}, [r0]
   2db00:	add	r0, r6, #992	; 0x3e0
   2db04:	vst1.32	{d16-d17}, [r0]
   2db08:	vst1.32	{d16-d17}, [r3]
   2db0c:	add	r0, r1, #1
   2db10:	add	r3, lr, #1
   2db14:	cmp	r3, r0
   2db18:	movcc	sl, ip
   2db1c:	movcc	r3, r0
   2db20:	cmp	r2, #0
   2db24:	beq	2db3c <__assert_fail@plt+0x1be90>
   2db28:	mov	r0, r2
   2db2c:	ldrb	r1, [r8, -r0]
   2db30:	subs	r0, r0, #1
   2db34:	str	r0, [r6, r1, lsl #2]
   2db38:	bne	2db2c <__assert_fail@plt+0x1be80>
   2db3c:	add	r1, r5, sl
   2db40:	mov	r0, r5
   2db44:	mov	r2, r3
   2db48:	mov	r4, r3
   2db4c:	bl	11934 <memcmp@plt>
   2db50:	cmp	r0, #0
   2db54:	str	r4, [sp, #20]
   2db58:	beq	2dc80 <__assert_fail@plt+0x1bfd4>
   2db5c:	ldr	r0, [sp, #24]
   2db60:	ldr	r8, [sp, #28]
   2db64:	mov	r1, #0
   2db68:	mov	r7, #0
   2db6c:	add	r0, r0, r9
   2db70:	sub	r2, r8, r9
   2db74:	bl	11b68 <memchr@plt>
   2db78:	sub	r1, r8, r4
   2db7c:	cmp	r4, r1
   2db80:	movcs	r1, r4
   2db84:	cmp	r8, #0
   2db88:	str	r1, [sp, #16]
   2db8c:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2db90:	mov	r1, r4
   2db94:	ldr	r4, [sp, #24]
   2db98:	cmp	r0, #0
   2db9c:	bne	2d6dc <__assert_fail@plt+0x1ba30>
   2dba0:	mov	ip, r8
   2dba4:	add	r0, r4, r1
   2dba8:	sub	sl, r8, #1
   2dbac:	add	r9, r5, r1
   2dbb0:	mov	r8, #0
   2dbb4:	str	r0, [sp, #8]
   2dbb8:	rsb	r0, r1, #1
   2dbbc:	mov	lr, ip
   2dbc0:	str	r0, [sp, #12]
   2dbc4:	add	r0, r4, lr
   2dbc8:	ldrb	r2, [r0, #-1]
   2dbcc:	ldr	r2, [r6, r2, lsl #2]
   2dbd0:	cmp	r2, #0
   2dbd4:	beq	2dbe0 <__assert_fail@plt+0x1bf34>
   2dbd8:	add	r8, r2, r8
   2dbdc:	b	2dc44 <__assert_fail@plt+0x1bf98>
   2dbe0:	cmp	r1, sl
   2dbe4:	bcs	2dc14 <__assert_fail@plt+0x1bf68>
   2dbe8:	ldr	r2, [sp, #8]
   2dbec:	add	r3, r2, r8
   2dbf0:	mov	r2, #0
   2dbf4:	ldrb	r7, [r3, r2]
   2dbf8:	ldrb	r6, [r9, r2]
   2dbfc:	cmp	r6, r7
   2dc00:	bne	2dc3c <__assert_fail@plt+0x1bf90>
   2dc04:	add	r2, r2, #1
   2dc08:	add	r7, r1, r2
   2dc0c:	cmp	r7, sl
   2dc10:	bcc	2dbf4 <__assert_fail@plt+0x1bf48>
   2dc14:	ldr	r2, [sp, #12]
   2dc18:	add	r7, r4, r8
   2dc1c:	cmp	r2, #1
   2dc20:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2dc24:	ldrb	r3, [r7, -r2]
   2dc28:	ldrb	r6, [r5, -r2]
   2dc2c:	add	r2, r2, #1
   2dc30:	cmp	r6, r3
   2dc34:	beq	2dc1c <__assert_fail@plt+0x1bf70>
   2dc38:	ldr	r2, [sp, #16]
   2dc3c:	add	r2, r8, r2
   2dc40:	add	r8, r2, #1
   2dc44:	add	r6, r8, ip
   2dc48:	mov	r1, #0
   2dc4c:	mov	r7, #0
   2dc50:	sub	r2, r6, lr
   2dc54:	bl	11b68 <memchr@plt>
   2dc58:	cmp	r6, #0
   2dc5c:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2dc60:	ldr	r4, [sp, #24]
   2dc64:	ldr	ip, [sp, #28]
   2dc68:	ldr	r1, [sp, #20]
   2dc6c:	mov	lr, r6
   2dc70:	cmp	r0, #0
   2dc74:	add	r6, sp, #32
   2dc78:	beq	2dbc4 <__assert_fail@plt+0x1bf18>
   2dc7c:	b	2d6dc <__assert_fail@plt+0x1ba30>
   2dc80:	ldr	r0, [sp, #24]
   2dc84:	ldr	r8, [sp, #28]
   2dc88:	mov	r1, #0
   2dc8c:	mov	r7, #0
   2dc90:	add	r0, r0, r9
   2dc94:	sub	r2, r8, r9
   2dc98:	bl	11b68 <memchr@plt>
   2dc9c:	cmp	r8, #0
   2dca0:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2dca4:	ldr	r4, [sp, #24]
   2dca8:	ldr	r1, [sp, #20]
   2dcac:	cmp	r0, #0
   2dcb0:	str	sl, [sp, #16]
   2dcb4:	bne	2d6dc <__assert_fail@plt+0x1ba30>
   2dcb8:	ldr	r0, [sp, #16]
   2dcbc:	mov	ip, r8
   2dcc0:	mov	sl, #0
   2dcc4:	mov	lr, r8
   2dcc8:	mov	r9, #0
   2dccc:	sub	r0, r8, r0
   2dcd0:	str	r0, [sp, #12]
   2dcd4:	sub	r0, r1, #1
   2dcd8:	str	r0, [sp, #4]
   2dcdc:	rsb	r0, r1, #0
   2dce0:	str	r0, [sp]
   2dce4:	sub	r0, r8, #1
   2dce8:	str	r0, [sp, #8]
   2dcec:	add	r0, r4, lr
   2dcf0:	ldrb	r2, [r0, #-1]
   2dcf4:	ldr	r3, [r6, r2, lsl #2]
   2dcf8:	cmp	r3, #0
   2dcfc:	beq	2dd24 <__assert_fail@plt+0x1c078>
   2dd00:	ldr	r2, [sp, #16]
   2dd04:	ldr	r1, [sp, #12]
   2dd08:	cmp	r3, r2
   2dd0c:	mov	r2, r3
   2dd10:	movcc	r2, r1
   2dd14:	cmp	sl, #0
   2dd18:	moveq	r2, r3
   2dd1c:	mov	sl, #0
   2dd20:	b	2dd98 <__assert_fail@plt+0x1c0ec>
   2dd24:	cmp	r1, sl
   2dd28:	mov	r2, r1
   2dd2c:	ldr	r1, [sp, #8]
   2dd30:	movcc	r2, sl
   2dd34:	cmp	r2, r1
   2dd38:	bcs	2dd5c <__assert_fail@plt+0x1c0b0>
   2dd3c:	add	r3, r4, r9
   2dd40:	ldrb	r7, [r3, r2]
   2dd44:	ldrb	r6, [r5, r2]
   2dd48:	cmp	r6, r7
   2dd4c:	bne	2dddc <__assert_fail@plt+0x1c130>
   2dd50:	add	r2, r2, #1
   2dd54:	cmp	r2, r1
   2dd58:	bcc	2dd40 <__assert_fail@plt+0x1c094>
   2dd5c:	ldr	r2, [sp, #4]
   2dd60:	add	r7, r4, r9
   2dd64:	add	r3, r2, #1
   2dd68:	cmp	sl, r3
   2dd6c:	bcs	2dd84 <__assert_fail@plt+0x1c0d8>
   2dd70:	ldrb	r6, [r7, r2]
   2dd74:	ldrb	r4, [r5, r2]
   2dd78:	sub	r2, r2, #1
   2dd7c:	cmp	r4, r6
   2dd80:	beq	2dd64 <__assert_fail@plt+0x1c0b8>
   2dd84:	add	r2, sl, #1
   2dd88:	ldr	sl, [sp, #12]
   2dd8c:	cmp	r3, r2
   2dd90:	ldr	r2, [sp, #16]
   2dd94:	bcc	2d6dc <__assert_fail@plt+0x1ba30>
   2dd98:	add	r9, r2, r9
   2dd9c:	mov	r1, #0
   2dda0:	mov	r8, ip
   2dda4:	mov	r7, #0
   2dda8:	add	r6, r9, ip
   2ddac:	sub	r2, r6, lr
   2ddb0:	bl	11b68 <memchr@plt>
   2ddb4:	cmp	r6, #0
   2ddb8:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2ddbc:	ldr	r4, [sp, #24]
   2ddc0:	ldr	r1, [sp, #20]
   2ddc4:	mov	lr, r6
   2ddc8:	cmp	r0, #0
   2ddcc:	mov	ip, r8
   2ddd0:	add	r6, sp, #32
   2ddd4:	beq	2dcec <__assert_fail@plt+0x1c040>
   2ddd8:	b	2d6dc <__assert_fail@plt+0x1ba30>
   2dddc:	ldr	r1, [sp]
   2dde0:	add	r2, r1, r2
   2dde4:	add	r2, r2, #1
   2dde8:	b	2dd1c <__assert_fail@plt+0x1c070>
   2ddec:	mov	r4, #1
   2ddf0:	mvn	lr, #0
   2ddf4:	add	r0, r1, #1
   2ddf8:	add	r6, lr, #1
   2ddfc:	cmp	r6, r0
   2de00:	movcc	r4, ip
   2de04:	movcc	r6, r0
   2de08:	add	r1, r5, r4
   2de0c:	mov	r0, r5
   2de10:	mov	r2, r6
   2de14:	bl	11934 <memcmp@plt>
   2de18:	cmp	r0, #0
   2de1c:	str	r6, [sp, #20]
   2de20:	beq	2df24 <__assert_fail@plt+0x1c278>
   2de24:	ldr	r0, [sp, #24]
   2de28:	ldr	r4, [sp, #28]
   2de2c:	mov	r1, #0
   2de30:	mov	r7, #0
   2de34:	add	r0, r0, r9
   2de38:	sub	r2, r4, r9
   2de3c:	bl	11b68 <memchr@plt>
   2de40:	sub	r2, r4, r6
   2de44:	cmp	r6, r2
   2de48:	movcs	r2, r6
   2de4c:	cmp	r4, #0
   2de50:	str	r2, [sp, #16]
   2de54:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2de58:	mov	r1, r4
   2de5c:	ldr	r4, [sp, #24]
   2de60:	cmp	r0, #0
   2de64:	bne	2d6dc <__assert_fail@plt+0x1ba30>
   2de68:	add	r0, r4, r6
   2de6c:	add	r9, r5, r6
   2de70:	mov	sl, #0
   2de74:	mov	ip, r1
   2de78:	str	r0, [sp, #8]
   2de7c:	rsb	r0, r6, #1
   2de80:	str	r0, [sp, #12]
   2de84:	cmp	r1, r6
   2de88:	bls	2deb8 <__assert_fail@plt+0x1c20c>
   2de8c:	ldr	r0, [sp, #8]
   2de90:	mov	r2, #0
   2de94:	add	r0, r0, sl
   2de98:	ldrb	r3, [r0, r2]
   2de9c:	ldrb	r7, [r9, r2]
   2dea0:	cmp	r7, r3
   2dea4:	bne	2dee0 <__assert_fail@plt+0x1c234>
   2dea8:	add	r2, r2, #1
   2deac:	add	r3, r6, r2
   2deb0:	cmp	r3, r1
   2deb4:	bcc	2de98 <__assert_fail@plt+0x1c1ec>
   2deb8:	ldr	r0, [sp, #12]
   2debc:	add	r7, r4, sl
   2dec0:	cmp	r0, #1
   2dec4:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2dec8:	ldrb	r2, [r7, -r0]
   2decc:	ldrb	r3, [r5, -r0]
   2ded0:	add	r0, r0, #1
   2ded4:	cmp	r3, r2
   2ded8:	beq	2dec0 <__assert_fail@plt+0x1c214>
   2dedc:	ldr	r2, [sp, #16]
   2dee0:	add	r2, sl, r2
   2dee4:	add	r0, r4, ip
   2dee8:	mov	r7, #0
   2deec:	add	sl, r2, #1
   2def0:	add	r8, sl, r1
   2def4:	mov	r1, #0
   2def8:	sub	r2, r8, ip
   2defc:	bl	11b68 <memchr@plt>
   2df00:	cmp	r0, #0
   2df04:	bne	2d6dc <__assert_fail@plt+0x1ba30>
   2df08:	ldr	r4, [sp, #24]
   2df0c:	ldr	r1, [sp, #28]
   2df10:	ldr	r6, [sp, #20]
   2df14:	cmp	r8, #0
   2df18:	mov	ip, r8
   2df1c:	bne	2de84 <__assert_fail@plt+0x1c1d8>
   2df20:	b	2d6dc <__assert_fail@plt+0x1ba30>
   2df24:	ldr	r0, [sp, #24]
   2df28:	ldr	r8, [sp, #28]
   2df2c:	mov	r1, #0
   2df30:	mov	r7, #0
   2df34:	add	r0, r0, r9
   2df38:	sub	r2, r8, r9
   2df3c:	bl	11b68 <memchr@plt>
   2df40:	cmp	r8, #0
   2df44:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2df48:	str	r4, [sp, #16]
   2df4c:	ldr	r4, [sp, #24]
   2df50:	cmp	r0, #0
   2df54:	bne	2d6dc <__assert_fail@plt+0x1ba30>
   2df58:	ldr	r0, [sp, #16]
   2df5c:	mov	r1, r8
   2df60:	mov	sl, #0
   2df64:	mov	ip, r8
   2df68:	mov	r9, #0
   2df6c:	sub	r0, r8, r0
   2df70:	str	r0, [sp, #12]
   2df74:	sub	r0, r6, #1
   2df78:	str	r0, [sp, #8]
   2df7c:	rsb	r0, r6, #0
   2df80:	str	r0, [sp, #4]
   2df84:	cmp	r6, sl
   2df88:	movcc	r6, sl
   2df8c:	cmp	r6, r1
   2df90:	bcs	2dfb4 <__assert_fail@plt+0x1c308>
   2df94:	add	r2, r4, r9
   2df98:	ldrb	r3, [r2, r6]
   2df9c:	ldrb	r7, [r5, r6]
   2dfa0:	cmp	r7, r3
   2dfa4:	bne	2dff4 <__assert_fail@plt+0x1c348>
   2dfa8:	add	r6, r6, #1
   2dfac:	cmp	r6, r1
   2dfb0:	bcc	2df98 <__assert_fail@plt+0x1c2ec>
   2dfb4:	ldr	r0, [sp, #8]
   2dfb8:	add	r7, r4, r9
   2dfbc:	add	r2, r0, #1
   2dfc0:	cmp	sl, r2
   2dfc4:	bcs	2dfdc <__assert_fail@plt+0x1c330>
   2dfc8:	ldrb	r3, [r7, r0]
   2dfcc:	ldrb	r6, [r5, r0]
   2dfd0:	sub	r0, r0, #1
   2dfd4:	cmp	r6, r3
   2dfd8:	beq	2dfbc <__assert_fail@plt+0x1c310>
   2dfdc:	add	r0, sl, #1
   2dfe0:	ldr	sl, [sp, #12]
   2dfe4:	cmp	r2, r0
   2dfe8:	ldr	r2, [sp, #16]
   2dfec:	bcs	2e004 <__assert_fail@plt+0x1c358>
   2dff0:	b	2d6dc <__assert_fail@plt+0x1ba30>
   2dff4:	ldr	r2, [sp, #4]
   2dff8:	mov	sl, #0
   2dffc:	add	r0, r2, r6
   2e000:	add	r2, r0, #1
   2e004:	add	r9, r2, r9
   2e008:	add	r0, r4, ip
   2e00c:	mov	r7, #0
   2e010:	add	r8, r9, r1
   2e014:	mov	r1, #0
   2e018:	sub	r2, r8, ip
   2e01c:	bl	11b68 <memchr@plt>
   2e020:	cmp	r8, #0
   2e024:	beq	2d6dc <__assert_fail@plt+0x1ba30>
   2e028:	ldr	r4, [sp, #24]
   2e02c:	ldr	r1, [sp, #28]
   2e030:	ldr	r6, [sp, #20]
   2e034:	cmp	r0, #0
   2e038:	mov	ip, r8
   2e03c:	beq	2df84 <__assert_fail@plt+0x1c2d8>
   2e040:	b	2d6dc <__assert_fail@plt+0x1ba30>
   2e044:	push	{fp, lr}
   2e048:	mov	fp, sp
   2e04c:	movw	r0, #4528	; 0x11b0
   2e050:	movt	r0, #4
   2e054:	ldr	r0, [r0]
   2e058:	bl	11a9c <exit@plt>
   2e05c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e060:	add	fp, sp, #28
   2e064:	sub	sp, sp, #12
   2e068:	mov	r4, r3
   2e06c:	mov	r6, r2
   2e070:	mov	r5, r1
   2e074:	mov	sl, r0
   2e078:	bl	11ac0 <strlen@plt>
   2e07c:	ldr	r8, [r5]
   2e080:	cmp	r8, #0
   2e084:	beq	2e140 <__assert_fail@plt+0x1c494>
   2e088:	mov	r7, r0
   2e08c:	mov	r0, #0
   2e090:	add	r9, r5, #4
   2e094:	mov	r5, #0
   2e098:	str	r6, [sp, #4]
   2e09c:	str	r0, [sp]
   2e0a0:	mvn	r0, #0
   2e0a4:	str	r0, [sp, #8]
   2e0a8:	mov	r0, r8
   2e0ac:	mov	r1, sl
   2e0b0:	mov	r2, r7
   2e0b4:	bl	11c64 <strncmp@plt>
   2e0b8:	cmp	r0, #0
   2e0bc:	bne	2e114 <__assert_fail@plt+0x1c468>
   2e0c0:	mov	r0, r8
   2e0c4:	bl	11ac0 <strlen@plt>
   2e0c8:	cmp	r0, r7
   2e0cc:	beq	2e144 <__assert_fail@plt+0x1c498>
   2e0d0:	ldr	r0, [sp, #8]
   2e0d4:	cmn	r0, #1
   2e0d8:	beq	2e110 <__assert_fail@plt+0x1c464>
   2e0dc:	ldr	r0, [sp, #4]
   2e0e0:	cmp	r0, #0
   2e0e4:	beq	2e104 <__assert_fail@plt+0x1c458>
   2e0e8:	ldr	r1, [sp, #8]
   2e0ec:	mov	r2, r4
   2e0f0:	mla	r0, r1, r4, r0
   2e0f4:	mov	r1, r6
   2e0f8:	bl	11934 <memcmp@plt>
   2e0fc:	cmp	r0, #0
   2e100:	beq	2e114 <__assert_fail@plt+0x1c468>
   2e104:	mov	r0, #1
   2e108:	str	r0, [sp]
   2e10c:	b	2e114 <__assert_fail@plt+0x1c468>
   2e110:	str	r5, [sp, #8]
   2e114:	ldr	r8, [r9, r5, lsl #2]
   2e118:	add	r6, r6, r4
   2e11c:	add	r5, r5, #1
   2e120:	cmp	r8, #0
   2e124:	bne	2e0a8 <__assert_fail@plt+0x1c3fc>
   2e128:	ldr	r0, [sp]
   2e12c:	tst	r0, #1
   2e130:	ldr	r0, [sp, #8]
   2e134:	mvnne	r0, #1
   2e138:	sub	sp, fp, #28
   2e13c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e140:	mvn	r5, #0
   2e144:	mov	r0, r5
   2e148:	sub	sp, fp, #28
   2e14c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e150:	push	{r4, r5, r6, sl, fp, lr}
   2e154:	add	fp, sp, #16
   2e158:	sub	sp, sp, #8
   2e15c:	mov	r4, r1
   2e160:	movw	r1, #2152	; 0x868
   2e164:	mov	r5, r0
   2e168:	movw	r0, #2125	; 0x84d
   2e16c:	cmn	r2, #1
   2e170:	mov	r2, #5
   2e174:	movt	r0, #3
   2e178:	movt	r1, #3
   2e17c:	moveq	r1, r0
   2e180:	mov	r0, #0
   2e184:	bl	11940 <dcgettext@plt>
   2e188:	mov	r6, r0
   2e18c:	mov	r0, #0
   2e190:	mov	r1, #8
   2e194:	mov	r2, r4
   2e198:	bl	18e98 <__assert_fail@plt+0x71ec>
   2e19c:	mov	r4, r0
   2e1a0:	mov	r0, #1
   2e1a4:	mov	r1, r5
   2e1a8:	bl	19458 <__assert_fail@plt+0x77ac>
   2e1ac:	str	r0, [sp]
   2e1b0:	mov	r0, #0
   2e1b4:	mov	r1, #0
   2e1b8:	mov	r2, r6
   2e1bc:	mov	r3, r4
   2e1c0:	bl	119e8 <error@plt>
   2e1c4:	sub	sp, fp, #16
   2e1c8:	pop	{r4, r5, r6, sl, fp, pc}
   2e1cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e1d0:	add	fp, sp, #28
   2e1d4:	sub	sp, sp, #4
   2e1d8:	mov	r5, r1
   2e1dc:	movw	r1, #2181	; 0x885
   2e1e0:	mov	r9, r2
   2e1e4:	mov	r7, r0
   2e1e8:	mov	r0, #0
   2e1ec:	mov	r2, #5
   2e1f0:	mov	r8, #0
   2e1f4:	movt	r1, #3
   2e1f8:	bl	11940 <dcgettext@plt>
   2e1fc:	movw	sl, #4624	; 0x1210
   2e200:	movt	sl, #4
   2e204:	ldr	r1, [sl]
   2e208:	bl	11c58 <fputs@plt>
   2e20c:	ldr	r6, [r7]
   2e210:	cmp	r6, #0
   2e214:	bne	2e22c <__assert_fail@plt+0x1c580>
   2e218:	ldr	r1, [sl]
   2e21c:	mov	r0, #10
   2e220:	sub	sp, fp, #28
   2e224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e228:	b	11c04 <putc@plt>
   2e22c:	add	r4, r7, #4
   2e230:	mov	r7, #0
   2e234:	str	r4, [sp]
   2e238:	cmp	r8, #0
   2e23c:	beq	2e280 <__assert_fail@plt+0x1c5d4>
   2e240:	mov	r0, r7
   2e244:	mov	r1, r5
   2e248:	mov	r2, r9
   2e24c:	bl	11934 <memcmp@plt>
   2e250:	cmp	r0, #0
   2e254:	bne	2e280 <__assert_fail@plt+0x1c5d4>
   2e258:	ldr	r4, [sl]
   2e25c:	mov	r0, r6
   2e260:	bl	19468 <__assert_fail@plt+0x77bc>
   2e264:	mov	r2, r0
   2e268:	mov	r0, r4
   2e26c:	ldr	r4, [sp]
   2e270:	movw	r1, #2210	; 0x8a2
   2e274:	movt	r1, #3
   2e278:	bl	11ad8 <fprintf@plt>
   2e27c:	b	2e2a4 <__assert_fail@plt+0x1c5f8>
   2e280:	ldr	r7, [sl]
   2e284:	mov	r0, r6
   2e288:	bl	19468 <__assert_fail@plt+0x77bc>
   2e28c:	movw	r1, #2202	; 0x89a
   2e290:	mov	r2, r0
   2e294:	mov	r0, r7
   2e298:	movt	r1, #3
   2e29c:	bl	11ad8 <fprintf@plt>
   2e2a0:	mov	r7, r5
   2e2a4:	ldr	r6, [r4, -r8, lsl #2]
   2e2a8:	add	r5, r5, r9
   2e2ac:	sub	r8, r8, #1
   2e2b0:	cmp	r6, #0
   2e2b4:	bne	2e238 <__assert_fail@plt+0x1c58c>
   2e2b8:	b	2e218 <__assert_fail@plt+0x1c56c>
   2e2bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e2c0:	add	fp, sp, #28
   2e2c4:	sub	sp, sp, #20
   2e2c8:	mov	r9, r0
   2e2cc:	mov	r0, r1
   2e2d0:	mov	r4, r3
   2e2d4:	mov	r5, r2
   2e2d8:	mov	r7, r1
   2e2dc:	bl	11ac0 <strlen@plt>
   2e2e0:	ldr	sl, [r5]
   2e2e4:	str	r4, [sp, #16]
   2e2e8:	cmp	sl, #0
   2e2ec:	beq	2e3c0 <__assert_fail@plt+0x1c714>
   2e2f0:	mov	r8, r0
   2e2f4:	str	r9, [sp, #4]
   2e2f8:	mov	r0, #0
   2e2fc:	str	r5, [sp, #8]
   2e300:	add	r9, r5, #4
   2e304:	mvn	r6, #0
   2e308:	mov	r5, #0
   2e30c:	str	r0, [sp, #12]
   2e310:	mov	r0, sl
   2e314:	mov	r1, r7
   2e318:	mov	r2, r8
   2e31c:	bl	11c64 <strncmp@plt>
   2e320:	cmp	r0, #0
   2e324:	bne	2e374 <__assert_fail@plt+0x1c6c8>
   2e328:	mov	r0, sl
   2e32c:	bl	11ac0 <strlen@plt>
   2e330:	cmp	r0, r8
   2e334:	beq	2e438 <__assert_fail@plt+0x1c78c>
   2e338:	cmn	r6, #1
   2e33c:	beq	2e370 <__assert_fail@plt+0x1c6c4>
   2e340:	ldr	r0, [sp, #16]
   2e344:	cmp	r0, #0
   2e348:	beq	2e364 <__assert_fail@plt+0x1c6b8>
   2e34c:	ldr	r2, [fp, #8]
   2e350:	mov	r1, r4
   2e354:	mla	r0, r6, r2, r0
   2e358:	bl	11934 <memcmp@plt>
   2e35c:	cmp	r0, #0
   2e360:	beq	2e374 <__assert_fail@plt+0x1c6c8>
   2e364:	mov	r0, #1
   2e368:	str	r0, [sp, #12]
   2e36c:	b	2e374 <__assert_fail@plt+0x1c6c8>
   2e370:	mov	r6, r5
   2e374:	ldr	sl, [r9, r5, lsl #2]
   2e378:	ldr	r0, [fp, #8]
   2e37c:	add	r5, r5, #1
   2e380:	add	r4, r4, r0
   2e384:	cmp	sl, #0
   2e388:	bne	2e310 <__assert_fail@plt+0x1c664>
   2e38c:	ldr	r0, [sp, #12]
   2e390:	ldr	r5, [sp, #8]
   2e394:	ldr	r9, [sp, #4]
   2e398:	movw	r1, #2125	; 0x84d
   2e39c:	movt	r1, #3
   2e3a0:	tst	r0, #1
   2e3a4:	bne	2e3b4 <__assert_fail@plt+0x1c708>
   2e3a8:	cmn	r6, #1
   2e3ac:	bgt	2e42c <__assert_fail@plt+0x1c780>
   2e3b0:	beq	2e3c8 <__assert_fail@plt+0x1c71c>
   2e3b4:	movw	r1, #2152	; 0x868
   2e3b8:	movt	r1, #3
   2e3bc:	b	2e3c8 <__assert_fail@plt+0x1c71c>
   2e3c0:	movw	r1, #2125	; 0x84d
   2e3c4:	movt	r1, #3
   2e3c8:	ldr	r6, [fp, #12]
   2e3cc:	mov	r0, #0
   2e3d0:	mov	r2, #5
   2e3d4:	bl	11940 <dcgettext@plt>
   2e3d8:	mov	r4, r0
   2e3dc:	mov	r0, #0
   2e3e0:	mov	r1, #8
   2e3e4:	mov	r2, r7
   2e3e8:	bl	18e98 <__assert_fail@plt+0x71ec>
   2e3ec:	mov	r7, r0
   2e3f0:	mov	r0, #1
   2e3f4:	mov	r1, r9
   2e3f8:	bl	19458 <__assert_fail@plt+0x77ac>
   2e3fc:	str	r0, [sp]
   2e400:	mov	r0, #0
   2e404:	mov	r1, #0
   2e408:	mov	r2, r4
   2e40c:	mov	r3, r7
   2e410:	bl	119e8 <error@plt>
   2e414:	ldr	r1, [sp, #16]
   2e418:	ldr	r2, [fp, #8]
   2e41c:	mov	r0, r5
   2e420:	bl	2e1cc <__assert_fail@plt+0x1c520>
   2e424:	blx	r6
   2e428:	mvn	r6, #0
   2e42c:	mov	r0, r6
   2e430:	sub	sp, fp, #28
   2e434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e438:	mov	r6, r5
   2e43c:	ldr	r5, [sp, #8]
   2e440:	ldr	r9, [sp, #4]
   2e444:	movw	r1, #2125	; 0x84d
   2e448:	movt	r1, #3
   2e44c:	cmn	r6, #1
   2e450:	bgt	2e42c <__assert_fail@plt+0x1c780>
   2e454:	b	2e3b0 <__assert_fail@plt+0x1c704>
   2e458:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e45c:	add	fp, sp, #24
   2e460:	ldr	r6, [r1]
   2e464:	cmp	r6, #0
   2e468:	beq	2e4cc <__assert_fail@plt+0x1c820>
   2e46c:	mov	r8, r1
   2e470:	mov	r7, r2
   2e474:	mov	r1, r2
   2e478:	mov	r2, r3
   2e47c:	mov	r4, r3
   2e480:	mov	r9, r0
   2e484:	bl	11934 <memcmp@plt>
   2e488:	cmp	r0, #0
   2e48c:	beq	2e4c4 <__assert_fail@plt+0x1c818>
   2e490:	add	r7, r7, r4
   2e494:	add	r5, r8, #4
   2e498:	ldr	r6, [r5]
   2e49c:	cmp	r6, #0
   2e4a0:	beq	2e4cc <__assert_fail@plt+0x1c820>
   2e4a4:	mov	r0, r9
   2e4a8:	mov	r1, r7
   2e4ac:	mov	r2, r4
   2e4b0:	bl	11934 <memcmp@plt>
   2e4b4:	add	r7, r7, r4
   2e4b8:	add	r5, r5, #4
   2e4bc:	cmp	r0, #0
   2e4c0:	bne	2e498 <__assert_fail@plt+0x1c7ec>
   2e4c4:	mov	r0, r6
   2e4c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e4cc:	mov	r6, #0
   2e4d0:	mov	r0, r6
   2e4d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e4d8:	push	{r4, r5, r6, sl, fp, lr}
   2e4dc:	add	fp, sp, #16
   2e4e0:	mov	r4, r0
   2e4e4:	bl	119d0 <__fpending@plt>
   2e4e8:	mov	r5, r0
   2e4ec:	mov	r0, r4
   2e4f0:	bl	118c8 <ferror@plt>
   2e4f4:	mov	r6, r0
   2e4f8:	mov	r0, r4
   2e4fc:	bl	11b74 <fclose@plt>
   2e500:	cmp	r6, #0
   2e504:	beq	2e524 <__assert_fail@plt+0x1c878>
   2e508:	mvn	r4, #0
   2e50c:	cmp	r0, #0
   2e510:	bne	2e558 <__assert_fail@plt+0x1c8ac>
   2e514:	bl	11af0 <__errno_location@plt>
   2e518:	mov	r1, #0
   2e51c:	str	r1, [r0]
   2e520:	b	2e558 <__assert_fail@plt+0x1c8ac>
   2e524:	cmp	r0, #0
   2e528:	mov	r4, r0
   2e52c:	mvnne	r4, #0
   2e530:	cmp	r5, #0
   2e534:	bne	2e558 <__assert_fail@plt+0x1c8ac>
   2e538:	cmp	r0, #0
   2e53c:	beq	2e558 <__assert_fail@plt+0x1c8ac>
   2e540:	bl	11af0 <__errno_location@plt>
   2e544:	ldr	r0, [r0]
   2e548:	subs	r4, r0, #9
   2e54c:	mvnne	r4, #0
   2e550:	mov	r0, r4
   2e554:	pop	{r4, r5, r6, sl, fp, pc}
   2e558:	mov	r0, r4
   2e55c:	pop	{r4, r5, r6, sl, fp, pc}
   2e560:	push	{r4, r5, r6, r7, fp, lr}
   2e564:	add	fp, sp, #16
   2e568:	mov	r4, r0
   2e56c:	ldr	r0, [r0, #4]
   2e570:	mov	r5, r1
   2e574:	cmp	r0, r1
   2e578:	movcs	r0, #1
   2e57c:	strcs	r5, [r4]
   2e580:	popcs	{r4, r5, r6, r7, fp, pc}
   2e584:	mov	r6, r3
   2e588:	cmp	r3, #0
   2e58c:	beq	2e5b4 <__assert_fail@plt+0x1c908>
   2e590:	mvn	r0, #0
   2e594:	udiv	r0, r0, r6
   2e598:	cmp	r0, r5
   2e59c:	bcs	2e5b4 <__assert_fail@plt+0x1c908>
   2e5a0:	bl	11af0 <__errno_location@plt>
   2e5a4:	mov	r1, #12
   2e5a8:	str	r1, [r0]
   2e5ac:	mov	r0, #0
   2e5b0:	pop	{r4, r5, r6, r7, fp, pc}
   2e5b4:	ldr	r0, [r4, #8]
   2e5b8:	mul	r1, r6, r5
   2e5bc:	cmp	r0, r2
   2e5c0:	beq	2e5d8 <__assert_fail@plt+0x1c92c>
   2e5c4:	bl	1b388 <__assert_fail@plt+0x96dc>
   2e5c8:	mov	r7, r0
   2e5cc:	cmp	r0, #0
   2e5d0:	bne	2e608 <__assert_fail@plt+0x1c95c>
   2e5d4:	b	2e618 <__assert_fail@plt+0x1c96c>
   2e5d8:	mov	r0, r1
   2e5dc:	bl	1b2f8 <__assert_fail@plt+0x964c>
   2e5e0:	cmp	r0, #0
   2e5e4:	beq	2e618 <__assert_fail@plt+0x1c96c>
   2e5e8:	ldr	r1, [r4, #8]
   2e5ec:	mov	r7, r0
   2e5f0:	cmp	r1, #0
   2e5f4:	beq	2e608 <__assert_fail@plt+0x1c95c>
   2e5f8:	ldr	r0, [r4]
   2e5fc:	mul	r2, r0, r6
   2e600:	mov	r0, r7
   2e604:	bl	118ec <memcpy@plt>
   2e608:	mov	r0, #1
   2e60c:	str	r5, [r4]
   2e610:	stmib	r4, {r5, r7}
   2e614:	pop	{r4, r5, r6, r7, fp, pc}
   2e618:	mov	r0, #0
   2e61c:	pop	{r4, r5, r6, r7, fp, pc}
   2e620:	push	{r4, sl, fp, lr}
   2e624:	add	fp, sp, #8
   2e628:	sub	sp, sp, #264	; 0x108
   2e62c:	add	r1, sp, #7
   2e630:	movw	r2, #257	; 0x101
   2e634:	bl	2e804 <__assert_fail@plt+0x1cb58>
   2e638:	mov	r4, #0
   2e63c:	cmp	r0, #0
   2e640:	bne	2e678 <__assert_fail@plt+0x1c9cc>
   2e644:	movw	r1, #2215	; 0x8a7
   2e648:	add	r0, sp, #7
   2e64c:	movt	r1, #3
   2e650:	bl	1185c <strcmp@plt>
   2e654:	cmp	r0, #0
   2e658:	beq	2e678 <__assert_fail@plt+0x1c9cc>
   2e65c:	movw	r1, #2217	; 0x8a9
   2e660:	add	r0, sp, #7
   2e664:	movt	r1, #3
   2e668:	bl	1185c <strcmp@plt>
   2e66c:	mov	r4, r0
   2e670:	cmp	r0, #0
   2e674:	movwne	r4, #1
   2e678:	mov	r0, r4
   2e67c:	sub	sp, fp, #8
   2e680:	pop	{r4, sl, fp, pc}
   2e684:	push	{fp, lr}
   2e688:	mov	fp, sp
   2e68c:	mov	r0, #14
   2e690:	bl	11bbc <nl_langinfo@plt>
   2e694:	movw	r1, #64311	; 0xfb37
   2e698:	cmp	r0, #0
   2e69c:	movt	r1, #2
   2e6a0:	movne	r1, r0
   2e6a4:	movw	r0, #2223	; 0x8af
   2e6a8:	ldrb	r2, [r1]
   2e6ac:	movt	r0, #3
   2e6b0:	cmp	r2, #0
   2e6b4:	movne	r0, r1
   2e6b8:	pop	{fp, pc}
   2e6bc:	push	{r4, sl, fp, lr}
   2e6c0:	add	fp, sp, #8
   2e6c4:	mov	r4, #0
   2e6c8:	adds	r0, r0, #16
   2e6cc:	adc	r1, r4, #0
   2e6d0:	rsb	r2, r1, #0
   2e6d4:	eors	r2, r2, r1
   2e6d8:	movwne	r2, #1
   2e6dc:	cmp	r0, #0
   2e6e0:	blt	2e700 <__assert_fail@plt+0x1ca54>
   2e6e4:	cmp	r2, #0
   2e6e8:	asreq	r2, r0, #31
   2e6ec:	eoreq	r3, r0, r0
   2e6f0:	andeq	r2, r2, #1
   2e6f4:	eoreq	r1, r1, r2
   2e6f8:	orrseq	r1, r3, r1
   2e6fc:	beq	2e708 <__assert_fail@plt+0x1ca5c>
   2e700:	mov	r0, r4
   2e704:	pop	{r4, sl, fp, pc}
   2e708:	bl	11a24 <malloc@plt>
   2e70c:	cmp	r0, #0
   2e710:	addne	r4, r0, #8
   2e714:	movne	r1, #8
   2e718:	bfine	r4, r1, #0, #4
   2e71c:	subne	r0, r4, r0
   2e720:	strbne	r0, [r4, #-1]
   2e724:	mov	r0, r4
   2e728:	pop	{r4, sl, fp, pc}
   2e72c:	tst	r0, #7
   2e730:	bne	2e748 <__assert_fail@plt+0x1ca9c>
   2e734:	tst	r0, #8
   2e738:	bxeq	lr
   2e73c:	ldrb	r1, [r0, #-1]
   2e740:	sub	r0, r0, r1
   2e744:	b	1b22c <__assert_fail@plt+0x9580>
   2e748:	push	{fp, lr}
   2e74c:	mov	fp, sp
   2e750:	bl	11c70 <abort@plt>
   2e754:	push	{r4, sl, fp, lr}
   2e758:	add	fp, sp, #8
   2e75c:	mov	r4, r0
   2e760:	bl	1188c <wcwidth@plt>
   2e764:	cmn	r0, #1
   2e768:	popgt	{r4, sl, fp, pc}
   2e76c:	mov	r0, r4
   2e770:	bl	11964 <iswcntrl@plt>
   2e774:	clz	r0, r0
   2e778:	lsr	r0, r0, #5
   2e77c:	pop	{r4, sl, fp, pc}
   2e780:	push	{r4, r5, r6, sl, fp, lr}
   2e784:	add	fp, sp, #16
   2e788:	mov	r4, r0
   2e78c:	mov	r0, r1
   2e790:	mov	r5, r1
   2e794:	ldr	r1, [r0], #16
   2e798:	cmp	r1, r0
   2e79c:	beq	2e7a8 <__assert_fail@plt+0x1cafc>
   2e7a0:	mov	r6, r1
   2e7a4:	b	2e7b8 <__assert_fail@plt+0x1cb0c>
   2e7a8:	ldr	r2, [r5, #4]
   2e7ac:	add	r6, r4, #16
   2e7b0:	mov	r0, r6
   2e7b4:	bl	118ec <memcpy@plt>
   2e7b8:	str	r6, [r4]
   2e7bc:	ldr	r0, [r5, #4]
   2e7c0:	str	r0, [r4, #4]
   2e7c4:	ldrb	r0, [r5, #8]
   2e7c8:	strb	r0, [r4, #8]
   2e7cc:	cmp	r0, #0
   2e7d0:	ldrne	r0, [r5, #12]
   2e7d4:	strne	r0, [r4, #12]
   2e7d8:	pop	{r4, r5, r6, sl, fp, pc}
   2e7dc:	movw	r2, #2232	; 0x8b8
   2e7e0:	ubfx	r1, r0, #5, #3
   2e7e4:	and	r0, r0, #31
   2e7e8:	movt	r2, #3
   2e7ec:	ldr	r1, [r2, r1, lsl #2]
   2e7f0:	mov	r2, #1
   2e7f4:	and	r0, r1, r2, lsl r0
   2e7f8:	cmp	r0, #0
   2e7fc:	movwne	r0, #1
   2e800:	bx	lr
   2e804:	push	{r4, r5, r6, r7, fp, lr}
   2e808:	add	fp, sp, #16
   2e80c:	mov	r4, r1
   2e810:	mov	r1, #0
   2e814:	mov	r6, r2
   2e818:	bl	11ba4 <setlocale@plt>
   2e81c:	cmp	r0, #0
   2e820:	beq	2e850 <__assert_fail@plt+0x1cba4>
   2e824:	mov	r7, r0
   2e828:	bl	11ac0 <strlen@plt>
   2e82c:	cmp	r0, r6
   2e830:	bcs	2e870 <__assert_fail@plt+0x1cbc4>
   2e834:	add	r2, r0, #1
   2e838:	mov	r0, r4
   2e83c:	mov	r1, r7
   2e840:	bl	118ec <memcpy@plt>
   2e844:	mov	r5, #0
   2e848:	mov	r0, r5
   2e84c:	pop	{r4, r5, r6, r7, fp, pc}
   2e850:	cmp	r6, #0
   2e854:	mov	r5, #22
   2e858:	movne	r0, #0
   2e85c:	strbne	r0, [r4]
   2e860:	movne	r0, r5
   2e864:	popne	{r4, r5, r6, r7, fp, pc}
   2e868:	mov	r0, r5
   2e86c:	pop	{r4, r5, r6, r7, fp, pc}
   2e870:	mov	r5, #34	; 0x22
   2e874:	cmp	r6, #0
   2e878:	beq	2e898 <__assert_fail@plt+0x1cbec>
   2e87c:	sub	r6, r6, #1
   2e880:	mov	r0, r4
   2e884:	mov	r1, r7
   2e888:	mov	r2, r6
   2e88c:	bl	118ec <memcpy@plt>
   2e890:	mov	r0, #0
   2e894:	strb	r0, [r4, r6]
   2e898:	mov	r0, r5
   2e89c:	pop	{r4, r5, r6, r7, fp, pc}
   2e8a0:	mov	r1, #0
   2e8a4:	b	11ba4 <setlocale@plt>
   2e8a8:	mov	r1, #0
   2e8ac:	mov	r2, #3
   2e8b0:	b	1aff0 <__assert_fail@plt+0x9344>
   2e8b4:	eor	r1, r1, #-2147483648	; 0x80000000
   2e8b8:	b	2e8c0 <__assert_fail@plt+0x1cc14>
   2e8bc:	eor	r3, r3, #-2147483648	; 0x80000000
   2e8c0:	push	{r4, r5, lr}
   2e8c4:	lsl	r4, r1, #1
   2e8c8:	lsl	r5, r3, #1
   2e8cc:	teq	r4, r5
   2e8d0:	teqeq	r0, r2
   2e8d4:	orrsne	ip, r4, r0
   2e8d8:	orrsne	ip, r5, r2
   2e8dc:	mvnsne	ip, r4, asr #21
   2e8e0:	mvnsne	ip, r5, asr #21
   2e8e4:	beq	2ead0 <__assert_fail@plt+0x1ce24>
   2e8e8:	lsr	r4, r4, #21
   2e8ec:	rsbs	r5, r4, r5, lsr #21
   2e8f0:	rsblt	r5, r5, #0
   2e8f4:	ble	2e914 <__assert_fail@plt+0x1cc68>
   2e8f8:	add	r4, r4, r5
   2e8fc:	eor	r2, r0, r2
   2e900:	eor	r3, r1, r3
   2e904:	eor	r0, r2, r0
   2e908:	eor	r1, r3, r1
   2e90c:	eor	r2, r0, r2
   2e910:	eor	r3, r1, r3
   2e914:	cmp	r5, #54	; 0x36
   2e918:	pophi	{r4, r5, pc}
   2e91c:	tst	r1, #-2147483648	; 0x80000000
   2e920:	lsl	r1, r1, #12
   2e924:	mov	ip, #1048576	; 0x100000
   2e928:	orr	r1, ip, r1, lsr #12
   2e92c:	beq	2e938 <__assert_fail@plt+0x1cc8c>
   2e930:	rsbs	r0, r0, #0
   2e934:	rsc	r1, r1, #0
   2e938:	tst	r3, #-2147483648	; 0x80000000
   2e93c:	lsl	r3, r3, #12
   2e940:	orr	r3, ip, r3, lsr #12
   2e944:	beq	2e950 <__assert_fail@plt+0x1cca4>
   2e948:	rsbs	r2, r2, #0
   2e94c:	rsc	r3, r3, #0
   2e950:	teq	r4, r5
   2e954:	beq	2eab8 <__assert_fail@plt+0x1ce0c>
   2e958:	sub	r4, r4, #1
   2e95c:	rsbs	lr, r5, #32
   2e960:	blt	2e97c <__assert_fail@plt+0x1ccd0>
   2e964:	lsl	ip, r2, lr
   2e968:	adds	r0, r0, r2, lsr r5
   2e96c:	adc	r1, r1, #0
   2e970:	adds	r0, r0, r3, lsl lr
   2e974:	adcs	r1, r1, r3, asr r5
   2e978:	b	2e998 <__assert_fail@plt+0x1ccec>
   2e97c:	sub	r5, r5, #32
   2e980:	add	lr, lr, #32
   2e984:	cmp	r2, #1
   2e988:	lsl	ip, r3, lr
   2e98c:	orrcs	ip, ip, #2
   2e990:	adds	r0, r0, r3, asr r5
   2e994:	adcs	r1, r1, r3, asr #31
   2e998:	and	r5, r1, #-2147483648	; 0x80000000
   2e99c:	bpl	2e9ac <__assert_fail@plt+0x1cd00>
   2e9a0:	rsbs	ip, ip, #0
   2e9a4:	rscs	r0, r0, #0
   2e9a8:	rsc	r1, r1, #0
   2e9ac:	cmp	r1, #1048576	; 0x100000
   2e9b0:	bcc	2e9f0 <__assert_fail@plt+0x1cd44>
   2e9b4:	cmp	r1, #2097152	; 0x200000
   2e9b8:	bcc	2e9d8 <__assert_fail@plt+0x1cd2c>
   2e9bc:	lsrs	r1, r1, #1
   2e9c0:	rrxs	r0, r0
   2e9c4:	rrx	ip, ip
   2e9c8:	add	r4, r4, #1
   2e9cc:	lsl	r2, r4, #21
   2e9d0:	cmn	r2, #4194304	; 0x400000
   2e9d4:	bcs	2eb30 <__assert_fail@plt+0x1ce84>
   2e9d8:	cmp	ip, #-2147483648	; 0x80000000
   2e9dc:	lsrseq	ip, r0, #1
   2e9e0:	adcs	r0, r0, #0
   2e9e4:	adc	r1, r1, r4, lsl #20
   2e9e8:	orr	r1, r1, r5
   2e9ec:	pop	{r4, r5, pc}
   2e9f0:	lsls	ip, ip, #1
   2e9f4:	adcs	r0, r0, r0
   2e9f8:	adc	r1, r1, r1
   2e9fc:	tst	r1, #1048576	; 0x100000
   2ea00:	sub	r4, r4, #1
   2ea04:	bne	2e9d8 <__assert_fail@plt+0x1cd2c>
   2ea08:	teq	r1, #0
   2ea0c:	moveq	r1, r0
   2ea10:	moveq	r0, #0
   2ea14:	clz	r3, r1
   2ea18:	addeq	r3, r3, #32
   2ea1c:	sub	r3, r3, #11
   2ea20:	subs	r2, r3, #32
   2ea24:	bge	2ea48 <__assert_fail@plt+0x1cd9c>
   2ea28:	adds	r2, r2, #12
   2ea2c:	ble	2ea44 <__assert_fail@plt+0x1cd98>
   2ea30:	add	ip, r2, #20
   2ea34:	rsb	r2, r2, #12
   2ea38:	lsl	r0, r1, ip
   2ea3c:	lsr	r1, r1, r2
   2ea40:	b	2ea58 <__assert_fail@plt+0x1cdac>
   2ea44:	add	r2, r2, #20
   2ea48:	rsble	ip, r2, #32
   2ea4c:	lsl	r1, r1, r2
   2ea50:	orrle	r1, r1, r0, lsr ip
   2ea54:	lslle	r0, r0, r2
   2ea58:	subs	r4, r4, r3
   2ea5c:	addge	r1, r1, r4, lsl #20
   2ea60:	orrge	r1, r1, r5
   2ea64:	popge	{r4, r5, pc}
   2ea68:	mvn	r4, r4
   2ea6c:	subs	r4, r4, #31
   2ea70:	bge	2eaac <__assert_fail@plt+0x1ce00>
   2ea74:	adds	r4, r4, #12
   2ea78:	bgt	2ea94 <__assert_fail@plt+0x1cde8>
   2ea7c:	add	r4, r4, #20
   2ea80:	rsb	r2, r4, #32
   2ea84:	lsr	r0, r0, r4
   2ea88:	orr	r0, r0, r1, lsl r2
   2ea8c:	orr	r1, r5, r1, lsr r4
   2ea90:	pop	{r4, r5, pc}
   2ea94:	rsb	r4, r4, #12
   2ea98:	rsb	r2, r4, #32
   2ea9c:	lsr	r0, r0, r2
   2eaa0:	orr	r0, r0, r1, lsl r4
   2eaa4:	mov	r1, r5
   2eaa8:	pop	{r4, r5, pc}
   2eaac:	lsr	r0, r1, r4
   2eab0:	mov	r1, r5
   2eab4:	pop	{r4, r5, pc}
   2eab8:	teq	r4, #0
   2eabc:	eor	r3, r3, #1048576	; 0x100000
   2eac0:	eoreq	r1, r1, #1048576	; 0x100000
   2eac4:	addeq	r4, r4, #1
   2eac8:	subne	r5, r5, #1
   2eacc:	b	2e958 <__assert_fail@plt+0x1ccac>
   2ead0:	mvns	ip, r4, asr #21
   2ead4:	mvnsne	ip, r5, asr #21
   2ead8:	beq	2eb40 <__assert_fail@plt+0x1ce94>
   2eadc:	teq	r4, r5
   2eae0:	teqeq	r0, r2
   2eae4:	beq	2eaf8 <__assert_fail@plt+0x1ce4c>
   2eae8:	orrs	ip, r4, r0
   2eaec:	moveq	r1, r3
   2eaf0:	moveq	r0, r2
   2eaf4:	pop	{r4, r5, pc}
   2eaf8:	teq	r1, r3
   2eafc:	movne	r1, #0
   2eb00:	movne	r0, #0
   2eb04:	popne	{r4, r5, pc}
   2eb08:	lsrs	ip, r4, #21
   2eb0c:	bne	2eb20 <__assert_fail@plt+0x1ce74>
   2eb10:	lsls	r0, r0, #1
   2eb14:	adcs	r1, r1, r1
   2eb18:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2eb1c:	pop	{r4, r5, pc}
   2eb20:	adds	r4, r4, #4194304	; 0x400000
   2eb24:	addcc	r1, r1, #1048576	; 0x100000
   2eb28:	popcc	{r4, r5, pc}
   2eb2c:	and	r5, r1, #-2147483648	; 0x80000000
   2eb30:	orr	r1, r5, #2130706432	; 0x7f000000
   2eb34:	orr	r1, r1, #15728640	; 0xf00000
   2eb38:	mov	r0, #0
   2eb3c:	pop	{r4, r5, pc}
   2eb40:	mvns	ip, r4, asr #21
   2eb44:	movne	r1, r3
   2eb48:	movne	r0, r2
   2eb4c:	mvnseq	ip, r5, asr #21
   2eb50:	movne	r3, r1
   2eb54:	movne	r2, r0
   2eb58:	orrs	r4, r0, r1, lsl #12
   2eb5c:	orrseq	r5, r2, r3, lsl #12
   2eb60:	teqeq	r1, r3
   2eb64:	orrne	r1, r1, #524288	; 0x80000
   2eb68:	pop	{r4, r5, pc}
   2eb6c:	teq	r0, #0
   2eb70:	moveq	r1, #0
   2eb74:	bxeq	lr
   2eb78:	push	{r4, r5, lr}
   2eb7c:	mov	r4, #1024	; 0x400
   2eb80:	add	r4, r4, #50	; 0x32
   2eb84:	mov	r5, #0
   2eb88:	mov	r1, #0
   2eb8c:	b	2ea08 <__assert_fail@plt+0x1cd5c>
   2eb90:	teq	r0, #0
   2eb94:	moveq	r1, #0
   2eb98:	bxeq	lr
   2eb9c:	push	{r4, r5, lr}
   2eba0:	mov	r4, #1024	; 0x400
   2eba4:	add	r4, r4, #50	; 0x32
   2eba8:	ands	r5, r0, #-2147483648	; 0x80000000
   2ebac:	rsbmi	r0, r0, #0
   2ebb0:	mov	r1, #0
   2ebb4:	b	2ea08 <__assert_fail@plt+0x1cd5c>
   2ebb8:	lsls	r2, r0, #1
   2ebbc:	asr	r1, r2, #3
   2ebc0:	rrx	r1, r1
   2ebc4:	lsl	r0, r2, #28
   2ebc8:	andsne	r3, r2, #-16777216	; 0xff000000
   2ebcc:	teqne	r3, #-16777216	; 0xff000000
   2ebd0:	eorne	r1, r1, #939524096	; 0x38000000
   2ebd4:	bxne	lr
   2ebd8:	bics	r2, r2, #-16777216	; 0xff000000
   2ebdc:	bxeq	lr
   2ebe0:	teq	r3, #-16777216	; 0xff000000
   2ebe4:	orreq	r1, r1, #524288	; 0x80000
   2ebe8:	bxeq	lr
   2ebec:	push	{r4, r5, lr}
   2ebf0:	mov	r4, #896	; 0x380
   2ebf4:	and	r5, r1, #-2147483648	; 0x80000000
   2ebf8:	bic	r1, r1, #-2147483648	; 0x80000000
   2ebfc:	b	2ea08 <__assert_fail@plt+0x1cd5c>
   2ec00:	orrs	r2, r0, r1
   2ec04:	bxeq	lr
   2ec08:	push	{r4, r5, lr}
   2ec0c:	mov	r5, #0
   2ec10:	b	2ec30 <__assert_fail@plt+0x1cf84>
   2ec14:	orrs	r2, r0, r1
   2ec18:	bxeq	lr
   2ec1c:	push	{r4, r5, lr}
   2ec20:	ands	r5, r1, #-2147483648	; 0x80000000
   2ec24:	bpl	2ec30 <__assert_fail@plt+0x1cf84>
   2ec28:	rsbs	r0, r0, #0
   2ec2c:	rsc	r1, r1, #0
   2ec30:	mov	r4, #1024	; 0x400
   2ec34:	add	r4, r4, #50	; 0x32
   2ec38:	lsrs	ip, r1, #22
   2ec3c:	beq	2e9ac <__assert_fail@plt+0x1cd00>
   2ec40:	mov	r2, #3
   2ec44:	lsrs	ip, ip, #3
   2ec48:	addne	r2, r2, #3
   2ec4c:	lsrs	ip, ip, #3
   2ec50:	addne	r2, r2, #3
   2ec54:	add	r2, r2, ip, lsr #3
   2ec58:	rsb	r3, r2, #32
   2ec5c:	lsl	ip, r0, r3
   2ec60:	lsr	r0, r0, r2
   2ec64:	orr	r0, r0, r1, lsl r3
   2ec68:	lsr	r1, r1, r2
   2ec6c:	add	r4, r4, r2
   2ec70:	b	2e9ac <__assert_fail@plt+0x1cd00>
   2ec74:	cmp	r3, #0
   2ec78:	cmpeq	r2, #0
   2ec7c:	bne	2ec94 <__assert_fail@plt+0x1cfe8>
   2ec80:	cmp	r1, #0
   2ec84:	cmpeq	r0, #0
   2ec88:	mvnne	r1, #0
   2ec8c:	mvnne	r0, #0
   2ec90:	b	2ecb0 <__assert_fail@plt+0x1d004>
   2ec94:	sub	sp, sp, #8
   2ec98:	push	{sp, lr}
   2ec9c:	bl	2ed00 <__assert_fail@plt+0x1d054>
   2eca0:	ldr	lr, [sp, #4]
   2eca4:	add	sp, sp, #8
   2eca8:	pop	{r2, r3}
   2ecac:	bx	lr
   2ecb0:	push	{r1, lr}
   2ecb4:	mov	r0, #8
   2ecb8:	bl	11838 <raise@plt>
   2ecbc:	pop	{r1, pc}
   2ecc0:	vmov	d6, r0, r1
   2ecc4:	vldr	d7, [pc, #36]	; 2ecf0 <__assert_fail@plt+0x1d044>
   2ecc8:	vldr	d5, [pc, #40]	; 2ecf8 <__assert_fail@plt+0x1d04c>
   2eccc:	vmul.f64	d7, d6, d7
   2ecd0:	vcvt.u32.f64	s14, d7
   2ecd4:	vcvt.f64.u32	d4, s14
   2ecd8:	vmov	r1, s14
   2ecdc:	vmls.f64	d6, d4, d5
   2ece0:	vcvt.u32.f64	s15, d6
   2ece4:	vmov	r0, s15
   2ece8:	bx	lr
   2ecec:	nop			; (mov r0, r0)
   2ecf0:	andeq	r0, r0, r0
   2ecf4:	ldclcc	0, cr0, [r0]
   2ecf8:	andeq	r0, r0, r0
   2ecfc:	mvnsmi	r0, r0
   2ed00:	cmp	r1, r3
   2ed04:	cmpeq	r0, r2
   2ed08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ed0c:	mov	r4, r0
   2ed10:	movcc	r0, #0
   2ed14:	mov	r5, r1
   2ed18:	ldr	lr, [sp, #36]	; 0x24
   2ed1c:	movcc	r1, r0
   2ed20:	bcc	2ee1c <__assert_fail@plt+0x1d170>
   2ed24:	cmp	r3, #0
   2ed28:	clzeq	ip, r2
   2ed2c:	clzne	ip, r3
   2ed30:	addeq	ip, ip, #32
   2ed34:	cmp	r5, #0
   2ed38:	clzeq	r1, r4
   2ed3c:	addeq	r1, r1, #32
   2ed40:	clzne	r1, r5
   2ed44:	sub	ip, ip, r1
   2ed48:	sub	sl, ip, #32
   2ed4c:	lsl	r9, r3, ip
   2ed50:	rsb	fp, ip, #32
   2ed54:	orr	r9, r9, r2, lsl sl
   2ed58:	orr	r9, r9, r2, lsr fp
   2ed5c:	lsl	r8, r2, ip
   2ed60:	cmp	r5, r9
   2ed64:	cmpeq	r4, r8
   2ed68:	movcc	r0, #0
   2ed6c:	movcc	r1, r0
   2ed70:	bcc	2ed8c <__assert_fail@plt+0x1d0e0>
   2ed74:	mov	r0, #1
   2ed78:	subs	r4, r4, r8
   2ed7c:	lsl	r1, r0, sl
   2ed80:	orr	r1, r1, r0, lsr fp
   2ed84:	lsl	r0, r0, ip
   2ed88:	sbc	r5, r5, r9
   2ed8c:	cmp	ip, #0
   2ed90:	beq	2ee1c <__assert_fail@plt+0x1d170>
   2ed94:	lsr	r6, r8, #1
   2ed98:	orr	r6, r6, r9, lsl #31
   2ed9c:	lsr	r7, r9, #1
   2eda0:	mov	r2, ip
   2eda4:	b	2edc8 <__assert_fail@plt+0x1d11c>
   2eda8:	subs	r3, r4, r6
   2edac:	sbc	r8, r5, r7
   2edb0:	adds	r3, r3, r3
   2edb4:	adc	r8, r8, r8
   2edb8:	adds	r4, r3, #1
   2edbc:	adc	r5, r8, #0
   2edc0:	subs	r2, r2, #1
   2edc4:	beq	2ede4 <__assert_fail@plt+0x1d138>
   2edc8:	cmp	r5, r7
   2edcc:	cmpeq	r4, r6
   2edd0:	bcs	2eda8 <__assert_fail@plt+0x1d0fc>
   2edd4:	adds	r4, r4, r4
   2edd8:	adc	r5, r5, r5
   2eddc:	subs	r2, r2, #1
   2ede0:	bne	2edc8 <__assert_fail@plt+0x1d11c>
   2ede4:	lsr	r3, r4, ip
   2ede8:	orr	r3, r3, r5, lsl fp
   2edec:	lsr	r2, r5, ip
   2edf0:	orr	r3, r3, r5, lsr sl
   2edf4:	adds	r0, r0, r4
   2edf8:	mov	r4, r3
   2edfc:	lsl	r3, r2, ip
   2ee00:	orr	r3, r3, r4, lsl sl
   2ee04:	lsl	ip, r4, ip
   2ee08:	orr	r3, r3, r4, lsr fp
   2ee0c:	adc	r1, r1, r5
   2ee10:	subs	r0, r0, ip
   2ee14:	mov	r5, r2
   2ee18:	sbc	r1, r1, r3
   2ee1c:	cmp	lr, #0
   2ee20:	strdne	r4, [lr]
   2ee24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ee28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ee2c:	mov	r7, r0
   2ee30:	ldr	r6, [pc, #72]	; 2ee80 <__assert_fail@plt+0x1d1d4>
   2ee34:	ldr	r5, [pc, #72]	; 2ee84 <__assert_fail@plt+0x1d1d8>
   2ee38:	add	r6, pc, r6
   2ee3c:	add	r5, pc, r5
   2ee40:	sub	r6, r6, r5
   2ee44:	mov	r8, r1
   2ee48:	mov	r9, r2
   2ee4c:	bl	117e8 <pthread_mutex_unlock@plt-0x20>
   2ee50:	asrs	r6, r6, #2
   2ee54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ee58:	mov	r4, #0
   2ee5c:	add	r4, r4, #1
   2ee60:	ldr	r3, [r5], #4
   2ee64:	mov	r2, r9
   2ee68:	mov	r1, r8
   2ee6c:	mov	r0, r7
   2ee70:	blx	r3
   2ee74:	cmp	r6, r4
   2ee78:	bne	2ee5c <__assert_fail@plt+0x1d1b0>
   2ee7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ee80:	andeq	r2, r1, ip, asr #1
   2ee84:	andeq	r2, r1, r4, asr #1
   2ee88:	bx	lr
   2ee8c:	ldr	r3, [pc, #12]	; 2eea0 <__assert_fail@plt+0x1d1f4>
   2ee90:	mov	r1, #0
   2ee94:	add	r3, pc, r3
   2ee98:	ldr	r2, [r3]
   2ee9c:	b	11b14 <__cxa_atexit@plt>
   2eea0:	andeq	r2, r1, r8, lsl #6

Disassembly of section .fini:

0002eea4 <.fini>:
   2eea4:	push	{r3, lr}
   2eea8:	pop	{r3, pc}
