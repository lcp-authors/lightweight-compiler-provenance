
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010b40 <.init>:
   10b40:	push	{r3, lr}
   10b44:	bl	112fc <__assert_fail@plt+0x580>
   10b48:	pop	{r3, pc}

Disassembly of section .plt:

00010b4c <calloc@plt-0x14>:
   10b4c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b50:	ldr	lr, [pc, #4]	; 10b5c <calloc@plt-0x4>
   10b54:	add	lr, pc, lr
   10b58:	ldr	pc, [lr, #8]!
   10b5c:	andeq	r5, r1, r4, lsr #9

00010b60 <calloc@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #86016	; 0x15000
   10b68:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b6c <raise@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #86016	; 0x15000
   10b74:	ldr	pc, [ip, #1180]!	; 0x49c

00010b78 <strcmp@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #86016	; 0x15000
   10b80:	ldr	pc, [ip, #1172]!	; 0x494

00010b84 <strtol@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #86016	; 0x15000
   10b8c:	ldr	pc, [ip, #1164]!	; 0x48c

00010b90 <printf@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #86016	; 0x15000
   10b98:	ldr	pc, [ip, #1156]!	; 0x484

00010b9c <fflush@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #86016	; 0x15000
   10ba4:	ldr	pc, [ip, #1148]!	; 0x47c

00010ba8 <free@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #86016	; 0x15000
   10bb0:	ldr	pc, [ip, #1140]!	; 0x474

00010bb4 <ferror@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #86016	; 0x15000
   10bbc:	ldr	pc, [ip, #1132]!	; 0x46c

00010bc0 <_exit@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #86016	; 0x15000
   10bc8:	ldr	pc, [ip, #1124]!	; 0x464

00010bcc <memcpy@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #86016	; 0x15000
   10bd4:	ldr	pc, [ip, #1116]!	; 0x45c

00010bd8 <mbsinit@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #86016	; 0x15000
   10be0:	ldr	pc, [ip, #1108]!	; 0x454

00010be4 <memcmp@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #86016	; 0x15000
   10bec:	ldr	pc, [ip, #1100]!	; 0x44c

00010bf0 <dcgettext@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #86016	; 0x15000
   10bf8:	ldr	pc, [ip, #1092]!	; 0x444

00010bfc <realloc@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #86016	; 0x15000
   10c04:	ldr	pc, [ip, #1084]!	; 0x43c

00010c08 <iswprint@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #86016	; 0x15000
   10c10:	ldr	pc, [ip, #1076]!	; 0x434

00010c14 <fwrite@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #86016	; 0x15000
   10c1c:	ldr	pc, [ip, #1068]!	; 0x42c

00010c20 <lseek64@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #86016	; 0x15000
   10c28:	ldr	pc, [ip, #1060]!	; 0x424

00010c2c <__ctype_get_mb_cur_max@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #86016	; 0x15000
   10c34:	ldr	pc, [ip, #1052]!	; 0x41c

00010c38 <__fpending@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #86016	; 0x15000
   10c40:	ldr	pc, [ip, #1044]!	; 0x414

00010c44 <mbrtowc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #86016	; 0x15000
   10c4c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c50 <error@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #86016	; 0x15000
   10c58:	ldr	pc, [ip, #1028]!	; 0x404

00010c5c <malloc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #86016	; 0x15000
   10c64:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c68 <__libc_start_main@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #86016	; 0x15000
   10c70:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c74 <__freading@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #86016	; 0x15000
   10c7c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c80 <__gmon_start__@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #86016	; 0x15000
   10c88:	ldr	pc, [ip, #996]!	; 0x3e4

00010c8c <getopt_long@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #86016	; 0x15000
   10c94:	ldr	pc, [ip, #988]!	; 0x3dc

00010c98 <__ctype_b_loc@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #86016	; 0x15000
   10ca0:	ldr	pc, [ip, #980]!	; 0x3d4

00010ca4 <exit@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #972]!	; 0x3cc

00010cb0 <strlen@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #964]!	; 0x3c4

00010cbc <fprintf@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #956]!	; 0x3bc

00010cc8 <__errno_location@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #948]!	; 0x3b4

00010cd4 <__cxa_atexit@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #940]!	; 0x3ac

00010ce0 <memset@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #932]!	; 0x3a4

00010cec <fileno@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #924]!	; 0x39c

00010cf8 <fclose@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #916]!	; 0x394

00010d04 <fseeko64@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #908]!	; 0x38c

00010d10 <setlocale@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #900]!	; 0x384

00010d1c <strrchr@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #892]!	; 0x37c

00010d28 <nl_langinfo@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #884]!	; 0x374

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #876]!	; 0x36c

00010d40 <putc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #868]!	; 0x364

00010d4c <getdelim@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #860]!	; 0x35c

00010d58 <fputs@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #852]!	; 0x354

00010d64 <strncmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #844]!	; 0x34c

00010d70 <abort@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #836]!	; 0x344

00010d7c <__assert_fail@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #828]!	; 0x33c

Disassembly of section .text:

00010d88 <.text>:
   10d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d8c:	mov	r6, r0
   10d90:	ldr	r0, [r1]
   10d94:	sub	sp, sp, #44	; 0x2c
   10d98:	cmp	r0, #0
   10d9c:	mov	r4, r1
   10da0:	ldreq	r0, [pc, #1208]	; 11260 <__assert_fail@plt+0x4e4>
   10da4:	bl	116bc <__assert_fail@plt+0x940>
   10da8:	ldr	r0, [pc, #1204]	; 11264 <__assert_fail@plt+0x4e8>
   10dac:	bl	148dc <__assert_fail@plt+0x3b60>
   10db0:	subs	r9, r0, #0
   10db4:	bne	111d0 <__assert_fail@plt+0x454>
   10db8:	ldr	fp, [pc, #1192]	; 11268 <__assert_fail@plt+0x4ec>
   10dbc:	ldr	r8, [pc, #1192]	; 1126c <__assert_fail@plt+0x4f0>
   10dc0:	mov	r0, fp
   10dc4:	str	fp, [sp, #32]
   10dc8:	bl	13a24 <__assert_fail@plt+0x2ca8>
   10dcc:	mov	r3, #10
   10dd0:	str	r9, [sp, #12]
   10dd4:	str	r3, [sp, #16]
   10dd8:	ldr	r7, [pc, #1168]	; 11270 <__assert_fail@plt+0x4f4>
   10ddc:	mov	sl, r9
   10de0:	mov	r5, r9
   10de4:	str	r0, [sp, #28]
   10de8:	mov	r0, fp
   10dec:	bl	13a24 <__assert_fail@plt+0x2ca8>
   10df0:	mov	fp, r0
   10df4:	strb	r9, [r0]
   10df8:	str	r5, [sp]
   10dfc:	mov	r3, r8
   10e00:	mov	r2, r7
   10e04:	mov	r1, r4
   10e08:	mov	r0, r6
   10e0c:	bl	10c8c <getopt_long@plt>
   10e10:	cmn	r0, #1
   10e14:	beq	10f3c <__assert_fail@plt+0x1c0>
   10e18:	cmp	r0, #83	; 0x53
   10e1c:	beq	10e88 <__assert_fail@plt+0x10c>
   10e20:	ble	10e50 <__assert_fail@plt+0xd4>
   10e24:	cmp	r0, #104	; 0x68
   10e28:	beq	10e48 <__assert_fail@plt+0xcc>
   10e2c:	cmp	r0, #118	; 0x76
   10e30:	bne	10e80 <__assert_fail@plt+0x104>
   10e34:	ldr	r0, [pc, #1060]	; 11260 <__assert_fail@plt+0x4e4>
   10e38:	bl	114a8 <__assert_fail@plt+0x72c>
   10e3c:	mov	r0, #0
   10e40:	add	sp, sp, #44	; 0x2c
   10e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e48:	mov	r0, #0
   10e4c:	bl	11418 <__assert_fail@plt+0x69c>
   10e50:	cmp	r0, #48	; 0x30
   10e54:	bne	10e80 <__assert_fail@plt+0x104>
   10e58:	str	r9, [sp, #16]
   10e5c:	b	10df8 <__assert_fail@plt+0x7c>
   10e60:	mov	r2, #5
   10e64:	ldr	r1, [pc, #1032]	; 11274 <__assert_fail@plt+0x4f8>
   10e68:	mov	r0, #0
   10e6c:	bl	10bf0 <dcgettext@plt>
   10e70:	mov	r1, #0
   10e74:	mov	r2, r0
   10e78:	mov	r0, r1
   10e7c:	bl	10c50 <error@plt>
   10e80:	mov	r0, #1
   10e84:	bl	11418 <__assert_fail@plt+0x69c>
   10e88:	bl	10cc8 <__errno_location@plt>
   10e8c:	ldr	r3, [pc, #996]	; 11278 <__assert_fail@plt+0x4fc>
   10e90:	mov	r2, #10
   10e94:	add	r1, sp, #36	; 0x24
   10e98:	ldr	r3, [r3]
   10e9c:	str	r3, [sp, #20]
   10ea0:	str	r5, [r0]
   10ea4:	mov	sl, r0
   10ea8:	mov	r0, r3
   10eac:	bl	10b84 <strtol@plt>
   10eb0:	subs	r3, r0, #0
   10eb4:	str	r3, [sp, #12]
   10eb8:	beq	10f14 <__assert_fail@plt+0x198>
   10ebc:	ldr	r3, [sp, #12]
   10ec0:	sub	r2, r3, #-2147483647	; 0x80000001
   10ec4:	cmn	r2, #3
   10ec8:	bls	111fc <__assert_fail@plt+0x480>
   10ecc:	ldr	r3, [sl]
   10ed0:	cmp	r3, #0
   10ed4:	bne	1123c <__assert_fail@plt+0x4c0>
   10ed8:	ldr	r3, [sp, #36]	; 0x24
   10edc:	ldrb	r3, [r3]
   10ee0:	cmp	r3, #0
   10ee4:	beq	11218 <__assert_fail@plt+0x49c>
   10ee8:	mov	r2, #5
   10eec:	ldr	r1, [pc, #904]	; 1127c <__assert_fail@plt+0x500>
   10ef0:	mov	r0, #0
   10ef4:	bl	10bf0 <dcgettext@plt>
   10ef8:	ldr	r2, [sp, #36]	; 0x24
   10efc:	ldr	r3, [sp, #20]
   10f00:	str	r2, [sp]
   10f04:	mov	r1, #0
   10f08:	mov	r2, r0
   10f0c:	mov	r0, #1
   10f10:	bl	10c50 <error@plt>
   10f14:	ldr	r2, [pc, #860]	; 11278 <__assert_fail@plt+0x4fc>
   10f18:	ldr	r3, [sp, #36]	; 0x24
   10f1c:	ldr	r2, [r2]
   10f20:	cmp	r3, r2
   10f24:	beq	111e0 <__assert_fail@plt+0x464>
   10f28:	ldrb	r3, [r3]
   10f2c:	cmp	r3, #0
   10f30:	bne	10ee8 <__assert_fail@plt+0x16c>
   10f34:	mov	sl, #1
   10f38:	b	10df8 <__assert_fail@plt+0x7c>
   10f3c:	ldr	r3, [pc, #828]	; 11280 <__assert_fail@plt+0x504>
   10f40:	ldr	r3, [r3]
   10f44:	cmp	r6, r3
   10f48:	bne	10e60 <__assert_fail@plt+0xe4>
   10f4c:	cmp	sl, #0
   10f50:	ldr	r5, [pc, #812]	; 11284 <__assert_fail@plt+0x508>
   10f54:	beq	11164 <__assert_fail@plt+0x3e8>
   10f58:	ldr	r3, [sp, #12]
   10f5c:	ldr	r1, [r5]
   10f60:	cmp	r3, #0
   10f64:	movne	r0, #49	; 0x31
   10f68:	moveq	r0, #48	; 0x30
   10f6c:	bl	10d34 <fputc@plt>
   10f70:	ldr	r1, [r5]
   10f74:	mov	r0, #0
   10f78:	bl	10d34 <fputc@plt>
   10f7c:	mov	r7, r9
   10f80:	str	r9, [sp, #12]
   10f84:	ldr	r8, [pc, #732]	; 11268 <__assert_fail@plt+0x4ec>
   10f88:	ldr	r9, [sp, #16]
   10f8c:	mov	r6, #0
   10f90:	ldr	r3, [pc, #752]	; 11288 <__assert_fail@plt+0x50c>
   10f94:	mov	r2, r9
   10f98:	add	r1, sp, #32
   10f9c:	ldr	r3, [r3]
   10fa0:	add	r0, sp, #28
   10fa4:	bl	10d4c <getdelim@plt>
   10fa8:	cmp	r0, #0
   10fac:	ble	11150 <__assert_fail@plt+0x3d4>
   10fb0:	ldr	r3, [sp, #28]
   10fb4:	sub	r0, r0, #1
   10fb8:	ldrb	r2, [r3, r0]
   10fbc:	cmp	r9, r2
   10fc0:	strbeq	r6, [r3, r0]
   10fc4:	beq	10fe8 <__assert_fail@plt+0x26c>
   10fc8:	mov	r2, #5
   10fcc:	ldr	r1, [pc, #696]	; 1128c <__assert_fail@plt+0x510>
   10fd0:	mov	r0, r6
   10fd4:	bl	10bf0 <dcgettext@plt>
   10fd8:	mov	r1, r6
   10fdc:	mov	r2, r0
   10fe0:	mov	r0, #0
   10fe4:	bl	10c50 <error@plt>
   10fe8:	ldr	r0, [sp, #28]
   10fec:	ldrb	r2, [fp]
   10ff0:	ldrb	r3, [r0]
   10ff4:	cmp	r2, #0
   10ff8:	sub	r3, r3, r2
   10ffc:	clz	r3, r3
   11000:	lsr	r3, r3, #5
   11004:	moveq	r3, #0
   11008:	cmp	r3, #0
   1100c:	beq	11148 <__assert_fail@plt+0x3cc>
   11010:	mov	r1, r0
   11014:	sub	ip, fp, #-2147483646	; 0x80000002
   11018:	mov	r4, fp
   1101c:	b	11028 <__assert_fail@plt+0x2ac>
   11020:	cmp	r4, ip
   11024:	beq	1104c <__assert_fail@plt+0x2d0>
   11028:	ldrb	r2, [r4, #1]!
   1102c:	ldrb	r3, [r1, #1]!
   11030:	cmp	r2, #0
   11034:	sub	r3, r3, r2
   11038:	clz	r3, r3
   1103c:	lsr	r3, r3, #5
   11040:	moveq	r3, #0
   11044:	cmp	r3, #0
   11048:	bne	11020 <__assert_fail@plt+0x2a4>
   1104c:	sub	r4, r4, fp
   11050:	sub	r3, r4, r7
   11054:	ldr	r1, [pc, #564]	; 11290 <__assert_fail@plt+0x514>
   11058:	add	r2, r3, #32768	; 0x8000
   1105c:	cmp	r2, r1
   11060:	rsbhi	r3, r7, #0
   11064:	ldrhi	r4, [sp, #12]
   11068:	cmp	sl, #0
   1106c:	bne	110e4 <__assert_fail@plt+0x368>
   11070:	add	r2, r3, #127	; 0x7f
   11074:	cmp	r2, #254	; 0xfe
   11078:	bls	11130 <__assert_fail@plt+0x3b4>
   1107c:	ldr	r1, [r5]
   11080:	mov	r0, #128	; 0x80
   11084:	str	r3, [sp, #16]
   11088:	bl	10d40 <putc@plt>
   1108c:	ldr	r3, [sp, #16]
   11090:	cmn	r0, #1
   11094:	beq	11144 <__assert_fail@plt+0x3c8>
   11098:	ldr	r2, [pc, #500]	; 11294 <__assert_fail@plt+0x518>
   1109c:	ldr	r7, [r5]
   110a0:	cmp	r3, r2
   110a4:	bgt	111bc <__assert_fail@plt+0x440>
   110a8:	cmn	r3, #32768	; 0x8000
   110ac:	blt	111a8 <__assert_fail@plt+0x42c>
   110b0:	mov	r1, r7
   110b4:	asr	r0, r3, #8
   110b8:	str	r3, [sp, #16]
   110bc:	bl	10d40 <putc@plt>
   110c0:	cmn	r0, #1
   110c4:	beq	11144 <__assert_fail@plt+0x3c8>
   110c8:	ldr	r3, [sp, #16]
   110cc:	mov	r1, r7
   110d0:	mov	r0, r3
   110d4:	bl	10d40 <putc@plt>
   110d8:	cmn	r0, #1
   110dc:	beq	11144 <__assert_fail@plt+0x3c8>
   110e0:	ldr	r0, [sp, #28]
   110e4:	add	r0, r0, r4
   110e8:	ldr	r1, [r5]
   110ec:	bl	10d58 <fputs@plt>
   110f0:	cmn	r0, #1
   110f4:	beq	11144 <__assert_fail@plt+0x3c8>
   110f8:	ldr	r1, [r5]
   110fc:	mov	r0, r6
   11100:	bl	10d40 <putc@plt>
   11104:	cmn	r0, #1
   11108:	beq	11144 <__assert_fail@plt+0x3c8>
   1110c:	ldr	r2, [sp, #28]
   11110:	ldr	r3, [sp, #32]
   11114:	str	fp, [sp, #28]
   11118:	str	r8, [sp, #32]
   1111c:	mov	r7, r4
   11120:	mov	fp, r2
   11124:	mov	r8, r3
   11128:	ldr	sl, [sp, #12]
   1112c:	b	10f90 <__assert_fail@plt+0x214>
   11130:	mov	r0, r3
   11134:	ldr	r1, [r5]
   11138:	bl	10d40 <putc@plt>
   1113c:	cmn	r0, #1
   11140:	bne	110e0 <__assert_fail@plt+0x364>
   11144:	bl	113e8 <__assert_fail@plt+0x66c>
   11148:	mov	r4, fp
   1114c:	b	1104c <__assert_fail@plt+0x2d0>
   11150:	ldr	r0, [sp, #28]
   11154:	bl	14054 <__assert_fail@plt+0x32d8>
   11158:	mov	r0, fp
   1115c:	bl	14054 <__assert_fail@plt+0x32d8>
   11160:	b	10e3c <__assert_fail@plt+0xc0>
   11164:	mov	r2, #10
   11168:	mov	r1, #1
   1116c:	ldr	r3, [r5]
   11170:	ldr	r0, [pc, #288]	; 11298 <__assert_fail@plt+0x51c>
   11174:	bl	10c14 <fwrite@plt>
   11178:	cmp	r0, #10
   1117c:	beq	10f7c <__assert_fail@plt+0x200>
   11180:	bl	10cc8 <__errno_location@plt>
   11184:	ldr	r1, [pc, #272]	; 1129c <__assert_fail@plt+0x520>
   11188:	mov	r2, #5
   1118c:	ldr	r4, [r0]
   11190:	mov	r0, #0
   11194:	bl	10bf0 <dcgettext@plt>
   11198:	mov	r1, r4
   1119c:	mov	r2, r0
   111a0:	mov	r0, #1
   111a4:	bl	10c50 <error@plt>
   111a8:	ldr	r3, [pc, #240]	; 112a0 <__assert_fail@plt+0x524>
   111ac:	mov	r2, #105	; 0x69
   111b0:	ldr	r1, [pc, #236]	; 112a4 <__assert_fail@plt+0x528>
   111b4:	ldr	r0, [pc, #236]	; 112a8 <__assert_fail@plt+0x52c>
   111b8:	bl	10d7c <__assert_fail@plt>
   111bc:	ldr	r3, [pc, #220]	; 112a0 <__assert_fail@plt+0x524>
   111c0:	mov	r2, #104	; 0x68
   111c4:	ldr	r1, [pc, #216]	; 112a4 <__assert_fail@plt+0x528>
   111c8:	ldr	r0, [pc, #220]	; 112ac <__assert_fail@plt+0x530>
   111cc:	bl	10d7c <__assert_fail@plt>
   111d0:	bl	10cc8 <__errno_location@plt>
   111d4:	mov	r2, #5
   111d8:	ldr	r1, [pc, #208]	; 112b0 <__assert_fail@plt+0x534>
   111dc:	b	1118c <__assert_fail@plt+0x410>
   111e0:	mov	r2, #5
   111e4:	ldr	r1, [pc, #200]	; 112b4 <__assert_fail@plt+0x538>
   111e8:	bl	10bf0 <dcgettext@plt>
   111ec:	ldr	r1, [sp, #12]
   111f0:	mov	r2, r0
   111f4:	mov	r0, #1
   111f8:	bl	10c50 <error@plt>
   111fc:	ldr	r3, [sp, #36]	; 0x24
   11200:	ldrb	r3, [r3]
   11204:	cmp	r3, #0
   11208:	bne	10ee8 <__assert_fail@plt+0x16c>
   1120c:	ldr	r3, [sp, #12]
   11210:	cmp	r3, #1
   11214:	beq	10f34 <__assert_fail@plt+0x1b8>
   11218:	mov	r2, #5
   1121c:	ldr	r1, [pc, #148]	; 112b8 <__assert_fail@plt+0x53c>
   11220:	mov	r0, #0
   11224:	bl	10bf0 <dcgettext@plt>
   11228:	ldr	r3, [sp, #12]
   1122c:	mov	r1, #0
   11230:	mov	r2, r0
   11234:	mov	r0, #1
   11238:	bl	10c50 <error@plt>
   1123c:	mov	r2, #5
   11240:	ldr	r1, [pc, #116]	; 112bc <__assert_fail@plt+0x540>
   11244:	mov	r0, #0
   11248:	bl	10bf0 <dcgettext@plt>
   1124c:	ldr	r3, [sp, #20]
   11250:	mov	r1, #0
   11254:	mov	r2, r0
   11258:	mov	r0, #1
   1125c:	bl	10c50 <error@plt>
   11260:			; <UNDEFINED> instruction: 0x000149bc
   11264:	ldrdeq	r1, [r1], -r8
   11268:	andeq	r0, r0, r2, lsl #8
   1126c:	andeq	r4, r1, r0, lsl #18
   11270:			; <UNDEFINED> instruction: 0x00014ab0
   11274:			; <UNDEFINED> instruction: 0x00014ab8
   11278:	andeq	r6, r2, r8, lsr r1
   1127c:	andeq	r4, r1, r8, asr sl
   11280:	andeq	r6, r2, r0, lsr #2
   11284:	andeq	r6, r2, r4, lsr r1
   11288:	andeq	r6, r2, r0, lsr r1
   1128c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11290:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   11294:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   11298:	andeq	r4, r1, r0, asr #18
   1129c:	ldrdeq	r4, [r1], -r0
   112a0:	andeq	r4, r1, ip, asr #18
   112a4:	andeq	r4, r1, r4, lsr #22
   112a8:	andeq	r4, r1, r0, asr #22
   112ac:	andeq	r4, r1, r0, lsr fp
   112b0:	andeq	r4, r1, r4, asr #19
   112b4:	andeq	r4, r1, r8, ror #19
   112b8:	andeq	r4, r1, r4, lsl #21
   112bc:	andeq	r4, r1, r4, lsr #20
   112c0:	mov	fp, #0
   112c4:	mov	lr, #0
   112c8:	pop	{r1}		; (ldr r1, [sp], #4)
   112cc:	mov	r2, sp
   112d0:	push	{r2}		; (str r2, [sp, #-4]!)
   112d4:	push	{r0}		; (str r0, [sp, #-4]!)
   112d8:	ldr	ip, [pc, #16]	; 112f0 <__assert_fail@plt+0x574>
   112dc:	push	{ip}		; (str ip, [sp, #-4]!)
   112e0:	ldr	r0, [pc, #12]	; 112f4 <__assert_fail@plt+0x578>
   112e4:	ldr	r3, [pc, #12]	; 112f8 <__assert_fail@plt+0x57c>
   112e8:	bl	10c68 <__libc_start_main@plt>
   112ec:	bl	10d70 <abort@plt>
   112f0:	ldrdeq	r4, [r1], -r8
   112f4:	andeq	r0, r1, r8, lsl #27
   112f8:	andeq	r4, r1, r8, ror r8
   112fc:	ldr	r3, [pc, #20]	; 11318 <__assert_fail@plt+0x59c>
   11300:	ldr	r2, [pc, #20]	; 1131c <__assert_fail@plt+0x5a0>
   11304:	add	r3, pc, r3
   11308:	ldr	r2, [r3, r2]
   1130c:	cmp	r2, #0
   11310:	bxeq	lr
   11314:	b	10c80 <__gmon_start__@plt>
   11318:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1131c:	andeq	r0, r0, r4, asr #1
   11320:	ldr	r3, [pc, #28]	; 11344 <__assert_fail@plt+0x5c8>
   11324:	ldr	r0, [pc, #28]	; 11348 <__assert_fail@plt+0x5cc>
   11328:	sub	r3, r3, r0
   1132c:	cmp	r3, #6
   11330:	bxls	lr
   11334:	ldr	r3, [pc, #16]	; 1134c <__assert_fail@plt+0x5d0>
   11338:	cmp	r3, #0
   1133c:	bxeq	lr
   11340:	bx	r3
   11344:	andeq	r6, r2, fp, lsl r1
   11348:	andeq	r6, r2, r8, lsl r1
   1134c:	andeq	r0, r0, r0
   11350:	ldr	r1, [pc, #36]	; 1137c <__assert_fail@plt+0x600>
   11354:	ldr	r0, [pc, #36]	; 11380 <__assert_fail@plt+0x604>
   11358:	sub	r1, r1, r0
   1135c:	asr	r1, r1, #2
   11360:	add	r1, r1, r1, lsr #31
   11364:	asrs	r1, r1, #1
   11368:	bxeq	lr
   1136c:	ldr	r3, [pc, #16]	; 11384 <__assert_fail@plt+0x608>
   11370:	cmp	r3, #0
   11374:	bxeq	lr
   11378:	bx	r3
   1137c:	andeq	r6, r2, r8, lsl r1
   11380:	andeq	r6, r2, r8, lsl r1
   11384:	andeq	r0, r0, r0
   11388:	push	{r4, lr}
   1138c:	ldr	r4, [pc, #24]	; 113ac <__assert_fail@plt+0x630>
   11390:	ldrb	r3, [r4]
   11394:	cmp	r3, #0
   11398:	popne	{r4, pc}
   1139c:	bl	11320 <__assert_fail@plt+0x5a4>
   113a0:	mov	r3, #1
   113a4:	strb	r3, [r4]
   113a8:	pop	{r4, pc}
   113ac:	andeq	r6, r2, ip, lsr r1
   113b0:	ldr	r0, [pc, #40]	; 113e0 <__assert_fail@plt+0x664>
   113b4:	ldr	r3, [r0]
   113b8:	cmp	r3, #0
   113bc:	bne	113c4 <__assert_fail@plt+0x648>
   113c0:	b	11350 <__assert_fail@plt+0x5d4>
   113c4:	ldr	r3, [pc, #24]	; 113e4 <__assert_fail@plt+0x668>
   113c8:	cmp	r3, #0
   113cc:	beq	113c0 <__assert_fail@plt+0x644>
   113d0:	push	{r4, lr}
   113d4:	blx	r3
   113d8:	pop	{r4, lr}
   113dc:	b	11350 <__assert_fail@plt+0x5d4>
   113e0:	andeq	r5, r2, r4, lsl pc
   113e4:	andeq	r0, r0, r0
   113e8:	push	{r4, lr}
   113ec:	bl	10cc8 <__errno_location@plt>
   113f0:	mov	r2, #5
   113f4:	ldr	r1, [pc, #24]	; 11414 <__assert_fail@plt+0x698>
   113f8:	ldr	r4, [r0]
   113fc:	mov	r0, #0
   11400:	bl	10bf0 <dcgettext@plt>
   11404:	mov	r1, r4
   11408:	mov	r2, r0
   1140c:	mov	r0, #1
   11410:	bl	10c50 <error@plt>
   11414:	andeq	r4, r1, r8, asr r9
   11418:	subs	r4, r0, #0
   1141c:	push	{r7, lr}
   11420:	beq	11458 <__assert_fail@plt+0x6dc>
   11424:	ldr	r3, [pc, #104]	; 11494 <__assert_fail@plt+0x718>
   11428:	mov	r2, #5
   1142c:	ldr	r1, [pc, #100]	; 11498 <__assert_fail@plt+0x71c>
   11430:	mov	r0, #0
   11434:	ldr	r5, [r3]
   11438:	bl	10bf0 <dcgettext@plt>
   1143c:	ldr	r3, [pc, #88]	; 1149c <__assert_fail@plt+0x720>
   11440:	ldr	r2, [r3]
   11444:	mov	r1, r0
   11448:	mov	r0, r5
   1144c:	bl	10cbc <fprintf@plt>
   11450:	mov	r0, r4
   11454:	bl	10ca4 <exit@plt>
   11458:	ldr	r5, [pc, #64]	; 114a0 <__assert_fail@plt+0x724>
   1145c:	mov	r2, #5
   11460:	ldr	r1, [pc, #60]	; 114a4 <__assert_fail@plt+0x728>
   11464:	ldr	r7, [r5]
   11468:	bl	10bf0 <dcgettext@plt>
   1146c:	ldr	r6, [pc, #40]	; 1149c <__assert_fail@plt+0x720>
   11470:	ldr	r2, [r6]
   11474:	mov	r1, r0
   11478:	mov	r0, r7
   1147c:	bl	10cbc <fprintf@plt>
   11480:	ldr	r1, [r6]
   11484:	ldr	r0, [r5]
   11488:	bl	11554 <__assert_fail@plt+0x7d8>
   1148c:	mov	r0, r4
   11490:	bl	10ca4 <exit@plt>
   11494:	andeq	r6, r2, r8, lsr #2
   11498:	andeq	r4, r1, r4, ror #18
   1149c:	andeq	r6, r2, r8, asr #2
   114a0:	andeq	r6, r2, r4, lsr r1
   114a4:	andeq	r4, r1, ip, lsl #19
   114a8:	ldr	r3, [pc, #136]	; 11538 <__assert_fail@plt+0x7bc>
   114ac:	push	{r4, r5, r6, r7, r8, lr}
   114b0:	mov	r5, r0
   114b4:	sub	sp, sp, #16
   114b8:	ldr	r0, [r3]
   114bc:	bl	13ff4 <__assert_fail@plt+0x3278>
   114c0:	ldr	ip, [pc, #116]	; 1153c <__assert_fail@plt+0x7c0>
   114c4:	ldr	r3, [pc, #116]	; 11540 <__assert_fail@plt+0x7c4>
   114c8:	mov	r2, #5
   114cc:	ldr	r1, [pc, #112]	; 11544 <__assert_fail@plt+0x7c8>
   114d0:	mov	r0, #0
   114d4:	ldr	r4, [ip]
   114d8:	ldr	r7, [r3]
   114dc:	bl	10bf0 <dcgettext@plt>
   114e0:	mov	r2, #5
   114e4:	ldr	r1, [pc, #92]	; 11548 <__assert_fail@plt+0x7cc>
   114e8:	mov	r8, r0
   114ec:	mov	r0, #0
   114f0:	bl	10bf0 <dcgettext@plt>
   114f4:	mov	r2, #5
   114f8:	ldr	r1, [pc, #76]	; 1154c <__assert_fail@plt+0x7d0>
   114fc:	mov	r6, r0
   11500:	mov	r0, #0
   11504:	bl	10bf0 <dcgettext@plt>
   11508:	mov	r2, #0
   1150c:	str	r2, [sp, #12]
   11510:	str	r8, [sp]
   11514:	mov	r3, r7
   11518:	str	r6, [sp, #4]
   1151c:	mov	r1, r5
   11520:	ldr	r2, [pc, #40]	; 11550 <__assert_fail@plt+0x7d4>
   11524:	str	r0, [sp, #8]
   11528:	mov	r0, r4
   1152c:	bl	13940 <__assert_fail@plt+0x2bc4>
   11530:	add	sp, sp, #16
   11534:	pop	{r4, r5, r6, r7, r8, pc}
   11538:	andeq	r6, r2, r8, lsr #2
   1153c:	andeq	r6, r2, r4, lsr r1
   11540:	ldrdeq	r6, [r2], -r0
   11544:	andeq	r4, r1, r8, ror #22
   11548:	andeq	r4, r1, r8, ror fp
   1154c:	andeq	r4, r1, r8, lsl #23
   11550:	muleq	r1, r8, fp
   11554:	push	{r4, r5, lr}
   11558:	mov	r2, #5
   1155c:	sub	sp, sp, #20
   11560:	mov	r4, r0
   11564:	mov	r5, r1
   11568:	mov	r0, #0
   1156c:	ldr	r1, [pc, #48]	; 115a4 <__assert_fail@plt+0x828>
   11570:	bl	10bf0 <dcgettext@plt>
   11574:	ldr	ip, [pc, #44]	; 115a8 <__assert_fail@plt+0x82c>
   11578:	ldr	r1, [pc, #44]	; 115ac <__assert_fail@plt+0x830>
   1157c:	ldr	r2, [pc, #44]	; 115b0 <__assert_fail@plt+0x834>
   11580:	mov	r3, r5
   11584:	stmib	sp, {r1, ip}
   11588:	str	r2, [sp]
   1158c:	ldr	r2, [pc, #32]	; 115b4 <__assert_fail@plt+0x838>
   11590:	mov	r1, r0
   11594:	mov	r0, r4
   11598:	bl	10cbc <fprintf@plt>
   1159c:	add	sp, sp, #20
   115a0:	pop	{r4, r5, pc}
   115a4:			; <UNDEFINED> instruction: 0x00014bb8
   115a8:			; <UNDEFINED> instruction: 0x00014cb0
   115ac:	andeq	r4, r1, r8, asr #25
   115b0:	muleq	r1, r8, fp
   115b4:	andeq	r4, r1, r8, lsl #25
   115b8:	ldr	r3, [pc, #4]	; 115c4 <__assert_fail@plt+0x848>
   115bc:	str	r0, [r3]
   115c0:	bx	lr
   115c4:	andeq	r6, r2, r0, asr #2
   115c8:	ldr	r3, [pc, #4]	; 115d4 <__assert_fail@plt+0x858>
   115cc:	strb	r0, [r3, #4]
   115d0:	bx	lr
   115d4:	andeq	r6, r2, r0, asr #2
   115d8:	ldr	r3, [pc, #192]	; 116a0 <__assert_fail@plt+0x924>
   115dc:	push	{r4, r5, r6, lr}
   115e0:	sub	sp, sp, #8
   115e4:	ldr	r0, [r3]
   115e8:	bl	14274 <__assert_fail@plt+0x34f8>
   115ec:	cmp	r0, #0
   115f0:	beq	11614 <__assert_fail@plt+0x898>
   115f4:	ldr	r4, [pc, #168]	; 116a4 <__assert_fail@plt+0x928>
   115f8:	ldrb	r3, [r4, #4]
   115fc:	cmp	r3, #0
   11600:	beq	11630 <__assert_fail@plt+0x8b4>
   11604:	bl	10cc8 <__errno_location@plt>
   11608:	ldr	r3, [r0]
   1160c:	cmp	r3, #32
   11610:	bne	11630 <__assert_fail@plt+0x8b4>
   11614:	ldr	r3, [pc, #140]	; 116a8 <__assert_fail@plt+0x92c>
   11618:	ldr	r0, [r3]
   1161c:	bl	14274 <__assert_fail@plt+0x34f8>
   11620:	cmp	r0, #0
   11624:	bne	11678 <__assert_fail@plt+0x8fc>
   11628:	add	sp, sp, #8
   1162c:	pop	{r4, r5, r6, pc}
   11630:	mov	r2, #5
   11634:	ldr	r1, [pc, #112]	; 116ac <__assert_fail@plt+0x930>
   11638:	mov	r0, #0
   1163c:	bl	10bf0 <dcgettext@plt>
   11640:	ldr	r4, [r4]
   11644:	cmp	r4, #0
   11648:	mov	r5, r0
   1164c:	beq	11684 <__assert_fail@plt+0x908>
   11650:	bl	10cc8 <__errno_location@plt>
   11654:	ldr	r6, [r0]
   11658:	mov	r0, r4
   1165c:	bl	133e4 <__assert_fail@plt+0x2668>
   11660:	mov	r1, r6
   11664:	str	r5, [sp]
   11668:	ldr	r2, [pc, #64]	; 116b0 <__assert_fail@plt+0x934>
   1166c:	mov	r3, r0
   11670:	mov	r0, #0
   11674:	bl	10c50 <error@plt>
   11678:	ldr	r3, [pc, #52]	; 116b4 <__assert_fail@plt+0x938>
   1167c:	ldr	r0, [r3]
   11680:	bl	10bc0 <_exit@plt>
   11684:	bl	10cc8 <__errno_location@plt>
   11688:	mov	r3, r5
   1168c:	ldr	r2, [pc, #36]	; 116b8 <__assert_fail@plt+0x93c>
   11690:	ldr	r1, [r0]
   11694:	mov	r0, r4
   11698:	bl	10c50 <error@plt>
   1169c:	b	11678 <__assert_fail@plt+0x8fc>
   116a0:	andeq	r6, r2, r4, lsr r1
   116a4:	andeq	r6, r2, r0, asr #2
   116a8:	andeq	r6, r2, r8, lsr #2
   116ac:	andeq	r4, r1, r8, asr r9
   116b0:	strdeq	r4, [r1], -r8
   116b4:	ldrdeq	r6, [r2], -r4
   116b8:	strdeq	r4, [r1], -ip
   116bc:	push	{r4, r5, r6, lr}
   116c0:	subs	r4, r0, #0
   116c4:	beq	11738 <__assert_fail@plt+0x9bc>
   116c8:	mov	r1, #47	; 0x2f
   116cc:	bl	10d1c <strrchr@plt>
   116d0:	subs	r5, r0, #0
   116d4:	beq	11724 <__assert_fail@plt+0x9a8>
   116d8:	add	r6, r5, #1
   116dc:	sub	r3, r6, r4
   116e0:	cmp	r3, #6
   116e4:	ble	11724 <__assert_fail@plt+0x9a8>
   116e8:	mov	r2, #7
   116ec:	ldr	r1, [pc, #96]	; 11754 <__assert_fail@plt+0x9d8>
   116f0:	sub	r0, r5, #6
   116f4:	bl	10d64 <strncmp@plt>
   116f8:	cmp	r0, #0
   116fc:	bne	11724 <__assert_fail@plt+0x9a8>
   11700:	mov	r2, #3
   11704:	ldr	r1, [pc, #76]	; 11758 <__assert_fail@plt+0x9dc>
   11708:	mov	r0, r6
   1170c:	bl	10d64 <strncmp@plt>
   11710:	cmp	r0, #0
   11714:	movne	r4, r6
   11718:	ldreq	r3, [pc, #60]	; 1175c <__assert_fail@plt+0x9e0>
   1171c:	addeq	r4, r5, #4
   11720:	streq	r4, [r3]
   11724:	ldr	r2, [pc, #52]	; 11760 <__assert_fail@plt+0x9e4>
   11728:	ldr	r3, [pc, #52]	; 11764 <__assert_fail@plt+0x9e8>
   1172c:	str	r4, [r2]
   11730:	str	r4, [r3]
   11734:	pop	{r4, r5, r6, pc}
   11738:	ldr	r3, [pc, #40]	; 11768 <__assert_fail@plt+0x9ec>
   1173c:	mov	r2, #55	; 0x37
   11740:	mov	r1, #1
   11744:	ldr	r3, [r3]
   11748:	ldr	r0, [pc, #28]	; 1176c <__assert_fail@plt+0x9f0>
   1174c:	bl	10c14 <fwrite@plt>
   11750:	bl	10d70 <abort@plt>
   11754:	andeq	r4, r1, r8, lsr sp
   11758:	andeq	r4, r1, r0, asr #26
   1175c:	andeq	r6, r2, r8, lsl r1
   11760:	andeq	r6, r2, r8, asr #2
   11764:	andeq	r6, r2, ip, lsl r1
   11768:	andeq	r6, r2, r8, lsr #2
   1176c:	andeq	r4, r1, r0, lsl #26
   11770:	push	{r4, r5, r6, lr}
   11774:	mov	r2, #48	; 0x30
   11778:	mov	r4, r1
   1177c:	mov	r1, #0
   11780:	mov	r5, r0
   11784:	bl	10ce0 <memset@plt>
   11788:	cmp	r4, #10
   1178c:	beq	1179c <__assert_fail@plt+0xa20>
   11790:	str	r4, [r5]
   11794:	mov	r0, r5
   11798:	pop	{r4, r5, r6, pc}
   1179c:	bl	10d70 <abort@plt>
   117a0:	push	{r4, r5, r6, lr}
   117a4:	mov	r4, r0
   117a8:	mov	r5, r1
   117ac:	bl	14350 <__assert_fail@plt+0x35d4>
   117b0:	ldrb	r3, [r0]
   117b4:	bic	r3, r3, #32
   117b8:	cmp	r3, #85	; 0x55
   117bc:	bne	1181c <__assert_fail@plt+0xaa0>
   117c0:	ldrb	r3, [r0, #1]
   117c4:	bic	r3, r3, #32
   117c8:	cmp	r3, #84	; 0x54
   117cc:	bne	11858 <__assert_fail@plt+0xadc>
   117d0:	ldrb	r3, [r0, #2]
   117d4:	bic	r3, r3, #32
   117d8:	cmp	r3, #70	; 0x46
   117dc:	bne	11858 <__assert_fail@plt+0xadc>
   117e0:	ldrb	r3, [r0, #3]
   117e4:	cmp	r3, #45	; 0x2d
   117e8:	bne	11858 <__assert_fail@plt+0xadc>
   117ec:	ldrb	r3, [r0, #4]
   117f0:	cmp	r3, #56	; 0x38
   117f4:	bne	11858 <__assert_fail@plt+0xadc>
   117f8:	ldrb	r3, [r0, #5]
   117fc:	cmp	r3, #0
   11800:	bne	11858 <__assert_fail@plt+0xadc>
   11804:	ldrb	r2, [r4]
   11808:	ldr	r3, [pc, #152]	; 118a8 <__assert_fail@plt+0xb2c>
   1180c:	ldr	r0, [pc, #152]	; 118ac <__assert_fail@plt+0xb30>
   11810:	cmp	r2, #96	; 0x60
   11814:	movne	r0, r3
   11818:	pop	{r4, r5, r6, pc}
   1181c:	cmp	r3, #71	; 0x47
   11820:	bne	11858 <__assert_fail@plt+0xadc>
   11824:	ldrb	r3, [r0, #1]
   11828:	bic	r3, r3, #32
   1182c:	cmp	r3, #66	; 0x42
   11830:	bne	11858 <__assert_fail@plt+0xadc>
   11834:	ldrb	r3, [r0, #2]
   11838:	cmp	r3, #49	; 0x31
   1183c:	bne	11858 <__assert_fail@plt+0xadc>
   11840:	ldrb	r3, [r0, #3]
   11844:	cmp	r3, #56	; 0x38
   11848:	bne	11858 <__assert_fail@plt+0xadc>
   1184c:	ldrb	r3, [r0, #4]
   11850:	cmp	r3, #48	; 0x30
   11854:	beq	1186c <__assert_fail@plt+0xaf0>
   11858:	ldr	r3, [pc, #80]	; 118b0 <__assert_fail@plt+0xb34>
   1185c:	cmp	r5, #9
   11860:	ldr	r0, [pc, #76]	; 118b4 <__assert_fail@plt+0xb38>
   11864:	movne	r0, r3
   11868:	pop	{r4, r5, r6, pc}
   1186c:	ldrb	r3, [r0, #5]
   11870:	cmp	r3, #51	; 0x33
   11874:	bne	11858 <__assert_fail@plt+0xadc>
   11878:	ldrb	r3, [r0, #6]
   1187c:	cmp	r3, #48	; 0x30
   11880:	bne	11858 <__assert_fail@plt+0xadc>
   11884:	ldrb	r3, [r0, #7]
   11888:	cmp	r3, #0
   1188c:	bne	11858 <__assert_fail@plt+0xadc>
   11890:	ldrb	r2, [r4]
   11894:	ldr	r3, [pc, #28]	; 118b8 <__assert_fail@plt+0xb3c>
   11898:	ldr	r0, [pc, #28]	; 118bc <__assert_fail@plt+0xb40>
   1189c:	cmp	r2, #96	; 0x60
   118a0:	movne	r0, r3
   118a4:	pop	{r4, r5, r6, pc}
   118a8:	muleq	r1, ip, sp
   118ac:	muleq	r1, r8, sp
   118b0:	andeq	r4, r1, ip, lsr #27
   118b4:	andeq	r4, r1, r8, lsr #27
   118b8:	andeq	r4, r1, r4, lsr #27
   118bc:	andeq	r4, r1, r0, lsr #27
   118c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c4:	sub	sp, sp, #116	; 0x74
   118c8:	mov	sl, r0
   118cc:	str	r3, [sp, #24]
   118d0:	mov	r3, #1
   118d4:	mov	r8, r1
   118d8:	str	r2, [sp, #56]	; 0x38
   118dc:	str	r3, [sp, #36]	; 0x24
   118e0:	bl	10c2c <__ctype_get_mb_cur_max@plt>
   118e4:	ldr	r3, [sp, #156]	; 0x9c
   118e8:	mov	fp, r8
   118ec:	mov	r2, #0
   118f0:	lsr	r3, r3, #1
   118f4:	and	r3, r3, #1
   118f8:	str	r2, [sp, #68]	; 0x44
   118fc:	str	r3, [sp, #28]
   11900:	str	r2, [sp, #40]	; 0x28
   11904:	str	r2, [sp, #44]	; 0x2c
   11908:	str	r2, [sp, #52]	; 0x34
   1190c:	str	r2, [sp, #64]	; 0x40
   11910:	str	r2, [sp, #72]	; 0x48
   11914:	str	sl, [sp, #32]
   11918:	str	r0, [sp, #76]	; 0x4c
   1191c:	ldr	r3, [sp, #152]	; 0x98
   11920:	cmp	r3, #10
   11924:	ldrls	pc, [pc, r3, lsl #2]
   11928:	b	12ae8 <__assert_fail@plt+0x1d6c>
   1192c:	andeq	r1, r1, r8, asr r9
   11930:	andeq	r1, r1, r0, asr #24
   11934:	andeq	r1, r1, r4, ror #24
   11938:	andeq	r1, r1, r8, lsl #25
   1193c:			; <UNDEFINED> instruction: 0x00011db4
   11940:	andeq	r1, r1, r8, lsl #27
   11944:	andeq	r1, r1, r0, ror #26
   11948:	muleq	r1, ip, ip
   1194c:			; <UNDEFINED> instruction: 0x00011cb4
   11950:			; <UNDEFINED> instruction: 0x00011cb4
   11954:			; <UNDEFINED> instruction: 0x00011cb4
   11958:	mov	r3, #0
   1195c:	mov	r7, r3
   11960:	str	r3, [sp, #28]
   11964:	ldr	r3, [sp, #44]	; 0x2c
   11968:	mov	sl, #0
   1196c:	eor	r3, r3, #1
   11970:	str	r3, [sp, #60]	; 0x3c
   11974:	ldr	r3, [sp, #24]
   11978:	cmn	r3, #1
   1197c:	beq	11ee0 <__assert_fail@plt+0x1164>
   11980:	ldr	r3, [sp, #24]
   11984:	subs	r5, r3, sl
   11988:	movne	r5, #1
   1198c:	cmp	r5, #0
   11990:	beq	11ef8 <__assert_fail@plt+0x117c>
   11994:	ldr	r3, [sp, #152]	; 0x98
   11998:	ldr	r8, [sp, #44]	; 0x2c
   1199c:	cmp	r3, #2
   119a0:	moveq	r8, #0
   119a4:	andne	r8, r8, #1
   119a8:	ldr	r3, [sp, #52]	; 0x34
   119ac:	adds	r9, r3, #0
   119b0:	movne	r9, #1
   119b4:	ands	r6, r9, r8
   119b8:	beq	12360 <__assert_fail@plt+0x15e4>
   119bc:	ldr	r2, [sp, #52]	; 0x34
   119c0:	ldr	r1, [sp, #24]
   119c4:	cmp	r2, #1
   119c8:	mov	r3, r2
   119cc:	movls	r3, #0
   119d0:	movhi	r3, #1
   119d4:	cmn	r1, #1
   119d8:	movne	r3, #0
   119dc:	cmp	r3, #0
   119e0:	add	r4, sl, r2
   119e4:	beq	119f4 <__assert_fail@plt+0xc78>
   119e8:	ldr	r0, [sp, #56]	; 0x38
   119ec:	bl	10cb0 <strlen@plt>
   119f0:	str	r0, [sp, #24]
   119f4:	ldr	r3, [sp, #24]
   119f8:	cmp	r3, r4
   119fc:	ldr	r3, [sp, #56]	; 0x38
   11a00:	add	r3, r3, sl
   11a04:	str	r3, [sp, #48]	; 0x30
   11a08:	bcc	1236c <__assert_fail@plt+0x15f0>
   11a0c:	mov	r0, r3
   11a10:	ldr	r2, [sp, #52]	; 0x34
   11a14:	ldr	r1, [sp, #64]	; 0x40
   11a18:	bl	10be4 <memcmp@plt>
   11a1c:	cmp	r0, #0
   11a20:	bne	1236c <__assert_fail@plt+0x15f0>
   11a24:	ldr	r3, [sp, #28]
   11a28:	cmp	r3, #0
   11a2c:	bne	12be8 <__assert_fail@plt+0x1e6c>
   11a30:	ldr	r3, [sp, #48]	; 0x30
   11a34:	ldrb	r4, [r3]
   11a38:	cmp	r4, #126	; 0x7e
   11a3c:	ldrls	pc, [pc, r4, lsl #2]
   11a40:	b	12300 <__assert_fail@plt+0x1584>
   11a44:	andeq	r2, r1, r4, lsr #2
   11a48:	andeq	r2, r1, r0, lsl #6
   11a4c:	andeq	r2, r1, r0, lsl #6
   11a50:	andeq	r2, r1, r0, lsl #6
   11a54:	andeq	r2, r1, r0, lsl #6
   11a58:	andeq	r2, r1, r0, lsl #6
   11a5c:	andeq	r2, r1, r0, lsl #6
   11a60:	andeq	r2, r1, r8, lsl #2
   11a64:	andeq	r2, r1, ip, ror #1
   11a68:	andeq	r2, r1, r8, ror #5
   11a6c:	andeq	r2, r1, ip, asr #32
   11a70:	andeq	r2, r1, r0, lsr r0
   11a74:	andeq	r2, r1, r4, asr #5
   11a78:	andeq	r2, r1, r0, lsr #5
   11a7c:	andeq	r2, r1, r0, lsl #6
   11a80:	andeq	r2, r1, r0, lsl #6
   11a84:	andeq	r2, r1, r0, lsl #6
   11a88:	andeq	r2, r1, r0, lsl #6
   11a8c:	andeq	r2, r1, r0, lsl #6
   11a90:	andeq	r2, r1, r0, lsl #6
   11a94:	andeq	r2, r1, r0, lsl #6
   11a98:	andeq	r2, r1, r0, lsl #6
   11a9c:	andeq	r2, r1, r0, lsl #6
   11aa0:	andeq	r2, r1, r0, lsl #6
   11aa4:	andeq	r2, r1, r0, lsl #6
   11aa8:	andeq	r2, r1, r0, lsl #6
   11aac:	andeq	r2, r1, r0, lsl #6
   11ab0:	andeq	r2, r1, r0, lsl #6
   11ab4:	andeq	r2, r1, r0, lsl #6
   11ab8:	andeq	r2, r1, r0, lsl #6
   11abc:	andeq	r2, r1, r0, lsl #6
   11ac0:	andeq	r2, r1, r0, lsl #6
   11ac4:	andeq	r2, r1, r0, ror #5
   11ac8:	andeq	r2, r1, r4, lsl r2
   11acc:	andeq	r2, r1, r4, lsl r2
   11ad0:	andeq	r1, r1, r4, lsr #28
   11ad4:	andeq	r2, r1, r4, lsl r2
   11ad8:	andeq	r2, r1, ip, lsr #5
   11adc:	andeq	r2, r1, r4, lsl r2
   11ae0:	andeq	r2, r1, r0, lsl #5
   11ae4:	andeq	r2, r1, r4, lsl r2
   11ae8:	andeq	r2, r1, r4, lsl r2
   11aec:	andeq	r2, r1, r4, lsl r2
   11af0:	andeq	r2, r1, ip, lsr #5
   11af4:	andeq	r2, r1, ip, lsr #5
   11af8:	andeq	r2, r1, ip, lsr #5
   11afc:	andeq	r2, r1, ip, lsr #5
   11b00:	andeq	r2, r1, ip, lsr #5
   11b04:	andeq	r2, r1, ip, lsr #5
   11b08:	andeq	r2, r1, ip, lsr #5
   11b0c:	andeq	r2, r1, ip, lsr #5
   11b10:	andeq	r2, r1, ip, lsr #5
   11b14:	andeq	r2, r1, ip, lsr #5
   11b18:	andeq	r2, r1, ip, lsr #5
   11b1c:	andeq	r2, r1, ip, lsr #5
   11b20:	andeq	r2, r1, ip, lsr #5
   11b24:	andeq	r2, r1, ip, lsr #5
   11b28:	andeq	r2, r1, ip, lsr #5
   11b2c:	andeq	r2, r1, ip, lsr #5
   11b30:	andeq	r2, r1, r4, lsl r2
   11b34:	andeq	r2, r1, r4, lsl r2
   11b38:	andeq	r2, r1, r4, lsl r2
   11b3c:	andeq	r2, r1, r4, lsl r2
   11b40:	andeq	r2, r1, r0, asr r2
   11b44:	andeq	r2, r1, r0, lsl #6
   11b48:	andeq	r2, r1, ip, lsr #5
   11b4c:	andeq	r2, r1, ip, lsr #5
   11b50:	andeq	r2, r1, ip, lsr #5
   11b54:	andeq	r2, r1, ip, lsr #5
   11b58:	andeq	r2, r1, ip, lsr #5
   11b5c:	andeq	r2, r1, ip, lsr #5
   11b60:	andeq	r2, r1, ip, lsr #5
   11b64:	andeq	r2, r1, ip, lsr #5
   11b68:	andeq	r2, r1, ip, lsr #5
   11b6c:	andeq	r2, r1, ip, lsr #5
   11b70:	andeq	r2, r1, ip, lsr #5
   11b74:	andeq	r2, r1, ip, lsr #5
   11b78:	andeq	r2, r1, ip, lsr #5
   11b7c:	andeq	r2, r1, ip, lsr #5
   11b80:	andeq	r2, r1, ip, lsr #5
   11b84:	andeq	r2, r1, ip, lsr #5
   11b88:	andeq	r2, r1, ip, lsr #5
   11b8c:	andeq	r2, r1, ip, lsr #5
   11b90:	andeq	r2, r1, ip, lsr #5
   11b94:	andeq	r2, r1, ip, lsr #5
   11b98:	andeq	r2, r1, ip, lsr #5
   11b9c:	andeq	r2, r1, ip, lsr #5
   11ba0:	andeq	r2, r1, ip, lsr #5
   11ba4:	andeq	r2, r1, ip, lsr #5
   11ba8:	andeq	r2, r1, ip, lsr #5
   11bac:	andeq	r2, r1, ip, lsr #5
   11bb0:	andeq	r2, r1, r4, lsl r2
   11bb4:	andeq	r1, r1, r0, ror pc
   11bb8:	andeq	r2, r1, ip, lsr #5
   11bbc:	andeq	r2, r1, r4, lsl r2
   11bc0:	andeq	r2, r1, ip, lsr #5
   11bc4:	andeq	r2, r1, r4, lsl r2
   11bc8:	andeq	r2, r1, ip, lsr #5
   11bcc:	andeq	r2, r1, ip, lsr #5
   11bd0:	andeq	r2, r1, ip, lsr #5
   11bd4:	andeq	r2, r1, ip, lsr #5
   11bd8:	andeq	r2, r1, ip, lsr #5
   11bdc:	andeq	r2, r1, ip, lsr #5
   11be0:	andeq	r2, r1, ip, lsr #5
   11be4:	andeq	r2, r1, ip, lsr #5
   11be8:	andeq	r2, r1, ip, lsr #5
   11bec:	andeq	r2, r1, ip, lsr #5
   11bf0:	andeq	r2, r1, ip, lsr #5
   11bf4:	andeq	r2, r1, ip, lsr #5
   11bf8:	andeq	r2, r1, ip, lsr #5
   11bfc:	andeq	r2, r1, ip, lsr #5
   11c00:	andeq	r2, r1, ip, lsr #5
   11c04:	andeq	r2, r1, ip, lsr #5
   11c08:	andeq	r2, r1, ip, lsr #5
   11c0c:	andeq	r2, r1, ip, lsr #5
   11c10:	andeq	r2, r1, ip, lsr #5
   11c14:	andeq	r2, r1, ip, lsr #5
   11c18:	andeq	r2, r1, ip, lsr #5
   11c1c:	andeq	r2, r1, ip, lsr #5
   11c20:	andeq	r2, r1, ip, lsr #5
   11c24:	andeq	r2, r1, ip, lsr #5
   11c28:	andeq	r2, r1, ip, lsr #5
   11c2c:	andeq	r2, r1, ip, lsr #5
   11c30:	andeq	r1, r1, r4, lsl #28
   11c34:	andeq	r2, r1, r4, lsl r2
   11c38:	andeq	r1, r1, r4, lsl #28
   11c3c:	andeq	r1, r1, r4, lsr #28
   11c40:	mov	r3, #1
   11c44:	str	r3, [sp, #28]
   11c48:	str	r3, [sp, #52]	; 0x34
   11c4c:	ldr	r3, [pc, #4000]	; 12bf4 <__assert_fail@plt+0x1e78>
   11c50:	mov	r7, #0
   11c54:	str	r3, [sp, #64]	; 0x40
   11c58:	mov	r3, #2
   11c5c:	str	r3, [sp, #152]	; 0x98
   11c60:	b	11964 <__assert_fail@plt+0xbe8>
   11c64:	ldr	r3, [sp, #28]
   11c68:	cmp	r3, #0
   11c6c:	beq	11dc8 <__assert_fail@plt+0x104c>
   11c70:	mov	r3, #1
   11c74:	str	r3, [sp, #52]	; 0x34
   11c78:	ldr	r3, [pc, #3956]	; 12bf4 <__assert_fail@plt+0x1e78>
   11c7c:	mov	r7, #0
   11c80:	str	r3, [sp, #64]	; 0x40
   11c84:	b	11964 <__assert_fail@plt+0xbe8>
   11c88:	mov	r3, #1
   11c8c:	str	r3, [sp, #44]	; 0x2c
   11c90:	str	r3, [sp, #52]	; 0x34
   11c94:	str	r3, [sp, #28]
   11c98:	b	11c4c <__assert_fail@plt+0xed0>
   11c9c:	mov	r3, #0
   11ca0:	str	r3, [sp, #28]
   11ca4:	mov	r3, #1
   11ca8:	str	r3, [sp, #44]	; 0x2c
   11cac:	mov	r7, #0
   11cb0:	b	11964 <__assert_fail@plt+0xbe8>
   11cb4:	ldr	r3, [sp, #152]	; 0x98
   11cb8:	cmp	r3, #10
   11cbc:	beq	11d00 <__assert_fail@plt+0xf84>
   11cc0:	mov	r2, #5
   11cc4:	ldr	r1, [pc, #3884]	; 12bf8 <__assert_fail@plt+0x1e7c>
   11cc8:	mov	r0, #0
   11ccc:	bl	10bf0 <dcgettext@plt>
   11cd0:	ldr	r2, [pc, #3872]	; 12bf8 <__assert_fail@plt+0x1e7c>
   11cd4:	cmp	r0, r2
   11cd8:	str	r0, [sp, #164]	; 0xa4
   11cdc:	beq	12ce4 <__assert_fail@plt+0x1f68>
   11ce0:	mov	r2, #5
   11ce4:	ldr	r1, [pc, #3848]	; 12bf4 <__assert_fail@plt+0x1e78>
   11ce8:	mov	r0, #0
   11cec:	bl	10bf0 <dcgettext@plt>
   11cf0:	ldr	r2, [pc, #3836]	; 12bf4 <__assert_fail@plt+0x1e78>
   11cf4:	cmp	r0, r2
   11cf8:	str	r0, [sp, #168]	; 0xa8
   11cfc:	beq	12cd4 <__assert_fail@plt+0x1f58>
   11d00:	ldr	r7, [sp, #28]
   11d04:	cmp	r7, #0
   11d08:	movne	r7, #0
   11d0c:	bne	11d40 <__assert_fail@plt+0xfc4>
   11d10:	ldr	r3, [sp, #164]	; 0xa4
   11d14:	ldrb	r3, [r3]
   11d18:	cmp	r3, #0
   11d1c:	beq	12cf4 <__assert_fail@plt+0x1f78>
   11d20:	ldr	r2, [sp, #164]	; 0xa4
   11d24:	ldr	r1, [sp, #32]
   11d28:	cmp	fp, r7
   11d2c:	strbhi	r3, [r1, r7]
   11d30:	ldrb	r3, [r2, #1]!
   11d34:	add	r7, r7, #1
   11d38:	cmp	r3, #0
   11d3c:	bne	11d28 <__assert_fail@plt+0xfac>
   11d40:	ldr	r0, [sp, #168]	; 0xa8
   11d44:	bl	10cb0 <strlen@plt>
   11d48:	ldr	r3, [sp, #168]	; 0xa8
   11d4c:	str	r3, [sp, #64]	; 0x40
   11d50:	mov	r3, #1
   11d54:	str	r3, [sp, #44]	; 0x2c
   11d58:	str	r0, [sp, #52]	; 0x34
   11d5c:	b	11964 <__assert_fail@plt+0xbe8>
   11d60:	mov	r3, #1
   11d64:	str	r3, [sp, #44]	; 0x2c
   11d68:	str	r3, [sp, #52]	; 0x34
   11d6c:	str	r3, [sp, #28]
   11d70:	ldr	r3, [pc, #3716]	; 12bfc <__assert_fail@plt+0x1e80>
   11d74:	mov	r7, #0
   11d78:	str	r3, [sp, #64]	; 0x40
   11d7c:	mov	r3, #5
   11d80:	str	r3, [sp, #152]	; 0x98
   11d84:	b	11964 <__assert_fail@plt+0xbe8>
   11d88:	ldr	r3, [sp, #28]
   11d8c:	cmp	r3, #0
   11d90:	beq	12a90 <__assert_fail@plt+0x1d14>
   11d94:	ldr	r3, [sp, #28]
   11d98:	mov	r7, #0
   11d9c:	str	r3, [sp, #44]	; 0x2c
   11da0:	mov	r3, #1
   11da4:	str	r3, [sp, #52]	; 0x34
   11da8:	ldr	r3, [pc, #3660]	; 12bfc <__assert_fail@plt+0x1e80>
   11dac:	str	r3, [sp, #64]	; 0x40
   11db0:	b	11964 <__assert_fail@plt+0xbe8>
   11db4:	ldr	r3, [sp, #28]
   11db8:	cmp	r3, #0
   11dbc:	mov	r3, #1
   11dc0:	streq	r3, [sp, #44]	; 0x2c
   11dc4:	bne	11c48 <__assert_fail@plt+0xecc>
   11dc8:	cmp	fp, #0
   11dcc:	beq	12ac0 <__assert_fail@plt+0x1d44>
   11dd0:	ldr	r3, [sp, #32]
   11dd4:	mov	r2, #39	; 0x27
   11dd8:	mov	r7, #1
   11ddc:	strb	r2, [r3]
   11de0:	mov	r3, #0
   11de4:	str	r3, [sp, #28]
   11de8:	mov	r3, #1
   11dec:	str	r3, [sp, #52]	; 0x34
   11df0:	ldr	r3, [pc, #3580]	; 12bf4 <__assert_fail@plt+0x1e78>
   11df4:	str	r3, [sp, #64]	; 0x40
   11df8:	mov	r3, #2
   11dfc:	str	r3, [sp, #152]	; 0x98
   11e00:	b	11964 <__assert_fail@plt+0xbe8>
   11e04:	ldr	r3, [sp, #24]
   11e08:	cmn	r3, #1
   11e0c:	beq	12a24 <__assert_fail@plt+0x1ca8>
   11e10:	ldr	r3, [sp, #24]
   11e14:	subs	r3, r3, #1
   11e18:	movne	r3, #1
   11e1c:	cmp	r3, #0
   11e20:	bne	11e2c <__assert_fail@plt+0x10b0>
   11e24:	cmp	sl, #0
   11e28:	beq	12218 <__assert_fail@plt+0x149c>
   11e2c:	ldr	r3, [sp, #152]	; 0x98
   11e30:	mov	r5, #0
   11e34:	sub	r2, r3, #2
   11e38:	mov	r8, r5
   11e3c:	clz	r2, r2
   11e40:	lsr	r2, r2, #5
   11e44:	ldr	r3, [sp, #60]	; 0x3c
   11e48:	ldr	r1, [sp, #28]
   11e4c:	orr	r3, r2, r3
   11e50:	eor	r3, r3, #1
   11e54:	orr	r3, r1, r3
   11e58:	tst	r3, #255	; 0xff
   11e5c:	bne	12588 <__assert_fail@plt+0x180c>
   11e60:	cmp	r6, #0
   11e64:	bne	11fb4 <__assert_fail@plt+0x1238>
   11e68:	ldr	r3, [sp, #40]	; 0x28
   11e6c:	eor	r8, r8, #1
   11e70:	and	r8, r8, r3
   11e74:	add	sl, sl, #1
   11e78:	uxtb	r6, r8
   11e7c:	cmp	r6, #0
   11e80:	beq	11eb4 <__assert_fail@plt+0x1138>
   11e84:	cmp	fp, r7
   11e88:	movhi	r2, #39	; 0x27
   11e8c:	ldrhi	r3, [sp, #32]
   11e90:	strbhi	r2, [r3, r7]
   11e94:	add	r3, r7, #1
   11e98:	cmp	fp, r3
   11e9c:	movhi	r1, #39	; 0x27
   11ea0:	ldrhi	r2, [sp, #32]
   11ea4:	add	r7, r7, #2
   11ea8:	strbhi	r1, [r2, r3]
   11eac:	mov	r3, #0
   11eb0:	str	r3, [sp, #40]	; 0x28
   11eb4:	cmp	r7, fp
   11eb8:	ldrcc	r3, [sp, #32]
   11ebc:	strbcc	r4, [r3, r7]
   11ec0:	ldr	r3, [sp, #36]	; 0x24
   11ec4:	cmp	r5, #0
   11ec8:	moveq	r3, #0
   11ecc:	str	r3, [sp, #36]	; 0x24
   11ed0:	ldr	r3, [sp, #24]
   11ed4:	add	r7, r7, #1
   11ed8:	cmn	r3, #1
   11edc:	bne	11980 <__assert_fail@plt+0xc04>
   11ee0:	ldr	r3, [sp, #56]	; 0x38
   11ee4:	ldrb	r5, [r3, sl]
   11ee8:	adds	r5, r5, #0
   11eec:	movne	r5, #1
   11ef0:	cmp	r5, #0
   11ef4:	bne	11994 <__assert_fail@plt+0xc18>
   11ef8:	ldr	r3, [sp, #152]	; 0x98
   11efc:	ldr	r1, [sp, #28]
   11f00:	sub	r3, r3, #2
   11f04:	clz	r3, r3
   11f08:	lsr	r3, r3, #5
   11f0c:	and	r9, r1, r3
   11f10:	cmp	r7, #0
   11f14:	movne	r2, #0
   11f18:	andeq	r2, r9, #1
   11f1c:	cmp	r2, #0
   11f20:	bne	128fc <__assert_fail@plt+0x1b80>
   11f24:	eor	r2, r1, #1
   11f28:	ands	r3, r3, r2
   11f2c:	beq	12db8 <__assert_fail@plt+0x203c>
   11f30:	ldr	r2, [sp, #68]	; 0x44
   11f34:	cmp	r2, #0
   11f38:	beq	12da4 <__assert_fail@plt+0x2028>
   11f3c:	ldr	r3, [sp, #36]	; 0x24
   11f40:	cmp	r3, #0
   11f44:	bne	12d5c <__assert_fail@plt+0x1fe0>
   11f48:	ldr	r2, [sp, #72]	; 0x48
   11f4c:	clz	r3, fp
   11f50:	cmp	r2, #0
   11f54:	lsr	r3, r3, #5
   11f58:	moveq	r3, #0
   11f5c:	cmp	r3, #0
   11f60:	beq	12cfc <__assert_fail@plt+0x1f80>
   11f64:	str	r3, [sp, #68]	; 0x44
   11f68:	ldr	fp, [sp, #72]	; 0x48
   11f6c:	b	1191c <__assert_fail@plt+0xba0>
   11f70:	ldr	r3, [sp, #152]	; 0x98
   11f74:	cmp	r3, #2
   11f78:	beq	125cc <__assert_fail@plt+0x1850>
   11f7c:	ldr	r3, [sp, #44]	; 0x2c
   11f80:	ldr	r2, [sp, #28]
   11f84:	and	r2, r3, r2
   11f88:	ands	r2, r9, r2
   11f8c:	bne	125d8 <__assert_fail@plt+0x185c>
   11f90:	mov	r4, #92	; 0x5c
   11f94:	mov	r3, r4
   11f98:	ldr	r1, [sp, #44]	; 0x2c
   11f9c:	cmp	r1, #0
   11fa0:	moveq	r5, #0
   11fa4:	moveq	r8, r1
   11fa8:	beq	11e44 <__assert_fail@plt+0x10c8>
   11fac:	mov	r4, r3
   11fb0:	mov	r5, #0
   11fb4:	ldr	r3, [sp, #28]
   11fb8:	cmp	r3, #0
   11fbc:	bne	125c0 <__assert_fail@plt+0x1844>
   11fc0:	ldr	r3, [sp, #40]	; 0x28
   11fc4:	eor	r9, r3, #1
   11fc8:	and	r9, r9, r2
   11fcc:	ands	r9, r9, #255	; 0xff
   11fd0:	beq	12014 <__assert_fail@plt+0x1298>
   11fd4:	cmp	fp, r7
   11fd8:	movhi	r2, #39	; 0x27
   11fdc:	ldrhi	r3, [sp, #32]
   11fe0:	str	r9, [sp, #40]	; 0x28
   11fe4:	strbhi	r2, [r3, r7]
   11fe8:	add	r3, r7, #1
   11fec:	cmp	fp, r3
   11ff0:	movhi	r1, #36	; 0x24
   11ff4:	ldrhi	r2, [sp, #32]
   11ff8:	strbhi	r1, [r2, r3]
   11ffc:	add	r3, r7, #2
   12000:	cmp	fp, r3
   12004:	add	r7, r7, #3
   12008:	ldrhi	r2, [sp, #32]
   1200c:	movhi	r1, #39	; 0x27
   12010:	strbhi	r1, [r2, r3]
   12014:	cmp	fp, r7
   12018:	movhi	r2, #92	; 0x5c
   1201c:	ldrhi	r3, [sp, #32]
   12020:	add	sl, sl, #1
   12024:	strbhi	r2, [r3, r7]
   12028:	add	r7, r7, #1
   1202c:	b	11eb4 <__assert_fail@plt+0x1138>
   12030:	ldr	r3, [sp, #152]	; 0x98
   12034:	mov	r4, #11
   12038:	sub	r2, r3, #2
   1203c:	mov	r3, #118	; 0x76
   12040:	clz	r2, r2
   12044:	lsr	r2, r2, #5
   12048:	b	11f98 <__assert_fail@plt+0x121c>
   1204c:	mov	r4, #10
   12050:	mov	r3, #110	; 0x6e
   12054:	ldr	r2, [sp, #152]	; 0x98
   12058:	ldr	r1, [sp, #28]
   1205c:	sub	r2, r2, #2
   12060:	clz	r2, r2
   12064:	lsr	r2, r2, #5
   12068:	ands	r1, r1, r2
   1206c:	beq	11f98 <__assert_fail@plt+0x121c>
   12070:	ldr	sl, [sp, #32]
   12074:	mov	r8, fp
   12078:	mov	r2, r1
   1207c:	mov	r3, #2
   12080:	str	r3, [sp, #152]	; 0x98
   12084:	ldr	r9, [sp, #44]	; 0x2c
   12088:	ldr	r3, [sp, #152]	; 0x98
   1208c:	and	r9, r9, r2
   12090:	tst	r9, #255	; 0xff
   12094:	movne	r3, #4
   12098:	str	r3, [sp, #152]	; 0x98
   1209c:	ldr	r3, [sp, #156]	; 0x9c
   120a0:	mov	ip, #0
   120a4:	bic	r3, r3, #2
   120a8:	str	r3, [sp, #4]
   120ac:	ldr	r3, [sp, #168]	; 0xa8
   120b0:	ldr	r2, [sp, #56]	; 0x38
   120b4:	str	r3, [sp, #16]
   120b8:	ldr	r3, [sp, #164]	; 0xa4
   120bc:	mov	r1, r8
   120c0:	str	r3, [sp, #12]
   120c4:	ldr	r3, [sp, #152]	; 0x98
   120c8:	mov	r0, sl
   120cc:	str	r3, [sp]
   120d0:	str	ip, [sp, #8]
   120d4:	ldr	r3, [sp, #24]
   120d8:	bl	118c0 <__assert_fail@plt+0xb44>
   120dc:	mov	fp, r0
   120e0:	mov	r0, fp
   120e4:	add	sp, sp, #116	; 0x74
   120e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ec:	ldr	r3, [sp, #152]	; 0x98
   120f0:	mov	r4, #8
   120f4:	sub	r2, r3, #2
   120f8:	mov	r3, #98	; 0x62
   120fc:	clz	r2, r2
   12100:	lsr	r2, r2, #5
   12104:	b	11f98 <__assert_fail@plt+0x121c>
   12108:	ldr	r3, [sp, #152]	; 0x98
   1210c:	mov	r4, #7
   12110:	sub	r2, r3, #2
   12114:	mov	r3, #97	; 0x61
   12118:	clz	r2, r2
   1211c:	lsr	r2, r2, #5
   12120:	b	11f98 <__assert_fail@plt+0x121c>
   12124:	ldr	r3, [sp, #44]	; 0x2c
   12128:	cmp	r3, #0
   1212c:	beq	12910 <__assert_fail@plt+0x1b94>
   12130:	ldr	r3, [sp, #28]
   12134:	cmp	r3, #0
   12138:	bne	12be8 <__assert_fail@plt+0x1e6c>
   1213c:	ldr	r3, [sp, #152]	; 0x98
   12140:	sub	r2, r3, #2
   12144:	ldr	r3, [sp, #40]	; 0x28
   12148:	clz	r2, r2
   1214c:	eor	r3, r3, #1
   12150:	lsr	r2, r2, #5
   12154:	ands	r3, r2, r3
   12158:	moveq	r1, r7
   1215c:	beq	121a0 <__assert_fail@plt+0x1424>
   12160:	cmp	fp, r7
   12164:	movhi	r0, #39	; 0x27
   12168:	ldrhi	r1, [sp, #32]
   1216c:	str	r3, [sp, #40]	; 0x28
   12170:	strbhi	r0, [r1, r7]
   12174:	add	r1, r7, #1
   12178:	cmp	fp, r1
   1217c:	movhi	ip, #36	; 0x24
   12180:	ldrhi	r0, [sp, #32]
   12184:	strbhi	ip, [r0, r1]
   12188:	add	r1, r7, #2
   1218c:	cmp	fp, r1
   12190:	movhi	ip, #39	; 0x27
   12194:	ldrhi	r0, [sp, #32]
   12198:	strbhi	ip, [r0, r1]
   1219c:	add	r1, r7, #3
   121a0:	cmp	fp, r1
   121a4:	movhi	r0, #92	; 0x5c
   121a8:	ldrhi	r3, [sp, #32]
   121ac:	add	r7, r1, #1
   121b0:	strbhi	r0, [r3, r1]
   121b4:	cmp	r8, #0
   121b8:	beq	12afc <__assert_fail@plt+0x1d80>
   121bc:	ldr	r0, [sp, #24]
   121c0:	add	r3, sl, #1
   121c4:	cmp	r3, r0
   121c8:	bcs	12a38 <__assert_fail@plt+0x1cbc>
   121cc:	ldr	r0, [sp, #56]	; 0x38
   121d0:	ldrb	r3, [r0, r3]
   121d4:	sub	r3, r3, #48	; 0x30
   121d8:	cmp	r3, #9
   121dc:	bhi	12a38 <__assert_fail@plt+0x1cbc>
   121e0:	cmp	fp, r7
   121e4:	movhi	r3, #48	; 0x30
   121e8:	ldrhi	r0, [sp, #32]
   121ec:	ldr	r5, [sp, #28]
   121f0:	mov	r4, #48	; 0x30
   121f4:	strbhi	r3, [r0, r7]
   121f8:	add	r3, r1, #2
   121fc:	cmp	fp, r3
   12200:	movhi	r0, #48	; 0x30
   12204:	ldrhi	ip, [sp, #32]
   12208:	add	r7, r1, #3
   1220c:	strbhi	r0, [ip, r3]
   12210:	b	11e44 <__assert_fail@plt+0x10c8>
   12214:	mov	r5, #0
   12218:	ldr	r3, [sp, #152]	; 0x98
   1221c:	sub	r2, r3, #2
   12220:	ldr	r3, [sp, #28]
   12224:	clz	r2, r2
   12228:	lsr	r2, r2, #5
   1222c:	ands	r8, r3, r2
   12230:	beq	11e44 <__assert_fail@plt+0x10c8>
   12234:	mov	r3, r8
   12238:	mov	r2, r3
   1223c:	mov	r3, #2
   12240:	ldr	sl, [sp, #32]
   12244:	mov	r8, fp
   12248:	str	r3, [sp, #152]	; 0x98
   1224c:	b	12084 <__assert_fail@plt+0x1308>
   12250:	ldr	r3, [sp, #152]	; 0x98
   12254:	cmp	r3, #2
   12258:	beq	1297c <__assert_fail@plt+0x1c00>
   1225c:	cmp	r3, #5
   12260:	beq	1293c <__assert_fail@plt+0x1bc0>
   12264:	mov	r5, #0
   12268:	sub	r2, r3, #2
   1226c:	mov	r8, r5
   12270:	clz	r2, r2
   12274:	mov	r4, #63	; 0x3f
   12278:	lsr	r2, r2, #5
   1227c:	b	11e44 <__assert_fail@plt+0x10c8>
   12280:	ldr	r3, [sp, #152]	; 0x98
   12284:	cmp	r3, #2
   12288:	beq	1299c <__assert_fail@plt+0x1c20>
   1228c:	mov	r2, #0
   12290:	str	r5, [sp, #68]	; 0x44
   12294:	mov	r8, r2
   12298:	mov	r4, #39	; 0x27
   1229c:	b	11e44 <__assert_fail@plt+0x10c8>
   122a0:	mov	r4, #13
   122a4:	mov	r3, #114	; 0x72
   122a8:	b	12054 <__assert_fail@plt+0x12d8>
   122ac:	ldr	r3, [sp, #152]	; 0x98
   122b0:	mov	r8, #0
   122b4:	sub	r2, r3, #2
   122b8:	clz	r2, r2
   122bc:	lsr	r2, r2, #5
   122c0:	b	11e44 <__assert_fail@plt+0x10c8>
   122c4:	ldr	r3, [sp, #152]	; 0x98
   122c8:	mov	r4, #12
   122cc:	sub	r2, r3, #2
   122d0:	mov	r3, #102	; 0x66
   122d4:	clz	r2, r2
   122d8:	lsr	r2, r2, #5
   122dc:	b	11f98 <__assert_fail@plt+0x121c>
   122e0:	mov	r5, r6
   122e4:	b	12218 <__assert_fail@plt+0x149c>
   122e8:	ldr	r3, [sp, #152]	; 0x98
   122ec:	sub	r2, r3, #2
   122f0:	mov	r3, #116	; 0x74
   122f4:	clz	r2, r2
   122f8:	lsr	r2, r2, #5
   122fc:	b	11f98 <__assert_fail@plt+0x121c>
   12300:	ldr	r8, [sp, #76]	; 0x4c
   12304:	cmp	r8, #1
   12308:	bne	127b8 <__assert_fail@plt+0x1a3c>
   1230c:	bl	10c98 <__ctype_b_loc@plt>
   12310:	sxth	r3, r4
   12314:	mov	ip, r8
   12318:	lsl	r3, r3, #1
   1231c:	ldr	r2, [r0]
   12320:	ldrh	r3, [r2, r3]
   12324:	and	r3, r3, #16384	; 0x4000
   12328:	cmp	r3, #0
   1232c:	movne	r5, #1
   12330:	moveq	r5, #0
   12334:	moveq	r3, #1
   12338:	movne	r3, #0
   1233c:	ldr	r2, [sp, #44]	; 0x2c
   12340:	and	r3, r3, r2
   12344:	ands	r8, r3, #255	; 0xff
   12348:	bne	1264c <__assert_fail@plt+0x18d0>
   1234c:	ldr	r3, [sp, #152]	; 0x98
   12350:	sub	r2, r3, #2
   12354:	clz	r2, r2
   12358:	lsr	r2, r2, #5
   1235c:	b	11e44 <__assert_fail@plt+0x10c8>
   12360:	ldr	r3, [sp, #56]	; 0x38
   12364:	add	r3, r3, sl
   12368:	str	r3, [sp, #48]	; 0x30
   1236c:	ldr	r3, [sp, #48]	; 0x30
   12370:	mov	r6, #0
   12374:	ldrb	r4, [r3]
   12378:	cmp	r4, #126	; 0x7e
   1237c:	ldrls	pc, [pc, r4, lsl #2]
   12380:	b	12300 <__assert_fail@plt+0x1584>
   12384:	andeq	r2, r1, r4, lsr #2
   12388:	andeq	r2, r1, r0, lsl #6
   1238c:	andeq	r2, r1, r0, lsl #6
   12390:	andeq	r2, r1, r0, lsl #6
   12394:	andeq	r2, r1, r0, lsl #6
   12398:	andeq	r2, r1, r0, lsl #6
   1239c:	andeq	r2, r1, r0, lsl #6
   123a0:	andeq	r2, r1, r8, lsl #2
   123a4:	andeq	r2, r1, ip, ror #1
   123a8:	andeq	r2, r1, r0, lsl #11
   123ac:	andeq	r2, r1, ip, asr #32
   123b0:	andeq	r2, r1, r0, lsr r0
   123b4:	andeq	r2, r1, r4, asr #5
   123b8:	andeq	r2, r1, r0, lsr #5
   123bc:	andeq	r2, r1, r0, lsl #6
   123c0:	andeq	r2, r1, r0, lsl #6
   123c4:	andeq	r2, r1, r0, lsl #6
   123c8:	andeq	r2, r1, r0, lsl #6
   123cc:	andeq	r2, r1, r0, lsl #6
   123d0:	andeq	r2, r1, r0, lsl #6
   123d4:	andeq	r2, r1, r0, lsl #6
   123d8:	andeq	r2, r1, r0, lsl #6
   123dc:	andeq	r2, r1, r0, lsl #6
   123e0:	andeq	r2, r1, r0, lsl #6
   123e4:	andeq	r2, r1, r0, lsl #6
   123e8:	andeq	r2, r1, r0, lsl #6
   123ec:	andeq	r2, r1, r0, lsl #6
   123f0:	andeq	r2, r1, r0, lsl #6
   123f4:	andeq	r2, r1, r0, lsl #6
   123f8:	andeq	r2, r1, r0, lsl #6
   123fc:	andeq	r2, r1, r0, lsl #6
   12400:	andeq	r2, r1, r0, lsl #6
   12404:	andeq	r2, r1, r8, lsl r2
   12408:	andeq	r2, r1, r4, lsl r2
   1240c:	andeq	r2, r1, r4, lsl r2
   12410:	andeq	r1, r1, r4, lsr #28
   12414:	andeq	r2, r1, r4, lsl r2
   12418:	andeq	r2, r1, ip, lsr #5
   1241c:	andeq	r2, r1, r4, lsl r2
   12420:	andeq	r2, r1, r0, lsl #5
   12424:	andeq	r2, r1, r4, lsl r2
   12428:	andeq	r2, r1, r4, lsl r2
   1242c:	andeq	r2, r1, r4, lsl r2
   12430:	andeq	r2, r1, ip, lsr #5
   12434:	andeq	r2, r1, ip, lsr #5
   12438:	andeq	r2, r1, ip, lsr #5
   1243c:	andeq	r2, r1, ip, lsr #5
   12440:	andeq	r2, r1, ip, lsr #5
   12444:	andeq	r2, r1, ip, lsr #5
   12448:	andeq	r2, r1, ip, lsr #5
   1244c:	andeq	r2, r1, ip, lsr #5
   12450:	andeq	r2, r1, ip, lsr #5
   12454:	andeq	r2, r1, ip, lsr #5
   12458:	andeq	r2, r1, ip, lsr #5
   1245c:	andeq	r2, r1, ip, lsr #5
   12460:	andeq	r2, r1, ip, lsr #5
   12464:	andeq	r2, r1, ip, lsr #5
   12468:	andeq	r2, r1, ip, lsr #5
   1246c:	andeq	r2, r1, ip, lsr #5
   12470:	andeq	r2, r1, r4, lsl r2
   12474:	andeq	r2, r1, r4, lsl r2
   12478:	andeq	r2, r1, r4, lsl r2
   1247c:	andeq	r2, r1, r4, lsl r2
   12480:	andeq	r2, r1, r0, asr r2
   12484:	andeq	r2, r1, r0, lsl #6
   12488:	andeq	r2, r1, ip, lsr #5
   1248c:	andeq	r2, r1, ip, lsr #5
   12490:	andeq	r2, r1, ip, lsr #5
   12494:	andeq	r2, r1, ip, lsr #5
   12498:	andeq	r2, r1, ip, lsr #5
   1249c:	andeq	r2, r1, ip, lsr #5
   124a0:	andeq	r2, r1, ip, lsr #5
   124a4:	andeq	r2, r1, ip, lsr #5
   124a8:	andeq	r2, r1, ip, lsr #5
   124ac:	andeq	r2, r1, ip, lsr #5
   124b0:	andeq	r2, r1, ip, lsr #5
   124b4:	andeq	r2, r1, ip, lsr #5
   124b8:	andeq	r2, r1, ip, lsr #5
   124bc:	andeq	r2, r1, ip, lsr #5
   124c0:	andeq	r2, r1, ip, lsr #5
   124c4:	andeq	r2, r1, ip, lsr #5
   124c8:	andeq	r2, r1, ip, lsr #5
   124cc:	andeq	r2, r1, ip, lsr #5
   124d0:	andeq	r2, r1, ip, lsr #5
   124d4:	andeq	r2, r1, ip, lsr #5
   124d8:	andeq	r2, r1, ip, lsr #5
   124dc:	andeq	r2, r1, ip, lsr #5
   124e0:	andeq	r2, r1, ip, lsr #5
   124e4:	andeq	r2, r1, ip, lsr #5
   124e8:	andeq	r2, r1, ip, lsr #5
   124ec:	andeq	r2, r1, ip, lsr #5
   124f0:	andeq	r2, r1, r4, lsl r2
   124f4:	andeq	r1, r1, r0, ror pc
   124f8:	andeq	r2, r1, ip, lsr #5
   124fc:	andeq	r2, r1, r4, lsl r2
   12500:	andeq	r2, r1, ip, lsr #5
   12504:	andeq	r2, r1, r4, lsl r2
   12508:	andeq	r2, r1, ip, lsr #5
   1250c:	andeq	r2, r1, ip, lsr #5
   12510:	andeq	r2, r1, ip, lsr #5
   12514:	andeq	r2, r1, ip, lsr #5
   12518:	andeq	r2, r1, ip, lsr #5
   1251c:	andeq	r2, r1, ip, lsr #5
   12520:	andeq	r2, r1, ip, lsr #5
   12524:	andeq	r2, r1, ip, lsr #5
   12528:	andeq	r2, r1, ip, lsr #5
   1252c:	andeq	r2, r1, ip, lsr #5
   12530:	andeq	r2, r1, ip, lsr #5
   12534:	andeq	r2, r1, ip, lsr #5
   12538:	andeq	r2, r1, ip, lsr #5
   1253c:	andeq	r2, r1, ip, lsr #5
   12540:	andeq	r2, r1, ip, lsr #5
   12544:	andeq	r2, r1, ip, lsr #5
   12548:	andeq	r2, r1, ip, lsr #5
   1254c:	andeq	r2, r1, ip, lsr #5
   12550:	andeq	r2, r1, ip, lsr #5
   12554:	andeq	r2, r1, ip, lsr #5
   12558:	andeq	r2, r1, ip, lsr #5
   1255c:	andeq	r2, r1, ip, lsr #5
   12560:	andeq	r2, r1, ip, lsr #5
   12564:	andeq	r2, r1, ip, lsr #5
   12568:	andeq	r2, r1, ip, lsr #5
   1256c:	andeq	r2, r1, ip, lsr #5
   12570:	andeq	r1, r1, r4, lsl #28
   12574:	andeq	r2, r1, r4, lsl r2
   12578:	andeq	r1, r1, r4, lsl #28
   1257c:	andeq	r1, r1, r4, lsr #28
   12580:	mov	r3, #116	; 0x74
   12584:	b	12054 <__assert_fail@plt+0x12d8>
   12588:	ldr	r3, [sp, #160]	; 0xa0
   1258c:	cmp	r3, #0
   12590:	beq	11e60 <__assert_fail@plt+0x10e4>
   12594:	lsr	r3, r4, #5
   12598:	ldr	r0, [sp, #160]	; 0xa0
   1259c:	uxtb	r3, r3
   125a0:	and	r1, r4, #31
   125a4:	ldr	r0, [r0, r3, lsl #2]
   125a8:	lsr	r3, r0, r1
   125ac:	tst	r3, #1
   125b0:	beq	11e60 <__assert_fail@plt+0x10e4>
   125b4:	ldr	r3, [sp, #28]
   125b8:	cmp	r3, #0
   125bc:	beq	11fc0 <__assert_fail@plt+0x1244>
   125c0:	ldr	sl, [sp, #32]
   125c4:	mov	r8, fp
   125c8:	b	12084 <__assert_fail@plt+0x1308>
   125cc:	ldr	r3, [sp, #28]
   125d0:	cmp	r3, #0
   125d4:	bne	12b28 <__assert_fail@plt+0x1dac>
   125d8:	add	sl, sl, #1
   125dc:	ldr	r6, [sp, #40]	; 0x28
   125e0:	mov	r5, #0
   125e4:	mov	r4, #92	; 0x5c
   125e8:	b	11e7c <__assert_fail@plt+0x1100>
   125ec:	cmp	r9, r8
   125f0:	bne	12860 <__assert_fail@plt+0x1ae4>
   125f4:	ldr	r0, [sp, #100]	; 0x64
   125f8:	bl	10c08 <iswprint@plt>
   125fc:	add	r5, r5, r4
   12600:	cmp	r0, #0
   12604:	add	r0, sp, #104	; 0x68
   12608:	moveq	r6, #0
   1260c:	bl	10bd8 <mbsinit@plt>
   12610:	cmp	r0, #0
   12614:	beq	127f4 <__assert_fail@plt+0x1a78>
   12618:	mov	r2, r6
   1261c:	mov	ip, r5
   12620:	eor	r5, r2, #1
   12624:	ldr	r4, [sp, #80]	; 0x50
   12628:	ldr	r6, [sp, #84]	; 0x54
   1262c:	ldr	r7, [sp, #88]	; 0x58
   12630:	uxtb	r5, r5
   12634:	cmp	ip, #1
   12638:	bls	12b38 <__assert_fail@plt+0x1dbc>
   1263c:	ldr	r3, [sp, #44]	; 0x2c
   12640:	and	r8, r3, r5
   12644:	mov	r5, r2
   12648:	uxtb	r8, r8
   1264c:	add	r2, sl, ip
   12650:	ldr	r0, [sp, #48]	; 0x30
   12654:	mov	r1, #0
   12658:	str	r5, [sp, #48]	; 0x30
   1265c:	ldr	r9, [sp, #28]
   12660:	ldr	ip, [sp, #40]	; 0x28
   12664:	ldr	r3, [sp, #32]
   12668:	ldr	r5, [sp, #152]	; 0x98
   1266c:	b	12728 <__assert_fail@plt+0x19ac>
   12670:	cmp	r9, #0
   12674:	bne	12a4c <__assert_fail@plt+0x1cd0>
   12678:	eor	r1, ip, #1
   1267c:	cmp	r5, #2
   12680:	movne	r1, #0
   12684:	andeq	r1, r1, #1
   12688:	cmp	r1, #0
   1268c:	beq	126c4 <__assert_fail@plt+0x1948>
   12690:	cmp	fp, r7
   12694:	movhi	ip, #39	; 0x27
   12698:	strbhi	ip, [r3, r7]
   1269c:	add	ip, r7, #1
   126a0:	cmp	fp, ip
   126a4:	movhi	lr, #36	; 0x24
   126a8:	strbhi	lr, [r3, ip]
   126ac:	add	ip, r7, #2
   126b0:	cmp	fp, ip
   126b4:	movhi	lr, #39	; 0x27
   126b8:	strbhi	lr, [r3, ip]
   126bc:	add	r7, r7, #3
   126c0:	mov	ip, r1
   126c4:	cmp	fp, r7
   126c8:	movhi	r1, #92	; 0x5c
   126cc:	strbhi	r1, [r3, r7]
   126d0:	add	r1, r7, #1
   126d4:	cmp	fp, r1
   126d8:	lsrhi	lr, r4, #6
   126dc:	addhi	lr, lr, #48	; 0x30
   126e0:	strbhi	lr, [r3, r1]
   126e4:	add	lr, r7, #2
   126e8:	cmp	fp, lr
   126ec:	lsrhi	r1, r4, #3
   126f0:	andhi	r1, r1, #7
   126f4:	addhi	r1, r1, #48	; 0x30
   126f8:	add	sl, sl, #1
   126fc:	strbhi	r1, [r3, lr]
   12700:	and	r4, r4, #7
   12704:	cmp	r2, sl
   12708:	add	r4, r4, #48	; 0x30
   1270c:	add	r7, r7, #3
   12710:	bls	12a70 <__assert_fail@plt+0x1cf4>
   12714:	mov	r1, r8
   12718:	cmp	fp, r7
   1271c:	strbhi	r4, [r3, r7]
   12720:	ldrb	r4, [r0, #1]!
   12724:	add	r7, r7, #1
   12728:	cmp	r8, #0
   1272c:	bne	12670 <__assert_fail@plt+0x18f4>
   12730:	cmp	r6, #0
   12734:	bne	12784 <__assert_fail@plt+0x1a08>
   12738:	eor	r6, r1, #1
   1273c:	and	r6, r6, ip
   12740:	add	sl, sl, #1
   12744:	cmp	r2, sl
   12748:	uxtb	r6, r6
   1274c:	bls	127ac <__assert_fail@plt+0x1a30>
   12750:	cmp	r6, #0
   12754:	beq	12718 <__assert_fail@plt+0x199c>
   12758:	cmp	fp, r7
   1275c:	movhi	ip, #39	; 0x27
   12760:	strbhi	ip, [r3, r7]
   12764:	add	ip, r7, #1
   12768:	cmp	fp, ip
   1276c:	movhi	lr, #39	; 0x27
   12770:	strbhi	lr, [r3, ip]
   12774:	add	r7, r7, #2
   12778:	mov	r6, r8
   1277c:	mov	ip, r8
   12780:	b	12718 <__assert_fail@plt+0x199c>
   12784:	cmp	fp, r7
   12788:	eor	r6, r1, #1
   1278c:	movhi	lr, #92	; 0x5c
   12790:	and	r6, r6, ip
   12794:	add	sl, sl, #1
   12798:	strbhi	lr, [r3, r7]
   1279c:	cmp	r2, sl
   127a0:	add	r7, r7, #1
   127a4:	uxtb	r6, r6
   127a8:	bhi	12750 <__assert_fail@plt+0x19d4>
   127ac:	str	ip, [sp, #40]	; 0x28
   127b0:	ldr	r5, [sp, #48]	; 0x30
   127b4:	b	11e7c <__assert_fail@plt+0x1100>
   127b8:	ldr	r3, [sp, #24]
   127bc:	cmn	r3, #1
   127c0:	mov	r3, #0
   127c4:	str	r3, [sp, #104]	; 0x68
   127c8:	str	r3, [sp, #108]	; 0x6c
   127cc:	beq	12aec <__assert_fail@plt+0x1d70>
   127d0:	mov	r2, r5
   127d4:	mov	r3, #0
   127d8:	str	r7, [sp, #88]	; 0x58
   127dc:	ldr	r7, [sp, #152]	; 0x98
   127e0:	str	r5, [sp, #92]	; 0x5c
   127e4:	str	r6, [sp, #84]	; 0x54
   127e8:	mov	r5, r3
   127ec:	mov	r6, r2
   127f0:	str	r4, [sp, #80]	; 0x50
   127f4:	ldr	r3, [sp, #56]	; 0x38
   127f8:	add	r9, sl, r5
   127fc:	add	r8, r3, r9
   12800:	ldr	r3, [sp, #24]
   12804:	mov	r1, r8
   12808:	sub	r2, r3, r9
   1280c:	add	r0, sp, #100	; 0x64
   12810:	add	r3, sp, #104	; 0x68
   12814:	bl	14178 <__assert_fail@plt+0x33fc>
   12818:	subs	r4, r0, #0
   1281c:	beq	12bc4 <__assert_fail@plt+0x1e48>
   12820:	cmn	r4, #1
   12824:	beq	12ba4 <__assert_fail@plt+0x1e28>
   12828:	cmn	r4, #2
   1282c:	beq	12b44 <__assert_fail@plt+0x1dc8>
   12830:	ldr	r2, [sp, #28]
   12834:	cmp	r7, #2
   12838:	movne	r2, #0
   1283c:	andeq	r2, r2, #1
   12840:	cmp	r2, #0
   12844:	beq	125f4 <__assert_fail@plt+0x1878>
   12848:	cmp	r4, #1
   1284c:	beq	125f4 <__assert_fail@plt+0x1878>
   12850:	sub	r3, r4, #1
   12854:	add	r9, r3, r9
   12858:	ldr	r3, [sp, #56]	; 0x38
   1285c:	add	r9, r3, r9
   12860:	ldrb	r3, [r8, #1]!
   12864:	sub	r3, r3, #91	; 0x5b
   12868:	cmp	r3, #33	; 0x21
   1286c:	ldrls	pc, [pc, r3, lsl #2]
   12870:	b	125ec <__assert_fail@plt+0x1870>
   12874:	strdeq	r2, [r1], -ip
   12878:	strdeq	r2, [r1], -ip
   1287c:	andeq	r2, r1, ip, ror #11
   12880:	strdeq	r2, [r1], -ip
   12884:	andeq	r2, r1, ip, ror #11
   12888:	strdeq	r2, [r1], -ip
   1288c:	andeq	r2, r1, ip, ror #11
   12890:	andeq	r2, r1, ip, ror #11
   12894:	andeq	r2, r1, ip, ror #11
   12898:	andeq	r2, r1, ip, ror #11
   1289c:	andeq	r2, r1, ip, ror #11
   128a0:	andeq	r2, r1, ip, ror #11
   128a4:	andeq	r2, r1, ip, ror #11
   128a8:	andeq	r2, r1, ip, ror #11
   128ac:	andeq	r2, r1, ip, ror #11
   128b0:	andeq	r2, r1, ip, ror #11
   128b4:	andeq	r2, r1, ip, ror #11
   128b8:	andeq	r2, r1, ip, ror #11
   128bc:	andeq	r2, r1, ip, ror #11
   128c0:	andeq	r2, r1, ip, ror #11
   128c4:	andeq	r2, r1, ip, ror #11
   128c8:	andeq	r2, r1, ip, ror #11
   128cc:	andeq	r2, r1, ip, ror #11
   128d0:	andeq	r2, r1, ip, ror #11
   128d4:	andeq	r2, r1, ip, ror #11
   128d8:	andeq	r2, r1, ip, ror #11
   128dc:	andeq	r2, r1, ip, ror #11
   128e0:	andeq	r2, r1, ip, ror #11
   128e4:	andeq	r2, r1, ip, ror #11
   128e8:	andeq	r2, r1, ip, ror #11
   128ec:	andeq	r2, r1, ip, ror #11
   128f0:	andeq	r2, r1, ip, ror #11
   128f4:	andeq	r2, r1, ip, ror #11
   128f8:	strdeq	r2, [r1], -ip
   128fc:	mov	r3, #2
   12900:	ldr	sl, [sp, #32]
   12904:	mov	r8, fp
   12908:	str	r3, [sp, #152]	; 0x98
   1290c:	b	12084 <__assert_fail@plt+0x1308>
   12910:	ldr	r3, [sp, #156]	; 0x9c
   12914:	tst	r3, #1
   12918:	bne	12a44 <__assert_fail@plt+0x1cc8>
   1291c:	ldr	r3, [sp, #152]	; 0x98
   12920:	ldr	r4, [sp, #44]	; 0x2c
   12924:	sub	r2, r3, #2
   12928:	mov	r5, #0
   1292c:	clz	r2, r2
   12930:	mov	r8, r4
   12934:	lsr	r2, r2, #5
   12938:	b	11e44 <__assert_fail@plt+0x10c8>
   1293c:	ldr	r3, [sp, #156]	; 0x9c
   12940:	ands	r9, r3, #4
   12944:	beq	12a7c <__assert_fail@plt+0x1d00>
   12948:	ldr	r2, [sp, #24]
   1294c:	add	r3, sl, #2
   12950:	cmp	r3, r2
   12954:	bcs	12968 <__assert_fail@plt+0x1bec>
   12958:	ldr	r2, [sp, #48]	; 0x30
   1295c:	ldrb	r4, [r2, #1]
   12960:	cmp	r4, #63	; 0x3f
   12964:	beq	12c04 <__assert_fail@plt+0x1e88>
   12968:	mov	r2, #0
   1296c:	mov	r8, r2
   12970:	mov	r5, r2
   12974:	mov	r4, #63	; 0x3f
   12978:	b	11e44 <__assert_fail@plt+0x10c8>
   1297c:	ldr	r3, [sp, #28]
   12980:	cmp	r3, #0
   12984:	bne	12ca8 <__assert_fail@plt+0x1f2c>
   12988:	mov	r2, r5
   1298c:	mov	r8, r3
   12990:	mov	r5, #0
   12994:	mov	r4, #63	; 0x3f
   12998:	b	11e44 <__assert_fail@plt+0x10c8>
   1299c:	ldr	r3, [sp, #28]
   129a0:	cmp	r3, #0
   129a4:	bne	12ca8 <__assert_fail@plt+0x1f2c>
   129a8:	ldr	r2, [sp, #72]	; 0x48
   129ac:	adds	r3, fp, #0
   129b0:	movne	r3, #1
   129b4:	cmp	r2, #0
   129b8:	movne	r3, #0
   129bc:	cmp	r3, #0
   129c0:	strne	fp, [sp, #72]	; 0x48
   129c4:	movne	fp, #0
   129c8:	bne	12a04 <__assert_fail@plt+0x1c88>
   129cc:	cmp	fp, r7
   129d0:	movhi	r2, #39	; 0x27
   129d4:	ldrhi	r3, [sp, #32]
   129d8:	strbhi	r2, [r3, r7]
   129dc:	add	r3, r7, #1
   129e0:	cmp	fp, r3
   129e4:	movhi	r1, #92	; 0x5c
   129e8:	ldrhi	r2, [sp, #32]
   129ec:	strbhi	r1, [r2, r3]
   129f0:	add	r3, r7, #2
   129f4:	cmp	fp, r3
   129f8:	movhi	r1, #39	; 0x27
   129fc:	ldrhi	r2, [sp, #32]
   12a00:	strbhi	r1, [r2, r3]
   12a04:	ldr	r3, [sp, #28]
   12a08:	add	r7, r7, #3
   12a0c:	mov	r2, r5
   12a10:	mov	r8, r3
   12a14:	str	r5, [sp, #68]	; 0x44
   12a18:	str	r3, [sp, #40]	; 0x28
   12a1c:	mov	r4, #39	; 0x27
   12a20:	b	11e44 <__assert_fail@plt+0x10c8>
   12a24:	ldr	r3, [sp, #56]	; 0x38
   12a28:	ldrb	r3, [r3, #1]
   12a2c:	adds	r3, r3, #0
   12a30:	movne	r3, #1
   12a34:	b	11e1c <__assert_fail@plt+0x10a0>
   12a38:	ldr	r5, [sp, #28]
   12a3c:	mov	r4, #48	; 0x30
   12a40:	b	11e44 <__assert_fail@plt+0x10c8>
   12a44:	add	sl, sl, #1
   12a48:	b	11974 <__assert_fail@plt+0xbf8>
   12a4c:	mov	sl, r3
   12a50:	ldr	r3, [sp, #28]
   12a54:	mov	r8, fp
   12a58:	str	r3, [sp, #44]	; 0x2c
   12a5c:	ldr	r3, [sp, #152]	; 0x98
   12a60:	sub	r2, r3, #2
   12a64:	clz	r2, r2
   12a68:	lsr	r2, r2, #5
   12a6c:	b	12084 <__assert_fail@plt+0x1308>
   12a70:	str	ip, [sp, #40]	; 0x28
   12a74:	ldr	r5, [sp, #48]	; 0x30
   12a78:	b	11eb4 <__assert_fail@plt+0x1138>
   12a7c:	mov	r2, r9
   12a80:	mov	r8, r9
   12a84:	mov	r5, #0
   12a88:	mov	r4, #63	; 0x3f
   12a8c:	b	11e44 <__assert_fail@plt+0x10c8>
   12a90:	cmp	fp, #0
   12a94:	beq	12b0c <__assert_fail@plt+0x1d90>
   12a98:	ldr	r1, [sp, #32]
   12a9c:	mov	r3, #34	; 0x22
   12aa0:	mov	r2, #1
   12aa4:	strb	r3, [r1]
   12aa8:	ldr	r3, [pc, #332]	; 12bfc <__assert_fail@plt+0x1e80>
   12aac:	str	r2, [sp, #52]	; 0x34
   12ab0:	mov	r7, r2
   12ab4:	str	r2, [sp, #44]	; 0x2c
   12ab8:	str	r3, [sp, #64]	; 0x40
   12abc:	b	11964 <__assert_fail@plt+0xbe8>
   12ac0:	ldr	r3, [pc, #300]	; 12bf4 <__assert_fail@plt+0x1e78>
   12ac4:	str	r3, [sp, #64]	; 0x40
   12ac8:	mov	r3, #0
   12acc:	str	r3, [sp, #28]
   12ad0:	mov	r3, #1
   12ad4:	str	r3, [sp, #52]	; 0x34
   12ad8:	mov	r7, r3
   12adc:	mov	r3, #2
   12ae0:	str	r3, [sp, #152]	; 0x98
   12ae4:	b	11964 <__assert_fail@plt+0xbe8>
   12ae8:	bl	10d70 <abort@plt>
   12aec:	ldr	r0, [sp, #56]	; 0x38
   12af0:	bl	10cb0 <strlen@plt>
   12af4:	str	r0, [sp, #24]
   12af8:	b	127d0 <__assert_fail@plt+0x1a54>
   12afc:	mov	r5, r8
   12b00:	mov	r4, #48	; 0x30
   12b04:	ldr	r8, [sp, #44]	; 0x2c
   12b08:	b	11e44 <__assert_fail@plt+0x10c8>
   12b0c:	mov	r3, #1
   12b10:	str	r3, [sp, #52]	; 0x34
   12b14:	mov	r7, r3
   12b18:	str	r3, [sp, #44]	; 0x2c
   12b1c:	ldr	r3, [pc, #216]	; 12bfc <__assert_fail@plt+0x1e80>
   12b20:	str	r3, [sp, #64]	; 0x40
   12b24:	b	11964 <__assert_fail@plt+0xbe8>
   12b28:	ldr	sl, [sp, #32]
   12b2c:	mov	r8, fp
   12b30:	mov	r2, r3
   12b34:	b	12084 <__assert_fail@plt+0x1308>
   12b38:	mov	r3, r5
   12b3c:	mov	r5, r2
   12b40:	b	1233c <__assert_fail@plt+0x15c0>
   12b44:	ldr	r1, [sp, #24]
   12b48:	mov	r2, r5
   12b4c:	cmp	r1, r9
   12b50:	mov	ip, r5
   12b54:	ldr	r4, [sp, #80]	; 0x50
   12b58:	ldr	r5, [sp, #92]	; 0x5c
   12b5c:	ldr	r6, [sp, #84]	; 0x54
   12b60:	ldr	r7, [sp, #88]	; 0x58
   12b64:	bls	12b98 <__assert_fail@plt+0x1e1c>
   12b68:	ldrb	r3, [r8]
   12b6c:	cmp	r3, #0
   12b70:	bne	12b84 <__assert_fail@plt+0x1e08>
   12b74:	b	12b9c <__assert_fail@plt+0x1e20>
   12b78:	ldrb	r3, [r8, #1]!
   12b7c:	cmp	r3, #0
   12b80:	beq	12c9c <__assert_fail@plt+0x1f20>
   12b84:	add	r2, r2, #1
   12b88:	add	r3, sl, r2
   12b8c:	cmp	r1, r3
   12b90:	bhi	12b78 <__assert_fail@plt+0x1dfc>
   12b94:	mov	ip, r2
   12b98:	mov	r3, #0
   12b9c:	mov	r2, r3
   12ba0:	b	12634 <__assert_fail@plt+0x18b8>
   12ba4:	mov	r3, #0
   12ba8:	mov	ip, r5
   12bac:	ldr	r4, [sp, #80]	; 0x50
   12bb0:	ldr	r5, [sp, #92]	; 0x5c
   12bb4:	ldr	r6, [sp, #84]	; 0x54
   12bb8:	ldr	r7, [sp, #88]	; 0x58
   12bbc:	mov	r2, r3
   12bc0:	b	12634 <__assert_fail@plt+0x18b8>
   12bc4:	mov	r3, r6
   12bc8:	mov	ip, r5
   12bcc:	eor	r5, r3, #1
   12bd0:	mov	r2, r6
   12bd4:	ldr	r4, [sp, #80]	; 0x50
   12bd8:	ldr	r6, [sp, #84]	; 0x54
   12bdc:	ldr	r7, [sp, #88]	; 0x58
   12be0:	uxtb	r5, r5
   12be4:	b	12634 <__assert_fail@plt+0x18b8>
   12be8:	ldr	sl, [sp, #32]
   12bec:	mov	r8, fp
   12bf0:	b	12a58 <__assert_fail@plt+0x1cdc>
   12bf4:	andeq	r4, r1, ip, lsr #27
   12bf8:			; <UNDEFINED> instruction: 0x00014db0
   12bfc:	andeq	r4, r1, r8, lsr #27
   12c00:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12c04:	ldr	r2, [sp, #56]	; 0x38
   12c08:	ldrb	r1, [r2, r3]
   12c0c:	sub	r2, r1, #33	; 0x21
   12c10:	uxtb	r2, r2
   12c14:	cmp	r2, #29
   12c18:	bhi	12cb8 <__assert_fail@plt+0x1f3c>
   12c1c:	ldr	r0, [pc, #-36]	; 12c00 <__assert_fail@plt+0x1e84>
   12c20:	mov	ip, #1
   12c24:	ands	r2, r0, ip, lsl r2
   12c28:	beq	12cc8 <__assert_fail@plt+0x1f4c>
   12c2c:	ldr	r2, [sp, #28]
   12c30:	cmp	r2, #0
   12c34:	bne	12dc8 <__assert_fail@plt+0x204c>
   12c38:	cmp	fp, r7
   12c3c:	ldr	r8, [sp, #28]
   12c40:	ldrhi	r2, [sp, #32]
   12c44:	mov	sl, r3
   12c48:	mov	r5, r8
   12c4c:	strbhi	r4, [r2, r7]
   12c50:	add	r2, r7, #1
   12c54:	cmp	fp, r2
   12c58:	movhi	r0, #34	; 0x22
   12c5c:	ldrhi	ip, [sp, #32]
   12c60:	mov	r4, r1
   12c64:	strbhi	r0, [ip, r2]
   12c68:	add	r2, r7, #2
   12c6c:	cmp	fp, r2
   12c70:	movhi	r0, #34	; 0x22
   12c74:	ldrhi	ip, [sp, #32]
   12c78:	strbhi	r0, [ip, r2]
   12c7c:	add	r2, r7, #3
   12c80:	cmp	fp, r2
   12c84:	movhi	r0, #63	; 0x3f
   12c88:	ldrhi	ip, [sp, #32]
   12c8c:	add	r7, r7, #4
   12c90:	strbhi	r0, [ip, r2]
   12c94:	mov	r2, r8
   12c98:	b	11e44 <__assert_fail@plt+0x10c8>
   12c9c:	mov	ip, r2
   12ca0:	mov	r2, r3
   12ca4:	b	12634 <__assert_fail@plt+0x18b8>
   12ca8:	ldr	sl, [sp, #32]
   12cac:	mov	r8, fp
   12cb0:	ldr	r2, [sp, #28]
   12cb4:	b	12084 <__assert_fail@plt+0x1308>
   12cb8:	mov	r2, #0
   12cbc:	mov	r8, r2
   12cc0:	mov	r5, r2
   12cc4:	b	11e44 <__assert_fail@plt+0x10c8>
   12cc8:	mov	r8, r2
   12ccc:	mov	r5, #0
   12cd0:	b	11e44 <__assert_fail@plt+0x10c8>
   12cd4:	ldr	r1, [sp, #152]	; 0x98
   12cd8:	bl	117a0 <__assert_fail@plt+0xa24>
   12cdc:	str	r0, [sp, #168]	; 0xa8
   12ce0:	b	11d00 <__assert_fail@plt+0xf84>
   12ce4:	ldr	r1, [sp, #152]	; 0x98
   12ce8:	bl	117a0 <__assert_fail@plt+0xa24>
   12cec:	str	r0, [sp, #164]	; 0xa4
   12cf0:	b	11ce0 <__assert_fail@plt+0xf64>
   12cf4:	ldr	r7, [sp, #28]
   12cf8:	b	11d40 <__assert_fail@plt+0xfc4>
   12cfc:	ldr	sl, [sp, #32]
   12d00:	ldr	r2, [sp, #68]	; 0x44
   12d04:	mov	r8, fp
   12d08:	mov	fp, r7
   12d0c:	ldr	r3, [sp, #64]	; 0x40
   12d10:	cmp	r3, #0
   12d14:	moveq	r2, #0
   12d18:	andne	r2, r2, #1
   12d1c:	cmp	r2, #0
   12d20:	beq	12d4c <__assert_fail@plt+0x1fd0>
   12d24:	mov	r2, r3
   12d28:	ldrb	r3, [r3]
   12d2c:	cmp	r3, #0
   12d30:	beq	12d4c <__assert_fail@plt+0x1fd0>
   12d34:	cmp	r8, fp
   12d38:	strbhi	r3, [sl, fp]
   12d3c:	ldrb	r3, [r2, #1]!
   12d40:	add	fp, fp, #1
   12d44:	cmp	r3, #0
   12d48:	bne	12d34 <__assert_fail@plt+0x1fb8>
   12d4c:	cmp	r8, fp
   12d50:	movhi	r3, #0
   12d54:	strbhi	r3, [sl, fp]
   12d58:	b	120e0 <__assert_fail@plt+0x1364>
   12d5c:	ldr	r3, [sp, #168]	; 0xa8
   12d60:	ldr	sl, [sp, #32]
   12d64:	str	r3, [sp, #16]
   12d68:	ldr	r3, [sp, #164]	; 0xa4
   12d6c:	mov	ip, #5
   12d70:	str	r3, [sp, #12]
   12d74:	ldr	r3, [sp, #160]	; 0xa0
   12d78:	ldr	r2, [sp, #56]	; 0x38
   12d7c:	str	r3, [sp, #8]
   12d80:	ldr	r3, [sp, #156]	; 0x9c
   12d84:	ldr	r1, [sp, #72]	; 0x48
   12d88:	str	r3, [sp, #4]
   12d8c:	mov	r0, sl
   12d90:	ldr	r3, [sp, #24]
   12d94:	str	ip, [sp]
   12d98:	bl	118c0 <__assert_fail@plt+0xb44>
   12d9c:	mov	fp, r0
   12da0:	b	120e0 <__assert_fail@plt+0x1364>
   12da4:	mov	r8, fp
   12da8:	ldr	sl, [sp, #32]
   12dac:	mov	fp, r7
   12db0:	mov	r2, r3
   12db4:	b	12d0c <__assert_fail@plt+0x1f90>
   12db8:	mov	r8, fp
   12dbc:	ldr	sl, [sp, #32]
   12dc0:	mov	fp, r7
   12dc4:	b	12d0c <__assert_fail@plt+0x1f90>
   12dc8:	ldr	sl, [sp, #32]
   12dcc:	mov	r8, fp
   12dd0:	b	1209c <__assert_fail@plt+0x1320>
   12dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dd8:	sub	sp, sp, #52	; 0x34
   12ddc:	mov	r4, r0
   12de0:	mov	r5, r3
   12de4:	mov	sl, r1
   12de8:	mov	fp, r2
   12dec:	bl	10cc8 <__errno_location@plt>
   12df0:	ldr	r7, [pc, #412]	; 12f94 <__assert_fail@plt+0x2218>
   12df4:	cmn	r4, #-2147483647	; 0x80000001
   12df8:	ldr	r6, [r7]
   12dfc:	mov	r8, r0
   12e00:	movne	r0, #0
   12e04:	moveq	r0, #1
   12e08:	ldr	r3, [r8]
   12e0c:	orrs	r0, r0, r4, lsr #31
   12e10:	str	r3, [sp, #24]
   12e14:	bne	12f90 <__assert_fail@plt+0x2214>
   12e18:	ldr	r2, [r7, #4]
   12e1c:	cmp	r4, r2
   12e20:	blt	12e80 <__assert_fail@plt+0x2104>
   12e24:	add	r9, r7, #8
   12e28:	cmp	r6, r9
   12e2c:	str	r2, [sp, #44]	; 0x2c
   12e30:	beq	12f60 <__assert_fail@plt+0x21e4>
   12e34:	mov	r3, #8
   12e38:	sub	r2, r4, r2
   12e3c:	mov	r0, r6
   12e40:	str	r3, [sp]
   12e44:	add	r2, r2, #1
   12e48:	mvn	r3, #-2147483648	; 0x80000000
   12e4c:	add	r1, sp, #44	; 0x2c
   12e50:	bl	13bb0 <__assert_fail@plt+0x2e34>
   12e54:	mov	r6, r0
   12e58:	str	r0, [r7]
   12e5c:	ldr	r0, [r7, #4]
   12e60:	ldr	r2, [sp, #44]	; 0x2c
   12e64:	mov	r1, #0
   12e68:	sub	r2, r2, r0
   12e6c:	add	r0, r6, r0, lsl #3
   12e70:	lsl	r2, r2, #3
   12e74:	bl	10ce0 <memset@plt>
   12e78:	ldr	r3, [sp, #44]	; 0x2c
   12e7c:	str	r3, [r7, #4]
   12e80:	add	r3, r6, r4, lsl #3
   12e84:	ldr	r1, [r5, #4]
   12e88:	ldr	r7, [r3, #4]
   12e8c:	ldr	r9, [r6, r4, lsl #3]
   12e90:	ldr	r2, [r5, #40]	; 0x28
   12e94:	ldr	ip, [r5, #44]	; 0x2c
   12e98:	add	r0, r5, #8
   12e9c:	str	r3, [sp, #28]
   12ea0:	ldr	r3, [r5]
   12ea4:	orr	r1, r1, #1
   12ea8:	mov	lr, r0
   12eac:	str	r1, [sp, #32]
   12eb0:	str	r0, [sp, #36]	; 0x24
   12eb4:	str	r1, [sp, #4]
   12eb8:	str	r2, [sp, #12]
   12ebc:	str	r3, [sp]
   12ec0:	mov	r0, r7
   12ec4:	mov	r1, r9
   12ec8:	str	ip, [sp, #16]
   12ecc:	str	lr, [sp, #8]
   12ed0:	mov	r3, fp
   12ed4:	mov	r2, sl
   12ed8:	bl	118c0 <__assert_fail@plt+0xb44>
   12edc:	cmp	r9, r0
   12ee0:	bhi	12f4c <__assert_fail@plt+0x21d0>
   12ee4:	ldr	r3, [pc, #172]	; 12f98 <__assert_fail@plt+0x221c>
   12ee8:	add	r9, r0, #1
   12eec:	cmp	r7, r3
   12ef0:	str	r9, [r6, r4, lsl #3]
   12ef4:	beq	12f00 <__assert_fail@plt+0x2184>
   12ef8:	mov	r0, r7
   12efc:	bl	14054 <__assert_fail@plt+0x32d8>
   12f00:	mov	r0, r9
   12f04:	bl	13a4c <__assert_fail@plt+0x2cd0>
   12f08:	ldr	lr, [sp, #28]
   12f0c:	ldr	ip, [r5, #44]	; 0x2c
   12f10:	ldr	r4, [r5, #40]	; 0x28
   12f14:	mov	r3, fp
   12f18:	mov	r2, sl
   12f1c:	mov	r1, r9
   12f20:	str	r0, [lr, #4]
   12f24:	ldr	lr, [r5]
   12f28:	ldr	r5, [sp, #36]	; 0x24
   12f2c:	str	ip, [sp, #16]
   12f30:	str	r5, [sp, #8]
   12f34:	ldr	r5, [sp, #32]
   12f38:	str	r4, [sp, #12]
   12f3c:	str	r5, [sp, #4]
   12f40:	str	lr, [sp]
   12f44:	mov	r7, r0
   12f48:	bl	118c0 <__assert_fail@plt+0xb44>
   12f4c:	ldr	r3, [sp, #24]
   12f50:	mov	r0, r7
   12f54:	str	r3, [r8]
   12f58:	add	sp, sp, #52	; 0x34
   12f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f60:	mov	r3, #8
   12f64:	sub	r2, r4, r2
   12f68:	str	r3, [sp]
   12f6c:	add	r1, sp, #44	; 0x2c
   12f70:	add	r2, r2, #1
   12f74:	mvn	r3, #-2147483648	; 0x80000000
   12f78:	bl	13bb0 <__assert_fail@plt+0x2e34>
   12f7c:	mov	r6, r0
   12f80:	ldm	r9, {r0, r1}
   12f84:	str	r6, [r7]
   12f88:	stm	r6, {r0, r1}
   12f8c:	b	12e5c <__assert_fail@plt+0x20e0>
   12f90:	bl	10d70 <abort@plt>
   12f94:	ldrdeq	r6, [r2], -r8
   12f98:	andeq	r6, r2, ip, asr #2
   12f9c:	push	{r4, r5, r6, lr}
   12fa0:	mov	r5, r0
   12fa4:	bl	10cc8 <__errno_location@plt>
   12fa8:	cmp	r5, #0
   12fac:	mov	r1, #48	; 0x30
   12fb0:	mov	r4, r0
   12fb4:	ldr	r0, [pc, #16]	; 12fcc <__assert_fail@plt+0x2250>
   12fb8:	ldr	r6, [r4]
   12fbc:	movne	r0, r5
   12fc0:	bl	13eac <__assert_fail@plt+0x3130>
   12fc4:	str	r6, [r4]
   12fc8:	pop	{r4, r5, r6, pc}
   12fcc:	andeq	r6, r2, ip, asr #4
   12fd0:	ldr	r3, [pc, #12]	; 12fe4 <__assert_fail@plt+0x2268>
   12fd4:	cmp	r0, #0
   12fd8:	moveq	r0, r3
   12fdc:	ldr	r0, [r0]
   12fe0:	bx	lr
   12fe4:	andeq	r6, r2, ip, asr #4
   12fe8:	ldr	r3, [pc, #12]	; 12ffc <__assert_fail@plt+0x2280>
   12fec:	cmp	r0, #0
   12ff0:	moveq	r0, r3
   12ff4:	str	r1, [r0]
   12ff8:	bx	lr
   12ffc:	andeq	r6, r2, ip, asr #4
   13000:	ldr	r3, [pc, #52]	; 1303c <__assert_fail@plt+0x22c0>
   13004:	cmp	r0, #0
   13008:	moveq	r0, r3
   1300c:	add	r3, r0, #8
   13010:	push	{lr}		; (str lr, [sp, #-4]!)
   13014:	lsr	lr, r1, #5
   13018:	and	r1, r1, #31
   1301c:	ldr	ip, [r3, lr, lsl #2]
   13020:	lsr	r0, ip, r1
   13024:	eor	r2, r2, r0
   13028:	and	r2, r2, #1
   1302c:	and	r0, r0, #1
   13030:	eor	r1, ip, r2, lsl r1
   13034:	str	r1, [r3, lr, lsl #2]
   13038:	pop	{pc}		; (ldr pc, [sp], #4)
   1303c:	andeq	r6, r2, ip, asr #4
   13040:	ldr	r3, [pc, #16]	; 13058 <__assert_fail@plt+0x22dc>
   13044:	cmp	r0, #0
   13048:	movne	r3, r0
   1304c:	ldr	r0, [r3, #4]
   13050:	str	r1, [r3, #4]
   13054:	bx	lr
   13058:	andeq	r6, r2, ip, asr #4
   1305c:	ldr	r3, [pc, #44]	; 13090 <__assert_fail@plt+0x2314>
   13060:	cmp	r0, #0
   13064:	moveq	r0, r3
   13068:	mov	ip, #10
   1306c:	cmp	r2, #0
   13070:	cmpne	r1, #0
   13074:	str	ip, [r0]
   13078:	beq	13088 <__assert_fail@plt+0x230c>
   1307c:	str	r1, [r0, #40]	; 0x28
   13080:	str	r2, [r0, #44]	; 0x2c
   13084:	bx	lr
   13088:	push	{r4, lr}
   1308c:	bl	10d70 <abort@plt>
   13090:	andeq	r6, r2, ip, asr #4
   13094:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13098:	sub	sp, sp, #24
   1309c:	ldr	ip, [pc, #108]	; 13110 <__assert_fail@plt+0x2394>
   130a0:	ldr	r4, [sp, #56]	; 0x38
   130a4:	mov	r9, r2
   130a8:	cmp	r4, #0
   130ac:	moveq	r4, ip
   130b0:	mov	sl, r3
   130b4:	mov	r7, r0
   130b8:	mov	r8, r1
   130bc:	bl	10cc8 <__errno_location@plt>
   130c0:	ldr	r3, [r4, #44]	; 0x2c
   130c4:	mov	r1, r8
   130c8:	ldr	r6, [r0]
   130cc:	str	r3, [sp, #16]
   130d0:	ldr	r2, [r4, #40]	; 0x28
   130d4:	add	r3, r4, #8
   130d8:	str	r3, [sp, #8]
   130dc:	str	r2, [sp, #12]
   130e0:	ldr	r2, [r4, #4]
   130e4:	mov	r5, r0
   130e8:	str	r2, [sp, #4]
   130ec:	ldr	ip, [r4]
   130f0:	mov	r3, sl
   130f4:	mov	r2, r9
   130f8:	mov	r0, r7
   130fc:	str	ip, [sp]
   13100:	bl	118c0 <__assert_fail@plt+0xb44>
   13104:	str	r6, [r5]
   13108:	add	sp, sp, #24
   1310c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13110:	andeq	r6, r2, ip, asr #4
   13114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13118:	cmp	r3, #0
   1311c:	sub	sp, sp, #44	; 0x2c
   13120:	ldr	r4, [pc, #192]	; 131e8 <__assert_fail@plt+0x246c>
   13124:	mov	r6, r2
   13128:	movne	r4, r3
   1312c:	mov	r9, r1
   13130:	mov	r8, r0
   13134:	bl	10cc8 <__errno_location@plt>
   13138:	ldr	r3, [r4, #44]	; 0x2c
   1313c:	ldr	r5, [r4, #4]
   13140:	add	sl, r4, #8
   13144:	cmp	r6, #0
   13148:	orreq	r5, r5, #1
   1314c:	mov	r1, #0
   13150:	ldr	r2, [r0]
   13154:	str	r3, [sp, #16]
   13158:	ldr	r3, [r4, #40]	; 0x28
   1315c:	stmib	sp, {r5, sl}
   13160:	str	r3, [sp, #12]
   13164:	ldr	r3, [r4]
   13168:	mov	r7, r0
   1316c:	str	r2, [sp, #28]
   13170:	str	r3, [sp]
   13174:	mov	r2, r8
   13178:	mov	r3, r9
   1317c:	mov	r0, r1
   13180:	bl	118c0 <__assert_fail@plt+0xb44>
   13184:	add	r1, r0, #1
   13188:	mov	fp, r0
   1318c:	mov	r0, r1
   13190:	str	r1, [sp, #36]	; 0x24
   13194:	bl	13a4c <__assert_fail@plt+0x2cd0>
   13198:	ldr	r3, [r4, #44]	; 0x2c
   1319c:	mov	r2, r8
   131a0:	str	r3, [sp, #16]
   131a4:	ldr	r3, [r4, #40]	; 0x28
   131a8:	str	r5, [sp, #4]
   131ac:	str	r3, [sp, #12]
   131b0:	str	sl, [sp, #8]
   131b4:	ldr	ip, [r4]
   131b8:	ldr	r1, [sp, #36]	; 0x24
   131bc:	mov	r3, r9
   131c0:	str	ip, [sp]
   131c4:	str	r0, [sp, #32]
   131c8:	bl	118c0 <__assert_fail@plt+0xb44>
   131cc:	ldr	r2, [sp, #28]
   131d0:	cmp	r6, #0
   131d4:	str	r2, [r7]
   131d8:	ldr	r0, [sp, #32]
   131dc:	strne	fp, [r6]
   131e0:	add	sp, sp, #44	; 0x2c
   131e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e8:	andeq	r6, r2, ip, asr #4
   131ec:	mov	r3, r2
   131f0:	mov	r2, #0
   131f4:	b	13114 <__assert_fail@plt+0x2398>
   131f8:	push	{r4, r5, r6, r7, r8, lr}
   131fc:	ldr	r6, [pc, #116]	; 13278 <__assert_fail@plt+0x24fc>
   13200:	ldr	r3, [r6, #4]
   13204:	ldr	r7, [r6]
   13208:	cmp	r3, #1
   1320c:	movgt	r5, r7
   13210:	movgt	r4, #1
   13214:	ble	13234 <__assert_fail@plt+0x24b8>
   13218:	ldr	r0, [r5, #12]
   1321c:	bl	14054 <__assert_fail@plt+0x32d8>
   13220:	ldr	r3, [r6, #4]
   13224:	add	r4, r4, #1
   13228:	cmp	r3, r4
   1322c:	add	r5, r5, #8
   13230:	bgt	13218 <__assert_fail@plt+0x249c>
   13234:	ldr	r0, [r7, #4]
   13238:	ldr	r4, [pc, #60]	; 1327c <__assert_fail@plt+0x2500>
   1323c:	cmp	r0, r4
   13240:	beq	13254 <__assert_fail@plt+0x24d8>
   13244:	bl	14054 <__assert_fail@plt+0x32d8>
   13248:	mov	r3, #256	; 0x100
   1324c:	str	r4, [r6, #12]
   13250:	str	r3, [r6, #8]
   13254:	ldr	r4, [pc, #36]	; 13280 <__assert_fail@plt+0x2504>
   13258:	cmp	r7, r4
   1325c:	beq	1326c <__assert_fail@plt+0x24f0>
   13260:	mov	r0, r7
   13264:	bl	14054 <__assert_fail@plt+0x32d8>
   13268:	str	r4, [r6]
   1326c:	mov	r3, #1
   13270:	str	r3, [r6, #4]
   13274:	pop	{r4, r5, r6, r7, r8, pc}
   13278:	ldrdeq	r6, [r2], -r8
   1327c:	andeq	r6, r2, ip, asr #2
   13280:	andeq	r6, r2, r0, ror #1
   13284:	ldr	r3, [pc, #4]	; 13290 <__assert_fail@plt+0x2514>
   13288:	mvn	r2, #0
   1328c:	b	12dd4 <__assert_fail@plt+0x2058>
   13290:	andeq	r6, r2, ip, asr #4
   13294:	ldr	r3, [pc]	; 1329c <__assert_fail@plt+0x2520>
   13298:	b	12dd4 <__assert_fail@plt+0x2058>
   1329c:	andeq	r6, r2, ip, asr #4
   132a0:	mov	r1, r0
   132a4:	ldr	r3, [pc, #8]	; 132b4 <__assert_fail@plt+0x2538>
   132a8:	mvn	r2, #0
   132ac:	mov	r0, #0
   132b0:	b	12dd4 <__assert_fail@plt+0x2058>
   132b4:	andeq	r6, r2, ip, asr #4
   132b8:	mov	r2, r1
   132bc:	ldr	r3, [pc, #8]	; 132cc <__assert_fail@plt+0x2550>
   132c0:	mov	r1, r0
   132c4:	mov	r0, #0
   132c8:	b	12dd4 <__assert_fail@plt+0x2058>
   132cc:	andeq	r6, r2, ip, asr #4
   132d0:	push	{r4, r5, lr}
   132d4:	sub	sp, sp, #52	; 0x34
   132d8:	mov	r5, r2
   132dc:	mov	r4, r0
   132e0:	mov	r0, sp
   132e4:	bl	11770 <__assert_fail@plt+0x9f4>
   132e8:	mov	r3, sp
   132ec:	mov	r1, r5
   132f0:	mov	r0, r4
   132f4:	mvn	r2, #0
   132f8:	bl	12dd4 <__assert_fail@plt+0x2058>
   132fc:	add	sp, sp, #52	; 0x34
   13300:	pop	{r4, r5, pc}
   13304:	push	{r4, r5, r6, lr}
   13308:	sub	sp, sp, #48	; 0x30
   1330c:	mov	r5, r2
   13310:	mov	r6, r3
   13314:	mov	r4, r0
   13318:	mov	r0, sp
   1331c:	bl	11770 <__assert_fail@plt+0x9f4>
   13320:	mov	r3, sp
   13324:	mov	r2, r6
   13328:	mov	r1, r5
   1332c:	mov	r0, r4
   13330:	bl	12dd4 <__assert_fail@plt+0x2058>
   13334:	add	sp, sp, #48	; 0x30
   13338:	pop	{r4, r5, r6, pc}
   1333c:	mov	r2, r1
   13340:	mov	r1, r0
   13344:	mov	r0, #0
   13348:	b	132d0 <__assert_fail@plt+0x2554>
   1334c:	mov	r3, r2
   13350:	mov	r2, r1
   13354:	mov	r1, r0
   13358:	mov	r0, #0
   1335c:	b	13304 <__assert_fail@plt+0x2588>
   13360:	push	{r4, r5, r6, r7, r8, lr}
   13364:	mov	r7, r0
   13368:	ldr	lr, [pc, #100]	; 133d4 <__assert_fail@plt+0x2658>
   1336c:	mov	r8, r1
   13370:	mov	r4, r2
   13374:	ldm	lr!, {r0, r1, r2, r3}
   13378:	sub	sp, sp, #48	; 0x30
   1337c:	mov	ip, sp
   13380:	lsr	r5, r4, #5
   13384:	stmia	ip!, {r0, r1, r2, r3}
   13388:	add	r6, sp, #8
   1338c:	ldm	lr!, {r0, r1, r2, r3}
   13390:	and	r4, r4, #31
   13394:	stmia	ip!, {r0, r1, r2, r3}
   13398:	ldm	lr, {r0, r1, r2, r3}
   1339c:	stm	ip, {r0, r1, r2, r3}
   133a0:	mov	r2, r8
   133a4:	ldr	lr, [r6, r5, lsl #2]
   133a8:	mov	r1, r7
   133ac:	mov	r3, sp
   133b0:	lsr	ip, lr, r4
   133b4:	eor	ip, ip, #1
   133b8:	and	ip, ip, #1
   133bc:	mov	r0, #0
   133c0:	eor	r4, lr, ip, lsl r4
   133c4:	str	r4, [r6, r5, lsl #2]
   133c8:	bl	12dd4 <__assert_fail@plt+0x2058>
   133cc:	add	sp, sp, #48	; 0x30
   133d0:	pop	{r4, r5, r6, r7, r8, pc}
   133d4:	andeq	r6, r2, ip, asr #4
   133d8:	mov	r2, r1
   133dc:	mvn	r1, #0
   133e0:	b	13360 <__assert_fail@plt+0x25e4>
   133e4:	mov	r2, #58	; 0x3a
   133e8:	mvn	r1, #0
   133ec:	b	13360 <__assert_fail@plt+0x25e4>
   133f0:	mov	r2, #58	; 0x3a
   133f4:	b	13360 <__assert_fail@plt+0x25e4>
   133f8:	push	{r4, r5, r6, r7, lr}
   133fc:	sub	sp, sp, #100	; 0x64
   13400:	mov	r6, r0
   13404:	mov	r0, sp
   13408:	mov	r7, r2
   1340c:	bl	11770 <__assert_fail@plt+0x9f4>
   13410:	mov	ip, sp
   13414:	add	lr, sp, #48	; 0x30
   13418:	ldm	ip!, {r0, r1, r2, r3}
   1341c:	stmia	lr!, {r0, r1, r2, r3}
   13420:	ldm	ip!, {r0, r1, r2, r3}
   13424:	ldr	r5, [sp, #60]	; 0x3c
   13428:	stmia	lr!, {r0, r1, r2, r3}
   1342c:	mvn	r4, r5
   13430:	ldm	ip, {r0, r1, r2, r3}
   13434:	and	ip, r4, #67108864	; 0x4000000
   13438:	eor	ip, ip, r5
   1343c:	str	ip, [sp, #60]	; 0x3c
   13440:	stm	lr, {r0, r1, r2, r3}
   13444:	mov	r1, r7
   13448:	mov	r0, r6
   1344c:	add	r3, sp, #48	; 0x30
   13450:	mvn	r2, #0
   13454:	bl	12dd4 <__assert_fail@plt+0x2058>
   13458:	add	sp, sp, #100	; 0x64
   1345c:	pop	{r4, r5, r6, r7, pc}
   13460:	push	{r4, r5, r6, r7, r8, lr}
   13464:	mov	r5, r1
   13468:	ldr	lr, [pc, #100]	; 134d4 <__assert_fail@plt+0x2758>
   1346c:	mov	r4, r2
   13470:	mov	r7, r0
   13474:	mov	r8, r3
   13478:	ldm	lr!, {r0, r1, r2, r3}
   1347c:	sub	sp, sp, #48	; 0x30
   13480:	mov	ip, sp
   13484:	mov	r6, #10
   13488:	stmia	ip!, {r0, r1, r2, r3}
   1348c:	cmp	r4, #0
   13490:	cmpne	r5, #0
   13494:	ldm	lr!, {r0, r1, r2, r3}
   13498:	str	r6, [sp]
   1349c:	stmia	ip!, {r0, r1, r2, r3}
   134a0:	ldm	lr, {r0, r1, r2, r3}
   134a4:	stm	ip, {r0, r1, r2, r3}
   134a8:	beq	134d0 <__assert_fail@plt+0x2754>
   134ac:	mov	r3, sp
   134b0:	mov	r1, r8
   134b4:	mov	r0, r7
   134b8:	ldr	r2, [sp, #72]	; 0x48
   134bc:	str	r5, [sp, #40]	; 0x28
   134c0:	str	r4, [sp, #44]	; 0x2c
   134c4:	bl	12dd4 <__assert_fail@plt+0x2058>
   134c8:	add	sp, sp, #48	; 0x30
   134cc:	pop	{r4, r5, r6, r7, r8, pc}
   134d0:	bl	10d70 <abort@plt>
   134d4:	andeq	r6, r2, ip, asr #4
   134d8:	push	{lr}		; (str lr, [sp, #-4]!)
   134dc:	sub	sp, sp, #12
   134e0:	mvn	ip, #0
   134e4:	str	ip, [sp]
   134e8:	bl	13460 <__assert_fail@plt+0x26e4>
   134ec:	add	sp, sp, #12
   134f0:	pop	{pc}		; (ldr pc, [sp], #4)
   134f4:	push	{lr}		; (str lr, [sp, #-4]!)
   134f8:	sub	sp, sp, #12
   134fc:	mvn	ip, #0
   13500:	mov	r3, r2
   13504:	str	ip, [sp]
   13508:	mov	r2, r1
   1350c:	mov	r1, r0
   13510:	mov	r0, #0
   13514:	bl	13460 <__assert_fail@plt+0x26e4>
   13518:	add	sp, sp, #12
   1351c:	pop	{pc}		; (ldr pc, [sp], #4)
   13520:	push	{lr}		; (str lr, [sp, #-4]!)
   13524:	sub	sp, sp, #12
   13528:	str	r3, [sp]
   1352c:	mov	r3, r2
   13530:	mov	r2, r1
   13534:	mov	r1, r0
   13538:	mov	r0, #0
   1353c:	bl	13460 <__assert_fail@plt+0x26e4>
   13540:	add	sp, sp, #12
   13544:	pop	{pc}		; (ldr pc, [sp], #4)
   13548:	ldr	r3, [pc]	; 13550 <__assert_fail@plt+0x27d4>
   1354c:	b	12dd4 <__assert_fail@plt+0x2058>
   13550:	andeq	r6, r2, r8, ror #1
   13554:	mov	r2, r1
   13558:	ldr	r3, [pc, #8]	; 13568 <__assert_fail@plt+0x27ec>
   1355c:	mov	r1, r0
   13560:	mov	r0, #0
   13564:	b	12dd4 <__assert_fail@plt+0x2058>
   13568:	andeq	r6, r2, r8, ror #1
   1356c:	ldr	r3, [pc, #4]	; 13578 <__assert_fail@plt+0x27fc>
   13570:	mvn	r2, #0
   13574:	b	12dd4 <__assert_fail@plt+0x2058>
   13578:	andeq	r6, r2, r8, ror #1
   1357c:	mov	r1, r0
   13580:	ldr	r3, [pc, #8]	; 13590 <__assert_fail@plt+0x2814>
   13584:	mvn	r2, #0
   13588:	mov	r0, #0
   1358c:	b	12dd4 <__assert_fail@plt+0x2058>
   13590:	andeq	r6, r2, r8, ror #1
   13594:	push	{r4, r5, r6, lr}
   13598:	sub	sp, sp, #32
   1359c:	cmp	r1, #0
   135a0:	mov	r4, r0
   135a4:	ldr	r5, [sp, #48]	; 0x30
   135a8:	ldr	r6, [sp, #52]	; 0x34
   135ac:	beq	13858 <__assert_fail@plt+0x2adc>
   135b0:	str	r3, [sp]
   135b4:	mov	r3, r2
   135b8:	mov	r2, r1
   135bc:	ldr	r1, [pc, #684]	; 13870 <__assert_fail@plt+0x2af4>
   135c0:	bl	10cbc <fprintf@plt>
   135c4:	mov	r2, #5
   135c8:	ldr	r1, [pc, #676]	; 13874 <__assert_fail@plt+0x2af8>
   135cc:	mov	r0, #0
   135d0:	bl	10bf0 <dcgettext@plt>
   135d4:	ldr	r3, [pc, #668]	; 13878 <__assert_fail@plt+0x2afc>
   135d8:	ldr	r1, [pc, #668]	; 1387c <__assert_fail@plt+0x2b00>
   135dc:	mov	r2, r0
   135e0:	mov	r0, r4
   135e4:	bl	10cbc <fprintf@plt>
   135e8:	mov	r1, r4
   135ec:	mov	r0, #10
   135f0:	bl	10d34 <fputc@plt>
   135f4:	mov	r2, #5
   135f8:	ldr	r1, [pc, #640]	; 13880 <__assert_fail@plt+0x2b04>
   135fc:	mov	r0, #0
   13600:	bl	10bf0 <dcgettext@plt>
   13604:	ldr	r2, [pc, #632]	; 13884 <__assert_fail@plt+0x2b08>
   13608:	mov	r1, r0
   1360c:	mov	r0, r4
   13610:	bl	10cbc <fprintf@plt>
   13614:	mov	r1, r4
   13618:	mov	r0, #10
   1361c:	bl	10d34 <fputc@plt>
   13620:	cmp	r6, #9
   13624:	ldrls	pc, [pc, r6, lsl #2]
   13628:	b	13864 <__assert_fail@plt+0x2ae8>
   1362c:	andeq	r3, r1, r0, lsr #13
   13630:	andeq	r3, r1, r8, lsr #13
   13634:	ldrdeq	r3, [r1], -r0
   13638:	strdeq	r3, [r1], -r8
   1363c:	andeq	r3, r1, r8, lsr #14
   13640:	andeq	r3, r1, r0, ror #14
   13644:	muleq	r1, r0, r7
   13648:	andeq	r3, r1, r8, asr #15
   1364c:	andeq	r3, r1, ip, lsl #16
   13650:	andeq	r3, r1, r4, asr r6
   13654:	ldr	r1, [pc, #556]	; 13888 <__assert_fail@plt+0x2b0c>
   13658:	mov	r2, #5
   1365c:	mov	r0, #0
   13660:	bl	10bf0 <dcgettext@plt>
   13664:	add	r1, r5, #24
   13668:	ldm	r5, {r2, r3}
   1366c:	ldm	r1, {r1, ip, lr}
   13670:	str	lr, [sp, #24]
   13674:	ldr	r6, [r5, #20]
   13678:	str	ip, [sp, #20]
   1367c:	ldr	lr, [r5, #16]
   13680:	str	r1, [sp, #16]
   13684:	ldr	r1, [r5, #8]
   13688:	ldr	ip, [r5, #12]
   1368c:	str	r6, [sp, #12]
   13690:	stm	sp, {r1, ip, lr}
   13694:	mov	r1, r0
   13698:	mov	r0, r4
   1369c:	bl	10cbc <fprintf@plt>
   136a0:	add	sp, sp, #32
   136a4:	pop	{r4, r5, r6, pc}
   136a8:	mov	r2, #5
   136ac:	ldr	r1, [pc, #472]	; 1388c <__assert_fail@plt+0x2b10>
   136b0:	mov	r0, #0
   136b4:	bl	10bf0 <dcgettext@plt>
   136b8:	ldr	r2, [r5]
   136bc:	mov	r1, r0
   136c0:	mov	r0, r4
   136c4:	add	sp, sp, #32
   136c8:	pop	{r4, r5, r6, lr}
   136cc:	b	10cbc <fprintf@plt>
   136d0:	mov	r2, #5
   136d4:	ldr	r1, [pc, #436]	; 13890 <__assert_fail@plt+0x2b14>
   136d8:	mov	r0, #0
   136dc:	bl	10bf0 <dcgettext@plt>
   136e0:	ldm	r5, {r2, r3}
   136e4:	mov	r1, r0
   136e8:	mov	r0, r4
   136ec:	add	sp, sp, #32
   136f0:	pop	{r4, r5, r6, lr}
   136f4:	b	10cbc <fprintf@plt>
   136f8:	mov	r2, #5
   136fc:	ldr	r1, [pc, #400]	; 13894 <__assert_fail@plt+0x2b18>
   13700:	mov	r0, #0
   13704:	bl	10bf0 <dcgettext@plt>
   13708:	ldr	r1, [r5, #8]
   1370c:	ldm	r5, {r2, r3}
   13710:	str	r1, [sp, #48]	; 0x30
   13714:	mov	r1, r0
   13718:	mov	r0, r4
   1371c:	add	sp, sp, #32
   13720:	pop	{r4, r5, r6, lr}
   13724:	b	10cbc <fprintf@plt>
   13728:	mov	r2, #5
   1372c:	ldr	r1, [pc, #356]	; 13898 <__assert_fail@plt+0x2b1c>
   13730:	mov	r0, #0
   13734:	bl	10bf0 <dcgettext@plt>
   13738:	ldr	r1, [r5, #8]
   1373c:	ldr	ip, [r5, #12]
   13740:	ldm	r5, {r2, r3}
   13744:	str	r1, [sp, #48]	; 0x30
   13748:	str	ip, [sp, #52]	; 0x34
   1374c:	mov	r1, r0
   13750:	mov	r0, r4
   13754:	add	sp, sp, #32
   13758:	pop	{r4, r5, r6, lr}
   1375c:	b	10cbc <fprintf@plt>
   13760:	mov	r2, #5
   13764:	ldr	r1, [pc, #304]	; 1389c <__assert_fail@plt+0x2b20>
   13768:	mov	r0, #0
   1376c:	bl	10bf0 <dcgettext@plt>
   13770:	add	r1, r5, #8
   13774:	ldm	r5, {r2, r3}
   13778:	ldm	r1, {r1, ip, lr}
   1377c:	stm	sp, {r1, ip, lr}
   13780:	mov	r1, r0
   13784:	mov	r0, r4
   13788:	bl	10cbc <fprintf@plt>
   1378c:	b	136a0 <__assert_fail@plt+0x2924>
   13790:	mov	r2, #5
   13794:	ldr	r1, [pc, #260]	; 138a0 <__assert_fail@plt+0x2b24>
   13798:	mov	r0, #0
   1379c:	bl	10bf0 <dcgettext@plt>
   137a0:	add	r1, r5, #8
   137a4:	ldr	r6, [r5, #20]
   137a8:	ldm	r1, {r1, ip, lr}
   137ac:	ldm	r5, {r2, r3}
   137b0:	str	r6, [sp, #12]
   137b4:	stm	sp, {r1, ip, lr}
   137b8:	mov	r1, r0
   137bc:	mov	r0, r4
   137c0:	bl	10cbc <fprintf@plt>
   137c4:	b	136a0 <__assert_fail@plt+0x2924>
   137c8:	mov	r2, #5
   137cc:	ldr	r1, [pc, #208]	; 138a4 <__assert_fail@plt+0x2b28>
   137d0:	mov	r0, #0
   137d4:	bl	10bf0 <dcgettext@plt>
   137d8:	ldr	r1, [r5, #24]
   137dc:	ldm	r5, {r2, r3}
   137e0:	ldr	r6, [r5, #20]
   137e4:	ldr	lr, [r5, #16]
   137e8:	str	r1, [sp, #16]
   137ec:	ldr	r1, [r5, #8]
   137f0:	ldr	ip, [r5, #12]
   137f4:	str	r6, [sp, #12]
   137f8:	stm	sp, {r1, ip, lr}
   137fc:	mov	r1, r0
   13800:	mov	r0, r4
   13804:	bl	10cbc <fprintf@plt>
   13808:	b	136a0 <__assert_fail@plt+0x2924>
   1380c:	mov	r2, #5
   13810:	ldr	r1, [pc, #144]	; 138a8 <__assert_fail@plt+0x2b2c>
   13814:	mov	r0, #0
   13818:	bl	10bf0 <dcgettext@plt>
   1381c:	ldr	ip, [r5, #28]
   13820:	ldr	r1, [r5, #24]
   13824:	ldm	r5, {r2, r3}
   13828:	ldr	r6, [r5, #20]
   1382c:	str	ip, [sp, #20]
   13830:	ldr	lr, [r5, #16]
   13834:	str	r1, [sp, #16]
   13838:	ldr	r1, [r5, #8]
   1383c:	ldr	ip, [r5, #12]
   13840:	str	r6, [sp, #12]
   13844:	stm	sp, {r1, ip, lr}
   13848:	mov	r1, r0
   1384c:	mov	r0, r4
   13850:	bl	10cbc <fprintf@plt>
   13854:	b	136a0 <__assert_fail@plt+0x2924>
   13858:	ldr	r1, [pc, #76]	; 138ac <__assert_fail@plt+0x2b30>
   1385c:	bl	10cbc <fprintf@plt>
   13860:	b	135c4 <__assert_fail@plt+0x2848>
   13864:	mov	r2, #5
   13868:	ldr	r1, [pc, #64]	; 138b0 <__assert_fail@plt+0x2b34>
   1386c:	b	1365c <__assert_fail@plt+0x28e0>
   13870:	andeq	r4, r1, ip, lsl lr
   13874:	andeq	r4, r1, r0, lsr lr
   13878:	andeq	r0, r0, r6, ror #15
   1387c:	strdeq	r5, [r1], -r0
   13880:	andeq	r4, r1, r4, lsr lr
   13884:	andeq	r4, r1, r0, ror #29
   13888:	andeq	r5, r1, r0, lsl r0
   1388c:	andeq	r4, r1, r4, lsl #30
   13890:	andeq	r4, r1, r4, lsl pc
   13894:	andeq	r4, r1, ip, lsr #30
   13898:	andeq	r4, r1, r8, asr #30
   1389c:	andeq	r4, r1, r8, ror #30
   138a0:	andeq	r4, r1, ip, lsl #31
   138a4:			; <UNDEFINED> instruction: 0x00014fb4
   138a8:	andeq	r4, r1, r0, ror #31
   138ac:	andeq	r4, r1, r8, lsr #28
   138b0:	andeq	r5, r1, r4, asr #32
   138b4:	push	{r4, r5, lr}
   138b8:	sub	sp, sp, #12
   138bc:	ldr	r5, [sp, #24]
   138c0:	ldr	ip, [r5]
   138c4:	cmp	ip, #0
   138c8:	beq	138e4 <__assert_fail@plt+0x2b68>
   138cc:	mov	lr, r5
   138d0:	mov	ip, #0
   138d4:	ldr	r4, [lr, #4]!
   138d8:	add	ip, ip, #1
   138dc:	cmp	r4, #0
   138e0:	bne	138d4 <__assert_fail@plt+0x2b58>
   138e4:	stm	sp, {r5, ip}
   138e8:	bl	13594 <__assert_fail@plt+0x2818>
   138ec:	add	sp, sp, #12
   138f0:	pop	{r4, r5, pc}
   138f4:	push	{r4, r5, lr}
   138f8:	sub	sp, sp, #52	; 0x34
   138fc:	add	r5, sp, #4
   13900:	ldr	r4, [sp, #64]	; 0x40
   13904:	mov	ip, #0
   13908:	sub	r4, r4, #4
   1390c:	ldr	lr, [r4, #4]!
   13910:	cmp	lr, #0
   13914:	str	lr, [r5, #4]!
   13918:	beq	13928 <__assert_fail@plt+0x2bac>
   1391c:	add	ip, ip, #1
   13920:	cmp	ip, #10
   13924:	bne	1390c <__assert_fail@plt+0x2b90>
   13928:	add	lr, sp, #8
   1392c:	str	ip, [sp, #4]
   13930:	str	lr, [sp]
   13934:	bl	13594 <__assert_fail@plt+0x2818>
   13938:	add	sp, sp, #52	; 0x34
   1393c:	pop	{r4, r5, pc}
   13940:	push	{r3}		; (str r3, [sp, #-4]!)
   13944:	push	{r4, lr}
   13948:	sub	sp, sp, #60	; 0x3c
   1394c:	add	lr, sp, #56	; 0x38
   13950:	add	r3, sp, #72	; 0x48
   13954:	str	r3, [lr, #-44]!	; 0xffffffd4
   13958:	add	r4, sp, #68	; 0x44
   1395c:	mov	r3, #0
   13960:	ldr	ip, [r4, #4]!
   13964:	cmp	ip, #0
   13968:	str	ip, [lr, #4]!
   1396c:	beq	1397c <__assert_fail@plt+0x2c00>
   13970:	add	r3, r3, #1
   13974:	cmp	r3, #10
   13978:	bne	13960 <__assert_fail@plt+0x2be4>
   1397c:	add	ip, sp, #16
   13980:	str	r3, [sp, #4]
   13984:	str	ip, [sp]
   13988:	ldr	r3, [sp, #68]	; 0x44
   1398c:	bl	13594 <__assert_fail@plt+0x2818>
   13990:	add	sp, sp, #60	; 0x3c
   13994:	pop	{r4, lr}
   13998:	add	sp, sp, #4
   1399c:	bx	lr
   139a0:	ldr	r3, [pc, #92]	; 13a04 <__assert_fail@plt+0x2c88>
   139a4:	push	{r4, lr}
   139a8:	mov	r0, #10
   139ac:	ldr	r1, [r3]
   139b0:	bl	10d34 <fputc@plt>
   139b4:	mov	r2, #5
   139b8:	ldr	r1, [pc, #72]	; 13a08 <__assert_fail@plt+0x2c8c>
   139bc:	mov	r0, #0
   139c0:	bl	10bf0 <dcgettext@plt>
   139c4:	ldr	r1, [pc, #64]	; 13a0c <__assert_fail@plt+0x2c90>
   139c8:	bl	10b90 <printf@plt>
   139cc:	mov	r2, #5
   139d0:	ldr	r1, [pc, #56]	; 13a10 <__assert_fail@plt+0x2c94>
   139d4:	mov	r0, #0
   139d8:	bl	10bf0 <dcgettext@plt>
   139dc:	ldr	r2, [pc, #48]	; 13a14 <__assert_fail@plt+0x2c98>
   139e0:	ldr	r1, [pc, #48]	; 13a18 <__assert_fail@plt+0x2c9c>
   139e4:	bl	10b90 <printf@plt>
   139e8:	ldr	r1, [pc, #44]	; 13a1c <__assert_fail@plt+0x2ca0>
   139ec:	mov	r2, #5
   139f0:	mov	r0, #0
   139f4:	bl	10bf0 <dcgettext@plt>
   139f8:	ldr	r1, [pc, #32]	; 13a20 <__assert_fail@plt+0x2ca4>
   139fc:	pop	{r4, lr}
   13a00:	b	10b90 <printf@plt>
   13a04:	andeq	r6, r2, r4, lsr r1
   13a08:	andeq	r5, r1, r0, lsl #1
   13a0c:			; <UNDEFINED> instruction: 0x00014cb0
   13a10:	muleq	r1, r4, r0
   13a14:	andeq	r4, r1, r8, lsl #25
   13a18:	muleq	r1, r8, fp
   13a1c:	andeq	r5, r1, r8, lsr #1
   13a20:	ldrdeq	r5, [r1], -r0
   13a24:	push	{r4, lr}
   13a28:	bl	1414c <__assert_fail@plt+0x33d0>
   13a2c:	cmp	r0, #0
   13a30:	popne	{r4, pc}
   13a34:	bl	13f6c <__assert_fail@plt+0x31f0>
   13a38:	push	{r4, lr}
   13a3c:	bl	1414c <__assert_fail@plt+0x33d0>
   13a40:	cmp	r0, #0
   13a44:	popne	{r4, pc}
   13a48:	bl	13f6c <__assert_fail@plt+0x31f0>
   13a4c:	push	{r4, lr}
   13a50:	bl	1414c <__assert_fail@plt+0x33d0>
   13a54:	cmp	r0, #0
   13a58:	popne	{r4, pc}
   13a5c:	bl	13f6c <__assert_fail@plt+0x31f0>
   13a60:	push	{r4, r5, r6, lr}
   13a64:	mov	r5, r0
   13a68:	mov	r4, r1
   13a6c:	bl	141cc <__assert_fail@plt+0x3450>
   13a70:	cmp	r0, #0
   13a74:	popne	{r4, r5, r6, pc}
   13a78:	adds	r4, r4, #0
   13a7c:	movne	r4, #1
   13a80:	cmp	r5, #0
   13a84:	orreq	r4, r4, #1
   13a88:	cmp	r4, #0
   13a8c:	popeq	{r4, r5, r6, pc}
   13a90:	bl	13f6c <__assert_fail@plt+0x31f0>
   13a94:	push	{r4, lr}
   13a98:	cmp	r1, #0
   13a9c:	orreq	r1, r1, #1
   13aa0:	bl	141cc <__assert_fail@plt+0x3450>
   13aa4:	cmp	r0, #0
   13aa8:	popne	{r4, pc}
   13aac:	bl	13f6c <__assert_fail@plt+0x31f0>
   13ab0:	push	{r4, r5, r6, lr}
   13ab4:	mov	r6, r0
   13ab8:	mov	r5, r1
   13abc:	mov	r4, r2
   13ac0:	bl	14228 <__assert_fail@plt+0x34ac>
   13ac4:	cmp	r0, #0
   13ac8:	popne	{r4, r5, r6, pc}
   13acc:	cmp	r6, #0
   13ad0:	beq	13ae0 <__assert_fail@plt+0x2d64>
   13ad4:	cmp	r5, #0
   13ad8:	cmpne	r4, #0
   13adc:	popeq	{r4, r5, r6, pc}
   13ae0:	bl	13f6c <__assert_fail@plt+0x31f0>
   13ae4:	b	13ab0 <__assert_fail@plt+0x2d34>
   13ae8:	cmp	r2, #0
   13aec:	cmpne	r1, #0
   13af0:	moveq	r2, #1
   13af4:	moveq	r1, r2
   13af8:	push	{r4, lr}
   13afc:	bl	14228 <__assert_fail@plt+0x34ac>
   13b00:	cmp	r0, #0
   13b04:	popne	{r4, pc}
   13b08:	bl	13f6c <__assert_fail@plt+0x31f0>
   13b0c:	mov	r2, r1
   13b10:	mov	r1, r0
   13b14:	mov	r0, #0
   13b18:	b	13ab0 <__assert_fail@plt+0x2d34>
   13b1c:	mov	r2, r1
   13b20:	mov	r1, r0
   13b24:	mov	r0, #0
   13b28:	b	13ae8 <__assert_fail@plt+0x2d6c>
   13b2c:	push	{r4, r5, r6, lr}
   13b30:	subs	r6, r0, #0
   13b34:	sub	sp, sp, #8
   13b38:	mov	r5, r1
   13b3c:	ldr	r4, [r1]
   13b40:	beq	13b7c <__assert_fail@plt+0x2e00>
   13b44:	lsr	r1, r4, #1
   13b48:	add	r3, r1, #1
   13b4c:	mvn	r3, r3
   13b50:	cmp	r4, r3
   13b54:	bhi	13b78 <__assert_fail@plt+0x2dfc>
   13b58:	add	r4, r4, #1
   13b5c:	add	r4, r4, r1
   13b60:	mov	r0, r6
   13b64:	mov	r1, r4
   13b68:	bl	13ab0 <__assert_fail@plt+0x2d34>
   13b6c:	str	r4, [r5]
   13b70:	add	sp, sp, #8
   13b74:	pop	{r4, r5, r6, pc}
   13b78:	bl	13f6c <__assert_fail@plt+0x31f0>
   13b7c:	cmp	r4, #0
   13b80:	bne	13b60 <__assert_fail@plt+0x2de4>
   13b84:	mov	r1, r2
   13b88:	mov	r0, #64	; 0x40
   13b8c:	str	r2, [sp, #4]
   13b90:	bl	1441c <__assert_fail@plt+0x36a0>
   13b94:	ldr	r2, [sp, #4]
   13b98:	cmp	r0, #0
   13b9c:	movne	r4, r0
   13ba0:	addeq	r4, r0, #1
   13ba4:	b	13b60 <__assert_fail@plt+0x2de4>
   13ba8:	mov	r2, #1
   13bac:	b	13b2c <__assert_fail@plt+0x2db0>
   13bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bb4:	sub	sp, sp, #12
   13bb8:	ldr	r6, [r1]
   13bbc:	mov	sl, r1
   13bc0:	mov	r9, r0
   13bc4:	asrs	r4, r6, #1
   13bc8:	mov	r5, r2
   13bcc:	mov	fp, r3
   13bd0:	ldr	r7, [sp, #48]	; 0x30
   13bd4:	bmi	13d40 <__assert_fail@plt+0x2fc4>
   13bd8:	mvn	r3, #-2147483648	; 0x80000000
   13bdc:	sub	r3, r3, r4
   13be0:	cmp	r6, r3
   13be4:	movle	r3, #0
   13be8:	movgt	r3, #1
   13bec:	mvn	r8, fp
   13bf0:	cmp	r3, #0
   13bf4:	addeq	r4, r4, r6
   13bf8:	mvnne	r4, #-2147483648	; 0x80000000
   13bfc:	lsr	r8, r8, #31
   13c00:	cmp	fp, r4
   13c04:	movge	r3, #0
   13c08:	andlt	r3, r8, #1
   13c0c:	cmp	r3, #0
   13c10:	beq	13cf8 <__assert_fail@plt+0x2f7c>
   13c14:	cmp	r7, #0
   13c18:	blt	13dc8 <__assert_fail@plt+0x304c>
   13c1c:	bne	13dc0 <__assert_fail@plt+0x3044>
   13c20:	mov	r2, #64	; 0x40
   13c24:	mov	r1, r7
   13c28:	mov	r0, r2
   13c2c:	str	r2, [sp, #4]
   13c30:	bl	14628 <__assert_fail@plt+0x38ac>
   13c34:	ldr	r2, [sp, #4]
   13c38:	mov	r1, r7
   13c3c:	mov	r4, r0
   13c40:	mov	r0, r2
   13c44:	bl	14848 <__assert_fail@plt+0x3acc>
   13c48:	ldr	r2, [sp, #4]
   13c4c:	sub	r1, r2, r1
   13c50:	cmp	r9, #0
   13c54:	sub	r3, r4, r6
   13c58:	streq	r9, [sl]
   13c5c:	cmp	r3, r5
   13c60:	bge	13ce4 <__assert_fail@plt+0x2f68>
   13c64:	cmp	r5, #0
   13c68:	blt	13d54 <__assert_fail@plt+0x2fd8>
   13c6c:	cmp	r6, #0
   13c70:	blt	13c90 <__assert_fail@plt+0x2f14>
   13c74:	mvn	r3, #-2147483648	; 0x80000000
   13c78:	sub	r3, r3, r5
   13c7c:	cmp	r6, r3
   13c80:	movle	r3, #0
   13c84:	movgt	r3, #1
   13c88:	cmp	r3, #0
   13c8c:	bne	13e50 <__assert_fail@plt+0x30d4>
   13c90:	add	r5, r6, r5
   13c94:	cmp	fp, r5
   13c98:	movge	r8, #0
   13c9c:	andlt	r8, r8, #1
   13ca0:	cmp	r8, #0
   13ca4:	mov	r4, r5
   13ca8:	bne	13e50 <__assert_fail@plt+0x30d4>
   13cac:	cmp	r7, #0
   13cb0:	blt	13d68 <__assert_fail@plt+0x2fec>
   13cb4:	beq	13ce0 <__assert_fail@plt+0x2f64>
   13cb8:	cmp	r5, #0
   13cbc:	blt	13e10 <__assert_fail@plt+0x3094>
   13cc0:	mov	r1, r7
   13cc4:	mvn	r0, #-2147483648	; 0x80000000
   13cc8:	bl	14628 <__assert_fail@plt+0x38ac>
   13ccc:	cmp	r5, r0
   13cd0:	movle	r0, #0
   13cd4:	movgt	r0, #1
   13cd8:	cmp	r0, #0
   13cdc:	bne	13e50 <__assert_fail@plt+0x30d4>
   13ce0:	mul	r1, r5, r7
   13ce4:	mov	r0, r9
   13ce8:	bl	13a60 <__assert_fail@plt+0x2ce4>
   13cec:	str	r4, [sl]
   13cf0:	add	sp, sp, #12
   13cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf8:	cmp	r7, #0
   13cfc:	blt	13d94 <__assert_fail@plt+0x3018>
   13d00:	beq	13c20 <__assert_fail@plt+0x2ea4>
   13d04:	cmp	r4, #0
   13d08:	blt	13dd0 <__assert_fail@plt+0x3054>
   13d0c:	mov	r1, r7
   13d10:	mvn	r0, #-2147483648	; 0x80000000
   13d14:	bl	14628 <__assert_fail@plt+0x38ac>
   13d18:	cmp	r0, r4
   13d1c:	movge	r0, #0
   13d20:	movlt	r0, #1
   13d24:	cmp	r0, #0
   13d28:	mvnne	r2, #-2147483648	; 0x80000000
   13d2c:	bne	13c24 <__assert_fail@plt+0x2ea8>
   13d30:	mul	r1, r7, r4
   13d34:	cmp	r1, #63	; 0x3f
   13d38:	bgt	13c50 <__assert_fail@plt+0x2ed4>
   13d3c:	b	13c20 <__assert_fail@plt+0x2ea4>
   13d40:	rsb	r3, r4, #-2147483648	; 0x80000000
   13d44:	cmp	r6, r3
   13d48:	movge	r3, #0
   13d4c:	movlt	r3, #1
   13d50:	b	13bec <__assert_fail@plt+0x2e70>
   13d54:	rsb	r3, r5, #-2147483648	; 0x80000000
   13d58:	cmp	r6, r3
   13d5c:	movge	r3, #0
   13d60:	movlt	r3, #1
   13d64:	b	13c88 <__assert_fail@plt+0x2f0c>
   13d68:	cmp	r5, #0
   13d6c:	blt	13df4 <__assert_fail@plt+0x3078>
   13d70:	cmn	r7, #1
   13d74:	beq	13ce0 <__assert_fail@plt+0x2f64>
   13d78:	mov	r1, r7
   13d7c:	mov	r0, #-2147483648	; 0x80000000
   13d80:	bl	14628 <__assert_fail@plt+0x38ac>
   13d84:	cmp	r5, r0
   13d88:	movle	r0, #0
   13d8c:	movgt	r0, #1
   13d90:	b	13cd8 <__assert_fail@plt+0x2f5c>
   13d94:	cmp	r4, #0
   13d98:	blt	13e34 <__assert_fail@plt+0x30b8>
   13d9c:	cmn	r7, #1
   13da0:	beq	13d30 <__assert_fail@plt+0x2fb4>
   13da4:	mov	r1, r7
   13da8:	mov	r0, #-2147483648	; 0x80000000
   13dac:	bl	14628 <__assert_fail@plt+0x38ac>
   13db0:	cmp	r0, r4
   13db4:	movge	r0, #0
   13db8:	movlt	r0, #1
   13dbc:	b	13d24 <__assert_fail@plt+0x2fa8>
   13dc0:	mov	r4, fp
   13dc4:	b	13d0c <__assert_fail@plt+0x2f90>
   13dc8:	mov	r4, fp
   13dcc:	b	13d9c <__assert_fail@plt+0x3020>
   13dd0:	cmn	r4, #1
   13dd4:	beq	13d30 <__assert_fail@plt+0x2fb4>
   13dd8:	mov	r1, r4
   13ddc:	mov	r0, #-2147483648	; 0x80000000
   13de0:	bl	14628 <__assert_fail@plt+0x38ac>
   13de4:	cmp	r7, r0
   13de8:	movle	r0, #0
   13dec:	movgt	r0, #1
   13df0:	b	13d24 <__assert_fail@plt+0x2fa8>
   13df4:	mov	r1, r7
   13df8:	mvn	r0, #-2147483648	; 0x80000000
   13dfc:	bl	14628 <__assert_fail@plt+0x38ac>
   13e00:	cmp	r5, r0
   13e04:	movge	r0, #0
   13e08:	movlt	r0, #1
   13e0c:	b	13cd8 <__assert_fail@plt+0x2f5c>
   13e10:	cmn	r5, #1
   13e14:	beq	13ce0 <__assert_fail@plt+0x2f64>
   13e18:	mov	r1, r5
   13e1c:	mov	r0, #-2147483648	; 0x80000000
   13e20:	bl	14628 <__assert_fail@plt+0x38ac>
   13e24:	cmp	r7, r0
   13e28:	movle	r0, #0
   13e2c:	movgt	r0, #1
   13e30:	b	13cd8 <__assert_fail@plt+0x2f5c>
   13e34:	mov	r1, r7
   13e38:	mvn	r0, #-2147483648	; 0x80000000
   13e3c:	bl	14628 <__assert_fail@plt+0x38ac>
   13e40:	cmp	r0, r4
   13e44:	movle	r0, #0
   13e48:	movgt	r0, #1
   13e4c:	b	13d24 <__assert_fail@plt+0x2fa8>
   13e50:	bl	13f6c <__assert_fail@plt+0x31f0>
   13e54:	push	{r4, lr}
   13e58:	mov	r1, #1
   13e5c:	bl	13fac <__assert_fail@plt+0x3230>
   13e60:	cmp	r0, #0
   13e64:	popne	{r4, pc}
   13e68:	bl	13f6c <__assert_fail@plt+0x31f0>
   13e6c:	push	{r4, lr}
   13e70:	mov	r1, #1
   13e74:	bl	13fac <__assert_fail@plt+0x3230>
   13e78:	cmp	r0, #0
   13e7c:	popne	{r4, pc}
   13e80:	bl	13f6c <__assert_fail@plt+0x31f0>
   13e84:	push	{r4, lr}
   13e88:	bl	13fac <__assert_fail@plt+0x3230>
   13e8c:	cmp	r0, #0
   13e90:	popne	{r4, pc}
   13e94:	bl	13f6c <__assert_fail@plt+0x31f0>
   13e98:	push	{r4, lr}
   13e9c:	bl	13fac <__assert_fail@plt+0x3230>
   13ea0:	cmp	r0, #0
   13ea4:	popne	{r4, pc}
   13ea8:	bl	13f6c <__assert_fail@plt+0x31f0>
   13eac:	push	{r4, r5, r6, lr}
   13eb0:	mov	r6, r0
   13eb4:	mov	r0, r1
   13eb8:	mov	r4, r1
   13ebc:	bl	1414c <__assert_fail@plt+0x33d0>
   13ec0:	subs	r5, r0, #0
   13ec4:	beq	13edc <__assert_fail@plt+0x3160>
   13ec8:	mov	r2, r4
   13ecc:	mov	r1, r6
   13ed0:	bl	10bcc <memcpy@plt>
   13ed4:	mov	r0, r5
   13ed8:	pop	{r4, r5, r6, pc}
   13edc:	bl	13f6c <__assert_fail@plt+0x31f0>
   13ee0:	push	{r4, r5, r6, lr}
   13ee4:	mov	r6, r0
   13ee8:	mov	r0, r1
   13eec:	mov	r4, r1
   13ef0:	bl	1414c <__assert_fail@plt+0x33d0>
   13ef4:	subs	r5, r0, #0
   13ef8:	beq	13f10 <__assert_fail@plt+0x3194>
   13efc:	mov	r2, r4
   13f00:	mov	r1, r6
   13f04:	bl	10bcc <memcpy@plt>
   13f08:	mov	r0, r5
   13f0c:	pop	{r4, r5, r6, pc}
   13f10:	bl	13f6c <__assert_fail@plt+0x31f0>
   13f14:	push	{r4, r5, r6, lr}
   13f18:	mov	r6, r0
   13f1c:	add	r0, r1, #1
   13f20:	mov	r4, r1
   13f24:	bl	1414c <__assert_fail@plt+0x33d0>
   13f28:	subs	r5, r0, #0
   13f2c:	beq	13f4c <__assert_fail@plt+0x31d0>
   13f30:	mov	r3, #0
   13f34:	mov	r1, r6
   13f38:	strb	r3, [r5, r4]
   13f3c:	mov	r2, r4
   13f40:	bl	10bcc <memcpy@plt>
   13f44:	mov	r0, r5
   13f48:	pop	{r4, r5, r6, pc}
   13f4c:	bl	13f6c <__assert_fail@plt+0x31f0>
   13f50:	push	{r4, lr}
   13f54:	mov	r4, r0
   13f58:	bl	10cb0 <strlen@plt>
   13f5c:	add	r1, r0, #1
   13f60:	mov	r0, r4
   13f64:	pop	{r4, lr}
   13f68:	b	13eac <__assert_fail@plt+0x3130>
   13f6c:	ldr	r3, [pc, #44]	; 13fa0 <__assert_fail@plt+0x3224>
   13f70:	push	{r4, lr}
   13f74:	mov	r2, #5
   13f78:	ldr	r1, [pc, #36]	; 13fa4 <__assert_fail@plt+0x3228>
   13f7c:	mov	r0, #0
   13f80:	ldr	r4, [r3]
   13f84:	bl	10bf0 <dcgettext@plt>
   13f88:	ldr	r2, [pc, #24]	; 13fa8 <__assert_fail@plt+0x322c>
   13f8c:	mov	r1, #0
   13f90:	mov	r3, r0
   13f94:	mov	r0, r4
   13f98:	bl	10c50 <error@plt>
   13f9c:	bl	10d70 <abort@plt>
   13fa0:	ldrdeq	r6, [r2], -r4
   13fa4:	andeq	r5, r1, r0, lsr #2
   13fa8:	strdeq	r4, [r1], -ip
   13fac:	cmp	r1, #0
   13fb0:	cmpne	r0, #0
   13fb4:	moveq	r1, #1
   13fb8:	moveq	r0, r1
   13fbc:	umull	r2, r3, r0, r1
   13fc0:	adds	r3, r3, #0
   13fc4:	movne	r3, #1
   13fc8:	cmp	r2, #0
   13fcc:	blt	13fdc <__assert_fail@plt+0x3260>
   13fd0:	cmp	r3, #0
   13fd4:	bne	13fdc <__assert_fail@plt+0x3260>
   13fd8:	b	10b60 <calloc@plt>
   13fdc:	push	{r4, lr}
   13fe0:	bl	10cc8 <__errno_location@plt>
   13fe4:	mov	r3, #12
   13fe8:	str	r3, [r0]
   13fec:	mov	r0, #0
   13ff0:	pop	{r4, pc}
   13ff4:	push	{r4, lr}
   13ff8:	subs	r4, r0, #0
   13ffc:	sub	sp, sp, #8
   14000:	beq	1401c <__assert_fail@plt+0x32a0>
   14004:	bl	10c74 <__freading@plt>
   14008:	cmp	r0, #0
   1400c:	beq	1401c <__assert_fail@plt+0x32a0>
   14010:	ldr	r3, [r4]
   14014:	tst	r3, #256	; 0x100
   14018:	bne	1402c <__assert_fail@plt+0x32b0>
   1401c:	mov	r0, r4
   14020:	add	sp, sp, #8
   14024:	pop	{r4, lr}
   14028:	b	10b9c <fflush@plt>
   1402c:	mov	r3, #1
   14030:	str	r3, [sp]
   14034:	mov	r2, #0
   14038:	mov	r3, #0
   1403c:	mov	r0, r4
   14040:	bl	140ac <__assert_fail@plt+0x3330>
   14044:	mov	r0, r4
   14048:	add	sp, sp, #8
   1404c:	pop	{r4, lr}
   14050:	b	10b9c <fflush@plt>
   14054:	push	{r4, r5, lr}
   14058:	sub	sp, sp, #12
   1405c:	mov	r5, r0
   14060:	bl	10cc8 <__errno_location@plt>
   14064:	mov	r2, #0
   14068:	mov	r4, r0
   1406c:	ldr	r3, [r0]
   14070:	str	r2, [r4]
   14074:	mov	r0, r5
   14078:	str	r3, [sp]
   1407c:	str	r3, [sp, #4]
   14080:	bl	10ba8 <free@plt>
   14084:	ldr	r3, [r4]
   14088:	add	r2, sp, #8
   1408c:	cmp	r3, #0
   14090:	moveq	r3, #4
   14094:	movne	r3, #0
   14098:	add	r3, r2, r3
   1409c:	ldr	r3, [r3, #-8]
   140a0:	str	r3, [r4]
   140a4:	add	sp, sp, #12
   140a8:	pop	{r4, r5, pc}
   140ac:	push	{r4, r5, r6, r7, r8, lr}
   140b0:	sub	sp, sp, #8
   140b4:	ldmib	r0, {ip, lr}
   140b8:	mov	r4, r0
   140bc:	ldr	r5, [sp, #32]
   140c0:	cmp	lr, ip
   140c4:	beq	140dc <__assert_fail@plt+0x3360>
   140c8:	str	r5, [sp, #32]
   140cc:	mov	r0, r4
   140d0:	add	sp, sp, #8
   140d4:	pop	{r4, r5, r6, r7, r8, lr}
   140d8:	b	10d04 <fseeko64@plt>
   140dc:	ldr	lr, [r0, #20]
   140e0:	ldr	ip, [r0, #16]
   140e4:	cmp	lr, ip
   140e8:	bne	140c8 <__assert_fail@plt+0x334c>
   140ec:	ldr	r8, [r0, #36]	; 0x24
   140f0:	cmp	r8, #0
   140f4:	bne	140c8 <__assert_fail@plt+0x334c>
   140f8:	mov	r6, r2
   140fc:	mov	r7, r3
   14100:	bl	10cec <fileno@plt>
   14104:	mov	r2, r6
   14108:	mov	r3, r7
   1410c:	str	r5, [sp]
   14110:	bl	10c20 <lseek64@plt>
   14114:	mvn	r3, #0
   14118:	mvn	r2, #0
   1411c:	cmp	r1, r3
   14120:	cmpeq	r0, r2
   14124:	beq	14144 <__assert_fail@plt+0x33c8>
   14128:	ldr	r3, [r4]
   1412c:	strd	r0, [r4, #80]	; 0x50
   14130:	mov	r0, r8
   14134:	bic	r3, r3, #16
   14138:	str	r3, [r4]
   1413c:	add	sp, sp, #8
   14140:	pop	{r4, r5, r6, r7, r8, pc}
   14144:	mvn	r0, #0
   14148:	b	1413c <__assert_fail@plt+0x33c0>
   1414c:	cmp	r0, #0
   14150:	moveq	r0, #1
   14154:	cmp	r0, #0
   14158:	blt	14160 <__assert_fail@plt+0x33e4>
   1415c:	b	10c5c <malloc@plt>
   14160:	push	{r4, lr}
   14164:	bl	10cc8 <__errno_location@plt>
   14168:	mov	r3, #12
   1416c:	str	r3, [r0]
   14170:	mov	r0, #0
   14174:	pop	{r4, pc}
   14178:	push	{r4, r5, r6, r7, lr}
   1417c:	subs	r6, r0, #0
   14180:	sub	sp, sp, #12
   14184:	addeq	r6, sp, #4
   14188:	mov	r0, r6
   1418c:	mov	r5, r2
   14190:	mov	r7, r1
   14194:	bl	10c44 <mbrtowc@plt>
   14198:	cmp	r5, #0
   1419c:	cmnne	r0, #3
   141a0:	mov	r4, r0
   141a4:	bls	141c0 <__assert_fail@plt+0x3444>
   141a8:	mov	r0, #0
   141ac:	bl	142f4 <__assert_fail@plt+0x3578>
   141b0:	cmp	r0, #0
   141b4:	moveq	r4, #1
   141b8:	ldrbeq	r3, [r7]
   141bc:	streq	r3, [r6]
   141c0:	mov	r0, r4
   141c4:	add	sp, sp, #12
   141c8:	pop	{r4, r5, r6, r7, pc}
   141cc:	cmp	r0, #0
   141d0:	beq	141f4 <__assert_fail@plt+0x3478>
   141d4:	cmp	r1, #0
   141d8:	push	{lr}		; (str lr, [sp, #-4]!)
   141dc:	sub	sp, sp, #12
   141e0:	beq	141fc <__assert_fail@plt+0x3480>
   141e4:	blt	14214 <__assert_fail@plt+0x3498>
   141e8:	add	sp, sp, #12
   141ec:	pop	{lr}		; (ldr lr, [sp], #4)
   141f0:	b	10bfc <realloc@plt>
   141f4:	mov	r0, r1
   141f8:	b	1414c <__assert_fail@plt+0x33d0>
   141fc:	str	r1, [sp, #4]
   14200:	bl	14054 <__assert_fail@plt+0x32d8>
   14204:	ldr	r3, [sp, #4]
   14208:	mov	r0, r3
   1420c:	add	sp, sp, #12
   14210:	pop	{pc}		; (ldr pc, [sp], #4)
   14214:	bl	10cc8 <__errno_location@plt>
   14218:	mov	r2, #12
   1421c:	mov	r3, #0
   14220:	str	r2, [r0]
   14224:	b	14208 <__assert_fail@plt+0x348c>
   14228:	push	{r4, r5, r6, lr}
   1422c:	subs	r4, r2, #0
   14230:	mov	r6, r0
   14234:	mov	r5, r1
   14238:	beq	14264 <__assert_fail@plt+0x34e8>
   1423c:	mov	r1, r4
   14240:	mvn	r0, #0
   14244:	bl	1441c <__assert_fail@plt+0x36a0>
   14248:	cmp	r0, r5
   1424c:	bcs	14264 <__assert_fail@plt+0x34e8>
   14250:	bl	10cc8 <__errno_location@plt>
   14254:	mov	r3, #12
   14258:	str	r3, [r0]
   1425c:	mov	r0, #0
   14260:	pop	{r4, r5, r6, pc}
   14264:	mul	r1, r5, r4
   14268:	mov	r0, r6
   1426c:	pop	{r4, r5, r6, lr}
   14270:	b	141cc <__assert_fail@plt+0x3450>
   14274:	push	{r4, r5, r6, lr}
   14278:	mov	r4, r0
   1427c:	bl	10c38 <__fpending@plt>
   14280:	mov	r6, r0
   14284:	mov	r0, r4
   14288:	bl	10bb4 <ferror@plt>
   1428c:	mov	r5, r0
   14290:	mov	r0, r4
   14294:	bl	10cf8 <fclose@plt>
   14298:	cmp	r5, #0
   1429c:	mov	r4, r0
   142a0:	bne	142c0 <__assert_fail@plt+0x3544>
   142a4:	cmp	r0, #0
   142a8:	beq	142b8 <__assert_fail@plt+0x353c>
   142ac:	cmp	r6, #0
   142b0:	beq	142dc <__assert_fail@plt+0x3560>
   142b4:	mvn	r4, #0
   142b8:	mov	r0, r4
   142bc:	pop	{r4, r5, r6, pc}
   142c0:	cmp	r0, #0
   142c4:	bne	142b4 <__assert_fail@plt+0x3538>
   142c8:	bl	10cc8 <__errno_location@plt>
   142cc:	str	r4, [r0]
   142d0:	mvn	r4, #0
   142d4:	mov	r0, r4
   142d8:	pop	{r4, r5, r6, pc}
   142dc:	bl	10cc8 <__errno_location@plt>
   142e0:	ldr	r4, [r0]
   142e4:	subs	r4, r4, #9
   142e8:	mvnne	r4, #0
   142ec:	mov	r0, r4
   142f0:	pop	{r4, r5, r6, pc}
   142f4:	push	{lr}		; (str lr, [sp, #-4]!)
   142f8:	sub	sp, sp, #268	; 0x10c
   142fc:	add	r1, sp, #4
   14300:	ldr	r2, [pc, #60]	; 14344 <__assert_fail@plt+0x35c8>
   14304:	bl	14384 <__assert_fail@plt+0x3608>
   14308:	cmp	r0, #0
   1430c:	movne	r0, #0
   14310:	bne	1433c <__assert_fail@plt+0x35c0>
   14314:	ldr	r1, [pc, #44]	; 14348 <__assert_fail@plt+0x35cc>
   14318:	add	r0, sp, #4
   1431c:	bl	10b78 <strcmp@plt>
   14320:	cmp	r0, #0
   14324:	beq	1433c <__assert_fail@plt+0x35c0>
   14328:	add	r0, sp, #4
   1432c:	ldr	r1, [pc, #24]	; 1434c <__assert_fail@plt+0x35d0>
   14330:	bl	10b78 <strcmp@plt>
   14334:	adds	r0, r0, #0
   14338:	movne	r0, #1
   1433c:	add	sp, sp, #268	; 0x10c
   14340:	pop	{pc}		; (ldr pc, [sp], #4)
   14344:	andeq	r0, r0, r1, lsl #2
   14348:	andeq	r5, r1, r4, lsr r1
   1434c:	andeq	r5, r1, r8, lsr r1
   14350:	push	{r4, lr}
   14354:	mov	r0, #14
   14358:	bl	10d28 <nl_langinfo@plt>
   1435c:	cmp	r0, #0
   14360:	beq	14378 <__assert_fail@plt+0x35fc>
   14364:	ldrb	r2, [r0]
   14368:	ldr	r3, [pc, #16]	; 14380 <__assert_fail@plt+0x3604>
   1436c:	cmp	r2, #0
   14370:	moveq	r0, r3
   14374:	pop	{r4, pc}
   14378:	ldr	r0, [pc]	; 14380 <__assert_fail@plt+0x3604>
   1437c:	pop	{r4, pc}
   14380:	andeq	r5, r1, r0, asr #2
   14384:	push	{r4, r5, r6, lr}
   14388:	mov	r5, r1
   1438c:	mov	r1, #0
   14390:	mov	r4, r2
   14394:	bl	10d10 <setlocale@plt>
   14398:	subs	r6, r0, #0
   1439c:	beq	143f8 <__assert_fail@plt+0x367c>
   143a0:	bl	10cb0 <strlen@plt>
   143a4:	cmp	r4, r0
   143a8:	bhi	143e0 <__assert_fail@plt+0x3664>
   143ac:	cmp	r4, #0
   143b0:	bne	143bc <__assert_fail@plt+0x3640>
   143b4:	mov	r0, #34	; 0x22
   143b8:	pop	{r4, r5, r6, pc}
   143bc:	sub	r4, r4, #1
   143c0:	mov	r1, r6
   143c4:	mov	r2, r4
   143c8:	mov	r0, r5
   143cc:	bl	10bcc <memcpy@plt>
   143d0:	mov	r3, #0
   143d4:	strb	r3, [r5, r4]
   143d8:	mov	r0, #34	; 0x22
   143dc:	pop	{r4, r5, r6, pc}
   143e0:	add	r2, r0, #1
   143e4:	mov	r1, r6
   143e8:	mov	r0, r5
   143ec:	bl	10bcc <memcpy@plt>
   143f0:	mov	r0, #0
   143f4:	pop	{r4, r5, r6, pc}
   143f8:	cmp	r4, #0
   143fc:	beq	1440c <__assert_fail@plt+0x3690>
   14400:	strb	r6, [r5]
   14404:	mov	r0, #22
   14408:	pop	{r4, r5, r6, pc}
   1440c:	mov	r0, #22
   14410:	pop	{r4, r5, r6, pc}
   14414:	mov	r1, #0
   14418:	b	10d10 <setlocale@plt>
   1441c:	subs	r2, r1, #1
   14420:	bxeq	lr
   14424:	bcc	145fc <__assert_fail@plt+0x3880>
   14428:	cmp	r0, r1
   1442c:	bls	145e0 <__assert_fail@plt+0x3864>
   14430:	tst	r1, r2
   14434:	beq	145ec <__assert_fail@plt+0x3870>
   14438:	clz	r3, r0
   1443c:	clz	r2, r1
   14440:	sub	r3, r2, r3
   14444:	rsbs	r3, r3, #31
   14448:	addne	r3, r3, r3, lsl #1
   1444c:	mov	r2, #0
   14450:	addne	pc, pc, r3, lsl #2
   14454:	nop			; (mov r0, r0)
   14458:	cmp	r0, r1, lsl #31
   1445c:	adc	r2, r2, r2
   14460:	subcs	r0, r0, r1, lsl #31
   14464:	cmp	r0, r1, lsl #30
   14468:	adc	r2, r2, r2
   1446c:	subcs	r0, r0, r1, lsl #30
   14470:	cmp	r0, r1, lsl #29
   14474:	adc	r2, r2, r2
   14478:	subcs	r0, r0, r1, lsl #29
   1447c:	cmp	r0, r1, lsl #28
   14480:	adc	r2, r2, r2
   14484:	subcs	r0, r0, r1, lsl #28
   14488:	cmp	r0, r1, lsl #27
   1448c:	adc	r2, r2, r2
   14490:	subcs	r0, r0, r1, lsl #27
   14494:	cmp	r0, r1, lsl #26
   14498:	adc	r2, r2, r2
   1449c:	subcs	r0, r0, r1, lsl #26
   144a0:	cmp	r0, r1, lsl #25
   144a4:	adc	r2, r2, r2
   144a8:	subcs	r0, r0, r1, lsl #25
   144ac:	cmp	r0, r1, lsl #24
   144b0:	adc	r2, r2, r2
   144b4:	subcs	r0, r0, r1, lsl #24
   144b8:	cmp	r0, r1, lsl #23
   144bc:	adc	r2, r2, r2
   144c0:	subcs	r0, r0, r1, lsl #23
   144c4:	cmp	r0, r1, lsl #22
   144c8:	adc	r2, r2, r2
   144cc:	subcs	r0, r0, r1, lsl #22
   144d0:	cmp	r0, r1, lsl #21
   144d4:	adc	r2, r2, r2
   144d8:	subcs	r0, r0, r1, lsl #21
   144dc:	cmp	r0, r1, lsl #20
   144e0:	adc	r2, r2, r2
   144e4:	subcs	r0, r0, r1, lsl #20
   144e8:	cmp	r0, r1, lsl #19
   144ec:	adc	r2, r2, r2
   144f0:	subcs	r0, r0, r1, lsl #19
   144f4:	cmp	r0, r1, lsl #18
   144f8:	adc	r2, r2, r2
   144fc:	subcs	r0, r0, r1, lsl #18
   14500:	cmp	r0, r1, lsl #17
   14504:	adc	r2, r2, r2
   14508:	subcs	r0, r0, r1, lsl #17
   1450c:	cmp	r0, r1, lsl #16
   14510:	adc	r2, r2, r2
   14514:	subcs	r0, r0, r1, lsl #16
   14518:	cmp	r0, r1, lsl #15
   1451c:	adc	r2, r2, r2
   14520:	subcs	r0, r0, r1, lsl #15
   14524:	cmp	r0, r1, lsl #14
   14528:	adc	r2, r2, r2
   1452c:	subcs	r0, r0, r1, lsl #14
   14530:	cmp	r0, r1, lsl #13
   14534:	adc	r2, r2, r2
   14538:	subcs	r0, r0, r1, lsl #13
   1453c:	cmp	r0, r1, lsl #12
   14540:	adc	r2, r2, r2
   14544:	subcs	r0, r0, r1, lsl #12
   14548:	cmp	r0, r1, lsl #11
   1454c:	adc	r2, r2, r2
   14550:	subcs	r0, r0, r1, lsl #11
   14554:	cmp	r0, r1, lsl #10
   14558:	adc	r2, r2, r2
   1455c:	subcs	r0, r0, r1, lsl #10
   14560:	cmp	r0, r1, lsl #9
   14564:	adc	r2, r2, r2
   14568:	subcs	r0, r0, r1, lsl #9
   1456c:	cmp	r0, r1, lsl #8
   14570:	adc	r2, r2, r2
   14574:	subcs	r0, r0, r1, lsl #8
   14578:	cmp	r0, r1, lsl #7
   1457c:	adc	r2, r2, r2
   14580:	subcs	r0, r0, r1, lsl #7
   14584:	cmp	r0, r1, lsl #6
   14588:	adc	r2, r2, r2
   1458c:	subcs	r0, r0, r1, lsl #6
   14590:	cmp	r0, r1, lsl #5
   14594:	adc	r2, r2, r2
   14598:	subcs	r0, r0, r1, lsl #5
   1459c:	cmp	r0, r1, lsl #4
   145a0:	adc	r2, r2, r2
   145a4:	subcs	r0, r0, r1, lsl #4
   145a8:	cmp	r0, r1, lsl #3
   145ac:	adc	r2, r2, r2
   145b0:	subcs	r0, r0, r1, lsl #3
   145b4:	cmp	r0, r1, lsl #2
   145b8:	adc	r2, r2, r2
   145bc:	subcs	r0, r0, r1, lsl #2
   145c0:	cmp	r0, r1, lsl #1
   145c4:	adc	r2, r2, r2
   145c8:	subcs	r0, r0, r1, lsl #1
   145cc:	cmp	r0, r1
   145d0:	adc	r2, r2, r2
   145d4:	subcs	r0, r0, r1
   145d8:	mov	r0, r2
   145dc:	bx	lr
   145e0:	moveq	r0, #1
   145e4:	movne	r0, #0
   145e8:	bx	lr
   145ec:	clz	r2, r1
   145f0:	rsb	r2, r2, #31
   145f4:	lsr	r0, r0, r2
   145f8:	bx	lr
   145fc:	cmp	r0, #0
   14600:	mvnne	r0, #0
   14604:	b	14868 <__assert_fail@plt+0x3aec>
   14608:	cmp	r1, #0
   1460c:	beq	145fc <__assert_fail@plt+0x3880>
   14610:	push	{r0, r1, lr}
   14614:	bl	1441c <__assert_fail@plt+0x36a0>
   14618:	pop	{r1, r2, lr}
   1461c:	mul	r3, r2, r0
   14620:	sub	r1, r1, r3
   14624:	bx	lr
   14628:	cmp	r1, #0
   1462c:	beq	14838 <__assert_fail@plt+0x3abc>
   14630:	eor	ip, r0, r1
   14634:	rsbmi	r1, r1, #0
   14638:	subs	r2, r1, #1
   1463c:	beq	14804 <__assert_fail@plt+0x3a88>
   14640:	movs	r3, r0
   14644:	rsbmi	r3, r0, #0
   14648:	cmp	r3, r1
   1464c:	bls	14810 <__assert_fail@plt+0x3a94>
   14650:	tst	r1, r2
   14654:	beq	14820 <__assert_fail@plt+0x3aa4>
   14658:	clz	r2, r3
   1465c:	clz	r0, r1
   14660:	sub	r2, r0, r2
   14664:	rsbs	r2, r2, #31
   14668:	addne	r2, r2, r2, lsl #1
   1466c:	mov	r0, #0
   14670:	addne	pc, pc, r2, lsl #2
   14674:	nop			; (mov r0, r0)
   14678:	cmp	r3, r1, lsl #31
   1467c:	adc	r0, r0, r0
   14680:	subcs	r3, r3, r1, lsl #31
   14684:	cmp	r3, r1, lsl #30
   14688:	adc	r0, r0, r0
   1468c:	subcs	r3, r3, r1, lsl #30
   14690:	cmp	r3, r1, lsl #29
   14694:	adc	r0, r0, r0
   14698:	subcs	r3, r3, r1, lsl #29
   1469c:	cmp	r3, r1, lsl #28
   146a0:	adc	r0, r0, r0
   146a4:	subcs	r3, r3, r1, lsl #28
   146a8:	cmp	r3, r1, lsl #27
   146ac:	adc	r0, r0, r0
   146b0:	subcs	r3, r3, r1, lsl #27
   146b4:	cmp	r3, r1, lsl #26
   146b8:	adc	r0, r0, r0
   146bc:	subcs	r3, r3, r1, lsl #26
   146c0:	cmp	r3, r1, lsl #25
   146c4:	adc	r0, r0, r0
   146c8:	subcs	r3, r3, r1, lsl #25
   146cc:	cmp	r3, r1, lsl #24
   146d0:	adc	r0, r0, r0
   146d4:	subcs	r3, r3, r1, lsl #24
   146d8:	cmp	r3, r1, lsl #23
   146dc:	adc	r0, r0, r0
   146e0:	subcs	r3, r3, r1, lsl #23
   146e4:	cmp	r3, r1, lsl #22
   146e8:	adc	r0, r0, r0
   146ec:	subcs	r3, r3, r1, lsl #22
   146f0:	cmp	r3, r1, lsl #21
   146f4:	adc	r0, r0, r0
   146f8:	subcs	r3, r3, r1, lsl #21
   146fc:	cmp	r3, r1, lsl #20
   14700:	adc	r0, r0, r0
   14704:	subcs	r3, r3, r1, lsl #20
   14708:	cmp	r3, r1, lsl #19
   1470c:	adc	r0, r0, r0
   14710:	subcs	r3, r3, r1, lsl #19
   14714:	cmp	r3, r1, lsl #18
   14718:	adc	r0, r0, r0
   1471c:	subcs	r3, r3, r1, lsl #18
   14720:	cmp	r3, r1, lsl #17
   14724:	adc	r0, r0, r0
   14728:	subcs	r3, r3, r1, lsl #17
   1472c:	cmp	r3, r1, lsl #16
   14730:	adc	r0, r0, r0
   14734:	subcs	r3, r3, r1, lsl #16
   14738:	cmp	r3, r1, lsl #15
   1473c:	adc	r0, r0, r0
   14740:	subcs	r3, r3, r1, lsl #15
   14744:	cmp	r3, r1, lsl #14
   14748:	adc	r0, r0, r0
   1474c:	subcs	r3, r3, r1, lsl #14
   14750:	cmp	r3, r1, lsl #13
   14754:	adc	r0, r0, r0
   14758:	subcs	r3, r3, r1, lsl #13
   1475c:	cmp	r3, r1, lsl #12
   14760:	adc	r0, r0, r0
   14764:	subcs	r3, r3, r1, lsl #12
   14768:	cmp	r3, r1, lsl #11
   1476c:	adc	r0, r0, r0
   14770:	subcs	r3, r3, r1, lsl #11
   14774:	cmp	r3, r1, lsl #10
   14778:	adc	r0, r0, r0
   1477c:	subcs	r3, r3, r1, lsl #10
   14780:	cmp	r3, r1, lsl #9
   14784:	adc	r0, r0, r0
   14788:	subcs	r3, r3, r1, lsl #9
   1478c:	cmp	r3, r1, lsl #8
   14790:	adc	r0, r0, r0
   14794:	subcs	r3, r3, r1, lsl #8
   14798:	cmp	r3, r1, lsl #7
   1479c:	adc	r0, r0, r0
   147a0:	subcs	r3, r3, r1, lsl #7
   147a4:	cmp	r3, r1, lsl #6
   147a8:	adc	r0, r0, r0
   147ac:	subcs	r3, r3, r1, lsl #6
   147b0:	cmp	r3, r1, lsl #5
   147b4:	adc	r0, r0, r0
   147b8:	subcs	r3, r3, r1, lsl #5
   147bc:	cmp	r3, r1, lsl #4
   147c0:	adc	r0, r0, r0
   147c4:	subcs	r3, r3, r1, lsl #4
   147c8:	cmp	r3, r1, lsl #3
   147cc:	adc	r0, r0, r0
   147d0:	subcs	r3, r3, r1, lsl #3
   147d4:	cmp	r3, r1, lsl #2
   147d8:	adc	r0, r0, r0
   147dc:	subcs	r3, r3, r1, lsl #2
   147e0:	cmp	r3, r1, lsl #1
   147e4:	adc	r0, r0, r0
   147e8:	subcs	r3, r3, r1, lsl #1
   147ec:	cmp	r3, r1
   147f0:	adc	r0, r0, r0
   147f4:	subcs	r3, r3, r1
   147f8:	cmp	ip, #0
   147fc:	rsbmi	r0, r0, #0
   14800:	bx	lr
   14804:	teq	ip, r0
   14808:	rsbmi	r0, r0, #0
   1480c:	bx	lr
   14810:	movcc	r0, #0
   14814:	asreq	r0, ip, #31
   14818:	orreq	r0, r0, #1
   1481c:	bx	lr
   14820:	clz	r2, r1
   14824:	rsb	r2, r2, #31
   14828:	cmp	ip, #0
   1482c:	lsr	r0, r3, r2
   14830:	rsbmi	r0, r0, #0
   14834:	bx	lr
   14838:	cmp	r0, #0
   1483c:	mvngt	r0, #-2147483648	; 0x80000000
   14840:	movlt	r0, #-2147483648	; 0x80000000
   14844:	b	14868 <__assert_fail@plt+0x3aec>
   14848:	cmp	r1, #0
   1484c:	beq	14838 <__assert_fail@plt+0x3abc>
   14850:	push	{r0, r1, lr}
   14854:	bl	14630 <__assert_fail@plt+0x38b4>
   14858:	pop	{r1, r2, lr}
   1485c:	mul	r3, r2, r0
   14860:	sub	r1, r1, r3
   14864:	bx	lr
   14868:	push	{r1, lr}
   1486c:	mov	r0, #8
   14870:	bl	10b6c <raise@plt>
   14874:	pop	{r1, pc}
   14878:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1487c:	mov	r7, r0
   14880:	ldr	r6, [pc, #72]	; 148d0 <__assert_fail@plt+0x3b54>
   14884:	ldr	r5, [pc, #72]	; 148d4 <__assert_fail@plt+0x3b58>
   14888:	add	r6, pc, r6
   1488c:	add	r5, pc, r5
   14890:	sub	r6, r6, r5
   14894:	mov	r8, r1
   14898:	mov	r9, r2
   1489c:	bl	10b40 <calloc@plt-0x20>
   148a0:	asrs	r6, r6, #2
   148a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   148a8:	mov	r4, #0
   148ac:	add	r4, r4, #1
   148b0:	ldr	r3, [r5], #4
   148b4:	mov	r2, r9
   148b8:	mov	r1, r8
   148bc:	mov	r0, r7
   148c0:	blx	r3
   148c4:	cmp	r6, r4
   148c8:	bne	148ac <__assert_fail@plt+0x3b30>
   148cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148d0:	andeq	r1, r1, r0, lsl #13
   148d4:	andeq	r1, r1, r8, ror r6
   148d8:	bx	lr
   148dc:	ldr	r3, [pc, #12]	; 148f0 <__assert_fail@plt+0x3b74>
   148e0:	mov	r1, #0
   148e4:	add	r3, pc, r3
   148e8:	ldr	r2, [r3]
   148ec:	b	10cd4 <__cxa_atexit@plt>
   148f0:	andeq	r1, r1, r0, ror #15

Disassembly of section .fini:

000148f4 <.fini>:
   148f4:	push	{r3, lr}
   148f8:	pop	{r3, pc}
