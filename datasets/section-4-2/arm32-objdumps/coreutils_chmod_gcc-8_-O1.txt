
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	111f4 <__assert_fail@plt+0x48>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <fstatfs64@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <fstatfs64@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	sl, r1, ip, asr #2

00010eb8 <fstatfs64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #106496	; 0x1a000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <calloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #106496	; 0x1a000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <fputs_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #106496	; 0x1a000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <raise@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #106496	; 0x1a000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #106496	; 0x1a000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <fflush@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #106496	; 0x1a000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <memmove@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #106496	; 0x1a000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <free@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #106496	; 0x1a000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #106496	; 0x1a000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #106496	; 0x1a000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #106496	; 0x1a000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <memcmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #106496	; 0x1a000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <fputc_unlocked@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #106496	; 0x1a000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <dcgettext@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #106496	; 0x1a000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <realloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #106496	; 0x1a000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <textdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #106496	; 0x1a000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <__fxstatat64@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #106496	; 0x1a000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <iswprint@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #106496	; 0x1a000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <__fxstat64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #106496	; 0x1a000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <fwrite@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #106496	; 0x1a000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <lseek64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #106496	; 0x1a000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <__ctype_get_mb_cur_max@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #106496	; 0x1a000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <__fpending@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #106496	; 0x1a000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <mbrtowc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #106496	; 0x1a000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <error@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #106496	; 0x1a000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <open64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #106496	; 0x1a000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <malloc@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #106496	; 0x1a000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <__libc_start_main@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #106496	; 0x1a000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <__freading@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #106496	; 0x1a000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <__gmon_start__@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #106496	; 0x1a000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <getopt_long@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #106496	; 0x1a000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <__ctype_b_loc@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <exit@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <strlen@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <openat64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <fchmodat@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <__errno_location@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__sprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <__cxa_atexit@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #28]!

0001108c <memset@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #20]!

00011098 <__printf_chk@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fileno@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <__fprintf_chk@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #102400	; 0x19000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <fclose@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #102400	; 0x19000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <fseeko64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #102400	; 0x19000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <fcntl64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #102400	; 0x19000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <setlocale@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #102400	; 0x19000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <strrchr@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <nl_langinfo@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <readdir64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <fdopendir@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #102400	; 0x19000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <dirfd@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <fchdir@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <qsort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <umask@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

00011158 <chmod@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3980]!	; 0xf8c

00011164 <__xstat64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3972]!	; 0xf84

00011170 <strncmp@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3964]!	; 0xf7c

0001117c <abort@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3956]!	; 0xf74

00011188 <close@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3948]!	; 0xf6c

00011194 <__lxstat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3940]!	; 0xf64

000111a0 <closedir@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3932]!	; 0xf5c

000111ac <__assert_fail@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3924]!	; 0xf54

Disassembly of section .text:

000111b8 <.text>:
   111b8:	mov	fp, #0
   111bc:	mov	lr, #0
   111c0:	pop	{r1}		; (ldr r1, [sp], #4)
   111c4:	mov	r2, sp
   111c8:	push	{r2}		; (str r2, [sp, #-4]!)
   111cc:	push	{r0}		; (str r0, [sp, #-4]!)
   111d0:	ldr	ip, [pc, #16]	; 111e8 <__assert_fail@plt+0x3c>
   111d4:	push	{ip}		; (str ip, [sp, #-4]!)
   111d8:	ldr	r0, [pc, #12]	; 111ec <__assert_fail@plt+0x40>
   111dc:	ldr	r3, [pc, #12]	; 111f0 <__assert_fail@plt+0x44>
   111e0:	bl	10ffc <__libc_start_main@plt>
   111e4:	bl	1117c <abort@plt>
   111e8:	ldrdeq	r9, [r1], -r8
   111ec:	andeq	r1, r1, ip, lsr #13
   111f0:	andeq	r9, r1, r8, ror lr
   111f4:	ldr	r3, [pc, #20]	; 11210 <__assert_fail@plt+0x64>
   111f8:	ldr	r2, [pc, #20]	; 11214 <__assert_fail@plt+0x68>
   111fc:	add	r3, pc, r3
   11200:	ldr	r2, [r3, r2]
   11204:	cmp	r2, #0
   11208:	bxeq	lr
   1120c:	b	11014 <__gmon_start__@plt>
   11210:	strdeq	r9, [r1], -ip
   11214:	andeq	r0, r0, ip, lsl #2
   11218:	ldr	r0, [pc, #24]	; 11238 <__assert_fail@plt+0x8c>
   1121c:	ldr	r3, [pc, #24]	; 1123c <__assert_fail@plt+0x90>
   11220:	cmp	r3, r0
   11224:	bxeq	lr
   11228:	ldr	r3, [pc, #16]	; 11240 <__assert_fail@plt+0x94>
   1122c:	cmp	r3, #0
   11230:	bxeq	lr
   11234:	bx	r3
   11238:	andeq	fp, r2, r4, ror #2
   1123c:	andeq	fp, r2, r4, ror #2
   11240:	andeq	r0, r0, r0
   11244:	ldr	r0, [pc, #36]	; 11270 <__assert_fail@plt+0xc4>
   11248:	ldr	r1, [pc, #36]	; 11274 <__assert_fail@plt+0xc8>
   1124c:	sub	r1, r1, r0
   11250:	asr	r1, r1, #2
   11254:	add	r1, r1, r1, lsr #31
   11258:	asrs	r1, r1, #1
   1125c:	bxeq	lr
   11260:	ldr	r3, [pc, #16]	; 11278 <__assert_fail@plt+0xcc>
   11264:	cmp	r3, #0
   11268:	bxeq	lr
   1126c:	bx	r3
   11270:	andeq	fp, r2, r4, ror #2
   11274:	andeq	fp, r2, r4, ror #2
   11278:	andeq	r0, r0, r0
   1127c:	push	{r4, lr}
   11280:	ldr	r4, [pc, #24]	; 112a0 <__assert_fail@plt+0xf4>
   11284:	ldrb	r3, [r4]
   11288:	cmp	r3, #0
   1128c:	popne	{r4, pc}
   11290:	bl	11218 <__assert_fail@plt+0x6c>
   11294:	mov	r3, #1
   11298:	strb	r3, [r4]
   1129c:	pop	{r4, pc}
   112a0:	andeq	fp, r2, r4, lsl #3
   112a4:	b	11244 <__assert_fail@plt+0x98>
   112a8:	push	{lr}		; (str lr, [sp, #-4]!)
   112ac:	sub	sp, sp, #68	; 0x44
   112b0:	subs	r4, r0, #0
   112b4:	beq	112fc <__assert_fail@plt+0x150>
   112b8:	movw	r3, #45432	; 0xb178
   112bc:	movt	r3, #2
   112c0:	ldr	r5, [r3]
   112c4:	mov	r2, #5
   112c8:	movw	r1, #40944	; 0x9ff0
   112cc:	movt	r1, #1
   112d0:	mov	r0, #0
   112d4:	bl	10f54 <dcgettext@plt>
   112d8:	movw	r3, #45492	; 0xb1b4
   112dc:	movt	r3, #2
   112e0:	ldr	r3, [r3]
   112e4:	mov	r2, r0
   112e8:	mov	r1, #1
   112ec:	mov	r0, r5
   112f0:	bl	110b0 <__fprintf_chk@plt>
   112f4:	mov	r0, r4
   112f8:	bl	11038 <exit@plt>
   112fc:	mov	r2, #5
   11300:	movw	r1, #40984	; 0xa018
   11304:	movt	r1, #1
   11308:	mov	r0, #0
   1130c:	bl	10f54 <dcgettext@plt>
   11310:	movw	r3, #45492	; 0xb1b4
   11314:	movt	r3, #2
   11318:	ldr	r2, [r3]
   1131c:	str	r2, [sp]
   11320:	mov	r3, r2
   11324:	mov	r1, r0
   11328:	mov	r0, #1
   1132c:	bl	11098 <__printf_chk@plt>
   11330:	mov	r2, #5
   11334:	movw	r1, #41120	; 0xa0a0
   11338:	movt	r1, #1
   1133c:	mov	r0, #0
   11340:	bl	10f54 <dcgettext@plt>
   11344:	movw	r5, #45436	; 0xb17c
   11348:	movt	r5, #2
   1134c:	ldr	r1, [r5]
   11350:	bl	10ed0 <fputs_unlocked@plt>
   11354:	mov	r2, #5
   11358:	movw	r1, #41228	; 0xa10c
   1135c:	movt	r1, #1
   11360:	mov	r0, #0
   11364:	bl	10f54 <dcgettext@plt>
   11368:	ldr	r1, [r5]
   1136c:	bl	10ed0 <fputs_unlocked@plt>
   11370:	mov	r2, #5
   11374:	movw	r1, #41432	; 0xa1d8
   11378:	movt	r1, #1
   1137c:	mov	r0, #0
   11380:	bl	10f54 <dcgettext@plt>
   11384:	ldr	r1, [r5]
   11388:	bl	10ed0 <fputs_unlocked@plt>
   1138c:	mov	r2, #5
   11390:	movw	r1, #41560	; 0xa258
   11394:	movt	r1, #1
   11398:	mov	r0, #0
   1139c:	bl	10f54 <dcgettext@plt>
   113a0:	ldr	r1, [r5]
   113a4:	bl	10ed0 <fputs_unlocked@plt>
   113a8:	mov	r2, #5
   113ac:	movw	r1, #41628	; 0xa29c
   113b0:	movt	r1, #1
   113b4:	mov	r0, #0
   113b8:	bl	10f54 <dcgettext@plt>
   113bc:	ldr	r1, [r5]
   113c0:	bl	10ed0 <fputs_unlocked@plt>
   113c4:	mov	r2, #5
   113c8:	movw	r1, #41696	; 0xa2e0
   113cc:	movt	r1, #1
   113d0:	mov	r0, #0
   113d4:	bl	10f54 <dcgettext@plt>
   113d8:	ldr	r1, [r5]
   113dc:	bl	10ed0 <fputs_unlocked@plt>
   113e0:	mov	r2, #5
   113e4:	movw	r1, #41744	; 0xa310
   113e8:	movt	r1, #1
   113ec:	mov	r0, #0
   113f0:	bl	10f54 <dcgettext@plt>
   113f4:	ldr	r1, [r5]
   113f8:	bl	10ed0 <fputs_unlocked@plt>
   113fc:	mov	r2, #5
   11400:	movw	r1, #41800	; 0xa348
   11404:	movt	r1, #1
   11408:	mov	r0, #0
   1140c:	bl	10f54 <dcgettext@plt>
   11410:	ldr	r1, [r5]
   11414:	bl	10ed0 <fputs_unlocked@plt>
   11418:	movw	r0, #40704	; 0x9f00
   1141c:	movt	r0, #1
   11420:	ldr	r1, [r0]
   11424:	ldr	r3, [r0, #4]
   11428:	str	r1, [sp, #8]
   1142c:	str	r3, [sp, #12]
   11430:	ldrd	r2, [r0, #8]
   11434:	strd	r2, [sp, #16]
   11438:	ldrd	r2, [r0, #16]
   1143c:	strd	r2, [sp, #24]
   11440:	ldrd	r2, [r0, #24]
   11444:	strd	r2, [sp, #32]
   11448:	ldrd	r2, [r0, #32]
   1144c:	strd	r2, [sp, #40]	; 0x28
   11450:	ldrd	r2, [r0, #40]	; 0x28
   11454:	strd	r2, [sp, #48]	; 0x30
   11458:	ldrd	r2, [r0, #48]	; 0x30
   1145c:	strd	r2, [sp, #56]	; 0x38
   11460:	cmp	r1, #0
   11464:	addeq	r5, sp, #8
   11468:	beq	11494 <__assert_fail@plt+0x2e8>
   1146c:	add	r5, sp, #8
   11470:	movw	r6, #40936	; 0x9fe8
   11474:	movt	r6, #1
   11478:	mov	r0, r6
   1147c:	bl	10ee8 <strcmp@plt>
   11480:	cmp	r0, #0
   11484:	beq	11494 <__assert_fail@plt+0x2e8>
   11488:	ldr	r1, [r5, #8]!
   1148c:	cmp	r1, #0
   11490:	bne	11478 <__assert_fail@plt+0x2cc>
   11494:	ldr	r5, [r5, #4]
   11498:	cmp	r5, #0
   1149c:	beq	115f8 <__assert_fail@plt+0x44c>
   114a0:	mov	r2, #5
   114a4:	movw	r1, #41876	; 0xa394
   114a8:	movt	r1, #1
   114ac:	mov	r0, #0
   114b0:	bl	10f54 <dcgettext@plt>
   114b4:	movw	r3, #41900	; 0xa3ac
   114b8:	movt	r3, #1
   114bc:	movw	r2, #41940	; 0xa3d4
   114c0:	movt	r2, #1
   114c4:	mov	r1, r0
   114c8:	mov	r0, #1
   114cc:	bl	11098 <__printf_chk@plt>
   114d0:	mov	r1, #0
   114d4:	mov	r0, #5
   114d8:	bl	110e0 <setlocale@plt>
   114dc:	cmp	r0, #0
   114e0:	beq	114fc <__assert_fail@plt+0x350>
   114e4:	mov	r2, #3
   114e8:	movw	r1, #41956	; 0xa3e4
   114ec:	movt	r1, #1
   114f0:	bl	11170 <strncmp@plt>
   114f4:	cmp	r0, #0
   114f8:	bne	11578 <__assert_fail@plt+0x3cc>
   114fc:	mov	r2, #5
   11500:	movw	r1, #42032	; 0xa430
   11504:	movt	r1, #1
   11508:	mov	r0, #0
   1150c:	bl	10f54 <dcgettext@plt>
   11510:	movw	r6, #40936	; 0x9fe8
   11514:	movt	r6, #1
   11518:	mov	r3, r6
   1151c:	movw	r2, #41900	; 0xa3ac
   11520:	movt	r2, #1
   11524:	mov	r1, r0
   11528:	mov	r0, #1
   1152c:	bl	11098 <__printf_chk@plt>
   11530:	mov	r2, #5
   11534:	movw	r1, #42060	; 0xa44c
   11538:	movt	r1, #1
   1153c:	mov	r0, #0
   11540:	bl	10f54 <dcgettext@plt>
   11544:	mov	r1, r0
   11548:	movw	r2, #43188	; 0xa8b4
   1154c:	movt	r2, #1
   11550:	movw	r3, #41224	; 0xa108
   11554:	movt	r3, #1
   11558:	cmp	r5, r6
   1155c:	moveq	r3, r2
   11560:	mov	r2, r5
   11564:	mov	r0, #1
   11568:	bl	11098 <__printf_chk@plt>
   1156c:	b	112f4 <__assert_fail@plt+0x148>
   11570:	movw	r5, #40936	; 0x9fe8
   11574:	movt	r5, #1
   11578:	mov	r2, #5
   1157c:	movw	r1, #41960	; 0xa3e8
   11580:	movt	r1, #1
   11584:	mov	r0, #0
   11588:	bl	10f54 <dcgettext@plt>
   1158c:	movw	r3, #45436	; 0xb17c
   11590:	movt	r3, #2
   11594:	ldr	r1, [r3]
   11598:	bl	10ed0 <fputs_unlocked@plt>
   1159c:	b	114fc <__assert_fail@plt+0x350>
   115a0:	mov	r2, #5
   115a4:	movw	r1, #42032	; 0xa430
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	bl	10f54 <dcgettext@plt>
   115b4:	movw	r5, #40936	; 0x9fe8
   115b8:	movt	r5, #1
   115bc:	mov	r3, r5
   115c0:	movw	r2, #41900	; 0xa3ac
   115c4:	movt	r2, #1
   115c8:	mov	r1, r0
   115cc:	mov	r0, #1
   115d0:	bl	11098 <__printf_chk@plt>
   115d4:	mov	r2, #5
   115d8:	movw	r1, #42060	; 0xa44c
   115dc:	movt	r1, #1
   115e0:	mov	r0, #0
   115e4:	bl	10f54 <dcgettext@plt>
   115e8:	mov	r1, r0
   115ec:	movw	r3, #43188	; 0xa8b4
   115f0:	movt	r3, #1
   115f4:	b	11560 <__assert_fail@plt+0x3b4>
   115f8:	mov	r2, #5
   115fc:	movw	r1, #41876	; 0xa394
   11600:	movt	r1, #1
   11604:	mov	r0, #0
   11608:	bl	10f54 <dcgettext@plt>
   1160c:	movw	r3, #41900	; 0xa3ac
   11610:	movt	r3, #1
   11614:	movw	r2, #41940	; 0xa3d4
   11618:	movt	r2, #1
   1161c:	mov	r1, r0
   11620:	mov	r0, #1
   11624:	bl	11098 <__printf_chk@plt>
   11628:	mov	r1, #0
   1162c:	mov	r0, #5
   11630:	bl	110e0 <setlocale@plt>
   11634:	cmp	r0, #0
   11638:	beq	115a0 <__assert_fail@plt+0x3f4>
   1163c:	mov	r2, #3
   11640:	movw	r1, #41956	; 0xa3e4
   11644:	movt	r1, #1
   11648:	bl	11170 <strncmp@plt>
   1164c:	cmp	r0, #0
   11650:	bne	11570 <__assert_fail@plt+0x3c4>
   11654:	mov	r2, #5
   11658:	movw	r1, #42032	; 0xa430
   1165c:	movt	r1, #1
   11660:	mov	r0, #0
   11664:	bl	10f54 <dcgettext@plt>
   11668:	movw	r5, #40936	; 0x9fe8
   1166c:	movt	r5, #1
   11670:	mov	r3, r5
   11674:	movw	r2, #41900	; 0xa3ac
   11678:	movt	r2, #1
   1167c:	mov	r1, r0
   11680:	mov	r0, #1
   11684:	bl	11098 <__printf_chk@plt>
   11688:	mov	r2, #5
   1168c:	movw	r1, #42060	; 0xa44c
   11690:	movt	r1, #1
   11694:	mov	r0, #0
   11698:	bl	10f54 <dcgettext@plt>
   1169c:	mov	r1, r0
   116a0:	movw	r3, #43188	; 0xa8b4
   116a4:	movt	r3, #1
   116a8:	b	11560 <__assert_fail@plt+0x3b4>
   116ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   116b0:	strd	r6, [sp, #8]
   116b4:	strd	r8, [sp, #16]
   116b8:	strd	sl, [sp, #24]
   116bc:	str	lr, [sp, #32]
   116c0:	sub	sp, sp, #172	; 0xac
   116c4:	str	r0, [sp, #20]
   116c8:	mov	r6, r1
   116cc:	mov	r4, #0
   116d0:	str	r4, [sp, #164]	; 0xa4
   116d4:	ldr	r0, [r1]
   116d8:	bl	16458 <__assert_fail@plt+0x52ac>
   116dc:	movw	r1, #41224	; 0xa108
   116e0:	movt	r1, #1
   116e4:	mov	r0, #6
   116e8:	bl	110e0 <setlocale@plt>
   116ec:	movw	r5, #41944	; 0xa3d8
   116f0:	movt	r5, #1
   116f4:	movw	r1, #42112	; 0xa480
   116f8:	movt	r1, #1
   116fc:	mov	r0, r5
   11700:	bl	11140 <bindtextdomain@plt>
   11704:	mov	r0, r5
   11708:	bl	10f6c <textdomain@plt>
   1170c:	movw	r0, #9408	; 0x24c0
   11710:	movt	r0, #1
   11714:	bl	19edc <__assert_fail@plt+0x8d30>
   11718:	movw	r3, #45448	; 0xb188
   1171c:	movt	r3, #2
   11720:	strb	r4, [r3]
   11724:	strb	r4, [r3, #1]
   11728:	strb	r4, [r3, #2]
   1172c:	str	r4, [sp, #24]
   11730:	mov	sl, r4
   11734:	mov	r8, r4
   11738:	ldr	fp, [pc, #3420]	; 1249c <__assert_fail@plt+0x12f0>
   1173c:	movw	r5, #42168	; 0xa4b8
   11740:	movt	r5, #1
   11744:	movw	r7, #45336	; 0xb118
   11748:	movt	r7, #2
   1174c:	b	11928 <__assert_fail@plt+0x77c>
   11750:	cmp	r0, #55	; 0x37
   11754:	bgt	117dc <__assert_fail@plt+0x630>
   11758:	cmp	r0, #48	; 0x30
   1175c:	bge	11818 <__assert_fail@plt+0x66c>
   11760:	cmn	r0, #2
   11764:	beq	11914 <__assert_fail@plt+0x768>
   11768:	bgt	117c8 <__assert_fail@plt+0x61c>
   1176c:	cmn	r0, #3
   11770:	bne	117d4 <__assert_fail@plt+0x628>
   11774:	movw	r3, #45340	; 0xb11c
   11778:	movt	r3, #2
   1177c:	movw	r0, #45436	; 0xb17c
   11780:	movt	r0, #2
   11784:	mov	r4, #0
   11788:	str	r4, [sp, #8]
   1178c:	movw	r2, #42136	; 0xa498
   11790:	movt	r2, #1
   11794:	str	r2, [sp, #4]
   11798:	movw	r2, #42152	; 0xa4a8
   1179c:	movt	r2, #1
   117a0:	str	r2, [sp]
   117a4:	ldr	r3, [r3]
   117a8:	movw	r2, #41940	; 0xa3d4
   117ac:	movt	r2, #1
   117b0:	movw	r1, #40936	; 0x9fe8
   117b4:	movt	r1, #1
   117b8:	ldr	r0, [r0]
   117bc:	bl	18d00 <__assert_fail@plt+0x7b54>
   117c0:	mov	r0, r4
   117c4:	bl	11038 <exit@plt>
   117c8:	sub	r0, r0, #43	; 0x2b
   117cc:	cmp	r0, #1
   117d0:	bls	11818 <__assert_fail@plt+0x66c>
   117d4:	mov	r0, #1
   117d8:	bl	112a8 <__assert_fail@plt+0xfc>
   117dc:	cmp	r0, #82	; 0x52
   117e0:	bne	117f8 <__assert_fail@plt+0x64c>
   117e4:	movw	r3, #45448	; 0xb188
   117e8:	movt	r3, #2
   117ec:	mov	r2, #1
   117f0:	strb	r2, [r3, #2]
   117f4:	b	11928 <__assert_fail@plt+0x77c>
   117f8:	ble	11810 <__assert_fail@plt+0x664>
   117fc:	cmp	r0, #88	; 0x58
   11800:	beq	11818 <__assert_fail@plt+0x66c>
   11804:	cmp	r0, #97	; 0x61
   11808:	bne	117d4 <__assert_fail@plt+0x628>
   1180c:	b	11818 <__assert_fail@plt+0x66c>
   11810:	cmp	r0, #61	; 0x3d
   11814:	bne	117d4 <__assert_fail@plt+0x628>
   11818:	movw	r3, #45424	; 0xb170
   1181c:	movt	r3, #2
   11820:	ldr	r3, [r3]
   11824:	sub	r3, r3, #-1073741823	; 0xc0000001
   11828:	ldr	r3, [r6, r3, lsl #2]
   1182c:	str	r3, [sp, #32]
   11830:	mov	r0, r3
   11834:	bl	11044 <strlen@plt>
   11838:	str	r0, [sp, #36]	; 0x24
   1183c:	cmp	r8, #0
   11840:	moveq	r9, r8
   11844:	addne	r9, r8, #1
   11848:	add	r3, r0, r9
   1184c:	mov	r2, r3
   11850:	str	r3, [sp, #28]
   11854:	ldr	r3, [sp, #164]	; 0xa4
   11858:	cmp	r3, r2
   1185c:	bls	118e0 <__assert_fail@plt+0x734>
   11860:	mov	r3, #44	; 0x2c
   11864:	strb	r3, [r4, r8]
   11868:	ldr	r3, [sp, #36]	; 0x24
   1186c:	add	r2, r3, #1
   11870:	ldr	r1, [sp, #32]
   11874:	add	r0, r4, r9
   11878:	bl	10f24 <memcpy@plt>
   1187c:	movw	r3, #45448	; 0xb188
   11880:	movt	r3, #2
   11884:	mov	r2, #1
   11888:	strb	r2, [r3]
   1188c:	ldr	r8, [sp, #28]
   11890:	b	11928 <__assert_fail@plt+0x77c>
   11894:	cmp	r0, #111	; 0x6f
   11898:	beq	11818 <__assert_fail@plt+0x66c>
   1189c:	bgt	118c8 <__assert_fail@plt+0x71c>
   118a0:	cmp	r0, #102	; 0x66
   118a4:	bne	118bc <__assert_fail@plt+0x710>
   118a8:	movw	r3, #45448	; 0xb188
   118ac:	movt	r3, #2
   118b0:	mov	r2, #1
   118b4:	strb	r2, [r3, #1]
   118b8:	b	11928 <__assert_fail@plt+0x77c>
   118bc:	cmp	r0, #103	; 0x67
   118c0:	bne	117d4 <__assert_fail@plt+0x628>
   118c4:	b	11818 <__assert_fail@plt+0x66c>
   118c8:	cmp	r0, #114	; 0x72
   118cc:	blt	117d4 <__assert_fail@plt+0x628>
   118d0:	b	11818 <__assert_fail@plt+0x66c>
   118d4:	cmp	r0, #120	; 0x78
   118d8:	bgt	117d4 <__assert_fail@plt+0x628>
   118dc:	b	11818 <__assert_fail@plt+0x66c>
   118e0:	add	r3, r2, #1
   118e4:	str	r3, [sp, #164]	; 0xa4
   118e8:	add	r1, sp, #164	; 0xa4
   118ec:	mov	r0, r4
   118f0:	bl	19008 <__assert_fail@plt+0x7e5c>
   118f4:	mov	r4, r0
   118f8:	b	11860 <__assert_fail@plt+0x6b4>
   118fc:	mov	r3, #1
   11900:	str	r3, [r7]
   11904:	b	11928 <__assert_fail@plt+0x77c>
   11908:	mov	r3, #0
   1190c:	str	r3, [r7]
   11910:	b	11928 <__assert_fail@plt+0x77c>
   11914:	mov	r0, #0
   11918:	bl	112a8 <__assert_fail@plt+0xfc>
   1191c:	mov	sl, #0
   11920:	b	11928 <__assert_fail@plt+0x77c>
   11924:	mov	sl, #1
   11928:	mov	r3, #0
   1192c:	str	r3, [sp]
   11930:	mov	r3, fp
   11934:	mov	r2, r5
   11938:	mov	r1, r6
   1193c:	ldr	r0, [sp, #20]
   11940:	bl	11020 <getopt_long@plt>
   11944:	cmn	r0, #1
   11948:	beq	1199c <__assert_fail@plt+0x7f0>
   1194c:	cmp	r0, #99	; 0x63
   11950:	beq	118fc <__assert_fail@plt+0x750>
   11954:	ble	11750 <__assert_fail@plt+0x5a4>
   11958:	cmp	r0, #118	; 0x76
   1195c:	beq	11908 <__assert_fail@plt+0x75c>
   11960:	ble	11894 <__assert_fail@plt+0x6e8>
   11964:	cmp	r0, #256	; 0x100
   11968:	beq	1191c <__assert_fail@plt+0x770>
   1196c:	ble	118d4 <__assert_fail@plt+0x728>
   11970:	movw	r3, #257	; 0x101
   11974:	cmp	r0, r3
   11978:	beq	11924 <__assert_fail@plt+0x778>
   1197c:	movw	r3, #258	; 0x102
   11980:	cmp	r0, r3
   11984:	bne	117d4 <__assert_fail@plt+0x628>
   11988:	movw	r3, #45440	; 0xb180
   1198c:	movt	r3, #2
   11990:	ldr	r3, [r3]
   11994:	str	r3, [sp, #24]
   11998:	b	11928 <__assert_fail@plt+0x77c>
   1199c:	ldr	r3, [sp, #24]
   119a0:	cmp	r3, #0
   119a4:	beq	119dc <__assert_fail@plt+0x830>
   119a8:	cmp	r4, #0
   119ac:	beq	1239c <__assert_fail@plt+0x11f0>
   119b0:	mov	r2, #5
   119b4:	movw	r1, #42236	; 0xa4fc
   119b8:	movt	r1, #1
   119bc:	mov	r0, #0
   119c0:	bl	10f54 <dcgettext@plt>
   119c4:	mov	r2, r0
   119c8:	mov	r1, #0
   119cc:	mov	r0, r1
   119d0:	bl	10fd8 <error@plt>
   119d4:	mov	r0, #1
   119d8:	bl	112a8 <__assert_fail@plt+0xfc>
   119dc:	cmp	r4, #0
   119e0:	beq	11a38 <__assert_fail@plt+0x88c>
   119e4:	movw	r3, #45424	; 0xb170
   119e8:	movt	r3, #2
   119ec:	ldr	r3, [r3]
   119f0:	ldr	r2, [sp, #20]
   119f4:	cmp	r2, r3
   119f8:	bgt	11ae8 <__assert_fail@plt+0x93c>
   119fc:	sub	r3, r3, #-1073741823	; 0xc0000001
   11a00:	ldr	r3, [r6, r3, lsl #2]
   11a04:	cmp	r3, r4
   11a08:	beq	11a68 <__assert_fail@plt+0x8bc>
   11a0c:	mov	r2, #5
   11a10:	movw	r1, #42280	; 0xa528
   11a14:	movt	r1, #1
   11a18:	mov	r0, #0
   11a1c:	bl	10f54 <dcgettext@plt>
   11a20:	mov	r2, r0
   11a24:	mov	r1, #0
   11a28:	mov	r0, r1
   11a2c:	bl	10fd8 <error@plt>
   11a30:	mov	r0, #1
   11a34:	bl	112a8 <__assert_fail@plt+0xfc>
   11a38:	movw	r2, #45424	; 0xb170
   11a3c:	movt	r2, #2
   11a40:	ldr	r1, [r2]
   11a44:	add	r3, r1, #1
   11a48:	str	r3, [r2]
   11a4c:	ldr	r4, [r6, r1, lsl #2]
   11a50:	ldr	r2, [sp, #20]
   11a54:	cmp	r3, r2
   11a58:	blt	11ae8 <__assert_fail@plt+0x93c>
   11a5c:	cmp	r4, #0
   11a60:	bne	119fc <__assert_fail@plt+0x850>
   11a64:	b	11a0c <__assert_fail@plt+0x860>
   11a68:	mov	r2, #5
   11a6c:	movw	r1, #42296	; 0xa538
   11a70:	movt	r1, #1
   11a74:	mov	r0, #0
   11a78:	bl	10f54 <dcgettext@plt>
   11a7c:	mov	r4, r0
   11a80:	ldr	r3, [sp, #20]
   11a84:	sub	r3, r3, #-1073741823	; 0xc0000001
   11a88:	ldr	r0, [r6, r3, lsl #2]
   11a8c:	bl	18754 <__assert_fail@plt+0x75a8>
   11a90:	mov	r3, r0
   11a94:	mov	r2, r4
   11a98:	mov	r1, #0
   11a9c:	mov	r0, r1
   11aa0:	bl	10fd8 <error@plt>
   11aa4:	b	11a30 <__assert_fail@plt+0x884>
   11aa8:	bl	11068 <__errno_location@plt>
   11aac:	ldr	r4, [r0]
   11ab0:	mov	r2, #5
   11ab4:	movw	r1, #42324	; 0xa554
   11ab8:	movt	r1, #1
   11abc:	mov	r0, #0
   11ac0:	bl	10f54 <dcgettext@plt>
   11ac4:	mov	r5, r0
   11ac8:	ldr	r1, [sp, #24]
   11acc:	mov	r0, #4
   11ad0:	bl	18464 <__assert_fail@plt+0x72b8>
   11ad4:	mov	r3, r0
   11ad8:	mov	r2, r5
   11adc:	mov	r1, r4
   11ae0:	mov	r0, #1
   11ae4:	bl	10fd8 <error@plt>
   11ae8:	mov	r0, r4
   11aec:	bl	15e14 <__assert_fail@plt+0x4c68>
   11af0:	movw	r3, #45448	; 0xb188
   11af4:	movt	r3, #2
   11af8:	str	r0, [r3, #4]
   11afc:	cmp	r0, #0
   11b00:	beq	11b1c <__assert_fail@plt+0x970>
   11b04:	mov	r0, #0
   11b08:	bl	1114c <umask@plt>
   11b0c:	movw	r3, #45448	; 0xb188
   11b10:	movt	r3, #2
   11b14:	str	r0, [r3, #8]
   11b18:	b	123d0 <__assert_fail@plt+0x1224>
   11b1c:	mov	r2, #5
   11b20:	movw	r1, #42356	; 0xa574
   11b24:	movt	r1, #1
   11b28:	bl	10f54 <dcgettext@plt>
   11b2c:	mov	r5, r0
   11b30:	mov	r0, r4
   11b34:	bl	18754 <__assert_fail@plt+0x75a8>
   11b38:	mov	r3, r0
   11b3c:	mov	r2, r5
   11b40:	mov	r1, #0
   11b44:	mov	r0, r1
   11b48:	bl	10fd8 <error@plt>
   11b4c:	mov	r0, #1
   11b50:	bl	112a8 <__assert_fail@plt+0xfc>
   11b54:	movw	r4, #45448	; 0xb188
   11b58:	movt	r4, #2
   11b5c:	add	r0, r4, #16
   11b60:	bl	18774 <__assert_fail@plt+0x75c8>
   11b64:	str	r0, [r4, #32]
   11b68:	cmp	r0, #0
   11b6c:	bne	123f4 <__assert_fail@plt+0x1248>
   11b70:	bl	11068 <__errno_location@plt>
   11b74:	ldr	r4, [r0]
   11b78:	mov	r2, #5
   11b7c:	movw	r1, #42324	; 0xa554
   11b80:	movt	r1, #1
   11b84:	mov	r0, #0
   11b88:	bl	10f54 <dcgettext@plt>
   11b8c:	mov	r5, r0
   11b90:	movw	r1, #42376	; 0xa588
   11b94:	movt	r1, #1
   11b98:	mov	r0, #4
   11b9c:	bl	18464 <__assert_fail@plt+0x72b8>
   11ba0:	mov	r3, r0
   11ba4:	mov	r2, r5
   11ba8:	mov	r1, r4
   11bac:	mov	r0, #1
   11bb0:	bl	10fd8 <error@plt>
   11bb4:	bl	11068 <__errno_location@plt>
   11bb8:	mov	r4, r0
   11bbc:	ldr	r5, [r0]
   11bc0:	cmp	r5, #0
   11bc4:	beq	11be0 <__assert_fail@plt+0xa34>
   11bc8:	movw	r3, #45448	; 0xb188
   11bcc:	movt	r3, #2
   11bd0:	ldrb	sl, [r3, #1]
   11bd4:	cmp	sl, #0
   11bd8:	movne	sl, #0
   11bdc:	beq	11bf8 <__assert_fail@plt+0xa4c>
   11be0:	ldr	r0, [sp, #20]
   11be4:	bl	1427c <__assert_fail@plt+0x30d0>
   11be8:	cmp	r0, #0
   11bec:	bne	1236c <__assert_fail@plt+0x11c0>
   11bf0:	eor	r0, sl, #1
   11bf4:	bl	11038 <exit@plt>
   11bf8:	mov	r2, #5
   11bfc:	movw	r1, #42380	; 0xa58c
   11c00:	movt	r1, #1
   11c04:	mov	r0, #0
   11c08:	bl	10f54 <dcgettext@plt>
   11c0c:	mov	r2, r0
   11c10:	mov	r1, r5
   11c14:	mov	r0, #0
   11c18:	bl	10fd8 <error@plt>
   11c1c:	b	11be0 <__assert_fail@plt+0xa34>
   11c20:	ldr	r3, [r4, #48]	; 0x30
   11c24:	cmp	r3, #0
   11c28:	bne	11c38 <__assert_fail@plt+0xa8c>
   11c2c:	ldr	r3, [r4, #16]
   11c30:	cmp	r3, #0
   11c34:	beq	11c8c <__assert_fail@plt+0xae0>
   11c38:	movw	r3, #45448	; 0xb188
   11c3c:	movt	r3, #2
   11c40:	ldrb	r3, [r3, #1]
   11c44:	cmp	r3, #0
   11c48:	bne	11cbc <__assert_fail@plt+0xb10>
   11c4c:	ldr	r7, [r4, #32]
   11c50:	mov	r2, #5
   11c54:	movw	r1, #42396	; 0xa59c
   11c58:	movt	r1, #1
   11c5c:	mov	r0, fp
   11c60:	bl	10f54 <dcgettext@plt>
   11c64:	mov	r8, r0
   11c68:	mov	r1, r5
   11c6c:	mov	r0, #4
   11c70:	bl	18464 <__assert_fail@plt+0x72b8>
   11c74:	mov	r3, r0
   11c78:	mov	r2, r8
   11c7c:	mov	r1, r7
   11c80:	mov	r0, fp
   11c84:	bl	10fd8 <error@plt>
   11c88:	b	11cbc <__assert_fail@plt+0xb10>
   11c8c:	mov	r7, #1
   11c90:	str	r7, [r4, #16]
   11c94:	mov	r2, r7
   11c98:	mov	r1, r4
   11c9c:	ldr	r0, [sp, #20]
   11ca0:	bl	14a88 <__assert_fail@plt+0x38dc>
   11ca4:	b	1220c <__assert_fail@plt+0x1060>
   11ca8:	movw	r3, #45448	; 0xb188
   11cac:	movt	r3, #2
   11cb0:	ldrb	r3, [r3, #1]
   11cb4:	cmp	r3, #0
   11cb8:	beq	11d24 <__assert_fail@plt+0xb78>
   11cbc:	ldr	r3, [r6]
   11cc0:	cmp	r3, #2
   11cc4:	moveq	r7, fp
   11cc8:	beq	121ec <__assert_fail@plt+0x1040>
   11ccc:	mov	r9, fp
   11cd0:	ldr	r8, [sp, #24]
   11cd4:	mov	r7, r8
   11cd8:	ldr	r3, [r6]
   11cdc:	cmp	r3, #0
   11ce0:	bne	121ec <__assert_fail@plt+0x1040>
   11ce4:	mov	r1, r5
   11ce8:	mov	r0, #4
   11cec:	bl	18464 <__assert_fail@plt+0x72b8>
   11cf0:	str	r0, [sp, #28]
   11cf4:	cmp	r7, #0
   11cf8:	bne	121a4 <__assert_fail@plt+0xff8>
   11cfc:	mov	r2, #5
   11d00:	movw	r1, #42948	; 0xa7c4
   11d04:	movt	r1, #1
   11d08:	mov	r0, fp
   11d0c:	bl	10f54 <dcgettext@plt>
   11d10:	ldr	r2, [sp, #28]
   11d14:	mov	r1, r0
   11d18:	mov	r0, #1
   11d1c:	bl	11098 <__printf_chk@plt>
   11d20:	b	121d0 <__assert_fail@plt+0x1024>
   11d24:	ldr	r7, [r4, #32]
   11d28:	mov	r2, r5
   11d2c:	mov	r1, #3
   11d30:	mov	r0, fp
   11d34:	bl	18588 <__assert_fail@plt+0x73dc>
   11d38:	mov	r3, r0
   11d3c:	movw	r2, #43428	; 0xa9a4
   11d40:	movt	r2, #1
   11d44:	mov	r1, r7
   11d48:	mov	r0, fp
   11d4c:	bl	10fd8 <error@plt>
   11d50:	b	11cbc <__assert_fail@plt+0xb10>
   11d54:	movw	r3, #45448	; 0xb188
   11d58:	movt	r3, #2
   11d5c:	ldrb	r3, [r3, #1]
   11d60:	cmp	r3, #0
   11d64:	bne	11cbc <__assert_fail@plt+0xb10>
   11d68:	ldr	r7, [r4, #32]
   11d6c:	mov	r2, #5
   11d70:	movw	r1, #42416	; 0xa5b0
   11d74:	movt	r1, #1
   11d78:	mov	r0, fp
   11d7c:	bl	10f54 <dcgettext@plt>
   11d80:	mov	r8, r0
   11d84:	mov	r1, r5
   11d88:	mov	r0, #4
   11d8c:	bl	18464 <__assert_fail@plt+0x72b8>
   11d90:	mov	r3, r0
   11d94:	mov	r2, r8
   11d98:	mov	r1, r7
   11d9c:	mov	r0, fp
   11da0:	bl	10fd8 <error@plt>
   11da4:	b	11cbc <__assert_fail@plt+0xb10>
   11da8:	movw	r3, #45448	; 0xb188
   11dac:	movt	r3, #2
   11db0:	ldrb	r3, [r3, #1]
   11db4:	cmp	r3, #0
   11db8:	bne	11cbc <__assert_fail@plt+0xb10>
   11dbc:	mov	r2, #5
   11dc0:	movw	r1, #42444	; 0xa5cc
   11dc4:	movt	r1, #1
   11dc8:	mov	r0, fp
   11dcc:	bl	10f54 <dcgettext@plt>
   11dd0:	mov	r7, r0
   11dd4:	mov	r1, r5
   11dd8:	mov	r0, #4
   11ddc:	bl	18464 <__assert_fail@plt+0x72b8>
   11de0:	mov	r3, r0
   11de4:	mov	r2, r7
   11de8:	mov	r1, fp
   11dec:	mov	r0, fp
   11df0:	bl	10fd8 <error@plt>
   11df4:	b	11cbc <__assert_fail@plt+0xb10>
   11df8:	mov	r1, r4
   11dfc:	ldr	r0, [sp, #20]
   11e00:	bl	19308 <__assert_fail@plt+0x815c>
   11e04:	cmp	r0, #0
   11e08:	bne	11e60 <__assert_fail@plt+0xcb4>
   11e0c:	movw	r3, #45448	; 0xb188
   11e10:	movt	r3, #2
   11e14:	ldr	ip, [r3, #32]
   11e18:	cmp	ip, #0
   11e1c:	beq	11e34 <__assert_fail@plt+0xc88>
   11e20:	ldrd	r0, [r4, #160]	; 0xa0
   11e24:	ldrd	r2, [ip]
   11e28:	cmp	r1, r3
   11e2c:	cmpeq	r0, r2
   11e30:	beq	11ea4 <__assert_fail@plt+0xcf8>
   11e34:	ldr	r8, [r4, #80]	; 0x50
   11e38:	and	r1, r8, #61440	; 0xf000
   11e3c:	cmp	r1, #40960	; 0xa000
   11e40:	bne	11fac <__assert_fail@plt+0xe00>
   11e44:	mov	r9, fp
   11e48:	ldr	r8, [sp, #24]
   11e4c:	mov	r7, #2
   11e50:	ldr	r3, [r6]
   11e54:	cmp	r3, #2
   11e58:	bne	11cd8 <__assert_fail@plt+0xb2c>
   11e5c:	b	121ec <__assert_fail@plt+0x1040>
   11e60:	mov	r2, #5
   11e64:	movw	r1, #42484	; 0xa5f4
   11e68:	movt	r1, #1
   11e6c:	mov	r0, fp
   11e70:	bl	10f54 <dcgettext@plt>
   11e74:	mov	r4, r0
   11e78:	mov	r2, r5
   11e7c:	mov	r1, #3
   11e80:	mov	r0, fp
   11e84:	bl	18588 <__assert_fail@plt+0x73dc>
   11e88:	mov	r3, r0
   11e8c:	mov	r2, r4
   11e90:	mov	r1, fp
   11e94:	mov	r0, fp
   11e98:	bl	10fd8 <error@plt>
   11e9c:	mov	r7, fp
   11ea0:	b	1220c <__assert_fail@plt+0x1060>
   11ea4:	ldrd	r2, [r4, #64]	; 0x40
   11ea8:	ldrd	r0, [ip, #8]
   11eac:	cmp	r3, r1
   11eb0:	cmpeq	r2, r0
   11eb4:	bne	11e34 <__assert_fail@plt+0xc88>
   11eb8:	movw	r1, #42376	; 0xa588
   11ebc:	movt	r1, #1
   11ec0:	mov	r0, r5
   11ec4:	bl	10ee8 <strcmp@plt>
   11ec8:	cmp	r0, #0
   11ecc:	bne	11f50 <__assert_fail@plt+0xda4>
   11ed0:	mov	r2, #5
   11ed4:	movw	r1, #42672	; 0xa6b0
   11ed8:	movt	r1, #1
   11edc:	mov	r0, fp
   11ee0:	bl	10f54 <dcgettext@plt>
   11ee4:	mov	r7, r0
   11ee8:	mov	r1, r5
   11eec:	mov	r0, #4
   11ef0:	bl	18464 <__assert_fail@plt+0x72b8>
   11ef4:	mov	r3, r0
   11ef8:	mov	r2, r7
   11efc:	mov	r1, fp
   11f00:	mov	r0, fp
   11f04:	bl	10fd8 <error@plt>
   11f08:	mov	r2, #5
   11f0c:	movw	r1, #42780	; 0xa71c
   11f10:	movt	r1, #1
   11f14:	mov	r0, fp
   11f18:	bl	10f54 <dcgettext@plt>
   11f1c:	mov	r2, r0
   11f20:	mov	r1, fp
   11f24:	mov	r0, fp
   11f28:	bl	10fd8 <error@plt>
   11f2c:	mov	r2, #4
   11f30:	mov	r1, r4
   11f34:	ldr	r4, [sp, #20]
   11f38:	mov	r0, r4
   11f3c:	bl	14a88 <__assert_fail@plt+0x38dc>
   11f40:	mov	r0, r4
   11f44:	bl	143f8 <__assert_fail@plt+0x324c>
   11f48:	mov	r7, fp
   11f4c:	b	1220c <__assert_fail@plt+0x1060>
   11f50:	mov	r2, #5
   11f54:	movw	r1, #42720	; 0xa6e0
   11f58:	movt	r1, #1
   11f5c:	mov	r0, fp
   11f60:	bl	10f54 <dcgettext@plt>
   11f64:	mov	r7, r0
   11f68:	mov	r2, r5
   11f6c:	mov	r1, #4
   11f70:	mov	r0, fp
   11f74:	bl	183d8 <__assert_fail@plt+0x722c>
   11f78:	mov	r5, r0
   11f7c:	movw	r2, #42376	; 0xa588
   11f80:	movt	r2, #1
   11f84:	mov	r1, #4
   11f88:	mov	r0, #1
   11f8c:	bl	183d8 <__assert_fail@plt+0x722c>
   11f90:	str	r0, [sp]
   11f94:	mov	r3, r5
   11f98:	mov	r2, r7
   11f9c:	mov	r1, fp
   11fa0:	mov	r0, fp
   11fa4:	bl	10fd8 <error@plt>
   11fa8:	b	11f08 <__assert_fail@plt+0xd5c>
   11fac:	ldr	r7, [r4, #24]
   11fb0:	movw	r2, #45448	; 0xb188
   11fb4:	movt	r2, #2
   11fb8:	ldr	r3, [sp, #24]
   11fbc:	str	r3, [sp]
   11fc0:	ldr	r3, [r2, #4]
   11fc4:	ldr	r2, [r2, #8]
   11fc8:	cmp	r1, #16384	; 0x4000
   11fcc:	movne	r1, #0
   11fd0:	moveq	r1, #1
   11fd4:	mov	r0, r8
   11fd8:	bl	16250 <__assert_fail@plt+0x50a4>
   11fdc:	mov	r9, r0
   11fe0:	ldr	r3, [sp, #24]
   11fe4:	mov	r2, r0
   11fe8:	mov	r1, r7
   11fec:	ldr	r0, [sp, #20]
   11ff0:	ldr	r0, [r0, #32]
   11ff4:	bl	125d0 <__assert_fail@plt+0x1424>
   11ff8:	cmp	r0, #0
   11ffc:	bne	120ac <__assert_fail@plt+0xf00>
   12000:	ldr	r3, [r6]
   12004:	cmp	r3, #2
   12008:	moveq	r7, #4
   1200c:	beq	121d8 <__assert_fail@plt+0x102c>
   12010:	tst	r9, #3584	; 0xe00
   12014:	moveq	r3, r9
   12018:	bne	1210c <__assert_fail@plt+0xf60>
   1201c:	eor	r3, r3, r8
   12020:	ubfx	r3, r3, #0, #12
   12024:	cmp	r3, #0
   12028:	beq	1214c <__assert_fail@plt+0xfa0>
   1202c:	mov	r1, r5
   12030:	mov	r0, #4
   12034:	bl	18464 <__assert_fail@plt+0x72b8>
   12038:	str	r0, [sp, #28]
   1203c:	ubfx	r3, r9, #0, #12
   12040:	str	r3, [sp, #32]
   12044:	add	r1, sp, #44	; 0x2c
   12048:	mov	r0, r9
   1204c:	bl	1271c <__assert_fail@plt+0x1570>
   12050:	strb	fp, [sp, #54]	; 0x36
   12054:	add	r1, sp, #56	; 0x38
   12058:	mov	r0, r8
   1205c:	bl	1271c <__assert_fail@plt+0x1570>
   12060:	strb	fp, [sp, #66]	; 0x42
   12064:	mov	r7, #4
   12068:	mov	r2, #5
   1206c:	movw	r1, #42976	; 0xa7e0
   12070:	movt	r1, #1
   12074:	mov	r0, fp
   12078:	bl	10f54 <dcgettext@plt>
   1207c:	mov	r1, r0
   12080:	add	r3, sp, #45	; 0x2d
   12084:	str	r3, [sp, #8]
   12088:	ldr	r3, [sp, #32]
   1208c:	str	r3, [sp, #4]
   12090:	add	r3, sp, #57	; 0x39
   12094:	str	r3, [sp]
   12098:	ubfx	r3, r8, #0, #12
   1209c:	ldr	r2, [sp, #28]
   120a0:	mov	r0, #1
   120a4:	bl	11098 <__printf_chk@plt>
   120a8:	b	121d0 <__assert_fail@plt+0x1024>
   120ac:	movw	r3, #45448	; 0xb188
   120b0:	movt	r3, #2
   120b4:	ldrb	r3, [r3, #1]
   120b8:	cmp	r3, #0
   120bc:	beq	120c8 <__assert_fail@plt+0xf1c>
   120c0:	mov	r7, #1
   120c4:	b	11e50 <__assert_fail@plt+0xca4>
   120c8:	bl	11068 <__errno_location@plt>
   120cc:	ldr	r7, [r0]
   120d0:	mov	r2, #5
   120d4:	movw	r1, #42832	; 0xa750
   120d8:	movt	r1, #1
   120dc:	mov	r0, fp
   120e0:	bl	10f54 <dcgettext@plt>
   120e4:	str	r0, [sp, #28]
   120e8:	mov	r1, r5
   120ec:	mov	r0, #4
   120f0:	bl	18464 <__assert_fail@plt+0x72b8>
   120f4:	mov	r3, r0
   120f8:	ldr	r2, [sp, #28]
   120fc:	mov	r1, r7
   12100:	mov	r0, fp
   12104:	bl	10fd8 <error@plt>
   12108:	b	120c0 <__assert_fail@plt+0xf14>
   1210c:	ldr	r3, [sp, #24]
   12110:	str	r3, [sp]
   12114:	add	r3, sp, #56	; 0x38
   12118:	mov	r2, r7
   1211c:	ldr	r1, [sp, #20]
   12120:	ldr	r1, [r1, #32]
   12124:	mov	r0, #3
   12128:	bl	10f78 <__fxstatat64@plt>
   1212c:	cmp	r0, #0
   12130:	ldreq	r3, [sp, #72]	; 0x48
   12134:	beq	1201c <__assert_fail@plt+0xe70>
   12138:	movw	r3, #45448	; 0xb188
   1213c:	movt	r3, #2
   12140:	ldrb	r3, [r3, #1]
   12144:	cmp	r3, #0
   12148:	beq	12160 <__assert_fail@plt+0xfb4>
   1214c:	ldr	r3, [r6]
   12150:	cmp	r3, #0
   12154:	beq	1242c <__assert_fail@plt+0x1280>
   12158:	mov	r7, #3
   1215c:	b	121d0 <__assert_fail@plt+0x1024>
   12160:	bl	11068 <__errno_location@plt>
   12164:	ldr	r7, [r0]
   12168:	mov	r2, #5
   1216c:	movw	r1, #42860	; 0xa76c
   12170:	movt	r1, #1
   12174:	mov	r0, fp
   12178:	bl	10f54 <dcgettext@plt>
   1217c:	str	r0, [sp, #28]
   12180:	mov	r1, r5
   12184:	mov	r0, #4
   12188:	bl	18464 <__assert_fail@plt+0x72b8>
   1218c:	mov	r3, r0
   12190:	ldr	r2, [sp, #28]
   12194:	mov	r1, r7
   12198:	mov	r0, fp
   1219c:	bl	10fd8 <error@plt>
   121a0:	b	1214c <__assert_fail@plt+0xfa0>
   121a4:	cmp	r7, #2
   121a8:	bne	12440 <__assert_fail@plt+0x1294>
   121ac:	mov	r2, #5
   121b0:	movw	r1, #42892	; 0xa78c
   121b4:	movt	r1, #1
   121b8:	mov	r0, fp
   121bc:	bl	10f54 <dcgettext@plt>
   121c0:	ldr	r2, [sp, #28]
   121c4:	mov	r1, r0
   121c8:	mov	r0, #1
   121cc:	bl	11098 <__printf_chk@plt>
   121d0:	cmp	r7, #2
   121d4:	bls	121ec <__assert_fail@plt+0x1040>
   121d8:	movw	r3, #45448	; 0xb188
   121dc:	movt	r3, #2
   121e0:	ldrb	r3, [r3]
   121e4:	cmp	r3, #0
   121e8:	bne	122a0 <__assert_fail@plt+0x10f4>
   121ec:	movw	r3, #45448	; 0xb188
   121f0:	movt	r3, #2
   121f4:	ldrb	r3, [r3, #2]
   121f8:	cmp	r3, #0
   121fc:	beq	12350 <__assert_fail@plt+0x11a4>
   12200:	cmp	r7, #1
   12204:	movls	r7, #0
   12208:	movhi	r7, #1
   1220c:	and	sl, sl, r7
   12210:	ldr	r0, [sp, #20]
   12214:	bl	143f8 <__assert_fail@plt+0x324c>
   12218:	subs	r4, r0, #0
   1221c:	beq	11bb4 <__assert_fail@plt+0xa08>
   12220:	ldr	r5, [r4, #28]
   12224:	ldrh	r3, [r4, #56]	; 0x38
   12228:	sub	r3, r3, #2
   1222c:	cmp	r3, #11
   12230:	ldrls	pc, [pc, r3, lsl #2]
   12234:	b	11e0c <__assert_fail@plt+0xc60>
   12238:	strdeq	r1, [r1], -r8
   1223c:	andeq	r1, r1, ip, lsl #28
   12240:	andeq	r1, r1, r4, asr sp
   12244:	andeq	r1, r1, ip, lsl #28
   12248:	andeq	r2, r1, r4, ror #6
   1224c:	andeq	r1, r1, r8, lsr #25
   12250:	andeq	r1, r1, ip, lsl #28
   12254:	andeq	r1, r1, ip, lsl #28
   12258:	andeq	r1, r1, r0, lsr #24
   1225c:	andeq	r1, r1, ip, lsl #28
   12260:	andeq	r1, r1, ip, lsl #28
   12264:	andeq	r1, r1, r8, lsr #27
   12268:	mov	r2, #5
   1226c:	movw	r1, #43088	; 0xa850
   12270:	movt	r1, #1
   12274:	mov	r0, fp
   12278:	bl	10f54 <dcgettext@plt>
   1227c:	add	r3, sp, #45	; 0x2d
   12280:	str	r3, [sp]
   12284:	ldr	r3, [sp, #32]
   12288:	ldr	r2, [sp, #28]
   1228c:	mov	r1, r0
   12290:	mov	r0, #1
   12294:	bl	11098 <__printf_chk@plt>
   12298:	b	121d0 <__assert_fail@plt+0x1024>
   1229c:	bl	1117c <abort@plt>
   122a0:	movw	r3, #45448	; 0xb188
   122a4:	movt	r3, #2
   122a8:	and	r1, r8, #61440	; 0xf000
   122ac:	ldr	r2, [sp, #24]
   122b0:	str	r2, [sp]
   122b4:	ldr	r3, [r3, #4]
   122b8:	cmp	r1, #16384	; 0x4000
   122bc:	movne	r1, #0
   122c0:	moveq	r1, #1
   122c4:	mov	r0, r8
   122c8:	bl	16250 <__assert_fail@plt+0x50a4>
   122cc:	mov	r8, r0
   122d0:	bics	r3, r9, r0
   122d4:	beq	121ec <__assert_fail@plt+0x1040>
   122d8:	add	r1, sp, #44	; 0x2c
   122dc:	mov	r0, r9
   122e0:	bl	1271c <__assert_fail@plt+0x1570>
   122e4:	add	r1, sp, #56	; 0x38
   122e8:	mov	r0, r8
   122ec:	bl	1271c <__assert_fail@plt+0x1570>
   122f0:	strb	fp, [sp, #66]	; 0x42
   122f4:	strb	fp, [sp, #54]	; 0x36
   122f8:	mov	r2, #5
   122fc:	movw	r1, #43124	; 0xa874
   12300:	movt	r1, #1
   12304:	ldr	r8, [sp, #24]
   12308:	mov	r0, r8
   1230c:	bl	10f54 <dcgettext@plt>
   12310:	mov	r7, r0
   12314:	mov	r2, r5
   12318:	mov	r1, #3
   1231c:	mov	r0, r8
   12320:	bl	18588 <__assert_fail@plt+0x73dc>
   12324:	add	r3, sp, #57	; 0x39
   12328:	str	r3, [sp, #4]
   1232c:	add	r3, sp, #45	; 0x2d
   12330:	str	r3, [sp]
   12334:	mov	r3, r0
   12338:	mov	r2, r7
   1233c:	mov	r1, r8
   12340:	mov	r0, r8
   12344:	bl	10fd8 <error@plt>
   12348:	mov	r7, #1
   1234c:	b	121ec <__assert_fail@plt+0x1040>
   12350:	mov	r2, #4
   12354:	mov	r1, r4
   12358:	ldr	r0, [sp, #20]
   1235c:	bl	14a88 <__assert_fail@plt+0x38dc>
   12360:	b	12200 <__assert_fail@plt+0x1054>
   12364:	mov	r7, #1
   12368:	b	1220c <__assert_fail@plt+0x1060>
   1236c:	ldr	r4, [r4]
   12370:	mov	r2, #5
   12374:	movw	r1, #43160	; 0xa898
   12378:	movt	r1, #1
   1237c:	mov	r0, #0
   12380:	bl	10f54 <dcgettext@plt>
   12384:	mov	r2, r0
   12388:	mov	r1, r4
   1238c:	mov	r0, #0
   12390:	bl	10fd8 <error@plt>
   12394:	mov	sl, #0
   12398:	b	11bf0 <__assert_fail@plt+0xa44>
   1239c:	movw	r3, #45424	; 0xb170
   123a0:	movt	r3, #2
   123a4:	ldr	r3, [r3]
   123a8:	ldr	r2, [sp, #20]
   123ac:	cmp	r2, r3
   123b0:	ble	11a0c <__assert_fail@plt+0x860>
   123b4:	ldr	r0, [sp, #24]
   123b8:	bl	161e4 <__assert_fail@plt+0x5038>
   123bc:	movw	r3, #45448	; 0xb188
   123c0:	movt	r3, #2
   123c4:	str	r0, [r3, #4]
   123c8:	cmp	r0, #0
   123cc:	beq	11aa8 <__assert_fail@plt+0x8fc>
   123d0:	movw	r3, #45448	; 0xb188
   123d4:	movt	r3, #2
   123d8:	ldrb	r3, [r3, #2]
   123dc:	tst	sl, r3
   123e0:	bne	11b54 <__assert_fail@plt+0x9a8>
   123e4:	movw	r3, #45448	; 0xb188
   123e8:	movt	r3, #2
   123ec:	mov	r2, #0
   123f0:	str	r2, [r3, #32]
   123f4:	movw	r3, #45424	; 0xb170
   123f8:	movt	r3, #2
   123fc:	ldr	r0, [r3]
   12400:	mov	r2, #0
   12404:	movw	r1, #1041	; 0x411
   12408:	add	r0, r6, r0, lsl #2
   1240c:	bl	192b0 <__assert_fail@plt+0x8104>
   12410:	str	r0, [sp, #20]
   12414:	mov	sl, #1
   12418:	movw	r6, #45336	; 0xb118
   1241c:	movt	r6, #2
   12420:	mov	fp, #0
   12424:	str	fp, [sp, #24]
   12428:	b	12210 <__assert_fail@plt+0x1064>
   1242c:	mov	r1, r5
   12430:	mov	r0, #4
   12434:	bl	18464 <__assert_fail@plt+0x72b8>
   12438:	str	r0, [sp, #28]
   1243c:	mov	r7, #3
   12440:	ubfx	r3, r9, #0, #12
   12444:	str	r3, [sp, #32]
   12448:	add	r1, sp, #44	; 0x2c
   1244c:	mov	r0, r9
   12450:	bl	1271c <__assert_fail@plt+0x1570>
   12454:	strb	fp, [sp, #54]	; 0x36
   12458:	add	r1, sp, #56	; 0x38
   1245c:	mov	r0, r8
   12460:	bl	1271c <__assert_fail@plt+0x1570>
   12464:	strb	fp, [sp, #66]	; 0x42
   12468:	cmp	r7, #3
   1246c:	beq	12268 <__assert_fail@plt+0x10bc>
   12470:	cmp	r7, #4
   12474:	beq	12068 <__assert_fail@plt+0xebc>
   12478:	cmp	r7, #1
   1247c:	bne	1229c <__assert_fail@plt+0x10f0>
   12480:	mov	r2, #5
   12484:	movw	r1, #43028	; 0xa814
   12488:	movt	r1, #1
   1248c:	mov	r0, fp
   12490:	bl	10f54 <dcgettext@plt>
   12494:	mov	r1, r0
   12498:	b	12080 <__assert_fail@plt+0xed4>
   1249c:	andeq	r9, r1, r8, lsr pc
   124a0:	movw	r3, #45484	; 0xb1ac
   124a4:	movt	r3, #2
   124a8:	str	r0, [r3]
   124ac:	bx	lr
   124b0:	movw	r3, #45484	; 0xb1ac
   124b4:	movt	r3, #2
   124b8:	strb	r0, [r3, #4]
   124bc:	bx	lr
   124c0:	strd	r4, [sp, #-16]!
   124c4:	str	r6, [sp, #8]
   124c8:	str	lr, [sp, #12]
   124cc:	sub	sp, sp, #8
   124d0:	movw	r3, #45436	; 0xb17c
   124d4:	movt	r3, #2
   124d8:	ldr	r0, [r3]
   124dc:	bl	1944c <__assert_fail@plt+0x82a0>
   124e0:	cmp	r0, #0
   124e4:	beq	1250c <__assert_fail@plt+0x1360>
   124e8:	movw	r3, #45484	; 0xb1ac
   124ec:	movt	r3, #2
   124f0:	ldrb	r3, [r3, #4]
   124f4:	cmp	r3, #0
   124f8:	beq	12538 <__assert_fail@plt+0x138c>
   124fc:	bl	11068 <__errno_location@plt>
   12500:	ldr	r3, [r0]
   12504:	cmp	r3, #32
   12508:	bne	12538 <__assert_fail@plt+0x138c>
   1250c:	movw	r3, #45432	; 0xb178
   12510:	movt	r3, #2
   12514:	ldr	r0, [r3]
   12518:	bl	1944c <__assert_fail@plt+0x82a0>
   1251c:	cmp	r0, #0
   12520:	bne	125c0 <__assert_fail@plt+0x1414>
   12524:	add	sp, sp, #8
   12528:	ldrd	r4, [sp]
   1252c:	ldr	r6, [sp, #8]
   12530:	add	sp, sp, #12
   12534:	pop	{pc}		; (ldr pc, [sp], #4)
   12538:	mov	r2, #5
   1253c:	movw	r1, #43412	; 0xa994
   12540:	movt	r1, #1
   12544:	mov	r0, #0
   12548:	bl	10f54 <dcgettext@plt>
   1254c:	mov	r4, r0
   12550:	movw	r3, #45484	; 0xb1ac
   12554:	movt	r3, #2
   12558:	ldr	r5, [r3]
   1255c:	cmp	r5, #0
   12560:	beq	125a0 <__assert_fail@plt+0x13f4>
   12564:	bl	11068 <__errno_location@plt>
   12568:	ldr	r6, [r0]
   1256c:	mov	r0, r5
   12570:	bl	18550 <__assert_fail@plt+0x73a4>
   12574:	str	r4, [sp]
   12578:	mov	r3, r0
   1257c:	movw	r2, #43424	; 0xa9a0
   12580:	movt	r2, #1
   12584:	mov	r1, r6
   12588:	mov	r0, #0
   1258c:	bl	10fd8 <error@plt>
   12590:	movw	r3, #45344	; 0xb120
   12594:	movt	r3, #2
   12598:	ldr	r0, [r3]
   1259c:	bl	10f18 <_exit@plt>
   125a0:	bl	11068 <__errno_location@plt>
   125a4:	mov	r3, r4
   125a8:	movw	r2, #43428	; 0xa9a4
   125ac:	movt	r2, #1
   125b0:	ldr	r1, [r0]
   125b4:	mov	r0, #0
   125b8:	bl	10fd8 <error@plt>
   125bc:	b	12590 <__assert_fail@plt+0x13e4>
   125c0:	movw	r3, #45344	; 0xb120
   125c4:	movt	r3, #2
   125c8:	ldr	r0, [r3]
   125cc:	bl	10f18 <_exit@plt>
   125d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   125d4:	strd	r6, [sp, #8]
   125d8:	strd	r8, [sp, #16]
   125dc:	strd	sl, [sp, #24]
   125e0:	str	lr, [sp, #32]
   125e4:	sub	sp, sp, #148	; 0x94
   125e8:	mov	r6, r0
   125ec:	mov	r7, r1
   125f0:	mov	r8, r2
   125f4:	mov	r4, r3
   125f8:	cmp	r3, #256	; 0x100
   125fc:	beq	12638 <__assert_fail@plt+0x148c>
   12600:	mov	r3, r4
   12604:	mov	r2, r8
   12608:	mov	r1, r7
   1260c:	mov	r0, r6
   12610:	bl	1105c <fchmodat@plt>
   12614:	mov	r5, r0
   12618:	mov	r0, r5
   1261c:	add	sp, sp, #148	; 0x94
   12620:	ldrd	r4, [sp]
   12624:	ldrd	r6, [sp, #8]
   12628:	ldrd	r8, [sp, #16]
   1262c:	ldrd	sl, [sp, #24]
   12630:	add	sp, sp, #32
   12634:	pop	{pc}		; (ldr pc, [sp], #4)
   12638:	mov	r2, #2654208	; 0x288000
   1263c:	bl	11050 <openat64@plt>
   12640:	subs	r5, r0, #0
   12644:	blt	12618 <__assert_fail@plt+0x146c>
   12648:	mov	r3, #4096	; 0x1000
   1264c:	str	r3, [sp]
   12650:	add	r3, sp, #40	; 0x28
   12654:	movw	r2, #41224	; 0xa108
   12658:	movt	r2, #1
   1265c:	mov	r1, r5
   12660:	mov	r0, #3
   12664:	bl	10f78 <__fxstatat64@plt>
   12668:	subs	r4, r0, #0
   1266c:	bne	126e0 <__assert_fail@plt+0x1534>
   12670:	ldr	r3, [sp, #56]	; 0x38
   12674:	and	r3, r3, #61440	; 0xf000
   12678:	cmp	r3, #40960	; 0xa000
   1267c:	beq	12700 <__assert_fail@plt+0x1554>
   12680:	str	r5, [sp]
   12684:	movw	r3, #43432	; 0xa9a8
   12688:	movt	r3, #1
   1268c:	mov	r2, #26
   12690:	mov	r1, #1
   12694:	add	r0, sp, #12
   12698:	bl	11074 <__sprintf_chk@plt>
   1269c:	mov	r1, r8
   126a0:	add	r0, sp, #12
   126a4:	bl	11158 <chmod@plt>
   126a8:	mov	r9, r0
   126ac:	bl	11068 <__errno_location@plt>
   126b0:	mov	sl, r0
   126b4:	ldr	fp, [r0]
   126b8:	mov	r0, r5
   126bc:	bl	11188 <close@plt>
   126c0:	cmp	r9, #0
   126c4:	moveq	r5, r9
   126c8:	beq	12618 <__assert_fail@plt+0x146c>
   126cc:	cmp	fp, #2
   126d0:	strne	fp, [sl]
   126d4:	movne	r5, r9
   126d8:	bne	12618 <__assert_fail@plt+0x146c>
   126dc:	b	12600 <__assert_fail@plt+0x1454>
   126e0:	bl	11068 <__errno_location@plt>
   126e4:	mov	r4, r0
   126e8:	ldr	r6, [r0]
   126ec:	mov	r0, r5
   126f0:	bl	11188 <close@plt>
   126f4:	str	r6, [r4]
   126f8:	mvn	r5, #0
   126fc:	b	12618 <__assert_fail@plt+0x146c>
   12700:	mov	r0, r5
   12704:	bl	11188 <close@plt>
   12708:	bl	11068 <__errno_location@plt>
   1270c:	mov	r3, #95	; 0x5f
   12710:	str	r3, [r0]
   12714:	mvn	r5, #0
   12718:	b	12618 <__assert_fail@plt+0x146c>
   1271c:	and	r3, r0, #61440	; 0xf000
   12720:	cmp	r3, #32768	; 0x8000
   12724:	moveq	r3, #45	; 0x2d
   12728:	beq	12774 <__assert_fail@plt+0x15c8>
   1272c:	cmp	r3, #16384	; 0x4000
   12730:	moveq	r3, #100	; 0x64
   12734:	beq	12774 <__assert_fail@plt+0x15c8>
   12738:	cmp	r3, #24576	; 0x6000
   1273c:	moveq	r3, #98	; 0x62
   12740:	beq	12774 <__assert_fail@plt+0x15c8>
   12744:	cmp	r3, #8192	; 0x2000
   12748:	moveq	r3, #99	; 0x63
   1274c:	beq	12774 <__assert_fail@plt+0x15c8>
   12750:	cmp	r3, #40960	; 0xa000
   12754:	moveq	r3, #108	; 0x6c
   12758:	beq	12774 <__assert_fail@plt+0x15c8>
   1275c:	cmp	r3, #4096	; 0x1000
   12760:	moveq	r3, #112	; 0x70
   12764:	beq	12774 <__assert_fail@plt+0x15c8>
   12768:	cmp	r3, #49152	; 0xc000
   1276c:	movne	r3, #63	; 0x3f
   12770:	moveq	r3, #115	; 0x73
   12774:	strb	r3, [r1]
   12778:	and	r3, r0, #256	; 0x100
   1277c:	cmp	r3, #0
   12780:	movne	r3, #114	; 0x72
   12784:	moveq	r3, #45	; 0x2d
   12788:	strb	r3, [r1, #1]
   1278c:	and	r3, r0, #128	; 0x80
   12790:	cmp	r3, #0
   12794:	movne	r3, #119	; 0x77
   12798:	moveq	r3, #45	; 0x2d
   1279c:	strb	r3, [r1, #2]
   127a0:	tst	r0, #2048	; 0x800
   127a4:	beq	12858 <__assert_fail@plt+0x16ac>
   127a8:	and	r3, r0, #64	; 0x40
   127ac:	cmp	r3, #0
   127b0:	movne	r3, #115	; 0x73
   127b4:	moveq	r3, #83	; 0x53
   127b8:	strb	r3, [r1, #3]
   127bc:	and	r3, r0, #32
   127c0:	cmp	r3, #0
   127c4:	movne	r3, #114	; 0x72
   127c8:	moveq	r3, #45	; 0x2d
   127cc:	strb	r3, [r1, #4]
   127d0:	and	r3, r0, #16
   127d4:	cmp	r3, #0
   127d8:	movne	r3, #119	; 0x77
   127dc:	moveq	r3, #45	; 0x2d
   127e0:	strb	r3, [r1, #5]
   127e4:	tst	r0, #1024	; 0x400
   127e8:	beq	1286c <__assert_fail@plt+0x16c0>
   127ec:	and	r3, r0, #8
   127f0:	cmp	r3, #0
   127f4:	movne	r3, #115	; 0x73
   127f8:	moveq	r3, #83	; 0x53
   127fc:	strb	r3, [r1, #6]
   12800:	and	r3, r0, #4
   12804:	cmp	r3, #0
   12808:	movne	r3, #114	; 0x72
   1280c:	moveq	r3, #45	; 0x2d
   12810:	strb	r3, [r1, #7]
   12814:	and	r3, r0, #2
   12818:	cmp	r3, #0
   1281c:	movne	r3, #119	; 0x77
   12820:	moveq	r3, #45	; 0x2d
   12824:	strb	r3, [r1, #8]
   12828:	tst	r0, #512	; 0x200
   1282c:	beq	12880 <__assert_fail@plt+0x16d4>
   12830:	and	r0, r0, #1
   12834:	cmp	r0, #0
   12838:	movne	r3, #116	; 0x74
   1283c:	moveq	r3, #84	; 0x54
   12840:	strb	r3, [r1, #9]
   12844:	mov	r3, #32
   12848:	strb	r3, [r1, #10]
   1284c:	mov	r3, #0
   12850:	strb	r3, [r1, #11]
   12854:	bx	lr
   12858:	and	r3, r0, #64	; 0x40
   1285c:	cmp	r3, #0
   12860:	movne	r3, #120	; 0x78
   12864:	moveq	r3, #45	; 0x2d
   12868:	b	127b8 <__assert_fail@plt+0x160c>
   1286c:	and	r3, r0, #8
   12870:	cmp	r3, #0
   12874:	movne	r3, #120	; 0x78
   12878:	moveq	r3, #45	; 0x2d
   1287c:	b	127fc <__assert_fail@plt+0x1650>
   12880:	and	r0, r0, #1
   12884:	cmp	r0, #0
   12888:	movne	r3, #120	; 0x78
   1288c:	moveq	r3, #45	; 0x2d
   12890:	b	12840 <__assert_fail@plt+0x1694>
   12894:	str	r4, [sp, #-8]!
   12898:	str	lr, [sp, #4]
   1289c:	ldr	r0, [r0, #16]
   128a0:	bl	1271c <__assert_fail@plt+0x1570>
   128a4:	ldr	r4, [sp]
   128a8:	add	sp, sp, #4
   128ac:	pop	{pc}		; (ldr pc, [sp], #4)
   128b0:	strd	r4, [sp, #-8]!
   128b4:	ldrd	r4, [r0, #8]
   128b8:	ldrd	r2, [r1, #8]
   128bc:	cmp	r5, r3
   128c0:	cmpeq	r4, r2
   128c4:	movne	r0, #0
   128c8:	beq	128d8 <__assert_fail@plt+0x172c>
   128cc:	ldrd	r4, [sp]
   128d0:	add	sp, sp, #8
   128d4:	bx	lr
   128d8:	ldrd	r4, [r0]
   128dc:	ldrd	r2, [r1]
   128e0:	cmp	r5, r3
   128e4:	cmpeq	r4, r2
   128e8:	moveq	r0, #1
   128ec:	movne	r0, #0
   128f0:	b	128cc <__assert_fail@plt+0x1720>
   128f4:	str	r4, [sp, #-8]!
   128f8:	str	lr, [sp, #4]
   128fc:	mov	r2, r1
   12900:	mov	r3, #0
   12904:	ldrd	r0, [r0, #8]
   12908:	bl	19d04 <__assert_fail@plt+0x8b58>
   1290c:	mov	r0, r2
   12910:	ldr	r4, [sp]
   12914:	add	sp, sp, #4
   12918:	pop	{pc}		; (ldr pc, [sp], #4)
   1291c:	str	r4, [sp, #-8]!
   12920:	str	lr, [sp, #4]
   12924:	mov	r2, r1
   12928:	mov	r3, #0
   1292c:	ldrd	r0, [r0]
   12930:	bl	19d04 <__assert_fail@plt+0x8b58>
   12934:	mov	r0, r2
   12938:	ldr	r4, [sp]
   1293c:	add	sp, sp, #4
   12940:	pop	{pc}		; (ldr pc, [sp], #4)
   12944:	strd	r4, [sp, #-8]!
   12948:	ldrd	r4, [r0]
   1294c:	ldrd	r2, [r1]
   12950:	cmp	r5, r3
   12954:	cmpeq	r4, r2
   12958:	moveq	r0, #1
   1295c:	movne	r0, #0
   12960:	ldrd	r4, [sp]
   12964:	add	sp, sp, #8
   12968:	bx	lr
   1296c:	strd	r4, [sp, #-8]!
   12970:	ldr	r3, [r0]
   12974:	ldrd	r4, [r3, #160]	; 0xa0
   12978:	ldr	r3, [r1]
   1297c:	ldrd	r2, [r3, #160]	; 0xa0
   12980:	cmp	r5, r3
   12984:	cmpeq	r4, r2
   12988:	movhi	r0, #1
   1298c:	movls	r0, #0
   12990:	movcc	r3, #1
   12994:	movcs	r3, #0
   12998:	sub	r0, r0, r3
   1299c:	ldrd	r4, [sp]
   129a0:	add	sp, sp, #8
   129a4:	bx	lr
   129a8:	strd	r4, [sp, #-16]!
   129ac:	str	r6, [sp, #8]
   129b0:	str	lr, [sp, #12]
   129b4:	mov	r4, r0
   129b8:	ldr	r3, [r0, #36]	; 0x24
   129bc:	add	r1, r1, #256	; 0x100
   129c0:	adds	r1, r1, r3
   129c4:	bcs	129f4 <__assert_fail@plt+0x1848>
   129c8:	str	r1, [r0, #36]	; 0x24
   129cc:	ldr	r0, [r0, #24]
   129d0:	bl	193f0 <__assert_fail@plt+0x8244>
   129d4:	cmp	r0, #0
   129d8:	strne	r0, [r4, #24]
   129dc:	movne	r0, #1
   129e0:	beq	12a18 <__assert_fail@plt+0x186c>
   129e4:	ldrd	r4, [sp]
   129e8:	ldr	r6, [sp, #8]
   129ec:	add	sp, sp, #12
   129f0:	pop	{pc}		; (ldr pc, [sp], #4)
   129f4:	ldr	r0, [r0, #24]
   129f8:	bl	199b8 <__assert_fail@plt+0x880c>
   129fc:	mov	r5, #0
   12a00:	str	r5, [r4, #24]
   12a04:	bl	11068 <__errno_location@plt>
   12a08:	mov	r3, #36	; 0x24
   12a0c:	str	r3, [r0]
   12a10:	mov	r0, r5
   12a14:	b	129e4 <__assert_fail@plt+0x1838>
   12a18:	ldr	r0, [r4, #24]
   12a1c:	bl	199b8 <__assert_fail@plt+0x880c>
   12a20:	mov	r0, #0
   12a24:	str	r0, [r4, #24]
   12a28:	b	129e4 <__assert_fail@plt+0x1838>
   12a2c:	strd	r4, [sp, #-16]!
   12a30:	str	r6, [sp, #8]
   12a34:	str	lr, [sp, #12]
   12a38:	sub	sp, sp, #8
   12a3c:	mov	r4, r1
   12a40:	add	r5, r1, #64	; 0x40
   12a44:	ldr	r3, [r1, #48]	; 0x30
   12a48:	cmp	r3, #0
   12a4c:	bne	12a5c <__assert_fail@plt+0x18b0>
   12a50:	ldr	r3, [r0, #48]	; 0x30
   12a54:	tst	r3, #1
   12a58:	bne	12a6c <__assert_fail@plt+0x18c0>
   12a5c:	ldr	r3, [r0, #48]	; 0x30
   12a60:	ubfx	r3, r3, #1, #1
   12a64:	orrs	r3, r2, r3
   12a68:	beq	12ae0 <__assert_fail@plt+0x1934>
   12a6c:	mov	r2, r5
   12a70:	ldr	r1, [r4, #24]
   12a74:	mov	r0, #3
   12a78:	bl	11164 <__xstat64@plt>
   12a7c:	cmp	r0, #0
   12a80:	beq	12b04 <__assert_fail@plt+0x1958>
   12a84:	bl	11068 <__errno_location@plt>
   12a88:	mov	r6, r0
   12a8c:	ldr	r3, [r0]
   12a90:	cmp	r3, #2
   12a94:	bne	12ac0 <__assert_fail@plt+0x1914>
   12a98:	mov	r2, r5
   12a9c:	ldr	r1, [r4, #24]
   12aa0:	mov	r0, #3
   12aa4:	bl	11194 <__lxstat64@plt>
   12aa8:	cmp	r0, #0
   12aac:	bne	12ac0 <__assert_fail@plt+0x1914>
   12ab0:	mov	r3, #0
   12ab4:	str	r3, [r6]
   12ab8:	mov	r0, #13
   12abc:	b	12b28 <__assert_fail@plt+0x197c>
   12ac0:	ldr	r3, [r6]
   12ac4:	str	r3, [r4, #32]
   12ac8:	mov	r2, #104	; 0x68
   12acc:	mov	r1, #0
   12ad0:	mov	r0, r5
   12ad4:	bl	1108c <memset@plt>
   12ad8:	mov	r0, #10
   12adc:	b	12b28 <__assert_fail@plt+0x197c>
   12ae0:	mov	r3, #256	; 0x100
   12ae4:	str	r3, [sp]
   12ae8:	mov	r3, r5
   12aec:	ldr	r2, [r4, #24]
   12af0:	ldr	r1, [r0, #32]
   12af4:	mov	r0, #3
   12af8:	bl	10f78 <__fxstatat64@plt>
   12afc:	cmp	r0, #0
   12b00:	bne	12b3c <__assert_fail@plt+0x1990>
   12b04:	ldr	r3, [r4, #80]	; 0x50
   12b08:	and	r3, r3, #61440	; 0xf000
   12b0c:	cmp	r3, #16384	; 0x4000
   12b10:	beq	12b4c <__assert_fail@plt+0x19a0>
   12b14:	cmp	r3, #40960	; 0xa000
   12b18:	beq	12b94 <__assert_fail@plt+0x19e8>
   12b1c:	cmp	r3, #32768	; 0x8000
   12b20:	movne	r0, #3
   12b24:	moveq	r0, #8
   12b28:	add	sp, sp, #8
   12b2c:	ldrd	r4, [sp]
   12b30:	ldr	r6, [sp, #8]
   12b34:	add	sp, sp, #12
   12b38:	pop	{pc}		; (ldr pc, [sp], #4)
   12b3c:	bl	11068 <__errno_location@plt>
   12b40:	ldr	r3, [r0]
   12b44:	str	r3, [r4, #32]
   12b48:	b	12ac8 <__assert_fail@plt+0x191c>
   12b4c:	ldrb	r3, [r4, #168]	; 0xa8
   12b50:	cmp	r3, #46	; 0x2e
   12b54:	movne	r0, #1
   12b58:	bne	12b28 <__assert_fail@plt+0x197c>
   12b5c:	ldrb	r3, [r4, #169]	; 0xa9
   12b60:	cmp	r3, #0
   12b64:	beq	12b80 <__assert_fail@plt+0x19d4>
   12b68:	ldr	r3, [r4, #168]	; 0xa8
   12b6c:	bic	r3, r3, #-16777216	; 0xff000000
   12b70:	bic	r3, r3, #255	; 0xff
   12b74:	cmp	r3, #11776	; 0x2e00
   12b78:	movne	r0, #1
   12b7c:	bne	12b28 <__assert_fail@plt+0x197c>
   12b80:	ldr	r3, [r4, #48]	; 0x30
   12b84:	cmp	r3, #0
   12b88:	moveq	r0, #1
   12b8c:	movne	r0, #5
   12b90:	b	12b28 <__assert_fail@plt+0x197c>
   12b94:	mov	r0, #12
   12b98:	b	12b28 <__assert_fail@plt+0x197c>
   12b9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12ba0:	strd	r6, [sp, #8]
   12ba4:	str	r8, [sp, #16]
   12ba8:	str	lr, [sp, #20]
   12bac:	mov	r6, r0
   12bb0:	mov	r4, r1
   12bb4:	mov	r5, r2
   12bb8:	ldr	r7, [r0, #44]	; 0x2c
   12bbc:	ldr	r3, [r0, #40]	; 0x28
   12bc0:	cmp	r3, r2
   12bc4:	bcs	12bf0 <__assert_fail@plt+0x1a44>
   12bc8:	add	r1, r2, #40	; 0x28
   12bcc:	str	r1, [r0, #40]	; 0x28
   12bd0:	cmn	r1, #-1073741823	; 0xc0000001
   12bd4:	bhi	12c70 <__assert_fail@plt+0x1ac4>
   12bd8:	lsl	r1, r1, #2
   12bdc:	ldr	r0, [r0, #8]
   12be0:	bl	193f0 <__assert_fail@plt+0x8244>
   12be4:	cmp	r0, #0
   12be8:	strne	r0, [r6, #8]
   12bec:	beq	12c70 <__assert_fail@plt+0x1ac4>
   12bf0:	ldr	r3, [r6, #8]
   12bf4:	cmp	r4, #0
   12bf8:	beq	12c0c <__assert_fail@plt+0x1a60>
   12bfc:	str	r4, [r3], #4
   12c00:	ldr	r4, [r4, #8]
   12c04:	cmp	r4, #0
   12c08:	bne	12bfc <__assert_fail@plt+0x1a50>
   12c0c:	mov	r3, r7
   12c10:	mov	r2, #4
   12c14:	mov	r1, r5
   12c18:	ldr	r0, [r6, #8]
   12c1c:	bl	11134 <qsort@plt>
   12c20:	ldr	lr, [r6, #8]
   12c24:	ldr	r0, [lr]
   12c28:	subs	r3, r5, #1
   12c2c:	beq	12c50 <__assert_fail@plt+0x1aa4>
   12c30:	mov	r2, lr
   12c34:	ldr	r1, [r2]
   12c38:	ldr	ip, [r2, #4]!
   12c3c:	str	ip, [r1, #8]
   12c40:	subs	r3, r3, #1
   12c44:	bne	12c34 <__assert_fail@plt+0x1a88>
   12c48:	sub	r5, r5, #-1073741823	; 0xc0000001
   12c4c:	add	lr, lr, r5, lsl #2
   12c50:	ldr	r3, [lr]
   12c54:	mov	r2, #0
   12c58:	str	r2, [r3, #8]
   12c5c:	ldrd	r4, [sp]
   12c60:	ldrd	r6, [sp, #8]
   12c64:	ldr	r8, [sp, #16]
   12c68:	add	sp, sp, #20
   12c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c70:	ldr	r0, [r6, #8]
   12c74:	bl	199b8 <__assert_fail@plt+0x880c>
   12c78:	mov	r3, #0
   12c7c:	str	r3, [r6, #8]
   12c80:	str	r3, [r6, #40]	; 0x28
   12c84:	mov	r0, r4
   12c88:	b	12c5c <__assert_fail@plt+0x1ab0>
   12c8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12c90:	strd	r6, [sp, #8]
   12c94:	str	r8, [sp, #16]
   12c98:	str	lr, [sp, #20]
   12c9c:	mov	r6, r0
   12ca0:	mov	r7, r1
   12ca4:	mov	r5, r2
   12ca8:	add	r0, r2, #176	; 0xb0
   12cac:	bic	r0, r0, #7
   12cb0:	bl	193b4 <__assert_fail@plt+0x8208>
   12cb4:	subs	r4, r0, #0
   12cb8:	beq	12d04 <__assert_fail@plt+0x1b58>
   12cbc:	mov	r2, r5
   12cc0:	mov	r1, r7
   12cc4:	add	r0, r4, #168	; 0xa8
   12cc8:	bl	10f24 <memcpy@plt>
   12ccc:	add	r2, r4, r5
   12cd0:	mov	r3, #0
   12cd4:	strb	r3, [r2, #168]	; 0xa8
   12cd8:	str	r5, [r4, #52]	; 0x34
   12cdc:	str	r6, [r4, #44]	; 0x2c
   12ce0:	ldr	r2, [r6, #24]
   12ce4:	str	r2, [r4, #28]
   12ce8:	str	r3, [r4, #32]
   12cec:	str	r3, [r4, #12]
   12cf0:	strh	r3, [r4, #58]	; 0x3a
   12cf4:	mov	r2, #3
   12cf8:	strh	r2, [r4, #60]	; 0x3c
   12cfc:	str	r3, [r4, #16]
   12d00:	str	r3, [r4, #20]
   12d04:	mov	r0, r4
   12d08:	ldrd	r4, [sp]
   12d0c:	ldrd	r6, [sp, #8]
   12d10:	ldr	r8, [sp, #16]
   12d14:	add	sp, sp, #20
   12d18:	pop	{pc}		; (ldr pc, [sp], #4)
   12d1c:	str	r4, [sp, #-8]!
   12d20:	str	lr, [sp, #4]
   12d24:	sub	sp, sp, #8
   12d28:	mov	r4, r0
   12d2c:	ldr	r3, [r0, #48]	; 0x30
   12d30:	movw	r2, #258	; 0x102
   12d34:	tst	r2, r3
   12d38:	beq	12d80 <__assert_fail@plt+0x1bd4>
   12d3c:	movw	r3, #39352	; 0x99b8
   12d40:	movt	r3, #1
   12d44:	str	r3, [sp]
   12d48:	movw	r3, #10416	; 0x28b0
   12d4c:	movt	r3, #1
   12d50:	movw	r2, #10484	; 0x28f4
   12d54:	movt	r2, #1
   12d58:	mov	r1, #0
   12d5c:	mov	r0, #31
   12d60:	bl	1561c <__assert_fail@plt+0x4470>
   12d64:	str	r0, [r4, #56]	; 0x38
   12d68:	adds	r0, r0, #0
   12d6c:	movne	r0, #1
   12d70:	add	sp, sp, #8
   12d74:	ldr	r4, [sp]
   12d78:	add	sp, sp, #4
   12d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d80:	mov	r0, #32
   12d84:	bl	193b4 <__assert_fail@plt+0x8208>
   12d88:	str	r0, [r4, #56]	; 0x38
   12d8c:	cmp	r0, #0
   12d90:	moveq	r0, #0
   12d94:	beq	12d70 <__assert_fail@plt+0x1bc4>
   12d98:	bl	194d8 <__assert_fail@plt+0x832c>
   12d9c:	mov	r0, #1
   12da0:	b	12d70 <__assert_fail@plt+0x1bc4>
   12da4:	str	r4, [sp, #-8]!
   12da8:	str	lr, [sp, #4]
   12dac:	mov	ip, r1
   12db0:	ldr	r3, [r0, #48]	; 0x30
   12db4:	lsl	r2, r3, #11
   12db8:	and	r2, r2, #32768	; 0x8000
   12dbc:	orr	r2, r2, #540672	; 0x84000
   12dc0:	orr	r2, r2, #2304	; 0x900
   12dc4:	tst	r3, #512	; 0x200
   12dc8:	beq	12de0 <__assert_fail@plt+0x1c34>
   12dcc:	ldr	r0, [r0, #32]
   12dd0:	bl	163a8 <__assert_fail@plt+0x51fc>
   12dd4:	ldr	r4, [sp]
   12dd8:	add	sp, sp, #4
   12ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   12de0:	mov	r1, r2
   12de4:	mov	r0, ip
   12de8:	bl	1990c <__assert_fail@plt+0x8760>
   12dec:	b	12dd4 <__assert_fail@plt+0x1c28>
   12df0:	strd	r4, [sp, #-16]!
   12df4:	str	r6, [sp, #8]
   12df8:	str	lr, [sp, #12]
   12dfc:	subs	r4, r0, #0
   12e00:	bne	12e2c <__assert_fail@plt+0x1c80>
   12e04:	ldrd	r4, [sp]
   12e08:	ldr	r6, [sp, #8]
   12e0c:	add	sp, sp, #12
   12e10:	pop	{pc}		; (ldr pc, [sp], #4)
   12e14:	bl	111a0 <closedir@plt>
   12e18:	mov	r0, r4
   12e1c:	bl	199b8 <__assert_fail@plt+0x880c>
   12e20:	mov	r4, r5
   12e24:	cmp	r5, #0
   12e28:	beq	12e04 <__assert_fail@plt+0x1c58>
   12e2c:	ldr	r5, [r4, #8]
   12e30:	ldr	r0, [r4, #12]
   12e34:	cmp	r0, #0
   12e38:	bne	12e14 <__assert_fail@plt+0x1c68>
   12e3c:	b	12e18 <__assert_fail@plt+0x1c6c>
   12e40:	str	r4, [sp, #-8]!
   12e44:	str	lr, [sp, #4]
   12e48:	ldr	r3, [r0, #48]	; 0x30
   12e4c:	movw	r2, #258	; 0x102
   12e50:	tst	r2, r3
   12e54:	beq	12e74 <__assert_fail@plt+0x1cc8>
   12e58:	ldr	r0, [r0, #56]	; 0x38
   12e5c:	cmp	r0, #0
   12e60:	beq	12e68 <__assert_fail@plt+0x1cbc>
   12e64:	bl	157e8 <__assert_fail@plt+0x463c>
   12e68:	ldr	r4, [sp]
   12e6c:	add	sp, sp, #4
   12e70:	pop	{pc}		; (ldr pc, [sp], #4)
   12e74:	ldr	r0, [r0, #56]	; 0x38
   12e78:	bl	199b8 <__assert_fail@plt+0x880c>
   12e7c:	b	12e68 <__assert_fail@plt+0x1cbc>
   12e80:	str	r4, [sp, #-8]!
   12e84:	str	lr, [sp, #4]
   12e88:	mov	r4, r0
   12e8c:	mov	r0, r4
   12e90:	bl	15d70 <__assert_fail@plt+0x4bc4>
   12e94:	cmp	r0, #0
   12e98:	bne	12eb4 <__assert_fail@plt+0x1d08>
   12e9c:	mov	r0, r4
   12ea0:	bl	15dc4 <__assert_fail@plt+0x4c18>
   12ea4:	cmp	r0, #0
   12ea8:	blt	12e8c <__assert_fail@plt+0x1ce0>
   12eac:	bl	11188 <close@plt>
   12eb0:	b	12e8c <__assert_fail@plt+0x1ce0>
   12eb4:	ldr	r4, [sp]
   12eb8:	add	sp, sp, #4
   12ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ec0:	strd	r4, [sp, #-20]!	; 0xffffffec
   12ec4:	strd	r6, [sp, #8]
   12ec8:	str	lr, [sp, #16]
   12ecc:	sub	sp, sp, #116	; 0x74
   12ed0:	ldr	r7, [r0, #44]	; 0x2c
   12ed4:	ldr	r3, [r7, #48]	; 0x30
   12ed8:	ands	r3, r3, #512	; 0x200
   12edc:	beq	12fcc <__assert_fail@plt+0x1e20>
   12ee0:	mov	r6, r1
   12ee4:	mov	r5, r0
   12ee8:	ldr	r4, [r7, #52]	; 0x34
   12eec:	cmp	r4, #0
   12ef0:	beq	12f18 <__assert_fail@plt+0x1d6c>
   12ef4:	ldrd	r2, [r5, #64]	; 0x40
   12ef8:	strd	r2, [sp, #8]
   12efc:	add	r1, sp, #8
   12f00:	mov	r0, r4
   12f04:	bl	15328 <__assert_fail@plt+0x417c>
   12f08:	cmp	r0, #0
   12f0c:	beq	12f50 <__assert_fail@plt+0x1da4>
   12f10:	ldr	r3, [r0, #8]
   12f14:	b	12fcc <__assert_fail@plt+0x1e20>
   12f18:	movw	r3, #39352	; 0x99b8
   12f1c:	movt	r3, #1
   12f20:	str	r3, [sp]
   12f24:	movw	r3, #10564	; 0x2944
   12f28:	movt	r3, #1
   12f2c:	movw	r2, #10524	; 0x291c
   12f30:	movt	r2, #1
   12f34:	mov	r1, #0
   12f38:	mov	r0, #13
   12f3c:	bl	1561c <__assert_fail@plt+0x4470>
   12f40:	mov	r4, r0
   12f44:	str	r0, [r7, #52]	; 0x34
   12f48:	cmp	r0, #0
   12f4c:	bne	12ef4 <__assert_fail@plt+0x1d48>
   12f50:	cmp	r6, #0
   12f54:	blt	12fc8 <__assert_fail@plt+0x1e1c>
   12f58:	add	r1, sp, #24
   12f5c:	mov	r0, r6
   12f60:	bl	10eb8 <fstatfs64@plt>
   12f64:	cmp	r0, #0
   12f68:	bne	12fe4 <__assert_fail@plt+0x1e38>
   12f6c:	cmp	r4, #0
   12f70:	beq	12fb0 <__assert_fail@plt+0x1e04>
   12f74:	mov	r0, #16
   12f78:	bl	193b4 <__assert_fail@plt+0x8208>
   12f7c:	subs	r6, r0, #0
   12f80:	beq	12fb0 <__assert_fail@plt+0x1e04>
   12f84:	ldrd	r2, [r5, #64]	; 0x40
   12f88:	strd	r2, [r6]
   12f8c:	ldr	r3, [sp, #24]
   12f90:	str	r3, [r6, #8]
   12f94:	mov	r1, r6
   12f98:	mov	r0, r4
   12f9c:	bl	15bd0 <__assert_fail@plt+0x4a24>
   12fa0:	cmp	r0, #0
   12fa4:	beq	12fbc <__assert_fail@plt+0x1e10>
   12fa8:	cmp	r6, r0
   12fac:	bne	12fb8 <__assert_fail@plt+0x1e0c>
   12fb0:	ldr	r3, [sp, #24]
   12fb4:	b	12fcc <__assert_fail@plt+0x1e20>
   12fb8:	bl	1117c <abort@plt>
   12fbc:	mov	r0, r6
   12fc0:	bl	199b8 <__assert_fail@plt+0x880c>
   12fc4:	b	12fb0 <__assert_fail@plt+0x1e04>
   12fc8:	mov	r3, #0
   12fcc:	mov	r0, r3
   12fd0:	add	sp, sp, #116	; 0x74
   12fd4:	ldrd	r4, [sp]
   12fd8:	ldrd	r6, [sp, #8]
   12fdc:	add	sp, sp, #16
   12fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fe4:	mov	r3, #0
   12fe8:	b	12fcc <__assert_fail@plt+0x1e20>
   12fec:	strd	r4, [sp, #-16]!
   12ff0:	str	r6, [sp, #8]
   12ff4:	str	lr, [sp, #12]
   12ff8:	mov	r5, r0
   12ffc:	mov	r4, r1
   13000:	ldr	r3, [r0, #48]	; 0x30
   13004:	movw	r2, #258	; 0x102
   13008:	tst	r2, r3
   1300c:	beq	13080 <__assert_fail@plt+0x1ed4>
   13010:	mov	r0, #24
   13014:	bl	193b4 <__assert_fail@plt+0x8208>
   13018:	subs	r6, r0, #0
   1301c:	moveq	r0, #0
   13020:	beq	130a4 <__assert_fail@plt+0x1ef8>
   13024:	ldrd	r2, [r4, #64]	; 0x40
   13028:	strd	r2, [r6]
   1302c:	ldrd	r2, [r4, #160]	; 0xa0
   13030:	strd	r2, [r6, #8]
   13034:	str	r4, [r6, #16]
   13038:	mov	r1, r6
   1303c:	ldr	r0, [r5, #56]	; 0x38
   13040:	bl	15bd0 <__assert_fail@plt+0x4a24>
   13044:	mov	r5, r0
   13048:	cmp	r6, r0
   1304c:	moveq	r0, #1
   13050:	beq	130a4 <__assert_fail@plt+0x1ef8>
   13054:	mov	r0, r6
   13058:	bl	199b8 <__assert_fail@plt+0x880c>
   1305c:	cmp	r5, #0
   13060:	moveq	r0, #0
   13064:	beq	130a4 <__assert_fail@plt+0x1ef8>
   13068:	ldr	r3, [r5, #16]
   1306c:	str	r3, [r4]
   13070:	mov	r3, #2
   13074:	strh	r3, [r4, #56]	; 0x38
   13078:	mov	r0, #1
   1307c:	b	130a4 <__assert_fail@plt+0x1ef8>
   13080:	add	r1, r1, #64	; 0x40
   13084:	ldr	r0, [r0, #56]	; 0x38
   13088:	bl	194f4 <__assert_fail@plt+0x8348>
   1308c:	cmp	r0, #0
   13090:	moveq	r0, #1
   13094:	beq	130a4 <__assert_fail@plt+0x1ef8>
   13098:	str	r4, [r4]
   1309c:	mov	r3, #2
   130a0:	strh	r3, [r4, #56]	; 0x38
   130a4:	ldrd	r4, [sp]
   130a8:	ldr	r6, [sp, #8]
   130ac:	add	sp, sp, #12
   130b0:	pop	{pc}		; (ldr pc, [sp], #4)
   130b4:	strd	r4, [sp, #-16]!
   130b8:	str	r6, [sp, #8]
   130bc:	str	lr, [sp, #12]
   130c0:	mov	r5, r1
   130c4:	ldr	r1, [r0, #32]
   130c8:	cmp	r1, r5
   130cc:	movne	r3, #0
   130d0:	moveq	r3, #1
   130d4:	cmn	r1, #100	; 0x64
   130d8:	moveq	r3, #0
   130dc:	cmp	r3, #0
   130e0:	bne	13124 <__assert_fail@plt+0x1f78>
   130e4:	mov	r4, r0
   130e8:	cmp	r2, #0
   130ec:	bne	13128 <__assert_fail@plt+0x1f7c>
   130f0:	ldr	r3, [r0, #48]	; 0x30
   130f4:	eor	r3, r3, #4
   130f8:	ubfx	r3, r3, #2, #1
   130fc:	cmp	r1, #0
   13100:	movlt	r3, #0
   13104:	andge	r3, r3, #1
   13108:	cmp	r3, #0
   1310c:	bne	13140 <__assert_fail@plt+0x1f94>
   13110:	str	r5, [r4, #32]
   13114:	ldrd	r4, [sp]
   13118:	ldr	r6, [sp, #8]
   1311c:	add	sp, sp, #12
   13120:	pop	{pc}		; (ldr pc, [sp], #4)
   13124:	bl	1117c <abort@plt>
   13128:	add	r0, r0, #60	; 0x3c
   1312c:	bl	15d78 <__assert_fail@plt+0x4bcc>
   13130:	cmp	r0, #0
   13134:	blt	13110 <__assert_fail@plt+0x1f64>
   13138:	bl	11188 <close@plt>
   1313c:	b	13110 <__assert_fail@plt+0x1f64>
   13140:	mov	r0, r1
   13144:	bl	11188 <close@plt>
   13148:	b	13110 <__assert_fail@plt+0x1f64>
   1314c:	strd	r4, [sp, #-16]!
   13150:	str	r6, [sp, #8]
   13154:	str	lr, [sp, #12]
   13158:	mov	r4, r0
   1315c:	ldr	r3, [r0, #48]	; 0x30
   13160:	ands	r5, r3, #4
   13164:	movne	r5, #0
   13168:	bne	13180 <__assert_fail@plt+0x1fd4>
   1316c:	tst	r3, #512	; 0x200
   13170:	beq	1319c <__assert_fail@plt+0x1ff0>
   13174:	mov	r2, #1
   13178:	mvn	r1, #99	; 0x63
   1317c:	bl	130b4 <__assert_fail@plt+0x1f08>
   13180:	add	r0, r4, #60	; 0x3c
   13184:	bl	12e80 <__assert_fail@plt+0x1cd4>
   13188:	mov	r0, r5
   1318c:	ldrd	r4, [sp]
   13190:	ldr	r6, [sp, #8]
   13194:	add	sp, sp, #12
   13198:	pop	{pc}		; (ldr pc, [sp], #4)
   1319c:	ldr	r0, [r0, #28]
   131a0:	bl	11128 <fchdir@plt>
   131a4:	adds	r5, r0, #0
   131a8:	movne	r5, #1
   131ac:	b	13180 <__assert_fail@plt+0x1fd4>
   131b0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   131b4:	strd	r6, [sp, #8]
   131b8:	strd	r8, [sp, #16]
   131bc:	str	lr, [sp, #24]
   131c0:	sub	sp, sp, #108	; 0x6c
   131c4:	mov	r4, r0
   131c8:	mov	r7, r1
   131cc:	mov	r5, r2
   131d0:	subs	r9, r3, #0
   131d4:	beq	13300 <__assert_fail@plt+0x2154>
   131d8:	movw	r1, #43452	; 0xa9bc
   131dc:	movt	r1, #1
   131e0:	mov	r0, r9
   131e4:	bl	10ee8 <strcmp@plt>
   131e8:	cmp	r0, #0
   131ec:	bne	13300 <__assert_fail@plt+0x2154>
   131f0:	ldr	r3, [r4, #48]	; 0x30
   131f4:	tst	r3, #4
   131f8:	bne	13240 <__assert_fail@plt+0x2094>
   131fc:	cmp	r5, #0
   13200:	bge	132b4 <__assert_fail@plt+0x2108>
   13204:	tst	r3, #512	; 0x200
   13208:	beq	13220 <__assert_fail@plt+0x2074>
   1320c:	add	r6, r4, #60	; 0x3c
   13210:	mov	r0, r6
   13214:	bl	15d70 <__assert_fail@plt+0x4bc4>
   13218:	cmp	r0, #0
   1321c:	beq	1326c <__assert_fail@plt+0x20c0>
   13220:	mov	r8, #1
   13224:	mov	r1, r9
   13228:	mov	r0, r4
   1322c:	bl	12da4 <__assert_fail@plt+0x1bf8>
   13230:	subs	r6, r0, #0
   13234:	bge	1331c <__assert_fail@plt+0x2170>
   13238:	mvn	r4, #0
   1323c:	b	133a0 <__assert_fail@plt+0x21f4>
   13240:	ubfx	r3, r3, #9, #1
   13244:	cmp	r5, #0
   13248:	movlt	r3, #0
   1324c:	andge	r3, r3, #1
   13250:	cmp	r3, #0
   13254:	moveq	r4, #0
   13258:	beq	133a0 <__assert_fail@plt+0x21f4>
   1325c:	mov	r0, r5
   13260:	bl	11188 <close@plt>
   13264:	mov	r4, #0
   13268:	b	133a0 <__assert_fail@plt+0x21f4>
   1326c:	mov	r0, r6
   13270:	bl	15dc4 <__assert_fail@plt+0x4c18>
   13274:	subs	r6, r0, #0
   13278:	blt	13220 <__assert_fail@plt+0x2074>
   1327c:	ldr	r3, [r4, #48]	; 0x30
   13280:	tst	r3, #2
   13284:	bne	132c0 <__assert_fail@plt+0x2114>
   13288:	mov	r5, r6
   1328c:	mov	r8, #1
   13290:	ldr	r3, [r4, #48]	; 0x30
   13294:	tst	r3, #512	; 0x200
   13298:	bne	132cc <__assert_fail@plt+0x2120>
   1329c:	mov	r0, r6
   132a0:	bl	11128 <fchdir@plt>
   132a4:	mov	r4, r0
   132a8:	b	13398 <__assert_fail@plt+0x21ec>
   132ac:	mov	r8, #0
   132b0:	b	13224 <__assert_fail@plt+0x2078>
   132b4:	mov	r6, r5
   132b8:	mov	r8, #1
   132bc:	b	1331c <__assert_fail@plt+0x2170>
   132c0:	mov	r5, r6
   132c4:	mov	r8, #1
   132c8:	b	13348 <__assert_fail@plt+0x219c>
   132cc:	eor	r2, r8, #1
   132d0:	mov	r1, r6
   132d4:	mov	r0, r4
   132d8:	bl	130b4 <__assert_fail@plt+0x1f08>
   132dc:	mov	r4, #0
   132e0:	b	133a0 <__assert_fail@plt+0x21f4>
   132e4:	bl	11068 <__errno_location@plt>
   132e8:	mov	r5, r0
   132ec:	ldr	r7, [r0]
   132f0:	mov	r0, r6
   132f4:	bl	11188 <close@plt>
   132f8:	str	r7, [r5]
   132fc:	b	133a0 <__assert_fail@plt+0x21f4>
   13300:	ldr	r3, [r4, #48]	; 0x30
   13304:	tst	r3, #4
   13308:	bne	13240 <__assert_fail@plt+0x2094>
   1330c:	cmp	r5, #0
   13310:	movge	r6, r5
   13314:	movge	r8, #0
   13318:	blt	132ac <__assert_fail@plt+0x2100>
   1331c:	ldr	r3, [r4, #48]	; 0x30
   13320:	tst	r3, #2
   13324:	bne	13348 <__assert_fail@plt+0x219c>
   13328:	cmp	r9, #0
   1332c:	beq	13290 <__assert_fail@plt+0x20e4>
   13330:	movw	r1, #43452	; 0xa9bc
   13334:	movt	r1, #1
   13338:	mov	r0, r9
   1333c:	bl	10ee8 <strcmp@plt>
   13340:	cmp	r0, #0
   13344:	bne	13290 <__assert_fail@plt+0x20e4>
   13348:	mov	r2, sp
   1334c:	mov	r1, r6
   13350:	mov	r0, #3
   13354:	bl	10f90 <__fxstat64@plt>
   13358:	cmp	r0, #0
   1335c:	bne	13394 <__assert_fail@plt+0x21e8>
   13360:	ldrd	r0, [r7, #64]	; 0x40
   13364:	ldrd	r2, [sp]
   13368:	cmp	r1, r3
   1336c:	cmpeq	r0, r2
   13370:	bne	13388 <__assert_fail@plt+0x21dc>
   13374:	ldrd	r0, [r7, #160]	; 0xa0
   13378:	ldrd	r2, [sp, #96]	; 0x60
   1337c:	cmp	r1, r3
   13380:	cmpeq	r0, r2
   13384:	beq	13290 <__assert_fail@plt+0x20e4>
   13388:	bl	11068 <__errno_location@plt>
   1338c:	mov	r3, #2
   13390:	str	r3, [r0]
   13394:	mvn	r4, #0
   13398:	cmp	r5, #0
   1339c:	blt	132e4 <__assert_fail@plt+0x2138>
   133a0:	mov	r0, r4
   133a4:	add	sp, sp, #108	; 0x6c
   133a8:	ldrd	r4, [sp]
   133ac:	ldrd	r6, [sp, #8]
   133b0:	ldrd	r8, [sp, #16]
   133b4:	add	sp, sp, #24
   133b8:	pop	{pc}		; (ldr pc, [sp], #4)
   133bc:	strd	r4, [sp, #-12]!
   133c0:	str	lr, [sp, #8]
   133c4:	sub	sp, sp, #28
   133c8:	ldr	r3, [r0, #48]	; 0x30
   133cc:	movw	r2, #258	; 0x102
   133d0:	tst	r2, r3
   133d4:	bne	13440 <__assert_fail@plt+0x2294>
   133d8:	ldr	ip, [r1, #4]
   133dc:	cmp	ip, #0
   133e0:	beq	13468 <__assert_fail@plt+0x22bc>
   133e4:	ldr	r3, [ip, #48]	; 0x30
   133e8:	cmp	r3, #0
   133ec:	blt	13468 <__assert_fail@plt+0x22bc>
   133f0:	ldr	lr, [r0, #56]	; 0x38
   133f4:	ldrd	r2, [lr, #16]
   133f8:	orrs	r3, r2, r3
   133fc:	beq	1347c <__assert_fail@plt+0x22d0>
   13400:	ldrd	r4, [lr]
   13404:	ldrd	r2, [r1, #160]	; 0xa0
   13408:	cmp	r5, r3
   1340c:	cmpeq	r4, r2
   13410:	bne	13468 <__assert_fail@plt+0x22bc>
   13414:	ldrd	r2, [lr, #8]
   13418:	ldrd	r4, [r1, #64]	; 0x40
   1341c:	cmp	r3, r5
   13420:	cmpeq	r2, r4
   13424:	bne	13468 <__assert_fail@plt+0x22bc>
   13428:	ldrd	r2, [ip, #64]	; 0x40
   1342c:	strd	r2, [lr, #8]
   13430:	ldr	r3, [r0, #56]	; 0x38
   13434:	ldrd	r0, [ip, #160]	; 0xa0
   13438:	strd	r0, [r3]
   1343c:	b	13468 <__assert_fail@plt+0x22bc>
   13440:	ldrd	r2, [r1, #64]	; 0x40
   13444:	strd	r2, [sp]
   13448:	ldrd	r2, [r1, #160]	; 0xa0
   1344c:	strd	r2, [sp, #8]
   13450:	mov	r1, sp
   13454:	ldr	r0, [r0, #56]	; 0x38
   13458:	bl	15c10 <__assert_fail@plt+0x4a64>
   1345c:	cmp	r0, #0
   13460:	beq	13478 <__assert_fail@plt+0x22cc>
   13464:	bl	199b8 <__assert_fail@plt+0x880c>
   13468:	add	sp, sp, #28
   1346c:	ldrd	r4, [sp]
   13470:	add	sp, sp, #8
   13474:	pop	{pc}		; (ldr pc, [sp], #4)
   13478:	bl	1117c <abort@plt>
   1347c:	bl	1117c <abort@plt>
   13480:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13484:	strd	r6, [sp, #8]
   13488:	strd	r8, [sp, #16]
   1348c:	strd	sl, [sp, #24]
   13490:	str	lr, [sp, #32]
   13494:	sub	sp, sp, #68	; 0x44
   13498:	mov	r5, r0
   1349c:	str	r1, [sp, #32]
   134a0:	ldr	r9, [r0]
   134a4:	ldr	r0, [r9, #12]
   134a8:	str	r0, [sp, #40]	; 0x28
   134ac:	cmp	r0, #0
   134b0:	beq	135c0 <__assert_fail@plt+0x2414>
   134b4:	bl	1111c <dirfd@plt>
   134b8:	str	r0, [sp, #60]	; 0x3c
   134bc:	cmp	r0, #0
   134c0:	blt	1357c <__assert_fail@plt+0x23d0>
   134c4:	ldr	r2, [r5, #44]	; 0x2c
   134c8:	movw	r3, #34464	; 0x86a0
   134cc:	movt	r3, #1
   134d0:	cmp	r2, #0
   134d4:	mvnne	r3, #0
   134d8:	str	r3, [sp, #16]
   134dc:	mov	r3, #1
   134e0:	str	r3, [sp, #52]	; 0x34
   134e4:	ldr	r3, [r9, #40]	; 0x28
   134e8:	sub	r1, r3, #1
   134ec:	ldr	r2, [r9, #28]
   134f0:	ldrb	r2, [r2, r1]
   134f4:	cmp	r2, #47	; 0x2f
   134f8:	movne	r1, r3
   134fc:	str	r1, [sp, #28]
   13500:	ldr	r3, [r5, #48]	; 0x30
   13504:	tst	r3, #4
   13508:	moveq	r3, #0
   1350c:	streq	r3, [sp, #20]
   13510:	beq	1352c <__assert_fail@plt+0x2380>
   13514:	ldr	r3, [r5, #24]
   13518:	add	r2, r3, r1
   1351c:	add	r2, r2, #1
   13520:	str	r2, [sp, #20]
   13524:	mov	r2, #47	; 0x2f
   13528:	strb	r2, [r3, r1]
   1352c:	ldr	r3, [sp, #28]
   13530:	add	sl, r3, #1
   13534:	ldr	fp, [r5, #36]	; 0x24
   13538:	sub	fp, fp, sl
   1353c:	ldr	r3, [r9, #48]	; 0x30
   13540:	add	r3, r3, #1
   13544:	str	r3, [sp, #12]
   13548:	mov	r3, #0
   1354c:	str	r3, [sp, #36]	; 0x24
   13550:	str	r3, [sp, #24]
   13554:	str	r3, [sp]
   13558:	mov	r8, r3
   1355c:	str	r3, [sp, #4]
   13560:	movw	r3, #6548	; 0x1994
   13564:	movt	r3, #258	; 0x102
   13568:	str	r3, [sp, #44]	; 0x2c
   1356c:	movw	r3, #19778	; 0x4d42
   13570:	movt	r3, #65363	; 0xff53
   13574:	str	r3, [sp, #48]	; 0x30
   13578:	b	13b58 <__assert_fail@plt+0x29ac>
   1357c:	ldr	r0, [r9, #12]
   13580:	bl	111a0 <closedir@plt>
   13584:	mov	r3, #0
   13588:	str	r3, [r9, #12]
   1358c:	ldr	r3, [sp, #32]
   13590:	cmp	r3, #3
   13594:	movne	r3, #0
   13598:	strne	r3, [sp, #4]
   1359c:	bne	13a08 <__assert_fail@plt+0x285c>
   135a0:	mov	r3, #4
   135a4:	strh	r3, [r9, #56]	; 0x38
   135a8:	bl	11068 <__errno_location@plt>
   135ac:	ldr	r3, [r0]
   135b0:	str	r3, [r9, #32]
   135b4:	mov	r3, #0
   135b8:	str	r3, [sp, #4]
   135bc:	b	13a08 <__assert_fail@plt+0x285c>
   135c0:	ldr	r3, [r5, #48]	; 0x30
   135c4:	and	r2, r3, #516	; 0x204
   135c8:	cmp	r2, #512	; 0x200
   135cc:	ldreq	r0, [r5, #32]
   135d0:	mvnne	r0, #99	; 0x63
   135d4:	ldr	r1, [r9, #24]
   135d8:	ands	r2, r3, #16
   135dc:	beq	135f8 <__assert_fail@plt+0x244c>
   135e0:	tst	r3, #1
   135e4:	moveq	r2, #32768	; 0x8000
   135e8:	beq	135f8 <__assert_fail@plt+0x244c>
   135ec:	ldr	r2, [r9, #48]	; 0x30
   135f0:	cmp	r2, #0
   135f4:	movne	r2, #32768	; 0x8000
   135f8:	add	r3, sp, #60	; 0x3c
   135fc:	bl	163e4 <__assert_fail@plt+0x5238>
   13600:	str	r0, [sp, #4]
   13604:	str	r0, [r9, #12]
   13608:	cmp	r0, #0
   1360c:	beq	136e0 <__assert_fail@plt+0x2534>
   13610:	ldrh	r3, [r9, #56]	; 0x38
   13614:	cmp	r3, #11
   13618:	beq	13704 <__assert_fail@plt+0x2558>
   1361c:	ldr	r3, [r5, #48]	; 0x30
   13620:	tst	r3, #256	; 0x100
   13624:	bne	1371c <__assert_fail@plt+0x2570>
   13628:	ldr	r2, [r5, #44]	; 0x2c
   1362c:	movw	r3, #34464	; 0x86a0
   13630:	movt	r3, #1
   13634:	cmp	r2, #0
   13638:	mvnne	r3, #0
   1363c:	str	r3, [sp, #16]
   13640:	ldr	r3, [sp, #32]
   13644:	cmp	r3, #2
   13648:	beq	13840 <__assert_fail@plt+0x2694>
   1364c:	ldr	r3, [r5, #48]	; 0x30
   13650:	and	r3, r3, #56	; 0x38
   13654:	cmp	r3, #24
   13658:	beq	13764 <__assert_fail@plt+0x25b8>
   1365c:	ldr	r3, [sp, #32]
   13660:	cmp	r3, #3
   13664:	movne	r4, #0
   13668:	moveq	r4, #1
   1366c:	mov	r6, #1
   13670:	ldr	r3, [r5, #48]	; 0x30
   13674:	tst	r3, #512	; 0x200
   13678:	bne	137fc <__assert_fail@plt+0x2650>
   1367c:	ldr	r2, [sp, #60]	; 0x3c
   13680:	cmp	r2, #0
   13684:	bge	13814 <__assert_fail@plt+0x2668>
   13688:	tst	r4, r6
   1368c:	beq	1369c <__assert_fail@plt+0x24f0>
   13690:	bl	11068 <__errno_location@plt>
   13694:	ldr	r3, [r0]
   13698:	str	r3, [r9, #32]
   1369c:	ldrh	r3, [r9, #58]	; 0x3a
   136a0:	orr	r3, r3, #1
   136a4:	strh	r3, [r9, #58]	; 0x3a
   136a8:	ldr	r0, [r9, #12]
   136ac:	bl	111a0 <closedir@plt>
   136b0:	mov	r3, #0
   136b4:	str	r3, [r9, #12]
   136b8:	ldr	r3, [r5, #48]	; 0x30
   136bc:	tst	r3, #512	; 0x200
   136c0:	beq	136d0 <__assert_fail@plt+0x2524>
   136c4:	ldr	r0, [sp, #60]	; 0x3c
   136c8:	cmp	r0, #0
   136cc:	bge	13838 <__assert_fail@plt+0x268c>
   136d0:	mov	r3, #0
   136d4:	str	r3, [r9, #12]
   136d8:	str	r3, [sp, #52]	; 0x34
   136dc:	b	134e4 <__assert_fail@plt+0x2338>
   136e0:	ldr	r3, [sp, #32]
   136e4:	cmp	r3, #3
   136e8:	bne	13a08 <__assert_fail@plt+0x285c>
   136ec:	mov	r3, #4
   136f0:	strh	r3, [r9, #56]	; 0x38
   136f4:	bl	11068 <__errno_location@plt>
   136f8:	ldr	r3, [r0]
   136fc:	str	r3, [r9, #32]
   13700:	b	13a08 <__assert_fail@plt+0x285c>
   13704:	mov	r2, #0
   13708:	mov	r1, r9
   1370c:	mov	r0, r5
   13710:	bl	12a2c <__assert_fail@plt+0x1880>
   13714:	strh	r0, [r9, #56]	; 0x38
   13718:	b	13628 <__assert_fail@plt+0x247c>
   1371c:	mov	r1, r9
   13720:	mov	r0, r5
   13724:	bl	133bc <__assert_fail@plt+0x2210>
   13728:	mov	r2, #0
   1372c:	mov	r1, r9
   13730:	mov	r0, r5
   13734:	bl	12a2c <__assert_fail@plt+0x1880>
   13738:	mov	r1, r9
   1373c:	mov	r0, r5
   13740:	bl	12fec <__assert_fail@plt+0x1e40>
   13744:	cmp	r0, #0
   13748:	bne	13628 <__assert_fail@plt+0x247c>
   1374c:	bl	11068 <__errno_location@plt>
   13750:	mov	r3, #12
   13754:	str	r3, [r0]
   13758:	ldr	r3, [sp, #40]	; 0x28
   1375c:	str	r3, [sp, #4]
   13760:	b	13a08 <__assert_fail@plt+0x285c>
   13764:	ldr	r3, [r9, #84]	; 0x54
   13768:	cmp	r3, #2
   1376c:	bne	1365c <__assert_fail@plt+0x24b0>
   13770:	ldr	r1, [sp, #60]	; 0x3c
   13774:	mov	r0, r9
   13778:	bl	12ec0 <__assert_fail@plt+0x1d14>
   1377c:	movw	r3, #26985	; 0x6969
   13780:	cmp	r0, r3
   13784:	beq	137e4 <__assert_fail@plt+0x2638>
   13788:	bgt	137c8 <__assert_fail@plt+0x261c>
   1378c:	movw	r3, #19778	; 0x4d42
   13790:	movt	r3, #65363	; 0xff53
   13794:	cmp	r0, r3
   13798:	beq	137e4 <__assert_fail@plt+0x2638>
   1379c:	cmp	r0, #0
   137a0:	beq	137e4 <__assert_fail@plt+0x2638>
   137a4:	ldr	r3, [sp, #32]
   137a8:	cmp	r3, #3
   137ac:	moveq	r4, #1
   137b0:	movne	r4, #0
   137b4:	movne	r3, #0
   137b8:	strne	r3, [sp, #52]	; 0x34
   137bc:	bne	134e4 <__assert_fail@plt+0x2338>
   137c0:	mov	r6, #0
   137c4:	b	13670 <__assert_fail@plt+0x24c4>
   137c8:	movw	r3, #40864	; 0x9fa0
   137cc:	cmp	r0, r3
   137d0:	beq	137e4 <__assert_fail@plt+0x2638>
   137d4:	movw	r3, #16719	; 0x414f
   137d8:	movt	r3, #21318	; 0x5346
   137dc:	cmp	r0, r3
   137e0:	bne	137a4 <__assert_fail@plt+0x25f8>
   137e4:	ldr	r3, [sp, #32]
   137e8:	cmp	r3, #3
   137ec:	movne	r4, #0
   137f0:	moveq	r4, #1
   137f4:	mov	r6, #1
   137f8:	b	13670 <__assert_fail@plt+0x24c4>
   137fc:	mov	r2, #3
   13800:	movw	r1, #1030	; 0x406
   13804:	ldr	r0, [sp, #60]	; 0x3c
   13808:	bl	196a0 <__assert_fail@plt+0x84f4>
   1380c:	str	r0, [sp, #60]	; 0x3c
   13810:	b	1367c <__assert_fail@plt+0x24d0>
   13814:	mov	r3, #0
   13818:	mov	r1, r9
   1381c:	mov	r0, r5
   13820:	bl	131b0 <__assert_fail@plt+0x2004>
   13824:	cmp	r0, #0
   13828:	moveq	r3, #1
   1382c:	streq	r3, [sp, #52]	; 0x34
   13830:	beq	134e4 <__assert_fail@plt+0x2338>
   13834:	b	13688 <__assert_fail@plt+0x24dc>
   13838:	bl	11188 <close@plt>
   1383c:	b	136d0 <__assert_fail@plt+0x2524>
   13840:	mov	r3, #0
   13844:	str	r3, [sp, #52]	; 0x34
   13848:	b	134e4 <__assert_fail@plt+0x2338>
   1384c:	ldr	r3, [sp, #8]
   13850:	ldr	r3, [r3]
   13854:	cmp	r3, #0
   13858:	beq	13878 <__assert_fail@plt+0x26cc>
   1385c:	str	r3, [r9, #32]
   13860:	ldr	r3, [sp, #40]	; 0x28
   13864:	orr	r3, r3, r8
   13868:	cmp	r3, #0
   1386c:	movne	r3, #7
   13870:	moveq	r3, #4
   13874:	strh	r3, [r9, #56]	; 0x38
   13878:	ldr	r0, [r9, #12]
   1387c:	cmp	r0, #0
   13880:	beq	13890 <__assert_fail@plt+0x26e4>
   13884:	bl	111a0 <closedir@plt>
   13888:	mov	r3, #0
   1388c:	str	r3, [r9, #12]
   13890:	ldr	r3, [sp, #24]
   13894:	cmp	r3, #0
   13898:	bne	13d58 <__assert_fail@plt+0x2bac>
   1389c:	ldr	r3, [r5, #48]	; 0x30
   138a0:	tst	r3, #4
   138a4:	beq	138d0 <__assert_fail@plt+0x2724>
   138a8:	ldr	r3, [r5, #36]	; 0x24
   138ac:	cmp	r8, #0
   138b0:	cmpne	r3, sl
   138b4:	bne	138c4 <__assert_fail@plt+0x2718>
   138b8:	ldr	r3, [sp, #20]
   138bc:	sub	r3, r3, #1
   138c0:	str	r3, [sp, #20]
   138c4:	mov	r3, #0
   138c8:	ldr	r2, [sp, #20]
   138cc:	strb	r3, [r2]
   138d0:	ldr	r3, [sp, #52]	; 0x34
   138d4:	ldr	r2, [sp, #40]	; 0x28
   138d8:	cmp	r2, #0
   138dc:	movne	r3, #0
   138e0:	cmp	r3, #0
   138e4:	beq	1391c <__assert_fail@plt+0x2770>
   138e8:	ldr	r3, [sp, #32]
   138ec:	cmp	r8, #0
   138f0:	cmpne	r3, #1
   138f4:	bne	13924 <__assert_fail@plt+0x2778>
   138f8:	ldr	r3, [r9, #48]	; 0x30
   138fc:	cmp	r3, #0
   13900:	bne	13de8 <__assert_fail@plt+0x2c3c>
   13904:	mov	r0, r5
   13908:	bl	1314c <__assert_fail@plt+0x1fa0>
   1390c:	adds	r0, r0, #0
   13910:	movne	r0, #1
   13914:	cmp	r0, #0
   13918:	bne	13e0c <__assert_fail@plt+0x2c60>
   1391c:	cmp	r8, #0
   13920:	beq	13e34 <__assert_fail@plt+0x2c88>
   13924:	ldr	r3, [sp, #36]	; 0x24
   13928:	cmp	r3, #0
   1392c:	bne	13e6c <__assert_fail@plt+0x2cc0>
   13930:	ldr	r3, [r5, #44]	; 0x2c
   13934:	cmp	r3, #0
   13938:	cmpne	r8, #1
   1393c:	bls	13a08 <__assert_fail@plt+0x285c>
   13940:	mov	r2, r8
   13944:	ldr	r1, [sp, #4]
   13948:	mov	r0, r5
   1394c:	bl	12b9c <__assert_fail@plt+0x19f0>
   13950:	str	r0, [sp, #4]
   13954:	b	13a08 <__assert_fail@plt+0x285c>
   13958:	ldrb	r3, [r7, #20]
   1395c:	cmp	r3, #0
   13960:	beq	13d50 <__assert_fail@plt+0x2ba4>
   13964:	ldrh	r3, [r7, #20]
   13968:	cmp	r3, #46	; 0x2e
   1396c:	bne	13b9c <__assert_fail@plt+0x29f0>
   13970:	ldr	r4, [sp]
   13974:	b	13b54 <__assert_fail@plt+0x29a8>
   13978:	ldr	fp, [r5, #24]
   1397c:	ldr	r3, [sp, #28]
   13980:	add	r1, r3, #2
   13984:	add	r1, r1, r6
   13988:	mov	r0, r5
   1398c:	bl	129a8 <__assert_fail@plt+0x17fc>
   13990:	cmp	r0, #0
   13994:	beq	139c4 <__assert_fail@plt+0x2818>
   13998:	ldr	r3, [r5, #24]
   1399c:	cmp	r3, fp
   139a0:	beq	13a28 <__assert_fail@plt+0x287c>
   139a4:	ldr	r2, [r5, #48]	; 0x30
   139a8:	tst	r2, #4
   139ac:	addne	r3, r3, sl
   139b0:	strne	r3, [sp, #20]
   139b4:	ldr	fp, [r5, #36]	; 0x24
   139b8:	sub	fp, fp, sl
   139bc:	str	r0, [sp, #24]
   139c0:	b	13bcc <__assert_fail@plt+0x2a20>
   139c4:	ldr	r7, [sp, #8]
   139c8:	ldr	r6, [r7]
   139cc:	mov	r0, r4
   139d0:	bl	199b8 <__assert_fail@plt+0x880c>
   139d4:	ldr	r0, [sp, #4]
   139d8:	bl	12df0 <__assert_fail@plt+0x1c44>
   139dc:	ldr	r0, [r9, #12]
   139e0:	bl	111a0 <closedir@plt>
   139e4:	mov	r2, #0
   139e8:	str	r2, [r9, #12]
   139ec:	mov	r3, #7
   139f0:	strh	r3, [r9, #56]	; 0x38
   139f4:	ldr	r3, [r5, #48]	; 0x30
   139f8:	orr	r3, r3, #8192	; 0x2000
   139fc:	str	r3, [r5, #48]	; 0x30
   13a00:	str	r6, [r7]
   13a04:	str	r2, [sp, #4]
   13a08:	ldr	r0, [sp, #4]
   13a0c:	add	sp, sp, #68	; 0x44
   13a10:	ldrd	r4, [sp]
   13a14:	ldrd	r6, [sp, #8]
   13a18:	ldrd	r8, [sp, #16]
   13a1c:	ldrd	sl, [sp, #24]
   13a20:	add	sp, sp, #32
   13a24:	pop	{pc}		; (ldr pc, [sp], #4)
   13a28:	ldr	r0, [sp, #24]
   13a2c:	b	139b4 <__assert_fail@plt+0x2808>
   13a30:	mov	r0, r4
   13a34:	bl	199b8 <__assert_fail@plt+0x880c>
   13a38:	ldr	r0, [sp, #4]
   13a3c:	bl	12df0 <__assert_fail@plt+0x1c44>
   13a40:	ldr	r0, [r9, #12]
   13a44:	bl	111a0 <closedir@plt>
   13a48:	mov	r2, #0
   13a4c:	str	r2, [r9, #12]
   13a50:	mov	r3, #7
   13a54:	strh	r3, [r9, #56]	; 0x38
   13a58:	ldr	r3, [r5, #48]	; 0x30
   13a5c:	orr	r3, r3, #8192	; 0x2000
   13a60:	str	r3, [r5, #48]	; 0x30
   13a64:	mov	r3, #36	; 0x24
   13a68:	ldr	r1, [sp, #8]
   13a6c:	str	r3, [r1]
   13a70:	str	r2, [sp, #4]
   13a74:	b	13a08 <__assert_fail@plt+0x285c>
   13a78:	ldr	r3, [r4, #28]
   13a7c:	str	r3, [r4, #24]
   13a80:	ldr	r2, [r4, #52]	; 0x34
   13a84:	add	r2, r2, #1
   13a88:	add	r1, r4, #168	; 0xa8
   13a8c:	ldr	r0, [sp, #20]
   13a90:	bl	10f00 <memmove@plt>
   13a94:	b	13c04 <__assert_fail@plt+0x2a58>
   13a98:	ubfx	r3, r3, #4, #1
   13a9c:	cmp	r2, #10
   13aa0:	orrne	r3, r3, #1
   13aa4:	cmp	r3, #0
   13aa8:	beq	13c34 <__assert_fail@plt+0x2a88>
   13aac:	mov	r2, #11
   13ab0:	strh	r2, [r4, #56]	; 0x38
   13ab4:	ldrb	r2, [r7, #18]
   13ab8:	sub	r2, r2, #1
   13abc:	cmp	r2, #11
   13ac0:	ldrls	pc, [pc, r2, lsl #2]
   13ac4:	b	13cc0 <__assert_fail@plt+0x2b14>
   13ac8:	muleq	r1, r0, ip
   13acc:	strdeq	r3, [r1], -ip
   13ad0:	andeq	r3, r1, r0, asr #25
   13ad4:	andeq	r3, r1, r4, lsl #25
   13ad8:	andeq	r3, r1, r0, asr #25
   13adc:	muleq	r1, r8, lr
   13ae0:	andeq	r3, r1, r0, asr #25
   13ae4:	andeq	r3, r1, r8, lsr #25
   13ae8:	andeq	r3, r1, r0, asr #25
   13aec:	muleq	r1, ip, ip
   13af0:	andeq	r3, r1, r0, asr #25
   13af4:			; <UNDEFINED> instruction: 0x00013cb4
   13af8:	mov	r3, #0
   13afc:	mov	r2, #8192	; 0x2000
   13b00:	str	r2, [r4, #80]	; 0x50
   13b04:	cmp	r3, #0
   13b08:	movne	r2, #1
   13b0c:	moveq	r2, #2
   13b10:	mov	r3, #0
   13b14:	str	r2, [r4, #112]	; 0x70
   13b18:	str	r3, [r4, #116]	; 0x74
   13b1c:	mov	r3, #0
   13b20:	str	r3, [r4, #8]
   13b24:	ldr	r3, [sp, #4]
   13b28:	cmp	r3, #0
   13b2c:	ldrne	r3, [sp]
   13b30:	strne	r4, [r3, #8]
   13b34:	streq	r4, [sp, #4]
   13b38:	movw	r3, #10000	; 0x2710
   13b3c:	cmp	r8, r3
   13b40:	beq	13ce0 <__assert_fail@plt+0x2b34>
   13b44:	add	r8, r8, #1
   13b48:	ldr	r3, [sp, #16]
   13b4c:	cmp	r8, r3
   13b50:	bcs	13890 <__assert_fail@plt+0x26e4>
   13b54:	str	r4, [sp]
   13b58:	ldr	r3, [r9, #12]
   13b5c:	cmp	r3, #0
   13b60:	beq	13890 <__assert_fail@plt+0x26e4>
   13b64:	bl	11068 <__errno_location@plt>
   13b68:	str	r0, [sp, #8]
   13b6c:	mov	r3, #0
   13b70:	str	r3, [r0]
   13b74:	ldr	r0, [r9, #12]
   13b78:	bl	11104 <readdir64@plt>
   13b7c:	subs	r7, r0, #0
   13b80:	beq	1384c <__assert_fail@plt+0x26a0>
   13b84:	ldr	r3, [r5, #48]	; 0x30
   13b88:	tst	r3, #32
   13b8c:	bne	13b9c <__assert_fail@plt+0x29f0>
   13b90:	ldrb	r3, [r7, #19]
   13b94:	cmp	r3, #46	; 0x2e
   13b98:	beq	13958 <__assert_fail@plt+0x27ac>
   13b9c:	add	r4, r7, #19
   13ba0:	mov	r0, r4
   13ba4:	bl	11044 <strlen@plt>
   13ba8:	mov	r6, r0
   13bac:	mov	r2, r0
   13bb0:	mov	r1, r4
   13bb4:	mov	r0, r5
   13bb8:	bl	12c8c <__assert_fail@plt+0x1ae0>
   13bbc:	subs	r4, r0, #0
   13bc0:	beq	139c4 <__assert_fail@plt+0x2818>
   13bc4:	cmp	fp, r6
   13bc8:	bls	13978 <__assert_fail@plt+0x27cc>
   13bcc:	adds	r6, sl, r6
   13bd0:	bcs	13a30 <__assert_fail@plt+0x2884>
   13bd4:	ldr	r3, [sp, #12]
   13bd8:	str	r3, [r4, #48]	; 0x30
   13bdc:	ldr	r3, [r5]
   13be0:	str	r3, [r4, #4]
   13be4:	str	r6, [r4, #40]	; 0x28
   13be8:	ldrd	r2, [r7]
   13bec:	strd	r2, [r4, #160]	; 0xa0
   13bf0:	ldr	r3, [r5, #48]	; 0x30
   13bf4:	tst	r3, #4
   13bf8:	addeq	r3, r4, #168	; 0xa8
   13bfc:	streq	r3, [r4, #24]
   13c00:	bne	13a78 <__assert_fail@plt+0x28cc>
   13c04:	ldr	r3, [r5, #44]	; 0x2c
   13c08:	cmp	r3, #0
   13c0c:	beq	13c1c <__assert_fail@plt+0x2a70>
   13c10:	ldr	r3, [r5, #48]	; 0x30
   13c14:	tst	r3, #1024	; 0x400
   13c18:	beq	13cc8 <__assert_fail@plt+0x2b1c>
   13c1c:	ldr	r3, [r5, #48]	; 0x30
   13c20:	tst	r3, #8
   13c24:	beq	13c34 <__assert_fail@plt+0x2a88>
   13c28:	ldrb	r2, [r7, #18]
   13c2c:	tst	r2, #251	; 0xfb
   13c30:	bne	13a98 <__assert_fail@plt+0x28ec>
   13c34:	mov	r3, #11
   13c38:	strh	r3, [r4, #56]	; 0x38
   13c3c:	ldrb	r3, [r7, #18]
   13c40:	sub	r3, r3, #1
   13c44:	cmp	r3, #11
   13c48:	ldrls	pc, [pc, r3, lsl #2]
   13c4c:	b	13cbc <__assert_fail@plt+0x2b10>
   13c50:	andeq	r3, r1, ip, lsl #25
   13c54:	strdeq	r3, [r1], -r8
   13c58:			; <UNDEFINED> instruction: 0x00013cbc
   13c5c:	andeq	r3, r1, r0, lsl #25
   13c60:			; <UNDEFINED> instruction: 0x00013cbc
   13c64:	andeq	r3, r1, ip, lsr #29
   13c68:			; <UNDEFINED> instruction: 0x00013cbc
   13c6c:	andeq	r3, r1, r4, lsr #25
   13c70:			; <UNDEFINED> instruction: 0x00013cbc
   13c74:	muleq	r1, r8, ip
   13c78:			; <UNDEFINED> instruction: 0x00013cbc
   13c7c:			; <UNDEFINED> instruction: 0x00013cb0
   13c80:	mov	r3, #0
   13c84:	mov	r2, #16384	; 0x4000
   13c88:	b	13b00 <__assert_fail@plt+0x2954>
   13c8c:	mov	r3, #0
   13c90:	mov	r2, #4096	; 0x1000
   13c94:	b	13b00 <__assert_fail@plt+0x2954>
   13c98:	mov	r3, #0
   13c9c:	mov	r2, #40960	; 0xa000
   13ca0:	b	13b00 <__assert_fail@plt+0x2954>
   13ca4:	mov	r3, #0
   13ca8:	mov	r2, #32768	; 0x8000
   13cac:	b	13b00 <__assert_fail@plt+0x2954>
   13cb0:	mov	r3, #0
   13cb4:	mov	r2, #49152	; 0xc000
   13cb8:	b	13b00 <__assert_fail@plt+0x2954>
   13cbc:	mov	r3, #0
   13cc0:	mov	r2, #0
   13cc4:	b	13b00 <__assert_fail@plt+0x2954>
   13cc8:	mov	r2, #0
   13ccc:	mov	r1, r4
   13cd0:	mov	r0, r5
   13cd4:	bl	12a2c <__assert_fail@plt+0x1880>
   13cd8:	strh	r0, [r4, #56]	; 0x38
   13cdc:	b	13b1c <__assert_fail@plt+0x2970>
   13ce0:	ldr	r3, [r5, #44]	; 0x2c
   13ce4:	cmp	r3, #0
   13ce8:	beq	13cf4 <__assert_fail@plt+0x2b48>
   13cec:	movw	r8, #10001	; 0x2711
   13cf0:	b	13b54 <__assert_fail@plt+0x29a8>
   13cf4:	ldr	r1, [sp, #60]	; 0x3c
   13cf8:	mov	r0, r9
   13cfc:	bl	12ec0 <__assert_fail@plt+0x1d14>
   13d00:	movw	r3, #26985	; 0x6969
   13d04:	cmp	r0, r3
   13d08:	beq	13d38 <__assert_fail@plt+0x2b8c>
   13d0c:	ldr	r3, [sp, #44]	; 0x2c
   13d10:	cmp	r0, r3
   13d14:	beq	13d44 <__assert_fail@plt+0x2b98>
   13d18:	ldr	r3, [sp, #48]	; 0x30
   13d1c:	cmp	r0, r3
   13d20:	moveq	r3, #0
   13d24:	streq	r3, [sp, #36]	; 0x24
   13d28:	beq	13b44 <__assert_fail@plt+0x2998>
   13d2c:	mov	r3, #1
   13d30:	str	r3, [sp, #36]	; 0x24
   13d34:	b	13cec <__assert_fail@plt+0x2b40>
   13d38:	mov	r3, #0
   13d3c:	str	r3, [sp, #36]	; 0x24
   13d40:	b	13b44 <__assert_fail@plt+0x2998>
   13d44:	mov	r3, #0
   13d48:	str	r3, [sp, #36]	; 0x24
   13d4c:	b	13b44 <__assert_fail@plt+0x2998>
   13d50:	ldr	r4, [sp]
   13d54:	b	13b54 <__assert_fail@plt+0x29a8>
   13d58:	ldr	r1, [r5, #24]
   13d5c:	ldr	r3, [r5, #4]
   13d60:	cmp	r3, #0
   13d64:	bne	13d80 <__assert_fail@plt+0x2bd4>
   13d68:	ldr	r3, [sp, #4]
   13d6c:	b	13db8 <__assert_fail@plt+0x2c0c>
   13d70:	str	r1, [r3, #28]
   13d74:	ldr	r3, [r3, #8]
   13d78:	cmp	r3, #0
   13d7c:	beq	13d68 <__assert_fail@plt+0x2bbc>
   13d80:	ldr	r2, [r3, #24]
   13d84:	add	r0, r3, #168	; 0xa8
   13d88:	cmp	r2, r0
   13d8c:	beq	13d70 <__assert_fail@plt+0x2bc4>
   13d90:	ldr	r0, [r3, #28]
   13d94:	sub	r2, r2, r0
   13d98:	add	r2, r1, r2
   13d9c:	str	r2, [r3, #24]
   13da0:	b	13d70 <__assert_fail@plt+0x2bc4>
   13da4:	str	r1, [r3, #28]
   13da8:	ldr	r2, [r3, #8]
   13dac:	cmp	r2, #0
   13db0:	ldreq	r2, [r3, #4]
   13db4:	mov	r3, r2
   13db8:	ldr	r2, [r3, #48]	; 0x30
   13dbc:	cmp	r2, #0
   13dc0:	blt	1389c <__assert_fail@plt+0x26f0>
   13dc4:	ldr	r2, [r3, #24]
   13dc8:	add	r0, r3, #168	; 0xa8
   13dcc:	cmp	r2, r0
   13dd0:	beq	13da4 <__assert_fail@plt+0x2bf8>
   13dd4:	ldr	r0, [r3, #28]
   13dd8:	sub	r2, r2, r0
   13ddc:	add	r2, r1, r2
   13de0:	str	r2, [r3, #24]
   13de4:	b	13da4 <__assert_fail@plt+0x2bf8>
   13de8:	movw	r3, #43452	; 0xa9bc
   13dec:	movt	r3, #1
   13df0:	mvn	r2, #0
   13df4:	ldr	r1, [r9, #4]
   13df8:	mov	r0, r5
   13dfc:	bl	131b0 <__assert_fail@plt+0x2004>
   13e00:	adds	r0, r0, #0
   13e04:	movne	r0, #1
   13e08:	b	13914 <__assert_fail@plt+0x2768>
   13e0c:	mov	r3, #7
   13e10:	strh	r3, [r9, #56]	; 0x38
   13e14:	ldr	r3, [r5, #48]	; 0x30
   13e18:	orr	r3, r3, #8192	; 0x2000
   13e1c:	str	r3, [r5, #48]	; 0x30
   13e20:	ldr	r0, [sp, #4]
   13e24:	bl	12df0 <__assert_fail@plt+0x1c44>
   13e28:	mov	r3, #0
   13e2c:	str	r3, [sp, #4]
   13e30:	b	13a08 <__assert_fail@plt+0x285c>
   13e34:	ldr	r3, [sp, #32]
   13e38:	cmp	r3, #3
   13e3c:	beq	13e54 <__assert_fail@plt+0x2ca8>
   13e40:	ldr	r0, [sp, #4]
   13e44:	bl	12df0 <__assert_fail@plt+0x1c44>
   13e48:	mov	r3, #0
   13e4c:	str	r3, [sp, #4]
   13e50:	b	13a08 <__assert_fail@plt+0x285c>
   13e54:	ldrh	r3, [r9, #56]	; 0x38
   13e58:	cmp	r3, #7
   13e5c:	cmpne	r3, #4
   13e60:	movne	r3, #6
   13e64:	strhne	r3, [r9, #56]	; 0x38
   13e68:	b	13e40 <__assert_fail@plt+0x2c94>
   13e6c:	movw	r3, #10604	; 0x296c
   13e70:	movt	r3, #1
   13e74:	str	r3, [r5, #44]	; 0x2c
   13e78:	mov	r2, r8
   13e7c:	ldr	r1, [sp, #4]
   13e80:	mov	r0, r5
   13e84:	bl	12b9c <__assert_fail@plt+0x19f0>
   13e88:	str	r0, [sp, #4]
   13e8c:	mov	r3, #0
   13e90:	str	r3, [r5, #44]	; 0x2c
   13e94:	b	13a08 <__assert_fail@plt+0x285c>
   13e98:	mov	r3, #24576	; 0x6000
   13e9c:	str	r3, [r4, #80]	; 0x50
   13ea0:	mov	r2, #1
   13ea4:	mov	r3, #0
   13ea8:	b	13b14 <__assert_fail@plt+0x2968>
   13eac:	mov	r3, #24576	; 0x6000
   13eb0:	str	r3, [r4, #80]	; 0x50
   13eb4:	mov	r2, #2
   13eb8:	mov	r3, #0
   13ebc:	b	13b14 <__assert_fail@plt+0x2968>
   13ec0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ec4:	strd	r6, [sp, #8]
   13ec8:	strd	r8, [sp, #16]
   13ecc:	strd	sl, [sp, #24]
   13ed0:	str	lr, [sp, #32]
   13ed4:	sub	sp, sp, #20
   13ed8:	bic	r3, r1, #4080	; 0xff0
   13edc:	bic	r3, r3, #15
   13ee0:	cmp	r3, #0
   13ee4:	bne	13fc4 <__assert_fail@plt+0x2e18>
   13ee8:	mov	r6, r0
   13eec:	mov	r9, r1
   13ef0:	mov	sl, r2
   13ef4:	and	r3, r1, #516	; 0x204
   13ef8:	cmp	r3, #516	; 0x204
   13efc:	beq	13fd8 <__assert_fail@plt+0x2e2c>
   13f00:	tst	r1, #18
   13f04:	beq	13fec <__assert_fail@plt+0x2e40>
   13f08:	mov	r1, #96	; 0x60
   13f0c:	mov	r0, #1
   13f10:	bl	19340 <__assert_fail@plt+0x8194>
   13f14:	subs	r5, r0, #0
   13f18:	beq	14214 <__assert_fail@plt+0x3068>
   13f1c:	str	sl, [r5, #44]	; 0x2c
   13f20:	tst	r9, #2
   13f24:	streq	r9, [r5, #48]	; 0x30
   13f28:	bicne	r3, r9, #512	; 0x200
   13f2c:	orrne	r3, r3, #4
   13f30:	strne	r3, [r5, #48]	; 0x30
   13f34:	mvn	r3, #99	; 0x63
   13f38:	str	r3, [r5, #32]
   13f3c:	ldr	r0, [r6]
   13f40:	cmp	r0, #0
   13f44:	beq	14000 <__assert_fail@plt+0x2e54>
   13f48:	mov	r7, r6
   13f4c:	mov	r4, #0
   13f50:	bl	11044 <strlen@plt>
   13f54:	cmp	r4, r0
   13f58:	movcc	r4, r0
   13f5c:	ldr	r0, [r7, #4]!
   13f60:	cmp	r0, #0
   13f64:	bne	13f50 <__assert_fail@plt+0x2da4>
   13f68:	add	r1, r4, #1
   13f6c:	cmp	r1, #4096	; 0x1000
   13f70:	movcc	r1, #4096	; 0x1000
   13f74:	mov	r0, r5
   13f78:	bl	129a8 <__assert_fail@plt+0x17fc>
   13f7c:	cmp	r0, #0
   13f80:	beq	14208 <__assert_fail@plt+0x305c>
   13f84:	ldr	fp, [r6]
   13f88:	cmp	fp, #0
   13f8c:	beq	14234 <__assert_fail@plt+0x3088>
   13f90:	mov	r2, #0
   13f94:	movw	r1, #41224	; 0xa108
   13f98:	movt	r1, #1
   13f9c:	mov	r0, r5
   13fa0:	bl	12c8c <__assert_fail@plt+0x1ae0>
   13fa4:	subs	fp, r0, #0
   13fa8:	beq	14200 <__assert_fail@plt+0x3054>
   13fac:	mvn	r3, #0
   13fb0:	str	r3, [fp, #48]	; 0x30
   13fb4:	cmp	sl, #0
   13fb8:	moveq	r3, #1
   13fbc:	bne	1423c <__assert_fail@plt+0x3090>
   13fc0:	b	14244 <__assert_fail@plt+0x3098>
   13fc4:	bl	11068 <__errno_location@plt>
   13fc8:	mov	r3, #22
   13fcc:	str	r3, [r0]
   13fd0:	mov	r5, #0
   13fd4:	b	14214 <__assert_fail@plt+0x3068>
   13fd8:	bl	11068 <__errno_location@plt>
   13fdc:	mov	r3, #22
   13fe0:	str	r3, [r0]
   13fe4:	mov	r5, #0
   13fe8:	b	14214 <__assert_fail@plt+0x3068>
   13fec:	bl	11068 <__errno_location@plt>
   13ff0:	mov	r3, #22
   13ff4:	str	r3, [r0]
   13ff8:	mov	r5, #0
   13ffc:	b	14214 <__assert_fail@plt+0x3068>
   14000:	mov	r4, #0
   14004:	b	13f68 <__assert_fail@plt+0x2dbc>
   14008:	sub	r1, r0, #1
   1400c:	ldrb	r3, [r4, r1]
   14010:	cmp	r3, #47	; 0x2f
   14014:	bne	140a0 <__assert_fail@plt+0x2ef4>
   14018:	sub	r0, r0, #2
   1401c:	add	r3, r4, r0
   14020:	ldrb	r0, [r4, r0]
   14024:	cmp	r0, #47	; 0x2f
   14028:	moveq	r2, r1
   1402c:	bne	140a0 <__assert_fail@plt+0x2ef4>
   14030:	ldrb	r1, [r3, #-1]!
   14034:	cmp	r1, #47	; 0x2f
   14038:	bne	140a0 <__assert_fail@plt+0x2ef4>
   1403c:	sub	r2, r2, #1
   14040:	cmp	r2, #1
   14044:	bhi	14030 <__assert_fail@plt+0x2e84>
   14048:	b	140a0 <__assert_fail@plt+0x2ef4>
   1404c:	mov	r2, r9
   14050:	mov	r1, r4
   14054:	ldr	r0, [sp, #4]
   14058:	bl	12a2c <__assert_fail@plt+0x1880>
   1405c:	strh	r0, [r4, #56]	; 0x38
   14060:	cmp	sl, #0
   14064:	beq	14108 <__assert_fail@plt+0x2f5c>
   14068:	str	r7, [r4, #8]
   1406c:	mov	r7, r4
   14070:	add	r8, r8, #1
   14074:	ldr	r4, [r6, #4]!
   14078:	cmp	r4, #0
   1407c:	beq	14120 <__assert_fail@plt+0x2f74>
   14080:	mov	r0, r4
   14084:	bl	11044 <strlen@plt>
   14088:	mov	r2, r0
   1408c:	cmp	r0, #2
   14090:	movls	r3, #0
   14094:	andhi	r3, r5, #1
   14098:	cmp	r3, #0
   1409c:	bne	14008 <__assert_fail@plt+0x2e5c>
   140a0:	mov	r1, r4
   140a4:	ldr	r0, [sp, #4]
   140a8:	bl	12c8c <__assert_fail@plt+0x1ae0>
   140ac:	subs	r4, r0, #0
   140b0:	beq	141ec <__assert_fail@plt+0x3040>
   140b4:	str	r9, [r4, #48]	; 0x30
   140b8:	str	fp, [r4, #4]
   140bc:	add	r3, r4, #168	; 0xa8
   140c0:	str	r3, [r4, #24]
   140c4:	ldr	r3, [sp, #8]
   140c8:	cmp	r7, #0
   140cc:	moveq	r3, #0
   140d0:	cmp	r3, #0
   140d4:	beq	1404c <__assert_fail@plt+0x2ea0>
   140d8:	mov	r3, #11
   140dc:	strh	r3, [r4, #56]	; 0x38
   140e0:	mov	r2, #2
   140e4:	mov	r3, #0
   140e8:	strd	r2, [r4, #112]	; 0x70
   140ec:	cmp	sl, #0
   140f0:	bne	14068 <__assert_fail@plt+0x2ebc>
   140f4:	str	r9, [r4, #8]
   140f8:	ldr	r3, [sp, #12]
   140fc:	str	r4, [r3, #8]
   14100:	str	r4, [sp, #12]
   14104:	b	14070 <__assert_fail@plt+0x2ec4>
   14108:	str	r9, [r4, #8]
   1410c:	cmp	r7, #0
   14110:	streq	r4, [sp, #12]
   14114:	moveq	r7, r4
   14118:	beq	14070 <__assert_fail@plt+0x2ec4>
   1411c:	b	140f8 <__assert_fail@plt+0x2f4c>
   14120:	ldr	r5, [sp, #4]
   14124:	cmp	sl, #0
   14128:	cmpne	r8, #1
   1412c:	bhi	14198 <__assert_fail@plt+0x2fec>
   14130:	mov	r2, #0
   14134:	movw	r1, #41224	; 0xa108
   14138:	movt	r1, #1
   1413c:	mov	r0, r5
   14140:	bl	12c8c <__assert_fail@plt+0x1ae0>
   14144:	str	r0, [r5]
   14148:	cmp	r0, #0
   1414c:	beq	141f0 <__assert_fail@plt+0x3044>
   14150:	str	r7, [r0, #8]
   14154:	ldr	r3, [r5]
   14158:	mov	r2, #9
   1415c:	strh	r2, [r3, #56]	; 0x38
   14160:	ldr	r3, [r5]
   14164:	mov	r2, #1
   14168:	str	r2, [r3, #48]	; 0x30
   1416c:	mov	r0, r5
   14170:	bl	12d1c <__assert_fail@plt+0x1b70>
   14174:	cmp	r0, #0
   14178:	beq	141f0 <__assert_fail@plt+0x3044>
   1417c:	ldr	r3, [r5, #48]	; 0x30
   14180:	tst	r3, #516	; 0x204
   14184:	beq	141c0 <__assert_fail@plt+0x3014>
   14188:	mvn	r1, #0
   1418c:	add	r0, r5, #60	; 0x3c
   14190:	bl	15d44 <__assert_fail@plt+0x4b98>
   14194:	b	14214 <__assert_fail@plt+0x3068>
   14198:	mov	r2, r8
   1419c:	mov	r1, r7
   141a0:	mov	r0, r5
   141a4:	bl	12b9c <__assert_fail@plt+0x19f0>
   141a8:	mov	r7, r0
   141ac:	b	14130 <__assert_fail@plt+0x2f84>
   141b0:	mov	r7, r4
   141b4:	b	14130 <__assert_fail@plt+0x2f84>
   141b8:	mov	r7, fp
   141bc:	b	14130 <__assert_fail@plt+0x2f84>
   141c0:	movw	r1, #43456	; 0xa9c0
   141c4:	movt	r1, #1
   141c8:	mov	r0, r5
   141cc:	bl	12da4 <__assert_fail@plt+0x1bf8>
   141d0:	str	r0, [r5, #28]
   141d4:	cmp	r0, #0
   141d8:	bge	14188 <__assert_fail@plt+0x2fdc>
   141dc:	ldr	r3, [r5, #48]	; 0x30
   141e0:	orr	r3, r3, #4
   141e4:	str	r3, [r5, #48]	; 0x30
   141e8:	b	14188 <__assert_fail@plt+0x2fdc>
   141ec:	ldr	r5, [sp, #4]
   141f0:	mov	r0, r7
   141f4:	bl	12df0 <__assert_fail@plt+0x1c44>
   141f8:	mov	r0, fp
   141fc:	bl	199b8 <__assert_fail@plt+0x880c>
   14200:	ldr	r0, [r5, #24]
   14204:	bl	199b8 <__assert_fail@plt+0x880c>
   14208:	mov	r0, r5
   1420c:	bl	199b8 <__assert_fail@plt+0x880c>
   14210:	mov	r5, #0
   14214:	mov	r0, r5
   14218:	add	sp, sp, #20
   1421c:	ldrd	r4, [sp]
   14220:	ldrd	r6, [sp, #8]
   14224:	ldrd	r8, [sp, #16]
   14228:	ldrd	sl, [sp, #24]
   1422c:	add	sp, sp, #32
   14230:	pop	{pc}		; (ldr pc, [sp], #4)
   14234:	cmp	sl, #0
   14238:	beq	141b8 <__assert_fail@plt+0x300c>
   1423c:	ldr	r3, [r5, #48]	; 0x30
   14240:	ubfx	r3, r3, #10, #1
   14244:	str	r3, [sp, #8]
   14248:	ldr	r4, [r6]
   1424c:	cmp	r4, #0
   14250:	beq	141b0 <__assert_fail@plt+0x3004>
   14254:	mov	r3, #0
   14258:	mov	r7, r3
   1425c:	str	r3, [sp, #12]
   14260:	mov	r8, r3
   14264:	eor	r9, r9, #2048	; 0x800
   14268:	ubfx	r3, r9, #11, #1
   1426c:	mov	r9, r7
   14270:	str	r5, [sp, #4]
   14274:	mov	r5, r3
   14278:	b	14080 <__assert_fail@plt+0x2ed4>
   1427c:	strd	r4, [sp, #-16]!
   14280:	str	r6, [sp, #8]
   14284:	str	lr, [sp, #12]
   14288:	mov	r5, r0
   1428c:	ldr	r0, [r0]
   14290:	cmp	r0, #0
   14294:	beq	142cc <__assert_fail@plt+0x3120>
   14298:	ldr	r3, [r0, #48]	; 0x30
   1429c:	cmp	r3, #0
   142a0:	blt	1431c <__assert_fail@plt+0x3170>
   142a4:	ldr	r4, [r0, #8]
   142a8:	cmp	r4, #0
   142ac:	ldreq	r4, [r0, #4]
   142b0:	bl	199b8 <__assert_fail@plt+0x880c>
   142b4:	mov	r0, r4
   142b8:	ldr	r3, [r4, #48]	; 0x30
   142bc:	cmp	r3, #0
   142c0:	bge	142a4 <__assert_fail@plt+0x30f8>
   142c4:	mov	r0, r4
   142c8:	bl	199b8 <__assert_fail@plt+0x880c>
   142cc:	ldr	r0, [r5, #4]
   142d0:	cmp	r0, #0
   142d4:	beq	142dc <__assert_fail@plt+0x3130>
   142d8:	bl	12df0 <__assert_fail@plt+0x1c44>
   142dc:	ldr	r0, [r5, #8]
   142e0:	bl	199b8 <__assert_fail@plt+0x880c>
   142e4:	ldr	r0, [r5, #24]
   142e8:	bl	199b8 <__assert_fail@plt+0x880c>
   142ec:	ldr	r3, [r5, #48]	; 0x30
   142f0:	tst	r3, #512	; 0x200
   142f4:	beq	14324 <__assert_fail@plt+0x3178>
   142f8:	ldr	r0, [r5, #32]
   142fc:	cmp	r0, #0
   14300:	blt	1432c <__assert_fail@plt+0x3180>
   14304:	bl	11188 <close@plt>
   14308:	cmp	r0, #0
   1430c:	beq	1432c <__assert_fail@plt+0x3180>
   14310:	bl	11068 <__errno_location@plt>
   14314:	ldr	r4, [r0]
   14318:	b	143ac <__assert_fail@plt+0x3200>
   1431c:	mov	r4, r0
   14320:	b	142c4 <__assert_fail@plt+0x3118>
   14324:	tst	r3, #4
   14328:	beq	14374 <__assert_fail@plt+0x31c8>
   1432c:	add	r0, r5, #60	; 0x3c
   14330:	bl	12e80 <__assert_fail@plt+0x1cd4>
   14334:	ldr	r0, [r5, #52]	; 0x34
   14338:	cmp	r0, #0
   1433c:	movne	r4, #0
   14340:	beq	143e0 <__assert_fail@plt+0x3234>
   14344:	bl	157e8 <__assert_fail@plt+0x463c>
   14348:	mov	r0, r5
   1434c:	bl	12e40 <__assert_fail@plt+0x1c94>
   14350:	mov	r0, r5
   14354:	bl	199b8 <__assert_fail@plt+0x880c>
   14358:	cmp	r4, #0
   1435c:	bne	143d0 <__assert_fail@plt+0x3224>
   14360:	mov	r0, r4
   14364:	ldrd	r4, [sp]
   14368:	ldr	r6, [sp, #8]
   1436c:	add	sp, sp, #12
   14370:	pop	{pc}		; (ldr pc, [sp], #4)
   14374:	ldr	r0, [r5, #28]
   14378:	bl	11128 <fchdir@plt>
   1437c:	subs	r4, r0, #0
   14380:	beq	1438c <__assert_fail@plt+0x31e0>
   14384:	bl	11068 <__errno_location@plt>
   14388:	ldr	r4, [r0]
   1438c:	ldr	r0, [r5, #28]
   14390:	bl	11188 <close@plt>
   14394:	adds	r0, r0, #0
   14398:	movne	r0, #1
   1439c:	cmp	r4, #0
   143a0:	movne	r0, #0
   143a4:	cmp	r0, #0
   143a8:	bne	143c4 <__assert_fail@plt+0x3218>
   143ac:	add	r0, r5, #60	; 0x3c
   143b0:	bl	12e80 <__assert_fail@plt+0x1cd4>
   143b4:	ldr	r0, [r5, #52]	; 0x34
   143b8:	cmp	r0, #0
   143bc:	bne	14344 <__assert_fail@plt+0x3198>
   143c0:	b	14348 <__assert_fail@plt+0x319c>
   143c4:	bl	11068 <__errno_location@plt>
   143c8:	ldr	r4, [r0]
   143cc:	b	143ac <__assert_fail@plt+0x3200>
   143d0:	bl	11068 <__errno_location@plt>
   143d4:	str	r4, [r0]
   143d8:	mvn	r4, #0
   143dc:	b	14360 <__assert_fail@plt+0x31b4>
   143e0:	mov	r0, r5
   143e4:	bl	12e40 <__assert_fail@plt+0x1c94>
   143e8:	mov	r0, r5
   143ec:	bl	199b8 <__assert_fail@plt+0x880c>
   143f0:	mov	r4, #0
   143f4:	b	14360 <__assert_fail@plt+0x31b4>
   143f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143fc:	strd	r6, [sp, #8]
   14400:	str	r8, [sp, #16]
   14404:	str	lr, [sp, #20]
   14408:	ldr	r5, [r0]
   1440c:	cmp	r5, #0
   14410:	beq	14a70 <__assert_fail@plt+0x38c4>
   14414:	ldr	r3, [r0, #48]	; 0x30
   14418:	tst	r3, #8192	; 0x2000
   1441c:	bne	14a6c <__assert_fail@plt+0x38c0>
   14420:	mov	r8, r0
   14424:	ldrh	r3, [r5, #60]	; 0x3c
   14428:	mov	r2, #3
   1442c:	strh	r2, [r5, #60]	; 0x3c
   14430:	cmp	r3, #1
   14434:	beq	144b0 <__assert_fail@plt+0x3304>
   14438:	cmp	r3, #2
   1443c:	beq	144c4 <__assert_fail@plt+0x3318>
   14440:	ldrh	r2, [r5, #56]	; 0x38
   14444:	cmp	r2, #1
   14448:	bne	14744 <__assert_fail@plt+0x3598>
   1444c:	cmp	r3, #4
   14450:	beq	14474 <__assert_fail@plt+0x32c8>
   14454:	ldr	r1, [r8, #48]	; 0x30
   14458:	tst	r1, #64	; 0x40
   1445c:	beq	14558 <__assert_fail@plt+0x33ac>
   14460:	ldrd	r6, [r5, #64]	; 0x40
   14464:	ldrd	r2, [r8, #16]
   14468:	cmp	r7, r3
   1446c:	cmpeq	r6, r2
   14470:	beq	14558 <__assert_fail@plt+0x33ac>
   14474:	ldrh	r3, [r5, #58]	; 0x3a
   14478:	tst	r3, #2
   1447c:	bne	1454c <__assert_fail@plt+0x33a0>
   14480:	ldr	r0, [r8, #4]
   14484:	cmp	r0, #0
   14488:	beq	14498 <__assert_fail@plt+0x32ec>
   1448c:	bl	12df0 <__assert_fail@plt+0x1c44>
   14490:	mov	r3, #0
   14494:	str	r3, [r8, #4]
   14498:	mov	r3, #6
   1449c:	strh	r3, [r5, #56]	; 0x38
   144a0:	mov	r1, r5
   144a4:	mov	r0, r8
   144a8:	bl	133bc <__assert_fail@plt+0x2210>
   144ac:	b	14a70 <__assert_fail@plt+0x38c4>
   144b0:	mov	r2, #0
   144b4:	mov	r1, r5
   144b8:	bl	12a2c <__assert_fail@plt+0x1880>
   144bc:	strh	r0, [r5, #56]	; 0x38
   144c0:	b	14a70 <__assert_fail@plt+0x38c4>
   144c4:	ldrh	r2, [r5, #56]	; 0x38
   144c8:	sub	r3, r2, #12
   144cc:	uxth	r3, r3
   144d0:	cmp	r3, #1
   144d4:	bls	144e4 <__assert_fail@plt+0x3338>
   144d8:	cmp	r2, #1
   144dc:	bne	14744 <__assert_fail@plt+0x3598>
   144e0:	b	14454 <__assert_fail@plt+0x32a8>
   144e4:	mov	r2, #1
   144e8:	mov	r1, r5
   144ec:	bl	12a2c <__assert_fail@plt+0x1880>
   144f0:	strh	r0, [r5, #56]	; 0x38
   144f4:	cmp	r0, #1
   144f8:	bne	145d4 <__assert_fail@plt+0x3428>
   144fc:	ldr	r3, [r8, #48]	; 0x30
   14500:	tst	r3, #4
   14504:	bne	145d4 <__assert_fail@plt+0x3428>
   14508:	movw	r1, #43456	; 0xa9c0
   1450c:	movt	r1, #1
   14510:	mov	r0, r8
   14514:	bl	12da4 <__assert_fail@plt+0x1bf8>
   14518:	str	r0, [r5, #36]	; 0x24
   1451c:	cmp	r0, #0
   14520:	blt	14534 <__assert_fail@plt+0x3388>
   14524:	ldrh	r3, [r5, #58]	; 0x3a
   14528:	orr	r3, r3, #2
   1452c:	strh	r3, [r5, #58]	; 0x3a
   14530:	b	145d4 <__assert_fail@plt+0x3428>
   14534:	bl	11068 <__errno_location@plt>
   14538:	ldr	r3, [r0]
   1453c:	str	r3, [r5, #32]
   14540:	mov	r3, #7
   14544:	strh	r3, [r5, #56]	; 0x38
   14548:	b	145d4 <__assert_fail@plt+0x3428>
   1454c:	ldr	r0, [r5, #36]	; 0x24
   14550:	bl	11188 <close@plt>
   14554:	b	14480 <__assert_fail@plt+0x32d4>
   14558:	ldr	r0, [r8, #4]
   1455c:	cmp	r0, #0
   14560:	beq	1463c <__assert_fail@plt+0x3490>
   14564:	tst	r1, #4096	; 0x1000
   14568:	bne	14628 <__assert_fail@plt+0x347c>
   1456c:	ldr	r3, [r5, #24]
   14570:	mvn	r2, #0
   14574:	mov	r1, r5
   14578:	mov	r0, r8
   1457c:	bl	131b0 <__assert_fail@plt+0x2004>
   14580:	cmp	r0, #0
   14584:	bne	14690 <__assert_fail@plt+0x34e4>
   14588:	ldr	r5, [r8, #4]
   1458c:	mov	r3, #0
   14590:	str	r3, [r8, #4]
   14594:	ldr	r2, [r8, #24]
   14598:	ldr	r0, [r5, #4]
   1459c:	ldr	r1, [r0, #40]	; 0x28
   145a0:	sub	r3, r1, #1
   145a4:	ldr	r0, [r0, #28]
   145a8:	ldrb	r0, [r0, r3]
   145ac:	cmp	r0, #47	; 0x2f
   145b0:	movne	r3, r1
   145b4:	add	r0, r2, r3
   145b8:	mov	r1, #47	; 0x2f
   145bc:	strb	r1, [r2, r3]
   145c0:	ldr	r2, [r5, #52]	; 0x34
   145c4:	add	r2, r2, #1
   145c8:	add	r1, r5, #168	; 0xa8
   145cc:	add	r0, r0, #1
   145d0:	bl	10f00 <memmove@plt>
   145d4:	str	r5, [r8]
   145d8:	ldrh	r3, [r5, #56]	; 0x38
   145dc:	cmp	r3, #11
   145e0:	beq	14964 <__assert_fail@plt+0x37b8>
   145e4:	ldrh	r3, [r5, #56]	; 0x38
   145e8:	cmp	r3, #1
   145ec:	bne	14a70 <__assert_fail@plt+0x38c4>
   145f0:	ldr	r3, [r5, #48]	; 0x30
   145f4:	cmp	r3, #0
   145f8:	ldrdeq	r2, [r5, #64]	; 0x40
   145fc:	strdeq	r2, [r8, #16]
   14600:	mov	r1, r5
   14604:	mov	r0, r8
   14608:	bl	12fec <__assert_fail@plt+0x1e40>
   1460c:	cmp	r0, #0
   14610:	bne	14a70 <__assert_fail@plt+0x38c4>
   14614:	bl	11068 <__errno_location@plt>
   14618:	mov	r3, #12
   1461c:	str	r3, [r0]
   14620:	mov	r5, #0
   14624:	b	14a70 <__assert_fail@plt+0x38c4>
   14628:	bic	r1, r1, #4096	; 0x1000
   1462c:	str	r1, [r8, #48]	; 0x30
   14630:	bl	12df0 <__assert_fail@plt+0x1c44>
   14634:	mov	r3, #0
   14638:	str	r3, [r8, #4]
   1463c:	mov	r1, #3
   14640:	mov	r0, r8
   14644:	bl	13480 <__assert_fail@plt+0x22d4>
   14648:	str	r0, [r8, #4]
   1464c:	cmp	r0, #0
   14650:	bne	14588 <__assert_fail@plt+0x33dc>
   14654:	ldr	r3, [r8, #48]	; 0x30
   14658:	tst	r3, #8192	; 0x2000
   1465c:	movne	r5, r0
   14660:	bne	14a70 <__assert_fail@plt+0x38c4>
   14664:	ldr	r3, [r5, #32]
   14668:	cmp	r3, #0
   1466c:	beq	14680 <__assert_fail@plt+0x34d4>
   14670:	ldrh	r3, [r5, #56]	; 0x38
   14674:	cmp	r3, #4
   14678:	movne	r3, #7
   1467c:	strhne	r3, [r5, #56]	; 0x38
   14680:	mov	r1, r5
   14684:	mov	r0, r8
   14688:	bl	133bc <__assert_fail@plt+0x2210>
   1468c:	b	14a70 <__assert_fail@plt+0x38c4>
   14690:	bl	11068 <__errno_location@plt>
   14694:	ldr	r3, [r0]
   14698:	str	r3, [r5, #32]
   1469c:	ldrh	r3, [r5, #58]	; 0x3a
   146a0:	orr	r3, r3, #1
   146a4:	strh	r3, [r5, #58]	; 0x3a
   146a8:	ldr	r3, [r8, #4]
   146ac:	cmp	r3, #0
   146b0:	beq	14588 <__assert_fail@plt+0x33dc>
   146b4:	ldr	r2, [r3, #4]
   146b8:	ldr	r2, [r2, #24]
   146bc:	str	r2, [r3, #24]
   146c0:	ldr	r3, [r3, #8]
   146c4:	cmp	r3, #0
   146c8:	bne	146b4 <__assert_fail@plt+0x3508>
   146cc:	b	14588 <__assert_fail@plt+0x33dc>
   146d0:	str	r3, [r8]
   146d4:	ldr	r2, [r8, #24]
   146d8:	ldr	r3, [r3, #40]	; 0x28
   146dc:	mov	r1, #0
   146e0:	strb	r1, [r2, r3]
   146e4:	mov	r1, #3
   146e8:	mov	r0, r8
   146ec:	bl	13480 <__assert_fail@plt+0x22d4>
   146f0:	subs	r6, r0, #0
   146f4:	bne	1470c <__assert_fail@plt+0x3560>
   146f8:	ldr	r3, [r8, #48]	; 0x30
   146fc:	tst	r3, #8192	; 0x2000
   14700:	beq	14760 <__assert_fail@plt+0x35b4>
   14704:	mov	r5, r6
   14708:	b	14a70 <__assert_fail@plt+0x38c4>
   1470c:	mov	r0, r5
   14710:	bl	199b8 <__assert_fail@plt+0x880c>
   14714:	mov	r5, r6
   14718:	b	14594 <__assert_fail@plt+0x33e8>
   1471c:	str	r4, [r8]
   14720:	mov	r0, r5
   14724:	bl	199b8 <__assert_fail@plt+0x880c>
   14728:	ldr	r3, [r4, #48]	; 0x30
   1472c:	cmp	r3, #0
   14730:	beq	14828 <__assert_fail@plt+0x367c>
   14734:	ldrh	r3, [r4, #60]	; 0x3c
   14738:	mov	r5, r4
   1473c:	cmp	r3, #4
   14740:	bne	148dc <__assert_fail@plt+0x3730>
   14744:	ldr	r4, [r5, #8]
   14748:	cmp	r4, #0
   1474c:	bne	1471c <__assert_fail@plt+0x3570>
   14750:	ldr	r3, [r5, #4]
   14754:	ldr	r2, [r3, #12]
   14758:	cmp	r2, #0
   1475c:	bne	146d0 <__assert_fail@plt+0x3524>
   14760:	ldr	r6, [r5, #4]
   14764:	str	r6, [r8]
   14768:	mov	r0, r5
   1476c:	bl	199b8 <__assert_fail@plt+0x880c>
   14770:	ldr	r3, [r6, #48]	; 0x30
   14774:	cmn	r3, #1
   14778:	beq	1499c <__assert_fail@plt+0x37f0>
   1477c:	ldrh	r3, [r6, #56]	; 0x38
   14780:	cmp	r3, #11
   14784:	beq	149bc <__assert_fail@plt+0x3810>
   14788:	ldr	r2, [r8, #24]
   1478c:	ldr	r3, [r6, #40]	; 0x28
   14790:	mov	r1, #0
   14794:	strb	r1, [r2, r3]
   14798:	ldr	r3, [r6, #48]	; 0x30
   1479c:	cmp	r3, r1
   147a0:	beq	149c0 <__assert_fail@plt+0x3814>
   147a4:	ldrh	r3, [r6, #58]	; 0x3a
   147a8:	tst	r3, #2
   147ac:	beq	14a28 <__assert_fail@plt+0x387c>
   147b0:	ldr	r3, [r8, #48]	; 0x30
   147b4:	tst	r3, #4
   147b8:	bne	147d4 <__assert_fail@plt+0x3628>
   147bc:	tst	r3, #512	; 0x200
   147c0:	beq	149fc <__assert_fail@plt+0x3850>
   147c4:	mov	r2, #1
   147c8:	ldr	r1, [r6, #36]	; 0x24
   147cc:	mov	r0, r8
   147d0:	bl	130b4 <__assert_fail@plt+0x1f08>
   147d4:	ldr	r0, [r6, #36]	; 0x24
   147d8:	bl	11188 <close@plt>
   147dc:	ldrh	r3, [r6, #56]	; 0x38
   147e0:	cmp	r3, #2
   147e4:	beq	14810 <__assert_fail@plt+0x3664>
   147e8:	ldr	r3, [r6, #32]
   147ec:	cmp	r3, #0
   147f0:	movne	r3, #7
   147f4:	strhne	r3, [r6, #56]	; 0x38
   147f8:	bne	14810 <__assert_fail@plt+0x3664>
   147fc:	mov	r3, #6
   14800:	strh	r3, [r6, #56]	; 0x38
   14804:	mov	r1, r6
   14808:	mov	r0, r8
   1480c:	bl	133bc <__assert_fail@plt+0x2210>
   14810:	ldr	r5, [r8, #48]	; 0x30
   14814:	and	r5, r5, #8192	; 0x2000
   14818:	cmp	r5, #0
   1481c:	moveq	r5, r6
   14820:	movne	r5, r4
   14824:	b	14a70 <__assert_fail@plt+0x38c4>
   14828:	mov	r0, r8
   1482c:	bl	1314c <__assert_fail@plt+0x1fa0>
   14830:	cmp	r0, #0
   14834:	bne	148b8 <__assert_fail@plt+0x370c>
   14838:	mov	r0, r8
   1483c:	bl	12e40 <__assert_fail@plt+0x1c94>
   14840:	ldr	r2, [r4, #52]	; 0x34
   14844:	str	r2, [r4, #40]	; 0x28
   14848:	add	r5, r4, #168	; 0xa8
   1484c:	add	r2, r2, #1
   14850:	mov	r1, r5
   14854:	ldr	r0, [r8, #24]
   14858:	bl	10f00 <memmove@plt>
   1485c:	mov	r1, #47	; 0x2f
   14860:	mov	r0, r5
   14864:	bl	110ec <strrchr@plt>
   14868:	cmp	r0, #0
   1486c:	beq	1489c <__assert_fail@plt+0x36f0>
   14870:	cmp	r5, r0
   14874:	beq	148cc <__assert_fail@plt+0x3720>
   14878:	add	r6, r0, #1
   1487c:	mov	r0, r6
   14880:	bl	11044 <strlen@plt>
   14884:	mov	r7, r0
   14888:	add	r2, r0, #1
   1488c:	mov	r1, r6
   14890:	mov	r0, r5
   14894:	bl	10f00 <memmove@plt>
   14898:	str	r7, [r4, #52]	; 0x34
   1489c:	ldr	r3, [r8, #24]
   148a0:	str	r3, [r4, #28]
   148a4:	str	r3, [r4, #24]
   148a8:	mov	r0, r8
   148ac:	bl	12d1c <__assert_fail@plt+0x1b70>
   148b0:	mov	r5, r4
   148b4:	b	145d4 <__assert_fail@plt+0x3428>
   148b8:	ldr	r3, [r8, #48]	; 0x30
   148bc:	orr	r3, r3, #8192	; 0x2000
   148c0:	str	r3, [r8, #48]	; 0x30
   148c4:	mov	r5, #0
   148c8:	b	14a70 <__assert_fail@plt+0x38c4>
   148cc:	ldrb	r3, [r0, #1]
   148d0:	cmp	r3, #0
   148d4:	beq	1489c <__assert_fail@plt+0x36f0>
   148d8:	b	14878 <__assert_fail@plt+0x36cc>
   148dc:	cmp	r3, #2
   148e0:	movne	r5, r4
   148e4:	bne	14594 <__assert_fail@plt+0x33e8>
   148e8:	mov	r2, #1
   148ec:	mov	r1, r4
   148f0:	mov	r0, r8
   148f4:	bl	12a2c <__assert_fail@plt+0x1880>
   148f8:	strh	r0, [r4, #56]	; 0x38
   148fc:	cmp	r0, #1
   14900:	beq	14914 <__assert_fail@plt+0x3768>
   14904:	mov	r3, #3
   14908:	strh	r3, [r4, #60]	; 0x3c
   1490c:	mov	r5, r4
   14910:	b	14594 <__assert_fail@plt+0x33e8>
   14914:	ldr	r3, [r8, #48]	; 0x30
   14918:	tst	r3, #4
   1491c:	bne	14904 <__assert_fail@plt+0x3758>
   14920:	movw	r1, #43456	; 0xa9c0
   14924:	movt	r1, #1
   14928:	mov	r0, r8
   1492c:	bl	12da4 <__assert_fail@plt+0x1bf8>
   14930:	str	r0, [r4, #36]	; 0x24
   14934:	cmp	r0, #0
   14938:	blt	1494c <__assert_fail@plt+0x37a0>
   1493c:	ldrh	r3, [r4, #58]	; 0x3a
   14940:	orr	r3, r3, #2
   14944:	strh	r3, [r4, #58]	; 0x3a
   14948:	b	14904 <__assert_fail@plt+0x3758>
   1494c:	bl	11068 <__errno_location@plt>
   14950:	ldr	r3, [r0]
   14954:	str	r3, [r4, #32]
   14958:	mov	r3, #7
   1495c:	strh	r3, [r4, #56]	; 0x38
   14960:	b	14904 <__assert_fail@plt+0x3758>
   14964:	ldrd	r2, [r5, #112]	; 0x70
   14968:	cmp	r3, #0
   1496c:	cmpeq	r2, #2
   14970:	beq	14984 <__assert_fail@plt+0x37d8>
   14974:	cmp	r3, #0
   14978:	cmpeq	r2, #1
   1497c:	beq	14a70 <__assert_fail@plt+0x38c4>
   14980:	bl	1117c <abort@plt>
   14984:	mov	r2, #0
   14988:	mov	r1, r5
   1498c:	mov	r0, r8
   14990:	bl	12a2c <__assert_fail@plt+0x1880>
   14994:	strh	r0, [r5, #56]	; 0x38
   14998:	b	145e4 <__assert_fail@plt+0x3438>
   1499c:	mov	r0, r6
   149a0:	bl	199b8 <__assert_fail@plt+0x880c>
   149a4:	bl	11068 <__errno_location@plt>
   149a8:	mov	r3, #0
   149ac:	str	r3, [r0]
   149b0:	str	r3, [r8]
   149b4:	mov	r5, r4
   149b8:	b	14a70 <__assert_fail@plt+0x38c4>
   149bc:	bl	1117c <abort@plt>
   149c0:	mov	r0, r8
   149c4:	bl	1314c <__assert_fail@plt+0x1fa0>
   149c8:	cmp	r0, #0
   149cc:	beq	147dc <__assert_fail@plt+0x3630>
   149d0:	bl	11068 <__errno_location@plt>
   149d4:	ldr	r3, [r0]
   149d8:	str	r3, [r6, #32]
   149dc:	ldr	r3, [r8, #48]	; 0x30
   149e0:	orr	r3, r3, #8192	; 0x2000
   149e4:	str	r3, [r8, #48]	; 0x30
   149e8:	ldrh	r3, [r6, #56]	; 0x38
   149ec:	cmp	r3, #2
   149f0:	moveq	r5, r4
   149f4:	bne	147e8 <__assert_fail@plt+0x363c>
   149f8:	b	14a70 <__assert_fail@plt+0x38c4>
   149fc:	ldr	r0, [r6, #36]	; 0x24
   14a00:	bl	11128 <fchdir@plt>
   14a04:	cmp	r0, #0
   14a08:	beq	147d4 <__assert_fail@plt+0x3628>
   14a0c:	bl	11068 <__errno_location@plt>
   14a10:	ldr	r3, [r0]
   14a14:	str	r3, [r6, #32]
   14a18:	ldr	r3, [r8, #48]	; 0x30
   14a1c:	orr	r3, r3, #8192	; 0x2000
   14a20:	str	r3, [r8, #48]	; 0x30
   14a24:	b	147d4 <__assert_fail@plt+0x3628>
   14a28:	tst	r3, #1
   14a2c:	bne	147dc <__assert_fail@plt+0x3630>
   14a30:	movw	r3, #43452	; 0xa9bc
   14a34:	movt	r3, #1
   14a38:	mvn	r2, #0
   14a3c:	ldr	r1, [r6, #4]
   14a40:	mov	r0, r8
   14a44:	bl	131b0 <__assert_fail@plt+0x2004>
   14a48:	cmp	r0, #0
   14a4c:	beq	147dc <__assert_fail@plt+0x3630>
   14a50:	bl	11068 <__errno_location@plt>
   14a54:	ldr	r3, [r0]
   14a58:	str	r3, [r6, #32]
   14a5c:	ldr	r3, [r8, #48]	; 0x30
   14a60:	orr	r3, r3, #8192	; 0x2000
   14a64:	str	r3, [r8, #48]	; 0x30
   14a68:	b	149e8 <__assert_fail@plt+0x383c>
   14a6c:	mov	r5, #0
   14a70:	mov	r0, r5
   14a74:	ldrd	r4, [sp]
   14a78:	ldrd	r6, [sp, #8]
   14a7c:	ldr	r8, [sp, #16]
   14a80:	add	sp, sp, #20
   14a84:	pop	{pc}		; (ldr pc, [sp], #4)
   14a88:	cmp	r2, #4
   14a8c:	bhi	14a9c <__assert_fail@plt+0x38f0>
   14a90:	strh	r2, [r1, #60]	; 0x3c
   14a94:	mov	r0, #0
   14a98:	bx	lr
   14a9c:	str	r4, [sp, #-8]!
   14aa0:	str	lr, [sp, #4]
   14aa4:	bl	11068 <__errno_location@plt>
   14aa8:	mov	r3, #22
   14aac:	str	r3, [r0]
   14ab0:	mov	r0, #1
   14ab4:	ldr	r4, [sp]
   14ab8:	add	sp, sp, #4
   14abc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14ac4:	strd	r6, [sp, #8]
   14ac8:	str	r8, [sp, #16]
   14acc:	str	lr, [sp, #20]
   14ad0:	bics	r3, r1, #4096	; 0x1000
   14ad4:	bne	14b84 <__assert_fail@plt+0x39d8>
   14ad8:	mov	r4, r0
   14adc:	mov	r5, r1
   14ae0:	ldr	r6, [r0]
   14ae4:	bl	11068 <__errno_location@plt>
   14ae8:	mov	r7, r0
   14aec:	mov	r3, #0
   14af0:	str	r3, [r0]
   14af4:	ldr	r3, [r4, #48]	; 0x30
   14af8:	tst	r3, #8192	; 0x2000
   14afc:	movne	r0, #0
   14b00:	bne	14b70 <__assert_fail@plt+0x39c4>
   14b04:	ldrh	r3, [r6, #56]	; 0x38
   14b08:	cmp	r3, #9
   14b0c:	beq	14b98 <__assert_fail@plt+0x39ec>
   14b10:	cmp	r3, #1
   14b14:	movne	r0, #0
   14b18:	bne	14b70 <__assert_fail@plt+0x39c4>
   14b1c:	ldr	r0, [r4, #4]
   14b20:	cmp	r0, #0
   14b24:	beq	14b2c <__assert_fail@plt+0x3980>
   14b28:	bl	12df0 <__assert_fail@plt+0x1c44>
   14b2c:	cmp	r5, #4096	; 0x1000
   14b30:	movne	r5, #1
   14b34:	beq	14ba0 <__assert_fail@plt+0x39f4>
   14b38:	ldr	r3, [r6, #48]	; 0x30
   14b3c:	cmp	r3, #0
   14b40:	bne	14b60 <__assert_fail@plt+0x39b4>
   14b44:	ldr	r3, [r6, #24]
   14b48:	ldrb	r3, [r3]
   14b4c:	cmp	r3, #47	; 0x2f
   14b50:	beq	14b60 <__assert_fail@plt+0x39b4>
   14b54:	ldr	r3, [r4, #48]	; 0x30
   14b58:	tst	r3, #4
   14b5c:	beq	14bb4 <__assert_fail@plt+0x3a08>
   14b60:	mov	r1, r5
   14b64:	mov	r0, r4
   14b68:	bl	13480 <__assert_fail@plt+0x22d4>
   14b6c:	str	r0, [r4, #4]
   14b70:	ldrd	r4, [sp]
   14b74:	ldrd	r6, [sp, #8]
   14b78:	ldr	r8, [sp, #16]
   14b7c:	add	sp, sp, #20
   14b80:	pop	{pc}		; (ldr pc, [sp], #4)
   14b84:	bl	11068 <__errno_location@plt>
   14b88:	mov	r3, #22
   14b8c:	str	r3, [r0]
   14b90:	mov	r0, #0
   14b94:	b	14b70 <__assert_fail@plt+0x39c4>
   14b98:	ldr	r0, [r6, #8]
   14b9c:	b	14b70 <__assert_fail@plt+0x39c4>
   14ba0:	ldr	r3, [r4, #48]	; 0x30
   14ba4:	orr	r3, r3, #4096	; 0x1000
   14ba8:	str	r3, [r4, #48]	; 0x30
   14bac:	mov	r5, #2
   14bb0:	b	14b38 <__assert_fail@plt+0x398c>
   14bb4:	movw	r1, #43456	; 0xa9c0
   14bb8:	movt	r1, #1
   14bbc:	mov	r0, r4
   14bc0:	bl	12da4 <__assert_fail@plt+0x1bf8>
   14bc4:	subs	r6, r0, #0
   14bc8:	movlt	r0, #0
   14bcc:	strlt	r0, [r4, #4]
   14bd0:	blt	14b70 <__assert_fail@plt+0x39c4>
   14bd4:	mov	r1, r5
   14bd8:	mov	r0, r4
   14bdc:	bl	13480 <__assert_fail@plt+0x22d4>
   14be0:	str	r0, [r4, #4]
   14be4:	ldr	r3, [r4, #48]	; 0x30
   14be8:	tst	r3, #512	; 0x200
   14bec:	beq	14c08 <__assert_fail@plt+0x3a5c>
   14bf0:	mov	r2, #1
   14bf4:	mov	r1, r6
   14bf8:	mov	r0, r4
   14bfc:	bl	130b4 <__assert_fail@plt+0x1f08>
   14c00:	ldr	r0, [r4, #4]
   14c04:	b	14b70 <__assert_fail@plt+0x39c4>
   14c08:	mov	r0, r6
   14c0c:	bl	11128 <fchdir@plt>
   14c10:	cmp	r0, #0
   14c14:	bne	14c24 <__assert_fail@plt+0x3a78>
   14c18:	mov	r0, r6
   14c1c:	bl	11188 <close@plt>
   14c20:	b	14c00 <__assert_fail@plt+0x3a54>
   14c24:	ldr	r4, [r7]
   14c28:	mov	r0, r6
   14c2c:	bl	11188 <close@plt>
   14c30:	str	r4, [r7]
   14c34:	mov	r0, #0
   14c38:	b	14b70 <__assert_fail@plt+0x39c4>
   14c3c:	andeq	r0, r0, r0
   14c40:	ror	r0, r0, #3
   14c44:	udiv	r3, r0, r1
   14c48:	mls	r0, r3, r1, r0
   14c4c:	bx	lr
   14c50:	cmp	r1, r0
   14c54:	movne	r0, #0
   14c58:	moveq	r0, #1
   14c5c:	bx	lr
   14c60:	ldr	r2, [r0, #20]
   14c64:	movw	r3, #43460	; 0xa9c4
   14c68:	movt	r3, #1
   14c6c:	cmp	r2, r3
   14c70:	beq	14d0c <__assert_fail@plt+0x3b60>
   14c74:	vldr	s15, [r2, #8]
   14c78:	vldr	s14, [pc, #148]	; 14d14 <__assert_fail@plt+0x3b68>
   14c7c:	vcmpe.f32	s15, s14
   14c80:	vmrs	APSR_nzcv, fpscr
   14c84:	ble	14ce4 <__assert_fail@plt+0x3b38>
   14c88:	vldr	s14, [pc, #136]	; 14d18 <__assert_fail@plt+0x3b6c>
   14c8c:	vcmpe.f32	s15, s14
   14c90:	vmrs	APSR_nzcv, fpscr
   14c94:	bpl	14ce4 <__assert_fail@plt+0x3b38>
   14c98:	vldr	s13, [r2, #12]
   14c9c:	vldr	s14, [pc, #120]	; 14d1c <__assert_fail@plt+0x3b70>
   14ca0:	vcmpe.f32	s13, s14
   14ca4:	vmrs	APSR_nzcv, fpscr
   14ca8:	ble	14ce4 <__assert_fail@plt+0x3b38>
   14cac:	vldr	s14, [r2]
   14cb0:	vcmpe.f32	s14, #0.0
   14cb4:	vmrs	APSR_nzcv, fpscr
   14cb8:	blt	14ce4 <__assert_fail@plt+0x3b38>
   14cbc:	vldr	s13, [pc, #80]	; 14d14 <__assert_fail@plt+0x3b68>
   14cc0:	vadd.f32	s14, s14, s13
   14cc4:	vldr	s13, [r2, #4]
   14cc8:	vcmpe.f32	s14, s13
   14ccc:	vmrs	APSR_nzcv, fpscr
   14cd0:	bpl	14ce4 <__assert_fail@plt+0x3b38>
   14cd4:	vldr	s12, [pc, #68]	; 14d20 <__assert_fail@plt+0x3b74>
   14cd8:	vcmpe.f32	s13, s12
   14cdc:	vmrs	APSR_nzcv, fpscr
   14ce0:	bls	14cf8 <__assert_fail@plt+0x3b4c>
   14ce4:	movw	r3, #43460	; 0xa9c4
   14ce8:	movt	r3, #1
   14cec:	str	r3, [r0, #20]
   14cf0:	mov	r0, #0
   14cf4:	bx	lr
   14cf8:	vcmpe.f32	s15, s14
   14cfc:	vmrs	APSR_nzcv, fpscr
   14d00:	ble	14ce4 <__assert_fail@plt+0x3b38>
   14d04:	mov	r0, #1
   14d08:	bx	lr
   14d0c:	mov	r0, #1
   14d10:	bx	lr
   14d14:	stclcc	12, cr12, [ip, #820]	; 0x334
   14d18:	svccc	0x00666666
   14d1c:	svccc	0x008ccccd
   14d20:	svccc	0x00800000
   14d24:	ldrb	r3, [r1, #16]
   14d28:	cmp	r3, #0
   14d2c:	bne	14d58 <__assert_fail@plt+0x3bac>
   14d30:	vmov	s15, r0
   14d34:	vcvt.f32.u32	s15, s15
   14d38:	vldr	s13, [r1, #8]
   14d3c:	vdiv.f32	s14, s15, s13
   14d40:	vldr	s15, [pc, #224]	; 14e28 <__assert_fail@plt+0x3c7c>
   14d44:	vcmpe.f32	s14, s15
   14d48:	vmrs	APSR_nzcv, fpscr
   14d4c:	bge	14e18 <__assert_fail@plt+0x3c6c>
   14d50:	vcvt.u32.f32	s15, s14
   14d54:	vmov	r0, s15
   14d58:	cmp	r0, #10
   14d5c:	movcc	r0, #10
   14d60:	orr	r0, r0, #1
   14d64:	cmn	r0, #1
   14d68:	beq	14d7c <__assert_fail@plt+0x3bd0>
   14d6c:	push	{lr}		; (str lr, [sp, #-4]!)
   14d70:	movw	lr, #43691	; 0xaaab
   14d74:	movt	lr, #43690	; 0xaaaa
   14d78:	b	14da4 <__assert_fail@plt+0x3bf8>
   14d7c:	mov	r0, #0
   14d80:	bx	lr
   14d84:	mov	r3, #3
   14d88:	udiv	r2, r0, r3
   14d8c:	mls	r3, r3, r2, r0
   14d90:	cmp	r3, #0
   14d94:	bne	14df4 <__assert_fail@plt+0x3c48>
   14d98:	add	r0, r0, #2
   14d9c:	cmn	r0, #1
   14da0:	beq	14e20 <__assert_fail@plt+0x3c74>
   14da4:	cmp	r0, #9
   14da8:	bls	14d84 <__assert_fail@plt+0x3bd8>
   14dac:	umull	r2, r3, lr, r0
   14db0:	lsr	r3, r3, #1
   14db4:	add	r3, r3, r3, lsl #1
   14db8:	cmp	r0, r3
   14dbc:	beq	14d98 <__assert_fail@plt+0x3bec>
   14dc0:	mov	r1, #16
   14dc4:	mov	r2, #9
   14dc8:	mov	r3, #3
   14dcc:	add	r2, r2, r1
   14dd0:	add	r3, r3, #2
   14dd4:	cmp	r2, r0
   14dd8:	bcs	14d88 <__assert_fail@plt+0x3bdc>
   14ddc:	add	r1, r1, #8
   14de0:	udiv	ip, r0, r3
   14de4:	mls	ip, r3, ip, r0
   14de8:	cmp	ip, #0
   14dec:	bne	14dcc <__assert_fail@plt+0x3c20>
   14df0:	b	14d98 <__assert_fail@plt+0x3bec>
   14df4:	lsl	r2, r0, #2
   14df8:	lsr	r3, r0, #30
   14dfc:	adds	r3, r3, #0
   14e00:	movne	r3, #1
   14e04:	cmp	r2, #0
   14e08:	movlt	r3, #1
   14e0c:	cmp	r3, #0
   14e10:	movne	r0, #0
   14e14:	pop	{pc}		; (ldr pc, [sp], #4)
   14e18:	mov	r0, #0
   14e1c:	bx	lr
   14e20:	mov	r0, #0
   14e24:	b	14e14 <__assert_fail@plt+0x3c68>
   14e28:	svcmi	0x00800000
   14e2c:	str	r4, [sp, #-8]!
   14e30:	str	lr, [sp, #4]
   14e34:	mov	r4, r0
   14e38:	mov	r0, r1
   14e3c:	ldr	r3, [r4, #24]
   14e40:	ldr	r1, [r4, #8]
   14e44:	blx	r3
   14e48:	ldr	r3, [r4, #8]
   14e4c:	cmp	r3, r0
   14e50:	bls	14e68 <__assert_fail@plt+0x3cbc>
   14e54:	ldr	r3, [r4]
   14e58:	add	r0, r3, r0, lsl #3
   14e5c:	ldr	r4, [sp]
   14e60:	add	sp, sp, #4
   14e64:	pop	{pc}		; (ldr pc, [sp], #4)
   14e68:	bl	1117c <abort@plt>
   14e6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e70:	strd	r6, [sp, #8]
   14e74:	strd	r8, [sp, #16]
   14e78:	strd	sl, [sp, #24]
   14e7c:	str	lr, [sp, #32]
   14e80:	sub	sp, sp, #4
   14e84:	ldr	r7, [r1]
   14e88:	ldr	r3, [r1, #4]
   14e8c:	cmp	r7, r3
   14e90:	bcs	14fe8 <__assert_fail@plt+0x3e3c>
   14e94:	mov	fp, r2
   14e98:	mov	r9, r1
   14e9c:	mov	r6, r0
   14ea0:	add	r7, r7, #8
   14ea4:	mov	sl, #0
   14ea8:	b	14f7c <__assert_fail@plt+0x3dd0>
   14eac:	str	r5, [r0]
   14eb0:	ldr	r2, [r6, #12]
   14eb4:	add	r2, r2, #1
   14eb8:	str	r2, [r6, #12]
   14ebc:	str	sl, [r4]
   14ec0:	ldr	r2, [r6, #36]	; 0x24
   14ec4:	str	r2, [r4, #4]
   14ec8:	str	r4, [r6, #36]	; 0x24
   14ecc:	mov	r4, r3
   14ed0:	cmp	r3, #0
   14ed4:	beq	14f08 <__assert_fail@plt+0x3d5c>
   14ed8:	ldr	r5, [r4]
   14edc:	mov	r1, r5
   14ee0:	mov	r0, r6
   14ee4:	bl	14e2c <__assert_fail@plt+0x3c80>
   14ee8:	ldr	r3, [r4, #4]
   14eec:	ldr	r2, [r0]
   14ef0:	cmp	r2, #0
   14ef4:	beq	14eac <__assert_fail@plt+0x3d00>
   14ef8:	ldr	r2, [r0, #4]
   14efc:	str	r2, [r4, #4]
   14f00:	str	r4, [r0, #4]
   14f04:	b	14ecc <__assert_fail@plt+0x3d20>
   14f08:	ldr	r4, [r8, #-8]
   14f0c:	str	sl, [r8, #-4]
   14f10:	cmp	fp, #0
   14f14:	bne	14f68 <__assert_fail@plt+0x3dbc>
   14f18:	mov	r1, r4
   14f1c:	mov	r0, r6
   14f20:	bl	14e2c <__assert_fail@plt+0x3c80>
   14f24:	mov	r5, r0
   14f28:	ldr	r3, [r0]
   14f2c:	cmp	r3, #0
   14f30:	beq	14fb4 <__assert_fail@plt+0x3e08>
   14f34:	ldr	r0, [r6, #36]	; 0x24
   14f38:	cmp	r0, #0
   14f3c:	beq	14f9c <__assert_fail@plt+0x3df0>
   14f40:	ldr	r3, [r0, #4]
   14f44:	str	r3, [r6, #36]	; 0x24
   14f48:	str	r4, [r0]
   14f4c:	ldr	r3, [r5, #4]
   14f50:	str	r3, [r0, #4]
   14f54:	str	r0, [r5, #4]
   14f58:	str	sl, [r8, #-8]
   14f5c:	ldr	r3, [r9, #12]
   14f60:	sub	r3, r3, #1
   14f64:	str	r3, [r9, #12]
   14f68:	add	r2, r7, #8
   14f6c:	ldr	r3, [r9, #4]
   14f70:	cmp	r3, r7
   14f74:	bls	14fc8 <__assert_fail@plt+0x3e1c>
   14f78:	mov	r7, r2
   14f7c:	mov	r8, r7
   14f80:	ldr	r3, [r7, #-8]
   14f84:	cmp	r3, #0
   14f88:	beq	14f68 <__assert_fail@plt+0x3dbc>
   14f8c:	ldr	r4, [r7, #-4]
   14f90:	cmp	r4, #0
   14f94:	bne	14ed8 <__assert_fail@plt+0x3d2c>
   14f98:	b	14f08 <__assert_fail@plt+0x3d5c>
   14f9c:	mov	r0, #8
   14fa0:	bl	193b4 <__assert_fail@plt+0x8208>
   14fa4:	cmp	r0, #0
   14fa8:	bne	14f48 <__assert_fail@plt+0x3d9c>
   14fac:	mov	r0, fp
   14fb0:	b	14fcc <__assert_fail@plt+0x3e20>
   14fb4:	str	r4, [r0]
   14fb8:	ldr	r3, [r6, #12]
   14fbc:	add	r3, r3, #1
   14fc0:	str	r3, [r6, #12]
   14fc4:	b	14f58 <__assert_fail@plt+0x3dac>
   14fc8:	mov	r0, #1
   14fcc:	add	sp, sp, #4
   14fd0:	ldrd	r4, [sp]
   14fd4:	ldrd	r6, [sp, #8]
   14fd8:	ldrd	r8, [sp, #16]
   14fdc:	ldrd	sl, [sp, #24]
   14fe0:	add	sp, sp, #32
   14fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fe8:	mov	r0, #1
   14fec:	b	14fcc <__assert_fail@plt+0x3e20>
   14ff0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14ff4:	strd	r6, [sp, #8]
   14ff8:	str	r8, [sp, #16]
   14ffc:	str	lr, [sp, #20]
   15000:	mov	r6, r0
   15004:	mov	r5, r1
   15008:	mov	r7, r2
   1500c:	mov	r8, r3
   15010:	bl	14e2c <__assert_fail@plt+0x3c80>
   15014:	mov	r4, r0
   15018:	str	r0, [r7]
   1501c:	ldr	r0, [r0]
   15020:	cmp	r0, #0
   15024:	beq	150a0 <__assert_fail@plt+0x3ef4>
   15028:	cmp	r0, r5
   1502c:	beq	150b4 <__assert_fail@plt+0x3f08>
   15030:	ldr	r3, [r6, #28]
   15034:	mov	r1, r0
   15038:	mov	r0, r5
   1503c:	blx	r3
   15040:	cmp	r0, #0
   15044:	bne	150b4 <__assert_fail@plt+0x3f08>
   15048:	ldr	r0, [r4, #4]
   1504c:	cmp	r0, #0
   15050:	beq	150a0 <__assert_fail@plt+0x3ef4>
   15054:	ldr	r1, [r0]
   15058:	cmp	r5, r1
   1505c:	beq	15090 <__assert_fail@plt+0x3ee4>
   15060:	ldr	r3, [r6, #28]
   15064:	mov	r0, r5
   15068:	blx	r3
   1506c:	cmp	r0, #0
   15070:	bne	15090 <__assert_fail@plt+0x3ee4>
   15074:	ldr	r4, [r4, #4]
   15078:	ldr	r0, [r4, #4]
   1507c:	cmp	r0, #0
   15080:	beq	150a0 <__assert_fail@plt+0x3ef4>
   15084:	ldr	r1, [r0]
   15088:	cmp	r1, r5
   1508c:	bne	15060 <__assert_fail@plt+0x3eb4>
   15090:	ldr	r3, [r4, #4]
   15094:	ldr	r0, [r3]
   15098:	cmp	r8, #0
   1509c:	bne	150f4 <__assert_fail@plt+0x3f48>
   150a0:	ldrd	r4, [sp]
   150a4:	ldrd	r6, [sp, #8]
   150a8:	ldr	r8, [sp, #16]
   150ac:	add	sp, sp, #20
   150b0:	pop	{pc}		; (ldr pc, [sp], #4)
   150b4:	ldr	r0, [r4]
   150b8:	cmp	r8, #0
   150bc:	beq	150a0 <__assert_fail@plt+0x3ef4>
   150c0:	ldr	r1, [r4, #4]
   150c4:	cmp	r1, #0
   150c8:	moveq	r3, #0
   150cc:	streq	r3, [r4]
   150d0:	beq	150a0 <__assert_fail@plt+0x3ef4>
   150d4:	ldrd	r2, [r1]
   150d8:	strd	r2, [r4]
   150dc:	mov	r3, #0
   150e0:	str	r3, [r1]
   150e4:	ldr	r3, [r6, #36]	; 0x24
   150e8:	str	r3, [r1, #4]
   150ec:	str	r1, [r6, #36]	; 0x24
   150f0:	b	150a0 <__assert_fail@plt+0x3ef4>
   150f4:	ldr	r2, [r3, #4]
   150f8:	str	r2, [r4, #4]
   150fc:	mov	r2, #0
   15100:	str	r2, [r3]
   15104:	ldr	r2, [r6, #36]	; 0x24
   15108:	str	r2, [r3, #4]
   1510c:	str	r3, [r6, #36]	; 0x24
   15110:	b	150a0 <__assert_fail@plt+0x3ef4>
   15114:	ldr	r0, [r0, #8]
   15118:	bx	lr
   1511c:	ldr	r0, [r0, #12]
   15120:	bx	lr
   15124:	ldr	r0, [r0, #16]
   15128:	bx	lr
   1512c:	ldr	r2, [r0]
   15130:	ldr	r3, [r0, #4]
   15134:	cmp	r2, r3
   15138:	bcs	151a8 <__assert_fail@plt+0x3ffc>
   1513c:	add	r1, r2, #8
   15140:	sub	ip, r3, #1
   15144:	sub	ip, ip, r2
   15148:	bic	ip, ip, #7
   1514c:	add	r2, r2, #16
   15150:	add	ip, ip, r2
   15154:	mov	r0, #0
   15158:	b	15174 <__assert_fail@plt+0x3fc8>
   1515c:	mov	r2, #1
   15160:	cmp	r0, r2
   15164:	movcc	r0, r2
   15168:	add	r1, r1, #8
   1516c:	cmp	r1, ip
   15170:	beq	151a4 <__assert_fail@plt+0x3ff8>
   15174:	ldr	r3, [r1, #-8]
   15178:	cmp	r3, #0
   1517c:	beq	15168 <__assert_fail@plt+0x3fbc>
   15180:	ldr	r3, [r1, #-4]
   15184:	cmp	r3, #0
   15188:	beq	1515c <__assert_fail@plt+0x3fb0>
   1518c:	mov	r2, #1
   15190:	add	r2, r2, #1
   15194:	ldr	r3, [r3, #4]
   15198:	cmp	r3, #0
   1519c:	bne	15190 <__assert_fail@plt+0x3fe4>
   151a0:	b	15160 <__assert_fail@plt+0x3fb4>
   151a4:	bx	lr
   151a8:	mov	r0, #0
   151ac:	bx	lr
   151b0:	push	{lr}		; (str lr, [sp, #-4]!)
   151b4:	ldr	r2, [r0]
   151b8:	ldr	r3, [r0, #4]
   151bc:	cmp	r2, r3
   151c0:	bcs	15228 <__assert_fail@plt+0x407c>
   151c4:	add	r1, r2, #8
   151c8:	sub	ip, r3, #1
   151cc:	sub	ip, ip, r2
   151d0:	bic	ip, ip, #7
   151d4:	add	r2, r2, #16
   151d8:	add	ip, ip, r2
   151dc:	mov	r2, #0
   151e0:	mov	lr, r2
   151e4:	b	151f4 <__assert_fail@plt+0x4048>
   151e8:	add	r1, r1, #8
   151ec:	cmp	r1, ip
   151f0:	beq	15230 <__assert_fail@plt+0x4084>
   151f4:	ldr	r3, [r1, #-8]
   151f8:	cmp	r3, #0
   151fc:	beq	151e8 <__assert_fail@plt+0x403c>
   15200:	add	lr, lr, #1
   15204:	add	r2, r2, #1
   15208:	ldr	r3, [r1, #-4]
   1520c:	cmp	r3, #0
   15210:	beq	151e8 <__assert_fail@plt+0x403c>
   15214:	add	r2, r2, #1
   15218:	ldr	r3, [r3, #4]
   1521c:	cmp	r3, #0
   15220:	bne	15214 <__assert_fail@plt+0x4068>
   15224:	b	151e8 <__assert_fail@plt+0x403c>
   15228:	mov	r2, #0
   1522c:	mov	lr, r2
   15230:	ldr	r3, [r0, #12]
   15234:	cmp	r3, lr
   15238:	movne	r0, #0
   1523c:	beq	15244 <__assert_fail@plt+0x4098>
   15240:	pop	{pc}		; (ldr pc, [sp], #4)
   15244:	ldr	r0, [r0, #16]
   15248:	cmp	r0, r2
   1524c:	movne	r0, #0
   15250:	moveq	r0, #1
   15254:	b	15240 <__assert_fail@plt+0x4094>
   15258:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1525c:	strd	r6, [sp, #8]
   15260:	str	r8, [sp, #16]
   15264:	str	lr, [sp, #20]
   15268:	sub	sp, sp, #8
   1526c:	mov	r6, r0
   15270:	mov	r4, r1
   15274:	ldr	r5, [r0, #8]
   15278:	ldr	r7, [r0, #12]
   1527c:	bl	1512c <__assert_fail@plt+0x3f80>
   15280:	mov	r8, r0
   15284:	ldr	r3, [r6, #16]
   15288:	movw	r2, #43480	; 0xa9d8
   1528c:	movt	r2, #1
   15290:	mov	r1, #1
   15294:	mov	r0, r4
   15298:	bl	110b0 <__fprintf_chk@plt>
   1529c:	mov	r3, r5
   152a0:	movw	r2, #43504	; 0xa9f0
   152a4:	movt	r2, #1
   152a8:	mov	r1, #1
   152ac:	mov	r0, r4
   152b0:	bl	110b0 <__fprintf_chk@plt>
   152b4:	vmov	s15, r7
   152b8:	vcvt.f64.u32	d6, s15
   152bc:	vldr	d7, [pc, #92]	; 15320 <__assert_fail@plt+0x4174>
   152c0:	vmul.f64	d6, d6, d7
   152c4:	vmov	s15, r5
   152c8:	vcvt.f64.u32	d7, s15
   152cc:	vdiv.f64	d5, d6, d7
   152d0:	vstr	d5, [sp]
   152d4:	mov	r3, r7
   152d8:	movw	r2, #43528	; 0xaa08
   152dc:	movt	r2, #1
   152e0:	mov	r1, #1
   152e4:	mov	r0, r4
   152e8:	bl	110b0 <__fprintf_chk@plt>
   152ec:	mov	r3, r8
   152f0:	movw	r2, #43564	; 0xaa2c
   152f4:	movt	r2, #1
   152f8:	mov	r1, #1
   152fc:	mov	r0, r4
   15300:	bl	110b0 <__fprintf_chk@plt>
   15304:	add	sp, sp, #8
   15308:	ldrd	r4, [sp]
   1530c:	ldrd	r6, [sp, #8]
   15310:	ldr	r8, [sp, #16]
   15314:	add	sp, sp, #20
   15318:	pop	{pc}		; (ldr pc, [sp], #4)
   1531c:	nop	{0}
   15320:	andeq	r0, r0, r0
   15324:	subsmi	r0, r9, r0
   15328:	strd	r4, [sp, #-16]!
   1532c:	str	r6, [sp, #8]
   15330:	str	lr, [sp, #12]
   15334:	mov	r6, r0
   15338:	mov	r5, r1
   1533c:	bl	14e2c <__assert_fail@plt+0x3c80>
   15340:	ldr	r1, [r0]
   15344:	cmp	r1, #0
   15348:	beq	1539c <__assert_fail@plt+0x41f0>
   1534c:	mov	r4, r0
   15350:	cmp	r1, r5
   15354:	beq	15384 <__assert_fail@plt+0x41d8>
   15358:	ldr	r3, [r6, #28]
   1535c:	mov	r0, r5
   15360:	blx	r3
   15364:	cmp	r0, #0
   15368:	bne	15384 <__assert_fail@plt+0x41d8>
   1536c:	ldr	r4, [r4, #4]
   15370:	cmp	r4, #0
   15374:	beq	15388 <__assert_fail@plt+0x41dc>
   15378:	ldr	r1, [r4]
   1537c:	cmp	r1, r5
   15380:	bne	15358 <__assert_fail@plt+0x41ac>
   15384:	ldr	r4, [r4]
   15388:	mov	r0, r4
   1538c:	ldrd	r4, [sp]
   15390:	ldr	r6, [sp, #8]
   15394:	add	sp, sp, #12
   15398:	pop	{pc}		; (ldr pc, [sp], #4)
   1539c:	mov	r4, r1
   153a0:	b	15388 <__assert_fail@plt+0x41dc>
   153a4:	ldr	r3, [r0, #16]
   153a8:	cmp	r3, #0
   153ac:	beq	15404 <__assert_fail@plt+0x4258>
   153b0:	ldr	r2, [r0]
   153b4:	ldr	r1, [r0, #4]
   153b8:	cmp	r2, r1
   153bc:	bcs	153f8 <__assert_fail@plt+0x424c>
   153c0:	ldr	r0, [r2]
   153c4:	cmp	r0, #0
   153c8:	bxne	lr
   153cc:	mov	r3, r2
   153d0:	sub	r1, r1, #1
   153d4:	sub	r1, r1, r2
   153d8:	bic	r1, r1, #7
   153dc:	add	r2, r2, r1
   153e0:	cmp	r3, r2
   153e4:	beq	153f8 <__assert_fail@plt+0x424c>
   153e8:	ldr	r0, [r3, #8]!
   153ec:	cmp	r0, #0
   153f0:	beq	153e0 <__assert_fail@plt+0x4234>
   153f4:	bx	lr
   153f8:	str	r4, [sp, #-8]!
   153fc:	str	lr, [sp, #4]
   15400:	bl	1117c <abort@plt>
   15404:	mov	r0, #0
   15408:	bx	lr
   1540c:	strd	r4, [sp, #-16]!
   15410:	str	r6, [sp, #8]
   15414:	str	lr, [sp, #12]
   15418:	mov	r5, r0
   1541c:	mov	r4, r1
   15420:	bl	14e2c <__assert_fail@plt+0x3c80>
   15424:	mov	r2, r0
   15428:	mov	r3, r0
   1542c:	b	1543c <__assert_fail@plt+0x4290>
   15430:	ldr	r3, [r3, #4]
   15434:	cmp	r3, #0
   15438:	beq	15458 <__assert_fail@plt+0x42ac>
   1543c:	ldr	r1, [r3]
   15440:	cmp	r1, r4
   15444:	bne	15430 <__assert_fail@plt+0x4284>
   15448:	ldr	r3, [r3, #4]
   1544c:	cmp	r3, #0
   15450:	ldrne	r0, [r3]
   15454:	bne	1547c <__assert_fail@plt+0x42d0>
   15458:	ldr	r3, [r5, #4]
   1545c:	add	r2, r2, #8
   15460:	cmp	r3, r2
   15464:	bls	15478 <__assert_fail@plt+0x42cc>
   15468:	ldr	r0, [r2]
   1546c:	cmp	r0, #0
   15470:	beq	1545c <__assert_fail@plt+0x42b0>
   15474:	b	1547c <__assert_fail@plt+0x42d0>
   15478:	mov	r0, #0
   1547c:	ldrd	r4, [sp]
   15480:	ldr	r6, [sp, #8]
   15484:	add	sp, sp, #12
   15488:	pop	{pc}		; (ldr pc, [sp], #4)
   1548c:	strd	r4, [sp, #-12]!
   15490:	str	lr, [sp, #8]
   15494:	ldr	r4, [r0]
   15498:	ldr	r3, [r0, #4]
   1549c:	cmp	r4, r3
   154a0:	bcs	15508 <__assert_fail@plt+0x435c>
   154a4:	mov	r5, r0
   154a8:	mov	r0, #0
   154ac:	b	154c0 <__assert_fail@plt+0x4314>
   154b0:	add	r4, r4, #8
   154b4:	ldr	r3, [r5, #4]
   154b8:	cmp	r3, r4
   154bc:	bls	154fc <__assert_fail@plt+0x4350>
   154c0:	ldr	r3, [r4]
   154c4:	cmp	r3, #0
   154c8:	beq	154b0 <__assert_fail@plt+0x4304>
   154cc:	cmp	r2, r0
   154d0:	bls	154fc <__assert_fail@plt+0x4350>
   154d4:	add	ip, r1, r0, lsl #2
   154d8:	mov	r3, r4
   154dc:	add	r0, r0, #1
   154e0:	ldr	lr, [r3]
   154e4:	str	lr, [ip], #4
   154e8:	ldr	r3, [r3, #4]
   154ec:	cmp	r3, #0
   154f0:	beq	154b0 <__assert_fail@plt+0x4304>
   154f4:	cmp	r2, r0
   154f8:	bne	154dc <__assert_fail@plt+0x4330>
   154fc:	ldrd	r4, [sp]
   15500:	add	sp, sp, #8
   15504:	pop	{pc}		; (ldr pc, [sp], #4)
   15508:	mov	r0, #0
   1550c:	b	154fc <__assert_fail@plt+0x4350>
   15510:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15514:	strd	r6, [sp, #8]
   15518:	strd	r8, [sp, #16]
   1551c:	str	sl, [sp, #24]
   15520:	str	lr, [sp, #28]
   15524:	ldr	r8, [r0]
   15528:	ldr	r3, [r0, #4]
   1552c:	cmp	r8, r3
   15530:	bcs	15590 <__assert_fail@plt+0x43e4>
   15534:	mov	r7, r2
   15538:	mov	r6, r1
   1553c:	mov	r9, r0
   15540:	mov	r5, #0
   15544:	b	15558 <__assert_fail@plt+0x43ac>
   15548:	add	r8, r8, #8
   1554c:	ldr	r3, [r9, #4]
   15550:	cmp	r3, r8
   15554:	bls	15594 <__assert_fail@plt+0x43e8>
   15558:	ldr	r3, [r8]
   1555c:	cmp	r3, #0
   15560:	beq	15548 <__assert_fail@plt+0x439c>
   15564:	mov	r4, r8
   15568:	mov	r1, r7
   1556c:	ldr	r0, [r4]
   15570:	blx	r6
   15574:	cmp	r0, #0
   15578:	beq	15594 <__assert_fail@plt+0x43e8>
   1557c:	add	r5, r5, #1
   15580:	ldr	r4, [r4, #4]
   15584:	cmp	r4, #0
   15588:	bne	15568 <__assert_fail@plt+0x43bc>
   1558c:	b	15548 <__assert_fail@plt+0x439c>
   15590:	mov	r5, #0
   15594:	mov	r0, r5
   15598:	ldrd	r4, [sp]
   1559c:	ldrd	r6, [sp, #8]
   155a0:	ldrd	r8, [sp, #16]
   155a4:	ldr	sl, [sp, #24]
   155a8:	add	sp, sp, #28
   155ac:	pop	{pc}		; (ldr pc, [sp], #4)
   155b0:	ldrb	r2, [r0]
   155b4:	cmp	r2, #0
   155b8:	beq	155e4 <__assert_fail@plt+0x4438>
   155bc:	mov	r3, #0
   155c0:	rsb	r3, r3, r3, lsl #5
   155c4:	add	r3, r3, r2
   155c8:	udiv	r2, r3, r1
   155cc:	mls	r3, r1, r2, r3
   155d0:	ldrb	r2, [r0, #1]!
   155d4:	cmp	r2, #0
   155d8:	bne	155c0 <__assert_fail@plt+0x4414>
   155dc:	mov	r0, r3
   155e0:	bx	lr
   155e4:	mov	r3, #0
   155e8:	b	155dc <__assert_fail@plt+0x4430>
   155ec:	strd	r4, [sp, #-8]!
   155f0:	movw	r3, #43460	; 0xa9c4
   155f4:	movt	r3, #1
   155f8:	ldrd	r4, [r3]
   155fc:	strd	r4, [r0]
   15600:	ldrd	r4, [r3, #8]
   15604:	strd	r4, [r0, #8]
   15608:	ldr	r3, [r3, #16]
   1560c:	str	r3, [r0, #16]
   15610:	ldrd	r4, [sp]
   15614:	add	sp, sp, #8
   15618:	bx	lr
   1561c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15620:	strd	r6, [sp, #8]
   15624:	str	r8, [sp, #16]
   15628:	str	lr, [sp, #20]
   1562c:	mov	r8, r0
   15630:	mov	r5, r1
   15634:	subs	r7, r2, #0
   15638:	movw	r2, #19520	; 0x4c40
   1563c:	movt	r2, #1
   15640:	cmp	r7, #0
   15644:	moveq	r7, r2
   15648:	subs	r6, r3, #0
   1564c:	movw	r3, #19536	; 0x4c50
   15650:	movt	r3, #1
   15654:	cmp	r6, #0
   15658:	moveq	r6, r3
   1565c:	mov	r0, #40	; 0x28
   15660:	bl	193b4 <__assert_fail@plt+0x8208>
   15664:	subs	r4, r0, #0
   15668:	beq	156e8 <__assert_fail@plt+0x453c>
   1566c:	movw	r3, #43460	; 0xa9c4
   15670:	movt	r3, #1
   15674:	cmp	r5, #0
   15678:	moveq	r5, r3
   1567c:	str	r5, [r4, #20]
   15680:	mov	r0, r4
   15684:	bl	14c60 <__assert_fail@plt+0x3ab4>
   15688:	cmp	r0, #0
   1568c:	beq	15700 <__assert_fail@plt+0x4554>
   15690:	mov	r1, r5
   15694:	mov	r0, r8
   15698:	bl	14d24 <__assert_fail@plt+0x3b78>
   1569c:	str	r0, [r4, #8]
   156a0:	cmp	r0, #0
   156a4:	beq	15700 <__assert_fail@plt+0x4554>
   156a8:	mov	r1, #8
   156ac:	bl	19340 <__assert_fail@plt+0x8194>
   156b0:	str	r0, [r4]
   156b4:	cmp	r0, #0
   156b8:	beq	15700 <__assert_fail@plt+0x4554>
   156bc:	ldr	r3, [r4, #8]
   156c0:	add	r0, r0, r3, lsl #3
   156c4:	str	r0, [r4, #4]
   156c8:	mov	r3, #0
   156cc:	str	r3, [r4, #12]
   156d0:	str	r3, [r4, #16]
   156d4:	str	r7, [r4, #24]
   156d8:	str	r6, [r4, #28]
   156dc:	ldr	r2, [sp, #24]
   156e0:	str	r2, [r4, #32]
   156e4:	str	r3, [r4, #36]	; 0x24
   156e8:	mov	r0, r4
   156ec:	ldrd	r4, [sp]
   156f0:	ldrd	r6, [sp, #8]
   156f4:	ldr	r8, [sp, #16]
   156f8:	add	sp, sp, #20
   156fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15700:	mov	r0, r4
   15704:	bl	199b8 <__assert_fail@plt+0x880c>
   15708:	mov	r4, #0
   1570c:	b	156e8 <__assert_fail@plt+0x453c>
   15710:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15714:	strd	r6, [sp, #8]
   15718:	str	r8, [sp, #16]
   1571c:	str	lr, [sp, #20]
   15720:	mov	r5, r0
   15724:	ldr	r6, [r0]
   15728:	ldr	r3, [r0, #4]
   1572c:	cmp	r6, r3
   15730:	bcs	157c8 <__assert_fail@plt+0x461c>
   15734:	add	r6, r6, #8
   15738:	mov	r7, #0
   1573c:	b	157a8 <__assert_fail@plt+0x45fc>
   15740:	str	r7, [r4]
   15744:	ldr	r3, [r4, #4]
   15748:	ldr	r2, [r5, #36]	; 0x24
   1574c:	str	r2, [r4, #4]
   15750:	str	r4, [r5, #36]	; 0x24
   15754:	mov	r4, r3
   15758:	cmp	r3, #0
   1575c:	beq	15778 <__assert_fail@plt+0x45cc>
   15760:	ldr	r3, [r5, #32]
   15764:	cmp	r3, #0
   15768:	beq	15740 <__assert_fail@plt+0x4594>
   1576c:	ldr	r0, [r4]
   15770:	blx	r3
   15774:	b	15740 <__assert_fail@plt+0x4594>
   15778:	ldr	r3, [r5, #32]
   1577c:	cmp	r3, #0
   15780:	beq	1578c <__assert_fail@plt+0x45e0>
   15784:	ldr	r0, [r8, #-8]
   15788:	blx	r3
   1578c:	str	r7, [r8, #-8]
   15790:	str	r7, [r8, #-4]
   15794:	add	r2, r6, #8
   15798:	ldr	r3, [r5, #4]
   1579c:	cmp	r3, r6
   157a0:	bls	157c8 <__assert_fail@plt+0x461c>
   157a4:	mov	r6, r2
   157a8:	mov	r8, r6
   157ac:	ldr	r3, [r6, #-8]
   157b0:	cmp	r3, #0
   157b4:	beq	15794 <__assert_fail@plt+0x45e8>
   157b8:	ldr	r4, [r6, #-4]
   157bc:	cmp	r4, #0
   157c0:	bne	15760 <__assert_fail@plt+0x45b4>
   157c4:	b	15778 <__assert_fail@plt+0x45cc>
   157c8:	mov	r3, #0
   157cc:	str	r3, [r5, #12]
   157d0:	str	r3, [r5, #16]
   157d4:	ldrd	r4, [sp]
   157d8:	ldrd	r6, [sp, #8]
   157dc:	ldr	r8, [sp, #16]
   157e0:	add	sp, sp, #20
   157e4:	pop	{pc}		; (ldr pc, [sp], #4)
   157e8:	strd	r4, [sp, #-16]!
   157ec:	str	r6, [sp, #8]
   157f0:	str	lr, [sp, #12]
   157f4:	mov	r6, r0
   157f8:	ldr	r3, [r0, #32]
   157fc:	cmp	r3, #0
   15800:	beq	15860 <__assert_fail@plt+0x46b4>
   15804:	ldr	r3, [r0, #16]
   15808:	cmp	r3, #0
   1580c:	beq	15860 <__assert_fail@plt+0x46b4>
   15810:	ldr	r5, [r0]
   15814:	ldr	r3, [r0, #4]
   15818:	cmp	r5, r3
   1581c:	bcc	15834 <__assert_fail@plt+0x4688>
   15820:	b	15870 <__assert_fail@plt+0x46c4>
   15824:	add	r5, r5, #8
   15828:	ldr	r3, [r6, #4]
   1582c:	cmp	r3, r5
   15830:	bls	15860 <__assert_fail@plt+0x46b4>
   15834:	ldr	r3, [r5]
   15838:	cmp	r3, #0
   1583c:	beq	15824 <__assert_fail@plt+0x4678>
   15840:	mov	r4, r5
   15844:	ldr	r3, [r6, #32]
   15848:	ldr	r0, [r4]
   1584c:	blx	r3
   15850:	ldr	r4, [r4, #4]
   15854:	cmp	r4, #0
   15858:	bne	15844 <__assert_fail@plt+0x4698>
   1585c:	b	15824 <__assert_fail@plt+0x4678>
   15860:	ldr	r5, [r6]
   15864:	ldr	r3, [r6, #4]
   15868:	cmp	r5, r3
   1586c:	bcc	158c0 <__assert_fail@plt+0x4714>
   15870:	ldr	r0, [r6, #36]	; 0x24
   15874:	cmp	r0, #0
   15878:	beq	15890 <__assert_fail@plt+0x46e4>
   1587c:	ldr	r4, [r0, #4]
   15880:	bl	199b8 <__assert_fail@plt+0x880c>
   15884:	mov	r0, r4
   15888:	cmp	r4, #0
   1588c:	bne	1587c <__assert_fail@plt+0x46d0>
   15890:	ldr	r0, [r6]
   15894:	bl	199b8 <__assert_fail@plt+0x880c>
   15898:	mov	r0, r6
   1589c:	bl	199b8 <__assert_fail@plt+0x880c>
   158a0:	ldrd	r4, [sp]
   158a4:	ldr	r6, [sp, #8]
   158a8:	add	sp, sp, #12
   158ac:	pop	{pc}		; (ldr pc, [sp], #4)
   158b0:	add	r5, r5, #8
   158b4:	ldr	r3, [r6, #4]
   158b8:	cmp	r3, r5
   158bc:	bls	15870 <__assert_fail@plt+0x46c4>
   158c0:	ldr	r0, [r5, #4]
   158c4:	cmp	r0, #0
   158c8:	beq	158b0 <__assert_fail@plt+0x4704>
   158cc:	ldr	r4, [r0, #4]
   158d0:	bl	199b8 <__assert_fail@plt+0x880c>
   158d4:	mov	r0, r4
   158d8:	cmp	r4, #0
   158dc:	bne	158cc <__assert_fail@plt+0x4720>
   158e0:	b	158b0 <__assert_fail@plt+0x4704>
   158e4:	strd	r4, [sp, #-12]!
   158e8:	str	lr, [sp, #8]
   158ec:	sub	sp, sp, #44	; 0x2c
   158f0:	mov	r4, r0
   158f4:	mov	r0, r1
   158f8:	ldr	r1, [r4, #20]
   158fc:	bl	14d24 <__assert_fail@plt+0x3b78>
   15900:	subs	r5, r0, #0
   15904:	beq	159fc <__assert_fail@plt+0x4850>
   15908:	ldr	r3, [r4, #8]
   1590c:	cmp	r3, r5
   15910:	beq	15a14 <__assert_fail@plt+0x4868>
   15914:	mov	r1, #8
   15918:	mov	r0, r5
   1591c:	bl	19340 <__assert_fail@plt+0x8194>
   15920:	str	r0, [sp]
   15924:	cmp	r0, #0
   15928:	beq	15a1c <__assert_fail@plt+0x4870>
   1592c:	str	r5, [sp, #8]
   15930:	add	r0, r0, r5, lsl #3
   15934:	str	r0, [sp, #4]
   15938:	mov	r2, #0
   1593c:	str	r2, [sp, #12]
   15940:	str	r2, [sp, #16]
   15944:	ldr	r3, [r4, #20]
   15948:	str	r3, [sp, #20]
   1594c:	ldr	r3, [r4, #24]
   15950:	str	r3, [sp, #24]
   15954:	ldr	r3, [r4, #28]
   15958:	str	r3, [sp, #28]
   1595c:	ldr	r3, [r4, #32]
   15960:	str	r3, [sp, #32]
   15964:	ldr	r3, [r4, #36]	; 0x24
   15968:	str	r3, [sp, #36]	; 0x24
   1596c:	mov	r1, r4
   15970:	mov	r0, sp
   15974:	bl	14e6c <__assert_fail@plt+0x3cc0>
   15978:	subs	r5, r0, #0
   1597c:	bne	159c4 <__assert_fail@plt+0x4818>
   15980:	ldr	r3, [sp, #36]	; 0x24
   15984:	str	r3, [r4, #36]	; 0x24
   15988:	mov	r2, #1
   1598c:	mov	r1, sp
   15990:	mov	r0, r4
   15994:	bl	14e6c <__assert_fail@plt+0x3cc0>
   15998:	cmp	r0, #0
   1599c:	beq	159f8 <__assert_fail@plt+0x484c>
   159a0:	mov	r2, #0
   159a4:	mov	r1, sp
   159a8:	mov	r0, r4
   159ac:	bl	14e6c <__assert_fail@plt+0x3cc0>
   159b0:	cmp	r0, #0
   159b4:	beq	159f8 <__assert_fail@plt+0x484c>
   159b8:	ldr	r0, [sp]
   159bc:	bl	199b8 <__assert_fail@plt+0x880c>
   159c0:	b	15a00 <__assert_fail@plt+0x4854>
   159c4:	ldr	r0, [r4]
   159c8:	bl	199b8 <__assert_fail@plt+0x880c>
   159cc:	ldr	r3, [sp]
   159d0:	str	r3, [r4]
   159d4:	ldr	r3, [sp, #4]
   159d8:	str	r3, [r4, #4]
   159dc:	ldr	r3, [sp, #8]
   159e0:	str	r3, [r4, #8]
   159e4:	ldr	r3, [sp, #12]
   159e8:	str	r3, [r4, #12]
   159ec:	ldr	r3, [sp, #36]	; 0x24
   159f0:	str	r3, [r4, #36]	; 0x24
   159f4:	b	15a00 <__assert_fail@plt+0x4854>
   159f8:	bl	1117c <abort@plt>
   159fc:	mov	r5, #0
   15a00:	mov	r0, r5
   15a04:	add	sp, sp, #44	; 0x2c
   15a08:	ldrd	r4, [sp]
   15a0c:	add	sp, sp, #8
   15a10:	pop	{pc}		; (ldr pc, [sp], #4)
   15a14:	mov	r5, #1
   15a18:	b	15a00 <__assert_fail@plt+0x4854>
   15a1c:	mov	r5, #0
   15a20:	b	15a00 <__assert_fail@plt+0x4854>
   15a24:	strd	r4, [sp, #-16]!
   15a28:	str	r6, [sp, #8]
   15a2c:	str	lr, [sp, #12]
   15a30:	sub	sp, sp, #8
   15a34:	subs	r5, r1, #0
   15a38:	beq	15a84 <__assert_fail@plt+0x48d8>
   15a3c:	mov	r4, r0
   15a40:	mov	r6, r2
   15a44:	mov	r3, #0
   15a48:	add	r2, sp, #4
   15a4c:	mov	r1, r5
   15a50:	bl	14ff0 <__assert_fail@plt+0x3e44>
   15a54:	cmp	r0, #0
   15a58:	beq	15a88 <__assert_fail@plt+0x48dc>
   15a5c:	cmp	r6, #0
   15a60:	moveq	r0, #0
   15a64:	beq	15a70 <__assert_fail@plt+0x48c4>
   15a68:	str	r0, [r6]
   15a6c:	mov	r0, #0
   15a70:	add	sp, sp, #8
   15a74:	ldrd	r4, [sp]
   15a78:	ldr	r6, [sp, #8]
   15a7c:	add	sp, sp, #12
   15a80:	pop	{pc}		; (ldr pc, [sp], #4)
   15a84:	bl	1117c <abort@plt>
   15a88:	vldr	s15, [r4, #12]
   15a8c:	vcvt.f32.u32	s14, s15
   15a90:	ldr	r3, [r4, #20]
   15a94:	vldr	s15, [r4, #8]
   15a98:	vcvt.f32.u32	s15, s15
   15a9c:	vldr	s13, [r3, #8]
   15aa0:	vmul.f32	s15, s15, s13
   15aa4:	vcmpe.f32	s14, s15
   15aa8:	vmrs	APSR_nzcv, fpscr
   15aac:	bgt	15afc <__assert_fail@plt+0x4950>
   15ab0:	ldr	r3, [sp, #4]
   15ab4:	ldr	r2, [r3]
   15ab8:	cmp	r2, #0
   15abc:	beq	15ba8 <__assert_fail@plt+0x49fc>
   15ac0:	ldr	r0, [r4, #36]	; 0x24
   15ac4:	cmp	r0, #0
   15ac8:	beq	15b90 <__assert_fail@plt+0x49e4>
   15acc:	ldr	r3, [r0, #4]
   15ad0:	str	r3, [r4, #36]	; 0x24
   15ad4:	str	r5, [r0]
   15ad8:	ldr	r3, [sp, #4]
   15adc:	ldr	r2, [r3, #4]
   15ae0:	str	r2, [r0, #4]
   15ae4:	str	r0, [r3, #4]
   15ae8:	ldr	r3, [r4, #16]
   15aec:	add	r3, r3, #1
   15af0:	str	r3, [r4, #16]
   15af4:	mov	r0, #1
   15af8:	b	15a70 <__assert_fail@plt+0x48c4>
   15afc:	mov	r0, r4
   15b00:	bl	14c60 <__assert_fail@plt+0x3ab4>
   15b04:	ldr	r3, [r4, #20]
   15b08:	vldr	s13, [r3, #8]
   15b0c:	vldr	s15, [r4, #8]
   15b10:	vcvt.f32.u32	s15, s15
   15b14:	vldr	s14, [r4, #12]
   15b18:	vcvt.f32.u32	s14, s14
   15b1c:	vmul.f32	s12, s13, s15
   15b20:	vcmpe.f32	s14, s12
   15b24:	vmrs	APSR_nzcv, fpscr
   15b28:	ble	15ab0 <__assert_fail@plt+0x4904>
   15b2c:	ldrb	r2, [r3, #16]
   15b30:	cmp	r2, #0
   15b34:	vldr	s14, [r3, #12]
   15b38:	vmul.f32	s15, s15, s14
   15b3c:	vmuleq.f32	s15, s15, s13
   15b40:	vldr	s14, [pc, #132]	; 15bcc <__assert_fail@plt+0x4a20>
   15b44:	vcmpe.f32	s15, s14
   15b48:	vmrs	APSR_nzcv, fpscr
   15b4c:	mvnge	r0, #0
   15b50:	bge	15a70 <__assert_fail@plt+0x48c4>
   15b54:	vcvt.u32.f32	s15, s15
   15b58:	vmov	r1, s15
   15b5c:	mov	r0, r4
   15b60:	bl	158e4 <__assert_fail@plt+0x4738>
   15b64:	cmp	r0, #0
   15b68:	mvneq	r0, #0
   15b6c:	beq	15a70 <__assert_fail@plt+0x48c4>
   15b70:	mov	r3, #0
   15b74:	add	r2, sp, #4
   15b78:	mov	r1, r5
   15b7c:	mov	r0, r4
   15b80:	bl	14ff0 <__assert_fail@plt+0x3e44>
   15b84:	cmp	r0, #0
   15b88:	beq	15ab0 <__assert_fail@plt+0x4904>
   15b8c:	bl	1117c <abort@plt>
   15b90:	mov	r0, #8
   15b94:	bl	193b4 <__assert_fail@plt+0x8208>
   15b98:	cmp	r0, #0
   15b9c:	mvneq	r0, #0
   15ba0:	beq	15a70 <__assert_fail@plt+0x48c4>
   15ba4:	b	15ad4 <__assert_fail@plt+0x4928>
   15ba8:	str	r5, [r3]
   15bac:	ldr	r3, [r4, #16]
   15bb0:	add	r3, r3, #1
   15bb4:	str	r3, [r4, #16]
   15bb8:	ldr	r3, [r4, #12]
   15bbc:	add	r3, r3, #1
   15bc0:	str	r3, [r4, #12]
   15bc4:	mov	r0, #1
   15bc8:	b	15a70 <__assert_fail@plt+0x48c4>
   15bcc:	svcmi	0x00800000
   15bd0:	str	r4, [sp, #-8]!
   15bd4:	str	lr, [sp, #4]
   15bd8:	sub	sp, sp, #8
   15bdc:	mov	r4, r1
   15be0:	add	r2, sp, #4
   15be4:	bl	15a24 <__assert_fail@plt+0x4878>
   15be8:	cmn	r0, #1
   15bec:	moveq	r0, #0
   15bf0:	beq	15c00 <__assert_fail@plt+0x4a54>
   15bf4:	cmp	r0, #0
   15bf8:	ldreq	r0, [sp, #4]
   15bfc:	movne	r0, r4
   15c00:	add	sp, sp, #8
   15c04:	ldr	r4, [sp]
   15c08:	add	sp, sp, #4
   15c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c10:	strd	r4, [sp, #-16]!
   15c14:	str	r6, [sp, #8]
   15c18:	str	lr, [sp, #12]
   15c1c:	sub	sp, sp, #8
   15c20:	mov	r4, r0
   15c24:	mov	r3, #1
   15c28:	add	r2, sp, #4
   15c2c:	bl	14ff0 <__assert_fail@plt+0x3e44>
   15c30:	subs	r5, r0, #0
   15c34:	beq	15c54 <__assert_fail@plt+0x4aa8>
   15c38:	ldr	r3, [r4, #16]
   15c3c:	sub	r3, r3, #1
   15c40:	str	r3, [r4, #16]
   15c44:	ldr	r3, [sp, #4]
   15c48:	ldr	r3, [r3]
   15c4c:	cmp	r3, #0
   15c50:	beq	15c6c <__assert_fail@plt+0x4ac0>
   15c54:	mov	r0, r5
   15c58:	add	sp, sp, #8
   15c5c:	ldrd	r4, [sp]
   15c60:	ldr	r6, [sp, #8]
   15c64:	add	sp, sp, #12
   15c68:	pop	{pc}		; (ldr pc, [sp], #4)
   15c6c:	ldr	r3, [r4, #12]
   15c70:	sub	r3, r3, #1
   15c74:	str	r3, [r4, #12]
   15c78:	vmov	s15, r3
   15c7c:	vcvt.f32.u32	s15, s15
   15c80:	ldr	r3, [r4, #20]
   15c84:	vldr	s14, [r4, #8]
   15c88:	vcvt.f32.u32	s14, s14
   15c8c:	vldr	s13, [r3]
   15c90:	vmul.f32	s14, s14, s13
   15c94:	vcmpe.f32	s15, s14
   15c98:	vmrs	APSR_nzcv, fpscr
   15c9c:	bpl	15c54 <__assert_fail@plt+0x4aa8>
   15ca0:	mov	r0, r4
   15ca4:	bl	14c60 <__assert_fail@plt+0x3ab4>
   15ca8:	ldr	r3, [r4, #20]
   15cac:	vldr	s15, [r4, #8]
   15cb0:	vcvt.f32.u32	s15, s15
   15cb4:	vldr	s14, [r4, #12]
   15cb8:	vcvt.f32.u32	s13, s14
   15cbc:	vldr	s14, [r3]
   15cc0:	vmul.f32	s14, s15, s14
   15cc4:	vcmpe.f32	s13, s14
   15cc8:	vmrs	APSR_nzcv, fpscr
   15ccc:	bpl	15c54 <__assert_fail@plt+0x4aa8>
   15cd0:	ldrb	r2, [r3, #16]
   15cd4:	cmp	r2, #0
   15cd8:	vldr	s14, [r3, #4]
   15cdc:	vmuleq.f32	s15, s15, s14
   15ce0:	vldreq	s14, [r3, #8]
   15ce4:	vmul.f32	s15, s15, s14
   15ce8:	vcvt.u32.f32	s15, s15
   15cec:	vmov	r1, s15
   15cf0:	mov	r0, r4
   15cf4:	bl	158e4 <__assert_fail@plt+0x4738>
   15cf8:	cmp	r0, #0
   15cfc:	bne	15c54 <__assert_fail@plt+0x4aa8>
   15d00:	ldr	r0, [r4, #36]	; 0x24
   15d04:	cmp	r0, #0
   15d08:	beq	15d20 <__assert_fail@plt+0x4b74>
   15d0c:	ldr	r6, [r0, #4]
   15d10:	bl	199b8 <__assert_fail@plt+0x880c>
   15d14:	mov	r0, r6
   15d18:	cmp	r6, #0
   15d1c:	bne	15d0c <__assert_fail@plt+0x4b60>
   15d20:	mov	r3, #0
   15d24:	str	r3, [r4, #36]	; 0x24
   15d28:	b	15c54 <__assert_fail@plt+0x4aa8>
   15d2c:	str	r4, [sp, #-8]!
   15d30:	str	lr, [sp, #4]
   15d34:	bl	15c10 <__assert_fail@plt+0x4a64>
   15d38:	ldr	r4, [sp]
   15d3c:	add	sp, sp, #4
   15d40:	pop	{pc}		; (ldr pc, [sp], #4)
   15d44:	mov	r3, #1
   15d48:	strb	r3, [r0, #28]
   15d4c:	mov	r3, #0
   15d50:	str	r3, [r0, #20]
   15d54:	str	r3, [r0, #24]
   15d58:	str	r1, [r0]
   15d5c:	str	r1, [r0, #4]
   15d60:	str	r1, [r0, #8]
   15d64:	str	r1, [r0, #12]
   15d68:	str	r1, [r0, #16]
   15d6c:	bx	lr
   15d70:	ldrb	r0, [r0, #28]
   15d74:	bx	lr
   15d78:	mov	r2, r0
   15d7c:	ldrb	ip, [r0, #28]
   15d80:	eor	ip, ip, #1
   15d84:	ldr	r3, [r0, #20]
   15d88:	add	r3, ip, r3
   15d8c:	and	r3, r3, #3
   15d90:	ldr	r0, [r0, r3, lsl #2]
   15d94:	str	r1, [r2, r3, lsl #2]
   15d98:	str	r3, [r2, #20]
   15d9c:	ldr	r1, [r2, #24]
   15da0:	cmp	r1, r3
   15da4:	beq	15db4 <__assert_fail@plt+0x4c08>
   15da8:	mov	r3, #0
   15dac:	strb	r3, [r2, #28]
   15db0:	bx	lr
   15db4:	add	ip, ip, r1
   15db8:	and	ip, ip, #3
   15dbc:	str	ip, [r2, #24]
   15dc0:	b	15da8 <__assert_fail@plt+0x4bfc>
   15dc4:	ldrb	r3, [r0, #28]
   15dc8:	cmp	r3, #0
   15dcc:	bne	15e08 <__assert_fail@plt+0x4c5c>
   15dd0:	ldr	r3, [r0, #20]
   15dd4:	ldr	r2, [r0, r3, lsl #2]
   15dd8:	ldr	r1, [r0, #16]
   15ddc:	str	r1, [r0, r3, lsl #2]
   15de0:	ldr	r1, [r0, #24]
   15de4:	cmp	r3, r1
   15de8:	moveq	r3, #1
   15dec:	strbeq	r3, [r0, #28]
   15df0:	beq	15e00 <__assert_fail@plt+0x4c54>
   15df4:	add	r3, r3, #3
   15df8:	and	r3, r3, #3
   15dfc:	str	r3, [r0, #20]
   15e00:	mov	r0, r2
   15e04:	bx	lr
   15e08:	str	r4, [sp, #-8]!
   15e0c:	str	lr, [sp, #4]
   15e10:	bl	1117c <abort@plt>
   15e14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e18:	strd	r6, [sp, #8]
   15e1c:	strd	r8, [sp, #16]
   15e20:	strd	sl, [sp, #24]
   15e24:	str	lr, [sp, #32]
   15e28:	sub	sp, sp, #4
   15e2c:	mov	r4, r0
   15e30:	ldrb	r3, [r0]
   15e34:	sub	r2, r3, #48	; 0x30
   15e38:	uxtb	r2, r2
   15e3c:	cmp	r2, #7
   15e40:	bls	15ecc <__assert_fail@plt+0x4d20>
   15e44:	cmp	r3, #0
   15e48:	moveq	r0, #1
   15e4c:	beq	15e7c <__assert_fail@plt+0x4cd0>
   15e50:	mov	r1, r4
   15e54:	mov	r0, #1
   15e58:	and	r2, r3, #239	; 0xef
   15e5c:	cmp	r3, #43	; 0x2b
   15e60:	cmpne	r2, #45	; 0x2d
   15e64:	moveq	r3, #1
   15e68:	movne	r3, #0
   15e6c:	add	r0, r0, r3
   15e70:	ldrb	r3, [r1, #1]!
   15e74:	cmp	r3, #0
   15e78:	bne	15e58 <__assert_fail@plt+0x4cac>
   15e7c:	mov	r1, #16
   15e80:	bl	18f58 <__assert_fail@plt+0x7dac>
   15e84:	mov	ip, #0
   15e88:	movw	fp, #519	; 0x207
   15e8c:	movw	r7, #1080	; 0x438
   15e90:	mov	r9, #3
   15e94:	mov	r6, #0
   15e98:	mov	r2, r4
   15e9c:	ldrb	r3, [r4], #1
   15ea0:	cmp	r3, #97	; 0x61
   15ea4:	beq	15fa4 <__assert_fail@plt+0x4df8>
   15ea8:	bls	15f58 <__assert_fail@plt+0x4dac>
   15eac:	cmp	r3, #111	; 0x6f
   15eb0:	beq	15f9c <__assert_fail@plt+0x4df0>
   15eb4:	cmp	r3, #117	; 0x75
   15eb8:	beq	15f94 <__assert_fail@plt+0x4de8>
   15ebc:	cmp	r3, #103	; 0x67
   15ec0:	bne	15f70 <__assert_fail@plt+0x4dc4>
   15ec4:	orr	r6, r6, r7
   15ec8:	b	15e98 <__assert_fail@plt+0x4cec>
   15ecc:	mov	r2, r0
   15ed0:	mov	r5, #0
   15ed4:	lsl	r5, r5, #3
   15ed8:	sub	r5, r5, #48	; 0x30
   15edc:	ldrb	r3, [r2], #1
   15ee0:	add	r5, r3, r5
   15ee4:	cmp	r5, #4096	; 0x1000
   15ee8:	bcs	161dc <__assert_fail@plt+0x5030>
   15eec:	ldrb	r1, [r2]
   15ef0:	sub	r3, r1, #48	; 0x30
   15ef4:	uxtb	r3, r3
   15ef8:	cmp	r3, #7
   15efc:	bls	15ed4 <__assert_fail@plt+0x4d28>
   15f00:	cmp	r1, #0
   15f04:	movne	r0, #0
   15f08:	bne	15f78 <__assert_fail@plt+0x4dcc>
   15f0c:	sub	r2, r2, r4
   15f10:	cmp	r2, #4
   15f14:	andle	r4, r5, #3072	; 0xc00
   15f18:	mvnle	r4, r4, lsr #10
   15f1c:	mvnle	r4, r4, lsl #10
   15f20:	movwgt	r4, #4095	; 0xfff
   15f24:	mov	r0, #32
   15f28:	bl	18dd8 <__assert_fail@plt+0x7c2c>
   15f2c:	mov	r3, #61	; 0x3d
   15f30:	strb	r3, [r0]
   15f34:	mov	r3, #1
   15f38:	strb	r3, [r0, #1]
   15f3c:	movw	r3, #4095	; 0xfff
   15f40:	str	r3, [r0, #4]
   15f44:	str	r5, [r0, #8]
   15f48:	str	r4, [r0, #12]
   15f4c:	mov	r3, #0
   15f50:	strb	r3, [r0, #17]
   15f54:	b	15f78 <__assert_fail@plt+0x4dcc>
   15f58:	cmp	r3, #45	; 0x2d
   15f5c:	beq	15fac <__assert_fail@plt+0x4e00>
   15f60:	cmp	r3, #61	; 0x3d
   15f64:	beq	15fac <__assert_fail@plt+0x4e00>
   15f68:	cmp	r3, #43	; 0x2b
   15f6c:	beq	15fac <__assert_fail@plt+0x4e00>
   15f70:	bl	199b8 <__assert_fail@plt+0x880c>
   15f74:	mov	r0, #0
   15f78:	add	sp, sp, #4
   15f7c:	ldrd	r4, [sp]
   15f80:	ldrd	r6, [sp, #8]
   15f84:	ldrd	r8, [sp, #16]
   15f88:	ldrd	sl, [sp, #24]
   15f8c:	add	sp, sp, #32
   15f90:	pop	{pc}		; (ldr pc, [sp], #4)
   15f94:	orr	r6, r6, #2496	; 0x9c0
   15f98:	b	15e98 <__assert_fail@plt+0x4cec>
   15f9c:	orr	r6, r6, fp
   15fa0:	b	15e98 <__assert_fail@plt+0x4cec>
   15fa4:	movw	r6, #4095	; 0xfff
   15fa8:	b	15e98 <__assert_fail@plt+0x4cec>
   15fac:	add	r5, ip, #1
   15fb0:	add	ip, r0, ip, lsl #4
   15fb4:	mov	sl, #1
   15fb8:	b	1616c <__assert_fail@plt+0x4fc0>
   15fbc:	sub	r3, r3, #48	; 0x30
   15fc0:	uxtb	r3, r3
   15fc4:	cmp	r3, #7
   15fc8:	movls	r3, #0
   15fcc:	bhi	16038 <__assert_fail@plt+0x4e8c>
   15fd0:	lsl	r3, r3, #3
   15fd4:	sub	r3, r3, #48	; 0x30
   15fd8:	ldrb	r2, [r1], #1
   15fdc:	add	r3, r2, r3
   15fe0:	cmp	r3, #4096	; 0x1000
   15fe4:	bcs	15f70 <__assert_fail@plt+0x4dc4>
   15fe8:	ldrb	r4, [r1]
   15fec:	sub	r2, r4, #48	; 0x30
   15ff0:	uxtb	r2, r2
   15ff4:	cmp	r2, #7
   15ff8:	bls	15fd0 <__assert_fail@plt+0x4e24>
   15ffc:	cmp	r6, #0
   16000:	bne	15f70 <__assert_fail@plt+0x4dc4>
   16004:	cmp	r4, #0
   16008:	cmpne	r4, #44	; 0x2c
   1600c:	bne	15f70 <__assert_fail@plt+0x4dc4>
   16010:	mov	r8, ip
   16014:	strb	lr, [ip]
   16018:	strb	sl, [ip, #1]
   1601c:	movw	r2, #4095	; 0xfff
   16020:	str	r2, [ip, #4]
   16024:	str	r3, [ip, #8]
   16028:	mov	r2, r1
   1602c:	movw	r6, #4095	; 0xfff
   16030:	mov	r4, r6
   16034:	b	16148 <__assert_fail@plt+0x4f9c>
   16038:	mov	r8, r1
   1603c:	mov	r1, sl
   16040:	mov	r4, #0
   16044:	b	1608c <__assert_fail@plt+0x4ee0>
   16048:	add	r2, r2, #2
   1604c:	mov	r4, #56	; 0x38
   16050:	b	1619c <__assert_fail@plt+0x4ff0>
   16054:	add	r2, r2, #2
   16058:	mov	r4, #7
   1605c:	b	1619c <__assert_fail@plt+0x4ff0>
   16060:	orr	r4, r4, #292	; 0x124
   16064:	b	1608c <__assert_fail@plt+0x4ee0>
   16068:	orr	r4, r4, #146	; 0x92
   1606c:	b	1608c <__assert_fail@plt+0x4ee0>
   16070:	orr	r4, r4, #73	; 0x49
   16074:	b	1608c <__assert_fail@plt+0x4ee0>
   16078:	orr	r4, r4, #3072	; 0xc00
   1607c:	b	1608c <__assert_fail@plt+0x4ee0>
   16080:	orr	r4, r4, #512	; 0x200
   16084:	b	1608c <__assert_fail@plt+0x4ee0>
   16088:	mov	r1, #2
   1608c:	mov	r2, r8
   16090:	add	r8, r8, #1
   16094:	ldrb	r3, [r2]
   16098:	sub	r3, r3, #88	; 0x58
   1609c:	cmp	r3, #32
   160a0:	ldrls	pc, [pc, r3, lsl #2]
   160a4:	b	1612c <__assert_fail@plt+0x4f80>
   160a8:	andeq	r6, r1, r8, lsl #1
   160ac:	andeq	r6, r1, ip, lsr #2
   160b0:	andeq	r6, r1, ip, lsr #2
   160b4:	andeq	r6, r1, ip, lsr #2
   160b8:	andeq	r6, r1, ip, lsr #2
   160bc:	andeq	r6, r1, ip, lsr #2
   160c0:	andeq	r6, r1, ip, lsr #2
   160c4:	andeq	r6, r1, ip, lsr #2
   160c8:	andeq	r6, r1, ip, lsr #2
   160cc:	andeq	r6, r1, ip, lsr #2
   160d0:	andeq	r6, r1, ip, lsr #2
   160d4:	andeq	r6, r1, ip, lsr #2
   160d8:	andeq	r6, r1, ip, lsr #2
   160dc:	andeq	r6, r1, ip, lsr #2
   160e0:	andeq	r6, r1, ip, lsr #2
   160e4:	andeq	r6, r1, ip, lsr #2
   160e8:	andeq	r6, r1, ip, lsr #2
   160ec:	andeq	r6, r1, ip, lsr #2
   160f0:	andeq	r6, r1, ip, lsr #2
   160f4:	andeq	r6, r1, ip, lsr #2
   160f8:	andeq	r6, r1, ip, lsr #2
   160fc:	andeq	r6, r1, ip, lsr #2
   16100:	andeq	r6, r1, ip, lsr #2
   16104:	andeq	r6, r1, ip, lsr #2
   16108:	andeq	r6, r1, ip, lsr #2
   1610c:	andeq	r6, r1, ip, lsr #2
   16110:	andeq	r6, r1, r0, rrx
   16114:	andeq	r6, r1, r8, ror r0
   16118:	andeq	r6, r1, r0, lsl #1
   1611c:	andeq	r6, r1, ip, lsr #2
   16120:	andeq	r6, r1, ip, lsr #2
   16124:	andeq	r6, r1, r8, rrx
   16128:	andeq	r6, r1, r0, ror r0
   1612c:	mov	r8, ip
   16130:	strb	lr, [ip]
   16134:	strb	r1, [ip, #1]
   16138:	str	r6, [ip, #4]
   1613c:	str	r4, [ip, #8]
   16140:	cmp	r6, #0
   16144:	andne	r4, r4, r6
   16148:	str	r4, [r8, #12]
   1614c:	ldrb	r3, [r2]
   16150:	add	lr, r5, #1
   16154:	add	ip, ip, #16
   16158:	and	r1, r3, #239	; 0xef
   1615c:	cmp	r3, #43	; 0x2b
   16160:	cmpne	r1, #45	; 0x2d
   16164:	bne	161b4 <__assert_fail@plt+0x5008>
   16168:	mov	r5, lr
   1616c:	mov	r1, r2
   16170:	ldrb	lr, [r1], #1
   16174:	ldrb	r3, [r2, #1]
   16178:	cmp	r3, #103	; 0x67
   1617c:	beq	16048 <__assert_fail@plt+0x4e9c>
   16180:	bls	15fbc <__assert_fail@plt+0x4e10>
   16184:	cmp	r3, #111	; 0x6f
   16188:	beq	16054 <__assert_fail@plt+0x4ea8>
   1618c:	cmp	r3, #117	; 0x75
   16190:	addeq	r2, r2, #2
   16194:	moveq	r4, #448	; 0x1c0
   16198:	bne	16038 <__assert_fail@plt+0x4e8c>
   1619c:	mov	r8, ip
   161a0:	strb	lr, [ip]
   161a4:	strb	r9, [ip, #1]
   161a8:	str	r6, [ip, #4]
   161ac:	str	r4, [ip, #8]
   161b0:	b	16140 <__assert_fail@plt+0x4f94>
   161b4:	cmp	r3, #44	; 0x2c
   161b8:	bne	161c8 <__assert_fail@plt+0x501c>
   161bc:	add	r4, r2, #1
   161c0:	mov	ip, r5
   161c4:	b	15e94 <__assert_fail@plt+0x4ce8>
   161c8:	cmp	r3, #0
   161cc:	addeq	r5, r0, r5, lsl #4
   161d0:	strbeq	r3, [r5, #1]
   161d4:	beq	15f78 <__assert_fail@plt+0x4dcc>
   161d8:	b	15f70 <__assert_fail@plt+0x4dc4>
   161dc:	mov	r0, #0
   161e0:	b	15f78 <__assert_fail@plt+0x4dcc>
   161e4:	str	r4, [sp, #-8]!
   161e8:	str	lr, [sp, #4]
   161ec:	sub	sp, sp, #104	; 0x68
   161f0:	mov	r2, sp
   161f4:	mov	r1, r0
   161f8:	mov	r0, #3
   161fc:	bl	11164 <__xstat64@plt>
   16200:	cmp	r0, #0
   16204:	movne	r0, #0
   16208:	bne	16240 <__assert_fail@plt+0x5094>
   1620c:	ldr	r4, [sp, #16]
   16210:	mov	r0, #32
   16214:	bl	18dd8 <__assert_fail@plt+0x7c2c>
   16218:	mov	r3, #61	; 0x3d
   1621c:	strb	r3, [r0]
   16220:	mov	r3, #1
   16224:	strb	r3, [r0, #1]
   16228:	movw	r3, #4095	; 0xfff
   1622c:	str	r3, [r0, #4]
   16230:	str	r4, [r0, #8]
   16234:	str	r3, [r0, #12]
   16238:	mov	r3, #0
   1623c:	strb	r3, [r0, #17]
   16240:	add	sp, sp, #104	; 0x68
   16244:	ldr	r4, [sp]
   16248:	add	sp, sp, #4
   1624c:	pop	{pc}		; (ldr pc, [sp], #4)
   16250:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16254:	strd	r6, [sp, #8]
   16258:	strd	r8, [sp, #16]
   1625c:	str	sl, [sp, #24]
   16260:	str	lr, [sp, #28]
   16264:	ldr	r6, [sp, #32]
   16268:	ubfx	r0, r0, #0, #12
   1626c:	ldrb	r9, [r3, #1]
   16270:	cmp	r9, #0
   16274:	beq	16384 <__assert_fail@plt+0x51d8>
   16278:	cmp	r1, #0
   1627c:	movne	r7, #3072	; 0xc00
   16280:	moveq	r7, #0
   16284:	add	r3, r3, #16
   16288:	mov	r5, #0
   1628c:	mvn	r2, r2
   16290:	b	162e0 <__assert_fail@plt+0x5134>
   16294:	and	r9, r0, #73	; 0x49
   16298:	orrs	r9, r9, r1
   1629c:	orrne	ip, ip, #73	; 0x49
   162a0:	cmp	lr, #0
   162a4:	movne	r9, lr
   162a8:	moveq	r9, r2
   162ac:	bic	ip, ip, r4
   162b0:	and	ip, ip, r9
   162b4:	ldrb	r8, [r8, #-16]
   162b8:	cmp	r8, #45	; 0x2d
   162bc:	beq	16378 <__assert_fail@plt+0x51cc>
   162c0:	cmp	r8, #61	; 0x3d
   162c4:	beq	16348 <__assert_fail@plt+0x519c>
   162c8:	cmp	r8, #43	; 0x2b
   162cc:	beq	1636c <__assert_fail@plt+0x51c0>
   162d0:	add	r3, r3, #16
   162d4:	ldrb	r9, [r3, #-15]
   162d8:	cmp	r9, #0
   162dc:	beq	16388 <__assert_fail@plt+0x51dc>
   162e0:	mov	r8, r3
   162e4:	ldr	lr, [r3, #-12]
   162e8:	ldr	r4, [r3, #-4]
   162ec:	bic	r4, r7, r4
   162f0:	ldr	ip, [r3, #-8]
   162f4:	cmp	r9, #2
   162f8:	beq	16294 <__assert_fail@plt+0x50e8>
   162fc:	cmp	r9, #3
   16300:	bne	162a0 <__assert_fail@plt+0x50f4>
   16304:	and	ip, ip, r0
   16308:	and	r9, ip, #292	; 0x124
   1630c:	cmp	r9, #0
   16310:	movne	r9, #292	; 0x124
   16314:	moveq	r9, #0
   16318:	and	sl, ip, #146	; 0x92
   1631c:	cmp	sl, #0
   16320:	movne	sl, #146	; 0x92
   16324:	moveq	sl, #0
   16328:	orr	r9, r9, sl
   1632c:	and	sl, ip, #73	; 0x49
   16330:	cmp	sl, #0
   16334:	movne	sl, #73	; 0x49
   16338:	moveq	sl, #0
   1633c:	orr	r9, r9, sl
   16340:	orr	ip, r9, ip
   16344:	b	162a0 <__assert_fail@plt+0x50f4>
   16348:	cmp	lr, #0
   1634c:	mvnne	lr, lr
   16350:	orr	lr, lr, r4
   16354:	mvn	r4, lr
   16358:	ubfx	r4, r4, #0, #12
   1635c:	orr	r5, r5, r4
   16360:	and	lr, lr, r0
   16364:	orr	r0, lr, ip
   16368:	b	162d0 <__assert_fail@plt+0x5124>
   1636c:	orr	r5, r5, ip
   16370:	orr	r0, r0, ip
   16374:	b	162d0 <__assert_fail@plt+0x5124>
   16378:	orr	r5, r5, ip
   1637c:	bic	r0, r0, ip
   16380:	b	162d0 <__assert_fail@plt+0x5124>
   16384:	mov	r5, #0
   16388:	cmp	r6, #0
   1638c:	strne	r5, [r6]
   16390:	ldrd	r4, [sp]
   16394:	ldrd	r6, [sp, #8]
   16398:	ldrd	r8, [sp, #16]
   1639c:	ldr	sl, [sp, #24]
   163a0:	add	sp, sp, #28
   163a4:	pop	{pc}		; (ldr pc, [sp], #4)
   163a8:	push	{r2, r3}
   163ac:	push	{lr}		; (str lr, [sp, #-4]!)
   163b0:	sub	sp, sp, #12
   163b4:	ldr	r2, [sp, #16]
   163b8:	tst	r2, #64	; 0x40
   163bc:	addne	r3, sp, #24
   163c0:	strne	r3, [sp, #4]
   163c4:	ldrne	r3, [sp, #20]
   163c8:	moveq	r3, #0
   163cc:	bl	11050 <openat64@plt>
   163d0:	bl	187c8 <__assert_fail@plt+0x761c>
   163d4:	add	sp, sp, #12
   163d8:	pop	{lr}		; (ldr lr, [sp], #4)
   163dc:	add	sp, sp, #8
   163e0:	bx	lr
   163e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   163e8:	strd	r6, [sp, #8]
   163ec:	str	r8, [sp, #16]
   163f0:	str	lr, [sp, #20]
   163f4:	mov	r6, r3
   163f8:	orr	r2, r2, #540672	; 0x84000
   163fc:	orr	r2, r2, #2304	; 0x900
   16400:	bl	163a8 <__assert_fail@plt+0x51fc>
   16404:	subs	r4, r0, #0
   16408:	movlt	r5, #0
   1640c:	blt	16424 <__assert_fail@plt+0x5278>
   16410:	mov	r0, r4
   16414:	bl	11110 <fdopendir@plt>
   16418:	subs	r5, r0, #0
   1641c:	strne	r4, [r6]
   16420:	beq	1643c <__assert_fail@plt+0x5290>
   16424:	mov	r0, r5
   16428:	ldrd	r4, [sp]
   1642c:	ldrd	r6, [sp, #8]
   16430:	ldr	r8, [sp, #16]
   16434:	add	sp, sp, #20
   16438:	pop	{pc}		; (ldr pc, [sp], #4)
   1643c:	bl	11068 <__errno_location@plt>
   16440:	mov	r6, r0
   16444:	ldr	r7, [r0]
   16448:	mov	r0, r4
   1644c:	bl	11188 <close@plt>
   16450:	str	r7, [r6]
   16454:	b	16424 <__assert_fail@plt+0x5278>
   16458:	strd	r4, [sp, #-16]!
   1645c:	str	r6, [sp, #8]
   16460:	str	lr, [sp, #12]
   16464:	subs	r4, r0, #0
   16468:	beq	16504 <__assert_fail@plt+0x5358>
   1646c:	mov	r1, #47	; 0x2f
   16470:	mov	r0, r4
   16474:	bl	110ec <strrchr@plt>
   16478:	subs	r5, r0, #0
   1647c:	beq	164dc <__assert_fail@plt+0x5330>
   16480:	add	r6, r5, #1
   16484:	sub	r3, r6, r4
   16488:	cmp	r3, #6
   1648c:	ble	164dc <__assert_fail@plt+0x5330>
   16490:	mov	r2, #7
   16494:	movw	r1, #43644	; 0xaa7c
   16498:	movt	r1, #1
   1649c:	sub	r0, r5, #6
   164a0:	bl	11170 <strncmp@plt>
   164a4:	cmp	r0, #0
   164a8:	bne	164dc <__assert_fail@plt+0x5330>
   164ac:	mov	r2, #3
   164b0:	movw	r1, #43652	; 0xaa84
   164b4:	movt	r1, #1
   164b8:	mov	r0, r6
   164bc:	bl	11170 <strncmp@plt>
   164c0:	cmp	r0, #0
   164c4:	movne	r4, r6
   164c8:	bne	164dc <__assert_fail@plt+0x5330>
   164cc:	add	r4, r5, #4
   164d0:	movw	r3, #45416	; 0xb168
   164d4:	movt	r3, #2
   164d8:	str	r4, [r3]
   164dc:	movw	r3, #45492	; 0xb1b4
   164e0:	movt	r3, #2
   164e4:	str	r4, [r3]
   164e8:	movw	r3, #45420	; 0xb16c
   164ec:	movt	r3, #2
   164f0:	str	r4, [r3]
   164f4:	ldrd	r4, [sp]
   164f8:	ldr	r6, [sp, #8]
   164fc:	add	sp, sp, #12
   16500:	pop	{pc}		; (ldr pc, [sp], #4)
   16504:	movw	r3, #45432	; 0xb178
   16508:	movt	r3, #2
   1650c:	ldr	r3, [r3]
   16510:	mov	r2, #55	; 0x37
   16514:	mov	r1, #1
   16518:	movw	r0, #43588	; 0xaa44
   1651c:	movt	r0, #1
   16520:	bl	10f9c <fwrite@plt>
   16524:	bl	1117c <abort@plt>
   16528:	mov	r2, #0
   1652c:	mov	r3, #0
   16530:	strd	r2, [r0]
   16534:	strd	r2, [r0, #8]
   16538:	strd	r2, [r0, #16]
   1653c:	strd	r2, [r0, #24]
   16540:	strd	r2, [r0, #32]
   16544:	strd	r2, [r0, #40]	; 0x28
   16548:	cmp	r1, #10
   1654c:	beq	16558 <__assert_fail@plt+0x53ac>
   16550:	str	r1, [r0]
   16554:	bx	lr
   16558:	str	r4, [sp, #-8]!
   1655c:	str	lr, [sp, #4]
   16560:	bl	1117c <abort@plt>
   16564:	strd	r4, [sp, #-16]!
   16568:	str	r6, [sp, #8]
   1656c:	str	lr, [sp, #12]
   16570:	mov	r5, r0
   16574:	mov	r6, r1
   16578:	mov	r2, #5
   1657c:	mov	r1, r0
   16580:	mov	r0, #0
   16584:	bl	10f54 <dcgettext@plt>
   16588:	mov	r4, r0
   1658c:	cmp	r5, r0
   16590:	beq	165a8 <__assert_fail@plt+0x53fc>
   16594:	mov	r0, r4
   16598:	ldrd	r4, [sp]
   1659c:	ldr	r6, [sp, #8]
   165a0:	add	sp, sp, #12
   165a4:	pop	{pc}		; (ldr pc, [sp], #4)
   165a8:	bl	19ad8 <__assert_fail@plt+0x892c>
   165ac:	ldrb	r3, [r0]
   165b0:	bic	r3, r3, #32
   165b4:	cmp	r3, #85	; 0x55
   165b8:	bne	1663c <__assert_fail@plt+0x5490>
   165bc:	ldrb	r3, [r0, #1]
   165c0:	bic	r3, r3, #32
   165c4:	cmp	r3, #84	; 0x54
   165c8:	bne	16600 <__assert_fail@plt+0x5454>
   165cc:	ldrb	r3, [r0, #2]
   165d0:	bic	r3, r3, #32
   165d4:	cmp	r3, #70	; 0x46
   165d8:	bne	16600 <__assert_fail@plt+0x5454>
   165dc:	ldrb	r3, [r0, #3]
   165e0:	cmp	r3, #45	; 0x2d
   165e4:	bne	16600 <__assert_fail@plt+0x5454>
   165e8:	ldrb	r3, [r0, #4]
   165ec:	cmp	r3, #56	; 0x38
   165f0:	bne	16600 <__assert_fail@plt+0x5454>
   165f4:	ldrb	r3, [r0, #5]
   165f8:	cmp	r3, #0
   165fc:	beq	1661c <__assert_fail@plt+0x5470>
   16600:	movw	r4, #43740	; 0xaadc
   16604:	movt	r4, #1
   16608:	movw	r3, #43760	; 0xaaf0
   1660c:	movt	r3, #1
   16610:	cmp	r6, #9
   16614:	movne	r4, r3
   16618:	b	16594 <__assert_fail@plt+0x53e8>
   1661c:	ldrb	r2, [r4]
   16620:	movw	r4, #43756	; 0xaaec
   16624:	movt	r4, #1
   16628:	movw	r3, #43744	; 0xaae0
   1662c:	movt	r3, #1
   16630:	cmp	r2, #96	; 0x60
   16634:	movne	r4, r3
   16638:	b	16594 <__assert_fail@plt+0x53e8>
   1663c:	cmp	r3, #71	; 0x47
   16640:	bne	16600 <__assert_fail@plt+0x5454>
   16644:	ldrb	r3, [r0, #1]
   16648:	bic	r3, r3, #32
   1664c:	cmp	r3, #66	; 0x42
   16650:	bne	16600 <__assert_fail@plt+0x5454>
   16654:	ldrb	r3, [r0, #2]
   16658:	cmp	r3, #49	; 0x31
   1665c:	bne	16600 <__assert_fail@plt+0x5454>
   16660:	ldrb	r3, [r0, #3]
   16664:	cmp	r3, #56	; 0x38
   16668:	bne	16600 <__assert_fail@plt+0x5454>
   1666c:	ldrb	r3, [r0, #4]
   16670:	cmp	r3, #48	; 0x30
   16674:	bne	16600 <__assert_fail@plt+0x5454>
   16678:	ldrb	r3, [r0, #5]
   1667c:	cmp	r3, #51	; 0x33
   16680:	bne	16600 <__assert_fail@plt+0x5454>
   16684:	ldrb	r3, [r0, #6]
   16688:	cmp	r3, #48	; 0x30
   1668c:	bne	16600 <__assert_fail@plt+0x5454>
   16690:	ldrb	r3, [r0, #7]
   16694:	cmp	r3, #0
   16698:	bne	16600 <__assert_fail@plt+0x5454>
   1669c:	ldrb	r2, [r4]
   166a0:	movw	r4, #43752	; 0xaae8
   166a4:	movt	r4, #1
   166a8:	movw	r3, #43748	; 0xaae4
   166ac:	movt	r3, #1
   166b0:	cmp	r2, #96	; 0x60
   166b4:	movne	r4, r3
   166b8:	b	16594 <__assert_fail@plt+0x53e8>
   166bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166c0:	strd	r6, [sp, #8]
   166c4:	strd	r8, [sp, #16]
   166c8:	strd	sl, [sp, #24]
   166cc:	str	lr, [sp, #32]
   166d0:	sub	sp, sp, #116	; 0x74
   166d4:	str	r0, [sp, #64]	; 0x40
   166d8:	mov	r8, r1
   166dc:	str	r2, [sp, #48]	; 0x30
   166e0:	str	r3, [sp, #24]
   166e4:	ldr	r7, [sp, #152]	; 0x98
   166e8:	bl	10fb4 <__ctype_get_mb_cur_max@plt>
   166ec:	str	r0, [sp, #76]	; 0x4c
   166f0:	ldr	r3, [sp, #156]	; 0x9c
   166f4:	ubfx	r3, r3, #1, #1
   166f8:	str	r3, [sp, #32]
   166fc:	mov	r3, #1
   16700:	str	r3, [sp, #40]	; 0x28
   16704:	mov	r3, #0
   16708:	str	r3, [sp, #68]	; 0x44
   1670c:	str	r3, [sp, #36]	; 0x24
   16710:	str	r3, [sp, #28]
   16714:	str	r3, [sp, #52]	; 0x34
   16718:	str	r3, [sp, #60]	; 0x3c
   1671c:	str	r3, [sp, #72]	; 0x48
   16720:	movw	r3, #43764	; 0xaaf4
   16724:	movt	r3, #1
   16728:	str	r3, [sp, #80]	; 0x50
   1672c:	mov	r9, r8
   16730:	mov	sl, r7
   16734:	cmp	sl, #10
   16738:	ldrls	pc, [pc, sl, lsl #2]
   1673c:	b	16900 <__assert_fail@plt+0x5754>
   16740:	andeq	r6, r1, r0, lsr #15
   16744:	andeq	r6, r1, r4, ror r7
   16748:	ldrdeq	r6, [r1], -r8
   1674c:	andeq	r6, r1, ip, ror #14
   16750:	andeq	r6, r1, ip, lsl #17
   16754:			; <UNDEFINED> instruction: 0x000167b0
   16758:	andeq	r7, r1, ip, ror fp
   1675c:	andeq	r6, r1, r4, lsl #18
   16760:	andeq	r6, r1, ip, ror #15
   16764:	andeq	r6, r1, ip, ror #15
   16768:	andeq	r6, r1, ip, ror #15
   1676c:	mov	r3, #1
   16770:	str	r3, [sp, #28]
   16774:	mov	r3, #1
   16778:	str	r3, [sp, #32]
   1677c:	str	r3, [sp, #52]	; 0x34
   16780:	movw	r3, #43760	; 0xaaf0
   16784:	movt	r3, #1
   16788:	str	r3, [sp, #60]	; 0x3c
   1678c:	mov	fp, #0
   16790:	mov	sl, #2
   16794:	mov	r6, #0
   16798:	ldr	r8, [sp, #64]	; 0x40
   1679c:	b	17014 <__assert_fail@plt+0x5e68>
   167a0:	mov	fp, sl
   167a4:	mov	r3, #0
   167a8:	str	r3, [sp, #32]
   167ac:	b	16794 <__assert_fail@plt+0x55e8>
   167b0:	ldr	r3, [sp, #32]
   167b4:	cmp	r3, #0
   167b8:	bne	16918 <__assert_fail@plt+0x576c>
   167bc:	cmp	r9, #0
   167c0:	beq	1693c <__assert_fail@plt+0x5790>
   167c4:	mov	r3, #34	; 0x22
   167c8:	ldr	r2, [sp, #64]	; 0x40
   167cc:	strb	r3, [r2]
   167d0:	mov	fp, #1
   167d4:	str	fp, [sp, #28]
   167d8:	str	fp, [sp, #52]	; 0x34
   167dc:	movw	r3, #43740	; 0xaadc
   167e0:	movt	r3, #1
   167e4:	str	r3, [sp, #60]	; 0x3c
   167e8:	b	16794 <__assert_fail@plt+0x55e8>
   167ec:	cmp	sl, #10
   167f0:	bne	16824 <__assert_fail@plt+0x5678>
   167f4:	ldr	r3, [sp, #32]
   167f8:	cmp	r3, #0
   167fc:	movne	fp, #0
   16800:	beq	1684c <__assert_fail@plt+0x56a0>
   16804:	ldr	r0, [sp, #168]	; 0xa8
   16808:	bl	11044 <strlen@plt>
   1680c:	str	r0, [sp, #52]	; 0x34
   16810:	ldr	r3, [sp, #168]	; 0xa8
   16814:	str	r3, [sp, #60]	; 0x3c
   16818:	mov	r3, #1
   1681c:	str	r3, [sp, #28]
   16820:	b	16794 <__assert_fail@plt+0x55e8>
   16824:	mov	r1, sl
   16828:	ldr	r0, [sp, #80]	; 0x50
   1682c:	bl	16564 <__assert_fail@plt+0x53b8>
   16830:	str	r0, [sp, #164]	; 0xa4
   16834:	mov	r1, sl
   16838:	movw	r0, #43760	; 0xaaf0
   1683c:	movt	r0, #1
   16840:	bl	16564 <__assert_fail@plt+0x53b8>
   16844:	str	r0, [sp, #168]	; 0xa8
   16848:	b	167f4 <__assert_fail@plt+0x5648>
   1684c:	ldr	r3, [sp, #164]	; 0xa4
   16850:	ldrb	r3, [r3]
   16854:	cmp	r3, #0
   16858:	beq	16884 <__assert_fail@plt+0x56d8>
   1685c:	ldr	r2, [sp, #164]	; 0xa4
   16860:	mov	fp, #0
   16864:	ldr	r1, [sp, #64]	; 0x40
   16868:	cmp	r9, fp
   1686c:	strbhi	r3, [r1, fp]
   16870:	add	fp, fp, #1
   16874:	ldrb	r3, [r2, #1]!
   16878:	cmp	r3, #0
   1687c:	bne	16868 <__assert_fail@plt+0x56bc>
   16880:	b	16804 <__assert_fail@plt+0x5658>
   16884:	mov	fp, #0
   16888:	b	16804 <__assert_fail@plt+0x5658>
   1688c:	ldr	r3, [sp, #32]
   16890:	cmp	r3, #0
   16894:	bne	16774 <__assert_fail@plt+0x55c8>
   16898:	mov	r3, #1
   1689c:	str	r3, [sp, #28]
   168a0:	cmp	r9, #0
   168a4:	beq	16958 <__assert_fail@plt+0x57ac>
   168a8:	mov	r3, #39	; 0x27
   168ac:	ldr	r2, [sp, #64]	; 0x40
   168b0:	strb	r3, [r2]
   168b4:	mov	r3, #0
   168b8:	str	r3, [sp, #32]
   168bc:	mov	fp, #1
   168c0:	str	fp, [sp, #52]	; 0x34
   168c4:	movw	r3, #43760	; 0xaaf0
   168c8:	movt	r3, #1
   168cc:	str	r3, [sp, #60]	; 0x3c
   168d0:	mov	sl, #2
   168d4:	b	16794 <__assert_fail@plt+0x55e8>
   168d8:	ldr	r3, [sp, #32]
   168dc:	cmp	r3, #0
   168e0:	beq	168a0 <__assert_fail@plt+0x56f4>
   168e4:	mov	r3, #1
   168e8:	str	r3, [sp, #52]	; 0x34
   168ec:	movw	r3, #43760	; 0xaaf0
   168f0:	movt	r3, #1
   168f4:	str	r3, [sp, #60]	; 0x3c
   168f8:	mov	fp, #0
   168fc:	b	16794 <__assert_fail@plt+0x55e8>
   16900:	bl	1117c <abort@plt>
   16904:	mov	fp, #0
   16908:	str	fp, [sp, #32]
   1690c:	mov	r3, #1
   16910:	str	r3, [sp, #28]
   16914:	b	16794 <__assert_fail@plt+0x55e8>
   16918:	ldr	r3, [sp, #32]
   1691c:	str	r3, [sp, #28]
   16920:	mov	r3, #1
   16924:	str	r3, [sp, #52]	; 0x34
   16928:	movw	r3, #43740	; 0xaadc
   1692c:	movt	r3, #1
   16930:	str	r3, [sp, #60]	; 0x3c
   16934:	mov	fp, #0
   16938:	b	16794 <__assert_fail@plt+0x55e8>
   1693c:	mov	fp, #1
   16940:	str	fp, [sp, #28]
   16944:	str	fp, [sp, #52]	; 0x34
   16948:	movw	r3, #43740	; 0xaadc
   1694c:	movt	r3, #1
   16950:	str	r3, [sp, #60]	; 0x3c
   16954:	b	16794 <__assert_fail@plt+0x55e8>
   16958:	mov	r3, #0
   1695c:	str	r3, [sp, #32]
   16960:	mov	fp, #1
   16964:	str	fp, [sp, #52]	; 0x34
   16968:	movw	r3, #43760	; 0xaaf0
   1696c:	movt	r3, #1
   16970:	str	r3, [sp, #60]	; 0x3c
   16974:	mov	sl, #2
   16978:	b	16794 <__assert_fail@plt+0x55e8>
   1697c:	mov	r3, r2
   16980:	add	r4, r6, r2
   16984:	ldr	r2, [sp, #24]
   16988:	cmp	r3, #1
   1698c:	movls	r3, #0
   16990:	movhi	r3, #1
   16994:	cmn	r2, #1
   16998:	movne	r3, #0
   1699c:	cmp	r3, #0
   169a0:	beq	169b0 <__assert_fail@plt+0x5804>
   169a4:	ldr	r0, [sp, #48]	; 0x30
   169a8:	bl	11044 <strlen@plt>
   169ac:	str	r0, [sp, #24]
   169b0:	ldr	r3, [sp, #24]
   169b4:	cmp	r4, r3
   169b8:	bhi	17ba4 <__assert_fail@plt+0x69f8>
   169bc:	ldr	r3, [sp, #48]	; 0x30
   169c0:	add	r4, r3, r6
   169c4:	ldr	r2, [sp, #52]	; 0x34
   169c8:	ldr	r1, [sp, #60]	; 0x3c
   169cc:	mov	r0, r4
   169d0:	bl	10f3c <memcmp@plt>
   169d4:	cmp	r0, #0
   169d8:	bne	17ba4 <__assert_fail@plt+0x69f8>
   169dc:	ldr	r3, [sp, #32]
   169e0:	cmp	r3, #0
   169e4:	bne	16bf4 <__assert_fail@plt+0x5a48>
   169e8:	ldrb	r4, [r4]
   169ec:	cmp	r4, #126	; 0x7e
   169f0:	ldrls	pc, [pc, r4, lsl #2]
   169f4:	b	174a8 <__assert_fail@plt+0x62fc>
   169f8:	andeq	r6, r1, r8, lsr ip
   169fc:	andeq	r7, r1, r8, lsr #9
   16a00:	andeq	r7, r1, r8, lsr #9
   16a04:	andeq	r7, r1, r8, lsr #9
   16a08:	andeq	r7, r1, r8, lsr #9
   16a0c:	andeq	r7, r1, r8, lsr #9
   16a10:	andeq	r7, r1, r8, lsr #9
   16a14:	andeq	r7, r1, r0, asr r3
   16a18:	ldrdeq	r6, [r1], -r4
   16a1c:	andeq	r7, r1, r8, ror r2
   16a20:	andeq	r7, r1, r4, lsr #6
   16a24:	andeq	r7, r1, ip, lsl #5
   16a28:	andeq	r6, r1, r8, ror #29
   16a2c:	strdeq	r6, [r1], -ip
   16a30:	andeq	r7, r1, r8, lsr #9
   16a34:	andeq	r7, r1, r8, lsr #9
   16a38:	andeq	r7, r1, r8, lsr #9
   16a3c:	andeq	r7, r1, r8, lsr #9
   16a40:	andeq	r7, r1, r8, lsr #9
   16a44:	andeq	r7, r1, r8, lsr #9
   16a48:	andeq	r7, r1, r8, lsr #9
   16a4c:	andeq	r7, r1, r8, lsr #9
   16a50:	andeq	r7, r1, r8, lsr #9
   16a54:	andeq	r7, r1, r8, lsr #9
   16a58:	andeq	r7, r1, r8, lsr #9
   16a5c:	andeq	r7, r1, r8, lsr #9
   16a60:	andeq	r7, r1, r8, lsr #9
   16a64:	andeq	r7, r1, r8, lsr #9
   16a68:	andeq	r7, r1, r8, lsr #9
   16a6c:	andeq	r7, r1, r8, lsr #9
   16a70:	andeq	r7, r1, r8, lsr #9
   16a74:	andeq	r7, r1, r8, lsr #9
   16a78:	andeq	r7, r1, r4, asr #7
   16a7c:	andeq	r7, r1, r8, ror #7
   16a80:	andeq	r7, r1, r8, ror #7
   16a84:	andeq	r7, r1, r0, lsl #7
   16a88:	andeq	r7, r1, r8, ror #7
   16a8c:	andeq	r7, r1, r8, lsl #18
   16a90:	andeq	r7, r1, r8, ror #7
   16a94:	andeq	r7, r1, r8, lsl #8
   16a98:	andeq	r7, r1, r8, ror #7
   16a9c:	andeq	r7, r1, r8, ror #7
   16aa0:	andeq	r7, r1, r8, ror #7
   16aa4:	andeq	r7, r1, r8, lsl #18
   16aa8:	andeq	r7, r1, r8, lsl #18
   16aac:	andeq	r7, r1, r8, lsl #18
   16ab0:	andeq	r7, r1, r8, lsl #18
   16ab4:	andeq	r7, r1, r8, lsl #18
   16ab8:	andeq	r7, r1, r8, lsl #18
   16abc:	andeq	r7, r1, r8, lsl #18
   16ac0:	andeq	r7, r1, r8, lsl #18
   16ac4:	andeq	r7, r1, r8, lsl #18
   16ac8:	andeq	r7, r1, r8, lsl #18
   16acc:	andeq	r7, r1, r8, lsl #18
   16ad0:	andeq	r7, r1, r8, lsl #18
   16ad4:	andeq	r7, r1, r8, lsl #18
   16ad8:	andeq	r7, r1, r8, lsl #18
   16adc:	andeq	r7, r1, r8, lsl #18
   16ae0:	andeq	r7, r1, r8, lsl #18
   16ae4:	andeq	r7, r1, r8, ror #7
   16ae8:	andeq	r7, r1, r8, ror #7
   16aec:	andeq	r7, r1, r8, ror #7
   16af0:	andeq	r7, r1, r8, ror #7
   16af4:	andeq	r6, r1, r8, ror #26
   16af8:	andeq	r7, r1, r8, lsr #9
   16afc:	andeq	r7, r1, r8, lsl #18
   16b00:	andeq	r7, r1, r8, lsl #18
   16b04:	andeq	r7, r1, r8, lsl #18
   16b08:	andeq	r7, r1, r8, lsl #18
   16b0c:	andeq	r7, r1, r8, lsl #18
   16b10:	andeq	r7, r1, r8, lsl #18
   16b14:	andeq	r7, r1, r8, lsl #18
   16b18:	andeq	r7, r1, r8, lsl #18
   16b1c:	andeq	r7, r1, r8, lsl #18
   16b20:	andeq	r7, r1, r8, lsl #18
   16b24:	andeq	r7, r1, r8, lsl #18
   16b28:	andeq	r7, r1, r8, lsl #18
   16b2c:	andeq	r7, r1, r8, lsl #18
   16b30:	andeq	r7, r1, r8, lsl #18
   16b34:	andeq	r7, r1, r8, lsl #18
   16b38:	andeq	r7, r1, r8, lsl #18
   16b3c:	andeq	r7, r1, r8, lsl #18
   16b40:	andeq	r7, r1, r8, lsl #18
   16b44:	andeq	r7, r1, r8, lsl #18
   16b48:	andeq	r7, r1, r8, lsl #18
   16b4c:	andeq	r7, r1, r8, lsl #18
   16b50:	andeq	r7, r1, r8, lsl #18
   16b54:	andeq	r7, r1, r8, lsl #18
   16b58:	andeq	r7, r1, r8, lsl #18
   16b5c:	andeq	r7, r1, r8, lsl #18
   16b60:	andeq	r7, r1, r8, lsl #18
   16b64:	andeq	r7, r1, r8, ror #7
   16b68:	andeq	r7, r1, r0, lsr #5
   16b6c:	andeq	r7, r1, r8, lsl #18
   16b70:	andeq	r7, r1, r8, ror #7
   16b74:	andeq	r7, r1, r8, lsl #18
   16b78:	andeq	r7, r1, r8, ror #7
   16b7c:	andeq	r7, r1, r8, lsl #18
   16b80:	andeq	r7, r1, r8, lsl #18
   16b84:	andeq	r7, r1, r8, lsl #18
   16b88:	andeq	r7, r1, r8, lsl #18
   16b8c:	andeq	r7, r1, r8, lsl #18
   16b90:	andeq	r7, r1, r8, lsl #18
   16b94:	andeq	r7, r1, r8, lsl #18
   16b98:	andeq	r7, r1, r8, lsl #18
   16b9c:	andeq	r7, r1, r8, lsl #18
   16ba0:	andeq	r7, r1, r8, lsl #18
   16ba4:	andeq	r7, r1, r8, lsl #18
   16ba8:	andeq	r7, r1, r8, lsl #18
   16bac:	andeq	r7, r1, r8, lsl #18
   16bb0:	andeq	r7, r1, r8, lsl #18
   16bb4:	andeq	r7, r1, r8, lsl #18
   16bb8:	andeq	r7, r1, r8, lsl #18
   16bbc:	andeq	r7, r1, r8, lsl #18
   16bc0:	andeq	r7, r1, r8, lsl #18
   16bc4:	andeq	r7, r1, r8, lsl #18
   16bc8:	andeq	r7, r1, r8, lsl #18
   16bcc:	andeq	r7, r1, r8, lsl #18
   16bd0:	andeq	r7, r1, r8, lsl #18
   16bd4:	andeq	r7, r1, r8, lsl #18
   16bd8:	andeq	r7, r1, r8, lsl #18
   16bdc:	andeq	r7, r1, r8, lsl #18
   16be0:	andeq	r7, r1, r8, lsl #18
   16be4:	andeq	r7, r1, r0, ror #6
   16be8:	andeq	r7, r1, r8, ror #7
   16bec:	andeq	r7, r1, r0, ror #6
   16bf0:	andeq	r7, r1, r0, lsl #7
   16bf4:	mov	r8, r9
   16bf8:	mov	r7, sl
   16bfc:	b	17afc <__assert_fail@plt+0x6950>
   16c00:	ldr	r3, [sp, #28]
   16c04:	cmp	r3, #0
   16c08:	bne	16c28 <__assert_fail@plt+0x5a7c>
   16c0c:	ldr	r3, [sp, #156]	; 0x9c
   16c10:	tst	r3, #1
   16c14:	bne	17010 <__assert_fail@plt+0x5e64>
   16c18:	ldr	r3, [sp, #28]
   16c1c:	str	r3, [sp, #44]	; 0x2c
   16c20:	mov	r5, r3
   16c24:	b	16f30 <__assert_fail@plt+0x5d84>
   16c28:	ldr	r3, [sp, #32]
   16c2c:	cmp	r3, #0
   16c30:	bne	17aac <__assert_fail@plt+0x6900>
   16c34:	str	r3, [sp, #44]	; 0x2c
   16c38:	ldr	r3, [sp, #36]	; 0x24
   16c3c:	eor	r3, r3, #1
   16c40:	cmp	sl, #2
   16c44:	movne	r3, #0
   16c48:	andeq	r3, r3, #1
   16c4c:	cmp	r3, #0
   16c50:	beq	16ca8 <__assert_fail@plt+0x5afc>
   16c54:	cmp	r9, fp
   16c58:	movhi	r2, #39	; 0x27
   16c5c:	strbhi	r2, [r8, fp]
   16c60:	add	r2, fp, #1
   16c64:	cmp	r9, r2
   16c68:	movhi	r1, #36	; 0x24
   16c6c:	strbhi	r1, [r8, r2]
   16c70:	add	r2, fp, #2
   16c74:	cmp	r9, r2
   16c78:	movhi	r1, #39	; 0x27
   16c7c:	strbhi	r1, [r8, r2]
   16c80:	add	r2, fp, #3
   16c84:	cmp	r9, r2
   16c88:	bls	17b68 <__assert_fail@plt+0x69bc>
   16c8c:	mov	r1, #92	; 0x5c
   16c90:	strb	r1, [r8, r2]
   16c94:	add	fp, fp, #4
   16c98:	str	r3, [sp, #36]	; 0x24
   16c9c:	mov	r5, #0
   16ca0:	mov	r4, #48	; 0x30
   16ca4:	b	16f7c <__assert_fail@plt+0x5dd0>
   16ca8:	cmp	r9, fp
   16cac:	bhi	16cd4 <__assert_fail@plt+0x5b28>
   16cb0:	add	r1, fp, #1
   16cb4:	ldr	r2, [sp, #56]	; 0x38
   16cb8:	cmp	r2, #0
   16cbc:	bne	16cfc <__assert_fail@plt+0x5b50>
   16cc0:	mov	r3, r5
   16cc4:	ldr	r5, [sp, #56]	; 0x38
   16cc8:	mov	fp, r1
   16ccc:	mov	r4, #48	; 0x30
   16cd0:	b	16f30 <__assert_fail@plt+0x5d84>
   16cd4:	mov	r2, #92	; 0x5c
   16cd8:	strb	r2, [r8, fp]
   16cdc:	add	r1, fp, #1
   16ce0:	ldr	r2, [sp, #56]	; 0x38
   16ce4:	cmp	r2, #0
   16ce8:	moveq	r3, r5
   16cec:	moveq	r5, r2
   16cf0:	moveq	fp, r1
   16cf4:	moveq	r4, #48	; 0x30
   16cf8:	beq	16f7c <__assert_fail@plt+0x5dd0>
   16cfc:	add	r2, r6, #1
   16d00:	ldr	r0, [sp, #24]
   16d04:	cmp	r2, r0
   16d08:	bcs	16d24 <__assert_fail@plt+0x5b78>
   16d0c:	ldr	r0, [sp, #48]	; 0x30
   16d10:	ldrb	r2, [r0, r2]
   16d14:	sub	r2, r2, #48	; 0x30
   16d18:	uxtb	r2, r2
   16d1c:	cmp	r2, #9
   16d20:	bls	16d3c <__assert_fail@plt+0x5b90>
   16d24:	mov	r2, r3
   16d28:	mov	r3, r5
   16d2c:	mov	r5, r2
   16d30:	mov	fp, r1
   16d34:	mov	r4, #48	; 0x30
   16d38:	b	16f54 <__assert_fail@plt+0x5da8>
   16d3c:	cmp	r9, r1
   16d40:	movhi	r2, #48	; 0x30
   16d44:	strbhi	r2, [r8, r1]
   16d48:	add	r2, fp, #2
   16d4c:	cmp	r9, r2
   16d50:	movhi	r1, #48	; 0x30
   16d54:	strbhi	r1, [r8, r2]
   16d58:	add	r1, fp, #3
   16d5c:	b	16d24 <__assert_fail@plt+0x5b78>
   16d60:	mov	r3, #0
   16d64:	str	r3, [sp, #44]	; 0x2c
   16d68:	cmp	sl, #2
   16d6c:	beq	16d88 <__assert_fail@plt+0x5bdc>
   16d70:	cmp	sl, #5
   16d74:	beq	16da0 <__assert_fail@plt+0x5bf4>
   16d78:	mov	r5, #0
   16d7c:	mov	r3, r5
   16d80:	mov	r4, #63	; 0x3f
   16d84:	b	16f30 <__assert_fail@plt+0x5d84>
   16d88:	ldr	r3, [sp, #32]
   16d8c:	cmp	r3, #0
   16d90:	bne	17ab8 <__assert_fail@plt+0x690c>
   16d94:	mov	r5, r3
   16d98:	mov	r4, #63	; 0x3f
   16d9c:	b	17498 <__assert_fail@plt+0x62ec>
   16da0:	ldr	r3, [sp, #156]	; 0x9c
   16da4:	tst	r3, #4
   16da8:	beq	178d0 <__assert_fail@plt+0x6724>
   16dac:	add	r2, r6, #2
   16db0:	ldr	r3, [sp, #24]
   16db4:	cmp	r2, r3
   16db8:	bcs	178e0 <__assert_fail@plt+0x6734>
   16dbc:	ldr	r3, [sp, #48]	; 0x30
   16dc0:	add	r3, r3, r6
   16dc4:	ldrb	r4, [r3, #1]
   16dc8:	cmp	r4, #63	; 0x3f
   16dcc:	movne	r5, #0
   16dd0:	movne	r3, r5
   16dd4:	movne	r4, #63	; 0x3f
   16dd8:	bne	16f30 <__assert_fail@plt+0x5d84>
   16ddc:	ldr	r3, [sp, #48]	; 0x30
   16de0:	ldrb	r1, [r3, r2]
   16de4:	sub	r3, r1, #33	; 0x21
   16de8:	cmp	r3, #29
   16dec:	ldrls	pc, [pc, r3, lsl #2]
   16df0:	b	178f0 <__assert_fail@plt+0x6744>
   16df4:	andeq	r6, r1, ip, ror #28
   16df8:	strdeq	r7, [r1], -r0
   16dfc:	strdeq	r7, [r1], -r0
   16e00:	strdeq	r7, [r1], -r0
   16e04:	strdeq	r7, [r1], -r0
   16e08:	strdeq	r7, [r1], -r0
   16e0c:	andeq	r6, r1, ip, ror #28
   16e10:	andeq	r6, r1, ip, ror #28
   16e14:	andeq	r6, r1, ip, ror #28
   16e18:	strdeq	r7, [r1], -r0
   16e1c:	strdeq	r7, [r1], -r0
   16e20:	strdeq	r7, [r1], -r0
   16e24:	andeq	r6, r1, ip, ror #28
   16e28:	strdeq	r7, [r1], -r0
   16e2c:	andeq	r6, r1, ip, ror #28
   16e30:	strdeq	r7, [r1], -r0
   16e34:	strdeq	r7, [r1], -r0
   16e38:	strdeq	r7, [r1], -r0
   16e3c:	strdeq	r7, [r1], -r0
   16e40:	strdeq	r7, [r1], -r0
   16e44:	strdeq	r7, [r1], -r0
   16e48:	strdeq	r7, [r1], -r0
   16e4c:	strdeq	r7, [r1], -r0
   16e50:	strdeq	r7, [r1], -r0
   16e54:	strdeq	r7, [r1], -r0
   16e58:	strdeq	r7, [r1], -r0
   16e5c:	strdeq	r7, [r1], -r0
   16e60:	andeq	r6, r1, ip, ror #28
   16e64:	andeq	r6, r1, ip, ror #28
   16e68:	andeq	r6, r1, ip, ror #28
   16e6c:	ldr	r3, [sp, #32]
   16e70:	cmp	r3, #0
   16e74:	bne	17b5c <__assert_fail@plt+0x69b0>
   16e78:	cmp	r9, fp
   16e7c:	movhi	r3, #63	; 0x3f
   16e80:	strbhi	r3, [r8, fp]
   16e84:	add	r3, fp, #1
   16e88:	cmp	r9, r3
   16e8c:	movhi	r0, #34	; 0x22
   16e90:	strbhi	r0, [r8, r3]
   16e94:	add	r3, fp, #2
   16e98:	cmp	r9, r3
   16e9c:	movhi	r0, #34	; 0x22
   16ea0:	strbhi	r0, [r8, r3]
   16ea4:	add	r3, fp, #3
   16ea8:	cmp	r9, r3
   16eac:	movhi	r0, #63	; 0x3f
   16eb0:	strbhi	r0, [r8, r3]
   16eb4:	add	fp, fp, #4
   16eb8:	ldr	r3, [sp, #32]
   16ebc:	mov	r5, r3
   16ec0:	mov	r4, r1
   16ec4:	mov	r6, r2
   16ec8:	b	16f30 <__assert_fail@plt+0x5d84>
   16ecc:	mov	r3, #0
   16ed0:	str	r3, [sp, #44]	; 0x2c
   16ed4:	mov	r4, #8
   16ed8:	mov	r3, #98	; 0x62
   16edc:	b	16f1c <__assert_fail@plt+0x5d70>
   16ee0:	mov	r3, #0
   16ee4:	str	r3, [sp, #44]	; 0x2c
   16ee8:	mov	r4, #12
   16eec:	mov	r3, #102	; 0x66
   16ef0:	b	16f1c <__assert_fail@plt+0x5d70>
   16ef4:	mov	r3, #0
   16ef8:	str	r3, [sp, #44]	; 0x2c
   16efc:	mov	r4, #13
   16f00:	mov	r3, #114	; 0x72
   16f04:	ldr	r2, [sp, #32]
   16f08:	cmp	sl, #2
   16f0c:	movne	r2, #0
   16f10:	andeq	r2, r2, #1
   16f14:	cmp	r2, #0
   16f18:	bne	1733c <__assert_fail@plt+0x6190>
   16f1c:	ldr	r2, [sp, #28]
   16f20:	cmp	r2, #0
   16f24:	bne	17924 <__assert_fail@plt+0x6778>
   16f28:	mov	r5, r2
   16f2c:	mov	r3, r2
   16f30:	ldr	r2, [sp, #28]
   16f34:	eor	r2, r2, #1
   16f38:	cmp	sl, #2
   16f3c:	orreq	r2, r2, #1
   16f40:	eor	r2, r2, #1
   16f44:	ldr	r1, [sp, #32]
   16f48:	orr	r2, r1, r2
   16f4c:	tst	r2, #255	; 0xff
   16f50:	beq	16f7c <__assert_fail@plt+0x5dd0>
   16f54:	ldr	r2, [sp, #160]	; 0xa0
   16f58:	cmp	r2, #0
   16f5c:	beq	16f7c <__assert_fail@plt+0x5dd0>
   16f60:	ubfx	r1, r4, #5, #8
   16f64:	and	r2, r4, #31
   16f68:	ldr	r0, [sp, #160]	; 0xa0
   16f6c:	ldr	r1, [r0, r1, lsl #2]
   16f70:	lsr	r2, r1, r2
   16f74:	tst	r2, #1
   16f78:	bne	16f88 <__assert_fail@plt+0x5ddc>
   16f7c:	ldr	r2, [sp, #44]	; 0x2c
   16f80:	cmp	r2, #0
   16f84:	beq	172dc <__assert_fail@plt+0x6130>
   16f88:	ldr	r3, [sp, #32]
   16f8c:	cmp	r3, #0
   16f90:	bne	17adc <__assert_fail@plt+0x6930>
   16f94:	ldr	r3, [sp, #36]	; 0x24
   16f98:	eor	r3, r3, #1
   16f9c:	cmp	sl, #2
   16fa0:	movne	r3, #0
   16fa4:	andeq	r3, r3, #1
   16fa8:	cmp	r3, #0
   16fac:	beq	16fe4 <__assert_fail@plt+0x5e38>
   16fb0:	cmp	r9, fp
   16fb4:	movhi	r2, #39	; 0x27
   16fb8:	strbhi	r2, [r8, fp]
   16fbc:	add	r2, fp, #1
   16fc0:	cmp	r9, r2
   16fc4:	movhi	r1, #36	; 0x24
   16fc8:	strbhi	r1, [r8, r2]
   16fcc:	add	r2, fp, #2
   16fd0:	cmp	r9, r2
   16fd4:	movhi	r1, #39	; 0x27
   16fd8:	strbhi	r1, [r8, r2]
   16fdc:	add	fp, fp, #3
   16fe0:	str	r3, [sp, #36]	; 0x24
   16fe4:	cmp	r9, fp
   16fe8:	movhi	r3, #92	; 0x5c
   16fec:	strbhi	r3, [r8, fp]
   16ff0:	add	fp, fp, #1
   16ff4:	cmp	fp, r9
   16ff8:	strbcc	r4, [r8, fp]
   16ffc:	add	fp, fp, #1
   17000:	cmp	r5, #0
   17004:	ldr	r3, [sp, #40]	; 0x28
   17008:	moveq	r3, r5
   1700c:	str	r3, [sp, #40]	; 0x28
   17010:	add	r6, r6, #1
   17014:	ldr	r3, [sp, #24]
   17018:	cmn	r3, #1
   1701c:	beq	1794c <__assert_fail@plt+0x67a0>
   17020:	ldr	r3, [sp, #24]
   17024:	subs	r5, r3, r6
   17028:	movne	r5, #1
   1702c:	cmp	r5, #0
   17030:	beq	17960 <__assert_fail@plt+0x67b4>
   17034:	ldr	r3, [sp, #28]
   17038:	cmp	sl, #2
   1703c:	moveq	r3, #0
   17040:	andne	r3, r3, #1
   17044:	str	r3, [sp, #56]	; 0x38
   17048:	ldr	r2, [sp, #52]	; 0x34
   1704c:	adds	r7, r2, #0
   17050:	movne	r7, #1
   17054:	ands	r3, r3, r7
   17058:	str	r3, [sp, #44]	; 0x2c
   1705c:	bne	1697c <__assert_fail@plt+0x57d0>
   17060:	ldr	r3, [sp, #48]	; 0x30
   17064:	ldrb	r4, [r3, r6]
   17068:	cmp	r4, #126	; 0x7e
   1706c:	ldrls	pc, [pc, r4, lsl #2]
   17070:	b	174a8 <__assert_fail@plt+0x62fc>
   17074:	andeq	r6, r1, r0, lsl #24
   17078:	andeq	r7, r1, r8, lsr #9
   1707c:	andeq	r7, r1, r8, lsr #9
   17080:	andeq	r7, r1, r8, lsr #9
   17084:	andeq	r7, r1, r8, lsr #9
   17088:	andeq	r7, r1, r8, lsr #9
   1708c:	andeq	r7, r1, r8, lsr #9
   17090:	andeq	r7, r1, r8, asr #6
   17094:	ldrdeq	r6, [r1], -r4
   17098:	andeq	r7, r1, r8, ror r2
   1709c:	andeq	r7, r1, ip, lsl r3
   170a0:	andeq	r7, r1, ip, lsl #5
   170a4:	andeq	r6, r1, r8, ror #29
   170a8:	strdeq	r6, [r1], -ip
   170ac:	andeq	r7, r1, r8, lsr #9
   170b0:	andeq	r7, r1, r8, lsr #9
   170b4:	andeq	r7, r1, r8, lsr #9
   170b8:	andeq	r7, r1, r8, lsr #9
   170bc:	andeq	r7, r1, r8, lsr #9
   170c0:	andeq	r7, r1, r8, lsr #9
   170c4:	andeq	r7, r1, r8, lsr #9
   170c8:	andeq	r7, r1, r8, lsr #9
   170cc:	andeq	r7, r1, r8, lsr #9
   170d0:	andeq	r7, r1, r8, lsr #9
   170d4:	andeq	r7, r1, r8, lsr #9
   170d8:	andeq	r7, r1, r8, lsr #9
   170dc:	andeq	r7, r1, r8, lsr #9
   170e0:	andeq	r7, r1, r8, lsr #9
   170e4:	andeq	r7, r1, r8, lsr #9
   170e8:	andeq	r7, r1, r8, lsr #9
   170ec:	andeq	r7, r1, r8, lsr #9
   170f0:	andeq	r7, r1, r8, lsr #9
   170f4:	andeq	r7, r1, r4, asr #7
   170f8:	andeq	r7, r1, r0, asr #7
   170fc:	andeq	r7, r1, r0, asr #7
   17100:	andeq	r7, r1, r0, lsl #7
   17104:	andeq	r7, r1, r0, asr #7
   17108:	andeq	r7, r1, r8, asr #17
   1710c:	andeq	r7, r1, r0, asr #7
   17110:	andeq	r7, r1, r8, lsl #8
   17114:	andeq	r7, r1, r0, asr #7
   17118:	andeq	r7, r1, r0, asr #7
   1711c:	andeq	r7, r1, r0, asr #7
   17120:	andeq	r7, r1, r8, asr #17
   17124:	andeq	r7, r1, r8, asr #17
   17128:	andeq	r7, r1, r8, asr #17
   1712c:	andeq	r7, r1, r8, asr #17
   17130:	andeq	r7, r1, r8, asr #17
   17134:	andeq	r7, r1, r8, asr #17
   17138:	andeq	r7, r1, r8, asr #17
   1713c:	andeq	r7, r1, r8, asr #17
   17140:	andeq	r7, r1, r8, asr #17
   17144:	andeq	r7, r1, r8, asr #17
   17148:	andeq	r7, r1, r8, asr #17
   1714c:	andeq	r7, r1, r8, asr #17
   17150:	andeq	r7, r1, r8, asr #17
   17154:	andeq	r7, r1, r8, asr #17
   17158:	andeq	r7, r1, r8, asr #17
   1715c:	andeq	r7, r1, r8, asr #17
   17160:	andeq	r7, r1, r0, asr #7
   17164:	andeq	r7, r1, r0, asr #7
   17168:	andeq	r7, r1, r0, asr #7
   1716c:	andeq	r7, r1, r0, asr #7
   17170:	andeq	r6, r1, r8, ror #26
   17174:	andeq	r7, r1, r8, lsr #9
   17178:	andeq	r7, r1, r8, asr #17
   1717c:	andeq	r7, r1, r8, asr #17
   17180:	andeq	r7, r1, r8, asr #17
   17184:	andeq	r7, r1, r8, asr #17
   17188:	andeq	r7, r1, r8, asr #17
   1718c:	andeq	r7, r1, r8, asr #17
   17190:	andeq	r7, r1, r8, asr #17
   17194:	andeq	r7, r1, r8, asr #17
   17198:	andeq	r7, r1, r8, asr #17
   1719c:	andeq	r7, r1, r8, asr #17
   171a0:	andeq	r7, r1, r8, asr #17
   171a4:	andeq	r7, r1, r8, asr #17
   171a8:	andeq	r7, r1, r8, asr #17
   171ac:	andeq	r7, r1, r8, asr #17
   171b0:	andeq	r7, r1, r8, asr #17
   171b4:	andeq	r7, r1, r8, asr #17
   171b8:	andeq	r7, r1, r8, asr #17
   171bc:	andeq	r7, r1, r8, asr #17
   171c0:	andeq	r7, r1, r8, asr #17
   171c4:	andeq	r7, r1, r8, asr #17
   171c8:	andeq	r7, r1, r8, asr #17
   171cc:	andeq	r7, r1, r8, asr #17
   171d0:	andeq	r7, r1, r8, asr #17
   171d4:	andeq	r7, r1, r8, asr #17
   171d8:	andeq	r7, r1, r8, asr #17
   171dc:	andeq	r7, r1, r8, asr #17
   171e0:	andeq	r7, r1, r0, asr #7
   171e4:	andeq	r7, r1, r0, lsr #5
   171e8:	andeq	r7, r1, r8, asr #17
   171ec:	andeq	r7, r1, r0, asr #7
   171f0:	andeq	r7, r1, r8, asr #17
   171f4:	andeq	r7, r1, r0, asr #7
   171f8:	andeq	r7, r1, r8, asr #17
   171fc:	andeq	r7, r1, r8, asr #17
   17200:	andeq	r7, r1, r8, asr #17
   17204:	andeq	r7, r1, r8, asr #17
   17208:	andeq	r7, r1, r8, asr #17
   1720c:	andeq	r7, r1, r8, asr #17
   17210:	andeq	r7, r1, r8, asr #17
   17214:	andeq	r7, r1, r8, asr #17
   17218:	andeq	r7, r1, r8, asr #17
   1721c:	andeq	r7, r1, r8, asr #17
   17220:	andeq	r7, r1, r8, asr #17
   17224:	andeq	r7, r1, r8, asr #17
   17228:	andeq	r7, r1, r8, asr #17
   1722c:	andeq	r7, r1, r8, asr #17
   17230:	andeq	r7, r1, r8, asr #17
   17234:	andeq	r7, r1, r8, asr #17
   17238:	andeq	r7, r1, r8, asr #17
   1723c:	andeq	r7, r1, r8, asr #17
   17240:	andeq	r7, r1, r8, asr #17
   17244:	andeq	r7, r1, r8, asr #17
   17248:	andeq	r7, r1, r8, asr #17
   1724c:	andeq	r7, r1, r8, asr #17
   17250:	andeq	r7, r1, r8, asr #17
   17254:	andeq	r7, r1, r8, asr #17
   17258:	andeq	r7, r1, r8, asr #17
   1725c:	andeq	r7, r1, r8, asr #17
   17260:	andeq	r7, r1, r0, ror #6
   17264:	andeq	r7, r1, r0, asr #7
   17268:	andeq	r7, r1, r0, ror #6
   1726c:	andeq	r7, r1, r0, lsl #7
   17270:	mov	r3, #0
   17274:	str	r3, [sp, #44]	; 0x2c
   17278:	mov	r4, #9
   1727c:	mov	r3, #116	; 0x74
   17280:	b	16f04 <__assert_fail@plt+0x5d58>
   17284:	mov	r3, #0
   17288:	str	r3, [sp, #44]	; 0x2c
   1728c:	mov	r4, #11
   17290:	mov	r3, #118	; 0x76
   17294:	b	16f1c <__assert_fail@plt+0x5d70>
   17298:	mov	r3, #0
   1729c:	str	r3, [sp, #44]	; 0x2c
   172a0:	cmp	sl, #2
   172a4:	beq	172c8 <__assert_fail@plt+0x611c>
   172a8:	ldr	r3, [sp, #28]
   172ac:	ldr	r2, [sp, #32]
   172b0:	and	r3, r3, r2
   172b4:	tst	r7, r3
   172b8:	bne	1793c <__assert_fail@plt+0x6790>
   172bc:	mov	r4, #92	; 0x5c
   172c0:	mov	r3, r4
   172c4:	b	16f1c <__assert_fail@plt+0x5d70>
   172c8:	ldr	r3, [sp, #32]
   172cc:	cmp	r3, #0
   172d0:	bne	17ac4 <__assert_fail@plt+0x6918>
   172d4:	mov	r5, r3
   172d8:	mov	r4, #92	; 0x5c
   172dc:	eor	r3, r3, #1
   172e0:	ldr	r2, [sp, #36]	; 0x24
   172e4:	and	r3, r3, r2
   172e8:	tst	r3, #255	; 0xff
   172ec:	beq	16ff4 <__assert_fail@plt+0x5e48>
   172f0:	cmp	r9, fp
   172f4:	movhi	r3, #39	; 0x27
   172f8:	strbhi	r3, [r8, fp]
   172fc:	add	r3, fp, #1
   17300:	cmp	r9, r3
   17304:	movhi	r2, #39	; 0x27
   17308:	strbhi	r2, [r8, r3]
   1730c:	add	fp, fp, #2
   17310:	mov	r3, #0
   17314:	str	r3, [sp, #36]	; 0x24
   17318:	b	16ff4 <__assert_fail@plt+0x5e48>
   1731c:	mov	r3, #110	; 0x6e
   17320:	b	16f04 <__assert_fail@plt+0x5d58>
   17324:	mov	r3, #110	; 0x6e
   17328:	b	16f04 <__assert_fail@plt+0x5d58>
   1732c:	mov	r3, #0
   17330:	str	r3, [sp, #44]	; 0x2c
   17334:	mov	r3, #110	; 0x6e
   17338:	b	16f04 <__assert_fail@plt+0x5d58>
   1733c:	mov	r8, r9
   17340:	mov	r7, #2
   17344:	b	17ae4 <__assert_fail@plt+0x6938>
   17348:	mov	r3, #97	; 0x61
   1734c:	b	16f1c <__assert_fail@plt+0x5d70>
   17350:	mov	r3, #97	; 0x61
   17354:	b	16f1c <__assert_fail@plt+0x5d70>
   17358:	mov	r3, #0
   1735c:	str	r3, [sp, #44]	; 0x2c
   17360:	ldr	r3, [sp, #24]
   17364:	cmn	r3, #1
   17368:	beq	17394 <__assert_fail@plt+0x61e8>
   1736c:	ldr	r3, [sp, #24]
   17370:	subs	r3, r3, #1
   17374:	movne	r3, #1
   17378:	cmp	r3, #0
   1737c:	bne	178fc <__assert_fail@plt+0x6750>
   17380:	cmp	r6, #0
   17384:	beq	173c4 <__assert_fail@plt+0x6218>
   17388:	mov	r5, #0
   1738c:	mov	r3, r5
   17390:	b	16f30 <__assert_fail@plt+0x5d84>
   17394:	ldr	r3, [sp, #48]	; 0x30
   17398:	ldrb	r3, [r3, #1]
   1739c:	adds	r3, r3, #0
   173a0:	movne	r3, #1
   173a4:	b	17378 <__assert_fail@plt+0x61cc>
   173a8:	mov	r3, #0
   173ac:	str	r3, [sp, #44]	; 0x2c
   173b0:	b	17380 <__assert_fail@plt+0x61d4>
   173b4:	mov	r3, #0
   173b8:	str	r3, [sp, #44]	; 0x2c
   173bc:	b	173c4 <__assert_fail@plt+0x6218>
   173c0:	ldr	r5, [sp, #44]	; 0x2c
   173c4:	ldr	r3, [sp, #32]
   173c8:	cmp	sl, #2
   173cc:	movne	r3, #0
   173d0:	andeq	r3, r3, #1
   173d4:	cmp	r3, #0
   173d8:	beq	16f30 <__assert_fail@plt+0x5d84>
   173dc:	mov	r8, r9
   173e0:	mov	r7, #2
   173e4:	b	17ae4 <__assert_fail@plt+0x6938>
   173e8:	ldr	r5, [sp, #32]
   173ec:	b	173c4 <__assert_fail@plt+0x6218>
   173f0:	mov	r3, #0
   173f4:	str	r3, [sp, #44]	; 0x2c
   173f8:	mov	r5, r3
   173fc:	b	173c4 <__assert_fail@plt+0x6218>
   17400:	mov	r3, #0
   17404:	str	r3, [sp, #44]	; 0x2c
   17408:	cmp	sl, #2
   1740c:	strne	r5, [sp, #68]	; 0x44
   17410:	movne	r3, #0
   17414:	movne	r4, #39	; 0x27
   17418:	bne	16f30 <__assert_fail@plt+0x5d84>
   1741c:	ldr	r3, [sp, #32]
   17420:	cmp	r3, #0
   17424:	bne	17ad0 <__assert_fail@plt+0x6924>
   17428:	ldr	r3, [sp, #72]	; 0x48
   1742c:	clz	r3, r3
   17430:	lsr	r3, r3, #5
   17434:	cmp	r9, #0
   17438:	moveq	r3, #0
   1743c:	cmp	r3, #0
   17440:	movne	r3, #0
   17444:	bne	1746c <__assert_fail@plt+0x62c0>
   17448:	cmp	r9, fp
   1744c:	movhi	r3, #39	; 0x27
   17450:	strbhi	r3, [r8, fp]
   17454:	add	r3, fp, #1
   17458:	cmp	r9, r3
   1745c:	movhi	r2, #92	; 0x5c
   17460:	strbhi	r2, [r8, r3]
   17464:	mov	r3, r9
   17468:	ldr	r9, [sp, #72]	; 0x48
   1746c:	add	r2, fp, #2
   17470:	cmp	r2, r3
   17474:	movcc	r1, #39	; 0x27
   17478:	strbcc	r1, [r8, r2]
   1747c:	add	fp, fp, #3
   17480:	str	r5, [sp, #68]	; 0x44
   17484:	ldr	r2, [sp, #32]
   17488:	str	r2, [sp, #36]	; 0x24
   1748c:	str	r9, [sp, #72]	; 0x48
   17490:	mov	r9, r3
   17494:	mov	r4, #39	; 0x27
   17498:	mov	r3, #0
   1749c:	b	16f7c <__assert_fail@plt+0x5dd0>
   174a0:	mov	r3, #0
   174a4:	str	r3, [sp, #44]	; 0x2c
   174a8:	ldr	r7, [sp, #76]	; 0x4c
   174ac:	cmp	r7, #1
   174b0:	bne	174e8 <__assert_fail@plt+0x633c>
   174b4:	bl	1102c <__ctype_b_loc@plt>
   174b8:	ldr	r2, [r0]
   174bc:	lsl	r3, r4, #1
   174c0:	ldrh	r5, [r2, r3]
   174c4:	ubfx	r5, r5, #14, #1
   174c8:	mov	ip, r7
   174cc:	eor	r3, r5, #1
   174d0:	ldr	r2, [sp, #28]
   174d4:	and	r3, r3, r2
   174d8:	ands	r3, r3, #255	; 0xff
   174dc:	beq	16f30 <__assert_fail@plt+0x5d84>
   174e0:	mov	r5, #0
   174e4:	b	17744 <__assert_fail@plt+0x6598>
   174e8:	mov	r2, #0
   174ec:	mov	r3, #0
   174f0:	strd	r2, [sp, #104]	; 0x68
   174f4:	ldr	r3, [sp, #24]
   174f8:	cmn	r3, #1
   174fc:	beq	17520 <__assert_fail@plt+0x6374>
   17500:	mov	r3, #0
   17504:	str	r4, [sp, #88]	; 0x58
   17508:	str	fp, [sp, #92]	; 0x5c
   1750c:	str	r8, [sp, #56]	; 0x38
   17510:	mov	r8, r3
   17514:	str	r9, [sp, #84]	; 0x54
   17518:	ldr	r9, [sp, #48]	; 0x30
   1751c:	b	1766c <__assert_fail@plt+0x64c0>
   17520:	ldr	r0, [sp, #48]	; 0x30
   17524:	bl	11044 <strlen@plt>
   17528:	str	r0, [sp, #24]
   1752c:	b	17500 <__assert_fail@plt+0x6354>
   17530:	mov	r1, fp
   17534:	ldr	r4, [sp, #88]	; 0x58
   17538:	mov	r2, r8
   1753c:	mov	ip, r8
   17540:	ldr	fp, [sp, #92]	; 0x5c
   17544:	ldr	r8, [sp, #56]	; 0x38
   17548:	ldr	r9, [sp, #84]	; 0x54
   1754c:	ldr	r0, [sp, #24]
   17550:	cmp	r7, r0
   17554:	bcs	1770c <__assert_fail@plt+0x6560>
   17558:	ldrb	r3, [r1]
   1755c:	cmp	r3, #0
   17560:	beq	17714 <__assert_fail@plt+0x6568>
   17564:	mov	r3, r1
   17568:	add	r2, r2, #1
   1756c:	add	r1, r6, r2
   17570:	cmp	r0, r1
   17574:	bls	1771c <__assert_fail@plt+0x6570>
   17578:	ldrb	r1, [r3, #1]!
   1757c:	cmp	r1, #0
   17580:	bne	17568 <__assert_fail@plt+0x63bc>
   17584:	mov	ip, r2
   17588:	mov	r5, #0
   1758c:	b	1773c <__assert_fail@plt+0x6590>
   17590:	ldr	r3, [sp, #56]	; 0x38
   17594:	str	r3, [sp, #64]	; 0x40
   17598:	ldr	r8, [sp, #84]	; 0x54
   1759c:	mov	r7, #2
   175a0:	b	17ae4 <__assert_fail@plt+0x6938>
   175a4:	cmp	r2, r7
   175a8:	beq	17648 <__assert_fail@plt+0x649c>
   175ac:	ldrb	r3, [r2], #1
   175b0:	sub	r3, r3, #91	; 0x5b
   175b4:	cmp	r3, #33	; 0x21
   175b8:	ldrls	pc, [pc, r3, lsl #2]
   175bc:	b	175a4 <__assert_fail@plt+0x63f8>
   175c0:	muleq	r1, r0, r5
   175c4:	muleq	r1, r0, r5
   175c8:	andeq	r7, r1, r4, lsr #11
   175cc:	muleq	r1, r0, r5
   175d0:	andeq	r7, r1, r4, lsr #11
   175d4:	muleq	r1, r0, r5
   175d8:	andeq	r7, r1, r4, lsr #11
   175dc:	andeq	r7, r1, r4, lsr #11
   175e0:	andeq	r7, r1, r4, lsr #11
   175e4:	andeq	r7, r1, r4, lsr #11
   175e8:	andeq	r7, r1, r4, lsr #11
   175ec:	andeq	r7, r1, r4, lsr #11
   175f0:	andeq	r7, r1, r4, lsr #11
   175f4:	andeq	r7, r1, r4, lsr #11
   175f8:	andeq	r7, r1, r4, lsr #11
   175fc:	andeq	r7, r1, r4, lsr #11
   17600:	andeq	r7, r1, r4, lsr #11
   17604:	andeq	r7, r1, r4, lsr #11
   17608:	andeq	r7, r1, r4, lsr #11
   1760c:	andeq	r7, r1, r4, lsr #11
   17610:	andeq	r7, r1, r4, lsr #11
   17614:	andeq	r7, r1, r4, lsr #11
   17618:	andeq	r7, r1, r4, lsr #11
   1761c:	andeq	r7, r1, r4, lsr #11
   17620:	andeq	r7, r1, r4, lsr #11
   17624:	andeq	r7, r1, r4, lsr #11
   17628:	andeq	r7, r1, r4, lsr #11
   1762c:	andeq	r7, r1, r4, lsr #11
   17630:	andeq	r7, r1, r4, lsr #11
   17634:	andeq	r7, r1, r4, lsr #11
   17638:	andeq	r7, r1, r4, lsr #11
   1763c:	andeq	r7, r1, r4, lsr #11
   17640:	andeq	r7, r1, r4, lsr #11
   17644:	muleq	r1, r0, r5
   17648:	ldr	r0, [sp, #100]	; 0x64
   1764c:	bl	10f84 <iswprint@plt>
   17650:	cmp	r0, #0
   17654:	moveq	r5, #0
   17658:	add	r8, r8, r4
   1765c:	add	r0, sp, #104	; 0x68
   17660:	bl	10f30 <mbsinit@plt>
   17664:	cmp	r0, #0
   17668:	bne	176d8 <__assert_fail@plt+0x652c>
   1766c:	add	r7, r6, r8
   17670:	add	fp, r9, r7
   17674:	add	r3, sp, #104	; 0x68
   17678:	ldr	r2, [sp, #24]
   1767c:	sub	r2, r2, r7
   17680:	mov	r1, fp
   17684:	add	r0, sp, #100	; 0x64
   17688:	bl	19b1c <__assert_fail@plt+0x8970>
   1768c:	subs	r4, r0, #0
   17690:	beq	17728 <__assert_fail@plt+0x657c>
   17694:	cmn	r4, #1
   17698:	beq	176f0 <__assert_fail@plt+0x6544>
   1769c:	cmn	r4, #2
   176a0:	beq	17530 <__assert_fail@plt+0x6384>
   176a4:	ldr	r3, [sp, #32]
   176a8:	cmp	sl, #2
   176ac:	movne	r3, #0
   176b0:	andeq	r3, r3, #1
   176b4:	cmp	r3, #0
   176b8:	beq	17648 <__assert_fail@plt+0x649c>
   176bc:	cmp	r4, #1
   176c0:	bls	17648 <__assert_fail@plt+0x649c>
   176c4:	add	r2, r7, #1
   176c8:	add	r2, r9, r2
   176cc:	add	r3, r9, r4
   176d0:	add	r7, r3, r7
   176d4:	b	175ac <__assert_fail@plt+0x6400>
   176d8:	ldr	r4, [sp, #88]	; 0x58
   176dc:	mov	ip, r8
   176e0:	ldr	fp, [sp, #92]	; 0x5c
   176e4:	ldr	r8, [sp, #56]	; 0x38
   176e8:	ldr	r9, [sp, #84]	; 0x54
   176ec:	b	1773c <__assert_fail@plt+0x6590>
   176f0:	ldr	r4, [sp, #88]	; 0x58
   176f4:	mov	ip, r8
   176f8:	ldr	fp, [sp, #92]	; 0x5c
   176fc:	ldr	r8, [sp, #56]	; 0x38
   17700:	ldr	r9, [sp, #84]	; 0x54
   17704:	mov	r5, #0
   17708:	b	1773c <__assert_fail@plt+0x6590>
   1770c:	mov	r5, #0
   17710:	b	1773c <__assert_fail@plt+0x6590>
   17714:	mov	r5, #0
   17718:	b	1773c <__assert_fail@plt+0x6590>
   1771c:	mov	ip, r2
   17720:	mov	r5, #0
   17724:	b	1773c <__assert_fail@plt+0x6590>
   17728:	ldr	r4, [sp, #88]	; 0x58
   1772c:	mov	ip, r8
   17730:	ldr	fp, [sp, #92]	; 0x5c
   17734:	ldr	r8, [sp, #56]	; 0x38
   17738:	ldr	r9, [sp, #84]	; 0x54
   1773c:	cmp	ip, #1
   17740:	bls	174cc <__assert_fail@plt+0x6320>
   17744:	add	lr, r6, ip
   17748:	ldr	r3, [sp, #48]	; 0x30
   1774c:	add	r1, r3, r6
   17750:	mov	r3, #0
   17754:	eor	r0, r5, #1
   17758:	ldr	r2, [sp, #28]
   1775c:	and	r0, r0, r2
   17760:	uxtb	r0, r0
   17764:	str	r0, [sp, #56]	; 0x38
   17768:	mov	r7, #92	; 0x5c
   1776c:	ldr	ip, [sp, #36]	; 0x24
   17770:	str	r5, [sp, #84]	; 0x54
   17774:	ldr	r2, [sp, #44]	; 0x2c
   17778:	b	177e8 <__assert_fail@plt+0x663c>
   1777c:	cmp	r2, #0
   17780:	beq	17790 <__assert_fail@plt+0x65e4>
   17784:	cmp	r9, fp
   17788:	strbhi	r7, [r8, fp]
   1778c:	add	fp, fp, #1
   17790:	add	r5, r6, #1
   17794:	cmp	r5, lr
   17798:	bcs	178a4 <__assert_fail@plt+0x66f8>
   1779c:	eor	r2, r3, #1
   177a0:	and	r2, r2, ip
   177a4:	ands	r2, r2, #255	; 0xff
   177a8:	beq	178c0 <__assert_fail@plt+0x6714>
   177ac:	cmp	r9, fp
   177b0:	movhi	r2, #39	; 0x27
   177b4:	strbhi	r2, [r8, fp]
   177b8:	add	r2, fp, #1
   177bc:	cmp	r9, r2
   177c0:	movhi	ip, #39	; 0x27
   177c4:	strbhi	ip, [r8, r2]
   177c8:	add	fp, fp, #2
   177cc:	ldr	ip, [sp, #56]	; 0x38
   177d0:	mov	r2, ip
   177d4:	mov	r6, r5
   177d8:	cmp	r9, fp
   177dc:	strbhi	r4, [r8, fp]
   177e0:	add	fp, fp, #1
   177e4:	ldrb	r4, [r1, #1]!
   177e8:	cmp	r0, #0
   177ec:	beq	1777c <__assert_fail@plt+0x65d0>
   177f0:	ldr	r3, [sp, #32]
   177f4:	cmp	r3, #0
   177f8:	bne	17a8c <__assert_fail@plt+0x68e0>
   177fc:	eor	r3, ip, #1
   17800:	cmp	sl, #2
   17804:	movne	r3, #0
   17808:	andeq	r3, r3, #1
   1780c:	cmp	r3, #0
   17810:	beq	17848 <__assert_fail@plt+0x669c>
   17814:	cmp	r9, fp
   17818:	movhi	ip, #39	; 0x27
   1781c:	strbhi	ip, [r8, fp]
   17820:	add	ip, fp, #1
   17824:	cmp	r9, ip
   17828:	movhi	r5, #36	; 0x24
   1782c:	strbhi	r5, [r8, ip]
   17830:	add	ip, fp, #2
   17834:	cmp	r9, ip
   17838:	movhi	r5, #39	; 0x27
   1783c:	strbhi	r5, [r8, ip]
   17840:	add	fp, fp, #3
   17844:	mov	ip, r3
   17848:	cmp	r9, fp
   1784c:	strbhi	r7, [r8, fp]
   17850:	add	r3, fp, #1
   17854:	cmp	r9, r3
   17858:	bls	17868 <__assert_fail@plt+0x66bc>
   1785c:	lsr	r5, r4, #6
   17860:	add	r5, r5, #48	; 0x30
   17864:	strb	r5, [r8, r3]
   17868:	add	r3, fp, #2
   1786c:	cmp	r9, r3
   17870:	bls	17880 <__assert_fail@plt+0x66d4>
   17874:	ubfx	r5, r4, #3, #3
   17878:	add	r5, r5, #48	; 0x30
   1787c:	strb	r5, [r8, r3]
   17880:	add	fp, fp, #3
   17884:	and	r4, r4, #7
   17888:	add	r4, r4, #48	; 0x30
   1788c:	add	r5, r6, #1
   17890:	cmp	r5, lr
   17894:	bcs	178b0 <__assert_fail@plt+0x6704>
   17898:	ldr	r3, [sp, #56]	; 0x38
   1789c:	mov	r6, r5
   178a0:	b	177d8 <__assert_fail@plt+0x662c>
   178a4:	str	ip, [sp, #36]	; 0x24
   178a8:	ldr	r5, [sp, #84]	; 0x54
   178ac:	b	172dc <__assert_fail@plt+0x6130>
   178b0:	str	ip, [sp, #36]	; 0x24
   178b4:	ldr	r5, [sp, #84]	; 0x54
   178b8:	mov	r3, r0
   178bc:	b	172dc <__assert_fail@plt+0x6130>
   178c0:	mov	r6, r5
   178c4:	b	177d8 <__assert_fail@plt+0x662c>
   178c8:	ldr	r3, [sp, #44]	; 0x2c
   178cc:	b	16f30 <__assert_fail@plt+0x5d84>
   178d0:	mov	r5, #0
   178d4:	mov	r3, r5
   178d8:	mov	r4, #63	; 0x3f
   178dc:	b	16f30 <__assert_fail@plt+0x5d84>
   178e0:	mov	r5, #0
   178e4:	mov	r3, r5
   178e8:	mov	r4, #63	; 0x3f
   178ec:	b	16f30 <__assert_fail@plt+0x5d84>
   178f0:	mov	r5, #0
   178f4:	mov	r3, r5
   178f8:	b	16f30 <__assert_fail@plt+0x5d84>
   178fc:	mov	r5, #0
   17900:	mov	r3, r5
   17904:	b	16f30 <__assert_fail@plt+0x5d84>
   17908:	ldr	r5, [sp, #44]	; 0x2c
   1790c:	ldr	r3, [sp, #32]
   17910:	b	16f30 <__assert_fail@plt+0x5d84>
   17914:	ldr	r5, [sp, #44]	; 0x2c
   17918:	mov	r3, #0
   1791c:	str	r3, [sp, #44]	; 0x2c
   17920:	b	16f30 <__assert_fail@plt+0x5d84>
   17924:	mov	r4, r3
   17928:	mov	r5, #0
   1792c:	b	16f88 <__assert_fail@plt+0x5ddc>
   17930:	mov	r5, #0
   17934:	mov	r4, #97	; 0x61
   17938:	b	16f88 <__assert_fail@plt+0x5ddc>
   1793c:	mov	r5, #0
   17940:	mov	r3, r5
   17944:	mov	r4, #92	; 0x5c
   17948:	b	172dc <__assert_fail@plt+0x6130>
   1794c:	ldr	r3, [sp, #48]	; 0x30
   17950:	ldrb	r5, [r3, r6]
   17954:	adds	r5, r5, #0
   17958:	movne	r5, #1
   1795c:	b	1702c <__assert_fail@plt+0x5e80>
   17960:	cmp	sl, #2
   17964:	movne	r3, #0
   17968:	moveq	r3, #1
   1796c:	ldr	r1, [sp, #32]
   17970:	cmp	fp, #0
   17974:	andeq	r2, r3, r1
   17978:	movne	r2, #0
   1797c:	cmp	r2, #0
   17980:	bne	17aa0 <__assert_fail@plt+0x68f4>
   17984:	eor	r2, r1, #1
   17988:	uxtb	r2, r2
   1798c:	and	r3, r3, r2
   17990:	ldr	r1, [sp, #68]	; 0x44
   17994:	ands	r3, r1, r3
   17998:	beq	17a2c <__assert_fail@plt+0x6880>
   1799c:	ldr	r2, [sp, #40]	; 0x28
   179a0:	cmp	r2, #0
   179a4:	bne	179dc <__assert_fail@plt+0x6830>
   179a8:	ldr	r2, [sp, #72]	; 0x48
   179ac:	adds	r2, r2, #0
   179b0:	movne	r2, #1
   179b4:	cmp	r9, #0
   179b8:	movne	r2, #0
   179bc:	str	r2, [sp, #68]	; 0x44
   179c0:	mov	sl, #2
   179c4:	ldr	r1, [sp, #40]	; 0x28
   179c8:	str	r1, [sp, #32]
   179cc:	cmp	r2, #0
   179d0:	beq	17a20 <__assert_fail@plt+0x6874>
   179d4:	ldr	r9, [sp, #72]	; 0x48
   179d8:	b	16734 <__assert_fail@plt+0x5588>
   179dc:	ldr	r3, [sp, #168]	; 0xa8
   179e0:	str	r3, [sp, #16]
   179e4:	ldr	r3, [sp, #164]	; 0xa4
   179e8:	str	r3, [sp, #12]
   179ec:	ldr	r3, [sp, #160]	; 0xa0
   179f0:	str	r3, [sp, #8]
   179f4:	ldr	r3, [sp, #156]	; 0x9c
   179f8:	str	r3, [sp, #4]
   179fc:	mov	r3, #5
   17a00:	str	r3, [sp]
   17a04:	ldr	r3, [sp, #24]
   17a08:	ldr	r2, [sp, #48]	; 0x30
   17a0c:	ldr	r1, [sp, #72]	; 0x48
   17a10:	ldr	r0, [sp, #64]	; 0x40
   17a14:	bl	166bc <__assert_fail@plt+0x5510>
   17a18:	mov	fp, r0
   17a1c:	b	17b3c <__assert_fail@plt+0x6990>
   17a20:	mov	r8, r9
   17a24:	mov	r2, r3
   17a28:	b	17a30 <__assert_fail@plt+0x6884>
   17a2c:	mov	r8, r9
   17a30:	ldr	r3, [sp, #60]	; 0x3c
   17a34:	cmp	r3, #0
   17a38:	moveq	r2, #0
   17a3c:	andne	r2, r2, #1
   17a40:	cmp	r2, #0
   17a44:	beq	17a74 <__assert_fail@plt+0x68c8>
   17a48:	mov	r2, r3
   17a4c:	ldrb	r3, [r3]
   17a50:	cmp	r3, #0
   17a54:	beq	17a74 <__assert_fail@plt+0x68c8>
   17a58:	ldr	r1, [sp, #64]	; 0x40
   17a5c:	cmp	r8, fp
   17a60:	strbhi	r3, [r1, fp]
   17a64:	add	fp, fp, #1
   17a68:	ldrb	r3, [r2, #1]!
   17a6c:	cmp	r3, #0
   17a70:	bne	17a5c <__assert_fail@plt+0x68b0>
   17a74:	cmp	r8, fp
   17a78:	bls	17b3c <__assert_fail@plt+0x6990>
   17a7c:	mov	r3, #0
   17a80:	ldr	r2, [sp, #64]	; 0x40
   17a84:	strb	r3, [r2, fp]
   17a88:	b	17b3c <__assert_fail@plt+0x6990>
   17a8c:	mov	r8, r9
   17a90:	mov	r7, sl
   17a94:	ldr	r3, [sp, #32]
   17a98:	str	r3, [sp, #28]
   17a9c:	b	17ae4 <__assert_fail@plt+0x6938>
   17aa0:	mov	r8, r9
   17aa4:	mov	r7, #2
   17aa8:	b	17ae4 <__assert_fail@plt+0x6938>
   17aac:	mov	r8, r9
   17ab0:	mov	r7, sl
   17ab4:	b	17ae4 <__assert_fail@plt+0x6938>
   17ab8:	mov	r8, r9
   17abc:	mov	r7, sl
   17ac0:	b	17ae4 <__assert_fail@plt+0x6938>
   17ac4:	mov	r8, r9
   17ac8:	mov	r7, sl
   17acc:	b	17ae4 <__assert_fail@plt+0x6938>
   17ad0:	mov	r8, r9
   17ad4:	mov	r7, sl
   17ad8:	b	17ae4 <__assert_fail@plt+0x6938>
   17adc:	mov	r8, r9
   17ae0:	mov	r7, sl
   17ae4:	ldr	r3, [sp, #28]
   17ae8:	cmp	r7, #2
   17aec:	movne	r3, #0
   17af0:	andeq	r3, r3, #1
   17af4:	cmp	r3, #0
   17af8:	movne	r7, #4
   17afc:	ldr	r3, [sp, #168]	; 0xa8
   17b00:	str	r3, [sp, #16]
   17b04:	ldr	r3, [sp, #164]	; 0xa4
   17b08:	str	r3, [sp, #12]
   17b0c:	mov	r3, #0
   17b10:	str	r3, [sp, #8]
   17b14:	ldr	r3, [sp, #156]	; 0x9c
   17b18:	bic	r3, r3, #2
   17b1c:	str	r3, [sp, #4]
   17b20:	str	r7, [sp]
   17b24:	ldr	r3, [sp, #24]
   17b28:	ldr	r2, [sp, #48]	; 0x30
   17b2c:	mov	r1, r8
   17b30:	ldr	r0, [sp, #64]	; 0x40
   17b34:	bl	166bc <__assert_fail@plt+0x5510>
   17b38:	mov	fp, r0
   17b3c:	mov	r0, fp
   17b40:	add	sp, sp, #116	; 0x74
   17b44:	ldrd	r4, [sp]
   17b48:	ldrd	r6, [sp, #8]
   17b4c:	ldrd	r8, [sp, #16]
   17b50:	ldrd	sl, [sp, #24]
   17b54:	add	sp, sp, #32
   17b58:	pop	{pc}		; (ldr pc, [sp], #4)
   17b5c:	mov	r8, r9
   17b60:	mov	r7, sl
   17b64:	b	17afc <__assert_fail@plt+0x6950>
   17b68:	add	fp, fp, #4
   17b6c:	str	r3, [sp, #36]	; 0x24
   17b70:	mov	r5, #0
   17b74:	mov	r4, #48	; 0x30
   17b78:	b	16f30 <__assert_fail@plt+0x5d84>
   17b7c:	mov	r3, #1
   17b80:	str	r3, [sp, #32]
   17b84:	str	r3, [sp, #28]
   17b88:	str	r3, [sp, #52]	; 0x34
   17b8c:	movw	r3, #43740	; 0xaadc
   17b90:	movt	r3, #1
   17b94:	str	r3, [sp, #60]	; 0x3c
   17b98:	mov	fp, #0
   17b9c:	mov	sl, #5
   17ba0:	b	16794 <__assert_fail@plt+0x55e8>
   17ba4:	ldr	r3, [sp, #48]	; 0x30
   17ba8:	ldrb	r4, [r3, r6]
   17bac:	cmp	r4, #126	; 0x7e
   17bb0:	ldrls	pc, [pc, r4, lsl #2]
   17bb4:	b	174a0 <__assert_fail@plt+0x62f4>
   17bb8:	andeq	r6, r1, r8, lsr #24
   17bbc:	andeq	r7, r1, r0, lsr #9
   17bc0:	andeq	r7, r1, r0, lsr #9
   17bc4:	andeq	r7, r1, r0, lsr #9
   17bc8:	andeq	r7, r1, r0, lsr #9
   17bcc:	andeq	r7, r1, r0, lsr #9
   17bd0:	andeq	r7, r1, r0, lsr #9
   17bd4:	andeq	r7, r1, r0, lsr r9
   17bd8:	andeq	r6, r1, ip, asr #29
   17bdc:	andeq	r7, r1, r0, ror r2
   17be0:	andeq	r7, r1, ip, lsr #6
   17be4:	andeq	r7, r1, r4, lsl #5
   17be8:	andeq	r6, r1, r0, ror #29
   17bec:	strdeq	r6, [r1], -r4
   17bf0:	andeq	r7, r1, r0, lsr #9
   17bf4:	andeq	r7, r1, r0, lsr #9
   17bf8:	andeq	r7, r1, r0, lsr #9
   17bfc:	andeq	r7, r1, r0, lsr #9
   17c00:	andeq	r7, r1, r0, lsr #9
   17c04:	andeq	r7, r1, r0, lsr #9
   17c08:	andeq	r7, r1, r0, lsr #9
   17c0c:	andeq	r7, r1, r0, lsr #9
   17c10:	andeq	r7, r1, r0, lsr #9
   17c14:	andeq	r7, r1, r0, lsr #9
   17c18:	andeq	r7, r1, r0, lsr #9
   17c1c:	andeq	r7, r1, r0, lsr #9
   17c20:	andeq	r7, r1, r0, lsr #9
   17c24:	andeq	r7, r1, r0, lsr #9
   17c28:	andeq	r7, r1, r0, lsr #9
   17c2c:	andeq	r7, r1, r0, lsr #9
   17c30:	andeq	r7, r1, r0, lsr #9
   17c34:	andeq	r7, r1, r0, lsr #9
   17c38:			; <UNDEFINED> instruction: 0x000173b4
   17c3c:	strdeq	r7, [r1], -r0
   17c40:	strdeq	r7, [r1], -r0
   17c44:	andeq	r7, r1, r8, lsr #7
   17c48:	strdeq	r7, [r1], -r0
   17c4c:	andeq	r7, r1, r4, lsl r9
   17c50:	strdeq	r7, [r1], -r0
   17c54:	andeq	r7, r1, r0, lsl #8
   17c58:	strdeq	r7, [r1], -r0
   17c5c:	strdeq	r7, [r1], -r0
   17c60:	strdeq	r7, [r1], -r0
   17c64:	andeq	r7, r1, r4, lsl r9
   17c68:	andeq	r7, r1, r4, lsl r9
   17c6c:	andeq	r7, r1, r4, lsl r9
   17c70:	andeq	r7, r1, r4, lsl r9
   17c74:	andeq	r7, r1, r4, lsl r9
   17c78:	andeq	r7, r1, r4, lsl r9
   17c7c:	andeq	r7, r1, r4, lsl r9
   17c80:	andeq	r7, r1, r4, lsl r9
   17c84:	andeq	r7, r1, r4, lsl r9
   17c88:	andeq	r7, r1, r4, lsl r9
   17c8c:	andeq	r7, r1, r4, lsl r9
   17c90:	andeq	r7, r1, r4, lsl r9
   17c94:	andeq	r7, r1, r4, lsl r9
   17c98:	andeq	r7, r1, r4, lsl r9
   17c9c:	andeq	r7, r1, r4, lsl r9
   17ca0:	andeq	r7, r1, r4, lsl r9
   17ca4:	strdeq	r7, [r1], -r0
   17ca8:	strdeq	r7, [r1], -r0
   17cac:	strdeq	r7, [r1], -r0
   17cb0:	strdeq	r7, [r1], -r0
   17cb4:	andeq	r6, r1, r0, ror #26
   17cb8:	andeq	r7, r1, r0, lsr #9
   17cbc:	andeq	r7, r1, r4, lsl r9
   17cc0:	andeq	r7, r1, r4, lsl r9
   17cc4:	andeq	r7, r1, r4, lsl r9
   17cc8:	andeq	r7, r1, r4, lsl r9
   17ccc:	andeq	r7, r1, r4, lsl r9
   17cd0:	andeq	r7, r1, r4, lsl r9
   17cd4:	andeq	r7, r1, r4, lsl r9
   17cd8:	andeq	r7, r1, r4, lsl r9
   17cdc:	andeq	r7, r1, r4, lsl r9
   17ce0:	andeq	r7, r1, r4, lsl r9
   17ce4:	andeq	r7, r1, r4, lsl r9
   17ce8:	andeq	r7, r1, r4, lsl r9
   17cec:	andeq	r7, r1, r4, lsl r9
   17cf0:	andeq	r7, r1, r4, lsl r9
   17cf4:	andeq	r7, r1, r4, lsl r9
   17cf8:	andeq	r7, r1, r4, lsl r9
   17cfc:	andeq	r7, r1, r4, lsl r9
   17d00:	andeq	r7, r1, r4, lsl r9
   17d04:	andeq	r7, r1, r4, lsl r9
   17d08:	andeq	r7, r1, r4, lsl r9
   17d0c:	andeq	r7, r1, r4, lsl r9
   17d10:	andeq	r7, r1, r4, lsl r9
   17d14:	andeq	r7, r1, r4, lsl r9
   17d18:	andeq	r7, r1, r4, lsl r9
   17d1c:	andeq	r7, r1, r4, lsl r9
   17d20:	andeq	r7, r1, r4, lsl r9
   17d24:	strdeq	r7, [r1], -r0
   17d28:	muleq	r1, r8, r2
   17d2c:	andeq	r7, r1, r4, lsl r9
   17d30:	strdeq	r7, [r1], -r0
   17d34:	andeq	r7, r1, r4, lsl r9
   17d38:	strdeq	r7, [r1], -r0
   17d3c:	andeq	r7, r1, r4, lsl r9
   17d40:	andeq	r7, r1, r4, lsl r9
   17d44:	andeq	r7, r1, r4, lsl r9
   17d48:	andeq	r7, r1, r4, lsl r9
   17d4c:	andeq	r7, r1, r4, lsl r9
   17d50:	andeq	r7, r1, r4, lsl r9
   17d54:	andeq	r7, r1, r4, lsl r9
   17d58:	andeq	r7, r1, r4, lsl r9
   17d5c:	andeq	r7, r1, r4, lsl r9
   17d60:	andeq	r7, r1, r4, lsl r9
   17d64:	andeq	r7, r1, r4, lsl r9
   17d68:	andeq	r7, r1, r4, lsl r9
   17d6c:	andeq	r7, r1, r4, lsl r9
   17d70:	andeq	r7, r1, r4, lsl r9
   17d74:	andeq	r7, r1, r4, lsl r9
   17d78:	andeq	r7, r1, r4, lsl r9
   17d7c:	andeq	r7, r1, r4, lsl r9
   17d80:	andeq	r7, r1, r4, lsl r9
   17d84:	andeq	r7, r1, r4, lsl r9
   17d88:	andeq	r7, r1, r4, lsl r9
   17d8c:	andeq	r7, r1, r4, lsl r9
   17d90:	andeq	r7, r1, r4, lsl r9
   17d94:	andeq	r7, r1, r4, lsl r9
   17d98:	andeq	r7, r1, r4, lsl r9
   17d9c:	andeq	r7, r1, r4, lsl r9
   17da0:	andeq	r7, r1, r4, lsl r9
   17da4:	andeq	r7, r1, r8, asr r3
   17da8:	strdeq	r7, [r1], -r0
   17dac:	andeq	r7, r1, r8, asr r3
   17db0:	andeq	r7, r1, r8, lsr #7
   17db4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17db8:	strd	r6, [sp, #8]
   17dbc:	strd	r8, [sp, #16]
   17dc0:	strd	sl, [sp, #24]
   17dc4:	str	lr, [sp, #32]
   17dc8:	sub	sp, sp, #52	; 0x34
   17dcc:	mov	r5, r0
   17dd0:	str	r1, [sp, #24]
   17dd4:	str	r2, [sp, #28]
   17dd8:	mov	r4, r3
   17ddc:	bl	11068 <__errno_location@plt>
   17de0:	str	r0, [sp, #32]
   17de4:	ldr	r3, [r0]
   17de8:	str	r3, [sp, #36]	; 0x24
   17dec:	movw	r3, #45348	; 0xb124
   17df0:	movt	r3, #2
   17df4:	ldr	r6, [r3]
   17df8:	cmn	r5, #-2147483647	; 0x80000001
   17dfc:	movne	r3, #0
   17e00:	moveq	r3, #1
   17e04:	orrs	r3, r3, r5, lsr #31
   17e08:	bne	17f6c <__assert_fail@plt+0x6dc0>
   17e0c:	movw	r3, #45348	; 0xb124
   17e10:	movt	r3, #2
   17e14:	ldr	r2, [r3, #4]
   17e18:	cmp	r2, r5
   17e1c:	bgt	17e8c <__assert_fail@plt+0x6ce0>
   17e20:	str	r2, [sp, #44]	; 0x2c
   17e24:	add	r3, r3, #8
   17e28:	cmp	r6, r3
   17e2c:	beq	17f70 <__assert_fail@plt+0x6dc4>
   17e30:	sub	r2, r5, r2
   17e34:	mov	r3, #8
   17e38:	str	r3, [sp]
   17e3c:	mvn	r3, #-2147483648	; 0x80000000
   17e40:	add	r2, r2, #1
   17e44:	add	r1, sp, #44	; 0x2c
   17e48:	mov	r0, r6
   17e4c:	bl	19024 <__assert_fail@plt+0x7e78>
   17e50:	mov	r6, r0
   17e54:	movw	r3, #45348	; 0xb124
   17e58:	movt	r3, #2
   17e5c:	str	r0, [r3]
   17e60:	movw	r7, #45348	; 0xb124
   17e64:	movt	r7, #2
   17e68:	ldr	r0, [r7, #4]
   17e6c:	ldr	r2, [sp, #44]	; 0x2c
   17e70:	sub	r2, r2, r0
   17e74:	lsl	r2, r2, #3
   17e78:	mov	r1, #0
   17e7c:	add	r0, r6, r0, lsl #3
   17e80:	bl	1108c <memset@plt>
   17e84:	ldr	r3, [sp, #44]	; 0x2c
   17e88:	str	r3, [r7, #4]
   17e8c:	add	fp, r6, r5, lsl #3
   17e90:	ldr	r8, [r6, r5, lsl #3]
   17e94:	ldr	r7, [fp, #4]
   17e98:	ldr	r3, [r4, #4]
   17e9c:	orr	r9, r3, #1
   17ea0:	add	sl, r4, #8
   17ea4:	ldr	r3, [r4, #44]	; 0x2c
   17ea8:	str	r3, [sp, #16]
   17eac:	ldr	r3, [r4, #40]	; 0x28
   17eb0:	str	r3, [sp, #12]
   17eb4:	str	sl, [sp, #8]
   17eb8:	str	r9, [sp, #4]
   17ebc:	ldr	r3, [r4]
   17ec0:	str	r3, [sp]
   17ec4:	ldr	r3, [sp, #28]
   17ec8:	ldr	r2, [sp, #24]
   17ecc:	mov	r1, r8
   17ed0:	mov	r0, r7
   17ed4:	bl	166bc <__assert_fail@plt+0x5510>
   17ed8:	cmp	r8, r0
   17edc:	bhi	17f40 <__assert_fail@plt+0x6d94>
   17ee0:	add	r8, r0, #1
   17ee4:	str	r8, [r6, r5, lsl #3]
   17ee8:	movw	r3, #45496	; 0xb1b8
   17eec:	movt	r3, #2
   17ef0:	cmp	r7, r3
   17ef4:	beq	17f00 <__assert_fail@plt+0x6d54>
   17ef8:	mov	r0, r7
   17efc:	bl	199b8 <__assert_fail@plt+0x880c>
   17f00:	mov	r0, r8
   17f04:	bl	18e20 <__assert_fail@plt+0x7c74>
   17f08:	mov	r7, r0
   17f0c:	str	r0, [fp, #4]
   17f10:	ldr	r3, [r4, #44]	; 0x2c
   17f14:	str	r3, [sp, #16]
   17f18:	ldr	r3, [r4, #40]	; 0x28
   17f1c:	str	r3, [sp, #12]
   17f20:	str	sl, [sp, #8]
   17f24:	str	r9, [sp, #4]
   17f28:	ldr	r3, [r4]
   17f2c:	str	r3, [sp]
   17f30:	ldr	r3, [sp, #28]
   17f34:	ldr	r2, [sp, #24]
   17f38:	mov	r1, r8
   17f3c:	bl	166bc <__assert_fail@plt+0x5510>
   17f40:	ldr	r3, [sp, #32]
   17f44:	ldr	r2, [sp, #36]	; 0x24
   17f48:	str	r2, [r3]
   17f4c:	mov	r0, r7
   17f50:	add	sp, sp, #52	; 0x34
   17f54:	ldrd	r4, [sp]
   17f58:	ldrd	r6, [sp, #8]
   17f5c:	ldrd	r8, [sp, #16]
   17f60:	ldrd	sl, [sp, #24]
   17f64:	add	sp, sp, #32
   17f68:	pop	{pc}		; (ldr pc, [sp], #4)
   17f6c:	bl	1117c <abort@plt>
   17f70:	sub	r2, r5, r2
   17f74:	mov	r3, #8
   17f78:	str	r3, [sp]
   17f7c:	mvn	r3, #-2147483648	; 0x80000000
   17f80:	add	r2, r2, #1
   17f84:	add	r1, sp, #44	; 0x2c
   17f88:	mov	r0, #0
   17f8c:	bl	19024 <__assert_fail@plt+0x7e78>
   17f90:	mov	r6, r0
   17f94:	movw	r3, #45348	; 0xb124
   17f98:	movt	r3, #2
   17f9c:	str	r0, [r3]
   17fa0:	ldrd	r2, [r3, #8]
   17fa4:	strd	r2, [r0]
   17fa8:	b	17e60 <__assert_fail@plt+0x6cb4>
   17fac:	strd	r4, [sp, #-16]!
   17fb0:	str	r6, [sp, #8]
   17fb4:	str	lr, [sp, #12]
   17fb8:	mov	r4, r0
   17fbc:	bl	11068 <__errno_location@plt>
   17fc0:	mov	r5, r0
   17fc4:	ldr	r6, [r0]
   17fc8:	cmp	r4, #0
   17fcc:	ldr	r3, [pc, #32]	; 17ff4 <__assert_fail@plt+0x6e48>
   17fd0:	moveq	r4, r3
   17fd4:	mov	r1, #48	; 0x30
   17fd8:	mov	r0, r4
   17fdc:	bl	19194 <__assert_fail@plt+0x7fe8>
   17fe0:	str	r6, [r5]
   17fe4:	ldrd	r4, [sp]
   17fe8:	ldr	r6, [sp, #8]
   17fec:	add	sp, sp, #12
   17ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff4:			; <UNDEFINED> instruction: 0x0002b2b8
   17ff8:	subs	r3, r0, #0
   17ffc:	ldr	r2, [pc, #8]	; 1800c <__assert_fail@plt+0x6e60>
   18000:	moveq	r3, r2
   18004:	ldr	r0, [r3]
   18008:	bx	lr
   1800c:			; <UNDEFINED> instruction: 0x0002b2b8
   18010:	subs	r3, r0, #0
   18014:	ldr	r2, [pc, #8]	; 18024 <__assert_fail@plt+0x6e78>
   18018:	moveq	r3, r2
   1801c:	str	r1, [r3]
   18020:	bx	lr
   18024:			; <UNDEFINED> instruction: 0x0002b2b8
   18028:	push	{lr}		; (str lr, [sp, #-4]!)
   1802c:	subs	r3, r0, #0
   18030:	ldr	r0, [pc, #44]	; 18064 <__assert_fail@plt+0x6eb8>
   18034:	moveq	r3, r0
   18038:	add	r3, r3, #8
   1803c:	lsr	lr, r1, #5
   18040:	and	r1, r1, #31
   18044:	ldr	ip, [r3, lr, lsl #2]
   18048:	lsr	r0, ip, r1
   1804c:	eor	r2, r2, r0
   18050:	and	r2, r2, #1
   18054:	eor	r1, ip, r2, lsl r1
   18058:	str	r1, [r3, lr, lsl #2]
   1805c:	and	r0, r0, #1
   18060:	pop	{pc}		; (ldr pc, [sp], #4)
   18064:			; <UNDEFINED> instruction: 0x0002b2b8
   18068:	subs	r3, r0, #0
   1806c:	ldr	r2, [pc, #12]	; 18080 <__assert_fail@plt+0x6ed4>
   18070:	moveq	r3, r2
   18074:	ldr	r0, [r3, #4]
   18078:	str	r1, [r3, #4]
   1807c:	bx	lr
   18080:			; <UNDEFINED> instruction: 0x0002b2b8
   18084:	subs	r3, r0, #0
   18088:	ldr	r0, [pc, #44]	; 180bc <__assert_fail@plt+0x6f10>
   1808c:	moveq	r3, r0
   18090:	mov	r0, #10
   18094:	str	r0, [r3]
   18098:	cmp	r2, #0
   1809c:	cmpne	r1, #0
   180a0:	beq	180b0 <__assert_fail@plt+0x6f04>
   180a4:	str	r1, [r3, #40]	; 0x28
   180a8:	str	r2, [r3, #44]	; 0x2c
   180ac:	bx	lr
   180b0:	str	r4, [sp, #-8]!
   180b4:	str	lr, [sp, #4]
   180b8:	bl	1117c <abort@plt>
   180bc:			; <UNDEFINED> instruction: 0x0002b2b8
   180c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   180c4:	strd	r6, [sp, #8]
   180c8:	strd	r8, [sp, #16]
   180cc:	str	sl, [sp, #24]
   180d0:	str	lr, [sp, #28]
   180d4:	sub	sp, sp, #24
   180d8:	mov	r7, r0
   180dc:	mov	r8, r1
   180e0:	mov	r9, r2
   180e4:	mov	sl, r3
   180e8:	ldr	r4, [sp, #56]	; 0x38
   180ec:	cmp	r4, #0
   180f0:	ldr	r3, [pc, #104]	; 18160 <__assert_fail@plt+0x6fb4>
   180f4:	moveq	r4, r3
   180f8:	bl	11068 <__errno_location@plt>
   180fc:	mov	r5, r0
   18100:	ldr	r6, [r0]
   18104:	ldr	r3, [r4, #44]	; 0x2c
   18108:	str	r3, [sp, #16]
   1810c:	ldr	r3, [r4, #40]	; 0x28
   18110:	str	r3, [sp, #12]
   18114:	add	r3, r4, #8
   18118:	str	r3, [sp, #8]
   1811c:	ldr	r3, [r4, #4]
   18120:	str	r3, [sp, #4]
   18124:	ldr	r3, [r4]
   18128:	str	r3, [sp]
   1812c:	mov	r3, sl
   18130:	mov	r2, r9
   18134:	mov	r1, r8
   18138:	mov	r0, r7
   1813c:	bl	166bc <__assert_fail@plt+0x5510>
   18140:	str	r6, [r5]
   18144:	add	sp, sp, #24
   18148:	ldrd	r4, [sp]
   1814c:	ldrd	r6, [sp, #8]
   18150:	ldrd	r8, [sp, #16]
   18154:	ldr	sl, [sp, #24]
   18158:	add	sp, sp, #28
   1815c:	pop	{pc}		; (ldr pc, [sp], #4)
   18160:			; <UNDEFINED> instruction: 0x0002b2b8
   18164:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18168:	strd	r6, [sp, #8]
   1816c:	strd	r8, [sp, #16]
   18170:	strd	sl, [sp, #24]
   18174:	str	lr, [sp, #32]
   18178:	sub	sp, sp, #44	; 0x2c
   1817c:	mov	r8, r0
   18180:	mov	sl, r1
   18184:	mov	r6, r2
   18188:	subs	r4, r3, #0
   1818c:	ldr	r3, [pc, #200]	; 1825c <__assert_fail@plt+0x70b0>
   18190:	moveq	r4, r3
   18194:	bl	11068 <__errno_location@plt>
   18198:	mov	r7, r0
   1819c:	ldr	fp, [r0]
   181a0:	ldr	r5, [r4, #4]
   181a4:	cmp	r6, #0
   181a8:	orreq	r5, r5, #1
   181ac:	add	r9, r4, #8
   181b0:	ldr	r3, [r4, #44]	; 0x2c
   181b4:	str	r3, [sp, #16]
   181b8:	ldr	r3, [r4, #40]	; 0x28
   181bc:	str	r3, [sp, #12]
   181c0:	str	r9, [sp, #8]
   181c4:	str	r5, [sp, #4]
   181c8:	ldr	r3, [r4]
   181cc:	str	r3, [sp]
   181d0:	str	sl, [sp, #36]	; 0x24
   181d4:	mov	r3, sl
   181d8:	str	r8, [sp, #32]
   181dc:	mov	r2, r8
   181e0:	mov	r1, #0
   181e4:	mov	r0, r1
   181e8:	bl	166bc <__assert_fail@plt+0x5510>
   181ec:	mov	sl, r0
   181f0:	add	r8, r0, #1
   181f4:	mov	r0, r8
   181f8:	bl	18e20 <__assert_fail@plt+0x7c74>
   181fc:	str	r0, [sp, #28]
   18200:	ldr	r3, [r4, #44]	; 0x2c
   18204:	str	r3, [sp, #16]
   18208:	ldr	r3, [r4, #40]	; 0x28
   1820c:	str	r3, [sp, #12]
   18210:	str	r9, [sp, #8]
   18214:	str	r5, [sp, #4]
   18218:	ldr	r3, [r4]
   1821c:	str	r3, [sp]
   18220:	ldr	r3, [sp, #36]	; 0x24
   18224:	ldr	r2, [sp, #32]
   18228:	mov	r1, r8
   1822c:	bl	166bc <__assert_fail@plt+0x5510>
   18230:	str	fp, [r7]
   18234:	cmp	r6, #0
   18238:	strne	sl, [r6]
   1823c:	ldr	r0, [sp, #28]
   18240:	add	sp, sp, #44	; 0x2c
   18244:	ldrd	r4, [sp]
   18248:	ldrd	r6, [sp, #8]
   1824c:	ldrd	r8, [sp, #16]
   18250:	ldrd	sl, [sp, #24]
   18254:	add	sp, sp, #32
   18258:	pop	{pc}		; (ldr pc, [sp], #4)
   1825c:			; <UNDEFINED> instruction: 0x0002b2b8
   18260:	str	r4, [sp, #-8]!
   18264:	str	lr, [sp, #4]
   18268:	mov	r3, r2
   1826c:	mov	r2, #0
   18270:	bl	18164 <__assert_fail@plt+0x6fb8>
   18274:	ldr	r4, [sp]
   18278:	add	sp, sp, #4
   1827c:	pop	{pc}		; (ldr pc, [sp], #4)
   18280:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18284:	strd	r6, [sp, #8]
   18288:	str	r8, [sp, #16]
   1828c:	str	lr, [sp, #20]
   18290:	movw	r3, #45348	; 0xb124
   18294:	movt	r3, #2
   18298:	ldr	r7, [r3]
   1829c:	ldr	r3, [r3, #4]
   182a0:	cmp	r3, #1
   182a4:	ble	182d0 <__assert_fail@plt+0x7124>
   182a8:	mov	r4, #1
   182ac:	add	r6, r7, #4
   182b0:	movw	r5, #45348	; 0xb124
   182b4:	movt	r5, #2
   182b8:	ldr	r0, [r6, r4, lsl #3]
   182bc:	bl	199b8 <__assert_fail@plt+0x880c>
   182c0:	add	r4, r4, #1
   182c4:	ldr	r3, [r5, #4]
   182c8:	cmp	r3, r4
   182cc:	bgt	182b8 <__assert_fail@plt+0x710c>
   182d0:	ldr	r0, [r7, #4]
   182d4:	movw	r3, #45496	; 0xb1b8
   182d8:	movt	r3, #2
   182dc:	cmp	r0, r3
   182e0:	beq	18304 <__assert_fail@plt+0x7158>
   182e4:	bl	199b8 <__assert_fail@plt+0x880c>
   182e8:	movw	r3, #45348	; 0xb124
   182ec:	movt	r3, #2
   182f0:	mov	r2, #256	; 0x100
   182f4:	str	r2, [r3, #8]
   182f8:	movw	r2, #45496	; 0xb1b8
   182fc:	movt	r2, #2
   18300:	str	r2, [r3, #12]
   18304:	ldr	r3, [pc, #64]	; 1834c <__assert_fail@plt+0x71a0>
   18308:	cmp	r7, r3
   1830c:	beq	18328 <__assert_fail@plt+0x717c>
   18310:	mov	r0, r7
   18314:	bl	199b8 <__assert_fail@plt+0x880c>
   18318:	movw	r3, #45348	; 0xb124
   1831c:	movt	r3, #2
   18320:	add	r2, r3, #8
   18324:	str	r2, [r3]
   18328:	movw	r3, #45348	; 0xb124
   1832c:	movt	r3, #2
   18330:	mov	r2, #1
   18334:	str	r2, [r3, #4]
   18338:	ldrd	r4, [sp]
   1833c:	ldrd	r6, [sp, #8]
   18340:	ldr	r8, [sp, #16]
   18344:	add	sp, sp, #20
   18348:	pop	{pc}		; (ldr pc, [sp], #4)
   1834c:	andeq	fp, r2, ip, lsr #2
   18350:	str	r4, [sp, #-8]!
   18354:	str	lr, [sp, #4]
   18358:	ldr	r3, [pc, #16]	; 18370 <__assert_fail@plt+0x71c4>
   1835c:	mvn	r2, #0
   18360:	bl	17db4 <__assert_fail@plt+0x6c08>
   18364:	ldr	r4, [sp]
   18368:	add	sp, sp, #4
   1836c:	pop	{pc}		; (ldr pc, [sp], #4)
   18370:			; <UNDEFINED> instruction: 0x0002b2b8
   18374:	str	r4, [sp, #-8]!
   18378:	str	lr, [sp, #4]
   1837c:	ldr	r3, [pc, #12]	; 18390 <__assert_fail@plt+0x71e4>
   18380:	bl	17db4 <__assert_fail@plt+0x6c08>
   18384:	ldr	r4, [sp]
   18388:	add	sp, sp, #4
   1838c:	pop	{pc}		; (ldr pc, [sp], #4)
   18390:			; <UNDEFINED> instruction: 0x0002b2b8
   18394:	str	r4, [sp, #-8]!
   18398:	str	lr, [sp, #4]
   1839c:	mov	r1, r0
   183a0:	mov	r0, #0
   183a4:	bl	18350 <__assert_fail@plt+0x71a4>
   183a8:	ldr	r4, [sp]
   183ac:	add	sp, sp, #4
   183b0:	pop	{pc}		; (ldr pc, [sp], #4)
   183b4:	str	r4, [sp, #-8]!
   183b8:	str	lr, [sp, #4]
   183bc:	mov	r2, r1
   183c0:	mov	r1, r0
   183c4:	mov	r0, #0
   183c8:	bl	18374 <__assert_fail@plt+0x71c8>
   183cc:	ldr	r4, [sp]
   183d0:	add	sp, sp, #4
   183d4:	pop	{pc}		; (ldr pc, [sp], #4)
   183d8:	strd	r4, [sp, #-12]!
   183dc:	str	lr, [sp, #8]
   183e0:	sub	sp, sp, #52	; 0x34
   183e4:	mov	r4, r0
   183e8:	mov	r5, r2
   183ec:	mov	r0, sp
   183f0:	bl	16528 <__assert_fail@plt+0x537c>
   183f4:	mov	r3, sp
   183f8:	mvn	r2, #0
   183fc:	mov	r1, r5
   18400:	mov	r0, r4
   18404:	bl	17db4 <__assert_fail@plt+0x6c08>
   18408:	add	sp, sp, #52	; 0x34
   1840c:	ldrd	r4, [sp]
   18410:	add	sp, sp, #8
   18414:	pop	{pc}		; (ldr pc, [sp], #4)
   18418:	strd	r4, [sp, #-16]!
   1841c:	str	r6, [sp, #8]
   18420:	str	lr, [sp, #12]
   18424:	sub	sp, sp, #48	; 0x30
   18428:	mov	r4, r0
   1842c:	mov	r5, r2
   18430:	mov	r6, r3
   18434:	mov	r0, sp
   18438:	bl	16528 <__assert_fail@plt+0x537c>
   1843c:	mov	r3, sp
   18440:	mov	r2, r6
   18444:	mov	r1, r5
   18448:	mov	r0, r4
   1844c:	bl	17db4 <__assert_fail@plt+0x6c08>
   18450:	add	sp, sp, #48	; 0x30
   18454:	ldrd	r4, [sp]
   18458:	ldr	r6, [sp, #8]
   1845c:	add	sp, sp, #12
   18460:	pop	{pc}		; (ldr pc, [sp], #4)
   18464:	str	r4, [sp, #-8]!
   18468:	str	lr, [sp, #4]
   1846c:	mov	r2, r1
   18470:	mov	r1, r0
   18474:	mov	r0, #0
   18478:	bl	183d8 <__assert_fail@plt+0x722c>
   1847c:	ldr	r4, [sp]
   18480:	add	sp, sp, #4
   18484:	pop	{pc}		; (ldr pc, [sp], #4)
   18488:	str	r4, [sp, #-8]!
   1848c:	str	lr, [sp, #4]
   18490:	mov	r3, r2
   18494:	mov	r2, r1
   18498:	mov	r1, r0
   1849c:	mov	r0, #0
   184a0:	bl	18418 <__assert_fail@plt+0x726c>
   184a4:	ldr	r4, [sp]
   184a8:	add	sp, sp, #4
   184ac:	pop	{pc}		; (ldr pc, [sp], #4)
   184b0:	strd	r4, [sp, #-12]!
   184b4:	str	lr, [sp, #8]
   184b8:	sub	sp, sp, #52	; 0x34
   184bc:	mov	r4, r0
   184c0:	mov	r5, r1
   184c4:	mov	r1, r2
   184c8:	ldr	r0, [pc, #92]	; 1852c <__assert_fail@plt+0x7380>
   184cc:	ldrd	r2, [r0]
   184d0:	strd	r2, [sp]
   184d4:	ldrd	r2, [r0, #8]
   184d8:	strd	r2, [sp, #8]
   184dc:	ldrd	r2, [r0, #16]
   184e0:	strd	r2, [sp, #16]
   184e4:	ldrd	r2, [r0, #24]
   184e8:	strd	r2, [sp, #24]
   184ec:	ldrd	r2, [r0, #32]
   184f0:	strd	r2, [sp, #32]
   184f4:	ldrd	r2, [r0, #40]	; 0x28
   184f8:	strd	r2, [sp, #40]	; 0x28
   184fc:	mov	r2, #1
   18500:	mov	r0, sp
   18504:	bl	18028 <__assert_fail@plt+0x6e7c>
   18508:	mov	r3, sp
   1850c:	mov	r2, r5
   18510:	mov	r1, r4
   18514:	mov	r0, #0
   18518:	bl	17db4 <__assert_fail@plt+0x6c08>
   1851c:	add	sp, sp, #52	; 0x34
   18520:	ldrd	r4, [sp]
   18524:	add	sp, sp, #8
   18528:	pop	{pc}		; (ldr pc, [sp], #4)
   1852c:			; <UNDEFINED> instruction: 0x0002b2b8
   18530:	str	r4, [sp, #-8]!
   18534:	str	lr, [sp, #4]
   18538:	mov	r2, r1
   1853c:	mvn	r1, #0
   18540:	bl	184b0 <__assert_fail@plt+0x7304>
   18544:	ldr	r4, [sp]
   18548:	add	sp, sp, #4
   1854c:	pop	{pc}		; (ldr pc, [sp], #4)
   18550:	str	r4, [sp, #-8]!
   18554:	str	lr, [sp, #4]
   18558:	mov	r1, #58	; 0x3a
   1855c:	bl	18530 <__assert_fail@plt+0x7384>
   18560:	ldr	r4, [sp]
   18564:	add	sp, sp, #4
   18568:	pop	{pc}		; (ldr pc, [sp], #4)
   1856c:	str	r4, [sp, #-8]!
   18570:	str	lr, [sp, #4]
   18574:	mov	r2, #58	; 0x3a
   18578:	bl	184b0 <__assert_fail@plt+0x7304>
   1857c:	ldr	r4, [sp]
   18580:	add	sp, sp, #4
   18584:	pop	{pc}		; (ldr pc, [sp], #4)
   18588:	strd	r4, [sp, #-12]!
   1858c:	str	lr, [sp, #8]
   18590:	sub	sp, sp, #100	; 0x64
   18594:	mov	r4, r0
   18598:	mov	r5, r2
   1859c:	mov	r0, sp
   185a0:	bl	16528 <__assert_fail@plt+0x537c>
   185a4:	ldrd	r2, [sp]
   185a8:	strd	r2, [sp, #48]	; 0x30
   185ac:	ldrd	r2, [sp, #8]
   185b0:	strd	r2, [sp, #56]	; 0x38
   185b4:	ldrd	r2, [sp, #16]
   185b8:	strd	r2, [sp, #64]	; 0x40
   185bc:	ldrd	r2, [sp, #24]
   185c0:	strd	r2, [sp, #72]	; 0x48
   185c4:	ldrd	r2, [sp, #32]
   185c8:	strd	r2, [sp, #80]	; 0x50
   185cc:	ldrd	r2, [sp, #40]	; 0x28
   185d0:	strd	r2, [sp, #88]	; 0x58
   185d4:	mov	r2, #1
   185d8:	mov	r1, #58	; 0x3a
   185dc:	add	r0, sp, #48	; 0x30
   185e0:	bl	18028 <__assert_fail@plt+0x6e7c>
   185e4:	add	r3, sp, #48	; 0x30
   185e8:	mvn	r2, #0
   185ec:	mov	r1, r5
   185f0:	mov	r0, r4
   185f4:	bl	17db4 <__assert_fail@plt+0x6c08>
   185f8:	add	sp, sp, #100	; 0x64
   185fc:	ldrd	r4, [sp]
   18600:	add	sp, sp, #8
   18604:	pop	{pc}		; (ldr pc, [sp], #4)
   18608:	strd	r4, [sp, #-20]!	; 0xffffffec
   1860c:	strd	r6, [sp, #8]
   18610:	str	lr, [sp, #16]
   18614:	sub	sp, sp, #52	; 0x34
   18618:	mov	r4, r0
   1861c:	mov	r5, r3
   18620:	ldr	r3, [pc, #92]	; 18684 <__assert_fail@plt+0x74d8>
   18624:	ldrd	r6, [r3]
   18628:	strd	r6, [sp]
   1862c:	ldrd	r6, [r3, #8]
   18630:	strd	r6, [sp, #8]
   18634:	ldrd	r6, [r3, #16]
   18638:	strd	r6, [sp, #16]
   1863c:	ldrd	r6, [r3, #24]
   18640:	strd	r6, [sp, #24]
   18644:	ldrd	r6, [r3, #32]
   18648:	strd	r6, [sp, #32]
   1864c:	ldrd	r6, [r3, #40]	; 0x28
   18650:	strd	r6, [sp, #40]	; 0x28
   18654:	mov	r0, sp
   18658:	bl	18084 <__assert_fail@plt+0x6ed8>
   1865c:	mov	r3, sp
   18660:	ldr	r2, [sp, #72]	; 0x48
   18664:	mov	r1, r5
   18668:	mov	r0, r4
   1866c:	bl	17db4 <__assert_fail@plt+0x6c08>
   18670:	add	sp, sp, #52	; 0x34
   18674:	ldrd	r4, [sp]
   18678:	ldrd	r6, [sp, #8]
   1867c:	add	sp, sp, #16
   18680:	pop	{pc}		; (ldr pc, [sp], #4)
   18684:			; <UNDEFINED> instruction: 0x0002b2b8
   18688:	push	{lr}		; (str lr, [sp, #-4]!)
   1868c:	sub	sp, sp, #12
   18690:	mvn	ip, #0
   18694:	str	ip, [sp]
   18698:	bl	18608 <__assert_fail@plt+0x745c>
   1869c:	add	sp, sp, #12
   186a0:	pop	{pc}		; (ldr pc, [sp], #4)
   186a4:	str	r4, [sp, #-8]!
   186a8:	str	lr, [sp, #4]
   186ac:	mov	r3, r2
   186b0:	mov	r2, r1
   186b4:	mov	r1, r0
   186b8:	mov	r0, #0
   186bc:	bl	18688 <__assert_fail@plt+0x74dc>
   186c0:	ldr	r4, [sp]
   186c4:	add	sp, sp, #4
   186c8:	pop	{pc}		; (ldr pc, [sp], #4)
   186cc:	push	{lr}		; (str lr, [sp, #-4]!)
   186d0:	sub	sp, sp, #12
   186d4:	str	r3, [sp]
   186d8:	mov	r3, r2
   186dc:	mov	r2, r1
   186e0:	mov	r1, r0
   186e4:	mov	r0, #0
   186e8:	bl	18608 <__assert_fail@plt+0x745c>
   186ec:	add	sp, sp, #12
   186f0:	pop	{pc}		; (ldr pc, [sp], #4)
   186f4:	str	r4, [sp, #-8]!
   186f8:	str	lr, [sp, #4]
   186fc:	ldr	r3, [pc, #12]	; 18710 <__assert_fail@plt+0x7564>
   18700:	bl	17db4 <__assert_fail@plt+0x6c08>
   18704:	ldr	r4, [sp]
   18708:	add	sp, sp, #4
   1870c:	pop	{pc}		; (ldr pc, [sp], #4)
   18710:	andeq	fp, r2, r4, lsr r1
   18714:	str	r4, [sp, #-8]!
   18718:	str	lr, [sp, #4]
   1871c:	mov	r2, r1
   18720:	mov	r1, r0
   18724:	mov	r0, #0
   18728:	bl	186f4 <__assert_fail@plt+0x7548>
   1872c:	ldr	r4, [sp]
   18730:	add	sp, sp, #4
   18734:	pop	{pc}		; (ldr pc, [sp], #4)
   18738:	str	r4, [sp, #-8]!
   1873c:	str	lr, [sp, #4]
   18740:	mvn	r2, #0
   18744:	bl	186f4 <__assert_fail@plt+0x7548>
   18748:	ldr	r4, [sp]
   1874c:	add	sp, sp, #4
   18750:	pop	{pc}		; (ldr pc, [sp], #4)
   18754:	str	r4, [sp, #-8]!
   18758:	str	lr, [sp, #4]
   1875c:	mov	r1, r0
   18760:	mov	r0, #0
   18764:	bl	18738 <__assert_fail@plt+0x758c>
   18768:	ldr	r4, [sp]
   1876c:	add	sp, sp, #4
   18770:	pop	{pc}		; (ldr pc, [sp], #4)
   18774:	str	r4, [sp, #-8]!
   18778:	str	lr, [sp, #4]
   1877c:	sub	sp, sp, #104	; 0x68
   18780:	mov	r4, r0
   18784:	mov	r2, sp
   18788:	movw	r1, #42376	; 0xa588
   1878c:	movt	r1, #1
   18790:	mov	r0, #3
   18794:	bl	11194 <__lxstat64@plt>
   18798:	cmp	r0, #0
   1879c:	movne	r0, #0
   187a0:	bne	187b8 <__assert_fail@plt+0x760c>
   187a4:	ldrd	r2, [sp, #96]	; 0x60
   187a8:	strd	r2, [r4]
   187ac:	ldrd	r2, [sp]
   187b0:	strd	r2, [r4, #8]
   187b4:	mov	r0, r4
   187b8:	add	sp, sp, #104	; 0x68
   187bc:	ldr	r4, [sp]
   187c0:	add	sp, sp, #4
   187c4:	pop	{pc}		; (ldr pc, [sp], #4)
   187c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   187cc:	strd	r6, [sp, #8]
   187d0:	str	r8, [sp, #16]
   187d4:	str	lr, [sp, #20]
   187d8:	mov	r4, r0
   187dc:	cmp	r0, #2
   187e0:	bls	187fc <__assert_fail@plt+0x7650>
   187e4:	mov	r0, r4
   187e8:	ldrd	r4, [sp]
   187ec:	ldrd	r6, [sp, #8]
   187f0:	ldr	r8, [sp, #16]
   187f4:	add	sp, sp, #20
   187f8:	pop	{pc}		; (ldr pc, [sp], #4)
   187fc:	bl	19bc8 <__assert_fail@plt+0x8a1c>
   18800:	mov	r6, r0
   18804:	bl	11068 <__errno_location@plt>
   18808:	mov	r5, r0
   1880c:	ldr	r7, [r0]
   18810:	mov	r0, r4
   18814:	bl	11188 <close@plt>
   18818:	str	r7, [r5]
   1881c:	mov	r4, r6
   18820:	b	187e4 <__assert_fail@plt+0x7638>
   18824:	strd	r4, [sp, #-16]!
   18828:	str	r6, [sp, #8]
   1882c:	str	lr, [sp, #12]
   18830:	sub	sp, sp, #32
   18834:	mov	r4, r0
   18838:	ldr	r5, [sp, #48]	; 0x30
   1883c:	ldr	r6, [sp, #52]	; 0x34
   18840:	cmp	r1, #0
   18844:	beq	18910 <__assert_fail@plt+0x7764>
   18848:	str	r3, [sp, #4]
   1884c:	str	r2, [sp]
   18850:	mov	r3, r1
   18854:	movw	r2, #43868	; 0xab5c
   18858:	movt	r2, #1
   1885c:	mov	r1, #1
   18860:	bl	110b0 <__fprintf_chk@plt>
   18864:	mov	r2, #5
   18868:	movw	r1, #43888	; 0xab70
   1886c:	movt	r1, #1
   18870:	mov	r0, #0
   18874:	bl	10f54 <dcgettext@plt>
   18878:	movw	r3, #2022	; 0x7e6
   1887c:	str	r3, [sp]
   18880:	mov	r3, r0
   18884:	movw	r2, #44616	; 0xae48
   18888:	movt	r2, #1
   1888c:	mov	r1, #1
   18890:	mov	r0, r4
   18894:	bl	110b0 <__fprintf_chk@plt>
   18898:	mov	r1, r4
   1889c:	mov	r0, #10
   188a0:	bl	10f48 <fputc_unlocked@plt>
   188a4:	mov	r2, #5
   188a8:	movw	r1, #43892	; 0xab74
   188ac:	movt	r1, #1
   188b0:	mov	r0, #0
   188b4:	bl	10f54 <dcgettext@plt>
   188b8:	movw	r3, #44064	; 0xac20
   188bc:	movt	r3, #1
   188c0:	mov	r2, r0
   188c4:	mov	r1, #1
   188c8:	mov	r0, r4
   188cc:	bl	110b0 <__fprintf_chk@plt>
   188d0:	mov	r1, r4
   188d4:	mov	r0, #10
   188d8:	bl	10f48 <fputc_unlocked@plt>
   188dc:	cmp	r6, #9
   188e0:	ldrls	pc, [pc, r6, lsl #2]
   188e4:	b	18be8 <__assert_fail@plt+0x7a3c>
   188e8:	andeq	r8, r1, r4, asr r9
   188ec:	andeq	r8, r1, ip, lsr #18
   188f0:	andeq	r8, r1, r8, ror #18
   188f4:	muleq	r1, ip, r9
   188f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   188fc:	andeq	r8, r1, ip, lsl sl
   18900:	andeq	r8, r1, r8, ror #20
   18904:			; <UNDEFINED> instruction: 0x00018abc
   18908:	andeq	r8, r1, r8, lsl fp
   1890c:	andeq	r8, r1, ip, ror fp
   18910:	str	r3, [sp]
   18914:	mov	r3, r2
   18918:	movw	r2, #43880	; 0xab68
   1891c:	movt	r2, #1
   18920:	mov	r1, #1
   18924:	bl	110b0 <__fprintf_chk@plt>
   18928:	b	18864 <__assert_fail@plt+0x76b8>
   1892c:	mov	r2, #5
   18930:	movw	r1, #44100	; 0xac44
   18934:	movt	r1, #1
   18938:	mov	r0, #0
   1893c:	bl	10f54 <dcgettext@plt>
   18940:	ldr	r3, [r5]
   18944:	mov	r2, r0
   18948:	mov	r1, #1
   1894c:	mov	r0, r4
   18950:	bl	110b0 <__fprintf_chk@plt>
   18954:	add	sp, sp, #32
   18958:	ldrd	r4, [sp]
   1895c:	ldr	r6, [sp, #8]
   18960:	add	sp, sp, #12
   18964:	pop	{pc}		; (ldr pc, [sp], #4)
   18968:	mov	r2, #5
   1896c:	movw	r1, #44116	; 0xac54
   18970:	movt	r1, #1
   18974:	mov	r0, #0
   18978:	bl	10f54 <dcgettext@plt>
   1897c:	ldr	r3, [r5, #4]
   18980:	str	r3, [sp]
   18984:	ldr	r3, [r5]
   18988:	mov	r2, r0
   1898c:	mov	r1, #1
   18990:	mov	r0, r4
   18994:	bl	110b0 <__fprintf_chk@plt>
   18998:	b	18954 <__assert_fail@plt+0x77a8>
   1899c:	mov	r2, #5
   189a0:	movw	r1, #44140	; 0xac6c
   189a4:	movt	r1, #1
   189a8:	mov	r0, #0
   189ac:	bl	10f54 <dcgettext@plt>
   189b0:	ldr	r3, [r5, #8]
   189b4:	str	r3, [sp, #4]
   189b8:	ldr	r3, [r5, #4]
   189bc:	str	r3, [sp]
   189c0:	ldr	r3, [r5]
   189c4:	mov	r2, r0
   189c8:	mov	r1, #1
   189cc:	mov	r0, r4
   189d0:	bl	110b0 <__fprintf_chk@plt>
   189d4:	b	18954 <__assert_fail@plt+0x77a8>
   189d8:	mov	r2, #5
   189dc:	movw	r1, #44168	; 0xac88
   189e0:	movt	r1, #1
   189e4:	mov	r0, #0
   189e8:	bl	10f54 <dcgettext@plt>
   189ec:	ldr	r3, [r5, #12]
   189f0:	str	r3, [sp, #8]
   189f4:	ldr	r3, [r5, #8]
   189f8:	str	r3, [sp, #4]
   189fc:	ldr	r3, [r5, #4]
   18a00:	str	r3, [sp]
   18a04:	ldr	r3, [r5]
   18a08:	mov	r2, r0
   18a0c:	mov	r1, #1
   18a10:	mov	r0, r4
   18a14:	bl	110b0 <__fprintf_chk@plt>
   18a18:	b	18954 <__assert_fail@plt+0x77a8>
   18a1c:	mov	r2, #5
   18a20:	movw	r1, #44200	; 0xaca8
   18a24:	movt	r1, #1
   18a28:	mov	r0, #0
   18a2c:	bl	10f54 <dcgettext@plt>
   18a30:	ldr	r3, [r5, #16]
   18a34:	str	r3, [sp, #12]
   18a38:	ldr	r3, [r5, #12]
   18a3c:	str	r3, [sp, #8]
   18a40:	ldr	r3, [r5, #8]
   18a44:	str	r3, [sp, #4]
   18a48:	ldr	r3, [r5, #4]
   18a4c:	str	r3, [sp]
   18a50:	ldr	r3, [r5]
   18a54:	mov	r2, r0
   18a58:	mov	r1, #1
   18a5c:	mov	r0, r4
   18a60:	bl	110b0 <__fprintf_chk@plt>
   18a64:	b	18954 <__assert_fail@plt+0x77a8>
   18a68:	mov	r2, #5
   18a6c:	movw	r1, #44236	; 0xaccc
   18a70:	movt	r1, #1
   18a74:	mov	r0, #0
   18a78:	bl	10f54 <dcgettext@plt>
   18a7c:	ldr	r3, [r5, #20]
   18a80:	str	r3, [sp, #16]
   18a84:	ldr	r3, [r5, #16]
   18a88:	str	r3, [sp, #12]
   18a8c:	ldr	r3, [r5, #12]
   18a90:	str	r3, [sp, #8]
   18a94:	ldr	r3, [r5, #8]
   18a98:	str	r3, [sp, #4]
   18a9c:	ldr	r3, [r5, #4]
   18aa0:	str	r3, [sp]
   18aa4:	ldr	r3, [r5]
   18aa8:	mov	r2, r0
   18aac:	mov	r1, #1
   18ab0:	mov	r0, r4
   18ab4:	bl	110b0 <__fprintf_chk@plt>
   18ab8:	b	18954 <__assert_fail@plt+0x77a8>
   18abc:	mov	r2, #5
   18ac0:	movw	r1, #44276	; 0xacf4
   18ac4:	movt	r1, #1
   18ac8:	mov	r0, #0
   18acc:	bl	10f54 <dcgettext@plt>
   18ad0:	ldr	r3, [r5, #24]
   18ad4:	str	r3, [sp, #20]
   18ad8:	ldr	r3, [r5, #20]
   18adc:	str	r3, [sp, #16]
   18ae0:	ldr	r3, [r5, #16]
   18ae4:	str	r3, [sp, #12]
   18ae8:	ldr	r3, [r5, #12]
   18aec:	str	r3, [sp, #8]
   18af0:	ldr	r3, [r5, #8]
   18af4:	str	r3, [sp, #4]
   18af8:	ldr	r3, [r5, #4]
   18afc:	str	r3, [sp]
   18b00:	ldr	r3, [r5]
   18b04:	mov	r2, r0
   18b08:	mov	r1, #1
   18b0c:	mov	r0, r4
   18b10:	bl	110b0 <__fprintf_chk@plt>
   18b14:	b	18954 <__assert_fail@plt+0x77a8>
   18b18:	mov	r2, #5
   18b1c:	movw	r1, #44320	; 0xad20
   18b20:	movt	r1, #1
   18b24:	mov	r0, #0
   18b28:	bl	10f54 <dcgettext@plt>
   18b2c:	ldr	r3, [r5, #28]
   18b30:	str	r3, [sp, #24]
   18b34:	ldr	r3, [r5, #24]
   18b38:	str	r3, [sp, #20]
   18b3c:	ldr	r3, [r5, #20]
   18b40:	str	r3, [sp, #16]
   18b44:	ldr	r3, [r5, #16]
   18b48:	str	r3, [sp, #12]
   18b4c:	ldr	r3, [r5, #12]
   18b50:	str	r3, [sp, #8]
   18b54:	ldr	r3, [r5, #8]
   18b58:	str	r3, [sp, #4]
   18b5c:	ldr	r3, [r5, #4]
   18b60:	str	r3, [sp]
   18b64:	ldr	r3, [r5]
   18b68:	mov	r2, r0
   18b6c:	mov	r1, #1
   18b70:	mov	r0, r4
   18b74:	bl	110b0 <__fprintf_chk@plt>
   18b78:	b	18954 <__assert_fail@plt+0x77a8>
   18b7c:	mov	r2, #5
   18b80:	movw	r1, #44368	; 0xad50
   18b84:	movt	r1, #1
   18b88:	mov	r0, #0
   18b8c:	bl	10f54 <dcgettext@plt>
   18b90:	ldr	r3, [r5, #32]
   18b94:	str	r3, [sp, #28]
   18b98:	ldr	r3, [r5, #28]
   18b9c:	str	r3, [sp, #24]
   18ba0:	ldr	r3, [r5, #24]
   18ba4:	str	r3, [sp, #20]
   18ba8:	ldr	r3, [r5, #20]
   18bac:	str	r3, [sp, #16]
   18bb0:	ldr	r3, [r5, #16]
   18bb4:	str	r3, [sp, #12]
   18bb8:	ldr	r3, [r5, #12]
   18bbc:	str	r3, [sp, #8]
   18bc0:	ldr	r3, [r5, #8]
   18bc4:	str	r3, [sp, #4]
   18bc8:	ldr	r3, [r5, #4]
   18bcc:	str	r3, [sp]
   18bd0:	ldr	r3, [r5]
   18bd4:	mov	r2, r0
   18bd8:	mov	r1, #1
   18bdc:	mov	r0, r4
   18be0:	bl	110b0 <__fprintf_chk@plt>
   18be4:	b	18954 <__assert_fail@plt+0x77a8>
   18be8:	mov	r2, #5
   18bec:	movw	r1, #44420	; 0xad84
   18bf0:	movt	r1, #1
   18bf4:	mov	r0, #0
   18bf8:	bl	10f54 <dcgettext@plt>
   18bfc:	ldr	r3, [r5, #32]
   18c00:	str	r3, [sp, #28]
   18c04:	ldr	r3, [r5, #28]
   18c08:	str	r3, [sp, #24]
   18c0c:	ldr	r3, [r5, #24]
   18c10:	str	r3, [sp, #20]
   18c14:	ldr	r3, [r5, #20]
   18c18:	str	r3, [sp, #16]
   18c1c:	ldr	r3, [r5, #16]
   18c20:	str	r3, [sp, #12]
   18c24:	ldr	r3, [r5, #12]
   18c28:	str	r3, [sp, #8]
   18c2c:	ldr	r3, [r5, #8]
   18c30:	str	r3, [sp, #4]
   18c34:	ldr	r3, [r5, #4]
   18c38:	str	r3, [sp]
   18c3c:	ldr	r3, [r5]
   18c40:	mov	r2, r0
   18c44:	mov	r1, #1
   18c48:	mov	r0, r4
   18c4c:	bl	110b0 <__fprintf_chk@plt>
   18c50:	b	18954 <__assert_fail@plt+0x77a8>
   18c54:	strd	r4, [sp, #-12]!
   18c58:	str	lr, [sp, #8]
   18c5c:	sub	sp, sp, #12
   18c60:	ldr	r5, [sp, #24]
   18c64:	ldr	ip, [r5]
   18c68:	cmp	ip, #0
   18c6c:	beq	18ca4 <__assert_fail@plt+0x7af8>
   18c70:	mov	lr, r5
   18c74:	mov	ip, #0
   18c78:	add	ip, ip, #1
   18c7c:	ldr	r4, [lr, #4]!
   18c80:	cmp	r4, #0
   18c84:	bne	18c78 <__assert_fail@plt+0x7acc>
   18c88:	str	ip, [sp, #4]
   18c8c:	str	r5, [sp]
   18c90:	bl	18824 <__assert_fail@plt+0x7678>
   18c94:	add	sp, sp, #12
   18c98:	ldrd	r4, [sp]
   18c9c:	add	sp, sp, #8
   18ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ca4:	mov	ip, #0
   18ca8:	b	18c88 <__assert_fail@plt+0x7adc>
   18cac:	strd	r4, [sp, #-12]!
   18cb0:	str	lr, [sp, #8]
   18cb4:	sub	sp, sp, #52	; 0x34
   18cb8:	ldr	r5, [sp, #64]	; 0x40
   18cbc:	add	r4, sp, #8
   18cc0:	mov	ip, #0
   18cc4:	ldr	lr, [r5], #4
   18cc8:	str	lr, [r4], #4
   18ccc:	cmp	lr, #0
   18cd0:	beq	18ce0 <__assert_fail@plt+0x7b34>
   18cd4:	add	ip, ip, #1
   18cd8:	cmp	ip, #10
   18cdc:	bne	18cc4 <__assert_fail@plt+0x7b18>
   18ce0:	str	ip, [sp, #4]
   18ce4:	add	ip, sp, #8
   18ce8:	str	ip, [sp]
   18cec:	bl	18824 <__assert_fail@plt+0x7678>
   18cf0:	add	sp, sp, #52	; 0x34
   18cf4:	ldrd	r4, [sp]
   18cf8:	add	sp, sp, #8
   18cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   18d00:	push	{r3}		; (str r3, [sp, #-4]!)
   18d04:	push	{lr}		; (str lr, [sp, #-4]!)
   18d08:	sub	sp, sp, #16
   18d0c:	add	r3, sp, #24
   18d10:	str	r3, [sp, #12]
   18d14:	str	r3, [sp]
   18d18:	ldr	r3, [sp, #20]
   18d1c:	bl	18cac <__assert_fail@plt+0x7b00>
   18d20:	add	sp, sp, #16
   18d24:	pop	{lr}		; (ldr lr, [sp], #4)
   18d28:	add	sp, sp, #4
   18d2c:	bx	lr
   18d30:	str	r4, [sp, #-8]!
   18d34:	str	lr, [sp, #4]
   18d38:	movw	r3, #45436	; 0xb17c
   18d3c:	movt	r3, #2
   18d40:	ldr	r1, [r3]
   18d44:	mov	r0, #10
   18d48:	bl	10f48 <fputc_unlocked@plt>
   18d4c:	mov	r2, #5
   18d50:	movw	r1, #44480	; 0xadc0
   18d54:	movt	r1, #1
   18d58:	mov	r0, #0
   18d5c:	bl	10f54 <dcgettext@plt>
   18d60:	movw	r2, #44500	; 0xadd4
   18d64:	movt	r2, #1
   18d68:	mov	r1, r0
   18d6c:	mov	r0, #1
   18d70:	bl	11098 <__printf_chk@plt>
   18d74:	mov	r2, #5
   18d78:	movw	r1, #44524	; 0xadec
   18d7c:	movt	r1, #1
   18d80:	mov	r0, #0
   18d84:	bl	10f54 <dcgettext@plt>
   18d88:	movw	r3, #41900	; 0xa3ac
   18d8c:	movt	r3, #1
   18d90:	movw	r2, #41940	; 0xa3d4
   18d94:	movt	r2, #1
   18d98:	mov	r1, r0
   18d9c:	mov	r0, #1
   18da0:	bl	11098 <__printf_chk@plt>
   18da4:	mov	r2, #5
   18da8:	movw	r1, #44544	; 0xae00
   18dac:	movt	r1, #1
   18db0:	mov	r0, #0
   18db4:	bl	10f54 <dcgettext@plt>
   18db8:	movw	r2, #44584	; 0xae28
   18dbc:	movt	r2, #1
   18dc0:	mov	r1, r0
   18dc4:	mov	r0, #1
   18dc8:	bl	11098 <__printf_chk@plt>
   18dcc:	ldr	r4, [sp]
   18dd0:	add	sp, sp, #4
   18dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   18dd8:	str	r4, [sp, #-8]!
   18ddc:	str	lr, [sp, #4]
   18de0:	bl	193b4 <__assert_fail@plt+0x8208>
   18de4:	cmp	r0, #0
   18de8:	beq	18df8 <__assert_fail@plt+0x7c4c>
   18dec:	ldr	r4, [sp]
   18df0:	add	sp, sp, #4
   18df4:	pop	{pc}		; (ldr pc, [sp], #4)
   18df8:	bl	1926c <__assert_fail@plt+0x80c0>
   18dfc:	str	r4, [sp, #-8]!
   18e00:	str	lr, [sp, #4]
   18e04:	bl	193b4 <__assert_fail@plt+0x8208>
   18e08:	cmp	r0, #0
   18e0c:	beq	18e1c <__assert_fail@plt+0x7c70>
   18e10:	ldr	r4, [sp]
   18e14:	add	sp, sp, #4
   18e18:	pop	{pc}		; (ldr pc, [sp], #4)
   18e1c:	bl	1926c <__assert_fail@plt+0x80c0>
   18e20:	str	r4, [sp, #-8]!
   18e24:	str	lr, [sp, #4]
   18e28:	bl	18dd8 <__assert_fail@plt+0x7c2c>
   18e2c:	ldr	r4, [sp]
   18e30:	add	sp, sp, #4
   18e34:	pop	{pc}		; (ldr pc, [sp], #4)
   18e38:	strd	r4, [sp, #-16]!
   18e3c:	str	r6, [sp, #8]
   18e40:	str	lr, [sp, #12]
   18e44:	mov	r5, r0
   18e48:	mov	r4, r1
   18e4c:	bl	193f0 <__assert_fail@plt+0x8244>
   18e50:	cmp	r0, #0
   18e54:	beq	18e68 <__assert_fail@plt+0x7cbc>
   18e58:	ldrd	r4, [sp]
   18e5c:	ldr	r6, [sp, #8]
   18e60:	add	sp, sp, #12
   18e64:	pop	{pc}		; (ldr pc, [sp], #4)
   18e68:	adds	r4, r4, #0
   18e6c:	movne	r4, #1
   18e70:	cmp	r5, #0
   18e74:	moveq	r4, #1
   18e78:	cmp	r4, #0
   18e7c:	beq	18e58 <__assert_fail@plt+0x7cac>
   18e80:	bl	1926c <__assert_fail@plt+0x80c0>
   18e84:	str	r4, [sp, #-8]!
   18e88:	str	lr, [sp, #4]
   18e8c:	cmp	r1, #0
   18e90:	orreq	r1, r1, #1
   18e94:	bl	193f0 <__assert_fail@plt+0x8244>
   18e98:	cmp	r0, #0
   18e9c:	beq	18eac <__assert_fail@plt+0x7d00>
   18ea0:	ldr	r4, [sp]
   18ea4:	add	sp, sp, #4
   18ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   18eac:	bl	1926c <__assert_fail@plt+0x80c0>
   18eb0:	strd	r4, [sp, #-16]!
   18eb4:	str	r6, [sp, #8]
   18eb8:	str	lr, [sp, #12]
   18ebc:	mov	r4, r0
   18ec0:	mov	r6, r1
   18ec4:	mov	r5, r2
   18ec8:	bl	19b8c <__assert_fail@plt+0x89e0>
   18ecc:	cmp	r0, #0
   18ed0:	beq	18ee4 <__assert_fail@plt+0x7d38>
   18ed4:	ldrd	r4, [sp]
   18ed8:	ldr	r6, [sp, #8]
   18edc:	add	sp, sp, #12
   18ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ee4:	cmp	r4, #0
   18ee8:	beq	18ef8 <__assert_fail@plt+0x7d4c>
   18eec:	cmp	r6, #0
   18ef0:	cmpne	r5, #0
   18ef4:	beq	18ed4 <__assert_fail@plt+0x7d28>
   18ef8:	bl	1926c <__assert_fail@plt+0x80c0>
   18efc:	str	r4, [sp, #-8]!
   18f00:	str	lr, [sp, #4]
   18f04:	bl	18eb0 <__assert_fail@plt+0x7d04>
   18f08:	ldr	r4, [sp]
   18f0c:	add	sp, sp, #4
   18f10:	pop	{pc}		; (ldr pc, [sp], #4)
   18f14:	str	r4, [sp, #-8]!
   18f18:	str	lr, [sp, #4]
   18f1c:	mov	ip, r1
   18f20:	mov	r3, r2
   18f24:	cmp	r2, #0
   18f28:	cmpne	r1, #0
   18f2c:	moveq	r3, #1
   18f30:	moveq	ip, r3
   18f34:	mov	r2, r3
   18f38:	mov	r1, ip
   18f3c:	bl	19b8c <__assert_fail@plt+0x89e0>
   18f40:	cmp	r0, #0
   18f44:	beq	18f54 <__assert_fail@plt+0x7da8>
   18f48:	ldr	r4, [sp]
   18f4c:	add	sp, sp, #4
   18f50:	pop	{pc}		; (ldr pc, [sp], #4)
   18f54:	bl	1926c <__assert_fail@plt+0x80c0>
   18f58:	str	r4, [sp, #-8]!
   18f5c:	str	lr, [sp, #4]
   18f60:	mov	r2, r1
   18f64:	mov	r1, r0
   18f68:	mov	r0, #0
   18f6c:	bl	18eb0 <__assert_fail@plt+0x7d04>
   18f70:	ldr	r4, [sp]
   18f74:	add	sp, sp, #4
   18f78:	pop	{pc}		; (ldr pc, [sp], #4)
   18f7c:	str	r4, [sp, #-8]!
   18f80:	str	lr, [sp, #4]
   18f84:	mov	r2, r1
   18f88:	mov	r1, r0
   18f8c:	mov	r0, #0
   18f90:	bl	18f14 <__assert_fail@plt+0x7d68>
   18f94:	ldr	r4, [sp]
   18f98:	add	sp, sp, #4
   18f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   18fa0:	strd	r4, [sp, #-16]!
   18fa4:	str	r6, [sp, #8]
   18fa8:	str	lr, [sp, #12]
   18fac:	mov	r5, r1
   18fb0:	ldr	r4, [r1]
   18fb4:	cmp	r0, #0
   18fb8:	beq	18fe8 <__assert_fail@plt+0x7e3c>
   18fbc:	lsr	r3, r4, #1
   18fc0:	add	r3, r3, #1
   18fc4:	adds	r4, r4, r3
   18fc8:	bcs	19004 <__assert_fail@plt+0x7e58>
   18fcc:	mov	r1, r4
   18fd0:	bl	18eb0 <__assert_fail@plt+0x7d04>
   18fd4:	str	r4, [r5]
   18fd8:	ldrd	r4, [sp]
   18fdc:	ldr	r6, [sp, #8]
   18fe0:	add	sp, sp, #12
   18fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   18fe8:	cmp	r4, #0
   18fec:	bne	18fcc <__assert_fail@plt+0x7e20>
   18ff0:	mov	r4, #64	; 0x40
   18ff4:	udiv	r4, r4, r2
   18ff8:	cmp	r2, #64	; 0x40
   18ffc:	addhi	r4, r4, #1
   19000:	b	18fcc <__assert_fail@plt+0x7e20>
   19004:	bl	1926c <__assert_fail@plt+0x80c0>
   19008:	str	r4, [sp, #-8]!
   1900c:	str	lr, [sp, #4]
   19010:	mov	r2, #1
   19014:	bl	18fa0 <__assert_fail@plt+0x7df4>
   19018:	ldr	r4, [sp]
   1901c:	add	sp, sp, #4
   19020:	pop	{pc}		; (ldr pc, [sp], #4)
   19024:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19028:	strd	r6, [sp, #8]
   1902c:	str	r8, [sp, #16]
   19030:	str	lr, [sp, #20]
   19034:	mov	r5, r1
   19038:	ldr	lr, [sp, #24]
   1903c:	ldr	ip, [r1]
   19040:	asr	r4, ip, #1
   19044:	adds	r4, ip, r4
   19048:	movvs	r1, #1
   1904c:	movvc	r1, #0
   19050:	cmp	r1, #0
   19054:	mvnne	r4, #-2147483648	; 0x80000000
   19058:	mvn	r8, r3
   1905c:	lsr	r8, r8, #31
   19060:	cmp	r3, r4
   19064:	movge	r1, #0
   19068:	andlt	r1, r8, #1
   1906c:	cmp	r1, #0
   19070:	movne	r4, r3
   19074:	smull	r6, r7, r4, lr
   19078:	asr	r1, r6, #31
   1907c:	cmp	r1, r7
   19080:	bne	19098 <__assert_fail@plt+0x7eec>
   19084:	mov	r1, r6
   19088:	cmp	r6, #63	; 0x3f
   1908c:	movle	r1, #64	; 0x40
   19090:	ble	1909c <__assert_fail@plt+0x7ef0>
   19094:	b	190a8 <__assert_fail@plt+0x7efc>
   19098:	mvn	r1, #-2147483648	; 0x80000000
   1909c:	sdiv	r4, r1, lr
   190a0:	mls	r6, lr, r4, r1
   190a4:	sub	r1, r1, r6
   190a8:	cmp	r0, #0
   190ac:	moveq	r6, #0
   190b0:	streq	r6, [r5]
   190b4:	sub	r6, r4, ip
   190b8:	cmp	r6, r2
   190bc:	bge	190f4 <__assert_fail@plt+0x7f48>
   190c0:	adds	r2, ip, r2
   190c4:	mov	r4, r2
   190c8:	bvs	19110 <__assert_fail@plt+0x7f64>
   190cc:	cmp	r2, r3
   190d0:	movle	r3, #0
   190d4:	andgt	r3, r8, #1
   190d8:	cmp	r3, #0
   190dc:	bne	19110 <__assert_fail@plt+0x7f64>
   190e0:	smull	r2, r3, r2, lr
   190e4:	asr	ip, r2, #31
   190e8:	mov	r1, r2
   190ec:	cmp	ip, r3
   190f0:	bne	19110 <__assert_fail@plt+0x7f64>
   190f4:	bl	18e38 <__assert_fail@plt+0x7c8c>
   190f8:	str	r4, [r5]
   190fc:	ldrd	r4, [sp]
   19100:	ldrd	r6, [sp, #8]
   19104:	ldr	r8, [sp, #16]
   19108:	add	sp, sp, #20
   1910c:	pop	{pc}		; (ldr pc, [sp], #4)
   19110:	bl	1926c <__assert_fail@plt+0x80c0>
   19114:	str	r4, [sp, #-8]!
   19118:	str	lr, [sp, #4]
   1911c:	bl	19340 <__assert_fail@plt+0x8194>
   19120:	cmp	r0, #0
   19124:	beq	19134 <__assert_fail@plt+0x7f88>
   19128:	ldr	r4, [sp]
   1912c:	add	sp, sp, #4
   19130:	pop	{pc}		; (ldr pc, [sp], #4)
   19134:	bl	1926c <__assert_fail@plt+0x80c0>
   19138:	str	r4, [sp, #-8]!
   1913c:	str	lr, [sp, #4]
   19140:	mov	r1, #1
   19144:	bl	19114 <__assert_fail@plt+0x7f68>
   19148:	ldr	r4, [sp]
   1914c:	add	sp, sp, #4
   19150:	pop	{pc}		; (ldr pc, [sp], #4)
   19154:	str	r4, [sp, #-8]!
   19158:	str	lr, [sp, #4]
   1915c:	bl	19340 <__assert_fail@plt+0x8194>
   19160:	cmp	r0, #0
   19164:	beq	19174 <__assert_fail@plt+0x7fc8>
   19168:	ldr	r4, [sp]
   1916c:	add	sp, sp, #4
   19170:	pop	{pc}		; (ldr pc, [sp], #4)
   19174:	bl	1926c <__assert_fail@plt+0x80c0>
   19178:	str	r4, [sp, #-8]!
   1917c:	str	lr, [sp, #4]
   19180:	mov	r1, #1
   19184:	bl	19154 <__assert_fail@plt+0x7fa8>
   19188:	ldr	r4, [sp]
   1918c:	add	sp, sp, #4
   19190:	pop	{pc}		; (ldr pc, [sp], #4)
   19194:	strd	r4, [sp, #-16]!
   19198:	str	r6, [sp, #8]
   1919c:	str	lr, [sp, #12]
   191a0:	mov	r5, r0
   191a4:	mov	r4, r1
   191a8:	mov	r0, r1
   191ac:	bl	18dd8 <__assert_fail@plt+0x7c2c>
   191b0:	mov	r2, r4
   191b4:	mov	r1, r5
   191b8:	bl	10f24 <memcpy@plt>
   191bc:	ldrd	r4, [sp]
   191c0:	ldr	r6, [sp, #8]
   191c4:	add	sp, sp, #12
   191c8:	pop	{pc}		; (ldr pc, [sp], #4)
   191cc:	strd	r4, [sp, #-16]!
   191d0:	str	r6, [sp, #8]
   191d4:	str	lr, [sp, #12]
   191d8:	mov	r5, r0
   191dc:	mov	r4, r1
   191e0:	mov	r0, r1
   191e4:	bl	18dfc <__assert_fail@plt+0x7c50>
   191e8:	mov	r2, r4
   191ec:	mov	r1, r5
   191f0:	bl	10f24 <memcpy@plt>
   191f4:	ldrd	r4, [sp]
   191f8:	ldr	r6, [sp, #8]
   191fc:	add	sp, sp, #12
   19200:	pop	{pc}		; (ldr pc, [sp], #4)
   19204:	strd	r4, [sp, #-16]!
   19208:	str	r6, [sp, #8]
   1920c:	str	lr, [sp, #12]
   19210:	mov	r5, r0
   19214:	mov	r4, r1
   19218:	add	r0, r1, #1
   1921c:	bl	18dfc <__assert_fail@plt+0x7c50>
   19220:	mov	r2, #0
   19224:	strb	r2, [r0, r4]
   19228:	mov	r2, r4
   1922c:	mov	r1, r5
   19230:	bl	10f24 <memcpy@plt>
   19234:	ldrd	r4, [sp]
   19238:	ldr	r6, [sp, #8]
   1923c:	add	sp, sp, #12
   19240:	pop	{pc}		; (ldr pc, [sp], #4)
   19244:	str	r4, [sp, #-8]!
   19248:	str	lr, [sp, #4]
   1924c:	mov	r4, r0
   19250:	bl	11044 <strlen@plt>
   19254:	add	r1, r0, #1
   19258:	mov	r0, r4
   1925c:	bl	19194 <__assert_fail@plt+0x7fe8>
   19260:	ldr	r4, [sp]
   19264:	add	sp, sp, #4
   19268:	pop	{pc}		; (ldr pc, [sp], #4)
   1926c:	str	r4, [sp, #-8]!
   19270:	str	lr, [sp, #4]
   19274:	movw	r3, #45344	; 0xb120
   19278:	movt	r3, #2
   1927c:	ldr	r4, [r3]
   19280:	mov	r2, #5
   19284:	movw	r1, #44664	; 0xae78
   19288:	movt	r1, #1
   1928c:	mov	r0, #0
   19290:	bl	10f54 <dcgettext@plt>
   19294:	mov	r3, r0
   19298:	movw	r2, #43428	; 0xa9a4
   1929c:	movt	r2, #1
   192a0:	mov	r1, #0
   192a4:	mov	r0, r4
   192a8:	bl	10fd8 <error@plt>
   192ac:	bl	1117c <abort@plt>
   192b0:	str	r4, [sp, #-8]!
   192b4:	str	lr, [sp, #4]
   192b8:	orr	r1, r1, #512	; 0x200
   192bc:	bl	13ec0 <__assert_fail@plt+0x2d14>
   192c0:	cmp	r0, #0
   192c4:	beq	192d4 <__assert_fail@plt+0x8128>
   192c8:	ldr	r4, [sp]
   192cc:	add	sp, sp, #4
   192d0:	pop	{pc}		; (ldr pc, [sp], #4)
   192d4:	bl	11068 <__errno_location@plt>
   192d8:	ldr	r3, [r0]
   192dc:	cmp	r3, #22
   192e0:	beq	192e8 <__assert_fail@plt+0x813c>
   192e4:	bl	1926c <__assert_fail@plt+0x80c0>
   192e8:	movw	r3, #44684	; 0xae8c
   192ec:	movt	r3, #1
   192f0:	mov	r2, #41	; 0x29
   192f4:	movw	r1, #44696	; 0xae98
   192f8:	movt	r1, #1
   192fc:	movw	r0, #44708	; 0xaea4
   19300:	movt	r0, #1
   19304:	bl	111ac <__assert_fail@plt>
   19308:	ldr	r3, [r0, #48]	; 0x30
   1930c:	and	r3, r3, #17
   19310:	cmp	r3, #16
   19314:	beq	19338 <__assert_fail@plt+0x818c>
   19318:	cmp	r3, #17
   1931c:	beq	19328 <__assert_fail@plt+0x817c>
   19320:	mov	r0, #0
   19324:	bx	lr
   19328:	ldr	r0, [r1, #48]	; 0x30
   1932c:	adds	r0, r0, #0
   19330:	movne	r0, #1
   19334:	bx	lr
   19338:	mov	r0, #1
   1933c:	bx	lr
   19340:	strd	r4, [sp, #-16]!
   19344:	str	r6, [sp, #8]
   19348:	str	lr, [sp, #12]
   1934c:	cmp	r1, #0
   19350:	cmpne	r0, #0
   19354:	beq	19390 <__assert_fail@plt+0x81e4>
   19358:	mov	r2, r0
   1935c:	mov	r3, r1
   19360:	umull	r4, r5, r0, r1
   19364:	adds	r1, r5, #0
   19368:	movne	r1, #1
   1936c:	cmp	r4, #0
   19370:	movlt	r1, #1
   19374:	cmp	r1, #0
   19378:	beq	19398 <__assert_fail@plt+0x81ec>
   1937c:	bl	11068 <__errno_location@plt>
   19380:	mov	r3, #12
   19384:	str	r3, [r0]
   19388:	mov	r0, #0
   1938c:	b	193a4 <__assert_fail@plt+0x81f8>
   19390:	mov	r3, #1
   19394:	mov	r2, r3
   19398:	mov	r1, r3
   1939c:	mov	r0, r2
   193a0:	bl	10ec4 <calloc@plt>
   193a4:	ldrd	r4, [sp]
   193a8:	ldr	r6, [sp, #8]
   193ac:	add	sp, sp, #12
   193b0:	pop	{pc}		; (ldr pc, [sp], #4)
   193b4:	str	r4, [sp, #-8]!
   193b8:	str	lr, [sp, #4]
   193bc:	cmp	r0, #0
   193c0:	beq	193dc <__assert_fail@plt+0x8230>
   193c4:	bge	193e0 <__assert_fail@plt+0x8234>
   193c8:	bl	11068 <__errno_location@plt>
   193cc:	mov	r3, #12
   193d0:	str	r3, [r0]
   193d4:	mov	r0, #0
   193d8:	b	193e4 <__assert_fail@plt+0x8238>
   193dc:	mov	r0, #1
   193e0:	bl	10ff0 <malloc@plt>
   193e4:	ldr	r4, [sp]
   193e8:	add	sp, sp, #4
   193ec:	pop	{pc}		; (ldr pc, [sp], #4)
   193f0:	str	r4, [sp, #-8]!
   193f4:	str	lr, [sp, #4]
   193f8:	cmp	r0, #0
   193fc:	beq	19420 <__assert_fail@plt+0x8274>
   19400:	cmp	r1, #0
   19404:	beq	1942c <__assert_fail@plt+0x8280>
   19408:	cmp	r1, #0
   1940c:	blt	19438 <__assert_fail@plt+0x828c>
   19410:	bl	10f60 <realloc@plt>
   19414:	ldr	r4, [sp]
   19418:	add	sp, sp, #4
   1941c:	pop	{pc}		; (ldr pc, [sp], #4)
   19420:	mov	r0, r1
   19424:	bl	193b4 <__assert_fail@plt+0x8208>
   19428:	b	19414 <__assert_fail@plt+0x8268>
   1942c:	bl	199b8 <__assert_fail@plt+0x880c>
   19430:	mov	r0, #0
   19434:	b	19414 <__assert_fail@plt+0x8268>
   19438:	bl	11068 <__errno_location@plt>
   1943c:	mov	r3, #12
   19440:	str	r3, [r0]
   19444:	mov	r0, #0
   19448:	b	19414 <__assert_fail@plt+0x8268>
   1944c:	strd	r4, [sp, #-16]!
   19450:	str	r6, [sp, #8]
   19454:	str	lr, [sp, #12]
   19458:	mov	r5, r0
   1945c:	bl	10fc0 <__fpending@plt>
   19460:	mov	r6, r0
   19464:	ldr	r4, [r5]
   19468:	and	r4, r4, #32
   1946c:	mov	r0, r5
   19470:	bl	195e4 <__assert_fail@plt+0x8438>
   19474:	cmp	r4, #0
   19478:	bne	194ac <__assert_fail@plt+0x8300>
   1947c:	cmp	r0, #0
   19480:	beq	1949c <__assert_fail@plt+0x82f0>
   19484:	cmp	r6, #0
   19488:	bne	194c8 <__assert_fail@plt+0x831c>
   1948c:	bl	11068 <__errno_location@plt>
   19490:	ldr	r0, [r0]
   19494:	subs	r0, r0, #9
   19498:	mvnne	r0, #0
   1949c:	ldrd	r4, [sp]
   194a0:	ldr	r6, [sp, #8]
   194a4:	add	sp, sp, #12
   194a8:	pop	{pc}		; (ldr pc, [sp], #4)
   194ac:	cmp	r0, #0
   194b0:	bne	194d0 <__assert_fail@plt+0x8324>
   194b4:	bl	11068 <__errno_location@plt>
   194b8:	mov	r3, #0
   194bc:	str	r3, [r0]
   194c0:	mvn	r0, #0
   194c4:	b	1949c <__assert_fail@plt+0x82f0>
   194c8:	mvn	r0, #0
   194cc:	b	1949c <__assert_fail@plt+0x82f0>
   194d0:	mvn	r0, #0
   194d4:	b	1949c <__assert_fail@plt+0x82f0>
   194d8:	mov	r2, #0
   194dc:	mov	r3, #0
   194e0:	strd	r2, [r0, #16]
   194e4:	movw	r3, #62998	; 0xf616
   194e8:	movt	r3, #149	; 0x95
   194ec:	str	r3, [r0, #24]
   194f0:	bx	lr
   194f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   194f8:	strd	r6, [sp, #8]
   194fc:	strd	r8, [sp, #16]
   19500:	str	sl, [sp, #24]
   19504:	str	lr, [sp, #28]
   19508:	movw	r3, #62998	; 0xf616
   1950c:	movt	r3, #149	; 0x95
   19510:	ldr	r2, [r0, #24]
   19514:	cmp	r2, r3
   19518:	bne	19574 <__assert_fail@plt+0x83c8>
   1951c:	ldrd	r6, [r0, #16]
   19520:	orrs	r3, r6, r7
   19524:	beq	195c0 <__assert_fail@plt+0x8414>
   19528:	ldrd	r4, [r1, #96]	; 0x60
   1952c:	ldrd	r2, [r0]
   19530:	cmp	r5, r3
   19534:	cmpeq	r4, r2
   19538:	beq	19594 <__assert_fail@plt+0x83e8>
   1953c:	adds	r8, r6, #1
   19540:	adc	r9, r7, #0
   19544:	strd	r8, [r0, #16]
   19548:	and	r2, r6, r8
   1954c:	and	r3, r7, r9
   19550:	orrs	r3, r2, r3
   19554:	movne	r0, #0
   19558:	beq	195b0 <__assert_fail@plt+0x8404>
   1955c:	ldrd	r4, [sp]
   19560:	ldrd	r6, [sp, #8]
   19564:	ldrd	r8, [sp, #16]
   19568:	ldr	sl, [sp, #24]
   1956c:	add	sp, sp, #28
   19570:	pop	{pc}		; (ldr pc, [sp], #4)
   19574:	movw	r3, #44724	; 0xaeb4
   19578:	movt	r3, #1
   1957c:	mov	r2, #60	; 0x3c
   19580:	movw	r1, #44736	; 0xaec0
   19584:	movt	r1, #1
   19588:	movw	r0, #44756	; 0xaed4
   1958c:	movt	r0, #1
   19590:	bl	111ac <__assert_fail@plt>
   19594:	ldrd	r4, [r1]
   19598:	ldrd	r2, [r0, #8]
   1959c:	cmp	r5, r3
   195a0:	cmpeq	r4, r2
   195a4:	moveq	r0, #1
   195a8:	bne	1953c <__assert_fail@plt+0x8390>
   195ac:	b	1955c <__assert_fail@plt+0x83b0>
   195b0:	orrs	r3, r8, r9
   195b4:	moveq	r0, #1
   195b8:	beq	1955c <__assert_fail@plt+0x83b0>
   195bc:	b	195cc <__assert_fail@plt+0x8420>
   195c0:	mov	r2, #1
   195c4:	mov	r3, #0
   195c8:	strd	r2, [r0, #16]
   195cc:	ldrd	r2, [r1]
   195d0:	strd	r2, [r0, #8]
   195d4:	ldrd	r2, [r1, #96]	; 0x60
   195d8:	strd	r2, [r0]
   195dc:	mov	r0, #0
   195e0:	b	1955c <__assert_fail@plt+0x83b0>
   195e4:	strd	r4, [sp, #-16]!
   195e8:	str	r6, [sp, #8]
   195ec:	str	lr, [sp, #12]
   195f0:	sub	sp, sp, #8
   195f4:	mov	r4, r0
   195f8:	bl	110a4 <fileno@plt>
   195fc:	cmp	r0, #0
   19600:	blt	19678 <__assert_fail@plt+0x84cc>
   19604:	mov	r0, r4
   19608:	bl	11008 <__freading@plt>
   1960c:	cmp	r0, #0
   19610:	beq	19644 <__assert_fail@plt+0x8498>
   19614:	mov	r0, r4
   19618:	bl	110a4 <fileno@plt>
   1961c:	mov	r3, #1
   19620:	str	r3, [sp]
   19624:	mov	r2, #0
   19628:	mov	r3, #0
   1962c:	bl	10fa8 <lseek64@plt>
   19630:	mvn	r2, #0
   19634:	mvn	r3, #0
   19638:	cmp	r1, r3
   1963c:	cmpeq	r0, r2
   19640:	beq	19684 <__assert_fail@plt+0x84d8>
   19644:	mov	r0, r4
   19648:	bl	19948 <__assert_fail@plt+0x879c>
   1964c:	cmp	r0, #0
   19650:	beq	19684 <__assert_fail@plt+0x84d8>
   19654:	bl	11068 <__errno_location@plt>
   19658:	mov	r5, r0
   1965c:	ldr	r6, [r0]
   19660:	mov	r0, r4
   19664:	bl	110bc <fclose@plt>
   19668:	cmp	r6, #0
   1966c:	strne	r6, [r5]
   19670:	mvnne	r0, #0
   19674:	b	1968c <__assert_fail@plt+0x84e0>
   19678:	mov	r0, r4
   1967c:	bl	110bc <fclose@plt>
   19680:	b	1968c <__assert_fail@plt+0x84e0>
   19684:	mov	r0, r4
   19688:	bl	110bc <fclose@plt>
   1968c:	add	sp, sp, #8
   19690:	ldrd	r4, [sp]
   19694:	ldr	r6, [sp, #8]
   19698:	add	sp, sp, #12
   1969c:	pop	{pc}		; (ldr pc, [sp], #4)
   196a0:	push	{r1, r2, r3}
   196a4:	strd	r4, [sp, #-16]!
   196a8:	str	r6, [sp, #8]
   196ac:	str	lr, [sp, #12]
   196b0:	sub	sp, sp, #12
   196b4:	mov	r5, r0
   196b8:	ldr	r1, [sp, #28]
   196bc:	add	r3, sp, #32
   196c0:	str	r3, [sp, #4]
   196c4:	cmp	r1, #0
   196c8:	beq	19710 <__assert_fail@plt+0x8564>
   196cc:	movw	r3, #1030	; 0x406
   196d0:	cmp	r1, r3
   196d4:	beq	1974c <__assert_fail@plt+0x85a0>
   196d8:	cmp	r1, #11
   196dc:	beq	198fc <__assert_fail@plt+0x8750>
   196e0:	bgt	19888 <__assert_fail@plt+0x86dc>
   196e4:	cmp	r1, #3
   196e8:	beq	198fc <__assert_fail@plt+0x8750>
   196ec:	ble	19848 <__assert_fail@plt+0x869c>
   196f0:	cmp	r1, #8
   196f4:	beq	19868 <__assert_fail@plt+0x86bc>
   196f8:	ble	19860 <__assert_fail@plt+0x86b4>
   196fc:	cmp	r1, #9
   19700:	beq	198fc <__assert_fail@plt+0x8750>
   19704:	cmp	r1, #10
   19708:	bne	198c0 <__assert_fail@plt+0x8714>
   1970c:	b	19868 <__assert_fail@plt+0x86bc>
   19710:	ldr	r3, [sp, #4]
   19714:	add	r2, r3, #4
   19718:	str	r2, [sp, #4]
   1971c:	ldr	r2, [r3]
   19720:	mov	r1, #0
   19724:	bl	110d4 <fcntl64@plt>
   19728:	mov	r4, r0
   1972c:	mov	r0, r4
   19730:	add	sp, sp, #12
   19734:	ldrd	r4, [sp]
   19738:	ldr	r6, [sp, #8]
   1973c:	ldr	lr, [sp, #12]
   19740:	add	sp, sp, #16
   19744:	add	sp, sp, #12
   19748:	bx	lr
   1974c:	ldr	r3, [sp, #4]
   19750:	add	r2, r3, #4
   19754:	str	r2, [sp, #4]
   19758:	ldr	r6, [r3]
   1975c:	movw	r3, #45800	; 0xb2e8
   19760:	movt	r3, #2
   19764:	ldr	r3, [r3]
   19768:	cmp	r3, #0
   1976c:	blt	197d4 <__assert_fail@plt+0x8628>
   19770:	mov	r2, r6
   19774:	movw	r1, #1030	; 0x406
   19778:	bl	110d4 <fcntl64@plt>
   1977c:	subs	r4, r0, #0
   19780:	blt	19798 <__assert_fail@plt+0x85ec>
   19784:	movw	r3, #45800	; 0xb2e8
   19788:	movt	r3, #2
   1978c:	mov	r2, #1
   19790:	str	r2, [r3]
   19794:	b	1972c <__assert_fail@plt+0x8580>
   19798:	bl	11068 <__errno_location@plt>
   1979c:	ldr	r3, [r0]
   197a0:	cmp	r3, #22
   197a4:	bne	19784 <__assert_fail@plt+0x85d8>
   197a8:	mov	r2, r6
   197ac:	mov	r1, #0
   197b0:	mov	r0, r5
   197b4:	bl	110d4 <fcntl64@plt>
   197b8:	subs	r4, r0, #0
   197bc:	blt	1972c <__assert_fail@plt+0x8580>
   197c0:	movw	r3, #45800	; 0xb2e8
   197c4:	movt	r3, #2
   197c8:	mvn	r2, #0
   197cc:	str	r2, [r3]
   197d0:	b	197fc <__assert_fail@plt+0x8650>
   197d4:	mov	r2, r6
   197d8:	mov	r1, #0
   197dc:	bl	110d4 <fcntl64@plt>
   197e0:	subs	r4, r0, #0
   197e4:	blt	1972c <__assert_fail@plt+0x8580>
   197e8:	movw	r3, #45800	; 0xb2e8
   197ec:	movt	r3, #2
   197f0:	ldr	r3, [r3]
   197f4:	cmn	r3, #1
   197f8:	bne	1972c <__assert_fail@plt+0x8580>
   197fc:	mov	r1, #1
   19800:	mov	r0, r4
   19804:	bl	110d4 <fcntl64@plt>
   19808:	subs	r2, r0, #0
   1980c:	blt	19828 <__assert_fail@plt+0x867c>
   19810:	orr	r2, r2, #1
   19814:	mov	r1, #2
   19818:	mov	r0, r4
   1981c:	bl	110d4 <fcntl64@plt>
   19820:	cmn	r0, #1
   19824:	bne	1972c <__assert_fail@plt+0x8580>
   19828:	bl	11068 <__errno_location@plt>
   1982c:	mov	r5, r0
   19830:	ldr	r6, [r0]
   19834:	mov	r0, r4
   19838:	bl	11188 <close@plt>
   1983c:	str	r6, [r5]
   19840:	mvn	r4, #0
   19844:	b	1972c <__assert_fail@plt+0x8580>
   19848:	cmp	r1, #1
   1984c:	beq	198fc <__assert_fail@plt+0x8750>
   19850:	bgt	19868 <__assert_fail@plt+0x86bc>
   19854:	cmp	r1, #0
   19858:	bne	198c0 <__assert_fail@plt+0x8714>
   1985c:	b	19868 <__assert_fail@plt+0x86bc>
   19860:	cmp	r1, #4
   19864:	bne	198c0 <__assert_fail@plt+0x8714>
   19868:	ldr	r3, [sp, #4]
   1986c:	add	r2, r3, #4
   19870:	str	r2, [sp, #4]
   19874:	ldr	r2, [r3]
   19878:	mov	r0, r5
   1987c:	bl	110d4 <fcntl64@plt>
   19880:	mov	r4, r0
   19884:	b	1972c <__assert_fail@plt+0x8580>
   19888:	movw	r3, #1031	; 0x407
   1988c:	cmp	r1, r3
   19890:	bgt	198e0 <__assert_fail@plt+0x8734>
   19894:	movw	r3, #1030	; 0x406
   19898:	cmp	r1, r3
   1989c:	bge	19868 <__assert_fail@plt+0x86bc>
   198a0:	movw	r3, #1025	; 0x401
   198a4:	cmp	r1, r3
   198a8:	beq	198fc <__assert_fail@plt+0x8750>
   198ac:	movw	r3, #1026	; 0x402
   198b0:	cmp	r1, r3
   198b4:	beq	19868 <__assert_fail@plt+0x86bc>
   198b8:	cmp	r1, #1024	; 0x400
   198bc:	beq	19868 <__assert_fail@plt+0x86bc>
   198c0:	ldr	r3, [sp, #4]
   198c4:	add	r2, r3, #4
   198c8:	str	r2, [sp, #4]
   198cc:	ldr	r2, [r3]
   198d0:	mov	r0, r5
   198d4:	bl	110d4 <fcntl64@plt>
   198d8:	mov	r4, r0
   198dc:	b	1972c <__assert_fail@plt+0x8580>
   198e0:	movw	r3, #1033	; 0x409
   198e4:	cmp	r1, r3
   198e8:	beq	19868 <__assert_fail@plt+0x86bc>
   198ec:	blt	198fc <__assert_fail@plt+0x8750>
   198f0:	movw	r3, #1034	; 0x40a
   198f4:	cmp	r1, r3
   198f8:	bne	198c0 <__assert_fail@plt+0x8714>
   198fc:	mov	r0, r5
   19900:	bl	110d4 <fcntl64@plt>
   19904:	mov	r4, r0
   19908:	b	1972c <__assert_fail@plt+0x8580>
   1990c:	push	{r1, r2, r3}
   19910:	push	{lr}		; (str lr, [sp, #-4]!)
   19914:	sub	sp, sp, #8
   19918:	ldr	r1, [sp, #12]
   1991c:	tst	r1, #64	; 0x40
   19920:	addne	r3, sp, #20
   19924:	strne	r3, [sp, #4]
   19928:	ldrne	r2, [sp, #16]
   1992c:	moveq	r2, #0
   19930:	bl	10fe4 <open64@plt>
   19934:	bl	187c8 <__assert_fail@plt+0x761c>
   19938:	add	sp, sp, #8
   1993c:	pop	{lr}		; (ldr lr, [sp], #4)
   19940:	add	sp, sp, #12
   19944:	bx	lr
   19948:	str	r4, [sp, #-8]!
   1994c:	str	lr, [sp, #4]
   19950:	sub	sp, sp, #8
   19954:	subs	r4, r0, #0
   19958:	beq	1996c <__assert_fail@plt+0x87c0>
   1995c:	mov	r0, r4
   19960:	bl	11008 <__freading@plt>
   19964:	cmp	r0, #0
   19968:	bne	19984 <__assert_fail@plt+0x87d8>
   1996c:	mov	r0, r4
   19970:	bl	10ef4 <fflush@plt>
   19974:	add	sp, sp, #8
   19978:	ldr	r4, [sp]
   1997c:	add	sp, sp, #4
   19980:	pop	{pc}		; (ldr pc, [sp], #4)
   19984:	ldr	r3, [r4]
   19988:	tst	r3, #256	; 0x100
   1998c:	bne	1999c <__assert_fail@plt+0x87f0>
   19990:	mov	r0, r4
   19994:	bl	10ef4 <fflush@plt>
   19998:	b	19974 <__assert_fail@plt+0x87c8>
   1999c:	mov	r3, #1
   199a0:	str	r3, [sp]
   199a4:	mov	r2, #0
   199a8:	mov	r3, #0
   199ac:	mov	r0, r4
   199b0:	bl	19a18 <__assert_fail@plt+0x886c>
   199b4:	b	19990 <__assert_fail@plt+0x87e4>
   199b8:	strd	r4, [sp, #-12]!
   199bc:	str	lr, [sp, #8]
   199c0:	sub	sp, sp, #12
   199c4:	mov	r5, r0
   199c8:	bl	11068 <__errno_location@plt>
   199cc:	mov	r4, r0
   199d0:	ldr	r3, [r0]
   199d4:	str	r3, [sp]
   199d8:	str	r3, [sp, #4]
   199dc:	mov	r3, #0
   199e0:	str	r3, [r0]
   199e4:	mov	r0, r5
   199e8:	bl	10f0c <free@plt>
   199ec:	ldr	r3, [r4]
   199f0:	clz	r3, r3
   199f4:	lsr	r3, r3, #5
   199f8:	add	r2, sp, #8
   199fc:	add	r3, r2, r3, lsl #2
   19a00:	ldr	r3, [r3, #-8]
   19a04:	str	r3, [r4]
   19a08:	add	sp, sp, #12
   19a0c:	ldrd	r4, [sp]
   19a10:	add	sp, sp, #8
   19a14:	pop	{pc}		; (ldr pc, [sp], #4)
   19a18:	str	r4, [sp, #-16]!
   19a1c:	strd	r6, [sp, #4]
   19a20:	str	lr, [sp, #12]
   19a24:	sub	sp, sp, #8
   19a28:	mov	r4, r0
   19a2c:	mov	r6, r2
   19a30:	mov	r7, r3
   19a34:	ldr	r2, [r0, #8]
   19a38:	ldr	r3, [r0, #4]
   19a3c:	cmp	r2, r3
   19a40:	beq	19a70 <__assert_fail@plt+0x88c4>
   19a44:	ldr	r3, [sp, #24]
   19a48:	str	r3, [sp]
   19a4c:	mov	r2, r6
   19a50:	mov	r3, r7
   19a54:	mov	r0, r4
   19a58:	bl	110c8 <fseeko64@plt>
   19a5c:	add	sp, sp, #8
   19a60:	ldr	r4, [sp]
   19a64:	ldrd	r6, [sp, #4]
   19a68:	add	sp, sp, #12
   19a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   19a70:	ldr	r2, [r0, #20]
   19a74:	ldr	r3, [r0, #16]
   19a78:	cmp	r2, r3
   19a7c:	bne	19a44 <__assert_fail@plt+0x8898>
   19a80:	ldr	r3, [r0, #36]	; 0x24
   19a84:	cmp	r3, #0
   19a88:	bne	19a44 <__assert_fail@plt+0x8898>
   19a8c:	bl	110a4 <fileno@plt>
   19a90:	ldr	r3, [sp, #24]
   19a94:	str	r3, [sp]
   19a98:	mov	r2, r6
   19a9c:	mov	r3, r7
   19aa0:	bl	10fa8 <lseek64@plt>
   19aa4:	mvn	r2, #0
   19aa8:	mvn	r3, #0
   19aac:	cmp	r1, r3
   19ab0:	cmpeq	r0, r2
   19ab4:	beq	19ad0 <__assert_fail@plt+0x8924>
   19ab8:	ldr	r3, [r4]
   19abc:	bic	r3, r3, #16
   19ac0:	str	r3, [r4]
   19ac4:	strd	r0, [r4, #80]	; 0x50
   19ac8:	mov	r0, #0
   19acc:	b	19a5c <__assert_fail@plt+0x88b0>
   19ad0:	mvn	r0, #0
   19ad4:	b	19a5c <__assert_fail@plt+0x88b0>
   19ad8:	str	r4, [sp, #-8]!
   19adc:	str	lr, [sp, #4]
   19ae0:	mov	r0, #14
   19ae4:	bl	110f8 <nl_langinfo@plt>
   19ae8:	cmp	r0, #0
   19aec:	beq	19b10 <__assert_fail@plt+0x8964>
   19af0:	ldrb	r2, [r0]
   19af4:	movw	r3, #44780	; 0xaeec
   19af8:	movt	r3, #1
   19afc:	cmp	r2, #0
   19b00:	moveq	r0, r3
   19b04:	ldr	r4, [sp]
   19b08:	add	sp, sp, #4
   19b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b10:	movw	r0, #44780	; 0xaeec
   19b14:	movt	r0, #1
   19b18:	b	19b04 <__assert_fail@plt+0x8958>
   19b1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19b20:	strd	r6, [sp, #8]
   19b24:	str	lr, [sp, #16]
   19b28:	sub	sp, sp, #12
   19b2c:	mov	r7, r1
   19b30:	mov	r5, r2
   19b34:	subs	r6, r0, #0
   19b38:	addeq	r6, sp, #4
   19b3c:	mov	r0, r6
   19b40:	bl	10fcc <mbrtowc@plt>
   19b44:	mov	r4, r0
   19b48:	cmp	r5, #0
   19b4c:	cmnne	r0, #3
   19b50:	bhi	19b6c <__assert_fail@plt+0x89c0>
   19b54:	mov	r0, r4
   19b58:	add	sp, sp, #12
   19b5c:	ldrd	r4, [sp]
   19b60:	ldrd	r6, [sp, #8]
   19b64:	add	sp, sp, #16
   19b68:	pop	{pc}		; (ldr pc, [sp], #4)
   19b6c:	mov	r0, #0
   19b70:	bl	19be8 <__assert_fail@plt+0x8a3c>
   19b74:	cmp	r0, #0
   19b78:	bne	19b54 <__assert_fail@plt+0x89a8>
   19b7c:	ldrb	r3, [r7]
   19b80:	str	r3, [r6]
   19b84:	mov	r4, #1
   19b88:	b	19b54 <__assert_fail@plt+0x89a8>
   19b8c:	str	r4, [sp, #-8]!
   19b90:	str	lr, [sp, #4]
   19b94:	umull	r2, r3, r1, r2
   19b98:	cmp	r3, #0
   19b9c:	bne	19bb4 <__assert_fail@plt+0x8a08>
   19ba0:	mov	r1, r2
   19ba4:	bl	193f0 <__assert_fail@plt+0x8244>
   19ba8:	ldr	r4, [sp]
   19bac:	add	sp, sp, #4
   19bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   19bb4:	bl	11068 <__errno_location@plt>
   19bb8:	mov	r3, #12
   19bbc:	str	r3, [r0]
   19bc0:	mov	r0, #0
   19bc4:	b	19ba8 <__assert_fail@plt+0x89fc>
   19bc8:	str	r4, [sp, #-8]!
   19bcc:	str	lr, [sp, #4]
   19bd0:	mov	r2, #3
   19bd4:	mov	r1, #0
   19bd8:	bl	196a0 <__assert_fail@plt+0x84f4>
   19bdc:	ldr	r4, [sp]
   19be0:	add	sp, sp, #4
   19be4:	pop	{pc}		; (ldr pc, [sp], #4)
   19be8:	push	{lr}		; (str lr, [sp, #-4]!)
   19bec:	sub	sp, sp, #268	; 0x10c
   19bf0:	movw	r2, #257	; 0x101
   19bf4:	add	r1, sp, #4
   19bf8:	bl	19c44 <__assert_fail@plt+0x8a98>
   19bfc:	cmp	r0, #0
   19c00:	movne	r0, #0
   19c04:	bne	19c3c <__assert_fail@plt+0x8a90>
   19c08:	movw	r1, #44788	; 0xaef4
   19c0c:	movt	r1, #1
   19c10:	add	r0, sp, #4
   19c14:	bl	10ee8 <strcmp@plt>
   19c18:	cmp	r0, #0
   19c1c:	beq	19c38 <__assert_fail@plt+0x8a8c>
   19c20:	movw	r1, #44792	; 0xaef8
   19c24:	movt	r1, #1
   19c28:	add	r0, sp, #4
   19c2c:	bl	10ee8 <strcmp@plt>
   19c30:	adds	r0, r0, #0
   19c34:	movne	r0, #1
   19c38:	and	r0, r0, #1
   19c3c:	add	sp, sp, #268	; 0x10c
   19c40:	pop	{pc}		; (ldr pc, [sp], #4)
   19c44:	strd	r4, [sp, #-16]!
   19c48:	str	r6, [sp, #8]
   19c4c:	str	lr, [sp, #12]
   19c50:	mov	r6, r1
   19c54:	mov	r4, r2
   19c58:	mov	r1, #0
   19c5c:	bl	110e0 <setlocale@plt>
   19c60:	subs	r5, r0, #0
   19c64:	beq	19ca8 <__assert_fail@plt+0x8afc>
   19c68:	mov	r0, r5
   19c6c:	bl	11044 <strlen@plt>
   19c70:	cmp	r4, r0
   19c74:	bhi	19cc4 <__assert_fail@plt+0x8b18>
   19c78:	cmp	r4, #0
   19c7c:	moveq	r0, #34	; 0x22
   19c80:	beq	19cd8 <__assert_fail@plt+0x8b2c>
   19c84:	sub	r4, r4, #1
   19c88:	mov	r2, r4
   19c8c:	mov	r1, r5
   19c90:	mov	r0, r6
   19c94:	bl	10f24 <memcpy@plt>
   19c98:	mov	r3, #0
   19c9c:	strb	r3, [r6, r4]
   19ca0:	mov	r0, #34	; 0x22
   19ca4:	b	19cd8 <__assert_fail@plt+0x8b2c>
   19ca8:	cmp	r4, #0
   19cac:	moveq	r0, #22
   19cb0:	beq	19cd8 <__assert_fail@plt+0x8b2c>
   19cb4:	mov	r3, #0
   19cb8:	strb	r3, [r6]
   19cbc:	mov	r0, #22
   19cc0:	b	19cd8 <__assert_fail@plt+0x8b2c>
   19cc4:	add	r2, r0, #1
   19cc8:	mov	r1, r5
   19ccc:	mov	r0, r6
   19cd0:	bl	10f24 <memcpy@plt>
   19cd4:	mov	r0, #0
   19cd8:	ldrd	r4, [sp]
   19cdc:	ldr	r6, [sp, #8]
   19ce0:	add	sp, sp, #12
   19ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ce8:	str	r4, [sp, #-8]!
   19cec:	str	lr, [sp, #4]
   19cf0:	mov	r1, #0
   19cf4:	bl	110e0 <setlocale@plt>
   19cf8:	ldr	r4, [sp]
   19cfc:	add	sp, sp, #4
   19d00:	pop	{pc}		; (ldr pc, [sp], #4)
   19d04:	cmp	r3, #0
   19d08:	cmpeq	r2, #0
   19d0c:	bne	19d24 <__assert_fail@plt+0x8b78>
   19d10:	cmp	r1, #0
   19d14:	cmpeq	r0, #0
   19d18:	mvnne	r1, #0
   19d1c:	mvnne	r0, #0
   19d20:	b	19d40 <__assert_fail@plt+0x8b94>
   19d24:	sub	sp, sp, #8
   19d28:	push	{sp, lr}
   19d2c:	bl	19d50 <__assert_fail@plt+0x8ba4>
   19d30:	ldr	lr, [sp, #4]
   19d34:	add	sp, sp, #8
   19d38:	pop	{r2, r3}
   19d3c:	bx	lr
   19d40:	push	{r1, lr}
   19d44:	mov	r0, #8
   19d48:	bl	10edc <raise@plt>
   19d4c:	pop	{r1, pc}
   19d50:	cmp	r1, r3
   19d54:	cmpeq	r0, r2
   19d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d5c:	mov	r4, r0
   19d60:	movcc	r0, #0
   19d64:	mov	r5, r1
   19d68:	ldr	lr, [sp, #36]	; 0x24
   19d6c:	movcc	r1, r0
   19d70:	bcc	19e6c <__assert_fail@plt+0x8cc0>
   19d74:	cmp	r3, #0
   19d78:	clzeq	ip, r2
   19d7c:	clzne	ip, r3
   19d80:	addeq	ip, ip, #32
   19d84:	cmp	r5, #0
   19d88:	clzeq	r1, r4
   19d8c:	addeq	r1, r1, #32
   19d90:	clzne	r1, r5
   19d94:	sub	ip, ip, r1
   19d98:	sub	sl, ip, #32
   19d9c:	lsl	r9, r3, ip
   19da0:	rsb	fp, ip, #32
   19da4:	orr	r9, r9, r2, lsl sl
   19da8:	orr	r9, r9, r2, lsr fp
   19dac:	lsl	r8, r2, ip
   19db0:	cmp	r5, r9
   19db4:	cmpeq	r4, r8
   19db8:	movcc	r0, #0
   19dbc:	movcc	r1, r0
   19dc0:	bcc	19ddc <__assert_fail@plt+0x8c30>
   19dc4:	mov	r0, #1
   19dc8:	subs	r4, r4, r8
   19dcc:	lsl	r1, r0, sl
   19dd0:	orr	r1, r1, r0, lsr fp
   19dd4:	lsl	r0, r0, ip
   19dd8:	sbc	r5, r5, r9
   19ddc:	cmp	ip, #0
   19de0:	beq	19e6c <__assert_fail@plt+0x8cc0>
   19de4:	lsr	r6, r8, #1
   19de8:	orr	r6, r6, r9, lsl #31
   19dec:	lsr	r7, r9, #1
   19df0:	mov	r2, ip
   19df4:	b	19e18 <__assert_fail@plt+0x8c6c>
   19df8:	subs	r3, r4, r6
   19dfc:	sbc	r8, r5, r7
   19e00:	adds	r3, r3, r3
   19e04:	adc	r8, r8, r8
   19e08:	adds	r4, r3, #1
   19e0c:	adc	r5, r8, #0
   19e10:	subs	r2, r2, #1
   19e14:	beq	19e34 <__assert_fail@plt+0x8c88>
   19e18:	cmp	r5, r7
   19e1c:	cmpeq	r4, r6
   19e20:	bcs	19df8 <__assert_fail@plt+0x8c4c>
   19e24:	adds	r4, r4, r4
   19e28:	adc	r5, r5, r5
   19e2c:	subs	r2, r2, #1
   19e30:	bne	19e18 <__assert_fail@plt+0x8c6c>
   19e34:	lsr	r3, r4, ip
   19e38:	orr	r3, r3, r5, lsl fp
   19e3c:	lsr	r2, r5, ip
   19e40:	orr	r3, r3, r5, lsr sl
   19e44:	adds	r0, r0, r4
   19e48:	mov	r4, r3
   19e4c:	lsl	r3, r2, ip
   19e50:	orr	r3, r3, r4, lsl sl
   19e54:	lsl	ip, r4, ip
   19e58:	orr	r3, r3, r4, lsr fp
   19e5c:	adc	r1, r1, r5
   19e60:	subs	r0, r0, ip
   19e64:	mov	r5, r2
   19e68:	sbc	r1, r1, r3
   19e6c:	cmp	lr, #0
   19e70:	strdne	r4, [lr]
   19e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e7c:	mov	r7, r0
   19e80:	ldr	r6, [pc, #72]	; 19ed0 <__assert_fail@plt+0x8d24>
   19e84:	ldr	r5, [pc, #72]	; 19ed4 <__assert_fail@plt+0x8d28>
   19e88:	add	r6, pc, r6
   19e8c:	add	r5, pc, r5
   19e90:	sub	r6, r6, r5
   19e94:	mov	r8, r1
   19e98:	mov	r9, r2
   19e9c:	bl	10e98 <fstatfs64@plt-0x20>
   19ea0:	asrs	r6, r6, #2
   19ea4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ea8:	mov	r4, #0
   19eac:	add	r4, r4, #1
   19eb0:	ldr	r3, [r5], #4
   19eb4:	mov	r2, r9
   19eb8:	mov	r1, r8
   19ebc:	mov	r0, r7
   19ec0:	blx	r3
   19ec4:	cmp	r6, r4
   19ec8:	bne	19eac <__assert_fail@plt+0x8d00>
   19ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ed0:	andeq	r1, r1, r4, lsl #1
   19ed4:	andeq	r1, r1, ip, ror r0
   19ed8:	bx	lr
   19edc:	ldr	r3, [pc, #12]	; 19ef0 <__assert_fail@plt+0x8d44>
   19ee0:	mov	r1, #0
   19ee4:	add	r3, pc, r3
   19ee8:	ldr	r2, [r3]
   19eec:	b	11080 <__cxa_atexit@plt>
   19ef0:	andeq	r1, r1, r8, lsr #4

Disassembly of section .fini:

00019ef4 <.fini>:
   19ef4:	push	{r3, lr}
   19ef8:	pop	{r3, pc}
