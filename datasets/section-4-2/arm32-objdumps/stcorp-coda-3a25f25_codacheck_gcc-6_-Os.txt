
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010bb4 <.init>:
   10bb4:	push	{r3, lr}
   10bb8:	bl	1112c <_start@@Base+0x3c>
   10bbc:	pop	{r3, pc}

Disassembly of section .plt:

00010bc0 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10bc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10bc4:	ldr	lr, [pc, #4]	; 10bd0 <coda_set_option_perform_boundary_checks@plt-0x4>
   10bc8:	add	lr, pc, lr
   10bcc:	ldr	pc, [lr, #8]!
   10bd0:	andeq	r1, r1, r0, lsr r4

00010bd4 <coda_set_option_perform_boundary_checks@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #69632	; 0x11000
   10bdc:	ldr	pc, [ip, #1072]!	; 0x430

00010be0 <strcmp@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #69632	; 0x11000
   10be8:	ldr	pc, [ip, #1064]!	; 0x428

00010bec <printf@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #69632	; 0x11000
   10bf4:	ldr	pc, [ip, #1056]!	; 0x420

00010bf8 <coda_set_error@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #69632	; 0x11000
   10c00:	ldr	pc, [ip, #1048]!	; 0x418

00010c04 <coda_open@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #69632	; 0x11000
   10c0c:	ldr	pc, [ip, #1040]!	; 0x410

00010c10 <fflush@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #69632	; 0x11000
   10c18:	ldr	pc, [ip, #1032]!	; 0x408

00010c1c <coda_set_option_use_mmap@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #69632	; 0x11000
   10c24:	ldr	pc, [ip, #1024]!	; 0x400

00010c28 <coda_cursor_print_path@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #69632	; 0x11000
   10c30:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c34 <coda_set_definition_path_conditional@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #69632	; 0x11000
   10c3c:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c40 <getchar@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #69632	; 0x11000
   10c48:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c4c <coda_set_definition_path@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #69632	; 0x11000
   10c54:	ldr	pc, [ip, #992]!	; 0x3e0

00010c58 <coda_recognize_file@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #69632	; 0x11000
   10c60:	ldr	pc, [ip, #984]!	; 0x3d8

00010c64 <coda_type_get_format_name@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #69632	; 0x11000
   10c6c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c70 <coda_done@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #69632	; 0x11000
   10c78:	ldr	pc, [ip, #968]!	; 0x3c8

00010c7c <puts@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #69632	; 0x11000
   10c84:	ldr	pc, [ip, #960]!	; 0x3c0

00010c88 <coda_product_check@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #69632	; 0x11000
   10c90:	ldr	pc, [ip, #952]!	; 0x3b8

00010c94 <__libc_start_main@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #69632	; 0x11000
   10c9c:	ldr	pc, [ip, #944]!	; 0x3b0

00010ca0 <__gmon_start__@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #69632	; 0x11000
   10ca8:	ldr	pc, [ip, #936]!	; 0x3a8

00010cac <exit@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #69632	; 0x11000
   10cb4:	ldr	pc, [ip, #928]!	; 0x3a0

00010cb8 <fprintf@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #69632	; 0x11000
   10cc0:	ldr	pc, [ip, #920]!	; 0x398

00010cc4 <coda_init@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #69632	; 0x11000
   10ccc:	ldr	pc, [ip, #912]!	; 0x390

00010cd0 <ungetc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #69632	; 0x11000
   10cd8:	ldr	pc, [ip, #904]!	; 0x388

00010cdc <coda_set_option_perform_conversions@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #69632	; 0x11000
   10ce4:	ldr	pc, [ip, #896]!	; 0x380

00010ce8 <putchar@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #69632	; 0x11000
   10cf0:	ldr	pc, [ip, #888]!	; 0x378

00010cf4 <coda_close@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #69632	; 0x11000
   10cfc:	ldr	pc, [ip, #880]!	; 0x370

00010d00 <coda_errno_to_string@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #69632	; 0x11000
   10d08:	ldr	pc, [ip, #872]!	; 0x368

00010d0c <coda_get_libcoda_version@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #69632	; 0x11000
   10d14:	ldr	pc, [ip, #864]!	; 0x360

00010d18 <coda_get_errno@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #69632	; 0x11000
   10d20:	ldr	pc, [ip, #856]!	; 0x358

00010d24 <fputs@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #69632	; 0x11000
   10d2c:	ldr	pc, [ip, #848]!	; 0x350

00010d30 <abort@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #69632	; 0x11000
   10d38:	ldr	pc, [ip, #840]!	; 0x348

00010d3c <__assert_fail@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #69632	; 0x11000
   10d44:	ldr	pc, [ip, #832]!	; 0x340

Disassembly of section .text:

00010d48 <main@@Base>:
   10d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d4c:	mov	r6, r0
   10d50:	ldr	r2, [pc, #812]	; 11084 <main@@Base+0x33c>
   10d54:	ldr	r0, [pc, #812]	; 11088 <main@@Base+0x340>
   10d58:	mov	r7, r1
   10d5c:	ldr	r1, [pc, #808]	; 1108c <main@@Base+0x344>
   10d60:	sub	sp, sp, #1020	; 0x3fc
   10d64:	mov	r3, #0
   10d68:	cmp	r6, #1
   10d6c:	str	r3, [r0]
   10d70:	str	r3, [r1]
   10d74:	str	r3, [r2]
   10d78:	stmib	sp, {r0, r1, r2}
   10d7c:	beq	10dac <main@@Base+0x64>
   10d80:	ldr	r4, [r7, #4]
   10d84:	ldr	r1, [pc, #772]	; 11090 <main@@Base+0x348>
   10d88:	mov	r0, r4
   10d8c:	bl	10be0 <strcmp@plt>
   10d90:	cmp	r0, #0
   10d94:	beq	10dac <main@@Base+0x64>
   10d98:	ldr	r1, [pc, #756]	; 11094 <main@@Base+0x34c>
   10d9c:	mov	r0, r4
   10da0:	bl	10be0 <strcmp@plt>
   10da4:	cmp	r0, #0
   10da8:	bne	10db8 <main@@Base+0x70>
   10dac:	bl	11218 <_start@@Base+0x128>
   10db0:	mov	r0, #0
   10db4:	bl	10cac <exit@plt>
   10db8:	ldr	r1, [pc, #728]	; 11098 <main@@Base+0x350>
   10dbc:	mov	r0, r4
   10dc0:	bl	10be0 <strcmp@plt>
   10dc4:	cmp	r0, #0
   10dc8:	beq	10de0 <main@@Base+0x98>
   10dcc:	ldr	r1, [pc, #712]	; 1109c <main@@Base+0x354>
   10dd0:	mov	r0, r4
   10dd4:	bl	10be0 <strcmp@plt>
   10dd8:	cmp	r0, #0
   10ddc:	bne	10e04 <main@@Base+0xbc>
   10de0:	bl	10d0c <coda_get_libcoda_version@plt>
   10de4:	mov	r1, r0
   10de8:	ldr	r0, [pc, #688]	; 110a0 <main@@Base+0x358>
   10dec:	bl	10bec <printf@plt>
   10df0:	ldr	r0, [pc, #684]	; 110a4 <main@@Base+0x35c>
   10df4:	bl	10c7c <puts@plt>
   10df8:	mov	r0, #10
   10dfc:	bl	10ce8 <putchar@plt>
   10e00:	b	10db0 <main@@Base+0x68>
   10e04:	cmp	r6, #2
   10e08:	ble	10e4c <main@@Base+0x104>
   10e0c:	ldr	r1, [pc, #660]	; 110a8 <main@@Base+0x360>
   10e10:	mov	r0, r4
   10e14:	bl	10be0 <strcmp@plt>
   10e18:	cmp	r0, #0
   10e1c:	bne	10e4c <main@@Base+0x104>
   10e20:	ldr	r0, [r7, #8]
   10e24:	bl	10c4c <coda_set_definition_path@plt>
   10e28:	mov	r4, #3
   10e2c:	mov	r8, #1
   10e30:	ldr	sl, [pc, #628]	; 110ac <main@@Base+0x364>
   10e34:	mov	r9, r8
   10e38:	mov	fp, #0
   10e3c:	cmp	r4, r6
   10e40:	blt	10e90 <main@@Base+0x148>
   10e44:	mov	r5, #0
   10e48:	b	10f94 <main@@Base+0x24c>
   10e4c:	ldr	r2, [pc, #604]	; 110b0 <main@@Base+0x368>
   10e50:	mov	r1, #0
   10e54:	ldr	r0, [r7]
   10e58:	bl	10c34 <coda_set_definition_path_conditional@plt>
   10e5c:	cmp	r0, #0
   10e60:	moveq	r4, #1
   10e64:	beq	10e2c <main@@Base+0xe4>
   10e68:	ldr	r3, [pc, #580]	; 110b4 <main@@Base+0x36c>
   10e6c:	ldr	r4, [r3]
   10e70:	bl	10d18 <coda_get_errno@plt>
   10e74:	ldr	r0, [r0]
   10e78:	bl	10d00 <coda_errno_to_string@plt>
   10e7c:	ldr	r1, [pc, #564]	; 110b8 <main@@Base+0x370>
   10e80:	mov	r2, r0
   10e84:	mov	r0, r4
   10e88:	bl	10cb8 <fprintf@plt>
   10e8c:	b	10f80 <main@@Base+0x238>
   10e90:	ldr	r5, [r7, r4, lsl #2]
   10e94:	ldr	r1, [pc, #544]	; 110bc <main@@Base+0x374>
   10e98:	mov	r0, r5
   10e9c:	bl	10be0 <strcmp@plt>
   10ea0:	cmp	r0, #0
   10ea4:	beq	10ebc <main@@Base+0x174>
   10ea8:	ldr	r1, [pc, #528]	; 110c0 <main@@Base+0x378>
   10eac:	mov	r0, r5
   10eb0:	bl	10be0 <strcmp@plt>
   10eb4:	cmp	r0, #0
   10eb8:	bne	10ecc <main@@Base+0x184>
   10ebc:	ldr	r3, [sp, #4]
   10ec0:	str	r9, [r3]
   10ec4:	add	r4, r4, #1
   10ec8:	b	10e3c <main@@Base+0xf4>
   10ecc:	ldr	r1, [pc, #496]	; 110c4 <main@@Base+0x37c>
   10ed0:	mov	r0, r5
   10ed4:	bl	10be0 <strcmp@plt>
   10ed8:	cmp	r0, #0
   10edc:	beq	10ef4 <main@@Base+0x1ac>
   10ee0:	ldr	r1, [pc, #480]	; 110c8 <main@@Base+0x380>
   10ee4:	mov	r0, r5
   10ee8:	bl	10be0 <strcmp@plt>
   10eec:	cmp	r0, #0
   10ef0:	bne	10efc <main@@Base+0x1b4>
   10ef4:	ldr	r3, [sp, #8]
   10ef8:	b	10ec0 <main@@Base+0x178>
   10efc:	ldr	r1, [pc, #456]	; 110cc <main@@Base+0x384>
   10f00:	mov	r0, r5
   10f04:	bl	10be0 <strcmp@plt>
   10f08:	cmp	r0, #0
   10f0c:	beq	10f24 <main@@Base+0x1dc>
   10f10:	ldr	r1, [pc, #440]	; 110d0 <main@@Base+0x388>
   10f14:	mov	r0, r5
   10f18:	bl	10be0 <strcmp@plt>
   10f1c:	cmp	r0, #0
   10f20:	bne	10f2c <main@@Base+0x1e4>
   10f24:	ldr	r3, [sp, #12]
   10f28:	b	10ec0 <main@@Base+0x178>
   10f2c:	mov	r1, sl
   10f30:	mov	r0, r5
   10f34:	bl	10be0 <strcmp@plt>
   10f38:	cmp	r0, #0
   10f3c:	beq	10f88 <main@@Base+0x240>
   10f40:	ldr	r1, [pc, #396]	; 110d4 <main@@Base+0x38c>
   10f44:	mov	r0, r5
   10f48:	bl	10be0 <strcmp@plt>
   10f4c:	cmp	r0, #0
   10f50:	bne	10f60 <main@@Base+0x218>
   10f54:	sub	r3, r6, #1
   10f58:	cmp	r4, r3
   10f5c:	beq	10f90 <main@@Base+0x248>
   10f60:	ldrb	r3, [r5]
   10f64:	cmp	r3, #45	; 0x2d
   10f68:	bne	10e44 <main@@Base+0xfc>
   10f6c:	ldr	r3, [pc, #320]	; 110b4 <main@@Base+0x36c>
   10f70:	ldr	r0, [pc, #352]	; 110d8 <main@@Base+0x390>
   10f74:	ldr	r1, [r3]
   10f78:	bl	10d24 <fputs@plt>
   10f7c:	bl	11218 <_start@@Base+0x128>
   10f80:	mov	r0, #1
   10f84:	b	10db4 <main@@Base+0x6c>
   10f88:	mov	r8, fp
   10f8c:	b	10ec4 <main@@Base+0x17c>
   10f90:	mov	r5, #1
   10f94:	bl	10cc4 <coda_init@plt>
   10f98:	subs	r9, r0, #0
   10f9c:	bne	10e68 <main@@Base+0x120>
   10fa0:	bl	10bd4 <coda_set_option_perform_boundary_checks@plt>
   10fa4:	mov	r0, r9
   10fa8:	bl	10cdc <coda_set_option_perform_conversions@plt>
   10fac:	mov	r0, r8
   10fb0:	bl	10c1c <coda_set_option_use_mmap@plt>
   10fb4:	cmp	r5, #0
   10fb8:	beq	11060 <main@@Base+0x318>
   10fbc:	ldr	r6, [pc, #280]	; 110dc <main@@Base+0x394>
   10fc0:	mov	r4, r9
   10fc4:	bl	10c40 <getchar@plt>
   10fc8:	uxtb	r5, r0
   10fcc:	cmp	r5, #13
   10fd0:	bne	10fec <main@@Base+0x2a4>
   10fd4:	bl	10c40 <getchar@plt>
   10fd8:	uxtb	r0, r0
   10fdc:	cmp	r0, #10
   10fe0:	beq	10ff8 <main@@Base+0x2b0>
   10fe4:	ldr	r1, [r6]
   10fe8:	bl	10cd0 <ungetc@plt>
   10fec:	cmp	r5, #13
   10ff0:	cmpne	r5, #10
   10ff4:	bne	11024 <main@@Base+0x2dc>
   10ff8:	add	r3, sp, #1016	; 0x3f8
   10ffc:	mov	r5, #0
   11000:	add	r3, r3, r4
   11004:	cmp	r4, r5
   11008:	strb	r5, [r3, #-1000]	; 0xfffffc18
   1100c:	beq	10fc0 <main@@Base+0x278>
   11010:	add	r0, sp, #16
   11014:	bl	11398 <_start@@Base+0x2a8>
   11018:	mov	r0, r5
   1101c:	bl	10c10 <fflush@plt>
   11020:	b	10fc0 <main@@Base+0x278>
   11024:	add	r3, sp, #16
   11028:	strb	r5, [r3, r4]
   1102c:	add	r4, r4, #1
   11030:	cmp	r4, #1000	; 0x3e8
   11034:	bne	10fc4 <main@@Base+0x27c>
   11038:	ldr	r3, [pc, #160]	; 110e0 <main@@Base+0x398>
   1103c:	mov	r2, #316	; 0x13c
   11040:	ldr	r1, [pc, #156]	; 110e4 <main@@Base+0x39c>
   11044:	ldr	r0, [pc, #156]	; 110e8 <main@@Base+0x3a0>
   11048:	bl	10d3c <__assert_fail@plt>
   1104c:	ldr	r0, [r7, r4, lsl #2]
   11050:	bl	11398 <_start@@Base+0x2a8>
   11054:	mov	r0, r5
   11058:	bl	10c10 <fflush@plt>
   1105c:	add	r4, r4, #1
   11060:	cmp	r4, r6
   11064:	blt	1104c <main@@Base+0x304>
   11068:	bl	10c70 <coda_done@plt>
   1106c:	ldr	r3, [pc, #120]	; 110ec <main@@Base+0x3a4>
   11070:	ldr	r0, [r3]
   11074:	cmp	r0, #0
   11078:	bne	10f80 <main@@Base+0x238>
   1107c:	add	sp, sp, #1020	; 0x3fc
   11080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11084:	andeq	r2, r2, r8, lsr #1
   11088:	strheq	r2, [r2], -r0
   1108c:	strheq	r2, [r2], -r4
   11090:	andeq	r1, r1, r0, lsl #25
   11094:	andeq	r1, r1, r3, asr #19
   11098:	andeq	r1, r1, r3, lsl #25
   1109c:	strdeq	r1, [r1], -sl
   110a0:	andeq	r1, r1, r6, lsl #25
   110a4:	muleq	r1, ip, ip
   110a8:	andeq	r1, r1, ip, asr #25
   110ac:	strdeq	r1, [r1], -lr
   110b0:	andeq	r1, r1, pc, asr #25
   110b4:	muleq	r2, r8, r0
   110b8:	andeq	r1, r1, r4, ror #24
   110bc:	andeq	r1, r1, r9, ror #25
   110c0:	andeq	r1, r1, r3, lsr #17
   110c4:	andeq	r1, r1, ip, ror #25
   110c8:	andeq	r1, r1, r6, lsl r8
   110cc:	andeq	r1, r1, pc, ror #25
   110d0:	andeq	r1, r1, fp, lsl r7
   110d4:	strdeq	r1, [r1], -r2
   110d8:	strdeq	r1, [r1], -r4
   110dc:	andeq	r2, r2, r0, lsr #1
   110e0:	andeq	r1, r1, r0, ror r6
   110e4:	andeq	r1, r1, lr, lsl #26
   110e8:	andeq	r1, r1, r5, asr sp
   110ec:	andeq	r2, r2, ip, lsr #1

000110f0 <_start@@Base>:
   110f0:	mov	fp, #0
   110f4:	mov	lr, #0
   110f8:	pop	{r1}		; (ldr r1, [sp], #4)
   110fc:	mov	r2, sp
   11100:	push	{r2}		; (str r2, [sp, #-4]!)
   11104:	push	{r0}		; (str r0, [sp, #-4]!)
   11108:	ldr	ip, [pc, #16]	; 11120 <_start@@Base+0x30>
   1110c:	push	{ip}		; (str ip, [sp, #-4]!)
   11110:	ldr	r0, [pc, #12]	; 11124 <_start@@Base+0x34>
   11114:	ldr	r3, [pc, #12]	; 11128 <_start@@Base+0x38>
   11118:	bl	10c94 <__libc_start_main@plt>
   1111c:	bl	10d30 <abort@plt>
   11120:	andeq	r1, r1, r0, ror #12
   11124:	andeq	r0, r1, r8, asr #26
   11128:	andeq	r1, r1, r0, lsl #12
   1112c:	ldr	r3, [pc, #20]	; 11148 <_start@@Base+0x58>
   11130:	ldr	r2, [pc, #20]	; 1114c <_start@@Base+0x5c>
   11134:	add	r3, pc, r3
   11138:	ldr	r2, [r3, r2]
   1113c:	cmp	r2, #0
   11140:	bxeq	lr
   11144:	b	10ca0 <__gmon_start__@plt>
   11148:	andeq	r0, r1, r4, asr #29
   1114c:	andeq	r0, r0, r8, lsl #1
   11150:	ldr	r3, [pc, #28]	; 11174 <_start@@Base+0x84>
   11154:	ldr	r0, [pc, #28]	; 11178 <_start@@Base+0x88>
   11158:	sub	r3, r3, r0
   1115c:	cmp	r3, #6
   11160:	bxls	lr
   11164:	ldr	r3, [pc, #16]	; 1117c <_start@@Base+0x8c>
   11168:	cmp	r3, #0
   1116c:	bxeq	lr
   11170:	bx	r3
   11174:	muleq	r2, r7, r0
   11178:	muleq	r2, r4, r0
   1117c:	andeq	r0, r0, r0
   11180:	ldr	r1, [pc, #36]	; 111ac <_start@@Base+0xbc>
   11184:	ldr	r0, [pc, #36]	; 111b0 <_start@@Base+0xc0>
   11188:	sub	r1, r1, r0
   1118c:	asr	r1, r1, #2
   11190:	add	r1, r1, r1, lsr #31
   11194:	asrs	r1, r1, #1
   11198:	bxeq	lr
   1119c:	ldr	r3, [pc, #16]	; 111b4 <_start@@Base+0xc4>
   111a0:	cmp	r3, #0
   111a4:	bxeq	lr
   111a8:	bx	r3
   111ac:	muleq	r2, r4, r0
   111b0:	muleq	r2, r4, r0
   111b4:	andeq	r0, r0, r0
   111b8:	push	{r4, lr}
   111bc:	ldr	r4, [pc, #24]	; 111dc <_start@@Base+0xec>
   111c0:	ldrb	r3, [r4]
   111c4:	cmp	r3, #0
   111c8:	popne	{r4, pc}
   111cc:	bl	11150 <_start@@Base+0x60>
   111d0:	mov	r3, #1
   111d4:	strb	r3, [r4]
   111d8:	pop	{r4, pc}
   111dc:	andeq	r2, r2, r4, lsr #1
   111e0:	ldr	r0, [pc, #40]	; 11210 <_start@@Base+0x120>
   111e4:	ldr	r3, [r0]
   111e8:	cmp	r3, #0
   111ec:	bne	111f4 <_start@@Base+0x104>
   111f0:	b	11180 <_start@@Base+0x90>
   111f4:	ldr	r3, [pc, #24]	; 11214 <_start@@Base+0x124>
   111f8:	cmp	r3, #0
   111fc:	beq	111f0 <_start@@Base+0x100>
   11200:	push	{r4, lr}
   11204:	blx	r3
   11208:	pop	{r4, lr}
   1120c:	b	11180 <_start@@Base+0x90>
   11210:	strdeq	r1, [r2], -ip
   11214:	andeq	r0, r0, r0
   11218:	push	{r4, lr}
   1121c:	ldr	r0, [pc, #260]	; 11328 <_start@@Base+0x238>
   11220:	bl	10c7c <puts@plt>
   11224:	ldr	r0, [pc, #256]	; 1132c <_start@@Base+0x23c>
   11228:	bl	10c7c <puts@plt>
   1122c:	ldr	r0, [pc, #252]	; 11330 <_start@@Base+0x240>
   11230:	bl	10c7c <puts@plt>
   11234:	ldr	r0, [pc, #248]	; 11334 <_start@@Base+0x244>
   11238:	bl	10c7c <puts@plt>
   1123c:	ldr	r0, [pc, #244]	; 11338 <_start@@Base+0x248>
   11240:	bl	10c7c <puts@plt>
   11244:	ldr	r0, [pc, #240]	; 1133c <_start@@Base+0x24c>
   11248:	bl	10c7c <puts@plt>
   1124c:	ldr	r0, [pc, #236]	; 11340 <_start@@Base+0x250>
   11250:	bl	10c7c <puts@plt>
   11254:	ldr	r0, [pc, #232]	; 11344 <_start@@Base+0x254>
   11258:	bl	10c7c <puts@plt>
   1125c:	ldr	r0, [pc, #228]	; 11348 <_start@@Base+0x258>
   11260:	bl	10c7c <puts@plt>
   11264:	ldr	r0, [pc, #224]	; 1134c <_start@@Base+0x25c>
   11268:	bl	10c7c <puts@plt>
   1126c:	ldr	r0, [pc, #220]	; 11350 <_start@@Base+0x260>
   11270:	bl	10c7c <puts@plt>
   11274:	ldr	r0, [pc, #216]	; 11354 <_start@@Base+0x264>
   11278:	bl	10c7c <puts@plt>
   1127c:	ldr	r0, [pc, #212]	; 11358 <_start@@Base+0x268>
   11280:	bl	10c7c <puts@plt>
   11284:	ldr	r0, [pc, #208]	; 1135c <_start@@Base+0x26c>
   11288:	bl	10c7c <puts@plt>
   1128c:	ldr	r0, [pc, #204]	; 11360 <_start@@Base+0x270>
   11290:	bl	10c7c <puts@plt>
   11294:	mov	r0, #10
   11298:	bl	10ce8 <putchar@plt>
   1129c:	ldr	r0, [pc, #192]	; 11364 <_start@@Base+0x274>
   112a0:	bl	10c7c <puts@plt>
   112a4:	ldr	r0, [pc, #188]	; 11368 <_start@@Base+0x278>
   112a8:	bl	10c7c <puts@plt>
   112ac:	mov	r0, #10
   112b0:	bl	10ce8 <putchar@plt>
   112b4:	ldr	r0, [pc, #176]	; 1136c <_start@@Base+0x27c>
   112b8:	bl	10c7c <puts@plt>
   112bc:	ldr	r0, [pc, #172]	; 11370 <_start@@Base+0x280>
   112c0:	bl	10c7c <puts@plt>
   112c4:	mov	r0, #10
   112c8:	bl	10ce8 <putchar@plt>
   112cc:	ldr	r0, [pc, #160]	; 11374 <_start@@Base+0x284>
   112d0:	bl	10c7c <puts@plt>
   112d4:	ldr	r0, [pc, #156]	; 11378 <_start@@Base+0x288>
   112d8:	bl	10c7c <puts@plt>
   112dc:	mov	r0, #10
   112e0:	bl	10ce8 <putchar@plt>
   112e4:	ldr	r0, [pc, #144]	; 1137c <_start@@Base+0x28c>
   112e8:	bl	10c7c <puts@plt>
   112ec:	ldr	r0, [pc, #140]	; 11380 <_start@@Base+0x290>
   112f0:	bl	10c7c <puts@plt>
   112f4:	ldr	r0, [pc, #136]	; 11384 <_start@@Base+0x294>
   112f8:	bl	10c7c <puts@plt>
   112fc:	ldr	r0, [pc, #132]	; 11388 <_start@@Base+0x298>
   11300:	bl	10c7c <puts@plt>
   11304:	ldr	r0, [pc, #128]	; 1138c <_start@@Base+0x29c>
   11308:	bl	10c7c <puts@plt>
   1130c:	ldr	r0, [pc, #124]	; 11390 <_start@@Base+0x2a0>
   11310:	bl	10c7c <puts@plt>
   11314:	ldr	r0, [pc, #120]	; 11394 <_start@@Base+0x2a4>
   11318:	bl	10c7c <puts@plt>
   1131c:	mov	r0, #10
   11320:	pop	{r4, lr}
   11324:	b	10ce8 <putchar@plt>
   11328:	andeq	r1, r1, r5, ror r6
   1132c:	andeq	r1, r1, ip, ror r6
   11330:			; <UNDEFINED> instruction: 0x000116b2
   11334:	strdeq	r1, [r1], -sl
   11338:	andeq	r1, r1, fp, lsl #14
   1133c:	andeq	r1, r1, r8, lsr #14
   11340:	andeq	r1, r1, r5, ror r7
   11344:			; <UNDEFINED> instruction: 0x000117ba
   11348:	andeq	r1, r1, r6, lsl #16
   1134c:	andeq	r1, r1, lr, lsl r8
   11350:	andeq	r1, r1, ip, asr r8
   11354:	muleq	r1, r3, r8
   11358:	andeq	r1, r1, sp, lsr #17
   1135c:	strdeq	r1, [r1], -r2
   11360:	andeq	r1, r1, r8, lsl #18
   11364:	andeq	r1, r1, r7, asr #18
   11368:	muleq	r1, r5, r9
   1136c:			; <UNDEFINED> instruction: 0x000119b1
   11370:	andeq	r1, r1, sl, asr #19
   11374:	andeq	r1, r1, r8, ror #19
   11378:	andeq	r1, r1, r4, lsl #20
   1137c:	andeq	r1, r1, r6, lsr sl
   11380:	andeq	r1, r1, r4, lsl #21
   11384:	andeq	r1, r1, sp, asr #21
   11388:	strdeq	r1, [r1], -r8
   1138c:	andeq	r1, r1, r4, asr #22
   11390:	andeq	r1, r1, sl, lsl #23
   11394:	andeq	r1, r1, r9, asr #23
   11398:	push	{r4, lr}
   1139c:	sub	sp, sp, #40	; 0x28
   113a0:	mov	r4, r0
   113a4:	bl	10c7c <puts@plt>
   113a8:	add	r3, sp, #28
   113ac:	str	r3, [sp, #4]
   113b0:	add	r3, sp, #24
   113b4:	str	r3, [sp]
   113b8:	add	r2, sp, #16
   113bc:	add	r3, sp, #20
   113c0:	add	r1, sp, #32
   113c4:	mov	r0, r4
   113c8:	bl	10c58 <coda_recognize_file@plt>
   113cc:	cmp	r0, #0
   113d0:	beq	1140c <_start@@Base+0x31c>
   113d4:	bl	10d18 <coda_get_errno@plt>
   113d8:	ldr	r0, [r0]
   113dc:	bl	10d00 <coda_errno_to_string@plt>
   113e0:	mov	r1, r0
   113e4:	ldr	r0, [pc, #408]	; 11584 <_start@@Base+0x494>
   113e8:	bl	10bec <printf@plt>
   113ec:	mov	r1, #0
   113f0:	mov	r0, r1
   113f4:	bl	10bf8 <coda_set_error@plt>
   113f8:	ldr	r3, [pc, #392]	; 11588 <_start@@Base+0x498>
   113fc:	mov	r2, #1
   11400:	str	r2, [r3]
   11404:	add	sp, sp, #40	; 0x28
   11408:	pop	{r4, pc}
   1140c:	ldr	r3, [pc, #376]	; 1158c <_start@@Base+0x49c>
   11410:	ldr	r3, [r3]
   11414:	cmp	r3, #0
   11418:	beq	11440 <_start@@Base+0x350>
   1141c:	ldr	r3, [sp, #20]
   11420:	cmp	r3, #0
   11424:	beq	11434 <_start@@Base+0x344>
   11428:	ldr	r3, [sp, #24]
   1142c:	cmp	r3, #0
   11430:	bne	11440 <_start@@Base+0x350>
   11434:	ldr	r0, [pc, #340]	; 11590 <_start@@Base+0x4a0>
   11438:	bl	10c7c <puts@plt>
   1143c:	b	113f8 <_start@@Base+0x308>
   11440:	ldr	r3, [pc, #332]	; 11594 <_start@@Base+0x4a4>
   11444:	ldr	r3, [r3]
   11448:	cmp	r3, #0
   1144c:	beq	11490 <_start@@Base+0x3a0>
   11450:	ldr	r0, [sp, #16]
   11454:	bl	10c64 <coda_type_get_format_name@plt>
   11458:	mov	r1, r0
   1145c:	ldr	r0, [pc, #308]	; 11598 <_start@@Base+0x4a8>
   11460:	bl	10bec <printf@plt>
   11464:	ldr	r1, [sp, #20]
   11468:	cmp	r1, #0
   1146c:	beq	11488 <_start@@Base+0x398>
   11470:	ldr	r2, [sp, #24]
   11474:	cmp	r2, #0
   11478:	beq	11488 <_start@@Base+0x398>
   1147c:	ldr	r3, [sp, #28]
   11480:	ldr	r0, [pc, #276]	; 1159c <_start@@Base+0x4ac>
   11484:	bl	10bec <printf@plt>
   11488:	mov	r0, #10
   1148c:	bl	10ce8 <putchar@plt>
   11490:	add	r1, sp, #12
   11494:	mov	r0, r4
   11498:	bl	10c04 <coda_open@plt>
   1149c:	cmp	r0, #0
   114a0:	beq	114f8 <_start@@Base+0x408>
   114a4:	bl	10d18 <coda_get_errno@plt>
   114a8:	ldr	r3, [r0]
   114ac:	cmn	r3, #21
   114b0:	beq	114d0 <_start@@Base+0x3e0>
   114b4:	bl	10d18 <coda_get_errno@plt>
   114b8:	ldr	r0, [r0]
   114bc:	bl	10d00 <coda_errno_to_string@plt>
   114c0:	mov	r1, r0
   114c4:	ldr	r0, [pc, #184]	; 11584 <_start@@Base+0x494>
   114c8:	bl	10bec <printf@plt>
   114cc:	b	113f8 <_start@@Base+0x308>
   114d0:	mov	r0, #0
   114d4:	bl	10c1c <coda_set_option_use_mmap@plt>
   114d8:	add	r1, sp, #12
   114dc:	mov	r0, r4
   114e0:	bl	10c04 <coda_open@plt>
   114e4:	mov	r4, r0
   114e8:	mov	r0, #1
   114ec:	bl	10c1c <coda_set_option_use_mmap@plt>
   114f0:	cmp	r4, #0
   114f4:	bne	114b4 <_start@@Base+0x3c4>
   114f8:	ldr	r3, [pc, #160]	; 115a0 <_start@@Base+0x4b0>
   114fc:	ldr	r2, [pc, #160]	; 115a4 <_start@@Base+0x4b4>
   11500:	ldr	r0, [sp, #12]
   11504:	ldr	r1, [r3]
   11508:	mov	r3, #0
   1150c:	clz	r1, r1
   11510:	lsr	r1, r1, #5
   11514:	bl	10c88 <coda_product_check@plt>
   11518:	cmp	r0, #0
   1151c:	beq	11550 <_start@@Base+0x460>
   11520:	bl	10d18 <coda_get_errno@plt>
   11524:	ldr	r0, [r0]
   11528:	bl	10d00 <coda_errno_to_string@plt>
   1152c:	mov	r1, r0
   11530:	ldr	r0, [pc, #76]	; 11584 <_start@@Base+0x494>
   11534:	bl	10bec <printf@plt>
   11538:	ldr	r3, [pc, #72]	; 11588 <_start@@Base+0x498>
   1153c:	mov	r2, #1
   11540:	ldr	r0, [sp, #12]
   11544:	str	r2, [r3]
   11548:	bl	10cf4 <coda_close@plt>
   1154c:	b	11404 <_start@@Base+0x314>
   11550:	ldr	r0, [sp, #12]
   11554:	bl	10cf4 <coda_close@plt>
   11558:	cmp	r0, #0
   1155c:	beq	11578 <_start@@Base+0x488>
   11560:	bl	10d18 <coda_get_errno@plt>
   11564:	ldr	r0, [r0]
   11568:	bl	10d00 <coda_errno_to_string@plt>
   1156c:	mov	r1, r0
   11570:	ldr	r0, [pc, #48]	; 115a8 <_start@@Base+0x4b8>
   11574:	b	114c8 <_start@@Base+0x3d8>
   11578:	mov	r0, #10
   1157c:	bl	10ce8 <putchar@plt>
   11580:	b	11404 <_start@@Base+0x314>
   11584:	andeq	r1, r1, r9, lsl #24
   11588:	andeq	r2, r2, ip, lsr #1
   1158c:	andeq	r2, r2, r8, lsr #1
   11590:	andeq	r1, r1, r7, lsl ip
   11594:	strheq	r2, [r2], -r0
   11598:	andeq	r1, r1, r2, asr #24
   1159c:	andeq	r1, r1, r7, asr ip
   115a0:	strheq	r2, [r2], -r4
   115a4:	andeq	r1, r1, ip, lsr #11
   115a8:	andeq	r1, r1, r2, ror #24
   115ac:	push	{r4, lr}
   115b0:	mov	r4, r0
   115b4:	ldr	r0, [pc, #52]	; 115f0 <_start@@Base+0x500>
   115b8:	bl	10bec <printf@plt>
   115bc:	cmp	r4, #0
   115c0:	beq	115d8 <_start@@Base+0x4e8>
   115c4:	ldr	r0, [pc, #40]	; 115f4 <_start@@Base+0x504>
   115c8:	bl	10bec <printf@plt>
   115cc:	ldr	r1, [pc, #36]	; 115f8 <_start@@Base+0x508>
   115d0:	mov	r0, r4
   115d4:	bl	10c28 <coda_cursor_print_path@plt>
   115d8:	mov	r0, #10
   115dc:	bl	10ce8 <putchar@plt>
   115e0:	ldr	r3, [pc, #20]	; 115fc <_start@@Base+0x50c>
   115e4:	mov	r2, #1
   115e8:	str	r2, [r3]
   115ec:	pop	{r4, pc}
   115f0:	andeq	r1, r1, pc, ror #24
   115f4:	andeq	r1, r1, fp, ror ip
   115f8:	andeq	r0, r1, ip, ror #23
   115fc:	andeq	r2, r2, ip, lsr #1

00011600 <__libc_csu_init@@Base>:
   11600:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11604:	mov	r7, r0
   11608:	ldr	r6, [pc, #72]	; 11658 <__libc_csu_init@@Base+0x58>
   1160c:	ldr	r5, [pc, #72]	; 1165c <__libc_csu_init@@Base+0x5c>
   11610:	add	r6, pc, r6
   11614:	add	r5, pc, r5
   11618:	sub	r6, r6, r5
   1161c:	mov	r8, r1
   11620:	mov	r9, r2
   11624:	bl	10bb4 <coda_set_option_perform_boundary_checks@plt-0x20>
   11628:	asrs	r6, r6, #2
   1162c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11630:	mov	r4, #0
   11634:	add	r4, r4, #1
   11638:	ldr	r3, [r5], #4
   1163c:	mov	r2, r9
   11640:	mov	r1, r8
   11644:	mov	r0, r7
   11648:	blx	r3
   1164c:	cmp	r6, r4
   11650:	bne	11634 <__libc_csu_init@@Base+0x34>
   11654:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11658:	andeq	r0, r1, r0, ror #17
   1165c:	ldrdeq	r0, [r1], -r8

00011660 <__libc_csu_fini@@Base>:
   11660:	bx	lr

Disassembly of section .fini:

00011664 <.fini>:
   11664:	push	{r3, lr}
   11668:	pop	{r3, pc}
