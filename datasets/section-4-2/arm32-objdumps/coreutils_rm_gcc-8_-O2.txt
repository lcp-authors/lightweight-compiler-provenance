
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

00010f80 <.init>:
   10f80:	push	{r3, lr}
   10f84:	bl	119c0 <__assert_fail@plt+0x6f0>
   10f88:	pop	{r3, pc}

Disassembly of section .plt:

00010f8c <fstatfs64@plt-0x14>:
   10f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f90:	ldr	lr, [pc, #4]	; 10f9c <fstatfs64@plt-0x4>
   10f94:	add	lr, pc, lr
   10f98:	ldr	pc, [lr, #8]!
   10f9c:	andeq	ip, r1, r4, rrx

00010fa0 <fstatfs64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #28, 20	; 0x1c000
   10fa8:	ldr	pc, [ip, #100]!	; 0x64

00010fac <calloc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #28, 20	; 0x1c000
   10fb4:	ldr	pc, [ip, #92]!	; 0x5c

00010fb8 <fputs_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #28, 20	; 0x1c000
   10fc0:	ldr	pc, [ip, #84]!	; 0x54

00010fc4 <raise@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #28, 20	; 0x1c000
   10fcc:	ldr	pc, [ip, #76]!	; 0x4c

00010fd0 <__getdelim@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #28, 20	; 0x1c000
   10fd8:	ldr	pc, [ip, #68]!	; 0x44

00010fdc <strcmp@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #28, 20	; 0x1c000
   10fe4:	ldr	pc, [ip, #60]!	; 0x3c

00010fe8 <fflush@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #28, 20	; 0x1c000
   10ff0:	ldr	pc, [ip, #52]!	; 0x34

00010ff4 <unlinkat@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #28, 20	; 0x1c000
   10ffc:	ldr	pc, [ip, #44]!	; 0x2c

00011000 <memmove@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #28, 20	; 0x1c000
   11008:	ldr	pc, [ip, #36]!	; 0x24

0001100c <free@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #28, 20	; 0x1c000
   11014:	ldr	pc, [ip, #28]!

00011018 <faccessat@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #28, 20	; 0x1c000
   11020:	ldr	pc, [ip, #20]!

00011024 <_exit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #28, 20	; 0x1c000
   1102c:	ldr	pc, [ip, #12]!

00011030 <memcpy@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #28, 20	; 0x1c000
   11038:	ldr	pc, [ip, #4]!

0001103c <mbsinit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #110592	; 0x1b000
   11044:	ldr	pc, [ip, #4092]!	; 0xffc

00011048 <memcmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #110592	; 0x1b000
   11050:	ldr	pc, [ip, #4084]!	; 0xff4

00011054 <fputc_unlocked@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #110592	; 0x1b000
   1105c:	ldr	pc, [ip, #4076]!	; 0xfec

00011060 <dcgettext@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #4068]!	; 0xfe4

0001106c <realloc@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #4060]!	; 0xfdc

00011078 <textdomain@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #4052]!	; 0xfd4

00011084 <geteuid@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011090 <__fxstatat64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #4036]!	; 0xfc4

0001109c <iswprint@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a8 <__fxstat64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110b4 <fwrite@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #4012]!	; 0xfac

000110c0 <lseek64@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110cc <__ctype_get_mb_cur_max@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d8 <__fpending@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #3988]!	; 0xf94

000110e4 <mbrtowc@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f0 <error@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #110592	; 0x1b000
   110f8:	ldr	pc, [ip, #3972]!	; 0xf84

000110fc <open64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #110592	; 0x1b000
   11104:	ldr	pc, [ip, #3964]!	; 0xf7c

00011108 <malloc@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #110592	; 0x1b000
   11110:	ldr	pc, [ip, #3956]!	; 0xf74

00011114 <__libc_start_main@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #110592	; 0x1b000
   1111c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011120 <__freading@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #110592	; 0x1b000
   11128:	ldr	pc, [ip, #3940]!	; 0xf64

0001112c <__gmon_start__@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #110592	; 0x1b000
   11134:	ldr	pc, [ip, #3932]!	; 0xf5c

00011138 <mempcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #110592	; 0x1b000
   11140:	ldr	pc, [ip, #3924]!	; 0xf54

00011144 <getopt_long@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #110592	; 0x1b000
   1114c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011150 <__ctype_b_loc@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #110592	; 0x1b000
   11158:	ldr	pc, [ip, #3908]!	; 0xf44

0001115c <exit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #110592	; 0x1b000
   11164:	ldr	pc, [ip, #3900]!	; 0xf3c

00011168 <strlen@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #110592	; 0x1b000
   11170:	ldr	pc, [ip, #3892]!	; 0xf34

00011174 <openat64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #110592	; 0x1b000
   1117c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011180 <__errno_location@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #110592	; 0x1b000
   11188:	ldr	pc, [ip, #3876]!	; 0xf24

0001118c <__cxa_atexit@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #110592	; 0x1b000
   11194:	ldr	pc, [ip, #3868]!	; 0xf1c

00011198 <memset@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3860]!	; 0xf14

000111a4 <__printf_chk@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b0 <fileno@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3844]!	; 0xf04

000111bc <__fprintf_chk@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3836]!	; 0xefc

000111c8 <fclose@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3828]!	; 0xef4

000111d4 <fseeko64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3820]!	; 0xeec

000111e0 <fcntl64@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3812]!	; 0xee4

000111ec <rpmatch@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3804]!	; 0xedc

000111f8 <__overflow@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3796]!	; 0xed4

00011204 <setlocale@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3788]!	; 0xecc

00011210 <strrchr@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3780]!	; 0xec4

0001121c <nl_langinfo@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3772]!	; 0xebc

00011228 <readdir64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3764]!	; 0xeb4

00011234 <fdopendir@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3756]!	; 0xeac

00011240 <dirfd@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3748]!	; 0xea4

0001124c <fchdir@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3740]!	; 0xe9c

00011258 <qsort@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3732]!	; 0xe94

00011264 <bindtextdomain@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011270 <__xstat64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3716]!	; 0xe84

0001127c <isatty@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3708]!	; 0xe7c

00011288 <strncmp@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3700]!	; 0xe74

00011294 <abort@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3692]!	; 0xe6c

000112a0 <close@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3684]!	; 0xe64

000112ac <__lxstat64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3676]!	; 0xe5c

000112b8 <dcngettext@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3668]!	; 0xe54

000112c4 <closedir@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3660]!	; 0xe4c

000112d0 <__assert_fail@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3652]!	; 0xe44

Disassembly of section .text:

000112e0 <.text>:
   112e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112e4:	mov	r5, r1
   112e8:	mov	r4, #0
   112ec:	strd	r6, [sp, #8]
   112f0:	mov	r7, r0
   112f4:	movw	r6, #45964	; 0xb38c
   112f8:	movt	r6, #1
   112fc:	strd	r8, [sp, #16]
   11300:	movw	r9, #53656	; 0xd198
   11304:	movt	r9, #2
   11308:	strd	sl, [sp, #24]
   1130c:	movw	sl, #43264	; 0xa900
   11310:	movt	sl, #1
   11314:	str	lr, [sp, #32]
   11318:	sub	sp, sp, #164	; 0xa4
   1131c:	ldr	r0, [r1]
   11320:	mov	fp, r4
   11324:	add	r8, sl, #108	; 0x6c
   11328:	bl	16fec <__assert_fail@plt+0x5d1c>
   1132c:	movw	r1, #47816	; 0xbac8
   11330:	movt	r1, #1
   11334:	mov	r0, #6
   11338:	bl	11204 <setlocale@plt>
   1133c:	movw	r1, #45696	; 0xb280
   11340:	movt	r1, #1
   11344:	movw	r0, #45528	; 0xb1d8
   11348:	movt	r0, #1
   1134c:	bl	11264 <bindtextdomain@plt>
   11350:	movw	r0, #45528	; 0xb1d8
   11354:	movt	r0, #1
   11358:	bl	11078 <textdomain@plt>
   1135c:	movw	r0, #13292	; 0x33ec
   11360:	movt	r0, #1
   11364:	bl	1a8dc <__assert_fail@plt+0x960c>
   11368:	mov	r3, #4
   1136c:	mov	r0, r4
   11370:	strb	r4, [sp, #36]	; 0x24
   11374:	str	r3, [sp, #40]	; 0x28
   11378:	strh	r4, [sp, #44]	; 0x2c
   1137c:	strb	r4, [sp, #46]	; 0x2e
   11380:	str	r4, [sp, #48]	; 0x30
   11384:	strb	r4, [sp, #52]	; 0x34
   11388:	bl	1127c <isatty@plt>
   1138c:	subs	r0, r0, r4
   11390:	mov	r3, #1
   11394:	movne	r0, #1
   11398:	str	r3, [sp, #28]
   1139c:	strb	r0, [sp, #53]	; 0x35
   113a0:	strh	r4, [sp, #54]	; 0x36
   113a4:	mov	r4, #0
   113a8:	mov	r3, r8
   113ac:	mov	r2, r6
   113b0:	mov	r1, r5
   113b4:	mov	r0, r7
   113b8:	str	r4, [sp]
   113bc:	bl	11144 <getopt_long@plt>
   113c0:	cmn	r0, #1
   113c4:	beq	11634 <__assert_fail@plt+0x364>
   113c8:	cmp	r0, #105	; 0x69
   113cc:	beq	115cc <__assert_fail@plt+0x2fc>
   113d0:	ble	11424 <__assert_fail@plt+0x154>
   113d4:	movw	r3, #257	; 0x101
   113d8:	cmp	r0, r3
   113dc:	beq	11610 <__assert_fail@plt+0x340>
   113e0:	ble	11498 <__assert_fail@plt+0x1c8>
   113e4:	movw	r3, #259	; 0x103
   113e8:	cmp	r0, r3
   113ec:	beq	115e0 <__assert_fail@plt+0x310>
   113f0:	bge	11458 <__assert_fail@plt+0x188>
   113f4:	movw	r3, #53632	; 0xd180
   113f8:	movt	r3, #2
   113fc:	ldr	r3, [r3]
   11400:	movw	r1, #45736	; 0xb2a8
   11404:	movt	r1, #1
   11408:	sub	r3, r3, #-1073741823	; 0xc0000001
   1140c:	ldr	r0, [r5, r3, lsl #2]
   11410:	bl	10fdc <strcmp@plt>
   11414:	cmp	r0, #0
   11418:	bne	11934 <__assert_fail@plt+0x664>
   1141c:	str	r0, [sp, #28]
   11420:	b	113a4 <__assert_fail@plt+0xd4>
   11424:	cmp	r0, #73	; 0x49
   11428:	beq	115ac <__assert_fail@plt+0x2dc>
   1142c:	ble	11530 <__assert_fail@plt+0x260>
   11430:	cmp	r0, #100	; 0x64
   11434:	beq	1161c <__assert_fail@plt+0x34c>
   11438:	cmp	r0, #102	; 0x66
   1143c:	bne	1151c <__assert_fail@plt+0x24c>
   11440:	mov	r3, #5
   11444:	mov	r2, #1
   11448:	mov	fp, r4
   1144c:	strb	r2, [sp, #36]	; 0x24
   11450:	str	r3, [sp, #40]	; 0x28
   11454:	b	113a4 <__assert_fail@plt+0xd4>
   11458:	cmp	r0, #260	; 0x104
   1145c:	bne	11474 <__assert_fail@plt+0x1a4>
   11460:	mov	r3, #1
   11464:	strb	r3, [sp, #53]	; 0x35
   11468:	b	113a4 <__assert_fail@plt+0xd4>
   1146c:	cmp	r0, #114	; 0x72
   11470:	beq	11524 <__assert_fail@plt+0x254>
   11474:	mov	r4, #1
   11478:	cmp	r7, r4
   1147c:	ble	11894 <__assert_fail@plt+0x5c4>
   11480:	ldr	r6, [r5, r4, lsl #2]
   11484:	ldrb	r3, [r6]
   11488:	cmp	r3, #45	; 0x2d
   1148c:	beq	11810 <__assert_fail@plt+0x540>
   11490:	add	r4, r4, #1
   11494:	b	11478 <__assert_fail@plt+0x1a8>
   11498:	cmp	r0, #118	; 0x76
   1149c:	beq	115c0 <__assert_fail@plt+0x2f0>
   114a0:	cmp	r0, #256	; 0x100
   114a4:	bne	1146c <__assert_fail@plt+0x19c>
   114a8:	ldr	r1, [r9]
   114ac:	cmp	r1, #0
   114b0:	beq	11508 <__assert_fail@plt+0x238>
   114b4:	movw	r0, #53552	; 0xd130
   114b8:	movt	r0, #2
   114bc:	ldr	r3, [pc, #1208]	; 1197c <__assert_fail@plt+0x6ac>
   114c0:	mov	r2, #1
   114c4:	mov	lr, #4
   114c8:	ldr	ip, [r0]
   114cc:	movw	r0, #45720	; 0xb298
   114d0:	movt	r0, #1
   114d4:	str	lr, [sp]
   114d8:	str	ip, [sp, #4]
   114dc:	str	r2, [sp, #8]
   114e0:	add	r2, r3, #24
   114e4:	bl	13218 <__assert_fail@plt+0x1f48>
   114e8:	add	r0, sl, r0, lsl #2
   114ec:	ldr	r3, [r0, #56]	; 0x38
   114f0:	cmp	r3, #1
   114f4:	beq	11684 <__assert_fail@plt+0x3b4>
   114f8:	cmp	r3, #0
   114fc:	beq	11674 <__assert_fail@plt+0x3a4>
   11500:	cmp	r3, #2
   11504:	bne	113a4 <__assert_fail@plt+0xd4>
   11508:	mov	r3, #3
   1150c:	mov	fp, #0
   11510:	strb	fp, [sp, #36]	; 0x24
   11514:	str	r3, [sp, #40]	; 0x28
   11518:	b	113a4 <__assert_fail@plt+0xd4>
   1151c:	cmp	r0, #82	; 0x52
   11520:	bne	11474 <__assert_fail@plt+0x1a4>
   11524:	mov	r3, #1
   11528:	strb	r3, [sp, #45]	; 0x2d
   1152c:	b	113a4 <__assert_fail@plt+0xd4>
   11530:	cmn	r0, #3
   11534:	bne	1159c <__assert_fail@plt+0x2cc>
   11538:	movw	r2, #45860	; 0xb324
   1153c:	movt	r2, #1
   11540:	movw	r3, #45876	; 0xb334
   11544:	movt	r3, #1
   11548:	movw	r1, #45896	; 0xb348
   1154c:	movt	r1, #1
   11550:	str	r4, [sp, #16]
   11554:	movw	r0, #53652	; 0xd194
   11558:	movt	r0, #2
   1155c:	str	r2, [sp, #12]
   11560:	movw	r2, #45912	; 0xb358
   11564:	movt	r2, #1
   11568:	stmib	sp, {r1, r3}
   1156c:	movw	r3, #53548	; 0xd12c
   11570:	movt	r3, #2
   11574:	movw	r1, #43572	; 0xaa34
   11578:	movt	r1, #1
   1157c:	str	r2, [sp]
   11580:	movw	r2, #45524	; 0xb1d4
   11584:	movt	r2, #1
   11588:	ldr	r0, [r0]
   1158c:	ldr	r3, [r3]
   11590:	bl	19830 <__assert_fail@plt+0x8560>
   11594:	mov	r0, r4
   11598:	bl	1115c <exit@plt>
   1159c:	cmn	r0, #2
   115a0:	bne	11474 <__assert_fail@plt+0x1a4>
   115a4:	mov	r0, r4
   115a8:	bl	11a74 <__assert_fail@plt+0x7a4>
   115ac:	mov	r3, #4
   115b0:	mov	fp, #1
   115b4:	strb	r4, [sp, #36]	; 0x24
   115b8:	str	r3, [sp, #40]	; 0x28
   115bc:	b	113a4 <__assert_fail@plt+0xd4>
   115c0:	mov	r3, #1
   115c4:	strb	r3, [sp, #54]	; 0x36
   115c8:	b	113a4 <__assert_fail@plt+0xd4>
   115cc:	mov	r3, #3
   115d0:	mov	fp, r4
   115d4:	strb	r4, [sp, #36]	; 0x24
   115d8:	str	r3, [sp, #40]	; 0x28
   115dc:	b	113a4 <__assert_fail@plt+0xd4>
   115e0:	ldr	r0, [r9]
   115e4:	cmp	r0, #0
   115e8:	beq	11628 <__assert_fail@plt+0x358>
   115ec:	movw	r1, #45812	; 0xb2f4
   115f0:	movt	r1, #1
   115f4:	bl	10fdc <strcmp@plt>
   115f8:	cmp	r0, #0
   115fc:	bne	11958 <__assert_fail@plt+0x688>
   11600:	mov	r3, #1
   11604:	str	r3, [sp, #28]
   11608:	strb	r3, [sp, #52]	; 0x34
   1160c:	b	113a4 <__assert_fail@plt+0xd4>
   11610:	mov	r3, #1
   11614:	strb	r3, [sp, #44]	; 0x2c
   11618:	b	113a4 <__assert_fail@plt+0xd4>
   1161c:	mov	r3, #1
   11620:	strb	r3, [sp, #46]	; 0x2e
   11624:	b	113a4 <__assert_fail@plt+0xd4>
   11628:	mov	r3, #1
   1162c:	str	r3, [sp, #28]
   11630:	b	113a4 <__assert_fail@plt+0xd4>
   11634:	movw	r4, #53632	; 0xd180
   11638:	movt	r4, #2
   1163c:	ldr	r3, [r4]
   11640:	cmp	r3, r7
   11644:	blt	11698 <__assert_fail@plt+0x3c8>
   11648:	ldrb	r4, [sp, #36]	; 0x24
   1164c:	cmp	r4, #0
   11650:	beq	1190c <__assert_fail@plt+0x63c>
   11654:	mov	r0, #0
   11658:	add	sp, sp, #164	; 0xa4
   1165c:	ldrd	r4, [sp]
   11660:	ldrd	r6, [sp, #8]
   11664:	ldrd	r8, [sp, #16]
   11668:	ldrd	sl, [sp, #24]
   1166c:	add	sp, sp, #32
   11670:	pop	{pc}		; (ldr pc, [sp], #4)
   11674:	mov	r3, #5
   11678:	mov	fp, #0
   1167c:	str	r3, [sp, #40]	; 0x28
   11680:	b	113a4 <__assert_fail@plt+0xd4>
   11684:	mov	fp, r3
   11688:	mov	r3, #4
   1168c:	strb	r4, [sp, #36]	; 0x24
   11690:	str	r3, [sp, #40]	; 0x28
   11694:	b	113a4 <__assert_fail@plt+0xd4>
   11698:	ldrb	r3, [sp, #45]	; 0x2d
   1169c:	ldr	r2, [sp, #28]
   116a0:	tst	r2, r3
   116a4:	bne	1189c <__assert_fail@plt+0x5cc>
   116a8:	ldr	r3, [r4]
   116ac:	cmp	fp, #0
   116b0:	add	r6, r5, r3, lsl #2
   116b4:	beq	11768 <__assert_fail@plt+0x498>
   116b8:	ldrb	r2, [sp, #45]	; 0x2d
   116bc:	sub	r7, r7, r3
   116c0:	mov	r4, r7
   116c4:	asr	r5, r7, #31
   116c8:	cmp	r2, #0
   116cc:	bne	117a8 <__assert_fail@plt+0x4d8>
   116d0:	cmp	r5, #0
   116d4:	cmpeq	r7, #3
   116d8:	bls	11768 <__assert_fail@plt+0x498>
   116dc:	mov	r1, #0
   116e0:	mvn	r0, #0
   116e4:	cmp	r5, r1
   116e8:	movw	r3, #53640	; 0xd188
   116ec:	movt	r3, #2
   116f0:	cmpeq	r7, r0
   116f4:	ldr	r8, [r3]
   116f8:	bls	118fc <__assert_fail@plt+0x62c>
   116fc:	movw	r2, #16960	; 0x4240
   11700:	movt	r2, #15
   11704:	mov	r3, #0
   11708:	mov	r0, r4
   1170c:	mov	r1, r5
   11710:	bl	1a704 <__assert_fail@plt+0x9434>
   11714:	add	r3, r2, #999424	; 0xf4000
   11718:	add	r3, r3, #576	; 0x240
   1171c:	mov	r0, #5
   11720:	movw	r2, #46104	; 0xb418
   11724:	movt	r2, #1
   11728:	movw	r1, #46132	; 0xb434
   1172c:	movt	r1, #1
   11730:	str	r0, [sp]
   11734:	mov	r0, #0
   11738:	bl	112b8 <dcngettext@plt>
   1173c:	mov	r2, r0
   11740:	movw	r3, #53692	; 0xd1bc
   11744:	movt	r3, #2
   11748:	strd	r4, [sp]
   1174c:	mov	r1, #1
   11750:	mov	r0, r8
   11754:	ldr	r3, [r3]
   11758:	bl	111bc <__fprintf_chk@plt>
   1175c:	bl	19edc <__assert_fail@plt+0x8c0c>
   11760:	cmp	r0, #0
   11764:	beq	11654 <__assert_fail@plt+0x384>
   11768:	mov	r0, r6
   1176c:	add	r1, sp, #36	; 0x24
   11770:	bl	125b4 <__assert_fail@plt+0x12e4>
   11774:	sub	r3, r0, #2
   11778:	cmp	r3, #2
   1177c:	subls	r0, r0, #4
   11780:	clzls	r0, r0
   11784:	lsrls	r0, r0, #5
   11788:	bls	11658 <__assert_fail@plt+0x388>
   1178c:	movw	r1, #46160	; 0xb450
   11790:	movt	r1, #1
   11794:	ldr	r3, [pc, #484]	; 11980 <__assert_fail@plt+0x6b0>
   11798:	movw	r0, #46172	; 0xb45c
   1179c:	movt	r0, #1
   117a0:	movw	r2, #371	; 0x173
   117a4:	bl	112d0 <__assert_fail@plt>
   117a8:	mov	r1, #0
   117ac:	mvn	r0, #0
   117b0:	cmp	r5, r1
   117b4:	movw	r3, #53640	; 0xd188
   117b8:	movt	r3, #2
   117bc:	cmpeq	r7, r0
   117c0:	ldr	r8, [r3]
   117c4:	bls	11904 <__assert_fail@plt+0x634>
   117c8:	movw	r2, #16960	; 0x4240
   117cc:	movt	r2, #15
   117d0:	mov	r3, #0
   117d4:	mov	r0, r4
   117d8:	mov	r1, r5
   117dc:	bl	1a704 <__assert_fail@plt+0x9434>
   117e0:	add	r3, r2, #999424	; 0xf4000
   117e4:	add	r3, r3, #576	; 0x240
   117e8:	mov	r0, #5
   117ec:	movw	r2, #46024	; 0xb3c8
   117f0:	movt	r2, #1
   117f4:	movw	r1, #46064	; 0xb3f0
   117f8:	movt	r1, #1
   117fc:	str	r0, [sp]
   11800:	mov	r0, #0
   11804:	bl	112b8 <dcngettext@plt>
   11808:	mov	r2, r0
   1180c:	b	11740 <__assert_fail@plt+0x470>
   11810:	ldrb	r3, [r6, #1]
   11814:	cmp	r3, #0
   11818:	beq	11490 <__assert_fail@plt+0x1c0>
   1181c:	add	r2, sp, #56	; 0x38
   11820:	mov	r1, r6
   11824:	mov	r0, #3
   11828:	bl	112ac <__lxstat64@plt>
   1182c:	cmp	r0, #0
   11830:	bne	11490 <__assert_fail@plt+0x1c0>
   11834:	mov	r2, #5
   11838:	movw	r3, #53640	; 0xd188
   1183c:	movt	r3, #2
   11840:	movw	r1, #45924	; 0xb364
   11844:	movt	r1, #1
   11848:	ldr	r4, [r3]
   1184c:	bl	11060 <dcgettext@plt>
   11850:	ldr	r8, [r5]
   11854:	mov	r2, r6
   11858:	mov	r7, r0
   1185c:	mov	r1, #3
   11860:	mov	r0, #1
   11864:	bl	18f9c <__assert_fail@plt+0x7ccc>
   11868:	mov	r5, r0
   1186c:	mov	r1, r6
   11870:	mov	r0, #4
   11874:	bl	19028 <__assert_fail@plt+0x7d58>
   11878:	mov	r3, r8
   1187c:	mov	r2, r7
   11880:	str	r5, [sp]
   11884:	mov	r1, #1
   11888:	str	r0, [sp, #4]
   1188c:	mov	r0, r4
   11890:	bl	111bc <__fprintf_chk@plt>
   11894:	mov	r0, #1
   11898:	bl	11a74 <__assert_fail@plt+0x7a4>
   1189c:	movw	r0, #53664	; 0xd1a0
   118a0:	movt	r0, #2
   118a4:	bl	192f4 <__assert_fail@plt+0x8024>
   118a8:	cmp	r0, #0
   118ac:	mov	r6, r0
   118b0:	str	r0, [sp, #48]	; 0x30
   118b4:	bne	116a8 <__assert_fail@plt+0x3d8>
   118b8:	bl	11180 <__errno_location@plt>
   118bc:	movw	r1, #45988	; 0xb3a4
   118c0:	movt	r1, #1
   118c4:	ldr	r4, [r0]
   118c8:	mov	r2, #5
   118cc:	mov	r0, r6
   118d0:	bl	11060 <dcgettext@plt>
   118d4:	mov	r5, r0
   118d8:	movw	r1, #46020	; 0xb3c4
   118dc:	movt	r1, #1
   118e0:	mov	r0, #4
   118e4:	bl	19028 <__assert_fail@plt+0x7d58>
   118e8:	mov	r3, r0
   118ec:	mov	r2, r5
   118f0:	mov	r1, r4
   118f4:	mov	r0, #1
   118f8:	bl	110f0 <error@plt>
   118fc:	mov	r3, r7
   11900:	b	1171c <__assert_fail@plt+0x44c>
   11904:	mov	r3, r7
   11908:	b	117e8 <__assert_fail@plt+0x518>
   1190c:	mov	r2, #5
   11910:	mov	r0, r4
   11914:	movw	r1, #45972	; 0xb394
   11918:	movt	r1, #1
   1191c:	bl	11060 <dcgettext@plt>
   11920:	mov	r2, r0
   11924:	mov	r1, r4
   11928:	mov	r0, r4
   1192c:	bl	110f0 <error@plt>
   11930:	b	11894 <__assert_fail@plt+0x5c4>
   11934:	mov	r2, #5
   11938:	movw	r1, #45756	; 0xb2bc
   1193c:	movt	r1, #1
   11940:	mov	r0, r4
   11944:	bl	11060 <dcgettext@plt>
   11948:	mov	r2, r0
   1194c:	mov	r1, r4
   11950:	mov	r0, #1
   11954:	bl	110f0 <error@plt>
   11958:	movw	r1, #45816	; 0xb2f8
   1195c:	movt	r1, #1
   11960:	mov	r2, #5
   11964:	mov	r0, r4
   11968:	bl	11060 <dcgettext@plt>
   1196c:	mov	r5, r0
   11970:	mov	r0, #4
   11974:	ldr	r1, [r9]
   11978:	b	118e4 <__assert_fail@plt+0x614>
   1197c:	andeq	sl, r1, r8, lsr r9
   11980:	andeq	sl, r1, ip, lsr #20
   11984:	mov	fp, #0
   11988:	mov	lr, #0
   1198c:	pop	{r1}		; (ldr r1, [sp], #4)
   11990:	mov	r2, sp
   11994:	push	{r2}		; (str r2, [sp, #-4]!)
   11998:	push	{r0}		; (str r0, [sp, #-4]!)
   1199c:	ldr	ip, [pc, #16]	; 119b4 <__assert_fail@plt+0x6e4>
   119a0:	push	{ip}		; (str ip, [sp, #-4]!)
   119a4:	ldr	r0, [pc, #12]	; 119b8 <__assert_fail@plt+0x6e8>
   119a8:	ldr	r3, [pc, #12]	; 119bc <__assert_fail@plt+0x6ec>
   119ac:	bl	11114 <__libc_start_main@plt>
   119b0:	bl	11294 <abort@plt>
   119b4:	ldrdeq	sl, [r1], -r8
   119b8:	andeq	r1, r1, r0, ror #5
   119bc:	andeq	sl, r1, r8, ror r8
   119c0:	ldr	r3, [pc, #20]	; 119dc <__assert_fail@plt+0x70c>
   119c4:	ldr	r2, [pc, #20]	; 119e0 <__assert_fail@plt+0x710>
   119c8:	add	r3, pc, r3
   119cc:	ldr	r2, [r3, r2]
   119d0:	cmp	r2, #0
   119d4:	bxeq	lr
   119d8:	b	1112c <__gmon_start__@plt>
   119dc:	andeq	fp, r1, r0, lsr r6
   119e0:	andeq	r0, r0, r0, lsr #2
   119e4:	ldr	r0, [pc, #24]	; 11a04 <__assert_fail@plt+0x734>
   119e8:	ldr	r3, [pc, #24]	; 11a08 <__assert_fail@plt+0x738>
   119ec:	cmp	r3, r0
   119f0:	bxeq	lr
   119f4:	ldr	r3, [pc, #16]	; 11a0c <__assert_fail@plt+0x73c>
   119f8:	cmp	r3, #0
   119fc:	bxeq	lr
   11a00:	bx	r3
   11a04:	andeq	sp, r2, r8, ror r1
   11a08:	andeq	sp, r2, r8, ror r1
   11a0c:	andeq	r0, r0, r0
   11a10:	ldr	r0, [pc, #36]	; 11a3c <__assert_fail@plt+0x76c>
   11a14:	ldr	r1, [pc, #36]	; 11a40 <__assert_fail@plt+0x770>
   11a18:	sub	r1, r1, r0
   11a1c:	asr	r1, r1, #2
   11a20:	add	r1, r1, r1, lsr #31
   11a24:	asrs	r1, r1, #1
   11a28:	bxeq	lr
   11a2c:	ldr	r3, [pc, #16]	; 11a44 <__assert_fail@plt+0x774>
   11a30:	cmp	r3, #0
   11a34:	bxeq	lr
   11a38:	bx	r3
   11a3c:	andeq	sp, r2, r8, ror r1
   11a40:	andeq	sp, r2, r8, ror r1
   11a44:	andeq	r0, r0, r0
   11a48:	push	{r4, lr}
   11a4c:	ldr	r4, [pc, #24]	; 11a6c <__assert_fail@plt+0x79c>
   11a50:	ldrb	r3, [r4]
   11a54:	cmp	r3, #0
   11a58:	popne	{r4, pc}
   11a5c:	bl	119e4 <__assert_fail@plt+0x714>
   11a60:	mov	r3, #1
   11a64:	strb	r3, [r4]
   11a68:	pop	{r4, pc}
   11a6c:	muleq	r2, ip, r1
   11a70:	b	11a10 <__assert_fail@plt+0x740>
   11a74:	subs	r6, r0, #0
   11a78:	str	r7, [sp, #-8]!
   11a7c:	str	lr, [sp, #4]
   11a80:	sub	sp, sp, #56	; 0x38
   11a84:	beq	11acc <__assert_fail@plt+0x7fc>
   11a88:	movw	r3, #53640	; 0xd188
   11a8c:	movt	r3, #2
   11a90:	ldr	r4, [r3]
   11a94:	mov	r2, #5
   11a98:	movw	r1, #43576	; 0xaa38
   11a9c:	movt	r1, #1
   11aa0:	mov	r0, #0
   11aa4:	bl	11060 <dcgettext@plt>
   11aa8:	movw	r3, #53692	; 0xd1bc
   11aac:	movt	r3, #2
   11ab0:	mov	r2, r0
   11ab4:	mov	r1, #1
   11ab8:	ldr	r3, [r3]
   11abc:	mov	r0, r4
   11ac0:	bl	111bc <__fprintf_chk@plt>
   11ac4:	mov	r0, r6
   11ac8:	bl	1115c <exit@plt>
   11acc:	mov	r2, #5
   11ad0:	movw	r1, #43616	; 0xaa60
   11ad4:	movt	r1, #1
   11ad8:	movw	r4, #53692	; 0xd1bc
   11adc:	movt	r4, #2
   11ae0:	movw	r7, #53652	; 0xd194
   11ae4:	movt	r7, #2
   11ae8:	bl	11060 <dcgettext@plt>
   11aec:	mov	r1, r0
   11af0:	mov	r0, #1
   11af4:	ldr	r2, [r4]
   11af8:	bl	111a4 <__printf_chk@plt>
   11afc:	mov	r2, #5
   11b00:	movw	r1, #43652	; 0xaa84
   11b04:	movt	r1, #1
   11b08:	mov	r0, r6
   11b0c:	bl	11060 <dcgettext@plt>
   11b10:	ldr	r1, [r7]
   11b14:	bl	10fb8 <fputs_unlocked@plt>
   11b18:	mov	r2, #5
   11b1c:	movw	r1, #43812	; 0xab24
   11b20:	movt	r1, #1
   11b24:	mov	r0, r6
   11b28:	bl	11060 <dcgettext@plt>
   11b2c:	ldr	r1, [r7]
   11b30:	bl	10fb8 <fputs_unlocked@plt>
   11b34:	mov	r2, #5
   11b38:	movw	r1, #44188	; 0xac9c
   11b3c:	movt	r1, #1
   11b40:	mov	r0, r6
   11b44:	bl	11060 <dcgettext@plt>
   11b48:	ldr	r1, [r7]
   11b4c:	bl	10fb8 <fputs_unlocked@plt>
   11b50:	mov	r2, #5
   11b54:	movw	r1, #44412	; 0xad7c
   11b58:	movt	r1, #1
   11b5c:	mov	r0, r6
   11b60:	bl	11060 <dcgettext@plt>
   11b64:	ldr	r1, [r7]
   11b68:	bl	10fb8 <fputs_unlocked@plt>
   11b6c:	mov	r2, #5
   11b70:	movw	r1, #44668	; 0xae7c
   11b74:	movt	r1, #1
   11b78:	mov	r0, r6
   11b7c:	bl	11060 <dcgettext@plt>
   11b80:	ldr	r1, [r7]
   11b84:	bl	10fb8 <fputs_unlocked@plt>
   11b88:	mov	r2, #5
   11b8c:	movw	r1, #44844	; 0xaf2c
   11b90:	movt	r1, #1
   11b94:	mov	r0, r6
   11b98:	bl	11060 <dcgettext@plt>
   11b9c:	ldr	r1, [r7]
   11ba0:	bl	10fb8 <fputs_unlocked@plt>
   11ba4:	mov	r2, #5
   11ba8:	movw	r1, #44892	; 0xaf5c
   11bac:	movt	r1, #1
   11bb0:	mov	r0, r6
   11bb4:	bl	11060 <dcgettext@plt>
   11bb8:	ldr	r1, [r7]
   11bbc:	bl	10fb8 <fputs_unlocked@plt>
   11bc0:	mov	r2, #5
   11bc4:	movw	r1, #44948	; 0xaf94
   11bc8:	movt	r1, #1
   11bcc:	mov	r0, r6
   11bd0:	bl	11060 <dcgettext@plt>
   11bd4:	ldr	r1, [r7]
   11bd8:	bl	10fb8 <fputs_unlocked@plt>
   11bdc:	mov	r2, #5
   11be0:	movw	r1, #45104	; 0xb030
   11be4:	movt	r1, #1
   11be8:	mov	r0, r6
   11bec:	bl	11060 <dcgettext@plt>
   11bf0:	ldr	r3, [r4]
   11bf4:	mov	r1, r0
   11bf8:	mov	r0, #1
   11bfc:	mov	r2, r3
   11c00:	bl	111a4 <__printf_chk@plt>
   11c04:	mov	r2, #5
   11c08:	movw	r1, #45228	; 0xb0ac
   11c0c:	movt	r1, #1
   11c10:	mov	r0, r6
   11c14:	bl	11060 <dcgettext@plt>
   11c18:	ldr	r1, [r7]
   11c1c:	bl	10fb8 <fputs_unlocked@plt>
   11c20:	movw	lr, #43264	; 0xa900
   11c24:	movt	lr, #1
   11c28:	ldr	ip, [lr]
   11c2c:	ldr	r4, [lr, #4]
   11c30:	ldrd	r8, [lr, #8]
   11c34:	subs	r1, ip, #0
   11c38:	str	ip, [sp]
   11c3c:	ldrd	r2, [lr, #16]
   11c40:	str	r4, [sp, #4]
   11c44:	ldrd	r4, [lr, #24]
   11c48:	strd	r8, [sp, #8]
   11c4c:	ldrd	r8, [lr, #32]
   11c50:	strd	r2, [sp, #16]
   11c54:	ldrd	r2, [lr, #40]	; 0x28
   11c58:	strd	r4, [sp, #24]
   11c5c:	ldrd	r4, [lr, #48]	; 0x30
   11c60:	strd	r8, [sp, #32]
   11c64:	strd	r2, [sp, #40]	; 0x28
   11c68:	strd	r4, [sp, #48]	; 0x30
   11c6c:	movwne	r5, #43572	; 0xaa34
   11c70:	mov	r4, sp
   11c74:	movtne	r5, #1
   11c78:	bne	11d70 <__assert_fail@plt+0xaa0>
   11c7c:	ldr	r4, [r4, #4]
   11c80:	movw	r1, #45460	; 0xb194
   11c84:	movt	r1, #1
   11c88:	mov	r2, #5
   11c8c:	cmp	r4, #0
   11c90:	beq	11d84 <__assert_fail@plt+0xab4>
   11c94:	mov	r0, #0
   11c98:	bl	11060 <dcgettext@plt>
   11c9c:	mov	r1, r0
   11ca0:	movw	r3, #45484	; 0xb1ac
   11ca4:	movt	r3, #1
   11ca8:	movw	r2, #45524	; 0xb1d4
   11cac:	movt	r2, #1
   11cb0:	mov	r0, #1
   11cb4:	bl	111a4 <__printf_chk@plt>
   11cb8:	mov	r1, #0
   11cbc:	mov	r0, #5
   11cc0:	bl	11204 <setlocale@plt>
   11cc4:	cmp	r0, #0
   11cc8:	movweq	r5, #43572	; 0xaa34
   11ccc:	movteq	r5, #1
   11cd0:	beq	11cf4 <__assert_fail@plt+0xa24>
   11cd4:	movw	r1, #45540	; 0xb1e4
   11cd8:	movt	r1, #1
   11cdc:	mov	r2, #3
   11ce0:	movw	r5, #43572	; 0xaa34
   11ce4:	movt	r5, #1
   11ce8:	bl	11288 <strncmp@plt>
   11cec:	cmp	r0, #0
   11cf0:	bne	11e3c <__assert_fail@plt+0xb6c>
   11cf4:	mov	r2, #5
   11cf8:	movw	r1, #45616	; 0xb230
   11cfc:	movt	r1, #1
   11d00:	mov	r0, #0
   11d04:	bl	11060 <dcgettext@plt>
   11d08:	mov	r1, r0
   11d0c:	movw	r3, #43572	; 0xaa34
   11d10:	movt	r3, #1
   11d14:	movw	r2, #45484	; 0xb1ac
   11d18:	movt	r2, #1
   11d1c:	mov	r0, #1
   11d20:	bl	111a4 <__printf_chk@plt>
   11d24:	mov	r2, #5
   11d28:	movw	r1, #45644	; 0xb24c
   11d2c:	movt	r1, #1
   11d30:	mov	r0, #0
   11d34:	bl	11060 <dcgettext@plt>
   11d38:	movw	r2, #46204	; 0xb47c
   11d3c:	movt	r2, #1
   11d40:	cmp	r4, r5
   11d44:	movw	r3, #47816	; 0xbac8
   11d48:	movt	r3, #1
   11d4c:	mov	r1, r0
   11d50:	moveq	r3, r2
   11d54:	mov	r2, r4
   11d58:	mov	r0, #1
   11d5c:	bl	111a4 <__printf_chk@plt>
   11d60:	b	11ac4 <__assert_fail@plt+0x7f4>
   11d64:	ldr	r1, [r4, #8]!
   11d68:	cmp	r1, #0
   11d6c:	beq	11c7c <__assert_fail@plt+0x9ac>
   11d70:	mov	r0, r5
   11d74:	bl	10fdc <strcmp@plt>
   11d78:	cmp	r0, #0
   11d7c:	bne	11d64 <__assert_fail@plt+0xa94>
   11d80:	b	11c7c <__assert_fail@plt+0x9ac>
   11d84:	mov	r0, r4
   11d88:	bl	11060 <dcgettext@plt>
   11d8c:	mov	r1, r0
   11d90:	movw	r3, #45484	; 0xb1ac
   11d94:	movt	r3, #1
   11d98:	movw	r2, #45524	; 0xb1d4
   11d9c:	movt	r2, #1
   11da0:	mov	r0, #1
   11da4:	bl	111a4 <__printf_chk@plt>
   11da8:	mov	r1, r4
   11dac:	mov	r0, #5
   11db0:	bl	11204 <setlocale@plt>
   11db4:	cmp	r0, #0
   11db8:	beq	11dd4 <__assert_fail@plt+0xb04>
   11dbc:	movw	r1, #45540	; 0xb1e4
   11dc0:	movt	r1, #1
   11dc4:	mov	r2, #3
   11dc8:	bl	11288 <strncmp@plt>
   11dcc:	cmp	r0, #0
   11dd0:	bne	11e30 <__assert_fail@plt+0xb60>
   11dd4:	mov	r2, #5
   11dd8:	movw	r1, #45616	; 0xb230
   11ddc:	movt	r1, #1
   11de0:	mov	r0, #0
   11de4:	bl	11060 <dcgettext@plt>
   11de8:	mov	r1, r0
   11dec:	movw	r3, #43572	; 0xaa34
   11df0:	movt	r3, #1
   11df4:	movw	r2, #45484	; 0xb1ac
   11df8:	movt	r2, #1
   11dfc:	mov	r0, #1
   11e00:	bl	111a4 <__printf_chk@plt>
   11e04:	movw	r1, #45644	; 0xb24c
   11e08:	movt	r1, #1
   11e0c:	mov	r2, #5
   11e10:	mov	r0, #0
   11e14:	bl	11060 <dcgettext@plt>
   11e18:	movw	r4, #43572	; 0xaa34
   11e1c:	movt	r4, #1
   11e20:	movw	r3, #46204	; 0xb47c
   11e24:	movt	r3, #1
   11e28:	mov	r1, r0
   11e2c:	b	11d54 <__assert_fail@plt+0xa84>
   11e30:	movw	r5, #43572	; 0xaa34
   11e34:	movt	r5, #1
   11e38:	mov	r4, r5
   11e3c:	mov	r2, #5
   11e40:	movw	r1, #45544	; 0xb1e8
   11e44:	movt	r1, #1
   11e48:	mov	r0, #0
   11e4c:	bl	11060 <dcgettext@plt>
   11e50:	ldr	r1, [r7]
   11e54:	bl	10fb8 <fputs_unlocked@plt>
   11e58:	b	11cf4 <__assert_fail@plt+0xa24>
   11e5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11e60:	subs	r4, r3, #0
   11e64:	mov	r5, r1
   11e68:	ldr	r1, [r1, #24]
   11e6c:	strd	r6, [sp, #8]
   11e70:	mov	r7, r2
   11e74:	mov	r6, r0
   11e78:	movne	r2, #512	; 0x200
   11e7c:	moveq	r2, #0
   11e80:	str	r8, [sp, #16]
   11e84:	str	lr, [sp, #20]
   11e88:	sub	sp, sp, #112	; 0x70
   11e8c:	ldr	r0, [r0]
   11e90:	bl	10ff4 <unlinkat@plt>
   11e94:	cmp	r0, #0
   11e98:	beq	11f7c <__assert_fail@plt+0xcac>
   11e9c:	bl	11180 <__errno_location@plt>
   11ea0:	ldr	r4, [r0]
   11ea4:	mov	r8, r0
   11ea8:	cmp	r4, #30
   11eac:	beq	1202c <__assert_fail@plt+0xd5c>
   11eb0:	ldrb	r3, [r7]
   11eb4:	cmp	r3, #0
   11eb8:	beq	11ed8 <__assert_fail@plt+0xc08>
   11ebc:	cmp	r4, #20
   11ec0:	beq	11f88 <__assert_fail@plt+0xcb8>
   11ec4:	ble	11f90 <__assert_fail@plt+0xcc0>
   11ec8:	cmp	r4, #22
   11ecc:	beq	11f88 <__assert_fail@plt+0xcb8>
   11ed0:	cmp	r4, #84	; 0x54
   11ed4:	beq	11f88 <__assert_fail@plt+0xcb8>
   11ed8:	ldrh	r3, [r5, #56]	; 0x38
   11edc:	cmp	r3, #4
   11ee0:	beq	11fec <__assert_fail@plt+0xd1c>
   11ee4:	mov	r2, #5
   11ee8:	movw	r1, #46516	; 0xb5b4
   11eec:	movt	r1, #1
   11ef0:	mov	r0, #0
   11ef4:	bl	11060 <dcgettext@plt>
   11ef8:	mov	r6, r0
   11efc:	mov	r0, #4
   11f00:	ldr	r1, [r5, #28]
   11f04:	bl	19028 <__assert_fail@plt+0x7d58>
   11f08:	mov	r3, r0
   11f0c:	mov	r2, r6
   11f10:	mov	r1, r4
   11f14:	mov	r0, #0
   11f18:	bl	110f0 <error@plt>
   11f1c:	ldr	r3, [r5, #4]
   11f20:	ldr	r2, [r3, #48]	; 0x30
   11f24:	cmp	r2, #0
   11f28:	blt	11f60 <__assert_fail@plt+0xc90>
   11f2c:	ldr	r2, [r3, #16]
   11f30:	cmp	r2, #0
   11f34:	bne	11f60 <__assert_fail@plt+0xc90>
   11f38:	mov	r1, #1
   11f3c:	b	11f4c <__assert_fail@plt+0xc7c>
   11f40:	ldr	r2, [r3, #16]
   11f44:	cmp	r2, #0
   11f48:	bne	11f60 <__assert_fail@plt+0xc90>
   11f4c:	str	r1, [r3, #16]
   11f50:	ldr	r3, [r3, #4]
   11f54:	ldr	r2, [r3, #48]	; 0x30
   11f58:	cmp	r2, #0
   11f5c:	bge	11f40 <__assert_fail@plt+0xc70>
   11f60:	mov	r0, #4
   11f64:	add	sp, sp, #112	; 0x70
   11f68:	ldrd	r4, [sp]
   11f6c:	ldrd	r6, [sp, #8]
   11f70:	ldr	r8, [sp, #16]
   11f74:	add	sp, sp, #20
   11f78:	pop	{pc}		; (ldr pc, [sp], #4)
   11f7c:	ldrb	r3, [r7, #18]
   11f80:	cmp	r3, #0
   11f84:	bne	11fa8 <__assert_fail@plt+0xcd8>
   11f88:	mov	r0, #2
   11f8c:	b	11f64 <__assert_fail@plt+0xc94>
   11f90:	cmp	r4, #2
   11f94:	beq	11f88 <__assert_fail@plt+0xcb8>
   11f98:	ldrh	r3, [r5, #56]	; 0x38
   11f9c:	cmp	r3, #4
   11fa0:	bne	11ee4 <__assert_fail@plt+0xc14>
   11fa4:	b	11fec <__assert_fail@plt+0xd1c>
   11fa8:	cmp	r4, #0
   11fac:	mov	r2, #5
   11fb0:	movwne	r1, #46480	; 0xb590
   11fb4:	movweq	r1, #46504	; 0xb5a8
   11fb8:	movtne	r1, #1
   11fbc:	movteq	r1, #1
   11fc0:	bl	11060 <dcgettext@plt>
   11fc4:	mov	r4, r0
   11fc8:	mov	r0, #4
   11fcc:	ldr	r1, [r5, #28]
   11fd0:	bl	19028 <__assert_fail@plt+0x7d58>
   11fd4:	mov	r2, r0
   11fd8:	mov	r1, r4
   11fdc:	mov	r0, #1
   11fe0:	bl	111a4 <__printf_chk@plt>
   11fe4:	mov	r0, #2
   11fe8:	b	11f64 <__assert_fail@plt+0xc94>
   11fec:	cmp	r4, #17
   11ff0:	cmpne	r4, #39	; 0x27
   11ff4:	sub	r2, r4, #20
   11ff8:	moveq	r3, #1
   11ffc:	movne	r3, #0
   12000:	cmp	r2, #1
   12004:	orrls	r3, r3, #1
   12008:	cmp	r3, #0
   1200c:	moveq	r0, r4
   12010:	beq	12074 <__assert_fail@plt+0xda4>
   12014:	ldr	r3, [r5, #32]
   12018:	cmp	r3, #13
   1201c:	cmpne	r3, #1
   12020:	moveq	r4, r3
   12024:	streq	r3, [r8]
   12028:	b	11ee4 <__assert_fail@plt+0xc14>
   1202c:	mov	r2, #256	; 0x100
   12030:	add	r3, sp, #8
   12034:	ldr	r1, [r6]
   12038:	mov	r0, #3
   1203c:	str	r2, [sp]
   12040:	ldr	r2, [r5, #24]
   12044:	bl	11090 <__fxstatat64@plt>
   12048:	cmp	r0, #0
   1204c:	beq	1205c <__assert_fail@plt+0xd8c>
   12050:	ldr	r0, [r8]
   12054:	cmp	r0, #2
   12058:	beq	12068 <__assert_fail@plt+0xd98>
   1205c:	mov	r3, #30
   12060:	str	r3, [r8]
   12064:	b	11ee4 <__assert_fail@plt+0xc14>
   12068:	ldrb	r3, [r7]
   1206c:	cmp	r3, #0
   12070:	bne	11f64 <__assert_fail@plt+0xc94>
   12074:	mov	r4, r0
   12078:	b	11ee4 <__assert_fail@plt+0xc14>
   1207c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12080:	ldrd	r4, [r2, #48]	; 0x30
   12084:	str	r6, [sp, #8]
   12088:	mov	r6, r2
   1208c:	strd	r8, [sp, #12]
   12090:	mvn	r9, #0
   12094:	mvn	r8, #0
   12098:	str	lr, [sp, #20]
   1209c:	sub	sp, sp, #8
   120a0:	cmp	r5, r9
   120a4:	cmpeq	r4, r8
   120a8:	beq	120d4 <__assert_fail@plt+0xe04>
   120ac:	cmp	r4, #0
   120b0:	sbcs	r3, r5, #0
   120b4:	movge	r0, #0
   120b8:	blt	12130 <__assert_fail@plt+0xe60>
   120bc:	add	sp, sp, #8
   120c0:	ldrd	r4, [sp]
   120c4:	ldr	r6, [sp, #8]
   120c8:	ldrd	r8, [sp, #12]
   120cc:	add	sp, sp, #20
   120d0:	pop	{pc}		; (ldr pc, [sp], #4)
   120d4:	mov	ip, #256	; 0x100
   120d8:	mov	r2, r1
   120dc:	mov	r3, r6
   120e0:	mov	r1, r0
   120e4:	mov	r0, #3
   120e8:	str	ip, [sp]
   120ec:	bl	11090 <__fxstatat64@plt>
   120f0:	cmp	r0, #0
   120f4:	beq	12128 <__assert_fail@plt+0xe58>
   120f8:	mvn	r2, #1
   120fc:	mvn	r3, #0
   12100:	strd	r2, [r6, #48]	; 0x30
   12104:	bl	11180 <__errno_location@plt>
   12108:	ldr	r2, [r0]
   1210c:	mov	r3, r0
   12110:	asr	r1, r2, #31
   12114:	mov	r0, r2
   12118:	strd	r0, [r6, #96]	; 0x60
   1211c:	mvn	r0, #0
   12120:	str	r2, [r3]
   12124:	b	120bc <__assert_fail@plt+0xdec>
   12128:	ldrd	r4, [r6, #48]	; 0x30
   1212c:	b	120ac <__assert_fail@plt+0xddc>
   12130:	bl	11180 <__errno_location@plt>
   12134:	mov	r3, r0
   12138:	ldr	r2, [r6, #96]	; 0x60
   1213c:	b	1211c <__assert_fail@plt+0xe4c>
   12140:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12144:	mov	r5, r1
   12148:	mov	r4, r2
   1214c:	strd	r6, [sp, #8]
   12150:	mov	r7, r3
   12154:	strd	r8, [sp, #16]
   12158:	mov	r9, r0
   1215c:	strd	sl, [sp, #24]
   12160:	str	lr, [sp, #32]
   12164:	sub	sp, sp, #132	; 0x84
   12168:	ldr	r6, [sp, #172]	; 0xac
   1216c:	ldr	r8, [r1, #24]
   12170:	ldr	r3, [r1, #28]
   12174:	cmp	r6, #0
   12178:	str	r3, [sp, #16]
   1217c:	beq	12458 <__assert_fail@plt+0x1188>
   12180:	mov	r3, #2
   12184:	cmp	r2, #0
   12188:	mvn	sl, #0
   1218c:	mvn	fp, #0
   12190:	str	r3, [r6]
   12194:	movne	r3, #4
   12198:	moveq	r3, #0
   1219c:	mov	r2, #51456	; 0xc900
   121a0:	mov	r1, r8
   121a4:	str	r3, [sp, #12]
   121a8:	strd	sl, [sp, #72]	; 0x48
   121ac:	bl	11174 <openat64@plt>
   121b0:	subs	r3, r0, #0
   121b4:	str	r3, [sp, #20]
   121b8:	blt	12244 <__assert_fail@plt+0xf74>
   121bc:	bl	11234 <fdopendir@plt>
   121c0:	subs	r4, r0, #0
   121c4:	ldr	r3, [sp, #20]
   121c8:	beq	1253c <__assert_fail@plt+0x126c>
   121cc:	bl	11180 <__errno_location@plt>
   121d0:	mov	sl, r0
   121d4:	mov	r3, #0
   121d8:	str	r3, [r0]
   121dc:	mov	r0, r4
   121e0:	bl	11228 <readdir64@plt>
   121e4:	cmp	r0, #0
   121e8:	beq	1221c <__assert_fail@plt+0xf4c>
   121ec:	ldrb	r3, [r0, #19]
   121f0:	cmp	r3, #46	; 0x2e
   121f4:	beq	124f8 <__assert_fail@plt+0x1228>
   121f8:	ldr	r2, [sl]
   121fc:	mov	r0, r4
   12200:	mov	r4, #0
   12204:	str	r2, [sp, #20]
   12208:	bl	112c4 <closedir@plt>
   1220c:	ldr	r2, [sp, #20]
   12210:	mov	r3, #3
   12214:	str	r2, [sl]
   12218:	b	1224c <__assert_fail@plt+0xf7c>
   1221c:	ldr	r3, [sl]
   12220:	mov	r0, r4
   12224:	str	r3, [sp, #20]
   12228:	bl	112c4 <closedir@plt>
   1222c:	ldr	r3, [sp, #20]
   12230:	cmp	r3, #0
   12234:	str	r3, [sl]
   12238:	moveq	r4, #1
   1223c:	moveq	r3, #4
   12240:	beq	1224c <__assert_fail@plt+0xf7c>
   12244:	mov	r4, #0
   12248:	mov	r3, #3
   1224c:	str	r3, [r6]
   12250:	ldr	r5, [r5, #16]
   12254:	cmp	r5, #0
   12258:	bne	12440 <__assert_fail@plt+0x1170>
   1225c:	ldr	r3, [r7, #4]
   12260:	cmp	r3, #5
   12264:	beq	12420 <__assert_fail@plt+0x1150>
   12268:	ldrb	r2, [r7]
   1226c:	cmp	r2, #0
   12270:	bne	1244c <__assert_fail@plt+0x117c>
   12274:	cmp	r3, #3
   12278:	beq	12288 <__assert_fail@plt+0xfb8>
   1227c:	ldrb	r3, [r7, #17]
   12280:	cmp	r3, #0
   12284:	beq	12420 <__assert_fail@plt+0x1150>
   12288:	bl	19940 <__assert_fail@plt+0x8670>
   1228c:	cmp	r0, #0
   12290:	bne	12448 <__assert_fail@plt+0x1178>
   12294:	add	r2, sp, #24
   12298:	mov	r1, r8
   1229c:	mov	r0, r9
   122a0:	bl	1207c <__assert_fail@plt+0xdac>
   122a4:	cmp	r0, #0
   122a8:	bne	12520 <__assert_fail@plt+0x1250>
   122ac:	ldr	r3, [sp, #40]	; 0x28
   122b0:	and	r3, r3, #61440	; 0xf000
   122b4:	cmp	r3, #40960	; 0xa000
   122b8:	beq	12448 <__assert_fail@plt+0x1178>
   122bc:	mov	r3, #512	; 0x200
   122c0:	mov	r2, #2
   122c4:	mov	r1, r8
   122c8:	mov	r0, r9
   122cc:	bl	11018 <faccessat@plt>
   122d0:	cmp	r0, #0
   122d4:	beq	12448 <__assert_fail@plt+0x1178>
   122d8:	bl	11180 <__errno_location@plt>
   122dc:	ldr	r5, [r0]
   122e0:	cmp	r5, #13
   122e4:	bne	12528 <__assert_fail@plt+0x1258>
   122e8:	mov	r5, #1
   122ec:	ldr	r3, [sp, #12]
   122f0:	cmp	r3, #0
   122f4:	beq	12360 <__assert_fail@plt+0x1090>
   122f8:	ldr	r3, [sp, #12]
   122fc:	cmp	r3, #4
   12300:	bne	125ac <__assert_fail@plt+0x12dc>
   12304:	ldrb	r3, [r7, #9]
   12308:	cmp	r3, #0
   1230c:	bne	12480 <__assert_fail@plt+0x11b0>
   12310:	ldrb	r3, [r7, #10]
   12314:	tst	r4, r3
   12318:	bne	125ac <__assert_fail@plt+0x12dc>
   1231c:	mov	r0, #4
   12320:	ldr	r1, [sp, #16]
   12324:	mov	r5, #21
   12328:	bl	19028 <__assert_fail@plt+0x7d58>
   1232c:	mov	r4, r0
   12330:	mov	r2, #5
   12334:	movw	r1, #46516	; 0xb5b4
   12338:	movt	r1, #1
   1233c:	mov	r0, #0
   12340:	bl	11060 <dcgettext@plt>
   12344:	mov	r2, r0
   12348:	mov	r3, r4
   1234c:	mov	r0, #0
   12350:	mov	r1, r5
   12354:	bl	110f0 <error@plt>
   12358:	mov	r0, #4
   1235c:	b	12424 <__assert_fail@plt+0x1154>
   12360:	add	r6, sp, #24
   12364:	mov	r1, r8
   12368:	mov	r2, r6
   1236c:	mov	r0, r9
   12370:	bl	1207c <__assert_fail@plt+0xdac>
   12374:	cmp	r0, #0
   12378:	bne	12520 <__assert_fail@plt+0x1250>
   1237c:	ldr	r3, [sp, #40]	; 0x28
   12380:	and	r3, r3, #61440	; 0xf000
   12384:	cmp	r3, #40960	; 0xa000
   12388:	beq	12564 <__assert_fail@plt+0x1294>
   1238c:	cmp	r3, #16384	; 0x4000
   12390:	beq	12304 <__assert_fail@plt+0x1034>
   12394:	mov	r0, #4
   12398:	ldr	r1, [sp, #16]
   1239c:	bl	19028 <__assert_fail@plt+0x7d58>
   123a0:	mov	r7, r0
   123a4:	mov	r1, r8
   123a8:	mov	r0, r9
   123ac:	mov	r2, r6
   123b0:	bl	1207c <__assert_fail@plt+0xdac>
   123b4:	cmp	r0, #0
   123b8:	bne	12574 <__assert_fail@plt+0x12a4>
   123bc:	cmp	r5, #0
   123c0:	mov	r2, #5
   123c4:	movwne	r1, #46616	; 0xb618
   123c8:	movweq	r1, #46652	; 0xb63c
   123cc:	movtne	r1, #1
   123d0:	movteq	r1, #1
   123d4:	movw	r3, #53640	; 0xd188
   123d8:	movt	r3, #2
   123dc:	ldr	r5, [r3]
   123e0:	bl	11060 <dcgettext@plt>
   123e4:	movw	r3, #53692	; 0xd1bc
   123e8:	movt	r3, #2
   123ec:	ldr	r4, [r3]
   123f0:	mov	r8, r0
   123f4:	mov	r0, r6
   123f8:	bl	13680 <__assert_fail@plt+0x23b0>
   123fc:	mov	r2, r8
   12400:	mov	r1, #1
   12404:	stm	sp, {r0, r7}
   12408:	mov	r0, r5
   1240c:	mov	r3, r4
   12410:	bl	111bc <__fprintf_chk@plt>
   12414:	bl	19edc <__assert_fail@plt+0x8c0c>
   12418:	cmp	r0, #0
   1241c:	beq	12440 <__assert_fail@plt+0x1170>
   12420:	mov	r0, #2
   12424:	add	sp, sp, #132	; 0x84
   12428:	ldrd	r4, [sp]
   1242c:	ldrd	r6, [sp, #8]
   12430:	ldrd	r8, [sp, #16]
   12434:	ldrd	sl, [sp, #24]
   12438:	add	sp, sp, #32
   1243c:	pop	{pc}		; (ldr pc, [sp], #4)
   12440:	mov	r0, #3
   12444:	b	12424 <__assert_fail@plt+0x1154>
   12448:	ldr	r3, [r7, #4]
   1244c:	cmp	r3, #3
   12450:	bne	12420 <__assert_fail@plt+0x1150>
   12454:	b	122ec <__assert_fail@plt+0x101c>
   12458:	mvn	r2, #0
   1245c:	mvn	r3, #0
   12460:	cmp	r4, #0
   12464:	strd	r2, [sp, #72]	; 0x48
   12468:	streq	r4, [sp, #12]
   1246c:	beq	12250 <__assert_fail@plt+0xf80>
   12470:	mov	r3, #4
   12474:	mov	r4, r6
   12478:	str	r3, [sp, #12]
   1247c:	b	12250 <__assert_fail@plt+0xf80>
   12480:	mov	r0, #4
   12484:	ldr	r1, [sp, #16]
   12488:	bl	19028 <__assert_fail@plt+0x7d58>
   1248c:	ldr	r3, [sp, #168]	; 0xa8
   12490:	mov	r7, r0
   12494:	cmp	r3, #2
   12498:	moveq	r0, r4
   1249c:	orrne	r0, r4, #1
   124a0:	cmp	r0, #0
   124a4:	addne	r6, sp, #24
   124a8:	bne	123a4 <__assert_fail@plt+0x10d4>
   124ac:	movw	r3, #53640	; 0xd188
   124b0:	movt	r3, #2
   124b4:	cmp	r5, #0
   124b8:	ldr	r4, [r3]
   124bc:	bne	1254c <__assert_fail@plt+0x127c>
   124c0:	mov	r2, #5
   124c4:	mov	r0, r5
   124c8:	movw	r1, #46584	; 0xb5f8
   124cc:	movt	r1, #1
   124d0:	bl	11060 <dcgettext@plt>
   124d4:	mov	r2, r0
   124d8:	movw	r3, #53692	; 0xd1bc
   124dc:	movt	r3, #2
   124e0:	str	r7, [sp]
   124e4:	mov	r0, r4
   124e8:	mov	r1, #1
   124ec:	ldr	r3, [r3]
   124f0:	bl	111bc <__fprintf_chk@plt>
   124f4:	b	12414 <__assert_fail@plt+0x1144>
   124f8:	ldrb	r3, [r0, #20]
   124fc:	cmp	r3, #46	; 0x2e
   12500:	moveq	r3, #2
   12504:	movne	r3, #1
   12508:	add	r0, r0, r3
   1250c:	ldrb	r3, [r0, #19]
   12510:	cmp	r3, #47	; 0x2f
   12514:	cmpne	r3, #0
   12518:	beq	121dc <__assert_fail@plt+0xf0c>
   1251c:	b	121f8 <__assert_fail@plt+0xf28>
   12520:	bl	11180 <__errno_location@plt>
   12524:	ldr	r5, [r0]
   12528:	mov	r0, #4
   1252c:	ldr	r1, [sp, #16]
   12530:	bl	19028 <__assert_fail@plt+0x7d58>
   12534:	mov	r4, r0
   12538:	b	12330 <__assert_fail@plt+0x1060>
   1253c:	mov	r0, r3
   12540:	bl	112a0 <close@plt>
   12544:	mov	r3, #3
   12548:	b	1224c <__assert_fail@plt+0xf7c>
   1254c:	mov	r2, #5
   12550:	movw	r1, #46536	; 0xb5c8
   12554:	movt	r1, #1
   12558:	bl	11060 <dcgettext@plt>
   1255c:	mov	r2, r0
   12560:	b	124d8 <__assert_fail@plt+0x1208>
   12564:	ldr	r3, [r7, #4]
   12568:	cmp	r3, #3
   1256c:	bne	12420 <__assert_fail@plt+0x1150>
   12570:	b	12394 <__assert_fail@plt+0x10c4>
   12574:	bl	11180 <__errno_location@plt>
   12578:	ldr	r4, [r0]
   1257c:	mov	r2, #5
   12580:	movw	r1, #46516	; 0xb5b4
   12584:	movt	r1, #1
   12588:	mov	r0, #0
   1258c:	bl	11060 <dcgettext@plt>
   12590:	mov	r2, r0
   12594:	mov	r3, r7
   12598:	mov	r0, #0
   1259c:	mov	r1, r4
   125a0:	bl	110f0 <error@plt>
   125a4:	mov	r0, #4
   125a8:	b	12424 <__assert_fail@plt+0x1154>
   125ac:	add	r6, sp, #24
   125b0:	b	12394 <__assert_fail@plt+0x10c4>
   125b4:	ldr	r3, [r0]
   125b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   125bc:	strd	r6, [sp, #8]
   125c0:	strd	r8, [sp, #16]
   125c4:	strd	sl, [sp, #24]
   125c8:	cmp	r3, #0
   125cc:	str	lr, [sp, #32]
   125d0:	sub	sp, sp, #132	; 0x84
   125d4:	beq	12dcc <__assert_fail@plt+0x1afc>
   125d8:	ldrb	r3, [r1, #8]
   125dc:	mov	r2, #0
   125e0:	mov	r9, r1
   125e4:	movw	r1, #47232	; 0xb880
   125e8:	movt	r1, #1
   125ec:	movw	sl, #47020	; 0xb7ac
   125f0:	movt	sl, #1
   125f4:	str	r1, [sp, #16]
   125f8:	movw	fp, #46832	; 0xb6f0
   125fc:	movt	fp, #1
   12600:	mov	r8, #2
   12604:	cmp	r3, r2
   12608:	moveq	r1, #536	; 0x218
   1260c:	movne	r1, #600	; 0x258
   12610:	bl	19e4c <__assert_fail@plt+0x8b7c>
   12614:	mov	r5, r0
   12618:	mov	r0, r5
   1261c:	bl	15478 <__assert_fail@plt+0x41a8>
   12620:	subs	r4, r0, #0
   12624:	beq	126d8 <__assert_fail@plt+0x1408>
   12628:	ldrh	r2, [r4, #56]	; 0x38
   1262c:	sub	r3, r2, #1
   12630:	cmp	r3, #12
   12634:	ldrls	pc, [pc, r3, lsl #2]
   12638:	b	12de0 <__assert_fail@plt+0x1b10>
   1263c:	strdeq	r2, [r1], -r0
   12640:			; <UNDEFINED> instruction: 0x000127b0
   12644:	andeq	r2, r1, ip, lsl r7
   12648:	andeq	r2, r1, ip, lsl r7
   1264c:	andeq	r2, r1, r0, ror #27
   12650:	andeq	r2, r1, ip, lsl r7
   12654:	andeq	r2, r1, r0, ror r6
   12658:	andeq	r2, r1, ip, lsl r7
   1265c:	andeq	r2, r1, r0, ror #27
   12660:	andeq	r2, r1, ip, lsl r7
   12664:	andeq	r2, r1, ip, lsl r7
   12668:	andeq	r2, r1, ip, lsl r7
   1266c:	andeq	r2, r1, ip, lsl r7
   12670:	ldr	r6, [r4, #32]
   12674:	mov	r2, #5
   12678:	mov	r1, sl
   1267c:	mov	r0, #0
   12680:	mov	r8, #4
   12684:	bl	11060 <dcgettext@plt>
   12688:	mov	r7, r0
   1268c:	mov	r1, #3
   12690:	ldr	r2, [r4, #28]
   12694:	mov	r0, #0
   12698:	bl	19104 <__assert_fail@plt+0x7e34>
   1269c:	mov	r3, r0
   126a0:	mov	r2, r7
   126a4:	mov	r1, r6
   126a8:	mov	r0, #0
   126ac:	bl	110f0 <error@plt>
   126b0:	mov	r1, r4
   126b4:	mov	r2, r8
   126b8:	mov	r0, r5
   126bc:	bl	15b2c <__assert_fail@plt+0x485c>
   126c0:	mov	r0, r5
   126c4:	bl	15478 <__assert_fail@plt+0x41a8>
   126c8:	mov	r0, r5
   126cc:	bl	15478 <__assert_fail@plt+0x41a8>
   126d0:	subs	r4, r0, #0
   126d4:	bne	12628 <__assert_fail@plt+0x1358>
   126d8:	bl	11180 <__errno_location@plt>
   126dc:	ldr	r6, [r0]
   126e0:	mov	r7, r0
   126e4:	cmp	r6, #0
   126e8:	bne	12c84 <__assert_fail@plt+0x19b4>
   126ec:	mov	r0, r5
   126f0:	bl	152ec <__assert_fail@plt+0x401c>
   126f4:	cmp	r0, #0
   126f8:	bne	12cbc <__assert_fail@plt+0x19ec>
   126fc:	mov	r0, r8
   12700:	add	sp, sp, #132	; 0x84
   12704:	ldrd	r4, [sp]
   12708:	ldrd	r6, [sp, #8]
   1270c:	ldrd	r8, [sp, #16]
   12710:	ldrd	sl, [sp, #24]
   12714:	add	sp, sp, #32
   12718:	pop	{pc}		; (ldr pc, [sp], #4)
   1271c:	cmp	r2, #6
   12720:	bne	12750 <__assert_fail@plt+0x1480>
   12724:	ldrb	r3, [r9, #8]
   12728:	cmp	r3, #0
   1272c:	beq	12750 <__assert_fail@plt+0x1480>
   12730:	ldr	r3, [r4, #48]	; 0x30
   12734:	cmp	r3, #0
   12738:	ble	12750 <__assert_fail@plt+0x1480>
   1273c:	ldrd	r0, [r5, #16]
   12740:	ldrd	r6, [r4, #64]	; 0x40
   12744:	cmp	r7, r1
   12748:	cmpeq	r6, r0
   1274c:	bne	12cec <__assert_fail@plt+0x1a1c>
   12750:	bic	r2, r2, #2
   12754:	mov	r3, #0
   12758:	ldr	r0, [r5, #32]
   1275c:	sub	r6, r2, #4
   12760:	mov	r1, #3
   12764:	clz	r6, r6
   12768:	lsr	r6, r6, #5
   1276c:	stm	sp, {r1, r3}
   12770:	mov	r3, r9
   12774:	mov	r1, r4
   12778:	mov	r2, r6
   1277c:	bl	12140 <__assert_fail@plt+0xe70>
   12780:	cmp	r0, #2
   12784:	mov	r7, r0
   12788:	beq	12a18 <__assert_fail@plt+0x1748>
   1278c:	sub	r3, r7, #2
   12790:	cmp	r3, #2
   12794:	bhi	12e8c <__assert_fail@plt+0x1bbc>
   12798:	cmp	r7, #4
   1279c:	beq	12eac <__assert_fail@plt+0x1bdc>
   127a0:	cmp	r7, #3
   127a4:	cmpeq	r8, #2
   127a8:	moveq	r8, #3
   127ac:	b	12618 <__assert_fail@plt+0x1348>
   127b0:	mov	r1, fp
   127b4:	mov	r2, #5
   127b8:	mov	r0, #0
   127bc:	mov	r8, #4
   127c0:	bl	11060 <dcgettext@plt>
   127c4:	mov	r6, r0
   127c8:	mov	r1, #3
   127cc:	ldr	r2, [r4, #28]
   127d0:	mov	r0, #0
   127d4:	bl	19104 <__assert_fail@plt+0x7e34>
   127d8:	mov	r1, #0
   127dc:	mov	r3, r0
   127e0:	mov	r2, r6
   127e4:	mov	r0, r1
   127e8:	bl	110f0 <error@plt>
   127ec:	b	126b0 <__assert_fail@plt+0x13e0>
   127f0:	ldrb	r7, [r9, #9]
   127f4:	cmp	r7, #0
   127f8:	bne	12938 <__assert_fail@plt+0x1668>
   127fc:	ldrb	r2, [r9, #10]
   12800:	cmp	r2, #0
   12804:	beq	12878 <__assert_fail@plt+0x15a8>
   12808:	mov	r2, #51456	; 0xc900
   1280c:	ldr	r1, [r4, #24]
   12810:	ldr	r0, [r5, #32]
   12814:	bl	11174 <openat64@plt>
   12818:	subs	r6, r0, #0
   1281c:	blt	12868 <__assert_fail@plt+0x1598>
   12820:	bl	11234 <fdopendir@plt>
   12824:	subs	r3, r0, #0
   12828:	str	r3, [sp, #12]
   1282c:	beq	12dd4 <__assert_fail@plt+0x1b04>
   12830:	bl	11180 <__errno_location@plt>
   12834:	mov	r6, r0
   12838:	str	r7, [r0]
   1283c:	ldr	r0, [sp, #12]
   12840:	bl	11228 <readdir64@plt>
   12844:	cmp	r0, #0
   12848:	beq	12918 <__assert_fail@plt+0x1648>
   1284c:	ldrb	r3, [r0, #19]
   12850:	cmp	r3, #46	; 0x2e
   12854:	beq	12bd0 <__assert_fail@plt+0x1900>
   12858:	ldr	r8, [r6]
   1285c:	ldr	r0, [sp, #12]
   12860:	bl	112c4 <closedir@plt>
   12864:	str	r8, [r6]
   12868:	ldrb	r3, [r9, #10]
   1286c:	cmp	r3, #0
   12870:	movne	r6, #39	; 0x27
   12874:	bne	1287c <__assert_fail@plt+0x15ac>
   12878:	mov	r6, #21
   1287c:	mov	r2, #5
   12880:	movw	r1, #46516	; 0xb5b4
   12884:	movt	r1, #1
   12888:	mov	r0, #0
   1288c:	bl	11060 <dcgettext@plt>
   12890:	mov	r7, r0
   12894:	mov	r0, #4
   12898:	ldr	r1, [r4, #28]
   1289c:	bl	19028 <__assert_fail@plt+0x7d58>
   128a0:	mov	r3, r0
   128a4:	mov	r2, r7
   128a8:	mov	r1, r6
   128ac:	mov	r0, #0
   128b0:	bl	110f0 <error@plt>
   128b4:	ldr	r3, [r4, #4]
   128b8:	ldr	r2, [r3, #48]	; 0x30
   128bc:	cmp	r2, #0
   128c0:	blt	128f8 <__assert_fail@plt+0x1628>
   128c4:	ldr	r2, [r3, #16]
   128c8:	cmp	r2, #0
   128cc:	bne	128f8 <__assert_fail@plt+0x1628>
   128d0:	mov	r1, #1
   128d4:	b	128e4 <__assert_fail@plt+0x1614>
   128d8:	ldr	r2, [r3, #16]
   128dc:	cmp	r2, #0
   128e0:	bne	128f8 <__assert_fail@plt+0x1628>
   128e4:	str	r1, [r3, #16]
   128e8:	ldr	r3, [r3, #4]
   128ec:	ldr	r2, [r3, #48]	; 0x30
   128f0:	cmp	r2, #0
   128f4:	bge	128d8 <__assert_fail@plt+0x1608>
   128f8:	mov	r2, #4
   128fc:	mov	r1, r4
   12900:	mov	r0, r5
   12904:	mov	r8, r2
   12908:	bl	15b2c <__assert_fail@plt+0x485c>
   1290c:	mov	r0, r5
   12910:	bl	15478 <__assert_fail@plt+0x41a8>
   12914:	b	12618 <__assert_fail@plt+0x1348>
   12918:	ldr	r3, [r6]
   1291c:	ldr	r0, [sp, #12]
   12920:	str	r3, [sp, #20]
   12924:	bl	112c4 <closedir@plt>
   12928:	ldr	r3, [sp, #20]
   1292c:	cmp	r3, #0
   12930:	str	r3, [r6]
   12934:	bne	12868 <__assert_fail@plt+0x1598>
   12938:	ldr	r7, [r4, #48]	; 0x30
   1293c:	cmp	r7, #0
   12940:	bne	12988 <__assert_fail@plt+0x16b8>
   12944:	ldr	r6, [r4, #24]
   12948:	mov	r0, r6
   1294c:	bl	13324 <__assert_fail@plt+0x2054>
   12950:	ldrb	r3, [r0]
   12954:	cmp	r3, #46	; 0x2e
   12958:	beq	12a7c <__assert_fail@plt+0x17ac>
   1295c:	ldr	ip, [r9, #12]
   12960:	cmp	ip, #0
   12964:	beq	1297c <__assert_fail@plt+0x16ac>
   12968:	ldrd	r2, [ip]
   1296c:	ldrd	r0, [r4, #160]	; 0xa0
   12970:	cmp	r1, r3
   12974:	cmpeq	r0, r2
   12978:	beq	12bf8 <__assert_fail@plt+0x1928>
   1297c:	ldrb	r3, [r9, #16]
   12980:	cmp	r3, #0
   12984:	bne	12b1c <__assert_fail@plt+0x184c>
   12988:	add	r6, sp, #24
   1298c:	mov	ip, #2
   12990:	mov	r3, r9
   12994:	str	r6, [sp, #4]
   12998:	mov	r2, #1
   1299c:	mov	r1, r4
   129a0:	ldr	r0, [r5, #32]
   129a4:	str	ip, [sp]
   129a8:	bl	12140 <__assert_fail@plt+0xe70>
   129ac:	cmp	r0, #2
   129b0:	mov	r7, r0
   129b4:	beq	12a34 <__assert_fail@plt+0x1764>
   129b8:	ldr	r3, [r4, #4]
   129bc:	ldr	r2, [r3, #48]	; 0x30
   129c0:	cmp	r2, #0
   129c4:	blt	129fc <__assert_fail@plt+0x172c>
   129c8:	ldr	r2, [r3, #16]
   129cc:	cmp	r2, #0
   129d0:	bne	129fc <__assert_fail@plt+0x172c>
   129d4:	mov	r1, #1
   129d8:	b	129e8 <__assert_fail@plt+0x1718>
   129dc:	ldr	r2, [r3, #16]
   129e0:	cmp	r2, #0
   129e4:	bne	129fc <__assert_fail@plt+0x172c>
   129e8:	str	r1, [r3, #16]
   129ec:	ldr	r3, [r3, #4]
   129f0:	ldr	r2, [r3, #48]	; 0x30
   129f4:	cmp	r2, #0
   129f8:	bge	129dc <__assert_fail@plt+0x170c>
   129fc:	mov	r1, r4
   12a00:	mov	r2, #4
   12a04:	mov	r0, r5
   12a08:	bl	15b2c <__assert_fail@plt+0x485c>
   12a0c:	mov	r0, r5
   12a10:	bl	15478 <__assert_fail@plt+0x41a8>
   12a14:	b	1278c <__assert_fail@plt+0x14bc>
   12a18:	mov	r3, r6
   12a1c:	mov	r1, r4
   12a20:	mov	r2, r9
   12a24:	add	r0, r5, #32
   12a28:	bl	11e5c <__assert_fail@plt+0xb8c>
   12a2c:	mov	r7, r0
   12a30:	b	1278c <__assert_fail@plt+0x14bc>
   12a34:	ldr	r6, [sp, #24]
   12a38:	cmp	r6, #4
   12a3c:	bne	12618 <__assert_fail@plt+0x1348>
   12a40:	mov	r3, #1
   12a44:	mov	r2, r9
   12a48:	mov	r1, r4
   12a4c:	add	r0, r5, #32
   12a50:	bl	11e5c <__assert_fail@plt+0xb8c>
   12a54:	cmp	r0, #2
   12a58:	mov	r7, r0
   12a5c:	bne	129b8 <__assert_fail@plt+0x16e8>
   12a60:	mov	r2, r6
   12a64:	mov	r1, r4
   12a68:	mov	r0, r5
   12a6c:	bl	15b2c <__assert_fail@plt+0x485c>
   12a70:	mov	r0, r5
   12a74:	bl	15478 <__assert_fail@plt+0x41a8>
   12a78:	b	12618 <__assert_fail@plt+0x1348>
   12a7c:	ldrb	r3, [r0, #1]
   12a80:	cmp	r3, #46	; 0x2e
   12a84:	moveq	r3, #2
   12a88:	movne	r3, #1
   12a8c:	ldrb	r3, [r0, r3]
   12a90:	cmp	r3, #47	; 0x2f
   12a94:	cmpne	r3, #0
   12a98:	bne	1295c <__assert_fail@plt+0x168c>
   12a9c:	mov	r2, #5
   12aa0:	mov	r0, r7
   12aa4:	movw	r1, #47320	; 0xb8d8
   12aa8:	movt	r1, #1
   12aac:	bl	11060 <dcgettext@plt>
   12ab0:	mov	r1, #4
   12ab4:	movw	r2, #47372	; 0xb90c
   12ab8:	movt	r2, #1
   12abc:	str	r0, [sp, #12]
   12ac0:	mov	r0, r7
   12ac4:	mov	r8, r1
   12ac8:	bl	18f9c <__assert_fail@plt+0x7ccc>
   12acc:	mov	r3, r0
   12ad0:	mov	r1, r8
   12ad4:	movw	r2, #46796	; 0xb6cc
   12ad8:	movt	r2, #1
   12adc:	mov	r0, #1
   12ae0:	str	r3, [sp, #20]
   12ae4:	bl	18f9c <__assert_fail@plt+0x7ccc>
   12ae8:	mov	r6, r0
   12aec:	mov	r1, r8
   12af0:	ldr	r2, [r4, #28]
   12af4:	mov	r0, #2
   12af8:	bl	18f9c <__assert_fail@plt+0x7ccc>
   12afc:	mov	r1, r7
   12b00:	str	r6, [sp]
   12b04:	str	r0, [sp, #4]
   12b08:	mov	r0, r7
   12b0c:	ldr	r2, [sp, #12]
   12b10:	ldr	r3, [sp, #20]
   12b14:	bl	110f0 <error@plt>
   12b18:	b	126b0 <__assert_fail@plt+0x13e0>
   12b1c:	mov	r0, r6
   12b20:	mov	r2, #0
   12b24:	movw	r1, #46796	; 0xb6cc
   12b28:	movt	r1, #1
   12b2c:	bl	13780 <__assert_fail@plt+0x24b0>
   12b30:	add	r6, sp, #24
   12b34:	mov	r1, r0
   12b38:	mov	r7, r0
   12b3c:	mov	r2, r6
   12b40:	mov	r0, #3
   12b44:	bl	112ac <__lxstat64@plt>
   12b48:	subs	r3, r0, #0
   12b4c:	str	r3, [sp, #12]
   12b50:	bne	12d6c <__assert_fail@plt+0x1a9c>
   12b54:	mov	r0, r7
   12b58:	bl	138e0 <__assert_fail@plt+0x2610>
   12b5c:	ldrd	r0, [r5, #16]
   12b60:	ldrd	r2, [sp, #24]
   12b64:	cmp	r1, r3
   12b68:	cmpeq	r0, r2
   12b6c:	beq	1298c <__assert_fail@plt+0x16bc>
   12b70:	ldr	r7, [sp, #12]
   12b74:	mov	r2, #5
   12b78:	ldr	r1, [sp, #16]
   12b7c:	mov	r0, r7
   12b80:	bl	11060 <dcgettext@plt>
   12b84:	mov	r6, r0
   12b88:	mov	r0, #4
   12b8c:	ldr	r1, [r4, #28]
   12b90:	bl	19028 <__assert_fail@plt+0x7d58>
   12b94:	mov	r3, r0
   12b98:	mov	r2, r6
   12b9c:	mov	r1, r7
   12ba0:	mov	r0, r7
   12ba4:	bl	110f0 <error@plt>
   12ba8:	mov	r2, #5
   12bac:	mov	r0, r7
   12bb0:	movw	r1, #47280	; 0xb8b0
   12bb4:	movt	r1, #1
   12bb8:	bl	11060 <dcgettext@plt>
   12bbc:	mov	r2, r0
   12bc0:	mov	r1, r7
   12bc4:	mov	r0, r7
   12bc8:	bl	110f0 <error@plt>
   12bcc:	b	128f8 <__assert_fail@plt+0x1628>
   12bd0:	ldrb	r3, [r0, #20]
   12bd4:	cmp	r3, #46	; 0x2e
   12bd8:	moveq	r3, #2
   12bdc:	movne	r3, #1
   12be0:	add	r0, r0, r3
   12be4:	ldrb	r3, [r0, #19]
   12be8:	cmp	r3, #47	; 0x2f
   12bec:	cmpne	r3, #0
   12bf0:	beq	1283c <__assert_fail@plt+0x156c>
   12bf4:	b	12858 <__assert_fail@plt+0x1588>
   12bf8:	ldrd	r0, [ip, #8]
   12bfc:	ldrd	r2, [r4, #64]	; 0x40
   12c00:	cmp	r3, r1
   12c04:	cmpeq	r2, r0
   12c08:	bne	1297c <__assert_fail@plt+0x16ac>
   12c0c:	movw	r1, #46020	; 0xb3c4
   12c10:	movt	r1, #1
   12c14:	ldr	r0, [r4, #28]
   12c18:	bl	10fdc <strcmp@plt>
   12c1c:	subs	r6, r0, #0
   12c20:	bne	12e30 <__assert_fail@plt+0x1b60>
   12c24:	mov	r2, #5
   12c28:	movw	r1, #46688	; 0xb660
   12c2c:	movt	r1, #1
   12c30:	bl	11060 <dcgettext@plt>
   12c34:	mov	r7, r0
   12c38:	mov	r0, #4
   12c3c:	ldr	r1, [r4, #28]
   12c40:	bl	19028 <__assert_fail@plt+0x7d58>
   12c44:	mov	r3, r0
   12c48:	mov	r2, r7
   12c4c:	mov	r1, r6
   12c50:	mov	r0, r6
   12c54:	bl	110f0 <error@plt>
   12c58:	mov	r2, #5
   12c5c:	movw	r1, #47180	; 0xb84c
   12c60:	movt	r1, #1
   12c64:	mov	r0, #0
   12c68:	bl	11060 <dcgettext@plt>
   12c6c:	mov	r1, #0
   12c70:	mov	r2, r0
   12c74:	mov	r0, r1
   12c78:	mov	r8, #4
   12c7c:	bl	110f0 <error@plt>
   12c80:	b	126b0 <__assert_fail@plt+0x13e0>
   12c84:	mov	r2, #5
   12c88:	movw	r1, #46672	; 0xb650
   12c8c:	movt	r1, #1
   12c90:	mov	r0, r4
   12c94:	bl	11060 <dcgettext@plt>
   12c98:	mov	r2, r0
   12c9c:	mov	r1, r6
   12ca0:	mov	r0, r4
   12ca4:	mov	r8, #4
   12ca8:	bl	110f0 <error@plt>
   12cac:	mov	r0, r5
   12cb0:	bl	152ec <__assert_fail@plt+0x401c>
   12cb4:	cmp	r0, #0
   12cb8:	beq	126fc <__assert_fail@plt+0x142c>
   12cbc:	ldr	r4, [r7]
   12cc0:	mov	r2, #5
   12cc4:	movw	r1, #47160	; 0xb838
   12cc8:	movt	r1, #1
   12ccc:	mov	r0, #0
   12cd0:	bl	11060 <dcgettext@plt>
   12cd4:	mov	r2, r0
   12cd8:	mov	r0, #0
   12cdc:	mov	r8, #4
   12ce0:	mov	r1, r4
   12ce4:	bl	110f0 <error@plt>
   12ce8:	b	126fc <__assert_fail@plt+0x142c>
   12cec:	ldr	r3, [r4, #4]
   12cf0:	ldr	r2, [r3, #48]	; 0x30
   12cf4:	cmp	r2, #0
   12cf8:	blt	12d30 <__assert_fail@plt+0x1a60>
   12cfc:	ldr	r2, [r3, #16]
   12d00:	cmp	r2, #0
   12d04:	bne	12d30 <__assert_fail@plt+0x1a60>
   12d08:	mov	r1, #1
   12d0c:	b	12d1c <__assert_fail@plt+0x1a4c>
   12d10:	ldr	r2, [r3, #16]
   12d14:	cmp	r2, #0
   12d18:	bne	12d30 <__assert_fail@plt+0x1a60>
   12d1c:	str	r1, [r3, #16]
   12d20:	ldr	r3, [r3, #4]
   12d24:	ldr	r2, [r3, #48]	; 0x30
   12d28:	cmp	r2, #0
   12d2c:	bge	12d10 <__assert_fail@plt+0x1a40>
   12d30:	mov	r2, #5
   12d34:	mov	r0, #0
   12d38:	ldr	r1, [sp, #16]
   12d3c:	bl	11060 <dcgettext@plt>
   12d40:	mov	r8, #4
   12d44:	mov	r6, r0
   12d48:	ldr	r1, [r4, #28]
   12d4c:	mov	r0, r8
   12d50:	bl	19028 <__assert_fail@plt+0x7d58>
   12d54:	mov	r1, #0
   12d58:	mov	r3, r0
   12d5c:	mov	r2, r6
   12d60:	mov	r0, r1
   12d64:	bl	110f0 <error@plt>
   12d68:	b	12618 <__assert_fail@plt+0x1348>
   12d6c:	mov	r2, #5
   12d70:	movw	r1, #46800	; 0xb6d0
   12d74:	movt	r1, #1
   12d78:	mov	r0, #0
   12d7c:	bl	11060 <dcgettext@plt>
   12d80:	mov	r6, r0
   12d84:	mov	r2, r7
   12d88:	mov	r1, #4
   12d8c:	mov	r0, #0
   12d90:	bl	18f9c <__assert_fail@plt+0x7ccc>
   12d94:	mov	r8, r0
   12d98:	mov	r1, #4
   12d9c:	ldr	r2, [r4, #24]
   12da0:	mov	r0, #1
   12da4:	bl	18f9c <__assert_fail@plt+0x7ccc>
   12da8:	mov	r1, #0
   12dac:	mov	r3, r8
   12db0:	str	r0, [sp]
   12db4:	mov	r2, r6
   12db8:	mov	r0, r1
   12dbc:	bl	110f0 <error@plt>
   12dc0:	mov	r0, r7
   12dc4:	bl	138e0 <__assert_fail@plt+0x2610>
   12dc8:	b	128f8 <__assert_fail@plt+0x1628>
   12dcc:	mov	r8, #2
   12dd0:	b	126fc <__assert_fail@plt+0x142c>
   12dd4:	mov	r0, r6
   12dd8:	bl	112a0 <close@plt>
   12ddc:	b	12868 <__assert_fail@plt+0x1598>
   12de0:	mov	r2, #5
   12de4:	movw	r1, #47044	; 0xb7c4
   12de8:	movt	r1, #1
   12dec:	mov	r0, #0
   12df0:	bl	11060 <dcgettext@plt>
   12df4:	ldrh	r6, [r4, #56]	; 0x38
   12df8:	mov	r5, r0
   12dfc:	mov	r1, #3
   12e00:	mov	r0, #0
   12e04:	ldr	r2, [r4, #28]
   12e08:	bl	19104 <__assert_fail@plt+0x7e34>
   12e0c:	movw	ip, #47100	; 0xb7fc
   12e10:	movt	ip, #1
   12e14:	mov	r1, #0
   12e18:	mov	r3, r6
   12e1c:	mov	r2, r5
   12e20:	stm	sp, {r0, ip}
   12e24:	mov	r0, r1
   12e28:	bl	110f0 <error@plt>
   12e2c:	bl	11294 <abort@plt>
   12e30:	mov	r2, #5
   12e34:	movw	r1, #46736	; 0xb690
   12e38:	movt	r1, #1
   12e3c:	mov	r0, #0
   12e40:	bl	11060 <dcgettext@plt>
   12e44:	mov	r6, r0
   12e48:	mov	r1, #4
   12e4c:	ldr	r2, [r4, #28]
   12e50:	mov	r0, #0
   12e54:	bl	18f9c <__assert_fail@plt+0x7ccc>
   12e58:	mov	r7, r0
   12e5c:	mov	r1, #4
   12e60:	movw	r2, #46020	; 0xb3c4
   12e64:	movt	r2, #1
   12e68:	mov	r0, #1
   12e6c:	bl	18f9c <__assert_fail@plt+0x7ccc>
   12e70:	mov	r1, #0
   12e74:	mov	r3, r7
   12e78:	str	r0, [sp]
   12e7c:	mov	r2, r6
   12e80:	mov	r0, r1
   12e84:	bl	110f0 <error@plt>
   12e88:	b	12c58 <__assert_fail@plt+0x1988>
   12e8c:	movw	r3, #46476	; 0xb58c
   12e90:	movt	r3, #1
   12e94:	movw	r1, #47124	; 0xb814
   12e98:	movt	r1, #1
   12e9c:	movw	r0, #47140	; 0xb824
   12ea0:	movt	r0, #1
   12ea4:	movw	r2, #610	; 0x262
   12ea8:	bl	112d0 <__assert_fail@plt>
   12eac:	mov	r8, r7
   12eb0:	b	12618 <__assert_fail@plt+0x1348>
   12eb4:	mov	r0, #1
   12eb8:	b	11a74 <__assert_fail@plt+0x7a4>
   12ebc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ec0:	mov	r5, r1
   12ec4:	mov	r4, r2
   12ec8:	strd	r6, [sp, #8]
   12ecc:	mov	r7, r3
   12ed0:	strd	r8, [sp, #16]
   12ed4:	strd	sl, [sp, #24]
   12ed8:	mov	sl, r0
   12edc:	str	lr, [sp, #32]
   12ee0:	sub	sp, sp, #12
   12ee4:	str	r2, [sp]
   12ee8:	bl	11168 <strlen@plt>
   12eec:	ldr	fp, [r5]
   12ef0:	cmp	fp, #0
   12ef4:	beq	12fc4 <__assert_fail@plt+0x1cf4>
   12ef8:	mov	r6, #0
   12efc:	mov	r8, r0
   12f00:	mvn	r9, #0
   12f04:	str	r6, [sp, #4]
   12f08:	b	12f34 <__assert_fail@plt+0x1c64>
   12f0c:	bl	11048 <memcmp@plt>
   12f10:	ldr	r3, [sp, #4]
   12f14:	cmp	r0, #0
   12f18:	movne	r3, #1
   12f1c:	str	r3, [sp, #4]
   12f20:	ldr	fp, [r5, #4]!
   12f24:	add	r6, r6, #1
   12f28:	add	r4, r4, r7
   12f2c:	cmp	fp, #0
   12f30:	beq	12f90 <__assert_fail@plt+0x1cc0>
   12f34:	mov	r2, r8
   12f38:	mov	r1, sl
   12f3c:	mov	r0, fp
   12f40:	bl	11288 <strncmp@plt>
   12f44:	cmp	r0, #0
   12f48:	mov	r0, fp
   12f4c:	bne	12f20 <__assert_fail@plt+0x1c50>
   12f50:	bl	11168 <strlen@plt>
   12f54:	ldr	r3, [sp]
   12f58:	cmp	r0, r8
   12f5c:	mov	r2, r7
   12f60:	mov	r1, r4
   12f64:	mla	r0, r7, r9, r3
   12f68:	beq	12fbc <__assert_fail@plt+0x1cec>
   12f6c:	cmn	r9, #1
   12f70:	moveq	r9, r6
   12f74:	beq	12f20 <__assert_fail@plt+0x1c50>
   12f78:	ldr	r3, [sp]
   12f7c:	cmp	r3, #0
   12f80:	bne	12f0c <__assert_fail@plt+0x1c3c>
   12f84:	mov	r3, #1
   12f88:	str	r3, [sp, #4]
   12f8c:	b	12f20 <__assert_fail@plt+0x1c50>
   12f90:	ldr	r3, [sp, #4]
   12f94:	cmp	r3, #0
   12f98:	mvnne	r9, #1
   12f9c:	mov	r0, r9
   12fa0:	add	sp, sp, #12
   12fa4:	ldrd	r4, [sp]
   12fa8:	ldrd	r6, [sp, #8]
   12fac:	ldrd	r8, [sp, #16]
   12fb0:	ldrd	sl, [sp, #24]
   12fb4:	add	sp, sp, #32
   12fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fbc:	mov	r9, r6
   12fc0:	b	12f9c <__assert_fail@plt+0x1ccc>
   12fc4:	mvn	r9, #0
   12fc8:	b	12f9c <__assert_fail@plt+0x1ccc>
   12fcc:	strd	r4, [sp, #-16]!
   12fd0:	str	r6, [sp, #8]
   12fd4:	mov	r6, r0
   12fd8:	ldr	r0, [r1]
   12fdc:	str	lr, [sp, #12]
   12fe0:	cmp	r0, #0
   12fe4:	beq	13028 <__assert_fail@plt+0x1d58>
   12fe8:	mov	r4, r1
   12fec:	mov	r5, #0
   12ff0:	b	13004 <__assert_fail@plt+0x1d34>
   12ff4:	ldr	r0, [r4, #4]!
   12ff8:	add	r5, r5, #1
   12ffc:	cmp	r0, #0
   13000:	beq	13028 <__assert_fail@plt+0x1d58>
   13004:	mov	r1, r6
   13008:	bl	10fdc <strcmp@plt>
   1300c:	cmp	r0, #0
   13010:	bne	12ff4 <__assert_fail@plt+0x1d24>
   13014:	mov	r0, r5
   13018:	ldrd	r4, [sp]
   1301c:	ldr	r6, [sp, #8]
   13020:	add	sp, sp, #12
   13024:	pop	{pc}		; (ldr pc, [sp], #4)
   13028:	ldrd	r4, [sp]
   1302c:	mvn	r0, #0
   13030:	ldr	r6, [sp, #8]
   13034:	add	sp, sp, #12
   13038:	pop	{pc}		; (ldr pc, [sp], #4)
   1303c:	cmn	r2, #1
   13040:	strd	r4, [sp, #-16]!
   13044:	mov	r5, r1
   13048:	movweq	r1, #47392	; 0xb920
   1304c:	movwne	r1, #47420	; 0xb93c
   13050:	str	r6, [sp, #8]
   13054:	movteq	r1, #1
   13058:	movtne	r1, #1
   1305c:	str	lr, [sp, #12]
   13060:	mov	r6, r0
   13064:	sub	sp, sp, #8
   13068:	mov	r2, #5
   1306c:	mov	r0, #0
   13070:	bl	11060 <dcgettext@plt>
   13074:	mov	r4, r0
   13078:	mov	r2, r5
   1307c:	mov	r1, #8
   13080:	mov	r0, #0
   13084:	bl	18f9c <__assert_fail@plt+0x7ccc>
   13088:	mov	r5, r0
   1308c:	mov	r1, r6
   13090:	mov	r0, #1
   13094:	bl	192cc <__assert_fail@plt+0x7ffc>
   13098:	mov	r1, #0
   1309c:	mov	r3, r5
   130a0:	str	r0, [sp]
   130a4:	mov	r2, r4
   130a8:	mov	r0, r1
   130ac:	bl	110f0 <error@plt>
   130b0:	add	sp, sp, #8
   130b4:	ldrd	r4, [sp]
   130b8:	ldr	r6, [sp, #8]
   130bc:	add	sp, sp, #12
   130c0:	pop	{pc}		; (ldr pc, [sp], #4)
   130c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130c8:	mov	r4, r1
   130cc:	movw	r1, #47452	; 0xb95c
   130d0:	movt	r1, #1
   130d4:	strd	r6, [sp, #8]
   130d8:	mov	r6, r0
   130dc:	mov	r7, r2
   130e0:	mov	r0, #0
   130e4:	strd	r8, [sp, #16]
   130e8:	mov	r2, #5
   130ec:	strd	sl, [sp, #24]
   130f0:	movw	sl, #53640	; 0xd188
   130f4:	movt	sl, #2
   130f8:	str	lr, [sp, #32]
   130fc:	sub	sp, sp, #12
   13100:	bl	11060 <dcgettext@plt>
   13104:	ldr	r1, [sl]
   13108:	bl	10fb8 <fputs_unlocked@plt>
   1310c:	ldr	fp, [r6]
   13110:	cmp	fp, #0
   13114:	beq	131b4 <__assert_fail@plt+0x1ee4>
   13118:	movw	r3, #47476	; 0xb974
   1311c:	movt	r3, #1
   13120:	mov	r9, #0
   13124:	str	r3, [sp]
   13128:	movw	r3, #47484	; 0xb97c
   1312c:	movt	r3, #1
   13130:	mov	r5, r9
   13134:	str	r3, [sp, #4]
   13138:	b	13170 <__assert_fail@plt+0x1ea0>
   1313c:	mov	r0, fp
   13140:	mov	r9, r4
   13144:	bl	192dc <__assert_fail@plt+0x800c>
   13148:	mov	r3, r0
   1314c:	mov	r1, #1
   13150:	ldr	r2, [sp]
   13154:	mov	r0, r8
   13158:	bl	111bc <__fprintf_chk@plt>
   1315c:	ldr	fp, [r6, #4]!
   13160:	add	r5, r5, #1
   13164:	add	r4, r4, r7
   13168:	cmp	fp, #0
   1316c:	beq	131b4 <__assert_fail@plt+0x1ee4>
   13170:	cmp	r5, #0
   13174:	mov	r1, r4
   13178:	ldr	r8, [sl]
   1317c:	mov	r2, r7
   13180:	mov	r0, r9
   13184:	beq	1313c <__assert_fail@plt+0x1e6c>
   13188:	bl	11048 <memcmp@plt>
   1318c:	cmp	r0, #0
   13190:	bne	1313c <__assert_fail@plt+0x1e6c>
   13194:	mov	r0, fp
   13198:	bl	192dc <__assert_fail@plt+0x800c>
   1319c:	mov	r3, r0
   131a0:	mov	r1, #1
   131a4:	ldr	r2, [sp, #4]
   131a8:	mov	r0, r8
   131ac:	bl	111bc <__fprintf_chk@plt>
   131b0:	b	1315c <__assert_fail@plt+0x1e8c>
   131b4:	ldr	r0, [sl]
   131b8:	ldr	r3, [r0, #20]
   131bc:	ldr	r2, [r0, #24]
   131c0:	cmp	r3, r2
   131c4:	bcs	131f4 <__assert_fail@plt+0x1f24>
   131c8:	add	r1, r3, #1
   131cc:	mov	r2, #10
   131d0:	str	r1, [r0, #20]
   131d4:	strb	r2, [r3]
   131d8:	add	sp, sp, #12
   131dc:	ldrd	r4, [sp]
   131e0:	ldrd	r6, [sp, #8]
   131e4:	ldrd	r8, [sp, #16]
   131e8:	ldrd	sl, [sp, #24]
   131ec:	add	sp, sp, #32
   131f0:	pop	{pc}		; (ldr pc, [sp], #4)
   131f4:	mov	r1, #10
   131f8:	add	sp, sp, #12
   131fc:	ldrd	r4, [sp]
   13200:	ldrd	r6, [sp, #8]
   13204:	ldrd	r8, [sp, #16]
   13208:	ldrd	sl, [sp, #24]
   1320c:	ldr	lr, [sp, #32]
   13210:	add	sp, sp, #36	; 0x24
   13214:	b	111f8 <__overflow@plt>
   13218:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1321c:	mov	r5, r1
   13220:	mov	r4, r2
   13224:	ldrb	ip, [sp, #32]
   13228:	strd	r6, [sp, #8]
   1322c:	mov	r7, r0
   13230:	mov	r6, r3
   13234:	str	r8, [sp, #16]
   13238:	str	lr, [sp, #20]
   1323c:	cmp	ip, #0
   13240:	beq	13274 <__assert_fail@plt+0x1fa4>
   13244:	mov	r2, r3
   13248:	mov	r1, r4
   1324c:	ldr	r3, [sp, #24]
   13250:	mov	r0, r5
   13254:	bl	12ebc <__assert_fail@plt+0x1bec>
   13258:	cmp	r0, #0
   1325c:	blt	13284 <__assert_fail@plt+0x1fb4>
   13260:	ldrd	r4, [sp]
   13264:	ldrd	r6, [sp, #8]
   13268:	ldr	r8, [sp, #16]
   1326c:	add	sp, sp, #20
   13270:	pop	{pc}		; (ldr pc, [sp], #4)
   13274:	mov	r1, r2
   13278:	mov	r0, r5
   1327c:	bl	12fcc <__assert_fail@plt+0x1cfc>
   13280:	b	13258 <__assert_fail@plt+0x1f88>
   13284:	mov	r2, r0
   13288:	mov	r1, r5
   1328c:	mov	r0, r7
   13290:	bl	1303c <__assert_fail@plt+0x1d6c>
   13294:	mov	r0, r4
   13298:	mov	r1, r6
   1329c:	ldr	r2, [sp, #24]
   132a0:	bl	130c4 <__assert_fail@plt+0x1df4>
   132a4:	ldr	r3, [sp, #28]
   132a8:	blx	r3
   132ac:	mvn	r0, #0
   132b0:	b	13260 <__assert_fail@plt+0x1f90>
   132b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   132b8:	strd	r6, [sp, #8]
   132bc:	ldr	r7, [r1]
   132c0:	str	r8, [sp, #16]
   132c4:	str	lr, [sp, #20]
   132c8:	cmp	r7, #0
   132cc:	beq	1330c <__assert_fail@plt+0x203c>
   132d0:	mov	r6, r3
   132d4:	mov	r8, r0
   132d8:	mov	r4, r2
   132dc:	mov	r5, r1
   132e0:	b	132f0 <__assert_fail@plt+0x2020>
   132e4:	ldr	r7, [r5, #4]!
   132e8:	cmp	r7, #0
   132ec:	beq	1330c <__assert_fail@plt+0x203c>
   132f0:	mov	r1, r4
   132f4:	mov	r2, r6
   132f8:	mov	r0, r8
   132fc:	add	r4, r4, r6
   13300:	bl	11048 <memcmp@plt>
   13304:	cmp	r0, #0
   13308:	bne	132e4 <__assert_fail@plt+0x2014>
   1330c:	mov	r0, r7
   13310:	ldrd	r4, [sp]
   13314:	ldrd	r6, [sp, #8]
   13318:	ldr	r8, [sp, #16]
   1331c:	add	sp, sp, #20
   13320:	pop	{pc}		; (ldr pc, [sp], #4)
   13324:	ldrb	r3, [r0]
   13328:	cmp	r3, #47	; 0x2f
   1332c:	bne	1333c <__assert_fail@plt+0x206c>
   13330:	ldrb	r3, [r0, #1]!
   13334:	cmp	r3, #47	; 0x2f
   13338:	beq	13330 <__assert_fail@plt+0x2060>
   1333c:	cmp	r3, #0
   13340:	beq	13370 <__assert_fail@plt+0x20a0>
   13344:	mov	r2, r0
   13348:	mov	r1, #0
   1334c:	cmp	r3, #47	; 0x2f
   13350:	moveq	r1, #1
   13354:	beq	13364 <__assert_fail@plt+0x2094>
   13358:	cmp	r1, #0
   1335c:	movne	r0, r2
   13360:	movne	r1, #0
   13364:	ldrb	r3, [r2, #1]!
   13368:	cmp	r3, #0
   1336c:	bne	1334c <__assert_fail@plt+0x207c>
   13370:	bx	lr
   13374:	str	r4, [sp, #-8]!
   13378:	mov	r4, r0
   1337c:	str	lr, [sp, #4]
   13380:	bl	11168 <strlen@plt>
   13384:	cmp	r0, #1
   13388:	bls	133ac <__assert_fail@plt+0x20dc>
   1338c:	add	r2, r4, r0
   13390:	mov	r3, r0
   13394:	ldrb	r2, [r2, #-1]
   13398:	cmp	r2, #47	; 0x2f
   1339c:	subeq	r3, r0, #2
   133a0:	rsbeq	r1, r4, #1
   133a4:	addeq	r3, r4, r3
   133a8:	beq	133b8 <__assert_fail@plt+0x20e8>
   133ac:	ldr	r4, [sp]
   133b0:	add	sp, sp, #4
   133b4:	pop	{pc}		; (ldr pc, [sp], #4)
   133b8:	cmp	r3, r4
   133bc:	add	r0, r1, r3
   133c0:	beq	133ac <__assert_fail@plt+0x20dc>
   133c4:	ldrb	r2, [r3], #-1
   133c8:	cmp	r2, #47	; 0x2f
   133cc:	beq	133b8 <__assert_fail@plt+0x20e8>
   133d0:	ldr	r4, [sp]
   133d4:	add	sp, sp, #4
   133d8:	pop	{pc}		; (ldr pc, [sp], #4)
   133dc:	movw	r3, #53680	; 0xd1b0
   133e0:	movt	r3, #2
   133e4:	str	r0, [r3]
   133e8:	bx	lr
   133ec:	strd	r4, [sp, #-16]!
   133f0:	movw	r4, #53648	; 0xd190
   133f4:	movt	r4, #2
   133f8:	ldr	r5, [r4]
   133fc:	str	r6, [sp, #8]
   13400:	str	lr, [sp, #12]
   13404:	sub	sp, sp, #8
   13408:	mov	r0, r5
   1340c:	bl	138a0 <__assert_fail@plt+0x25d0>
   13410:	cmp	r0, #0
   13414:	bne	134c4 <__assert_fail@plt+0x21f4>
   13418:	mov	r0, r5
   1341c:	bl	1a064 <__assert_fail@plt+0x8d94>
   13420:	cmp	r0, #0
   13424:	bne	13454 <__assert_fail@plt+0x2184>
   13428:	add	sp, sp, #8
   1342c:	ldrd	r4, [sp]
   13430:	ldr	r6, [sp, #8]
   13434:	ldr	lr, [sp, #12]
   13438:	add	sp, sp, #16
   1343c:	b	13534 <__assert_fail@plt+0x2264>
   13440:	bl	13620 <__assert_fail@plt+0x2350>
   13444:	cmp	r0, #0
   13448:	ldr	r0, [r4]
   1344c:	beq	134e8 <__assert_fail@plt+0x2218>
   13450:	bl	1a064 <__assert_fail@plt+0x8d94>
   13454:	mov	r2, #5
   13458:	movw	r1, #47492	; 0xb984
   1345c:	movt	r1, #1
   13460:	mov	r0, #0
   13464:	bl	11060 <dcgettext@plt>
   13468:	movw	r3, #53680	; 0xd1b0
   1346c:	movt	r3, #2
   13470:	ldr	r4, [r3]
   13474:	mov	r5, r0
   13478:	bl	11180 <__errno_location@plt>
   1347c:	mov	r2, r0
   13480:	cmp	r4, #0
   13484:	beq	134f8 <__assert_fail@plt+0x2228>
   13488:	ldr	r6, [r2]
   1348c:	mov	r0, r4
   13490:	bl	190f0 <__assert_fail@plt+0x7e20>
   13494:	mov	r3, r0
   13498:	movw	r2, #47512	; 0xb998
   1349c:	movt	r2, #1
   134a0:	mov	r0, #0
   134a4:	str	r5, [sp]
   134a8:	mov	r1, r6
   134ac:	bl	110f0 <error@plt>
   134b0:	bl	13534 <__assert_fail@plt+0x2264>
   134b4:	movw	r3, #53556	; 0xd134
   134b8:	movt	r3, #2
   134bc:	ldr	r0, [r3]
   134c0:	bl	11024 <_exit@plt>
   134c4:	mov	r1, #1
   134c8:	mov	r0, r5
   134cc:	mov	r2, #0
   134d0:	mov	r3, #0
   134d4:	str	r1, [sp]
   134d8:	bl	13940 <__assert_fail@plt+0x2670>
   134dc:	cmp	r0, #0
   134e0:	ldr	r0, [r4]
   134e4:	beq	13440 <__assert_fail@plt+0x2170>
   134e8:	bl	1a064 <__assert_fail@plt+0x8d94>
   134ec:	cmp	r0, #0
   134f0:	beq	13428 <__assert_fail@plt+0x2158>
   134f4:	b	13454 <__assert_fail@plt+0x2184>
   134f8:	mov	r3, r5
   134fc:	mov	r0, r4
   13500:	ldr	r1, [r2]
   13504:	movw	r2, #47516	; 0xb99c
   13508:	movt	r2, #1
   1350c:	bl	110f0 <error@plt>
   13510:	b	134b0 <__assert_fail@plt+0x21e0>
   13514:	movw	r3, #53684	; 0xd1b4
   13518:	movt	r3, #2
   1351c:	str	r0, [r3]
   13520:	bx	lr
   13524:	movw	r3, #53684	; 0xd1b4
   13528:	movt	r3, #2
   1352c:	strb	r0, [r3, #4]
   13530:	bx	lr
   13534:	movw	r3, #53652	; 0xd194
   13538:	movt	r3, #2
   1353c:	strd	r4, [sp, #-16]!
   13540:	ldr	r0, [r3]
   13544:	str	r6, [sp, #8]
   13548:	str	lr, [sp, #12]
   1354c:	sub	sp, sp, #8
   13550:	bl	1a064 <__assert_fail@plt+0x8d94>
   13554:	cmp	r0, #0
   13558:	beq	13584 <__assert_fail@plt+0x22b4>
   1355c:	movw	r4, #53684	; 0xd1b4
   13560:	movt	r4, #2
   13564:	ldrb	r6, [r4, #4]
   13568:	bl	11180 <__errno_location@plt>
   1356c:	mov	r5, r0
   13570:	cmp	r6, #0
   13574:	beq	135b0 <__assert_fail@plt+0x22e0>
   13578:	ldr	r3, [r0]
   1357c:	cmp	r3, #32
   13580:	bne	135b0 <__assert_fail@plt+0x22e0>
   13584:	movw	r3, #53640	; 0xd188
   13588:	movt	r3, #2
   1358c:	ldr	r0, [r3]
   13590:	bl	1a064 <__assert_fail@plt+0x8d94>
   13594:	cmp	r0, #0
   13598:	bne	135f8 <__assert_fail@plt+0x2328>
   1359c:	add	sp, sp, #8
   135a0:	ldrd	r4, [sp]
   135a4:	ldr	r6, [sp, #8]
   135a8:	add	sp, sp, #12
   135ac:	pop	{pc}		; (ldr pc, [sp], #4)
   135b0:	movw	r1, #47520	; 0xb9a0
   135b4:	movt	r1, #1
   135b8:	mov	r2, #5
   135bc:	mov	r0, #0
   135c0:	bl	11060 <dcgettext@plt>
   135c4:	mov	r6, r0
   135c8:	ldr	r0, [r4]
   135cc:	cmp	r0, #0
   135d0:	beq	13608 <__assert_fail@plt+0x2338>
   135d4:	ldr	r4, [r5]
   135d8:	bl	190f0 <__assert_fail@plt+0x7e20>
   135dc:	mov	r3, r0
   135e0:	movw	r2, #47512	; 0xb998
   135e4:	movt	r2, #1
   135e8:	mov	r0, #0
   135ec:	str	r6, [sp]
   135f0:	mov	r1, r4
   135f4:	bl	110f0 <error@plt>
   135f8:	movw	r3, #53556	; 0xd134
   135fc:	movt	r3, #2
   13600:	ldr	r0, [r3]
   13604:	bl	11024 <_exit@plt>
   13608:	mov	r3, r6
   1360c:	movw	r2, #47516	; 0xb99c
   13610:	movt	r2, #1
   13614:	ldr	r1, [r5]
   13618:	bl	110f0 <error@plt>
   1361c:	b	135f8 <__assert_fail@plt+0x2328>
   13620:	str	r4, [sp, #-8]!
   13624:	subs	r4, r0, #0
   13628:	str	lr, [sp, #4]
   1362c:	sub	sp, sp, #8
   13630:	beq	1364c <__assert_fail@plt+0x237c>
   13634:	bl	11120 <__freading@plt>
   13638:	cmp	r0, #0
   1363c:	beq	1364c <__assert_fail@plt+0x237c>
   13640:	ldr	r3, [r4]
   13644:	tst	r3, #256	; 0x100
   13648:	bne	13664 <__assert_fail@plt+0x2394>
   1364c:	mov	r0, r4
   13650:	add	sp, sp, #8
   13654:	ldr	r4, [sp]
   13658:	ldr	lr, [sp, #4]
   1365c:	add	sp, sp, #8
   13660:	b	10fe8 <fflush@plt>
   13664:	mov	r1, #1
   13668:	mov	r2, #0
   1366c:	mov	r3, #0
   13670:	mov	r0, r4
   13674:	str	r1, [sp]
   13678:	bl	13940 <__assert_fail@plt+0x2670>
   1367c:	b	1364c <__assert_fail@plt+0x237c>
   13680:	ldr	r3, [r0, #16]
   13684:	and	r3, r3, #61440	; 0xf000
   13688:	cmp	r3, #32768	; 0x8000
   1368c:	beq	136d4 <__assert_fail@plt+0x2404>
   13690:	cmp	r3, #16384	; 0x4000
   13694:	beq	1371c <__assert_fail@plt+0x244c>
   13698:	cmp	r3, #40960	; 0xa000
   1369c:	beq	13744 <__assert_fail@plt+0x2474>
   136a0:	cmp	r3, #24576	; 0x6000
   136a4:	beq	13758 <__assert_fail@plt+0x2488>
   136a8:	cmp	r3, #8192	; 0x2000
   136ac:	beq	13708 <__assert_fail@plt+0x2438>
   136b0:	cmp	r3, #4096	; 0x1000
   136b4:	beq	1376c <__assert_fail@plt+0x249c>
   136b8:	cmp	r3, #49152	; 0xc000
   136bc:	beq	13730 <__assert_fail@plt+0x2460>
   136c0:	movw	r1, #47656	; 0xba28
   136c4:	movt	r1, #1
   136c8:	mov	r2, #5
   136cc:	mov	r0, #0
   136d0:	b	11060 <dcgettext@plt>
   136d4:	ldrd	r2, [r0, #48]	; 0x30
   136d8:	orrs	r3, r2, r3
   136dc:	bne	136f4 <__assert_fail@plt+0x2424>
   136e0:	movw	r1, #47532	; 0xb9ac
   136e4:	movt	r1, #1
   136e8:	mov	r2, #5
   136ec:	mov	r0, #0
   136f0:	b	11060 <dcgettext@plt>
   136f4:	movw	r1, #47552	; 0xb9c0
   136f8:	movt	r1, #1
   136fc:	mov	r2, #5
   13700:	mov	r0, #0
   13704:	b	11060 <dcgettext@plt>
   13708:	movw	r1, #47616	; 0xba00
   1370c:	movt	r1, #1
   13710:	mov	r2, #5
   13714:	mov	r0, #0
   13718:	b	11060 <dcgettext@plt>
   1371c:	movw	r1, #47568	; 0xb9d0
   13720:	movt	r1, #1
   13724:	mov	r2, #5
   13728:	mov	r0, #0
   1372c:	b	11060 <dcgettext@plt>
   13730:	movw	r1, #47648	; 0xba20
   13734:	movt	r1, #1
   13738:	mov	r2, #5
   1373c:	mov	r0, #0
   13740:	b	11060 <dcgettext@plt>
   13744:	movw	r1, #47580	; 0xb9dc
   13748:	movt	r1, #1
   1374c:	mov	r2, #5
   13750:	mov	r0, #0
   13754:	b	11060 <dcgettext@plt>
   13758:	movw	r1, #47596	; 0xb9ec
   1375c:	movt	r1, #1
   13760:	mov	r2, #5
   13764:	mov	r0, #0
   13768:	b	11060 <dcgettext@plt>
   1376c:	movw	r1, #47640	; 0xba18
   13770:	movt	r1, #1
   13774:	mov	r2, #5
   13778:	mov	r0, #0
   1377c:	b	11060 <dcgettext@plt>
   13780:	str	r4, [sp, #-8]!
   13784:	str	lr, [sp, #4]
   13788:	bl	137a4 <__assert_fail@plt+0x24d4>
   1378c:	cmp	r0, #0
   13790:	beq	137a0 <__assert_fail@plt+0x24d0>
   13794:	ldr	r4, [sp]
   13798:	add	sp, sp, #4
   1379c:	pop	{pc}		; (ldr pc, [sp], #4)
   137a0:	bl	19e08 <__assert_fail@plt+0x8b38>
   137a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   137a8:	strd	r6, [sp, #8]
   137ac:	mov	r6, r1
   137b0:	mov	r7, r0
   137b4:	strd	r8, [sp, #16]
   137b8:	mov	r9, r2
   137bc:	strd	sl, [sp, #24]
   137c0:	str	lr, [sp, #32]
   137c4:	sub	sp, sp, #4
   137c8:	bl	13324 <__assert_fail@plt+0x2054>
   137cc:	mov	r4, r0
   137d0:	bl	13374 <__assert_fail@plt+0x20a4>
   137d4:	mov	r5, r0
   137d8:	mov	r0, r6
   137dc:	bl	11168 <strlen@plt>
   137e0:	sub	r4, r4, r7
   137e4:	cmp	r5, #0
   137e8:	add	r4, r4, r5
   137ec:	mov	r8, r0
   137f0:	beq	13888 <__assert_fail@plt+0x25b8>
   137f4:	add	r3, r7, r4
   137f8:	ldrb	r3, [r3, #-1]
   137fc:	cmp	r3, #47	; 0x2f
   13800:	beq	1387c <__assert_fail@plt+0x25ac>
   13804:	ldrb	r3, [r6]
   13808:	cmp	r3, #47	; 0x2f
   1380c:	beq	1387c <__assert_fail@plt+0x25ac>
   13810:	mov	r5, #1
   13814:	mov	sl, #47	; 0x2f
   13818:	add	r0, r8, #1
   1381c:	add	r0, r0, r4
   13820:	add	r0, r0, r5
   13824:	bl	19fd0 <__assert_fail@plt+0x8d00>
   13828:	subs	fp, r0, #0
   1382c:	beq	1385c <__assert_fail@plt+0x258c>
   13830:	mov	r2, r4
   13834:	mov	r1, r7
   13838:	bl	11138 <mempcpy@plt>
   1383c:	cmp	r9, #0
   13840:	mov	r2, r8
   13844:	strb	sl, [r0], r5
   13848:	mov	r1, r6
   1384c:	strne	r0, [r9]
   13850:	bl	11138 <mempcpy@plt>
   13854:	mov	r3, #0
   13858:	strb	r3, [r0]
   1385c:	mov	r0, fp
   13860:	add	sp, sp, #4
   13864:	ldrd	r4, [sp]
   13868:	ldrd	r6, [sp, #8]
   1386c:	ldrd	r8, [sp, #16]
   13870:	ldrd	sl, [sp, #24]
   13874:	add	sp, sp, #32
   13878:	pop	{pc}		; (ldr pc, [sp], #4)
   1387c:	mov	r5, #0
   13880:	mov	sl, r5
   13884:	b	13818 <__assert_fail@plt+0x2548>
   13888:	ldrb	r3, [r6]
   1388c:	cmp	r3, #47	; 0x2f
   13890:	moveq	r5, #1
   13894:	movne	sl, #0
   13898:	moveq	sl, #46	; 0x2e
   1389c:	b	13818 <__assert_fail@plt+0x2548>
   138a0:	ldr	r3, [r0, #16]
   138a4:	ldr	r2, [r0, #20]
   138a8:	cmp	r2, r3
   138ac:	bhi	138d8 <__assert_fail@plt+0x2608>
   138b0:	ldm	r0, {r1, r2, r3}
   138b4:	tst	r1, #256	; 0x100
   138b8:	sub	r3, r3, r2
   138bc:	beq	138d0 <__assert_fail@plt+0x2600>
   138c0:	ldr	r1, [r0, #36]	; 0x24
   138c4:	ldr	r2, [r0, #44]	; 0x2c
   138c8:	sub	r2, r2, r1
   138cc:	add	r3, r3, r2
   138d0:	mov	r0, r3
   138d4:	bx	lr
   138d8:	mov	r0, #0
   138dc:	bx	lr
   138e0:	strd	r4, [sp, #-12]!
   138e4:	mov	r5, r0
   138e8:	str	lr, [sp, #8]
   138ec:	sub	sp, sp, #12
   138f0:	bl	11180 <__errno_location@plt>
   138f4:	mov	r4, r0
   138f8:	mov	r2, #0
   138fc:	ldr	r3, [r4]
   13900:	mov	r0, r5
   13904:	str	r2, [r4]
   13908:	str	r3, [sp]
   1390c:	str	r3, [sp, #4]
   13910:	bl	1100c <free@plt>
   13914:	ldr	r3, [r4]
   13918:	add	r2, sp, #8
   1391c:	clz	r3, r3
   13920:	lsr	r3, r3, #5
   13924:	add	r3, r2, r3, lsl #2
   13928:	ldr	r3, [r3, #-8]
   1392c:	str	r3, [r4]
   13930:	add	sp, sp, #12
   13934:	ldrd	r4, [sp]
   13938:	add	sp, sp, #8
   1393c:	pop	{pc}		; (ldr pc, [sp], #4)
   13940:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13944:	mov	r4, r0
   13948:	ldr	ip, [r0, #4]
   1394c:	strd	r6, [sp, #8]
   13950:	str	lr, [sp, #20]
   13954:	ldr	lr, [r0, #8]
   13958:	str	r8, [sp, #16]
   1395c:	sub	sp, sp, #8
   13960:	ldr	r5, [sp, #32]
   13964:	cmp	lr, ip
   13968:	beq	13990 <__assert_fail@plt+0x26c0>
   1396c:	mov	r0, r4
   13970:	str	r5, [sp, #32]
   13974:	add	sp, sp, #8
   13978:	ldrd	r4, [sp]
   1397c:	ldrd	r6, [sp, #8]
   13980:	ldr	r8, [sp, #16]
   13984:	ldr	lr, [sp, #20]
   13988:	add	sp, sp, #24
   1398c:	b	111d4 <fseeko64@plt>
   13990:	ldr	ip, [r0, #16]
   13994:	ldr	lr, [r0, #20]
   13998:	cmp	lr, ip
   1399c:	bne	1396c <__assert_fail@plt+0x269c>
   139a0:	ldr	r8, [r0, #36]	; 0x24
   139a4:	cmp	r8, #0
   139a8:	bne	1396c <__assert_fail@plt+0x269c>
   139ac:	mov	r6, r2
   139b0:	mov	r7, r3
   139b4:	bl	111b0 <fileno@plt>
   139b8:	mov	r2, r6
   139bc:	mov	r3, r7
   139c0:	str	r5, [sp]
   139c4:	bl	110c0 <lseek64@plt>
   139c8:	mvn	r3, #0
   139cc:	mvn	r2, #0
   139d0:	cmp	r1, r3
   139d4:	cmpeq	r0, r2
   139d8:	beq	13a08 <__assert_fail@plt+0x2738>
   139dc:	ldr	r3, [r4]
   139e0:	strd	r0, [r4, #80]	; 0x50
   139e4:	bic	r3, r3, #16
   139e8:	str	r3, [r4]
   139ec:	mov	r0, r8
   139f0:	add	sp, sp, #8
   139f4:	ldrd	r4, [sp]
   139f8:	ldrd	r6, [sp, #8]
   139fc:	ldr	r8, [sp, #16]
   13a00:	add	sp, sp, #20
   13a04:	pop	{pc}		; (ldr pc, [sp], #4)
   13a08:	mvn	r8, #0
   13a0c:	b	139ec <__assert_fail@plt+0x271c>
   13a10:	strd	r4, [sp, #-8]!
   13a14:	ldrd	r2, [r1, #8]
   13a18:	ldrd	r4, [r0, #8]
   13a1c:	cmp	r5, r3
   13a20:	cmpeq	r4, r2
   13a24:	movne	r0, #0
   13a28:	bne	13a44 <__assert_fail@plt+0x2774>
   13a2c:	ldrd	r4, [r0]
   13a30:	ldrd	r2, [r1]
   13a34:	cmp	r5, r3
   13a38:	cmpeq	r4, r2
   13a3c:	moveq	r0, #1
   13a40:	movne	r0, #0
   13a44:	ldrd	r4, [sp]
   13a48:	add	sp, sp, #8
   13a4c:	bx	lr
   13a50:	mov	r2, r1
   13a54:	mov	r3, #0
   13a58:	str	r4, [sp, #-8]!
   13a5c:	ldrd	r0, [r0, #8]
   13a60:	str	lr, [sp, #4]
   13a64:	bl	1a704 <__assert_fail@plt+0x9434>
   13a68:	ldr	r4, [sp]
   13a6c:	add	sp, sp, #4
   13a70:	mov	r0, r2
   13a74:	pop	{pc}		; (ldr pc, [sp], #4)
   13a78:	mov	r2, r1
   13a7c:	mov	r3, #0
   13a80:	str	r4, [sp, #-8]!
   13a84:	ldrd	r0, [r0]
   13a88:	str	lr, [sp, #4]
   13a8c:	bl	1a704 <__assert_fail@plt+0x9434>
   13a90:	ldr	r4, [sp]
   13a94:	add	sp, sp, #4
   13a98:	mov	r0, r2
   13a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13aa0:	strd	r4, [sp, #-8]!
   13aa4:	ldrd	r2, [r1]
   13aa8:	ldrd	r4, [r0]
   13aac:	cmp	r5, r3
   13ab0:	cmpeq	r4, r2
   13ab4:	ldrd	r4, [sp]
   13ab8:	add	sp, sp, #8
   13abc:	moveq	r0, #1
   13ac0:	movne	r0, #0
   13ac4:	bx	lr
   13ac8:	ldr	r2, [r0]
   13acc:	ldr	r3, [r1]
   13ad0:	ldrd	r0, [r2, #160]	; 0xa0
   13ad4:	ldrd	r2, [r3, #160]	; 0xa0
   13ad8:	cmp	r1, r3
   13adc:	cmpeq	r0, r2
   13ae0:	movhi	r0, #1
   13ae4:	movls	r0, #0
   13ae8:	movcc	r3, #1
   13aec:	movcs	r3, #0
   13af0:	sub	r0, r0, r3
   13af4:	bx	lr
   13af8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13afc:	mov	r5, r2
   13b00:	mov	r4, r1
   13b04:	ldr	r2, [r0, #40]	; 0x28
   13b08:	strd	r6, [sp, #8]
   13b0c:	mov	r6, r0
   13b10:	str	r8, [sp, #16]
   13b14:	str	lr, [sp, #20]
   13b18:	ldr	r0, [r0, #8]
   13b1c:	cmp	r2, r5
   13b20:	ldr	r7, [r6, #44]	; 0x2c
   13b24:	bcs	13b4c <__assert_fail@plt+0x287c>
   13b28:	add	r1, r5, #40	; 0x28
   13b2c:	cmn	r1, #-1073741823	; 0xc0000001
   13b30:	str	r1, [r6, #40]	; 0x28
   13b34:	bhi	13bd4 <__assert_fail@plt+0x2904>
   13b38:	lsl	r1, r1, #2
   13b3c:	bl	1a00c <__assert_fail@plt+0x8d3c>
   13b40:	cmp	r0, #0
   13b44:	strne	r0, [r6, #8]
   13b48:	beq	13bd0 <__assert_fail@plt+0x2900>
   13b4c:	cmp	r4, #0
   13b50:	movne	r2, r0
   13b54:	beq	13b68 <__assert_fail@plt+0x2898>
   13b58:	str	r4, [r2], #4
   13b5c:	ldr	r4, [r4, #8]
   13b60:	cmp	r4, #0
   13b64:	bne	13b58 <__assert_fail@plt+0x2888>
   13b68:	mov	r3, r7
   13b6c:	mov	r2, #4
   13b70:	mov	r1, r5
   13b74:	bl	11258 <qsort@plt>
   13b78:	ldr	lr, [r6, #8]
   13b7c:	subs	r3, r5, #1
   13b80:	ldr	r0, [lr]
   13b84:	moveq	r2, r0
   13b88:	beq	13bb4 <__assert_fail@plt+0x28e4>
   13b8c:	mov	ip, r0
   13b90:	mov	r2, lr
   13b94:	b	13b9c <__assert_fail@plt+0x28cc>
   13b98:	ldr	ip, [r2]
   13b9c:	subs	r3, r3, #1
   13ba0:	ldr	r1, [r2, #4]!
   13ba4:	str	r1, [ip, #8]
   13ba8:	bne	13b98 <__assert_fail@plt+0x28c8>
   13bac:	add	r5, lr, r5, lsl #2
   13bb0:	ldr	r2, [r5, #-4]
   13bb4:	mov	r3, #0
   13bb8:	str	r3, [r2, #8]
   13bbc:	ldrd	r4, [sp]
   13bc0:	ldrd	r6, [sp, #8]
   13bc4:	ldr	r8, [sp, #16]
   13bc8:	add	sp, sp, #20
   13bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   13bd0:	ldr	r0, [r6, #8]
   13bd4:	bl	138e0 <__assert_fail@plt+0x2610>
   13bd8:	mov	r3, #0
   13bdc:	mov	r0, r4
   13be0:	str	r3, [r6, #8]
   13be4:	str	r3, [r6, #40]	; 0x28
   13be8:	b	13bbc <__assert_fail@plt+0x28ec>
   13bec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13bf0:	mov	r5, r2
   13bf4:	strd	r6, [sp, #8]
   13bf8:	mov	r6, r0
   13bfc:	add	r0, r2, #176	; 0xb0
   13c00:	bic	r0, r0, #7
   13c04:	mov	r7, r1
   13c08:	str	r8, [sp, #16]
   13c0c:	str	lr, [sp, #20]
   13c10:	bl	19fd0 <__assert_fail@plt+0x8d00>
   13c14:	subs	r4, r0, #0
   13c18:	beq	13c64 <__assert_fail@plt+0x2994>
   13c1c:	mov	r1, r7
   13c20:	mov	r2, r5
   13c24:	add	r0, r4, #168	; 0xa8
   13c28:	bl	11030 <memcpy@plt>
   13c2c:	ldr	r1, [r6, #24]
   13c30:	mov	r3, #0
   13c34:	add	r0, r4, r5
   13c38:	mov	r2, #3
   13c3c:	strb	r3, [r0, #168]	; 0xa8
   13c40:	str	r3, [r4, #12]
   13c44:	str	r3, [r4, #16]
   13c48:	str	r3, [r4, #20]
   13c4c:	str	r1, [r4, #28]
   13c50:	str	r3, [r4, #32]
   13c54:	str	r6, [r4, #44]	; 0x2c
   13c58:	str	r5, [r4, #52]	; 0x34
   13c5c:	strh	r3, [r4, #58]	; 0x3a
   13c60:	strh	r2, [r4, #60]	; 0x3c
   13c64:	mov	r0, r4
   13c68:	ldrd	r4, [sp]
   13c6c:	ldrd	r6, [sp, #8]
   13c70:	ldr	r8, [sp, #16]
   13c74:	add	sp, sp, #20
   13c78:	pop	{pc}		; (ldr pc, [sp], #4)
   13c7c:	strd	r4, [sp, #-16]!
   13c80:	subs	r4, r0, #0
   13c84:	str	r6, [sp, #8]
   13c88:	str	lr, [sp, #12]
   13c8c:	beq	13cb4 <__assert_fail@plt+0x29e4>
   13c90:	ldr	r5, [r4, #8]
   13c94:	ldr	r3, [r4, #12]
   13c98:	subs	r0, r3, #0
   13c9c:	beq	13ca4 <__assert_fail@plt+0x29d4>
   13ca0:	bl	112c4 <closedir@plt>
   13ca4:	mov	r0, r4
   13ca8:	bl	138e0 <__assert_fail@plt+0x2610>
   13cac:	subs	r4, r5, #0
   13cb0:	bne	13c90 <__assert_fail@plt+0x29c0>
   13cb4:	ldrd	r4, [sp]
   13cb8:	ldr	r6, [sp, #8]
   13cbc:	add	sp, sp, #12
   13cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cc4:	str	r4, [sp, #-8]!
   13cc8:	mov	r4, r0
   13ccc:	str	lr, [sp, #4]
   13cd0:	b	13ce0 <__assert_fail@plt+0x2a10>
   13cd4:	bl	16ef8 <__assert_fail@plt+0x5c28>
   13cd8:	cmp	r0, #0
   13cdc:	bge	13d00 <__assert_fail@plt+0x2a30>
   13ce0:	mov	r0, r4
   13ce4:	bl	16ea8 <__assert_fail@plt+0x5bd8>
   13ce8:	cmp	r0, #0
   13cec:	mov	r0, r4
   13cf0:	beq	13cd4 <__assert_fail@plt+0x2a04>
   13cf4:	ldr	r4, [sp]
   13cf8:	add	sp, sp, #4
   13cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   13d00:	bl	112a0 <close@plt>
   13d04:	b	13ce0 <__assert_fail@plt+0x2a10>
   13d08:	strd	r4, [sp, #-20]!	; 0xffffffec
   13d0c:	ldr	r5, [r0, #44]	; 0x2c
   13d10:	ldr	r3, [r5, #48]	; 0x30
   13d14:	strd	r6, [sp, #8]
   13d18:	str	lr, [sp, #16]
   13d1c:	sub	sp, sp, #100	; 0x64
   13d20:	tst	r3, #512	; 0x200
   13d24:	beq	13db4 <__assert_fail@plt+0x2ae4>
   13d28:	ldr	r4, [r5, #52]	; 0x34
   13d2c:	mov	r7, r1
   13d30:	mov	r6, r0
   13d34:	cmp	r4, #0
   13d38:	beq	13d60 <__assert_fail@plt+0x2a90>
   13d3c:	ldrd	r2, [r6, #64]	; 0x40
   13d40:	add	r1, sp, #8
   13d44:	mov	r0, r4
   13d48:	strd	r2, [sp, #8]
   13d4c:	bl	163a8 <__assert_fail@plt+0x50d8>
   13d50:	cmp	r0, #0
   13d54:	beq	13d98 <__assert_fail@plt+0x2ac8>
   13d58:	ldr	r0, [r0, #8]
   13d5c:	b	13db8 <__assert_fail@plt+0x2ae8>
   13d60:	movw	r0, #14560	; 0x38e0
   13d64:	movt	r0, #1
   13d68:	mov	r1, r4
   13d6c:	movw	r3, #15008	; 0x3aa0
   13d70:	movt	r3, #1
   13d74:	movw	r2, #14968	; 0x3a78
   13d78:	movt	r2, #1
   13d7c:	str	r0, [sp]
   13d80:	mov	r0, #13
   13d84:	bl	166c8 <__assert_fail@plt+0x53f8>
   13d88:	cmp	r0, #0
   13d8c:	mov	r4, r0
   13d90:	str	r0, [r5, #52]	; 0x34
   13d94:	bne	13d3c <__assert_fail@plt+0x2a6c>
   13d98:	cmp	r7, #0
   13d9c:	blt	13db4 <__assert_fail@plt+0x2ae4>
   13da0:	mov	r0, r7
   13da4:	add	r1, sp, #8
   13da8:	bl	10fa0 <fstatfs64@plt>
   13dac:	cmp	r0, #0
   13db0:	beq	13dcc <__assert_fail@plt+0x2afc>
   13db4:	mov	r0, #0
   13db8:	add	sp, sp, #100	; 0x64
   13dbc:	ldrd	r4, [sp]
   13dc0:	ldrd	r6, [sp, #8]
   13dc4:	add	sp, sp, #16
   13dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dcc:	cmp	r4, #0
   13dd0:	beq	13e10 <__assert_fail@plt+0x2b40>
   13dd4:	mov	r0, #16
   13dd8:	bl	19fd0 <__assert_fail@plt+0x8d00>
   13ddc:	subs	r5, r0, #0
   13de0:	beq	13e10 <__assert_fail@plt+0x2b40>
   13de4:	ldr	ip, [sp, #8]
   13de8:	mov	r0, r4
   13dec:	mov	r1, r5
   13df0:	ldrd	r2, [r6, #64]	; 0x40
   13df4:	strd	r2, [r5]
   13df8:	str	ip, [r5, #8]
   13dfc:	bl	16d20 <__assert_fail@plt+0x5a50>
   13e00:	cmp	r0, #0
   13e04:	beq	13e18 <__assert_fail@plt+0x2b48>
   13e08:	cmp	r5, r0
   13e0c:	bne	13e24 <__assert_fail@plt+0x2b54>
   13e10:	ldr	r0, [sp, #8]
   13e14:	b	13db8 <__assert_fail@plt+0x2ae8>
   13e18:	mov	r0, r5
   13e1c:	bl	138e0 <__assert_fail@plt+0x2610>
   13e20:	b	13e10 <__assert_fail@plt+0x2b40>
   13e24:	bl	11294 <abort@plt>
   13e28:	strd	r4, [sp, #-16]!
   13e2c:	mov	r5, r1
   13e30:	ldr	r1, [r0, #32]
   13e34:	str	r6, [sp, #8]
   13e38:	str	lr, [sp, #12]
   13e3c:	sub	r3, r1, r5
   13e40:	cmn	r1, #100	; 0x64
   13e44:	clz	r3, r3
   13e48:	lsr	r3, r3, #5
   13e4c:	moveq	r3, #0
   13e50:	cmp	r3, #0
   13e54:	bne	13eb4 <__assert_fail@plt+0x2be4>
   13e58:	cmp	r2, #0
   13e5c:	mov	r4, r0
   13e60:	bne	13e90 <__assert_fail@plt+0x2bc0>
   13e64:	ldr	r3, [r0, #48]	; 0x30
   13e68:	mvn	r2, r1
   13e6c:	lsr	r2, r2, #31
   13e70:	eor	r3, r3, #4
   13e74:	ands	r3, r2, r3, lsr #2
   13e78:	bne	13ea8 <__assert_fail@plt+0x2bd8>
   13e7c:	ldr	r6, [sp, #8]
   13e80:	str	r5, [r4, #32]
   13e84:	ldrd	r4, [sp]
   13e88:	add	sp, sp, #12
   13e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e90:	add	r0, r0, #60	; 0x3c
   13e94:	bl	16eb0 <__assert_fail@plt+0x5be0>
   13e98:	cmp	r0, #0
   13e9c:	blt	13e7c <__assert_fail@plt+0x2bac>
   13ea0:	bl	112a0 <close@plt>
   13ea4:	b	13e7c <__assert_fail@plt+0x2bac>
   13ea8:	mov	r0, r1
   13eac:	bl	112a0 <close@plt>
   13eb0:	b	13e7c <__assert_fail@plt+0x2bac>
   13eb4:	bl	11294 <abort@plt>
   13eb8:	ldr	r3, [r0, #48]	; 0x30
   13ebc:	strd	r4, [sp, #-16]!
   13ec0:	mov	r4, r0
   13ec4:	str	r6, [sp, #8]
   13ec8:	str	lr, [sp, #12]
   13ecc:	ands	r5, r3, #4
   13ed0:	movne	r5, #0
   13ed4:	bne	13eec <__assert_fail@plt+0x2c1c>
   13ed8:	tst	r3, #512	; 0x200
   13edc:	beq	13f08 <__assert_fail@plt+0x2c38>
   13ee0:	mov	r2, #1
   13ee4:	mvn	r1, #99	; 0x63
   13ee8:	bl	13e28 <__assert_fail@plt+0x2b58>
   13eec:	add	r0, r4, #60	; 0x3c
   13ef0:	bl	13cc4 <__assert_fail@plt+0x29f4>
   13ef4:	mov	r0, r5
   13ef8:	ldrd	r4, [sp]
   13efc:	ldr	r6, [sp, #8]
   13f00:	add	sp, sp, #12
   13f04:	pop	{pc}		; (ldr pc, [sp], #4)
   13f08:	ldr	r0, [r0, #28]
   13f0c:	bl	1124c <fchdir@plt>
   13f10:	adds	r5, r0, #0
   13f14:	movne	r5, #1
   13f18:	b	13eec <__assert_fail@plt+0x2c1c>
   13f1c:	ldr	ip, [r2, #48]	; 0x30
   13f20:	strd	r4, [sp, #-16]!
   13f24:	mov	r4, r2
   13f28:	add	r5, r2, #64	; 0x40
   13f2c:	ldr	r2, [r2, #24]
   13f30:	str	r6, [sp, #8]
   13f34:	str	lr, [sp, #12]
   13f38:	sub	sp, sp, #8
   13f3c:	cmp	ip, #0
   13f40:	bne	13fb8 <__assert_fail@plt+0x2ce8>
   13f44:	tst	r1, #1
   13f48:	beq	13fb8 <__assert_fail@plt+0x2ce8>
   13f4c:	mov	r1, r2
   13f50:	mov	r0, #3
   13f54:	mov	r2, r5
   13f58:	bl	11270 <__xstat64@plt>
   13f5c:	cmp	r0, #0
   13f60:	beq	13fe4 <__assert_fail@plt+0x2d14>
   13f64:	bl	11180 <__errno_location@plt>
   13f68:	ldr	r3, [r0]
   13f6c:	mov	r6, r0
   13f70:	cmp	r3, #2
   13f74:	bne	13f9c <__assert_fail@plt+0x2ccc>
   13f78:	mov	r2, r5
   13f7c:	mov	r0, #3
   13f80:	ldr	r1, [r4, #24]
   13f84:	bl	112ac <__lxstat64@plt>
   13f88:	subs	r3, r0, #0
   13f8c:	moveq	r0, #13
   13f90:	streq	r3, [r6]
   13f94:	beq	14008 <__assert_fail@plt+0x2d38>
   13f98:	ldr	r3, [r6]
   13f9c:	mov	r0, r5
   13fa0:	mov	r2, #104	; 0x68
   13fa4:	str	r3, [r4, #32]
   13fa8:	mov	r1, #0
   13fac:	bl	11198 <memset@plt>
   13fb0:	mov	r0, #10
   13fb4:	b	14008 <__assert_fail@plt+0x2d38>
   13fb8:	ubfx	ip, r1, #1, #1
   13fbc:	orrs	r3, r3, ip
   13fc0:	bne	13f4c <__assert_fail@plt+0x2c7c>
   13fc4:	mov	ip, #256	; 0x100
   13fc8:	mov	r1, r0
   13fcc:	mov	r3, r5
   13fd0:	mov	r0, #3
   13fd4:	str	ip, [sp]
   13fd8:	bl	11090 <__fxstatat64@plt>
   13fdc:	cmp	r0, #0
   13fe0:	bne	14064 <__assert_fail@plt+0x2d94>
   13fe4:	ldr	r3, [r4, #80]	; 0x50
   13fe8:	and	r3, r3, #61440	; 0xf000
   13fec:	cmp	r3, #16384	; 0x4000
   13ff0:	beq	1401c <__assert_fail@plt+0x2d4c>
   13ff4:	cmp	r3, #40960	; 0xa000
   13ff8:	beq	14070 <__assert_fail@plt+0x2da0>
   13ffc:	cmp	r3, #32768	; 0x8000
   14000:	movne	r0, #3
   14004:	moveq	r0, #8
   14008:	add	sp, sp, #8
   1400c:	ldrd	r4, [sp]
   14010:	ldr	r6, [sp, #8]
   14014:	add	sp, sp, #12
   14018:	pop	{pc}		; (ldr pc, [sp], #4)
   1401c:	ldrb	r3, [r4, #168]	; 0xa8
   14020:	cmp	r3, #46	; 0x2e
   14024:	bne	14048 <__assert_fail@plt+0x2d78>
   14028:	ldrb	r3, [r4, #169]	; 0xa9
   1402c:	cmp	r3, #0
   14030:	beq	14050 <__assert_fail@plt+0x2d80>
   14034:	ldr	r3, [r4, #168]	; 0xa8
   14038:	bic	r3, r3, #-16777216	; 0xff000000
   1403c:	bic	r3, r3, #255	; 0xff
   14040:	cmp	r3, #11776	; 0x2e00
   14044:	beq	14050 <__assert_fail@plt+0x2d80>
   14048:	mov	r0, #1
   1404c:	b	14008 <__assert_fail@plt+0x2d38>
   14050:	ldr	r3, [r4, #48]	; 0x30
   14054:	cmp	r3, #0
   14058:	moveq	r0, #1
   1405c:	movne	r0, #5
   14060:	b	14008 <__assert_fail@plt+0x2d38>
   14064:	bl	11180 <__errno_location@plt>
   14068:	ldr	r3, [r0]
   1406c:	b	13f9c <__assert_fail@plt+0x2ccc>
   14070:	mov	r0, #12
   14074:	b	14008 <__assert_fail@plt+0x2d38>
   14078:	mov	ip, r1
   1407c:	ldr	r1, [r1]
   14080:	strd	r4, [sp, #-16]!
   14084:	mov	r4, r0
   14088:	ldr	r0, [r0]
   1408c:	str	r6, [sp, #8]
   14090:	str	lr, [sp, #12]
   14094:	add	r3, r1, #256	; 0x100
   14098:	add	r2, r3, r2
   1409c:	cmp	r1, r2
   140a0:	bhi	140d4 <__assert_fail@plt+0x2e04>
   140a4:	mov	r1, r2
   140a8:	str	r2, [ip]
   140ac:	bl	1a00c <__assert_fail@plt+0x8d3c>
   140b0:	subs	r5, r0, #0
   140b4:	movne	r3, #1
   140b8:	strne	r5, [r4]
   140bc:	beq	140f4 <__assert_fail@plt+0x2e24>
   140c0:	ldrd	r4, [sp]
   140c4:	mov	r0, r3
   140c8:	ldr	r6, [sp, #8]
   140cc:	add	sp, sp, #12
   140d0:	pop	{pc}		; (ldr pc, [sp], #4)
   140d4:	mov	r5, #0
   140d8:	bl	138e0 <__assert_fail@plt+0x2610>
   140dc:	str	r5, [r4]
   140e0:	bl	11180 <__errno_location@plt>
   140e4:	mov	r2, #36	; 0x24
   140e8:	mov	r3, r5
   140ec:	str	r2, [r0]
   140f0:	b	140c0 <__assert_fail@plt+0x2df0>
   140f4:	ldr	r0, [r4]
   140f8:	bl	138e0 <__assert_fail@plt+0x2610>
   140fc:	mov	r3, r5
   14100:	str	r5, [r4]
   14104:	b	140c0 <__assert_fail@plt+0x2df0>
   14108:	movw	r3, #258	; 0x102
   1410c:	str	r4, [sp, #-8]!
   14110:	mov	r4, r1
   14114:	tst	r0, r3
   14118:	str	lr, [sp, #4]
   1411c:	sub	sp, sp, #8
   14120:	beq	1416c <__assert_fail@plt+0x2e9c>
   14124:	movw	r1, #14560	; 0x38e0
   14128:	movt	r1, #1
   1412c:	movw	r3, #14864	; 0x3a10
   14130:	movt	r3, #1
   14134:	movw	r2, #14928	; 0x3a50
   14138:	movt	r2, #1
   1413c:	str	r1, [sp]
   14140:	mov	r0, #31
   14144:	mov	r1, #0
   14148:	bl	166c8 <__assert_fail@plt+0x53f8>
   1414c:	mov	r3, r0
   14150:	adds	r0, r0, #0
   14154:	movne	r0, #1
   14158:	str	r3, [r4]
   1415c:	add	sp, sp, #8
   14160:	ldr	r4, [sp]
   14164:	add	sp, sp, #4
   14168:	pop	{pc}		; (ldr pc, [sp], #4)
   1416c:	mov	r0, #32
   14170:	bl	19fd0 <__assert_fail@plt+0x8d00>
   14174:	cmp	r0, #0
   14178:	str	r0, [r4]
   1417c:	beq	1415c <__assert_fail@plt+0x2e8c>
   14180:	bl	1a0ec <__assert_fail@plt+0x8e1c>
   14184:	mov	r0, #1
   14188:	add	sp, sp, #8
   1418c:	ldr	r4, [sp]
   14190:	add	sp, sp, #4
   14194:	pop	{pc}		; (ldr pc, [sp], #4)
   14198:	mov	r3, r2
   1419c:	lsl	r2, r1, #11
   141a0:	tst	r1, #512	; 0x200
   141a4:	and	r2, r2, #32768	; 0x8000
   141a8:	orr	r2, r2, #540672	; 0x84000
   141ac:	orr	r2, r2, #2304	; 0x900
   141b0:	beq	141bc <__assert_fail@plt+0x2eec>
   141b4:	mov	r1, r3
   141b8:	b	16f48 <__assert_fail@plt+0x5c78>
   141bc:	mov	r1, r2
   141c0:	mov	r0, r3
   141c4:	b	1a4a8 <__assert_fail@plt+0x91d8>
   141c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   141cc:	mov	r5, r0
   141d0:	mov	r4, r2
   141d4:	strd	r6, [sp, #8]
   141d8:	mov	r7, r1
   141dc:	strd	r8, [sp, #16]
   141e0:	ldr	r9, [r0, #48]	; 0x30
   141e4:	str	sl, [sp, #24]
   141e8:	subs	sl, r3, #0
   141ec:	str	lr, [sp, #28]
   141f0:	sub	sp, sp, #104	; 0x68
   141f4:	and	r8, r9, #4
   141f8:	beq	142d0 <__assert_fail@plt+0x3000>
   141fc:	movw	r1, #46796	; 0xb6cc
   14200:	movt	r1, #1
   14204:	mov	r0, sl
   14208:	bl	10fdc <strcmp@plt>
   1420c:	cmp	r0, #0
   14210:	bne	142d0 <__assert_fail@plt+0x3000>
   14214:	cmp	r8, #0
   14218:	bne	14310 <__assert_fail@plt+0x3040>
   1421c:	cmp	r4, #0
   14220:	bge	143d0 <__assert_fail@plt+0x3100>
   14224:	tst	r9, #512	; 0x200
   14228:	bne	14354 <__assert_fail@plt+0x3084>
   1422c:	mov	r8, #1
   14230:	mov	r1, r9
   14234:	mov	r2, sl
   14238:	ldr	r0, [r5, #32]
   1423c:	bl	14198 <__assert_fail@plt+0x2ec8>
   14240:	subs	r6, r0, #0
   14244:	blt	143c8 <__assert_fail@plt+0x30f8>
   14248:	ldr	r9, [r5, #48]	; 0x30
   1424c:	tst	r9, #2
   14250:	beq	142ec <__assert_fail@plt+0x301c>
   14254:	mov	r2, sp
   14258:	mov	r1, r6
   1425c:	mov	r0, #3
   14260:	bl	110a8 <__fxstat64@plt>
   14264:	cmp	r0, #0
   14268:	bne	1434c <__assert_fail@plt+0x307c>
   1426c:	ldrd	r2, [sp]
   14270:	ldrd	r0, [r7, #64]	; 0x40
   14274:	cmp	r1, r3
   14278:	cmpeq	r0, r2
   1427c:	bne	14340 <__assert_fail@plt+0x3070>
   14280:	ldrd	r2, [sp, #96]	; 0x60
   14284:	ldrd	r0, [r7, #160]	; 0xa0
   14288:	cmp	r1, r3
   1428c:	cmpeq	r0, r2
   14290:	bne	14340 <__assert_fail@plt+0x3070>
   14294:	ldr	r9, [r5, #48]	; 0x30
   14298:	tst	r9, #512	; 0x200
   1429c:	bne	14390 <__assert_fail@plt+0x30c0>
   142a0:	mov	r0, r6
   142a4:	bl	1124c <fchdir@plt>
   142a8:	mov	r9, r0
   142ac:	cmp	r4, #0
   142b0:	bge	14320 <__assert_fail@plt+0x3050>
   142b4:	bl	11180 <__errno_location@plt>
   142b8:	mov	r4, r0
   142bc:	mov	r0, r6
   142c0:	ldr	r5, [r4]
   142c4:	bl	112a0 <close@plt>
   142c8:	str	r5, [r4]
   142cc:	b	14320 <__assert_fail@plt+0x3050>
   142d0:	cmp	r8, #0
   142d4:	bne	14310 <__assert_fail@plt+0x3040>
   142d8:	cmp	r4, #0
   142dc:	movge	r6, r4
   142e0:	blt	14230 <__assert_fail@plt+0x2f60>
   142e4:	tst	r9, #2
   142e8:	bne	14254 <__assert_fail@plt+0x2f84>
   142ec:	cmp	sl, #0
   142f0:	beq	14298 <__assert_fail@plt+0x2fc8>
   142f4:	mov	r0, sl
   142f8:	movw	r1, #46796	; 0xb6cc
   142fc:	movt	r1, #1
   14300:	bl	10fdc <strcmp@plt>
   14304:	cmp	r0, #0
   14308:	bne	14298 <__assert_fail@plt+0x2fc8>
   1430c:	b	14254 <__assert_fail@plt+0x2f84>
   14310:	mvn	r3, r4
   14314:	lsr	r3, r3, #31
   14318:	ands	r9, r3, r9, lsr #9
   1431c:	bne	143ac <__assert_fail@plt+0x30dc>
   14320:	mov	r0, r9
   14324:	add	sp, sp, #104	; 0x68
   14328:	ldrd	r4, [sp]
   1432c:	ldrd	r6, [sp, #8]
   14330:	ldrd	r8, [sp, #16]
   14334:	ldr	sl, [sp, #24]
   14338:	add	sp, sp, #28
   1433c:	pop	{pc}		; (ldr pc, [sp], #4)
   14340:	bl	11180 <__errno_location@plt>
   14344:	mov	r3, #2
   14348:	str	r3, [r0]
   1434c:	mvn	r9, #0
   14350:	b	142ac <__assert_fail@plt+0x2fdc>
   14354:	add	r6, r5, #60	; 0x3c
   14358:	mov	r0, r6
   1435c:	bl	16ea8 <__assert_fail@plt+0x5bd8>
   14360:	subs	r8, r0, #0
   14364:	bne	14230 <__assert_fail@plt+0x2f60>
   14368:	mov	r0, r6
   1436c:	bl	16ef8 <__assert_fail@plt+0x5c28>
   14370:	subs	r6, r0, #0
   14374:	blt	143bc <__assert_fail@plt+0x30ec>
   14378:	ldr	r9, [r5, #48]	; 0x30
   1437c:	mov	r4, r6
   14380:	mov	r8, #1
   14384:	tst	r9, #2
   14388:	beq	14298 <__assert_fail@plt+0x2fc8>
   1438c:	b	14254 <__assert_fail@plt+0x2f84>
   14390:	eor	r2, r8, #1
   14394:	mov	r1, r6
   14398:	uxtb	r2, r2
   1439c:	mov	r0, r5
   143a0:	bl	13e28 <__assert_fail@plt+0x2b58>
   143a4:	mov	r9, #0
   143a8:	b	14320 <__assert_fail@plt+0x3050>
   143ac:	mov	r0, r4
   143b0:	mov	r9, #0
   143b4:	bl	112a0 <close@plt>
   143b8:	b	14320 <__assert_fail@plt+0x3050>
   143bc:	mov	r8, #1
   143c0:	ldr	r9, [r5, #48]	; 0x30
   143c4:	b	14230 <__assert_fail@plt+0x2f60>
   143c8:	mvn	r9, #0
   143cc:	b	14320 <__assert_fail@plt+0x3050>
   143d0:	tst	r9, #2
   143d4:	mov	r6, r4
   143d8:	mov	r8, #1
   143dc:	beq	142f4 <__assert_fail@plt+0x3024>
   143e0:	b	14254 <__assert_fail@plt+0x2f84>
   143e4:	movw	r3, #258	; 0x102
   143e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   143ec:	tst	r0, r3
   143f0:	strd	r6, [sp, #8]
   143f4:	strd	r8, [sp, #16]
   143f8:	mov	r8, r2
   143fc:	str	sl, [sp, #24]
   14400:	mov	sl, r1
   14404:	str	lr, [sp, #28]
   14408:	beq	1448c <__assert_fail@plt+0x31bc>
   1440c:	mov	r0, #24
   14410:	bl	19fd0 <__assert_fail@plt+0x8d00>
   14414:	subs	r9, r0, #0
   14418:	beq	144b0 <__assert_fail@plt+0x31e0>
   1441c:	ldrd	r6, [r8, #64]	; 0x40
   14420:	mov	r1, r9
   14424:	ldrd	r4, [r8, #160]	; 0xa0
   14428:	ldr	r0, [sl]
   1442c:	strd	r6, [r9]
   14430:	str	r8, [r9, #16]
   14434:	strd	r4, [r9, #8]
   14438:	bl	16d20 <__assert_fail@plt+0x5a50>
   1443c:	cmp	r9, r0
   14440:	mov	r4, r0
   14444:	beq	14470 <__assert_fail@plt+0x31a0>
   14448:	mov	r0, r9
   1444c:	bl	138e0 <__assert_fail@plt+0x2610>
   14450:	cmp	r4, #0
   14454:	beq	144b0 <__assert_fail@plt+0x31e0>
   14458:	ldr	r3, [r4, #16]
   1445c:	mov	r2, #2
   14460:	mov	r0, #1
   14464:	str	r3, [r8]
   14468:	strh	r2, [r8, #56]	; 0x38
   1446c:	b	14474 <__assert_fail@plt+0x31a4>
   14470:	mov	r0, #1
   14474:	ldrd	r4, [sp]
   14478:	ldrd	r6, [sp, #8]
   1447c:	ldrd	r8, [sp, #16]
   14480:	ldr	sl, [sp, #24]
   14484:	add	sp, sp, #28
   14488:	pop	{pc}		; (ldr pc, [sp], #4)
   1448c:	add	r1, r2, #64	; 0x40
   14490:	ldr	r0, [sl]
   14494:	bl	1a114 <__assert_fail@plt+0x8e44>
   14498:	cmp	r0, #0
   1449c:	beq	14470 <__assert_fail@plt+0x31a0>
   144a0:	mov	r3, #2
   144a4:	str	r8, [r8]
   144a8:	strh	r3, [r8, #56]	; 0x38
   144ac:	b	14474 <__assert_fail@plt+0x31a4>
   144b0:	mov	r0, #0
   144b4:	b	14474 <__assert_fail@plt+0x31a4>
   144b8:	movw	r3, #258	; 0x102
   144bc:	mov	ip, r1
   144c0:	strd	r4, [sp, #-12]!
   144c4:	tst	r0, r3
   144c8:	str	lr, [sp, #8]
   144cc:	sub	sp, sp, #28
   144d0:	bne	14520 <__assert_fail@plt+0x3250>
   144d4:	ldr	r3, [r2, #4]
   144d8:	cmp	r3, #0
   144dc:	beq	14510 <__assert_fail@plt+0x3240>
   144e0:	ldr	r1, [r3, #48]	; 0x30
   144e4:	cmp	r1, #0
   144e8:	blt	14510 <__assert_fail@plt+0x3240>
   144ec:	ldr	ip, [ip]
   144f0:	ldrd	r0, [ip, #16]
   144f4:	orrs	r1, r0, r1
   144f8:	beq	14580 <__assert_fail@plt+0x32b0>
   144fc:	ldrd	r4, [ip]
   14500:	ldrd	r0, [r2, #160]	; 0xa0
   14504:	cmp	r5, r1
   14508:	cmpeq	r4, r0
   1450c:	beq	14558 <__assert_fail@plt+0x3288>
   14510:	add	sp, sp, #28
   14514:	ldrd	r4, [sp]
   14518:	add	sp, sp, #8
   1451c:	pop	{pc}		; (ldr pc, [sp], #4)
   14520:	ldrd	r4, [r2, #64]	; 0x40
   14524:	mov	r1, sp
   14528:	ldrd	r2, [r2, #160]	; 0xa0
   1452c:	ldr	r0, [ip]
   14530:	strd	r4, [sp]
   14534:	strd	r2, [sp, #8]
   14538:	bl	16d60 <__assert_fail@plt+0x5a90>
   1453c:	cmp	r0, #0
   14540:	beq	14580 <__assert_fail@plt+0x32b0>
   14544:	bl	138e0 <__assert_fail@plt+0x2610>
   14548:	add	sp, sp, #28
   1454c:	ldrd	r4, [sp]
   14550:	add	sp, sp, #8
   14554:	pop	{pc}		; (ldr pc, [sp], #4)
   14558:	ldrd	r0, [ip, #8]
   1455c:	ldrd	r4, [r2, #64]	; 0x40
   14560:	cmp	r1, r5
   14564:	cmpeq	r0, r4
   14568:	bne	14510 <__assert_fail@plt+0x3240>
   1456c:	ldrd	r0, [r3, #64]	; 0x40
   14570:	ldrd	r2, [r3, #160]	; 0xa0
   14574:	strd	r2, [ip]
   14578:	strd	r0, [ip, #8]
   1457c:	b	14510 <__assert_fail@plt+0x3240>
   14580:	bl	11294 <abort@plt>
   14584:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14588:	mov	r5, r0
   1458c:	strd	r6, [sp, #8]
   14590:	strd	r8, [sp, #16]
   14594:	ldr	r9, [r0]
   14598:	strd	sl, [sp, #24]
   1459c:	str	lr, [sp, #32]
   145a0:	sub	sp, sp, #68	; 0x44
   145a4:	str	r1, [sp, #32]
   145a8:	ldr	r0, [r9, #12]
   145ac:	cmp	r0, #0
   145b0:	str	r0, [sp, #40]	; 0x28
   145b4:	beq	148f4 <__assert_fail@plt+0x3624>
   145b8:	bl	11240 <dirfd@plt>
   145bc:	cmp	r0, #0
   145c0:	str	r0, [sp, #60]	; 0x3c
   145c4:	blt	14e38 <__assert_fail@plt+0x3b68>
   145c8:	ldr	r3, [r5, #44]	; 0x2c
   145cc:	cmp	r3, #0
   145d0:	beq	14d1c <__assert_fail@plt+0x3a4c>
   145d4:	ldr	r3, [r5, #48]	; 0x30
   145d8:	mvn	r2, #0
   145dc:	str	r2, [sp, #16]
   145e0:	mov	r2, #1
   145e4:	str	r2, [sp, #52]	; 0x34
   145e8:	ldr	r2, [r9, #28]
   145ec:	ldr	r1, [r9, #40]	; 0x28
   145f0:	sub	r0, r1, #1
   145f4:	str	r1, [sp]
   145f8:	ldrb	r2, [r2, r0]
   145fc:	str	r0, [sp, #28]
   14600:	cmp	r2, #47	; 0x2f
   14604:	beq	14614 <__assert_fail@plt+0x3344>
   14608:	add	r2, r1, #1
   1460c:	str	r2, [sp]
   14610:	str	r1, [sp, #28]
   14614:	ands	r3, r3, #4
   14618:	streq	r3, [sp, #20]
   1461c:	beq	1463c <__assert_fail@plt+0x336c>
   14620:	ldr	r3, [r5, #24]
   14624:	mov	r1, #47	; 0x2f
   14628:	ldr	r0, [sp, #28]
   1462c:	add	r2, r3, r0
   14630:	strb	r1, [r3, r0]
   14634:	add	r3, r2, #1
   14638:	str	r3, [sp, #20]
   1463c:	mov	sl, #0
   14640:	movw	r3, #6548	; 0x1994
   14644:	movt	r3, #258	; 0x102
   14648:	mov	r2, sl
   1464c:	ldr	fp, [r5, #36]	; 0x24
   14650:	mov	r7, sl
   14654:	stmib	sp, {r2, r9}
   14658:	movw	r2, #19778	; 0x4d42
   1465c:	movt	r2, #65363	; 0xff53
   14660:	str	sl, [sp, #24]
   14664:	str	r3, [sp, #44]	; 0x2c
   14668:	ldr	r3, [r9, #48]	; 0x30
   1466c:	str	sl, [sp, #36]	; 0x24
   14670:	str	r2, [sp, #48]	; 0x30
   14674:	ldr	r2, [sp]
   14678:	add	r3, r3, #1
   1467c:	str	r3, [sp, #12]
   14680:	sub	fp, fp, r2
   14684:	b	1469c <__assert_fail@plt+0x33cc>
   14688:	ldr	r3, [sp, #16]
   1468c:	add	r7, r7, #1
   14690:	cmp	r7, r3
   14694:	bcs	14a54 <__assert_fail@plt+0x3784>
   14698:	mov	sl, r4
   1469c:	ldr	r3, [sp, #8]
   146a0:	ldr	r4, [r3, #12]
   146a4:	cmp	r4, #0
   146a8:	beq	14bdc <__assert_fail@plt+0x390c>
   146ac:	bl	11180 <__errno_location@plt>
   146b0:	mov	r8, r0
   146b4:	mov	r3, #0
   146b8:	mov	r0, r4
   146bc:	str	r3, [r8]
   146c0:	bl	11228 <readdir64@plt>
   146c4:	subs	r9, r0, #0
   146c8:	beq	14cac <__assert_fail@plt+0x39dc>
   146cc:	ldr	r3, [r5, #48]	; 0x30
   146d0:	tst	r3, #32
   146d4:	bne	146e4 <__assert_fail@plt+0x3414>
   146d8:	ldrb	r3, [r9, #19]
   146dc:	cmp	r3, #46	; 0x2e
   146e0:	beq	14878 <__assert_fail@plt+0x35a8>
   146e4:	add	r4, r9, #19
   146e8:	mov	r0, r4
   146ec:	bl	11168 <strlen@plt>
   146f0:	mov	r2, r0
   146f4:	mov	r1, r4
   146f8:	mov	r6, r0
   146fc:	mov	r0, r5
   14700:	bl	13bec <__assert_fail@plt+0x291c>
   14704:	subs	r4, r0, #0
   14708:	beq	14b0c <__assert_fail@plt+0x383c>
   1470c:	cmp	fp, r6
   14710:	bls	147d8 <__assert_fail@plt+0x3508>
   14714:	ldr	r3, [sp]
   14718:	adds	r6, r6, r3
   1471c:	bcs	14f0c <__assert_fail@plt+0x3c3c>
   14720:	ldr	r3, [sp, #12]
   14724:	add	r1, r4, #168	; 0xa8
   14728:	ldr	ip, [r5]
   1472c:	ldr	r0, [r5, #48]	; 0x30
   14730:	str	r6, [r4, #40]	; 0x28
   14734:	str	r3, [r4, #48]	; 0x30
   14738:	ldrd	r2, [r9]
   1473c:	str	ip, [r4, #4]
   14740:	tst	r0, #4
   14744:	streq	r1, [r4, #24]
   14748:	strd	r2, [r4, #160]	; 0xa0
   1474c:	bne	14858 <__assert_fail@plt+0x3588>
   14750:	ldr	r3, [r5, #44]	; 0x2c
   14754:	cmp	r3, #0
   14758:	beq	14764 <__assert_fail@plt+0x3494>
   1475c:	ands	r3, r0, #1024	; 0x400
   14760:	beq	14898 <__assert_fail@plt+0x35c8>
   14764:	ldrb	r3, [r9, #18]
   14768:	tst	r0, #8
   1476c:	sub	r2, r3, #1
   14770:	beq	1477c <__assert_fail@plt+0x34ac>
   14774:	tst	r3, #251	; 0xfb
   14778:	bne	148b0 <__assert_fail@plt+0x35e0>
   1477c:	mov	r3, #11
   14780:	cmp	r2, r3
   14784:	strh	r3, [r4, #56]	; 0x38
   14788:	bls	1483c <__assert_fail@plt+0x356c>
   1478c:	mov	r1, #0
   14790:	mov	r2, #2
   14794:	mov	r3, #0
   14798:	str	r1, [r4, #80]	; 0x50
   1479c:	strd	r2, [r4, #112]	; 0x70
   147a0:	ldr	r2, [sp, #4]
   147a4:	mov	r3, #0
   147a8:	str	r3, [r4, #8]
   147ac:	cmp	r2, r3
   147b0:	movw	r3, #10000	; 0x2710
   147b4:	strne	r4, [sl, #8]
   147b8:	streq	r4, [sp, #4]
   147bc:	cmp	r7, r3
   147c0:	bne	14688 <__assert_fail@plt+0x33b8>
   147c4:	ldr	r6, [r5, #44]	; 0x2c
   147c8:	cmp	r6, #0
   147cc:	beq	14a08 <__assert_fail@plt+0x3738>
   147d0:	movw	r7, #10001	; 0x2711
   147d4:	b	14698 <__assert_fail@plt+0x33c8>
   147d8:	ldr	r3, [sp, #28]
   147dc:	add	r1, r5, #36	; 0x24
   147e0:	add	r0, r5, #24
   147e4:	ldr	fp, [r5, #24]
   147e8:	add	r2, r3, #2
   147ec:	add	r2, r2, r6
   147f0:	bl	14078 <__assert_fail@plt+0x2da8>
   147f4:	cmp	r0, #0
   147f8:	beq	14b0c <__assert_fail@plt+0x383c>
   147fc:	ldr	r3, [r5, #24]
   14800:	cmp	r3, fp
   14804:	beq	148ec <__assert_fail@plt+0x361c>
   14808:	ldr	r2, [r5, #48]	; 0x30
   1480c:	tst	r2, #4
   14810:	beq	14820 <__assert_fail@plt+0x3550>
   14814:	ldr	r2, [sp]
   14818:	add	r3, r3, r2
   1481c:	str	r3, [sp, #20]
   14820:	ldr	r3, [sp]
   14824:	str	r0, [sp, #24]
   14828:	ldr	fp, [r5, #36]	; 0x24
   1482c:	sub	fp, fp, r3
   14830:	b	14714 <__assert_fail@plt+0x3444>
   14834:	mov	r3, #11
   14838:	strh	r3, [r4, #56]	; 0x38
   1483c:	movw	r3, #47668	; 0xba34
   14840:	movt	r3, #1
   14844:	ldr	r1, [r3, r2, lsl #2]
   14848:	mov	r2, #2
   1484c:	mov	r3, #0
   14850:	str	r1, [r4, #80]	; 0x50
   14854:	b	1479c <__assert_fail@plt+0x34cc>
   14858:	ldr	r3, [r4, #28]
   1485c:	ldr	r2, [r4, #52]	; 0x34
   14860:	ldr	r0, [sp, #20]
   14864:	str	r3, [r4, #24]
   14868:	add	r2, r2, #1
   1486c:	bl	11000 <memmove@plt>
   14870:	ldr	r0, [r5, #48]	; 0x30
   14874:	b	14750 <__assert_fail@plt+0x3480>
   14878:	ldrb	r3, [r9, #20]
   1487c:	cmp	r3, #0
   14880:	beq	14890 <__assert_fail@plt+0x35c0>
   14884:	ldrh	r3, [r9, #20]
   14888:	cmp	r3, #46	; 0x2e
   1488c:	bne	146e4 <__assert_fail@plt+0x3414>
   14890:	mov	r4, sl
   14894:	b	14698 <__assert_fail@plt+0x33c8>
   14898:	mov	r1, r0
   1489c:	mov	r2, r4
   148a0:	ldr	r0, [r5, #32]
   148a4:	bl	13f1c <__assert_fail@plt+0x2c4c>
   148a8:	strh	r0, [r4, #56]	; 0x38
   148ac:	b	147a0 <__assert_fail@plt+0x34d0>
   148b0:	ubfx	r0, r0, #4, #1
   148b4:	cmp	r3, #10
   148b8:	moveq	r3, r0
   148bc:	orrne	r3, r0, #1
   148c0:	cmp	r3, #0
   148c4:	beq	14834 <__assert_fail@plt+0x3564>
   148c8:	mov	r3, #11
   148cc:	cmp	r2, r3
   148d0:	strh	r3, [r4, #56]	; 0x38
   148d4:	bls	14af0 <__assert_fail@plt+0x3820>
   148d8:	mov	r1, #0
   148dc:	mov	r2, #1
   148e0:	mov	r3, #0
   148e4:	str	r1, [r4, #80]	; 0x50
   148e8:	b	1479c <__assert_fail@plt+0x34cc>
   148ec:	ldr	r0, [sp, #24]
   148f0:	b	14820 <__assert_fail@plt+0x3550>
   148f4:	ldr	r3, [r5, #48]	; 0x30
   148f8:	ldr	r1, [r9, #24]
   148fc:	and	r2, r3, #516	; 0x204
   14900:	cmp	r2, #512	; 0x200
   14904:	ldreq	r0, [r5, #32]
   14908:	mvnne	r0, #99	; 0x63
   1490c:	ands	r2, r3, #16
   14910:	beq	14920 <__assert_fail@plt+0x3650>
   14914:	tst	r3, #1
   14918:	moveq	r2, #32768	; 0x8000
   1491c:	bne	14b70 <__assert_fail@plt+0x38a0>
   14920:	add	r3, sp, #60	; 0x3c
   14924:	bl	16f88 <__assert_fail@plt+0x5cb8>
   14928:	cmp	r0, #0
   1492c:	str	r0, [sp, #4]
   14930:	str	r0, [r9, #12]
   14934:	beq	14e80 <__assert_fail@plt+0x3bb0>
   14938:	ldrh	r3, [r9, #56]	; 0x38
   1493c:	ldr	r0, [r5, #48]	; 0x30
   14940:	cmp	r3, #11
   14944:	beq	14dcc <__assert_fail@plt+0x3afc>
   14948:	tst	r0, #256	; 0x100
   1494c:	bne	14d48 <__assert_fail@plt+0x3a78>
   14950:	ldr	r2, [r5, #44]	; 0x2c
   14954:	movw	r3, #34464	; 0x86a0
   14958:	movt	r3, #1
   1495c:	cmp	r2, #0
   14960:	mvnne	r3, #0
   14964:	str	r3, [sp, #16]
   14968:	ldr	r3, [sp, #32]
   1496c:	cmp	r3, #2
   14970:	beq	14d38 <__assert_fail@plt+0x3a68>
   14974:	ldr	r3, [r5, #48]	; 0x30
   14978:	ldr	r0, [sp, #60]	; 0x3c
   1497c:	and	r3, r3, #56	; 0x38
   14980:	cmp	r3, #24
   14984:	beq	14b80 <__assert_fail@plt+0x38b0>
   14988:	ldr	r3, [sp, #32]
   1498c:	mov	r4, #1
   14990:	sub	r6, r3, #3
   14994:	clz	r6, r6
   14998:	lsr	r6, r6, #5
   1499c:	ldr	r3, [r5, #48]	; 0x30
   149a0:	tst	r3, #512	; 0x200
   149a4:	bne	14e6c <__assert_fail@plt+0x3b9c>
   149a8:	cmp	r0, #0
   149ac:	bge	14e0c <__assert_fail@plt+0x3b3c>
   149b0:	tst	r6, r4
   149b4:	beq	149c4 <__assert_fail@plt+0x36f4>
   149b8:	bl	11180 <__errno_location@plt>
   149bc:	ldr	r3, [r0]
   149c0:	str	r3, [r9, #32]
   149c4:	ldrh	r3, [r9, #58]	; 0x3a
   149c8:	ldr	r0, [r9, #12]
   149cc:	orr	r3, r3, #1
   149d0:	strh	r3, [r9, #58]	; 0x3a
   149d4:	bl	112c4 <closedir@plt>
   149d8:	ldr	r3, [r5, #48]	; 0x30
   149dc:	mov	r2, #0
   149e0:	str	r2, [r9, #12]
   149e4:	tst	r3, #512	; 0x200
   149e8:	beq	149f8 <__assert_fail@plt+0x3728>
   149ec:	ldr	r0, [sp, #60]	; 0x3c
   149f0:	cmp	r0, r2
   149f4:	bge	14e60 <__assert_fail@plt+0x3b90>
   149f8:	mov	r2, #0
   149fc:	str	r2, [r9, #12]
   14a00:	str	r2, [sp, #52]	; 0x34
   14a04:	b	145e8 <__assert_fail@plt+0x3318>
   14a08:	ldr	r0, [sp, #8]
   14a0c:	ldr	r1, [sp, #60]	; 0x3c
   14a10:	bl	13d08 <__assert_fail@plt+0x2a38>
   14a14:	movw	r3, #26985	; 0x6969
   14a18:	cmp	r0, r3
   14a1c:	beq	14a40 <__assert_fail@plt+0x3770>
   14a20:	ldr	r3, [sp, #44]	; 0x2c
   14a24:	cmp	r0, r3
   14a28:	beq	14a40 <__assert_fail@plt+0x3770>
   14a2c:	ldr	r3, [sp, #48]	; 0x30
   14a30:	cmp	r0, r3
   14a34:	movne	r3, #1
   14a38:	strne	r3, [sp, #36]	; 0x24
   14a3c:	bne	147d0 <__assert_fail@plt+0x3500>
   14a40:	ldr	r3, [sp, #16]
   14a44:	add	r7, r7, #1
   14a48:	str	r6, [sp, #36]	; 0x24
   14a4c:	cmp	r7, r3
   14a50:	bcc	14698 <__assert_fail@plt+0x33c8>
   14a54:	ldr	r9, [sp, #8]
   14a58:	ldr	r3, [sp, #24]
   14a5c:	cmp	r3, #0
   14a60:	beq	14bec <__assert_fail@plt+0x391c>
   14a64:	ldr	r3, [r5, #4]
   14a68:	ldr	r1, [r5, #24]
   14a6c:	cmp	r3, #0
   14a70:	beq	14aa4 <__assert_fail@plt+0x37d4>
   14a74:	ldr	r2, [r3, #24]
   14a78:	add	r0, r3, #168	; 0xa8
   14a7c:	cmp	r2, r0
   14a80:	beq	14a94 <__assert_fail@plt+0x37c4>
   14a84:	ldr	r0, [r3, #28]
   14a88:	sub	r2, r2, r0
   14a8c:	add	r2, r1, r2
   14a90:	str	r2, [r3, #24]
   14a94:	str	r1, [r3, #28]
   14a98:	ldr	r3, [r3, #8]
   14a9c:	cmp	r3, #0
   14aa0:	bne	14a74 <__assert_fail@plt+0x37a4>
   14aa4:	ldr	r3, [sp, #4]
   14aa8:	b	14adc <__assert_fail@plt+0x380c>
   14aac:	ldr	r2, [r3, #24]
   14ab0:	cmp	r2, r0
   14ab4:	beq	14ac8 <__assert_fail@plt+0x37f8>
   14ab8:	ldr	r0, [r3, #28]
   14abc:	sub	r2, r2, r0
   14ac0:	add	r2, r1, r2
   14ac4:	str	r2, [r3, #24]
   14ac8:	ldr	r2, [r3, #8]
   14acc:	str	r1, [r3, #28]
   14ad0:	cmp	r2, #0
   14ad4:	ldreq	r2, [r3, #4]
   14ad8:	mov	r3, r2
   14adc:	ldr	r2, [r3, #48]	; 0x30
   14ae0:	add	r0, r3, #168	; 0xa8
   14ae4:	cmp	r2, #0
   14ae8:	bge	14aac <__assert_fail@plt+0x37dc>
   14aec:	b	14bec <__assert_fail@plt+0x391c>
   14af0:	movw	r3, #47668	; 0xba34
   14af4:	movt	r3, #1
   14af8:	ldr	r1, [r3, r2, lsl #2]
   14afc:	mov	r2, #1
   14b00:	mov	r3, #0
   14b04:	str	r1, [r4, #80]	; 0x50
   14b08:	b	1479c <__assert_fail@plt+0x34cc>
   14b0c:	ldr	r9, [sp, #8]
   14b10:	mov	r0, r4
   14b14:	ldr	r4, [r8]
   14b18:	bl	138e0 <__assert_fail@plt+0x2610>
   14b1c:	ldr	r0, [sp, #4]
   14b20:	bl	13c7c <__assert_fail@plt+0x29ac>
   14b24:	ldr	r0, [r9, #12]
   14b28:	bl	112c4 <closedir@plt>
   14b2c:	ldr	r3, [r5, #48]	; 0x30
   14b30:	mov	r2, #0
   14b34:	mov	r1, #7
   14b38:	str	r2, [sp, #4]
   14b3c:	str	r2, [r9, #12]
   14b40:	strh	r1, [r9, #56]	; 0x38
   14b44:	orr	r3, r3, #8192	; 0x2000
   14b48:	str	r3, [r5, #48]	; 0x30
   14b4c:	str	r4, [r8]
   14b50:	ldr	r0, [sp, #4]
   14b54:	add	sp, sp, #68	; 0x44
   14b58:	ldrd	r4, [sp]
   14b5c:	ldrd	r6, [sp, #8]
   14b60:	ldrd	r8, [sp, #16]
   14b64:	ldrd	sl, [sp, #24]
   14b68:	add	sp, sp, #32
   14b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b70:	ldr	r2, [r9, #48]	; 0x30
   14b74:	cmp	r2, #0
   14b78:	movne	r2, #32768	; 0x8000
   14b7c:	b	14920 <__assert_fail@plt+0x3650>
   14b80:	ldr	r3, [r9, #84]	; 0x54
   14b84:	cmp	r3, #2
   14b88:	bne	14988 <__assert_fail@plt+0x36b8>
   14b8c:	mov	r1, r0
   14b90:	mov	r0, r9
   14b94:	bl	13d08 <__assert_fail@plt+0x2a38>
   14b98:	movw	r3, #26985	; 0x6969
   14b9c:	cmp	r0, r3
   14ba0:	beq	14f04 <__assert_fail@plt+0x3c34>
   14ba4:	bgt	14ee8 <__assert_fail@plt+0x3c18>
   14ba8:	movw	r3, #19778	; 0x4d42
   14bac:	movt	r3, #65363	; 0xff53
   14bb0:	cmp	r0, r3
   14bb4:	beq	14f04 <__assert_fail@plt+0x3c34>
   14bb8:	cmp	r0, #0
   14bbc:	beq	14f04 <__assert_fail@plt+0x3c34>
   14bc0:	ldr	r3, [sp, #32]
   14bc4:	cmp	r3, #3
   14bc8:	bne	14d38 <__assert_fail@plt+0x3a68>
   14bcc:	mov	r4, #0
   14bd0:	mov	r6, #1
   14bd4:	ldr	r0, [sp, #60]	; 0x3c
   14bd8:	b	1499c <__assert_fail@plt+0x36cc>
   14bdc:	mov	r9, r3
   14be0:	ldr	r3, [sp, #24]
   14be4:	cmp	r3, #0
   14be8:	bne	14a64 <__assert_fail@plt+0x3794>
   14bec:	ldr	r3, [r5, #48]	; 0x30
   14bf0:	tst	r3, #4
   14bf4:	beq	14c24 <__assert_fail@plt+0x3954>
   14bf8:	ldr	r2, [sp]
   14bfc:	ldr	r3, [r5, #36]	; 0x24
   14c00:	cmp	r7, #0
   14c04:	cmpne	r3, r2
   14c08:	bne	14c18 <__assert_fail@plt+0x3948>
   14c0c:	ldr	r3, [sp, #20]
   14c10:	sub	r3, r3, #1
   14c14:	str	r3, [sp, #20]
   14c18:	ldr	r2, [sp, #20]
   14c1c:	mov	r3, #0
   14c20:	strb	r3, [r2]
   14c24:	ldr	r2, [sp, #40]	; 0x28
   14c28:	ldr	r3, [sp, #52]	; 0x34
   14c2c:	cmp	r2, #0
   14c30:	movne	r3, #0
   14c34:	cmp	r3, #0
   14c38:	beq	14c70 <__assert_fail@plt+0x39a0>
   14c3c:	ldr	r3, [sp, #32]
   14c40:	cmp	r7, #0
   14c44:	cmpne	r3, #1
   14c48:	bne	14c78 <__assert_fail@plt+0x39a8>
   14c4c:	ldr	r3, [r9, #48]	; 0x30
   14c50:	cmp	r3, #0
   14c54:	bne	14de8 <__assert_fail@plt+0x3b18>
   14c58:	mov	r0, r5
   14c5c:	bl	13eb8 <__assert_fail@plt+0x2be8>
   14c60:	adds	r0, r0, #0
   14c64:	movne	r0, #1
   14c68:	cmp	r0, #0
   14c6c:	bne	14ec0 <__assert_fail@plt+0x3bf0>
   14c70:	cmp	r7, #0
   14c74:	beq	14d98 <__assert_fail@plt+0x3ac8>
   14c78:	ldr	r3, [sp, #36]	; 0x24
   14c7c:	cmp	r3, #0
   14c80:	bne	14cf0 <__assert_fail@plt+0x3a20>
   14c84:	ldr	r3, [r5, #44]	; 0x2c
   14c88:	cmp	r3, #0
   14c8c:	cmpne	r7, #1
   14c90:	beq	14b50 <__assert_fail@plt+0x3880>
   14c94:	mov	r2, r7
   14c98:	mov	r0, r5
   14c9c:	ldr	r1, [sp, #4]
   14ca0:	bl	13af8 <__assert_fail@plt+0x2828>
   14ca4:	str	r0, [sp, #4]
   14ca8:	b	14b50 <__assert_fail@plt+0x3880>
   14cac:	ldr	r3, [r8]
   14cb0:	ldr	r9, [sp, #8]
   14cb4:	cmp	r3, #0
   14cb8:	beq	14cd4 <__assert_fail@plt+0x3a04>
   14cbc:	ldr	r2, [sp, #40]	; 0x28
   14cc0:	str	r3, [r9, #32]
   14cc4:	orrs	r2, r2, r7
   14cc8:	moveq	r3, #4
   14ccc:	movne	r3, #7
   14cd0:	strh	r3, [r9, #56]	; 0x38
   14cd4:	ldr	r0, [r9, #12]
   14cd8:	cmp	r0, #0
   14cdc:	beq	14be0 <__assert_fail@plt+0x3910>
   14ce0:	bl	112c4 <closedir@plt>
   14ce4:	mov	r3, #0
   14ce8:	str	r3, [r9, #12]
   14cec:	b	14be0 <__assert_fail@plt+0x3910>
   14cf0:	movw	r3, #15048	; 0x3ac8
   14cf4:	movt	r3, #1
   14cf8:	ldr	r1, [sp, #4]
   14cfc:	mov	r2, r7
   14d00:	mov	r0, r5
   14d04:	str	r3, [r5, #44]	; 0x2c
   14d08:	bl	13af8 <__assert_fail@plt+0x2828>
   14d0c:	mov	r3, #0
   14d10:	str	r0, [sp, #4]
   14d14:	str	r3, [r5, #44]	; 0x2c
   14d18:	b	14b50 <__assert_fail@plt+0x3880>
   14d1c:	movw	r3, #34464	; 0x86a0
   14d20:	movt	r3, #1
   14d24:	mov	r2, #1
   14d28:	str	r3, [sp, #16]
   14d2c:	str	r2, [sp, #52]	; 0x34
   14d30:	ldr	r3, [r5, #48]	; 0x30
   14d34:	b	145e8 <__assert_fail@plt+0x3318>
   14d38:	mov	r3, #0
   14d3c:	str	r3, [sp, #52]	; 0x34
   14d40:	ldr	r3, [r5, #48]	; 0x30
   14d44:	b	145e8 <__assert_fail@plt+0x3318>
   14d48:	add	r4, r5, #56	; 0x38
   14d4c:	mov	r2, r9
   14d50:	mov	r1, r4
   14d54:	bl	144b8 <__assert_fail@plt+0x31e8>
   14d58:	mov	r3, #0
   14d5c:	mov	r2, r9
   14d60:	ldr	r0, [r5, #32]
   14d64:	ldr	r1, [r5, #48]	; 0x30
   14d68:	bl	13f1c <__assert_fail@plt+0x2c4c>
   14d6c:	mov	r1, r4
   14d70:	mov	r2, r9
   14d74:	ldr	r0, [r5, #48]	; 0x30
   14d78:	bl	143e4 <__assert_fail@plt+0x3114>
   14d7c:	subs	r4, r0, #0
   14d80:	bne	14950 <__assert_fail@plt+0x3680>
   14d84:	bl	11180 <__errno_location@plt>
   14d88:	mov	r3, #12
   14d8c:	str	r4, [sp, #4]
   14d90:	str	r3, [r0]
   14d94:	b	14b50 <__assert_fail@plt+0x3880>
   14d98:	ldr	r3, [sp, #32]
   14d9c:	cmp	r3, #3
   14da0:	bne	14db8 <__assert_fail@plt+0x3ae8>
   14da4:	ldrh	r3, [r9, #56]	; 0x38
   14da8:	cmp	r3, #7
   14dac:	cmpne	r3, #4
   14db0:	movne	r3, #6
   14db4:	strhne	r3, [r9, #56]	; 0x38
   14db8:	mov	r3, #0
   14dbc:	ldr	r0, [sp, #4]
   14dc0:	str	r3, [sp, #4]
   14dc4:	bl	13c7c <__assert_fail@plt+0x29ac>
   14dc8:	b	14b50 <__assert_fail@plt+0x3880>
   14dcc:	mov	r1, r0
   14dd0:	mov	r3, #0
   14dd4:	ldr	r0, [r5, #32]
   14dd8:	mov	r2, r9
   14ddc:	bl	13f1c <__assert_fail@plt+0x2c4c>
   14de0:	strh	r0, [r9, #56]	; 0x38
   14de4:	b	14950 <__assert_fail@plt+0x3680>
   14de8:	movw	r3, #46796	; 0xb6cc
   14dec:	movt	r3, #1
   14df0:	ldr	r1, [r9, #4]
   14df4:	mvn	r2, #0
   14df8:	mov	r0, r5
   14dfc:	bl	141c8 <__assert_fail@plt+0x2ef8>
   14e00:	adds	r0, r0, #0
   14e04:	movne	r0, #1
   14e08:	b	14c68 <__assert_fail@plt+0x3998>
   14e0c:	mov	r2, r0
   14e10:	mov	r3, #0
   14e14:	mov	r1, r9
   14e18:	mov	r0, r5
   14e1c:	bl	141c8 <__assert_fail@plt+0x2ef8>
   14e20:	cmp	r0, #0
   14e24:	bne	149b0 <__assert_fail@plt+0x36e0>
   14e28:	mov	r3, #1
   14e2c:	str	r3, [sp, #52]	; 0x34
   14e30:	ldr	r3, [r5, #48]	; 0x30
   14e34:	b	145e8 <__assert_fail@plt+0x3318>
   14e38:	ldr	r0, [r9, #12]
   14e3c:	mov	r4, #0
   14e40:	bl	112c4 <closedir@plt>
   14e44:	ldr	r3, [sp, #32]
   14e48:	str	r4, [r9, #12]
   14e4c:	cmp	r3, #3
   14e50:	beq	14ea4 <__assert_fail@plt+0x3bd4>
   14e54:	mov	r3, #0
   14e58:	str	r3, [sp, #4]
   14e5c:	b	14b50 <__assert_fail@plt+0x3880>
   14e60:	bl	112a0 <close@plt>
   14e64:	ldr	r3, [r5, #48]	; 0x30
   14e68:	b	149f8 <__assert_fail@plt+0x3728>
   14e6c:	mov	r2, #3
   14e70:	movw	r1, #1030	; 0x406
   14e74:	bl	1a2c0 <__assert_fail@plt+0x8ff0>
   14e78:	str	r0, [sp, #60]	; 0x3c
   14e7c:	b	149a8 <__assert_fail@plt+0x36d8>
   14e80:	ldr	r3, [sp, #32]
   14e84:	cmp	r3, #3
   14e88:	bne	14e54 <__assert_fail@plt+0x3b84>
   14e8c:	mov	r3, #4
   14e90:	strh	r3, [r9, #56]	; 0x38
   14e94:	bl	11180 <__errno_location@plt>
   14e98:	ldr	r3, [r0]
   14e9c:	str	r3, [r9, #32]
   14ea0:	b	14b50 <__assert_fail@plt+0x3880>
   14ea4:	mov	r3, #4
   14ea8:	str	r4, [sp, #4]
   14eac:	strh	r3, [r9, #56]	; 0x38
   14eb0:	bl	11180 <__errno_location@plt>
   14eb4:	ldr	r3, [r0]
   14eb8:	str	r3, [r9, #32]
   14ebc:	b	14b50 <__assert_fail@plt+0x3880>
   14ec0:	ldr	r3, [r5, #48]	; 0x30
   14ec4:	mov	r2, #7
   14ec8:	mov	r1, #0
   14ecc:	strh	r2, [r9, #56]	; 0x38
   14ed0:	ldr	r0, [sp, #4]
   14ed4:	str	r1, [sp, #4]
   14ed8:	orr	r3, r3, #8192	; 0x2000
   14edc:	str	r3, [r5, #48]	; 0x30
   14ee0:	bl	13c7c <__assert_fail@plt+0x29ac>
   14ee4:	b	14b50 <__assert_fail@plt+0x3880>
   14ee8:	movw	r3, #40864	; 0x9fa0
   14eec:	cmp	r0, r3
   14ef0:	beq	14f04 <__assert_fail@plt+0x3c34>
   14ef4:	movw	r3, #16719	; 0x414f
   14ef8:	movt	r3, #21318	; 0x5346
   14efc:	cmp	r0, r3
   14f00:	bne	14bc0 <__assert_fail@plt+0x38f0>
   14f04:	ldr	r0, [sp, #60]	; 0x3c
   14f08:	b	14988 <__assert_fail@plt+0x36b8>
   14f0c:	ldr	r9, [sp, #8]
   14f10:	mov	r0, r4
   14f14:	bl	138e0 <__assert_fail@plt+0x2610>
   14f18:	ldr	r0, [sp, #4]
   14f1c:	bl	13c7c <__assert_fail@plt+0x29ac>
   14f20:	ldr	r0, [r9, #12]
   14f24:	bl	112c4 <closedir@plt>
   14f28:	ldr	r3, [r5, #48]	; 0x30
   14f2c:	mov	r2, #0
   14f30:	mov	r0, #7
   14f34:	mov	r1, #36	; 0x24
   14f38:	str	r2, [sp, #4]
   14f3c:	str	r2, [r9, #12]
   14f40:	strh	r0, [r9, #56]	; 0x38
   14f44:	orr	r3, r3, #8192	; 0x2000
   14f48:	str	r3, [r5, #48]	; 0x30
   14f4c:	str	r1, [r8]
   14f50:	b	14b50 <__assert_fail@plt+0x3880>
   14f54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f58:	bic	r5, r1, #4080	; 0xff0
   14f5c:	bic	r5, r5, #15
   14f60:	strd	r6, [sp, #8]
   14f64:	cmp	r5, #0
   14f68:	strd	r8, [sp, #16]
   14f6c:	strd	sl, [sp, #24]
   14f70:	str	lr, [sp, #32]
   14f74:	sub	sp, sp, #12
   14f78:	bne	15294 <__assert_fail@plt+0x3fc4>
   14f7c:	and	r3, r1, #516	; 0x204
   14f80:	mov	r7, r1
   14f84:	cmp	r3, #516	; 0x204
   14f88:	beq	15230 <__assert_fail@plt+0x3f60>
   14f8c:	ands	r5, r1, #18
   14f90:	beq	15230 <__assert_fail@plt+0x3f60>
   14f94:	mov	r6, r0
   14f98:	mov	r1, #96	; 0x60
   14f9c:	mov	r0, #1
   14fa0:	mov	r9, r2
   14fa4:	bl	19f5c <__assert_fail@plt+0x8c8c>
   14fa8:	subs	r5, r0, #0
   14fac:	beq	151e8 <__assert_fail@plt+0x3f18>
   14fb0:	tst	r7, #2
   14fb4:	mvn	r2, #99	; 0x63
   14fb8:	bicne	r3, r7, #512	; 0x200
   14fbc:	orrne	r3, r3, #4
   14fc0:	streq	r7, [r5, #48]	; 0x30
   14fc4:	str	r2, [r5, #32]
   14fc8:	strne	r3, [r5, #48]	; 0x30
   14fcc:	ldr	r3, [r6]
   14fd0:	str	r9, [r5, #44]	; 0x2c
   14fd4:	cmp	r3, #0
   14fd8:	beq	152a8 <__assert_fail@plt+0x3fd8>
   14fdc:	mov	r8, r6
   14fe0:	mov	r4, #0
   14fe4:	mov	r0, r3
   14fe8:	bl	11168 <strlen@plt>
   14fec:	ldr	r3, [r8, #4]!
   14ff0:	cmp	r4, r0
   14ff4:	movcc	r4, r0
   14ff8:	cmp	r3, #0
   14ffc:	bne	14fe4 <__assert_fail@plt+0x3d14>
   15000:	add	r2, r4, #1
   15004:	cmp	r2, #4096	; 0x1000
   15008:	movcc	r2, #4096	; 0x1000
   1500c:	add	r1, r5, #36	; 0x24
   15010:	add	r0, r5, #24
   15014:	bl	14078 <__assert_fail@plt+0x2da8>
   15018:	subs	fp, r0, #0
   1501c:	beq	15220 <__assert_fail@plt+0x3f50>
   15020:	ldr	sl, [r6]
   15024:	cmp	sl, #0
   15028:	beq	15284 <__assert_fail@plt+0x3fb4>
   1502c:	movw	r1, #47816	; 0xbac8
   15030:	movt	r1, #1
   15034:	mov	r2, #0
   15038:	mov	r0, r5
   1503c:	bl	13bec <__assert_fail@plt+0x291c>
   15040:	subs	sl, r0, #0
   15044:	beq	15218 <__assert_fail@plt+0x3f48>
   15048:	mvn	r3, #0
   1504c:	cmp	r9, #0
   15050:	ldr	r4, [r6]
   15054:	str	r3, [sl, #48]	; 0x30
   15058:	beq	15064 <__assert_fail@plt+0x3d94>
   1505c:	ldr	fp, [r5, #48]	; 0x30
   15060:	ubfx	fp, fp, #10, #1
   15064:	cmp	r4, #0
   15068:	beq	152e4 <__assert_fail@plt+0x4014>
   1506c:	eor	r7, r7, #2048	; 0x800
   15070:	mov	r3, #0
   15074:	ubfx	r2, r7, #11, #1
   15078:	mov	r8, r3
   1507c:	mov	r7, r3
   15080:	strd	r2, [sp]
   15084:	b	150bc <__assert_fail@plt+0x3dec>
   15088:	mov	r3, #11
   1508c:	mov	r2, #2
   15090:	cmp	r9, r1
   15094:	strh	r3, [r4, #56]	; 0x38
   15098:	mov	r3, #0
   1509c:	strd	r2, [r4, #112]	; 0x70
   150a0:	beq	15270 <__assert_fail@plt+0x3fa0>
   150a4:	str	r7, [r4, #8]
   150a8:	mov	r7, r4
   150ac:	ldr	r4, [r6, #4]!
   150b0:	add	r8, r8, #1
   150b4:	cmp	r4, #0
   150b8:	beq	15168 <__assert_fail@plt+0x3e98>
   150bc:	mov	r0, r4
   150c0:	bl	11168 <strlen@plt>
   150c4:	ldr	r3, [sp]
   150c8:	mov	r2, r0
   150cc:	cmp	r0, #2
   150d0:	movls	r3, #0
   150d4:	andhi	r3, r3, #1
   150d8:	cmp	r3, #0
   150dc:	bne	15240 <__assert_fail@plt+0x3f70>
   150e0:	mov	r1, r4
   150e4:	mov	r0, r5
   150e8:	bl	13bec <__assert_fail@plt+0x291c>
   150ec:	subs	r4, r0, #0
   150f0:	beq	15208 <__assert_fail@plt+0x3f38>
   150f4:	add	r2, r4, #168	; 0xa8
   150f8:	cmp	r7, #0
   150fc:	moveq	r3, #0
   15100:	andne	r3, fp, #1
   15104:	str	sl, [r4, #4]
   15108:	mov	r1, #0
   1510c:	cmp	r3, #0
   15110:	str	r2, [r4, #24]
   15114:	str	r1, [r4, #48]	; 0x30
   15118:	bne	15088 <__assert_fail@plt+0x3db8>
   1511c:	mov	r2, r4
   15120:	ldr	r0, [r5, #32]
   15124:	ldr	r1, [r5, #48]	; 0x30
   15128:	bl	13f1c <__assert_fail@plt+0x2c4c>
   1512c:	cmp	r9, #0
   15130:	strh	r0, [r4, #56]	; 0x38
   15134:	bne	150a4 <__assert_fail@plt+0x3dd4>
   15138:	cmp	r7, #0
   1513c:	str	r9, [r4, #8]
   15140:	moveq	r7, r4
   15144:	streq	r4, [sp, #4]
   15148:	beq	150ac <__assert_fail@plt+0x3ddc>
   1514c:	ldr	r3, [sp, #4]
   15150:	str	r4, [sp, #4]
   15154:	str	r4, [r3, #8]
   15158:	ldr	r4, [r6, #4]!
   1515c:	add	r8, r8, #1
   15160:	cmp	r4, #0
   15164:	bne	150bc <__assert_fail@plt+0x3dec>
   15168:	cmp	r9, #0
   1516c:	cmpne	r8, #1
   15170:	bls	15188 <__assert_fail@plt+0x3eb8>
   15174:	mov	r1, r7
   15178:	mov	r2, r8
   1517c:	mov	r0, r5
   15180:	bl	13af8 <__assert_fail@plt+0x2828>
   15184:	mov	r7, r0
   15188:	movw	r1, #47816	; 0xbac8
   1518c:	movt	r1, #1
   15190:	mov	r2, #0
   15194:	mov	r0, r5
   15198:	bl	13bec <__assert_fail@plt+0x291c>
   1519c:	cmp	r0, #0
   151a0:	str	r0, [r5]
   151a4:	beq	15208 <__assert_fail@plt+0x3f38>
   151a8:	mov	r2, #1
   151ac:	mov	r3, #9
   151b0:	str	r7, [r0, #8]
   151b4:	add	r1, r5, #56	; 0x38
   151b8:	str	r2, [r0, #48]	; 0x30
   151bc:	strh	r3, [r0, #56]	; 0x38
   151c0:	ldr	r0, [r5, #48]	; 0x30
   151c4:	bl	14108 <__assert_fail@plt+0x2e38>
   151c8:	cmp	r0, #0
   151cc:	beq	15208 <__assert_fail@plt+0x3f38>
   151d0:	ldr	r1, [r5, #48]	; 0x30
   151d4:	tst	r1, #516	; 0x204
   151d8:	beq	152b0 <__assert_fail@plt+0x3fe0>
   151dc:	mvn	r1, #0
   151e0:	add	r0, r5, #60	; 0x3c
   151e4:	bl	16e7c <__assert_fail@plt+0x5bac>
   151e8:	mov	r0, r5
   151ec:	add	sp, sp, #12
   151f0:	ldrd	r4, [sp]
   151f4:	ldrd	r6, [sp, #8]
   151f8:	ldrd	r8, [sp, #16]
   151fc:	ldrd	sl, [sp, #24]
   15200:	add	sp, sp, #32
   15204:	pop	{pc}		; (ldr pc, [sp], #4)
   15208:	mov	r0, r7
   1520c:	bl	13c7c <__assert_fail@plt+0x29ac>
   15210:	mov	r0, sl
   15214:	bl	138e0 <__assert_fail@plt+0x2610>
   15218:	ldr	r0, [r5, #24]
   1521c:	bl	138e0 <__assert_fail@plt+0x2610>
   15220:	mov	r0, r5
   15224:	mov	r5, #0
   15228:	bl	138e0 <__assert_fail@plt+0x2610>
   1522c:	b	151e8 <__assert_fail@plt+0x3f18>
   15230:	bl	11180 <__errno_location@plt>
   15234:	mov	r3, #22
   15238:	str	r3, [r0]
   1523c:	b	151e8 <__assert_fail@plt+0x3f18>
   15240:	sub	r3, r0, #1
   15244:	ldrb	r1, [r4, r3]
   15248:	add	r3, r4, r3
   1524c:	cmp	r1, #47	; 0x2f
   15250:	bne	150e0 <__assert_fail@plt+0x3e10>
   15254:	ldrb	r1, [r3, #-1]!
   15258:	cmp	r1, #47	; 0x2f
   1525c:	bne	150e0 <__assert_fail@plt+0x3e10>
   15260:	sub	r2, r2, #1
   15264:	cmp	r2, #1
   15268:	bne	15254 <__assert_fail@plt+0x3f84>
   1526c:	b	150e0 <__assert_fail@plt+0x3e10>
   15270:	ldr	r3, [sp, #4]
   15274:	str	r4, [sp, #4]
   15278:	str	r9, [r4, #8]
   1527c:	str	r4, [r3, #8]
   15280:	b	15158 <__assert_fail@plt+0x3e88>
   15284:	cmp	r9, #0
   15288:	beq	152dc <__assert_fail@plt+0x400c>
   1528c:	mov	r4, sl
   15290:	b	1505c <__assert_fail@plt+0x3d8c>
   15294:	bl	11180 <__errno_location@plt>
   15298:	mov	r3, #22
   1529c:	mov	r5, #0
   152a0:	str	r3, [r0]
   152a4:	b	151e8 <__assert_fail@plt+0x3f18>
   152a8:	mov	r2, #4096	; 0x1000
   152ac:	b	1500c <__assert_fail@plt+0x3d3c>
   152b0:	movw	r2, #47372	; 0xb90c
   152b4:	movt	r2, #1
   152b8:	ldr	r0, [r5, #32]
   152bc:	bl	14198 <__assert_fail@plt+0x2ec8>
   152c0:	cmp	r0, #0
   152c4:	str	r0, [r5, #28]
   152c8:	bge	151dc <__assert_fail@plt+0x3f0c>
   152cc:	ldr	r3, [r5, #48]	; 0x30
   152d0:	orr	r3, r3, #4
   152d4:	str	r3, [r5, #48]	; 0x30
   152d8:	b	151dc <__assert_fail@plt+0x3f0c>
   152dc:	mov	r7, sl
   152e0:	b	15188 <__assert_fail@plt+0x3eb8>
   152e4:	mov	r7, r4
   152e8:	b	15188 <__assert_fail@plt+0x3eb8>
   152ec:	ldr	r3, [r0]
   152f0:	strd	r4, [sp, #-16]!
   152f4:	mov	r5, r0
   152f8:	str	r6, [sp, #8]
   152fc:	str	lr, [sp, #12]
   15300:	cmp	r3, #0
   15304:	beq	15340 <__assert_fail@plt+0x4070>
   15308:	ldr	r2, [r3, #48]	; 0x30
   1530c:	cmp	r2, #0
   15310:	blt	15460 <__assert_fail@plt+0x4190>
   15314:	ldr	r4, [r3, #8]
   15318:	mov	r0, r3
   1531c:	cmp	r4, #0
   15320:	ldreq	r4, [r3, #4]
   15324:	bl	138e0 <__assert_fail@plt+0x2610>
   15328:	ldr	r2, [r4, #48]	; 0x30
   1532c:	mov	r3, r4
   15330:	cmp	r2, #0
   15334:	bge	15314 <__assert_fail@plt+0x4044>
   15338:	mov	r0, r4
   1533c:	bl	138e0 <__assert_fail@plt+0x2610>
   15340:	ldr	r0, [r5, #4]
   15344:	cmp	r0, #0
   15348:	beq	15350 <__assert_fail@plt+0x4080>
   1534c:	bl	13c7c <__assert_fail@plt+0x29ac>
   15350:	ldr	r0, [r5, #8]
   15354:	bl	138e0 <__assert_fail@plt+0x2610>
   15358:	ldr	r0, [r5, #24]
   1535c:	bl	138e0 <__assert_fail@plt+0x2610>
   15360:	ldr	r3, [r5, #48]	; 0x30
   15364:	tst	r3, #512	; 0x200
   15368:	bne	153d4 <__assert_fail@plt+0x4104>
   1536c:	tst	r3, #4
   15370:	beq	15400 <__assert_fail@plt+0x4130>
   15374:	mov	r4, #0
   15378:	add	r0, r5, #60	; 0x3c
   1537c:	bl	13cc4 <__assert_fail@plt+0x29f4>
   15380:	ldr	r0, [r5, #52]	; 0x34
   15384:	cmp	r0, #0
   15388:	beq	15390 <__assert_fail@plt+0x40c0>
   1538c:	bl	168fc <__assert_fail@plt+0x562c>
   15390:	ldr	r3, [r5, #48]	; 0x30
   15394:	movw	r2, #258	; 0x102
   15398:	ldr	r0, [r5, #56]	; 0x38
   1539c:	tst	r2, r3
   153a0:	beq	153f8 <__assert_fail@plt+0x4128>
   153a4:	cmp	r0, #0
   153a8:	beq	153b0 <__assert_fail@plt+0x40e0>
   153ac:	bl	168fc <__assert_fail@plt+0x562c>
   153b0:	mov	r0, r5
   153b4:	bl	138e0 <__assert_fail@plt+0x2610>
   153b8:	cmp	r4, #0
   153bc:	bne	15468 <__assert_fail@plt+0x4198>
   153c0:	mov	r0, r4
   153c4:	ldrd	r4, [sp]
   153c8:	ldr	r6, [sp, #8]
   153cc:	add	sp, sp, #12
   153d0:	pop	{pc}		; (ldr pc, [sp], #4)
   153d4:	ldr	r0, [r5, #32]
   153d8:	cmp	r0, #0
   153dc:	blt	15374 <__assert_fail@plt+0x40a4>
   153e0:	bl	112a0 <close@plt>
   153e4:	cmp	r0, #0
   153e8:	beq	15374 <__assert_fail@plt+0x40a4>
   153ec:	bl	11180 <__errno_location@plt>
   153f0:	ldr	r4, [r0]
   153f4:	b	15378 <__assert_fail@plt+0x40a8>
   153f8:	bl	138e0 <__assert_fail@plt+0x2610>
   153fc:	b	153b0 <__assert_fail@plt+0x40e0>
   15400:	ldr	r0, [r5, #28]
   15404:	bl	1124c <fchdir@plt>
   15408:	cmp	r0, #0
   1540c:	bne	15430 <__assert_fail@plt+0x4160>
   15410:	ldr	r0, [r5, #28]
   15414:	bl	112a0 <close@plt>
   15418:	cmp	r0, #0
   1541c:	beq	15374 <__assert_fail@plt+0x40a4>
   15420:	bl	11180 <__errno_location@plt>
   15424:	mov	r6, r0
   15428:	ldr	r4, [r6]
   1542c:	b	15378 <__assert_fail@plt+0x40a8>
   15430:	bl	11180 <__errno_location@plt>
   15434:	mov	r6, r0
   15438:	ldr	r0, [r5, #28]
   1543c:	ldr	r4, [r6]
   15440:	bl	112a0 <close@plt>
   15444:	adds	r3, r0, #0
   15448:	movne	r3, #1
   1544c:	cmp	r4, #0
   15450:	movne	r3, #0
   15454:	cmp	r3, #0
   15458:	beq	15378 <__assert_fail@plt+0x40a8>
   1545c:	b	15428 <__assert_fail@plt+0x4158>
   15460:	mov	r4, r3
   15464:	b	15338 <__assert_fail@plt+0x4068>
   15468:	bl	11180 <__errno_location@plt>
   1546c:	str	r4, [r0]
   15470:	mvn	r4, #0
   15474:	b	153c0 <__assert_fail@plt+0x40f0>
   15478:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1547c:	ldr	r4, [r0]
   15480:	strd	r6, [sp, #8]
   15484:	str	r8, [sp, #16]
   15488:	str	lr, [sp, #20]
   1548c:	cmp	r4, #0
   15490:	beq	155b0 <__assert_fail@plt+0x42e0>
   15494:	ldr	r1, [r0, #48]	; 0x30
   15498:	ands	r3, r1, #8192	; 0x2000
   1549c:	bne	155b0 <__assert_fail@plt+0x42e0>
   154a0:	ldrh	r2, [r4, #60]	; 0x3c
   154a4:	mov	r8, r0
   154a8:	mov	r0, #3
   154ac:	strh	r0, [r4, #60]	; 0x3c
   154b0:	cmp	r2, #1
   154b4:	beq	1585c <__assert_fail@plt+0x458c>
   154b8:	cmp	r2, #2
   154bc:	ldrh	r3, [r4, #56]	; 0x38
   154c0:	beq	155cc <__assert_fail@plt+0x42fc>
   154c4:	cmp	r3, #1
   154c8:	bne	154f8 <__assert_fail@plt+0x4228>
   154cc:	b	15678 <__assert_fail@plt+0x43a8>
   154d0:	mov	r0, r4
   154d4:	str	r5, [r8]
   154d8:	bl	138e0 <__assert_fail@plt+0x2610>
   154dc:	ldr	r4, [r5, #48]	; 0x30
   154e0:	cmp	r4, #0
   154e4:	beq	156c0 <__assert_fail@plt+0x43f0>
   154e8:	ldrh	r3, [r5, #60]	; 0x3c
   154ec:	mov	r4, r5
   154f0:	cmp	r3, #4
   154f4:	bne	15778 <__assert_fail@plt+0x44a8>
   154f8:	ldr	r5, [r4, #8]
   154fc:	cmp	r5, #0
   15500:	bne	154d0 <__assert_fail@plt+0x4200>
   15504:	ldr	r6, [r4, #4]
   15508:	ldr	r3, [r6, #12]
   1550c:	cmp	r3, #0
   15510:	bne	15980 <__assert_fail@plt+0x46b0>
   15514:	mov	r0, r4
   15518:	str	r6, [r8]
   1551c:	bl	138e0 <__assert_fail@plt+0x2610>
   15520:	ldr	r3, [r6, #48]	; 0x30
   15524:	cmn	r3, #1
   15528:	beq	15924 <__assert_fail@plt+0x4654>
   1552c:	ldrh	r3, [r6, #56]	; 0x38
   15530:	cmp	r3, #11
   15534:	beq	15858 <__assert_fail@plt+0x4588>
   15538:	ldr	r2, [r8, #24]
   1553c:	mov	r1, #0
   15540:	ldr	r3, [r6, #40]	; 0x28
   15544:	strb	r1, [r2, r3]
   15548:	ldr	r3, [r6, #48]	; 0x30
   1554c:	cmp	r3, r1
   15550:	beq	15944 <__assert_fail@plt+0x4674>
   15554:	ldrh	r3, [r6, #58]	; 0x3a
   15558:	tst	r3, #2
   1555c:	bne	158d8 <__assert_fail@plt+0x4608>
   15560:	tst	r3, #1
   15564:	beq	15a18 <__assert_fail@plt+0x4748>
   15568:	ldrh	r3, [r6, #56]	; 0x38
   1556c:	ldr	r0, [r8, #48]	; 0x30
   15570:	cmp	r3, #2
   15574:	beq	155a4 <__assert_fail@plt+0x42d4>
   15578:	ldr	r3, [r6, #32]
   1557c:	cmp	r3, #0
   15580:	movne	r3, #7
   15584:	strhne	r3, [r6, #56]	; 0x38
   15588:	bne	155a4 <__assert_fail@plt+0x42d4>
   1558c:	mov	r3, #6
   15590:	mov	r2, r6
   15594:	add	r1, r8, #56	; 0x38
   15598:	strh	r3, [r6, #56]	; 0x38
   1559c:	bl	144b8 <__assert_fail@plt+0x31e8>
   155a0:	ldr	r0, [r8, #48]	; 0x30
   155a4:	tst	r0, #8192	; 0x2000
   155a8:	moveq	r4, r6
   155ac:	beq	155b4 <__assert_fail@plt+0x42e4>
   155b0:	mov	r4, #0
   155b4:	mov	r0, r4
   155b8:	ldrd	r4, [sp]
   155bc:	ldrd	r6, [sp, #8]
   155c0:	ldr	r8, [sp, #16]
   155c4:	add	sp, sp, #20
   155c8:	pop	{pc}		; (ldr pc, [sp], #4)
   155cc:	sub	r2, r3, #12
   155d0:	cmp	r2, #1
   155d4:	bls	15814 <__assert_fail@plt+0x4544>
   155d8:	cmp	r3, #1
   155dc:	bne	154f8 <__assert_fail@plt+0x4228>
   155e0:	tst	r1, #64	; 0x40
   155e4:	beq	155fc <__assert_fail@plt+0x432c>
   155e8:	ldrd	r2, [r8, #16]
   155ec:	ldrd	r6, [r4, #64]	; 0x40
   155f0:	cmp	r7, r3
   155f4:	cmpeq	r6, r2
   155f8:	bne	15680 <__assert_fail@plt+0x43b0>
   155fc:	ldr	r0, [r8, #4]
   15600:	cmp	r0, #0
   15604:	beq	15884 <__assert_fail@plt+0x45b4>
   15608:	tst	r1, #4096	; 0x1000
   1560c:	bne	15870 <__assert_fail@plt+0x45a0>
   15610:	mvn	r2, #0
   15614:	mov	r1, r4
   15618:	ldr	r3, [r4, #24]
   1561c:	mov	r0, r8
   15620:	bl	141c8 <__assert_fail@plt+0x2ef8>
   15624:	cmp	r0, #0
   15628:	beq	1590c <__assert_fail@plt+0x463c>
   1562c:	bl	11180 <__errno_location@plt>
   15630:	ldrh	r3, [r4, #58]	; 0x3a
   15634:	ldr	r2, [r0]
   15638:	orr	r3, r3, #1
   1563c:	str	r2, [r4, #32]
   15640:	strh	r3, [r4, #58]	; 0x3a
   15644:	ldr	r4, [r8, #4]
   15648:	cmp	r4, #0
   1564c:	beq	1566c <__assert_fail@plt+0x439c>
   15650:	mov	r3, r4
   15654:	ldr	r2, [r3, #4]
   15658:	ldr	r2, [r2, #24]
   1565c:	str	r2, [r3, #24]
   15660:	ldr	r3, [r3, #8]
   15664:	cmp	r3, #0
   15668:	bne	15654 <__assert_fail@plt+0x4384>
   1566c:	mov	r3, #0
   15670:	str	r3, [r8, #4]
   15674:	b	15780 <__assert_fail@plt+0x44b0>
   15678:	cmp	r2, #4
   1567c:	bne	155e0 <__assert_fail@plt+0x4310>
   15680:	ldrh	r3, [r4, #58]	; 0x3a
   15684:	tst	r3, #2
   15688:	bne	159c0 <__assert_fail@plt+0x46f0>
   1568c:	ldr	r0, [r8, #4]
   15690:	cmp	r0, #0
   15694:	beq	156a4 <__assert_fail@plt+0x43d4>
   15698:	bl	13c7c <__assert_fail@plt+0x29ac>
   1569c:	mov	r3, #0
   156a0:	str	r3, [r8, #4]
   156a4:	mov	r3, #6
   156a8:	mov	r2, r4
   156ac:	ldr	r0, [r8, #48]	; 0x30
   156b0:	add	r1, r8, #56	; 0x38
   156b4:	strh	r3, [r4, #56]	; 0x38
   156b8:	bl	144b8 <__assert_fail@plt+0x31e8>
   156bc:	b	155b4 <__assert_fail@plt+0x42e4>
   156c0:	mov	r0, r8
   156c4:	bl	13eb8 <__assert_fail@plt+0x2be8>
   156c8:	ldr	r3, [r8, #48]	; 0x30
   156cc:	cmp	r0, #0
   156d0:	orrne	r3, r3, #8192	; 0x2000
   156d4:	strne	r3, [r8, #48]	; 0x30
   156d8:	bne	155b4 <__assert_fail@plt+0x42e4>
   156dc:	movw	r2, #258	; 0x102
   156e0:	ldr	r0, [r8, #56]	; 0x38
   156e4:	tst	r2, r3
   156e8:	beq	159b8 <__assert_fail@plt+0x46e8>
   156ec:	cmp	r0, #0
   156f0:	beq	156f8 <__assert_fail@plt+0x4428>
   156f4:	bl	168fc <__assert_fail@plt+0x562c>
   156f8:	ldr	r2, [r5, #52]	; 0x34
   156fc:	add	r4, r5, #168	; 0xa8
   15700:	mov	r1, r4
   15704:	ldr	r0, [r8, #24]
   15708:	str	r2, [r5, #40]	; 0x28
   1570c:	add	r2, r2, #1
   15710:	bl	11000 <memmove@plt>
   15714:	mov	r0, r4
   15718:	mov	r1, #47	; 0x2f
   1571c:	bl	11210 <strrchr@plt>
   15720:	cmp	r0, #0
   15724:	beq	15754 <__assert_fail@plt+0x4484>
   15728:	cmp	r4, r0
   1572c:	beq	15914 <__assert_fail@plt+0x4644>
   15730:	add	r6, r0, #1
   15734:	mov	r0, r6
   15738:	bl	11168 <strlen@plt>
   1573c:	mov	r7, r0
   15740:	mov	r1, r6
   15744:	mov	r0, r4
   15748:	add	r2, r7, #1
   1574c:	bl	11000 <memmove@plt>
   15750:	str	r7, [r5, #52]	; 0x34
   15754:	ldr	r3, [r8, #24]
   15758:	add	r1, r8, #56	; 0x38
   1575c:	mov	r4, r5
   15760:	ldr	r0, [r8, #48]	; 0x30
   15764:	str	r3, [r5, #24]
   15768:	str	r3, [r5, #28]
   1576c:	bl	14108 <__assert_fail@plt+0x2e38>
   15770:	ldrh	r0, [r5, #56]	; 0x38
   15774:	b	157c4 <__assert_fail@plt+0x44f4>
   15778:	cmp	r3, #2
   1577c:	beq	159e8 <__assert_fail@plt+0x4718>
   15780:	ldr	r0, [r4, #4]
   15784:	mov	ip, #47	; 0x2f
   15788:	add	r1, r4, #168	; 0xa8
   1578c:	ldr	r3, [r8, #24]
   15790:	ldr	lr, [r0, #28]
   15794:	ldr	r2, [r0, #40]	; 0x28
   15798:	sub	r0, r2, #1
   1579c:	ldrb	lr, [lr, r0]
   157a0:	cmp	lr, ip
   157a4:	movne	r0, r2
   157a8:	strb	ip, [r3, r0]
   157ac:	add	r0, r3, r0
   157b0:	ldr	r2, [r4, #52]	; 0x34
   157b4:	add	r0, r0, #1
   157b8:	add	r2, r2, #1
   157bc:	bl	11000 <memmove@plt>
   157c0:	ldrh	r0, [r4, #56]	; 0x38
   157c4:	cmp	r0, #11
   157c8:	str	r4, [r8]
   157cc:	beq	1583c <__assert_fail@plt+0x456c>
   157d0:	cmp	r0, #1
   157d4:	bne	155b4 <__assert_fail@plt+0x42e4>
   157d8:	ldr	r3, [r4, #48]	; 0x30
   157dc:	add	r1, r8, #56	; 0x38
   157e0:	ldr	r0, [r8, #48]	; 0x30
   157e4:	cmp	r3, #0
   157e8:	ldrdeq	r2, [r4, #64]	; 0x40
   157ec:	strdeq	r2, [r8, #16]
   157f0:	mov	r2, r4
   157f4:	bl	143e4 <__assert_fail@plt+0x3114>
   157f8:	subs	r5, r0, #0
   157fc:	bne	155b4 <__assert_fail@plt+0x42e4>
   15800:	bl	11180 <__errno_location@plt>
   15804:	mov	r3, #12
   15808:	mov	r4, r5
   1580c:	str	r3, [r0]
   15810:	b	155b4 <__assert_fail@plt+0x42e4>
   15814:	mov	r3, #1
   15818:	mov	r2, r4
   1581c:	ldr	r0, [r8, #32]
   15820:	bl	13f1c <__assert_fail@plt+0x2c4c>
   15824:	cmp	r0, #1
   15828:	strh	r0, [r4, #56]	; 0x38
   1582c:	beq	15a60 <__assert_fail@plt+0x4790>
   15830:	cmp	r0, #11
   15834:	str	r4, [r8]
   15838:	bne	155b4 <__assert_fail@plt+0x42e4>
   1583c:	ldrd	r2, [r4, #112]	; 0x70
   15840:	cmp	r3, #0
   15844:	cmpeq	r2, #2
   15848:	beq	159cc <__assert_fail@plt+0x46fc>
   1584c:	cmp	r3, #0
   15850:	cmpeq	r2, #1
   15854:	beq	155b4 <__assert_fail@plt+0x42e4>
   15858:	bl	11294 <abort@plt>
   1585c:	mov	r2, r4
   15860:	ldr	r0, [r8, #32]
   15864:	bl	13f1c <__assert_fail@plt+0x2c4c>
   15868:	strh	r0, [r4, #56]	; 0x38
   1586c:	b	155b4 <__assert_fail@plt+0x42e4>
   15870:	bic	r1, r1, #4096	; 0x1000
   15874:	str	r1, [r8, #48]	; 0x30
   15878:	bl	13c7c <__assert_fail@plt+0x29ac>
   1587c:	mov	r3, #0
   15880:	str	r3, [r8, #4]
   15884:	mov	r1, #3
   15888:	mov	r0, r8
   1588c:	bl	14584 <__assert_fail@plt+0x32b4>
   15890:	cmp	r0, #0
   15894:	str	r0, [r8, #4]
   15898:	movne	r4, r0
   1589c:	bne	1566c <__assert_fail@plt+0x439c>
   158a0:	ldr	r0, [r8, #48]	; 0x30
   158a4:	tst	r0, #8192	; 0x2000
   158a8:	bne	155b0 <__assert_fail@plt+0x42e0>
   158ac:	ldr	r3, [r4, #32]
   158b0:	cmp	r3, #0
   158b4:	beq	158c8 <__assert_fail@plt+0x45f8>
   158b8:	ldrh	r3, [r4, #56]	; 0x38
   158bc:	cmp	r3, #4
   158c0:	movne	r3, #7
   158c4:	strhne	r3, [r4, #56]	; 0x38
   158c8:	add	r1, r8, #56	; 0x38
   158cc:	mov	r2, r4
   158d0:	bl	144b8 <__assert_fail@plt+0x31e8>
   158d4:	b	155b4 <__assert_fail@plt+0x42e4>
   158d8:	ldr	r3, [r8, #48]	; 0x30
   158dc:	ldr	r0, [r6, #36]	; 0x24
   158e0:	tst	r3, #4
   158e4:	bne	15904 <__assert_fail@plt+0x4634>
   158e8:	tst	r3, #512	; 0x200
   158ec:	beq	15a4c <__assert_fail@plt+0x477c>
   158f0:	mov	r1, r0
   158f4:	mov	r2, #1
   158f8:	mov	r0, r8
   158fc:	bl	13e28 <__assert_fail@plt+0x2b58>
   15900:	ldr	r0, [r6, #36]	; 0x24
   15904:	bl	112a0 <close@plt>
   15908:	b	15568 <__assert_fail@plt+0x4298>
   1590c:	ldr	r4, [r8, #4]
   15910:	b	1566c <__assert_fail@plt+0x439c>
   15914:	ldrb	r3, [r4, #1]
   15918:	cmp	r3, #0
   1591c:	beq	15754 <__assert_fail@plt+0x4484>
   15920:	b	15730 <__assert_fail@plt+0x4460>
   15924:	mov	r0, r6
   15928:	bl	138e0 <__assert_fail@plt+0x2610>
   1592c:	bl	11180 <__errno_location@plt>
   15930:	mov	r3, #0
   15934:	mov	r4, r3
   15938:	str	r3, [r0]
   1593c:	str	r3, [r8]
   15940:	b	155b4 <__assert_fail@plt+0x42e4>
   15944:	mov	r0, r8
   15948:	bl	13eb8 <__assert_fail@plt+0x2be8>
   1594c:	cmp	r0, #0
   15950:	beq	15568 <__assert_fail@plt+0x4298>
   15954:	bl	11180 <__errno_location@plt>
   15958:	ldr	r3, [r8, #48]	; 0x30
   1595c:	ldr	r2, [r0]
   15960:	orr	r3, r3, #8192	; 0x2000
   15964:	str	r2, [r6, #32]
   15968:	str	r3, [r8, #48]	; 0x30
   1596c:	ldrh	r3, [r6, #56]	; 0x38
   15970:	cmp	r3, #2
   15974:	beq	155b0 <__assert_fail@plt+0x42e0>
   15978:	ldr	r0, [r8, #48]	; 0x30
   1597c:	b	15578 <__assert_fail@plt+0x42a8>
   15980:	ldr	r2, [r8, #24]
   15984:	mov	r1, #3
   15988:	mov	r0, r8
   1598c:	ldr	r3, [r6, #40]	; 0x28
   15990:	str	r6, [r8]
   15994:	strb	r5, [r2, r3]
   15998:	bl	14584 <__assert_fail@plt+0x32b4>
   1599c:	subs	r3, r0, #0
   159a0:	bne	15a3c <__assert_fail@plt+0x476c>
   159a4:	ldr	r3, [r8, #48]	; 0x30
   159a8:	tst	r3, #8192	; 0x2000
   159ac:	bne	155b0 <__assert_fail@plt+0x42e0>
   159b0:	ldr	r6, [r4, #4]
   159b4:	b	15514 <__assert_fail@plt+0x4244>
   159b8:	bl	138e0 <__assert_fail@plt+0x2610>
   159bc:	b	156f8 <__assert_fail@plt+0x4428>
   159c0:	ldr	r0, [r4, #36]	; 0x24
   159c4:	bl	112a0 <close@plt>
   159c8:	b	1568c <__assert_fail@plt+0x43bc>
   159cc:	mov	r3, #0
   159d0:	mov	r2, r4
   159d4:	ldr	r0, [r8, #32]
   159d8:	ldr	r1, [r8, #48]	; 0x30
   159dc:	bl	13f1c <__assert_fail@plt+0x2c4c>
   159e0:	strh	r0, [r4, #56]	; 0x38
   159e4:	b	157d0 <__assert_fail@plt+0x4500>
   159e8:	mov	r3, #1
   159ec:	mov	r2, r5
   159f0:	ldr	r0, [r8, #32]
   159f4:	ldr	r1, [r8, #48]	; 0x30
   159f8:	bl	13f1c <__assert_fail@plt+0x2c4c>
   159fc:	cmp	r0, #1
   15a00:	strh	r0, [r5, #56]	; 0x38
   15a04:	beq	15aa0 <__assert_fail@plt+0x47d0>
   15a08:	mov	r3, #3
   15a0c:	mov	r4, r5
   15a10:	strh	r3, [r5, #60]	; 0x3c
   15a14:	b	15780 <__assert_fail@plt+0x44b0>
   15a18:	movw	r3, #46796	; 0xb6cc
   15a1c:	movt	r3, #1
   15a20:	ldr	r1, [r6, #4]
   15a24:	mvn	r2, #0
   15a28:	mov	r0, r8
   15a2c:	bl	141c8 <__assert_fail@plt+0x2ef8>
   15a30:	cmp	r0, #0
   15a34:	beq	15568 <__assert_fail@plt+0x4298>
   15a38:	b	15954 <__assert_fail@plt+0x4684>
   15a3c:	mov	r0, r4
   15a40:	mov	r4, r3
   15a44:	bl	138e0 <__assert_fail@plt+0x2610>
   15a48:	b	15780 <__assert_fail@plt+0x44b0>
   15a4c:	bl	1124c <fchdir@plt>
   15a50:	cmp	r0, #0
   15a54:	bne	15ad8 <__assert_fail@plt+0x4808>
   15a58:	ldr	r0, [r6, #36]	; 0x24
   15a5c:	b	15904 <__assert_fail@plt+0x4634>
   15a60:	ldr	r1, [r8, #48]	; 0x30
   15a64:	tst	r1, #4
   15a68:	strne	r4, [r8]
   15a6c:	bne	157d8 <__assert_fail@plt+0x4508>
   15a70:	movw	r2, #47372	; 0xb90c
   15a74:	movt	r2, #1
   15a78:	ldr	r0, [r8, #32]
   15a7c:	bl	14198 <__assert_fail@plt+0x2ec8>
   15a80:	cmp	r0, #0
   15a84:	str	r0, [r4, #36]	; 0x24
   15a88:	blt	15af8 <__assert_fail@plt+0x4828>
   15a8c:	ldrh	r3, [r4, #58]	; 0x3a
   15a90:	ldrh	r0, [r4, #56]	; 0x38
   15a94:	orr	r3, r3, #2
   15a98:	strh	r3, [r4, #58]	; 0x3a
   15a9c:	b	157c4 <__assert_fail@plt+0x44f4>
   15aa0:	ldr	r1, [r8, #48]	; 0x30
   15aa4:	tst	r1, #4
   15aa8:	bne	15a08 <__assert_fail@plt+0x4738>
   15aac:	movw	r2, #47372	; 0xb90c
   15ab0:	movt	r2, #1
   15ab4:	ldr	r0, [r8, #32]
   15ab8:	bl	14198 <__assert_fail@plt+0x2ec8>
   15abc:	cmp	r0, #0
   15ac0:	str	r0, [r5, #36]	; 0x24
   15ac4:	blt	15b14 <__assert_fail@plt+0x4844>
   15ac8:	ldrh	r3, [r5, #58]	; 0x3a
   15acc:	orr	r3, r3, #2
   15ad0:	strh	r3, [r5, #58]	; 0x3a
   15ad4:	b	15a08 <__assert_fail@plt+0x4738>
   15ad8:	bl	11180 <__errno_location@plt>
   15adc:	ldr	r3, [r8, #48]	; 0x30
   15ae0:	ldr	r2, [r0]
   15ae4:	ldr	r0, [r6, #36]	; 0x24
   15ae8:	orr	r3, r3, #8192	; 0x2000
   15aec:	str	r2, [r6, #32]
   15af0:	str	r3, [r8, #48]	; 0x30
   15af4:	b	15904 <__assert_fail@plt+0x4634>
   15af8:	bl	11180 <__errno_location@plt>
   15afc:	ldr	r3, [r0]
   15b00:	mov	r2, #7
   15b04:	str	r3, [r4, #32]
   15b08:	strh	r2, [r4, #56]	; 0x38
   15b0c:	str	r4, [r8]
   15b10:	b	155b4 <__assert_fail@plt+0x42e4>
   15b14:	bl	11180 <__errno_location@plt>
   15b18:	ldr	r3, [r0]
   15b1c:	mov	r2, #7
   15b20:	str	r3, [r5, #32]
   15b24:	strh	r2, [r5, #56]	; 0x38
   15b28:	b	15a08 <__assert_fail@plt+0x4738>
   15b2c:	cmp	r2, #4
   15b30:	bhi	15b44 <__assert_fail@plt+0x4874>
   15b34:	mov	r3, #0
   15b38:	strh	r2, [r1, #60]	; 0x3c
   15b3c:	mov	r0, r3
   15b40:	bx	lr
   15b44:	str	r4, [sp, #-8]!
   15b48:	str	lr, [sp, #4]
   15b4c:	bl	11180 <__errno_location@plt>
   15b50:	mov	r2, #22
   15b54:	mov	r3, #1
   15b58:	ldr	r4, [sp]
   15b5c:	add	sp, sp, #4
   15b60:	str	r2, [r0]
   15b64:	mov	r0, r3
   15b68:	pop	{pc}		; (ldr pc, [sp], #4)
   15b6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b70:	mov	r4, r1
   15b74:	mov	r5, r0
   15b78:	strd	r6, [sp, #8]
   15b7c:	str	r8, [sp, #16]
   15b80:	str	lr, [sp, #20]
   15b84:	bl	11180 <__errno_location@plt>
   15b88:	bics	r2, r4, #4096	; 0x1000
   15b8c:	mov	r7, r0
   15b90:	movne	r3, #22
   15b94:	movne	r0, #0
   15b98:	strne	r3, [r7]
   15b9c:	bne	15c30 <__assert_fail@plt+0x4960>
   15ba0:	ldr	r6, [r5]
   15ba4:	str	r2, [r7]
   15ba8:	ldr	r3, [r5, #48]	; 0x30
   15bac:	ands	r0, r3, #8192	; 0x2000
   15bb0:	movne	r0, r2
   15bb4:	bne	15c30 <__assert_fail@plt+0x4960>
   15bb8:	ldrh	r3, [r6, #56]	; 0x38
   15bbc:	cmp	r3, #9
   15bc0:	beq	15ca0 <__assert_fail@plt+0x49d0>
   15bc4:	cmp	r3, #1
   15bc8:	bne	15c30 <__assert_fail@plt+0x4960>
   15bcc:	ldr	r0, [r5, #4]
   15bd0:	cmp	r0, #0
   15bd4:	beq	15bdc <__assert_fail@plt+0x490c>
   15bd8:	bl	13c7c <__assert_fail@plt+0x29ac>
   15bdc:	cmp	r4, #4096	; 0x1000
   15be0:	movne	r4, #1
   15be4:	bne	15bf8 <__assert_fail@plt+0x4928>
   15be8:	ldr	r3, [r5, #48]	; 0x30
   15bec:	mov	r4, #2
   15bf0:	orr	r3, r3, #4096	; 0x1000
   15bf4:	str	r3, [r5, #48]	; 0x30
   15bf8:	ldr	r3, [r6, #48]	; 0x30
   15bfc:	cmp	r3, #0
   15c00:	bne	15c20 <__assert_fail@plt+0x4950>
   15c04:	ldr	r3, [r6, #24]
   15c08:	ldrb	r3, [r3]
   15c0c:	cmp	r3, #47	; 0x2f
   15c10:	beq	15c20 <__assert_fail@plt+0x4950>
   15c14:	ldr	r1, [r5, #48]	; 0x30
   15c18:	ands	r6, r1, #4
   15c1c:	beq	15c44 <__assert_fail@plt+0x4974>
   15c20:	mov	r1, r4
   15c24:	mov	r0, r5
   15c28:	bl	14584 <__assert_fail@plt+0x32b4>
   15c2c:	str	r0, [r5, #4]
   15c30:	ldrd	r4, [sp]
   15c34:	ldrd	r6, [sp, #8]
   15c38:	ldr	r8, [sp, #16]
   15c3c:	add	sp, sp, #20
   15c40:	pop	{pc}		; (ldr pc, [sp], #4)
   15c44:	movw	r2, #47372	; 0xb90c
   15c48:	movt	r2, #1
   15c4c:	ldr	r0, [r5, #32]
   15c50:	bl	14198 <__assert_fail@plt+0x2ec8>
   15c54:	subs	r8, r0, #0
   15c58:	movlt	r0, r6
   15c5c:	strlt	r6, [r5, #4]
   15c60:	blt	15c30 <__assert_fail@plt+0x4960>
   15c64:	mov	r1, r4
   15c68:	mov	r0, r5
   15c6c:	bl	14584 <__assert_fail@plt+0x32b4>
   15c70:	ldr	r3, [r5, #48]	; 0x30
   15c74:	str	r0, [r5, #4]
   15c78:	ands	r4, r3, #512	; 0x200
   15c7c:	bne	15ca8 <__assert_fail@plt+0x49d8>
   15c80:	mov	r0, r8
   15c84:	bl	1124c <fchdir@plt>
   15c88:	cmp	r0, #0
   15c8c:	bne	15cbc <__assert_fail@plt+0x49ec>
   15c90:	mov	r0, r8
   15c94:	bl	112a0 <close@plt>
   15c98:	ldr	r0, [r5, #4]
   15c9c:	b	15c30 <__assert_fail@plt+0x4960>
   15ca0:	ldr	r0, [r6, #8]
   15ca4:	b	15c30 <__assert_fail@plt+0x4960>
   15ca8:	mov	r1, r8
   15cac:	mov	r2, #1
   15cb0:	mov	r0, r5
   15cb4:	bl	13e28 <__assert_fail@plt+0x2b58>
   15cb8:	b	15c98 <__assert_fail@plt+0x49c8>
   15cbc:	ldr	r5, [r7]
   15cc0:	mov	r0, r8
   15cc4:	bl	112a0 <close@plt>
   15cc8:	mov	r0, r4
   15ccc:	str	r5, [r7]
   15cd0:	b	15c30 <__assert_fail@plt+0x4960>
   15cd4:	andeq	r0, r0, r0
   15cd8:	cmp	r0, #10
   15cdc:	movcc	r0, #10
   15ce0:	orr	r0, r0, #1
   15ce4:	cmn	r0, #1
   15ce8:	bxeq	lr
   15cec:	push	{lr}		; (str lr, [sp, #-4]!)
   15cf0:	movw	lr, #43691	; 0xaaab
   15cf4:	movt	lr, #43690	; 0xaaaa
   15cf8:	umull	r2, r3, lr, r0
   15cfc:	cmp	r0, #9
   15d00:	lsr	r3, r3, #1
   15d04:	add	r3, r3, r3, lsl #1
   15d08:	sub	r3, r0, r3
   15d0c:	bls	15d4c <__assert_fail@plt+0x4a7c>
   15d10:	cmp	r3, #0
   15d14:	beq	15d54 <__assert_fail@plt+0x4a84>
   15d18:	mov	ip, #16
   15d1c:	mov	r1, #9
   15d20:	mov	r2, #3
   15d24:	b	15d30 <__assert_fail@plt+0x4a60>
   15d28:	cmp	r3, #0
   15d2c:	beq	15d54 <__assert_fail@plt+0x4a84>
   15d30:	add	r2, r2, #2
   15d34:	add	r1, r1, ip
   15d38:	cmp	r1, r0
   15d3c:	add	ip, ip, #8
   15d40:	udiv	r3, r0, r2
   15d44:	mls	r3, r2, r3, r0
   15d48:	bcc	15d28 <__assert_fail@plt+0x4a58>
   15d4c:	cmp	r3, #0
   15d50:	bne	15d60 <__assert_fail@plt+0x4a90>
   15d54:	add	r0, r0, #2
   15d58:	cmn	r0, #1
   15d5c:	bne	15cf8 <__assert_fail@plt+0x4a28>
   15d60:	pop	{pc}		; (ldr pc, [sp], #4)
   15d64:	ror	r0, r0, #3
   15d68:	udiv	r3, r0, r1
   15d6c:	mls	r0, r3, r1, r0
   15d70:	bx	lr
   15d74:	sub	r0, r1, r0
   15d78:	clz	r0, r0
   15d7c:	lsr	r0, r0, #5
   15d80:	bx	lr
   15d84:	str	r4, [sp, #-8]!
   15d88:	mov	r4, r0
   15d8c:	mov	r0, r1
   15d90:	ldr	r1, [r4, #8]
   15d94:	ldr	r3, [r4, #24]
   15d98:	str	lr, [sp, #4]
   15d9c:	blx	r3
   15da0:	ldr	r3, [r4, #8]
   15da4:	cmp	r3, r0
   15da8:	bls	15dc0 <__assert_fail@plt+0x4af0>
   15dac:	ldr	r3, [r4]
   15db0:	ldr	r4, [sp]
   15db4:	add	sp, sp, #4
   15db8:	add	r0, r3, r0, lsl #3
   15dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc0:	bl	11294 <abort@plt>
   15dc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15dc8:	mov	r5, r1
   15dcc:	strd	r6, [sp, #8]
   15dd0:	mov	r7, r3
   15dd4:	mov	r6, r0
   15dd8:	str	r8, [sp, #16]
   15ddc:	mov	r8, r2
   15de0:	str	lr, [sp, #20]
   15de4:	bl	15d84 <__assert_fail@plt+0x4ab4>
   15de8:	str	r0, [r8]
   15dec:	ldr	r1, [r0]
   15df0:	cmp	r1, #0
   15df4:	beq	15ee4 <__assert_fail@plt+0x4c14>
   15df8:	cmp	r1, r5
   15dfc:	mov	r4, r0
   15e00:	beq	15eac <__assert_fail@plt+0x4bdc>
   15e04:	mov	r0, r5
   15e08:	ldr	r3, [r6, #28]
   15e0c:	blx	r3
   15e10:	cmp	r0, #0
   15e14:	bne	15ea8 <__assert_fail@plt+0x4bd8>
   15e18:	ldr	r3, [r4, #4]
   15e1c:	cmp	r3, #0
   15e20:	beq	15ee4 <__assert_fail@plt+0x4c14>
   15e24:	ldr	r1, [r3]
   15e28:	cmp	r5, r1
   15e2c:	bne	15e50 <__assert_fail@plt+0x4b80>
   15e30:	b	15e6c <__assert_fail@plt+0x4b9c>
   15e34:	ldr	r4, [r4, #4]
   15e38:	ldr	r3, [r4, #4]
   15e3c:	cmp	r3, #0
   15e40:	beq	15ee4 <__assert_fail@plt+0x4c14>
   15e44:	ldr	r1, [r3]
   15e48:	cmp	r1, r5
   15e4c:	beq	15e6c <__assert_fail@plt+0x4b9c>
   15e50:	mov	r0, r5
   15e54:	ldr	r3, [r6, #28]
   15e58:	blx	r3
   15e5c:	cmp	r0, #0
   15e60:	beq	15e34 <__assert_fail@plt+0x4b64>
   15e64:	ldr	r3, [r4, #4]
   15e68:	ldr	r1, [r3]
   15e6c:	cmp	r7, #0
   15e70:	beq	15e90 <__assert_fail@plt+0x4bc0>
   15e74:	ldr	r0, [r3, #4]
   15e78:	mov	r2, #0
   15e7c:	str	r0, [r4, #4]
   15e80:	str	r2, [r3]
   15e84:	ldr	r2, [r6, #36]	; 0x24
   15e88:	str	r2, [r3, #4]
   15e8c:	str	r3, [r6, #36]	; 0x24
   15e90:	ldrd	r4, [sp]
   15e94:	mov	r0, r1
   15e98:	ldrd	r6, [sp, #8]
   15e9c:	ldr	r8, [sp, #16]
   15ea0:	add	sp, sp, #20
   15ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea8:	ldr	r1, [r4]
   15eac:	cmp	r7, #0
   15eb0:	beq	15e90 <__assert_fail@plt+0x4bc0>
   15eb4:	ldr	r0, [r4, #4]
   15eb8:	cmp	r0, #0
   15ebc:	streq	r0, [r4]
   15ec0:	beq	15e90 <__assert_fail@plt+0x4bc0>
   15ec4:	ldrd	r2, [r0]
   15ec8:	mov	ip, #0
   15ecc:	strd	r2, [r4]
   15ed0:	str	ip, [r0]
   15ed4:	ldr	r3, [r6, #36]	; 0x24
   15ed8:	str	r3, [r0, #4]
   15edc:	str	r0, [r6, #36]	; 0x24
   15ee0:	b	15e90 <__assert_fail@plt+0x4bc0>
   15ee4:	mov	r1, #0
   15ee8:	b	15e90 <__assert_fail@plt+0x4bc0>
   15eec:	ldr	r2, [r0]
   15ef0:	movw	r3, #47716	; 0xba64
   15ef4:	movt	r3, #1
   15ef8:	mov	r1, r0
   15efc:	cmp	r2, r3
   15f00:	beq	15f88 <__assert_fail@plt+0x4cb8>
   15f04:	vldr	s14, [pc, #132]	; 15f90 <__assert_fail@plt+0x4cc0>
   15f08:	vldr	s15, [r2, #8]
   15f0c:	vcmpe.f32	s15, s14
   15f10:	vmrs	APSR_nzcv, fpscr
   15f14:	ble	15f7c <__assert_fail@plt+0x4cac>
   15f18:	vldr	s13, [pc, #116]	; 15f94 <__assert_fail@plt+0x4cc4>
   15f1c:	vcmpe.f32	s15, s13
   15f20:	vmrs	APSR_nzcv, fpscr
   15f24:	bpl	15f7c <__assert_fail@plt+0x4cac>
   15f28:	vldr	s13, [pc, #104]	; 15f98 <__assert_fail@plt+0x4cc8>
   15f2c:	vldr	s12, [r2, #12]
   15f30:	vcmpe.f32	s12, s13
   15f34:	vmrs	APSR_nzcv, fpscr
   15f38:	ble	15f7c <__assert_fail@plt+0x4cac>
   15f3c:	vldr	s13, [r2]
   15f40:	vcmpe.f32	s13, #0.0
   15f44:	vmrs	APSR_nzcv, fpscr
   15f48:	blt	15f7c <__assert_fail@plt+0x4cac>
   15f4c:	vadd.f32	s14, s13, s14
   15f50:	vldr	s13, [r2, #4]
   15f54:	vcmpe.f32	s14, s13
   15f58:	vmrs	APSR_nzcv, fpscr
   15f5c:	bpl	15f7c <__assert_fail@plt+0x4cac>
   15f60:	vldr	s12, [pc, #52]	; 15f9c <__assert_fail@plt+0x4ccc>
   15f64:	vcmpe.f32	s13, s12
   15f68:	vmrs	APSR_nzcv, fpscr
   15f6c:	bhi	15f7c <__assert_fail@plt+0x4cac>
   15f70:	vcmpe.f32	s15, s14
   15f74:	vmrs	APSR_nzcv, fpscr
   15f78:	bgt	15f88 <__assert_fail@plt+0x4cb8>
   15f7c:	mov	r0, #0
   15f80:	str	r3, [r1]
   15f84:	bx	lr
   15f88:	mov	r0, #1
   15f8c:	bx	lr
   15f90:	stclcc	12, cr12, [ip, #820]	; 0x334
   15f94:	svccc	0x00666666
   15f98:	svccc	0x008ccccd
   15f9c:	svccc	0x00800000
   15fa0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15fa4:	ldr	r3, [r1, #4]
   15fa8:	strd	r6, [sp, #8]
   15fac:	ldr	r6, [r1]
   15fb0:	strd	r8, [sp, #16]
   15fb4:	str	sl, [sp, #24]
   15fb8:	str	lr, [sp, #28]
   15fbc:	cmp	r6, r3
   15fc0:	bcs	16088 <__assert_fail@plt+0x4db8>
   15fc4:	mov	r8, r2
   15fc8:	mov	r5, r0
   15fcc:	mov	r7, r1
   15fd0:	add	r6, r6, #8
   15fd4:	mov	r9, #0
   15fd8:	b	15fe8 <__assert_fail@plt+0x4d18>
   15fdc:	cmp	r3, r6
   15fe0:	add	r6, r6, #8
   15fe4:	bls	16088 <__assert_fail@plt+0x4db8>
   15fe8:	ldr	sl, [r6, #-8]
   15fec:	cmp	sl, #0
   15ff0:	beq	15fdc <__assert_fail@plt+0x4d0c>
   15ff4:	ldr	r4, [r6, #-4]
   15ff8:	cmp	r4, #0
   15ffc:	bne	1601c <__assert_fail@plt+0x4d4c>
   16000:	b	1606c <__assert_fail@plt+0x4d9c>
   16004:	ldr	r2, [r0, #4]
   16008:	cmp	r3, #0
   1600c:	str	r2, [r4, #4]
   16010:	str	r4, [r0, #4]
   16014:	mov	r4, r3
   16018:	beq	16068 <__assert_fail@plt+0x4d98>
   1601c:	ldr	sl, [r4]
   16020:	mov	r0, r5
   16024:	mov	r1, sl
   16028:	bl	15d84 <__assert_fail@plt+0x4ab4>
   1602c:	ldr	r2, [r0]
   16030:	ldr	r3, [r4, #4]
   16034:	cmp	r2, #0
   16038:	bne	16004 <__assert_fail@plt+0x4d34>
   1603c:	ldr	r1, [r5, #12]
   16040:	cmp	r3, #0
   16044:	str	sl, [r0]
   16048:	add	r1, r1, #1
   1604c:	str	r1, [r5, #12]
   16050:	str	r2, [r4]
   16054:	ldr	r2, [r5, #36]	; 0x24
   16058:	str	r2, [r4, #4]
   1605c:	str	r4, [r5, #36]	; 0x24
   16060:	mov	r4, r3
   16064:	bne	1601c <__assert_fail@plt+0x4d4c>
   16068:	ldr	sl, [r6, #-8]
   1606c:	cmp	r8, #0
   16070:	str	r9, [r6, #-4]
   16074:	beq	160a4 <__assert_fail@plt+0x4dd4>
   16078:	ldr	r3, [r7, #4]
   1607c:	cmp	r3, r6
   16080:	add	r6, r6, #8
   16084:	bhi	15fe8 <__assert_fail@plt+0x4d18>
   16088:	mov	r0, #1
   1608c:	ldrd	r4, [sp]
   16090:	ldrd	r6, [sp, #8]
   16094:	ldrd	r8, [sp, #16]
   16098:	ldr	sl, [sp, #24]
   1609c:	add	sp, sp, #28
   160a0:	pop	{pc}		; (ldr pc, [sp], #4)
   160a4:	mov	r1, sl
   160a8:	mov	r0, r5
   160ac:	bl	15d84 <__assert_fail@plt+0x4ab4>
   160b0:	ldr	r3, [r0]
   160b4:	mov	r4, r0
   160b8:	cmp	r3, #0
   160bc:	beq	160fc <__assert_fail@plt+0x4e2c>
   160c0:	ldr	r0, [r5, #36]	; 0x24
   160c4:	cmp	r0, #0
   160c8:	beq	16110 <__assert_fail@plt+0x4e40>
   160cc:	ldr	r3, [r0, #4]
   160d0:	str	r3, [r5, #36]	; 0x24
   160d4:	ldr	r3, [r4, #4]
   160d8:	str	sl, [r0]
   160dc:	str	r3, [r0, #4]
   160e0:	str	r0, [r4, #4]
   160e4:	ldr	r2, [r7, #12]
   160e8:	str	r9, [r6, #-8]
   160ec:	ldr	r3, [r7, #4]
   160f0:	sub	r2, r2, #1
   160f4:	str	r2, [r7, #12]
   160f8:	b	15fdc <__assert_fail@plt+0x4d0c>
   160fc:	ldr	r3, [r5, #12]
   16100:	str	sl, [r0]
   16104:	add	r3, r3, #1
   16108:	str	r3, [r5, #12]
   1610c:	b	160e4 <__assert_fail@plt+0x4e14>
   16110:	mov	r0, #8
   16114:	bl	19fd0 <__assert_fail@plt+0x8d00>
   16118:	cmp	r0, #0
   1611c:	bne	160d4 <__assert_fail@plt+0x4e04>
   16120:	mov	r0, r8
   16124:	b	1608c <__assert_fail@plt+0x4dbc>
   16128:	ldr	r0, [r0, #8]
   1612c:	bx	lr
   16130:	ldr	r0, [r0, #12]
   16134:	bx	lr
   16138:	ldr	r0, [r0, #16]
   1613c:	bx	lr
   16140:	ldm	r0, {r1, r3}
   16144:	cmp	r1, r3
   16148:	bcs	161bc <__assert_fail@plt+0x4eec>
   1614c:	sub	ip, r3, #1
   16150:	add	r3, r1, #16
   16154:	sub	ip, ip, r1
   16158:	mov	r0, #0
   1615c:	bic	ip, ip, #7
   16160:	add	r1, r1, #8
   16164:	add	ip, ip, r3
   16168:	b	16178 <__assert_fail@plt+0x4ea8>
   1616c:	add	r1, r1, #8
   16170:	cmp	r1, ip
   16174:	beq	161b8 <__assert_fail@plt+0x4ee8>
   16178:	ldr	r3, [r1, #-8]
   1617c:	cmp	r3, #0
   16180:	beq	1616c <__assert_fail@plt+0x4e9c>
   16184:	ldr	r3, [r1, #-4]
   16188:	mov	r2, #1
   1618c:	cmp	r3, #0
   16190:	beq	161a4 <__assert_fail@plt+0x4ed4>
   16194:	ldr	r3, [r3, #4]
   16198:	add	r2, r2, #1
   1619c:	cmp	r3, #0
   161a0:	bne	16194 <__assert_fail@plt+0x4ec4>
   161a4:	cmp	r0, r2
   161a8:	add	r1, r1, #8
   161ac:	movcc	r0, r2
   161b0:	cmp	r1, ip
   161b4:	bne	16178 <__assert_fail@plt+0x4ea8>
   161b8:	bx	lr
   161bc:	mov	r0, #0
   161c0:	bx	lr
   161c4:	ldm	r0, {r1, r3}
   161c8:	push	{lr}		; (str lr, [sp, #-4]!)
   161cc:	cmp	r1, r3
   161d0:	bcs	16264 <__assert_fail@plt+0x4f94>
   161d4:	sub	ip, r3, #1
   161d8:	mov	r2, #0
   161dc:	sub	ip, ip, r1
   161e0:	add	r3, r1, #16
   161e4:	bic	ip, ip, #7
   161e8:	add	r1, r1, #8
   161ec:	add	ip, ip, r3
   161f0:	mov	lr, r2
   161f4:	b	16204 <__assert_fail@plt+0x4f34>
   161f8:	add	r1, r1, #8
   161fc:	cmp	r1, ip
   16200:	beq	16240 <__assert_fail@plt+0x4f70>
   16204:	ldr	r3, [r1, #-8]
   16208:	cmp	r3, #0
   1620c:	beq	161f8 <__assert_fail@plt+0x4f28>
   16210:	ldr	r3, [r1, #-4]
   16214:	add	lr, lr, #1
   16218:	add	r2, r2, #1
   1621c:	cmp	r3, #0
   16220:	beq	161f8 <__assert_fail@plt+0x4f28>
   16224:	ldr	r3, [r3, #4]
   16228:	add	r2, r2, #1
   1622c:	cmp	r3, #0
   16230:	bne	16224 <__assert_fail@plt+0x4f54>
   16234:	add	r1, r1, #8
   16238:	cmp	r1, ip
   1623c:	bne	16204 <__assert_fail@plt+0x4f34>
   16240:	ldr	r3, [r0, #12]
   16244:	cmp	r3, lr
   16248:	movne	r0, #0
   1624c:	bne	16260 <__assert_fail@plt+0x4f90>
   16250:	ldr	r0, [r0, #16]
   16254:	sub	r0, r0, r2
   16258:	clz	r0, r0
   1625c:	lsr	r0, r0, #5
   16260:	pop	{pc}		; (ldr pc, [sp], #4)
   16264:	mov	r2, #0
   16268:	mov	lr, r2
   1626c:	b	16240 <__assert_fail@plt+0x4f70>
   16270:	strd	r4, [sp, #-20]!	; 0xffffffec
   16274:	mov	r4, r1
   16278:	ldr	r2, [r0]
   1627c:	ldr	r1, [r0, #4]
   16280:	ldr	r3, [r0, #16]
   16284:	strd	r6, [sp, #8]
   16288:	str	lr, [sp, #16]
   1628c:	sub	sp, sp, #12
   16290:	cmp	r2, r1
   16294:	ldrd	r6, [r0, #8]
   16298:	bcs	16398 <__assert_fail@plt+0x50c8>
   1629c:	sub	ip, r1, #1
   162a0:	add	r1, r2, #16
   162a4:	sub	ip, ip, r2
   162a8:	add	r0, r2, #8
   162ac:	bic	ip, ip, #7
   162b0:	mov	r5, #0
   162b4:	add	ip, ip, r1
   162b8:	b	162c8 <__assert_fail@plt+0x4ff8>
   162bc:	add	r0, r0, #8
   162c0:	cmp	r0, ip
   162c4:	beq	16308 <__assert_fail@plt+0x5038>
   162c8:	ldr	r2, [r0, #-8]
   162cc:	cmp	r2, #0
   162d0:	beq	162bc <__assert_fail@plt+0x4fec>
   162d4:	ldr	r2, [r0, #-4]
   162d8:	mov	r1, #1
   162dc:	cmp	r2, #0
   162e0:	beq	162f4 <__assert_fail@plt+0x5024>
   162e4:	ldr	r2, [r2, #4]
   162e8:	add	r1, r1, #1
   162ec:	cmp	r2, #0
   162f0:	bne	162e4 <__assert_fail@plt+0x5014>
   162f4:	cmp	r5, r1
   162f8:	add	r0, r0, #8
   162fc:	movcc	r5, r1
   16300:	cmp	r0, ip
   16304:	bne	162c8 <__assert_fail@plt+0x4ff8>
   16308:	mov	r1, #1
   1630c:	mov	r0, r4
   16310:	movw	r2, #47736	; 0xba78
   16314:	movt	r2, #1
   16318:	bl	111bc <__fprintf_chk@plt>
   1631c:	mov	r3, r6
   16320:	mov	r1, #1
   16324:	mov	r0, r4
   16328:	movw	r2, #47760	; 0xba90
   1632c:	movt	r2, #1
   16330:	bl	111bc <__fprintf_chk@plt>
   16334:	vmov	s15, r7
   16338:	mov	r3, r7
   1633c:	mov	r1, #1
   16340:	vldr	d5, [pc, #88]	; 163a0 <__assert_fail@plt+0x50d0>
   16344:	mov	r0, r4
   16348:	movw	r2, #47784	; 0xbaa8
   1634c:	movt	r2, #1
   16350:	vcvt.f64.u32	d6, s15
   16354:	vmov	s15, r6
   16358:	vmul.f64	d6, d6, d5
   1635c:	vcvt.f64.u32	d7, s15
   16360:	vdiv.f64	d5, d6, d7
   16364:	vstr	d5, [sp]
   16368:	bl	111bc <__fprintf_chk@plt>
   1636c:	mov	r3, r5
   16370:	mov	r0, r4
   16374:	movw	r2, #47820	; 0xbacc
   16378:	movt	r2, #1
   1637c:	mov	r1, #1
   16380:	add	sp, sp, #12
   16384:	ldrd	r4, [sp]
   16388:	ldrd	r6, [sp, #8]
   1638c:	ldr	lr, [sp, #16]
   16390:	add	sp, sp, #20
   16394:	b	111bc <__fprintf_chk@plt>
   16398:	mov	r5, #0
   1639c:	b	16308 <__assert_fail@plt+0x5038>
   163a0:	andeq	r0, r0, r0
   163a4:	subsmi	r0, r9, r0
   163a8:	strd	r4, [sp, #-16]!
   163ac:	mov	r5, r1
   163b0:	str	r6, [sp, #8]
   163b4:	mov	r6, r0
   163b8:	str	lr, [sp, #12]
   163bc:	bl	15d84 <__assert_fail@plt+0x4ab4>
   163c0:	ldr	r3, [r0]
   163c4:	cmp	r3, #0
   163c8:	beq	16404 <__assert_fail@plt+0x5134>
   163cc:	mov	r4, r0
   163d0:	b	163d8 <__assert_fail@plt+0x5108>
   163d4:	ldr	r3, [r4]
   163d8:	cmp	r3, r5
   163dc:	mov	r1, r3
   163e0:	mov	r0, r5
   163e4:	beq	1641c <__assert_fail@plt+0x514c>
   163e8:	ldr	r3, [r6, #28]
   163ec:	blx	r3
   163f0:	cmp	r0, #0
   163f4:	bne	16418 <__assert_fail@plt+0x5148>
   163f8:	ldr	r4, [r4, #4]
   163fc:	cmp	r4, #0
   16400:	bne	163d4 <__assert_fail@plt+0x5104>
   16404:	ldrd	r4, [sp]
   16408:	mov	r0, #0
   1640c:	ldr	r6, [sp, #8]
   16410:	add	sp, sp, #12
   16414:	pop	{pc}		; (ldr pc, [sp], #4)
   16418:	ldr	r5, [r4]
   1641c:	mov	r0, r5
   16420:	ldrd	r4, [sp]
   16424:	ldr	r6, [sp, #8]
   16428:	add	sp, sp, #12
   1642c:	pop	{pc}		; (ldr pc, [sp], #4)
   16430:	ldr	r3, [r0, #16]
   16434:	cmp	r3, #0
   16438:	beq	1648c <__assert_fail@plt+0x51bc>
   1643c:	ldr	r3, [r0]
   16440:	ldr	r2, [r0, #4]
   16444:	cmp	r3, r2
   16448:	bcs	16480 <__assert_fail@plt+0x51b0>
   1644c:	ldr	r0, [r3]
   16450:	cmp	r0, #0
   16454:	bxne	lr
   16458:	sub	r2, r2, #1
   1645c:	sub	r2, r2, r3
   16460:	bic	r2, r2, #7
   16464:	add	r2, r3, r2
   16468:	b	16478 <__assert_fail@plt+0x51a8>
   1646c:	ldr	r0, [r3, #8]!
   16470:	cmp	r0, #0
   16474:	bxne	lr
   16478:	cmp	r3, r2
   1647c:	bne	1646c <__assert_fail@plt+0x519c>
   16480:	str	r4, [sp, #-8]!
   16484:	str	lr, [sp, #4]
   16488:	bl	11294 <abort@plt>
   1648c:	mov	r0, r3
   16490:	bx	lr
   16494:	strd	r4, [sp, #-16]!
   16498:	mov	r5, r0
   1649c:	mov	r4, r1
   164a0:	str	r6, [sp, #8]
   164a4:	str	lr, [sp, #12]
   164a8:	bl	15d84 <__assert_fail@plt+0x4ab4>
   164ac:	mov	r2, r0
   164b0:	mov	r3, r0
   164b4:	b	164c0 <__assert_fail@plt+0x51f0>
   164b8:	cmp	r3, #0
   164bc:	beq	164d8 <__assert_fail@plt+0x5208>
   164c0:	ldm	r3, {r1, r3}
   164c4:	cmp	r1, r4
   164c8:	bne	164b8 <__assert_fail@plt+0x51e8>
   164cc:	cmp	r3, #0
   164d0:	ldrne	r0, [r3]
   164d4:	bne	164fc <__assert_fail@plt+0x522c>
   164d8:	ldr	r3, [r5, #4]
   164dc:	b	164ec <__assert_fail@plt+0x521c>
   164e0:	ldr	r0, [r2]
   164e4:	cmp	r0, #0
   164e8:	bne	164fc <__assert_fail@plt+0x522c>
   164ec:	add	r2, r2, #8
   164f0:	cmp	r3, r2
   164f4:	bhi	164e0 <__assert_fail@plt+0x5210>
   164f8:	mov	r0, #0
   164fc:	ldrd	r4, [sp]
   16500:	ldr	r6, [sp, #8]
   16504:	add	sp, sp, #12
   16508:	pop	{pc}		; (ldr pc, [sp], #4)
   1650c:	strd	r4, [sp, #-12]!
   16510:	ldr	r5, [r0]
   16514:	str	lr, [sp, #8]
   16518:	ldr	lr, [r0, #4]
   1651c:	cmp	lr, r5
   16520:	bls	165ac <__assert_fail@plt+0x52dc>
   16524:	mov	ip, #0
   16528:	ldr	r3, [r5]
   1652c:	cmp	r3, #0
   16530:	bne	16554 <__assert_fail@plt+0x5284>
   16534:	add	r5, r5, #8
   16538:	cmp	lr, r5
   1653c:	bhi	16528 <__assert_fail@plt+0x5258>
   16540:	mov	r2, ip
   16544:	ldrd	r4, [sp]
   16548:	add	sp, sp, #8
   1654c:	mov	r0, r2
   16550:	pop	{pc}		; (ldr pc, [sp], #4)
   16554:	cmp	r2, ip
   16558:	bls	16540 <__assert_fail@plt+0x5270>
   1655c:	str	r3, [r1, ip, lsl #2]
   16560:	add	r4, ip, #1
   16564:	add	lr, r1, ip, lsl #2
   16568:	ldr	r3, [r5, #4]
   1656c:	cmp	r3, #0
   16570:	beq	165a0 <__assert_fail@plt+0x52d0>
   16574:	mov	ip, r4
   16578:	cmp	r2, ip
   1657c:	add	ip, ip, #1
   16580:	beq	16544 <__assert_fail@plt+0x5274>
   16584:	ldr	r4, [r3]
   16588:	str	r4, [lr, #4]!
   1658c:	ldr	r3, [r3, #4]
   16590:	cmp	r3, #0
   16594:	bne	16578 <__assert_fail@plt+0x52a8>
   16598:	ldr	lr, [r0, #4]
   1659c:	b	16534 <__assert_fail@plt+0x5264>
   165a0:	mov	ip, r4
   165a4:	ldr	lr, [r0, #4]
   165a8:	b	16534 <__assert_fail@plt+0x5264>
   165ac:	mov	r2, #0
   165b0:	b	16544 <__assert_fail@plt+0x5274>
   165b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   165b8:	ldr	r3, [r0, #4]
   165bc:	strd	r6, [sp, #8]
   165c0:	strd	r8, [sp, #16]
   165c4:	ldr	r8, [r0]
   165c8:	str	sl, [sp, #24]
   165cc:	str	lr, [sp, #28]
   165d0:	cmp	r3, r8
   165d4:	bls	16650 <__assert_fail@plt+0x5380>
   165d8:	mov	r7, r2
   165dc:	mov	r6, r1
   165e0:	mov	r9, r0
   165e4:	mov	r5, #0
   165e8:	ldr	r0, [r8]
   165ec:	cmp	r0, #0
   165f0:	bne	1661c <__assert_fail@plt+0x534c>
   165f4:	add	r8, r8, #8
   165f8:	cmp	r3, r8
   165fc:	bhi	165e8 <__assert_fail@plt+0x5318>
   16600:	mov	r0, r5
   16604:	ldrd	r4, [sp]
   16608:	ldrd	r6, [sp, #8]
   1660c:	ldrd	r8, [sp, #16]
   16610:	ldr	sl, [sp, #24]
   16614:	add	sp, sp, #28
   16618:	pop	{pc}		; (ldr pc, [sp], #4)
   1661c:	mov	r4, r8
   16620:	b	16628 <__assert_fail@plt+0x5358>
   16624:	ldr	r0, [r4]
   16628:	mov	r1, r7
   1662c:	blx	r6
   16630:	cmp	r0, #0
   16634:	beq	16600 <__assert_fail@plt+0x5330>
   16638:	ldr	r4, [r4, #4]
   1663c:	add	r5, r5, #1
   16640:	cmp	r4, #0
   16644:	bne	16624 <__assert_fail@plt+0x5354>
   16648:	ldr	r3, [r9, #4]
   1664c:	b	165f4 <__assert_fail@plt+0x5324>
   16650:	mov	r5, #0
   16654:	b	16600 <__assert_fail@plt+0x5330>
   16658:	ldrb	r2, [r0]
   1665c:	cmp	r2, #0
   16660:	beq	1668c <__assert_fail@plt+0x53bc>
   16664:	mov	r3, #0
   16668:	rsb	r3, r3, r3, lsl #5
   1666c:	add	r3, r3, r2
   16670:	ldrb	r2, [r0, #1]!
   16674:	udiv	ip, r3, r1
   16678:	cmp	r2, #0
   1667c:	mls	r3, r1, ip, r3
   16680:	bne	16668 <__assert_fail@plt+0x5398>
   16684:	mov	r0, r3
   16688:	bx	lr
   1668c:	mov	r3, r2
   16690:	mov	r0, r3
   16694:	bx	lr
   16698:	movw	r3, #47716	; 0xba64
   1669c:	movt	r3, #1
   166a0:	strd	r4, [sp, #-8]!
   166a4:	ldrd	r4, [r3]
   166a8:	ldr	r1, [r3, #16]
   166ac:	ldrd	r2, [r3, #8]
   166b0:	strd	r4, [r0]
   166b4:	ldrd	r4, [sp]
   166b8:	add	sp, sp, #8
   166bc:	strd	r2, [r0, #8]
   166c0:	str	r1, [r0, #16]
   166c4:	bx	lr
   166c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   166cc:	cmp	r2, #0
   166d0:	movw	ip, #23924	; 0x5d74
   166d4:	movt	ip, #1
   166d8:	strd	r6, [sp, #8]
   166dc:	movne	r6, r2
   166e0:	str	lr, [sp, #16]
   166e4:	sub	sp, sp, #12
   166e8:	movw	lr, #23908	; 0x5d64
   166ec:	movt	lr, #1
   166f0:	mov	r7, r1
   166f4:	moveq	r6, lr
   166f8:	cmp	r3, #0
   166fc:	str	r0, [sp, #4]
   16700:	mov	r0, #40	; 0x28
   16704:	movne	r5, r3
   16708:	moveq	r5, ip
   1670c:	bl	19fd0 <__assert_fail@plt+0x8d00>
   16710:	subs	r4, r0, #0
   16714:	beq	167ac <__assert_fail@plt+0x54dc>
   16718:	cmp	r7, #0
   1671c:	add	r0, r4, #20
   16720:	beq	167c4 <__assert_fail@plt+0x54f4>
   16724:	str	r7, [r4, #20]
   16728:	bl	15eec <__assert_fail@plt+0x4c1c>
   1672c:	cmp	r0, #0
   16730:	beq	1680c <__assert_fail@plt+0x553c>
   16734:	ldrb	r3, [r7, #16]
   16738:	cmp	r3, #0
   1673c:	beq	1681c <__assert_fail@plt+0x554c>
   16740:	ldr	r0, [sp, #4]
   16744:	bl	15cd8 <__assert_fail@plt+0x4a08>
   16748:	lsrs	r2, r0, #30
   1674c:	movne	r7, #1
   16750:	moveq	r7, #0
   16754:	tst	r0, #536870912	; 0x20000000
   16758:	bne	16804 <__assert_fail@plt+0x5534>
   1675c:	cmp	r7, #0
   16760:	bne	16804 <__assert_fail@plt+0x5534>
   16764:	cmp	r0, #0
   16768:	str	r0, [r4, #8]
   1676c:	beq	1680c <__assert_fail@plt+0x553c>
   16770:	mov	r1, #8
   16774:	bl	19f5c <__assert_fail@plt+0x8c8c>
   16778:	cmp	r0, #0
   1677c:	str	r0, [r4]
   16780:	beq	1680c <__assert_fail@plt+0x553c>
   16784:	ldr	r3, [r4, #8]
   16788:	str	r7, [r4, #12]
   1678c:	str	r7, [r4, #16]
   16790:	str	r6, [r4, #24]
   16794:	str	r5, [r4, #28]
   16798:	add	r0, r0, r3, lsl #3
   1679c:	ldr	r3, [sp, #32]
   167a0:	str	r0, [r4, #4]
   167a4:	str	r3, [r4, #32]
   167a8:	str	r7, [r4, #36]	; 0x24
   167ac:	mov	r0, r4
   167b0:	add	sp, sp, #12
   167b4:	ldrd	r4, [sp]
   167b8:	ldrd	r6, [sp, #8]
   167bc:	add	sp, sp, #16
   167c0:	pop	{pc}		; (ldr pc, [sp], #4)
   167c4:	movw	r3, #47716	; 0xba64
   167c8:	movt	r3, #1
   167cc:	str	r3, [r4, #20]
   167d0:	bl	15eec <__assert_fail@plt+0x4c1c>
   167d4:	cmp	r0, #0
   167d8:	beq	1680c <__assert_fail@plt+0x553c>
   167dc:	vldr	s13, [pc, #64]	; 16824 <__assert_fail@plt+0x5554>
   167e0:	vldr	s15, [sp, #4]
   167e4:	vldr	s14, [pc, #60]	; 16828 <__assert_fail@plt+0x5558>
   167e8:	vcvt.f32.u32	s12, s15
   167ec:	vdiv.f32	s15, s12, s13
   167f0:	vcmpe.f32	s15, s14
   167f4:	vmrs	APSR_nzcv, fpscr
   167f8:	vcvtlt.u32.f32	s15, s15
   167fc:	vstrlt	s15, [sp, #4]
   16800:	blt	16740 <__assert_fail@plt+0x5470>
   16804:	mov	r3, #0
   16808:	str	r3, [r4, #8]
   1680c:	mov	r0, r4
   16810:	mov	r4, #0
   16814:	bl	138e0 <__assert_fail@plt+0x2610>
   16818:	b	167ac <__assert_fail@plt+0x54dc>
   1681c:	vldr	s13, [r7, #8]
   16820:	b	167e0 <__assert_fail@plt+0x5510>
   16824:	svccc	0x004ccccd
   16828:	svcmi	0x00800000
   1682c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16830:	mov	r5, r0
   16834:	ldr	r2, [r0, #4]
   16838:	strd	r6, [sp, #8]
   1683c:	ldr	r6, [r0]
   16840:	str	r8, [sp, #16]
   16844:	str	lr, [sp, #20]
   16848:	cmp	r6, r2
   1684c:	addcc	r6, r6, #8
   16850:	movcc	r7, #0
   16854:	bcc	16868 <__assert_fail@plt+0x5598>
   16858:	b	168dc <__assert_fail@plt+0x560c>
   1685c:	cmp	r2, r6
   16860:	add	r6, r6, #8
   16864:	bls	168dc <__assert_fail@plt+0x560c>
   16868:	ldr	r3, [r6, #-8]
   1686c:	cmp	r3, #0
   16870:	beq	1685c <__assert_fail@plt+0x558c>
   16874:	ldr	r4, [r6, #-4]
   16878:	ldr	r2, [r5, #32]
   1687c:	cmp	r4, #0
   16880:	beq	168b4 <__assert_fail@plt+0x55e4>
   16884:	cmp	r2, #0
   16888:	beq	16898 <__assert_fail@plt+0x55c8>
   1688c:	ldr	r0, [r4]
   16890:	blx	r2
   16894:	ldr	r2, [r5, #32]
   16898:	ldr	r3, [r4, #4]
   1689c:	ldr	r1, [r5, #36]	; 0x24
   168a0:	str	r7, [r4]
   168a4:	str	r1, [r4, #4]
   168a8:	str	r4, [r5, #36]	; 0x24
   168ac:	subs	r4, r3, #0
   168b0:	bne	16884 <__assert_fail@plt+0x55b4>
   168b4:	cmp	r2, #0
   168b8:	beq	168c4 <__assert_fail@plt+0x55f4>
   168bc:	ldr	r0, [r6, #-8]
   168c0:	blx	r2
   168c4:	str	r7, [r6, #-8]
   168c8:	str	r7, [r6, #-4]
   168cc:	ldr	r2, [r5, #4]
   168d0:	cmp	r2, r6
   168d4:	add	r6, r6, #8
   168d8:	bhi	16868 <__assert_fail@plt+0x5598>
   168dc:	mov	r3, #0
   168e0:	ldrd	r6, [sp, #8]
   168e4:	ldr	r8, [sp, #16]
   168e8:	str	r3, [r5, #12]
   168ec:	str	r3, [r5, #16]
   168f0:	ldrd	r4, [sp]
   168f4:	add	sp, sp, #20
   168f8:	pop	{pc}		; (ldr pc, [sp], #4)
   168fc:	strd	r4, [sp, #-16]!
   16900:	ldr	r2, [r0, #32]
   16904:	ldr	r5, [r0]
   16908:	ldr	r3, [r0, #4]
   1690c:	cmp	r2, #0
   16910:	str	r6, [sp, #8]
   16914:	mov	r6, r0
   16918:	str	lr, [sp, #12]
   1691c:	beq	16984 <__assert_fail@plt+0x56b4>
   16920:	ldr	r2, [r0, #16]
   16924:	cmp	r2, #0
   16928:	beq	16984 <__assert_fail@plt+0x56b4>
   1692c:	cmp	r5, r3
   16930:	bcc	16944 <__assert_fail@plt+0x5674>
   16934:	b	169b8 <__assert_fail@plt+0x56e8>
   16938:	add	r5, r5, #8
   1693c:	cmp	r3, r5
   16940:	bls	16980 <__assert_fail@plt+0x56b0>
   16944:	ldr	r0, [r5]
   16948:	cmp	r0, #0
   1694c:	beq	16938 <__assert_fail@plt+0x5668>
   16950:	mov	r4, r5
   16954:	b	1695c <__assert_fail@plt+0x568c>
   16958:	ldr	r0, [r4]
   1695c:	ldr	r3, [r6, #32]
   16960:	blx	r3
   16964:	ldr	r4, [r4, #4]
   16968:	cmp	r4, #0
   1696c:	bne	16958 <__assert_fail@plt+0x5688>
   16970:	ldr	r3, [r6, #4]
   16974:	add	r5, r5, #8
   16978:	cmp	r3, r5
   1697c:	bhi	16944 <__assert_fail@plt+0x5674>
   16980:	ldr	r5, [r6]
   16984:	cmp	r5, r3
   16988:	bcs	169b8 <__assert_fail@plt+0x56e8>
   1698c:	ldr	r0, [r5, #4]
   16990:	cmp	r0, #0
   16994:	beq	169ac <__assert_fail@plt+0x56dc>
   16998:	ldr	r4, [r0, #4]
   1699c:	bl	138e0 <__assert_fail@plt+0x2610>
   169a0:	subs	r0, r4, #0
   169a4:	bne	16998 <__assert_fail@plt+0x56c8>
   169a8:	ldr	r3, [r6, #4]
   169ac:	add	r5, r5, #8
   169b0:	cmp	r3, r5
   169b4:	bhi	1698c <__assert_fail@plt+0x56bc>
   169b8:	ldr	r0, [r6, #36]	; 0x24
   169bc:	cmp	r0, #0
   169c0:	beq	169d4 <__assert_fail@plt+0x5704>
   169c4:	ldr	r4, [r0, #4]
   169c8:	bl	138e0 <__assert_fail@plt+0x2610>
   169cc:	subs	r0, r4, #0
   169d0:	bne	169c4 <__assert_fail@plt+0x56f4>
   169d4:	ldr	r0, [r6]
   169d8:	bl	138e0 <__assert_fail@plt+0x2610>
   169dc:	mov	r0, r6
   169e0:	ldrd	r4, [sp]
   169e4:	ldr	r6, [sp, #8]
   169e8:	ldr	lr, [sp, #12]
   169ec:	add	sp, sp, #16
   169f0:	b	138e0 <__assert_fail@plt+0x2610>
   169f4:	ldr	r3, [r0, #20]
   169f8:	strd	r4, [sp, #-20]!	; 0xffffffec
   169fc:	ldrb	r2, [r3, #16]
   16a00:	strd	r6, [sp, #8]
   16a04:	mov	r6, r0
   16a08:	str	lr, [sp, #16]
   16a0c:	sub	sp, sp, #52	; 0x34
   16a10:	str	r1, [sp, #4]
   16a14:	cmp	r2, #0
   16a18:	bne	16a44 <__assert_fail@plt+0x5774>
   16a1c:	vmov	s15, r1
   16a20:	vldr	s13, [r3, #8]
   16a24:	vldr	s14, [pc, #340]	; 16b80 <__assert_fail@plt+0x58b0>
   16a28:	vcvt.f32.u32	s12, s15
   16a2c:	vdiv.f32	s15, s12, s13
   16a30:	vcmpe.f32	s15, s14
   16a34:	vmrs	APSR_nzcv, fpscr
   16a38:	vcvtlt.u32.f32	s15, s15
   16a3c:	vstrlt	s15, [sp, #4]
   16a40:	bge	16a74 <__assert_fail@plt+0x57a4>
   16a44:	ldr	r0, [sp, #4]
   16a48:	bl	15cd8 <__assert_fail@plt+0x4a08>
   16a4c:	lsrs	r3, r0, #30
   16a50:	mov	r5, r0
   16a54:	movne	r4, #1
   16a58:	moveq	r4, #0
   16a5c:	tst	r0, #536870912	; 0x20000000
   16a60:	movne	r4, #1
   16a64:	cmp	r0, #0
   16a68:	moveq	r4, #1
   16a6c:	cmp	r4, #0
   16a70:	beq	16a90 <__assert_fail@plt+0x57c0>
   16a74:	mov	r4, #0
   16a78:	mov	r0, r4
   16a7c:	add	sp, sp, #52	; 0x34
   16a80:	ldrd	r4, [sp]
   16a84:	ldrd	r6, [sp, #8]
   16a88:	add	sp, sp, #16
   16a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a90:	ldr	r3, [r6, #8]
   16a94:	cmp	r3, r0
   16a98:	beq	16b48 <__assert_fail@plt+0x5878>
   16a9c:	mov	r1, #8
   16aa0:	bl	19f5c <__assert_fail@plt+0x8c8c>
   16aa4:	cmp	r0, #0
   16aa8:	str	r0, [sp, #8]
   16aac:	beq	16a74 <__assert_fail@plt+0x57a4>
   16ab0:	add	r3, r0, r5, lsl #3
   16ab4:	ldr	r7, [r6, #20]
   16ab8:	mov	r2, r4
   16abc:	add	r0, sp, #8
   16ac0:	mov	r1, r6
   16ac4:	ldr	lr, [r6, #28]
   16ac8:	str	r3, [sp, #12]
   16acc:	str	r5, [sp, #16]
   16ad0:	ldr	r5, [r6, #24]
   16ad4:	str	r4, [sp, #20]
   16ad8:	ldr	ip, [r6, #32]
   16adc:	str	r4, [sp, #24]
   16ae0:	ldr	r3, [r6, #36]	; 0x24
   16ae4:	str	r7, [sp, #28]
   16ae8:	str	r5, [sp, #32]
   16aec:	str	lr, [sp, #36]	; 0x24
   16af0:	str	ip, [sp, #40]	; 0x28
   16af4:	str	r3, [sp, #44]	; 0x2c
   16af8:	bl	15fa0 <__assert_fail@plt+0x4cd0>
   16afc:	subs	r4, r0, #0
   16b00:	bne	16b50 <__assert_fail@plt+0x5880>
   16b04:	ldr	r3, [sp, #44]	; 0x2c
   16b08:	mov	r2, #1
   16b0c:	add	r1, sp, #8
   16b10:	mov	r0, r6
   16b14:	str	r3, [r6, #36]	; 0x24
   16b18:	bl	15fa0 <__assert_fail@plt+0x4cd0>
   16b1c:	cmp	r0, #0
   16b20:	beq	16b7c <__assert_fail@plt+0x58ac>
   16b24:	add	r1, sp, #8
   16b28:	mov	r0, r6
   16b2c:	mov	r2, r4
   16b30:	bl	15fa0 <__assert_fail@plt+0x4cd0>
   16b34:	cmp	r0, #0
   16b38:	beq	16b7c <__assert_fail@plt+0x58ac>
   16b3c:	ldr	r0, [sp, #8]
   16b40:	bl	138e0 <__assert_fail@plt+0x2610>
   16b44:	b	16a78 <__assert_fail@plt+0x57a8>
   16b48:	mov	r4, #1
   16b4c:	b	16a78 <__assert_fail@plt+0x57a8>
   16b50:	ldr	r0, [r6]
   16b54:	bl	138e0 <__assert_fail@plt+0x2610>
   16b58:	ldrd	r2, [sp, #8]
   16b5c:	ldr	r1, [sp, #16]
   16b60:	strd	r2, [r6]
   16b64:	ldr	r2, [sp, #20]
   16b68:	str	r1, [r6, #8]
   16b6c:	ldr	r3, [sp, #44]	; 0x2c
   16b70:	str	r2, [r6, #12]
   16b74:	str	r3, [r6, #36]	; 0x24
   16b78:	b	16a78 <__assert_fail@plt+0x57a8>
   16b7c:	bl	11294 <abort@plt>
   16b80:	svcmi	0x00800000
   16b84:	strd	r4, [sp, #-16]!
   16b88:	str	r6, [sp, #8]
   16b8c:	subs	r6, r1, #0
   16b90:	str	lr, [sp, #12]
   16b94:	sub	sp, sp, #8
   16b98:	beq	16d18 <__assert_fail@plt+0x5a48>
   16b9c:	mov	r3, #0
   16ba0:	mov	r5, r2
   16ba4:	add	r2, sp, #4
   16ba8:	mov	r4, r0
   16bac:	bl	15dc4 <__assert_fail@plt+0x4af4>
   16bb0:	subs	r3, r0, #0
   16bb4:	beq	16be0 <__assert_fail@plt+0x5910>
   16bb8:	cmp	r5, #0
   16bbc:	moveq	r0, r5
   16bc0:	beq	16bcc <__assert_fail@plt+0x58fc>
   16bc4:	mov	r0, #0
   16bc8:	str	r3, [r5]
   16bcc:	add	sp, sp, #8
   16bd0:	ldrd	r4, [sp]
   16bd4:	ldr	r6, [sp, #8]
   16bd8:	add	sp, sp, #12
   16bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16be0:	vldr	s15, [r4, #8]
   16be4:	vldr	s14, [r4, #12]
   16be8:	ldr	r3, [r4, #20]
   16bec:	vcvt.f32.u32	s15, s15
   16bf0:	vcvt.f32.u32	s14, s14
   16bf4:	vldr	s13, [r3, #8]
   16bf8:	vmul.f32	s15, s15, s13
   16bfc:	vcmpe.f32	s14, s15
   16c00:	vmrs	APSR_nzcv, fpscr
   16c04:	bgt	16c4c <__assert_fail@plt+0x597c>
   16c08:	ldr	r2, [sp, #4]
   16c0c:	ldr	r3, [r2]
   16c10:	cmp	r3, #0
   16c14:	beq	16ca8 <__assert_fail@plt+0x59d8>
   16c18:	ldr	r3, [r4, #36]	; 0x24
   16c1c:	cmp	r3, #0
   16c20:	beq	16ccc <__assert_fail@plt+0x59fc>
   16c24:	ldr	r1, [r3, #4]
   16c28:	str	r1, [r4, #36]	; 0x24
   16c2c:	ldr	r1, [r4, #16]
   16c30:	mov	r0, #1
   16c34:	ldr	ip, [r2, #4]
   16c38:	add	r1, r1, r0
   16c3c:	stm	r3, {r6, ip}
   16c40:	str	r3, [r2, #4]
   16c44:	str	r1, [r4, #16]
   16c48:	b	16bcc <__assert_fail@plt+0x58fc>
   16c4c:	add	r0, r4, #20
   16c50:	bl	15eec <__assert_fail@plt+0x4c1c>
   16c54:	vldr	s15, [r4, #8]
   16c58:	vldr	s14, [r4, #12]
   16c5c:	ldr	r3, [r4, #20]
   16c60:	vcvt.f32.u32	s15, s15
   16c64:	vcvt.f32.u32	s14, s14
   16c68:	vldr	s13, [r3, #8]
   16c6c:	vmul.f32	s12, s13, s15
   16c70:	vcmpe.f32	s14, s12
   16c74:	vmrs	APSR_nzcv, fpscr
   16c78:	ble	16c08 <__assert_fail@plt+0x5938>
   16c7c:	vldr	s14, [r3, #12]
   16c80:	ldrb	r2, [r3, #16]
   16c84:	vmul.f32	s15, s15, s14
   16c88:	vldr	s14, [pc, #140]	; 16d1c <__assert_fail@plt+0x5a4c>
   16c8c:	cmp	r2, #0
   16c90:	vmuleq.f32	s15, s15, s13
   16c94:	vcmpe.f32	s15, s14
   16c98:	vmrs	APSR_nzcv, fpscr
   16c9c:	blt	16ce4 <__assert_fail@plt+0x5a14>
   16ca0:	mvn	r0, #0
   16ca4:	b	16bcc <__assert_fail@plt+0x58fc>
   16ca8:	ldr	r1, [r4, #12]
   16cac:	mov	r0, #1
   16cb0:	ldr	r3, [r4, #16]
   16cb4:	str	r6, [r2]
   16cb8:	add	r2, r1, r0
   16cbc:	add	r3, r3, r0
   16cc0:	str	r2, [r4, #12]
   16cc4:	str	r3, [r4, #16]
   16cc8:	b	16bcc <__assert_fail@plt+0x58fc>
   16ccc:	mov	r0, #8
   16cd0:	bl	19fd0 <__assert_fail@plt+0x8d00>
   16cd4:	subs	r3, r0, #0
   16cd8:	beq	16ca0 <__assert_fail@plt+0x59d0>
   16cdc:	ldr	r2, [sp, #4]
   16ce0:	b	16c2c <__assert_fail@plt+0x595c>
   16ce4:	vcvt.u32.f32	s15, s15
   16ce8:	mov	r0, r4
   16cec:	vmov	r1, s15
   16cf0:	bl	169f4 <__assert_fail@plt+0x5724>
   16cf4:	cmp	r0, #0
   16cf8:	beq	16ca0 <__assert_fail@plt+0x59d0>
   16cfc:	add	r2, sp, #4
   16d00:	mov	r3, #0
   16d04:	mov	r1, r6
   16d08:	mov	r0, r4
   16d0c:	bl	15dc4 <__assert_fail@plt+0x4af4>
   16d10:	cmp	r0, #0
   16d14:	beq	16c08 <__assert_fail@plt+0x5938>
   16d18:	bl	11294 <abort@plt>
   16d1c:	svcmi	0x00800000
   16d20:	str	r4, [sp, #-8]!
   16d24:	mov	r4, r1
   16d28:	str	lr, [sp, #4]
   16d2c:	sub	sp, sp, #8
   16d30:	add	r2, sp, #4
   16d34:	bl	16b84 <__assert_fail@plt+0x58b4>
   16d38:	cmn	r0, #1
   16d3c:	moveq	r0, #0
   16d40:	beq	16d50 <__assert_fail@plt+0x5a80>
   16d44:	cmp	r0, #0
   16d48:	ldreq	r0, [sp, #4]
   16d4c:	movne	r0, r4
   16d50:	add	sp, sp, #8
   16d54:	ldr	r4, [sp]
   16d58:	add	sp, sp, #4
   16d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d60:	strd	r4, [sp, #-16]!
   16d64:	mov	r3, #1
   16d68:	mov	r4, r0
   16d6c:	str	r6, [sp, #8]
   16d70:	str	lr, [sp, #12]
   16d74:	sub	sp, sp, #8
   16d78:	add	r2, sp, #4
   16d7c:	bl	15dc4 <__assert_fail@plt+0x4af4>
   16d80:	subs	r5, r0, #0
   16d84:	beq	16da4 <__assert_fail@plt+0x5ad4>
   16d88:	ldr	r2, [sp, #4]
   16d8c:	ldr	r3, [r4, #16]
   16d90:	ldr	r2, [r2]
   16d94:	sub	r3, r3, #1
   16d98:	str	r3, [r4, #16]
   16d9c:	cmp	r2, #0
   16da0:	beq	16dbc <__assert_fail@plt+0x5aec>
   16da4:	mov	r0, r5
   16da8:	add	sp, sp, #8
   16dac:	ldrd	r4, [sp]
   16db0:	ldr	r6, [sp, #8]
   16db4:	add	sp, sp, #12
   16db8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dbc:	vldr	s15, [r4, #8]
   16dc0:	ldr	r3, [r4, #12]
   16dc4:	ldr	r2, [r4, #20]
   16dc8:	vcvt.f32.u32	s15, s15
   16dcc:	sub	r3, r3, #1
   16dd0:	vmov	s14, r3
   16dd4:	vldr	s13, [r2]
   16dd8:	str	r3, [r4, #12]
   16ddc:	vmul.f32	s15, s15, s13
   16de0:	vcvt.f32.u32	s14, s14
   16de4:	vcmpe.f32	s14, s15
   16de8:	vmrs	APSR_nzcv, fpscr
   16dec:	bpl	16da4 <__assert_fail@plt+0x5ad4>
   16df0:	add	r0, r4, #20
   16df4:	bl	15eec <__assert_fail@plt+0x4c1c>
   16df8:	vldr	s15, [r4, #8]
   16dfc:	vldr	s13, [r4, #12]
   16e00:	ldr	r3, [r4, #20]
   16e04:	vcvt.f32.u32	s15, s15
   16e08:	vcvt.f32.u32	s13, s13
   16e0c:	vldr	s14, [r3]
   16e10:	vmul.f32	s14, s15, s14
   16e14:	vcmpe.f32	s13, s14
   16e18:	vmrs	APSR_nzcv, fpscr
   16e1c:	bpl	16da4 <__assert_fail@plt+0x5ad4>
   16e20:	ldrb	r2, [r3, #16]
   16e24:	mov	r0, r4
   16e28:	vldr	s14, [r3, #4]
   16e2c:	cmp	r2, #0
   16e30:	vmul.f32	s15, s15, s14
   16e34:	vldreq	s14, [r3, #8]
   16e38:	vmuleq.f32	s15, s15, s14
   16e3c:	vcvt.u32.f32	s15, s15
   16e40:	vmov	r1, s15
   16e44:	bl	169f4 <__assert_fail@plt+0x5724>
   16e48:	cmp	r0, #0
   16e4c:	bne	16da4 <__assert_fail@plt+0x5ad4>
   16e50:	ldr	r0, [r4, #36]	; 0x24
   16e54:	cmp	r0, #0
   16e58:	beq	16e6c <__assert_fail@plt+0x5b9c>
   16e5c:	ldr	r6, [r0, #4]
   16e60:	bl	138e0 <__assert_fail@plt+0x2610>
   16e64:	subs	r0, r6, #0
   16e68:	bne	16e5c <__assert_fail@plt+0x5b8c>
   16e6c:	mov	r3, #0
   16e70:	str	r3, [r4, #36]	; 0x24
   16e74:	b	16da4 <__assert_fail@plt+0x5ad4>
   16e78:	b	16d60 <__assert_fail@plt+0x5a90>
   16e7c:	mov	r3, #0
   16e80:	mov	r2, #1
   16e84:	str	r1, [r0]
   16e88:	str	r1, [r0, #4]
   16e8c:	str	r1, [r0, #8]
   16e90:	str	r1, [r0, #12]
   16e94:	str	r1, [r0, #16]
   16e98:	str	r3, [r0, #20]
   16e9c:	str	r3, [r0, #24]
   16ea0:	strb	r2, [r0, #28]
   16ea4:	bx	lr
   16ea8:	ldrb	r0, [r0, #28]
   16eac:	bx	lr
   16eb0:	ldrb	ip, [r0, #28]
   16eb4:	mov	r2, r0
   16eb8:	ldr	r3, [r0, #20]
   16ebc:	eor	ip, ip, #1
   16ec0:	add	r3, ip, r3
   16ec4:	and	r3, r3, #3
   16ec8:	ldr	r0, [r0, r3, lsl #2]
   16ecc:	str	r1, [r2, r3, lsl #2]
   16ed0:	ldr	r1, [r2, #24]
   16ed4:	str	r3, [r2, #20]
   16ed8:	cmp	r1, r3
   16edc:	bne	16eec <__assert_fail@plt+0x5c1c>
   16ee0:	add	ip, ip, r1
   16ee4:	and	ip, ip, #3
   16ee8:	str	ip, [r2, #24]
   16eec:	mov	r3, #0
   16ef0:	strb	r3, [r2, #28]
   16ef4:	bx	lr
   16ef8:	ldrb	r3, [r0, #28]
   16efc:	cmp	r3, #0
   16f00:	bne	16f3c <__assert_fail@plt+0x5c6c>
   16f04:	ldr	r1, [r0, #16]
   16f08:	ldr	r3, [r0, #20]
   16f0c:	ldr	r2, [r0, r3, lsl #2]
   16f10:	str	r1, [r0, r3, lsl #2]
   16f14:	ldr	r1, [r0, #24]
   16f18:	cmp	r3, r1
   16f1c:	moveq	r3, #1
   16f20:	strbeq	r3, [r0, #28]
   16f24:	beq	16f34 <__assert_fail@plt+0x5c64>
   16f28:	add	r3, r3, #3
   16f2c:	and	r3, r3, #3
   16f30:	str	r3, [r0, #20]
   16f34:	mov	r0, r2
   16f38:	bx	lr
   16f3c:	str	r4, [sp, #-8]!
   16f40:	str	lr, [sp, #4]
   16f44:	bl	11294 <abort@plt>
   16f48:	push	{r2, r3}
   16f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   16f50:	sub	sp, sp, #12
   16f54:	ldr	r2, [sp, #16]
   16f58:	ands	r3, r2, #64	; 0x40
   16f5c:	bne	16f78 <__assert_fail@plt+0x5ca8>
   16f60:	bl	11174 <openat64@plt>
   16f64:	bl	19350 <__assert_fail@plt+0x8080>
   16f68:	add	sp, sp, #12
   16f6c:	pop	{lr}		; (ldr lr, [sp], #4)
   16f70:	add	sp, sp, #8
   16f74:	bx	lr
   16f78:	add	ip, sp, #20
   16f7c:	ldr	r3, [sp, #20]
   16f80:	str	ip, [sp, #4]
   16f84:	b	16f60 <__assert_fail@plt+0x5c90>
   16f88:	orr	r2, r2, #540672	; 0x84000
   16f8c:	strd	r4, [sp, #-16]!
   16f90:	orr	r2, r2, #2304	; 0x900
   16f94:	str	r6, [sp, #8]
   16f98:	mov	r6, r3
   16f9c:	str	lr, [sp, #12]
   16fa0:	bl	16f48 <__assert_fail@plt+0x5c78>
   16fa4:	subs	r5, r0, #0
   16fa8:	movlt	r4, #0
   16fac:	blt	16fc0 <__assert_fail@plt+0x5cf0>
   16fb0:	bl	11234 <fdopendir@plt>
   16fb4:	subs	r4, r0, #0
   16fb8:	beq	16fd4 <__assert_fail@plt+0x5d04>
   16fbc:	str	r5, [r6]
   16fc0:	mov	r0, r4
   16fc4:	ldrd	r4, [sp]
   16fc8:	ldr	r6, [sp, #8]
   16fcc:	add	sp, sp, #12
   16fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fd4:	bl	11180 <__errno_location@plt>
   16fd8:	mov	r6, r0
   16fdc:	mov	r0, r5
   16fe0:	ldr	r5, [r6]
   16fe4:	bl	112a0 <close@plt>
   16fe8:	b	16fbc <__assert_fail@plt+0x5cec>
   16fec:	strd	r4, [sp, #-16]!
   16ff0:	subs	r4, r0, #0
   16ff4:	str	r6, [sp, #8]
   16ff8:	str	lr, [sp, #12]
   16ffc:	beq	17094 <__assert_fail@plt+0x5dc4>
   17000:	mov	r1, #47	; 0x2f
   17004:	bl	11210 <strrchr@plt>
   17008:	subs	r5, r0, #0
   1700c:	beq	1706c <__assert_fail@plt+0x5d9c>
   17010:	add	r6, r5, #1
   17014:	sub	r3, r6, r4
   17018:	cmp	r3, #6
   1701c:	ble	1706c <__assert_fail@plt+0x5d9c>
   17020:	movw	r1, #47900	; 0xbb1c
   17024:	movt	r1, #1
   17028:	mov	r2, #7
   1702c:	sub	r0, r5, #6
   17030:	bl	11288 <strncmp@plt>
   17034:	cmp	r0, #0
   17038:	bne	1706c <__assert_fail@plt+0x5d9c>
   1703c:	movw	r1, #47908	; 0xbb24
   17040:	movt	r1, #1
   17044:	mov	r2, #3
   17048:	mov	r0, r6
   1704c:	bl	11288 <strncmp@plt>
   17050:	cmp	r0, #0
   17054:	movne	r4, r6
   17058:	bne	1706c <__assert_fail@plt+0x5d9c>
   1705c:	add	r4, r5, #4
   17060:	movw	r3, #53624	; 0xd178
   17064:	movt	r3, #2
   17068:	str	r4, [r3]
   1706c:	movw	r2, #53692	; 0xd1bc
   17070:	movt	r2, #2
   17074:	ldr	r6, [sp, #8]
   17078:	movw	r3, #53628	; 0xd17c
   1707c:	movt	r3, #2
   17080:	str	r4, [r2]
   17084:	str	r4, [r3]
   17088:	ldrd	r4, [sp]
   1708c:	add	sp, sp, #12
   17090:	pop	{pc}		; (ldr pc, [sp], #4)
   17094:	movw	r3, #53640	; 0xd188
   17098:	movt	r3, #2
   1709c:	movw	r0, #47844	; 0xbae4
   170a0:	movt	r0, #1
   170a4:	ldr	r3, [r3]
   170a8:	mov	r2, #55	; 0x37
   170ac:	mov	r1, #1
   170b0:	bl	110b4 <fwrite@plt>
   170b4:	bl	11294 <abort@plt>
   170b8:	strd	r4, [sp, #-16]!
   170bc:	mov	r4, #0
   170c0:	mov	r5, #0
   170c4:	cmp	r1, #10
   170c8:	str	r6, [sp, #8]
   170cc:	strd	r4, [r0]
   170d0:	strd	r4, [r0, #8]
   170d4:	str	lr, [sp, #12]
   170d8:	strd	r4, [r0, #16]
   170dc:	strd	r4, [r0, #24]
   170e0:	strd	r4, [r0, #32]
   170e4:	strd	r4, [r0, #40]	; 0x28
   170e8:	beq	17100 <__assert_fail@plt+0x5e30>
   170ec:	ldrd	r4, [sp]
   170f0:	str	r1, [r0]
   170f4:	ldr	r6, [sp, #8]
   170f8:	add	sp, sp, #12
   170fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17100:	bl	11294 <abort@plt>
   17104:	mov	r2, #5
   17108:	strd	r4, [sp, #-16]!
   1710c:	mov	r5, r0
   17110:	str	r6, [sp, #8]
   17114:	mov	r6, r1
   17118:	mov	r1, r0
   1711c:	mov	r0, #0
   17120:	str	lr, [sp, #12]
   17124:	bl	11060 <dcgettext@plt>
   17128:	cmp	r5, r0
   1712c:	mov	r4, r0
   17130:	beq	17148 <__assert_fail@plt+0x5e78>
   17134:	mov	r0, r4
   17138:	ldrd	r4, [sp]
   1713c:	ldr	r6, [sp, #8]
   17140:	add	sp, sp, #12
   17144:	pop	{pc}		; (ldr pc, [sp], #4)
   17148:	bl	1a4e8 <__assert_fail@plt+0x9218>
   1714c:	ldrb	r3, [r0]
   17150:	bic	r3, r3, #32
   17154:	cmp	r3, #85	; 0x55
   17158:	bne	171c0 <__assert_fail@plt+0x5ef0>
   1715c:	ldrb	r3, [r0, #1]
   17160:	bic	r3, r3, #32
   17164:	cmp	r3, #84	; 0x54
   17168:	bne	17240 <__assert_fail@plt+0x5f70>
   1716c:	ldrb	r3, [r0, #2]
   17170:	bic	r3, r3, #32
   17174:	cmp	r3, #70	; 0x46
   17178:	bne	17240 <__assert_fail@plt+0x5f70>
   1717c:	ldrb	r3, [r0, #3]
   17180:	cmp	r3, #45	; 0x2d
   17184:	bne	17240 <__assert_fail@plt+0x5f70>
   17188:	ldrb	r3, [r0, #4]
   1718c:	cmp	r3, #56	; 0x38
   17190:	bne	17240 <__assert_fail@plt+0x5f70>
   17194:	ldrb	r3, [r0, #5]
   17198:	cmp	r3, #0
   1719c:	bne	17240 <__assert_fail@plt+0x5f70>
   171a0:	ldrb	r2, [r4]
   171a4:	movw	r3, #48000	; 0xbb80
   171a8:	movt	r3, #1
   171ac:	movw	r4, #48012	; 0xbb8c
   171b0:	movt	r4, #1
   171b4:	cmp	r2, #96	; 0x60
   171b8:	movne	r4, r3
   171bc:	b	17134 <__assert_fail@plt+0x5e64>
   171c0:	cmp	r3, #71	; 0x47
   171c4:	bne	17240 <__assert_fail@plt+0x5f70>
   171c8:	ldrb	r3, [r0, #1]
   171cc:	bic	r3, r3, #32
   171d0:	cmp	r3, #66	; 0x42
   171d4:	bne	17240 <__assert_fail@plt+0x5f70>
   171d8:	ldrb	r3, [r0, #2]
   171dc:	cmp	r3, #49	; 0x31
   171e0:	bne	17240 <__assert_fail@plt+0x5f70>
   171e4:	ldrb	r3, [r0, #3]
   171e8:	cmp	r3, #56	; 0x38
   171ec:	bne	17240 <__assert_fail@plt+0x5f70>
   171f0:	ldrb	r3, [r0, #4]
   171f4:	cmp	r3, #48	; 0x30
   171f8:	bne	17240 <__assert_fail@plt+0x5f70>
   171fc:	ldrb	r3, [r0, #5]
   17200:	cmp	r3, #51	; 0x33
   17204:	bne	17240 <__assert_fail@plt+0x5f70>
   17208:	ldrb	r3, [r0, #6]
   1720c:	cmp	r3, #48	; 0x30
   17210:	bne	17240 <__assert_fail@plt+0x5f70>
   17214:	ldrb	r3, [r0, #7]
   17218:	cmp	r3, #0
   1721c:	bne	17240 <__assert_fail@plt+0x5f70>
   17220:	ldrb	r2, [r4]
   17224:	movw	r3, #48004	; 0xbb84
   17228:	movt	r3, #1
   1722c:	movw	r4, #48008	; 0xbb88
   17230:	movt	r4, #1
   17234:	cmp	r2, #96	; 0x60
   17238:	movne	r4, r3
   1723c:	b	17134 <__assert_fail@plt+0x5e64>
   17240:	movw	r3, #48016	; 0xbb90
   17244:	movt	r3, #1
   17248:	cmp	r6, #9
   1724c:	movw	r4, #47996	; 0xbb7c
   17250:	movt	r4, #1
   17254:	movne	r4, r3
   17258:	b	17134 <__assert_fail@plt+0x5e64>
   1725c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17260:	strd	r6, [sp, #8]
   17264:	strd	r8, [sp, #16]
   17268:	strd	sl, [sp, #24]
   1726c:	mov	fp, r0
   17270:	mov	sl, r1
   17274:	str	lr, [sp, #32]
   17278:	sub	sp, sp, #116	; 0x74
   1727c:	ldr	r8, [sp, #152]	; 0x98
   17280:	str	r3, [sp, #28]
   17284:	ldr	r3, [sp, #156]	; 0x9c
   17288:	str	r2, [sp, #32]
   1728c:	and	r4, r3, #2
   17290:	ubfx	r3, r3, #1, #1
   17294:	str	r3, [sp, #44]	; 0x2c
   17298:	bl	110cc <__ctype_get_mb_cur_max@plt>
   1729c:	str	r0, [sp, #64]	; 0x40
   172a0:	cmp	r8, #10
   172a4:	ldrls	pc, [pc, r8, lsl #2]
   172a8:	b	18a18 <__assert_fail@plt+0x7748>
   172ac:			; <UNDEFINED> instruction: 0x000176b0
   172b0:	andeq	r7, r1, ip, asr #14
   172b4:	andeq	r7, r1, r8, lsr #26
   172b8:	andeq	r7, r1, ip, ror #14
   172bc:	andeq	r7, r1, r4, lsl r6
   172c0:	andeq	r7, r1, r0, ror #12
   172c4:	andeq	r7, r1, r0, ror #13
   172c8:	andeq	r7, r1, ip, lsl r7
   172cc:	ldrdeq	r7, [r1], -r8
   172d0:	ldrdeq	r7, [r1], -r8
   172d4:	ldrdeq	r7, [r1], -r8
   172d8:	cmp	r8, #10
   172dc:	beq	17308 <__assert_fail@plt+0x6038>
   172e0:	mov	r1, r8
   172e4:	movw	r0, #48020	; 0xbb94
   172e8:	movt	r0, #1
   172ec:	bl	17104 <__assert_fail@plt+0x5e34>
   172f0:	mov	r1, r8
   172f4:	str	r0, [sp, #164]	; 0xa4
   172f8:	movw	r0, #48016	; 0xbb90
   172fc:	movt	r0, #1
   17300:	bl	17104 <__assert_fail@plt+0x5e34>
   17304:	str	r0, [sp, #168]	; 0xa8
   17308:	cmp	r4, #0
   1730c:	movne	r4, #0
   17310:	beq	186f4 <__assert_fail@plt+0x7424>
   17314:	mov	r3, #1
   17318:	mov	r5, #0
   1731c:	ldr	r0, [sp, #168]	; 0xa8
   17320:	str	r3, [sp, #36]	; 0x24
   17324:	str	r3, [sp, #40]	; 0x28
   17328:	str	r5, [sp, #68]	; 0x44
   1732c:	bl	11168 <strlen@plt>
   17330:	ldr	r3, [sp, #168]	; 0xa8
   17334:	str	r5, [sp, #48]	; 0x30
   17338:	str	r0, [sp, #56]	; 0x38
   1733c:	str	r3, [sp, #60]	; 0x3c
   17340:	str	r5, [sp, #72]	; 0x48
   17344:	str	r8, [sp, #152]	; 0x98
   17348:	mov	r8, fp
   1734c:	mov	r9, #0
   17350:	ldr	fp, [sp, #152]	; 0x98
   17354:	ldr	r3, [sp, #28]
   17358:	cmn	r3, #1
   1735c:	beq	178bc <__assert_fail@plt+0x65ec>
   17360:	ldr	r3, [sp, #28]
   17364:	subs	r6, r3, r9
   17368:	movne	r6, #1
   1736c:	cmp	r6, #0
   17370:	beq	178d4 <__assert_fail@plt+0x6604>
   17374:	ldr	r0, [sp, #32]
   17378:	ldr	r7, [sp, #40]	; 0x28
   1737c:	add	r3, r0, r9
   17380:	cmp	fp, #2
   17384:	moveq	r7, #0
   17388:	andne	r7, r7, #1
   1738c:	str	r3, [sp, #52]	; 0x34
   17390:	cmp	r7, #0
   17394:	beq	17d70 <__assert_fail@plt+0x6aa0>
   17398:	ldr	r2, [sp, #56]	; 0x38
   1739c:	cmp	r2, #0
   173a0:	beq	1800c <__assert_fail@plt+0x6d3c>
   173a4:	ldr	r1, [sp, #28]
   173a8:	cmp	r2, #1
   173ac:	mov	r3, r2
   173b0:	movls	r3, #0
   173b4:	movhi	r3, #1
   173b8:	add	r5, r9, r2
   173bc:	cmn	r1, #1
   173c0:	movne	r3, #0
   173c4:	cmp	r3, #0
   173c8:	beq	173d4 <__assert_fail@plt+0x6104>
   173cc:	bl	11168 <strlen@plt>
   173d0:	str	r0, [sp, #28]
   173d4:	ldr	r3, [sp, #28]
   173d8:	cmp	r5, r3
   173dc:	bhi	1800c <__assert_fail@plt+0x6d3c>
   173e0:	ldr	r0, [sp, #52]	; 0x34
   173e4:	ldr	r2, [sp, #56]	; 0x38
   173e8:	ldr	r1, [sp, #60]	; 0x3c
   173ec:	bl	11048 <memcmp@plt>
   173f0:	cmp	r0, #0
   173f4:	bne	1800c <__assert_fail@plt+0x6d3c>
   173f8:	ldr	r3, [sp, #44]	; 0x2c
   173fc:	cmp	r3, #0
   17400:	bne	1893c <__assert_fail@plt+0x766c>
   17404:	ldr	r3, [sp, #52]	; 0x34
   17408:	ldrb	r5, [r3]
   1740c:	cmp	r5, #126	; 0x7e
   17410:	ldrls	pc, [pc, r5, lsl #2]
   17414:	b	17ccc <__assert_fail@plt+0x69fc>
   17418:	ldrdeq	r7, [r1], -r0
   1741c:	andeq	r7, r1, ip, asr #25
   17420:	andeq	r7, r1, ip, asr #25
   17424:	andeq	r7, r1, ip, asr #25
   17428:	andeq	r7, r1, ip, asr #25
   1742c:	andeq	r7, r1, ip, asr #25
   17430:	andeq	r7, r1, ip, asr #25
   17434:	andeq	r7, r1, r4, lsr #23
   17438:	muleq	r1, ip, fp
   1743c:	andeq	r7, r1, r4, ror #21
   17440:	muleq	r1, r0, fp
   17444:	ldrdeq	r7, [r1], -ip
   17448:	andeq	r7, r1, ip, ror #22
   1744c:			; <UNDEFINED> instruction: 0x00017bb8
   17450:	andeq	r7, r1, ip, asr #25
   17454:	andeq	r7, r1, ip, asr #25
   17458:	andeq	r7, r1, ip, asr #25
   1745c:	andeq	r7, r1, ip, asr #25
   17460:	andeq	r7, r1, ip, asr #25
   17464:	andeq	r7, r1, ip, asr #25
   17468:	andeq	r7, r1, ip, asr #25
   1746c:	andeq	r7, r1, ip, asr #25
   17470:	andeq	r7, r1, ip, asr #25
   17474:	andeq	r7, r1, ip, asr #25
   17478:	andeq	r7, r1, ip, asr #25
   1747c:	andeq	r7, r1, ip, asr #25
   17480:	andeq	r7, r1, ip, asr #25
   17484:	andeq	r7, r1, ip, asr #25
   17488:	andeq	r7, r1, ip, asr #25
   1748c:	andeq	r7, r1, ip, asr #25
   17490:	andeq	r7, r1, ip, asr #25
   17494:	andeq	r7, r1, ip, asr #25
   17498:	andeq	r7, r1, r8, lsr #25
   1749c:			; <UNDEFINED> instruction: 0x00017bb0
   174a0:			; <UNDEFINED> instruction: 0x00017bb0
   174a4:	andeq	r7, r1, ip, lsl #25
   174a8:			; <UNDEFINED> instruction: 0x00017bb0
   174ac:	andeq	r7, r1, r0, asr #25
   174b0:			; <UNDEFINED> instruction: 0x00017bb0
   174b4:	andeq	r7, r1, ip, lsl #20
   174b8:			; <UNDEFINED> instruction: 0x00017bb0
   174bc:			; <UNDEFINED> instruction: 0x00017bb0
   174c0:			; <UNDEFINED> instruction: 0x00017bb0
   174c4:	andeq	r7, r1, r0, asr #25
   174c8:	andeq	r7, r1, r0, asr #25
   174cc:	andeq	r7, r1, r0, asr #25
   174d0:	andeq	r7, r1, r0, asr #25
   174d4:	andeq	r7, r1, r0, asr #25
   174d8:	andeq	r7, r1, r0, asr #25
   174dc:	andeq	r7, r1, r0, asr #25
   174e0:	andeq	r7, r1, r0, asr #25
   174e4:	andeq	r7, r1, r0, asr #25
   174e8:	andeq	r7, r1, r0, asr #25
   174ec:	andeq	r7, r1, r0, asr #25
   174f0:	andeq	r7, r1, r0, asr #25
   174f4:	andeq	r7, r1, r0, asr #25
   174f8:	andeq	r7, r1, r0, asr #25
   174fc:	andeq	r7, r1, r0, asr #25
   17500:	andeq	r7, r1, r0, asr #25
   17504:			; <UNDEFINED> instruction: 0x00017bb0
   17508:			; <UNDEFINED> instruction: 0x00017bb0
   1750c:			; <UNDEFINED> instruction: 0x00017bb0
   17510:			; <UNDEFINED> instruction: 0x00017bb0
   17514:	andeq	r7, r1, r0, ror #19
   17518:	andeq	r7, r1, ip, asr #25
   1751c:	andeq	r7, r1, r0, asr #25
   17520:	andeq	r7, r1, r0, asr #25
   17524:	andeq	r7, r1, r0, asr #25
   17528:	andeq	r7, r1, r0, asr #25
   1752c:	andeq	r7, r1, r0, asr #25
   17530:	andeq	r7, r1, r0, asr #25
   17534:	andeq	r7, r1, r0, asr #25
   17538:	andeq	r7, r1, r0, asr #25
   1753c:	andeq	r7, r1, r0, asr #25
   17540:	andeq	r7, r1, r0, asr #25
   17544:	andeq	r7, r1, r0, asr #25
   17548:	andeq	r7, r1, r0, asr #25
   1754c:	andeq	r7, r1, r0, asr #25
   17550:	andeq	r7, r1, r0, asr #25
   17554:	andeq	r7, r1, r0, asr #25
   17558:	andeq	r7, r1, r0, asr #25
   1755c:	andeq	r7, r1, r0, asr #25
   17560:	andeq	r7, r1, r0, asr #25
   17564:	andeq	r7, r1, r0, asr #25
   17568:	andeq	r7, r1, r0, asr #25
   1756c:	andeq	r7, r1, r0, asr #25
   17570:	andeq	r7, r1, r0, asr #25
   17574:	andeq	r7, r1, r0, asr #25
   17578:	andeq	r7, r1, r0, asr #25
   1757c:	andeq	r7, r1, r0, asr #25
   17580:	andeq	r7, r1, r0, asr #25
   17584:			; <UNDEFINED> instruction: 0x00017bb0
   17588:	andeq	r7, r1, r8, lsl #19
   1758c:	andeq	r7, r1, r0, asr #25
   17590:			; <UNDEFINED> instruction: 0x00017bb0
   17594:	andeq	r7, r1, r0, asr #25
   17598:			; <UNDEFINED> instruction: 0x00017bb0
   1759c:	andeq	r7, r1, r0, asr #25
   175a0:	andeq	r7, r1, r0, asr #25
   175a4:	andeq	r7, r1, r0, asr #25
   175a8:	andeq	r7, r1, r0, asr #25
   175ac:	andeq	r7, r1, r0, asr #25
   175b0:	andeq	r7, r1, r0, asr #25
   175b4:	andeq	r7, r1, r0, asr #25
   175b8:	andeq	r7, r1, r0, asr #25
   175bc:	andeq	r7, r1, r0, asr #25
   175c0:	andeq	r7, r1, r0, asr #25
   175c4:	andeq	r7, r1, r0, asr #25
   175c8:	andeq	r7, r1, r0, asr #25
   175cc:	andeq	r7, r1, r0, asr #25
   175d0:	andeq	r7, r1, r0, asr #25
   175d4:	andeq	r7, r1, r0, asr #25
   175d8:	andeq	r7, r1, r0, asr #25
   175dc:	andeq	r7, r1, r0, asr #25
   175e0:	andeq	r7, r1, r0, asr #25
   175e4:	andeq	r7, r1, r0, asr #25
   175e8:	andeq	r7, r1, r0, asr #25
   175ec:	andeq	r7, r1, r0, asr #25
   175f0:	andeq	r7, r1, r0, asr #25
   175f4:	andeq	r7, r1, r0, asr #25
   175f8:	andeq	r7, r1, r0, asr #25
   175fc:	andeq	r7, r1, r0, asr #25
   17600:	andeq	r7, r1, r0, asr #25
   17604:	andeq	r7, r1, ip, lsr #15
   17608:			; <UNDEFINED> instruction: 0x00017bb0
   1760c:	andeq	r7, r1, ip, lsr #15
   17610:	andeq	r7, r1, ip, lsl #25
   17614:	cmp	r4, #0
   17618:	moveq	r3, #1
   1761c:	streq	r3, [sp, #40]	; 0x28
   17620:	beq	17d34 <__assert_fail@plt+0x6a64>
   17624:	mov	r3, #0
   17628:	mov	r2, #1
   1762c:	mov	r4, r3
   17630:	str	r2, [sp, #36]	; 0x24
   17634:	str	r2, [sp, #44]	; 0x2c
   17638:	str	r2, [sp, #56]	; 0x38
   1763c:	str	r3, [sp, #68]	; 0x44
   17640:	movw	r3, #48016	; 0xbb90
   17644:	movt	r3, #1
   17648:	str	r4, [sp, #40]	; 0x28
   1764c:	mov	r8, #2
   17650:	str	r4, [sp, #48]	; 0x30
   17654:	str	r3, [sp, #60]	; 0x3c
   17658:	str	r4, [sp, #72]	; 0x48
   1765c:	b	17344 <__assert_fail@plt+0x6074>
   17660:	cmp	r4, #0
   17664:	bne	188b0 <__assert_fail@plt+0x75e0>
   17668:	cmp	sl, #0
   1766c:	beq	18670 <__assert_fail@plt+0x73a0>
   17670:	mov	r3, #34	; 0x22
   17674:	mov	r1, r4
   17678:	mov	r2, #1
   1767c:	strb	r3, [fp]
   17680:	movw	r3, #47996	; 0xbb7c
   17684:	movt	r3, #1
   17688:	mov	r4, r2
   1768c:	str	r2, [sp, #36]	; 0x24
   17690:	str	r2, [sp, #40]	; 0x28
   17694:	str	r1, [sp, #44]	; 0x2c
   17698:	str	r1, [sp, #48]	; 0x30
   1769c:	str	r2, [sp, #56]	; 0x38
   176a0:	str	r3, [sp, #60]	; 0x3c
   176a4:	str	r1, [sp, #68]	; 0x44
   176a8:	str	r1, [sp, #72]	; 0x48
   176ac:	b	17344 <__assert_fail@plt+0x6074>
   176b0:	mov	r3, #0
   176b4:	mov	r4, r8
   176b8:	str	r3, [sp, #40]	; 0x28
   176bc:	str	r3, [sp, #44]	; 0x2c
   176c0:	str	r3, [sp, #48]	; 0x30
   176c4:	str	r8, [sp, #56]	; 0x38
   176c8:	str	r3, [sp, #60]	; 0x3c
   176cc:	str	r3, [sp, #68]	; 0x44
   176d0:	mov	r3, #1
   176d4:	str	r3, [sp, #36]	; 0x24
   176d8:	str	r8, [sp, #72]	; 0x48
   176dc:	b	17344 <__assert_fail@plt+0x6074>
   176e0:	mov	r3, #1
   176e4:	mov	r2, #0
   176e8:	mov	r4, r2
   176ec:	mov	r8, #5
   176f0:	str	r3, [sp, #36]	; 0x24
   176f4:	str	r3, [sp, #40]	; 0x28
   176f8:	str	r3, [sp, #44]	; 0x2c
   176fc:	str	r2, [sp, #48]	; 0x30
   17700:	str	r3, [sp, #56]	; 0x38
   17704:	movw	r3, #47996	; 0xbb7c
   17708:	movt	r3, #1
   1770c:	str	r3, [sp, #60]	; 0x3c
   17710:	str	r2, [sp, #68]	; 0x44
   17714:	str	r2, [sp, #72]	; 0x48
   17718:	b	17344 <__assert_fail@plt+0x6074>
   1771c:	mov	r3, #0
   17720:	mov	r2, #1
   17724:	mov	r4, r3
   17728:	str	r2, [sp, #36]	; 0x24
   1772c:	str	r2, [sp, #40]	; 0x28
   17730:	str	r3, [sp, #44]	; 0x2c
   17734:	str	r3, [sp, #48]	; 0x30
   17738:	str	r3, [sp, #56]	; 0x38
   1773c:	str	r3, [sp, #60]	; 0x3c
   17740:	str	r3, [sp, #68]	; 0x44
   17744:	str	r3, [sp, #72]	; 0x48
   17748:	b	17344 <__assert_fail@plt+0x6074>
   1774c:	mov	r2, #1
   17750:	mov	r3, #0
   17754:	mov	r4, r3
   17758:	str	r2, [sp, #36]	; 0x24
   1775c:	str	r2, [sp, #44]	; 0x2c
   17760:	str	r8, [sp, #56]	; 0x38
   17764:	str	r3, [sp, #68]	; 0x44
   17768:	b	17640 <__assert_fail@plt+0x6370>
   1776c:	mov	r3, #1
   17770:	mov	r2, #0
   17774:	mov	r4, r2
   17778:	mov	r8, #2
   1777c:	str	r3, [sp, #36]	; 0x24
   17780:	str	r3, [sp, #40]	; 0x28
   17784:	str	r3, [sp, #44]	; 0x2c
   17788:	str	r2, [sp, #48]	; 0x30
   1778c:	str	r3, [sp, #56]	; 0x38
   17790:	movw	r3, #48016	; 0xbb90
   17794:	movt	r3, #1
   17798:	str	r3, [sp, #60]	; 0x3c
   1779c:	str	r2, [sp, #68]	; 0x44
   177a0:	str	r2, [sp, #72]	; 0x48
   177a4:	b	17344 <__assert_fail@plt+0x6074>
   177a8:	mov	r7, #0
   177ac:	ldr	r3, [sp, #28]
   177b0:	cmn	r3, #1
   177b4:	beq	1828c <__assert_fail@plt+0x6fbc>
   177b8:	ldr	r3, [sp, #28]
   177bc:	subs	r2, r3, #1
   177c0:	movne	r2, #1
   177c4:	sub	r3, fp, #2
   177c8:	cmp	r2, #0
   177cc:	clz	r3, r3
   177d0:	lsr	r3, r3, #5
   177d4:	bne	177e0 <__assert_fail@plt+0x6510>
   177d8:	cmp	r9, #0
   177dc:	beq	17fec <__assert_fail@plt+0x6d1c>
   177e0:	mov	r6, #0
   177e4:	ldr	r2, [sp, #40]	; 0x28
   177e8:	eor	r2, r2, #1
   177ec:	orrs	r3, r3, r2
   177f0:	bne	179c8 <__assert_fail@plt+0x66f8>
   177f4:	ldr	r2, [sp, #160]	; 0xa0
   177f8:	cmp	r2, #0
   177fc:	beq	1781c <__assert_fail@plt+0x654c>
   17800:	ldr	r0, [sp, #160]	; 0xa0
   17804:	ubfx	r1, r5, #5, #8
   17808:	and	r2, r5, #31
   1780c:	ldr	r1, [r0, r1, lsl #2]
   17810:	lsr	r2, r1, r2
   17814:	tst	r2, #1
   17818:	bne	17824 <__assert_fail@plt+0x6554>
   1781c:	cmp	r7, #0
   17820:	beq	17a94 <__assert_fail@plt+0x67c4>
   17824:	ldr	r2, [sp, #44]	; 0x2c
   17828:	sub	r3, fp, #2
   1782c:	clz	r3, r3
   17830:	lsr	r3, r3, #5
   17834:	cmp	r2, #0
   17838:	bne	185e0 <__assert_fail@plt+0x7310>
   1783c:	ldr	r2, [sp, #48]	; 0x30
   17840:	eor	r2, r2, #1
   17844:	ands	r3, r3, r2
   17848:	beq	17880 <__assert_fail@plt+0x65b0>
   1784c:	cmp	sl, r4
   17850:	str	r3, [sp, #48]	; 0x30
   17854:	movhi	r2, #39	; 0x27
   17858:	strbhi	r2, [r8, r4]
   1785c:	add	r2, r4, #1
   17860:	cmp	sl, r2
   17864:	movhi	r1, #36	; 0x24
   17868:	strbhi	r1, [r8, r2]
   1786c:	add	r2, r4, #2
   17870:	add	r4, r4, #3
   17874:	cmp	sl, r2
   17878:	movhi	r1, #39	; 0x27
   1787c:	strbhi	r1, [r8, r2]
   17880:	cmp	r4, sl
   17884:	add	r9, r9, #1
   17888:	movcc	r3, #92	; 0x5c
   1788c:	strbcc	r3, [r8, r4]
   17890:	add	r4, r4, #1
   17894:	cmp	r4, sl
   17898:	ldr	r3, [sp, #36]	; 0x24
   1789c:	strbcc	r5, [r8, r4]
   178a0:	cmp	r6, #0
   178a4:	add	r4, r4, #1
   178a8:	moveq	r3, #0
   178ac:	str	r3, [sp, #36]	; 0x24
   178b0:	ldr	r3, [sp, #28]
   178b4:	cmn	r3, #1
   178b8:	bne	17360 <__assert_fail@plt+0x6090>
   178bc:	ldr	r3, [sp, #32]
   178c0:	ldrb	r6, [r3, r9]
   178c4:	adds	r6, r6, #0
   178c8:	movne	r6, #1
   178cc:	cmp	r6, #0
   178d0:	bne	17374 <__assert_fail@plt+0x60a4>
   178d4:	str	fp, [sp, #152]	; 0x98
   178d8:	mov	fp, r8
   178dc:	cmp	r4, #0
   178e0:	ldr	r1, [sp, #44]	; 0x2c
   178e4:	movne	r3, #0
   178e8:	ldr	r8, [sp, #152]	; 0x98
   178ec:	sub	r2, r8, #2
   178f0:	clz	r2, r2
   178f4:	lsr	r2, r2, #5
   178f8:	andeq	r3, r2, r1
   178fc:	cmp	r3, #0
   17900:	bne	189bc <__assert_fail@plt+0x76ec>
   17904:	eor	r3, r1, #1
   17908:	ands	r2, r2, r3
   1790c:	beq	188e8 <__assert_fail@plt+0x7618>
   17910:	ldr	r3, [sp, #68]	; 0x44
   17914:	cmp	r3, #0
   17918:	beq	188ec <__assert_fail@plt+0x761c>
   1791c:	ldr	r3, [sp, #36]	; 0x24
   17920:	cmp	r3, #0
   17924:	bne	18978 <__assert_fail@plt+0x76a8>
   17928:	ldr	r3, [sp, #72]	; 0x48
   1792c:	adds	r3, r3, #0
   17930:	movne	r3, #1
   17934:	cmp	sl, #0
   17938:	movne	r3, #0
   1793c:	cmp	r3, #0
   17940:	ldreq	r2, [sp, #68]	; 0x44
   17944:	beq	188ec <__assert_fail@plt+0x761c>
   17948:	ldr	r2, [sp, #72]	; 0x48
   1794c:	str	r3, [sp, #68]	; 0x44
   17950:	movw	r3, #48016	; 0xbb90
   17954:	movt	r3, #1
   17958:	mov	r1, #39	; 0x27
   1795c:	mov	r4, #1
   17960:	ldr	sl, [sp, #72]	; 0x48
   17964:	mov	r8, #2
   17968:	str	r3, [sp, #60]	; 0x3c
   1796c:	mov	r3, #0
   17970:	strb	r1, [fp]
   17974:	str	r3, [sp, #44]	; 0x2c
   17978:	str	r4, [sp, #56]	; 0x38
   1797c:	str	r2, [sp, #72]	; 0x48
   17980:	b	17344 <__assert_fail@plt+0x6074>
   17984:	mov	r7, #0
   17988:	cmp	fp, #2
   1798c:	beq	1826c <__assert_fail@plt+0x6f9c>
   17990:	ldr	r2, [sp, #40]	; 0x28
   17994:	ldr	r3, [sp, #56]	; 0x38
   17998:	ldr	r1, [sp, #44]	; 0x2c
   1799c:	cmp	r3, #0
   179a0:	moveq	r3, #0
   179a4:	andne	r3, r2, r1
   179a8:	cmp	r3, #0
   179ac:	moveq	r5, #92	; 0x5c
   179b0:	moveq	r3, r5
   179b4:	bne	18278 <__assert_fail@plt+0x6fa8>
   179b8:	ldr	r2, [sp, #40]	; 0x28
   179bc:	cmp	r2, #0
   179c0:	bne	186b4 <__assert_fail@plt+0x73e4>
   179c4:	mov	r6, #0
   179c8:	ldr	r3, [sp, #44]	; 0x2c
   179cc:	cmp	r3, #0
   179d0:	beq	18264 <__assert_fail@plt+0x6f94>
   179d4:	mov	r3, #0
   179d8:	b	177f4 <__assert_fail@plt+0x6524>
   179dc:	mov	r7, #0
   179e0:	cmp	fp, #2
   179e4:	beq	182dc <__assert_fail@plt+0x700c>
   179e8:	cmp	fp, #5
   179ec:	beq	182a0 <__assert_fail@plt+0x6fd0>
   179f0:	sub	r3, fp, #2
   179f4:	mov	r6, #0
   179f8:	clz	r3, r3
   179fc:	mov	r5, #63	; 0x3f
   17a00:	lsr	r3, r3, #5
   17a04:	b	177e4 <__assert_fail@plt+0x6514>
   17a08:	mov	r7, #0
   17a0c:	cmp	fp, #2
   17a10:	movne	r3, #0
   17a14:	movne	r5, #39	; 0x27
   17a18:	strne	r6, [sp, #68]	; 0x44
   17a1c:	bne	177e4 <__assert_fail@plt+0x6514>
   17a20:	ldr	r3, [sp, #44]	; 0x2c
   17a24:	cmp	r3, #0
   17a28:	bne	186e4 <__assert_fail@plt+0x7414>
   17a2c:	ldr	r3, [sp, #72]	; 0x48
   17a30:	cmp	sl, #0
   17a34:	clz	r3, r3
   17a38:	lsr	r3, r3, #5
   17a3c:	moveq	r3, #0
   17a40:	cmp	r3, #0
   17a44:	bne	18610 <__assert_fail@plt+0x7340>
   17a48:	cmp	sl, r4
   17a4c:	movhi	r3, #39	; 0x27
   17a50:	strbhi	r3, [r8, r4]
   17a54:	add	r3, r4, #1
   17a58:	cmp	sl, r3
   17a5c:	movhi	r2, #92	; 0x5c
   17a60:	strbhi	r2, [r8, r3]
   17a64:	add	r3, r4, #2
   17a68:	cmp	sl, r3
   17a6c:	bls	17a78 <__assert_fail@plt+0x67a8>
   17a70:	mov	r2, #39	; 0x27
   17a74:	strb	r2, [r8, r3]
   17a78:	mov	r3, #0
   17a7c:	cmp	r7, #0
   17a80:	add	r4, r4, #3
   17a84:	mov	r5, #39	; 0x27
   17a88:	str	r3, [sp, #48]	; 0x30
   17a8c:	str	r6, [sp, #68]	; 0x44
   17a90:	bne	17824 <__assert_fail@plt+0x6554>
   17a94:	ldr	r2, [sp, #48]	; 0x30
   17a98:	eor	r3, r3, #1
   17a9c:	add	r9, r9, #1
   17aa0:	and	r3, r3, r2
   17aa4:	uxtb	r3, r3
   17aa8:	cmp	r3, #0
   17aac:	beq	17894 <__assert_fail@plt+0x65c4>
   17ab0:	cmp	sl, r4
   17ab4:	movhi	r3, #39	; 0x27
   17ab8:	strbhi	r3, [r8, r4]
   17abc:	add	r3, r4, #1
   17ac0:	add	r4, r4, #2
   17ac4:	cmp	sl, r3
   17ac8:	movhi	r2, #39	; 0x27
   17acc:	strbhi	r2, [r8, r3]
   17ad0:	mov	r3, #0
   17ad4:	str	r3, [sp, #48]	; 0x30
   17ad8:	b	17894 <__assert_fail@plt+0x65c4>
   17adc:	mov	r3, #118	; 0x76
   17ae0:	b	179b8 <__assert_fail@plt+0x66e8>
   17ae4:	mov	r3, #116	; 0x74
   17ae8:	ldr	r2, [sp, #44]	; 0x2c
   17aec:	cmp	fp, #2
   17af0:	movne	r2, #0
   17af4:	andeq	r2, r2, #1
   17af8:	cmp	r2, #0
   17afc:	beq	179b8 <__assert_fail@plt+0x66e8>
   17b00:	mov	fp, r8
   17b04:	mov	r8, #2
   17b08:	ldr	r3, [sp, #40]	; 0x28
   17b0c:	cmp	r3, #0
   17b10:	movne	r8, #4
   17b14:	mov	lr, #0
   17b18:	mov	r0, fp
   17b1c:	ldr	r2, [sp, #32]
   17b20:	ldr	r3, [sp, #156]	; 0x9c
   17b24:	ldr	r1, [sp, #164]	; 0xa4
   17b28:	bic	ip, r3, #2
   17b2c:	ldr	r3, [sp, #28]
   17b30:	stm	sp, {r8, ip, lr}
   17b34:	ldr	ip, [sp, #168]	; 0xa8
   17b38:	str	r1, [sp, #12]
   17b3c:	mov	r1, sl
   17b40:	str	ip, [sp, #16]
   17b44:	bl	1725c <__assert_fail@plt+0x5f8c>
   17b48:	mov	r4, r0
   17b4c:	mov	r0, r4
   17b50:	add	sp, sp, #116	; 0x74
   17b54:	ldrd	r4, [sp]
   17b58:	ldrd	r6, [sp, #8]
   17b5c:	ldrd	r8, [sp, #16]
   17b60:	ldrd	sl, [sp, #24]
   17b64:	add	sp, sp, #32
   17b68:	pop	{pc}		; (ldr pc, [sp], #4)
   17b6c:	mov	r5, #102	; 0x66
   17b70:	ldr	r2, [sp, #44]	; 0x2c
   17b74:	sub	r3, fp, #2
   17b78:	clz	r3, r3
   17b7c:	lsr	r3, r3, #5
   17b80:	cmp	r2, #0
   17b84:	bne	185e0 <__assert_fail@plt+0x7310>
   17b88:	mov	r6, r2
   17b8c:	b	17880 <__assert_fail@plt+0x65b0>
   17b90:	mov	r5, #110	; 0x6e
   17b94:	mov	r6, #0
   17b98:	b	17824 <__assert_fail@plt+0x6554>
   17b9c:	mov	r5, #98	; 0x62
   17ba0:	b	17b70 <__assert_fail@plt+0x68a0>
   17ba4:	mov	r5, #97	; 0x61
   17ba8:	b	17b70 <__assert_fail@plt+0x68a0>
   17bac:	mov	r7, #0
   17bb0:	mov	r6, #0
   17bb4:	b	179d4 <__assert_fail@plt+0x6704>
   17bb8:	mov	r5, #114	; 0x72
   17bbc:	b	17b94 <__assert_fail@plt+0x68c4>
   17bc0:	ldr	r3, [sp, #44]	; 0x2c
   17bc4:	cmp	r3, #0
   17bc8:	bne	18958 <__assert_fail@plt+0x7688>
   17bcc:	mov	r7, r3
   17bd0:	ldr	r3, [sp, #48]	; 0x30
   17bd4:	sub	r2, fp, #2
   17bd8:	clz	r2, r2
   17bdc:	lsr	r2, r2, #5
   17be0:	eor	r3, r3, #1
   17be4:	ands	r3, r2, r3
   17be8:	beq	185fc <__assert_fail@plt+0x732c>
   17bec:	cmp	sl, r4
   17bf0:	movhi	r1, #39	; 0x27
   17bf4:	strbhi	r1, [r8, r4]
   17bf8:	add	r1, r4, #1
   17bfc:	cmp	sl, r1
   17c00:	movhi	r0, #36	; 0x24
   17c04:	strbhi	r0, [r8, r1]
   17c08:	add	r1, r4, #2
   17c0c:	cmp	sl, r1
   17c10:	movhi	r0, #39	; 0x27
   17c14:	strbhi	r0, [r8, r1]
   17c18:	add	r1, r4, #3
   17c1c:	cmp	sl, r1
   17c20:	bls	18654 <__assert_fail@plt+0x7384>
   17c24:	mov	r4, r1
   17c28:	mov	r1, #92	; 0x5c
   17c2c:	mov	r0, r4
   17c30:	str	r3, [sp, #48]	; 0x30
   17c34:	strb	r1, [r8, r4]
   17c38:	cmp	fp, #2
   17c3c:	add	r4, r4, #1
   17c40:	beq	186a4 <__assert_fail@plt+0x73d4>
   17c44:	ldr	r1, [sp, #28]
   17c48:	add	r3, r9, #1
   17c4c:	cmp	r3, r1
   17c50:	bcs	17c68 <__assert_fail@plt+0x6998>
   17c54:	ldr	r1, [sp, #32]
   17c58:	ldrb	r3, [r1, r3]
   17c5c:	sub	r3, r3, #48	; 0x30
   17c60:	cmp	r3, #9
   17c64:	bls	186bc <__assert_fail@plt+0x73ec>
   17c68:	mov	r5, #48	; 0x30
   17c6c:	ldr	r3, [sp, #40]	; 0x28
   17c70:	eor	r3, r3, #1
   17c74:	orrs	r2, r2, r3
   17c78:	mov	r3, r6
   17c7c:	moveq	r6, r2
   17c80:	beq	177f4 <__assert_fail@plt+0x6524>
   17c84:	mov	r6, #0
   17c88:	b	1781c <__assert_fail@plt+0x654c>
   17c8c:	cmp	r9, #0
   17c90:	mov	r2, r7
   17c94:	bne	18234 <__assert_fail@plt+0x6f64>
   17c98:	mov	r6, r7
   17c9c:	mov	r3, r9
   17ca0:	mov	r7, r2
   17ca4:	b	177e4 <__assert_fail@plt+0x6514>
   17ca8:	mov	r2, r7
   17cac:	mov	r6, r7
   17cb0:	mov	r3, #0
   17cb4:	mov	r7, r2
   17cb8:	mov	r5, #32
   17cbc:	b	177e4 <__assert_fail@plt+0x6514>
   17cc0:	mov	r6, r7
   17cc4:	b	179d4 <__assert_fail@plt+0x6704>
   17cc8:	mov	r7, #0
   17ccc:	ldr	r3, [sp, #64]	; 0x40
   17cd0:	cmp	r3, #1
   17cd4:	bne	182f4 <__assert_fail@plt+0x7024>
   17cd8:	bl	11150 <__ctype_b_loc@plt>
   17cdc:	ldr	r2, [r0]
   17ce0:	sxth	r3, r5
   17ce4:	lsl	r3, r3, #1
   17ce8:	ldr	r1, [sp, #64]	; 0x40
   17cec:	ldrh	r3, [r2, r3]
   17cf0:	mov	ip, r1
   17cf4:	and	r3, r3, #16384	; 0x4000
   17cf8:	cmp	r3, #0
   17cfc:	ldr	r3, [sp, #40]	; 0x28
   17d00:	movne	r6, #1
   17d04:	moveq	r6, #0
   17d08:	movne	r2, #0
   17d0c:	andeq	r2, r3, #1
   17d10:	cmp	r2, #0
   17d14:	bne	1863c <__assert_fail@plt+0x736c>
   17d18:	sub	r3, fp, #2
   17d1c:	clz	r3, r3
   17d20:	lsr	r3, r3, #5
   17d24:	b	177e4 <__assert_fail@plt+0x6514>
   17d28:	cmp	r4, #0
   17d2c:	bne	189cc <__assert_fail@plt+0x76fc>
   17d30:	str	r4, [sp, #40]	; 0x28
   17d34:	cmp	sl, #0
   17d38:	bne	189fc <__assert_fail@plt+0x772c>
   17d3c:	mov	r3, #1
   17d40:	movw	r2, #48016	; 0xbb90
   17d44:	movt	r2, #1
   17d48:	mov	r4, r3
   17d4c:	mov	r8, #2
   17d50:	str	r3, [sp, #36]	; 0x24
   17d54:	str	sl, [sp, #44]	; 0x2c
   17d58:	str	sl, [sp, #48]	; 0x30
   17d5c:	str	r3, [sp, #56]	; 0x38
   17d60:	str	r2, [sp, #60]	; 0x3c
   17d64:	str	sl, [sp, #68]	; 0x44
   17d68:	str	sl, [sp, #72]	; 0x48
   17d6c:	b	17344 <__assert_fail@plt+0x6074>
   17d70:	ldr	r3, [sp, #32]
   17d74:	ldrb	r5, [r3, r9]
   17d78:	cmp	r5, #126	; 0x7e
   17d7c:	ldrls	pc, [pc, r5, lsl #2]
   17d80:	b	17ccc <__assert_fail@plt+0x69fc>
   17d84:	andeq	r7, r1, r8, lsr #31
   17d88:	andeq	r7, r1, ip, asr #25
   17d8c:	andeq	r7, r1, ip, asr #25
   17d90:	andeq	r7, r1, ip, asr #25
   17d94:	andeq	r7, r1, ip, asr #25
   17d98:	andeq	r7, r1, ip, asr #25
   17d9c:	andeq	r7, r1, ip, asr #25
   17da0:	andeq	r7, r1, r0, lsr #31
   17da4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17da8:	andeq	r7, r1, r4, ror #21
   17dac:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   17db0:	ldrdeq	r7, [r1], -ip
   17db4:	andeq	r7, r1, r8, lsl #31
   17db8:	andeq	r7, r1, r0, lsl #31
   17dbc:	andeq	r7, r1, ip, asr #25
   17dc0:	andeq	r7, r1, ip, asr #25
   17dc4:	andeq	r7, r1, ip, asr #25
   17dc8:	andeq	r7, r1, ip, asr #25
   17dcc:	andeq	r7, r1, ip, asr #25
   17dd0:	andeq	r7, r1, ip, asr #25
   17dd4:	andeq	r7, r1, ip, asr #25
   17dd8:	andeq	r7, r1, ip, asr #25
   17ddc:	andeq	r7, r1, ip, asr #25
   17de0:	andeq	r7, r1, ip, asr #25
   17de4:	andeq	r7, r1, ip, asr #25
   17de8:	andeq	r7, r1, ip, asr #25
   17dec:	andeq	r7, r1, ip, asr #25
   17df0:	andeq	r7, r1, ip, asr #25
   17df4:	andeq	r7, r1, ip, asr #25
   17df8:	andeq	r7, r1, ip, asr #25
   17dfc:	andeq	r7, r1, ip, asr #25
   17e00:	andeq	r7, r1, ip, asr #25
   17e04:	strdeq	r7, [r1], -ip
   17e08:	ldrdeq	r7, [r1], -ip
   17e0c:	ldrdeq	r7, [r1], -ip
   17e10:	andeq	r7, r1, ip, asr #31
   17e14:	ldrdeq	r7, [r1], -ip
   17e18:	andeq	r7, r1, r8, lsl sp
   17e1c:	ldrdeq	r7, [r1], -ip
   17e20:	andeq	r7, r1, ip, lsl #20
   17e24:	ldrdeq	r7, [r1], -ip
   17e28:	ldrdeq	r7, [r1], -ip
   17e2c:	ldrdeq	r7, [r1], -ip
   17e30:	andeq	r7, r1, r8, lsl sp
   17e34:	andeq	r7, r1, r8, lsl sp
   17e38:	andeq	r7, r1, r8, lsl sp
   17e3c:	andeq	r7, r1, r8, lsl sp
   17e40:	andeq	r7, r1, r8, lsl sp
   17e44:	andeq	r7, r1, r8, lsl sp
   17e48:	andeq	r7, r1, r8, lsl sp
   17e4c:	andeq	r7, r1, r8, lsl sp
   17e50:	andeq	r7, r1, r8, lsl sp
   17e54:	andeq	r7, r1, r8, lsl sp
   17e58:	andeq	r7, r1, r8, lsl sp
   17e5c:	andeq	r7, r1, r8, lsl sp
   17e60:	andeq	r7, r1, r8, lsl sp
   17e64:	andeq	r7, r1, r8, lsl sp
   17e68:	andeq	r7, r1, r8, lsl sp
   17e6c:	andeq	r7, r1, r8, lsl sp
   17e70:	ldrdeq	r7, [r1], -ip
   17e74:	ldrdeq	r7, [r1], -ip
   17e78:	ldrdeq	r7, [r1], -ip
   17e7c:	ldrdeq	r7, [r1], -ip
   17e80:	andeq	r7, r1, r0, ror #19
   17e84:	andeq	r7, r1, ip, asr #25
   17e88:	andeq	r7, r1, r8, lsl sp
   17e8c:	andeq	r7, r1, r8, lsl sp
   17e90:	andeq	r7, r1, r8, lsl sp
   17e94:	andeq	r7, r1, r8, lsl sp
   17e98:	andeq	r7, r1, r8, lsl sp
   17e9c:	andeq	r7, r1, r8, lsl sp
   17ea0:	andeq	r7, r1, r8, lsl sp
   17ea4:	andeq	r7, r1, r8, lsl sp
   17ea8:	andeq	r7, r1, r8, lsl sp
   17eac:	andeq	r7, r1, r8, lsl sp
   17eb0:	andeq	r7, r1, r8, lsl sp
   17eb4:	andeq	r7, r1, r8, lsl sp
   17eb8:	andeq	r7, r1, r8, lsl sp
   17ebc:	andeq	r7, r1, r8, lsl sp
   17ec0:	andeq	r7, r1, r8, lsl sp
   17ec4:	andeq	r7, r1, r8, lsl sp
   17ec8:	andeq	r7, r1, r8, lsl sp
   17ecc:	andeq	r7, r1, r8, lsl sp
   17ed0:	andeq	r7, r1, r8, lsl sp
   17ed4:	andeq	r7, r1, r8, lsl sp
   17ed8:	andeq	r7, r1, r8, lsl sp
   17edc:	andeq	r7, r1, r8, lsl sp
   17ee0:	andeq	r7, r1, r8, lsl sp
   17ee4:	andeq	r7, r1, r8, lsl sp
   17ee8:	andeq	r7, r1, r8, lsl sp
   17eec:	andeq	r7, r1, r8, lsl sp
   17ef0:	ldrdeq	r7, [r1], -ip
   17ef4:	andeq	r7, r1, r8, lsl #19
   17ef8:	andeq	r7, r1, r8, lsl sp
   17efc:	ldrdeq	r7, [r1], -ip
   17f00:	andeq	r7, r1, r8, lsl sp
   17f04:	ldrdeq	r7, [r1], -ip
   17f08:	andeq	r7, r1, r8, lsl sp
   17f0c:	andeq	r7, r1, r8, lsl sp
   17f10:	andeq	r7, r1, r8, lsl sp
   17f14:	andeq	r7, r1, r8, lsl sp
   17f18:	andeq	r7, r1, r8, lsl sp
   17f1c:	andeq	r7, r1, r8, lsl sp
   17f20:	andeq	r7, r1, r8, lsl sp
   17f24:	andeq	r7, r1, r8, lsl sp
   17f28:	andeq	r7, r1, r8, lsl sp
   17f2c:	andeq	r7, r1, r8, lsl sp
   17f30:	andeq	r7, r1, r8, lsl sp
   17f34:	andeq	r7, r1, r8, lsl sp
   17f38:	andeq	r7, r1, r8, lsl sp
   17f3c:	andeq	r7, r1, r8, lsl sp
   17f40:	andeq	r7, r1, r8, lsl sp
   17f44:	andeq	r7, r1, r8, lsl sp
   17f48:	andeq	r7, r1, r8, lsl sp
   17f4c:	andeq	r7, r1, r8, lsl sp
   17f50:	andeq	r7, r1, r8, lsl sp
   17f54:	andeq	r7, r1, r8, lsl sp
   17f58:	andeq	r7, r1, r8, lsl sp
   17f5c:	andeq	r7, r1, r8, lsl sp
   17f60:	andeq	r7, r1, r8, lsl sp
   17f64:	andeq	r7, r1, r8, lsl sp
   17f68:	andeq	r7, r1, r8, lsl sp
   17f6c:	andeq	r7, r1, r8, lsl sp
   17f70:	andeq	r7, r1, ip, lsr #15
   17f74:	ldrdeq	r7, [r1], -ip
   17f78:	andeq	r7, r1, ip, lsr #15
   17f7c:	andeq	r7, r1, ip, asr #31
   17f80:	mov	r3, #114	; 0x72
   17f84:	b	17ae8 <__assert_fail@plt+0x6818>
   17f88:	mov	r3, #102	; 0x66
   17f8c:	b	179b8 <__assert_fail@plt+0x66e8>
   17f90:	mov	r3, #110	; 0x6e
   17f94:	b	17ae8 <__assert_fail@plt+0x6818>
   17f98:	mov	r3, #98	; 0x62
   17f9c:	b	179b8 <__assert_fail@plt+0x66e8>
   17fa0:	mov	r3, #97	; 0x61
   17fa4:	b	179b8 <__assert_fail@plt+0x66e8>
   17fa8:	ldr	r3, [sp, #40]	; 0x28
   17fac:	cmp	r3, #0
   17fb0:	bne	17bc0 <__assert_fail@plt+0x68f0>
   17fb4:	ldr	r3, [sp, #156]	; 0x9c
   17fb8:	tst	r3, #1
   17fbc:	addne	r9, r9, #1
   17fc0:	bne	17354 <__assert_fail@plt+0x6084>
   17fc4:	ldr	r7, [sp, #40]	; 0x28
   17fc8:	b	179c4 <__assert_fail@plt+0x66f4>
   17fcc:	sub	r3, fp, #2
   17fd0:	clz	r3, r3
   17fd4:	lsr	r3, r3, #5
   17fd8:	b	177d8 <__assert_fail@plt+0x6508>
   17fdc:	sub	r3, fp, #2
   17fe0:	mov	r6, #0
   17fe4:	clz	r3, r3
   17fe8:	lsr	r3, r3, #5
   17fec:	ldr	r2, [sp, #44]	; 0x2c
   17ff0:	tst	r2, r3
   17ff4:	beq	177e4 <__assert_fail@plt+0x6514>
   17ff8:	b	17b00 <__assert_fail@plt+0x6830>
   17ffc:	sub	r3, fp, #2
   18000:	clz	r3, r3
   18004:	lsr	r3, r3, #5
   18008:	b	17fec <__assert_fail@plt+0x6d1c>
   1800c:	ldr	r3, [sp, #52]	; 0x34
   18010:	ldrb	r5, [r3]
   18014:	cmp	r5, #126	; 0x7e
   18018:	ldrls	pc, [pc, r5, lsl #2]
   1801c:	b	17cc8 <__assert_fail@plt+0x69f8>
   18020:	andeq	r7, r1, r0, asr #23
   18024:	andeq	r7, r1, r8, asr #25
   18028:	andeq	r7, r1, r8, asr #25
   1802c:	andeq	r7, r1, r8, asr #25
   18030:	andeq	r7, r1, r8, asr #25
   18034:	andeq	r7, r1, r8, asr #25
   18038:	andeq	r7, r1, r8, asr #25
   1803c:	andeq	r7, r1, r4, lsr #23
   18040:	muleq	r1, ip, fp
   18044:	andeq	r8, r1, r8, asr r2
   18048:	muleq	r1, r0, fp
   1804c:	andeq	r8, r1, ip, asr #4
   18050:	andeq	r7, r1, ip, ror #22
   18054:			; <UNDEFINED> instruction: 0x00017bb8
   18058:	andeq	r7, r1, r8, asr #25
   1805c:	andeq	r7, r1, r8, asr #25
   18060:	andeq	r7, r1, r8, asr #25
   18064:	andeq	r7, r1, r8, asr #25
   18068:	andeq	r7, r1, r8, asr #25
   1806c:	andeq	r7, r1, r8, asr #25
   18070:	andeq	r7, r1, r8, asr #25
   18074:	andeq	r7, r1, r8, asr #25
   18078:	andeq	r7, r1, r8, asr #25
   1807c:	andeq	r7, r1, r8, asr #25
   18080:	andeq	r7, r1, r8, asr #25
   18084:	andeq	r7, r1, r8, asr #25
   18088:	andeq	r7, r1, r8, asr #25
   1808c:	andeq	r7, r1, r8, asr #25
   18090:	andeq	r7, r1, r8, asr #25
   18094:	andeq	r7, r1, r8, asr #25
   18098:	andeq	r7, r1, r8, asr #25
   1809c:	andeq	r7, r1, r8, asr #25
   180a0:	andeq	r8, r1, r4, asr #4
   180a4:	andeq	r7, r1, ip, lsr #23
   180a8:	andeq	r7, r1, ip, lsr #23
   180ac:	andeq	r8, r1, r8, lsr #4
   180b0:	andeq	r7, r1, ip, lsr #23
   180b4:	andeq	r8, r1, ip, lsl r2
   180b8:	andeq	r7, r1, ip, lsr #23
   180bc:	andeq	r7, r1, r8, lsl #20
   180c0:	andeq	r7, r1, ip, lsr #23
   180c4:	andeq	r7, r1, ip, lsr #23
   180c8:	andeq	r7, r1, ip, lsr #23
   180cc:	andeq	r8, r1, ip, lsl r2
   180d0:	andeq	r8, r1, ip, lsl r2
   180d4:	andeq	r8, r1, ip, lsl r2
   180d8:	andeq	r8, r1, ip, lsl r2
   180dc:	andeq	r8, r1, ip, lsl r2
   180e0:	andeq	r8, r1, ip, lsl r2
   180e4:	andeq	r8, r1, ip, lsl r2
   180e8:	andeq	r8, r1, ip, lsl r2
   180ec:	andeq	r8, r1, ip, lsl r2
   180f0:	andeq	r8, r1, ip, lsl r2
   180f4:	andeq	r8, r1, ip, lsl r2
   180f8:	andeq	r8, r1, ip, lsl r2
   180fc:	andeq	r8, r1, ip, lsl r2
   18100:	andeq	r8, r1, ip, lsl r2
   18104:	andeq	r8, r1, ip, lsl r2
   18108:	andeq	r8, r1, ip, lsl r2
   1810c:	andeq	r7, r1, ip, lsr #23
   18110:	andeq	r7, r1, ip, lsr #23
   18114:	andeq	r7, r1, ip, lsr #23
   18118:	andeq	r7, r1, ip, lsr #23
   1811c:	ldrdeq	r7, [r1], -ip
   18120:	andeq	r7, r1, r8, asr #25
   18124:	andeq	r8, r1, ip, lsl r2
   18128:	andeq	r8, r1, ip, lsl r2
   1812c:	andeq	r8, r1, ip, lsl r2
   18130:	andeq	r8, r1, ip, lsl r2
   18134:	andeq	r8, r1, ip, lsl r2
   18138:	andeq	r8, r1, ip, lsl r2
   1813c:	andeq	r8, r1, ip, lsl r2
   18140:	andeq	r8, r1, ip, lsl r2
   18144:	andeq	r8, r1, ip, lsl r2
   18148:	andeq	r8, r1, ip, lsl r2
   1814c:	andeq	r8, r1, ip, lsl r2
   18150:	andeq	r8, r1, ip, lsl r2
   18154:	andeq	r8, r1, ip, lsl r2
   18158:	andeq	r8, r1, ip, lsl r2
   1815c:	andeq	r8, r1, ip, lsl r2
   18160:	andeq	r8, r1, ip, lsl r2
   18164:	andeq	r8, r1, ip, lsl r2
   18168:	andeq	r8, r1, ip, lsl r2
   1816c:	andeq	r8, r1, ip, lsl r2
   18170:	andeq	r8, r1, ip, lsl r2
   18174:	andeq	r8, r1, ip, lsl r2
   18178:	andeq	r8, r1, ip, lsl r2
   1817c:	andeq	r8, r1, ip, lsl r2
   18180:	andeq	r8, r1, ip, lsl r2
   18184:	andeq	r8, r1, ip, lsl r2
   18188:	andeq	r8, r1, ip, lsl r2
   1818c:	andeq	r7, r1, ip, lsr #23
   18190:	andeq	r7, r1, r4, lsl #19
   18194:	andeq	r8, r1, ip, lsl r2
   18198:	andeq	r7, r1, ip, lsr #23
   1819c:	andeq	r8, r1, ip, lsl r2
   181a0:	andeq	r7, r1, ip, lsr #23
   181a4:	andeq	r8, r1, ip, lsl r2
   181a8:	andeq	r8, r1, ip, lsl r2
   181ac:	andeq	r8, r1, ip, lsl r2
   181b0:	andeq	r8, r1, ip, lsl r2
   181b4:	andeq	r8, r1, ip, lsl r2
   181b8:	andeq	r8, r1, ip, lsl r2
   181bc:	andeq	r8, r1, ip, lsl r2
   181c0:	andeq	r8, r1, ip, lsl r2
   181c4:	andeq	r8, r1, ip, lsl r2
   181c8:	andeq	r8, r1, ip, lsl r2
   181cc:	andeq	r8, r1, ip, lsl r2
   181d0:	andeq	r8, r1, ip, lsl r2
   181d4:	andeq	r8, r1, ip, lsl r2
   181d8:	andeq	r8, r1, ip, lsl r2
   181dc:	andeq	r8, r1, ip, lsl r2
   181e0:	andeq	r8, r1, ip, lsl r2
   181e4:	andeq	r8, r1, ip, lsl r2
   181e8:	andeq	r8, r1, ip, lsl r2
   181ec:	andeq	r8, r1, ip, lsl r2
   181f0:	andeq	r8, r1, ip, lsl r2
   181f4:	andeq	r8, r1, ip, lsl r2
   181f8:	andeq	r8, r1, ip, lsl r2
   181fc:	andeq	r8, r1, ip, lsl r2
   18200:	andeq	r8, r1, ip, lsl r2
   18204:	andeq	r8, r1, ip, lsl r2
   18208:	andeq	r8, r1, ip, lsl r2
   1820c:	andeq	r7, r1, r8, lsr #15
   18210:	andeq	r7, r1, ip, lsr #23
   18214:	andeq	r7, r1, r8, lsr #15
   18218:	andeq	r8, r1, r8, lsr #4
   1821c:	mov	r6, r7
   18220:	mov	r7, #0
   18224:	b	179d4 <__assert_fail@plt+0x6704>
   18228:	cmp	r9, #0
   1822c:	mov	r2, #0
   18230:	beq	17c98 <__assert_fail@plt+0x69c8>
   18234:	mov	r6, #0
   18238:	mov	r7, r2
   1823c:	mov	r3, r6
   18240:	b	177f4 <__assert_fail@plt+0x6524>
   18244:	mov	r2, #0
   18248:	b	17cac <__assert_fail@plt+0x69dc>
   1824c:	mov	r7, #0
   18250:	mov	r3, #118	; 0x76
   18254:	b	179b8 <__assert_fail@plt+0x66e8>
   18258:	mov	r7, #0
   1825c:	mov	r3, #116	; 0x74
   18260:	b	17ae8 <__assert_fail@plt+0x6818>
   18264:	ldr	r3, [sp, #44]	; 0x2c
   18268:	b	1781c <__assert_fail@plt+0x654c>
   1826c:	ldr	r3, [sp, #44]	; 0x2c
   18270:	cmp	r3, #0
   18274:	bne	186e4 <__assert_fail@plt+0x7414>
   18278:	add	r9, r9, #1
   1827c:	mov	r6, #0
   18280:	ldr	r3, [sp, #48]	; 0x30
   18284:	mov	r5, #92	; 0x5c
   18288:	b	17aa8 <__assert_fail@plt+0x67d8>
   1828c:	ldr	r3, [sp, #32]
   18290:	ldrb	r2, [r3, #1]
   18294:	adds	r2, r2, #0
   18298:	movne	r2, #1
   1829c:	b	177c4 <__assert_fail@plt+0x64f4>
   182a0:	ldr	r3, [sp, #156]	; 0x9c
   182a4:	ands	r3, r3, #4
   182a8:	beq	182d0 <__assert_fail@plt+0x7000>
   182ac:	ldr	r2, [sp, #28]
   182b0:	add	r3, r9, #2
   182b4:	cmp	r3, r2
   182b8:	bcs	182cc <__assert_fail@plt+0x6ffc>
   182bc:	ldr	r2, [sp, #52]	; 0x34
   182c0:	ldrb	r5, [r2, #1]
   182c4:	cmp	r5, #63	; 0x3f
   182c8:	beq	18748 <__assert_fail@plt+0x7478>
   182cc:	mov	r3, #0
   182d0:	mov	r5, #63	; 0x3f
   182d4:	mov	r6, r3
   182d8:	b	177e4 <__assert_fail@plt+0x6514>
   182dc:	ldr	r3, [sp, #44]	; 0x2c
   182e0:	cmp	r3, #0
   182e4:	bne	186e4 <__assert_fail@plt+0x7414>
   182e8:	mov	r6, r3
   182ec:	mov	r5, #63	; 0x3f
   182f0:	b	1781c <__assert_fail@plt+0x654c>
   182f4:	ldr	r1, [sp, #28]
   182f8:	mov	r2, #0
   182fc:	mov	r3, #0
   18300:	strd	r2, [sp, #104]	; 0x68
   18304:	cmn	r1, #1
   18308:	bne	18318 <__assert_fail@plt+0x7048>
   1830c:	ldr	r0, [sp, #32]
   18310:	bl	11168 <strlen@plt>
   18314:	str	r0, [sp, #28]
   18318:	str	r8, [sp, #76]	; 0x4c
   1831c:	mov	r3, #0
   18320:	str	sl, [sp, #80]	; 0x50
   18324:	ldr	sl, [sp, #32]
   18328:	str	r5, [sp, #84]	; 0x54
   1832c:	mov	r5, r3
   18330:	ldr	r8, [sp, #44]	; 0x2c
   18334:	str	r7, [sp, #88]	; 0x58
   18338:	str	r4, [sp, #92]	; 0x5c
   1833c:	ldr	r2, [sp, #28]
   18340:	add	r4, r9, r5
   18344:	add	r3, sp, #104	; 0x68
   18348:	add	r7, sl, r4
   1834c:	add	r0, sp, #100	; 0x64
   18350:	mov	r1, r7
   18354:	sub	r2, r2, r4
   18358:	bl	1a534 <__assert_fail@plt+0x9264>
   1835c:	subs	r1, r0, #0
   18360:	beq	183ac <__assert_fail@plt+0x70dc>
   18364:	cmn	r1, #1
   18368:	beq	18724 <__assert_fail@plt+0x7454>
   1836c:	cmn	r1, #2
   18370:	beq	18844 <__assert_fail@plt+0x7574>
   18374:	cmp	fp, #2
   18378:	movne	r3, #0
   1837c:	andeq	r3, r8, #1
   18380:	cmp	r3, #0
   18384:	bne	18510 <__assert_fail@plt+0x7240>
   18388:	ldr	r0, [sp, #100]	; 0x64
   1838c:	add	r5, r5, r1
   18390:	bl	1109c <iswprint@plt>
   18394:	cmp	r0, #0
   18398:	add	r0, sp, #104	; 0x68
   1839c:	moveq	r6, #0
   183a0:	bl	1103c <mbsinit@plt>
   183a4:	cmp	r0, #0
   183a8:	beq	1833c <__assert_fail@plt+0x706c>
   183ac:	ldr	r3, [sp, #40]	; 0x28
   183b0:	mov	ip, r5
   183b4:	eor	r2, r6, #1
   183b8:	ldr	r8, [sp, #76]	; 0x4c
   183bc:	ldr	sl, [sp, #80]	; 0x50
   183c0:	and	r2, r2, r3
   183c4:	ldr	r5, [sp, #84]	; 0x54
   183c8:	ldr	r7, [sp, #88]	; 0x58
   183cc:	ldr	r4, [sp, #92]	; 0x5c
   183d0:	cmp	ip, #1
   183d4:	bls	17d10 <__assert_fail@plt+0x6a40>
   183d8:	add	r1, ip, r9
   183dc:	mov	r0, #39	; 0x27
   183e0:	ldr	lr, [sp, #52]	; 0x34
   183e4:	mov	ip, #0
   183e8:	str	r6, [sp, #52]	; 0x34
   183ec:	ldr	r6, [sp, #48]	; 0x30
   183f0:	b	184ac <__assert_fail@plt+0x71dc>
   183f4:	ldr	ip, [sp, #44]	; 0x2c
   183f8:	sub	r3, fp, #2
   183fc:	clz	r3, r3
   18400:	lsr	r3, r3, #5
   18404:	cmp	ip, #0
   18408:	bne	1861c <__assert_fail@plt+0x734c>
   1840c:	eor	ip, r6, #1
   18410:	ands	r3, r3, ip
   18414:	beq	18444 <__assert_fail@plt+0x7174>
   18418:	cmp	sl, r4
   1841c:	add	ip, r4, #1
   18420:	strbhi	r0, [r8, r4]
   18424:	cmp	sl, ip
   18428:	movhi	r6, #36	; 0x24
   1842c:	strbhi	r6, [r8, ip]
   18430:	add	ip, r4, #2
   18434:	mov	r6, r3
   18438:	cmp	sl, ip
   1843c:	add	r4, r4, #3
   18440:	strbhi	r0, [r8, ip]
   18444:	cmp	sl, r4
   18448:	movhi	r3, #92	; 0x5c
   1844c:	strbhi	r3, [r8, r4]
   18450:	add	r3, r4, #1
   18454:	cmp	sl, r3
   18458:	bls	18468 <__assert_fail@plt+0x7198>
   1845c:	lsr	ip, r5, #6
   18460:	add	ip, ip, #48	; 0x30
   18464:	strb	ip, [r8, r3]
   18468:	add	r3, r4, #2
   1846c:	cmp	sl, r3
   18470:	bls	18480 <__assert_fail@plt+0x71b0>
   18474:	ubfx	ip, r5, #3, #3
   18478:	add	ip, ip, #48	; 0x30
   1847c:	strb	ip, [r8, r3]
   18480:	add	r9, r9, #1
   18484:	and	r5, r5, #7
   18488:	cmp	r9, r1
   1848c:	add	r5, r5, #48	; 0x30
   18490:	add	r4, r4, #3
   18494:	bcs	18648 <__assert_fail@plt+0x7378>
   18498:	mov	ip, r2
   1849c:	cmp	sl, r4
   184a0:	strbhi	r5, [r8, r4]
   184a4:	add	r4, r4, #1
   184a8:	ldrb	r5, [lr, #1]!
   184ac:	cmp	r2, #0
   184b0:	bne	183f4 <__assert_fail@plt+0x7124>
   184b4:	eor	r3, ip, #1
   184b8:	cmp	r7, #0
   184bc:	and	r3, r3, r6
   184c0:	uxtb	r3, r3
   184c4:	beq	184d8 <__assert_fail@plt+0x7208>
   184c8:	cmp	sl, r4
   184cc:	movhi	r7, #92	; 0x5c
   184d0:	strbhi	r7, [r8, r4]
   184d4:	add	r4, r4, #1
   184d8:	add	r9, r9, #1
   184dc:	cmp	r9, r1
   184e0:	bcs	18630 <__assert_fail@plt+0x7360>
   184e4:	cmp	r3, #0
   184e8:	beq	18668 <__assert_fail@plt+0x7398>
   184ec:	cmp	sl, r4
   184f0:	add	r3, r4, #1
   184f4:	mov	r7, #0
   184f8:	strbhi	r0, [r8, r4]
   184fc:	cmp	sl, r3
   18500:	add	r4, r4, #2
   18504:	mov	r6, r7
   18508:	strbhi	r0, [r8, r3]
   1850c:	b	1849c <__assert_fail@plt+0x71cc>
   18510:	cmp	r1, #1
   18514:	beq	18388 <__assert_fail@plt+0x70b8>
   18518:	add	r2, r4, #1
   1851c:	add	r3, sl, r1
   18520:	add	r2, sl, r2
   18524:	add	r4, r3, r4
   18528:	ldrb	r3, [r2], #1
   1852c:	sub	r3, r3, #91	; 0x5b
   18530:	cmp	r3, #33	; 0x21
   18534:	ldrls	pc, [pc, r3, lsl #2]
   18538:	b	185c4 <__assert_fail@plt+0x72f4>
   1853c:	ldrdeq	r8, [r1], -r0
   18540:	ldrdeq	r8, [r1], -r0
   18544:	andeq	r8, r1, r4, asr #11
   18548:	ldrdeq	r8, [r1], -r0
   1854c:	andeq	r8, r1, r4, asr #11
   18550:	ldrdeq	r8, [r1], -r0
   18554:	andeq	r8, r1, r4, asr #11
   18558:	andeq	r8, r1, r4, asr #11
   1855c:	andeq	r8, r1, r4, asr #11
   18560:	andeq	r8, r1, r4, asr #11
   18564:	andeq	r8, r1, r4, asr #11
   18568:	andeq	r8, r1, r4, asr #11
   1856c:	andeq	r8, r1, r4, asr #11
   18570:	andeq	r8, r1, r4, asr #11
   18574:	andeq	r8, r1, r4, asr #11
   18578:	andeq	r8, r1, r4, asr #11
   1857c:	andeq	r8, r1, r4, asr #11
   18580:	andeq	r8, r1, r4, asr #11
   18584:	andeq	r8, r1, r4, asr #11
   18588:	andeq	r8, r1, r4, asr #11
   1858c:	andeq	r8, r1, r4, asr #11
   18590:	andeq	r8, r1, r4, asr #11
   18594:	andeq	r8, r1, r4, asr #11
   18598:	andeq	r8, r1, r4, asr #11
   1859c:	andeq	r8, r1, r4, asr #11
   185a0:	andeq	r8, r1, r4, asr #11
   185a4:	andeq	r8, r1, r4, asr #11
   185a8:	andeq	r8, r1, r4, asr #11
   185ac:	andeq	r8, r1, r4, asr #11
   185b0:	andeq	r8, r1, r4, asr #11
   185b4:	andeq	r8, r1, r4, asr #11
   185b8:	andeq	r8, r1, r4, asr #11
   185bc:	andeq	r8, r1, r4, asr #11
   185c0:	ldrdeq	r8, [r1], -r0
   185c4:	cmp	r4, r2
   185c8:	bne	18528 <__assert_fail@plt+0x7258>
   185cc:	b	18388 <__assert_fail@plt+0x70b8>
   185d0:	mov	r8, #2
   185d4:	ldr	fp, [sp, #76]	; 0x4c
   185d8:	ldr	sl, [sp, #80]	; 0x50
   185dc:	b	17b08 <__assert_fail@plt+0x6838>
   185e0:	ldr	r2, [sp, #40]	; 0x28
   185e4:	str	fp, [sp, #152]	; 0x98
   185e8:	mov	fp, r8
   185ec:	ldr	r8, [sp, #152]	; 0x98
   185f0:	and	r2, r2, r3
   185f4:	str	r2, [sp, #40]	; 0x28
   185f8:	b	17b08 <__assert_fail@plt+0x6838>
   185fc:	cmp	sl, r4
   18600:	movls	r0, r4
   18604:	bls	17c38 <__assert_fail@plt+0x6968>
   18608:	ldr	r3, [sp, #48]	; 0x30
   1860c:	b	17c28 <__assert_fail@plt+0x6958>
   18610:	str	sl, [sp, #72]	; 0x48
   18614:	ldr	sl, [sp, #44]	; 0x2c
   18618:	b	17a78 <__assert_fail@plt+0x67a8>
   1861c:	str	r3, [sp, #40]	; 0x28
   18620:	str	fp, [sp, #152]	; 0x98
   18624:	mov	fp, r8
   18628:	ldr	r8, [sp, #152]	; 0x98
   1862c:	b	17b08 <__assert_fail@plt+0x6838>
   18630:	str	r6, [sp, #48]	; 0x30
   18634:	ldr	r6, [sp, #52]	; 0x34
   18638:	b	17aa8 <__assert_fail@plt+0x67d8>
   1863c:	mov	r6, #0
   18640:	ldr	r2, [sp, #40]	; 0x28
   18644:	b	183d8 <__assert_fail@plt+0x7108>
   18648:	str	r6, [sp, #48]	; 0x30
   1864c:	ldr	r6, [sp, #52]	; 0x34
   18650:	b	17894 <__assert_fail@plt+0x65c4>
   18654:	add	r4, r4, #4
   18658:	mov	r6, #0
   1865c:	str	r3, [sp, #48]	; 0x30
   18660:	mov	r5, #48	; 0x30
   18664:	b	1781c <__assert_fail@plt+0x654c>
   18668:	mov	r7, r3
   1866c:	b	1849c <__assert_fail@plt+0x71cc>
   18670:	mov	r3, #1
   18674:	movw	r2, #47996	; 0xbb7c
   18678:	movt	r2, #1
   1867c:	mov	r4, r3
   18680:	str	r3, [sp, #36]	; 0x24
   18684:	str	r3, [sp, #40]	; 0x28
   18688:	str	sl, [sp, #44]	; 0x2c
   1868c:	str	sl, [sp, #48]	; 0x30
   18690:	str	r3, [sp, #56]	; 0x38
   18694:	str	r2, [sp, #60]	; 0x3c
   18698:	str	sl, [sp, #68]	; 0x44
   1869c:	str	sl, [sp, #72]	; 0x48
   186a0:	b	17344 <__assert_fail@plt+0x6074>
   186a4:	mov	r3, r6
   186a8:	mov	r5, #48	; 0x30
   186ac:	mov	r6, #0
   186b0:	b	1781c <__assert_fail@plt+0x654c>
   186b4:	mov	r5, r3
   186b8:	b	17b94 <__assert_fail@plt+0x68c4>
   186bc:	cmp	sl, r4
   186c0:	mov	r5, #48	; 0x30
   186c4:	movhi	r3, #48	; 0x30
   186c8:	strbhi	r3, [r8, r4]
   186cc:	add	r3, r0, #2
   186d0:	add	r4, r0, #3
   186d4:	cmp	sl, r3
   186d8:	movhi	r1, #48	; 0x30
   186dc:	strbhi	r1, [r8, r3]
   186e0:	b	17c6c <__assert_fail@plt+0x699c>
   186e4:	str	fp, [sp, #152]	; 0x98
   186e8:	mov	fp, r8
   186ec:	ldr	r8, [sp, #152]	; 0x98
   186f0:	b	17b08 <__assert_fail@plt+0x6838>
   186f4:	ldr	r3, [sp, #164]	; 0xa4
   186f8:	ldrb	r3, [r3]
   186fc:	cmp	r3, #0
   18700:	beq	17314 <__assert_fail@plt+0x6044>
   18704:	ldr	r2, [sp, #164]	; 0xa4
   18708:	cmp	sl, r4
   1870c:	strbhi	r3, [fp, r4]
   18710:	add	r4, r4, #1
   18714:	ldrb	r3, [r2, #1]!
   18718:	cmp	r3, #0
   1871c:	bne	18708 <__assert_fail@plt+0x7438>
   18720:	b	17314 <__assert_fail@plt+0x6044>
   18724:	mov	ip, r5
   18728:	mov	r6, #0
   1872c:	ldr	r2, [sp, #40]	; 0x28
   18730:	ldr	r8, [sp, #76]	; 0x4c
   18734:	ldr	sl, [sp, #80]	; 0x50
   18738:	ldr	r5, [sp, #84]	; 0x54
   1873c:	ldr	r7, [sp, #88]	; 0x58
   18740:	ldr	r4, [sp, #92]	; 0x5c
   18744:	b	183d0 <__assert_fail@plt+0x7100>
   18748:	ldr	r2, [sp, #32]
   1874c:	ldrb	r1, [r2, r3]
   18750:	sub	r2, r1, #33	; 0x21
   18754:	cmp	r2, #29
   18758:	ldrls	pc, [pc, r2, lsl #2]
   1875c:	b	18838 <__assert_fail@plt+0x7568>
   18760:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18764:	andeq	r8, r1, r8, lsr r8
   18768:	andeq	r8, r1, r8, lsr r8
   1876c:	andeq	r8, r1, r8, lsr r8
   18770:	andeq	r8, r1, r8, lsr r8
   18774:	andeq	r8, r1, r8, lsr r8
   18778:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1877c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18780:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18784:	andeq	r8, r1, r8, lsr r8
   18788:	andeq	r8, r1, r8, lsr r8
   1878c:	andeq	r8, r1, r8, lsr r8
   18790:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18794:	andeq	r8, r1, r8, lsr r8
   18798:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1879c:	andeq	r8, r1, r8, lsr r8
   187a0:	andeq	r8, r1, r8, lsr r8
   187a4:	andeq	r8, r1, r8, lsr r8
   187a8:	andeq	r8, r1, r8, lsr r8
   187ac:	andeq	r8, r1, r8, lsr r8
   187b0:	andeq	r8, r1, r8, lsr r8
   187b4:	andeq	r8, r1, r8, lsr r8
   187b8:	andeq	r8, r1, r8, lsr r8
   187bc:	andeq	r8, r1, r8, lsr r8
   187c0:	andeq	r8, r1, r8, lsr r8
   187c4:	andeq	r8, r1, r8, lsr r8
   187c8:	andeq	r8, r1, r8, lsr r8
   187cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187d8:	ldr	r2, [sp, #44]	; 0x2c
   187dc:	cmp	r2, #0
   187e0:	bne	1893c <__assert_fail@plt+0x766c>
   187e4:	cmp	sl, r4
   187e8:	mov	r5, r1
   187ec:	movhi	r2, #63	; 0x3f
   187f0:	mov	r9, r3
   187f4:	strbhi	r2, [r8, r4]
   187f8:	add	r2, r4, #1
   187fc:	cmp	sl, r2
   18800:	movhi	r0, #34	; 0x22
   18804:	strbhi	r0, [r8, r2]
   18808:	add	r2, r4, #2
   1880c:	cmp	sl, r2
   18810:	movhi	r0, #34	; 0x22
   18814:	strbhi	r0, [r8, r2]
   18818:	add	r2, r4, #3
   1881c:	add	r4, r4, #4
   18820:	cmp	sl, r2
   18824:	movhi	r0, #63	; 0x3f
   18828:	strbhi	r0, [r8, r2]
   1882c:	mov	r2, #0
   18830:	mov	r6, r2
   18834:	b	17c6c <__assert_fail@plt+0x699c>
   18838:	mov	r3, #0
   1883c:	mov	r6, r3
   18840:	b	177e4 <__assert_fail@plt+0x6514>
   18844:	ldr	r0, [sp, #28]
   18848:	mov	r1, r4
   1884c:	mov	r2, r7
   18850:	mov	r3, r5
   18854:	mov	ip, r5
   18858:	ldr	r8, [sp, #76]	; 0x4c
   1885c:	ldr	sl, [sp, #80]	; 0x50
   18860:	cmp	r1, r0
   18864:	ldr	r5, [sp, #84]	; 0x54
   18868:	ldr	r7, [sp, #88]	; 0x58
   1886c:	ldr	r4, [sp, #92]	; 0x5c
   18870:	bcs	188a4 <__assert_fail@plt+0x75d4>
   18874:	ldrb	r6, [r2]
   18878:	cmp	r6, #0
   1887c:	bne	18890 <__assert_fail@plt+0x75c0>
   18880:	b	189c4 <__assert_fail@plt+0x76f4>
   18884:	ldrb	r6, [r2, #1]!
   18888:	cmp	r6, #0
   1888c:	beq	1894c <__assert_fail@plt+0x767c>
   18890:	add	r3, r3, #1
   18894:	add	r1, r9, r3
   18898:	cmp	r1, r0
   1889c:	bcc	18884 <__assert_fail@plt+0x75b4>
   188a0:	mov	ip, r3
   188a4:	mov	r6, #0
   188a8:	ldr	r2, [sp, #40]	; 0x28
   188ac:	b	183d0 <__assert_fail@plt+0x7100>
   188b0:	mov	r3, #1
   188b4:	mov	r2, #0
   188b8:	mov	r4, r2
   188bc:	str	r3, [sp, #36]	; 0x24
   188c0:	str	r3, [sp, #40]	; 0x28
   188c4:	str	r3, [sp, #44]	; 0x2c
   188c8:	str	r2, [sp, #48]	; 0x30
   188cc:	str	r3, [sp, #56]	; 0x38
   188d0:	movw	r3, #47996	; 0xbb7c
   188d4:	movt	r3, #1
   188d8:	str	r3, [sp, #60]	; 0x3c
   188dc:	str	r2, [sp, #68]	; 0x44
   188e0:	str	r2, [sp, #72]	; 0x48
   188e4:	b	17344 <__assert_fail@plt+0x6074>
   188e8:	mov	r2, r3
   188ec:	ldr	r3, [sp, #60]	; 0x3c
   188f0:	cmp	r3, #0
   188f4:	moveq	r2, #0
   188f8:	andne	r2, r2, #1
   188fc:	cmp	r2, #0
   18900:	beq	1892c <__assert_fail@plt+0x765c>
   18904:	mov	r2, r3
   18908:	ldrb	r3, [r3]
   1890c:	cmp	r3, #0
   18910:	beq	1892c <__assert_fail@plt+0x765c>
   18914:	cmp	sl, r4
   18918:	strbhi	r3, [fp, r4]
   1891c:	add	r4, r4, #1
   18920:	ldrb	r3, [r2, #1]!
   18924:	cmp	r3, #0
   18928:	bne	18914 <__assert_fail@plt+0x7644>
   1892c:	cmp	sl, r4
   18930:	movhi	r3, #0
   18934:	strbhi	r3, [fp, r4]
   18938:	b	17b4c <__assert_fail@plt+0x687c>
   1893c:	str	fp, [sp, #152]	; 0x98
   18940:	mov	fp, r8
   18944:	ldr	r8, [sp, #152]	; 0x98
   18948:	b	17b14 <__assert_fail@plt+0x6844>
   1894c:	mov	ip, r3
   18950:	ldr	r2, [sp, #40]	; 0x28
   18954:	b	183d0 <__assert_fail@plt+0x7100>
   18958:	str	fp, [sp, #152]	; 0x98
   1895c:	mov	fp, r8
   18960:	ldr	r8, [sp, #152]	; 0x98
   18964:	sub	r3, r8, #2
   18968:	clz	r3, r3
   1896c:	lsr	r3, r3, #5
   18970:	str	r3, [sp, #40]	; 0x28
   18974:	b	17b08 <__assert_fail@plt+0x6838>
   18978:	mov	ip, #5
   1897c:	ldr	r3, [sp, #28]
   18980:	str	ip, [sp]
   18984:	ldr	r2, [sp, #156]	; 0x9c
   18988:	ldr	ip, [sp, #164]	; 0xa4
   1898c:	ldr	r0, [sp, #160]	; 0xa0
   18990:	str	r2, [sp, #4]
   18994:	ldr	r2, [sp, #32]
   18998:	ldr	r1, [sp, #72]	; 0x48
   1899c:	str	ip, [sp, #12]
   189a0:	ldr	ip, [sp, #168]	; 0xa8
   189a4:	str	r0, [sp, #8]
   189a8:	mov	r0, fp
   189ac:	str	ip, [sp, #16]
   189b0:	bl	1725c <__assert_fail@plt+0x5f8c>
   189b4:	mov	r4, r0
   189b8:	b	17b4c <__assert_fail@plt+0x687c>
   189bc:	mov	r8, #2
   189c0:	b	17b08 <__assert_fail@plt+0x6838>
   189c4:	ldr	r2, [sp, #40]	; 0x28
   189c8:	b	183d0 <__assert_fail@plt+0x7100>
   189cc:	mov	r3, #0
   189d0:	mov	r2, #1
   189d4:	mov	r4, r3
   189d8:	strd	r2, [sp, #36]	; 0x24
   189dc:	strd	r2, [sp, #44]	; 0x2c
   189e0:	str	r2, [sp, #56]	; 0x38
   189e4:	str	r3, [sp, #68]	; 0x44
   189e8:	str	r3, [sp, #72]	; 0x48
   189ec:	movw	r3, #48016	; 0xbb90
   189f0:	movt	r3, #1
   189f4:	str	r3, [sp, #60]	; 0x3c
   189f8:	b	17344 <__assert_fail@plt+0x6074>
   189fc:	mov	r3, #0
   18a00:	mov	r1, #1
   18a04:	mov	r2, r3
   18a08:	str	r1, [sp, #36]	; 0x24
   18a0c:	str	r3, [sp, #48]	; 0x30
   18a10:	str	sl, [sp, #72]	; 0x48
   18a14:	b	1794c <__assert_fail@plt+0x667c>
   18a18:	bl	11294 <abort@plt>
   18a1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18a20:	mov	r4, r0
   18a24:	mov	r5, r3
   18a28:	strd	r6, [sp, #8]
   18a2c:	movw	r7, #53560	; 0xd138
   18a30:	movt	r7, #2
   18a34:	strd	r8, [sp, #16]
   18a38:	strd	sl, [sp, #24]
   18a3c:	mov	sl, r1
   18a40:	mov	fp, r2
   18a44:	str	lr, [sp, #32]
   18a48:	sub	sp, sp, #60	; 0x3c
   18a4c:	bl	11180 <__errno_location@plt>
   18a50:	mov	r8, r0
   18a54:	cmn	r4, #-2147483647	; 0x80000001
   18a58:	ldr	r6, [r7]
   18a5c:	movne	r0, #0
   18a60:	moveq	r0, #1
   18a64:	ldr	r3, [r8]
   18a68:	orrs	r0, r0, r4, lsr #31
   18a6c:	str	r3, [sp, #28]
   18a70:	bne	18c00 <__assert_fail@plt+0x7930>
   18a74:	ldr	r3, [r7, #4]
   18a78:	cmp	r3, r4
   18a7c:	bgt	18adc <__assert_fail@plt+0x780c>
   18a80:	add	r1, r7, #8
   18a84:	sub	r2, r4, r3
   18a88:	str	r3, [sp, #52]	; 0x34
   18a8c:	cmp	r6, r1
   18a90:	add	r2, r2, #1
   18a94:	beq	18bd8 <__assert_fail@plt+0x7908>
   18a98:	mov	r1, #8
   18a9c:	mov	r0, r6
   18aa0:	mvn	r3, #-2147483648	; 0x80000000
   18aa4:	str	r1, [sp]
   18aa8:	add	r1, sp, #52	; 0x34
   18aac:	bl	19b88 <__assert_fail@plt+0x88b8>
   18ab0:	mov	r6, r0
   18ab4:	str	r0, [r7]
   18ab8:	ldr	r0, [r7, #4]
   18abc:	mov	r1, #0
   18ac0:	ldr	r2, [sp, #52]	; 0x34
   18ac4:	sub	r2, r2, r0
   18ac8:	add	r0, r6, r0, lsl #3
   18acc:	lsl	r2, r2, #3
   18ad0:	bl	11198 <memset@plt>
   18ad4:	ldr	r3, [sp, #52]	; 0x34
   18ad8:	str	r3, [r7, #4]
   18adc:	ldr	r1, [r5, #4]
   18ae0:	add	r0, r6, r4, lsl #3
   18ae4:	add	ip, r5, #8
   18ae8:	mov	r3, fp
   18aec:	mov	r2, sl
   18af0:	ldr	r7, [r0, #4]
   18af4:	str	r0, [sp, #36]	; 0x24
   18af8:	str	ip, [sp, #40]	; 0x28
   18afc:	orr	r0, r1, #1
   18b00:	ldr	r9, [r6, r4, lsl #3]
   18b04:	str	ip, [sp, #8]
   18b08:	ldr	lr, [r5, #44]	; 0x2c
   18b0c:	str	r0, [sp, #4]
   18b10:	ldr	ip, [r5]
   18b14:	mov	r1, r9
   18b18:	str	ip, [sp, #32]
   18b1c:	ldr	ip, [r5, #40]	; 0x28
   18b20:	str	ip, [sp, #12]
   18b24:	ldr	ip, [sp, #32]
   18b28:	str	lr, [sp, #16]
   18b2c:	str	r0, [sp, #44]	; 0x2c
   18b30:	mov	r0, r7
   18b34:	str	ip, [sp]
   18b38:	bl	1725c <__assert_fail@plt+0x5f8c>
   18b3c:	cmp	r9, r0
   18b40:	bhi	18bb0 <__assert_fail@plt+0x78e0>
   18b44:	add	r9, r0, #1
   18b48:	movw	r3, #53696	; 0xd1c0
   18b4c:	movt	r3, #2
   18b50:	cmp	r7, r3
   18b54:	str	r9, [r6, r4, lsl #3]
   18b58:	beq	18b64 <__assert_fail@plt+0x7894>
   18b5c:	mov	r0, r7
   18b60:	bl	138e0 <__assert_fail@plt+0x2610>
   18b64:	mov	r0, r9
   18b68:	bl	199d8 <__assert_fail@plt+0x8708>
   18b6c:	ldr	ip, [r5]
   18b70:	mov	r3, fp
   18b74:	mov	r2, sl
   18b78:	mov	r1, r9
   18b7c:	mov	r7, r0
   18b80:	ldr	lr, [sp, #36]	; 0x24
   18b84:	ldr	r4, [r5, #40]	; 0x28
   18b88:	str	r0, [lr, #4]
   18b8c:	ldr	lr, [r5, #44]	; 0x2c
   18b90:	str	ip, [sp]
   18b94:	ldr	ip, [sp, #44]	; 0x2c
   18b98:	str	ip, [sp, #4]
   18b9c:	ldr	ip, [sp, #40]	; 0x28
   18ba0:	str	r4, [sp, #12]
   18ba4:	str	lr, [sp, #16]
   18ba8:	str	ip, [sp, #8]
   18bac:	bl	1725c <__assert_fail@plt+0x5f8c>
   18bb0:	ldr	r3, [sp, #28]
   18bb4:	mov	r0, r7
   18bb8:	str	r3, [r8]
   18bbc:	add	sp, sp, #60	; 0x3c
   18bc0:	ldrd	r4, [sp]
   18bc4:	ldrd	r6, [sp, #8]
   18bc8:	ldrd	r8, [sp, #16]
   18bcc:	ldrd	sl, [sp, #24]
   18bd0:	add	sp, sp, #32
   18bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   18bd8:	mov	r1, #8
   18bdc:	mvn	r3, #-2147483648	; 0x80000000
   18be0:	str	r1, [sp]
   18be4:	add	r1, sp, #52	; 0x34
   18be8:	bl	19b88 <__assert_fail@plt+0x88b8>
   18bec:	ldrd	r2, [r7, #8]
   18bf0:	mov	r6, r0
   18bf4:	str	r0, [r7]
   18bf8:	strd	r2, [r0]
   18bfc:	b	18ab8 <__assert_fail@plt+0x77e8>
   18c00:	bl	11294 <abort@plt>
   18c04:	strd	r4, [sp, #-16]!
   18c08:	mov	r5, r0
   18c0c:	str	r6, [sp, #8]
   18c10:	str	lr, [sp, #12]
   18c14:	bl	11180 <__errno_location@plt>
   18c18:	mov	r4, r0
   18c1c:	cmp	r5, #0
   18c20:	ldr	r0, [pc, #32]	; 18c48 <__assert_fail@plt+0x7978>
   18c24:	mov	r1, #48	; 0x30
   18c28:	movne	r0, r5
   18c2c:	ldr	r6, [r4]
   18c30:	bl	19d00 <__assert_fail@plt+0x8a30>
   18c34:	str	r6, [r4]
   18c38:	ldrd	r4, [sp]
   18c3c:	ldr	r6, [sp, #8]
   18c40:	add	sp, sp, #12
   18c44:	pop	{pc}		; (ldr pc, [sp], #4)
   18c48:	andeq	sp, r2, r0, asr #5
   18c4c:	ldr	r3, [pc, #12]	; 18c60 <__assert_fail@plt+0x7990>
   18c50:	cmp	r0, #0
   18c54:	moveq	r0, r3
   18c58:	ldr	r0, [r0]
   18c5c:	bx	lr
   18c60:	andeq	sp, r2, r0, asr #5
   18c64:	ldr	r3, [pc, #12]	; 18c78 <__assert_fail@plt+0x79a8>
   18c68:	cmp	r0, #0
   18c6c:	moveq	r0, r3
   18c70:	str	r1, [r0]
   18c74:	bx	lr
   18c78:	andeq	sp, r2, r0, asr #5
   18c7c:	ldr	r3, [pc, #52]	; 18cb8 <__assert_fail@plt+0x79e8>
   18c80:	cmp	r0, #0
   18c84:	push	{lr}		; (str lr, [sp, #-4]!)
   18c88:	lsr	lr, r1, #5
   18c8c:	and	r1, r1, #31
   18c90:	moveq	r0, r3
   18c94:	add	r3, r0, #8
   18c98:	ldr	ip, [r3, lr, lsl #2]
   18c9c:	lsr	r0, ip, r1
   18ca0:	eor	r2, r2, r0
   18ca4:	and	r0, r0, #1
   18ca8:	and	r2, r2, #1
   18cac:	eor	r1, ip, r2, lsl r1
   18cb0:	str	r1, [r3, lr, lsl #2]
   18cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   18cb8:	andeq	sp, r2, r0, asr #5
   18cbc:	ldr	r3, [pc, #16]	; 18cd4 <__assert_fail@plt+0x7a04>
   18cc0:	cmp	r0, #0
   18cc4:	movne	r3, r0
   18cc8:	ldr	r0, [r3, #4]
   18ccc:	str	r1, [r3, #4]
   18cd0:	bx	lr
   18cd4:	andeq	sp, r2, r0, asr #5
   18cd8:	ldr	r3, [pc, #48]	; 18d10 <__assert_fail@plt+0x7a40>
   18cdc:	cmp	r0, #0
   18ce0:	mov	ip, #10
   18ce4:	moveq	r0, r3
   18ce8:	cmp	r2, #0
   18cec:	cmpne	r1, #0
   18cf0:	str	ip, [r0]
   18cf4:	beq	18d04 <__assert_fail@plt+0x7a34>
   18cf8:	str	r1, [r0, #40]	; 0x28
   18cfc:	str	r2, [r0, #44]	; 0x2c
   18d00:	bx	lr
   18d04:	str	r4, [sp, #-8]!
   18d08:	str	lr, [sp, #4]
   18d0c:	bl	11294 <abort@plt>
   18d10:	andeq	sp, r2, r0, asr #5
   18d14:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18d18:	strd	r6, [sp, #8]
   18d1c:	mov	r7, r0
   18d20:	mov	r6, r1
   18d24:	strd	r8, [sp, #16]
   18d28:	mov	r8, r2
   18d2c:	mov	r9, r3
   18d30:	str	lr, [sp, #24]
   18d34:	sub	sp, sp, #28
   18d38:	ldr	r4, [sp, #56]	; 0x38
   18d3c:	ldr	ip, [pc, #104]	; 18dac <__assert_fail@plt+0x7adc>
   18d40:	cmp	r4, #0
   18d44:	moveq	r4, ip
   18d48:	bl	11180 <__errno_location@plt>
   18d4c:	ldr	ip, [r4, #44]	; 0x2c
   18d50:	mov	r5, r0
   18d54:	mov	r1, r6
   18d58:	add	lr, r4, #8
   18d5c:	mov	r3, r9
   18d60:	ldr	r6, [r5]
   18d64:	mov	r2, r8
   18d68:	mov	r0, r7
   18d6c:	str	ip, [sp, #16]
   18d70:	ldr	ip, [r4, #40]	; 0x28
   18d74:	str	lr, [sp, #8]
   18d78:	str	ip, [sp, #12]
   18d7c:	ldr	ip, [r4, #4]
   18d80:	str	ip, [sp, #4]
   18d84:	ldr	ip, [r4]
   18d88:	str	ip, [sp]
   18d8c:	bl	1725c <__assert_fail@plt+0x5f8c>
   18d90:	str	r6, [r5]
   18d94:	add	sp, sp, #28
   18d98:	ldrd	r4, [sp]
   18d9c:	ldrd	r6, [sp, #8]
   18da0:	ldrd	r8, [sp, #16]
   18da4:	add	sp, sp, #24
   18da8:	pop	{pc}		; (ldr pc, [sp], #4)
   18dac:	andeq	sp, r2, r0, asr #5
   18db0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18db4:	cmp	r3, #0
   18db8:	ldr	r4, [pc, #220]	; 18e9c <__assert_fail@plt+0x7bcc>
   18dbc:	movne	r4, r3
   18dc0:	strd	r6, [sp, #8]
   18dc4:	mov	r6, r2
   18dc8:	strd	r8, [sp, #16]
   18dcc:	mov	r9, r0
   18dd0:	strd	sl, [sp, #24]
   18dd4:	mov	sl, r1
   18dd8:	str	lr, [sp, #32]
   18ddc:	sub	sp, sp, #44	; 0x2c
   18de0:	bl	11180 <__errno_location@plt>
   18de4:	ldr	r5, [r4, #4]
   18de8:	mov	r7, r0
   18dec:	mov	r1, #0
   18df0:	add	r8, r4, #8
   18df4:	mov	r3, sl
   18df8:	ldr	ip, [r4, #44]	; 0x2c
   18dfc:	mov	r2, r9
   18e00:	mov	r0, r1
   18e04:	ldr	lr, [r7]
   18e08:	cmp	r6, r1
   18e0c:	orreq	r5, r5, #1
   18e10:	str	ip, [sp, #16]
   18e14:	ldr	ip, [r4, #40]	; 0x28
   18e18:	stmib	sp, {r5, r8, ip}
   18e1c:	ldr	ip, [r4]
   18e20:	str	lr, [sp, #28]
   18e24:	str	ip, [sp]
   18e28:	bl	1725c <__assert_fail@plt+0x5f8c>
   18e2c:	add	r1, r0, #1
   18e30:	mov	fp, r0
   18e34:	mov	r0, r1
   18e38:	str	r1, [sp, #36]	; 0x24
   18e3c:	bl	199d8 <__assert_fail@plt+0x8708>
   18e40:	ldr	ip, [r4, #44]	; 0x2c
   18e44:	mov	r3, sl
   18e48:	mov	r2, r9
   18e4c:	ldr	r1, [sp, #36]	; 0x24
   18e50:	str	ip, [sp, #16]
   18e54:	ldr	ip, [r4, #40]	; 0x28
   18e58:	str	r0, [sp, #32]
   18e5c:	stmib	sp, {r5, r8, ip}
   18e60:	ldr	ip, [r4]
   18e64:	str	ip, [sp]
   18e68:	bl	1725c <__assert_fail@plt+0x5f8c>
   18e6c:	ldr	lr, [sp, #28]
   18e70:	cmp	r6, #0
   18e74:	ldr	r0, [sp, #32]
   18e78:	str	lr, [r7]
   18e7c:	strne	fp, [r6]
   18e80:	add	sp, sp, #44	; 0x2c
   18e84:	ldrd	r4, [sp]
   18e88:	ldrd	r6, [sp, #8]
   18e8c:	ldrd	r8, [sp, #16]
   18e90:	ldrd	sl, [sp, #24]
   18e94:	add	sp, sp, #32
   18e98:	pop	{pc}		; (ldr pc, [sp], #4)
   18e9c:	andeq	sp, r2, r0, asr #5
   18ea0:	mov	r3, r2
   18ea4:	mov	r2, #0
   18ea8:	b	18db0 <__assert_fail@plt+0x7ae0>
   18eac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18eb0:	movw	r5, #53560	; 0xd138
   18eb4:	movt	r5, #2
   18eb8:	ldr	r3, [r5, #4]
   18ebc:	strd	r6, [sp, #8]
   18ec0:	str	r8, [sp, #16]
   18ec4:	str	lr, [sp, #20]
   18ec8:	ldr	r7, [r5]
   18ecc:	cmp	r3, #1
   18ed0:	ble	18ef4 <__assert_fail@plt+0x7c24>
   18ed4:	mov	r4, #1
   18ed8:	add	r6, r7, #4
   18edc:	ldr	r0, [r6, r4, lsl #3]
   18ee0:	add	r4, r4, #1
   18ee4:	bl	138e0 <__assert_fail@plt+0x2610>
   18ee8:	ldr	r3, [r5, #4]
   18eec:	cmp	r3, r4
   18ef0:	bgt	18edc <__assert_fail@plt+0x7c0c>
   18ef4:	ldr	r0, [r7, #4]
   18ef8:	movw	r4, #53696	; 0xd1c0
   18efc:	movt	r4, #2
   18f00:	cmp	r0, r4
   18f04:	beq	18f18 <__assert_fail@plt+0x7c48>
   18f08:	bl	138e0 <__assert_fail@plt+0x2610>
   18f0c:	mov	r3, #256	; 0x100
   18f10:	str	r3, [r5, #8]
   18f14:	str	r4, [r5, #12]
   18f18:	ldr	r4, [pc, #44]	; 18f4c <__assert_fail@plt+0x7c7c>
   18f1c:	cmp	r7, r4
   18f20:	beq	18f30 <__assert_fail@plt+0x7c60>
   18f24:	mov	r0, r7
   18f28:	bl	138e0 <__assert_fail@plt+0x2610>
   18f2c:	str	r4, [r5]
   18f30:	mov	r3, #1
   18f34:	ldrd	r6, [sp, #8]
   18f38:	str	r3, [r5, #4]
   18f3c:	ldrd	r4, [sp]
   18f40:	ldr	r8, [sp, #16]
   18f44:	add	sp, sp, #20
   18f48:	pop	{pc}		; (ldr pc, [sp], #4)
   18f4c:	andeq	sp, r2, r0, asr #2
   18f50:	ldr	r3, [pc, #4]	; 18f5c <__assert_fail@plt+0x7c8c>
   18f54:	mvn	r2, #0
   18f58:	b	18a1c <__assert_fail@plt+0x774c>
   18f5c:	andeq	sp, r2, r0, asr #5
   18f60:	ldr	r3, [pc]	; 18f68 <__assert_fail@plt+0x7c98>
   18f64:	b	18a1c <__assert_fail@plt+0x774c>
   18f68:	andeq	sp, r2, r0, asr #5
   18f6c:	mov	r1, r0
   18f70:	ldr	r3, [pc, #8]	; 18f80 <__assert_fail@plt+0x7cb0>
   18f74:	mvn	r2, #0
   18f78:	mov	r0, #0
   18f7c:	b	18a1c <__assert_fail@plt+0x774c>
   18f80:	andeq	sp, r2, r0, asr #5
   18f84:	mov	r2, r1
   18f88:	ldr	r3, [pc, #8]	; 18f98 <__assert_fail@plt+0x7cc8>
   18f8c:	mov	r1, r0
   18f90:	mov	r0, #0
   18f94:	b	18a1c <__assert_fail@plt+0x774c>
   18f98:	andeq	sp, r2, r0, asr #5
   18f9c:	strd	r4, [sp, #-12]!
   18fa0:	mov	r5, r2
   18fa4:	mov	r4, r0
   18fa8:	str	lr, [sp, #8]
   18fac:	sub	sp, sp, #52	; 0x34
   18fb0:	mov	r0, sp
   18fb4:	bl	170b8 <__assert_fail@plt+0x5de8>
   18fb8:	mov	r3, sp
   18fbc:	mov	r1, r5
   18fc0:	mov	r0, r4
   18fc4:	mvn	r2, #0
   18fc8:	bl	18a1c <__assert_fail@plt+0x774c>
   18fcc:	add	sp, sp, #52	; 0x34
   18fd0:	ldrd	r4, [sp]
   18fd4:	add	sp, sp, #8
   18fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fdc:	strd	r4, [sp, #-16]!
   18fe0:	mov	r5, r2
   18fe4:	mov	r4, r0
   18fe8:	str	r6, [sp, #8]
   18fec:	mov	r6, r3
   18ff0:	str	lr, [sp, #12]
   18ff4:	sub	sp, sp, #48	; 0x30
   18ff8:	mov	r0, sp
   18ffc:	bl	170b8 <__assert_fail@plt+0x5de8>
   19000:	mov	r3, sp
   19004:	mov	r2, r6
   19008:	mov	r1, r5
   1900c:	mov	r0, r4
   19010:	bl	18a1c <__assert_fail@plt+0x774c>
   19014:	add	sp, sp, #48	; 0x30
   19018:	ldrd	r4, [sp]
   1901c:	ldr	r6, [sp, #8]
   19020:	add	sp, sp, #12
   19024:	pop	{pc}		; (ldr pc, [sp], #4)
   19028:	mov	r2, r1
   1902c:	mov	r1, r0
   19030:	mov	r0, #0
   19034:	b	18f9c <__assert_fail@plt+0x7ccc>
   19038:	mov	r3, r2
   1903c:	mov	r2, r1
   19040:	mov	r1, r0
   19044:	mov	r0, #0
   19048:	b	18fdc <__assert_fail@plt+0x7d0c>
   1904c:	ldr	ip, [pc, #140]	; 190e0 <__assert_fail@plt+0x7e10>
   19050:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19054:	ldrd	r4, [ip]
   19058:	strd	r6, [sp, #8]
   1905c:	ldrd	r6, [ip, #8]
   19060:	strd	r8, [sp, #16]
   19064:	lsr	r9, r2, #5
   19068:	str	lr, [sp, #24]
   1906c:	sub	sp, sp, #52	; 0x34
   19070:	and	lr, r2, #31
   19074:	add	r8, sp, #8
   19078:	mov	r2, r1
   1907c:	strd	r4, [sp]
   19080:	mov	r1, r0
   19084:	mov	r3, sp
   19088:	strd	r6, [sp, #8]
   1908c:	mov	r0, #0
   19090:	ldrd	r4, [ip, #16]
   19094:	ldrd	r6, [ip, #24]
   19098:	strd	r4, [sp, #16]
   1909c:	ldrd	r4, [ip, #32]
   190a0:	strd	r6, [sp, #24]
   190a4:	ldrd	r6, [ip, #40]	; 0x28
   190a8:	strd	r4, [sp, #32]
   190ac:	strd	r6, [sp, #40]	; 0x28
   190b0:	ldr	ip, [r8, r9, lsl #2]
   190b4:	mvn	r4, ip, lsr lr
   190b8:	and	r4, r4, #1
   190bc:	eor	lr, ip, r4, lsl lr
   190c0:	str	lr, [r8, r9, lsl #2]
   190c4:	bl	18a1c <__assert_fail@plt+0x774c>
   190c8:	add	sp, sp, #52	; 0x34
   190cc:	ldrd	r4, [sp]
   190d0:	ldrd	r6, [sp, #8]
   190d4:	ldrd	r8, [sp, #16]
   190d8:	add	sp, sp, #24
   190dc:	pop	{pc}		; (ldr pc, [sp], #4)
   190e0:	andeq	sp, r2, r0, asr #5
   190e4:	mov	r2, r1
   190e8:	mvn	r1, #0
   190ec:	b	1904c <__assert_fail@plt+0x7d7c>
   190f0:	mov	r2, #58	; 0x3a
   190f4:	mvn	r1, #0
   190f8:	b	1904c <__assert_fail@plt+0x7d7c>
   190fc:	mov	r2, #58	; 0x3a
   19100:	b	1904c <__assert_fail@plt+0x7d7c>
   19104:	strd	r4, [sp, #-20]!	; 0xffffffec
   19108:	strd	r6, [sp, #8]
   1910c:	mov	r6, r0
   19110:	mov	r7, r2
   19114:	str	lr, [sp, #16]
   19118:	sub	sp, sp, #100	; 0x64
   1911c:	mov	r0, sp
   19120:	bl	170b8 <__assert_fail@plt+0x5de8>
   19124:	ldrd	r4, [sp, #8]
   19128:	mov	r1, r7
   1912c:	mov	r0, r6
   19130:	add	r3, sp, #48	; 0x30
   19134:	mvn	r2, #0
   19138:	ldrd	r6, [sp]
   1913c:	strd	r4, [sp, #56]	; 0x38
   19140:	ldrd	r4, [sp, #16]
   19144:	strd	r6, [sp, #48]	; 0x30
   19148:	ldrd	r6, [sp, #32]
   1914c:	ldr	lr, [sp, #60]	; 0x3c
   19150:	strd	r4, [sp, #64]	; 0x40
   19154:	ldrd	r4, [sp, #24]
   19158:	mvn	ip, lr
   1915c:	and	ip, ip, #67108864	; 0x4000000
   19160:	strd	r4, [sp, #72]	; 0x48
   19164:	eor	ip, ip, lr
   19168:	ldrd	r4, [sp, #40]	; 0x28
   1916c:	str	ip, [sp, #60]	; 0x3c
   19170:	strd	r6, [sp, #80]	; 0x50
   19174:	strd	r4, [sp, #88]	; 0x58
   19178:	bl	18a1c <__assert_fail@plt+0x774c>
   1917c:	add	sp, sp, #100	; 0x64
   19180:	ldrd	r4, [sp]
   19184:	ldrd	r6, [sp, #8]
   19188:	add	sp, sp, #16
   1918c:	pop	{pc}		; (ldr pc, [sp], #4)
   19190:	ldr	ip, [pc, #156]	; 19234 <__assert_fail@plt+0x7f64>
   19194:	cmp	r2, #0
   19198:	cmpne	r1, #0
   1919c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   191a0:	strd	r6, [sp, #8]
   191a4:	mov	r6, r2
   191a8:	str	r8, [sp, #16]
   191ac:	mov	r8, r3
   191b0:	strd	sl, [sp, #20]
   191b4:	ldrd	r4, [ip]
   191b8:	str	lr, [sp, #28]
   191bc:	sub	sp, sp, #48	; 0x30
   191c0:	mov	lr, #10
   191c4:	ldrd	r2, [ip, #8]
   191c8:	ldrd	sl, [ip, #16]
   191cc:	strd	r4, [sp]
   191d0:	ldrd	r4, [ip, #32]
   191d4:	str	lr, [sp]
   191d8:	strd	r2, [sp, #8]
   191dc:	strd	sl, [sp, #16]
   191e0:	ldrd	r2, [ip, #24]
   191e4:	ldrd	sl, [ip, #40]	; 0x28
   191e8:	strd	r2, [sp, #24]
   191ec:	strd	r4, [sp, #32]
   191f0:	strd	sl, [sp, #40]	; 0x28
   191f4:	beq	19230 <__assert_fail@plt+0x7f60>
   191f8:	ldr	r2, [sp, #80]	; 0x50
   191fc:	mov	r7, r1
   19200:	mov	r3, sp
   19204:	mov	r1, r8
   19208:	str	r7, [sp, #40]	; 0x28
   1920c:	str	r6, [sp, #44]	; 0x2c
   19210:	bl	18a1c <__assert_fail@plt+0x774c>
   19214:	add	sp, sp, #48	; 0x30
   19218:	ldrd	r4, [sp]
   1921c:	ldrd	r6, [sp, #8]
   19220:	ldr	r8, [sp, #16]
   19224:	ldrd	sl, [sp, #20]
   19228:	add	sp, sp, #28
   1922c:	pop	{pc}		; (ldr pc, [sp], #4)
   19230:	bl	11294 <abort@plt>
   19234:	andeq	sp, r2, r0, asr #5
   19238:	mvn	ip, #0
   1923c:	push	{lr}		; (str lr, [sp, #-4]!)
   19240:	sub	sp, sp, #12
   19244:	str	ip, [sp]
   19248:	bl	19190 <__assert_fail@plt+0x7ec0>
   1924c:	add	sp, sp, #12
   19250:	pop	{pc}		; (ldr pc, [sp], #4)
   19254:	mvn	ip, #0
   19258:	push	{lr}		; (str lr, [sp, #-4]!)
   1925c:	sub	sp, sp, #12
   19260:	mov	r3, r2
   19264:	mov	r2, r1
   19268:	mov	r1, r0
   1926c:	mov	r0, #0
   19270:	str	ip, [sp]
   19274:	bl	19190 <__assert_fail@plt+0x7ec0>
   19278:	add	sp, sp, #12
   1927c:	pop	{pc}		; (ldr pc, [sp], #4)
   19280:	push	{lr}		; (str lr, [sp, #-4]!)
   19284:	sub	sp, sp, #12
   19288:	str	r3, [sp]
   1928c:	mov	r3, r2
   19290:	mov	r2, r1
   19294:	mov	r1, r0
   19298:	mov	r0, #0
   1929c:	bl	19190 <__assert_fail@plt+0x7ec0>
   192a0:	add	sp, sp, #12
   192a4:	pop	{pc}		; (ldr pc, [sp], #4)
   192a8:	ldr	r3, [pc]	; 192b0 <__assert_fail@plt+0x7fe0>
   192ac:	b	18a1c <__assert_fail@plt+0x774c>
   192b0:	andeq	sp, r2, r8, asr #2
   192b4:	mov	r2, r1
   192b8:	ldr	r3, [pc, #8]	; 192c8 <__assert_fail@plt+0x7ff8>
   192bc:	mov	r1, r0
   192c0:	mov	r0, #0
   192c4:	b	18a1c <__assert_fail@plt+0x774c>
   192c8:	andeq	sp, r2, r8, asr #2
   192cc:	ldr	r3, [pc, #4]	; 192d8 <__assert_fail@plt+0x8008>
   192d0:	mvn	r2, #0
   192d4:	b	18a1c <__assert_fail@plt+0x774c>
   192d8:	andeq	sp, r2, r8, asr #2
   192dc:	mov	r1, r0
   192e0:	ldr	r3, [pc, #8]	; 192f0 <__assert_fail@plt+0x8020>
   192e4:	mvn	r2, #0
   192e8:	mov	r0, #0
   192ec:	b	18a1c <__assert_fail@plt+0x774c>
   192f0:	andeq	sp, r2, r8, asr #2
   192f4:	str	r4, [sp, #-16]!
   192f8:	movw	r1, #46020	; 0xb3c4
   192fc:	movt	r1, #1
   19300:	strd	r6, [sp, #4]
   19304:	mov	r4, r0
   19308:	mov	r0, #3
   1930c:	str	lr, [sp, #12]
   19310:	sub	sp, sp, #104	; 0x68
   19314:	mov	r2, sp
   19318:	bl	112ac <__lxstat64@plt>
   1931c:	cmp	r0, #0
   19320:	movne	r0, #0
   19324:	bne	1933c <__assert_fail@plt+0x806c>
   19328:	ldrd	r6, [sp]
   1932c:	mov	r0, r4
   19330:	ldrd	r2, [sp, #96]	; 0x60
   19334:	strd	r2, [r4]
   19338:	strd	r6, [r4, #8]
   1933c:	add	sp, sp, #104	; 0x68
   19340:	ldr	r4, [sp]
   19344:	ldrd	r6, [sp, #4]
   19348:	add	sp, sp, #12
   1934c:	pop	{pc}		; (ldr pc, [sp], #4)
   19350:	cmp	r0, #2
   19354:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19358:	mov	r4, r0
   1935c:	strd	r6, [sp, #8]
   19360:	str	r8, [sp, #16]
   19364:	str	lr, [sp, #20]
   19368:	bls	19384 <__assert_fail@plt+0x80b4>
   1936c:	mov	r0, r4
   19370:	ldrd	r4, [sp]
   19374:	ldrd	r6, [sp, #8]
   19378:	ldr	r8, [sp, #16]
   1937c:	add	sp, sp, #20
   19380:	pop	{pc}		; (ldr pc, [sp], #4)
   19384:	bl	1a5dc <__assert_fail@plt+0x930c>
   19388:	mov	r7, r0
   1938c:	bl	11180 <__errno_location@plt>
   19390:	mov	r5, r0
   19394:	mov	r0, r4
   19398:	ldr	r6, [r5]
   1939c:	mov	r4, r7
   193a0:	bl	112a0 <close@plt>
   193a4:	str	r6, [r5]
   193a8:	b	1936c <__assert_fail@plt+0x809c>
   193ac:	cmp	r1, #0
   193b0:	strd	r4, [sp, #-16]!
   193b4:	mov	ip, r3
   193b8:	str	r6, [sp, #8]
   193bc:	mov	r4, r0
   193c0:	str	lr, [sp, #12]
   193c4:	sub	sp, sp, #32
   193c8:	ldr	r5, [sp, #48]	; 0x30
   193cc:	ldr	r6, [sp, #52]	; 0x34
   193d0:	beq	19514 <__assert_fail@plt+0x8244>
   193d4:	mov	r3, r1
   193d8:	mov	r1, #1
   193dc:	stm	sp, {r2, ip}
   193e0:	movw	r2, #48124	; 0xbbfc
   193e4:	movt	r2, #1
   193e8:	bl	111bc <__fprintf_chk@plt>
   193ec:	mov	r2, #5
   193f0:	movw	r1, #48144	; 0xbc10
   193f4:	movt	r1, #1
   193f8:	mov	r0, #0
   193fc:	bl	11060 <dcgettext@plt>
   19400:	movw	ip, #2022	; 0x7e6
   19404:	mov	r3, r0
   19408:	mov	r1, #1
   1940c:	movw	r2, #48848	; 0xbed0
   19410:	movt	r2, #1
   19414:	mov	r0, r4
   19418:	str	ip, [sp]
   1941c:	bl	111bc <__fprintf_chk@plt>
   19420:	mov	r1, r4
   19424:	mov	r0, #10
   19428:	bl	11054 <fputc_unlocked@plt>
   1942c:	mov	r2, #5
   19430:	movw	r1, #48148	; 0xbc14
   19434:	movt	r1, #1
   19438:	mov	r0, #0
   1943c:	bl	11060 <dcgettext@plt>
   19440:	mov	r2, r0
   19444:	mov	r1, #1
   19448:	movw	r3, #48320	; 0xbcc0
   1944c:	movt	r3, #1
   19450:	mov	r0, r4
   19454:	bl	111bc <__fprintf_chk@plt>
   19458:	mov	r1, r4
   1945c:	mov	r0, #10
   19460:	bl	11054 <fputc_unlocked@plt>
   19464:	cmp	r6, #9
   19468:	ldrls	pc, [pc, r6, lsl #2]
   1946c:	b	19780 <__assert_fail@plt+0x84b0>
   19470:	andeq	r9, r1, r0, lsl #10
   19474:	andeq	r9, r1, r0, lsr r5
   19478:	andeq	r9, r1, ip, ror #10
   1947c:	andeq	r9, r1, ip, lsr #11
   19480:	strdeq	r9, [r1], -r4
   19484:	andeq	r9, r1, ip, lsr #12
   19488:	andeq	r9, r1, r4, ror r6
   1948c:	andeq	r9, r1, r8, asr #13
   19490:	andeq	r9, r1, r0, lsr #14
   19494:	muleq	r1, r8, r4
   19498:	movw	r1, #48624	; 0xbdf0
   1949c:	movt	r1, #1
   194a0:	mov	r2, #5
   194a4:	mov	r0, #0
   194a8:	bl	11060 <dcgettext@plt>
   194ac:	ldr	lr, [r5, #4]
   194b0:	mov	r2, r0
   194b4:	mov	r1, #1
   194b8:	mov	r0, r4
   194bc:	ldr	r3, [r5, #8]
   194c0:	ldr	ip, [r5, #32]
   194c4:	str	lr, [sp]
   194c8:	ldr	lr, [r5, #12]
   194cc:	str	ip, [sp, #28]
   194d0:	ldr	ip, [r5, #28]
   194d4:	str	r3, [sp, #4]
   194d8:	ldr	r3, [r5, #16]
   194dc:	str	lr, [sp, #8]
   194e0:	ldr	lr, [r5, #20]
   194e4:	str	ip, [sp, #24]
   194e8:	ldr	ip, [r5, #24]
   194ec:	str	r3, [sp, #12]
   194f0:	ldr	r3, [r5]
   194f4:	str	lr, [sp, #16]
   194f8:	str	ip, [sp, #20]
   194fc:	bl	111bc <__fprintf_chk@plt>
   19500:	add	sp, sp, #32
   19504:	ldrd	r4, [sp]
   19508:	ldr	r6, [sp, #8]
   1950c:	add	sp, sp, #12
   19510:	pop	{pc}		; (ldr pc, [sp], #4)
   19514:	mov	r3, r2
   19518:	mov	r1, #1
   1951c:	str	ip, [sp]
   19520:	movw	r2, #48136	; 0xbc08
   19524:	movt	r2, #1
   19528:	bl	111bc <__fprintf_chk@plt>
   1952c:	b	193ec <__assert_fail@plt+0x811c>
   19530:	mov	r2, #5
   19534:	movw	r1, #48356	; 0xbce4
   19538:	movt	r1, #1
   1953c:	mov	r0, #0
   19540:	bl	11060 <dcgettext@plt>
   19544:	ldr	r3, [r5]
   19548:	mov	r2, r0
   1954c:	mov	r1, #1
   19550:	mov	r0, r4
   19554:	add	sp, sp, #32
   19558:	ldrd	r4, [sp]
   1955c:	ldr	r6, [sp, #8]
   19560:	ldr	lr, [sp, #12]
   19564:	add	sp, sp, #16
   19568:	b	111bc <__fprintf_chk@plt>
   1956c:	mov	r2, #5
   19570:	movw	r1, #48372	; 0xbcf4
   19574:	movt	r1, #1
   19578:	mov	r0, #0
   1957c:	bl	11060 <dcgettext@plt>
   19580:	ldm	r5, {r3, ip}
   19584:	mov	r2, r0
   19588:	mov	r1, #1
   1958c:	mov	r0, r4
   19590:	str	ip, [sp, #48]	; 0x30
   19594:	add	sp, sp, #32
   19598:	ldrd	r4, [sp]
   1959c:	ldr	r6, [sp, #8]
   195a0:	ldr	lr, [sp, #12]
   195a4:	add	sp, sp, #16
   195a8:	b	111bc <__fprintf_chk@plt>
   195ac:	mov	r2, #5
   195b0:	movw	r1, #48396	; 0xbd0c
   195b4:	movt	r1, #1
   195b8:	mov	r0, #0
   195bc:	bl	11060 <dcgettext@plt>
   195c0:	ldm	r5, {r3, lr}
   195c4:	mov	r2, r0
   195c8:	mov	r1, #1
   195cc:	mov	r0, r4
   195d0:	ldr	ip, [r5, #8]
   195d4:	str	lr, [sp, #48]	; 0x30
   195d8:	str	ip, [sp, #52]	; 0x34
   195dc:	add	sp, sp, #32
   195e0:	ldrd	r4, [sp]
   195e4:	ldr	r6, [sp, #8]
   195e8:	ldr	lr, [sp, #12]
   195ec:	add	sp, sp, #16
   195f0:	b	111bc <__fprintf_chk@plt>
   195f4:	mov	r2, #5
   195f8:	movw	r1, #48424	; 0xbd28
   195fc:	movt	r1, #1
   19600:	mov	r0, #0
   19604:	bl	11060 <dcgettext@plt>
   19608:	ldmib	r5, {r3, ip, lr}
   1960c:	mov	r2, r0
   19610:	mov	r1, #1
   19614:	mov	r0, r4
   19618:	str	r3, [sp]
   1961c:	ldr	r3, [r5]
   19620:	stmib	sp, {ip, lr}
   19624:	bl	111bc <__fprintf_chk@plt>
   19628:	b	19500 <__assert_fail@plt+0x8230>
   1962c:	mov	r2, #5
   19630:	movw	r1, #48456	; 0xbd48
   19634:	movt	r1, #1
   19638:	mov	r0, #0
   1963c:	bl	11060 <dcgettext@plt>
   19640:	ldmib	r5, {ip, lr}
   19644:	mov	r2, r0
   19648:	mov	r1, #1
   1964c:	mov	r0, r4
   19650:	ldr	r3, [r5, #16]
   19654:	str	ip, [sp]
   19658:	ldr	ip, [r5, #12]
   1965c:	str	r3, [sp, #12]
   19660:	ldr	r3, [r5]
   19664:	str	lr, [sp, #4]
   19668:	str	ip, [sp, #8]
   1966c:	bl	111bc <__fprintf_chk@plt>
   19670:	b	19500 <__assert_fail@plt+0x8230>
   19674:	mov	r2, #5
   19678:	movw	r1, #48492	; 0xbd6c
   1967c:	movt	r1, #1
   19680:	mov	r0, #0
   19684:	bl	11060 <dcgettext@plt>
   19688:	ldr	lr, [r5, #4]
   1968c:	mov	r2, r0
   19690:	mov	r1, #1
   19694:	mov	r0, r4
   19698:	ldr	r3, [r5, #8]
   1969c:	ldr	ip, [r5, #20]
   196a0:	str	lr, [sp]
   196a4:	ldr	lr, [r5, #12]
   196a8:	str	ip, [sp, #16]
   196ac:	ldr	ip, [r5, #16]
   196b0:	str	r3, [sp, #4]
   196b4:	ldr	r3, [r5]
   196b8:	str	lr, [sp, #8]
   196bc:	str	ip, [sp, #12]
   196c0:	bl	111bc <__fprintf_chk@plt>
   196c4:	b	19500 <__assert_fail@plt+0x8230>
   196c8:	mov	r2, #5
   196cc:	movw	r1, #48532	; 0xbd94
   196d0:	movt	r1, #1
   196d4:	mov	r0, #0
   196d8:	bl	11060 <dcgettext@plt>
   196dc:	ldmib	r5, {r3, ip}
   196e0:	mov	r2, r0
   196e4:	mov	r1, #1
   196e8:	mov	r0, r4
   196ec:	ldr	lr, [r5, #24]
   196f0:	str	r3, [sp]
   196f4:	ldr	r3, [r5, #12]
   196f8:	str	lr, [sp, #20]
   196fc:	ldr	lr, [r5, #20]
   19700:	str	ip, [sp, #4]
   19704:	ldr	ip, [r5, #16]
   19708:	str	r3, [sp, #8]
   1970c:	ldr	r3, [r5]
   19710:	str	ip, [sp, #12]
   19714:	str	lr, [sp, #16]
   19718:	bl	111bc <__fprintf_chk@plt>
   1971c:	b	19500 <__assert_fail@plt+0x8230>
   19720:	mov	r2, #5
   19724:	movw	r1, #48576	; 0xbdc0
   19728:	movt	r1, #1
   1972c:	mov	r0, #0
   19730:	bl	11060 <dcgettext@plt>
   19734:	ldmib	r5, {ip, lr}
   19738:	mov	r2, r0
   1973c:	mov	r1, #1
   19740:	mov	r0, r4
   19744:	ldr	r3, [r5, #28]
   19748:	str	ip, [sp]
   1974c:	ldr	ip, [r5, #12]
   19750:	str	r3, [sp, #24]
   19754:	ldr	r3, [r5, #24]
   19758:	str	lr, [sp, #4]
   1975c:	ldr	lr, [r5, #16]
   19760:	str	ip, [sp, #8]
   19764:	ldr	ip, [r5, #20]
   19768:	str	r3, [sp, #20]
   1976c:	ldr	r3, [r5]
   19770:	str	lr, [sp, #12]
   19774:	str	ip, [sp, #16]
   19778:	bl	111bc <__fprintf_chk@plt>
   1977c:	b	19500 <__assert_fail@plt+0x8230>
   19780:	movw	r1, #48676	; 0xbe24
   19784:	movt	r1, #1
   19788:	b	194a0 <__assert_fail@plt+0x81d0>
   1978c:	strd	r4, [sp, #-12]!
   19790:	str	lr, [sp, #8]
   19794:	sub	sp, sp, #12
   19798:	ldr	r5, [sp, #24]
   1979c:	ldr	ip, [r5]
   197a0:	cmp	ip, #0
   197a4:	beq	197c0 <__assert_fail@plt+0x84f0>
   197a8:	mov	lr, r5
   197ac:	mov	ip, #0
   197b0:	ldr	r4, [lr, #4]!
   197b4:	add	ip, ip, #1
   197b8:	cmp	r4, #0
   197bc:	bne	197b0 <__assert_fail@plt+0x84e0>
   197c0:	stm	sp, {r5, ip}
   197c4:	bl	193ac <__assert_fail@plt+0x80dc>
   197c8:	add	sp, sp, #12
   197cc:	ldrd	r4, [sp]
   197d0:	add	sp, sp, #8
   197d4:	pop	{pc}		; (ldr pc, [sp], #4)
   197d8:	strd	r4, [sp, #-16]!
   197dc:	mov	ip, #0
   197e0:	str	r6, [sp, #8]
   197e4:	str	lr, [sp, #12]
   197e8:	sub	sp, sp, #48	; 0x30
   197ec:	ldr	r5, [sp, #64]	; 0x40
   197f0:	add	r6, sp, #8
   197f4:	mov	r4, r6
   197f8:	ldr	lr, [r5], #4
   197fc:	cmp	lr, #0
   19800:	str	lr, [r4], #4
   19804:	beq	19814 <__assert_fail@plt+0x8544>
   19808:	add	ip, ip, #1
   1980c:	cmp	ip, #10
   19810:	bne	197f8 <__assert_fail@plt+0x8528>
   19814:	stm	sp, {r6, ip}
   19818:	bl	193ac <__assert_fail@plt+0x80dc>
   1981c:	add	sp, sp, #48	; 0x30
   19820:	ldrd	r4, [sp]
   19824:	ldr	r6, [sp, #8]
   19828:	add	sp, sp, #12
   1982c:	pop	{pc}		; (ldr pc, [sp], #4)
   19830:	push	{r3}		; (str r3, [sp, #-4]!)
   19834:	mov	ip, #0
   19838:	strd	r4, [sp, #-12]!
   1983c:	str	lr, [sp, #8]
   19840:	sub	sp, sp, #56	; 0x38
   19844:	add	r3, sp, #72	; 0x48
   19848:	add	r5, sp, #16
   1984c:	mov	r4, r3
   19850:	mov	lr, r5
   19854:	str	r3, [sp, #12]
   19858:	ldr	r3, [r4], #4
   1985c:	cmp	r3, #0
   19860:	str	r3, [lr], #4
   19864:	beq	19874 <__assert_fail@plt+0x85a4>
   19868:	add	ip, ip, #1
   1986c:	cmp	ip, #10
   19870:	bne	19858 <__assert_fail@plt+0x8588>
   19874:	ldr	r3, [sp, #68]	; 0x44
   19878:	stm	sp, {r5, ip}
   1987c:	bl	193ac <__assert_fail@plt+0x80dc>
   19880:	add	sp, sp, #56	; 0x38
   19884:	ldrd	r4, [sp]
   19888:	ldr	lr, [sp, #8]
   1988c:	add	sp, sp, #12
   19890:	add	sp, sp, #4
   19894:	bx	lr
   19898:	movw	r3, #53652	; 0xd194
   1989c:	movt	r3, #2
   198a0:	str	r4, [sp, #-8]!
   198a4:	mov	r0, #10
   198a8:	ldr	r1, [r3]
   198ac:	str	lr, [sp, #4]
   198b0:	bl	11054 <fputc_unlocked@plt>
   198b4:	mov	r2, #5
   198b8:	movw	r1, #48736	; 0xbe60
   198bc:	movt	r1, #1
   198c0:	mov	r0, #0
   198c4:	bl	11060 <dcgettext@plt>
   198c8:	mov	r1, r0
   198cc:	movw	r2, #47100	; 0xb7fc
   198d0:	movt	r2, #1
   198d4:	mov	r0, #1
   198d8:	bl	111a4 <__printf_chk@plt>
   198dc:	mov	r2, #5
   198e0:	movw	r1, #48756	; 0xbe74
   198e4:	movt	r1, #1
   198e8:	mov	r0, #0
   198ec:	bl	11060 <dcgettext@plt>
   198f0:	mov	r1, r0
   198f4:	movw	r3, #45484	; 0xb1ac
   198f8:	movt	r3, #1
   198fc:	movw	r2, #45524	; 0xb1d4
   19900:	movt	r2, #1
   19904:	mov	r0, #1
   19908:	bl	111a4 <__printf_chk@plt>
   1990c:	mov	r2, #5
   19910:	movw	r1, #48776	; 0xbe88
   19914:	movt	r1, #1
   19918:	mov	r0, #0
   1991c:	bl	11060 <dcgettext@plt>
   19920:	mov	r1, r0
   19924:	movw	r2, #48816	; 0xbeb0
   19928:	movt	r2, #1
   1992c:	mov	r0, #1
   19930:	ldr	r4, [sp]
   19934:	ldr	lr, [sp, #4]
   19938:	add	sp, sp, #8
   1993c:	b	111a4 <__printf_chk@plt>
   19940:	str	r4, [sp, #-8]!
   19944:	movw	r4, #54000	; 0xd2f0
   19948:	movt	r4, #2
   1994c:	ldrb	r3, [r4]
   19950:	str	lr, [sp, #4]
   19954:	cmp	r3, #0
   19958:	beq	1996c <__assert_fail@plt+0x869c>
   1995c:	ldrb	r0, [r4, #1]
   19960:	ldr	r4, [sp]
   19964:	add	sp, sp, #4
   19968:	pop	{pc}		; (ldr pc, [sp], #4)
   1996c:	bl	11084 <geteuid@plt>
   19970:	clz	r0, r0
   19974:	mov	r3, #1
   19978:	lsr	r0, r0, #5
   1997c:	strb	r3, [r4]
   19980:	strb	r0, [r4, #1]
   19984:	ldr	r4, [sp]
   19988:	add	sp, sp, #4
   1998c:	pop	{pc}		; (ldr pc, [sp], #4)
   19990:	str	r4, [sp, #-8]!
   19994:	str	lr, [sp, #4]
   19998:	bl	19fd0 <__assert_fail@plt+0x8d00>
   1999c:	cmp	r0, #0
   199a0:	beq	199b0 <__assert_fail@plt+0x86e0>
   199a4:	ldr	r4, [sp]
   199a8:	add	sp, sp, #4
   199ac:	pop	{pc}		; (ldr pc, [sp], #4)
   199b0:	bl	19e08 <__assert_fail@plt+0x8b38>
   199b4:	str	r4, [sp, #-8]!
   199b8:	str	lr, [sp, #4]
   199bc:	bl	19fd0 <__assert_fail@plt+0x8d00>
   199c0:	cmp	r0, #0
   199c4:	beq	199d4 <__assert_fail@plt+0x8704>
   199c8:	ldr	r4, [sp]
   199cc:	add	sp, sp, #4
   199d0:	pop	{pc}		; (ldr pc, [sp], #4)
   199d4:	bl	19e08 <__assert_fail@plt+0x8b38>
   199d8:	str	r4, [sp, #-8]!
   199dc:	str	lr, [sp, #4]
   199e0:	bl	19fd0 <__assert_fail@plt+0x8d00>
   199e4:	cmp	r0, #0
   199e8:	beq	199f8 <__assert_fail@plt+0x8728>
   199ec:	ldr	r4, [sp]
   199f0:	add	sp, sp, #4
   199f4:	pop	{pc}		; (ldr pc, [sp], #4)
   199f8:	bl	19e08 <__assert_fail@plt+0x8b38>
   199fc:	strd	r4, [sp, #-16]!
   19a00:	mov	r5, r0
   19a04:	mov	r4, r1
   19a08:	str	r6, [sp, #8]
   19a0c:	str	lr, [sp, #12]
   19a10:	bl	1a00c <__assert_fail@plt+0x8d3c>
   19a14:	cmp	r0, #0
   19a18:	beq	19a2c <__assert_fail@plt+0x875c>
   19a1c:	ldrd	r4, [sp]
   19a20:	ldr	r6, [sp, #8]
   19a24:	add	sp, sp, #12
   19a28:	pop	{pc}		; (ldr pc, [sp], #4)
   19a2c:	adds	r4, r4, #0
   19a30:	movne	r4, #1
   19a34:	cmp	r5, #0
   19a38:	moveq	r4, #1
   19a3c:	cmp	r4, #0
   19a40:	beq	19a1c <__assert_fail@plt+0x874c>
   19a44:	bl	19e08 <__assert_fail@plt+0x8b38>
   19a48:	cmp	r1, #0
   19a4c:	orreq	r1, r1, #1
   19a50:	str	r4, [sp, #-8]!
   19a54:	str	lr, [sp, #4]
   19a58:	bl	1a00c <__assert_fail@plt+0x8d3c>
   19a5c:	cmp	r0, #0
   19a60:	beq	19a70 <__assert_fail@plt+0x87a0>
   19a64:	ldr	r4, [sp]
   19a68:	add	sp, sp, #4
   19a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   19a70:	bl	19e08 <__assert_fail@plt+0x8b38>
   19a74:	strd	r4, [sp, #-16]!
   19a78:	mov	r4, r0
   19a7c:	mov	r5, r2
   19a80:	str	r6, [sp, #8]
   19a84:	mov	r6, r1
   19a88:	str	lr, [sp, #12]
   19a8c:	bl	1a5a4 <__assert_fail@plt+0x92d4>
   19a90:	cmp	r0, #0
   19a94:	beq	19aa8 <__assert_fail@plt+0x87d8>
   19a98:	ldrd	r4, [sp]
   19a9c:	ldr	r6, [sp, #8]
   19aa0:	add	sp, sp, #12
   19aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   19aa8:	cmp	r4, #0
   19aac:	beq	19abc <__assert_fail@plt+0x87ec>
   19ab0:	cmp	r6, #0
   19ab4:	cmpne	r5, #0
   19ab8:	beq	19a98 <__assert_fail@plt+0x87c8>
   19abc:	bl	19e08 <__assert_fail@plt+0x8b38>
   19ac0:	b	19a74 <__assert_fail@plt+0x87a4>
   19ac4:	cmp	r2, #0
   19ac8:	cmpne	r1, #0
   19acc:	str	r4, [sp, #-8]!
   19ad0:	moveq	r2, #1
   19ad4:	str	lr, [sp, #4]
   19ad8:	moveq	r1, r2
   19adc:	bl	1a5a4 <__assert_fail@plt+0x92d4>
   19ae0:	cmp	r0, #0
   19ae4:	beq	19af4 <__assert_fail@plt+0x8824>
   19ae8:	ldr	r4, [sp]
   19aec:	add	sp, sp, #4
   19af0:	pop	{pc}		; (ldr pc, [sp], #4)
   19af4:	bl	19e08 <__assert_fail@plt+0x8b38>
   19af8:	mov	r2, r1
   19afc:	mov	r1, r0
   19b00:	mov	r0, #0
   19b04:	b	19a74 <__assert_fail@plt+0x87a4>
   19b08:	mov	r2, r1
   19b0c:	mov	r1, r0
   19b10:	mov	r0, #0
   19b14:	b	19ac4 <__assert_fail@plt+0x87f4>
   19b18:	cmp	r0, #0
   19b1c:	strd	r4, [sp, #-16]!
   19b20:	mov	r5, r1
   19b24:	ldr	r4, [r1]
   19b28:	str	r6, [sp, #8]
   19b2c:	str	lr, [sp, #12]
   19b30:	beq	19b60 <__assert_fail@plt+0x8890>
   19b34:	lsr	r3, r4, #1
   19b38:	add	r3, r3, #1
   19b3c:	adds	r4, r4, r3
   19b40:	bcs	19b7c <__assert_fail@plt+0x88ac>
   19b44:	mov	r1, r4
   19b48:	bl	19a74 <__assert_fail@plt+0x87a4>
   19b4c:	ldr	r6, [sp, #8]
   19b50:	str	r4, [r5]
   19b54:	ldrd	r4, [sp]
   19b58:	add	sp, sp, #12
   19b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b60:	cmp	r4, #0
   19b64:	bne	19b44 <__assert_fail@plt+0x8874>
   19b68:	mov	r4, #64	; 0x40
   19b6c:	udiv	r4, r4, r2
   19b70:	cmp	r2, #64	; 0x40
   19b74:	addhi	r4, r4, #1
   19b78:	b	19b44 <__assert_fail@plt+0x8874>
   19b7c:	bl	19e08 <__assert_fail@plt+0x8b38>
   19b80:	mov	r2, #1
   19b84:	b	19b18 <__assert_fail@plt+0x8848>
   19b88:	ldr	ip, [r1]
   19b8c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19b90:	mov	r5, r1
   19b94:	strd	r6, [sp, #8]
   19b98:	str	lr, [sp, #28]
   19b9c:	strd	r8, [sp, #16]
   19ba0:	asr	lr, ip, #1
   19ba4:	ldr	r8, [sp, #32]
   19ba8:	str	sl, [sp, #24]
   19bac:	adds	r4, ip, lr
   19bb0:	mvn	lr, r3
   19bb4:	lsr	lr, lr, #31
   19bb8:	mvnvs	r4, #-2147483648	; 0x80000000
   19bbc:	cmp	r3, r4
   19bc0:	movge	r1, #0
   19bc4:	andlt	r1, lr, #1
   19bc8:	cmp	r1, #0
   19bcc:	movne	r4, r3
   19bd0:	smull	r6, r7, r4, r8
   19bd4:	cmp	r7, r6, asr #31
   19bd8:	bne	19c60 <__assert_fail@plt+0x8990>
   19bdc:	cmp	r6, #63	; 0x3f
   19be0:	mov	r1, r6
   19be4:	ble	19c48 <__assert_fail@plt+0x8978>
   19be8:	cmp	r0, #0
   19bec:	sub	r6, r4, ip
   19bf0:	streq	r0, [r5]
   19bf4:	cmp	r6, r2
   19bf8:	bge	19c28 <__assert_fail@plt+0x8958>
   19bfc:	adds	r4, ip, r2
   19c00:	bvs	19c5c <__assert_fail@plt+0x898c>
   19c04:	cmp	r4, r3
   19c08:	movle	r3, #0
   19c0c:	andgt	r3, lr, #1
   19c10:	cmp	r3, #0
   19c14:	bne	19c5c <__assert_fail@plt+0x898c>
   19c18:	smull	r8, r9, r4, r8
   19c1c:	cmp	r9, r8, asr #31
   19c20:	mov	r1, r8
   19c24:	bne	19c5c <__assert_fail@plt+0x898c>
   19c28:	bl	199fc <__assert_fail@plt+0x872c>
   19c2c:	ldrd	r6, [sp, #8]
   19c30:	ldrd	r8, [sp, #16]
   19c34:	ldr	sl, [sp, #24]
   19c38:	str	r4, [r5]
   19c3c:	ldrd	r4, [sp]
   19c40:	add	sp, sp, #28
   19c44:	pop	{pc}		; (ldr pc, [sp], #4)
   19c48:	mov	r6, #64	; 0x40
   19c4c:	sdiv	r4, r6, r8
   19c50:	mls	r1, r8, r4, r6
   19c54:	sub	r1, r6, r1
   19c58:	b	19be8 <__assert_fail@plt+0x8918>
   19c5c:	bl	19e08 <__assert_fail@plt+0x8b38>
   19c60:	mvn	r6, #-2147483648	; 0x80000000
   19c64:	b	19c4c <__assert_fail@plt+0x897c>
   19c68:	mov	r1, #1
   19c6c:	str	r4, [sp, #-8]!
   19c70:	str	lr, [sp, #4]
   19c74:	bl	19f5c <__assert_fail@plt+0x8c8c>
   19c78:	cmp	r0, #0
   19c7c:	beq	19c8c <__assert_fail@plt+0x89bc>
   19c80:	ldr	r4, [sp]
   19c84:	add	sp, sp, #4
   19c88:	pop	{pc}		; (ldr pc, [sp], #4)
   19c8c:	bl	19e08 <__assert_fail@plt+0x8b38>
   19c90:	mov	r1, #1
   19c94:	str	r4, [sp, #-8]!
   19c98:	str	lr, [sp, #4]
   19c9c:	bl	19f5c <__assert_fail@plt+0x8c8c>
   19ca0:	cmp	r0, #0
   19ca4:	beq	19cb4 <__assert_fail@plt+0x89e4>
   19ca8:	ldr	r4, [sp]
   19cac:	add	sp, sp, #4
   19cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   19cb4:	bl	19e08 <__assert_fail@plt+0x8b38>
   19cb8:	str	r4, [sp, #-8]!
   19cbc:	str	lr, [sp, #4]
   19cc0:	bl	19f5c <__assert_fail@plt+0x8c8c>
   19cc4:	cmp	r0, #0
   19cc8:	beq	19cd8 <__assert_fail@plt+0x8a08>
   19ccc:	ldr	r4, [sp]
   19cd0:	add	sp, sp, #4
   19cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   19cd8:	bl	19e08 <__assert_fail@plt+0x8b38>
   19cdc:	str	r4, [sp, #-8]!
   19ce0:	str	lr, [sp, #4]
   19ce4:	bl	19f5c <__assert_fail@plt+0x8c8c>
   19ce8:	cmp	r0, #0
   19cec:	beq	19cfc <__assert_fail@plt+0x8a2c>
   19cf0:	ldr	r4, [sp]
   19cf4:	add	sp, sp, #4
   19cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cfc:	bl	19e08 <__assert_fail@plt+0x8b38>
   19d00:	strd	r4, [sp, #-16]!
   19d04:	mov	r4, r1
   19d08:	str	r6, [sp, #8]
   19d0c:	mov	r6, r0
   19d10:	mov	r0, r1
   19d14:	str	lr, [sp, #12]
   19d18:	bl	19fd0 <__assert_fail@plt+0x8d00>
   19d1c:	subs	r5, r0, #0
   19d20:	beq	19d44 <__assert_fail@plt+0x8a74>
   19d24:	mov	r2, r4
   19d28:	mov	r1, r6
   19d2c:	bl	11030 <memcpy@plt>
   19d30:	mov	r0, r5
   19d34:	ldrd	r4, [sp]
   19d38:	ldr	r6, [sp, #8]
   19d3c:	add	sp, sp, #12
   19d40:	pop	{pc}		; (ldr pc, [sp], #4)
   19d44:	bl	19e08 <__assert_fail@plt+0x8b38>
   19d48:	strd	r4, [sp, #-16]!
   19d4c:	mov	r4, r1
   19d50:	str	r6, [sp, #8]
   19d54:	mov	r6, r0
   19d58:	mov	r0, r1
   19d5c:	str	lr, [sp, #12]
   19d60:	bl	19fd0 <__assert_fail@plt+0x8d00>
   19d64:	subs	r5, r0, #0
   19d68:	beq	19d8c <__assert_fail@plt+0x8abc>
   19d6c:	mov	r2, r4
   19d70:	mov	r1, r6
   19d74:	bl	11030 <memcpy@plt>
   19d78:	mov	r0, r5
   19d7c:	ldrd	r4, [sp]
   19d80:	ldr	r6, [sp, #8]
   19d84:	add	sp, sp, #12
   19d88:	pop	{pc}		; (ldr pc, [sp], #4)
   19d8c:	bl	19e08 <__assert_fail@plt+0x8b38>
   19d90:	strd	r4, [sp, #-16]!
   19d94:	mov	r4, r1
   19d98:	str	r6, [sp, #8]
   19d9c:	mov	r6, r0
   19da0:	add	r0, r1, #1
   19da4:	str	lr, [sp, #12]
   19da8:	bl	19fd0 <__assert_fail@plt+0x8d00>
   19dac:	subs	r5, r0, #0
   19db0:	beq	19ddc <__assert_fail@plt+0x8b0c>
   19db4:	mov	r3, #0
   19db8:	mov	r1, r6
   19dbc:	mov	r2, r4
   19dc0:	strb	r3, [r5, r4]
   19dc4:	bl	11030 <memcpy@plt>
   19dc8:	mov	r0, r5
   19dcc:	ldrd	r4, [sp]
   19dd0:	ldr	r6, [sp, #8]
   19dd4:	add	sp, sp, #12
   19dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ddc:	bl	19e08 <__assert_fail@plt+0x8b38>
   19de0:	str	r4, [sp, #-8]!
   19de4:	mov	r4, r0
   19de8:	str	lr, [sp, #4]
   19dec:	bl	11168 <strlen@plt>
   19df0:	add	r1, r0, #1
   19df4:	mov	r0, r4
   19df8:	ldr	r4, [sp]
   19dfc:	ldr	lr, [sp, #4]
   19e00:	add	sp, sp, #8
   19e04:	b	19d00 <__assert_fail@plt+0x8a30>
   19e08:	movw	r3, #53556	; 0xd134
   19e0c:	movt	r3, #2
   19e10:	str	r4, [sp, #-8]!
   19e14:	ldr	r4, [r3]
   19e18:	mov	r2, #5
   19e1c:	movw	r1, #48896	; 0xbf00
   19e20:	movt	r1, #1
   19e24:	mov	r0, #0
   19e28:	str	lr, [sp, #4]
   19e2c:	bl	11060 <dcgettext@plt>
   19e30:	mov	r3, r0
   19e34:	movw	r2, #47516	; 0xb99c
   19e38:	movt	r2, #1
   19e3c:	mov	r1, #0
   19e40:	mov	r0, r4
   19e44:	bl	110f0 <error@plt>
   19e48:	bl	11294 <abort@plt>
   19e4c:	orr	r1, r1, #512	; 0x200
   19e50:	str	r4, [sp, #-8]!
   19e54:	str	lr, [sp, #4]
   19e58:	bl	14f54 <__assert_fail@plt+0x3c84>
   19e5c:	cmp	r0, #0
   19e60:	beq	19e70 <__assert_fail@plt+0x8ba0>
   19e64:	ldr	r4, [sp]
   19e68:	add	sp, sp, #4
   19e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e70:	bl	11180 <__errno_location@plt>
   19e74:	ldr	r3, [r0]
   19e78:	cmp	r3, #22
   19e7c:	beq	19e84 <__assert_fail@plt+0x8bb4>
   19e80:	bl	19e08 <__assert_fail@plt+0x8b38>
   19e84:	movw	r3, #48916	; 0xbf14
   19e88:	movt	r3, #1
   19e8c:	movw	r1, #48928	; 0xbf20
   19e90:	movt	r1, #1
   19e94:	movw	r0, #48940	; 0xbf2c
   19e98:	movt	r0, #1
   19e9c:	mov	r2, #41	; 0x29
   19ea0:	bl	112d0 <__assert_fail@plt>
   19ea4:	ldr	r3, [r0, #48]	; 0x30
   19ea8:	and	r3, r3, #17
   19eac:	cmp	r3, #16
   19eb0:	beq	19ed4 <__assert_fail@plt+0x8c04>
   19eb4:	cmp	r3, #17
   19eb8:	beq	19ec4 <__assert_fail@plt+0x8bf4>
   19ebc:	mov	r0, #0
   19ec0:	bx	lr
   19ec4:	ldr	r0, [r1, #48]	; 0x30
   19ec8:	adds	r0, r0, #0
   19ecc:	movne	r0, #1
   19ed0:	bx	lr
   19ed4:	mov	r0, #1
   19ed8:	bx	lr
   19edc:	movw	r3, #53648	; 0xd190
   19ee0:	movt	r3, #2
   19ee4:	str	r4, [sp, #-8]!
   19ee8:	mov	r4, #0
   19eec:	ldr	r3, [r3]
   19ef0:	mov	r2, #10
   19ef4:	str	lr, [sp, #4]
   19ef8:	sub	sp, sp, #8
   19efc:	add	r1, sp, #4
   19f00:	mov	r0, sp
   19f04:	str	r4, [sp]
   19f08:	str	r4, [sp, #4]
   19f0c:	bl	10fd0 <__getdelim@plt>
   19f10:	subs	r3, r0, #0
   19f14:	ble	19f40 <__assert_fail@plt+0x8c70>
   19f18:	ldr	r0, [sp]
   19f1c:	sub	r3, r3, #1
   19f20:	ldrb	r2, [r0, r3]
   19f24:	cmp	r2, #10
   19f28:	strbeq	r4, [r0, r3]
   19f2c:	ldreq	r0, [sp]
   19f30:	bl	111ec <rpmatch@plt>
   19f34:	cmp	r0, #0
   19f38:	movle	r4, #0
   19f3c:	movgt	r4, #1
   19f40:	ldr	r0, [sp]
   19f44:	bl	138e0 <__assert_fail@plt+0x2610>
   19f48:	mov	r0, r4
   19f4c:	add	sp, sp, #8
   19f50:	ldr	r4, [sp]
   19f54:	add	sp, sp, #4
   19f58:	pop	{pc}		; (ldr pc, [sp], #4)
   19f5c:	cmp	r1, #0
   19f60:	cmpne	r0, #0
   19f64:	beq	19fb0 <__assert_fail@plt+0x8ce0>
   19f68:	strd	r4, [sp, #-16]!
   19f6c:	umull	r4, r5, r0, r1
   19f70:	str	r6, [sp, #8]
   19f74:	str	lr, [sp, #12]
   19f78:	adds	r3, r5, #0
   19f7c:	movne	r3, #1
   19f80:	cmp	r4, #0
   19f84:	blt	19f90 <__assert_fail@plt+0x8cc0>
   19f88:	cmp	r3, #0
   19f8c:	beq	19fbc <__assert_fail@plt+0x8cec>
   19f90:	bl	11180 <__errno_location@plt>
   19f94:	mov	r3, #12
   19f98:	ldrd	r4, [sp]
   19f9c:	ldr	r6, [sp, #8]
   19fa0:	add	sp, sp, #12
   19fa4:	str	r3, [r0]
   19fa8:	mov	r0, #0
   19fac:	pop	{pc}		; (ldr pc, [sp], #4)
   19fb0:	mov	r1, #1
   19fb4:	mov	r0, r1
   19fb8:	b	10fac <calloc@plt>
   19fbc:	ldrd	r4, [sp]
   19fc0:	ldr	r6, [sp, #8]
   19fc4:	ldr	lr, [sp, #12]
   19fc8:	add	sp, sp, #16
   19fcc:	b	10fac <calloc@plt>
   19fd0:	cmp	r0, #0
   19fd4:	beq	19fe0 <__assert_fail@plt+0x8d10>
   19fd8:	blt	19fe8 <__assert_fail@plt+0x8d18>
   19fdc:	b	11108 <malloc@plt>
   19fe0:	mov	r0, #1
   19fe4:	b	11108 <malloc@plt>
   19fe8:	str	r4, [sp, #-8]!
   19fec:	str	lr, [sp, #4]
   19ff0:	bl	11180 <__errno_location@plt>
   19ff4:	mov	r3, #12
   19ff8:	ldr	r4, [sp]
   19ffc:	add	sp, sp, #4
   1a000:	str	r3, [r0]
   1a004:	mov	r0, #0
   1a008:	pop	{pc}		; (ldr pc, [sp], #4)
   1a00c:	cmp	r0, #0
   1a010:	beq	1a038 <__assert_fail@plt+0x8d68>
   1a014:	cmp	r1, #0
   1a018:	str	r4, [sp, #-8]!
   1a01c:	str	lr, [sp, #4]
   1a020:	beq	1a040 <__assert_fail@plt+0x8d70>
   1a024:	blt	1a054 <__assert_fail@plt+0x8d84>
   1a028:	ldr	r4, [sp]
   1a02c:	ldr	lr, [sp, #4]
   1a030:	add	sp, sp, #8
   1a034:	b	1106c <realloc@plt>
   1a038:	mov	r0, r1
   1a03c:	b	19fd0 <__assert_fail@plt+0x8d00>
   1a040:	bl	138e0 <__assert_fail@plt+0x2610>
   1a044:	ldr	r4, [sp]
   1a048:	add	sp, sp, #4
   1a04c:	mov	r0, #0
   1a050:	pop	{pc}		; (ldr pc, [sp], #4)
   1a054:	bl	11180 <__errno_location@plt>
   1a058:	mov	r3, #12
   1a05c:	str	r3, [r0]
   1a060:	b	1a044 <__assert_fail@plt+0x8d74>
   1a064:	strd	r4, [sp, #-16]!
   1a068:	mov	r4, r0
   1a06c:	str	r6, [sp, #8]
   1a070:	str	lr, [sp, #12]
   1a074:	bl	110d8 <__fpending@plt>
   1a078:	ldr	r5, [r4]
   1a07c:	mov	r6, r0
   1a080:	mov	r0, r4
   1a084:	bl	1a20c <__assert_fail@plt+0x8f3c>
   1a088:	mov	r4, r0
   1a08c:	and	r5, r5, #32
   1a090:	cmp	r5, #0
   1a094:	bne	1a0cc <__assert_fail@plt+0x8dfc>
   1a098:	cmp	r0, #0
   1a09c:	beq	1a0b8 <__assert_fail@plt+0x8de8>
   1a0a0:	cmp	r6, #0
   1a0a4:	bne	1a0e4 <__assert_fail@plt+0x8e14>
   1a0a8:	bl	11180 <__errno_location@plt>
   1a0ac:	ldr	r4, [r0]
   1a0b0:	subs	r4, r4, #9
   1a0b4:	mvnne	r4, #0
   1a0b8:	mov	r0, r4
   1a0bc:	ldrd	r4, [sp]
   1a0c0:	ldr	r6, [sp, #8]
   1a0c4:	add	sp, sp, #12
   1a0c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0cc:	cmp	r0, #0
   1a0d0:	bne	1a0e4 <__assert_fail@plt+0x8e14>
   1a0d4:	bl	11180 <__errno_location@plt>
   1a0d8:	str	r4, [r0]
   1a0dc:	mvn	r4, #0
   1a0e0:	b	1a0b8 <__assert_fail@plt+0x8de8>
   1a0e4:	mvn	r4, #0
   1a0e8:	b	1a0b8 <__assert_fail@plt+0x8de8>
   1a0ec:	movw	r3, #62998	; 0xf616
   1a0f0:	movt	r3, #149	; 0x95
   1a0f4:	strd	r4, [sp, #-8]!
   1a0f8:	mov	r4, #0
   1a0fc:	mov	r5, #0
   1a100:	strd	r4, [r0, #16]
   1a104:	str	r3, [r0, #24]
   1a108:	ldrd	r4, [sp]
   1a10c:	add	sp, sp, #8
   1a110:	bx	lr
   1a114:	ldr	r2, [r0, #24]
   1a118:	movw	r3, #62998	; 0xf616
   1a11c:	movt	r3, #149	; 0x95
   1a120:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a124:	strd	r6, [sp, #8]
   1a128:	strd	r8, [sp, #16]
   1a12c:	strd	sl, [sp, #24]
   1a130:	cmp	r2, r3
   1a134:	str	lr, [sp, #32]
   1a138:	sub	sp, sp, #4
   1a13c:	bne	1a1ec <__assert_fail@plt+0x8f1c>
   1a140:	ldrd	r6, [r0, #16]
   1a144:	ldrd	sl, [r1, #96]	; 0x60
   1a148:	orrs	r3, r6, r7
   1a14c:	beq	1a1a0 <__assert_fail@plt+0x8ed0>
   1a150:	ldrd	r2, [r0]
   1a154:	cmp	r3, fp
   1a158:	cmpeq	r2, sl
   1a15c:	beq	1a1c0 <__assert_fail@plt+0x8ef0>
   1a160:	adds	r8, r6, #1
   1a164:	adc	r9, r7, #0
   1a168:	and	r2, r6, r8
   1a16c:	and	r3, r7, r9
   1a170:	orrs	r3, r2, r3
   1a174:	strd	r8, [r0, #16]
   1a178:	movne	r1, #0
   1a17c:	beq	1a1dc <__assert_fail@plt+0x8f0c>
   1a180:	mov	r0, r1
   1a184:	add	sp, sp, #4
   1a188:	ldrd	r4, [sp]
   1a18c:	ldrd	r6, [sp, #8]
   1a190:	ldrd	r8, [sp, #16]
   1a194:	ldrd	sl, [sp, #24]
   1a198:	add	sp, sp, #32
   1a19c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1a0:	mov	r2, #1
   1a1a4:	mov	r3, #0
   1a1a8:	strd	r2, [r0, #16]
   1a1ac:	ldrd	r2, [r1]
   1a1b0:	mov	r1, #0
   1a1b4:	strd	sl, [r0]
   1a1b8:	strd	r2, [r0, #8]
   1a1bc:	b	1a180 <__assert_fail@plt+0x8eb0>
   1a1c0:	ldrd	r4, [r1]
   1a1c4:	ldrd	r2, [r0, #8]
   1a1c8:	cmp	r5, r3
   1a1cc:	cmpeq	r4, r2
   1a1d0:	bne	1a160 <__assert_fail@plt+0x8e90>
   1a1d4:	mov	r1, #1
   1a1d8:	b	1a180 <__assert_fail@plt+0x8eb0>
   1a1dc:	orrs	r3, r8, r9
   1a1e0:	bne	1a1ac <__assert_fail@plt+0x8edc>
   1a1e4:	mov	r1, #1
   1a1e8:	b	1a180 <__assert_fail@plt+0x8eb0>
   1a1ec:	movw	r3, #48956	; 0xbf3c
   1a1f0:	movt	r3, #1
   1a1f4:	movw	r1, #48968	; 0xbf48
   1a1f8:	movt	r1, #1
   1a1fc:	movw	r0, #48988	; 0xbf5c
   1a200:	movt	r0, #1
   1a204:	mov	r2, #60	; 0x3c
   1a208:	bl	112d0 <__assert_fail@plt>
   1a20c:	strd	r4, [sp, #-12]!
   1a210:	mov	r4, r0
   1a214:	str	lr, [sp, #8]
   1a218:	sub	sp, sp, #12
   1a21c:	bl	111b0 <fileno@plt>
   1a220:	cmp	r0, #0
   1a224:	mov	r0, r4
   1a228:	blt	1a2ac <__assert_fail@plt+0x8fdc>
   1a22c:	bl	11120 <__freading@plt>
   1a230:	cmp	r0, #0
   1a234:	bne	1a278 <__assert_fail@plt+0x8fa8>
   1a238:	mov	r0, r4
   1a23c:	bl	13620 <__assert_fail@plt+0x2350>
   1a240:	cmp	r0, #0
   1a244:	beq	1a2a8 <__assert_fail@plt+0x8fd8>
   1a248:	bl	11180 <__errno_location@plt>
   1a24c:	mov	r5, r0
   1a250:	mov	r0, r4
   1a254:	ldr	r4, [r5]
   1a258:	bl	111c8 <fclose@plt>
   1a25c:	cmp	r4, #0
   1a260:	mvnne	r0, #0
   1a264:	strne	r4, [r5]
   1a268:	add	sp, sp, #12
   1a26c:	ldrd	r4, [sp]
   1a270:	add	sp, sp, #8
   1a274:	pop	{pc}		; (ldr pc, [sp], #4)
   1a278:	mov	r0, r4
   1a27c:	bl	111b0 <fileno@plt>
   1a280:	mov	r1, #1
   1a284:	mov	r2, #0
   1a288:	mov	r3, #0
   1a28c:	str	r1, [sp]
   1a290:	bl	110c0 <lseek64@plt>
   1a294:	mvn	r3, #0
   1a298:	mvn	r2, #0
   1a29c:	cmp	r1, r3
   1a2a0:	cmpeq	r0, r2
   1a2a4:	bne	1a238 <__assert_fail@plt+0x8f68>
   1a2a8:	mov	r0, r4
   1a2ac:	add	sp, sp, #12
   1a2b0:	ldrd	r4, [sp]
   1a2b4:	ldr	lr, [sp, #8]
   1a2b8:	add	sp, sp, #12
   1a2bc:	b	111c8 <fclose@plt>
   1a2c0:	push	{r1, r2, r3}
   1a2c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a2c8:	strd	r6, [sp, #8]
   1a2cc:	str	lr, [sp, #16]
   1a2d0:	sub	sp, sp, #8
   1a2d4:	ldr	r1, [sp, #28]
   1a2d8:	add	r2, sp, #32
   1a2dc:	str	r2, [sp, #4]
   1a2e0:	cmp	r1, #0
   1a2e4:	beq	1a3c0 <__assert_fail@plt+0x90f0>
   1a2e8:	movw	r3, #1030	; 0x406
   1a2ec:	mov	r6, r0
   1a2f0:	cmp	r1, r3
   1a2f4:	beq	1a3d0 <__assert_fail@plt+0x9100>
   1a2f8:	cmp	r1, #11
   1a2fc:	beq	1a378 <__assert_fail@plt+0x90a8>
   1a300:	ble	1a358 <__assert_fail@plt+0x9088>
   1a304:	movw	r2, #1031	; 0x407
   1a308:	cmp	r1, r2
   1a30c:	bgt	1a394 <__assert_fail@plt+0x90c4>
   1a310:	cmp	r1, r3
   1a314:	bge	1a324 <__assert_fail@plt+0x9054>
   1a318:	movw	r3, #1025	; 0x401
   1a31c:	cmp	r1, r3
   1a320:	beq	1a378 <__assert_fail@plt+0x90a8>
   1a324:	ldr	r3, [sp, #4]
   1a328:	mov	r0, r6
   1a32c:	ldr	r2, [r3]
   1a330:	bl	111e0 <fcntl64@plt>
   1a334:	mov	r4, r0
   1a338:	mov	r0, r4
   1a33c:	add	sp, sp, #8
   1a340:	ldrd	r4, [sp]
   1a344:	ldrd	r6, [sp, #8]
   1a348:	ldr	lr, [sp, #16]
   1a34c:	add	sp, sp, #20
   1a350:	add	sp, sp, #12
   1a354:	bx	lr
   1a358:	cmp	r1, #4
   1a35c:	beq	1a324 <__assert_fail@plt+0x9054>
   1a360:	bgt	1a388 <__assert_fail@plt+0x90b8>
   1a364:	cmp	r1, #2
   1a368:	beq	1a324 <__assert_fail@plt+0x9054>
   1a36c:	bgt	1a378 <__assert_fail@plt+0x90a8>
   1a370:	cmp	r1, #1
   1a374:	bne	1a324 <__assert_fail@plt+0x9054>
   1a378:	mov	r0, r6
   1a37c:	bl	111e0 <fcntl64@plt>
   1a380:	mov	r4, r0
   1a384:	b	1a338 <__assert_fail@plt+0x9068>
   1a388:	cmp	r1, #9
   1a38c:	bne	1a324 <__assert_fail@plt+0x9054>
   1a390:	b	1a378 <__assert_fail@plt+0x90a8>
   1a394:	movw	r3, #1033	; 0x409
   1a398:	cmp	r1, r3
   1a39c:	beq	1a324 <__assert_fail@plt+0x9054>
   1a3a0:	blt	1a378 <__assert_fail@plt+0x90a8>
   1a3a4:	movw	r3, #1034	; 0x40a
   1a3a8:	cmp	r1, r3
   1a3ac:	bne	1a324 <__assert_fail@plt+0x9054>
   1a3b0:	mov	r0, r6
   1a3b4:	bl	111e0 <fcntl64@plt>
   1a3b8:	mov	r4, r0
   1a3bc:	b	1a338 <__assert_fail@plt+0x9068>
   1a3c0:	ldr	r2, [sp, #32]
   1a3c4:	bl	111e0 <fcntl64@plt>
   1a3c8:	mov	r4, r0
   1a3cc:	b	1a338 <__assert_fail@plt+0x9068>
   1a3d0:	movw	r5, #54004	; 0xd2f4
   1a3d4:	movt	r5, #2
   1a3d8:	ldr	r7, [r2]
   1a3dc:	add	r2, sp, #36	; 0x24
   1a3e0:	ldr	r3, [r5]
   1a3e4:	str	r2, [sp, #4]
   1a3e8:	mov	r2, r7
   1a3ec:	cmp	r3, #0
   1a3f0:	blt	1a40c <__assert_fail@plt+0x913c>
   1a3f4:	bl	111e0 <fcntl64@plt>
   1a3f8:	subs	r4, r0, #0
   1a3fc:	blt	1a474 <__assert_fail@plt+0x91a4>
   1a400:	mov	r3, #1
   1a404:	str	r3, [r5]
   1a408:	b	1a338 <__assert_fail@plt+0x9068>
   1a40c:	mov	r1, #0
   1a410:	bl	111e0 <fcntl64@plt>
   1a414:	subs	r4, r0, #0
   1a418:	blt	1a338 <__assert_fail@plt+0x9068>
   1a41c:	ldr	r3, [r5]
   1a420:	cmn	r3, #1
   1a424:	bne	1a338 <__assert_fail@plt+0x9068>
   1a428:	mov	r1, #1
   1a42c:	mov	r0, r4
   1a430:	bl	111e0 <fcntl64@plt>
   1a434:	subs	r2, r0, #0
   1a438:	blt	1a454 <__assert_fail@plt+0x9184>
   1a43c:	orr	r2, r2, #1
   1a440:	mov	r1, #2
   1a444:	mov	r0, r4
   1a448:	bl	111e0 <fcntl64@plt>
   1a44c:	cmn	r0, #1
   1a450:	bne	1a338 <__assert_fail@plt+0x9068>
   1a454:	bl	11180 <__errno_location@plt>
   1a458:	mov	r5, r0
   1a45c:	mov	r0, r4
   1a460:	ldr	r6, [r5]
   1a464:	mvn	r4, #0
   1a468:	bl	112a0 <close@plt>
   1a46c:	str	r6, [r5]
   1a470:	b	1a338 <__assert_fail@plt+0x9068>
   1a474:	bl	11180 <__errno_location@plt>
   1a478:	ldr	r3, [r0]
   1a47c:	cmp	r3, #22
   1a480:	bne	1a400 <__assert_fail@plt+0x9130>
   1a484:	mov	r2, r7
   1a488:	mov	r0, r6
   1a48c:	mov	r1, #0
   1a490:	bl	111e0 <fcntl64@plt>
   1a494:	subs	r4, r0, #0
   1a498:	mvnge	r3, #0
   1a49c:	strge	r3, [r5]
   1a4a0:	bge	1a428 <__assert_fail@plt+0x9158>
   1a4a4:	b	1a338 <__assert_fail@plt+0x9068>
   1a4a8:	push	{r1, r2, r3}
   1a4ac:	push	{lr}		; (str lr, [sp, #-4]!)
   1a4b0:	sub	sp, sp, #8
   1a4b4:	ldr	r1, [sp, #12]
   1a4b8:	ands	r2, r1, #64	; 0x40
   1a4bc:	bne	1a4d8 <__assert_fail@plt+0x9208>
   1a4c0:	bl	110fc <open64@plt>
   1a4c4:	bl	19350 <__assert_fail@plt+0x8080>
   1a4c8:	add	sp, sp, #8
   1a4cc:	pop	{lr}		; (ldr lr, [sp], #4)
   1a4d0:	add	sp, sp, #12
   1a4d4:	bx	lr
   1a4d8:	add	r3, sp, #16
   1a4dc:	ldr	r2, [sp, #16]
   1a4e0:	str	r3, [sp, #4]
   1a4e4:	b	1a4c0 <__assert_fail@plt+0x91f0>
   1a4e8:	mov	r0, #14
   1a4ec:	str	r4, [sp, #-8]!
   1a4f0:	str	lr, [sp, #4]
   1a4f4:	bl	1121c <nl_langinfo@plt>
   1a4f8:	cmp	r0, #0
   1a4fc:	beq	1a520 <__assert_fail@plt+0x9250>
   1a500:	ldrb	r2, [r0]
   1a504:	movw	r3, #49012	; 0xbf74
   1a508:	movt	r3, #1
   1a50c:	ldr	r4, [sp]
   1a510:	add	sp, sp, #4
   1a514:	cmp	r2, #0
   1a518:	moveq	r0, r3
   1a51c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a520:	ldr	r4, [sp]
   1a524:	add	sp, sp, #4
   1a528:	movw	r0, #49012	; 0xbf74
   1a52c:	movt	r0, #1
   1a530:	pop	{pc}		; (ldr pc, [sp], #4)
   1a534:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a538:	mov	r5, r2
   1a53c:	strd	r6, [sp, #8]
   1a540:	subs	r6, r0, #0
   1a544:	mov	r7, r1
   1a548:	str	lr, [sp, #16]
   1a54c:	sub	sp, sp, #12
   1a550:	addeq	r6, sp, #4
   1a554:	mov	r0, r6
   1a558:	bl	110e4 <mbrtowc@plt>
   1a55c:	cmp	r5, #0
   1a560:	cmnne	r0, #3
   1a564:	mov	r4, r0
   1a568:	bhi	1a584 <__assert_fail@plt+0x92b4>
   1a56c:	mov	r0, r4
   1a570:	add	sp, sp, #12
   1a574:	ldrd	r4, [sp]
   1a578:	ldrd	r6, [sp, #8]
   1a57c:	add	sp, sp, #16
   1a580:	pop	{pc}		; (ldr pc, [sp], #4)
   1a584:	mov	r0, #0
   1a588:	bl	1a5e8 <__assert_fail@plt+0x9318>
   1a58c:	cmp	r0, #0
   1a590:	bne	1a56c <__assert_fail@plt+0x929c>
   1a594:	ldrb	r3, [r7]
   1a598:	mov	r4, #1
   1a59c:	str	r3, [r6]
   1a5a0:	b	1a56c <__assert_fail@plt+0x929c>
   1a5a4:	umull	r2, r3, r1, r2
   1a5a8:	cmp	r3, #0
   1a5ac:	bne	1a5b8 <__assert_fail@plt+0x92e8>
   1a5b0:	mov	r1, r2
   1a5b4:	b	1a00c <__assert_fail@plt+0x8d3c>
   1a5b8:	str	r4, [sp, #-8]!
   1a5bc:	str	lr, [sp, #4]
   1a5c0:	bl	11180 <__errno_location@plt>
   1a5c4:	mov	r3, #12
   1a5c8:	ldr	r4, [sp]
   1a5cc:	add	sp, sp, #4
   1a5d0:	str	r3, [r0]
   1a5d4:	mov	r0, #0
   1a5d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5dc:	mov	r2, #3
   1a5e0:	mov	r1, #0
   1a5e4:	b	1a2c0 <__assert_fail@plt+0x8ff0>
   1a5e8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a5ec:	sub	sp, sp, #268	; 0x10c
   1a5f0:	movw	r2, #257	; 0x101
   1a5f4:	add	r1, sp, #4
   1a5f8:	bl	1a640 <__assert_fail@plt+0x9370>
   1a5fc:	cmp	r0, #0
   1a600:	movne	r0, #0
   1a604:	bne	1a638 <__assert_fail@plt+0x9368>
   1a608:	movw	r1, #49020	; 0xbf7c
   1a60c:	movt	r1, #1
   1a610:	add	r0, sp, #4
   1a614:	bl	10fdc <strcmp@plt>
   1a618:	cmp	r0, #0
   1a61c:	beq	1a638 <__assert_fail@plt+0x9368>
   1a620:	add	r0, sp, #4
   1a624:	movw	r1, #49024	; 0xbf80
   1a628:	movt	r1, #1
   1a62c:	bl	10fdc <strcmp@plt>
   1a630:	adds	r0, r0, #0
   1a634:	movne	r0, #1
   1a638:	add	sp, sp, #268	; 0x10c
   1a63c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a640:	strd	r4, [sp, #-16]!
   1a644:	mov	r5, r1
   1a648:	mov	r1, #0
   1a64c:	mov	r4, r2
   1a650:	str	r6, [sp, #8]
   1a654:	str	lr, [sp, #12]
   1a658:	bl	11204 <setlocale@plt>
   1a65c:	subs	r6, r0, #0
   1a660:	beq	1a6e0 <__assert_fail@plt+0x9410>
   1a664:	bl	11168 <strlen@plt>
   1a668:	cmp	r4, r0
   1a66c:	bhi	1a68c <__assert_fail@plt+0x93bc>
   1a670:	cmp	r4, #0
   1a674:	moveq	r0, #34	; 0x22
   1a678:	bne	1a6b0 <__assert_fail@plt+0x93e0>
   1a67c:	ldrd	r4, [sp]
   1a680:	ldr	r6, [sp, #8]
   1a684:	add	sp, sp, #12
   1a688:	pop	{pc}		; (ldr pc, [sp], #4)
   1a68c:	add	r2, r0, #1
   1a690:	mov	r1, r6
   1a694:	mov	r0, r5
   1a698:	bl	11030 <memcpy@plt>
   1a69c:	ldrd	r4, [sp]
   1a6a0:	mov	r0, #0
   1a6a4:	ldr	r6, [sp, #8]
   1a6a8:	add	sp, sp, #12
   1a6ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6b0:	sub	r4, r4, #1
   1a6b4:	mov	r1, r6
   1a6b8:	mov	r2, r4
   1a6bc:	mov	r0, r5
   1a6c0:	bl	11030 <memcpy@plt>
   1a6c4:	mov	r3, #0
   1a6c8:	mov	r0, #34	; 0x22
   1a6cc:	strb	r3, [r5, r4]
   1a6d0:	ldrd	r4, [sp]
   1a6d4:	ldr	r6, [sp, #8]
   1a6d8:	add	sp, sp, #12
   1a6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6e0:	cmp	r4, #0
   1a6e4:	mov	r0, #22
   1a6e8:	strbne	r6, [r5]
   1a6ec:	ldrd	r4, [sp]
   1a6f0:	ldr	r6, [sp, #8]
   1a6f4:	add	sp, sp, #12
   1a6f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6fc:	mov	r1, #0
   1a700:	b	11204 <setlocale@plt>
   1a704:	cmp	r3, #0
   1a708:	cmpeq	r2, #0
   1a70c:	bne	1a724 <__assert_fail@plt+0x9454>
   1a710:	cmp	r1, #0
   1a714:	cmpeq	r0, #0
   1a718:	mvnne	r1, #0
   1a71c:	mvnne	r0, #0
   1a720:	b	1a740 <__assert_fail@plt+0x9470>
   1a724:	sub	sp, sp, #8
   1a728:	push	{sp, lr}
   1a72c:	bl	1a750 <__assert_fail@plt+0x9480>
   1a730:	ldr	lr, [sp, #4]
   1a734:	add	sp, sp, #8
   1a738:	pop	{r2, r3}
   1a73c:	bx	lr
   1a740:	push	{r1, lr}
   1a744:	mov	r0, #8
   1a748:	bl	10fc4 <raise@plt>
   1a74c:	pop	{r1, pc}
   1a750:	cmp	r1, r3
   1a754:	cmpeq	r0, r2
   1a758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a75c:	mov	r4, r0
   1a760:	movcc	r0, #0
   1a764:	mov	r5, r1
   1a768:	ldr	lr, [sp, #36]	; 0x24
   1a76c:	movcc	r1, r0
   1a770:	bcc	1a86c <__assert_fail@plt+0x959c>
   1a774:	cmp	r3, #0
   1a778:	clzeq	ip, r2
   1a77c:	clzne	ip, r3
   1a780:	addeq	ip, ip, #32
   1a784:	cmp	r5, #0
   1a788:	clzeq	r1, r4
   1a78c:	addeq	r1, r1, #32
   1a790:	clzne	r1, r5
   1a794:	sub	ip, ip, r1
   1a798:	sub	sl, ip, #32
   1a79c:	lsl	r9, r3, ip
   1a7a0:	rsb	fp, ip, #32
   1a7a4:	orr	r9, r9, r2, lsl sl
   1a7a8:	orr	r9, r9, r2, lsr fp
   1a7ac:	lsl	r8, r2, ip
   1a7b0:	cmp	r5, r9
   1a7b4:	cmpeq	r4, r8
   1a7b8:	movcc	r0, #0
   1a7bc:	movcc	r1, r0
   1a7c0:	bcc	1a7dc <__assert_fail@plt+0x950c>
   1a7c4:	mov	r0, #1
   1a7c8:	subs	r4, r4, r8
   1a7cc:	lsl	r1, r0, sl
   1a7d0:	orr	r1, r1, r0, lsr fp
   1a7d4:	lsl	r0, r0, ip
   1a7d8:	sbc	r5, r5, r9
   1a7dc:	cmp	ip, #0
   1a7e0:	beq	1a86c <__assert_fail@plt+0x959c>
   1a7e4:	lsr	r6, r8, #1
   1a7e8:	orr	r6, r6, r9, lsl #31
   1a7ec:	lsr	r7, r9, #1
   1a7f0:	mov	r2, ip
   1a7f4:	b	1a818 <__assert_fail@plt+0x9548>
   1a7f8:	subs	r3, r4, r6
   1a7fc:	sbc	r8, r5, r7
   1a800:	adds	r3, r3, r3
   1a804:	adc	r8, r8, r8
   1a808:	adds	r4, r3, #1
   1a80c:	adc	r5, r8, #0
   1a810:	subs	r2, r2, #1
   1a814:	beq	1a834 <__assert_fail@plt+0x9564>
   1a818:	cmp	r5, r7
   1a81c:	cmpeq	r4, r6
   1a820:	bcs	1a7f8 <__assert_fail@plt+0x9528>
   1a824:	adds	r4, r4, r4
   1a828:	adc	r5, r5, r5
   1a82c:	subs	r2, r2, #1
   1a830:	bne	1a818 <__assert_fail@plt+0x9548>
   1a834:	lsr	r3, r4, ip
   1a838:	orr	r3, r3, r5, lsl fp
   1a83c:	lsr	r2, r5, ip
   1a840:	orr	r3, r3, r5, lsr sl
   1a844:	adds	r0, r0, r4
   1a848:	mov	r4, r3
   1a84c:	lsl	r3, r2, ip
   1a850:	orr	r3, r3, r4, lsl sl
   1a854:	lsl	ip, r4, ip
   1a858:	orr	r3, r3, r4, lsr fp
   1a85c:	adc	r1, r1, r5
   1a860:	subs	r0, r0, ip
   1a864:	mov	r5, r2
   1a868:	sbc	r1, r1, r3
   1a86c:	cmp	lr, #0
   1a870:	strdne	r4, [lr]
   1a874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a878:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a87c:	mov	r7, r0
   1a880:	ldr	r6, [pc, #72]	; 1a8d0 <__assert_fail@plt+0x9600>
   1a884:	ldr	r5, [pc, #72]	; 1a8d4 <__assert_fail@plt+0x9604>
   1a888:	add	r6, pc, r6
   1a88c:	add	r5, pc, r5
   1a890:	sub	r6, r6, r5
   1a894:	mov	r8, r1
   1a898:	mov	r9, r2
   1a89c:	bl	10f80 <fstatfs64@plt-0x20>
   1a8a0:	asrs	r6, r6, #2
   1a8a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a8a8:	mov	r4, #0
   1a8ac:	add	r4, r4, #1
   1a8b0:	ldr	r3, [r5], #4
   1a8b4:	mov	r2, r9
   1a8b8:	mov	r1, r8
   1a8bc:	mov	r0, r7
   1a8c0:	blx	r3
   1a8c4:	cmp	r6, r4
   1a8c8:	bne	1a8ac <__assert_fail@plt+0x95dc>
   1a8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a8d0:	andeq	r2, r1, r4, lsl #13
   1a8d4:	andeq	r2, r1, ip, ror r6
   1a8d8:	bx	lr
   1a8dc:	ldr	r3, [pc, #12]	; 1a8f0 <__assert_fail@plt+0x9620>
   1a8e0:	mov	r1, #0
   1a8e4:	add	r3, pc, r3
   1a8e8:	ldr	r2, [r3]
   1a8ec:	b	1118c <__cxa_atexit@plt>
   1a8f0:	andeq	r2, r1, ip, lsr r8

Disassembly of section .fini:

0001a8f4 <.fini>:
   1a8f4:	push	{r3, lr}
   1a8f8:	pop	{r3, pc}
