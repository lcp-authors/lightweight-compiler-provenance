
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

0001100c <.init>:
   1100c:	push	{r3, lr}
   11010:	bl	118c0 <__assert_fail@plt+0x534>
   11014:	pop	{r3, pc}

Disassembly of section .plt:

00011018 <fstatfs64@plt-0x14>:
   11018:	push	{lr}		; (str lr, [sp, #-4]!)
   1101c:	ldr	lr, [pc, #4]	; 11028 <fstatfs64@plt-0x4>
   11020:	add	lr, pc, lr
   11024:	ldr	pc, [lr, #8]!
   11028:	ldrdeq	sl, [r1], -r8

0001102c <fstatfs64@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #4056]!	; 0xfd8

00011038 <calloc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #4048]!	; 0xfd0

00011044 <endgrent@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011050 <fputs_unlocked@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #4032]!	; 0xfc0

0001105c <raise@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #4024]!	; 0xfb8

00011068 <getpwnam@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #4016]!	; 0xfb0

00011074 <strcmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011080 <getpwuid@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #4000]!	; 0xfa0

0001108c <fflush@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #3992]!	; 0xf98

00011098 <memmove@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #3984]!	; 0xf90

000110a4 <free@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #3976]!	; 0xf88

000110b0 <__openat64_2@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #106496	; 0x1a000
   110b8:	ldr	pc, [ip, #3968]!	; 0xf80

000110bc <_exit@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #3960]!	; 0xf78

000110c8 <memcpy@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #3952]!	; 0xf70

000110d4 <mbsinit@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3944]!	; 0xf68

000110e0 <memcmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3936]!	; 0xf60

000110ec <stpcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3928]!	; 0xf58

000110f8 <fputc_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3920]!	; 0xf50

00011104 <dcgettext@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3912]!	; 0xf48

00011110 <realloc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3904]!	; 0xf40

0001111c <textdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3896]!	; 0xf38

00011128 <__fxstatat64@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3888]!	; 0xf30

00011134 <iswprint@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3880]!	; 0xf28

00011140 <__fxstat64@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3872]!	; 0xf20

0001114c <fwrite@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3864]!	; 0xf18

00011158 <lseek64@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3856]!	; 0xf10

00011164 <__ctype_get_mb_cur_max@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3848]!	; 0xf08

00011170 <strcpy@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3840]!	; 0xf00

0001117c <__fpending@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3832]!	; 0xef8

00011188 <mbrtowc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3824]!	; 0xef0

00011194 <error@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3816]!	; 0xee8

000111a0 <open64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3808]!	; 0xee0

000111ac <malloc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3800]!	; 0xed8

000111b8 <__libc_start_main@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3792]!	; 0xed0

000111c4 <__freading@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3784]!	; 0xec8

000111d0 <__gmon_start__@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3776]!	; 0xec0

000111dc <getopt_long@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111e8 <__ctype_b_loc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111f4 <exit@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3752]!	; 0xea8

00011200 <strtoul@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3744]!	; 0xea0

0001120c <strlen@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3736]!	; 0xe98

00011218 <strchr@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3728]!	; 0xe90

00011224 <openat64@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3720]!	; 0xe88

00011230 <fchown@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3712]!	; 0xe80

0001123c <__errno_location@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3704]!	; 0xe78

00011248 <__cxa_atexit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3696]!	; 0xe70

00011254 <memset@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3688]!	; 0xe68

00011260 <__printf_chk@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3680]!	; 0xe60

0001126c <fileno@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3672]!	; 0xe58

00011278 <__fprintf_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3664]!	; 0xe50

00011284 <fclose@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3656]!	; 0xe48

00011290 <fseeko64@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3648]!	; 0xe40

0001129c <fcntl64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3640]!	; 0xe38

000112a8 <setlocale@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3632]!	; 0xe30

000112b4 <endpwent@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3624]!	; 0xe28

000112c0 <strrchr@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3616]!	; 0xe20

000112cc <nl_langinfo@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3608]!	; 0xe18

000112d8 <readdir64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3600]!	; 0xe10

000112e4 <fdopendir@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3592]!	; 0xe08

000112f0 <dirfd@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3584]!	; 0xe00

000112fc <fchdir@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3576]!	; 0xdf8

00011308 <qsort@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3568]!	; 0xdf0

00011314 <fchownat@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3560]!	; 0xde8

00011320 <bindtextdomain@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3552]!	; 0xde0

0001132c <__xstat64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3544]!	; 0xdd8

00011338 <strncmp@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3536]!	; 0xdd0

00011344 <abort@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011350 <close@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3520]!	; 0xdc0

0001135c <__lxstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3512]!	; 0xdb8

00011368 <closedir@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3504]!	; 0xdb0

00011374 <getgrgid@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3496]!	; 0xda8

00011380 <getgrnam@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3488]!	; 0xda0

0001138c <__assert_fail@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3480]!	; 0xd98

Disassembly of section .text:

00011398 <.text>:
   11398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1139c:	sub	sp, sp, #172	; 0xac
   113a0:	mvn	r5, #0
   113a4:	mov	r7, r0
   113a8:	ldr	r0, [r1]
   113ac:	mov	r6, r1
   113b0:	str	r5, [sp, #24]
   113b4:	str	r5, [sp, #28]
   113b8:	str	r5, [sp, #32]
   113bc:	str	r5, [sp, #36]	; 0x24
   113c0:	bl	15f6c <__assert_fail@plt+0x4be0>
   113c4:	ldr	r1, [pc, #1112]	; 11824 <__assert_fail@plt+0x498>
   113c8:	mov	r0, #6
   113cc:	bl	112a8 <setlocale@plt>
   113d0:	ldr	r1, [pc, #1104]	; 11828 <__assert_fail@plt+0x49c>
   113d4:	ldr	r0, [pc, #1104]	; 1182c <__assert_fail@plt+0x4a0>
   113d8:	bl	11320 <bindtextdomain@plt>
   113dc:	ldr	r0, [pc, #1096]	; 1182c <__assert_fail@plt+0x4a0>
   113e0:	bl	1111c <textdomain@plt>
   113e4:	ldr	r9, [pc, #1092]	; 11830 <__assert_fail@plt+0x4a4>
   113e8:	ldr	r0, [pc, #1092]	; 11834 <__assert_fail@plt+0x4a8>
   113ec:	ldr	r8, [pc, #1092]	; 11838 <__assert_fail@plt+0x4ac>
   113f0:	ldr	fp, [pc, #1092]	; 1183c <__assert_fail@plt+0x4b0>
   113f4:	bl	1a088 <__assert_fail@plt+0x8cfc>
   113f8:	mov	sl, #16
   113fc:	add	r0, sp, #40	; 0x28
   11400:	bl	11e18 <__assert_fail@plt+0xa8c>
   11404:	mov	r3, #0
   11408:	str	r3, [sp, #20]
   1140c:	mov	r4, #0
   11410:	str	r4, [sp]
   11414:	mov	r3, r9
   11418:	mov	r2, r8
   1141c:	mov	r1, r6
   11420:	mov	r0, r7
   11424:	bl	111dc <getopt_long@plt>
   11428:	cmn	r0, #1
   1142c:	beq	115bc <__assert_fail@plt+0x230>
   11430:	cmp	r0, #102	; 0x66
   11434:	beq	1154c <__assert_fail@plt+0x1c0>
   11438:	bgt	11498 <__assert_fail@plt+0x10c>
   1143c:	cmp	r0, #76	; 0x4c
   11440:	beq	1153c <__assert_fail@plt+0x1b0>
   11444:	bgt	114c8 <__assert_fail@plt+0x13c>
   11448:	cmn	r0, #2
   1144c:	beq	11544 <__assert_fail@plt+0x1b8>
   11450:	cmp	r0, #72	; 0x48
   11454:	beq	11510 <__assert_fail@plt+0x184>
   11458:	cmn	r0, #3
   1145c:	bne	114e0 <__assert_fail@plt+0x154>
   11460:	ldr	r3, [pc, #984]	; 11840 <__assert_fail@plt+0x4b4>
   11464:	ldr	r0, [pc, #984]	; 11844 <__assert_fail@plt+0x4b8>
   11468:	ldr	r1, [pc, #984]	; 11848 <__assert_fail@plt+0x4bc>
   1146c:	ldr	r2, [pc, #984]	; 1184c <__assert_fail@plt+0x4c0>
   11470:	str	r4, [sp, #8]
   11474:	ldr	r0, [r0]
   11478:	ldr	r3, [r3]
   1147c:	str	r1, [sp, #4]
   11480:	str	r2, [sp]
   11484:	ldr	r1, [pc, #964]	; 11850 <__assert_fail@plt+0x4c4>
   11488:	ldr	r2, [pc, #964]	; 11854 <__assert_fail@plt+0x4c8>
   1148c:	bl	186a4 <__assert_fail@plt+0x7318>
   11490:	mov	r0, r4
   11494:	bl	111f4 <exit@plt>
   11498:	ldr	r3, [pc, #952]	; 11858 <__assert_fail@plt+0x4cc>
   1149c:	cmp	r0, r3
   114a0:	beq	11578 <__assert_fail@plt+0x1ec>
   114a4:	bgt	114e8 <__assert_fail@plt+0x15c>
   114a8:	cmp	r0, #118	; 0x76
   114ac:	beq	11570 <__assert_fail@plt+0x1e4>
   114b0:	cmp	r0, #256	; 0x100
   114b4:	beq	11520 <__assert_fail@plt+0x194>
   114b8:	cmp	r0, #104	; 0x68
   114bc:	bne	114e0 <__assert_fail@plt+0x154>
   114c0:	mov	r5, r4
   114c4:	b	1140c <__assert_fail@plt+0x80>
   114c8:	cmp	r0, #82	; 0x52
   114cc:	beq	11558 <__assert_fail@plt+0x1cc>
   114d0:	cmp	r0, #99	; 0x63
   114d4:	beq	11528 <__assert_fail@plt+0x19c>
   114d8:	cmp	r0, #80	; 0x50
   114dc:	beq	11534 <__assert_fail@plt+0x1a8>
   114e0:	mov	r0, #1
   114e4:	bl	119ac <__assert_fail@plt+0x620>
   114e8:	ldr	r3, [pc, #876]	; 1185c <__assert_fail@plt+0x4d0>
   114ec:	cmp	r0, r3
   114f0:	beq	11564 <__assert_fail@plt+0x1d8>
   114f4:	blt	11518 <__assert_fail@plt+0x18c>
   114f8:	cmp	r0, #260	; 0x104
   114fc:	bne	114e0 <__assert_fail@plt+0x154>
   11500:	ldr	r2, [pc, #856]	; 11860 <__assert_fail@plt+0x4d4>
   11504:	ldr	r3, [fp]
   11508:	str	r3, [r2]
   1150c:	b	1140c <__assert_fail@plt+0x80>
   11510:	mov	sl, #17
   11514:	b	1140c <__assert_fail@plt+0x80>
   11518:	str	r4, [sp, #20]
   1151c:	b	1140c <__assert_fail@plt+0x80>
   11520:	mov	r5, #1
   11524:	b	1140c <__assert_fail@plt+0x80>
   11528:	mov	r3, #1
   1152c:	str	r3, [sp, #40]	; 0x28
   11530:	b	1140c <__assert_fail@plt+0x80>
   11534:	mov	sl, #16
   11538:	b	1140c <__assert_fail@plt+0x80>
   1153c:	mov	sl, #2
   11540:	b	1140c <__assert_fail@plt+0x80>
   11544:	mov	r0, r4
   11548:	bl	119ac <__assert_fail@plt+0x620>
   1154c:	mov	r3, #1
   11550:	strb	r3, [sp, #53]	; 0x35
   11554:	b	1140c <__assert_fail@plt+0x80>
   11558:	mov	r3, #1
   1155c:	strb	r3, [sp, #44]	; 0x2c
   11560:	b	1140c <__assert_fail@plt+0x80>
   11564:	mov	r3, #1
   11568:	str	r3, [sp, #20]
   1156c:	b	1140c <__assert_fail@plt+0x80>
   11570:	str	r4, [sp, #40]	; 0x28
   11574:	b	1140c <__assert_fail@plt+0x80>
   11578:	str	r4, [sp]
   1157c:	mov	r3, r4
   11580:	add	r2, sp, #36	; 0x24
   11584:	add	r1, sp, #32
   11588:	ldr	r0, [fp]
   1158c:	bl	181c0 <__assert_fail@plt+0x6e34>
   11590:	cmp	r0, #0
   11594:	beq	1140c <__assert_fail@plt+0x80>
   11598:	str	r0, [sp, #20]
   1159c:	ldr	r0, [fp]
   115a0:	bl	17e2c <__assert_fail@plt+0x6aa0>
   115a4:	ldr	r3, [sp, #20]
   115a8:	str	r0, [sp]
   115ac:	mov	r1, r4
   115b0:	ldr	r2, [pc, #684]	; 11864 <__assert_fail@plt+0x4d8>
   115b4:	mov	r0, #1
   115b8:	bl	11194 <error@plt>
   115bc:	ldrb	r3, [sp, #44]	; 0x2c
   115c0:	cmp	r3, r4
   115c4:	bne	11650 <__assert_fail@plt+0x2c4>
   115c8:	mov	sl, #16
   115cc:	ldr	r3, [pc, #652]	; 11860 <__assert_fail@plt+0x4d4>
   115d0:	ldr	r8, [pc, #656]	; 11868 <__assert_fail@plt+0x4dc>
   115d4:	adds	r5, r5, #0
   115d8:	ldr	r4, [r3]
   115dc:	ldr	r3, [r8]
   115e0:	movne	r5, #1
   115e4:	cmp	r4, #0
   115e8:	strb	r5, [sp, #52]	; 0x34
   115ec:	sub	r2, r7, r3
   115f0:	beq	11758 <__assert_fail@plt+0x3cc>
   115f4:	cmp	r2, #0
   115f8:	ble	11684 <__assert_fail@plt+0x2f8>
   115fc:	add	r2, sp, #64	; 0x40
   11600:	mov	r1, r4
   11604:	mov	r0, #3
   11608:	bl	1132c <__xstat64@plt>
   1160c:	cmp	r0, #0
   11610:	beq	116e4 <__assert_fail@plt+0x358>
   11614:	bl	1123c <__errno_location@plt>
   11618:	mov	r2, #5
   1161c:	ldr	r1, [pc, #584]	; 1186c <__assert_fail@plt+0x4e0>
   11620:	ldr	r5, [r0]
   11624:	mov	r0, #0
   11628:	bl	11104 <dcgettext@plt>
   1162c:	mov	r1, r4
   11630:	mov	r6, r0
   11634:	mov	r0, #4
   11638:	bl	17bec <__assert_fail@plt+0x6860>
   1163c:	mov	r2, r6
   11640:	mov	r1, r5
   11644:	mov	r3, r0
   11648:	mov	r0, #1
   1164c:	bl	11194 <error@plt>
   11650:	cmp	sl, #16
   11654:	bne	115cc <__assert_fail@plt+0x240>
   11658:	cmp	r5, #1
   1165c:	movne	r5, r4
   11660:	bne	115cc <__assert_fail@plt+0x240>
   11664:	mov	r2, #5
   11668:	ldr	r1, [pc, #512]	; 11870 <__assert_fail@plt+0x4e4>
   1166c:	mov	r0, r4
   11670:	bl	11104 <dcgettext@plt>
   11674:	mov	r1, r4
   11678:	mov	r2, r0
   1167c:	mov	r0, r5
   11680:	bl	11194 <error@plt>
   11684:	cmp	r7, r3
   11688:	mov	r2, #5
   1168c:	bgt	116b0 <__assert_fail@plt+0x324>
   11690:	ldr	r1, [pc, #476]	; 11874 <__assert_fail@plt+0x4e8>
   11694:	mov	r0, #0
   11698:	bl	11104 <dcgettext@plt>
   1169c:	mov	r1, #0
   116a0:	mov	r2, r0
   116a4:	mov	r0, r1
   116a8:	bl	11194 <error@plt>
   116ac:	b	114e0 <__assert_fail@plt+0x154>
   116b0:	ldr	r1, [pc, #448]	; 11878 <__assert_fail@plt+0x4ec>
   116b4:	mov	r0, #0
   116b8:	bl	11104 <dcgettext@plt>
   116bc:	sub	r7, r7, #-1073741823	; 0xc0000001
   116c0:	mov	r4, r0
   116c4:	ldr	r0, [r6, r7, lsl #2]
   116c8:	bl	17e2c <__assert_fail@plt+0x6aa0>
   116cc:	mov	r1, #0
   116d0:	mov	r2, r4
   116d4:	mov	r3, r0
   116d8:	mov	r0, r1
   116dc:	bl	11194 <error@plt>
   116e0:	b	114e0 <__assert_fail@plt+0x154>
   116e4:	ldr	r3, [sp, #88]	; 0x58
   116e8:	ldr	r2, [sp, #92]	; 0x5c
   116ec:	mov	r0, r3
   116f0:	str	r3, [sp, #24]
   116f4:	str	r2, [sp, #28]
   116f8:	bl	11ea0 <__assert_fail@plt+0xb14>
   116fc:	str	r0, [sp, #56]	; 0x38
   11700:	ldr	r0, [sp, #92]	; 0x5c
   11704:	bl	11e60 <__assert_fail@plt+0xad4>
   11708:	str	r0, [sp, #60]	; 0x3c
   1170c:	ldrb	r3, [sp, #44]	; 0x2c
   11710:	ldr	r2, [sp, #20]
   11714:	tst	r2, r3
   11718:	bne	11798 <__assert_fail@plt+0x40c>
   1171c:	ldr	r0, [r8]
   11720:	ldr	r2, [sp, #36]	; 0x24
   11724:	ldr	r3, [sp, #32]
   11728:	add	r1, sp, #40	; 0x28
   1172c:	str	r1, [sp, #8]
   11730:	str	r2, [sp, #4]
   11734:	str	r3, [sp]
   11738:	add	r0, r6, r0, lsl #2
   1173c:	orr	r1, sl, #1024	; 0x400
   11740:	ldr	r3, [sp, #28]
   11744:	ldr	r2, [sp, #24]
   11748:	bl	11ee0 <__assert_fail@plt+0xb54>
   1174c:	eor	r0, r0, #1
   11750:	uxtb	r0, r0
   11754:	bl	111f4 <exit@plt>
   11758:	cmp	r2, #1
   1175c:	ble	11684 <__assert_fail@plt+0x2f8>
   11760:	add	r2, sp, #60	; 0x3c
   11764:	ldr	r0, [r6, r3, lsl #2]
   11768:	add	r1, sp, #24
   1176c:	str	r2, [sp]
   11770:	add	r3, sp, #56	; 0x38
   11774:	add	r2, sp, #28
   11778:	bl	181c0 <__assert_fail@plt+0x6e34>
   1177c:	subs	r5, r0, #0
   11780:	beq	117ec <__assert_fail@plt+0x460>
   11784:	ldr	r3, [r8]
   11788:	ldr	r0, [r6, r3, lsl #2]
   1178c:	bl	17e2c <__assert_fail@plt+0x6aa0>
   11790:	mov	r3, r5
   11794:	b	115a8 <__assert_fail@plt+0x21c>
   11798:	ldr	r0, [pc, #220]	; 1187c <__assert_fail@plt+0x4f0>
   1179c:	bl	17e44 <__assert_fail@plt+0x6ab8>
   117a0:	cmp	r0, #0
   117a4:	mov	r4, r0
   117a8:	str	r0, [sp, #48]	; 0x30
   117ac:	bne	1171c <__assert_fail@plt+0x390>
   117b0:	bl	1123c <__errno_location@plt>
   117b4:	mov	r2, #5
   117b8:	ldr	r1, [pc, #172]	; 1186c <__assert_fail@plt+0x4e0>
   117bc:	ldr	r5, [r0]
   117c0:	mov	r0, r4
   117c4:	bl	11104 <dcgettext@plt>
   117c8:	ldr	r1, [pc, #176]	; 11880 <__assert_fail@plt+0x4f4>
   117cc:	mov	r4, r0
   117d0:	mov	r0, #4
   117d4:	bl	17bec <__assert_fail@plt+0x6860>
   117d8:	mov	r2, r4
   117dc:	mov	r1, r5
   117e0:	mov	r3, r0
   117e4:	mov	r0, #1
   117e8:	bl	11194 <error@plt>
   117ec:	ldr	r3, [sp, #56]	; 0x38
   117f0:	cmp	r3, #0
   117f4:	beq	11808 <__assert_fail@plt+0x47c>
   117f8:	ldr	r3, [r8]
   117fc:	add	r3, r3, #1
   11800:	str	r3, [r8]
   11804:	b	1170c <__assert_fail@plt+0x380>
   11808:	ldr	r3, [sp, #60]	; 0x3c
   1180c:	cmp	r3, #0
   11810:	beq	117f8 <__assert_fail@plt+0x46c>
   11814:	ldr	r0, [pc, #8]	; 11824 <__assert_fail@plt+0x498>
   11818:	bl	18ccc <__assert_fail@plt+0x7940>
   1181c:	str	r0, [sp, #56]	; 0x38
   11820:	b	117f8 <__assert_fail@plt+0x46c>
   11824:	andeq	sl, r1, r0, lsl #19
   11828:	andeq	sl, r1, r4, ror #24
   1182c:			; <UNDEFINED> instruction: 0x0001abbc
   11830:	andeq	sl, r1, r4, ror #1
   11834:	andeq	r2, r1, r0, lsr #23
   11838:	andeq	sl, r1, r4, lsr #25
   1183c:	andeq	ip, r2, r0, lsr #3
   11840:	andeq	ip, r2, ip, lsr r1
   11844:	muleq	r2, ip, r1
   11848:	andeq	sl, r1, r4, lsl #25
   1184c:	muleq	r1, r4, ip
   11850:	andeq	sl, r1, r4, asr #3
   11854:			; <UNDEFINED> instruction: 0x0001abb8
   11858:	andeq	r0, r0, r1, lsl #2
   1185c:	andeq	r0, r0, r3, lsl #2
   11860:	andeq	ip, r2, r8, lsr #3
   11864:	andeq	sl, r1, ip, ror ip
   11868:	muleq	r2, r0, r1
   1186c:	andeq	sl, r1, r8, lsl #26
   11870:			; <UNDEFINED> instruction: 0x0001acb0
   11874:	ldrdeq	sl, [r1], -ip
   11878:	andeq	sl, r1, ip, ror #25
   1187c:			; <UNDEFINED> instruction: 0x0002c1b0
   11880:	andeq	sl, r1, r8, lsr #26
   11884:	mov	fp, #0
   11888:	mov	lr, #0
   1188c:	pop	{r1}		; (ldr r1, [sp], #4)
   11890:	mov	r2, sp
   11894:	push	{r2}		; (str r2, [sp, #-4]!)
   11898:	push	{r0}		; (str r0, [sp, #-4]!)
   1189c:	ldr	ip, [pc, #16]	; 118b4 <__assert_fail@plt+0x528>
   118a0:	push	{ip}		; (str ip, [sp, #-4]!)
   118a4:	ldr	r0, [pc, #12]	; 118b8 <__assert_fail@plt+0x52c>
   118a8:	ldr	r3, [pc, #12]	; 118bc <__assert_fail@plt+0x530>
   118ac:	bl	111b8 <__libc_start_main@plt>
   118b0:	bl	11344 <abort@plt>
   118b4:	andeq	sl, r1, r4, lsl #1
   118b8:	muleq	r1, r8, r3
   118bc:	andeq	sl, r1, r4, lsr #32
   118c0:	ldr	r3, [pc, #20]	; 118dc <__assert_fail@plt+0x550>
   118c4:	ldr	r2, [pc, #20]	; 118e0 <__assert_fail@plt+0x554>
   118c8:	add	r3, pc, r3
   118cc:	ldr	r2, [r3, r2]
   118d0:	cmp	r2, #0
   118d4:	bxeq	lr
   118d8:	b	111d0 <__gmon_start__@plt>
   118dc:	andeq	sl, r1, r0, lsr r7
   118e0:	andeq	r0, r0, r0, lsr r1
   118e4:	ldr	r3, [pc, #28]	; 11908 <__assert_fail@plt+0x57c>
   118e8:	ldr	r0, [pc, #28]	; 1190c <__assert_fail@plt+0x580>
   118ec:	sub	r3, r3, r0
   118f0:	cmp	r3, #6
   118f4:	bxls	lr
   118f8:	ldr	r3, [pc, #16]	; 11910 <__assert_fail@plt+0x584>
   118fc:	cmp	r3, #0
   11900:	bxeq	lr
   11904:	bx	r3
   11908:	andeq	ip, r2, r7, lsl #3
   1190c:	andeq	ip, r2, r4, lsl #3
   11910:	andeq	r0, r0, r0
   11914:	ldr	r1, [pc, #36]	; 11940 <__assert_fail@plt+0x5b4>
   11918:	ldr	r0, [pc, #36]	; 11944 <__assert_fail@plt+0x5b8>
   1191c:	sub	r1, r1, r0
   11920:	asr	r1, r1, #2
   11924:	add	r1, r1, r1, lsr #31
   11928:	asrs	r1, r1, #1
   1192c:	bxeq	lr
   11930:	ldr	r3, [pc, #16]	; 11948 <__assert_fail@plt+0x5bc>
   11934:	cmp	r3, #0
   11938:	bxeq	lr
   1193c:	bx	r3
   11940:	andeq	ip, r2, r4, lsl #3
   11944:	andeq	ip, r2, r4, lsl #3
   11948:	andeq	r0, r0, r0
   1194c:	push	{r4, lr}
   11950:	ldr	r4, [pc, #24]	; 11970 <__assert_fail@plt+0x5e4>
   11954:	ldrb	r3, [r4]
   11958:	cmp	r3, #0
   1195c:	popne	{r4, pc}
   11960:	bl	118e4 <__assert_fail@plt+0x558>
   11964:	mov	r3, #1
   11968:	strb	r3, [r4]
   1196c:	pop	{r4, pc}
   11970:	andeq	ip, r2, r4, lsr #3
   11974:	ldr	r0, [pc, #40]	; 119a4 <__assert_fail@plt+0x618>
   11978:	ldr	r3, [r0]
   1197c:	cmp	r3, #0
   11980:	bne	11988 <__assert_fail@plt+0x5fc>
   11984:	b	11914 <__assert_fail@plt+0x588>
   11988:	ldr	r3, [pc, #24]	; 119a8 <__assert_fail@plt+0x61c>
   1198c:	cmp	r3, #0
   11990:	beq	11984 <__assert_fail@plt+0x5f8>
   11994:	push	{r4, lr}
   11998:	blx	r3
   1199c:	pop	{r4, lr}
   119a0:	b	11914 <__assert_fail@plt+0x588>
   119a4:	andeq	fp, r2, r4, lsl pc
   119a8:	andeq	r0, r0, r0
   119ac:	subs	r5, r0, #0
   119b0:	push	{r7, lr}
   119b4:	sub	sp, sp, #64	; 0x40
   119b8:	beq	119f4 <__assert_fail@plt+0x668>
   119bc:	ldr	r3, [pc, #872]	; 11d2c <__assert_fail@plt+0x9a0>
   119c0:	mov	r2, #5
   119c4:	ldr	r1, [pc, #868]	; 11d30 <__assert_fail@plt+0x9a4>
   119c8:	mov	r0, #0
   119cc:	ldr	r4, [r3]
   119d0:	bl	11104 <dcgettext@plt>
   119d4:	ldr	r3, [pc, #856]	; 11d34 <__assert_fail@plt+0x9a8>
   119d8:	mov	r1, #1
   119dc:	ldr	r3, [r3]
   119e0:	mov	r2, r0
   119e4:	mov	r0, r4
   119e8:	bl	11278 <__fprintf_chk@plt>
   119ec:	mov	r0, r5
   119f0:	bl	111f4 <exit@plt>
   119f4:	mov	r2, #5
   119f8:	ldr	r1, [pc, #824]	; 11d38 <__assert_fail@plt+0x9ac>
   119fc:	bl	11104 <dcgettext@plt>
   11a00:	ldr	r4, [pc, #812]	; 11d34 <__assert_fail@plt+0x9a8>
   11a04:	ldr	r6, [pc, #816]	; 11d3c <__assert_fail@plt+0x9b0>
   11a08:	ldr	r3, [r4]
   11a0c:	mov	r2, r3
   11a10:	mov	r1, r0
   11a14:	mov	r0, #1
   11a18:	bl	11260 <__printf_chk@plt>
   11a1c:	mov	r2, #5
   11a20:	ldr	r1, [pc, #792]	; 11d40 <__assert_fail@plt+0x9b4>
   11a24:	mov	r0, r5
   11a28:	bl	11104 <dcgettext@plt>
   11a2c:	ldr	r1, [r6]
   11a30:	bl	11050 <fputs_unlocked@plt>
   11a34:	mov	r2, #5
   11a38:	ldr	r1, [pc, #772]	; 11d44 <__assert_fail@plt+0x9b8>
   11a3c:	mov	r0, r5
   11a40:	bl	11104 <dcgettext@plt>
   11a44:	ldr	r1, [r6]
   11a48:	bl	11050 <fputs_unlocked@plt>
   11a4c:	mov	r2, #5
   11a50:	ldr	r1, [pc, #752]	; 11d48 <__assert_fail@plt+0x9bc>
   11a54:	mov	r0, r5
   11a58:	bl	11104 <dcgettext@plt>
   11a5c:	ldr	r1, [r6]
   11a60:	bl	11050 <fputs_unlocked@plt>
   11a64:	mov	r2, #5
   11a68:	ldr	r1, [pc, #732]	; 11d4c <__assert_fail@plt+0x9c0>
   11a6c:	mov	r0, r5
   11a70:	bl	11104 <dcgettext@plt>
   11a74:	ldr	r1, [r6]
   11a78:	bl	11050 <fputs_unlocked@plt>
   11a7c:	mov	r2, #5
   11a80:	ldr	r1, [pc, #712]	; 11d50 <__assert_fail@plt+0x9c4>
   11a84:	mov	r0, r5
   11a88:	bl	11104 <dcgettext@plt>
   11a8c:	ldr	r1, [r6]
   11a90:	bl	11050 <fputs_unlocked@plt>
   11a94:	mov	r2, #5
   11a98:	ldr	r1, [pc, #692]	; 11d54 <__assert_fail@plt+0x9c8>
   11a9c:	mov	r0, r5
   11aa0:	bl	11104 <dcgettext@plt>
   11aa4:	ldr	r1, [r6]
   11aa8:	bl	11050 <fputs_unlocked@plt>
   11aac:	mov	r2, #5
   11ab0:	ldr	r1, [pc, #672]	; 11d58 <__assert_fail@plt+0x9cc>
   11ab4:	mov	r0, r5
   11ab8:	bl	11104 <dcgettext@plt>
   11abc:	ldr	r1, [r6]
   11ac0:	bl	11050 <fputs_unlocked@plt>
   11ac4:	mov	r2, #5
   11ac8:	ldr	r1, [pc, #652]	; 11d5c <__assert_fail@plt+0x9d0>
   11acc:	mov	r0, r5
   11ad0:	bl	11104 <dcgettext@plt>
   11ad4:	ldr	r1, [r6]
   11ad8:	bl	11050 <fputs_unlocked@plt>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #632]	; 11d60 <__assert_fail@plt+0x9d4>
   11ae4:	mov	r0, r5
   11ae8:	bl	11104 <dcgettext@plt>
   11aec:	ldr	r1, [r6]
   11af0:	bl	11050 <fputs_unlocked@plt>
   11af4:	mov	r2, #5
   11af8:	ldr	r1, [pc, #612]	; 11d64 <__assert_fail@plt+0x9d8>
   11afc:	mov	r0, r5
   11b00:	bl	11104 <dcgettext@plt>
   11b04:	ldr	r1, [r6]
   11b08:	bl	11050 <fputs_unlocked@plt>
   11b0c:	mov	r2, #5
   11b10:	ldr	r1, [pc, #592]	; 11d68 <__assert_fail@plt+0x9dc>
   11b14:	mov	r0, r5
   11b18:	bl	11104 <dcgettext@plt>
   11b1c:	ldr	r1, [r6]
   11b20:	bl	11050 <fputs_unlocked@plt>
   11b24:	mov	r2, #5
   11b28:	ldr	r1, [pc, #572]	; 11d6c <__assert_fail@plt+0x9e0>
   11b2c:	mov	r0, r5
   11b30:	bl	11104 <dcgettext@plt>
   11b34:	ldr	r1, [r6]
   11b38:	bl	11050 <fputs_unlocked@plt>
   11b3c:	mov	r2, #5
   11b40:	ldr	r1, [pc, #552]	; 11d70 <__assert_fail@plt+0x9e4>
   11b44:	mov	r0, r5
   11b48:	bl	11104 <dcgettext@plt>
   11b4c:	ldr	r3, [r4]
   11b50:	ldr	r4, [pc, #540]	; 11d74 <__assert_fail@plt+0x9e8>
   11b54:	str	r3, [sp]
   11b58:	mov	r2, r3
   11b5c:	mov	r1, r0
   11b60:	mov	r0, #1
   11b64:	bl	11260 <__printf_chk@plt>
   11b68:	ldm	r4!, {r0, r1, r2, r3}
   11b6c:	add	lr, sp, #8
   11b70:	stmia	lr!, {r0, r1, r2, r3}
   11b74:	ldm	r4!, {r0, r1, r2, r3}
   11b78:	ldr	ip, [sp, #8]
   11b7c:	stmia	lr!, {r0, r1, r2, r3}
   11b80:	cmp	ip, #0
   11b84:	ldm	r4!, {r0, r1, r2, r3}
   11b88:	stmia	lr!, {r0, r1, r2, r3}
   11b8c:	ldm	r4, {r0, r1}
   11b90:	addeq	r4, sp, #8
   11b94:	stm	lr, {r0, r1}
   11b98:	beq	11bc8 <__assert_fail@plt+0x83c>
   11b9c:	ldr	r7, [pc, #468]	; 11d78 <__assert_fail@plt+0x9ec>
   11ba0:	add	r4, sp, #8
   11ba4:	b	11bb4 <__assert_fail@plt+0x828>
   11ba8:	ldr	ip, [r4, #8]!
   11bac:	cmp	ip, #0
   11bb0:	beq	11bc8 <__assert_fail@plt+0x83c>
   11bb4:	mov	r1, ip
   11bb8:	mov	r0, r7
   11bbc:	bl	11074 <strcmp@plt>
   11bc0:	cmp	r0, #0
   11bc4:	bne	11ba8 <__assert_fail@plt+0x81c>
   11bc8:	ldr	r4, [r4, #4]
   11bcc:	mov	r2, #5
   11bd0:	cmp	r4, #0
   11bd4:	ldr	r1, [pc, #416]	; 11d7c <__assert_fail@plt+0x9f0>
   11bd8:	beq	11c80 <__assert_fail@plt+0x8f4>
   11bdc:	mov	r0, #0
   11be0:	bl	11104 <dcgettext@plt>
   11be4:	ldr	r3, [pc, #404]	; 11d80 <__assert_fail@plt+0x9f4>
   11be8:	ldr	r2, [pc, #404]	; 11d84 <__assert_fail@plt+0x9f8>
   11bec:	mov	r1, r0
   11bf0:	mov	r0, #1
   11bf4:	bl	11260 <__printf_chk@plt>
   11bf8:	mov	r1, #0
   11bfc:	mov	r0, #5
   11c00:	bl	112a8 <setlocale@plt>
   11c04:	cmp	r0, #0
   11c08:	ldreq	r7, [pc, #360]	; 11d78 <__assert_fail@plt+0x9ec>
   11c0c:	beq	11c28 <__assert_fail@plt+0x89c>
   11c10:	mov	r2, #3
   11c14:	ldr	r1, [pc, #364]	; 11d88 <__assert_fail@plt+0x9fc>
   11c18:	bl	11338 <strncmp@plt>
   11c1c:	ldr	r7, [pc, #340]	; 11d78 <__assert_fail@plt+0x9ec>
   11c20:	cmp	r0, #0
   11c24:	bne	11d10 <__assert_fail@plt+0x984>
   11c28:	mov	r2, #5
   11c2c:	ldr	r1, [pc, #344]	; 11d8c <__assert_fail@plt+0xa00>
   11c30:	mov	r0, #0
   11c34:	bl	11104 <dcgettext@plt>
   11c38:	ldr	r3, [pc, #312]	; 11d78 <__assert_fail@plt+0x9ec>
   11c3c:	ldr	r2, [pc, #316]	; 11d80 <__assert_fail@plt+0x9f4>
   11c40:	mov	r1, r0
   11c44:	mov	r0, #1
   11c48:	bl	11260 <__printf_chk@plt>
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #312]	; 11d90 <__assert_fail@plt+0xa04>
   11c54:	mov	r0, #0
   11c58:	bl	11104 <dcgettext@plt>
   11c5c:	ldr	r2, [pc, #304]	; 11d94 <__assert_fail@plt+0xa08>
   11c60:	cmp	r4, r7
   11c64:	ldr	r3, [pc, #300]	; 11d98 <__assert_fail@plt+0xa0c>
   11c68:	movne	r3, r2
   11c6c:	mov	r1, r0
   11c70:	mov	r2, r4
   11c74:	mov	r0, #1
   11c78:	bl	11260 <__printf_chk@plt>
   11c7c:	b	119ec <__assert_fail@plt+0x660>
   11c80:	mov	r0, r4
   11c84:	bl	11104 <dcgettext@plt>
   11c88:	ldr	r3, [pc, #240]	; 11d80 <__assert_fail@plt+0x9f4>
   11c8c:	ldr	r2, [pc, #240]	; 11d84 <__assert_fail@plt+0x9f8>
   11c90:	mov	r1, r0
   11c94:	mov	r0, #1
   11c98:	bl	11260 <__printf_chk@plt>
   11c9c:	mov	r1, r4
   11ca0:	mov	r0, #5
   11ca4:	bl	112a8 <setlocale@plt>
   11ca8:	cmp	r0, #0
   11cac:	beq	11cc4 <__assert_fail@plt+0x938>
   11cb0:	mov	r2, #3
   11cb4:	ldr	r1, [pc, #204]	; 11d88 <__assert_fail@plt+0x9fc>
   11cb8:	bl	11338 <strncmp@plt>
   11cbc:	cmp	r0, #0
   11cc0:	bne	11d08 <__assert_fail@plt+0x97c>
   11cc4:	mov	r2, #5
   11cc8:	ldr	r1, [pc, #188]	; 11d8c <__assert_fail@plt+0xa00>
   11ccc:	mov	r0, #0
   11cd0:	bl	11104 <dcgettext@plt>
   11cd4:	ldr	r3, [pc, #156]	; 11d78 <__assert_fail@plt+0x9ec>
   11cd8:	ldr	r2, [pc, #160]	; 11d80 <__assert_fail@plt+0x9f4>
   11cdc:	mov	r4, r3
   11ce0:	mov	r1, r0
   11ce4:	mov	r0, #1
   11ce8:	bl	11260 <__printf_chk@plt>
   11cec:	ldr	r1, [pc, #156]	; 11d90 <__assert_fail@plt+0xa04>
   11cf0:	mov	r2, #5
   11cf4:	mov	r0, #0
   11cf8:	bl	11104 <dcgettext@plt>
   11cfc:	ldr	r3, [pc, #148]	; 11d98 <__assert_fail@plt+0xa0c>
   11d00:	mov	r1, r0
   11d04:	b	11c70 <__assert_fail@plt+0x8e4>
   11d08:	ldr	r7, [pc, #104]	; 11d78 <__assert_fail@plt+0x9ec>
   11d0c:	mov	r4, r7
   11d10:	mov	r2, #5
   11d14:	ldr	r1, [pc, #128]	; 11d9c <__assert_fail@plt+0xa10>
   11d18:	mov	r0, #0
   11d1c:	bl	11104 <dcgettext@plt>
   11d20:	ldr	r1, [r6]
   11d24:	bl	11050 <fputs_unlocked@plt>
   11d28:	b	11c28 <__assert_fail@plt+0x89c>
   11d2c:	muleq	r2, r8, r1
   11d30:	andeq	sl, r1, ip, asr #3
   11d34:	andeq	ip, r2, r8, asr #3
   11d38:	strdeq	sl, [r1], -r4
   11d3c:	muleq	r2, ip, r1
   11d40:	andeq	sl, r1, r8, asr r2
   11d44:	andeq	sl, r1, ip, ror #5
   11d48:			; <UNDEFINED> instruction: 0x0001a3b8
   11d4c:	andeq	sl, r1, r0, lsr #9
   11d50:	andeq	sl, r1, r8, lsl r5
   11d54:	andeq	sl, r1, ip, ror #12
   11d58:	andeq	sl, r1, ip, ror #13
   11d5c:	andeq	sl, r1, r8, ror #14
   11d60:			; <UNDEFINED> instruction: 0x0001a7b0
   11d64:	andeq	sl, r1, r4, lsl #19
   11d68:			; <UNDEFINED> instruction: 0x0001a9b4
   11d6c:	andeq	sl, r1, ip, ror #19
   11d70:	andeq	sl, r1, ip, lsr #21
   11d74:	andeq	sl, r1, ip, lsr #1
   11d78:	andeq	sl, r1, r4, asr #3
   11d7c:	andeq	sl, r1, r8, ror fp
   11d80:	muleq	r1, r0, fp
   11d84:			; <UNDEFINED> instruction: 0x0001abb8
   11d88:	andeq	sl, r1, r8, asr #23
   11d8c:	andeq	sl, r1, r4, lsl ip
   11d90:	andeq	sl, r1, r0, lsr ip
   11d94:	andeq	sl, r1, r0, lsl #19
   11d98:	andeq	sl, r1, r4, lsr sp
   11d9c:	andeq	sl, r1, ip, asr #23
   11da0:	subs	r3, r0, #0
   11da4:	push	{r4, r5, r6, lr}
   11da8:	beq	11dfc <__assert_fail@plt+0xa70>
   11dac:	cmp	r1, #0
   11db0:	beq	11e08 <__assert_fail@plt+0xa7c>
   11db4:	mov	r4, r1
   11db8:	mov	r5, r3
   11dbc:	bl	1120c <strlen@plt>
   11dc0:	mov	r6, r0
   11dc4:	mov	r0, r4
   11dc8:	bl	1120c <strlen@plt>
   11dcc:	add	r0, r6, r0
   11dd0:	add	r0, r0, #2
   11dd4:	bl	187a0 <__assert_fail@plt+0x7414>
   11dd8:	mov	r1, r5
   11ddc:	mov	r6, r0
   11de0:	bl	110ec <stpcpy@plt>
   11de4:	mov	r3, #58	; 0x3a
   11de8:	mov	r1, r4
   11dec:	strb	r3, [r0], #1
   11df0:	bl	11170 <strcpy@plt>
   11df4:	mov	r0, r6
   11df8:	pop	{r4, r5, r6, pc}
   11dfc:	cmp	r1, #0
   11e00:	beq	11e10 <__assert_fail@plt+0xa84>
   11e04:	mov	r0, r1
   11e08:	pop	{r4, r5, r6, lr}
   11e0c:	b	18ccc <__assert_fail@plt+0x7940>
   11e10:	mov	r6, r1
   11e14:	b	11df4 <__assert_fail@plt+0xa68>
   11e18:	mov	r3, #0
   11e1c:	mov	r1, #2
   11e20:	mov	r2, #1
   11e24:	str	r1, [r0]
   11e28:	strb	r2, [r0, #12]
   11e2c:	str	r3, [r0, #8]
   11e30:	strb	r3, [r0, #4]
   11e34:	strb	r3, [r0, #13]
   11e38:	str	r3, [r0, #16]
   11e3c:	str	r3, [r0, #20]
   11e40:	bx	lr
   11e44:	push	{r4, lr}
   11e48:	mov	r4, r0
   11e4c:	ldr	r0, [r0, #16]
   11e50:	bl	12c84 <__assert_fail@plt+0x18f8>
   11e54:	ldr	r0, [r4, #20]
   11e58:	pop	{r4, lr}
   11e5c:	b	12c84 <__assert_fail@plt+0x18f8>
   11e60:	push	{r4, lr}
   11e64:	sub	sp, sp, #24
   11e68:	mov	r4, r0
   11e6c:	bl	11374 <getgrgid@plt>
   11e70:	subs	r1, r0, #0
   11e74:	beq	11e88 <__assert_fail@plt+0xafc>
   11e78:	ldr	r0, [r1]
   11e7c:	bl	18ccc <__assert_fail@plt+0x7940>
   11e80:	add	sp, sp, #24
   11e84:	pop	{r4, pc}
   11e88:	mov	r2, sp
   11e8c:	mov	r0, r4
   11e90:	bl	15e78 <__assert_fail@plt+0x4aec>
   11e94:	bl	18ccc <__assert_fail@plt+0x7940>
   11e98:	add	sp, sp, #24
   11e9c:	pop	{r4, pc}
   11ea0:	push	{r4, lr}
   11ea4:	sub	sp, sp, #24
   11ea8:	mov	r4, r0
   11eac:	bl	11080 <getpwuid@plt>
   11eb0:	subs	r1, r0, #0
   11eb4:	beq	11ec8 <__assert_fail@plt+0xb3c>
   11eb8:	ldr	r0, [r1]
   11ebc:	bl	18ccc <__assert_fail@plt+0x7940>
   11ec0:	add	sp, sp, #24
   11ec4:	pop	{r4, pc}
   11ec8:	mov	r2, sp
   11ecc:	mov	r0, r4
   11ed0:	bl	15e78 <__assert_fail@plt+0x4aec>
   11ed4:	bl	18ccc <__assert_fail@plt+0x7940>
   11ed8:	add	sp, sp, #24
   11edc:	pop	{r4, pc}
   11ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee4:	sub	sp, sp, #252	; 0xfc
   11ee8:	ldr	ip, [sp, #292]	; 0x124
   11eec:	ldr	lr, [sp, #288]	; 0x120
   11ef0:	str	r2, [sp, #20]
   11ef4:	cmn	lr, #1
   11ef8:	cmneq	ip, #1
   11efc:	movne	ip, #1
   11f00:	moveq	ip, #0
   11f04:	str	r3, [sp, #36]	; 0x24
   11f08:	ldr	r5, [sp, #296]	; 0x128
   11f0c:	movne	ip, #0
   11f10:	bne	11f20 <__assert_fail@plt+0xb94>
   11f14:	ldrb	r3, [r5, #12]
   11f18:	cmp	r3, #0
   11f1c:	beq	122f8 <__assert_fail@plt+0xf6c>
   11f20:	orr	r1, ip, r1
   11f24:	mov	r2, #0
   11f28:	bl	18d28 <__assert_fail@plt+0x799c>
   11f2c:	mov	r3, #1
   11f30:	str	r3, [sp, #12]
   11f34:	mov	r6, r5
   11f38:	mov	r8, r0
   11f3c:	bl	1123c <__errno_location@plt>
   11f40:	str	r0, [sp, #32]
   11f44:	mov	r0, r8
   11f48:	bl	145b0 <__assert_fail@plt+0x3224>
   11f4c:	subs	sl, r0, #0
   11f50:	beq	11ffc <__assert_fail@plt+0xc70>
   11f54:	ldrh	r4, [sl, #56]	; 0x38
   11f58:	ldr	r3, [sl, #28]
   11f5c:	sub	fp, r4, #1
   11f60:	str	r3, [sp, #16]
   11f64:	cmp	fp, #9
   11f68:	ldrls	pc, [pc, fp, lsl #2]
   11f6c:	b	12110 <__assert_fail@plt+0xd84>
   11f70:	andeq	r2, r1, ip, lsr #4
   11f74:	strdeq	r2, [r1], -ip
   11f78:	andeq	r2, r1, r0, lsl r1
   11f7c:	strheq	r2, [r1], -r4
   11f80:	andeq	r2, r1, r0, lsl r1
   11f84:	andeq	r2, r1, r4, lsr #1
   11f88:	andeq	r2, r1, ip, rrx
   11f8c:	andeq	r2, r1, r0, lsl r1
   11f90:	andeq	r2, r1, r0, lsl r1
   11f94:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11f98:	ldr	r3, [sl, #48]	; 0x30
   11f9c:	cmp	r3, #0
   11fa0:	bne	11fb0 <__assert_fail@plt+0xc24>
   11fa4:	ldr	r3, [sl, #16]
   11fa8:	cmp	r3, #0
   11fac:	beq	126c8 <__assert_fail@plt+0x133c>
   11fb0:	ldrb	r4, [r6, #13]
   11fb4:	cmp	r4, #0
   11fb8:	beq	126bc <__assert_fail@plt+0x1330>
   11fbc:	ldr	r3, [r6]
   11fc0:	cmp	r3, #2
   11fc4:	bne	12ae0 <__assert_fail@plt+0x1754>
   11fc8:	mov	r3, #0
   11fcc:	str	r3, [sp, #12]
   11fd0:	ldrb	r3, [r6, #4]
   11fd4:	cmp	r3, #0
   11fd8:	bne	11f44 <__assert_fail@plt+0xbb8>
   11fdc:	mov	r1, sl
   11fe0:	mov	r2, #4
   11fe4:	mov	r0, r8
   11fe8:	bl	14c68 <__assert_fail@plt+0x38dc>
   11fec:	mov	r0, r8
   11ff0:	bl	145b0 <__assert_fail@plt+0x3224>
   11ff4:	subs	sl, r0, #0
   11ff8:	bne	11f54 <__assert_fail@plt+0xbc8>
   11ffc:	ldr	r3, [sp, #32]
   12000:	ldr	r4, [r3]
   12004:	cmp	r4, #0
   12008:	beq	12020 <__assert_fail@plt+0xc94>
   1200c:	ldrb	r3, [r6, #13]
   12010:	cmp	r3, #0
   12014:	str	r3, [sp, #12]
   12018:	strne	sl, [sp, #12]
   1201c:	beq	126e0 <__assert_fail@plt+0x1354>
   12020:	mov	r0, r8
   12024:	bl	14450 <__assert_fail@plt+0x30c4>
   12028:	cmp	r0, #0
   1202c:	beq	12060 <__assert_fail@plt+0xcd4>
   12030:	ldr	r3, [sp, #32]
   12034:	mov	r2, #5
   12038:	ldr	r1, [pc, #2780]	; 12b1c <__assert_fail@plt+0x1790>
   1203c:	mov	r0, #0
   12040:	ldr	r4, [r3]
   12044:	bl	11104 <dcgettext@plt>
   12048:	mov	r1, r4
   1204c:	mov	r2, r0
   12050:	mov	r0, #0
   12054:	bl	11194 <error@plt>
   12058:	mov	r3, #0
   1205c:	str	r3, [sp, #12]
   12060:	ldr	r0, [sp, #12]
   12064:	add	sp, sp, #252	; 0xfc
   12068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1206c:	ldrb	r4, [r6, #13]
   12070:	cmp	r4, #0
   12074:	bne	11fbc <__assert_fail@plt+0xc30>
   12078:	ldr	r2, [sp, #16]
   1207c:	mov	r1, #3
   12080:	mov	r0, r4
   12084:	ldr	r5, [sl, #32]
   12088:	bl	17ca8 <__assert_fail@plt+0x691c>
   1208c:	mov	r1, r5
   12090:	ldr	r2, [pc, #2696]	; 12b20 <__assert_fail@plt+0x1794>
   12094:	mov	r3, r0
   12098:	mov	r0, r4
   1209c:	bl	11194 <error@plt>
   120a0:	b	11fbc <__assert_fail@plt+0xc30>
   120a4:	ldrb	r3, [r6, #4]
   120a8:	cmp	r3, #0
   120ac:	bne	12110 <__assert_fail@plt+0xd84>
   120b0:	b	11f44 <__assert_fail@plt+0xbb8>
   120b4:	ldrb	r4, [r6, #13]
   120b8:	cmp	r4, #0
   120bc:	bne	11fbc <__assert_fail@plt+0xc30>
   120c0:	ldr	r1, [pc, #2652]	; 12b24 <__assert_fail@plt+0x1798>
   120c4:	mov	r2, #5
   120c8:	mov	r0, r4
   120cc:	ldr	r5, [sl, #32]
   120d0:	bl	11104 <dcgettext@plt>
   120d4:	ldr	r1, [sp, #16]
   120d8:	mov	r7, r0
   120dc:	mov	r0, #4
   120e0:	bl	17bec <__assert_fail@plt+0x6860>
   120e4:	mov	r2, r7
   120e8:	mov	r1, r5
   120ec:	mov	r3, r0
   120f0:	mov	r0, r4
   120f4:	bl	11194 <error@plt>
   120f8:	b	11fbc <__assert_fail@plt+0xc30>
   120fc:	mov	r1, sl
   12100:	mov	r0, r8
   12104:	bl	18d70 <__assert_fail@plt+0x79e4>
   12108:	cmp	r0, #0
   1210c:	bne	12728 <__assert_fail@plt+0x139c>
   12110:	ldr	r3, [sp, #292]	; 0x124
   12114:	ldr	r2, [sp, #288]	; 0x120
   12118:	ldr	r9, [sl, #24]
   1211c:	cmn	r3, #1
   12120:	cmneq	r2, #1
   12124:	moveq	r7, #1
   12128:	movne	r7, #0
   1212c:	bne	1213c <__assert_fail@plt+0xdb0>
   12130:	ldr	r3, [r6]
   12134:	cmp	r3, #2
   12138:	beq	1269c <__assert_fail@plt+0x1310>
   1213c:	ldrb	r3, [r6, #12]
   12140:	add	r5, sl, #64	; 0x40
   12144:	cmp	r3, #0
   12148:	beq	1215c <__assert_fail@plt+0xdd0>
   1214c:	ldr	r3, [sl, #80]	; 0x50
   12150:	and	r3, r3, #61440	; 0xf000
   12154:	cmp	r3, #40960	; 0xa000
   12158:	beq	12774 <__assert_fail@plt+0x13e8>
   1215c:	ldr	r3, [sp, #288]	; 0x120
   12160:	cmn	r3, #1
   12164:	beq	1230c <__assert_fail@plt+0xf80>
   12168:	ldr	r3, [r5, #24]
   1216c:	ldr	r2, [sp, #288]	; 0x120
   12170:	cmp	r2, r3
   12174:	beq	1230c <__assert_fail@plt+0xf80>
   12178:	bic	r4, r4, #2
   1217c:	uxth	fp, fp
   12180:	cmp	r4, #4
   12184:	cmpne	fp, #1
   12188:	movls	r4, #1
   1218c:	movhi	r4, #0
   12190:	bls	12b04 <__assert_fail@plt+0x1778>
   12194:	mov	r7, #1
   12198:	ldr	r3, [sp, #12]
   1219c:	mov	r4, #1
   121a0:	and	r3, r3, r7
   121a4:	uxtb	r3, r3
   121a8:	str	r3, [sp, #12]
   121ac:	ldr	r3, [r6]
   121b0:	cmp	r3, #2
   121b4:	beq	11fd0 <__assert_fail@plt+0xc44>
   121b8:	cmp	r3, #0
   121bc:	bne	11fd0 <__assert_fail@plt+0xc44>
   121c0:	cmp	r7, #0
   121c4:	beq	124c0 <__assert_fail@plt+0x1134>
   121c8:	cmp	r4, #0
   121cc:	bne	12708 <__assert_fail@plt+0x137c>
   121d0:	ldr	r0, [r5, #24]
   121d4:	bl	11ea0 <__assert_fail@plt+0xb14>
   121d8:	mov	r7, r0
   121dc:	ldr	r0, [r5, #28]
   121e0:	bl	11e60 <__assert_fail@plt+0xad4>
   121e4:	mov	r2, #5
   121e8:	ldr	r1, [pc, #2360]	; 12b28 <__assert_fail@plt+0x179c>
   121ec:	mov	r5, r0
   121f0:	mov	r0, r4
   121f4:	bl	11104 <dcgettext@plt>
   121f8:	ldr	r1, [sp, #16]
   121fc:	mov	r4, r0
   12200:	mov	r0, #4
   12204:	bl	17bec <__assert_fail@plt+0x6860>
   12208:	mov	r1, r4
   1220c:	mov	r2, r0
   12210:	mov	r0, #1
   12214:	bl	11260 <__printf_chk@plt>
   12218:	mov	r0, r7
   1221c:	bl	12c84 <__assert_fail@plt+0x18f8>
   12220:	mov	r0, r5
   12224:	bl	12c84 <__assert_fail@plt+0x18f8>
   12228:	b	11fd0 <__assert_fail@plt+0xc44>
   1222c:	ldrb	r3, [r6, #4]
   12230:	cmp	r3, #0
   12234:	beq	12110 <__assert_fail@plt+0xd84>
   12238:	ldr	ip, [r6, #8]
   1223c:	cmp	ip, #0
   12240:	beq	11f44 <__assert_fail@plt+0xbb8>
   12244:	ldrd	r0, [sl, #160]	; 0xa0
   12248:	ldrd	r2, [ip]
   1224c:	cmp	r1, r3
   12250:	cmpeq	r0, r2
   12254:	bne	11f44 <__assert_fail@plt+0xbb8>
   12258:	ldrd	r2, [sl, #64]	; 0x40
   1225c:	ldrd	r0, [ip, #8]
   12260:	cmp	r3, r1
   12264:	cmpeq	r2, r0
   12268:	bne	11f44 <__assert_fail@plt+0xbb8>
   1226c:	ldr	r7, [sp, #16]
   12270:	ldr	r1, [pc, #2228]	; 12b2c <__assert_fail@plt+0x17a0>
   12274:	mov	r0, r7
   12278:	bl	11074 <strcmp@plt>
   1227c:	mov	r2, #5
   12280:	subs	r4, r0, #0
   12284:	bne	129cc <__assert_fail@plt+0x1640>
   12288:	ldr	r1, [pc, #2208]	; 12b30 <__assert_fail@plt+0x17a4>
   1228c:	bl	11104 <dcgettext@plt>
   12290:	mov	r1, r7
   12294:	mov	r5, r0
   12298:	mov	r0, #4
   1229c:	bl	17bec <__assert_fail@plt+0x6860>
   122a0:	mov	r2, r5
   122a4:	mov	r1, r4
   122a8:	mov	r3, r0
   122ac:	mov	r0, r4
   122b0:	bl	11194 <error@plt>
   122b4:	mov	r2, #5
   122b8:	ldr	r1, [pc, #2164]	; 12b34 <__assert_fail@plt+0x17a8>
   122bc:	mov	r0, #0
   122c0:	bl	11104 <dcgettext@plt>
   122c4:	mov	r1, #0
   122c8:	mov	r2, r0
   122cc:	mov	r0, r1
   122d0:	bl	11194 <error@plt>
   122d4:	mov	r1, sl
   122d8:	mov	r2, #4
   122dc:	mov	r0, r8
   122e0:	bl	14c68 <__assert_fail@plt+0x38dc>
   122e4:	mov	r0, r8
   122e8:	bl	145b0 <__assert_fail@plt+0x3224>
   122ec:	mov	r3, #0
   122f0:	str	r3, [sp, #12]
   122f4:	b	11f44 <__assert_fail@plt+0xbb8>
   122f8:	ldr	r3, [r5]
   122fc:	cmp	r3, #2
   12300:	moveq	ip, #8
   12304:	movne	ip, #0
   12308:	b	11f20 <__assert_fail@plt+0xb94>
   1230c:	ldr	r3, [sp, #292]	; 0x124
   12310:	cmn	r3, #1
   12314:	beq	127a8 <__assert_fail@plt+0x141c>
   12318:	ldr	ip, [r5, #28]
   1231c:	uxth	fp, fp
   12320:	bic	r4, r4, #2
   12324:	cmp	r4, #4
   12328:	cmpne	fp, #1
   1232c:	sub	ip, ip, r3
   12330:	clz	ip, ip
   12334:	lsr	ip, ip, #5
   12338:	bls	123f8 <__assert_fail@plt+0x106c>
   1233c:	cmp	ip, #0
   12340:	beq	12194 <__assert_fail@plt+0xe08>
   12344:	ldrb	r3, [r6, #12]
   12348:	subs	r4, r3, #0
   1234c:	bne	12584 <__assert_fail@plt+0x11f8>
   12350:	mov	r3, #256	; 0x100
   12354:	str	r3, [sp]
   12358:	ldr	r0, [r8, #32]
   1235c:	mov	r1, r9
   12360:	ldr	r3, [sp, #36]	; 0x24
   12364:	ldr	r2, [sp, #20]
   12368:	bl	11314 <fchownat@plt>
   1236c:	cmp	r0, #0
   12370:	moveq	r0, #1
   12374:	movne	r0, #0
   12378:	beq	1238c <__assert_fail@plt+0x1000>
   1237c:	ldr	r3, [sp, #32]
   12380:	ldr	r3, [r3]
   12384:	cmp	r3, #95	; 0x5f
   12388:	beq	1276c <__assert_fail@plt+0x13e0>
   1238c:	cmp	r0, #0
   12390:	bne	125bc <__assert_fail@plt+0x1230>
   12394:	ldrb	r4, [r6, #13]
   12398:	cmp	r4, #0
   1239c:	bne	12620 <__assert_fail@plt+0x1294>
   123a0:	ldr	r3, [sp, #20]
   123a4:	mov	r2, #5
   123a8:	cmn	r3, #1
   123ac:	ldr	r3, [sp, #32]
   123b0:	ldrne	r1, [pc, #1920]	; 12b38 <__assert_fail@plt+0x17ac>
   123b4:	ldreq	r1, [pc, #1920]	; 12b3c <__assert_fail@plt+0x17b0>
   123b8:	mov	r0, r4
   123bc:	ldr	r7, [r3]
   123c0:	bl	11104 <dcgettext@plt>
   123c4:	ldr	r1, [sp, #16]
   123c8:	mov	r9, r0
   123cc:	mov	r0, #4
   123d0:	bl	17bec <__assert_fail@plt+0x6860>
   123d4:	mov	r1, r7
   123d8:	mov	r2, r9
   123dc:	mov	r7, r4
   123e0:	mov	r3, r0
   123e4:	mov	r0, #0
   123e8:	bl	11194 <error@plt>
   123ec:	str	r4, [sp, #12]
   123f0:	mov	r4, #1
   123f4:	b	121ac <__assert_fail@plt+0xe20>
   123f8:	ldr	lr, [r6, #8]
   123fc:	cmp	lr, #0
   12400:	beq	1233c <__assert_fail@plt+0xfb0>
   12404:	ldrd	r0, [r5, #96]	; 0x60
   12408:	ldrd	r2, [lr]
   1240c:	cmp	r1, r3
   12410:	cmpeq	r0, r2
   12414:	bne	1233c <__assert_fail@plt+0xfb0>
   12418:	ldrd	r0, [r5]
   1241c:	ldrd	r2, [lr, #8]
   12420:	cmp	r1, r3
   12424:	cmpeq	r0, r2
   12428:	bne	1233c <__assert_fail@plt+0xfb0>
   1242c:	ldr	r7, [sp, #16]
   12430:	ldr	r1, [pc, #1780]	; 12b2c <__assert_fail@plt+0x17a0>
   12434:	mov	r0, r7
   12438:	bl	11074 <strcmp@plt>
   1243c:	mov	r2, #5
   12440:	subs	r4, r0, #0
   12444:	beq	1292c <__assert_fail@plt+0x15a0>
   12448:	ldr	r1, [pc, #1776]	; 12b40 <__assert_fail@plt+0x17b4>
   1244c:	mov	r0, #0
   12450:	bl	11104 <dcgettext@plt>
   12454:	ldr	r2, [sp, #16]
   12458:	mov	r1, #4
   1245c:	mov	r4, r0
   12460:	mov	r0, #0
   12464:	bl	17b80 <__assert_fail@plt+0x67f4>
   12468:	ldr	r2, [pc, #1724]	; 12b2c <__assert_fail@plt+0x17a0>
   1246c:	mov	r1, #4
   12470:	mov	r5, r0
   12474:	mov	r0, #1
   12478:	bl	17b80 <__assert_fail@plt+0x67f4>
   1247c:	mov	r1, #0
   12480:	mov	r3, r5
   12484:	mov	r2, r4
   12488:	str	r0, [sp]
   1248c:	mov	r0, r1
   12490:	bl	11194 <error@plt>
   12494:	mov	r2, #5
   12498:	ldr	r1, [pc, #1684]	; 12b34 <__assert_fail@plt+0x17a8>
   1249c:	mov	r0, #0
   124a0:	bl	11104 <dcgettext@plt>
   124a4:	mov	r1, #0
   124a8:	mov	r2, r0
   124ac:	mov	r0, r1
   124b0:	bl	11194 <error@plt>
   124b4:	mov	r3, #0
   124b8:	str	r3, [sp, #12]
   124bc:	b	11f44 <__assert_fail@plt+0xbb8>
   124c0:	ldr	r0, [r5, #24]
   124c4:	bl	11ea0 <__assert_fail@plt+0xb14>
   124c8:	mov	r7, r0
   124cc:	ldr	r0, [r5, #28]
   124d0:	bl	11e60 <__assert_fail@plt+0xad4>
   124d4:	mov	r2, #3
   124d8:	mov	r5, r0
   124dc:	ldr	fp, [r6, #16]
   124e0:	ldr	r4, [r6, #20]
   124e4:	mov	r1, r4
   124e8:	mov	r0, fp
   124ec:	str	r2, [sp, #24]
   124f0:	bl	11da0 <__assert_fail@plt+0xa14>
   124f4:	cmp	r4, #0
   124f8:	movne	r1, r5
   124fc:	moveq	r1, #0
   12500:	cmp	fp, #0
   12504:	str	r0, [sp, #28]
   12508:	movne	r0, r7
   1250c:	moveq	r0, #0
   12510:	bl	11da0 <__assert_fail@plt+0xa14>
   12514:	ldr	r2, [sp, #24]
   12518:	cmp	r2, #3
   1251c:	mov	r9, r0
   12520:	beq	12630 <__assert_fail@plt+0x12a4>
   12524:	cmp	r2, #4
   12528:	bne	12600 <__assert_fail@plt+0x1274>
   1252c:	cmp	fp, #0
   12530:	beq	127d4 <__assert_fail@plt+0x1448>
   12534:	mov	r2, #5
   12538:	ldr	r1, [pc, #1540]	; 12b44 <__assert_fail@plt+0x17b8>
   1253c:	mov	r0, #0
   12540:	bl	11104 <dcgettext@plt>
   12544:	mov	r4, r0
   12548:	ldr	r1, [sp, #16]
   1254c:	mov	r0, #4
   12550:	bl	17bec <__assert_fail@plt+0x6860>
   12554:	ldr	fp, [sp, #28]
   12558:	mov	r1, r4
   1255c:	mov	r3, r9
   12560:	str	fp, [sp]
   12564:	mov	r2, r0
   12568:	mov	r0, #1
   1256c:	bl	11260 <__printf_chk@plt>
   12570:	mov	r0, r9
   12574:	bl	12c84 <__assert_fail@plt+0x18f8>
   12578:	mov	r0, fp
   1257c:	bl	12c84 <__assert_fail@plt+0x18f8>
   12580:	b	12218 <__assert_fail@plt+0xe8c>
   12584:	cmp	r7, #0
   12588:	ldr	fp, [r8, #32]
   1258c:	beq	12658 <__assert_fail@plt+0x12cc>
   12590:	mov	r3, #0
   12594:	str	r3, [sp]
   12598:	mov	r1, r9
   1259c:	mov	r0, fp
   125a0:	ldr	r3, [sp, #36]	; 0x24
   125a4:	ldr	r2, [sp, #20]
   125a8:	bl	11314 <fchownat@plt>
   125ac:	clz	r0, r0
   125b0:	lsr	r0, r0, #5
   125b4:	cmp	r0, #0
   125b8:	beq	12394 <__assert_fail@plt+0x1008>
   125bc:	ldr	r3, [r6]
   125c0:	cmp	r3, #2
   125c4:	beq	11fd0 <__assert_fail@plt+0xc44>
   125c8:	ldr	r2, [sp, #20]
   125cc:	cmn	r2, #1
   125d0:	beq	1267c <__assert_fail@plt+0x12f0>
   125d4:	ldr	r0, [r5, #24]
   125d8:	ldr	r2, [sp, #20]
   125dc:	cmp	r2, r0
   125e0:	beq	1267c <__assert_fail@plt+0x12f0>
   125e4:	bl	11ea0 <__assert_fail@plt+0xb14>
   125e8:	mov	r7, r0
   125ec:	ldr	r0, [r5, #28]
   125f0:	bl	11e60 <__assert_fail@plt+0xad4>
   125f4:	mov	r2, #2
   125f8:	mov	r5, r0
   125fc:	b	124dc <__assert_fail@plt+0x1150>
   12600:	cmp	fp, #0
   12604:	beq	127fc <__assert_fail@plt+0x1470>
   12608:	mov	r2, #5
   1260c:	ldr	r1, [pc, #1332]	; 12b48 <__assert_fail@plt+0x17bc>
   12610:	mov	r0, #0
   12614:	bl	11104 <dcgettext@plt>
   12618:	mov	r4, r0
   1261c:	b	12548 <__assert_fail@plt+0x11bc>
   12620:	mov	r3, #0
   12624:	str	r3, [sp, #12]
   12628:	mov	r7, r3
   1262c:	b	121ac <__assert_fail@plt+0xe20>
   12630:	cmp	r0, #0
   12634:	beq	128fc <__assert_fail@plt+0x1570>
   12638:	cmp	fp, #0
   1263c:	beq	12824 <__assert_fail@plt+0x1498>
   12640:	mov	r2, #5
   12644:	ldr	r1, [pc, #1280]	; 12b4c <__assert_fail@plt+0x17c0>
   12648:	mov	r0, #0
   1264c:	bl	11104 <dcgettext@plt>
   12650:	mov	r4, r0
   12654:	b	12548 <__assert_fail@plt+0x11bc>
   12658:	ldr	r3, [r5, #16]
   1265c:	and	r3, r3, #61440	; 0xf000
   12660:	cmp	r3, #32768	; 0x8000
   12664:	beq	1284c <__assert_fail@plt+0x14c0>
   12668:	cmp	r3, #16384	; 0x4000
   1266c:	bne	12590 <__assert_fail@plt+0x1204>
   12670:	mov	r3, #18688	; 0x4900
   12674:	str	r3, [sp, #24]
   12678:	b	12854 <__assert_fail@plt+0x14c8>
   1267c:	ldr	r1, [sp, #36]	; 0x24
   12680:	cmn	r1, #1
   12684:	beq	12700 <__assert_fail@plt+0x1374>
   12688:	ldr	r2, [r5, #28]
   1268c:	cmp	r1, r2
   12690:	beq	12700 <__assert_fail@plt+0x1374>
   12694:	ldr	r0, [r5, #24]
   12698:	b	125e4 <__assert_fail@plt+0x1258>
   1269c:	ldr	r3, [r6, #8]
   126a0:	cmp	r3, #0
   126a4:	bne	1213c <__assert_fail@plt+0xdb0>
   126a8:	ldrb	r3, [r6, #12]
   126ac:	add	r5, sl, #64	; 0x40
   126b0:	cmp	r3, #0
   126b4:	bne	1214c <__assert_fail@plt+0xdc0>
   126b8:	b	12348 <__assert_fail@plt+0xfbc>
   126bc:	mov	r2, #5
   126c0:	ldr	r1, [pc, #1160]	; 12b50 <__assert_fail@plt+0x17c4>
   126c4:	b	120c8 <__assert_fail@plt+0xd3c>
   126c8:	mov	r2, #1
   126cc:	str	r2, [sl, #16]
   126d0:	mov	r1, sl
   126d4:	mov	r0, r8
   126d8:	bl	14c68 <__assert_fail@plt+0x38dc>
   126dc:	b	11f44 <__assert_fail@plt+0xbb8>
   126e0:	mov	r2, #5
   126e4:	ldr	r1, [pc, #1128]	; 12b54 <__assert_fail@plt+0x17c8>
   126e8:	bl	11104 <dcgettext@plt>
   126ec:	mov	r1, r4
   126f0:	mov	r2, r0
   126f4:	ldr	r0, [sp, #12]
   126f8:	bl	11194 <error@plt>
   126fc:	b	12020 <__assert_fail@plt+0xc94>
   12700:	cmp	r3, #0
   12704:	bne	11fd0 <__assert_fail@plt+0xc44>
   12708:	ldr	r0, [r5, #24]
   1270c:	bl	11ea0 <__assert_fail@plt+0xb14>
   12710:	mov	r7, r0
   12714:	ldr	r0, [r5, #28]
   12718:	bl	11e60 <__assert_fail@plt+0xad4>
   1271c:	mov	r2, #4
   12720:	mov	r5, r0
   12724:	b	124dc <__assert_fail@plt+0x1150>
   12728:	mov	r2, #5
   1272c:	ldr	r1, [pc, #1060]	; 12b58 <__assert_fail@plt+0x17cc>
   12730:	mov	r0, #0
   12734:	bl	11104 <dcgettext@plt>
   12738:	ldr	r2, [sp, #16]
   1273c:	mov	r1, #3
   12740:	mov	r4, r0
   12744:	mov	r0, #0
   12748:	bl	17ca8 <__assert_fail@plt+0x691c>
   1274c:	mov	r1, #0
   12750:	mov	r2, r4
   12754:	mov	r3, r0
   12758:	mov	r0, r1
   1275c:	bl	11194 <error@plt>
   12760:	mov	r3, #0
   12764:	str	r3, [sp, #12]
   12768:	b	11f44 <__assert_fail@plt+0xbb8>
   1276c:	mov	r7, #1
   12770:	b	121ac <__assert_fail@plt+0xe20>
   12774:	mov	r2, #0
   12778:	str	r2, [sp]
   1277c:	ldr	r1, [r8, #32]
   12780:	add	r3, sp, #40	; 0x28
   12784:	mov	r2, r9
   12788:	mov	r0, #3
   1278c:	bl	11128 <__fxstatat64@plt>
   12790:	cmp	r0, #0
   12794:	bne	128bc <__assert_fail@plt+0x1530>
   12798:	ldrh	r4, [sl, #56]	; 0x38
   1279c:	add	r5, sp, #40	; 0x28
   127a0:	sub	fp, r4, #1
   127a4:	b	1215c <__assert_fail@plt+0xdd0>
   127a8:	uxth	ip, fp
   127ac:	bic	r4, r4, #2
   127b0:	cmp	r4, #4
   127b4:	cmpne	ip, #1
   127b8:	movls	ip, #1
   127bc:	movhi	ip, #0
   127c0:	bhi	12344 <__assert_fail@plt+0xfb8>
   127c4:	ldr	lr, [r6, #8]
   127c8:	cmp	lr, #0
   127cc:	bne	12404 <__assert_fail@plt+0x1078>
   127d0:	b	12344 <__assert_fail@plt+0xfb8>
   127d4:	cmp	r4, #0
   127d8:	moveq	r0, r4
   127dc:	movne	r0, fp
   127e0:	movne	r2, #5
   127e4:	ldrne	r1, [pc, #880]	; 12b5c <__assert_fail@plt+0x17d0>
   127e8:	moveq	r2, #5
   127ec:	ldreq	r1, [pc, #876]	; 12b60 <__assert_fail@plt+0x17d4>
   127f0:	bl	11104 <dcgettext@plt>
   127f4:	mov	r4, r0
   127f8:	b	12548 <__assert_fail@plt+0x11bc>
   127fc:	cmp	r4, #0
   12800:	moveq	r0, r4
   12804:	movne	r0, fp
   12808:	movne	r2, #5
   1280c:	ldrne	r1, [pc, #848]	; 12b64 <__assert_fail@plt+0x17d8>
   12810:	moveq	r2, #5
   12814:	ldreq	r1, [pc, #844]	; 12b68 <__assert_fail@plt+0x17dc>
   12818:	bl	11104 <dcgettext@plt>
   1281c:	mov	r4, r0
   12820:	b	12548 <__assert_fail@plt+0x11bc>
   12824:	cmp	r4, #0
   12828:	moveq	r0, r4
   1282c:	movne	r0, fp
   12830:	movne	r2, #5
   12834:	ldrne	r1, [pc, #816]	; 12b6c <__assert_fail@plt+0x17e0>
   12838:	moveq	r2, #5
   1283c:	ldreq	r1, [pc, #812]	; 12b70 <__assert_fail@plt+0x17e4>
   12840:	bl	11104 <dcgettext@plt>
   12844:	mov	r4, r0
   12848:	b	12548 <__assert_fail@plt+0x11bc>
   1284c:	mov	r3, #2304	; 0x900
   12850:	str	r3, [sp, #24]
   12854:	ldr	r2, [sp, #24]
   12858:	mov	r1, r9
   1285c:	mov	r0, fp
   12860:	bl	110b0 <__openat64_2@plt>
   12864:	subs	ip, r0, #0
   12868:	blt	128d4 <__assert_fail@plt+0x1548>
   1286c:	mov	r1, ip
   12870:	add	r2, sp, #144	; 0x90
   12874:	mov	r0, #3
   12878:	str	ip, [sp, #24]
   1287c:	bl	11140 <__fxstat64@plt>
   12880:	ldr	ip, [sp, #24]
   12884:	cmp	r0, #0
   12888:	bne	1295c <__assert_fail@plt+0x15d0>
   1288c:	ldrd	r0, [r5, #96]	; 0x60
   12890:	ldrd	r2, [sp, #240]	; 0xf0
   12894:	cmp	r1, r3
   12898:	cmpeq	r0, r2
   1289c:	beq	12a1c <__assert_fail@plt+0x1690>
   128a0:	ldr	fp, [sp, #32]
   128a4:	mov	r0, ip
   128a8:	ldr	r9, [fp]
   128ac:	bl	11350 <close@plt>
   128b0:	str	r7, [sp, #12]
   128b4:	str	r9, [fp]
   128b8:	b	121ac <__assert_fail@plt+0xe20>
   128bc:	ldrb	r4, [r6, #13]
   128c0:	cmp	r4, #0
   128c4:	beq	12974 <__assert_fail@plt+0x15e8>
   128c8:	add	r5, sp, #40	; 0x28
   128cc:	mov	r7, #0
   128d0:	b	12198 <__assert_fail@plt+0xe0c>
   128d4:	ldr	r3, [sp, #32]
   128d8:	ldr	r2, [r3]
   128dc:	cmp	r2, #13
   128e0:	bne	12394 <__assert_fail@plt+0x1008>
   128e4:	ldr	r2, [r5, #16]
   128e8:	and	r2, r2, #61440	; 0xf000
   128ec:	cmp	r2, #32768	; 0x8000
   128f0:	beq	12a60 <__assert_fail@plt+0x16d4>
   128f4:	ldr	fp, [r8, #32]
   128f8:	b	12590 <__assert_fail@plt+0x1204>
   128fc:	cmp	fp, #0
   12900:	mov	r2, #5
   12904:	beq	129b4 <__assert_fail@plt+0x1628>
   12908:	ldr	r1, [pc, #612]	; 12b74 <__assert_fail@plt+0x17e8>
   1290c:	bl	11104 <dcgettext@plt>
   12910:	mov	r4, r0
   12914:	mov	r0, #0
   12918:	bl	12c84 <__assert_fail@plt+0x18f8>
   1291c:	mov	r3, r9
   12920:	ldr	r9, [sp, #28]
   12924:	str	r3, [sp, #28]
   12928:	b	12548 <__assert_fail@plt+0x11bc>
   1292c:	ldr	r1, [pc, #508]	; 12b30 <__assert_fail@plt+0x17a4>
   12930:	bl	11104 <dcgettext@plt>
   12934:	mov	r1, r7
   12938:	mov	r5, r0
   1293c:	mov	r0, #4
   12940:	bl	17bec <__assert_fail@plt+0x6860>
   12944:	mov	r2, r5
   12948:	mov	r1, r4
   1294c:	mov	r3, r0
   12950:	mov	r0, r4
   12954:	bl	11194 <error@plt>
   12958:	b	12494 <__assert_fail@plt+0x1108>
   1295c:	ldr	r7, [sp, #32]
   12960:	mov	r0, ip
   12964:	ldr	r4, [r7]
   12968:	bl	11350 <close@plt>
   1296c:	str	r4, [r7]
   12970:	b	12394 <__assert_fail@plt+0x1008>
   12974:	ldr	r3, [sp, #32]
   12978:	mov	r2, #5
   1297c:	ldr	r1, [pc, #500]	; 12b78 <__assert_fail@plt+0x17ec>
   12980:	mov	r0, r4
   12984:	ldr	r5, [r3]
   12988:	bl	11104 <dcgettext@plt>
   1298c:	ldr	r1, [sp, #16]
   12990:	mov	r7, r0
   12994:	mov	r0, #4
   12998:	bl	17bec <__assert_fail@plt+0x6860>
   1299c:	mov	r2, r7
   129a0:	mov	r1, r5
   129a4:	mov	r3, r0
   129a8:	mov	r0, r4
   129ac:	bl	11194 <error@plt>
   129b0:	b	128c8 <__assert_fail@plt+0x153c>
   129b4:	cmp	r4, #0
   129b8:	ldrne	r1, [pc, #444]	; 12b7c <__assert_fail@plt+0x17f0>
   129bc:	ldreq	r1, [pc, #428]	; 12b70 <__assert_fail@plt+0x17e4>
   129c0:	bl	11104 <dcgettext@plt>
   129c4:	mov	r4, r0
   129c8:	b	12914 <__assert_fail@plt+0x1588>
   129cc:	ldr	r1, [pc, #364]	; 12b40 <__assert_fail@plt+0x17b4>
   129d0:	mov	r0, #0
   129d4:	bl	11104 <dcgettext@plt>
   129d8:	ldr	r2, [sp, #16]
   129dc:	mov	r1, #4
   129e0:	mov	r4, r0
   129e4:	mov	r0, #0
   129e8:	bl	17b80 <__assert_fail@plt+0x67f4>
   129ec:	ldr	r2, [pc, #312]	; 12b2c <__assert_fail@plt+0x17a0>
   129f0:	mov	r1, #4
   129f4:	mov	r5, r0
   129f8:	mov	r0, #1
   129fc:	bl	17b80 <__assert_fail@plt+0x67f4>
   12a00:	mov	r1, #0
   12a04:	mov	r3, r5
   12a08:	mov	r2, r4
   12a0c:	str	r0, [sp]
   12a10:	mov	r0, r1
   12a14:	bl	11194 <error@plt>
   12a18:	b	122b4 <__assert_fail@plt+0xf28>
   12a1c:	ldrd	r0, [r5]
   12a20:	ldrd	r2, [sp, #144]	; 0x90
   12a24:	cmp	r1, r3
   12a28:	cmpeq	r0, r2
   12a2c:	bne	128a0 <__assert_fail@plt+0x1514>
   12a30:	ldr	r3, [sp, #288]	; 0x120
   12a34:	cmn	r3, #1
   12a38:	beq	12a9c <__assert_fail@plt+0x1710>
   12a3c:	ldr	r2, [sp, #168]	; 0xa8
   12a40:	cmp	r3, r2
   12a44:	beq	12a90 <__assert_fail@plt+0x1704>
   12a48:	ldr	r7, [sp, #32]
   12a4c:	mov	r0, ip
   12a50:	ldr	r4, [r7]
   12a54:	bl	11350 <close@plt>
   12a58:	str	r4, [r7]
   12a5c:	b	125bc <__assert_fail@plt+0x1230>
   12a60:	ldr	r3, [sp, #24]
   12a64:	mov	r0, fp
   12a68:	orr	r2, r3, #1
   12a6c:	mov	r1, r9
   12a70:	bl	110b0 <__openat64_2@plt>
   12a74:	subs	ip, r0, #0
   12a78:	bge	1286c <__assert_fail@plt+0x14e0>
   12a7c:	ldr	r3, [sp, #32]
   12a80:	ldr	r3, [r3]
   12a84:	cmp	r3, #13
   12a88:	bne	12394 <__assert_fail@plt+0x1008>
   12a8c:	b	128f4 <__assert_fail@plt+0x1568>
   12a90:	ldr	r3, [sp, #292]	; 0x124
   12a94:	cmn	r3, #1
   12a98:	beq	12aac <__assert_fail@plt+0x1720>
   12a9c:	ldr	r2, [sp, #172]	; 0xac
   12aa0:	ldr	r3, [sp, #292]	; 0x124
   12aa4:	cmp	r3, r2
   12aa8:	bne	12a48 <__assert_fail@plt+0x16bc>
   12aac:	mov	r0, ip
   12ab0:	ldr	r2, [sp, #36]	; 0x24
   12ab4:	ldr	r1, [sp, #20]
   12ab8:	str	ip, [sp, #24]
   12abc:	bl	11230 <fchown@plt>
   12ac0:	ldr	ip, [sp, #24]
   12ac4:	cmp	r0, #0
   12ac8:	bne	1295c <__assert_fail@plt+0x15d0>
   12acc:	mov	r0, ip
   12ad0:	bl	11350 <close@plt>
   12ad4:	cmp	r0, #0
   12ad8:	bne	12394 <__assert_fail@plt+0x1008>
   12adc:	b	125bc <__assert_fail@plt+0x1230>
   12ae0:	cmp	r3, #0
   12ae4:	bne	11fc8 <__assert_fail@plt+0xc3c>
   12ae8:	mov	r5, r3
   12aec:	str	r3, [sp, #12]
   12af0:	mov	r7, r3
   12af4:	ldr	fp, [r6, #16]
   12af8:	ldr	r4, [r6, #20]
   12afc:	mov	r2, #3
   12b00:	b	124e4 <__assert_fail@plt+0x1158>
   12b04:	ldr	lr, [r6, #8]
   12b08:	cmp	lr, #0
   12b0c:	moveq	r7, r4
   12b10:	beq	12198 <__assert_fail@plt+0xe0c>
   12b14:	mov	ip, #0
   12b18:	b	12404 <__assert_fail@plt+0x1078>
   12b1c:	ldrdeq	fp, [r1], -r8
   12b20:	andeq	sl, r1, r0, lsl #25
   12b24:	andeq	sl, r1, ip, ror #29
   12b28:	andeq	fp, r1, r0, lsl r0
   12b2c:	andeq	sl, r1, r8, lsr #26
   12b30:	andeq	sl, r1, r8, lsr lr
   12b34:	andeq	sl, r1, r4, lsr #29
   12b38:	ldrdeq	sl, [r1], -ip
   12b3c:	strdeq	sl, [r1], -r8
   12b40:	andeq	sl, r1, r8, ror #28
   12b44:	andeq	fp, r1, r0, lsl #3
   12b48:	andeq	fp, r1, r8, asr #32
   12b4c:	strheq	fp, [r1], -r4
   12b50:	ldrdeq	sl, [r1], -r8
   12b54:	andeq	sl, r1, r8, lsr #28
   12b58:	andeq	sl, r1, r8, lsl #30
   12b5c:	andeq	fp, r1, r0, lsr #3
   12b60:			; <UNDEFINED> instruction: 0x0001b1bc
   12b64:	andeq	fp, r1, r0, ror r0
   12b68:	muleq	r1, r4, r0
   12b6c:	andeq	fp, r1, r4, ror #1
   12b70:	andeq	fp, r1, r0, lsl r1
   12b74:	andeq	fp, r1, r4, lsr r1
   12b78:	andeq	sl, r1, r4, asr #31
   12b7c:	andeq	fp, r1, ip, asr r1
   12b80:	ldr	r3, [pc, #4]	; 12b8c <__assert_fail@plt+0x1800>
   12b84:	str	r0, [r3]
   12b88:	bx	lr
   12b8c:	andeq	ip, r2, r0, asr #3
   12b90:	ldr	r3, [pc, #4]	; 12b9c <__assert_fail@plt+0x1810>
   12b94:	strb	r0, [r3, #4]
   12b98:	bx	lr
   12b9c:	andeq	ip, r2, r0, asr #3
   12ba0:	ldr	r3, [pc, #192]	; 12c68 <__assert_fail@plt+0x18dc>
   12ba4:	push	{r4, r5, r6, lr}
   12ba8:	sub	sp, sp, #8
   12bac:	ldr	r0, [r3]
   12bb0:	bl	19378 <__assert_fail@plt+0x7fec>
   12bb4:	cmp	r0, #0
   12bb8:	beq	12bdc <__assert_fail@plt+0x1850>
   12bbc:	ldr	r4, [pc, #168]	; 12c6c <__assert_fail@plt+0x18e0>
   12bc0:	ldrb	r3, [r4, #4]
   12bc4:	cmp	r3, #0
   12bc8:	beq	12bf8 <__assert_fail@plt+0x186c>
   12bcc:	bl	1123c <__errno_location@plt>
   12bd0:	ldr	r3, [r0]
   12bd4:	cmp	r3, #32
   12bd8:	bne	12bf8 <__assert_fail@plt+0x186c>
   12bdc:	ldr	r3, [pc, #140]	; 12c70 <__assert_fail@plt+0x18e4>
   12be0:	ldr	r0, [r3]
   12be4:	bl	19378 <__assert_fail@plt+0x7fec>
   12be8:	cmp	r0, #0
   12bec:	bne	12c40 <__assert_fail@plt+0x18b4>
   12bf0:	add	sp, sp, #8
   12bf4:	pop	{r4, r5, r6, pc}
   12bf8:	mov	r2, #5
   12bfc:	ldr	r1, [pc, #112]	; 12c74 <__assert_fail@plt+0x18e8>
   12c00:	mov	r0, #0
   12c04:	bl	11104 <dcgettext@plt>
   12c08:	ldr	r4, [r4]
   12c0c:	cmp	r4, #0
   12c10:	mov	r5, r0
   12c14:	beq	12c4c <__assert_fail@plt+0x18c0>
   12c18:	bl	1123c <__errno_location@plt>
   12c1c:	ldr	r6, [r0]
   12c20:	mov	r0, r4
   12c24:	bl	17c94 <__assert_fail@plt+0x6908>
   12c28:	mov	r1, r6
   12c2c:	str	r5, [sp]
   12c30:	ldr	r2, [pc, #64]	; 12c78 <__assert_fail@plt+0x18ec>
   12c34:	mov	r3, r0
   12c38:	mov	r0, #0
   12c3c:	bl	11194 <error@plt>
   12c40:	ldr	r3, [pc, #52]	; 12c7c <__assert_fail@plt+0x18f0>
   12c44:	ldr	r0, [r3]
   12c48:	bl	110bc <_exit@plt>
   12c4c:	bl	1123c <__errno_location@plt>
   12c50:	mov	r3, r5
   12c54:	ldr	r2, [pc, #36]	; 12c80 <__assert_fail@plt+0x18f4>
   12c58:	ldr	r1, [r0]
   12c5c:	mov	r0, r4
   12c60:	bl	11194 <error@plt>
   12c64:	b	12c40 <__assert_fail@plt+0x18b4>
   12c68:	muleq	r2, ip, r1
   12c6c:	andeq	ip, r2, r0, asr #3
   12c70:	muleq	r2, r8, r1
   12c74:	strdeq	fp, [r1], -ip
   12c78:	andeq	sl, r1, ip, ror ip
   12c7c:	andeq	ip, r2, r0, asr #2
   12c80:	andeq	sl, r1, r0, lsl #25
   12c84:	push	{r4, r5, lr}
   12c88:	sub	sp, sp, #12
   12c8c:	mov	r5, r0
   12c90:	bl	1123c <__errno_location@plt>
   12c94:	mov	r2, #0
   12c98:	mov	r4, r0
   12c9c:	ldr	r3, [r0]
   12ca0:	str	r2, [r4]
   12ca4:	mov	r0, r5
   12ca8:	str	r3, [sp]
   12cac:	str	r3, [sp, #4]
   12cb0:	bl	110a4 <free@plt>
   12cb4:	ldr	r3, [r4]
   12cb8:	add	r2, sp, #8
   12cbc:	cmp	r3, #0
   12cc0:	moveq	r3, #4
   12cc4:	movne	r3, #0
   12cc8:	add	r3, r2, r3
   12ccc:	ldr	r3, [r3, #-8]
   12cd0:	str	r3, [r4]
   12cd4:	add	sp, sp, #12
   12cd8:	pop	{r4, r5, pc}
   12cdc:	ldrd	r2, [r1, #8]
   12ce0:	push	{r4, r5}
   12ce4:	ldrd	r4, [r0, #8]
   12ce8:	cmp	r5, r3
   12cec:	cmpeq	r4, r2
   12cf0:	movne	r0, #0
   12cf4:	beq	12d00 <__assert_fail@plt+0x1974>
   12cf8:	pop	{r4, r5}
   12cfc:	bx	lr
   12d00:	ldrd	r4, [r0]
   12d04:	ldrd	r2, [r1]
   12d08:	cmp	r5, r3
   12d0c:	cmpeq	r4, r2
   12d10:	moveq	r0, #1
   12d14:	movne	r0, #0
   12d18:	pop	{r4, r5}
   12d1c:	bx	lr
   12d20:	push	{r4, lr}
   12d24:	mov	r2, r1
   12d28:	mov	r3, #0
   12d2c:	ldrd	r0, [r0, #8]
   12d30:	bl	19eb0 <__assert_fail@plt+0x8b24>
   12d34:	mov	r0, r2
   12d38:	pop	{r4, pc}
   12d3c:	push	{r4, lr}
   12d40:	mov	r2, r1
   12d44:	mov	r3, #0
   12d48:	ldrd	r0, [r0]
   12d4c:	bl	19eb0 <__assert_fail@plt+0x8b24>
   12d50:	mov	r0, r2
   12d54:	pop	{r4, pc}
   12d58:	push	{r4, r5}
   12d5c:	ldrd	r2, [r1]
   12d60:	ldrd	r4, [r0]
   12d64:	cmp	r5, r3
   12d68:	cmpeq	r4, r2
   12d6c:	moveq	r0, #1
   12d70:	movne	r0, #0
   12d74:	pop	{r4, r5}
   12d78:	bx	lr
   12d7c:	ldr	r2, [r0]
   12d80:	ldr	r3, [r1]
   12d84:	ldrd	r0, [r2, #160]	; 0xa0
   12d88:	ldrd	r2, [r3, #160]	; 0xa0
   12d8c:	cmp	r1, r3
   12d90:	cmpeq	r0, r2
   12d94:	movhi	r0, #1
   12d98:	movls	r0, #0
   12d9c:	movcc	r3, #1
   12da0:	movcs	r3, #0
   12da4:	sub	r0, r0, r3
   12da8:	bx	lr
   12dac:	ldr	r3, [r0, #40]	; 0x28
   12db0:	push	{r4, r5, r6, r7, r8, lr}
   12db4:	cmp	r3, r2
   12db8:	mov	r6, r0
   12dbc:	mov	r5, r2
   12dc0:	mov	r4, r1
   12dc4:	ldr	r7, [r0, #44]	; 0x2c
   12dc8:	bcc	12e40 <__assert_fail@plt+0x1ab4>
   12dcc:	ldr	r0, [r0, #8]
   12dd0:	cmp	r4, #0
   12dd4:	movne	r2, r0
   12dd8:	beq	12dec <__assert_fail@plt+0x1a60>
   12ddc:	str	r4, [r2], #4
   12de0:	ldr	r4, [r4, #8]
   12de4:	cmp	r4, #0
   12de8:	bne	12ddc <__assert_fail@plt+0x1a50>
   12dec:	mov	r3, r7
   12df0:	mov	r2, #4
   12df4:	mov	r1, r5
   12df8:	bl	11308 <qsort@plt>
   12dfc:	ldr	lr, [r6, #8]
   12e00:	subs	r3, r5, #1
   12e04:	ldr	r0, [lr]
   12e08:	beq	12e84 <__assert_fail@plt+0x1af8>
   12e0c:	mov	r2, lr
   12e10:	mov	ip, r0
   12e14:	b	12e1c <__assert_fail@plt+0x1a90>
   12e18:	ldr	ip, [r2, #4]!
   12e1c:	ldr	r1, [r2, #4]
   12e20:	subs	r3, r3, #1
   12e24:	str	r1, [ip, #8]
   12e28:	bne	12e18 <__assert_fail@plt+0x1a8c>
   12e2c:	add	r5, lr, r5, lsl #2
   12e30:	ldr	r2, [r5, #-4]
   12e34:	mov	r3, #0
   12e38:	str	r3, [r2, #8]
   12e3c:	pop	{r4, r5, r6, r7, r8, pc}
   12e40:	add	r1, r2, #40	; 0x28
   12e44:	cmn	r1, #-1073741823	; 0xc0000001
   12e48:	str	r1, [r0, #40]	; 0x28
   12e4c:	bhi	12e68 <__assert_fail@plt+0x1adc>
   12e50:	lsl	r1, r1, #2
   12e54:	ldr	r0, [r0, #8]
   12e58:	bl	1931c <__assert_fail@plt+0x7f90>
   12e5c:	cmp	r0, #0
   12e60:	strne	r0, [r6, #8]
   12e64:	bne	12dd0 <__assert_fail@plt+0x1a44>
   12e68:	ldr	r0, [r6, #8]
   12e6c:	bl	12c84 <__assert_fail@plt+0x18f8>
   12e70:	mov	r3, #0
   12e74:	mov	r0, r4
   12e78:	str	r3, [r6, #8]
   12e7c:	str	r3, [r6, #40]	; 0x28
   12e80:	pop	{r4, r5, r6, r7, r8, pc}
   12e84:	mov	r2, r0
   12e88:	b	12e34 <__assert_fail@plt+0x1aa8>
   12e8c:	add	r3, r2, #176	; 0xb0
   12e90:	push	{r4, r5, r6, r7, r8, lr}
   12e94:	mov	r6, r0
   12e98:	bic	r0, r3, #7
   12e9c:	mov	r5, r2
   12ea0:	mov	r7, r1
   12ea4:	bl	192f0 <__assert_fail@plt+0x7f64>
   12ea8:	subs	r4, r0, #0
   12eac:	beq	12ef8 <__assert_fail@plt+0x1b6c>
   12eb0:	mov	r1, r7
   12eb4:	mov	r2, r5
   12eb8:	add	r0, r4, #168	; 0xa8
   12ebc:	bl	110c8 <memcpy@plt>
   12ec0:	add	r0, r4, r5
   12ec4:	ldr	r1, [r6, #24]
   12ec8:	mov	r3, #0
   12ecc:	mov	r2, #3
   12ed0:	strb	r3, [r0, #168]	; 0xa8
   12ed4:	str	r3, [r4, #32]
   12ed8:	str	r3, [r4, #12]
   12edc:	strh	r3, [r4, #58]	; 0x3a
   12ee0:	str	r3, [r4, #16]
   12ee4:	str	r3, [r4, #20]
   12ee8:	str	r5, [r4, #52]	; 0x34
   12eec:	str	r6, [r4, #44]	; 0x2c
   12ef0:	str	r1, [r4, #28]
   12ef4:	strh	r2, [r4, #60]	; 0x3c
   12ef8:	mov	r0, r4
   12efc:	pop	{r4, r5, r6, r7, r8, pc}
   12f00:	push	{r4, r5, r6, lr}
   12f04:	subs	r4, r0, #0
   12f08:	popeq	{r4, r5, r6, pc}
   12f0c:	ldr	r3, [r4, #12]
   12f10:	ldr	r5, [r4, #8]
   12f14:	subs	r0, r3, #0
   12f18:	beq	12f20 <__assert_fail@plt+0x1b94>
   12f1c:	bl	11368 <closedir@plt>
   12f20:	mov	r0, r4
   12f24:	bl	12c84 <__assert_fail@plt+0x18f8>
   12f28:	subs	r4, r5, #0
   12f2c:	bne	12f0c <__assert_fail@plt+0x1b80>
   12f30:	pop	{r4, r5, r6, pc}
   12f34:	push	{r4, lr}
   12f38:	mov	r4, r0
   12f3c:	b	12f4c <__assert_fail@plt+0x1bc0>
   12f40:	bl	15e30 <__assert_fail@plt+0x4aa4>
   12f44:	cmp	r0, #0
   12f48:	bge	12f64 <__assert_fail@plt+0x1bd8>
   12f4c:	mov	r0, r4
   12f50:	bl	15de4 <__assert_fail@plt+0x4a58>
   12f54:	cmp	r0, #0
   12f58:	mov	r0, r4
   12f5c:	beq	12f40 <__assert_fail@plt+0x1bb4>
   12f60:	pop	{r4, pc}
   12f64:	bl	11350 <close@plt>
   12f68:	b	12f4c <__assert_fail@plt+0x1bc0>
   12f6c:	push	{r4, r5, r6, r7, lr}
   12f70:	sub	sp, sp, #100	; 0x64
   12f74:	ldr	r4, [r0, #44]	; 0x2c
   12f78:	ldr	r3, [r4, #48]	; 0x30
   12f7c:	tst	r3, #512	; 0x200
   12f80:	beq	12ff4 <__assert_fail@plt+0x1c68>
   12f84:	ldr	r6, [r4, #52]	; 0x34
   12f88:	mov	r7, r1
   12f8c:	cmp	r6, #0
   12f90:	mov	r5, r0
   12f94:	beq	12fc0 <__assert_fail@plt+0x1c34>
   12f98:	ldrd	r2, [r5, #64]	; 0x40
   12f9c:	add	r1, sp, #96	; 0x60
   12fa0:	mov	r0, r6
   12fa4:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12fa8:	bl	153e0 <__assert_fail@plt+0x4054>
   12fac:	cmp	r0, #0
   12fb0:	beq	12fec <__assert_fail@plt+0x1c60>
   12fb4:	ldr	r0, [r0, #8]
   12fb8:	add	sp, sp, #100	; 0x64
   12fbc:	pop	{r4, r5, r6, r7, pc}
   12fc0:	ldr	r3, [pc, #168]	; 13070 <__assert_fail@plt+0x1ce4>
   12fc4:	mov	r1, r6
   12fc8:	str	r3, [sp]
   12fcc:	ldr	r2, [pc, #160]	; 13074 <__assert_fail@plt+0x1ce8>
   12fd0:	ldr	r3, [pc, #160]	; 13078 <__assert_fail@plt+0x1cec>
   12fd4:	mov	r0, #13
   12fd8:	bl	15680 <__assert_fail@plt+0x42f4>
   12fdc:	cmp	r0, #0
   12fe0:	mov	r6, r0
   12fe4:	str	r0, [r4, #52]	; 0x34
   12fe8:	bne	12f98 <__assert_fail@plt+0x1c0c>
   12fec:	cmp	r7, #0
   12ff0:	bge	13000 <__assert_fail@plt+0x1c74>
   12ff4:	mov	r0, #0
   12ff8:	add	sp, sp, #100	; 0x64
   12ffc:	pop	{r4, r5, r6, r7, pc}
   13000:	mov	r0, r7
   13004:	add	r1, sp, #8
   13008:	bl	1102c <fstatfs64@plt>
   1300c:	cmp	r0, #0
   13010:	bne	12ff4 <__assert_fail@plt+0x1c68>
   13014:	cmp	r6, #0
   13018:	beq	13064 <__assert_fail@plt+0x1cd8>
   1301c:	mov	r0, #16
   13020:	bl	192f0 <__assert_fail@plt+0x7f64>
   13024:	subs	r4, r0, #0
   13028:	beq	13064 <__assert_fail@plt+0x1cd8>
   1302c:	ldrd	r2, [r5, #64]	; 0x40
   13030:	ldr	r1, [sp, #8]
   13034:	mov	r0, r6
   13038:	str	r1, [r4, #8]
   1303c:	strd	r2, [r4]
   13040:	mov	r1, r4
   13044:	bl	15c74 <__assert_fail@plt+0x48e8>
   13048:	cmp	r0, #0
   1304c:	beq	1305c <__assert_fail@plt+0x1cd0>
   13050:	cmp	r4, r0
   13054:	beq	13064 <__assert_fail@plt+0x1cd8>
   13058:	bl	11344 <abort@plt>
   1305c:	mov	r0, r4
   13060:	bl	12c84 <__assert_fail@plt+0x18f8>
   13064:	ldr	r0, [sp, #8]
   13068:	add	sp, sp, #100	; 0x64
   1306c:	pop	{r4, r5, r6, r7, pc}
   13070:	andeq	r2, r1, r4, lsl #25
   13074:	andeq	r2, r1, ip, lsr sp
   13078:	andeq	r2, r1, r8, asr sp
   1307c:	push	{r4, r5, r6, lr}
   13080:	mov	r5, r1
   13084:	ldr	r1, [r0, #32]
   13088:	cmn	r1, #100	; 0x64
   1308c:	sub	r3, r1, r5
   13090:	clz	r3, r3
   13094:	lsr	r3, r3, #5
   13098:	moveq	r3, #0
   1309c:	cmp	r3, #0
   130a0:	bne	130f8 <__assert_fail@plt+0x1d6c>
   130a4:	cmp	r2, #0
   130a8:	mov	r4, r0
   130ac:	bne	130e0 <__assert_fail@plt+0x1d54>
   130b0:	ldr	r3, [r0, #48]	; 0x30
   130b4:	lsr	r3, r3, #2
   130b8:	eor	r3, r3, #1
   130bc:	cmp	r1, #0
   130c0:	movlt	r3, #0
   130c4:	andge	r3, r3, #1
   130c8:	cmp	r3, #0
   130cc:	beq	130d8 <__assert_fail@plt+0x1d4c>
   130d0:	mov	r0, r1
   130d4:	bl	11350 <close@plt>
   130d8:	str	r5, [r4, #32]
   130dc:	pop	{r4, r5, r6, pc}
   130e0:	add	r0, r0, #60	; 0x3c
   130e4:	bl	15dec <__assert_fail@plt+0x4a60>
   130e8:	cmp	r0, #0
   130ec:	bge	130d4 <__assert_fail@plt+0x1d48>
   130f0:	str	r5, [r4, #32]
   130f4:	pop	{r4, r5, r6, pc}
   130f8:	bl	11344 <abort@plt>
   130fc:	ldr	r3, [r0, #48]	; 0x30
   13100:	push	{r4, r5, r6, lr}
   13104:	ands	r5, r3, #4
   13108:	mov	r4, r0
   1310c:	movne	r5, #0
   13110:	bne	1312c <__assert_fail@plt+0x1da0>
   13114:	tst	r3, #512	; 0x200
   13118:	bne	1313c <__assert_fail@plt+0x1db0>
   1311c:	ldr	r0, [r0, #28]
   13120:	bl	112fc <fchdir@plt>
   13124:	adds	r5, r0, #0
   13128:	movne	r5, #1
   1312c:	add	r0, r4, #60	; 0x3c
   13130:	bl	12f34 <__assert_fail@plt+0x1ba8>
   13134:	mov	r0, r5
   13138:	pop	{r4, r5, r6, pc}
   1313c:	mov	r2, #1
   13140:	mvn	r1, #99	; 0x63
   13144:	bl	1307c <__assert_fail@plt+0x1cf0>
   13148:	b	1312c <__assert_fail@plt+0x1da0>
   1314c:	push	{r4, r5, r6, lr}
   13150:	mov	r4, r2
   13154:	ldr	r2, [r2, #48]	; 0x30
   13158:	sub	sp, sp, #8
   1315c:	cmp	r2, #0
   13160:	add	r5, r4, #64	; 0x40
   13164:	bne	131bc <__assert_fail@plt+0x1e30>
   13168:	tst	r1, #1
   1316c:	beq	131bc <__assert_fail@plt+0x1e30>
   13170:	mov	r2, r5
   13174:	ldr	r1, [r4, #24]
   13178:	mov	r0, #3
   1317c:	bl	1132c <__xstat64@plt>
   13180:	cmp	r0, #0
   13184:	beq	131f8 <__assert_fail@plt+0x1e6c>
   13188:	bl	1123c <__errno_location@plt>
   1318c:	ldr	r3, [r0]
   13190:	mov	r6, r0
   13194:	cmp	r3, #2
   13198:	beq	13270 <__assert_fail@plt+0x1ee4>
   1319c:	str	r3, [r4, #32]
   131a0:	mov	r0, r5
   131a4:	mov	r2, #104	; 0x68
   131a8:	mov	r1, #0
   131ac:	bl	11254 <memset@plt>
   131b0:	mov	r0, #10
   131b4:	add	sp, sp, #8
   131b8:	pop	{r4, r5, r6, pc}
   131bc:	lsl	r1, r1, #30
   131c0:	orrs	r3, r3, r1, lsr #31
   131c4:	bne	13170 <__assert_fail@plt+0x1de4>
   131c8:	mov	r3, #256	; 0x100
   131cc:	ldr	r2, [r4, #24]
   131d0:	mov	r1, r0
   131d4:	str	r3, [sp]
   131d8:	mov	r0, #3
   131dc:	mov	r3, r5
   131e0:	bl	11128 <__fxstatat64@plt>
   131e4:	cmp	r0, #0
   131e8:	beq	131f8 <__assert_fail@plt+0x1e6c>
   131ec:	bl	1123c <__errno_location@plt>
   131f0:	ldr	r3, [r0]
   131f4:	b	1319c <__assert_fail@plt+0x1e10>
   131f8:	ldr	r0, [r4, #80]	; 0x50
   131fc:	and	r0, r0, #61440	; 0xf000
   13200:	cmp	r0, #16384	; 0x4000
   13204:	beq	13228 <__assert_fail@plt+0x1e9c>
   13208:	cmp	r0, #40960	; 0xa000
   1320c:	moveq	r0, #12
   13210:	beq	131b4 <__assert_fail@plt+0x1e28>
   13214:	cmp	r0, #32768	; 0x8000
   13218:	movne	r0, #3
   1321c:	moveq	r0, #8
   13220:	add	sp, sp, #8
   13224:	pop	{r4, r5, r6, pc}
   13228:	ldrb	r3, [r4, #168]	; 0xa8
   1322c:	cmp	r3, #46	; 0x2e
   13230:	beq	1323c <__assert_fail@plt+0x1eb0>
   13234:	mov	r0, #1
   13238:	b	131b4 <__assert_fail@plt+0x1e28>
   1323c:	ldrb	r3, [r4, #169]	; 0xa9
   13240:	cmp	r3, #0
   13244:	beq	1325c <__assert_fail@plt+0x1ed0>
   13248:	ldr	r3, [r4, #168]	; 0xa8
   1324c:	bic	r3, r3, #-16777216	; 0xff000000
   13250:	bic	r3, r3, #255	; 0xff
   13254:	cmp	r3, #11776	; 0x2e00
   13258:	bne	13234 <__assert_fail@plt+0x1ea8>
   1325c:	ldr	r0, [r4, #48]	; 0x30
   13260:	cmp	r0, #0
   13264:	movne	r0, #5
   13268:	moveq	r0, #1
   1326c:	b	131b4 <__assert_fail@plt+0x1e28>
   13270:	mov	r2, r5
   13274:	ldr	r1, [r4, #24]
   13278:	mov	r0, #3
   1327c:	bl	1135c <__lxstat64@plt>
   13280:	cmp	r0, #0
   13284:	streq	r0, [r6]
   13288:	moveq	r0, #13
   1328c:	beq	131b4 <__assert_fail@plt+0x1e28>
   13290:	ldr	r3, [r6]
   13294:	b	1319c <__assert_fail@plt+0x1e10>
   13298:	push	{r4, r5, r6, lr}
   1329c:	mov	r5, r0
   132a0:	ldr	r0, [r1]
   132a4:	add	r3, r0, #256	; 0x100
   132a8:	add	r2, r3, r2
   132ac:	cmp	r0, r2
   132b0:	bhi	132dc <__assert_fail@plt+0x1f50>
   132b4:	str	r2, [r1]
   132b8:	ldr	r0, [r5]
   132bc:	mov	r1, r2
   132c0:	bl	1931c <__assert_fail@plt+0x7f90>
   132c4:	subs	r4, r0, #0
   132c8:	movne	r3, #1
   132cc:	strne	r4, [r5]
   132d0:	beq	13304 <__assert_fail@plt+0x1f78>
   132d4:	mov	r0, r3
   132d8:	pop	{r4, r5, r6, pc}
   132dc:	ldr	r0, [r5]
   132e0:	mov	r4, #0
   132e4:	bl	12c84 <__assert_fail@plt+0x18f8>
   132e8:	str	r4, [r5]
   132ec:	bl	1123c <__errno_location@plt>
   132f0:	mov	r2, #36	; 0x24
   132f4:	mov	r3, r4
   132f8:	str	r2, [r0]
   132fc:	mov	r0, r3
   13300:	pop	{r4, r5, r6, pc}
   13304:	ldr	r0, [r5]
   13308:	bl	12c84 <__assert_fail@plt+0x18f8>
   1330c:	str	r4, [r5]
   13310:	mov	r3, r4
   13314:	b	132d4 <__assert_fail@plt+0x1f48>
   13318:	ldr	r3, [pc, #104]	; 13388 <__assert_fail@plt+0x1ffc>
   1331c:	push	{r4, lr}
   13320:	and	r3, r3, r0
   13324:	cmp	r3, #0
   13328:	sub	sp, sp, #8
   1332c:	mov	r4, r1
   13330:	beq	13364 <__assert_fail@plt+0x1fd8>
   13334:	ldr	r2, [pc, #80]	; 1338c <__assert_fail@plt+0x2000>
   13338:	ldr	r3, [pc, #80]	; 13390 <__assert_fail@plt+0x2004>
   1333c:	str	r2, [sp]
   13340:	mov	r1, #0
   13344:	ldr	r2, [pc, #72]	; 13394 <__assert_fail@plt+0x2008>
   13348:	mov	r0, #31
   1334c:	bl	15680 <__assert_fail@plt+0x42f4>
   13350:	str	r0, [r4]
   13354:	adds	r0, r0, #0
   13358:	movne	r0, #1
   1335c:	add	sp, sp, #8
   13360:	pop	{r4, pc}
   13364:	mov	r0, #32
   13368:	bl	192f0 <__assert_fail@plt+0x7f64>
   1336c:	cmp	r0, #0
   13370:	str	r0, [r4]
   13374:	beq	1335c <__assert_fail@plt+0x1fd0>
   13378:	bl	193f4 <__assert_fail@plt+0x8068>
   1337c:	mov	r0, #1
   13380:	add	sp, sp, #8
   13384:	pop	{r4, pc}
   13388:	andeq	r0, r0, r2, lsl #2
   1338c:	andeq	r2, r1, r4, lsl #25
   13390:	ldrdeq	r2, [r1], -ip
   13394:	andeq	r2, r1, r0, lsr #26
   13398:	ldr	ip, [pc, #44]	; 133cc <__assert_fail@plt+0x2040>
   1339c:	tst	r1, #16
   133a0:	ldr	r3, [pc, #40]	; 133d0 <__assert_fail@plt+0x2044>
   133a4:	moveq	r3, ip
   133a8:	tst	r1, #512	; 0x200
   133ac:	mov	ip, r2
   133b0:	bne	133c0 <__assert_fail@plt+0x2034>
   133b4:	mov	r1, r3
   133b8:	mov	r0, r2
   133bc:	b	19758 <__assert_fail@plt+0x83cc>
   133c0:	mov	r2, r3
   133c4:	mov	r1, ip
   133c8:	b	15ee0 <__assert_fail@plt+0x4b54>
   133cc:	andeq	r4, r8, r0, lsl #18
   133d0:	andeq	ip, r8, r0, lsl #18
   133d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   133d8:	subs	sl, r3, #0
   133dc:	sub	sp, sp, #104	; 0x68
   133e0:	mov	r5, r0
   133e4:	mov	r6, r1
   133e8:	mov	r4, r2
   133ec:	ldr	r9, [r0, #48]	; 0x30
   133f0:	beq	13444 <__assert_fail@plt+0x20b8>
   133f4:	ldr	r1, [pc, #432]	; 135ac <__assert_fail@plt+0x2220>
   133f8:	mov	r0, sl
   133fc:	bl	11074 <strcmp@plt>
   13400:	cmp	r0, #0
   13404:	bne	13444 <__assert_fail@plt+0x20b8>
   13408:	tst	r9, #4
   1340c:	bne	1344c <__assert_fail@plt+0x20c0>
   13410:	cmp	r4, #0
   13414:	bge	13598 <__assert_fail@plt+0x220c>
   13418:	tst	r9, #512	; 0x200
   1341c:	bne	13538 <__assert_fail@plt+0x21ac>
   13420:	mov	r8, #1
   13424:	mov	r1, r9
   13428:	mov	r2, sl
   1342c:	ldr	r0, [r5, #32]
   13430:	bl	13398 <__assert_fail@plt+0x200c>
   13434:	subs	r7, r0, #0
   13438:	blt	13590 <__assert_fail@plt+0x2204>
   1343c:	ldr	r9, [r5, #48]	; 0x30
   13440:	b	13480 <__assert_fail@plt+0x20f4>
   13444:	ands	r8, r9, #4
   13448:	beq	13474 <__assert_fail@plt+0x20e8>
   1344c:	mvn	r3, r4
   13450:	lsr	r3, r3, #31
   13454:	ands	r9, r3, r9, lsr #9
   13458:	beq	13468 <__assert_fail@plt+0x20dc>
   1345c:	mov	r0, r4
   13460:	bl	11350 <close@plt>
   13464:	mov	r9, #0
   13468:	mov	r0, r9
   1346c:	add	sp, sp, #104	; 0x68
   13470:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13474:	cmp	r4, #0
   13478:	movge	r7, r4
   1347c:	blt	13424 <__assert_fail@plt+0x2098>
   13480:	tst	r9, #2
   13484:	bne	134a4 <__assert_fail@plt+0x2118>
   13488:	cmp	sl, #0
   1348c:	beq	134fc <__assert_fail@plt+0x2170>
   13490:	mov	r0, sl
   13494:	ldr	r1, [pc, #272]	; 135ac <__assert_fail@plt+0x2220>
   13498:	bl	11074 <strcmp@plt>
   1349c:	cmp	r0, #0
   134a0:	bne	134fc <__assert_fail@plt+0x2170>
   134a4:	mov	r2, sp
   134a8:	mov	r1, r7
   134ac:	mov	r0, #3
   134b0:	bl	11140 <__fxstat64@plt>
   134b4:	cmp	r0, #0
   134b8:	beq	13514 <__assert_fail@plt+0x2188>
   134bc:	mvn	r9, #0
   134c0:	cmp	r4, #0
   134c4:	bge	13468 <__assert_fail@plt+0x20dc>
   134c8:	bl	1123c <__errno_location@plt>
   134cc:	mov	r4, r0
   134d0:	mov	r0, r7
   134d4:	ldr	r5, [r4]
   134d8:	bl	11350 <close@plt>
   134dc:	str	r5, [r4]
   134e0:	b	13468 <__assert_fail@plt+0x20dc>
   134e4:	ldrd	r0, [r6, #160]	; 0xa0
   134e8:	ldrd	r2, [sp, #96]	; 0x60
   134ec:	cmp	r1, r3
   134f0:	cmpeq	r0, r2
   134f4:	bne	13528 <__assert_fail@plt+0x219c>
   134f8:	ldr	r9, [r5, #48]	; 0x30
   134fc:	tst	r9, #512	; 0x200
   13500:	bne	13574 <__assert_fail@plt+0x21e8>
   13504:	mov	r0, r7
   13508:	bl	112fc <fchdir@plt>
   1350c:	mov	r9, r0
   13510:	b	134c0 <__assert_fail@plt+0x2134>
   13514:	ldrd	r0, [r6, #64]	; 0x40
   13518:	ldrd	r2, [sp]
   1351c:	cmp	r1, r3
   13520:	cmpeq	r0, r2
   13524:	beq	134e4 <__assert_fail@plt+0x2158>
   13528:	bl	1123c <__errno_location@plt>
   1352c:	mov	r3, #2
   13530:	str	r3, [r0]
   13534:	b	134bc <__assert_fail@plt+0x2130>
   13538:	add	r7, r5, #60	; 0x3c
   1353c:	mov	r0, r7
   13540:	bl	15de4 <__assert_fail@plt+0x4a58>
   13544:	subs	r8, r0, #0
   13548:	bne	13424 <__assert_fail@plt+0x2098>
   1354c:	mov	r0, r7
   13550:	bl	15e30 <__assert_fail@plt+0x4aa4>
   13554:	ldr	r9, [r5, #48]	; 0x30
   13558:	subs	r7, r0, #0
   1355c:	blt	13420 <__assert_fail@plt+0x2094>
   13560:	tst	r9, #2
   13564:	mov	r4, r7
   13568:	mov	r8, #1
   1356c:	beq	134fc <__assert_fail@plt+0x2170>
   13570:	b	134a4 <__assert_fail@plt+0x2118>
   13574:	eor	r2, r8, #1
   13578:	mov	r1, r7
   1357c:	uxtb	r2, r2
   13580:	mov	r0, r5
   13584:	bl	1307c <__assert_fail@plt+0x1cf0>
   13588:	mov	r9, #0
   1358c:	b	13468 <__assert_fail@plt+0x20dc>
   13590:	mvn	r9, #0
   13594:	b	13468 <__assert_fail@plt+0x20dc>
   13598:	tst	r9, #2
   1359c:	mov	r7, r4
   135a0:	mov	r8, #1
   135a4:	beq	13490 <__assert_fail@plt+0x2104>
   135a8:	b	134a4 <__assert_fail@plt+0x2118>
   135ac:	andeq	fp, r1, r8, lsr r2
   135b0:	ldr	r3, [pc, #164]	; 1365c <__assert_fail@plt+0x22d0>
   135b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135b8:	and	r3, r3, r0
   135bc:	cmp	r3, #0
   135c0:	mov	sl, r1
   135c4:	mov	r8, r2
   135c8:	beq	13630 <__assert_fail@plt+0x22a4>
   135cc:	mov	r0, #24
   135d0:	bl	192f0 <__assert_fail@plt+0x7f64>
   135d4:	subs	r9, r0, #0
   135d8:	beq	13654 <__assert_fail@plt+0x22c8>
   135dc:	ldrd	r4, [r8, #160]	; 0xa0
   135e0:	ldrd	r6, [r8, #64]	; 0x40
   135e4:	str	r8, [r9, #16]
   135e8:	strd	r4, [r9, #8]
   135ec:	ldr	r0, [sl]
   135f0:	strd	r6, [r9]
   135f4:	mov	r1, r9
   135f8:	bl	15c74 <__assert_fail@plt+0x48e8>
   135fc:	cmp	r9, r0
   13600:	mov	r4, r0
   13604:	beq	13628 <__assert_fail@plt+0x229c>
   13608:	mov	r0, r9
   1360c:	bl	12c84 <__assert_fail@plt+0x18f8>
   13610:	cmp	r4, #0
   13614:	beq	13654 <__assert_fail@plt+0x22c8>
   13618:	ldr	r2, [r4, #16]
   1361c:	mov	r3, #2
   13620:	str	r2, [r8]
   13624:	strh	r3, [r8, #56]	; 0x38
   13628:	mov	r0, #1
   1362c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13630:	ldr	r0, [r1]
   13634:	add	r1, r2, #64	; 0x40
   13638:	bl	19418 <__assert_fail@plt+0x808c>
   1363c:	cmp	r0, #0
   13640:	beq	13628 <__assert_fail@plt+0x229c>
   13644:	mov	r3, #2
   13648:	str	r8, [r8]
   1364c:	strh	r3, [r8, #56]	; 0x38
   13650:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13654:	mov	r0, #0
   13658:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1365c:	andeq	r0, r0, r2, lsl #2
   13660:	ldr	r3, [pc, #172]	; 13714 <__assert_fail@plt+0x2388>
   13664:	push	{r4, r5, lr}
   13668:	and	r3, r3, r0
   1366c:	cmp	r3, #0
   13670:	sub	sp, sp, #28
   13674:	bne	136bc <__assert_fail@plt+0x2330>
   13678:	ldr	r3, [r2, #4]
   1367c:	cmp	r3, #0
   13680:	beq	136b4 <__assert_fail@plt+0x2328>
   13684:	ldr	r0, [r3, #48]	; 0x30
   13688:	cmp	r0, #0
   1368c:	blt	136b4 <__assert_fail@plt+0x2328>
   13690:	ldr	ip, [r1]
   13694:	ldrd	r0, [ip, #16]
   13698:	orrs	r1, r0, r1
   1369c:	beq	13710 <__assert_fail@plt+0x2384>
   136a0:	ldrd	r4, [ip]
   136a4:	ldrd	r0, [r2, #160]	; 0xa0
   136a8:	cmp	r5, r1
   136ac:	cmpeq	r4, r0
   136b0:	beq	136ec <__assert_fail@plt+0x2360>
   136b4:	add	sp, sp, #28
   136b8:	pop	{r4, r5, pc}
   136bc:	ldrd	r4, [r2, #64]	; 0x40
   136c0:	ldrd	r2, [r2, #160]	; 0xa0
   136c4:	ldr	r0, [r1]
   136c8:	mov	r1, sp
   136cc:	strd	r4, [sp]
   136d0:	strd	r2, [sp, #8]
   136d4:	bl	15cac <__assert_fail@plt+0x4920>
   136d8:	cmp	r0, #0
   136dc:	beq	13710 <__assert_fail@plt+0x2384>
   136e0:	bl	12c84 <__assert_fail@plt+0x18f8>
   136e4:	add	sp, sp, #28
   136e8:	pop	{r4, r5, pc}
   136ec:	ldrd	r0, [ip, #8]
   136f0:	ldrd	r4, [r2, #64]	; 0x40
   136f4:	cmp	r1, r5
   136f8:	cmpeq	r0, r4
   136fc:	ldrdeq	r0, [r3, #64]	; 0x40
   13700:	ldrdeq	r2, [r3, #160]	; 0xa0
   13704:	strdeq	r0, [ip, #8]
   13708:	strdeq	r2, [ip]
   1370c:	b	136b4 <__assert_fail@plt+0x2328>
   13710:	bl	11344 <abort@plt>
   13714:	andeq	r0, r0, r2, lsl #2
   13718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1371c:	sub	sp, sp, #68	; 0x44
   13720:	ldr	sl, [r0]
   13724:	mov	r5, r0
   13728:	str	r1, [sp, #40]	; 0x28
   1372c:	ldr	r3, [sl, #12]
   13730:	cmp	r3, #0
   13734:	str	r3, [sp, #44]	; 0x2c
   13738:	beq	13afc <__assert_fail@plt+0x2770>
   1373c:	mov	r0, r3
   13740:	bl	112f0 <dirfd@plt>
   13744:	cmp	r0, #0
   13748:	str	r0, [sp, #60]	; 0x3c
   1374c:	blt	13ed8 <__assert_fail@plt+0x2b4c>
   13750:	ldr	r3, [r5, #44]	; 0x2c
   13754:	cmp	r3, #0
   13758:	beq	14074 <__assert_fail@plt+0x2ce8>
   1375c:	mvn	r3, #0
   13760:	str	r3, [sp, #20]
   13764:	ldr	r0, [r5, #48]	; 0x30
   13768:	mov	r3, #1
   1376c:	str	r3, [sp, #52]	; 0x34
   13770:	ldr	r3, [sl, #40]	; 0x28
   13774:	ldr	r2, [sl, #28]
   13778:	mov	r1, r3
   1377c:	sub	r3, r3, #1
   13780:	str	sl, [sp, #12]
   13784:	ldrb	r2, [r2, r3]
   13788:	cmp	r2, #47	; 0x2f
   1378c:	moveq	r1, r3
   13790:	ands	r0, r0, #4
   13794:	mov	r2, r1
   13798:	ldrne	r3, [r5, #24]
   1379c:	movne	r0, r2
   137a0:	str	r1, [sp, #32]
   137a4:	addne	r2, r3, r2
   137a8:	movne	r1, #47	; 0x2f
   137ac:	strbne	r1, [r3, r0]
   137b0:	addne	r3, r2, #1
   137b4:	ldr	r2, [sp, #32]
   137b8:	strne	r3, [sp, #28]
   137bc:	add	r2, r2, #1
   137c0:	ldr	r3, [sl, #48]	; 0x30
   137c4:	ldr	fp, [r5, #36]	; 0x24
   137c8:	mov	r1, r2
   137cc:	str	r2, [sp, #8]
   137d0:	sub	r1, fp, r1
   137d4:	mov	r2, #0
   137d8:	add	r3, r3, #1
   137dc:	streq	r0, [sp, #28]
   137e0:	str	r2, [sp, #48]	; 0x30
   137e4:	str	r1, [sp, #16]
   137e8:	str	r3, [sp, #24]
   137ec:	str	r2, [sp, #36]	; 0x24
   137f0:	mov	r7, r2
   137f4:	str	r2, [sp, #4]
   137f8:	mov	r8, r2
   137fc:	mov	sl, r2
   13800:	b	13880 <__assert_fail@plt+0x24f4>
   13804:	tst	r3, #251	; 0xfb
   13808:	beq	13954 <__assert_fail@plt+0x25c8>
   1380c:	lsr	r2, r2, #4
   13810:	cmp	r3, #10
   13814:	orrne	r2, r2, #1
   13818:	tst	r2, #1
   1381c:	beq	13c24 <__assert_fail@plt+0x2898>
   13820:	sub	r3, r3, #1
   13824:	mov	r2, #11
   13828:	cmp	r3, #11
   1382c:	strh	r2, [r4, #56]	; 0x38
   13830:	bhi	14064 <__assert_fail@plt+0x2cd8>
   13834:	ldr	r2, [pc, #2128]	; 1408c <__assert_fail@plt+0x2d00>
   13838:	ldr	r1, [r2, r3, lsl #2]
   1383c:	mov	r2, #1
   13840:	mov	r3, #0
   13844:	str	r1, [r4, #80]	; 0x50
   13848:	strd	r2, [r4, #112]	; 0x70
   1384c:	ldr	r3, [sp, #4]
   13850:	str	r8, [r4, #8]
   13854:	cmp	r3, #0
   13858:	ldr	r3, [pc, #2096]	; 14090 <__assert_fail@plt+0x2d04>
   1385c:	strne	r4, [sl, #8]
   13860:	streq	r4, [sp, #4]
   13864:	cmp	r7, r3
   13868:	beq	13a6c <__assert_fail@plt+0x26e0>
   1386c:	ldr	r3, [sp, #20]
   13870:	add	r7, r7, #1
   13874:	cmp	r7, r3
   13878:	bcs	13ea0 <__assert_fail@plt+0x2b14>
   1387c:	mov	sl, r4
   13880:	ldr	r3, [sp, #12]
   13884:	ldr	r4, [r3, #12]
   13888:	cmp	r4, #0
   1388c:	beq	13cf4 <__assert_fail@plt+0x2968>
   13890:	bl	1123c <__errno_location@plt>
   13894:	mov	r9, r0
   13898:	mov	r0, r4
   1389c:	str	r8, [r9]
   138a0:	bl	112d8 <readdir64@plt>
   138a4:	subs	fp, r0, #0
   138a8:	beq	13dcc <__assert_fail@plt+0x2a40>
   138ac:	ldr	r2, [r5, #48]	; 0x30
   138b0:	tst	r2, #32
   138b4:	bne	138c4 <__assert_fail@plt+0x2538>
   138b8:	ldrb	r2, [fp, #19]
   138bc:	cmp	r2, #46	; 0x2e
   138c0:	beq	13ad4 <__assert_fail@plt+0x2748>
   138c4:	add	r4, fp, #19
   138c8:	mov	r0, r4
   138cc:	bl	1120c <strlen@plt>
   138d0:	mov	r1, r4
   138d4:	mov	r2, r0
   138d8:	mov	r6, r0
   138dc:	mov	r0, r5
   138e0:	bl	12e8c <__assert_fail@plt+0x1b00>
   138e4:	subs	r4, r0, #0
   138e8:	beq	13ca4 <__assert_fail@plt+0x2918>
   138ec:	ldr	r3, [sp, #16]
   138f0:	cmp	r3, r6
   138f4:	bls	1398c <__assert_fail@plt+0x2600>
   138f8:	ldr	r3, [sp, #8]
   138fc:	adds	r6, r3, r6
   13900:	bcs	139f8 <__assert_fail@plt+0x266c>
   13904:	ldrd	r0, [fp]
   13908:	ldr	r2, [r5, #48]	; 0x30
   1390c:	ldr	ip, [r5]
   13910:	tst	r2, #4
   13914:	ldr	r3, [sp, #24]
   13918:	strd	r0, [r4, #160]	; 0xa0
   1391c:	addeq	r1, r4, #168	; 0xa8
   13920:	str	r3, [r4, #48]	; 0x30
   13924:	str	ip, [r4, #4]
   13928:	str	r6, [r4, #40]	; 0x28
   1392c:	streq	r1, [r4, #24]
   13930:	bne	13a48 <__assert_fail@plt+0x26bc>
   13934:	ldr	r1, [r5, #44]	; 0x2c
   13938:	cmp	r1, #0
   1393c:	beq	13948 <__assert_fail@plt+0x25bc>
   13940:	tst	r2, #1024	; 0x400
   13944:	beq	13ab8 <__assert_fail@plt+0x272c>
   13948:	tst	r2, #8
   1394c:	ldrb	r3, [fp, #18]
   13950:	bne	13804 <__assert_fail@plt+0x2478>
   13954:	sub	r3, r3, #1
   13958:	cmp	r3, #11
   1395c:	mov	r2, #11
   13960:	strh	r2, [r4, #56]	; 0x38
   13964:	strhi	r8, [r4, #80]	; 0x50
   13968:	movhi	r2, #2
   1396c:	movhi	r3, #0
   13970:	bhi	13848 <__assert_fail@plt+0x24bc>
   13974:	ldr	r2, [pc, #1808]	; 1408c <__assert_fail@plt+0x2d00>
   13978:	ldr	r1, [r2, r3, lsl #2]
   1397c:	mov	r2, #2
   13980:	mov	r3, #0
   13984:	str	r1, [r4, #80]	; 0x50
   13988:	b	13848 <__assert_fail@plt+0x24bc>
   1398c:	ldr	r3, [sp, #32]
   13990:	add	r1, r5, #36	; 0x24
   13994:	add	r2, r3, #2
   13998:	ldr	r3, [r5, #24]
   1399c:	add	r2, r2, r6
   139a0:	add	r0, r5, #24
   139a4:	str	r3, [sp, #16]
   139a8:	bl	13298 <__assert_fail@plt+0x1f0c>
   139ac:	cmp	r0, #0
   139b0:	beq	13ca4 <__assert_fail@plt+0x2918>
   139b4:	ldr	r2, [r5, #24]
   139b8:	ldr	r3, [sp, #16]
   139bc:	cmp	r3, r2
   139c0:	beq	13af4 <__assert_fail@plt+0x2768>
   139c4:	ldr	r1, [r5, #48]	; 0x30
   139c8:	tst	r1, #4
   139cc:	ldrne	r3, [sp, #8]
   139d0:	addne	r3, r2, r3
   139d4:	strne	r3, [sp, #28]
   139d8:	ldr	r3, [r5, #36]	; 0x24
   139dc:	ldr	r2, [sp, #8]
   139e0:	str	r0, [sp, #36]	; 0x24
   139e4:	sub	r3, r3, r2
   139e8:	str	r3, [sp, #16]
   139ec:	ldr	r3, [sp, #8]
   139f0:	adds	r6, r3, r6
   139f4:	bcc	13904 <__assert_fail@plt+0x2578>
   139f8:	ldr	sl, [sp, #12]
   139fc:	mov	r0, r4
   13a00:	bl	12c84 <__assert_fail@plt+0x18f8>
   13a04:	ldr	r0, [sp, #4]
   13a08:	bl	12f00 <__assert_fail@plt+0x1b74>
   13a0c:	ldr	r0, [sl, #12]
   13a10:	bl	11368 <closedir@plt>
   13a14:	ldr	r3, [r5, #48]	; 0x30
   13a18:	mov	r2, #0
   13a1c:	orr	r3, r3, #8192	; 0x2000
   13a20:	mov	r0, #7
   13a24:	mov	r1, #36	; 0x24
   13a28:	str	r2, [sp, #4]
   13a2c:	strh	r0, [sl, #56]	; 0x38
   13a30:	str	r2, [sl, #12]
   13a34:	ldr	r0, [sp, #4]
   13a38:	str	r3, [r5, #48]	; 0x30
   13a3c:	str	r1, [r9]
   13a40:	add	sp, sp, #68	; 0x44
   13a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a48:	ldr	r1, [r4, #28]
   13a4c:	ldr	r2, [r4, #52]	; 0x34
   13a50:	str	r1, [r4, #24]
   13a54:	add	r2, r2, #1
   13a58:	add	r1, r4, #168	; 0xa8
   13a5c:	ldr	r0, [sp, #28]
   13a60:	bl	11098 <memmove@plt>
   13a64:	ldr	r2, [r5, #48]	; 0x30
   13a68:	b	13934 <__assert_fail@plt+0x25a8>
   13a6c:	ldr	r3, [r5, #44]	; 0x2c
   13a70:	cmp	r3, #0
   13a74:	bne	1386c <__assert_fail@plt+0x24e0>
   13a78:	ldr	r1, [sp, #60]	; 0x3c
   13a7c:	ldr	r0, [sp, #12]
   13a80:	bl	12f6c <__assert_fail@plt+0x1be0>
   13a84:	ldr	r3, [pc, #1544]	; 14094 <__assert_fail@plt+0x2d08>
   13a88:	cmp	r0, r3
   13a8c:	beq	13ab0 <__assert_fail@plt+0x2724>
   13a90:	ldr	r3, [pc, #1536]	; 14098 <__assert_fail@plt+0x2d0c>
   13a94:	cmp	r0, r3
   13a98:	beq	13ab0 <__assert_fail@plt+0x2724>
   13a9c:	ldr	r3, [pc, #1528]	; 1409c <__assert_fail@plt+0x2d10>
   13aa0:	cmp	r0, r3
   13aa4:	movne	r3, #1
   13aa8:	strne	r3, [sp, #48]	; 0x30
   13aac:	bne	1386c <__assert_fail@plt+0x24e0>
   13ab0:	str	r8, [sp, #48]	; 0x30
   13ab4:	b	1386c <__assert_fail@plt+0x24e0>
   13ab8:	mov	r1, r2
   13abc:	mov	r3, r8
   13ac0:	mov	r2, r4
   13ac4:	ldr	r0, [r5, #32]
   13ac8:	bl	1314c <__assert_fail@plt+0x1dc0>
   13acc:	strh	r0, [r4, #56]	; 0x38
   13ad0:	b	1384c <__assert_fail@plt+0x24c0>
   13ad4:	ldrb	r2, [fp, #20]
   13ad8:	cmp	r2, #0
   13adc:	beq	13aec <__assert_fail@plt+0x2760>
   13ae0:	ldrh	r2, [fp, #20]
   13ae4:	cmp	r2, #46	; 0x2e
   13ae8:	bne	138c4 <__assert_fail@plt+0x2538>
   13aec:	mov	r4, sl
   13af0:	b	1387c <__assert_fail@plt+0x24f0>
   13af4:	ldr	r0, [sp, #36]	; 0x24
   13af8:	b	139d8 <__assert_fail@plt+0x264c>
   13afc:	ldr	r3, [r0, #48]	; 0x30
   13b00:	ldr	r1, [sl, #24]
   13b04:	and	r2, r3, #516	; 0x204
   13b08:	cmp	r2, #512	; 0x200
   13b0c:	mvnne	r0, #99	; 0x63
   13b10:	ldreq	r0, [r0, #32]
   13b14:	ands	r2, r3, #16
   13b18:	bne	13c34 <__assert_fail@plt+0x28a8>
   13b1c:	add	r3, sp, #60	; 0x3c
   13b20:	bl	15f18 <__assert_fail@plt+0x4b8c>
   13b24:	cmp	r0, #0
   13b28:	mov	r4, r0
   13b2c:	str	r0, [sl, #12]
   13b30:	beq	13f8c <__assert_fail@plt+0x2c00>
   13b34:	ldrh	r3, [sl, #56]	; 0x38
   13b38:	cmp	r3, #11
   13b3c:	beq	13fb4 <__assert_fail@plt+0x2c28>
   13b40:	ldr	r0, [r5, #48]	; 0x30
   13b44:	tst	r0, #256	; 0x100
   13b48:	bne	13c54 <__assert_fail@plt+0x28c8>
   13b4c:	ldr	r2, [r5, #44]	; 0x2c
   13b50:	ldr	r3, [pc, #1352]	; 140a0 <__assert_fail@plt+0x2d14>
   13b54:	cmp	r2, #0
   13b58:	mvnne	r3, #0
   13b5c:	str	r3, [sp, #20]
   13b60:	ldr	r3, [sp, #40]	; 0x28
   13b64:	cmp	r3, #2
   13b68:	beq	13f48 <__assert_fail@plt+0x2bbc>
   13b6c:	ldr	r3, [r5, #48]	; 0x30
   13b70:	and	r3, r3, #56	; 0x38
   13b74:	cmp	r3, #24
   13b78:	beq	13fd0 <__assert_fail@plt+0x2c44>
   13b7c:	ldr	r3, [sp, #40]	; 0x28
   13b80:	mov	r4, #1
   13b84:	sub	r6, r3, #3
   13b88:	clz	r6, r6
   13b8c:	lsr	r6, r6, #5
   13b90:	ldr	r3, [r5, #48]	; 0x30
   13b94:	tst	r3, #512	; 0x200
   13b98:	bne	13f70 <__assert_fail@plt+0x2be4>
   13b9c:	ldr	r2, [sp, #60]	; 0x3c
   13ba0:	cmp	r2, #0
   13ba4:	blt	13bc0 <__assert_fail@plt+0x2834>
   13ba8:	mov	r3, #0
   13bac:	mov	r1, sl
   13bb0:	mov	r0, r5
   13bb4:	bl	133d4 <__assert_fail@plt+0x2048>
   13bb8:	cmp	r0, #0
   13bbc:	beq	13764 <__assert_fail@plt+0x23d8>
   13bc0:	tst	r4, r6
   13bc4:	beq	13bd4 <__assert_fail@plt+0x2848>
   13bc8:	bl	1123c <__errno_location@plt>
   13bcc:	ldr	r3, [r0]
   13bd0:	str	r3, [sl, #32]
   13bd4:	ldrh	r3, [sl, #58]	; 0x3a
   13bd8:	ldr	r0, [sl, #12]
   13bdc:	orr	r3, r3, #1
   13be0:	strh	r3, [sl, #58]	; 0x3a
   13be4:	bl	11368 <closedir@plt>
   13be8:	ldr	r0, [r5, #48]	; 0x30
   13bec:	mov	r3, #0
   13bf0:	tst	r0, #512	; 0x200
   13bf4:	str	r3, [sl, #12]
   13bf8:	beq	13c14 <__assert_fail@plt+0x2888>
   13bfc:	ldr	r3, [sp, #60]	; 0x3c
   13c00:	cmp	r3, #0
   13c04:	blt	13c14 <__assert_fail@plt+0x2888>
   13c08:	mov	r0, r3
   13c0c:	bl	11350 <close@plt>
   13c10:	ldr	r0, [r5, #48]	; 0x30
   13c14:	mov	r3, #0
   13c18:	str	r3, [sl, #12]
   13c1c:	str	r3, [sp, #52]	; 0x34
   13c20:	b	13770 <__assert_fail@plt+0x23e4>
   13c24:	mov	r3, #11
   13c28:	strh	r3, [r4, #56]	; 0x38
   13c2c:	mov	r3, #9
   13c30:	b	13974 <__assert_fail@plt+0x25e8>
   13c34:	tst	r3, #1
   13c38:	moveq	r2, #32768	; 0x8000
   13c3c:	beq	13b1c <__assert_fail@plt+0x2790>
   13c40:	ldr	r2, [sl, #48]	; 0x30
   13c44:	cmp	r2, #0
   13c48:	movne	r2, #32768	; 0x8000
   13c4c:	moveq	r2, #0
   13c50:	b	13b1c <__assert_fail@plt+0x2790>
   13c54:	add	r4, r5, #56	; 0x38
   13c58:	mov	r1, r4
   13c5c:	mov	r2, sl
   13c60:	bl	13660 <__assert_fail@plt+0x22d4>
   13c64:	mov	r3, #0
   13c68:	mov	r2, sl
   13c6c:	ldr	r1, [r5, #48]	; 0x30
   13c70:	ldr	r0, [r5, #32]
   13c74:	bl	1314c <__assert_fail@plt+0x1dc0>
   13c78:	mov	r1, r4
   13c7c:	mov	r2, sl
   13c80:	ldr	r0, [r5, #48]	; 0x30
   13c84:	bl	135b0 <__assert_fail@plt+0x2224>
   13c88:	subs	r4, r0, #0
   13c8c:	bne	13b4c <__assert_fail@plt+0x27c0>
   13c90:	bl	1123c <__errno_location@plt>
   13c94:	mov	r3, #12
   13c98:	str	r4, [sp, #4]
   13c9c:	str	r3, [r0]
   13ca0:	b	13ce8 <__assert_fail@plt+0x295c>
   13ca4:	ldr	sl, [sp, #12]
   13ca8:	mov	r0, r4
   13cac:	ldr	r4, [r9]
   13cb0:	bl	12c84 <__assert_fail@plt+0x18f8>
   13cb4:	ldr	r0, [sp, #4]
   13cb8:	bl	12f00 <__assert_fail@plt+0x1b74>
   13cbc:	ldr	r0, [sl, #12]
   13cc0:	bl	11368 <closedir@plt>
   13cc4:	ldr	r3, [r5, #48]	; 0x30
   13cc8:	mov	r2, #0
   13ccc:	orr	r3, r3, #8192	; 0x2000
   13cd0:	mov	r1, #7
   13cd4:	str	r2, [sl, #12]
   13cd8:	strh	r1, [sl, #56]	; 0x38
   13cdc:	str	r2, [sp, #4]
   13ce0:	str	r3, [r5, #48]	; 0x30
   13ce4:	str	r4, [r9]
   13ce8:	ldr	r0, [sp, #4]
   13cec:	add	sp, sp, #68	; 0x44
   13cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cf4:	mov	sl, r3
   13cf8:	ldr	r3, [sp, #36]	; 0x24
   13cfc:	cmp	r3, #0
   13d00:	bne	13e1c <__assert_fail@plt+0x2a90>
   13d04:	ldr	r3, [r5, #48]	; 0x30
   13d08:	tst	r3, #4
   13d0c:	beq	13d38 <__assert_fail@plt+0x29ac>
   13d10:	ldr	r3, [r5, #36]	; 0x24
   13d14:	ldr	r2, [sp, #8]
   13d18:	cmp	r7, #0
   13d1c:	cmpne	r3, r2
   13d20:	ldreq	r3, [sp, #28]
   13d24:	subeq	r3, r3, #1
   13d28:	streq	r3, [sp, #28]
   13d2c:	ldr	r2, [sp, #28]
   13d30:	mov	r3, #0
   13d34:	strb	r3, [r2]
   13d38:	ldr	r3, [sp, #52]	; 0x34
   13d3c:	ldr	r2, [sp, #44]	; 0x2c
   13d40:	cmp	r2, #0
   13d44:	movne	r3, #0
   13d48:	andeq	r3, r3, #1
   13d4c:	cmp	r3, #0
   13d50:	beq	13d88 <__assert_fail@plt+0x29fc>
   13d54:	ldr	r3, [sp, #40]	; 0x28
   13d58:	cmp	r7, #0
   13d5c:	cmpne	r3, #1
   13d60:	bne	13d90 <__assert_fail@plt+0x2a04>
   13d64:	ldr	r3, [sl, #48]	; 0x30
   13d68:	cmp	r3, #0
   13d6c:	bne	13f08 <__assert_fail@plt+0x2b7c>
   13d70:	mov	r0, r5
   13d74:	bl	130fc <__assert_fail@plt+0x1d70>
   13d78:	adds	r0, r0, #0
   13d7c:	movne	r0, #1
   13d80:	cmp	r0, #0
   13d84:	bne	14028 <__assert_fail@plt+0x2c9c>
   13d88:	cmp	r7, #0
   13d8c:	beq	13f28 <__assert_fail@plt+0x2b9c>
   13d90:	ldr	r3, [sp, #48]	; 0x30
   13d94:	cmp	r3, #0
   13d98:	bne	13ea8 <__assert_fail@plt+0x2b1c>
   13d9c:	ldr	r3, [r5, #44]	; 0x2c
   13da0:	cmp	r3, #0
   13da4:	cmpne	r7, #1
   13da8:	bls	13ce8 <__assert_fail@plt+0x295c>
   13dac:	mov	r2, r7
   13db0:	ldr	r1, [sp, #4]
   13db4:	mov	r0, r5
   13db8:	bl	12dac <__assert_fail@plt+0x1a20>
   13dbc:	str	r0, [sp, #4]
   13dc0:	ldr	r0, [sp, #4]
   13dc4:	add	sp, sp, #68	; 0x44
   13dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dcc:	ldr	r3, [r9]
   13dd0:	ldr	sl, [sp, #12]
   13dd4:	cmp	r3, #0
   13dd8:	beq	13df8 <__assert_fail@plt+0x2a6c>
   13ddc:	ldr	r2, [sp, #44]	; 0x2c
   13de0:	str	r3, [sl, #32]
   13de4:	cmp	r7, #0
   13de8:	cmpeq	r2, #0
   13dec:	moveq	r2, #4
   13df0:	movne	r2, #7
   13df4:	strh	r2, [sl, #56]	; 0x38
   13df8:	ldr	r0, [sl, #12]
   13dfc:	cmp	r0, #0
   13e00:	beq	13cf8 <__assert_fail@plt+0x296c>
   13e04:	bl	11368 <closedir@plt>
   13e08:	mov	r3, #0
   13e0c:	str	r3, [sl, #12]
   13e10:	ldr	r3, [sp, #36]	; 0x24
   13e14:	cmp	r3, #0
   13e18:	beq	13d04 <__assert_fail@plt+0x2978>
   13e1c:	ldr	r1, [r5, #4]
   13e20:	ldr	r0, [r5, #24]
   13e24:	cmp	r1, #0
   13e28:	beq	13e58 <__assert_fail@plt+0x2acc>
   13e2c:	ldr	r3, [r1, #24]
   13e30:	add	r2, r1, #168	; 0xa8
   13e34:	cmp	r3, r2
   13e38:	ldrne	r2, [r1, #28]
   13e3c:	str	r0, [r1, #28]
   13e40:	subne	r3, r3, r2
   13e44:	addne	r3, r0, r3
   13e48:	strne	r3, [r1, #24]
   13e4c:	ldr	r1, [r1, #8]
   13e50:	cmp	r1, #0
   13e54:	bne	13e2c <__assert_fail@plt+0x2aa0>
   13e58:	ldr	r3, [sp, #4]
   13e5c:	b	13e8c <__assert_fail@plt+0x2b00>
   13e60:	ldr	r2, [r3, #24]
   13e64:	cmp	r2, r1
   13e68:	ldrne	r1, [r3, #28]
   13e6c:	str	r0, [r3, #28]
   13e70:	subne	r2, r2, r1
   13e74:	addne	r2, r0, r2
   13e78:	strne	r2, [r3, #24]
   13e7c:	ldr	r2, [r3, #8]
   13e80:	cmp	r2, #0
   13e84:	ldreq	r2, [r3, #4]
   13e88:	mov	r3, r2
   13e8c:	ldr	r2, [r3, #48]	; 0x30
   13e90:	add	r1, r3, #168	; 0xa8
   13e94:	cmp	r2, #0
   13e98:	bge	13e60 <__assert_fail@plt+0x2ad4>
   13e9c:	b	13d04 <__assert_fail@plt+0x2978>
   13ea0:	ldr	sl, [sp, #12]
   13ea4:	b	13cf8 <__assert_fail@plt+0x296c>
   13ea8:	ldr	r3, [pc, #500]	; 140a4 <__assert_fail@plt+0x2d18>
   13eac:	mov	r2, r7
   13eb0:	str	r3, [r5, #44]	; 0x2c
   13eb4:	ldr	r1, [sp, #4]
   13eb8:	mov	r0, r5
   13ebc:	bl	12dac <__assert_fail@plt+0x1a20>
   13ec0:	mov	r3, #0
   13ec4:	str	r3, [r5, #44]	; 0x2c
   13ec8:	str	r0, [sp, #4]
   13ecc:	ldr	r0, [sp, #4]
   13ed0:	add	sp, sp, #68	; 0x44
   13ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed8:	ldr	r0, [sl, #12]
   13edc:	bl	11368 <closedir@plt>
   13ee0:	ldr	r3, [sp, #40]	; 0x28
   13ee4:	mov	r4, #0
   13ee8:	cmp	r3, #3
   13eec:	str	r4, [sl, #12]
   13ef0:	beq	13f98 <__assert_fail@plt+0x2c0c>
   13ef4:	mov	r3, #0
   13ef8:	str	r3, [sp, #4]
   13efc:	ldr	r0, [sp, #4]
   13f00:	add	sp, sp, #68	; 0x44
   13f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f08:	ldr	r3, [pc, #408]	; 140a8 <__assert_fail@plt+0x2d1c>
   13f0c:	mvn	r2, #0
   13f10:	ldr	r1, [sl, #4]
   13f14:	mov	r0, r5
   13f18:	bl	133d4 <__assert_fail@plt+0x2048>
   13f1c:	adds	r0, r0, #0
   13f20:	movne	r0, #1
   13f24:	b	13d80 <__assert_fail@plt+0x29f4>
   13f28:	ldr	r3, [sp, #40]	; 0x28
   13f2c:	cmp	r3, #3
   13f30:	beq	13f58 <__assert_fail@plt+0x2bcc>
   13f34:	ldr	r0, [sp, #4]
   13f38:	bl	12f00 <__assert_fail@plt+0x1b74>
   13f3c:	mov	r3, #0
   13f40:	str	r3, [sp, #4]
   13f44:	b	13ce8 <__assert_fail@plt+0x295c>
   13f48:	mov	r3, #0
   13f4c:	str	r3, [sp, #52]	; 0x34
   13f50:	ldr	r0, [r5, #48]	; 0x30
   13f54:	b	13770 <__assert_fail@plt+0x23e4>
   13f58:	ldrh	r3, [sl, #56]	; 0x38
   13f5c:	cmp	r3, #4
   13f60:	cmpne	r3, #7
   13f64:	movne	r3, #6
   13f68:	strhne	r3, [sl, #56]	; 0x38
   13f6c:	b	13f34 <__assert_fail@plt+0x2ba8>
   13f70:	mov	r2, #3
   13f74:	ldr	r1, [pc, #304]	; 140ac <__assert_fail@plt+0x2d20>
   13f78:	ldr	r0, [sp, #60]	; 0x3c
   13f7c:	bl	19584 <__assert_fail@plt+0x81f8>
   13f80:	mov	r2, r0
   13f84:	str	r0, [sp, #60]	; 0x3c
   13f88:	b	13ba0 <__assert_fail@plt+0x2814>
   13f8c:	ldr	r3, [sp, #40]	; 0x28
   13f90:	cmp	r3, #3
   13f94:	bne	13ef4 <__assert_fail@plt+0x2b68>
   13f98:	mov	r3, #4
   13f9c:	strh	r3, [sl, #56]	; 0x38
   13fa0:	bl	1123c <__errno_location@plt>
   13fa4:	str	r4, [sp, #4]
   13fa8:	ldr	r3, [r0]
   13fac:	str	r3, [sl, #32]
   13fb0:	b	13ce8 <__assert_fail@plt+0x295c>
   13fb4:	mov	r3, #0
   13fb8:	mov	r2, sl
   13fbc:	ldr	r1, [r5, #48]	; 0x30
   13fc0:	ldr	r0, [r5, #32]
   13fc4:	bl	1314c <__assert_fail@plt+0x1dc0>
   13fc8:	strh	r0, [sl, #56]	; 0x38
   13fcc:	b	13b4c <__assert_fail@plt+0x27c0>
   13fd0:	ldr	r3, [sl, #84]	; 0x54
   13fd4:	cmp	r3, #2
   13fd8:	bne	13b7c <__assert_fail@plt+0x27f0>
   13fdc:	ldr	r1, [sp, #60]	; 0x3c
   13fe0:	mov	r0, sl
   13fe4:	bl	12f6c <__assert_fail@plt+0x1be0>
   13fe8:	ldr	r3, [pc, #164]	; 14094 <__assert_fail@plt+0x2d08>
   13fec:	cmp	r0, r3
   13ff0:	beq	13b7c <__assert_fail@plt+0x27f0>
   13ff4:	bgt	14048 <__assert_fail@plt+0x2cbc>
   13ff8:	ldr	r3, [pc, #156]	; 1409c <__assert_fail@plt+0x2d10>
   13ffc:	cmp	r0, r3
   14000:	beq	13b7c <__assert_fail@plt+0x27f0>
   14004:	cmp	r0, #0
   14008:	beq	13b7c <__assert_fail@plt+0x27f0>
   1400c:	ldr	r3, [sp, #40]	; 0x28
   14010:	cmp	r3, #3
   14014:	moveq	r6, #1
   14018:	movne	r6, #0
   1401c:	bne	13f48 <__assert_fail@plt+0x2bbc>
   14020:	mov	r4, #0
   14024:	b	13b90 <__assert_fail@plt+0x2804>
   14028:	ldr	r3, [r5, #48]	; 0x30
   1402c:	mov	r2, #7
   14030:	orr	r3, r3, #8192	; 0x2000
   14034:	strh	r2, [sl, #56]	; 0x38
   14038:	ldr	r0, [sp, #4]
   1403c:	str	r3, [r5, #48]	; 0x30
   14040:	bl	12f00 <__assert_fail@plt+0x1b74>
   14044:	b	13ef4 <__assert_fail@plt+0x2b68>
   14048:	ldr	r3, [pc, #96]	; 140b0 <__assert_fail@plt+0x2d24>
   1404c:	cmp	r0, r3
   14050:	beq	13b7c <__assert_fail@plt+0x27f0>
   14054:	ldr	r3, [pc, #88]	; 140b4 <__assert_fail@plt+0x2d28>
   14058:	cmp	r0, r3
   1405c:	bne	1400c <__assert_fail@plt+0x2c80>
   14060:	b	13b7c <__assert_fail@plt+0x27f0>
   14064:	str	r8, [r4, #80]	; 0x50
   14068:	mov	r2, #1
   1406c:	mov	r3, #0
   14070:	b	13848 <__assert_fail@plt+0x24bc>
   14074:	ldr	r3, [pc, #36]	; 140a0 <__assert_fail@plt+0x2d14>
   14078:	ldr	r0, [r5, #48]	; 0x30
   1407c:	str	r3, [sp, #20]
   14080:	mov	r3, #1
   14084:	str	r3, [sp, #52]	; 0x34
   14088:	b	13770 <__assert_fail@plt+0x23e4>
   1408c:	andeq	fp, r1, r8, lsl #4
   14090:	andeq	r2, r0, r0, lsl r7
   14094:	andeq	r6, r0, r9, ror #18
   14098:			; <UNDEFINED> instruction: 0x01021994
   1409c:			; <UNDEFINED> instruction: 0xff534d42
   140a0:	andeq	r8, r1, r0, lsr #13
   140a4:	andeq	r2, r1, ip, ror sp
   140a8:	andeq	fp, r1, r8, lsr r2
   140ac:	andeq	r0, r0, r6, lsl #8
   140b0:	andeq	r9, r0, r0, lsr #31
   140b4:	movtpl	r4, #24911	; 0x614f
   140b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140bc:	bic	r5, r1, #4080	; 0xff0
   140c0:	bic	r5, r5, #15
   140c4:	cmp	r5, #0
   140c8:	sub	sp, sp, #20
   140cc:	bne	14404 <__assert_fail@plt+0x3078>
   140d0:	and	r3, r1, #516	; 0x204
   140d4:	cmp	r3, #516	; 0x204
   140d8:	mov	r6, r1
   140dc:	beq	143a4 <__assert_fail@plt+0x3018>
   140e0:	ands	r5, r1, #18
   140e4:	beq	143a4 <__assert_fail@plt+0x3018>
   140e8:	mov	r7, r0
   140ec:	mov	r1, #96	; 0x60
   140f0:	mov	r0, #1
   140f4:	mov	r9, r2
   140f8:	bl	192a8 <__assert_fail@plt+0x7f1c>
   140fc:	subs	r5, r0, #0
   14100:	beq	1434c <__assert_fail@plt+0x2fc0>
   14104:	tst	r6, #2
   14108:	bicne	r3, r6, #512	; 0x200
   1410c:	orrne	r3, r3, #4
   14110:	strne	r3, [r5, #48]	; 0x30
   14114:	ldr	r3, [r7]
   14118:	streq	r6, [r5, #48]	; 0x30
   1411c:	mvn	r2, #99	; 0x63
   14120:	cmp	r3, #0
   14124:	str	r9, [r5, #44]	; 0x2c
   14128:	str	r2, [r5, #32]
   1412c:	beq	14438 <__assert_fail@plt+0x30ac>
   14130:	mov	r8, r7
   14134:	mov	r4, #0
   14138:	mov	r0, r3
   1413c:	bl	1120c <strlen@plt>
   14140:	ldr	r3, [r8, #4]!
   14144:	cmp	r4, r0
   14148:	movcc	r4, r0
   1414c:	cmp	r3, #0
   14150:	bne	14138 <__assert_fail@plt+0x2dac>
   14154:	add	r2, r4, #1
   14158:	cmp	r2, #4096	; 0x1000
   1415c:	movcc	r2, #4096	; 0x1000
   14160:	add	r1, r5, #36	; 0x24
   14164:	add	r0, r5, #24
   14168:	bl	13298 <__assert_fail@plt+0x1f0c>
   1416c:	subs	r3, r0, #0
   14170:	str	r3, [sp, #4]
   14174:	beq	1438c <__assert_fail@plt+0x3000>
   14178:	ldr	r4, [r7]
   1417c:	cmp	r4, #0
   14180:	beq	143bc <__assert_fail@plt+0x3030>
   14184:	mov	r2, #0
   14188:	ldr	r1, [pc, #696]	; 14448 <__assert_fail@plt+0x30bc>
   1418c:	mov	r0, r5
   14190:	bl	12e8c <__assert_fail@plt+0x1b00>
   14194:	subs	fp, r0, #0
   14198:	beq	14384 <__assert_fail@plt+0x2ff8>
   1419c:	mvn	r3, #0
   141a0:	cmp	r9, #0
   141a4:	str	r3, [fp, #48]	; 0x30
   141a8:	ldr	r4, [r7]
   141ac:	beq	141c0 <__assert_fail@plt+0x2e34>
   141b0:	ldr	r3, [r5, #48]	; 0x30
   141b4:	lsr	r3, r3, #10
   141b8:	and	r3, r3, #1
   141bc:	str	r3, [sp, #4]
   141c0:	cmp	r4, #0
   141c4:	beq	14440 <__assert_fail@plt+0x30b4>
   141c8:	lsr	r6, r6, #11
   141cc:	mov	r3, #0
   141d0:	eor	r6, r6, #1
   141d4:	mov	sl, r3
   141d8:	str	r3, [sp, #12]
   141dc:	and	r3, r6, #1
   141e0:	str	r3, [sp, #8]
   141e4:	mov	r8, sl
   141e8:	mov	r6, sl
   141ec:	b	14224 <__assert_fail@plt+0x2e98>
   141f0:	mov	r3, #11
   141f4:	strh	r3, [r4, #56]	; 0x38
   141f8:	mov	r2, #2
   141fc:	mov	r3, #0
   14200:	cmp	r9, #0
   14204:	strd	r2, [r4, #112]	; 0x70
   14208:	beq	142b8 <__assert_fail@plt+0x2f2c>
   1420c:	str	r6, [r4, #8]
   14210:	mov	r6, r4
   14214:	ldr	r4, [r7, #4]!
   14218:	add	r8, r8, #1
   1421c:	cmp	r4, #0
   14220:	beq	142e4 <__assert_fail@plt+0x2f58>
   14224:	mov	r0, r4
   14228:	bl	1120c <strlen@plt>
   1422c:	ldr	r3, [sp, #8]
   14230:	cmp	r0, #2
   14234:	movls	r3, #0
   14238:	andhi	r3, r3, #1
   1423c:	cmp	r3, #0
   14240:	mov	r2, r0
   14244:	beq	1425c <__assert_fail@plt+0x2ed0>
   14248:	sub	r1, r0, #1
   1424c:	add	r3, r4, r1
   14250:	ldrb	r1, [r4, r1]
   14254:	cmp	r1, #47	; 0x2f
   14258:	beq	14358 <__assert_fail@plt+0x2fcc>
   1425c:	mov	r1, r4
   14260:	mov	r0, r5
   14264:	bl	12e8c <__assert_fail@plt+0x1b00>
   14268:	subs	r4, r0, #0
   1426c:	beq	14374 <__assert_fail@plt+0x2fe8>
   14270:	ldr	r3, [sp, #4]
   14274:	str	sl, [r4, #48]	; 0x30
   14278:	cmp	r6, #0
   1427c:	moveq	r3, #0
   14280:	andne	r3, r3, #1
   14284:	cmp	r3, #0
   14288:	add	r3, r4, #168	; 0xa8
   1428c:	str	fp, [r4, #4]
   14290:	str	r3, [r4, #24]
   14294:	bne	141f0 <__assert_fail@plt+0x2e64>
   14298:	mov	r3, sl
   1429c:	mov	r2, r4
   142a0:	ldr	r1, [r5, #48]	; 0x30
   142a4:	ldr	r0, [r5, #32]
   142a8:	bl	1314c <__assert_fail@plt+0x1dc0>
   142ac:	cmp	r9, #0
   142b0:	strh	r0, [r4, #56]	; 0x38
   142b4:	bne	1420c <__assert_fail@plt+0x2e80>
   142b8:	cmp	r6, #0
   142bc:	str	r9, [r4, #8]
   142c0:	ldrne	r3, [sp, #12]
   142c4:	streq	r4, [sp, #12]
   142c8:	strne	r4, [sp, #12]
   142cc:	strne	r4, [r3, #8]
   142d0:	moveq	r6, r4
   142d4:	ldr	r4, [r7, #4]!
   142d8:	add	r8, r8, #1
   142dc:	cmp	r4, #0
   142e0:	bne	14224 <__assert_fail@plt+0x2e98>
   142e4:	cmp	r9, #0
   142e8:	cmpne	r8, #1
   142ec:	bhi	14420 <__assert_fail@plt+0x3094>
   142f0:	mov	r2, #0
   142f4:	ldr	r1, [pc, #332]	; 14448 <__assert_fail@plt+0x30bc>
   142f8:	mov	r0, r5
   142fc:	bl	12e8c <__assert_fail@plt+0x1b00>
   14300:	cmp	r0, #0
   14304:	str	r0, [r5]
   14308:	beq	14374 <__assert_fail@plt+0x2fe8>
   1430c:	mov	r2, #1
   14310:	mov	r3, #9
   14314:	str	r6, [r0, #8]
   14318:	str	r2, [r0, #48]	; 0x30
   1431c:	strh	r3, [r0, #56]	; 0x38
   14320:	add	r1, r5, #56	; 0x38
   14324:	ldr	r0, [r5, #48]	; 0x30
   14328:	bl	13318 <__assert_fail@plt+0x1f8c>
   1432c:	cmp	r0, #0
   14330:	beq	14374 <__assert_fail@plt+0x2fe8>
   14334:	ldr	r1, [r5, #48]	; 0x30
   14338:	tst	r1, #516	; 0x204
   1433c:	beq	143d4 <__assert_fail@plt+0x3048>
   14340:	mvn	r1, #0
   14344:	add	r0, r5, #60	; 0x3c
   14348:	bl	15db8 <__assert_fail@plt+0x4a2c>
   1434c:	mov	r0, r5
   14350:	add	sp, sp, #20
   14354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14358:	ldrb	r1, [r3, #-1]!
   1435c:	cmp	r1, #47	; 0x2f
   14360:	bne	1425c <__assert_fail@plt+0x2ed0>
   14364:	sub	r2, r2, #1
   14368:	cmp	r2, #1
   1436c:	bne	14358 <__assert_fail@plt+0x2fcc>
   14370:	b	1425c <__assert_fail@plt+0x2ed0>
   14374:	mov	r0, r6
   14378:	bl	12f00 <__assert_fail@plt+0x1b74>
   1437c:	mov	r0, fp
   14380:	bl	12c84 <__assert_fail@plt+0x18f8>
   14384:	ldr	r0, [r5, #24]
   14388:	bl	12c84 <__assert_fail@plt+0x18f8>
   1438c:	mov	r0, r5
   14390:	bl	12c84 <__assert_fail@plt+0x18f8>
   14394:	mov	r5, #0
   14398:	mov	r0, r5
   1439c:	add	sp, sp, #20
   143a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143a4:	bl	1123c <__errno_location@plt>
   143a8:	mov	r3, #22
   143ac:	str	r3, [r0]
   143b0:	mov	r0, r5
   143b4:	add	sp, sp, #20
   143b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143bc:	cmp	r9, #0
   143c0:	movne	fp, r4
   143c4:	bne	141b0 <__assert_fail@plt+0x2e24>
   143c8:	mov	fp, r9
   143cc:	mov	r6, r9
   143d0:	b	142f0 <__assert_fail@plt+0x2f64>
   143d4:	ldr	r2, [pc, #112]	; 1444c <__assert_fail@plt+0x30c0>
   143d8:	ldr	r0, [r5, #32]
   143dc:	bl	13398 <__assert_fail@plt+0x200c>
   143e0:	mvn	r1, #0
   143e4:	cmp	r0, #0
   143e8:	str	r0, [r5, #28]
   143ec:	ldrlt	r3, [r5, #48]	; 0x30
   143f0:	add	r0, r5, #60	; 0x3c
   143f4:	orrlt	r3, r3, #4
   143f8:	strlt	r3, [r5, #48]	; 0x30
   143fc:	bl	15db8 <__assert_fail@plt+0x4a2c>
   14400:	b	1434c <__assert_fail@plt+0x2fc0>
   14404:	bl	1123c <__errno_location@plt>
   14408:	mov	r5, #0
   1440c:	mov	r3, #22
   14410:	str	r3, [r0]
   14414:	mov	r0, r5
   14418:	add	sp, sp, #20
   1441c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14420:	mov	r1, r6
   14424:	mov	r2, r8
   14428:	mov	r0, r5
   1442c:	bl	12dac <__assert_fail@plt+0x1a20>
   14430:	mov	r6, r0
   14434:	b	142f0 <__assert_fail@plt+0x2f64>
   14438:	mov	r2, #4096	; 0x1000
   1443c:	b	14160 <__assert_fail@plt+0x2dd4>
   14440:	mov	r6, r4
   14444:	b	142f0 <__assert_fail@plt+0x2f64>
   14448:	andeq	sl, r1, r0, lsl #19
   1444c:	andeq	fp, r1, ip, lsr r2
   14450:	ldr	r3, [r0]
   14454:	push	{r4, r5, r6, lr}
   14458:	cmp	r3, #0
   1445c:	mov	r5, r0
   14460:	beq	1449c <__assert_fail@plt+0x3110>
   14464:	ldr	r2, [r3, #48]	; 0x30
   14468:	cmp	r2, #0
   1446c:	blt	1458c <__assert_fail@plt+0x3200>
   14470:	ldr	r4, [r3, #8]
   14474:	mov	r0, r3
   14478:	cmp	r4, #0
   1447c:	ldreq	r4, [r3, #4]
   14480:	bl	12c84 <__assert_fail@plt+0x18f8>
   14484:	mov	r3, r4
   14488:	ldr	r2, [r4, #48]	; 0x30
   1448c:	cmp	r2, #0
   14490:	bge	14470 <__assert_fail@plt+0x30e4>
   14494:	mov	r0, r4
   14498:	bl	12c84 <__assert_fail@plt+0x18f8>
   1449c:	ldr	r0, [r5, #4]
   144a0:	cmp	r0, #0
   144a4:	beq	144ac <__assert_fail@plt+0x3120>
   144a8:	bl	12f00 <__assert_fail@plt+0x1b74>
   144ac:	ldr	r0, [r5, #8]
   144b0:	bl	12c84 <__assert_fail@plt+0x18f8>
   144b4:	ldr	r0, [r5, #24]
   144b8:	bl	12c84 <__assert_fail@plt+0x18f8>
   144bc:	ldr	r3, [r5, #48]	; 0x30
   144c0:	tst	r3, #512	; 0x200
   144c4:	beq	14538 <__assert_fail@plt+0x31ac>
   144c8:	ldr	r0, [r5, #32]
   144cc:	cmp	r0, #0
   144d0:	blt	144e0 <__assert_fail@plt+0x3154>
   144d4:	bl	11350 <close@plt>
   144d8:	cmp	r0, #0
   144dc:	bne	14578 <__assert_fail@plt+0x31ec>
   144e0:	mov	r4, #0
   144e4:	add	r0, r5, #60	; 0x3c
   144e8:	bl	12f34 <__assert_fail@plt+0x1ba8>
   144ec:	ldr	r0, [r5, #52]	; 0x34
   144f0:	cmp	r0, #0
   144f4:	beq	144fc <__assert_fail@plt+0x3170>
   144f8:	bl	1587c <__assert_fail@plt+0x44f0>
   144fc:	ldr	r2, [r5, #48]	; 0x30
   14500:	ldr	r3, [pc, #164]	; 145ac <__assert_fail@plt+0x3220>
   14504:	ldr	r0, [r5, #56]	; 0x38
   14508:	and	r3, r3, r2
   1450c:	cmp	r3, #0
   14510:	beq	14584 <__assert_fail@plt+0x31f8>
   14514:	cmp	r0, #0
   14518:	beq	14520 <__assert_fail@plt+0x3194>
   1451c:	bl	1587c <__assert_fail@plt+0x44f0>
   14520:	mov	r0, r5
   14524:	bl	12c84 <__assert_fail@plt+0x18f8>
   14528:	cmp	r4, #0
   1452c:	bne	1459c <__assert_fail@plt+0x3210>
   14530:	mov	r0, r4
   14534:	pop	{r4, r5, r6, pc}
   14538:	tst	r3, #4
   1453c:	bne	144e0 <__assert_fail@plt+0x3154>
   14540:	ldr	r0, [r5, #28]
   14544:	bl	112fc <fchdir@plt>
   14548:	cmp	r0, #0
   1454c:	beq	14594 <__assert_fail@plt+0x3208>
   14550:	bl	1123c <__errno_location@plt>
   14554:	ldr	r4, [r0]
   14558:	ldr	r0, [r5, #28]
   1455c:	bl	11350 <close@plt>
   14560:	clz	r3, r4
   14564:	lsr	r3, r3, #5
   14568:	cmp	r0, #0
   1456c:	moveq	r3, #0
   14570:	cmp	r3, #0
   14574:	beq	144e4 <__assert_fail@plt+0x3158>
   14578:	bl	1123c <__errno_location@plt>
   1457c:	ldr	r4, [r0]
   14580:	b	144e4 <__assert_fail@plt+0x3158>
   14584:	bl	12c84 <__assert_fail@plt+0x18f8>
   14588:	b	14520 <__assert_fail@plt+0x3194>
   1458c:	mov	r4, r3
   14590:	b	14494 <__assert_fail@plt+0x3108>
   14594:	ldr	r0, [r5, #28]
   14598:	b	144d4 <__assert_fail@plt+0x3148>
   1459c:	bl	1123c <__errno_location@plt>
   145a0:	str	r4, [r0]
   145a4:	mvn	r4, #0
   145a8:	b	14530 <__assert_fail@plt+0x31a4>
   145ac:	andeq	r0, r0, r2, lsl #2
   145b0:	push	{r4, r5, r6, r7, r8, lr}
   145b4:	ldr	r5, [r0]
   145b8:	cmp	r5, #0
   145bc:	beq	146f0 <__assert_fail@plt+0x3364>
   145c0:	ldr	r1, [r0, #48]	; 0x30
   145c4:	ands	r3, r1, #8192	; 0x2000
   145c8:	bne	146f0 <__assert_fail@plt+0x3364>
   145cc:	ldrh	r2, [r5, #60]	; 0x3c
   145d0:	mov	r8, r0
   145d4:	mov	r0, #3
   145d8:	cmp	r2, #1
   145dc:	strh	r0, [r5, #60]	; 0x3c
   145e0:	beq	1495c <__assert_fail@plt+0x35d0>
   145e4:	cmp	r2, #2
   145e8:	ldrh	r3, [r5, #56]	; 0x38
   145ec:	beq	146fc <__assert_fail@plt+0x3370>
   145f0:	cmp	r3, #1
   145f4:	bne	1462c <__assert_fail@plt+0x32a0>
   145f8:	cmp	r2, #4
   145fc:	bne	14710 <__assert_fail@plt+0x3384>
   14600:	b	1472c <__assert_fail@plt+0x33a0>
   14604:	mov	r0, r5
   14608:	str	r4, [r8]
   1460c:	bl	12c84 <__assert_fail@plt+0x18f8>
   14610:	ldr	r5, [r4, #48]	; 0x30
   14614:	cmp	r5, #0
   14618:	beq	14774 <__assert_fail@plt+0x33e8>
   1461c:	ldrh	r3, [r4, #60]	; 0x3c
   14620:	mov	r5, r4
   14624:	cmp	r3, #4
   14628:	bne	14870 <__assert_fail@plt+0x34e4>
   1462c:	ldr	r4, [r5, #8]
   14630:	cmp	r4, #0
   14634:	bne	14604 <__assert_fail@plt+0x3278>
   14638:	ldr	r4, [r5, #4]
   1463c:	ldr	r3, [r4, #12]
   14640:	cmp	r3, #0
   14644:	bne	14aec <__assert_fail@plt+0x3760>
   14648:	str	r4, [r8]
   1464c:	mov	r0, r5
   14650:	bl	12c84 <__assert_fail@plt+0x18f8>
   14654:	ldr	r3, [r4, #48]	; 0x30
   14658:	cmn	r3, #1
   1465c:	beq	14a28 <__assert_fail@plt+0x369c>
   14660:	ldrh	r3, [r4, #56]	; 0x38
   14664:	cmp	r3, #11
   14668:	beq	148e4 <__assert_fail@plt+0x3558>
   1466c:	ldr	r3, [r4, #40]	; 0x28
   14670:	ldr	r2, [r8, #24]
   14674:	mov	r1, #0
   14678:	strb	r1, [r2, r3]
   1467c:	ldr	r3, [r4, #48]	; 0x30
   14680:	cmp	r3, r1
   14684:	beq	149b4 <__assert_fail@plt+0x3628>
   14688:	ldrh	r3, [r4, #58]	; 0x3a
   1468c:	tst	r3, #2
   14690:	beq	14974 <__assert_fail@plt+0x35e8>
   14694:	ldr	r3, [r8, #48]	; 0x30
   14698:	tst	r3, #4
   1469c:	beq	149d8 <__assert_fail@plt+0x364c>
   146a0:	ldr	r0, [r4, #36]	; 0x24
   146a4:	bl	11350 <close@plt>
   146a8:	ldr	r3, [r8, #48]	; 0x30
   146ac:	ldrh	r2, [r4, #56]	; 0x38
   146b0:	cmp	r2, #2
   146b4:	beq	146e8 <__assert_fail@plt+0x335c>
   146b8:	ldr	r2, [r4, #32]
   146bc:	cmp	r2, #0
   146c0:	movne	r2, #7
   146c4:	strhne	r2, [r4, #56]	; 0x38
   146c8:	bne	146e8 <__assert_fail@plt+0x335c>
   146cc:	mov	r2, #6
   146d0:	mov	r0, r3
   146d4:	strh	r2, [r4, #56]	; 0x38
   146d8:	add	r1, r8, #56	; 0x38
   146dc:	mov	r2, r4
   146e0:	bl	13660 <__assert_fail@plt+0x22d4>
   146e4:	ldr	r3, [r8, #48]	; 0x30
   146e8:	tst	r3, #8192	; 0x2000
   146ec:	beq	1476c <__assert_fail@plt+0x33e0>
   146f0:	mov	r4, #0
   146f4:	mov	r0, r4
   146f8:	pop	{r4, r5, r6, r7, r8, pc}
   146fc:	sub	r2, r3, #12
   14700:	cmp	r2, #1
   14704:	bls	149f4 <__assert_fail@plt+0x3668>
   14708:	cmp	r3, #1
   1470c:	bne	1462c <__assert_fail@plt+0x32a0>
   14710:	tst	r1, #64	; 0x40
   14714:	beq	148e8 <__assert_fail@plt+0x355c>
   14718:	ldrd	r6, [r5, #64]	; 0x40
   1471c:	ldrd	r2, [r8, #16]
   14720:	cmp	r7, r3
   14724:	cmpeq	r6, r2
   14728:	beq	148e8 <__assert_fail@plt+0x355c>
   1472c:	ldrh	r3, [r5, #58]	; 0x3a
   14730:	tst	r3, #2
   14734:	bne	14ae0 <__assert_fail@plt+0x3754>
   14738:	ldr	r0, [r8, #4]
   1473c:	cmp	r0, #0
   14740:	beq	14750 <__assert_fail@plt+0x33c4>
   14744:	bl	12f00 <__assert_fail@plt+0x1b74>
   14748:	mov	r3, #0
   1474c:	str	r3, [r8, #4]
   14750:	mov	r3, #6
   14754:	strh	r3, [r5, #56]	; 0x38
   14758:	mov	r2, r5
   1475c:	add	r1, r8, #56	; 0x38
   14760:	ldr	r0, [r8, #48]	; 0x30
   14764:	mov	r4, r5
   14768:	bl	13660 <__assert_fail@plt+0x22d4>
   1476c:	mov	r0, r4
   14770:	pop	{r4, r5, r6, r7, r8, pc}
   14774:	mov	r0, r8
   14778:	bl	130fc <__assert_fail@plt+0x1d70>
   1477c:	cmp	r0, #0
   14780:	bne	14acc <__assert_fail@plt+0x3740>
   14784:	ldr	r2, [r8, #48]	; 0x30
   14788:	ldr	r3, [pc, #1228]	; 14c5c <__assert_fail@plt+0x38d0>
   1478c:	ldr	r0, [r8, #56]	; 0x38
   14790:	and	r3, r3, r2
   14794:	cmp	r3, #0
   14798:	beq	14a48 <__assert_fail@plt+0x36bc>
   1479c:	cmp	r0, #0
   147a0:	beq	147a8 <__assert_fail@plt+0x341c>
   147a4:	bl	1587c <__assert_fail@plt+0x44f0>
   147a8:	ldr	r2, [r4, #52]	; 0x34
   147ac:	add	r6, r4, #168	; 0xa8
   147b0:	str	r2, [r4, #40]	; 0x28
   147b4:	mov	r1, r6
   147b8:	add	r2, r2, #1
   147bc:	ldr	r0, [r8, #24]
   147c0:	bl	11098 <memmove@plt>
   147c4:	mov	r0, r6
   147c8:	mov	r1, #47	; 0x2f
   147cc:	bl	112c0 <strrchr@plt>
   147d0:	cmp	r0, #0
   147d4:	beq	14804 <__assert_fail@plt+0x3478>
   147d8:	cmp	r6, r0
   147dc:	beq	14abc <__assert_fail@plt+0x3730>
   147e0:	add	r5, r0, #1
   147e4:	mov	r0, r5
   147e8:	bl	1120c <strlen@plt>
   147ec:	mov	r1, r5
   147f0:	mov	r7, r0
   147f4:	add	r2, r7, #1
   147f8:	mov	r0, r6
   147fc:	bl	11098 <memmove@plt>
   14800:	str	r7, [r4, #52]	; 0x34
   14804:	ldr	r3, [r8, #24]
   14808:	add	r1, r8, #56	; 0x38
   1480c:	str	r3, [r4, #28]
   14810:	str	r3, [r4, #24]
   14814:	ldr	r0, [r8, #48]	; 0x30
   14818:	bl	13318 <__assert_fail@plt+0x1f8c>
   1481c:	ldrh	r3, [r4, #56]	; 0x38
   14820:	cmp	r3, #11
   14824:	str	r4, [r8]
   14828:	beq	148c8 <__assert_fail@plt+0x353c>
   1482c:	cmp	r3, #1
   14830:	bne	1476c <__assert_fail@plt+0x33e0>
   14834:	ldr	r3, [r4, #48]	; 0x30
   14838:	cmp	r3, #0
   1483c:	ldrdeq	r2, [r4, #64]	; 0x40
   14840:	strdeq	r2, [r8, #16]
   14844:	mov	r2, r4
   14848:	add	r1, r8, #56	; 0x38
   1484c:	ldr	r0, [r8, #48]	; 0x30
   14850:	bl	135b0 <__assert_fail@plt+0x2224>
   14854:	subs	r5, r0, #0
   14858:	bne	1476c <__assert_fail@plt+0x33e0>
   1485c:	bl	1123c <__errno_location@plt>
   14860:	mov	r3, #12
   14864:	mov	r4, r5
   14868:	str	r3, [r0]
   1486c:	b	1476c <__assert_fail@plt+0x33e0>
   14870:	cmp	r3, #2
   14874:	beq	14b20 <__assert_fail@plt+0x3794>
   14878:	ldr	r3, [r4, #4]
   1487c:	mov	ip, #47	; 0x2f
   14880:	ldr	r2, [r8, #24]
   14884:	ldr	r0, [r3, #40]	; 0x28
   14888:	ldr	lr, [r3, #28]
   1488c:	sub	r3, r0, #1
   14890:	add	r1, r4, #168	; 0xa8
   14894:	ldrb	lr, [lr, r3]
   14898:	cmp	lr, ip
   1489c:	movne	r3, r0
   148a0:	add	r0, r2, r3
   148a4:	strb	ip, [r2, r3]
   148a8:	ldr	r2, [r4, #52]	; 0x34
   148ac:	add	r0, r0, #1
   148b0:	add	r2, r2, #1
   148b4:	bl	11098 <memmove@plt>
   148b8:	ldrh	r3, [r4, #56]	; 0x38
   148bc:	str	r4, [r8]
   148c0:	cmp	r3, #11
   148c4:	bne	1482c <__assert_fail@plt+0x34a0>
   148c8:	ldrd	r2, [r4, #112]	; 0x70
   148cc:	cmp	r3, #0
   148d0:	cmpeq	r2, #2
   148d4:	beq	14b4c <__assert_fail@plt+0x37c0>
   148d8:	cmp	r3, #0
   148dc:	cmpeq	r2, #1
   148e0:	beq	1476c <__assert_fail@plt+0x33e0>
   148e4:	bl	11344 <abort@plt>
   148e8:	ldr	r0, [r8, #4]
   148ec:	cmp	r0, #0
   148f0:	beq	14a64 <__assert_fail@plt+0x36d8>
   148f4:	tst	r1, #4096	; 0x1000
   148f8:	bne	14a50 <__assert_fail@plt+0x36c4>
   148fc:	ldr	r3, [r5, #24]
   14900:	mvn	r2, #0
   14904:	mov	r1, r5
   14908:	mov	r0, r8
   1490c:	bl	133d4 <__assert_fail@plt+0x2048>
   14910:	cmp	r0, #0
   14914:	beq	149c8 <__assert_fail@plt+0x363c>
   14918:	bl	1123c <__errno_location@plt>
   1491c:	ldrh	r3, [r5, #58]	; 0x3a
   14920:	ldr	r4, [r8, #4]
   14924:	orr	r3, r3, #1
   14928:	cmp	r4, #0
   1492c:	ldr	r2, [r0]
   14930:	strh	r3, [r5, #58]	; 0x3a
   14934:	str	r2, [r5, #32]
   14938:	beq	149cc <__assert_fail@plt+0x3640>
   1493c:	mov	r3, r4
   14940:	ldr	r2, [r3, #4]
   14944:	ldr	r2, [r2, #24]
   14948:	str	r2, [r3, #24]
   1494c:	ldr	r3, [r3, #8]
   14950:	cmp	r3, #0
   14954:	bne	14940 <__assert_fail@plt+0x35b4>
   14958:	b	149cc <__assert_fail@plt+0x3640>
   1495c:	ldr	r0, [r8, #32]
   14960:	mov	r2, r5
   14964:	bl	1314c <__assert_fail@plt+0x1dc0>
   14968:	mov	r4, r5
   1496c:	strh	r0, [r5, #56]	; 0x38
   14970:	b	1476c <__assert_fail@plt+0x33e0>
   14974:	tst	r3, #1
   14978:	bne	146a8 <__assert_fail@plt+0x331c>
   1497c:	ldr	r3, [pc, #732]	; 14c60 <__assert_fail@plt+0x38d4>
   14980:	mvn	r2, #0
   14984:	ldr	r1, [r4, #4]
   14988:	mov	r0, r8
   1498c:	bl	133d4 <__assert_fail@plt+0x2048>
   14990:	cmp	r0, #0
   14994:	beq	146a8 <__assert_fail@plt+0x331c>
   14998:	bl	1123c <__errno_location@plt>
   1499c:	ldr	r3, [r8, #48]	; 0x30
   149a0:	orr	r3, r3, #8192	; 0x2000
   149a4:	ldr	r2, [r0]
   149a8:	str	r2, [r4, #32]
   149ac:	str	r3, [r8, #48]	; 0x30
   149b0:	b	146ac <__assert_fail@plt+0x3320>
   149b4:	mov	r0, r8
   149b8:	bl	130fc <__assert_fail@plt+0x1d70>
   149bc:	cmp	r0, #0
   149c0:	bne	14998 <__assert_fail@plt+0x360c>
   149c4:	b	146a8 <__assert_fail@plt+0x331c>
   149c8:	ldr	r4, [r8, #4]
   149cc:	mov	r3, #0
   149d0:	str	r3, [r8, #4]
   149d4:	b	14878 <__assert_fail@plt+0x34ec>
   149d8:	tst	r3, #512	; 0x200
   149dc:	beq	14b6c <__assert_fail@plt+0x37e0>
   149e0:	mov	r2, #1
   149e4:	ldr	r1, [r4, #36]	; 0x24
   149e8:	mov	r0, r8
   149ec:	bl	1307c <__assert_fail@plt+0x1cf0>
   149f0:	b	146a0 <__assert_fail@plt+0x3314>
   149f4:	mov	r3, #1
   149f8:	mov	r2, r5
   149fc:	ldr	r0, [r8, #32]
   14a00:	bl	1314c <__assert_fail@plt+0x1dc0>
   14a04:	cmp	r0, #1
   14a08:	mov	r3, r0
   14a0c:	strh	r0, [r5, #56]	; 0x38
   14a10:	beq	14bac <__assert_fail@plt+0x3820>
   14a14:	cmp	r0, #11
   14a18:	mov	r4, r5
   14a1c:	str	r5, [r8]
   14a20:	bne	1476c <__assert_fail@plt+0x33e0>
   14a24:	b	148c8 <__assert_fail@plt+0x353c>
   14a28:	mov	r0, r4
   14a2c:	bl	12c84 <__assert_fail@plt+0x18f8>
   14a30:	bl	1123c <__errno_location@plt>
   14a34:	mov	r3, #0
   14a38:	mov	r4, r3
   14a3c:	str	r3, [r0]
   14a40:	str	r3, [r8]
   14a44:	b	1476c <__assert_fail@plt+0x33e0>
   14a48:	bl	12c84 <__assert_fail@plt+0x18f8>
   14a4c:	b	147a8 <__assert_fail@plt+0x341c>
   14a50:	bic	r1, r1, #4096	; 0x1000
   14a54:	str	r1, [r8, #48]	; 0x30
   14a58:	bl	12f00 <__assert_fail@plt+0x1b74>
   14a5c:	mov	r3, #0
   14a60:	str	r3, [r8, #4]
   14a64:	mov	r1, #3
   14a68:	mov	r0, r8
   14a6c:	bl	13718 <__assert_fail@plt+0x238c>
   14a70:	cmp	r0, #0
   14a74:	mov	r4, r0
   14a78:	str	r0, [r8, #4]
   14a7c:	bne	149cc <__assert_fail@plt+0x3640>
   14a80:	ldr	r0, [r8, #48]	; 0x30
   14a84:	tst	r0, #8192	; 0x2000
   14a88:	bne	146f0 <__assert_fail@plt+0x3364>
   14a8c:	ldr	r3, [r5, #32]
   14a90:	cmp	r3, #0
   14a94:	beq	14aa8 <__assert_fail@plt+0x371c>
   14a98:	ldrh	r3, [r5, #56]	; 0x38
   14a9c:	cmp	r3, #4
   14aa0:	movne	r3, #7
   14aa4:	strhne	r3, [r5, #56]	; 0x38
   14aa8:	add	r1, r8, #56	; 0x38
   14aac:	mov	r2, r5
   14ab0:	bl	13660 <__assert_fail@plt+0x22d4>
   14ab4:	mov	r4, r5
   14ab8:	b	1476c <__assert_fail@plt+0x33e0>
   14abc:	ldrb	r3, [r4, #169]	; 0xa9
   14ac0:	cmp	r3, #0
   14ac4:	bne	147e0 <__assert_fail@plt+0x3454>
   14ac8:	b	14804 <__assert_fail@plt+0x3478>
   14acc:	ldr	r3, [r8, #48]	; 0x30
   14ad0:	mov	r4, r5
   14ad4:	orr	r3, r3, #8192	; 0x2000
   14ad8:	str	r3, [r8, #48]	; 0x30
   14adc:	b	1476c <__assert_fail@plt+0x33e0>
   14ae0:	ldr	r0, [r5, #36]	; 0x24
   14ae4:	bl	11350 <close@plt>
   14ae8:	b	14738 <__assert_fail@plt+0x33ac>
   14aec:	ldr	r3, [r4, #40]	; 0x28
   14af0:	ldr	r2, [r8, #24]
   14af4:	mov	r0, #0
   14af8:	str	r4, [r8]
   14afc:	mov	r1, #3
   14b00:	strb	r0, [r2, r3]
   14b04:	mov	r0, r8
   14b08:	bl	13718 <__assert_fail@plt+0x238c>
   14b0c:	subs	r4, r0, #0
   14b10:	beq	14b98 <__assert_fail@plt+0x380c>
   14b14:	mov	r0, r5
   14b18:	bl	12c84 <__assert_fail@plt+0x18f8>
   14b1c:	b	14878 <__assert_fail@plt+0x34ec>
   14b20:	mov	r3, #1
   14b24:	mov	r2, r4
   14b28:	ldr	r1, [r8, #48]	; 0x30
   14b2c:	ldr	r0, [r8, #32]
   14b30:	bl	1314c <__assert_fail@plt+0x1dc0>
   14b34:	cmp	r0, #1
   14b38:	strh	r0, [r4, #56]	; 0x38
   14b3c:	beq	14bc4 <__assert_fail@plt+0x3838>
   14b40:	mov	r3, #3
   14b44:	strh	r3, [r4, #60]	; 0x3c
   14b48:	b	14878 <__assert_fail@plt+0x34ec>
   14b4c:	mov	r3, #0
   14b50:	mov	r2, r4
   14b54:	ldr	r1, [r8, #48]	; 0x30
   14b58:	ldr	r0, [r8, #32]
   14b5c:	bl	1314c <__assert_fail@plt+0x1dc0>
   14b60:	mov	r3, r0
   14b64:	strh	r0, [r4, #56]	; 0x38
   14b68:	b	1482c <__assert_fail@plt+0x34a0>
   14b6c:	ldr	r0, [r4, #36]	; 0x24
   14b70:	bl	112fc <fchdir@plt>
   14b74:	cmp	r0, #0
   14b78:	beq	146a0 <__assert_fail@plt+0x3314>
   14b7c:	bl	1123c <__errno_location@plt>
   14b80:	ldr	r3, [r8, #48]	; 0x30
   14b84:	orr	r3, r3, #8192	; 0x2000
   14b88:	ldr	r2, [r0]
   14b8c:	str	r2, [r4, #32]
   14b90:	str	r3, [r8, #48]	; 0x30
   14b94:	b	146a0 <__assert_fail@plt+0x3314>
   14b98:	ldr	r3, [r8, #48]	; 0x30
   14b9c:	tst	r3, #8192	; 0x2000
   14ba0:	bne	146f0 <__assert_fail@plt+0x3364>
   14ba4:	ldr	r4, [r5, #4]
   14ba8:	b	14648 <__assert_fail@plt+0x32bc>
   14bac:	ldr	r1, [r8, #48]	; 0x30
   14bb0:	tst	r1, #4
   14bb4:	beq	14bf8 <__assert_fail@plt+0x386c>
   14bb8:	str	r5, [r8]
   14bbc:	mov	r4, r5
   14bc0:	b	1482c <__assert_fail@plt+0x34a0>
   14bc4:	ldr	r1, [r8, #48]	; 0x30
   14bc8:	tst	r1, #4
   14bcc:	bne	14b40 <__assert_fail@plt+0x37b4>
   14bd0:	ldr	r2, [pc, #140]	; 14c64 <__assert_fail@plt+0x38d8>
   14bd4:	ldr	r0, [r8, #32]
   14bd8:	bl	13398 <__assert_fail@plt+0x200c>
   14bdc:	cmp	r0, #0
   14be0:	str	r0, [r4, #36]	; 0x24
   14be4:	blt	14c28 <__assert_fail@plt+0x389c>
   14be8:	ldrh	r3, [r4, #58]	; 0x3a
   14bec:	orr	r3, r3, #2
   14bf0:	strh	r3, [r4, #58]	; 0x3a
   14bf4:	b	14b40 <__assert_fail@plt+0x37b4>
   14bf8:	ldr	r2, [pc, #100]	; 14c64 <__assert_fail@plt+0x38d8>
   14bfc:	ldr	r0, [r8, #32]
   14c00:	bl	13398 <__assert_fail@plt+0x200c>
   14c04:	cmp	r0, #0
   14c08:	str	r0, [r5, #36]	; 0x24
   14c0c:	blt	14c40 <__assert_fail@plt+0x38b4>
   14c10:	ldrh	r2, [r5, #58]	; 0x3a
   14c14:	ldrh	r3, [r5, #56]	; 0x38
   14c18:	mov	r4, r5
   14c1c:	orr	r2, r2, #2
   14c20:	strh	r2, [r5, #58]	; 0x3a
   14c24:	b	14820 <__assert_fail@plt+0x3494>
   14c28:	bl	1123c <__errno_location@plt>
   14c2c:	mov	r2, #7
   14c30:	ldr	r3, [r0]
   14c34:	strh	r2, [r4, #56]	; 0x38
   14c38:	str	r3, [r4, #32]
   14c3c:	b	14b40 <__assert_fail@plt+0x37b4>
   14c40:	bl	1123c <__errno_location@plt>
   14c44:	mov	r2, #7
   14c48:	mov	r3, r2
   14c4c:	ldr	r1, [r0]
   14c50:	strh	r2, [r5, #56]	; 0x38
   14c54:	str	r1, [r5, #32]
   14c58:	b	14bb8 <__assert_fail@plt+0x382c>
   14c5c:	andeq	r0, r0, r2, lsl #2
   14c60:	andeq	fp, r1, r8, lsr r2
   14c64:	andeq	fp, r1, ip, lsr r2
   14c68:	cmp	r2, #4
   14c6c:	bhi	14c80 <__assert_fail@plt+0x38f4>
   14c70:	mov	r3, #0
   14c74:	strh	r2, [r1, #60]	; 0x3c
   14c78:	mov	r0, r3
   14c7c:	bx	lr
   14c80:	push	{r4, lr}
   14c84:	bl	1123c <__errno_location@plt>
   14c88:	mov	r2, #22
   14c8c:	mov	r3, #1
   14c90:	str	r2, [r0]
   14c94:	mov	r0, r3
   14c98:	pop	{r4, pc}
   14c9c:	push	{r4, r5, r6, r7, r8, lr}
   14ca0:	bics	r8, r1, #4096	; 0x1000
   14ca4:	bne	14da4 <__assert_fail@plt+0x3a18>
   14ca8:	mov	r5, r0
   14cac:	mov	r4, r1
   14cb0:	bl	1123c <__errno_location@plt>
   14cb4:	ldr	r6, [r5]
   14cb8:	str	r8, [r0]
   14cbc:	ldr	r3, [r5, #48]	; 0x30
   14cc0:	mov	r7, r0
   14cc4:	ands	r3, r3, #8192	; 0x2000
   14cc8:	bne	14dbc <__assert_fail@plt+0x3a30>
   14ccc:	ldrh	r2, [r6, #56]	; 0x38
   14cd0:	cmp	r2, #9
   14cd4:	ldreq	r3, [r6, #8]
   14cd8:	beq	14d48 <__assert_fail@plt+0x39bc>
   14cdc:	cmp	r2, #1
   14ce0:	bne	14d48 <__assert_fail@plt+0x39bc>
   14ce4:	ldr	r0, [r5, #4]
   14ce8:	cmp	r0, #0
   14cec:	beq	14cf4 <__assert_fail@plt+0x3968>
   14cf0:	bl	12f00 <__assert_fail@plt+0x1b74>
   14cf4:	cmp	r4, #4096	; 0x1000
   14cf8:	moveq	r8, #2
   14cfc:	ldreq	r3, [r5, #48]	; 0x30
   14d00:	movne	r8, #1
   14d04:	orreq	r3, r3, #4096	; 0x1000
   14d08:	streq	r3, [r5, #48]	; 0x30
   14d0c:	ldr	r3, [r6, #48]	; 0x30
   14d10:	cmp	r3, #0
   14d14:	bne	14d34 <__assert_fail@plt+0x39a8>
   14d18:	ldr	r3, [r6, #24]
   14d1c:	ldrb	r3, [r3]
   14d20:	cmp	r3, #47	; 0x2f
   14d24:	beq	14d34 <__assert_fail@plt+0x39a8>
   14d28:	ldr	r1, [r5, #48]	; 0x30
   14d2c:	ands	r4, r1, #4
   14d30:	beq	14d50 <__assert_fail@plt+0x39c4>
   14d34:	mov	r1, r8
   14d38:	mov	r0, r5
   14d3c:	bl	13718 <__assert_fail@plt+0x238c>
   14d40:	mov	r3, r0
   14d44:	str	r0, [r5, #4]
   14d48:	mov	r0, r3
   14d4c:	pop	{r4, r5, r6, r7, r8, pc}
   14d50:	ldr	r2, [pc, #160]	; 14df8 <__assert_fail@plt+0x3a6c>
   14d54:	ldr	r0, [r5, #32]
   14d58:	bl	13398 <__assert_fail@plt+0x200c>
   14d5c:	subs	r6, r0, #0
   14d60:	strlt	r4, [r5, #4]
   14d64:	movlt	r3, r4
   14d68:	blt	14d48 <__assert_fail@plt+0x39bc>
   14d6c:	mov	r1, r8
   14d70:	mov	r0, r5
   14d74:	bl	13718 <__assert_fail@plt+0x238c>
   14d78:	ldr	r3, [r5, #48]	; 0x30
   14d7c:	ands	r4, r3, #512	; 0x200
   14d80:	str	r0, [r5, #4]
   14d84:	beq	14dc4 <__assert_fail@plt+0x3a38>
   14d88:	mov	r1, r6
   14d8c:	mov	r2, #1
   14d90:	mov	r0, r5
   14d94:	bl	1307c <__assert_fail@plt+0x1cf0>
   14d98:	ldr	r3, [r5, #4]
   14d9c:	mov	r0, r3
   14da0:	pop	{r4, r5, r6, r7, r8, pc}
   14da4:	bl	1123c <__errno_location@plt>
   14da8:	mov	r2, #22
   14dac:	mov	r3, #0
   14db0:	str	r2, [r0]
   14db4:	mov	r0, r3
   14db8:	pop	{r4, r5, r6, r7, r8, pc}
   14dbc:	mov	r3, r8
   14dc0:	b	14d48 <__assert_fail@plt+0x39bc>
   14dc4:	mov	r0, r6
   14dc8:	bl	112fc <fchdir@plt>
   14dcc:	cmp	r0, #0
   14dd0:	bne	14de0 <__assert_fail@plt+0x3a54>
   14dd4:	mov	r0, r6
   14dd8:	bl	11350 <close@plt>
   14ddc:	b	14d98 <__assert_fail@plt+0x3a0c>
   14de0:	ldr	r5, [r7]
   14de4:	mov	r0, r6
   14de8:	bl	11350 <close@plt>
   14dec:	str	r5, [r7]
   14df0:	mov	r3, r4
   14df4:	b	14d48 <__assert_fail@plt+0x39bc>
   14df8:	andeq	fp, r1, ip, lsr r2
   14dfc:	andeq	r0, r0, r0
   14e00:	cmp	r0, #10
   14e04:	movcc	r0, #10
   14e08:	push	{r4, r5, r6, r7, r8, lr}
   14e0c:	orr	r7, r0, #1
   14e10:	cmn	r7, #1
   14e14:	ldrne	r8, [pc, #132]	; 14ea0 <__assert_fail@plt+0x3b14>
   14e18:	beq	14e90 <__assert_fail@plt+0x3b04>
   14e1c:	cmp	r7, #9
   14e20:	bls	14e98 <__assert_fail@plt+0x3b0c>
   14e24:	umull	r2, r3, r8, r7
   14e28:	lsr	r3, r3, #1
   14e2c:	add	r3, r3, r3, lsl #1
   14e30:	cmp	r7, r3
   14e34:	beq	14e84 <__assert_fail@plt+0x3af8>
   14e38:	mov	r6, #16
   14e3c:	mov	r5, #9
   14e40:	mov	r4, #3
   14e44:	b	14e58 <__assert_fail@plt+0x3acc>
   14e48:	bl	19c50 <__assert_fail@plt+0x88c4>
   14e4c:	add	r6, r6, #8
   14e50:	cmp	r1, #0
   14e54:	beq	14e84 <__assert_fail@plt+0x3af8>
   14e58:	add	r5, r5, r6
   14e5c:	add	r4, r4, #2
   14e60:	cmp	r5, r7
   14e64:	mov	r0, r7
   14e68:	mov	r1, r4
   14e6c:	bcc	14e48 <__assert_fail@plt+0x3abc>
   14e70:	mov	r1, r4
   14e74:	mov	r0, r7
   14e78:	bl	19c50 <__assert_fail@plt+0x88c4>
   14e7c:	cmp	r1, #0
   14e80:	bne	14e90 <__assert_fail@plt+0x3b04>
   14e84:	add	r7, r7, #2
   14e88:	cmn	r7, #1
   14e8c:	bne	14e1c <__assert_fail@plt+0x3a90>
   14e90:	mov	r0, r7
   14e94:	pop	{r4, r5, r6, r7, r8, pc}
   14e98:	mov	r4, #3
   14e9c:	b	14e70 <__assert_fail@plt+0x3ae4>
   14ea0:	bge	feabf954 <optarg@@GLIBC_2.4+0xfea937b4>
   14ea4:	push	{r4, lr}
   14ea8:	ror	r0, r0, #3
   14eac:	bl	19c50 <__assert_fail@plt+0x88c4>
   14eb0:	mov	r0, r1
   14eb4:	pop	{r4, pc}
   14eb8:	sub	r0, r1, r0
   14ebc:	clz	r0, r0
   14ec0:	lsr	r0, r0, #5
   14ec4:	bx	lr
   14ec8:	push	{r4, lr}
   14ecc:	mov	r4, r0
   14ed0:	mov	r0, r1
   14ed4:	ldr	r3, [r4, #24]
   14ed8:	ldr	r1, [r4, #8]
   14edc:	blx	r3
   14ee0:	ldr	r3, [r4, #8]
   14ee4:	cmp	r0, r3
   14ee8:	bcs	14ef8 <__assert_fail@plt+0x3b6c>
   14eec:	ldr	r3, [r4]
   14ef0:	add	r0, r3, r0, lsl #3
   14ef4:	pop	{r4, pc}
   14ef8:	bl	11344 <abort@plt>
   14efc:	push	{r4, r5, r6, r7, r8, lr}
   14f00:	mov	r7, r2
   14f04:	mov	r8, r3
   14f08:	mov	r6, r0
   14f0c:	mov	r5, r1
   14f10:	bl	14ec8 <__assert_fail@plt+0x3b3c>
   14f14:	str	r0, [r7]
   14f18:	ldr	r3, [r0]
   14f1c:	cmp	r3, #0
   14f20:	beq	14fb8 <__assert_fail@plt+0x3c2c>
   14f24:	cmp	r5, r3
   14f28:	mov	r4, r0
   14f2c:	beq	14f4c <__assert_fail@plt+0x3bc0>
   14f30:	mov	r1, r3
   14f34:	mov	r0, r5
   14f38:	ldr	r3, [r6, #28]
   14f3c:	blx	r3
   14f40:	cmp	r0, #0
   14f44:	beq	14fac <__assert_fail@plt+0x3c20>
   14f48:	ldr	r3, [r4]
   14f4c:	cmp	r8, #0
   14f50:	beq	14f7c <__assert_fail@plt+0x3bf0>
   14f54:	ldr	r2, [r4, #4]
   14f58:	cmp	r2, #0
   14f5c:	movne	ip, #0
   14f60:	ldmne	r2, {r0, r1}
   14f64:	streq	r2, [r4]
   14f68:	stmne	r4, {r0, r1}
   14f6c:	strne	ip, [r2]
   14f70:	ldrne	r1, [r6, #36]	; 0x24
   14f74:	strne	r1, [r2, #4]
   14f78:	strne	r2, [r6, #36]	; 0x24
   14f7c:	mov	r0, r3
   14f80:	pop	{r4, r5, r6, r7, r8, pc}
   14f84:	ldr	r3, [r2]
   14f88:	cmp	r5, r3
   14f8c:	beq	14fcc <__assert_fail@plt+0x3c40>
   14f90:	mov	r1, r3
   14f94:	mov	r0, r5
   14f98:	ldr	r3, [r6, #28]
   14f9c:	blx	r3
   14fa0:	cmp	r0, #0
   14fa4:	bne	14fc4 <__assert_fail@plt+0x3c38>
   14fa8:	ldr	r4, [r4, #4]
   14fac:	ldr	r2, [r4, #4]
   14fb0:	cmp	r2, #0
   14fb4:	bne	14f84 <__assert_fail@plt+0x3bf8>
   14fb8:	mov	r3, #0
   14fbc:	mov	r0, r3
   14fc0:	pop	{r4, r5, r6, r7, r8, pc}
   14fc4:	ldr	r2, [r4, #4]
   14fc8:	ldr	r3, [r2]
   14fcc:	cmp	r8, #0
   14fd0:	beq	14f7c <__assert_fail@plt+0x3bf0>
   14fd4:	ldr	r0, [r2, #4]
   14fd8:	mov	r1, #0
   14fdc:	str	r0, [r4, #4]
   14fe0:	str	r1, [r2]
   14fe4:	ldr	r1, [r6, #36]	; 0x24
   14fe8:	mov	r0, r3
   14fec:	str	r1, [r2, #4]
   14ff0:	str	r2, [r6, #36]	; 0x24
   14ff4:	pop	{r4, r5, r6, r7, r8, pc}
   14ff8:	ldr	r2, [pc, #164]	; 150a4 <__assert_fail@plt+0x3d18>
   14ffc:	ldr	r3, [r0]
   15000:	cmp	r3, r2
   15004:	beq	1508c <__assert_fail@plt+0x3d00>
   15008:	vldr	s15, [r3, #8]
   1500c:	vldr	s14, [pc, #128]	; 15094 <__assert_fail@plt+0x3d08>
   15010:	vcmpe.f32	s15, s14
   15014:	vmrs	APSR_nzcv, fpscr
   15018:	ble	15080 <__assert_fail@plt+0x3cf4>
   1501c:	vldr	s13, [pc, #116]	; 15098 <__assert_fail@plt+0x3d0c>
   15020:	vcmpe.f32	s15, s13
   15024:	vmrs	APSR_nzcv, fpscr
   15028:	bpl	15080 <__assert_fail@plt+0x3cf4>
   1502c:	vldr	s13, [pc, #104]	; 1509c <__assert_fail@plt+0x3d10>
   15030:	vldr	s12, [r3, #12]
   15034:	vcmpe.f32	s12, s13
   15038:	vmrs	APSR_nzcv, fpscr
   1503c:	ble	15080 <__assert_fail@plt+0x3cf4>
   15040:	vldr	s13, [r3]
   15044:	vcmpe.f32	s13, #0.0
   15048:	vmrs	APSR_nzcv, fpscr
   1504c:	blt	15080 <__assert_fail@plt+0x3cf4>
   15050:	vadd.f32	s14, s13, s14
   15054:	vldr	s13, [r3, #4]
   15058:	vcmpe.f32	s14, s13
   1505c:	vmrs	APSR_nzcv, fpscr
   15060:	bpl	15080 <__assert_fail@plt+0x3cf4>
   15064:	vldr	s12, [pc, #52]	; 150a0 <__assert_fail@plt+0x3d14>
   15068:	vcmpe.f32	s13, s12
   1506c:	vmrs	APSR_nzcv, fpscr
   15070:	bhi	15080 <__assert_fail@plt+0x3cf4>
   15074:	vcmpe.f32	s15, s14
   15078:	vmrs	APSR_nzcv, fpscr
   1507c:	bgt	1508c <__assert_fail@plt+0x3d00>
   15080:	str	r2, [r0]
   15084:	mov	r0, #0
   15088:	bx	lr
   1508c:	mov	r0, #1
   15090:	bx	lr
   15094:	stclcc	12, cr12, [ip, #820]	; 0x334
   15098:	svccc	0x00666666
   1509c:	svccc	0x008ccccd
   150a0:	svccc	0x00800000
   150a4:	andeq	fp, r1, r0, asr #4
   150a8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150ac:	ldm	r1, {r6, ip}
   150b0:	cmp	r6, ip
   150b4:	bcs	15170 <__assert_fail@plt+0x3de4>
   150b8:	mov	sl, r2
   150bc:	mov	r5, r0
   150c0:	mov	r8, r1
   150c4:	add	r6, r6, #8
   150c8:	mov	r9, #0
   150cc:	ldr	fp, [r6, #-8]
   150d0:	mov	r7, r6
   150d4:	cmp	fp, #0
   150d8:	beq	15164 <__assert_fail@plt+0x3dd8>
   150dc:	ldr	r4, [r6, #-4]
   150e0:	cmp	r4, #0
   150e4:	bne	15104 <__assert_fail@plt+0x3d78>
   150e8:	b	15154 <__assert_fail@plt+0x3dc8>
   150ec:	ldr	r3, [r0, #4]
   150f0:	cmp	r2, #0
   150f4:	str	r3, [r4, #4]
   150f8:	str	r4, [r0, #4]
   150fc:	mov	r4, r2
   15100:	beq	15150 <__assert_fail@plt+0x3dc4>
   15104:	ldr	fp, [r4]
   15108:	mov	r0, r5
   1510c:	mov	r1, fp
   15110:	bl	14ec8 <__assert_fail@plt+0x3b3c>
   15114:	ldr	r2, [r4, #4]
   15118:	ldr	r1, [r0]
   1511c:	cmp	r1, #0
   15120:	bne	150ec <__assert_fail@plt+0x3d60>
   15124:	ldr	ip, [r5, #12]
   15128:	str	fp, [r0]
   1512c:	add	r3, ip, #1
   15130:	str	r3, [r5, #12]
   15134:	str	r1, [r4]
   15138:	ldr	r3, [r5, #36]	; 0x24
   1513c:	cmp	r2, #0
   15140:	str	r3, [r4, #4]
   15144:	str	r4, [r5, #36]	; 0x24
   15148:	mov	r4, r2
   1514c:	bne	15104 <__assert_fail@plt+0x3d78>
   15150:	ldr	fp, [r6, #-8]
   15154:	cmp	sl, #0
   15158:	str	r9, [r6, #-4]
   1515c:	beq	15178 <__assert_fail@plt+0x3dec>
   15160:	ldr	ip, [r8, #4]
   15164:	cmp	ip, r7
   15168:	add	r6, r6, #8
   1516c:	bhi	150cc <__assert_fail@plt+0x3d40>
   15170:	mov	r0, #1
   15174:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15178:	mov	r1, fp
   1517c:	mov	r0, r5
   15180:	bl	14ec8 <__assert_fail@plt+0x3b3c>
   15184:	ldr	r2, [r0]
   15188:	mov	r4, r0
   1518c:	cmp	r2, #0
   15190:	beq	151dc <__assert_fail@plt+0x3e50>
   15194:	ldr	r0, [r5, #36]	; 0x24
   15198:	cmp	r0, #0
   1519c:	beq	151f0 <__assert_fail@plt+0x3e64>
   151a0:	ldr	r2, [r0, #4]
   151a4:	str	r2, [r5, #36]	; 0x24
   151a8:	ldr	r2, [r4, #4]
   151ac:	str	fp, [r0]
   151b0:	str	r2, [r0, #4]
   151b4:	str	r0, [r4, #4]
   151b8:	str	r9, [r6, #-8]
   151bc:	ldr	r3, [r8, #12]
   151c0:	ldr	ip, [r8, #4]
   151c4:	sub	r3, r3, #1
   151c8:	cmp	ip, r7
   151cc:	str	r3, [r8, #12]
   151d0:	add	r6, r6, #8
   151d4:	bhi	150cc <__assert_fail@plt+0x3d40>
   151d8:	b	15170 <__assert_fail@plt+0x3de4>
   151dc:	ldr	r2, [r5, #12]
   151e0:	str	fp, [r0]
   151e4:	add	r3, r2, #1
   151e8:	str	r3, [r5, #12]
   151ec:	b	151b8 <__assert_fail@plt+0x3e2c>
   151f0:	mov	r0, #8
   151f4:	bl	192f0 <__assert_fail@plt+0x7f64>
   151f8:	cmp	r0, #0
   151fc:	bne	151a8 <__assert_fail@plt+0x3e1c>
   15200:	mov	r0, sl
   15204:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15208:	ldr	r0, [r0, #8]
   1520c:	bx	lr
   15210:	ldr	r0, [r0, #12]
   15214:	bx	lr
   15218:	ldr	r0, [r0, #16]
   1521c:	bx	lr
   15220:	ldm	r0, {r1, ip}
   15224:	mov	r0, #0
   15228:	cmp	r1, ip
   1522c:	bcs	15274 <__assert_fail@plt+0x3ee8>
   15230:	ldr	r3, [r1]
   15234:	cmp	r3, #0
   15238:	beq	15264 <__assert_fail@plt+0x3ed8>
   1523c:	ldr	r3, [r1, #4]
   15240:	mov	r2, #1
   15244:	cmp	r3, #0
   15248:	beq	1525c <__assert_fail@plt+0x3ed0>
   1524c:	ldr	r3, [r3, #4]
   15250:	add	r2, r2, #1
   15254:	cmp	r3, #0
   15258:	bne	1524c <__assert_fail@plt+0x3ec0>
   1525c:	cmp	r0, r2
   15260:	movcc	r0, r2
   15264:	add	r1, r1, #8
   15268:	cmp	r1, ip
   1526c:	bcc	15230 <__assert_fail@plt+0x3ea4>
   15270:	bx	lr
   15274:	bx	lr
   15278:	push	{lr}		; (str lr, [sp, #-4]!)
   1527c:	mov	r2, #0
   15280:	ldm	r0, {r1, lr}
   15284:	mov	ip, r2
   15288:	cmp	r1, lr
   1528c:	bcs	152cc <__assert_fail@plt+0x3f40>
   15290:	ldr	r3, [r1]
   15294:	cmp	r3, #0
   15298:	beq	152c0 <__assert_fail@plt+0x3f34>
   1529c:	ldr	r3, [r1, #4]
   152a0:	add	ip, ip, #1
   152a4:	cmp	r3, #0
   152a8:	add	r2, r2, #1
   152ac:	beq	152c0 <__assert_fail@plt+0x3f34>
   152b0:	ldr	r3, [r3, #4]
   152b4:	add	r2, r2, #1
   152b8:	cmp	r3, #0
   152bc:	bne	152b0 <__assert_fail@plt+0x3f24>
   152c0:	add	r1, r1, #8
   152c4:	cmp	r1, lr
   152c8:	bcc	15290 <__assert_fail@plt+0x3f04>
   152cc:	ldr	r3, [r0, #12]
   152d0:	cmp	r3, ip
   152d4:	ldreq	r0, [r0, #16]
   152d8:	subeq	r0, r0, r2
   152dc:	clzeq	r0, r0
   152e0:	lsreq	r0, r0, #5
   152e4:	movne	r0, #0
   152e8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ec:	push	{r4, r5, r6, r7, lr}
   152f0:	mov	r5, r1
   152f4:	ldm	r0, {ip, lr}
   152f8:	sub	sp, sp, #12
   152fc:	ldr	r3, [r0, #16]
   15300:	cmp	ip, lr
   15304:	mov	r4, #0
   15308:	ldr	r6, [r0, #8]
   1530c:	ldr	r7, [r0, #12]
   15310:	bcs	15354 <__assert_fail@plt+0x3fc8>
   15314:	ldr	r2, [ip]
   15318:	cmp	r2, #0
   1531c:	beq	15348 <__assert_fail@plt+0x3fbc>
   15320:	ldr	r2, [ip, #4]
   15324:	mov	r1, #1
   15328:	cmp	r2, #0
   1532c:	beq	15340 <__assert_fail@plt+0x3fb4>
   15330:	ldr	r2, [r2, #4]
   15334:	add	r1, r1, #1
   15338:	cmp	r2, #0
   1533c:	bne	15330 <__assert_fail@plt+0x3fa4>
   15340:	cmp	r4, r1
   15344:	movcc	r4, r1
   15348:	add	ip, ip, #8
   1534c:	cmp	ip, lr
   15350:	bcc	15314 <__assert_fail@plt+0x3f88>
   15354:	ldr	r2, [pc, #116]	; 153d0 <__assert_fail@plt+0x4044>
   15358:	mov	r1, #1
   1535c:	mov	r0, r5
   15360:	bl	11278 <__fprintf_chk@plt>
   15364:	mov	r3, r6
   15368:	ldr	r2, [pc, #100]	; 153d4 <__assert_fail@plt+0x4048>
   1536c:	mov	r1, #1
   15370:	mov	r0, r5
   15374:	bl	11278 <__fprintf_chk@plt>
   15378:	vmov	s15, r7
   1537c:	vldr	d5, [pc, #68]	; 153c8 <__assert_fail@plt+0x403c>
   15380:	mov	r3, r7
   15384:	ldr	r2, [pc, #76]	; 153d8 <__assert_fail@plt+0x404c>
   15388:	vcvt.f64.u32	d6, s15
   1538c:	vmov	s15, r6
   15390:	mov	r1, #1
   15394:	mov	r0, r5
   15398:	vcvt.f64.u32	d7, s15
   1539c:	vmul.f64	d6, d6, d5
   153a0:	vdiv.f64	d5, d6, d7
   153a4:	vstr	d5, [sp]
   153a8:	bl	11278 <__fprintf_chk@plt>
   153ac:	mov	r3, r4
   153b0:	mov	r0, r5
   153b4:	ldr	r2, [pc, #32]	; 153dc <__assert_fail@plt+0x4050>
   153b8:	mov	r1, #1
   153bc:	add	sp, sp, #12
   153c0:	pop	{r4, r5, r6, r7, lr}
   153c4:	b	11278 <__fprintf_chk@plt>
   153c8:	andeq	r0, r0, r0
   153cc:	subsmi	r0, r9, r0
   153d0:	andeq	fp, r1, r4, asr r2
   153d4:	andeq	fp, r1, ip, ror #4
   153d8:	andeq	fp, r1, r4, lsl #5
   153dc:	andeq	fp, r1, r8, lsr #5
   153e0:	push	{r4, r5, r6, lr}
   153e4:	mov	r6, r0
   153e8:	mov	r5, r1
   153ec:	bl	14ec8 <__assert_fail@plt+0x3b3c>
   153f0:	ldr	r3, [r0]
   153f4:	cmp	r3, #0
   153f8:	movne	r4, r0
   153fc:	bne	15408 <__assert_fail@plt+0x407c>
   15400:	b	15434 <__assert_fail@plt+0x40a8>
   15404:	ldr	r3, [r4]
   15408:	cmp	r5, r3
   1540c:	mov	r1, r3
   15410:	mov	r0, r5
   15414:	beq	1543c <__assert_fail@plt+0x40b0>
   15418:	ldr	r3, [r6, #28]
   1541c:	blx	r3
   15420:	cmp	r0, #0
   15424:	bne	15444 <__assert_fail@plt+0x40b8>
   15428:	ldr	r4, [r4, #4]
   1542c:	cmp	r4, #0
   15430:	bne	15404 <__assert_fail@plt+0x4078>
   15434:	mov	r0, #0
   15438:	pop	{r4, r5, r6, pc}
   1543c:	mov	r0, r5
   15440:	pop	{r4, r5, r6, pc}
   15444:	ldr	r0, [r4]
   15448:	pop	{r4, r5, r6, pc}
   1544c:	ldr	r3, [r0, #16]
   15450:	cmp	r3, #0
   15454:	beq	15488 <__assert_fail@plt+0x40fc>
   15458:	ldr	r3, [r0]
   1545c:	ldr	r2, [r0, #4]
   15460:	cmp	r3, r2
   15464:	bcc	15478 <__assert_fail@plt+0x40ec>
   15468:	b	15490 <__assert_fail@plt+0x4104>
   1546c:	add	r3, r3, #8
   15470:	cmp	r3, r2
   15474:	bcs	15490 <__assert_fail@plt+0x4104>
   15478:	ldr	r0, [r3]
   1547c:	cmp	r0, #0
   15480:	beq	1546c <__assert_fail@plt+0x40e0>
   15484:	bx	lr
   15488:	mov	r0, r3
   1548c:	bx	lr
   15490:	push	{r4, lr}
   15494:	bl	11344 <abort@plt>
   15498:	push	{r4, r5, r6, lr}
   1549c:	mov	r5, r0
   154a0:	mov	r4, r1
   154a4:	bl	14ec8 <__assert_fail@plt+0x3b3c>
   154a8:	mov	r2, r0
   154ac:	mov	r3, r0
   154b0:	b	154bc <__assert_fail@plt+0x4130>
   154b4:	cmp	r3, #0
   154b8:	beq	154d0 <__assert_fail@plt+0x4144>
   154bc:	ldm	r3, {r1, r3}
   154c0:	cmp	r4, r1
   154c4:	bne	154b4 <__assert_fail@plt+0x4128>
   154c8:	cmp	r3, #0
   154cc:	bne	154f8 <__assert_fail@plt+0x416c>
   154d0:	ldr	r3, [r5, #4]
   154d4:	b	154e4 <__assert_fail@plt+0x4158>
   154d8:	ldr	r0, [r2]
   154dc:	cmp	r0, #0
   154e0:	popne	{r4, r5, r6, pc}
   154e4:	add	r2, r2, #8
   154e8:	cmp	r2, r3
   154ec:	bcc	154d8 <__assert_fail@plt+0x414c>
   154f0:	mov	r0, #0
   154f4:	pop	{r4, r5, r6, pc}
   154f8:	ldr	r0, [r3]
   154fc:	pop	{r4, r5, r6, pc}
   15500:	push	{r4, r5, r6, lr}
   15504:	ldm	r0, {r5, lr}
   15508:	cmp	r5, lr
   1550c:	bcs	15590 <__assert_fail@plt+0x4204>
   15510:	add	r5, r5, #8
   15514:	mov	ip, #0
   15518:	ldr	r3, [r5, #-8]
   1551c:	mov	r6, r5
   15520:	cmp	r3, #0
   15524:	beq	15570 <__assert_fail@plt+0x41e4>
   15528:	cmp	r2, ip
   1552c:	bls	1557c <__assert_fail@plt+0x41f0>
   15530:	str	r3, [r1, ip, lsl #2]
   15534:	ldr	r3, [r5, #-4]
   15538:	add	r4, ip, #1
   1553c:	cmp	r3, #0
   15540:	add	lr, r1, ip, lsl #2
   15544:	beq	15584 <__assert_fail@plt+0x41f8>
   15548:	mov	ip, r4
   1554c:	cmp	r2, ip
   15550:	beq	1557c <__assert_fail@plt+0x41f0>
   15554:	ldr	r4, [r3]
   15558:	add	ip, ip, #1
   1555c:	str	r4, [lr, #4]!
   15560:	ldr	r3, [r3, #4]
   15564:	cmp	r3, #0
   15568:	bne	1554c <__assert_fail@plt+0x41c0>
   1556c:	ldr	lr, [r0, #4]
   15570:	cmp	lr, r6
   15574:	add	r5, r5, #8
   15578:	bhi	15518 <__assert_fail@plt+0x418c>
   1557c:	mov	r0, ip
   15580:	pop	{r4, r5, r6, pc}
   15584:	ldr	lr, [r0, #4]
   15588:	mov	ip, r4
   1558c:	b	15570 <__assert_fail@plt+0x41e4>
   15590:	mov	ip, #0
   15594:	b	1557c <__assert_fail@plt+0x41f0>
   15598:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1559c:	ldr	r3, [r0, #4]
   155a0:	ldr	r8, [r0]
   155a4:	cmp	r8, r3
   155a8:	bcs	1560c <__assert_fail@plt+0x4280>
   155ac:	mov	r7, r2
   155b0:	mov	r6, r1
   155b4:	mov	r9, r0
   155b8:	mov	r5, #0
   155bc:	ldr	r0, [r8]
   155c0:	cmp	r0, #0
   155c4:	beq	155f8 <__assert_fail@plt+0x426c>
   155c8:	mov	r4, r8
   155cc:	b	155d4 <__assert_fail@plt+0x4248>
   155d0:	ldr	r0, [r4]
   155d4:	mov	r1, r7
   155d8:	blx	r6
   155dc:	cmp	r0, #0
   155e0:	beq	15604 <__assert_fail@plt+0x4278>
   155e4:	ldr	r4, [r4, #4]
   155e8:	add	r5, r5, #1
   155ec:	cmp	r4, #0
   155f0:	bne	155d0 <__assert_fail@plt+0x4244>
   155f4:	ldr	r3, [r9, #4]
   155f8:	add	r8, r8, #8
   155fc:	cmp	r3, r8
   15600:	bhi	155bc <__assert_fail@plt+0x4230>
   15604:	mov	r0, r5
   15608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1560c:	mov	r5, #0
   15610:	b	15604 <__assert_fail@plt+0x4278>
   15614:	push	{r4, r5, r6, lr}
   15618:	mov	r4, r0
   1561c:	ldrb	r0, [r0]
   15620:	cmp	r0, #0
   15624:	beq	15654 <__assert_fail@plt+0x42c8>
   15628:	mov	r5, r1
   1562c:	mov	r1, #0
   15630:	rsb	r1, r1, r1, lsl #5
   15634:	add	r0, r1, r0
   15638:	mov	r1, r5
   1563c:	bl	19c50 <__assert_fail@plt+0x88c4>
   15640:	ldrb	r0, [r4, #1]!
   15644:	cmp	r0, #0
   15648:	bne	15630 <__assert_fail@plt+0x42a4>
   1564c:	mov	r0, r1
   15650:	pop	{r4, r5, r6, pc}
   15654:	mov	r1, r0
   15658:	b	1564c <__assert_fail@plt+0x42c0>
   1565c:	push	{lr}		; (str lr, [sp, #-4]!)
   15660:	mov	ip, r0
   15664:	ldr	lr, [pc, #16]	; 1567c <__assert_fail@plt+0x42f0>
   15668:	ldm	lr!, {r0, r1, r2, r3}
   1566c:	ldr	lr, [lr]
   15670:	stmia	ip!, {r0, r1, r2, r3}
   15674:	str	lr, [ip]
   15678:	pop	{pc}		; (ldr pc, [sp], #4)
   1567c:	andeq	fp, r1, r0, asr #4
   15680:	push	{r4, r5, r6, r7, lr}
   15684:	sub	sp, sp, #12
   15688:	cmp	r2, #0
   1568c:	str	r0, [sp, #4]
   15690:	ldr	r6, [pc, #304]	; 157c8 <__assert_fail@plt+0x443c>
   15694:	mov	r0, #40	; 0x28
   15698:	movne	r6, r2
   1569c:	cmp	r3, #0
   156a0:	ldr	r7, [pc, #292]	; 157cc <__assert_fail@plt+0x4440>
   156a4:	mov	r5, r1
   156a8:	movne	r7, r3
   156ac:	bl	192f0 <__assert_fail@plt+0x7f64>
   156b0:	subs	r4, r0, #0
   156b4:	beq	1574c <__assert_fail@plt+0x43c0>
   156b8:	cmp	r5, #0
   156bc:	beq	157a0 <__assert_fail@plt+0x4414>
   156c0:	mov	r0, r4
   156c4:	str	r5, [r0, #20]!
   156c8:	bl	14ff8 <__assert_fail@plt+0x3c6c>
   156cc:	cmp	r0, #0
   156d0:	beq	15788 <__assert_fail@plt+0x43fc>
   156d4:	ldrb	r3, [r5, #16]
   156d8:	cmp	r3, #0
   156dc:	beq	15758 <__assert_fail@plt+0x43cc>
   156e0:	ldr	r0, [sp, #4]
   156e4:	bl	14e00 <__assert_fail@plt+0x3a74>
   156e8:	lsrs	r2, r0, #30
   156ec:	movne	r5, #1
   156f0:	moveq	r5, #0
   156f4:	tst	r0, #536870912	; 0x20000000
   156f8:	bne	15780 <__assert_fail@plt+0x43f4>
   156fc:	cmp	r5, #0
   15700:	bne	15780 <__assert_fail@plt+0x43f4>
   15704:	cmp	r0, #0
   15708:	str	r0, [r4, #8]
   1570c:	beq	15788 <__assert_fail@plt+0x43fc>
   15710:	mov	r1, #8
   15714:	bl	192a8 <__assert_fail@plt+0x7f1c>
   15718:	cmp	r0, #0
   1571c:	str	r0, [r4]
   15720:	beq	15788 <__assert_fail@plt+0x43fc>
   15724:	ldr	r3, [r4, #8]
   15728:	str	r5, [r4, #12]
   1572c:	str	r5, [r4, #16]
   15730:	add	r0, r0, r3, lsl #3
   15734:	ldr	r3, [sp, #32]
   15738:	str	r6, [r4, #24]
   1573c:	str	r7, [r4, #28]
   15740:	str	r3, [r4, #32]
   15744:	str	r5, [r4, #36]	; 0x24
   15748:	str	r0, [r4, #4]
   1574c:	mov	r0, r4
   15750:	add	sp, sp, #12
   15754:	pop	{r4, r5, r6, r7, pc}
   15758:	vldr	s12, [r5, #8]
   1575c:	vldr	s15, [sp, #4]
   15760:	vldr	s14, [pc, #88]	; 157c0 <__assert_fail@plt+0x4434>
   15764:	vcvt.f32.u32	s13, s15
   15768:	vdiv.f32	s15, s13, s12
   1576c:	vcmpe.f32	s15, s14
   15770:	vmrs	APSR_nzcv, fpscr
   15774:	vcvtlt.u32.f32	s15, s15
   15778:	vstrlt	s15, [sp, #4]
   1577c:	blt	156e0 <__assert_fail@plt+0x4354>
   15780:	mov	r3, #0
   15784:	str	r3, [r4, #8]
   15788:	mov	r0, r4
   1578c:	bl	12c84 <__assert_fail@plt+0x18f8>
   15790:	mov	r4, #0
   15794:	mov	r0, r4
   15798:	add	sp, sp, #12
   1579c:	pop	{r4, r5, r6, r7, pc}
   157a0:	ldr	r3, [pc, #40]	; 157d0 <__assert_fail@plt+0x4444>
   157a4:	mov	r0, r4
   157a8:	str	r3, [r0, #20]!
   157ac:	bl	14ff8 <__assert_fail@plt+0x3c6c>
   157b0:	cmp	r0, #0
   157b4:	vldrne	s12, [pc, #8]	; 157c4 <__assert_fail@plt+0x4438>
   157b8:	bne	1575c <__assert_fail@plt+0x43d0>
   157bc:	b	15788 <__assert_fail@plt+0x43fc>
   157c0:	svcmi	0x00800000
   157c4:	svccc	0x004ccccd
   157c8:	andeq	r4, r1, r4, lsr #29
   157cc:			; <UNDEFINED> instruction: 0x00014eb8
   157d0:	andeq	fp, r1, r0, asr #4
   157d4:	push	{r4, r5, r6, r7, r8, lr}
   157d8:	mov	r5, r0
   157dc:	ldr	r7, [r0]
   157e0:	ldr	r3, [r0, #4]
   157e4:	cmp	r7, r3
   157e8:	addcc	r7, r7, #8
   157ec:	movcc	r6, #0
   157f0:	bcs	1586c <__assert_fail@plt+0x44e0>
   157f4:	ldr	r2, [r7, #-8]
   157f8:	mov	r8, r7
   157fc:	cmp	r2, #0
   15800:	beq	15860 <__assert_fail@plt+0x44d4>
   15804:	ldr	r4, [r7, #-4]
   15808:	ldr	r2, [r5, #32]
   1580c:	cmp	r4, #0
   15810:	beq	15844 <__assert_fail@plt+0x44b8>
   15814:	cmp	r2, #0
   15818:	beq	15828 <__assert_fail@plt+0x449c>
   1581c:	ldr	r0, [r4]
   15820:	blx	r2
   15824:	ldr	r2, [r5, #32]
   15828:	ldr	r3, [r4, #4]
   1582c:	ldr	r1, [r5, #36]	; 0x24
   15830:	str	r6, [r4]
   15834:	str	r1, [r4, #4]
   15838:	str	r4, [r5, #36]	; 0x24
   1583c:	subs	r4, r3, #0
   15840:	bne	15814 <__assert_fail@plt+0x4488>
   15844:	cmp	r2, #0
   15848:	beq	15854 <__assert_fail@plt+0x44c8>
   1584c:	ldr	r0, [r7, #-8]
   15850:	blx	r2
   15854:	str	r6, [r7, #-8]
   15858:	str	r6, [r7, #-4]
   1585c:	ldr	r3, [r5, #4]
   15860:	cmp	r3, r8
   15864:	add	r7, r7, #8
   15868:	bhi	157f4 <__assert_fail@plt+0x4468>
   1586c:	mov	r3, #0
   15870:	str	r3, [r5, #12]
   15874:	str	r3, [r5, #16]
   15878:	pop	{r4, r5, r6, r7, r8, pc}
   1587c:	ldr	r3, [r0, #32]
   15880:	push	{r4, r5, r6, lr}
   15884:	cmp	r3, #0
   15888:	mov	r5, r0
   1588c:	beq	158ec <__assert_fail@plt+0x4560>
   15890:	ldr	r3, [r0, #16]
   15894:	cmp	r3, #0
   15898:	beq	158ec <__assert_fail@plt+0x4560>
   1589c:	ldr	r6, [r0]
   158a0:	ldr	r3, [r0, #4]
   158a4:	cmp	r6, r3
   158a8:	bcs	15928 <__assert_fail@plt+0x459c>
   158ac:	ldr	r0, [r6]
   158b0:	cmp	r0, #0
   158b4:	movne	r4, r6
   158b8:	bne	158c4 <__assert_fail@plt+0x4538>
   158bc:	b	158dc <__assert_fail@plt+0x4550>
   158c0:	ldr	r0, [r4]
   158c4:	ldr	r3, [r5, #32]
   158c8:	blx	r3
   158cc:	ldr	r4, [r4, #4]
   158d0:	cmp	r4, #0
   158d4:	bne	158c0 <__assert_fail@plt+0x4534>
   158d8:	ldr	r3, [r5, #4]
   158dc:	add	r6, r6, #8
   158e0:	cmp	r3, r6
   158e4:	bhi	158ac <__assert_fail@plt+0x4520>
   158e8:	b	158f0 <__assert_fail@plt+0x4564>
   158ec:	ldr	r3, [r5, #4]
   158f0:	ldr	r6, [r5]
   158f4:	cmp	r3, r6
   158f8:	bls	15928 <__assert_fail@plt+0x459c>
   158fc:	ldr	r0, [r6, #4]
   15900:	cmp	r0, #0
   15904:	beq	1591c <__assert_fail@plt+0x4590>
   15908:	ldr	r4, [r0, #4]
   1590c:	bl	12c84 <__assert_fail@plt+0x18f8>
   15910:	subs	r0, r4, #0
   15914:	bne	15908 <__assert_fail@plt+0x457c>
   15918:	ldr	r3, [r5, #4]
   1591c:	add	r6, r6, #8
   15920:	cmp	r3, r6
   15924:	bhi	158fc <__assert_fail@plt+0x4570>
   15928:	ldr	r0, [r5, #36]	; 0x24
   1592c:	cmp	r0, #0
   15930:	beq	15944 <__assert_fail@plt+0x45b8>
   15934:	ldr	r4, [r0, #4]
   15938:	bl	12c84 <__assert_fail@plt+0x18f8>
   1593c:	subs	r0, r4, #0
   15940:	bne	15934 <__assert_fail@plt+0x45a8>
   15944:	ldr	r0, [r5]
   15948:	bl	12c84 <__assert_fail@plt+0x18f8>
   1594c:	mov	r0, r5
   15950:	pop	{r4, r5, r6, lr}
   15954:	b	12c84 <__assert_fail@plt+0x18f8>
   15958:	ldr	r3, [r0, #20]
   1595c:	push	{r4, r5, r6, r7, lr}
   15960:	sub	sp, sp, #52	; 0x34
   15964:	ldrb	r2, [r3, #16]
   15968:	mov	r5, r0
   1596c:	str	r1, [sp, #4]
   15970:	cmp	r2, #0
   15974:	bne	159a0 <__assert_fail@plt+0x4614>
   15978:	vmov	s15, r1
   1597c:	vldr	s13, [r3, #8]
   15980:	vldr	s14, [pc, #352]	; 15ae8 <__assert_fail@plt+0x475c>
   15984:	vcvt.f32.u32	s12, s15
   15988:	vdiv.f32	s15, s12, s13
   1598c:	vcmpe.f32	s15, s14
   15990:	vmrs	APSR_nzcv, fpscr
   15994:	bge	15aa4 <__assert_fail@plt+0x4718>
   15998:	vcvt.u32.f32	s15, s15
   1599c:	vstr	s15, [sp, #4]
   159a0:	ldr	r0, [sp, #4]
   159a4:	bl	14e00 <__assert_fail@plt+0x3a74>
   159a8:	lsrs	r3, r0, #30
   159ac:	movne	r2, #1
   159b0:	moveq	r2, #0
   159b4:	tst	r0, #536870912	; 0x20000000
   159b8:	movne	r2, #1
   159bc:	cmp	r0, #0
   159c0:	movne	r4, r2
   159c4:	orreq	r4, r2, #1
   159c8:	cmp	r4, #0
   159cc:	mov	r6, r0
   159d0:	bne	15aa4 <__assert_fail@plt+0x4718>
   159d4:	ldr	r3, [r5, #8]
   159d8:	cmp	r3, r0
   159dc:	beq	15a94 <__assert_fail@plt+0x4708>
   159e0:	mov	r1, #8
   159e4:	bl	192a8 <__assert_fail@plt+0x7f1c>
   159e8:	cmp	r0, #0
   159ec:	str	r0, [sp, #8]
   159f0:	beq	15aa4 <__assert_fail@plt+0x4718>
   159f4:	ldr	r1, [r5, #24]
   159f8:	ldr	r7, [r5, #20]
   159fc:	ldr	lr, [r5, #28]
   15a00:	ldr	ip, [r5, #32]
   15a04:	add	r0, r0, r6, lsl #3
   15a08:	ldr	r3, [r5, #36]	; 0x24
   15a0c:	str	r0, [sp, #12]
   15a10:	mov	r2, r4
   15a14:	str	r1, [sp, #32]
   15a18:	add	r0, sp, #8
   15a1c:	mov	r1, r5
   15a20:	str	r4, [sp, #20]
   15a24:	str	r4, [sp, #24]
   15a28:	str	r6, [sp, #16]
   15a2c:	str	r7, [sp, #28]
   15a30:	str	lr, [sp, #36]	; 0x24
   15a34:	str	ip, [sp, #40]	; 0x28
   15a38:	str	r3, [sp, #44]	; 0x2c
   15a3c:	bl	150a8 <__assert_fail@plt+0x3d1c>
   15a40:	subs	r4, r0, #0
   15a44:	bne	15ab4 <__assert_fail@plt+0x4728>
   15a48:	ldr	r3, [sp, #44]	; 0x2c
   15a4c:	mov	r2, #1
   15a50:	str	r3, [r5, #36]	; 0x24
   15a54:	add	r1, sp, #8
   15a58:	mov	r0, r5
   15a5c:	bl	150a8 <__assert_fail@plt+0x3d1c>
   15a60:	cmp	r0, #0
   15a64:	beq	15ae4 <__assert_fail@plt+0x4758>
   15a68:	add	r1, sp, #8
   15a6c:	mov	r0, r5
   15a70:	mov	r2, r4
   15a74:	bl	150a8 <__assert_fail@plt+0x3d1c>
   15a78:	cmp	r0, #0
   15a7c:	beq	15ae4 <__assert_fail@plt+0x4758>
   15a80:	ldr	r0, [sp, #8]
   15a84:	bl	12c84 <__assert_fail@plt+0x18f8>
   15a88:	mov	r0, r4
   15a8c:	add	sp, sp, #52	; 0x34
   15a90:	pop	{r4, r5, r6, r7, pc}
   15a94:	mov	r4, #1
   15a98:	mov	r0, r4
   15a9c:	add	sp, sp, #52	; 0x34
   15aa0:	pop	{r4, r5, r6, r7, pc}
   15aa4:	mov	r4, #0
   15aa8:	mov	r0, r4
   15aac:	add	sp, sp, #52	; 0x34
   15ab0:	pop	{r4, r5, r6, r7, pc}
   15ab4:	ldr	r0, [r5]
   15ab8:	bl	12c84 <__assert_fail@plt+0x18f8>
   15abc:	add	r0, sp, #12
   15ac0:	ldr	ip, [sp, #8]
   15ac4:	ldm	r0, {r0, r1, r2}
   15ac8:	ldr	r3, [sp, #44]	; 0x2c
   15acc:	str	ip, [r5]
   15ad0:	stmib	r5, {r0, r1, r2}
   15ad4:	mov	r0, r4
   15ad8:	str	r3, [r5, #36]	; 0x24
   15adc:	add	sp, sp, #52	; 0x34
   15ae0:	pop	{r4, r5, r6, r7, pc}
   15ae4:	bl	11344 <abort@plt>
   15ae8:	svcmi	0x00800000
   15aec:	push	{r4, r5, r6, lr}
   15af0:	subs	r6, r1, #0
   15af4:	sub	sp, sp, #8
   15af8:	beq	15c2c <__assert_fail@plt+0x48a0>
   15afc:	mov	r4, r2
   15b00:	mov	r3, #0
   15b04:	add	r2, sp, #4
   15b08:	mov	r5, r0
   15b0c:	bl	14efc <__assert_fail@plt+0x3b70>
   15b10:	cmp	r0, #0
   15b14:	beq	15b30 <__assert_fail@plt+0x47a4>
   15b18:	cmp	r4, #0
   15b1c:	moveq	r0, r4
   15b20:	strne	r0, [r4]
   15b24:	movne	r0, #0
   15b28:	add	sp, sp, #8
   15b2c:	pop	{r4, r5, r6, pc}
   15b30:	vldr	s15, [r5, #8]
   15b34:	ldr	r3, [r5, #20]
   15b38:	vldr	s14, [r5, #12]
   15b3c:	vcvt.f32.u32	s15, s15
   15b40:	vldr	s13, [r3, #8]
   15b44:	vcvt.f32.u32	s14, s14
   15b48:	vmul.f32	s15, s15, s13
   15b4c:	vcmpe.f32	s14, s15
   15b50:	vmrs	APSR_nzcv, fpscr
   15b54:	bgt	15ba4 <__assert_fail@plt+0x4818>
   15b58:	ldr	r2, [sp, #4]
   15b5c:	ldr	r3, [r2]
   15b60:	cmp	r3, #0
   15b64:	beq	15c30 <__assert_fail@plt+0x48a4>
   15b68:	ldr	r3, [r5, #36]	; 0x24
   15b6c:	cmp	r3, #0
   15b70:	beq	15c54 <__assert_fail@plt+0x48c8>
   15b74:	ldr	r1, [r3, #4]
   15b78:	str	r1, [r5, #36]	; 0x24
   15b7c:	ldr	r1, [r5, #16]
   15b80:	ldr	r0, [r2, #4]
   15b84:	add	r1, r1, #1
   15b88:	str	r0, [r3, #4]
   15b8c:	str	r6, [r3]
   15b90:	mov	r0, #1
   15b94:	str	r3, [r2, #4]
   15b98:	str	r1, [r5, #16]
   15b9c:	add	sp, sp, #8
   15ba0:	pop	{r4, r5, r6, pc}
   15ba4:	add	r0, r5, #20
   15ba8:	bl	14ff8 <__assert_fail@plt+0x3c6c>
   15bac:	vldr	s15, [r5, #8]
   15bb0:	ldr	r3, [r5, #20]
   15bb4:	vldr	s14, [r5, #12]
   15bb8:	vcvt.f32.u32	s15, s15
   15bbc:	vldr	s13, [r3, #8]
   15bc0:	vcvt.f32.u32	s14, s14
   15bc4:	vmul.f32	s12, s13, s15
   15bc8:	vcmpe.f32	s14, s12
   15bcc:	vmrs	APSR_nzcv, fpscr
   15bd0:	ble	15b58 <__assert_fail@plt+0x47cc>
   15bd4:	vldr	s14, [r3, #12]
   15bd8:	ldrb	r2, [r3, #16]
   15bdc:	vmul.f32	s15, s15, s14
   15be0:	cmp	r2, #0
   15be4:	vldr	s14, [pc, #132]	; 15c70 <__assert_fail@plt+0x48e4>
   15be8:	vmuleq.f32	s15, s15, s13
   15bec:	vcmpe.f32	s15, s14
   15bf0:	vmrs	APSR_nzcv, fpscr
   15bf4:	bge	15c68 <__assert_fail@plt+0x48dc>
   15bf8:	vcvt.u32.f32	s15, s15
   15bfc:	mov	r0, r5
   15c00:	vmov	r1, s15
   15c04:	bl	15958 <__assert_fail@plt+0x45cc>
   15c08:	cmp	r0, #0
   15c0c:	beq	15c68 <__assert_fail@plt+0x48dc>
   15c10:	add	r2, sp, #4
   15c14:	mov	r3, #0
   15c18:	mov	r1, r6
   15c1c:	mov	r0, r5
   15c20:	bl	14efc <__assert_fail@plt+0x3b70>
   15c24:	cmp	r0, #0
   15c28:	beq	15b58 <__assert_fail@plt+0x47cc>
   15c2c:	bl	11344 <abort@plt>
   15c30:	ldr	r1, [r5, #16]
   15c34:	ldr	r3, [r5, #12]
   15c38:	add	r1, r1, #1
   15c3c:	add	r3, r3, #1
   15c40:	str	r6, [r2]
   15c44:	mov	r0, #1
   15c48:	str	r1, [r5, #16]
   15c4c:	str	r3, [r5, #12]
   15c50:	b	15b28 <__assert_fail@plt+0x479c>
   15c54:	mov	r0, #8
   15c58:	bl	192f0 <__assert_fail@plt+0x7f64>
   15c5c:	subs	r3, r0, #0
   15c60:	ldrne	r2, [sp, #4]
   15c64:	bne	15b7c <__assert_fail@plt+0x47f0>
   15c68:	mvn	r0, #0
   15c6c:	b	15b28 <__assert_fail@plt+0x479c>
   15c70:	svcmi	0x00800000
   15c74:	push	{r4, lr}
   15c78:	sub	sp, sp, #8
   15c7c:	add	r2, sp, #4
   15c80:	mov	r4, r1
   15c84:	bl	15aec <__assert_fail@plt+0x4760>
   15c88:	cmn	r0, #1
   15c8c:	beq	15ca4 <__assert_fail@plt+0x4918>
   15c90:	cmp	r0, #0
   15c94:	movne	r0, r4
   15c98:	ldreq	r0, [sp, #4]
   15c9c:	add	sp, sp, #8
   15ca0:	pop	{r4, pc}
   15ca4:	mov	r0, #0
   15ca8:	b	15c9c <__assert_fail@plt+0x4910>
   15cac:	push	{r4, r5, r6, lr}
   15cb0:	sub	sp, sp, #8
   15cb4:	mov	r3, #1
   15cb8:	add	r2, sp, #4
   15cbc:	mov	r4, r0
   15cc0:	bl	14efc <__assert_fail@plt+0x3b70>
   15cc4:	subs	r5, r0, #0
   15cc8:	beq	15ce8 <__assert_fail@plt+0x495c>
   15ccc:	ldr	r2, [sp, #4]
   15cd0:	ldr	r3, [r4, #16]
   15cd4:	ldr	r2, [r2]
   15cd8:	sub	r3, r3, #1
   15cdc:	cmp	r2, #0
   15ce0:	str	r3, [r4, #16]
   15ce4:	beq	15cf4 <__assert_fail@plt+0x4968>
   15ce8:	mov	r0, r5
   15cec:	add	sp, sp, #8
   15cf0:	pop	{r4, r5, r6, pc}
   15cf4:	vldr	s15, [r4, #8]
   15cf8:	ldr	r3, [r4, #12]
   15cfc:	ldr	r2, [r4, #20]
   15d00:	sub	r3, r3, #1
   15d04:	vcvt.f32.u32	s14, s15
   15d08:	vldr	s13, [r2]
   15d0c:	vmov	s15, r3
   15d10:	str	r3, [r4, #12]
   15d14:	vcvt.f32.u32	s15, s15
   15d18:	vmul.f32	s14, s14, s13
   15d1c:	vcmpe.f32	s15, s14
   15d20:	vmrs	APSR_nzcv, fpscr
   15d24:	bpl	15ce8 <__assert_fail@plt+0x495c>
   15d28:	add	r0, r4, #20
   15d2c:	bl	14ff8 <__assert_fail@plt+0x3c6c>
   15d30:	vldr	s15, [r4, #8]
   15d34:	ldr	r3, [r4, #20]
   15d38:	vldr	s13, [r4, #12]
   15d3c:	vcvt.f32.u32	s15, s15
   15d40:	vldr	s14, [r3]
   15d44:	vcvt.f32.u32	s13, s13
   15d48:	vmul.f32	s14, s15, s14
   15d4c:	vcmpe.f32	s13, s14
   15d50:	vmrs	APSR_nzcv, fpscr
   15d54:	bpl	15ce8 <__assert_fail@plt+0x495c>
   15d58:	ldrb	r2, [r3, #16]
   15d5c:	mov	r0, r4
   15d60:	cmp	r2, #0
   15d64:	vldreq	s13, [r3, #4]
   15d68:	vldrne	s14, [r3, #4]
   15d6c:	vldreq	s14, [r3, #8]
   15d70:	vmuleq.f32	s15, s15, s13
   15d74:	vmul.f32	s15, s15, s14
   15d78:	vcvt.u32.f32	s15, s15
   15d7c:	vmov	r1, s15
   15d80:	bl	15958 <__assert_fail@plt+0x45cc>
   15d84:	cmp	r0, #0
   15d88:	bne	15ce8 <__assert_fail@plt+0x495c>
   15d8c:	ldr	r0, [r4, #36]	; 0x24
   15d90:	cmp	r0, #0
   15d94:	beq	15da8 <__assert_fail@plt+0x4a1c>
   15d98:	ldr	r6, [r0, #4]
   15d9c:	bl	12c84 <__assert_fail@plt+0x18f8>
   15da0:	subs	r0, r6, #0
   15da4:	bne	15d98 <__assert_fail@plt+0x4a0c>
   15da8:	mov	r3, #0
   15dac:	str	r3, [r4, #36]	; 0x24
   15db0:	b	15ce8 <__assert_fail@plt+0x495c>
   15db4:	b	15cac <__assert_fail@plt+0x4920>
   15db8:	mov	r3, #0
   15dbc:	mov	r2, #1
   15dc0:	str	r1, [r0]
   15dc4:	str	r1, [r0, #4]
   15dc8:	str	r1, [r0, #8]
   15dcc:	str	r1, [r0, #12]
   15dd0:	str	r1, [r0, #16]
   15dd4:	strb	r2, [r0, #28]
   15dd8:	str	r3, [r0, #20]
   15ddc:	str	r3, [r0, #24]
   15de0:	bx	lr
   15de4:	ldrb	r0, [r0, #28]
   15de8:	bx	lr
   15dec:	ldrb	ip, [r0, #28]
   15df0:	ldr	r3, [r0, #20]
   15df4:	mov	r2, r0
   15df8:	eor	ip, ip, #1
   15dfc:	add	r3, ip, r3
   15e00:	and	r3, r3, #3
   15e04:	ldr	r0, [r0, r3, lsl #2]
   15e08:	str	r1, [r2, r3, lsl #2]
   15e0c:	ldr	r1, [r2, #24]
   15e10:	str	r3, [r2, #20]
   15e14:	cmp	r3, r1
   15e18:	addeq	r3, ip, r3
   15e1c:	andeq	r3, r3, #3
   15e20:	streq	r3, [r2, #24]
   15e24:	mov	r3, #0
   15e28:	strb	r3, [r2, #28]
   15e2c:	bx	lr
   15e30:	ldrb	r3, [r0, #28]
   15e34:	cmp	r3, #0
   15e38:	bne	15e70 <__assert_fail@plt+0x4ae4>
   15e3c:	ldr	r3, [r0, #20]
   15e40:	ldr	r1, [r0, #16]
   15e44:	ldr	r2, [r0, r3, lsl #2]
   15e48:	str	r1, [r0, r3, lsl #2]
   15e4c:	ldr	r1, [r0, #24]
   15e50:	cmp	r3, r1
   15e54:	addne	r3, r3, #3
   15e58:	moveq	r3, #1
   15e5c:	andne	r3, r3, #3
   15e60:	strbeq	r3, [r0, #28]
   15e64:	strne	r3, [r0, #20]
   15e68:	mov	r0, r2
   15e6c:	bx	lr
   15e70:	push	{r4, lr}
   15e74:	bl	11344 <abort@plt>
   15e78:	push	{r4, r5, r6, r8, r9, lr}
   15e7c:	mov	r4, r0
   15e80:	mov	r5, r1
   15e84:	add	r6, r2, #20
   15e88:	mov	r8, #10
   15e8c:	mov	r9, #0
   15e90:	mov	r3, #0
   15e94:	strb	r3, [r2, #20]
   15e98:	mov	r0, r4
   15e9c:	mov	r1, r5
   15ea0:	mov	r2, r8
   15ea4:	mov	r3, r9
   15ea8:	bl	19eb0 <__assert_fail@plt+0x8b24>
   15eac:	mov	r0, r4
   15eb0:	mov	r1, r5
   15eb4:	mov	r3, r9
   15eb8:	add	r2, r2, #48	; 0x30
   15ebc:	strb	r2, [r6, #-1]!
   15ec0:	mov	r2, r8
   15ec4:	bl	19eb0 <__assert_fail@plt+0x8b24>
   15ec8:	mov	r4, r0
   15ecc:	mov	r5, r1
   15ed0:	orrs	r3, r4, r5
   15ed4:	bne	15e98 <__assert_fail@plt+0x4b0c>
   15ed8:	mov	r0, r6
   15edc:	pop	{r4, r5, r6, r8, r9, pc}
   15ee0:	push	{r2, r3}
   15ee4:	push	{lr}		; (str lr, [sp, #-4]!)
   15ee8:	sub	sp, sp, #12
   15eec:	ldr	r2, [sp, #16]
   15ef0:	ands	r3, r2, #64	; 0x40
   15ef4:	addne	r3, sp, #20
   15ef8:	strne	r3, [sp, #4]
   15efc:	ldrne	r3, [sp, #20]
   15f00:	bl	11224 <openat64@plt>
   15f04:	bl	17e94 <__assert_fail@plt+0x6b08>
   15f08:	add	sp, sp, #12
   15f0c:	pop	{lr}		; (ldr lr, [sp], #4)
   15f10:	add	sp, sp, #8
   15f14:	bx	lr
   15f18:	orr	r2, r2, #540672	; 0x84000
   15f1c:	push	{r4, r5, r6, lr}
   15f20:	orr	r2, r2, #2304	; 0x900
   15f24:	mov	r6, r3
   15f28:	bl	15ee0 <__assert_fail@plt+0x4b54>
   15f2c:	subs	r5, r0, #0
   15f30:	blt	15f64 <__assert_fail@plt+0x4bd8>
   15f34:	bl	112e4 <fdopendir@plt>
   15f38:	subs	r4, r0, #0
   15f3c:	beq	15f4c <__assert_fail@plt+0x4bc0>
   15f40:	str	r5, [r6]
   15f44:	mov	r0, r4
   15f48:	pop	{r4, r5, r6, pc}
   15f4c:	bl	1123c <__errno_location@plt>
   15f50:	mov	r6, r0
   15f54:	mov	r0, r5
   15f58:	ldr	r5, [r6]
   15f5c:	bl	11350 <close@plt>
   15f60:	b	15f40 <__assert_fail@plt+0x4bb4>
   15f64:	mov	r4, #0
   15f68:	b	15f44 <__assert_fail@plt+0x4bb8>
   15f6c:	push	{r4, r5, r6, lr}
   15f70:	subs	r4, r0, #0
   15f74:	beq	15fe8 <__assert_fail@plt+0x4c5c>
   15f78:	mov	r1, #47	; 0x2f
   15f7c:	bl	112c0 <strrchr@plt>
   15f80:	subs	r5, r0, #0
   15f84:	beq	15fd4 <__assert_fail@plt+0x4c48>
   15f88:	add	r6, r5, #1
   15f8c:	sub	r3, r6, r4
   15f90:	cmp	r3, #6
   15f94:	ble	15fd4 <__assert_fail@plt+0x4c48>
   15f98:	mov	r2, #7
   15f9c:	ldr	r1, [pc, #96]	; 16004 <__assert_fail@plt+0x4c78>
   15fa0:	sub	r0, r5, #6
   15fa4:	bl	11338 <strncmp@plt>
   15fa8:	cmp	r0, #0
   15fac:	bne	15fd4 <__assert_fail@plt+0x4c48>
   15fb0:	mov	r2, #3
   15fb4:	ldr	r1, [pc, #76]	; 16008 <__assert_fail@plt+0x4c7c>
   15fb8:	mov	r0, r6
   15fbc:	bl	11338 <strncmp@plt>
   15fc0:	cmp	r0, #0
   15fc4:	movne	r4, r6
   15fc8:	ldreq	r3, [pc, #60]	; 1600c <__assert_fail@plt+0x4c80>
   15fcc:	addeq	r4, r5, #4
   15fd0:	streq	r4, [r3]
   15fd4:	ldr	r2, [pc, #52]	; 16010 <__assert_fail@plt+0x4c84>
   15fd8:	ldr	r3, [pc, #52]	; 16014 <__assert_fail@plt+0x4c88>
   15fdc:	str	r4, [r2]
   15fe0:	str	r4, [r3]
   15fe4:	pop	{r4, r5, r6, pc}
   15fe8:	ldr	r3, [pc, #40]	; 16018 <__assert_fail@plt+0x4c8c>
   15fec:	mov	r2, #55	; 0x37
   15ff0:	mov	r1, #1
   15ff4:	ldr	r3, [r3]
   15ff8:	ldr	r0, [pc, #28]	; 1601c <__assert_fail@plt+0x4c90>
   15ffc:	bl	1114c <fwrite@plt>
   16000:	bl	11344 <abort@plt>
   16004:	strdeq	fp, [r1], -r8
   16008:	andeq	fp, r1, r0, lsl #6
   1600c:	andeq	ip, r2, r8, lsl #3
   16010:	andeq	ip, r2, r8, asr #3
   16014:	andeq	ip, r2, ip, lsl #3
   16018:	muleq	r2, r8, r1
   1601c:	andeq	fp, r1, r0, asr #5
   16020:	push	{r4, r5, r6, lr}
   16024:	mov	r2, #48	; 0x30
   16028:	mov	r4, r1
   1602c:	mov	r1, #0
   16030:	mov	r5, r0
   16034:	bl	11254 <memset@plt>
   16038:	cmp	r4, #10
   1603c:	beq	1604c <__assert_fail@plt+0x4cc0>
   16040:	str	r4, [r5]
   16044:	mov	r0, r5
   16048:	pop	{r4, r5, r6, pc}
   1604c:	bl	11344 <abort@plt>
   16050:	push	{r4, r5, r6, lr}
   16054:	mov	r4, r0
   16058:	mov	r5, r1
   1605c:	bl	19890 <__assert_fail@plt+0x8504>
   16060:	ldrb	r3, [r0]
   16064:	bic	r3, r3, #32
   16068:	cmp	r3, #85	; 0x55
   1606c:	bne	160cc <__assert_fail@plt+0x4d40>
   16070:	ldrb	r3, [r0, #1]
   16074:	bic	r3, r3, #32
   16078:	cmp	r3, #84	; 0x54
   1607c:	bne	16108 <__assert_fail@plt+0x4d7c>
   16080:	ldrb	r3, [r0, #2]
   16084:	bic	r3, r3, #32
   16088:	cmp	r3, #70	; 0x46
   1608c:	bne	16108 <__assert_fail@plt+0x4d7c>
   16090:	ldrb	r3, [r0, #3]
   16094:	cmp	r3, #45	; 0x2d
   16098:	bne	16108 <__assert_fail@plt+0x4d7c>
   1609c:	ldrb	r3, [r0, #4]
   160a0:	cmp	r3, #56	; 0x38
   160a4:	bne	16108 <__assert_fail@plt+0x4d7c>
   160a8:	ldrb	r3, [r0, #5]
   160ac:	cmp	r3, #0
   160b0:	bne	16108 <__assert_fail@plt+0x4d7c>
   160b4:	ldrb	r2, [r4]
   160b8:	ldr	r3, [pc, #152]	; 16158 <__assert_fail@plt+0x4dcc>
   160bc:	ldr	r0, [pc, #152]	; 1615c <__assert_fail@plt+0x4dd0>
   160c0:	cmp	r2, #96	; 0x60
   160c4:	movne	r0, r3
   160c8:	pop	{r4, r5, r6, pc}
   160cc:	cmp	r3, #71	; 0x47
   160d0:	bne	16108 <__assert_fail@plt+0x4d7c>
   160d4:	ldrb	r3, [r0, #1]
   160d8:	bic	r3, r3, #32
   160dc:	cmp	r3, #66	; 0x42
   160e0:	bne	16108 <__assert_fail@plt+0x4d7c>
   160e4:	ldrb	r3, [r0, #2]
   160e8:	cmp	r3, #49	; 0x31
   160ec:	bne	16108 <__assert_fail@plt+0x4d7c>
   160f0:	ldrb	r3, [r0, #3]
   160f4:	cmp	r3, #56	; 0x38
   160f8:	bne	16108 <__assert_fail@plt+0x4d7c>
   160fc:	ldrb	r3, [r0, #4]
   16100:	cmp	r3, #48	; 0x30
   16104:	beq	1611c <__assert_fail@plt+0x4d90>
   16108:	ldr	r3, [pc, #80]	; 16160 <__assert_fail@plt+0x4dd4>
   1610c:	cmp	r5, #9
   16110:	ldr	r0, [pc, #76]	; 16164 <__assert_fail@plt+0x4dd8>
   16114:	movne	r0, r3
   16118:	pop	{r4, r5, r6, pc}
   1611c:	ldrb	r3, [r0, #5]
   16120:	cmp	r3, #51	; 0x33
   16124:	bne	16108 <__assert_fail@plt+0x4d7c>
   16128:	ldrb	r3, [r0, #6]
   1612c:	cmp	r3, #48	; 0x30
   16130:	bne	16108 <__assert_fail@plt+0x4d7c>
   16134:	ldrb	r3, [r0, #7]
   16138:	cmp	r3, #0
   1613c:	bne	16108 <__assert_fail@plt+0x4d7c>
   16140:	ldrb	r2, [r4]
   16144:	ldr	r3, [pc, #28]	; 16168 <__assert_fail@plt+0x4ddc>
   16148:	ldr	r0, [pc, #28]	; 1616c <__assert_fail@plt+0x4de0>
   1614c:	cmp	r2, #96	; 0x60
   16150:	movne	r0, r3
   16154:	pop	{r4, r5, r6, pc}
   16158:	andeq	fp, r1, ip, asr r3
   1615c:	andeq	fp, r1, r8, asr r3
   16160:	andeq	fp, r1, ip, ror #6
   16164:	andeq	fp, r1, r8, ror #6
   16168:	andeq	fp, r1, r4, ror #6
   1616c:	andeq	fp, r1, r0, ror #6
   16170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16174:	sub	sp, sp, #116	; 0x74
   16178:	mov	sl, r0
   1617c:	str	r3, [sp, #24]
   16180:	mov	r3, #1
   16184:	mov	r8, r1
   16188:	str	r2, [sp, #56]	; 0x38
   1618c:	str	r3, [sp, #36]	; 0x24
   16190:	bl	11164 <__ctype_get_mb_cur_max@plt>
   16194:	ldr	r3, [sp, #156]	; 0x9c
   16198:	mov	fp, r8
   1619c:	mov	r2, #0
   161a0:	lsr	r3, r3, #1
   161a4:	and	r3, r3, #1
   161a8:	str	r2, [sp, #68]	; 0x44
   161ac:	str	r3, [sp, #28]
   161b0:	str	r2, [sp, #40]	; 0x28
   161b4:	str	r2, [sp, #44]	; 0x2c
   161b8:	str	r2, [sp, #52]	; 0x34
   161bc:	str	r2, [sp, #64]	; 0x40
   161c0:	str	r2, [sp, #72]	; 0x48
   161c4:	str	sl, [sp, #32]
   161c8:	str	r0, [sp, #76]	; 0x4c
   161cc:	ldr	r3, [sp, #152]	; 0x98
   161d0:	cmp	r3, #10
   161d4:	ldrls	pc, [pc, r3, lsl #2]
   161d8:	b	17398 <__assert_fail@plt+0x600c>
   161dc:	andeq	r6, r1, r8, lsl #4
   161e0:	strdeq	r6, [r1], -r0
   161e4:	andeq	r6, r1, r4, lsl r5
   161e8:	andeq	r6, r1, r8, lsr r5
   161ec:	andeq	r6, r1, r4, ror #12
   161f0:	andeq	r6, r1, r8, lsr r6
   161f4:	andeq	r6, r1, r0, lsl r6
   161f8:	andeq	r6, r1, ip, asr #10
   161fc:	andeq	r6, r1, r4, ror #10
   16200:	andeq	r6, r1, r4, ror #10
   16204:	andeq	r6, r1, r4, ror #10
   16208:	mov	r3, #0
   1620c:	mov	r7, r3
   16210:	str	r3, [sp, #28]
   16214:	ldr	r3, [sp, #44]	; 0x2c
   16218:	mov	sl, #0
   1621c:	eor	r3, r3, #1
   16220:	str	r3, [sp, #60]	; 0x3c
   16224:	ldr	r3, [sp, #24]
   16228:	cmn	r3, #1
   1622c:	beq	16790 <__assert_fail@plt+0x5404>
   16230:	ldr	r3, [sp, #24]
   16234:	subs	r5, r3, sl
   16238:	movne	r5, #1
   1623c:	cmp	r5, #0
   16240:	beq	167a8 <__assert_fail@plt+0x541c>
   16244:	ldr	r3, [sp, #152]	; 0x98
   16248:	ldr	r8, [sp, #44]	; 0x2c
   1624c:	cmp	r3, #2
   16250:	moveq	r8, #0
   16254:	andne	r8, r8, #1
   16258:	ldr	r3, [sp, #52]	; 0x34
   1625c:	adds	r9, r3, #0
   16260:	movne	r9, #1
   16264:	ands	r6, r9, r8
   16268:	beq	16c10 <__assert_fail@plt+0x5884>
   1626c:	ldr	r2, [sp, #52]	; 0x34
   16270:	ldr	r1, [sp, #24]
   16274:	cmp	r2, #1
   16278:	mov	r3, r2
   1627c:	movls	r3, #0
   16280:	movhi	r3, #1
   16284:	cmn	r1, #1
   16288:	movne	r3, #0
   1628c:	cmp	r3, #0
   16290:	add	r4, sl, r2
   16294:	beq	162a4 <__assert_fail@plt+0x4f18>
   16298:	ldr	r0, [sp, #56]	; 0x38
   1629c:	bl	1120c <strlen@plt>
   162a0:	str	r0, [sp, #24]
   162a4:	ldr	r3, [sp, #24]
   162a8:	cmp	r3, r4
   162ac:	ldr	r3, [sp, #56]	; 0x38
   162b0:	add	r3, r3, sl
   162b4:	str	r3, [sp, #48]	; 0x30
   162b8:	bcc	16c1c <__assert_fail@plt+0x5890>
   162bc:	mov	r0, r3
   162c0:	ldr	r2, [sp, #52]	; 0x34
   162c4:	ldr	r1, [sp, #64]	; 0x40
   162c8:	bl	110e0 <memcmp@plt>
   162cc:	cmp	r0, #0
   162d0:	bne	16c1c <__assert_fail@plt+0x5890>
   162d4:	ldr	r3, [sp, #28]
   162d8:	cmp	r3, #0
   162dc:	bne	17498 <__assert_fail@plt+0x610c>
   162e0:	ldr	r3, [sp, #48]	; 0x30
   162e4:	ldrb	r4, [r3]
   162e8:	cmp	r4, #126	; 0x7e
   162ec:	ldrls	pc, [pc, r4, lsl #2]
   162f0:	b	16bb0 <__assert_fail@plt+0x5824>
   162f4:	ldrdeq	r6, [r1], -r4
   162f8:			; <UNDEFINED> instruction: 0x00016bb0
   162fc:			; <UNDEFINED> instruction: 0x00016bb0
   16300:			; <UNDEFINED> instruction: 0x00016bb0
   16304:			; <UNDEFINED> instruction: 0x00016bb0
   16308:			; <UNDEFINED> instruction: 0x00016bb0
   1630c:			; <UNDEFINED> instruction: 0x00016bb0
   16310:			; <UNDEFINED> instruction: 0x000169b8
   16314:	muleq	r1, ip, r9
   16318:	muleq	r1, r8, fp
   1631c:	strdeq	r6, [r1], -ip
   16320:	andeq	r6, r1, r0, ror #17
   16324:	andeq	r6, r1, r4, ror fp
   16328:	andeq	r6, r1, r0, asr fp
   1632c:			; <UNDEFINED> instruction: 0x00016bb0
   16330:			; <UNDEFINED> instruction: 0x00016bb0
   16334:			; <UNDEFINED> instruction: 0x00016bb0
   16338:			; <UNDEFINED> instruction: 0x00016bb0
   1633c:			; <UNDEFINED> instruction: 0x00016bb0
   16340:			; <UNDEFINED> instruction: 0x00016bb0
   16344:			; <UNDEFINED> instruction: 0x00016bb0
   16348:			; <UNDEFINED> instruction: 0x00016bb0
   1634c:			; <UNDEFINED> instruction: 0x00016bb0
   16350:			; <UNDEFINED> instruction: 0x00016bb0
   16354:			; <UNDEFINED> instruction: 0x00016bb0
   16358:			; <UNDEFINED> instruction: 0x00016bb0
   1635c:			; <UNDEFINED> instruction: 0x00016bb0
   16360:			; <UNDEFINED> instruction: 0x00016bb0
   16364:			; <UNDEFINED> instruction: 0x00016bb0
   16368:			; <UNDEFINED> instruction: 0x00016bb0
   1636c:			; <UNDEFINED> instruction: 0x00016bb0
   16370:			; <UNDEFINED> instruction: 0x00016bb0
   16374:	muleq	r1, r0, fp
   16378:	andeq	r6, r1, r4, asr #21
   1637c:	andeq	r6, r1, r4, asr #21
   16380:	ldrdeq	r6, [r1], -r4
   16384:	andeq	r6, r1, r4, asr #21
   16388:	andeq	r6, r1, ip, asr fp
   1638c:	andeq	r6, r1, r4, asr #21
   16390:	andeq	r6, r1, r0, lsr fp
   16394:	andeq	r6, r1, r4, asr #21
   16398:	andeq	r6, r1, r4, asr #21
   1639c:	andeq	r6, r1, r4, asr #21
   163a0:	andeq	r6, r1, ip, asr fp
   163a4:	andeq	r6, r1, ip, asr fp
   163a8:	andeq	r6, r1, ip, asr fp
   163ac:	andeq	r6, r1, ip, asr fp
   163b0:	andeq	r6, r1, ip, asr fp
   163b4:	andeq	r6, r1, ip, asr fp
   163b8:	andeq	r6, r1, ip, asr fp
   163bc:	andeq	r6, r1, ip, asr fp
   163c0:	andeq	r6, r1, ip, asr fp
   163c4:	andeq	r6, r1, ip, asr fp
   163c8:	andeq	r6, r1, ip, asr fp
   163cc:	andeq	r6, r1, ip, asr fp
   163d0:	andeq	r6, r1, ip, asr fp
   163d4:	andeq	r6, r1, ip, asr fp
   163d8:	andeq	r6, r1, ip, asr fp
   163dc:	andeq	r6, r1, ip, asr fp
   163e0:	andeq	r6, r1, r4, asr #21
   163e4:	andeq	r6, r1, r4, asr #21
   163e8:	andeq	r6, r1, r4, asr #21
   163ec:	andeq	r6, r1, r4, asr #21
   163f0:	andeq	r6, r1, r0, lsl #22
   163f4:			; <UNDEFINED> instruction: 0x00016bb0
   163f8:	andeq	r6, r1, ip, asr fp
   163fc:	andeq	r6, r1, ip, asr fp
   16400:	andeq	r6, r1, ip, asr fp
   16404:	andeq	r6, r1, ip, asr fp
   16408:	andeq	r6, r1, ip, asr fp
   1640c:	andeq	r6, r1, ip, asr fp
   16410:	andeq	r6, r1, ip, asr fp
   16414:	andeq	r6, r1, ip, asr fp
   16418:	andeq	r6, r1, ip, asr fp
   1641c:	andeq	r6, r1, ip, asr fp
   16420:	andeq	r6, r1, ip, asr fp
   16424:	andeq	r6, r1, ip, asr fp
   16428:	andeq	r6, r1, ip, asr fp
   1642c:	andeq	r6, r1, ip, asr fp
   16430:	andeq	r6, r1, ip, asr fp
   16434:	andeq	r6, r1, ip, asr fp
   16438:	andeq	r6, r1, ip, asr fp
   1643c:	andeq	r6, r1, ip, asr fp
   16440:	andeq	r6, r1, ip, asr fp
   16444:	andeq	r6, r1, ip, asr fp
   16448:	andeq	r6, r1, ip, asr fp
   1644c:	andeq	r6, r1, ip, asr fp
   16450:	andeq	r6, r1, ip, asr fp
   16454:	andeq	r6, r1, ip, asr fp
   16458:	andeq	r6, r1, ip, asr fp
   1645c:	andeq	r6, r1, ip, asr fp
   16460:	andeq	r6, r1, r4, asr #21
   16464:	andeq	r6, r1, r0, lsr #16
   16468:	andeq	r6, r1, ip, asr fp
   1646c:	andeq	r6, r1, r4, asr #21
   16470:	andeq	r6, r1, ip, asr fp
   16474:	andeq	r6, r1, r4, asr #21
   16478:	andeq	r6, r1, ip, asr fp
   1647c:	andeq	r6, r1, ip, asr fp
   16480:	andeq	r6, r1, ip, asr fp
   16484:	andeq	r6, r1, ip, asr fp
   16488:	andeq	r6, r1, ip, asr fp
   1648c:	andeq	r6, r1, ip, asr fp
   16490:	andeq	r6, r1, ip, asr fp
   16494:	andeq	r6, r1, ip, asr fp
   16498:	andeq	r6, r1, ip, asr fp
   1649c:	andeq	r6, r1, ip, asr fp
   164a0:	andeq	r6, r1, ip, asr fp
   164a4:	andeq	r6, r1, ip, asr fp
   164a8:	andeq	r6, r1, ip, asr fp
   164ac:	andeq	r6, r1, ip, asr fp
   164b0:	andeq	r6, r1, ip, asr fp
   164b4:	andeq	r6, r1, ip, asr fp
   164b8:	andeq	r6, r1, ip, asr fp
   164bc:	andeq	r6, r1, ip, asr fp
   164c0:	andeq	r6, r1, ip, asr fp
   164c4:	andeq	r6, r1, ip, asr fp
   164c8:	andeq	r6, r1, ip, asr fp
   164cc:	andeq	r6, r1, ip, asr fp
   164d0:	andeq	r6, r1, ip, asr fp
   164d4:	andeq	r6, r1, ip, asr fp
   164d8:	andeq	r6, r1, ip, asr fp
   164dc:	andeq	r6, r1, ip, asr fp
   164e0:			; <UNDEFINED> instruction: 0x000166b4
   164e4:	andeq	r6, r1, r4, asr #21
   164e8:			; <UNDEFINED> instruction: 0x000166b4
   164ec:	ldrdeq	r6, [r1], -r4
   164f0:	mov	r3, #1
   164f4:	str	r3, [sp, #28]
   164f8:	str	r3, [sp, #52]	; 0x34
   164fc:	ldr	r3, [pc, #4000]	; 174a4 <__assert_fail@plt+0x6118>
   16500:	mov	r7, #0
   16504:	str	r3, [sp, #64]	; 0x40
   16508:	mov	r3, #2
   1650c:	str	r3, [sp, #152]	; 0x98
   16510:	b	16214 <__assert_fail@plt+0x4e88>
   16514:	ldr	r3, [sp, #28]
   16518:	cmp	r3, #0
   1651c:	beq	16678 <__assert_fail@plt+0x52ec>
   16520:	mov	r3, #1
   16524:	str	r3, [sp, #52]	; 0x34
   16528:	ldr	r3, [pc, #3956]	; 174a4 <__assert_fail@plt+0x6118>
   1652c:	mov	r7, #0
   16530:	str	r3, [sp, #64]	; 0x40
   16534:	b	16214 <__assert_fail@plt+0x4e88>
   16538:	mov	r3, #1
   1653c:	str	r3, [sp, #44]	; 0x2c
   16540:	str	r3, [sp, #52]	; 0x34
   16544:	str	r3, [sp, #28]
   16548:	b	164fc <__assert_fail@plt+0x5170>
   1654c:	mov	r3, #0
   16550:	str	r3, [sp, #28]
   16554:	mov	r3, #1
   16558:	str	r3, [sp, #44]	; 0x2c
   1655c:	mov	r7, #0
   16560:	b	16214 <__assert_fail@plt+0x4e88>
   16564:	ldr	r3, [sp, #152]	; 0x98
   16568:	cmp	r3, #10
   1656c:	beq	165b0 <__assert_fail@plt+0x5224>
   16570:	mov	r2, #5
   16574:	ldr	r1, [pc, #3884]	; 174a8 <__assert_fail@plt+0x611c>
   16578:	mov	r0, #0
   1657c:	bl	11104 <dcgettext@plt>
   16580:	ldr	r2, [pc, #3872]	; 174a8 <__assert_fail@plt+0x611c>
   16584:	cmp	r0, r2
   16588:	str	r0, [sp, #164]	; 0xa4
   1658c:	beq	17594 <__assert_fail@plt+0x6208>
   16590:	mov	r2, #5
   16594:	ldr	r1, [pc, #3848]	; 174a4 <__assert_fail@plt+0x6118>
   16598:	mov	r0, #0
   1659c:	bl	11104 <dcgettext@plt>
   165a0:	ldr	r2, [pc, #3836]	; 174a4 <__assert_fail@plt+0x6118>
   165a4:	cmp	r0, r2
   165a8:	str	r0, [sp, #168]	; 0xa8
   165ac:	beq	17584 <__assert_fail@plt+0x61f8>
   165b0:	ldr	r7, [sp, #28]
   165b4:	cmp	r7, #0
   165b8:	movne	r7, #0
   165bc:	bne	165f0 <__assert_fail@plt+0x5264>
   165c0:	ldr	r3, [sp, #164]	; 0xa4
   165c4:	ldrb	r3, [r3]
   165c8:	cmp	r3, #0
   165cc:	beq	175a4 <__assert_fail@plt+0x6218>
   165d0:	ldr	r2, [sp, #164]	; 0xa4
   165d4:	ldr	r1, [sp, #32]
   165d8:	cmp	fp, r7
   165dc:	strbhi	r3, [r1, r7]
   165e0:	ldrb	r3, [r2, #1]!
   165e4:	add	r7, r7, #1
   165e8:	cmp	r3, #0
   165ec:	bne	165d8 <__assert_fail@plt+0x524c>
   165f0:	ldr	r0, [sp, #168]	; 0xa8
   165f4:	bl	1120c <strlen@plt>
   165f8:	ldr	r3, [sp, #168]	; 0xa8
   165fc:	str	r3, [sp, #64]	; 0x40
   16600:	mov	r3, #1
   16604:	str	r3, [sp, #44]	; 0x2c
   16608:	str	r0, [sp, #52]	; 0x34
   1660c:	b	16214 <__assert_fail@plt+0x4e88>
   16610:	mov	r3, #1
   16614:	str	r3, [sp, #44]	; 0x2c
   16618:	str	r3, [sp, #52]	; 0x34
   1661c:	str	r3, [sp, #28]
   16620:	ldr	r3, [pc, #3716]	; 174ac <__assert_fail@plt+0x6120>
   16624:	mov	r7, #0
   16628:	str	r3, [sp, #64]	; 0x40
   1662c:	mov	r3, #5
   16630:	str	r3, [sp, #152]	; 0x98
   16634:	b	16214 <__assert_fail@plt+0x4e88>
   16638:	ldr	r3, [sp, #28]
   1663c:	cmp	r3, #0
   16640:	beq	17340 <__assert_fail@plt+0x5fb4>
   16644:	ldr	r3, [sp, #28]
   16648:	mov	r7, #0
   1664c:	str	r3, [sp, #44]	; 0x2c
   16650:	mov	r3, #1
   16654:	str	r3, [sp, #52]	; 0x34
   16658:	ldr	r3, [pc, #3660]	; 174ac <__assert_fail@plt+0x6120>
   1665c:	str	r3, [sp, #64]	; 0x40
   16660:	b	16214 <__assert_fail@plt+0x4e88>
   16664:	ldr	r3, [sp, #28]
   16668:	cmp	r3, #0
   1666c:	mov	r3, #1
   16670:	streq	r3, [sp, #44]	; 0x2c
   16674:	bne	164f8 <__assert_fail@plt+0x516c>
   16678:	cmp	fp, #0
   1667c:	beq	17370 <__assert_fail@plt+0x5fe4>
   16680:	ldr	r3, [sp, #32]
   16684:	mov	r2, #39	; 0x27
   16688:	mov	r7, #1
   1668c:	strb	r2, [r3]
   16690:	mov	r3, #0
   16694:	str	r3, [sp, #28]
   16698:	mov	r3, #1
   1669c:	str	r3, [sp, #52]	; 0x34
   166a0:	ldr	r3, [pc, #3580]	; 174a4 <__assert_fail@plt+0x6118>
   166a4:	str	r3, [sp, #64]	; 0x40
   166a8:	mov	r3, #2
   166ac:	str	r3, [sp, #152]	; 0x98
   166b0:	b	16214 <__assert_fail@plt+0x4e88>
   166b4:	ldr	r3, [sp, #24]
   166b8:	cmn	r3, #1
   166bc:	beq	172d4 <__assert_fail@plt+0x5f48>
   166c0:	ldr	r3, [sp, #24]
   166c4:	subs	r3, r3, #1
   166c8:	movne	r3, #1
   166cc:	cmp	r3, #0
   166d0:	bne	166dc <__assert_fail@plt+0x5350>
   166d4:	cmp	sl, #0
   166d8:	beq	16ac8 <__assert_fail@plt+0x573c>
   166dc:	ldr	r3, [sp, #152]	; 0x98
   166e0:	mov	r5, #0
   166e4:	sub	r2, r3, #2
   166e8:	mov	r8, r5
   166ec:	clz	r2, r2
   166f0:	lsr	r2, r2, #5
   166f4:	ldr	r3, [sp, #60]	; 0x3c
   166f8:	ldr	r1, [sp, #28]
   166fc:	orr	r3, r2, r3
   16700:	eor	r3, r3, #1
   16704:	orr	r3, r1, r3
   16708:	tst	r3, #255	; 0xff
   1670c:	bne	16e38 <__assert_fail@plt+0x5aac>
   16710:	cmp	r6, #0
   16714:	bne	16864 <__assert_fail@plt+0x54d8>
   16718:	ldr	r3, [sp, #40]	; 0x28
   1671c:	eor	r8, r8, #1
   16720:	and	r8, r8, r3
   16724:	add	sl, sl, #1
   16728:	uxtb	r6, r8
   1672c:	cmp	r6, #0
   16730:	beq	16764 <__assert_fail@plt+0x53d8>
   16734:	cmp	fp, r7
   16738:	movhi	r2, #39	; 0x27
   1673c:	ldrhi	r3, [sp, #32]
   16740:	strbhi	r2, [r3, r7]
   16744:	add	r3, r7, #1
   16748:	cmp	fp, r3
   1674c:	movhi	r1, #39	; 0x27
   16750:	ldrhi	r2, [sp, #32]
   16754:	add	r7, r7, #2
   16758:	strbhi	r1, [r2, r3]
   1675c:	mov	r3, #0
   16760:	str	r3, [sp, #40]	; 0x28
   16764:	cmp	r7, fp
   16768:	ldrcc	r3, [sp, #32]
   1676c:	strbcc	r4, [r3, r7]
   16770:	ldr	r3, [sp, #36]	; 0x24
   16774:	cmp	r5, #0
   16778:	moveq	r3, #0
   1677c:	str	r3, [sp, #36]	; 0x24
   16780:	ldr	r3, [sp, #24]
   16784:	add	r7, r7, #1
   16788:	cmn	r3, #1
   1678c:	bne	16230 <__assert_fail@plt+0x4ea4>
   16790:	ldr	r3, [sp, #56]	; 0x38
   16794:	ldrb	r5, [r3, sl]
   16798:	adds	r5, r5, #0
   1679c:	movne	r5, #1
   167a0:	cmp	r5, #0
   167a4:	bne	16244 <__assert_fail@plt+0x4eb8>
   167a8:	ldr	r3, [sp, #152]	; 0x98
   167ac:	ldr	r1, [sp, #28]
   167b0:	sub	r3, r3, #2
   167b4:	clz	r3, r3
   167b8:	lsr	r3, r3, #5
   167bc:	and	r9, r1, r3
   167c0:	cmp	r7, #0
   167c4:	movne	r2, #0
   167c8:	andeq	r2, r9, #1
   167cc:	cmp	r2, #0
   167d0:	bne	171ac <__assert_fail@plt+0x5e20>
   167d4:	eor	r2, r1, #1
   167d8:	ands	r3, r3, r2
   167dc:	beq	17668 <__assert_fail@plt+0x62dc>
   167e0:	ldr	r2, [sp, #68]	; 0x44
   167e4:	cmp	r2, #0
   167e8:	beq	17654 <__assert_fail@plt+0x62c8>
   167ec:	ldr	r3, [sp, #36]	; 0x24
   167f0:	cmp	r3, #0
   167f4:	bne	1760c <__assert_fail@plt+0x6280>
   167f8:	ldr	r2, [sp, #72]	; 0x48
   167fc:	clz	r3, fp
   16800:	cmp	r2, #0
   16804:	lsr	r3, r3, #5
   16808:	moveq	r3, #0
   1680c:	cmp	r3, #0
   16810:	beq	175ac <__assert_fail@plt+0x6220>
   16814:	str	r3, [sp, #68]	; 0x44
   16818:	ldr	fp, [sp, #72]	; 0x48
   1681c:	b	161cc <__assert_fail@plt+0x4e40>
   16820:	ldr	r3, [sp, #152]	; 0x98
   16824:	cmp	r3, #2
   16828:	beq	16e7c <__assert_fail@plt+0x5af0>
   1682c:	ldr	r3, [sp, #44]	; 0x2c
   16830:	ldr	r2, [sp, #28]
   16834:	and	r2, r3, r2
   16838:	ands	r2, r9, r2
   1683c:	bne	16e88 <__assert_fail@plt+0x5afc>
   16840:	mov	r4, #92	; 0x5c
   16844:	mov	r3, r4
   16848:	ldr	r1, [sp, #44]	; 0x2c
   1684c:	cmp	r1, #0
   16850:	moveq	r5, #0
   16854:	moveq	r8, r1
   16858:	beq	166f4 <__assert_fail@plt+0x5368>
   1685c:	mov	r4, r3
   16860:	mov	r5, #0
   16864:	ldr	r3, [sp, #28]
   16868:	cmp	r3, #0
   1686c:	bne	16e70 <__assert_fail@plt+0x5ae4>
   16870:	ldr	r3, [sp, #40]	; 0x28
   16874:	eor	r9, r3, #1
   16878:	and	r9, r9, r2
   1687c:	ands	r9, r9, #255	; 0xff
   16880:	beq	168c4 <__assert_fail@plt+0x5538>
   16884:	cmp	fp, r7
   16888:	movhi	r2, #39	; 0x27
   1688c:	ldrhi	r3, [sp, #32]
   16890:	str	r9, [sp, #40]	; 0x28
   16894:	strbhi	r2, [r3, r7]
   16898:	add	r3, r7, #1
   1689c:	cmp	fp, r3
   168a0:	movhi	r1, #36	; 0x24
   168a4:	ldrhi	r2, [sp, #32]
   168a8:	strbhi	r1, [r2, r3]
   168ac:	add	r3, r7, #2
   168b0:	cmp	fp, r3
   168b4:	add	r7, r7, #3
   168b8:	ldrhi	r2, [sp, #32]
   168bc:	movhi	r1, #39	; 0x27
   168c0:	strbhi	r1, [r2, r3]
   168c4:	cmp	fp, r7
   168c8:	movhi	r2, #92	; 0x5c
   168cc:	ldrhi	r3, [sp, #32]
   168d0:	add	sl, sl, #1
   168d4:	strbhi	r2, [r3, r7]
   168d8:	add	r7, r7, #1
   168dc:	b	16764 <__assert_fail@plt+0x53d8>
   168e0:	ldr	r3, [sp, #152]	; 0x98
   168e4:	mov	r4, #11
   168e8:	sub	r2, r3, #2
   168ec:	mov	r3, #118	; 0x76
   168f0:	clz	r2, r2
   168f4:	lsr	r2, r2, #5
   168f8:	b	16848 <__assert_fail@plt+0x54bc>
   168fc:	mov	r4, #10
   16900:	mov	r3, #110	; 0x6e
   16904:	ldr	r2, [sp, #152]	; 0x98
   16908:	ldr	r1, [sp, #28]
   1690c:	sub	r2, r2, #2
   16910:	clz	r2, r2
   16914:	lsr	r2, r2, #5
   16918:	ands	r1, r1, r2
   1691c:	beq	16848 <__assert_fail@plt+0x54bc>
   16920:	ldr	sl, [sp, #32]
   16924:	mov	r8, fp
   16928:	mov	r2, r1
   1692c:	mov	r3, #2
   16930:	str	r3, [sp, #152]	; 0x98
   16934:	ldr	r9, [sp, #44]	; 0x2c
   16938:	ldr	r3, [sp, #152]	; 0x98
   1693c:	and	r9, r9, r2
   16940:	tst	r9, #255	; 0xff
   16944:	movne	r3, #4
   16948:	str	r3, [sp, #152]	; 0x98
   1694c:	ldr	r3, [sp, #156]	; 0x9c
   16950:	mov	ip, #0
   16954:	bic	r3, r3, #2
   16958:	str	r3, [sp, #4]
   1695c:	ldr	r3, [sp, #168]	; 0xa8
   16960:	ldr	r2, [sp, #56]	; 0x38
   16964:	str	r3, [sp, #16]
   16968:	ldr	r3, [sp, #164]	; 0xa4
   1696c:	mov	r1, r8
   16970:	str	r3, [sp, #12]
   16974:	ldr	r3, [sp, #152]	; 0x98
   16978:	mov	r0, sl
   1697c:	str	r3, [sp]
   16980:	str	ip, [sp, #8]
   16984:	ldr	r3, [sp, #24]
   16988:	bl	16170 <__assert_fail@plt+0x4de4>
   1698c:	mov	fp, r0
   16990:	mov	r0, fp
   16994:	add	sp, sp, #116	; 0x74
   16998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1699c:	ldr	r3, [sp, #152]	; 0x98
   169a0:	mov	r4, #8
   169a4:	sub	r2, r3, #2
   169a8:	mov	r3, #98	; 0x62
   169ac:	clz	r2, r2
   169b0:	lsr	r2, r2, #5
   169b4:	b	16848 <__assert_fail@plt+0x54bc>
   169b8:	ldr	r3, [sp, #152]	; 0x98
   169bc:	mov	r4, #7
   169c0:	sub	r2, r3, #2
   169c4:	mov	r3, #97	; 0x61
   169c8:	clz	r2, r2
   169cc:	lsr	r2, r2, #5
   169d0:	b	16848 <__assert_fail@plt+0x54bc>
   169d4:	ldr	r3, [sp, #44]	; 0x2c
   169d8:	cmp	r3, #0
   169dc:	beq	171c0 <__assert_fail@plt+0x5e34>
   169e0:	ldr	r3, [sp, #28]
   169e4:	cmp	r3, #0
   169e8:	bne	17498 <__assert_fail@plt+0x610c>
   169ec:	ldr	r3, [sp, #152]	; 0x98
   169f0:	sub	r2, r3, #2
   169f4:	ldr	r3, [sp, #40]	; 0x28
   169f8:	clz	r2, r2
   169fc:	eor	r3, r3, #1
   16a00:	lsr	r2, r2, #5
   16a04:	ands	r3, r2, r3
   16a08:	moveq	r1, r7
   16a0c:	beq	16a50 <__assert_fail@plt+0x56c4>
   16a10:	cmp	fp, r7
   16a14:	movhi	r0, #39	; 0x27
   16a18:	ldrhi	r1, [sp, #32]
   16a1c:	str	r3, [sp, #40]	; 0x28
   16a20:	strbhi	r0, [r1, r7]
   16a24:	add	r1, r7, #1
   16a28:	cmp	fp, r1
   16a2c:	movhi	ip, #36	; 0x24
   16a30:	ldrhi	r0, [sp, #32]
   16a34:	strbhi	ip, [r0, r1]
   16a38:	add	r1, r7, #2
   16a3c:	cmp	fp, r1
   16a40:	movhi	ip, #39	; 0x27
   16a44:	ldrhi	r0, [sp, #32]
   16a48:	strbhi	ip, [r0, r1]
   16a4c:	add	r1, r7, #3
   16a50:	cmp	fp, r1
   16a54:	movhi	r0, #92	; 0x5c
   16a58:	ldrhi	r3, [sp, #32]
   16a5c:	add	r7, r1, #1
   16a60:	strbhi	r0, [r3, r1]
   16a64:	cmp	r8, #0
   16a68:	beq	173ac <__assert_fail@plt+0x6020>
   16a6c:	ldr	r0, [sp, #24]
   16a70:	add	r3, sl, #1
   16a74:	cmp	r3, r0
   16a78:	bcs	172e8 <__assert_fail@plt+0x5f5c>
   16a7c:	ldr	r0, [sp, #56]	; 0x38
   16a80:	ldrb	r3, [r0, r3]
   16a84:	sub	r3, r3, #48	; 0x30
   16a88:	cmp	r3, #9
   16a8c:	bhi	172e8 <__assert_fail@plt+0x5f5c>
   16a90:	cmp	fp, r7
   16a94:	movhi	r3, #48	; 0x30
   16a98:	ldrhi	r0, [sp, #32]
   16a9c:	ldr	r5, [sp, #28]
   16aa0:	mov	r4, #48	; 0x30
   16aa4:	strbhi	r3, [r0, r7]
   16aa8:	add	r3, r1, #2
   16aac:	cmp	fp, r3
   16ab0:	movhi	r0, #48	; 0x30
   16ab4:	ldrhi	ip, [sp, #32]
   16ab8:	add	r7, r1, #3
   16abc:	strbhi	r0, [ip, r3]
   16ac0:	b	166f4 <__assert_fail@plt+0x5368>
   16ac4:	mov	r5, #0
   16ac8:	ldr	r3, [sp, #152]	; 0x98
   16acc:	sub	r2, r3, #2
   16ad0:	ldr	r3, [sp, #28]
   16ad4:	clz	r2, r2
   16ad8:	lsr	r2, r2, #5
   16adc:	ands	r8, r3, r2
   16ae0:	beq	166f4 <__assert_fail@plt+0x5368>
   16ae4:	mov	r3, r8
   16ae8:	mov	r2, r3
   16aec:	mov	r3, #2
   16af0:	ldr	sl, [sp, #32]
   16af4:	mov	r8, fp
   16af8:	str	r3, [sp, #152]	; 0x98
   16afc:	b	16934 <__assert_fail@plt+0x55a8>
   16b00:	ldr	r3, [sp, #152]	; 0x98
   16b04:	cmp	r3, #2
   16b08:	beq	1722c <__assert_fail@plt+0x5ea0>
   16b0c:	cmp	r3, #5
   16b10:	beq	171ec <__assert_fail@plt+0x5e60>
   16b14:	mov	r5, #0
   16b18:	sub	r2, r3, #2
   16b1c:	mov	r8, r5
   16b20:	clz	r2, r2
   16b24:	mov	r4, #63	; 0x3f
   16b28:	lsr	r2, r2, #5
   16b2c:	b	166f4 <__assert_fail@plt+0x5368>
   16b30:	ldr	r3, [sp, #152]	; 0x98
   16b34:	cmp	r3, #2
   16b38:	beq	1724c <__assert_fail@plt+0x5ec0>
   16b3c:	mov	r2, #0
   16b40:	str	r5, [sp, #68]	; 0x44
   16b44:	mov	r8, r2
   16b48:	mov	r4, #39	; 0x27
   16b4c:	b	166f4 <__assert_fail@plt+0x5368>
   16b50:	mov	r4, #13
   16b54:	mov	r3, #114	; 0x72
   16b58:	b	16904 <__assert_fail@plt+0x5578>
   16b5c:	ldr	r3, [sp, #152]	; 0x98
   16b60:	mov	r8, #0
   16b64:	sub	r2, r3, #2
   16b68:	clz	r2, r2
   16b6c:	lsr	r2, r2, #5
   16b70:	b	166f4 <__assert_fail@plt+0x5368>
   16b74:	ldr	r3, [sp, #152]	; 0x98
   16b78:	mov	r4, #12
   16b7c:	sub	r2, r3, #2
   16b80:	mov	r3, #102	; 0x66
   16b84:	clz	r2, r2
   16b88:	lsr	r2, r2, #5
   16b8c:	b	16848 <__assert_fail@plt+0x54bc>
   16b90:	mov	r5, r6
   16b94:	b	16ac8 <__assert_fail@plt+0x573c>
   16b98:	ldr	r3, [sp, #152]	; 0x98
   16b9c:	sub	r2, r3, #2
   16ba0:	mov	r3, #116	; 0x74
   16ba4:	clz	r2, r2
   16ba8:	lsr	r2, r2, #5
   16bac:	b	16848 <__assert_fail@plt+0x54bc>
   16bb0:	ldr	r8, [sp, #76]	; 0x4c
   16bb4:	cmp	r8, #1
   16bb8:	bne	17068 <__assert_fail@plt+0x5cdc>
   16bbc:	bl	111e8 <__ctype_b_loc@plt>
   16bc0:	sxth	r3, r4
   16bc4:	mov	ip, r8
   16bc8:	lsl	r3, r3, #1
   16bcc:	ldr	r2, [r0]
   16bd0:	ldrh	r3, [r2, r3]
   16bd4:	and	r3, r3, #16384	; 0x4000
   16bd8:	cmp	r3, #0
   16bdc:	movne	r5, #1
   16be0:	moveq	r5, #0
   16be4:	moveq	r3, #1
   16be8:	movne	r3, #0
   16bec:	ldr	r2, [sp, #44]	; 0x2c
   16bf0:	and	r3, r3, r2
   16bf4:	ands	r8, r3, #255	; 0xff
   16bf8:	bne	16efc <__assert_fail@plt+0x5b70>
   16bfc:	ldr	r3, [sp, #152]	; 0x98
   16c00:	sub	r2, r3, #2
   16c04:	clz	r2, r2
   16c08:	lsr	r2, r2, #5
   16c0c:	b	166f4 <__assert_fail@plt+0x5368>
   16c10:	ldr	r3, [sp, #56]	; 0x38
   16c14:	add	r3, r3, sl
   16c18:	str	r3, [sp, #48]	; 0x30
   16c1c:	ldr	r3, [sp, #48]	; 0x30
   16c20:	mov	r6, #0
   16c24:	ldrb	r4, [r3]
   16c28:	cmp	r4, #126	; 0x7e
   16c2c:	ldrls	pc, [pc, r4, lsl #2]
   16c30:	b	16bb0 <__assert_fail@plt+0x5824>
   16c34:	ldrdeq	r6, [r1], -r4
   16c38:			; <UNDEFINED> instruction: 0x00016bb0
   16c3c:			; <UNDEFINED> instruction: 0x00016bb0
   16c40:			; <UNDEFINED> instruction: 0x00016bb0
   16c44:			; <UNDEFINED> instruction: 0x00016bb0
   16c48:			; <UNDEFINED> instruction: 0x00016bb0
   16c4c:			; <UNDEFINED> instruction: 0x00016bb0
   16c50:			; <UNDEFINED> instruction: 0x000169b8
   16c54:	muleq	r1, ip, r9
   16c58:	andeq	r6, r1, r0, lsr lr
   16c5c:	strdeq	r6, [r1], -ip
   16c60:	andeq	r6, r1, r0, ror #17
   16c64:	andeq	r6, r1, r4, ror fp
   16c68:	andeq	r6, r1, r0, asr fp
   16c6c:			; <UNDEFINED> instruction: 0x00016bb0
   16c70:			; <UNDEFINED> instruction: 0x00016bb0
   16c74:			; <UNDEFINED> instruction: 0x00016bb0
   16c78:			; <UNDEFINED> instruction: 0x00016bb0
   16c7c:			; <UNDEFINED> instruction: 0x00016bb0
   16c80:			; <UNDEFINED> instruction: 0x00016bb0
   16c84:			; <UNDEFINED> instruction: 0x00016bb0
   16c88:			; <UNDEFINED> instruction: 0x00016bb0
   16c8c:			; <UNDEFINED> instruction: 0x00016bb0
   16c90:			; <UNDEFINED> instruction: 0x00016bb0
   16c94:			; <UNDEFINED> instruction: 0x00016bb0
   16c98:			; <UNDEFINED> instruction: 0x00016bb0
   16c9c:			; <UNDEFINED> instruction: 0x00016bb0
   16ca0:			; <UNDEFINED> instruction: 0x00016bb0
   16ca4:			; <UNDEFINED> instruction: 0x00016bb0
   16ca8:			; <UNDEFINED> instruction: 0x00016bb0
   16cac:			; <UNDEFINED> instruction: 0x00016bb0
   16cb0:			; <UNDEFINED> instruction: 0x00016bb0
   16cb4:	andeq	r6, r1, r8, asr #21
   16cb8:	andeq	r6, r1, r4, asr #21
   16cbc:	andeq	r6, r1, r4, asr #21
   16cc0:	ldrdeq	r6, [r1], -r4
   16cc4:	andeq	r6, r1, r4, asr #21
   16cc8:	andeq	r6, r1, ip, asr fp
   16ccc:	andeq	r6, r1, r4, asr #21
   16cd0:	andeq	r6, r1, r0, lsr fp
   16cd4:	andeq	r6, r1, r4, asr #21
   16cd8:	andeq	r6, r1, r4, asr #21
   16cdc:	andeq	r6, r1, r4, asr #21
   16ce0:	andeq	r6, r1, ip, asr fp
   16ce4:	andeq	r6, r1, ip, asr fp
   16ce8:	andeq	r6, r1, ip, asr fp
   16cec:	andeq	r6, r1, ip, asr fp
   16cf0:	andeq	r6, r1, ip, asr fp
   16cf4:	andeq	r6, r1, ip, asr fp
   16cf8:	andeq	r6, r1, ip, asr fp
   16cfc:	andeq	r6, r1, ip, asr fp
   16d00:	andeq	r6, r1, ip, asr fp
   16d04:	andeq	r6, r1, ip, asr fp
   16d08:	andeq	r6, r1, ip, asr fp
   16d0c:	andeq	r6, r1, ip, asr fp
   16d10:	andeq	r6, r1, ip, asr fp
   16d14:	andeq	r6, r1, ip, asr fp
   16d18:	andeq	r6, r1, ip, asr fp
   16d1c:	andeq	r6, r1, ip, asr fp
   16d20:	andeq	r6, r1, r4, asr #21
   16d24:	andeq	r6, r1, r4, asr #21
   16d28:	andeq	r6, r1, r4, asr #21
   16d2c:	andeq	r6, r1, r4, asr #21
   16d30:	andeq	r6, r1, r0, lsl #22
   16d34:			; <UNDEFINED> instruction: 0x00016bb0
   16d38:	andeq	r6, r1, ip, asr fp
   16d3c:	andeq	r6, r1, ip, asr fp
   16d40:	andeq	r6, r1, ip, asr fp
   16d44:	andeq	r6, r1, ip, asr fp
   16d48:	andeq	r6, r1, ip, asr fp
   16d4c:	andeq	r6, r1, ip, asr fp
   16d50:	andeq	r6, r1, ip, asr fp
   16d54:	andeq	r6, r1, ip, asr fp
   16d58:	andeq	r6, r1, ip, asr fp
   16d5c:	andeq	r6, r1, ip, asr fp
   16d60:	andeq	r6, r1, ip, asr fp
   16d64:	andeq	r6, r1, ip, asr fp
   16d68:	andeq	r6, r1, ip, asr fp
   16d6c:	andeq	r6, r1, ip, asr fp
   16d70:	andeq	r6, r1, ip, asr fp
   16d74:	andeq	r6, r1, ip, asr fp
   16d78:	andeq	r6, r1, ip, asr fp
   16d7c:	andeq	r6, r1, ip, asr fp
   16d80:	andeq	r6, r1, ip, asr fp
   16d84:	andeq	r6, r1, ip, asr fp
   16d88:	andeq	r6, r1, ip, asr fp
   16d8c:	andeq	r6, r1, ip, asr fp
   16d90:	andeq	r6, r1, ip, asr fp
   16d94:	andeq	r6, r1, ip, asr fp
   16d98:	andeq	r6, r1, ip, asr fp
   16d9c:	andeq	r6, r1, ip, asr fp
   16da0:	andeq	r6, r1, r4, asr #21
   16da4:	andeq	r6, r1, r0, lsr #16
   16da8:	andeq	r6, r1, ip, asr fp
   16dac:	andeq	r6, r1, r4, asr #21
   16db0:	andeq	r6, r1, ip, asr fp
   16db4:	andeq	r6, r1, r4, asr #21
   16db8:	andeq	r6, r1, ip, asr fp
   16dbc:	andeq	r6, r1, ip, asr fp
   16dc0:	andeq	r6, r1, ip, asr fp
   16dc4:	andeq	r6, r1, ip, asr fp
   16dc8:	andeq	r6, r1, ip, asr fp
   16dcc:	andeq	r6, r1, ip, asr fp
   16dd0:	andeq	r6, r1, ip, asr fp
   16dd4:	andeq	r6, r1, ip, asr fp
   16dd8:	andeq	r6, r1, ip, asr fp
   16ddc:	andeq	r6, r1, ip, asr fp
   16de0:	andeq	r6, r1, ip, asr fp
   16de4:	andeq	r6, r1, ip, asr fp
   16de8:	andeq	r6, r1, ip, asr fp
   16dec:	andeq	r6, r1, ip, asr fp
   16df0:	andeq	r6, r1, ip, asr fp
   16df4:	andeq	r6, r1, ip, asr fp
   16df8:	andeq	r6, r1, ip, asr fp
   16dfc:	andeq	r6, r1, ip, asr fp
   16e00:	andeq	r6, r1, ip, asr fp
   16e04:	andeq	r6, r1, ip, asr fp
   16e08:	andeq	r6, r1, ip, asr fp
   16e0c:	andeq	r6, r1, ip, asr fp
   16e10:	andeq	r6, r1, ip, asr fp
   16e14:	andeq	r6, r1, ip, asr fp
   16e18:	andeq	r6, r1, ip, asr fp
   16e1c:	andeq	r6, r1, ip, asr fp
   16e20:			; <UNDEFINED> instruction: 0x000166b4
   16e24:	andeq	r6, r1, r4, asr #21
   16e28:			; <UNDEFINED> instruction: 0x000166b4
   16e2c:	ldrdeq	r6, [r1], -r4
   16e30:	mov	r3, #116	; 0x74
   16e34:	b	16904 <__assert_fail@plt+0x5578>
   16e38:	ldr	r3, [sp, #160]	; 0xa0
   16e3c:	cmp	r3, #0
   16e40:	beq	16710 <__assert_fail@plt+0x5384>
   16e44:	lsr	r3, r4, #5
   16e48:	ldr	r0, [sp, #160]	; 0xa0
   16e4c:	uxtb	r3, r3
   16e50:	and	r1, r4, #31
   16e54:	ldr	r0, [r0, r3, lsl #2]
   16e58:	lsr	r3, r0, r1
   16e5c:	tst	r3, #1
   16e60:	beq	16710 <__assert_fail@plt+0x5384>
   16e64:	ldr	r3, [sp, #28]
   16e68:	cmp	r3, #0
   16e6c:	beq	16870 <__assert_fail@plt+0x54e4>
   16e70:	ldr	sl, [sp, #32]
   16e74:	mov	r8, fp
   16e78:	b	16934 <__assert_fail@plt+0x55a8>
   16e7c:	ldr	r3, [sp, #28]
   16e80:	cmp	r3, #0
   16e84:	bne	173d8 <__assert_fail@plt+0x604c>
   16e88:	add	sl, sl, #1
   16e8c:	ldr	r6, [sp, #40]	; 0x28
   16e90:	mov	r5, #0
   16e94:	mov	r4, #92	; 0x5c
   16e98:	b	1672c <__assert_fail@plt+0x53a0>
   16e9c:	cmp	r9, r8
   16ea0:	bne	17110 <__assert_fail@plt+0x5d84>
   16ea4:	ldr	r0, [sp, #100]	; 0x64
   16ea8:	bl	11134 <iswprint@plt>
   16eac:	add	r5, r5, r4
   16eb0:	cmp	r0, #0
   16eb4:	add	r0, sp, #104	; 0x68
   16eb8:	moveq	r6, #0
   16ebc:	bl	110d4 <mbsinit@plt>
   16ec0:	cmp	r0, #0
   16ec4:	beq	170a4 <__assert_fail@plt+0x5d18>
   16ec8:	mov	r2, r6
   16ecc:	mov	ip, r5
   16ed0:	eor	r5, r2, #1
   16ed4:	ldr	r4, [sp, #80]	; 0x50
   16ed8:	ldr	r6, [sp, #84]	; 0x54
   16edc:	ldr	r7, [sp, #88]	; 0x58
   16ee0:	uxtb	r5, r5
   16ee4:	cmp	ip, #1
   16ee8:	bls	173e8 <__assert_fail@plt+0x605c>
   16eec:	ldr	r3, [sp, #44]	; 0x2c
   16ef0:	and	r8, r3, r5
   16ef4:	mov	r5, r2
   16ef8:	uxtb	r8, r8
   16efc:	add	r2, sl, ip
   16f00:	ldr	r0, [sp, #48]	; 0x30
   16f04:	mov	r1, #0
   16f08:	str	r5, [sp, #48]	; 0x30
   16f0c:	ldr	r9, [sp, #28]
   16f10:	ldr	ip, [sp, #40]	; 0x28
   16f14:	ldr	r3, [sp, #32]
   16f18:	ldr	r5, [sp, #152]	; 0x98
   16f1c:	b	16fd8 <__assert_fail@plt+0x5c4c>
   16f20:	cmp	r9, #0
   16f24:	bne	172fc <__assert_fail@plt+0x5f70>
   16f28:	eor	r1, ip, #1
   16f2c:	cmp	r5, #2
   16f30:	movne	r1, #0
   16f34:	andeq	r1, r1, #1
   16f38:	cmp	r1, #0
   16f3c:	beq	16f74 <__assert_fail@plt+0x5be8>
   16f40:	cmp	fp, r7
   16f44:	movhi	ip, #39	; 0x27
   16f48:	strbhi	ip, [r3, r7]
   16f4c:	add	ip, r7, #1
   16f50:	cmp	fp, ip
   16f54:	movhi	lr, #36	; 0x24
   16f58:	strbhi	lr, [r3, ip]
   16f5c:	add	ip, r7, #2
   16f60:	cmp	fp, ip
   16f64:	movhi	lr, #39	; 0x27
   16f68:	strbhi	lr, [r3, ip]
   16f6c:	add	r7, r7, #3
   16f70:	mov	ip, r1
   16f74:	cmp	fp, r7
   16f78:	movhi	r1, #92	; 0x5c
   16f7c:	strbhi	r1, [r3, r7]
   16f80:	add	r1, r7, #1
   16f84:	cmp	fp, r1
   16f88:	lsrhi	lr, r4, #6
   16f8c:	addhi	lr, lr, #48	; 0x30
   16f90:	strbhi	lr, [r3, r1]
   16f94:	add	lr, r7, #2
   16f98:	cmp	fp, lr
   16f9c:	lsrhi	r1, r4, #3
   16fa0:	andhi	r1, r1, #7
   16fa4:	addhi	r1, r1, #48	; 0x30
   16fa8:	add	sl, sl, #1
   16fac:	strbhi	r1, [r3, lr]
   16fb0:	and	r4, r4, #7
   16fb4:	cmp	r2, sl
   16fb8:	add	r4, r4, #48	; 0x30
   16fbc:	add	r7, r7, #3
   16fc0:	bls	17320 <__assert_fail@plt+0x5f94>
   16fc4:	mov	r1, r8
   16fc8:	cmp	fp, r7
   16fcc:	strbhi	r4, [r3, r7]
   16fd0:	ldrb	r4, [r0, #1]!
   16fd4:	add	r7, r7, #1
   16fd8:	cmp	r8, #0
   16fdc:	bne	16f20 <__assert_fail@plt+0x5b94>
   16fe0:	cmp	r6, #0
   16fe4:	bne	17034 <__assert_fail@plt+0x5ca8>
   16fe8:	eor	r6, r1, #1
   16fec:	and	r6, r6, ip
   16ff0:	add	sl, sl, #1
   16ff4:	cmp	r2, sl
   16ff8:	uxtb	r6, r6
   16ffc:	bls	1705c <__assert_fail@plt+0x5cd0>
   17000:	cmp	r6, #0
   17004:	beq	16fc8 <__assert_fail@plt+0x5c3c>
   17008:	cmp	fp, r7
   1700c:	movhi	ip, #39	; 0x27
   17010:	strbhi	ip, [r3, r7]
   17014:	add	ip, r7, #1
   17018:	cmp	fp, ip
   1701c:	movhi	lr, #39	; 0x27
   17020:	strbhi	lr, [r3, ip]
   17024:	add	r7, r7, #2
   17028:	mov	r6, r8
   1702c:	mov	ip, r8
   17030:	b	16fc8 <__assert_fail@plt+0x5c3c>
   17034:	cmp	fp, r7
   17038:	eor	r6, r1, #1
   1703c:	movhi	lr, #92	; 0x5c
   17040:	and	r6, r6, ip
   17044:	add	sl, sl, #1
   17048:	strbhi	lr, [r3, r7]
   1704c:	cmp	r2, sl
   17050:	add	r7, r7, #1
   17054:	uxtb	r6, r6
   17058:	bhi	17000 <__assert_fail@plt+0x5c74>
   1705c:	str	ip, [sp, #40]	; 0x28
   17060:	ldr	r5, [sp, #48]	; 0x30
   17064:	b	1672c <__assert_fail@plt+0x53a0>
   17068:	ldr	r3, [sp, #24]
   1706c:	cmn	r3, #1
   17070:	mov	r3, #0
   17074:	str	r3, [sp, #104]	; 0x68
   17078:	str	r3, [sp, #108]	; 0x6c
   1707c:	beq	1739c <__assert_fail@plt+0x6010>
   17080:	mov	r2, r5
   17084:	mov	r3, #0
   17088:	str	r7, [sp, #88]	; 0x58
   1708c:	ldr	r7, [sp, #152]	; 0x98
   17090:	str	r5, [sp, #92]	; 0x5c
   17094:	str	r6, [sp, #84]	; 0x54
   17098:	mov	r5, r3
   1709c:	mov	r6, r2
   170a0:	str	r4, [sp, #80]	; 0x50
   170a4:	ldr	r3, [sp, #56]	; 0x38
   170a8:	add	r9, sl, r5
   170ac:	add	r8, r3, r9
   170b0:	ldr	r3, [sp, #24]
   170b4:	mov	r1, r8
   170b8:	sub	r2, r3, r9
   170bc:	add	r0, sp, #100	; 0x64
   170c0:	add	r3, sp, #104	; 0x68
   170c4:	bl	198c4 <__assert_fail@plt+0x8538>
   170c8:	subs	r4, r0, #0
   170cc:	beq	17474 <__assert_fail@plt+0x60e8>
   170d0:	cmn	r4, #1
   170d4:	beq	17454 <__assert_fail@plt+0x60c8>
   170d8:	cmn	r4, #2
   170dc:	beq	173f4 <__assert_fail@plt+0x6068>
   170e0:	ldr	r2, [sp, #28]
   170e4:	cmp	r7, #2
   170e8:	movne	r2, #0
   170ec:	andeq	r2, r2, #1
   170f0:	cmp	r2, #0
   170f4:	beq	16ea4 <__assert_fail@plt+0x5b18>
   170f8:	cmp	r4, #1
   170fc:	beq	16ea4 <__assert_fail@plt+0x5b18>
   17100:	sub	r3, r4, #1
   17104:	add	r9, r3, r9
   17108:	ldr	r3, [sp, #56]	; 0x38
   1710c:	add	r9, r3, r9
   17110:	ldrb	r3, [r8, #1]!
   17114:	sub	r3, r3, #91	; 0x5b
   17118:	cmp	r3, #33	; 0x21
   1711c:	ldrls	pc, [pc, r3, lsl #2]
   17120:	b	16e9c <__assert_fail@plt+0x5b10>
   17124:	andeq	r7, r1, ip, lsr #3
   17128:	andeq	r7, r1, ip, lsr #3
   1712c:	muleq	r1, ip, lr
   17130:	andeq	r7, r1, ip, lsr #3
   17134:	muleq	r1, ip, lr
   17138:	andeq	r7, r1, ip, lsr #3
   1713c:	muleq	r1, ip, lr
   17140:	muleq	r1, ip, lr
   17144:	muleq	r1, ip, lr
   17148:	muleq	r1, ip, lr
   1714c:	muleq	r1, ip, lr
   17150:	muleq	r1, ip, lr
   17154:	muleq	r1, ip, lr
   17158:	muleq	r1, ip, lr
   1715c:	muleq	r1, ip, lr
   17160:	muleq	r1, ip, lr
   17164:	muleq	r1, ip, lr
   17168:	muleq	r1, ip, lr
   1716c:	muleq	r1, ip, lr
   17170:	muleq	r1, ip, lr
   17174:	muleq	r1, ip, lr
   17178:	muleq	r1, ip, lr
   1717c:	muleq	r1, ip, lr
   17180:	muleq	r1, ip, lr
   17184:	muleq	r1, ip, lr
   17188:	muleq	r1, ip, lr
   1718c:	muleq	r1, ip, lr
   17190:	muleq	r1, ip, lr
   17194:	muleq	r1, ip, lr
   17198:	muleq	r1, ip, lr
   1719c:	muleq	r1, ip, lr
   171a0:	muleq	r1, ip, lr
   171a4:	muleq	r1, ip, lr
   171a8:	andeq	r7, r1, ip, lsr #3
   171ac:	mov	r3, #2
   171b0:	ldr	sl, [sp, #32]
   171b4:	mov	r8, fp
   171b8:	str	r3, [sp, #152]	; 0x98
   171bc:	b	16934 <__assert_fail@plt+0x55a8>
   171c0:	ldr	r3, [sp, #156]	; 0x9c
   171c4:	tst	r3, #1
   171c8:	bne	172f4 <__assert_fail@plt+0x5f68>
   171cc:	ldr	r3, [sp, #152]	; 0x98
   171d0:	ldr	r4, [sp, #44]	; 0x2c
   171d4:	sub	r2, r3, #2
   171d8:	mov	r5, #0
   171dc:	clz	r2, r2
   171e0:	mov	r8, r4
   171e4:	lsr	r2, r2, #5
   171e8:	b	166f4 <__assert_fail@plt+0x5368>
   171ec:	ldr	r3, [sp, #156]	; 0x9c
   171f0:	ands	r9, r3, #4
   171f4:	beq	1732c <__assert_fail@plt+0x5fa0>
   171f8:	ldr	r2, [sp, #24]
   171fc:	add	r3, sl, #2
   17200:	cmp	r3, r2
   17204:	bcs	17218 <__assert_fail@plt+0x5e8c>
   17208:	ldr	r2, [sp, #48]	; 0x30
   1720c:	ldrb	r4, [r2, #1]
   17210:	cmp	r4, #63	; 0x3f
   17214:	beq	174b4 <__assert_fail@plt+0x6128>
   17218:	mov	r2, #0
   1721c:	mov	r8, r2
   17220:	mov	r5, r2
   17224:	mov	r4, #63	; 0x3f
   17228:	b	166f4 <__assert_fail@plt+0x5368>
   1722c:	ldr	r3, [sp, #28]
   17230:	cmp	r3, #0
   17234:	bne	17558 <__assert_fail@plt+0x61cc>
   17238:	mov	r2, r5
   1723c:	mov	r8, r3
   17240:	mov	r5, #0
   17244:	mov	r4, #63	; 0x3f
   17248:	b	166f4 <__assert_fail@plt+0x5368>
   1724c:	ldr	r3, [sp, #28]
   17250:	cmp	r3, #0
   17254:	bne	17558 <__assert_fail@plt+0x61cc>
   17258:	ldr	r2, [sp, #72]	; 0x48
   1725c:	adds	r3, fp, #0
   17260:	movne	r3, #1
   17264:	cmp	r2, #0
   17268:	movne	r3, #0
   1726c:	cmp	r3, #0
   17270:	strne	fp, [sp, #72]	; 0x48
   17274:	movne	fp, #0
   17278:	bne	172b4 <__assert_fail@plt+0x5f28>
   1727c:	cmp	fp, r7
   17280:	movhi	r2, #39	; 0x27
   17284:	ldrhi	r3, [sp, #32]
   17288:	strbhi	r2, [r3, r7]
   1728c:	add	r3, r7, #1
   17290:	cmp	fp, r3
   17294:	movhi	r1, #92	; 0x5c
   17298:	ldrhi	r2, [sp, #32]
   1729c:	strbhi	r1, [r2, r3]
   172a0:	add	r3, r7, #2
   172a4:	cmp	fp, r3
   172a8:	movhi	r1, #39	; 0x27
   172ac:	ldrhi	r2, [sp, #32]
   172b0:	strbhi	r1, [r2, r3]
   172b4:	ldr	r3, [sp, #28]
   172b8:	add	r7, r7, #3
   172bc:	mov	r2, r5
   172c0:	mov	r8, r3
   172c4:	str	r5, [sp, #68]	; 0x44
   172c8:	str	r3, [sp, #40]	; 0x28
   172cc:	mov	r4, #39	; 0x27
   172d0:	b	166f4 <__assert_fail@plt+0x5368>
   172d4:	ldr	r3, [sp, #56]	; 0x38
   172d8:	ldrb	r3, [r3, #1]
   172dc:	adds	r3, r3, #0
   172e0:	movne	r3, #1
   172e4:	b	166cc <__assert_fail@plt+0x5340>
   172e8:	ldr	r5, [sp, #28]
   172ec:	mov	r4, #48	; 0x30
   172f0:	b	166f4 <__assert_fail@plt+0x5368>
   172f4:	add	sl, sl, #1
   172f8:	b	16224 <__assert_fail@plt+0x4e98>
   172fc:	mov	sl, r3
   17300:	ldr	r3, [sp, #28]
   17304:	mov	r8, fp
   17308:	str	r3, [sp, #44]	; 0x2c
   1730c:	ldr	r3, [sp, #152]	; 0x98
   17310:	sub	r2, r3, #2
   17314:	clz	r2, r2
   17318:	lsr	r2, r2, #5
   1731c:	b	16934 <__assert_fail@plt+0x55a8>
   17320:	str	ip, [sp, #40]	; 0x28
   17324:	ldr	r5, [sp, #48]	; 0x30
   17328:	b	16764 <__assert_fail@plt+0x53d8>
   1732c:	mov	r2, r9
   17330:	mov	r8, r9
   17334:	mov	r5, #0
   17338:	mov	r4, #63	; 0x3f
   1733c:	b	166f4 <__assert_fail@plt+0x5368>
   17340:	cmp	fp, #0
   17344:	beq	173bc <__assert_fail@plt+0x6030>
   17348:	ldr	r1, [sp, #32]
   1734c:	mov	r3, #34	; 0x22
   17350:	mov	r2, #1
   17354:	strb	r3, [r1]
   17358:	ldr	r3, [pc, #332]	; 174ac <__assert_fail@plt+0x6120>
   1735c:	str	r2, [sp, #52]	; 0x34
   17360:	mov	r7, r2
   17364:	str	r2, [sp, #44]	; 0x2c
   17368:	str	r3, [sp, #64]	; 0x40
   1736c:	b	16214 <__assert_fail@plt+0x4e88>
   17370:	ldr	r3, [pc, #300]	; 174a4 <__assert_fail@plt+0x6118>
   17374:	str	r3, [sp, #64]	; 0x40
   17378:	mov	r3, #0
   1737c:	str	r3, [sp, #28]
   17380:	mov	r3, #1
   17384:	str	r3, [sp, #52]	; 0x34
   17388:	mov	r7, r3
   1738c:	mov	r3, #2
   17390:	str	r3, [sp, #152]	; 0x98
   17394:	b	16214 <__assert_fail@plt+0x4e88>
   17398:	bl	11344 <abort@plt>
   1739c:	ldr	r0, [sp, #56]	; 0x38
   173a0:	bl	1120c <strlen@plt>
   173a4:	str	r0, [sp, #24]
   173a8:	b	17080 <__assert_fail@plt+0x5cf4>
   173ac:	mov	r5, r8
   173b0:	mov	r4, #48	; 0x30
   173b4:	ldr	r8, [sp, #44]	; 0x2c
   173b8:	b	166f4 <__assert_fail@plt+0x5368>
   173bc:	mov	r3, #1
   173c0:	str	r3, [sp, #52]	; 0x34
   173c4:	mov	r7, r3
   173c8:	str	r3, [sp, #44]	; 0x2c
   173cc:	ldr	r3, [pc, #216]	; 174ac <__assert_fail@plt+0x6120>
   173d0:	str	r3, [sp, #64]	; 0x40
   173d4:	b	16214 <__assert_fail@plt+0x4e88>
   173d8:	ldr	sl, [sp, #32]
   173dc:	mov	r8, fp
   173e0:	mov	r2, r3
   173e4:	b	16934 <__assert_fail@plt+0x55a8>
   173e8:	mov	r3, r5
   173ec:	mov	r5, r2
   173f0:	b	16bec <__assert_fail@plt+0x5860>
   173f4:	ldr	r1, [sp, #24]
   173f8:	mov	r2, r5
   173fc:	cmp	r1, r9
   17400:	mov	ip, r5
   17404:	ldr	r4, [sp, #80]	; 0x50
   17408:	ldr	r5, [sp, #92]	; 0x5c
   1740c:	ldr	r6, [sp, #84]	; 0x54
   17410:	ldr	r7, [sp, #88]	; 0x58
   17414:	bls	17448 <__assert_fail@plt+0x60bc>
   17418:	ldrb	r3, [r8]
   1741c:	cmp	r3, #0
   17420:	bne	17434 <__assert_fail@plt+0x60a8>
   17424:	b	1744c <__assert_fail@plt+0x60c0>
   17428:	ldrb	r3, [r8, #1]!
   1742c:	cmp	r3, #0
   17430:	beq	1754c <__assert_fail@plt+0x61c0>
   17434:	add	r2, r2, #1
   17438:	add	r3, sl, r2
   1743c:	cmp	r1, r3
   17440:	bhi	17428 <__assert_fail@plt+0x609c>
   17444:	mov	ip, r2
   17448:	mov	r3, #0
   1744c:	mov	r2, r3
   17450:	b	16ee4 <__assert_fail@plt+0x5b58>
   17454:	mov	r3, #0
   17458:	mov	ip, r5
   1745c:	ldr	r4, [sp, #80]	; 0x50
   17460:	ldr	r5, [sp, #92]	; 0x5c
   17464:	ldr	r6, [sp, #84]	; 0x54
   17468:	ldr	r7, [sp, #88]	; 0x58
   1746c:	mov	r2, r3
   17470:	b	16ee4 <__assert_fail@plt+0x5b58>
   17474:	mov	r3, r6
   17478:	mov	ip, r5
   1747c:	eor	r5, r3, #1
   17480:	mov	r2, r6
   17484:	ldr	r4, [sp, #80]	; 0x50
   17488:	ldr	r6, [sp, #84]	; 0x54
   1748c:	ldr	r7, [sp, #88]	; 0x58
   17490:	uxtb	r5, r5
   17494:	b	16ee4 <__assert_fail@plt+0x5b58>
   17498:	ldr	sl, [sp, #32]
   1749c:	mov	r8, fp
   174a0:	b	17308 <__assert_fail@plt+0x5f7c>
   174a4:	andeq	fp, r1, ip, ror #6
   174a8:	andeq	fp, r1, r0, ror r3
   174ac:	andeq	fp, r1, r8, ror #6
   174b0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   174b4:	ldr	r2, [sp, #56]	; 0x38
   174b8:	ldrb	r1, [r2, r3]
   174bc:	sub	r2, r1, #33	; 0x21
   174c0:	uxtb	r2, r2
   174c4:	cmp	r2, #29
   174c8:	bhi	17568 <__assert_fail@plt+0x61dc>
   174cc:	ldr	r0, [pc, #-36]	; 174b0 <__assert_fail@plt+0x6124>
   174d0:	mov	ip, #1
   174d4:	ands	r2, r0, ip, lsl r2
   174d8:	beq	17578 <__assert_fail@plt+0x61ec>
   174dc:	ldr	r2, [sp, #28]
   174e0:	cmp	r2, #0
   174e4:	bne	17678 <__assert_fail@plt+0x62ec>
   174e8:	cmp	fp, r7
   174ec:	ldr	r8, [sp, #28]
   174f0:	ldrhi	r2, [sp, #32]
   174f4:	mov	sl, r3
   174f8:	mov	r5, r8
   174fc:	strbhi	r4, [r2, r7]
   17500:	add	r2, r7, #1
   17504:	cmp	fp, r2
   17508:	movhi	r0, #34	; 0x22
   1750c:	ldrhi	ip, [sp, #32]
   17510:	mov	r4, r1
   17514:	strbhi	r0, [ip, r2]
   17518:	add	r2, r7, #2
   1751c:	cmp	fp, r2
   17520:	movhi	r0, #34	; 0x22
   17524:	ldrhi	ip, [sp, #32]
   17528:	strbhi	r0, [ip, r2]
   1752c:	add	r2, r7, #3
   17530:	cmp	fp, r2
   17534:	movhi	r0, #63	; 0x3f
   17538:	ldrhi	ip, [sp, #32]
   1753c:	add	r7, r7, #4
   17540:	strbhi	r0, [ip, r2]
   17544:	mov	r2, r8
   17548:	b	166f4 <__assert_fail@plt+0x5368>
   1754c:	mov	ip, r2
   17550:	mov	r2, r3
   17554:	b	16ee4 <__assert_fail@plt+0x5b58>
   17558:	ldr	sl, [sp, #32]
   1755c:	mov	r8, fp
   17560:	ldr	r2, [sp, #28]
   17564:	b	16934 <__assert_fail@plt+0x55a8>
   17568:	mov	r2, #0
   1756c:	mov	r8, r2
   17570:	mov	r5, r2
   17574:	b	166f4 <__assert_fail@plt+0x5368>
   17578:	mov	r8, r2
   1757c:	mov	r5, #0
   17580:	b	166f4 <__assert_fail@plt+0x5368>
   17584:	ldr	r1, [sp, #152]	; 0x98
   17588:	bl	16050 <__assert_fail@plt+0x4cc4>
   1758c:	str	r0, [sp, #168]	; 0xa8
   17590:	b	165b0 <__assert_fail@plt+0x5224>
   17594:	ldr	r1, [sp, #152]	; 0x98
   17598:	bl	16050 <__assert_fail@plt+0x4cc4>
   1759c:	str	r0, [sp, #164]	; 0xa4
   175a0:	b	16590 <__assert_fail@plt+0x5204>
   175a4:	ldr	r7, [sp, #28]
   175a8:	b	165f0 <__assert_fail@plt+0x5264>
   175ac:	ldr	sl, [sp, #32]
   175b0:	ldr	r2, [sp, #68]	; 0x44
   175b4:	mov	r8, fp
   175b8:	mov	fp, r7
   175bc:	ldr	r3, [sp, #64]	; 0x40
   175c0:	cmp	r3, #0
   175c4:	moveq	r2, #0
   175c8:	andne	r2, r2, #1
   175cc:	cmp	r2, #0
   175d0:	beq	175fc <__assert_fail@plt+0x6270>
   175d4:	mov	r2, r3
   175d8:	ldrb	r3, [r3]
   175dc:	cmp	r3, #0
   175e0:	beq	175fc <__assert_fail@plt+0x6270>
   175e4:	cmp	r8, fp
   175e8:	strbhi	r3, [sl, fp]
   175ec:	ldrb	r3, [r2, #1]!
   175f0:	add	fp, fp, #1
   175f4:	cmp	r3, #0
   175f8:	bne	175e4 <__assert_fail@plt+0x6258>
   175fc:	cmp	r8, fp
   17600:	movhi	r3, #0
   17604:	strbhi	r3, [sl, fp]
   17608:	b	16990 <__assert_fail@plt+0x5604>
   1760c:	ldr	r3, [sp, #168]	; 0xa8
   17610:	ldr	sl, [sp, #32]
   17614:	str	r3, [sp, #16]
   17618:	ldr	r3, [sp, #164]	; 0xa4
   1761c:	mov	ip, #5
   17620:	str	r3, [sp, #12]
   17624:	ldr	r3, [sp, #160]	; 0xa0
   17628:	ldr	r2, [sp, #56]	; 0x38
   1762c:	str	r3, [sp, #8]
   17630:	ldr	r3, [sp, #156]	; 0x9c
   17634:	ldr	r1, [sp, #72]	; 0x48
   17638:	str	r3, [sp, #4]
   1763c:	mov	r0, sl
   17640:	ldr	r3, [sp, #24]
   17644:	str	ip, [sp]
   17648:	bl	16170 <__assert_fail@plt+0x4de4>
   1764c:	mov	fp, r0
   17650:	b	16990 <__assert_fail@plt+0x5604>
   17654:	mov	r8, fp
   17658:	ldr	sl, [sp, #32]
   1765c:	mov	fp, r7
   17660:	mov	r2, r3
   17664:	b	175bc <__assert_fail@plt+0x6230>
   17668:	mov	r8, fp
   1766c:	ldr	sl, [sp, #32]
   17670:	mov	fp, r7
   17674:	b	175bc <__assert_fail@plt+0x6230>
   17678:	ldr	sl, [sp, #32]
   1767c:	mov	r8, fp
   17680:	b	1694c <__assert_fail@plt+0x55c0>
   17684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17688:	sub	sp, sp, #52	; 0x34
   1768c:	mov	r4, r0
   17690:	mov	r5, r3
   17694:	mov	sl, r1
   17698:	mov	fp, r2
   1769c:	bl	1123c <__errno_location@plt>
   176a0:	ldr	r7, [pc, #412]	; 17844 <__assert_fail@plt+0x64b8>
   176a4:	cmn	r4, #-2147483647	; 0x80000001
   176a8:	ldr	r6, [r7]
   176ac:	mov	r8, r0
   176b0:	movne	r0, #0
   176b4:	moveq	r0, #1
   176b8:	ldr	r3, [r8]
   176bc:	orrs	r0, r0, r4, lsr #31
   176c0:	str	r3, [sp, #24]
   176c4:	bne	17840 <__assert_fail@plt+0x64b4>
   176c8:	ldr	r2, [r7, #4]
   176cc:	cmp	r4, r2
   176d0:	blt	17730 <__assert_fail@plt+0x63a4>
   176d4:	add	r9, r7, #8
   176d8:	cmp	r6, r9
   176dc:	str	r2, [sp, #44]	; 0x2c
   176e0:	beq	17810 <__assert_fail@plt+0x6484>
   176e4:	mov	r3, #8
   176e8:	sub	r2, r4, r2
   176ec:	mov	r0, r6
   176f0:	str	r3, [sp]
   176f4:	add	r2, r2, #1
   176f8:	mvn	r3, #-2147483648	; 0x80000000
   176fc:	add	r1, sp, #44	; 0x2c
   17700:	bl	1892c <__assert_fail@plt+0x75a0>
   17704:	mov	r6, r0
   17708:	str	r0, [r7]
   1770c:	ldr	r0, [r7, #4]
   17710:	ldr	r2, [sp, #44]	; 0x2c
   17714:	mov	r1, #0
   17718:	sub	r2, r2, r0
   1771c:	add	r0, r6, r0, lsl #3
   17720:	lsl	r2, r2, #3
   17724:	bl	11254 <memset@plt>
   17728:	ldr	r3, [sp, #44]	; 0x2c
   1772c:	str	r3, [r7, #4]
   17730:	add	r3, r6, r4, lsl #3
   17734:	ldr	r1, [r5, #4]
   17738:	ldr	r7, [r3, #4]
   1773c:	ldr	r9, [r6, r4, lsl #3]
   17740:	ldr	r2, [r5, #40]	; 0x28
   17744:	ldr	ip, [r5, #44]	; 0x2c
   17748:	add	r0, r5, #8
   1774c:	str	r3, [sp, #28]
   17750:	ldr	r3, [r5]
   17754:	orr	r1, r1, #1
   17758:	mov	lr, r0
   1775c:	str	r1, [sp, #32]
   17760:	str	r0, [sp, #36]	; 0x24
   17764:	str	r1, [sp, #4]
   17768:	str	r2, [sp, #12]
   1776c:	str	r3, [sp]
   17770:	mov	r0, r7
   17774:	mov	r1, r9
   17778:	str	ip, [sp, #16]
   1777c:	str	lr, [sp, #8]
   17780:	mov	r3, fp
   17784:	mov	r2, sl
   17788:	bl	16170 <__assert_fail@plt+0x4de4>
   1778c:	cmp	r9, r0
   17790:	bhi	177fc <__assert_fail@plt+0x6470>
   17794:	ldr	r3, [pc, #172]	; 17848 <__assert_fail@plt+0x64bc>
   17798:	add	r9, r0, #1
   1779c:	cmp	r7, r3
   177a0:	str	r9, [r6, r4, lsl #3]
   177a4:	beq	177b0 <__assert_fail@plt+0x6424>
   177a8:	mov	r0, r7
   177ac:	bl	12c84 <__assert_fail@plt+0x18f8>
   177b0:	mov	r0, r9
   177b4:	bl	187c8 <__assert_fail@plt+0x743c>
   177b8:	ldr	lr, [sp, #28]
   177bc:	ldr	ip, [r5, #44]	; 0x2c
   177c0:	ldr	r4, [r5, #40]	; 0x28
   177c4:	mov	r3, fp
   177c8:	mov	r2, sl
   177cc:	mov	r1, r9
   177d0:	str	r0, [lr, #4]
   177d4:	ldr	lr, [r5]
   177d8:	ldr	r5, [sp, #36]	; 0x24
   177dc:	str	ip, [sp, #16]
   177e0:	str	r5, [sp, #8]
   177e4:	ldr	r5, [sp, #32]
   177e8:	str	r4, [sp, #12]
   177ec:	str	r5, [sp, #4]
   177f0:	str	lr, [sp]
   177f4:	mov	r7, r0
   177f8:	bl	16170 <__assert_fail@plt+0x4de4>
   177fc:	ldr	r3, [sp, #24]
   17800:	mov	r0, r7
   17804:	str	r3, [r8]
   17808:	add	sp, sp, #52	; 0x34
   1780c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17810:	mov	r3, #8
   17814:	sub	r2, r4, r2
   17818:	str	r3, [sp]
   1781c:	add	r1, sp, #44	; 0x2c
   17820:	add	r2, r2, #1
   17824:	mvn	r3, #-2147483648	; 0x80000000
   17828:	bl	1892c <__assert_fail@plt+0x75a0>
   1782c:	mov	r6, r0
   17830:	ldm	r9, {r0, r1}
   17834:	str	r6, [r7]
   17838:	stm	r6, {r0, r1}
   1783c:	b	1770c <__assert_fail@plt+0x6380>
   17840:	bl	11344 <abort@plt>
   17844:	andeq	ip, r2, r4, asr #2
   17848:	andeq	ip, r2, ip, asr #3
   1784c:	push	{r4, r5, r6, lr}
   17850:	mov	r5, r0
   17854:	bl	1123c <__errno_location@plt>
   17858:	cmp	r5, #0
   1785c:	mov	r1, #48	; 0x30
   17860:	mov	r4, r0
   17864:	ldr	r0, [pc, #16]	; 1787c <__assert_fail@plt+0x64f0>
   17868:	ldr	r6, [r4]
   1786c:	movne	r0, r5
   17870:	bl	18c28 <__assert_fail@plt+0x789c>
   17874:	str	r6, [r4]
   17878:	pop	{r4, r5, r6, pc}
   1787c:	andeq	ip, r2, ip, asr #5
   17880:	ldr	r3, [pc, #12]	; 17894 <__assert_fail@plt+0x6508>
   17884:	cmp	r0, #0
   17888:	moveq	r0, r3
   1788c:	ldr	r0, [r0]
   17890:	bx	lr
   17894:	andeq	ip, r2, ip, asr #5
   17898:	ldr	r3, [pc, #12]	; 178ac <__assert_fail@plt+0x6520>
   1789c:	cmp	r0, #0
   178a0:	moveq	r0, r3
   178a4:	str	r1, [r0]
   178a8:	bx	lr
   178ac:	andeq	ip, r2, ip, asr #5
   178b0:	ldr	r3, [pc, #52]	; 178ec <__assert_fail@plt+0x6560>
   178b4:	cmp	r0, #0
   178b8:	moveq	r0, r3
   178bc:	add	r3, r0, #8
   178c0:	push	{lr}		; (str lr, [sp, #-4]!)
   178c4:	lsr	lr, r1, #5
   178c8:	and	r1, r1, #31
   178cc:	ldr	ip, [r3, lr, lsl #2]
   178d0:	lsr	r0, ip, r1
   178d4:	eor	r2, r2, r0
   178d8:	and	r2, r2, #1
   178dc:	and	r0, r0, #1
   178e0:	eor	r1, ip, r2, lsl r1
   178e4:	str	r1, [r3, lr, lsl #2]
   178e8:	pop	{pc}		; (ldr pc, [sp], #4)
   178ec:	andeq	ip, r2, ip, asr #5
   178f0:	ldr	r3, [pc, #16]	; 17908 <__assert_fail@plt+0x657c>
   178f4:	cmp	r0, #0
   178f8:	movne	r3, r0
   178fc:	ldr	r0, [r3, #4]
   17900:	str	r1, [r3, #4]
   17904:	bx	lr
   17908:	andeq	ip, r2, ip, asr #5
   1790c:	ldr	r3, [pc, #44]	; 17940 <__assert_fail@plt+0x65b4>
   17910:	cmp	r0, #0
   17914:	moveq	r0, r3
   17918:	mov	ip, #10
   1791c:	cmp	r2, #0
   17920:	cmpne	r1, #0
   17924:	str	ip, [r0]
   17928:	beq	17938 <__assert_fail@plt+0x65ac>
   1792c:	str	r1, [r0, #40]	; 0x28
   17930:	str	r2, [r0, #44]	; 0x2c
   17934:	bx	lr
   17938:	push	{r4, lr}
   1793c:	bl	11344 <abort@plt>
   17940:	andeq	ip, r2, ip, asr #5
   17944:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17948:	sub	sp, sp, #24
   1794c:	ldr	ip, [pc, #108]	; 179c0 <__assert_fail@plt+0x6634>
   17950:	ldr	r4, [sp, #56]	; 0x38
   17954:	mov	r9, r2
   17958:	cmp	r4, #0
   1795c:	moveq	r4, ip
   17960:	mov	sl, r3
   17964:	mov	r7, r0
   17968:	mov	r8, r1
   1796c:	bl	1123c <__errno_location@plt>
   17970:	ldr	r3, [r4, #44]	; 0x2c
   17974:	mov	r1, r8
   17978:	ldr	r6, [r0]
   1797c:	str	r3, [sp, #16]
   17980:	ldr	r2, [r4, #40]	; 0x28
   17984:	add	r3, r4, #8
   17988:	str	r3, [sp, #8]
   1798c:	str	r2, [sp, #12]
   17990:	ldr	r2, [r4, #4]
   17994:	mov	r5, r0
   17998:	str	r2, [sp, #4]
   1799c:	ldr	ip, [r4]
   179a0:	mov	r3, sl
   179a4:	mov	r2, r9
   179a8:	mov	r0, r7
   179ac:	str	ip, [sp]
   179b0:	bl	16170 <__assert_fail@plt+0x4de4>
   179b4:	str	r6, [r5]
   179b8:	add	sp, sp, #24
   179bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   179c0:	andeq	ip, r2, ip, asr #5
   179c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179c8:	cmp	r3, #0
   179cc:	sub	sp, sp, #44	; 0x2c
   179d0:	ldr	r4, [pc, #192]	; 17a98 <__assert_fail@plt+0x670c>
   179d4:	mov	r6, r2
   179d8:	movne	r4, r3
   179dc:	mov	r9, r1
   179e0:	mov	r8, r0
   179e4:	bl	1123c <__errno_location@plt>
   179e8:	ldr	r3, [r4, #44]	; 0x2c
   179ec:	ldr	r5, [r4, #4]
   179f0:	add	sl, r4, #8
   179f4:	cmp	r6, #0
   179f8:	orreq	r5, r5, #1
   179fc:	mov	r1, #0
   17a00:	ldr	r2, [r0]
   17a04:	str	r3, [sp, #16]
   17a08:	ldr	r3, [r4, #40]	; 0x28
   17a0c:	stmib	sp, {r5, sl}
   17a10:	str	r3, [sp, #12]
   17a14:	ldr	r3, [r4]
   17a18:	mov	r7, r0
   17a1c:	str	r2, [sp, #28]
   17a20:	str	r3, [sp]
   17a24:	mov	r2, r8
   17a28:	mov	r3, r9
   17a2c:	mov	r0, r1
   17a30:	bl	16170 <__assert_fail@plt+0x4de4>
   17a34:	add	r1, r0, #1
   17a38:	mov	fp, r0
   17a3c:	mov	r0, r1
   17a40:	str	r1, [sp, #36]	; 0x24
   17a44:	bl	187c8 <__assert_fail@plt+0x743c>
   17a48:	ldr	r3, [r4, #44]	; 0x2c
   17a4c:	mov	r2, r8
   17a50:	str	r3, [sp, #16]
   17a54:	ldr	r3, [r4, #40]	; 0x28
   17a58:	str	r5, [sp, #4]
   17a5c:	str	r3, [sp, #12]
   17a60:	str	sl, [sp, #8]
   17a64:	ldr	ip, [r4]
   17a68:	ldr	r1, [sp, #36]	; 0x24
   17a6c:	mov	r3, r9
   17a70:	str	ip, [sp]
   17a74:	str	r0, [sp, #32]
   17a78:	bl	16170 <__assert_fail@plt+0x4de4>
   17a7c:	ldr	r2, [sp, #28]
   17a80:	cmp	r6, #0
   17a84:	str	r2, [r7]
   17a88:	ldr	r0, [sp, #32]
   17a8c:	strne	fp, [r6]
   17a90:	add	sp, sp, #44	; 0x2c
   17a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a98:	andeq	ip, r2, ip, asr #5
   17a9c:	mov	r3, r2
   17aa0:	mov	r2, #0
   17aa4:	b	179c4 <__assert_fail@plt+0x6638>
   17aa8:	push	{r4, r5, r6, r7, r8, lr}
   17aac:	ldr	r6, [pc, #116]	; 17b28 <__assert_fail@plt+0x679c>
   17ab0:	ldr	r3, [r6, #4]
   17ab4:	ldr	r7, [r6]
   17ab8:	cmp	r3, #1
   17abc:	movgt	r5, r7
   17ac0:	movgt	r4, #1
   17ac4:	ble	17ae4 <__assert_fail@plt+0x6758>
   17ac8:	ldr	r0, [r5, #12]
   17acc:	bl	12c84 <__assert_fail@plt+0x18f8>
   17ad0:	ldr	r3, [r6, #4]
   17ad4:	add	r4, r4, #1
   17ad8:	cmp	r3, r4
   17adc:	add	r5, r5, #8
   17ae0:	bgt	17ac8 <__assert_fail@plt+0x673c>
   17ae4:	ldr	r0, [r7, #4]
   17ae8:	ldr	r4, [pc, #60]	; 17b2c <__assert_fail@plt+0x67a0>
   17aec:	cmp	r0, r4
   17af0:	beq	17b04 <__assert_fail@plt+0x6778>
   17af4:	bl	12c84 <__assert_fail@plt+0x18f8>
   17af8:	mov	r3, #256	; 0x100
   17afc:	str	r4, [r6, #12]
   17b00:	str	r3, [r6, #8]
   17b04:	ldr	r4, [pc, #36]	; 17b30 <__assert_fail@plt+0x67a4>
   17b08:	cmp	r7, r4
   17b0c:	beq	17b1c <__assert_fail@plt+0x6790>
   17b10:	mov	r0, r7
   17b14:	bl	12c84 <__assert_fail@plt+0x18f8>
   17b18:	str	r4, [r6]
   17b1c:	mov	r3, #1
   17b20:	str	r3, [r6, #4]
   17b24:	pop	{r4, r5, r6, r7, r8, pc}
   17b28:	andeq	ip, r2, r4, asr #2
   17b2c:	andeq	ip, r2, ip, asr #3
   17b30:	andeq	ip, r2, ip, asr #2
   17b34:	ldr	r3, [pc, #4]	; 17b40 <__assert_fail@plt+0x67b4>
   17b38:	mvn	r2, #0
   17b3c:	b	17684 <__assert_fail@plt+0x62f8>
   17b40:	andeq	ip, r2, ip, asr #5
   17b44:	ldr	r3, [pc]	; 17b4c <__assert_fail@plt+0x67c0>
   17b48:	b	17684 <__assert_fail@plt+0x62f8>
   17b4c:	andeq	ip, r2, ip, asr #5
   17b50:	mov	r1, r0
   17b54:	ldr	r3, [pc, #8]	; 17b64 <__assert_fail@plt+0x67d8>
   17b58:	mvn	r2, #0
   17b5c:	mov	r0, #0
   17b60:	b	17684 <__assert_fail@plt+0x62f8>
   17b64:	andeq	ip, r2, ip, asr #5
   17b68:	mov	r2, r1
   17b6c:	ldr	r3, [pc, #8]	; 17b7c <__assert_fail@plt+0x67f0>
   17b70:	mov	r1, r0
   17b74:	mov	r0, #0
   17b78:	b	17684 <__assert_fail@plt+0x62f8>
   17b7c:	andeq	ip, r2, ip, asr #5
   17b80:	push	{r4, r5, lr}
   17b84:	sub	sp, sp, #52	; 0x34
   17b88:	mov	r5, r2
   17b8c:	mov	r4, r0
   17b90:	mov	r0, sp
   17b94:	bl	16020 <__assert_fail@plt+0x4c94>
   17b98:	mov	r3, sp
   17b9c:	mov	r1, r5
   17ba0:	mov	r0, r4
   17ba4:	mvn	r2, #0
   17ba8:	bl	17684 <__assert_fail@plt+0x62f8>
   17bac:	add	sp, sp, #52	; 0x34
   17bb0:	pop	{r4, r5, pc}
   17bb4:	push	{r4, r5, r6, lr}
   17bb8:	sub	sp, sp, #48	; 0x30
   17bbc:	mov	r5, r2
   17bc0:	mov	r6, r3
   17bc4:	mov	r4, r0
   17bc8:	mov	r0, sp
   17bcc:	bl	16020 <__assert_fail@plt+0x4c94>
   17bd0:	mov	r3, sp
   17bd4:	mov	r2, r6
   17bd8:	mov	r1, r5
   17bdc:	mov	r0, r4
   17be0:	bl	17684 <__assert_fail@plt+0x62f8>
   17be4:	add	sp, sp, #48	; 0x30
   17be8:	pop	{r4, r5, r6, pc}
   17bec:	mov	r2, r1
   17bf0:	mov	r1, r0
   17bf4:	mov	r0, #0
   17bf8:	b	17b80 <__assert_fail@plt+0x67f4>
   17bfc:	mov	r3, r2
   17c00:	mov	r2, r1
   17c04:	mov	r1, r0
   17c08:	mov	r0, #0
   17c0c:	b	17bb4 <__assert_fail@plt+0x6828>
   17c10:	push	{r4, r5, r6, r7, r8, lr}
   17c14:	mov	r7, r0
   17c18:	ldr	lr, [pc, #100]	; 17c84 <__assert_fail@plt+0x68f8>
   17c1c:	mov	r8, r1
   17c20:	mov	r4, r2
   17c24:	ldm	lr!, {r0, r1, r2, r3}
   17c28:	sub	sp, sp, #48	; 0x30
   17c2c:	mov	ip, sp
   17c30:	lsr	r5, r4, #5
   17c34:	stmia	ip!, {r0, r1, r2, r3}
   17c38:	add	r6, sp, #8
   17c3c:	ldm	lr!, {r0, r1, r2, r3}
   17c40:	and	r4, r4, #31
   17c44:	stmia	ip!, {r0, r1, r2, r3}
   17c48:	ldm	lr, {r0, r1, r2, r3}
   17c4c:	stm	ip, {r0, r1, r2, r3}
   17c50:	mov	r2, r8
   17c54:	ldr	lr, [r6, r5, lsl #2]
   17c58:	mov	r1, r7
   17c5c:	mov	r3, sp
   17c60:	lsr	ip, lr, r4
   17c64:	eor	ip, ip, #1
   17c68:	and	ip, ip, #1
   17c6c:	mov	r0, #0
   17c70:	eor	r4, lr, ip, lsl r4
   17c74:	str	r4, [r6, r5, lsl #2]
   17c78:	bl	17684 <__assert_fail@plt+0x62f8>
   17c7c:	add	sp, sp, #48	; 0x30
   17c80:	pop	{r4, r5, r6, r7, r8, pc}
   17c84:	andeq	ip, r2, ip, asr #5
   17c88:	mov	r2, r1
   17c8c:	mvn	r1, #0
   17c90:	b	17c10 <__assert_fail@plt+0x6884>
   17c94:	mov	r2, #58	; 0x3a
   17c98:	mvn	r1, #0
   17c9c:	b	17c10 <__assert_fail@plt+0x6884>
   17ca0:	mov	r2, #58	; 0x3a
   17ca4:	b	17c10 <__assert_fail@plt+0x6884>
   17ca8:	push	{r4, r5, r6, r7, lr}
   17cac:	sub	sp, sp, #100	; 0x64
   17cb0:	mov	r6, r0
   17cb4:	mov	r0, sp
   17cb8:	mov	r7, r2
   17cbc:	bl	16020 <__assert_fail@plt+0x4c94>
   17cc0:	mov	ip, sp
   17cc4:	add	lr, sp, #48	; 0x30
   17cc8:	ldm	ip!, {r0, r1, r2, r3}
   17ccc:	stmia	lr!, {r0, r1, r2, r3}
   17cd0:	ldm	ip!, {r0, r1, r2, r3}
   17cd4:	ldr	r5, [sp, #60]	; 0x3c
   17cd8:	stmia	lr!, {r0, r1, r2, r3}
   17cdc:	mvn	r4, r5
   17ce0:	ldm	ip, {r0, r1, r2, r3}
   17ce4:	and	ip, r4, #67108864	; 0x4000000
   17ce8:	eor	ip, ip, r5
   17cec:	str	ip, [sp, #60]	; 0x3c
   17cf0:	stm	lr, {r0, r1, r2, r3}
   17cf4:	mov	r1, r7
   17cf8:	mov	r0, r6
   17cfc:	add	r3, sp, #48	; 0x30
   17d00:	mvn	r2, #0
   17d04:	bl	17684 <__assert_fail@plt+0x62f8>
   17d08:	add	sp, sp, #100	; 0x64
   17d0c:	pop	{r4, r5, r6, r7, pc}
   17d10:	push	{r4, r5, r6, r7, r8, lr}
   17d14:	mov	r5, r1
   17d18:	ldr	lr, [pc, #100]	; 17d84 <__assert_fail@plt+0x69f8>
   17d1c:	mov	r4, r2
   17d20:	mov	r7, r0
   17d24:	mov	r8, r3
   17d28:	ldm	lr!, {r0, r1, r2, r3}
   17d2c:	sub	sp, sp, #48	; 0x30
   17d30:	mov	ip, sp
   17d34:	mov	r6, #10
   17d38:	stmia	ip!, {r0, r1, r2, r3}
   17d3c:	cmp	r4, #0
   17d40:	cmpne	r5, #0
   17d44:	ldm	lr!, {r0, r1, r2, r3}
   17d48:	str	r6, [sp]
   17d4c:	stmia	ip!, {r0, r1, r2, r3}
   17d50:	ldm	lr, {r0, r1, r2, r3}
   17d54:	stm	ip, {r0, r1, r2, r3}
   17d58:	beq	17d80 <__assert_fail@plt+0x69f4>
   17d5c:	mov	r3, sp
   17d60:	mov	r1, r8
   17d64:	mov	r0, r7
   17d68:	ldr	r2, [sp, #72]	; 0x48
   17d6c:	str	r5, [sp, #40]	; 0x28
   17d70:	str	r4, [sp, #44]	; 0x2c
   17d74:	bl	17684 <__assert_fail@plt+0x62f8>
   17d78:	add	sp, sp, #48	; 0x30
   17d7c:	pop	{r4, r5, r6, r7, r8, pc}
   17d80:	bl	11344 <abort@plt>
   17d84:	andeq	ip, r2, ip, asr #5
   17d88:	push	{lr}		; (str lr, [sp, #-4]!)
   17d8c:	sub	sp, sp, #12
   17d90:	mvn	ip, #0
   17d94:	str	ip, [sp]
   17d98:	bl	17d10 <__assert_fail@plt+0x6984>
   17d9c:	add	sp, sp, #12
   17da0:	pop	{pc}		; (ldr pc, [sp], #4)
   17da4:	push	{lr}		; (str lr, [sp, #-4]!)
   17da8:	sub	sp, sp, #12
   17dac:	mvn	ip, #0
   17db0:	mov	r3, r2
   17db4:	str	ip, [sp]
   17db8:	mov	r2, r1
   17dbc:	mov	r1, r0
   17dc0:	mov	r0, #0
   17dc4:	bl	17d10 <__assert_fail@plt+0x6984>
   17dc8:	add	sp, sp, #12
   17dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   17dd0:	push	{lr}		; (str lr, [sp, #-4]!)
   17dd4:	sub	sp, sp, #12
   17dd8:	str	r3, [sp]
   17ddc:	mov	r3, r2
   17de0:	mov	r2, r1
   17de4:	mov	r1, r0
   17de8:	mov	r0, #0
   17dec:	bl	17d10 <__assert_fail@plt+0x6984>
   17df0:	add	sp, sp, #12
   17df4:	pop	{pc}		; (ldr pc, [sp], #4)
   17df8:	ldr	r3, [pc]	; 17e00 <__assert_fail@plt+0x6a74>
   17dfc:	b	17684 <__assert_fail@plt+0x62f8>
   17e00:	andeq	ip, r2, r4, asr r1
   17e04:	mov	r2, r1
   17e08:	ldr	r3, [pc, #8]	; 17e18 <__assert_fail@plt+0x6a8c>
   17e0c:	mov	r1, r0
   17e10:	mov	r0, #0
   17e14:	b	17684 <__assert_fail@plt+0x62f8>
   17e18:	andeq	ip, r2, r4, asr r1
   17e1c:	ldr	r3, [pc, #4]	; 17e28 <__assert_fail@plt+0x6a9c>
   17e20:	mvn	r2, #0
   17e24:	b	17684 <__assert_fail@plt+0x62f8>
   17e28:	andeq	ip, r2, r4, asr r1
   17e2c:	mov	r1, r0
   17e30:	ldr	r3, [pc, #8]	; 17e40 <__assert_fail@plt+0x6ab4>
   17e34:	mvn	r2, #0
   17e38:	mov	r0, #0
   17e3c:	b	17684 <__assert_fail@plt+0x62f8>
   17e40:	andeq	ip, r2, r4, asr r1
   17e44:	push	{r4, r6, r7, lr}
   17e48:	sub	sp, sp, #104	; 0x68
   17e4c:	mov	r4, r0
   17e50:	mov	r2, sp
   17e54:	ldr	r1, [pc, #52]	; 17e90 <__assert_fail@plt+0x6b04>
   17e58:	mov	r0, #3
   17e5c:	bl	1135c <__lxstat64@plt>
   17e60:	cmp	r0, #0
   17e64:	bne	17e84 <__assert_fail@plt+0x6af8>
   17e68:	ldrd	r6, [sp, #96]	; 0x60
   17e6c:	ldrd	r2, [sp]
   17e70:	mov	r0, r4
   17e74:	strd	r6, [r4]
   17e78:	strd	r2, [r4, #8]
   17e7c:	add	sp, sp, #104	; 0x68
   17e80:	pop	{r4, r6, r7, pc}
   17e84:	mov	r0, #0
   17e88:	add	sp, sp, #104	; 0x68
   17e8c:	pop	{r4, r6, r7, pc}
   17e90:	andeq	sl, r1, r8, lsr #26
   17e94:	cmp	r0, #2
   17e98:	push	{r4, r5, r6, r7, r8, lr}
   17e9c:	mov	r4, r0
   17ea0:	bhi	17ec8 <__assert_fail@plt+0x6b3c>
   17ea4:	bl	19964 <__assert_fail@plt+0x85d8>
   17ea8:	mov	r7, r0
   17eac:	bl	1123c <__errno_location@plt>
   17eb0:	mov	r5, r0
   17eb4:	mov	r0, r4
   17eb8:	ldr	r6, [r5]
   17ebc:	mov	r4, r7
   17ec0:	bl	11350 <close@plt>
   17ec4:	str	r6, [r5]
   17ec8:	mov	r0, r4
   17ecc:	pop	{r4, r5, r6, r7, r8, pc}
   17ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ed4:	subs	sl, r3, #0
   17ed8:	sub	sp, sp, #44	; 0x2c
   17edc:	ldr	r3, [r2]
   17ee0:	ldrne	fp, [sl]
   17ee4:	str	r3, [sp, #12]
   17ee8:	ldr	r3, [sp, #80]	; 0x50
   17eec:	mvneq	fp, #0
   17ef0:	cmp	r3, #0
   17ef4:	mov	r9, r2
   17ef8:	ldrne	r2, [sp, #80]	; 0x50
   17efc:	movne	r3, #0
   17f00:	mov	r4, r1
   17f04:	strne	r3, [r2]
   17f08:	ldr	r3, [sp, #84]	; 0x54
   17f0c:	cmp	r3, #0
   17f10:	movne	r3, #0
   17f14:	ldrne	r2, [sp, #84]	; 0x54
   17f18:	strne	r3, [r2]
   17f1c:	cmp	r1, #0
   17f20:	beq	180d8 <__assert_fail@plt+0x6d4c>
   17f24:	subs	r6, r1, r0
   17f28:	bne	18070 <__assert_fail@plt+0x6ce4>
   17f2c:	ldrb	r5, [r1, #1]
   17f30:	cmp	r5, #0
   17f34:	movne	r5, r6
   17f38:	beq	180e8 <__assert_fail@plt+0x6d5c>
   17f3c:	cmp	r5, #0
   17f40:	add	r7, r4, #1
   17f44:	beq	18138 <__assert_fail@plt+0x6dac>
   17f48:	ldrb	r3, [r5]
   17f4c:	cmp	r3, #43	; 0x2b
   17f50:	beq	17fe4 <__assert_fail@plt+0x6c58>
   17f54:	mov	r0, r5
   17f58:	bl	11068 <getpwnam@plt>
   17f5c:	cmp	r0, #0
   17f60:	beq	17fe4 <__assert_fail@plt+0x6c58>
   17f64:	cmp	r4, #0
   17f68:	clz	r6, r7
   17f6c:	ldr	r3, [r0, #8]
   17f70:	lsr	r6, r6, #5
   17f74:	moveq	r6, #0
   17f78:	cmp	r6, #0
   17f7c:	str	r3, [sp, #12]
   17f80:	bne	180a0 <__assert_fail@plt+0x6d14>
   17f84:	adds	r4, r7, #0
   17f88:	mov	r8, r6
   17f8c:	movne	r4, #1
   17f90:	bl	112b4 <endpwent@plt>
   17f94:	cmp	r4, #0
   17f98:	beq	18014 <__assert_fail@plt+0x6c88>
   17f9c:	ldrb	r3, [r7]
   17fa0:	cmp	r3, #43	; 0x2b
   17fa4:	bne	18044 <__assert_fail@plt+0x6cb8>
   17fa8:	ldr	r2, [pc, #512]	; 181b0 <__assert_fail@plt+0x6e24>
   17fac:	add	r3, sp, #16
   17fb0:	str	r2, [sp]
   17fb4:	mov	r1, #0
   17fb8:	mov	r2, #10
   17fbc:	mov	r0, r7
   17fc0:	bl	18e50 <__assert_fail@plt+0x7ac4>
   17fc4:	cmp	r0, #0
   17fc8:	bne	180d0 <__assert_fail@plt+0x6d44>
   17fcc:	ldr	r3, [sp, #16]
   17fd0:	ldr	r8, [pc, #476]	; 181b4 <__assert_fail@plt+0x6e28>
   17fd4:	cmn	r3, #1
   17fd8:	movne	fp, r3
   17fdc:	movne	r8, #0
   17fe0:	b	1805c <__assert_fail@plt+0x6cd0>
   17fe4:	adds	r4, r4, #0
   17fe8:	movne	r4, #1
   17fec:	cmp	r7, #0
   17ff0:	movne	r4, #0
   17ff4:	cmp	r4, #0
   17ff8:	beq	18164 <__assert_fail@plt+0x6dd8>
   17ffc:	mov	r4, #0
   18000:	bl	112b4 <endpwent@plt>
   18004:	cmp	r4, #0
   18008:	ldr	r8, [pc, #424]	; 181b8 <__assert_fail@plt+0x6e2c>
   1800c:	mov	r6, r4
   18010:	bne	17f9c <__assert_fail@plt+0x6c10>
   18014:	cmp	r8, #0
   18018:	beq	180ec <__assert_fail@plt+0x6d60>
   1801c:	mov	r0, r5
   18020:	bl	12c84 <__assert_fail@plt+0x18f8>
   18024:	mov	r0, r6
   18028:	bl	12c84 <__assert_fail@plt+0x18f8>
   1802c:	mov	r1, r8
   18030:	mov	r2, #5
   18034:	mov	r0, #0
   18038:	bl	11104 <dcgettext@plt>
   1803c:	add	sp, sp, #44	; 0x2c
   18040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18044:	mov	r0, r7
   18048:	bl	11380 <getgrnam@plt>
   1804c:	cmp	r0, #0
   18050:	movne	r8, #0
   18054:	ldrne	fp, [r0, #8]
   18058:	beq	17fa8 <__assert_fail@plt+0x6c1c>
   1805c:	bl	11044 <endgrent@plt>
   18060:	mov	r0, r7
   18064:	bl	18ccc <__assert_fail@plt+0x7940>
   18068:	mov	r6, r0
   1806c:	b	18014 <__assert_fail@plt+0x6c88>
   18070:	add	r1, r6, #1
   18074:	bl	18c5c <__assert_fail@plt+0x78d0>
   18078:	ldrb	r7, [r4, #1]
   1807c:	mov	r3, #0
   18080:	cmp	r7, r3
   18084:	mov	r5, r0
   18088:	strb	r3, [r0, r6]
   1808c:	bne	17f3c <__assert_fail@plt+0x6bb0>
   18090:	ldrb	r3, [r5]
   18094:	cmp	r3, #43	; 0x2b
   18098:	bne	17f54 <__assert_fail@plt+0x6bc8>
   1809c:	b	17fe4 <__assert_fail@plt+0x6c58>
   180a0:	ldr	fp, [r0, #12]
   180a4:	mov	r0, fp
   180a8:	bl	11374 <getgrgid@plt>
   180ac:	subs	r1, r0, #0
   180b0:	beq	18144 <__assert_fail@plt+0x6db8>
   180b4:	ldr	r0, [r1]
   180b8:	bl	18ccc <__assert_fail@plt+0x7940>
   180bc:	mov	r4, #0
   180c0:	mov	r8, r4
   180c4:	mov	r6, r0
   180c8:	bl	11044 <endgrent@plt>
   180cc:	b	17f90 <__assert_fail@plt+0x6c04>
   180d0:	ldr	r8, [pc, #220]	; 181b4 <__assert_fail@plt+0x6e28>
   180d4:	b	1805c <__assert_fail@plt+0x6cd0>
   180d8:	ldrb	r3, [r0]
   180dc:	cmp	r3, #0
   180e0:	moveq	r5, r1
   180e4:	bne	18154 <__assert_fail@plt+0x6dc8>
   180e8:	mov	r6, r5
   180ec:	ldr	r3, [sp, #12]
   180f0:	cmp	sl, #0
   180f4:	str	r3, [r9]
   180f8:	ldr	r3, [sp, #80]	; 0x50
   180fc:	strne	fp, [sl]
   18100:	cmp	r3, #0
   18104:	strne	r5, [r3]
   18108:	ldr	r3, [sp, #84]	; 0x54
   1810c:	movne	r5, #0
   18110:	cmp	r3, #0
   18114:	strne	r6, [r3]
   18118:	movne	r6, #0
   1811c:	mov	r0, r5
   18120:	bl	12c84 <__assert_fail@plt+0x18f8>
   18124:	mov	r0, r6
   18128:	bl	12c84 <__assert_fail@plt+0x18f8>
   1812c:	mov	r0, #0
   18130:	add	sp, sp, #44	; 0x2c
   18134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18138:	cmp	r7, #0
   1813c:	bne	17f9c <__assert_fail@plt+0x6c10>
   18140:	b	180e8 <__assert_fail@plt+0x6d5c>
   18144:	add	r2, sp, #16
   18148:	mov	r0, fp
   1814c:	bl	15e78 <__assert_fail@plt+0x4aec>
   18150:	b	180b8 <__assert_fail@plt+0x6d2c>
   18154:	bl	18ccc <__assert_fail@plt+0x7940>
   18158:	mov	r7, r4
   1815c:	mov	r5, r0
   18160:	b	17f48 <__assert_fail@plt+0x6bbc>
   18164:	ldr	r2, [pc, #68]	; 181b0 <__assert_fail@plt+0x6e24>
   18168:	add	r3, sp, #16
   1816c:	str	r2, [sp]
   18170:	mov	r1, r4
   18174:	mov	r2, #10
   18178:	mov	r0, r5
   1817c:	bl	18e50 <__assert_fail@plt+0x7ac4>
   18180:	subs	r8, r0, #0
   18184:	bne	181a8 <__assert_fail@plt+0x6e1c>
   18188:	ldr	r3, [sp, #16]
   1818c:	cmn	r3, #1
   18190:	beq	181a8 <__assert_fail@plt+0x6e1c>
   18194:	adds	r4, r7, #0
   18198:	movne	r4, #1
   1819c:	str	r3, [sp, #12]
   181a0:	mov	r6, #0
   181a4:	b	17f90 <__assert_fail@plt+0x6c04>
   181a8:	ldr	r8, [pc, #12]	; 181bc <__assert_fail@plt+0x6e30>
   181ac:	b	181a0 <__assert_fail@plt+0x6e14>
   181b0:	andeq	sl, r1, r0, lsl #19
   181b4:	strdeq	fp, [r1], -r8
   181b8:	andeq	fp, r1, r8, ror #7
   181bc:	ldrdeq	fp, [r1], -r8
   181c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   181c4:	sub	sp, sp, #8
   181c8:	subs	r7, r2, #0
   181cc:	mov	r8, r1
   181d0:	mov	r9, r3
   181d4:	ldr	sl, [sp, #40]	; 0x28
   181d8:	beq	1825c <__assert_fail@plt+0x6ed0>
   181dc:	mov	r1, #58	; 0x3a
   181e0:	mov	r4, r0
   181e4:	bl	11218 <strchr@plt>
   181e8:	stm	sp, {r9, sl}
   181ec:	mov	r3, r7
   181f0:	mov	r2, r8
   181f4:	mov	r6, r0
   181f8:	mov	r1, r0
   181fc:	mov	r0, r4
   18200:	bl	17ed0 <__assert_fail@plt+0x6b44>
   18204:	cmp	r6, #0
   18208:	mov	r5, r0
   1820c:	bne	18248 <__assert_fail@plt+0x6ebc>
   18210:	cmp	r0, #0
   18214:	beq	18254 <__assert_fail@plt+0x6ec8>
   18218:	mov	r1, #46	; 0x2e
   1821c:	mov	r0, r4
   18220:	bl	11218 <strchr@plt>
   18224:	subs	r1, r0, #0
   18228:	beq	18248 <__assert_fail@plt+0x6ebc>
   1822c:	stm	sp, {r9, sl}
   18230:	mov	r3, r7
   18234:	mov	r2, r8
   18238:	mov	r0, r4
   1823c:	bl	17ed0 <__assert_fail@plt+0x6b44>
   18240:	cmp	r0, #0
   18244:	beq	18254 <__assert_fail@plt+0x6ec8>
   18248:	mov	r0, r5
   1824c:	add	sp, sp, #8
   18250:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18254:	mov	r5, r6
   18258:	b	18248 <__assert_fail@plt+0x6ebc>
   1825c:	mov	r2, r1
   18260:	stm	sp, {r9, sl}
   18264:	mov	r3, r7
   18268:	mov	r1, r7
   1826c:	bl	17ed0 <__assert_fail@plt+0x6b44>
   18270:	mov	r5, r0
   18274:	mov	r0, r5
   18278:	add	sp, sp, #8
   1827c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18280:	push	{r4, r5, r6, lr}
   18284:	sub	sp, sp, #32
   18288:	cmp	r1, #0
   1828c:	mov	r4, r0
   18290:	ldr	r5, [sp, #48]	; 0x30
   18294:	ldr	r6, [sp, #52]	; 0x34
   18298:	beq	185b0 <__assert_fail@plt+0x7224>
   1829c:	stm	sp, {r2, r3}
   182a0:	mov	r3, r1
   182a4:	ldr	r2, [pc, #808]	; 185d4 <__assert_fail@plt+0x7248>
   182a8:	mov	r1, #1
   182ac:	bl	11278 <__fprintf_chk@plt>
   182b0:	mov	r2, #5
   182b4:	ldr	r1, [pc, #796]	; 185d8 <__assert_fail@plt+0x724c>
   182b8:	mov	r0, #0
   182bc:	bl	11104 <dcgettext@plt>
   182c0:	ldr	r3, [pc, #788]	; 185dc <__assert_fail@plt+0x7250>
   182c4:	ldr	r2, [pc, #788]	; 185e0 <__assert_fail@plt+0x7254>
   182c8:	str	r3, [sp]
   182cc:	mov	r1, #1
   182d0:	mov	r3, r0
   182d4:	mov	r0, r4
   182d8:	bl	11278 <__fprintf_chk@plt>
   182dc:	mov	r1, r4
   182e0:	mov	r0, #10
   182e4:	bl	110f8 <fputc_unlocked@plt>
   182e8:	mov	r2, #5
   182ec:	ldr	r1, [pc, #752]	; 185e4 <__assert_fail@plt+0x7258>
   182f0:	mov	r0, #0
   182f4:	bl	11104 <dcgettext@plt>
   182f8:	mov	r1, #1
   182fc:	ldr	r3, [pc, #740]	; 185e8 <__assert_fail@plt+0x725c>
   18300:	mov	r2, r0
   18304:	mov	r0, r4
   18308:	bl	11278 <__fprintf_chk@plt>
   1830c:	mov	r1, r4
   18310:	mov	r0, #10
   18314:	bl	110f8 <fputc_unlocked@plt>
   18318:	cmp	r6, #9
   1831c:	ldrls	pc, [pc, r6, lsl #2]
   18320:	b	185c8 <__assert_fail@plt+0x723c>
   18324:	andeq	r8, r1, r8, lsr #7
   18328:			; <UNDEFINED> instruction: 0x000183b0
   1832c:	ldrdeq	r8, [r1], -ip
   18330:	andeq	r8, r1, r0, lsl r4
   18334:	andeq	r8, r1, ip, asr #8
   18338:	andeq	r8, r1, r8, lsl #9
   1833c:	andeq	r8, r1, r4, asr #9
   18340:	andeq	r8, r1, r8, lsl #10
   18344:	andeq	r8, r1, r8, asr r5
   18348:	andeq	r8, r1, ip, asr #6
   1834c:	ldr	r1, [pc, #664]	; 185ec <__assert_fail@plt+0x7260>
   18350:	mov	r2, #5
   18354:	mov	r0, #0
   18358:	bl	11104 <dcgettext@plt>
   1835c:	ldr	ip, [r5, #32]
   18360:	ldr	r1, [r5, #28]
   18364:	ldr	r2, [r5, #24]
   18368:	ldr	r3, [r5]
   1836c:	ldr	r6, [r5, #20]
   18370:	str	ip, [sp, #28]
   18374:	ldr	lr, [r5, #16]
   18378:	str	r1, [sp, #24]
   1837c:	ldr	ip, [r5, #12]
   18380:	str	r2, [sp, #20]
   18384:	ldr	r1, [r5, #8]
   18388:	ldr	r2, [r5, #4]
   1838c:	str	r6, [sp, #16]
   18390:	stmib	sp, {r1, ip, lr}
   18394:	mov	r1, #1
   18398:	str	r2, [sp]
   1839c:	mov	r2, r0
   183a0:	mov	r0, r4
   183a4:	bl	11278 <__fprintf_chk@plt>
   183a8:	add	sp, sp, #32
   183ac:	pop	{r4, r5, r6, pc}
   183b0:	mov	r2, #5
   183b4:	ldr	r1, [pc, #564]	; 185f0 <__assert_fail@plt+0x7264>
   183b8:	mov	r0, #0
   183bc:	bl	11104 <dcgettext@plt>
   183c0:	ldr	r3, [r5]
   183c4:	mov	r1, #1
   183c8:	mov	r2, r0
   183cc:	mov	r0, r4
   183d0:	add	sp, sp, #32
   183d4:	pop	{r4, r5, r6, lr}
   183d8:	b	11278 <__fprintf_chk@plt>
   183dc:	mov	r2, #5
   183e0:	ldr	r1, [pc, #524]	; 185f4 <__assert_fail@plt+0x7268>
   183e4:	mov	r0, #0
   183e8:	bl	11104 <dcgettext@plt>
   183ec:	ldr	r2, [r5, #4]
   183f0:	ldr	r3, [r5]
   183f4:	mov	r1, #1
   183f8:	str	r2, [sp, #48]	; 0x30
   183fc:	mov	r2, r0
   18400:	mov	r0, r4
   18404:	add	sp, sp, #32
   18408:	pop	{r4, r5, r6, lr}
   1840c:	b	11278 <__fprintf_chk@plt>
   18410:	mov	r2, #5
   18414:	ldr	r1, [pc, #476]	; 185f8 <__assert_fail@plt+0x726c>
   18418:	mov	r0, #0
   1841c:	bl	11104 <dcgettext@plt>
   18420:	ldr	r1, [r5, #8]
   18424:	ldr	r2, [r5, #4]
   18428:	ldr	r3, [r5]
   1842c:	str	r1, [sp, #52]	; 0x34
   18430:	str	r2, [sp, #48]	; 0x30
   18434:	mov	r1, #1
   18438:	mov	r2, r0
   1843c:	mov	r0, r4
   18440:	add	sp, sp, #32
   18444:	pop	{r4, r5, r6, lr}
   18448:	b	11278 <__fprintf_chk@plt>
   1844c:	mov	r2, #5
   18450:	ldr	r1, [pc, #420]	; 185fc <__assert_fail@plt+0x7270>
   18454:	mov	r0, #0
   18458:	bl	11104 <dcgettext@plt>
   1845c:	ldr	r1, [r5, #8]
   18460:	ldr	ip, [r5, #12]
   18464:	ldr	r2, [r5, #4]
   18468:	ldr	r3, [r5]
   1846c:	stmib	sp, {r1, ip}
   18470:	str	r2, [sp]
   18474:	mov	r1, #1
   18478:	mov	r2, r0
   1847c:	mov	r0, r4
   18480:	bl	11278 <__fprintf_chk@plt>
   18484:	b	183a8 <__assert_fail@plt+0x701c>
   18488:	mov	r2, #5
   1848c:	ldr	r1, [pc, #364]	; 18600 <__assert_fail@plt+0x7274>
   18490:	mov	r0, #0
   18494:	bl	11104 <dcgettext@plt>
   18498:	add	r1, r5, #8
   1849c:	ldr	r2, [r5, #4]
   184a0:	ldm	r1, {r1, ip, lr}
   184a4:	ldr	r3, [r5]
   184a8:	str	r2, [sp]
   184ac:	stmib	sp, {r1, ip, lr}
   184b0:	mov	r1, #1
   184b4:	mov	r2, r0
   184b8:	mov	r0, r4
   184bc:	bl	11278 <__fprintf_chk@plt>
   184c0:	b	183a8 <__assert_fail@plt+0x701c>
   184c4:	mov	r2, #5
   184c8:	ldr	r1, [pc, #308]	; 18604 <__assert_fail@plt+0x7278>
   184cc:	mov	r0, #0
   184d0:	bl	11104 <dcgettext@plt>
   184d4:	add	r1, r5, #8
   184d8:	ldr	r2, [r5, #4]
   184dc:	ldm	r1, {r1, ip, lr}
   184e0:	ldr	r6, [r5, #20]
   184e4:	ldr	r3, [r5]
   184e8:	stmib	sp, {r1, ip, lr}
   184ec:	mov	r1, #1
   184f0:	str	r2, [sp]
   184f4:	str	r6, [sp, #16]
   184f8:	mov	r2, r0
   184fc:	mov	r0, r4
   18500:	bl	11278 <__fprintf_chk@plt>
   18504:	b	183a8 <__assert_fail@plt+0x701c>
   18508:	mov	r2, #5
   1850c:	ldr	r1, [pc, #244]	; 18608 <__assert_fail@plt+0x727c>
   18510:	mov	r0, #0
   18514:	bl	11104 <dcgettext@plt>
   18518:	ldr	r2, [r5, #24]
   1851c:	ldr	r3, [r5]
   18520:	ldr	r6, [r5, #20]
   18524:	ldr	lr, [r5, #16]
   18528:	ldr	ip, [r5, #12]
   1852c:	str	r2, [sp, #20]
   18530:	ldr	r1, [r5, #8]
   18534:	ldr	r2, [r5, #4]
   18538:	str	r6, [sp, #16]
   1853c:	stmib	sp, {r1, ip, lr}
   18540:	mov	r1, #1
   18544:	str	r2, [sp]
   18548:	mov	r2, r0
   1854c:	mov	r0, r4
   18550:	bl	11278 <__fprintf_chk@plt>
   18554:	b	183a8 <__assert_fail@plt+0x701c>
   18558:	mov	r2, #5
   1855c:	ldr	r1, [pc, #168]	; 1860c <__assert_fail@plt+0x7280>
   18560:	mov	r0, #0
   18564:	bl	11104 <dcgettext@plt>
   18568:	ldr	r1, [r5, #28]
   1856c:	ldr	r2, [r5, #24]
   18570:	ldr	r3, [r5]
   18574:	ldr	r6, [r5, #20]
   18578:	ldr	lr, [r5, #16]
   1857c:	str	r1, [sp, #24]
   18580:	ldr	ip, [r5, #12]
   18584:	str	r2, [sp, #20]
   18588:	ldr	r1, [r5, #8]
   1858c:	ldr	r2, [r5, #4]
   18590:	str	r6, [sp, #16]
   18594:	stmib	sp, {r1, ip, lr}
   18598:	mov	r1, #1
   1859c:	str	r2, [sp]
   185a0:	mov	r2, r0
   185a4:	mov	r0, r4
   185a8:	bl	11278 <__fprintf_chk@plt>
   185ac:	b	183a8 <__assert_fail@plt+0x701c>
   185b0:	str	r3, [sp]
   185b4:	mov	r1, #1
   185b8:	mov	r3, r2
   185bc:	ldr	r2, [pc, #76]	; 18610 <__assert_fail@plt+0x7284>
   185c0:	bl	11278 <__fprintf_chk@plt>
   185c4:	b	182b0 <__assert_fail@plt+0x6f24>
   185c8:	mov	r2, #5
   185cc:	ldr	r1, [pc, #64]	; 18614 <__assert_fail@plt+0x7288>
   185d0:	b	18354 <__assert_fail@plt+0x6fc8>
   185d4:	andeq	fp, r1, r8, lsl #8
   185d8:	andeq	fp, r1, ip, lsl r4
   185dc:	andeq	r0, r0, r6, ror #15
   185e0:	strdeq	fp, [r1], -r4
   185e4:	andeq	fp, r1, r0, lsr #8
   185e8:	andeq	fp, r1, ip, asr #9
   185ec:	strdeq	fp, [r1], -ip
   185f0:	strdeq	fp, [r1], -r0
   185f4:	andeq	fp, r1, r0, lsl #10
   185f8:	andeq	fp, r1, r8, lsl r5
   185fc:	andeq	fp, r1, r4, lsr r5
   18600:	andeq	fp, r1, r4, asr r5
   18604:	andeq	fp, r1, r8, ror r5
   18608:	andeq	fp, r1, r0, lsr #11
   1860c:	andeq	fp, r1, ip, asr #11
   18610:	andeq	fp, r1, r4, lsl r4
   18614:	andeq	fp, r1, r0, lsr r6
   18618:	push	{r4, r5, lr}
   1861c:	sub	sp, sp, #12
   18620:	ldr	r5, [sp, #24]
   18624:	ldr	ip, [r5]
   18628:	cmp	ip, #0
   1862c:	beq	18648 <__assert_fail@plt+0x72bc>
   18630:	mov	lr, r5
   18634:	mov	ip, #0
   18638:	ldr	r4, [lr, #4]!
   1863c:	add	ip, ip, #1
   18640:	cmp	r4, #0
   18644:	bne	18638 <__assert_fail@plt+0x72ac>
   18648:	stm	sp, {r5, ip}
   1864c:	bl	18280 <__assert_fail@plt+0x6ef4>
   18650:	add	sp, sp, #12
   18654:	pop	{r4, r5, pc}
   18658:	push	{r4, r5, lr}
   1865c:	sub	sp, sp, #52	; 0x34
   18660:	add	r5, sp, #4
   18664:	ldr	r4, [sp, #64]	; 0x40
   18668:	mov	ip, #0
   1866c:	sub	r4, r4, #4
   18670:	ldr	lr, [r4, #4]!
   18674:	cmp	lr, #0
   18678:	str	lr, [r5, #4]!
   1867c:	beq	1868c <__assert_fail@plt+0x7300>
   18680:	add	ip, ip, #1
   18684:	cmp	ip, #10
   18688:	bne	18670 <__assert_fail@plt+0x72e4>
   1868c:	add	lr, sp, #8
   18690:	str	ip, [sp, #4]
   18694:	str	lr, [sp]
   18698:	bl	18280 <__assert_fail@plt+0x6ef4>
   1869c:	add	sp, sp, #52	; 0x34
   186a0:	pop	{r4, r5, pc}
   186a4:	push	{r3}		; (str r3, [sp, #-4]!)
   186a8:	push	{r4, lr}
   186ac:	sub	sp, sp, #60	; 0x3c
   186b0:	add	lr, sp, #56	; 0x38
   186b4:	add	r3, sp, #72	; 0x48
   186b8:	str	r3, [lr, #-44]!	; 0xffffffd4
   186bc:	add	r4, sp, #68	; 0x44
   186c0:	mov	r3, #0
   186c4:	ldr	ip, [r4, #4]!
   186c8:	cmp	ip, #0
   186cc:	str	ip, [lr, #4]!
   186d0:	beq	186e0 <__assert_fail@plt+0x7354>
   186d4:	add	r3, r3, #1
   186d8:	cmp	r3, #10
   186dc:	bne	186c4 <__assert_fail@plt+0x7338>
   186e0:	add	ip, sp, #16
   186e4:	str	r3, [sp, #4]
   186e8:	str	ip, [sp]
   186ec:	ldr	r3, [sp, #68]	; 0x44
   186f0:	bl	18280 <__assert_fail@plt+0x6ef4>
   186f4:	add	sp, sp, #60	; 0x3c
   186f8:	pop	{r4, lr}
   186fc:	add	sp, sp, #4
   18700:	bx	lr
   18704:	ldr	r3, [pc, #116]	; 18780 <__assert_fail@plt+0x73f4>
   18708:	push	{r4, lr}
   1870c:	mov	r0, #10
   18710:	ldr	r1, [r3]
   18714:	bl	110f8 <fputc_unlocked@plt>
   18718:	mov	r2, #5
   1871c:	ldr	r1, [pc, #96]	; 18784 <__assert_fail@plt+0x73f8>
   18720:	mov	r0, #0
   18724:	bl	11104 <dcgettext@plt>
   18728:	ldr	r2, [pc, #88]	; 18788 <__assert_fail@plt+0x73fc>
   1872c:	mov	r1, r0
   18730:	mov	r0, #1
   18734:	bl	11260 <__printf_chk@plt>
   18738:	mov	r2, #5
   1873c:	ldr	r1, [pc, #72]	; 1878c <__assert_fail@plt+0x7400>
   18740:	mov	r0, #0
   18744:	bl	11104 <dcgettext@plt>
   18748:	ldr	r3, [pc, #64]	; 18790 <__assert_fail@plt+0x7404>
   1874c:	ldr	r2, [pc, #64]	; 18794 <__assert_fail@plt+0x7408>
   18750:	mov	r1, r0
   18754:	mov	r0, #1
   18758:	bl	11260 <__printf_chk@plt>
   1875c:	mov	r2, #5
   18760:	ldr	r1, [pc, #48]	; 18798 <__assert_fail@plt+0x740c>
   18764:	mov	r0, #0
   18768:	bl	11104 <dcgettext@plt>
   1876c:	ldr	r2, [pc, #40]	; 1879c <__assert_fail@plt+0x7410>
   18770:	pop	{r4, lr}
   18774:	mov	r1, r0
   18778:	mov	r0, #1
   1877c:	b	11260 <__printf_chk@plt>
   18780:	muleq	r2, ip, r1
   18784:	andeq	fp, r1, ip, ror #12
   18788:	andeq	fp, r1, r0, lsl #13
   1878c:	muleq	r1, r8, r6
   18790:	muleq	r1, r0, fp
   18794:			; <UNDEFINED> instruction: 0x0001abb8
   18798:	andeq	fp, r1, ip, lsr #13
   1879c:	ldrdeq	fp, [r1], -r4
   187a0:	push	{r4, lr}
   187a4:	bl	192f0 <__assert_fail@plt+0x7f64>
   187a8:	cmp	r0, #0
   187ac:	popne	{r4, pc}
   187b0:	bl	18ce8 <__assert_fail@plt+0x795c>
   187b4:	push	{r4, lr}
   187b8:	bl	192f0 <__assert_fail@plt+0x7f64>
   187bc:	cmp	r0, #0
   187c0:	popne	{r4, pc}
   187c4:	bl	18ce8 <__assert_fail@plt+0x795c>
   187c8:	push	{r4, lr}
   187cc:	bl	192f0 <__assert_fail@plt+0x7f64>
   187d0:	cmp	r0, #0
   187d4:	popne	{r4, pc}
   187d8:	bl	18ce8 <__assert_fail@plt+0x795c>
   187dc:	push	{r4, r5, r6, lr}
   187e0:	mov	r5, r0
   187e4:	mov	r4, r1
   187e8:	bl	1931c <__assert_fail@plt+0x7f90>
   187ec:	cmp	r0, #0
   187f0:	popne	{r4, r5, r6, pc}
   187f4:	adds	r4, r4, #0
   187f8:	movne	r4, #1
   187fc:	cmp	r5, #0
   18800:	orreq	r4, r4, #1
   18804:	cmp	r4, #0
   18808:	popeq	{r4, r5, r6, pc}
   1880c:	bl	18ce8 <__assert_fail@plt+0x795c>
   18810:	push	{r4, lr}
   18814:	cmp	r1, #0
   18818:	orreq	r1, r1, #1
   1881c:	bl	1931c <__assert_fail@plt+0x7f90>
   18820:	cmp	r0, #0
   18824:	popne	{r4, pc}
   18828:	bl	18ce8 <__assert_fail@plt+0x795c>
   1882c:	push	{r4, r5, r6, lr}
   18830:	mov	r6, r0
   18834:	mov	r5, r1
   18838:	mov	r4, r2
   1883c:	bl	19918 <__assert_fail@plt+0x858c>
   18840:	cmp	r0, #0
   18844:	popne	{r4, r5, r6, pc}
   18848:	cmp	r6, #0
   1884c:	beq	1885c <__assert_fail@plt+0x74d0>
   18850:	cmp	r5, #0
   18854:	cmpne	r4, #0
   18858:	popeq	{r4, r5, r6, pc}
   1885c:	bl	18ce8 <__assert_fail@plt+0x795c>
   18860:	b	1882c <__assert_fail@plt+0x74a0>
   18864:	cmp	r2, #0
   18868:	cmpne	r1, #0
   1886c:	moveq	r2, #1
   18870:	moveq	r1, r2
   18874:	push	{r4, lr}
   18878:	bl	19918 <__assert_fail@plt+0x858c>
   1887c:	cmp	r0, #0
   18880:	popne	{r4, pc}
   18884:	bl	18ce8 <__assert_fail@plt+0x795c>
   18888:	mov	r2, r1
   1888c:	mov	r1, r0
   18890:	mov	r0, #0
   18894:	b	1882c <__assert_fail@plt+0x74a0>
   18898:	mov	r2, r1
   1889c:	mov	r1, r0
   188a0:	mov	r0, #0
   188a4:	b	18864 <__assert_fail@plt+0x74d8>
   188a8:	push	{r4, r5, r6, lr}
   188ac:	subs	r6, r0, #0
   188b0:	sub	sp, sp, #8
   188b4:	mov	r5, r1
   188b8:	ldr	r4, [r1]
   188bc:	beq	188f8 <__assert_fail@plt+0x756c>
   188c0:	lsr	r1, r4, #1
   188c4:	add	r3, r1, #1
   188c8:	mvn	r3, r3
   188cc:	cmp	r4, r3
   188d0:	bhi	188f4 <__assert_fail@plt+0x7568>
   188d4:	add	r4, r4, #1
   188d8:	add	r4, r4, r1
   188dc:	mov	r0, r6
   188e0:	mov	r1, r4
   188e4:	bl	1882c <__assert_fail@plt+0x74a0>
   188e8:	str	r4, [r5]
   188ec:	add	sp, sp, #8
   188f0:	pop	{r4, r5, r6, pc}
   188f4:	bl	18ce8 <__assert_fail@plt+0x795c>
   188f8:	cmp	r4, #0
   188fc:	bne	188dc <__assert_fail@plt+0x7550>
   18900:	mov	r1, r2
   18904:	mov	r0, #64	; 0x40
   18908:	str	r2, [sp, #4]
   1890c:	bl	19a64 <__assert_fail@plt+0x86d8>
   18910:	ldr	r2, [sp, #4]
   18914:	cmp	r0, #0
   18918:	movne	r4, r0
   1891c:	addeq	r4, r0, #1
   18920:	b	188dc <__assert_fail@plt+0x7550>
   18924:	mov	r2, #1
   18928:	b	188a8 <__assert_fail@plt+0x751c>
   1892c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18930:	sub	sp, sp, #12
   18934:	ldr	r6, [r1]
   18938:	mov	sl, r1
   1893c:	mov	r9, r0
   18940:	asrs	r4, r6, #1
   18944:	mov	r5, r2
   18948:	mov	fp, r3
   1894c:	ldr	r7, [sp, #48]	; 0x30
   18950:	bmi	18abc <__assert_fail@plt+0x7730>
   18954:	mvn	r3, #-2147483648	; 0x80000000
   18958:	sub	r3, r3, r4
   1895c:	cmp	r6, r3
   18960:	movle	r3, #0
   18964:	movgt	r3, #1
   18968:	mvn	r8, fp
   1896c:	cmp	r3, #0
   18970:	addeq	r4, r4, r6
   18974:	mvnne	r4, #-2147483648	; 0x80000000
   18978:	lsr	r8, r8, #31
   1897c:	cmp	fp, r4
   18980:	movge	r3, #0
   18984:	andlt	r3, r8, #1
   18988:	cmp	r3, #0
   1898c:	beq	18a74 <__assert_fail@plt+0x76e8>
   18990:	cmp	r7, #0
   18994:	blt	18b44 <__assert_fail@plt+0x77b8>
   18998:	bne	18b3c <__assert_fail@plt+0x77b0>
   1899c:	mov	r2, #64	; 0x40
   189a0:	mov	r1, r7
   189a4:	mov	r0, r2
   189a8:	str	r2, [sp, #4]
   189ac:	bl	19c70 <__assert_fail@plt+0x88e4>
   189b0:	ldr	r2, [sp, #4]
   189b4:	mov	r1, r7
   189b8:	mov	r4, r0
   189bc:	mov	r0, r2
   189c0:	bl	19e90 <__assert_fail@plt+0x8b04>
   189c4:	ldr	r2, [sp, #4]
   189c8:	sub	r1, r2, r1
   189cc:	cmp	r9, #0
   189d0:	sub	r3, r4, r6
   189d4:	streq	r9, [sl]
   189d8:	cmp	r3, r5
   189dc:	bge	18a60 <__assert_fail@plt+0x76d4>
   189e0:	cmp	r5, #0
   189e4:	blt	18ad0 <__assert_fail@plt+0x7744>
   189e8:	cmp	r6, #0
   189ec:	blt	18a0c <__assert_fail@plt+0x7680>
   189f0:	mvn	r3, #-2147483648	; 0x80000000
   189f4:	sub	r3, r3, r5
   189f8:	cmp	r6, r3
   189fc:	movle	r3, #0
   18a00:	movgt	r3, #1
   18a04:	cmp	r3, #0
   18a08:	bne	18bcc <__assert_fail@plt+0x7840>
   18a0c:	add	r5, r6, r5
   18a10:	cmp	fp, r5
   18a14:	movge	r8, #0
   18a18:	andlt	r8, r8, #1
   18a1c:	cmp	r8, #0
   18a20:	mov	r4, r5
   18a24:	bne	18bcc <__assert_fail@plt+0x7840>
   18a28:	cmp	r7, #0
   18a2c:	blt	18ae4 <__assert_fail@plt+0x7758>
   18a30:	beq	18a5c <__assert_fail@plt+0x76d0>
   18a34:	cmp	r5, #0
   18a38:	blt	18b8c <__assert_fail@plt+0x7800>
   18a3c:	mov	r1, r7
   18a40:	mvn	r0, #-2147483648	; 0x80000000
   18a44:	bl	19c70 <__assert_fail@plt+0x88e4>
   18a48:	cmp	r5, r0
   18a4c:	movle	r0, #0
   18a50:	movgt	r0, #1
   18a54:	cmp	r0, #0
   18a58:	bne	18bcc <__assert_fail@plt+0x7840>
   18a5c:	mul	r1, r5, r7
   18a60:	mov	r0, r9
   18a64:	bl	187dc <__assert_fail@plt+0x7450>
   18a68:	str	r4, [sl]
   18a6c:	add	sp, sp, #12
   18a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a74:	cmp	r7, #0
   18a78:	blt	18b10 <__assert_fail@plt+0x7784>
   18a7c:	beq	1899c <__assert_fail@plt+0x7610>
   18a80:	cmp	r4, #0
   18a84:	blt	18b4c <__assert_fail@plt+0x77c0>
   18a88:	mov	r1, r7
   18a8c:	mvn	r0, #-2147483648	; 0x80000000
   18a90:	bl	19c70 <__assert_fail@plt+0x88e4>
   18a94:	cmp	r0, r4
   18a98:	movge	r0, #0
   18a9c:	movlt	r0, #1
   18aa0:	cmp	r0, #0
   18aa4:	mvnne	r2, #-2147483648	; 0x80000000
   18aa8:	bne	189a0 <__assert_fail@plt+0x7614>
   18aac:	mul	r1, r7, r4
   18ab0:	cmp	r1, #63	; 0x3f
   18ab4:	bgt	189cc <__assert_fail@plt+0x7640>
   18ab8:	b	1899c <__assert_fail@plt+0x7610>
   18abc:	rsb	r3, r4, #-2147483648	; 0x80000000
   18ac0:	cmp	r6, r3
   18ac4:	movge	r3, #0
   18ac8:	movlt	r3, #1
   18acc:	b	18968 <__assert_fail@plt+0x75dc>
   18ad0:	rsb	r3, r5, #-2147483648	; 0x80000000
   18ad4:	cmp	r6, r3
   18ad8:	movge	r3, #0
   18adc:	movlt	r3, #1
   18ae0:	b	18a04 <__assert_fail@plt+0x7678>
   18ae4:	cmp	r5, #0
   18ae8:	blt	18b70 <__assert_fail@plt+0x77e4>
   18aec:	cmn	r7, #1
   18af0:	beq	18a5c <__assert_fail@plt+0x76d0>
   18af4:	mov	r1, r7
   18af8:	mov	r0, #-2147483648	; 0x80000000
   18afc:	bl	19c70 <__assert_fail@plt+0x88e4>
   18b00:	cmp	r5, r0
   18b04:	movle	r0, #0
   18b08:	movgt	r0, #1
   18b0c:	b	18a54 <__assert_fail@plt+0x76c8>
   18b10:	cmp	r4, #0
   18b14:	blt	18bb0 <__assert_fail@plt+0x7824>
   18b18:	cmn	r7, #1
   18b1c:	beq	18aac <__assert_fail@plt+0x7720>
   18b20:	mov	r1, r7
   18b24:	mov	r0, #-2147483648	; 0x80000000
   18b28:	bl	19c70 <__assert_fail@plt+0x88e4>
   18b2c:	cmp	r0, r4
   18b30:	movge	r0, #0
   18b34:	movlt	r0, #1
   18b38:	b	18aa0 <__assert_fail@plt+0x7714>
   18b3c:	mov	r4, fp
   18b40:	b	18a88 <__assert_fail@plt+0x76fc>
   18b44:	mov	r4, fp
   18b48:	b	18b18 <__assert_fail@plt+0x778c>
   18b4c:	cmn	r4, #1
   18b50:	beq	18aac <__assert_fail@plt+0x7720>
   18b54:	mov	r1, r4
   18b58:	mov	r0, #-2147483648	; 0x80000000
   18b5c:	bl	19c70 <__assert_fail@plt+0x88e4>
   18b60:	cmp	r7, r0
   18b64:	movle	r0, #0
   18b68:	movgt	r0, #1
   18b6c:	b	18aa0 <__assert_fail@plt+0x7714>
   18b70:	mov	r1, r7
   18b74:	mvn	r0, #-2147483648	; 0x80000000
   18b78:	bl	19c70 <__assert_fail@plt+0x88e4>
   18b7c:	cmp	r5, r0
   18b80:	movge	r0, #0
   18b84:	movlt	r0, #1
   18b88:	b	18a54 <__assert_fail@plt+0x76c8>
   18b8c:	cmn	r5, #1
   18b90:	beq	18a5c <__assert_fail@plt+0x76d0>
   18b94:	mov	r1, r5
   18b98:	mov	r0, #-2147483648	; 0x80000000
   18b9c:	bl	19c70 <__assert_fail@plt+0x88e4>
   18ba0:	cmp	r7, r0
   18ba4:	movle	r0, #0
   18ba8:	movgt	r0, #1
   18bac:	b	18a54 <__assert_fail@plt+0x76c8>
   18bb0:	mov	r1, r7
   18bb4:	mvn	r0, #-2147483648	; 0x80000000
   18bb8:	bl	19c70 <__assert_fail@plt+0x88e4>
   18bbc:	cmp	r0, r4
   18bc0:	movle	r0, #0
   18bc4:	movgt	r0, #1
   18bc8:	b	18aa0 <__assert_fail@plt+0x7714>
   18bcc:	bl	18ce8 <__assert_fail@plt+0x795c>
   18bd0:	push	{r4, lr}
   18bd4:	mov	r1, #1
   18bd8:	bl	192a8 <__assert_fail@plt+0x7f1c>
   18bdc:	cmp	r0, #0
   18be0:	popne	{r4, pc}
   18be4:	bl	18ce8 <__assert_fail@plt+0x795c>
   18be8:	push	{r4, lr}
   18bec:	mov	r1, #1
   18bf0:	bl	192a8 <__assert_fail@plt+0x7f1c>
   18bf4:	cmp	r0, #0
   18bf8:	popne	{r4, pc}
   18bfc:	bl	18ce8 <__assert_fail@plt+0x795c>
   18c00:	push	{r4, lr}
   18c04:	bl	192a8 <__assert_fail@plt+0x7f1c>
   18c08:	cmp	r0, #0
   18c0c:	popne	{r4, pc}
   18c10:	bl	18ce8 <__assert_fail@plt+0x795c>
   18c14:	push	{r4, lr}
   18c18:	bl	192a8 <__assert_fail@plt+0x7f1c>
   18c1c:	cmp	r0, #0
   18c20:	popne	{r4, pc}
   18c24:	bl	18ce8 <__assert_fail@plt+0x795c>
   18c28:	push	{r4, r5, r6, lr}
   18c2c:	mov	r6, r0
   18c30:	mov	r0, r1
   18c34:	mov	r4, r1
   18c38:	bl	192f0 <__assert_fail@plt+0x7f64>
   18c3c:	subs	r5, r0, #0
   18c40:	beq	18c58 <__assert_fail@plt+0x78cc>
   18c44:	mov	r2, r4
   18c48:	mov	r1, r6
   18c4c:	bl	110c8 <memcpy@plt>
   18c50:	mov	r0, r5
   18c54:	pop	{r4, r5, r6, pc}
   18c58:	bl	18ce8 <__assert_fail@plt+0x795c>
   18c5c:	push	{r4, r5, r6, lr}
   18c60:	mov	r6, r0
   18c64:	mov	r0, r1
   18c68:	mov	r4, r1
   18c6c:	bl	192f0 <__assert_fail@plt+0x7f64>
   18c70:	subs	r5, r0, #0
   18c74:	beq	18c8c <__assert_fail@plt+0x7900>
   18c78:	mov	r2, r4
   18c7c:	mov	r1, r6
   18c80:	bl	110c8 <memcpy@plt>
   18c84:	mov	r0, r5
   18c88:	pop	{r4, r5, r6, pc}
   18c8c:	bl	18ce8 <__assert_fail@plt+0x795c>
   18c90:	push	{r4, r5, r6, lr}
   18c94:	mov	r6, r0
   18c98:	add	r0, r1, #1
   18c9c:	mov	r4, r1
   18ca0:	bl	192f0 <__assert_fail@plt+0x7f64>
   18ca4:	subs	r5, r0, #0
   18ca8:	beq	18cc8 <__assert_fail@plt+0x793c>
   18cac:	mov	r3, #0
   18cb0:	mov	r1, r6
   18cb4:	strb	r3, [r5, r4]
   18cb8:	mov	r2, r4
   18cbc:	bl	110c8 <memcpy@plt>
   18cc0:	mov	r0, r5
   18cc4:	pop	{r4, r5, r6, pc}
   18cc8:	bl	18ce8 <__assert_fail@plt+0x795c>
   18ccc:	push	{r4, lr}
   18cd0:	mov	r4, r0
   18cd4:	bl	1120c <strlen@plt>
   18cd8:	add	r1, r0, #1
   18cdc:	mov	r0, r4
   18ce0:	pop	{r4, lr}
   18ce4:	b	18c28 <__assert_fail@plt+0x789c>
   18ce8:	ldr	r3, [pc, #44]	; 18d1c <__assert_fail@plt+0x7990>
   18cec:	push	{r4, lr}
   18cf0:	mov	r2, #5
   18cf4:	ldr	r1, [pc, #36]	; 18d20 <__assert_fail@plt+0x7994>
   18cf8:	mov	r0, #0
   18cfc:	ldr	r4, [r3]
   18d00:	bl	11104 <dcgettext@plt>
   18d04:	ldr	r2, [pc, #24]	; 18d24 <__assert_fail@plt+0x7998>
   18d08:	mov	r1, #0
   18d0c:	mov	r3, r0
   18d10:	mov	r0, r4
   18d14:	bl	11194 <error@plt>
   18d18:	bl	11344 <abort@plt>
   18d1c:	andeq	ip, r2, r0, asr #2
   18d20:	andeq	fp, r1, r4, lsr #14
   18d24:	andeq	sl, r1, r0, lsl #25
   18d28:	push	{r4, lr}
   18d2c:	orr	r1, r1, #512	; 0x200
   18d30:	bl	140b8 <__assert_fail@plt+0x2d2c>
   18d34:	cmp	r0, #0
   18d38:	popne	{r4, pc}
   18d3c:	bl	1123c <__errno_location@plt>
   18d40:	ldr	r3, [r0]
   18d44:	cmp	r3, #22
   18d48:	beq	18d50 <__assert_fail@plt+0x79c4>
   18d4c:	bl	18ce8 <__assert_fail@plt+0x795c>
   18d50:	ldr	r3, [pc, #12]	; 18d64 <__assert_fail@plt+0x79d8>
   18d54:	mov	r2, #41	; 0x29
   18d58:	ldr	r1, [pc, #8]	; 18d68 <__assert_fail@plt+0x79dc>
   18d5c:	ldr	r0, [pc, #8]	; 18d6c <__assert_fail@plt+0x79e0>
   18d60:	bl	1138c <__assert_fail@plt>
   18d64:	andeq	fp, r1, r8, lsr r7
   18d68:	andeq	fp, r1, r4, asr #14
   18d6c:	andeq	fp, r1, r0, asr r7
   18d70:	ldr	r3, [r0, #48]	; 0x30
   18d74:	and	r3, r3, #17
   18d78:	cmp	r3, #16
   18d7c:	beq	18da0 <__assert_fail@plt+0x7a14>
   18d80:	cmp	r3, #17
   18d84:	beq	18d90 <__assert_fail@plt+0x7a04>
   18d88:	mov	r0, #0
   18d8c:	bx	lr
   18d90:	ldr	r0, [r1, #48]	; 0x30
   18d94:	adds	r0, r0, #0
   18d98:	movne	r0, #1
   18d9c:	bx	lr
   18da0:	mov	r0, #1
   18da4:	bx	lr
   18da8:	cmp	r2, #0
   18dac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18db0:	beq	18e48 <__assert_fail@plt+0x7abc>
   18db4:	mov	r5, #0
   18db8:	sub	r4, r2, #1
   18dbc:	mov	r6, r1
   18dc0:	mov	r7, r0
   18dc4:	mov	r9, r5
   18dc8:	mvn	sl, #0
   18dcc:	mov	r8, #1
   18dd0:	b	18df4 <__assert_fail@plt+0x7a68>
   18dd4:	ldr	r3, [r7]
   18dd8:	mul	r3, r6, r3
   18ddc:	sub	r4, r4, #1
   18de0:	mov	r2, r9
   18de4:	cmn	r4, #1
   18de8:	str	r3, [r7]
   18dec:	orr	r5, r5, r2
   18df0:	beq	18e30 <__assert_fail@plt+0x7aa4>
   18df4:	cmp	r6, #0
   18df8:	blt	18e38 <__assert_fail@plt+0x7aac>
   18dfc:	mov	r1, r6
   18e00:	mov	r0, sl
   18e04:	beq	18dd4 <__assert_fail@plt+0x7a48>
   18e08:	bl	19a64 <__assert_fail@plt+0x86d8>
   18e0c:	ldr	r3, [r7]
   18e10:	cmp	r0, r3
   18e14:	bcs	18dd8 <__assert_fail@plt+0x7a4c>
   18e18:	sub	r4, r4, #1
   18e1c:	mov	r2, r8
   18e20:	cmn	r4, #1
   18e24:	str	sl, [r7]
   18e28:	orr	r5, r5, r2
   18e2c:	bne	18df4 <__assert_fail@plt+0x7a68>
   18e30:	mov	r0, r5
   18e34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e38:	ldr	r3, [r7]
   18e3c:	cmp	r3, #0
   18e40:	bne	18e18 <__assert_fail@plt+0x7a8c>
   18e44:	b	18dd8 <__assert_fail@plt+0x7a4c>
   18e48:	mov	r5, r2
   18e4c:	b	18e30 <__assert_fail@plt+0x7aa4>
   18e50:	cmp	r2, #36	; 0x24
   18e54:	push	{r4, r5, r6, r7, r8, r9, lr}
   18e58:	sub	sp, sp, #12
   18e5c:	bhi	19288 <__assert_fail@plt+0x7efc>
   18e60:	cmp	r1, #0
   18e64:	mov	r6, r1
   18e68:	mov	r9, r2
   18e6c:	mov	r5, r0
   18e70:	mov	r8, r3
   18e74:	moveq	r6, sp
   18e78:	bl	1123c <__errno_location@plt>
   18e7c:	mov	r3, #0
   18e80:	str	r3, [r0]
   18e84:	mov	r7, r0
   18e88:	bl	111e8 <__ctype_b_loc@plt>
   18e8c:	ldrb	r1, [r5]
   18e90:	mov	r2, r5
   18e94:	ldr	r0, [r0]
   18e98:	b	18ea0 <__assert_fail@plt+0x7b14>
   18e9c:	ldrb	r1, [r2, #1]!
   18ea0:	lsl	r3, r1, #1
   18ea4:	ldrh	r3, [r0, r3]
   18ea8:	ands	r4, r3, #8192	; 0x2000
   18eac:	bne	18e9c <__assert_fail@plt+0x7b10>
   18eb0:	cmp	r1, #45	; 0x2d
   18eb4:	bne	18ec8 <__assert_fail@plt+0x7b3c>
   18eb8:	mov	r4, #4
   18ebc:	mov	r0, r4
   18ec0:	add	sp, sp, #12
   18ec4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18ec8:	mov	r2, r9
   18ecc:	mov	r1, r6
   18ed0:	mov	r0, r5
   18ed4:	bl	11200 <strtoul@plt>
   18ed8:	ldr	r9, [r6]
   18edc:	cmp	r5, r9
   18ee0:	str	r0, [sp, #4]
   18ee4:	beq	18f2c <__assert_fail@plt+0x7ba0>
   18ee8:	ldr	r4, [r7]
   18eec:	cmp	r4, #0
   18ef0:	bne	18f1c <__assert_fail@plt+0x7b90>
   18ef4:	ldr	r3, [sp, #40]	; 0x28
   18ef8:	cmp	r3, #0
   18efc:	beq	18f0c <__assert_fail@plt+0x7b80>
   18f00:	ldrb	r7, [r9]
   18f04:	cmp	r7, #0
   18f08:	bne	18f60 <__assert_fail@plt+0x7bd4>
   18f0c:	str	r0, [r8]
   18f10:	mov	r0, r4
   18f14:	add	sp, sp, #12
   18f18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18f1c:	cmp	r4, #34	; 0x22
   18f20:	bne	18eb8 <__assert_fail@plt+0x7b2c>
   18f24:	mov	r4, #1
   18f28:	b	18ef4 <__assert_fail@plt+0x7b68>
   18f2c:	ldr	r3, [sp, #40]	; 0x28
   18f30:	cmp	r3, #0
   18f34:	beq	18eb8 <__assert_fail@plt+0x7b2c>
   18f38:	ldrb	r1, [r9]
   18f3c:	cmp	r1, #0
   18f40:	beq	18eb8 <__assert_fail@plt+0x7b2c>
   18f44:	mov	r0, r3
   18f48:	bl	11218 <strchr@plt>
   18f4c:	cmp	r0, #0
   18f50:	beq	18eb8 <__assert_fail@plt+0x7b2c>
   18f54:	ldrb	r7, [r9]
   18f58:	mov	r3, #1
   18f5c:	str	r3, [sp, #4]
   18f60:	mov	r1, r7
   18f64:	ldr	r0, [sp, #40]	; 0x28
   18f68:	bl	11218 <strchr@plt>
   18f6c:	cmp	r0, #0
   18f70:	beq	19250 <__assert_fail@plt+0x7ec4>
   18f74:	sub	r3, r7, #69	; 0x45
   18f78:	cmp	r3, #47	; 0x2f
   18f7c:	ldrls	pc, [pc, r3, lsl #2]
   18f80:	b	19044 <__assert_fail@plt+0x7cb8>
   18f84:	andeq	r9, r1, r4, lsr r1
   18f88:	andeq	r9, r1, r4, asr #32
   18f8c:	andeq	r9, r1, r4, lsr r1
   18f90:	andeq	r9, r1, r4, asr #32
   18f94:	andeq	r9, r1, r4, asr #32
   18f98:	andeq	r9, r1, r4, asr #32
   18f9c:	andeq	r9, r1, r4, lsr r1
   18fa0:	andeq	r9, r1, r4, asr #32
   18fa4:	andeq	r9, r1, r4, lsr r1
   18fa8:	andeq	r9, r1, r4, asr #32
   18fac:	andeq	r9, r1, r4, asr #32
   18fb0:	andeq	r9, r1, r4, lsr r1
   18fb4:	andeq	r9, r1, r4, asr #32
   18fb8:	andeq	r9, r1, r4, asr #32
   18fbc:	andeq	r9, r1, r4, asr #32
   18fc0:	andeq	r9, r1, r4, lsr r1
   18fc4:	andeq	r9, r1, r4, asr #32
   18fc8:	andeq	r9, r1, r4, asr #32
   18fcc:	andeq	r9, r1, r4, asr #32
   18fd0:	andeq	r9, r1, r4, asr #32
   18fd4:	andeq	r9, r1, r4, lsr r1
   18fd8:	andeq	r9, r1, r4, lsr r1
   18fdc:	andeq	r9, r1, r4, asr #32
   18fe0:	andeq	r9, r1, r4, asr #32
   18fe4:	andeq	r9, r1, r4, asr #32
   18fe8:	andeq	r9, r1, r4, asr #32
   18fec:	andeq	r9, r1, r4, asr #32
   18ff0:	andeq	r9, r1, r4, asr #32
   18ff4:	andeq	r9, r1, r4, asr #32
   18ff8:	andeq	r9, r1, r4, asr #32
   18ffc:	andeq	r9, r1, r4, asr #32
   19000:	andeq	r9, r1, r4, asr #32
   19004:	andeq	r9, r1, r4, asr #32
   19008:	andeq	r9, r1, r4, asr #32
   1900c:	andeq	r9, r1, r4, lsr r1
   19010:	andeq	r9, r1, r4, asr #32
   19014:	andeq	r9, r1, r4, asr #32
   19018:	andeq	r9, r1, r4, asr #32
   1901c:	andeq	r9, r1, r4, lsr r1
   19020:	andeq	r9, r1, r4, asr #32
   19024:	andeq	r9, r1, r4, lsr r1
   19028:	andeq	r9, r1, r4, asr #32
   1902c:	andeq	r9, r1, r4, asr #32
   19030:	andeq	r9, r1, r4, asr #32
   19034:	andeq	r9, r1, r4, asr #32
   19038:	andeq	r9, r1, r4, asr #32
   1903c:	andeq	r9, r1, r4, asr #32
   19040:	andeq	r9, r1, r4, lsr r1
   19044:	mov	r5, #1
   19048:	mov	r1, #1024	; 0x400
   1904c:	sub	r7, r7, #66	; 0x42
   19050:	cmp	r7, #53	; 0x35
   19054:	ldrls	pc, [pc, r7, lsl #2]
   19058:	b	19250 <__assert_fail@plt+0x7ec4>
   1905c:	andeq	r9, r1, r4, lsr r2
   19060:	andeq	r9, r1, r0, asr r2
   19064:	andeq	r9, r1, r0, asr r2
   19068:	andeq	r9, r1, ip, lsr #4
   1906c:	andeq	r9, r1, r0, asr r2
   19070:	andeq	r9, r1, r4, lsr #4
   19074:	andeq	r9, r1, r0, asr r2
   19078:	andeq	r9, r1, r0, asr r2
   1907c:	andeq	r9, r1, r0, asr r2
   19080:	andeq	r9, r1, ip, lsl r2
   19084:	andeq	r9, r1, r0, asr r2
   19088:	andeq	r9, r1, r4, lsl r2
   1908c:	andeq	r9, r1, r0, asr r2
   19090:	andeq	r9, r1, r0, asr r2
   19094:	andeq	r9, r1, ip, lsl #4
   19098:	andeq	r9, r1, r0, asr r2
   1909c:	andeq	r9, r1, r0, asr r2
   190a0:	andeq	r9, r1, r0, asr r2
   190a4:	strdeq	r9, [r1], -r0
   190a8:	andeq	r9, r1, r0, asr r2
   190ac:	andeq	r9, r1, r0, asr r2
   190b0:	andeq	r9, r1, r0, asr r2
   190b4:	andeq	r9, r1, r0, asr r2
   190b8:	andeq	r9, r1, r8, ror #3
   190bc:	andeq	r9, r1, ip, asr #3
   190c0:	andeq	r9, r1, r0, asr r2
   190c4:	andeq	r9, r1, r0, asr r2
   190c8:	andeq	r9, r1, r0, asr r2
   190cc:	andeq	r9, r1, r0, asr r2
   190d0:	andeq	r9, r1, r0, asr r2
   190d4:	andeq	r9, r1, r0, asr r2
   190d8:	andeq	r9, r1, r0, asr r2
   190dc:			; <UNDEFINED> instruction: 0x000191b0
   190e0:	andeq	r9, r1, r4, lsr #3
   190e4:	andeq	r9, r1, r0, asr r2
   190e8:	andeq	r9, r1, r0, asr r2
   190ec:	andeq	r9, r1, r0, asr r2
   190f0:	andeq	r9, r1, r4, lsr #4
   190f4:	andeq	r9, r1, r0, asr r2
   190f8:	andeq	r9, r1, r0, asr r2
   190fc:	andeq	r9, r1, r0, asr r2
   19100:	andeq	r9, r1, ip, lsl r2
   19104:	andeq	r9, r1, r0, asr r2
   19108:	andeq	r9, r1, r4, lsl r2
   1910c:	andeq	r9, r1, r0, asr r2
   19110:	andeq	r9, r1, r0, asr r2
   19114:	andeq	r9, r1, r0, asr r2
   19118:	andeq	r9, r1, r0, asr r2
   1911c:	andeq	r9, r1, r0, asr r2
   19120:	andeq	r9, r1, r0, asr r2
   19124:	strdeq	r9, [r1], -r0
   19128:	andeq	r9, r1, r0, asr r2
   1912c:	andeq	r9, r1, r0, asr r2
   19130:	andeq	r9, r1, r0, ror r1
   19134:	mov	r1, #48	; 0x30
   19138:	ldr	r0, [sp, #40]	; 0x28
   1913c:	bl	11218 <strchr@plt>
   19140:	cmp	r0, #0
   19144:	beq	19044 <__assert_fail@plt+0x7cb8>
   19148:	ldrb	r3, [r9, #1]
   1914c:	cmp	r3, #68	; 0x44
   19150:	beq	19164 <__assert_fail@plt+0x7dd8>
   19154:	cmp	r3, #105	; 0x69
   19158:	beq	19260 <__assert_fail@plt+0x7ed4>
   1915c:	cmp	r3, #66	; 0x42
   19160:	bne	19044 <__assert_fail@plt+0x7cb8>
   19164:	mov	r5, #2
   19168:	mov	r1, #1000	; 0x3e8
   1916c:	b	1904c <__assert_fail@plt+0x7cc0>
   19170:	ldr	r0, [sp, #4]
   19174:	cmp	r0, #0
   19178:	lslge	r0, r0, #1
   1917c:	strge	r0, [sp, #4]
   19180:	movge	r3, #0
   19184:	blt	19278 <__assert_fail@plt+0x7eec>
   19188:	add	r2, r9, r5
   1918c:	str	r2, [r6]
   19190:	ldrb	r2, [r9, r5]
   19194:	orr	r4, r4, r3
   19198:	cmp	r2, #0
   1919c:	orrne	r4, r4, #2
   191a0:	b	18f0c <__assert_fail@plt+0x7b80>
   191a4:	ldr	r0, [sp, #4]
   191a8:	mov	r3, #0
   191ac:	b	19188 <__assert_fail@plt+0x7dfc>
   191b0:	ldr	r0, [sp, #4]
   191b4:	cmp	r0, #8388608	; 0x800000
   191b8:	bcs	19278 <__assert_fail@plt+0x7eec>
   191bc:	lsl	r0, r0, #9
   191c0:	str	r0, [sp, #4]
   191c4:	mov	r3, #0
   191c8:	b	19188 <__assert_fail@plt+0x7dfc>
   191cc:	mov	r2, #7
   191d0:	add	r0, sp, #4
   191d4:	bl	18da8 <__assert_fail@plt+0x7a1c>
   191d8:	ldr	r9, [r6]
   191dc:	mov	r3, r0
   191e0:	ldr	r0, [sp, #4]
   191e4:	b	19188 <__assert_fail@plt+0x7dfc>
   191e8:	mov	r2, #8
   191ec:	b	191d0 <__assert_fail@plt+0x7e44>
   191f0:	mov	r2, #4
   191f4:	add	r0, sp, r2
   191f8:	bl	18da8 <__assert_fail@plt+0x7a1c>
   191fc:	ldr	r9, [r6]
   19200:	mov	r3, r0
   19204:	ldr	r0, [sp, #4]
   19208:	b	19188 <__assert_fail@plt+0x7dfc>
   1920c:	mov	r2, #5
   19210:	b	191d0 <__assert_fail@plt+0x7e44>
   19214:	mov	r2, #2
   19218:	b	191d0 <__assert_fail@plt+0x7e44>
   1921c:	mov	r2, #1
   19220:	b	191d0 <__assert_fail@plt+0x7e44>
   19224:	mov	r2, #3
   19228:	b	191d0 <__assert_fail@plt+0x7e44>
   1922c:	mov	r2, #6
   19230:	b	191d0 <__assert_fail@plt+0x7e44>
   19234:	ldr	r0, [sp, #4]
   19238:	cmp	r0, #4194304	; 0x400000
   1923c:	bcs	19278 <__assert_fail@plt+0x7eec>
   19240:	lsl	r0, r0, #10
   19244:	str	r0, [sp, #4]
   19248:	mov	r3, #0
   1924c:	b	19188 <__assert_fail@plt+0x7dfc>
   19250:	ldr	r3, [sp, #4]
   19254:	orr	r4, r4, #2
   19258:	str	r3, [r8]
   1925c:	b	18ebc <__assert_fail@plt+0x7b30>
   19260:	ldrb	r5, [r9, #2]
   19264:	mov	r1, #1024	; 0x400
   19268:	cmp	r5, #66	; 0x42
   1926c:	movne	r5, #1
   19270:	moveq	r5, #3
   19274:	b	1904c <__assert_fail@plt+0x7cc0>
   19278:	mvn	r0, #0
   1927c:	str	r0, [sp, #4]
   19280:	mov	r3, #1
   19284:	b	19188 <__assert_fail@plt+0x7dfc>
   19288:	ldr	r3, [pc, #12]	; 1929c <__assert_fail@plt+0x7f10>
   1928c:	mov	r2, #85	; 0x55
   19290:	ldr	r1, [pc, #8]	; 192a0 <__assert_fail@plt+0x7f14>
   19294:	ldr	r0, [pc, #8]	; 192a4 <__assert_fail@plt+0x7f18>
   19298:	bl	1138c <__assert_fail@plt>
   1929c:	andeq	fp, r1, r0, ror #14
   192a0:	andeq	fp, r1, ip, ror #14
   192a4:	andeq	fp, r1, ip, ror r7
   192a8:	cmp	r1, #0
   192ac:	cmpne	r0, #0
   192b0:	moveq	r1, #1
   192b4:	moveq	r0, r1
   192b8:	umull	r2, r3, r0, r1
   192bc:	adds	r3, r3, #0
   192c0:	movne	r3, #1
   192c4:	cmp	r2, #0
   192c8:	blt	192d8 <__assert_fail@plt+0x7f4c>
   192cc:	cmp	r3, #0
   192d0:	bne	192d8 <__assert_fail@plt+0x7f4c>
   192d4:	b	11038 <calloc@plt>
   192d8:	push	{r4, lr}
   192dc:	bl	1123c <__errno_location@plt>
   192e0:	mov	r3, #12
   192e4:	str	r3, [r0]
   192e8:	mov	r0, #0
   192ec:	pop	{r4, pc}
   192f0:	cmp	r0, #0
   192f4:	moveq	r0, #1
   192f8:	cmp	r0, #0
   192fc:	blt	19304 <__assert_fail@plt+0x7f78>
   19300:	b	111ac <malloc@plt>
   19304:	push	{r4, lr}
   19308:	bl	1123c <__errno_location@plt>
   1930c:	mov	r3, #12
   19310:	str	r3, [r0]
   19314:	mov	r0, #0
   19318:	pop	{r4, pc}
   1931c:	cmp	r0, #0
   19320:	beq	19344 <__assert_fail@plt+0x7fb8>
   19324:	cmp	r1, #0
   19328:	push	{lr}		; (str lr, [sp, #-4]!)
   1932c:	sub	sp, sp, #12
   19330:	beq	1934c <__assert_fail@plt+0x7fc0>
   19334:	blt	19364 <__assert_fail@plt+0x7fd8>
   19338:	add	sp, sp, #12
   1933c:	pop	{lr}		; (ldr lr, [sp], #4)
   19340:	b	11110 <realloc@plt>
   19344:	mov	r0, r1
   19348:	b	192f0 <__assert_fail@plt+0x7f64>
   1934c:	str	r1, [sp, #4]
   19350:	bl	12c84 <__assert_fail@plt+0x18f8>
   19354:	ldr	r3, [sp, #4]
   19358:	mov	r0, r3
   1935c:	add	sp, sp, #12
   19360:	pop	{pc}		; (ldr pc, [sp], #4)
   19364:	bl	1123c <__errno_location@plt>
   19368:	mov	r2, #12
   1936c:	mov	r3, #0
   19370:	str	r2, [r0]
   19374:	b	19358 <__assert_fail@plt+0x7fcc>
   19378:	push	{r4, r5, r6, lr}
   1937c:	mov	r4, r0
   19380:	bl	1117c <__fpending@plt>
   19384:	ldr	r5, [r4]
   19388:	and	r5, r5, #32
   1938c:	mov	r6, r0
   19390:	mov	r0, r4
   19394:	bl	194e4 <__assert_fail@plt+0x8158>
   19398:	cmp	r5, #0
   1939c:	mov	r4, r0
   193a0:	bne	193c0 <__assert_fail@plt+0x8034>
   193a4:	cmp	r0, #0
   193a8:	beq	193b8 <__assert_fail@plt+0x802c>
   193ac:	cmp	r6, #0
   193b0:	beq	193dc <__assert_fail@plt+0x8050>
   193b4:	mvn	r4, #0
   193b8:	mov	r0, r4
   193bc:	pop	{r4, r5, r6, pc}
   193c0:	cmp	r0, #0
   193c4:	bne	193b4 <__assert_fail@plt+0x8028>
   193c8:	bl	1123c <__errno_location@plt>
   193cc:	str	r4, [r0]
   193d0:	mvn	r4, #0
   193d4:	mov	r0, r4
   193d8:	pop	{r4, r5, r6, pc}
   193dc:	bl	1123c <__errno_location@plt>
   193e0:	ldr	r4, [r0]
   193e4:	subs	r4, r4, #9
   193e8:	mvnne	r4, #0
   193ec:	mov	r0, r4
   193f0:	pop	{r4, r5, r6, pc}
   193f4:	push	{r4, r5}
   193f8:	mov	r4, #0
   193fc:	mov	r5, #0
   19400:	ldr	r3, [pc, #12]	; 19414 <__assert_fail@plt+0x8088>
   19404:	strd	r4, [r0, #16]
   19408:	str	r3, [r0, #24]
   1940c:	pop	{r4, r5}
   19410:	bx	lr
   19414:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19418:	ldr	r3, [pc, #180]	; 194d4 <__assert_fail@plt+0x8148>
   1941c:	ldr	r2, [r0, #24]
   19420:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19424:	cmp	r2, r3
   19428:	bne	194c0 <__assert_fail@plt+0x8134>
   1942c:	ldrd	r6, [r0, #16]
   19430:	orrs	r3, r6, r7
   19434:	bne	19460 <__assert_fail@plt+0x80d4>
   19438:	mov	r2, #1
   1943c:	mov	r3, #0
   19440:	ldrd	r8, [r1, #96]	; 0x60
   19444:	strd	r2, [r0, #16]
   19448:	ldrd	r2, [r1]
   1944c:	mov	r1, #0
   19450:	strd	r8, [r0]
   19454:	strd	r2, [r0, #8]
   19458:	mov	r0, r1
   1945c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19460:	ldrd	r8, [r1, #96]	; 0x60
   19464:	ldrd	r2, [r0]
   19468:	cmp	r9, r3
   1946c:	cmpeq	r8, r2
   19470:	beq	194a8 <__assert_fail@plt+0x811c>
   19474:	adds	r2, r6, #1
   19478:	adc	r3, r7, #0
   1947c:	and	r6, r6, r2
   19480:	and	r7, r7, r3
   19484:	orrs	ip, r6, r7
   19488:	strd	r2, [r0, #16]
   1948c:	movne	r1, #0
   19490:	bne	19458 <__assert_fail@plt+0x80cc>
   19494:	orrs	r3, r2, r3
   19498:	bne	19448 <__assert_fail@plt+0x80bc>
   1949c:	mov	r1, #1
   194a0:	mov	r0, r1
   194a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194a8:	ldrd	r4, [r1]
   194ac:	ldrd	r2, [r0, #8]
   194b0:	cmp	r5, r3
   194b4:	cmpeq	r4, r2
   194b8:	bne	19474 <__assert_fail@plt+0x80e8>
   194bc:	b	1949c <__assert_fail@plt+0x8110>
   194c0:	ldr	r3, [pc, #16]	; 194d8 <__assert_fail@plt+0x814c>
   194c4:	mov	r2, #60	; 0x3c
   194c8:	ldr	r1, [pc, #12]	; 194dc <__assert_fail@plt+0x8150>
   194cc:	ldr	r0, [pc, #12]	; 194e0 <__assert_fail@plt+0x8154>
   194d0:	bl	1138c <__assert_fail@plt>
   194d4:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   194d8:	andeq	fp, r1, r4, lsr #15
   194dc:			; <UNDEFINED> instruction: 0x0001b7b0
   194e0:	andeq	fp, r1, r4, asr #15
   194e4:	push	{r4, r5, lr}
   194e8:	sub	sp, sp, #12
   194ec:	mov	r4, r0
   194f0:	bl	1126c <fileno@plt>
   194f4:	cmp	r0, #0
   194f8:	mov	r0, r4
   194fc:	blt	19578 <__assert_fail@plt+0x81ec>
   19500:	bl	111c4 <__freading@plt>
   19504:	cmp	r0, #0
   19508:	bne	19544 <__assert_fail@plt+0x81b8>
   1950c:	mov	r0, r4
   19510:	bl	19790 <__assert_fail@plt+0x8404>
   19514:	cmp	r0, #0
   19518:	beq	19574 <__assert_fail@plt+0x81e8>
   1951c:	bl	1123c <__errno_location@plt>
   19520:	mov	r5, r0
   19524:	mov	r0, r4
   19528:	ldr	r4, [r5]
   1952c:	bl	11284 <fclose@plt>
   19530:	cmp	r4, #0
   19534:	mvnne	r0, #0
   19538:	strne	r4, [r5]
   1953c:	add	sp, sp, #12
   19540:	pop	{r4, r5, pc}
   19544:	mov	r0, r4
   19548:	bl	1126c <fileno@plt>
   1954c:	mov	r3, #1
   19550:	str	r3, [sp]
   19554:	mov	r2, #0
   19558:	mov	r3, #0
   1955c:	bl	11158 <lseek64@plt>
   19560:	mvn	r3, #0
   19564:	mvn	r2, #0
   19568:	cmp	r1, r3
   1956c:	cmpeq	r0, r2
   19570:	bne	1950c <__assert_fail@plt+0x8180>
   19574:	mov	r0, r4
   19578:	add	sp, sp, #12
   1957c:	pop	{r4, r5, lr}
   19580:	b	11284 <fclose@plt>
   19584:	push	{r1, r2, r3}
   19588:	push	{r4, r5, r6, r7, lr}
   1958c:	sub	sp, sp, #8
   19590:	add	r3, sp, #32
   19594:	ldr	r1, [sp, #28]
   19598:	str	r3, [sp, #4]
   1959c:	cmp	r1, #0
   195a0:	beq	19638 <__assert_fail@plt+0x82ac>
   195a4:	ldr	r2, [pc, #412]	; 19748 <__assert_fail@plt+0x83bc>
   195a8:	mov	r5, r0
   195ac:	cmp	r1, r2
   195b0:	bne	195fc <__assert_fail@plt+0x8270>
   195b4:	ldr	r6, [pc, #400]	; 1974c <__assert_fail@plt+0x83c0>
   195b8:	ldr	r7, [r3]
   195bc:	add	r2, sp, #36	; 0x24
   195c0:	ldr	r3, [r6]
   195c4:	str	r2, [sp, #4]
   195c8:	cmp	r3, #0
   195cc:	mov	r2, r7
   195d0:	blt	196fc <__assert_fail@plt+0x8370>
   195d4:	bl	1129c <fcntl64@plt>
   195d8:	subs	r4, r0, #0
   195dc:	blt	19680 <__assert_fail@plt+0x82f4>
   195e0:	mov	r3, #1
   195e4:	str	r3, [r6]
   195e8:	mov	r0, r4
   195ec:	add	sp, sp, #8
   195f0:	pop	{r4, r5, r6, r7, lr}
   195f4:	add	sp, sp, #12
   195f8:	bx	lr
   195fc:	cmp	r1, #11
   19600:	beq	19628 <__assert_fail@plt+0x829c>
   19604:	bgt	19648 <__assert_fail@plt+0x82bc>
   19608:	cmp	r1, #3
   1960c:	beq	19628 <__assert_fail@plt+0x829c>
   19610:	ble	1973c <__assert_fail@plt+0x83b0>
   19614:	cmp	r1, #8
   19618:	beq	19668 <__assert_fail@plt+0x82dc>
   1961c:	ble	19668 <__assert_fail@plt+0x82dc>
   19620:	cmp	r1, #9
   19624:	bne	19668 <__assert_fail@plt+0x82dc>
   19628:	mov	r0, r5
   1962c:	bl	1129c <fcntl64@plt>
   19630:	mov	r4, r0
   19634:	b	195e8 <__assert_fail@plt+0x825c>
   19638:	ldr	r2, [sp, #32]
   1963c:	bl	1129c <fcntl64@plt>
   19640:	mov	r4, r0
   19644:	b	195e8 <__assert_fail@plt+0x825c>
   19648:	ldr	r3, [pc, #256]	; 19750 <__assert_fail@plt+0x83c4>
   1964c:	cmp	r1, r3
   19650:	bgt	1971c <__assert_fail@plt+0x8390>
   19654:	cmp	r1, r2
   19658:	bge	19668 <__assert_fail@plt+0x82dc>
   1965c:	sub	r3, r3, #6
   19660:	cmp	r1, r3
   19664:	beq	19628 <__assert_fail@plt+0x829c>
   19668:	ldr	r3, [sp, #4]
   1966c:	mov	r0, r5
   19670:	ldr	r2, [r3]
   19674:	bl	1129c <fcntl64@plt>
   19678:	mov	r4, r0
   1967c:	b	195e8 <__assert_fail@plt+0x825c>
   19680:	bl	1123c <__errno_location@plt>
   19684:	ldr	r3, [r0]
   19688:	cmp	r3, #22
   1968c:	bne	195e0 <__assert_fail@plt+0x8254>
   19690:	mov	r2, r7
   19694:	mov	r0, r5
   19698:	mov	r1, #0
   1969c:	bl	1129c <fcntl64@plt>
   196a0:	subs	r4, r0, #0
   196a4:	blt	195e8 <__assert_fail@plt+0x825c>
   196a8:	mvn	r3, #0
   196ac:	str	r3, [r6]
   196b0:	mov	r1, #1
   196b4:	mov	r0, r4
   196b8:	bl	1129c <fcntl64@plt>
   196bc:	subs	r2, r0, #0
   196c0:	blt	196dc <__assert_fail@plt+0x8350>
   196c4:	orr	r2, r2, #1
   196c8:	mov	r1, #2
   196cc:	mov	r0, r4
   196d0:	bl	1129c <fcntl64@plt>
   196d4:	cmn	r0, #1
   196d8:	bne	195e8 <__assert_fail@plt+0x825c>
   196dc:	bl	1123c <__errno_location@plt>
   196e0:	mov	r5, r0
   196e4:	mov	r0, r4
   196e8:	ldr	r6, [r5]
   196ec:	mvn	r4, #0
   196f0:	bl	11350 <close@plt>
   196f4:	str	r6, [r5]
   196f8:	b	195e8 <__assert_fail@plt+0x825c>
   196fc:	mov	r1, #0
   19700:	bl	1129c <fcntl64@plt>
   19704:	subs	r4, r0, #0
   19708:	blt	195e8 <__assert_fail@plt+0x825c>
   1970c:	ldr	r3, [r6]
   19710:	cmn	r3, #1
   19714:	beq	196b0 <__assert_fail@plt+0x8324>
   19718:	b	195e8 <__assert_fail@plt+0x825c>
   1971c:	ldr	r3, [pc, #48]	; 19754 <__assert_fail@plt+0x83c8>
   19720:	cmp	r1, r3
   19724:	beq	19668 <__assert_fail@plt+0x82dc>
   19728:	blt	19628 <__assert_fail@plt+0x829c>
   1972c:	add	r3, r3, #1
   19730:	cmp	r1, r3
   19734:	bne	19668 <__assert_fail@plt+0x82dc>
   19738:	b	19628 <__assert_fail@plt+0x829c>
   1973c:	cmp	r1, #1
   19740:	bne	19668 <__assert_fail@plt+0x82dc>
   19744:	b	19628 <__assert_fail@plt+0x829c>
   19748:	andeq	r0, r0, r6, lsl #8
   1974c:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   19750:	andeq	r0, r0, r7, lsl #8
   19754:	andeq	r0, r0, r9, lsl #8
   19758:	push	{r1, r2, r3}
   1975c:	push	{lr}		; (str lr, [sp, #-4]!)
   19760:	sub	sp, sp, #8
   19764:	ldr	r1, [sp, #12]
   19768:	ands	r2, r1, #64	; 0x40
   1976c:	addne	r3, sp, #16
   19770:	ldrne	r2, [sp, #16]
   19774:	strne	r3, [sp, #4]
   19778:	bl	111a0 <open64@plt>
   1977c:	bl	17e94 <__assert_fail@plt+0x6b08>
   19780:	add	sp, sp, #8
   19784:	pop	{lr}		; (ldr lr, [sp], #4)
   19788:	add	sp, sp, #12
   1978c:	bx	lr
   19790:	push	{r4, lr}
   19794:	subs	r4, r0, #0
   19798:	sub	sp, sp, #8
   1979c:	beq	197b8 <__assert_fail@plt+0x842c>
   197a0:	bl	111c4 <__freading@plt>
   197a4:	cmp	r0, #0
   197a8:	beq	197b8 <__assert_fail@plt+0x842c>
   197ac:	ldr	r3, [r4]
   197b0:	tst	r3, #256	; 0x100
   197b4:	bne	197c8 <__assert_fail@plt+0x843c>
   197b8:	mov	r0, r4
   197bc:	add	sp, sp, #8
   197c0:	pop	{r4, lr}
   197c4:	b	1108c <fflush@plt>
   197c8:	mov	r3, #1
   197cc:	str	r3, [sp]
   197d0:	mov	r2, #0
   197d4:	mov	r3, #0
   197d8:	mov	r0, r4
   197dc:	bl	197f0 <__assert_fail@plt+0x8464>
   197e0:	mov	r0, r4
   197e4:	add	sp, sp, #8
   197e8:	pop	{r4, lr}
   197ec:	b	1108c <fflush@plt>
   197f0:	push	{r4, r5, r6, r7, r8, lr}
   197f4:	sub	sp, sp, #8
   197f8:	ldmib	r0, {ip, lr}
   197fc:	mov	r4, r0
   19800:	ldr	r5, [sp, #32]
   19804:	cmp	lr, ip
   19808:	beq	19820 <__assert_fail@plt+0x8494>
   1980c:	str	r5, [sp, #32]
   19810:	mov	r0, r4
   19814:	add	sp, sp, #8
   19818:	pop	{r4, r5, r6, r7, r8, lr}
   1981c:	b	11290 <fseeko64@plt>
   19820:	ldr	lr, [r0, #20]
   19824:	ldr	ip, [r0, #16]
   19828:	cmp	lr, ip
   1982c:	bne	1980c <__assert_fail@plt+0x8480>
   19830:	ldr	r8, [r0, #36]	; 0x24
   19834:	cmp	r8, #0
   19838:	bne	1980c <__assert_fail@plt+0x8480>
   1983c:	mov	r6, r2
   19840:	mov	r7, r3
   19844:	bl	1126c <fileno@plt>
   19848:	mov	r2, r6
   1984c:	mov	r3, r7
   19850:	str	r5, [sp]
   19854:	bl	11158 <lseek64@plt>
   19858:	mvn	r3, #0
   1985c:	mvn	r2, #0
   19860:	cmp	r1, r3
   19864:	cmpeq	r0, r2
   19868:	beq	19888 <__assert_fail@plt+0x84fc>
   1986c:	ldr	r3, [r4]
   19870:	strd	r0, [r4, #80]	; 0x50
   19874:	mov	r0, r8
   19878:	bic	r3, r3, #16
   1987c:	str	r3, [r4]
   19880:	add	sp, sp, #8
   19884:	pop	{r4, r5, r6, r7, r8, pc}
   19888:	mvn	r0, #0
   1988c:	b	19880 <__assert_fail@plt+0x84f4>
   19890:	push	{r4, lr}
   19894:	mov	r0, #14
   19898:	bl	112cc <nl_langinfo@plt>
   1989c:	cmp	r0, #0
   198a0:	beq	198b8 <__assert_fail@plt+0x852c>
   198a4:	ldrb	r2, [r0]
   198a8:	ldr	r3, [pc, #16]	; 198c0 <__assert_fail@plt+0x8534>
   198ac:	cmp	r2, #0
   198b0:	moveq	r0, r3
   198b4:	pop	{r4, pc}
   198b8:	ldr	r0, [pc]	; 198c0 <__assert_fail@plt+0x8534>
   198bc:	pop	{r4, pc}
   198c0:	ldrdeq	fp, [r1], -ip
   198c4:	push	{r4, r5, r6, r7, lr}
   198c8:	subs	r6, r0, #0
   198cc:	sub	sp, sp, #12
   198d0:	addeq	r6, sp, #4
   198d4:	mov	r0, r6
   198d8:	mov	r5, r2
   198dc:	mov	r7, r1
   198e0:	bl	11188 <mbrtowc@plt>
   198e4:	cmp	r5, #0
   198e8:	cmnne	r0, #3
   198ec:	mov	r4, r0
   198f0:	bls	1990c <__assert_fail@plt+0x8580>
   198f4:	mov	r0, #0
   198f8:	bl	19970 <__assert_fail@plt+0x85e4>
   198fc:	cmp	r0, #0
   19900:	moveq	r4, #1
   19904:	ldrbeq	r3, [r7]
   19908:	streq	r3, [r6]
   1990c:	mov	r0, r4
   19910:	add	sp, sp, #12
   19914:	pop	{r4, r5, r6, r7, pc}
   19918:	push	{r4, r5, r6, lr}
   1991c:	subs	r4, r2, #0
   19920:	mov	r6, r0
   19924:	mov	r5, r1
   19928:	beq	19954 <__assert_fail@plt+0x85c8>
   1992c:	mov	r1, r4
   19930:	mvn	r0, #0
   19934:	bl	19a64 <__assert_fail@plt+0x86d8>
   19938:	cmp	r0, r5
   1993c:	bcs	19954 <__assert_fail@plt+0x85c8>
   19940:	bl	1123c <__errno_location@plt>
   19944:	mov	r3, #12
   19948:	str	r3, [r0]
   1994c:	mov	r0, #0
   19950:	pop	{r4, r5, r6, pc}
   19954:	mul	r1, r5, r4
   19958:	mov	r0, r6
   1995c:	pop	{r4, r5, r6, lr}
   19960:	b	1931c <__assert_fail@plt+0x7f90>
   19964:	mov	r2, #3
   19968:	mov	r1, #0
   1996c:	b	19584 <__assert_fail@plt+0x81f8>
   19970:	push	{lr}		; (str lr, [sp, #-4]!)
   19974:	sub	sp, sp, #268	; 0x10c
   19978:	add	r1, sp, #4
   1997c:	ldr	r2, [pc, #60]	; 199c0 <__assert_fail@plt+0x8634>
   19980:	bl	199cc <__assert_fail@plt+0x8640>
   19984:	cmp	r0, #0
   19988:	movne	r0, #0
   1998c:	bne	199b8 <__assert_fail@plt+0x862c>
   19990:	ldr	r1, [pc, #44]	; 199c4 <__assert_fail@plt+0x8638>
   19994:	add	r0, sp, #4
   19998:	bl	11074 <strcmp@plt>
   1999c:	cmp	r0, #0
   199a0:	beq	199b8 <__assert_fail@plt+0x862c>
   199a4:	add	r0, sp, #4
   199a8:	ldr	r1, [pc, #24]	; 199c8 <__assert_fail@plt+0x863c>
   199ac:	bl	11074 <strcmp@plt>
   199b0:	adds	r0, r0, #0
   199b4:	movne	r0, #1
   199b8:	add	sp, sp, #268	; 0x10c
   199bc:	pop	{pc}		; (ldr pc, [sp], #4)
   199c0:	andeq	r0, r0, r1, lsl #2
   199c4:	andeq	fp, r1, r4, ror #15
   199c8:	andeq	fp, r1, r8, ror #15
   199cc:	push	{r4, r5, r6, lr}
   199d0:	mov	r5, r1
   199d4:	mov	r1, #0
   199d8:	mov	r4, r2
   199dc:	bl	112a8 <setlocale@plt>
   199e0:	subs	r6, r0, #0
   199e4:	beq	19a40 <__assert_fail@plt+0x86b4>
   199e8:	bl	1120c <strlen@plt>
   199ec:	cmp	r4, r0
   199f0:	bhi	19a28 <__assert_fail@plt+0x869c>
   199f4:	cmp	r4, #0
   199f8:	bne	19a04 <__assert_fail@plt+0x8678>
   199fc:	mov	r0, #34	; 0x22
   19a00:	pop	{r4, r5, r6, pc}
   19a04:	sub	r4, r4, #1
   19a08:	mov	r1, r6
   19a0c:	mov	r2, r4
   19a10:	mov	r0, r5
   19a14:	bl	110c8 <memcpy@plt>
   19a18:	mov	r3, #0
   19a1c:	strb	r3, [r5, r4]
   19a20:	mov	r0, #34	; 0x22
   19a24:	pop	{r4, r5, r6, pc}
   19a28:	add	r2, r0, #1
   19a2c:	mov	r1, r6
   19a30:	mov	r0, r5
   19a34:	bl	110c8 <memcpy@plt>
   19a38:	mov	r0, #0
   19a3c:	pop	{r4, r5, r6, pc}
   19a40:	cmp	r4, #0
   19a44:	beq	19a54 <__assert_fail@plt+0x86c8>
   19a48:	strb	r6, [r5]
   19a4c:	mov	r0, #22
   19a50:	pop	{r4, r5, r6, pc}
   19a54:	mov	r0, #22
   19a58:	pop	{r4, r5, r6, pc}
   19a5c:	mov	r1, #0
   19a60:	b	112a8 <setlocale@plt>
   19a64:	subs	r2, r1, #1
   19a68:	bxeq	lr
   19a6c:	bcc	19c44 <__assert_fail@plt+0x88b8>
   19a70:	cmp	r0, r1
   19a74:	bls	19c28 <__assert_fail@plt+0x889c>
   19a78:	tst	r1, r2
   19a7c:	beq	19c34 <__assert_fail@plt+0x88a8>
   19a80:	clz	r3, r0
   19a84:	clz	r2, r1
   19a88:	sub	r3, r2, r3
   19a8c:	rsbs	r3, r3, #31
   19a90:	addne	r3, r3, r3, lsl #1
   19a94:	mov	r2, #0
   19a98:	addne	pc, pc, r3, lsl #2
   19a9c:	nop			; (mov r0, r0)
   19aa0:	cmp	r0, r1, lsl #31
   19aa4:	adc	r2, r2, r2
   19aa8:	subcs	r0, r0, r1, lsl #31
   19aac:	cmp	r0, r1, lsl #30
   19ab0:	adc	r2, r2, r2
   19ab4:	subcs	r0, r0, r1, lsl #30
   19ab8:	cmp	r0, r1, lsl #29
   19abc:	adc	r2, r2, r2
   19ac0:	subcs	r0, r0, r1, lsl #29
   19ac4:	cmp	r0, r1, lsl #28
   19ac8:	adc	r2, r2, r2
   19acc:	subcs	r0, r0, r1, lsl #28
   19ad0:	cmp	r0, r1, lsl #27
   19ad4:	adc	r2, r2, r2
   19ad8:	subcs	r0, r0, r1, lsl #27
   19adc:	cmp	r0, r1, lsl #26
   19ae0:	adc	r2, r2, r2
   19ae4:	subcs	r0, r0, r1, lsl #26
   19ae8:	cmp	r0, r1, lsl #25
   19aec:	adc	r2, r2, r2
   19af0:	subcs	r0, r0, r1, lsl #25
   19af4:	cmp	r0, r1, lsl #24
   19af8:	adc	r2, r2, r2
   19afc:	subcs	r0, r0, r1, lsl #24
   19b00:	cmp	r0, r1, lsl #23
   19b04:	adc	r2, r2, r2
   19b08:	subcs	r0, r0, r1, lsl #23
   19b0c:	cmp	r0, r1, lsl #22
   19b10:	adc	r2, r2, r2
   19b14:	subcs	r0, r0, r1, lsl #22
   19b18:	cmp	r0, r1, lsl #21
   19b1c:	adc	r2, r2, r2
   19b20:	subcs	r0, r0, r1, lsl #21
   19b24:	cmp	r0, r1, lsl #20
   19b28:	adc	r2, r2, r2
   19b2c:	subcs	r0, r0, r1, lsl #20
   19b30:	cmp	r0, r1, lsl #19
   19b34:	adc	r2, r2, r2
   19b38:	subcs	r0, r0, r1, lsl #19
   19b3c:	cmp	r0, r1, lsl #18
   19b40:	adc	r2, r2, r2
   19b44:	subcs	r0, r0, r1, lsl #18
   19b48:	cmp	r0, r1, lsl #17
   19b4c:	adc	r2, r2, r2
   19b50:	subcs	r0, r0, r1, lsl #17
   19b54:	cmp	r0, r1, lsl #16
   19b58:	adc	r2, r2, r2
   19b5c:	subcs	r0, r0, r1, lsl #16
   19b60:	cmp	r0, r1, lsl #15
   19b64:	adc	r2, r2, r2
   19b68:	subcs	r0, r0, r1, lsl #15
   19b6c:	cmp	r0, r1, lsl #14
   19b70:	adc	r2, r2, r2
   19b74:	subcs	r0, r0, r1, lsl #14
   19b78:	cmp	r0, r1, lsl #13
   19b7c:	adc	r2, r2, r2
   19b80:	subcs	r0, r0, r1, lsl #13
   19b84:	cmp	r0, r1, lsl #12
   19b88:	adc	r2, r2, r2
   19b8c:	subcs	r0, r0, r1, lsl #12
   19b90:	cmp	r0, r1, lsl #11
   19b94:	adc	r2, r2, r2
   19b98:	subcs	r0, r0, r1, lsl #11
   19b9c:	cmp	r0, r1, lsl #10
   19ba0:	adc	r2, r2, r2
   19ba4:	subcs	r0, r0, r1, lsl #10
   19ba8:	cmp	r0, r1, lsl #9
   19bac:	adc	r2, r2, r2
   19bb0:	subcs	r0, r0, r1, lsl #9
   19bb4:	cmp	r0, r1, lsl #8
   19bb8:	adc	r2, r2, r2
   19bbc:	subcs	r0, r0, r1, lsl #8
   19bc0:	cmp	r0, r1, lsl #7
   19bc4:	adc	r2, r2, r2
   19bc8:	subcs	r0, r0, r1, lsl #7
   19bcc:	cmp	r0, r1, lsl #6
   19bd0:	adc	r2, r2, r2
   19bd4:	subcs	r0, r0, r1, lsl #6
   19bd8:	cmp	r0, r1, lsl #5
   19bdc:	adc	r2, r2, r2
   19be0:	subcs	r0, r0, r1, lsl #5
   19be4:	cmp	r0, r1, lsl #4
   19be8:	adc	r2, r2, r2
   19bec:	subcs	r0, r0, r1, lsl #4
   19bf0:	cmp	r0, r1, lsl #3
   19bf4:	adc	r2, r2, r2
   19bf8:	subcs	r0, r0, r1, lsl #3
   19bfc:	cmp	r0, r1, lsl #2
   19c00:	adc	r2, r2, r2
   19c04:	subcs	r0, r0, r1, lsl #2
   19c08:	cmp	r0, r1, lsl #1
   19c0c:	adc	r2, r2, r2
   19c10:	subcs	r0, r0, r1, lsl #1
   19c14:	cmp	r0, r1
   19c18:	adc	r2, r2, r2
   19c1c:	subcs	r0, r0, r1
   19c20:	mov	r0, r2
   19c24:	bx	lr
   19c28:	moveq	r0, #1
   19c2c:	movne	r0, #0
   19c30:	bx	lr
   19c34:	clz	r2, r1
   19c38:	rsb	r2, r2, #31
   19c3c:	lsr	r0, r0, r2
   19c40:	bx	lr
   19c44:	cmp	r0, #0
   19c48:	mvnne	r0, #0
   19c4c:	b	19eec <__assert_fail@plt+0x8b60>
   19c50:	cmp	r1, #0
   19c54:	beq	19c44 <__assert_fail@plt+0x88b8>
   19c58:	push	{r0, r1, lr}
   19c5c:	bl	19a64 <__assert_fail@plt+0x86d8>
   19c60:	pop	{r1, r2, lr}
   19c64:	mul	r3, r2, r0
   19c68:	sub	r1, r1, r3
   19c6c:	bx	lr
   19c70:	cmp	r1, #0
   19c74:	beq	19e80 <__assert_fail@plt+0x8af4>
   19c78:	eor	ip, r0, r1
   19c7c:	rsbmi	r1, r1, #0
   19c80:	subs	r2, r1, #1
   19c84:	beq	19e4c <__assert_fail@plt+0x8ac0>
   19c88:	movs	r3, r0
   19c8c:	rsbmi	r3, r0, #0
   19c90:	cmp	r3, r1
   19c94:	bls	19e58 <__assert_fail@plt+0x8acc>
   19c98:	tst	r1, r2
   19c9c:	beq	19e68 <__assert_fail@plt+0x8adc>
   19ca0:	clz	r2, r3
   19ca4:	clz	r0, r1
   19ca8:	sub	r2, r0, r2
   19cac:	rsbs	r2, r2, #31
   19cb0:	addne	r2, r2, r2, lsl #1
   19cb4:	mov	r0, #0
   19cb8:	addne	pc, pc, r2, lsl #2
   19cbc:	nop			; (mov r0, r0)
   19cc0:	cmp	r3, r1, lsl #31
   19cc4:	adc	r0, r0, r0
   19cc8:	subcs	r3, r3, r1, lsl #31
   19ccc:	cmp	r3, r1, lsl #30
   19cd0:	adc	r0, r0, r0
   19cd4:	subcs	r3, r3, r1, lsl #30
   19cd8:	cmp	r3, r1, lsl #29
   19cdc:	adc	r0, r0, r0
   19ce0:	subcs	r3, r3, r1, lsl #29
   19ce4:	cmp	r3, r1, lsl #28
   19ce8:	adc	r0, r0, r0
   19cec:	subcs	r3, r3, r1, lsl #28
   19cf0:	cmp	r3, r1, lsl #27
   19cf4:	adc	r0, r0, r0
   19cf8:	subcs	r3, r3, r1, lsl #27
   19cfc:	cmp	r3, r1, lsl #26
   19d00:	adc	r0, r0, r0
   19d04:	subcs	r3, r3, r1, lsl #26
   19d08:	cmp	r3, r1, lsl #25
   19d0c:	adc	r0, r0, r0
   19d10:	subcs	r3, r3, r1, lsl #25
   19d14:	cmp	r3, r1, lsl #24
   19d18:	adc	r0, r0, r0
   19d1c:	subcs	r3, r3, r1, lsl #24
   19d20:	cmp	r3, r1, lsl #23
   19d24:	adc	r0, r0, r0
   19d28:	subcs	r3, r3, r1, lsl #23
   19d2c:	cmp	r3, r1, lsl #22
   19d30:	adc	r0, r0, r0
   19d34:	subcs	r3, r3, r1, lsl #22
   19d38:	cmp	r3, r1, lsl #21
   19d3c:	adc	r0, r0, r0
   19d40:	subcs	r3, r3, r1, lsl #21
   19d44:	cmp	r3, r1, lsl #20
   19d48:	adc	r0, r0, r0
   19d4c:	subcs	r3, r3, r1, lsl #20
   19d50:	cmp	r3, r1, lsl #19
   19d54:	adc	r0, r0, r0
   19d58:	subcs	r3, r3, r1, lsl #19
   19d5c:	cmp	r3, r1, lsl #18
   19d60:	adc	r0, r0, r0
   19d64:	subcs	r3, r3, r1, lsl #18
   19d68:	cmp	r3, r1, lsl #17
   19d6c:	adc	r0, r0, r0
   19d70:	subcs	r3, r3, r1, lsl #17
   19d74:	cmp	r3, r1, lsl #16
   19d78:	adc	r0, r0, r0
   19d7c:	subcs	r3, r3, r1, lsl #16
   19d80:	cmp	r3, r1, lsl #15
   19d84:	adc	r0, r0, r0
   19d88:	subcs	r3, r3, r1, lsl #15
   19d8c:	cmp	r3, r1, lsl #14
   19d90:	adc	r0, r0, r0
   19d94:	subcs	r3, r3, r1, lsl #14
   19d98:	cmp	r3, r1, lsl #13
   19d9c:	adc	r0, r0, r0
   19da0:	subcs	r3, r3, r1, lsl #13
   19da4:	cmp	r3, r1, lsl #12
   19da8:	adc	r0, r0, r0
   19dac:	subcs	r3, r3, r1, lsl #12
   19db0:	cmp	r3, r1, lsl #11
   19db4:	adc	r0, r0, r0
   19db8:	subcs	r3, r3, r1, lsl #11
   19dbc:	cmp	r3, r1, lsl #10
   19dc0:	adc	r0, r0, r0
   19dc4:	subcs	r3, r3, r1, lsl #10
   19dc8:	cmp	r3, r1, lsl #9
   19dcc:	adc	r0, r0, r0
   19dd0:	subcs	r3, r3, r1, lsl #9
   19dd4:	cmp	r3, r1, lsl #8
   19dd8:	adc	r0, r0, r0
   19ddc:	subcs	r3, r3, r1, lsl #8
   19de0:	cmp	r3, r1, lsl #7
   19de4:	adc	r0, r0, r0
   19de8:	subcs	r3, r3, r1, lsl #7
   19dec:	cmp	r3, r1, lsl #6
   19df0:	adc	r0, r0, r0
   19df4:	subcs	r3, r3, r1, lsl #6
   19df8:	cmp	r3, r1, lsl #5
   19dfc:	adc	r0, r0, r0
   19e00:	subcs	r3, r3, r1, lsl #5
   19e04:	cmp	r3, r1, lsl #4
   19e08:	adc	r0, r0, r0
   19e0c:	subcs	r3, r3, r1, lsl #4
   19e10:	cmp	r3, r1, lsl #3
   19e14:	adc	r0, r0, r0
   19e18:	subcs	r3, r3, r1, lsl #3
   19e1c:	cmp	r3, r1, lsl #2
   19e20:	adc	r0, r0, r0
   19e24:	subcs	r3, r3, r1, lsl #2
   19e28:	cmp	r3, r1, lsl #1
   19e2c:	adc	r0, r0, r0
   19e30:	subcs	r3, r3, r1, lsl #1
   19e34:	cmp	r3, r1
   19e38:	adc	r0, r0, r0
   19e3c:	subcs	r3, r3, r1
   19e40:	cmp	ip, #0
   19e44:	rsbmi	r0, r0, #0
   19e48:	bx	lr
   19e4c:	teq	ip, r0
   19e50:	rsbmi	r0, r0, #0
   19e54:	bx	lr
   19e58:	movcc	r0, #0
   19e5c:	asreq	r0, ip, #31
   19e60:	orreq	r0, r0, #1
   19e64:	bx	lr
   19e68:	clz	r2, r1
   19e6c:	rsb	r2, r2, #31
   19e70:	cmp	ip, #0
   19e74:	lsr	r0, r3, r2
   19e78:	rsbmi	r0, r0, #0
   19e7c:	bx	lr
   19e80:	cmp	r0, #0
   19e84:	mvngt	r0, #-2147483648	; 0x80000000
   19e88:	movlt	r0, #-2147483648	; 0x80000000
   19e8c:	b	19eec <__assert_fail@plt+0x8b60>
   19e90:	cmp	r1, #0
   19e94:	beq	19e80 <__assert_fail@plt+0x8af4>
   19e98:	push	{r0, r1, lr}
   19e9c:	bl	19c78 <__assert_fail@plt+0x88ec>
   19ea0:	pop	{r1, r2, lr}
   19ea4:	mul	r3, r2, r0
   19ea8:	sub	r1, r1, r3
   19eac:	bx	lr
   19eb0:	cmp	r3, #0
   19eb4:	cmpeq	r2, #0
   19eb8:	bne	19ed0 <__assert_fail@plt+0x8b44>
   19ebc:	cmp	r1, #0
   19ec0:	cmpeq	r0, #0
   19ec4:	mvnne	r1, #0
   19ec8:	mvnne	r0, #0
   19ecc:	b	19eec <__assert_fail@plt+0x8b60>
   19ed0:	sub	sp, sp, #8
   19ed4:	push	{sp, lr}
   19ed8:	bl	19efc <__assert_fail@plt+0x8b70>
   19edc:	ldr	lr, [sp, #4]
   19ee0:	add	sp, sp, #8
   19ee4:	pop	{r2, r3}
   19ee8:	bx	lr
   19eec:	push	{r1, lr}
   19ef0:	mov	r0, #8
   19ef4:	bl	1105c <raise@plt>
   19ef8:	pop	{r1, pc}
   19efc:	cmp	r1, r3
   19f00:	push	{r4, r5, r6, r7, r8, r9, lr}
   19f04:	cmpeq	r0, r2
   19f08:	mov	r4, r0
   19f0c:	mov	r5, r1
   19f10:	ldr	r9, [sp, #28]
   19f14:	movcc	r0, #0
   19f18:	movcc	r1, #0
   19f1c:	bcc	1a014 <__assert_fail@plt+0x8c88>
   19f20:	cmp	r3, #0
   19f24:	clzeq	ip, r2
   19f28:	clzne	ip, r3
   19f2c:	addeq	ip, ip, #32
   19f30:	cmp	r5, #0
   19f34:	clzeq	r1, r4
   19f38:	addeq	r1, r1, #32
   19f3c:	clzne	r1, r5
   19f40:	sub	ip, ip, r1
   19f44:	sub	lr, ip, #32
   19f48:	lsl	r7, r3, ip
   19f4c:	rsb	r8, ip, #32
   19f50:	orr	r7, r7, r2, lsl lr
   19f54:	orr	r7, r7, r2, lsr r8
   19f58:	lsl	r6, r2, ip
   19f5c:	cmp	r5, r7
   19f60:	cmpeq	r4, r6
   19f64:	movcc	r0, #0
   19f68:	movcc	r1, #0
   19f6c:	bcc	19f88 <__assert_fail@plt+0x8bfc>
   19f70:	mov	r3, #1
   19f74:	subs	r4, r4, r6
   19f78:	lsl	r1, r3, lr
   19f7c:	lsl	r0, r3, ip
   19f80:	orr	r1, r1, r3, lsr r8
   19f84:	sbc	r5, r5, r7
   19f88:	cmp	ip, #0
   19f8c:	beq	1a014 <__assert_fail@plt+0x8c88>
   19f90:	lsrs	r3, r7, #1
   19f94:	rrx	r2, r6
   19f98:	mov	r6, ip
   19f9c:	b	19fc0 <__assert_fail@plt+0x8c34>
   19fa0:	subs	r4, r4, r2
   19fa4:	sbc	r5, r5, r3
   19fa8:	adds	r4, r4, r4
   19fac:	adc	r5, r5, r5
   19fb0:	adds	r4, r4, #1
   19fb4:	adc	r5, r5, #0
   19fb8:	subs	r6, r6, #1
   19fbc:	beq	19fdc <__assert_fail@plt+0x8c50>
   19fc0:	cmp	r5, r3
   19fc4:	cmpeq	r4, r2
   19fc8:	bcs	19fa0 <__assert_fail@plt+0x8c14>
   19fcc:	adds	r4, r4, r4
   19fd0:	adc	r5, r5, r5
   19fd4:	subs	r6, r6, #1
   19fd8:	bne	19fc0 <__assert_fail@plt+0x8c34>
   19fdc:	lsr	r6, r4, ip
   19fe0:	lsr	r7, r5, ip
   19fe4:	orr	r6, r6, r5, lsl r8
   19fe8:	adds	r2, r0, r4
   19fec:	orr	r6, r6, r5, lsr lr
   19ff0:	adc	r3, r1, r5
   19ff4:	lsl	r1, r7, ip
   19ff8:	orr	r1, r1, r6, lsl lr
   19ffc:	lsl	r0, r6, ip
   1a000:	orr	r1, r1, r6, lsr r8
   1a004:	subs	r0, r2, r0
   1a008:	mov	r4, r6
   1a00c:	mov	r5, r7
   1a010:	sbc	r1, r3, r1
   1a014:	cmp	r9, #0
   1a018:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a01c:	strd	r4, [r9]
   1a020:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a024:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a028:	mov	r7, r0
   1a02c:	ldr	r6, [pc, #72]	; 1a07c <__assert_fail@plt+0x8cf0>
   1a030:	ldr	r5, [pc, #72]	; 1a080 <__assert_fail@plt+0x8cf4>
   1a034:	add	r6, pc, r6
   1a038:	add	r5, pc, r5
   1a03c:	sub	r6, r6, r5
   1a040:	mov	r8, r1
   1a044:	mov	r9, r2
   1a048:	bl	1100c <fstatfs64@plt-0x20>
   1a04c:	asrs	r6, r6, #2
   1a050:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a054:	mov	r4, #0
   1a058:	add	r4, r4, #1
   1a05c:	ldr	r3, [r5], #4
   1a060:	mov	r2, r9
   1a064:	mov	r1, r8
   1a068:	mov	r0, r7
   1a06c:	blx	r3
   1a070:	cmp	r6, r4
   1a074:	bne	1a058 <__assert_fail@plt+0x8ccc>
   1a078:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a07c:	ldrdeq	r1, [r1], -r4
   1a080:	andeq	r1, r1, ip, asr #29
   1a084:	bx	lr
   1a088:	ldr	r3, [pc, #12]	; 1a09c <__assert_fail@plt+0x8d10>
   1a08c:	mov	r1, #0
   1a090:	add	r3, pc, r3
   1a094:	ldr	r2, [r3]
   1a098:	b	11248 <__cxa_atexit@plt>
   1a09c:	andeq	r2, r1, r0, lsr #1

Disassembly of section .fini:

0001a0a0 <.fini>:
   1a0a0:	push	{r3, lr}
   1a0a4:	pop	{r3, pc}
