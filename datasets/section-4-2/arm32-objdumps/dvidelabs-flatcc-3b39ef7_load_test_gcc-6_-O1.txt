
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f68 <.init>:
   11f68:	push	{r3, lr}
   11f6c:	bl	120b4 <_start@@Base+0x3c>
   11f70:	pop	{r3, pc}

Disassembly of section .plt:

00011f74 <strcmp@plt-0x14>:
   11f74:	push	{lr}		; (str lr, [sp, #-4]!)
   11f78:	ldr	lr, [pc, #4]	; 11f84 <strcmp@plt-0x4>
   11f7c:	add	lr, pc, lr
   11f80:	ldr	pc, [lr, #8]!
   11f84:	andeq	r7, r1, ip, ror r0

00011f88 <strcmp@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #94208	; 0x17000
   11f90:	ldr	pc, [ip, #124]!	; 0x7c

00011f94 <printf@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #94208	; 0x17000
   11f9c:	ldr	pc, [ip, #116]!	; 0x74

00011fa0 <fopen@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #94208	; 0x17000
   11fa8:	ldr	pc, [ip, #108]!	; 0x6c

00011fac <free@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #94208	; 0x17000
   11fb4:	ldr	pc, [ip, #100]!	; 0x64

00011fb8 <memcpy@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #94208	; 0x17000
   11fc0:	ldr	pc, [ip, #92]!	; 0x5c

00011fc4 <memcmp@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #94208	; 0x17000
   11fcc:	ldr	pc, [ip, #84]!	; 0x54

00011fd0 <realloc@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #94208	; 0x17000
   11fd8:	ldr	pc, [ip, #76]!	; 0x4c

00011fdc <fwrite@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #94208	; 0x17000
   11fe4:	ldr	pc, [ip, #68]!	; 0x44

00011fe8 <gettimeofday@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #94208	; 0x17000
   11ff0:	ldr	pc, [ip, #60]!	; 0x3c

00011ff4 <puts@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #94208	; 0x17000
   11ffc:	ldr	pc, [ip, #52]!	; 0x34

00012000 <malloc@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #94208	; 0x17000
   12008:	ldr	pc, [ip, #44]!	; 0x2c

0001200c <__libc_start_main@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #94208	; 0x17000
   12014:	ldr	pc, [ip, #36]!	; 0x24

00012018 <__gmon_start__@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #94208	; 0x17000
   12020:	ldr	pc, [ip, #28]!

00012024 <strlen@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #94208	; 0x17000
   1202c:	ldr	pc, [ip, #20]!

00012030 <posix_memalign@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #94208	; 0x17000
   12038:	ldr	pc, [ip, #12]!

0001203c <memset@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #94208	; 0x17000
   12044:	ldr	pc, [ip, #4]!

00012048 <memchr@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #90112	; 0x16000
   12050:	ldr	pc, [ip, #4092]!	; 0xffc

00012054 <fclose@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #90112	; 0x16000
   1205c:	ldr	pc, [ip, #4084]!	; 0xff4

00012060 <abort@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #90112	; 0x16000
   12068:	ldr	pc, [ip, #4076]!	; 0xfec

0001206c <__assert_fail@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #90112	; 0x16000
   12074:	ldr	pc, [ip, #4068]!	; 0xfe4

Disassembly of section .text:

00012078 <_start@@Base>:
   12078:	mov	fp, #0
   1207c:	mov	lr, #0
   12080:	pop	{r1}		; (ldr r1, [sp], #4)
   12084:	mov	r2, sp
   12088:	push	{r2}		; (str r2, [sp, #-4]!)
   1208c:	push	{r0}		; (str r0, [sp, #-4]!)
   12090:	ldr	ip, [pc, #16]	; 120a8 <_start@@Base+0x30>
   12094:	push	{ip}		; (str ip, [sp, #-4]!)
   12098:	ldr	r0, [pc, #12]	; 120ac <_start@@Base+0x34>
   1209c:	ldr	r3, [pc, #12]	; 120b0 <_start@@Base+0x38>
   120a0:	bl	1200c <__libc_start_main@plt>
   120a4:	bl	12060 <abort@plt>
   120a8:	muleq	r1, r0, r0
   120ac:	andeq	r2, r1, ip, asr r4
   120b0:	andeq	r7, r1, r0, lsr r0
   120b4:	ldr	r3, [pc, #20]	; 120d0 <_start@@Base+0x58>
   120b8:	ldr	r2, [pc, #20]	; 120d4 <_start@@Base+0x5c>
   120bc:	add	r3, pc, r3
   120c0:	ldr	r2, [r3, r2]
   120c4:	cmp	r2, #0
   120c8:	bxeq	lr
   120cc:	b	12018 <__gmon_start__@plt>
   120d0:	andeq	r6, r1, ip, lsr pc
   120d4:	andeq	r0, r0, ip, asr r0
   120d8:	ldr	r3, [pc, #28]	; 120fc <_start@@Base+0x84>
   120dc:	ldr	r0, [pc, #28]	; 12100 <_start@@Base+0x88>
   120e0:	sub	r3, r3, r0
   120e4:	cmp	r3, #6
   120e8:	bxls	lr
   120ec:	ldr	r3, [pc, #16]	; 12104 <_start@@Base+0x8c>
   120f0:	cmp	r3, #0
   120f4:	bxeq	lr
   120f8:	bx	r3
   120fc:	andeq	r9, r2, fp, rrx
   12100:	andeq	r9, r2, r8, rrx
   12104:	andeq	r0, r0, r0
   12108:	ldr	r1, [pc, #36]	; 12134 <_start@@Base+0xbc>
   1210c:	ldr	r0, [pc, #36]	; 12138 <_start@@Base+0xc0>
   12110:	sub	r1, r1, r0
   12114:	asr	r1, r1, #2
   12118:	add	r1, r1, r1, lsr #31
   1211c:	asrs	r1, r1, #1
   12120:	bxeq	lr
   12124:	ldr	r3, [pc, #16]	; 1213c <_start@@Base+0xc4>
   12128:	cmp	r3, #0
   1212c:	bxeq	lr
   12130:	bx	r3
   12134:	andeq	r9, r2, r8, rrx
   12138:	andeq	r9, r2, r8, rrx
   1213c:	andeq	r0, r0, r0
   12140:	push	{r4, lr}
   12144:	ldr	r4, [pc, #24]	; 12164 <_start@@Base+0xec>
   12148:	ldrb	r3, [r4]
   1214c:	cmp	r3, #0
   12150:	popne	{r4, pc}
   12154:	bl	120d8 <_start@@Base+0x60>
   12158:	mov	r3, #1
   1215c:	strb	r3, [r4]
   12160:	pop	{r4, pc}
   12164:	andeq	r9, r2, r8, rrx
   12168:	ldr	r0, [pc, #40]	; 12198 <_start@@Base+0x120>
   1216c:	ldr	r3, [r0]
   12170:	cmp	r3, #0
   12174:	bne	1217c <_start@@Base+0x104>
   12178:	b	12108 <_start@@Base+0x90>
   1217c:	ldr	r3, [pc, #24]	; 1219c <_start@@Base+0x124>
   12180:	cmp	r3, #0
   12184:	beq	12178 <_start@@Base+0x100>
   12188:	push	{r4, lr}
   1218c:	blx	r3
   12190:	pop	{r4, lr}
   12194:	b	12108 <_start@@Base+0x90>
   12198:	andeq	r8, r2, r4, lsl pc
   1219c:	andeq	r0, r0, r0
   121a0:	push	{lr}		; (str lr, [sp, #-4]!)
   121a4:	sub	sp, sp, #12
   121a8:	mov	r1, #0
   121ac:	mov	r0, sp
   121b0:	bl	11fe8 <gettimeofday@plt>
   121b4:	ldr	r3, [pc, #92]	; 12218 <_start@@Base+0x1a0>
   121b8:	ldr	r3, [r3]
   121bc:	cmp	r3, #0
   121c0:	ldreq	r3, [pc, #80]	; 12218 <_start@@Base+0x1a0>
   121c4:	addeq	r2, sp, #8
   121c8:	ldmdbeq	r2, {r0, r1}
   121cc:	stmeq	r3, {r0, r1}
   121d0:	ldr	r2, [pc, #64]	; 12218 <_start@@Base+0x1a0>
   121d4:	ldr	r1, [r2, #4]
   121d8:	ldr	r3, [sp, #4]
   121dc:	sub	r3, r3, r1
   121e0:	vmov	s15, r3
   121e4:	vcvt.f64.s32	d7, s15
   121e8:	vldr	d5, [pc, #32]	; 12210 <_start@@Base+0x198>
   121ec:	vdiv.f64	d6, d7, d5
   121f0:	ldr	r2, [r2]
   121f4:	ldr	r3, [sp]
   121f8:	sub	r3, r3, r2
   121fc:	vmov	s0, r3
   12200:	vcvt.f64.s32	d0, s0
   12204:	vadd.f64	d0, d6, d0
   12208:	add	sp, sp, #12
   1220c:	pop	{pc}		; (ldr pc, [sp], #4)
   12210:	andeq	r0, r0, r0
   12214:	smlawbmi	lr, r0, r4, r8
   12218:	andeq	r9, r2, ip, rrx
   1221c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12220:	mov	r5, r0
   12224:	bl	131f0 <flatcc_builder_reset@@Base>
   12228:	mov	r3, #0
   1222c:	mov	r2, r3
   12230:	ldr	r1, [pc, #496]	; 12428 <_start@@Base+0x3b0>
   12234:	mov	r0, r5
   12238:	bl	13990 <flatcc_builder_start_buffer@@Base>
   1223c:	cmp	r0, #0
   12240:	bne	12250 <_start@@Base+0x1d8>
   12244:	mov	r1, #36	; 0x24
   12248:	mov	r0, r5
   1224c:	bl	147bc <flatcc_builder_start_table@@Base>
   12250:	ldr	r1, [pc, #468]	; 1242c <_start@@Base+0x3b4>
   12254:	mov	r0, r5
   12258:	bl	16044 <flatcc_builder_create_string_str@@Base>
   1225c:	subs	r4, r0, #0
   12260:	beq	12278 <_start@@Base+0x200>
   12264:	mov	r1, #3
   12268:	mov	r0, r5
   1226c:	bl	16384 <flatcc_builder_table_add_offset@@Base>
   12270:	cmp	r0, #0
   12274:	strne	r4, [r0]
   12278:	mov	r0, r5
   1227c:	bl	14598 <flatcc_builder_start_offset_vector@@Base>
   12280:	mov	sl, #1000	; 0x3e8
   12284:	ldr	r9, [pc, #420]	; 12430 <_start@@Base+0x3b8>
   12288:	mov	r8, #7
   1228c:	mov	fp, #1
   12290:	ldr	r7, [pc, #412]	; 12434 <_start@@Base+0x3bc>
   12294:	b	122d0 <_start@@Base+0x258>
   12298:	mov	r2, fp
   1229c:	ldr	r1, [pc, #404]	; 12438 <_start@@Base+0x3c0>
   122a0:	mov	r0, r5
   122a4:	bl	15160 <flatcc_builder_check_required@@Base>
   122a8:	cmp	r0, #0
   122ac:	beq	12380 <_start@@Base+0x308>
   122b0:	mov	r0, r5
   122b4:	bl	1520c <flatcc_builder_end_table@@Base>
   122b8:	subs	r1, r0, #0
   122bc:	beq	12394 <_start@@Base+0x31c>
   122c0:	mov	r0, r5
   122c4:	bl	14000 <flatcc_builder_offset_vector_push@@Base>
   122c8:	subs	sl, sl, #1
   122cc:	beq	123a8 <_start@@Base+0x330>
   122d0:	mov	r1, #36	; 0x24
   122d4:	mov	r0, r5
   122d8:	bl	147bc <flatcc_builder_start_table@@Base>
   122dc:	mov	r0, r5
   122e0:	bl	14610 <flatcc_builder_start_string@@Base>
   122e4:	mov	r4, #100	; 0x64
   122e8:	mov	r2, r8
   122ec:	mov	r1, r9
   122f0:	mov	r0, r5
   122f4:	bl	14228 <flatcc_builder_append_string@@Base>
   122f8:	subs	r4, r4, #1
   122fc:	bne	122e8 <_start@@Base+0x270>
   12300:	mov	r0, r5
   12304:	bl	160a4 <flatcc_builder_end_string@@Base>
   12308:	subs	r4, r0, #0
   1230c:	beq	12324 <_start@@Base+0x2ac>
   12310:	mov	r1, #3
   12314:	mov	r0, r5
   12318:	bl	16384 <flatcc_builder_table_add_offset@@Base>
   1231c:	cmp	r0, #0
   12320:	strne	r4, [r0]
   12324:	mvn	r3, #0
   12328:	mov	r2, fp
   1232c:	mov	r1, fp
   12330:	mov	r0, r5
   12334:	bl	1450c <flatcc_builder_start_vector@@Base>
   12338:	mov	r4, #100	; 0x64
   1233c:	mov	r6, #1000	; 0x3e8
   12340:	mov	r2, r6
   12344:	mov	r1, r7
   12348:	mov	r0, r5
   1234c:	bl	13e78 <flatcc_builder_append_vector@@Base>
   12350:	subs	r4, r4, #1
   12354:	bne	12340 <_start@@Base+0x2c8>
   12358:	mov	r0, r5
   1235c:	bl	1551c <flatcc_builder_end_vector@@Base>
   12360:	subs	r4, r0, #0
   12364:	beq	12298 <_start@@Base+0x220>
   12368:	mov	r1, #5
   1236c:	mov	r0, r5
   12370:	bl	16384 <flatcc_builder_table_add_offset@@Base>
   12374:	cmp	r0, #0
   12378:	strne	r4, [r0]
   1237c:	b	12298 <_start@@Base+0x220>
   12380:	ldr	r3, [pc, #180]	; 1243c <_start@@Base+0x3c4>
   12384:	mov	r2, #235	; 0xeb
   12388:	ldr	r1, [pc, #176]	; 12440 <_start@@Base+0x3c8>
   1238c:	ldr	r0, [pc, #176]	; 12444 <_start@@Base+0x3cc>
   12390:	bl	1206c <__assert_fail@plt>
   12394:	ldr	r3, [pc, #172]	; 12448 <_start@@Base+0x3d0>
   12398:	mov	r2, #42	; 0x2a
   1239c:	ldr	r1, [pc, #168]	; 1244c <_start@@Base+0x3d4>
   123a0:	ldr	r0, [pc, #168]	; 12450 <_start@@Base+0x3d8>
   123a4:	bl	1206c <__assert_fail@plt>
   123a8:	mov	r0, r5
   123ac:	bl	15634 <flatcc_builder_end_offset_vector@@Base>
   123b0:	subs	r4, r0, #0
   123b4:	beq	12400 <_start@@Base+0x388>
   123b8:	mov	r1, #11
   123bc:	mov	r0, r5
   123c0:	bl	16384 <flatcc_builder_table_add_offset@@Base>
   123c4:	cmp	r0, #0
   123c8:	strne	r4, [r0]
   123cc:	mov	r2, #1
   123d0:	ldr	r1, [pc, #96]	; 12438 <_start@@Base+0x3c0>
   123d4:	mov	r0, r5
   123d8:	bl	15160 <flatcc_builder_check_required@@Base>
   123dc:	cmp	r0, #0
   123e0:	beq	12414 <_start@@Base+0x39c>
   123e4:	mov	r0, r5
   123e8:	bl	1520c <flatcc_builder_end_table@@Base>
   123ec:	mov	r1, r0
   123f0:	mov	r0, r5
   123f4:	bl	13a48 <flatcc_builder_end_buffer@@Base>
   123f8:	mov	r0, #0
   123fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12400:	ldr	r3, [pc, #76]	; 12454 <_start@@Base+0x3dc>
   12404:	mov	r2, #56	; 0x38
   12408:	ldr	r1, [pc, #60]	; 1244c <_start@@Base+0x3d4>
   1240c:	ldr	r0, [pc, #68]	; 12458 <_start@@Base+0x3e0>
   12410:	bl	1206c <__assert_fail@plt>
   12414:	ldr	r3, [pc, #32]	; 1243c <_start@@Base+0x3c4>
   12418:	mov	r2, #235	; 0xeb
   1241c:	ldr	r1, [pc, #28]	; 12440 <_start@@Base+0x3c8>
   12420:	ldr	r0, [pc, #28]	; 12444 <_start@@Base+0x3cc>
   12424:	bl	1206c <__assert_fail@plt>
   12428:	andeq	r7, r1, r8, lsl r1
   1242c:	andeq	r7, r1, r0, lsr #2
   12430:	andeq	r7, r1, r0, lsr r1
   12434:	andeq	r9, r2, r4, ror r0
   12438:	andeq	r7, r1, r0, lsr #1
   1243c:	andeq	r7, r1, r4, lsr #1
   12440:	andeq	r7, r1, r8, lsr r1
   12444:	muleq	r1, r8, r1
   12448:	andeq	r7, r1, r0, asr #1
   1244c:	andeq	r7, r1, ip, lsr r2
   12450:	andeq	r7, r1, r8, lsl #5
   12454:	ldrdeq	r7, [r1], -r0
   12458:	andeq	r7, r1, ip, lsl #5

0001245c <main@@Base>:
   1245c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12460:	vpush	{d8-d9}
   12464:	sub	sp, sp, #260	; 0x104
   12468:	add	r0, sp, #20
   1246c:	bl	1305c <flatcc_builder_init@@Base>
   12470:	add	r0, sp, #20
   12474:	bl	1221c <_start@@Base+0x1a4>
   12478:	add	r1, sp, #252	; 0xfc
   1247c:	add	r0, sp, #20
   12480:	bl	16888 <flatcc_builder_finalize_buffer@@Base>
   12484:	mov	r5, r0
   12488:	str	r0, [sp, #8]
   1248c:	ldr	r1, [pc, #1220]	; 12958 <main@@Base+0x4fc>
   12490:	ldr	r0, [pc, #1220]	; 1295c <main@@Base+0x500>
   12494:	bl	11fa0 <fopen@plt>
   12498:	subs	r4, r0, #0
   1249c:	beq	12920 <main@@Base+0x4c4>
   124a0:	mov	r3, r4
   124a4:	ldr	r2, [sp, #252]	; 0xfc
   124a8:	mov	r1, #1
   124ac:	mov	r0, r5
   124b0:	bl	11fdc <fwrite@plt>
   124b4:	mov	r6, r0
   124b8:	ldr	r5, [sp, #252]	; 0xfc
   124bc:	mov	r0, r4
   124c0:	bl	12054 <fclose@plt>
   124c4:	cmp	r6, r5
   124c8:	beq	124f8 <main@@Base+0x9c>
   124cc:	add	r0, sp, #20
   124d0:	bl	13204 <flatcc_builder_clear@@Base>
   124d4:	ldr	r0, [sp, #8]
   124d8:	bl	11fac <free@plt>
   124dc:	mov	fp, #1
   124e0:	ldr	r0, [pc, #1144]	; 12960 <main@@Base+0x504>
   124e4:	bl	11ff4 <puts@plt>
   124e8:	mov	r0, fp
   124ec:	add	sp, sp, #260	; 0x104
   124f0:	vpop	{d8-d9}
   124f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124f8:	ldr	r1, [sp, #252]	; 0xfc
   124fc:	ldr	r0, [pc, #1120]	; 12964 <main@@Base+0x508>
   12500:	bl	11f94 <printf@plt>
   12504:	ldr	r0, [pc, #1116]	; 12968 <main@@Base+0x50c>
   12508:	bl	11ff4 <puts@plt>
   1250c:	bl	121a0 <_start@@Base+0x128>
   12510:	vmov.f64	d8, d0
   12514:	mov	r3, #10
   12518:	str	r3, [sp, #12]
   1251c:	ldr	sl, [pc, #1096]	; 1296c <main@@Base+0x510>
   12520:	add	r0, sp, #20
   12524:	bl	1221c <_start@@Base+0x1a4>
   12528:	ldr	r2, [sp, #252]	; 0xfc
   1252c:	ldr	r4, [sp, #8]
   12530:	mov	r1, r4
   12534:	add	r0, sp, #20
   12538:	bl	1683c <flatcc_builder_copy_buffer@@Base>
   1253c:	cmp	r4, #0
   12540:	beq	12600 <main@@Base+0x1a4>
   12544:	ldr	r3, [r4, #4]
   12548:	ldr	r1, [pc, #1056]	; 12970 <main@@Base+0x514>
   1254c:	cmp	r3, r1
   12550:	bne	12600 <main@@Base+0x1a4>
   12554:	ldr	r3, [r4]
   12558:	adds	r4, r4, r3
   1255c:	beq	12600 <main@@Base+0x1a4>
   12560:	ldr	r2, [sp, #8]
   12564:	ldr	r5, [r2, r3]
   12568:	sub	r5, r4, r5
   1256c:	ldrh	r6, [r5]
   12570:	cmp	r6, #11
   12574:	bls	12614 <main@@Base+0x1b8>
   12578:	ldrh	r3, [r5, #10]
   1257c:	cmp	r3, #0
   12580:	beq	12614 <main@@Base+0x1b8>
   12584:	add	r0, r4, r3
   12588:	ldr	r3, [r4, r3]
   1258c:	add	r3, r3, #4
   12590:	ldr	r1, [pc, #988]	; 12974 <main@@Base+0x518>
   12594:	add	r0, r0, r3
   12598:	bl	11f88 <strcmp@plt>
   1259c:	subs	r3, r0, #0
   125a0:	str	r3, [sp, #4]
   125a4:	bne	12628 <main@@Base+0x1cc>
   125a8:	cmp	r6, #27
   125ac:	bls	1263c <main@@Base+0x1e0>
   125b0:	ldrh	r3, [r5, #26]
   125b4:	cmp	r3, #0
   125b8:	beq	1263c <main@@Base+0x1e0>
   125bc:	add	r1, r4, r3
   125c0:	ldr	r3, [r4, r3]
   125c4:	add	r3, r3, #4
   125c8:	adds	r2, r1, r3
   125cc:	beq	1263c <main@@Base+0x1e0>
   125d0:	ldr	r0, [r2, #-4]
   125d4:	cmp	r0, #1000	; 0x3e8
   125d8:	bne	1263c <main@@Base+0x1e0>
   125dc:	ldr	r3, [r1, r3]
   125e0:	adds	r3, r2, r3
   125e4:	beq	12650 <main@@Base+0x1f4>
   125e8:	add	r2, r2, #4
   125ec:	str	r2, [sp]
   125f0:	ldr	r7, [pc, #896]	; 12978 <main@@Base+0x51c>
   125f4:	mov	r6, #7
   125f8:	mov	r8, #1000	; 0x3e8
   125fc:	b	12734 <main@@Base+0x2d8>
   12600:	ldr	r3, [pc, #884]	; 1297c <main@@Base+0x520>
   12604:	ldr	r2, [pc, #884]	; 12980 <main@@Base+0x524>
   12608:	ldr	r1, [pc, #884]	; 12984 <main@@Base+0x528>
   1260c:	ldr	r0, [pc, #884]	; 12988 <main@@Base+0x52c>
   12610:	bl	1206c <__assert_fail@plt>
   12614:	ldr	r3, [pc, #864]	; 1297c <main@@Base+0x520>
   12618:	ldr	r2, [pc, #864]	; 12980 <main@@Base+0x524>
   1261c:	ldr	r1, [pc, #864]	; 12984 <main@@Base+0x528>
   12620:	ldr	r0, [pc, #868]	; 1298c <main@@Base+0x530>
   12624:	bl	1206c <__assert_fail@plt>
   12628:	ldr	r3, [pc, #864]	; 12990 <main@@Base+0x534>
   1262c:	mov	r2, #139	; 0x8b
   12630:	ldr	r1, [pc, #860]	; 12994 <main@@Base+0x538>
   12634:	ldr	r0, [pc, #860]	; 12998 <main@@Base+0x53c>
   12638:	bl	1206c <__assert_fail@plt>
   1263c:	ldr	r3, [pc, #844]	; 12990 <main@@Base+0x534>
   12640:	mov	r2, #143	; 0x8f
   12644:	ldr	r1, [pc, #840]	; 12994 <main@@Base+0x538>
   12648:	ldr	r0, [pc, #840]	; 12998 <main@@Base+0x53c>
   1264c:	bl	1206c <__assert_fail@plt>
   12650:	ldr	r3, [pc, #804]	; 1297c <main@@Base+0x520>
   12654:	ldr	r2, [pc, #804]	; 12980 <main@@Base+0x524>
   12658:	ldr	r1, [pc, #804]	; 12984 <main@@Base+0x528>
   1265c:	ldr	r0, [pc, #804]	; 12988 <main@@Base+0x52c>
   12660:	bl	1206c <__assert_fail@plt>
   12664:	ldr	r3, [pc, #784]	; 1297c <main@@Base+0x520>
   12668:	ldr	r2, [pc, #784]	; 12980 <main@@Base+0x524>
   1266c:	ldr	r1, [pc, #784]	; 12984 <main@@Base+0x528>
   12670:	ldr	r0, [pc, #788]	; 1298c <main@@Base+0x530>
   12674:	bl	1206c <__assert_fail@plt>
   12678:	cmp	r9, #0
   1267c:	beq	12790 <main@@Base+0x334>
   12680:	ldr	r3, [r9, #-4]
   12684:	cmp	r3, #700	; 0x2bc
   12688:	bne	12790 <main@@Base+0x334>
   1268c:	cmp	r5, #0
   12690:	beq	127a4 <main@@Base+0x348>
   12694:	ldr	r3, [r5, #-4]
   12698:	ldr	r2, [pc, #764]	; 1299c <main@@Base+0x540>
   1269c:	cmp	r3, r2
   126a0:	bne	127a4 <main@@Base+0x348>
   126a4:	mov	r4, r9
   126a8:	mov	fp, #0
   126ac:	mov	r2, r6
   126b0:	mov	r1, r7
   126b4:	mov	r0, r4
   126b8:	bl	11fc4 <memcmp@plt>
   126bc:	cmp	r0, #0
   126c0:	bne	127b8 <main@@Base+0x35c>
   126c4:	add	fp, fp, #1
   126c8:	add	r4, r4, #7
   126cc:	cmp	fp, #100	; 0x64
   126d0:	bne	126ac <main@@Base+0x250>
   126d4:	mov	r4, r5
   126d8:	add	r5, r5, #99328	; 0x18400
   126dc:	add	r5, r5, #672	; 0x2a0
   126e0:	mov	r2, r8
   126e4:	mov	r1, sl
   126e8:	mov	r0, r4
   126ec:	bl	11fc4 <memcmp@plt>
   126f0:	cmp	r0, #0
   126f4:	bne	127ec <main@@Base+0x390>
   126f8:	add	r4, r4, #1000	; 0x3e8
   126fc:	cmp	r4, r5
   12700:	bne	126e0 <main@@Base+0x284>
   12704:	ldr	r3, [sp, #4]
   12708:	add	r3, r3, #1
   1270c:	str	r3, [sp, #4]
   12710:	cmp	r3, #1000	; 0x3e8
   12714:	beq	12800 <main@@Base+0x3a4>
   12718:	ldr	r2, [sp]
   1271c:	mov	r3, r2
   12720:	add	r2, r2, #4
   12724:	str	r2, [sp]
   12728:	ldr	r2, [r3]
   1272c:	adds	r3, r3, r2
   12730:	beq	12650 <main@@Base+0x1f4>
   12734:	ldr	r2, [r3]
   12738:	sub	r2, r3, r2
   1273c:	ldrh	r0, [r2]
   12740:	cmp	r0, #11
   12744:	bls	12664 <main@@Base+0x208>
   12748:	ldrh	r1, [r2, #10]
   1274c:	cmp	r1, #0
   12750:	beq	12664 <main@@Base+0x208>
   12754:	add	r9, r3, r1
   12758:	ldr	r1, [r3, r1]
   1275c:	add	r1, r1, #4
   12760:	add	r9, r9, r1
   12764:	cmp	r0, #15
   12768:	movls	r5, #0
   1276c:	bls	12678 <main@@Base+0x21c>
   12770:	ldrh	r2, [r2, #14]
   12774:	cmp	r2, #0
   12778:	addne	r5, r3, r2
   1277c:	ldrne	r3, [r3, r2]
   12780:	addne	r3, r3, #4
   12784:	addne	r5, r5, r3
   12788:	moveq	r5, #0
   1278c:	b	12678 <main@@Base+0x21c>
   12790:	ldr	r3, [pc, #520]	; 129a0 <main@@Base+0x544>
   12794:	mov	r2, #74	; 0x4a
   12798:	ldr	r1, [pc, #500]	; 12994 <main@@Base+0x538>
   1279c:	ldr	r0, [pc, #512]	; 129a4 <main@@Base+0x548>
   127a0:	bl	1206c <__assert_fail@plt>
   127a4:	ldr	r3, [pc, #500]	; 129a0 <main@@Base+0x544>
   127a8:	mov	r2, #78	; 0x4e
   127ac:	ldr	r1, [pc, #480]	; 12994 <main@@Base+0x538>
   127b0:	ldr	r0, [pc, #492]	; 129a4 <main@@Base+0x548>
   127b4:	bl	1206c <__assert_fail@plt>
   127b8:	mov	r2, r9
   127bc:	mov	r1, fp
   127c0:	ldr	r0, [pc, #480]	; 129a8 <main@@Base+0x54c>
   127c4:	bl	11f94 <printf@plt>
   127c8:	ldr	r3, [sp, #8]
   127cc:	sub	r1, r4, r3
   127d0:	ldr	r0, [pc, #468]	; 129ac <main@@Base+0x550>
   127d4:	bl	11f94 <printf@plt>
   127d8:	ldr	r3, [pc, #448]	; 129a0 <main@@Base+0x544>
   127dc:	mov	r2, #85	; 0x55
   127e0:	ldr	r1, [pc, #428]	; 12994 <main@@Base+0x538>
   127e4:	ldr	r0, [pc, #440]	; 129a4 <main@@Base+0x548>
   127e8:	bl	1206c <__assert_fail@plt>
   127ec:	ldr	r3, [pc, #428]	; 129a0 <main@@Base+0x544>
   127f0:	mov	r2, #91	; 0x5b
   127f4:	ldr	r1, [pc, #408]	; 12994 <main@@Base+0x538>
   127f8:	ldr	r0, [pc, #420]	; 129a4 <main@@Base+0x548>
   127fc:	bl	1206c <__assert_fail@plt>
   12800:	ldr	r3, [sp, #12]
   12804:	subs	r3, r3, #1
   12808:	str	r3, [sp, #12]
   1280c:	bne	12520 <main@@Base+0xc4>
   12810:	mov	fp, r0
   12814:	bl	121a0 <_start@@Base+0x128>
   12818:	ldr	r4, [sp, #252]	; 0xfc
   1281c:	vsub.f64	d8, d0, d8
   12820:	ldr	r1, [pc, #392]	; 129b0 <main@@Base+0x554>
   12824:	ldr	r0, [pc, #392]	; 129b4 <main@@Base+0x558>
   12828:	bl	11f94 <printf@plt>
   1282c:	vmov	r2, r3, d8
   12830:	ldr	r0, [pc, #384]	; 129b8 <main@@Base+0x55c>
   12834:	bl	11f94 <printf@plt>
   12838:	mov	r1, #10
   1283c:	ldr	r0, [pc, #376]	; 129bc <main@@Base+0x560>
   12840:	bl	11f94 <printf@plt>
   12844:	mov	r1, r4
   12848:	ldr	r0, [pc, #368]	; 129c0 <main@@Base+0x564>
   1284c:	bl	11f94 <printf@plt>
   12850:	vmov	s15, r4
   12854:	vcvt.f64.u32	d7, s15
   12858:	vldr	d9, [pc, #216]	; 12938 <main@@Base+0x4dc>
   1285c:	vmul.f64	d7, d7, d9
   12860:	vldr	d5, [pc, #216]	; 12940 <main@@Base+0x4e4>
   12864:	vdiv.f64	d6, d7, d5
   12868:	vdiv.f64	d7, d6, d8
   1286c:	vmov	r2, r3, d7
   12870:	ldr	r0, [pc, #332]	; 129c4 <main@@Base+0x568>
   12874:	bl	11f94 <printf@plt>
   12878:	vdiv.f64	d7, d9, d8
   1287c:	vmov	r2, r3, d7
   12880:	ldr	r0, [pc, #320]	; 129c8 <main@@Base+0x56c>
   12884:	bl	11f94 <printf@plt>
   12888:	vldr	d7, [pc, #184]	; 12948 <main@@Base+0x4ec>
   1288c:	vmul.f64	d8, d8, d7
   12890:	vdiv.f64	d7, d8, d9
   12894:	vldr	d6, [pc, #180]	; 12950 <main@@Base+0x4f4>
   12898:	vcmpe.f64	d7, d6
   1289c:	vmrs	APSR_nzcv, fpscr
   128a0:	bmi	128f8 <main@@Base+0x49c>
   128a4:	vldr	d6, [pc, #148]	; 12940 <main@@Base+0x4e4>
   128a8:	vcmpe.f64	d7, d6
   128ac:	vmrs	APSR_nzcv, fpscr
   128b0:	bmi	12908 <main@@Base+0x4ac>
   128b4:	vldr	d6, [pc, #140]	; 12948 <main@@Base+0x4ec>
   128b8:	vcmpe.f64	d7, d6
   128bc:	vmrs	APSR_nzcv, fpscr
   128c0:	vldrmi	d6, [pc, #120]	; 12940 <main@@Base+0x4e4>
   128c4:	vdivmi.f64	d5, d7, d6
   128c8:	vmovmi	r2, r3, d5
   128cc:	ldrmi	r0, [pc, #248]	; 129cc <main@@Base+0x570>
   128d0:	vldrpl	d6, [pc, #112]	; 12948 <main@@Base+0x4ec>
   128d4:	vdivpl.f64	d5, d7, d6
   128d8:	vmovpl	r2, r3, d5
   128dc:	ldrpl	r0, [pc, #236]	; 129d0 <main@@Base+0x574>
   128e0:	bl	11f94 <printf@plt>
   128e4:	add	r0, sp, #20
   128e8:	bl	13204 <flatcc_builder_clear@@Base>
   128ec:	ldr	r0, [sp, #8]
   128f0:	bl	11fac <free@plt>
   128f4:	b	124e8 <main@@Base+0x8c>
   128f8:	vmov	r2, r3, d7
   128fc:	ldr	r0, [pc, #208]	; 129d4 <main@@Base+0x578>
   12900:	bl	11f94 <printf@plt>
   12904:	b	128e4 <main@@Base+0x488>
   12908:	vldr	d6, [pc, #64]	; 12950 <main@@Base+0x4f4>
   1290c:	vdiv.f64	d5, d7, d6
   12910:	vmov	r2, r3, d5
   12914:	ldr	r0, [pc, #188]	; 129d8 <main@@Base+0x57c>
   12918:	bl	11f94 <printf@plt>
   1291c:	b	128e4 <main@@Base+0x488>
   12920:	add	r0, sp, #20
   12924:	bl	13204 <flatcc_builder_clear@@Base>
   12928:	ldr	r0, [sp, #8]
   1292c:	bl	11fac <free@plt>
   12930:	mvn	fp, #0
   12934:	b	124e0 <main@@Base+0x84>
   12938:	andeq	r0, r0, r0
   1293c:	eormi	r0, r4, r0
   12940:	andeq	r0, r0, r0
   12944:	smlawbmi	lr, r0, r4, r8
   12948:	andeq	r0, r0, r0
   1294c:	bicmi	ip, sp, r5, ror #26
   12950:	andeq	r0, r0, r0
   12954:	addmi	r4, pc, r0
   12958:	muleq	r1, r0, r2
   1295c:	muleq	r1, r4, r2
   12960:	ldrdeq	r7, [r1], -r0
   12964:	andeq	r7, r1, ip, lsr #5
   12968:	andeq	r7, r1, r0, asr #5
   1296c:	andeq	r9, r2, r4, ror r0
   12970:	movtpl	r4, #61261	; 0xef4d
   12974:	andeq	r7, r1, r0, lsr #2
   12978:	andeq	r7, r1, r0, lsr r1
   1297c:	andeq	r7, r1, r4, ror #1
   12980:			; <UNDEFINED> instruction: 0x000002bb
   12984:	ldrdeq	r7, [r1], -r4
   12988:	andeq	r7, r1, r4, lsr r3
   1298c:	andeq	r7, r1, ip, asr r3
   12990:	andeq	r7, r1, r0, lsl #2
   12994:	andeq	r7, r1, ip, lsr r2
   12998:	andeq	r7, r1, r0, lsl #7
   1299c:	andeq	r8, r1, r0, lsr #13
   129a0:	andeq	r7, r1, r8, lsl #2
   129a4:	andeq	r7, r1, r8, lsl #25
   129a8:	andeq	r7, r1, ip, lsl #7
   129ac:	andeq	r7, r1, ip, lsr #7
   129b0:			; <UNDEFINED> instruction: 0x000173bc
   129b4:	andeq	r7, r1, r8, ror #7
   129b8:	strdeq	r7, [r1], -r8
   129bc:	andeq	r7, r1, r0, lsl r4
   129c0:	andeq	r7, r1, r0, lsr #8
   129c4:	andeq	r7, r1, r4, lsr r4
   129c8:	andeq	r7, r1, ip, asr #8
   129cc:	andeq	r7, r1, r0, lsr #9
   129d0:			; <UNDEFINED> instruction: 0x000174b8
   129d4:	andeq	r7, r1, r0, ror r4
   129d8:	andeq	r7, r1, r8, lsl #9
   129dc:	push	{r4, r5, r6, lr}
   129e0:	sub	sp, sp, #8
   129e4:	mov	r4, r0
   129e8:	mov	r5, r2
   129ec:	ldr	r2, [r0, #28]
   129f0:	mov	r3, #1
   129f4:	str	r3, [sp]
   129f8:	ldr	r6, [r0, #48]	; 0x30
   129fc:	add	r2, r1, r2
   12a00:	add	r1, r0, #60	; 0x3c
   12a04:	ldr	r0, [r0, #40]	; 0x28
   12a08:	blx	r6
   12a0c:	cmp	r0, #0
   12a10:	bne	12a48 <main@@Base+0x5ec>
   12a14:	ldr	r1, [r4, #28]
   12a18:	ldr	r2, [r4, #60]	; 0x3c
   12a1c:	add	r2, r2, r1
   12a20:	str	r2, [r4, #16]
   12a24:	ldr	r3, [r4, #64]	; 0x40
   12a28:	sub	r3, r3, r1
   12a2c:	cmp	r3, r5
   12a30:	movcs	r3, r5
   12a34:	str	r3, [r4, #24]
   12a38:	ldr	r3, [r4, #32]
   12a3c:	str	r5, [r3, #4]
   12a40:	add	sp, sp, #8
   12a44:	pop	{r4, r5, r6, pc}
   12a48:	mvn	r0, #0
   12a4c:	b	12a40 <main@@Base+0x5e4>

00012a50 <flatcc_builder_default_alloc@@Base>:
   12a50:	push	{r4, r5, r6, r7, r8, lr}
   12a54:	mov	r5, r1
   12a58:	cmp	r2, #0
   12a5c:	bne	12a80 <flatcc_builder_default_alloc@@Base+0x30>
   12a60:	ldr	r0, [r1]
   12a64:	cmp	r0, #0
   12a68:	beq	12b4c <flatcc_builder_default_alloc@@Base+0xfc>
   12a6c:	bl	11fac <free@plt>
   12a70:	mov	r0, #0
   12a74:	str	r0, [r5]
   12a78:	str	r0, [r5, #4]
   12a7c:	pop	{r4, r5, r6, r7, r8, pc}
   12a80:	mov	r6, r3
   12a84:	ldr	r3, [sp, #24]
   12a88:	sub	r3, r3, #1
   12a8c:	cmp	r3, #6
   12a90:	ldrls	pc, [pc, r3, lsl #2]
   12a94:	b	12b28 <flatcc_builder_default_alloc@@Base+0xd8>
   12a98:			; <UNDEFINED> instruction: 0x00012abc
   12a9c:	andeq	r2, r1, r8, lsr #22
   12aa0:	andeq	r2, r1, r8, lsr #22
   12aa4:			; <UNDEFINED> instruction: 0x00012ab4
   12aa8:	andeq	r2, r1, r0, lsr fp
   12aac:	andeq	r2, r1, r8, lsr #22
   12ab0:	andeq	r2, r1, r0, lsr #22
   12ab4:	mov	r4, #288	; 0x120
   12ab8:	b	12ac0 <flatcc_builder_default_alloc@@Base+0x70>
   12abc:	mov	r4, #256	; 0x100
   12ac0:	cmp	r4, r2
   12ac4:	bcs	12ad4 <flatcc_builder_default_alloc@@Base+0x84>
   12ac8:	lsl	r4, r4, #1
   12acc:	cmp	r2, r4
   12ad0:	bhi	12ac8 <flatcc_builder_default_alloc@@Base+0x78>
   12ad4:	ldr	r3, [r5, #4]
   12ad8:	cmp	r2, r3
   12adc:	bhi	12ae8 <flatcc_builder_default_alloc@@Base+0x98>
   12ae0:	cmp	r4, r3, lsr #1
   12ae4:	bls	12b54 <flatcc_builder_default_alloc@@Base+0x104>
   12ae8:	mov	r1, r4
   12aec:	ldr	r0, [r5]
   12af0:	bl	11fd0 <realloc@plt>
   12af4:	subs	r7, r0, #0
   12af8:	beq	12b5c <flatcc_builder_default_alloc@@Base+0x10c>
   12afc:	cmp	r6, #0
   12b00:	beq	12b10 <flatcc_builder_default_alloc@@Base+0xc0>
   12b04:	ldr	r0, [r5, #4]
   12b08:	cmp	r0, r4
   12b0c:	bcc	12b38 <flatcc_builder_default_alloc@@Base+0xe8>
   12b10:	str	r7, [r5]
   12b14:	str	r4, [r5, #4]
   12b18:	mov	r0, #0
   12b1c:	pop	{r4, r5, r6, r7, r8, pc}
   12b20:	mov	r4, #64	; 0x40
   12b24:	b	12ac0 <flatcc_builder_default_alloc@@Base+0x70>
   12b28:	mov	r4, #32
   12b2c:	b	12ac0 <flatcc_builder_default_alloc@@Base+0x70>
   12b30:	mov	r4, r2
   12b34:	b	12ad4 <flatcc_builder_default_alloc@@Base+0x84>
   12b38:	sub	r2, r4, r0
   12b3c:	mov	r1, #0
   12b40:	add	r0, r7, r0
   12b44:	bl	1203c <memset@plt>
   12b48:	b	12b10 <flatcc_builder_default_alloc@@Base+0xc0>
   12b4c:	mov	r0, #0
   12b50:	pop	{r4, r5, r6, r7, r8, pc}
   12b54:	mov	r0, #0
   12b58:	pop	{r4, r5, r6, r7, r8, pc}
   12b5c:	mvn	r0, #0
   12b60:	pop	{r4, r5, r6, r7, r8, pc}
   12b64:	cmp	r2, #0
   12b68:	bne	12b78 <flatcc_builder_default_alloc@@Base+0x128>
   12b6c:	ldrh	r2, [r0, #132]	; 0x84
   12b70:	cmp	r2, #0
   12b74:	moveq	r2, #1
   12b78:	ldrh	ip, [r1]
   12b7c:	cmp	ip, #3
   12b80:	movls	ip, #4
   12b84:	strhls	ip, [r1]
   12b88:	ldrh	ip, [r1]
   12b8c:	cmp	ip, r2
   12b90:	strhcc	r2, [r1]
   12b94:	cmp	r3, #0
   12b98:	bne	12c54 <flatcc_builder_default_alloc@@Base+0x204>
   12b9c:	push	{r4, r5, lr}
   12ba0:	sub	sp, sp, #84	; 0x54
   12ba4:	ldr	r4, [r0, #140]	; 0x8c
   12ba8:	sub	r2, r2, #1
   12bac:	ands	r2, r2, r4
   12bb0:	bne	12bc0 <flatcc_builder_default_alloc@@Base+0x170>
   12bb4:	mov	r0, #0
   12bb8:	add	sp, sp, #84	; 0x54
   12bbc:	pop	{r4, r5, pc}
   12bc0:	str	r2, [sp, #8]
   12bc4:	ldr	r3, [pc, #144]	; 12c5c <flatcc_builder_default_alloc@@Base+0x20c>
   12bc8:	str	r3, [sp, #16]
   12bcc:	str	r2, [sp, #20]
   12bd0:	mov	r3, #1
   12bd4:	str	r3, [sp, #12]
   12bd8:	add	r3, r4, r2
   12bdc:	str	r3, [r0, #140]	; 0x8c
   12be0:	cmp	r4, r3
   12be4:	bgt	12c2c <flatcc_builder_default_alloc@@Base+0x1dc>
   12be8:	ldr	ip, [r0, #36]	; 0x24
   12bec:	str	r2, [sp]
   12bf0:	ldr	r5, [r0, #44]	; 0x2c
   12bf4:	mov	r3, r4
   12bf8:	mov	r2, #1
   12bfc:	add	r1, sp, #16
   12c00:	mov	r0, ip
   12c04:	blx	r5
   12c08:	cmp	r0, #0
   12c0c:	bne	12c40 <flatcc_builder_default_alloc@@Base+0x1f0>
   12c10:	cmn	r4, #1
   12c14:	bne	12bb4 <flatcc_builder_default_alloc@@Base+0x164>
   12c18:	ldr	r3, [pc, #64]	; 12c60 <flatcc_builder_default_alloc@@Base+0x210>
   12c1c:	ldr	r2, [pc, #64]	; 12c64 <flatcc_builder_default_alloc@@Base+0x214>
   12c20:	ldr	r1, [pc, #64]	; 12c68 <flatcc_builder_default_alloc@@Base+0x218>
   12c24:	ldr	r0, [pc, #64]	; 12c6c <flatcc_builder_default_alloc@@Base+0x21c>
   12c28:	bl	1206c <__assert_fail@plt>
   12c2c:	ldr	r3, [pc, #60]	; 12c70 <flatcc_builder_default_alloc@@Base+0x220>
   12c30:	ldr	r2, [pc, #60]	; 12c74 <flatcc_builder_default_alloc@@Base+0x224>
   12c34:	ldr	r1, [pc, #44]	; 12c68 <flatcc_builder_default_alloc@@Base+0x218>
   12c38:	ldr	r0, [pc, #44]	; 12c6c <flatcc_builder_default_alloc@@Base+0x21c>
   12c3c:	bl	1206c <__assert_fail@plt>
   12c40:	ldr	r3, [pc, #40]	; 12c70 <flatcc_builder_default_alloc@@Base+0x220>
   12c44:	ldr	r2, [pc, #44]	; 12c78 <flatcc_builder_default_alloc@@Base+0x228>
   12c48:	ldr	r1, [pc, #24]	; 12c68 <flatcc_builder_default_alloc@@Base+0x218>
   12c4c:	ldr	r0, [pc, #24]	; 12c6c <flatcc_builder_default_alloc@@Base+0x21c>
   12c50:	bl	1206c <__assert_fail@plt>
   12c54:	mov	r0, #0
   12c58:	bx	lr
   12c5c:	andeq	r7, r1, r4, ror #9
   12c60:	strdeq	r7, [r1], -r0
   12c64:			; <UNDEFINED> instruction: 0x000002be
   12c68:	andeq	r7, r1, r4, lsr ip
   12c6c:	andeq	r7, r1, r8, lsl #25
   12c70:	andeq	r7, r1, r4, ror #13
   12c74:	andeq	r0, r0, r1, lsr #5
   12c78:	andeq	r0, r0, r5, lsr #5
   12c7c:	push	{r4, r5, r6, r7, lr}
   12c80:	sub	sp, sp, #12
   12c84:	mov	r4, r0
   12c88:	mov	r6, r1
   12c8c:	ldr	r3, [r0, #156]	; 0x9c
   12c90:	add	r2, r3, #1
   12c94:	str	r2, [r0, #156]	; 0x9c
   12c98:	ldr	r1, [r0, #160]	; 0xa0
   12c9c:	cmp	r2, r1
   12ca0:	ble	12d40 <flatcc_builder_default_alloc@@Base+0x2f0>
   12ca4:	ldr	r1, [r0, #176]	; 0xb0
   12ca8:	cmp	r2, r1
   12cac:	cmpgt	r1, #0
   12cb0:	bgt	12da8 <flatcc_builder_default_alloc@@Base+0x358>
   12cb4:	add	r3, r3, r3, lsl #3
   12cb8:	lsl	r5, r3, #2
   12cbc:	add	r2, r5, #36	; 0x24
   12cc0:	ldr	r3, [r0, #88]	; 0x58
   12cc4:	cmp	r2, r3
   12cc8:	bhi	12d08 <flatcc_builder_default_alloc@@Base+0x2b8>
   12ccc:	ldr	r3, [r4, #84]	; 0x54
   12cd0:	add	r5, r3, r5
   12cd4:	str	r5, [r4, #32]
   12cd8:	cmp	r5, #0
   12cdc:	beq	12db0 <flatcc_builder_default_alloc@@Base+0x360>
   12ce0:	ldr	r3, [r4, #88]	; 0x58
   12ce4:	ldr	r2, [pc, #204]	; 12db8 <flatcc_builder_default_alloc@@Base+0x368>
   12ce8:	umull	r2, r3, r2, r3
   12cec:	lsr	r3, r3, #3
   12cf0:	str	r3, [r4, #160]	; 0xa0
   12cf4:	ldr	r2, [r4, #176]	; 0xb0
   12cf8:	cmp	r2, #0
   12cfc:	cmpgt	r3, r2
   12d00:	strgt	r2, [r4, #160]	; 0xa0
   12d04:	b	12d4c <flatcc_builder_default_alloc@@Base+0x2fc>
   12d08:	mov	r3, #4
   12d0c:	str	r3, [sp]
   12d10:	ldr	r7, [r0, #48]	; 0x30
   12d14:	mov	r3, #0
   12d18:	add	r1, r0, #84	; 0x54
   12d1c:	ldr	r0, [r0, #40]	; 0x28
   12d20:	blx	r7
   12d24:	cmp	r0, #0
   12d28:	beq	12ccc <flatcc_builder_default_alloc@@Base+0x27c>
   12d2c:	ldr	r3, [pc, #136]	; 12dbc <flatcc_builder_default_alloc@@Base+0x36c>
   12d30:	mov	r2, #308	; 0x134
   12d34:	ldr	r1, [pc, #132]	; 12dc0 <flatcc_builder_default_alloc@@Base+0x370>
   12d38:	ldr	r0, [pc, #132]	; 12dc4 <flatcc_builder_default_alloc@@Base+0x374>
   12d3c:	bl	1206c <__assert_fail@plt>
   12d40:	ldr	r3, [r0, #32]
   12d44:	add	r3, r3, #36	; 0x24
   12d48:	str	r3, [r0, #32]
   12d4c:	ldr	r3, [r4, #32]
   12d50:	ldr	r2, [r4, #20]
   12d54:	str	r2, [r3, #8]
   12d58:	ldr	r3, [r4, #32]
   12d5c:	ldrh	r2, [r4, #130]	; 0x82
   12d60:	strh	r2, [r3, #12]
   12d64:	strh	r6, [r4, #130]	; 0x82
   12d68:	ldr	r3, [r4, #32]
   12d6c:	ldr	r2, [r4, #28]
   12d70:	str	r2, [r3]
   12d74:	ldr	r3, [r4, #32]
   12d78:	mvn	r2, #3
   12d7c:	str	r2, [r3, #4]
   12d80:	ldr	r3, [r4, #28]
   12d84:	ldr	r2, [r4, #20]
   12d88:	add	r3, r3, r2
   12d8c:	add	r3, r3, #7
   12d90:	bic	r3, r3, #7
   12d94:	str	r3, [r4, #28]
   12d98:	mov	r0, #0
   12d9c:	str	r0, [r4, #20]
   12da0:	add	sp, sp, #12
   12da4:	pop	{r4, r5, r6, r7, pc}
   12da8:	mvn	r0, #0
   12dac:	b	12da0 <flatcc_builder_default_alloc@@Base+0x350>
   12db0:	mvn	r0, #0
   12db4:	b	12da0 <flatcc_builder_default_alloc@@Base+0x350>
   12db8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   12dbc:	andeq	r7, r1, r0, lsl #14
   12dc0:	andeq	r7, r1, r4, lsr ip
   12dc4:	andeq	r7, r1, r8, lsl #25
   12dc8:	push	{r4, r5, r6, r7, r8, lr}
   12dcc:	sub	sp, sp, #88	; 0x58
   12dd0:	cmn	r2, #-1073741823	; 0xc0000001
   12dd4:	bhi	12f88 <flatcc_builder_default_alloc@@Base+0x538>
   12dd8:	ldrh	ip, [r0, #128]	; 0x80
   12ddc:	cmp	ip, #3
   12de0:	movls	ip, #4
   12de4:	strhls	ip, [r0, #128]	; 0x80
   12de8:	str	r2, [sp, #84]	; 0x54
   12dec:	ldr	r7, [r0, #136]	; 0x88
   12df0:	and	lr, r7, #3
   12df4:	mov	ip, #4
   12df8:	str	ip, [sp, #12]
   12dfc:	add	r4, sp, #84	; 0x54
   12e00:	str	r4, [sp, #20]
   12e04:	str	ip, [sp, #24]
   12e08:	mov	ip, #1
   12e0c:	str	ip, [sp, #16]
   12e10:	lsls	r5, r2, #2
   12e14:	beq	12e30 <flatcc_builder_default_alloc@@Base+0x3e0>
   12e18:	add	ip, r5, #4
   12e1c:	str	ip, [sp, #12]
   12e20:	str	r1, [sp, #28]
   12e24:	str	r5, [sp, #32]
   12e28:	mov	ip, #2
   12e2c:	str	ip, [sp, #16]
   12e30:	cmp	lr, #0
   12e34:	beq	12e64 <flatcc_builder_default_alloc@@Base+0x414>
   12e38:	ldr	ip, [sp, #12]
   12e3c:	add	ip, ip, lr
   12e40:	str	ip, [sp, #12]
   12e44:	ldr	ip, [sp, #16]
   12e48:	add	ip, ip, #1
   12e4c:	add	r4, sp, #88	; 0x58
   12e50:	add	r4, r4, ip, lsl #3
   12e54:	ldr	r6, [pc, #308]	; 12f90 <flatcc_builder_default_alloc@@Base+0x540>
   12e58:	str	r6, [r4, #-76]	; 0xffffffb4
   12e5c:	str	lr, [r4, #-72]	; 0xffffffb8
   12e60:	str	ip, [sp, #16]
   12e64:	mov	r6, r0
   12e68:	ldr	r8, [sp, #12]
   12e6c:	sub	r7, r7, r8
   12e70:	cmp	r2, #0
   12e74:	beq	12f1c <flatcc_builder_default_alloc@@Base+0x4cc>
   12e78:	mov	r2, r1
   12e7c:	mov	ip, r3
   12e80:	add	r5, r1, r5
   12e84:	mvn	r1, #3
   12e88:	b	12eb4 <flatcc_builder_default_alloc@@Base+0x464>
   12e8c:	cmp	r3, #0
   12e90:	beq	12f08 <flatcc_builder_default_alloc@@Base+0x4b8>
   12e94:	ldrb	r0, [ip]
   12e98:	cmp	r0, #0
   12e9c:	bne	12ef4 <flatcc_builder_default_alloc@@Base+0x4a4>
   12ea0:	add	r2, r2, #4
   12ea4:	add	ip, ip, #1
   12ea8:	sub	r1, r1, #4
   12eac:	cmp	r2, r5
   12eb0:	beq	12f1c <flatcc_builder_default_alloc@@Base+0x4cc>
   12eb4:	ldr	lr, [r2]
   12eb8:	cmp	lr, #0
   12ebc:	beq	12e8c <flatcc_builder_default_alloc@@Base+0x43c>
   12ec0:	sub	r4, r1, r7
   12ec4:	add	lr, r4, lr
   12ec8:	str	lr, [r2]
   12ecc:	cmp	r3, #0
   12ed0:	beq	12ea0 <flatcc_builder_default_alloc@@Base+0x450>
   12ed4:	ldrb	r0, [ip]
   12ed8:	cmp	r0, #0
   12edc:	bne	12ea0 <flatcc_builder_default_alloc@@Base+0x450>
   12ee0:	ldr	r3, [pc, #172]	; 12f94 <flatcc_builder_default_alloc@@Base+0x544>
   12ee4:	ldr	r2, [pc, #172]	; 12f98 <flatcc_builder_default_alloc@@Base+0x548>
   12ee8:	ldr	r1, [pc, #172]	; 12f9c <flatcc_builder_default_alloc@@Base+0x54c>
   12eec:	ldr	r0, [pc, #172]	; 12fa0 <flatcc_builder_default_alloc@@Base+0x550>
   12ef0:	bl	1206c <__assert_fail@plt>
   12ef4:	ldr	r3, [pc, #152]	; 12f94 <flatcc_builder_default_alloc@@Base+0x544>
   12ef8:	ldr	r2, [pc, #164]	; 12fa4 <flatcc_builder_default_alloc@@Base+0x554>
   12efc:	ldr	r1, [pc, #152]	; 12f9c <flatcc_builder_default_alloc@@Base+0x54c>
   12f00:	ldr	r0, [pc, #160]	; 12fa8 <flatcc_builder_default_alloc@@Base+0x558>
   12f04:	bl	1206c <__assert_fail@plt>
   12f08:	ldr	r3, [pc, #132]	; 12f94 <flatcc_builder_default_alloc@@Base+0x544>
   12f0c:	ldr	r2, [pc, #152]	; 12fac <flatcc_builder_default_alloc@@Base+0x55c>
   12f10:	ldr	r1, [pc, #132]	; 12f9c <flatcc_builder_default_alloc@@Base+0x54c>
   12f14:	ldr	r0, [pc, #148]	; 12fb0 <flatcc_builder_default_alloc@@Base+0x560>
   12f18:	bl	1206c <__assert_fail@plt>
   12f1c:	ldr	r3, [r6, #136]	; 0x88
   12f20:	sub	r4, r3, r8
   12f24:	cmp	r3, r4
   12f28:	ble	12f60 <flatcc_builder_default_alloc@@Base+0x510>
   12f2c:	str	r8, [sp]
   12f30:	ldr	r5, [r6, #44]	; 0x2c
   12f34:	mov	r3, r4
   12f38:	ldr	r2, [sp, #16]
   12f3c:	add	r1, sp, #20
   12f40:	ldr	r0, [r6, #36]	; 0x24
   12f44:	blx	r5
   12f48:	cmp	r0, #0
   12f4c:	streq	r4, [r6, #136]	; 0x88
   12f50:	bne	12f74 <flatcc_builder_default_alloc@@Base+0x524>
   12f54:	mov	r0, r4
   12f58:	add	sp, sp, #88	; 0x58
   12f5c:	pop	{r4, r5, r6, r7, r8, pc}
   12f60:	ldr	r3, [pc, #76]	; 12fb4 <flatcc_builder_default_alloc@@Base+0x564>
   12f64:	ldr	r2, [pc, #76]	; 12fb8 <flatcc_builder_default_alloc@@Base+0x568>
   12f68:	ldr	r1, [pc, #44]	; 12f9c <flatcc_builder_default_alloc@@Base+0x54c>
   12f6c:	ldr	r0, [pc, #60]	; 12fb0 <flatcc_builder_default_alloc@@Base+0x560>
   12f70:	bl	1206c <__assert_fail@plt>
   12f74:	ldr	r3, [pc, #56]	; 12fb4 <flatcc_builder_default_alloc@@Base+0x564>
   12f78:	ldr	r2, [pc, #60]	; 12fbc <flatcc_builder_default_alloc@@Base+0x56c>
   12f7c:	ldr	r1, [pc, #24]	; 12f9c <flatcc_builder_default_alloc@@Base+0x54c>
   12f80:	ldr	r0, [pc, #40]	; 12fb0 <flatcc_builder_default_alloc@@Base+0x560>
   12f84:	bl	1206c <__assert_fail@plt>
   12f88:	mov	r4, #0
   12f8c:	b	12f54 <flatcc_builder_default_alloc@@Base+0x504>
   12f90:	andeq	r7, r1, r4, ror #9
   12f94:	andeq	r7, r1, r0, lsl r7
   12f98:			; <UNDEFINED> instruction: 0x000005b1
   12f9c:	andeq	r7, r1, r4, lsr ip
   12fa0:	andeq	r7, r1, ip, ror ip
   12fa4:			; <UNDEFINED> instruction: 0x000005b5
   12fa8:	andeq	r7, r1, ip, lsl #25
   12fac:			; <UNDEFINED> instruction: 0x000005b7
   12fb0:	andeq	r7, r1, r8, lsl #25
   12fb4:	andeq	r7, r1, r0, lsr r7
   12fb8:	andeq	r0, r0, r7, lsl #5
   12fbc:	andeq	r0, r0, fp, lsl #5

00012fc0 <flatcc_builder_flush_vtable_cache@@Base>:
   12fc0:	ldr	r3, [r0, #116]	; 0x74
   12fc4:	cmp	r3, #0
   12fc8:	bxeq	lr
   12fcc:	push	{r4, lr}
   12fd0:	mov	r4, r0
   12fd4:	ldr	r2, [r0, #96]	; 0x60
   12fd8:	mov	r1, #0
   12fdc:	ldr	r0, [r0, #92]	; 0x5c
   12fe0:	bl	1203c <memset@plt>
   12fe4:	mov	r3, #16
   12fe8:	str	r3, [r4, #124]	; 0x7c
   12fec:	mov	r3, #0
   12ff0:	str	r3, [r4, #120]	; 0x78
   12ff4:	pop	{r4, pc}

00012ff8 <flatcc_builder_custom_init@@Base>:
   12ff8:	push	{r4, r5, r6, r7, r8, lr}
   12ffc:	mov	r4, r0
   13000:	mov	r6, r1
   13004:	mov	r7, r2
   13008:	mov	r5, r3
   1300c:	mov	r2, #232	; 0xe8
   13010:	mov	r1, #0
   13014:	bl	1203c <memset@plt>
   13018:	cmp	r6, #0
   1301c:	moveq	r3, #1
   13020:	streq	r3, [r4, #184]	; 0xb8
   13024:	addeq	r7, r4, #188	; 0xbc
   13028:	ldreq	r6, [pc, #36]	; 13054 <flatcc_builder_custom_init@@Base+0x5c>
   1302c:	ldr	r3, [pc, #36]	; 13058 <flatcc_builder_custom_init@@Base+0x60>
   13030:	cmp	r5, #0
   13034:	moveq	r5, r3
   13038:	ldr	r3, [sp, #24]
   1303c:	str	r3, [r4, #40]	; 0x28
   13040:	str	r5, [r4, #48]	; 0x30
   13044:	str	r7, [r4, #36]	; 0x24
   13048:	str	r6, [r4, #44]	; 0x2c
   1304c:	mov	r0, #0
   13050:	pop	{r4, r5, r6, r7, r8, pc}
   13054:	ldrdeq	r6, [r1], -r0
   13058:	andeq	r2, r1, r0, asr sl

0001305c <flatcc_builder_init@@Base>:
   1305c:	push	{r4, lr}
   13060:	mov	r4, r0
   13064:	mov	r2, #232	; 0xe8
   13068:	mov	r1, #0
   1306c:	bl	1203c <memset@plt>
   13070:	mov	r3, #1
   13074:	str	r3, [r4, #184]	; 0xb8
   13078:	ldr	r3, [pc, #24]	; 13098 <flatcc_builder_init@@Base+0x3c>
   1307c:	str	r3, [r4, #48]	; 0x30
   13080:	add	r3, r4, #188	; 0xbc
   13084:	str	r3, [r4, #36]	; 0x24
   13088:	ldr	r3, [pc, #12]	; 1309c <flatcc_builder_init@@Base+0x40>
   1308c:	str	r3, [r4, #44]	; 0x2c
   13090:	mov	r0, #0
   13094:	pop	{r4, pc}
   13098:	andeq	r2, r1, r0, asr sl
   1309c:	ldrdeq	r6, [r1], -r0

000130a0 <flatcc_builder_custom_reset@@Base>:
   130a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130a4:	sub	sp, sp, #12
   130a8:	mov	r6, r0
   130ac:	mov	fp, r1
   130b0:	mov	r8, r2
   130b4:	mov	r4, r0
   130b8:	mov	r5, #0
   130bc:	mov	r9, r5
   130c0:	mov	sl, #1
   130c4:	b	130e8 <flatcc_builder_custom_reset@@Base+0x48>
   130c8:	ldr	r2, [r7, #56]	; 0x38
   130cc:	mov	r1, r9
   130d0:	ldr	r0, [r7, #52]	; 0x34
   130d4:	bl	1203c <memset@plt>
   130d8:	add	r5, r5, #1
   130dc:	add	r4, r4, #8
   130e0:	cmp	r5, #8
   130e4:	beq	13150 <flatcc_builder_custom_reset@@Base+0xb0>
   130e8:	add	r1, r4, #52	; 0x34
   130ec:	mov	r7, r4
   130f0:	ldr	r3, [r4, #52]	; 0x34
   130f4:	cmp	r3, #0
   130f8:	beq	13130 <flatcc_builder_custom_reset@@Base+0x90>
   130fc:	cmp	r5, #5
   13100:	cmpne	r8, #0
   13104:	beq	130c8 <flatcc_builder_custom_reset@@Base+0x28>
   13108:	str	r5, [sp]
   1310c:	mov	r3, sl
   13110:	mov	r2, sl
   13114:	ldr	r0, [r6, #40]	; 0x28
   13118:	ldr	ip, [r6, #48]	; 0x30
   1311c:	blx	ip
   13120:	cmp	r0, #0
   13124:	beq	130c8 <flatcc_builder_custom_reset@@Base+0x28>
   13128:	mvn	r0, #0
   1312c:	b	131c8 <flatcc_builder_custom_reset@@Base+0x128>
   13130:	ldr	r3, [r4, #56]	; 0x38
   13134:	cmp	r3, #0
   13138:	beq	130d8 <flatcc_builder_custom_reset@@Base+0x38>
   1313c:	ldr	r3, [pc, #156]	; 131e0 <flatcc_builder_custom_reset@@Base+0x140>
   13140:	ldr	r2, [pc, #156]	; 131e4 <flatcc_builder_custom_reset@@Base+0x144>
   13144:	ldr	r1, [pc, #156]	; 131e8 <flatcc_builder_custom_reset@@Base+0x148>
   13148:	ldr	r0, [pc, #156]	; 131ec <flatcc_builder_custom_reset@@Base+0x14c>
   1314c:	bl	1206c <__assert_fail@plt>
   13150:	mov	r3, #0
   13154:	str	r3, [r6, #120]	; 0x78
   13158:	ldr	r3, [r6, #124]	; 0x7c
   1315c:	cmp	r3, #0
   13160:	movne	r3, #16
   13164:	strne	r3, [r6, #124]	; 0x7c
   13168:	mov	r3, #0
   1316c:	strh	r3, [r6, #128]	; 0x80
   13170:	str	r3, [r6, #136]	; 0x88
   13174:	str	r3, [r6, #140]	; 0x8c
   13178:	str	r3, [r6, #156]	; 0x9c
   1317c:	str	r3, [r6, #160]	; 0xa0
   13180:	str	r3, [r6, #20]
   13184:	str	r3, [r6, #24]
   13188:	str	r3, [r6, #148]	; 0x94
   1318c:	str	r3, [r6, #152]	; 0x98
   13190:	ldr	r2, [r6, #60]	; 0x3c
   13194:	str	r2, [r6, #16]
   13198:	ldr	r2, [r6, #76]	; 0x4c
   1319c:	str	r2, [r6]
   131a0:	ldr	r2, [r6, #52]	; 0x34
   131a4:	str	r2, [r6, #4]
   131a8:	str	r3, [r6, #32]
   131ac:	cmp	fp, r3
   131b0:	strne	r3, [r6, #172]	; 0xac
   131b4:	strne	r3, [r6, #176]	; 0xb0
   131b8:	strne	r3, [r6, #180]	; 0xb4
   131bc:	ldr	r0, [r6, #184]	; 0xb8
   131c0:	cmp	r0, #0
   131c4:	bne	131d0 <flatcc_builder_custom_reset@@Base+0x130>
   131c8:	add	sp, sp, #12
   131cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d0:	add	r0, r6, #188	; 0xbc
   131d4:	bl	16a98 <flatcc_emitter_reset@@Base>
   131d8:	mov	r0, #0
   131dc:	b	131c8 <flatcc_builder_custom_reset@@Base+0x128>
   131e0:	andeq	r7, r1, ip, lsr r7
   131e4:			; <UNDEFINED> instruction: 0x000001b2
   131e8:	andeq	r7, r1, r4, lsr ip
   131ec:	muleq	r1, ip, ip

000131f0 <flatcc_builder_reset@@Base>:
   131f0:	push	{r4, lr}
   131f4:	mov	r2, #0
   131f8:	mov	r1, r2
   131fc:	bl	130a0 <flatcc_builder_custom_reset@@Base>
   13200:	pop	{r4, pc}

00013204 <flatcc_builder_clear@@Base>:
   13204:	push	{r4, r5, r6, r7, r8, lr}
   13208:	sub	sp, sp, #8
   1320c:	mov	r6, r0
   13210:	add	r5, r0, #52	; 0x34
   13214:	mov	r4, #0
   13218:	mov	r8, r4
   1321c:	str	r4, [sp]
   13220:	ldr	r7, [r6, #48]	; 0x30
   13224:	mov	r3, r8
   13228:	mov	r2, r8
   1322c:	mov	r1, r5
   13230:	ldr	r0, [r6, #40]	; 0x28
   13234:	blx	r7
   13238:	add	r4, r4, #1
   1323c:	add	r5, r5, #8
   13240:	cmp	r4, #8
   13244:	bne	1321c <flatcc_builder_clear@@Base+0x18>
   13248:	ldr	r3, [r6, #184]	; 0xb8
   1324c:	cmp	r3, #0
   13250:	bne	1326c <flatcc_builder_clear@@Base+0x68>
   13254:	mov	r2, #232	; 0xe8
   13258:	mov	r1, #0
   1325c:	mov	r0, r6
   13260:	bl	1203c <memset@plt>
   13264:	add	sp, sp, #8
   13268:	pop	{r4, r5, r6, r7, r8, pc}
   1326c:	add	r0, r6, #188	; 0xbc
   13270:	bl	16b68 <flatcc_emitter_clear@@Base>
   13274:	b	13254 <flatcc_builder_clear@@Base+0x50>

00013278 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13278:	push	{r4, r5, r6, r7, r8, lr}
   1327c:	sub	sp, sp, #8
   13280:	mov	r7, r0
   13284:	add	r4, r1, #3
   13288:	bic	r4, r4, #3
   1328c:	add	r4, r4, #4
   13290:	ldr	r5, [r0, #228]	; 0xe4
   13294:	add	r2, r4, r5
   13298:	ldr	r3, [r0, #112]	; 0x70
   1329c:	cmp	r2, r3
   132a0:	bhi	132e8 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   132a4:	ldr	r8, [r7, #108]	; 0x6c
   132a8:	adds	r6, r8, r5
   132ac:	beq	13320 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   132b0:	mov	r2, r4
   132b4:	mov	r1, #0
   132b8:	mov	r0, r6
   132bc:	bl	1203c <memset@plt>
   132c0:	ldr	r3, [r7, #224]	; 0xe0
   132c4:	str	r3, [r8, r5]
   132c8:	ldr	r1, [r7, #228]	; 0xe4
   132cc:	add	r3, r1, #4
   132d0:	str	r3, [r7, #224]	; 0xe0
   132d4:	add	r4, r4, r1
   132d8:	str	r4, [r7, #228]	; 0xe4
   132dc:	add	r0, r6, #4
   132e0:	add	sp, sp, #8
   132e4:	pop	{r4, r5, r6, r7, r8, pc}
   132e8:	mov	r3, #7
   132ec:	str	r3, [sp]
   132f0:	ldr	r6, [r0, #48]	; 0x30
   132f4:	mov	r3, #0
   132f8:	add	r1, r0, #108	; 0x6c
   132fc:	ldr	r0, [r0, #40]	; 0x28
   13300:	blx	r6
   13304:	cmp	r0, #0
   13308:	beq	132a4 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   1330c:	ldr	r3, [pc, #20]	; 13328 <flatcc_builder_enter_user_frame_ptr@@Base+0xb0>
   13310:	mov	r2, #308	; 0x134
   13314:	ldr	r1, [pc, #16]	; 1332c <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   13318:	ldr	r0, [pc, #16]	; 13330 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   1331c:	bl	1206c <__assert_fail@plt>
   13320:	mov	r0, #0
   13324:	b	132e0 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>
   13328:	andeq	r7, r1, r0, lsl #14
   1332c:	andeq	r7, r1, r4, lsr ip
   13330:	andeq	r7, r1, r8, lsl #25

00013334 <flatcc_builder_enter_user_frame@@Base>:
   13334:	push	{r4, r5, r6, r7, lr}
   13338:	sub	sp, sp, #12
   1333c:	mov	r6, r0
   13340:	add	r4, r1, #3
   13344:	bic	r4, r4, #3
   13348:	add	r4, r4, #4
   1334c:	ldr	r5, [r0, #228]	; 0xe4
   13350:	add	r2, r4, r5
   13354:	ldr	r3, [r0, #112]	; 0x70
   13358:	cmp	r2, r3
   1335c:	bhi	133a0 <flatcc_builder_enter_user_frame@@Base+0x6c>
   13360:	ldr	r7, [r6, #108]	; 0x6c
   13364:	adds	r0, r7, r5
   13368:	moveq	r0, #0
   1336c:	beq	13398 <flatcc_builder_enter_user_frame@@Base+0x64>
   13370:	mov	r2, r4
   13374:	mov	r1, #0
   13378:	bl	1203c <memset@plt>
   1337c:	ldr	r3, [r6, #224]	; 0xe0
   13380:	str	r3, [r7, r5]
   13384:	ldr	r1, [r6, #228]	; 0xe4
   13388:	add	r0, r1, #4
   1338c:	str	r0, [r6, #224]	; 0xe0
   13390:	add	r4, r4, r1
   13394:	str	r4, [r6, #228]	; 0xe4
   13398:	add	sp, sp, #12
   1339c:	pop	{r4, r5, r6, r7, pc}
   133a0:	mov	r3, #7
   133a4:	str	r3, [sp]
   133a8:	ldr	r7, [r0, #48]	; 0x30
   133ac:	mov	r3, #0
   133b0:	add	r1, r0, #108	; 0x6c
   133b4:	ldr	r0, [r0, #40]	; 0x28
   133b8:	blx	r7
   133bc:	cmp	r0, #0
   133c0:	beq	13360 <flatcc_builder_enter_user_frame@@Base+0x2c>
   133c4:	ldr	r3, [pc, #12]	; 133d8 <flatcc_builder_enter_user_frame@@Base+0xa4>
   133c8:	mov	r2, #308	; 0x134
   133cc:	ldr	r1, [pc, #8]	; 133dc <flatcc_builder_enter_user_frame@@Base+0xa8>
   133d0:	ldr	r0, [pc, #8]	; 133e0 <flatcc_builder_enter_user_frame@@Base+0xac>
   133d4:	bl	1206c <__assert_fail@plt>
   133d8:	andeq	r7, r1, r0, lsl #14
   133dc:	andeq	r7, r1, r4, lsr ip
   133e0:	andeq	r7, r1, r8, lsl #25

000133e4 <flatcc_builder_exit_user_frame@@Base>:
   133e4:	ldr	r3, [r0, #224]	; 0xe0
   133e8:	cmp	r3, #0
   133ec:	beq	13410 <flatcc_builder_exit_user_frame@@Base+0x2c>
   133f0:	ldr	r2, [r0, #108]	; 0x6c
   133f4:	add	r2, r2, r3
   133f8:	sub	r3, r3, #4
   133fc:	str	r3, [r0, #228]	; 0xe4
   13400:	ldr	r3, [r2, #-4]
   13404:	str	r3, [r0, #224]	; 0xe0
   13408:	mov	r0, r3
   1340c:	bx	lr
   13410:	push	{r4, lr}
   13414:	ldr	r3, [pc, #12]	; 13428 <flatcc_builder_exit_user_frame@@Base+0x44>
   13418:	ldr	r2, [pc, #12]	; 1342c <flatcc_builder_exit_user_frame@@Base+0x48>
   1341c:	ldr	r1, [pc, #12]	; 13430 <flatcc_builder_exit_user_frame@@Base+0x4c>
   13420:	ldr	r0, [pc, #12]	; 13434 <flatcc_builder_exit_user_frame@@Base+0x50>
   13424:	bl	1206c <__assert_fail@plt>
   13428:	andeq	r7, r1, r8, asr r7
   1342c:	andeq	r0, r0, lr, lsl r2
   13430:	andeq	r7, r1, r4, lsr ip
   13434:			; <UNDEFINED> instruction: 0x00017cb0

00013438 <flatcc_builder_exit_user_frame_at@@Base>:
   13438:	push	{r4, lr}
   1343c:	ldr	r3, [r0, #224]	; 0xe0
   13440:	cmp	r3, r1
   13444:	bcc	13454 <flatcc_builder_exit_user_frame_at@@Base+0x1c>
   13448:	str	r1, [r0, #224]	; 0xe0
   1344c:	bl	133e4 <flatcc_builder_exit_user_frame@@Base>
   13450:	pop	{r4, pc}
   13454:	ldr	r3, [pc, #12]	; 13468 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13458:	ldr	r2, [pc, #12]	; 1346c <flatcc_builder_exit_user_frame_at@@Base+0x34>
   1345c:	ldr	r1, [pc, #12]	; 13470 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   13460:	ldr	r0, [pc, #12]	; 13474 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13464:	bl	1206c <__assert_fail@plt>
   13468:	andeq	r7, r1, r8, ror r7
   1346c:	andeq	r0, r0, r7, lsr #4
   13470:	andeq	r7, r1, r4, lsr ip
   13474:	andeq	r7, r1, ip, asr #25

00013478 <flatcc_builder_get_current_user_frame@@Base>:
   13478:	ldr	r0, [r0, #224]	; 0xe0
   1347c:	bx	lr

00013480 <flatcc_builder_get_user_frame_ptr@@Base>:
   13480:	ldr	r0, [r0, #108]	; 0x6c
   13484:	add	r0, r0, r1
   13488:	bx	lr

0001348c <flatcc_builder_embed_buffer@@Base>:
   1348c:	push	{r4, r5, r6, lr}
   13490:	sub	sp, sp, #88	; 0x58
   13494:	mov	r4, r0
   13498:	mov	r6, r2
   1349c:	mov	r5, r3
   134a0:	ldr	r3, [r0, #152]	; 0x98
   134a4:	adds	r3, r3, #0
   134a8:	movne	r3, #1
   134ac:	mov	r2, r1
   134b0:	add	r1, sp, #104	; 0x68
   134b4:	bl	12b64 <flatcc_builder_default_alloc@@Base+0x114>
   134b8:	cmp	r0, #0
   134bc:	bne	135f8 <flatcc_builder_embed_buffer@@Base+0x16c>
   134c0:	ldr	r3, [sp, #108]	; 0x6c
   134c4:	and	r3, r3, #2
   134c8:	cmp	r3, #0
   134cc:	movne	r3, #4
   134d0:	moveq	r3, #0
   134d4:	ldr	r1, [r4, #136]	; 0x88
   134d8:	sub	r2, r1, r5
   134dc:	sub	r3, r2, r3
   134e0:	ldrh	r2, [sp, #104]	; 0x68
   134e4:	sub	r2, r2, #1
   134e8:	and	r3, r3, r2
   134ec:	add	r2, r5, r3
   134f0:	str	r2, [sp, #84]	; 0x54
   134f4:	mov	r2, #0
   134f8:	str	r2, [sp, #12]
   134fc:	str	r2, [sp, #16]
   13500:	ldr	r2, [r4, #152]	; 0x98
   13504:	cmp	r2, #0
   13508:	beq	13528 <flatcc_builder_embed_buffer@@Base+0x9c>
   1350c:	mov	r2, #4
   13510:	str	r2, [sp, #12]
   13514:	add	r0, sp, #84	; 0x54
   13518:	str	r0, [sp, #20]
   1351c:	str	r2, [sp, #24]
   13520:	mov	r2, #1
   13524:	str	r2, [sp, #16]
   13528:	cmp	r5, #0
   1352c:	beq	13558 <flatcc_builder_embed_buffer@@Base+0xcc>
   13530:	ldr	r2, [sp, #12]
   13534:	add	r2, r2, r5
   13538:	str	r2, [sp, #12]
   1353c:	ldr	r2, [sp, #16]
   13540:	add	r2, r2, #1
   13544:	add	r0, sp, #88	; 0x58
   13548:	add	r0, r0, r2, lsl #3
   1354c:	str	r6, [r0, #-76]	; 0xffffffb4
   13550:	str	r5, [r0, #-72]	; 0xffffffb8
   13554:	str	r2, [sp, #16]
   13558:	cmp	r3, #0
   1355c:	beq	1358c <flatcc_builder_embed_buffer@@Base+0x100>
   13560:	ldr	r2, [sp, #12]
   13564:	add	r2, r2, r3
   13568:	str	r2, [sp, #12]
   1356c:	ldr	r2, [sp, #16]
   13570:	add	r2, r2, #1
   13574:	add	r0, sp, #88	; 0x58
   13578:	add	r0, r0, r2, lsl #3
   1357c:	ldr	ip, [pc, #124]	; 13600 <flatcc_builder_embed_buffer@@Base+0x174>
   13580:	str	ip, [r0, #-76]	; 0xffffffb4
   13584:	str	r3, [r0, #-72]	; 0xffffffb8
   13588:	str	r2, [sp, #16]
   1358c:	ldr	r3, [sp, #12]
   13590:	sub	r5, r1, r3
   13594:	cmp	r1, r5
   13598:	ble	135d0 <flatcc_builder_embed_buffer@@Base+0x144>
   1359c:	str	r3, [sp]
   135a0:	ldr	r6, [r4, #44]	; 0x2c
   135a4:	mov	r3, r5
   135a8:	ldr	r2, [sp, #16]
   135ac:	add	r1, sp, #20
   135b0:	ldr	r0, [r4, #36]	; 0x24
   135b4:	blx	r6
   135b8:	cmp	r0, #0
   135bc:	streq	r5, [r4, #136]	; 0x88
   135c0:	bne	135e4 <flatcc_builder_embed_buffer@@Base+0x158>
   135c4:	mov	r0, r5
   135c8:	add	sp, sp, #88	; 0x58
   135cc:	pop	{r4, r5, r6, pc}
   135d0:	ldr	r3, [pc, #44]	; 13604 <flatcc_builder_embed_buffer@@Base+0x178>
   135d4:	ldr	r2, [pc, #44]	; 13608 <flatcc_builder_embed_buffer@@Base+0x17c>
   135d8:	ldr	r1, [pc, #44]	; 1360c <flatcc_builder_embed_buffer@@Base+0x180>
   135dc:	ldr	r0, [pc, #44]	; 13610 <flatcc_builder_embed_buffer@@Base+0x184>
   135e0:	bl	1206c <__assert_fail@plt>
   135e4:	ldr	r3, [pc, #24]	; 13604 <flatcc_builder_embed_buffer@@Base+0x178>
   135e8:	ldr	r2, [pc, #36]	; 13614 <flatcc_builder_embed_buffer@@Base+0x188>
   135ec:	ldr	r1, [pc, #24]	; 1360c <flatcc_builder_embed_buffer@@Base+0x180>
   135f0:	ldr	r0, [pc, #24]	; 13610 <flatcc_builder_embed_buffer@@Base+0x184>
   135f4:	bl	1206c <__assert_fail@plt>
   135f8:	mov	r5, #0
   135fc:	b	135c4 <flatcc_builder_embed_buffer@@Base+0x138>
   13600:	andeq	r7, r1, r4, ror #9
   13604:	andeq	r7, r1, r0, lsr r7
   13608:	andeq	r0, r0, r7, lsl #5
   1360c:	andeq	r7, r1, r4, lsr ip
   13610:	andeq	r7, r1, r8, lsl #25
   13614:	andeq	r0, r0, fp, lsl #5

00013618 <flatcc_builder_create_buffer@@Base>:
   13618:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1361c:	sub	sp, sp, #96	; 0x60
   13620:	mov	r5, r0
   13624:	mov	r9, r1
   13628:	mov	r6, r3
   1362c:	ldr	r8, [sp, #132]	; 0x84
   13630:	mov	r3, #0
   13634:	str	r3, [sp, #12]
   13638:	and	r4, r8, #1
   1363c:	uxtb	r7, r4
   13640:	mov	r3, r7
   13644:	add	r1, sp, #128	; 0x80
   13648:	bl	12b64 <flatcc_builder_default_alloc@@Base+0x114>
   1364c:	cmp	r0, #0
   13650:	bne	137f4 <flatcc_builder_create_buffer@@Base+0x1dc>
   13654:	ldrh	r0, [sp, #128]	; 0x80
   13658:	ldrh	r3, [r5, #128]	; 0x80
   1365c:	cmp	r3, r0
   13660:	strhcc	r0, [r5, #128]	; 0x80
   13664:	cmp	r9, #0
   13668:	ldrne	r3, [r9]
   1366c:	strne	r3, [sp, #12]
   13670:	ldr	r1, [sp, #12]
   13674:	cmp	r1, #0
   13678:	movne	r1, #4
   1367c:	moveq	r1, #0
   13680:	tst	r8, #2
   13684:	bne	137fc <flatcc_builder_create_buffer@@Base+0x1e4>
   13688:	ldr	ip, [r5, #136]	; 0x88
   1368c:	mov	r2, ip
   13690:	sub	r3, ip, #4
   13694:	sub	r3, r3, r1
   13698:	sub	r0, r0, #1
   1369c:	and	r3, r3, r0
   136a0:	mov	r0, #0
   136a4:	str	r0, [sp, #16]
   136a8:	str	r0, [sp, #20]
   136ac:	cmp	r4, r0
   136b0:	bne	13818 <flatcc_builder_create_buffer@@Base+0x200>
   136b4:	ldr	lr, [sp, #16]
   136b8:	add	lr, lr, #4
   136bc:	str	lr, [sp, #16]
   136c0:	ldr	r8, [sp, #20]
   136c4:	add	r0, r8, #1
   136c8:	add	r9, sp, #96	; 0x60
   136cc:	add	r9, r9, r0, lsl #3
   136d0:	add	sl, sp, #92	; 0x5c
   136d4:	str	sl, [r9, #-80]	; 0xffffffb0
   136d8:	mov	sl, #4
   136dc:	str	sl, [r9, #-76]	; 0xffffffb4
   136e0:	str	r0, [sp, #20]
   136e4:	cmp	r1, #0
   136e8:	beq	13714 <flatcc_builder_create_buffer@@Base+0xfc>
   136ec:	add	lr, r1, lr
   136f0:	str	lr, [sp, #16]
   136f4:	add	r0, r8, #2
   136f8:	add	lr, sp, #96	; 0x60
   136fc:	add	r0, lr, r0, lsl #3
   13700:	add	lr, sp, #12
   13704:	str	lr, [r0, #-80]	; 0xffffffb0
   13708:	str	r1, [r0, #-76]	; 0xffffffb4
   1370c:	add	r8, r8, #2
   13710:	str	r8, [sp, #20]
   13714:	cmp	r3, #0
   13718:	beq	13748 <flatcc_builder_create_buffer@@Base+0x130>
   1371c:	ldr	r1, [sp, #16]
   13720:	add	r1, r1, r3
   13724:	str	r1, [sp, #16]
   13728:	ldr	r1, [sp, #20]
   1372c:	add	r1, r1, #1
   13730:	add	r0, sp, #96	; 0x60
   13734:	add	r0, r0, r1, lsl #3
   13738:	ldr	lr, [pc, #248]	; 13838 <flatcc_builder_create_buffer@@Base+0x220>
   1373c:	str	lr, [r0, #-80]	; 0xffffffb0
   13740:	str	r3, [r0, #-76]	; 0xffffffb4
   13744:	str	r1, [sp, #20]
   13748:	ldr	r1, [sp, #16]
   1374c:	sub	r3, r2, r1
   13750:	add	r3, r3, r7, lsl #2
   13754:	cmp	r4, #0
   13758:	ldrne	r2, [r5, #144]	; 0x90
   1375c:	ldreq	r2, [r5, #140]	; 0x8c
   13760:	sub	r2, r2, r3
   13764:	str	r2, [sp, #88]	; 0x58
   13768:	sub	r3, r6, r3
   1376c:	str	r3, [sp, #92]	; 0x5c
   13770:	sub	r4, ip, r1
   13774:	cmp	r4, ip
   13778:	bge	137b8 <flatcc_builder_create_buffer@@Base+0x1a0>
   1377c:	str	r1, [sp]
   13780:	ldr	r6, [r5, #44]	; 0x2c
   13784:	mov	r3, r4
   13788:	ldr	r2, [sp, #20]
   1378c:	add	r1, sp, #24
   13790:	ldr	r0, [r5, #36]	; 0x24
   13794:	blx	r6
   13798:	cmp	r0, #0
   1379c:	bne	137cc <flatcc_builder_create_buffer@@Base+0x1b4>
   137a0:	str	r4, [r5, #136]	; 0x88
   137a4:	cmp	r4, #0
   137a8:	beq	137e0 <flatcc_builder_create_buffer@@Base+0x1c8>
   137ac:	mov	r0, r4
   137b0:	add	sp, sp, #96	; 0x60
   137b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   137b8:	ldr	r3, [pc, #124]	; 1383c <flatcc_builder_create_buffer@@Base+0x224>
   137bc:	ldr	r2, [pc, #124]	; 13840 <flatcc_builder_create_buffer@@Base+0x228>
   137c0:	ldr	r1, [pc, #124]	; 13844 <flatcc_builder_create_buffer@@Base+0x22c>
   137c4:	ldr	r0, [pc, #124]	; 13848 <flatcc_builder_create_buffer@@Base+0x230>
   137c8:	bl	1206c <__assert_fail@plt>
   137cc:	ldr	r3, [pc, #104]	; 1383c <flatcc_builder_create_buffer@@Base+0x224>
   137d0:	ldr	r2, [pc, #116]	; 1384c <flatcc_builder_create_buffer@@Base+0x234>
   137d4:	ldr	r1, [pc, #104]	; 13844 <flatcc_builder_create_buffer@@Base+0x22c>
   137d8:	ldr	r0, [pc, #104]	; 13848 <flatcc_builder_create_buffer@@Base+0x230>
   137dc:	bl	1206c <__assert_fail@plt>
   137e0:	ldr	r3, [pc, #104]	; 13850 <flatcc_builder_create_buffer@@Base+0x238>
   137e4:	mov	r2, #772	; 0x304
   137e8:	ldr	r1, [pc, #84]	; 13844 <flatcc_builder_create_buffer@@Base+0x22c>
   137ec:	ldr	r0, [pc, #84]	; 13848 <flatcc_builder_create_buffer@@Base+0x230>
   137f0:	bl	1206c <__assert_fail@plt>
   137f4:	mov	r4, #0
   137f8:	b	137ac <flatcc_builder_create_buffer@@Base+0x194>
   137fc:	ldr	ip, [r5, #136]	; 0x88
   13800:	mov	r2, ip
   13804:	sub	r3, ip, #8
   13808:	sub	r3, r3, r1
   1380c:	sub	r0, r0, #1
   13810:	and	r3, r3, r0
   13814:	mov	r7, #1
   13818:	mov	r0, #4
   1381c:	str	r0, [sp, #16]
   13820:	add	lr, sp, #88	; 0x58
   13824:	str	lr, [sp, #24]
   13828:	str	r0, [sp, #28]
   1382c:	mov	r0, #1
   13830:	str	r0, [sp, #20]
   13834:	b	136b4 <flatcc_builder_create_buffer@@Base+0x9c>
   13838:	andeq	r7, r1, r4, ror #9
   1383c:	andeq	r7, r1, r0, lsr r7
   13840:	andeq	r0, r0, r7, lsl #5
   13844:	andeq	r7, r1, r4, lsr ip
   13848:	andeq	r7, r1, r8, lsl #25
   1384c:	andeq	r0, r0, fp, lsl #5
   13850:	muleq	r1, ip, r7

00013854 <flatcc_builder_create_struct@@Base>:
   13854:	push	{r4, r5, r6, lr}
   13858:	sub	sp, sp, #80	; 0x50
   1385c:	cmp	r3, #0
   13860:	beq	138b8 <flatcc_builder_create_struct@@Base+0x64>
   13864:	mov	r4, r0
   13868:	ldrh	r0, [r0, #128]	; 0x80
   1386c:	cmp	r0, r3
   13870:	strhcc	r3, [r4, #128]	; 0x80
   13874:	ldr	ip, [r4, #136]	; 0x88
   13878:	sub	r0, ip, r2
   1387c:	sub	r3, r3, #1
   13880:	and	r3, r3, r0
   13884:	mov	r0, #0
   13888:	str	r0, [sp, #8]
   1388c:	str	r0, [sp, #12]
   13890:	cmp	r2, r0
   13894:	beq	138f4 <flatcc_builder_create_struct@@Base+0xa0>
   13898:	str	r2, [sp, #8]
   1389c:	str	r1, [sp, #16]
   138a0:	str	r2, [sp, #20]
   138a4:	mov	r2, #1
   138a8:	str	r2, [sp, #12]
   138ac:	cmp	r3, r0
   138b0:	beq	13928 <flatcc_builder_create_struct@@Base+0xd4>
   138b4:	b	138fc <flatcc_builder_create_struct@@Base+0xa8>
   138b8:	ldr	r3, [pc, #172]	; 1396c <flatcc_builder_create_struct@@Base+0x118>
   138bc:	ldr	r2, [pc, #172]	; 13970 <flatcc_builder_create_struct@@Base+0x11c>
   138c0:	ldr	r1, [pc, #172]	; 13974 <flatcc_builder_create_struct@@Base+0x120>
   138c4:	ldr	r0, [pc, #172]	; 13978 <flatcc_builder_create_struct@@Base+0x124>
   138c8:	bl	1206c <__assert_fail@plt>
   138cc:	ldr	r3, [pc, #168]	; 1397c <flatcc_builder_create_struct@@Base+0x128>
   138d0:	ldr	r2, [pc, #168]	; 13980 <flatcc_builder_create_struct@@Base+0x12c>
   138d4:	ldr	r1, [pc, #152]	; 13974 <flatcc_builder_create_struct@@Base+0x120>
   138d8:	ldr	r0, [pc, #164]	; 13984 <flatcc_builder_create_struct@@Base+0x130>
   138dc:	bl	1206c <__assert_fail@plt>
   138e0:	ldr	r3, [pc, #148]	; 1397c <flatcc_builder_create_struct@@Base+0x128>
   138e4:	ldr	r2, [pc, #156]	; 13988 <flatcc_builder_create_struct@@Base+0x134>
   138e8:	ldr	r1, [pc, #132]	; 13974 <flatcc_builder_create_struct@@Base+0x120>
   138ec:	ldr	r0, [pc, #144]	; 13984 <flatcc_builder_create_struct@@Base+0x130>
   138f0:	bl	1206c <__assert_fail@plt>
   138f4:	cmp	r3, #0
   138f8:	beq	138cc <flatcc_builder_create_struct@@Base+0x78>
   138fc:	ldr	r2, [sp, #8]
   13900:	add	r2, r2, r3
   13904:	str	r2, [sp, #8]
   13908:	ldr	r2, [sp, #12]
   1390c:	add	r2, r2, #1
   13910:	add	r1, sp, #80	; 0x50
   13914:	add	r1, r1, r2, lsl #3
   13918:	ldr	r0, [pc, #108]	; 1398c <flatcc_builder_create_struct@@Base+0x138>
   1391c:	str	r0, [r1, #-72]	; 0xffffffb8
   13920:	str	r3, [r1, #-68]	; 0xffffffbc
   13924:	str	r2, [sp, #12]
   13928:	ldr	r3, [sp, #8]
   1392c:	sub	r5, ip, r3
   13930:	cmp	ip, r5
   13934:	ble	138cc <flatcc_builder_create_struct@@Base+0x78>
   13938:	str	r3, [sp]
   1393c:	ldr	r6, [r4, #44]	; 0x2c
   13940:	mov	r3, r5
   13944:	ldr	r2, [sp, #12]
   13948:	add	r1, sp, #16
   1394c:	ldr	r0, [r4, #36]	; 0x24
   13950:	blx	r6
   13954:	cmp	r0, #0
   13958:	bne	138e0 <flatcc_builder_create_struct@@Base+0x8c>
   1395c:	str	r5, [r4, #136]	; 0x88
   13960:	mov	r0, r5
   13964:	add	sp, sp, #80	; 0x50
   13968:	pop	{r4, r5, r6, pc}
   1396c:			; <UNDEFINED> instruction: 0x000177bc
   13970:	andeq	r0, r0, pc, lsl #6
   13974:	andeq	r7, r1, r4, lsr ip
   13978:	andeq	r7, r1, ip, ror #25
   1397c:	andeq	r7, r1, r0, lsr r7
   13980:	andeq	r0, r0, r7, lsl #5
   13984:	andeq	r7, r1, r8, lsl #25
   13988:	andeq	r0, r0, fp, lsl #5
   1398c:	andeq	r7, r1, r4, ror #9

00013990 <flatcc_builder_start_buffer@@Base>:
   13990:	push	{r4, r5, r6, r7, r8, lr}
   13994:	mov	r4, r0
   13998:	mov	r5, r1
   1399c:	mov	r7, r2
   139a0:	mov	r6, r3
   139a4:	ldrh	r1, [r0, #128]	; 0x80
   139a8:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x22c>
   139ac:	cmp	r0, #0
   139b0:	bne	13a3c <flatcc_builder_start_buffer@@Base+0xac>
   139b4:	mov	r3, #1
   139b8:	strh	r3, [r4, #128]	; 0x80
   139bc:	ldr	r3, [r4, #32]
   139c0:	ldrh	r2, [r4, #132]	; 0x84
   139c4:	strh	r2, [r3, #34]	; 0x22
   139c8:	strh	r7, [r4, #132]	; 0x84
   139cc:	ldr	r3, [r4, #32]
   139d0:	ldrh	r2, [r4, #164]	; 0xa4
   139d4:	strh	r2, [r3, #32]
   139d8:	strh	r6, [r4, #164]	; 0xa4
   139dc:	ldr	r3, [r4, #32]
   139e0:	ldr	r2, [r4, #144]	; 0x90
   139e4:	str	r2, [r3, #20]
   139e8:	ldr	r3, [r4, #32]
   139ec:	ldr	r2, [r4, #152]	; 0x98
   139f0:	str	r2, [r3, #28]
   139f4:	ldr	r3, [r4, #136]	; 0x88
   139f8:	str	r3, [r4, #144]	; 0x90
   139fc:	ldr	r3, [r4, #148]	; 0x94
   13a00:	add	r2, r3, #1
   13a04:	str	r2, [r4, #148]	; 0x94
   13a08:	str	r3, [r4, #152]	; 0x98
   13a0c:	ldr	r3, [r4, #32]
   13a10:	ldr	r2, [r4, #168]	; 0xa8
   13a14:	str	r2, [r3, #16]
   13a18:	ldr	r3, [pc, #36]	; 13a44 <flatcc_builder_start_buffer@@Base+0xb4>
   13a1c:	cmp	r5, #0
   13a20:	moveq	r5, r3
   13a24:	ldr	r3, [r5]
   13a28:	str	r3, [r4, #168]	; 0xa8
   13a2c:	ldr	r3, [r4, #32]
   13a30:	mov	r2, #1
   13a34:	strh	r2, [r3, #14]
   13a38:	pop	{r4, r5, r6, r7, r8, pc}
   13a3c:	mvn	r0, #0
   13a40:	pop	{r4, r5, r6, r7, r8, pc}
   13a44:	andeq	r7, r1, r4, ror #9

00013a48 <flatcc_builder_end_buffer@@Base>:
   13a48:	push	{r4, r5, lr}
   13a4c:	sub	sp, sp, #12
   13a50:	mov	r4, r0
   13a54:	ldrh	r2, [r0, #164]	; 0xa4
   13a58:	and	r2, r2, #2
   13a5c:	ldr	r0, [r0, #152]	; 0x98
   13a60:	cmp	r0, #0
   13a64:	moveq	r0, r2
   13a68:	orrne	r0, r2, #1
   13a6c:	ldr	r2, [r4, #32]
   13a70:	ldrh	r2, [r2, #14]
   13a74:	cmp	r2, #1
   13a78:	bne	13abc <flatcc_builder_end_buffer@@Base+0x74>
   13a7c:	ldrh	r2, [r4, #132]	; 0x84
   13a80:	ldrh	r3, [r4, #128]	; 0x80
   13a84:	cmp	r3, r2
   13a88:	strhcc	r2, [r4, #128]	; 0x80
   13a8c:	str	r0, [sp, #4]
   13a90:	ldrh	r3, [r4, #128]	; 0x80
   13a94:	str	r3, [sp]
   13a98:	mov	r3, r1
   13a9c:	add	r1, r4, #168	; 0xa8
   13aa0:	mov	r0, r4
   13aa4:	bl	13618 <flatcc_builder_create_buffer@@Base>
   13aa8:	subs	r5, r0, #0
   13aac:	bne	13ad0 <flatcc_builder_end_buffer@@Base+0x88>
   13ab0:	mov	r0, r5
   13ab4:	add	sp, sp, #12
   13ab8:	pop	{r4, r5, pc}
   13abc:	ldr	r3, [pc, #176]	; 13b74 <flatcc_builder_end_buffer@@Base+0x12c>
   13ac0:	ldr	r2, [pc, #176]	; 13b78 <flatcc_builder_end_buffer@@Base+0x130>
   13ac4:	ldr	r1, [pc, #176]	; 13b7c <flatcc_builder_end_buffer@@Base+0x134>
   13ac8:	ldr	r0, [pc, #176]	; 13b80 <flatcc_builder_end_buffer@@Base+0x138>
   13acc:	bl	1206c <__assert_fail@plt>
   13ad0:	ldr	r3, [r4, #32]
   13ad4:	ldr	r2, [r3, #20]
   13ad8:	str	r2, [r4, #144]	; 0x90
   13adc:	ldr	r2, [r3, #28]
   13ae0:	str	r2, [r4, #152]	; 0x98
   13ae4:	ldr	r2, [r3, #16]
   13ae8:	str	r2, [r4, #168]	; 0xa8
   13aec:	ldrh	r3, [r3, #32]
   13af0:	strh	r3, [r4, #164]	; 0xa4
   13af4:	ldr	r2, [r4, #20]
   13af8:	mov	r1, #0
   13afc:	ldr	r0, [r4, #16]
   13b00:	bl	1203c <memset@plt>
   13b04:	ldr	r2, [r4, #32]
   13b08:	ldr	r3, [r2, #8]
   13b0c:	str	r3, [r4, #20]
   13b10:	ldr	r0, [r2]
   13b14:	str	r0, [r4, #28]
   13b18:	ldr	r1, [r2, #4]
   13b1c:	ldr	r3, [r4, #60]	; 0x3c
   13b20:	add	r3, r3, r0
   13b24:	str	r3, [r4, #16]
   13b28:	ldr	r3, [r4, #64]	; 0x40
   13b2c:	sub	r3, r3, r0
   13b30:	cmp	r3, r1
   13b34:	movcs	r3, r1
   13b38:	str	r3, [r4, #24]
   13b3c:	str	r1, [r2, #4]
   13b40:	ldrh	r3, [r4, #130]	; 0x82
   13b44:	ldrh	r2, [r4, #128]	; 0x80
   13b48:	cmp	r2, r3
   13b4c:	strhcc	r3, [r4, #128]	; 0x80
   13b50:	ldr	r3, [r4, #32]
   13b54:	ldrh	r2, [r3, #12]
   13b58:	strh	r2, [r4, #130]	; 0x82
   13b5c:	sub	r3, r3, #36	; 0x24
   13b60:	str	r3, [r4, #32]
   13b64:	ldr	r3, [r4, #156]	; 0x9c
   13b68:	sub	r3, r3, #1
   13b6c:	str	r3, [r4, #156]	; 0x9c
   13b70:	b	13ab0 <flatcc_builder_end_buffer@@Base+0x68>
   13b74:	ldrdeq	r7, [r1], -ip
   13b78:	andeq	r0, r0, r6, asr #6
   13b7c:	andeq	r7, r1, r4, lsr ip
   13b80:	strdeq	r7, [r1], -r8

00013b84 <flatcc_builder_start_struct@@Base>:
   13b84:	push	{r4, r5, r6, lr}
   13b88:	mov	r4, r0
   13b8c:	mov	r5, r1
   13b90:	mov	r1, r2
   13b94:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x22c>
   13b98:	cmp	r0, #0
   13b9c:	bne	13c1c <flatcc_builder_start_struct@@Base+0x98>
   13ba0:	ldr	r3, [r4, #32]
   13ba4:	mov	r2, #2
   13ba8:	strh	r2, [r3, #14]
   13bac:	ldr	r1, [r4, #28]
   13bb0:	ldr	r2, [r4, #60]	; 0x3c
   13bb4:	add	r2, r2, r1
   13bb8:	str	r2, [r4, #16]
   13bbc:	ldr	r3, [r4, #64]	; 0x40
   13bc0:	sub	r3, r3, r1
   13bc4:	cmn	r3, #4
   13bc8:	mvnhi	r3, #3
   13bcc:	str	r3, [r4, #24]
   13bd0:	ldr	r3, [r4, #32]
   13bd4:	mvn	r2, #3
   13bd8:	str	r2, [r3, #4]
   13bdc:	ldr	r6, [r4, #20]
   13be0:	add	r5, r5, r6
   13be4:	str	r5, [r4, #20]
   13be8:	ldr	r3, [r4, #24]
   13bec:	cmp	r5, r3
   13bf0:	bcs	13c00 <flatcc_builder_start_struct@@Base+0x7c>
   13bf4:	ldr	r0, [r4, #16]
   13bf8:	add	r0, r0, r6
   13bfc:	pop	{r4, r5, r6, pc}
   13c00:	add	r1, r5, #1
   13c04:	mov	r0, r4
   13c08:	bl	129dc <main@@Base+0x580>
   13c0c:	cmp	r0, #0
   13c10:	beq	13bf4 <flatcc_builder_start_struct@@Base+0x70>
   13c14:	mov	r0, #0
   13c18:	pop	{r4, r5, r6, pc}
   13c1c:	mov	r0, #0
   13c20:	pop	{r4, r5, r6, pc}

00013c24 <flatcc_builder_struct_edit@@Base>:
   13c24:	ldr	r0, [r0, #16]
   13c28:	bx	lr

00013c2c <flatcc_builder_end_struct@@Base>:
   13c2c:	push	{r4, r5, r6, lr}
   13c30:	ldr	r3, [r0, #32]
   13c34:	ldrh	r3, [r3, #14]
   13c38:	cmp	r3, #2
   13c3c:	bne	13c64 <flatcc_builder_end_struct@@Base+0x38>
   13c40:	mov	r4, r0
   13c44:	ldrh	r3, [r0, #130]	; 0x82
   13c48:	ldr	r2, [r0, #20]
   13c4c:	ldr	r1, [r0, #16]
   13c50:	bl	13854 <flatcc_builder_create_struct@@Base>
   13c54:	subs	r5, r0, #0
   13c58:	bne	13c78 <flatcc_builder_end_struct@@Base+0x4c>
   13c5c:	mov	r0, r5
   13c60:	pop	{r4, r5, r6, pc}
   13c64:	ldr	r3, [pc, #140]	; 13cf8 <flatcc_builder_end_struct@@Base+0xcc>
   13c68:	mov	r2, #872	; 0x368
   13c6c:	ldr	r1, [pc, #136]	; 13cfc <flatcc_builder_end_struct@@Base+0xd0>
   13c70:	ldr	r0, [pc, #136]	; 13d00 <flatcc_builder_end_struct@@Base+0xd4>
   13c74:	bl	1206c <__assert_fail@plt>
   13c78:	ldr	r2, [r4, #20]
   13c7c:	mov	r1, #0
   13c80:	ldr	r0, [r4, #16]
   13c84:	bl	1203c <memset@plt>
   13c88:	ldr	r2, [r4, #32]
   13c8c:	ldr	r3, [r2, #8]
   13c90:	str	r3, [r4, #20]
   13c94:	ldr	r0, [r2]
   13c98:	str	r0, [r4, #28]
   13c9c:	ldr	r1, [r2, #4]
   13ca0:	ldr	r3, [r4, #60]	; 0x3c
   13ca4:	add	r3, r3, r0
   13ca8:	str	r3, [r4, #16]
   13cac:	ldr	r3, [r4, #64]	; 0x40
   13cb0:	sub	r3, r3, r0
   13cb4:	cmp	r3, r1
   13cb8:	movcs	r3, r1
   13cbc:	str	r3, [r4, #24]
   13cc0:	str	r1, [r2, #4]
   13cc4:	ldrh	r3, [r4, #130]	; 0x82
   13cc8:	ldrh	r2, [r4, #128]	; 0x80
   13ccc:	cmp	r2, r3
   13cd0:	strhcc	r3, [r4, #128]	; 0x80
   13cd4:	ldr	r3, [r4, #32]
   13cd8:	ldrh	r2, [r3, #12]
   13cdc:	strh	r2, [r4, #130]	; 0x82
   13ce0:	sub	r3, r3, #36	; 0x24
   13ce4:	str	r3, [r4, #32]
   13ce8:	ldr	r3, [r4, #156]	; 0x9c
   13cec:	sub	r3, r3, #1
   13cf0:	str	r3, [r4, #156]	; 0x9c
   13cf4:	b	13c5c <flatcc_builder_end_struct@@Base+0x30>
   13cf8:	strdeq	r7, [r1], -r8
   13cfc:	andeq	r7, r1, r4, lsr ip
   13d00:	andeq	r7, r1, r4, lsr #26

00013d04 <flatcc_builder_extend_vector@@Base>:
   13d04:	push	{r4, r5, r6, lr}
   13d08:	mov	r4, r0
   13d0c:	ldr	r2, [r0, #32]
   13d10:	ldr	r3, [r2, #20]
   13d14:	add	r0, r1, r3
   13d18:	ldr	ip, [r2, #24]
   13d1c:	cmp	r3, r0
   13d20:	movls	r3, #0
   13d24:	movhi	r3, #1
   13d28:	cmp	ip, r0
   13d2c:	orrcc	r3, r3, #1
   13d30:	cmp	r3, #0
   13d34:	bne	13d68 <flatcc_builder_extend_vector@@Base+0x64>
   13d38:	str	r0, [r2, #20]
   13d3c:	ldr	r5, [r4, #20]
   13d40:	ldr	r3, [r4, #32]
   13d44:	ldr	r3, [r3, #16]
   13d48:	mla	r1, r3, r1, r5
   13d4c:	str	r1, [r4, #20]
   13d50:	ldr	r3, [r4, #24]
   13d54:	cmp	r1, r3
   13d58:	bcs	13d7c <flatcc_builder_extend_vector@@Base+0x78>
   13d5c:	ldr	r0, [r4, #16]
   13d60:	add	r0, r0, r5
   13d64:	pop	{r4, r5, r6, pc}
   13d68:	ldr	r3, [pc, #44]	; 13d9c <flatcc_builder_extend_vector@@Base+0x98>
   13d6c:	mov	r2, #892	; 0x37c
   13d70:	ldr	r1, [pc, #40]	; 13da0 <flatcc_builder_extend_vector@@Base+0x9c>
   13d74:	ldr	r0, [pc, #40]	; 13da4 <flatcc_builder_extend_vector@@Base+0xa0>
   13d78:	bl	1206c <__assert_fail@plt>
   13d7c:	mvn	r2, #3
   13d80:	add	r1, r1, #1
   13d84:	mov	r0, r4
   13d88:	bl	129dc <main@@Base+0x580>
   13d8c:	cmp	r0, #0
   13d90:	beq	13d5c <flatcc_builder_extend_vector@@Base+0x58>
   13d94:	mov	r0, #0
   13d98:	pop	{r4, r5, r6, pc}
   13d9c:	andeq	r7, r1, r4, lsl r8
   13da0:	andeq	r7, r1, r4, lsr ip
   13da4:	andeq	r7, r1, r0, asr sp

00013da8 <flatcc_builder_vector_push@@Base>:
   13da8:	push	{r4, r5, r6, r7, r8, lr}
   13dac:	ldr	r3, [r0, #32]
   13db0:	ldrh	r2, [r3, #14]
   13db4:	cmp	r2, #4
   13db8:	bne	13e20 <flatcc_builder_vector_push@@Base+0x78>
   13dbc:	mov	r4, r0
   13dc0:	mov	r6, r1
   13dc4:	ldr	r2, [r3, #20]
   13dc8:	ldr	r1, [r3, #24]
   13dcc:	cmp	r2, r1
   13dd0:	bhi	13e34 <flatcc_builder_vector_push@@Base+0x8c>
   13dd4:	add	r2, r2, #1
   13dd8:	str	r2, [r3, #20]
   13ddc:	ldr	r3, [r0, #32]
   13de0:	ldr	r7, [r3, #16]
   13de4:	ldr	r5, [r0, #20]
   13de8:	add	r1, r7, r5
   13dec:	str	r1, [r0, #20]
   13df0:	ldr	r3, [r0, #24]
   13df4:	cmp	r1, r3
   13df8:	bcs	13e48 <flatcc_builder_vector_push@@Base+0xa0>
   13dfc:	ldr	r4, [r4, #16]
   13e00:	adds	r4, r4, r5
   13e04:	beq	13e18 <flatcc_builder_vector_push@@Base+0x70>
   13e08:	mov	r2, r7
   13e0c:	mov	r1, r6
   13e10:	mov	r0, r4
   13e14:	bl	11fb8 <memcpy@plt>
   13e18:	mov	r0, r4
   13e1c:	pop	{r4, r5, r6, r7, r8, pc}
   13e20:	ldr	r3, [pc, #60]	; 13e64 <flatcc_builder_vector_push@@Base+0xbc>
   13e24:	ldr	r2, [pc, #60]	; 13e68 <flatcc_builder_vector_push@@Base+0xc0>
   13e28:	ldr	r1, [pc, #60]	; 13e6c <flatcc_builder_vector_push@@Base+0xc4>
   13e2c:	ldr	r0, [pc, #60]	; 13e70 <flatcc_builder_vector_push@@Base+0xc8>
   13e30:	bl	1206c <__assert_fail@plt>
   13e34:	ldr	r3, [pc, #40]	; 13e64 <flatcc_builder_vector_push@@Base+0xbc>
   13e38:	mov	r2, #908	; 0x38c
   13e3c:	ldr	r1, [pc, #40]	; 13e6c <flatcc_builder_vector_push@@Base+0xc4>
   13e40:	ldr	r0, [pc, #44]	; 13e74 <flatcc_builder_vector_push@@Base+0xcc>
   13e44:	bl	1206c <__assert_fail@plt>
   13e48:	mvn	r2, #3
   13e4c:	add	r1, r1, #1
   13e50:	bl	129dc <main@@Base+0x580>
   13e54:	cmp	r0, #0
   13e58:	beq	13dfc <flatcc_builder_vector_push@@Base+0x54>
   13e5c:	mov	r4, #0
   13e60:	b	13e18 <flatcc_builder_vector_push@@Base+0x70>
   13e64:	andeq	r7, r1, r8, lsr #16
   13e68:	andeq	r0, r0, fp, lsl #7
   13e6c:	andeq	r7, r1, r4, lsr ip
   13e70:	andeq	r7, r1, ip, ror #26
   13e74:	muleq	r1, r8, sp

00013e78 <flatcc_builder_append_vector@@Base>:
   13e78:	push	{r4, r5, r6, r7, r8, lr}
   13e7c:	mov	r5, r1
   13e80:	ldr	r1, [r0, #32]
   13e84:	ldrh	r3, [r1, #14]
   13e88:	cmp	r3, #4
   13e8c:	bne	13f08 <flatcc_builder_append_vector@@Base+0x90>
   13e90:	mov	r4, r0
   13e94:	ldr	r3, [r1, #20]
   13e98:	add	r0, r2, r3
   13e9c:	ldr	ip, [r1, #24]
   13ea0:	cmp	r3, r0
   13ea4:	movls	r3, #0
   13ea8:	movhi	r3, #1
   13eac:	cmp	ip, r0
   13eb0:	orrcc	r3, r3, #1
   13eb4:	cmp	r3, #0
   13eb8:	bne	13f1c <flatcc_builder_append_vector@@Base+0xa4>
   13ebc:	str	r0, [r1, #20]
   13ec0:	ldr	r3, [r4, #32]
   13ec4:	ldr	r6, [r3, #16]
   13ec8:	mul	r6, r6, r2
   13ecc:	ldr	r7, [r4, #20]
   13ed0:	add	r1, r6, r7
   13ed4:	str	r1, [r4, #20]
   13ed8:	ldr	r3, [r4, #24]
   13edc:	cmp	r1, r3
   13ee0:	bcs	13f30 <flatcc_builder_append_vector@@Base+0xb8>
   13ee4:	ldr	r4, [r4, #16]
   13ee8:	adds	r4, r4, r7
   13eec:	beq	13f00 <flatcc_builder_append_vector@@Base+0x88>
   13ef0:	mov	r2, r6
   13ef4:	mov	r1, r5
   13ef8:	mov	r0, r4
   13efc:	bl	11fb8 <memcpy@plt>
   13f00:	mov	r0, r4
   13f04:	pop	{r4, r5, r6, r7, r8, pc}
   13f08:	ldr	r3, [pc, #64]	; 13f50 <flatcc_builder_append_vector@@Base+0xd8>
   13f0c:	ldr	r2, [pc, #64]	; 13f54 <flatcc_builder_append_vector@@Base+0xdc>
   13f10:	ldr	r1, [pc, #64]	; 13f58 <flatcc_builder_append_vector@@Base+0xe0>
   13f14:	ldr	r0, [pc, #64]	; 13f5c <flatcc_builder_append_vector@@Base+0xe4>
   13f18:	bl	1206c <__assert_fail@plt>
   13f1c:	ldr	r3, [pc, #60]	; 13f60 <flatcc_builder_append_vector@@Base+0xe8>
   13f20:	mov	r2, #892	; 0x37c
   13f24:	ldr	r1, [pc, #44]	; 13f58 <flatcc_builder_append_vector@@Base+0xe0>
   13f28:	ldr	r0, [pc, #52]	; 13f64 <flatcc_builder_append_vector@@Base+0xec>
   13f2c:	bl	1206c <__assert_fail@plt>
   13f30:	mvn	r2, #3
   13f34:	add	r1, r1, #1
   13f38:	mov	r0, r4
   13f3c:	bl	129dc <main@@Base+0x580>
   13f40:	cmp	r0, #0
   13f44:	beq	13ee4 <flatcc_builder_append_vector@@Base+0x6c>
   13f48:	mov	r4, #0
   13f4c:	b	13f00 <flatcc_builder_append_vector@@Base+0x88>
   13f50:	andeq	r7, r1, r4, asr #16
   13f54:	muleq	r0, r3, r3
   13f58:	andeq	r7, r1, r4, lsr ip
   13f5c:	andeq	r7, r1, ip, ror #26
   13f60:	andeq	r7, r1, r4, lsl r8
   13f64:	andeq	r7, r1, r0, asr sp

00013f68 <flatcc_builder_extend_offset_vector@@Base>:
   13f68:	push	{r4, r5, r6, lr}
   13f6c:	mov	r4, r0
   13f70:	ldr	r2, [r0, #32]
   13f74:	ldr	r3, [r2, #20]
   13f78:	adds	r3, r1, r3
   13f7c:	movcs	ip, #1
   13f80:	movcc	ip, #0
   13f84:	cmn	r3, #-1073741823	; 0xc0000001
   13f88:	movls	r0, #0
   13f8c:	movhi	r0, #1
   13f90:	orrs	r0, ip, r0
   13f94:	bne	13fc0 <flatcc_builder_extend_offset_vector@@Base+0x58>
   13f98:	str	r3, [r2, #20]
   13f9c:	ldr	r5, [r4, #20]
   13fa0:	add	r1, r5, r1, lsl #2
   13fa4:	str	r1, [r4, #20]
   13fa8:	ldr	r3, [r4, #24]
   13fac:	cmp	r1, r3
   13fb0:	bcs	13fd4 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   13fb4:	ldr	r0, [r4, #16]
   13fb8:	add	r0, r0, r5
   13fbc:	pop	{r4, r5, r6, pc}
   13fc0:	ldr	r3, [pc, #44]	; 13ff4 <flatcc_builder_extend_offset_vector@@Base+0x8c>
   13fc4:	mov	r2, #892	; 0x37c
   13fc8:	ldr	r1, [pc, #40]	; 13ff8 <flatcc_builder_extend_offset_vector@@Base+0x90>
   13fcc:	ldr	r0, [pc, #40]	; 13ffc <flatcc_builder_extend_offset_vector@@Base+0x94>
   13fd0:	bl	1206c <__assert_fail@plt>
   13fd4:	mvn	r2, #3
   13fd8:	add	r1, r1, #1
   13fdc:	mov	r0, r4
   13fe0:	bl	129dc <main@@Base+0x580>
   13fe4:	cmp	r0, #0
   13fe8:	beq	13fb4 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   13fec:	mov	r0, #0
   13ff0:	pop	{r4, r5, r6, pc}
   13ff4:	andeq	r7, r1, r4, lsl r8
   13ff8:	andeq	r7, r1, r4, lsr ip
   13ffc:	andeq	r7, r1, r0, asr sp

00014000 <flatcc_builder_offset_vector_push@@Base>:
   14000:	push	{r4, r5, r6, lr}
   14004:	ldr	r2, [r0, #32]
   14008:	ldrh	r3, [r2, #14]
   1400c:	cmp	r3, #5
   14010:	bne	14058 <flatcc_builder_offset_vector_push@@Base+0x58>
   14014:	mov	r4, r0
   14018:	mov	r6, r1
   1401c:	ldr	r3, [r2, #20]
   14020:	cmn	r3, #-1073741823	; 0xc0000001
   14024:	beq	14088 <flatcc_builder_offset_vector_push@@Base+0x88>
   14028:	add	r3, r3, #1
   1402c:	str	r3, [r2, #20]
   14030:	ldr	r5, [r0, #20]
   14034:	add	r3, r5, #4
   14038:	str	r3, [r0, #20]
   1403c:	ldr	r2, [r0, #24]
   14040:	cmp	r3, r2
   14044:	bcs	1406c <flatcc_builder_offset_vector_push@@Base+0x6c>
   14048:	ldr	r3, [r4, #16]
   1404c:	adds	r0, r3, r5
   14050:	strne	r6, [r3, r5]
   14054:	pop	{r4, r5, r6, pc}
   14058:	ldr	r3, [pc, #48]	; 14090 <flatcc_builder_offset_vector_push@@Base+0x90>
   1405c:	ldr	r2, [pc, #48]	; 14094 <flatcc_builder_offset_vector_push@@Base+0x94>
   14060:	ldr	r1, [pc, #48]	; 14098 <flatcc_builder_offset_vector_push@@Base+0x98>
   14064:	ldr	r0, [pc, #48]	; 1409c <flatcc_builder_offset_vector_push@@Base+0x9c>
   14068:	bl	1206c <__assert_fail@plt>
   1406c:	mvn	r2, #3
   14070:	add	r1, r5, #5
   14074:	bl	129dc <main@@Base+0x580>
   14078:	cmp	r0, #0
   1407c:	beq	14048 <flatcc_builder_offset_vector_push@@Base+0x48>
   14080:	mov	r0, #0
   14084:	pop	{r4, r5, r6, pc}
   14088:	mov	r0, #0
   1408c:	pop	{r4, r5, r6, pc}
   14090:	andeq	r7, r1, r4, ror #16
   14094:	andeq	r0, r0, r6, lsr #7
   14098:	andeq	r7, r1, r4, lsr ip
   1409c:	ldrdeq	r7, [r1], -r8

000140a0 <flatcc_builder_append_offset_vector@@Base>:
   140a0:	push	{r4, r5, r6, r7, r8, lr}
   140a4:	mov	r6, r1
   140a8:	ldr	r1, [r0, #32]
   140ac:	ldrh	r3, [r1, #14]
   140b0:	cmp	r3, #5
   140b4:	bne	14124 <flatcc_builder_append_offset_vector@@Base+0x84>
   140b8:	mov	r5, r0
   140bc:	ldr	r3, [r1, #20]
   140c0:	adds	r3, r2, r3
   140c4:	movcs	ip, #1
   140c8:	movcc	ip, #0
   140cc:	cmn	r3, #-1073741823	; 0xc0000001
   140d0:	movls	r0, #0
   140d4:	movhi	r0, #1
   140d8:	orrs	r0, ip, r0
   140dc:	bne	14138 <flatcc_builder_append_offset_vector@@Base+0x98>
   140e0:	str	r3, [r1, #20]
   140e4:	lsl	r4, r2, #2
   140e8:	ldr	r7, [r5, #20]
   140ec:	add	r1, r4, r7
   140f0:	str	r1, [r5, #20]
   140f4:	ldr	r3, [r5, #24]
   140f8:	cmp	r1, r3
   140fc:	bcs	1414c <flatcc_builder_append_offset_vector@@Base+0xac>
   14100:	ldr	r5, [r5, #16]
   14104:	adds	r5, r5, r7
   14108:	beq	1411c <flatcc_builder_append_offset_vector@@Base+0x7c>
   1410c:	mov	r2, r4
   14110:	mov	r1, r6
   14114:	mov	r0, r5
   14118:	bl	11fb8 <memcpy@plt>
   1411c:	mov	r0, r5
   14120:	pop	{r4, r5, r6, r7, r8, pc}
   14124:	ldr	r3, [pc, #64]	; 1416c <flatcc_builder_append_offset_vector@@Base+0xcc>
   14128:	mov	r2, #948	; 0x3b4
   1412c:	ldr	r1, [pc, #60]	; 14170 <flatcc_builder_append_offset_vector@@Base+0xd0>
   14130:	ldr	r0, [pc, #60]	; 14174 <flatcc_builder_append_offset_vector@@Base+0xd4>
   14134:	bl	1206c <__assert_fail@plt>
   14138:	ldr	r3, [pc, #56]	; 14178 <flatcc_builder_append_offset_vector@@Base+0xd8>
   1413c:	mov	r2, #892	; 0x37c
   14140:	ldr	r1, [pc, #40]	; 14170 <flatcc_builder_append_offset_vector@@Base+0xd0>
   14144:	ldr	r0, [pc, #48]	; 1417c <flatcc_builder_append_offset_vector@@Base+0xdc>
   14148:	bl	1206c <__assert_fail@plt>
   1414c:	mvn	r2, #3
   14150:	add	r1, r1, #1
   14154:	mov	r0, r5
   14158:	bl	129dc <main@@Base+0x580>
   1415c:	cmp	r0, #0
   14160:	beq	14100 <flatcc_builder_append_offset_vector@@Base+0x60>
   14164:	mov	r5, #0
   14168:	b	1411c <flatcc_builder_append_offset_vector@@Base+0x7c>
   1416c:	andeq	r7, r1, r8, lsl #17
   14170:	andeq	r7, r1, r4, lsr ip
   14174:	ldrdeq	r7, [r1], -r8
   14178:	andeq	r7, r1, r4, lsl r8
   1417c:	andeq	r7, r1, r0, asr sp

00014180 <flatcc_builder_extend_string@@Base>:
   14180:	push	{r4, r5, r6, lr}
   14184:	ldr	r2, [r0, #32]
   14188:	ldrh	r3, [r2, #14]
   1418c:	cmp	r3, #6
   14190:	bne	141cc <flatcc_builder_extend_string@@Base+0x4c>
   14194:	mov	r4, r0
   14198:	ldr	r3, [r2, #20]
   1419c:	adds	r3, r1, r3
   141a0:	bcs	141e0 <flatcc_builder_extend_string@@Base+0x60>
   141a4:	str	r3, [r2, #20]
   141a8:	ldr	r5, [r0, #20]
   141ac:	add	r1, r1, r5
   141b0:	str	r1, [r0, #20]
   141b4:	ldr	r3, [r0, #24]
   141b8:	cmp	r1, r3
   141bc:	bcs	141f4 <flatcc_builder_extend_string@@Base+0x74>
   141c0:	ldr	r0, [r4, #16]
   141c4:	add	r0, r0, r5
   141c8:	pop	{r4, r5, r6, pc}
   141cc:	ldr	r3, [pc, #60]	; 14210 <flatcc_builder_extend_string@@Base+0x90>
   141d0:	ldr	r2, [pc, #60]	; 14214 <flatcc_builder_extend_string@@Base+0x94>
   141d4:	ldr	r1, [pc, #60]	; 14218 <flatcc_builder_extend_string@@Base+0x98>
   141d8:	ldr	r0, [pc, #60]	; 1421c <flatcc_builder_extend_string@@Base+0x9c>
   141dc:	bl	1206c <__assert_fail@plt>
   141e0:	ldr	r3, [pc, #56]	; 14220 <flatcc_builder_extend_string@@Base+0xa0>
   141e4:	mov	r2, #892	; 0x37c
   141e8:	ldr	r1, [pc, #40]	; 14218 <flatcc_builder_extend_string@@Base+0x98>
   141ec:	ldr	r0, [pc, #48]	; 14224 <flatcc_builder_extend_string@@Base+0xa4>
   141f0:	bl	1206c <__assert_fail@plt>
   141f4:	mvn	r2, #3
   141f8:	add	r1, r1, #1
   141fc:	bl	129dc <main@@Base+0x580>
   14200:	cmp	r0, #0
   14204:	beq	141c0 <flatcc_builder_extend_string@@Base+0x40>
   14208:	mov	r0, #0
   1420c:	pop	{r4, r5, r6, pc}
   14210:	andeq	r7, r1, ip, lsr #17
   14214:			; <UNDEFINED> instruction: 0x000003bd
   14218:	andeq	r7, r1, r4, lsr ip
   1421c:	andeq	r7, r1, ip, lsl #28
   14220:	andeq	r7, r1, r4, lsl r8
   14224:	andeq	r7, r1, r0, asr sp

00014228 <flatcc_builder_append_string@@Base>:
   14228:	push	{r4, r5, r6, r7, r8, lr}
   1422c:	mov	r5, r2
   14230:	ldr	r2, [r0, #32]
   14234:	ldrh	r3, [r2, #14]
   14238:	cmp	r3, #6
   1423c:	bne	14294 <flatcc_builder_append_string@@Base+0x6c>
   14240:	mov	r4, r0
   14244:	mov	r6, r1
   14248:	ldr	r3, [r2, #20]
   1424c:	adds	r3, r5, r3
   14250:	bcs	142a8 <flatcc_builder_append_string@@Base+0x80>
   14254:	str	r3, [r2, #20]
   14258:	ldr	r7, [r0, #20]
   1425c:	add	r1, r5, r7
   14260:	str	r1, [r0, #20]
   14264:	ldr	r3, [r0, #24]
   14268:	cmp	r1, r3
   1426c:	bcs	142bc <flatcc_builder_append_string@@Base+0x94>
   14270:	ldr	r4, [r4, #16]
   14274:	adds	r4, r4, r7
   14278:	beq	1428c <flatcc_builder_append_string@@Base+0x64>
   1427c:	mov	r2, r5
   14280:	mov	r1, r6
   14284:	mov	r0, r4
   14288:	bl	11fb8 <memcpy@plt>
   1428c:	mov	r0, r4
   14290:	pop	{r4, r5, r6, r7, r8, pc}
   14294:	ldr	r3, [pc, #60]	; 142d8 <flatcc_builder_append_string@@Base+0xb0>
   14298:	ldr	r2, [pc, #60]	; 142dc <flatcc_builder_append_string@@Base+0xb4>
   1429c:	ldr	r1, [pc, #60]	; 142e0 <flatcc_builder_append_string@@Base+0xb8>
   142a0:	ldr	r0, [pc, #60]	; 142e4 <flatcc_builder_append_string@@Base+0xbc>
   142a4:	bl	1206c <__assert_fail@plt>
   142a8:	ldr	r3, [pc, #56]	; 142e8 <flatcc_builder_append_string@@Base+0xc0>
   142ac:	mov	r2, #892	; 0x37c
   142b0:	ldr	r1, [pc, #40]	; 142e0 <flatcc_builder_append_string@@Base+0xb8>
   142b4:	ldr	r0, [pc, #48]	; 142ec <flatcc_builder_append_string@@Base+0xc4>
   142b8:	bl	1206c <__assert_fail@plt>
   142bc:	mvn	r2, #3
   142c0:	add	r1, r1, #1
   142c4:	bl	129dc <main@@Base+0x580>
   142c8:	cmp	r0, #0
   142cc:	beq	14270 <flatcc_builder_append_string@@Base+0x48>
   142d0:	mov	r4, #0
   142d4:	b	1428c <flatcc_builder_append_string@@Base+0x64>
   142d8:	andeq	r7, r1, ip, asr #17
   142dc:	andeq	r0, r0, r6, asr #7
   142e0:	andeq	r7, r1, r4, lsr ip
   142e4:	andeq	r7, r1, ip, lsl #28
   142e8:	andeq	r7, r1, r4, lsl r8
   142ec:	andeq	r7, r1, r0, asr sp

000142f0 <flatcc_builder_append_string_str@@Base>:
   142f0:	push	{r4, r5, r6, lr}
   142f4:	mov	r5, r0
   142f8:	mov	r4, r1
   142fc:	mov	r0, r1
   14300:	bl	12024 <strlen@plt>
   14304:	mov	r2, r0
   14308:	mov	r1, r4
   1430c:	mov	r0, r5
   14310:	bl	14228 <flatcc_builder_append_string@@Base>
   14314:	pop	{r4, r5, r6, pc}

00014318 <flatcc_builder_append_string_strn@@Base>:
   14318:	push	{r4, r5, r6, lr}
   1431c:	mov	r6, r0
   14320:	mov	r4, r1
   14324:	mov	r5, r2
   14328:	mov	r1, #0
   1432c:	mov	r0, r4
   14330:	bl	12048 <memchr@plt>
   14334:	cmp	r0, #0
   14338:	subne	r5, r0, r4
   1433c:	mov	r2, r5
   14340:	mov	r1, r4
   14344:	mov	r0, r6
   14348:	bl	14228 <flatcc_builder_append_string@@Base>
   1434c:	pop	{r4, r5, r6, pc}

00014350 <flatcc_builder_truncate_vector@@Base>:
   14350:	push	{r4, lr}
   14354:	ldr	ip, [r0, #32]
   14358:	ldrh	r3, [ip, #14]
   1435c:	cmp	r3, #4
   14360:	bne	143a8 <flatcc_builder_truncate_vector@@Base+0x58>
   14364:	ldr	r3, [ip, #20]
   14368:	cmp	r3, r1
   1436c:	bcc	143bc <flatcc_builder_truncate_vector@@Base+0x6c>
   14370:	sub	r3, r3, r1
   14374:	str	r3, [ip, #20]
   14378:	ldr	r3, [r0, #32]
   1437c:	ldr	r2, [r3, #16]
   14380:	mul	r2, r2, r1
   14384:	ldr	r3, [r0, #20]
   14388:	sub	r3, r3, r2
   1438c:	str	r3, [r0, #20]
   14390:	ldr	r0, [r0, #16]
   14394:	mov	r1, #0
   14398:	add	r0, r0, r3
   1439c:	bl	1203c <memset@plt>
   143a0:	mov	r0, #0
   143a4:	pop	{r4, pc}
   143a8:	ldr	r3, [pc, #32]	; 143d0 <flatcc_builder_truncate_vector@@Base+0x80>
   143ac:	ldr	r2, [pc, #32]	; 143d4 <flatcc_builder_truncate_vector@@Base+0x84>
   143b0:	ldr	r1, [pc, #32]	; 143d8 <flatcc_builder_truncate_vector@@Base+0x88>
   143b4:	ldr	r0, [pc, #32]	; 143dc <flatcc_builder_truncate_vector@@Base+0x8c>
   143b8:	bl	1206c <__assert_fail@plt>
   143bc:	ldr	r3, [pc, #12]	; 143d0 <flatcc_builder_truncate_vector@@Base+0x80>
   143c0:	ldr	r2, [pc, #24]	; 143e0 <flatcc_builder_truncate_vector@@Base+0x90>
   143c4:	ldr	r1, [pc, #12]	; 143d8 <flatcc_builder_truncate_vector@@Base+0x88>
   143c8:	ldr	r0, [pc, #20]	; 143e4 <flatcc_builder_truncate_vector@@Base+0x94>
   143cc:	bl	1206c <__assert_fail@plt>
   143d0:	andeq	r7, r1, ip, ror #17
   143d4:	ldrdeq	r0, [r0], -r9
   143d8:	andeq	r7, r1, r4, lsr ip
   143dc:	andeq	r7, r1, ip, ror #26
   143e0:	ldrdeq	r0, [r0], -sl
   143e4:	andeq	r7, r1, r8, lsr lr

000143e8 <flatcc_builder_truncate_offset_vector@@Base>:
   143e8:	push	{r4, lr}
   143ec:	ldr	ip, [r0, #32]
   143f0:	ldrh	r3, [ip, #14]
   143f4:	cmp	r3, #5
   143f8:	bne	14440 <flatcc_builder_truncate_offset_vector@@Base+0x58>
   143fc:	ldr	r3, [ip, #20]
   14400:	cmp	r3, r1
   14404:	bcc	14454 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   14408:	sub	r3, r3, r1
   1440c:	str	r3, [ip, #20]
   14410:	ldr	r3, [r0, #32]
   14414:	ldr	r2, [r3, #16]
   14418:	mul	r2, r2, r1
   1441c:	ldr	r3, [r0, #20]
   14420:	sub	r3, r3, r2
   14424:	str	r3, [r0, #20]
   14428:	ldr	r0, [r0, #16]
   1442c:	mov	r1, #0
   14430:	add	r0, r0, r3
   14434:	bl	1203c <memset@plt>
   14438:	mov	r0, #0
   1443c:	pop	{r4, pc}
   14440:	ldr	r3, [pc, #32]	; 14468 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14444:	ldr	r2, [pc, #32]	; 1446c <flatcc_builder_truncate_offset_vector@@Base+0x84>
   14448:	ldr	r1, [pc, #32]	; 14470 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   1444c:	ldr	r0, [pc, #32]	; 14474 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   14450:	bl	1206c <__assert_fail@plt>
   14454:	ldr	r3, [pc, #12]	; 14468 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14458:	ldr	r2, [pc, #24]	; 14478 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   1445c:	ldr	r1, [pc, #12]	; 14470 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   14460:	ldr	r0, [pc, #20]	; 1447c <flatcc_builder_truncate_offset_vector@@Base+0x94>
   14464:	bl	1206c <__assert_fail@plt>
   14468:	andeq	r7, r1, ip, lsl #18
   1446c:	andeq	r0, r0, r2, ror #7
   14470:	andeq	r7, r1, r4, lsr ip
   14474:	ldrdeq	r7, [r1], -r8
   14478:	andeq	r0, r0, r3, ror #7
   1447c:	andeq	r7, r1, ip, asr lr

00014480 <flatcc_builder_truncate_string@@Base>:
   14480:	push	{r4, lr}
   14484:	ldr	r2, [r0, #32]
   14488:	ldrh	r3, [r2, #14]
   1448c:	cmp	r3, #6
   14490:	bne	144d0 <flatcc_builder_truncate_string@@Base+0x50>
   14494:	ldr	r3, [r2, #20]
   14498:	cmp	r3, r1
   1449c:	bcc	144e4 <flatcc_builder_truncate_string@@Base+0x64>
   144a0:	sub	r3, r3, r1
   144a4:	str	r3, [r2, #20]
   144a8:	ldr	r3, [r0, #20]
   144ac:	sub	r3, r3, r1
   144b0:	str	r3, [r0, #20]
   144b4:	ldr	r0, [r0, #16]
   144b8:	mov	r2, r1
   144bc:	mov	r1, #0
   144c0:	add	r0, r0, r3
   144c4:	bl	1203c <memset@plt>
   144c8:	mov	r0, #0
   144cc:	pop	{r4, pc}
   144d0:	ldr	r3, [pc, #32]	; 144f8 <flatcc_builder_truncate_string@@Base+0x78>
   144d4:	ldr	r2, [pc, #32]	; 144fc <flatcc_builder_truncate_string@@Base+0x7c>
   144d8:	ldr	r1, [pc, #32]	; 14500 <flatcc_builder_truncate_string@@Base+0x80>
   144dc:	ldr	r0, [pc, #32]	; 14504 <flatcc_builder_truncate_string@@Base+0x84>
   144e0:	bl	1206c <__assert_fail@plt>
   144e4:	ldr	r3, [pc, #12]	; 144f8 <flatcc_builder_truncate_string@@Base+0x78>
   144e8:	mov	r2, #1004	; 0x3ec
   144ec:	ldr	r1, [pc, #12]	; 14500 <flatcc_builder_truncate_string@@Base+0x80>
   144f0:	ldr	r0, [pc, #16]	; 14508 <flatcc_builder_truncate_string@@Base+0x88>
   144f4:	bl	1206c <__assert_fail@plt>
   144f8:	andeq	r7, r1, r4, lsr r9
   144fc:	andeq	r0, r0, fp, ror #7
   14500:	andeq	r7, r1, r4, lsr ip
   14504:	andeq	r7, r1, ip, lsl #28
   14508:	muleq	r1, r8, lr

0001450c <flatcc_builder_start_vector@@Base>:
   1450c:	push	{r4, r5, r6, lr}
   14510:	mov	r4, r0
   14514:	mov	r6, r1
   14518:	mov	r5, r3
   1451c:	cmp	r2, #4
   14520:	movcs	r1, r2
   14524:	movcc	r1, #4
   14528:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x22c>
   1452c:	cmp	r0, #0
   14530:	bne	14590 <flatcc_builder_start_vector@@Base+0x84>
   14534:	ldr	r3, [r4, #32]
   14538:	str	r6, [r3, #16]
   1453c:	ldr	r3, [r4, #32]
   14540:	mov	r2, #0
   14544:	str	r2, [r3, #20]
   14548:	ldr	r3, [r4, #32]
   1454c:	str	r5, [r3, #24]
   14550:	ldr	r3, [r4, #32]
   14554:	mov	r2, #4
   14558:	strh	r2, [r3, #14]
   1455c:	ldr	r1, [r4, #28]
   14560:	ldr	r2, [r4, #60]	; 0x3c
   14564:	add	r2, r2, r1
   14568:	str	r2, [r4, #16]
   1456c:	ldr	r3, [r4, #64]	; 0x40
   14570:	sub	r3, r3, r1
   14574:	cmn	r3, #4
   14578:	mvnhi	r3, #3
   1457c:	str	r3, [r4, #24]
   14580:	ldr	r3, [r4, #32]
   14584:	mvn	r2, #3
   14588:	str	r2, [r3, #4]
   1458c:	pop	{r4, r5, r6, pc}
   14590:	mvn	r0, #0
   14594:	pop	{r4, r5, r6, pc}

00014598 <flatcc_builder_start_offset_vector@@Base>:
   14598:	push	{r4, lr}
   1459c:	mov	r4, r0
   145a0:	mov	r1, #4
   145a4:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x22c>
   145a8:	cmp	r0, #0
   145ac:	bne	14608 <flatcc_builder_start_offset_vector@@Base+0x70>
   145b0:	ldr	r3, [r4, #32]
   145b4:	mov	r2, #4
   145b8:	str	r2, [r3, #16]
   145bc:	ldr	r3, [r4, #32]
   145c0:	mov	r2, #0
   145c4:	str	r2, [r3, #20]
   145c8:	ldr	r3, [r4, #32]
   145cc:	mov	r2, #5
   145d0:	strh	r2, [r3, #14]
   145d4:	ldr	r1, [r4, #28]
   145d8:	ldr	r2, [r4, #60]	; 0x3c
   145dc:	add	r2, r2, r1
   145e0:	str	r2, [r4, #16]
   145e4:	ldr	r3, [r4, #64]	; 0x40
   145e8:	sub	r3, r3, r1
   145ec:	cmn	r3, #4
   145f0:	mvnhi	r3, #3
   145f4:	str	r3, [r4, #24]
   145f8:	ldr	r3, [r4, #32]
   145fc:	mvn	r2, #3
   14600:	str	r2, [r3, #4]
   14604:	pop	{r4, pc}
   14608:	mvn	r0, #0
   1460c:	pop	{r4, pc}

00014610 <flatcc_builder_start_string@@Base>:
   14610:	push	{r4, lr}
   14614:	mov	r4, r0
   14618:	mov	r1, #1
   1461c:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x22c>
   14620:	cmp	r0, #0
   14624:	bne	14680 <flatcc_builder_start_string@@Base+0x70>
   14628:	ldr	r3, [r4, #32]
   1462c:	mov	r2, #1
   14630:	str	r2, [r3, #16]
   14634:	ldr	r3, [r4, #32]
   14638:	mov	r2, #0
   1463c:	str	r2, [r3, #20]
   14640:	ldr	r3, [r4, #32]
   14644:	mov	r2, #6
   14648:	strh	r2, [r3, #14]
   1464c:	ldr	r1, [r4, #28]
   14650:	ldr	r2, [r4, #60]	; 0x3c
   14654:	add	r2, r2, r1
   14658:	str	r2, [r4, #16]
   1465c:	ldr	r3, [r4, #64]	; 0x40
   14660:	sub	r3, r3, r1
   14664:	cmn	r3, #4
   14668:	mvnhi	r3, #3
   1466c:	str	r3, [r4, #24]
   14670:	ldr	r3, [r4, #32]
   14674:	mvn	r2, #3
   14678:	str	r2, [r3, #4]
   1467c:	pop	{r4, pc}
   14680:	mvn	r0, #0
   14684:	pop	{r4, pc}

00014688 <flatcc_builder_reserve_table@@Base>:
   14688:	push	{r4, r5, r6, r7, lr}
   1468c:	sub	sp, sp, #12
   14690:	cmp	r1, #0
   14694:	blt	14720 <flatcc_builder_reserve_table@@Base+0x98>
   14698:	mov	r5, r0
   1469c:	ldr	r2, [r0, #32]
   146a0:	ldrh	r6, [r2, #28]
   146a4:	ldr	r3, [r2, #16]
   146a8:	add	r6, r3, r6, lsl #1
   146ac:	add	r1, r1, #2
   146b0:	lsl	r4, r1, #1
   146b4:	add	r2, r6, r4
   146b8:	ldr	r3, [r0, #56]	; 0x38
   146bc:	cmp	r2, r3
   146c0:	bhi	14734 <flatcc_builder_reserve_table@@Base+0xac>
   146c4:	ldr	r3, [r5, #52]	; 0x34
   146c8:	adds	r3, r3, r6
   146cc:	moveq	r3, #0
   146d0:	streq	r3, [r5, #4]
   146d4:	mvneq	r0, #0
   146d8:	beq	14718 <flatcc_builder_reserve_table@@Base+0x90>
   146dc:	add	r3, r3, #4
   146e0:	str	r3, [r5, #4]
   146e4:	ldr	r3, [r5, #32]
   146e8:	ldr	r6, [r3, #20]
   146ec:	add	r2, r4, r6
   146f0:	sub	r2, r2, #3
   146f4:	ldr	r3, [r5, #80]	; 0x50
   146f8:	cmp	r2, r3
   146fc:	bhi	1476c <flatcc_builder_reserve_table@@Base+0xe4>
   14700:	ldr	r0, [r5, #76]	; 0x4c
   14704:	add	r0, r0, r6
   14708:	str	r0, [r5]
   1470c:	cmp	r0, #0
   14710:	movne	r0, #0
   14714:	mvneq	r0, #0
   14718:	add	sp, sp, #12
   1471c:	pop	{r4, r5, r6, r7, pc}
   14720:	ldr	r3, [pc, #124]	; 147a4 <flatcc_builder_reserve_table@@Base+0x11c>
   14724:	ldr	r2, [pc, #124]	; 147a8 <flatcc_builder_reserve_table@@Base+0x120>
   14728:	ldr	r1, [pc, #124]	; 147ac <flatcc_builder_reserve_table@@Base+0x124>
   1472c:	ldr	r0, [pc, #124]	; 147b0 <flatcc_builder_reserve_table@@Base+0x128>
   14730:	bl	1206c <__assert_fail@plt>
   14734:	mov	r3, #0
   14738:	str	r3, [sp]
   1473c:	ldr	r7, [r0, #48]	; 0x30
   14740:	mov	r3, #1
   14744:	add	r1, r0, #52	; 0x34
   14748:	ldr	r0, [r0, #40]	; 0x28
   1474c:	blx	r7
   14750:	cmp	r0, #0
   14754:	beq	146c4 <flatcc_builder_reserve_table@@Base+0x3c>
   14758:	ldr	r3, [pc, #84]	; 147b4 <flatcc_builder_reserve_table@@Base+0x12c>
   1475c:	mov	r2, #308	; 0x134
   14760:	ldr	r1, [pc, #68]	; 147ac <flatcc_builder_reserve_table@@Base+0x124>
   14764:	ldr	r0, [pc, #76]	; 147b8 <flatcc_builder_reserve_table@@Base+0x130>
   14768:	bl	1206c <__assert_fail@plt>
   1476c:	mov	r3, #3
   14770:	str	r3, [sp]
   14774:	ldr	r4, [r5, #48]	; 0x30
   14778:	mov	r3, #0
   1477c:	add	r1, r5, #76	; 0x4c
   14780:	ldr	r0, [r5, #40]	; 0x28
   14784:	blx	r4
   14788:	cmp	r0, #0
   1478c:	beq	14700 <flatcc_builder_reserve_table@@Base+0x78>
   14790:	ldr	r3, [pc, #28]	; 147b4 <flatcc_builder_reserve_table@@Base+0x12c>
   14794:	mov	r2, #308	; 0x134
   14798:	ldr	r1, [pc, #12]	; 147ac <flatcc_builder_reserve_table@@Base+0x124>
   1479c:	ldr	r0, [pc, #20]	; 147b8 <flatcc_builder_reserve_table@@Base+0x130>
   147a0:	bl	1206c <__assert_fail@plt>
   147a4:	andeq	r7, r1, r4, asr r9
   147a8:	andeq	r0, r0, r9, lsr #8
   147ac:	andeq	r7, r1, r4, lsr ip
   147b0:			; <UNDEFINED> instruction: 0x00017ebc
   147b4:	andeq	r7, r1, r0, lsl #14
   147b8:	andeq	r7, r1, r8, lsl #25

000147bc <flatcc_builder_start_table@@Base>:
   147bc:	push	{r4, r5, r6, r7, lr}
   147c0:	sub	sp, sp, #12
   147c4:	mov	r4, r0
   147c8:	mov	r5, r1
   147cc:	mov	r1, #4
   147d0:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x22c>
   147d4:	cmp	r0, #0
   147d8:	bne	14968 <flatcc_builder_start_table@@Base+0x1ac>
   147dc:	ldr	r2, [r4, #32]
   147e0:	ldr	r3, [r4, #4]
   147e4:	ldr	r1, [r4, #52]	; 0x34
   147e8:	sub	r3, r3, r1
   147ec:	str	r3, [r2, #16]
   147f0:	ldr	r2, [r4, #32]
   147f4:	ldr	r3, [r4]
   147f8:	ldr	r1, [r4, #76]	; 0x4c
   147fc:	sub	r3, r3, r1
   14800:	str	r3, [r2, #20]
   14804:	ldr	r3, [r4, #32]
   14808:	ldr	r2, [r4, #12]
   1480c:	str	r2, [r3, #24]
   14810:	ldr	r3, [r4, #32]
   14814:	ldrh	r2, [r4, #8]
   14818:	strh	r2, [r3, #28]
   1481c:	ldr	r3, [pc, #340]	; 14978 <flatcc_builder_start_table@@Base+0x1bc>
   14820:	str	r3, [r4, #12]
   14824:	mov	r3, #0
   14828:	strh	r3, [r4, #8]
   1482c:	ldr	r3, [r4, #32]
   14830:	mov	r2, #3
   14834:	strh	r2, [r3, #14]
   14838:	ldr	r2, [r4, #32]
   1483c:	ldrh	r6, [r2, #28]
   14840:	ldr	r3, [r2, #16]
   14844:	add	r6, r3, r6, lsl #1
   14848:	add	r5, r5, #2
   1484c:	lsl	r5, r5, #1
   14850:	add	r2, r6, r5
   14854:	ldr	r3, [r4, #56]	; 0x38
   14858:	cmp	r2, r3
   1485c:	bhi	148f8 <flatcc_builder_start_table@@Base+0x13c>
   14860:	ldr	r3, [r4, #52]	; 0x34
   14864:	adds	r3, r3, r6
   14868:	moveq	r3, #0
   1486c:	streq	r3, [r4, #4]
   14870:	mvneq	r0, #0
   14874:	beq	148f0 <flatcc_builder_start_table@@Base+0x134>
   14878:	add	r3, r3, #4
   1487c:	str	r3, [r4, #4]
   14880:	ldr	r3, [r4, #32]
   14884:	ldr	r6, [r3, #20]
   14888:	sub	r2, r5, #3
   1488c:	add	r2, r2, r6
   14890:	ldr	r3, [r4, #80]	; 0x50
   14894:	cmp	r2, r3
   14898:	bhi	14930 <flatcc_builder_start_table@@Base+0x174>
   1489c:	ldr	r0, [r4, #76]	; 0x4c
   148a0:	add	r0, r0, r6
   148a4:	str	r0, [r4]
   148a8:	cmp	r0, #0
   148ac:	movne	r0, #0
   148b0:	mvneq	r0, #0
   148b4:	cmp	r0, #0
   148b8:	bne	14970 <flatcc_builder_start_table@@Base+0x1b4>
   148bc:	ldr	r1, [r4, #28]
   148c0:	ldr	r2, [r4, #60]	; 0x3c
   148c4:	add	r2, r2, r1
   148c8:	str	r2, [r4, #16]
   148cc:	ldr	r3, [r4, #64]	; 0x40
   148d0:	sub	r3, r3, r1
   148d4:	ldr	r2, [pc, #160]	; 1497c <flatcc_builder_start_table@@Base+0x1c0>
   148d8:	cmp	r3, r2
   148dc:	ldrhi	r3, [pc, #152]	; 1497c <flatcc_builder_start_table@@Base+0x1c0>
   148e0:	str	r3, [r4, #24]
   148e4:	ldr	r3, [r4, #32]
   148e8:	ldr	r2, [pc, #140]	; 1497c <flatcc_builder_start_table@@Base+0x1c0>
   148ec:	str	r2, [r3, #4]
   148f0:	add	sp, sp, #12
   148f4:	pop	{r4, r5, r6, r7, pc}
   148f8:	mov	r3, #0
   148fc:	str	r3, [sp]
   14900:	ldr	r7, [r4, #48]	; 0x30
   14904:	mov	r3, #1
   14908:	add	r1, r4, #52	; 0x34
   1490c:	ldr	r0, [r4, #40]	; 0x28
   14910:	blx	r7
   14914:	cmp	r0, #0
   14918:	beq	14860 <flatcc_builder_start_table@@Base+0xa4>
   1491c:	ldr	r3, [pc, #92]	; 14980 <flatcc_builder_start_table@@Base+0x1c4>
   14920:	mov	r2, #308	; 0x134
   14924:	ldr	r1, [pc, #88]	; 14984 <flatcc_builder_start_table@@Base+0x1c8>
   14928:	ldr	r0, [pc, #88]	; 14988 <flatcc_builder_start_table@@Base+0x1cc>
   1492c:	bl	1206c <__assert_fail@plt>
   14930:	mov	r3, #3
   14934:	str	r3, [sp]
   14938:	ldr	r5, [r4, #48]	; 0x30
   1493c:	mov	r3, #0
   14940:	add	r1, r4, #76	; 0x4c
   14944:	ldr	r0, [r4, #40]	; 0x28
   14948:	blx	r5
   1494c:	cmp	r0, #0
   14950:	beq	1489c <flatcc_builder_start_table@@Base+0xe0>
   14954:	ldr	r3, [pc, #36]	; 14980 <flatcc_builder_start_table@@Base+0x1c4>
   14958:	mov	r2, #308	; 0x134
   1495c:	ldr	r1, [pc, #32]	; 14984 <flatcc_builder_start_table@@Base+0x1c8>
   14960:	ldr	r0, [pc, #32]	; 14988 <flatcc_builder_start_table@@Base+0x1cc>
   14964:	bl	1206c <__assert_fail@plt>
   14968:	mvn	r0, #0
   1496c:	b	148f0 <flatcc_builder_start_table@@Base+0x134>
   14970:	mvn	r0, #0
   14974:	b	148f0 <flatcc_builder_start_table@@Base+0x134>
   14978:	svccs	0x00693b52
   1497c:	strdeq	pc, [r0], -ip
   14980:	andeq	r7, r1, r0, lsl #14
   14984:	andeq	r7, r1, r4, lsr ip
   14988:	andeq	r7, r1, r8, lsl #25

0001498c <flatcc_builder_create_vtable@@Base>:
   1498c:	push	{r4, r5, r6, lr}
   14990:	sub	sp, sp, #80	; 0x50
   14994:	mov	r5, r0
   14998:	mov	r3, #0
   1499c:	str	r3, [sp, #8]
   149a0:	str	r3, [sp, #12]
   149a4:	cmp	r2, #0
   149a8:	beq	14a2c <flatcc_builder_create_vtable@@Base+0xa0>
   149ac:	str	r2, [sp, #8]
   149b0:	str	r1, [sp, #16]
   149b4:	str	r2, [sp, #20]
   149b8:	mov	r3, #1
   149bc:	str	r3, [sp, #12]
   149c0:	ldr	r3, [r0, #152]	; 0x98
   149c4:	cmp	r3, #0
   149c8:	bne	14a44 <flatcc_builder_create_vtable@@Base+0xb8>
   149cc:	ldr	r3, [r0, #180]	; 0xb4
   149d0:	cmp	r3, #0
   149d4:	bne	14a44 <flatcc_builder_create_vtable@@Base+0xb8>
   149d8:	ldr	r4, [r0, #140]	; 0x8c
   149dc:	mov	r3, r2
   149e0:	add	r2, r2, r4
   149e4:	str	r2, [r0, #140]	; 0x8c
   149e8:	cmp	r4, r2
   149ec:	ble	14aa4 <flatcc_builder_create_vtable@@Base+0x118>
   149f0:	ldr	r3, [pc, #232]	; 14ae0 <flatcc_builder_create_vtable@@Base+0x154>
   149f4:	ldr	r2, [pc, #232]	; 14ae4 <flatcc_builder_create_vtable@@Base+0x158>
   149f8:	ldr	r1, [pc, #232]	; 14ae8 <flatcc_builder_create_vtable@@Base+0x15c>
   149fc:	ldr	r0, [pc, #232]	; 14aec <flatcc_builder_create_vtable@@Base+0x160>
   14a00:	bl	1206c <__assert_fail@plt>
   14a04:	ldr	r3, [pc, #228]	; 14af0 <flatcc_builder_create_vtable@@Base+0x164>
   14a08:	ldr	r2, [pc, #228]	; 14af4 <flatcc_builder_create_vtable@@Base+0x168>
   14a0c:	ldr	r1, [pc, #212]	; 14ae8 <flatcc_builder_create_vtable@@Base+0x15c>
   14a10:	ldr	r0, [pc, #212]	; 14aec <flatcc_builder_create_vtable@@Base+0x160>
   14a14:	bl	1206c <__assert_fail@plt>
   14a18:	ldr	r3, [pc, #208]	; 14af0 <flatcc_builder_create_vtable@@Base+0x164>
   14a1c:	ldr	r2, [pc, #212]	; 14af8 <flatcc_builder_create_vtable@@Base+0x16c>
   14a20:	ldr	r1, [pc, #192]	; 14ae8 <flatcc_builder_create_vtable@@Base+0x15c>
   14a24:	ldr	r0, [pc, #192]	; 14aec <flatcc_builder_create_vtable@@Base+0x160>
   14a28:	bl	1206c <__assert_fail@plt>
   14a2c:	ldr	r3, [r0, #152]	; 0x98
   14a30:	cmp	r3, #0
   14a34:	bne	14a04 <flatcc_builder_create_vtable@@Base+0x78>
   14a38:	ldr	r3, [r0, #180]	; 0xb4
   14a3c:	cmp	r3, #0
   14a40:	beq	14a94 <flatcc_builder_create_vtable@@Base+0x108>
   14a44:	ldr	r2, [r5, #136]	; 0x88
   14a48:	ldr	r3, [sp, #8]
   14a4c:	sub	r4, r2, r3
   14a50:	cmp	r2, r4
   14a54:	ble	14a04 <flatcc_builder_create_vtable@@Base+0x78>
   14a58:	str	r3, [sp]
   14a5c:	ldr	r6, [r5, #44]	; 0x2c
   14a60:	mov	r3, r4
   14a64:	ldr	r2, [sp, #12]
   14a68:	add	r1, sp, #16
   14a6c:	ldr	r0, [r5, #36]	; 0x24
   14a70:	blx	r6
   14a74:	cmp	r0, #0
   14a78:	bne	14a18 <flatcc_builder_create_vtable@@Base+0x8c>
   14a7c:	str	r4, [r5, #136]	; 0x88
   14a80:	cmp	r4, #0
   14a84:	addne	r4, r4, #1
   14a88:	mov	r0, r4
   14a8c:	add	sp, sp, #80	; 0x50
   14a90:	pop	{r4, r5, r6, pc}
   14a94:	ldr	r4, [r5, #140]	; 0x8c
   14a98:	ldr	r3, [sp, #8]
   14a9c:	add	r2, r3, r4
   14aa0:	str	r2, [r5, #140]	; 0x8c
   14aa4:	ldr	r0, [r5, #36]	; 0x24
   14aa8:	str	r3, [sp]
   14aac:	ldr	r5, [r5, #44]	; 0x2c
   14ab0:	mov	r3, r4
   14ab4:	ldr	r2, [sp, #12]
   14ab8:	add	r1, sp, #16
   14abc:	blx	r5
   14ac0:	cmp	r0, #0
   14ac4:	addeq	r4, r4, #1
   14ac8:	beq	14a88 <flatcc_builder_create_vtable@@Base+0xfc>
   14acc:	ldr	r3, [pc, #12]	; 14ae0 <flatcc_builder_create_vtable@@Base+0x154>
   14ad0:	ldr	r2, [pc, #36]	; 14afc <flatcc_builder_create_vtable@@Base+0x170>
   14ad4:	ldr	r1, [pc, #12]	; 14ae8 <flatcc_builder_create_vtable@@Base+0x15c>
   14ad8:	ldr	r0, [pc, #12]	; 14aec <flatcc_builder_create_vtable@@Base+0x160>
   14adc:	bl	1206c <__assert_fail@plt>
   14ae0:	andeq	r7, r1, r4, ror #13
   14ae4:	andeq	r0, r0, r1, lsr #5
   14ae8:	andeq	r7, r1, r4, lsr ip
   14aec:	andeq	r7, r1, r8, lsl #25
   14af0:	andeq	r7, r1, r0, lsr r7
   14af4:	andeq	r0, r0, r7, lsl #5
   14af8:	andeq	r0, r0, fp, lsl #5
   14afc:	andeq	r0, r0, r5, lsr #5

00014b00 <flatcc_builder_create_cached_vtable@@Base>:
   14b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b04:	sub	sp, sp, #28
   14b08:	mov	r8, r0
   14b0c:	str	r1, [sp, #8]
   14b10:	mov	r7, r2
   14b14:	mov	fp, r3
   14b18:	ldr	r4, [r0, #116]	; 0x74
   14b1c:	cmp	r4, #0
   14b20:	beq	14b68 <flatcc_builder_create_cached_vtable@@Base+0x68>
   14b24:	ldr	r3, [r8, #116]	; 0x74
   14b28:	rsb	r3, r3, #32
   14b2c:	lsr	fp, fp, r3
   14b30:	ldr	r3, [r8, #92]	; 0x5c
   14b34:	str	r3, [sp, #16]
   14b38:	adds	r2, r3, fp, lsl #2
   14b3c:	str	r2, [sp, #20]
   14b40:	beq	14e38 <flatcc_builder_create_cached_vtable@@Base+0x338>
   14b44:	ldr	r5, [r3, fp, lsl #2]
   14b48:	cmp	r5, #0
   14b4c:	beq	14cd8 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   14b50:	ldr	sl, [r8, #100]	; 0x64
   14b54:	ldr	r6, [r8, #68]	; 0x44
   14b58:	mov	r9, r2
   14b5c:	mov	r3, #0
   14b60:	str	r3, [sp, #12]
   14b64:	b	14c60 <flatcc_builder_create_cached_vtable@@Base+0x160>
   14b68:	add	r6, r0, #92	; 0x5c
   14b6c:	ldr	r3, [r0, #124]	; 0x7c
   14b70:	cmp	r3, #0
   14b74:	bne	14bcc <flatcc_builder_create_cached_vtable@@Base+0xcc>
   14b78:	ldr	r3, [r0, #104]	; 0x68
   14b7c:	cmp	r3, #15
   14b80:	bls	14be0 <flatcc_builder_create_cached_vtable@@Base+0xe0>
   14b84:	ldr	r3, [r8, #100]	; 0x64
   14b88:	cmp	r3, #0
   14b8c:	beq	14e58 <flatcc_builder_create_cached_vtable@@Base+0x358>
   14b90:	mov	r3, #16
   14b94:	str	r3, [r8, #124]	; 0x7c
   14b98:	mov	r3, #5
   14b9c:	str	r3, [sp]
   14ba0:	ldr	r5, [r8, #48]	; 0x30
   14ba4:	mov	r3, #1
   14ba8:	mov	r2, #256	; 0x100
   14bac:	mov	r1, r6
   14bb0:	ldr	r0, [r8, #40]	; 0x28
   14bb4:	blx	r5
   14bb8:	cmp	r0, #0
   14bbc:	bne	14e58 <flatcc_builder_create_cached_vtable@@Base+0x358>
   14bc0:	ldr	r1, [r8, #96]	; 0x60
   14bc4:	mov	r3, #256	; 0x100
   14bc8:	b	14c20 <flatcc_builder_create_cached_vtable@@Base+0x120>
   14bcc:	ldr	r3, [pc, #652]	; 14e60 <flatcc_builder_create_cached_vtable@@Base+0x360>
   14bd0:	ldr	r2, [pc, #652]	; 14e64 <flatcc_builder_create_cached_vtable@@Base+0x364>
   14bd4:	ldr	r1, [pc, #652]	; 14e68 <flatcc_builder_create_cached_vtable@@Base+0x368>
   14bd8:	ldr	r0, [pc, #652]	; 14e6c <flatcc_builder_create_cached_vtable@@Base+0x36c>
   14bdc:	bl	1206c <__assert_fail@plt>
   14be0:	mov	r3, #6
   14be4:	str	r3, [sp]
   14be8:	ldr	r5, [r0, #48]	; 0x30
   14bec:	mov	r3, #0
   14bf0:	mov	r2, #16
   14bf4:	add	r1, r0, #100	; 0x64
   14bf8:	ldr	r0, [r0, #40]	; 0x28
   14bfc:	blx	r5
   14c00:	cmp	r0, #0
   14c04:	beq	14b84 <flatcc_builder_create_cached_vtable@@Base+0x84>
   14c08:	ldr	r3, [pc, #608]	; 14e70 <flatcc_builder_create_cached_vtable@@Base+0x370>
   14c0c:	mov	r2, #308	; 0x134
   14c10:	ldr	r1, [pc, #592]	; 14e68 <flatcc_builder_create_cached_vtable@@Base+0x368>
   14c14:	ldr	r0, [pc, #600]	; 14e74 <flatcc_builder_create_cached_vtable@@Base+0x374>
   14c18:	bl	1206c <__assert_fail@plt>
   14c1c:	mov	r3, r2
   14c20:	lsl	r2, r3, #1
   14c24:	cmp	r2, r1
   14c28:	bls	14c1c <flatcc_builder_create_cached_vtable@@Base+0x11c>
   14c2c:	lsr	r3, r3, #2
   14c30:	cmp	r3, #1
   14c34:	bls	14c48 <flatcc_builder_create_cached_vtable@@Base+0x148>
   14c38:	mov	r2, #1
   14c3c:	add	r4, r4, #1
   14c40:	cmp	r3, r2, lsl r4
   14c44:	bhi	14c3c <flatcc_builder_create_cached_vtable@@Base+0x13c>
   14c48:	str	r4, [r8, #116]	; 0x74
   14c4c:	b	14b24 <flatcc_builder_create_cached_vtable@@Base+0x24>
   14c50:	add	r9, r4, #12
   14c54:	ldr	r5, [r4, #12]
   14c58:	cmp	r5, #0
   14c5c:	beq	14ce0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   14c60:	add	r4, sl, r5
   14c64:	ldr	r3, [r4, #8]
   14c68:	add	r1, r6, r3
   14c6c:	ldrh	r3, [r6, r3]
   14c70:	cmp	r3, r7
   14c74:	bne	14c50 <flatcc_builder_create_cached_vtable@@Base+0x150>
   14c78:	mov	r2, r7
   14c7c:	ldr	r0, [sp, #8]
   14c80:	bl	11fc4 <memcmp@plt>
   14c84:	cmp	r0, #0
   14c88:	bne	14c50 <flatcc_builder_create_cached_vtable@@Base+0x150>
   14c8c:	ldr	r2, [r4, #4]
   14c90:	ldr	r3, [r8, #152]	; 0x98
   14c94:	cmp	r2, r3
   14c98:	addne	r9, r4, #12
   14c9c:	ldrne	r5, [r4, #12]
   14ca0:	strne	r4, [sp, #12]
   14ca4:	bne	14c58 <flatcc_builder_create_cached_vtable@@Base+0x158>
   14ca8:	ldr	r3, [sp, #20]
   14cac:	cmp	r3, r9
   14cb0:	beq	14ccc <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   14cb4:	ldr	r3, [r4, #12]
   14cb8:	str	r3, [r9]
   14cbc:	ldr	r2, [sp, #16]
   14cc0:	ldr	r3, [r2, fp, lsl #2]
   14cc4:	str	r3, [r4, #12]
   14cc8:	str	r5, [r2, fp, lsl #2]
   14ccc:	ldr	r0, [r4]
   14cd0:	add	sp, sp, #28
   14cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd8:	mov	r3, #0
   14cdc:	str	r3, [sp, #12]
   14ce0:	ldr	r4, [r8, #124]	; 0x7c
   14ce4:	add	r2, r4, #16
   14ce8:	ldr	r3, [r8, #104]	; 0x68
   14cec:	cmp	r2, r3
   14cf0:	bhi	14d5c <flatcc_builder_create_cached_vtable@@Base+0x25c>
   14cf4:	ldr	r5, [r8, #100]	; 0x64
   14cf8:	adds	r6, r5, r4
   14cfc:	beq	14e40 <flatcc_builder_create_cached_vtable@@Base+0x340>
   14d00:	ldr	r3, [r8, #124]	; 0x7c
   14d04:	add	r2, r3, #16
   14d08:	str	r2, [r8, #124]	; 0x7c
   14d0c:	ldr	r2, [r8, #152]	; 0x98
   14d10:	str	r2, [r6, #4]
   14d14:	ldr	r1, [sp, #16]
   14d18:	ldr	r2, [r1, fp, lsl #2]
   14d1c:	str	r2, [r6, #12]
   14d20:	str	r3, [r1, fp, lsl #2]
   14d24:	mov	r2, r7
   14d28:	ldr	r1, [sp, #8]
   14d2c:	mov	r0, r8
   14d30:	bl	1498c <flatcc_builder_create_vtable@@Base>
   14d34:	str	r0, [r5, r4]
   14d38:	cmp	r0, #0
   14d3c:	beq	14e48 <flatcc_builder_create_cached_vtable@@Base+0x348>
   14d40:	ldr	r3, [sp, #12]
   14d44:	cmp	r3, #0
   14d48:	beq	14d94 <flatcc_builder_create_cached_vtable@@Base+0x294>
   14d4c:	ldr	r3, [r3, #8]
   14d50:	str	r3, [r6, #8]
   14d54:	ldr	r0, [r5, r4]
   14d58:	b	14cd0 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14d5c:	mov	r3, #6
   14d60:	str	r3, [sp]
   14d64:	ldr	r5, [r8, #48]	; 0x30
   14d68:	mov	r3, #0
   14d6c:	add	r1, r8, #100	; 0x64
   14d70:	ldr	r0, [r8, #40]	; 0x28
   14d74:	blx	r5
   14d78:	cmp	r0, #0
   14d7c:	beq	14cf4 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   14d80:	ldr	r3, [pc, #232]	; 14e70 <flatcc_builder_create_cached_vtable@@Base+0x370>
   14d84:	mov	r2, #308	; 0x134
   14d88:	ldr	r1, [pc, #216]	; 14e68 <flatcc_builder_create_cached_vtable@@Base+0x368>
   14d8c:	ldr	r0, [pc, #224]	; 14e74 <flatcc_builder_create_cached_vtable@@Base+0x374>
   14d90:	bl	1206c <__assert_fail@plt>
   14d94:	ldr	r2, [r8, #172]	; 0xac
   14d98:	cmp	r2, #0
   14d9c:	beq	14db0 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   14da0:	ldr	r3, [r8, #120]	; 0x78
   14da4:	add	r3, r7, r3
   14da8:	cmp	r2, r3
   14dac:	bcc	14df4 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   14db0:	ldr	r9, [r8, #120]	; 0x78
   14db4:	add	r2, r9, r7
   14db8:	ldr	r3, [r8, #72]	; 0x48
   14dbc:	cmp	r2, r3
   14dc0:	bhi	14e00 <flatcc_builder_create_cached_vtable@@Base+0x300>
   14dc4:	ldr	r3, [r8, #68]	; 0x44
   14dc8:	adds	r0, r3, r9
   14dcc:	beq	14e50 <flatcc_builder_create_cached_vtable@@Base+0x350>
   14dd0:	ldr	r3, [r8, #120]	; 0x78
   14dd4:	str	r3, [r6, #8]
   14dd8:	ldr	r3, [r8, #120]	; 0x78
   14ddc:	add	r3, r3, r7
   14de0:	str	r3, [r8, #120]	; 0x78
   14de4:	mov	r2, r7
   14de8:	ldr	r1, [sp, #8]
   14dec:	bl	11fb8 <memcpy@plt>
   14df0:	b	14d54 <flatcc_builder_create_cached_vtable@@Base+0x254>
   14df4:	mov	r0, r8
   14df8:	bl	12fc0 <flatcc_builder_flush_vtable_cache@@Base>
   14dfc:	b	14d54 <flatcc_builder_create_cached_vtable@@Base+0x254>
   14e00:	mov	r3, #2
   14e04:	str	r3, [sp]
   14e08:	ldr	sl, [r8, #48]	; 0x30
   14e0c:	mov	r3, #0
   14e10:	add	r1, r8, #68	; 0x44
   14e14:	ldr	r0, [r8, #40]	; 0x28
   14e18:	blx	sl
   14e1c:	cmp	r0, #0
   14e20:	beq	14dc4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   14e24:	ldr	r3, [pc, #68]	; 14e70 <flatcc_builder_create_cached_vtable@@Base+0x370>
   14e28:	mov	r2, #308	; 0x134
   14e2c:	ldr	r1, [pc, #52]	; 14e68 <flatcc_builder_create_cached_vtable@@Base+0x368>
   14e30:	ldr	r0, [pc, #60]	; 14e74 <flatcc_builder_create_cached_vtable@@Base+0x374>
   14e34:	bl	1206c <__assert_fail@plt>
   14e38:	mov	r0, #0
   14e3c:	b	14cd0 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14e40:	mov	r0, #0
   14e44:	b	14cd0 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14e48:	mov	r0, #0
   14e4c:	b	14cd0 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14e50:	mvn	r0, #0
   14e54:	b	14cd0 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14e58:	mov	r0, #0
   14e5c:	b	14cd0 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   14e60:	andeq	r7, r1, r4, ror r9
   14e64:	andeq	r0, r0, r6, asr r1
   14e68:	andeq	r7, r1, r4, lsr ip
   14e6c:	andeq	r7, r1, r8, asr #29
   14e70:	andeq	r7, r1, r0, lsl #14
   14e74:	andeq	r7, r1, r8, lsl #25

00014e78 <flatcc_builder_create_table@@Base>:
   14e78:	push	{r4, r5, r6, r7, lr}
   14e7c:	sub	sp, sp, #92	; 0x5c
   14e80:	ldr	r4, [sp, #116]	; 0x74
   14e84:	ldr	ip, [sp, #120]	; 0x78
   14e88:	cmp	r4, #0
   14e8c:	blt	14fcc <flatcc_builder_create_table@@Base+0x154>
   14e90:	mov	r5, r0
   14e94:	tst	ip, #1
   14e98:	beq	14fe0 <flatcc_builder_create_table@@Base+0x168>
   14e9c:	cmp	r3, #4
   14ea0:	movcs	r0, r3
   14ea4:	movcc	r0, #4
   14ea8:	ldrh	r3, [r5, #128]	; 0x80
   14eac:	cmp	r3, r0
   14eb0:	strhcc	r0, [r5, #128]	; 0x80
   14eb4:	ldr	lr, [r5, #136]	; 0x88
   14eb8:	sub	r7, lr, r2
   14ebc:	sub	r0, r0, #1
   14ec0:	and	r7, r7, r0
   14ec4:	mvn	r3, #3
   14ec8:	sub	r3, r3, r2
   14ecc:	add	r3, r3, lr
   14ed0:	sub	r3, r3, r7
   14ed4:	sub	ip, ip, #1
   14ed8:	sub	ip, r3, ip
   14edc:	str	ip, [sp, #84]	; 0x54
   14ee0:	cmp	r4, #0
   14ee4:	ble	14f14 <flatcc_builder_create_table@@Base+0x9c>
   14ee8:	ldr	ip, [sp, #112]	; 0x70
   14eec:	add	r4, ip, r4, lsl #1
   14ef0:	mvn	r6, #3
   14ef4:	sub	r6, r6, r3
   14ef8:	ldrh	r3, [ip], #2
   14efc:	sub	lr, r6, r3
   14f00:	ldr	r0, [r1, r3]
   14f04:	add	r0, r0, lr
   14f08:	str	r0, [r1, r3]
   14f0c:	cmp	ip, r4
   14f10:	bne	14ef8 <flatcc_builder_create_table@@Base+0x80>
   14f14:	mov	r3, #4
   14f18:	str	r3, [sp, #12]
   14f1c:	add	r0, sp, #84	; 0x54
   14f20:	str	r0, [sp, #20]
   14f24:	str	r3, [sp, #24]
   14f28:	mov	r3, #1
   14f2c:	str	r3, [sp, #16]
   14f30:	cmp	r2, #0
   14f34:	beq	14f50 <flatcc_builder_create_table@@Base+0xd8>
   14f38:	add	r3, r2, #4
   14f3c:	str	r3, [sp, #12]
   14f40:	str	r1, [sp, #28]
   14f44:	str	r2, [sp, #32]
   14f48:	mov	r3, #2
   14f4c:	str	r3, [sp, #16]
   14f50:	cmp	r7, #0
   14f54:	beq	14f84 <flatcc_builder_create_table@@Base+0x10c>
   14f58:	ldr	r3, [sp, #12]
   14f5c:	add	r3, r3, r7
   14f60:	str	r3, [sp, #12]
   14f64:	ldr	r3, [sp, #16]
   14f68:	add	r3, r3, #1
   14f6c:	add	r2, sp, #88	; 0x58
   14f70:	add	r2, r2, r3, lsl #3
   14f74:	ldr	r1, [pc, #160]	; 1501c <flatcc_builder_create_table@@Base+0x1a4>
   14f78:	str	r1, [r2, #-76]	; 0xffffffb4
   14f7c:	str	r7, [r2, #-72]	; 0xffffffb8
   14f80:	str	r3, [sp, #16]
   14f84:	ldr	r2, [r5, #136]	; 0x88
   14f88:	ldr	r3, [sp, #12]
   14f8c:	sub	r4, r2, r3
   14f90:	cmp	r2, r4
   14f94:	ble	14ff4 <flatcc_builder_create_table@@Base+0x17c>
   14f98:	str	r3, [sp]
   14f9c:	ldr	r6, [r5, #44]	; 0x2c
   14fa0:	mov	r3, r4
   14fa4:	ldr	r2, [sp, #16]
   14fa8:	add	r1, sp, #20
   14fac:	ldr	r0, [r5, #36]	; 0x24
   14fb0:	blx	r6
   14fb4:	cmp	r0, #0
   14fb8:	bne	15008 <flatcc_builder_create_table@@Base+0x190>
   14fbc:	str	r4, [r5, #136]	; 0x88
   14fc0:	mov	r0, r4
   14fc4:	add	sp, sp, #92	; 0x5c
   14fc8:	pop	{r4, r5, r6, r7, pc}
   14fcc:	ldr	r3, [pc, #76]	; 15020 <flatcc_builder_create_table@@Base+0x1a8>
   14fd0:	ldr	r2, [pc, #76]	; 15024 <flatcc_builder_create_table@@Base+0x1ac>
   14fd4:	ldr	r1, [pc, #76]	; 15028 <flatcc_builder_create_table@@Base+0x1b0>
   14fd8:	ldr	r0, [pc, #76]	; 1502c <flatcc_builder_create_table@@Base+0x1b4>
   14fdc:	bl	1206c <__assert_fail@plt>
   14fe0:	ldr	r3, [pc, #56]	; 15020 <flatcc_builder_create_table@@Base+0x1a8>
   14fe4:	ldr	r2, [pc, #68]	; 15030 <flatcc_builder_create_table@@Base+0x1b8>
   14fe8:	ldr	r1, [pc, #56]	; 15028 <flatcc_builder_create_table@@Base+0x1b0>
   14fec:	ldr	r0, [pc, #64]	; 15034 <flatcc_builder_create_table@@Base+0x1bc>
   14ff0:	bl	1206c <__assert_fail@plt>
   14ff4:	ldr	r3, [pc, #60]	; 15038 <flatcc_builder_create_table@@Base+0x1c0>
   14ff8:	ldr	r2, [pc, #60]	; 1503c <flatcc_builder_create_table@@Base+0x1c4>
   14ffc:	ldr	r1, [pc, #36]	; 15028 <flatcc_builder_create_table@@Base+0x1b0>
   15000:	ldr	r0, [pc, #56]	; 15040 <flatcc_builder_create_table@@Base+0x1c8>
   15004:	bl	1206c <__assert_fail@plt>
   15008:	ldr	r3, [pc, #40]	; 15038 <flatcc_builder_create_table@@Base+0x1c0>
   1500c:	ldr	r2, [pc, #48]	; 15044 <flatcc_builder_create_table@@Base+0x1cc>
   15010:	ldr	r1, [pc, #16]	; 15028 <flatcc_builder_create_table@@Base+0x1b0>
   15014:	ldr	r0, [pc, #36]	; 15040 <flatcc_builder_create_table@@Base+0x1c8>
   15018:	bl	1206c <__assert_fail@plt>
   1501c:	andeq	r7, r1, r4, ror #9
   15020:	andeq	r7, r1, r0, lsl #19
   15024:	ldrdeq	r0, [r0], -r5
   15028:	andeq	r7, r1, r4, lsr ip
   1502c:	ldrdeq	r7, [r1], -r8
   15030:	ldrdeq	r0, [r0], -fp
   15034:	andeq	r7, r1, ip, ror #29
   15038:	andeq	r7, r1, r0, lsr r7
   1503c:	andeq	r0, r0, r7, lsl #5
   15040:	andeq	r7, r1, r8, lsl #25
   15044:	andeq	r0, r0, fp, lsl #5

00015048 <flatcc_builder_check_required_field@@Base>:
   15048:	ldr	r3, [r0, #32]
   1504c:	ldrh	r3, [r3, #14]
   15050:	cmp	r3, #3
   15054:	bne	15080 <flatcc_builder_check_required_field@@Base+0x38>
   15058:	ldrh	r3, [r0, #8]
   1505c:	cmp	r3, r1
   15060:	movls	r0, #0
   15064:	bls	1507c <flatcc_builder_check_required_field@@Base+0x34>
   15068:	ldr	r3, [r0, #4]
   1506c:	lsl	r1, r1, #1
   15070:	ldrh	r0, [r3, r1]
   15074:	adds	r0, r0, #0
   15078:	movne	r0, #1
   1507c:	bx	lr
   15080:	push	{r4, lr}
   15084:	ldr	r3, [pc, #12]	; 15098 <flatcc_builder_check_required_field@@Base+0x50>
   15088:	ldr	r2, [pc, #12]	; 1509c <flatcc_builder_check_required_field@@Base+0x54>
   1508c:	ldr	r1, [pc, #12]	; 150a0 <flatcc_builder_check_required_field@@Base+0x58>
   15090:	ldr	r0, [pc, #12]	; 150a4 <flatcc_builder_check_required_field@@Base+0x5c>
   15094:	bl	1206c <__assert_fail@plt>
   15098:	muleq	r1, ip, r9
   1509c:	strdeq	r0, [r0], -r8
   150a0:	andeq	r7, r1, r4, lsr ip
   150a4:	strdeq	r7, [r1], -r8

000150a8 <flatcc_builder_check_union_field@@Base>:
   150a8:	ldr	r3, [r0, #32]
   150ac:	ldrh	r3, [r3, #14]
   150b0:	cmp	r3, #3
   150b4:	bne	15110 <flatcc_builder_check_union_field@@Base+0x68>
   150b8:	cmp	r1, #0
   150bc:	moveq	r0, #0
   150c0:	beq	15138 <flatcc_builder_check_union_field@@Base+0x90>
   150c4:	ldrh	r3, [r0, #8]
   150c8:	cmp	r3, r1
   150cc:	movls	r0, #0
   150d0:	bls	15138 <flatcc_builder_check_union_field@@Base+0x90>
   150d4:	ldr	r3, [r0, #4]
   150d8:	sub	r1, r1, #-2147483647	; 0x80000001
   150dc:	lsl	r1, r1, #1
   150e0:	ldrh	r2, [r3, r1]
   150e4:	cmp	r2, #0
   150e8:	beq	15128 <flatcc_builder_check_union_field@@Base+0x80>
   150ec:	ldr	r0, [r0, #16]
   150f0:	ldrb	r2, [r0, r2]
   150f4:	cmp	r2, #0
   150f8:	bne	1513c <flatcc_builder_check_union_field@@Base+0x94>
   150fc:	add	r1, r3, r1
   15100:	ldrh	r0, [r1, #2]
   15104:	clz	r0, r0
   15108:	lsr	r0, r0, #5
   1510c:	b	15138 <flatcc_builder_check_union_field@@Base+0x90>
   15110:	push	{r4, lr}
   15114:	ldr	r3, [pc, #52]	; 15150 <flatcc_builder_check_union_field@@Base+0xa8>
   15118:	ldr	r2, [pc, #52]	; 15154 <flatcc_builder_check_union_field@@Base+0xac>
   1511c:	ldr	r1, [pc, #52]	; 15158 <flatcc_builder_check_union_field@@Base+0xb0>
   15120:	ldr	r0, [pc, #52]	; 1515c <flatcc_builder_check_union_field@@Base+0xb4>
   15124:	bl	1206c <__assert_fail@plt>
   15128:	add	r1, r3, r1
   1512c:	ldrh	r0, [r1, #2]
   15130:	clz	r0, r0
   15134:	lsr	r0, r0, #5
   15138:	bx	lr
   1513c:	add	r1, r3, r1
   15140:	ldrh	r0, [r1, #2]
   15144:	adds	r0, r0, #0
   15148:	movne	r0, #1
   1514c:	b	15138 <flatcc_builder_check_union_field@@Base+0x90>
   15150:	andeq	r7, r1, r0, asr #19
   15154:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15158:	andeq	r7, r1, r4, lsr ip
   1515c:	strdeq	r7, [r1], -r8

00015160 <flatcc_builder_check_required@@Base>:
   15160:	ldr	r3, [r0, #32]
   15164:	ldrh	r3, [r3, #14]
   15168:	cmp	r3, #3
   1516c:	bne	151cc <flatcc_builder_check_required@@Base+0x6c>
   15170:	ldrh	r3, [r0, #8]
   15174:	cmp	r3, r2
   15178:	movlt	r0, #0
   1517c:	blt	151e8 <flatcc_builder_check_required@@Base+0x88>
   15180:	cmp	r2, #0
   15184:	ble	151ec <flatcc_builder_check_required@@Base+0x8c>
   15188:	ldr	ip, [r0, #4]
   1518c:	ldrh	r3, [r1]
   15190:	lsl	r3, r3, #1
   15194:	ldrh	r3, [ip, r3]
   15198:	cmp	r3, #0
   1519c:	beq	151f4 <flatcc_builder_check_required@@Base+0x94>
   151a0:	add	r0, r1, #2
   151a4:	add	r2, r1, r2, lsl #1
   151a8:	cmp	r0, r2
   151ac:	beq	151e4 <flatcc_builder_check_required@@Base+0x84>
   151b0:	ldrh	r3, [r0], #2
   151b4:	lsl	r3, r3, #1
   151b8:	ldrh	r3, [ip, r3]
   151bc:	cmp	r3, #0
   151c0:	bne	151a8 <flatcc_builder_check_required@@Base+0x48>
   151c4:	mov	r0, #0
   151c8:	b	151e8 <flatcc_builder_check_required@@Base+0x88>
   151cc:	push	{r4, lr}
   151d0:	ldr	r3, [pc, #36]	; 151fc <flatcc_builder_check_required@@Base+0x9c>
   151d4:	ldr	r2, [pc, #36]	; 15200 <flatcc_builder_check_required@@Base+0xa0>
   151d8:	ldr	r1, [pc, #36]	; 15204 <flatcc_builder_check_required@@Base+0xa4>
   151dc:	ldr	r0, [pc, #36]	; 15208 <flatcc_builder_check_required@@Base+0xa8>
   151e0:	bl	1206c <__assert_fail@plt>
   151e4:	mov	r0, #1
   151e8:	bx	lr
   151ec:	mov	r0, #1
   151f0:	b	151e8 <flatcc_builder_check_required@@Base+0x88>
   151f4:	mov	r0, #0
   151f8:	b	151e8 <flatcc_builder_check_required@@Base+0x88>
   151fc:	andeq	r7, r1, r4, ror #19
   15200:	andeq	r0, r0, r1, lsl r5
   15204:	andeq	r7, r1, r4, lsr ip
   15208:	strdeq	r7, [r1], -r8

0001520c <flatcc_builder_end_table@@Base>:
   1520c:	push	{r4, r5, r6, r7, lr}
   15210:	sub	sp, sp, #20
   15214:	ldr	r3, [r0, #32]
   15218:	ldrh	r3, [r3, #14]
   1521c:	cmp	r3, #3
   15220:	bne	15290 <flatcc_builder_end_table@@Base+0x84>
   15224:	mov	r4, r0
   15228:	ldr	r1, [r0, #4]
   1522c:	sub	r6, r1, #4
   15230:	ldrh	r5, [r0, #8]
   15234:	add	r5, r5, #2
   15238:	lsl	r5, r5, #1
   1523c:	uxth	r5, r5
   15240:	strh	r5, [r1, #-4]
   15244:	ldr	r3, [r0, #20]
   15248:	add	r3, r3, #4
   1524c:	uxth	r2, r3
   15250:	strh	r2, [r1, #-2]
   15254:	ldr	r3, [r0, #12]
   15258:	eor	r3, r3, r5
   1525c:	ldr	r1, [pc, #328]	; 153ac <flatcc_builder_end_table@@Base+0x1a0>
   15260:	mul	r3, r1, r3
   15264:	eor	r3, r3, r2
   15268:	mul	r3, r1, r3
   1526c:	str	r3, [r0, #12]
   15270:	mov	r2, r5
   15274:	mov	r1, r6
   15278:	bl	14b00 <flatcc_builder_create_cached_vtable@@Base>
   1527c:	subs	r7, r0, #0
   15280:	bne	152a4 <flatcc_builder_end_table@@Base+0x98>
   15284:	mov	r0, r7
   15288:	add	sp, sp, #20
   1528c:	pop	{r4, r5, r6, r7, pc}
   15290:	ldr	r3, [pc, #280]	; 153b0 <flatcc_builder_end_table@@Base+0x1a4>
   15294:	ldr	r2, [pc, #280]	; 153b4 <flatcc_builder_end_table@@Base+0x1a8>
   15298:	ldr	r1, [pc, #280]	; 153b8 <flatcc_builder_end_table@@Base+0x1ac>
   1529c:	ldr	r0, [pc, #280]	; 153bc <flatcc_builder_end_table@@Base+0x1b0>
   152a0:	bl	1206c <__assert_fail@plt>
   152a4:	mov	r2, r5
   152a8:	mov	r1, #0
   152ac:	mov	r0, r6
   152b0:	bl	1203c <memset@plt>
   152b4:	ldr	r3, [r4, #32]
   152b8:	ldr	r1, [r4, #76]	; 0x4c
   152bc:	ldr	r3, [r3, #20]
   152c0:	add	r1, r1, r3
   152c4:	ldrh	r3, [r4, #130]	; 0x82
   152c8:	str	r7, [sp, #8]
   152cc:	ldr	r2, [r4]
   152d0:	sub	r2, r2, r1
   152d4:	asr	r2, r2, #1
   152d8:	str	r2, [sp, #4]
   152dc:	str	r1, [sp]
   152e0:	ldr	r2, [r4, #20]
   152e4:	ldr	r1, [r4, #16]
   152e8:	mov	r0, r4
   152ec:	bl	14e78 <flatcc_builder_create_table@@Base>
   152f0:	subs	r7, r0, #0
   152f4:	beq	15284 <flatcc_builder_end_table@@Base+0x78>
   152f8:	ldr	r3, [r4, #32]
   152fc:	ldr	r2, [r3, #24]
   15300:	str	r2, [r4, #12]
   15304:	ldrh	r2, [r3, #28]
   15308:	strh	r2, [r4, #8]
   1530c:	ldr	r2, [r4, #52]	; 0x34
   15310:	ldr	r1, [r3, #16]
   15314:	add	r2, r2, r1
   15318:	str	r2, [r4, #4]
   1531c:	ldr	r2, [r4, #76]	; 0x4c
   15320:	ldr	r3, [r3, #20]
   15324:	add	r3, r2, r3
   15328:	str	r3, [r4]
   1532c:	ldr	r2, [r4, #20]
   15330:	mov	r1, #0
   15334:	ldr	r0, [r4, #16]
   15338:	bl	1203c <memset@plt>
   1533c:	ldr	r2, [r4, #32]
   15340:	ldr	r3, [r2, #8]
   15344:	str	r3, [r4, #20]
   15348:	ldr	r0, [r2]
   1534c:	str	r0, [r4, #28]
   15350:	ldr	r1, [r2, #4]
   15354:	ldr	r3, [r4, #60]	; 0x3c
   15358:	add	r3, r3, r0
   1535c:	str	r3, [r4, #16]
   15360:	ldr	r3, [r4, #64]	; 0x40
   15364:	sub	r3, r3, r0
   15368:	cmp	r3, r1
   1536c:	movcs	r3, r1
   15370:	str	r3, [r4, #24]
   15374:	str	r1, [r2, #4]
   15378:	ldrh	r3, [r4, #130]	; 0x82
   1537c:	ldrh	r2, [r4, #128]	; 0x80
   15380:	cmp	r2, r3
   15384:	strhcc	r3, [r4, #128]	; 0x80
   15388:	ldr	r3, [r4, #32]
   1538c:	ldrh	r2, [r3, #12]
   15390:	strh	r2, [r4, #130]	; 0x82
   15394:	sub	r3, r3, #36	; 0x24
   15398:	str	r3, [r4, #32]
   1539c:	ldr	r3, [r4, #156]	; 0x9c
   153a0:	sub	r3, r3, #1
   153a4:	str	r3, [r4, #156]	; 0x9c
   153a8:	b	15284 <flatcc_builder_end_table@@Base+0x78>
   153ac:			; <UNDEFINED> instruction: 0x9e3779b1
   153b0:	andeq	r7, r1, r4, lsl #20
   153b4:	andeq	r0, r0, r5, lsr #10
   153b8:	andeq	r7, r1, r4, lsr ip
   153bc:	strdeq	r7, [r1], -r8

000153c0 <flatcc_builder_create_vector@@Base>:
   153c0:	push	{r4, r5, r6, lr}
   153c4:	sub	sp, sp, #88	; 0x58
   153c8:	mov	r4, r0
   153cc:	ldrh	r0, [sp, #104]	; 0x68
   153d0:	ldr	ip, [sp, #108]	; 0x6c
   153d4:	cmp	r2, ip
   153d8:	bhi	154bc <flatcc_builder_create_vector@@Base+0xfc>
   153dc:	cmp	r0, #4
   153e0:	movcc	r0, #4
   153e4:	ldrh	ip, [r4, #128]	; 0x80
   153e8:	cmp	ip, r0
   153ec:	strhcc	r0, [r4, #128]	; 0x80
   153f0:	mul	r3, r3, r2
   153f4:	str	r2, [sp, #84]	; 0x54
   153f8:	ldr	r2, [r4, #136]	; 0x88
   153fc:	sub	ip, r2, r3
   15400:	sub	r0, r0, #1
   15404:	and	r0, r0, ip
   15408:	mov	ip, #4
   1540c:	str	ip, [sp, #12]
   15410:	add	lr, sp, #84	; 0x54
   15414:	str	lr, [sp, #20]
   15418:	str	ip, [sp, #24]
   1541c:	mov	ip, #1
   15420:	str	ip, [sp, #16]
   15424:	cmp	r3, #0
   15428:	beq	15444 <flatcc_builder_create_vector@@Base+0x84>
   1542c:	add	ip, r3, #4
   15430:	str	ip, [sp, #12]
   15434:	str	r1, [sp, #28]
   15438:	str	r3, [sp, #32]
   1543c:	mov	r3, #2
   15440:	str	r3, [sp, #16]
   15444:	cmp	r0, #0
   15448:	beq	15478 <flatcc_builder_create_vector@@Base+0xb8>
   1544c:	ldr	r3, [sp, #12]
   15450:	add	r3, r3, r0
   15454:	str	r3, [sp, #12]
   15458:	ldr	r3, [sp, #16]
   1545c:	add	r3, r3, #1
   15460:	add	r1, sp, #88	; 0x58
   15464:	add	r1, r1, r3, lsl #3
   15468:	ldr	ip, [pc, #136]	; 154f8 <flatcc_builder_create_vector@@Base+0x138>
   1546c:	str	ip, [r1, #-76]	; 0xffffffb4
   15470:	str	r0, [r1, #-72]	; 0xffffffb8
   15474:	str	r3, [sp, #16]
   15478:	ldr	r3, [sp, #12]
   1547c:	sub	r5, r2, r3
   15480:	cmp	r2, r5
   15484:	ble	154d0 <flatcc_builder_create_vector@@Base+0x110>
   15488:	str	r3, [sp]
   1548c:	ldr	r6, [r4, #44]	; 0x2c
   15490:	mov	r3, r5
   15494:	ldr	r2, [sp, #16]
   15498:	add	r1, sp, #20
   1549c:	ldr	r0, [r4, #36]	; 0x24
   154a0:	blx	r6
   154a4:	cmp	r0, #0
   154a8:	bne	154e4 <flatcc_builder_create_vector@@Base+0x124>
   154ac:	str	r5, [r4, #136]	; 0x88
   154b0:	mov	r0, r5
   154b4:	add	sp, sp, #88	; 0x58
   154b8:	pop	{r4, r5, r6, pc}
   154bc:	ldr	r3, [pc, #56]	; 154fc <flatcc_builder_create_vector@@Base+0x13c>
   154c0:	ldr	r2, [pc, #56]	; 15500 <flatcc_builder_create_vector@@Base+0x140>
   154c4:	ldr	r1, [pc, #56]	; 15504 <flatcc_builder_create_vector@@Base+0x144>
   154c8:	ldr	r0, [pc, #56]	; 15508 <flatcc_builder_create_vector@@Base+0x148>
   154cc:	bl	1206c <__assert_fail@plt>
   154d0:	ldr	r3, [pc, #52]	; 1550c <flatcc_builder_create_vector@@Base+0x14c>
   154d4:	ldr	r2, [pc, #52]	; 15510 <flatcc_builder_create_vector@@Base+0x150>
   154d8:	ldr	r1, [pc, #36]	; 15504 <flatcc_builder_create_vector@@Base+0x144>
   154dc:	ldr	r0, [pc, #48]	; 15514 <flatcc_builder_create_vector@@Base+0x154>
   154e0:	bl	1206c <__assert_fail@plt>
   154e4:	ldr	r3, [pc, #32]	; 1550c <flatcc_builder_create_vector@@Base+0x14c>
   154e8:	ldr	r2, [pc, #40]	; 15518 <flatcc_builder_create_vector@@Base+0x158>
   154ec:	ldr	r1, [pc, #16]	; 15504 <flatcc_builder_create_vector@@Base+0x144>
   154f0:	ldr	r0, [pc, #28]	; 15514 <flatcc_builder_create_vector@@Base+0x154>
   154f4:	bl	1206c <__assert_fail@plt>
   154f8:	andeq	r7, r1, r4, ror #9
   154fc:	andeq	r7, r1, r0, lsr #20
   15500:	andeq	r0, r0, r5, asr r5
   15504:	andeq	r7, r1, r4, lsr ip
   15508:	andeq	r7, r1, r4, lsr #30
   1550c:	andeq	r7, r1, r0, lsr r7
   15510:	andeq	r0, r0, r7, lsl #5
   15514:	andeq	r7, r1, r8, lsl #25
   15518:	andeq	r0, r0, fp, lsl #5

0001551c <flatcc_builder_end_vector@@Base>:
   1551c:	push	{r4, r5, lr}
   15520:	sub	sp, sp, #12
   15524:	ldr	r1, [r0, #32]
   15528:	ldrh	r3, [r1, #14]
   1552c:	cmp	r3, #4
   15530:	bne	1556c <flatcc_builder_end_vector@@Base+0x50>
   15534:	mov	r4, r0
   15538:	ldr	r3, [r1, #16]
   1553c:	ldr	r2, [r1, #20]
   15540:	ldr	r1, [r1, #24]
   15544:	str	r1, [sp, #4]
   15548:	ldrh	r1, [r0, #130]	; 0x82
   1554c:	str	r1, [sp]
   15550:	ldr	r1, [r0, #16]
   15554:	bl	153c0 <flatcc_builder_create_vector@@Base>
   15558:	subs	r5, r0, #0
   1555c:	bne	15580 <flatcc_builder_end_vector@@Base+0x64>
   15560:	mov	r0, r5
   15564:	add	sp, sp, #12
   15568:	pop	{r4, r5, pc}
   1556c:	ldr	r3, [pc, #140]	; 15600 <flatcc_builder_end_vector@@Base+0xe4>
   15570:	ldr	r2, [pc, #140]	; 15604 <flatcc_builder_end_vector@@Base+0xe8>
   15574:	ldr	r1, [pc, #140]	; 15608 <flatcc_builder_end_vector@@Base+0xec>
   15578:	ldr	r0, [pc, #140]	; 1560c <flatcc_builder_end_vector@@Base+0xf0>
   1557c:	bl	1206c <__assert_fail@plt>
   15580:	ldr	r2, [r4, #20]
   15584:	mov	r1, #0
   15588:	ldr	r0, [r4, #16]
   1558c:	bl	1203c <memset@plt>
   15590:	ldr	r2, [r4, #32]
   15594:	ldr	r3, [r2, #8]
   15598:	str	r3, [r4, #20]
   1559c:	ldr	r0, [r2]
   155a0:	str	r0, [r4, #28]
   155a4:	ldr	r1, [r2, #4]
   155a8:	ldr	r3, [r4, #60]	; 0x3c
   155ac:	add	r3, r3, r0
   155b0:	str	r3, [r4, #16]
   155b4:	ldr	r3, [r4, #64]	; 0x40
   155b8:	sub	r3, r3, r0
   155bc:	cmp	r3, r1
   155c0:	movcs	r3, r1
   155c4:	str	r3, [r4, #24]
   155c8:	str	r1, [r2, #4]
   155cc:	ldrh	r3, [r4, #130]	; 0x82
   155d0:	ldrh	r2, [r4, #128]	; 0x80
   155d4:	cmp	r2, r3
   155d8:	strhcc	r3, [r4, #128]	; 0x80
   155dc:	ldr	r3, [r4, #32]
   155e0:	ldrh	r2, [r3, #12]
   155e4:	strh	r2, [r4, #130]	; 0x82
   155e8:	sub	r3, r3, #36	; 0x24
   155ec:	str	r3, [r4, #32]
   155f0:	ldr	r3, [r4, #156]	; 0x9c
   155f4:	sub	r3, r3, #1
   155f8:	str	r3, [r4, #156]	; 0x9c
   155fc:	b	15560 <flatcc_builder_end_vector@@Base+0x44>
   15600:	andeq	r7, r1, r0, asr #20
   15604:	andeq	r0, r0, r8, ror r5
   15608:	andeq	r7, r1, r4, lsr ip
   1560c:	andeq	r7, r1, ip, ror #26

00015610 <flatcc_builder_vector_count@@Base>:
   15610:	ldr	r3, [r0, #32]
   15614:	ldr	r0, [r3, #20]
   15618:	bx	lr

0001561c <flatcc_builder_vector_edit@@Base>:
   1561c:	ldr	r0, [r0, #16]
   15620:	bx	lr

00015624 <flatcc_builder_create_offset_vector_direct@@Base>:
   15624:	push	{r4, lr}
   15628:	mov	r3, #0
   1562c:	bl	12dc8 <flatcc_builder_default_alloc@@Base+0x378>
   15630:	pop	{r4, pc}

00015634 <flatcc_builder_end_offset_vector@@Base>:
   15634:	push	{r4, r5, r6, lr}
   15638:	ldr	r3, [r0, #32]
   1563c:	ldrh	r2, [r3, #14]
   15640:	cmp	r2, #5
   15644:	bne	15668 <flatcc_builder_end_offset_vector@@Base+0x34>
   15648:	mov	r4, r0
   1564c:	ldr	r2, [r3, #20]
   15650:	ldr	r1, [r0, #16]
   15654:	bl	15624 <flatcc_builder_create_offset_vector_direct@@Base>
   15658:	subs	r5, r0, #0
   1565c:	bne	1567c <flatcc_builder_end_offset_vector@@Base+0x48>
   15660:	mov	r0, r5
   15664:	pop	{r4, r5, r6, pc}
   15668:	ldr	r3, [pc, #140]	; 156fc <flatcc_builder_end_offset_vector@@Base+0xc8>
   1566c:	ldr	r2, [pc, #140]	; 15700 <flatcc_builder_end_offset_vector@@Base+0xcc>
   15670:	ldr	r1, [pc, #140]	; 15704 <flatcc_builder_end_offset_vector@@Base+0xd0>
   15674:	ldr	r0, [pc, #140]	; 15708 <flatcc_builder_end_offset_vector@@Base+0xd4>
   15678:	bl	1206c <__assert_fail@plt>
   1567c:	ldr	r2, [r4, #20]
   15680:	mov	r1, #0
   15684:	ldr	r0, [r4, #16]
   15688:	bl	1203c <memset@plt>
   1568c:	ldr	r2, [r4, #32]
   15690:	ldr	r3, [r2, #8]
   15694:	str	r3, [r4, #20]
   15698:	ldr	r0, [r2]
   1569c:	str	r0, [r4, #28]
   156a0:	ldr	r1, [r2, #4]
   156a4:	ldr	r3, [r4, #60]	; 0x3c
   156a8:	add	r3, r3, r0
   156ac:	str	r3, [r4, #16]
   156b0:	ldr	r3, [r4, #64]	; 0x40
   156b4:	sub	r3, r3, r0
   156b8:	cmp	r3, r1
   156bc:	movcs	r3, r1
   156c0:	str	r3, [r4, #24]
   156c4:	str	r1, [r2, #4]
   156c8:	ldrh	r3, [r4, #130]	; 0x82
   156cc:	ldrh	r2, [r4, #128]	; 0x80
   156d0:	cmp	r2, r3
   156d4:	strhcc	r3, [r4, #128]	; 0x80
   156d8:	ldr	r3, [r4, #32]
   156dc:	ldrh	r2, [r3, #12]
   156e0:	strh	r2, [r4, #130]	; 0x82
   156e4:	sub	r3, r3, #36	; 0x24
   156e8:	str	r3, [r4, #32]
   156ec:	ldr	r3, [r4, #156]	; 0x9c
   156f0:	sub	r3, r3, #1
   156f4:	str	r3, [r4, #156]	; 0x9c
   156f8:	b	15660 <flatcc_builder_end_offset_vector@@Base+0x2c>
   156fc:	andeq	r7, r1, ip, asr sl
   15700:	andeq	r0, r0, r8, asr #11
   15704:	andeq	r7, r1, r4, lsr ip
   15708:	ldrdeq	r7, [r1], -r8

0001570c <flatcc_builder_create_offset_vector@@Base>:
   1570c:	push	{r4, r5, r6, lr}
   15710:	mov	r4, r0
   15714:	mov	r6, r1
   15718:	mov	r5, r2
   1571c:	bl	14598 <flatcc_builder_start_offset_vector@@Base>
   15720:	cmp	r0, #0
   15724:	beq	15730 <flatcc_builder_create_offset_vector@@Base+0x24>
   15728:	mov	r0, #0
   1572c:	pop	{r4, r5, r6, pc}
   15730:	mov	r1, r5
   15734:	mov	r0, r4
   15738:	bl	13f68 <flatcc_builder_extend_offset_vector@@Base>
   1573c:	cmp	r0, #0
   15740:	beq	1575c <flatcc_builder_create_offset_vector@@Base+0x50>
   15744:	lsl	r2, r5, #2
   15748:	mov	r1, r6
   1574c:	bl	11fb8 <memcpy@plt>
   15750:	mov	r0, r4
   15754:	bl	15634 <flatcc_builder_end_offset_vector@@Base>
   15758:	pop	{r4, r5, r6, pc}
   1575c:	mov	r0, #0
   15760:	pop	{r4, r5, r6, pc}

00015764 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15764:	push	{r4, r5, r6, lr}
   15768:	mov	r4, r0
   1576c:	ldr	r2, [r0, #32]
   15770:	ldrh	r0, [r2, #14]
   15774:	cmp	r0, #5
   15778:	bne	157a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   1577c:	mov	r3, r1
   15780:	ldr	r2, [r2, #20]
   15784:	ldr	r1, [r4, #16]
   15788:	mov	r0, r4
   1578c:	bl	12dc8 <flatcc_builder_default_alloc@@Base+0x378>
   15790:	subs	r5, r0, #0
   15794:	bne	157b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   15798:	mov	r0, r5
   1579c:	pop	{r4, r5, r6, pc}
   157a0:	ldr	r3, [pc, #140]	; 15834 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   157a4:	ldr	r2, [pc, #140]	; 15838 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd4>
   157a8:	ldr	r1, [pc, #140]	; 1583c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   157ac:	ldr	r0, [pc, #140]	; 15840 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   157b0:	bl	1206c <__assert_fail@plt>
   157b4:	ldr	r2, [r4, #20]
   157b8:	mov	r1, #0
   157bc:	ldr	r0, [r4, #16]
   157c0:	bl	1203c <memset@plt>
   157c4:	ldr	r2, [r4, #32]
   157c8:	ldr	r3, [r2, #8]
   157cc:	str	r3, [r4, #20]
   157d0:	ldr	r0, [r2]
   157d4:	str	r0, [r4, #28]
   157d8:	ldr	r1, [r2, #4]
   157dc:	ldr	r3, [r4, #60]	; 0x3c
   157e0:	add	r3, r3, r0
   157e4:	str	r3, [r4, #16]
   157e8:	ldr	r3, [r4, #64]	; 0x40
   157ec:	sub	r3, r3, r0
   157f0:	cmp	r3, r1
   157f4:	movcs	r3, r1
   157f8:	str	r3, [r4, #24]
   157fc:	str	r1, [r2, #4]
   15800:	ldrh	r3, [r4, #130]	; 0x82
   15804:	ldrh	r2, [r4, #128]	; 0x80
   15808:	cmp	r2, r3
   1580c:	strhcc	r3, [r4, #128]	; 0x80
   15810:	ldr	r3, [r4, #32]
   15814:	ldrh	r2, [r3, #12]
   15818:	strh	r2, [r4, #130]	; 0x82
   1581c:	sub	r3, r3, #36	; 0x24
   15820:	str	r3, [r4, #32]
   15824:	ldr	r3, [r4, #156]	; 0x9c
   15828:	sub	r3, r3, #1
   1582c:	str	r3, [r4, #156]	; 0x9c
   15830:	b	15798 <flatcc_builder_end_offset_vector_for_unions@@Base+0x34>
   15834:	andeq	r7, r1, r0, lsl #21
   15838:	ldrdeq	r0, [r0], -r5
   1583c:	andeq	r7, r1, r4, lsr ip
   15840:	ldrdeq	r7, [r1], -r8

00015844 <flatcc_builder_offset_vector_edit@@Base>:
   15844:	ldr	r0, [r0, #16]
   15848:	bx	lr

0001584c <flatcc_builder_offset_vector_count@@Base>:
   1584c:	ldr	r3, [r0, #32]
   15850:	ldr	r0, [r3, #20]
   15854:	bx	lr

00015858 <flatcc_builder_create_union_vector_direct@@Base>:
   15858:	push	{r4, r5, r6, r7, lr}
   1585c:	sub	sp, sp, #12
   15860:	mov	r4, r0
   15864:	mov	r5, r1
   15868:	mov	r6, r2
   1586c:	mov	r1, r3
   15870:	mov	r3, r2
   15874:	ldr	r2, [sp, #32]
   15878:	mov	r0, r5
   1587c:	bl	12dc8 <flatcc_builder_default_alloc@@Base+0x378>
   15880:	subs	r7, r0, #0
   15884:	bne	158a0 <flatcc_builder_create_union_vector_direct@@Base+0x48>
   15888:	mov	r3, #0
   1588c:	str	r3, [r4]
   15890:	str	r3, [r4, #4]
   15894:	mov	r0, r4
   15898:	add	sp, sp, #12
   1589c:	pop	{r4, r5, r6, r7, pc}
   158a0:	mvn	r3, #0
   158a4:	str	r3, [sp, #4]
   158a8:	mov	r3, #1
   158ac:	str	r3, [sp]
   158b0:	ldr	r2, [sp, #32]
   158b4:	mov	r1, r6
   158b8:	mov	r0, r5
   158bc:	bl	153c0 <flatcc_builder_create_vector@@Base>
   158c0:	cmp	r0, #0
   158c4:	moveq	r3, #0
   158c8:	streq	r3, [r4]
   158cc:	strne	r0, [r4]
   158d0:	str	r7, [r4, #4]
   158d4:	b	15894 <flatcc_builder_create_union_vector_direct@@Base+0x3c>

000158d8 <flatcc_builder_create_union_vector@@Base>:
   158d8:	push	{r4, r5, r6, r7, r8, lr}
   158dc:	sub	sp, sp, #16
   158e0:	mov	r5, r0
   158e4:	mov	r4, r1
   158e8:	mov	r7, r2
   158ec:	mov	r6, r3
   158f0:	mov	r0, r1
   158f4:	bl	14598 <flatcc_builder_start_offset_vector@@Base>
   158f8:	cmp	r0, #0
   158fc:	beq	15918 <flatcc_builder_create_union_vector@@Base+0x40>
   15900:	mov	r3, #0
   15904:	str	r3, [r5]
   15908:	str	r3, [r5, #4]
   1590c:	mov	r0, r5
   15910:	add	sp, sp, #16
   15914:	pop	{r4, r5, r6, r7, r8, pc}
   15918:	mov	r1, r6
   1591c:	mov	r0, r4
   15920:	bl	13f68 <flatcc_builder_extend_offset_vector@@Base>
   15924:	cmp	r0, #0
   15928:	moveq	r3, #0
   1592c:	streq	r3, [r5]
   15930:	streq	r3, [r5, #4]
   15934:	beq	1590c <flatcc_builder_create_union_vector@@Base+0x34>
   15938:	ldr	r8, [r4, #20]
   1593c:	add	r1, r6, r8
   15940:	str	r1, [r4, #20]
   15944:	ldr	r3, [r4, #24]
   15948:	cmp	r1, r3
   1594c:	bcs	15a30 <flatcc_builder_create_union_vector@@Base+0x158>
   15950:	ldr	r3, [r4, #16]
   15954:	adds	r2, r3, r8
   15958:	beq	15a48 <flatcc_builder_create_union_vector@@Base+0x170>
   1595c:	cmp	r6, #0
   15960:	beq	15990 <flatcc_builder_create_union_vector@@Base+0xb8>
   15964:	mov	r1, r7
   15968:	sub	ip, r2, #1
   1596c:	sub	r0, r3, #4
   15970:	add	r7, r7, r6, lsl #3
   15974:	ldrb	lr, [r1]
   15978:	strb	lr, [ip, #1]!
   1597c:	ldr	lr, [r1, #4]
   15980:	str	lr, [r0, #4]!
   15984:	add	r1, r1, #8
   15988:	cmp	r1, r7
   1598c:	bne	15974 <flatcc_builder_create_union_vector@@Base+0x9c>
   15990:	str	r6, [sp]
   15994:	mov	r1, r4
   15998:	add	r0, sp, #8
   1599c:	bl	15858 <flatcc_builder_create_union_vector_direct@@Base>
   159a0:	ldr	r7, [sp, #8]
   159a4:	ldr	r6, [sp, #12]
   159a8:	ldr	r2, [r4, #20]
   159ac:	mov	r1, #0
   159b0:	ldr	r0, [r4, #16]
   159b4:	bl	1203c <memset@plt>
   159b8:	ldr	r2, [r4, #32]
   159bc:	ldr	r3, [r2, #8]
   159c0:	str	r3, [r4, #20]
   159c4:	ldr	r0, [r2]
   159c8:	str	r0, [r4, #28]
   159cc:	ldr	r1, [r2, #4]
   159d0:	ldr	r3, [r4, #60]	; 0x3c
   159d4:	add	r3, r3, r0
   159d8:	str	r3, [r4, #16]
   159dc:	ldr	r3, [r4, #64]	; 0x40
   159e0:	sub	r3, r3, r0
   159e4:	cmp	r3, r1
   159e8:	movcs	r3, r1
   159ec:	str	r3, [r4, #24]
   159f0:	str	r1, [r2, #4]
   159f4:	ldrh	r3, [r4, #130]	; 0x82
   159f8:	ldrh	r2, [r4, #128]	; 0x80
   159fc:	cmp	r2, r3
   15a00:	strhcc	r3, [r4, #128]	; 0x80
   15a04:	ldr	r3, [r4, #32]
   15a08:	ldrh	r2, [r3, #12]
   15a0c:	strh	r2, [r4, #130]	; 0x82
   15a10:	sub	r3, r3, #36	; 0x24
   15a14:	str	r3, [r4, #32]
   15a18:	ldr	r3, [r4, #156]	; 0x9c
   15a1c:	sub	r3, r3, #1
   15a20:	str	r3, [r4, #156]	; 0x9c
   15a24:	str	r7, [r5]
   15a28:	str	r6, [r5, #4]
   15a2c:	b	1590c <flatcc_builder_create_union_vector@@Base+0x34>
   15a30:	mvn	r2, #3
   15a34:	add	r1, r1, #1
   15a38:	mov	r0, r4
   15a3c:	bl	129dc <main@@Base+0x580>
   15a40:	cmp	r0, #0
   15a44:	beq	15950 <flatcc_builder_create_union_vector@@Base+0x78>
   15a48:	mov	r3, #0
   15a4c:	str	r3, [r5]
   15a50:	str	r3, [r5, #4]
   15a54:	b	1590c <flatcc_builder_create_union_vector@@Base+0x34>

00015a58 <flatcc_builder_start_union_vector@@Base>:
   15a58:	push	{r4, lr}
   15a5c:	mov	r4, r0
   15a60:	mov	r1, #4
   15a64:	bl	12c7c <flatcc_builder_default_alloc@@Base+0x22c>
   15a68:	cmp	r0, #0
   15a6c:	bne	15ac8 <flatcc_builder_start_union_vector@@Base+0x70>
   15a70:	ldr	r3, [r4, #32]
   15a74:	mov	r2, #8
   15a78:	str	r2, [r3, #16]
   15a7c:	ldr	r3, [r4, #32]
   15a80:	mov	r2, #0
   15a84:	str	r2, [r3, #20]
   15a88:	ldr	r3, [r4, #32]
   15a8c:	mov	r2, #7
   15a90:	strh	r2, [r3, #14]
   15a94:	ldr	r1, [r4, #28]
   15a98:	ldr	r2, [r4, #60]	; 0x3c
   15a9c:	add	r2, r2, r1
   15aa0:	str	r2, [r4, #16]
   15aa4:	ldr	r3, [r4, #64]	; 0x40
   15aa8:	sub	r3, r3, r1
   15aac:	cmn	r3, #4
   15ab0:	mvnhi	r3, #3
   15ab4:	str	r3, [r4, #24]
   15ab8:	ldr	r3, [r4, #32]
   15abc:	mvn	r2, #3
   15ac0:	str	r2, [r3, #4]
   15ac4:	pop	{r4, pc}
   15ac8:	mvn	r0, #0
   15acc:	pop	{r4, pc}

00015ad0 <flatcc_builder_end_union_vector@@Base>:
   15ad0:	push	{r4, r5, r6, r7, r8, lr}
   15ad4:	sub	sp, sp, #16
   15ad8:	ldr	r3, [r1, #32]
   15adc:	ldrh	r2, [r3, #14]
   15ae0:	cmp	r2, #7
   15ae4:	bne	15bfc <flatcc_builder_end_union_vector@@Base+0x12c>
   15ae8:	mov	r6, r0
   15aec:	mov	r4, r1
   15af0:	ldr	r5, [r3, #20]
   15af4:	ldr	r8, [r1, #20]
   15af8:	add	r1, r5, r5, lsl #2
   15afc:	add	r1, r1, r8
   15b00:	str	r1, [r4, #20]
   15b04:	ldr	r3, [r4, #24]
   15b08:	cmp	r1, r3
   15b0c:	bcs	15c10 <flatcc_builder_end_union_vector@@Base+0x140>
   15b10:	ldr	r7, [r4, #16]
   15b14:	adds	r3, r7, r8
   15b18:	beq	15c28 <flatcc_builder_end_union_vector@@Base+0x158>
   15b1c:	add	r2, r3, r5, lsl #2
   15b20:	cmp	r5, #0
   15b24:	beq	15b54 <flatcc_builder_end_union_vector@@Base+0x84>
   15b28:	mov	r1, r7
   15b2c:	sub	ip, r2, #1
   15b30:	sub	r0, r3, #4
   15b34:	add	r7, r7, r5, lsl #3
   15b38:	ldrb	lr, [r1]
   15b3c:	strb	lr, [ip, #1]!
   15b40:	ldr	lr, [r1, #4]
   15b44:	str	lr, [r0, #4]!
   15b48:	add	r1, r1, #8
   15b4c:	cmp	r1, r7
   15b50:	bne	15b38 <flatcc_builder_end_union_vector@@Base+0x68>
   15b54:	str	r5, [sp]
   15b58:	mov	r1, r4
   15b5c:	add	r0, sp, #8
   15b60:	bl	15858 <flatcc_builder_create_union_vector_direct@@Base>
   15b64:	ldr	r7, [sp, #8]
   15b68:	ldr	r5, [sp, #12]
   15b6c:	ldr	r2, [r4, #20]
   15b70:	mov	r1, #0
   15b74:	ldr	r0, [r4, #16]
   15b78:	bl	1203c <memset@plt>
   15b7c:	ldr	r2, [r4, #32]
   15b80:	ldr	r3, [r2, #8]
   15b84:	str	r3, [r4, #20]
   15b88:	ldr	r0, [r2]
   15b8c:	str	r0, [r4, #28]
   15b90:	ldr	r1, [r2, #4]
   15b94:	ldr	r3, [r4, #60]	; 0x3c
   15b98:	add	r3, r3, r0
   15b9c:	str	r3, [r4, #16]
   15ba0:	ldr	r3, [r4, #64]	; 0x40
   15ba4:	sub	r3, r3, r0
   15ba8:	cmp	r3, r1
   15bac:	movcs	r3, r1
   15bb0:	str	r3, [r4, #24]
   15bb4:	str	r1, [r2, #4]
   15bb8:	ldrh	r3, [r4, #130]	; 0x82
   15bbc:	ldrh	r2, [r4, #128]	; 0x80
   15bc0:	cmp	r2, r3
   15bc4:	strhcc	r3, [r4, #128]	; 0x80
   15bc8:	ldr	r3, [r4, #32]
   15bcc:	ldrh	r2, [r3, #12]
   15bd0:	strh	r2, [r4, #130]	; 0x82
   15bd4:	sub	r3, r3, #36	; 0x24
   15bd8:	str	r3, [r4, #32]
   15bdc:	ldr	r3, [r4, #156]	; 0x9c
   15be0:	sub	r3, r3, #1
   15be4:	str	r3, [r4, #156]	; 0x9c
   15be8:	str	r7, [r6]
   15bec:	str	r5, [r6, #4]
   15bf0:	mov	r0, r6
   15bf4:	add	sp, sp, #16
   15bf8:	pop	{r4, r5, r6, r7, r8, pc}
   15bfc:	ldr	r3, [pc, #52]	; 15c38 <flatcc_builder_end_union_vector@@Base+0x168>
   15c00:	ldr	r2, [pc, #52]	; 15c3c <flatcc_builder_end_union_vector@@Base+0x16c>
   15c04:	ldr	r1, [pc, #52]	; 15c40 <flatcc_builder_end_union_vector@@Base+0x170>
   15c08:	ldr	r0, [pc, #52]	; 15c44 <flatcc_builder_end_union_vector@@Base+0x174>
   15c0c:	bl	1206c <__assert_fail@plt>
   15c10:	mvn	r2, #3
   15c14:	add	r1, r1, #1
   15c18:	mov	r0, r4
   15c1c:	bl	129dc <main@@Base+0x580>
   15c20:	cmp	r0, #0
   15c24:	beq	15b10 <flatcc_builder_end_union_vector@@Base+0x40>
   15c28:	mov	r3, #0
   15c2c:	str	r3, [r6]
   15c30:	str	r3, [r6, #4]
   15c34:	b	15bf0 <flatcc_builder_end_union_vector@@Base+0x120>
   15c38:	andeq	r7, r1, ip, lsr #21
   15c3c:	andeq	r0, r0, r1, asr r6
   15c40:	andeq	r7, r1, r4, lsr ip
   15c44:	andeq	r7, r1, r8, lsr pc

00015c48 <flatcc_builder_union_vector_edit@@Base>:
   15c48:	ldr	r0, [r0, #16]
   15c4c:	bx	lr

00015c50 <flatcc_builder_union_vector_count@@Base>:
   15c50:	ldr	r3, [r0, #32]
   15c54:	ldr	r0, [r3, #20]
   15c58:	bx	lr

00015c5c <flatcc_builder_extend_union_vector@@Base>:
   15c5c:	push	{r4, r5, r6, lr}
   15c60:	mov	r4, r0
   15c64:	ldr	r2, [r0, #32]
   15c68:	ldr	r3, [r2, #20]
   15c6c:	adds	r3, r1, r3
   15c70:	movcs	ip, #1
   15c74:	movcc	ip, #0
   15c78:	cmn	r3, #-536870911	; 0xe0000001
   15c7c:	movls	r0, #0
   15c80:	movhi	r0, #1
   15c84:	orrs	r0, ip, r0
   15c88:	bne	15cb4 <flatcc_builder_extend_union_vector@@Base+0x58>
   15c8c:	str	r3, [r2, #20]
   15c90:	ldr	r5, [r4, #20]
   15c94:	add	r1, r5, r1, lsl #3
   15c98:	str	r1, [r4, #20]
   15c9c:	ldr	r3, [r4, #24]
   15ca0:	cmp	r1, r3
   15ca4:	bcs	15cc8 <flatcc_builder_extend_union_vector@@Base+0x6c>
   15ca8:	ldr	r0, [r4, #16]
   15cac:	add	r0, r0, r5
   15cb0:	pop	{r4, r5, r6, pc}
   15cb4:	ldr	r3, [pc, #44]	; 15ce8 <flatcc_builder_extend_union_vector@@Base+0x8c>
   15cb8:	mov	r2, #892	; 0x37c
   15cbc:	ldr	r1, [pc, #40]	; 15cec <flatcc_builder_extend_union_vector@@Base+0x90>
   15cc0:	ldr	r0, [pc, #40]	; 15cf0 <flatcc_builder_extend_union_vector@@Base+0x94>
   15cc4:	bl	1206c <__assert_fail@plt>
   15cc8:	mvn	r2, #3
   15ccc:	add	r1, r1, #1
   15cd0:	mov	r0, r4
   15cd4:	bl	129dc <main@@Base+0x580>
   15cd8:	cmp	r0, #0
   15cdc:	beq	15ca8 <flatcc_builder_extend_union_vector@@Base+0x4c>
   15ce0:	mov	r0, #0
   15ce4:	pop	{r4, r5, r6, pc}
   15ce8:	andeq	r7, r1, r4, lsl r8
   15cec:	andeq	r7, r1, r4, lsr ip
   15cf0:	andeq	r7, r1, r0, asr sp

00015cf4 <flatcc_builder_truncate_union_vector@@Base>:
   15cf4:	push	{r4, lr}
   15cf8:	ldr	ip, [r0, #32]
   15cfc:	ldrh	r3, [ip, #14]
   15d00:	cmp	r3, #7
   15d04:	bne	15d4c <flatcc_builder_truncate_union_vector@@Base+0x58>
   15d08:	ldr	r3, [ip, #20]
   15d0c:	cmp	r3, r1
   15d10:	bcc	15d60 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   15d14:	sub	r3, r3, r1
   15d18:	str	r3, [ip, #20]
   15d1c:	ldr	r3, [r0, #32]
   15d20:	ldr	r2, [r3, #16]
   15d24:	mul	r2, r2, r1
   15d28:	ldr	r3, [r0, #20]
   15d2c:	sub	r3, r3, r2
   15d30:	str	r3, [r0, #20]
   15d34:	ldr	r0, [r0, #16]
   15d38:	mov	r1, #0
   15d3c:	add	r0, r0, r3
   15d40:	bl	1203c <memset@plt>
   15d44:	mov	r0, #0
   15d48:	pop	{r4, pc}
   15d4c:	ldr	r3, [pc, #32]	; 15d74 <flatcc_builder_truncate_union_vector@@Base+0x80>
   15d50:	ldr	r2, [pc, #32]	; 15d78 <flatcc_builder_truncate_union_vector@@Base+0x84>
   15d54:	ldr	r1, [pc, #32]	; 15d7c <flatcc_builder_truncate_union_vector@@Base+0x88>
   15d58:	ldr	r0, [pc, #32]	; 15d80 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   15d5c:	bl	1206c <__assert_fail@plt>
   15d60:	ldr	r3, [pc, #12]	; 15d74 <flatcc_builder_truncate_union_vector@@Base+0x80>
   15d64:	ldr	r2, [pc, #24]	; 15d84 <flatcc_builder_truncate_union_vector@@Base+0x90>
   15d68:	ldr	r1, [pc, #12]	; 15d7c <flatcc_builder_truncate_union_vector@@Base+0x88>
   15d6c:	ldr	r0, [pc, #20]	; 15d88 <flatcc_builder_truncate_union_vector@@Base+0x94>
   15d70:	bl	1206c <__assert_fail@plt>
   15d74:	andeq	r7, r1, ip, asr #21
   15d78:	andeq	r0, r0, r1, lsl #13
   15d7c:	andeq	r7, r1, r4, lsr ip
   15d80:	andeq	r7, r1, r8, lsr pc
   15d84:	andeq	r0, r0, r2, lsl #13
   15d88:	andeq	r7, r1, ip, asr lr

00015d8c <flatcc_builder_union_vector_push@@Base>:
   15d8c:	push	{r4, r5, lr}
   15d90:	sub	sp, sp, #12
   15d94:	add	r3, sp, #8
   15d98:	stmdb	r3, {r1, r2}
   15d9c:	ldr	r2, [r0, #32]
   15da0:	ldrh	r3, [r2, #14]
   15da4:	cmp	r3, #7
   15da8:	bne	15e00 <flatcc_builder_union_vector_push@@Base+0x74>
   15dac:	mov	r4, r0
   15db0:	ldr	r3, [r2, #20]
   15db4:	cmn	r3, #-536870911	; 0xe0000001
   15db8:	beq	15e30 <flatcc_builder_union_vector_push@@Base+0xa4>
   15dbc:	add	r3, r3, #1
   15dc0:	str	r3, [r2, #20]
   15dc4:	ldr	r5, [r0, #20]
   15dc8:	add	r3, r5, #8
   15dcc:	str	r3, [r0, #20]
   15dd0:	ldr	r2, [r0, #24]
   15dd4:	cmp	r3, r2
   15dd8:	bcs	15e14 <flatcc_builder_union_vector_push@@Base+0x88>
   15ddc:	ldr	r3, [r4, #16]
   15de0:	adds	r3, r3, r5
   15de4:	moveq	r0, r3
   15de8:	addne	r2, sp, #8
   15dec:	ldmdbne	r2, {r0, r1}
   15df0:	stmne	r3, {r0, r1}
   15df4:	movne	r0, r3
   15df8:	add	sp, sp, #12
   15dfc:	pop	{r4, r5, pc}
   15e00:	ldr	r3, [pc, #48]	; 15e38 <flatcc_builder_union_vector_push@@Base+0xac>
   15e04:	ldr	r2, [pc, #48]	; 15e3c <flatcc_builder_union_vector_push@@Base+0xb0>
   15e08:	ldr	r1, [pc, #48]	; 15e40 <flatcc_builder_union_vector_push@@Base+0xb4>
   15e0c:	ldr	r0, [pc, #48]	; 15e44 <flatcc_builder_union_vector_push@@Base+0xb8>
   15e10:	bl	1206c <__assert_fail@plt>
   15e14:	mvn	r2, #3
   15e18:	add	r1, r5, #9
   15e1c:	bl	129dc <main@@Base+0x580>
   15e20:	cmp	r0, #0
   15e24:	beq	15ddc <flatcc_builder_union_vector_push@@Base+0x50>
   15e28:	mov	r0, #0
   15e2c:	b	15df8 <flatcc_builder_union_vector_push@@Base+0x6c>
   15e30:	mov	r0, #0
   15e34:	b	15df8 <flatcc_builder_union_vector_push@@Base+0x6c>
   15e38:	strdeq	r7, [r1], -r4
   15e3c:	andeq	r0, r0, sp, lsl #13
   15e40:	andeq	r7, r1, r4, lsr ip
   15e44:	andeq	r7, r1, r8, lsr pc

00015e48 <flatcc_builder_append_union_vector@@Base>:
   15e48:	push	{r4, r5, r6, r7, r8, lr}
   15e4c:	mov	r6, r1
   15e50:	ldr	r1, [r0, #32]
   15e54:	ldrh	r3, [r1, #14]
   15e58:	cmp	r3, #7
   15e5c:	bne	15ecc <flatcc_builder_append_union_vector@@Base+0x84>
   15e60:	mov	r5, r0
   15e64:	ldr	r3, [r1, #20]
   15e68:	adds	r3, r2, r3
   15e6c:	movcs	ip, #1
   15e70:	movcc	ip, #0
   15e74:	cmn	r3, #-536870911	; 0xe0000001
   15e78:	movls	r0, #0
   15e7c:	movhi	r0, #1
   15e80:	orrs	r0, ip, r0
   15e84:	bne	15ee0 <flatcc_builder_append_union_vector@@Base+0x98>
   15e88:	str	r3, [r1, #20]
   15e8c:	lsl	r4, r2, #3
   15e90:	ldr	r7, [r5, #20]
   15e94:	add	r1, r4, r7
   15e98:	str	r1, [r5, #20]
   15e9c:	ldr	r3, [r5, #24]
   15ea0:	cmp	r1, r3
   15ea4:	bcs	15ef4 <flatcc_builder_append_union_vector@@Base+0xac>
   15ea8:	ldr	r5, [r5, #16]
   15eac:	adds	r5, r5, r7
   15eb0:	beq	15ec4 <flatcc_builder_append_union_vector@@Base+0x7c>
   15eb4:	mov	r2, r4
   15eb8:	mov	r1, r6
   15ebc:	mov	r0, r5
   15ec0:	bl	11fb8 <memcpy@plt>
   15ec4:	mov	r0, r5
   15ec8:	pop	{r4, r5, r6, r7, r8, pc}
   15ecc:	ldr	r3, [pc, #64]	; 15f14 <flatcc_builder_append_union_vector@@Base+0xcc>
   15ed0:	ldr	r2, [pc, #64]	; 15f18 <flatcc_builder_append_union_vector@@Base+0xd0>
   15ed4:	ldr	r1, [pc, #64]	; 15f1c <flatcc_builder_append_union_vector@@Base+0xd4>
   15ed8:	ldr	r0, [pc, #64]	; 15f20 <flatcc_builder_append_union_vector@@Base+0xd8>
   15edc:	bl	1206c <__assert_fail@plt>
   15ee0:	ldr	r3, [pc, #60]	; 15f24 <flatcc_builder_append_union_vector@@Base+0xdc>
   15ee4:	mov	r2, #892	; 0x37c
   15ee8:	ldr	r1, [pc, #44]	; 15f1c <flatcc_builder_append_union_vector@@Base+0xd4>
   15eec:	ldr	r0, [pc, #52]	; 15f28 <flatcc_builder_append_union_vector@@Base+0xe0>
   15ef0:	bl	1206c <__assert_fail@plt>
   15ef4:	mvn	r2, #3
   15ef8:	add	r1, r1, #1
   15efc:	mov	r0, r5
   15f00:	bl	129dc <main@@Base+0x580>
   15f04:	cmp	r0, #0
   15f08:	beq	15ea8 <flatcc_builder_append_union_vector@@Base+0x60>
   15f0c:	mov	r5, #0
   15f10:	b	15ec4 <flatcc_builder_append_union_vector@@Base+0x7c>
   15f14:	andeq	r7, r1, r8, lsl fp
   15f18:	muleq	r0, ip, r6
   15f1c:	andeq	r7, r1, r4, lsr ip
   15f20:	andeq	r7, r1, r8, lsr pc
   15f24:	andeq	r7, r1, r4, lsl r8
   15f28:	andeq	r7, r1, r0, asr sp

00015f2c <flatcc_builder_create_string@@Base>:
   15f2c:	push	{r4, r5, r6, lr}
   15f30:	sub	sp, sp, #88	; 0x58
   15f34:	mov	r5, r0
   15f38:	str	r2, [sp, #84]	; 0x54
   15f3c:	ldr	r0, [r0, #136]	; 0x88
   15f40:	sub	r3, r0, r2
   15f44:	sub	r3, r3, #1
   15f48:	and	r3, r3, #3
   15f4c:	add	r3, r3, #1
   15f50:	mov	ip, #4
   15f54:	str	ip, [sp, #12]
   15f58:	add	lr, sp, #84	; 0x54
   15f5c:	str	lr, [sp, #20]
   15f60:	str	ip, [sp, #24]
   15f64:	mov	ip, #1
   15f68:	str	ip, [sp, #16]
   15f6c:	cmp	r2, #0
   15f70:	beq	15f8c <flatcc_builder_create_string@@Base+0x60>
   15f74:	add	ip, r2, #4
   15f78:	str	ip, [sp, #12]
   15f7c:	str	r1, [sp, #28]
   15f80:	str	r2, [sp, #32]
   15f84:	mov	r2, #2
   15f88:	str	r2, [sp, #16]
   15f8c:	cmp	r3, #0
   15f90:	beq	15fc0 <flatcc_builder_create_string@@Base+0x94>
   15f94:	ldr	r2, [sp, #12]
   15f98:	add	r2, r2, r3
   15f9c:	str	r2, [sp, #12]
   15fa0:	ldr	r2, [sp, #16]
   15fa4:	add	r2, r2, #1
   15fa8:	add	r1, sp, #88	; 0x58
   15fac:	add	r1, r1, r2, lsl #3
   15fb0:	ldr	ip, [pc, #116]	; 1602c <flatcc_builder_create_string@@Base+0x100>
   15fb4:	str	ip, [r1, #-76]	; 0xffffffb4
   15fb8:	str	r3, [r1, #-72]	; 0xffffffb8
   15fbc:	str	r2, [sp, #16]
   15fc0:	ldr	r3, [sp, #12]
   15fc4:	sub	r4, r0, r3
   15fc8:	cmp	r0, r4
   15fcc:	ble	16004 <flatcc_builder_create_string@@Base+0xd8>
   15fd0:	str	r3, [sp]
   15fd4:	ldr	r6, [r5, #44]	; 0x2c
   15fd8:	mov	r3, r4
   15fdc:	ldr	r2, [sp, #16]
   15fe0:	add	r1, sp, #20
   15fe4:	ldr	r0, [r5, #36]	; 0x24
   15fe8:	blx	r6
   15fec:	cmp	r0, #0
   15ff0:	bne	16018 <flatcc_builder_create_string@@Base+0xec>
   15ff4:	str	r4, [r5, #136]	; 0x88
   15ff8:	mov	r0, r4
   15ffc:	add	sp, sp, #88	; 0x58
   16000:	pop	{r4, r5, r6, pc}
   16004:	ldr	r3, [pc, #36]	; 16030 <flatcc_builder_create_string@@Base+0x104>
   16008:	ldr	r2, [pc, #36]	; 16034 <flatcc_builder_create_string@@Base+0x108>
   1600c:	ldr	r1, [pc, #36]	; 16038 <flatcc_builder_create_string@@Base+0x10c>
   16010:	ldr	r0, [pc, #36]	; 1603c <flatcc_builder_create_string@@Base+0x110>
   16014:	bl	1206c <__assert_fail@plt>
   16018:	ldr	r3, [pc, #16]	; 16030 <flatcc_builder_create_string@@Base+0x104>
   1601c:	ldr	r2, [pc, #28]	; 16040 <flatcc_builder_create_string@@Base+0x114>
   16020:	ldr	r1, [pc, #16]	; 16038 <flatcc_builder_create_string@@Base+0x10c>
   16024:	ldr	r0, [pc, #16]	; 1603c <flatcc_builder_create_string@@Base+0x110>
   16028:	bl	1206c <__assert_fail@plt>
   1602c:	andeq	r7, r1, r4, ror #9
   16030:	andeq	r7, r1, r0, lsr r7
   16034:	andeq	r0, r0, r7, lsl #5
   16038:	andeq	r7, r1, r4, lsr ip
   1603c:	andeq	r7, r1, r8, lsl #25
   16040:	andeq	r0, r0, fp, lsl #5

00016044 <flatcc_builder_create_string_str@@Base>:
   16044:	push	{r4, r5, r6, lr}
   16048:	mov	r5, r0
   1604c:	mov	r4, r1
   16050:	mov	r0, r1
   16054:	bl	12024 <strlen@plt>
   16058:	mov	r2, r0
   1605c:	mov	r1, r4
   16060:	mov	r0, r5
   16064:	bl	15f2c <flatcc_builder_create_string@@Base>
   16068:	pop	{r4, r5, r6, pc}

0001606c <flatcc_builder_create_string_strn@@Base>:
   1606c:	push	{r4, r5, r6, lr}
   16070:	mov	r6, r0
   16074:	mov	r4, r1
   16078:	mov	r5, r2
   1607c:	mov	r1, #0
   16080:	mov	r0, r4
   16084:	bl	12048 <memchr@plt>
   16088:	cmp	r0, #0
   1608c:	subne	r5, r0, r4
   16090:	mov	r2, r5
   16094:	mov	r1, r4
   16098:	mov	r0, r6
   1609c:	bl	15f2c <flatcc_builder_create_string@@Base>
   160a0:	pop	{r4, r5, r6, pc}

000160a4 <flatcc_builder_end_string@@Base>:
   160a4:	push	{r4, r5, r6, lr}
   160a8:	ldr	r3, [r0, #32]
   160ac:	ldrh	r2, [r3, #14]
   160b0:	cmp	r2, #6
   160b4:	bne	160e4 <flatcc_builder_end_string@@Base+0x40>
   160b8:	mov	r4, r0
   160bc:	ldr	r2, [r3, #20]
   160c0:	ldr	r3, [r0, #20]
   160c4:	cmp	r2, r3
   160c8:	bne	160f8 <flatcc_builder_end_string@@Base+0x54>
   160cc:	ldr	r1, [r0, #16]
   160d0:	bl	15f2c <flatcc_builder_create_string@@Base>
   160d4:	subs	r5, r0, #0
   160d8:	bne	1610c <flatcc_builder_end_string@@Base+0x68>
   160dc:	mov	r0, r5
   160e0:	pop	{r4, r5, r6, pc}
   160e4:	ldr	r3, [pc, #160]	; 1618c <flatcc_builder_end_string@@Base+0xe8>
   160e8:	ldr	r2, [pc, #160]	; 16190 <flatcc_builder_end_string@@Base+0xec>
   160ec:	ldr	r1, [pc, #160]	; 16194 <flatcc_builder_end_string@@Base+0xf0>
   160f0:	ldr	r0, [pc, #160]	; 16198 <flatcc_builder_end_string@@Base+0xf4>
   160f4:	bl	1206c <__assert_fail@plt>
   160f8:	ldr	r3, [pc, #140]	; 1618c <flatcc_builder_end_string@@Base+0xe8>
   160fc:	ldr	r2, [pc, #152]	; 1619c <flatcc_builder_end_string@@Base+0xf8>
   16100:	ldr	r1, [pc, #140]	; 16194 <flatcc_builder_end_string@@Base+0xf0>
   16104:	ldr	r0, [pc, #148]	; 161a0 <flatcc_builder_end_string@@Base+0xfc>
   16108:	bl	1206c <__assert_fail@plt>
   1610c:	ldr	r2, [r4, #20]
   16110:	mov	r1, #0
   16114:	ldr	r0, [r4, #16]
   16118:	bl	1203c <memset@plt>
   1611c:	ldr	r2, [r4, #32]
   16120:	ldr	r3, [r2, #8]
   16124:	str	r3, [r4, #20]
   16128:	ldr	r0, [r2]
   1612c:	str	r0, [r4, #28]
   16130:	ldr	r1, [r2, #4]
   16134:	ldr	r3, [r4, #60]	; 0x3c
   16138:	add	r3, r3, r0
   1613c:	str	r3, [r4, #16]
   16140:	ldr	r3, [r4, #64]	; 0x40
   16144:	sub	r3, r3, r0
   16148:	cmp	r3, r1
   1614c:	movcs	r3, r1
   16150:	str	r3, [r4, #24]
   16154:	str	r1, [r2, #4]
   16158:	ldrh	r3, [r4, #130]	; 0x82
   1615c:	ldrh	r2, [r4, #128]	; 0x80
   16160:	cmp	r2, r3
   16164:	strhcc	r3, [r4, #128]	; 0x80
   16168:	ldr	r3, [r4, #32]
   1616c:	ldrh	r2, [r3, #12]
   16170:	strh	r2, [r4, #130]	; 0x82
   16174:	sub	r3, r3, #36	; 0x24
   16178:	str	r3, [r4, #32]
   1617c:	ldr	r3, [r4, #156]	; 0x9c
   16180:	sub	r3, r3, #1
   16184:	str	r3, [r4, #156]	; 0x9c
   16188:	b	160dc <flatcc_builder_end_string@@Base+0x38>
   1618c:	andeq	r7, r1, ip, lsr fp
   16190:	andeq	r0, r0, r4, asr #13
   16194:	andeq	r7, r1, r4, lsr ip
   16198:	andeq	r7, r1, ip, lsl #28
   1619c:	andeq	r0, r0, r5, asr #13
   161a0:	andeq	r7, r1, ip, ror #30

000161a4 <flatcc_builder_string_edit@@Base>:
   161a4:	ldr	r0, [r0, #16]
   161a8:	bx	lr

000161ac <flatcc_builder_string_len@@Base>:
   161ac:	ldr	r3, [r0, #32]
   161b0:	ldr	r0, [r3, #20]
   161b4:	bx	lr

000161b8 <flatcc_builder_table_add@@Base>:
   161b8:	push	{r4, r5, r6, r7, r8, lr}
   161bc:	mov	r5, r1
   161c0:	ldr	r1, [r0, #32]
   161c4:	ldrh	r1, [r1, #14]
   161c8:	cmp	r1, #3
   161cc:	bne	16278 <flatcc_builder_table_add@@Base+0xc0>
   161d0:	mov	r4, r0
   161d4:	ldr	r1, [pc, #248]	; 162d4 <flatcc_builder_table_add@@Base+0x11c>
   161d8:	cmp	r5, r1
   161dc:	bhi	1628c <flatcc_builder_table_add@@Base+0xd4>
   161e0:	ldrh	r1, [r0, #130]	; 0x82
   161e4:	cmp	r1, r3
   161e8:	strhcc	r3, [r0, #130]	; 0x82
   161ec:	ldr	r0, [r0, #4]
   161f0:	lsl	r1, r5, #1
   161f4:	ldrh	r1, [r0, r1]
   161f8:	cmp	r1, #0
   161fc:	bne	162a0 <flatcc_builder_table_add@@Base+0xe8>
   16200:	ldr	r0, [r4, #12]
   16204:	eor	r0, r0, r5
   16208:	ldr	r1, [pc, #200]	; 162d8 <flatcc_builder_table_add@@Base+0x120>
   1620c:	mul	r0, r1, r0
   16210:	eor	r0, r0, r2
   16214:	mul	r0, r1, r0
   16218:	str	r0, [r4, #12]
   1621c:	uxth	r7, r5
   16220:	sub	r6, r3, #1
   16224:	ldr	r0, [r4, #20]
   16228:	add	r6, r6, r0
   1622c:	rsb	r3, r3, #0
   16230:	and	r6, r6, r3
   16234:	add	r1, r2, r6
   16238:	str	r1, [r4, #20]
   1623c:	ldr	r3, [r4, #24]
   16240:	cmp	r1, r3
   16244:	bcs	162b4 <flatcc_builder_table_add@@Base+0xfc>
   16248:	uxth	r5, r5
   1624c:	ldr	r3, [r4, #4]
   16250:	lsl	r5, r5, #1
   16254:	add	r2, r6, #4
   16258:	strh	r2, [r3, r5]
   1625c:	ldrh	r3, [r4, #8]
   16260:	cmp	r3, r7
   16264:	addls	r7, r7, #1
   16268:	strhls	r7, [r4, #8]
   1626c:	ldr	r0, [r4, #16]
   16270:	add	r0, r0, r6
   16274:	pop	{r4, r5, r6, r7, r8, pc}
   16278:	ldr	r3, [pc, #92]	; 162dc <flatcc_builder_table_add@@Base+0x124>
   1627c:	ldr	r2, [pc, #92]	; 162e0 <flatcc_builder_table_add@@Base+0x128>
   16280:	ldr	r1, [pc, #92]	; 162e4 <flatcc_builder_table_add@@Base+0x12c>
   16284:	ldr	r0, [pc, #92]	; 162e8 <flatcc_builder_table_add@@Base+0x130>
   16288:	bl	1206c <__assert_fail@plt>
   1628c:	ldr	r3, [pc, #72]	; 162dc <flatcc_builder_table_add@@Base+0x124>
   16290:	ldr	r2, [pc, #84]	; 162ec <flatcc_builder_table_add@@Base+0x134>
   16294:	ldr	r1, [pc, #72]	; 162e4 <flatcc_builder_table_add@@Base+0x12c>
   16298:	ldr	r0, [pc, #80]	; 162f0 <flatcc_builder_table_add@@Base+0x138>
   1629c:	bl	1206c <__assert_fail@plt>
   162a0:	ldr	r3, [pc, #52]	; 162dc <flatcc_builder_table_add@@Base+0x124>
   162a4:	ldr	r2, [pc, #72]	; 162f4 <flatcc_builder_table_add@@Base+0x13c>
   162a8:	ldr	r1, [pc, #52]	; 162e4 <flatcc_builder_table_add@@Base+0x12c>
   162ac:	ldr	r0, [pc, #68]	; 162f8 <flatcc_builder_table_add@@Base+0x140>
   162b0:	bl	1206c <__assert_fail@plt>
   162b4:	ldr	r2, [pc, #64]	; 162fc <flatcc_builder_table_add@@Base+0x144>
   162b8:	add	r1, r1, #1
   162bc:	mov	r0, r4
   162c0:	bl	129dc <main@@Base+0x580>
   162c4:	cmp	r0, #0
   162c8:	beq	16248 <flatcc_builder_table_add@@Base+0x90>
   162cc:	mov	r0, #0
   162d0:	pop	{r4, r5, r6, r7, r8, pc}
   162d4:	strdeq	r7, [r0], -ip
   162d8:			; <UNDEFINED> instruction: 0x9e3779b1
   162dc:	andeq	r7, r1, r8, asr fp
   162e0:	andeq	r0, r0, sp, ror #13
   162e4:	andeq	r7, r1, r4, lsr ip
   162e8:	strdeq	r7, [r1], -r8
   162ec:	andeq	r0, r0, lr, ror #13
   162f0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   162f4:	strdeq	r0, [r0], -r8
   162f8:	andeq	r7, r1, r8, lsl #25
   162fc:	strdeq	pc, [r0], -ip

00016300 <flatcc_builder_table_edit@@Base>:
   16300:	ldr	r3, [r0, #32]
   16304:	ldrh	r3, [r3, #14]
   16308:	cmp	r3, #3
   1630c:	bne	16324 <flatcc_builder_table_edit@@Base+0x24>
   16310:	ldr	r3, [r0, #20]
   16314:	sub	r1, r3, r1
   16318:	ldr	r0, [r0, #16]
   1631c:	add	r0, r0, r1
   16320:	bx	lr
   16324:	push	{r4, lr}
   16328:	ldr	r3, [pc, #12]	; 1633c <flatcc_builder_table_edit@@Base+0x3c>
   1632c:	ldr	r2, [pc, #12]	; 16340 <flatcc_builder_table_edit@@Base+0x40>
   16330:	ldr	r1, [pc, #12]	; 16344 <flatcc_builder_table_edit@@Base+0x44>
   16334:	ldr	r0, [pc, #12]	; 16348 <flatcc_builder_table_edit@@Base+0x48>
   16338:	bl	1206c <__assert_fail@plt>
   1633c:	andeq	r7, r1, r4, ror fp
   16340:	andeq	r0, r0, r2, lsl #14
   16344:	andeq	r7, r1, r4, lsr ip
   16348:	strdeq	r7, [r1], -r8

0001634c <flatcc_builder_table_add_copy@@Base>:
   1634c:	push	{r4, r5, r6, lr}
   16350:	mov	r6, r2
   16354:	mov	r5, r3
   16358:	ldrh	r3, [sp, #16]
   1635c:	mov	r2, r5
   16360:	bl	161b8 <flatcc_builder_table_add@@Base>
   16364:	subs	r4, r0, #0
   16368:	beq	1637c <flatcc_builder_table_add_copy@@Base+0x30>
   1636c:	mov	r2, r5
   16370:	mov	r1, r6
   16374:	mov	r0, r4
   16378:	bl	11fb8 <memcpy@plt>
   1637c:	mov	r0, r4
   16380:	pop	{r4, r5, r6, pc}

00016384 <flatcc_builder_table_add_offset@@Base>:
   16384:	push	{r4, r5, r6, r7, r8, lr}
   16388:	ldr	r3, [r0, #32]
   1638c:	ldrh	r3, [r3, #14]
   16390:	cmp	r3, #3
   16394:	bne	16444 <flatcc_builder_table_add_offset@@Base+0xc0>
   16398:	mov	r4, r0
   1639c:	mov	r5, r1
   163a0:	ldr	r3, [pc, #240]	; 16498 <flatcc_builder_table_add_offset@@Base+0x114>
   163a4:	cmp	r1, r3
   163a8:	bhi	16458 <flatcc_builder_table_add_offset@@Base+0xd4>
   163ac:	ldr	r2, [r0, #4]
   163b0:	lsl	r3, r1, #1
   163b4:	ldrh	r3, [r2, r3]
   163b8:	cmp	r3, #0
   163bc:	bne	1646c <flatcc_builder_table_add_offset@@Base+0xe8>
   163c0:	ldr	r3, [r0, #12]
   163c4:	eor	r3, r3, r1
   163c8:	ldr	r2, [pc, #204]	; 1649c <flatcc_builder_table_add_offset@@Base+0x118>
   163cc:	mul	r3, r2, r3
   163d0:	eor	r3, r3, #4
   163d4:	mul	r3, r2, r3
   163d8:	str	r3, [r0, #12]
   163dc:	uxth	r7, r1
   163e0:	ldr	r6, [r0, #20]
   163e4:	add	r6, r6, #3
   163e8:	bic	r6, r6, #3
   163ec:	add	r1, r6, #4
   163f0:	str	r1, [r0, #20]
   163f4:	ldr	r3, [r0, #24]
   163f8:	cmp	r1, r3
   163fc:	bhi	16480 <flatcc_builder_table_add_offset@@Base+0xfc>
   16400:	uxth	r2, r6
   16404:	uxth	r5, r5
   16408:	ldr	r3, [r4, #4]
   1640c:	lsl	r5, r5, #1
   16410:	add	r1, r2, #4
   16414:	strh	r1, [r3, r5]
   16418:	ldrh	r3, [r4, #8]
   1641c:	cmp	r3, r7
   16420:	addls	r7, r7, #1
   16424:	strhls	r7, [r4, #8]
   16428:	ldr	r3, [r4]
   1642c:	add	r1, r3, #2
   16430:	str	r1, [r4]
   16434:	strh	r2, [r3]
   16438:	ldr	r0, [r4, #16]
   1643c:	add	r0, r0, r6
   16440:	pop	{r4, r5, r6, r7, r8, pc}
   16444:	ldr	r3, [pc, #84]	; 164a0 <flatcc_builder_table_add_offset@@Base+0x11c>
   16448:	ldr	r2, [pc, #84]	; 164a4 <flatcc_builder_table_add_offset@@Base+0x120>
   1644c:	ldr	r1, [pc, #84]	; 164a8 <flatcc_builder_table_add_offset@@Base+0x124>
   16450:	ldr	r0, [pc, #84]	; 164ac <flatcc_builder_table_add_offset@@Base+0x128>
   16454:	bl	1206c <__assert_fail@plt>
   16458:	ldr	r3, [pc, #64]	; 164a0 <flatcc_builder_table_add_offset@@Base+0x11c>
   1645c:	ldr	r2, [pc, #76]	; 164b0 <flatcc_builder_table_add_offset@@Base+0x12c>
   16460:	ldr	r1, [pc, #64]	; 164a8 <flatcc_builder_table_add_offset@@Base+0x124>
   16464:	ldr	r0, [pc, #72]	; 164b4 <flatcc_builder_table_add_offset@@Base+0x130>
   16468:	bl	1206c <__assert_fail@plt>
   1646c:	ldr	r3, [pc, #44]	; 164a0 <flatcc_builder_table_add_offset@@Base+0x11c>
   16470:	ldr	r2, [pc, #64]	; 164b8 <flatcc_builder_table_add_offset@@Base+0x134>
   16474:	ldr	r1, [pc, #44]	; 164a8 <flatcc_builder_table_add_offset@@Base+0x124>
   16478:	ldr	r0, [pc, #60]	; 164bc <flatcc_builder_table_add_offset@@Base+0x138>
   1647c:	bl	1206c <__assert_fail@plt>
   16480:	ldr	r2, [pc, #56]	; 164c0 <flatcc_builder_table_add_offset@@Base+0x13c>
   16484:	bl	129dc <main@@Base+0x580>
   16488:	cmp	r0, #0
   1648c:	beq	16400 <flatcc_builder_table_add_offset@@Base+0x7c>
   16490:	mov	r0, #0
   16494:	pop	{r4, r5, r6, r7, r8, pc}
   16498:	strdeq	r7, [r0], -ip
   1649c:			; <UNDEFINED> instruction: 0x9e3779b1
   164a0:	muleq	r1, r0, fp
   164a4:	andeq	r0, r0, r3, lsl r7
   164a8:	andeq	r7, r1, r4, lsr ip
   164ac:	strdeq	r7, [r1], -r8
   164b0:	andeq	r0, r0, r4, lsl r7
   164b4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   164b8:	andeq	r0, r0, fp, lsl r7
   164bc:	andeq	r7, r1, r8, lsl #25
   164c0:	strdeq	pc, [r0], -ip

000164c4 <flatcc_builder_table_add_union@@Base>:
   164c4:	push	{r4, r5, r6, r7, lr}
   164c8:	sub	sp, sp, #12
   164cc:	mov	r5, r1
   164d0:	add	r1, sp, #8
   164d4:	stmdb	r1, {r2, r3}
   164d8:	ldr	r3, [r0, #32]
   164dc:	ldrh	r3, [r3, #14]
   164e0:	cmp	r3, #3
   164e4:	bne	16554 <flatcc_builder_table_add_union@@Base+0x90>
   164e8:	mov	r4, r0
   164ec:	ldrb	r7, [sp]
   164f0:	ldr	r6, [sp, #4]
   164f4:	adds	r3, r6, #0
   164f8:	movne	r3, #1
   164fc:	cmp	r7, #0
   16500:	movne	r3, #0
   16504:	cmp	r3, #0
   16508:	bne	16568 <flatcc_builder_table_add_union@@Base+0xa4>
   1650c:	cmp	r6, #0
   16510:	beq	16528 <flatcc_builder_table_add_union@@Base+0x64>
   16514:	mov	r1, r5
   16518:	bl	16384 <flatcc_builder_table_add_offset@@Base>
   1651c:	cmp	r0, #0
   16520:	strne	r6, [r0]
   16524:	beq	1657c <flatcc_builder_table_add_union@@Base+0xb8>
   16528:	mov	r3, #1
   1652c:	mov	r2, r3
   16530:	sub	r1, r5, #1
   16534:	mov	r0, r4
   16538:	bl	161b8 <flatcc_builder_table_add@@Base>
   1653c:	cmp	r0, #0
   16540:	beq	16590 <flatcc_builder_table_add_union@@Base+0xcc>
   16544:	strb	r7, [r0]
   16548:	mov	r0, #0
   1654c:	add	sp, sp, #12
   16550:	pop	{r4, r5, r6, r7, pc}
   16554:	ldr	r3, [pc, #72]	; 165a4 <flatcc_builder_table_add_union@@Base+0xe0>
   16558:	ldr	r2, [pc, #72]	; 165a8 <flatcc_builder_table_add_union@@Base+0xe4>
   1655c:	ldr	r1, [pc, #72]	; 165ac <flatcc_builder_table_add_union@@Base+0xe8>
   16560:	ldr	r0, [pc, #72]	; 165b0 <flatcc_builder_table_add_union@@Base+0xec>
   16564:	bl	1206c <__assert_fail@plt>
   16568:	ldr	r3, [pc, #52]	; 165a4 <flatcc_builder_table_add_union@@Base+0xe0>
   1656c:	ldr	r2, [pc, #64]	; 165b4 <flatcc_builder_table_add_union@@Base+0xf0>
   16570:	ldr	r1, [pc, #52]	; 165ac <flatcc_builder_table_add_union@@Base+0xe8>
   16574:	ldr	r0, [pc, #60]	; 165b8 <flatcc_builder_table_add_union@@Base+0xf4>
   16578:	bl	1206c <__assert_fail@plt>
   1657c:	ldr	r3, [pc, #32]	; 165a4 <flatcc_builder_table_add_union@@Base+0xe0>
   16580:	ldr	r2, [pc, #52]	; 165bc <flatcc_builder_table_add_union@@Base+0xf8>
   16584:	ldr	r1, [pc, #32]	; 165ac <flatcc_builder_table_add_union@@Base+0xe8>
   16588:	ldr	r0, [pc, #48]	; 165c0 <flatcc_builder_table_add_union@@Base+0xfc>
   1658c:	bl	1206c <__assert_fail@plt>
   16590:	ldr	r3, [pc, #12]	; 165a4 <flatcc_builder_table_add_union@@Base+0xe0>
   16594:	ldr	r2, [pc, #40]	; 165c4 <flatcc_builder_table_add_union@@Base+0x100>
   16598:	ldr	r1, [pc, #12]	; 165ac <flatcc_builder_table_add_union@@Base+0xe8>
   1659c:	ldr	r0, [pc, #36]	; 165c8 <flatcc_builder_table_add_union@@Base+0x104>
   165a0:	bl	1206c <__assert_fail@plt>
   165a4:			; <UNDEFINED> instruction: 0x00017bb0
   165a8:	andeq	r0, r0, lr, ror #11
   165ac:	andeq	r7, r1, r4, lsr ip
   165b0:	strdeq	r7, [r1], -r8
   165b4:	andeq	r0, r0, pc, ror #11
   165b8:	ldrdeq	r7, [r1], -r4
   165bc:	strdeq	r0, [r0], -r2
   165c0:	strdeq	r7, [r1], -r8
   165c4:	strdeq	r0, [r0], -r6
   165c8:	andeq	r8, r1, r4

000165cc <flatcc_builder_table_add_union_vector@@Base>:
   165cc:	push	{r4, r5, r6, r7, lr}
   165d0:	sub	sp, sp, #12
   165d4:	mov	r7, r1
   165d8:	add	r1, sp, #8
   165dc:	stmdb	r1, {r2, r3}
   165e0:	ldr	r4, [sp]
   165e4:	ldr	r6, [sp, #4]
   165e8:	ldr	r3, [r0, #32]
   165ec:	ldrh	r3, [r3, #14]
   165f0:	cmp	r3, #3
   165f4:	bne	16630 <flatcc_builder_table_add_union_vector@@Base+0x64>
   165f8:	mov	r5, r0
   165fc:	clz	r3, r6
   16600:	lsr	r3, r3, #5
   16604:	clz	r2, r4
   16608:	lsr	r2, r2, #5
   1660c:	cmp	r2, r3
   16610:	beq	16658 <flatcc_builder_table_add_union_vector@@Base+0x8c>
   16614:	adds	r4, r4, #0
   16618:	movne	r4, #1
   1661c:	cmp	r4, r3
   16620:	mvnne	r0, #0
   16624:	beq	16644 <flatcc_builder_table_add_union_vector@@Base+0x78>
   16628:	add	sp, sp, #12
   1662c:	pop	{r4, r5, r6, r7, pc}
   16630:	ldr	r3, [pc, #136]	; 166c0 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16634:	mov	r2, #1536	; 0x600
   16638:	ldr	r1, [pc, #132]	; 166c4 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   1663c:	ldr	r0, [pc, #132]	; 166c8 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   16640:	bl	1206c <__assert_fail@plt>
   16644:	ldr	r3, [pc, #116]	; 166c0 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16648:	ldr	r2, [pc, #124]	; 166cc <flatcc_builder_table_add_union_vector@@Base+0x100>
   1664c:	ldr	r1, [pc, #112]	; 166c4 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16650:	ldr	r0, [pc, #120]	; 166d0 <flatcc_builder_table_add_union_vector@@Base+0x104>
   16654:	bl	1206c <__assert_fail@plt>
   16658:	cmp	r4, #0
   1665c:	moveq	r0, #0
   16660:	beq	16628 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16664:	sub	r1, r7, #1
   16668:	mov	r0, r5
   1666c:	bl	16384 <flatcc_builder_table_add_offset@@Base>
   16670:	cmp	r0, #0
   16674:	beq	166ac <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16678:	str	r4, [r0]
   1667c:	mov	r1, r7
   16680:	mov	r0, r5
   16684:	bl	16384 <flatcc_builder_table_add_offset@@Base>
   16688:	cmp	r0, #0
   1668c:	strne	r6, [r0]
   16690:	movne	r0, #0
   16694:	bne	16628 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16698:	ldr	r3, [pc, #32]	; 166c0 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   1669c:	ldr	r2, [pc, #48]	; 166d4 <flatcc_builder_table_add_union_vector@@Base+0x108>
   166a0:	ldr	r1, [pc, #28]	; 166c4 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   166a4:	ldr	r0, [pc, #44]	; 166d8 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   166a8:	bl	1206c <__assert_fail@plt>
   166ac:	ldr	r3, [pc, #12]	; 166c0 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   166b0:	ldr	r2, [pc, #36]	; 166dc <flatcc_builder_table_add_union_vector@@Base+0x110>
   166b4:	ldr	r1, [pc, #8]	; 166c4 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   166b8:	ldr	r0, [pc, #24]	; 166d8 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   166bc:	bl	1206c <__assert_fail@plt>
   166c0:	ldrdeq	r7, [r1], -r0
   166c4:	andeq	r7, r1, r4, lsr ip
   166c8:	strdeq	r7, [r1], -r8
   166cc:	andeq	r0, r0, r1, lsl #12
   166d0:	andeq	r8, r1, r0, lsl r0
   166d4:	andeq	r0, r0, r8, lsl #12
   166d8:	strdeq	r7, [r1], -r8
   166dc:	andeq	r0, r0, r4, lsl #12

000166e0 <flatcc_builder_push_buffer_alignment@@Base>:
   166e0:	mov	r3, r0
   166e4:	ldrh	r0, [r0, #128]	; 0x80
   166e8:	mov	r2, #4
   166ec:	strh	r2, [r3, #128]	; 0x80
   166f0:	bx	lr

000166f4 <flatcc_builder_pop_buffer_alignment@@Base>:
   166f4:	ldrh	r3, [r0, #128]	; 0x80
   166f8:	cmp	r3, r1
   166fc:	strhcc	r1, [r0, #128]	; 0x80
   16700:	bx	lr

00016704 <flatcc_builder_get_buffer_alignment@@Base>:
   16704:	ldrh	r0, [r0, #128]	; 0x80
   16708:	bx	lr

0001670c <flatcc_builder_set_vtable_clustering@@Base>:
   1670c:	clz	r1, r1
   16710:	lsr	r1, r1, #5
   16714:	str	r1, [r0, #180]	; 0xb4
   16718:	bx	lr

0001671c <flatcc_builder_set_block_align@@Base>:
   1671c:	strh	r1, [r0, #132]	; 0x84
   16720:	bx	lr

00016724 <flatcc_builder_get_level@@Base>:
   16724:	ldr	r0, [r0, #156]	; 0x9c
   16728:	bx	lr

0001672c <flatcc_builder_set_max_level@@Base>:
   1672c:	str	r1, [r0, #176]	; 0xb0
   16730:	ldr	r3, [r0, #160]	; 0xa0
   16734:	cmp	r1, r3
   16738:	strgt	r1, [r0, #160]	; 0xa0
   1673c:	bx	lr

00016740 <flatcc_builder_get_buffer_size@@Base>:
   16740:	ldr	r2, [r0, #140]	; 0x8c
   16744:	ldr	r0, [r0, #136]	; 0x88
   16748:	sub	r0, r2, r0
   1674c:	bx	lr

00016750 <flatcc_builder_get_buffer_start@@Base>:
   16750:	ldr	r0, [r0, #136]	; 0x88
   16754:	bx	lr

00016758 <flatcc_builder_get_buffer_end@@Base>:
   16758:	ldr	r0, [r0, #140]	; 0x8c
   1675c:	bx	lr

00016760 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16760:	str	r1, [r0, #172]	; 0xac
   16764:	bx	lr

00016768 <flatcc_builder_set_identifier@@Base>:
   16768:	ldr	r3, [pc, #16]	; 16780 <flatcc_builder_set_identifier@@Base+0x18>
   1676c:	cmp	r1, #0
   16770:	moveq	r1, r3
   16774:	ldr	r3, [r1]
   16778:	str	r3, [r0, #168]	; 0xa8
   1677c:	bx	lr
   16780:	andeq	r7, r1, r4, ror #9

00016784 <flatcc_builder_get_type@@Base>:
   16784:	ldr	r3, [r0, #32]
   16788:	cmp	r3, #0
   1678c:	ldrhne	r0, [r3, #14]
   16790:	moveq	r0, #0
   16794:	bx	lr

00016798 <flatcc_builder_get_type_at@@Base>:
   16798:	cmp	r1, #0
   1679c:	ble	167c4 <flatcc_builder_get_type_at@@Base+0x2c>
   167a0:	ldr	r3, [r0, #156]	; 0x9c
   167a4:	cmp	r1, r3
   167a8:	bgt	167cc <flatcc_builder_get_type_at@@Base+0x34>
   167ac:	sub	r1, r1, r3
   167b0:	ldr	r3, [r0, #32]
   167b4:	add	r1, r1, r1, lsl #3
   167b8:	add	r1, r3, r1, lsl #2
   167bc:	ldrh	r0, [r1, #14]
   167c0:	bx	lr
   167c4:	mov	r0, #0
   167c8:	bx	lr
   167cc:	mov	r0, #0
   167d0:	bx	lr

000167d4 <flatcc_builder_get_direct_buffer@@Base>:
   167d4:	ldr	r3, [r0, #184]	; 0xb8
   167d8:	cmp	r3, #0
   167dc:	beq	16818 <flatcc_builder_get_direct_buffer@@Base+0x44>
   167e0:	ldr	r2, [r0, #188]	; 0xbc
   167e4:	ldr	r3, [r0, #192]	; 0xc0
   167e8:	cmp	r2, r3
   167ec:	beq	16804 <flatcc_builder_get_direct_buffer@@Base+0x30>
   167f0:	cmp	r1, #0
   167f4:	beq	1682c <flatcc_builder_get_direct_buffer@@Base+0x58>
   167f8:	mov	r0, #0
   167fc:	str	r0, [r1]
   16800:	bx	lr
   16804:	cmp	r1, #0
   16808:	ldrne	r3, [r0, #212]	; 0xd4
   1680c:	strne	r3, [r1]
   16810:	ldr	r0, [r0, #196]	; 0xc4
   16814:	bx	lr
   16818:	cmp	r1, #0
   1681c:	beq	16834 <flatcc_builder_get_direct_buffer@@Base+0x60>
   16820:	mov	r0, #0
   16824:	str	r0, [r1]
   16828:	bx	lr
   1682c:	mov	r0, #0
   16830:	bx	lr
   16834:	mov	r0, #0
   16838:	bx	lr

0001683c <flatcc_builder_copy_buffer@@Base>:
   1683c:	ldr	r3, [r0, #184]	; 0xb8
   16840:	cmp	r3, #0
   16844:	beq	16870 <flatcc_builder_copy_buffer@@Base+0x34>
   16848:	push	{r4, lr}
   1684c:	add	r0, r0, #188	; 0xbc
   16850:	bl	16f6c <flatcc_emitter_copy_buffer@@Base>
   16854:	cmp	r0, #0
   16858:	popne	{r4, pc}
   1685c:	ldr	r3, [pc, #20]	; 16878 <flatcc_builder_copy_buffer@@Base+0x3c>
   16860:	ldr	r2, [pc, #20]	; 1687c <flatcc_builder_copy_buffer@@Base+0x40>
   16864:	ldr	r1, [pc, #20]	; 16880 <flatcc_builder_copy_buffer@@Base+0x44>
   16868:	ldr	r0, [pc, #20]	; 16884 <flatcc_builder_copy_buffer@@Base+0x48>
   1686c:	bl	1206c <__assert_fail@plt>
   16870:	mov	r0, #0
   16874:	bx	lr
   16878:	strdeq	r7, [r1], -r8
   1687c:	andeq	r0, r0, r6, lsl #15
   16880:	andeq	r7, r1, r4, lsr ip
   16884:	andeq	r8, r1, r8, lsr r0

00016888 <flatcc_builder_finalize_buffer@@Base>:
   16888:	push	{r4, r5, r6, lr}
   1688c:	mov	r5, r0
   16890:	ldr	r4, [r0, #140]	; 0x8c
   16894:	ldr	r3, [r0, #136]	; 0x88
   16898:	sub	r4, r4, r3
   1689c:	cmp	r1, #0
   168a0:	strne	r4, [r1]
   168a4:	mov	r0, r4
   168a8:	bl	12000 <malloc@plt>
   168ac:	subs	r6, r0, #0
   168b0:	beq	168d4 <flatcc_builder_finalize_buffer@@Base+0x4c>
   168b4:	mov	r2, r4
   168b8:	mov	r1, r6
   168bc:	mov	r0, r5
   168c0:	bl	1683c <flatcc_builder_copy_buffer@@Base>
   168c4:	cmp	r0, #0
   168c8:	beq	168e8 <flatcc_builder_finalize_buffer@@Base+0x60>
   168cc:	mov	r0, r6
   168d0:	pop	{r4, r5, r6, pc}
   168d4:	ldr	r3, [pc, #32]	; 168fc <flatcc_builder_finalize_buffer@@Base+0x74>
   168d8:	ldr	r2, [pc, #32]	; 16900 <flatcc_builder_finalize_buffer@@Base+0x78>
   168dc:	ldr	r1, [pc, #32]	; 16904 <flatcc_builder_finalize_buffer@@Base+0x7c>
   168e0:	ldr	r0, [pc, #32]	; 16908 <flatcc_builder_finalize_buffer@@Base+0x80>
   168e4:	bl	1206c <__assert_fail@plt>
   168e8:	ldr	r3, [pc, #12]	; 168fc <flatcc_builder_finalize_buffer@@Base+0x74>
   168ec:	ldr	r2, [pc, #24]	; 1690c <flatcc_builder_finalize_buffer@@Base+0x84>
   168f0:	ldr	r1, [pc, #12]	; 16904 <flatcc_builder_finalize_buffer@@Base+0x7c>
   168f4:	ldr	r0, [pc, #12]	; 16908 <flatcc_builder_finalize_buffer@@Base+0x80>
   168f8:	bl	1206c <__assert_fail@plt>
   168fc:	andeq	r7, r1, r4, lsl ip
   16900:	muleq	r0, r8, r7
   16904:	andeq	r7, r1, r4, lsr ip
   16908:	andeq	r7, r1, r8, lsl #25
   1690c:	muleq	r0, ip, r7

00016910 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16910:	push	{r4, r5, r6, r7, lr}
   16914:	sub	sp, sp, #12
   16918:	mov	r7, r0
   1691c:	ldr	r4, [r0, #140]	; 0x8c
   16920:	ldr	r3, [r0, #136]	; 0x88
   16924:	sub	r3, r4, r3
   16928:	subs	r6, r1, #0
   1692c:	strne	r3, [r6]
   16930:	ldrh	r1, [r0, #128]	; 0x80
   16934:	sub	r4, r1, #1
   16938:	add	r4, r4, r3
   1693c:	rsb	r3, r1, #0
   16940:	and	r4, r4, r3
   16944:	add	r0, sp, #8
   16948:	mov	r3, #0
   1694c:	str	r3, [r0, #-4]!
   16950:	mov	r2, r4
   16954:	cmp	r1, #4
   16958:	movcc	r1, #4
   1695c:	bl	12030 <posix_memalign@plt>
   16960:	cmp	r0, #0
   16964:	beq	16988 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   16968:	ldr	r0, [sp, #4]
   1696c:	cmp	r0, #0
   16970:	beq	16978 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   16974:	bl	11fac <free@plt>
   16978:	cmp	r6, #0
   1697c:	mov	r5, #0
   16980:	strne	r5, [r6]
   16984:	b	169ac <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   16988:	ldr	r5, [sp, #4]
   1698c:	cmp	r5, #0
   16990:	beq	16978 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   16994:	mov	r2, r4
   16998:	mov	r1, r5
   1699c:	mov	r0, r7
   169a0:	bl	1683c <flatcc_builder_copy_buffer@@Base>
   169a4:	cmp	r0, #0
   169a8:	beq	169b8 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   169ac:	mov	r0, r5
   169b0:	add	sp, sp, #12
   169b4:	pop	{r4, r5, r6, r7, pc}
   169b8:	mov	r0, r5
   169bc:	bl	11fac <free@plt>
   169c0:	b	16978 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>

000169c4 <flatcc_builder_aligned_alloc@@Base>:
   169c4:	push	{lr}		; (str lr, [sp, #-4]!)
   169c8:	sub	sp, sp, #12
   169cc:	add	r3, sp, #8
   169d0:	mov	r2, #0
   169d4:	str	r2, [r3, #-4]!
   169d8:	mov	r2, r1
   169dc:	cmp	r0, #4
   169e0:	movcs	r1, r0
   169e4:	movcc	r1, #4
   169e8:	mov	r0, r3
   169ec:	bl	12030 <posix_memalign@plt>
   169f0:	cmp	r0, #0
   169f4:	beq	16a10 <flatcc_builder_aligned_alloc@@Base+0x4c>
   169f8:	ldr	r0, [sp, #4]
   169fc:	cmp	r0, #0
   16a00:	beq	16a10 <flatcc_builder_aligned_alloc@@Base+0x4c>
   16a04:	bl	11fac <free@plt>
   16a08:	mov	r3, #0
   16a0c:	str	r3, [sp, #4]
   16a10:	ldr	r0, [sp, #4]
   16a14:	add	sp, sp, #12
   16a18:	pop	{pc}		; (ldr pc, [sp], #4)

00016a1c <flatcc_builder_aligned_free@@Base>:
   16a1c:	push	{r4, lr}
   16a20:	bl	11fac <free@plt>
   16a24:	pop	{r4, pc}

00016a28 <flatcc_builder_get_emit_context@@Base>:
   16a28:	ldr	r0, [r0, #36]	; 0x24
   16a2c:	bx	lr

00016a30 <flatcc_emitter_recycle_page@@Base>:
   16a30:	ldr	r3, [r0]
   16a34:	cmp	r3, r1
   16a38:	beq	16a88 <flatcc_emitter_recycle_page@@Base+0x58>
   16a3c:	ldr	r3, [r0, #4]
   16a40:	cmp	r1, r3
   16a44:	beq	16a90 <flatcc_emitter_recycle_page@@Base+0x60>
   16a48:	ldr	r3, [r1, #2944]	; 0xb80
   16a4c:	ldr	r2, [r1, #2948]	; 0xb84
   16a50:	str	r2, [r3, #2948]	; 0xb84
   16a54:	ldr	r3, [r1, #2948]	; 0xb84
   16a58:	ldr	r2, [r1, #2944]	; 0xb80
   16a5c:	str	r2, [r3, #2944]	; 0xb80
   16a60:	ldr	r3, [r0]
   16a64:	ldr	r3, [r3, #2948]	; 0xb84
   16a68:	str	r3, [r1, #2948]	; 0xb84
   16a6c:	ldr	r2, [r0]
   16a70:	str	r2, [r1, #2944]	; 0xb80
   16a74:	str	r1, [r3, #2944]	; 0xb80
   16a78:	ldr	r3, [r1, #2944]	; 0xb80
   16a7c:	str	r1, [r3, #2948]	; 0xb84
   16a80:	mov	r0, #0
   16a84:	bx	lr
   16a88:	mvn	r0, #0
   16a8c:	bx	lr
   16a90:	mvn	r0, #0
   16a94:	bx	lr

00016a98 <flatcc_emitter_reset@@Base>:
   16a98:	ldr	r3, [r0]
   16a9c:	cmp	r3, #0
   16aa0:	bxeq	lr
   16aa4:	str	r3, [r0, #4]
   16aa8:	add	r2, r3, #1472	; 0x5c0
   16aac:	str	r2, [r0, #8]
   16ab0:	str	r2, [r0, #16]
   16ab4:	mov	r2, #1472	; 0x5c0
   16ab8:	str	r2, [r0, #12]
   16abc:	str	r2, [r0, #20]
   16ac0:	sub	r2, r2, #2944	; 0xb80
   16ac4:	str	r2, [r3, #2952]	; 0xb88
   16ac8:	ldr	r3, [r0, #32]
   16acc:	cmp	r3, #0
   16ad0:	ldreq	r3, [r0, #24]
   16ad4:	streq	r3, [r0, #32]
   16ad8:	ldr	r3, [r0, #32]
   16adc:	add	r2, r3, r3, lsl #1
   16ae0:	ldr	r3, [r0, #24]
   16ae4:	lsr	r3, r3, #2
   16ae8:	add	r3, r3, r2, lsr #2
   16aec:	str	r3, [r0, #32]
   16af0:	mov	r2, #0
   16af4:	str	r2, [r0, #24]
   16af8:	ldr	r2, [r0, #28]
   16afc:	cmp	r2, r3, lsl #1
   16b00:	bxls	lr
   16b04:	push	{r4, lr}
   16b08:	mov	r4, r0
   16b0c:	ldr	r3, [r0, #4]
   16b10:	ldr	r0, [r3, #2944]	; 0xb80
   16b14:	ldr	r2, [r4]
   16b18:	cmp	r0, r2
   16b1c:	popeq	{r4, pc}
   16b20:	ldr	r2, [r0, #2944]	; 0xb80
   16b24:	str	r2, [r3, #2944]	; 0xb80
   16b28:	ldr	r3, [r0, #2944]	; 0xb80
   16b2c:	ldr	r2, [r4, #4]
   16b30:	str	r2, [r3, #2948]	; 0xb84
   16b34:	bl	11fac <free@plt>
   16b38:	ldr	r3, [r4, #28]
   16b3c:	sub	r3, r3, #2944	; 0xb80
   16b40:	str	r3, [r4, #28]
   16b44:	ldr	r2, [r4, #32]
   16b48:	cmp	r3, r2, lsl #1
   16b4c:	popls	{r4, pc}
   16b50:	ldr	r3, [r4, #4]
   16b54:	ldr	r0, [r3, #2944]	; 0xb80
   16b58:	ldr	r2, [r4]
   16b5c:	cmp	r0, r2
   16b60:	bne	16b20 <flatcc_emitter_reset@@Base+0x88>
   16b64:	pop	{r4, pc}

00016b68 <flatcc_emitter_clear@@Base>:
   16b68:	ldr	r3, [r0]
   16b6c:	cmp	r3, #0
   16b70:	bxeq	lr
   16b74:	push	{r4, r5, r6, lr}
   16b78:	mov	r5, r0
   16b7c:	ldr	r2, [r3, #2948]	; 0xb84
   16b80:	mov	r1, #0
   16b84:	str	r1, [r2, #2944]	; 0xb80
   16b88:	ldr	r4, [r3, #2944]	; 0xb80
   16b8c:	cmp	r4, r1
   16b90:	bne	16ba0 <flatcc_emitter_clear@@Base+0x38>
   16b94:	mov	r4, r3
   16b98:	b	16bb4 <flatcc_emitter_clear@@Base+0x4c>
   16b9c:	mov	r4, r3
   16ba0:	ldr	r0, [r4, #2948]	; 0xb84
   16ba4:	bl	11fac <free@plt>
   16ba8:	ldr	r3, [r4, #2944]	; 0xb80
   16bac:	cmp	r3, #0
   16bb0:	bne	16b9c <flatcc_emitter_clear@@Base+0x34>
   16bb4:	mov	r0, r4
   16bb8:	bl	11fac <free@plt>
   16bbc:	mov	r2, #36	; 0x24
   16bc0:	mov	r1, #0
   16bc4:	mov	r0, r5
   16bc8:	bl	1203c <memset@plt>
   16bcc:	pop	{r4, r5, r6, pc}

00016bd0 <flatcc_emitter@@Base>:
   16bd0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bd4:	mov	r4, r0
   16bd8:	ldr	ip, [sp, #40]	; 0x28
   16bdc:	ldr	r0, [r0, #24]
   16be0:	add	r0, r0, ip
   16be4:	str	r0, [r4, #24]
   16be8:	cmp	r3, #0
   16bec:	blt	16c18 <flatcc_emitter@@Base+0x48>
   16bf0:	ldr	r3, [r4, #20]
   16bf4:	cmp	ip, r3
   16bf8:	bls	16d04 <flatcc_emitter@@Base+0x134>
   16bfc:	cmp	r2, #0
   16c00:	addne	r7, r1, #8
   16c04:	movne	sl, r2
   16c08:	movne	fp, #2944	; 0xb80
   16c0c:	bne	16eb8 <flatcc_emitter@@Base+0x2e8>
   16c10:	mov	r0, r2
   16c14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c18:	ldr	r3, [r4, #12]
   16c1c:	cmp	ip, r3
   16c20:	bhi	16c44 <flatcc_emitter@@Base+0x74>
   16c24:	ldr	r5, [r4, #8]
   16c28:	sub	r5, r5, ip
   16c2c:	str	r5, [r4, #8]
   16c30:	sub	r3, r3, ip
   16c34:	str	r3, [r4, #12]
   16c38:	b	16d18 <flatcc_emitter@@Base+0x148>
   16c3c:	mov	r0, r2
   16c40:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c44:	add	r7, r1, r2, lsl #3
   16c48:	mov	r8, r2
   16c4c:	mov	fp, #1472	; 0x5c0
   16c50:	mov	sl, #2944	; 0xb80
   16c54:	b	16e34 <flatcc_emitter@@Base+0x264>
   16c58:	mov	r2, r5
   16c5c:	rsb	r1, r2, #0
   16c60:	ldr	r0, [r4, #8]
   16c64:	add	r0, r0, r1
   16c68:	str	r0, [r4, #8]
   16c6c:	sub	r3, r3, r2
   16c70:	str	r3, [r4, #12]
   16c74:	add	r6, r6, r1
   16c78:	sub	r5, r5, r2
   16c7c:	mov	r1, r6
   16c80:	bl	11fb8 <memcpy@plt>
   16c84:	cmp	r5, #0
   16c88:	beq	16e2c <flatcc_emitter@@Base+0x25c>
   16c8c:	ldr	r3, [r4, #12]
   16c90:	cmp	r3, r5
   16c94:	bcs	16c58 <flatcc_emitter@@Base+0x88>
   16c98:	cmp	r3, #0
   16c9c:	movne	r2, r3
   16ca0:	bne	16c5c <flatcc_emitter@@Base+0x8c>
   16ca4:	ldr	r9, [r4]
   16ca8:	cmp	r9, #0
   16cac:	beq	16f4c <flatcc_emitter@@Base+0x37c>
   16cb0:	ldr	r2, [r9, #2948]	; 0xb84
   16cb4:	ldr	r3, [r4, #4]
   16cb8:	cmp	r2, r3
   16cbc:	beq	16ed4 <flatcc_emitter@@Base+0x304>
   16cc0:	ldr	r3, [r9, #2952]	; 0xb88
   16cc4:	sub	r3, r3, #2944	; 0xb80
   16cc8:	str	r3, [r2, #2952]	; 0xb88
   16ccc:	ldr	r3, [r4]
   16cd0:	ldr	r3, [r3, #2948]	; 0xb84
   16cd4:	str	r3, [r4]
   16cd8:	ldr	r3, [r4]
   16cdc:	add	r2, r3, #2944	; 0xb80
   16ce0:	str	r2, [r4, #8]
   16ce4:	str	sl, [r4, #12]
   16ce8:	ldr	r2, [r3, #2944]	; 0xb80
   16cec:	ldr	r2, [r2, #2952]	; 0xb88
   16cf0:	sub	r2, r2, #2944	; 0xb80
   16cf4:	str	r2, [r3, #2952]	; 0xb88
   16cf8:	b	16c84 <flatcc_emitter@@Base+0xb4>
   16cfc:	mov	r0, #0
   16d00:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d04:	ldr	r5, [r4, #16]
   16d08:	add	r0, r5, ip
   16d0c:	str	r0, [r4, #16]
   16d10:	sub	r3, r3, ip
   16d14:	str	r3, [r4, #20]
   16d18:	cmp	r2, #0
   16d1c:	addne	r4, r1, #8
   16d20:	movne	r8, r2
   16d24:	beq	16c3c <flatcc_emitter@@Base+0x6c>
   16d28:	ldr	r2, [r4, #-4]
   16d2c:	ldr	r1, [r4, #-8]
   16d30:	mov	r0, r5
   16d34:	bl	11fb8 <memcpy@plt>
   16d38:	ldr	r3, [r4, #-4]
   16d3c:	add	r5, r5, r3
   16d40:	add	r4, r4, #8
   16d44:	subs	r8, r8, #1
   16d48:	bne	16d28 <flatcc_emitter@@Base+0x158>
   16d4c:	mov	r0, #0
   16d50:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d54:	ldr	r0, [pc, #520]	; 16f64 <flatcc_emitter@@Base+0x394>
   16d58:	bl	12000 <malloc@plt>
   16d5c:	cmp	r0, #0
   16d60:	beq	16e1c <flatcc_emitter@@Base+0x24c>
   16d64:	ldr	r3, [r4, #28]
   16d68:	add	r3, r3, #2944	; 0xb80
   16d6c:	str	r3, [r4, #28]
   16d70:	str	r5, [r0, #2948]	; 0xb84
   16d74:	str	r9, [r0, #2944]	; 0xb80
   16d78:	str	r0, [r9, #2948]	; 0xb84
   16d7c:	ldr	r3, [r4, #4]
   16d80:	str	r0, [r3, #2944]	; 0xb80
   16d84:	str	r0, [r4, #4]
   16d88:	b	16dfc <flatcc_emitter@@Base+0x22c>
   16d8c:	mov	r5, r6
   16d90:	mov	r2, r5
   16d94:	mov	r1, r8
   16d98:	ldr	r0, [r4, #16]
   16d9c:	bl	11fb8 <memcpy@plt>
   16da0:	sub	r6, r6, r5
   16da4:	add	r8, r8, r5
   16da8:	ldr	r3, [r4, #16]
   16dac:	add	r3, r3, r5
   16db0:	str	r3, [r4, #16]
   16db4:	ldr	r3, [r4, #20]
   16db8:	sub	r5, r3, r5
   16dbc:	str	r5, [r4, #20]
   16dc0:	cmp	r6, #0
   16dc4:	beq	16eac <flatcc_emitter@@Base+0x2dc>
   16dc8:	ldr	r5, [r4, #20]
   16dcc:	cmp	r5, r6
   16dd0:	bcs	16d8c <flatcc_emitter@@Base+0x1bc>
   16dd4:	cmp	r5, #0
   16dd8:	bne	16d90 <flatcc_emitter@@Base+0x1c0>
   16ddc:	ldr	r5, [r4, #4]
   16de0:	cmp	r5, #0
   16de4:	beq	16e94 <flatcc_emitter@@Base+0x2c4>
   16de8:	ldr	r9, [r5, #2944]	; 0xb80
   16dec:	ldr	r3, [r4]
   16df0:	cmp	r9, r3
   16df4:	strne	r9, [r4, #4]
   16df8:	beq	16d54 <flatcc_emitter@@Base+0x184>
   16dfc:	ldr	r3, [r4, #4]
   16e00:	str	r3, [r4, #16]
   16e04:	str	fp, [r4, #20]
   16e08:	ldr	r2, [r3, #2948]	; 0xb84
   16e0c:	ldr	r2, [r2, #2952]	; 0xb88
   16e10:	add	r2, r2, #2944	; 0xb80
   16e14:	str	r2, [r3, #2952]	; 0xb88
   16e18:	b	16dc0 <flatcc_emitter@@Base+0x1f0>
   16e1c:	mvn	r0, #0
   16e20:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e24:	mvn	r0, #0
   16e28:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e2c:	sub	r7, r7, #8
   16e30:	sub	r8, r8, #1
   16e34:	cmp	r8, #0
   16e38:	beq	16cfc <flatcc_emitter@@Base+0x12c>
   16e3c:	ldr	r5, [r7, #-4]
   16e40:	ldr	r6, [r7, #-8]
   16e44:	add	r6, r6, r5
   16e48:	cmp	r5, #0
   16e4c:	bne	16c8c <flatcc_emitter@@Base+0xbc>
   16e50:	b	16e2c <flatcc_emitter@@Base+0x25c>
   16e54:	ldr	r3, [r4, #28]
   16e58:	add	r3, r3, #2944	; 0xb80
   16e5c:	str	r3, [r4, #28]
   16e60:	str	r0, [r4]
   16e64:	str	r0, [r4, #4]
   16e68:	str	r0, [r0, #2944]	; 0xb80
   16e6c:	str	r0, [r0, #2948]	; 0xb84
   16e70:	add	r3, r0, #1472	; 0x5c0
   16e74:	str	r3, [r4, #8]
   16e78:	str	r3, [r4, #16]
   16e7c:	mov	r3, #1472	; 0x5c0
   16e80:	str	r3, [r4, #12]
   16e84:	str	r3, [r4, #20]
   16e88:	sub	r3, r3, #2944	; 0xb80
   16e8c:	str	r3, [r0, #2952]	; 0xb88
   16e90:	b	16dc0 <flatcc_emitter@@Base+0x1f0>
   16e94:	ldr	r0, [pc, #200]	; 16f64 <flatcc_emitter@@Base+0x394>
   16e98:	bl	12000 <malloc@plt>
   16e9c:	cmp	r0, #0
   16ea0:	bne	16e54 <flatcc_emitter@@Base+0x284>
   16ea4:	mvn	r0, #0
   16ea8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16eac:	add	r7, r7, #8
   16eb0:	subs	sl, sl, #1
   16eb4:	beq	16ecc <flatcc_emitter@@Base+0x2fc>
   16eb8:	ldr	r8, [r7, #-8]
   16ebc:	ldr	r6, [r7, #-4]
   16ec0:	cmp	r6, #0
   16ec4:	bne	16dc8 <flatcc_emitter@@Base+0x1f8>
   16ec8:	b	16eac <flatcc_emitter@@Base+0x2dc>
   16ecc:	mov	r0, #0
   16ed0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ed4:	ldr	r0, [pc, #136]	; 16f64 <flatcc_emitter@@Base+0x394>
   16ed8:	bl	12000 <malloc@plt>
   16edc:	cmp	r0, #0
   16ee0:	beq	16e24 <flatcc_emitter@@Base+0x254>
   16ee4:	ldr	r3, [r4, #28]
   16ee8:	add	r3, r3, #2944	; 0xb80
   16eec:	str	r3, [r4, #28]
   16ef0:	ldr	r3, [r4, #4]
   16ef4:	str	r3, [r0, #2948]	; 0xb84
   16ef8:	str	r9, [r0, #2944]	; 0xb80
   16efc:	str	r0, [r9, #2948]	; 0xb84
   16f00:	ldr	r3, [r4, #4]
   16f04:	str	r0, [r3, #2944]	; 0xb80
   16f08:	str	r0, [r4]
   16f0c:	b	16cd8 <flatcc_emitter@@Base+0x108>
   16f10:	ldr	r3, [r4, #28]
   16f14:	add	r3, r3, #2944	; 0xb80
   16f18:	str	r3, [r4, #28]
   16f1c:	str	r0, [r4]
   16f20:	str	r0, [r4, #4]
   16f24:	str	r0, [r0, #2944]	; 0xb80
   16f28:	str	r0, [r0, #2948]	; 0xb84
   16f2c:	add	r3, r0, #1472	; 0x5c0
   16f30:	str	r3, [r4, #8]
   16f34:	str	r3, [r4, #16]
   16f38:	str	fp, [r4, #12]
   16f3c:	str	fp, [r4, #20]
   16f40:	ldr	r3, [pc, #32]	; 16f68 <flatcc_emitter@@Base+0x398>
   16f44:	str	r3, [r0, #2952]	; 0xb88
   16f48:	b	16c84 <flatcc_emitter@@Base+0xb4>
   16f4c:	ldr	r0, [pc, #16]	; 16f64 <flatcc_emitter@@Base+0x394>
   16f50:	bl	12000 <malloc@plt>
   16f54:	cmp	r0, #0
   16f58:	bne	16f10 <flatcc_emitter@@Base+0x340>
   16f5c:	mvn	r0, #0
   16f60:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f64:	andeq	r0, r0, ip, lsl #23
   16f68:			; <UNDEFINED> instruction: 0xfffffa40

00016f6c <flatcc_emitter_copy_buffer@@Base>:
   16f6c:	push	{r4, r5, r6, r7, r8, lr}
   16f70:	mov	r5, r1
   16f74:	ldr	r1, [r0, #24]
   16f78:	cmp	r1, r2
   16f7c:	bhi	17020 <flatcc_emitter_copy_buffer@@Base+0xb4>
   16f80:	ldr	r3, [r0]
   16f84:	cmp	r3, #0
   16f88:	beq	17028 <flatcc_emitter_copy_buffer@@Base+0xbc>
   16f8c:	mov	r6, r0
   16f90:	ldr	r2, [r0, #4]
   16f94:	cmp	r3, r2
   16f98:	beq	1700c <flatcc_emitter_copy_buffer@@Base+0xa0>
   16f9c:	ldr	r4, [r0, #12]
   16fa0:	rsb	r4, r4, #2944	; 0xb80
   16fa4:	mov	r2, r4
   16fa8:	ldr	r1, [r0, #8]
   16fac:	mov	r0, r5
   16fb0:	bl	11fb8 <memcpy@plt>
   16fb4:	add	r5, r5, r4
   16fb8:	ldr	r3, [r6]
   16fbc:	ldr	r4, [r3, #2944]	; 0xb80
   16fc0:	ldr	r1, [r6, #4]
   16fc4:	cmp	r4, r1
   16fc8:	beq	16ff4 <flatcc_emitter_copy_buffer@@Base+0x88>
   16fcc:	mov	r7, #2944	; 0xb80
   16fd0:	mov	r2, r7
   16fd4:	mov	r1, r4
   16fd8:	mov	r0, r5
   16fdc:	bl	11fb8 <memcpy@plt>
   16fe0:	add	r5, r5, #2944	; 0xb80
   16fe4:	ldr	r4, [r4, #2944]	; 0xb80
   16fe8:	ldr	r1, [r6, #4]
   16fec:	cmp	r1, r4
   16ff0:	bne	16fd0 <flatcc_emitter_copy_buffer@@Base+0x64>
   16ff4:	ldr	r2, [r6, #20]
   16ff8:	rsb	r2, r2, #2944	; 0xb80
   16ffc:	mov	r0, r5
   17000:	bl	11fb8 <memcpy@plt>
   17004:	mov	r0, r5
   17008:	pop	{r4, r5, r6, r7, r8, pc}
   1700c:	mov	r2, r1
   17010:	ldr	r1, [r0, #8]
   17014:	mov	r0, r5
   17018:	bl	11fb8 <memcpy@plt>
   1701c:	b	17004 <flatcc_emitter_copy_buffer@@Base+0x98>
   17020:	mov	r5, #0
   17024:	b	17004 <flatcc_emitter_copy_buffer@@Base+0x98>
   17028:	mov	r5, #0
   1702c:	b	17004 <flatcc_emitter_copy_buffer@@Base+0x98>

00017030 <__libc_csu_init@@Base>:
   17030:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17034:	mov	r7, r0
   17038:	ldr	r6, [pc, #72]	; 17088 <__libc_csu_init@@Base+0x58>
   1703c:	ldr	r5, [pc, #72]	; 1708c <__libc_csu_init@@Base+0x5c>
   17040:	add	r6, pc, r6
   17044:	add	r5, pc, r5
   17048:	sub	r6, r6, r5
   1704c:	mov	r8, r1
   17050:	mov	r9, r2
   17054:	bl	11f68 <strcmp@plt-0x20>
   17058:	asrs	r6, r6, #2
   1705c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17060:	mov	r4, #0
   17064:	add	r4, r4, #1
   17068:	ldr	r3, [r5], #4
   1706c:	mov	r2, r9
   17070:	mov	r1, r8
   17074:	mov	r0, r7
   17078:	blx	r3
   1707c:	cmp	r6, r4
   17080:	bne	17064 <__libc_csu_init@@Base+0x34>
   17084:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17088:	andeq	r1, r1, r8, asr #29
   1708c:	andeq	r1, r1, r0, asr #29

00017090 <__libc_csu_fini@@Base>:
   17090:	bx	lr

Disassembly of section .fini:

00017094 <.fini>:
   17094:	push	{r3, lr}
   17098:	pop	{r3, pc}
