
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

00010484 <.init>:
   10484:	push	{r3, lr}
   10488:	bl	10564 <strcmp@plt+0x48>
   1048c:	pop	{r3, pc}

Disassembly of section .plt:

00010490 <abort@plt-0x14>:
   10490:	push	{lr}		; (str lr, [sp, #-4]!)
   10494:	ldr	lr, [pc, #4]	; 104a0 <abort@plt-0x4>
   10498:	add	lr, pc, lr
   1049c:	ldr	pc, [lr, #8]!
   104a0:	andeq	r0, r1, r0, ror #22

000104a4 <abort@plt>:
   104a4:	add	ip, pc, #0, 12
   104a8:	add	ip, ip, #16, 20	; 0x10000
   104ac:	ldr	pc, [ip, #2912]!	; 0xb60

000104b0 <__libc_start_main@plt>:
   104b0:	add	ip, pc, #0, 12
   104b4:	add	ip, ip, #16, 20	; 0x10000
   104b8:	ldr	pc, [ip, #2904]!	; 0xb58

000104bc <__gmon_start__@plt>:
   104bc:	add	ip, pc, #0, 12
   104c0:	add	ip, ip, #16, 20	; 0x10000
   104c4:	ldr	pc, [ip, #2896]!	; 0xb50

000104c8 <putchar@plt>:
   104c8:	add	ip, pc, #0, 12
   104cc:	add	ip, ip, #16, 20	; 0x10000
   104d0:	ldr	pc, [ip, #2888]!	; 0xb48

000104d4 <memset@plt>:
   104d4:	add	ip, pc, #0, 12
   104d8:	add	ip, ip, #16, 20	; 0x10000
   104dc:	ldr	pc, [ip, #2880]!	; 0xb40

000104e0 <perror@plt>:
   104e0:	add	ip, pc, #0, 12
   104e4:	add	ip, ip, #16, 20	; 0x10000
   104e8:	ldr	pc, [ip, #2872]!	; 0xb38

000104ec <printf@plt>:
   104ec:	add	ip, pc, #0, 12
   104f0:	add	ip, ip, #16, 20	; 0x10000
   104f4:	ldr	pc, [ip, #2864]!	; 0xb30

000104f8 <fwrite@plt>:
   104f8:	add	ip, pc, #0, 12
   104fc:	add	ip, ip, #16, 20	; 0x10000
   10500:	ldr	pc, [ip, #2856]!	; 0xb28

00010504 <puts@plt>:
   10504:	add	ip, pc, #0, 12
   10508:	add	ip, ip, #16, 20	; 0x10000
   1050c:	ldr	pc, [ip, #2848]!	; 0xb20

00010510 <rb_get_ssl_certfp_file@plt>:
   10510:	add	ip, pc, #0, 12
   10514:	add	ip, ip, #16, 20	; 0x10000
   10518:	ldr	pc, [ip, #2840]!	; 0xb18

0001051c <strcmp@plt>:
   1051c:	add	ip, pc, #0, 12
   10520:	add	ip, ip, #16, 20	; 0x10000
   10524:	ldr	pc, [ip, #2832]!	; 0xb10

Disassembly of section .text:

00010528 <.text>:
   10528:	mov	fp, #0
   1052c:	mov	lr, #0
   10530:	pop	{r1}		; (ldr r1, [sp], #4)
   10534:	mov	r2, sp
   10538:	push	{r2}		; (str r2, [sp, #-4]!)
   1053c:	push	{r0}		; (str r0, [sp, #-4]!)
   10540:	ldr	ip, [pc, #16]	; 10558 <strcmp@plt+0x3c>
   10544:	push	{ip}		; (str ip, [sp, #-4]!)
   10548:	ldr	r0, [pc, #12]	; 1055c <strcmp@plt+0x40>
   1054c:	ldr	r3, [pc, #12]	; 10560 <strcmp@plt+0x44>
   10550:	bl	104b0 <__libc_start_main@plt>
   10554:	bl	104a4 <abort@plt>
   10558:	andeq	r0, r1, r0, asr r8
   1055c:	andeq	r0, r1, r8, lsl r6
   10560:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10564:	ldr	r3, [pc, #20]	; 10580 <strcmp@plt+0x64>
   10568:	ldr	r2, [pc, #20]	; 10584 <strcmp@plt+0x68>
   1056c:	add	r3, pc, r3
   10570:	ldr	r2, [r3, r2]
   10574:	cmp	r2, #0
   10578:	bxeq	lr
   1057c:	b	104bc <__gmon_start__@plt>
   10580:	andeq	r0, r1, ip, lsl #21
   10584:	andeq	r0, r0, r8, lsr r0
   10588:	ldr	r0, [pc, #24]	; 105a8 <strcmp@plt+0x8c>
   1058c:	ldr	r3, [pc, #24]	; 105ac <strcmp@plt+0x90>
   10590:	cmp	r3, r0
   10594:	bxeq	lr
   10598:	ldr	r3, [pc, #16]	; 105b0 <strcmp@plt+0x94>
   1059c:	cmp	r3, #0
   105a0:	bxeq	lr
   105a4:	bx	r3
   105a8:	andeq	r1, r2, r4, asr #32
   105ac:	andeq	r1, r2, r4, asr #32
   105b0:	andeq	r0, r0, r0
   105b4:	ldr	r0, [pc, #36]	; 105e0 <strcmp@plt+0xc4>
   105b8:	ldr	r1, [pc, #36]	; 105e4 <strcmp@plt+0xc8>
   105bc:	sub	r1, r1, r0
   105c0:	asr	r1, r1, #2
   105c4:	add	r1, r1, r1, lsr #31
   105c8:	asrs	r1, r1, #1
   105cc:	bxeq	lr
   105d0:	ldr	r3, [pc, #16]	; 105e8 <strcmp@plt+0xcc>
   105d4:	cmp	r3, #0
   105d8:	bxeq	lr
   105dc:	bx	r3
   105e0:	andeq	r1, r2, r4, asr #32
   105e4:	andeq	r1, r2, r4, asr #32
   105e8:	andeq	r0, r0, r0
   105ec:	push	{r4, lr}
   105f0:	ldr	r4, [pc, #24]	; 10610 <strcmp@plt+0xf4>
   105f4:	ldrb	r3, [r4]
   105f8:	cmp	r3, #0
   105fc:	popne	{r4, pc}
   10600:	bl	10588 <strcmp@plt+0x6c>
   10604:	mov	r3, #1
   10608:	strb	r3, [r4]
   1060c:	pop	{r4, pc}
   10610:	andeq	r1, r2, ip, asr #32
   10614:	b	105b4 <strcmp@plt+0x98>
   10618:	strd	r4, [sp, #-20]!	; 0xffffffec
   1061c:	strd	r6, [sp, #8]
   10620:	str	lr, [sp, #16]
   10624:	sub	sp, sp, #76	; 0x4c
   10628:	mov	r5, r0
   1062c:	mov	r4, r1
   10630:	mov	r2, #65	; 0x41
   10634:	mov	r1, #0
   10638:	add	r0, sp, #4
   1063c:	bl	104d4 <memset@plt>
   10640:	cmp	r5, #3
   10644:	bne	106ec <strcmp@plt+0x1d0>
   10648:	ldr	r5, [r4, #4]
   1064c:	ldr	r7, [r4, #8]
   10650:	movw	r1, #2276	; 0x8e4
   10654:	movt	r1, #1
   10658:	mov	r0, r5
   1065c:	bl	1051c <strcmp@plt>
   10660:	subs	r2, r0, #0
   10664:	beq	1070c <strcmp@plt+0x1f0>
   10668:	movw	r1, #2284	; 0x8ec
   1066c:	movt	r1, #1
   10670:	mov	r0, r5
   10674:	bl	1051c <strcmp@plt>
   10678:	cmp	r0, #0
   1067c:	beq	10718 <strcmp@plt+0x1fc>
   10680:	movw	r1, #2292	; 0x8f4
   10684:	movt	r1, #1
   10688:	mov	r0, r5
   1068c:	bl	1051c <strcmp@plt>
   10690:	cmp	r0, #0
   10694:	beq	10798 <strcmp@plt+0x27c>
   10698:	movw	r1, #2300	; 0x8fc
   1069c:	movt	r1, #1
   106a0:	mov	r0, r5
   106a4:	bl	1051c <strcmp@plt>
   106a8:	cmp	r0, #0
   106ac:	beq	107a8 <strcmp@plt+0x28c>
   106b0:	movw	r1, #2264	; 0x8d8
   106b4:	movt	r1, #1
   106b8:	mov	r0, r5
   106bc:	bl	1051c <strcmp@plt>
   106c0:	cmp	r0, #0
   106c4:	movweq	r4, #2160	; 0x870
   106c8:	movteq	r4, #1
   106cc:	movweq	r2, #4098	; 0x1002
   106d0:	beq	10724 <strcmp@plt+0x208>
   106d4:	mov	r1, r5
   106d8:	movw	r0, #2312	; 0x908
   106dc:	movt	r0, #1
   106e0:	bl	104ec <printf@plt>
   106e4:	mov	r0, #1
   106e8:	b	10784 <strcmp@plt+0x268>
   106ec:	movw	r0, #2176	; 0x880
   106f0:	movt	r0, #1
   106f4:	bl	10504 <puts@plt>
   106f8:	movw	r0, #2212	; 0x8a4
   106fc:	movt	r0, #1
   10700:	bl	10504 <puts@plt>
   10704:	mov	r0, #1
   10708:	b	10784 <strcmp@plt+0x268>
   1070c:	movw	r4, #2280	; 0x8e8
   10710:	movt	r4, #1
   10714:	b	10724 <strcmp@plt+0x208>
   10718:	movw	r4, #2280	; 0x8e8
   1071c:	movt	r4, #1
   10720:	mov	r2, #1
   10724:	add	r1, sp, #4
   10728:	mov	r0, r7
   1072c:	bl	10510 <rb_get_ssl_certfp_file@plt>
   10730:	subs	r6, r0, #0
   10734:	blt	107b8 <strcmp@plt+0x29c>
   10738:	cmp	r6, #0
   1073c:	beq	107c8 <strcmp@plt+0x2ac>
   10740:	mov	r1, r4
   10744:	movw	r0, #2348	; 0x92c
   10748:	movt	r0, #1
   1074c:	bl	104ec <printf@plt>
   10750:	add	r5, sp, #4
   10754:	mov	r4, #0
   10758:	movw	r7, #2352	; 0x930
   1075c:	movt	r7, #1
   10760:	ldrb	r1, [r5], #1
   10764:	mov	r0, r7
   10768:	bl	104ec <printf@plt>
   1076c:	add	r4, r4, #1
   10770:	cmp	r6, r4
   10774:	bgt	10760 <strcmp@plt+0x244>
   10778:	mov	r0, #10
   1077c:	bl	104c8 <putchar@plt>
   10780:	mov	r0, #0
   10784:	add	sp, sp, #76	; 0x4c
   10788:	ldrd	r4, [sp]
   1078c:	ldrd	r6, [sp, #8]
   10790:	add	sp, sp, #16
   10794:	pop	{pc}		; (ldr pc, [sp], #4)
   10798:	movw	r4, #2280	; 0x8e8
   1079c:	movt	r4, #1
   107a0:	mov	r2, #2
   107a4:	b	10724 <strcmp@plt+0x208>
   107a8:	movw	r4, #2144	; 0x860
   107ac:	movt	r4, #1
   107b0:	movw	r2, #4097	; 0x1001
   107b4:	b	10724 <strcmp@plt+0x208>
   107b8:	mov	r0, r7
   107bc:	bl	104e0 <perror@plt>
   107c0:	mov	r0, #1
   107c4:	b	10784 <strcmp@plt+0x268>
   107c8:	movw	r3, #4168	; 0x1048
   107cc:	movt	r3, #2
   107d0:	ldr	r3, [r3]
   107d4:	mov	r2, #14
   107d8:	mov	r1, #1
   107dc:	movw	r0, #2332	; 0x91c
   107e0:	movt	r0, #1
   107e4:	bl	104f8 <fwrite@plt>
   107e8:	mov	r0, #1
   107ec:	b	10784 <strcmp@plt+0x268>
   107f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   107f4:	mov	r7, r0
   107f8:	ldr	r6, [pc, #72]	; 10848 <strcmp@plt+0x32c>
   107fc:	ldr	r5, [pc, #72]	; 1084c <strcmp@plt+0x330>
   10800:	add	r6, pc, r6
   10804:	add	r5, pc, r5
   10808:	sub	r6, r6, r5
   1080c:	mov	r8, r1
   10810:	mov	r9, r2
   10814:	bl	10484 <abort@plt-0x20>
   10818:	asrs	r6, r6, #2
   1081c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10820:	mov	r4, #0
   10824:	add	r4, r4, #1
   10828:	ldr	r3, [r5], #4
   1082c:	mov	r2, r9
   10830:	mov	r1, r8
   10834:	mov	r0, r7
   10838:	blx	r3
   1083c:	cmp	r6, r4
   10840:	bne	10824 <strcmp@plt+0x308>
   10844:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10848:	strdeq	r0, [r1], -r4
   1084c:	andeq	r0, r1, ip, ror #13
   10850:	bx	lr

Disassembly of section .fini:

00010854 <.fini>:
   10854:	push	{r3, lr}
   10858:	pop	{r3, pc}
