
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109e8 <.init>:
   109e8:	push	{r3, lr}
   109ec:	bl	10c6c <__assert_fail@plt+0xa8>
   109f0:	pop	{r3, pc}

Disassembly of section .plt:

000109f4 <calloc@plt-0x14>:
   109f4:	push	{lr}		; (str lr, [sp, #-4]!)
   109f8:	ldr	lr, [pc, #4]	; 10a04 <calloc@plt-0x4>
   109fc:	add	lr, pc, lr
   10a00:	ldr	pc, [lr, #8]!
   10a04:	strdeq	r6, [r1], -ip

00010a08 <calloc@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #90112	; 0x16000
   10a10:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a14 <raise@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #90112	; 0x16000
   10a1c:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a20 <strcmp@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #90112	; 0x16000
   10a28:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a2c <printf@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #90112	; 0x16000
   10a34:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a38 <fopen@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #90112	; 0x16000
   10a40:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a44 <free@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #90112	; 0x16000
   10a4c:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a50 <utf8proc_get_property@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #90112	; 0x16000
   10a58:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a5c <fgets@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #90112	; 0x16000
   10a64:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a68 <utf8proc_encode_char@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #90112	; 0x16000
   10a70:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a74 <strdup@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #90112	; 0x16000
   10a7c:	ldr	pc, [ip, #1460]!	; 0x5b4

00010a80 <rewind@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #90112	; 0x16000
   10a88:	ldr	pc, [ip, #1452]!	; 0x5ac

00010a8c <unlink@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #90112	; 0x16000
   10a94:	ldr	pc, [ip, #1444]!	; 0x5a4

00010a98 <utf8proc_tolower@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #90112	; 0x16000
   10aa0:	ldr	pc, [ip, #1436]!	; 0x59c

00010aa4 <__xstat@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #90112	; 0x16000
   10aac:	ldr	pc, [ip, #1428]!	; 0x594

00010ab0 <fread@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #90112	; 0x16000
   10ab8:	ldr	pc, [ip, #1420]!	; 0x58c

00010abc <utf8proc_iterate@plt>:
   10abc:	add	ip, pc, #0, 12
   10ac0:	add	ip, ip, #90112	; 0x16000
   10ac4:	ldr	pc, [ip, #1412]!	; 0x584

00010ac8 <puts@plt>:
   10ac8:	add	ip, pc, #0, 12
   10acc:	add	ip, ip, #90112	; 0x16000
   10ad0:	ldr	pc, [ip, #1404]!	; 0x57c

00010ad4 <malloc@plt>:
   10ad4:	add	ip, pc, #0, 12
   10ad8:	add	ip, ip, #90112	; 0x16000
   10adc:	ldr	pc, [ip, #1396]!	; 0x574

00010ae0 <__libc_start_main@plt>:
   10ae0:	add	ip, pc, #0, 12
   10ae4:	add	ip, ip, #90112	; 0x16000
   10ae8:	ldr	pc, [ip, #1388]!	; 0x56c

00010aec <__sysv_signal@plt>:
   10aec:	add	ip, pc, #0, 12
   10af0:	add	ip, ip, #90112	; 0x16000
   10af4:	ldr	pc, [ip, #1380]!	; 0x564

00010af8 <__gmon_start__@plt>:
   10af8:	add	ip, pc, #0, 12
   10afc:	add	ip, ip, #90112	; 0x16000
   10b00:	ldr	pc, [ip, #1372]!	; 0x55c

00010b04 <getpid@plt>:
   10b04:	add	ip, pc, #0, 12
   10b08:	add	ip, ip, #90112	; 0x16000
   10b0c:	ldr	pc, [ip, #1364]!	; 0x554

00010b10 <exit@plt>:
   10b10:	add	ip, pc, #0, 12
   10b14:	add	ip, ip, #90112	; 0x16000
   10b18:	ldr	pc, [ip, #1356]!	; 0x54c

00010b1c <utf8proc_category@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #90112	; 0x16000
   10b24:	ldr	pc, [ip, #1348]!	; 0x544

00010b28 <strlen@plt>:
   10b28:	add	ip, pc, #0, 12
   10b2c:	add	ip, ip, #90112	; 0x16000
   10b30:	ldr	pc, [ip, #1340]!	; 0x53c

00010b34 <fprintf@plt>:
   10b34:	add	ip, pc, #0, 12
   10b38:	add	ip, ip, #90112	; 0x16000
   10b3c:	ldr	pc, [ip, #1332]!	; 0x534

00010b40 <__isoc99_sscanf@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #90112	; 0x16000
   10b48:	ldr	pc, [ip, #1324]!	; 0x52c

00010b4c <fclose@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #90112	; 0x16000
   10b54:	ldr	pc, [ip, #1316]!	; 0x524

00010b58 <utf8proc_NFC@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #90112	; 0x16000
   10b60:	ldr	pc, [ip, #1308]!	; 0x51c

00010b64 <fputc@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #90112	; 0x16000
   10b6c:	ldr	pc, [ip, #1300]!	; 0x514

00010b70 <sprintf@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #90112	; 0x16000
   10b78:	ldr	pc, [ip, #1292]!	; 0x50c

00010b7c <atoi@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #90112	; 0x16000
   10b84:	ldr	pc, [ip, #1284]!	; 0x504

00010b88 <utf8proc_errmsg@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #90112	; 0x16000
   10b90:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b94 <fputs@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #90112	; 0x16000
   10b9c:	ldr	pc, [ip, #1268]!	; 0x4f4

00010ba0 <strncmp@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #90112	; 0x16000
   10ba8:	ldr	pc, [ip, #1260]!	; 0x4ec

00010bac <abort@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #90112	; 0x16000
   10bb4:	ldr	pc, [ip, #1252]!	; 0x4e4

00010bb8 <getc@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #90112	; 0x16000
   10bc0:	ldr	pc, [ip, #1244]!	; 0x4dc

00010bc4 <__assert_fail@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #90112	; 0x16000
   10bcc:	ldr	pc, [ip, #1236]!	; 0x4d4

Disassembly of section .text:

00010bd0 <error@@Base-0x1634>:
   10bd0:	push	{r0, r1, r2, r4, r5, lr}
   10bd4:	add	ip, sp, #8
   10bd8:	mov	r3, #0
   10bdc:	str	r0, [ip, #-4]!
   10be0:	ldr	r2, [pc, #64]	; 10c28 <__assert_fail@plt+0x64>
   10be4:	mov	r0, ip
   10be8:	mov	r5, r1
   10bec:	bl	12328 <error@@Base+0x124>
   10bf0:	ldr	r3, [sp, #4]
   10bf4:	cmp	r3, #0
   10bf8:	movne	r4, #0
   10bfc:	bne	10c14 <__assert_fail@plt+0x50>
   10c00:	ldr	r0, [pc, #36]	; 10c2c <__assert_fail@plt+0x68>
   10c04:	bl	12204 <error@@Base>
   10c08:	ldr	r0, [r5, r4, lsl #2]
   10c0c:	bl	10d80 <__assert_fail@plt+0x1bc>
   10c10:	add	r4, r4, #1
   10c14:	ldr	r3, [sp, #4]
   10c18:	cmp	r4, r3
   10c1c:	blt	10c08 <__assert_fail@plt+0x44>
   10c20:	bl	10e84 <__assert_fail@plt+0x2c0>
   10c24:	bl	121ac <__assert_fail@plt+0x15e8>
   10c28:	andeq	r2, r1, r2, asr #27
   10c2c:	andeq	r2, r1, r6, ror #27
   10c30:	mov	fp, #0
   10c34:	mov	lr, #0
   10c38:	pop	{r1}		; (ldr r1, [sp], #4)
   10c3c:	mov	r2, sp
   10c40:	push	{r2}		; (str r2, [sp, #-4]!)
   10c44:	push	{r0}		; (str r0, [sp, #-4]!)
   10c48:	ldr	ip, [pc, #16]	; 10c60 <__assert_fail@plt+0x9c>
   10c4c:	push	{ip}		; (str ip, [sp, #-4]!)
   10c50:	ldr	r0, [pc, #12]	; 10c64 <__assert_fail@plt+0xa0>
   10c54:	ldr	r3, [pc, #12]	; 10c68 <__assert_fail@plt+0xa4>
   10c58:	bl	10ae0 <__libc_start_main@plt>
   10c5c:	bl	10bac <abort@plt>
   10c60:	andeq	r2, r1, r0, lsl #27
   10c64:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10c68:	andeq	r2, r1, r0, lsr #26
   10c6c:	ldr	r3, [pc, #20]	; 10c88 <__assert_fail@plt+0xc4>
   10c70:	ldr	r2, [pc, #20]	; 10c8c <__assert_fail@plt+0xc8>
   10c74:	add	r3, pc, r3
   10c78:	ldr	r2, [r3, r2]
   10c7c:	cmp	r2, #0
   10c80:	bxeq	lr
   10c84:	b	10af8 <__gmon_start__@plt>
   10c88:	andeq	r6, r1, r4, lsl #7
   10c8c:	andeq	r0, r0, r4, lsr #1
   10c90:	ldr	r3, [pc, #28]	; 10cb4 <__assert_fail@plt+0xf0>
   10c94:	ldr	r0, [pc, #28]	; 10cb8 <__assert_fail@plt+0xf4>
   10c98:	sub	r3, r3, r0
   10c9c:	cmp	r3, #6
   10ca0:	bxls	lr
   10ca4:	ldr	r3, [pc, #16]	; 10cbc <__assert_fail@plt+0xf8>
   10ca8:	cmp	r3, #0
   10cac:	bxeq	lr
   10cb0:	bx	r3
   10cb4:	andeq	r7, r2, r7, asr #1
   10cb8:	andeq	r7, r2, r4, asr #1
   10cbc:	andeq	r0, r0, r0
   10cc0:	ldr	r1, [pc, #36]	; 10cec <__assert_fail@plt+0x128>
   10cc4:	ldr	r0, [pc, #36]	; 10cf0 <__assert_fail@plt+0x12c>
   10cc8:	sub	r1, r1, r0
   10ccc:	asr	r1, r1, #2
   10cd0:	add	r1, r1, r1, lsr #31
   10cd4:	asrs	r1, r1, #1
   10cd8:	bxeq	lr
   10cdc:	ldr	r3, [pc, #16]	; 10cf4 <__assert_fail@plt+0x130>
   10ce0:	cmp	r3, #0
   10ce4:	bxeq	lr
   10ce8:	bx	r3
   10cec:	andeq	r7, r2, r4, asr #1
   10cf0:	andeq	r7, r2, r4, asr #1
   10cf4:	andeq	r0, r0, r0
   10cf8:	push	{r4, lr}
   10cfc:	ldr	r4, [pc, #24]	; 10d1c <__assert_fail@plt+0x158>
   10d00:	ldrb	r3, [r4]
   10d04:	cmp	r3, #0
   10d08:	popne	{r4, pc}
   10d0c:	bl	10c90 <__assert_fail@plt+0xcc>
   10d10:	mov	r3, #1
   10d14:	strb	r3, [r4]
   10d18:	pop	{r4, pc}
   10d1c:	ldrdeq	r7, [r2], -r8
   10d20:	ldr	r0, [pc, #40]	; 10d50 <__assert_fail@plt+0x18c>
   10d24:	ldr	r3, [r0]
   10d28:	cmp	r3, #0
   10d2c:	bne	10d34 <__assert_fail@plt+0x170>
   10d30:	b	10cc0 <__assert_fail@plt+0xfc>
   10d34:	ldr	r3, [pc, #24]	; 10d54 <__assert_fail@plt+0x190>
   10d38:	cmp	r3, #0
   10d3c:	beq	10d30 <__assert_fail@plt+0x16c>
   10d40:	push	{r4, lr}
   10d44:	blx	r3
   10d48:	pop	{r4, lr}
   10d4c:	b	10cc0 <__assert_fail@plt+0xfc>
   10d50:	andeq	r6, r2, r4, lsl #28
   10d54:	andeq	r0, r0, r0
   10d58:	ldr	r1, [r1, #8]
   10d5c:	ldr	r0, [r0, #8]
   10d60:	b	120b4 <__assert_fail@plt+0x14f0>
   10d64:	ldr	r2, [r0, #12]
   10d68:	ldr	r3, [r1, #12]
   10d6c:	cmp	r2, r3
   10d70:	bne	10d78 <__assert_fail@plt+0x1b4>
   10d74:	b	10d58 <__assert_fail@plt+0x194>
   10d78:	sub	r0, r3, r2
   10d7c:	bx	lr
   10d80:	push	{r4, r5, r6, r7, r8, lr}
   10d84:	mov	r1, r0
   10d88:	ldr	r4, [pc, #100]	; 10df4 <__assert_fail@plt+0x230>
   10d8c:	ldr	r2, [pc, #100]	; 10df8 <__assert_fail@plt+0x234>
   10d90:	ldr	r0, [pc, #100]	; 10dfc <__assert_fail@plt+0x238>
   10d94:	bl	1255c <error@@Base+0x358>
   10d98:	mov	r0, r4
   10d9c:	ldr	r1, [pc, #88]	; 10dfc <__assert_fail@plt+0x238>
   10da0:	bl	11bc4 <__assert_fail@plt+0x1000>
   10da4:	ldr	r7, [pc, #84]	; 10e00 <__assert_fail@plt+0x23c>
   10da8:	ldr	r4, [r4]
   10dac:	mov	r5, #0
   10db0:	mov	r6, #1
   10db4:	cmp	r4, #0
   10db8:	bne	10dd8 <__assert_fail@plt+0x214>
   10dbc:	ldr	r1, [pc, #64]	; 10e04 <__assert_fail@plt+0x240>
   10dc0:	ldr	r0, [pc, #52]	; 10dfc <__assert_fail@plt+0x238>
   10dc4:	bl	11024 <__assert_fail@plt+0x460>
   10dc8:	ldr	r1, [pc, #56]	; 10e08 <__assert_fail@plt+0x244>
   10dcc:	ldr	r0, [pc, #32]	; 10df4 <__assert_fail@plt+0x230>
   10dd0:	pop	{r4, r5, r6, r7, r8, lr}
   10dd4:	b	11024 <__assert_fail@plt+0x460>
   10dd8:	ldr	r1, [r4, #8]
   10ddc:	mov	r3, r5
   10de0:	mov	r2, r6
   10de4:	mov	r0, r7
   10de8:	bl	11538 <__assert_fail@plt+0x974>
   10dec:	ldr	r4, [r4, #4]
   10df0:	b	10db4 <__assert_fail@plt+0x1f0>
   10df4:	andeq	r7, r2, ip, asr r1
   10df8:	strheq	r7, [r2], -r0
   10dfc:	andeq	r7, r2, ip, asr #2
   10e00:	andeq	r7, r2, ip, ror #2
   10e04:	andeq	r0, r1, r4, asr #20
   10e08:	andeq	r1, r1, ip, ror #31
   10e0c:	push	{r4, r5, r6, r7, r8, lr}
   10e10:	mov	r5, #0
   10e14:	ldr	r0, [pc, #88]	; 10e74 <__assert_fail@plt+0x2b0>
   10e18:	bl	10ac8 <puts@plt>
   10e1c:	ldr	r6, [pc, #84]	; 10e78 <__assert_fail@plt+0x2b4>
   10e20:	ldr	r7, [pc, #84]	; 10e7c <__assert_fail@plt+0x2b8>
   10e24:	mov	r4, r5
   10e28:	ldr	r3, [r6, #3956]	; 0xf74
   10e2c:	cmp	r4, r3
   10e30:	blt	10e44 <__assert_fail@plt+0x280>
   10e34:	mov	r1, r5
   10e38:	ldr	r0, [pc, #64]	; 10e80 <__assert_fail@plt+0x2bc>
   10e3c:	pop	{r4, r5, r6, r7, r8, lr}
   10e40:	b	10a2c <printf@plt>
   10e44:	ldr	r3, [r6, #3952]	; 0xf70
   10e48:	mov	r0, r7
   10e4c:	ldr	r3, [r3, r4, lsl #2]
   10e50:	ldr	r2, [r3, #8]
   10e54:	ldr	r1, [r3, #12]
   10e58:	bl	10a2c <printf@plt>
   10e5c:	ldr	r3, [r6, #3952]	; 0xf70
   10e60:	ldr	r3, [r3, r4, lsl #2]
   10e64:	add	r4, r4, #1
   10e68:	ldr	r3, [r3, #12]
   10e6c:	add	r5, r5, r3
   10e70:	b	10e28 <__assert_fail@plt+0x264>
   10e74:	andeq	r2, r1, r0, lsr #27
   10e78:	andeq	r8, r2, ip, ror #2
   10e7c:	andeq	r2, r1, r9, lsr #27
   10e80:			; <UNDEFINED> instruction: 0x00012db4
   10e84:	push	{r4, lr}
   10e88:	ldr	r4, [pc, #60]	; 10ecc <__assert_fail@plt+0x308>
   10e8c:	mov	r0, r4
   10e90:	add	r4, r4, #4096	; 0x1000
   10e94:	bl	11a48 <__assert_fail@plt+0xe84>
   10e98:	ldr	r1, [r4, #3952]	; 0xf70
   10e9c:	ldr	r2, [pc, #44]	; 10ed0 <__assert_fail@plt+0x30c>
   10ea0:	ldr	r0, [r4, #3956]	; 0xf74
   10ea4:	bl	11164 <__assert_fail@plt+0x5a0>
   10ea8:	bl	10e0c <__assert_fail@plt+0x248>
   10eac:	ldr	r0, [pc, #32]	; 10ed4 <__assert_fail@plt+0x310>
   10eb0:	bl	10ac8 <puts@plt>
   10eb4:	ldr	r1, [r4, #3952]	; 0xf70
   10eb8:	ldr	r0, [r4, #3956]	; 0xf74
   10ebc:	ldr	r2, [pc, #20]	; 10ed8 <__assert_fail@plt+0x314>
   10ec0:	bl	11164 <__assert_fail@plt+0x5a0>
   10ec4:	pop	{r4, lr}
   10ec8:	b	10e0c <__assert_fail@plt+0x248>
   10ecc:	andeq	r7, r2, ip, ror #2
   10ed0:	andeq	r0, r1, r8, asr sp
   10ed4:	strdeq	r6, [r1], -r1
   10ed8:	andeq	r0, r1, r4, ror #26
   10edc:	cmp	r1, #0
   10ee0:	push	{r4, lr}
   10ee4:	mov	r4, r0
   10ee8:	stm	r2, {r1, r3}
   10eec:	strne	r2, [r1, #4]
   10ef0:	streq	r2, [r0]
   10ef4:	cmp	r3, #0
   10ef8:	streq	r2, [r0, #4]
   10efc:	ldr	r0, [r0, #8]
   10f00:	strne	r2, [r3]
   10f04:	cmp	r0, #0
   10f08:	beq	10f18 <__assert_fail@plt+0x354>
   10f0c:	bl	10a44 <free@plt>
   10f10:	mov	r3, #0
   10f14:	str	r3, [r4, #8]
   10f18:	ldr	r3, [r4, #12]
   10f1c:	add	r3, r3, #1
   10f20:	str	r3, [r4, #12]
   10f24:	pop	{r4, pc}
   10f28:	mov	r3, #0
   10f2c:	str	r3, [r0, #4]
   10f30:	str	r3, [r0]
   10f34:	str	r3, [r0, #8]
   10f38:	str	r3, [r0, #12]
   10f3c:	bx	lr
   10f40:	mov	r2, r1
   10f44:	ldr	r3, [r0]
   10f48:	mov	r1, #0
   10f4c:	b	10edc <__assert_fail@plt+0x318>
   10f50:	mov	r2, r1
   10f54:	mov	r3, #0
   10f58:	ldr	r1, [r0, #4]
   10f5c:	b	10edc <__assert_fail@plt+0x318>
   10f60:	mov	r3, r2
   10f64:	mov	r2, r1
   10f68:	ldr	r1, [r3]
   10f6c:	b	10edc <__assert_fail@plt+0x318>
   10f70:	ldr	r3, [r1, #4]
   10f74:	b	10edc <__assert_fail@plt+0x318>
   10f78:	ldr	r3, [r1]
   10f7c:	ldr	r2, [r1, #4]
   10f80:	cmp	r3, #0
   10f84:	push	{r4, r5, r6, lr}
   10f88:	mov	r4, r0
   10f8c:	strne	r2, [r3, #4]
   10f90:	streq	r2, [r0]
   10f94:	ldr	r2, [r1, #4]
   10f98:	mov	r5, #0
   10f9c:	cmp	r2, #0
   10fa0:	streq	r3, [r0, #4]
   10fa4:	ldr	r0, [r0, #8]
   10fa8:	strne	r3, [r2]
   10fac:	cmp	r0, r5
   10fb0:	str	r5, [r1, #4]
   10fb4:	str	r5, [r1]
   10fb8:	beq	10fc4 <__assert_fail@plt+0x400>
   10fbc:	bl	10a44 <free@plt>
   10fc0:	str	r5, [r4, #8]
   10fc4:	ldr	r3, [r4, #12]
   10fc8:	sub	r3, r3, #1
   10fcc:	str	r3, [r4, #12]
   10fd0:	pop	{r4, r5, r6, pc}
   10fd4:	ldr	r3, [r0, #8]
   10fd8:	cmp	r3, #0
   10fdc:	bxne	lr
   10fe0:	ldr	r3, [r0, #12]
   10fe4:	cmp	r3, #0
   10fe8:	bxeq	lr
   10fec:	push	{r4, lr}
   10ff0:	mov	r1, #4
   10ff4:	mov	r4, r0
   10ff8:	mov	r0, r3
   10ffc:	bl	12240 <error@@Base+0x3c>
   11000:	ldr	r3, [r4]
   11004:	str	r0, [r4, #8]
   11008:	sub	r0, r0, #4
   1100c:	cmp	r3, #0
   11010:	bne	11018 <__assert_fail@plt+0x454>
   11014:	pop	{r4, pc}
   11018:	str	r3, [r0, #4]!
   1101c:	ldr	r3, [r3, #4]
   11020:	b	1100c <__assert_fail@plt+0x448>
   11024:	push	{r4, r5, r6, lr}
   11028:	mov	r5, r0
   1102c:	mov	r6, r1
   11030:	ldr	r4, [r5]
   11034:	cmp	r4, #0
   11038:	bne	11040 <__assert_fail@plt+0x47c>
   1103c:	pop	{r4, r5, r6, pc}
   11040:	mov	r0, r5
   11044:	mov	r1, r4
   11048:	bl	10f78 <__assert_fail@plt+0x3b4>
   1104c:	mov	r0, r4
   11050:	blx	r6
   11054:	b	11030 <__assert_fail@plt+0x46c>
   11058:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1105c:	mov	r7, r0
   11060:	ldr	sl, [pc, #248]	; 11160 <__assert_fail@plt+0x59c>
   11064:	mov	r9, r1
   11068:	mov	r6, sl
   1106c:	ldr	r3, [sl]
   11070:	mov	r4, r9
   11074:	mov	r5, r7
   11078:	ldr	fp, [r3, r7, lsl #2]
   1107c:	cmp	r5, r4
   11080:	blt	110cc <__assert_fail@plt+0x508>
   11084:	ldr	r3, [r6]
   11088:	sub	r1, r4, #1
   1108c:	cmp	r7, r1
   11090:	str	fp, [r3, r4, lsl #2]
   11094:	bge	110a0 <__assert_fail@plt+0x4dc>
   11098:	mov	r0, r7
   1109c:	bl	11058 <__assert_fail@plt+0x494>
   110a0:	add	r7, r5, #1
   110a4:	cmp	r7, r9
   110a8:	blt	1106c <__assert_fail@plt+0x4a8>
   110ac:	add	sp, sp, #12
   110b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110b4:	sub	r4, r4, #1
   110b8:	cmp	r5, r4
   110bc:	sub	r8, r8, #4
   110c0:	bne	110d0 <__assert_fail@plt+0x50c>
   110c4:	mov	r2, r4
   110c8:	b	11144 <__assert_fail@plt+0x580>
   110cc:	lsl	r8, r4, #2
   110d0:	ldm	r6, {r2, r3}
   110d4:	mov	r0, fp
   110d8:	ldr	r1, [r2, r8]
   110dc:	blx	r3
   110e0:	cmp	r0, #0
   110e4:	blt	110b4 <__assert_fail@plt+0x4f0>
   110e8:	ldr	r2, [r6]
   110ec:	lsl	r1, r5, #2
   110f0:	add	r8, r5, #1
   110f4:	ldr	r0, [r2, r4, lsl #2]
   110f8:	lsl	r3, r4, #2
   110fc:	str	r0, [r2, r5, lsl #2]
   11100:	add	r5, r1, #4
   11104:	cmp	r8, r4
   11108:	bge	11158 <__assert_fail@plt+0x594>
   1110c:	ldm	r6, {r1, r2}
   11110:	mov	r0, fp
   11114:	str	r3, [sp, #4]
   11118:	ldr	r1, [r1, r5]
   1111c:	blx	r2
   11120:	add	r5, r5, #4
   11124:	ldr	r3, [sp, #4]
   11128:	cmp	r0, #0
   1112c:	bgt	11150 <__assert_fail@plt+0x58c>
   11130:	ldr	r1, [r6]
   11134:	sub	r2, r4, #1
   11138:	mov	r4, r8
   1113c:	ldr	r0, [r1, r8, lsl #2]
   11140:	str	r0, [r1, r3]
   11144:	mov	r5, r4
   11148:	mov	r4, r2
   1114c:	b	1107c <__assert_fail@plt+0x4b8>
   11150:	add	r8, r8, #1
   11154:	b	11104 <__assert_fail@plt+0x540>
   11158:	bne	11130 <__assert_fail@plt+0x56c>
   1115c:	b	110c4 <__assert_fail@plt+0x500>
   11160:	ldrdeq	r7, [r2], -ip
   11164:	cmp	r0, #1
   11168:	bxle	lr
   1116c:	ldr	r3, [pc, #12]	; 11180 <__assert_fail@plt+0x5bc>
   11170:	stm	r3, {r1, r2}
   11174:	sub	r1, r0, #1
   11178:	mov	r0, #0
   1117c:	b	11058 <__assert_fail@plt+0x494>
   11180:	ldrdeq	r7, [r2], -ip
   11184:	andeq	r0, r0, r0
   11188:	mov	r2, r0
   1118c:	push	{r4, lr}
   11190:	mov	r1, #99	; 0x63
   11194:	ldr	r0, [pc, #12]	; 111a8 <__assert_fail@plt+0x5e4>
   11198:	bl	10a5c <fgets@plt>
   1119c:	adds	r0, r0, #0
   111a0:	movne	r0, #1
   111a4:	pop	{r4, pc}
   111a8:	andeq	r7, r2, r4, ror #1
   111ac:	push	{r4, lr}
   111b0:	mov	r4, r1
   111b4:	bl	11188 <__assert_fail@plt+0x5c4>
   111b8:	cmp	r0, #0
   111bc:	popeq	{r4, pc}
   111c0:	mov	r2, r4
   111c4:	ldr	r1, [pc, #20]	; 111e0 <__assert_fail@plt+0x61c>
   111c8:	ldr	r0, [pc, #20]	; 111e4 <__assert_fail@plt+0x620>
   111cc:	bl	10b40 <__isoc99_sscanf@plt>
   111d0:	sub	r0, r0, #1
   111d4:	clz	r0, r0
   111d8:	lsr	r0, r0, #5
   111dc:	pop	{r4, pc}
   111e0:	andeq	r2, r1, r0, ror #28
   111e4:	andeq	r7, r2, r4, ror #1
   111e8:	ldr	r2, [r1]
   111ec:	cmp	r2, #0
   111f0:	bne	11200 <__assert_fail@plt+0x63c>
   111f4:	mov	r1, r0
   111f8:	ldr	r0, [pc, #56]	; 11238 <__assert_fail@plt+0x674>
   111fc:	b	10b94 <fputs@plt>
   11200:	ldr	r3, [r1, #4]
   11204:	vldr	d6, [pc, #36]	; 11230 <__assert_fail@plt+0x66c>
   11208:	sub	r3, r2, r3
   1120c:	ldr	r1, [pc, #40]	; 1123c <__assert_fail@plt+0x678>
   11210:	vmov	s14, r3
   11214:	vcvt.f64.s32	d7, s14
   11218:	vmul.f64	d7, d7, d6
   1121c:	vmov	s13, r2
   11220:	vcvt.f64.s32	d6, s13
   11224:	vdiv.f64	d5, d7, d6
   11228:	vmov	r2, r3, d5
   1122c:	b	10b34 <fprintf@plt>
   11230:	andeq	r0, r0, r0
   11234:	subsmi	r0, r9, r0
   11238:	strdeq	r2, [r1], -lr
   1123c:	andeq	r2, r1, r7, lsl #28
   11240:	push	{r4, r5, r6, lr}
   11244:	subs	r5, r1, #0
   11248:	mov	r4, r0
   1124c:	beq	11278 <__assert_fail@plt+0x6b4>
   11250:	ldr	r1, [pc, #48]	; 11288 <__assert_fail@plt+0x6c4>
   11254:	ldm	r5, {r2, r3}
   11258:	bl	10b34 <fprintf@plt>
   1125c:	mov	r1, r5
   11260:	mov	r0, r4
   11264:	bl	111e8 <__assert_fail@plt+0x624>
   11268:	mov	r1, r4
   1126c:	ldr	r0, [pc, #24]	; 1128c <__assert_fail@plt+0x6c8>
   11270:	pop	{r4, r5, r6, lr}
   11274:	b	10b94 <fputs@plt>
   11278:	mov	r1, r0
   1127c:	ldr	r0, [pc, #12]	; 11290 <__assert_fail@plt+0x6cc>
   11280:	bl	10b94 <fputs@plt>
   11284:	b	11268 <__assert_fail@plt+0x6a4>
   11288:	andeq	r2, r1, sp, lsl #28
   1128c:	andeq	r2, r1, r3, lsr lr
   11290:	andeq	r2, r1, r8, lsl lr
   11294:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11298:	mov	r4, r0
   1129c:	ldrb	r8, [sp, #32]
   112a0:	mov	r6, r1
   112a4:	mov	r7, r2
   112a8:	ldr	r1, [pc, #204]	; 1137c <__assert_fail@plt+0x7b8>
   112ac:	mov	r2, r3
   112b0:	ldrb	r9, [sp, #36]	; 0x24
   112b4:	bl	10b34 <fprintf@plt>
   112b8:	mov	r1, #0
   112bc:	mov	r0, r4
   112c0:	bl	11240 <__assert_fail@plt+0x67c>
   112c4:	ldr	r3, [pc, #180]	; 11380 <__assert_fail@plt+0x7bc>
   112c8:	cmp	r8, #0
   112cc:	ldr	r2, [pc, #176]	; 11384 <__assert_fail@plt+0x7c0>
   112d0:	ldr	r1, [pc, #176]	; 11388 <__assert_fail@plt+0x7c4>
   112d4:	moveq	r2, r3
   112d8:	mov	r0, r4
   112dc:	bl	10b34 <fprintf@plt>
   112e0:	ldr	sl, [pc, #164]	; 1138c <__assert_fail@plt+0x7c8>
   112e4:	mov	r5, #1
   112e8:	cmp	r5, r7
   112ec:	ble	11348 <__assert_fail@plt+0x784>
   112f0:	cmp	r8, #0
   112f4:	beq	11324 <__assert_fail@plt+0x760>
   112f8:	add	r3, r7, #1
   112fc:	add	r1, r6, r3, lsl #3
   11300:	ldr	r3, [r6, r3, lsl #3]
   11304:	cmp	r3, #0
   11308:	ble	11324 <__assert_fail@plt+0x760>
   1130c:	mov	r0, r4
   11310:	bl	11240 <__assert_fail@plt+0x67c>
   11314:	mov	r2, r7
   11318:	ldr	r1, [pc, #112]	; 11390 <__assert_fail@plt+0x7cc>
   1131c:	mov	r0, r4
   11320:	bl	10b34 <fprintf@plt>
   11324:	cmp	r9, #0
   11328:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1132c:	mov	r1, r6
   11330:	mov	r0, r4
   11334:	bl	11240 <__assert_fail@plt+0x67c>
   11338:	mov	r1, r4
   1133c:	ldr	r0, [pc, #80]	; 11394 <__assert_fail@plt+0x7d0>
   11340:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11344:	b	10b94 <fputs@plt>
   11348:	ldr	r3, [r6, r5, lsl #3]
   1134c:	add	r1, r6, r5, lsl #3
   11350:	cmp	r3, #0
   11354:	ble	11370 <__assert_fail@plt+0x7ac>
   11358:	mov	r0, r4
   1135c:	bl	11240 <__assert_fail@plt+0x67c>
   11360:	mov	r2, r5
   11364:	mov	r1, sl
   11368:	mov	r0, r4
   1136c:	bl	10b34 <fprintf@plt>
   11370:	add	r5, r5, #1
   11374:	sxth	r5, r5
   11378:	b	112e8 <__assert_fail@plt+0x724>
   1137c:	andeq	r2, r1, r5, asr #28
   11380:	andeq	r2, r1, lr, lsr lr
   11384:	andeq	r2, r1, r7, lsr lr
   11388:	andeq	r2, r1, r6, asr #28
   1138c:	andeq	r2, r1, sl, asr #28
   11390:	andeq	r2, r1, r3, asr lr
   11394:			; <UNDEFINED> instruction: 0x00012dba
   11398:	push	{r4, r5, r6, r7, r8, lr}
   1139c:	mov	r4, r1
   113a0:	add	r4, r4, #4096	; 0x1000
   113a4:	mov	r6, r0
   113a8:	mov	r0, r1
   113ac:	mov	r5, r2
   113b0:	bl	11a48 <__assert_fail@plt+0xe84>
   113b4:	ldr	r2, [pc, #124]	; 11438 <__assert_fail@plt+0x874>
   113b8:	ldr	r1, [r4, #3952]	; 0xf70
   113bc:	ldr	r0, [r4, #3956]	; 0xf74
   113c0:	bl	11164 <__assert_fail@plt+0x5a0>
   113c4:	mov	r2, r5
   113c8:	ldr	r1, [pc, #108]	; 1143c <__assert_fail@plt+0x878>
   113cc:	mov	r0, r6
   113d0:	bl	10b34 <fprintf@plt>
   113d4:	mov	r1, #0
   113d8:	mov	r0, r6
   113dc:	bl	11240 <__assert_fail@plt+0x67c>
   113e0:	mov	r1, r6
   113e4:	mov	r0, #10
   113e8:	bl	10b64 <fputc@plt>
   113ec:	ldr	r7, [pc, #76]	; 11440 <__assert_fail@plt+0x87c>
   113f0:	mov	r5, #0
   113f4:	ldr	r3, [r4, #3956]	; 0xf74
   113f8:	cmp	r5, r3
   113fc:	blt	11404 <__assert_fail@plt+0x840>
   11400:	pop	{r4, r5, r6, r7, r8, pc}
   11404:	ldr	r3, [r4, #3952]	; 0xf70
   11408:	mov	r0, r6
   1140c:	ldr	r1, [r3, r5, lsl #2]
   11410:	add	r1, r1, #12
   11414:	bl	11240 <__assert_fail@plt+0x67c>
   11418:	ldr	r3, [r4, #3952]	; 0xf70
   1141c:	mov	r1, r7
   11420:	mov	r0, r6
   11424:	ldr	r3, [r3, r5, lsl #2]
   11428:	add	r5, r5, #1
   1142c:	ldr	r2, [r3, #8]
   11430:	bl	10b34 <fprintf@plt>
   11434:	b	113f4 <__assert_fail@plt+0x830>
   11438:	andeq	r1, r1, r4, asr #8
   1143c:	andeq	r2, r1, r5, asr #28
   11440:	andeq	r2, r1, r6, asr #28
   11444:	ldr	r1, [r1, #8]
   11448:	ldr	r0, [r0, #8]
   1144c:	b	120b4 <__assert_fail@plt+0x14f0>
   11450:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11454:	mov	r6, r0
   11458:	mov	r5, r1
   1145c:	bl	11188 <__assert_fail@plt+0x5c4>
   11460:	mov	r4, #0
   11464:	cmp	r0, #0
   11468:	bne	11478 <__assert_fail@plt+0x8b4>
   1146c:	mov	r0, r4
   11470:	add	sp, sp, #8
   11474:	pop	{r4, r5, r6, r7, r8, pc}
   11478:	mov	r0, r6
   1147c:	bl	11188 <__assert_fail@plt+0x5c4>
   11480:	cmp	r0, #0
   11484:	ldrne	r7, [pc, #128]	; 1150c <__assert_fail@plt+0x948>
   11488:	beq	1146c <__assert_fail@plt+0x8a8>
   1148c:	mov	r0, r6
   11490:	bl	11188 <__assert_fail@plt+0x5c4>
   11494:	cmp	r0, #0
   11498:	beq	1146c <__assert_fail@plt+0x8a8>
   1149c:	add	r3, sp, #4
   114a0:	mov	r2, sp
   114a4:	mov	r1, r7
   114a8:	ldr	r0, [pc, #96]	; 11510 <__assert_fail@plt+0x94c>
   114ac:	bl	10b40 <__isoc99_sscanf@plt>
   114b0:	cmp	r0, #2
   114b4:	bne	1146c <__assert_fail@plt+0x8a8>
   114b8:	ldr	r0, [pc, #84]	; 11514 <__assert_fail@plt+0x950>
   114bc:	bl	10b7c <atoi@plt>
   114c0:	ldr	r8, [sp]
   114c4:	cmp	r0, #0
   114c8:	bne	114e8 <__assert_fail@plt+0x924>
   114cc:	ldr	r1, [pc, #68]	; 11518 <__assert_fail@plt+0x954>
   114d0:	ldr	r0, [pc, #60]	; 11514 <__assert_fail@plt+0x950>
   114d4:	bl	10a20 <strcmp@plt>
   114d8:	cmp	r0, #0
   114dc:	moveq	r4, r8
   114e0:	moveq	r0, #0
   114e4:	movne	r0, #11
   114e8:	ldr	r3, [r5, r0, lsl #3]
   114ec:	add	r2, r5, r0, lsl #3
   114f0:	add	r3, r3, r8
   114f4:	str	r3, [r5, r0, lsl #3]
   114f8:	ldr	r1, [sp, #4]
   114fc:	ldr	r3, [r2, #4]
   11500:	add	r3, r3, r1
   11504:	str	r3, [r2, #4]
   11508:	b	1148c <__assert_fail@plt+0x8c8>
   1150c:	andeq	r2, r1, ip, asr lr
   11510:	andeq	r7, r2, r4, ror #1
   11514:	andeq	r7, r2, r1, lsl #2
   11518:			; <UNDEFINED> instruction: 0x00012dba
   1151c:	ldr	r3, [r0]
   11520:	add	r1, r3, r1
   11524:	ldr	r3, [r0, #4]
   11528:	str	r1, [r0]
   1152c:	add	r2, r3, r2
   11530:	str	r2, [r0, #4]
   11534:	bx	lr
   11538:	push	{r4, r5, r6, r7, r8, lr}
   1153c:	mov	r7, r0
   11540:	mov	r8, r1
   11544:	mov	r6, r2
   11548:	mov	r5, r3
   1154c:	bl	1196c <__assert_fail@plt+0xda8>
   11550:	subs	r4, r0, #0
   11554:	bne	11580 <__assert_fail@plt+0x9bc>
   11558:	mov	r1, #20
   1155c:	mov	r0, #1
   11560:	bl	12240 <error@@Base+0x3c>
   11564:	mov	r4, r0
   11568:	mov	r0, r8
   1156c:	bl	10a74 <strdup@plt>
   11570:	mov	r1, r4
   11574:	str	r0, [r4, #8]
   11578:	mov	r0, r7
   1157c:	bl	119b0 <__assert_fail@plt+0xdec>
   11580:	ldr	r2, [r4, #12]
   11584:	ldr	r3, [r4, #16]
   11588:	add	r2, r2, r6
   1158c:	add	r3, r3, r5
   11590:	str	r2, [r4, #12]
   11594:	str	r3, [r4, #16]
   11598:	pop	{r4, r5, r6, r7, r8, pc}
   1159c:	push	{r0, r1, r4, r5, r6, lr}
   115a0:	mov	r4, r0
   115a4:	mov	r6, r1
   115a8:	bl	11188 <__assert_fail@plt+0x5c4>
   115ac:	cmp	r0, #0
   115b0:	beq	115c8 <__assert_fail@plt+0xa04>
   115b4:	mov	r0, r4
   115b8:	bl	11188 <__assert_fail@plt+0x5c4>
   115bc:	cmp	r0, #0
   115c0:	ldrne	r5, [pc, #92]	; 11624 <__assert_fail@plt+0xa60>
   115c4:	bne	115f4 <__assert_fail@plt+0xa30>
   115c8:	add	sp, sp, #8
   115cc:	pop	{r4, r5, r6, pc}
   115d0:	mov	r0, r5
   115d4:	bl	10b28 <strlen@plt>
   115d8:	mov	r3, #0
   115dc:	ldr	r1, [pc, #68]	; 11628 <__assert_fail@plt+0xa64>
   115e0:	add	r0, r5, r0
   115e4:	strb	r3, [r0, #-1]
   115e8:	ldm	sp, {r2, r3}
   115ec:	mov	r0, r6
   115f0:	bl	11538 <__assert_fail@plt+0x974>
   115f4:	mov	r0, r4
   115f8:	bl	11188 <__assert_fail@plt+0x5c4>
   115fc:	cmp	r0, #0
   11600:	beq	115c8 <__assert_fail@plt+0xa04>
   11604:	add	r3, sp, #4
   11608:	mov	r2, sp
   1160c:	ldr	r1, [pc, #24]	; 1162c <__assert_fail@plt+0xa68>
   11610:	ldr	r0, [pc, #12]	; 11624 <__assert_fail@plt+0xa60>
   11614:	bl	10b40 <__isoc99_sscanf@plt>
   11618:	cmp	r0, #2
   1161c:	beq	115d0 <__assert_fail@plt+0xa0c>
   11620:	b	115c8 <__assert_fail@plt+0xa04>
   11624:	andeq	r7, r2, r4, ror #1
   11628:	andeq	r7, r2, r1, lsl #2
   1162c:	andeq	r2, r1, ip, asr lr
   11630:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11634:	mov	r6, r1
   11638:	mov	r5, r0
   1163c:	ldr	r1, [pc, #332]	; 11790 <__assert_fail@plt+0xbcc>
   11640:	mov	r0, r6
   11644:	bl	122cc <error@@Base+0xc8>
   11648:	mov	r4, r0
   1164c:	bl	11188 <__assert_fail@plt+0x5c4>
   11650:	cmp	r0, #0
   11654:	beq	1177c <__assert_fail@plt+0xbb8>
   11658:	mov	r2, #45	; 0x2d
   1165c:	ldr	r1, [pc, #304]	; 11794 <__assert_fail@plt+0xbd0>
   11660:	ldr	r0, [pc, #304]	; 11798 <__assert_fail@plt+0xbd4>
   11664:	bl	10ba0 <strncmp@plt>
   11668:	cmp	r0, #0
   1166c:	bne	1177c <__assert_fail@plt+0xbb8>
   11670:	mov	r0, r4
   11674:	bl	11188 <__assert_fail@plt+0x5c4>
   11678:	cmp	r0, #0
   1167c:	beq	1177c <__assert_fail@plt+0xbb8>
   11680:	ldr	r1, [pc, #276]	; 1179c <__assert_fail@plt+0xbd8>
   11684:	ldr	r0, [pc, #268]	; 11798 <__assert_fail@plt+0xbd4>
   11688:	bl	10a20 <strcmp@plt>
   1168c:	cmp	r0, #0
   11690:	bne	1177c <__assert_fail@plt+0xbb8>
   11694:	mov	r1, sp
   11698:	mov	r0, r4
   1169c:	bl	111ac <__assert_fail@plt+0x5e8>
   116a0:	cmp	r0, #0
   116a4:	beq	1177c <__assert_fail@plt+0xbb8>
   116a8:	add	r1, sp, #4
   116ac:	mov	r0, r4
   116b0:	bl	111ac <__assert_fail@plt+0x5e8>
   116b4:	cmp	r0, #0
   116b8:	beq	1177c <__assert_fail@plt+0xbb8>
   116bc:	mov	r0, r4
   116c0:	bl	11188 <__assert_fail@plt+0x5c4>
   116c4:	cmp	r0, #0
   116c8:	beq	1177c <__assert_fail@plt+0xbb8>
   116cc:	mov	r0, r4
   116d0:	bl	11188 <__assert_fail@plt+0x5c4>
   116d4:	cmp	r0, #0
   116d8:	beq	1177c <__assert_fail@plt+0xbb8>
   116dc:	ldr	r3, [r5]
   116e0:	ldr	r2, [sp]
   116e4:	add	r1, r5, #8
   116e8:	add	r3, r3, r2
   116ec:	str	r3, [r5]
   116f0:	ldr	r2, [sp, #4]
   116f4:	ldr	r3, [r5, #4]
   116f8:	mov	r0, r4
   116fc:	add	r3, r3, r2
   11700:	str	r3, [r5, #4]
   11704:	bl	11450 <__assert_fail@plt+0x88c>
   11708:	add	r1, r5, #416	; 0x1a0
   1170c:	mov	r7, r0
   11710:	mov	r0, r4
   11714:	bl	11450 <__assert_fail@plt+0x88c>
   11718:	add	r1, r5, #824	; 0x338
   1171c:	mov	r6, r0
   11720:	mov	r0, r4
   11724:	bl	11450 <__assert_fail@plt+0x88c>
   11728:	ldr	r3, [sp]
   1172c:	cmp	r3, #0
   11730:	ble	1176c <__assert_fail@plt+0xba8>
   11734:	add	r1, r5, #920	; 0x398
   11738:	mov	r0, r4
   1173c:	bl	11450 <__assert_fail@plt+0x88c>
   11740:	cmp	r7, #0
   11744:	ble	11754 <__assert_fail@plt+0xb90>
   11748:	add	r1, r5, #992	; 0x3e0
   1174c:	mov	r0, r4
   11750:	bl	1159c <__assert_fail@plt+0x9d8>
   11754:	cmp	r6, #0
   11758:	ble	1176c <__assert_fail@plt+0xba8>
   1175c:	add	r1, r5, #9024	; 0x2340
   11760:	add	r1, r1, #24
   11764:	mov	r0, r4
   11768:	bl	1159c <__assert_fail@plt+0x9d8>
   1176c:	mov	r0, r4
   11770:	bl	120fc <__assert_fail@plt+0x1538>
   11774:	add	sp, sp, #12
   11778:	pop	{r4, r5, r6, r7, pc}
   1177c:	cmp	r6, #0
   11780:	ldr	r1, [pc, #24]	; 117a0 <__assert_fail@plt+0xbdc>
   11784:	ldr	r0, [pc, #24]	; 117a4 <__assert_fail@plt+0xbe0>
   11788:	movne	r1, r6
   1178c:	bl	1228c <error@@Base+0x88>
   11790:	andeq	r6, r1, r3, ror #7
   11794:	andeq	r2, r1, sl, ror #28
   11798:	andeq	r7, r2, r4, ror #1
   1179c:	muleq	r1, sp, r3
   117a0:	andeq	r2, r1, r4, ror #28
   117a4:	muleq	r1, sl, lr
   117a8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   117ac:	mov	r4, r0
   117b0:	mov	r0, r1
   117b4:	ldr	r1, [pc, #276]	; 118d0 <__assert_fail@plt+0xd0c>
   117b8:	bl	122cc <error@@Base+0xc8>
   117bc:	ldr	r3, [pc, #272]	; 118d4 <__assert_fail@plt+0xd10>
   117c0:	ldr	r2, [pc, #272]	; 118d8 <__assert_fail@plt+0xd14>
   117c4:	ldr	r1, [pc, #272]	; 118dc <__assert_fail@plt+0xd18>
   117c8:	mov	r7, #1
   117cc:	mov	r6, #0
   117d0:	mov	r5, r0
   117d4:	bl	10b34 <fprintf@plt>
   117d8:	ldr	r2, [r4]
   117dc:	ldr	r1, [pc, #252]	; 118e0 <__assert_fail@plt+0xd1c>
   117e0:	mov	r0, r5
   117e4:	bl	10b34 <fprintf@plt>
   117e8:	ldr	r2, [r4, #4]
   117ec:	ldr	r1, [pc, #240]	; 118e4 <__assert_fail@plt+0xd20>
   117f0:	mov	r0, r5
   117f4:	bl	10b34 <fprintf@plt>
   117f8:	mov	r1, r4
   117fc:	mov	r0, r5
   11800:	bl	111e8 <__assert_fail@plt+0x624>
   11804:	mov	r1, r5
   11808:	ldr	r0, [pc, #216]	; 118e8 <__assert_fail@plt+0xd24>
   1180c:	bl	10b94 <fputs@plt>
   11810:	ldr	r3, [pc, #212]	; 118ec <__assert_fail@plt+0xd28>
   11814:	mov	r2, #50	; 0x32
   11818:	add	r1, r4, #8
   1181c:	mov	r0, r5
   11820:	stm	sp, {r6, r7}
   11824:	bl	11294 <__assert_fail@plt+0x6d0>
   11828:	ldr	r3, [pc, #192]	; 118f0 <__assert_fail@plt+0xd2c>
   1182c:	mov	r2, #50	; 0x32
   11830:	add	r1, r4, #416	; 0x1a0
   11834:	mov	r0, r5
   11838:	stm	sp, {r6, r7}
   1183c:	bl	11294 <__assert_fail@plt+0x6d0>
   11840:	ldr	r3, [pc, #172]	; 118f4 <__assert_fail@plt+0xd30>
   11844:	str	r7, [sp, #4]
   11848:	str	r7, [sp]
   1184c:	mov	r2, #10
   11850:	add	r1, r4, #824	; 0x338
   11854:	mov	r0, r5
   11858:	bl	11294 <__assert_fail@plt+0x6d0>
   1185c:	ldr	r3, [r4]
   11860:	cmp	r3, r6
   11864:	ble	118c0 <__assert_fail@plt+0xcfc>
   11868:	ldr	r3, [pc, #136]	; 118f8 <__assert_fail@plt+0xd34>
   1186c:	str	r6, [sp, #4]
   11870:	str	r6, [sp]
   11874:	mov	r2, #8
   11878:	add	r1, r4, #920	; 0x398
   1187c:	mov	r0, r5
   11880:	bl	11294 <__assert_fail@plt+0x6d0>
   11884:	ldr	r3, [r4, #8]
   11888:	cmp	r3, r6
   1188c:	ble	118a0 <__assert_fail@plt+0xcdc>
   11890:	ldr	r2, [pc, #84]	; 118ec <__assert_fail@plt+0xd28>
   11894:	add	r1, r4, #992	; 0x3e0
   11898:	mov	r0, r5
   1189c:	bl	11398 <__assert_fail@plt+0x7d4>
   118a0:	ldr	r3, [r4, #416]	; 0x1a0
   118a4:	cmp	r3, #0
   118a8:	ble	118c0 <__assert_fail@plt+0xcfc>
   118ac:	add	r1, r4, #9024	; 0x2340
   118b0:	ldr	r2, [pc, #56]	; 118f0 <__assert_fail@plt+0xd2c>
   118b4:	add	r1, r1, #24
   118b8:	mov	r0, r5
   118bc:	bl	11398 <__assert_fail@plt+0x7d4>
   118c0:	mov	r0, r5
   118c4:	add	sp, sp, #12
   118c8:	pop	{r4, r5, r6, r7, lr}
   118cc:	b	120fc <__assert_fail@plt+0x1538>
   118d0:	andeq	r2, r1, ip, lsr #29
   118d4:	muleq	r1, sp, r3
   118d8:	andeq	r2, r1, sl, ror #28
   118dc:	andeq	r2, r1, lr, lsr #29
   118e0:			; <UNDEFINED> instruction: 0x00012eb3
   118e4:	andeq	r2, r1, r1, asr #29
   118e8:	ldrdeq	r2, [r1], -r7
   118ec:	andeq	r2, r1, r4, ror #29
   118f0:	strdeq	r2, [r1], -r7
   118f4:	andeq	r2, r1, lr, ror #29
   118f8:	andeq	r2, r1, r5, lsl #30
   118fc:	sub	r2, r0, #1
   11900:	mov	r0, #0
   11904:	push	{r4, lr}
   11908:	ldrb	r3, [r2, #1]!
   1190c:	cmp	r3, #0
   11910:	bne	11924 <__assert_fail@plt+0xd60>
   11914:	ldr	r1, [pc, #16]	; 1192c <__assert_fail@plt+0xd68>
   11918:	bl	12cf0 <error@@Base+0xaec>
   1191c:	sxth	r0, r1
   11920:	pop	{r4, pc}
   11924:	add	r0, r0, r3
   11928:	b	11908 <__assert_fail@plt+0xd44>
   1192c:	strdeq	r0, [r0], -r7
   11930:	push	{r4, r5, r6, lr}
   11934:	add	r6, r0, #8000	; 0x1f40
   11938:	mov	r4, r0
   1193c:	mov	r5, r0
   11940:	add	r6, r6, #48	; 0x30
   11944:	mov	r0, r5
   11948:	add	r5, r5, #16
   1194c:	bl	10f28 <__assert_fail@plt+0x364>
   11950:	cmp	r5, r6
   11954:	bne	11944 <__assert_fail@plt+0xd80>
   11958:	add	r4, r4, #4096	; 0x1000
   1195c:	mov	r3, #0
   11960:	str	r3, [r4, #3952]	; 0xf70
   11964:	str	r3, [r4, #3956]	; 0xf74
   11968:	pop	{r4, r5, r6, pc}
   1196c:	push	{r4, r5, r6, lr}
   11970:	mov	r4, r0
   11974:	mov	r0, r1
   11978:	mov	r5, r1
   1197c:	bl	118fc <__assert_fail@plt+0xd38>
   11980:	ldr	r4, [r4, r0, lsl #4]
   11984:	cmp	r4, #0
   11988:	beq	119a0 <__assert_fail@plt+0xddc>
   1198c:	ldr	r1, [r4, #8]
   11990:	mov	r0, r5
   11994:	bl	10a20 <strcmp@plt>
   11998:	cmp	r0, #0
   1199c:	bne	119a8 <__assert_fail@plt+0xde4>
   119a0:	mov	r0, r4
   119a4:	pop	{r4, r5, r6, pc}
   119a8:	ldr	r4, [r4, #4]
   119ac:	b	11984 <__assert_fail@plt+0xdc0>
   119b0:	push	{r4, r5, r6, lr}
   119b4:	mov	r4, r0
   119b8:	ldr	r0, [r1, #8]
   119bc:	mov	r5, r1
   119c0:	bl	118fc <__assert_fail@plt+0xd38>
   119c4:	mov	r1, r5
   119c8:	add	r0, r4, r0, lsl #4
   119cc:	add	r4, r4, #4096	; 0x1000
   119d0:	bl	10f40 <__assert_fail@plt+0x37c>
   119d4:	ldr	r0, [r4, #3952]	; 0xf70
   119d8:	cmp	r0, #0
   119dc:	beq	119ec <__assert_fail@plt+0xe28>
   119e0:	bl	10a44 <free@plt>
   119e4:	mov	r3, #0
   119e8:	str	r3, [r4, #3952]	; 0xf70
   119ec:	ldr	r3, [r4, #3956]	; 0xf74
   119f0:	add	r3, r3, #1
   119f4:	str	r3, [r4, #3956]	; 0xf74
   119f8:	pop	{r4, r5, r6, pc}
   119fc:	push	{r4, r5, r6, lr}
   11a00:	mov	r4, r0
   11a04:	ldr	r0, [r1, #8]
   11a08:	mov	r5, r1
   11a0c:	bl	118fc <__assert_fail@plt+0xd38>
   11a10:	mov	r1, r5
   11a14:	add	r0, r4, r0, lsl #4
   11a18:	add	r4, r4, #4096	; 0x1000
   11a1c:	bl	10f78 <__assert_fail@plt+0x3b4>
   11a20:	ldr	r0, [r4, #3952]	; 0xf70
   11a24:	cmp	r0, #0
   11a28:	beq	11a38 <__assert_fail@plt+0xe74>
   11a2c:	bl	10a44 <free@plt>
   11a30:	mov	r3, #0
   11a34:	str	r3, [r4, #3952]	; 0xf70
   11a38:	ldr	r3, [r4, #3956]	; 0xf74
   11a3c:	sub	r3, r3, #1
   11a40:	str	r3, [r4, #3956]	; 0xf74
   11a44:	pop	{r4, r5, r6, pc}
   11a48:	push	{r4, r5, r6, lr}
   11a4c:	add	r6, r0, #4096	; 0x1000
   11a50:	ldr	r4, [r6, #3952]	; 0xf70
   11a54:	cmp	r4, #0
   11a58:	popne	{r4, r5, r6, pc}
   11a5c:	ldr	r3, [r6, #3956]	; 0xf74
   11a60:	cmp	r3, #0
   11a64:	popeq	{r4, r5, r6, pc}
   11a68:	mov	r5, r0
   11a6c:	mov	r1, #4
   11a70:	mov	r0, r3
   11a74:	bl	12240 <error@@Base+0x3c>
   11a78:	ldr	lr, [pc, #60]	; 11abc <__assert_fail@plt+0xef8>
   11a7c:	mov	r3, r4
   11a80:	mov	r2, r4
   11a84:	str	r0, [r6, #3952]	; 0xf70
   11a88:	ldr	r1, [r5, r2, lsl #4]
   11a8c:	mov	ip, r3
   11a90:	cmp	r1, #0
   11a94:	mov	r3, ip
   11a98:	bne	11aac <__assert_fail@plt+0xee8>
   11a9c:	add	r2, r2, #1
   11aa0:	cmp	r2, lr
   11aa4:	bne	11a88 <__assert_fail@plt+0xec4>
   11aa8:	pop	{r4, r5, r6, pc}
   11aac:	str	r1, [r0, ip, lsl #2]
   11ab0:	add	ip, ip, #1
   11ab4:	ldr	r1, [r1, #4]
   11ab8:	b	11a90 <__assert_fail@plt+0xecc>
   11abc:	strdeq	r0, [r0], -r7
   11ac0:	push	{r4, r5, r6, r7, r8, lr}
   11ac4:	add	r6, r0, #8000	; 0x1f40
   11ac8:	mov	r4, r0
   11acc:	mov	r7, r1
   11ad0:	mov	r5, r0
   11ad4:	add	r6, r6, #48	; 0x30
   11ad8:	mov	r0, r5
   11adc:	mov	r1, r7
   11ae0:	add	r5, r5, #16
   11ae4:	bl	11024 <__assert_fail@plt+0x460>
   11ae8:	cmp	r5, r6
   11aec:	bne	11ad8 <__assert_fail@plt+0xf14>
   11af0:	add	r4, r4, #4096	; 0x1000
   11af4:	ldr	r0, [r4, #3952]	; 0xf70
   11af8:	cmp	r0, #0
   11afc:	beq	11b0c <__assert_fail@plt+0xf48>
   11b00:	bl	10a44 <free@plt>
   11b04:	mov	r3, #0
   11b08:	str	r3, [r4, #3952]	; 0xf70
   11b0c:	mov	r3, #0
   11b10:	str	r3, [r4, #3956]	; 0xf74
   11b14:	pop	{r4, r5, r6, r7, r8, pc}
   11b18:	cmp	r0, #0
   11b1c:	beq	11b80 <__assert_fail@plt+0xfbc>
   11b20:	push	{r4, r5, lr}
   11b24:	mov	r2, #0
   11b28:	ldr	ip, [r0, #12]
   11b2c:	ldr	r1, [pc, #84]	; 11b88 <__assert_fail@plt+0xfc4>
   11b30:	ldr	lr, [pc, #84]	; 11b8c <__assert_fail@plt+0xfc8>
   11b34:	mov	r5, #12
   11b38:	sub	r3, r1, r2
   11b3c:	add	r3, r2, r3, lsr #1
   11b40:	mul	r4, r5, r3
   11b44:	add	r0, lr, r4
   11b48:	ldr	r4, [lr, r4]
   11b4c:	cmp	ip, r4
   11b50:	subcc	r1, r3, #1
   11b54:	bcc	11b68 <__assert_fail@plt+0xfa4>
   11b58:	ldr	r2, [r0, #4]
   11b5c:	cmp	ip, r2
   11b60:	bls	11b78 <__assert_fail@plt+0xfb4>
   11b64:	add	r2, r3, #1
   11b68:	cmp	r1, r2
   11b6c:	bcs	11b38 <__assert_fail@plt+0xf74>
   11b70:	mov	r0, #0
   11b74:	pop	{r4, r5, pc}
   11b78:	ldr	r0, [r0, #8]
   11b7c:	pop	{r4, r5, pc}
   11b80:	mov	r0, #18
   11b84:	bx	lr
   11b88:	andeq	r0, r0, r4, asr #8
   11b8c:	andeq	r2, r1, r0, lsl pc
   11b90:	push	{r4, lr}
   11b94:	subs	r4, r0, #0
   11b98:	beq	11bbc <__assert_fail@plt+0xff8>
   11b9c:	ldr	r4, [r4, #4]
   11ba0:	cmp	r4, #0
   11ba4:	beq	11bbc <__assert_fail@plt+0xff8>
   11ba8:	mov	r0, r4
   11bac:	bl	11b18 <__assert_fail@plt+0xf54>
   11bb0:	bic	r0, r0, #2
   11bb4:	cmp	r0, #4
   11bb8:	beq	11b9c <__assert_fail@plt+0xfd8>
   11bbc:	mov	r0, r4
   11bc0:	pop	{r4, pc}
   11bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc8:	sub	sp, sp, #28
   11bcc:	ldr	r6, [r1]
   11bd0:	str	r0, [sp, #4]
   11bd4:	cmp	r6, #0
   11bd8:	str	r6, [sp, #12]
   11bdc:	beq	11f84 <__assert_fail@plt+0x13c0>
   11be0:	mov	r8, #17
   11be4:	add	r7, sp, #8
   11be8:	mov	r9, #8
   11bec:	mov	sl, #15
   11bf0:	ldr	r3, [r7, #4]
   11bf4:	cmp	r3, #0
   11bf8:	bne	11d04 <__assert_fail@plt+0x1140>
   11bfc:	ldr	r0, [r6, #12]
   11c00:	bl	10a50 <utf8proc_get_property@plt>
   11c04:	ldrh	r3, [r0]
   11c08:	cmp	r3, #29
   11c0c:	bhi	11cd4 <__assert_fail@plt+0x1110>
   11c10:	mov	r2, #1
   11c14:	ldr	r1, [pc, #948]	; 11fd0 <__assert_fail@plt+0x140c>
   11c18:	ands	r3, r1, r2, lsl r3
   11c1c:	beq	11cd4 <__assert_fail@plt+0x1110>
   11c20:	ldr	r8, [r7, #4]
   11c24:	mov	r4, r6
   11c28:	mov	r5, #0
   11c2c:	b	11c7c <__assert_fail@plt+0x10b8>
   11c30:	cmp	r4, #0
   11c34:	bne	11c4c <__assert_fail@plt+0x1088>
   11c38:	ldr	r3, [pc, #916]	; 11fd4 <__assert_fail@plt+0x1410>
   11c3c:	mov	r2, #249	; 0xf9
   11c40:	ldr	r1, [pc, #912]	; 11fd8 <__assert_fail@plt+0x1414>
   11c44:	ldr	r0, [pc, #912]	; 11fdc <__assert_fail@plt+0x1418>
   11c48:	b	11c70 <__assert_fail@plt+0x10ac>
   11c4c:	add	r1, sp, #8
   11c50:	ldr	r0, [r4, #12]
   11c54:	bl	10a68 <utf8proc_encode_char@plt>
   11c58:	cmp	r0, #0
   11c5c:	bne	11c74 <__assert_fail@plt+0x10b0>
   11c60:	ldr	r3, [pc, #876]	; 11fd4 <__assert_fail@plt+0x1410>
   11c64:	ldr	r1, [pc, #876]	; 11fd8 <__assert_fail@plt+0x1414>
   11c68:	ldr	r0, [pc, #880]	; 11fe0 <__assert_fail@plt+0x141c>
   11c6c:	mov	r2, #253	; 0xfd
   11c70:	bl	10bc4 <__assert_fail@plt>
   11c74:	ldr	r4, [r4, #4]
   11c78:	add	r5, r5, r0
   11c7c:	cmp	r8, r4
   11c80:	bne	11c30 <__assert_fail@plt+0x106c>
   11c84:	add	r0, r5, #1
   11c88:	bl	10ad4 <malloc@plt>
   11c8c:	mov	r5, #0
   11c90:	mov	r4, r0
   11c94:	cmp	r8, r6
   11c98:	bne	11cdc <__assert_fail@plt+0x1118>
   11c9c:	mov	r3, #0
   11ca0:	strb	r3, [r4, r5]
   11ca4:	mov	r1, #12
   11ca8:	mov	r0, #1
   11cac:	bl	12240 <error@@Base+0x3c>
   11cb0:	mov	r5, r0
   11cb4:	mov	r0, r4
   11cb8:	bl	10b58 <utf8proc_NFC@plt>
   11cbc:	mov	r1, r5
   11cc0:	str	r0, [r5, #8]
   11cc4:	ldr	r0, [sp, #4]
   11cc8:	bl	10f50 <__assert_fail@plt+0x38c>
   11ccc:	mov	r0, r4
   11cd0:	bl	10a44 <free@plt>
   11cd4:	ldr	r6, [r7, #4]
   11cd8:	b	11bd4 <__assert_fail@plt+0x1010>
   11cdc:	cmp	r6, #0
   11ce0:	ldreq	r3, [pc, #764]	; 11fe4 <__assert_fail@plt+0x1420>
   11ce4:	ldreq	r2, [pc, #764]	; 11fe8 <__assert_fail@plt+0x1424>
   11ce8:	beq	11c40 <__assert_fail@plt+0x107c>
   11cec:	add	r1, r4, r5
   11cf0:	ldr	r0, [r6, #12]
   11cf4:	bl	10a68 <utf8proc_encode_char@plt>
   11cf8:	ldr	r6, [r6, #4]
   11cfc:	add	r5, r5, r0
   11d00:	b	11c94 <__assert_fail@plt+0x10d0>
   11d04:	mov	r0, r7
   11d08:	bl	11b90 <__assert_fail@plt+0xfcc>
   11d0c:	mov	r7, r0
   11d10:	bl	11b18 <__assert_fail@plt+0xf54>
   11d14:	mov	r4, r0
   11d18:	mov	r0, r7
   11d1c:	bl	11b90 <__assert_fail@plt+0xfcc>
   11d20:	mov	fp, r0
   11d24:	bl	11b18 <__assert_fail@plt+0xf54>
   11d28:	mov	r5, r0
   11d2c:	mov	r0, fp
   11d30:	bl	11b90 <__assert_fail@plt+0xfcc>
   11d34:	bl	11b18 <__assert_fail@plt+0xf54>
   11d38:	cmp	r4, #1
   11d3c:	cmpeq	r5, #2
   11d40:	sub	r3, r5, #2
   11d44:	sub	r2, r4, #1
   11d48:	clz	r3, r3
   11d4c:	lsr	r3, r3, #5
   11d50:	beq	11f54 <__assert_fail@plt+0x1390>
   11d54:	cmp	r2, #2
   11d58:	bls	11f7c <__assert_fail@plt+0x13b8>
   11d5c:	bic	r2, r5, #2
   11d60:	cmp	r2, #1
   11d64:	orreq	r3, r3, #1
   11d68:	cmp	r3, #0
   11d6c:	bne	11f7c <__assert_fail@plt+0x13b8>
   11d70:	sub	r3, r4, #8
   11d74:	cmp	r3, #1
   11d78:	bhi	11da4 <__assert_fail@plt+0x11e0>
   11d7c:	sub	r1, r5, #8
   11d80:	cmp	r1, #1
   11d84:	bls	11e60 <__assert_fail@plt+0x129c>
   11d88:	sub	r1, r5, #12
   11d8c:	cmp	r5, #10
   11d90:	cmpne	r1, #1
   11d94:	bhi	11da4 <__assert_fail@plt+0x11e0>
   11d98:	sub	r1, r0, #8
   11d9c:	cmp	r1, #1
   11da0:	bls	11e60 <__assert_fail@plt+0x129c>
   11da4:	sub	r1, r8, #8
   11da8:	cmp	r1, #1
   11dac:	bhi	11dcc <__assert_fail@plt+0x1208>
   11db0:	sub	r1, r4, #12
   11db4:	cmp	r4, #10
   11db8:	cmpne	r1, #1
   11dbc:	bhi	11dcc <__assert_fail@plt+0x1208>
   11dc0:	sub	r1, r5, #8
   11dc4:	cmp	r1, #1
   11dc8:	bls	11e60 <__assert_fail@plt+0x129c>
   11dcc:	sub	r1, r4, #8
   11dd0:	sub	lr, r5, #10
   11dd4:	clz	r1, r1
   11dd8:	clz	lr, lr
   11ddc:	lsr	r1, r1, #5
   11de0:	lsr	lr, lr, #5
   11de4:	tst	r1, lr
   11de8:	bne	11f5c <__assert_fail@plt+0x1398>
   11dec:	cmp	r5, #11
   11df0:	movne	r1, #0
   11df4:	andeq	r1, r1, #1
   11df8:	cmp	r0, #8
   11dfc:	movne	r1, #0
   11e00:	andeq	r1, r1, #1
   11e04:	cmp	r1, #0
   11e08:	bne	11f5c <__assert_fail@plt+0x1398>
   11e0c:	cmp	r5, #8
   11e10:	cmpeq	r4, #11
   11e14:	moveq	r1, #1
   11e18:	movne	r1, #0
   11e1c:	cmp	r8, #8
   11e20:	movne	r1, #0
   11e24:	andeq	r1, r1, #1
   11e28:	cmp	r1, #0
   11e2c:	bne	11f64 <__assert_fail@plt+0x13a0>
   11e30:	sub	r1, r4, #15
   11e34:	sub	ip, r5, #15
   11e38:	clz	r1, r1
   11e3c:	clz	ip, ip
   11e40:	lsr	r1, r1, #5
   11e44:	lsr	ip, ip, #5
   11e48:	tst	r1, ip
   11e4c:	bne	11f6c <__assert_fail@plt+0x13a8>
   11e50:	cmp	r3, #1
   11e54:	bhi	11e68 <__assert_fail@plt+0x12a4>
   11e58:	cmp	r5, #15
   11e5c:	bne	11e88 <__assert_fail@plt+0x12c4>
   11e60:	mov	r8, r4
   11e64:	b	11bf0 <__assert_fail@plt+0x102c>
   11e68:	cmp	r4, #15
   11e6c:	bne	11fb4 <__assert_fail@plt+0x13f0>
   11e70:	sub	fp, r5, #8
   11e74:	cmp	fp, #1
   11e78:	bls	11e60 <__assert_fail@plt+0x129c>
   11e7c:	cmp	r8, #15
   11e80:	bne	11eac <__assert_fail@plt+0x12e8>
   11e84:	b	11e90 <__assert_fail@plt+0x12cc>
   11e88:	cmp	r8, #15
   11e8c:	bne	11ea4 <__assert_fail@plt+0x12e0>
   11e90:	sub	r8, r4, #10
   11e94:	bics	r8, r8, #2
   11e98:	bne	11ea4 <__assert_fail@plt+0x12e0>
   11e9c:	cmp	r5, #15
   11ea0:	beq	11e60 <__assert_fail@plt+0x129c>
   11ea4:	cmp	r4, #15
   11ea8:	bne	11ec8 <__assert_fail@plt+0x1304>
   11eac:	cmp	r2, #12
   11eb0:	movne	r2, lr
   11eb4:	orreq	r2, lr, #1
   11eb8:	cmp	r2, #0
   11ebc:	beq	11ec8 <__assert_fail@plt+0x1304>
   11ec0:	cmp	r0, #15
   11ec4:	beq	11f6c <__assert_fail@plt+0x13a8>
   11ec8:	sub	r0, r4, #7
   11ecc:	sub	r2, r5, #7
   11ed0:	clz	r0, r0
   11ed4:	clz	r2, r2
   11ed8:	lsr	r0, r0, #5
   11edc:	lsr	r2, r2, #5
   11ee0:	tst	r0, r2
   11ee4:	bne	11f74 <__assert_fail@plt+0x13b0>
   11ee8:	cmp	r3, #1
   11eec:	movhi	r3, r1
   11ef0:	orrls	r3, r1, #1
   11ef4:	cmp	r3, #0
   11ef8:	bne	11f0c <__assert_fail@plt+0x1348>
   11efc:	cmp	r4, #16
   11f00:	orreq	r0, r0, #1
   11f04:	cmp	r0, #0
   11f08:	beq	11f14 <__assert_fail@plt+0x1350>
   11f0c:	cmp	r5, #16
   11f10:	beq	11e60 <__assert_fail@plt+0x129c>
   11f14:	cmp	r4, #16
   11f18:	bne	11f40 <__assert_fail@plt+0x137c>
   11f1c:	sub	r3, r5, #8
   11f20:	cmp	r3, #1
   11f24:	orrls	ip, ip, #1
   11f28:	cmp	ip, #0
   11f2c:	bne	11e60 <__assert_fail@plt+0x129c>
   11f30:	cmp	r5, #16
   11f34:	orreq	r2, r2, #1
   11f38:	cmp	r2, #0
   11f3c:	bne	11e60 <__assert_fail@plt+0x129c>
   11f40:	cmp	r4, #5
   11f44:	cmpeq	r5, #5
   11f48:	bne	11f7c <__assert_fail@plt+0x13b8>
   11f4c:	mov	r4, #5
   11f50:	b	11e60 <__assert_fail@plt+0x129c>
   11f54:	mov	r4, #1
   11f58:	b	11e60 <__assert_fail@plt+0x129c>
   11f5c:	mov	r4, r9
   11f60:	b	11e60 <__assert_fail@plt+0x129c>
   11f64:	mov	r4, #11
   11f68:	b	11e60 <__assert_fail@plt+0x129c>
   11f6c:	mov	r4, sl
   11f70:	b	11e60 <__assert_fail@plt+0x129c>
   11f74:	mov	r4, #7
   11f78:	b	11e60 <__assert_fail@plt+0x129c>
   11f7c:	cmp	r7, #0
   11f80:	bne	11f90 <__assert_fail@plt+0x13cc>
   11f84:	add	sp, sp, #28
   11f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f8c:	mov	r7, r4
   11f90:	ldr	r4, [r7, #4]
   11f94:	cmp	r4, #0
   11f98:	beq	11bfc <__assert_fail@plt+0x1038>
   11f9c:	mov	r0, r4
   11fa0:	bl	11b18 <__assert_fail@plt+0xf54>
   11fa4:	bic	r0, r0, #2
   11fa8:	cmp	r0, #4
   11fac:	beq	11f8c <__assert_fail@plt+0x13c8>
   11fb0:	b	11bfc <__assert_fail@plt+0x1038>
   11fb4:	cmp	r8, #15
   11fb8:	bne	11ec8 <__assert_fail@plt+0x1304>
   11fbc:	cmp	r4, #14
   11fc0:	bne	11e90 <__assert_fail@plt+0x12cc>
   11fc4:	cmp	r5, #15
   11fc8:	bne	11ec8 <__assert_fail@plt+0x1304>
   11fcc:	b	11e60 <__assert_fail@plt+0x129c>
   11fd0:	strdcs	r1, [r0], -lr
   11fd4:	andeq	r6, r1, ip, asr #4
   11fd8:	andeq	r6, r1, lr, ror #4
   11fdc:	andeq	r6, r1, r5, ror r2
   11fe0:	andeq	r6, r1, r5, lsl #5
   11fe4:	andeq	r6, r1, sp, asr r2
   11fe8:	andeq	r0, r0, sp, lsl #2
   11fec:	push	{r4, lr}
   11ff0:	mov	r4, r0
   11ff4:	ldr	r0, [r0, #8]
   11ff8:	bl	10a44 <free@plt>
   11ffc:	mov	r0, r4
   12000:	pop	{r4, lr}
   12004:	b	10a44 <free@plt>
   12008:	ldr	r3, [pc, #56]	; 12048 <__assert_fail@plt+0x1484>
   1200c:	push	{r4, r5, lr}
   12010:	sub	sp, sp, #116	; 0x74
   12014:	ldr	r4, [r3]
   12018:	mov	r5, r0
   1201c:	bl	10b04 <getpid@plt>
   12020:	mov	r2, r4
   12024:	ldr	r1, [pc, #32]	; 1204c <__assert_fail@plt+0x1488>
   12028:	str	r5, [sp]
   1202c:	mov	r3, r0
   12030:	add	r0, sp, #12
   12034:	bl	10b70 <sprintf@plt>
   12038:	add	r0, sp, #12
   1203c:	bl	10a74 <strdup@plt>
   12040:	add	sp, sp, #116	; 0x74
   12044:	pop	{r4, r5, pc}
   12048:	andeq	r9, r2, r8, ror #1
   1204c:	muleq	r1, r8, r2
   12050:	ldr	r3, [pc, #84]	; 120ac <__assert_fail@plt+0x14e8>
   12054:	push	{r7, lr}
   12058:	mov	r5, r0
   1205c:	ldr	r3, [r3]
   12060:	cmp	r3, #0
   12064:	beq	1206c <__assert_fail@plt+0x14a8>
   12068:	blx	r3
   1206c:	ldr	r6, [pc, #60]	; 120b0 <__assert_fail@plt+0x14ec>
   12070:	mov	r4, #1
   12074:	ldrsh	r3, [r6]
   12078:	cmp	r3, r4
   1207c:	bge	12088 <__assert_fail@plt+0x14c4>
   12080:	mov	r0, r5
   12084:	bl	10b10 <exit@plt>
   12088:	mov	r0, r4
   1208c:	bl	12008 <__assert_fail@plt+0x1444>
   12090:	add	r4, r4, #1
   12094:	sxth	r4, r4
   12098:	mov	r7, r0
   1209c:	bl	10a8c <unlink@plt>
   120a0:	mov	r0, r7
   120a4:	bl	10a44 <free@plt>
   120a8:	b	12074 <__assert_fail@plt+0x14b0>
   120ac:	andeq	r9, r2, ip, ror #1
   120b0:	andeq	r7, r2, r8, asr #2
   120b4:	mov	r3, #0
   120b8:	ldrb	r2, [r0, r3]
   120bc:	cmp	r2, #0
   120c0:	beq	120ec <__assert_fail@plt+0x1528>
   120c4:	ldrb	ip, [r1, r3]
   120c8:	cmp	ip, r2
   120cc:	beq	120e4 <__assert_fail@plt+0x1520>
   120d0:	ldrb	r3, [r1, r3]
   120d4:	cmp	r3, r2
   120d8:	mvnhi	r0, #0
   120dc:	movls	r0, #1
   120e0:	bx	lr
   120e4:	add	r3, r3, #1
   120e8:	b	120b8 <__assert_fail@plt+0x14f4>
   120ec:	ldrb	r0, [r1, r3]
   120f0:	cmp	r0, #0
   120f4:	bne	120d0 <__assert_fail@plt+0x150c>
   120f8:	bx	lr
   120fc:	ldr	r2, [pc, #28]	; 12120 <__assert_fail@plt+0x155c>
   12100:	ldr	r2, [r2]
   12104:	cmp	r2, r0
   12108:	bxeq	lr
   1210c:	ldr	r2, [pc, #16]	; 12124 <__assert_fail@plt+0x1560>
   12110:	ldr	r2, [r2]
   12114:	cmp	r0, r2
   12118:	bxeq	lr
   1211c:	b	10b4c <fclose@plt>
   12120:	ldrdeq	r7, [r2], -r0
   12124:	ldrdeq	r7, [r2], -r4
   12128:	push	{lr}		; (str lr, [sp, #-4]!)
   1212c:	sub	sp, sp, #92	; 0x5c
   12130:	mov	r1, sp
   12134:	bl	12d84 <error@@Base+0xb80>
   12138:	clz	r0, r0
   1213c:	lsr	r0, r0, #5
   12140:	add	sp, sp, #92	; 0x5c
   12144:	pop	{pc}		; (ldr pc, [sp], #4)
   12148:	ldr	r3, [pc, #36]	; 12174 <__assert_fail@plt+0x15b0>
   1214c:	push	{r4, lr}
   12150:	ldrh	r0, [r3]
   12154:	add	r0, r0, #1
   12158:	sxth	r0, r0
   1215c:	strh	r0, [r3]
   12160:	bl	12008 <__assert_fail@plt+0x1444>
   12164:	mov	r4, r0
   12168:	bl	10a8c <unlink@plt>
   1216c:	mov	r0, r4
   12170:	pop	{r4, pc}
   12174:	andeq	r7, r2, r8, asr #2
   12178:	push	{r4, lr}
   1217c:	mov	r4, r0
   12180:	bl	10b28 <strlen@plt>
   12184:	sub	r0, r0, #1
   12188:	sxth	r0, r0
   1218c:	cmp	r0, #0
   12190:	blt	121a0 <__assert_fail@plt+0x15dc>
   12194:	ldrb	r3, [r4, r0]
   12198:	cmp	r3, #47	; 0x2f
   1219c:	bne	12184 <__assert_fail@plt+0x15c0>
   121a0:	add	r0, r0, #1
   121a4:	add	r0, r4, r0
   121a8:	pop	{r4, pc}
   121ac:	push	{r4, lr}
   121b0:	mov	r0, #0
   121b4:	bl	12050 <__assert_fail@plt+0x148c>
   121b8:	ldr	r2, [pc, #52]	; 121f4 <__assert_fail@plt+0x1630>
   121bc:	push	{r4, lr}
   121c0:	ldr	r2, [r2]
   121c4:	cmp	r2, #0
   121c8:	beq	121d4 <__assert_fail@plt+0x1610>
   121cc:	blx	r2
   121d0:	bl	121ac <__assert_fail@plt+0x15e8>
   121d4:	mov	r3, r0
   121d8:	ldr	r2, [pc, #24]	; 121f8 <__assert_fail@plt+0x1634>
   121dc:	ldr	r0, [pc, #24]	; 121fc <__assert_fail@plt+0x1638>
   121e0:	ldr	r1, [pc, #24]	; 12200 <__assert_fail@plt+0x163c>
   121e4:	ldr	r2, [r2]
   121e8:	ldr	r0, [r0]
   121ec:	bl	10b34 <fprintf@plt>
   121f0:	b	121d0 <__assert_fail@plt+0x160c>
   121f4:	andeq	r9, r2, r4, ror #1
   121f8:	andeq	r9, r2, r8, ror #1
   121fc:	andeq	r7, r2, r8, asr #1
   12200:	andeq	r6, r1, r6, lsr #5

00012204 <error@@Base>:
   12204:	mov	r3, r0
   12208:	ldr	r2, [pc, #32]	; 12230 <error@@Base+0x2c>
   1220c:	ldr	r0, [pc, #32]	; 12234 <error@@Base+0x30>
   12210:	push	{r4, lr}
   12214:	ldr	r2, [r2]
   12218:	ldr	r1, [pc, #24]	; 12238 <error@@Base+0x34>
   1221c:	ldr	r0, [r0]
   12220:	bl	10b34 <fprintf@plt>
   12224:	ldr	r3, [pc, #16]	; 1223c <error@@Base+0x38>
   12228:	ldr	r0, [r3]
   1222c:	bl	12050 <__assert_fail@plt+0x148c>
   12230:	andeq	r9, r2, r8, ror #1
   12234:	andeq	r7, r2, r8, asr #1
   12238:			; <UNDEFINED> instruction: 0x000162b5
   1223c:	strheq	r7, [r2], -ip
   12240:	push	{r4, lr}
   12244:	bl	10a08 <calloc@plt>
   12248:	cmp	r0, #0
   1224c:	popne	{r4, pc}
   12250:	ldr	r0, [pc]	; 12258 <error@@Base+0x54>
   12254:	bl	12204 <error@@Base>
   12258:			; <UNDEFINED> instruction: 0x000162bd
   1225c:	ldr	r3, [pc, #32]	; 12284 <error@@Base+0x80>
   12260:	ldrb	r2, [r3, #2]
   12264:	cmp	r2, #0
   12268:	bne	12280 <error@@Base+0x7c>
   1226c:	push	{r4, lr}
   12270:	mov	r2, #1
   12274:	ldr	r0, [pc, #12]	; 12288 <error@@Base+0x84>
   12278:	strb	r2, [r3, #2]
   1227c:	bl	12204 <error@@Base>
   12280:	bx	lr
   12284:	andeq	r7, r2, r8, asr #2
   12288:	ldrdeq	r6, [r1], -r7
   1228c:	push	{r0, r1, r2, lr}
   12290:	mov	r3, r0
   12294:	ldr	r2, [pc, #32]	; 122bc <error@@Base+0xb8>
   12298:	ldr	r0, [pc, #32]	; 122c0 <error@@Base+0xbc>
   1229c:	str	r1, [sp]
   122a0:	ldr	r1, [pc, #28]	; 122c4 <error@@Base+0xc0>
   122a4:	ldr	r2, [r2]
   122a8:	ldr	r0, [r0]
   122ac:	bl	10b34 <fprintf@plt>
   122b0:	ldr	r3, [pc, #16]	; 122c8 <error@@Base+0xc4>
   122b4:	ldr	r0, [r3]
   122b8:	bl	12050 <__assert_fail@plt+0x148c>
   122bc:	andeq	r9, r2, r8, ror #1
   122c0:	andeq	r7, r2, r8, asr #1
   122c4:	andeq	r6, r1, r6, ror #5
   122c8:	strheq	r7, [r2], -ip
   122cc:	push	{r4, r5, r6, lr}
   122d0:	subs	r4, r0, #0
   122d4:	mov	r5, r1
   122d8:	bne	122f4 <error@@Base+0xf0>
   122dc:	ldrb	r3, [r1]
   122e0:	cmp	r3, #114	; 0x72
   122e4:	ldreq	r3, [pc, #44]	; 12318 <error@@Base+0x114>
   122e8:	ldrne	r3, [pc, #44]	; 1231c <error@@Base+0x118>
   122ec:	ldr	r0, [r3]
   122f0:	pop	{r4, r5, r6, pc}
   122f4:	bl	10a38 <fopen@plt>
   122f8:	cmp	r0, #0
   122fc:	popne	{r4, r5, r6, pc}
   12300:	ldrb	r3, [r5]
   12304:	mov	r1, r4
   12308:	cmp	r3, #119	; 0x77
   1230c:	ldreq	r0, [pc, #12]	; 12320 <error@@Base+0x11c>
   12310:	ldrne	r0, [pc, #12]	; 12324 <error@@Base+0x120>
   12314:	bl	1228c <error@@Base+0x88>
   12318:	ldrdeq	r7, [r2], -r0
   1231c:	ldrdeq	r7, [r2], -r4
   12320:	strdeq	r6, [r1], -r3
   12324:	andeq	r6, r1, r9, lsl #6
   12328:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1232c:	mov	r8, r0
   12330:	ldr	r0, [r1]
   12334:	str	r2, [sp]
   12338:	mov	r7, r1
   1233c:	mov	r9, r3
   12340:	bl	12178 <__assert_fail@plt+0x15b4>
   12344:	ldr	r3, [pc, #396]	; 124d8 <error@@Base+0x2d4>
   12348:	ldr	r1, [pc, #396]	; 124dc <error@@Base+0x2d8>
   1234c:	str	r0, [r3]
   12350:	mov	r0, #2
   12354:	bl	10aec <__sysv_signal@plt>
   12358:	ldr	r1, [pc, #380]	; 124dc <error@@Base+0x2d8>
   1235c:	mov	r0, #15
   12360:	bl	10aec <__sysv_signal@plt>
   12364:	ldr	r3, [r8]
   12368:	cmp	r3, #1
   1236c:	movne	r6, #0
   12370:	movne	r5, #1
   12374:	bne	12498 <error@@Base+0x294>
   12378:	ldr	r3, [pc, #352]	; 124e0 <error@@Base+0x2dc>
   1237c:	ldrb	r6, [r3, #4]
   12380:	cmp	r6, #0
   12384:	beq	124a4 <error@@Base+0x2a0>
   12388:	ldr	r0, [sp]
   1238c:	bl	121b8 <__assert_fail@plt+0x15f4>
   12390:	ldr	r4, [r7, r5, lsl #2]
   12394:	lsl	sl, r5, #2
   12398:	ldrb	r3, [r4]
   1239c:	cmp	r3, #45	; 0x2d
   123a0:	bne	124c8 <error@@Base+0x2c4>
   123a4:	ldrb	r3, [r4, #1]
   123a8:	cmp	r3, #0
   123ac:	str	r3, [sp, #4]
   123b0:	beq	124c8 <error@@Base+0x2c4>
   123b4:	mov	r0, r4
   123b8:	bl	10b28 <strlen@plt>
   123bc:	mov	r1, r4
   123c0:	mov	r2, r0
   123c4:	ldr	r0, [pc, #280]	; 124e4 <error@@Base+0x2e0>
   123c8:	bl	10ba0 <strncmp@plt>
   123cc:	cmp	r0, #0
   123d0:	beq	12388 <error@@Base+0x184>
   123d4:	add	r0, r5, #1
   123d8:	cmp	r0, fp
   123dc:	addlt	sl, r7, sl
   123e0:	movge	r1, #0
   123e4:	ldrlt	r1, [sl, #4]
   123e8:	cmp	r9, #0
   123ec:	ldr	r3, [sp, #4]
   123f0:	beq	124b0 <error@@Base+0x2ac>
   123f4:	mov	r2, #0
   123f8:	add	lr, r2, r2, lsl #1
   123fc:	add	ip, r9, lr, lsl #2
   12400:	ldrb	lr, [r9, lr, lsl #2]
   12404:	cmp	lr, #0
   12408:	beq	124b0 <error@@Base+0x2ac>
   1240c:	cmp	r3, lr
   12410:	bne	12450 <error@@Base+0x24c>
   12414:	ldr	r3, [ip, #4]
   12418:	cmp	r3, #0
   1241c:	bne	1245c <error@@Base+0x258>
   12420:	ldr	r3, [ip, #8]
   12424:	cmp	r3, #0
   12428:	beq	124b0 <error@@Base+0x2ac>
   1242c:	ldrb	r2, [r4, #2]
   12430:	cmp	r2, #0
   12434:	bne	124b0 <error@@Base+0x2ac>
   12438:	ldrb	r2, [r3]
   1243c:	cmp	r2, #0
   12440:	bne	124bc <error@@Base+0x2b8>
   12444:	mov	r2, #1
   12448:	strb	r2, [r3]
   1244c:	b	12490 <error@@Base+0x28c>
   12450:	add	r2, r2, #1
   12454:	sxth	r2, r2
   12458:	b	123f8 <error@@Base+0x1f4>
   1245c:	ldrb	r2, [r4, #2]
   12460:	cmp	r2, #0
   12464:	cmpeq	r1, #0
   12468:	beq	12420 <error@@Base+0x21c>
   1246c:	ldr	ip, [r3]
   12470:	cmp	ip, #0
   12474:	bne	124bc <error@@Base+0x2b8>
   12478:	cmp	r2, #0
   1247c:	addne	r1, r4, #2
   12480:	str	r1, [r3]
   12484:	ldrb	r3, [r4, #2]
   12488:	cmp	r3, #0
   1248c:	sxtheq	r5, r0
   12490:	add	r5, r5, #1
   12494:	sxth	r5, r5
   12498:	ldr	fp, [r8]
   1249c:	cmp	r5, fp
   124a0:	blt	12390 <error@@Base+0x18c>
   124a4:	str	r6, [r8]
   124a8:	add	sp, sp, #12
   124ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b0:	ldr	r0, [pc, #48]	; 124e8 <error@@Base+0x2e4>
   124b4:	mov	r1, r4
   124b8:	bl	1228c <error@@Base+0x88>
   124bc:	mov	r1, r4
   124c0:	ldr	r0, [pc, #36]	; 124ec <error@@Base+0x2e8>
   124c4:	b	124b8 <error@@Base+0x2b4>
   124c8:	add	r3, r6, #1
   124cc:	str	r4, [r7, r6, lsl #2]
   124d0:	sxth	r6, r3
   124d4:	b	12490 <error@@Base+0x28c>
   124d8:	andeq	r9, r2, r8, ror #1
   124dc:	andeq	r2, r1, ip, asr r2
   124e0:	strheq	r7, [r2], -ip
   124e4:	andeq	r6, r1, sp, lsl r3
   124e8:	andeq	r6, r1, r3, lsr #6
   124ec:	andeq	r6, r1, r2, lsr r3
   124f0:	push	{r0, r1, r2, lr}
   124f4:	mov	r3, r0
   124f8:	ldr	r2, [pc, #28]	; 1251c <error@@Base+0x318>
   124fc:	ldr	r0, [pc, #28]	; 12520 <error@@Base+0x31c>
   12500:	str	r1, [sp]
   12504:	ldr	r1, [pc, #24]	; 12524 <error@@Base+0x320>
   12508:	ldr	r2, [r2]
   1250c:	ldr	r0, [r0]
   12510:	bl	10b34 <fprintf@plt>
   12514:	add	sp, sp, #12
   12518:	pop	{pc}		; (ldr pc, [sp], #4)
   1251c:	andeq	r9, r2, r8, ror #1
   12520:	andeq	r7, r2, r8, asr #1
   12524:	andeq	r6, r1, r6, ror #5
   12528:	push	{r4, r5, r6, lr}
   1252c:	mov	r4, r0
   12530:	uxtb	r6, r1
   12534:	mov	r0, #1
   12538:	mov	r1, #16
   1253c:	mov	r5, r2
   12540:	bl	12240 <error@@Base+0x3c>
   12544:	strb	r6, [r0, #8]
   12548:	str	r5, [r0, #12]
   1254c:	mov	r1, r0
   12550:	mov	r0, r4
   12554:	pop	{r4, r5, r6, lr}
   12558:	b	10f50 <__assert_fail@plt+0x38c>
   1255c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12560:	sub	sp, sp, #116	; 0x74
   12564:	ldrb	r3, [r2]
   12568:	adds	r3, r3, #0
   1256c:	movne	r3, #1
   12570:	cmp	r1, #0
   12574:	movne	r3, #0
   12578:	cmp	r3, #0
   1257c:	beq	1258c <error@@Base+0x388>
   12580:	ldr	r1, [pc, #752]	; 12878 <error@@Base+0x674>
   12584:	ldr	r0, [pc, #752]	; 1287c <error@@Base+0x678>
   12588:	bl	1228c <error@@Base+0x88>
   1258c:	mov	r6, r0
   12590:	mov	r0, r1
   12594:	ldr	r1, [pc, #740]	; 12880 <error@@Base+0x67c>
   12598:	mov	r4, r2
   1259c:	ldr	r7, [r6, #4]
   125a0:	bl	122cc <error@@Base+0xc8>
   125a4:	ldrb	r3, [r4]
   125a8:	cmp	r3, #0
   125ac:	mov	r5, r0
   125b0:	beq	125fc <error@@Base+0x3f8>
   125b4:	mov	r2, r0
   125b8:	mov	r1, #99	; 0x63
   125bc:	add	r0, sp, #12
   125c0:	bl	10a5c <fgets@plt>
   125c4:	cmp	r0, #0
   125c8:	beq	125ec <error@@Base+0x3e8>
   125cc:	mov	r2, #51	; 0x33
   125d0:	ldr	r1, [pc, #684]	; 12884 <error@@Base+0x680>
   125d4:	add	r0, sp, #12
   125d8:	bl	10ba0 <strncmp@plt>
   125dc:	subs	r8, r0, #0
   125e0:	moveq	r9, #99	; 0x63
   125e4:	ldreq	sl, [pc, #668]	; 12888 <error@@Base+0x684>
   125e8:	beq	12678 <error@@Base+0x474>
   125ec:	mov	r0, r5
   125f0:	bl	10a80 <rewind@plt>
   125f4:	mov	r3, #0
   125f8:	strb	r3, [r4, #11]
   125fc:	ldrb	r3, [r4, #1]
   12600:	ldr	r8, [r4, #4]
   12604:	mov	r0, r5
   12608:	cmp	r8, #0
   1260c:	mov	fp, #0
   12610:	str	r3, [sp]
   12614:	moveq	r8, #94	; 0x5e
   12618:	bl	10bb8 <getc@plt>
   1261c:	add	r3, sp, #9
   12620:	str	r3, [sp, #4]
   12624:	cmn	r0, #1
   12628:	bne	12698 <error@@Base+0x494>
   1262c:	mov	r0, r5
   12630:	bl	120fc <__assert_fail@plt+0x1538>
   12634:	ldrb	r3, [r4, #9]
   12638:	cmp	r3, #0
   1263c:	bne	1273c <error@@Base+0x538>
   12640:	ldrb	r3, [r4, #10]
   12644:	cmp	r3, #0
   12648:	bne	12850 <error@@Base+0x64c>
   1264c:	add	sp, sp, #116	; 0x74
   12650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12654:	mov	r1, sl
   12658:	add	r0, sp, #12
   1265c:	bl	10a20 <strcmp@plt>
   12660:	cmp	r0, #0
   12664:	bne	12678 <error@@Base+0x474>
   12668:	add	r8, r8, #1
   1266c:	sxth	r8, r8
   12670:	cmp	r8, #1
   12674:	bgt	12690 <error@@Base+0x48c>
   12678:	mov	r2, r5
   1267c:	mov	r1, r9
   12680:	add	r0, sp, #12
   12684:	bl	10a5c <fgets@plt>
   12688:	cmp	r0, #0
   1268c:	bne	12654 <error@@Base+0x450>
   12690:	mov	r3, #1
   12694:	b	125f8 <error@@Base+0x3f4>
   12698:	ldr	r3, [pc, #492]	; 1288c <error@@Base+0x688>
   1269c:	ldrsb	r9, [r3, r0]
   126a0:	cmp	r9, #0
   126a4:	bgt	126b0 <error@@Base+0x4ac>
   126a8:	ldr	r0, [pc, #480]	; 12890 <error@@Base+0x68c>
   126ac:	bl	12204 <error@@Base>
   126b0:	cmp	r9, #1
   126b4:	strb	r0, [sp, #8]
   126b8:	beq	126e0 <error@@Base+0x4dc>
   126bc:	sub	sl, r9, #1
   126c0:	mov	r3, r5
   126c4:	mov	r2, sl
   126c8:	mov	r1, #1
   126cc:	ldr	r0, [sp, #4]
   126d0:	bl	10ab0 <fread@plt>
   126d4:	cmp	sl, r0
   126d8:	ldrne	r0, [pc, #436]	; 12894 <error@@Base+0x690>
   126dc:	bne	126ac <error@@Base+0x4a8>
   126e0:	add	r2, sp, #12
   126e4:	mov	r1, #4
   126e8:	add	r0, sp, #8
   126ec:	bl	10abc <utf8proc_iterate@plt>
   126f0:	cmp	r9, r0
   126f4:	beq	12700 <error@@Base+0x4fc>
   126f8:	bl	10b88 <utf8proc_errmsg@plt>
   126fc:	b	126ac <error@@Base+0x4a8>
   12700:	ldr	r3, [sp]
   12704:	cmp	r3, #0
   12708:	beq	1271c <error@@Base+0x518>
   1270c:	ldr	r3, [sp, #12]
   12710:	cmp	r8, r3
   12714:	moveq	fp, #1
   12718:	beq	12730 <error@@Base+0x52c>
   1271c:	mov	r1, fp
   12720:	ldr	r2, [sp, #12]
   12724:	mov	r0, r6
   12728:	bl	12528 <error@@Base+0x324>
   1272c:	mov	fp, #0
   12730:	mov	r0, r5
   12734:	bl	10bb8 <getc@plt>
   12738:	b	12624 <error@@Base+0x420>
   1273c:	cmp	r7, #0
   12740:	mov	sl, #32
   12744:	ldrne	r8, [r7, #4]
   12748:	ldreq	r8, [r6]
   1274c:	mov	r5, r8
   12750:	cmp	r5, #0
   12754:	bne	127dc <error@@Base+0x5d8>
   12758:	cmp	r8, #0
   1275c:	beq	12640 <error@@Base+0x43c>
   12760:	ldr	r2, [r8, #12]
   12764:	ldr	r9, [r8, #4]
   12768:	cmp	r2, #32
   1276c:	eor	r3, r5, #1
   12770:	bne	12830 <error@@Base+0x62c>
   12774:	cmp	r9, #0
   12778:	orreq	r3, r3, #1
   1277c:	cmp	r3, #0
   12780:	bne	12794 <error@@Base+0x590>
   12784:	ldr	r3, [r9, #12]
   12788:	cmp	r3, #10
   1278c:	cmpne	r3, #32
   12790:	bne	12844 <error@@Base+0x640>
   12794:	cmp	r9, #0
   12798:	moveq	r3, #0
   1279c:	andne	r3, r5, #1
   127a0:	cmp	r3, #0
   127a4:	beq	127c0 <error@@Base+0x5bc>
   127a8:	ldr	r3, [r9, #12]
   127ac:	cmp	r3, #32
   127b0:	ldrbeq	r3, [r9, #8]
   127b4:	ldrbeq	r2, [r8, #8]
   127b8:	orreq	r3, r3, r2
   127bc:	strbeq	r3, [r9, #8]
   127c0:	mov	r0, r6
   127c4:	mov	r1, r8
   127c8:	bl	10f78 <__assert_fail@plt+0x3b4>
   127cc:	mov	r0, r8
   127d0:	bl	10a44 <free@plt>
   127d4:	mov	r8, r9
   127d8:	b	12758 <error@@Base+0x554>
   127dc:	ldr	r9, [r5, #12]
   127e0:	mov	r0, r9
   127e4:	bl	10a50 <utf8proc_get_property@plt>
   127e8:	cmp	r9, #13
   127ec:	bhi	12820 <error@@Base+0x61c>
   127f0:	cmp	r9, #11
   127f4:	bcs	12828 <error@@Base+0x624>
   127f8:	cmp	r9, #9
   127fc:	beq	12828 <error@@Base+0x624>
   12800:	cmp	r9, #10
   12804:	beq	12818 <error@@Base+0x614>
   12808:	ldrsh	r3, [r0]
   1280c:	sub	r3, r3, #23
   12810:	cmp	r3, #2
   12814:	bls	12828 <error@@Base+0x624>
   12818:	ldr	r5, [r5, #4]
   1281c:	b	12750 <error@@Base+0x54c>
   12820:	cmp	r9, #160	; 0xa0
   12824:	bne	12808 <error@@Base+0x604>
   12828:	str	sl, [r5, #12]
   1282c:	b	12818 <error@@Base+0x614>
   12830:	cmp	r2, #10
   12834:	movne	r3, #0
   12838:	andeq	r3, r3, #1
   1283c:	cmp	r3, #0
   12840:	bne	12794 <error@@Base+0x590>
   12844:	subs	r5, r2, #10
   12848:	movne	r5, #1
   1284c:	b	127d4 <error@@Base+0x5d0>
   12850:	cmp	r7, #0
   12854:	ldrne	r4, [r7, #4]
   12858:	ldreq	r4, [r6]
   1285c:	cmp	r4, #0
   12860:	beq	1264c <error@@Base+0x448>
   12864:	ldr	r0, [r4, #12]
   12868:	bl	10a98 <utf8proc_tolower@plt>
   1286c:	str	r0, [r4, #12]
   12870:	ldr	r4, [r4, #4]
   12874:	b	1285c <error@@Base+0x658>
   12878:	andeq	r6, r1, r3, asr #6
   1287c:	andeq	r6, r1, sp, asr #6
   12880:	andeq	r6, r1, r3, ror #7
   12884:	andeq	r6, r1, sp, asr r3
   12888:	muleq	r1, r5, r3
   1288c:	andeq	r6, r2, r8, lsl #28
   12890:	andeq	r6, r1, sp, asr #7
   12894:	andeq	r6, r1, r5, ror #7
   12898:	push	{r4, lr}
   1289c:	bl	10a68 <utf8proc_encode_char@plt>
   128a0:	cmp	r0, #0
   128a4:	bgt	128b0 <error@@Base+0x6ac>
   128a8:	ldr	r0, [pc, #8]	; 128b8 <error@@Base+0x6b4>
   128ac:	bl	12204 <error@@Base>
   128b0:	sxtb	r0, r0
   128b4:	pop	{r4, pc}
   128b8:	strdeq	r6, [r1], -sp
   128bc:	push	{r4, r5, r6, r7, r8, lr}
   128c0:	uxtb	r4, r0
   128c4:	cmp	r4, #0
   128c8:	mov	r7, r1
   128cc:	mov	r6, r2
   128d0:	uxtb	r8, r3
   128d4:	beq	128e8 <error@@Base+0x6e4>
   128d8:	mov	r1, r2
   128dc:	mov	r0, #94	; 0x5e
   128e0:	bl	12898 <error@@Base+0x694>
   128e4:	sxth	r4, r0
   128e8:	cmp	r7, #10
   128ec:	add	r5, r6, r4
   128f0:	bne	12910 <error@@Base+0x70c>
   128f4:	ldr	r2, [pc, #168]	; 129a4 <error@@Base+0x7a0>
   128f8:	cmp	r8, #0
   128fc:	ldr	r1, [pc, #164]	; 129a8 <error@@Base+0x7a4>
   12900:	mov	r0, r5
   12904:	moveq	r1, r2
   12908:	pop	{r4, r5, r6, r7, r8, lr}
   1290c:	b	10b70 <sprintf@plt>
   12910:	mov	r0, r7
   12914:	bl	10a50 <utf8proc_get_property@plt>
   12918:	cmp	r7, #32
   1291c:	beq	1293c <error@@Base+0x738>
   12920:	ldrh	r3, [r0]
   12924:	cmp	r3, #29
   12928:	bhi	12984 <error@@Base+0x780>
   1292c:	ldr	r2, [pc, #120]	; 129ac <error@@Base+0x7a8>
   12930:	mov	r1, #1
   12934:	ands	r3, r2, r1, lsl r3
   12938:	beq	12984 <error@@Base+0x780>
   1293c:	mov	r0, r7
   12940:	bl	10b1c <utf8proc_category@plt>
   12944:	sub	r0, r0, #6
   12948:	cmp	r0, #2
   1294c:	bhi	12964 <error@@Base+0x760>
   12950:	mov	r1, r5
   12954:	ldr	r0, [pc, #84]	; 129b0 <error@@Base+0x7ac>
   12958:	bl	12898 <error@@Base+0x694>
   1295c:	add	r4, r0, r4
   12960:	sxth	r4, r4
   12964:	add	r1, r6, r4
   12968:	mov	r0, r7
   1296c:	bl	12898 <error@@Base+0x694>
   12970:	mov	r3, #0
   12974:	add	r0, r0, r4
   12978:	sxth	r0, r0
   1297c:	strb	r3, [r6, r0]
   12980:	pop	{r4, r5, r6, r7, r8, pc}
   12984:	cmp	r7, #255	; 0xff
   12988:	movhi	r2, r7
   1298c:	ldrhi	r1, [pc, #32]	; 129b4 <error@@Base+0x7b0>
   12990:	ldrls	r1, [pc, #32]	; 129b8 <error@@Base+0x7b4>
   12994:	movls	r2, r7
   12998:	mov	r0, r5
   1299c:	pop	{r4, r5, r6, r7, r8, lr}
   129a0:	b	10b70 <sprintf@plt>
   129a4:	strdeq	r6, [r1], -r1
   129a8:	andeq	r6, r1, r4, lsl r4
   129ac:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   129b0:	andeq	r2, r0, ip, asr #11
   129b4:	andeq	r6, r1, r0, lsr #8
   129b8:	andeq	r6, r1, r9, lsl r4
   129bc:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   129c0:	mov	r6, r0
   129c4:	mov	r0, r1
   129c8:	ldr	r1, [pc, #132]	; 12a54 <error@@Base+0x850>
   129cc:	mov	r5, r2
   129d0:	bl	122cc <error@@Base+0xc8>
   129d4:	cmp	r5, #0
   129d8:	mov	r4, r0
   129dc:	beq	12a0c <error@@Base+0x808>
   129e0:	mov	r1, r0
   129e4:	ldr	r0, [pc, #108]	; 12a58 <error@@Base+0x854>
   129e8:	bl	10b94 <fputs@plt>
   129ec:	mov	r1, r4
   129f0:	ldr	r0, [pc, #100]	; 12a5c <error@@Base+0x858>
   129f4:	bl	10b94 <fputs@plt>
   129f8:	mov	r0, r4
   129fc:	blx	r5
   12a00:	mov	r1, r4
   12a04:	ldr	r0, [pc, #80]	; 12a5c <error@@Base+0x858>
   12a08:	bl	10b94 <fputs@plt>
   12a0c:	ldr	r5, [r6]
   12a10:	mov	r6, #0
   12a14:	cmp	r5, #0
   12a18:	bne	12a2c <error@@Base+0x828>
   12a1c:	mov	r0, r4
   12a20:	bl	120fc <__assert_fail@plt+0x1538>
   12a24:	add	sp, sp, #16
   12a28:	pop	{r4, r5, r6, pc}
   12a2c:	ldr	r1, [r5, #12]
   12a30:	ldrb	r0, [r5, #8]
   12a34:	mov	r3, r6
   12a38:	add	r2, sp, #4
   12a3c:	bl	128bc <error@@Base+0x6b8>
   12a40:	mov	r1, r4
   12a44:	add	r0, sp, #4
   12a48:	bl	10b94 <fputs@plt>
   12a4c:	ldr	r5, [r5, #4]
   12a50:	b	12a14 <error@@Base+0x810>
   12a54:	andeq	r2, r1, ip, lsr #29
   12a58:	andeq	r6, r1, sp, asr r3
   12a5c:	muleq	r1, r5, r3
   12a60:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12a64:	mov	r4, r1
   12a68:	mov	r1, #0
   12a6c:	add	r6, sp, #8
   12a70:	mov	r7, r0
   12a74:	mvn	r8, #0
   12a78:	mov	r5, r1
   12a7c:	str	r1, [r6, #-4]!
   12a80:	ldrb	r3, [r4]
   12a84:	cmp	r3, #0
   12a88:	bne	12a98 <error@@Base+0x894>
   12a8c:	mov	r0, #1
   12a90:	add	sp, sp, #12
   12a94:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12a98:	mov	r2, r6
   12a9c:	mov	r1, r8
   12aa0:	mov	r0, r4
   12aa4:	bl	10abc <utf8proc_iterate@plt>
   12aa8:	subs	r9, r0, #0
   12aac:	ble	12ac8 <error@@Base+0x8c4>
   12ab0:	ldr	r2, [sp, #4]
   12ab4:	mov	r1, r5
   12ab8:	mov	r0, r7
   12abc:	bl	12528 <error@@Base+0x324>
   12ac0:	add	r4, r4, r9
   12ac4:	b	12a80 <error@@Base+0x87c>
   12ac8:	mov	r0, #0
   12acc:	b	12a90 <error@@Base+0x88c>
   12ad0:	cmp	r1, #0
   12ad4:	beq	12ce0 <error@@Base+0xadc>
   12ad8:	eor	ip, r0, r1
   12adc:	rsbmi	r1, r1, #0
   12ae0:	subs	r2, r1, #1
   12ae4:	beq	12cac <error@@Base+0xaa8>
   12ae8:	movs	r3, r0
   12aec:	rsbmi	r3, r0, #0
   12af0:	cmp	r3, r1
   12af4:	bls	12cb8 <error@@Base+0xab4>
   12af8:	tst	r1, r2
   12afc:	beq	12cc8 <error@@Base+0xac4>
   12b00:	clz	r2, r3
   12b04:	clz	r0, r1
   12b08:	sub	r2, r0, r2
   12b0c:	rsbs	r2, r2, #31
   12b10:	addne	r2, r2, r2, lsl #1
   12b14:	mov	r0, #0
   12b18:	addne	pc, pc, r2, lsl #2
   12b1c:	nop			; (mov r0, r0)
   12b20:	cmp	r3, r1, lsl #31
   12b24:	adc	r0, r0, r0
   12b28:	subcs	r3, r3, r1, lsl #31
   12b2c:	cmp	r3, r1, lsl #30
   12b30:	adc	r0, r0, r0
   12b34:	subcs	r3, r3, r1, lsl #30
   12b38:	cmp	r3, r1, lsl #29
   12b3c:	adc	r0, r0, r0
   12b40:	subcs	r3, r3, r1, lsl #29
   12b44:	cmp	r3, r1, lsl #28
   12b48:	adc	r0, r0, r0
   12b4c:	subcs	r3, r3, r1, lsl #28
   12b50:	cmp	r3, r1, lsl #27
   12b54:	adc	r0, r0, r0
   12b58:	subcs	r3, r3, r1, lsl #27
   12b5c:	cmp	r3, r1, lsl #26
   12b60:	adc	r0, r0, r0
   12b64:	subcs	r3, r3, r1, lsl #26
   12b68:	cmp	r3, r1, lsl #25
   12b6c:	adc	r0, r0, r0
   12b70:	subcs	r3, r3, r1, lsl #25
   12b74:	cmp	r3, r1, lsl #24
   12b78:	adc	r0, r0, r0
   12b7c:	subcs	r3, r3, r1, lsl #24
   12b80:	cmp	r3, r1, lsl #23
   12b84:	adc	r0, r0, r0
   12b88:	subcs	r3, r3, r1, lsl #23
   12b8c:	cmp	r3, r1, lsl #22
   12b90:	adc	r0, r0, r0
   12b94:	subcs	r3, r3, r1, lsl #22
   12b98:	cmp	r3, r1, lsl #21
   12b9c:	adc	r0, r0, r0
   12ba0:	subcs	r3, r3, r1, lsl #21
   12ba4:	cmp	r3, r1, lsl #20
   12ba8:	adc	r0, r0, r0
   12bac:	subcs	r3, r3, r1, lsl #20
   12bb0:	cmp	r3, r1, lsl #19
   12bb4:	adc	r0, r0, r0
   12bb8:	subcs	r3, r3, r1, lsl #19
   12bbc:	cmp	r3, r1, lsl #18
   12bc0:	adc	r0, r0, r0
   12bc4:	subcs	r3, r3, r1, lsl #18
   12bc8:	cmp	r3, r1, lsl #17
   12bcc:	adc	r0, r0, r0
   12bd0:	subcs	r3, r3, r1, lsl #17
   12bd4:	cmp	r3, r1, lsl #16
   12bd8:	adc	r0, r0, r0
   12bdc:	subcs	r3, r3, r1, lsl #16
   12be0:	cmp	r3, r1, lsl #15
   12be4:	adc	r0, r0, r0
   12be8:	subcs	r3, r3, r1, lsl #15
   12bec:	cmp	r3, r1, lsl #14
   12bf0:	adc	r0, r0, r0
   12bf4:	subcs	r3, r3, r1, lsl #14
   12bf8:	cmp	r3, r1, lsl #13
   12bfc:	adc	r0, r0, r0
   12c00:	subcs	r3, r3, r1, lsl #13
   12c04:	cmp	r3, r1, lsl #12
   12c08:	adc	r0, r0, r0
   12c0c:	subcs	r3, r3, r1, lsl #12
   12c10:	cmp	r3, r1, lsl #11
   12c14:	adc	r0, r0, r0
   12c18:	subcs	r3, r3, r1, lsl #11
   12c1c:	cmp	r3, r1, lsl #10
   12c20:	adc	r0, r0, r0
   12c24:	subcs	r3, r3, r1, lsl #10
   12c28:	cmp	r3, r1, lsl #9
   12c2c:	adc	r0, r0, r0
   12c30:	subcs	r3, r3, r1, lsl #9
   12c34:	cmp	r3, r1, lsl #8
   12c38:	adc	r0, r0, r0
   12c3c:	subcs	r3, r3, r1, lsl #8
   12c40:	cmp	r3, r1, lsl #7
   12c44:	adc	r0, r0, r0
   12c48:	subcs	r3, r3, r1, lsl #7
   12c4c:	cmp	r3, r1, lsl #6
   12c50:	adc	r0, r0, r0
   12c54:	subcs	r3, r3, r1, lsl #6
   12c58:	cmp	r3, r1, lsl #5
   12c5c:	adc	r0, r0, r0
   12c60:	subcs	r3, r3, r1, lsl #5
   12c64:	cmp	r3, r1, lsl #4
   12c68:	adc	r0, r0, r0
   12c6c:	subcs	r3, r3, r1, lsl #4
   12c70:	cmp	r3, r1, lsl #3
   12c74:	adc	r0, r0, r0
   12c78:	subcs	r3, r3, r1, lsl #3
   12c7c:	cmp	r3, r1, lsl #2
   12c80:	adc	r0, r0, r0
   12c84:	subcs	r3, r3, r1, lsl #2
   12c88:	cmp	r3, r1, lsl #1
   12c8c:	adc	r0, r0, r0
   12c90:	subcs	r3, r3, r1, lsl #1
   12c94:	cmp	r3, r1
   12c98:	adc	r0, r0, r0
   12c9c:	subcs	r3, r3, r1
   12ca0:	cmp	ip, #0
   12ca4:	rsbmi	r0, r0, #0
   12ca8:	bx	lr
   12cac:	teq	ip, r0
   12cb0:	rsbmi	r0, r0, #0
   12cb4:	bx	lr
   12cb8:	movcc	r0, #0
   12cbc:	asreq	r0, ip, #31
   12cc0:	orreq	r0, r0, #1
   12cc4:	bx	lr
   12cc8:	clz	r2, r1
   12ccc:	rsb	r2, r2, #31
   12cd0:	cmp	ip, #0
   12cd4:	lsr	r0, r3, r2
   12cd8:	rsbmi	r0, r0, #0
   12cdc:	bx	lr
   12ce0:	cmp	r0, #0
   12ce4:	mvngt	r0, #-2147483648	; 0x80000000
   12ce8:	movlt	r0, #-2147483648	; 0x80000000
   12cec:	b	12d10 <error@@Base+0xb0c>
   12cf0:	cmp	r1, #0
   12cf4:	beq	12ce0 <error@@Base+0xadc>
   12cf8:	push	{r0, r1, lr}
   12cfc:	bl	12ad8 <error@@Base+0x8d4>
   12d00:	pop	{r1, r2, lr}
   12d04:	mul	r3, r2, r0
   12d08:	sub	r1, r1, r3
   12d0c:	bx	lr
   12d10:	push	{r1, lr}
   12d14:	mov	r0, #8
   12d18:	bl	10a14 <raise@plt>
   12d1c:	pop	{r1, pc}
   12d20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d24:	mov	r7, r0
   12d28:	ldr	r6, [pc, #72]	; 12d78 <error@@Base+0xb74>
   12d2c:	ldr	r5, [pc, #72]	; 12d7c <error@@Base+0xb78>
   12d30:	add	r6, pc, r6
   12d34:	add	r5, pc, r5
   12d38:	sub	r6, r6, r5
   12d3c:	mov	r8, r1
   12d40:	mov	r9, r2
   12d44:	bl	109e8 <calloc@plt-0x20>
   12d48:	asrs	r6, r6, #2
   12d4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d50:	mov	r4, #0
   12d54:	add	r4, r4, #1
   12d58:	ldr	r3, [r5], #4
   12d5c:	mov	r2, r9
   12d60:	mov	r1, r8
   12d64:	mov	r0, r7
   12d68:	blx	r3
   12d6c:	cmp	r6, r4
   12d70:	bne	12d54 <error@@Base+0xb50>
   12d74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d78:	andeq	r4, r1, r8, asr #1
   12d7c:	andeq	r4, r1, r0, asr #1
   12d80:	bx	lr
   12d84:	mov	r2, r1
   12d88:	mov	r1, r0
   12d8c:	mov	r0, #3
   12d90:	b	10aa4 <__xstat@plt>

Disassembly of section .fini:

00012d94 <.fini>:
   12d94:	push	{r3, lr}
   12d98:	pop	{r3, pc}
