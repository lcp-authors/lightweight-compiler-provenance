
../repos/Snaipe-Mimick-1dc4659/sample/strdup/libstrdup.so:     file format elf32-littlearm


Disassembly of section .init:

00000314 <.init>:
 314:	push	{r3, lr}
 318:	bl	370 <strlen@plt+0xc>
 31c:	pop	{r3, pc}

Disassembly of section .plt:

00000320 <__cxa_finalize@plt-0x14>:
 320:	push	{lr}		; (str lr, [sp, #-4]!)
 324:	ldr	lr, [pc, #4]	; 330 <__cxa_finalize@plt-0x4>
 328:	add	lr, pc, lr
 32c:	ldr	pc, [lr, #8]!
 330:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>

00000334 <__cxa_finalize@plt>:
 334:	add	ip, pc, #0, 12
 338:	add	ip, ip, #16, 20	; 0x10000
 33c:	ldr	pc, [ip, #3280]!	; 0xcd0

00000340 <memcpy@plt>:
 340:	add	ip, pc, #0, 12
 344:	add	ip, ip, #16, 20	; 0x10000
 348:	ldr	pc, [ip, #3272]!	; 0xcc8

0000034c <malloc@plt>:
 34c:	add	ip, pc, #0, 12
 350:	add	ip, ip, #16, 20	; 0x10000
 354:	ldr	pc, [ip, #3264]!	; 0xcc0

00000358 <__gmon_start__@plt>:
 358:	add	ip, pc, #0, 12
 35c:	add	ip, ip, #16, 20	; 0x10000
 360:	ldr	pc, [ip, #3256]!	; 0xcb8

00000364 <strlen@plt>:
 364:	add	ip, pc, #0, 12
 368:	add	ip, ip, #16, 20	; 0x10000
 36c:	ldr	pc, [ip, #3248]!	; 0xcb0

Disassembly of section .text:

00000370 <my_strdup@@Base-0x124>:
 370:	ldr	r3, [pc, #20]	; 38c <strlen@plt+0x28>
 374:	ldr	r2, [pc, #20]	; 390 <strlen@plt+0x2c>
 378:	add	r3, pc, r3
 37c:	ldr	r2, [r3, r2]
 380:	cmp	r2, #0
 384:	bxeq	lr
 388:	b	358 <__gmon_start__@plt>
 38c:	andeq	r0, r1, r0, lsl #25
 390:	andeq	r0, r0, r8, lsr #32
 394:	ldr	r0, [pc, #44]	; 3c8 <strlen@plt+0x64>
 398:	ldr	r3, [pc, #44]	; 3cc <strlen@plt+0x68>
 39c:	add	r0, pc, r0
 3a0:	add	r3, pc, r3
 3a4:	cmp	r3, r0
 3a8:	ldr	r3, [pc, #32]	; 3d0 <strlen@plt+0x6c>
 3ac:	add	r3, pc, r3
 3b0:	bxeq	lr
 3b4:	ldr	r2, [pc, #24]	; 3d4 <strlen@plt+0x70>
 3b8:	ldr	r3, [r3, r2]
 3bc:	cmp	r3, #0
 3c0:	bxeq	lr
 3c4:	bx	r3
 3c8:	muleq	r1, r0, ip
 3cc:	andeq	r0, r1, ip, lsl #25
 3d0:	andeq	r0, r1, ip, asr #24
 3d4:	andeq	r0, r0, r4, lsr #32
 3d8:	ldr	r0, [pc, #56]	; 418 <strlen@plt+0xb4>
 3dc:	ldr	r3, [pc, #56]	; 41c <strlen@plt+0xb8>
 3e0:	add	r0, pc, r0
 3e4:	add	r3, pc, r3
 3e8:	sub	r1, r3, r0
 3ec:	ldr	r3, [pc, #44]	; 420 <strlen@plt+0xbc>
 3f0:	asr	r1, r1, #2
 3f4:	add	r3, pc, r3
 3f8:	add	r1, r1, r1, lsr #31
 3fc:	asrs	r1, r1, #1
 400:	bxeq	lr
 404:	ldr	r2, [pc, #24]	; 424 <strlen@plt+0xc0>
 408:	ldr	r3, [r3, r2]
 40c:	cmp	r3, #0
 410:	bxeq	lr
 414:	bx	r3
 418:	andeq	r0, r1, ip, asr #24
 41c:	andeq	r0, r1, r8, asr #24
 420:	andeq	r0, r1, r4, lsl #24
 424:	andeq	r0, r0, ip, lsr #32
 428:	ldr	r3, [pc, #76]	; 47c <strlen@plt+0x118>
 42c:	ldr	r2, [pc, #76]	; 480 <strlen@plt+0x11c>
 430:	add	r3, pc, r3
 434:	add	r2, pc, r2
 438:	ldrb	r3, [r3]
 43c:	cmp	r3, #0
 440:	bxne	lr
 444:	ldr	r3, [pc, #56]	; 484 <strlen@plt+0x120>
 448:	push	{r4, lr}
 44c:	ldr	r3, [r2, r3]
 450:	cmp	r3, #0
 454:	beq	464 <strlen@plt+0x100>
 458:	ldr	r3, [pc, #40]	; 488 <strlen@plt+0x124>
 45c:	ldr	r0, [pc, r3]
 460:	bl	334 <__cxa_finalize@plt>
 464:	bl	394 <strlen@plt+0x30>
 468:	ldr	r3, [pc, #28]	; 48c <strlen@plt+0x128>
 46c:	mov	r2, #1
 470:	add	r3, pc, r3
 474:	strb	r2, [r3]
 478:	pop	{r4, pc}
 47c:	strdeq	r0, [r1], -ip
 480:	andeq	r0, r1, r4, asr #23
 484:	andeq	r0, r0, r0, lsr #32
 488:	andeq	r0, r1, ip, asr #23
 48c:			; <UNDEFINED> instruction: 0x00010bbc
 490:	b	3d8 <strlen@plt+0x74>

00000494 <my_strdup@@Base>:
 494:	strd	r4, [sp, #-16]!
 498:	str	r6, [sp, #8]
 49c:	str	lr, [sp, #12]
 4a0:	mov	r6, r0
 4a4:	bl	364 <strlen@plt>
 4a8:	add	r5, r0, #1
 4ac:	mov	r0, r5
 4b0:	bl	34c <malloc@plt>
 4b4:	subs	r4, r0, #0
 4b8:	beq	4cc <my_strdup@@Base+0x38>
 4bc:	mov	r2, r5
 4c0:	mov	r1, r6
 4c4:	mov	r0, r4
 4c8:	bl	340 <memcpy@plt>
 4cc:	mov	r0, r4
 4d0:	ldrd	r4, [sp]
 4d4:	ldr	r6, [sp, #8]
 4d8:	add	sp, sp, #12
 4dc:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000004e0 <.fini>:
 4e0:	push	{r3, lr}
 4e4:	pop	{r3, pc}
