
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010d9c <.init>:
   10d9c:	push	{r3, lr}
   10da0:	bl	11050 <__assert_fail@plt+0x48>
   10da4:	pop	{r3, pc}

Disassembly of section .plt:

00010da8 <calloc@plt-0x14>:
   10da8:	push	{lr}		; (str lr, [sp, #-4]!)
   10dac:	ldr	lr, [pc, #4]	; 10db8 <calloc@plt-0x4>
   10db0:	add	lr, pc, lr
   10db4:	ldr	pc, [lr, #8]!
   10db8:	andeq	r6, r1, r8, asr #4

00010dbc <calloc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #584]!	; 0x248

00010dc8 <fputs_unlocked@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #576]!	; 0x240

00010dd4 <raise@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #568]!	; 0x238

00010de0 <strcmp@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #560]!	; 0x230

00010dec <fflush@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #552]!	; 0x228

00010df8 <free@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #544]!	; 0x220

00010e04 <_exit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #536]!	; 0x218

00010e10 <memcpy@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #528]!	; 0x210

00010e1c <__strtoull_internal@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #520]!	; 0x208

00010e28 <mbsinit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #512]!	; 0x200

00010e34 <__sched_cpucount@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #504]!	; 0x1f8

00010e40 <dcgettext@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #496]!	; 0x1f0

00010e4c <sysconf@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #488]!	; 0x1e8

00010e58 <realloc@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #480]!	; 0x1e0

00010e64 <textdomain@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #472]!	; 0x1d8

00010e70 <iswprint@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #464]!	; 0x1d0

00010e7c <fwrite@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #456]!	; 0x1c8

00010e88 <lseek64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #448]!	; 0x1c0

00010e94 <__ctype_get_mb_cur_max@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #440]!	; 0x1b8

00010ea0 <__fpending@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #432]!	; 0x1b0

00010eac <mbrtowc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #424]!	; 0x1a8

00010eb8 <error@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #416]!	; 0x1a0

00010ec4 <getenv@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #408]!	; 0x198

00010ed0 <malloc@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #400]!	; 0x190

00010edc <__libc_start_main@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #392]!	; 0x188

00010ee8 <__freading@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #384]!	; 0x180

00010ef4 <__gmon_start__@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #376]!	; 0x178

00010f00 <getopt_long@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #368]!	; 0x170

00010f0c <__ctype_b_loc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #360]!	; 0x168

00010f18 <exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #352]!	; 0x160

00010f24 <bcmp@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #344]!	; 0x158

00010f30 <strtoul@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #336]!	; 0x150

00010f3c <strlen@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #328]!	; 0x148

00010f48 <strchr@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #320]!	; 0x140

00010f54 <__errno_location@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #312]!	; 0x138

00010f60 <__cxa_atexit@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #304]!	; 0x130

00010f6c <memset@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #296]!	; 0x128

00010f78 <__printf_chk@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #288]!	; 0x120

00010f84 <fileno@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #280]!	; 0x118

00010f90 <__fprintf_chk@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #272]!	; 0x110

00010f9c <fclose@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #264]!	; 0x108

00010fa8 <fseeko64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #256]!	; 0x100

00010fb4 <setlocale@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #248]!	; 0xf8

00010fc0 <strrchr@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #240]!	; 0xf0

00010fcc <nl_langinfo@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #232]!	; 0xe8

00010fd8 <sched_getaffinity@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #224]!	; 0xe0

00010fe4 <bindtextdomain@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #216]!	; 0xd8

00010ff0 <strncmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #208]!	; 0xd0

00010ffc <abort@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #200]!	; 0xc8

00011008 <__assert_fail@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #192]!	; 0xc0

Disassembly of section .text:

00011014 <.text>:
   11014:	mov	fp, #0
   11018:	mov	lr, #0
   1101c:	pop	{r1}		; (ldr r1, [sp], #4)
   11020:	mov	r2, sp
   11024:	push	{r2}		; (str r2, [sp, #-4]!)
   11028:	push	{r0}		; (str r0, [sp, #-4]!)
   1102c:	ldr	ip, [pc, #16]	; 11044 <__assert_fail@plt+0x3c>
   11030:	push	{ip}		; (str ip, [sp, #-4]!)
   11034:	ldr	r0, [pc, #12]	; 11048 <__assert_fail@plt+0x40>
   11038:	ldr	r3, [pc, #12]	; 1104c <__assert_fail@plt+0x44>
   1103c:	bl	10edc <__libc_start_main@plt>
   11040:	bl	10ffc <abort@plt>
   11044:	andeq	r5, r1, r8, ror #17
   11048:	andeq	r1, r1, r4, ror #6
   1104c:	andeq	r5, r1, r8, lsl #17
   11050:	ldr	r3, [pc, #20]	; 1106c <__assert_fail@plt+0x64>
   11054:	ldr	r2, [pc, #20]	; 11070 <__assert_fail@plt+0x68>
   11058:	add	r3, pc, r3
   1105c:	ldr	r2, [r3, r2]
   11060:	cmp	r2, #0
   11064:	bxeq	lr
   11068:	b	10ef4 <__gmon_start__@plt>
   1106c:	andeq	r5, r1, r0, lsr #31
   11070:	ldrdeq	r0, [r0], -r4
   11074:	ldr	r0, [pc, #24]	; 11094 <__assert_fail@plt+0x8c>
   11078:	ldr	r3, [pc, #24]	; 11098 <__assert_fail@plt+0x90>
   1107c:	cmp	r3, r0
   11080:	bxeq	lr
   11084:	ldr	r3, [pc, #16]	; 1109c <__assert_fail@plt+0x94>
   11088:	cmp	r3, #0
   1108c:	bxeq	lr
   11090:	bx	r3
   11094:	andeq	r7, r2, r8, lsr #2
   11098:	andeq	r7, r2, r8, lsr #2
   1109c:	andeq	r0, r0, r0
   110a0:	ldr	r0, [pc, #36]	; 110cc <__assert_fail@plt+0xc4>
   110a4:	ldr	r1, [pc, #36]	; 110d0 <__assert_fail@plt+0xc8>
   110a8:	sub	r1, r1, r0
   110ac:	asr	r1, r1, #2
   110b0:	add	r1, r1, r1, lsr #31
   110b4:	asrs	r1, r1, #1
   110b8:	bxeq	lr
   110bc:	ldr	r3, [pc, #16]	; 110d4 <__assert_fail@plt+0xcc>
   110c0:	cmp	r3, #0
   110c4:	bxeq	lr
   110c8:	bx	r3
   110cc:	andeq	r7, r2, r8, lsr #2
   110d0:	andeq	r7, r2, r8, lsr #2
   110d4:	andeq	r0, r0, r0
   110d8:	push	{r4, lr}
   110dc:	ldr	r4, [pc, #24]	; 110fc <__assert_fail@plt+0xf4>
   110e0:	ldrb	r3, [r4]
   110e4:	cmp	r3, #0
   110e8:	popne	{r4, pc}
   110ec:	bl	11074 <__assert_fail@plt+0x6c>
   110f0:	mov	r3, #1
   110f4:	strb	r3, [r4]
   110f8:	pop	{r4, pc}
   110fc:	andeq	r7, r2, r4, asr #2
   11100:	b	110a0 <__assert_fail@plt+0x98>
   11104:	push	{fp, lr}
   11108:	mov	fp, sp
   1110c:	sub	sp, sp, #56	; 0x38
   11110:	mov	r4, r0
   11114:	cmp	r0, #0
   11118:	bne	11320 <__assert_fail@plt+0x318>
   1111c:	movw	r1, #22843	; 0x593b
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10e40 <dcgettext@plt>
   11130:	mov	r1, r0
   11134:	movw	r0, #29008	; 0x7150
   11138:	movt	r0, #2
   1113c:	ldr	r2, [r0]
   11140:	mov	r0, #1
   11144:	bl	10f78 <__printf_chk@plt>
   11148:	movw	r1, #22866	; 0x5952
   1114c:	mov	r0, #0
   11150:	mov	r2, #5
   11154:	movt	r1, #1
   11158:	bl	10e40 <dcgettext@plt>
   1115c:	movw	r7, #28988	; 0x713c
   11160:	movt	r7, #2
   11164:	ldr	r1, [r7]
   11168:	bl	10dc8 <fputs_unlocked@plt>
   1116c:	movw	r1, #22994	; 0x59d2
   11170:	mov	r0, #0
   11174:	mov	r2, #5
   11178:	movt	r1, #1
   1117c:	bl	10e40 <dcgettext@plt>
   11180:	ldr	r1, [r7]
   11184:	bl	10dc8 <fputs_unlocked@plt>
   11188:	movw	r1, #23111	; 0x5a47
   1118c:	mov	r0, #0
   11190:	mov	r2, #5
   11194:	movt	r1, #1
   11198:	bl	10e40 <dcgettext@plt>
   1119c:	ldr	r1, [r7]
   111a0:	bl	10dc8 <fputs_unlocked@plt>
   111a4:	movw	r1, #23156	; 0x5a74
   111a8:	mov	r0, #0
   111ac:	mov	r2, #5
   111b0:	movt	r1, #1
   111b4:	bl	10e40 <dcgettext@plt>
   111b8:	ldr	r1, [r7]
   111bc:	bl	10dc8 <fputs_unlocked@plt>
   111c0:	movw	r0, #23728	; 0x5cb0
   111c4:	mov	r2, #48	; 0x30
   111c8:	mov	r6, sp
   111cc:	movw	r5, #23210	; 0x5aaa
   111d0:	movt	r0, #1
   111d4:	movt	r5, #1
   111d8:	add	r1, r0, #32
   111dc:	add	r3, r0, #16
   111e0:	vld1.64	{d18-d19}, [r0], r2
   111e4:	vld1.64	{d16-d17}, [r1]
   111e8:	vld1.64	{d20-d21}, [r3]
   111ec:	vldr	d22, [r0]
   111f0:	add	r1, r6, #32
   111f4:	add	r0, r6, #16
   111f8:	vst1.64	{d16-d17}, [r1]
   111fc:	movw	r1, #23309	; 0x5b0d
   11200:	vst1.64	{d20-d21}, [r0]
   11204:	mov	r0, r6
   11208:	movt	r1, #1
   1120c:	vst1.64	{d18-d19}, [r0], r2
   11210:	vstr	d22, [r0]
   11214:	mov	r0, r5
   11218:	bl	10de0 <strcmp@plt>
   1121c:	cmp	r0, #0
   11220:	ldrne	r1, [r6, #8]!
   11224:	cmpne	r1, #0
   11228:	bne	11214 <__assert_fail@plt+0x20c>
   1122c:	movw	r1, #23404	; 0x5b6c
   11230:	ldr	r6, [r6, #4]
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10e40 <dcgettext@plt>
   11244:	movw	r2, #23240	; 0x5ac8
   11248:	movw	r3, #23427	; 0x5b83
   1124c:	mov	r1, r0
   11250:	mov	r0, #1
   11254:	movt	r2, #1
   11258:	movt	r3, #1
   1125c:	bl	10f78 <__printf_chk@plt>
   11260:	cmp	r6, #0
   11264:	mov	r0, #5
   11268:	mov	r1, #0
   1126c:	moveq	r6, r5
   11270:	bl	10fb4 <setlocale@plt>
   11274:	cmp	r0, #0
   11278:	beq	112b0 <__assert_fail@plt+0x2a8>
   1127c:	movw	r1, #23467	; 0x5bab
   11280:	mov	r2, #3
   11284:	movt	r1, #1
   11288:	bl	10ff0 <strncmp@plt>
   1128c:	cmp	r0, #0
   11290:	beq	112b0 <__assert_fail@plt+0x2a8>
   11294:	movw	r1, #23471	; 0x5baf
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10e40 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10dc8 <fputs_unlocked@plt>
   112b0:	movw	r1, #23542	; 0x5bf6
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10e40 <dcgettext@plt>
   112c4:	movw	r2, #23427	; 0x5b83
   112c8:	mov	r1, r0
   112cc:	mov	r0, #1
   112d0:	mov	r3, r5
   112d4:	movt	r2, #1
   112d8:	bl	10f78 <__printf_chk@plt>
   112dc:	movw	r1, #23569	; 0x5c11
   112e0:	mov	r0, #0
   112e4:	mov	r2, #5
   112e8:	movt	r1, #1
   112ec:	bl	10e40 <dcgettext@plt>
   112f0:	mov	r1, r0
   112f4:	movw	r0, #23337	; 0x5b29
   112f8:	movw	r3, #22993	; 0x59d1
   112fc:	cmp	r6, r5
   11300:	mov	r2, r6
   11304:	movt	r0, #1
   11308:	movt	r3, #1
   1130c:	moveq	r3, r0
   11310:	mov	r0, #1
   11314:	bl	10f78 <__printf_chk@plt>
   11318:	mov	r0, r4
   1131c:	bl	10f18 <exit@plt>
   11320:	movw	r0, #28984	; 0x7138
   11324:	movw	r1, #22804	; 0x5914
   11328:	mov	r2, #5
   1132c:	movt	r0, #2
   11330:	movt	r1, #1
   11334:	ldr	r5, [r0]
   11338:	mov	r0, #0
   1133c:	bl	10e40 <dcgettext@plt>
   11340:	mov	r2, r0
   11344:	movw	r0, #29008	; 0x7150
   11348:	mov	r1, #1
   1134c:	movt	r0, #2
   11350:	ldr	r3, [r0]
   11354:	mov	r0, r5
   11358:	bl	10f90 <__fprintf_chk@plt>
   1135c:	mov	r0, r4
   11360:	bl	10f18 <exit@plt>
   11364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11368:	add	fp, sp, #28
   1136c:	sub	sp, sp, #20
   11370:	mov	r5, r0
   11374:	ldr	r0, [r1]
   11378:	mov	r4, r1
   1137c:	bl	11840 <__assert_fail@plt+0x838>
   11380:	movw	sl, #22993	; 0x59d1
   11384:	mov	r0, #6
   11388:	movt	sl, #1
   1138c:	mov	r1, sl
   11390:	bl	10fb4 <setlocale@plt>
   11394:	movw	r6, #23244	; 0x5acc
   11398:	movw	r1, #23216	; 0x5ab0
   1139c:	movt	r6, #1
   113a0:	movt	r1, #1
   113a4:	mov	r0, r6
   113a8:	bl	10fe4 <bindtextdomain@plt>
   113ac:	mov	r0, r6
   113b0:	bl	10e64 <textdomain@plt>
   113b4:	movw	r0, #5484	; 0x156c
   113b8:	movt	r0, #1
   113bc:	bl	158ec <__assert_fail@plt+0x48e4>
   113c0:	movw	r8, #23648	; 0x5c60
   113c4:	mov	r7, #2
   113c8:	mov	r6, #0
   113cc:	movt	r8, #1
   113d0:	mov	r9, r7
   113d4:	mov	r7, #0
   113d8:	mov	r0, r5
   113dc:	mov	r1, r4
   113e0:	mov	r2, sl
   113e4:	mov	r3, r8
   113e8:	str	r7, [sp]
   113ec:	bl	10f00 <getopt_long@plt>
   113f0:	cmp	r0, #255	; 0xff
   113f4:	ble	11460 <__assert_fail@plt+0x458>
   113f8:	cmp	r0, #256	; 0x100
   113fc:	beq	113d0 <__assert_fail@plt+0x3c8>
   11400:	movw	r1, #257	; 0x101
   11404:	cmp	r0, r1
   11408:	bne	11544 <__assert_fail@plt+0x53c>
   1140c:	movw	r0, #28992	; 0x7140
   11410:	movw	r1, #23272	; 0x5ae8
   11414:	mov	r2, #5
   11418:	movt	r0, #2
   1141c:	movt	r1, #1
   11420:	ldr	r6, [r0]
   11424:	mov	r0, #0
   11428:	bl	10e40 <dcgettext@plt>
   1142c:	mvn	r1, #0
   11430:	mov	r2, #0
   11434:	mov	r3, #0
   11438:	str	r1, [sp]
   1143c:	mov	r1, #0
   11440:	stmib	sp, {r1, sl}
   11444:	str	r0, [sp, #12]
   11448:	mov	r0, r6
   1144c:	str	r1, [sp, #16]
   11450:	bl	14550 <__assert_fail@plt+0x3548>
   11454:	mov	r6, r0
   11458:	mov	r7, r9
   1145c:	b	113d0 <__assert_fail@plt+0x3c8>
   11460:	cmn	r0, #1
   11464:	bne	114ac <__assert_fail@plt+0x4a4>
   11468:	movw	r7, #28976	; 0x7130
   1146c:	movt	r7, #2
   11470:	ldr	r0, [r7]
   11474:	cmp	r0, r5
   11478:	bne	1150c <__assert_fail@plt+0x504>
   1147c:	mov	r0, r9
   11480:	bl	11658 <__assert_fail@plt+0x650>
   11484:	movw	r1, #23304	; 0x5b08
   11488:	subs	r2, r0, r6
   1148c:	mov	r0, #1
   11490:	movt	r1, #1
   11494:	movls	r2, r0
   11498:	mov	r0, #1
   1149c:	bl	10f78 <__printf_chk@plt>
   114a0:	mov	r0, #0
   114a4:	sub	sp, fp, #28
   114a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114ac:	cmn	r0, #3
   114b0:	bne	114fc <__assert_fail@plt+0x4f4>
   114b4:	movw	r0, #28896	; 0x70e0
   114b8:	movw	r2, #23254	; 0x5ad6
   114bc:	mov	r1, #0
   114c0:	movt	r0, #2
   114c4:	movt	r2, #1
   114c8:	str	r1, [sp, #4]
   114cc:	movw	r1, #23210	; 0x5aaa
   114d0:	movt	r1, #1
   114d4:	ldr	r3, [r0]
   114d8:	movw	r0, #28988	; 0x713c
   114dc:	str	r2, [sp]
   114e0:	movw	r2, #23240	; 0x5ac8
   114e4:	movt	r0, #2
   114e8:	movt	r2, #1
   114ec:	ldr	r0, [r0]
   114f0:	bl	13ca8 <__assert_fail@plt+0x2ca0>
   114f4:	mov	r0, #0
   114f8:	bl	10f18 <exit@plt>
   114fc:	cmn	r0, #2
   11500:	bne	11544 <__assert_fail@plt+0x53c>
   11504:	mov	r0, #0
   11508:	bl	11104 <__assert_fail@plt+0xfc>
   1150c:	movw	r1, #23287	; 0x5af7
   11510:	mov	r0, #0
   11514:	mov	r2, #5
   11518:	movt	r1, #1
   1151c:	bl	10e40 <dcgettext@plt>
   11520:	mov	r5, r0
   11524:	ldr	r0, [r7]
   11528:	ldr	r0, [r4, r0, lsl #2]
   1152c:	bl	13804 <__assert_fail@plt+0x27fc>
   11530:	mov	r3, r0
   11534:	mov	r0, #0
   11538:	mov	r1, #0
   1153c:	mov	r2, r5
   11540:	bl	10eb8 <error@plt>
   11544:	mov	r0, #1
   11548:	bl	11104 <__assert_fail@plt+0xfc>
   1154c:	movw	r1, #29000	; 0x7148
   11550:	movt	r1, #2
   11554:	str	r0, [r1, #4]
   11558:	bx	lr
   1155c:	movw	r1, #29000	; 0x7148
   11560:	movt	r1, #2
   11564:	strb	r0, [r1]
   11568:	bx	lr
   1156c:	push	{r4, r5, r6, sl, fp, lr}
   11570:	add	fp, sp, #16
   11574:	sub	sp, sp, #8
   11578:	movw	r0, #28988	; 0x713c
   1157c:	movt	r0, #2
   11580:	ldr	r0, [r0]
   11584:	bl	152e4 <__assert_fail@plt+0x42dc>
   11588:	cmp	r0, #0
   1158c:	beq	115b4 <__assert_fail@plt+0x5ac>
   11590:	movw	r5, #29000	; 0x7148
   11594:	movt	r5, #2
   11598:	ldrb	r0, [r5]
   1159c:	cmp	r0, #0
   115a0:	beq	115e0 <__assert_fail@plt+0x5d8>
   115a4:	bl	10f54 <__errno_location@plt>
   115a8:	ldr	r0, [r0]
   115ac:	cmp	r0, #32
   115b0:	bne	115e0 <__assert_fail@plt+0x5d8>
   115b4:	movw	r0, #28984	; 0x7138
   115b8:	movt	r0, #2
   115bc:	ldr	r0, [r0]
   115c0:	bl	152e4 <__assert_fail@plt+0x42dc>
   115c4:	cmp	r0, #0
   115c8:	subeq	sp, fp, #16
   115cc:	popeq	{r4, r5, r6, sl, fp, pc}
   115d0:	movw	r0, #28900	; 0x70e4
   115d4:	movt	r0, #2
   115d8:	ldr	r0, [r0]
   115dc:	bl	10e04 <_exit@plt>
   115e0:	movw	r1, #23799	; 0x5cf7
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	movt	r1, #1
   115f0:	bl	10e40 <dcgettext@plt>
   115f4:	ldr	r6, [r5, #4]
   115f8:	mov	r4, r0
   115fc:	bl	10f54 <__errno_location@plt>
   11600:	ldr	r5, [r0]
   11604:	cmp	r6, #0
   11608:	bne	11624 <__assert_fail@plt+0x61c>
   1160c:	movw	r2, #23815	; 0x5d07
   11610:	mov	r0, #0
   11614:	mov	r1, r5
   11618:	mov	r3, r4
   1161c:	movt	r2, #1
   11620:	b	11644 <__assert_fail@plt+0x63c>
   11624:	mov	r0, r6
   11628:	bl	1347c <__assert_fail@plt+0x2474>
   1162c:	movw	r2, #23811	; 0x5d03
   11630:	mov	r3, r0
   11634:	str	r4, [sp]
   11638:	mov	r0, #0
   1163c:	mov	r1, r5
   11640:	movt	r2, #1
   11644:	bl	10eb8 <error@plt>
   11648:	movw	r0, #28900	; 0x70e4
   1164c:	movt	r0, #2
   11650:	ldr	r0, [r0]
   11654:	bl	10e04 <_exit@plt>
   11658:	push	{r4, r5, fp, lr}
   1165c:	add	fp, sp, #8
   11660:	sub	sp, sp, #128	; 0x80
   11664:	mvn	r4, #0
   11668:	cmp	r0, #2
   1166c:	bne	116c8 <__assert_fail@plt+0x6c0>
   11670:	movw	r0, #23818	; 0x5d0a
   11674:	movt	r0, #1
   11678:	bl	10ec4 <getenv@plt>
   1167c:	bl	11790 <__assert_fail@plt+0x788>
   11680:	mov	r5, r0
   11684:	movw	r0, #23834	; 0x5d1a
   11688:	movt	r0, #1
   1168c:	bl	10ec4 <getenv@plt>
   11690:	bl	11790 <__assert_fail@plt+0x788>
   11694:	cmp	r0, #0
   11698:	mov	r1, r0
   1169c:	mvneq	r1, #0
   116a0:	cmp	r5, r1
   116a4:	mov	r4, r1
   116a8:	movcc	r4, r5
   116ac:	cmp	r5, #0
   116b0:	beq	116c0 <__assert_fail@plt+0x6b8>
   116b4:	mov	r0, r4
   116b8:	sub	sp, fp, #8
   116bc:	pop	{r4, r5, fp, pc}
   116c0:	mov	r0, #1
   116c4:	mov	r4, r1
   116c8:	cmp	r0, #1
   116cc:	bne	11700 <__assert_fail@plt+0x6f8>
   116d0:	mov	r2, sp
   116d4:	mov	r0, #0
   116d8:	mov	r1, #128	; 0x80
   116dc:	bl	10fd8 <sched_getaffinity@plt>
   116e0:	cmp	r0, #0
   116e4:	beq	11764 <__assert_fail@plt+0x75c>
   116e8:	mov	r0, #84	; 0x54
   116ec:	bl	10e4c <sysconf@plt>
   116f0:	cmp	r0, #0
   116f4:	mov	r5, r0
   116f8:	movle	r5, #1
   116fc:	b	1177c <__assert_fail@plt+0x774>
   11700:	mov	r0, #83	; 0x53
   11704:	bl	10e4c <sysconf@plt>
   11708:	mov	r5, r0
   1170c:	sub	r0, r0, #1
   11710:	cmp	r0, #1
   11714:	bhi	1174c <__assert_fail@plt+0x744>
   11718:	mov	r2, sp
   1171c:	mov	r0, #0
   11720:	mov	r1, #128	; 0x80
   11724:	bl	10fd8 <sched_getaffinity@plt>
   11728:	cmp	r0, #0
   1172c:	bne	1177c <__assert_fail@plt+0x774>
   11730:	mov	r1, sp
   11734:	mov	r0, #128	; 0x80
   11738:	bl	10e34 <__sched_cpucount@plt>
   1173c:	cmp	r0, #0
   11740:	cmpne	r0, r5
   11744:	bls	1177c <__assert_fail@plt+0x774>
   11748:	b	11750 <__assert_fail@plt+0x748>
   1174c:	mov	r0, r5
   11750:	cmp	r0, #0
   11754:	mov	r5, r0
   11758:	bgt	1177c <__assert_fail@plt+0x774>
   1175c:	mov	r5, #1
   11760:	b	1177c <__assert_fail@plt+0x774>
   11764:	mov	r1, sp
   11768:	mov	r0, #128	; 0x80
   1176c:	bl	10e34 <__sched_cpucount@plt>
   11770:	cmp	r0, #0
   11774:	beq	116e8 <__assert_fail@plt+0x6e0>
   11778:	mov	r5, r0
   1177c:	cmp	r5, r4
   11780:	movcc	r4, r5
   11784:	mov	r0, r4
   11788:	sub	sp, fp, #8
   1178c:	pop	{r4, r5, fp, pc}
   11790:	push	{fp, lr}
   11794:	mov	fp, sp
   11798:	sub	sp, sp, #8
   1179c:	mov	r2, r0
   117a0:	mov	r0, #0
   117a4:	cmp	r2, #0
   117a8:	bne	117b4 <__assert_fail@plt+0x7ac>
   117ac:	b	11828 <__assert_fail@plt+0x820>
   117b0:	add	r2, r2, #1
   117b4:	ldrb	r1, [r2]
   117b8:	sub	r3, r1, #9
   117bc:	cmp	r3, #5
   117c0:	bcc	117b0 <__assert_fail@plt+0x7a8>
   117c4:	cmp	r1, #32
   117c8:	beq	117b0 <__assert_fail@plt+0x7a8>
   117cc:	sub	r1, r1, #48	; 0x30
   117d0:	cmp	r1, #9
   117d4:	bhi	11828 <__assert_fail@plt+0x820>
   117d8:	mov	r0, #0
   117dc:	add	r1, sp, #4
   117e0:	str	r0, [sp, #4]
   117e4:	mov	r0, r2
   117e8:	mov	r2, #10
   117ec:	bl	10f30 <strtoul@plt>
   117f0:	ldr	r1, [sp, #4]
   117f4:	cmp	r1, #0
   117f8:	bne	11804 <__assert_fail@plt+0x7fc>
   117fc:	b	11834 <__assert_fail@plt+0x82c>
   11800:	add	r1, r1, #1
   11804:	ldrb	r2, [r1]
   11808:	sub	r3, r2, #9
   1180c:	cmp	r3, #5
   11810:	bcc	11800 <__assert_fail@plt+0x7f8>
   11814:	cmp	r2, #32
   11818:	beq	11800 <__assert_fail@plt+0x7f8>
   1181c:	cmp	r2, #0
   11820:	cmpne	r2, #44	; 0x2c
   11824:	bne	11830 <__assert_fail@plt+0x828>
   11828:	mov	sp, fp
   1182c:	pop	{fp, pc}
   11830:	str	r1, [sp, #4]
   11834:	mov	r0, #0
   11838:	mov	sp, fp
   1183c:	pop	{fp, pc}
   11840:	push	{r4, r5, fp, lr}
   11844:	add	fp, sp, #8
   11848:	cmp	r0, #0
   1184c:	beq	118e0 <__assert_fail@plt+0x8d8>
   11850:	mov	r1, #47	; 0x2f
   11854:	mov	r4, r0
   11858:	bl	10fc0 <strrchr@plt>
   1185c:	cmp	r0, #0
   11860:	mov	r5, r4
   11864:	addne	r5, r0, #1
   11868:	sub	r0, r5, r4
   1186c:	cmp	r0, #7
   11870:	blt	118c4 <__assert_fail@plt+0x8bc>
   11874:	movw	r1, #23907	; 0x5d63
   11878:	sub	r0, r5, #7
   1187c:	mov	r2, #7
   11880:	movt	r1, #1
   11884:	bl	10ff0 <strncmp@plt>
   11888:	cmp	r0, #0
   1188c:	bne	118c4 <__assert_fail@plt+0x8bc>
   11890:	movw	r1, #23915	; 0x5d6b
   11894:	mov	r0, r5
   11898:	mov	r2, #3
   1189c:	movt	r1, #1
   118a0:	bl	10ff0 <strncmp@plt>
   118a4:	cmp	r0, #0
   118a8:	beq	118b4 <__assert_fail@plt+0x8ac>
   118ac:	mov	r4, r5
   118b0:	b	118c4 <__assert_fail@plt+0x8bc>
   118b4:	movw	r0, #28968	; 0x7128
   118b8:	add	r4, r5, #3
   118bc:	movt	r0, #2
   118c0:	str	r4, [r0]
   118c4:	movw	r0, #28972	; 0x712c
   118c8:	movt	r0, #2
   118cc:	str	r4, [r0]
   118d0:	movw	r0, #29008	; 0x7150
   118d4:	movt	r0, #2
   118d8:	str	r4, [r0]
   118dc:	pop	{r4, r5, fp, pc}
   118e0:	movw	r0, #28984	; 0x7138
   118e4:	mov	r1, #55	; 0x37
   118e8:	mov	r2, #1
   118ec:	movt	r0, #2
   118f0:	ldr	r3, [r0]
   118f4:	movw	r0, #23851	; 0x5d2b
   118f8:	movt	r0, #1
   118fc:	bl	10e7c <fwrite@plt>
   11900:	bl	10ffc <abort@plt>
   11904:	push	{r4, r5, r6, sl, fp, lr}
   11908:	add	fp, sp, #16
   1190c:	mov	r4, r0
   11910:	movw	r0, #29016	; 0x7158
   11914:	movt	r0, #2
   11918:	cmp	r4, #0
   1191c:	moveq	r4, r0
   11920:	bl	10f54 <__errno_location@plt>
   11924:	ldr	r6, [r0]
   11928:	mov	r5, r0
   1192c:	mov	r0, r4
   11930:	mov	r1, #48	; 0x30
   11934:	bl	1433c <__assert_fail@plt+0x3334>
   11938:	str	r6, [r5]
   1193c:	pop	{r4, r5, r6, sl, fp, pc}
   11940:	movw	r1, #29016	; 0x7158
   11944:	cmp	r0, #0
   11948:	movt	r1, #2
   1194c:	movne	r1, r0
   11950:	ldr	r0, [r1]
   11954:	bx	lr
   11958:	movw	r2, #29016	; 0x7158
   1195c:	cmp	r0, #0
   11960:	movt	r2, #2
   11964:	movne	r2, r0
   11968:	str	r1, [r2]
   1196c:	bx	lr
   11970:	movw	r3, #29016	; 0x7158
   11974:	cmp	r0, #0
   11978:	and	r2, r2, #1
   1197c:	movt	r3, #2
   11980:	movne	r3, r0
   11984:	ubfx	r0, r1, #5, #3
   11988:	and	r1, r1, #31
   1198c:	add	ip, r3, r0, lsl #2
   11990:	mov	r0, #1
   11994:	ldr	r3, [ip, #8]
   11998:	and	r0, r0, r3, lsr r1
   1199c:	eor	r2, r0, r2
   119a0:	eor	r1, r3, r2, lsl r1
   119a4:	str	r1, [ip, #8]
   119a8:	bx	lr
   119ac:	movw	r2, #29016	; 0x7158
   119b0:	cmp	r0, #0
   119b4:	movt	r2, #2
   119b8:	movne	r2, r0
   119bc:	ldr	r0, [r2, #4]
   119c0:	str	r1, [r2, #4]
   119c4:	bx	lr
   119c8:	push	{fp, lr}
   119cc:	mov	fp, sp
   119d0:	movw	r3, #29016	; 0x7158
   119d4:	cmp	r0, #0
   119d8:	movt	r3, #2
   119dc:	movne	r3, r0
   119e0:	cmp	r1, #0
   119e4:	mov	r0, #10
   119e8:	cmpne	r2, #0
   119ec:	str	r0, [r3]
   119f0:	bne	119f8 <__assert_fail@plt+0x9f0>
   119f4:	bl	10ffc <abort@plt>
   119f8:	str	r1, [r3, #40]	; 0x28
   119fc:	str	r2, [r3, #44]	; 0x2c
   11a00:	pop	{fp, pc}
   11a04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a08:	add	fp, sp, #28
   11a0c:	sub	sp, sp, #20
   11a10:	mov	r7, r0
   11a14:	ldr	r0, [fp, #8]
   11a18:	movw	r5, #29016	; 0x7158
   11a1c:	mov	r8, r3
   11a20:	mov	r9, r2
   11a24:	mov	sl, r1
   11a28:	movt	r5, #2
   11a2c:	cmp	r0, #0
   11a30:	movne	r5, r0
   11a34:	bl	10f54 <__errno_location@plt>
   11a38:	ldr	r2, [r5, #40]	; 0x28
   11a3c:	ldr	r3, [r5, #44]	; 0x2c
   11a40:	mov	r4, r0
   11a44:	ldm	r5, {r0, r1}
   11a48:	add	r5, r5, #8
   11a4c:	ldr	r6, [r4]
   11a50:	stm	sp, {r0, r1, r5}
   11a54:	mov	r0, r7
   11a58:	mov	r1, sl
   11a5c:	str	r2, [sp, #12]
   11a60:	str	r3, [sp, #16]
   11a64:	mov	r2, r9
   11a68:	mov	r3, r8
   11a6c:	bl	11a7c <__assert_fail@plt+0xa74>
   11a70:	str	r6, [r4]
   11a74:	sub	sp, fp, #28
   11a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a80:	add	fp, sp, #28
   11a84:	sub	sp, sp, #156	; 0x9c
   11a88:	str	r0, [fp, #-84]	; 0xffffffac
   11a8c:	add	r0, r2, #1
   11a90:	mov	r6, r1
   11a94:	mov	r7, r3
   11a98:	str	r2, [fp, #-80]	; 0xffffffb0
   11a9c:	str	r0, [sp, #80]	; 0x50
   11aa0:	ldr	r0, [fp, #12]
   11aa4:	and	r1, r0, #1
   11aa8:	str	r1, [sp, #36]	; 0x24
   11aac:	and	r1, r0, #4
   11ab0:	str	r1, [sp, #32]
   11ab4:	ubfx	r8, r0, #1, #1
   11ab8:	bl	10e94 <__ctype_get_mb_cur_max@plt>
   11abc:	str	r0, [sp, #40]	; 0x28
   11ac0:	ldr	r0, [fp, #24]
   11ac4:	ldr	r4, [fp, #8]
   11ac8:	mov	r1, #0
   11acc:	str	r1, [fp, #-52]	; 0xffffffcc
   11ad0:	mov	r1, #0
   11ad4:	str	r1, [sp, #60]	; 0x3c
   11ad8:	mov	r1, #1
   11adc:	str	r1, [sp, #84]	; 0x54
   11ae0:	str	r0, [sp, #76]	; 0x4c
   11ae4:	ldr	r0, [fp, #20]
   11ae8:	str	r0, [sp, #72]	; 0x48
   11aec:	mov	r0, #0
   11af0:	str	r0, [sp, #56]	; 0x38
   11af4:	mov	r0, #0
   11af8:	str	r0, [fp, #-88]	; 0xffffffa8
   11afc:	mov	r0, #0
   11b00:	str	r0, [fp, #-72]	; 0xffffffb8
   11b04:	mov	r0, #0
   11b08:	cmp	r4, #10
   11b0c:	bhi	12e28 <__assert_fail@plt+0x1e20>
   11b10:	add	r1, pc, #24
   11b14:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b18:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11b1c:	mov	r5, r6
   11b20:	mov	r9, #0
   11b24:	mov	r2, #1
   11b28:	mov	r3, #0
   11b2c:	ldr	pc, [r1, r4, lsl #2]
   11b30:	strdeq	r1, [r1], -r8
   11b34:	andeq	r1, r1, r4, lsr ip
   11b38:	andeq	r1, r1, r8, lsl #24
   11b3c:	strdeq	r1, [r1], -r0
   11b40:	andeq	r1, r1, r8, lsr #24
   11b44:	andeq	r1, r1, ip, lsl #25
   11b48:	andeq	r1, r1, r8, lsl ip
   11b4c:	andeq	r1, r1, r4, lsl #30
   11b50:	andeq	r1, r1, ip, asr fp
   11b54:	andeq	r1, r1, ip, asr fp
   11b58:	muleq	r1, r4, sp
   11b5c:	movw	r6, #23997	; 0x5dbd
   11b60:	mov	r0, #0
   11b64:	mov	r2, #5
   11b68:	movt	r6, #1
   11b6c:	mov	r1, r6
   11b70:	bl	10e40 <dcgettext@plt>
   11b74:	cmp	r0, r6
   11b78:	str	r0, [sp, #72]	; 0x48
   11b7c:	bne	11d6c <__assert_fail@plt+0xd64>
   11b80:	bl	15530 <__assert_fail@plt+0x4528>
   11b84:	ldrb	r1, [r0]
   11b88:	and	r1, r1, #223	; 0xdf
   11b8c:	cmp	r1, #71	; 0x47
   11b90:	beq	11cec <__assert_fail@plt+0xce4>
   11b94:	cmp	r1, #85	; 0x55
   11b98:	bne	11d50 <__assert_fail@plt+0xd48>
   11b9c:	ldrb	r1, [r0, #1]
   11ba0:	and	r1, r1, #223	; 0xdf
   11ba4:	cmp	r1, #84	; 0x54
   11ba8:	bne	11d50 <__assert_fail@plt+0xd48>
   11bac:	ldrb	r1, [r0, #2]
   11bb0:	and	r1, r1, #223	; 0xdf
   11bb4:	cmp	r1, #70	; 0x46
   11bb8:	bne	11d50 <__assert_fail@plt+0xd48>
   11bbc:	ldrb	r1, [r0, #3]
   11bc0:	cmp	r1, #45	; 0x2d
   11bc4:	bne	11d50 <__assert_fail@plt+0xd48>
   11bc8:	ldrb	r1, [r0, #4]
   11bcc:	cmp	r1, #56	; 0x38
   11bd0:	bne	11d50 <__assert_fail@plt+0xd48>
   11bd4:	ldrb	r0, [r0, #5]
   11bd8:	cmp	r0, #0
   11bdc:	movw	r0, #24001	; 0x5dc1
   11be0:	movt	r0, #1
   11be4:	str	r0, [sp, #72]	; 0x48
   11be8:	bne	11d50 <__assert_fail@plt+0xd48>
   11bec:	b	11d6c <__assert_fail@plt+0xd64>
   11bf0:	mov	r0, #1
   11bf4:	b	11c34 <__assert_fail@plt+0xc2c>
   11bf8:	mov	r4, #0
   11bfc:	mov	r9, #0
   11c00:	mov	r2, r0
   11c04:	b	11c84 <__assert_fail@plt+0xc7c>
   11c08:	tst	r8, #1
   11c0c:	bne	11c34 <__assert_fail@plt+0xc2c>
   11c10:	mov	r2, r0
   11c14:	b	11c5c <__assert_fail@plt+0xc54>
   11c18:	mov	r0, #1
   11c1c:	mov	r9, #0
   11c20:	mov	r4, #5
   11c24:	b	11ca0 <__assert_fail@plt+0xc98>
   11c28:	mov	r2, #1
   11c2c:	tst	r8, #1
   11c30:	beq	11c5c <__assert_fail@plt+0xc54>
   11c34:	mov	r1, #1
   11c38:	mov	r9, #0
   11c3c:	mov	r4, #2
   11c40:	mov	r2, r0
   11c44:	mov	r3, #1
   11c48:	str	r1, [fp, #-72]	; 0xffffffb8
   11c4c:	movw	r1, #23999	; 0x5dbf
   11c50:	movt	r1, #1
   11c54:	str	r1, [fp, #-88]	; 0xffffffa8
   11c58:	b	11f04 <__assert_fail@plt+0xefc>
   11c5c:	cmp	r5, #0
   11c60:	mov	r9, #1
   11c64:	mov	r4, #2
   11c68:	movne	r0, #39	; 0x27
   11c6c:	strbne	r0, [ip]
   11c70:	movw	r0, #23999	; 0x5dbf
   11c74:	movt	r0, #1
   11c78:	str	r0, [fp, #-88]	; 0xffffffa8
   11c7c:	mov	r0, #1
   11c80:	str	r0, [fp, #-72]	; 0xffffffb8
   11c84:	mov	r3, #0
   11c88:	b	11f04 <__assert_fail@plt+0xefc>
   11c8c:	mov	r4, #5
   11c90:	tst	r8, #1
   11c94:	beq	11cbc <__assert_fail@plt+0xcb4>
   11c98:	mov	r0, #1
   11c9c:	mov	r9, #0
   11ca0:	str	r0, [fp, #-72]	; 0xffffffb8
   11ca4:	movw	r0, #23995	; 0x5dbb
   11ca8:	mov	r2, #1
   11cac:	mov	r3, #1
   11cb0:	movt	r0, #1
   11cb4:	str	r0, [fp, #-88]	; 0xffffffa8
   11cb8:	b	11f04 <__assert_fail@plt+0xefc>
   11cbc:	cmp	r5, #0
   11cc0:	mov	r3, #0
   11cc4:	mov	r9, #1
   11cc8:	mov	r2, #1
   11ccc:	movne	r0, #34	; 0x22
   11cd0:	strbne	r0, [ip]
   11cd4:	movw	r0, #23995	; 0x5dbb
   11cd8:	movt	r0, #1
   11cdc:	str	r0, [fp, #-88]	; 0xffffffa8
   11ce0:	mov	r0, #1
   11ce4:	str	r0, [fp, #-72]	; 0xffffffb8
   11ce8:	b	11f04 <__assert_fail@plt+0xefc>
   11cec:	ldrb	r1, [r0, #1]
   11cf0:	and	r1, r1, #223	; 0xdf
   11cf4:	cmp	r1, #66	; 0x42
   11cf8:	bne	11d50 <__assert_fail@plt+0xd48>
   11cfc:	ldrb	r1, [r0, #2]
   11d00:	cmp	r1, #49	; 0x31
   11d04:	bne	11d50 <__assert_fail@plt+0xd48>
   11d08:	ldrb	r1, [r0, #3]
   11d0c:	cmp	r1, #56	; 0x38
   11d10:	bne	11d50 <__assert_fail@plt+0xd48>
   11d14:	ldrb	r1, [r0, #4]
   11d18:	cmp	r1, #48	; 0x30
   11d1c:	bne	11d50 <__assert_fail@plt+0xd48>
   11d20:	ldrb	r1, [r0, #5]
   11d24:	cmp	r1, #51	; 0x33
   11d28:	bne	11d50 <__assert_fail@plt+0xd48>
   11d2c:	ldrb	r1, [r0, #6]
   11d30:	cmp	r1, #48	; 0x30
   11d34:	bne	11d50 <__assert_fail@plt+0xd48>
   11d38:	ldrb	r0, [r0, #7]
   11d3c:	cmp	r0, #0
   11d40:	movw	r0, #24009	; 0x5dc9
   11d44:	movt	r0, #1
   11d48:	str	r0, [sp, #72]	; 0x48
   11d4c:	beq	11d6c <__assert_fail@plt+0xd64>
   11d50:	movw	r1, #23995	; 0x5dbb
   11d54:	movw	r0, #23999	; 0x5dbf
   11d58:	cmp	r4, #9
   11d5c:	movt	r1, #1
   11d60:	movt	r0, #1
   11d64:	moveq	r0, r1
   11d68:	str	r0, [sp, #72]	; 0x48
   11d6c:	movw	r6, #23999	; 0x5dbf
   11d70:	mov	r0, #0
   11d74:	mov	r2, #5
   11d78:	movt	r6, #1
   11d7c:	mov	r1, r6
   11d80:	bl	10e40 <dcgettext@plt>
   11d84:	cmp	r0, r6
   11d88:	str	r0, [sp, #76]	; 0x4c
   11d8c:	beq	11dd8 <__assert_fail@plt+0xdd0>
   11d90:	ldr	ip, [fp, #-84]	; 0xffffffac
   11d94:	mov	r9, #0
   11d98:	tst	r8, #1
   11d9c:	bne	11ee0 <__assert_fail@plt+0xed8>
   11da0:	ldr	r0, [sp, #72]	; 0x48
   11da4:	ldrb	r0, [r0]
   11da8:	cmp	r0, #0
   11dac:	beq	11ee0 <__assert_fail@plt+0xed8>
   11db0:	ldr	r1, [sp, #72]	; 0x48
   11db4:	mov	r9, #0
   11db8:	add	r1, r1, #1
   11dbc:	cmp	r9, r5
   11dc0:	strbcc	r0, [ip, r9]
   11dc4:	ldrb	r0, [r1, r9]
   11dc8:	add	r9, r9, #1
   11dcc:	cmp	r0, #0
   11dd0:	bne	11dbc <__assert_fail@plt+0xdb4>
   11dd4:	b	11ee0 <__assert_fail@plt+0xed8>
   11dd8:	bl	15530 <__assert_fail@plt+0x4528>
   11ddc:	ldrb	r1, [r0]
   11de0:	and	r1, r1, #223	; 0xdf
   11de4:	cmp	r1, #71	; 0x47
   11de8:	beq	11e58 <__assert_fail@plt+0xe50>
   11dec:	ldr	ip, [fp, #-84]	; 0xffffffac
   11df0:	cmp	r1, #85	; 0x55
   11df4:	bne	11eb4 <__assert_fail@plt+0xeac>
   11df8:	ldrb	r1, [r0, #1]
   11dfc:	and	r1, r1, #223	; 0xdf
   11e00:	cmp	r1, #84	; 0x54
   11e04:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e08:	ldrb	r1, [r0, #2]
   11e0c:	and	r1, r1, #223	; 0xdf
   11e10:	cmp	r1, #70	; 0x46
   11e14:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e18:	ldrb	r1, [r0, #3]
   11e1c:	cmp	r1, #45	; 0x2d
   11e20:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e24:	ldrb	r1, [r0, #4]
   11e28:	cmp	r1, #56	; 0x38
   11e2c:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e30:	ldrb	r0, [r0, #5]
   11e34:	cmp	r0, #0
   11e38:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e3c:	movw	r0, #24005	; 0x5dc5
   11e40:	movt	r0, #1
   11e44:	str	r0, [sp, #76]	; 0x4c
   11e48:	mov	r9, #0
   11e4c:	tst	r8, #1
   11e50:	beq	11da0 <__assert_fail@plt+0xd98>
   11e54:	b	11ee0 <__assert_fail@plt+0xed8>
   11e58:	ldrb	r1, [r0, #1]
   11e5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e60:	and	r1, r1, #223	; 0xdf
   11e64:	cmp	r1, #66	; 0x42
   11e68:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e6c:	ldrb	r1, [r0, #2]
   11e70:	cmp	r1, #49	; 0x31
   11e74:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e78:	ldrb	r1, [r0, #3]
   11e7c:	cmp	r1, #56	; 0x38
   11e80:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e84:	ldrb	r1, [r0, #4]
   11e88:	cmp	r1, #48	; 0x30
   11e8c:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e90:	ldrb	r1, [r0, #5]
   11e94:	cmp	r1, #51	; 0x33
   11e98:	bne	11eb4 <__assert_fail@plt+0xeac>
   11e9c:	ldrb	r1, [r0, #6]
   11ea0:	cmp	r1, #48	; 0x30
   11ea4:	bne	11eb4 <__assert_fail@plt+0xeac>
   11ea8:	ldrb	r0, [r0, #7]
   11eac:	cmp	r0, #0
   11eb0:	beq	12cc8 <__assert_fail@plt+0x1cc0>
   11eb4:	movw	r0, #23999	; 0x5dbf
   11eb8:	cmp	r4, #9
   11ebc:	movt	r0, #1
   11ec0:	mov	r1, r0
   11ec4:	movw	r0, #23995	; 0x5dbb
   11ec8:	movt	r0, #1
   11ecc:	moveq	r1, r0
   11ed0:	str	r1, [sp, #76]	; 0x4c
   11ed4:	mov	r9, #0
   11ed8:	tst	r8, #1
   11edc:	beq	11da0 <__assert_fail@plt+0xd98>
   11ee0:	ldr	r6, [sp, #76]	; 0x4c
   11ee4:	mov	r0, r6
   11ee8:	bl	10f3c <strlen@plt>
   11eec:	ldr	ip, [fp, #-84]	; 0xffffffac
   11ef0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11ef4:	str	r0, [fp, #-72]	; 0xffffffb8
   11ef8:	str	r6, [fp, #-88]	; 0xffffffa8
   11efc:	mov	r2, #1
   11f00:	mov	r3, r8
   11f04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11f08:	str	r4, [fp, #-64]	; 0xffffffc0
   11f0c:	mov	sl, #0
   11f10:	str	r3, [fp, #-76]	; 0xffffffb4
   11f14:	str	r2, [sp, #88]	; 0x58
   11f18:	cmp	r0, #0
   11f1c:	movwne	r0, #1
   11f20:	and	r1, r0, r3
   11f24:	and	r1, r2, r1
   11f28:	str	r1, [sp, #48]	; 0x30
   11f2c:	sub	r1, r4, #2
   11f30:	clz	r1, r1
   11f34:	lsr	r1, r1, #5
   11f38:	and	r1, r1, r3
   11f3c:	str	r1, [sp, #44]	; 0x2c
   11f40:	subs	r1, r4, #2
   11f44:	eor	r4, r3, #1
   11f48:	movwne	r1, #1
   11f4c:	str	r4, [sp, #92]	; 0x5c
   11f50:	orr	r4, r1, r4
   11f54:	and	r1, r1, r2
   11f58:	and	r0, r0, r1
   11f5c:	str	r4, [sp, #64]	; 0x40
   11f60:	ldr	r4, [sp, #84]	; 0x54
   11f64:	str	r0, [fp, #-60]	; 0xffffffc4
   11f68:	orr	r0, r1, r3
   11f6c:	ldr	r1, [fp, #16]
   11f70:	eor	r0, r0, #1
   11f74:	clz	r1, r1
   11f78:	lsr	r1, r1, #5
   11f7c:	orr	r0, r1, r0
   11f80:	str	r0, [fp, #-68]	; 0xffffffbc
   11f84:	eor	r0, r2, #1
   11f88:	str	r0, [sp, #52]	; 0x34
   11f8c:	cmn	r7, #1
   11f90:	beq	11fa0 <__assert_fail@plt+0xf98>
   11f94:	cmp	sl, r7
   11f98:	bne	11fac <__assert_fail@plt+0xfa4>
   11f9c:	b	12c40 <__assert_fail@plt+0x1c38>
   11fa0:	ldrb	r0, [lr, sl]
   11fa4:	cmp	r0, #0
   11fa8:	beq	12c48 <__assert_fail@plt+0x1c40>
   11fac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11fb0:	cmp	r0, #0
   11fb4:	beq	12014 <__assert_fail@plt+0x100c>
   11fb8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11fbc:	mov	r6, r5
   11fc0:	add	r5, sl, r0
   11fc4:	cmp	r0, #2
   11fc8:	bcc	12034 <__assert_fail@plt+0x102c>
   11fcc:	mov	r0, #0
   11fd0:	cmn	r7, #1
   11fd4:	str	r0, [fp, #-56]	; 0xffffffc8
   11fd8:	bne	11ff0 <__assert_fail@plt+0xfe8>
   11fdc:	mov	r0, lr
   11fe0:	bl	10f3c <strlen@plt>
   11fe4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11fe8:	ldr	ip, [fp, #-84]	; 0xffffffac
   11fec:	mov	r7, r0
   11ff0:	cmp	r5, r7
   11ff4:	bls	12044 <__assert_fail@plt+0x103c>
   11ff8:	mov	r0, #0
   11ffc:	mov	r5, r6
   12000:	str	r0, [fp, #-48]	; 0xffffffd0
   12004:	ldrb	r6, [lr, sl]
   12008:	cmp	r6, #126	; 0x7e
   1200c:	bls	12094 <__assert_fail@plt+0x108c>
   12010:	b	125f0 <__assert_fail@plt+0x15e8>
   12014:	mov	r0, #0
   12018:	str	r0, [fp, #-56]	; 0xffffffc8
   1201c:	mov	r0, #0
   12020:	str	r0, [fp, #-48]	; 0xffffffd0
   12024:	ldrb	r6, [lr, sl]
   12028:	cmp	r6, #126	; 0x7e
   1202c:	bls	12094 <__assert_fail@plt+0x108c>
   12030:	b	125f0 <__assert_fail@plt+0x15e8>
   12034:	mov	r0, #0
   12038:	str	r0, [fp, #-56]	; 0xffffffc8
   1203c:	cmp	r5, r7
   12040:	bhi	11ff8 <__assert_fail@plt+0xff0>
   12044:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12048:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1204c:	add	r0, lr, sl
   12050:	bl	10f24 <bcmp@plt>
   12054:	ldr	r2, [sp, #92]	; 0x5c
   12058:	cmp	r0, #0
   1205c:	mov	r1, r0
   12060:	mov	r5, r6
   12064:	movwne	r1, #1
   12068:	orr	r1, r1, r2
   1206c:	tst	r1, #1
   12070:	beq	12d08 <__assert_fail@plt+0x1d00>
   12074:	ldr	ip, [fp, #-84]	; 0xffffffac
   12078:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1207c:	clz	r0, r0
   12080:	lsr	r0, r0, #5
   12084:	str	r0, [fp, #-48]	; 0xffffffd0
   12088:	ldrb	r6, [lr, sl]
   1208c:	cmp	r6, #126	; 0x7e
   12090:	bhi	125f0 <__assert_fail@plt+0x15e8>
   12094:	add	r3, pc, #16
   12098:	mov	r8, #1
   1209c:	mov	r2, #110	; 0x6e
   120a0:	mov	r0, #97	; 0x61
   120a4:	mov	r1, #0
   120a8:	ldr	pc, [r3, r6, lsl #2]
   120ac:	andeq	r2, r1, r8, lsr #7
   120b0:	strdeq	r2, [r1], -r0
   120b4:	strdeq	r2, [r1], -r0
   120b8:	strdeq	r2, [r1], -r0
   120bc:	strdeq	r2, [r1], -r0
   120c0:	strdeq	r2, [r1], -r0
   120c4:	strdeq	r2, [r1], -r0
   120c8:	andeq	r2, r1, r4, lsr #13
   120cc:	andeq	r2, r1, r8, lsl #7
   120d0:	andeq	r2, r1, r0, lsl #7
   120d4:	muleq	r1, r4, r3
   120d8:	andeq	r2, r1, r4, asr #9
   120dc:	andeq	r2, r1, r8, ror r3
   120e0:	muleq	r1, r0, r3
   120e4:	strdeq	r2, [r1], -r0
   120e8:	strdeq	r2, [r1], -r0
   120ec:	strdeq	r2, [r1], -r0
   120f0:	strdeq	r2, [r1], -r0
   120f4:	strdeq	r2, [r1], -r0
   120f8:	strdeq	r2, [r1], -r0
   120fc:	strdeq	r2, [r1], -r0
   12100:	strdeq	r2, [r1], -r0
   12104:	strdeq	r2, [r1], -r0
   12108:	strdeq	r2, [r1], -r0
   1210c:	strdeq	r2, [r1], -r0
   12110:	strdeq	r2, [r1], -r0
   12114:	strdeq	r2, [r1], -r0
   12118:	strdeq	r2, [r1], -r0
   1211c:	strdeq	r2, [r1], -r0
   12120:	strdeq	r2, [r1], -r0
   12124:	strdeq	r2, [r1], -r0
   12128:	strdeq	r2, [r1], -r0
   1212c:	andeq	r2, r1, ip, lsl r3
   12130:	andeq	r2, r1, r0, lsr #6
   12134:	andeq	r2, r1, r0, lsr #6
   12138:	andeq	r2, r1, r0, lsl r3
   1213c:	andeq	r2, r1, r0, lsr #6
   12140:	andeq	r2, r1, r8, lsr #5
   12144:	andeq	r2, r1, r0, lsr #6
   12148:	andeq	r2, r1, ip, asr #9
   1214c:	andeq	r2, r1, r0, lsr #6
   12150:	andeq	r2, r1, r0, lsr #6
   12154:	andeq	r2, r1, r0, lsr #6
   12158:	andeq	r2, r1, r8, lsr #5
   1215c:	andeq	r2, r1, r8, lsr #5
   12160:	andeq	r2, r1, r8, lsr #5
   12164:	andeq	r2, r1, r8, lsr #5
   12168:	andeq	r2, r1, r8, lsr #5
   1216c:	andeq	r2, r1, r8, lsr #5
   12170:	andeq	r2, r1, r8, lsr #5
   12174:	andeq	r2, r1, r8, lsr #5
   12178:	andeq	r2, r1, r8, lsr #5
   1217c:	andeq	r2, r1, r8, lsr #5
   12180:	andeq	r2, r1, r8, lsr #5
   12184:	andeq	r2, r1, r8, lsr #5
   12188:	andeq	r2, r1, r8, lsr #5
   1218c:	andeq	r2, r1, r8, lsr #5
   12190:	andeq	r2, r1, r8, lsr #5
   12194:	andeq	r2, r1, r8, lsr #5
   12198:	andeq	r2, r1, r0, lsr #6
   1219c:	andeq	r2, r1, r0, lsr #6
   121a0:	andeq	r2, r1, r0, lsr #6
   121a4:	andeq	r2, r1, r0, lsr #6
   121a8:	muleq	r1, r0, r4
   121ac:	strdeq	r2, [r1], -r0
   121b0:	andeq	r2, r1, r8, lsr #5
   121b4:	andeq	r2, r1, r8, lsr #5
   121b8:	andeq	r2, r1, r8, lsr #5
   121bc:	andeq	r2, r1, r8, lsr #5
   121c0:	andeq	r2, r1, r8, lsr #5
   121c4:	andeq	r2, r1, r8, lsr #5
   121c8:	andeq	r2, r1, r8, lsr #5
   121cc:	andeq	r2, r1, r8, lsr #5
   121d0:	andeq	r2, r1, r8, lsr #5
   121d4:	andeq	r2, r1, r8, lsr #5
   121d8:	andeq	r2, r1, r8, lsr #5
   121dc:	andeq	r2, r1, r8, lsr #5
   121e0:	andeq	r2, r1, r8, lsr #5
   121e4:	andeq	r2, r1, r8, lsr #5
   121e8:	andeq	r2, r1, r8, lsr #5
   121ec:	andeq	r2, r1, r8, lsr #5
   121f0:	andeq	r2, r1, r8, lsr #5
   121f4:	andeq	r2, r1, r8, lsr #5
   121f8:	andeq	r2, r1, r8, lsr #5
   121fc:	andeq	r2, r1, r8, lsr #5
   12200:	andeq	r2, r1, r8, lsr #5
   12204:	andeq	r2, r1, r8, lsr #5
   12208:	andeq	r2, r1, r8, lsr #5
   1220c:	andeq	r2, r1, r8, lsr #5
   12210:	andeq	r2, r1, r8, lsr #5
   12214:	andeq	r2, r1, r8, lsr #5
   12218:	andeq	r2, r1, r0, lsr #6
   1221c:	andeq	r2, r1, r4, asr r3
   12220:	andeq	r2, r1, r8, lsr #5
   12224:	andeq	r2, r1, r0, lsr #6
   12228:	andeq	r2, r1, r8, lsr #5
   1222c:	andeq	r2, r1, r0, lsr #6
   12230:	andeq	r2, r1, r8, lsr #5
   12234:	andeq	r2, r1, r8, lsr #5
   12238:	andeq	r2, r1, r8, lsr #5
   1223c:	andeq	r2, r1, r8, lsr #5
   12240:	andeq	r2, r1, r8, lsr #5
   12244:	andeq	r2, r1, r8, lsr #5
   12248:	andeq	r2, r1, r8, lsr #5
   1224c:	andeq	r2, r1, r8, lsr #5
   12250:	andeq	r2, r1, r8, lsr #5
   12254:	andeq	r2, r1, r8, lsr #5
   12258:	andeq	r2, r1, r8, lsr #5
   1225c:	andeq	r2, r1, r8, lsr #5
   12260:	andeq	r2, r1, r8, lsr #5
   12264:	andeq	r2, r1, r8, lsr #5
   12268:	andeq	r2, r1, r8, lsr #5
   1226c:	andeq	r2, r1, r8, lsr #5
   12270:	andeq	r2, r1, r8, lsr #5
   12274:	andeq	r2, r1, r8, lsr #5
   12278:	andeq	r2, r1, r8, lsr #5
   1227c:	andeq	r2, r1, r8, lsr #5
   12280:	andeq	r2, r1, r8, lsr #5
   12284:	andeq	r2, r1, r8, lsr #5
   12288:	andeq	r2, r1, r8, lsr #5
   1228c:	andeq	r2, r1, r8, lsr #5
   12290:	andeq	r2, r1, r8, lsr #5
   12294:	andeq	r2, r1, r8, lsr #5
   12298:	andeq	r2, r1, r8, ror #5
   1229c:	andeq	r2, r1, r0, lsr #6
   122a0:	andeq	r2, r1, r8, ror #5
   122a4:	andeq	r2, r1, r0, lsl r3
   122a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   122ac:	tst	r0, #1
   122b0:	bne	12568 <__assert_fail@plt+0x1560>
   122b4:	ldr	r1, [fp, #16]
   122b8:	ubfx	r0, r6, #5, #3
   122bc:	mov	r2, #1
   122c0:	ldr	r0, [r1, r0, lsl #2]
   122c4:	and	r1, r6, #31
   122c8:	tst	r0, r2, lsl r1
   122cc:	beq	12568 <__assert_fail@plt+0x1560>
   122d0:	mov	r0, r6
   122d4:	mov	r1, r8
   122d8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   122dc:	tst	r2, #1
   122e0:	beq	12588 <__assert_fail@plt+0x1580>
   122e4:	b	12ce4 <__assert_fail@plt+0x1cdc>
   122e8:	cmp	r7, #1
   122ec:	beq	12310 <__assert_fail@plt+0x1308>
   122f0:	mov	r8, #0
   122f4:	cmn	r7, #1
   122f8:	bne	12554 <__assert_fail@plt+0x154c>
   122fc:	ldrb	r0, [lr, #1]
   12300:	cmp	r0, #0
   12304:	beq	12310 <__assert_fail@plt+0x1308>
   12308:	mvn	r7, #0
   1230c:	b	12554 <__assert_fail@plt+0x154c>
   12310:	mov	r8, #0
   12314:	cmp	sl, #0
   12318:	bne	12554 <__assert_fail@plt+0x154c>
   1231c:	mov	r1, #1
   12320:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12324:	cmp	r0, #2
   12328:	bne	12340 <__assert_fail@plt+0x1338>
   1232c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12330:	mov	r8, r1
   12334:	tst	r0, #1
   12338:	beq	122a8 <__assert_fail@plt+0x12a0>
   1233c:	b	12ce4 <__assert_fail@plt+0x1cdc>
   12340:	mov	r8, r1
   12344:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12348:	tst	r0, #1
   1234c:	beq	122b4 <__assert_fail@plt+0x12ac>
   12350:	b	12568 <__assert_fail@plt+0x1560>
   12354:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12358:	cmp	r0, #2
   1235c:	bne	1261c <__assert_fail@plt+0x1614>
   12360:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12364:	tst	r0, #1
   12368:	bne	12ce4 <__assert_fail@plt+0x1cdc>
   1236c:	mov	r0, #0
   12370:	str	r0, [fp, #-56]	; 0xffffffc8
   12374:	b	12634 <__assert_fail@plt+0x162c>
   12378:	mov	r0, #102	; 0x66
   1237c:	b	126a4 <__assert_fail@plt+0x169c>
   12380:	mov	r2, #116	; 0x74
   12384:	b	12394 <__assert_fail@plt+0x138c>
   12388:	mov	r0, #98	; 0x62
   1238c:	b	126a4 <__assert_fail@plt+0x169c>
   12390:	mov	r2, #114	; 0x72
   12394:	ldr	r0, [sp, #64]	; 0x40
   12398:	tst	r0, #1
   1239c:	mov	r0, r2
   123a0:	bne	126a4 <__assert_fail@plt+0x169c>
   123a4:	b	12ce4 <__assert_fail@plt+0x1cdc>
   123a8:	ldr	r0, [sp, #88]	; 0x58
   123ac:	tst	r0, #1
   123b0:	beq	126c4 <__assert_fail@plt+0x16bc>
   123b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   123b8:	tst	r0, #1
   123bc:	bne	12e20 <__assert_fail@plt+0x1e18>
   123c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   123c4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   123c8:	subs	r0, r0, #2
   123cc:	movwne	r0, #1
   123d0:	orr	r0, r0, r1
   123d4:	tst	r0, #1
   123d8:	bne	12414 <__assert_fail@plt+0x140c>
   123dc:	cmp	r9, r5
   123e0:	movcc	r0, #39	; 0x27
   123e4:	strbcc	r0, [ip, r9]
   123e8:	add	r0, r9, #1
   123ec:	cmp	r0, r5
   123f0:	movcc	r1, #36	; 0x24
   123f4:	strbcc	r1, [ip, r0]
   123f8:	add	r0, r9, #2
   123fc:	add	r9, r9, #3
   12400:	cmp	r0, r5
   12404:	movcc	r1, #39	; 0x27
   12408:	strbcc	r1, [ip, r0]
   1240c:	mov	r0, #1
   12410:	str	r0, [fp, #-52]	; 0xffffffcc
   12414:	mov	r1, #1
   12418:	cmp	r9, r5
   1241c:	mov	r8, #0
   12420:	mov	r6, #48	; 0x30
   12424:	str	r1, [fp, #-56]	; 0xffffffc8
   12428:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1242c:	movcc	r0, #92	; 0x5c
   12430:	strbcc	r0, [ip, r9]
   12434:	add	r0, r9, #1
   12438:	cmp	r1, #2
   1243c:	beq	12890 <__assert_fail@plt+0x1888>
   12440:	add	r1, sl, #1
   12444:	cmp	r1, r7
   12448:	bcs	12890 <__assert_fail@plt+0x1888>
   1244c:	ldrb	r1, [lr, r1]
   12450:	sub	r1, r1, #48	; 0x30
   12454:	uxtb	r1, r1
   12458:	cmp	r1, #9
   1245c:	bhi	12890 <__assert_fail@plt+0x1888>
   12460:	cmp	r0, r5
   12464:	movcc	r1, #48	; 0x30
   12468:	strbcc	r1, [ip, r0]
   1246c:	add	r0, r9, #2
   12470:	add	r9, r9, #3
   12474:	cmp	r0, r5
   12478:	movcc	r1, #48	; 0x30
   1247c:	strbcc	r1, [ip, r0]
   12480:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12484:	tst	r0, #1
   12488:	beq	122b4 <__assert_fail@plt+0x12ac>
   1248c:	b	12568 <__assert_fail@plt+0x1560>
   12490:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12494:	mov	r6, #63	; 0x3f
   12498:	cmp	r0, #5
   1249c:	beq	128a4 <__assert_fail@plt+0x189c>
   124a0:	mov	r1, #0
   124a4:	cmp	r0, #2
   124a8:	str	r1, [fp, #-56]	; 0xffffffc8
   124ac:	bne	1296c <__assert_fail@plt+0x1964>
   124b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   124b4:	mov	r8, #0
   124b8:	tst	r0, #1
   124bc:	beq	122a8 <__assert_fail@plt+0x12a0>
   124c0:	b	12ce4 <__assert_fail@plt+0x1cdc>
   124c4:	mov	r0, #118	; 0x76
   124c8:	b	126a4 <__assert_fail@plt+0x169c>
   124cc:	mov	r0, #1
   124d0:	mov	r6, #39	; 0x27
   124d4:	str	r0, [sp, #60]	; 0x3c
   124d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   124dc:	cmp	r0, #2
   124e0:	bne	126e4 <__assert_fail@plt+0x16dc>
   124e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   124e8:	tst	r0, #1
   124ec:	bne	12ce4 <__assert_fail@plt+0x1cdc>
   124f0:	ldr	r2, [sp, #56]	; 0x38
   124f4:	clz	r1, r5
   124f8:	mov	r8, #1
   124fc:	lsr	r1, r1, #5
   12500:	cmp	r2, #0
   12504:	mov	r0, r2
   12508:	movwne	r0, #1
   1250c:	orrs	r0, r0, r1
   12510:	moveq	r2, r5
   12514:	moveq	r5, r0
   12518:	cmp	r9, r5
   1251c:	str	r2, [sp, #56]	; 0x38
   12520:	movcc	r0, #39	; 0x27
   12524:	strbcc	r0, [ip, r9]
   12528:	add	r0, r9, #1
   1252c:	cmp	r0, r5
   12530:	movcc	r1, #92	; 0x5c
   12534:	strbcc	r1, [ip, r0]
   12538:	add	r0, r9, #2
   1253c:	add	r9, r9, #3
   12540:	cmp	r0, r5
   12544:	movcc	r1, #39	; 0x27
   12548:	strbcc	r1, [ip, r0]
   1254c:	mov	r0, #0
   12550:	str	r0, [fp, #-52]	; 0xffffffcc
   12554:	mov	r0, #0
   12558:	str	r0, [fp, #-56]	; 0xffffffc8
   1255c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12560:	tst	r0, #1
   12564:	beq	122b4 <__assert_fail@plt+0x12ac>
   12568:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1256c:	mov	r1, r8
   12570:	cmp	r0, #0
   12574:	mov	r0, r6
   12578:	beq	1263c <__assert_fail@plt+0x1634>
   1257c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12580:	tst	r2, #1
   12584:	bne	12ce4 <__assert_fail@plt+0x1cdc>
   12588:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1258c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12590:	subs	r2, r2, #2
   12594:	movwne	r2, #1
   12598:	orr	r2, r2, r3
   1259c:	tst	r2, #1
   125a0:	bne	125dc <__assert_fail@plt+0x15d4>
   125a4:	cmp	r9, r5
   125a8:	movcc	r2, #39	; 0x27
   125ac:	strbcc	r2, [ip, r9]
   125b0:	add	r2, r9, #1
   125b4:	cmp	r2, r5
   125b8:	movcc	r3, #36	; 0x24
   125bc:	strbcc	r3, [ip, r2]
   125c0:	add	r2, r9, #2
   125c4:	add	r9, r9, #3
   125c8:	cmp	r2, r5
   125cc:	movcc	r3, #39	; 0x27
   125d0:	strbcc	r3, [ip, r2]
   125d4:	mov	r2, #1
   125d8:	str	r2, [fp, #-52]	; 0xffffffcc
   125dc:	cmp	r9, r5
   125e0:	movcc	r2, #92	; 0x5c
   125e4:	strbcc	r2, [ip, r9]
   125e8:	add	r9, r9, #1
   125ec:	b	12684 <__assert_fail@plt+0x167c>
   125f0:	ldr	r0, [sp, #40]	; 0x28
   125f4:	cmp	r0, #1
   125f8:	bne	126f8 <__assert_fail@plt+0x16f0>
   125fc:	bl	10f0c <__ctype_b_loc@plt>
   12600:	ldr	r0, [r0]
   12604:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12608:	mov	r1, #1
   1260c:	add	r0, r0, r6, lsl #1
   12610:	ldrb	r0, [r0, #1]
   12614:	ubfx	r8, r0, #6, #1
   12618:	b	12a50 <__assert_fail@plt+0x1a48>
   1261c:	ldr	r1, [sp, #48]	; 0x30
   12620:	mov	r0, #0
   12624:	str	r0, [fp, #-56]	; 0xffffffc8
   12628:	mov	r0, #92	; 0x5c
   1262c:	cmp	r1, #0
   12630:	beq	126a4 <__assert_fail@plt+0x169c>
   12634:	mov	r6, #92	; 0x5c
   12638:	mov	r8, #0
   1263c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12640:	cmp	r0, #0
   12644:	bne	1267c <__assert_fail@plt+0x1674>
   12648:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1264c:	tst	r0, #1
   12650:	beq	1267c <__assert_fail@plt+0x1674>
   12654:	cmp	r9, r5
   12658:	movcc	r0, #39	; 0x27
   1265c:	strbcc	r0, [ip, r9]
   12660:	add	r0, r9, #1
   12664:	add	r9, r9, #2
   12668:	cmp	r0, r5
   1266c:	movcc	r1, #39	; 0x27
   12670:	strbcc	r1, [ip, r0]
   12674:	mov	r0, #0
   12678:	str	r0, [fp, #-52]	; 0xffffffcc
   1267c:	mov	r1, r8
   12680:	mov	r0, r6
   12684:	cmp	r9, r5
   12688:	and	r4, r4, r1
   1268c:	strbcc	r0, [ip, r9]
   12690:	add	r9, r9, #1
   12694:	add	sl, sl, #1
   12698:	cmn	r7, #1
   1269c:	bne	11f94 <__assert_fail@plt+0xf8c>
   126a0:	b	11fa0 <__assert_fail@plt+0xf98>
   126a4:	mov	r1, #0
   126a8:	mov	r8, #0
   126ac:	str	r1, [fp, #-56]	; 0xffffffc8
   126b0:	ldr	r1, [sp, #88]	; 0x58
   126b4:	tst	r1, #1
   126b8:	mov	r1, #0
   126bc:	beq	122a8 <__assert_fail@plt+0x12a0>
   126c0:	b	1257c <__assert_fail@plt+0x1574>
   126c4:	ldr	r0, [sp, #36]	; 0x24
   126c8:	mov	r6, #0
   126cc:	mov	r8, #0
   126d0:	cmp	r0, #0
   126d4:	mov	r0, #0
   126d8:	str	r0, [fp, #-56]	; 0xffffffc8
   126dc:	bne	12694 <__assert_fail@plt+0x168c>
   126e0:	b	122a8 <__assert_fail@plt+0x12a0>
   126e4:	mov	r8, #1
   126e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   126ec:	tst	r0, #1
   126f0:	beq	122b4 <__assert_fail@plt+0x12ac>
   126f4:	b	12568 <__assert_fail@plt+0x1560>
   126f8:	mov	r0, #0
   126fc:	cmn	r7, #1
   12700:	str	r0, [fp, #-36]	; 0xffffffdc
   12704:	str	r0, [fp, #-40]	; 0xffffffd8
   12708:	bne	1271c <__assert_fail@plt+0x1714>
   1270c:	mov	r0, lr
   12710:	bl	10f3c <strlen@plt>
   12714:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12718:	mov	r7, r0
   1271c:	ldr	r0, [sp, #44]	; 0x2c
   12720:	str	r4, [sp, #84]	; 0x54
   12724:	str	r5, [sp, #28]
   12728:	cmp	r0, #0
   1272c:	beq	12980 <__assert_fail@plt+0x1978>
   12730:	ldr	r0, [sp, #80]	; 0x50
   12734:	mov	r8, #1
   12738:	mov	r5, #0
   1273c:	add	r0, r0, sl
   12740:	str	r0, [sp, #24]
   12744:	sub	r0, fp, #40	; 0x28
   12748:	mov	r3, r0
   1274c:	b	12788 <__assert_fail@plt+0x1780>
   12750:	ldr	r5, [sp, #68]	; 0x44
   12754:	add	r5, r0, r5
   12758:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1275c:	bl	10e70 <iswprint@plt>
   12760:	cmp	r0, #0
   12764:	sub	r4, fp, #40	; 0x28
   12768:	movwne	r0, #1
   1276c:	and	r8, r8, r0
   12770:	mov	r0, r4
   12774:	bl	10e28 <mbsinit@plt>
   12778:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1277c:	mov	r3, r4
   12780:	cmp	r0, #0
   12784:	bne	12a44 <__assert_fail@plt+0x1a3c>
   12788:	str	r5, [sp, #68]	; 0x44
   1278c:	add	r5, r5, sl
   12790:	sub	r0, fp, #44	; 0x2c
   12794:	add	r1, lr, r5
   12798:	sub	r2, r7, r5
   1279c:	bl	15568 <__assert_fail@plt+0x4560>
   127a0:	cmn	r0, #2
   127a4:	beq	12a04 <__assert_fail@plt+0x19fc>
   127a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   127ac:	cmn	r0, #1
   127b0:	beq	129f8 <__assert_fail@plt+0x19f0>
   127b4:	cmp	r0, #0
   127b8:	beq	129fc <__assert_fail@plt+0x19f4>
   127bc:	cmp	r0, #2
   127c0:	bcc	12750 <__assert_fail@plt+0x1748>
   127c4:	ldr	r1, [sp, #68]	; 0x44
   127c8:	ldr	r2, [sp, #24]
   127cc:	add	r1, r2, r1
   127d0:	sub	r2, r0, #1
   127d4:	ldrb	r3, [r1]
   127d8:	sub	r3, r3, #91	; 0x5b
   127dc:	cmp	r3, #33	; 0x21
   127e0:	bls	12800 <__assert_fail@plt+0x17f8>
   127e4:	add	r1, r1, #1
   127e8:	subs	r2, r2, #1
   127ec:	beq	12750 <__assert_fail@plt+0x1748>
   127f0:	ldrb	r3, [r1]
   127f4:	sub	r3, r3, #91	; 0x5b
   127f8:	cmp	r3, #33	; 0x21
   127fc:	bhi	127e4 <__assert_fail@plt+0x17dc>
   12800:	add	r5, pc, #0
   12804:	ldr	pc, [r5, r3, lsl #2]
   12808:	andeq	r2, r1, ip, lsl sp
   1280c:	andeq	r2, r1, ip, lsl sp
   12810:	andeq	r2, r1, r4, ror #15
   12814:	andeq	r2, r1, ip, lsl sp
   12818:	andeq	r2, r1, r4, ror #15
   1281c:	andeq	r2, r1, ip, lsl sp
   12820:	andeq	r2, r1, r4, ror #15
   12824:	andeq	r2, r1, r4, ror #15
   12828:	andeq	r2, r1, r4, ror #15
   1282c:	andeq	r2, r1, r4, ror #15
   12830:	andeq	r2, r1, r4, ror #15
   12834:	andeq	r2, r1, r4, ror #15
   12838:	andeq	r2, r1, r4, ror #15
   1283c:	andeq	r2, r1, r4, ror #15
   12840:	andeq	r2, r1, r4, ror #15
   12844:	andeq	r2, r1, r4, ror #15
   12848:	andeq	r2, r1, r4, ror #15
   1284c:	andeq	r2, r1, r4, ror #15
   12850:	andeq	r2, r1, r4, ror #15
   12854:	andeq	r2, r1, r4, ror #15
   12858:	andeq	r2, r1, r4, ror #15
   1285c:	andeq	r2, r1, r4, ror #15
   12860:	andeq	r2, r1, r4, ror #15
   12864:	andeq	r2, r1, r4, ror #15
   12868:	andeq	r2, r1, r4, ror #15
   1286c:	andeq	r2, r1, r4, ror #15
   12870:	andeq	r2, r1, r4, ror #15
   12874:	andeq	r2, r1, r4, ror #15
   12878:	andeq	r2, r1, r4, ror #15
   1287c:	andeq	r2, r1, r4, ror #15
   12880:	andeq	r2, r1, r4, ror #15
   12884:	andeq	r2, r1, r4, ror #15
   12888:	andeq	r2, r1, r4, ror #15
   1288c:	andeq	r2, r1, ip, lsl sp
   12890:	mov	r9, r0
   12894:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12898:	tst	r0, #1
   1289c:	beq	122b4 <__assert_fail@plt+0x12ac>
   128a0:	b	12568 <__assert_fail@plt+0x1560>
   128a4:	mov	r0, #0
   128a8:	str	r0, [fp, #-56]	; 0xffffffc8
   128ac:	ldr	r0, [sp, #32]
   128b0:	cmp	r0, #0
   128b4:	beq	1296c <__assert_fail@plt+0x1964>
   128b8:	add	r0, sl, #2
   128bc:	mov	r1, r7
   128c0:	cmp	r0, r7
   128c4:	bcs	1296c <__assert_fail@plt+0x1964>
   128c8:	add	r1, sl, lr
   128cc:	ldrb	r1, [r1, #1]
   128d0:	cmp	r1, #63	; 0x3f
   128d4:	bne	1296c <__assert_fail@plt+0x1964>
   128d8:	ldrb	r8, [lr, r0]
   128dc:	sub	r2, r8, #33	; 0x21
   128e0:	cmp	r2, #29
   128e4:	bhi	1296c <__assert_fail@plt+0x1964>
   128e8:	mov	r1, r4
   128ec:	movw	r4, #20929	; 0x51c1
   128f0:	mov	r3, #1
   128f4:	movt	r4, #14336	; 0x3800
   128f8:	tst	r4, r3, lsl r2
   128fc:	beq	12c28 <__assert_fail@plt+0x1c20>
   12900:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12904:	tst	r2, #1
   12908:	bne	12ce4 <__assert_fail@plt+0x1cdc>
   1290c:	cmp	r9, r5
   12910:	mov	r6, r8
   12914:	mov	r4, r1
   12918:	mov	sl, r0
   1291c:	mov	r8, #0
   12920:	movcc	r2, #63	; 0x3f
   12924:	strbcc	r2, [ip, r9]
   12928:	add	r2, r9, #1
   1292c:	cmp	r2, r5
   12930:	movcc	r3, #34	; 0x22
   12934:	strbcc	r3, [ip, r2]
   12938:	add	r2, r9, #2
   1293c:	cmp	r2, r5
   12940:	movcc	r3, #34	; 0x22
   12944:	strbcc	r3, [ip, r2]
   12948:	add	r2, r9, #3
   1294c:	add	r9, r9, #4
   12950:	cmp	r2, r5
   12954:	movcc	r3, #63	; 0x3f
   12958:	strbcc	r3, [ip, r2]
   1295c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12960:	tst	r0, #1
   12964:	beq	122b4 <__assert_fail@plt+0x12ac>
   12968:	b	12568 <__assert_fail@plt+0x1560>
   1296c:	mov	r8, #0
   12970:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12974:	tst	r0, #1
   12978:	beq	122b4 <__assert_fail@plt+0x12ac>
   1297c:	b	12568 <__assert_fail@plt+0x1560>
   12980:	mov	r8, #1
   12984:	mov	r5, #0
   12988:	sub	r4, fp, #40	; 0x28
   1298c:	str	r5, [sp, #68]	; 0x44
   12990:	add	r5, r5, sl
   12994:	sub	r0, fp, #44	; 0x2c
   12998:	mov	r3, r4
   1299c:	add	r1, lr, r5
   129a0:	sub	r2, r7, r5
   129a4:	bl	15568 <__assert_fail@plt+0x4560>
   129a8:	cmn	r0, #2
   129ac:	beq	12a04 <__assert_fail@plt+0x19fc>
   129b0:	cmn	r0, #1
   129b4:	beq	129f8 <__assert_fail@plt+0x19f0>
   129b8:	ldr	r5, [sp, #68]	; 0x44
   129bc:	cmp	r0, #0
   129c0:	beq	12a40 <__assert_fail@plt+0x1a38>
   129c4:	add	r5, r0, r5
   129c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   129cc:	bl	10e70 <iswprint@plt>
   129d0:	cmp	r0, #0
   129d4:	sub	r4, fp, #40	; 0x28
   129d8:	movwne	r0, #1
   129dc:	and	r8, r8, r0
   129e0:	mov	r0, r4
   129e4:	bl	10e28 <mbsinit@plt>
   129e8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   129ec:	cmp	r0, #0
   129f0:	beq	1298c <__assert_fail@plt+0x1984>
   129f4:	b	12a44 <__assert_fail@plt+0x1a3c>
   129f8:	mov	r8, #0
   129fc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12a00:	b	12a38 <__assert_fail@plt+0x1a30>
   12a04:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12a08:	mov	r8, #0
   12a0c:	cmp	r5, r7
   12a10:	bcs	12a38 <__assert_fail@plt+0x1a30>
   12a14:	ldrb	r0, [lr, r5]
   12a18:	cmp	r0, #0
   12a1c:	beq	12a38 <__assert_fail@plt+0x1a30>
   12a20:	ldr	r0, [sp, #68]	; 0x44
   12a24:	add	r0, r0, #1
   12a28:	add	r5, r0, sl
   12a2c:	str	r0, [sp, #68]	; 0x44
   12a30:	cmp	r5, r7
   12a34:	bcc	12a14 <__assert_fail@plt+0x1a0c>
   12a38:	ldr	r5, [sp, #68]	; 0x44
   12a3c:	b	12a44 <__assert_fail@plt+0x1a3c>
   12a40:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12a44:	mov	r1, r5
   12a48:	ldr	r5, [sp, #28]
   12a4c:	ldr	r4, [sp, #84]	; 0x54
   12a50:	ldr	r0, [sp, #52]	; 0x34
   12a54:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a58:	cmp	r1, #1
   12a5c:	orr	r2, r8, r0
   12a60:	mov	r0, r1
   12a64:	bhi	12a70 <__assert_fail@plt+0x1a68>
   12a68:	tst	r2, #1
   12a6c:	bne	122a8 <__assert_fail@plt+0x12a0>
   12a70:	add	r0, r0, sl
   12a74:	str	r2, [sp, #84]	; 0x54
   12a78:	str	r0, [fp, #-56]	; 0xffffffc8
   12a7c:	mov	r0, #0
   12a80:	tst	r2, #1
   12a84:	bne	12b64 <__assert_fail@plt+0x1b5c>
   12a88:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12a8c:	tst	r1, #1
   12a90:	bne	12ce4 <__assert_fail@plt+0x1cdc>
   12a94:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12a98:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12a9c:	subs	r2, r1, #2
   12aa0:	movwne	r2, #1
   12aa4:	orr	r2, r2, r0
   12aa8:	tst	r2, #1
   12aac:	bne	12ae8 <__assert_fail@plt+0x1ae0>
   12ab0:	cmp	r9, r5
   12ab4:	add	r2, r9, #1
   12ab8:	mov	r0, #1
   12abc:	movcc	r1, #39	; 0x27
   12ac0:	str	r0, [fp, #-52]	; 0xffffffcc
   12ac4:	strbcc	r1, [ip, r9]
   12ac8:	cmp	r2, r5
   12acc:	movcc	r1, #36	; 0x24
   12ad0:	strbcc	r1, [ip, r2]
   12ad4:	add	r2, r9, #2
   12ad8:	add	r9, r9, #3
   12adc:	cmp	r2, r5
   12ae0:	movcc	r1, #39	; 0x27
   12ae4:	strbcc	r1, [ip, r2]
   12ae8:	cmp	r9, r5
   12aec:	add	r2, r9, #1
   12af0:	movcc	r1, #92	; 0x5c
   12af4:	strbcc	r1, [ip, r9]
   12af8:	cmp	r2, r5
   12afc:	bcs	12b10 <__assert_fail@plt+0x1b08>
   12b00:	uxtb	r3, r6
   12b04:	mov	r1, #48	; 0x30
   12b08:	orr	r3, r1, r3, lsr #6
   12b0c:	strb	r3, [ip, r2]
   12b10:	add	r2, r9, #2
   12b14:	add	r9, r9, #3
   12b18:	cmp	r2, r5
   12b1c:	lsrcc	r3, r6, #3
   12b20:	movcc	r1, #6
   12b24:	bficc	r3, r1, #3, #29
   12b28:	mov	r1, #6
   12b2c:	bfi	r6, r1, #3, #29
   12b30:	strbcc	r3, [ip, r2]
   12b34:	mov	r2, #1
   12b38:	b	12b98 <__assert_fail@plt+0x1b90>
   12b3c:	ldr	r1, [sp, #80]	; 0x50
   12b40:	cmp	r9, r2
   12b44:	mov	r5, r2
   12b48:	ldr	r2, [sp, #84]	; 0x54
   12b4c:	strbcc	r6, [ip, r9]
   12b50:	add	r9, r9, #1
   12b54:	ldrb	r6, [r1, sl]
   12b58:	mov	sl, r3
   12b5c:	tst	r2, #1
   12b60:	beq	12a88 <__assert_fail@plt+0x1a80>
   12b64:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12b68:	tst	r1, #1
   12b6c:	beq	12b8c <__assert_fail@plt+0x1b84>
   12b70:	cmp	r9, r5
   12b74:	mov	r2, r0
   12b78:	movcc	r1, #92	; 0x5c
   12b7c:	strbcc	r1, [ip, r9]
   12b80:	add	r9, r9, #1
   12b84:	mov	r1, #0
   12b88:	b	12b94 <__assert_fail@plt+0x1b8c>
   12b8c:	mov	r1, #0
   12b90:	mov	r2, r0
   12b94:	str	r1, [fp, #-48]	; 0xffffffd0
   12b98:	mov	r0, r2
   12b9c:	and	r1, r2, #1
   12ba0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12ba4:	add	r3, sl, #1
   12ba8:	cmp	r2, r3
   12bac:	bls	12c0c <__assert_fail@plt+0x1c04>
   12bb0:	mov	r2, r5
   12bb4:	ldr	r5, [fp, #-52]	; 0xffffffcc
   12bb8:	cmp	r1, #0
   12bbc:	movwne	r1, #1
   12bc0:	mvn	r5, r5
   12bc4:	orr	r5, r5, r1
   12bc8:	tst	r5, #1
   12bcc:	bne	12b3c <__assert_fail@plt+0x1b34>
   12bd0:	cmp	r9, r2
   12bd4:	movcc	r5, r4
   12bd8:	movcc	r4, #39	; 0x27
   12bdc:	strbcc	r4, [ip, r9]
   12be0:	movcc	r4, r5
   12be4:	add	r5, r9, #1
   12be8:	add	r9, r9, #2
   12bec:	cmp	r5, r2
   12bf0:	movcc	r1, r4
   12bf4:	movcc	r4, #39	; 0x27
   12bf8:	strbcc	r4, [ip, r5]
   12bfc:	movcc	r4, r1
   12c00:	mov	r1, #0
   12c04:	str	r1, [fp, #-52]	; 0xffffffcc
   12c08:	b	12b3c <__assert_fail@plt+0x1b34>
   12c0c:	cmp	r1, #0
   12c10:	movwne	r1, #1
   12c14:	str	r1, [fp, #-56]	; 0xffffffc8
   12c18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12c1c:	cmp	r0, #0
   12c20:	beq	12648 <__assert_fail@plt+0x1640>
   12c24:	b	1267c <__assert_fail@plt+0x1674>
   12c28:	mov	r8, #0
   12c2c:	mov	r4, r1
   12c30:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c34:	tst	r0, #1
   12c38:	beq	122b4 <__assert_fail@plt+0x12ac>
   12c3c:	b	12568 <__assert_fail@plt+0x1560>
   12c40:	mov	r7, sl
   12c44:	b	12c4c <__assert_fail@plt+0x1c44>
   12c48:	mvn	r7, #0
   12c4c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12c50:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12c54:	ldr	r2, [sp, #88]	; 0x58
   12c58:	eor	r0, r1, #2
   12c5c:	orr	r0, r0, r9
   12c60:	clz	r0, r0
   12c64:	lsr	r0, r0, #5
   12c68:	tst	r3, r0
   12c6c:	bne	12ce4 <__assert_fail@plt+0x1cdc>
   12c70:	subs	r0, r1, #2
   12c74:	movwne	r0, #1
   12c78:	orr	r0, r3, r0
   12c7c:	tst	r0, #1
   12c80:	ldreq	r0, [sp, #60]	; 0x3c
   12c84:	eoreq	r0, r0, #1
   12c88:	tsteq	r0, #1
   12c8c:	bne	12dc0 <__assert_fail@plt+0x1db8>
   12c90:	tst	r4, #1
   12c94:	bne	12d84 <__assert_fail@plt+0x1d7c>
   12c98:	ldr	r6, [sp, #56]	; 0x38
   12c9c:	mov	r8, #0
   12ca0:	cmp	r6, #0
   12ca4:	beq	12dbc <__assert_fail@plt+0x1db4>
   12ca8:	mov	r1, #0
   12cac:	mov	r4, #2
   12cb0:	cmp	r5, #0
   12cb4:	mov	r0, r2
   12cb8:	mov	r3, #0
   12cbc:	str	r1, [sp, #84]	; 0x54
   12cc0:	beq	11b08 <__assert_fail@plt+0xb00>
   12cc4:	b	12dc0 <__assert_fail@plt+0x1db8>
   12cc8:	movw	r0, #24013	; 0x5dcd
   12ccc:	movt	r0, #1
   12cd0:	str	r0, [sp, #76]	; 0x4c
   12cd4:	mov	r9, #0
   12cd8:	tst	r8, #1
   12cdc:	beq	11da0 <__assert_fail@plt+0xd98>
   12ce0:	b	11ee0 <__assert_fail@plt+0xed8>
   12ce4:	ldr	r1, [sp, #88]	; 0x58
   12ce8:	mov	r0, #2
   12cec:	tst	r1, #1
   12cf0:	movwne	r0, #4
   12cf4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12cf8:	ldr	r1, [fp, #12]
   12cfc:	cmp	r2, #2
   12d00:	moveq	r2, r0
   12d04:	b	12d3c <__assert_fail@plt+0x1d34>
   12d08:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d0c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12d10:	ldr	r1, [fp, #12]
   12d14:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12d18:	b	12d3c <__assert_fail@plt+0x1d34>
   12d1c:	ldr	r1, [sp, #88]	; 0x58
   12d20:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12d24:	ldr	r5, [sp, #28]
   12d28:	mov	r0, #2
   12d2c:	tst	r1, #1
   12d30:	ldr	r1, [fp, #12]
   12d34:	movwne	r0, #4
   12d38:	mov	r2, r0
   12d3c:	mov	r0, #0
   12d40:	bic	r1, r1, #2
   12d44:	str	r2, [sp]
   12d48:	mov	r2, lr
   12d4c:	str	r0, [sp, #8]
   12d50:	ldr	r0, [sp, #72]	; 0x48
   12d54:	str	r1, [sp, #4]
   12d58:	mov	r1, r5
   12d5c:	str	r0, [sp, #12]
   12d60:	ldr	r0, [sp, #76]	; 0x4c
   12d64:	str	r0, [sp, #16]
   12d68:	mov	r0, ip
   12d6c:	mov	r3, r7
   12d70:	bl	11a7c <__assert_fail@plt+0xa74>
   12d74:	mov	r9, r0
   12d78:	mov	r0, r9
   12d7c:	sub	sp, fp, #28
   12d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d84:	mov	r0, #5
   12d88:	ldr	r1, [sp, #56]	; 0x38
   12d8c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12d90:	str	r0, [sp]
   12d94:	ldr	r0, [fp, #12]
   12d98:	str	r0, [sp, #4]
   12d9c:	ldr	r0, [fp, #16]
   12da0:	str	r0, [sp, #8]
   12da4:	ldr	r0, [sp, #72]	; 0x48
   12da8:	str	r0, [sp, #12]
   12dac:	ldr	r0, [sp, #76]	; 0x4c
   12db0:	str	r0, [sp, #16]
   12db4:	ldr	r0, [fp, #-84]	; 0xffffffac
   12db8:	b	12d6c <__assert_fail@plt+0x1d64>
   12dbc:	mov	r3, #0
   12dc0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12dc4:	cmp	r1, #0
   12dc8:	beq	12e04 <__assert_fail@plt+0x1dfc>
   12dcc:	ldr	r2, [fp, #-84]	; 0xffffffac
   12dd0:	tst	r3, #1
   12dd4:	bne	12e08 <__assert_fail@plt+0x1e00>
   12dd8:	ldrb	r0, [r1]
   12ddc:	cmp	r0, #0
   12de0:	beq	12e08 <__assert_fail@plt+0x1e00>
   12de4:	add	r1, r1, #1
   12de8:	cmp	r9, r5
   12dec:	strbcc	r0, [r2, r9]
   12df0:	add	r9, r9, #1
   12df4:	ldrb	r0, [r1], #1
   12df8:	cmp	r0, #0
   12dfc:	bne	12de8 <__assert_fail@plt+0x1de0>
   12e00:	b	12e08 <__assert_fail@plt+0x1e00>
   12e04:	ldr	r2, [fp, #-84]	; 0xffffffac
   12e08:	cmp	r9, r5
   12e0c:	movcc	r0, #0
   12e10:	strbcc	r0, [r2, r9]
   12e14:	mov	r0, r9
   12e18:	sub	sp, fp, #28
   12e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e20:	mov	r0, #4
   12e24:	b	12cf4 <__assert_fail@plt+0x1cec>
   12e28:	bl	10ffc <abort@plt>
   12e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e30:	add	fp, sp, #28
   12e34:	sub	sp, sp, #28
   12e38:	movw	r5, #29016	; 0x7158
   12e3c:	cmp	r2, #0
   12e40:	mov	r4, r1
   12e44:	mov	r7, r0
   12e48:	str	r0, [sp, #20]
   12e4c:	movt	r5, #2
   12e50:	movne	r5, r2
   12e54:	bl	10f54 <__errno_location@plt>
   12e58:	mov	sl, r0
   12e5c:	ldr	r2, [r5, #40]	; 0x28
   12e60:	ldr	r3, [r5, #44]	; 0x2c
   12e64:	ldm	r5, {r0, r1}
   12e68:	orr	r8, r1, #1
   12e6c:	add	r9, r5, #8
   12e70:	mov	r1, #0
   12e74:	ldr	r6, [sl]
   12e78:	stm	sp, {r0, r8, r9}
   12e7c:	mov	r0, #0
   12e80:	str	r2, [sp, #12]
   12e84:	str	r3, [sp, #16]
   12e88:	mov	r2, r7
   12e8c:	mov	r3, r4
   12e90:	str	r6, [sp, #24]
   12e94:	mov	r6, r4
   12e98:	bl	11a7c <__assert_fail@plt+0xa74>
   12e9c:	add	r7, r0, #1
   12ea0:	mov	r0, r7
   12ea4:	bl	13f0c <__assert_fail@plt+0x2f04>
   12ea8:	mov	r4, r0
   12eac:	ldr	r0, [r5]
   12eb0:	ldr	r2, [r5, #44]	; 0x2c
   12eb4:	ldr	r1, [r5, #40]	; 0x28
   12eb8:	mov	r3, r6
   12ebc:	stm	sp, {r0, r8, r9}
   12ec0:	str	r2, [sp, #16]
   12ec4:	ldr	r2, [sp, #20]
   12ec8:	str	r1, [sp, #12]
   12ecc:	mov	r0, r4
   12ed0:	mov	r1, r7
   12ed4:	bl	11a7c <__assert_fail@plt+0xa74>
   12ed8:	ldr	r0, [sp, #24]
   12edc:	str	r0, [sl]
   12ee0:	mov	r0, r4
   12ee4:	sub	sp, fp, #28
   12ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ef0:	add	fp, sp, #28
   12ef4:	sub	sp, sp, #36	; 0x24
   12ef8:	movw	r8, #29016	; 0x7158
   12efc:	cmp	r3, #0
   12f00:	mov	r4, r2
   12f04:	str	r2, [sp, #24]
   12f08:	mov	r5, r1
   12f0c:	mov	r6, r0
   12f10:	str	r0, [sp, #20]
   12f14:	movt	r8, #2
   12f18:	movne	r8, r3
   12f1c:	bl	10f54 <__errno_location@plt>
   12f20:	str	r0, [sp, #28]
   12f24:	ldr	r1, [r8, #40]	; 0x28
   12f28:	ldr	r2, [r8, #44]	; 0x2c
   12f2c:	ldr	r7, [r0]
   12f30:	cmp	r4, #0
   12f34:	add	sl, r8, #8
   12f38:	mov	r0, #0
   12f3c:	ldm	r8, {r3, r9}
   12f40:	orreq	r9, r9, #1
   12f44:	stm	sp, {r3, r9, sl}
   12f48:	str	r1, [sp, #12]
   12f4c:	str	r2, [sp, #16]
   12f50:	mov	r1, #0
   12f54:	mov	r2, r6
   12f58:	mov	r3, r5
   12f5c:	str	r7, [sp, #32]
   12f60:	mov	r7, r5
   12f64:	bl	11a7c <__assert_fail@plt+0xa74>
   12f68:	add	r4, r0, #1
   12f6c:	mov	r5, r0
   12f70:	mov	r0, r4
   12f74:	bl	13f0c <__assert_fail@plt+0x2f04>
   12f78:	mov	r6, r0
   12f7c:	ldr	r0, [r8]
   12f80:	ldr	r2, [r8, #44]	; 0x2c
   12f84:	ldr	r1, [r8, #40]	; 0x28
   12f88:	mov	r3, r7
   12f8c:	stm	sp, {r0, r9, sl}
   12f90:	str	r2, [sp, #16]
   12f94:	ldr	r2, [sp, #20]
   12f98:	str	r1, [sp, #12]
   12f9c:	mov	r0, r6
   12fa0:	mov	r1, r4
   12fa4:	bl	11a7c <__assert_fail@plt+0xa74>
   12fa8:	ldr	r0, [sp, #24]
   12fac:	ldr	r1, [sp, #32]
   12fb0:	ldr	r2, [sp, #28]
   12fb4:	cmp	r0, #0
   12fb8:	str	r1, [r2]
   12fbc:	strne	r5, [r0]
   12fc0:	mov	r0, r6
   12fc4:	sub	sp, fp, #28
   12fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fcc:	push	{r4, r5, r6, r7, fp, lr}
   12fd0:	add	fp, sp, #16
   12fd4:	movw	r4, #28952	; 0x7118
   12fd8:	movt	r4, #2
   12fdc:	ldrd	r6, [r4]
   12fe0:	cmp	r7, #2
   12fe4:	blt	13010 <__assert_fail@plt+0x2008>
   12fe8:	add	r5, r6, #12
   12fec:	mov	r7, #0
   12ff0:	ldr	r0, [r5, r7, lsl #3]
   12ff4:	bl	15460 <__assert_fail@plt+0x4458>
   12ff8:	ldr	r1, [r4, #4]
   12ffc:	add	r2, r7, #2
   13000:	add	r0, r7, #1
   13004:	mov	r7, r0
   13008:	cmp	r2, r1
   1300c:	blt	12ff0 <__assert_fail@plt+0x1fe8>
   13010:	ldr	r0, [r6, #4]
   13014:	movw	r5, #29064	; 0x7188
   13018:	movt	r5, #2
   1301c:	cmp	r0, r5
   13020:	beq	13034 <__assert_fail@plt+0x202c>
   13024:	bl	15460 <__assert_fail@plt+0x4458>
   13028:	mov	r0, #256	; 0x100
   1302c:	str	r0, [r4, #8]
   13030:	str	r5, [r4, #12]
   13034:	add	r5, r4, #8
   13038:	cmp	r6, r5
   1303c:	beq	1304c <__assert_fail@plt+0x2044>
   13040:	mov	r0, r6
   13044:	bl	15460 <__assert_fail@plt+0x4458>
   13048:	str	r5, [r4]
   1304c:	mov	r0, #1
   13050:	str	r0, [r4, #4]
   13054:	pop	{r4, r5, r6, r7, fp, pc}
   13058:	movw	r3, #29016	; 0x7158
   1305c:	mvn	r2, #0
   13060:	movt	r3, #2
   13064:	b	13068 <__assert_fail@plt+0x2060>
   13068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1306c:	add	fp, sp, #28
   13070:	sub	sp, sp, #44	; 0x2c
   13074:	mov	r7, r3
   13078:	str	r2, [sp, #36]	; 0x24
   1307c:	str	r1, [sp, #32]
   13080:	mov	r5, r0
   13084:	bl	10f54 <__errno_location@plt>
   13088:	cmp	r5, #0
   1308c:	bmi	131f4 <__assert_fail@plt+0x21ec>
   13090:	cmn	r5, #-2147483647	; 0x80000001
   13094:	beq	131f4 <__assert_fail@plt+0x21ec>
   13098:	movw	r8, #28952	; 0x7118
   1309c:	mov	r4, r0
   130a0:	ldr	r0, [r0]
   130a4:	movt	r8, #2
   130a8:	str	r4, [sp, #28]
   130ac:	ldr	r1, [r8, #4]
   130b0:	ldr	r6, [r8]
   130b4:	str	r0, [sp, #24]
   130b8:	cmp	r1, r5
   130bc:	ble	130c8 <__assert_fail@plt+0x20c0>
   130c0:	mov	sl, r6
   130c4:	b	13130 <__assert_fail@plt+0x2128>
   130c8:	mov	r0, #8
   130cc:	add	r9, r8, #8
   130d0:	str	r1, [fp, #-32]	; 0xffffffe0
   130d4:	sub	r1, r5, r1
   130d8:	mvn	r3, #-2147483648	; 0x80000000
   130dc:	str	r0, [sp]
   130e0:	subs	r0, r6, r9
   130e4:	add	r2, r1, #1
   130e8:	sub	r1, fp, #32
   130ec:	movne	r0, r6
   130f0:	bl	1410c <__assert_fail@plt+0x3104>
   130f4:	mov	sl, r0
   130f8:	cmp	r6, r9
   130fc:	str	r0, [r8]
   13100:	bne	1310c <__assert_fail@plt+0x2104>
   13104:	ldrd	r0, [r8, #8]
   13108:	stm	sl, {r0, r1}
   1310c:	ldr	r1, [r8, #4]
   13110:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13114:	add	r0, sl, r1, lsl #3
   13118:	sub	r1, r2, r1
   1311c:	lsl	r2, r1, #3
   13120:	mov	r1, #0
   13124:	bl	10f6c <memset@plt>
   13128:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1312c:	str	r0, [r8, #4]
   13130:	mov	r9, sl
   13134:	ldm	r7, {r0, r1}
   13138:	orr	r8, r1, #1
   1313c:	add	r1, r7, #8
   13140:	ldr	r2, [r7, #40]	; 0x28
   13144:	ldr	r3, [r7, #44]	; 0x2c
   13148:	ldr	r6, [r9, r5, lsl #3]!
   1314c:	str	r1, [sp, #20]
   13150:	ldr	r4, [r9, #4]!
   13154:	stm	sp, {r0, r8}
   13158:	add	r0, sp, #8
   1315c:	stm	r0, {r1, r2, r3}
   13160:	ldr	r2, [sp, #32]
   13164:	ldr	r3, [sp, #36]	; 0x24
   13168:	mov	r1, r6
   1316c:	mov	r0, r4
   13170:	bl	11a7c <__assert_fail@plt+0xa74>
   13174:	cmp	r6, r0
   13178:	bhi	131dc <__assert_fail@plt+0x21d4>
   1317c:	add	r6, r0, #1
   13180:	movw	r0, #29064	; 0x7188
   13184:	movt	r0, #2
   13188:	str	r6, [sl, r5, lsl #3]
   1318c:	cmp	r4, r0
   13190:	beq	1319c <__assert_fail@plt+0x2194>
   13194:	mov	r0, r4
   13198:	bl	15460 <__assert_fail@plt+0x4458>
   1319c:	mov	r0, r6
   131a0:	bl	13f0c <__assert_fail@plt+0x2f04>
   131a4:	str	r0, [r9]
   131a8:	mov	r4, r0
   131ac:	add	r3, sp, #8
   131b0:	ldr	r0, [r7]
   131b4:	ldr	r1, [r7, #40]	; 0x28
   131b8:	ldr	r2, [r7, #44]	; 0x2c
   131bc:	stm	sp, {r0, r8}
   131c0:	ldr	r0, [sp, #20]
   131c4:	stm	r3, {r0, r1, r2}
   131c8:	ldr	r2, [sp, #32]
   131cc:	ldr	r3, [sp, #36]	; 0x24
   131d0:	mov	r0, r4
   131d4:	mov	r1, r6
   131d8:	bl	11a7c <__assert_fail@plt+0xa74>
   131dc:	ldr	r1, [sp, #24]
   131e0:	ldr	r0, [sp, #28]
   131e4:	str	r1, [r0]
   131e8:	mov	r0, r4
   131ec:	sub	sp, fp, #28
   131f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131f4:	bl	10ffc <abort@plt>
   131f8:	movw	r3, #29016	; 0x7158
   131fc:	movt	r3, #2
   13200:	b	13068 <__assert_fail@plt+0x2060>
   13204:	movw	r3, #29016	; 0x7158
   13208:	mov	r1, r0
   1320c:	mov	r0, #0
   13210:	mvn	r2, #0
   13214:	movt	r3, #2
   13218:	b	13068 <__assert_fail@plt+0x2060>
   1321c:	movw	r3, #29016	; 0x7158
   13220:	mov	r2, r1
   13224:	mov	r1, r0
   13228:	mov	r0, #0
   1322c:	movt	r3, #2
   13230:	b	13068 <__assert_fail@plt+0x2060>
   13234:	push	{fp, lr}
   13238:	mov	fp, sp
   1323c:	sub	sp, sp, #48	; 0x30
   13240:	vmov.i32	q8, #0	; 0x00000000
   13244:	mov	ip, #32
   13248:	mov	r3, sp
   1324c:	mov	lr, r2
   13250:	cmp	r1, #10
   13254:	add	r2, r3, #16
   13258:	vst1.64	{d16-d17}, [r3], ip
   1325c:	vst1.64	{d16-d17}, [r2]
   13260:	vst1.64	{d16-d17}, [r3]
   13264:	beq	13284 <__assert_fail@plt+0x227c>
   13268:	str	r1, [sp]
   1326c:	mov	r3, sp
   13270:	mov	r1, lr
   13274:	mvn	r2, #0
   13278:	bl	13068 <__assert_fail@plt+0x2060>
   1327c:	mov	sp, fp
   13280:	pop	{fp, pc}
   13284:	bl	10ffc <abort@plt>
   13288:	push	{r4, sl, fp, lr}
   1328c:	add	fp, sp, #8
   13290:	sub	sp, sp, #48	; 0x30
   13294:	vmov.i32	q8, #0	; 0x00000000
   13298:	mov	ip, r3
   1329c:	mov	r3, sp
   132a0:	mov	lr, #32
   132a4:	cmp	r1, #10
   132a8:	add	r4, r3, #16
   132ac:	vst1.64	{d16-d17}, [r3], lr
   132b0:	vst1.64	{d16-d17}, [r4]
   132b4:	vst1.64	{d16-d17}, [r3]
   132b8:	beq	132d8 <__assert_fail@plt+0x22d0>
   132bc:	str	r1, [sp]
   132c0:	mov	r1, r2
   132c4:	mov	r3, sp
   132c8:	mov	r2, ip
   132cc:	bl	13068 <__assert_fail@plt+0x2060>
   132d0:	sub	sp, fp, #8
   132d4:	pop	{r4, sl, fp, pc}
   132d8:	bl	10ffc <abort@plt>
   132dc:	push	{fp, lr}
   132e0:	mov	fp, sp
   132e4:	sub	sp, sp, #48	; 0x30
   132e8:	vmov.i32	q8, #0	; 0x00000000
   132ec:	mov	r3, sp
   132f0:	mov	ip, #32
   132f4:	cmp	r0, #10
   132f8:	add	r2, r3, #16
   132fc:	vst1.64	{d16-d17}, [r3], ip
   13300:	vst1.64	{d16-d17}, [r2]
   13304:	vst1.64	{d16-d17}, [r3]
   13308:	beq	13328 <__assert_fail@plt+0x2320>
   1330c:	str	r0, [sp]
   13310:	mov	r3, sp
   13314:	mov	r0, #0
   13318:	mvn	r2, #0
   1331c:	bl	13068 <__assert_fail@plt+0x2060>
   13320:	mov	sp, fp
   13324:	pop	{fp, pc}
   13328:	bl	10ffc <abort@plt>
   1332c:	push	{fp, lr}
   13330:	mov	fp, sp
   13334:	sub	sp, sp, #48	; 0x30
   13338:	vmov.i32	q8, #0	; 0x00000000
   1333c:	mov	r3, sp
   13340:	mov	ip, #32
   13344:	cmp	r0, #10
   13348:	add	lr, r3, #16
   1334c:	vst1.64	{d16-d17}, [r3], ip
   13350:	vst1.64	{d16-d17}, [lr]
   13354:	vst1.64	{d16-d17}, [r3]
   13358:	beq	13374 <__assert_fail@plt+0x236c>
   1335c:	str	r0, [sp]
   13360:	mov	r3, sp
   13364:	mov	r0, #0
   13368:	bl	13068 <__assert_fail@plt+0x2060>
   1336c:	mov	sp, fp
   13370:	pop	{fp, pc}
   13374:	bl	10ffc <abort@plt>
   13378:	push	{r4, sl, fp, lr}
   1337c:	add	fp, sp, #8
   13380:	sub	sp, sp, #48	; 0x30
   13384:	mov	lr, r0
   13388:	movw	r0, #29016	; 0x7158
   1338c:	mov	ip, r1
   13390:	mov	r1, #32
   13394:	mov	r4, #1
   13398:	movt	r0, #2
   1339c:	add	r3, r0, #16
   133a0:	vld1.64	{d16-d17}, [r0], r1
   133a4:	vld1.64	{d20-d21}, [r0]
   133a8:	vld1.64	{d18-d19}, [r3]
   133ac:	mov	r3, sp
   133b0:	add	r0, r3, #32
   133b4:	add	r1, r3, #16
   133b8:	vst1.64	{d20-d21}, [r0]
   133bc:	mov	r0, #28
   133c0:	vst1.64	{d18-d19}, [r1]
   133c4:	mov	r1, r3
   133c8:	and	r0, r0, r2, lsr #3
   133cc:	and	r2, r2, #31
   133d0:	vst1.64	{d16-d17}, [r1], r0
   133d4:	ldr	r0, [r1, #8]
   133d8:	bic	r4, r4, r0, lsr r2
   133dc:	eor	r0, r0, r4, lsl r2
   133e0:	mov	r2, ip
   133e4:	str	r0, [r1, #8]
   133e8:	mov	r0, #0
   133ec:	mov	r1, lr
   133f0:	bl	13068 <__assert_fail@plt+0x2060>
   133f4:	sub	sp, fp, #8
   133f8:	pop	{r4, sl, fp, pc}
   133fc:	push	{fp, lr}
   13400:	mov	fp, sp
   13404:	sub	sp, sp, #48	; 0x30
   13408:	mov	ip, r0
   1340c:	movw	r0, #29016	; 0x7158
   13410:	mov	r2, #32
   13414:	movt	r0, #2
   13418:	add	r3, r0, #16
   1341c:	vld1.64	{d16-d17}, [r0], r2
   13420:	vld1.64	{d20-d21}, [r0]
   13424:	vld1.64	{d18-d19}, [r3]
   13428:	mov	r3, sp
   1342c:	add	r0, r3, #32
   13430:	add	r2, r3, #16
   13434:	vst1.64	{d20-d21}, [r0]
   13438:	mov	r0, #28
   1343c:	vst1.64	{d18-d19}, [r2]
   13440:	mov	r2, r3
   13444:	and	r0, r0, r1, lsr #3
   13448:	and	r1, r1, #31
   1344c:	vst1.64	{d16-d17}, [r2], r0
   13450:	mov	r0, #1
   13454:	ldr	lr, [r2, #8]
   13458:	bic	r0, r0, lr, lsr r1
   1345c:	eor	r0, lr, r0, lsl r1
   13460:	mov	r1, ip
   13464:	str	r0, [r2, #8]
   13468:	mov	r0, #0
   1346c:	mvn	r2, #0
   13470:	bl	13068 <__assert_fail@plt+0x2060>
   13474:	mov	sp, fp
   13478:	pop	{fp, pc}
   1347c:	push	{fp, lr}
   13480:	mov	fp, sp
   13484:	sub	sp, sp, #48	; 0x30
   13488:	mov	r1, r0
   1348c:	movw	r0, #29016	; 0x7158
   13490:	mov	r3, #32
   13494:	movt	r0, #2
   13498:	add	r2, r0, #16
   1349c:	vld1.64	{d16-d17}, [r0], r3
   134a0:	mov	r3, sp
   134a4:	vld1.64	{d18-d19}, [r2]
   134a8:	vld1.64	{d20-d21}, [r0]
   134ac:	add	r2, r3, #16
   134b0:	add	r0, r3, #32
   134b4:	vst1.64	{d18-d19}, [r2]
   134b8:	vst1.64	{d20-d21}, [r0]
   134bc:	mov	r0, #12
   134c0:	mov	r2, r3
   134c4:	vst1.64	{d16-d17}, [r2], r0
   134c8:	ldr	r0, [r2]
   134cc:	orr	r0, r0, #67108864	; 0x4000000
   134d0:	str	r0, [r2]
   134d4:	mov	r0, #0
   134d8:	mvn	r2, #0
   134dc:	bl	13068 <__assert_fail@plt+0x2060>
   134e0:	mov	sp, fp
   134e4:	pop	{fp, pc}
   134e8:	push	{fp, lr}
   134ec:	mov	fp, sp
   134f0:	sub	sp, sp, #48	; 0x30
   134f4:	mov	ip, r1
   134f8:	mov	r1, r0
   134fc:	movw	r0, #29016	; 0x7158
   13500:	mov	r2, #32
   13504:	movt	r0, #2
   13508:	add	r3, r0, #16
   1350c:	vld1.64	{d16-d17}, [r0], r2
   13510:	vld1.64	{d18-d19}, [r3]
   13514:	vld1.64	{d20-d21}, [r0]
   13518:	mov	r3, sp
   1351c:	add	r2, r3, #16
   13520:	add	r0, r3, #32
   13524:	vst1.64	{d18-d19}, [r2]
   13528:	vst1.64	{d20-d21}, [r0]
   1352c:	mov	r0, #12
   13530:	mov	r2, r3
   13534:	vst1.64	{d16-d17}, [r2], r0
   13538:	ldr	r0, [r2]
   1353c:	orr	r0, r0, #67108864	; 0x4000000
   13540:	str	r0, [r2]
   13544:	mov	r0, #0
   13548:	mov	r2, ip
   1354c:	bl	13068 <__assert_fail@plt+0x2060>
   13550:	mov	sp, fp
   13554:	pop	{fp, pc}
   13558:	push	{r4, sl, fp, lr}
   1355c:	add	fp, sp, #8
   13560:	sub	sp, sp, #96	; 0x60
   13564:	vmov.i32	q8, #0	; 0x00000000
   13568:	mov	ip, r2
   1356c:	mov	r2, sp
   13570:	mov	r4, #28
   13574:	cmp	r1, #10
   13578:	mov	r3, r2
   1357c:	add	lr, r2, #16
   13580:	vst1.64	{d16-d17}, [r3], r4
   13584:	vst1.64	{d16-d17}, [lr]
   13588:	vst1.32	{d16-d17}, [r3]
   1358c:	beq	135dc <__assert_fail@plt+0x25d4>
   13590:	vld1.64	{d16-d17}, [r2], r4
   13594:	vld1.64	{d18-d19}, [lr]
   13598:	add	r3, sp, #48	; 0x30
   1359c:	vld1.32	{d20-d21}, [r2]
   135a0:	add	r2, r3, #20
   135a4:	add	r4, r3, #4
   135a8:	vst1.32	{d18-d19}, [r2]
   135ac:	add	r2, r3, #32
   135b0:	vst1.32	{d16-d17}, [r4]
   135b4:	vst1.32	{d20-d21}, [r2]
   135b8:	str	r1, [sp, #48]	; 0x30
   135bc:	mvn	r2, #0
   135c0:	ldr	r1, [sp, #60]	; 0x3c
   135c4:	orr	r1, r1, #67108864	; 0x4000000
   135c8:	str	r1, [sp, #60]	; 0x3c
   135cc:	mov	r1, ip
   135d0:	bl	13068 <__assert_fail@plt+0x2060>
   135d4:	sub	sp, fp, #8
   135d8:	pop	{r4, sl, fp, pc}
   135dc:	bl	10ffc <abort@plt>
   135e0:	push	{r4, r5, r6, sl, fp, lr}
   135e4:	add	fp, sp, #16
   135e8:	sub	sp, sp, #48	; 0x30
   135ec:	mov	ip, r3
   135f0:	movw	r3, #29016	; 0x7158
   135f4:	mov	r6, #32
   135f8:	cmp	r1, #0
   135fc:	mov	r4, sp
   13600:	movt	r3, #2
   13604:	cmpne	r2, #0
   13608:	add	r5, r4, #16
   1360c:	add	lr, r3, #16
   13610:	vld1.64	{d16-d17}, [r3], r6
   13614:	vld1.64	{d18-d19}, [lr]
   13618:	vld1.64	{d20-d21}, [r3]
   1361c:	mov	r3, #10
   13620:	vst1.64	{d16-d17}, [r4], r6
   13624:	vst1.64	{d18-d19}, [r5]
   13628:	vst1.64	{d20-d21}, [r4]
   1362c:	str	r3, [sp]
   13630:	bne	13638 <__assert_fail@plt+0x2630>
   13634:	bl	10ffc <abort@plt>
   13638:	str	r2, [sp, #44]	; 0x2c
   1363c:	str	r1, [sp, #40]	; 0x28
   13640:	mov	r3, sp
   13644:	mov	r1, ip
   13648:	mvn	r2, #0
   1364c:	bl	13068 <__assert_fail@plt+0x2060>
   13650:	sub	sp, fp, #16
   13654:	pop	{r4, r5, r6, sl, fp, pc}
   13658:	push	{r4, r5, r6, sl, fp, lr}
   1365c:	add	fp, sp, #16
   13660:	sub	sp, sp, #48	; 0x30
   13664:	mov	lr, r3
   13668:	movw	r3, #29016	; 0x7158
   1366c:	mov	r6, #32
   13670:	cmp	r1, #0
   13674:	mov	r4, sp
   13678:	movt	r3, #2
   1367c:	cmpne	r2, #0
   13680:	add	r5, r4, #16
   13684:	add	ip, r3, #16
   13688:	vld1.64	{d16-d17}, [r3], r6
   1368c:	vld1.64	{d18-d19}, [ip]
   13690:	vld1.64	{d20-d21}, [r3]
   13694:	mov	r3, #10
   13698:	vst1.64	{d16-d17}, [r4], r6
   1369c:	vst1.64	{d18-d19}, [r5]
   136a0:	vst1.64	{d20-d21}, [r4]
   136a4:	str	r3, [sp]
   136a8:	bne	136b0 <__assert_fail@plt+0x26a8>
   136ac:	bl	10ffc <abort@plt>
   136b0:	ldr	ip, [fp, #8]
   136b4:	str	r2, [sp, #44]	; 0x2c
   136b8:	str	r1, [sp, #40]	; 0x28
   136bc:	mov	r3, sp
   136c0:	mov	r1, lr
   136c4:	mov	r2, ip
   136c8:	bl	13068 <__assert_fail@plt+0x2060>
   136cc:	sub	sp, fp, #16
   136d0:	pop	{r4, r5, r6, sl, fp, pc}
   136d4:	push	{r4, sl, fp, lr}
   136d8:	add	fp, sp, #8
   136dc:	sub	sp, sp, #48	; 0x30
   136e0:	movw	r3, #29016	; 0x7158
   136e4:	mov	lr, #32
   136e8:	mov	ip, r2
   136ec:	cmp	r0, #0
   136f0:	movt	r3, #2
   136f4:	cmpne	r1, #0
   136f8:	add	r2, r3, #16
   136fc:	vld1.64	{d16-d17}, [r3], lr
   13700:	vld1.64	{d20-d21}, [r3]
   13704:	vld1.64	{d18-d19}, [r2]
   13708:	mov	r2, sp
   1370c:	add	r4, r2, #16
   13710:	vst1.64	{d16-d17}, [r2], lr
   13714:	vst1.64	{d20-d21}, [r2]
   13718:	mov	r2, #10
   1371c:	vst1.64	{d18-d19}, [r4]
   13720:	str	r2, [sp]
   13724:	bne	1372c <__assert_fail@plt+0x2724>
   13728:	bl	10ffc <abort@plt>
   1372c:	str	r1, [sp, #44]	; 0x2c
   13730:	str	r0, [sp, #40]	; 0x28
   13734:	mov	r3, sp
   13738:	mov	r0, #0
   1373c:	mov	r1, ip
   13740:	mvn	r2, #0
   13744:	bl	13068 <__assert_fail@plt+0x2060>
   13748:	sub	sp, fp, #8
   1374c:	pop	{r4, sl, fp, pc}
   13750:	push	{r4, r5, fp, lr}
   13754:	add	fp, sp, #8
   13758:	sub	sp, sp, #48	; 0x30
   1375c:	mov	ip, r3
   13760:	movw	r3, #29016	; 0x7158
   13764:	mov	r4, #32
   13768:	mov	lr, r2
   1376c:	cmp	r0, #0
   13770:	movt	r3, #2
   13774:	cmpne	r1, #0
   13778:	add	r2, r3, #16
   1377c:	vld1.64	{d16-d17}, [r3], r4
   13780:	vld1.64	{d20-d21}, [r3]
   13784:	vld1.64	{d18-d19}, [r2]
   13788:	mov	r2, sp
   1378c:	add	r5, r2, #16
   13790:	vst1.64	{d16-d17}, [r2], r4
   13794:	vst1.64	{d20-d21}, [r2]
   13798:	mov	r2, #10
   1379c:	vst1.64	{d18-d19}, [r5]
   137a0:	str	r2, [sp]
   137a4:	bne	137ac <__assert_fail@plt+0x27a4>
   137a8:	bl	10ffc <abort@plt>
   137ac:	str	r1, [sp, #44]	; 0x2c
   137b0:	str	r0, [sp, #40]	; 0x28
   137b4:	mov	r3, sp
   137b8:	mov	r0, #0
   137bc:	mov	r1, lr
   137c0:	mov	r2, ip
   137c4:	bl	13068 <__assert_fail@plt+0x2060>
   137c8:	sub	sp, fp, #8
   137cc:	pop	{r4, r5, fp, pc}
   137d0:	movw	r3, #28904	; 0x70e8
   137d4:	movt	r3, #2
   137d8:	b	13068 <__assert_fail@plt+0x2060>
   137dc:	movw	r3, #28904	; 0x70e8
   137e0:	mov	r2, r1
   137e4:	mov	r1, r0
   137e8:	mov	r0, #0
   137ec:	movt	r3, #2
   137f0:	b	13068 <__assert_fail@plt+0x2060>
   137f4:	movw	r3, #28904	; 0x70e8
   137f8:	mvn	r2, #0
   137fc:	movt	r3, #2
   13800:	b	13068 <__assert_fail@plt+0x2060>
   13804:	movw	r3, #28904	; 0x70e8
   13808:	mov	r1, r0
   1380c:	mov	r0, #0
   13810:	mvn	r2, #0
   13814:	movt	r3, #2
   13818:	b	13068 <__assert_fail@plt+0x2060>
   1381c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13820:	add	fp, sp, #24
   13824:	sub	sp, sp, #32
   13828:	ldr	r6, [fp, #12]
   1382c:	ldr	r7, [fp, #8]
   13830:	mov	r4, r2
   13834:	mov	r8, r0
   13838:	cmp	r1, #0
   1383c:	beq	13864 <__assert_fail@plt+0x285c>
   13840:	movw	r2, #24100	; 0x5e24
   13844:	mov	r5, r1
   13848:	str	r3, [sp, #4]
   1384c:	str	r4, [sp]
   13850:	mov	r0, r8
   13854:	mov	r1, #1
   13858:	movt	r2, #1
   1385c:	mov	r3, r5
   13860:	b	1387c <__assert_fail@plt+0x2874>
   13864:	movw	r2, #24112	; 0x5e30
   13868:	str	r3, [sp]
   1386c:	mov	r0, r8
   13870:	mov	r1, #1
   13874:	mov	r3, r4
   13878:	movt	r2, #1
   1387c:	bl	10f90 <__fprintf_chk@plt>
   13880:	movw	r1, #24119	; 0x5e37
   13884:	mov	r0, #0
   13888:	mov	r2, #5
   1388c:	movt	r1, #1
   13890:	bl	10e40 <dcgettext@plt>
   13894:	movw	r2, #24837	; 0x6105
   13898:	mov	r3, r0
   1389c:	movw	r0, #2022	; 0x7e6
   138a0:	mov	r1, #1
   138a4:	movt	r2, #1
   138a8:	str	r0, [sp]
   138ac:	mov	r0, r8
   138b0:	bl	10f90 <__fprintf_chk@plt>
   138b4:	movw	r4, #22992	; 0x59d0
   138b8:	mov	r1, r8
   138bc:	movt	r4, #1
   138c0:	mov	r0, r4
   138c4:	bl	10dc8 <fputs_unlocked@plt>
   138c8:	movw	r1, #24123	; 0x5e3b
   138cc:	mov	r0, #0
   138d0:	mov	r2, #5
   138d4:	movt	r1, #1
   138d8:	bl	10e40 <dcgettext@plt>
   138dc:	movw	r3, #24294	; 0x5ee6
   138e0:	mov	r2, r0
   138e4:	mov	r0, r8
   138e8:	mov	r1, #1
   138ec:	movt	r3, #1
   138f0:	bl	10f90 <__fprintf_chk@plt>
   138f4:	mov	r0, r4
   138f8:	mov	r1, r8
   138fc:	bl	10dc8 <fputs_unlocked@plt>
   13900:	cmp	r6, #9
   13904:	bhi	13940 <__assert_fail@plt+0x2938>
   13908:	add	r0, pc, #0
   1390c:	ldr	pc, [r0, r6, lsl #2]
   13910:	andeq	r3, r1, r8, lsr r9
   13914:	andeq	r3, r1, ip, asr #18
   13918:	andeq	r3, r1, ip, ror r9
   1391c:	andeq	r3, r1, r4, lsr #19
   13920:	andeq	r3, r1, ip, asr #19
   13924:	strdeq	r3, [r1], -r4
   13928:	andeq	r3, r1, ip, lsl sl
   1392c:	andeq	r3, r1, r4, asr sl
   13930:	strdeq	r3, [r1], -ip
   13934:	andeq	r3, r1, r4, lsr #21
   13938:	sub	sp, fp, #24
   1393c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13940:	movw	r1, #24647	; 0x6047
   13944:	movt	r1, #1
   13948:	b	13aac <__assert_fail@plt+0x2aa4>
   1394c:	movw	r1, #24328	; 0x5f08
   13950:	mov	r0, #0
   13954:	mov	r2, #5
   13958:	movt	r1, #1
   1395c:	bl	10e40 <dcgettext@plt>
   13960:	ldr	r3, [r7]
   13964:	mov	r2, r0
   13968:	mov	r0, r8
   1396c:	mov	r1, #1
   13970:	sub	sp, fp, #24
   13974:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13978:	b	10f90 <__fprintf_chk@plt>
   1397c:	movw	r1, #24344	; 0x5f18
   13980:	mov	r0, #0
   13984:	mov	r2, #5
   13988:	movt	r1, #1
   1398c:	bl	10e40 <dcgettext@plt>
   13990:	mov	r2, r0
   13994:	ldr	r3, [r7]
   13998:	ldr	r0, [r7, #4]
   1399c:	str	r0, [sp]
   139a0:	b	13a90 <__assert_fail@plt+0x2a88>
   139a4:	movw	r1, #24367	; 0x5f2f
   139a8:	mov	r0, #0
   139ac:	mov	r2, #5
   139b0:	movt	r1, #1
   139b4:	bl	10e40 <dcgettext@plt>
   139b8:	mov	r2, r0
   139bc:	ldr	r3, [r7]
   139c0:	ldmib	r7, {r0, r1}
   139c4:	stm	sp, {r0, r1}
   139c8:	b	13a90 <__assert_fail@plt+0x2a88>
   139cc:	movw	r1, #24395	; 0x5f4b
   139d0:	mov	r0, #0
   139d4:	mov	r2, #5
   139d8:	movt	r1, #1
   139dc:	bl	10e40 <dcgettext@plt>
   139e0:	ldr	r3, [r7]
   139e4:	mov	r2, r0
   139e8:	ldmib	r7, {r0, r1, r7}
   139ec:	stm	sp, {r0, r1, r7}
   139f0:	b	13a90 <__assert_fail@plt+0x2a88>
   139f4:	movw	r1, #24427	; 0x5f6b
   139f8:	mov	r0, #0
   139fc:	mov	r2, #5
   13a00:	movt	r1, #1
   13a04:	bl	10e40 <dcgettext@plt>
   13a08:	ldr	r3, [r7]
   13a0c:	mov	r2, r0
   13a10:	ldmib	r7, {r0, r1, r6, r7}
   13a14:	stm	sp, {r0, r1, r6, r7}
   13a18:	b	13a90 <__assert_fail@plt+0x2a88>
   13a1c:	movw	r1, #24463	; 0x5f8f
   13a20:	mov	r0, #0
   13a24:	mov	r2, #5
   13a28:	movt	r1, #1
   13a2c:	bl	10e40 <dcgettext@plt>
   13a30:	mov	r2, r0
   13a34:	ldr	r3, [r7]
   13a38:	ldmib	r7, {r0, r1, r6}
   13a3c:	ldr	r5, [r7, #16]
   13a40:	ldr	r7, [r7, #20]
   13a44:	stm	sp, {r0, r1, r6}
   13a48:	str	r5, [sp, #12]
   13a4c:	str	r7, [sp, #16]
   13a50:	b	13a90 <__assert_fail@plt+0x2a88>
   13a54:	movw	r1, #24503	; 0x5fb7
   13a58:	mov	r0, #0
   13a5c:	mov	r2, #5
   13a60:	movt	r1, #1
   13a64:	bl	10e40 <dcgettext@plt>
   13a68:	mov	r2, r0
   13a6c:	ldr	r3, [r7]
   13a70:	ldmib	r7, {r0, r1, r6}
   13a74:	ldr	r5, [r7, #16]
   13a78:	ldr	r4, [r7, #20]
   13a7c:	ldr	r7, [r7, #24]
   13a80:	stm	sp, {r0, r1, r6}
   13a84:	str	r5, [sp, #12]
   13a88:	str	r4, [sp, #16]
   13a8c:	str	r7, [sp, #20]
   13a90:	mov	r0, r8
   13a94:	mov	r1, #1
   13a98:	bl	10f90 <__fprintf_chk@plt>
   13a9c:	sub	sp, fp, #24
   13aa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13aa4:	movw	r1, #24595	; 0x6013
   13aa8:	movt	r1, #1
   13aac:	mov	r0, #0
   13ab0:	mov	r2, #5
   13ab4:	bl	10e40 <dcgettext@plt>
   13ab8:	mov	ip, r0
   13abc:	ldr	r3, [r7]
   13ac0:	ldr	r0, [r7, #4]
   13ac4:	ldr	r1, [r7, #8]
   13ac8:	ldr	r6, [r7, #12]
   13acc:	ldr	r5, [r7, #16]
   13ad0:	ldr	r4, [r7, #20]
   13ad4:	ldr	r2, [r7, #24]
   13ad8:	ldr	lr, [r7, #28]
   13adc:	ldr	r7, [r7, #32]
   13ae0:	stm	sp, {r0, r1, r6}
   13ae4:	str	r5, [sp, #12]
   13ae8:	str	r4, [sp, #16]
   13aec:	str	r2, [sp, #20]
   13af0:	str	lr, [sp, #24]
   13af4:	str	r7, [sp, #28]
   13af8:	b	13b40 <__assert_fail@plt+0x2b38>
   13afc:	movw	r1, #24547	; 0x5fe3
   13b00:	mov	r0, #0
   13b04:	mov	r2, #5
   13b08:	movt	r1, #1
   13b0c:	bl	10e40 <dcgettext@plt>
   13b10:	mov	ip, r0
   13b14:	ldr	r3, [r7]
   13b18:	ldmib	r7, {r0, r1, r6}
   13b1c:	ldr	r5, [r7, #16]
   13b20:	ldr	r4, [r7, #20]
   13b24:	ldr	r2, [r7, #24]
   13b28:	ldr	r7, [r7, #28]
   13b2c:	stm	sp, {r0, r1, r6}
   13b30:	str	r5, [sp, #12]
   13b34:	str	r4, [sp, #16]
   13b38:	str	r2, [sp, #20]
   13b3c:	str	r7, [sp, #24]
   13b40:	mov	r0, r8
   13b44:	mov	r1, #1
   13b48:	mov	r2, ip
   13b4c:	bl	10f90 <__fprintf_chk@plt>
   13b50:	sub	sp, fp, #24
   13b54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b58:	push	{r4, sl, fp, lr}
   13b5c:	add	fp, sp, #8
   13b60:	sub	sp, sp, #8
   13b64:	ldr	ip, [fp, #8]
   13b68:	mov	lr, #0
   13b6c:	ldr	r4, [ip, lr, lsl #2]
   13b70:	add	lr, lr, #1
   13b74:	cmp	r4, #0
   13b78:	bne	13b6c <__assert_fail@plt+0x2b64>
   13b7c:	sub	r4, lr, #1
   13b80:	str	ip, [sp]
   13b84:	str	r4, [sp, #4]
   13b88:	bl	1381c <__assert_fail@plt+0x2814>
   13b8c:	sub	sp, fp, #8
   13b90:	pop	{r4, sl, fp, pc}
   13b94:	push	{fp, lr}
   13b98:	mov	fp, sp
   13b9c:	sub	sp, sp, #48	; 0x30
   13ba0:	ldr	ip, [fp, #8]
   13ba4:	ldr	lr, [ip]
   13ba8:	cmp	lr, #0
   13bac:	str	lr, [sp, #8]
   13bb0:	beq	13c4c <__assert_fail@plt+0x2c44>
   13bb4:	ldr	lr, [ip, #4]
   13bb8:	cmp	lr, #0
   13bbc:	str	lr, [sp, #12]
   13bc0:	beq	13c54 <__assert_fail@plt+0x2c4c>
   13bc4:	ldr	lr, [ip, #8]
   13bc8:	cmp	lr, #0
   13bcc:	str	lr, [sp, #16]
   13bd0:	beq	13c5c <__assert_fail@plt+0x2c54>
   13bd4:	ldr	lr, [ip, #12]
   13bd8:	cmp	lr, #0
   13bdc:	str	lr, [sp, #20]
   13be0:	beq	13c64 <__assert_fail@plt+0x2c5c>
   13be4:	ldr	lr, [ip, #16]
   13be8:	cmp	lr, #0
   13bec:	str	lr, [sp, #24]
   13bf0:	beq	13c6c <__assert_fail@plt+0x2c64>
   13bf4:	ldr	lr, [ip, #20]
   13bf8:	cmp	lr, #0
   13bfc:	str	lr, [sp, #28]
   13c00:	beq	13c74 <__assert_fail@plt+0x2c6c>
   13c04:	ldr	lr, [ip, #24]
   13c08:	cmp	lr, #0
   13c0c:	str	lr, [sp, #32]
   13c10:	beq	13c7c <__assert_fail@plt+0x2c74>
   13c14:	ldr	lr, [ip, #28]
   13c18:	cmp	lr, #0
   13c1c:	str	lr, [sp, #36]	; 0x24
   13c20:	beq	13c84 <__assert_fail@plt+0x2c7c>
   13c24:	ldr	lr, [ip, #32]
   13c28:	cmp	lr, #0
   13c2c:	str	lr, [sp, #40]	; 0x28
   13c30:	beq	13c8c <__assert_fail@plt+0x2c84>
   13c34:	ldr	lr, [ip, #36]	; 0x24
   13c38:	mov	ip, #10
   13c3c:	cmp	lr, #0
   13c40:	str	lr, [sp, #44]	; 0x2c
   13c44:	movweq	ip, #9
   13c48:	b	13c90 <__assert_fail@plt+0x2c88>
   13c4c:	mov	ip, #0
   13c50:	b	13c90 <__assert_fail@plt+0x2c88>
   13c54:	mov	ip, #1
   13c58:	b	13c90 <__assert_fail@plt+0x2c88>
   13c5c:	mov	ip, #2
   13c60:	b	13c90 <__assert_fail@plt+0x2c88>
   13c64:	mov	ip, #3
   13c68:	b	13c90 <__assert_fail@plt+0x2c88>
   13c6c:	mov	ip, #4
   13c70:	b	13c90 <__assert_fail@plt+0x2c88>
   13c74:	mov	ip, #5
   13c78:	b	13c90 <__assert_fail@plt+0x2c88>
   13c7c:	mov	ip, #6
   13c80:	b	13c90 <__assert_fail@plt+0x2c88>
   13c84:	mov	ip, #7
   13c88:	b	13c90 <__assert_fail@plt+0x2c88>
   13c8c:	mov	ip, #8
   13c90:	add	lr, sp, #8
   13c94:	str	ip, [sp, #4]
   13c98:	str	lr, [sp]
   13c9c:	bl	1381c <__assert_fail@plt+0x2814>
   13ca0:	mov	sp, fp
   13ca4:	pop	{fp, pc}
   13ca8:	push	{fp, lr}
   13cac:	mov	fp, sp
   13cb0:	sub	sp, sp, #56	; 0x38
   13cb4:	add	ip, fp, #8
   13cb8:	str	ip, [sp, #12]
   13cbc:	ldr	lr, [fp, #8]
   13cc0:	cmp	lr, #0
   13cc4:	str	lr, [sp, #16]
   13cc8:	beq	13d64 <__assert_fail@plt+0x2d5c>
   13ccc:	ldr	lr, [ip, #4]
   13cd0:	cmp	lr, #0
   13cd4:	str	lr, [sp, #20]
   13cd8:	beq	13d6c <__assert_fail@plt+0x2d64>
   13cdc:	ldr	lr, [ip, #8]
   13ce0:	cmp	lr, #0
   13ce4:	str	lr, [sp, #24]
   13ce8:	beq	13d74 <__assert_fail@plt+0x2d6c>
   13cec:	ldr	lr, [ip, #12]
   13cf0:	cmp	lr, #0
   13cf4:	str	lr, [sp, #28]
   13cf8:	beq	13d7c <__assert_fail@plt+0x2d74>
   13cfc:	ldr	lr, [ip, #16]
   13d00:	cmp	lr, #0
   13d04:	str	lr, [sp, #32]
   13d08:	beq	13d84 <__assert_fail@plt+0x2d7c>
   13d0c:	ldr	lr, [ip, #20]
   13d10:	cmp	lr, #0
   13d14:	str	lr, [sp, #36]	; 0x24
   13d18:	beq	13d8c <__assert_fail@plt+0x2d84>
   13d1c:	ldr	lr, [ip, #24]
   13d20:	cmp	lr, #0
   13d24:	str	lr, [sp, #40]	; 0x28
   13d28:	beq	13d94 <__assert_fail@plt+0x2d8c>
   13d2c:	ldr	lr, [ip, #28]
   13d30:	cmp	lr, #0
   13d34:	str	lr, [sp, #44]	; 0x2c
   13d38:	beq	13d9c <__assert_fail@plt+0x2d94>
   13d3c:	ldr	lr, [ip, #32]
   13d40:	cmp	lr, #0
   13d44:	str	lr, [sp, #48]	; 0x30
   13d48:	beq	13da4 <__assert_fail@plt+0x2d9c>
   13d4c:	ldr	lr, [ip, #36]	; 0x24
   13d50:	mov	ip, #10
   13d54:	cmp	lr, #0
   13d58:	str	lr, [sp, #52]	; 0x34
   13d5c:	movweq	ip, #9
   13d60:	b	13da8 <__assert_fail@plt+0x2da0>
   13d64:	mov	ip, #0
   13d68:	b	13da8 <__assert_fail@plt+0x2da0>
   13d6c:	mov	ip, #1
   13d70:	b	13da8 <__assert_fail@plt+0x2da0>
   13d74:	mov	ip, #2
   13d78:	b	13da8 <__assert_fail@plt+0x2da0>
   13d7c:	mov	ip, #3
   13d80:	b	13da8 <__assert_fail@plt+0x2da0>
   13d84:	mov	ip, #4
   13d88:	b	13da8 <__assert_fail@plt+0x2da0>
   13d8c:	mov	ip, #5
   13d90:	b	13da8 <__assert_fail@plt+0x2da0>
   13d94:	mov	ip, #6
   13d98:	b	13da8 <__assert_fail@plt+0x2da0>
   13d9c:	mov	ip, #7
   13da0:	b	13da8 <__assert_fail@plt+0x2da0>
   13da4:	mov	ip, #8
   13da8:	add	lr, sp, #16
   13dac:	str	ip, [sp, #4]
   13db0:	str	lr, [sp]
   13db4:	bl	1381c <__assert_fail@plt+0x2814>
   13db8:	mov	sp, fp
   13dbc:	pop	{fp, pc}
   13dc0:	push	{fp, lr}
   13dc4:	mov	fp, sp
   13dc8:	movw	r0, #28988	; 0x713c
   13dcc:	movt	r0, #2
   13dd0:	ldr	r1, [r0]
   13dd4:	movw	r0, #22992	; 0x59d0
   13dd8:	movt	r0, #1
   13ddc:	bl	10dc8 <fputs_unlocked@plt>
   13de0:	movw	r1, #24707	; 0x6083
   13de4:	mov	r0, #0
   13de8:	mov	r2, #5
   13dec:	movt	r1, #1
   13df0:	bl	10e40 <dcgettext@plt>
   13df4:	movw	r2, #24727	; 0x6097
   13df8:	mov	r1, r0
   13dfc:	mov	r0, #1
   13e00:	movt	r2, #1
   13e04:	bl	10f78 <__printf_chk@plt>
   13e08:	movw	r1, #24749	; 0x60ad
   13e0c:	mov	r0, #0
   13e10:	mov	r2, #5
   13e14:	movt	r1, #1
   13e18:	bl	10e40 <dcgettext@plt>
   13e1c:	movw	r2, #23240	; 0x5ac8
   13e20:	movw	r3, #23427	; 0x5b83
   13e24:	mov	r1, r0
   13e28:	mov	r0, #1
   13e2c:	movt	r2, #1
   13e30:	movt	r3, #1
   13e34:	bl	10f78 <__printf_chk@plt>
   13e38:	movw	r1, #24769	; 0x60c1
   13e3c:	mov	r0, #0
   13e40:	mov	r2, #5
   13e44:	movt	r1, #1
   13e48:	bl	10e40 <dcgettext@plt>
   13e4c:	movw	r2, #24808	; 0x60e8
   13e50:	mov	r1, r0
   13e54:	mov	r0, #1
   13e58:	movt	r2, #1
   13e5c:	pop	{fp, lr}
   13e60:	b	10f78 <__printf_chk@plt>
   13e64:	push	{r4, r5, r6, sl, fp, lr}
   13e68:	add	fp, sp, #16
   13e6c:	mov	r4, r2
   13e70:	mov	r5, r1
   13e74:	mov	r6, r0
   13e78:	bl	155cc <__assert_fail@plt+0x45c4>
   13e7c:	cmp	r0, #0
   13e80:	popne	{r4, r5, r6, sl, fp, pc}
   13e84:	cmp	r6, #0
   13e88:	beq	13e9c <__assert_fail@plt+0x2e94>
   13e8c:	cmp	r5, #0
   13e90:	cmpne	r4, #0
   13e94:	bne	13e9c <__assert_fail@plt+0x2e94>
   13e98:	pop	{r4, r5, r6, sl, fp, pc}
   13e9c:	bl	14418 <__assert_fail@plt+0x3410>
   13ea0:	push	{r4, r5, r6, sl, fp, lr}
   13ea4:	add	fp, sp, #16
   13ea8:	mov	r4, r2
   13eac:	mov	r5, r1
   13eb0:	mov	r6, r0
   13eb4:	bl	155cc <__assert_fail@plt+0x45c4>
   13eb8:	cmp	r0, #0
   13ebc:	popne	{r4, r5, r6, sl, fp, pc}
   13ec0:	cmp	r6, #0
   13ec4:	beq	13ed8 <__assert_fail@plt+0x2ed0>
   13ec8:	cmp	r5, #0
   13ecc:	cmpne	r4, #0
   13ed0:	bne	13ed8 <__assert_fail@plt+0x2ed0>
   13ed4:	pop	{r4, r5, r6, sl, fp, pc}
   13ed8:	bl	14418 <__assert_fail@plt+0x3410>
   13edc:	push	{fp, lr}
   13ee0:	mov	fp, sp
   13ee4:	bl	15260 <__assert_fail@plt+0x4258>
   13ee8:	cmp	r0, #0
   13eec:	popne	{fp, pc}
   13ef0:	bl	14418 <__assert_fail@plt+0x3410>
   13ef4:	push	{fp, lr}
   13ef8:	mov	fp, sp
   13efc:	bl	15260 <__assert_fail@plt+0x4258>
   13f00:	cmp	r0, #0
   13f04:	popne	{fp, pc}
   13f08:	bl	14418 <__assert_fail@plt+0x3410>
   13f0c:	push	{fp, lr}
   13f10:	mov	fp, sp
   13f14:	bl	15260 <__assert_fail@plt+0x4258>
   13f18:	cmp	r0, #0
   13f1c:	popne	{fp, pc}
   13f20:	bl	14418 <__assert_fail@plt+0x3410>
   13f24:	push	{r4, r5, fp, lr}
   13f28:	add	fp, sp, #8
   13f2c:	mov	r4, r1
   13f30:	mov	r5, r0
   13f34:	bl	15290 <__assert_fail@plt+0x4288>
   13f38:	cmp	r0, #0
   13f3c:	popne	{r4, r5, fp, pc}
   13f40:	cmp	r5, #0
   13f44:	beq	13f54 <__assert_fail@plt+0x2f4c>
   13f48:	cmp	r4, #0
   13f4c:	bne	13f54 <__assert_fail@plt+0x2f4c>
   13f50:	pop	{r4, r5, fp, pc}
   13f54:	bl	14418 <__assert_fail@plt+0x3410>
   13f58:	push	{fp, lr}
   13f5c:	mov	fp, sp
   13f60:	cmp	r1, #0
   13f64:	orreq	r1, r1, #1
   13f68:	bl	15290 <__assert_fail@plt+0x4288>
   13f6c:	cmp	r0, #0
   13f70:	popne	{fp, pc}
   13f74:	bl	14418 <__assert_fail@plt+0x3410>
   13f78:	push	{fp, lr}
   13f7c:	mov	fp, sp
   13f80:	clz	r3, r2
   13f84:	lsr	ip, r3, #5
   13f88:	clz	r3, r1
   13f8c:	lsr	r3, r3, #5
   13f90:	orrs	r3, r3, ip
   13f94:	movwne	r1, #1
   13f98:	movwne	r2, #1
   13f9c:	bl	155cc <__assert_fail@plt+0x45c4>
   13fa0:	cmp	r0, #0
   13fa4:	popne	{fp, pc}
   13fa8:	bl	14418 <__assert_fail@plt+0x3410>
   13fac:	push	{fp, lr}
   13fb0:	mov	fp, sp
   13fb4:	mov	r2, r1
   13fb8:	mov	r1, r0
   13fbc:	mov	r0, #0
   13fc0:	bl	155cc <__assert_fail@plt+0x45c4>
   13fc4:	cmp	r0, #0
   13fc8:	popne	{fp, pc}
   13fcc:	bl	14418 <__assert_fail@plt+0x3410>
   13fd0:	push	{fp, lr}
   13fd4:	mov	fp, sp
   13fd8:	mov	r2, r1
   13fdc:	mov	r1, r0
   13fe0:	clz	r0, r2
   13fe4:	clz	r3, r1
   13fe8:	lsr	r0, r0, #5
   13fec:	lsr	r3, r3, #5
   13ff0:	orrs	r0, r3, r0
   13ff4:	mov	r0, #0
   13ff8:	movwne	r1, #1
   13ffc:	movwne	r2, #1
   14000:	bl	155cc <__assert_fail@plt+0x45c4>
   14004:	cmp	r0, #0
   14008:	popne	{fp, pc}
   1400c:	bl	14418 <__assert_fail@plt+0x3410>
   14010:	push	{r4, r5, r6, sl, fp, lr}
   14014:	add	fp, sp, #16
   14018:	ldr	r5, [r1]
   1401c:	mov	r4, r1
   14020:	mov	r6, r0
   14024:	cmp	r0, #0
   14028:	beq	14040 <__assert_fail@plt+0x3038>
   1402c:	mov	r0, #1
   14030:	add	r0, r0, r5, lsr #1
   14034:	adds	r5, r5, r0
   14038:	bcc	14048 <__assert_fail@plt+0x3040>
   1403c:	b	14084 <__assert_fail@plt+0x307c>
   14040:	cmp	r5, #0
   14044:	movweq	r5, #64	; 0x40
   14048:	mov	r0, r6
   1404c:	mov	r1, r5
   14050:	mov	r2, #1
   14054:	bl	155cc <__assert_fail@plt+0x45c4>
   14058:	cmp	r5, #0
   1405c:	mov	r1, r5
   14060:	movwne	r1, #1
   14064:	cmp	r0, #0
   14068:	bne	1407c <__assert_fail@plt+0x3074>
   1406c:	clz	r2, r6
   14070:	lsr	r2, r2, #5
   14074:	orrs	r1, r2, r1
   14078:	bne	14084 <__assert_fail@plt+0x307c>
   1407c:	str	r5, [r4]
   14080:	pop	{r4, r5, r6, sl, fp, pc}
   14084:	bl	14418 <__assert_fail@plt+0x3410>
   14088:	push	{r4, r5, r6, r7, fp, lr}
   1408c:	add	fp, sp, #16
   14090:	ldr	r5, [r1]
   14094:	mov	r6, r2
   14098:	mov	r4, r1
   1409c:	mov	r7, r0
   140a0:	cmp	r0, #0
   140a4:	beq	140bc <__assert_fail@plt+0x30b4>
   140a8:	mov	r0, #1
   140ac:	add	r0, r0, r5, lsr #1
   140b0:	adds	r5, r5, r0
   140b4:	bcc	140d4 <__assert_fail@plt+0x30cc>
   140b8:	b	14108 <__assert_fail@plt+0x3100>
   140bc:	cmp	r5, #0
   140c0:	bne	140d4 <__assert_fail@plt+0x30cc>
   140c4:	mov	r0, #64	; 0x40
   140c8:	cmp	r6, #64	; 0x40
   140cc:	udiv	r5, r0, r6
   140d0:	addhi	r5, r5, #1
   140d4:	mov	r0, r7
   140d8:	mov	r1, r5
   140dc:	mov	r2, r6
   140e0:	bl	155cc <__assert_fail@plt+0x45c4>
   140e4:	cmp	r0, #0
   140e8:	bne	14100 <__assert_fail@plt+0x30f8>
   140ec:	cmp	r7, #0
   140f0:	beq	14108 <__assert_fail@plt+0x3100>
   140f4:	cmp	r6, #0
   140f8:	cmpne	r5, #0
   140fc:	bne	14108 <__assert_fail@plt+0x3100>
   14100:	str	r5, [r4]
   14104:	pop	{r4, r5, r6, r7, fp, pc}
   14108:	bl	14418 <__assert_fail@plt+0x3410>
   1410c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14110:	add	fp, sp, #24
   14114:	mov	r8, r1
   14118:	ldr	r1, [r1]
   1411c:	mov	r5, r0
   14120:	add	r0, r1, r1, asr #1
   14124:	cmp	r0, r1
   14128:	mvnvs	r0, #-2147483648	; 0x80000000
   1412c:	cmp	r0, r3
   14130:	mov	r7, r0
   14134:	movgt	r7, r3
   14138:	cmn	r3, #1
   1413c:	movle	r7, r0
   14140:	ldr	r0, [fp, #8]
   14144:	cmn	r0, #1
   14148:	ble	14170 <__assert_fail@plt+0x3168>
   1414c:	cmp	r0, #0
   14150:	beq	141c4 <__assert_fail@plt+0x31bc>
   14154:	cmn	r7, #1
   14158:	ble	14198 <__assert_fail@plt+0x3190>
   1415c:	mvn	r4, #-2147483648	; 0x80000000
   14160:	udiv	r6, r4, r0
   14164:	cmp	r6, r7
   14168:	bge	141c4 <__assert_fail@plt+0x31bc>
   1416c:	b	141d4 <__assert_fail@plt+0x31cc>
   14170:	cmn	r7, #1
   14174:	ble	141b4 <__assert_fail@plt+0x31ac>
   14178:	cmn	r0, #1
   1417c:	beq	141c4 <__assert_fail@plt+0x31bc>
   14180:	mov	r6, #-2147483648	; 0x80000000
   14184:	mvn	r4, #-2147483648	; 0x80000000
   14188:	sdiv	r6, r6, r0
   1418c:	cmp	r6, r7
   14190:	bge	141c4 <__assert_fail@plt+0x31bc>
   14194:	b	141d4 <__assert_fail@plt+0x31cc>
   14198:	beq	141c4 <__assert_fail@plt+0x31bc>
   1419c:	mov	r6, #-2147483648	; 0x80000000
   141a0:	mvn	r4, #-2147483648	; 0x80000000
   141a4:	sdiv	r6, r6, r7
   141a8:	cmp	r6, r0
   141ac:	bge	141c4 <__assert_fail@plt+0x31bc>
   141b0:	b	141d4 <__assert_fail@plt+0x31cc>
   141b4:	mvn	r4, #-2147483648	; 0x80000000
   141b8:	sdiv	r6, r4, r0
   141bc:	cmp	r7, r6
   141c0:	blt	141d4 <__assert_fail@plt+0x31cc>
   141c4:	mul	r6, r7, r0
   141c8:	mov	r4, #64	; 0x40
   141cc:	cmp	r6, #63	; 0x3f
   141d0:	bgt	141dc <__assert_fail@plt+0x31d4>
   141d4:	sdiv	r7, r4, r0
   141d8:	mul	r6, r7, r0
   141dc:	cmp	r5, #0
   141e0:	moveq	r4, #0
   141e4:	streq	r4, [r8]
   141e8:	sub	r4, r7, r1
   141ec:	cmp	r4, r2
   141f0:	bge	1429c <__assert_fail@plt+0x3294>
   141f4:	add	r7, r1, r2
   141f8:	mov	r6, #0
   141fc:	mov	r2, #0
   14200:	cmp	r7, r3
   14204:	movwgt	r6, #1
   14208:	cmn	r3, #1
   1420c:	movwgt	r2, #1
   14210:	cmp	r7, r1
   14214:	bvs	142d0 <__assert_fail@plt+0x32c8>
   14218:	ands	r1, r2, r6
   1421c:	bne	142d0 <__assert_fail@plt+0x32c8>
   14220:	cmn	r0, #1
   14224:	ble	1424c <__assert_fail@plt+0x3244>
   14228:	cmp	r0, #0
   1422c:	beq	14298 <__assert_fail@plt+0x3290>
   14230:	cmn	r7, #1
   14234:	ble	14270 <__assert_fail@plt+0x3268>
   14238:	mvn	r1, #-2147483648	; 0x80000000
   1423c:	udiv	r1, r1, r0
   14240:	cmp	r1, r7
   14244:	bge	14298 <__assert_fail@plt+0x3290>
   14248:	b	142d0 <__assert_fail@plt+0x32c8>
   1424c:	cmn	r7, #1
   14250:	ble	14288 <__assert_fail@plt+0x3280>
   14254:	cmn	r0, #1
   14258:	beq	14298 <__assert_fail@plt+0x3290>
   1425c:	mov	r1, #-2147483648	; 0x80000000
   14260:	sdiv	r1, r1, r0
   14264:	cmp	r1, r7
   14268:	bge	14298 <__assert_fail@plt+0x3290>
   1426c:	b	142d0 <__assert_fail@plt+0x32c8>
   14270:	beq	14298 <__assert_fail@plt+0x3290>
   14274:	mov	r1, #-2147483648	; 0x80000000
   14278:	sdiv	r1, r1, r7
   1427c:	cmp	r1, r0
   14280:	bge	14298 <__assert_fail@plt+0x3290>
   14284:	b	142d0 <__assert_fail@plt+0x32c8>
   14288:	mvn	r1, #-2147483648	; 0x80000000
   1428c:	sdiv	r1, r1, r0
   14290:	cmp	r7, r1
   14294:	blt	142d0 <__assert_fail@plt+0x32c8>
   14298:	mul	r6, r7, r0
   1429c:	mov	r0, r5
   142a0:	mov	r1, r6
   142a4:	bl	15290 <__assert_fail@plt+0x4288>
   142a8:	cmp	r6, #0
   142ac:	movwne	r6, #1
   142b0:	cmp	r0, #0
   142b4:	bne	142c8 <__assert_fail@plt+0x32c0>
   142b8:	clz	r1, r5
   142bc:	lsr	r1, r1, #5
   142c0:	orrs	r1, r1, r6
   142c4:	bne	142d0 <__assert_fail@plt+0x32c8>
   142c8:	str	r7, [r8]
   142cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142d0:	bl	14418 <__assert_fail@plt+0x3410>
   142d4:	push	{fp, lr}
   142d8:	mov	fp, sp
   142dc:	mov	r1, #1
   142e0:	bl	1520c <__assert_fail@plt+0x4204>
   142e4:	cmp	r0, #0
   142e8:	popne	{fp, pc}
   142ec:	bl	14418 <__assert_fail@plt+0x3410>
   142f0:	push	{fp, lr}
   142f4:	mov	fp, sp
   142f8:	bl	1520c <__assert_fail@plt+0x4204>
   142fc:	cmp	r0, #0
   14300:	popne	{fp, pc}
   14304:	bl	14418 <__assert_fail@plt+0x3410>
   14308:	push	{fp, lr}
   1430c:	mov	fp, sp
   14310:	mov	r1, #1
   14314:	bl	1520c <__assert_fail@plt+0x4204>
   14318:	cmp	r0, #0
   1431c:	popne	{fp, pc}
   14320:	bl	14418 <__assert_fail@plt+0x3410>
   14324:	push	{fp, lr}
   14328:	mov	fp, sp
   1432c:	bl	1520c <__assert_fail@plt+0x4204>
   14330:	cmp	r0, #0
   14334:	popne	{fp, pc}
   14338:	bl	14418 <__assert_fail@plt+0x3410>
   1433c:	push	{r4, r5, fp, lr}
   14340:	add	fp, sp, #8
   14344:	mov	r5, r0
   14348:	mov	r0, r1
   1434c:	mov	r4, r1
   14350:	bl	15260 <__assert_fail@plt+0x4258>
   14354:	cmp	r0, #0
   14358:	beq	1436c <__assert_fail@plt+0x3364>
   1435c:	mov	r1, r5
   14360:	mov	r2, r4
   14364:	pop	{r4, r5, fp, lr}
   14368:	b	10e10 <memcpy@plt>
   1436c:	bl	14418 <__assert_fail@plt+0x3410>
   14370:	push	{r4, r5, fp, lr}
   14374:	add	fp, sp, #8
   14378:	mov	r5, r0
   1437c:	mov	r0, r1
   14380:	mov	r4, r1
   14384:	bl	15260 <__assert_fail@plt+0x4258>
   14388:	cmp	r0, #0
   1438c:	beq	143a0 <__assert_fail@plt+0x3398>
   14390:	mov	r1, r5
   14394:	mov	r2, r4
   14398:	pop	{r4, r5, fp, lr}
   1439c:	b	10e10 <memcpy@plt>
   143a0:	bl	14418 <__assert_fail@plt+0x3410>
   143a4:	push	{r4, r5, fp, lr}
   143a8:	add	fp, sp, #8
   143ac:	mov	r5, r0
   143b0:	add	r0, r1, #1
   143b4:	mov	r4, r1
   143b8:	bl	15260 <__assert_fail@plt+0x4258>
   143bc:	cmp	r0, #0
   143c0:	beq	143dc <__assert_fail@plt+0x33d4>
   143c4:	mov	r1, #0
   143c8:	mov	r2, r4
   143cc:	strb	r1, [r0, r4]
   143d0:	mov	r1, r5
   143d4:	pop	{r4, r5, fp, lr}
   143d8:	b	10e10 <memcpy@plt>
   143dc:	bl	14418 <__assert_fail@plt+0x3410>
   143e0:	push	{r4, r5, fp, lr}
   143e4:	add	fp, sp, #8
   143e8:	mov	r4, r0
   143ec:	bl	10f3c <strlen@plt>
   143f0:	add	r5, r0, #1
   143f4:	mov	r0, r5
   143f8:	bl	15260 <__assert_fail@plt+0x4258>
   143fc:	cmp	r0, #0
   14400:	beq	14414 <__assert_fail@plt+0x340c>
   14404:	mov	r1, r4
   14408:	mov	r2, r5
   1440c:	pop	{r4, r5, fp, lr}
   14410:	b	10e10 <memcpy@plt>
   14414:	bl	14418 <__assert_fail@plt+0x3410>
   14418:	push	{fp, lr}
   1441c:	mov	fp, sp
   14420:	movw	r0, #28900	; 0x70e4
   14424:	movw	r1, #24884	; 0x6134
   14428:	mov	r2, #5
   1442c:	movt	r0, #2
   14430:	movt	r1, #1
   14434:	ldr	r4, [r0]
   14438:	mov	r0, #0
   1443c:	bl	10e40 <dcgettext@plt>
   14440:	movw	r2, #23815	; 0x5d07
   14444:	mov	r3, r0
   14448:	mov	r0, r4
   1444c:	mov	r1, #0
   14450:	movt	r2, #1
   14454:	bl	10eb8 <error@plt>
   14458:	bl	10ffc <abort@plt>
   1445c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14460:	add	fp, sp, #24
   14464:	sub	sp, sp, #16
   14468:	mov	r8, r0
   1446c:	ldr	r0, [fp, #16]
   14470:	mov	r5, r3
   14474:	mov	r6, r2
   14478:	mov	r2, r1
   1447c:	add	r3, sp, #8
   14480:	mov	r1, #0
   14484:	str	r0, [sp]
   14488:	mov	r0, r8
   1448c:	bl	14558 <__assert_fail@plt+0x3550>
   14490:	cmp	r0, #0
   14494:	bne	14520 <__assert_fail@plt+0x3518>
   14498:	ldr	r4, [sp, #8]
   1449c:	ldr	r7, [sp, #12]
   144a0:	subs	r0, r4, r6
   144a4:	sbcs	r0, r7, r5
   144a8:	bcc	144cc <__assert_fail@plt+0x34c4>
   144ac:	ldr	r1, [fp, #8]
   144b0:	ldr	r0, [fp, #12]
   144b4:	subs	r1, r1, r4
   144b8:	sbcs	r0, r0, r7
   144bc:	movcs	r0, r4
   144c0:	movcs	r1, r7
   144c4:	subcs	sp, fp, #24
   144c8:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   144cc:	bl	10f54 <__errno_location@plt>
   144d0:	subs	r1, r4, #1073741824	; 0x40000000
   144d4:	sbcs	r1, r7, #0
   144d8:	movcc	r1, #34	; 0x22
   144dc:	movcs	r1, #75	; 0x4b
   144e0:	str	r1, [r0]
   144e4:	ldr	r6, [r0]
   144e8:	ldr	r4, [fp, #24]
   144ec:	ldr	r5, [fp, #20]
   144f0:	mov	r0, r8
   144f4:	bl	13804 <__assert_fail@plt+0x27fc>
   144f8:	subs	r1, r6, #22
   144fc:	movw	r2, #23811	; 0x5d03
   14500:	str	r0, [sp]
   14504:	mov	r3, r5
   14508:	movne	r1, r6
   1450c:	cmp	r4, #0
   14510:	movt	r2, #1
   14514:	movweq	r4, #1
   14518:	mov	r0, r4
   1451c:	bl	10eb8 <error@plt>
   14520:	cmp	r0, #1
   14524:	beq	1453c <__assert_fail@plt+0x3534>
   14528:	cmp	r0, #3
   1452c:	bne	14548 <__assert_fail@plt+0x3540>
   14530:	bl	10f54 <__errno_location@plt>
   14534:	mov	r1, #0
   14538:	b	144e0 <__assert_fail@plt+0x34d8>
   1453c:	bl	10f54 <__errno_location@plt>
   14540:	mov	r1, #75	; 0x4b
   14544:	b	144e0 <__assert_fail@plt+0x34d8>
   14548:	bl	10f54 <__errno_location@plt>
   1454c:	b	144e4 <__assert_fail@plt+0x34dc>
   14550:	mov	r1, #10
   14554:	b	1445c <__assert_fail@plt+0x3454>
   14558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1455c:	add	fp, sp, #28
   14560:	sub	sp, sp, #44	; 0x2c
   14564:	cmp	r2, #37	; 0x25
   14568:	bcs	151ec <__assert_fail@plt+0x41e4>
   1456c:	ldr	sl, [fp, #8]
   14570:	mov	r6, r2
   14574:	mov	r7, r1
   14578:	mov	r4, r0
   1457c:	str	r3, [sp, #36]	; 0x24
   14580:	bl	10f54 <__errno_location@plt>
   14584:	mov	r5, r0
   14588:	mov	r0, #0
   1458c:	str	r0, [r5]
   14590:	bl	10f0c <__ctype_b_loc@plt>
   14594:	ldr	r1, [r0]
   14598:	mov	r2, r4
   1459c:	ldrb	r0, [r2], #1
   145a0:	add	r3, r1, r0, lsl #1
   145a4:	ldrb	r3, [r3, #1]
   145a8:	tst	r3, #32
   145ac:	bne	1459c <__assert_fail@plt+0x3594>
   145b0:	cmp	r7, #0
   145b4:	sub	r9, fp, #32
   145b8:	mov	r8, #4
   145bc:	movne	r9, r7
   145c0:	cmp	r0, #45	; 0x2d
   145c4:	beq	14984 <__assert_fail@plt+0x397c>
   145c8:	mov	r0, r4
   145cc:	mov	r1, r9
   145d0:	mov	r2, r6
   145d4:	mov	r3, #0
   145d8:	bl	10e1c <__strtoull_internal@plt>
   145dc:	mov	r7, r1
   145e0:	ldr	r1, [r9]
   145e4:	cmp	r1, r4
   145e8:	beq	14620 <__assert_fail@plt+0x3618>
   145ec:	mov	r6, r0
   145f0:	ldr	r0, [r5]
   145f4:	cmp	r0, #0
   145f8:	beq	1493c <__assert_fail@plt+0x3934>
   145fc:	cmp	r0, #34	; 0x22
   14600:	bne	14984 <__assert_fail@plt+0x397c>
   14604:	mov	r8, #1
   14608:	cmp	sl, #0
   1460c:	beq	151d8 <__assert_fail@plt+0x41d0>
   14610:	ldrb	r4, [r1]
   14614:	cmp	r4, #0
   14618:	bne	14664 <__assert_fail@plt+0x365c>
   1461c:	b	151d8 <__assert_fail@plt+0x41d0>
   14620:	cmp	sl, #0
   14624:	beq	14984 <__assert_fail@plt+0x397c>
   14628:	mov	r5, r1
   1462c:	ldrb	r1, [r4]
   14630:	cmp	r1, #0
   14634:	beq	14984 <__assert_fail@plt+0x397c>
   14638:	mov	r0, sl
   1463c:	bl	10f48 <strchr@plt>
   14640:	cmp	r0, #0
   14644:	beq	14984 <__assert_fail@plt+0x397c>
   14648:	mov	r1, r5
   1464c:	mov	r8, #0
   14650:	mov	r6, #1
   14654:	mov	r7, #0
   14658:	ldrb	r4, [r1]
   1465c:	cmp	r4, #0
   14660:	beq	151d8 <__assert_fail@plt+0x41d0>
   14664:	str	r1, [sp, #32]
   14668:	mov	r0, sl
   1466c:	mov	r1, r4
   14670:	bl	10f48 <strchr@plt>
   14674:	cmp	r0, #0
   14678:	beq	14978 <__assert_fail@plt+0x3970>
   1467c:	sub	r0, r4, #69	; 0x45
   14680:	mov	r1, #1
   14684:	mov	r3, #0
   14688:	mov	r5, #1024	; 0x400
   1468c:	cmp	r0, #47	; 0x2f
   14690:	str	r1, [sp, #28]
   14694:	bhi	14798 <__assert_fail@plt+0x3790>
   14698:	add	r1, pc, #0
   1469c:	ldr	pc, [r1, r0, lsl #2]
   146a0:	andeq	r4, r1, r0, ror #14
   146a4:	muleq	r1, r8, r7
   146a8:	andeq	r4, r1, r0, ror #14
   146ac:	muleq	r1, r8, r7
   146b0:	muleq	r1, r8, r7
   146b4:	muleq	r1, r8, r7
   146b8:	andeq	r4, r1, r0, ror #14
   146bc:	muleq	r1, r8, r7
   146c0:	andeq	r4, r1, r0, ror #14
   146c4:	muleq	r1, r8, r7
   146c8:	muleq	r1, r8, r7
   146cc:	andeq	r4, r1, r0, ror #14
   146d0:	muleq	r1, r8, r7
   146d4:	muleq	r1, r8, r7
   146d8:	muleq	r1, r8, r7
   146dc:	andeq	r4, r1, r0, ror #14
   146e0:	muleq	r1, r8, r7
   146e4:	muleq	r1, r8, r7
   146e8:	muleq	r1, r8, r7
   146ec:	muleq	r1, r8, r7
   146f0:	andeq	r4, r1, r0, ror #14
   146f4:	andeq	r4, r1, r0, ror #14
   146f8:	muleq	r1, r8, r7
   146fc:	muleq	r1, r8, r7
   14700:	muleq	r1, r8, r7
   14704:	muleq	r1, r8, r7
   14708:	muleq	r1, r8, r7
   1470c:	muleq	r1, r8, r7
   14710:	muleq	r1, r8, r7
   14714:	muleq	r1, r8, r7
   14718:	muleq	r1, r8, r7
   1471c:	muleq	r1, r8, r7
   14720:	muleq	r1, r8, r7
   14724:	muleq	r1, r8, r7
   14728:	andeq	r4, r1, r0, ror #14
   1472c:	muleq	r1, r8, r7
   14730:	muleq	r1, r8, r7
   14734:	muleq	r1, r8, r7
   14738:	andeq	r4, r1, r0, ror #14
   1473c:	muleq	r1, r8, r7
   14740:	andeq	r4, r1, r0, ror #14
   14744:	muleq	r1, r8, r7
   14748:	muleq	r1, r8, r7
   1474c:	muleq	r1, r8, r7
   14750:	muleq	r1, r8, r7
   14754:	muleq	r1, r8, r7
   14758:	muleq	r1, r8, r7
   1475c:	andeq	r4, r1, r0, ror #14
   14760:	mov	r0, sl
   14764:	mov	r1, #48	; 0x30
   14768:	bl	10f48 <strchr@plt>
   1476c:	cmp	r0, #0
   14770:	beq	14794 <__assert_fail@plt+0x378c>
   14774:	ldr	r1, [sp, #32]
   14778:	ldrb	r0, [r1, #1]
   1477c:	cmp	r0, #66	; 0x42
   14780:	cmpne	r0, #68	; 0x44
   14784:	bne	1494c <__assert_fail@plt+0x3944>
   14788:	mov	r5, #1000	; 0x3e8
   1478c:	mov	r0, #2
   14790:	str	r0, [sp, #28]
   14794:	mov	r3, #0
   14798:	sub	r0, r4, #66	; 0x42
   1479c:	cmp	r0, #53	; 0x35
   147a0:	bhi	14978 <__assert_fail@plt+0x3970>
   147a4:	add	r1, pc, #0
   147a8:	ldr	pc, [r1, r0, lsl #2]
   147ac:	andeq	r4, r1, r8, ror #25
   147b0:	andeq	r4, r1, r8, ror r9
   147b4:	andeq	r4, r1, r8, ror r9
   147b8:	andeq	r4, r1, r0, lsl sp
   147bc:	andeq	r4, r1, r8, ror r9
   147c0:	andeq	r4, r1, r4, lsl #17
   147c4:	andeq	r4, r1, r8, ror r9
   147c8:	andeq	r4, r1, r8, ror r9
   147cc:	andeq	r4, r1, r8, ror r9
   147d0:	muleq	r1, r0, r9
   147d4:	andeq	r4, r1, r8, ror r9
   147d8:	ldrdeq	r4, [r1], -r8
   147dc:	andeq	r4, r1, r8, ror r9
   147e0:	andeq	r4, r1, r8, ror r9
   147e4:	andeq	r4, r1, r4, ror #28
   147e8:	andeq	r4, r1, r8, ror r9
   147ec:	andeq	r4, r1, r8, ror r9
   147f0:	andeq	r4, r1, r8, ror r9
   147f4:	andeq	r4, r1, r4, ror #20
   147f8:	andeq	r4, r1, r8, ror r9
   147fc:	andeq	r4, r1, r8, ror r9
   14800:	andeq	r4, r1, r8, ror r9
   14804:	andeq	r4, r1, r8, ror r9
   14808:	andeq	r4, r1, ip, lsl #31
   1480c:	andeq	r4, r1, ip, asr #22
   14810:	andeq	r4, r1, r8, ror r9
   14814:	andeq	r4, r1, r8, ror r9
   14818:	andeq	r4, r1, r8, ror r9
   1481c:	andeq	r4, r1, r8, ror r9
   14820:	andeq	r4, r1, r8, ror r9
   14824:	andeq	r4, r1, r8, ror r9
   14828:	andeq	r4, r1, r8, ror r9
   1482c:	andeq	r5, r1, r0, ror #2
   14830:			; <UNDEFINED> instruction: 0x000151b8
   14834:	andeq	r4, r1, r8, ror r9
   14838:	andeq	r4, r1, r8, ror r9
   1483c:	andeq	r4, r1, r8, ror r9
   14840:	andeq	r4, r1, r4, lsl #17
   14844:	andeq	r4, r1, r8, ror r9
   14848:	andeq	r4, r1, r8, ror r9
   1484c:	andeq	r4, r1, r8, ror r9
   14850:	muleq	r1, r0, r9
   14854:	andeq	r4, r1, r8, ror r9
   14858:	ldrdeq	r4, [r1], -r8
   1485c:	andeq	r4, r1, r8, ror r9
   14860:	andeq	r4, r1, r8, ror r9
   14864:	andeq	r4, r1, r8, ror r9
   14868:	andeq	r4, r1, r8, ror r9
   1486c:	andeq	r4, r1, r8, ror r9
   14870:	andeq	r4, r1, r8, ror r9
   14874:	andeq	r4, r1, r4, ror #20
   14878:	andeq	r4, r1, r8, ror r9
   1487c:	andeq	r4, r1, r8, ror r9
   14880:	muleq	r1, r4, r1
   14884:	mvn	r0, #0
   14888:	mvn	r1, #0
   1488c:	mov	r2, r5
   14890:	mov	sl, r3
   14894:	bl	15714 <__assert_fail@plt+0x470c>
   14898:	subs	r3, r0, r6
   1489c:	umull	r4, r2, r6, r5
   148a0:	mov	lr, #0
   148a4:	str	r1, [sp, #20]
   148a8:	sbcs	r3, r1, r7
   148ac:	movwcc	lr, #1
   148b0:	mla	ip, r6, sl, r2
   148b4:	mov	r2, r1
   148b8:	mov	r2, #0
   148bc:	cmp	lr, #0
   148c0:	mla	r7, r7, r5, ip
   148c4:	mvnne	r4, #0
   148c8:	mvnne	r7, #0
   148cc:	subs	r6, r0, r4
   148d0:	sbcs	r6, r1, r7
   148d4:	umull	r3, r6, r4, r5
   148d8:	movwcc	r2, #1
   148dc:	cmp	r2, #0
   148e0:	mvnne	r3, #0
   148e4:	cmp	r2, #0
   148e8:	str	r6, [sp, #16]
   148ec:	umull	r6, ip, r3, r5
   148f0:	mla	r1, r3, sl, ip
   148f4:	ldr	ip, [sp, #16]
   148f8:	str	r1, [sp, #12]
   148fc:	mla	r4, r4, sl, ip
   14900:	mla	r4, r7, r5, r4
   14904:	mvnne	r4, #0
   14908:	subs	r0, r0, r3
   1490c:	ldr	r0, [sp, #20]
   14910:	ldr	r7, [sp, #12]
   14914:	sbcs	r0, r0, r4
   14918:	mov	r0, #0
   1491c:	mla	r7, r4, r5, r7
   14920:	movwcc	r0, #1
   14924:	cmp	r0, #0
   14928:	mov	r1, r0
   1492c:	orr	r0, lr, r2
   14930:	mvnne	r7, #0
   14934:	mvnne	r6, #0
   14938:	b	14f84 <__assert_fail@plt+0x3f7c>
   1493c:	mov	r8, r0
   14940:	cmp	sl, #0
   14944:	bne	14610 <__assert_fail@plt+0x3608>
   14948:	b	151d8 <__assert_fail@plt+0x41d0>
   1494c:	cmp	r0, #105	; 0x69
   14950:	mov	r3, #0
   14954:	bne	14798 <__assert_fail@plt+0x3790>
   14958:	ldrb	r0, [r1, #2]
   1495c:	mov	r1, #1
   14960:	cmp	r0, #66	; 0x42
   14964:	movweq	r1, #3
   14968:	str	r1, [sp, #28]
   1496c:	sub	r0, r4, #66	; 0x42
   14970:	cmp	r0, #53	; 0x35
   14974:	bls	147a4 <__assert_fail@plt+0x379c>
   14978:	ldr	r0, [sp, #36]	; 0x24
   1497c:	orr	r8, r8, #2
   14980:	strd	r6, [r0]
   14984:	mov	r0, r8
   14988:	sub	sp, fp, #28
   1498c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14990:	mvn	r0, #0
   14994:	mvn	r1, #0
   14998:	mov	r2, r5
   1499c:	mov	r4, r3
   149a0:	bl	15714 <__assert_fail@plt+0x470c>
   149a4:	subs	r0, r0, r6
   149a8:	mov	r2, #0
   149ac:	sbcs	r0, r1, r7
   149b0:	umull	r0, r1, r6, r5
   149b4:	movwcc	r2, #1
   149b8:	cmp	r2, #0
   149bc:	mla	r1, r6, r4, r1
   149c0:	mov	r3, r2
   149c4:	mvnne	r0, #0
   149c8:	mla	r7, r7, r5, r1
   149cc:	mvnne	r7, #0
   149d0:	mov	r6, r0
   149d4:	b	151b8 <__assert_fail@plt+0x41b0>
   149d8:	mvn	r0, #0
   149dc:	mvn	r1, #0
   149e0:	mov	r2, r5
   149e4:	str	r3, [sp, #24]
   149e8:	bl	15714 <__assert_fail@plt+0x470c>
   149ec:	subs	r3, r0, r6
   149f0:	mov	ip, r0
   149f4:	umull	r4, r0, r6, r5
   149f8:	mov	sl, #0
   149fc:	sbcs	r3, r1, r7
   14a00:	mov	r3, #0
   14a04:	movwcc	r3, #1
   14a08:	cmp	r3, #0
   14a0c:	str	r0, [sp, #20]
   14a10:	ldr	r0, [sp, #24]
   14a14:	mvnne	r4, #0
   14a18:	cmp	r3, #0
   14a1c:	umull	lr, r2, r4, r5
   14a20:	mla	r2, r4, r0, r2
   14a24:	str	r2, [sp, #16]
   14a28:	ldr	r2, [sp, #20]
   14a2c:	mla	r6, r6, r0, r2
   14a30:	ldr	r0, [sp, #16]
   14a34:	mla	r6, r7, r5, r6
   14a38:	mvnne	r6, #0
   14a3c:	mla	r7, r6, r5, r0
   14a40:	subs	r0, ip, r4
   14a44:	sbcs	r0, r1, r6
   14a48:	movwcc	sl, #1
   14a4c:	cmp	sl, #0
   14a50:	orr	r3, r3, sl
   14a54:	mvnne	lr, #0
   14a58:	mvnne	r7, #0
   14a5c:	mov	r6, lr
   14a60:	b	151b8 <__assert_fail@plt+0x41b0>
   14a64:	mvn	r0, #0
   14a68:	mvn	r1, #0
   14a6c:	mov	r2, r5
   14a70:	mov	sl, r3
   14a74:	bl	15714 <__assert_fail@plt+0x470c>
   14a78:	subs	r3, r0, r6
   14a7c:	mov	ip, r1
   14a80:	umull	r2, lr, r6, r5
   14a84:	str	r0, [sp, #20]
   14a88:	sbcs	r3, r1, r7
   14a8c:	mov	r1, #0
   14a90:	str	ip, [sp, #16]
   14a94:	movwcc	r1, #1
   14a98:	mla	r6, r6, sl, lr
   14a9c:	mov	lr, #0
   14aa0:	cmp	r1, #0
   14aa4:	mla	r7, r7, r5, r6
   14aa8:	mvnne	r2, #0
   14aac:	cmp	r1, #0
   14ab0:	umull	r3, r4, r2, r5
   14ab4:	mvnne	r7, #0
   14ab8:	mla	r4, r2, sl, r4
   14abc:	subs	r2, r0, r2
   14ac0:	sbcs	r2, ip, r7
   14ac4:	mla	r4, r7, r5, r4
   14ac8:	mov	r2, #0
   14acc:	movwcc	lr, #1
   14ad0:	cmp	lr, #0
   14ad4:	mvnne	r3, #0
   14ad8:	mvnne	r4, #0
   14adc:	subs	r7, r0, r3
   14ae0:	mov	r0, r5
   14ae4:	sbcs	r7, ip, r4
   14ae8:	umull	r5, r7, r3, r5
   14aec:	movwcc	r2, #1
   14af0:	cmp	r2, #0
   14af4:	mla	r3, r3, sl, r7
   14af8:	mvnne	r5, #0
   14afc:	cmp	r2, #0
   14b00:	mla	r3, r4, r0, r3
   14b04:	umull	r6, ip, r5, r0
   14b08:	mvnne	r3, #0
   14b0c:	mla	ip, r5, sl, ip
   14b10:	mla	r7, r3, r0, ip
   14b14:	ldr	r0, [sp, #20]
   14b18:	subs	r0, r0, r5
   14b1c:	ldr	r0, [sp, #16]
   14b20:	sbcs	r0, r0, r3
   14b24:	mov	r0, #0
   14b28:	movwcc	r0, #1
   14b2c:	cmp	r0, #0
   14b30:	mov	r3, r0
   14b34:	orr	r0, r1, lr
   14b38:	orr	r0, r0, r2
   14b3c:	mvnne	r7, #0
   14b40:	mvnne	r6, #0
   14b44:	orr	r3, r0, r3
   14b48:	b	151b8 <__assert_fail@plt+0x41b0>
   14b4c:	mvn	r0, #0
   14b50:	mvn	r1, #0
   14b54:	mov	r2, r5
   14b58:	mov	r4, r3
   14b5c:	str	r3, [sp, #24]
   14b60:	bl	15714 <__assert_fail@plt+0x470c>
   14b64:	umull	r3, r2, r6, r5
   14b68:	mla	r2, r6, r4, r2
   14b6c:	subs	r6, r0, r6
   14b70:	sbcs	r6, r1, r7
   14b74:	mov	r6, #0
   14b78:	mla	r2, r7, r5, r2
   14b7c:	mov	r7, #0
   14b80:	movwcc	r6, #1
   14b84:	cmp	r6, #0
   14b88:	str	r6, [sp, #20]
   14b8c:	mvnne	r3, #0
   14b90:	mvnne	r2, #0
   14b94:	subs	r4, r0, r3
   14b98:	umull	r6, ip, r3, r5
   14b9c:	sbcs	r4, r1, r2
   14ba0:	ldr	r4, [sp, #24]
   14ba4:	movwcc	r7, #1
   14ba8:	cmp	r7, #0
   14bac:	mov	lr, r7
   14bb0:	str	r7, [sp, #16]
   14bb4:	mvnne	r6, #0
   14bb8:	cmp	lr, #0
   14bbc:	mov	lr, #0
   14bc0:	umull	sl, r7, r6, r5
   14bc4:	mla	r3, r3, r4, ip
   14bc8:	mla	r2, r2, r5, r3
   14bcc:	mvnne	r2, #0
   14bd0:	subs	r3, r0, r6
   14bd4:	mla	r7, r6, r4, r7
   14bd8:	mov	r4, r0
   14bdc:	mov	r0, #0
   14be0:	mla	r7, r2, r5, r7
   14be4:	sbcs	r2, r1, r2
   14be8:	mov	r3, r4
   14bec:	movwcc	r0, #1
   14bf0:	str	r3, [sp, #4]
   14bf4:	cmp	r0, #0
   14bf8:	str	r0, [sp, #12]
   14bfc:	mov	r0, r1
   14c00:	mvnne	sl, #0
   14c04:	mvnne	r7, #0
   14c08:	str	r0, [sp, #8]
   14c0c:	subs	r2, r4, sl
   14c10:	ldr	r4, [sp, #24]
   14c14:	sbcs	r2, r1, r7
   14c18:	umull	r6, r2, sl, r5
   14c1c:	movwcc	lr, #1
   14c20:	cmp	lr, #0
   14c24:	mvnne	r6, #0
   14c28:	mla	r2, sl, r4, r2
   14c2c:	cmp	lr, #0
   14c30:	umull	r1, ip, r6, r5
   14c34:	mla	r2, r7, r5, r2
   14c38:	mvnne	r2, #0
   14c3c:	mla	ip, r6, r4, ip
   14c40:	subs	r6, r3, r6
   14c44:	mla	r7, r2, r5, ip
   14c48:	sbcs	r2, r0, r2
   14c4c:	mov	ip, #0
   14c50:	mov	r2, #0
   14c54:	movwcc	ip, #1
   14c58:	cmp	ip, #0
   14c5c:	mvnne	r1, #0
   14c60:	mvnne	r7, #0
   14c64:	subs	r6, r3, r1
   14c68:	ldr	r3, [sp, #24]
   14c6c:	sbcs	r6, r0, r7
   14c70:	umull	r0, sl, r1, r5
   14c74:	movwcc	r2, #1
   14c78:	cmp	r2, #0
   14c7c:	mvnne	r0, #0
   14c80:	mla	r1, r1, r3, sl
   14c84:	cmp	r2, #0
   14c88:	umull	r6, r4, r0, r5
   14c8c:	mla	r1, r7, r5, r1
   14c90:	mvnne	r1, #0
   14c94:	mla	r4, r0, r3, r4
   14c98:	ldr	r3, [sp, #4]
   14c9c:	mla	r7, r1, r5, r4
   14ca0:	ldr	r5, [sp, #16]
   14ca4:	subs	r0, r3, r0
   14ca8:	ldr	r0, [sp, #8]
   14cac:	sbcs	r0, r0, r1
   14cb0:	mov	r0, #0
   14cb4:	movwcc	r0, #1
   14cb8:	cmp	r0, #0
   14cbc:	mov	r1, r0
   14cc0:	ldr	r0, [sp, #20]
   14cc4:	mvnne	r7, #0
   14cc8:	mvnne	r6, #0
   14ccc:	orr	r0, r0, r5
   14cd0:	ldr	r5, [sp, #12]
   14cd4:	orr	r0, r0, r5
   14cd8:	orr	r0, r0, lr
   14cdc:	orr	r0, r0, ip
   14ce0:	orr	r0, r0, r2
   14ce4:	b	15154 <__assert_fail@plt+0x414c>
   14ce8:	mov	r1, #0
   14cec:	lsl	r2, r7, #10
   14cf0:	lsl	r0, r6, #10
   14cf4:	lsr	r3, r7, #22
   14cf8:	cmp	r1, r7, lsr #22
   14cfc:	orr	r2, r2, r6, lsr #22
   14d00:	mvnne	r0, #0
   14d04:	movwne	r3, #1
   14d08:	cmp	r1, r7, lsr #22
   14d0c:	b	15184 <__assert_fail@plt+0x417c>
   14d10:	mvn	r0, #0
   14d14:	mvn	r1, #0
   14d18:	mov	r2, r5
   14d1c:	mov	sl, r3
   14d20:	bl	15714 <__assert_fail@plt+0x470c>
   14d24:	subs	r2, r0, r6
   14d28:	mov	ip, r0
   14d2c:	mov	r0, #0
   14d30:	sbcs	r2, r1, r7
   14d34:	umull	r4, r2, r6, r5
   14d38:	movwcc	r0, #1
   14d3c:	cmp	r0, #0
   14d40:	mla	r2, r6, sl, r2
   14d44:	str	r0, [sp, #20]
   14d48:	mvnne	r4, #0
   14d4c:	cmp	r0, #0
   14d50:	mla	r2, r7, r5, r2
   14d54:	mov	r0, #0
   14d58:	umull	lr, r3, r4, r5
   14d5c:	mvnne	r2, #0
   14d60:	mla	r3, r4, sl, r3
   14d64:	mla	r6, r2, r5, r3
   14d68:	subs	r3, ip, r4
   14d6c:	mov	r3, r1
   14d70:	sbcs	r2, r1, r2
   14d74:	str	r3, [sp, #8]
   14d78:	movwcc	r0, #1
   14d7c:	cmp	r0, #0
   14d80:	str	r0, [sp, #16]
   14d84:	mov	r0, ip
   14d88:	mvnne	lr, #0
   14d8c:	mvnne	r6, #0
   14d90:	str	r0, [sp, #12]
   14d94:	subs	r2, ip, lr
   14d98:	umull	r7, r4, lr, r5
   14d9c:	sbcs	r2, r1, r6
   14da0:	mov	r2, #0
   14da4:	movwcc	r2, #1
   14da8:	mla	r4, lr, sl, r4
   14dac:	cmp	r2, #0
   14db0:	mla	r6, r6, r5, r4
   14db4:	mov	r4, #0
   14db8:	mvnne	r7, #0
   14dbc:	cmp	r2, #0
   14dc0:	umull	r1, ip, r7, r5
   14dc4:	mvnne	r6, #0
   14dc8:	mla	ip, r7, sl, ip
   14dcc:	subs	r7, r0, r7
   14dd0:	sbcs	r7, r3, r6
   14dd4:	mla	lr, r6, r5, ip
   14dd8:	mov	ip, #0
   14ddc:	movwcc	ip, #1
   14de0:	cmp	ip, #0
   14de4:	mvnne	r1, #0
   14de8:	mvnne	lr, #0
   14dec:	subs	r7, r0, r1
   14df0:	sbcs	r7, r3, lr
   14df4:	umull	r0, r7, r1, r5
   14df8:	movwcc	r4, #1
   14dfc:	cmp	r4, #0
   14e00:	mla	r1, r1, sl, r7
   14e04:	mvnne	r0, #0
   14e08:	cmp	r4, #0
   14e0c:	mla	r1, lr, r5, r1
   14e10:	umull	r6, r3, r0, r5
   14e14:	mvnne	r1, #0
   14e18:	mla	r3, r0, sl, r3
   14e1c:	mla	r7, r1, r5, r3
   14e20:	ldr	r3, [sp, #12]
   14e24:	subs	r0, r3, r0
   14e28:	ldr	r0, [sp, #8]
   14e2c:	ldr	r3, [sp, #16]
   14e30:	sbcs	r0, r0, r1
   14e34:	mov	r0, #0
   14e38:	movwcc	r0, #1
   14e3c:	cmp	r0, #0
   14e40:	mov	r1, r0
   14e44:	ldr	r0, [sp, #20]
   14e48:	mvnne	r7, #0
   14e4c:	mvnne	r6, #0
   14e50:	orr	r0, r0, r3
   14e54:	orr	r0, r0, r2
   14e58:	orr	r0, r0, ip
   14e5c:	orr	r0, r0, r4
   14e60:	b	14f84 <__assert_fail@plt+0x3f7c>
   14e64:	mvn	r0, #0
   14e68:	mvn	r1, #0
   14e6c:	mov	r2, r5
   14e70:	mov	sl, r3
   14e74:	bl	15714 <__assert_fail@plt+0x470c>
   14e78:	umull	r3, r2, r6, r5
   14e7c:	mov	lr, r1
   14e80:	mov	r1, r0
   14e84:	mla	r2, r6, sl, r2
   14e88:	subs	r6, r0, r6
   14e8c:	mov	r0, #0
   14e90:	sbcs	r6, lr, r7
   14e94:	mla	r2, r7, r5, r2
   14e98:	movwcc	r0, #1
   14e9c:	cmp	r0, #0
   14ea0:	str	r0, [sp, #20]
   14ea4:	mov	r0, r1
   14ea8:	mvnne	r3, #0
   14eac:	mvnne	r2, #0
   14eb0:	str	r0, [sp, #16]
   14eb4:	subs	r4, r1, r3
   14eb8:	umull	r7, ip, r3, r5
   14ebc:	sbcs	r4, lr, r2
   14ec0:	mov	r4, #0
   14ec4:	movwcc	r4, #1
   14ec8:	mla	r3, r3, sl, ip
   14ecc:	mov	ip, #0
   14ed0:	cmp	r4, #0
   14ed4:	mla	r2, r2, r5, r3
   14ed8:	mvnne	r7, #0
   14edc:	cmp	r4, #0
   14ee0:	umull	r1, r6, r7, r5
   14ee4:	mvnne	r2, #0
   14ee8:	mla	r6, r7, sl, r6
   14eec:	mla	r3, r2, r5, r6
   14ef0:	subs	r6, r0, r7
   14ef4:	sbcs	r2, lr, r2
   14ef8:	mov	r2, #0
   14efc:	movwcc	ip, #1
   14f00:	cmp	ip, #0
   14f04:	mvnne	r1, #0
   14f08:	mvnne	r3, #0
   14f0c:	subs	r6, r0, r1
   14f10:	sbcs	r6, lr, r3
   14f14:	umull	r0, r6, r1, r5
   14f18:	movwcc	r2, #1
   14f1c:	cmp	r2, #0
   14f20:	mvnne	r0, #0
   14f24:	cmp	r2, #0
   14f28:	str	r6, [sp, #12]
   14f2c:	umull	r6, r7, r0, r5
   14f30:	mla	r7, r0, sl, r7
   14f34:	str	r7, [sp, #8]
   14f38:	ldr	r7, [sp, #12]
   14f3c:	mla	r1, r1, sl, r7
   14f40:	mla	r1, r3, r5, r1
   14f44:	ldr	r3, [sp, #8]
   14f48:	mvnne	r1, #0
   14f4c:	mla	r7, r1, r5, r3
   14f50:	ldr	r3, [sp, #16]
   14f54:	subs	r0, r3, r0
   14f58:	sbcs	r0, lr, r1
   14f5c:	mov	r0, #0
   14f60:	movwcc	r0, #1
   14f64:	cmp	r0, #0
   14f68:	mov	r1, r0
   14f6c:	ldr	r0, [sp, #20]
   14f70:	mvnne	r7, #0
   14f74:	mvnne	r6, #0
   14f78:	orr	r0, r0, r4
   14f7c:	orr	r0, r0, ip
   14f80:	orr	r0, r0, r2
   14f84:	orr	r3, r0, r1
   14f88:	b	151b8 <__assert_fail@plt+0x41b0>
   14f8c:	mvn	r0, #0
   14f90:	mvn	r1, #0
   14f94:	mov	r2, r5
   14f98:	mov	sl, r3
   14f9c:	bl	15714 <__assert_fail@plt+0x470c>
   14fa0:	mov	ip, r1
   14fa4:	subs	r1, r0, r6
   14fa8:	umull	r3, lr, r6, r5
   14fac:	mov	r2, r5
   14fb0:	sbcs	r1, ip, r7
   14fb4:	mov	r1, #0
   14fb8:	str	ip, [sp, #4]
   14fbc:	movwcc	r1, #1
   14fc0:	mla	r6, r6, sl, lr
   14fc4:	cmp	r1, #0
   14fc8:	mla	r7, r7, r2, r6
   14fcc:	str	r1, [sp, #20]
   14fd0:	mvnne	r3, #0
   14fd4:	cmp	r1, #0
   14fd8:	mov	r1, r0
   14fdc:	umull	r4, r5, r3, r5
   14fe0:	mvnne	r7, #0
   14fe4:	mov	lr, r1
   14fe8:	mla	r5, r3, sl, r5
   14fec:	subs	r3, r0, r3
   14ff0:	sbcs	r0, ip, r7
   14ff4:	mov	r0, #0
   14ff8:	mla	r5, r7, r2, r5
   14ffc:	movwcc	r0, #1
   15000:	cmp	r0, #0
   15004:	str	r0, [sp, #16]
   15008:	mvnne	r4, #0
   1500c:	mvnne	r5, #0
   15010:	subs	r0, r1, r4
   15014:	mov	r1, #0
   15018:	sbcs	r0, ip, r5
   1501c:	umull	r3, r0, r4, r2
   15020:	movwcc	r1, #1
   15024:	cmp	r1, #0
   15028:	mla	r0, r4, sl, r0
   1502c:	mov	r4, lr
   15030:	str	r1, [sp, #12]
   15034:	mvnne	r3, #0
   15038:	cmp	r1, #0
   1503c:	mla	r0, r5, r2, r0
   15040:	str	r4, [sp]
   15044:	umull	r7, r6, r3, r2
   15048:	mvnne	r0, #0
   1504c:	mla	r6, r3, sl, r6
   15050:	subs	r3, lr, r3
   15054:	mov	r3, #0
   15058:	mla	r5, r0, r2, r6
   1505c:	sbcs	r0, ip, r0
   15060:	mov	r0, #0
   15064:	movwcc	r0, #1
   15068:	cmp	r0, #0
   1506c:	str	r0, [sp, #8]
   15070:	mvnne	r7, #0
   15074:	mvnne	r5, #0
   15078:	subs	r0, lr, r7
   1507c:	sbcs	r0, ip, r5
   15080:	umull	r6, r0, r7, r2
   15084:	movwcc	r3, #1
   15088:	cmp	r3, #0
   1508c:	mla	r7, r7, sl, r0
   15090:	mov	r0, ip
   15094:	mvnne	r6, #0
   15098:	cmp	r3, #0
   1509c:	mla	r7, r5, r2, r7
   150a0:	mov	r5, #0
   150a4:	umull	r1, lr, r6, r2
   150a8:	mvnne	r7, #0
   150ac:	mla	lr, r6, sl, lr
   150b0:	subs	r6, r4, r6
   150b4:	mla	lr, r7, r2, lr
   150b8:	sbcs	r7, ip, r7
   150bc:	mov	ip, #0
   150c0:	movwcc	ip, #1
   150c4:	cmp	ip, #0
   150c8:	mvnne	r1, #0
   150cc:	mvnne	lr, #0
   150d0:	subs	r7, r4, r1
   150d4:	sbcs	r7, r0, lr
   150d8:	umull	r0, r7, r1, r2
   150dc:	movwcc	r5, #1
   150e0:	cmp	r5, #0
   150e4:	mla	r1, r1, sl, r7
   150e8:	mvnne	r0, #0
   150ec:	cmp	r5, #0
   150f0:	mla	r1, lr, r2, r1
   150f4:	umull	r6, r4, r0, r2
   150f8:	mvnne	r1, #0
   150fc:	mla	r4, r0, sl, r4
   15100:	mla	r7, r1, r2, r4
   15104:	ldr	r2, [sp]
   15108:	subs	r0, r2, r0
   1510c:	ldr	r0, [sp, #4]
   15110:	ldr	r2, [sp, #16]
   15114:	sbcs	r0, r0, r1
   15118:	mov	r0, #0
   1511c:	movwcc	r0, #1
   15120:	cmp	r0, #0
   15124:	mov	r1, r0
   15128:	ldr	r0, [sp, #20]
   1512c:	mvnne	r7, #0
   15130:	mvnne	r6, #0
   15134:	orr	r0, r0, r2
   15138:	ldr	r2, [sp, #12]
   1513c:	orr	r0, r0, r2
   15140:	ldr	r2, [sp, #8]
   15144:	orr	r0, r0, r2
   15148:	orr	r0, r0, r3
   1514c:	orr	r0, r0, ip
   15150:	orr	r0, r0, r5
   15154:	orr	r0, r0, r1
   15158:	and	r3, r0, #1
   1515c:	b	151b8 <__assert_fail@plt+0x41b0>
   15160:	mov	r1, #0
   15164:	lsl	r2, r7, #9
   15168:	lsl	r0, r6, #9
   1516c:	lsr	r3, r7, #23
   15170:	cmp	r1, r7, lsr #23
   15174:	orr	r2, r2, r6, lsr #23
   15178:	mvnne	r0, #0
   1517c:	movwne	r3, #1
   15180:	cmp	r1, r7, lsr #23
   15184:	mvnne	r2, #0
   15188:	mov	r6, r0
   1518c:	mov	r7, r2
   15190:	b	151b8 <__assert_fail@plt+0x41b0>
   15194:	lsl	r1, r7, #1
   15198:	cmp	r7, #0
   1519c:	lsl	r0, r6, #1
   151a0:	lsr	r3, r7, #31
   151a4:	orr	r1, r1, r6, lsr #31
   151a8:	mvnmi	r0, #0
   151ac:	mvnmi	r1, #0
   151b0:	mov	r6, r0
   151b4:	mov	r7, r1
   151b8:	ldr	r1, [sp, #32]
   151bc:	ldr	r2, [sp, #28]
   151c0:	orr	r8, r3, r8
   151c4:	add	r0, r1, r2
   151c8:	str	r0, [r9]
   151cc:	ldrb	r0, [r1, r2]
   151d0:	cmp	r0, #0
   151d4:	orrne	r8, r8, #2
   151d8:	ldr	r0, [sp, #36]	; 0x24
   151dc:	strd	r6, [r0]
   151e0:	mov	r0, r8
   151e4:	sub	sp, fp, #28
   151e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151ec:	movw	r0, #24901	; 0x6145
   151f0:	movw	r1, #24939	; 0x616b
   151f4:	movw	r3, #24955	; 0x617b
   151f8:	mov	r2, #85	; 0x55
   151fc:	movt	r0, #1
   15200:	movt	r1, #1
   15204:	movt	r3, #1
   15208:	bl	11008 <__assert_fail@plt>
   1520c:	clz	r2, r1
   15210:	clz	r3, r0
   15214:	lsr	r2, r2, #5
   15218:	lsr	r3, r3, #5
   1521c:	orrs	r2, r3, r2
   15220:	movwne	r1, #1
   15224:	movwne	r0, #1
   15228:	cmp	r1, #0
   1522c:	beq	1525c <__assert_fail@plt+0x4254>
   15230:	mvn	r2, #-2147483648	; 0x80000000
   15234:	udiv	r2, r2, r1
   15238:	cmp	r2, r0
   1523c:	bcs	1525c <__assert_fail@plt+0x4254>
   15240:	push	{fp, lr}
   15244:	mov	fp, sp
   15248:	bl	10f54 <__errno_location@plt>
   1524c:	mov	r1, #12
   15250:	str	r1, [r0]
   15254:	mov	r0, #0
   15258:	pop	{fp, pc}
   1525c:	b	10dbc <calloc@plt>
   15260:	cmp	r0, #0
   15264:	movweq	r0, #1
   15268:	cmn	r0, #1
   1526c:	ble	15274 <__assert_fail@plt+0x426c>
   15270:	b	10ed0 <malloc@plt>
   15274:	push	{fp, lr}
   15278:	mov	fp, sp
   1527c:	bl	10f54 <__errno_location@plt>
   15280:	mov	r1, #12
   15284:	str	r1, [r0]
   15288:	mov	r0, #0
   1528c:	pop	{fp, pc}
   15290:	push	{fp, lr}
   15294:	mov	fp, sp
   15298:	cmp	r0, #0
   1529c:	beq	152b8 <__assert_fail@plt+0x42b0>
   152a0:	cmp	r1, #0
   152a4:	beq	152c4 <__assert_fail@plt+0x42bc>
   152a8:	cmn	r1, #1
   152ac:	ble	152d0 <__assert_fail@plt+0x42c8>
   152b0:	pop	{fp, lr}
   152b4:	b	10e58 <realloc@plt>
   152b8:	mov	r0, r1
   152bc:	pop	{fp, lr}
   152c0:	b	15260 <__assert_fail@plt+0x4258>
   152c4:	bl	15460 <__assert_fail@plt+0x4458>
   152c8:	mov	r0, #0
   152cc:	pop	{fp, pc}
   152d0:	bl	10f54 <__errno_location@plt>
   152d4:	mov	r1, #12
   152d8:	str	r1, [r0]
   152dc:	mov	r0, #0
   152e0:	pop	{fp, pc}
   152e4:	push	{r4, r5, r6, sl, fp, lr}
   152e8:	add	fp, sp, #16
   152ec:	mov	r4, r0
   152f0:	bl	10ea0 <__fpending@plt>
   152f4:	ldr	r6, [r4]
   152f8:	mov	r5, r0
   152fc:	mov	r0, r4
   15300:	bl	15368 <__assert_fail@plt+0x4360>
   15304:	tst	r6, #32
   15308:	bne	15340 <__assert_fail@plt+0x4338>
   1530c:	cmp	r0, #0
   15310:	mov	r4, r0
   15314:	mvnne	r4, #0
   15318:	cmp	r5, #0
   1531c:	bne	1534c <__assert_fail@plt+0x4344>
   15320:	cmp	r0, #0
   15324:	beq	1534c <__assert_fail@plt+0x4344>
   15328:	bl	10f54 <__errno_location@plt>
   1532c:	ldr	r0, [r0]
   15330:	subs	r4, r0, #9
   15334:	mvnne	r4, #0
   15338:	mov	r0, r4
   1533c:	pop	{r4, r5, r6, sl, fp, pc}
   15340:	mvn	r4, #0
   15344:	cmp	r0, #0
   15348:	beq	15354 <__assert_fail@plt+0x434c>
   1534c:	mov	r0, r4
   15350:	pop	{r4, r5, r6, sl, fp, pc}
   15354:	bl	10f54 <__errno_location@plt>
   15358:	mov	r1, #0
   1535c:	str	r1, [r0]
   15360:	mov	r0, r4
   15364:	pop	{r4, r5, r6, sl, fp, pc}
   15368:	push	{r4, r5, r6, sl, fp, lr}
   1536c:	add	fp, sp, #16
   15370:	sub	sp, sp, #8
   15374:	mov	r4, r0
   15378:	bl	10f84 <fileno@plt>
   1537c:	cmn	r0, #1
   15380:	ble	153f4 <__assert_fail@plt+0x43ec>
   15384:	mov	r0, r4
   15388:	bl	10ee8 <__freading@plt>
   1538c:	cmp	r0, #0
   15390:	beq	153bc <__assert_fail@plt+0x43b4>
   15394:	mov	r0, r4
   15398:	bl	10f84 <fileno@plt>
   1539c:	mov	r1, #1
   153a0:	mov	r2, #0
   153a4:	mov	r3, #0
   153a8:	str	r1, [sp]
   153ac:	bl	10e88 <lseek64@plt>
   153b0:	and	r0, r0, r1
   153b4:	cmn	r0, #1
   153b8:	beq	153f4 <__assert_fail@plt+0x43ec>
   153bc:	mov	r0, r4
   153c0:	bl	15404 <__assert_fail@plt+0x43fc>
   153c4:	cmp	r0, #0
   153c8:	beq	153f4 <__assert_fail@plt+0x43ec>
   153cc:	bl	10f54 <__errno_location@plt>
   153d0:	ldr	r6, [r0]
   153d4:	mov	r5, r0
   153d8:	mov	r0, r4
   153dc:	bl	10f9c <fclose@plt>
   153e0:	cmp	r6, #0
   153e4:	strne	r6, [r5]
   153e8:	mvnne	r0, #0
   153ec:	sub	sp, fp, #16
   153f0:	pop	{r4, r5, r6, sl, fp, pc}
   153f4:	mov	r0, r4
   153f8:	sub	sp, fp, #16
   153fc:	pop	{r4, r5, r6, sl, fp, lr}
   15400:	b	10f9c <fclose@plt>
   15404:	push	{r4, sl, fp, lr}
   15408:	add	fp, sp, #8
   1540c:	sub	sp, sp, #8
   15410:	mov	r4, r0
   15414:	cmp	r0, #0
   15418:	beq	15450 <__assert_fail@plt+0x4448>
   1541c:	mov	r0, r4
   15420:	bl	10ee8 <__freading@plt>
   15424:	cmp	r0, #0
   15428:	beq	15450 <__assert_fail@plt+0x4448>
   1542c:	ldrb	r0, [r4, #1]
   15430:	tst	r0, #1
   15434:	beq	15450 <__assert_fail@plt+0x4448>
   15438:	mov	r0, #1
   1543c:	mov	r2, #0
   15440:	mov	r3, #0
   15444:	str	r0, [sp]
   15448:	mov	r0, r4
   1544c:	bl	15488 <__assert_fail@plt+0x4480>
   15450:	mov	r0, r4
   15454:	sub	sp, fp, #8
   15458:	pop	{r4, sl, fp, lr}
   1545c:	b	10dec <fflush@plt>
   15460:	push	{r4, r5, r6, sl, fp, lr}
   15464:	add	fp, sp, #16
   15468:	mov	r4, r0
   1546c:	bl	10f54 <__errno_location@plt>
   15470:	ldr	r6, [r0]
   15474:	mov	r5, r0
   15478:	mov	r0, r4
   1547c:	bl	10df8 <free@plt>
   15480:	str	r6, [r5]
   15484:	pop	{r4, r5, r6, sl, fp, pc}
   15488:	push	{r4, r5, r6, r7, fp, lr}
   1548c:	add	fp, sp, #16
   15490:	sub	sp, sp, #8
   15494:	mov	r4, r0
   15498:	ldr	r0, [r0, #4]
   1549c:	mov	r5, r3
   154a0:	mov	r6, r2
   154a4:	ldr	r1, [r4, #8]
   154a8:	cmp	r1, r0
   154ac:	bne	154c8 <__assert_fail@plt+0x44c0>
   154b0:	ldrd	r0, [r4, #16]
   154b4:	cmp	r1, r0
   154b8:	bne	154c8 <__assert_fail@plt+0x44c0>
   154bc:	ldr	r0, [r4, #36]	; 0x24
   154c0:	cmp	r0, #0
   154c4:	beq	154e0 <__assert_fail@plt+0x44d8>
   154c8:	mov	r0, r4
   154cc:	mov	r2, r6
   154d0:	mov	r3, r5
   154d4:	sub	sp, fp, #16
   154d8:	pop	{r4, r5, r6, r7, fp, lr}
   154dc:	b	10fa8 <fseeko64@plt>
   154e0:	ldr	r7, [fp, #8]
   154e4:	mov	r0, r4
   154e8:	bl	10f84 <fileno@plt>
   154ec:	mov	r2, r6
   154f0:	mov	r3, r5
   154f4:	str	r7, [sp]
   154f8:	bl	10e88 <lseek64@plt>
   154fc:	and	r2, r0, r1
   15500:	cmn	r2, #1
   15504:	beq	15524 <__assert_fail@plt+0x451c>
   15508:	strd	r0, [r4, #80]	; 0x50
   1550c:	ldr	r0, [r4]
   15510:	bic	r0, r0, #16
   15514:	str	r0, [r4]
   15518:	mov	r0, #0
   1551c:	sub	sp, fp, #16
   15520:	pop	{r4, r5, r6, r7, fp, pc}
   15524:	mvn	r0, #0
   15528:	sub	sp, fp, #16
   1552c:	pop	{r4, r5, r6, r7, fp, pc}
   15530:	push	{fp, lr}
   15534:	mov	fp, sp
   15538:	mov	r0, #14
   1553c:	bl	10fcc <nl_langinfo@plt>
   15540:	movw	r1, #22993	; 0x59d1
   15544:	cmp	r0, #0
   15548:	movt	r1, #1
   1554c:	movne	r1, r0
   15550:	movw	r0, #25034	; 0x61ca
   15554:	ldrb	r2, [r1]
   15558:	movt	r0, #1
   1555c:	cmp	r2, #0
   15560:	movne	r0, r1
   15564:	pop	{fp, pc}
   15568:	push	{r4, r5, r6, r7, fp, lr}
   1556c:	add	fp, sp, #16
   15570:	sub	sp, sp, #8
   15574:	cmp	r0, #0
   15578:	add	r5, sp, #4
   1557c:	mov	r7, r2
   15580:	mov	r4, r1
   15584:	movne	r5, r0
   15588:	mov	r0, r5
   1558c:	bl	10eac <mbrtowc@plt>
   15590:	mov	r6, r0
   15594:	cmp	r7, #0
   15598:	beq	155c0 <__assert_fail@plt+0x45b8>
   1559c:	cmn	r6, #2
   155a0:	bcc	155c0 <__assert_fail@plt+0x45b8>
   155a4:	mov	r0, #0
   155a8:	bl	15608 <__assert_fail@plt+0x4600>
   155ac:	cmp	r0, #0
   155b0:	bne	155c0 <__assert_fail@plt+0x45b8>
   155b4:	ldrb	r0, [r4]
   155b8:	mov	r6, #1
   155bc:	str	r0, [r5]
   155c0:	mov	r0, r6
   155c4:	sub	sp, fp, #16
   155c8:	pop	{r4, r5, r6, r7, fp, pc}
   155cc:	cmp	r2, #0
   155d0:	beq	15600 <__assert_fail@plt+0x45f8>
   155d4:	mvn	r3, #0
   155d8:	udiv	r3, r3, r2
   155dc:	cmp	r3, r1
   155e0:	bcs	15600 <__assert_fail@plt+0x45f8>
   155e4:	push	{fp, lr}
   155e8:	mov	fp, sp
   155ec:	bl	10f54 <__errno_location@plt>
   155f0:	mov	r1, #12
   155f4:	str	r1, [r0]
   155f8:	mov	r0, #0
   155fc:	pop	{fp, pc}
   15600:	mul	r1, r2, r1
   15604:	b	15290 <__assert_fail@plt+0x4288>
   15608:	push	{r4, sl, fp, lr}
   1560c:	add	fp, sp, #8
   15610:	sub	sp, sp, #264	; 0x108
   15614:	add	r1, sp, #7
   15618:	movw	r2, #257	; 0x101
   1561c:	bl	15674 <__assert_fail@plt+0x466c>
   15620:	mov	r4, #0
   15624:	cmp	r0, #0
   15628:	bne	15668 <__assert_fail@plt+0x4660>
   1562c:	movw	r1, #25040	; 0x61d0
   15630:	add	r0, sp, #7
   15634:	mov	r2, #2
   15638:	movt	r1, #1
   1563c:	bl	10f24 <bcmp@plt>
   15640:	cmp	r0, #0
   15644:	beq	15668 <__assert_fail@plt+0x4660>
   15648:	movw	r1, #25042	; 0x61d2
   1564c:	add	r0, sp, #7
   15650:	mov	r2, #6
   15654:	movt	r1, #1
   15658:	bl	10f24 <bcmp@plt>
   1565c:	cmp	r0, #0
   15660:	mov	r4, r0
   15664:	movwne	r4, #1
   15668:	mov	r0, r4
   1566c:	sub	sp, fp, #8
   15670:	pop	{r4, sl, fp, pc}
   15674:	push	{r4, r5, r6, r7, fp, lr}
   15678:	add	fp, sp, #16
   1567c:	mov	r4, r1
   15680:	mov	r1, #0
   15684:	mov	r6, r2
   15688:	bl	10fb4 <setlocale@plt>
   1568c:	cmp	r0, #0
   15690:	beq	156c0 <__assert_fail@plt+0x46b8>
   15694:	mov	r7, r0
   15698:	bl	10f3c <strlen@plt>
   1569c:	cmp	r0, r6
   156a0:	bcs	156dc <__assert_fail@plt+0x46d4>
   156a4:	add	r2, r0, #1
   156a8:	mov	r0, r4
   156ac:	mov	r1, r7
   156b0:	bl	10e10 <memcpy@plt>
   156b4:	mov	r5, #0
   156b8:	mov	r0, r5
   156bc:	pop	{r4, r5, r6, r7, fp, pc}
   156c0:	mov	r5, #22
   156c4:	cmp	r6, #0
   156c8:	beq	15704 <__assert_fail@plt+0x46fc>
   156cc:	mov	r0, #0
   156d0:	strb	r0, [r4]
   156d4:	mov	r0, r5
   156d8:	pop	{r4, r5, r6, r7, fp, pc}
   156dc:	mov	r5, #34	; 0x22
   156e0:	cmp	r6, #0
   156e4:	beq	15704 <__assert_fail@plt+0x46fc>
   156e8:	sub	r6, r6, #1
   156ec:	mov	r0, r4
   156f0:	mov	r1, r7
   156f4:	mov	r2, r6
   156f8:	bl	10e10 <memcpy@plt>
   156fc:	mov	r0, #0
   15700:	strb	r0, [r4, r6]
   15704:	mov	r0, r5
   15708:	pop	{r4, r5, r6, r7, fp, pc}
   1570c:	mov	r1, #0
   15710:	b	10fb4 <setlocale@plt>
   15714:	cmp	r3, #0
   15718:	cmpeq	r2, #0
   1571c:	bne	15734 <__assert_fail@plt+0x472c>
   15720:	cmp	r1, #0
   15724:	cmpeq	r0, #0
   15728:	mvnne	r1, #0
   1572c:	mvnne	r0, #0
   15730:	b	15750 <__assert_fail@plt+0x4748>
   15734:	sub	sp, sp, #8
   15738:	push	{sp, lr}
   1573c:	bl	15760 <__assert_fail@plt+0x4758>
   15740:	ldr	lr, [sp, #4]
   15744:	add	sp, sp, #8
   15748:	pop	{r2, r3}
   1574c:	bx	lr
   15750:	push	{r1, lr}
   15754:	mov	r0, #8
   15758:	bl	10dd4 <raise@plt>
   1575c:	pop	{r1, pc}
   15760:	cmp	r1, r3
   15764:	cmpeq	r0, r2
   15768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1576c:	mov	r4, r0
   15770:	movcc	r0, #0
   15774:	mov	r5, r1
   15778:	ldr	lr, [sp, #36]	; 0x24
   1577c:	movcc	r1, r0
   15780:	bcc	1587c <__assert_fail@plt+0x4874>
   15784:	cmp	r3, #0
   15788:	clzeq	ip, r2
   1578c:	clzne	ip, r3
   15790:	addeq	ip, ip, #32
   15794:	cmp	r5, #0
   15798:	clzeq	r1, r4
   1579c:	addeq	r1, r1, #32
   157a0:	clzne	r1, r5
   157a4:	sub	ip, ip, r1
   157a8:	sub	sl, ip, #32
   157ac:	lsl	r9, r3, ip
   157b0:	rsb	fp, ip, #32
   157b4:	orr	r9, r9, r2, lsl sl
   157b8:	orr	r9, r9, r2, lsr fp
   157bc:	lsl	r8, r2, ip
   157c0:	cmp	r5, r9
   157c4:	cmpeq	r4, r8
   157c8:	movcc	r0, #0
   157cc:	movcc	r1, r0
   157d0:	bcc	157ec <__assert_fail@plt+0x47e4>
   157d4:	mov	r0, #1
   157d8:	subs	r4, r4, r8
   157dc:	lsl	r1, r0, sl
   157e0:	orr	r1, r1, r0, lsr fp
   157e4:	lsl	r0, r0, ip
   157e8:	sbc	r5, r5, r9
   157ec:	cmp	ip, #0
   157f0:	beq	1587c <__assert_fail@plt+0x4874>
   157f4:	lsr	r6, r8, #1
   157f8:	orr	r6, r6, r9, lsl #31
   157fc:	lsr	r7, r9, #1
   15800:	mov	r2, ip
   15804:	b	15828 <__assert_fail@plt+0x4820>
   15808:	subs	r3, r4, r6
   1580c:	sbc	r8, r5, r7
   15810:	adds	r3, r3, r3
   15814:	adc	r8, r8, r8
   15818:	adds	r4, r3, #1
   1581c:	adc	r5, r8, #0
   15820:	subs	r2, r2, #1
   15824:	beq	15844 <__assert_fail@plt+0x483c>
   15828:	cmp	r5, r7
   1582c:	cmpeq	r4, r6
   15830:	bcs	15808 <__assert_fail@plt+0x4800>
   15834:	adds	r4, r4, r4
   15838:	adc	r5, r5, r5
   1583c:	subs	r2, r2, #1
   15840:	bne	15828 <__assert_fail@plt+0x4820>
   15844:	lsr	r3, r4, ip
   15848:	orr	r3, r3, r5, lsl fp
   1584c:	lsr	r2, r5, ip
   15850:	orr	r3, r3, r5, lsr sl
   15854:	adds	r0, r0, r4
   15858:	mov	r4, r3
   1585c:	lsl	r3, r2, ip
   15860:	orr	r3, r3, r4, lsl sl
   15864:	lsl	ip, r4, ip
   15868:	orr	r3, r3, r4, lsr fp
   1586c:	adc	r1, r1, r5
   15870:	subs	r0, r0, ip
   15874:	mov	r5, r2
   15878:	sbc	r1, r1, r3
   1587c:	cmp	lr, #0
   15880:	strdne	r4, [lr]
   15884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15888:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1588c:	mov	r7, r0
   15890:	ldr	r6, [pc, #72]	; 158e0 <__assert_fail@plt+0x48d8>
   15894:	ldr	r5, [pc, #72]	; 158e4 <__assert_fail@plt+0x48dc>
   15898:	add	r6, pc, r6
   1589c:	add	r5, pc, r5
   158a0:	sub	r6, r6, r5
   158a4:	mov	r8, r1
   158a8:	mov	r9, r2
   158ac:	bl	10d9c <calloc@plt-0x20>
   158b0:	asrs	r6, r6, #2
   158b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   158b8:	mov	r4, #0
   158bc:	add	r4, r4, #1
   158c0:	ldr	r3, [r5], #4
   158c4:	mov	r2, r9
   158c8:	mov	r1, r8
   158cc:	mov	r0, r7
   158d0:	blx	r3
   158d4:	cmp	r6, r4
   158d8:	bne	158bc <__assert_fail@plt+0x48b4>
   158dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158e0:	andeq	r1, r1, ip, ror #12
   158e4:	andeq	r1, r1, r4, ror #12
   158e8:	bx	lr
   158ec:	ldr	r3, [pc, #12]	; 15900 <__assert_fail@plt+0x48f8>
   158f0:	mov	r1, #0
   158f4:	add	r3, pc, r3
   158f8:	ldr	r2, [r3]
   158fc:	b	10f60 <__cxa_atexit@plt>
   15900:	andeq	r1, r1, r0, ror #15

Disassembly of section .fini:

00015904 <.fini>:
   15904:	push	{r3, lr}
   15908:	pop	{r3, pc}
