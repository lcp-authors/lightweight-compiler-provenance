
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010f7c <.init>:
   10f7c:	push	{r3, lr}
   10f80:	bl	11290 <__assert_fail@plt+0x48>
   10f84:	pop	{r3, pc}

Disassembly of section .plt:

00010f88 <calloc@plt-0x14>:
   10f88:	push	{lr}		; (str lr, [sp, #-4]!)
   10f8c:	ldr	lr, [pc, #4]	; 10f98 <calloc@plt-0x4>
   10f90:	add	lr, pc, lr
   10f94:	ldr	pc, [lr, #8]!
   10f98:	andeq	r7, r1, r8, rrx

00010f9c <calloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #104]!	; 0x68

00010fa8 <fputs_unlocked@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #96]!	; 0x60

00010fb4 <strcmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #88]!	; 0x58

00010fc0 <posix_fadvise64@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #80]!	; 0x50

00010fcc <fflush@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #72]!	; 0x48

00010fd8 <memmove@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #64]!	; 0x40

00010fe4 <free@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #56]!	; 0x38

00010ff0 <ferror@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #48]!	; 0x30

00010ffc <_exit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #40]!	; 0x28

00011008 <memcpy@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #32]!

00011014 <mbsinit@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #24]!

00011020 <fwrite_unlocked@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #16]!

0001102c <getc_unlocked@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #8]!

00011038 <dcgettext@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #0]!

00011044 <realloc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #4088]!	; 0xff8

00011050 <textdomain@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #4080]!	; 0xff0

0001105c <iswprint@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #4072]!	; 0xfe8

00011068 <fwrite@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #4064]!	; 0xfe0

00011074 <lseek64@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #4056]!	; 0xfd8

00011080 <__ctype_get_mb_cur_max@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #4048]!	; 0xfd0

0001108c <fread@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #4040]!	; 0xfc8

00011098 <__fpending@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #4032]!	; 0xfc0

000110a4 <ferror_unlocked@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #4024]!	; 0xfb8

000110b0 <mbrtowc@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #4016]!	; 0xfb0

000110bc <error@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4008]!	; 0xfa8

000110c8 <malloc@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4000]!	; 0xfa0

000110d4 <__libc_start_main@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #3992]!	; 0xf98

000110e0 <__freading@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3984]!	; 0xf90

000110ec <__gmon_start__@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3976]!	; 0xf88

000110f8 <getopt_long@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3968]!	; 0xf80

00011104 <__ctype_b_loc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3960]!	; 0xf78

00011110 <exit@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3952]!	; 0xf70

0001111c <bcmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3944]!	; 0xf68

00011128 <strlen@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3936]!	; 0xf60

00011134 <ungetc@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3928]!	; 0xf58

00011140 <__errno_location@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3920]!	; 0xf50

0001114c <__cxa_atexit@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3912]!	; 0xf48

00011158 <memset@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3904]!	; 0xf40

00011164 <fgetc@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3896]!	; 0xf38

00011170 <__printf_chk@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3888]!	; 0xf30

0001117c <fileno@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3880]!	; 0xf28

00011188 <__fprintf_chk@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3872]!	; 0xf20

00011194 <memchr@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3864]!	; 0xf18

000111a0 <fclose@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3856]!	; 0xf10

000111ac <fseeko64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3848]!	; 0xf08

000111b8 <setlocale@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3840]!	; 0xf00

000111c4 <strrchr@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3832]!	; 0xef8

000111d0 <nl_langinfo@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3824]!	; 0xef0

000111dc <clearerr_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3816]!	; 0xee8

000111e8 <fopen64@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3808]!	; 0xee0

000111f4 <qsort@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3800]!	; 0xed8

00011200 <bindtextdomain@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3792]!	; 0xed0

0001120c <strncmp@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3784]!	; 0xec8

00011218 <abort@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3776]!	; 0xec0

00011224 <feof_unlocked@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011230 <putchar_unlocked@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3760]!	; 0xeb0

0001123c <strspn@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3752]!	; 0xea8

00011248 <__assert_fail@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3744]!	; 0xea0

Disassembly of section .text:

00011254 <.text>:
   11254:	mov	fp, #0
   11258:	mov	lr, #0
   1125c:	pop	{r1}		; (ldr r1, [sp], #4)
   11260:	mov	r2, sp
   11264:	push	{r2}		; (str r2, [sp, #-4]!)
   11268:	push	{r0}		; (str r0, [sp, #-4]!)
   1126c:	ldr	ip, [pc, #16]	; 11284 <__assert_fail@plt+0x3c>
   11270:	push	{ip}		; (str ip, [sp, #-4]!)
   11274:	ldr	r0, [pc, #12]	; 11288 <__assert_fail@plt+0x40>
   11278:	ldr	r3, [pc, #12]	; 1128c <__assert_fail@plt+0x44>
   1127c:	bl	110d4 <__libc_start_main@plt>
   11280:	bl	11218 <abort@plt>
   11284:	andeq	r5, r1, r0, lsr pc
   11288:	andeq	r1, r1, r4, ror #13
   1128c:	ldrdeq	r5, [r1], -r0
   11290:	ldr	r3, [pc, #20]	; 112ac <__assert_fail@plt+0x64>
   11294:	ldr	r2, [pc, #20]	; 112b0 <__assert_fail@plt+0x68>
   11298:	add	r3, pc, r3
   1129c:	ldr	r2, [r3, r2]
   112a0:	cmp	r2, #0
   112a4:	bxeq	lr
   112a8:	b	110ec <__gmon_start__@plt>
   112ac:	andeq	r6, r1, r0, ror #26
   112b0:	strdeq	r0, [r0], -r4
   112b4:	ldr	r0, [pc, #24]	; 112d4 <__assert_fail@plt+0x8c>
   112b8:	ldr	r3, [pc, #24]	; 112d8 <__assert_fail@plt+0x90>
   112bc:	cmp	r3, r0
   112c0:	bxeq	lr
   112c4:	ldr	r3, [pc, #16]	; 112dc <__assert_fail@plt+0x94>
   112c8:	cmp	r3, #0
   112cc:	bxeq	lr
   112d0:	bx	r3
   112d4:	andeq	r8, r2, r8, asr #2
   112d8:	andeq	r8, r2, r8, asr #2
   112dc:	andeq	r0, r0, r0
   112e0:	ldr	r0, [pc, #36]	; 1130c <__assert_fail@plt+0xc4>
   112e4:	ldr	r1, [pc, #36]	; 11310 <__assert_fail@plt+0xc8>
   112e8:	sub	r1, r1, r0
   112ec:	asr	r1, r1, #2
   112f0:	add	r1, r1, r1, lsr #31
   112f4:	asrs	r1, r1, #1
   112f8:	bxeq	lr
   112fc:	ldr	r3, [pc, #16]	; 11314 <__assert_fail@plt+0xcc>
   11300:	cmp	r3, #0
   11304:	bxeq	lr
   11308:	bx	r3
   1130c:	andeq	r8, r2, r8, asr #2
   11310:	andeq	r8, r2, r8, asr #2
   11314:	andeq	r0, r0, r0
   11318:	push	{r4, lr}
   1131c:	ldr	r4, [pc, #24]	; 1133c <__assert_fail@plt+0xf4>
   11320:	ldrb	r3, [r4]
   11324:	cmp	r3, #0
   11328:	popne	{r4, pc}
   1132c:	bl	112b4 <__assert_fail@plt+0x6c>
   11330:	mov	r3, #1
   11334:	strb	r3, [r4]
   11338:	pop	{r4, pc}
   1133c:	andeq	r8, r2, ip, ror #2
   11340:	b	112e0 <__assert_fail@plt+0x98>
   11344:	push	{fp, lr}
   11348:	mov	fp, sp
   1134c:	mov	r4, r0
   11350:	cmp	r0, #0
   11354:	bne	114b8 <__assert_fail@plt+0x270>
   11358:	movw	r1, #24451	; 0x5f83
   1135c:	movt	r1, #1
   11360:	mov	r0, #0
   11364:	mov	r2, #5
   11368:	bl	11038 <dcgettext@plt>
   1136c:	mov	r1, r0
   11370:	movw	r0, #33180	; 0x819c
   11374:	movt	r0, #2
   11378:	ldr	r2, [r0]
   1137c:	mov	r0, #1
   11380:	bl	11170 <__printf_chk@plt>
   11384:	movw	r1, #24482	; 0x5fa2
   11388:	movt	r1, #1
   1138c:	mov	r0, #0
   11390:	mov	r2, #5
   11394:	bl	11038 <dcgettext@plt>
   11398:	movw	r5, #33124	; 0x8164
   1139c:	movt	r5, #2
   113a0:	ldr	r1, [r5]
   113a4:	bl	10fa8 <fputs_unlocked@plt>
   113a8:	bl	114fc <__assert_fail@plt+0x2b4>
   113ac:	bl	1152c <__assert_fail@plt+0x2e4>
   113b0:	movw	r1, #24548	; 0x5fe4
   113b4:	movt	r1, #1
   113b8:	mov	r0, #0
   113bc:	mov	r2, #5
   113c0:	bl	11038 <dcgettext@plt>
   113c4:	ldr	r1, [r5]
   113c8:	bl	10fa8 <fputs_unlocked@plt>
   113cc:	movw	r1, #24725	; 0x6095
   113d0:	movt	r1, #1
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	bl	11038 <dcgettext@plt>
   113e0:	ldr	r1, [r5]
   113e4:	bl	10fa8 <fputs_unlocked@plt>
   113e8:	movw	r1, #24963	; 0x6183
   113ec:	movt	r1, #1
   113f0:	mov	r0, #0
   113f4:	mov	r2, #5
   113f8:	bl	11038 <dcgettext@plt>
   113fc:	ldr	r1, [r5]
   11400:	bl	10fa8 <fputs_unlocked@plt>
   11404:	movw	r1, #25077	; 0x61f5
   11408:	movt	r1, #1
   1140c:	mov	r0, #0
   11410:	mov	r2, #5
   11414:	bl	11038 <dcgettext@plt>
   11418:	ldr	r1, [r5]
   1141c:	bl	10fa8 <fputs_unlocked@plt>
   11420:	movw	r1, #25287	; 0x62c7
   11424:	movt	r1, #1
   11428:	mov	r0, #0
   1142c:	mov	r2, #5
   11430:	bl	11038 <dcgettext@plt>
   11434:	ldr	r1, [r5]
   11438:	bl	10fa8 <fputs_unlocked@plt>
   1143c:	movw	r1, #25350	; 0x6306
   11440:	movt	r1, #1
   11444:	mov	r0, #0
   11448:	mov	r2, #5
   1144c:	bl	11038 <dcgettext@plt>
   11450:	ldr	r1, [r5]
   11454:	bl	10fa8 <fputs_unlocked@plt>
   11458:	movw	r1, #25395	; 0x6333
   1145c:	movt	r1, #1
   11460:	mov	r0, #0
   11464:	mov	r2, #5
   11468:	bl	11038 <dcgettext@plt>
   1146c:	ldr	r1, [r5]
   11470:	bl	10fa8 <fputs_unlocked@plt>
   11474:	movw	r1, #25449	; 0x6369
   11478:	movt	r1, #1
   1147c:	mov	r0, #0
   11480:	mov	r2, #5
   11484:	bl	11038 <dcgettext@plt>
   11488:	ldr	r1, [r5]
   1148c:	bl	10fa8 <fputs_unlocked@plt>
   11490:	movw	r1, #25653	; 0x6435
   11494:	movt	r1, #1
   11498:	mov	r0, #0
   1149c:	mov	r2, #5
   114a0:	bl	11038 <dcgettext@plt>
   114a4:	ldr	r1, [r5]
   114a8:	bl	10fa8 <fputs_unlocked@plt>
   114ac:	bl	1155c <__assert_fail@plt+0x314>
   114b0:	mov	r0, r4
   114b4:	bl	11110 <exit@plt>
   114b8:	movw	r0, #33112	; 0x8158
   114bc:	movt	r0, #2
   114c0:	ldr	r5, [r0]
   114c4:	movw	r1, #24412	; 0x5f5c
   114c8:	movt	r1, #1
   114cc:	mov	r0, #0
   114d0:	mov	r2, #5
   114d4:	bl	11038 <dcgettext@plt>
   114d8:	mov	r2, r0
   114dc:	movw	r0, #33180	; 0x819c
   114e0:	movt	r0, #2
   114e4:	ldr	r3, [r0]
   114e8:	mov	r0, r5
   114ec:	mov	r1, #1
   114f0:	bl	11188 <__fprintf_chk@plt>
   114f4:	mov	r0, r4
   114f8:	bl	11110 <exit@plt>
   114fc:	push	{fp, lr}
   11500:	mov	fp, sp
   11504:	movw	r1, #26282	; 0x66aa
   11508:	movt	r1, #1
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	bl	11038 <dcgettext@plt>
   11518:	movw	r1, #33124	; 0x8164
   1151c:	movt	r1, #2
   11520:	ldr	r1, [r1]
   11524:	pop	{fp, lr}
   11528:	b	10fa8 <fputs_unlocked@plt>
   1152c:	push	{fp, lr}
   11530:	mov	fp, sp
   11534:	movw	r1, #26338	; 0x66e2
   11538:	movt	r1, #1
   1153c:	mov	r0, #0
   11540:	mov	r2, #5
   11544:	bl	11038 <dcgettext@plt>
   11548:	movw	r1, #33124	; 0x8164
   1154c:	movt	r1, #2
   11550:	ldr	r1, [r1]
   11554:	pop	{fp, lr}
   11558:	b	10fa8 <fputs_unlocked@plt>
   1155c:	push	{r4, r5, r6, sl, fp, lr}
   11560:	add	fp, sp, #16
   11564:	sub	sp, sp, #56	; 0x38
   11568:	movw	r0, #27040	; 0x69a0
   1156c:	movt	r0, #1
   11570:	add	r1, r0, #32
   11574:	mov	r2, #48	; 0x30
   11578:	vld1.64	{d16-d17}, [r1]
   1157c:	mov	r6, sp
   11580:	add	r1, r6, #32
   11584:	add	r3, r0, #16
   11588:	vld1.64	{d18-d19}, [r0], r2
   1158c:	vld1.64	{d20-d21}, [r3]
   11590:	vldr	d22, [r0]
   11594:	vst1.64	{d16-d17}, [r1]
   11598:	add	r0, r6, #16
   1159c:	vst1.64	{d20-d21}, [r0]
   115a0:	mov	r0, r6
   115a4:	vst1.64	{d18-d19}, [r0], r2
   115a8:	vstr	d22, [r0]
   115ac:	ldr	r1, [sp]
   115b0:	cmp	r1, #0
   115b4:	movw	r4, #25915	; 0x653b
   115b8:	movt	r4, #1
   115bc:	beq	115e4 <__assert_fail@plt+0x39c>
   115c0:	mov	r6, sp
   115c4:	movw	r5, #25915	; 0x653b
   115c8:	movt	r5, #1
   115cc:	mov	r0, r5
   115d0:	bl	10fb4 <strcmp@plt>
   115d4:	cmp	r0, #0
   115d8:	ldrne	r1, [r6, #8]!
   115dc:	cmpne	r1, #0
   115e0:	bne	115cc <__assert_fail@plt+0x384>
   115e4:	ldr	r5, [r6, #4]
   115e8:	movw	r1, #26508	; 0x678c
   115ec:	movt	r1, #1
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	bl	11038 <dcgettext@plt>
   115fc:	mov	r1, r0
   11600:	movw	r2, #26027	; 0x65ab
   11604:	movt	r2, #1
   11608:	movw	r3, #26531	; 0x67a3
   1160c:	movt	r3, #1
   11610:	mov	r0, #1
   11614:	bl	11170 <__printf_chk@plt>
   11618:	cmp	r5, #0
   1161c:	moveq	r5, r4
   11620:	mov	r0, #5
   11624:	mov	r1, #0
   11628:	bl	111b8 <setlocale@plt>
   1162c:	cmp	r0, #0
   11630:	beq	11670 <__assert_fail@plt+0x428>
   11634:	movw	r1, #26571	; 0x67cb
   11638:	movt	r1, #1
   1163c:	mov	r2, #3
   11640:	bl	1120c <strncmp@plt>
   11644:	cmp	r0, #0
   11648:	beq	11670 <__assert_fail@plt+0x428>
   1164c:	movw	r1, #26575	; 0x67cf
   11650:	movt	r1, #1
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	bl	11038 <dcgettext@plt>
   11660:	movw	r1, #33124	; 0x8164
   11664:	movt	r1, #2
   11668:	ldr	r1, [r1]
   1166c:	bl	10fa8 <fputs_unlocked@plt>
   11670:	movw	r1, #26646	; 0x6816
   11674:	movt	r1, #1
   11678:	mov	r0, #0
   1167c:	mov	r2, #5
   11680:	bl	11038 <dcgettext@plt>
   11684:	mov	r1, r0
   11688:	movw	r2, #26531	; 0x67a3
   1168c:	movt	r2, #1
   11690:	mov	r0, #1
   11694:	mov	r3, r4
   11698:	bl	11170 <__printf_chk@plt>
   1169c:	movw	r0, #26441	; 0x6749
   116a0:	movt	r0, #1
   116a4:	movw	r6, #26723	; 0x6863
   116a8:	movt	r6, #1
   116ac:	cmp	r5, r4
   116b0:	moveq	r6, r0
   116b4:	movw	r1, #26673	; 0x6831
   116b8:	movt	r1, #1
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	bl	11038 <dcgettext@plt>
   116c8:	mov	r1, r0
   116cc:	mov	r0, #1
   116d0:	mov	r2, r5
   116d4:	mov	r3, r6
   116d8:	sub	sp, fp, #16
   116dc:	pop	{r4, r5, r6, sl, fp, lr}
   116e0:	b	11170 <__printf_chk@plt>
   116e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e8:	add	fp, sp, #28
   116ec:	sub	sp, sp, #20
   116f0:	mov	sl, r1
   116f4:	mov	r5, r0
   116f8:	ldr	r0, [r1]
   116fc:	bl	131bc <__assert_fail@plt+0x1f74>
   11700:	movw	r1, #26723	; 0x6863
   11704:	movt	r1, #1
   11708:	mov	r0, #6
   1170c:	bl	111b8 <setlocale@plt>
   11710:	movw	r6, #26031	; 0x65af
   11714:	movt	r6, #1
   11718:	movw	r1, #25919	; 0x653f
   1171c:	movt	r1, #1
   11720:	mov	r0, r6
   11724:	bl	11200 <bindtextdomain@plt>
   11728:	mov	r0, r6
   1172c:	bl	11050 <textdomain@plt>
   11730:	movw	r0, #10884	; 0x2a84
   11734:	movt	r0, #1
   11738:	bl	15f34 <__assert_fail@plt+0x4cec>
   1173c:	movw	r0, #33136	; 0x8170
   11740:	movt	r0, #2
   11744:	mov	r8, #0
   11748:	strb	r8, [r0]
   1174c:	movw	r0, #33137	; 0x8171
   11750:	movt	r0, #2
   11754:	strb	r8, [r0]
   11758:	movw	r0, #33138	; 0x8172
   1175c:	movt	r0, #2
   11760:	strb	r8, [r0]
   11764:	movw	r2, #25943	; 0x6557
   11768:	movt	r2, #1
   1176c:	movw	r3, #26864	; 0x68f0
   11770:	movt	r3, #1
   11774:	mov	r4, #0
   11778:	mov	r9, #0
   1177c:	mov	r6, #0
   11780:	str	r8, [sp]
   11784:	mov	r0, r5
   11788:	mov	r1, sl
   1178c:	bl	110f8 <getopt_long@plt>
   11790:	cmp	r0, #97	; 0x61
   11794:	ble	11928 <__assert_fail@plt+0x6e0>
   11798:	sub	r1, r0, #98	; 0x62
   1179c:	cmp	r1, #24
   117a0:	bhi	1183c <__assert_fail@plt+0x5f4>
   117a4:	add	r0, pc, #16
   117a8:	movw	r2, #25943	; 0x6557
   117ac:	movt	r2, #1
   117b0:	movw	r3, #26864	; 0x68f0
   117b4:	movt	r3, #1
   117b8:	ldr	pc, [r0, r1, lsl #2]
   117bc:	andeq	r1, r1, r0, lsr #16
   117c0:	andeq	r1, r1, r0, lsr #16
   117c4:	muleq	r1, r8, r8
   117c8:	andeq	r1, r1, r8, lsr fp
   117cc:	andeq	r1, r1, r4, lsr #16
   117d0:	andeq	r1, r1, r8, lsr fp
   117d4:	andeq	r1, r1, r8, lsr fp
   117d8:	andeq	r1, r1, r8, lsr fp
   117dc:	andeq	r1, r1, r8, lsr fp
   117e0:	andeq	r1, r1, r8, lsr fp
   117e4:	andeq	r1, r1, r8, lsr fp
   117e8:	andeq	r1, r1, r8, lsr fp
   117ec:	andeq	r1, r1, r0, lsl #15
   117f0:	andeq	r1, r1, r8, lsr fp
   117f4:	andeq	r1, r1, r8, lsr fp
   117f8:	andeq	r1, r1, r8, lsr fp
   117fc:	andeq	r1, r1, r8, lsr fp
   11800:	ldrdeq	r1, [r1], -r0
   11804:	andeq	r1, r1, r8, lsr fp
   11808:	andeq	r1, r1, r8, lsr fp
   1180c:	andeq	r1, r1, r8, lsr fp
   11810:	andeq	r1, r1, r8, lsr fp
   11814:	andeq	r1, r1, r8, lsr fp
   11818:	andeq	r1, r1, r8, lsr fp
   1181c:	andeq	r1, r1, r4, lsl #17
   11820:	mov	r9, #1
   11824:	cmp	r6, #0
   11828:	bne	11b14 <__assert_fail@plt+0x8cc>
   1182c:	movw	r0, #33128	; 0x8168
   11830:	movt	r0, #2
   11834:	ldr	r6, [r0]
   11838:	b	11780 <__assert_fail@plt+0x538>
   1183c:	cmp	r0, #256	; 0x100
   11840:	movw	r2, #25943	; 0x6557
   11844:	movt	r2, #1
   11848:	movw	r3, #26864	; 0x68f0
   1184c:	movt	r3, #1
   11850:	bne	118dc <__assert_fail@plt+0x694>
   11854:	movw	r0, #33128	; 0x8168
   11858:	movt	r0, #2
   1185c:	ldr	r0, [r0]
   11860:	ldrb	r1, [r0]
   11864:	cmp	r1, #0
   11868:	beq	118fc <__assert_fail@plt+0x6b4>
   1186c:	bl	11128 <strlen@plt>
   11870:	movw	r3, #26864	; 0x68f0
   11874:	movt	r3, #1
   11878:	movw	r2, #25943	; 0x6557
   1187c:	movt	r2, #1
   11880:	b	11900 <__assert_fail@plt+0x6b8>
   11884:	mov	r0, #1
   11888:	movw	r1, #33148	; 0x817c
   1188c:	movt	r1, #2
   11890:	strb	r0, [r1]
   11894:	b	11780 <__assert_fail@plt+0x538>
   11898:	movw	r0, #33128	; 0x8168
   1189c:	movt	r0, #2
   118a0:	ldr	r1, [r0]
   118a4:	ldrb	r0, [r1]
   118a8:	cmp	r0, #0
   118ac:	beq	118bc <__assert_fail@plt+0x674>
   118b0:	ldrb	r1, [r1, #1]
   118b4:	cmp	r1, #0
   118b8:	bne	11b20 <__assert_fail@plt+0x8d8>
   118bc:	movw	r1, #33137	; 0x8171
   118c0:	movt	r1, #2
   118c4:	strb	r0, [r1]
   118c8:	mov	r4, #1
   118cc:	b	11780 <__assert_fail@plt+0x538>
   118d0:	movw	r0, #33136	; 0x8170
   118d4:	movt	r0, #2
   118d8:	b	118f0 <__assert_fail@plt+0x6a8>
   118dc:	movw	r1, #257	; 0x101
   118e0:	cmp	r0, r1
   118e4:	bne	11b38 <__assert_fail@plt+0x8f0>
   118e8:	movw	r0, #33149	; 0x817d
   118ec:	movt	r0, #2
   118f0:	mov	r1, #1
   118f4:	strb	r1, [r0]
   118f8:	b	11780 <__assert_fail@plt+0x538>
   118fc:	mov	r0, #1
   11900:	movw	r1, #33140	; 0x8174
   11904:	movt	r1, #2
   11908:	str	r0, [r1]
   1190c:	movw	r0, #33128	; 0x8168
   11910:	movt	r0, #2
   11914:	ldr	r0, [r0]
   11918:	movw	r1, #33144	; 0x8178
   1191c:	movt	r1, #2
   11920:	str	r0, [r1]
   11924:	b	11780 <__assert_fail@plt+0x538>
   11928:	cmn	r0, #1
   1192c:	bne	11aa0 <__assert_fail@plt+0x858>
   11930:	cmp	r6, #0
   11934:	beq	11b2c <__assert_fail@plt+0x8e4>
   11938:	tst	r9, #1
   1193c:	beq	1195c <__assert_fail@plt+0x714>
   11940:	tst	r4, #1
   11944:	bne	11b40 <__assert_fail@plt+0x8f8>
   11948:	movw	r0, #33136	; 0x8170
   1194c:	movt	r0, #2
   11950:	ldrb	r0, [r0]
   11954:	cmp	r0, #1
   11958:	beq	11b4c <__assert_fail@plt+0x904>
   1195c:	movw	r0, #33149	; 0x817d
   11960:	movt	r0, #2
   11964:	ldrb	r0, [r0]
   11968:	ands	r1, r9, #1
   1196c:	movwne	r1, #4
   11970:	bfi	r1, r0, #1, #1
   11974:	mov	r0, r6
   11978:	bl	123a0 <__assert_fail@plt+0x1158>
   1197c:	tst	r4, #1
   11980:	moveq	r0, #9
   11984:	movweq	r1, #33137	; 0x8171
   11988:	movteq	r1, #2
   1198c:	strbeq	r0, [r1]
   11990:	movw	r1, #33144	; 0x8178
   11994:	movt	r1, #2
   11998:	ldr	r0, [r1]
   1199c:	cmp	r0, #0
   119a0:	bne	119d0 <__assert_fail@plt+0x788>
   119a4:	movw	r0, #33488	; 0x82d0
   119a8:	movt	r0, #2
   119ac:	str	r0, [r1]
   119b0:	mov	r1, #1
   119b4:	movw	r2, #33140	; 0x8174
   119b8:	movt	r2, #2
   119bc:	str	r1, [r2]
   119c0:	movw	r1, #33137	; 0x8171
   119c4:	movt	r1, #2
   119c8:	ldrb	r1, [r1]
   119cc:	strb	r1, [r0]
   119d0:	movw	r0, #7032	; 0x1b78
   119d4:	movt	r0, #1
   119d8:	movw	r7, #7396	; 0x1ce4
   119dc:	movt	r7, #1
   119e0:	tst	r9, #1
   119e4:	movne	r7, r0
   119e8:	movw	r4, #33104	; 0x8150
   119ec:	movt	r4, #2
   119f0:	ldr	r0, [r4]
   119f4:	cmp	r0, r5
   119f8:	bne	11a14 <__assert_fail@plt+0x7cc>
   119fc:	movw	r0, #27252	; 0x6a74
   11a00:	movt	r0, #1
   11a04:	mov	r1, r7
   11a08:	bl	121f0 <__assert_fail@plt+0xfa8>
   11a0c:	mov	r6, r0
   11a10:	b	11a4c <__assert_fail@plt+0x804>
   11a14:	ldr	r1, [r4]
   11a18:	mov	r6, #1
   11a1c:	cmp	r1, r5
   11a20:	bge	11a4c <__assert_fail@plt+0x804>
   11a24:	mov	r6, #1
   11a28:	ldr	r0, [sl, r1, lsl #2]
   11a2c:	mov	r1, r7
   11a30:	bl	121f0 <__assert_fail@plt+0xfa8>
   11a34:	ldr	r1, [r4]
   11a38:	add	r1, r1, #1
   11a3c:	str	r1, [r4]
   11a40:	and	r6, r6, r0
   11a44:	cmp	r1, r5
   11a48:	blt	11a28 <__assert_fail@plt+0x7e0>
   11a4c:	movw	r0, #33138	; 0x8172
   11a50:	movt	r0, #2
   11a54:	ldrb	r0, [r0]
   11a58:	cmp	r0, #1
   11a5c:	bne	11a94 <__assert_fail@plt+0x84c>
   11a60:	movw	r0, #33120	; 0x8160
   11a64:	movt	r0, #2
   11a68:	ldr	r0, [r0]
   11a6c:	bl	12bac <__assert_fail@plt+0x1964>
   11a70:	cmn	r0, #1
   11a74:	bne	11a94 <__assert_fail@plt+0x84c>
   11a78:	bl	11140 <__errno_location@plt>
   11a7c:	ldr	r1, [r0]
   11a80:	mov	r6, #0
   11a84:	movw	r2, #27252	; 0x6a74
   11a88:	movt	r2, #1
   11a8c:	mov	r0, #0
   11a90:	bl	110bc <error@plt>
   11a94:	eor	r0, r6, #1
   11a98:	sub	sp, fp, #28
   11a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11aa0:	cmn	r0, #3
   11aa4:	bne	11b04 <__assert_fail@plt+0x8bc>
   11aa8:	movw	r0, #33024	; 0x8100
   11aac:	movt	r0, #2
   11ab0:	ldr	r3, [r0]
   11ab4:	movw	r0, #33124	; 0x8164
   11ab8:	movt	r0, #2
   11abc:	ldr	r0, [r0]
   11ac0:	mov	r1, #0
   11ac4:	movw	r2, #26072	; 0x65d8
   11ac8:	movt	r2, #1
   11acc:	movw	r7, #26056	; 0x65c8
   11ad0:	movt	r7, #1
   11ad4:	movw	r6, #26041	; 0x65b9
   11ad8:	movt	r6, #1
   11adc:	stm	sp, {r6, r7}
   11ae0:	str	r2, [sp, #8]
   11ae4:	str	r1, [sp, #12]
   11ae8:	movw	r1, #25915	; 0x653b
   11aec:	movt	r1, #1
   11af0:	movw	r2, #26027	; 0x65ab
   11af4:	movt	r2, #1
   11af8:	bl	15188 <__assert_fail@plt+0x3f40>
   11afc:	mov	r0, #0
   11b00:	bl	11110 <exit@plt>
   11b04:	cmn	r0, #2
   11b08:	bne	11b38 <__assert_fail@plt+0x8f0>
   11b0c:	mov	r0, #0
   11b10:	bl	11344 <__assert_fail@plt+0xfc>
   11b14:	movw	r1, #25955	; 0x6563
   11b18:	movt	r1, #1
   11b1c:	b	11b54 <__assert_fail@plt+0x90c>
   11b20:	movw	r1, #25986	; 0x6582
   11b24:	movt	r1, #1
   11b28:	b	11b54 <__assert_fail@plt+0x90c>
   11b2c:	movw	r1, #26085	; 0x65e5
   11b30:	movt	r1, #1
   11b34:	b	11b54 <__assert_fail@plt+0x90c>
   11b38:	mov	r0, #1
   11b3c:	bl	11344 <__assert_fail@plt+0xfc>
   11b40:	movw	r1, #26141	; 0x661d
   11b44:	movt	r1, #1
   11b48:	b	11b54 <__assert_fail@plt+0x90c>
   11b4c:	movw	r1, #26207	; 0x665f
   11b50:	movt	r1, #1
   11b54:	mov	r0, #0
   11b58:	mov	r2, #5
   11b5c:	bl	11038 <dcgettext@plt>
   11b60:	mov	r2, r0
   11b64:	mov	r0, #0
   11b68:	mov	r1, #0
   11b6c:	bl	110bc <error@plt>
   11b70:	mov	r0, #1
   11b74:	bl	11344 <__assert_fail@plt+0xfc>
   11b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b7c:	add	fp, sp, #28
   11b80:	sub	sp, sp, #12
   11b84:	mov	r4, r0
   11b88:	movw	r0, #33492	; 0x82d4
   11b8c:	movt	r0, #2
   11b90:	ldr	r0, [r0]
   11b94:	movw	r1, #33152	; 0x8180
   11b98:	movt	r1, #2
   11b9c:	str	r0, [r1]
   11ba0:	mov	r8, #0
   11ba4:	str	r8, [sp, #4]
   11ba8:	str	r8, [sp]
   11bac:	movw	sl, #33148	; 0x817c
   11bb0:	movt	sl, #2
   11bb4:	mov	r9, sp
   11bb8:	b	11be8 <__assert_fail@plt+0x9a0>
   11bbc:	mov	r0, r6
   11bc0:	bl	11230 <putchar_unlocked@plt>
   11bc4:	movw	r0, #33492	; 0x82d4
   11bc8:	movt	r0, #2
   11bcc:	ldr	r0, [r0]
   11bd0:	movw	r1, #33152	; 0x8180
   11bd4:	movt	r1, #2
   11bd8:	str	r0, [r1]
   11bdc:	mov	r8, #0
   11be0:	str	r8, [sp, #4]
   11be4:	str	r8, [sp]
   11be8:	mov	r0, r4
   11bec:	bl	1102c <getc_unlocked@plt>
   11bf0:	mov	r6, r0
   11bf4:	ldrb	r0, [sl]
   11bf8:	cmp	r0, #0
   11bfc:	mov	r0, #10
   11c00:	movwne	r0, #0
   11c04:	cmp	r6, r0
   11c08:	beq	11bbc <__assert_fail@plt+0x974>
   11c0c:	cmn	r6, #1
   11c10:	beq	11ccc <__assert_fail@plt+0xa84>
   11c14:	mov	r0, r9
   11c18:	bl	12308 <__assert_fail@plt+0x10c0>
   11c1c:	ldr	r7, [sp]
   11c20:	ldr	r5, [sp, #4]
   11c24:	mov	r0, r7
   11c28:	mov	r1, r5
   11c2c:	bl	12344 <__assert_fail@plt+0x10fc>
   11c30:	cmp	r0, #0
   11c34:	beq	11be8 <__assert_fail@plt+0x9a0>
   11c38:	movw	r0, #33144	; 0x8178
   11c3c:	movt	r0, #2
   11c40:	ldr	r2, [r0]
   11c44:	movw	r0, #33488	; 0x82d0
   11c48:	movt	r0, #2
   11c4c:	mov	r1, r0
   11c50:	subs	r0, r2, r0
   11c54:	movwne	r0, #1
   11c58:	orr	r0, r8, r0
   11c5c:	cmp	r2, r1
   11c60:	beq	11cbc <__assert_fail@plt+0xa74>
   11c64:	eor	r1, r8, #1
   11c68:	tst	r1, #1
   11c6c:	mov	r8, r0
   11c70:	bne	11cc0 <__assert_fail@plt+0xa78>
   11c74:	mov	r0, r7
   11c78:	mov	r1, r5
   11c7c:	mov	r5, r2
   11c80:	bl	12374 <__assert_fail@plt+0x112c>
   11c84:	mov	r8, #1
   11c88:	cmp	r0, #0
   11c8c:	beq	11cc0 <__assert_fail@plt+0xa78>
   11c90:	movw	r0, #33124	; 0x8164
   11c94:	movt	r0, #2
   11c98:	ldr	r3, [r0]
   11c9c:	movw	r0, #33140	; 0x8174
   11ca0:	movt	r0, #2
   11ca4:	ldr	r2, [r0]
   11ca8:	mov	r8, #1
   11cac:	mov	r0, r5
   11cb0:	mov	r1, #1
   11cb4:	bl	11020 <fwrite_unlocked@plt>
   11cb8:	b	11cc0 <__assert_fail@plt+0xa78>
   11cbc:	mov	r8, r0
   11cc0:	mov	r0, r6
   11cc4:	bl	11230 <putchar_unlocked@plt>
   11cc8:	b	11be8 <__assert_fail@plt+0x9a0>
   11ccc:	ldm	sp, {r1, r2}
   11cd0:	orrs	r1, r1, r2
   11cd4:	beq	11cdc <__assert_fail@plt+0xa94>
   11cd8:	bl	11230 <putchar_unlocked@plt>
   11cdc:	sub	sp, fp, #28
   11ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ce8:	add	fp, sp, #28
   11cec:	sub	sp, sp, #36	; 0x24
   11cf0:	mov	r4, r0
   11cf4:	movw	r0, #33492	; 0x82d4
   11cf8:	movt	r0, #2
   11cfc:	ldr	r0, [r0]
   11d00:	movw	r1, #33152	; 0x8180
   11d04:	movt	r1, #2
   11d08:	str	r0, [r1]
   11d0c:	mov	r0, #0
   11d10:	str	r0, [sp, #28]
   11d14:	mov	r0, #1
   11d18:	str	r0, [sp, #24]
   11d1c:	mov	r0, r4
   11d20:	bl	1102c <getc_unlocked@plt>
   11d24:	cmn	r0, #1
   11d28:	beq	121c4 <__assert_fail@plt+0xf7c>
   11d2c:	mov	r1, #0
   11d30:	str	r1, [sp, #16]
   11d34:	mov	r1, r4
   11d38:	bl	11134 <ungetc@plt>
   11d3c:	movw	r0, #33136	; 0x8170
   11d40:	movt	r0, #2
   11d44:	ldrb	r5, [r0]
   11d48:	mov	r0, #1
   11d4c:	mov	r1, #0
   11d50:	bl	12344 <__assert_fail@plt+0x10fc>
   11d54:	eor	r0, r5, r0
   11d58:	str	r0, [sp, #20]
   11d5c:	movw	sl, #33137	; 0x8171
   11d60:	movt	sl, #2
   11d64:	movw	r9, #33148	; 0x817c
   11d68:	movt	r9, #2
   11d6c:	mov	r8, #0
   11d70:	b	11d7c <__assert_fail@plt+0xb34>
   11d74:	add	r0, sp, #24
   11d78:	bl	12308 <__assert_fail@plt+0x10c0>
   11d7c:	ldr	r0, [sp, #24]
   11d80:	ldr	r1, [sp, #28]
   11d84:	eor	r0, r0, #1
   11d88:	orrs	r0, r0, r1
   11d8c:	movwne	r0, #1
   11d90:	ldr	r1, [sp, #20]
   11d94:	orr	r0, r1, r0
   11d98:	tst	r0, #1
   11d9c:	beq	11ddc <__assert_fail@plt+0xb94>
   11da0:	b	11f28 <__assert_fail@plt+0xce0>
   11da4:	ldrb	r0, [r9]
   11da8:	cmp	r0, #0
   11dac:	mov	r8, #10
   11db0:	movwne	r8, #0
   11db4:	ldr	r0, [sp, #24]
   11db8:	ldr	r1, [sp, #28]
   11dbc:	eor	r0, r0, #1
   11dc0:	orr	r0, r0, r1
   11dc4:	clz	r0, r0
   11dc8:	lsr	r0, r0, #5
   11dcc:	ldr	r1, [sp, #20]
   11dd0:	mvn	r1, r1
   11dd4:	tst	r1, r0
   11dd8:	beq	11f28 <__assert_fail@plt+0xce0>
   11ddc:	ldrb	r0, [r9]
   11de0:	ldrb	r1, [sl]
   11de4:	cmp	r0, #0
   11de8:	mov	r0, #10
   11dec:	movwne	r0, #0
   11df0:	str	r1, [sp]
   11df4:	stmib	sp, {r0, r4}
   11df8:	movw	r0, #33156	; 0x8184
   11dfc:	movt	r0, #2
   11e00:	movw	r1, #33160	; 0x8188
   11e04:	movt	r1, #2
   11e08:	mov	r2, #0
   11e0c:	mvn	r3, #0
   11e10:	bl	12d84 <__assert_fail@plt+0x1b3c>
   11e14:	cmn	r0, #1
   11e18:	ble	12188 <__assert_fail@plt+0xf40>
   11e1c:	mov	r5, r0
   11e20:	cmp	r0, #0
   11e24:	beq	121cc <__assert_fail@plt+0xf84>
   11e28:	movw	r0, #33156	; 0x8184
   11e2c:	movt	r0, #2
   11e30:	ldr	r7, [r0]
   11e34:	sub	r6, r5, #1
   11e38:	ldrb	r0, [r7, r6]
   11e3c:	bl	1239c <__assert_fail@plt+0x1154>
   11e40:	ldrb	r1, [sl]
   11e44:	cmp	r0, r1
   11e48:	beq	11eb0 <__assert_fail@plt+0xc68>
   11e4c:	movw	r0, #33136	; 0x8170
   11e50:	movt	r0, #2
   11e54:	ldrb	r0, [r0]
   11e58:	mov	r8, #0
   11e5c:	cmp	r0, #0
   11e60:	bne	11db4 <__assert_fail@plt+0xb6c>
   11e64:	movw	r0, #33124	; 0x8164
   11e68:	movt	r0, #2
   11e6c:	ldr	r3, [r0]
   11e70:	mov	r0, r7
   11e74:	mov	r1, #1
   11e78:	mov	r2, r5
   11e7c:	bl	11020 <fwrite_unlocked@plt>
   11e80:	movw	r0, #33156	; 0x8184
   11e84:	movt	r0, #2
   11e88:	ldr	r0, [r0]
   11e8c:	ldrb	r1, [r0, r6]
   11e90:	ldrb	r0, [r9]
   11e94:	cmp	r0, #0
   11e98:	mov	r0, #10
   11e9c:	movwne	r0, #0
   11ea0:	cmp	r0, r1
   11ea4:	beq	11da4 <__assert_fail@plt+0xb5c>
   11ea8:	bl	11230 <putchar_unlocked@plt>
   11eac:	b	11da4 <__assert_fail@plt+0xb5c>
   11eb0:	mov	r0, #1
   11eb4:	mov	r1, #0
   11eb8:	bl	12344 <__assert_fail@plt+0x10fc>
   11ebc:	cmp	r0, #0
   11ec0:	beq	11f1c <__assert_fail@plt+0xcd4>
   11ec4:	movw	r0, #33124	; 0x8164
   11ec8:	movt	r0, #2
   11ecc:	ldr	r3, [r0]
   11ed0:	mov	r0, r7
   11ed4:	mov	r1, #1
   11ed8:	mov	r2, r6
   11edc:	bl	11020 <fwrite_unlocked@plt>
   11ee0:	ldrb	r0, [r9]
   11ee4:	cmp	r0, #0
   11ee8:	mov	r0, #10
   11eec:	movwne	r0, #0
   11ef0:	ldrb	r1, [sl]
   11ef4:	cmp	r0, r1
   11ef8:	bne	11f14 <__assert_fail@plt+0xccc>
   11efc:	mov	r0, r4
   11f00:	bl	1102c <getc_unlocked@plt>
   11f04:	cmn	r0, #1
   11f08:	beq	11f1c <__assert_fail@plt+0xcd4>
   11f0c:	mov	r1, r4
   11f10:	bl	11134 <ungetc@plt>
   11f14:	mov	r0, #1
   11f18:	str	r0, [sp, #16]
   11f1c:	add	r0, sp, #24
   11f20:	bl	12308 <__assert_fail@plt+0x10c0>
   11f24:	mov	r8, #0
   11f28:	ldr	r5, [sp, #24]
   11f2c:	ldr	r7, [sp, #28]
   11f30:	mov	r0, r5
   11f34:	mov	r1, r7
   11f38:	bl	12344 <__assert_fail@plt+0x10fc>
   11f3c:	cmp	r0, #0
   11f40:	beq	11ff4 <__assert_fail@plt+0xdac>
   11f44:	ldr	r0, [sp, #16]
   11f48:	tst	r0, #1
   11f4c:	beq	11f7c <__assert_fail@plt+0xd34>
   11f50:	movw	r0, #33124	; 0x8164
   11f54:	movt	r0, #2
   11f58:	ldr	r3, [r0]
   11f5c:	movw	r0, #33144	; 0x8178
   11f60:	movt	r0, #2
   11f64:	ldr	r0, [r0]
   11f68:	movw	r1, #33140	; 0x8174
   11f6c:	movt	r1, #2
   11f70:	ldr	r2, [r1]
   11f74:	mov	r1, #1
   11f78:	bl	11020 <fwrite_unlocked@plt>
   11f7c:	mov	r0, r4
   11f80:	bl	1102c <getc_unlocked@plt>
   11f84:	ldrb	r1, [sl]
   11f88:	mov	r2, #1
   11f8c:	str	r2, [sp, #16]
   11f90:	cmp	r0, r1
   11f94:	beq	12024 <__assert_fail@plt+0xddc>
   11f98:	ldrb	r1, [r9]
   11f9c:	cmp	r1, #0
   11fa0:	mov	r1, #10
   11fa4:	movwne	r1, #0
   11fa8:	cmn	r0, #1
   11fac:	beq	12024 <__assert_fail@plt+0xddc>
   11fb0:	cmp	r0, r1
   11fb4:	beq	12024 <__assert_fail@plt+0xddc>
   11fb8:	mov	r6, r0
   11fbc:	bl	11230 <putchar_unlocked@plt>
   11fc0:	mov	r0, r4
   11fc4:	bl	1102c <getc_unlocked@plt>
   11fc8:	ldrb	r1, [sl]
   11fcc:	cmp	r0, r1
   11fd0:	beq	12028 <__assert_fail@plt+0xde0>
   11fd4:	ldrb	r1, [r9]
   11fd8:	cmp	r1, #0
   11fdc:	mov	r1, #10
   11fe0:	movwne	r1, #0
   11fe4:	cmn	r0, #1
   11fe8:	cmpne	r0, r1
   11fec:	beq	12028 <__assert_fail@plt+0xde0>
   11ff0:	b	11fb8 <__assert_fail@plt+0xd70>
   11ff4:	mov	r0, r4
   11ff8:	bl	1102c <getc_unlocked@plt>
   11ffc:	ldrb	r1, [sl]
   12000:	cmp	r0, r1
   12004:	beq	12024 <__assert_fail@plt+0xddc>
   12008:	ldrb	r1, [r9]
   1200c:	cmp	r1, #0
   12010:	mov	r1, #10
   12014:	movwne	r1, #0
   12018:	cmn	r0, #1
   1201c:	cmpne	r0, r1
   12020:	bne	12088 <__assert_fail@plt+0xe40>
   12024:	mov	r6, r8
   12028:	mov	r8, r0
   1202c:	ldrb	r0, [r9]
   12030:	cmp	r0, #0
   12034:	mov	r0, #10
   12038:	movwne	r0, #0
   1203c:	ldrb	r1, [sl]
   12040:	cmp	r8, r1
   12044:	cmpeq	r0, r1
   12048:	beq	120c4 <__assert_fail@plt+0xe7c>
   1204c:	ldrb	r1, [sl]
   12050:	cmp	r8, r1
   12054:	beq	11d74 <__assert_fail@plt+0xb2c>
   12058:	mov	r3, r5
   1205c:	ldrb	r0, [r9]
   12060:	cmp	r0, #0
   12064:	mov	r0, #10
   12068:	movwne	r0, #0
   1206c:	add	r2, r8, #1
   12070:	clz	r2, r2
   12074:	lsr	r5, r2, #5
   12078:	cmn	r8, #1
   1207c:	cmpne	r8, r0
   12080:	bne	11d7c <__assert_fail@plt+0xb34>
   12084:	b	12100 <__assert_fail@plt+0xeb8>
   12088:	mov	r6, r0
   1208c:	mov	r0, r4
   12090:	bl	1102c <getc_unlocked@plt>
   12094:	ldrb	r1, [sl]
   12098:	cmp	r0, r1
   1209c:	beq	12028 <__assert_fail@plt+0xde0>
   120a0:	ldrb	r1, [r9]
   120a4:	cmp	r1, #0
   120a8:	mov	r1, #10
   120ac:	movwne	r1, #0
   120b0:	cmn	r0, #1
   120b4:	beq	12028 <__assert_fail@plt+0xde0>
   120b8:	cmp	r0, r1
   120bc:	bne	12088 <__assert_fail@plt+0xe40>
   120c0:	b	12028 <__assert_fail@plt+0xde0>
   120c4:	mov	r0, r4
   120c8:	bl	1102c <getc_unlocked@plt>
   120cc:	cmn	r0, #1
   120d0:	beq	120e0 <__assert_fail@plt+0xe98>
   120d4:	mov	r1, r4
   120d8:	bl	11134 <ungetc@plt>
   120dc:	b	1204c <__assert_fail@plt+0xe04>
   120e0:	mov	r3, r5
   120e4:	ldrb	r0, [r9]
   120e8:	cmp	r0, #0
   120ec:	mov	r0, #10
   120f0:	movwne	r0, #0
   120f4:	ldrb	r1, [sl]
   120f8:	mvn	r8, #0
   120fc:	mov	r5, #1
   12100:	ldr	r2, [sp, #16]
   12104:	tst	r2, #1
   12108:	eoreq	r2, r3, #1
   1210c:	orrseq	r2, r2, r7
   12110:	beq	12138 <__assert_fail@plt+0xef0>
   12114:	cmp	r6, r0
   12118:	bne	12128 <__assert_fail@plt+0xee0>
   1211c:	cmp	r8, r0
   12120:	cmpne	r0, r1
   12124:	bne	1214c <__assert_fail@plt+0xf04>
   12128:	bl	11230 <putchar_unlocked@plt>
   1212c:	cmp	r5, #0
   12130:	beq	12154 <__assert_fail@plt+0xf0c>
   12134:	b	121c4 <__assert_fail@plt+0xf7c>
   12138:	movw	r2, #33136	; 0x8170
   1213c:	movt	r2, #2
   12140:	ldrb	r2, [r2]
   12144:	cmp	r2, #0
   12148:	beq	12114 <__assert_fail@plt+0xecc>
   1214c:	cmp	r5, #0
   12150:	bne	121c4 <__assert_fail@plt+0xf7c>
   12154:	movw	r0, #33492	; 0x82d4
   12158:	movt	r0, #2
   1215c:	ldr	r0, [r0]
   12160:	movw	r1, #33152	; 0x8180
   12164:	movt	r1, #2
   12168:	str	r0, [r1]
   1216c:	mov	r1, #0
   12170:	mov	r0, #0
   12174:	str	r0, [sp, #16]
   12178:	str	r1, [sp, #28]
   1217c:	mov	r0, #1
   12180:	str	r0, [sp, #24]
   12184:	b	11d7c <__assert_fail@plt+0xb34>
   12188:	movw	r0, #33156	; 0x8184
   1218c:	movt	r0, #2
   12190:	mov	r5, r0
   12194:	ldr	r0, [r0]
   12198:	bl	12cb4 <__assert_fail@plt+0x1a6c>
   1219c:	mov	r0, #0
   121a0:	str	r0, [r5]
   121a4:	mov	r0, r4
   121a8:	bl	110a4 <ferror_unlocked@plt>
   121ac:	cmp	r0, #0
   121b0:	bne	121c4 <__assert_fail@plt+0xf7c>
   121b4:	mov	r0, r4
   121b8:	bl	11224 <feof_unlocked@plt>
   121bc:	cmp	r0, #0
   121c0:	beq	121ec <__assert_fail@plt+0xfa4>
   121c4:	sub	sp, fp, #28
   121c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121cc:	movw	r0, #26813	; 0x68bd
   121d0:	movt	r0, #1
   121d4:	movw	r1, #26826	; 0x68ca
   121d8:	movt	r1, #1
   121dc:	movw	r3, #26836	; 0x68d4
   121e0:	movt	r3, #1
   121e4:	movw	r2, #315	; 0x13b
   121e8:	bl	11248 <__assert_fail@plt>
   121ec:	bl	15618 <__assert_fail@plt+0x43d0>
   121f0:	push	{r4, r5, r6, r7, fp, lr}
   121f4:	add	fp, sp, #16
   121f8:	mov	r5, r1
   121fc:	mov	r4, r0
   12200:	movw	r1, #27252	; 0x6a74
   12204:	movt	r1, #1
   12208:	bl	10fb4 <strcmp@plt>
   1220c:	cmp	r0, #0
   12210:	beq	1223c <__assert_fail@plt+0xff4>
   12214:	movw	r1, #26025	; 0x65a9
   12218:	movt	r1, #1
   1221c:	mov	r0, r4
   12220:	bl	111e8 <fopen64@plt>
   12224:	mov	r6, r0
   12228:	cmp	r0, #0
   1222c:	bne	12258 <__assert_fail@plt+0x1010>
   12230:	bl	11140 <__errno_location@plt>
   12234:	ldr	r5, [r0]
   12238:	b	122b8 <__assert_fail@plt+0x1070>
   1223c:	movw	r0, #33138	; 0x8172
   12240:	movt	r0, #2
   12244:	mov	r1, #1
   12248:	strb	r1, [r0]
   1224c:	movw	r0, #33120	; 0x8160
   12250:	movt	r0, #2
   12254:	ldr	r6, [r0]
   12258:	mov	r0, r6
   1225c:	mov	r1, #2
   12260:	bl	12b70 <__assert_fail@plt+0x1928>
   12264:	mov	r0, r6
   12268:	blx	r5
   1226c:	bl	11140 <__errno_location@plt>
   12270:	mov	r7, r0
   12274:	ldr	r5, [r0]
   12278:	mov	r0, r6
   1227c:	bl	110a4 <ferror_unlocked@plt>
   12280:	cmp	r0, #0
   12284:	moveq	r5, r0
   12288:	movw	r1, #27252	; 0x6a74
   1228c:	movt	r1, #1
   12290:	mov	r0, r4
   12294:	bl	10fb4 <strcmp@plt>
   12298:	cmp	r0, #0
   1229c:	beq	122ec <__assert_fail@plt+0x10a4>
   122a0:	mov	r0, r6
   122a4:	bl	12bac <__assert_fail@plt+0x1964>
   122a8:	cmn	r0, #1
   122ac:	ldreq	r5, [r7]
   122b0:	cmp	r5, #0
   122b4:	beq	122fc <__assert_fail@plt+0x10b4>
   122b8:	mov	r6, #0
   122bc:	mov	r0, #0
   122c0:	mov	r1, #3
   122c4:	mov	r2, r4
   122c8:	bl	14870 <__assert_fail@plt+0x3628>
   122cc:	mov	r3, r0
   122d0:	movw	r2, #27510	; 0x6b76
   122d4:	movt	r2, #1
   122d8:	mov	r0, #0
   122dc:	mov	r1, r5
   122e0:	bl	110bc <error@plt>
   122e4:	mov	r0, r6
   122e8:	pop	{r4, r5, r6, r7, fp, pc}
   122ec:	mov	r0, r6
   122f0:	bl	111dc <clearerr_unlocked@plt>
   122f4:	cmp	r5, #0
   122f8:	bne	122b8 <__assert_fail@plt+0x1070>
   122fc:	mov	r6, #1
   12300:	mov	r0, r6
   12304:	pop	{r4, r5, r6, r7, fp, pc}
   12308:	push	{r4, r5, fp, lr}
   1230c:	add	fp, sp, #8
   12310:	ldrd	r2, [r0]
   12314:	adds	r2, r2, #1
   12318:	adc	r3, r3, #0
   1231c:	strd	r2, [r0]
   12320:	movw	r0, #33152	; 0x8180
   12324:	movt	r0, #2
   12328:	ldr	r1, [r0]
   1232c:	ldrd	r4, [r1, #8]
   12330:	subs	r2, r4, r2
   12334:	sbcs	r2, r5, r3
   12338:	addcc	r1, r1, #16
   1233c:	strcc	r1, [r0]
   12340:	pop	{r4, r5, fp, pc}
   12344:	push	{r4, r5, fp, lr}
   12348:	add	fp, sp, #8
   1234c:	movw	r2, #33152	; 0x8180
   12350:	movt	r2, #2
   12354:	ldr	r2, [r2]
   12358:	ldrd	r4, [r2]
   1235c:	mov	r2, #0
   12360:	subs	r0, r0, r4
   12364:	sbcs	r0, r1, r5
   12368:	movwcs	r2, #1
   1236c:	mov	r0, r2
   12370:	pop	{r4, r5, fp, pc}
   12374:	movw	r2, #33152	; 0x8180
   12378:	movt	r2, #2
   1237c:	ldr	r2, [r2]
   12380:	ldrd	r2, [r2]
   12384:	eor	r1, r3, r1
   12388:	eor	r0, r2, r0
   1238c:	orr	r0, r0, r1
   12390:	clz	r0, r0
   12394:	lsr	r0, r0, #5
   12398:	bx	lr
   1239c:	bx	lr
   123a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123a4:	add	fp, sp, #28
   123a8:	sub	sp, sp, #28
   123ac:	mov	r9, r0
   123b0:	str	r1, [sp, #4]
   123b4:	ands	r0, r1, #1
   123b8:	str	r0, [sp, #8]
   123bc:	mov	ip, #0
   123c0:	beq	123f4 <__assert_fail@plt+0x11ac>
   123c4:	movw	r1, #27252	; 0x6a74
   123c8:	movt	r1, #1
   123cc:	mov	r0, r9
   123d0:	bl	10fb4 <strcmp@plt>
   123d4:	mov	ip, #0
   123d8:	cmp	r0, #0
   123dc:	addeq	r9, r9, #1
   123e0:	clz	r0, r0
   123e4:	lsr	r2, r0, #5
   123e8:	mov	r3, #0
   123ec:	mov	lr, r2
   123f0:	b	12400 <__assert_fail@plt+0x11b8>
   123f4:	mov	r2, #0
   123f8:	mov	r3, #0
   123fc:	mov	lr, #0
   12400:	mov	sl, #1
   12404:	mov	r1, lr
   12408:	mov	r6, #0
   1240c:	mov	r8, #0
   12410:	ldrb	r4, [r9]
   12414:	cmp	r4, #44	; 0x2c
   12418:	beq	1258c <__assert_fail@plt+0x1344>
   1241c:	cmp	r4, #45	; 0x2d
   12420:	bne	12464 <__assert_fail@plt+0x121c>
   12424:	tst	r1, #1
   12428:	bne	12834 <__assert_fail@plt+0x15ec>
   1242c:	orrs	r0, r2, r3
   12430:	eoreq	r0, lr, #1
   12434:	tsteq	r0, #1
   12438:	beq	1279c <__assert_fail@plt+0x1554>
   1243c:	ands	r8, lr, #1
   12440:	mov	r1, #1
   12444:	mov	sl, r2
   12448:	moveq	sl, r1
   1244c:	movne	r8, r3
   12450:	mov	r2, #0
   12454:	mov	r3, #0
   12458:	mov	r6, #0
   1245c:	add	r9, r9, #1
   12460:	b	12410 <__assert_fail@plt+0x11c8>
   12464:	str	r8, [sp, #20]
   12468:	str	r9, [sp, #16]
   1246c:	mov	r9, sl
   12470:	mov	r8, ip
   12474:	mov	r7, r2
   12478:	mov	r5, r3
   1247c:	str	r1, [sp, #24]
   12480:	mov	sl, lr
   12484:	bl	11104 <__ctype_b_loc@plt>
   12488:	ldr	r0, [r0]
   1248c:	str	r0, [sp, #12]
   12490:	mov	r0, r4
   12494:	bl	128f0 <__assert_fail@plt+0x16a8>
   12498:	mov	lr, sl
   1249c:	ldr	r1, [sp, #24]
   124a0:	mov	r3, r5
   124a4:	mov	r2, r7
   124a8:	mov	ip, r8
   124ac:	mov	sl, r9
   124b0:	ldr	r9, [sp, #16]
   124b4:	ldr	r8, [sp, #20]
   124b8:	cmp	r4, #0
   124bc:	beq	1258c <__assert_fail@plt+0x1344>
   124c0:	ldr	r0, [sp, #12]
   124c4:	add	r0, r0, r4, lsl #1
   124c8:	ldrh	r0, [r0]
   124cc:	ands	r0, r0, #1
   124d0:	bne	1258c <__assert_fail@plt+0x1344>
   124d4:	sub	r0, r4, #48	; 0x30
   124d8:	cmp	r0, #9
   124dc:	bhi	12860 <__assert_fail@plt+0x1618>
   124e0:	movw	r1, #33164	; 0x818c
   124e4:	movt	r1, #2
   124e8:	ldr	r1, [r1]
   124ec:	cmp	r1, #0
   124f0:	movwne	r1, #1
   124f4:	tst	r6, r1
   124f8:	movweq	r1, #33164	; 0x818c
   124fc:	movteq	r1, #2
   12500:	streq	r9, [r1]
   12504:	movw	r1, #39321	; 0x9999
   12508:	movt	r1, #39321	; 0x9999
   1250c:	subs	r1, r1, r2
   12510:	movw	r1, #39321	; 0x9999
   12514:	movt	r1, #6553	; 0x1999
   12518:	sbcs	r1, r1, r3
   1251c:	bcc	127b0 <__assert_fail@plt+0x1568>
   12520:	mov	r1, #10
   12524:	umull	r1, r7, r2, r1
   12528:	add	r6, r3, r3, lsl #2
   1252c:	add	r7, r7, r6, lsl #1
   12530:	adds	r1, r1, r0
   12534:	adc	r0, r7, r0, asr #31
   12538:	subs	r7, r1, r2
   1253c:	sbcs	r7, r0, r3
   12540:	mov	r7, #0
   12544:	movwcc	r7, #1
   12548:	cmp	r7, #0
   1254c:	moveq	r3, r0
   12550:	moveq	r2, r1
   12554:	cmp	r7, #0
   12558:	bne	127b0 <__assert_fail@plt+0x1568>
   1255c:	mvn	r1, #0
   12560:	eor	r0, r2, r1
   12564:	eor	r1, r3, r1
   12568:	orrs	r0, r0, r1
   1256c:	beq	127b0 <__assert_fail@plt+0x1568>
   12570:	ldr	r1, [sp, #24]
   12574:	orr	ip, ip, r1
   12578:	eor	r0, r1, #1
   1257c:	orr	lr, lr, r0
   12580:	mov	r6, #1
   12584:	add	r9, r9, #1
   12588:	b	12410 <__assert_fail@plt+0x11c8>
   1258c:	tst	r1, #1
   12590:	beq	125d8 <__assert_fail@plt+0x1390>
   12594:	orr	r0, lr, ip
   12598:	ands	r4, r0, #1
   1259c:	mov	r5, #1
   125a0:	movne	r5, sl
   125a4:	movne	r4, r8
   125a8:	ldr	r1, [sp, #8]
   125ac:	cmp	r1, #0
   125b0:	tsteq	r0, #1
   125b4:	beq	12854 <__assert_fail@plt+0x160c>
   125b8:	tst	ip, #1
   125bc:	beq	125f8 <__assert_fail@plt+0x13b0>
   125c0:	subs	r0, r2, r5
   125c4:	sbcs	r0, r3, r4
   125c8:	bcc	128b0 <__assert_fail@plt+0x1668>
   125cc:	mov	r0, r5
   125d0:	mov	r1, r4
   125d4:	b	125e8 <__assert_fail@plt+0x13a0>
   125d8:	orrs	r0, r2, r3
   125dc:	beq	1279c <__assert_fail@plt+0x1554>
   125e0:	mov	r0, r2
   125e4:	mov	r1, r3
   125e8:	bl	128f4 <__assert_fail@plt+0x16ac>
   125ec:	mov	r5, sl
   125f0:	mov	r4, r8
   125f4:	b	1260c <__assert_fail@plt+0x13c4>
   125f8:	mov	r0, r5
   125fc:	mov	r1, r4
   12600:	mvn	r2, #0
   12604:	mvn	r3, #0
   12608:	bl	128f4 <__assert_fail@plt+0x16ac>
   1260c:	ldrb	r0, [r9]
   12610:	cmp	r0, #0
   12614:	beq	12640 <__assert_fail@plt+0x13f8>
   12618:	mov	r2, #0
   1261c:	mov	r3, #0
   12620:	mov	lr, #0
   12624:	mov	ip, #0
   12628:	mov	r1, #0
   1262c:	mov	r6, #0
   12630:	mov	sl, r5
   12634:	mov	r8, r4
   12638:	add	r9, r9, #1
   1263c:	b	12410 <__assert_fail@plt+0x11c8>
   12640:	movw	r7, #33496	; 0x82d8
   12644:	movt	r7, #2
   12648:	ldr	r1, [r7]
   1264c:	cmp	r1, #0
   12650:	beq	128dc <__assert_fail@plt+0x1694>
   12654:	movw	r0, #33492	; 0x82d4
   12658:	movt	r0, #2
   1265c:	ldr	r0, [r0]
   12660:	movw	r3, #10604	; 0x296c
   12664:	movt	r3, #1
   12668:	mov	r2, #16
   1266c:	bl	111f4 <qsort@plt>
   12670:	ldr	r0, [r7]
   12674:	cmp	r0, #0
   12678:	beq	12738 <__assert_fail@plt+0x14f0>
   1267c:	mov	r9, #0
   12680:	b	12690 <__assert_fail@plt+0x1448>
   12684:	ldr	r0, [r7]
   12688:	cmp	r9, r0
   1268c:	bcs	12738 <__assert_fail@plt+0x14f0>
   12690:	mov	sl, r9
   12694:	add	r9, r9, #1
   12698:	ldr	r4, [r7]
   1269c:	cmp	r9, r4
   126a0:	bcs	12684 <__assert_fail@plt+0x143c>
   126a4:	mvn	r0, #-268435455	; 0xf0000001
   126a8:	sub	r8, r0, sl
   126ac:	movw	r0, #33492	; 0x82d4
   126b0:	movt	r0, #2
   126b4:	ldr	r5, [r0]
   126b8:	add	r1, r5, sl, lsl #4
   126bc:	ldr	r2, [r1, #8]!
   126c0:	ldr	r3, [r1, #4]
   126c4:	mov	r0, r5
   126c8:	ldr	r6, [r0, r9, lsl #4]!
   126cc:	ldr	r0, [r0, #4]
   126d0:	subs	r6, r2, r6
   126d4:	sbcs	r0, r3, r0
   126d8:	bcc	12684 <__assert_fail@plt+0x143c>
   126dc:	add	r0, r5, r9, lsl #4
   126e0:	ldr	r6, [r0, #8]
   126e4:	ldr	r5, [r0, #12]
   126e8:	mov	ip, r7
   126ec:	subs	r7, r2, r6
   126f0:	sbcs	r7, r3, r5
   126f4:	mov	r7, #0
   126f8:	movwcc	r7, #1
   126fc:	cmp	r7, #0
   12700:	mov	r7, ip
   12704:	movne	r3, r5
   12708:	movne	r2, r6
   1270c:	strd	r2, [r1]
   12710:	add	r1, r0, #16
   12714:	add	r2, r8, r4
   12718:	lsl	r2, r2, #4
   1271c:	bl	10fd8 <memmove@plt>
   12720:	ldr	r0, [r7]
   12724:	sub	r4, r0, #1
   12728:	str	r4, [r7]
   1272c:	cmp	r9, r4
   12730:	bcc	126ac <__assert_fail@plt+0x1464>
   12734:	b	12684 <__assert_fail@plt+0x143c>
   12738:	ldr	r0, [sp, #4]
   1273c:	tst	r0, #2
   12740:	blne	12988 <__assert_fail@plt+0x1740>
   12744:	ldr	r0, [r7]
   12748:	add	r1, r0, #1
   1274c:	str	r1, [r7]
   12750:	movw	r0, #33492	; 0x82d4
   12754:	movt	r0, #2
   12758:	mov	r4, r0
   1275c:	ldr	r0, [r0]
   12760:	lsl	r1, r1, #4
   12764:	bl	152d0 <__assert_fail@plt+0x4088>
   12768:	str	r0, [r4]
   1276c:	ldr	r1, [r7]
   12770:	mvn	r2, #15
   12774:	add	r1, r2, r1, lsl #4
   12778:	add	r0, r0, r1
   1277c:	mvn	r2, #0
   12780:	str	r2, [r0, #8]
   12784:	str	r2, [r0, #12]
   12788:	ldr	r0, [r4]
   1278c:	str	r2, [r0, r1]!
   12790:	str	r2, [r0, #4]
   12794:	sub	sp, fp, #28
   12798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1279c:	movw	r0, #27193	; 0x6a39
   127a0:	movt	r0, #1
   127a4:	movw	r1, #27148	; 0x6a0c
   127a8:	movt	r1, #1
   127ac:	b	12844 <__assert_fail@plt+0x15fc>
   127b0:	movw	r0, #33164	; 0x818c
   127b4:	movt	r0, #2
   127b8:	ldr	r4, [r0]
   127bc:	movw	r1, #27279	; 0x6a8f
   127c0:	movt	r1, #1
   127c4:	mov	r0, r4
   127c8:	bl	1123c <strspn@plt>
   127cc:	mov	r1, r0
   127d0:	mov	r0, r4
   127d4:	bl	155c8 <__assert_fail@plt+0x4380>
   127d8:	mov	r4, r0
   127dc:	movw	r0, #27328	; 0x6ac0
   127e0:	movt	r0, #1
   127e4:	movw	r1, #27290	; 0x6a9a
   127e8:	movt	r1, #1
   127ec:	ldr	r2, [sp, #4]
   127f0:	tst	r2, #4
   127f4:	moveq	r1, r0
   127f8:	mov	r0, #0
   127fc:	mov	r2, #5
   12800:	bl	11038 <dcgettext@plt>
   12804:	mov	r5, r0
   12808:	mov	r0, r4
   1280c:	bl	149b0 <__assert_fail@plt+0x3768>
   12810:	mov	r3, r0
   12814:	mov	r0, #0
   12818:	mov	r1, #0
   1281c:	mov	r2, r5
   12820:	bl	110bc <error@plt>
   12824:	mov	r0, r4
   12828:	bl	12cb4 <__assert_fail@plt+0x1a6c>
   1282c:	mov	r0, #1
   12830:	bl	11344 <__assert_fail@plt+0xfc>
   12834:	movw	r0, #27128	; 0x69f8
   12838:	movt	r0, #1
   1283c:	movw	r1, #27096	; 0x69d8
   12840:	movt	r1, #1
   12844:	ldr	r2, [sp, #4]
   12848:	tst	r2, #4
   1284c:	moveq	r1, r0
   12850:	b	128b8 <__assert_fail@plt+0x1670>
   12854:	movw	r1, #27220	; 0x6a54
   12858:	movt	r1, #1
   1285c:	b	128b8 <__assert_fail@plt+0x1670>
   12860:	movw	r0, #27392	; 0x6b00
   12864:	movt	r0, #1
   12868:	movw	r1, #27357	; 0x6add
   1286c:	movt	r1, #1
   12870:	ldr	r2, [sp, #4]
   12874:	tst	r2, #4
   12878:	moveq	r1, r0
   1287c:	mov	r0, #0
   12880:	mov	r2, #5
   12884:	bl	11038 <dcgettext@plt>
   12888:	mov	r4, r0
   1288c:	mov	r0, r9
   12890:	bl	149b0 <__assert_fail@plt+0x3768>
   12894:	mov	r3, r0
   12898:	mov	r0, #0
   1289c:	mov	r1, #0
   128a0:	mov	r2, r4
   128a4:	bl	110bc <error@plt>
   128a8:	mov	r0, #1
   128ac:	bl	11344 <__assert_fail@plt+0xfc>
   128b0:	movw	r1, #27254	; 0x6a76
   128b4:	movt	r1, #1
   128b8:	mov	r0, #0
   128bc:	mov	r2, #5
   128c0:	bl	11038 <dcgettext@plt>
   128c4:	mov	r2, r0
   128c8:	mov	r0, #0
   128cc:	mov	r1, #0
   128d0:	bl	110bc <error@plt>
   128d4:	mov	r0, #1
   128d8:	bl	11344 <__assert_fail@plt+0xfc>
   128dc:	movw	r0, #27456	; 0x6b40
   128e0:	movt	r0, #1
   128e4:	movw	r1, #27415	; 0x6b17
   128e8:	movt	r1, #1
   128ec:	b	12844 <__assert_fail@plt+0x15fc>
   128f0:	bx	lr
   128f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   128f8:	add	fp, sp, #24
   128fc:	mov	r8, r3
   12900:	mov	r9, r2
   12904:	mov	r6, r1
   12908:	mov	r7, r0
   1290c:	movw	r0, #33168	; 0x8190
   12910:	movt	r0, #2
   12914:	ldr	r0, [r0]
   12918:	movw	r4, #33496	; 0x82d8
   1291c:	movt	r4, #2
   12920:	ldr	r1, [r4]
   12924:	cmp	r1, r0
   12928:	movw	r5, #33492	; 0x82d4
   1292c:	movt	r5, #2
   12930:	bne	1294c <__assert_fail@plt+0x1704>
   12934:	ldr	r0, [r5]
   12938:	movw	r1, #33168	; 0x8190
   1293c:	movt	r1, #2
   12940:	mov	r2, #16
   12944:	bl	15354 <__assert_fail@plt+0x410c>
   12948:	str	r0, [r5]
   1294c:	ldr	r0, [r4]
   12950:	ldr	r1, [r5]
   12954:	str	r7, [r1, r0, lsl #4]!
   12958:	stmib	r1, {r6, r9}
   1295c:	str	r8, [r1, #12]
   12960:	add	r0, r0, #1
   12964:	str	r0, [r4]
   12968:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1296c:	ldr	r1, [r1]
   12970:	ldr	r2, [r0]
   12974:	mov	r0, #0
   12978:	cmp	r2, r1
   1297c:	movwgt	r0, #1
   12980:	mvnlt	r0, #0
   12984:	bx	lr
   12988:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1298c:	add	fp, sp, #24
   12990:	movw	r0, #33168	; 0x8190
   12994:	movt	r0, #2
   12998:	mov	r1, #0
   1299c:	str	r1, [r0]
   129a0:	movw	r0, #33492	; 0x82d4
   129a4:	movt	r0, #2
   129a8:	ldr	r9, [r0]
   129ac:	str	r1, [r0]
   129b0:	movw	r0, #33496	; 0x82d8
   129b4:	movt	r0, #2
   129b8:	ldr	r8, [r0]
   129bc:	str	r1, [r0]
   129c0:	ldrd	r0, [r9]
   129c4:	subs	r2, r0, #2
   129c8:	sbcs	r2, r1, #0
   129cc:	bcc	129e4 <__assert_fail@plt+0x179c>
   129d0:	subs	r2, r0, #1
   129d4:	sbc	r3, r1, #0
   129d8:	mov	r0, #1
   129dc:	mov	r1, #0
   129e0:	bl	128f4 <__assert_fail@plt+0x16ac>
   129e4:	cmp	r8, #2
   129e8:	bcc	12a30 <__assert_fail@plt+0x17e8>
   129ec:	add	r6, r9, #8
   129f0:	sub	r7, r8, #1
   129f4:	b	12a04 <__assert_fail@plt+0x17bc>
   129f8:	add	r6, r6, #16
   129fc:	subs	r7, r7, #1
   12a00:	beq	12a30 <__assert_fail@plt+0x17e8>
   12a04:	ldm	r6, {r0, r1, r2, r3}
   12a08:	adds	r0, r0, #1
   12a0c:	eor	r5, r0, r2
   12a10:	adc	r1, r1, #0
   12a14:	eor	r4, r1, r3
   12a18:	orrs	r5, r5, r4
   12a1c:	beq	129f8 <__assert_fail@plt+0x17b0>
   12a20:	subs	r2, r2, #1
   12a24:	sbc	r3, r3, #0
   12a28:	bl	128f4 <__assert_fail@plt+0x16ac>
   12a2c:	b	129f8 <__assert_fail@plt+0x17b0>
   12a30:	add	r0, r9, r8, lsl #4
   12a34:	ldrd	r0, [r0, #-8]
   12a38:	and	r2, r0, r1
   12a3c:	cmn	r2, #1
   12a40:	beq	12a58 <__assert_fail@plt+0x1810>
   12a44:	adds	r0, r0, #1
   12a48:	adc	r1, r1, #0
   12a4c:	mvn	r2, #0
   12a50:	mvn	r3, #0
   12a54:	bl	128f4 <__assert_fail@plt+0x16ac>
   12a58:	mov	r0, r9
   12a5c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a60:	b	12cb4 <__assert_fail@plt+0x1a6c>
   12a64:	movw	r1, #33172	; 0x8194
   12a68:	movt	r1, #2
   12a6c:	str	r0, [r1]
   12a70:	bx	lr
   12a74:	movw	r1, #33176	; 0x8198
   12a78:	movt	r1, #2
   12a7c:	strb	r0, [r1]
   12a80:	bx	lr
   12a84:	push	{r4, r5, r6, sl, fp, lr}
   12a88:	add	fp, sp, #16
   12a8c:	sub	sp, sp, #8
   12a90:	movw	r0, #33124	; 0x8164
   12a94:	movt	r0, #2
   12a98:	ldr	r0, [r0]
   12a9c:	bl	15a58 <__assert_fail@plt+0x4810>
   12aa0:	cmp	r0, #0
   12aa4:	beq	12acc <__assert_fail@plt+0x1884>
   12aa8:	movw	r0, #33176	; 0x8198
   12aac:	movt	r0, #2
   12ab0:	ldrb	r0, [r0]
   12ab4:	cmp	r0, #0
   12ab8:	beq	12aec <__assert_fail@plt+0x18a4>
   12abc:	bl	11140 <__errno_location@plt>
   12ac0:	ldr	r0, [r0]
   12ac4:	cmp	r0, #32
   12ac8:	bne	12aec <__assert_fail@plt+0x18a4>
   12acc:	movw	r0, #33112	; 0x8158
   12ad0:	movt	r0, #2
   12ad4:	ldr	r0, [r0]
   12ad8:	bl	15a58 <__assert_fail@plt+0x4810>
   12adc:	cmp	r0, #0
   12ae0:	subeq	sp, fp, #16
   12ae4:	popeq	{r4, r5, r6, sl, fp, pc}
   12ae8:	b	12b5c <__assert_fail@plt+0x1914>
   12aec:	movw	r1, #27494	; 0x6b66
   12af0:	movt	r1, #1
   12af4:	mov	r0, #0
   12af8:	mov	r2, #5
   12afc:	bl	11038 <dcgettext@plt>
   12b00:	mov	r4, r0
   12b04:	movw	r0, #33172	; 0x8194
   12b08:	movt	r0, #2
   12b0c:	ldr	r6, [r0]
   12b10:	bl	11140 <__errno_location@plt>
   12b14:	ldr	r5, [r0]
   12b18:	cmp	r6, #0
   12b1c:	bne	12b38 <__assert_fail@plt+0x18f0>
   12b20:	movw	r2, #27510	; 0x6b76
   12b24:	movt	r2, #1
   12b28:	mov	r0, #0
   12b2c:	mov	r1, r5
   12b30:	mov	r3, r4
   12b34:	b	12b58 <__assert_fail@plt+0x1910>
   12b38:	mov	r0, r6
   12b3c:	bl	14860 <__assert_fail@plt+0x3618>
   12b40:	mov	r3, r0
   12b44:	str	r4, [sp]
   12b48:	movw	r2, #27506	; 0x6b72
   12b4c:	movt	r2, #1
   12b50:	mov	r0, #0
   12b54:	mov	r1, r5
   12b58:	bl	110bc <error@plt>
   12b5c:	movw	r0, #33028	; 0x8104
   12b60:	movt	r0, #2
   12b64:	ldr	r0, [r0]
   12b68:	bl	10ffc <_exit@plt>
   12b6c:	b	10fc0 <posix_fadvise64@plt>
   12b70:	cmp	r0, #0
   12b74:	bxeq	lr
   12b78:	push	{r4, sl, fp, lr}
   12b7c:	add	fp, sp, #8
   12b80:	sub	sp, sp, #16
   12b84:	mov	r4, r1
   12b88:	bl	1117c <fileno@plt>
   12b8c:	mov	r1, #0
   12b90:	str	r1, [sp]
   12b94:	stmib	sp, {r1, r4}
   12b98:	mov	r2, #0
   12b9c:	mov	r3, #0
   12ba0:	bl	12b6c <__assert_fail@plt+0x1924>
   12ba4:	sub	sp, fp, #8
   12ba8:	pop	{r4, sl, fp, pc}
   12bac:	push	{r4, r5, fp, lr}
   12bb0:	add	fp, sp, #8
   12bb4:	sub	sp, sp, #8
   12bb8:	mov	r4, r0
   12bbc:	bl	1117c <fileno@plt>
   12bc0:	cmn	r0, #1
   12bc4:	ble	12c3c <__assert_fail@plt+0x19f4>
   12bc8:	mov	r0, r4
   12bcc:	bl	110e0 <__freading@plt>
   12bd0:	cmp	r0, #0
   12bd4:	beq	12c00 <__assert_fail@plt+0x19b8>
   12bd8:	mov	r0, r4
   12bdc:	bl	1117c <fileno@plt>
   12be0:	mov	r1, #1
   12be4:	str	r1, [sp]
   12be8:	mov	r2, #0
   12bec:	mov	r3, #0
   12bf0:	bl	11074 <lseek64@plt>
   12bf4:	and	r0, r0, r1
   12bf8:	cmn	r0, #1
   12bfc:	beq	12c3c <__assert_fail@plt+0x19f4>
   12c00:	mov	r0, r4
   12c04:	bl	12c4c <__assert_fail@plt+0x1a04>
   12c08:	cmp	r0, #0
   12c0c:	beq	12c3c <__assert_fail@plt+0x19f4>
   12c10:	bl	11140 <__errno_location@plt>
   12c14:	ldr	r5, [r0]
   12c18:	mov	r0, r4
   12c1c:	bl	111a0 <fclose@plt>
   12c20:	cmp	r5, #0
   12c24:	beq	12c34 <__assert_fail@plt+0x19ec>
   12c28:	bl	11140 <__errno_location@plt>
   12c2c:	str	r5, [r0]
   12c30:	mvn	r0, #0
   12c34:	sub	sp, fp, #8
   12c38:	pop	{r4, r5, fp, pc}
   12c3c:	mov	r0, r4
   12c40:	sub	sp, fp, #8
   12c44:	pop	{r4, r5, fp, lr}
   12c48:	b	111a0 <fclose@plt>
   12c4c:	push	{r4, sl, fp, lr}
   12c50:	add	fp, sp, #8
   12c54:	mov	r4, r0
   12c58:	cmp	r0, #0
   12c5c:	beq	12c74 <__assert_fail@plt+0x1a2c>
   12c60:	mov	r0, r4
   12c64:	bl	110e0 <__freading@plt>
   12c68:	cmp	r0, #0
   12c6c:	movne	r0, r4
   12c70:	blne	12c80 <__assert_fail@plt+0x1a38>
   12c74:	mov	r0, r4
   12c78:	pop	{r4, sl, fp, lr}
   12c7c:	b	10fcc <fflush@plt>
   12c80:	push	{fp, lr}
   12c84:	mov	fp, sp
   12c88:	sub	sp, sp, #8
   12c8c:	ldrb	r1, [r0, #1]
   12c90:	tst	r1, #1
   12c94:	beq	12cac <__assert_fail@plt+0x1a64>
   12c98:	mov	r1, #1
   12c9c:	str	r1, [sp]
   12ca0:	mov	r2, #0
   12ca4:	mov	r3, #0
   12ca8:	bl	12cdc <__assert_fail@plt+0x1a94>
   12cac:	mov	sp, fp
   12cb0:	pop	{fp, pc}
   12cb4:	push	{r4, r5, r6, sl, fp, lr}
   12cb8:	add	fp, sp, #16
   12cbc:	mov	r4, r0
   12cc0:	bl	11140 <__errno_location@plt>
   12cc4:	mov	r5, r0
   12cc8:	ldr	r6, [r0]
   12ccc:	mov	r0, r4
   12cd0:	bl	10fe4 <free@plt>
   12cd4:	str	r6, [r5]
   12cd8:	pop	{r4, r5, r6, sl, fp, pc}
   12cdc:	push	{r4, r5, r6, r7, fp, lr}
   12ce0:	add	fp, sp, #16
   12ce4:	sub	sp, sp, #8
   12ce8:	mov	r5, r3
   12cec:	mov	r6, r2
   12cf0:	mov	r4, r0
   12cf4:	ldr	r0, [r0, #4]
   12cf8:	ldr	r1, [r4, #8]
   12cfc:	cmp	r1, r0
   12d00:	bne	12d1c <__assert_fail@plt+0x1ad4>
   12d04:	ldrd	r0, [r4, #16]
   12d08:	cmp	r1, r0
   12d0c:	bne	12d1c <__assert_fail@plt+0x1ad4>
   12d10:	ldr	r0, [r4, #36]	; 0x24
   12d14:	cmp	r0, #0
   12d18:	beq	12d34 <__assert_fail@plt+0x1aec>
   12d1c:	mov	r0, r4
   12d20:	mov	r2, r6
   12d24:	mov	r3, r5
   12d28:	sub	sp, fp, #16
   12d2c:	pop	{r4, r5, r6, r7, fp, lr}
   12d30:	b	111ac <fseeko64@plt>
   12d34:	ldr	r7, [fp, #8]
   12d38:	mov	r0, r4
   12d3c:	bl	1117c <fileno@plt>
   12d40:	str	r7, [sp]
   12d44:	mov	r2, r6
   12d48:	mov	r3, r5
   12d4c:	bl	11074 <lseek64@plt>
   12d50:	and	r2, r0, r1
   12d54:	cmn	r2, #1
   12d58:	beq	12d78 <__assert_fail@plt+0x1b30>
   12d5c:	strd	r0, [r4, #80]	; 0x50
   12d60:	ldr	r0, [r4]
   12d64:	bic	r0, r0, #16
   12d68:	str	r0, [r4]
   12d6c:	mov	r0, #0
   12d70:	sub	sp, fp, #16
   12d74:	pop	{r4, r5, r6, r7, fp, pc}
   12d78:	mvn	r0, #0
   12d7c:	sub	sp, fp, #16
   12d80:	pop	{r4, r5, r6, r7, fp, pc}
   12d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d88:	add	fp, sp, #28
   12d8c:	sub	sp, sp, #52	; 0x34
   12d90:	mov	r6, r2
   12d94:	mov	r4, r1
   12d98:	mov	r5, r0
   12d9c:	ldr	r7, [r0]
   12da0:	cmp	r7, #0
   12da4:	str	r3, [sp, #32]
   12da8:	beq	12dbc <__assert_fail@plt+0x1b74>
   12dac:	ldr	r8, [r4]
   12db0:	cmp	r8, r6
   12db4:	bcs	12de4 <__assert_fail@plt+0x1b9c>
   12db8:	b	130ac <__assert_fail@plt+0x1e64>
   12dbc:	cmp	r3, #64	; 0x40
   12dc0:	mov	r8, r3
   12dc4:	movcs	r8, #64	; 0x40
   12dc8:	mov	r0, r8
   12dcc:	bl	156b0 <__assert_fail@plt+0x4468>
   12dd0:	mov	r7, r0
   12dd4:	cmp	r0, #0
   12dd8:	beq	130b4 <__assert_fail@plt+0x1e6c>
   12ddc:	cmp	r8, r6
   12de0:	bcc	130ac <__assert_fail@plt+0x1e64>
   12de4:	sub	r1, r8, r6
   12de8:	ldr	r0, [sp, #32]
   12dec:	cmp	r8, r0
   12df0:	bcc	12dfc <__assert_fail@plt+0x1bb4>
   12df4:	cmp	r1, #0
   12df8:	beq	130ac <__assert_fail@plt+0x1e64>
   12dfc:	str	r1, [sp, #40]	; 0x28
   12e00:	str	r5, [sp]
   12e04:	str	r4, [sp, #4]
   12e08:	ldr	r1, [fp, #16]
   12e0c:	ldr	r0, [fp, #12]
   12e10:	ldr	r2, [fp, #8]
   12e14:	cmn	r0, #1
   12e18:	mov	r3, r0
   12e1c:	moveq	r3, r2
   12e20:	cmn	r2, #1
   12e24:	moveq	r3, r0
   12e28:	str	r3, [sp, #20]
   12e2c:	moveq	r2, r0
   12e30:	str	r2, [sp, #28]
   12e34:	str	r7, [sp, #36]	; 0x24
   12e38:	add	r0, r7, r6
   12e3c:	str	r0, [fp, #-36]	; 0xffffffdc
   12e40:	mov	r7, r1
   12e44:	str	r6, [sp, #16]
   12e48:	eor	r0, r6, #-2147483648	; 0x80000000
   12e4c:	str	r0, [sp, #8]
   12e50:	ldr	r4, [sp, #32]
   12e54:	b	12e60 <__assert_fail@plt+0x1c18>
   12e58:	cmp	r6, #0
   12e5c:	bne	13064 <__assert_fail@plt+0x1e1c>
   12e60:	mov	r0, r7
   12e64:	sub	r1, fp, #32
   12e68:	bl	15adc <__assert_fail@plt+0x4894>
   12e6c:	mov	r9, r0
   12e70:	cmp	r0, #0
   12e74:	beq	12eb0 <__assert_fail@plt+0x1c68>
   12e78:	mov	r6, #0
   12e7c:	ldr	r1, [sp, #28]
   12e80:	cmn	r1, #1
   12e84:	beq	12ef8 <__assert_fail@plt+0x1cb0>
   12e88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e8c:	mov	r0, r9
   12e90:	ldr	r2, [sp, #20]
   12e94:	bl	130c0 <__assert_fail@plt+0x1e78>
   12e98:	cmp	r0, #0
   12e9c:	subne	r0, r0, r9
   12ea0:	addne	r0, r0, #1
   12ea4:	strne	r0, [fp, #-32]	; 0xffffffe0
   12ea8:	movne	r6, #1
   12eac:	b	12ef8 <__assert_fail@plt+0x1cb0>
   12eb0:	mov	r0, r7
   12eb4:	bl	1102c <getc_unlocked@plt>
   12eb8:	cmn	r0, #1
   12ebc:	beq	13054 <__assert_fail@plt+0x1e0c>
   12ec0:	mov	r3, r0
   12ec4:	mov	r0, #1
   12ec8:	str	r0, [fp, #-32]	; 0xffffffe0
   12ecc:	ldr	r0, [sp, #20]
   12ed0:	sub	r0, r3, r0
   12ed4:	clz	r0, r0
   12ed8:	lsr	r0, r0, #5
   12edc:	ldr	r1, [sp, #28]
   12ee0:	mov	r2, r3
   12ee4:	str	r3, [sp, #12]
   12ee8:	sub	r1, r3, r1
   12eec:	clz	r1, r1
   12ef0:	lsr	r1, r1, #5
   12ef4:	orr	r6, r1, r0
   12ef8:	ldr	sl, [sp, #40]	; 0x28
   12efc:	cmp	r8, r4
   12f00:	ldrcc	r0, [fp, #-32]	; 0xffffffe0
   12f04:	addcc	r1, r0, #1
   12f08:	cmpcc	sl, r1
   12f0c:	bcc	12f54 <__assert_fail@plt+0x1d0c>
   12f10:	cmp	sl, #2
   12f14:	bcc	12ff0 <__assert_fail@plt+0x1da8>
   12f18:	str	r8, [sp, #24]
   12f1c:	mov	r8, r7
   12f20:	mov	r5, r6
   12f24:	sub	r6, sl, #1
   12f28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12f2c:	cmp	r0, r6
   12f30:	movcc	r6, r0
   12f34:	cmp	r9, #0
   12f38:	beq	13000 <__assert_fail@plt+0x1db8>
   12f3c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   12f40:	mov	r0, r7
   12f44:	mov	r1, r9
   12f48:	mov	r2, r6
   12f4c:	bl	11008 <memcpy@plt>
   12f50:	b	1300c <__assert_fail@plt+0x1dc4>
   12f54:	str	r6, [sp, #40]	; 0x28
   12f58:	lsl	r2, r8, #1
   12f5c:	cmp	r8, #64	; 0x40
   12f60:	addcc	r2, r8, #64	; 0x40
   12f64:	ldr	r7, [sp, #36]	; 0x24
   12f68:	mov	r5, r4
   12f6c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12f70:	sub	r4, r3, r7
   12f74:	sub	r3, r2, r4
   12f78:	add	r0, r0, r4
   12f7c:	cmp	r3, r1
   12f80:	addcc	r2, r0, #1
   12f84:	cmp	r2, r5
   12f88:	mov	r6, r2
   12f8c:	movhi	r6, r5
   12f90:	cmp	r8, r2
   12f94:	movcs	r6, r5
   12f98:	ldr	r0, [sp, #16]
   12f9c:	sub	r0, r6, r0
   12fa0:	cmn	r0, #1
   12fa4:	bgt	12fb4 <__assert_fail@plt+0x1d6c>
   12fa8:	ldr	r6, [sp, #8]
   12fac:	cmp	r8, r6
   12fb0:	beq	13048 <__assert_fail@plt+0x1e00>
   12fb4:	mov	r0, r7
   12fb8:	mov	r1, r6
   12fbc:	bl	156e0 <__assert_fail@plt+0x4498>
   12fc0:	cmp	r0, #0
   12fc4:	beq	13048 <__assert_fail@plt+0x1e00>
   12fc8:	sub	sl, r6, r4
   12fcc:	add	r1, r0, r4
   12fd0:	str	r1, [fp, #-36]	; 0xffffffdc
   12fd4:	str	r0, [sp, #36]	; 0x24
   12fd8:	mov	r8, r6
   12fdc:	ldr	r4, [sp, #32]
   12fe0:	ldr	r7, [fp, #16]
   12fe4:	ldr	r6, [sp, #40]	; 0x28
   12fe8:	cmp	sl, #2
   12fec:	bcs	12f18 <__assert_fail@plt+0x1cd0>
   12ff0:	str	sl, [sp, #40]	; 0x28
   12ff4:	cmp	r9, #0
   12ff8:	bne	13030 <__assert_fail@plt+0x1de8>
   12ffc:	b	12e58 <__assert_fail@plt+0x1c10>
   13000:	ldr	r0, [sp, #12]
   13004:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13008:	strb	r0, [r7]
   1300c:	sub	sl, sl, r6
   13010:	str	sl, [sp, #40]	; 0x28
   13014:	add	r7, r7, r6
   13018:	str	r7, [fp, #-36]	; 0xffffffdc
   1301c:	mov	r6, r5
   13020:	mov	r7, r8
   13024:	ldr	r8, [sp, #24]
   13028:	cmp	r9, #0
   1302c:	beq	12e58 <__assert_fail@plt+0x1c10>
   13030:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13034:	mov	r0, r7
   13038:	bl	15b0c <__assert_fail@plt+0x48c4>
   1303c:	cmp	r0, #0
   13040:	beq	12e58 <__assert_fail@plt+0x1c10>
   13044:	b	130a0 <__assert_fail@plt+0x1e58>
   13048:	ldr	r4, [sp, #4]
   1304c:	ldr	r5, [sp]
   13050:	b	130ac <__assert_fail@plt+0x1e64>
   13054:	ldr	r0, [sp, #36]	; 0x24
   13058:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1305c:	cmp	r1, r0
   13060:	beq	130a0 <__assert_fail@plt+0x1e58>
   13064:	ldr	r2, [sp, #36]	; 0x24
   13068:	ldr	r0, [sp, #16]
   1306c:	add	r0, r2, r0
   13070:	mov	r1, #0
   13074:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13078:	strb	r1, [r3], -r0
   1307c:	ldr	r0, [sp]
   13080:	str	r2, [r0]
   13084:	ldr	r0, [sp, #4]
   13088:	str	r8, [r0]
   1308c:	cmp	r3, #0
   13090:	mvneq	r3, #0
   13094:	mov	r0, r3
   13098:	sub	sp, fp, #28
   1309c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130a0:	ldr	r4, [sp, #4]
   130a4:	ldr	r5, [sp]
   130a8:	ldr	r7, [sp, #36]	; 0x24
   130ac:	str	r7, [r5]
   130b0:	str	r8, [r4]
   130b4:	mvn	r0, #0
   130b8:	sub	sp, fp, #28
   130bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130c4:	add	fp, sp, #24
   130c8:	uxtb	ip, r2
   130cc:	uxtb	r1, r1
   130d0:	cmp	r1, ip
   130d4:	bne	130e4 <__assert_fail@plt+0x1e9c>
   130d8:	mov	r2, r3
   130dc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   130e0:	b	11194 <memchr@plt>
   130e4:	cmp	r3, #0
   130e8:	beq	13110 <__assert_fail@plt+0x1ec8>
   130ec:	ands	r2, r0, #3
   130f0:	beq	13110 <__assert_fail@plt+0x1ec8>
   130f4:	ldrb	r2, [r0]
   130f8:	cmp	r1, r2
   130fc:	cmpne	ip, r2
   13100:	beq	131b8 <__assert_fail@plt+0x1f70>
   13104:	subs	r3, r3, #1
   13108:	add	r0, r0, #1
   1310c:	bne	130ec <__assert_fail@plt+0x1ea4>
   13110:	rsb	r2, r0, #0
   13114:	orr	r7, ip, ip, lsl #8
   13118:	orr	r8, r7, r7, lsl #16
   1311c:	orr	r7, r1, r1, lsl #8
   13120:	orr	r9, r7, r7, lsl #16
   13124:	movw	r6, #32896	; 0x8080
   13128:	movt	r6, #32896	; 0x8080
   1312c:	movw	r7, #65279	; 0xfeff
   13130:	movt	r7, #65278	; 0xfefe
   13134:	mov	lr, r3
   13138:	mov	r4, r2
   1313c:	cmp	r3, #4
   13140:	bcc	13184 <__assert_fail@plt+0x1f3c>
   13144:	rsb	r2, r4, #0
   13148:	ldr	r2, [r2]
   1314c:	eor	r3, r2, r8
   13150:	eor	r5, r3, r6
   13154:	add	r3, r3, r7
   13158:	and	r3, r3, r5
   1315c:	eor	r2, r2, r9
   13160:	eor	r5, r2, r6
   13164:	add	r2, r2, r7
   13168:	and	r2, r2, r5
   1316c:	orr	r5, r2, r3
   13170:	sub	r2, r4, #4
   13174:	sub	r3, lr, #4
   13178:	add	r0, r0, #4
   1317c:	tst	r5, r6
   13180:	beq	13134 <__assert_fail@plt+0x1eec>
   13184:	mov	r0, #0
   13188:	cmp	lr, #0
   1318c:	beq	131b8 <__assert_fail@plt+0x1f70>
   13190:	ldrb	r2, [r0, -r4]
   13194:	cmp	r1, r2
   13198:	cmpne	ip, r2
   1319c:	beq	131b4 <__assert_fail@plt+0x1f6c>
   131a0:	add	r0, r0, #1
   131a4:	cmp	lr, r0
   131a8:	bne	13190 <__assert_fail@plt+0x1f48>
   131ac:	mov	r0, #0
   131b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131b4:	sub	r0, r0, r4
   131b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131bc:	push	{r4, r5, fp, lr}
   131c0:	add	fp, sp, #8
   131c4:	cmp	r0, #0
   131c8:	beq	1325c <__assert_fail@plt+0x2014>
   131cc:	mov	r4, r0
   131d0:	mov	r1, #47	; 0x2f
   131d4:	bl	111c4 <strrchr@plt>
   131d8:	cmp	r0, #0
   131dc:	mov	r5, r4
   131e0:	addne	r5, r0, #1
   131e4:	sub	r0, r5, r4
   131e8:	cmp	r0, #7
   131ec:	blt	13240 <__assert_fail@plt+0x1ff8>
   131f0:	sub	r0, r5, #7
   131f4:	movw	r1, #27569	; 0x6bb1
   131f8:	movt	r1, #1
   131fc:	mov	r2, #7
   13200:	bl	1120c <strncmp@plt>
   13204:	cmp	r0, #0
   13208:	bne	13240 <__assert_fail@plt+0x1ff8>
   1320c:	movw	r1, #27577	; 0x6bb9
   13210:	movt	r1, #1
   13214:	mov	r0, r5
   13218:	mov	r2, #3
   1321c:	bl	1120c <strncmp@plt>
   13220:	cmp	r0, #0
   13224:	beq	13230 <__assert_fail@plt+0x1fe8>
   13228:	mov	r4, r5
   1322c:	b	13240 <__assert_fail@plt+0x1ff8>
   13230:	add	r4, r5, #3
   13234:	movw	r0, #33096	; 0x8148
   13238:	movt	r0, #2
   1323c:	str	r4, [r0]
   13240:	movw	r0, #33100	; 0x814c
   13244:	movt	r0, #2
   13248:	str	r4, [r0]
   1324c:	movw	r0, #33180	; 0x819c
   13250:	movt	r0, #2
   13254:	str	r4, [r0]
   13258:	pop	{r4, r5, fp, pc}
   1325c:	movw	r0, #33112	; 0x8158
   13260:	movt	r0, #2
   13264:	ldr	r3, [r0]
   13268:	movw	r0, #27513	; 0x6b79
   1326c:	movt	r0, #1
   13270:	mov	r1, #55	; 0x37
   13274:	mov	r2, #1
   13278:	bl	11068 <fwrite@plt>
   1327c:	bl	11218 <abort@plt>
   13280:	push	{r4, r5, r6, sl, fp, lr}
   13284:	add	fp, sp, #16
   13288:	mov	r4, r0
   1328c:	movw	r0, #33184	; 0x81a0
   13290:	movt	r0, #2
   13294:	cmp	r4, #0
   13298:	moveq	r4, r0
   1329c:	bl	11140 <__errno_location@plt>
   132a0:	mov	r5, r0
   132a4:	ldr	r6, [r0]
   132a8:	mov	r0, r4
   132ac:	mov	r1, #48	; 0x30
   132b0:	bl	15578 <__assert_fail@plt+0x4330>
   132b4:	str	r6, [r5]
   132b8:	pop	{r4, r5, r6, sl, fp, pc}
   132bc:	movw	r1, #33184	; 0x81a0
   132c0:	movt	r1, #2
   132c4:	cmp	r0, #0
   132c8:	movne	r1, r0
   132cc:	ldr	r0, [r1]
   132d0:	bx	lr
   132d4:	movw	r2, #33184	; 0x81a0
   132d8:	movt	r2, #2
   132dc:	cmp	r0, #0
   132e0:	movne	r2, r0
   132e4:	str	r1, [r2]
   132e8:	bx	lr
   132ec:	movw	r3, #33184	; 0x81a0
   132f0:	movt	r3, #2
   132f4:	cmp	r0, #0
   132f8:	movne	r3, r0
   132fc:	ubfx	r0, r1, #5, #3
   13300:	add	ip, r3, r0, lsl #2
   13304:	ldr	r3, [ip, #8]
   13308:	and	r1, r1, #31
   1330c:	mov	r0, #1
   13310:	and	r0, r0, r3, lsr r1
   13314:	and	r2, r2, #1
   13318:	eor	r2, r0, r2
   1331c:	eor	r1, r3, r2, lsl r1
   13320:	str	r1, [ip, #8]
   13324:	bx	lr
   13328:	movw	r2, #33184	; 0x81a0
   1332c:	movt	r2, #2
   13330:	cmp	r0, #0
   13334:	movne	r2, r0
   13338:	ldr	r0, [r2, #4]
   1333c:	str	r1, [r2, #4]
   13340:	bx	lr
   13344:	push	{fp, lr}
   13348:	mov	fp, sp
   1334c:	movw	r3, #33184	; 0x81a0
   13350:	movt	r3, #2
   13354:	cmp	r0, #0
   13358:	movne	r3, r0
   1335c:	mov	r0, #10
   13360:	str	r0, [r3]
   13364:	cmp	r1, #0
   13368:	cmpne	r2, #0
   1336c:	bne	13374 <__assert_fail@plt+0x212c>
   13370:	bl	11218 <abort@plt>
   13374:	str	r1, [r3, #40]	; 0x28
   13378:	str	r2, [r3, #44]	; 0x2c
   1337c:	pop	{fp, pc}
   13380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13384:	add	fp, sp, #28
   13388:	sub	sp, sp, #20
   1338c:	mov	r8, r3
   13390:	mov	r9, r2
   13394:	mov	sl, r1
   13398:	mov	r7, r0
   1339c:	ldr	r0, [fp, #8]
   133a0:	movw	r5, #33184	; 0x81a0
   133a4:	movt	r5, #2
   133a8:	cmp	r0, #0
   133ac:	movne	r5, r0
   133b0:	bl	11140 <__errno_location@plt>
   133b4:	mov	r4, r0
   133b8:	ldm	r5, {r0, r1}
   133bc:	ldr	r2, [r5, #40]	; 0x28
   133c0:	ldr	r3, [r5, #44]	; 0x2c
   133c4:	ldr	r6, [r4]
   133c8:	add	r5, r5, #8
   133cc:	stm	sp, {r0, r1, r5}
   133d0:	str	r2, [sp, #12]
   133d4:	str	r3, [sp, #16]
   133d8:	mov	r0, r7
   133dc:	mov	r1, sl
   133e0:	mov	r2, r9
   133e4:	mov	r3, r8
   133e8:	bl	133f8 <__assert_fail@plt+0x21b0>
   133ec:	str	r6, [r4]
   133f0:	sub	sp, fp, #28
   133f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133fc:	add	fp, sp, #28
   13400:	sub	sp, sp, #156	; 0x9c
   13404:	mov	r9, r3
   13408:	mov	r7, r1
   1340c:	mov	r6, r0
   13410:	str	r2, [fp, #-80]	; 0xffffffb0
   13414:	add	r0, r2, #1
   13418:	str	r0, [sp, #76]	; 0x4c
   1341c:	ldr	r0, [fp, #12]
   13420:	and	r1, r0, #1
   13424:	str	r1, [sp, #40]	; 0x28
   13428:	and	r1, r0, #4
   1342c:	str	r1, [sp, #36]	; 0x24
   13430:	ubfx	r4, r0, #1, #1
   13434:	bl	11080 <__ctype_get_mb_cur_max@plt>
   13438:	str	r0, [sp, #44]	; 0x2c
   1343c:	ldr	r0, [fp, #24]
   13440:	str	r0, [sp, #88]	; 0x58
   13444:	ldr	r0, [fp, #20]
   13448:	str	r0, [sp, #80]	; 0x50
   1344c:	ldr	r1, [fp, #8]
   13450:	mov	r0, #0
   13454:	str	r0, [sp, #84]	; 0x54
   13458:	mov	r0, #0
   1345c:	str	r0, [fp, #-84]	; 0xffffffac
   13460:	mov	r0, #0
   13464:	str	r0, [fp, #-72]	; 0xffffffb8
   13468:	mov	r0, #0
   1346c:	mov	r2, #0
   13470:	str	r2, [fp, #-56]	; 0xffffffc8
   13474:	mov	r2, #0
   13478:	str	r2, [sp, #64]	; 0x40
   1347c:	mov	r2, #1
   13480:	str	r2, [fp, #-48]	; 0xffffffd0
   13484:	cmp	r1, #10
   13488:	bhi	143b4 <__assert_fail@plt+0x316c>
   1348c:	mov	sl, r7
   13490:	mov	r7, r1
   13494:	add	r1, pc, #24
   13498:	mov	r8, #0
   1349c:	mov	r2, #1
   134a0:	mov	r3, #0
   134a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   134a8:	mov	lr, r9
   134ac:	mov	r5, r6
   134b0:	ldr	pc, [r1, r7, lsl #2]
   134b4:	andeq	r3, r1, r8, lsl #11
   134b8:	andeq	r3, r1, r8, asr #11
   134bc:	muleq	r1, r8, r5
   134c0:	andeq	r3, r1, r0, lsl #11
   134c4:			; <UNDEFINED> instruction: 0x000135bc
   134c8:	andeq	r3, r1, ip, lsl r6
   134cc:	andeq	r3, r1, r8, lsr #11
   134d0:	andeq	r3, r1, r8, ror r6
   134d4:	andeq	r3, r1, r0, ror #9
   134d8:	andeq	r3, r1, r0, ror #9
   134dc:	andeq	r3, r1, ip, lsl #10
   134e0:	movw	r0, #27659	; 0x6c0b
   134e4:	movt	r0, #1
   134e8:	mov	r1, r7
   134ec:	bl	149bc <__assert_fail@plt+0x3774>
   134f0:	str	r0, [sp, #80]	; 0x50
   134f4:	movw	r0, #27661	; 0x6c0d
   134f8:	movt	r0, #1
   134fc:	mov	r1, r7
   13500:	bl	149bc <__assert_fail@plt+0x3774>
   13504:	mov	r5, r6
   13508:	str	r0, [sp, #88]	; 0x58
   1350c:	mov	r8, #0
   13510:	tst	r4, #1
   13514:	str	r7, [fp, #-64]	; 0xffffffc0
   13518:	bne	13550 <__assert_fail@plt+0x2308>
   1351c:	ldr	r0, [sp, #80]	; 0x50
   13520:	ldrb	r0, [r0]
   13524:	cmp	r0, #0
   13528:	beq	13550 <__assert_fail@plt+0x2308>
   1352c:	ldr	r1, [sp, #80]	; 0x50
   13530:	add	r1, r1, #1
   13534:	mov	r8, #0
   13538:	cmp	r8, sl
   1353c:	strbcc	r0, [r5, r8]
   13540:	ldrb	r0, [r1, r8]
   13544:	add	r8, r8, #1
   13548:	cmp	r0, #0
   1354c:	bne	13538 <__assert_fail@plt+0x22f0>
   13550:	ldr	r7, [sp, #88]	; 0x58
   13554:	mov	r0, r7
   13558:	bl	11128 <strlen@plt>
   1355c:	mov	r5, r6
   13560:	str	r0, [fp, #-72]	; 0xffffffb8
   13564:	str	r7, [fp, #-84]	; 0xffffffac
   13568:	mov	r2, #1
   1356c:	mov	r3, r4
   13570:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13574:	mov	lr, r9
   13578:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1357c:	b	13678 <__assert_fail@plt+0x2430>
   13580:	mov	r0, #1
   13584:	b	135c8 <__assert_fail@plt+0x2380>
   13588:	mov	r7, #0
   1358c:	mov	r8, #0
   13590:	mov	r2, r0
   13594:	b	13674 <__assert_fail@plt+0x242c>
   13598:	tst	r4, #1
   1359c:	bne	135c8 <__assert_fail@plt+0x2380>
   135a0:	mov	r2, r0
   135a4:	b	135f0 <__assert_fail@plt+0x23a8>
   135a8:	mov	r0, #1
   135ac:	str	r0, [fp, #-72]	; 0xffffffb8
   135b0:	mov	r8, #0
   135b4:	mov	r7, #5
   135b8:	b	13634 <__assert_fail@plt+0x23ec>
   135bc:	mov	r2, #1
   135c0:	tst	r4, #1
   135c4:	beq	135f0 <__assert_fail@plt+0x23a8>
   135c8:	mov	r1, #1
   135cc:	str	r1, [fp, #-72]	; 0xffffffb8
   135d0:	mov	r8, #0
   135d4:	mov	r7, #2
   135d8:	movw	r1, #27661	; 0x6c0d
   135dc:	movt	r1, #1
   135e0:	str	r1, [fp, #-84]	; 0xffffffac
   135e4:	mov	r2, r0
   135e8:	mov	r3, #1
   135ec:	b	13678 <__assert_fail@plt+0x2430>
   135f0:	mov	r8, #1
   135f4:	mov	r7, #2
   135f8:	cmp	sl, #0
   135fc:	movne	r0, #39	; 0x27
   13600:	strbne	r0, [r5]
   13604:	movw	r0, #27661	; 0x6c0d
   13608:	movt	r0, #1
   1360c:	str	r0, [fp, #-84]	; 0xffffffac
   13610:	mov	r0, #1
   13614:	str	r0, [fp, #-72]	; 0xffffffb8
   13618:	b	13674 <__assert_fail@plt+0x242c>
   1361c:	mov	r7, #5
   13620:	tst	r4, #1
   13624:	beq	1364c <__assert_fail@plt+0x2404>
   13628:	mov	r0, #1
   1362c:	str	r0, [fp, #-72]	; 0xffffffb8
   13630:	mov	r8, #0
   13634:	movw	r0, #27657	; 0x6c09
   13638:	movt	r0, #1
   1363c:	str	r0, [fp, #-84]	; 0xffffffac
   13640:	mov	r2, #1
   13644:	mov	r3, #1
   13648:	b	13678 <__assert_fail@plt+0x2430>
   1364c:	cmp	sl, #0
   13650:	movne	r0, #34	; 0x22
   13654:	strbne	r0, [r5]
   13658:	mov	r8, #1
   1365c:	movw	r0, #27657	; 0x6c09
   13660:	movt	r0, #1
   13664:	str	r0, [fp, #-84]	; 0xffffffac
   13668:	mov	r0, #1
   1366c:	str	r0, [fp, #-72]	; 0xffffffb8
   13670:	mov	r2, #1
   13674:	mov	r3, #0
   13678:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1367c:	cmp	r0, #0
   13680:	movwne	r0, #1
   13684:	and	r1, r0, r3
   13688:	and	r1, r2, r1
   1368c:	str	r1, [sp, #56]	; 0x38
   13690:	sub	r1, r7, #2
   13694:	clz	r1, r1
   13698:	lsr	r1, r1, #5
   1369c:	and	r1, r1, r3
   136a0:	str	r1, [sp, #68]	; 0x44
   136a4:	str	r7, [fp, #-64]	; 0xffffffc0
   136a8:	subs	r1, r7, #2
   136ac:	movwne	r1, #1
   136b0:	eor	r4, r3, #1
   136b4:	str	r4, [fp, #-88]	; 0xffffffa8
   136b8:	orr	r4, r1, r4
   136bc:	str	r4, [sp, #72]	; 0x48
   136c0:	and	r1, r1, r2
   136c4:	and	r0, r0, r1
   136c8:	str	r0, [fp, #-60]	; 0xffffffc4
   136cc:	str	r3, [fp, #-76]	; 0xffffffb4
   136d0:	orr	r0, r1, r3
   136d4:	eor	r0, r0, #1
   136d8:	ldr	r1, [fp, #16]
   136dc:	clz	r1, r1
   136e0:	lsr	r1, r1, #5
   136e4:	orr	r0, r1, r0
   136e8:	str	r0, [fp, #-68]	; 0xffffffbc
   136ec:	str	r2, [sp, #92]	; 0x5c
   136f0:	eor	r0, r2, #1
   136f4:	str	r0, [sp, #60]	; 0x3c
   136f8:	mov	r7, #0
   136fc:	cmn	lr, #1
   13700:	beq	13710 <__assert_fail@plt+0x24c8>
   13704:	cmp	r7, lr
   13708:	bne	1371c <__assert_fail@plt+0x24d4>
   1370c:	b	14228 <__assert_fail@plt+0x2fe0>
   13710:	ldrb	r0, [ip, r7]
   13714:	cmp	r0, #0
   13718:	beq	14228 <__assert_fail@plt+0x2fe0>
   1371c:	mov	r9, #0
   13720:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13724:	cmp	r0, #0
   13728:	beq	1375c <__assert_fail@plt+0x2514>
   1372c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13730:	add	r4, r7, r0
   13734:	cmp	r0, #2
   13738:	bcc	13754 <__assert_fail@plt+0x250c>
   1373c:	cmn	lr, #1
   13740:	bne	13754 <__assert_fail@plt+0x250c>
   13744:	mov	r0, ip
   13748:	bl	11128 <strlen@plt>
   1374c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13750:	mov	lr, r0
   13754:	cmp	r4, lr
   13758:	bls	13768 <__assert_fail@plt+0x2520>
   1375c:	mov	r0, #0
   13760:	str	r0, [fp, #-52]	; 0xffffffcc
   13764:	b	137ac <__assert_fail@plt+0x2564>
   13768:	mov	r4, lr
   1376c:	add	r0, ip, r7
   13770:	ldr	r1, [fp, #-84]	; 0xffffffac
   13774:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13778:	bl	1111c <bcmp@plt>
   1377c:	cmp	r0, #0
   13780:	mov	r1, r0
   13784:	movwne	r1, #1
   13788:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1378c:	orr	r1, r1, r2
   13790:	tst	r1, #1
   13794:	beq	142fc <__assert_fail@plt+0x30b4>
   13798:	clz	r0, r0
   1379c:	lsr	r0, r0, #5
   137a0:	str	r0, [fp, #-52]	; 0xffffffcc
   137a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137a8:	mov	lr, r4
   137ac:	ldrb	r4, [ip, r7]
   137b0:	cmp	r4, #126	; 0x7e
   137b4:	bhi	13ce4 <__assert_fail@plt+0x2a9c>
   137b8:	mov	r6, #1
   137bc:	mov	r2, #110	; 0x6e
   137c0:	mov	r0, #97	; 0x61
   137c4:	add	r3, pc, #4
   137c8:	mov	r1, #0
   137cc:	ldr	pc, [r3, r4, lsl #2]
   137d0:	andeq	r3, r1, r4, asr #22
   137d4:	andeq	r3, r1, r4, ror #25
   137d8:	andeq	r3, r1, r4, ror #25
   137dc:	andeq	r3, r1, r4, ror #25
   137e0:	andeq	r3, r1, r4, ror #25
   137e4:	andeq	r3, r1, r4, ror #25
   137e8:	andeq	r3, r1, r4, ror #25
   137ec:			; <UNDEFINED> instruction: 0x00013db8
   137f0:	andeq	r3, r1, r4, lsr #22
   137f4:	andeq	r3, r1, ip, lsl fp
   137f8:	andeq	r3, r1, r0, lsr fp
   137fc:	andeq	r3, r1, ip, asr #24
   13800:	andeq	r3, r1, r4, lsl fp
   13804:	andeq	r3, r1, ip, lsr #22
   13808:	andeq	r3, r1, r4, ror #25
   1380c:	andeq	r3, r1, r4, ror #25
   13810:	andeq	r3, r1, r4, ror #25
   13814:	andeq	r3, r1, r4, ror #25
   13818:	andeq	r3, r1, r4, ror #25
   1381c:	andeq	r3, r1, r4, ror #25
   13820:	andeq	r3, r1, r4, ror #25
   13824:	andeq	r3, r1, r4, ror #25
   13828:	andeq	r3, r1, r4, ror #25
   1382c:	andeq	r3, r1, r4, ror #25
   13830:	andeq	r3, r1, r4, ror #25
   13834:	andeq	r3, r1, r4, ror #25
   13838:	andeq	r3, r1, r4, ror #25
   1383c:	andeq	r3, r1, r4, ror #25
   13840:	andeq	r3, r1, r4, ror #25
   13844:	andeq	r3, r1, r4, ror #25
   13848:	andeq	r3, r1, r4, ror #25
   1384c:	andeq	r3, r1, r4, ror #25
   13850:	andeq	r3, r1, r8, asr #21
   13854:	andeq	r3, r1, ip, asr #21
   13858:	andeq	r3, r1, ip, asr #21
   1385c:			; <UNDEFINED> instruction: 0x00013ab4
   13860:	andeq	r3, r1, ip, asr #21
   13864:	andeq	r3, r1, ip, asr #19
   13868:	andeq	r3, r1, ip, asr #21
   1386c:	andeq	r3, r1, r4, asr ip
   13870:	andeq	r3, r1, ip, asr #21
   13874:	andeq	r3, r1, ip, asr #21
   13878:	andeq	r3, r1, ip, asr #21
   1387c:	andeq	r3, r1, ip, asr #19
   13880:	andeq	r3, r1, ip, asr #19
   13884:	andeq	r3, r1, ip, asr #19
   13888:	andeq	r3, r1, ip, asr #19
   1388c:	andeq	r3, r1, ip, asr #19
   13890:	andeq	r3, r1, ip, asr #19
   13894:	andeq	r3, r1, ip, asr #19
   13898:	andeq	r3, r1, ip, asr #19
   1389c:	andeq	r3, r1, ip, asr #19
   138a0:	andeq	r3, r1, ip, asr #19
   138a4:	andeq	r3, r1, ip, asr #19
   138a8:	andeq	r3, r1, ip, asr #19
   138ac:	andeq	r3, r1, ip, asr #19
   138b0:	andeq	r3, r1, ip, asr #19
   138b4:	andeq	r3, r1, ip, asr #19
   138b8:	andeq	r3, r1, ip, asr #19
   138bc:	andeq	r3, r1, ip, asr #21
   138c0:	andeq	r3, r1, ip, asr #21
   138c4:	andeq	r3, r1, ip, asr #21
   138c8:	andeq	r3, r1, ip, asr #21
   138cc:	andeq	r3, r1, ip, lsl ip
   138d0:	andeq	r3, r1, r4, ror #25
   138d4:	andeq	r3, r1, ip, asr #19
   138d8:	andeq	r3, r1, ip, asr #19
   138dc:	andeq	r3, r1, ip, asr #19
   138e0:	andeq	r3, r1, ip, asr #19
   138e4:	andeq	r3, r1, ip, asr #19
   138e8:	andeq	r3, r1, ip, asr #19
   138ec:	andeq	r3, r1, ip, asr #19
   138f0:	andeq	r3, r1, ip, asr #19
   138f4:	andeq	r3, r1, ip, asr #19
   138f8:	andeq	r3, r1, ip, asr #19
   138fc:	andeq	r3, r1, ip, asr #19
   13900:	andeq	r3, r1, ip, asr #19
   13904:	andeq	r3, r1, ip, asr #19
   13908:	andeq	r3, r1, ip, asr #19
   1390c:	andeq	r3, r1, ip, asr #19
   13910:	andeq	r3, r1, ip, asr #19
   13914:	andeq	r3, r1, ip, asr #19
   13918:	andeq	r3, r1, ip, asr #19
   1391c:	andeq	r3, r1, ip, asr #19
   13920:	andeq	r3, r1, ip, asr #19
   13924:	andeq	r3, r1, ip, asr #19
   13928:	andeq	r3, r1, ip, asr #19
   1392c:	andeq	r3, r1, ip, asr #19
   13930:	andeq	r3, r1, ip, asr #19
   13934:	andeq	r3, r1, ip, asr #19
   13938:	andeq	r3, r1, ip, asr #19
   1393c:	andeq	r3, r1, ip, asr #21
   13940:	strdeq	r3, [r1], -r4
   13944:	andeq	r3, r1, ip, asr #19
   13948:	andeq	r3, r1, ip, asr #21
   1394c:	andeq	r3, r1, ip, asr #19
   13950:	andeq	r3, r1, ip, asr #21
   13954:	andeq	r3, r1, ip, asr #19
   13958:	andeq	r3, r1, ip, asr #19
   1395c:	andeq	r3, r1, ip, asr #19
   13960:	andeq	r3, r1, ip, asr #19
   13964:	andeq	r3, r1, ip, asr #19
   13968:	andeq	r3, r1, ip, asr #19
   1396c:	andeq	r3, r1, ip, asr #19
   13970:	andeq	r3, r1, ip, asr #19
   13974:	andeq	r3, r1, ip, asr #19
   13978:	andeq	r3, r1, ip, asr #19
   1397c:	andeq	r3, r1, ip, asr #19
   13980:	andeq	r3, r1, ip, asr #19
   13984:	andeq	r3, r1, ip, asr #19
   13988:	andeq	r3, r1, ip, asr #19
   1398c:	andeq	r3, r1, ip, asr #19
   13990:	andeq	r3, r1, ip, asr #19
   13994:	andeq	r3, r1, ip, asr #19
   13998:	andeq	r3, r1, ip, asr #19
   1399c:	andeq	r3, r1, ip, asr #19
   139a0:	andeq	r3, r1, ip, asr #19
   139a4:	andeq	r3, r1, ip, asr #19
   139a8:	andeq	r3, r1, ip, asr #19
   139ac:	andeq	r3, r1, ip, asr #19
   139b0:	andeq	r3, r1, ip, asr #19
   139b4:	andeq	r3, r1, ip, asr #19
   139b8:	andeq	r3, r1, ip, asr #19
   139bc:	andeq	r3, r1, r8, lsl #21
   139c0:	andeq	r3, r1, ip, asr #21
   139c4:	andeq	r3, r1, r8, lsl #21
   139c8:			; <UNDEFINED> instruction: 0x00013ab4
   139cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   139d0:	tst	r0, #1
   139d4:	bne	13a00 <__assert_fail@plt+0x27b8>
   139d8:	ubfx	r0, r4, #5, #3
   139dc:	ldr	r1, [fp, #16]
   139e0:	ldr	r0, [r1, r0, lsl #2]
   139e4:	and	r1, r4, #31
   139e8:	mov	r2, #1
   139ec:	tst	r0, r2, lsl r1
   139f0:	beq	13a00 <__assert_fail@plt+0x27b8>
   139f4:	mov	r0, r4
   139f8:	mov	r1, r6
   139fc:	b	13a14 <__assert_fail@plt+0x27cc>
   13a00:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13a04:	cmp	r0, #0
   13a08:	mov	r0, r4
   13a0c:	mov	r1, r6
   13a10:	beq	13d4c <__assert_fail@plt+0x2b04>
   13a14:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13a18:	tst	r2, #1
   13a1c:	bne	14310 <__assert_fail@plt+0x30c8>
   13a20:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13a24:	subs	r2, r2, #2
   13a28:	movwne	r2, #1
   13a2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a30:	orr	r2, r2, r3
   13a34:	tst	r2, #1
   13a38:	bne	13a74 <__assert_fail@plt+0x282c>
   13a3c:	cmp	r8, sl
   13a40:	movcc	r2, #39	; 0x27
   13a44:	strbcc	r2, [r5, r8]
   13a48:	add	r2, r8, #1
   13a4c:	cmp	r2, sl
   13a50:	movcc	r3, #36	; 0x24
   13a54:	strbcc	r3, [r5, r2]
   13a58:	add	r2, r8, #2
   13a5c:	cmp	r2, sl
   13a60:	movcc	r3, #39	; 0x27
   13a64:	strbcc	r3, [r5, r2]
   13a68:	add	r8, r8, #3
   13a6c:	mov	r2, #1
   13a70:	str	r2, [fp, #-56]	; 0xffffffc8
   13a74:	cmp	r8, sl
   13a78:	movcc	r2, #92	; 0x5c
   13a7c:	strbcc	r2, [r5, r8]
   13a80:	add	r8, r8, #1
   13a84:	b	13d90 <__assert_fail@plt+0x2b48>
   13a88:	cmp	lr, #1
   13a8c:	beq	13ab4 <__assert_fail@plt+0x286c>
   13a90:	mov	r6, #0
   13a94:	cmn	lr, #1
   13a98:	bne	13ac0 <__assert_fail@plt+0x2878>
   13a9c:	ldrb	r0, [ip, #1]
   13aa0:	cmp	r0, #0
   13aa4:	beq	13ab4 <__assert_fail@plt+0x286c>
   13aa8:	mvn	lr, #0
   13aac:	mov	r9, #0
   13ab0:	b	139cc <__assert_fail@plt+0x2784>
   13ab4:	mov	r6, #0
   13ab8:	cmp	r7, #0
   13abc:	beq	13ac8 <__assert_fail@plt+0x2880>
   13ac0:	mov	r9, #0
   13ac4:	b	139cc <__assert_fail@plt+0x2784>
   13ac8:	mov	r1, #1
   13acc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ad0:	cmp	r0, #2
   13ad4:	bne	13aec <__assert_fail@plt+0x28a4>
   13ad8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13adc:	tst	r0, #1
   13ae0:	mov	r6, r1
   13ae4:	beq	139cc <__assert_fail@plt+0x2784>
   13ae8:	b	14310 <__assert_fail@plt+0x30c8>
   13aec:	mov	r6, r1
   13af0:	b	139cc <__assert_fail@plt+0x2784>
   13af4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13af8:	cmp	r0, #2
   13afc:	bne	13d30 <__assert_fail@plt+0x2ae8>
   13b00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13b04:	tst	r0, #1
   13b08:	bne	14310 <__assert_fail@plt+0x30c8>
   13b0c:	mov	r9, #0
   13b10:	b	13d44 <__assert_fail@plt+0x2afc>
   13b14:	mov	r0, #102	; 0x66
   13b18:	b	13db8 <__assert_fail@plt+0x2b70>
   13b1c:	mov	r2, #116	; 0x74
   13b20:	b	13b30 <__assert_fail@plt+0x28e8>
   13b24:	mov	r0, #98	; 0x62
   13b28:	b	13db8 <__assert_fail@plt+0x2b70>
   13b2c:	mov	r2, #114	; 0x72
   13b30:	ldr	r0, [sp, #72]	; 0x48
   13b34:	tst	r0, #1
   13b38:	mov	r0, r2
   13b3c:	bne	13db8 <__assert_fail@plt+0x2b70>
   13b40:	b	14310 <__assert_fail@plt+0x30c8>
   13b44:	ldr	r0, [sp, #92]	; 0x5c
   13b48:	tst	r0, #1
   13b4c:	beq	13dd4 <__assert_fail@plt+0x2b8c>
   13b50:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13b54:	tst	r0, #1
   13b58:	bne	14310 <__assert_fail@plt+0x30c8>
   13b5c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b60:	subs	r0, r0, #2
   13b64:	movwne	r0, #1
   13b68:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13b6c:	orr	r0, r0, r1
   13b70:	tst	r0, #1
   13b74:	bne	13bb0 <__assert_fail@plt+0x2968>
   13b78:	cmp	r8, sl
   13b7c:	movcc	r0, #39	; 0x27
   13b80:	strbcc	r0, [r5, r8]
   13b84:	add	r0, r8, #1
   13b88:	cmp	r0, sl
   13b8c:	movcc	r1, #36	; 0x24
   13b90:	strbcc	r1, [r5, r0]
   13b94:	add	r0, r8, #2
   13b98:	cmp	r0, sl
   13b9c:	movcc	r1, #39	; 0x27
   13ba0:	strbcc	r1, [r5, r0]
   13ba4:	add	r8, r8, #3
   13ba8:	mov	r0, #1
   13bac:	str	r0, [fp, #-56]	; 0xffffffc8
   13bb0:	cmp	r8, sl
   13bb4:	movcc	r0, #92	; 0x5c
   13bb8:	strbcc	r0, [r5, r8]
   13bbc:	add	r0, r8, #1
   13bc0:	mov	r6, #0
   13bc4:	mov	r9, #1
   13bc8:	mov	r4, #48	; 0x30
   13bcc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13bd0:	cmp	r1, #2
   13bd4:	beq	13f98 <__assert_fail@plt+0x2d50>
   13bd8:	add	r1, r7, #1
   13bdc:	cmp	r1, lr
   13be0:	bcs	13f98 <__assert_fail@plt+0x2d50>
   13be4:	ldrb	r1, [ip, r1]
   13be8:	sub	r1, r1, #48	; 0x30
   13bec:	uxtb	r1, r1
   13bf0:	cmp	r1, #9
   13bf4:	bhi	13f98 <__assert_fail@plt+0x2d50>
   13bf8:	cmp	r0, sl
   13bfc:	movcc	r1, #48	; 0x30
   13c00:	strbcc	r1, [r5, r0]
   13c04:	add	r0, r8, #2
   13c08:	cmp	r0, sl
   13c0c:	movcc	r1, #48	; 0x30
   13c10:	strbcc	r1, [r5, r0]
   13c14:	add	r8, r8, #3
   13c18:	b	139cc <__assert_fail@plt+0x2784>
   13c1c:	mov	r9, #0
   13c20:	mov	r4, #63	; 0x3f
   13c24:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c28:	cmp	r0, #5
   13c2c:	beq	13fa0 <__assert_fail@plt+0x2d58>
   13c30:	cmp	r0, #2
   13c34:	bne	14048 <__assert_fail@plt+0x2e00>
   13c38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c3c:	tst	r0, #1
   13c40:	mov	r6, #0
   13c44:	beq	139cc <__assert_fail@plt+0x2784>
   13c48:	b	14310 <__assert_fail@plt+0x30c8>
   13c4c:	mov	r0, #118	; 0x76
   13c50:	b	13db8 <__assert_fail@plt+0x2b70>
   13c54:	mov	r4, #39	; 0x27
   13c58:	mov	r0, #1
   13c5c:	str	r0, [sp, #64]	; 0x40
   13c60:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c64:	cmp	r0, #2
   13c68:	bne	13df0 <__assert_fail@plt+0x2ba8>
   13c6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c70:	tst	r0, #1
   13c74:	bne	14310 <__assert_fail@plt+0x30c8>
   13c78:	ldr	r2, [sp, #84]	; 0x54
   13c7c:	cmp	r2, #0
   13c80:	mov	r0, r2
   13c84:	movwne	r0, #1
   13c88:	clz	r1, sl
   13c8c:	lsr	r1, r1, #5
   13c90:	orrs	r0, r0, r1
   13c94:	moveq	r2, sl
   13c98:	str	r2, [sp, #84]	; 0x54
   13c9c:	moveq	sl, r0
   13ca0:	cmp	r8, sl
   13ca4:	movcc	r0, #39	; 0x27
   13ca8:	strbcc	r0, [r5, r8]
   13cac:	add	r0, r8, #1
   13cb0:	cmp	r0, sl
   13cb4:	movcc	r1, #92	; 0x5c
   13cb8:	strbcc	r1, [r5, r0]
   13cbc:	add	r0, r8, #2
   13cc0:	cmp	r0, sl
   13cc4:	movcc	r1, #39	; 0x27
   13cc8:	strbcc	r1, [r5, r0]
   13ccc:	add	r8, r8, #3
   13cd0:	mov	r0, #0
   13cd4:	str	r0, [fp, #-56]	; 0xffffffc8
   13cd8:	mov	r9, #0
   13cdc:	mov	r6, #1
   13ce0:	b	139cc <__assert_fail@plt+0x2784>
   13ce4:	ldr	r0, [sp, #44]	; 0x2c
   13ce8:	cmp	r0, #1
   13cec:	bne	13df8 <__assert_fail@plt+0x2bb0>
   13cf0:	str	lr, [sp, #32]
   13cf4:	bl	11104 <__ctype_b_loc@plt>
   13cf8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13cfc:	ldr	r0, [r0]
   13d00:	add	r0, r0, r4, lsl #1
   13d04:	ldrb	r0, [r0, #1]
   13d08:	ubfx	r6, r0, #6, #1
   13d0c:	mov	r2, #1
   13d10:	ldr	r0, [sp, #60]	; 0x3c
   13d14:	orr	r1, r6, r0
   13d18:	cmp	r2, #1
   13d1c:	bhi	14050 <__assert_fail@plt+0x2e08>
   13d20:	tst	r1, #1
   13d24:	beq	14050 <__assert_fail@plt+0x2e08>
   13d28:	ldr	lr, [sp, #32]
   13d2c:	b	139cc <__assert_fail@plt+0x2784>
   13d30:	mov	r9, #0
   13d34:	mov	r0, #92	; 0x5c
   13d38:	ldr	r1, [sp, #56]	; 0x38
   13d3c:	cmp	r1, #0
   13d40:	beq	13db8 <__assert_fail@plt+0x2b70>
   13d44:	mov	r4, #92	; 0x5c
   13d48:	mov	r6, #0
   13d4c:	cmp	r9, #0
   13d50:	bne	13d88 <__assert_fail@plt+0x2b40>
   13d54:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d58:	tst	r0, #1
   13d5c:	beq	13d88 <__assert_fail@plt+0x2b40>
   13d60:	cmp	r8, sl
   13d64:	movcc	r0, #39	; 0x27
   13d68:	strbcc	r0, [r5, r8]
   13d6c:	add	r0, r8, #1
   13d70:	cmp	r0, sl
   13d74:	movcc	r1, #39	; 0x27
   13d78:	strbcc	r1, [r5, r0]
   13d7c:	add	r8, r8, #2
   13d80:	mov	r0, #0
   13d84:	str	r0, [fp, #-56]	; 0xffffffc8
   13d88:	mov	r1, r6
   13d8c:	mov	r0, r4
   13d90:	cmp	r8, sl
   13d94:	strbcc	r0, [r5, r8]
   13d98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13d9c:	and	r0, r0, r1
   13da0:	str	r0, [fp, #-48]	; 0xffffffd0
   13da4:	add	r8, r8, #1
   13da8:	add	r7, r7, #1
   13dac:	cmn	lr, #1
   13db0:	bne	13704 <__assert_fail@plt+0x24bc>
   13db4:	b	13710 <__assert_fail@plt+0x24c8>
   13db8:	mov	r9, #0
   13dbc:	ldr	r1, [sp, #92]	; 0x5c
   13dc0:	tst	r1, #1
   13dc4:	mov	r6, #0
   13dc8:	mov	r1, #0
   13dcc:	beq	139cc <__assert_fail@plt+0x2784>
   13dd0:	b	13a14 <__assert_fail@plt+0x27cc>
   13dd4:	mov	r4, #0
   13dd8:	ldr	r0, [sp, #40]	; 0x28
   13ddc:	cmp	r0, #0
   13de0:	mov	r9, #0
   13de4:	mov	r6, #0
   13de8:	beq	139cc <__assert_fail@plt+0x2784>
   13dec:	b	13da8 <__assert_fail@plt+0x2b60>
   13df0:	mov	r6, #1
   13df4:	b	139cc <__assert_fail@plt+0x2784>
   13df8:	mov	r0, #0
   13dfc:	str	r0, [fp, #-36]	; 0xffffffdc
   13e00:	str	r0, [fp, #-40]	; 0xffffffd8
   13e04:	cmn	lr, #1
   13e08:	bne	13e1c <__assert_fail@plt+0x2bd4>
   13e0c:	mov	r0, ip
   13e10:	bl	11128 <strlen@plt>
   13e14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13e18:	mov	lr, r0
   13e1c:	ldr	r0, [sp, #76]	; 0x4c
   13e20:	add	r0, r0, r7
   13e24:	str	r0, [sp, #24]
   13e28:	mov	r6, #1
   13e2c:	mov	r2, #0
   13e30:	sub	r0, fp, #40	; 0x28
   13e34:	mov	r3, r0
   13e38:	str	r5, [sp, #28]
   13e3c:	str	lr, [sp, #32]
   13e40:	b	13e84 <__assert_fail@plt+0x2c3c>
   13e44:	ldr	r5, [sp, #52]	; 0x34
   13e48:	add	r5, r0, r5
   13e4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13e50:	bl	1105c <iswprint@plt>
   13e54:	cmp	r0, #0
   13e58:	movwne	r0, #1
   13e5c:	and	r6, r6, r0
   13e60:	sub	r0, fp, #40	; 0x28
   13e64:	bl	11014 <mbsinit@plt>
   13e68:	sub	r3, fp, #40	; 0x28
   13e6c:	mov	r2, r5
   13e70:	ldr	lr, [sp, #32]
   13e74:	cmp	r0, #0
   13e78:	ldr	r5, [sp, #28]
   13e7c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13e80:	bne	13d10 <__assert_fail@plt+0x2ac8>
   13e84:	str	r2, [sp, #52]	; 0x34
   13e88:	add	r0, r2, r7
   13e8c:	add	r1, ip, r0
   13e90:	str	r0, [sp, #48]	; 0x30
   13e94:	sub	r2, lr, r0
   13e98:	sub	r0, fp, #44	; 0x2c
   13e9c:	bl	15ce0 <__assert_fail@plt+0x4a98>
   13ea0:	cmp	r0, #0
   13ea4:	beq	1421c <__assert_fail@plt+0x2fd4>
   13ea8:	cmn	r0, #1
   13eac:	beq	141d8 <__assert_fail@plt+0x2f90>
   13eb0:	cmn	r0, #2
   13eb4:	ldr	lr, [sp, #32]
   13eb8:	beq	141e0 <__assert_fail@plt+0x2f98>
   13ebc:	cmp	r0, #2
   13ec0:	mov	r1, #0
   13ec4:	movwcc	r1, #1
   13ec8:	ldr	r2, [sp, #68]	; 0x44
   13ecc:	eor	r2, r2, #1
   13ed0:	orrs	r1, r2, r1
   13ed4:	bne	13e44 <__assert_fail@plt+0x2bfc>
   13ed8:	ldr	r1, [sp, #52]	; 0x34
   13edc:	ldr	r2, [sp, #24]
   13ee0:	add	r1, r2, r1
   13ee4:	sub	r2, r0, #1
   13ee8:	b	13ef8 <__assert_fail@plt+0x2cb0>
   13eec:	add	r1, r1, #1
   13ef0:	subs	r2, r2, #1
   13ef4:	beq	13e44 <__assert_fail@plt+0x2bfc>
   13ef8:	ldrb	r3, [r1]
   13efc:	sub	r3, r3, #91	; 0x5b
   13f00:	cmp	r3, #33	; 0x21
   13f04:	bhi	13eec <__assert_fail@plt+0x2ca4>
   13f08:	add	r5, pc, #0
   13f0c:	ldr	pc, [r5, r3, lsl #2]
   13f10:	andeq	r4, r1, r8, lsl #6
   13f14:	andeq	r4, r1, r8, lsl #6
   13f18:	andeq	r3, r1, ip, ror #29
   13f1c:	andeq	r4, r1, r8, lsl #6
   13f20:	andeq	r3, r1, ip, ror #29
   13f24:	andeq	r4, r1, r8, lsl #6
   13f28:	andeq	r3, r1, ip, ror #29
   13f2c:	andeq	r3, r1, ip, ror #29
   13f30:	andeq	r3, r1, ip, ror #29
   13f34:	andeq	r3, r1, ip, ror #29
   13f38:	andeq	r3, r1, ip, ror #29
   13f3c:	andeq	r3, r1, ip, ror #29
   13f40:	andeq	r3, r1, ip, ror #29
   13f44:	andeq	r3, r1, ip, ror #29
   13f48:	andeq	r3, r1, ip, ror #29
   13f4c:	andeq	r3, r1, ip, ror #29
   13f50:	andeq	r3, r1, ip, ror #29
   13f54:	andeq	r3, r1, ip, ror #29
   13f58:	andeq	r3, r1, ip, ror #29
   13f5c:	andeq	r3, r1, ip, ror #29
   13f60:	andeq	r3, r1, ip, ror #29
   13f64:	andeq	r3, r1, ip, ror #29
   13f68:	andeq	r3, r1, ip, ror #29
   13f6c:	andeq	r3, r1, ip, ror #29
   13f70:	andeq	r3, r1, ip, ror #29
   13f74:	andeq	r3, r1, ip, ror #29
   13f78:	andeq	r3, r1, ip, ror #29
   13f7c:	andeq	r3, r1, ip, ror #29
   13f80:	andeq	r3, r1, ip, ror #29
   13f84:	andeq	r3, r1, ip, ror #29
   13f88:	andeq	r3, r1, ip, ror #29
   13f8c:	andeq	r3, r1, ip, ror #29
   13f90:	andeq	r3, r1, ip, ror #29
   13f94:	andeq	r4, r1, r8, lsl #6
   13f98:	mov	r8, r0
   13f9c:	b	139cc <__assert_fail@plt+0x2784>
   13fa0:	ldr	r0, [sp, #36]	; 0x24
   13fa4:	cmp	r0, #0
   13fa8:	beq	14048 <__assert_fail@plt+0x2e00>
   13fac:	add	r0, r7, #2
   13fb0:	cmp	r0, lr
   13fb4:	bcs	14048 <__assert_fail@plt+0x2e00>
   13fb8:	add	r1, r7, ip
   13fbc:	ldrb	r1, [r1, #1]
   13fc0:	cmp	r1, #63	; 0x3f
   13fc4:	bne	14048 <__assert_fail@plt+0x2e00>
   13fc8:	ldrb	r1, [ip, r0]
   13fcc:	sub	r2, r1, #33	; 0x21
   13fd0:	cmp	r2, #29
   13fd4:	bhi	14048 <__assert_fail@plt+0x2e00>
   13fd8:	mov	r3, #1
   13fdc:	movw	r6, #20929	; 0x51c1
   13fe0:	movt	r6, #14336	; 0x3800
   13fe4:	tst	r6, r3, lsl r2
   13fe8:	beq	14048 <__assert_fail@plt+0x2e00>
   13fec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13ff0:	tst	r2, #1
   13ff4:	bne	14310 <__assert_fail@plt+0x30c8>
   13ff8:	cmp	r8, sl
   13ffc:	movcc	r2, #63	; 0x3f
   14000:	strbcc	r2, [r5, r8]
   14004:	add	r2, r8, #1
   14008:	cmp	r2, sl
   1400c:	movcc	r3, #34	; 0x22
   14010:	strbcc	r3, [r5, r2]
   14014:	add	r2, r8, #2
   14018:	cmp	r2, sl
   1401c:	movcc	r3, #34	; 0x22
   14020:	strbcc	r3, [r5, r2]
   14024:	add	r2, r8, #3
   14028:	cmp	r2, sl
   1402c:	movcc	r3, #63	; 0x3f
   14030:	strbcc	r3, [r5, r2]
   14034:	add	r8, r8, #4
   14038:	mov	r7, r0
   1403c:	mov	r4, r1
   14040:	mov	r6, #0
   14044:	b	139cc <__assert_fail@plt+0x2784>
   14048:	mov	r6, #0
   1404c:	b	139cc <__assert_fail@plt+0x2784>
   14050:	add	r0, r2, r7
   14054:	str	r0, [sp, #52]	; 0x34
   14058:	mov	r2, #0
   1405c:	ldr	lr, [sp, #32]
   14060:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14064:	str	r1, [sp, #48]	; 0x30
   14068:	tst	r1, #1
   1406c:	bne	14148 <__assert_fail@plt+0x2f00>
   14070:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14074:	tst	r1, #1
   14078:	bne	14310 <__assert_fail@plt+0x30c8>
   1407c:	mov	r3, r0
   14080:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14084:	subs	r1, r0, #2
   14088:	movwne	r1, #1
   1408c:	orr	r1, r1, r3
   14090:	tst	r1, #1
   14094:	bne	140cc <__assert_fail@plt+0x2e84>
   14098:	cmp	r8, sl
   1409c:	movcc	r0, #39	; 0x27
   140a0:	strbcc	r0, [r5, r8]
   140a4:	add	r2, r8, #1
   140a8:	cmp	r2, sl
   140ac:	movcc	r0, #36	; 0x24
   140b0:	strbcc	r0, [r5, r2]
   140b4:	add	r2, r8, #2
   140b8:	cmp	r2, sl
   140bc:	movcc	r0, #39	; 0x27
   140c0:	strbcc	r0, [r5, r2]
   140c4:	add	r8, r8, #3
   140c8:	mov	r3, #1
   140cc:	cmp	r8, sl
   140d0:	movcc	r1, #92	; 0x5c
   140d4:	strbcc	r1, [r5, r8]
   140d8:	add	r2, r8, #1
   140dc:	cmp	r2, sl
   140e0:	bcs	140f4 <__assert_fail@plt+0x2eac>
   140e4:	uxtb	r1, r4
   140e8:	mov	r0, #48	; 0x30
   140ec:	orr	r1, r0, r1, lsr #6
   140f0:	strb	r1, [r5, r2]
   140f4:	add	r2, r8, #2
   140f8:	cmp	r2, sl
   140fc:	lsrcc	r1, r4, #3
   14100:	movcc	r0, #6
   14104:	bficc	r1, r0, #3, #29
   14108:	strbcc	r1, [r5, r2]
   1410c:	mov	r0, #6
   14110:	bfi	r4, r0, #3, #29
   14114:	add	r8, r8, #3
   14118:	mov	r2, #1
   1411c:	mov	r0, r3
   14120:	b	1416c <__assert_fail@plt+0x2f24>
   14124:	cmp	r8, sl
   14128:	strbcc	r4, [r5, r8]
   1412c:	ldr	r1, [sp, #76]	; 0x4c
   14130:	ldrb	r4, [r1, r7]
   14134:	add	r8, r8, #1
   14138:	mov	r7, r3
   1413c:	ldr	r1, [sp, #48]	; 0x30
   14140:	tst	r1, #1
   14144:	beq	14070 <__assert_fail@plt+0x2e28>
   14148:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1414c:	tst	r1, #1
   14150:	beq	14164 <__assert_fail@plt+0x2f1c>
   14154:	cmp	r8, sl
   14158:	movcc	r1, #92	; 0x5c
   1415c:	strbcc	r1, [r5, r8]
   14160:	add	r8, r8, #1
   14164:	mov	r1, #0
   14168:	str	r1, [fp, #-52]	; 0xffffffcc
   1416c:	and	r9, r2, #1
   14170:	add	r3, r7, #1
   14174:	ldr	r1, [sp, #52]	; 0x34
   14178:	cmp	r1, r3
   1417c:	bls	141c0 <__assert_fail@plt+0x2f78>
   14180:	cmp	r9, #0
   14184:	movwne	r9, #1
   14188:	mvn	r1, r0
   1418c:	orr	r1, r1, r9
   14190:	tst	r1, #1
   14194:	bne	14124 <__assert_fail@plt+0x2edc>
   14198:	cmp	r8, sl
   1419c:	movcc	r1, #39	; 0x27
   141a0:	strbcc	r1, [r5, r8]
   141a4:	add	r1, r8, #1
   141a8:	cmp	r1, sl
   141ac:	movcc	r0, #39	; 0x27
   141b0:	strbcc	r0, [r5, r1]
   141b4:	add	r8, r8, #2
   141b8:	mov	r0, #0
   141bc:	b	14124 <__assert_fail@plt+0x2edc>
   141c0:	str	r0, [fp, #-56]	; 0xffffffc8
   141c4:	cmp	r9, #0
   141c8:	movwne	r9, #1
   141cc:	cmp	r9, #0
   141d0:	beq	13d54 <__assert_fail@plt+0x2b0c>
   141d4:	b	13d88 <__assert_fail@plt+0x2b40>
   141d8:	mov	r6, #0
   141dc:	b	1421c <__assert_fail@plt+0x2fd4>
   141e0:	mov	r6, #0
   141e4:	ldr	r0, [sp, #48]	; 0x30
   141e8:	cmp	r0, lr
   141ec:	bcs	1421c <__assert_fail@plt+0x2fd4>
   141f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   141f4:	add	r0, ip, r7
   141f8:	ldr	r2, [sp, #52]	; 0x34
   141fc:	ldrb	r1, [r0, r2]
   14200:	cmp	r1, #0
   14204:	beq	13d10 <__assert_fail@plt+0x2ac8>
   14208:	add	r2, r2, #1
   1420c:	add	r1, r7, r2
   14210:	cmp	r1, lr
   14214:	bcc	141fc <__assert_fail@plt+0x2fb4>
   14218:	b	13d10 <__assert_fail@plt+0x2ac8>
   1421c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14220:	ldr	r2, [sp, #52]	; 0x34
   14224:	b	13d10 <__assert_fail@plt+0x2ac8>
   14228:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1422c:	eor	r0, r1, #2
   14230:	orr	r0, r0, r8
   14234:	clz	r0, r0
   14238:	lsr	r0, r0, #5
   1423c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14240:	tst	r3, r0
   14244:	bne	14310 <__assert_fail@plt+0x30c8>
   14248:	mov	r6, r5
   1424c:	subs	r0, r1, #2
   14250:	movwne	r0, #1
   14254:	orr	r0, r3, r0
   14258:	tst	r0, #1
   1425c:	ldr	r2, [sp, #92]	; 0x5c
   14260:	ldreq	r0, [sp, #64]	; 0x40
   14264:	eoreq	r0, r0, #1
   14268:	tsteq	r0, #1
   1426c:	bne	142ac <__assert_fail@plt+0x3064>
   14270:	mov	r9, lr
   14274:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14278:	tst	r0, #1
   1427c:	bne	14378 <__assert_fail@plt+0x3130>
   14280:	ldr	r0, [sp, #84]	; 0x54
   14284:	cmp	r0, #0
   14288:	beq	142ac <__assert_fail@plt+0x3064>
   1428c:	mov	r0, #0
   14290:	str	r0, [fp, #-48]	; 0xffffffd0
   14294:	mov	r1, #2
   14298:	cmp	sl, #0
   1429c:	mov	r0, r2
   142a0:	mov	r4, r3
   142a4:	ldr	r7, [sp, #84]	; 0x54
   142a8:	beq	13484 <__assert_fail@plt+0x223c>
   142ac:	ldr	r1, [fp, #-84]	; 0xffffffac
   142b0:	clz	r0, r1
   142b4:	lsr	r0, r0, #5
   142b8:	orr	r0, r0, r3
   142bc:	tst	r0, #1
   142c0:	bne	142ec <__assert_fail@plt+0x30a4>
   142c4:	ldrb	r0, [r1]
   142c8:	cmp	r0, #0
   142cc:	beq	142ec <__assert_fail@plt+0x30a4>
   142d0:	add	r1, r1, #1
   142d4:	cmp	r8, sl
   142d8:	strbcc	r0, [r6, r8]
   142dc:	add	r8, r8, #1
   142e0:	ldrb	r0, [r1], #1
   142e4:	cmp	r0, #0
   142e8:	bne	142d4 <__assert_fail@plt+0x308c>
   142ec:	cmp	r8, sl
   142f0:	movcc	r0, #0
   142f4:	strbcc	r0, [r6, r8]
   142f8:	b	1436c <__assert_fail@plt+0x3124>
   142fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14300:	mov	lr, r4
   14304:	b	14310 <__assert_fail@plt+0x30c8>
   14308:	ldr	r5, [sp, #28]
   1430c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14310:	mov	r0, #0
   14314:	ldr	r1, [fp, #12]
   14318:	bic	r1, r1, #2
   1431c:	mov	r2, #2
   14320:	ldr	r3, [sp, #92]	; 0x5c
   14324:	tst	r3, #1
   14328:	movwne	r2, #4
   1432c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14330:	cmp	r3, #2
   14334:	movne	r2, r3
   14338:	str	r2, [sp]
   1433c:	str	r1, [sp, #4]
   14340:	str	r0, [sp, #8]
   14344:	ldr	r0, [sp, #80]	; 0x50
   14348:	str	r0, [sp, #12]
   1434c:	ldr	r0, [sp, #88]	; 0x58
   14350:	str	r0, [sp, #16]
   14354:	mov	r0, r5
   14358:	mov	r1, sl
   1435c:	mov	r2, ip
   14360:	mov	r3, lr
   14364:	bl	133f8 <__assert_fail@plt+0x21b0>
   14368:	mov	r8, r0
   1436c:	mov	r0, r8
   14370:	sub	sp, fp, #28
   14374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14378:	mov	r0, #5
   1437c:	str	r0, [sp]
   14380:	ldr	r0, [fp, #12]
   14384:	str	r0, [sp, #4]
   14388:	ldr	r0, [fp, #16]
   1438c:	str	r0, [sp, #8]
   14390:	ldr	r0, [sp, #80]	; 0x50
   14394:	str	r0, [sp, #12]
   14398:	ldr	r0, [sp, #88]	; 0x58
   1439c:	str	r0, [sp, #16]
   143a0:	mov	r0, r6
   143a4:	ldr	r1, [sp, #84]	; 0x54
   143a8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   143ac:	mov	r3, r9
   143b0:	b	14364 <__assert_fail@plt+0x311c>
   143b4:	bl	11218 <abort@plt>
   143b8:	mov	r3, r2
   143bc:	mov	r2, #0
   143c0:	b	143c4 <__assert_fail@plt+0x317c>
   143c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143c8:	add	fp, sp, #28
   143cc:	sub	sp, sp, #36	; 0x24
   143d0:	mov	r4, r2
   143d4:	str	r2, [sp, #24]
   143d8:	mov	r5, r1
   143dc:	mov	r6, r0
   143e0:	str	r0, [sp, #20]
   143e4:	movw	r8, #33184	; 0x81a0
   143e8:	movt	r8, #2
   143ec:	cmp	r3, #0
   143f0:	movne	r8, r3
   143f4:	bl	11140 <__errno_location@plt>
   143f8:	str	r0, [sp, #28]
   143fc:	ldm	r8, {r3, r9}
   14400:	ldr	r1, [r8, #40]	; 0x28
   14404:	ldr	r2, [r8, #44]	; 0x2c
   14408:	ldr	r7, [r0]
   1440c:	str	r7, [sp, #32]
   14410:	add	sl, r8, #8
   14414:	cmp	r4, #0
   14418:	orreq	r9, r9, #1
   1441c:	stm	sp, {r3, r9, sl}
   14420:	str	r1, [sp, #12]
   14424:	str	r2, [sp, #16]
   14428:	mov	r0, #0
   1442c:	mov	r1, #0
   14430:	mov	r2, r6
   14434:	mov	r3, r5
   14438:	mov	r7, r5
   1443c:	bl	133f8 <__assert_fail@plt+0x21b0>
   14440:	mov	r5, r0
   14444:	add	r4, r0, #1
   14448:	mov	r0, r4
   1444c:	bl	152cc <__assert_fail@plt+0x4084>
   14450:	mov	r6, r0
   14454:	ldr	r0, [r8]
   14458:	ldr	r1, [r8, #40]	; 0x28
   1445c:	ldr	r2, [r8, #44]	; 0x2c
   14460:	stm	sp, {r0, r9, sl}
   14464:	str	r1, [sp, #12]
   14468:	str	r2, [sp, #16]
   1446c:	mov	r0, r6
   14470:	mov	r1, r4
   14474:	ldr	r2, [sp, #20]
   14478:	mov	r3, r7
   1447c:	bl	133f8 <__assert_fail@plt+0x21b0>
   14480:	ldr	r0, [sp, #24]
   14484:	ldr	r1, [sp, #32]
   14488:	ldr	r2, [sp, #28]
   1448c:	str	r1, [r2]
   14490:	cmp	r0, #0
   14494:	strne	r5, [r0]
   14498:	mov	r0, r6
   1449c:	sub	sp, fp, #28
   144a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   144a8:	add	fp, sp, #24
   144ac:	movw	r8, #33032	; 0x8108
   144b0:	movt	r8, #2
   144b4:	ldr	r4, [r8]
   144b8:	movw	r5, #33036	; 0x810c
   144bc:	movt	r5, #2
   144c0:	ldr	r0, [r5]
   144c4:	cmp	r0, #2
   144c8:	blt	144f4 <__assert_fail@plt+0x32ac>
   144cc:	add	r7, r4, #12
   144d0:	mov	r6, #0
   144d4:	ldr	r0, [r7, r6, lsl #3]
   144d8:	bl	12cb4 <__assert_fail@plt+0x1a6c>
   144dc:	add	r0, r6, #1
   144e0:	ldr	r1, [r5]
   144e4:	add	r2, r6, #2
   144e8:	cmp	r2, r1
   144ec:	mov	r6, r0
   144f0:	blt	144d4 <__assert_fail@plt+0x328c>
   144f4:	ldr	r0, [r4, #4]
   144f8:	movw	r9, #33232	; 0x81d0
   144fc:	movt	r9, #2
   14500:	cmp	r0, r9
   14504:	movw	r7, #33040	; 0x8110
   14508:	movt	r7, #2
   1450c:	beq	1451c <__assert_fail@plt+0x32d4>
   14510:	bl	12cb4 <__assert_fail@plt+0x1a6c>
   14514:	mov	r0, #256	; 0x100
   14518:	stm	r7, {r0, r9}
   1451c:	cmp	r4, r7
   14520:	beq	14530 <__assert_fail@plt+0x32e8>
   14524:	mov	r0, r4
   14528:	bl	12cb4 <__assert_fail@plt+0x1a6c>
   1452c:	str	r7, [r8]
   14530:	mov	r0, #1
   14534:	str	r0, [r5]
   14538:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1453c:	movw	r3, #33184	; 0x81a0
   14540:	movt	r3, #2
   14544:	mvn	r2, #0
   14548:	b	1454c <__assert_fail@plt+0x3304>
   1454c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14550:	add	fp, sp, #28
   14554:	sub	sp, sp, #44	; 0x2c
   14558:	mov	r7, r3
   1455c:	str	r2, [sp, #36]	; 0x24
   14560:	str	r1, [sp, #32]
   14564:	mov	r5, r0
   14568:	bl	11140 <__errno_location@plt>
   1456c:	cmp	r5, #0
   14570:	bmi	146e0 <__assert_fail@plt+0x3498>
   14574:	cmn	r5, #-2147483647	; 0x80000001
   14578:	beq	146e0 <__assert_fail@plt+0x3498>
   1457c:	movw	r4, #33032	; 0x8108
   14580:	movt	r4, #2
   14584:	ldr	r6, [r4]
   14588:	str	r0, [sp, #28]
   1458c:	ldr	r0, [r0]
   14590:	str	r0, [sp, #24]
   14594:	movw	r8, #33036	; 0x810c
   14598:	movt	r8, #2
   1459c:	ldr	r1, [r8]
   145a0:	cmp	r1, r5
   145a4:	ble	145b0 <__assert_fail@plt+0x3368>
   145a8:	mov	sl, r6
   145ac:	b	1461c <__assert_fail@plt+0x33d4>
   145b0:	str	r1, [fp, #-32]	; 0xffffffe0
   145b4:	mov	r0, #8
   145b8:	str	r0, [sp]
   145bc:	movw	r9, #33040	; 0x8110
   145c0:	movt	r9, #2
   145c4:	subs	r0, r6, r9
   145c8:	movne	r0, r6
   145cc:	sub	r1, r5, r1
   145d0:	add	r2, r1, #1
   145d4:	sub	r1, fp, #32
   145d8:	mvn	r3, #-2147483648	; 0x80000000
   145dc:	bl	153a8 <__assert_fail@plt+0x4160>
   145e0:	mov	sl, r0
   145e4:	str	r0, [r4]
   145e8:	cmp	r6, r9
   145ec:	bne	145f8 <__assert_fail@plt+0x33b0>
   145f0:	ldrd	r0, [r9]
   145f4:	stm	sl, {r0, r1}
   145f8:	ldr	r1, [r8]
   145fc:	add	r0, sl, r1, lsl #3
   14600:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14604:	sub	r1, r2, r1
   14608:	lsl	r2, r1, #3
   1460c:	mov	r1, #0
   14610:	bl	11158 <memset@plt>
   14614:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14618:	str	r0, [r8]
   1461c:	mov	r9, sl
   14620:	ldr	r6, [r9, r5, lsl #3]!
   14624:	ldr	r4, [r9, #4]!
   14628:	ldm	r7, {r0, r1}
   1462c:	ldr	r2, [r7, #40]	; 0x28
   14630:	ldr	r3, [r7, #44]	; 0x2c
   14634:	orr	r8, r1, #1
   14638:	add	r1, r7, #8
   1463c:	stm	sp, {r0, r8}
   14640:	str	r1, [sp, #20]
   14644:	add	r0, sp, #8
   14648:	stm	r0, {r1, r2, r3}
   1464c:	mov	r0, r4
   14650:	mov	r1, r6
   14654:	ldr	r2, [sp, #32]
   14658:	ldr	r3, [sp, #36]	; 0x24
   1465c:	bl	133f8 <__assert_fail@plt+0x21b0>
   14660:	cmp	r6, r0
   14664:	bhi	146c8 <__assert_fail@plt+0x3480>
   14668:	add	r6, r0, #1
   1466c:	str	r6, [sl, r5, lsl #3]
   14670:	movw	r0, #33232	; 0x81d0
   14674:	movt	r0, #2
   14678:	cmp	r4, r0
   1467c:	beq	14688 <__assert_fail@plt+0x3440>
   14680:	mov	r0, r4
   14684:	bl	12cb4 <__assert_fail@plt+0x1a6c>
   14688:	mov	r0, r6
   1468c:	bl	152cc <__assert_fail@plt+0x4084>
   14690:	mov	r4, r0
   14694:	str	r0, [r9]
   14698:	ldr	r0, [r7]
   1469c:	ldr	r1, [r7, #40]	; 0x28
   146a0:	ldr	r2, [r7, #44]	; 0x2c
   146a4:	stm	sp, {r0, r8}
   146a8:	ldr	r0, [sp, #20]
   146ac:	add	r3, sp, #8
   146b0:	stm	r3, {r0, r1, r2}
   146b4:	mov	r0, r4
   146b8:	mov	r1, r6
   146bc:	ldr	r2, [sp, #32]
   146c0:	ldr	r3, [sp, #36]	; 0x24
   146c4:	bl	133f8 <__assert_fail@plt+0x21b0>
   146c8:	ldr	r0, [sp, #28]
   146cc:	ldr	r1, [sp, #24]
   146d0:	str	r1, [r0]
   146d4:	mov	r0, r4
   146d8:	sub	sp, fp, #28
   146dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e0:	bl	11218 <abort@plt>
   146e4:	movw	r3, #33184	; 0x81a0
   146e8:	movt	r3, #2
   146ec:	b	1454c <__assert_fail@plt+0x3304>
   146f0:	mov	r1, r0
   146f4:	mov	r0, #0
   146f8:	b	1453c <__assert_fail@plt+0x32f4>
   146fc:	mov	r2, r1
   14700:	mov	r1, r0
   14704:	mov	r0, #0
   14708:	b	146e4 <__assert_fail@plt+0x349c>
   1470c:	push	{r4, r5, r6, sl, fp, lr}
   14710:	add	fp, sp, #16
   14714:	sub	sp, sp, #48	; 0x30
   14718:	mov	r4, r2
   1471c:	mov	r5, r0
   14720:	mov	r6, sp
   14724:	mov	r0, r6
   14728:	bl	14748 <__assert_fail@plt+0x3500>
   1472c:	mov	r0, r5
   14730:	mov	r1, r4
   14734:	mvn	r2, #0
   14738:	mov	r3, r6
   1473c:	bl	1454c <__assert_fail@plt+0x3304>
   14740:	sub	sp, fp, #16
   14744:	pop	{r4, r5, r6, sl, fp, pc}
   14748:	push	{fp, lr}
   1474c:	mov	fp, sp
   14750:	vmov.i32	q8, #0	; 0x00000000
   14754:	mov	r2, #32
   14758:	mov	r3, r0
   1475c:	vst1.32	{d16-d17}, [r3], r2
   14760:	vst1.32	{d16-d17}, [r3]
   14764:	add	r2, r0, #16
   14768:	vst1.32	{d16-d17}, [r2]
   1476c:	cmp	r1, #10
   14770:	strne	r1, [r0]
   14774:	popne	{fp, pc}
   14778:	bl	11218 <abort@plt>
   1477c:	push	{r4, r5, r6, r7, fp, lr}
   14780:	add	fp, sp, #16
   14784:	sub	sp, sp, #48	; 0x30
   14788:	mov	r4, r3
   1478c:	mov	r5, r2
   14790:	mov	r6, r0
   14794:	mov	r7, sp
   14798:	mov	r0, r7
   1479c:	bl	14748 <__assert_fail@plt+0x3500>
   147a0:	mov	r0, r6
   147a4:	mov	r1, r5
   147a8:	mov	r2, r4
   147ac:	mov	r3, r7
   147b0:	bl	1454c <__assert_fail@plt+0x3304>
   147b4:	sub	sp, fp, #16
   147b8:	pop	{r4, r5, r6, r7, fp, pc}
   147bc:	mov	r2, r1
   147c0:	mov	r1, r0
   147c4:	mov	r0, #0
   147c8:	b	1470c <__assert_fail@plt+0x34c4>
   147cc:	mov	r3, r2
   147d0:	mov	r2, r1
   147d4:	mov	r1, r0
   147d8:	mov	r0, #0
   147dc:	b	1477c <__assert_fail@plt+0x3534>
   147e0:	push	{r4, r5, r6, sl, fp, lr}
   147e4:	add	fp, sp, #16
   147e8:	sub	sp, sp, #48	; 0x30
   147ec:	mov	r4, r1
   147f0:	mov	r5, r0
   147f4:	movw	r0, #33184	; 0x81a0
   147f8:	movt	r0, #2
   147fc:	add	r1, r0, #16
   14800:	mov	r3, #32
   14804:	vld1.64	{d16-d17}, [r0], r3
   14808:	vld1.64	{d18-d19}, [r1]
   1480c:	mov	r6, sp
   14810:	add	r1, r6, #16
   14814:	vld1.64	{d20-d21}, [r0]
   14818:	vst1.64	{d18-d19}, [r1]
   1481c:	mov	r0, r6
   14820:	vst1.64	{d16-d17}, [r0], r3
   14824:	vst1.64	{d20-d21}, [r0]
   14828:	mov	r0, r6
   1482c:	mov	r1, r2
   14830:	mov	r2, #1
   14834:	bl	132ec <__assert_fail@plt+0x20a4>
   14838:	mov	r0, #0
   1483c:	mov	r1, r5
   14840:	mov	r2, r4
   14844:	mov	r3, r6
   14848:	bl	1454c <__assert_fail@plt+0x3304>
   1484c:	sub	sp, fp, #16
   14850:	pop	{r4, r5, r6, sl, fp, pc}
   14854:	mov	r2, r1
   14858:	mvn	r1, #0
   1485c:	b	147e0 <__assert_fail@plt+0x3598>
   14860:	mov	r1, #58	; 0x3a
   14864:	b	14854 <__assert_fail@plt+0x360c>
   14868:	mov	r2, #58	; 0x3a
   1486c:	b	147e0 <__assert_fail@plt+0x3598>
   14870:	push	{r4, r5, r6, sl, fp, lr}
   14874:	add	fp, sp, #16
   14878:	sub	sp, sp, #48	; 0x30
   1487c:	mov	r4, r2
   14880:	mov	r5, r0
   14884:	mov	r6, sp
   14888:	mov	r0, r6
   1488c:	bl	14748 <__assert_fail@plt+0x3500>
   14890:	mov	r0, r6
   14894:	mov	r1, #58	; 0x3a
   14898:	mov	r2, #1
   1489c:	bl	132ec <__assert_fail@plt+0x20a4>
   148a0:	mov	r0, r5
   148a4:	mov	r1, r4
   148a8:	mvn	r2, #0
   148ac:	mov	r3, r6
   148b0:	bl	1454c <__assert_fail@plt+0x3304>
   148b4:	sub	sp, fp, #16
   148b8:	pop	{r4, r5, r6, sl, fp, pc}
   148bc:	push	{fp, lr}
   148c0:	mov	fp, sp
   148c4:	sub	sp, sp, #8
   148c8:	mvn	ip, #0
   148cc:	str	ip, [sp]
   148d0:	bl	148dc <__assert_fail@plt+0x3694>
   148d4:	mov	sp, fp
   148d8:	pop	{fp, pc}
   148dc:	push	{r4, r5, r6, r7, fp, lr}
   148e0:	add	fp, sp, #16
   148e4:	sub	sp, sp, #48	; 0x30
   148e8:	mov	r7, r3
   148ec:	mov	r5, r0
   148f0:	movw	r0, #33184	; 0x81a0
   148f4:	movt	r0, #2
   148f8:	add	r3, r0, #16
   148fc:	mov	r4, #32
   14900:	vld1.64	{d16-d17}, [r0], r4
   14904:	vld1.64	{d18-d19}, [r3]
   14908:	mov	r6, sp
   1490c:	add	r3, r6, #16
   14910:	vld1.64	{d20-d21}, [r0]
   14914:	vst1.64	{d18-d19}, [r3]
   14918:	mov	r0, r6
   1491c:	vst1.64	{d16-d17}, [r0], r4
   14920:	vst1.64	{d20-d21}, [r0]
   14924:	mov	r0, r6
   14928:	bl	13344 <__assert_fail@plt+0x20fc>
   1492c:	ldr	r2, [fp, #8]
   14930:	mov	r0, r5
   14934:	mov	r1, r7
   14938:	mov	r3, r6
   1493c:	bl	1454c <__assert_fail@plt+0x3304>
   14940:	sub	sp, fp, #16
   14944:	pop	{r4, r5, r6, r7, fp, pc}
   14948:	mov	r3, r2
   1494c:	mov	r2, r1
   14950:	mov	r1, r0
   14954:	mov	r0, #0
   14958:	b	148bc <__assert_fail@plt+0x3674>
   1495c:	push	{fp, lr}
   14960:	mov	fp, sp
   14964:	sub	sp, sp, #8
   14968:	mov	ip, r2
   1496c:	mov	r2, r1
   14970:	mov	r1, r0
   14974:	str	r3, [sp]
   14978:	mov	r0, #0
   1497c:	mov	r3, ip
   14980:	bl	148dc <__assert_fail@plt+0x3694>
   14984:	mov	sp, fp
   14988:	pop	{fp, pc}
   1498c:	movw	r3, #33048	; 0x8118
   14990:	movt	r3, #2
   14994:	b	1454c <__assert_fail@plt+0x3304>
   14998:	mov	r2, r1
   1499c:	mov	r1, r0
   149a0:	mov	r0, #0
   149a4:	b	1498c <__assert_fail@plt+0x3744>
   149a8:	mvn	r2, #0
   149ac:	b	1498c <__assert_fail@plt+0x3744>
   149b0:	mov	r1, r0
   149b4:	mov	r0, #0
   149b8:	b	149a8 <__assert_fail@plt+0x3760>
   149bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149c0:	add	fp, sp, #24
   149c4:	sub	sp, sp, #16
   149c8:	mov	r4, r1
   149cc:	mov	r5, r0
   149d0:	mov	r7, #0
   149d4:	mov	r0, #0
   149d8:	mov	r1, r5
   149dc:	mov	r2, #5
   149e0:	bl	11038 <dcgettext@plt>
   149e4:	cmp	r0, r5
   149e8:	beq	149f4 <__assert_fail@plt+0x37ac>
   149ec:	sub	sp, fp, #24
   149f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149f4:	bl	15ca8 <__assert_fail@plt+0x4a60>
   149f8:	mov	r6, r0
   149fc:	mov	r8, #56	; 0x38
   14a00:	mov	r0, #45	; 0x2d
   14a04:	stm	sp, {r0, r8}
   14a08:	str	r7, [sp, #8]
   14a0c:	str	r7, [sp, #12]
   14a10:	mov	r0, r6
   14a14:	mov	r1, #85	; 0x55
   14a18:	mov	r2, #84	; 0x54
   14a1c:	mov	r3, #70	; 0x46
   14a20:	bl	14ab8 <__assert_fail@plt+0x3870>
   14a24:	cmp	r0, #0
   14a28:	beq	14a44 <__assert_fail@plt+0x37fc>
   14a2c:	ldrb	r1, [r5]
   14a30:	movw	r2, #27663	; 0x6c0f
   14a34:	movt	r2, #1
   14a38:	movw	r0, #27667	; 0x6c13
   14a3c:	movt	r0, #1
   14a40:	b	14a88 <__assert_fail@plt+0x3840>
   14a44:	mov	r0, #48	; 0x30
   14a48:	mov	r1, #51	; 0x33
   14a4c:	str	r8, [sp]
   14a50:	stmib	sp, {r0, r1}
   14a54:	str	r0, [sp, #12]
   14a58:	mov	r0, r6
   14a5c:	mov	r1, #71	; 0x47
   14a60:	mov	r2, #66	; 0x42
   14a64:	mov	r3, #49	; 0x31
   14a68:	bl	14ab8 <__assert_fail@plt+0x3870>
   14a6c:	cmp	r0, #0
   14a70:	beq	14a98 <__assert_fail@plt+0x3850>
   14a74:	ldrb	r1, [r5]
   14a78:	movw	r2, #27671	; 0x6c17
   14a7c:	movt	r2, #1
   14a80:	movw	r0, #27675	; 0x6c1b
   14a84:	movt	r0, #1
   14a88:	cmp	r1, #96	; 0x60
   14a8c:	moveq	r0, r2
   14a90:	sub	sp, fp, #24
   14a94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a98:	movw	r1, #27657	; 0x6c09
   14a9c:	movt	r1, #1
   14aa0:	movw	r0, #27661	; 0x6c0d
   14aa4:	movt	r0, #1
   14aa8:	cmp	r4, #9
   14aac:	moveq	r0, r1
   14ab0:	sub	sp, fp, #24
   14ab4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ab8:	push	{r4, r5, r6, r7, fp, lr}
   14abc:	add	fp, sp, #16
   14ac0:	sub	sp, sp, #16
   14ac4:	mov	r4, r3
   14ac8:	mov	r5, r2
   14acc:	mov	r7, r1
   14ad0:	mov	r6, r0
   14ad4:	mov	r0, r1
   14ad8:	bl	159e8 <__assert_fail@plt+0x47a0>
   14adc:	ldrb	r1, [r6]
   14ae0:	cmp	r0, #0
   14ae4:	andne	r1, r1, #223	; 0xdf
   14ae8:	mov	r0, #0
   14aec:	cmp	r1, r7
   14af0:	bne	14b28 <__assert_fail@plt+0x38e0>
   14af4:	cmp	r7, #0
   14af8:	beq	14b30 <__assert_fail@plt+0x38e8>
   14afc:	ldr	r0, [fp, #20]
   14b00:	ldr	r1, [fp, #16]
   14b04:	ldr	r2, [fp, #12]
   14b08:	ldr	r3, [fp, #8]
   14b0c:	str	r2, [sp]
   14b10:	str	r1, [sp, #4]
   14b14:	str	r0, [sp, #8]
   14b18:	mov	r0, r6
   14b1c:	mov	r1, r5
   14b20:	mov	r2, r4
   14b24:	bl	14b3c <__assert_fail@plt+0x38f4>
   14b28:	sub	sp, fp, #16
   14b2c:	pop	{r4, r5, r6, r7, fp, pc}
   14b30:	mov	r0, #1
   14b34:	sub	sp, fp, #16
   14b38:	pop	{r4, r5, r6, r7, fp, pc}
   14b3c:	push	{r4, r5, r6, r7, fp, lr}
   14b40:	add	fp, sp, #16
   14b44:	sub	sp, sp, #8
   14b48:	mov	r4, r3
   14b4c:	mov	r5, r2
   14b50:	mov	r7, r1
   14b54:	mov	r6, r0
   14b58:	mov	r0, r1
   14b5c:	bl	159e8 <__assert_fail@plt+0x47a0>
   14b60:	ldrb	r1, [r6, #1]
   14b64:	cmp	r0, #0
   14b68:	andne	r1, r1, #223	; 0xdf
   14b6c:	mov	r0, #0
   14b70:	cmp	r1, r7
   14b74:	bne	14ba4 <__assert_fail@plt+0x395c>
   14b78:	cmp	r7, #0
   14b7c:	beq	14bac <__assert_fail@plt+0x3964>
   14b80:	ldr	r0, [fp, #16]
   14b84:	ldr	r1, [fp, #12]
   14b88:	ldr	r3, [fp, #8]
   14b8c:	str	r1, [sp]
   14b90:	str	r0, [sp, #4]
   14b94:	mov	r0, r6
   14b98:	mov	r1, r5
   14b9c:	mov	r2, r4
   14ba0:	bl	14bb8 <__assert_fail@plt+0x3970>
   14ba4:	sub	sp, fp, #16
   14ba8:	pop	{r4, r5, r6, r7, fp, pc}
   14bac:	mov	r0, #1
   14bb0:	sub	sp, fp, #16
   14bb4:	pop	{r4, r5, r6, r7, fp, pc}
   14bb8:	push	{r4, r5, r6, r7, fp, lr}
   14bbc:	add	fp, sp, #16
   14bc0:	sub	sp, sp, #8
   14bc4:	mov	r4, r3
   14bc8:	mov	r5, r2
   14bcc:	mov	r7, r1
   14bd0:	mov	r6, r0
   14bd4:	mov	r0, r1
   14bd8:	bl	159e8 <__assert_fail@plt+0x47a0>
   14bdc:	ldrb	r1, [r6, #2]
   14be0:	cmp	r0, #0
   14be4:	andne	r1, r1, #223	; 0xdf
   14be8:	mov	r0, #0
   14bec:	cmp	r1, r7
   14bf0:	bne	14c18 <__assert_fail@plt+0x39d0>
   14bf4:	cmp	r7, #0
   14bf8:	beq	14c20 <__assert_fail@plt+0x39d8>
   14bfc:	ldr	r0, [fp, #12]
   14c00:	ldr	r3, [fp, #8]
   14c04:	str	r0, [sp]
   14c08:	mov	r0, r6
   14c0c:	mov	r1, r5
   14c10:	mov	r2, r4
   14c14:	bl	14c2c <__assert_fail@plt+0x39e4>
   14c18:	sub	sp, fp, #16
   14c1c:	pop	{r4, r5, r6, r7, fp, pc}
   14c20:	mov	r0, #1
   14c24:	sub	sp, fp, #16
   14c28:	pop	{r4, r5, r6, r7, fp, pc}
   14c2c:	push	{r4, r5, r6, r7, fp, lr}
   14c30:	add	fp, sp, #16
   14c34:	mov	r4, r3
   14c38:	mov	r5, r2
   14c3c:	mov	r7, r1
   14c40:	mov	r6, r0
   14c44:	mov	r0, r1
   14c48:	bl	159e8 <__assert_fail@plt+0x47a0>
   14c4c:	ldrb	r1, [r6, #3]
   14c50:	ldr	r3, [fp, #8]
   14c54:	cmp	r0, #0
   14c58:	andne	r1, r1, #223	; 0xdf
   14c5c:	mov	r0, #0
   14c60:	cmp	r1, r7
   14c64:	bne	14c88 <__assert_fail@plt+0x3a40>
   14c68:	cmp	r7, #0
   14c6c:	beq	14c84 <__assert_fail@plt+0x3a3c>
   14c70:	mov	r0, r6
   14c74:	mov	r1, r5
   14c78:	mov	r2, r4
   14c7c:	pop	{r4, r5, r6, r7, fp, lr}
   14c80:	b	14c8c <__assert_fail@plt+0x3a44>
   14c84:	mov	r0, #1
   14c88:	pop	{r4, r5, r6, r7, fp, pc}
   14c8c:	push	{r4, r5, r6, r7, fp, lr}
   14c90:	add	fp, sp, #16
   14c94:	mov	r4, r3
   14c98:	mov	r5, r2
   14c9c:	mov	r7, r1
   14ca0:	mov	r6, r0
   14ca4:	mov	r0, r1
   14ca8:	bl	159e8 <__assert_fail@plt+0x47a0>
   14cac:	ldrb	r1, [r6, #4]
   14cb0:	cmp	r0, #0
   14cb4:	andne	r1, r1, #223	; 0xdf
   14cb8:	mov	r0, #0
   14cbc:	cmp	r1, r7
   14cc0:	bne	14ce4 <__assert_fail@plt+0x3a9c>
   14cc4:	cmp	r7, #0
   14cc8:	beq	14ce0 <__assert_fail@plt+0x3a98>
   14ccc:	mov	r0, r6
   14cd0:	mov	r1, r5
   14cd4:	mov	r2, r4
   14cd8:	pop	{r4, r5, r6, r7, fp, lr}
   14cdc:	b	14ce8 <__assert_fail@plt+0x3aa0>
   14ce0:	mov	r0, #1
   14ce4:	pop	{r4, r5, r6, r7, fp, pc}
   14ce8:	push	{r4, r5, r6, sl, fp, lr}
   14cec:	add	fp, sp, #16
   14cf0:	mov	r4, r2
   14cf4:	mov	r6, r1
   14cf8:	mov	r5, r0
   14cfc:	mov	r0, r1
   14d00:	bl	159e8 <__assert_fail@plt+0x47a0>
   14d04:	ldrb	r1, [r5, #5]
   14d08:	cmp	r0, #0
   14d0c:	andne	r1, r1, #223	; 0xdf
   14d10:	mov	r0, #0
   14d14:	cmp	r1, r6
   14d18:	bne	14d38 <__assert_fail@plt+0x3af0>
   14d1c:	cmp	r6, #0
   14d20:	beq	14d34 <__assert_fail@plt+0x3aec>
   14d24:	mov	r0, r5
   14d28:	mov	r1, r4
   14d2c:	pop	{r4, r5, r6, sl, fp, lr}
   14d30:	b	14d3c <__assert_fail@plt+0x3af4>
   14d34:	mov	r0, #1
   14d38:	pop	{r4, r5, r6, sl, fp, pc}
   14d3c:	push	{r4, r5, fp, lr}
   14d40:	add	fp, sp, #8
   14d44:	mov	r5, r1
   14d48:	mov	r4, r0
   14d4c:	mov	r0, r1
   14d50:	bl	159e8 <__assert_fail@plt+0x47a0>
   14d54:	ldrb	r1, [r4, #6]
   14d58:	cmp	r0, #0
   14d5c:	andne	r1, r1, #223	; 0xdf
   14d60:	mov	r0, #0
   14d64:	cmp	r1, r5
   14d68:	popne	{r4, r5, fp, pc}
   14d6c:	cmp	r5, #0
   14d70:	beq	14d80 <__assert_fail@plt+0x3b38>
   14d74:	mov	r0, r4
   14d78:	pop	{r4, r5, fp, lr}
   14d7c:	b	14d88 <__assert_fail@plt+0x3b40>
   14d80:	mov	r0, #1
   14d84:	pop	{r4, r5, fp, pc}
   14d88:	push	{r4, sl, fp, lr}
   14d8c:	add	fp, sp, #8
   14d90:	mov	r4, r0
   14d94:	mov	r0, #0
   14d98:	bl	159e8 <__assert_fail@plt+0x47a0>
   14d9c:	ldrb	r1, [r4, #7]
   14da0:	cmp	r0, #0
   14da4:	beq	14db8 <__assert_fail@plt+0x3b70>
   14da8:	tst	r1, #223	; 0xdf
   14dac:	bne	14dc0 <__assert_fail@plt+0x3b78>
   14db0:	mov	r0, #1
   14db4:	pop	{r4, sl, fp, pc}
   14db8:	cmp	r1, #0
   14dbc:	beq	14db0 <__assert_fail@plt+0x3b68>
   14dc0:	mov	r0, #0
   14dc4:	pop	{r4, sl, fp, pc}
   14dc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14dcc:	add	fp, sp, #24
   14dd0:	sub	sp, sp, #32
   14dd4:	mov	r4, r2
   14dd8:	mov	r8, r0
   14ddc:	ldr	r6, [fp, #12]
   14de0:	ldr	r7, [fp, #8]
   14de4:	cmp	r1, #0
   14de8:	beq	14e10 <__assert_fail@plt+0x3bc8>
   14dec:	mov	r5, r1
   14df0:	str	r4, [sp]
   14df4:	str	r3, [sp, #4]
   14df8:	movw	r2, #27764	; 0x6c74
   14dfc:	movt	r2, #1
   14e00:	mov	r0, r8
   14e04:	mov	r1, #1
   14e08:	mov	r3, r5
   14e0c:	b	14e28 <__assert_fail@plt+0x3be0>
   14e10:	str	r3, [sp]
   14e14:	movw	r2, #27776	; 0x6c80
   14e18:	movt	r2, #1
   14e1c:	mov	r0, r8
   14e20:	mov	r1, #1
   14e24:	mov	r3, r4
   14e28:	bl	11188 <__fprintf_chk@plt>
   14e2c:	movw	r1, #27783	; 0x6c87
   14e30:	movt	r1, #1
   14e34:	mov	r0, #0
   14e38:	mov	r2, #5
   14e3c:	bl	11038 <dcgettext@plt>
   14e40:	mov	r3, r0
   14e44:	movw	r0, #2022	; 0x7e6
   14e48:	str	r0, [sp]
   14e4c:	movw	r2, #28501	; 0x6f55
   14e50:	movt	r2, #1
   14e54:	mov	r0, r8
   14e58:	mov	r1, #1
   14e5c:	bl	11188 <__fprintf_chk@plt>
   14e60:	movw	r4, #26722	; 0x6862
   14e64:	movt	r4, #1
   14e68:	mov	r0, r4
   14e6c:	mov	r1, r8
   14e70:	bl	10fa8 <fputs_unlocked@plt>
   14e74:	movw	r1, #27787	; 0x6c8b
   14e78:	movt	r1, #1
   14e7c:	mov	r0, #0
   14e80:	mov	r2, #5
   14e84:	bl	11038 <dcgettext@plt>
   14e88:	mov	r2, r0
   14e8c:	movw	r3, #27958	; 0x6d36
   14e90:	movt	r3, #1
   14e94:	mov	r0, r8
   14e98:	mov	r1, #1
   14e9c:	bl	11188 <__fprintf_chk@plt>
   14ea0:	mov	r0, r4
   14ea4:	mov	r1, r8
   14ea8:	bl	10fa8 <fputs_unlocked@plt>
   14eac:	cmp	r6, #9
   14eb0:	bhi	14eec <__assert_fail@plt+0x3ca4>
   14eb4:	add	r0, pc, #0
   14eb8:	ldr	pc, [r0, r6, lsl #2]
   14ebc:	andeq	r4, r1, r4, ror #29
   14ec0:	strdeq	r4, [r1], -r8
   14ec4:	andeq	r4, r1, r8, lsr #30
   14ec8:	andeq	r4, r1, r0, asr pc
   14ecc:	andeq	r4, r1, r8, ror pc
   14ed0:	andeq	r4, r1, r0, lsr #31
   14ed4:	andeq	r4, r1, r8, asr #31
   14ed8:	andeq	r5, r1, r0
   14edc:	andeq	r5, r1, r0, lsr #1
   14ee0:	andeq	r5, r1, r8, asr #32
   14ee4:	sub	sp, fp, #24
   14ee8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14eec:	movw	r1, #28311	; 0x6e97
   14ef0:	movt	r1, #1
   14ef4:	b	15050 <__assert_fail@plt+0x3e08>
   14ef8:	movw	r1, #27992	; 0x6d58
   14efc:	movt	r1, #1
   14f00:	mov	r0, #0
   14f04:	mov	r2, #5
   14f08:	bl	11038 <dcgettext@plt>
   14f0c:	mov	r2, r0
   14f10:	ldr	r3, [r7]
   14f14:	mov	r0, r8
   14f18:	mov	r1, #1
   14f1c:	sub	sp, fp, #24
   14f20:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f24:	b	11188 <__fprintf_chk@plt>
   14f28:	movw	r1, #28008	; 0x6d68
   14f2c:	movt	r1, #1
   14f30:	mov	r0, #0
   14f34:	mov	r2, #5
   14f38:	bl	11038 <dcgettext@plt>
   14f3c:	mov	r2, r0
   14f40:	ldr	r3, [r7]
   14f44:	ldr	r0, [r7, #4]
   14f48:	str	r0, [sp]
   14f4c:	b	1503c <__assert_fail@plt+0x3df4>
   14f50:	movw	r1, #28031	; 0x6d7f
   14f54:	movt	r1, #1
   14f58:	mov	r0, #0
   14f5c:	mov	r2, #5
   14f60:	bl	11038 <dcgettext@plt>
   14f64:	mov	r2, r0
   14f68:	ldr	r3, [r7]
   14f6c:	ldmib	r7, {r0, r1}
   14f70:	stm	sp, {r0, r1}
   14f74:	b	1503c <__assert_fail@plt+0x3df4>
   14f78:	movw	r1, #28059	; 0x6d9b
   14f7c:	movt	r1, #1
   14f80:	mov	r0, #0
   14f84:	mov	r2, #5
   14f88:	bl	11038 <dcgettext@plt>
   14f8c:	mov	r2, r0
   14f90:	ldr	r3, [r7]
   14f94:	ldmib	r7, {r0, r1, r7}
   14f98:	stm	sp, {r0, r1, r7}
   14f9c:	b	1503c <__assert_fail@plt+0x3df4>
   14fa0:	movw	r1, #28091	; 0x6dbb
   14fa4:	movt	r1, #1
   14fa8:	mov	r0, #0
   14fac:	mov	r2, #5
   14fb0:	bl	11038 <dcgettext@plt>
   14fb4:	mov	r2, r0
   14fb8:	ldr	r3, [r7]
   14fbc:	ldmib	r7, {r0, r1, r6, r7}
   14fc0:	stm	sp, {r0, r1, r6, r7}
   14fc4:	b	1503c <__assert_fail@plt+0x3df4>
   14fc8:	movw	r1, #28127	; 0x6ddf
   14fcc:	movt	r1, #1
   14fd0:	mov	r0, #0
   14fd4:	mov	r2, #5
   14fd8:	bl	11038 <dcgettext@plt>
   14fdc:	mov	r2, r0
   14fe0:	ldr	r3, [r7]
   14fe4:	ldmib	r7, {r0, r1, r6}
   14fe8:	ldr	r5, [r7, #16]
   14fec:	ldr	r7, [r7, #20]
   14ff0:	stm	sp, {r0, r1, r6}
   14ff4:	str	r5, [sp, #12]
   14ff8:	str	r7, [sp, #16]
   14ffc:	b	1503c <__assert_fail@plt+0x3df4>
   15000:	movw	r1, #28167	; 0x6e07
   15004:	movt	r1, #1
   15008:	mov	r0, #0
   1500c:	mov	r2, #5
   15010:	bl	11038 <dcgettext@plt>
   15014:	mov	r2, r0
   15018:	ldr	r3, [r7]
   1501c:	ldmib	r7, {r0, r1, r6}
   15020:	ldr	r5, [r7, #16]
   15024:	ldr	r4, [r7, #20]
   15028:	ldr	r7, [r7, #24]
   1502c:	stm	sp, {r0, r1, r6}
   15030:	str	r5, [sp, #12]
   15034:	str	r4, [sp, #16]
   15038:	str	r7, [sp, #20]
   1503c:	mov	r0, r8
   15040:	mov	r1, #1
   15044:	b	150f0 <__assert_fail@plt+0x3ea8>
   15048:	movw	r1, #28259	; 0x6e63
   1504c:	movt	r1, #1
   15050:	mov	r0, #0
   15054:	mov	r2, #5
   15058:	bl	11038 <dcgettext@plt>
   1505c:	mov	ip, r0
   15060:	ldr	r3, [r7]
   15064:	ldr	r0, [r7, #4]
   15068:	ldr	r1, [r7, #8]
   1506c:	ldr	r6, [r7, #12]
   15070:	ldr	r5, [r7, #16]
   15074:	ldr	r4, [r7, #20]
   15078:	ldr	r2, [r7, #24]
   1507c:	ldr	lr, [r7, #28]
   15080:	ldr	r7, [r7, #32]
   15084:	stm	sp, {r0, r1, r6}
   15088:	str	r5, [sp, #12]
   1508c:	str	r4, [sp, #16]
   15090:	str	r2, [sp, #20]
   15094:	str	lr, [sp, #24]
   15098:	str	r7, [sp, #28]
   1509c:	b	150e4 <__assert_fail@plt+0x3e9c>
   150a0:	movw	r1, #28211	; 0x6e33
   150a4:	movt	r1, #1
   150a8:	mov	r0, #0
   150ac:	mov	r2, #5
   150b0:	bl	11038 <dcgettext@plt>
   150b4:	mov	ip, r0
   150b8:	ldr	r3, [r7]
   150bc:	ldmib	r7, {r0, r1, r6}
   150c0:	ldr	r5, [r7, #16]
   150c4:	ldr	r4, [r7, #20]
   150c8:	ldr	r2, [r7, #24]
   150cc:	ldr	r7, [r7, #28]
   150d0:	stm	sp, {r0, r1, r6}
   150d4:	str	r5, [sp, #12]
   150d8:	str	r4, [sp, #16]
   150dc:	str	r2, [sp, #20]
   150e0:	str	r7, [sp, #24]
   150e4:	mov	r0, r8
   150e8:	mov	r1, #1
   150ec:	mov	r2, ip
   150f0:	bl	11188 <__fprintf_chk@plt>
   150f4:	sub	sp, fp, #24
   150f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150fc:	push	{r4, sl, fp, lr}
   15100:	add	fp, sp, #8
   15104:	sub	sp, sp, #8
   15108:	mov	lr, #0
   1510c:	ldr	ip, [fp, #8]
   15110:	ldr	r4, [ip, lr, lsl #2]
   15114:	add	lr, lr, #1
   15118:	cmp	r4, #0
   1511c:	bne	15110 <__assert_fail@plt+0x3ec8>
   15120:	sub	r4, lr, #1
   15124:	str	ip, [sp]
   15128:	str	r4, [sp, #4]
   1512c:	bl	14dc8 <__assert_fail@plt+0x3b80>
   15130:	sub	sp, fp, #8
   15134:	pop	{r4, sl, fp, pc}
   15138:	push	{r4, r5, fp, lr}
   1513c:	add	fp, sp, #8
   15140:	sub	sp, sp, #48	; 0x30
   15144:	mov	ip, #0
   15148:	ldr	r4, [fp, #8]
   1514c:	add	lr, sp, #8
   15150:	ldr	r5, [r4]
   15154:	str	r5, [lr, ip, lsl #2]
   15158:	cmp	r5, #0
   1515c:	beq	15174 <__assert_fail@plt+0x3f2c>
   15160:	add	ip, ip, #1
   15164:	add	r4, r4, #4
   15168:	cmp	ip, #10
   1516c:	bne	15150 <__assert_fail@plt+0x3f08>
   15170:	mov	ip, #10
   15174:	str	lr, [sp]
   15178:	str	ip, [sp, #4]
   1517c:	bl	14dc8 <__assert_fail@plt+0x3b80>
   15180:	sub	sp, fp, #8
   15184:	pop	{r4, r5, fp, pc}
   15188:	push	{fp, lr}
   1518c:	mov	fp, sp
   15190:	sub	sp, sp, #8
   15194:	add	ip, fp, #8
   15198:	str	ip, [sp, #4]
   1519c:	str	ip, [sp]
   151a0:	bl	15138 <__assert_fail@plt+0x3ef0>
   151a4:	mov	sp, fp
   151a8:	pop	{fp, pc}
   151ac:	push	{fp, lr}
   151b0:	mov	fp, sp
   151b4:	movw	r0, #33124	; 0x8164
   151b8:	movt	r0, #2
   151bc:	ldr	r1, [r0]
   151c0:	movw	r0, #26722	; 0x6862
   151c4:	movt	r0, #1
   151c8:	bl	10fa8 <fputs_unlocked@plt>
   151cc:	movw	r1, #28371	; 0x6ed3
   151d0:	movt	r1, #1
   151d4:	mov	r0, #0
   151d8:	mov	r2, #5
   151dc:	bl	11038 <dcgettext@plt>
   151e0:	mov	r1, r0
   151e4:	movw	r2, #28391	; 0x6ee7
   151e8:	movt	r2, #1
   151ec:	mov	r0, #1
   151f0:	bl	11170 <__printf_chk@plt>
   151f4:	movw	r1, #28413	; 0x6efd
   151f8:	movt	r1, #1
   151fc:	mov	r0, #0
   15200:	mov	r2, #5
   15204:	bl	11038 <dcgettext@plt>
   15208:	mov	r1, r0
   1520c:	movw	r2, #26027	; 0x65ab
   15210:	movt	r2, #1
   15214:	movw	r3, #26531	; 0x67a3
   15218:	movt	r3, #1
   1521c:	mov	r0, #1
   15220:	bl	11170 <__printf_chk@plt>
   15224:	movw	r1, #28433	; 0x6f11
   15228:	movt	r1, #1
   1522c:	mov	r0, #0
   15230:	mov	r2, #5
   15234:	bl	11038 <dcgettext@plt>
   15238:	mov	r1, r0
   1523c:	movw	r2, #28472	; 0x6f38
   15240:	movt	r2, #1
   15244:	mov	r0, #1
   15248:	pop	{fp, lr}
   1524c:	b	11170 <__printf_chk@plt>
   15250:	b	15254 <__assert_fail@plt+0x400c>
   15254:	push	{r4, r5, r6, sl, fp, lr}
   15258:	add	fp, sp, #16
   1525c:	mov	r4, r2
   15260:	mov	r5, r1
   15264:	mov	r6, r0
   15268:	bl	15d44 <__assert_fail@plt+0x4afc>
   1526c:	cmp	r0, #0
   15270:	popne	{r4, r5, r6, sl, fp, pc}
   15274:	cmp	r6, #0
   15278:	beq	1528c <__assert_fail@plt+0x4044>
   1527c:	cmp	r5, #0
   15280:	cmpne	r4, #0
   15284:	bne	1528c <__assert_fail@plt+0x4044>
   15288:	pop	{r4, r5, r6, sl, fp, pc}
   1528c:	bl	15618 <__assert_fail@plt+0x43d0>
   15290:	push	{fp, lr}
   15294:	mov	fp, sp
   15298:	bl	156b0 <__assert_fail@plt+0x4468>
   1529c:	pop	{fp, lr}
   152a0:	b	152a4 <__assert_fail@plt+0x405c>
   152a4:	cmp	r0, #0
   152a8:	bxne	lr
   152ac:	push	{fp, lr}
   152b0:	mov	fp, sp
   152b4:	bl	15618 <__assert_fail@plt+0x43d0>
   152b8:	push	{fp, lr}
   152bc:	mov	fp, sp
   152c0:	bl	15c74 <__assert_fail@plt+0x4a2c>
   152c4:	pop	{fp, lr}
   152c8:	b	152a4 <__assert_fail@plt+0x405c>
   152cc:	b	15290 <__assert_fail@plt+0x4048>
   152d0:	push	{r4, r5, fp, lr}
   152d4:	add	fp, sp, #8
   152d8:	mov	r4, r1
   152dc:	mov	r5, r0
   152e0:	bl	156e0 <__assert_fail@plt+0x4498>
   152e4:	cmp	r0, #0
   152e8:	popne	{r4, r5, fp, pc}
   152ec:	cmp	r5, #0
   152f0:	beq	15300 <__assert_fail@plt+0x40b8>
   152f4:	cmp	r4, #0
   152f8:	bne	15300 <__assert_fail@plt+0x40b8>
   152fc:	pop	{r4, r5, fp, pc}
   15300:	bl	15618 <__assert_fail@plt+0x43d0>
   15304:	push	{fp, lr}
   15308:	mov	fp, sp
   1530c:	bl	15c78 <__assert_fail@plt+0x4a30>
   15310:	pop	{fp, lr}
   15314:	b	152a4 <__assert_fail@plt+0x405c>
   15318:	push	{fp, lr}
   1531c:	mov	fp, sp
   15320:	bl	15c88 <__assert_fail@plt+0x4a40>
   15324:	pop	{fp, lr}
   15328:	b	152a4 <__assert_fail@plt+0x405c>
   1532c:	mov	r2, r1
   15330:	mov	r1, r0
   15334:	mov	r0, #0
   15338:	b	15254 <__assert_fail@plt+0x400c>
   1533c:	mov	r2, r1
   15340:	mov	r1, r0
   15344:	mov	r0, #0
   15348:	b	15318 <__assert_fail@plt+0x40d0>
   1534c:	mov	r2, #1
   15350:	b	15354 <__assert_fail@plt+0x410c>
   15354:	push	{r4, r5, fp, lr}
   15358:	add	fp, sp, #8
   1535c:	mov	r4, r1
   15360:	ldr	r5, [r1]
   15364:	cmp	r0, #0
   15368:	beq	15380 <__assert_fail@plt+0x4138>
   1536c:	mov	r1, #1
   15370:	add	r1, r1, r5, lsr #1
   15374:	adds	r5, r5, r1
   15378:	bcc	15398 <__assert_fail@plt+0x4150>
   1537c:	bl	15618 <__assert_fail@plt+0x43d0>
   15380:	cmp	r5, #0
   15384:	bne	15398 <__assert_fail@plt+0x4150>
   15388:	mov	r1, #64	; 0x40
   1538c:	udiv	r5, r1, r2
   15390:	cmp	r2, #64	; 0x40
   15394:	addhi	r5, r5, #1
   15398:	mov	r1, r5
   1539c:	bl	15254 <__assert_fail@plt+0x400c>
   153a0:	str	r5, [r4]
   153a4:	pop	{r4, r5, fp, pc}
   153a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153ac:	add	fp, sp, #24
   153b0:	mov	r8, r1
   153b4:	ldr	r6, [r1]
   153b8:	add	r1, r6, r6, asr #1
   153bc:	cmp	r1, r6
   153c0:	mvnvs	r1, #-2147483648	; 0x80000000
   153c4:	cmp	r1, r3
   153c8:	mov	r5, r1
   153cc:	movgt	r5, r3
   153d0:	cmn	r3, #1
   153d4:	movle	r5, r1
   153d8:	ldr	r4, [fp, #8]
   153dc:	cmn	r4, #1
   153e0:	ble	15408 <__assert_fail@plt+0x41c0>
   153e4:	cmp	r4, #0
   153e8:	beq	1545c <__assert_fail@plt+0x4214>
   153ec:	cmn	r5, #1
   153f0:	ble	15430 <__assert_fail@plt+0x41e8>
   153f4:	mvn	r7, #-2147483648	; 0x80000000
   153f8:	udiv	r1, r7, r4
   153fc:	cmp	r1, r5
   15400:	bge	1545c <__assert_fail@plt+0x4214>
   15404:	b	1546c <__assert_fail@plt+0x4224>
   15408:	cmn	r5, #1
   1540c:	ble	1544c <__assert_fail@plt+0x4204>
   15410:	cmn	r4, #1
   15414:	beq	1545c <__assert_fail@plt+0x4214>
   15418:	mov	r1, #-2147483648	; 0x80000000
   1541c:	sdiv	r1, r1, r4
   15420:	mvn	r7, #-2147483648	; 0x80000000
   15424:	cmp	r1, r5
   15428:	bge	1545c <__assert_fail@plt+0x4214>
   1542c:	b	1546c <__assert_fail@plt+0x4224>
   15430:	beq	1545c <__assert_fail@plt+0x4214>
   15434:	mov	r1, #-2147483648	; 0x80000000
   15438:	sdiv	r1, r1, r5
   1543c:	mvn	r7, #-2147483648	; 0x80000000
   15440:	cmp	r1, r4
   15444:	bge	1545c <__assert_fail@plt+0x4214>
   15448:	b	1546c <__assert_fail@plt+0x4224>
   1544c:	mvn	r7, #-2147483648	; 0x80000000
   15450:	sdiv	r1, r7, r4
   15454:	cmp	r5, r1
   15458:	blt	1546c <__assert_fail@plt+0x4224>
   1545c:	mul	r1, r5, r4
   15460:	mov	r7, #64	; 0x40
   15464:	cmp	r1, #63	; 0x3f
   15468:	bgt	15474 <__assert_fail@plt+0x422c>
   1546c:	sdiv	r5, r7, r4
   15470:	mul	r1, r5, r4
   15474:	cmp	r0, #0
   15478:	moveq	r7, #0
   1547c:	streq	r7, [r8]
   15480:	sub	r7, r5, r6
   15484:	cmp	r7, r2
   15488:	bge	15534 <__assert_fail@plt+0x42ec>
   1548c:	add	r5, r6, r2
   15490:	mov	r1, #0
   15494:	cmp	r5, r3
   15498:	mov	r2, #0
   1549c:	movwgt	r2, #1
   154a0:	cmn	r3, #1
   154a4:	movwgt	r1, #1
   154a8:	cmp	r5, r6
   154ac:	bvs	1551c <__assert_fail@plt+0x42d4>
   154b0:	ands	r1, r1, r2
   154b4:	bne	1551c <__assert_fail@plt+0x42d4>
   154b8:	cmn	r4, #1
   154bc:	ble	154e4 <__assert_fail@plt+0x429c>
   154c0:	cmp	r4, #0
   154c4:	beq	15530 <__assert_fail@plt+0x42e8>
   154c8:	cmn	r5, #1
   154cc:	ble	15508 <__assert_fail@plt+0x42c0>
   154d0:	mvn	r1, #-2147483648	; 0x80000000
   154d4:	udiv	r1, r1, r4
   154d8:	cmp	r1, r5
   154dc:	bge	15530 <__assert_fail@plt+0x42e8>
   154e0:	b	1551c <__assert_fail@plt+0x42d4>
   154e4:	cmn	r5, #1
   154e8:	ble	15520 <__assert_fail@plt+0x42d8>
   154ec:	cmn	r4, #1
   154f0:	beq	15530 <__assert_fail@plt+0x42e8>
   154f4:	mov	r1, #-2147483648	; 0x80000000
   154f8:	sdiv	r1, r1, r4
   154fc:	cmp	r1, r5
   15500:	bge	15530 <__assert_fail@plt+0x42e8>
   15504:	b	1551c <__assert_fail@plt+0x42d4>
   15508:	beq	15530 <__assert_fail@plt+0x42e8>
   1550c:	mov	r1, #-2147483648	; 0x80000000
   15510:	sdiv	r1, r1, r5
   15514:	cmp	r1, r4
   15518:	bge	15530 <__assert_fail@plt+0x42e8>
   1551c:	bl	15618 <__assert_fail@plt+0x43d0>
   15520:	mvn	r1, #-2147483648	; 0x80000000
   15524:	sdiv	r1, r1, r4
   15528:	cmp	r5, r1
   1552c:	blt	1551c <__assert_fail@plt+0x42d4>
   15530:	mul	r1, r5, r4
   15534:	bl	152d0 <__assert_fail@plt+0x4088>
   15538:	str	r5, [r8]
   1553c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15540:	mov	r1, #1
   15544:	b	15548 <__assert_fail@plt+0x4300>
   15548:	push	{fp, lr}
   1554c:	mov	fp, sp
   15550:	bl	1565c <__assert_fail@plt+0x4414>
   15554:	pop	{fp, lr}
   15558:	b	152a4 <__assert_fail@plt+0x405c>
   1555c:	mov	r1, #1
   15560:	b	15564 <__assert_fail@plt+0x431c>
   15564:	push	{fp, lr}
   15568:	mov	fp, sp
   1556c:	bl	15c84 <__assert_fail@plt+0x4a3c>
   15570:	pop	{fp, lr}
   15574:	b	152a4 <__assert_fail@plt+0x405c>
   15578:	push	{r4, r5, fp, lr}
   1557c:	add	fp, sp, #8
   15580:	mov	r4, r1
   15584:	mov	r5, r0
   15588:	mov	r0, r1
   1558c:	bl	15290 <__assert_fail@plt+0x4048>
   15590:	mov	r1, r5
   15594:	mov	r2, r4
   15598:	pop	{r4, r5, fp, lr}
   1559c:	b	11008 <memcpy@plt>
   155a0:	push	{r4, r5, fp, lr}
   155a4:	add	fp, sp, #8
   155a8:	mov	r4, r1
   155ac:	mov	r5, r0
   155b0:	mov	r0, r1
   155b4:	bl	152b8 <__assert_fail@plt+0x4070>
   155b8:	mov	r1, r5
   155bc:	mov	r2, r4
   155c0:	pop	{r4, r5, fp, lr}
   155c4:	b	11008 <memcpy@plt>
   155c8:	push	{r4, r5, fp, lr}
   155cc:	add	fp, sp, #8
   155d0:	mov	r4, r1
   155d4:	mov	r5, r0
   155d8:	add	r0, r1, #1
   155dc:	bl	152b8 <__assert_fail@plt+0x4070>
   155e0:	mov	r1, #0
   155e4:	strb	r1, [r0, r4]
   155e8:	mov	r1, r5
   155ec:	mov	r2, r4
   155f0:	pop	{r4, r5, fp, lr}
   155f4:	b	11008 <memcpy@plt>
   155f8:	push	{r4, sl, fp, lr}
   155fc:	add	fp, sp, #8
   15600:	mov	r4, r0
   15604:	bl	11128 <strlen@plt>
   15608:	add	r1, r0, #1
   1560c:	mov	r0, r4
   15610:	pop	{r4, sl, fp, lr}
   15614:	b	15578 <__assert_fail@plt+0x4330>
   15618:	push	{fp, lr}
   1561c:	mov	fp, sp
   15620:	movw	r0, #33028	; 0x8104
   15624:	movt	r0, #2
   15628:	ldr	r4, [r0]
   1562c:	movw	r1, #28548	; 0x6f84
   15630:	movt	r1, #1
   15634:	mov	r0, #0
   15638:	mov	r2, #5
   1563c:	bl	11038 <dcgettext@plt>
   15640:	mov	r3, r0
   15644:	movw	r2, #27510	; 0x6b76
   15648:	movt	r2, #1
   1564c:	mov	r0, r4
   15650:	mov	r1, #0
   15654:	bl	110bc <error@plt>
   15658:	bl	11218 <abort@plt>
   1565c:	clz	r2, r1
   15660:	lsr	r2, r2, #5
   15664:	clz	r3, r0
   15668:	lsr	r3, r3, #5
   1566c:	orrs	r2, r3, r2
   15670:	movwne	r1, #1
   15674:	movwne	r0, #1
   15678:	cmp	r1, #0
   1567c:	beq	156ac <__assert_fail@plt+0x4464>
   15680:	mvn	r2, #-2147483648	; 0x80000000
   15684:	udiv	r2, r2, r1
   15688:	cmp	r2, r0
   1568c:	bcs	156ac <__assert_fail@plt+0x4464>
   15690:	push	{fp, lr}
   15694:	mov	fp, sp
   15698:	bl	11140 <__errno_location@plt>
   1569c:	mov	r1, #12
   156a0:	str	r1, [r0]
   156a4:	mov	r0, #0
   156a8:	pop	{fp, pc}
   156ac:	b	10f9c <calloc@plt>
   156b0:	cmp	r0, #0
   156b4:	movweq	r0, #1
   156b8:	cmn	r0, #1
   156bc:	ble	156c4 <__assert_fail@plt+0x447c>
   156c0:	b	110c8 <malloc@plt>
   156c4:	push	{fp, lr}
   156c8:	mov	fp, sp
   156cc:	bl	11140 <__errno_location@plt>
   156d0:	mov	r1, #12
   156d4:	str	r1, [r0]
   156d8:	mov	r0, #0
   156dc:	pop	{fp, pc}
   156e0:	push	{fp, lr}
   156e4:	mov	fp, sp
   156e8:	cmp	r0, #0
   156ec:	beq	15708 <__assert_fail@plt+0x44c0>
   156f0:	cmp	r1, #0
   156f4:	beq	15714 <__assert_fail@plt+0x44cc>
   156f8:	cmn	r1, #1
   156fc:	ble	15720 <__assert_fail@plt+0x44d8>
   15700:	pop	{fp, lr}
   15704:	b	11044 <realloc@plt>
   15708:	mov	r0, r1
   1570c:	pop	{fp, lr}
   15710:	b	156b0 <__assert_fail@plt+0x4468>
   15714:	bl	12cb4 <__assert_fail@plt+0x1a6c>
   15718:	mov	r0, #0
   1571c:	pop	{fp, pc}
   15720:	bl	11140 <__errno_location@plt>
   15724:	mov	r1, #12
   15728:	str	r1, [r0]
   1572c:	mov	r0, #0
   15730:	pop	{fp, pc}
   15734:	mov	r1, r0
   15738:	sub	r2, r0, #65	; 0x41
   1573c:	mov	r0, #1
   15740:	cmp	r2, #26
   15744:	subcs	r2, r1, #97	; 0x61
   15748:	cmpcs	r2, #26
   1574c:	bcs	15754 <__assert_fail@plt+0x450c>
   15750:	bx	lr
   15754:	sub	r1, r1, #48	; 0x30
   15758:	cmp	r1, #10
   1575c:	movcs	r0, #0
   15760:	bx	lr
   15764:	mov	r1, r0
   15768:	sub	r2, r0, #65	; 0x41
   1576c:	mov	r0, #1
   15770:	cmp	r2, #26
   15774:	subcs	r1, r1, #97	; 0x61
   15778:	cmpcs	r1, #26
   1577c:	movcs	r0, #0
   15780:	bx	lr
   15784:	mov	r1, #0
   15788:	cmp	r0, #128	; 0x80
   1578c:	movwcc	r1, #1
   15790:	mov	r0, r1
   15794:	bx	lr
   15798:	sub	r1, r0, #9
   1579c:	clz	r1, r1
   157a0:	lsr	r1, r1, #5
   157a4:	sub	r0, r0, #32
   157a8:	clz	r0, r0
   157ac:	lsr	r0, r0, #5
   157b0:	orr	r0, r0, r1
   157b4:	bx	lr
   157b8:	mov	r1, r0
   157bc:	mov	r0, #1
   157c0:	cmp	r1, #32
   157c4:	bxcc	lr
   157c8:	cmp	r1, #127	; 0x7f
   157cc:	movne	r0, #0
   157d0:	bx	lr
   157d4:	sub	r1, r0, #48	; 0x30
   157d8:	mov	r0, #0
   157dc:	cmp	r1, #10
   157e0:	movwcc	r0, #1
   157e4:	bx	lr
   157e8:	sub	r1, r0, #33	; 0x21
   157ec:	mov	r0, #0
   157f0:	cmp	r1, #94	; 0x5e
   157f4:	movwcc	r0, #1
   157f8:	bx	lr
   157fc:	sub	r1, r0, #97	; 0x61
   15800:	mov	r0, #0
   15804:	cmp	r1, #26
   15808:	movwcc	r0, #1
   1580c:	bx	lr
   15810:	sub	r1, r0, #32
   15814:	mov	r0, #0
   15818:	cmp	r1, #95	; 0x5f
   1581c:	movwcc	r0, #1
   15820:	bx	lr
   15824:	sub	r1, r0, #33	; 0x21
   15828:	cmp	r1, #93	; 0x5d
   1582c:	bhi	159b8 <__assert_fail@plt+0x4770>
   15830:	mov	r0, #1
   15834:	add	r2, pc, #0
   15838:	ldr	pc, [r2, r1, lsl #2]
   1583c:			; <UNDEFINED> instruction: 0x000159b4
   15840:			; <UNDEFINED> instruction: 0x000159b4
   15844:			; <UNDEFINED> instruction: 0x000159b4
   15848:			; <UNDEFINED> instruction: 0x000159b4
   1584c:			; <UNDEFINED> instruction: 0x000159b4
   15850:			; <UNDEFINED> instruction: 0x000159b4
   15854:			; <UNDEFINED> instruction: 0x000159b4
   15858:			; <UNDEFINED> instruction: 0x000159b4
   1585c:			; <UNDEFINED> instruction: 0x000159b4
   15860:			; <UNDEFINED> instruction: 0x000159b4
   15864:			; <UNDEFINED> instruction: 0x000159b4
   15868:			; <UNDEFINED> instruction: 0x000159b4
   1586c:			; <UNDEFINED> instruction: 0x000159b4
   15870:			; <UNDEFINED> instruction: 0x000159b4
   15874:			; <UNDEFINED> instruction: 0x000159b4
   15878:			; <UNDEFINED> instruction: 0x000159b8
   1587c:			; <UNDEFINED> instruction: 0x000159b8
   15880:			; <UNDEFINED> instruction: 0x000159b8
   15884:			; <UNDEFINED> instruction: 0x000159b8
   15888:			; <UNDEFINED> instruction: 0x000159b8
   1588c:			; <UNDEFINED> instruction: 0x000159b8
   15890:			; <UNDEFINED> instruction: 0x000159b8
   15894:			; <UNDEFINED> instruction: 0x000159b8
   15898:			; <UNDEFINED> instruction: 0x000159b8
   1589c:			; <UNDEFINED> instruction: 0x000159b8
   158a0:			; <UNDEFINED> instruction: 0x000159b4
   158a4:			; <UNDEFINED> instruction: 0x000159b4
   158a8:			; <UNDEFINED> instruction: 0x000159b4
   158ac:			; <UNDEFINED> instruction: 0x000159b4
   158b0:			; <UNDEFINED> instruction: 0x000159b4
   158b4:			; <UNDEFINED> instruction: 0x000159b4
   158b8:			; <UNDEFINED> instruction: 0x000159b4
   158bc:			; <UNDEFINED> instruction: 0x000159b8
   158c0:			; <UNDEFINED> instruction: 0x000159b8
   158c4:			; <UNDEFINED> instruction: 0x000159b8
   158c8:			; <UNDEFINED> instruction: 0x000159b8
   158cc:			; <UNDEFINED> instruction: 0x000159b8
   158d0:			; <UNDEFINED> instruction: 0x000159b8
   158d4:			; <UNDEFINED> instruction: 0x000159b8
   158d8:			; <UNDEFINED> instruction: 0x000159b8
   158dc:			; <UNDEFINED> instruction: 0x000159b8
   158e0:			; <UNDEFINED> instruction: 0x000159b8
   158e4:			; <UNDEFINED> instruction: 0x000159b8
   158e8:			; <UNDEFINED> instruction: 0x000159b8
   158ec:			; <UNDEFINED> instruction: 0x000159b8
   158f0:			; <UNDEFINED> instruction: 0x000159b8
   158f4:			; <UNDEFINED> instruction: 0x000159b8
   158f8:			; <UNDEFINED> instruction: 0x000159b8
   158fc:			; <UNDEFINED> instruction: 0x000159b8
   15900:			; <UNDEFINED> instruction: 0x000159b8
   15904:			; <UNDEFINED> instruction: 0x000159b8
   15908:			; <UNDEFINED> instruction: 0x000159b8
   1590c:			; <UNDEFINED> instruction: 0x000159b8
   15910:			; <UNDEFINED> instruction: 0x000159b8
   15914:			; <UNDEFINED> instruction: 0x000159b8
   15918:			; <UNDEFINED> instruction: 0x000159b8
   1591c:			; <UNDEFINED> instruction: 0x000159b8
   15920:			; <UNDEFINED> instruction: 0x000159b8
   15924:			; <UNDEFINED> instruction: 0x000159b4
   15928:			; <UNDEFINED> instruction: 0x000159b4
   1592c:			; <UNDEFINED> instruction: 0x000159b4
   15930:			; <UNDEFINED> instruction: 0x000159b4
   15934:			; <UNDEFINED> instruction: 0x000159b4
   15938:			; <UNDEFINED> instruction: 0x000159b4
   1593c:			; <UNDEFINED> instruction: 0x000159b8
   15940:			; <UNDEFINED> instruction: 0x000159b8
   15944:			; <UNDEFINED> instruction: 0x000159b8
   15948:			; <UNDEFINED> instruction: 0x000159b8
   1594c:			; <UNDEFINED> instruction: 0x000159b8
   15950:			; <UNDEFINED> instruction: 0x000159b8
   15954:			; <UNDEFINED> instruction: 0x000159b8
   15958:			; <UNDEFINED> instruction: 0x000159b8
   1595c:			; <UNDEFINED> instruction: 0x000159b8
   15960:			; <UNDEFINED> instruction: 0x000159b8
   15964:			; <UNDEFINED> instruction: 0x000159b8
   15968:			; <UNDEFINED> instruction: 0x000159b8
   1596c:			; <UNDEFINED> instruction: 0x000159b8
   15970:			; <UNDEFINED> instruction: 0x000159b8
   15974:			; <UNDEFINED> instruction: 0x000159b8
   15978:			; <UNDEFINED> instruction: 0x000159b8
   1597c:			; <UNDEFINED> instruction: 0x000159b8
   15980:			; <UNDEFINED> instruction: 0x000159b8
   15984:			; <UNDEFINED> instruction: 0x000159b8
   15988:			; <UNDEFINED> instruction: 0x000159b8
   1598c:			; <UNDEFINED> instruction: 0x000159b8
   15990:			; <UNDEFINED> instruction: 0x000159b8
   15994:			; <UNDEFINED> instruction: 0x000159b8
   15998:			; <UNDEFINED> instruction: 0x000159b8
   1599c:			; <UNDEFINED> instruction: 0x000159b8
   159a0:			; <UNDEFINED> instruction: 0x000159b8
   159a4:			; <UNDEFINED> instruction: 0x000159b4
   159a8:			; <UNDEFINED> instruction: 0x000159b4
   159ac:			; <UNDEFINED> instruction: 0x000159b4
   159b0:			; <UNDEFINED> instruction: 0x000159b4
   159b4:	bx	lr
   159b8:	mov	r0, #0
   159bc:	bx	lr
   159c0:	sub	r0, r0, #9
   159c4:	cmp	r0, #23
   159c8:	movhi	r0, #0
   159cc:	bxhi	lr
   159d0:	bic	r0, r0, #-16777216	; 0xff000000
   159d4:	movw	r1, #31
   159d8:	movt	r1, #128	; 0x80
   159dc:	mov	r2, #1
   159e0:	and	r0, r2, r1, lsr r0
   159e4:	bx	lr
   159e8:	sub	r1, r0, #65	; 0x41
   159ec:	mov	r0, #0
   159f0:	cmp	r1, #26
   159f4:	movwcc	r0, #1
   159f8:	bx	lr
   159fc:	mov	r1, r0
   15a00:	sub	r2, r0, #48	; 0x30
   15a04:	mov	r0, #1
   15a08:	cmp	r2, #22
   15a0c:	bhi	15a24 <__assert_fail@plt+0x47dc>
   15a10:	mov	ip, #1
   15a14:	movw	r3, #1023	; 0x3ff
   15a18:	movt	r3, #126	; 0x7e
   15a1c:	tst	r3, ip, lsl r2
   15a20:	bxne	lr
   15a24:	sub	r1, r1, #97	; 0x61
   15a28:	cmp	r1, #6
   15a2c:	movcs	r0, #0
   15a30:	bxcs	lr
   15a34:	bx	lr
   15a38:	sub	r1, r0, #65	; 0x41
   15a3c:	cmp	r1, #26
   15a40:	addcc	r0, r0, #32
   15a44:	bx	lr
   15a48:	sub	r1, r0, #97	; 0x61
   15a4c:	cmp	r1, #26
   15a50:	subcc	r0, r0, #32
   15a54:	bx	lr
   15a58:	push	{r4, r5, r6, sl, fp, lr}
   15a5c:	add	fp, sp, #16
   15a60:	mov	r4, r0
   15a64:	bl	11098 <__fpending@plt>
   15a68:	mov	r5, r0
   15a6c:	mov	r0, r4
   15a70:	bl	110a4 <ferror_unlocked@plt>
   15a74:	mov	r6, r0
   15a78:	mov	r0, r4
   15a7c:	bl	12bac <__assert_fail@plt+0x1964>
   15a80:	cmp	r6, #0
   15a84:	beq	15aa8 <__assert_fail@plt+0x4860>
   15a88:	mvn	r4, #0
   15a8c:	cmp	r0, #0
   15a90:	bne	15ad4 <__assert_fail@plt+0x488c>
   15a94:	bl	11140 <__errno_location@plt>
   15a98:	mov	r1, #0
   15a9c:	str	r1, [r0]
   15aa0:	mov	r0, r4
   15aa4:	pop	{r4, r5, r6, sl, fp, pc}
   15aa8:	cmp	r0, #0
   15aac:	mov	r4, r0
   15ab0:	mvnne	r4, #0
   15ab4:	cmp	r5, #0
   15ab8:	bne	15ad4 <__assert_fail@plt+0x488c>
   15abc:	cmp	r0, #0
   15ac0:	beq	15ad4 <__assert_fail@plt+0x488c>
   15ac4:	bl	11140 <__errno_location@plt>
   15ac8:	ldr	r0, [r0]
   15acc:	subs	r4, r0, #9
   15ad0:	mvnne	r4, #0
   15ad4:	mov	r0, r4
   15ad8:	pop	{r4, r5, r6, sl, fp, pc}
   15adc:	push	{r4, r5, fp, lr}
   15ae0:	add	fp, sp, #8
   15ae4:	mov	r2, r0
   15ae8:	ldrd	r4, [r0, #16]
   15aec:	mov	r0, #0
   15af0:	cmp	r5, r4
   15af4:	pophi	{r4, r5, fp, pc}
   15af8:	ldmib	r2, {r3, r5}
   15afc:	subs	r3, r5, r3
   15b00:	strne	r3, [r1]
   15b04:	ldrne	r0, [r2, #4]
   15b08:	pop	{r4, r5, fp, pc}
   15b0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15b10:	add	fp, sp, #24
   15b14:	sub	sp, sp, #8
   15b18:	sub	sp, sp, #4096	; 0x1000
   15b1c:	mov	r8, #0
   15b20:	cmp	r1, #0
   15b24:	beq	15c3c <__assert_fail@plt+0x49f4>
   15b28:	mov	r6, r1
   15b2c:	mov	r5, r0
   15b30:	bl	15d80 <__assert_fail@plt+0x4b38>
   15b34:	mov	r7, r0
   15b38:	add	r9, sp, #4
   15b3c:	cmp	r7, #0
   15b40:	beq	15ba4 <__assert_fail@plt+0x495c>
   15b44:	mov	r0, r5
   15b48:	mov	r1, r9
   15b4c:	bl	15adc <__assert_fail@plt+0x4894>
   15b50:	cmp	r0, #0
   15b54:	ldrne	r4, [sp, #4]
   15b58:	cmpne	r4, #0
   15b5c:	beq	15b84 <__assert_fail@plt+0x493c>
   15b60:	cmp	r4, r6
   15b64:	movcs	r4, r6
   15b68:	mov	r0, r5
   15b6c:	mov	r1, r4
   15b70:	bl	15c48 <__assert_fail@plt+0x4a00>
   15b74:	subs	r6, r6, r4
   15b78:	beq	15c3c <__assert_fail@plt+0x49f4>
   15b7c:	subs	r7, r7, r4
   15b80:	beq	15ba4 <__assert_fail@plt+0x495c>
   15b84:	mov	r0, r5
   15b88:	bl	11164 <fgetc@plt>
   15b8c:	cmn	r0, #1
   15b90:	beq	15c28 <__assert_fail@plt+0x49e0>
   15b94:	sub	r7, r7, #1
   15b98:	subs	r6, r6, #1
   15b9c:	bne	15b3c <__assert_fail@plt+0x48f4>
   15ba0:	b	15c3c <__assert_fail@plt+0x49f4>
   15ba4:	mov	r0, r5
   15ba8:	bl	1117c <fileno@plt>
   15bac:	cmp	r0, #0
   15bb0:	bmi	15bec <__assert_fail@plt+0x49a4>
   15bb4:	mov	r4, #1
   15bb8:	str	r4, [sp]
   15bbc:	mov	r2, #0
   15bc0:	mov	r3, #0
   15bc4:	bl	11074 <lseek64@plt>
   15bc8:	cmp	r1, #0
   15bcc:	bmi	15bec <__assert_fail@plt+0x49a4>
   15bd0:	str	r4, [sp]
   15bd4:	mov	r0, r5
   15bd8:	mov	r2, r6
   15bdc:	mov	r3, #0
   15be0:	bl	12cdc <__assert_fail@plt+0x1a94>
   15be4:	mov	r8, r0
   15be8:	b	15c3c <__assert_fail@plt+0x49f4>
   15bec:	add	r4, sp, #4
   15bf0:	cmp	r6, #4096	; 0x1000
   15bf4:	mov	r7, r6
   15bf8:	movcs	r7, #4096	; 0x1000
   15bfc:	mov	r0, r4
   15c00:	mov	r1, #1
   15c04:	mov	r2, r7
   15c08:	mov	r3, r5
   15c0c:	bl	1108c <fread@plt>
   15c10:	cmp	r0, r7
   15c14:	subcs	r6, r6, r7
   15c18:	bcc	15c28 <__assert_fail@plt+0x49e0>
   15c1c:	cmp	r6, #0
   15c20:	bne	15bf0 <__assert_fail@plt+0x49a8>
   15c24:	b	15c3c <__assert_fail@plt+0x49f4>
   15c28:	mov	r0, r5
   15c2c:	bl	10ff0 <ferror@plt>
   15c30:	mov	r8, r0
   15c34:	cmp	r0, #0
   15c38:	mvnne	r8, #0
   15c3c:	mov	r0, r8
   15c40:	sub	sp, fp, #24
   15c44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c48:	ldr	r2, [r0, #4]
   15c4c:	add	r1, r2, r1
   15c50:	str	r1, [r0, #4]
   15c54:	bx	lr
   15c58:	push	{fp, lr}
   15c5c:	mov	fp, sp
   15c60:	bl	11140 <__errno_location@plt>
   15c64:	mov	r1, #12
   15c68:	str	r1, [r0]
   15c6c:	mov	r0, #0
   15c70:	pop	{fp, pc}
   15c74:	b	156b0 <__assert_fail@plt+0x4468>
   15c78:	cmp	r1, #0
   15c7c:	orreq	r1, r1, #1
   15c80:	b	156e0 <__assert_fail@plt+0x4498>
   15c84:	b	1565c <__assert_fail@plt+0x4414>
   15c88:	clz	r3, r2
   15c8c:	lsr	ip, r3, #5
   15c90:	clz	r3, r1
   15c94:	lsr	r3, r3, #5
   15c98:	orrs	r3, r3, ip
   15c9c:	movwne	r1, #1
   15ca0:	movwne	r2, #1
   15ca4:	b	15d44 <__assert_fail@plt+0x4afc>
   15ca8:	push	{fp, lr}
   15cac:	mov	fp, sp
   15cb0:	mov	r0, #14
   15cb4:	bl	111d0 <nl_langinfo@plt>
   15cb8:	movw	r1, #26723	; 0x6863
   15cbc:	movt	r1, #1
   15cc0:	cmp	r0, #0
   15cc4:	movne	r1, r0
   15cc8:	ldrb	r2, [r1]
   15ccc:	movw	r0, #28565	; 0x6f95
   15cd0:	movt	r0, #1
   15cd4:	cmp	r2, #0
   15cd8:	movne	r0, r1
   15cdc:	pop	{fp, pc}
   15ce0:	push	{r4, r5, r6, r7, fp, lr}
   15ce4:	add	fp, sp, #16
   15ce8:	sub	sp, sp, #8
   15cec:	mov	r7, r2
   15cf0:	mov	r4, r1
   15cf4:	add	r5, sp, #4
   15cf8:	cmp	r0, #0
   15cfc:	movne	r5, r0
   15d00:	mov	r0, r5
   15d04:	bl	110b0 <mbrtowc@plt>
   15d08:	mov	r6, r0
   15d0c:	cmp	r7, #0
   15d10:	beq	15d38 <__assert_fail@plt+0x4af0>
   15d14:	cmn	r6, #2
   15d18:	bcc	15d38 <__assert_fail@plt+0x4af0>
   15d1c:	mov	r0, #0
   15d20:	bl	15dc0 <__assert_fail@plt+0x4b78>
   15d24:	cmp	r0, #0
   15d28:	bne	15d38 <__assert_fail@plt+0x4af0>
   15d2c:	ldrb	r0, [r4]
   15d30:	str	r0, [r5]
   15d34:	mov	r6, #1
   15d38:	mov	r0, r6
   15d3c:	sub	sp, fp, #16
   15d40:	pop	{r4, r5, r6, r7, fp, pc}
   15d44:	cmp	r2, #0
   15d48:	beq	15d78 <__assert_fail@plt+0x4b30>
   15d4c:	mvn	r3, #0
   15d50:	udiv	r3, r3, r2
   15d54:	cmp	r3, r1
   15d58:	bcs	15d78 <__assert_fail@plt+0x4b30>
   15d5c:	push	{fp, lr}
   15d60:	mov	fp, sp
   15d64:	bl	11140 <__errno_location@plt>
   15d68:	mov	r1, #12
   15d6c:	str	r1, [r0]
   15d70:	mov	r0, #0
   15d74:	pop	{fp, pc}
   15d78:	mul	r1, r2, r1
   15d7c:	b	156e0 <__assert_fail@plt+0x4498>
   15d80:	ldrd	r2, [r0, #16]
   15d84:	mov	r1, #0
   15d88:	cmp	r3, r2
   15d8c:	bhi	15db8 <__assert_fail@plt+0x4b70>
   15d90:	ldmib	r0, {r1, r2}
   15d94:	sub	r1, r2, r1
   15d98:	ldrb	r3, [r0, #1]
   15d9c:	mov	r2, #0
   15da0:	tst	r3, #1
   15da4:	beq	15db4 <__assert_fail@plt+0x4b6c>
   15da8:	ldr	r2, [r0, #36]	; 0x24
   15dac:	ldr	r0, [r0, #44]	; 0x2c
   15db0:	sub	r2, r0, r2
   15db4:	add	r1, r1, r2
   15db8:	mov	r0, r1
   15dbc:	bx	lr
   15dc0:	push	{r4, sl, fp, lr}
   15dc4:	add	fp, sp, #8
   15dc8:	sub	sp, sp, #264	; 0x108
   15dcc:	add	r1, sp, #7
   15dd0:	movw	r2, #257	; 0x101
   15dd4:	bl	15e2c <__assert_fail@plt+0x4be4>
   15dd8:	mov	r4, #0
   15ddc:	cmp	r0, #0
   15de0:	bne	15e20 <__assert_fail@plt+0x4bd8>
   15de4:	add	r0, sp, #7
   15de8:	movw	r1, #28571	; 0x6f9b
   15dec:	movt	r1, #1
   15df0:	mov	r2, #2
   15df4:	bl	1111c <bcmp@plt>
   15df8:	cmp	r0, #0
   15dfc:	beq	15e20 <__assert_fail@plt+0x4bd8>
   15e00:	add	r0, sp, #7
   15e04:	movw	r1, #28573	; 0x6f9d
   15e08:	movt	r1, #1
   15e0c:	mov	r2, #6
   15e10:	bl	1111c <bcmp@plt>
   15e14:	mov	r4, r0
   15e18:	cmp	r0, #0
   15e1c:	movwne	r4, #1
   15e20:	mov	r0, r4
   15e24:	sub	sp, fp, #8
   15e28:	pop	{r4, sl, fp, pc}
   15e2c:	b	15e30 <__assert_fail@plt+0x4be8>
   15e30:	push	{r4, r5, r6, r7, fp, lr}
   15e34:	add	fp, sp, #16
   15e38:	mov	r6, r2
   15e3c:	mov	r4, r1
   15e40:	bl	15ec8 <__assert_fail@plt+0x4c80>
   15e44:	cmp	r0, #0
   15e48:	beq	15e78 <__assert_fail@plt+0x4c30>
   15e4c:	mov	r7, r0
   15e50:	bl	11128 <strlen@plt>
   15e54:	cmp	r0, r6
   15e58:	bcs	15e94 <__assert_fail@plt+0x4c4c>
   15e5c:	add	r2, r0, #1
   15e60:	mov	r0, r4
   15e64:	mov	r1, r7
   15e68:	bl	11008 <memcpy@plt>
   15e6c:	mov	r5, #0
   15e70:	mov	r0, r5
   15e74:	pop	{r4, r5, r6, r7, fp, pc}
   15e78:	mov	r5, #22
   15e7c:	cmp	r6, #0
   15e80:	beq	15ebc <__assert_fail@plt+0x4c74>
   15e84:	mov	r0, #0
   15e88:	strb	r0, [r4]
   15e8c:	mov	r0, r5
   15e90:	pop	{r4, r5, r6, r7, fp, pc}
   15e94:	mov	r5, #34	; 0x22
   15e98:	cmp	r6, #0
   15e9c:	beq	15ebc <__assert_fail@plt+0x4c74>
   15ea0:	sub	r6, r6, #1
   15ea4:	mov	r0, r4
   15ea8:	mov	r1, r7
   15eac:	mov	r2, r6
   15eb0:	bl	11008 <memcpy@plt>
   15eb4:	mov	r0, #0
   15eb8:	strb	r0, [r4, r6]
   15ebc:	mov	r0, r5
   15ec0:	pop	{r4, r5, r6, r7, fp, pc}
   15ec4:	b	15ec8 <__assert_fail@plt+0x4c80>
   15ec8:	mov	r1, #0
   15ecc:	b	111b8 <setlocale@plt>
   15ed0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ed4:	mov	r7, r0
   15ed8:	ldr	r6, [pc, #72]	; 15f28 <__assert_fail@plt+0x4ce0>
   15edc:	ldr	r5, [pc, #72]	; 15f2c <__assert_fail@plt+0x4ce4>
   15ee0:	add	r6, pc, r6
   15ee4:	add	r5, pc, r5
   15ee8:	sub	r6, r6, r5
   15eec:	mov	r8, r1
   15ef0:	mov	r9, r2
   15ef4:	bl	10f7c <calloc@plt-0x20>
   15ef8:	asrs	r6, r6, #2
   15efc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f00:	mov	r4, #0
   15f04:	add	r4, r4, #1
   15f08:	ldr	r3, [r5], #4
   15f0c:	mov	r2, r9
   15f10:	mov	r1, r8
   15f14:	mov	r0, r7
   15f18:	blx	r3
   15f1c:	cmp	r6, r4
   15f20:	bne	15f04 <__assert_fail@plt+0x4cbc>
   15f24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f28:	andeq	r2, r1, r4, lsr #32
   15f2c:	andeq	r2, r1, ip, lsl r0
   15f30:	bx	lr
   15f34:	ldr	r3, [pc, #12]	; 15f48 <__assert_fail@plt+0x4d00>
   15f38:	mov	r1, #0
   15f3c:	add	r3, pc, r3
   15f40:	ldr	r2, [r3]
   15f44:	b	1114c <__cxa_atexit@plt>
   15f48:			; <UNDEFINED> instruction: 0x000121b8

Disassembly of section .fini:

00015f4c <.fini>:
   15f4c:	push	{r3, lr}
   15f50:	pop	{r3, pc}
