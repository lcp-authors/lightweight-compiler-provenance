
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

00000510 <.init>:
 510:	push	{r3, lr}
 514:	bl	5b8 <bloom_init@plt+0x10>
 518:	pop	{r3, pc}

Disassembly of section .plt:

0000051c <calloc@plt-0x14>:
 51c:	push	{lr}		; (str lr, [sp, #-4]!)
 520:	ldr	lr, [pc, #4]	; 52c <calloc@plt-0x4>
 524:	add	lr, pc, lr
 528:	ldr	pc, [lr, #8]!
 52c:	ldrdeq	r0, [r1], -r4

00000530 <calloc@plt>:
 530:	add	ip, pc, #0, 12
 534:	add	ip, ip, #16, 20	; 0x10000
 538:	ldr	pc, [ip, #2772]!	; 0xad4

0000053c <raise@plt>:
 53c:	add	ip, pc, #0, 12
 540:	add	ip, ip, #16, 20	; 0x10000
 544:	ldr	pc, [ip, #2764]!	; 0xacc

00000548 <log@plt>:
 548:	add	ip, pc, #0, 12
 54c:	add	ip, ip, #16, 20	; 0x10000
 550:	ldr	pc, [ip, #2756]!	; 0xac4

00000554 <__cxa_finalize@plt>:
 554:	add	ip, pc, #0, 12
 558:	add	ip, ip, #16, 20	; 0x10000
 55c:	ldr	pc, [ip, #2748]!	; 0xabc

00000560 <printf@plt>:
 560:	add	ip, pc, #0, 12
 564:	add	ip, ip, #16, 20	; 0x10000
 568:	ldr	pc, [ip, #2740]!	; 0xab4

0000056c <murmurhash2@plt>:
 56c:	add	ip, pc, #0, 12
 570:	add	ip, ip, #16, 20	; 0x10000
 574:	ldr	pc, [ip, #2732]!	; 0xaac

00000578 <free@plt>:
 578:	add	ip, pc, #0, 12
 57c:	add	ip, ip, #16, 20	; 0x10000
 580:	ldr	pc, [ip, #2724]!	; 0xaa4

00000584 <__gmon_start__@plt>:
 584:	add	ip, pc, #0, 12
 588:	add	ip, ip, #16, 20	; 0x10000
 58c:	ldr	pc, [ip, #2716]!	; 0xa9c

00000590 <memset@plt>:
 590:	add	ip, pc, #0, 12
 594:	add	ip, ip, #16, 20	; 0x10000
 598:	ldr	pc, [ip, #2708]!	; 0xa94

0000059c <ceil@plt>:
 59c:	add	ip, pc, #0, 12
 5a0:	add	ip, ip, #16, 20	; 0x10000
 5a4:	ldr	pc, [ip, #2700]!	; 0xa8c

000005a8 <bloom_init@plt>:
 5a8:	add	ip, pc, #0, 12
 5ac:	add	ip, ip, #16, 20	; 0x10000
 5b0:	ldr	pc, [ip, #2692]!	; 0xa84

Disassembly of section .text:

000005b8 <bloom_init@@Base-0x178>:
 5b8:	ldr	r3, [pc, #20]	; 5d4 <bloom_init@plt+0x2c>
 5bc:	ldr	r2, [pc, #20]	; 5d8 <bloom_init@plt+0x30>
 5c0:	add	r3, pc, r3
 5c4:	ldr	r2, [r3, r2]
 5c8:	cmp	r2, #0
 5cc:	bxeq	lr
 5d0:	b	584 <__gmon_start__@plt>
 5d4:	andeq	r0, r1, r8, lsr sl
 5d8:	andeq	r0, r0, r0, asr #32
 5dc:	ldr	r3, [pc, #52]	; 618 <bloom_init@plt+0x70>
 5e0:	ldr	r0, [pc, #52]	; 61c <bloom_init@plt+0x74>
 5e4:	add	r3, pc, r3
 5e8:	add	r0, pc, r0
 5ec:	add	r3, r3, #3
 5f0:	sub	r3, r3, r0
 5f4:	cmp	r3, #6
 5f8:	ldr	r3, [pc, #32]	; 620 <bloom_init@plt+0x78>
 5fc:	add	r3, pc, r3
 600:	bxls	lr
 604:	ldr	r2, [pc, #24]	; 624 <bloom_init@plt+0x7c>
 608:	ldr	r3, [r3, r2]
 60c:	cmp	r3, #0
 610:	bxeq	lr
 614:	bx	r3
 618:	andeq	r0, r1, r4, ror #20
 61c:	andeq	r0, r1, r0, ror #20
 620:	strdeq	r0, [r1], -ip
 624:	andeq	r0, r0, ip, lsr r0
 628:	ldr	r1, [pc, #56]	; 668 <bloom_init@plt+0xc0>
 62c:	ldr	r0, [pc, #56]	; 66c <bloom_init@plt+0xc4>
 630:	add	r1, pc, r1
 634:	add	r0, pc, r0
 638:	sub	r1, r1, r0
 63c:	ldr	r3, [pc, #44]	; 670 <bloom_init@plt+0xc8>
 640:	asr	r1, r1, #2
 644:	add	r3, pc, r3
 648:	add	r1, r1, r1, lsr #31
 64c:	asrs	r1, r1, #1
 650:	bxeq	lr
 654:	ldr	r2, [pc, #24]	; 674 <bloom_init@plt+0xcc>
 658:	ldr	r3, [r3, r2]
 65c:	cmp	r3, #0
 660:	bxeq	lr
 664:	bx	r3
 668:	andeq	r0, r1, r8, lsl sl
 66c:	andeq	r0, r1, r4, lsl sl
 670:			; <UNDEFINED> instruction: 0x000109b4
 674:	andeq	r0, r0, r8, asr #32
 678:	ldr	r3, [pc, #76]	; 6cc <bloom_init@plt+0x124>
 67c:	ldr	r2, [pc, #76]	; 6d0 <bloom_init@plt+0x128>
 680:	add	r3, pc, r3
 684:	add	r2, pc, r2
 688:	ldrb	r3, [r3]
 68c:	cmp	r3, #0
 690:	bxne	lr
 694:	ldr	r3, [pc, #56]	; 6d4 <bloom_init@plt+0x12c>
 698:	push	{r4, lr}
 69c:	ldr	r3, [r2, r3]
 6a0:	cmp	r3, #0
 6a4:	beq	6b4 <bloom_init@plt+0x10c>
 6a8:	ldr	r3, [pc, #40]	; 6d8 <bloom_init@plt+0x130>
 6ac:	ldr	r0, [pc, r3]
 6b0:	bl	554 <__cxa_finalize@plt>
 6b4:	bl	5dc <bloom_init@plt+0x34>
 6b8:	ldr	r3, [pc, #28]	; 6dc <bloom_init@plt+0x134>
 6bc:	mov	r2, #1
 6c0:	add	r3, pc, r3
 6c4:	strb	r2, [r3]
 6c8:	pop	{r4, pc}
 6cc:	andeq	r0, r1, r8, asr #19
 6d0:	andeq	r0, r1, r4, ror r9
 6d4:	andeq	r0, r0, r8, lsr r0
 6d8:	muleq	r1, r8, r9
 6dc:	andeq	r0, r1, r8, lsl #19
 6e0:	ldr	r0, [pc, #56]	; 720 <bloom_init@plt+0x178>
 6e4:	ldr	r3, [pc, #56]	; 724 <bloom_init@plt+0x17c>
 6e8:	add	r0, pc, r0
 6ec:	ldr	r2, [r0]
 6f0:	add	r3, pc, r3
 6f4:	cmp	r2, #0
 6f8:	bne	700 <bloom_init@plt+0x158>
 6fc:	b	628 <bloom_init@plt+0x80>
 700:	ldr	r2, [pc, #32]	; 728 <bloom_init@plt+0x180>
 704:	ldr	r3, [r3, r2]
 708:	cmp	r3, #0
 70c:	beq	6fc <bloom_init@plt+0x154>
 710:	push	{r4, lr}
 714:	blx	r3
 718:	pop	{r4, lr}
 71c:	b	628 <bloom_init@plt+0x80>
 720:	andeq	r0, r1, ip, lsl r8
 724:	andeq	r0, r1, r8, lsl #18
 728:	andeq	r0, r0, r4, asr #32
 72c:	andeq	r0, r0, r0

00000730 <bloom_init@@Base>:
 730:	vcmp.f64	d0, #0.0
 734:	mov	r3, #0
 738:	str	r3, [r0, #44]	; 0x2c
 73c:	vmrs	APSR_nzcv, fpscr
 740:	moveq	r3, #1
 744:	cmp	r1, #1000	; 0x3e8
 748:	orrlt	r3, r3, #1
 74c:	cmp	r3, #0
 750:	beq	75c <bloom_init@@Base+0x2c>
 754:	mov	r0, #1
 758:	bx	lr
 75c:	push	{r4, r5, r6, lr}
 760:	mov	r5, r0
 764:	mov	r4, r1
 768:	str	r1, [r5]
 76c:	vstr	d0, [r5, #8]
 770:	bl	548 <log@plt>
 774:	vldr	d6, [pc, #148]	; 810 <bloom_init@@Base+0xe0>
 778:	vmov	s15, r4
 77c:	vcvt.f64.s32	d7, s15
 780:	vdiv.f64	d0, d0, d6
 784:	vneg.f64	d0, d0
 788:	vmul.f64	d7, d7, d0
 78c:	vstr	d0, [r5, #32]
 790:	vcvt.s32.f64	s15, d7
 794:	vmov	r3, s15
 798:	vstr	s15, [r5, #16]
 79c:	tst	r3, #7
 7a0:	add	r4, r3, #7
 7a4:	bne	7f4 <bloom_init@@Base+0xc4>
 7a8:	cmp	r3, #0
 7ac:	movlt	r3, r4
 7b0:	asr	r4, r3, #3
 7b4:	vldr	d7, [pc, #92]	; 818 <bloom_init@@Base+0xe8>
 7b8:	str	r4, [r5, #20]
 7bc:	vmul.f64	d0, d0, d7
 7c0:	bl	59c <ceil@plt>
 7c4:	mov	r0, r4
 7c8:	mov	r1, #1
 7cc:	vcvt.s32.f64	s0, d0
 7d0:	vstr	s0, [r5, #24]
 7d4:	bl	530 <calloc@plt>
 7d8:	cmp	r0, #0
 7dc:	str	r0, [r5, #40]	; 0x28
 7e0:	beq	808 <bloom_init@@Base+0xd8>
 7e4:	mov	r3, #1
 7e8:	mov	r0, #0
 7ec:	str	r3, [r5, #44]	; 0x2c
 7f0:	pop	{r4, r5, r6, pc}
 7f4:	cmp	r3, #0
 7f8:	movlt	r3, r4
 7fc:	asr	r4, r3, #3
 800:	add	r4, r4, #1
 804:	b	7b4 <bloom_init@@Base+0x84>
 808:	mov	r0, #1
 80c:	pop	{r4, r5, r6, pc}
 810:			; <UNDEFINED> instruction: 0xff82c587
 814:	svccc	0x00debfbd
 818:			; <UNDEFINED> instruction: 0xfefa39ec
 81c:	svccc	0x00e62e42

00000820 <bloom_init_size@@Base>:
 820:	b	5a8 <bloom_init@plt>

00000824 <bloom_check@@Base>:
 824:	ldr	r3, [r0, #44]	; 0x2c
 828:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 82c:	cmp	r3, #0
 830:	mov	r8, r0
 834:	beq	8ec <bloom_check@@Base+0xc8>
 838:	mov	r5, r1
 83c:	mov	r6, r2
 840:	mov	r1, r6
 844:	ldr	r2, [pc, #184]	; 904 <bloom_check@@Base+0xe0>
 848:	mov	r0, r5
 84c:	bl	56c <murmurhash2@plt>
 850:	mov	r1, r6
 854:	mov	r2, r0
 858:	mov	r4, r0
 85c:	mov	r0, r5
 860:	bl	56c <murmurhash2@plt>
 864:	ldr	r5, [r8, #24]
 868:	cmp	r5, #0
 86c:	moveq	r8, r5
 870:	mov	r7, r0
 874:	beq	8dc <bloom_check@@Base+0xb8>
 878:	ldr	r6, [r8, #16]
 87c:	mov	r0, r4
 880:	mov	r1, r6
 884:	bl	de0 <murmurhash2@@Base+0x2e4>
 888:	ldr	r9, [r8, #40]	; 0x28
 88c:	mov	r2, #1
 890:	ldrb	r3, [r9, r1, lsr #3]
 894:	and	r0, r1, #7
 898:	ands	r0, r3, r2, lsl r0
 89c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
 8a0:	add	r4, r4, r7
 8a4:	mov	sl, r2
 8a8:	mov	r8, #0
 8ac:	add	r8, r8, #1
 8b0:	cmp	r5, r8
 8b4:	mov	r0, r4
 8b8:	mov	r1, r6
 8bc:	beq	8dc <bloom_check@@Base+0xb8>
 8c0:	bl	de0 <murmurhash2@@Base+0x2e4>
 8c4:	add	r4, r4, r7
 8c8:	and	r0, r1, #7
 8cc:	ldrb	r1, [r9, r1, lsr #3]
 8d0:	ands	r0, r1, sl, lsl r0
 8d4:	bne	8ac <bloom_check@@Base+0x88>
 8d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 8dc:	sub	r0, r5, r8
 8e0:	clz	r0, r0
 8e4:	lsr	r0, r0, #5
 8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 8ec:	mov	r1, r0
 8f0:	ldr	r0, [pc, #16]	; 908 <bloom_check@@Base+0xe4>
 8f4:	add	r0, pc, r0
 8f8:	bl	560 <printf@plt>
 8fc:	mvn	r0, #0
 900:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 904:	strbls	fp, [r7, -ip, lsl #5]
 908:	andeq	r0, r0, ip, lsl r5

0000090c <bloom_add@@Base>:
 90c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 910:	mov	sl, r0
 914:	ldr	r3, [r0, #44]	; 0x2c
 918:	cmp	r3, #0
 91c:	beq	9dc <bloom_add@@Base+0xd0>
 920:	mov	r6, r2
 924:	mov	r5, r1
 928:	ldr	r2, [pc, #196]	; 9f4 <bloom_add@@Base+0xe8>
 92c:	mov	r1, r6
 930:	mov	r0, r5
 934:	bl	56c <murmurhash2@plt>
 938:	mov	r1, r6
 93c:	mov	r2, r0
 940:	mov	r4, r0
 944:	mov	r0, r5
 948:	bl	56c <murmurhash2@plt>
 94c:	ldr	r6, [sl, #24]
 950:	cmp	r6, #0
 954:	mov	r8, r0
 958:	beq	9d4 <bloom_add@@Base+0xc8>
 95c:	mov	r7, #0
 960:	ldr	fp, [sl, #40]	; 0x28
 964:	mov	r5, r7
 968:	mov	r9, #1
 96c:	ldr	r1, [sl, #16]
 970:	mov	r0, r4
 974:	bl	de0 <murmurhash2@@Base+0x2e4>
 978:	and	r3, r1, #7
 97c:	ldrb	r2, [fp, r1, lsr #3]
 980:	lsl	r3, r9, r3
 984:	tst	r3, r2
 988:	orr	r0, r2, r3
 98c:	bne	9b0 <bloom_add@@Base+0xa4>
 990:	strb	r0, [fp, r1, lsr #3]
 994:	ldr	r6, [sl, #24]
 998:	add	r5, r5, #1
 99c:	cmp	r5, r6
 9a0:	add	r4, r4, r8
 9a4:	bcs	9c4 <bloom_add@@Base+0xb8>
 9a8:	ldr	fp, [sl, #40]	; 0x28
 9ac:	b	96c <bloom_add@@Base+0x60>
 9b0:	add	r5, r5, #1
 9b4:	cmp	r6, r5
 9b8:	add	r7, r7, #1
 9bc:	add	r4, r4, r8
 9c0:	bhi	96c <bloom_add@@Base+0x60>
 9c4:	sub	r0, r6, r7
 9c8:	clz	r0, r0
 9cc:	lsr	r0, r0, #5
 9d0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 9d4:	mov	r7, r6
 9d8:	b	9c4 <bloom_add@@Base+0xb8>
 9dc:	mov	r1, r0
 9e0:	ldr	r0, [pc, #16]	; 9f8 <bloom_add@@Base+0xec>
 9e4:	add	r0, pc, r0
 9e8:	bl	560 <printf@plt>
 9ec:	mvn	r0, #0
 9f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 9f4:	strbls	fp, [r7, -ip, lsl #5]
 9f8:	andeq	r0, r0, ip, lsr #8

000009fc <bloom_print@@Base>:
 9fc:	push	{r4, lr}
 a00:	mov	r1, r0
 a04:	mov	r4, r0
 a08:	ldr	r0, [pc, #104]	; a78 <bloom_print@@Base+0x7c>
 a0c:	add	r0, pc, r0
 a10:	bl	560 <printf@plt>
 a14:	ldr	r0, [pc, #96]	; a7c <bloom_print@@Base+0x80>
 a18:	ldr	r1, [r4]
 a1c:	add	r0, pc, r0
 a20:	bl	560 <printf@plt>
 a24:	ldr	r0, [pc, #84]	; a80 <bloom_print@@Base+0x84>
 a28:	ldrd	r2, [r4, #8]
 a2c:	add	r0, pc, r0
 a30:	bl	560 <printf@plt>
 a34:	ldr	r0, [pc, #72]	; a84 <bloom_print@@Base+0x88>
 a38:	ldr	r1, [r4, #16]
 a3c:	add	r0, pc, r0
 a40:	bl	560 <printf@plt>
 a44:	ldr	r0, [pc, #60]	; a88 <bloom_print@@Base+0x8c>
 a48:	ldrd	r2, [r4, #32]
 a4c:	add	r0, pc, r0
 a50:	bl	560 <printf@plt>
 a54:	ldr	r0, [pc, #48]	; a8c <bloom_print@@Base+0x90>
 a58:	ldr	r1, [r4, #20]
 a5c:	add	r0, pc, r0
 a60:	bl	560 <printf@plt>
 a64:	ldr	r0, [pc, #36]	; a90 <bloom_print@@Base+0x94>
 a68:	ldr	r1, [r4, #24]
 a6c:	add	r0, pc, r0
 a70:	pop	{r4, lr}
 a74:	b	560 <printf@plt>
 a78:	andeq	r0, r0, r4, lsr #8
 a7c:	andeq	r0, r0, r4, lsr #8
 a80:	andeq	r0, r0, r8, lsr #8
 a84:	andeq	r0, r0, r8, lsr #8
 a88:	andeq	r0, r0, r8, lsr #8
 a8c:	andeq	r0, r0, r0, lsr r4
 a90:	andeq	r0, r0, r0, lsr r4

00000a94 <bloom_free@@Base>:
 a94:	ldr	r3, [r0, #44]	; 0x2c
 a98:	push	{r4, lr}
 a9c:	cmp	r3, #0
 aa0:	mov	r4, r0
 aa4:	beq	ab0 <bloom_free@@Base+0x1c>
 aa8:	ldr	r0, [r0, #40]	; 0x28
 aac:	bl	578 <free@plt>
 ab0:	mov	r3, #0
 ab4:	str	r3, [r4, #44]	; 0x2c
 ab8:	pop	{r4, pc}

00000abc <bloom_reset@@Base>:
 abc:	ldr	r3, [r0, #44]	; 0x2c
 ac0:	cmp	r3, #0
 ac4:	bne	ad0 <bloom_reset@@Base+0x14>
 ac8:	mov	r0, #1
 acc:	bx	lr
 ad0:	ldr	r2, [r0, #20]
 ad4:	push	{r4, lr}
 ad8:	mov	r1, #0
 adc:	ldr	r0, [r0, #40]	; 0x28
 ae0:	bl	590 <memset@plt>
 ae4:	mov	r0, #0
 ae8:	pop	{r4, pc}

00000aec <bloom_version@@Base>:
 aec:	ldr	r0, [pc, #4]	; af8 <bloom_version@@Base+0xc>
 af0:	add	r0, pc, r0
 af4:	bx	lr
 af8:	andeq	r0, r0, r4, asr #7

00000afc <murmurhash2@@Base>:
 afc:	cmp	r1, #3
 b00:	eor	r2, r2, r1
 b04:	ble	ba0 <murmurhash2@@Base+0xa4>
 b08:	push	{r4, lr}
 b0c:	mov	ip, r1
 b10:	ldr	lr, [pc, #216]	; bf0 <murmurhash2@@Base+0xf4>
 b14:	mov	r4, r0
 b18:	ldr	r3, [r4], #4
 b1c:	mul	r2, lr, r2
 b20:	mul	r3, lr, r3
 b24:	sub	ip, ip, #4
 b28:	cmp	ip, #3
 b2c:	eor	r3, r3, r3, lsr #24
 b30:	mul	r3, lr, r3
 b34:	eor	r2, r2, r3
 b38:	bgt	b18 <murmurhash2@@Base+0x1c>
 b3c:	sub	r1, r1, #4
 b40:	bic	r3, r1, #3
 b44:	and	r1, r1, #3
 b48:	add	r3, r3, #4
 b4c:	cmp	r1, #2
 b50:	add	r0, r0, r3
 b54:	beq	b84 <murmurhash2@@Base+0x88>
 b58:	cmp	r1, #3
 b5c:	beq	b7c <murmurhash2@@Base+0x80>
 b60:	cmp	r1, #1
 b64:	beq	b8c <murmurhash2@@Base+0x90>
 b68:	ldr	r0, [pc, #128]	; bf0 <murmurhash2@@Base+0xf4>
 b6c:	eor	r3, r2, r2, lsr #13
 b70:	mul	r0, r0, r3
 b74:	eor	r0, r0, r0, lsr #15
 b78:	pop	{r4, pc}
 b7c:	ldrb	r3, [r0, #2]
 b80:	eor	r2, r2, r3, lsl #16
 b84:	ldrb	r3, [r0, #1]
 b88:	eor	r2, r2, r3, lsl #8
 b8c:	ldrb	r3, [r0]
 b90:	ldr	r1, [pc, #88]	; bf0 <murmurhash2@@Base+0xf4>
 b94:	eor	r3, r3, r2
 b98:	mul	r2, r1, r3
 b9c:	b	b68 <murmurhash2@@Base+0x6c>
 ba0:	cmp	r1, #2
 ba4:	beq	bd4 <murmurhash2@@Base+0xd8>
 ba8:	cmp	r1, #3
 bac:	beq	bcc <murmurhash2@@Base+0xd0>
 bb0:	cmp	r1, #1
 bb4:	beq	bdc <murmurhash2@@Base+0xe0>
 bb8:	ldr	r0, [pc, #48]	; bf0 <murmurhash2@@Base+0xf4>
 bbc:	eor	r3, r2, r2, lsr #13
 bc0:	mul	r0, r0, r3
 bc4:	eor	r0, r0, r0, lsr #15
 bc8:	bx	lr
 bcc:	ldrb	r3, [r0, #2]
 bd0:	eor	r2, r2, r3, lsl #16
 bd4:	ldrb	r3, [r0, #1]
 bd8:	eor	r2, r2, r3, lsl #8
 bdc:	ldrb	r3, [r0]
 be0:	ldr	r1, [pc, #8]	; bf0 <murmurhash2@@Base+0xf4>
 be4:	eor	r3, r3, r2
 be8:	mul	r2, r1, r3
 bec:	b	bb8 <murmurhash2@@Base+0xbc>
 bf0:	blpl	ff47b24c <murmurhash2@@Base+0xff47a750>
 bf4:	subs	r2, r1, #1
 bf8:	bxeq	lr
 bfc:	bcc	dd4 <murmurhash2@@Base+0x2d8>
 c00:	cmp	r0, r1
 c04:	bls	db8 <murmurhash2@@Base+0x2bc>
 c08:	tst	r1, r2
 c0c:	beq	dc4 <murmurhash2@@Base+0x2c8>
 c10:	clz	r3, r0
 c14:	clz	r2, r1
 c18:	sub	r3, r2, r3
 c1c:	rsbs	r3, r3, #31
 c20:	addne	r3, r3, r3, lsl #1
 c24:	mov	r2, #0
 c28:	addne	pc, pc, r3, lsl #2
 c2c:	nop			; (mov r0, r0)
 c30:	cmp	r0, r1, lsl #31
 c34:	adc	r2, r2, r2
 c38:	subcs	r0, r0, r1, lsl #31
 c3c:	cmp	r0, r1, lsl #30
 c40:	adc	r2, r2, r2
 c44:	subcs	r0, r0, r1, lsl #30
 c48:	cmp	r0, r1, lsl #29
 c4c:	adc	r2, r2, r2
 c50:	subcs	r0, r0, r1, lsl #29
 c54:	cmp	r0, r1, lsl #28
 c58:	adc	r2, r2, r2
 c5c:	subcs	r0, r0, r1, lsl #28
 c60:	cmp	r0, r1, lsl #27
 c64:	adc	r2, r2, r2
 c68:	subcs	r0, r0, r1, lsl #27
 c6c:	cmp	r0, r1, lsl #26
 c70:	adc	r2, r2, r2
 c74:	subcs	r0, r0, r1, lsl #26
 c78:	cmp	r0, r1, lsl #25
 c7c:	adc	r2, r2, r2
 c80:	subcs	r0, r0, r1, lsl #25
 c84:	cmp	r0, r1, lsl #24
 c88:	adc	r2, r2, r2
 c8c:	subcs	r0, r0, r1, lsl #24
 c90:	cmp	r0, r1, lsl #23
 c94:	adc	r2, r2, r2
 c98:	subcs	r0, r0, r1, lsl #23
 c9c:	cmp	r0, r1, lsl #22
 ca0:	adc	r2, r2, r2
 ca4:	subcs	r0, r0, r1, lsl #22
 ca8:	cmp	r0, r1, lsl #21
 cac:	adc	r2, r2, r2
 cb0:	subcs	r0, r0, r1, lsl #21
 cb4:	cmp	r0, r1, lsl #20
 cb8:	adc	r2, r2, r2
 cbc:	subcs	r0, r0, r1, lsl #20
 cc0:	cmp	r0, r1, lsl #19
 cc4:	adc	r2, r2, r2
 cc8:	subcs	r0, r0, r1, lsl #19
 ccc:	cmp	r0, r1, lsl #18
 cd0:	adc	r2, r2, r2
 cd4:	subcs	r0, r0, r1, lsl #18
 cd8:	cmp	r0, r1, lsl #17
 cdc:	adc	r2, r2, r2
 ce0:	subcs	r0, r0, r1, lsl #17
 ce4:	cmp	r0, r1, lsl #16
 ce8:	adc	r2, r2, r2
 cec:	subcs	r0, r0, r1, lsl #16
 cf0:	cmp	r0, r1, lsl #15
 cf4:	adc	r2, r2, r2
 cf8:	subcs	r0, r0, r1, lsl #15
 cfc:	cmp	r0, r1, lsl #14
 d00:	adc	r2, r2, r2
 d04:	subcs	r0, r0, r1, lsl #14
 d08:	cmp	r0, r1, lsl #13
 d0c:	adc	r2, r2, r2
 d10:	subcs	r0, r0, r1, lsl #13
 d14:	cmp	r0, r1, lsl #12
 d18:	adc	r2, r2, r2
 d1c:	subcs	r0, r0, r1, lsl #12
 d20:	cmp	r0, r1, lsl #11
 d24:	adc	r2, r2, r2
 d28:	subcs	r0, r0, r1, lsl #11
 d2c:	cmp	r0, r1, lsl #10
 d30:	adc	r2, r2, r2
 d34:	subcs	r0, r0, r1, lsl #10
 d38:	cmp	r0, r1, lsl #9
 d3c:	adc	r2, r2, r2
 d40:	subcs	r0, r0, r1, lsl #9
 d44:	cmp	r0, r1, lsl #8
 d48:	adc	r2, r2, r2
 d4c:	subcs	r0, r0, r1, lsl #8
 d50:	cmp	r0, r1, lsl #7
 d54:	adc	r2, r2, r2
 d58:	subcs	r0, r0, r1, lsl #7
 d5c:	cmp	r0, r1, lsl #6
 d60:	adc	r2, r2, r2
 d64:	subcs	r0, r0, r1, lsl #6
 d68:	cmp	r0, r1, lsl #5
 d6c:	adc	r2, r2, r2
 d70:	subcs	r0, r0, r1, lsl #5
 d74:	cmp	r0, r1, lsl #4
 d78:	adc	r2, r2, r2
 d7c:	subcs	r0, r0, r1, lsl #4
 d80:	cmp	r0, r1, lsl #3
 d84:	adc	r2, r2, r2
 d88:	subcs	r0, r0, r1, lsl #3
 d8c:	cmp	r0, r1, lsl #2
 d90:	adc	r2, r2, r2
 d94:	subcs	r0, r0, r1, lsl #2
 d98:	cmp	r0, r1, lsl #1
 d9c:	adc	r2, r2, r2
 da0:	subcs	r0, r0, r1, lsl #1
 da4:	cmp	r0, r1
 da8:	adc	r2, r2, r2
 dac:	subcs	r0, r0, r1
 db0:	mov	r0, r2
 db4:	bx	lr
 db8:	moveq	r0, #1
 dbc:	movne	r0, #0
 dc0:	bx	lr
 dc4:	clz	r2, r1
 dc8:	rsb	r2, r2, #31
 dcc:	lsr	r0, r0, r2
 dd0:	bx	lr
 dd4:	cmp	r0, #0
 dd8:	mvnne	r0, #0
 ddc:	b	e00 <murmurhash2@@Base+0x304>
 de0:	cmp	r1, #0
 de4:	beq	dd4 <murmurhash2@@Base+0x2d8>
 de8:	push	{r0, r1, lr}
 dec:	bl	bf4 <murmurhash2@@Base+0xf8>
 df0:	pop	{r1, r2, lr}
 df4:	mul	r3, r2, r0
 df8:	sub	r1, r1, r3
 dfc:	bx	lr
 e00:	push	{r1, lr}
 e04:	mov	r0, #8
 e08:	bl	53c <raise@plt>
 e0c:	pop	{r1, pc}

Disassembly of section .fini:

00000e10 <.fini>:
 e10:	push	{r3, lr}
 e14:	pop	{r3, pc}
