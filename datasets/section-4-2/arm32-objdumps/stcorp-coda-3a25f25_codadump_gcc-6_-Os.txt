
../repos/stcorp-coda-3a25f25/codadump:     file format elf32-littlearm


Disassembly of section .init:

00012198 <.init>:
   12198:	push	{r3, lr}
   1219c:	bl	1366c <_start@@Base+0x3c>
   121a0:	pop	{r3, pc}

Disassembly of section .plt:

000121a4 <coda_cursor_get_byte_size@plt-0x14>:
   121a4:	push	{lr}		; (str lr, [sp, #-4]!)
   121a8:	ldr	lr, [pc, #4]	; 121b4 <coda_cursor_get_byte_size@plt-0x4>
   121ac:	add	lr, pc, lr
   121b0:	ldr	pc, [lr, #8]!
   121b4:	andeq	r8, r1, ip, asr #28

000121b8 <coda_cursor_get_byte_size@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #24, 20	; 0x18000
   121c0:	ldr	pc, [ip, #3660]!	; 0xe4c

000121c4 <coda_type_get_special_type_name@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #24, 20	; 0x18000
   121cc:	ldr	pc, [ip, #3652]!	; 0xe44

000121d0 <coda_set_option_use_fast_size_expressions@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #24, 20	; 0x18000
   121d8:	ldr	pc, [ip, #3644]!	; 0xe3c

000121dc <raise@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #24, 20	; 0x18000
   121e4:	ldr	pc, [ip, #3636]!	; 0xe34

000121e8 <coda_get_option_bypass_special_types@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #24, 20	; 0x18000
   121f0:	ldr	pc, [ip, #3628]!	; 0xe2c

000121f4 <coda_set_option_perform_boundary_checks@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #24, 20	; 0x18000
   121fc:	ldr	pc, [ip, #3620]!	; 0xe24

00012200 <strcmp@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #24, 20	; 0x18000
   12208:	ldr	pc, [ip, #3612]!	; 0xe1c

0001220c <coda_type_get_record_field_hidden_status@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #24, 20	; 0x18000
   12214:	ldr	pc, [ip, #3604]!	; 0xe14

00012218 <printf@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #24, 20	; 0x18000
   12220:	ldr	pc, [ip, #3596]!	; 0xe0c

00012224 <coda_cursor_get_record_field_available_status@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #24, 20	; 0x18000
   1222c:	ldr	pc, [ip, #3588]!	; 0xe04

00012230 <fopen@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #24, 20	; 0x18000
   12238:	ldr	pc, [ip, #3580]!	; 0xdfc

0001223c <coda_set_error@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #24, 20	; 0x18000
   12244:	ldr	pc, [ip, #3572]!	; 0xdf4

00012248 <coda_open@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #24, 20	; 0x18000
   12250:	ldr	pc, [ip, #3564]!	; 0xdec

00012254 <fflush@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #24, 20	; 0x18000
   1225c:	ldr	pc, [ip, #3556]!	; 0xde4

00012260 <coda_time_double_to_string@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #24, 20	; 0x18000
   12268:	ldr	pc, [ip, #3548]!	; 0xddc

0001226c <coda_cursor_get_num_elements@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #24, 20	; 0x18000
   12274:	ldr	pc, [ip, #3540]!	; 0xdd4

00012278 <coda_str64u@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #24, 20	; 0x18000
   12280:	ldr	pc, [ip, #3532]!	; 0xdcc

00012284 <free@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #24, 20	; 0x18000
   1228c:	ldr	pc, [ip, #3524]!	; 0xdc4

00012290 <coda_set_option_use_mmap@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #24, 20	; 0x18000
   12298:	ldr	pc, [ip, #3516]!	; 0xdbc

0001229c <coda_set_definition_path_conditional@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #24, 20	; 0x18000
   122a4:	ldr	pc, [ip, #3508]!	; 0xdb4

000122a8 <coda_cursor_read_uint32@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #24, 20	; 0x18000
   122b0:	ldr	pc, [ip, #3500]!	; 0xdac

000122b4 <coda_set_option_bypass_special_types@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #24, 20	; 0x18000
   122bc:	ldr	pc, [ip, #3492]!	; 0xda4

000122c0 <coda_type_get_record_field_type@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #24, 20	; 0x18000
   122c8:	ldr	pc, [ip, #3484]!	; 0xd9c

000122cc <coda_cursor_get_type@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #24, 20	; 0x18000
   122d4:	ldr	pc, [ip, #3476]!	; 0xd94

000122d8 <memcpy@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #24, 20	; 0x18000
   122e0:	ldr	pc, [ip, #3468]!	; 0xd8c

000122e4 <coda_isInf@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #24, 20	; 0x18000
   122ec:	ldr	pc, [ip, #3460]!	; 0xd84

000122f0 <coda_type_get_bit_size@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #24, 20	; 0x18000
   122f8:	ldr	pc, [ip, #3452]!	; 0xd7c

000122fc <coda_type_get_record_field_available_status@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #24, 20	; 0x18000
   12304:	ldr	pc, [ip, #3444]!	; 0xd74

00012308 <coda_cursor_has_attributes@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #24, 20	; 0x18000
   12310:	ldr	pc, [ip, #3436]!	; 0xd6c

00012314 <coda_cursor_get_type_class@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #24, 20	; 0x18000
   1231c:	ldr	pc, [ip, #3428]!	; 0xd64

00012320 <coda_set_definition_path@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #24, 20	; 0x18000
   12328:	ldr	pc, [ip, #3420]!	; 0xd5c

0001232c <coda_get_product_format@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #24, 20	; 0x18000
   12334:	ldr	pc, [ip, #3412]!	; 0xd54

00012338 <coda_type_get_unit@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #24, 20	; 0x18000
   12340:	ldr	pc, [ip, #3404]!	; 0xd4c

00012344 <coda_type_get_description@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #24, 20	; 0x18000
   1234c:	ldr	pc, [ip, #3396]!	; 0xd44

00012350 <coda_cursor_get_special_type@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #24, 20	; 0x18000
   12358:	ldr	pc, [ip, #3388]!	; 0xd3c

0001235c <coda_cursor_goto_first_array_element@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #24, 20	; 0x18000
   12364:	ldr	pc, [ip, #3380]!	; 0xd34

00012368 <coda_cursor_set_product@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #24, 20	; 0x18000
   12370:	ldr	pc, [ip, #3372]!	; 0xd2c

00012374 <strcpy@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #24, 20	; 0x18000
   1237c:	ldr	pc, [ip, #3364]!	; 0xd24

00012380 <coda_cursor_goto_first_record_field@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #24, 20	; 0x18000
   12388:	ldr	pc, [ip, #3356]!	; 0xd1c

0001238c <coda_cursor_goto_record_field_by_index@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #24, 20	; 0x18000
   12394:	ldr	pc, [ip, #3348]!	; 0xd14

00012398 <coda_done@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #24, 20	; 0x18000
   123a0:	ldr	pc, [ip, #3340]!	; 0xd0c

000123a4 <puts@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #24, 20	; 0x18000
   123ac:	ldr	pc, [ip, #3332]!	; 0xd04

000123b0 <coda_cursor_get_read_type@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #24, 20	; 0x18000
   123b8:	ldr	pc, [ip, #3324]!	; 0xcfc

000123bc <malloc@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #24, 20	; 0x18000
   123c4:	ldr	pc, [ip, #3316]!	; 0xcf4

000123c8 <__libc_start_main@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #24, 20	; 0x18000
   123d0:	ldr	pc, [ip, #3308]!	; 0xcec

000123d4 <__gmon_start__@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #24, 20	; 0x18000
   123dc:	ldr	pc, [ip, #3300]!	; 0xce4

000123e0 <coda_cursor_read_string@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #24, 20	; 0x18000
   123e8:	ldr	pc, [ip, #3292]!	; 0xcdc

000123ec <coda_cursor_goto_parent@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #24, 20	; 0x18000
   123f4:	ldr	pc, [ip, #3284]!	; 0xcd4

000123f8 <coda_type_get_num_record_fields@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #24, 20	; 0x18000
   12400:	ldr	pc, [ip, #3276]!	; 0xccc

00012404 <exit@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #24, 20	; 0x18000
   1240c:	ldr	pc, [ip, #3268]!	; 0xcc4

00012410 <coda_type_get_read_type@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #24, 20	; 0x18000
   12418:	ldr	pc, [ip, #3260]!	; 0xcbc

0001241c <coda_cursor_get_string_length@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #24, 20	; 0x18000
   12424:	ldr	pc, [ip, #3252]!	; 0xcb4

00012428 <coda_cursor_read_uint64@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #24, 20	; 0x18000
   12430:	ldr	pc, [ip, #3244]!	; 0xcac

00012434 <coda_cursor_read_double@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #24, 20	; 0x18000
   1243c:	ldr	pc, [ip, #3236]!	; 0xca4

00012440 <coda_isNaN@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #24, 20	; 0x18000
   12448:	ldr	pc, [ip, #3228]!	; 0xc9c

0001244c <fprintf@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #24, 20	; 0x18000
   12454:	ldr	pc, [ip, #3220]!	; 0xc94

00012458 <coda_cursor_goto_next_array_element@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #24, 20	; 0x18000
   12460:	ldr	pc, [ip, #3212]!	; 0xc8c

00012464 <coda_open_as@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #24, 20	; 0x18000
   1246c:	ldr	pc, [ip, #3204]!	; 0xc84

00012470 <coda_init@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #24, 20	; 0x18000
   12478:	ldr	pc, [ip, #3196]!	; 0xc7c

0001247c <coda_set_option_perform_conversions@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #24, 20	; 0x18000
   12484:	ldr	pc, [ip, #3188]!	; 0xc74

00012488 <coda_cursor_goto_attributes@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #24, 20	; 0x18000
   12490:	ldr	pc, [ip, #3180]!	; 0xc6c

00012494 <coda_cursor_read_char@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #24, 20	; 0x18000
   1249c:	ldr	pc, [ip, #3172]!	; 0xc64

000124a0 <memset@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #24, 20	; 0x18000
   124a8:	ldr	pc, [ip, #3164]!	; 0xc5c

000124ac <putchar@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #24, 20	; 0x18000
   124b4:	ldr	pc, [ip, #3156]!	; 0xc54

000124b8 <strncpy@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #24, 20	; 0x18000
   124c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000124c4 <coda_type_get_special_type@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #24, 20	; 0x18000
   124cc:	ldr	pc, [ip, #3140]!	; 0xc44

000124d0 <coda_type_get_record_union_status@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #24, 20	; 0x18000
   124d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000124dc <coda_cursor_read_complex_double_split@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #24, 20	; 0x18000
   124e4:	ldr	pc, [ip, #3124]!	; 0xc34

000124e8 <coda_type_get_array_base_type@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #24, 20	; 0x18000
   124f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000124f4 <fclose@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #24, 20	; 0x18000
   124fc:	ldr	pc, [ip, #3108]!	; 0xc24

00012500 <coda_type_get_string_length@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #24, 20	; 0x18000
   12508:	ldr	pc, [ip, #3100]!	; 0xc1c

0001250c <coda_type_get_native_type_name@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #24, 20	; 0x18000
   12514:	ldr	pc, [ip, #3092]!	; 0xc14

00012518 <coda_cursor_get_array_dim@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #24, 20	; 0x18000
   12520:	ldr	pc, [ip, #3084]!	; 0xc0c

00012524 <coda_cursor_has_ascii_content@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #24, 20	; 0x18000
   1252c:	ldr	pc, [ip, #3076]!	; 0xc04

00012530 <coda_close@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #24, 20	; 0x18000
   12538:	ldr	pc, [ip, #3068]!	; 0xbfc

0001253c <coda_cursor_read_int64@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #24, 20	; 0x18000
   12544:	ldr	pc, [ip, #3060]!	; 0xbf4

00012548 <vfprintf@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #24, 20	; 0x18000
   12550:	ldr	pc, [ip, #3052]!	; 0xbec

00012554 <coda_cursor_goto@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #24, 20	; 0x18000
   1255c:	ldr	pc, [ip, #3044]!	; 0xbe4

00012560 <coda_type_get_record_field_index_from_name@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #24, 20	; 0x18000
   12568:	ldr	pc, [ip, #3036]!	; 0xbdc

0001256c <coda_cursor_read_complex_double_pair@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #24, 20	; 0x18000
   12574:	ldr	pc, [ip, #3028]!	; 0xbd4

00012578 <coda_cursor_goto_next_record_field@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #24, 20	; 0x18000
   12580:	ldr	pc, [ip, #3020]!	; 0xbcc

00012584 <fputc@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #24, 20	; 0x18000
   1258c:	ldr	pc, [ip, #3012]!	; 0xbc4

00012590 <coda_type_get_array_dim@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #24, 20	; 0x18000
   12598:	ldr	pc, [ip, #3004]!	; 0xbbc

0001259c <coda_cursor_get_bit_size@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #24, 20	; 0x18000
   125a4:	ldr	pc, [ip, #2996]!	; 0xbb4

000125a8 <atoi@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #24, 20	; 0x18000
   125b0:	ldr	pc, [ip, #2988]!	; 0xbac

000125b4 <coda_errno_to_string@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #24, 20	; 0x18000
   125bc:	ldr	pc, [ip, #2980]!	; 0xba4

000125c0 <coda_cursor_use_base_type_of_special_type@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #24, 20	; 0x18000
   125c8:	ldr	pc, [ip, #2972]!	; 0xb9c

000125cc <coda_cursor_get_available_union_field_index@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #24, 20	; 0x18000
   125d4:	ldr	pc, [ip, #2964]!	; 0xb94

000125d8 <coda_cursor_read_int32@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #24, 20	; 0x18000
   125e0:	ldr	pc, [ip, #2956]!	; 0xb8c

000125e4 <coda_cursor_get_file_bit_offset@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #24, 20	; 0x18000
   125ec:	ldr	pc, [ip, #2948]!	; 0xb84

000125f0 <coda_get_libcoda_version@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #24, 20	; 0x18000
   125f8:	ldr	pc, [ip, #2940]!	; 0xb7c

000125fc <coda_get_errno@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #24, 20	; 0x18000
   12604:	ldr	pc, [ip, #2932]!	; 0xb74

00012608 <coda_type_get_special_base_type@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #24, 20	; 0x18000
   12610:	ldr	pc, [ip, #2924]!	; 0xb6c

00012614 <coda_type_get_record_field_name@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #24, 20	; 0x18000
   1261c:	ldr	pc, [ip, #2916]!	; 0xb64

00012620 <fputs@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #24, 20	; 0x18000
   12628:	ldr	pc, [ip, #2908]!	; 0xb5c

0001262c <abort@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #24, 20	; 0x18000
   12634:	ldr	pc, [ip, #2900]!	; 0xb54

00012638 <coda_cursor_read_bits@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #24, 20	; 0x18000
   12640:	ldr	pc, [ip, #2892]!	; 0xb4c

00012644 <coda_str64@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #24, 20	; 0x18000
   1264c:	ldr	pc, [ip, #2884]!	; 0xb44

00012650 <__assert_fail@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #24, 20	; 0x18000
   12658:	ldr	pc, [ip, #2876]!	; 0xb3c

0001265c <coda_type_get_class@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #24, 20	; 0x18000
   12664:	ldr	pc, [ip, #2868]!	; 0xb34

Disassembly of section .text:

00012668 <main@@Base>:
   12668:	cmp	r0, #1
   1266c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12670:	sub	sp, sp, #28
   12674:	beq	126ac <main@@Base+0x44>
   12678:	ldr	r4, [r1, #4]
   1267c:	mov	r9, r0
   12680:	mov	r7, r1
   12684:	mov	r0, r4
   12688:	ldr	r1, [pc, #3724]	; 1351c <main@@Base+0xeb4>
   1268c:	bl	12200 <strcmp@plt>
   12690:	cmp	r0, #0
   12694:	beq	126ac <main@@Base+0x44>
   12698:	ldr	r1, [pc, #3712]	; 13520 <main@@Base+0xeb8>
   1269c:	mov	r0, r4
   126a0:	bl	12200 <strcmp@plt>
   126a4:	cmp	r0, #0
   126a8:	bne	126b8 <main@@Base+0x50>
   126ac:	bl	18354 <print_yaml_data@@Base+0xd4>
   126b0:	mov	r0, #0
   126b4:	bl	12404 <exit@plt>
   126b8:	ldr	r1, [pc, #3684]	; 13524 <main@@Base+0xebc>
   126bc:	mov	r0, r4
   126c0:	bl	12200 <strcmp@plt>
   126c4:	cmp	r0, #0
   126c8:	beq	126e0 <main@@Base+0x78>
   126cc:	ldr	r1, [pc, #3668]	; 13528 <main@@Base+0xec0>
   126d0:	mov	r0, r4
   126d4:	bl	12200 <strcmp@plt>
   126d8:	cmp	r0, #0
   126dc:	bne	12704 <main@@Base+0x9c>
   126e0:	bl	125f0 <coda_get_libcoda_version@plt>
   126e4:	mov	r1, r0
   126e8:	ldr	r0, [pc, #3644]	; 1352c <main@@Base+0xec4>
   126ec:	bl	12218 <printf@plt>
   126f0:	ldr	r0, [pc, #3640]	; 13530 <main@@Base+0xec8>
   126f4:	bl	123a4 <puts@plt>
   126f8:	mov	r0, #10
   126fc:	bl	124ac <putchar@plt>
   12700:	b	126b0 <main@@Base+0x48>
   12704:	cmp	r9, #2
   12708:	ble	12820 <main@@Base+0x1b8>
   1270c:	ldr	r1, [pc, #3616]	; 13534 <main@@Base+0xecc>
   12710:	mov	r0, r4
   12714:	bl	12200 <strcmp@plt>
   12718:	cmp	r0, #0
   1271c:	bne	12820 <main@@Base+0x1b8>
   12720:	ldr	r0, [r7, #8]
   12724:	bl	12320 <coda_set_definition_path@plt>
   12728:	mov	r4, #3
   1272c:	ldr	fp, [r7, r4, lsl #2]
   12730:	ldr	r1, [pc, #3584]	; 13538 <main@@Base+0xed0>
   12734:	mov	r0, fp
   12738:	bl	12200 <strcmp@plt>
   1273c:	lsl	r8, r4, #2
   12740:	ldr	sl, [pc, #3572]	; 1353c <main@@Base+0xed4>
   12744:	add	r4, r4, #1
   12748:	add	r8, r8, #4
   1274c:	subs	r5, r0, #0
   12750:	bne	12a44 <main@@Base+0x3dc>
   12754:	ldr	r3, [pc, #3556]	; 13540 <main@@Base+0xed8>
   12758:	ldr	r2, [pc, #3556]	; 13544 <main@@Base+0xedc>
   1275c:	ldr	r0, [pc, #3556]	; 13548 <main@@Base+0xee0>
   12760:	str	r5, [r3]
   12764:	str	r5, [r3, #664]	; 0x298
   12768:	ldr	r3, [pc, #3548]	; 1354c <main@@Base+0xee4>
   1276c:	ldr	r1, [pc, #3548]	; 13550 <main@@Base+0xee8>
   12770:	str	r5, [sl]
   12774:	mov	sl, #1
   12778:	str	sl, [r3]
   1277c:	ldr	fp, [pc, #3536]	; 13554 <main@@Base+0xeec>
   12780:	ldr	r3, [pc, #3536]	; 13558 <main@@Base+0xef0>
   12784:	sub	r4, r9, r4
   12788:	add	r7, r7, r8
   1278c:	mov	r8, sl
   12790:	str	r5, [r2]
   12794:	stm	sp, {r0, r1, r2}
   12798:	sub	r2, r4, #1
   1279c:	str	r5, [fp]
   127a0:	str	r5, [r0]
   127a4:	str	r5, [r1]
   127a8:	str	r5, [r3]
   127ac:	str	r2, [sp, #12]
   127b0:	str	r3, [sp, #16]
   127b4:	cmp	r4, r5
   127b8:	bgt	12868 <main@@Base+0x200>
   127bc:	ldr	r3, [pc, #3452]	; 13540 <main@@Base+0xed8>
   127c0:	ldr	r3, [r3]
   127c4:	cmp	r3, #0
   127c8:	beq	1350c <main@@Base+0xea4>
   127cc:	ldrb	r3, [r3]
   127d0:	cmp	r3, #0
   127d4:	beq	1350c <main@@Base+0xea4>
   127d8:	bl	12470 <coda_init@plt>
   127dc:	subs	r4, r0, #0
   127e0:	bne	1283c <main@@Base+0x1d4>
   127e4:	eor	r0, r8, #1
   127e8:	bl	122b4 <coda_set_option_bypass_special_types@plt>
   127ec:	mov	r0, r4
   127f0:	bl	121f4 <coda_set_option_perform_boundary_checks@plt>
   127f4:	mov	r0, sl
   127f8:	bl	1247c <coda_set_option_perform_conversions@plt>
   127fc:	bl	177ac <traverse_info_init@@Base>
   12800:	bl	15538 <dim_info_init@@Base>
   12804:	bl	17808 <traverse_product@@Base>
   12808:	bl	15558 <dim_info_done@@Base>
   1280c:	bl	177cc <traverse_info_done@@Base>
   12810:	bl	12398 <coda_done@plt>
   12814:	mov	r0, #0
   12818:	add	sp, sp, #28
   1281c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12820:	ldr	r2, [pc, #3380]	; 1355c <main@@Base+0xef4>
   12824:	mov	r1, #0
   12828:	ldr	r0, [r7]
   1282c:	bl	1229c <coda_set_definition_path_conditional@plt>
   12830:	cmp	r0, #0
   12834:	moveq	r4, #1
   12838:	beq	1272c <main@@Base+0xc4>
   1283c:	ldr	r3, [pc, #3356]	; 13560 <main@@Base+0xef8>
   12840:	ldr	r4, [r3]
   12844:	bl	125fc <coda_get_errno@plt>
   12848:	ldr	r0, [r0]
   1284c:	bl	125b4 <coda_errno_to_string@plt>
   12850:	ldr	r1, [pc, #3340]	; 13564 <main@@Base+0xefc>
   12854:	mov	r2, r0
   12858:	mov	r0, r4
   1285c:	bl	1244c <fprintf@plt>
   12860:	mov	r0, #1
   12864:	b	126b4 <main@@Base+0x4c>
   12868:	ldr	r6, [r7, r5, lsl #2]
   1286c:	ldr	r1, [pc, #3316]	; 13568 <main@@Base+0xf00>
   12870:	mov	r0, r6
   12874:	bl	12200 <strcmp@plt>
   12878:	lsl	r9, r5, #2
   1287c:	cmp	r0, #0
   12880:	beq	12898 <main@@Base+0x230>
   12884:	ldr	r1, [pc, #3296]	; 1356c <main@@Base+0xf04>
   12888:	mov	r0, r6
   1288c:	bl	12200 <strcmp@plt>
   12890:	cmp	r0, #0
   12894:	bne	128a8 <main@@Base+0x240>
   12898:	mov	r3, #1
   1289c:	str	r3, [fp]
   128a0:	add	r5, r5, #1
   128a4:	b	127b4 <main@@Base+0x14c>
   128a8:	ldr	r1, [pc, #3264]	; 13570 <main@@Base+0xf08>
   128ac:	mov	r0, r6
   128b0:	bl	12200 <strcmp@plt>
   128b4:	cmp	r0, #0
   128b8:	beq	12a2c <main@@Base+0x3c4>
   128bc:	ldr	r1, [pc, #3248]	; 13574 <main@@Base+0xf0c>
   128c0:	mov	r0, r6
   128c4:	bl	12200 <strcmp@plt>
   128c8:	cmp	r0, #0
   128cc:	beq	12a2c <main@@Base+0x3c4>
   128d0:	ldr	r1, [pc, #3232]	; 13578 <main@@Base+0xf10>
   128d4:	mov	r0, r6
   128d8:	bl	12200 <strcmp@plt>
   128dc:	cmp	r0, #0
   128e0:	beq	128f8 <main@@Base+0x290>
   128e4:	ldr	r1, [pc, #3216]	; 1357c <main@@Base+0xf14>
   128e8:	mov	r0, r6
   128ec:	bl	12200 <strcmp@plt>
   128f0:	cmp	r0, #0
   128f4:	bne	1294c <main@@Base+0x2e4>
   128f8:	add	r3, r5, #1
   128fc:	cmp	r4, r3
   12900:	str	r3, [sp, #20]
   12904:	ble	1294c <main@@Base+0x2e4>
   12908:	add	r9, r7, r9
   1290c:	ldr	r0, [r9, #4]
   12910:	ldrb	r2, [r0]
   12914:	cmp	r2, #45	; 0x2d
   12918:	beq	1294c <main@@Base+0x2e4>
   1291c:	bl	1638c <codadump_filter_create@@Base>
   12920:	ldr	r3, [pc, #3096]	; 13540 <main@@Base+0xed8>
   12924:	cmp	r0, #0
   12928:	str	r0, [r3, #664]	; 0x298
   1292c:	ldr	r3, [sp, #20]
   12930:	bne	12a34 <main@@Base+0x3cc>
   12934:	ldr	r3, [pc, #3108]	; 13560 <main@@Base+0xef8>
   12938:	ldr	r0, [pc, #3136]	; 13580 <main@@Base+0xf18>
   1293c:	ldr	r1, [r3]
   12940:	bl	12620 <fputs@plt>
   12944:	bl	18354 <print_yaml_data@@Base+0xd4>
   12948:	b	12860 <main@@Base+0x1f8>
   1294c:	ldr	r1, [pc, #3120]	; 13584 <main@@Base+0xf1c>
   12950:	mov	r0, r6
   12954:	bl	12200 <strcmp@plt>
   12958:	cmp	r0, #0
   1295c:	beq	12974 <main@@Base+0x30c>
   12960:	ldr	r1, [pc, #3104]	; 13588 <main@@Base+0xf20>
   12964:	mov	r0, r6
   12968:	bl	12200 <strcmp@plt>
   1296c:	cmp	r0, #0
   12970:	bne	12984 <main@@Base+0x31c>
   12974:	ldr	r2, [sp, #4]
   12978:	mov	r3, #1
   1297c:	str	r3, [r2]
   12980:	b	128a0 <main@@Base+0x238>
   12984:	ldr	r1, [pc, #3072]	; 1358c <main@@Base+0xf24>
   12988:	mov	r0, r6
   1298c:	bl	12200 <strcmp@plt>
   12990:	cmp	r0, #0
   12994:	beq	129ac <main@@Base+0x344>
   12998:	ldr	r1, [pc, #3056]	; 13590 <main@@Base+0xf28>
   1299c:	mov	r0, r6
   129a0:	bl	12200 <strcmp@plt>
   129a4:	cmp	r0, #0
   129a8:	bne	129b8 <main@@Base+0x350>
   129ac:	mov	r3, #1
   129b0:	ldr	r2, [sp, #8]
   129b4:	b	1297c <main@@Base+0x314>
   129b8:	ldr	r1, [pc, #3028]	; 13594 <main@@Base+0xf2c>
   129bc:	mov	r0, r6
   129c0:	bl	12200 <strcmp@plt>
   129c4:	cmp	r0, #0
   129c8:	moveq	r3, #1
   129cc:	ldreq	r2, [sp, #16]
   129d0:	beq	1297c <main@@Base+0x314>
   129d4:	ldr	r1, [pc, #3004]	; 13598 <main@@Base+0xf30>
   129d8:	mov	r0, r6
   129dc:	bl	12200 <strcmp@plt>
   129e0:	cmp	r0, #0
   129e4:	moveq	r3, #1
   129e8:	streq	r3, [fp]
   129ec:	ldreq	r2, [sp]
   129f0:	beq	1297c <main@@Base+0x314>
   129f4:	ldr	r1, [pc, #2976]	; 1359c <main@@Base+0xf34>
   129f8:	mov	r0, r6
   129fc:	bl	12200 <strcmp@plt>
   12a00:	cmp	r0, #0
   12a04:	beq	12a3c <main@@Base+0x3d4>
   12a08:	ldr	r3, [sp, #12]
   12a0c:	cmp	r5, r3
   12a10:	bne	1350c <main@@Base+0xea4>
   12a14:	ldrb	r3, [r6]
   12a18:	cmp	r3, #45	; 0x2d
   12a1c:	beq	1350c <main@@Base+0xea4>
   12a20:	ldr	r3, [pc, #2840]	; 13540 <main@@Base+0xed8>
   12a24:	str	r6, [r3]
   12a28:	b	128a0 <main@@Base+0x238>
   12a2c:	mov	sl, r0
   12a30:	b	128a0 <main@@Base+0x238>
   12a34:	mov	r5, r3
   12a38:	b	128a0 <main@@Base+0x238>
   12a3c:	mov	r8, r0
   12a40:	b	128a0 <main@@Base+0x238>
   12a44:	ldr	r1, [pc, #2900]	; 135a0 <main@@Base+0xf38>
   12a48:	mov	r0, fp
   12a4c:	bl	12200 <strcmp@plt>
   12a50:	ldr	r5, [pc, #2892]	; 135a4 <main@@Base+0xf3c>
   12a54:	ldr	r3, [pc, #2892]	; 135a8 <main@@Base+0xf40>
   12a58:	subs	r6, r0, #0
   12a5c:	bne	12ddc <main@@Base+0x774>
   12a60:	ldr	r2, [pc, #2776]	; 13540 <main@@Base+0xed8>
   12a64:	ldr	r0, [pc, #2880]	; 135ac <main@@Base+0xf44>
   12a68:	ldr	r3, [r3]
   12a6c:	str	r6, [r2]
   12a70:	str	r6, [r2, #664]	; 0x298
   12a74:	ldr	r2, [pc, #2868]	; 135b0 <main@@Base+0xf48>
   12a78:	mov	fp, #1
   12a7c:	str	r2, [r0]
   12a80:	ldr	r2, [pc, #2860]	; 135b4 <main@@Base+0xf4c>
   12a84:	ldr	ip, [pc, #2860]	; 135b8 <main@@Base+0xf50>
   12a88:	ldr	r1, [pc, #2860]	; 135bc <main@@Base+0xf54>
   12a8c:	str	r3, [r2]
   12a90:	ldr	r3, [pc, #2740]	; 1354c <main@@Base+0xee4>
   12a94:	ldr	r2, [pc, #2852]	; 135c0 <main@@Base+0xf58>
   12a98:	add	r7, r7, r8
   12a9c:	str	fp, [r3]
   12aa0:	ldr	r3, [pc, #2732]	; 13554 <main@@Base+0xeec>
   12aa4:	sub	r4, r9, r4
   12aa8:	mov	r8, fp
   12aac:	str	fp, [r3]
   12ab0:	ldr	r3, [pc, #2828]	; 135c4 <main@@Base+0xf5c>
   12ab4:	str	fp, [sl]
   12ab8:	str	r6, [r5]
   12abc:	str	r6, [ip]
   12ac0:	str	r6, [r1]
   12ac4:	str	r6, [r2]
   12ac8:	str	r6, [r3]
   12acc:	stm	sp, {r0, ip}
   12ad0:	str	r1, [sp, #8]
   12ad4:	str	r2, [sp, #12]
   12ad8:	str	r3, [sp, #16]
   12adc:	cmp	r4, r6
   12ae0:	bgt	12b64 <main@@Base+0x4fc>
   12ae4:	ldr	r3, [pc, #2644]	; 13540 <main@@Base+0xed8>
   12ae8:	ldr	r3, [r3]
   12aec:	cmp	r3, #0
   12af0:	beq	1350c <main@@Base+0xea4>
   12af4:	ldrb	r3, [r3]
   12af8:	cmp	r3, #0
   12afc:	beq	1350c <main@@Base+0xea4>
   12b00:	bl	12470 <coda_init@plt>
   12b04:	subs	r4, r0, #0
   12b08:	bne	1283c <main@@Base+0x1d4>
   12b0c:	eor	r0, r8, #1
   12b10:	bl	122b4 <coda_set_option_bypass_special_types@plt>
   12b14:	mov	r0, r4
   12b18:	bl	121f4 <coda_set_option_perform_boundary_checks@plt>
   12b1c:	mov	r0, fp
   12b20:	bl	1247c <coda_set_option_perform_conversions@plt>
   12b24:	bl	177ac <traverse_info_init@@Base>
   12b28:	bl	15538 <dim_info_init@@Base>
   12b2c:	ldr	r0, [r5]
   12b30:	cmp	r0, #0
   12b34:	beq	12dbc <main@@Base+0x754>
   12b38:	ldr	r1, [pc, #2696]	; 135c8 <main@@Base+0xf60>
   12b3c:	bl	12230 <fopen@plt>
   12b40:	ldr	r3, [pc, #2668]	; 135b4 <main@@Base+0xf4c>
   12b44:	cmp	r0, #0
   12b48:	str	r0, [r3]
   12b4c:	bne	12dbc <main@@Base+0x754>
   12b50:	ldr	r3, [pc, #2568]	; 13560 <main@@Base+0xef8>
   12b54:	ldr	r2, [r5]
   12b58:	ldr	r1, [pc, #2668]	; 135cc <main@@Base+0xf64>
   12b5c:	ldr	r0, [r3]
   12b60:	b	1285c <main@@Base+0x1f4>
   12b64:	ldr	sl, [r7, r6, lsl #2]
   12b68:	ldr	r1, [pc, #2560]	; 13570 <main@@Base+0xf08>
   12b6c:	mov	r0, sl
   12b70:	bl	12200 <strcmp@plt>
   12b74:	lsl	r9, r6, #2
   12b78:	cmp	r0, #0
   12b7c:	beq	12dac <main@@Base+0x744>
   12b80:	ldr	r1, [pc, #2540]	; 13574 <main@@Base+0xf0c>
   12b84:	mov	r0, sl
   12b88:	bl	12200 <strcmp@plt>
   12b8c:	cmp	r0, #0
   12b90:	beq	12dac <main@@Base+0x744>
   12b94:	ldr	r1, [pc, #2524]	; 13578 <main@@Base+0xf10>
   12b98:	mov	r0, sl
   12b9c:	bl	12200 <strcmp@plt>
   12ba0:	cmp	r0, #0
   12ba4:	beq	12bbc <main@@Base+0x554>
   12ba8:	ldr	r1, [pc, #2508]	; 1357c <main@@Base+0xf14>
   12bac:	mov	r0, sl
   12bb0:	bl	12200 <strcmp@plt>
   12bb4:	cmp	r0, #0
   12bb8:	bne	12c00 <main@@Base+0x598>
   12bbc:	add	r3, r6, #1
   12bc0:	cmp	r4, r3
   12bc4:	str	r3, [sp, #20]
   12bc8:	ble	12c00 <main@@Base+0x598>
   12bcc:	add	r2, r7, r9
   12bd0:	ldr	r0, [r2, #4]
   12bd4:	ldrb	r2, [r0]
   12bd8:	cmp	r2, #45	; 0x2d
   12bdc:	beq	12c00 <main@@Base+0x598>
   12be0:	bl	1638c <codadump_filter_create@@Base>
   12be4:	ldr	r3, [pc, #2388]	; 13540 <main@@Base+0xed8>
   12be8:	cmp	r0, #0
   12bec:	str	r0, [r3, #664]	; 0x298
   12bf0:	ldr	r3, [sp, #20]
   12bf4:	beq	12934 <main@@Base+0x2cc>
   12bf8:	mov	r6, r3
   12bfc:	b	12c34 <main@@Base+0x5cc>
   12c00:	ldr	r1, [pc, #2504]	; 135d0 <main@@Base+0xf68>
   12c04:	mov	r0, sl
   12c08:	bl	12200 <strcmp@plt>
   12c0c:	cmp	r0, #0
   12c10:	beq	12c28 <main@@Base+0x5c0>
   12c14:	ldr	r1, [pc, #2488]	; 135d4 <main@@Base+0xf6c>
   12c18:	mov	r0, sl
   12c1c:	bl	12200 <strcmp@plt>
   12c20:	cmp	r0, #0
   12c24:	bne	12c3c <main@@Base+0x5d4>
   12c28:	ldr	r2, [sp, #4]
   12c2c:	mov	r3, #1
   12c30:	str	r3, [r2]
   12c34:	add	r6, r6, #1
   12c38:	b	12adc <main@@Base+0x474>
   12c3c:	ldr	r1, [pc, #2452]	; 135d8 <main@@Base+0xf70>
   12c40:	mov	r0, sl
   12c44:	bl	12200 <strcmp@plt>
   12c48:	cmp	r0, #0
   12c4c:	beq	12c64 <main@@Base+0x5fc>
   12c50:	ldr	r1, [pc, #2436]	; 135dc <main@@Base+0xf74>
   12c54:	mov	r0, sl
   12c58:	bl	12200 <strcmp@plt>
   12c5c:	cmp	r0, #0
   12c60:	bne	12c70 <main@@Base+0x608>
   12c64:	mov	r3, #1
   12c68:	ldr	r2, [sp, #8]
   12c6c:	b	12c30 <main@@Base+0x5c8>
   12c70:	ldr	r1, [pc, #2408]	; 135e0 <main@@Base+0xf78>
   12c74:	mov	r0, sl
   12c78:	bl	12200 <strcmp@plt>
   12c7c:	cmp	r0, #0
   12c80:	beq	12c98 <main@@Base+0x630>
   12c84:	ldr	r1, [pc, #2392]	; 135e4 <main@@Base+0xf7c>
   12c88:	mov	r0, sl
   12c8c:	bl	12200 <strcmp@plt>
   12c90:	cmp	r0, #0
   12c94:	bne	12cbc <main@@Base+0x654>
   12c98:	add	r3, r6, #1
   12c9c:	cmp	r4, r3
   12ca0:	ble	12cbc <main@@Base+0x654>
   12ca4:	add	r2, r7, r9
   12ca8:	ldr	r2, [r2, #4]
   12cac:	ldrb	r1, [r2]
   12cb0:	cmp	r1, #45	; 0x2d
   12cb4:	strne	r2, [r5]
   12cb8:	bne	12bf8 <main@@Base+0x590>
   12cbc:	ldr	r1, [pc, #2340]	; 135e8 <main@@Base+0xf80>
   12cc0:	mov	r0, sl
   12cc4:	bl	12200 <strcmp@plt>
   12cc8:	cmp	r0, #0
   12ccc:	beq	12ce4 <main@@Base+0x67c>
   12cd0:	ldr	r1, [pc, #2324]	; 135ec <main@@Base+0xf84>
   12cd4:	mov	r0, sl
   12cd8:	bl	12200 <strcmp@plt>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12cf0 <main@@Base+0x688>
   12ce4:	mov	r3, #1
   12ce8:	ldr	r2, [sp, #12]
   12cec:	b	12c30 <main@@Base+0x5c8>
   12cf0:	ldr	r1, [pc, #2296]	; 135f0 <main@@Base+0xf88>
   12cf4:	mov	r0, sl
   12cf8:	bl	12200 <strcmp@plt>
   12cfc:	cmp	r0, #0
   12d00:	beq	12d18 <main@@Base+0x6b0>
   12d04:	ldr	r1, [pc, #2280]	; 135f4 <main@@Base+0xf8c>
   12d08:	mov	r0, sl
   12d0c:	bl	12200 <strcmp@plt>
   12d10:	cmp	r0, #0
   12d14:	bne	12d40 <main@@Base+0x6d8>
   12d18:	add	r3, r6, #1
   12d1c:	cmp	r4, r3
   12d20:	ble	12d40 <main@@Base+0x6d8>
   12d24:	add	r9, r7, r9
   12d28:	ldr	r2, [r9, #4]
   12d2c:	ldrb	r1, [r2]
   12d30:	cmp	r1, #45	; 0x2d
   12d34:	ldrne	r1, [sp]
   12d38:	strne	r2, [r1]
   12d3c:	bne	12bf8 <main@@Base+0x590>
   12d40:	ldr	r1, [pc, #2108]	; 13584 <main@@Base+0xf1c>
   12d44:	mov	r0, sl
   12d48:	bl	12200 <strcmp@plt>
   12d4c:	cmp	r0, #0
   12d50:	beq	12d68 <main@@Base+0x700>
   12d54:	ldr	r1, [pc, #2204]	; 135f8 <main@@Base+0xf90>
   12d58:	mov	r0, sl
   12d5c:	bl	12200 <strcmp@plt>
   12d60:	cmp	r0, #0
   12d64:	bne	12d74 <main@@Base+0x70c>
   12d68:	mov	r3, #1
   12d6c:	ldr	r2, [sp, #16]
   12d70:	b	12c30 <main@@Base+0x5c8>
   12d74:	ldr	r1, [pc, #2080]	; 1359c <main@@Base+0xf34>
   12d78:	mov	r0, sl
   12d7c:	bl	12200 <strcmp@plt>
   12d80:	cmp	r0, #0
   12d84:	beq	12db4 <main@@Base+0x74c>
   12d88:	sub	r3, r4, #1
   12d8c:	cmp	r6, r3
   12d90:	bne	1350c <main@@Base+0xea4>
   12d94:	ldrb	r3, [sl]
   12d98:	cmp	r3, #45	; 0x2d
   12d9c:	beq	1350c <main@@Base+0xea4>
   12da0:	ldr	r3, [pc, #1944]	; 13540 <main@@Base+0xed8>
   12da4:	str	sl, [r3]
   12da8:	b	12c34 <main@@Base+0x5cc>
   12dac:	mov	fp, r0
   12db0:	b	12c34 <main@@Base+0x5cc>
   12db4:	mov	r8, r0
   12db8:	b	12c34 <main@@Base+0x5cc>
   12dbc:	bl	17808 <traverse_product@@Base>
   12dc0:	ldr	r3, [r5]
   12dc4:	cmp	r3, #0
   12dc8:	beq	12808 <main@@Base+0x1a0>
   12dcc:	ldr	r3, [pc, #2016]	; 135b4 <main@@Base+0xf4c>
   12dd0:	ldr	r0, [r3]
   12dd4:	bl	124f4 <fclose@plt>
   12dd8:	b	12808 <main@@Base+0x1a0>
   12ddc:	ldr	r1, [pc, #2072]	; 135fc <main@@Base+0xf94>
   12de0:	mov	r0, fp
   12de4:	str	r3, [sp]
   12de8:	bl	12200 <strcmp@plt>
   12dec:	ldr	r3, [sp]
   12df0:	subs	r6, r0, #0
   12df4:	bne	1302c <main@@Base+0x9c4>
   12df8:	mov	r2, #3
   12dfc:	str	r2, [sl]
   12e00:	add	r2, r7, r8
   12e04:	str	r2, [sp]
   12e08:	ldr	r2, [pc, #1840]	; 13540 <main@@Base+0xed8>
   12e0c:	ldr	r3, [r3]
   12e10:	sub	r4, r9, r4
   12e14:	str	r6, [r2]
   12e18:	ldr	r2, [pc, #2016]	; 13600 <main@@Base+0xf98>
   12e1c:	mov	r8, r6
   12e20:	mov	fp, r6
   12e24:	str	r6, [r2]
   12e28:	ldr	r2, [pc, #1924]	; 135b4 <main@@Base+0xf4c>
   12e2c:	mov	r9, #1
   12e30:	str	r6, [r5]
   12e34:	str	r3, [r2]
   12e38:	sub	r3, r4, #1
   12e3c:	str	r9, [sp, #4]
   12e40:	str	r3, [sp, #8]
   12e44:	cmp	r4, r8
   12e48:	bgt	12ed0 <main@@Base+0x868>
   12e4c:	ldr	r3, [pc, #1772]	; 13540 <main@@Base+0xed8>
   12e50:	ldr	r3, [r3]
   12e54:	cmp	r3, #0
   12e58:	beq	1350c <main@@Base+0xea4>
   12e5c:	ldrb	r3, [r3]
   12e60:	cmp	r3, #0
   12e64:	beq	1350c <main@@Base+0xea4>
   12e68:	bl	12470 <coda_init@plt>
   12e6c:	cmp	r0, #0
   12e70:	bne	1283c <main@@Base+0x1d4>
   12e74:	ldr	r3, [sp, #4]
   12e78:	eor	r0, r3, #1
   12e7c:	bl	122b4 <coda_set_option_bypass_special_types@plt>
   12e80:	mov	r0, r9
   12e84:	bl	1247c <coda_set_option_perform_conversions@plt>
   12e88:	ldr	r0, [r5]
   12e8c:	cmp	r0, #0
   12e90:	beq	12eac <main@@Base+0x844>
   12e94:	ldr	r1, [pc, #1836]	; 135c8 <main@@Base+0xf60>
   12e98:	bl	12230 <fopen@plt>
   12e9c:	ldr	r3, [pc, #1808]	; 135b4 <main@@Base+0xf4c>
   12ea0:	cmp	r0, #0
   12ea4:	str	r0, [r3]
   12ea8:	beq	12b50 <main@@Base+0x4e8>
   12eac:	mov	r0, r6
   12eb0:	bl	16d10 <print_json_data@@Base>
   12eb4:	ldr	r3, [r5]
   12eb8:	cmp	r3, #0
   12ebc:	beq	12810 <main@@Base+0x1a8>
   12ec0:	ldr	r3, [pc, #1772]	; 135b4 <main@@Base+0xf4c>
   12ec4:	ldr	r0, [r3]
   12ec8:	bl	124f4 <fclose@plt>
   12ecc:	b	12810 <main@@Base+0x1a8>
   12ed0:	ldr	r3, [sp]
   12ed4:	ldr	r1, [pc, #1832]	; 13604 <main@@Base+0xf9c>
   12ed8:	lsl	sl, r8, #2
   12edc:	ldr	r7, [r3, r8, lsl #2]
   12ee0:	mov	r0, r7
   12ee4:	bl	12200 <strcmp@plt>
   12ee8:	cmp	r0, #0
   12eec:	beq	13014 <main@@Base+0x9ac>
   12ef0:	ldr	r1, [pc, #1808]	; 13608 <main@@Base+0xfa0>
   12ef4:	mov	r0, r7
   12ef8:	bl	12200 <strcmp@plt>
   12efc:	cmp	r0, #0
   12f00:	beq	13014 <main@@Base+0x9ac>
   12f04:	ldr	r1, [pc, #1636]	; 13570 <main@@Base+0xf08>
   12f08:	mov	r0, r7
   12f0c:	bl	12200 <strcmp@plt>
   12f10:	cmp	r0, #0
   12f14:	beq	1301c <main@@Base+0x9b4>
   12f18:	ldr	r1, [pc, #1620]	; 13574 <main@@Base+0xf0c>
   12f1c:	mov	r0, r7
   12f20:	bl	12200 <strcmp@plt>
   12f24:	cmp	r0, #0
   12f28:	beq	1301c <main@@Base+0x9b4>
   12f2c:	ldr	r1, [pc, #1708]	; 135e0 <main@@Base+0xf78>
   12f30:	mov	r0, r7
   12f34:	bl	12200 <strcmp@plt>
   12f38:	cmp	r0, #0
   12f3c:	beq	12f54 <main@@Base+0x8ec>
   12f40:	ldr	r1, [pc, #1692]	; 135e4 <main@@Base+0xf7c>
   12f44:	mov	r0, r7
   12f48:	bl	12200 <strcmp@plt>
   12f4c:	cmp	r0, #0
   12f50:	bne	12f7c <main@@Base+0x914>
   12f54:	add	r3, r8, #1
   12f58:	cmp	r4, r3
   12f5c:	ble	12f7c <main@@Base+0x914>
   12f60:	ldr	r2, [sp]
   12f64:	add	r2, r2, sl
   12f68:	ldr	r2, [r2, #4]
   12f6c:	ldrb	r1, [r2]
   12f70:	cmp	r1, #45	; 0x2d
   12f74:	strne	r2, [r5]
   12f78:	bne	12fd0 <main@@Base+0x968>
   12f7c:	ldr	r1, [pc, #1672]	; 1360c <main@@Base+0xfa4>
   12f80:	mov	r0, r7
   12f84:	bl	12200 <strcmp@plt>
   12f88:	cmp	r0, #0
   12f8c:	beq	12fa4 <main@@Base+0x93c>
   12f90:	ldr	r1, [pc, #1656]	; 13610 <main@@Base+0xfa8>
   12f94:	mov	r0, r7
   12f98:	bl	12200 <strcmp@plt>
   12f9c:	cmp	r0, #0
   12fa0:	bne	12fdc <main@@Base+0x974>
   12fa4:	add	r3, r8, #1
   12fa8:	cmp	r4, r3
   12fac:	ble	12fdc <main@@Base+0x974>
   12fb0:	ldr	r2, [sp]
   12fb4:	add	sl, r2, sl
   12fb8:	ldr	r2, [sl, #4]
   12fbc:	ldrb	r1, [r2]
   12fc0:	cmp	r1, #45	; 0x2d
   12fc4:	beq	12fdc <main@@Base+0x974>
   12fc8:	ldr	r1, [pc, #1584]	; 13600 <main@@Base+0xf98>
   12fcc:	str	r2, [r1]
   12fd0:	mov	r8, r3
   12fd4:	add	r8, r8, #1
   12fd8:	b	12e44 <main@@Base+0x7dc>
   12fdc:	ldr	r1, [pc, #1464]	; 1359c <main@@Base+0xf34>
   12fe0:	mov	r0, r7
   12fe4:	bl	12200 <strcmp@plt>
   12fe8:	cmp	r0, #0
   12fec:	beq	13024 <main@@Base+0x9bc>
   12ff0:	ldr	r3, [sp, #8]
   12ff4:	cmp	r8, r3
   12ff8:	bne	1350c <main@@Base+0xea4>
   12ffc:	ldrb	r3, [r7]
   13000:	cmp	r3, #45	; 0x2d
   13004:	beq	1350c <main@@Base+0xea4>
   13008:	ldr	r3, [pc, #1328]	; 13540 <main@@Base+0xed8>
   1300c:	str	r7, [r3]
   13010:	b	12fd4 <main@@Base+0x96c>
   13014:	mov	r6, #1
   13018:	b	12fd4 <main@@Base+0x96c>
   1301c:	mov	r9, fp
   13020:	b	12fd4 <main@@Base+0x96c>
   13024:	str	fp, [sp, #4]
   13028:	b	12fd4 <main@@Base+0x96c>
   1302c:	ldr	r1, [pc, #1504]	; 13614 <main@@Base+0xfac>
   13030:	mov	r0, fp
   13034:	str	r3, [sp]
   13038:	bl	12200 <strcmp@plt>
   1303c:	ldr	r3, [sp]
   13040:	subs	r6, r0, #0
   13044:	bne	13264 <main@@Base+0xbfc>
   13048:	mov	r2, #4
   1304c:	str	r2, [sl]
   13050:	add	r2, r7, r8
   13054:	str	r2, [sp]
   13058:	ldr	r2, [pc, #1248]	; 13540 <main@@Base+0xed8>
   1305c:	ldr	r3, [r3]
   13060:	sub	r4, r9, r4
   13064:	str	r6, [r2]
   13068:	ldr	r2, [pc, #1424]	; 13600 <main@@Base+0xf98>
   1306c:	mov	r8, r6
   13070:	mov	fp, r6
   13074:	str	r6, [r2]
   13078:	ldr	r2, [pc, #1332]	; 135b4 <main@@Base+0xf4c>
   1307c:	mov	r9, #1
   13080:	str	r6, [r5]
   13084:	str	r3, [r2]
   13088:	sub	r3, r4, #1
   1308c:	str	r9, [sp, #4]
   13090:	str	r3, [sp, #8]
   13094:	cmp	r4, r8
   13098:	bgt	13108 <main@@Base+0xaa0>
   1309c:	ldr	r3, [pc, #1180]	; 13540 <main@@Base+0xed8>
   130a0:	ldr	r3, [r3]
   130a4:	cmp	r3, #0
   130a8:	beq	1350c <main@@Base+0xea4>
   130ac:	ldrb	r3, [r3]
   130b0:	cmp	r3, #0
   130b4:	beq	1350c <main@@Base+0xea4>
   130b8:	bl	12470 <coda_init@plt>
   130bc:	cmp	r0, #0
   130c0:	bne	1283c <main@@Base+0x1d4>
   130c4:	ldr	r3, [sp, #4]
   130c8:	eor	r0, r3, #1
   130cc:	bl	122b4 <coda_set_option_bypass_special_types@plt>
   130d0:	mov	r0, r9
   130d4:	bl	1247c <coda_set_option_perform_conversions@plt>
   130d8:	ldr	r0, [r5]
   130dc:	cmp	r0, #0
   130e0:	beq	130fc <main@@Base+0xa94>
   130e4:	ldr	r1, [pc, #1244]	; 135c8 <main@@Base+0xf60>
   130e8:	bl	12230 <fopen@plt>
   130ec:	ldr	r3, [pc, #1216]	; 135b4 <main@@Base+0xf4c>
   130f0:	cmp	r0, #0
   130f4:	str	r0, [r3]
   130f8:	beq	12b50 <main@@Base+0x4e8>
   130fc:	mov	r0, r6
   13100:	bl	18280 <print_yaml_data@@Base>
   13104:	b	12eb4 <main@@Base+0x84c>
   13108:	ldr	r3, [sp]
   1310c:	ldr	r1, [pc, #1264]	; 13604 <main@@Base+0xf9c>
   13110:	lsl	sl, r8, #2
   13114:	ldr	r7, [r3, r8, lsl #2]
   13118:	mov	r0, r7
   1311c:	bl	12200 <strcmp@plt>
   13120:	cmp	r0, #0
   13124:	beq	1324c <main@@Base+0xbe4>
   13128:	ldr	r1, [pc, #1240]	; 13608 <main@@Base+0xfa0>
   1312c:	mov	r0, r7
   13130:	bl	12200 <strcmp@plt>
   13134:	cmp	r0, #0
   13138:	beq	1324c <main@@Base+0xbe4>
   1313c:	ldr	r1, [pc, #1068]	; 13570 <main@@Base+0xf08>
   13140:	mov	r0, r7
   13144:	bl	12200 <strcmp@plt>
   13148:	cmp	r0, #0
   1314c:	beq	13254 <main@@Base+0xbec>
   13150:	ldr	r1, [pc, #1052]	; 13574 <main@@Base+0xf0c>
   13154:	mov	r0, r7
   13158:	bl	12200 <strcmp@plt>
   1315c:	cmp	r0, #0
   13160:	beq	13254 <main@@Base+0xbec>
   13164:	ldr	r1, [pc, #1140]	; 135e0 <main@@Base+0xf78>
   13168:	mov	r0, r7
   1316c:	bl	12200 <strcmp@plt>
   13170:	cmp	r0, #0
   13174:	beq	1318c <main@@Base+0xb24>
   13178:	ldr	r1, [pc, #1124]	; 135e4 <main@@Base+0xf7c>
   1317c:	mov	r0, r7
   13180:	bl	12200 <strcmp@plt>
   13184:	cmp	r0, #0
   13188:	bne	131b4 <main@@Base+0xb4c>
   1318c:	add	r3, r8, #1
   13190:	cmp	r4, r3
   13194:	ble	131b4 <main@@Base+0xb4c>
   13198:	ldr	r2, [sp]
   1319c:	add	r2, r2, sl
   131a0:	ldr	r2, [r2, #4]
   131a4:	ldrb	r1, [r2]
   131a8:	cmp	r1, #45	; 0x2d
   131ac:	strne	r2, [r5]
   131b0:	bne	13208 <main@@Base+0xba0>
   131b4:	ldr	r1, [pc, #1104]	; 1360c <main@@Base+0xfa4>
   131b8:	mov	r0, r7
   131bc:	bl	12200 <strcmp@plt>
   131c0:	cmp	r0, #0
   131c4:	beq	131dc <main@@Base+0xb74>
   131c8:	ldr	r1, [pc, #1088]	; 13610 <main@@Base+0xfa8>
   131cc:	mov	r0, r7
   131d0:	bl	12200 <strcmp@plt>
   131d4:	cmp	r0, #0
   131d8:	bne	13214 <main@@Base+0xbac>
   131dc:	add	r3, r8, #1
   131e0:	cmp	r4, r3
   131e4:	ble	13214 <main@@Base+0xbac>
   131e8:	ldr	r2, [sp]
   131ec:	add	sl, r2, sl
   131f0:	ldr	r2, [sl, #4]
   131f4:	ldrb	r1, [r2]
   131f8:	cmp	r1, #45	; 0x2d
   131fc:	beq	13214 <main@@Base+0xbac>
   13200:	ldr	r1, [pc, #1016]	; 13600 <main@@Base+0xf98>
   13204:	str	r2, [r1]
   13208:	mov	r8, r3
   1320c:	add	r8, r8, #1
   13210:	b	13094 <main@@Base+0xa2c>
   13214:	ldr	r1, [pc, #896]	; 1359c <main@@Base+0xf34>
   13218:	mov	r0, r7
   1321c:	bl	12200 <strcmp@plt>
   13220:	cmp	r0, #0
   13224:	beq	1325c <main@@Base+0xbf4>
   13228:	ldr	r3, [sp, #8]
   1322c:	cmp	r8, r3
   13230:	bne	1350c <main@@Base+0xea4>
   13234:	ldrb	r3, [r7]
   13238:	cmp	r3, #45	; 0x2d
   1323c:	beq	1350c <main@@Base+0xea4>
   13240:	ldr	r3, [pc, #760]	; 13540 <main@@Base+0xed8>
   13244:	str	r7, [r3]
   13248:	b	1320c <main@@Base+0xba4>
   1324c:	mov	r6, #1
   13250:	b	1320c <main@@Base+0xba4>
   13254:	mov	r9, fp
   13258:	b	1320c <main@@Base+0xba4>
   1325c:	str	fp, [sp, #4]
   13260:	b	1320c <main@@Base+0xba4>
   13264:	ldr	r1, [pc, #940]	; 13618 <main@@Base+0xfb0>
   13268:	mov	r0, fp
   1326c:	str	r3, [sp]
   13270:	bl	12200 <strcmp@plt>
   13274:	subs	r6, r0, #0
   13278:	bne	1350c <main@@Base+0xea4>
   1327c:	ldr	r3, [pc, #700]	; 13540 <main@@Base+0xed8>
   13280:	mov	r2, #5
   13284:	str	r2, [sl]
   13288:	str	r6, [r3]
   1328c:	ldr	r3, [pc, #876]	; 13600 <main@@Base+0xf98>
   13290:	ldr	r2, [pc, #796]	; 135b4 <main@@Base+0xf4c>
   13294:	sub	r4, r9, r4
   13298:	str	r6, [r3]
   1329c:	ldr	r3, [sp]
   132a0:	add	r7, r7, r8
   132a4:	mov	fp, #1
   132a8:	ldr	r3, [r3]
   132ac:	mov	r8, r6
   132b0:	str	r3, [r2]
   132b4:	sub	r3, r4, #1
   132b8:	str	r3, [sp, #8]
   132bc:	ldr	r3, [pc, #828]	; 13600 <main@@Base+0xf98>
   132c0:	str	r6, [r5]
   132c4:	str	r6, [sp, #4]
   132c8:	str	r6, [sp]
   132cc:	str	r3, [sp, #12]
   132d0:	cmp	r4, r8
   132d4:	bgt	13340 <main@@Base+0xcd8>
   132d8:	ldr	r3, [pc, #608]	; 13540 <main@@Base+0xed8>
   132dc:	ldr	r3, [r3]
   132e0:	cmp	r3, #0
   132e4:	beq	1350c <main@@Base+0xea4>
   132e8:	ldrb	r3, [r3]
   132ec:	cmp	r3, #0
   132f0:	beq	1350c <main@@Base+0xea4>
   132f4:	bl	12470 <coda_init@plt>
   132f8:	cmp	r0, #0
   132fc:	bne	1283c <main@@Base+0x1d4>
   13300:	bl	1247c <coda_set_option_perform_conversions@plt>
   13304:	mov	r0, fp
   13308:	bl	121d0 <coda_set_option_use_fast_size_expressions@plt>
   1330c:	ldr	r0, [r5]
   13310:	cmp	r0, #0
   13314:	beq	13330 <main@@Base+0xcc8>
   13318:	ldr	r1, [pc, #680]	; 135c8 <main@@Base+0xf60>
   1331c:	bl	12230 <fopen@plt>
   13320:	ldr	r3, [pc, #652]	; 135b4 <main@@Base+0xf4c>
   13324:	cmp	r0, #0
   13328:	str	r0, [r3]
   1332c:	beq	12b50 <main@@Base+0x4e8>
   13330:	mov	r2, r6
   13334:	ldm	sp, {r0, r1}
   13338:	bl	14db4 <print_debug_data@@Base>
   1333c:	b	12eb4 <main@@Base+0x84c>
   13340:	ldr	r9, [r7, r8, lsl #2]
   13344:	ldr	r1, [pc, #548]	; 13570 <main@@Base+0xf08>
   13348:	mov	r0, r9
   1334c:	bl	12200 <strcmp@plt>
   13350:	lsl	sl, r8, #2
   13354:	cmp	r0, #0
   13358:	beq	13504 <main@@Base+0xe9c>
   1335c:	ldr	r1, [pc, #696]	; 1361c <main@@Base+0xfb4>
   13360:	mov	r0, r9
   13364:	bl	12200 <strcmp@plt>
   13368:	cmp	r0, #0
   1336c:	beq	13504 <main@@Base+0xe9c>
   13370:	ldr	r1, [pc, #616]	; 135e0 <main@@Base+0xf78>
   13374:	mov	r0, r9
   13378:	bl	12200 <strcmp@plt>
   1337c:	cmp	r0, #0
   13380:	beq	13398 <main@@Base+0xd30>
   13384:	ldr	r1, [pc, #600]	; 135e4 <main@@Base+0xf7c>
   13388:	mov	r0, r9
   1338c:	bl	12200 <strcmp@plt>
   13390:	cmp	r0, #0
   13394:	bne	133bc <main@@Base+0xd54>
   13398:	add	r3, r8, #1
   1339c:	cmp	r4, r3
   133a0:	ble	133bc <main@@Base+0xd54>
   133a4:	add	r2, r7, sl
   133a8:	ldr	r2, [r2, #4]
   133ac:	ldrb	r1, [r2]
   133b0:	cmp	r1, #45	; 0x2d
   133b4:	strne	r2, [r5]
   133b8:	bne	1340c <main@@Base+0xda4>
   133bc:	ldr	r1, [pc, #584]	; 1360c <main@@Base+0xfa4>
   133c0:	mov	r0, r9
   133c4:	bl	12200 <strcmp@plt>
   133c8:	cmp	r0, #0
   133cc:	beq	133e4 <main@@Base+0xd7c>
   133d0:	ldr	r1, [pc, #568]	; 13610 <main@@Base+0xfa8>
   133d4:	mov	r0, r9
   133d8:	bl	12200 <strcmp@plt>
   133dc:	cmp	r0, #0
   133e0:	bne	13418 <main@@Base+0xdb0>
   133e4:	add	r3, r8, #1
   133e8:	cmp	r4, r3
   133ec:	ble	13418 <main@@Base+0xdb0>
   133f0:	add	r2, r7, sl
   133f4:	ldr	r2, [r2, #4]
   133f8:	ldrb	r1, [r2]
   133fc:	cmp	r1, #45	; 0x2d
   13400:	beq	13418 <main@@Base+0xdb0>
   13404:	ldr	r1, [sp, #12]
   13408:	str	r2, [r1]
   1340c:	mov	r8, r3
   13410:	add	r8, r8, #1
   13414:	b	132d0 <main@@Base+0xc68>
   13418:	ldr	r1, [pc, #512]	; 13620 <main@@Base+0xfb8>
   1341c:	mov	r0, r9
   13420:	bl	12200 <strcmp@plt>
   13424:	cmp	r0, #0
   13428:	bne	13464 <main@@Base+0xdfc>
   1342c:	add	r3, r8, #1
   13430:	cmp	r4, r3
   13434:	str	r3, [sp, #16]
   13438:	ble	13464 <main@@Base+0xdfc>
   1343c:	add	r2, r7, sl
   13440:	ldr	r0, [r2, #4]
   13444:	ldrb	r2, [r0]
   13448:	cmp	r2, #45	; 0x2d
   1344c:	beq	13464 <main@@Base+0xdfc>
   13450:	bl	125a8 <atoi@plt>
   13454:	ldr	r3, [pc, #456]	; 13624 <main@@Base+0xfbc>
   13458:	str	r0, [r3]
   1345c:	ldr	r3, [sp, #16]
   13460:	b	1340c <main@@Base+0xda4>
   13464:	ldr	r1, [pc, #444]	; 13628 <main@@Base+0xfc0>
   13468:	mov	r0, r9
   1346c:	bl	12200 <strcmp@plt>
   13470:	cmp	r0, #0
   13474:	bne	134e0 <main@@Base+0xe78>
   13478:	add	r2, r8, #3
   1347c:	cmp	r4, r2
   13480:	str	r2, [sp, #20]
   13484:	ble	134e0 <main@@Base+0xe78>
   13488:	add	r1, r7, sl
   1348c:	ldr	sl, [r1, #4]
   13490:	ldrb	r3, [sl]
   13494:	cmp	r3, #45	; 0x2d
   13498:	beq	134e0 <main@@Base+0xe78>
   1349c:	ldr	r3, [r1, #8]
   134a0:	str	r3, [sp, #16]
   134a4:	ldrb	r0, [r3]
   134a8:	cmp	r0, #45	; 0x2d
   134ac:	beq	134e0 <main@@Base+0xe78>
   134b0:	ldr	r0, [r1, #12]
   134b4:	ldrb	r1, [r0]
   134b8:	cmp	r1, #45	; 0x2d
   134bc:	beq	134e0 <main@@Base+0xe78>
   134c0:	bl	125a8 <atoi@plt>
   134c4:	ldr	r2, [sp, #20]
   134c8:	ldr	r3, [sp, #16]
   134cc:	mov	r8, r2
   134d0:	str	r3, [sp, #4]
   134d4:	str	sl, [sp]
   134d8:	mov	r6, r0
   134dc:	b	13410 <main@@Base+0xda8>
   134e0:	ldr	r3, [sp, #8]
   134e4:	cmp	r8, r3
   134e8:	bne	1350c <main@@Base+0xea4>
   134ec:	ldrb	r3, [r9]
   134f0:	cmp	r3, #45	; 0x2d
   134f4:	beq	1350c <main@@Base+0xea4>
   134f8:	ldr	r3, [pc, #64]	; 13540 <main@@Base+0xed8>
   134fc:	str	r9, [r3]
   13500:	b	13410 <main@@Base+0xda8>
   13504:	mov	fp, #0
   13508:	b	13410 <main@@Base+0xda8>
   1350c:	ldr	r3, [pc, #76]	; 13560 <main@@Base+0xef8>
   13510:	ldr	r0, [pc, #276]	; 1362c <main@@Base+0xfc4>
   13514:	ldr	r1, [r3]
   13518:	b	12940 <main@@Base+0x2d8>
   1351c:	muleq	r1, lr, r1
   13520:	andeq	r9, r1, lr, asr #30
   13524:	andeq	sl, r1, r1, lsr #3
   13528:	andeq	r9, r1, r4, lsl #31
   1352c:	andeq	sl, r1, r4, lsr #3
   13530:			; <UNDEFINED> instruction: 0x0001a1b9
   13534:	andeq	sl, r1, r9, ror #3
   13538:	andeq	sl, r1, r6, lsl #4
   1353c:	andeq	ip, r2, ip, lsr #1
   13540:	strdeq	fp, [r2], -r0
   13544:	andeq	fp, r2, r8, ror #3
   13548:	ldrdeq	fp, [r2], -ip
   1354c:	ldrdeq	fp, [r2], -r8
   13550:	andeq	ip, r2, r0, lsr #1
   13554:	andeq	fp, r2, ip, ror #3
   13558:	andeq	ip, r2, r4, lsr #1
   1355c:	andeq	sl, r1, ip, ror #3
   13560:			; <UNDEFINED> instruction: 0x0002b1b8
   13564:	muleq	r1, r3, r1
   13568:	andeq	sl, r1, fp, lsl #4
   1356c:	andeq	r9, r1, r2, lsl #6
   13570:	andeq	sl, r1, lr, lsl #4
   13574:	andeq	r9, r1, r4, asr r3
   13578:	andeq	sl, r1, r1, lsl r2
   1357c:	andeq	sl, r1, r4, lsl r2
   13580:	andeq	sl, r1, sp, lsl r2
   13584:	andeq	sl, r1, r6, asr #4
   13588:	andeq	r9, r1, fp, lsr #8
   1358c:	andeq	sl, r1, r9, asr #4
   13590:	andeq	r9, r1, fp, ror #8
   13594:	andeq	r9, r1, r8, lsr #9
   13598:	strdeq	r9, [r1], -r3
   1359c:	andeq	r9, r1, fp, ror r5
   135a0:	andeq	sl, r1, r6, ror #4
   135a4:	andeq	fp, r2, r0, ror #3
   135a8:			; <UNDEFINED> instruction: 0x0002b1bc
   135ac:	muleq	r2, ip, r0
   135b0:	andeq	r8, r1, sl, lsr ip
   135b4:	muleq	r2, r8, r0
   135b8:	andeq	ip, r2, r8, lsr #1
   135bc:	andeq	ip, r2, r8, lsr #4
   135c0:	andeq	ip, r2, ip, lsr #4
   135c4:	andeq	fp, r2, r4, ror #3
   135c8:	muleq	r1, r7, r2
   135cc:	muleq	r1, r9, r2
   135d0:	andeq	sl, r1, ip, ror #4
   135d4:	ldrdeq	r9, [r1], -lr
   135d8:	andeq	sl, r1, pc, ror #4
   135dc:	andeq	r9, r1, r7, lsr r7
   135e0:	andeq	sl, r1, r2, ror r2
   135e4:	andeq	sl, r1, r5, ror r2
   135e8:	andeq	sl, r1, lr, ror r2
   135ec:	strdeq	r9, [r1], -r1
   135f0:	andeq	sl, r1, r1, lsl #5
   135f4:	andeq	sl, r1, r4, lsl #5
   135f8:	andeq	r9, r1, r0, ror #17
   135fc:	andeq	sl, r1, r3, asr #5
   13600:	strheq	ip, [r2], -r0
   13604:	andeq	sl, r1, r8, asr #5
   13608:	andeq	r9, r1, r8, ror #19
   1360c:	andeq	sl, r1, fp, asr #5
   13610:	andeq	sl, r1, lr, asr #5
   13614:	ldrdeq	sl, [r1], -r5
   13618:	andeq	r9, r1, r9, asr #25
   1361c:	andeq	r9, r1, lr, ror #26
   13620:	ldrdeq	sl, [r1], -sl	; <UNPREDICTABLE>
   13624:			; <UNDEFINED> instruction: 0x0002b1b0
   13628:	andeq	sl, r1, r6, ror #5
   1362c:	andeq	sl, r1, ip, asr #4

00013630 <_start@@Base>:
   13630:	mov	fp, #0
   13634:	mov	lr, #0
   13638:	pop	{r1}		; (ldr r1, [sp], #4)
   1363c:	mov	r2, sp
   13640:	push	{r2}		; (str r2, [sp, #-4]!)
   13644:	push	{r0}		; (str r0, [sp, #-4]!)
   13648:	ldr	ip, [pc, #16]	; 13660 <_start@@Base+0x30>
   1364c:	push	{ip}		; (str ip, [sp, #-4]!)
   13650:	ldr	r0, [pc, #12]	; 13664 <_start@@Base+0x34>
   13654:	ldr	r3, [pc, #12]	; 13668 <_start@@Base+0x38>
   13658:	bl	123c8 <__libc_start_main@plt>
   1365c:	bl	1262c <abort@plt>
   13660:	andeq	r8, r1, r8, asr #22
   13664:	andeq	r2, r1, r8, ror #12
   13668:	andeq	r8, r1, r8, ror #21
   1366c:	ldr	r3, [pc, #20]	; 13688 <_start@@Base+0x58>
   13670:	ldr	r2, [pc, #20]	; 1368c <_start@@Base+0x5c>
   13674:	add	r3, pc, r3
   13678:	ldr	r2, [r3, r2]
   1367c:	cmp	r2, #0
   13680:	bxeq	lr
   13684:	b	123d4 <__gmon_start__@plt>
   13688:	andeq	r7, r1, r4, lsl #19
   1368c:	muleq	r0, ip, r1
   13690:	ldr	r3, [pc, #28]	; 136b4 <_start@@Base+0x84>
   13694:	ldr	r0, [pc, #28]	; 136b8 <_start@@Base+0x88>
   13698:	sub	r3, r3, r0
   1369c:	cmp	r3, #6
   136a0:	bxls	lr
   136a4:	ldr	r3, [pc, #16]	; 136bc <_start@@Base+0x8c>
   136a8:	cmp	r3, #0
   136ac:	bxeq	lr
   136b0:	bx	r3
   136b4:			; <UNDEFINED> instruction: 0x0002b1b7
   136b8:			; <UNDEFINED> instruction: 0x0002b1b4
   136bc:	andeq	r0, r0, r0
   136c0:	ldr	r1, [pc, #36]	; 136ec <_start@@Base+0xbc>
   136c4:	ldr	r0, [pc, #36]	; 136f0 <_start@@Base+0xc0>
   136c8:	sub	r1, r1, r0
   136cc:	asr	r1, r1, #2
   136d0:	add	r1, r1, r1, lsr #31
   136d4:	asrs	r1, r1, #1
   136d8:	bxeq	lr
   136dc:	ldr	r3, [pc, #16]	; 136f4 <_start@@Base+0xc4>
   136e0:	cmp	r3, #0
   136e4:	bxeq	lr
   136e8:	bx	r3
   136ec:			; <UNDEFINED> instruction: 0x0002b1b4
   136f0:			; <UNDEFINED> instruction: 0x0002b1b4
   136f4:	andeq	r0, r0, r0
   136f8:	push	{r4, lr}
   136fc:	ldr	r4, [pc, #24]	; 1371c <_start@@Base+0xec>
   13700:	ldrb	r3, [r4]
   13704:	cmp	r3, #0
   13708:	popne	{r4, pc}
   1370c:	bl	13690 <_start@@Base+0x60>
   13710:	mov	r3, #1
   13714:	strb	r3, [r4]
   13718:	pop	{r4, pc}
   1371c:	andeq	fp, r2, r0, asr #3
   13720:	ldr	r0, [pc, #40]	; 13750 <_start@@Base+0x120>
   13724:	ldr	r3, [r0]
   13728:	cmp	r3, #0
   1372c:	bne	13734 <_start@@Base+0x104>
   13730:	b	136c0 <_start@@Base+0x90>
   13734:	ldr	r3, [pc, #24]	; 13754 <_start@@Base+0x124>
   13738:	cmp	r3, #0
   1373c:	beq	13730 <_start@@Base+0x100>
   13740:	push	{r4, lr}
   13744:	blx	r3
   13748:	pop	{r4, lr}
   1374c:	b	136c0 <_start@@Base+0x90>
   13750:	strdeq	sl, [r2], -ip
   13754:	andeq	r0, r0, r0
   13758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1375c:	add	r6, r1, #2
   13760:	ldr	r4, [pc, #2204]	; 14004 <_start@@Base+0x9d4>
   13764:	sub	sp, sp, #100	; 0x64
   13768:	mov	fp, r0
   1376c:	mov	r7, r1
   13770:	ldr	r0, [r4, r6, lsl #2]
   13774:	add	r1, sp, #44	; 0x2c
   13778:	mov	r5, r2
   1377c:	mov	r8, r3
   13780:	bl	1265c <coda_type_get_class@plt>
   13784:	cmp	r0, #0
   13788:	beq	13790 <_start@@Base+0x160>
   1378c:	bl	1889c <handle_coda_error@@Base>
   13790:	ldr	r3, [sp, #44]	; 0x2c
   13794:	cmp	r3, #0
   13798:	beq	139a0 <_start@@Base+0x370>
   1379c:	cmp	r3, #1
   137a0:	bne	13a04 <_start@@Base+0x3d4>
   137a4:	mov	r3, #80	; 0x50
   137a8:	cmp	r5, #0
   137ac:	mla	r3, r3, r5, r4
   137b0:	streq	r5, [r4, #844]	; 0x34c
   137b4:	ldr	lr, [r3, #800]	; 0x320
   137b8:	ldr	r3, [pc, #2120]	; 14008 <_start@@Base+0x9d8>
   137bc:	ldr	r2, [r3, #104]	; 0x68
   137c0:	str	r2, [sp, #16]
   137c4:	mov	r2, #80	; 0x50
   137c8:	mla	r0, r2, r5, r4
   137cc:	ldr	ip, [r0, #804]	; 0x324
   137d0:	add	r1, lr, ip
   137d4:	str	r1, [sp, #24]
   137d8:	ldr	r1, [sp, #16]
   137dc:	add	r6, lr, ip
   137e0:	cmp	r1, r6
   137e4:	blt	1380c <_start@@Base+0x1dc>
   137e8:	ldr	r1, [r4, #3360]	; 0xd20
   137ec:	sub	r1, r1, #1
   137f0:	cmp	r5, r1
   137f4:	addlt	r1, r5, #1
   137f8:	ldrlt	r6, [r0, #844]	; 0x34c
   137fc:	mlalt	r2, r2, r1, r4
   13800:	ldrlt	r1, [r0, #840]	; 0x348
   13804:	mullt	r1, r1, r6
   13808:	strlt	r1, [r2, #844]	; 0x34c
   1380c:	mov	r0, #80	; 0x50
   13810:	add	r3, r3, lr, lsl #2
   13814:	mul	r0, r0, r5
   13818:	ldr	lr, [pc, #2020]	; 14004 <_start@@Base+0x9d4>
   1381c:	add	r2, r0, #844	; 0x34c
   13820:	add	r4, r4, r2
   13824:	mov	r2, #0
   13828:	add	r0, lr, r0
   1382c:	mov	r6, #1
   13830:	add	r1, sp, #64	; 0x40
   13834:	mov	lr, r2
   13838:	cmp	r2, ip
   1383c:	blt	138a4 <_start@@Base+0x274>
   13840:	cmp	r6, #0
   13844:	beq	1389c <_start@@Base+0x26c>
   13848:	ldr	r0, [pc, #1980]	; 1400c <_start@@Base+0x9dc>
   1384c:	bl	1235c <coda_cursor_goto_first_array_element@plt>
   13850:	cmp	r0, #0
   13854:	beq	1385c <_start@@Base+0x22c>
   13858:	bl	1889c <handle_coda_error@@Base>
   1385c:	mov	r3, #20
   13860:	ldr	r9, [pc, #1948]	; 14004 <_start@@Base+0x9d4>
   13864:	mul	r3, r3, r5
   13868:	add	r2, r5, #1
   1386c:	str	r3, [sp, #28]
   13870:	add	r3, r5, #1
   13874:	str	r3, [sp, #32]
   13878:	mov	r3, #80	; 0x50
   1387c:	mov	r4, #0
   13880:	mla	sl, r3, r5, r9
   13884:	mul	r3, r3, r2
   13888:	str	r3, [sp, #36]	; 0x24
   1388c:	cmp	r6, r4
   13890:	bgt	138d8 <_start@@Base+0x2a8>
   13894:	ldr	r0, [pc, #1904]	; 1400c <_start@@Base+0x9dc>
   13898:	bl	123ec <coda_cursor_goto_parent@plt>
   1389c:	add	sp, sp, #100	; 0x64
   138a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a4:	ldr	r9, [r3, #72]	; 0x48
   138a8:	add	r3, r3, #4
   138ac:	cmp	r9, #0
   138b0:	ldrne	r9, [r3, #104]	; 0x68
   138b4:	ldrne	sl, [r0, #844]	; 0x34c
   138b8:	ldreq	r9, [r3]
   138bc:	ldrne	r9, [r9, sl, lsl #2]
   138c0:	str	r9, [r1, r2, lsl #2]
   138c4:	ldr	r9, [r1, r2, lsl #2]
   138c8:	str	lr, [r4, #4]!
   138cc:	add	r2, r2, #1
   138d0:	mul	r6, r9, r6
   138d4:	b	13838 <_start@@Base+0x208>
   138d8:	mov	r3, r8
   138dc:	ldr	r2, [sp, #32]
   138e0:	add	r1, r7, #1
   138e4:	mov	r0, fp
   138e8:	bl	13758 <_start@@Base+0x128>
   138ec:	sub	r3, r6, #1
   138f0:	cmp	r4, r3
   138f4:	blt	13900 <_start@@Base+0x2d0>
   138f8:	add	r4, r4, #1
   138fc:	b	1388c <_start@@Base+0x25c>
   13900:	ldr	r0, [pc, #1796]	; 1400c <_start@@Base+0x9dc>
   13904:	bl	12458 <coda_cursor_goto_next_array_element@plt>
   13908:	cmp	r0, #0
   1390c:	beq	13914 <_start@@Base+0x2e4>
   13910:	bl	1889c <handle_coda_error@@Base>
   13914:	ldr	r3, [sp, #16]
   13918:	ldr	r2, [sp, #24]
   1391c:	cmp	r3, r2
   13920:	blt	13944 <_start@@Base+0x314>
   13924:	ldr	r3, [r9, #3360]	; 0xd20
   13928:	sub	r3, r3, #1
   1392c:	cmp	r5, r3
   13930:	ldrlt	r3, [sp, #36]	; 0x24
   13934:	addlt	r2, r9, r3
   13938:	ldrlt	r3, [r2, #844]	; 0x34c
   1393c:	addlt	r3, r3, #1
   13940:	strlt	r3, [r2, #844]	; 0x34c
   13944:	ldr	r3, [pc, #1732]	; 14010 <_start@@Base+0x9e0>
   13948:	ldr	r3, [r3]
   1394c:	cmp	r3, #0
   13950:	beq	138f8 <_start@@Base+0x2c8>
   13954:	ldr	r3, [sl, #804]	; 0x324
   13958:	ldr	r1, [sp, #28]
   1395c:	sub	r2, r3, #1
   13960:	add	r3, r3, r1
   13964:	add	r0, sp, #64	; 0x40
   13968:	add	r3, r9, r3, lsl #2
   1396c:	add	r3, r3, #848	; 0x350
   13970:	mov	ip, #0
   13974:	cmp	r2, #0
   13978:	blt	138f8 <_start@@Base+0x2c8>
   1397c:	ldr	r1, [r3, #-4]
   13980:	ldr	lr, [r0, r2, lsl #2]
   13984:	add	r1, r1, #1
   13988:	cmp	r1, lr
   1398c:	str	r1, [r3, #-4]!
   13990:	bne	138f8 <_start@@Base+0x2c8>
   13994:	sub	r2, r2, #1
   13998:	str	ip, [r3]
   1399c:	b	13974 <_start@@Base+0x344>
   139a0:	add	r6, r8, #872	; 0x368
   139a4:	add	r2, sp, #64	; 0x40
   139a8:	add	r3, r4, r6, lsl #2
   139ac:	ldr	r0, [pc, #1624]	; 1400c <_start@@Base+0x9dc>
   139b0:	ldr	r1, [r3, #4]
   139b4:	bl	12224 <coda_cursor_get_record_field_available_status@plt>
   139b8:	cmp	r0, #0
   139bc:	beq	139c4 <_start@@Base+0x394>
   139c0:	bl	1889c <handle_coda_error@@Base>
   139c4:	ldr	r3, [sp, #64]	; 0x40
   139c8:	cmp	r3, #0
   139cc:	beq	1389c <_start@@Base+0x26c>
   139d0:	add	r4, r4, r6, lsl #2
   139d4:	ldr	r0, [pc, #1584]	; 1400c <_start@@Base+0x9dc>
   139d8:	ldr	r1, [r4, #4]
   139dc:	bl	1238c <coda_cursor_goto_record_field_by_index@plt>
   139e0:	cmp	r0, #0
   139e4:	beq	139ec <_start@@Base+0x3bc>
   139e8:	bl	1889c <handle_coda_error@@Base>
   139ec:	add	r3, r8, #1
   139f0:	mov	r2, r5
   139f4:	add	r1, r7, #1
   139f8:	mov	r0, fp
   139fc:	bl	13758 <_start@@Base+0x128>
   13a00:	b	13894 <_start@@Base+0x264>
   13a04:	ldr	r3, [pc, #1540]	; 14010 <_start@@Base+0x9e0>
   13a08:	ldr	r3, [r3]
   13a0c:	cmp	r3, #0
   13a10:	bne	13a58 <_start@@Base+0x428>
   13a14:	add	r1, sp, #48	; 0x30
   13a18:	ldr	r0, [r4, r6, lsl #2]
   13a1c:	bl	1265c <coda_type_get_class@plt>
   13a20:	cmp	r0, #0
   13a24:	beq	13a2c <_start@@Base+0x3fc>
   13a28:	bl	1889c <handle_coda_error@@Base>
   13a2c:	ldr	r3, [sp, #48]	; 0x30
   13a30:	cmp	r3, #6
   13a34:	ldrls	pc, [pc, r3, lsl #2]
   13a38:	b	13b90 <_start@@Base+0x560>
   13a3c:	strdeq	r3, [r1], -r8
   13a40:	strdeq	r3, [r1], -r8
   13a44:	strdeq	r3, [r1], -r0
   13a48:	strdeq	r3, [r1], -r0
   13a4c:	strdeq	r3, [r1], -r0
   13a50:	strdeq	r3, [r1], -r0
   13a54:	andeq	r3, r1, r4, ror #29
   13a58:	mov	r7, #0
   13a5c:	ldr	r3, [pc, #1456]	; 14014 <_start@@Base+0x9e4>
   13a60:	mov	r9, r7
   13a64:	str	r3, [sp, #16]
   13a68:	ldr	r3, [r4, #136]	; 0x88
   13a6c:	cmp	r7, r3
   13a70:	bge	13a14 <_start@@Base+0x3e4>
   13a74:	ldr	r3, [sp, #16]
   13a78:	add	r1, sp, #64	; 0x40
   13a7c:	ldr	r0, [r3], #4
   13a80:	str	r3, [sp, #16]
   13a84:	bl	1265c <coda_type_get_class@plt>
   13a88:	cmp	r0, #0
   13a8c:	beq	13a94 <_start@@Base+0x464>
   13a90:	bl	1889c <handle_coda_error@@Base>
   13a94:	ldr	r3, [sp, #64]	; 0x40
   13a98:	cmp	r3, #1
   13a9c:	bne	13ac8 <_start@@Base+0x498>
   13aa0:	mov	r5, #80	; 0x50
   13aa4:	mov	sl, #0
   13aa8:	mul	r5, r5, r9
   13aac:	add	r8, r5, #844	; 0x34c
   13ab0:	add	r8, r4, r8
   13ab4:	add	r5, r4, r5
   13ab8:	ldr	r3, [r5, #804]	; 0x324
   13abc:	cmp	sl, r3
   13ac0:	blt	13ad0 <_start@@Base+0x4a0>
   13ac4:	add	r9, r9, #1
   13ac8:	add	r7, r7, #1
   13acc:	b	13a68 <_start@@Base+0x438>
   13ad0:	ldr	r3, [pc, #1344]	; 14018 <_start@@Base+0x9e8>
   13ad4:	ldr	r2, [r8, #4]!
   13ad8:	ldr	r1, [pc, #1340]	; 1401c <_start@@Base+0x9ec>
   13adc:	ldr	r3, [r3]
   13ae0:	mov	r0, fp
   13ae4:	bl	1244c <fprintf@plt>
   13ae8:	add	sl, sl, #1
   13aec:	b	13ab8 <_start@@Base+0x488>
   13af0:	add	r1, sp, #52	; 0x34
   13af4:	ldr	r0, [r4, r6, lsl #2]
   13af8:	bl	12410 <coda_type_get_read_type@plt>
   13afc:	cmp	r0, #0
   13b00:	beq	13b08 <_start@@Base+0x4d8>
   13b04:	bl	1889c <handle_coda_error@@Base>
   13b08:	ldr	r3, [sp, #52]	; 0x34
   13b0c:	add	r3, r3, #1
   13b10:	cmp	r3, #13
   13b14:	ldrls	pc, [pc, r3, lsl #2]
   13b18:	b	13b90 <_start@@Base+0x560>
   13b1c:	ldrdeq	r3, [r1], -r0
   13b20:	andeq	r3, r1, r8, ror #27
   13b24:	andeq	r3, r1, r4, lsl lr
   13b28:	andeq	r3, r1, r8, ror #27
   13b2c:	andeq	r3, r1, r4, lsl lr
   13b30:	andeq	r3, r1, r8, ror #27
   13b34:	andeq	r3, r1, r4, lsl lr
   13b38:	andeq	r3, r1, r8, lsr lr
   13b3c:	andeq	r3, r1, ip, ror #28
   13b40:	muleq	r1, r4, lr
   13b44:	muleq	r1, r4, lr
   13b48:	andeq	r3, r1, r4, asr fp
   13b4c:	andeq	r3, r1, r0, lsr #23
   13b50:	andeq	r3, r1, ip, asr #24
   13b54:	add	r1, sp, #64	; 0x40
   13b58:	ldr	r0, [pc, #1196]	; 1400c <_start@@Base+0x9dc>
   13b5c:	bl	12494 <coda_cursor_read_char@plt>
   13b60:	cmp	r0, #0
   13b64:	beq	13b6c <_start@@Base+0x53c>
   13b68:	bl	1889c <handle_coda_error@@Base>
   13b6c:	ldr	r3, [pc, #1196]	; 14020 <_start@@Base+0x9f0>
   13b70:	ldrb	r2, [sp, #64]	; 0x40
   13b74:	ldr	r3, [r3]
   13b78:	cmp	r3, #0
   13b7c:	ldrne	r1, [pc, #1184]	; 14024 <_start@@Base+0x9f4>
   13b80:	bne	13e08 <_start@@Base+0x7d8>
   13b84:	mov	r1, fp
   13b88:	mov	r0, r2
   13b8c:	bl	12584 <fputc@plt>
   13b90:	mov	r1, fp
   13b94:	mov	r0, #10
   13b98:	bl	12584 <fputc@plt>
   13b9c:	b	1389c <_start@@Base+0x26c>
   13ba0:	add	r1, sp, #64	; 0x40
   13ba4:	ldr	r0, [pc, #1120]	; 1400c <_start@@Base+0x9dc>
   13ba8:	bl	1241c <coda_cursor_get_string_length@plt>
   13bac:	cmp	r0, #0
   13bb0:	beq	13bb8 <_start@@Base+0x588>
   13bb4:	bl	1889c <handle_coda_error@@Base>
   13bb8:	ldr	r0, [sp, #64]	; 0x40
   13bbc:	add	r0, r0, #1
   13bc0:	bl	123bc <malloc@plt>
   13bc4:	subs	r4, r0, #0
   13bc8:	bne	13bf0 <_start@@Base+0x5c0>
   13bcc:	ldr	r2, [sp, #64]	; 0x40
   13bd0:	mov	r3, #126	; 0x7e
   13bd4:	str	r3, [sp]
   13bd8:	add	r2, r2, #1
   13bdc:	ldr	r3, [pc, #1092]	; 14028 <_start@@Base+0x9f8>
   13be0:	ldr	r1, [pc, #1092]	; 1402c <_start@@Base+0x9fc>
   13be4:	mvn	r0, #0
   13be8:	bl	1223c <coda_set_error@plt>
   13bec:	bl	1889c <handle_coda_error@@Base>
   13bf0:	ldr	r2, [sp, #64]	; 0x40
   13bf4:	mov	r1, r4
   13bf8:	add	r2, r2, #1
   13bfc:	ldr	r0, [pc, #1032]	; 1400c <_start@@Base+0x9dc>
   13c00:	bl	123e0 <coda_cursor_read_string@plt>
   13c04:	cmp	r0, #0
   13c08:	beq	13c10 <_start@@Base+0x5e0>
   13c0c:	bl	1889c <handle_coda_error@@Base>
   13c10:	ldr	r3, [pc, #1032]	; 14020 <_start@@Base+0x9f0>
   13c14:	ldr	r3, [r3]
   13c18:	cmp	r3, #0
   13c1c:	beq	13c3c <_start@@Base+0x60c>
   13c20:	mov	r2, r4
   13c24:	ldr	r1, [pc, #1028]	; 14030 <_start@@Base+0xa00>
   13c28:	mov	r0, fp
   13c2c:	bl	1244c <fprintf@plt>
   13c30:	mov	r0, r4
   13c34:	bl	12284 <free@plt>
   13c38:	b	13b90 <_start@@Base+0x560>
   13c3c:	mov	r1, fp
   13c40:	mov	r0, r4
   13c44:	bl	12620 <fputs@plt>
   13c48:	b	13c30 <_start@@Base+0x600>
   13c4c:	add	r1, sp, #64	; 0x40
   13c50:	ldr	r0, [pc, #948]	; 1400c <_start@@Base+0x9dc>
   13c54:	bl	1259c <coda_cursor_get_bit_size@plt>
   13c58:	cmp	r0, #0
   13c5c:	beq	13c64 <_start@@Base+0x634>
   13c60:	bl	1889c <handle_coda_error@@Base>
   13c64:	ldrd	r0, [sp, #64]	; 0x40
   13c68:	mov	r3, #0
   13c6c:	and	r2, r0, #7
   13c70:	orrs	r3, r2, r3
   13c74:	lsr	r2, r0, #3
   13c78:	orr	r2, r2, r1, lsl #29
   13c7c:	movne	ip, #1
   13c80:	moveq	ip, #0
   13c84:	adds	r0, r2, ip
   13c88:	asr	r3, r1, #3
   13c8c:	adc	r1, r3, #0
   13c90:	strd	r0, [sp, #16]
   13c94:	ldr	r0, [sp, #16]
   13c98:	bl	123bc <malloc@plt>
   13c9c:	subs	r4, r0, #0
   13ca0:	bne	13cc4 <_start@@Base+0x694>
   13ca4:	mov	r3, #163	; 0xa3
   13ca8:	str	r3, [sp]
   13cac:	ldr	r2, [sp, #16]
   13cb0:	ldr	r3, [pc, #880]	; 14028 <_start@@Base+0x9f8>
   13cb4:	ldr	r1, [pc, #880]	; 1402c <_start@@Base+0x9fc>
   13cb8:	mvn	r0, #0
   13cbc:	bl	1223c <coda_set_error@plt>
   13cc0:	bl	1889c <handle_coda_error@@Base>
   13cc4:	ldrd	r2, [sp, #64]	; 0x40
   13cc8:	mov	r1, r4
   13ccc:	ldr	r0, [pc, #824]	; 1400c <_start@@Base+0x9dc>
   13cd0:	strd	r2, [sp]
   13cd4:	mov	r2, #0
   13cd8:	mov	r3, #0
   13cdc:	bl	12638 <coda_cursor_read_bits@plt>
   13ce0:	cmp	r0, #0
   13ce4:	beq	13cec <_start@@Base+0x6bc>
   13ce8:	bl	1889c <handle_coda_error@@Base>
   13cec:	ldr	r8, [pc, #832]	; 14034 <_start@@Base+0xa04>
   13cf0:	ldr	r9, [pc, #832]	; 14038 <_start@@Base+0xa08>
   13cf4:	ldr	sl, [pc, #832]	; 1403c <_start@@Base+0xa0c>
   13cf8:	sub	r5, r4, #1
   13cfc:	mov	r6, #0
   13d00:	mov	r7, #0
   13d04:	ldrd	r2, [sp, #16]
   13d08:	cmp	r6, r2
   13d0c:	sbcs	r3, r7, r3
   13d10:	bge	13c30 <_start@@Base+0x600>
   13d14:	ldrb	r2, [r5, #1]!
   13d18:	cmp	r2, #10
   13d1c:	beq	13da8 <_start@@Base+0x778>
   13d20:	bhi	13d5c <_start@@Base+0x72c>
   13d24:	cmp	r2, #8
   13d28:	beq	13d90 <_start@@Base+0x760>
   13d2c:	bhi	13d9c <_start@@Base+0x76c>
   13d30:	cmp	r2, #7
   13d34:	moveq	r1, fp
   13d38:	ldreq	r0, [pc, #768]	; 14040 <_start@@Base+0xa10>
   13d3c:	beq	13d80 <_start@@Base+0x750>
   13d40:	sub	r3, r2, #32
   13d44:	cmp	r3, #94	; 0x5e
   13d48:	bhi	13dd8 <_start@@Base+0x7a8>
   13d4c:	mov	r1, fp
   13d50:	mov	r0, r2
   13d54:	bl	12584 <fputc@plt>
   13d58:	b	13d84 <_start@@Base+0x754>
   13d5c:	cmp	r2, #12
   13d60:	beq	13dc0 <_start@@Base+0x790>
   13d64:	bcc	13db4 <_start@@Base+0x784>
   13d68:	cmp	r2, #13
   13d6c:	beq	13dcc <_start@@Base+0x79c>
   13d70:	cmp	r2, #92	; 0x5c
   13d74:	moveq	r1, fp
   13d78:	ldreq	r0, [pc, #708]	; 14044 <_start@@Base+0xa14>
   13d7c:	bne	13d40 <_start@@Base+0x710>
   13d80:	bl	12620 <fputs@plt>
   13d84:	adds	r6, r6, #1
   13d88:	adc	r7, r7, #0
   13d8c:	b	13d04 <_start@@Base+0x6d4>
   13d90:	mov	r1, fp
   13d94:	ldr	r0, [pc, #684]	; 14048 <_start@@Base+0xa18>
   13d98:	b	13d80 <_start@@Base+0x750>
   13d9c:	mov	r1, fp
   13da0:	ldr	r0, [pc, #676]	; 1404c <_start@@Base+0xa1c>
   13da4:	b	13d80 <_start@@Base+0x750>
   13da8:	mov	r1, fp
   13dac:	mov	r0, r8
   13db0:	b	13d80 <_start@@Base+0x750>
   13db4:	mov	r1, fp
   13db8:	ldr	r0, [pc, #656]	; 14050 <_start@@Base+0xa20>
   13dbc:	b	13d80 <_start@@Base+0x750>
   13dc0:	mov	r1, fp
   13dc4:	mov	r0, sl
   13dc8:	b	13d80 <_start@@Base+0x750>
   13dcc:	mov	r1, fp
   13dd0:	ldr	r0, [pc, #636]	; 14054 <_start@@Base+0xa24>
   13dd4:	b	13d80 <_start@@Base+0x750>
   13dd8:	mov	r1, r9
   13ddc:	mov	r0, fp
   13de0:	bl	1244c <fprintf@plt>
   13de4:	b	13d84 <_start@@Base+0x754>
   13de8:	add	r1, sp, #64	; 0x40
   13dec:	ldr	r0, [pc, #536]	; 1400c <_start@@Base+0x9dc>
   13df0:	bl	125d8 <coda_cursor_read_int32@plt>
   13df4:	cmp	r0, #0
   13df8:	beq	13e00 <_start@@Base+0x7d0>
   13dfc:	bl	1889c <handle_coda_error@@Base>
   13e00:	ldr	r2, [sp, #64]	; 0x40
   13e04:	ldr	r1, [pc, #588]	; 14058 <_start@@Base+0xa28>
   13e08:	mov	r0, fp
   13e0c:	bl	1244c <fprintf@plt>
   13e10:	b	13b90 <_start@@Base+0x560>
   13e14:	add	r1, sp, #64	; 0x40
   13e18:	ldr	r0, [pc, #492]	; 1400c <_start@@Base+0x9dc>
   13e1c:	bl	122a8 <coda_cursor_read_uint32@plt>
   13e20:	cmp	r0, #0
   13e24:	beq	13e2c <_start@@Base+0x7fc>
   13e28:	bl	1889c <handle_coda_error@@Base>
   13e2c:	ldr	r2, [sp, #64]	; 0x40
   13e30:	ldr	r1, [pc, #548]	; 1405c <_start@@Base+0xa2c>
   13e34:	b	13e08 <_start@@Base+0x7d8>
   13e38:	add	r1, sp, #56	; 0x38
   13e3c:	ldr	r0, [pc, #456]	; 1400c <_start@@Base+0x9dc>
   13e40:	bl	1253c <coda_cursor_read_int64@plt>
   13e44:	cmp	r0, #0
   13e48:	beq	13e50 <_start@@Base+0x820>
   13e4c:	bl	1889c <handle_coda_error@@Base>
   13e50:	add	r2, sp, #64	; 0x40
   13e54:	ldrd	r0, [sp, #56]	; 0x38
   13e58:	bl	12644 <coda_str64@plt>
   13e5c:	mov	r1, fp
   13e60:	add	r0, sp, #64	; 0x40
   13e64:	bl	12620 <fputs@plt>
   13e68:	b	13b90 <_start@@Base+0x560>
   13e6c:	add	r1, sp, #56	; 0x38
   13e70:	ldr	r0, [pc, #404]	; 1400c <_start@@Base+0x9dc>
   13e74:	bl	12428 <coda_cursor_read_uint64@plt>
   13e78:	cmp	r0, #0
   13e7c:	beq	13e84 <_start@@Base+0x854>
   13e80:	bl	1889c <handle_coda_error@@Base>
   13e84:	add	r2, sp, #64	; 0x40
   13e88:	ldrd	r0, [sp, #56]	; 0x38
   13e8c:	bl	12278 <coda_str64u@plt>
   13e90:	b	13e5c <_start@@Base+0x82c>
   13e94:	add	r1, sp, #64	; 0x40
   13e98:	ldr	r0, [pc, #364]	; 1400c <_start@@Base+0x9dc>
   13e9c:	bl	12434 <coda_cursor_read_double@plt>
   13ea0:	cmp	r0, #0
   13ea4:	beq	13eac <_start@@Base+0x87c>
   13ea8:	bl	1889c <handle_coda_error@@Base>
   13eac:	ldr	r3, [sp, #52]	; 0x34
   13eb0:	cmp	r3, #8
   13eb4:	ldrd	r2, [sp, #64]	; 0x40
   13eb8:	ldreq	r1, [pc, #416]	; 14060 <_start@@Base+0xa30>
   13ebc:	beq	13ec4 <_start@@Base+0x894>
   13ec0:	ldr	r1, [pc, #412]	; 14064 <_start@@Base+0xa34>
   13ec4:	mov	r0, fp
   13ec8:	bl	1244c <fprintf@plt>
   13ecc:	b	13b90 <_start@@Base+0x560>
   13ed0:	ldr	r3, [pc, #400]	; 14068 <_start@@Base+0xa38>
   13ed4:	ldr	r2, [pc, #400]	; 1406c <_start@@Base+0xa3c>
   13ed8:	ldr	r1, [pc, #328]	; 14028 <_start@@Base+0x9f8>
   13edc:	ldr	r0, [pc, #396]	; 14070 <_start@@Base+0xa40>
   13ee0:	bl	12650 <__assert_fail@plt>
   13ee4:	add	r1, sp, #52	; 0x34
   13ee8:	ldr	r0, [r4, r6, lsl #2]
   13eec:	bl	124c4 <coda_type_get_special_type@plt>
   13ef0:	cmp	r0, #0
   13ef4:	beq	13efc <_start@@Base+0x8cc>
   13ef8:	bl	1889c <handle_coda_error@@Base>
   13efc:	ldr	r3, [sp, #52]	; 0x34
   13f00:	cmp	r3, #1
   13f04:	bcc	13b90 <_start@@Base+0x560>
   13f08:	cmp	r3, #2
   13f0c:	bls	13f58 <_start@@Base+0x928>
   13f10:	cmp	r3, #3
   13f14:	bne	13b90 <_start@@Base+0x560>
   13f18:	add	r1, sp, #64	; 0x40
   13f1c:	ldr	r0, [pc, #232]	; 1400c <_start@@Base+0x9dc>
   13f20:	bl	1256c <coda_cursor_read_complex_double_pair@plt>
   13f24:	cmp	r0, #0
   13f28:	beq	13f30 <_start@@Base+0x900>
   13f2c:	bl	1889c <handle_coda_error@@Base>
   13f30:	ldrd	r2, [sp, #72]	; 0x48
   13f34:	ldr	r1, [pc, #312]	; 14074 <_start@@Base+0xa44>
   13f38:	mov	r0, fp
   13f3c:	strd	r2, [sp, #8]
   13f40:	ldr	r3, [pc, #208]	; 14018 <_start@@Base+0x9e8>
   13f44:	ldr	r3, [r3]
   13f48:	str	r3, [sp]
   13f4c:	ldrd	r2, [sp, #64]	; 0x40
   13f50:	bl	1244c <fprintf@plt>
   13f54:	b	13b90 <_start@@Base+0x560>
   13f58:	add	r1, sp, #56	; 0x38
   13f5c:	ldr	r0, [pc, #168]	; 1400c <_start@@Base+0x9dc>
   13f60:	bl	12434 <coda_cursor_read_double@plt>
   13f64:	cmp	r0, #0
   13f68:	beq	13f70 <_start@@Base+0x940>
   13f6c:	bl	1889c <handle_coda_error@@Base>
   13f70:	ldr	r3, [sp, #52]	; 0x34
   13f74:	cmp	r3, #2
   13f78:	ldrd	r2, [sp, #56]	; 0x38
   13f7c:	bne	13ec0 <_start@@Base+0x890>
   13f80:	ldr	r1, [pc, #240]	; 14078 <_start@@Base+0xa48>
   13f84:	ldr	r1, [r1]
   13f88:	cmp	r1, #0
   13f8c:	beq	13ec0 <_start@@Base+0x890>
   13f90:	vmov	d0, r2, r3
   13f94:	bl	12440 <coda_isNaN@plt>
   13f98:	cmp	r0, #0
   13f9c:	beq	13fc8 <_start@@Base+0x998>
   13fa0:	ldr	r1, [pc, #212]	; 1407c <_start@@Base+0xa4c>
   13fa4:	add	r0, sp, #64	; 0x40
   13fa8:	bl	12374 <strcpy@plt>
   13fac:	ldr	r3, [pc, #108]	; 14020 <_start@@Base+0x9f0>
   13fb0:	ldr	r3, [r3]
   13fb4:	cmp	r3, #0
   13fb8:	addne	r2, sp, #64	; 0x40
   13fbc:	ldrne	r1, [pc, #108]	; 14030 <_start@@Base+0xa00>
   13fc0:	bne	13e08 <_start@@Base+0x7d8>
   13fc4:	b	13e5c <_start@@Base+0x82c>
   13fc8:	vldr	d0, [sp, #56]	; 0x38
   13fcc:	bl	122e4 <coda_isInf@plt>
   13fd0:	cmp	r0, #0
   13fd4:	bne	13fa0 <_start@@Base+0x970>
   13fd8:	add	r1, sp, #64	; 0x40
   13fdc:	ldr	r0, [pc, #156]	; 14080 <_start@@Base+0xa50>
   13fe0:	vldr	d0, [sp, #56]	; 0x38
   13fe4:	bl	12260 <coda_time_double_to_string@plt>
   13fe8:	cmp	r0, #0
   13fec:	beq	13fac <_start@@Base+0x97c>
   13ff0:	bl	1889c <handle_coda_error@@Base>
   13ff4:	b	13fac <_start@@Base+0x97c>
   13ff8:	ldr	r3, [pc, #104]	; 14068 <_start@@Base+0xa38>
   13ffc:	mov	r2, #368	; 0x170
   14000:	b	13ed8 <_start@@Base+0x8a8>
   14004:	strdeq	fp, [r2], -r0
   14008:	strheq	ip, [r2], -r8
   1400c:	andeq	fp, r2, r0, lsl #5
   14010:	andeq	ip, r2, r8, lsr #1
   14014:	strdeq	fp, [r2], -r8
   14018:	muleq	r2, ip, r0
   1401c:	andeq	r8, r1, r9, ror #22
   14020:	andeq	ip, r2, ip, lsr #4
   14024:	andeq	r8, r1, pc, ror #22
   14028:	andeq	r8, r1, r4, ror fp
   1402c:			; <UNDEFINED> instruction: 0x00018bbf
   14030:	andeq	r9, r1, r8, lsr #3
   14034:	strdeq	r8, [r1], -sp
   14038:	andeq	r8, r1, ip, lsl #24
   1403c:	andeq	r8, r1, r3, lsl #24
   14040:	strdeq	r8, [r1], -r4
   14044:	andeq	r8, r1, r9, lsl #24
   14048:	strdeq	r8, [r1], -r7
   1404c:	strdeq	r8, [r1], -sl
   14050:	andeq	r8, r1, r0, lsl #24
   14054:	andeq	r8, r1, r6, lsl #24
   14058:	andeq	r9, r1, r7, lsr #2
   1405c:	andeq	r8, r1, r2, lsl ip
   14060:	andeq	r8, r1, r6, lsl ip
   14064:	andeq	r8, r1, fp, lsl ip
   14068:	andeq	r8, r1, r8, asr fp
   1406c:	andeq	r0, r0, r6, lsr #2
   14070:	andeq	r8, r1, r8, asr #25
   14074:	andeq	r8, r1, r7, asr ip
   14078:	andeq	fp, r2, r4, ror #3
   1407c:	andeq	r8, r1, r1, lsr #24
   14080:	andeq	r8, r1, ip, lsr ip

00014084 <export_data_element_to_ascii@@Base>:
   14084:	ldr	r3, [pc, #152]	; 14124 <export_data_element_to_ascii@@Base+0xa0>
   14088:	push	{r4, lr}
   1408c:	ldr	r2, [r3]
   14090:	cmp	r2, #0
   14094:	movne	r2, #0
   14098:	strne	r2, [r3]
   1409c:	bne	140b0 <export_data_element_to_ascii@@Base+0x2c>
   140a0:	ldr	r3, [pc, #128]	; 14128 <export_data_element_to_ascii@@Base+0xa4>
   140a4:	mov	r0, #10
   140a8:	ldr	r1, [r3]
   140ac:	bl	12584 <fputc@plt>
   140b0:	ldr	r3, [pc, #116]	; 1412c <export_data_element_to_ascii@@Base+0xa8>
   140b4:	ldr	r3, [r3]
   140b8:	cmp	r3, #0
   140bc:	beq	140e0 <export_data_element_to_ascii@@Base+0x5c>
   140c0:	ldr	r4, [pc, #96]	; 14128 <export_data_element_to_ascii@@Base+0xa4>
   140c4:	mov	r1, #2
   140c8:	mov	r2, #0
   140cc:	ldr	r0, [r4]
   140d0:	bl	16ed0 <print_full_field_name@@Base>
   140d4:	ldr	r1, [r4]
   140d8:	mov	r0, #10
   140dc:	bl	12584 <fputc@plt>
   140e0:	ldr	r2, [pc, #72]	; 14130 <export_data_element_to_ascii@@Base+0xac>
   140e4:	ldr	r3, [r2]
   140e8:	cmp	r3, #0
   140ec:	ble	14108 <export_data_element_to_ascii@@Base+0x84>
   140f0:	add	r3, r3, #37	; 0x25
   140f4:	lsl	r3, r3, #3
   140f8:	add	r2, r2, r3
   140fc:	ldrd	r2, [r2]
   14100:	orrs	r3, r2, r3
   14104:	popeq	{r4, pc}
   14108:	ldr	r0, [pc, #24]	; 14128 <export_data_element_to_ascii@@Base+0xa4>
   1410c:	mov	r3, #0
   14110:	mov	r2, r3
   14114:	mov	r1, r3
   14118:	ldr	r0, [r0]
   1411c:	pop	{r4, lr}
   14120:	b	13758 <_start@@Base+0x128>
   14124:	andeq	fp, r2, r8, lsr #3
   14128:	muleq	r2, r8, r0
   1412c:	andeq	ip, r2, r8, lsr #4
   14130:	strheq	ip, [r2], -r8
   14134:	push	{r0, r1, r2, r3}
   14138:	ldr	r3, [pc, #36]	; 14164 <export_data_element_to_ascii@@Base+0xe0>
   1413c:	push	{r0, r1, r2, lr}
   14140:	add	r2, sp, #20
   14144:	ldr	r1, [sp, #16]
   14148:	ldr	r0, [r3]
   1414c:	str	r2, [sp, #4]
   14150:	bl	12548 <vfprintf@plt>
   14154:	add	sp, sp, #12
   14158:	pop	{lr}		; (ldr lr, [sp], #4)
   1415c:	add	sp, sp, #16
   14160:	bx	lr
   14164:	muleq	r2, r8, r0
   14168:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1416c:	mov	r5, r0
   14170:	ldr	r7, [pc, #180]	; 1422c <export_data_element_to_ascii@@Base+0x1a8>
   14174:	ldr	r8, [pc, #180]	; 14230 <export_data_element_to_ascii@@Base+0x1ac>
   14178:	ldr	r9, [pc, #180]	; 14234 <export_data_element_to_ascii@@Base+0x1b0>
   1417c:	mov	r6, r1
   14180:	mov	r4, r0
   14184:	sub	r3, r4, r5
   14188:	cmp	r6, r3
   1418c:	bgt	14194 <export_data_element_to_ascii@@Base+0x110>
   14190:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14194:	ldrb	r1, [r4], #1
   14198:	cmp	r1, #10
   1419c:	beq	1420c <export_data_element_to_ascii@@Base+0x188>
   141a0:	bhi	141d4 <export_data_element_to_ascii@@Base+0x150>
   141a4:	cmp	r1, #8
   141a8:	beq	141fc <export_data_element_to_ascii@@Base+0x178>
   141ac:	bhi	14204 <export_data_element_to_ascii@@Base+0x180>
   141b0:	cmp	r1, #7
   141b4:	ldreq	r0, [pc, #124]	; 14238 <export_data_element_to_ascii@@Base+0x1b4>
   141b8:	beq	141f4 <export_data_element_to_ascii@@Base+0x170>
   141bc:	sub	r3, r1, #32
   141c0:	cmp	r3, #94	; 0x5e
   141c4:	movls	r0, r9
   141c8:	movhi	r0, r8
   141cc:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   141d0:	b	14184 <export_data_element_to_ascii@@Base+0x100>
   141d4:	cmp	r1, #12
   141d8:	beq	1421c <export_data_element_to_ascii@@Base+0x198>
   141dc:	bcc	14214 <export_data_element_to_ascii@@Base+0x190>
   141e0:	cmp	r1, #13
   141e4:	beq	14224 <export_data_element_to_ascii@@Base+0x1a0>
   141e8:	cmp	r1, #92	; 0x5c
   141ec:	ldreq	r0, [pc, #72]	; 1423c <export_data_element_to_ascii@@Base+0x1b8>
   141f0:	bne	141bc <export_data_element_to_ascii@@Base+0x138>
   141f4:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   141f8:	b	14184 <export_data_element_to_ascii@@Base+0x100>
   141fc:	ldr	r0, [pc, #60]	; 14240 <export_data_element_to_ascii@@Base+0x1bc>
   14200:	b	141f4 <export_data_element_to_ascii@@Base+0x170>
   14204:	ldr	r0, [pc, #56]	; 14244 <export_data_element_to_ascii@@Base+0x1c0>
   14208:	b	141f4 <export_data_element_to_ascii@@Base+0x170>
   1420c:	mov	r0, r7
   14210:	b	141f4 <export_data_element_to_ascii@@Base+0x170>
   14214:	ldr	r0, [pc, #44]	; 14248 <export_data_element_to_ascii@@Base+0x1c4>
   14218:	b	141f4 <export_data_element_to_ascii@@Base+0x170>
   1421c:	ldr	r0, [pc, #40]	; 1424c <export_data_element_to_ascii@@Base+0x1c8>
   14220:	b	141f4 <export_data_element_to_ascii@@Base+0x170>
   14224:	ldr	r0, [pc, #36]	; 14250 <export_data_element_to_ascii@@Base+0x1cc>
   14228:	b	141f4 <export_data_element_to_ascii@@Base+0x170>
   1422c:	strdeq	r8, [r1], -sp
   14230:	andeq	r8, r1, ip, lsl #24
   14234:	andeq	r8, r1, r0, ror ip
   14238:	strdeq	r8, [r1], -r4
   1423c:	andeq	r8, r1, r9, lsl #24
   14240:	strdeq	r8, [r1], -r7
   14244:	strdeq	r8, [r1], -sl
   14248:	andeq	r8, r1, r0, lsl #24
   1424c:	andeq	r8, r1, r3, lsl #24
   14250:	andeq	r8, r1, r6, lsl #24
   14254:	push	{r0, r1, r2, r3}
   14258:	ldr	r3, [pc, #104]	; 142c8 <export_data_element_to_ascii@@Base+0x244>
   1425c:	push	{r0, r1, r4, r5, r6, lr}
   14260:	ldr	r4, [r3]
   14264:	cmp	r4, #0
   14268:	blt	142a0 <export_data_element_to_ascii@@Base+0x21c>
   1426c:	ldr	r5, [pc, #88]	; 142cc <export_data_element_to_ascii@@Base+0x248>
   14270:	ldr	r6, [pc, #88]	; 142d0 <export_data_element_to_ascii@@Base+0x24c>
   14274:	cmp	r4, #0
   14278:	bne	142b4 <export_data_element_to_ascii@@Base+0x230>
   1427c:	add	r2, sp, #28
   14280:	ldr	r1, [sp, #24]
   14284:	ldr	r0, [r5]
   14288:	str	r2, [sp, #4]
   1428c:	bl	12548 <vfprintf@plt>
   14290:	add	sp, sp, #8
   14294:	pop	{r4, r5, r6, lr}
   14298:	add	sp, sp, #16
   1429c:	bx	lr
   142a0:	ldr	r3, [pc, #44]	; 142d4 <export_data_element_to_ascii@@Base+0x250>
   142a4:	mov	r2, #44	; 0x2c
   142a8:	ldr	r1, [pc, #40]	; 142d8 <export_data_element_to_ascii@@Base+0x254>
   142ac:	ldr	r0, [pc, #40]	; 142dc <export_data_element_to_ascii@@Base+0x258>
   142b0:	bl	12650 <__assert_fail@plt>
   142b4:	ldr	r1, [r5]
   142b8:	mov	r0, r6
   142bc:	bl	12620 <fputs@plt>
   142c0:	sub	r4, r4, #1
   142c4:	b	14274 <export_data_element_to_ascii@@Base+0x1f0>
   142c8:	andeq	fp, r2, r4, asr #3
   142cc:	muleq	r2, r8, r0
   142d0:	andeq	r8, r1, r9, lsr ip
   142d4:	andeq	r8, r1, lr, asr ip
   142d8:	andeq	r8, r1, r3, ror ip
   142dc:			; <UNDEFINED> instruction: 0x00018cbe
   142e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142e4:	sub	sp, sp, #620	; 0x26c
   142e8:	mov	r5, r1
   142ec:	add	r1, sp, #16
   142f0:	mov	r4, r0
   142f4:	bl	12308 <coda_cursor_has_attributes@plt>
   142f8:	cmp	r0, #0
   142fc:	beq	14304 <export_data_element_to_ascii@@Base+0x280>
   14300:	bl	1889c <handle_coda_error@@Base>
   14304:	ldr	r3, [sp, #16]
   14308:	cmp	r3, #0
   1430c:	beq	1435c <export_data_element_to_ascii@@Base+0x2d8>
   14310:	mov	r0, r4
   14314:	bl	12488 <coda_cursor_goto_attributes@plt>
   14318:	cmp	r0, #0
   1431c:	beq	14324 <export_data_element_to_ascii@@Base+0x2a0>
   14320:	bl	1889c <handle_coda_error@@Base>
   14324:	ldr	r6, [pc, #2556]	; 14d28 <export_data_element_to_ascii@@Base+0xca4>
   14328:	ldr	r0, [pc, #2556]	; 14d2c <export_data_element_to_ascii@@Base+0xca8>
   1432c:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14330:	ldr	r3, [r6]
   14334:	mov	r0, r4
   14338:	add	r3, r3, #1
   1433c:	mov	r1, r5
   14340:	str	r3, [r6]
   14344:	bl	142e0 <export_data_element_to_ascii@@Base+0x25c>
   14348:	ldr	r3, [r6]
   1434c:	mov	r0, r4
   14350:	sub	r3, r3, #1
   14354:	str	r3, [r6]
   14358:	bl	123ec <coda_cursor_goto_parent@plt>
   1435c:	add	r1, sp, #12
   14360:	mov	r0, r4
   14364:	bl	12314 <coda_cursor_get_type_class@plt>
   14368:	cmp	r0, #0
   1436c:	beq	14374 <export_data_element_to_ascii@@Base+0x2f0>
   14370:	bl	1889c <handle_coda_error@@Base>
   14374:	ldr	r3, [sp, #12]
   14378:	cmp	r3, #6
   1437c:	ldrls	pc, [pc, r3, lsl #2]
   14380:	b	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14384:	andeq	r4, r1, r0, lsr #7
   14388:	muleq	r1, r4, r6
   1438c:	andeq	r4, r1, r0, lsr #17
   14390:	andeq	r4, r1, r0, lsr #17
   14394:	andeq	r4, r1, r0, lsr #17
   14398:	andeq	r4, r1, r0, lsr #17
   1439c:	andeq	r4, r1, r8, asr #23
   143a0:	add	r1, sp, #20
   143a4:	mov	r0, r4
   143a8:	bl	1226c <coda_cursor_get_num_elements@plt>
   143ac:	cmp	r0, #0
   143b0:	beq	143b8 <export_data_element_to_ascii@@Base+0x334>
   143b4:	bl	1889c <handle_coda_error@@Base>
   143b8:	ldr	r3, [sp, #20]
   143bc:	cmp	r3, #0
   143c0:	ble	14528 <export_data_element_to_ascii@@Base+0x4a4>
   143c4:	add	r1, sp, #24
   143c8:	mov	r0, r4
   143cc:	bl	122cc <coda_cursor_get_type@plt>
   143d0:	cmp	r0, #0
   143d4:	beq	143dc <export_data_element_to_ascii@@Base+0x358>
   143d8:	bl	1889c <handle_coda_error@@Base>
   143dc:	add	r1, sp, #28
   143e0:	ldr	r0, [sp, #24]
   143e4:	bl	124d0 <coda_type_get_record_union_status@plt>
   143e8:	cmp	r0, #0
   143ec:	beq	143f4 <export_data_element_to_ascii@@Base+0x370>
   143f0:	bl	1889c <handle_coda_error@@Base>
   143f4:	ldr	r3, [sp, #28]
   143f8:	cmp	r3, #0
   143fc:	beq	1453c <export_data_element_to_ascii@@Base+0x4b8>
   14400:	add	r1, sp, #32
   14404:	mov	r0, r4
   14408:	bl	125cc <coda_cursor_get_available_union_field_index@plt>
   1440c:	cmp	r0, #0
   14410:	beq	14418 <export_data_element_to_ascii@@Base+0x394>
   14414:	bl	1889c <handle_coda_error@@Base>
   14418:	add	r2, sp, #40	; 0x28
   1441c:	ldr	r1, [sp, #32]
   14420:	ldr	r0, [sp, #24]
   14424:	bl	12614 <coda_type_get_record_field_name@plt>
   14428:	cmp	r0, #0
   1442c:	beq	14434 <export_data_element_to_ascii@@Base+0x3b0>
   14430:	bl	1889c <handle_coda_error@@Base>
   14434:	ldr	r1, [sp, #32]
   14438:	mov	r0, r4
   1443c:	bl	1238c <coda_cursor_goto_record_field_by_index@plt>
   14440:	cmp	r0, #0
   14444:	beq	1444c <export_data_element_to_ascii@@Base+0x3c8>
   14448:	bl	1889c <handle_coda_error@@Base>
   1444c:	ldr	r1, [sp, #40]	; 0x28
   14450:	ldr	r0, [pc, #2264]	; 14d30 <export_data_element_to_ascii@@Base+0xcac>
   14454:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14458:	ldr	r3, [pc, #2260]	; 14d34 <export_data_element_to_ascii@@Base+0xcb0>
   1445c:	ldr	r3, [r3]
   14460:	cmp	r3, #0
   14464:	beq	144d0 <export_data_element_to_ascii@@Base+0x44c>
   14468:	add	r1, sp, #64	; 0x40
   1446c:	mov	r0, r4
   14470:	bl	125e4 <coda_cursor_get_file_bit_offset@plt>
   14474:	cmp	r0, #0
   14478:	beq	14480 <export_data_element_to_ascii@@Base+0x3fc>
   1447c:	bl	1889c <handle_coda_error@@Base>
   14480:	ldrd	r6, [sp, #64]	; 0x40
   14484:	cmp	r6, #0
   14488:	sbcs	r3, r7, #0
   1448c:	blt	144d0 <export_data_element_to_ascii@@Base+0x44c>
   14490:	lsr	r0, r6, #3
   14494:	add	r2, sp, #96	; 0x60
   14498:	orr	r0, r0, r7, lsl #29
   1449c:	asr	r1, r7, #3
   144a0:	bl	12644 <coda_str64@plt>
   144a4:	add	r1, sp, #96	; 0x60
   144a8:	ldr	r0, [pc, #2184]	; 14d38 <export_data_element_to_ascii@@Base+0xcb4>
   144ac:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   144b0:	ldrd	r2, [sp, #64]	; 0x40
   144b4:	mov	r1, #0
   144b8:	and	r0, r2, #7
   144bc:	orrs	r1, r0, r1
   144c0:	beq	144d0 <export_data_element_to_ascii@@Base+0x44c>
   144c4:	and	r1, r2, #7
   144c8:	ldr	r0, [pc, #2156]	; 14d3c <export_data_element_to_ascii@@Base+0xcb8>
   144cc:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   144d0:	ldr	r0, [pc, #2152]	; 14d40 <export_data_element_to_ascii@@Base+0xcbc>
   144d4:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   144d8:	ldr	r3, [pc, #2120]	; 14d28 <export_data_element_to_ascii@@Base+0xca4>
   144dc:	mov	r6, r3
   144e0:	ldr	r2, [r3]
   144e4:	add	r2, r2, #1
   144e8:	str	r2, [r3]
   144ec:	ldr	r2, [pc, #2128]	; 14d44 <export_data_element_to_ascii@@Base+0xcc0>
   144f0:	ldr	r2, [r2]
   144f4:	cmp	r5, r2
   144f8:	movge	r1, #0
   144fc:	movlt	r1, #1
   14500:	orrs	r2, r1, r2, lsr #31
   14504:	beq	14530 <export_data_element_to_ascii@@Base+0x4ac>
   14508:	add	r1, r5, #1
   1450c:	mov	r0, r4
   14510:	bl	142e0 <export_data_element_to_ascii@@Base+0x25c>
   14514:	ldr	r3, [r6]
   14518:	sub	r3, r3, #1
   1451c:	str	r3, [r6]
   14520:	mov	r0, r4
   14524:	bl	123ec <coda_cursor_goto_parent@plt>
   14528:	add	sp, sp, #620	; 0x26c
   1452c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14530:	ldr	r0, [pc, #2064]	; 14d48 <export_data_element_to_ascii@@Base+0xcc4>
   14534:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14538:	b	14514 <export_data_element_to_ascii@@Base+0x490>
   1453c:	mov	r0, r4
   14540:	bl	12380 <coda_cursor_goto_first_record_field@plt>
   14544:	cmp	r0, #0
   14548:	beq	14550 <export_data_element_to_ascii@@Base+0x4cc>
   1454c:	bl	1889c <handle_coda_error@@Base>
   14550:	ldr	r7, [pc, #2012]	; 14d34 <export_data_element_to_ascii@@Base+0xcb0>
   14554:	ldr	r6, [pc, #1996]	; 14d28 <export_data_element_to_ascii@@Base+0xca4>
   14558:	mov	r3, #0
   1455c:	str	r3, [sp, #32]
   14560:	ldr	r1, [sp, #32]
   14564:	ldr	r3, [sp, #20]
   14568:	cmp	r1, r3
   1456c:	bge	14520 <export_data_element_to_ascii@@Base+0x49c>
   14570:	add	r2, sp, #40	; 0x28
   14574:	ldr	r0, [sp, #24]
   14578:	bl	12614 <coda_type_get_record_field_name@plt>
   1457c:	cmp	r0, #0
   14580:	beq	14588 <export_data_element_to_ascii@@Base+0x504>
   14584:	bl	1889c <handle_coda_error@@Base>
   14588:	ldr	r1, [sp, #40]	; 0x28
   1458c:	ldr	r0, [pc, #1948]	; 14d30 <export_data_element_to_ascii@@Base+0xcac>
   14590:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14594:	ldr	r3, [r7]
   14598:	cmp	r3, #0
   1459c:	beq	14608 <export_data_element_to_ascii@@Base+0x584>
   145a0:	add	r1, sp, #64	; 0x40
   145a4:	mov	r0, r4
   145a8:	bl	125e4 <coda_cursor_get_file_bit_offset@plt>
   145ac:	cmp	r0, #0
   145b0:	beq	145b8 <export_data_element_to_ascii@@Base+0x534>
   145b4:	bl	1889c <handle_coda_error@@Base>
   145b8:	ldrd	r8, [sp, #64]	; 0x40
   145bc:	cmp	r8, #0
   145c0:	sbcs	r3, r9, #0
   145c4:	blt	14608 <export_data_element_to_ascii@@Base+0x584>
   145c8:	lsr	r0, r8, #3
   145cc:	add	r2, sp, #96	; 0x60
   145d0:	orr	r0, r0, r9, lsl #29
   145d4:	asr	r1, r9, #3
   145d8:	bl	12644 <coda_str64@plt>
   145dc:	add	r1, sp, #96	; 0x60
   145e0:	ldr	r0, [pc, #1872]	; 14d38 <export_data_element_to_ascii@@Base+0xcb4>
   145e4:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   145e8:	ldrd	r2, [sp, #64]	; 0x40
   145ec:	mov	r1, #0
   145f0:	and	r0, r2, #7
   145f4:	orrs	r1, r0, r1
   145f8:	beq	14608 <export_data_element_to_ascii@@Base+0x584>
   145fc:	and	r1, r2, #7
   14600:	ldr	r0, [pc, #1844]	; 14d3c <export_data_element_to_ascii@@Base+0xcb8>
   14604:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14608:	ldr	r0, [pc, #1840]	; 14d40 <export_data_element_to_ascii@@Base+0xcbc>
   1460c:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14610:	ldr	r3, [r6]
   14614:	add	r3, r3, #1
   14618:	str	r3, [r6]
   1461c:	ldr	r3, [pc, #1824]	; 14d44 <export_data_element_to_ascii@@Base+0xcc0>
   14620:	ldr	r3, [r3]
   14624:	cmp	r5, r3
   14628:	movge	r2, #0
   1462c:	movlt	r2, #1
   14630:	orrs	r3, r2, r3, lsr #31
   14634:	beq	14688 <export_data_element_to_ascii@@Base+0x604>
   14638:	add	r1, r5, #1
   1463c:	mov	r0, r4
   14640:	bl	142e0 <export_data_element_to_ascii@@Base+0x25c>
   14644:	ldr	r3, [r6]
   14648:	ldr	r2, [sp, #32]
   1464c:	sub	r3, r3, #1
   14650:	str	r3, [r6]
   14654:	ldr	r3, [sp, #20]
   14658:	sub	r3, r3, #1
   1465c:	cmp	r3, r2
   14660:	ble	14678 <export_data_element_to_ascii@@Base+0x5f4>
   14664:	mov	r0, r4
   14668:	bl	12578 <coda_cursor_goto_next_record_field@plt>
   1466c:	cmp	r0, #0
   14670:	beq	14678 <export_data_element_to_ascii@@Base+0x5f4>
   14674:	bl	1889c <handle_coda_error@@Base>
   14678:	ldr	r3, [sp, #32]
   1467c:	add	r3, r3, #1
   14680:	str	r3, [sp, #32]
   14684:	b	14560 <export_data_element_to_ascii@@Base+0x4dc>
   14688:	ldr	r0, [pc, #1720]	; 14d48 <export_data_element_to_ascii@@Base+0xcc4>
   1468c:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14690:	b	14644 <export_data_element_to_ascii@@Base+0x5c0>
   14694:	add	r9, sp, #64	; 0x40
   14698:	mov	r2, r9
   1469c:	add	r1, sp, #28
   146a0:	mov	r0, r4
   146a4:	bl	12518 <coda_cursor_get_array_dim@plt>
   146a8:	cmp	r0, #0
   146ac:	beq	146b4 <export_data_element_to_ascii@@Base+0x630>
   146b0:	bl	1889c <handle_coda_error@@Base>
   146b4:	ldr	r2, [sp, #28]
   146b8:	cmp	r2, #0
   146bc:	blt	14528 <export_data_element_to_ascii@@Base+0x4a4>
   146c0:	mov	r3, #0
   146c4:	mov	r6, #1
   146c8:	add	r1, sp, #96	; 0x60
   146cc:	mov	r0, r3
   146d0:	cmp	r3, r2
   146d4:	bne	1482c <export_data_element_to_ascii@@Base+0x7a8>
   146d8:	cmp	r6, #0
   146dc:	ble	14528 <export_data_element_to_ascii@@Base+0x4a4>
   146e0:	mov	r0, r4
   146e4:	bl	1235c <coda_cursor_goto_first_array_element@plt>
   146e8:	cmp	r0, #0
   146ec:	beq	146f4 <export_data_element_to_ascii@@Base+0x670>
   146f0:	bl	1889c <handle_coda_error@@Base>
   146f4:	mov	r7, #0
   146f8:	add	r8, sp, #96	; 0x60
   146fc:	ldr	r0, [pc, #1608]	; 14d4c <export_data_element_to_ascii@@Base+0xcc8>
   14700:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14704:	ldr	fp, [pc, #1604]	; 14d50 <export_data_element_to_ascii@@Base+0xccc>
   14708:	mov	sl, #0
   1470c:	ldr	r2, [sp, #28]
   14710:	cmp	sl, r2
   14714:	blt	14840 <export_data_element_to_ascii@@Base+0x7bc>
   14718:	ldr	r0, [pc, #1588]	; 14d54 <export_data_element_to_ascii@@Base+0xcd0>
   1471c:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14720:	ldr	r3, [pc, #1548]	; 14d34 <export_data_element_to_ascii@@Base+0xcb0>
   14724:	ldr	r3, [r3]
   14728:	cmp	r3, #0
   1472c:	beq	14798 <export_data_element_to_ascii@@Base+0x714>
   14730:	add	r1, sp, #32
   14734:	mov	r0, r4
   14738:	bl	125e4 <coda_cursor_get_file_bit_offset@plt>
   1473c:	cmp	r0, #0
   14740:	beq	14748 <export_data_element_to_ascii@@Base+0x6c4>
   14744:	bl	1889c <handle_coda_error@@Base>
   14748:	ldrd	sl, [sp, #32]
   1474c:	cmp	sl, #0
   14750:	sbcs	r3, fp, #0
   14754:	blt	14798 <export_data_element_to_ascii@@Base+0x714>
   14758:	lsr	r0, sl, #3
   1475c:	add	r2, sp, #40	; 0x28
   14760:	orr	r0, r0, fp, lsl #29
   14764:	asr	r1, fp, #3
   14768:	bl	12644 <coda_str64@plt>
   1476c:	add	r1, sp, #40	; 0x28
   14770:	ldr	r0, [pc, #1472]	; 14d38 <export_data_element_to_ascii@@Base+0xcb4>
   14774:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14778:	ldrd	r2, [sp, #32]
   1477c:	mov	r1, #0
   14780:	and	r0, r2, #7
   14784:	orrs	r1, r0, r1
   14788:	beq	14798 <export_data_element_to_ascii@@Base+0x714>
   1478c:	and	r1, r2, #7
   14790:	ldr	r0, [pc, #1444]	; 14d3c <export_data_element_to_ascii@@Base+0xcb8>
   14794:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14798:	ldr	r0, [pc, #1440]	; 14d40 <export_data_element_to_ascii@@Base+0xcbc>
   1479c:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   147a0:	ldr	fp, [pc, #1408]	; 14d28 <export_data_element_to_ascii@@Base+0xca4>
   147a4:	ldr	r3, [fp]
   147a8:	add	r3, r3, #1
   147ac:	str	r3, [fp]
   147b0:	ldr	r3, [pc, #1420]	; 14d44 <export_data_element_to_ascii@@Base+0xcc0>
   147b4:	ldr	r3, [r3]
   147b8:	cmp	r5, r3
   147bc:	movge	r2, #0
   147c0:	movlt	r2, #1
   147c4:	orrs	r3, r2, r3, lsr #31
   147c8:	beq	1486c <export_data_element_to_ascii@@Base+0x7e8>
   147cc:	add	r1, r5, #1
   147d0:	mov	r0, r4
   147d4:	bl	142e0 <export_data_element_to_ascii@@Base+0x25c>
   147d8:	ldr	r3, [fp]
   147dc:	mov	r1, #0
   147e0:	sub	r3, r3, #1
   147e4:	str	r3, [fp]
   147e8:	ldr	r3, [sp, #28]
   147ec:	sub	r3, r3, #1
   147f0:	cmp	r3, #0
   147f4:	blt	14810 <export_data_element_to_ascii@@Base+0x78c>
   147f8:	ldr	r2, [r8, r3, lsl #2]
   147fc:	ldr	r0, [r9, r3, lsl #2]
   14800:	add	r2, r2, #1
   14804:	cmp	r2, r0
   14808:	str	r2, [r8, r3, lsl #2]
   1480c:	beq	14878 <export_data_element_to_ascii@@Base+0x7f4>
   14810:	sub	r3, r6, #1
   14814:	cmp	r3, r7
   14818:	bgt	14888 <export_data_element_to_ascii@@Base+0x804>
   1481c:	add	r7, r7, #1
   14820:	cmp	r6, r7
   14824:	bne	146fc <export_data_element_to_ascii@@Base+0x678>
   14828:	b	14520 <export_data_element_to_ascii@@Base+0x49c>
   1482c:	ldr	ip, [r9, r3, lsl #2]
   14830:	str	r0, [r1, r3, lsl #2]
   14834:	add	r3, r3, #1
   14838:	mul	r6, ip, r6
   1483c:	b	146d0 <export_data_element_to_ascii@@Base+0x64c>
   14840:	ldr	r1, [r8, sl, lsl #2]
   14844:	ldr	r0, [pc, #1292]	; 14d58 <export_data_element_to_ascii@@Base+0xcd4>
   14848:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   1484c:	ldr	r2, [sp, #28]
   14850:	sub	r2, r2, #1
   14854:	cmp	sl, r2
   14858:	bge	14864 <export_data_element_to_ascii@@Base+0x7e0>
   1485c:	mov	r0, fp
   14860:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14864:	add	sl, sl, #1
   14868:	b	1470c <export_data_element_to_ascii@@Base+0x688>
   1486c:	ldr	r0, [pc, #1236]	; 14d48 <export_data_element_to_ascii@@Base+0xcc4>
   14870:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14874:	b	147d8 <export_data_element_to_ascii@@Base+0x754>
   14878:	sub	r3, r3, #1
   1487c:	add	r2, r8, r3, lsl #2
   14880:	str	r1, [r2, #4]
   14884:	b	147f0 <export_data_element_to_ascii@@Base+0x76c>
   14888:	mov	r0, r4
   1488c:	bl	12458 <coda_cursor_goto_next_array_element@plt>
   14890:	cmp	r0, #0
   14894:	beq	1481c <export_data_element_to_ascii@@Base+0x798>
   14898:	bl	1889c <handle_coda_error@@Base>
   1489c:	b	1481c <export_data_element_to_ascii@@Base+0x798>
   148a0:	add	r1, sp, #40	; 0x28
   148a4:	mov	r0, r4
   148a8:	bl	12524 <coda_cursor_has_ascii_content@plt>
   148ac:	cmp	r0, #0
   148b0:	beq	148b8 <export_data_element_to_ascii@@Base+0x834>
   148b4:	bl	1889c <handle_coda_error@@Base>
   148b8:	ldr	r3, [sp, #40]	; 0x28
   148bc:	cmp	r3, #0
   148c0:	beq	1495c <export_data_element_to_ascii@@Base+0x8d8>
   148c4:	add	r1, sp, #96	; 0x60
   148c8:	mov	r0, r4
   148cc:	bl	1241c <coda_cursor_get_string_length@plt>
   148d0:	cmp	r0, #0
   148d4:	beq	148dc <export_data_element_to_ascii@@Base+0x858>
   148d8:	bl	1889c <handle_coda_error@@Base>
   148dc:	ldr	r0, [sp, #96]	; 0x60
   148e0:	add	r0, r0, #1
   148e4:	bl	123bc <malloc@plt>
   148e8:	subs	r5, r0, #0
   148ec:	bne	14914 <export_data_element_to_ascii@@Base+0x890>
   148f0:	ldr	r3, [pc, #1124]	; 14d5c <export_data_element_to_ascii@@Base+0xcd8>
   148f4:	ldr	r2, [sp, #96]	; 0x60
   148f8:	str	r3, [sp]
   148fc:	add	r2, r2, #1
   14900:	ldr	r3, [pc, #1112]	; 14d60 <export_data_element_to_ascii@@Base+0xcdc>
   14904:	ldr	r1, [pc, #1112]	; 14d64 <export_data_element_to_ascii@@Base+0xce0>
   14908:	mvn	r0, #0
   1490c:	bl	1223c <coda_set_error@plt>
   14910:	bl	1889c <handle_coda_error@@Base>
   14914:	ldr	r2, [sp, #96]	; 0x60
   14918:	mov	r1, r5
   1491c:	add	r2, r2, #1
   14920:	mov	r0, r4
   14924:	bl	123e0 <coda_cursor_read_string@plt>
   14928:	cmp	r0, #0
   1492c:	beq	14934 <export_data_element_to_ascii@@Base+0x8b0>
   14930:	bl	1889c <handle_coda_error@@Base>
   14934:	ldr	r0, [pc, #1068]	; 14d68 <export_data_element_to_ascii@@Base+0xce4>
   14938:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   1493c:	ldr	r1, [sp, #96]	; 0x60
   14940:	mov	r0, r5
   14944:	bl	14168 <export_data_element_to_ascii@@Base+0xe4>
   14948:	ldr	r1, [sp, #96]	; 0x60
   1494c:	ldr	r0, [pc, #1048]	; 14d6c <export_data_element_to_ascii@@Base+0xce8>
   14950:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14954:	mov	r0, r5
   14958:	bl	12284 <free@plt>
   1495c:	add	r1, sp, #32
   14960:	mov	r0, r4
   14964:	bl	123b0 <coda_cursor_get_read_type@plt>
   14968:	cmp	r0, #0
   1496c:	beq	14974 <export_data_element_to_ascii@@Base+0x8f0>
   14970:	bl	1889c <handle_coda_error@@Base>
   14974:	ldr	r3, [sp, #32]
   14978:	add	r3, r3, #1
   1497c:	cmp	r3, #13
   14980:	ldrls	pc, [pc, r3, lsl #2]
   14984:	b	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14988:	andeq	r4, r1, r8, lsr #23
   1498c:	ldrdeq	r4, [r1], -r0
   14990:	strdeq	r4, [r1], -r8
   14994:	ldrdeq	r4, [r1], -r0
   14998:	strdeq	r4, [r1], -r8
   1499c:	ldrdeq	r4, [r1], -r0
   149a0:	strdeq	r4, [r1], -r8
   149a4:	andeq	r4, r1, ip, lsl fp
   149a8:	andeq	r4, r1, ip, asr #22
   149ac:	andeq	r4, r1, r4, ror fp
   149b0:	andeq	r4, r1, r4, ror fp
   149b4:	andeq	r4, r1, r8, lsr #23
   149b8:	andeq	r4, r1, r8, lsr #23
   149bc:	andeq	r4, r1, r0, asr #19
   149c0:	add	r1, sp, #64	; 0x40
   149c4:	mov	r0, r4
   149c8:	bl	1259c <coda_cursor_get_bit_size@plt>
   149cc:	cmp	r0, #0
   149d0:	beq	149d8 <export_data_element_to_ascii@@Base+0x954>
   149d4:	bl	1889c <handle_coda_error@@Base>
   149d8:	ldrd	r0, [sp, #64]	; 0x40
   149dc:	mov	r3, #0
   149e0:	and	r2, r0, #7
   149e4:	orrs	r3, r2, r3
   149e8:	lsr	r6, r0, #3
   149ec:	movne	ip, #1
   149f0:	moveq	ip, #0
   149f4:	orr	r6, r6, r1, lsl #29
   149f8:	adds	r6, r6, ip
   149fc:	mov	r0, r6
   14a00:	bl	123bc <malloc@plt>
   14a04:	subs	r5, r0, #0
   14a08:	bne	14a2c <export_data_element_to_ascii@@Base+0x9a8>
   14a0c:	ldr	r3, [pc, #860]	; 14d70 <export_data_element_to_ascii@@Base+0xcec>
   14a10:	mov	r2, r6
   14a14:	str	r3, [sp]
   14a18:	ldr	r1, [pc, #836]	; 14d64 <export_data_element_to_ascii@@Base+0xce0>
   14a1c:	ldr	r3, [pc, #828]	; 14d60 <export_data_element_to_ascii@@Base+0xcdc>
   14a20:	mvn	r0, #0
   14a24:	bl	1223c <coda_set_error@plt>
   14a28:	bl	1889c <handle_coda_error@@Base>
   14a2c:	ldrd	r2, [sp, #64]	; 0x40
   14a30:	mov	r1, r5
   14a34:	mov	r0, r4
   14a38:	strd	r2, [sp]
   14a3c:	mov	r2, #0
   14a40:	mov	r3, #0
   14a44:	bl	12638 <coda_cursor_read_bits@plt>
   14a48:	cmp	r0, #0
   14a4c:	beq	14a54 <export_data_element_to_ascii@@Base+0x9d0>
   14a50:	bl	1889c <handle_coda_error@@Base>
   14a54:	ldr	r0, [pc, #780]	; 14d68 <export_data_element_to_ascii@@Base+0xce4>
   14a58:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14a5c:	mov	r1, r6
   14a60:	mov	r0, r5
   14a64:	bl	14168 <export_data_element_to_ascii@@Base+0xe4>
   14a68:	ldr	r0, [pc, #772]	; 14d74 <export_data_element_to_ascii@@Base+0xcf0>
   14a6c:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14a70:	ldr	r0, [sp, #64]	; 0x40
   14a74:	ldr	r1, [sp, #68]	; 0x44
   14a78:	add	r2, sp, #96	; 0x60
   14a7c:	lsr	r0, r0, #3
   14a80:	orr	r0, r0, r1, lsl #29
   14a84:	asr	r1, r1, #3
   14a88:	bl	12644 <coda_str64@plt>
   14a8c:	add	r1, sp, #96	; 0x60
   14a90:	ldr	r0, [pc, #736]	; 14d78 <export_data_element_to_ascii@@Base+0xcf4>
   14a94:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14a98:	ldrd	r2, [sp, #64]	; 0x40
   14a9c:	mov	r1, #0
   14aa0:	and	r0, r2, #7
   14aa4:	orrs	r1, r0, r1
   14aa8:	beq	14ab8 <export_data_element_to_ascii@@Base+0xa34>
   14aac:	and	r1, r2, #7
   14ab0:	ldr	r0, [pc, #644]	; 14d3c <export_data_element_to_ascii@@Base+0xcb8>
   14ab4:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14ab8:	ldr	r0, [pc, #700]	; 14d7c <export_data_element_to_ascii@@Base+0xcf8>
   14abc:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14ac0:	mov	r0, r5
   14ac4:	add	sp, sp, #620	; 0x26c
   14ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14acc:	b	12284 <free@plt>
   14ad0:	add	r1, sp, #96	; 0x60
   14ad4:	mov	r0, r4
   14ad8:	bl	125d8 <coda_cursor_read_int32@plt>
   14adc:	cmp	r0, #0
   14ae0:	beq	14ae8 <export_data_element_to_ascii@@Base+0xa64>
   14ae4:	bl	1889c <handle_coda_error@@Base>
   14ae8:	ldr	r1, [sp, #96]	; 0x60
   14aec:	ldr	r0, [pc, #652]	; 14d80 <export_data_element_to_ascii@@Base+0xcfc>
   14af0:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14af4:	b	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14af8:	add	r1, sp, #96	; 0x60
   14afc:	mov	r0, r4
   14b00:	bl	122a8 <coda_cursor_read_uint32@plt>
   14b04:	cmp	r0, #0
   14b08:	beq	14b10 <export_data_element_to_ascii@@Base+0xa8c>
   14b0c:	bl	1889c <handle_coda_error@@Base>
   14b10:	ldr	r1, [sp, #96]	; 0x60
   14b14:	ldr	r0, [pc, #616]	; 14d84 <export_data_element_to_ascii@@Base+0xd00>
   14b18:	b	14af0 <export_data_element_to_ascii@@Base+0xa6c>
   14b1c:	add	r1, sp, #64	; 0x40
   14b20:	mov	r0, r4
   14b24:	bl	1253c <coda_cursor_read_int64@plt>
   14b28:	cmp	r0, #0
   14b2c:	beq	14b34 <export_data_element_to_ascii@@Base+0xab0>
   14b30:	bl	1889c <handle_coda_error@@Base>
   14b34:	add	r2, sp, #96	; 0x60
   14b38:	ldrd	r0, [sp, #64]	; 0x40
   14b3c:	bl	12644 <coda_str64@plt>
   14b40:	add	r1, sp, #96	; 0x60
   14b44:	ldr	r0, [pc, #572]	; 14d88 <export_data_element_to_ascii@@Base+0xd04>
   14b48:	b	14af0 <export_data_element_to_ascii@@Base+0xa6c>
   14b4c:	add	r1, sp, #64	; 0x40
   14b50:	mov	r0, r4
   14b54:	bl	12428 <coda_cursor_read_uint64@plt>
   14b58:	cmp	r0, #0
   14b5c:	beq	14b64 <export_data_element_to_ascii@@Base+0xae0>
   14b60:	bl	1889c <handle_coda_error@@Base>
   14b64:	add	r2, sp, #96	; 0x60
   14b68:	ldrd	r0, [sp, #64]	; 0x40
   14b6c:	bl	12278 <coda_str64u@plt>
   14b70:	b	14b40 <export_data_element_to_ascii@@Base+0xabc>
   14b74:	add	r1, sp, #96	; 0x60
   14b78:	mov	r0, r4
   14b7c:	bl	12434 <coda_cursor_read_double@plt>
   14b80:	cmp	r0, #0
   14b84:	beq	14b8c <export_data_element_to_ascii@@Base+0xb08>
   14b88:	bl	1889c <handle_coda_error@@Base>
   14b8c:	ldr	r3, [sp, #32]
   14b90:	cmp	r3, #8
   14b94:	ldrd	r2, [sp, #96]	; 0x60
   14b98:	ldreq	r0, [pc, #492]	; 14d8c <export_data_element_to_ascii@@Base+0xd08>
   14b9c:	ldrne	r0, [pc, #492]	; 14d90 <export_data_element_to_ascii@@Base+0xd0c>
   14ba0:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14ba4:	b	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14ba8:	ldr	r3, [sp, #40]	; 0x28
   14bac:	cmp	r3, #0
   14bb0:	bne	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14bb4:	ldr	r3, [pc, #472]	; 14d94 <export_data_element_to_ascii@@Base+0xd10>
   14bb8:	mov	r2, #548	; 0x224
   14bbc:	ldr	r1, [pc, #412]	; 14d60 <export_data_element_to_ascii@@Base+0xcdc>
   14bc0:	ldr	r0, [pc, #464]	; 14d98 <export_data_element_to_ascii@@Base+0xd14>
   14bc4:	bl	12650 <__assert_fail@plt>
   14bc8:	add	r1, sp, #40	; 0x28
   14bcc:	mov	r0, r4
   14bd0:	bl	12350 <coda_cursor_get_special_type@plt>
   14bd4:	cmp	r0, #0
   14bd8:	beq	14be0 <export_data_element_to_ascii@@Base+0xb5c>
   14bdc:	bl	1889c <handle_coda_error@@Base>
   14be0:	ldr	r3, [sp, #40]	; 0x28
   14be4:	cmp	r3, #0
   14be8:	beq	14c1c <export_data_element_to_ascii@@Base+0xb98>
   14bec:	mov	r2, #520	; 0x208
   14bf0:	mov	r1, r4
   14bf4:	add	r0, sp, #96	; 0x60
   14bf8:	bl	122d8 <memcpy@plt>
   14bfc:	add	r0, sp, #96	; 0x60
   14c00:	bl	125c0 <coda_cursor_use_base_type_of_special_type@plt>
   14c04:	cmp	r0, #0
   14c08:	beq	14c10 <export_data_element_to_ascii@@Base+0xb8c>
   14c0c:	bl	1889c <handle_coda_error@@Base>
   14c10:	mov	r1, r5
   14c14:	add	r0, sp, #96	; 0x60
   14c18:	bl	142e0 <export_data_element_to_ascii@@Base+0x25c>
   14c1c:	ldr	r0, [sp, #40]	; 0x28
   14c20:	bl	121c4 <coda_type_get_special_type_name@plt>
   14c24:	mov	r1, r0
   14c28:	ldr	r0, [pc, #364]	; 14d9c <export_data_element_to_ascii@@Base+0xd18>
   14c2c:	bl	14254 <export_data_element_to_ascii@@Base+0x1d0>
   14c30:	ldr	r3, [sp, #40]	; 0x28
   14c34:	cmp	r3, #3
   14c38:	ldrls	pc, [pc, r3, lsl #2]
   14c3c:	b	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14c40:	andeq	r4, r1, r0, asr ip
   14c44:	andeq	r4, r1, ip, asr ip
   14c48:	andeq	r4, r1, r4, lsl #25
   14c4c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14c50:	ldr	r0, [pc, #232]	; 14d40 <export_data_element_to_ascii@@Base+0xcbc>
   14c54:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14c58:	b	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14c5c:	add	r1, sp, #96	; 0x60
   14c60:	mov	r0, r4
   14c64:	bl	12434 <coda_cursor_read_double@plt>
   14c68:	cmp	r0, #0
   14c6c:	beq	14c74 <export_data_element_to_ascii@@Base+0xbf0>
   14c70:	bl	1889c <handle_coda_error@@Base>
   14c74:	ldrd	r2, [sp, #96]	; 0x60
   14c78:	ldr	r0, [pc, #272]	; 14d90 <export_data_element_to_ascii@@Base+0xd0c>
   14c7c:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14c80:	b	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14c84:	add	r1, sp, #64	; 0x40
   14c88:	mov	r0, r4
   14c8c:	bl	12434 <coda_cursor_read_double@plt>
   14c90:	cmp	r0, #0
   14c94:	beq	14c9c <export_data_element_to_ascii@@Base+0xc18>
   14c98:	bl	1889c <handle_coda_error@@Base>
   14c9c:	vldr	d0, [sp, #64]	; 0x40
   14ca0:	bl	12440 <coda_isNaN@plt>
   14ca4:	cmp	r0, #0
   14ca8:	beq	14cb8 <export_data_element_to_ascii@@Base+0xc34>
   14cac:	ldrd	r2, [sp, #64]	; 0x40
   14cb0:	ldr	r0, [pc, #232]	; 14da0 <export_data_element_to_ascii@@Base+0xd1c>
   14cb4:	b	14c7c <export_data_element_to_ascii@@Base+0xbf8>
   14cb8:	vldr	d0, [sp, #64]	; 0x40
   14cbc:	bl	122e4 <coda_isInf@plt>
   14cc0:	cmp	r0, #0
   14cc4:	bne	14cac <export_data_element_to_ascii@@Base+0xc28>
   14cc8:	add	r1, sp, #96	; 0x60
   14ccc:	ldr	r0, [pc, #208]	; 14da4 <export_data_element_to_ascii@@Base+0xd20>
   14cd0:	vldr	d0, [sp, #64]	; 0x40
   14cd4:	bl	12260 <coda_time_double_to_string@plt>
   14cd8:	cmp	r0, #0
   14cdc:	ldrne	r0, [pc, #196]	; 14da8 <export_data_element_to_ascii@@Base+0xd24>
   14ce0:	bne	14c54 <export_data_element_to_ascii@@Base+0xbd0>
   14ce4:	add	r1, sp, #96	; 0x60
   14ce8:	ldr	r0, [pc, #188]	; 14dac <export_data_element_to_ascii@@Base+0xd28>
   14cec:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14cf0:	b	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14cf4:	add	r2, sp, #96	; 0x60
   14cf8:	add	r1, sp, #64	; 0x40
   14cfc:	mov	r0, r4
   14d00:	bl	124dc <coda_cursor_read_complex_double_split@plt>
   14d04:	cmp	r0, #0
   14d08:	beq	14d10 <export_data_element_to_ascii@@Base+0xc8c>
   14d0c:	bl	1889c <handle_coda_error@@Base>
   14d10:	ldrd	r2, [sp, #96]	; 0x60
   14d14:	ldr	r0, [pc, #148]	; 14db0 <export_data_element_to_ascii@@Base+0xd2c>
   14d18:	strd	r2, [sp]
   14d1c:	ldrd	r2, [sp, #64]	; 0x40
   14d20:	bl	14134 <export_data_element_to_ascii@@Base+0xb0>
   14d24:	b	14528 <export_data_element_to_ascii@@Base+0x4a4>
   14d28:	andeq	fp, r2, r4, asr #3
   14d2c:	andeq	r8, r1, sl, asr #25
   14d30:	andeq	r9, r1, r2, lsr #3
   14d34:	andeq	fp, r2, ip, lsr #3
   14d38:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14d3c:	ldrdeq	r8, [r1], -ip
   14d40:	andeq	sl, r1, r1, asr #5
   14d44:			; <UNDEFINED> instruction: 0x0002b1b0
   14d48:	andeq	r8, r1, r0, ror #25
   14d4c:			; <UNDEFINED> instruction: 0x00018eb2
   14d50:	andeq	r8, r1, r6, lsr #29
   14d54:	andeq	r9, r1, lr, asr #17
   14d58:	ldrdeq	r8, [r1], -sp
   14d5c:	muleq	r0, sl, r1
   14d60:	andeq	r8, r1, r3, ror ip
   14d64:			; <UNDEFINED> instruction: 0x00018bbf
   14d68:	andeq	r9, r1, sl, asr #32
   14d6c:	andeq	r8, r1, r5, ror #25
   14d70:			; <UNDEFINED> instruction: 0x000001bf
   14d74:	strdeq	r8, [r1], -r5
   14d78:	andeq	r9, r1, r3, lsr r1
   14d7c:	strdeq	r8, [r1], -r2
   14d80:	strdeq	r8, [r1], -lr
   14d84:	andeq	r8, r1, r3, lsl #26
   14d88:	muleq	r1, sl, r1
   14d8c:	andeq	r8, r1, r8, lsl #26
   14d90:	andeq	r8, r1, r6, lsr #26
   14d94:	andeq	r8, r1, r5, ror #24
   14d98:	andeq	r8, r1, lr, lsl #26
   14d9c:	andeq	r8, r1, r0, lsr #26
   14da0:	andeq	r8, r1, r5, lsr #26
   14da4:	andeq	r8, r1, ip, lsr ip
   14da8:	andeq	r8, r1, sp, lsr #26
   14dac:	muleq	r1, r9, r1
   14db0:	andeq	r8, r1, r8, asr #26

00014db4 <print_debug_data@@Base>:
   14db4:	push	{r4, r5, r6, r7, r8, lr}
   14db8:	subs	r6, r0, #0
   14dbc:	sub	sp, sp, #536	; 0x218
   14dc0:	mov	r7, r1
   14dc4:	mov	r8, r2
   14dc8:	add	r5, sp, #8
   14dcc:	ldr	r4, [pc, #292]	; 14ef8 <print_debug_data@@Base+0x144>
   14dd0:	bne	14e8c <print_debug_data@@Base+0xd8>
   14dd4:	mov	r1, r5
   14dd8:	ldr	r0, [r4]
   14ddc:	bl	12248 <coda_open@plt>
   14de0:	cmp	r0, #0
   14de4:	beq	14dfc <print_debug_data@@Base+0x48>
   14de8:	bl	125fc <coda_get_errno@plt>
   14dec:	ldr	r3, [r0]
   14df0:	cmn	r3, #21
   14df4:	beq	14ea8 <print_debug_data@@Base+0xf4>
   14df8:	bl	1889c <handle_coda_error@@Base>
   14dfc:	add	r1, sp, #12
   14e00:	ldr	r0, [sp, #8]
   14e04:	bl	1232c <coda_get_product_format@plt>
   14e08:	cmp	r0, #0
   14e0c:	beq	14e14 <print_debug_data@@Base+0x60>
   14e10:	bl	1889c <handle_coda_error@@Base>
   14e14:	ldr	r3, [sp, #12]
   14e18:	ldr	r2, [pc, #220]	; 14efc <print_debug_data@@Base+0x148>
   14e1c:	cmp	r3, #2
   14e20:	movhi	r3, #0
   14e24:	movls	r3, #1
   14e28:	ldr	r1, [sp, #8]
   14e2c:	add	r0, sp, #16
   14e30:	str	r3, [r2]
   14e34:	bl	12368 <coda_cursor_set_product@plt>
   14e38:	cmp	r0, #0
   14e3c:	beq	14e44 <print_debug_data@@Base+0x90>
   14e40:	bl	1889c <handle_coda_error@@Base>
   14e44:	ldr	r3, [pc, #180]	; 14f00 <print_debug_data@@Base+0x14c>
   14e48:	ldr	r1, [r3]
   14e4c:	cmp	r1, #0
   14e50:	beq	14e68 <print_debug_data@@Base+0xb4>
   14e54:	add	r0, sp, #16
   14e58:	bl	12554 <coda_cursor_goto@plt>
   14e5c:	cmp	r0, #0
   14e60:	beq	14e68 <print_debug_data@@Base+0xb4>
   14e64:	bl	1889c <handle_coda_error@@Base>
   14e68:	mov	r0, #0
   14e6c:	bl	121f4 <coda_set_option_perform_boundary_checks@plt>
   14e70:	mov	r1, #0
   14e74:	add	r0, sp, #16
   14e78:	bl	142e0 <export_data_element_to_ascii@@Base+0x25c>
   14e7c:	ldr	r0, [sp, #8]
   14e80:	bl	12530 <coda_close@plt>
   14e84:	add	sp, sp, #536	; 0x218
   14e88:	pop	{r4, r5, r6, r7, r8, pc}
   14e8c:	str	r5, [sp]
   14e90:	mov	r3, r2
   14e94:	ldr	r0, [r4]
   14e98:	mov	r2, r1
   14e9c:	mov	r1, r6
   14ea0:	bl	12464 <coda_open_as@plt>
   14ea4:	b	14de0 <print_debug_data@@Base+0x2c>
   14ea8:	mov	r0, #0
   14eac:	bl	12290 <coda_set_option_use_mmap@plt>
   14eb0:	cmp	r6, #0
   14eb4:	bne	14edc <print_debug_data@@Base+0x128>
   14eb8:	mov	r1, r5
   14ebc:	ldr	r0, [r4]
   14ec0:	bl	12248 <coda_open@plt>
   14ec4:	mov	r4, r0
   14ec8:	mov	r0, #1
   14ecc:	bl	12290 <coda_set_option_use_mmap@plt>
   14ed0:	cmp	r4, #0
   14ed4:	bne	14df8 <print_debug_data@@Base+0x44>
   14ed8:	b	14dfc <print_debug_data@@Base+0x48>
   14edc:	str	r5, [sp]
   14ee0:	mov	r3, r8
   14ee4:	mov	r2, r7
   14ee8:	mov	r1, r6
   14eec:	ldr	r0, [r4]
   14ef0:	bl	12464 <coda_open_as@plt>
   14ef4:	b	14ec4 <print_debug_data@@Base+0x110>
   14ef8:	strdeq	fp, [r2], -r0
   14efc:	andeq	fp, r2, ip, lsr #3
   14f00:	strheq	ip, [r2], -r0
   14f04:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14f08:	mov	r7, r0
   14f0c:	mov	r5, r1
   14f10:	ldr	r0, [pc, #516]	; 1511c <print_debug_data@@Base+0x368>
   14f14:	mov	r1, sp
   14f18:	mov	r6, r2
   14f1c:	bl	12314 <coda_cursor_get_type_class@plt>
   14f20:	cmp	r0, #0
   14f24:	beq	14f2c <print_debug_data@@Base+0x178>
   14f28:	bl	1889c <handle_coda_error@@Base>
   14f2c:	ldr	r3, [sp]
   14f30:	ldr	r4, [pc, #488]	; 15120 <print_debug_data@@Base+0x36c>
   14f34:	cmp	r3, #0
   14f38:	beq	15078 <print_debug_data@@Base+0x2c4>
   14f3c:	cmp	r3, #1
   14f40:	bne	15108 <print_debug_data@@Base+0x354>
   14f44:	mov	r3, #80	; 0x50
   14f48:	mla	r3, r3, r5, r4
   14f4c:	ldr	r2, [r3, #800]	; 0x320
   14f50:	ldr	r3, [r4, #3360]	; 0xd20
   14f54:	cmp	r5, r3
   14f58:	blt	14f70 <print_debug_data@@Base+0x1bc>
   14f5c:	ldr	r3, [pc, #448]	; 15124 <print_debug_data@@Base+0x370>
   14f60:	ldr	r2, [pc, #448]	; 15128 <print_debug_data@@Base+0x374>
   14f64:	ldr	r1, [pc, #448]	; 1512c <print_debug_data@@Base+0x378>
   14f68:	ldr	r0, [pc, #448]	; 15130 <print_debug_data@@Base+0x37c>
   14f6c:	bl	12650 <__assert_fail@plt>
   14f70:	add	r8, r5, #1
   14f74:	mov	r1, #80	; 0x50
   14f78:	cmp	r5, #0
   14f7c:	mla	r0, r1, r8, r4
   14f80:	mla	r1, r1, r5, r4
   14f84:	streq	r5, [r4, #844]	; 0x34c
   14f88:	mov	r5, #1
   14f8c:	ldr	ip, [r1, #844]	; 0x34c
   14f90:	ldr	r3, [r1, #840]	; 0x348
   14f94:	mul	r3, r3, ip
   14f98:	str	r3, [r0, #844]	; 0x34c
   14f9c:	ldr	r0, [r1, #804]	; 0x324
   14fa0:	ldr	r3, [pc, #396]	; 15134 <print_debug_data@@Base+0x380>
   14fa4:	add	r0, r2, r0
   14fa8:	add	r3, r3, r2, lsl #2
   14fac:	cmp	r2, r0
   14fb0:	blt	15004 <print_debug_data@@Base+0x250>
   14fb4:	cmp	r5, #0
   14fb8:	ble	150a8 <print_debug_data@@Base+0x2f4>
   14fbc:	ldr	r0, [pc, #344]	; 1511c <print_debug_data@@Base+0x368>
   14fc0:	bl	1235c <coda_cursor_goto_first_array_element@plt>
   14fc4:	cmp	r0, #0
   14fc8:	beq	14fd0 <print_debug_data@@Base+0x21c>
   14fcc:	bl	1889c <handle_coda_error@@Base>
   14fd0:	mov	r3, #80	; 0x50
   14fd4:	mov	sl, #0
   14fd8:	mla	r4, r3, r8, r4
   14fdc:	mov	r2, r6
   14fe0:	mov	r1, r8
   14fe4:	add	r0, r7, #1
   14fe8:	bl	14f04 <print_debug_data@@Base+0x150>
   14fec:	subs	r9, r0, #0
   14ff0:	beq	1502c <print_debug_data@@Base+0x278>
   14ff4:	ldr	r0, [pc, #288]	; 1511c <print_debug_data@@Base+0x368>
   14ff8:	bl	123ec <coda_cursor_goto_parent@plt>
   14ffc:	mov	r9, #1
   15000:	b	1506c <print_debug_data@@Base+0x2b8>
   15004:	ldr	ip, [r3, #72]	; 0x48
   15008:	add	r2, r2, #1
   1500c:	cmp	ip, #0
   15010:	add	r3, r3, #4
   15014:	ldrne	ip, [r3, #104]	; 0x68
   15018:	ldrne	lr, [r1, #844]	; 0x34c
   1501c:	ldreq	ip, [r3]
   15020:	ldrne	ip, [ip, lr, lsl #2]
   15024:	mul	r5, ip, r5
   15028:	b	14fac <print_debug_data@@Base+0x1f8>
   1502c:	sub	r3, r5, #1
   15030:	cmp	r3, sl
   15034:	ble	15058 <print_debug_data@@Base+0x2a4>
   15038:	ldr	r0, [pc, #220]	; 1511c <print_debug_data@@Base+0x368>
   1503c:	bl	12458 <coda_cursor_goto_next_array_element@plt>
   15040:	cmp	r0, #0
   15044:	beq	1504c <print_debug_data@@Base+0x298>
   15048:	bl	1889c <handle_coda_error@@Base>
   1504c:	ldr	r3, [r4, #844]	; 0x34c
   15050:	add	r3, r3, #1
   15054:	str	r3, [r4, #844]	; 0x34c
   15058:	add	sl, sl, #1
   1505c:	cmp	r5, sl
   15060:	bne	14fdc <print_debug_data@@Base+0x228>
   15064:	ldr	r0, [pc, #176]	; 1511c <print_debug_data@@Base+0x368>
   15068:	bl	123ec <coda_cursor_goto_parent@plt>
   1506c:	mov	r0, r9
   15070:	add	sp, sp, #8
   15074:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15078:	add	r8, r6, #872	; 0x368
   1507c:	add	r2, sp, #4
   15080:	add	r3, r4, r8, lsl #2
   15084:	add	r0, r4, #144	; 0x90
   15088:	ldr	r1, [r3, #4]
   1508c:	bl	12224 <coda_cursor_get_record_field_available_status@plt>
   15090:	cmp	r0, #0
   15094:	beq	1509c <print_debug_data@@Base+0x2e8>
   15098:	bl	1889c <handle_coda_error@@Base>
   1509c:	ldr	r3, [sp, #4]
   150a0:	cmp	r3, #0
   150a4:	bne	150b0 <print_debug_data@@Base+0x2fc>
   150a8:	mov	r9, #0
   150ac:	b	1506c <print_debug_data@@Base+0x2b8>
   150b0:	ldr	r3, [r4, #3748]	; 0xea4
   150b4:	sub	r3, r3, #1
   150b8:	cmp	r6, r3
   150bc:	beq	14ffc <print_debug_data@@Base+0x248>
   150c0:	add	r4, r4, r8, lsl #2
   150c4:	ldr	r0, [pc, #80]	; 1511c <print_debug_data@@Base+0x368>
   150c8:	ldr	r1, [r4, #4]
   150cc:	bl	1238c <coda_cursor_goto_record_field_by_index@plt>
   150d0:	cmp	r0, #0
   150d4:	beq	150dc <print_debug_data@@Base+0x328>
   150d8:	bl	1889c <handle_coda_error@@Base>
   150dc:	add	r2, r6, #1
   150e0:	mov	r1, r5
   150e4:	add	r0, r7, #1
   150e8:	bl	14f04 <print_debug_data@@Base+0x150>
   150ec:	str	r0, [sp, #4]
   150f0:	ldr	r0, [pc, #36]	; 1511c <print_debug_data@@Base+0x368>
   150f4:	bl	123ec <coda_cursor_goto_parent@plt>
   150f8:	ldr	r3, [sp, #4]
   150fc:	cmp	r3, #0
   15100:	beq	150a8 <print_debug_data@@Base+0x2f4>
   15104:	b	14ffc <print_debug_data@@Base+0x248>
   15108:	ldr	r3, [pc, #20]	; 15124 <print_debug_data@@Base+0x370>
   1510c:	ldr	r2, [pc, #36]	; 15138 <print_debug_data@@Base+0x384>
   15110:	ldr	r1, [pc, #20]	; 1512c <print_debug_data@@Base+0x378>
   15114:	ldr	r0, [pc, #32]	; 1513c <print_debug_data@@Base+0x388>
   15118:	b	14f6c <print_debug_data@@Base+0x1b8>
   1511c:	andeq	fp, r2, r0, lsl #5
   15120:	strdeq	fp, [r2], -r0
   15124:	andeq	r8, r1, r3, asr sp
   15128:	andeq	r0, r0, lr, ror r2
   1512c:	andeq	r8, r1, r4, asr #27
   15130:	andeq	r8, r1, sp, lsl #28
   15134:	strheq	ip, [r2], -r8
   15138:	ldrdeq	r0, [r0], -r9
   1513c:	andeq	r8, r1, r8, asr #25
   15140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15144:	sub	sp, sp, #44	; 0x2c
   15148:	mov	sl, r0
   1514c:	mov	r5, r1
   15150:	ldr	r0, [pc, #956]	; 15514 <print_debug_data@@Base+0x760>
   15154:	mov	r1, sp
   15158:	mov	r6, r2
   1515c:	bl	12314 <coda_cursor_get_type_class@plt>
   15160:	cmp	r0, #0
   15164:	beq	1516c <print_debug_data@@Base+0x3b8>
   15168:	bl	1889c <handle_coda_error@@Base>
   1516c:	ldr	r3, [sp]
   15170:	ldr	r4, [pc, #928]	; 15518 <print_debug_data@@Base+0x764>
   15174:	cmp	r3, #5
   15178:	ldrls	pc, [pc, r3, lsl #2]
   1517c:	b	15500 <print_debug_data@@Base+0x74c>
   15180:	andeq	r5, r1, r0, ror #6
   15184:	muleq	r1, r8, r1
   15188:	andeq	r5, r1, r0, lsl #10
   1518c:	andeq	r5, r1, r0, lsl #10
   15190:	andeq	r5, r1, r8, lsr #8
   15194:	andeq	r5, r1, r8, lsr #8
   15198:	mov	r3, #80	; 0x50
   1519c:	ldr	r8, [pc, #888]	; 1551c <print_debug_data@@Base+0x768>
   151a0:	mla	r3, r3, r5, r4
   151a4:	ldr	r2, [r3, #800]	; 0x320
   151a8:	ldr	r3, [r4, #3360]	; 0xd20
   151ac:	cmp	r5, r3
   151b0:	lsl	r7, r2, #2
   151b4:	bne	1527c <print_debug_data@@Base+0x4c8>
   151b8:	add	r6, sp, #8
   151bc:	mov	r2, r6
   151c0:	add	r1, sp, #4
   151c4:	ldr	r0, [pc, #840]	; 15514 <print_debug_data@@Base+0x760>
   151c8:	bl	12518 <coda_cursor_get_array_dim@plt>
   151cc:	cmp	r0, #0
   151d0:	beq	151d8 <print_debug_data@@Base+0x424>
   151d4:	bl	1889c <handle_coda_error@@Base>
   151d8:	mov	r3, #80	; 0x50
   151dc:	mul	r5, r3, r5
   151e0:	ldr	r3, [sp, #4]
   151e4:	add	r1, r4, r5
   151e8:	ldr	r2, [r1, #804]	; 0x324
   151ec:	cmp	r2, r3
   151f0:	bne	15218 <print_debug_data@@Base+0x464>
   151f4:	add	r5, r5, #804	; 0x324
   151f8:	add	r3, r8, r7
   151fc:	add	r4, r4, r5
   15200:	mov	r0, #0
   15204:	ldr	r2, [r1, #804]	; 0x324
   15208:	cmp	r0, r2
   1520c:	blt	1522c <print_debug_data@@Base+0x478>
   15210:	add	sp, sp, #44	; 0x2c
   15214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15218:	ldr	r3, [pc, #768]	; 15520 <print_debug_data@@Base+0x76c>
   1521c:	ldr	r1, [pc, #768]	; 15524 <print_debug_data@@Base+0x770>
   15220:	ldr	r0, [pc, #768]	; 15528 <print_debug_data@@Base+0x774>
   15224:	mov	r2, #125	; 0x7d
   15228:	bl	12650 <__assert_fail@plt>
   1522c:	ldr	r2, [r4, #4]!
   15230:	cmn	r2, #1
   15234:	bne	15270 <print_debug_data@@Base+0x4bc>
   15238:	ldr	ip, [r3, #108]	; 0x6c
   1523c:	ldr	lr, [r1, #844]	; 0x34c
   15240:	ldr	r2, [r6, r0, lsl #2]
   15244:	str	r2, [ip, lr, lsl #2]
   15248:	ldr	ip, [r3, #4]
   1524c:	cmn	ip, #1
   15250:	streq	r2, [r3, #4]
   15254:	beq	1526c <print_debug_data@@Base+0x4b8>
   15258:	cmp	r2, ip
   1525c:	ldr	ip, [r3, #36]	; 0x24
   15260:	strgt	r2, [r3, #4]
   15264:	cmp	r2, ip
   15268:	bge	15270 <print_debug_data@@Base+0x4bc>
   1526c:	str	r2, [r3, #36]	; 0x24
   15270:	add	r0, r0, #1
   15274:	add	r3, r3, #4
   15278:	b	15204 <print_debug_data@@Base+0x450>
   1527c:	mov	r3, #80	; 0x50
   15280:	cmp	r5, #0
   15284:	streq	r5, [r4, #844]	; 0x34c
   15288:	add	r9, r5, #1
   1528c:	mla	r5, r3, r5, r4
   15290:	mla	r1, r3, r9, r4
   15294:	ldr	r0, [r5, #844]	; 0x34c
   15298:	ldr	r3, [r5, #840]	; 0x348
   1529c:	mov	fp, #1
   152a0:	mul	r3, r3, r0
   152a4:	str	r3, [r1, #844]	; 0x34c
   152a8:	ldr	r1, [r5, #804]	; 0x324
   152ac:	add	r3, r8, r7
   152b0:	add	r1, r2, r1
   152b4:	cmp	r2, r1
   152b8:	blt	15338 <print_debug_data@@Base+0x584>
   152bc:	cmp	fp, #0
   152c0:	ble	15210 <print_debug_data@@Base+0x45c>
   152c4:	ldr	r0, [pc, #584]	; 15514 <print_debug_data@@Base+0x760>
   152c8:	bl	1235c <coda_cursor_goto_first_array_element@plt>
   152cc:	cmp	r0, #0
   152d0:	beq	152d8 <print_debug_data@@Base+0x524>
   152d4:	bl	1889c <handle_coda_error@@Base>
   152d8:	mov	r3, #80	; 0x50
   152dc:	mov	r5, #0
   152e0:	mla	r4, r3, r9, r4
   152e4:	mov	r2, r6
   152e8:	mov	r1, r9
   152ec:	add	r0, sl, #1
   152f0:	bl	15140 <print_debug_data@@Base+0x38c>
   152f4:	sub	r3, fp, #1
   152f8:	cmp	r3, r5
   152fc:	ble	15320 <print_debug_data@@Base+0x56c>
   15300:	ldr	r0, [pc, #524]	; 15514 <print_debug_data@@Base+0x760>
   15304:	bl	12458 <coda_cursor_goto_next_array_element@plt>
   15308:	cmp	r0, #0
   1530c:	beq	15314 <print_debug_data@@Base+0x560>
   15310:	bl	1889c <handle_coda_error@@Base>
   15314:	ldr	r3, [r4, #844]	; 0x34c
   15318:	add	r3, r3, #1
   1531c:	str	r3, [r4, #844]	; 0x34c
   15320:	add	r5, r5, #1
   15324:	cmp	fp, r5
   15328:	bne	152e4 <print_debug_data@@Base+0x530>
   1532c:	ldr	r0, [pc, #480]	; 15514 <print_debug_data@@Base+0x760>
   15330:	bl	123ec <coda_cursor_goto_parent@plt>
   15334:	b	15210 <print_debug_data@@Base+0x45c>
   15338:	ldr	r0, [r3, #72]	; 0x48
   1533c:	add	r2, r2, #1
   15340:	cmp	r0, #0
   15344:	add	r3, r3, #4
   15348:	ldrne	r0, [r3, #104]	; 0x68
   1534c:	ldrne	ip, [r5, #844]	; 0x34c
   15350:	ldreq	r0, [r3]
   15354:	ldrne	r0, [r0, ip, lsl #2]
   15358:	mul	fp, r0, fp
   1535c:	b	152b4 <print_debug_data@@Base+0x500>
   15360:	add	r7, r6, #872	; 0x368
   15364:	add	r2, sp, #8
   15368:	add	r3, r4, r7, lsl #2
   1536c:	ldr	r0, [pc, #416]	; 15514 <print_debug_data@@Base+0x760>
   15370:	ldr	r1, [r3, #4]
   15374:	bl	12224 <coda_cursor_get_record_field_available_status@plt>
   15378:	cmp	r0, #0
   1537c:	beq	15384 <print_debug_data@@Base+0x5d0>
   15380:	bl	1889c <handle_coda_error@@Base>
   15384:	ldr	r1, [sp, #8]
   15388:	cmp	r1, #0
   1538c:	beq	153c0 <print_debug_data@@Base+0x60c>
   15390:	add	r4, r4, r7, lsl #2
   15394:	ldr	r0, [pc, #376]	; 15514 <print_debug_data@@Base+0x760>
   15398:	ldr	r1, [r4, #4]
   1539c:	bl	1238c <coda_cursor_goto_record_field_by_index@plt>
   153a0:	cmp	r0, #0
   153a4:	beq	153ac <print_debug_data@@Base+0x5f8>
   153a8:	bl	1889c <handle_coda_error@@Base>
   153ac:	add	r2, r6, #1
   153b0:	mov	r1, r5
   153b4:	add	r0, sl, #1
   153b8:	bl	15140 <print_debug_data@@Base+0x38c>
   153bc:	b	1532c <print_debug_data@@Base+0x578>
   153c0:	ldr	r2, [r4, #3360]	; 0xd20
   153c4:	mov	r3, #80	; 0x50
   153c8:	mul	r3, r3, r2
   153cc:	add	r0, r3, #804	; 0x324
   153d0:	add	r0, r4, r0
   153d4:	add	r4, r4, r3
   153d8:	ldr	r3, [pc, #316]	; 1551c <print_debug_data@@Base+0x768>
   153dc:	ldr	r2, [r4, #800]	; 0x320
   153e0:	add	r3, r3, r2, lsl #2
   153e4:	mov	r2, r1
   153e8:	ldr	ip, [r4, #804]	; 0x324
   153ec:	cmp	r1, ip
   153f0:	bge	15210 <print_debug_data@@Base+0x45c>
   153f4:	ldr	ip, [r0, #4]!
   153f8:	cmn	ip, #1
   153fc:	bne	1541c <print_debug_data@@Base+0x668>
   15400:	ldr	ip, [r3, #108]	; 0x6c
   15404:	ldr	lr, [r4, #844]	; 0x34c
   15408:	str	r2, [ip, lr, lsl #2]
   1540c:	ldr	ip, [r3, #4]
   15410:	str	r2, [r3, #36]	; 0x24
   15414:	cmn	ip, #1
   15418:	streq	r2, [r3, #4]
   1541c:	add	r1, r1, #1
   15420:	add	r3, r3, #4
   15424:	b	153e8 <print_debug_data@@Base+0x634>
   15428:	ldr	r2, [r4, #3360]	; 0xd20
   1542c:	cmp	r5, r2
   15430:	ldrne	r3, [pc, #232]	; 15520 <print_debug_data@@Base+0x76c>
   15434:	movne	r2, #252	; 0xfc
   15438:	ldrne	r1, [pc, #228]	; 15524 <print_debug_data@@Base+0x770>
   1543c:	ldrne	r0, [pc, #232]	; 1552c <print_debug_data@@Base+0x778>
   15440:	bne	15228 <print_debug_data@@Base+0x474>
   15444:	cmp	r3, #4
   15448:	bne	154e4 <print_debug_data@@Base+0x730>
   1544c:	add	r1, sp, #4
   15450:	ldr	r0, [pc, #188]	; 15514 <print_debug_data@@Base+0x760>
   15454:	bl	1241c <coda_cursor_get_string_length@plt>
   15458:	cmp	r0, #0
   1545c:	beq	15464 <print_debug_data@@Base+0x6b0>
   15460:	bl	1889c <handle_coda_error@@Base>
   15464:	ldr	r2, [sp, #4]
   15468:	asr	r3, r2, #31
   1546c:	strd	r2, [sp, #8]
   15470:	mov	r3, #80	; 0x50
   15474:	ldr	r2, [pc, #160]	; 1551c <print_debug_data@@Base+0x768>
   15478:	mla	r4, r3, r5, r4
   1547c:	ldrd	r0, [sp, #8]
   15480:	ldr	r3, [r4, #800]	; 0x320
   15484:	ldr	lr, [r4, #844]	; 0x34c
   15488:	add	ip, r2, r3, lsl #2
   1548c:	ldr	ip, [ip, #108]	; 0x6c
   15490:	str	r0, [ip, lr, lsl #2]
   15494:	add	lr, r2, r3, lsl #2
   15498:	add	r3, r3, #8
   1549c:	ldr	r4, [lr, #4]
   154a0:	mov	ip, r2
   154a4:	cmn	r4, #1
   154a8:	streq	r0, [lr, #4]
   154ac:	addeq	r3, r2, r3, lsl #2
   154b0:	beq	154dc <print_debug_data@@Base+0x728>
   154b4:	add	r3, ip, r3, lsl #2
   154b8:	asr	r5, r4, #31
   154bc:	cmp	r4, r0
   154c0:	ldr	r4, [r3, #4]
   154c4:	sbcs	r2, r5, r1
   154c8:	strlt	r0, [lr, #4]
   154cc:	asr	r5, r4, #31
   154d0:	cmp	r0, r4
   154d4:	sbcs	r2, r1, r5
   154d8:	bge	15210 <print_debug_data@@Base+0x45c>
   154dc:	str	r0, [r3, #4]
   154e0:	b	15210 <print_debug_data@@Base+0x45c>
   154e4:	add	r1, sp, #8
   154e8:	ldr	r0, [pc, #36]	; 15514 <print_debug_data@@Base+0x760>
   154ec:	bl	121b8 <coda_cursor_get_byte_size@plt>
   154f0:	cmp	r0, #0
   154f4:	beq	15470 <print_debug_data@@Base+0x6bc>
   154f8:	bl	1889c <handle_coda_error@@Base>
   154fc:	b	15470 <print_debug_data@@Base+0x6bc>
   15500:	ldr	r3, [pc, #24]	; 15520 <print_debug_data@@Base+0x76c>
   15504:	ldr	r2, [pc, #36]	; 15530 <print_debug_data@@Base+0x77c>
   15508:	ldr	r1, [pc, #20]	; 15524 <print_debug_data@@Base+0x770>
   1550c:	ldr	r0, [pc, #32]	; 15534 <print_debug_data@@Base+0x780>
   15510:	b	15228 <print_debug_data@@Base+0x474>
   15514:	andeq	fp, r2, r0, lsl #5
   15518:	strdeq	fp, [r2], -r0
   1551c:	strheq	ip, [r2], -r8
   15520:	andeq	r8, r1, r5, ror sp
   15524:	andeq	r8, r1, r4, asr #27
   15528:	andeq	r8, r1, r4, lsr lr
   1552c:	andeq	r8, r1, r5, asr lr
   15530:	andeq	r0, r0, r6, lsr #2
   15534:	andeq	r8, r1, r8, asr #25

00015538 <dim_info_init@@Base>:
   15538:	ldr	r3, [pc, #20]	; 15554 <dim_info_init@@Base+0x1c>
   1553c:	mov	r2, #0
   15540:	str	r2, [r3]
   15544:	str	r2, [r3, #68]	; 0x44
   15548:	mvn	r2, #0
   1554c:	str	r2, [r3, #104]	; 0x68
   15550:	bx	lr
   15554:	strheq	ip, [r2], -r8

00015558 <dim_info_done@@Base>:
   15558:	bx	lr

0001555c <print_all_distinct_dims@@Base>:
   1555c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15560:	ldr	r4, [pc, #416]	; 15708 <print_all_distinct_dims@@Base+0x1ac>
   15564:	ldr	r3, [r4]
   15568:	cmp	r3, r0
   1556c:	bgt	15584 <print_all_distinct_dims@@Base+0x28>
   15570:	ldr	r3, [pc, #404]	; 1570c <print_all_distinct_dims@@Base+0x1b0>
   15574:	mov	r2, #50	; 0x32
   15578:	ldr	r1, [pc, #400]	; 15710 <print_all_distinct_dims@@Base+0x1b4>
   1557c:	ldr	r0, [pc, #400]	; 15714 <print_all_distinct_dims@@Base+0x1b8>
   15580:	bl	12650 <__assert_fail@plt>
   15584:	add	r3, r0, #18
   15588:	mov	r5, r0
   1558c:	ldr	r3, [r4, r3, lsl #2]
   15590:	cmp	r3, #0
   15594:	beq	15700 <print_all_distinct_dims@@Base+0x1a4>
   15598:	lsl	r8, r0, #2
   1559c:	add	r3, r4, r8
   155a0:	ldr	r7, [r3, #4]
   155a4:	add	r7, r7, #1
   155a8:	lsl	r7, r7, #2
   155ac:	mov	r0, r7
   155b0:	bl	123bc <malloc@plt>
   155b4:	subs	r6, r0, #0
   155b8:	bne	155dc <print_all_distinct_dims@@Base+0x80>
   155bc:	mov	r3, #61	; 0x3d
   155c0:	str	r3, [sp]
   155c4:	mov	r2, r7
   155c8:	ldr	r3, [pc, #320]	; 15710 <print_all_distinct_dims@@Base+0x1b4>
   155cc:	ldr	r1, [pc, #324]	; 15718 <print_all_distinct_dims@@Base+0x1bc>
   155d0:	mvn	r0, #0
   155d4:	bl	1223c <coda_set_error@plt>
   155d8:	bl	1889c <handle_coda_error@@Base>
   155dc:	add	r3, r4, r8
   155e0:	mov	r1, #0
   155e4:	ldr	r2, [r3, #4]
   155e8:	mov	r0, r6
   155ec:	add	r2, r2, #1
   155f0:	lsl	r2, r2, #2
   155f4:	bl	124a0 <memset@plt>
   155f8:	add	r3, r4, r5, lsl #2
   155fc:	add	ip, r5, #26
   15600:	ldr	r3, [r3, #140]	; 0x8c
   15604:	mov	r2, #0
   15608:	add	ip, r4, ip, lsl #2
   1560c:	add	r3, r4, r3, lsl #3
   15610:	ldrd	r0, [r3, #232]	; 0xe8
   15614:	mov	r3, #0
   15618:	cmp	r2, r0
   1561c:	sbcs	lr, r3, r1
   15620:	blt	156a0 <print_all_distinct_dims@@Base+0x144>
   15624:	add	r1, r5, #1
   15628:	add	r5, r5, #8
   1562c:	ldr	r0, [pc, #232]	; 1571c <print_all_distinct_dims@@Base+0x1c0>
   15630:	bl	12218 <printf@plt>
   15634:	add	r3, r4, r5, lsl #2
   15638:	ldr	sl, [pc, #224]	; 15720 <print_all_distinct_dims@@Base+0x1c4>
   1563c:	ldr	r7, [r3, #4]
   15640:	add	r9, r4, r8
   15644:	ldr	r1, [r9, #4]
   15648:	cmp	r7, r1
   1564c:	blt	156c4 <print_all_distinct_dims@@Base+0x168>
   15650:	add	r5, r4, r5, lsl #2
   15654:	ldr	r0, [pc, #200]	; 15724 <print_all_distinct_dims@@Base+0x1c8>
   15658:	bl	12218 <printf@plt>
   1565c:	ldr	r0, [pc, #196]	; 15728 <print_all_distinct_dims@@Base+0x1cc>
   15660:	bl	12218 <printf@plt>
   15664:	ldr	r7, [pc, #180]	; 15720 <print_all_distinct_dims@@Base+0x1c4>
   15668:	ldr	r5, [r5, #4]
   1566c:	add	r4, r4, r8
   15670:	ldr	r3, [r4, #4]
   15674:	cmp	r5, r3
   15678:	blt	156e4 <print_all_distinct_dims@@Base+0x188>
   1567c:	ldr	r1, [r6, r3, lsl #2]
   15680:	ldr	r0, [pc, #156]	; 15724 <print_all_distinct_dims@@Base+0x1c8>
   15684:	bl	12218 <printf@plt>
   15688:	mov	r0, #10
   1568c:	bl	124ac <putchar@plt>
   15690:	mov	r0, r6
   15694:	add	sp, sp, #8
   15698:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1569c:	b	12284 <free@plt>
   156a0:	ldr	r7, [ip, #4]
   156a4:	ldr	lr, [r7, r2, lsl #2]
   156a8:	cmp	lr, #0
   156ac:	ldrge	r7, [r6, lr, lsl #2]
   156b0:	addge	r7, r7, #1
   156b4:	strge	r7, [r6, lr, lsl #2]
   156b8:	adds	r2, r2, #1
   156bc:	adc	r3, r3, #0
   156c0:	b	15618 <print_all_distinct_dims@@Base+0xbc>
   156c4:	ldr	r3, [r6, r7, lsl #2]
   156c8:	cmp	r3, #0
   156cc:	ble	156dc <print_all_distinct_dims@@Base+0x180>
   156d0:	mov	r1, r7
   156d4:	mov	r0, sl
   156d8:	bl	12218 <printf@plt>
   156dc:	add	r7, r7, #1
   156e0:	b	15644 <print_all_distinct_dims@@Base+0xe8>
   156e4:	ldr	r1, [r6, r5, lsl #2]
   156e8:	cmp	r1, #0
   156ec:	ble	156f8 <print_all_distinct_dims@@Base+0x19c>
   156f0:	mov	r0, r7
   156f4:	bl	12218 <printf@plt>
   156f8:	add	r5, r5, #1
   156fc:	b	15670 <print_all_distinct_dims@@Base+0x114>
   15700:	add	sp, sp, #8
   15704:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15708:	strheq	ip, [r2], -r8
   1570c:	andeq	r8, r1, ip, lsl #27
   15710:	andeq	r8, r1, r4, asr #27
   15714:	andeq	r8, r1, sp, ror lr
   15718:			; <UNDEFINED> instruction: 0x00018bbf
   1571c:	muleq	r1, r8, lr
   15720:	andeq	r8, r1, r4, lsr #29
   15724:	andeq	r8, r1, r8, lsr #29
   15728:	andeq	r8, r1, ip, lsr #29

0001572c <dim_enter_array@@Base>:
   1572c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15730:	sub	sp, sp, #84	; 0x54
   15734:	ldr	r6, [pc, #1884]	; 15e98 <dim_enter_array@@Base+0x76c>
   15738:	add	r1, sp, #40	; 0x28
   1573c:	ldr	r3, [r6, #136]	; 0x88
   15740:	ldr	sl, [r6, #3360]	; 0xd20
   15744:	add	r3, r3, #2
   15748:	ldr	r0, [r6, r3, lsl #2]
   1574c:	bl	1265c <coda_type_get_class@plt>
   15750:	cmp	r0, #0
   15754:	beq	1575c <dim_enter_array@@Base+0x30>
   15758:	bl	1889c <handle_coda_error@@Base>
   1575c:	ldr	r3, [sp, #40]	; 0x28
   15760:	add	r4, sp, #48	; 0x30
   15764:	sub	r3, r3, #1
   15768:	cmp	r3, #5
   1576c:	ldrls	pc, [pc, r3, lsl #2]
   15770:	b	15910 <dim_enter_array@@Base+0x1e4>
   15774:	andeq	r5, r1, ip, lsl #15
   15778:	andeq	r5, r1, r0, lsl r9
   1577c:	andeq	r5, r1, r0, lsl r9
   15780:	andeq	r5, r1, r4, ror r8
   15784:	andeq	r5, r1, ip, lsr #17
   15788:	andeq	r5, r1, r8, lsl r8
   1578c:	ldr	r3, [r6, #136]	; 0x88
   15790:	mov	r2, r4
   15794:	add	r3, r3, #2
   15798:	add	r1, sp, #44	; 0x2c
   1579c:	ldr	r0, [r6, r3, lsl #2]
   157a0:	bl	12590 <coda_type_get_array_dim@plt>
   157a4:	cmp	r0, #0
   157a8:	beq	157b0 <dim_enter_array@@Base+0x84>
   157ac:	bl	1889c <handle_coda_error@@Base>
   157b0:	mov	r3, #80	; 0x50
   157b4:	ldr	r1, [sp, #44]	; 0x2c
   157b8:	mul	r3, r3, sl
   157bc:	add	r2, r6, r3
   157c0:	add	r3, r3, #804	; 0x324
   157c4:	str	r1, [r2, #804]	; 0x324
   157c8:	add	r3, r6, r3
   157cc:	mov	r2, #0
   157d0:	cmp	r2, r1
   157d4:	blt	15808 <dim_enter_array@@Base+0xdc>
   157d8:	ldr	r3, [pc, #1724]	; 15e9c <dim_enter_array@@Base+0x770>
   157dc:	mov	r2, #80	; 0x50
   157e0:	ldr	r3, [r3]
   157e4:	cmp	r3, #0
   157e8:	bne	1591c <dim_enter_array@@Base+0x1f0>
   157ec:	mla	r6, r2, sl, r6
   157f0:	mvn	r2, #0
   157f4:	str	r2, [r6, #800]	; 0x320
   157f8:	str	r3, [r6, #840]	; 0x348
   157fc:	str	r3, [r6, #844]	; 0x34c
   15800:	add	sp, sp, #84	; 0x54
   15804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15808:	ldr	r0, [r4, r2, lsl #2]
   1580c:	add	r2, r2, #1
   15810:	str	r0, [r3, #4]!
   15814:	b	157d0 <dim_enter_array@@Base+0xa4>
   15818:	ldr	r3, [r6, #136]	; 0x88
   1581c:	mov	r1, r4
   15820:	add	r3, r3, #2
   15824:	ldr	r0, [r6, r3, lsl #2]
   15828:	bl	124c4 <coda_type_get_special_type@plt>
   1582c:	cmp	r0, #0
   15830:	beq	15838 <dim_enter_array@@Base+0x10c>
   15834:	bl	1889c <handle_coda_error@@Base>
   15838:	ldr	r3, [sp, #48]	; 0x30
   1583c:	cmp	r3, #3
   15840:	bne	15860 <dim_enter_array@@Base+0x134>
   15844:	mov	r3, #80	; 0x50
   15848:	mov	r2, #1
   1584c:	mla	r3, r3, sl, r6
   15850:	str	r2, [r3, #804]	; 0x324
   15854:	mov	r2, #2
   15858:	str	r2, [r3, #808]	; 0x328
   1585c:	b	157d8 <dim_enter_array@@Base+0xac>
   15860:	ldr	r3, [pc, #1592]	; 15ea0 <dim_enter_array@@Base+0x774>
   15864:	ldr	r2, [pc, #1592]	; 15ea4 <dim_enter_array@@Base+0x778>
   15868:	ldr	r1, [pc, #1592]	; 15ea8 <dim_enter_array@@Base+0x77c>
   1586c:	ldr	r0, [pc, #1592]	; 15eac <dim_enter_array@@Base+0x780>
   15870:	bl	12650 <__assert_fail@plt>
   15874:	ldr	r3, [r6, #136]	; 0x88
   15878:	mov	r1, r4
   1587c:	add	r3, r3, #2
   15880:	ldr	r0, [r6, r3, lsl #2]
   15884:	bl	12500 <coda_type_get_string_length@plt>
   15888:	cmp	r0, #0
   1588c:	beq	15894 <dim_enter_array@@Base+0x168>
   15890:	bl	1889c <handle_coda_error@@Base>
   15894:	mov	r3, #80	; 0x50
   15898:	mov	r2, #1
   1589c:	mla	r3, r3, sl, r6
   158a0:	str	r2, [r3, #804]	; 0x324
   158a4:	ldr	r2, [sp, #48]	; 0x30
   158a8:	b	15858 <dim_enter_array@@Base+0x12c>
   158ac:	ldr	r3, [r6, #136]	; 0x88
   158b0:	mov	r1, r4
   158b4:	add	r3, r3, #2
   158b8:	ldr	r0, [r6, r3, lsl #2]
   158bc:	bl	122f0 <coda_type_get_bit_size@plt>
   158c0:	cmp	r0, #0
   158c4:	beq	158cc <dim_enter_array@@Base+0x1a0>
   158c8:	bl	1889c <handle_coda_error@@Base>
   158cc:	mov	r3, #80	; 0x50
   158d0:	ldrd	r4, [sp, #48]	; 0x30
   158d4:	mla	r3, r3, sl, r6
   158d8:	mov	r2, #1
   158dc:	cmp	r4, #0
   158e0:	str	r2, [r3, #804]	; 0x324
   158e4:	sbcs	r2, r5, #0
   158e8:	mvnlt	r2, #0
   158ec:	blt	15858 <dim_enter_array@@Base+0x12c>
   158f0:	and	r0, r4, #7
   158f4:	mov	r1, #0
   158f8:	lsr	r2, r4, #3
   158fc:	orr	r0, r0, r1
   15900:	orr	r2, r2, r5, lsl #29
   15904:	cmp	r0, #0
   15908:	addne	r2, r2, #1
   1590c:	b	15858 <dim_enter_array@@Base+0x12c>
   15910:	ldr	r3, [pc, #1416]	; 15ea0 <dim_enter_array@@Base+0x774>
   15914:	ldr	r2, [pc, #1428]	; 15eb0 <dim_enter_array@@Base+0x784>
   15918:	b	15868 <dim_enter_array@@Base+0x13c>
   1591c:	mla	r2, r2, sl, r6
   15920:	ldr	r3, [pc, #1420]	; 15eb4 <dim_enter_array@@Base+0x788>
   15924:	ldr	r1, [r2, #804]	; 0x324
   15928:	ldr	r4, [r3]
   1592c:	str	r4, [r2, #800]	; 0x320
   15930:	add	r2, r4, r1
   15934:	cmp	r2, #8
   15938:	ldrgt	r3, [pc, #1376]	; 15ea0 <dim_enter_array@@Base+0x774>
   1593c:	ldrgt	r2, [pc, #1396]	; 15eb8 <dim_enter_array@@Base+0x78c>
   15940:	ldrgt	r1, [pc, #1376]	; 15ea8 <dim_enter_array@@Base+0x77c>
   15944:	ldrgt	r0, [pc, #1392]	; 15ebc <dim_enter_array@@Base+0x790>
   15948:	bgt	15870 <dim_enter_array@@Base+0x144>
   1594c:	cmp	r4, #0
   15950:	str	r2, [r3]
   15954:	ble	15a94 <dim_enter_array@@Base+0x368>
   15958:	add	r2, r3, r4, lsl #3
   1595c:	ldrd	r8, [r2, #232]	; 0xe8
   15960:	add	r2, r4, #37	; 0x25
   15964:	lsl	r2, r2, #3
   15968:	strd	r8, [sp, #8]
   1596c:	ldrd	r8, [r3, r2]
   15970:	cmp	r8, #1
   15974:	sbcs	r2, r9, #0
   15978:	movlt	r2, #0
   1597c:	strd	r8, [sp, #16]
   15980:	addlt	r3, r3, r4, lsl #2
   15984:	movlt	r0, r2
   15988:	blt	15ad0 <dim_enter_array@@Base+0x3a4>
   1598c:	mov	r3, #80	; 0x50
   15990:	ldr	r5, [pc, #1308]	; 15eb4 <dim_enter_array@@Base+0x788>
   15994:	mla	r6, r3, sl, r6
   15998:	add	r3, r4, #1
   1599c:	add	r6, r6, #804	; 0x324
   159a0:	lsl	fp, r3, #2
   159a4:	sub	r2, fp, #4
   159a8:	mov	r3, #0
   159ac:	add	r2, r2, r5
   159b0:	mov	r0, r6
   159b4:	mov	r7, r3
   159b8:	mov	lr, r3
   159bc:	cmp	r3, r1
   159c0:	blt	15aa8 <dim_enter_array@@Base+0x37c>
   159c4:	cmp	r7, #0
   159c8:	moveq	fp, r7
   159cc:	beq	15adc <dim_enter_array@@Base+0x3b0>
   159d0:	ldr	r3, [sp, #8]
   159d4:	mov	r8, #80	; 0x50
   159d8:	mov	r9, #0
   159dc:	lsl	r3, r3, #2
   159e0:	str	r3, [sp, #24]
   159e4:	add	r3, fp, #104	; 0x68
   159e8:	add	r5, r5, r3
   159ec:	ldr	r3, [pc, #1188]	; 15e98 <dim_enter_array@@Base+0x76c>
   159f0:	str	r6, [sp, #32]
   159f4:	mla	r8, r8, sl, r3
   159f8:	ldr	r3, [r8, #804]	; 0x324
   159fc:	cmp	r9, r3
   15a00:	blt	15c54 <dim_enter_array@@Base+0x528>
   15a04:	mov	r5, #0
   15a08:	str	r5, [r8, #844]	; 0x34c
   15a0c:	mov	r2, r5
   15a10:	mov	r1, r5
   15a14:	mov	r0, r5
   15a18:	bl	15140 <print_debug_data@@Base+0x38c>
   15a1c:	ldr	r8, [pc, #1180]	; 15ec0 <dim_enter_array@@Base+0x794>
   15a20:	ldr	r3, [pc, #1136]	; 15e98 <dim_enter_array@@Base+0x76c>
   15a24:	mov	r9, #80	; 0x50
   15a28:	add	r8, fp, r8
   15a2c:	mla	r9, r9, sl, r3
   15a30:	mov	fp, r5
   15a34:	mov	r3, r5
   15a38:	ldr	r2, [r9, #804]	; 0x324
   15a3c:	cmp	r5, r2
   15a40:	bge	15adc <dim_enter_array@@Base+0x3b0>
   15a44:	ldr	r2, [r6, #4]!
   15a48:	cmn	r2, #1
   15a4c:	bne	15a88 <dim_enter_array@@Base+0x35c>
   15a50:	ldr	r2, [r8, #36]	; 0x24
   15a54:	ldr	r1, [r8, #4]
   15a58:	cmp	r1, r2
   15a5c:	movne	r2, #1
   15a60:	strne	r2, [r8, #72]	; 0x48
   15a64:	movne	fp, r7
   15a68:	bne	15a88 <dim_enter_array@@Base+0x35c>
   15a6c:	str	r3, [r8, #72]	; 0x48
   15a70:	ldr	r0, [r8, #108]	; 0x6c
   15a74:	str	r3, [sp, #24]
   15a78:	bl	12284 <free@plt>
   15a7c:	ldr	r3, [sp, #24]
   15a80:	str	r3, [r8, #108]	; 0x6c
   15a84:	str	r3, [r8, #140]	; 0x8c
   15a88:	add	r5, r5, #1
   15a8c:	add	r8, r8, #4
   15a90:	b	15a38 <dim_enter_array@@Base+0x30c>
   15a94:	mov	r2, #1
   15a98:	mov	r3, #0
   15a9c:	strd	r2, [sp, #16]
   15aa0:	strd	r2, [sp, #8]
   15aa4:	b	1598c <dim_enter_array@@Base+0x260>
   15aa8:	ldr	ip, [r0, #4]!
   15aac:	add	r3, r3, #1
   15ab0:	cmn	ip, #1
   15ab4:	str	ip, [r2, #4]!
   15ab8:	moveq	r7, #1
   15abc:	str	lr, [r2, #68]	; 0x44
   15ac0:	b	159bc <dim_enter_array@@Base+0x290>
   15ac4:	add	r2, r2, #1
   15ac8:	str	r0, [r3, #4]!
   15acc:	str	r0, [r3, #68]	; 0x44
   15ad0:	cmp	r2, r1
   15ad4:	blt	15ac4 <dim_enter_array@@Base+0x398>
   15ad8:	mov	fp, #0
   15adc:	ldr	r3, [pc, #976]	; 15eb4 <dim_enter_array@@Base+0x788>
   15ae0:	mov	r2, #0
   15ae4:	mov	r6, r3
   15ae8:	mov	ip, r2
   15aec:	ldr	r8, [r6], #72	; 0x48
   15af0:	mov	r0, r2
   15af4:	mov	r5, r2
   15af8:	mov	r7, #1
   15afc:	mvn	r1, #0
   15b00:	str	r2, [r3, #68]	; 0x44
   15b04:	str	r1, [r3, #104]	; 0x68
   15b08:	cmp	r5, r8
   15b0c:	blt	15cf0 <dim_enter_array@@Base+0x5c4>
   15b10:	cmp	ip, #0
   15b14:	strne	r0, [r3, #68]	; 0x44
   15b18:	mov	ip, #80	; 0x50
   15b1c:	cmp	r2, #0
   15b20:	ldr	r2, [pc, #880]	; 15e98 <dim_enter_array@@Base+0x76c>
   15b24:	ldr	lr, [pc, #904]	; 15eb4 <dim_enter_array@@Base+0x788>
   15b28:	mla	ip, ip, sl, r2
   15b2c:	add	r2, r4, #29
   15b30:	mov	r8, #1
   15b34:	lsl	r2, r2, #3
   15b38:	ldr	r5, [ip, #804]	; 0x324
   15b3c:	add	r9, r3, r2
   15b40:	strne	r1, [r3, #104]	; 0x68
   15b44:	str	r8, [ip, #840]	; 0x348
   15b48:	sub	r6, r8, #1
   15b4c:	cmp	r5, r6
   15b50:	bgt	15d10 <dim_enter_array@@Base+0x5e4>
   15b54:	cmp	fp, #0
   15b58:	beq	15dec <dim_enter_array@@Base+0x6c0>
   15b5c:	sub	r7, r2, #232	; 0xe8
   15b60:	mov	ip, #0
   15b64:	mov	r0, #0
   15b68:	mov	r1, #0
   15b6c:	cmp	ip, r5
   15b70:	blt	15d74 <dim_enter_array@@Base+0x648>
   15b74:	add	r1, r2, #64	; 0x40
   15b78:	add	r1, lr, r1
   15b7c:	str	r1, [sp, #24]
   15b80:	add	r1, lr, r4, lsl #2
   15b84:	str	r1, [sp, #32]
   15b88:	mov	r0, #0
   15b8c:	mov	r1, #0
   15b90:	strd	r0, [sp, #16]
   15b94:	ldrd	r6, [sp, #16]
   15b98:	ldrd	r0, [sp, #8]
   15b9c:	cmp	r6, r0
   15ba0:	sbcs	r1, r7, r1
   15ba4:	blt	15dd0 <dim_enter_array@@Base+0x6a4>
   15ba8:	mov	r1, #80	; 0x50
   15bac:	ldr	r0, [pc, #740]	; 15e98 <dim_enter_array@@Base+0x76c>
   15bb0:	ldr	r5, [pc, #764]	; 15eb4 <dim_enter_array@@Base+0x788>
   15bb4:	mla	sl, r1, sl, r0
   15bb8:	ldr	ip, [sl, #804]	; 0x324
   15bbc:	add	r0, r4, ip
   15bc0:	add	r0, r0, #37	; 0x25
   15bc4:	lsl	r0, r0, #3
   15bc8:	ldrd	r0, [r0, r5]
   15bcc:	cmp	r0, #1
   15bd0:	sbcs	r1, r1, #0
   15bd4:	mov	r1, r5
   15bd8:	blt	15800 <dim_enter_array@@Base+0xd4>
   15bdc:	ldr	r0, [r5]
   15be0:	ldr	r6, [r1, r0, lsl #2]
   15be4:	add	r5, r5, r0, lsl #3
   15be8:	add	r0, r4, #20
   15bec:	add	r0, r0, ip
   15bf0:	asr	r7, r6, #31
   15bf4:	add	r0, r1, r0, lsl #3
   15bf8:	add	r0, r0, #8
   15bfc:	strd	r6, [r5, #168]	; 0xa8
   15c00:	cmp	ip, #2
   15c04:	sub	r5, ip, #1
   15c08:	bpl	15e6c <dim_enter_array@@Base+0x740>
   15c0c:	sub	r0, r4, #1
   15c10:	add	r4, r4, #22
   15c14:	sub	r2, r2, #56	; 0x38
   15c18:	add	r1, r1, r2
   15c1c:	add	r4, r3, r4, lsl #3
   15c20:	cmp	r0, #0
   15c24:	blt	15800 <dim_enter_array@@Base+0xd4>
   15c28:	ldr	r2, [r1, #-8]
   15c2c:	ldr	r3, [r4, #4]
   15c30:	ldr	lr, [r4]
   15c34:	ldr	ip, [r1, #-4]
   15c38:	mul	r3, r2, r3
   15c3c:	sub	r0, r0, #1
   15c40:	mla	ip, lr, ip, r3
   15c44:	umull	r2, r3, r2, lr
   15c48:	add	r3, ip, r3
   15c4c:	strd	r2, [r1, #-8]!
   15c50:	b	15c20 <dim_enter_array@@Base+0x4f4>
   15c54:	ldr	r3, [sp, #32]
   15c58:	ldr	r2, [r3, #4]!
   15c5c:	cmn	r2, #1
   15c60:	str	r3, [sp, #32]
   15c64:	mov	r3, r2
   15c68:	movne	r3, #0
   15c6c:	str	r2, [sp, #36]	; 0x24
   15c70:	strne	r3, [r5, #32]
   15c74:	strne	r3, [r5]
   15c78:	bne	15cd0 <dim_enter_array@@Base+0x5a4>
   15c7c:	str	r4, [r5, #32]
   15c80:	ldr	r0, [sp, #24]
   15c84:	bl	123bc <malloc@plt>
   15c88:	cmp	r0, #0
   15c8c:	str	r0, [r5]
   15c90:	bne	15cb4 <dim_enter_array@@Base+0x588>
   15c94:	mov	r3, #456	; 0x1c8
   15c98:	str	r3, [sp]
   15c9c:	ldr	r2, [sp, #24]
   15ca0:	ldr	r3, [pc, #512]	; 15ea8 <dim_enter_array@@Base+0x77c>
   15ca4:	ldr	r1, [pc, #536]	; 15ec4 <dim_enter_array@@Base+0x798>
   15ca8:	ldr	r0, [sp, #36]	; 0x24
   15cac:	bl	1223c <coda_set_error@plt>
   15cb0:	bl	1889c <handle_coda_error@@Base>
   15cb4:	mov	r2, #0
   15cb8:	mov	r3, #0
   15cbc:	mvn	lr, #0
   15cc0:	ldrd	r0, [sp, #8]
   15cc4:	cmp	r2, r0
   15cc8:	sbcs	r1, r3, r1
   15ccc:	blt	15cdc <dim_enter_array@@Base+0x5b0>
   15cd0:	add	r9, r9, #1
   15cd4:	add	r5, r5, #4
   15cd8:	b	159f8 <dim_enter_array@@Base+0x2cc>
   15cdc:	ldr	r0, [r5]
   15ce0:	str	lr, [r0, r2, lsl #2]
   15ce4:	adds	r2, r2, #1
   15ce8:	adc	r3, r3, #0
   15cec:	b	15cc0 <dim_enter_array@@Base+0x594>
   15cf0:	ldr	lr, [r6], #4
   15cf4:	cmp	lr, #0
   15cf8:	movne	r1, r5
   15cfc:	movne	r2, r7
   15d00:	movne	ip, r7
   15d04:	movne	r0, r7
   15d08:	add	r5, r5, #1
   15d0c:	b	15b08 <dim_enter_array@@Base+0x3dc>
   15d10:	add	r1, r8, r4
   15d14:	cmp	r6, #0
   15d18:	ldr	r0, [lr, r1, lsl #2]
   15d1c:	ldr	r1, [ip, #840]	; 0x348
   15d20:	mov	r6, r0
   15d24:	asr	r7, r0, #31
   15d28:	mul	r1, r0, r1
   15d2c:	strd	r6, [sp, #24]
   15d30:	str	r1, [ip, #840]	; 0x348
   15d34:	ldrne	r6, [sp, #28]
   15d38:	ldreq	r1, [sp, #12]
   15d3c:	ldrne	r1, [r9]
   15d40:	ldreq	r7, [sp, #28]
   15d44:	muleq	r6, r0, r1
   15d48:	mulne	r6, r1, r6
   15d4c:	ldreq	r1, [sp, #8]
   15d50:	ldrne	r7, [r9, #4]
   15d54:	add	r8, r8, #1
   15d58:	mlaeq	r6, r1, r7, r6
   15d5c:	mlane	r6, r0, r7, r6
   15d60:	umull	r0, r1, r1, r0
   15d64:	add	r1, r6, r1
   15d68:	add	r9, r9, #8
   15d6c:	strd	r0, [r9]
   15d70:	b	15b48 <dim_enter_array@@Base+0x41c>
   15d74:	add	r6, r7, ip, lsl #3
   15d78:	add	r6, r6, #304	; 0x130
   15d7c:	add	ip, ip, #1
   15d80:	strd	r0, [lr, r6]
   15d84:	b	15b6c <dim_enter_array@@Base+0x440>
   15d88:	ldr	r1, [r6, #72]	; 0x48
   15d8c:	add	r7, r7, #1
   15d90:	cmp	r1, #0
   15d94:	add	r6, r6, #4
   15d98:	ldrne	r1, [r6, #104]	; 0x68
   15d9c:	ldreq	r1, [r6]
   15da0:	ldrne	r1, [r1, r9]
   15da4:	mul	ip, r1, ip
   15da8:	ldrd	r0, [r8, #8]
   15dac:	adds	r0, r0, ip
   15db0:	adc	r1, r1, ip, asr #31
   15db4:	strd	r0, [r8, #8]!
   15db8:	cmp	r7, r5
   15dbc:	blt	15d88 <dim_enter_array@@Base+0x65c>
   15dc0:	ldrd	r0, [sp, #16]
   15dc4:	adds	r0, r0, #1
   15dc8:	adc	r1, r1, #0
   15dcc:	b	15b90 <dim_enter_array@@Base+0x464>
   15dd0:	ldr	r1, [sp, #16]
   15dd4:	ldr	r6, [sp, #32]
   15dd8:	ldr	r8, [sp, #24]
   15ddc:	lsl	r9, r1, #2
   15de0:	mov	ip, fp
   15de4:	mov	r7, #0
   15de8:	b	15db8 <dim_enter_array@@Base+0x68c>
   15dec:	add	r1, r3, r4, lsl #2
   15df0:	add	ip, r4, #38	; 0x26
   15df4:	ldr	r0, [r1, #4]
   15df8:	ldr	r1, [sp, #20]
   15dfc:	lsl	ip, ip, #3
   15e00:	asr	r9, r0, #31
   15e04:	mul	r6, r0, r1
   15e08:	ldr	r1, [sp, #16]
   15e0c:	mla	r6, r1, r9, r6
   15e10:	umull	r0, r1, r0, r1
   15e14:	add	r1, r6, r1
   15e18:	strd	r0, [r3, ip]
   15e1c:	add	ip, r2, #72	; 0x48
   15e20:	add	ip, r3, ip
   15e24:	mov	r1, #1
   15e28:	cmp	r5, r1
   15e2c:	add	r8, r1, #1
   15e30:	ble	15ba8 <dim_enter_array@@Base+0x47c>
   15e34:	add	r1, r8, r4
   15e38:	ldr	r1, [lr, r1, lsl #2]
   15e3c:	mov	r6, r1
   15e40:	asr	r7, r1, #31
   15e44:	strd	r6, [sp, #8]
   15e48:	ldm	ip, {r0, r6}
   15e4c:	ldr	r7, [sp, #12]
   15e50:	mul	r6, r1, r6
   15e54:	mla	r6, r0, r7, r6
   15e58:	umull	r0, r1, r0, r1
   15e5c:	add	r1, r6, r1
   15e60:	strd	r0, [ip, #8]!
   15e64:	mov	r1, r8
   15e68:	b	15e28 <dim_enter_array@@Base+0x6fc>
   15e6c:	add	ip, r5, r4
   15e70:	ldr	r6, [lr, ip, lsl #2]
   15e74:	ldm	r0, {r7, ip}
   15e78:	asr	r9, r6, #31
   15e7c:	mul	ip, r6, ip
   15e80:	mla	ip, r7, r9, ip
   15e84:	umull	r6, r7, r7, r6
   15e88:	add	r7, ip, r7
   15e8c:	mov	ip, r5
   15e90:	strd	r6, [r0, #-8]!
   15e94:	b	15c00 <dim_enter_array@@Base+0x4d4>
   15e98:	strdeq	fp, [r2], -r0
   15e9c:	andeq	fp, r2, ip, ror #3
   15ea0:	andeq	r8, r1, r4, lsr #27
   15ea4:	andeq	r0, r0, sp, asr r1
   15ea8:	andeq	r8, r1, r4, asr #27
   15eac:	andeq	r8, r1, r8, asr #25
   15eb0:	andeq	r0, r0, r2, lsl #3
   15eb4:	strheq	ip, [r2], -r8
   15eb8:	muleq	r0, r2, r1
   15ebc:			; <UNDEFINED> instruction: 0x00018eb4
   15ec0:	strheq	ip, [r2], -r4
   15ec4:			; <UNDEFINED> instruction: 0x00018bbf

00015ec8 <dim_leave_array@@Base>:
   15ec8:	ldr	r2, [pc, #300]	; 15ffc <dim_leave_array@@Base+0x134>
   15ecc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ed0:	ldr	r3, [r2, #3360]	; 0xd20
   15ed4:	cmp	r3, #0
   15ed8:	bge	15ef0 <dim_leave_array@@Base+0x28>
   15edc:	ldr	r3, [pc, #284]	; 16000 <dim_leave_array@@Base+0x138>
   15ee0:	ldr	r2, [pc, #284]	; 16004 <dim_leave_array@@Base+0x13c>
   15ee4:	ldr	r1, [pc, #284]	; 16008 <dim_leave_array@@Base+0x140>
   15ee8:	ldr	r0, [pc, #284]	; 1600c <dim_leave_array@@Base+0x144>
   15eec:	bl	12650 <__assert_fail@plt>
   15ef0:	mov	r1, #80	; 0x50
   15ef4:	ldr	r4, [pc, #276]	; 16010 <dim_leave_array@@Base+0x148>
   15ef8:	mla	r3, r1, r3, r2
   15efc:	ldr	r2, [r4]
   15f00:	mov	r8, #0
   15f04:	ldr	r6, [r3, #800]	; 0x320
   15f08:	ldr	r1, [r3, #804]	; 0x324
   15f0c:	mov	r5, r3
   15f10:	add	r7, r4, r6, lsl #2
   15f14:	add	r7, r7, #68	; 0x44
   15f18:	sub	r2, r2, r1
   15f1c:	str	r2, [r4]
   15f20:	ldr	r2, [r5, #804]	; 0x324
   15f24:	cmp	r8, r2
   15f28:	blt	15fa8 <dim_leave_array@@Base+0xe0>
   15f2c:	mov	r3, #0
   15f30:	ldr	r8, [r4]
   15f34:	ldr	r7, [pc, #216]	; 16014 <dim_leave_array@@Base+0x14c>
   15f38:	mov	ip, r3
   15f3c:	mov	r0, r3
   15f40:	mov	r5, r3
   15f44:	mov	r9, #1
   15f48:	mvn	r1, #0
   15f4c:	str	r3, [r4, #68]	; 0x44
   15f50:	str	r1, [r4, #104]	; 0x68
   15f54:	cmp	r5, r8
   15f58:	blt	15fc4 <dim_leave_array@@Base+0xfc>
   15f5c:	add	r2, r6, r2
   15f60:	add	r2, r2, #37	; 0x25
   15f64:	cmp	ip, #0
   15f68:	lsl	r2, r2, #3
   15f6c:	strne	r0, [r4, #68]	; 0x44
   15f70:	cmp	r3, #0
   15f74:	ldrd	r2, [r2, r4]
   15f78:	strne	r1, [r4, #104]	; 0x68
   15f7c:	cmp	r2, #1
   15f80:	sbcs	r3, r3, #0
   15f84:	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f88:	add	r3, r6, #22
   15f8c:	add	r5, r4, r6, lsl #3
   15f90:	sub	r7, r6, #1
   15f94:	add	r5, r5, #176	; 0xb0
   15f98:	add	r4, r4, r3, lsl #3
   15f9c:	cmp	r7, #0
   15fa0:	bge	15fe4 <dim_leave_array@@Base+0x11c>
   15fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15fa8:	ldr	r3, [r7, #4]!
   15fac:	cmp	r3, #0
   15fb0:	beq	15fbc <dim_leave_array@@Base+0xf4>
   15fb4:	ldr	r0, [r7, #36]	; 0x24
   15fb8:	bl	12284 <free@plt>
   15fbc:	add	r8, r8, #1
   15fc0:	b	15f20 <dim_leave_array@@Base+0x58>
   15fc4:	ldr	lr, [r7], #4
   15fc8:	cmp	lr, #0
   15fcc:	movne	r1, r5
   15fd0:	movne	r3, r9
   15fd4:	movne	ip, r9
   15fd8:	movne	r0, r9
   15fdc:	add	r5, r5, #1
   15fe0:	b	15f54 <dim_leave_array@@Base+0x8c>
   15fe4:	ldrd	r2, [r4]
   15fe8:	ldrd	r0, [r5, #-8]
   15fec:	bl	188dc <handle_coda_error@@Base+0x40>
   15ff0:	sub	r7, r7, #1
   15ff4:	strd	r0, [r5, #-8]!
   15ff8:	b	15f9c <dim_leave_array@@Base+0xd4>
   15ffc:	strdeq	fp, [r2], -r0
   16000:			; <UNDEFINED> instruction: 0x00018db4
   16004:	andeq	r0, r0, r3, asr #4
   16008:	andeq	r8, r1, r4, asr #27
   1600c:	andeq	r8, r1, sp, ror #29
   16010:	strheq	ip, [r2], -r8
   16014:	andeq	ip, r2, r0, lsl #2

00016018 <dim_record_field_available@@Base>:
   16018:	mov	r2, #0
   1601c:	mov	r1, r2
   16020:	mov	r0, r2
   16024:	b	14f04 <print_debug_data@@Base+0x150>

00016028 <codadump_filter_remove@@Base>:
   16028:	push	{r4, lr}
   1602c:	subs	r4, r0, #0
   16030:	bne	16048 <codadump_filter_remove@@Base+0x20>
   16034:	ldr	r3, [pc, #120]	; 160b4 <codadump_filter_remove@@Base+0x8c>
   16038:	mov	r2, #192	; 0xc0
   1603c:	ldr	r1, [pc, #116]	; 160b8 <codadump_filter_remove@@Base+0x90>
   16040:	ldr	r0, [pc, #116]	; 160bc <codadump_filter_remove@@Base+0x94>
   16044:	bl	12650 <__assert_fail@plt>
   16048:	ldr	r0, [r4]
   1604c:	cmp	r0, #0
   16050:	popeq	{r4, pc}
   16054:	ldr	r3, [r0, #8]
   16058:	cmp	r3, #0
   1605c:	beq	16068 <codadump_filter_remove@@Base+0x40>
   16060:	add	r0, r0, #8
   16064:	bl	16028 <codadump_filter_remove@@Base>
   16068:	ldr	r0, [r4]
   1606c:	ldr	r3, [r0, #4]
   16070:	cmp	r3, #0
   16074:	beq	16080 <codadump_filter_remove@@Base+0x58>
   16078:	add	r0, r0, #4
   1607c:	bl	16028 <codadump_filter_remove@@Base>
   16080:	ldr	r3, [r4]
   16084:	ldr	r0, [r3]
   16088:	cmp	r0, #0
   1608c:	beq	160a0 <codadump_filter_remove@@Base+0x78>
   16090:	bl	12284 <free@plt>
   16094:	ldr	r3, [r4]
   16098:	mov	r2, #0
   1609c:	str	r2, [r3]
   160a0:	ldr	r0, [r4]
   160a4:	bl	12284 <free@plt>
   160a8:	mov	r3, #0
   160ac:	str	r3, [r4]
   160b0:	pop	{r4, pc}
   160b4:	andeq	r8, r1, fp, lsl #30
   160b8:	muleq	r1, r9, pc	; <UNPREDICTABLE>
   160bc:	andeq	r8, r1, r5, ror #31
   160c0:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   160c4:	cmp	r0, #0
   160c8:	bne	160e0 <codadump_filter_remove@@Base+0xb8>
   160cc:	ldr	r3, [pc, #480]	; 162b4 <codadump_filter_remove@@Base+0x28c>
   160d0:	ldr	r1, [pc, #480]	; 162b8 <codadump_filter_remove@@Base+0x290>
   160d4:	ldr	r0, [pc, #480]	; 162bc <codadump_filter_remove@@Base+0x294>
   160d8:	mov	r2, #44	; 0x2c
   160dc:	bl	12650 <__assert_fail@plt>
   160e0:	cmp	r1, #0
   160e4:	mov	r5, r1
   160e8:	ldreq	r3, [pc, #452]	; 162b4 <codadump_filter_remove@@Base+0x28c>
   160ec:	moveq	r2, #45	; 0x2d
   160f0:	ldreq	r1, [pc, #448]	; 162b8 <codadump_filter_remove@@Base+0x290>
   160f4:	ldreq	r0, [pc, #452]	; 162c0 <codadump_filter_remove@@Base+0x298>
   160f8:	beq	160dc <codadump_filter_remove@@Base+0xb4>
   160fc:	cmp	r2, #0
   16100:	mov	r7, r2
   16104:	bne	16120 <codadump_filter_remove@@Base+0xf8>
   16108:	ldr	r3, [pc, #420]	; 162b4 <codadump_filter_remove@@Base+0x28c>
   1610c:	mov	r2, #46	; 0x2e
   16110:	ldr	r1, [pc, #416]	; 162b8 <codadump_filter_remove@@Base+0x290>
   16114:	ldr	r0, [pc, #424]	; 162c4 <codadump_filter_remove@@Base+0x29c>
   16118:	b	160dc <codadump_filter_remove@@Base+0xb4>
   1611c:	mov	r0, r2
   16120:	mov	r2, r0
   16124:	mov	r6, r0
   16128:	ldrb	r3, [r2], #1
   1612c:	sub	r4, r3, #9
   16130:	cmp	r3, #32
   16134:	cmpne	r4, #1
   16138:	movls	r4, #1
   1613c:	movhi	r4, #0
   16140:	bls	1611c <codadump_filter_remove@@Base+0xf4>
   16144:	ldrb	r3, [r0]
   16148:	mov	r8, r0
   1614c:	add	r0, r0, #1
   16150:	cmp	r3, #0
   16154:	cmpne	r3, #59	; 0x3b
   16158:	movne	r2, #1
   1615c:	moveq	r2, #0
   16160:	and	r3, r3, #253	; 0xfd
   16164:	cmp	r3, #44	; 0x2c
   16168:	moveq	r3, #0
   1616c:	andne	r3, r2, #1
   16170:	cmp	r3, #0
   16174:	bne	16288 <codadump_filter_remove@@Base+0x260>
   16178:	cmp	r4, #0
   1617c:	beq	162ac <codadump_filter_remove@@Base+0x284>
   16180:	mov	r0, #12
   16184:	bl	123bc <malloc@plt>
   16188:	cmp	r0, #0
   1618c:	str	r0, [r5]
   16190:	bne	161b4 <codadump_filter_remove@@Base+0x18c>
   16194:	mov	r3, #69	; 0x45
   16198:	str	r3, [sp]
   1619c:	mov	r2, #12
   161a0:	ldr	r3, [pc, #272]	; 162b8 <codadump_filter_remove@@Base+0x290>
   161a4:	ldr	r1, [pc, #284]	; 162c8 <codadump_filter_remove@@Base+0x2a0>
   161a8:	mvn	r0, #0
   161ac:	bl	1223c <coda_set_error@plt>
   161b0:	bl	1889c <handle_coda_error@@Base>
   161b4:	add	r9, r4, #1
   161b8:	mov	r0, r9
   161bc:	ldr	sl, [r5]
   161c0:	bl	123bc <malloc@plt>
   161c4:	cmp	r0, #0
   161c8:	str	r0, [sl]
   161cc:	bne	161f0 <codadump_filter_remove@@Base+0x1c8>
   161d0:	mov	r3, #76	; 0x4c
   161d4:	str	r3, [sp]
   161d8:	mov	r2, r9
   161dc:	ldr	r3, [pc, #212]	; 162b8 <codadump_filter_remove@@Base+0x290>
   161e0:	ldr	r1, [pc, #228]	; 162cc <codadump_filter_remove@@Base+0x2a4>
   161e4:	mvn	r0, #0
   161e8:	bl	1223c <coda_set_error@plt>
   161ec:	bl	1889c <handle_coda_error@@Base>
   161f0:	ldr	r3, [r5]
   161f4:	mov	r2, r4
   161f8:	mov	r1, r6
   161fc:	ldr	r0, [r3]
   16200:	bl	124b8 <strncpy@plt>
   16204:	ldr	r2, [r5]
   16208:	mov	r3, #0
   1620c:	str	r3, [r2, #4]
   16210:	ldr	r2, [r5]
   16214:	str	r3, [r2, #8]
   16218:	ldr	r3, [r5]
   1621c:	ldr	r2, [r3]
   16220:	add	r4, r2, r4
   16224:	sub	r0, r4, r2
   16228:	ldrb	r1, [r4, #-1]!
   1622c:	sub	r3, r1, #9
   16230:	cmp	r1, #32
   16234:	cmpne	r3, #1
   16238:	movls	r3, #1
   1623c:	movhi	r3, #0
   16240:	bls	16224 <codadump_filter_remove@@Base+0x1fc>
   16244:	strb	r3, [r2, r0]
   16248:	ldrb	r3, [r8]
   1624c:	cmp	r3, #46	; 0x2e
   16250:	bne	16290 <codadump_filter_remove@@Base+0x268>
   16254:	ldr	r1, [r5]
   16258:	mov	r2, r7
   1625c:	add	r1, r1, #4
   16260:	add	r0, r6, r9
   16264:	bl	160c0 <codadump_filter_remove@@Base+0x98>
   16268:	ldr	r3, [r5]
   1626c:	ldr	r3, [r3, #4]
   16270:	cmp	r3, #0
   16274:	bne	162a4 <codadump_filter_remove@@Base+0x27c>
   16278:	mov	r0, r5
   1627c:	add	sp, sp, #8
   16280:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16284:	b	16028 <codadump_filter_remove@@Base>
   16288:	add	r4, r4, #1
   1628c:	b	16144 <codadump_filter_remove@@Base+0x11c>
   16290:	cmp	r3, #44	; 0x2c
   16294:	cmpne	r3, #59	; 0x3b
   16298:	addeq	r6, r6, r9
   1629c:	streq	r6, [r7]
   162a0:	strne	r8, [r7]
   162a4:	add	sp, sp, #8
   162a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162ac:	str	r4, [r5]
   162b0:	b	162a4 <codadump_filter_remove@@Base+0x27c>
   162b4:	andeq	r8, r1, r2, lsr #30
   162b8:	muleq	r1, r9, pc	; <UNPREDICTABLE>
   162bc:	strdeq	r8, [r1], -r4
   162c0:	andeq	r8, r1, r5, ror #31
   162c4:	andeq	r9, r1, r8
   162c8:			; <UNDEFINED> instruction: 0x00018bbf
   162cc:	andeq	r9, r1, r5, lsl r0
   162d0:	push	{r0, r1, r4, r5, r6, lr}
   162d4:	cmp	r0, #0
   162d8:	str	r1, [sp, #4]
   162dc:	bne	162f4 <codadump_filter_remove@@Base+0x2cc>
   162e0:	ldr	r3, [pc, #152]	; 16380 <codadump_filter_remove@@Base+0x358>
   162e4:	mov	r2, #117	; 0x75
   162e8:	ldr	r1, [pc, #148]	; 16384 <codadump_filter_remove@@Base+0x35c>
   162ec:	ldr	r0, [pc, #148]	; 16388 <codadump_filter_remove@@Base+0x360>
   162f0:	bl	12650 <__assert_fail@plt>
   162f4:	subs	r5, r1, #0
   162f8:	beq	16350 <codadump_filter_remove@@Base+0x328>
   162fc:	ldr	r4, [r0]
   16300:	cmp	r4, #0
   16304:	streq	r5, [r0]
   16308:	beq	16350 <codadump_filter_remove@@Base+0x328>
   1630c:	ldr	r1, [r5]
   16310:	ldr	r0, [r4]
   16314:	bl	12200 <strcmp@plt>
   16318:	subs	r6, r0, #0
   1631c:	bne	16360 <codadump_filter_remove@@Base+0x338>
   16320:	ldr	r3, [r4, #4]
   16324:	cmp	r3, #0
   16328:	beq	16348 <codadump_filter_remove@@Base+0x320>
   1632c:	ldr	r1, [r5, #4]
   16330:	add	r0, r4, #4
   16334:	cmp	r1, #0
   16338:	beq	16358 <codadump_filter_remove@@Base+0x330>
   1633c:	bl	162d0 <codadump_filter_remove@@Base+0x2a8>
   16340:	ldr	r3, [sp, #4]
   16344:	str	r6, [r3, #4]
   16348:	add	r0, sp, #4
   1634c:	bl	16028 <codadump_filter_remove@@Base>
   16350:	add	sp, sp, #8
   16354:	pop	{r4, r5, r6, pc}
   16358:	bl	16028 <codadump_filter_remove@@Base>
   1635c:	b	16348 <codadump_filter_remove@@Base+0x320>
   16360:	ldr	r3, [r4, #8]
   16364:	cmp	r3, #0
   16368:	streq	r5, [r4, #8]
   1636c:	beq	16350 <codadump_filter_remove@@Base+0x328>
   16370:	mov	r1, r5
   16374:	add	r0, r4, #8
   16378:	bl	162d0 <codadump_filter_remove@@Base+0x2a8>
   1637c:	b	16350 <codadump_filter_remove@@Base+0x328>
   16380:	andeq	r8, r1, r2, lsr pc
   16384:	muleq	r1, r9, pc	; <UNPREDICTABLE>
   16388:	andeq	r8, r1, r5, ror #31

0001638c <codadump_filter_create@@Base>:
   1638c:	push	{r0, r1, r2, r3, r4, lr}
   16390:	mov	r3, #0
   16394:	cmp	r0, r3
   16398:	str	r3, [sp, #4]
   1639c:	str	r3, [sp, #8]
   163a0:	str	r0, [sp, #12]
   163a4:	beq	163d8 <codadump_filter_create@@Base+0x4c>
   163a8:	ldr	r0, [sp, #12]
   163ac:	ldrb	r3, [r0]
   163b0:	cmp	r3, #0
   163b4:	beq	163d8 <codadump_filter_create@@Base+0x4c>
   163b8:	add	r1, sp, #8
   163bc:	add	r2, sp, #12
   163c0:	bl	160c0 <codadump_filter_remove@@Base+0x98>
   163c4:	ldr	r1, [sp, #8]
   163c8:	add	r0, sp, #4
   163cc:	cmp	r1, #0
   163d0:	bne	163e4 <codadump_filter_create@@Base+0x58>
   163d4:	bl	16028 <codadump_filter_remove@@Base>
   163d8:	ldr	r0, [sp, #4]
   163dc:	add	sp, sp, #20
   163e0:	pop	{pc}		; (ldr pc, [sp], #4)
   163e4:	bl	162d0 <codadump_filter_remove@@Base+0x2a8>
   163e8:	mov	r3, #0
   163ec:	str	r3, [sp, #8]
   163f0:	b	163a8 <codadump_filter_create@@Base+0x1c>

000163f4 <codadump_filter_get_fieldname@@Base>:
   163f4:	cmp	r0, #0
   163f8:	bne	16414 <codadump_filter_get_fieldname@@Base+0x20>
   163fc:	push	{r4, lr}
   16400:	mov	r2, #216	; 0xd8
   16404:	ldr	r3, [pc, #16]	; 1641c <codadump_filter_get_fieldname@@Base+0x28>
   16408:	ldr	r1, [pc, #16]	; 16420 <codadump_filter_get_fieldname@@Base+0x2c>
   1640c:	ldr	r0, [pc, #16]	; 16424 <codadump_filter_get_fieldname@@Base+0x30>
   16410:	bl	12650 <__assert_fail@plt>
   16414:	ldr	r0, [r0]
   16418:	bx	lr
   1641c:	andeq	r8, r1, sp, lsr pc
   16420:	muleq	r1, r9, pc	; <UNPREDICTABLE>
   16424:	andeq	r8, r1, r5, ror #31

00016428 <codadump_filter_get_subfilter@@Base>:
   16428:	cmp	r0, #0
   1642c:	bne	16448 <codadump_filter_get_subfilter@@Base+0x20>
   16430:	push	{r4, lr}
   16434:	mov	r2, #223	; 0xdf
   16438:	ldr	r3, [pc, #16]	; 16450 <codadump_filter_get_subfilter@@Base+0x28>
   1643c:	ldr	r1, [pc, #16]	; 16454 <codadump_filter_get_subfilter@@Base+0x2c>
   16440:	ldr	r0, [pc, #16]	; 16458 <codadump_filter_get_subfilter@@Base+0x30>
   16444:	bl	12650 <__assert_fail@plt>
   16448:	ldr	r0, [r0, #4]
   1644c:	bx	lr
   16450:	andeq	r8, r1, fp, asr pc
   16454:	muleq	r1, r9, pc	; <UNPREDICTABLE>
   16458:	andeq	r8, r1, r5, ror #31

0001645c <codadump_filter_get_next_filter@@Base>:
   1645c:	cmp	r0, #0
   16460:	bne	1647c <codadump_filter_get_next_filter@@Base+0x20>
   16464:	push	{r4, lr}
   16468:	mov	r2, #230	; 0xe6
   1646c:	ldr	r3, [pc, #16]	; 16484 <codadump_filter_get_next_filter@@Base+0x28>
   16470:	ldr	r1, [pc, #16]	; 16488 <codadump_filter_get_next_filter@@Base+0x2c>
   16474:	ldr	r0, [pc, #16]	; 1648c <codadump_filter_get_next_filter@@Base+0x30>
   16478:	bl	12650 <__assert_fail@plt>
   1647c:	ldr	r0, [r0, #8]
   16480:	bx	lr
   16484:	andeq	r8, r1, r9, ror pc
   16488:	muleq	r1, r9, pc	; <UNPREDICTABLE>
   1648c:	andeq	r8, r1, r5, ror #31
   16490:	push	{r0, r1, r2, r3}
   16494:	ldr	r3, [pc, #36]	; 164c0 <codadump_filter_get_next_filter@@Base+0x64>
   16498:	push	{r0, r1, r2, lr}
   1649c:	add	r2, sp, #20
   164a0:	ldr	r1, [sp, #16]
   164a4:	ldr	r0, [r3]
   164a8:	str	r2, [sp, #4]
   164ac:	bl	12548 <vfprintf@plt>
   164b0:	add	sp, sp, #12
   164b4:	pop	{lr}		; (ldr lr, [sp], #4)
   164b8:	add	sp, sp, #16
   164bc:	bx	lr
   164c0:	muleq	r2, r8, r0
   164c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164c8:	mov	r5, r0
   164cc:	ldr	r7, [pc, #176]	; 16584 <codadump_filter_get_next_filter@@Base+0x128>
   164d0:	ldr	r8, [pc, #176]	; 16588 <codadump_filter_get_next_filter@@Base+0x12c>
   164d4:	ldr	r9, [pc, #176]	; 1658c <codadump_filter_get_next_filter@@Base+0x130>
   164d8:	mov	r6, r1
   164dc:	mov	r4, r0
   164e0:	sub	r3, r4, r5
   164e4:	cmp	r6, r3
   164e8:	bgt	164f0 <codadump_filter_get_next_filter@@Base+0x94>
   164ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164f0:	ldrb	r1, [r4], #1
   164f4:	cmp	r1, #12
   164f8:	beq	16544 <codadump_filter_get_next_filter@@Base+0xe8>
   164fc:	bhi	16524 <codadump_filter_get_next_filter@@Base+0xc8>
   16500:	cmp	r1, #9
   16504:	beq	16554 <codadump_filter_get_next_filter@@Base+0xf8>
   16508:	cmp	r1, #10
   1650c:	beq	1654c <codadump_filter_get_next_filter@@Base+0xf0>
   16510:	cmp	r1, #8
   16514:	bne	1656c <codadump_filter_get_next_filter@@Base+0x110>
   16518:	ldr	r0, [pc, #112]	; 16590 <codadump_filter_get_next_filter@@Base+0x134>
   1651c:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16520:	b	164e0 <codadump_filter_get_next_filter@@Base+0x84>
   16524:	cmp	r1, #34	; 0x22
   16528:	beq	1655c <codadump_filter_get_next_filter@@Base+0x100>
   1652c:	cmp	r1, #92	; 0x5c
   16530:	beq	16564 <codadump_filter_get_next_filter@@Base+0x108>
   16534:	cmp	r1, #13
   16538:	bne	1656c <codadump_filter_get_next_filter@@Base+0x110>
   1653c:	ldr	r0, [pc, #80]	; 16594 <codadump_filter_get_next_filter@@Base+0x138>
   16540:	b	1651c <codadump_filter_get_next_filter@@Base+0xc0>
   16544:	mov	r0, r7
   16548:	b	1651c <codadump_filter_get_next_filter@@Base+0xc0>
   1654c:	ldr	r0, [pc, #68]	; 16598 <codadump_filter_get_next_filter@@Base+0x13c>
   16550:	b	1651c <codadump_filter_get_next_filter@@Base+0xc0>
   16554:	ldr	r0, [pc, #64]	; 1659c <codadump_filter_get_next_filter@@Base+0x140>
   16558:	b	1651c <codadump_filter_get_next_filter@@Base+0xc0>
   1655c:	ldr	r0, [pc, #60]	; 165a0 <codadump_filter_get_next_filter@@Base+0x144>
   16560:	b	1651c <codadump_filter_get_next_filter@@Base+0xc0>
   16564:	ldr	r0, [pc, #56]	; 165a4 <codadump_filter_get_next_filter@@Base+0x148>
   16568:	b	1651c <codadump_filter_get_next_filter@@Base+0xc0>
   1656c:	sub	r3, r1, #32
   16570:	cmp	r3, #94	; 0x5e
   16574:	movls	r0, r9
   16578:	movhi	r0, r8
   1657c:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16580:	b	164e0 <codadump_filter_get_next_filter@@Base+0x84>
   16584:	andeq	r8, r1, r3, lsl #24
   16588:	andeq	r9, r1, ip, asr #32
   1658c:	andeq	r8, r1, r0, ror ip
   16590:	strdeq	r8, [r1], -r7
   16594:	andeq	r8, r1, r6, lsl #24
   16598:	strdeq	r8, [r1], -sp
   1659c:	strdeq	r8, [r1], -sl
   165a0:	andeq	r9, r1, r9, asr #32
   165a4:	andeq	r8, r1, r9, lsl #24
   165a8:	push	{r4, r5, r6, r7, r8, lr}
   165ac:	sub	sp, sp, #72	; 0x48
   165b0:	mov	r3, #0
   165b4:	str	r3, [sp, #12]
   165b8:	ldr	r3, [pc, #1776]	; 16cb0 <codadump_filter_get_next_filter@@Base+0x854>
   165bc:	mov	r4, r0
   165c0:	ldr	r3, [r3]
   165c4:	cmp	r3, #0
   165c8:	beq	16620 <codadump_filter_get_next_filter@@Base+0x1c4>
   165cc:	add	r1, sp, #12
   165d0:	bl	12308 <coda_cursor_has_attributes@plt>
   165d4:	cmp	r0, #0
   165d8:	beq	165e0 <codadump_filter_get_next_filter@@Base+0x184>
   165dc:	bl	1889c <handle_coda_error@@Base>
   165e0:	ldr	r3, [sp, #12]
   165e4:	cmp	r3, #0
   165e8:	beq	16620 <codadump_filter_get_next_filter@@Base+0x1c4>
   165ec:	ldr	r0, [pc, #1728]	; 16cb4 <codadump_filter_get_next_filter@@Base+0x858>
   165f0:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   165f4:	mov	r0, r4
   165f8:	bl	12488 <coda_cursor_goto_attributes@plt>
   165fc:	cmp	r0, #0
   16600:	beq	16608 <codadump_filter_get_next_filter@@Base+0x1ac>
   16604:	bl	1889c <handle_coda_error@@Base>
   16608:	mov	r0, r4
   1660c:	bl	165a8 <codadump_filter_get_next_filter@@Base+0x14c>
   16610:	mov	r0, r4
   16614:	bl	123ec <coda_cursor_goto_parent@plt>
   16618:	ldr	r0, [pc, #1688]	; 16cb8 <codadump_filter_get_next_filter@@Base+0x85c>
   1661c:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16620:	add	r1, sp, #8
   16624:	mov	r0, r4
   16628:	bl	12314 <coda_cursor_get_type_class@plt>
   1662c:	cmp	r0, #0
   16630:	beq	16638 <codadump_filter_get_next_filter@@Base+0x1dc>
   16634:	bl	1889c <handle_coda_error@@Base>
   16638:	ldr	r3, [sp, #8]
   1663c:	cmp	r3, #6
   16640:	ldrls	pc, [pc, r3, lsl #2]
   16644:	b	16a08 <codadump_filter_get_next_filter@@Base+0x5ac>
   16648:	andeq	r6, r1, r4, ror #12
   1664c:	andeq	r6, r1, r4, lsl r8
   16650:	ldrdeq	r6, [r1], -r8
   16654:	ldrdeq	r6, [r1], -r8
   16658:	ldrdeq	r6, [r1], -r8
   1665c:	ldrdeq	r6, [r1], -r8
   16660:			; <UNDEFINED> instruction: 0x00016bb4
   16664:	ldr	r0, [pc, #1616]	; 16cbc <codadump_filter_get_next_filter@@Base+0x860>
   16668:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   1666c:	add	r1, sp, #16
   16670:	mov	r0, r4
   16674:	bl	1226c <coda_cursor_get_num_elements@plt>
   16678:	cmp	r0, #0
   1667c:	beq	16684 <codadump_filter_get_next_filter@@Base+0x228>
   16680:	bl	1889c <handle_coda_error@@Base>
   16684:	ldr	r3, [sp, #16]
   16688:	cmp	r3, #0
   1668c:	ble	16734 <codadump_filter_get_next_filter@@Base+0x2d8>
   16690:	add	r1, sp, #20
   16694:	mov	r0, r4
   16698:	bl	122cc <coda_cursor_get_type@plt>
   1669c:	cmp	r0, #0
   166a0:	beq	166a8 <codadump_filter_get_next_filter@@Base+0x24c>
   166a4:	bl	1889c <handle_coda_error@@Base>
   166a8:	add	r1, sp, #24
   166ac:	ldr	r0, [sp, #20]
   166b0:	bl	124d0 <coda_type_get_record_union_status@plt>
   166b4:	cmp	r0, #0
   166b8:	beq	166c0 <codadump_filter_get_next_filter@@Base+0x264>
   166bc:	bl	1889c <handle_coda_error@@Base>
   166c0:	ldr	r3, [sp, #24]
   166c4:	cmp	r3, #0
   166c8:	beq	16740 <codadump_filter_get_next_filter@@Base+0x2e4>
   166cc:	add	r1, sp, #28
   166d0:	mov	r0, r4
   166d4:	bl	125cc <coda_cursor_get_available_union_field_index@plt>
   166d8:	cmp	r0, #0
   166dc:	beq	166e4 <codadump_filter_get_next_filter@@Base+0x288>
   166e0:	bl	1889c <handle_coda_error@@Base>
   166e4:	add	r2, sp, #40	; 0x28
   166e8:	ldr	r1, [sp, #28]
   166ec:	ldr	r0, [sp, #20]
   166f0:	bl	12614 <coda_type_get_record_field_name@plt>
   166f4:	cmp	r0, #0
   166f8:	beq	16700 <codadump_filter_get_next_filter@@Base+0x2a4>
   166fc:	bl	1889c <handle_coda_error@@Base>
   16700:	ldr	r1, [sp, #28]
   16704:	mov	r0, r4
   16708:	bl	1238c <coda_cursor_goto_record_field_by_index@plt>
   1670c:	cmp	r0, #0
   16710:	beq	16718 <codadump_filter_get_next_filter@@Base+0x2bc>
   16714:	bl	1889c <handle_coda_error@@Base>
   16718:	ldr	r1, [sp, #40]	; 0x28
   1671c:	ldr	r0, [pc, #1436]	; 16cc0 <codadump_filter_get_next_filter@@Base+0x864>
   16720:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16724:	mov	r0, r4
   16728:	bl	165a8 <codadump_filter_get_next_filter@@Base+0x14c>
   1672c:	mov	r0, r4
   16730:	bl	123ec <coda_cursor_goto_parent@plt>
   16734:	ldr	r0, [pc, #1416]	; 16cc4 <codadump_filter_get_next_filter@@Base+0x868>
   16738:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   1673c:	b	16a08 <codadump_filter_get_next_filter@@Base+0x5ac>
   16740:	mov	r0, r4
   16744:	bl	12380 <coda_cursor_goto_first_record_field@plt>
   16748:	cmp	r0, #0
   1674c:	beq	16754 <codadump_filter_get_next_filter@@Base+0x2f8>
   16750:	bl	1889c <handle_coda_error@@Base>
   16754:	ldr	r6, [pc, #1380]	; 16cc0 <codadump_filter_get_next_filter@@Base+0x864>
   16758:	mov	r5, #1
   1675c:	mov	r3, #0
   16760:	str	r3, [sp, #28]
   16764:	ldr	r1, [sp, #28]
   16768:	ldr	r3, [sp, #16]
   1676c:	cmp	r1, r3
   16770:	bge	1672c <codadump_filter_get_next_filter@@Base+0x2d0>
   16774:	add	r2, sp, #40	; 0x28
   16778:	ldr	r0, [sp, #20]
   1677c:	bl	1220c <coda_type_get_record_field_hidden_status@plt>
   16780:	cmp	r0, #0
   16784:	beq	1678c <codadump_filter_get_next_filter@@Base+0x330>
   16788:	bl	1889c <handle_coda_error@@Base>
   1678c:	ldr	r7, [sp, #40]	; 0x28
   16790:	cmp	r7, #0
   16794:	bne	167dc <codadump_filter_get_next_filter@@Base+0x380>
   16798:	cmp	r5, #0
   1679c:	bne	167a8 <codadump_filter_get_next_filter@@Base+0x34c>
   167a0:	ldr	r0, [pc, #1312]	; 16cc8 <codadump_filter_get_next_filter@@Base+0x86c>
   167a4:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   167a8:	add	r2, sp, #32
   167ac:	ldr	r1, [sp, #28]
   167b0:	ldr	r0, [sp, #20]
   167b4:	bl	12614 <coda_type_get_record_field_name@plt>
   167b8:	cmp	r0, #0
   167bc:	beq	167c4 <codadump_filter_get_next_filter@@Base+0x368>
   167c0:	bl	1889c <handle_coda_error@@Base>
   167c4:	ldr	r1, [sp, #32]
   167c8:	mov	r0, r6
   167cc:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   167d0:	mov	r0, r4
   167d4:	bl	165a8 <codadump_filter_get_next_filter@@Base+0x14c>
   167d8:	mov	r5, r7
   167dc:	ldr	r3, [sp, #16]
   167e0:	ldr	r2, [sp, #28]
   167e4:	sub	r3, r3, #1
   167e8:	cmp	r3, r2
   167ec:	ble	16804 <codadump_filter_get_next_filter@@Base+0x3a8>
   167f0:	mov	r0, r4
   167f4:	bl	12578 <coda_cursor_goto_next_record_field@plt>
   167f8:	cmp	r0, #0
   167fc:	beq	16804 <codadump_filter_get_next_filter@@Base+0x3a8>
   16800:	bl	1889c <handle_coda_error@@Base>
   16804:	ldr	r3, [sp, #28]
   16808:	add	r3, r3, #1
   1680c:	str	r3, [sp, #28]
   16810:	b	16764 <codadump_filter_get_next_filter@@Base+0x308>
   16814:	ldr	r0, [pc, #1200]	; 16ccc <codadump_filter_get_next_filter@@Base+0x870>
   16818:	add	r6, sp, #40	; 0x28
   1681c:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16820:	mov	r2, r6
   16824:	add	r1, sp, #32
   16828:	mov	r0, r4
   1682c:	bl	12518 <coda_cursor_get_array_dim@plt>
   16830:	cmp	r0, #0
   16834:	beq	1683c <codadump_filter_get_next_filter@@Base+0x3e0>
   16838:	bl	1889c <handle_coda_error@@Base>
   1683c:	ldr	r2, [sp, #32]
   16840:	cmp	r2, #0
   16844:	movge	r3, #0
   16848:	movge	r5, #1
   1684c:	bge	16864 <codadump_filter_get_next_filter@@Base+0x408>
   16850:	ldr	r0, [pc, #1144]	; 16cd0 <codadump_filter_get_next_filter@@Base+0x874>
   16854:	b	16738 <codadump_filter_get_next_filter@@Base+0x2dc>
   16858:	ldr	r1, [r6, r3, lsl #2]
   1685c:	add	r3, r3, #1
   16860:	mul	r5, r1, r5
   16864:	cmp	r3, r2
   16868:	bne	16858 <codadump_filter_get_next_filter@@Base+0x3fc>
   1686c:	cmp	r5, #0
   16870:	ble	16850 <codadump_filter_get_next_filter@@Base+0x3f4>
   16874:	mov	r0, r4
   16878:	bl	1235c <coda_cursor_goto_first_array_element@plt>
   1687c:	cmp	r0, #0
   16880:	beq	16888 <codadump_filter_get_next_filter@@Base+0x42c>
   16884:	bl	1889c <handle_coda_error@@Base>
   16888:	ldr	r8, [pc, #1080]	; 16cc8 <codadump_filter_get_next_filter@@Base+0x86c>
   1688c:	mov	r6, #0
   16890:	sub	r7, r5, #1
   16894:	mov	r0, r4
   16898:	bl	165a8 <codadump_filter_get_next_filter@@Base+0x14c>
   1689c:	cmp	r7, r6
   168a0:	ble	168c0 <codadump_filter_get_next_filter@@Base+0x464>
   168a4:	mov	r0, r8
   168a8:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   168ac:	mov	r0, r4
   168b0:	bl	12458 <coda_cursor_goto_next_array_element@plt>
   168b4:	cmp	r0, #0
   168b8:	beq	168c0 <codadump_filter_get_next_filter@@Base+0x464>
   168bc:	bl	1889c <handle_coda_error@@Base>
   168c0:	add	r6, r6, #1
   168c4:	cmp	r5, r6
   168c8:	bne	16894 <codadump_filter_get_next_filter@@Base+0x438>
   168cc:	mov	r0, r4
   168d0:	bl	123ec <coda_cursor_goto_parent@plt>
   168d4:	b	16850 <codadump_filter_get_next_filter@@Base+0x3f4>
   168d8:	add	r1, sp, #28
   168dc:	mov	r0, r4
   168e0:	bl	123b0 <coda_cursor_get_read_type@plt>
   168e4:	cmp	r0, #0
   168e8:	beq	168f0 <codadump_filter_get_next_filter@@Base+0x494>
   168ec:	bl	1889c <handle_coda_error@@Base>
   168f0:	ldr	r3, [sp, #28]
   168f4:	add	r3, r3, #1
   168f8:	cmp	r3, #13
   168fc:	ldrls	pc, [pc, r3, lsl #2]
   16900:	b	16a08 <codadump_filter_get_next_filter@@Base+0x5ac>
   16904:	andeq	r6, r1, ip, ror #23
   16908:	ldrdeq	r6, [r1], -r8
   1690c:	andeq	r6, r1, r0, lsl #22
   16910:	ldrdeq	r6, [r1], -r8
   16914:	andeq	r6, r1, r0, lsl #22
   16918:	ldrdeq	r6, [r1], -r8
   1691c:	andeq	r6, r1, r0, lsl #22
   16920:	andeq	r6, r1, r4, lsr #22
   16924:	andeq	r6, r1, r4, asr fp
   16928:	andeq	r6, r1, ip, ror fp
   1692c:	andeq	r6, r1, ip, ror fp
   16930:	andeq	r6, r1, ip, lsr r9
   16934:	andeq	r6, r1, r0, ror r9
   16938:	andeq	r6, r1, r4, lsr #20
   1693c:	add	r1, sp, #40	; 0x28
   16940:	mov	r0, r4
   16944:	bl	12494 <coda_cursor_read_char@plt>
   16948:	cmp	r0, #0
   1694c:	beq	16954 <codadump_filter_get_next_filter@@Base+0x4f8>
   16950:	bl	1889c <handle_coda_error@@Base>
   16954:	ldr	r0, [pc, #888]	; 16cd4 <codadump_filter_get_next_filter@@Base+0x878>
   16958:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   1695c:	add	r0, sp, #40	; 0x28
   16960:	mov	r1, #1
   16964:	bl	164c4 <codadump_filter_get_next_filter@@Base+0x68>
   16968:	ldr	r0, [pc, #868]	; 16cd4 <codadump_filter_get_next_filter@@Base+0x878>
   1696c:	b	16738 <codadump_filter_get_next_filter@@Base+0x2dc>
   16970:	add	r1, sp, #40	; 0x28
   16974:	mov	r0, r4
   16978:	bl	1241c <coda_cursor_get_string_length@plt>
   1697c:	cmp	r0, #0
   16980:	beq	16988 <codadump_filter_get_next_filter@@Base+0x52c>
   16984:	bl	1889c <handle_coda_error@@Base>
   16988:	ldr	r0, [sp, #40]	; 0x28
   1698c:	add	r0, r0, #1
   16990:	bl	123bc <malloc@plt>
   16994:	subs	r5, r0, #0
   16998:	bne	169c0 <codadump_filter_get_next_filter@@Base+0x564>
   1699c:	ldr	r3, [pc, #820]	; 16cd8 <codadump_filter_get_next_filter@@Base+0x87c>
   169a0:	ldr	r2, [sp, #40]	; 0x28
   169a4:	str	r3, [sp]
   169a8:	add	r2, r2, #1
   169ac:	ldr	r3, [pc, #808]	; 16cdc <codadump_filter_get_next_filter@@Base+0x880>
   169b0:	ldr	r1, [pc, #808]	; 16ce0 <codadump_filter_get_next_filter@@Base+0x884>
   169b4:	mvn	r0, #0
   169b8:	bl	1223c <coda_set_error@plt>
   169bc:	bl	1889c <handle_coda_error@@Base>
   169c0:	ldr	r2, [sp, #40]	; 0x28
   169c4:	mov	r1, r5
   169c8:	add	r2, r2, #1
   169cc:	mov	r0, r4
   169d0:	bl	123e0 <coda_cursor_read_string@plt>
   169d4:	cmp	r0, #0
   169d8:	beq	169e0 <codadump_filter_get_next_filter@@Base+0x584>
   169dc:	bl	1889c <handle_coda_error@@Base>
   169e0:	ldr	r0, [pc, #748]	; 16cd4 <codadump_filter_get_next_filter@@Base+0x878>
   169e4:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   169e8:	ldr	r1, [sp, #40]	; 0x28
   169ec:	mov	r0, r5
   169f0:	bl	164c4 <codadump_filter_get_next_filter@@Base+0x68>
   169f4:	ldr	r1, [sp, #40]	; 0x28
   169f8:	ldr	r0, [pc, #724]	; 16cd4 <codadump_filter_get_next_filter@@Base+0x878>
   169fc:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16a00:	mov	r0, r5
   16a04:	bl	12284 <free@plt>
   16a08:	ldr	r3, [sp, #12]
   16a0c:	cmp	r3, #0
   16a10:	beq	16a1c <codadump_filter_get_next_filter@@Base+0x5c0>
   16a14:	ldr	r0, [pc, #680]	; 16cc4 <codadump_filter_get_next_filter@@Base+0x868>
   16a18:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16a1c:	add	sp, sp, #72	; 0x48
   16a20:	pop	{r4, r5, r6, r7, r8, pc}
   16a24:	add	r1, sp, #40	; 0x28
   16a28:	mov	r0, r4
   16a2c:	bl	1259c <coda_cursor_get_bit_size@plt>
   16a30:	cmp	r0, #0
   16a34:	beq	16a3c <codadump_filter_get_next_filter@@Base+0x5e0>
   16a38:	bl	1889c <handle_coda_error@@Base>
   16a3c:	ldrd	r0, [sp, #40]	; 0x28
   16a40:	mov	r3, #0
   16a44:	and	r2, r0, #7
   16a48:	orrs	r3, r2, r3
   16a4c:	lsr	r6, r0, #3
   16a50:	movne	ip, #1
   16a54:	moveq	ip, #0
   16a58:	orr	r6, r6, r1, lsl #29
   16a5c:	adds	r6, r6, ip
   16a60:	mov	r0, r6
   16a64:	bl	123bc <malloc@plt>
   16a68:	subs	r5, r0, #0
   16a6c:	bne	16a90 <codadump_filter_get_next_filter@@Base+0x634>
   16a70:	ldr	r3, [pc, #620]	; 16ce4 <codadump_filter_get_next_filter@@Base+0x888>
   16a74:	mov	r2, r6
   16a78:	str	r3, [sp]
   16a7c:	ldr	r1, [pc, #604]	; 16ce0 <codadump_filter_get_next_filter@@Base+0x884>
   16a80:	ldr	r3, [pc, #596]	; 16cdc <codadump_filter_get_next_filter@@Base+0x880>
   16a84:	mvn	r0, #0
   16a88:	bl	1223c <coda_set_error@plt>
   16a8c:	bl	1889c <handle_coda_error@@Base>
   16a90:	ldrd	r2, [sp, #40]	; 0x28
   16a94:	mov	r1, r5
   16a98:	mov	r0, r4
   16a9c:	strd	r2, [sp]
   16aa0:	mov	r2, #0
   16aa4:	mov	r3, #0
   16aa8:	bl	12638 <coda_cursor_read_bits@plt>
   16aac:	cmp	r0, #0
   16ab0:	beq	16ab8 <codadump_filter_get_next_filter@@Base+0x65c>
   16ab4:	bl	1889c <handle_coda_error@@Base>
   16ab8:	ldr	r0, [pc, #532]	; 16cd4 <codadump_filter_get_next_filter@@Base+0x878>
   16abc:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16ac0:	mov	r0, r5
   16ac4:	mov	r1, r6
   16ac8:	bl	164c4 <codadump_filter_get_next_filter@@Base+0x68>
   16acc:	ldr	r0, [pc, #512]	; 16cd4 <codadump_filter_get_next_filter@@Base+0x878>
   16ad0:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16ad4:	b	16a00 <codadump_filter_get_next_filter@@Base+0x5a4>
   16ad8:	add	r1, sp, #40	; 0x28
   16adc:	mov	r0, r4
   16ae0:	bl	125d8 <coda_cursor_read_int32@plt>
   16ae4:	cmp	r0, #0
   16ae8:	beq	16af0 <codadump_filter_get_next_filter@@Base+0x694>
   16aec:	bl	1889c <handle_coda_error@@Base>
   16af0:	ldr	r1, [sp, #40]	; 0x28
   16af4:	ldr	r0, [pc, #492]	; 16ce8 <codadump_filter_get_next_filter@@Base+0x88c>
   16af8:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16afc:	b	16a08 <codadump_filter_get_next_filter@@Base+0x5ac>
   16b00:	add	r1, sp, #40	; 0x28
   16b04:	mov	r0, r4
   16b08:	bl	122a8 <coda_cursor_read_uint32@plt>
   16b0c:	cmp	r0, #0
   16b10:	beq	16b18 <codadump_filter_get_next_filter@@Base+0x6bc>
   16b14:	bl	1889c <handle_coda_error@@Base>
   16b18:	ldr	r1, [sp, #40]	; 0x28
   16b1c:	ldr	r0, [pc, #456]	; 16cec <codadump_filter_get_next_filter@@Base+0x890>
   16b20:	b	16af8 <codadump_filter_get_next_filter@@Base+0x69c>
   16b24:	add	r1, sp, #32
   16b28:	mov	r0, r4
   16b2c:	bl	1253c <coda_cursor_read_int64@plt>
   16b30:	cmp	r0, #0
   16b34:	beq	16b3c <codadump_filter_get_next_filter@@Base+0x6e0>
   16b38:	bl	1889c <handle_coda_error@@Base>
   16b3c:	add	r2, sp, #40	; 0x28
   16b40:	ldrd	r0, [sp, #32]
   16b44:	bl	12644 <coda_str64@plt>
   16b48:	add	r1, sp, #40	; 0x28
   16b4c:	ldr	r0, [pc, #412]	; 16cf0 <codadump_filter_get_next_filter@@Base+0x894>
   16b50:	b	16af8 <codadump_filter_get_next_filter@@Base+0x69c>
   16b54:	add	r1, sp, #32
   16b58:	mov	r0, r4
   16b5c:	bl	12428 <coda_cursor_read_uint64@plt>
   16b60:	cmp	r0, #0
   16b64:	beq	16b6c <codadump_filter_get_next_filter@@Base+0x710>
   16b68:	bl	1889c <handle_coda_error@@Base>
   16b6c:	add	r2, sp, #40	; 0x28
   16b70:	ldrd	r0, [sp, #32]
   16b74:	bl	12278 <coda_str64u@plt>
   16b78:	b	16b48 <codadump_filter_get_next_filter@@Base+0x6ec>
   16b7c:	add	r1, sp, #40	; 0x28
   16b80:	mov	r0, r4
   16b84:	bl	12434 <coda_cursor_read_double@plt>
   16b88:	cmp	r0, #0
   16b8c:	beq	16b94 <codadump_filter_get_next_filter@@Base+0x738>
   16b90:	bl	1889c <handle_coda_error@@Base>
   16b94:	ldr	r3, [sp, #28]
   16b98:	cmp	r3, #8
   16b9c:	ldrd	r2, [sp, #40]	; 0x28
   16ba0:	ldreq	r0, [pc, #332]	; 16cf4 <codadump_filter_get_next_filter@@Base+0x898>
   16ba4:	beq	16bac <codadump_filter_get_next_filter@@Base+0x750>
   16ba8:	ldr	r0, [pc, #328]	; 16cf8 <codadump_filter_get_next_filter@@Base+0x89c>
   16bac:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16bb0:	b	16a08 <codadump_filter_get_next_filter@@Base+0x5ac>
   16bb4:	add	r1, sp, #28
   16bb8:	mov	r0, r4
   16bbc:	bl	12350 <coda_cursor_get_special_type@plt>
   16bc0:	cmp	r0, #0
   16bc4:	beq	16bcc <codadump_filter_get_next_filter@@Base+0x770>
   16bc8:	bl	1889c <handle_coda_error@@Base>
   16bcc:	ldr	r3, [sp, #28]
   16bd0:	cmp	r3, #3
   16bd4:	ldrls	pc, [pc, r3, lsl #2]
   16bd8:	b	16a08 <codadump_filter_get_next_filter@@Base+0x5ac>
   16bdc:	andeq	r6, r1, ip, ror #23
   16be0:	strdeq	r6, [r1], -r4
   16be4:	andeq	r6, r1, r4, lsl ip
   16be8:	andeq	r6, r1, ip, ror ip
   16bec:	ldr	r0, [pc, #264]	; 16cfc <codadump_filter_get_next_filter@@Base+0x8a0>
   16bf0:	b	16738 <codadump_filter_get_next_filter@@Base+0x2dc>
   16bf4:	add	r1, sp, #40	; 0x28
   16bf8:	mov	r0, r4
   16bfc:	bl	12434 <coda_cursor_read_double@plt>
   16c00:	cmp	r0, #0
   16c04:	beq	16c0c <codadump_filter_get_next_filter@@Base+0x7b0>
   16c08:	bl	1889c <handle_coda_error@@Base>
   16c0c:	ldrd	r2, [sp, #40]	; 0x28
   16c10:	b	16ba8 <codadump_filter_get_next_filter@@Base+0x74c>
   16c14:	add	r1, sp, #32
   16c18:	mov	r0, r4
   16c1c:	bl	12434 <coda_cursor_read_double@plt>
   16c20:	cmp	r0, #0
   16c24:	beq	16c2c <codadump_filter_get_next_filter@@Base+0x7d0>
   16c28:	bl	1889c <handle_coda_error@@Base>
   16c2c:	vldr	d0, [sp, #32]
   16c30:	bl	12440 <coda_isNaN@plt>
   16c34:	cmp	r0, #0
   16c38:	beq	16c44 <codadump_filter_get_next_filter@@Base+0x7e8>
   16c3c:	ldrd	r2, [sp, #32]
   16c40:	b	16ba8 <codadump_filter_get_next_filter@@Base+0x74c>
   16c44:	vldr	d0, [sp, #32]
   16c48:	bl	122e4 <coda_isInf@plt>
   16c4c:	cmp	r0, #0
   16c50:	bne	16c3c <codadump_filter_get_next_filter@@Base+0x7e0>
   16c54:	add	r1, sp, #40	; 0x28
   16c58:	ldr	r0, [pc, #160]	; 16d00 <codadump_filter_get_next_filter@@Base+0x8a4>
   16c5c:	vldr	d0, [sp, #32]
   16c60:	bl	12260 <coda_time_double_to_string@plt>
   16c64:	cmp	r0, #0
   16c68:	ldrne	r0, [pc, #148]	; 16d04 <codadump_filter_get_next_filter@@Base+0x8a8>
   16c6c:	bne	16738 <codadump_filter_get_next_filter@@Base+0x2dc>
   16c70:	add	r1, sp, #40	; 0x28
   16c74:	ldr	r0, [pc, #140]	; 16d08 <codadump_filter_get_next_filter@@Base+0x8ac>
   16c78:	b	16af8 <codadump_filter_get_next_filter@@Base+0x69c>
   16c7c:	add	r2, sp, #40	; 0x28
   16c80:	add	r1, sp, #32
   16c84:	mov	r0, r4
   16c88:	bl	124dc <coda_cursor_read_complex_double_split@plt>
   16c8c:	cmp	r0, #0
   16c90:	beq	16c98 <codadump_filter_get_next_filter@@Base+0x83c>
   16c94:	bl	1889c <handle_coda_error@@Base>
   16c98:	ldrd	r2, [sp, #40]	; 0x28
   16c9c:	ldr	r0, [pc, #104]	; 16d0c <codadump_filter_get_next_filter@@Base+0x8b0>
   16ca0:	strd	r2, [sp]
   16ca4:	ldrd	r2, [sp, #32]
   16ca8:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16cac:	b	16a08 <codadump_filter_get_next_filter@@Base+0x5ac>
   16cb0:	andeq	fp, r2, r8, asr #3
   16cb4:	andeq	r9, r1, r3, asr r0
   16cb8:	andeq	r9, r1, ip, asr r0
   16cbc:	andeq	r9, r1, r5, rrx
   16cc0:	andeq	r9, r1, r7, rrx
   16cc4:	andeq	r9, r1, sp, rrx
   16cc8:	andeq	r8, r1, r6, lsr #29
   16ccc:	andeq	r9, r1, r0, lsr r1
   16cd0:	andeq	r9, r1, r5, lsr #3
   16cd4:	andeq	r9, r1, sl, asr #32
   16cd8:	andeq	r0, r0, pc, lsr #2
   16cdc:	andeq	r9, r1, pc, rrx
   16ce0:			; <UNDEFINED> instruction: 0x00018bbf
   16ce4:	andeq	r0, r0, lr, asr #2
   16ce8:	andeq	r9, r1, r7, lsr #2
   16cec:	andeq	r8, r1, r2, lsl ip
   16cf0:	andeq	r9, r1, r3, lsr r1
   16cf4:	andeq	r8, r1, r6, lsl ip
   16cf8:	andeq	r8, r1, fp, lsl ip
   16cfc:	strheq	r9, [r1], -r9	; <UNPREDICTABLE>
   16d00:	strheq	r9, [r1], -lr
   16d04:	ldrdeq	r9, [r1], -fp
   16d08:	andeq	r9, r1, r8, lsr #3
   16d0c:	strdeq	r9, [r1], -r6

00016d10 <print_json_data@@Base>:
   16d10:	push	{r4, lr}
   16d14:	sub	sp, sp, #528	; 0x210
   16d18:	ldr	r3, [pc, #188]	; 16ddc <print_json_data@@Base+0xcc>
   16d1c:	ldr	r4, [pc, #188]	; 16de0 <print_json_data@@Base+0xd0>
   16d20:	add	r1, sp, #4
   16d24:	str	r0, [r3]
   16d28:	ldr	r0, [r4]
   16d2c:	bl	12248 <coda_open@plt>
   16d30:	cmp	r0, #0
   16d34:	beq	16d4c <print_json_data@@Base+0x3c>
   16d38:	bl	125fc <coda_get_errno@plt>
   16d3c:	ldr	r3, [r0]
   16d40:	cmn	r3, #21
   16d44:	beq	16db0 <print_json_data@@Base+0xa0>
   16d48:	bl	1889c <handle_coda_error@@Base>
   16d4c:	ldr	r1, [sp, #4]
   16d50:	add	r0, sp, #8
   16d54:	bl	12368 <coda_cursor_set_product@plt>
   16d58:	cmp	r0, #0
   16d5c:	beq	16d64 <print_json_data@@Base+0x54>
   16d60:	bl	1889c <handle_coda_error@@Base>
   16d64:	ldr	r3, [pc, #120]	; 16de4 <print_json_data@@Base+0xd4>
   16d68:	ldr	r1, [r3]
   16d6c:	cmp	r1, #0
   16d70:	beq	16d88 <print_json_data@@Base+0x78>
   16d74:	add	r0, sp, #8
   16d78:	bl	12554 <coda_cursor_goto@plt>
   16d7c:	cmp	r0, #0
   16d80:	beq	16d88 <print_json_data@@Base+0x78>
   16d84:	bl	1889c <handle_coda_error@@Base>
   16d88:	mov	r0, #0
   16d8c:	bl	121f4 <coda_set_option_perform_boundary_checks@plt>
   16d90:	add	r0, sp, #8
   16d94:	bl	165a8 <codadump_filter_get_next_filter@@Base+0x14c>
   16d98:	ldr	r0, [pc, #72]	; 16de8 <print_json_data@@Base+0xd8>
   16d9c:	bl	16490 <codadump_filter_get_next_filter@@Base+0x34>
   16da0:	ldr	r0, [sp, #4]
   16da4:	bl	12530 <coda_close@plt>
   16da8:	add	sp, sp, #528	; 0x210
   16dac:	pop	{r4, pc}
   16db0:	mov	r0, #0
   16db4:	bl	12290 <coda_set_option_use_mmap@plt>
   16db8:	add	r1, sp, #4
   16dbc:	ldr	r0, [r4]
   16dc0:	bl	12248 <coda_open@plt>
   16dc4:	mov	r4, r0
   16dc8:	mov	r0, #1
   16dcc:	bl	12290 <coda_set_option_use_mmap@plt>
   16dd0:	cmp	r4, #0
   16dd4:	bne	16d48 <print_json_data@@Base+0x38>
   16dd8:	b	16d4c <print_json_data@@Base+0x3c>
   16ddc:	andeq	fp, r2, r8, asr #3
   16de0:	strdeq	fp, [r2], -r0
   16de4:	strheq	ip, [r2], -r0
   16de8:	andeq	sl, r1, r1, asr #5
   16dec:	push	{r4, r5, r6, r7, r8, lr}
   16df0:	mov	r5, #80	; 0x50
   16df4:	ldr	r8, [pc, #192]	; 16ebc <print_json_data@@Base+0x1ac>
   16df8:	mul	r1, r5, r1
   16dfc:	ldr	r5, [pc, #188]	; 16ec0 <print_json_data@@Base+0x1b0>
   16e00:	add	r6, r1, #808	; 0x328
   16e04:	add	r6, r6, r5
   16e08:	mov	r7, r0
   16e0c:	mov	r4, #0
   16e10:	add	r5, r5, r1
   16e14:	ldr	r3, [r5, #804]	; 0x324
   16e18:	cmp	r4, r3
   16e1c:	blt	16e24 <print_json_data@@Base+0x114>
   16e20:	pop	{r4, r5, r6, r7, r8, pc}
   16e24:	cmp	r4, #0
   16e28:	ble	16e38 <print_json_data@@Base+0x128>
   16e2c:	mov	r1, r7
   16e30:	mov	r0, #44	; 0x2c
   16e34:	bl	12584 <fputc@plt>
   16e38:	ldr	r3, [r8]
   16e3c:	cmp	r3, #0
   16e40:	beq	16ea0 <print_json_data@@Base+0x190>
   16e44:	ldr	r2, [r5, #800]	; 0x320
   16e48:	ldr	r3, [pc, #116]	; 16ec4 <print_json_data@@Base+0x1b4>
   16e4c:	add	r2, r4, r2
   16e50:	add	r1, r2, #18
   16e54:	ldr	r1, [r3, r1, lsl #2]
   16e58:	cmp	r1, #0
   16e5c:	lsl	r1, r2, #2
   16e60:	beq	16e88 <print_json_data@@Base+0x178>
   16e64:	add	r1, r3, r1
   16e68:	mov	r0, r7
   16e6c:	ldr	r3, [r1, #4]
   16e70:	ldr	r2, [r1, #36]	; 0x24
   16e74:	ldr	r1, [pc, #76]	; 16ec8 <print_json_data@@Base+0x1b8>
   16e78:	bl	1244c <fprintf@plt>
   16e7c:	add	r4, r4, #1
   16e80:	add	r6, r6, #4
   16e84:	b	16e14 <print_json_data@@Base+0x104>
   16e88:	add	r3, r3, r1
   16e8c:	ldr	r2, [r3, #4]
   16e90:	ldr	r1, [pc, #52]	; 16ecc <print_json_data@@Base+0x1bc>
   16e94:	mov	r0, r7
   16e98:	bl	1244c <fprintf@plt>
   16e9c:	b	16e7c <print_json_data@@Base+0x16c>
   16ea0:	ldr	r2, [r6]
   16ea4:	cmn	r2, #1
   16ea8:	bne	16e90 <print_json_data@@Base+0x180>
   16eac:	mov	r1, r7
   16eb0:	mov	r0, #63	; 0x3f
   16eb4:	bl	12584 <fputc@plt>
   16eb8:	b	16e7c <print_json_data@@Base+0x16c>
   16ebc:	andeq	fp, r2, ip, ror #3
   16ec0:	strdeq	fp, [r2], -r0
   16ec4:	strheq	ip, [r2], -r8
   16ec8:	andeq	r9, r1, r3, lsr #2
   16ecc:	andeq	r9, r1, r7, lsr #2

00016ed0 <print_full_field_name@@Base>:
   16ed0:	cmp	r1, #1
   16ed4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ed8:	mov	r4, r0
   16edc:	mov	r9, r2
   16ee0:	ldr	r5, [pc, #568]	; 17120 <print_full_field_name@@Base+0x250>
   16ee4:	beq	16f80 <print_full_field_name@@Base+0xb0>
   16ee8:	ldr	r8, [pc, #564]	; 17124 <print_full_field_name@@Base+0x254>
   16eec:	mov	r7, r1
   16ef0:	mov	r6, #0
   16ef4:	mov	sl, #46	; 0x2e
   16ef8:	ldr	r3, [r5, #3748]	; 0xea4
   16efc:	cmp	r6, r3
   16f00:	blt	1707c <print_full_field_name@@Base+0x1ac>
   16f04:	cmp	r7, #2
   16f08:	bne	16f78 <print_full_field_name@@Base+0xa8>
   16f0c:	mov	r6, #0
   16f10:	ldr	r8, [pc, #528]	; 17128 <print_full_field_name@@Base+0x258>
   16f14:	ldr	fp, [pc, #528]	; 1712c <print_full_field_name@@Base+0x25c>
   16f18:	mov	r7, r6
   16f1c:	mov	sl, #80	; 0x50
   16f20:	ldr	r3, [r5, #136]	; 0x88
   16f24:	cmp	r7, r3
   16f28:	blt	170a4 <print_full_field_name@@Base+0x1d4>
   16f2c:	cmp	r9, #0
   16f30:	beq	16f70 <print_full_field_name@@Base+0xa0>
   16f34:	ldr	r3, [r5, #3360]	; 0xd20
   16f38:	cmp	r6, r3
   16f3c:	bge	16f70 <print_full_field_name@@Base+0xa0>
   16f40:	mov	r3, #80	; 0x50
   16f44:	mov	r1, r4
   16f48:	mla	r5, r3, r6, r5
   16f4c:	ldr	r3, [r5, #800]	; 0x320
   16f50:	cmp	r3, #0
   16f54:	bne	17114 <print_full_field_name@@Base+0x244>
   16f58:	ldr	r0, [pc, #460]	; 1712c <print_full_field_name@@Base+0x25c>
   16f5c:	bl	12620 <fputs@plt>
   16f60:	mov	r1, r6
   16f64:	mov	r0, r4
   16f68:	bl	16dec <print_json_data@@Base+0xdc>
   16f6c:	add	r6, r6, #1
   16f70:	cmp	r6, #0
   16f74:	bgt	16fcc <print_full_field_name@@Base+0xfc>
   16f78:	add	sp, sp, #12
   16f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f80:	mov	r6, #0
   16f84:	add	sl, r5, #8
   16f88:	mov	r8, r6
   16f8c:	mov	r7, r6
   16f90:	mov	fp, #80	; 0x50
   16f94:	ldr	r3, [r5, #136]	; 0x88
   16f98:	cmp	r7, r3
   16f9c:	blt	16fdc <print_full_field_name@@Base+0x10c>
   16fa0:	cmp	r9, #0
   16fa4:	beq	16f78 <print_full_field_name@@Base+0xa8>
   16fa8:	ldr	r3, [r5, #3360]	; 0xd20
   16fac:	cmp	r6, r3
   16fb0:	bge	16f78 <print_full_field_name@@Base+0xa8>
   16fb4:	mov	r1, r4
   16fb8:	mov	r0, #91	; 0x5b
   16fbc:	bl	12584 <fputc@plt>
   16fc0:	mov	r1, r6
   16fc4:	mov	r0, r4
   16fc8:	bl	16dec <print_json_data@@Base+0xdc>
   16fcc:	mov	r1, r4
   16fd0:	mov	r0, #93	; 0x5d
   16fd4:	bl	12584 <fputc@plt>
   16fd8:	b	16f78 <print_full_field_name@@Base+0xa8>
   16fdc:	add	r1, sp, #4
   16fe0:	ldr	r0, [sl], #4
   16fe4:	bl	1265c <coda_type_get_class@plt>
   16fe8:	cmp	r0, #0
   16fec:	beq	16ff4 <print_full_field_name@@Base+0x124>
   16ff0:	bl	1889c <handle_coda_error@@Base>
   16ff4:	ldr	r3, [sp, #4]
   16ff8:	cmp	r3, #0
   16ffc:	beq	17010 <print_full_field_name@@Base+0x140>
   17000:	cmp	r3, #1
   17004:	beq	1702c <print_full_field_name@@Base+0x15c>
   17008:	add	r7, r7, #1
   1700c:	b	16f94 <print_full_field_name@@Base+0xc4>
   17010:	add	r3, r5, r8, lsl #2
   17014:	ldr	r1, [pc, #276]	; 17130 <print_full_field_name@@Base+0x260>
   17018:	ldr	r2, [r3, #3620]	; 0xe24
   1701c:	mov	r0, r4
   17020:	bl	1244c <fprintf@plt>
   17024:	add	r8, r8, #1
   17028:	b	17008 <print_full_field_name@@Base+0x138>
   1702c:	cmp	r7, #0
   17030:	bne	17040 <print_full_field_name@@Base+0x170>
   17034:	mov	r1, r4
   17038:	mov	r0, #47	; 0x2f
   1703c:	bl	12584 <fputc@plt>
   17040:	mla	r3, fp, r6, r5
   17044:	ldr	r3, [r3, #804]	; 0x324
   17048:	cmp	r3, #0
   1704c:	ble	17074 <print_full_field_name@@Base+0x1a4>
   17050:	mov	r1, r4
   17054:	mov	r0, #91	; 0x5b
   17058:	bl	12584 <fputc@plt>
   1705c:	mov	r1, r6
   17060:	mov	r0, r4
   17064:	bl	16dec <print_json_data@@Base+0xdc>
   17068:	mov	r1, r4
   1706c:	mov	r0, #93	; 0x5d
   17070:	bl	12584 <fputc@plt>
   17074:	add	r6, r6, #1
   17078:	b	17008 <print_full_field_name@@Base+0x138>
   1707c:	cmp	r6, #0
   17080:	ble	17090 <print_full_field_name@@Base+0x1c0>
   17084:	mov	r1, r4
   17088:	mov	r0, sl
   1708c:	bl	12584 <fputc@plt>
   17090:	mov	r1, r4
   17094:	ldr	r0, [r8], #4
   17098:	bl	12620 <fputs@plt>
   1709c:	add	r6, r6, #1
   170a0:	b	16ef8 <print_full_field_name@@Base+0x28>
   170a4:	add	r1, sp, #4
   170a8:	ldr	r0, [r8], #4
   170ac:	bl	1265c <coda_type_get_class@plt>
   170b0:	cmp	r0, #0
   170b4:	beq	170bc <print_full_field_name@@Base+0x1ec>
   170b8:	bl	1889c <handle_coda_error@@Base>
   170bc:	ldr	r3, [sp, #4]
   170c0:	cmp	r3, #1
   170c4:	bne	17100 <print_full_field_name@@Base+0x230>
   170c8:	mla	r3, sl, r6, r5
   170cc:	ldr	r2, [r3, #804]	; 0x324
   170d0:	cmp	r2, #0
   170d4:	ble	17100 <print_full_field_name@@Base+0x230>
   170d8:	ldr	r3, [r3, #800]	; 0x320
   170dc:	mov	r1, r4
   170e0:	cmp	r3, #0
   170e4:	bne	17108 <print_full_field_name@@Base+0x238>
   170e8:	mov	r0, fp
   170ec:	bl	12620 <fputs@plt>
   170f0:	mov	r1, r6
   170f4:	mov	r0, r4
   170f8:	bl	16dec <print_json_data@@Base+0xdc>
   170fc:	add	r6, r6, #1
   17100:	add	r7, r7, #1
   17104:	b	16f20 <print_full_field_name@@Base+0x50>
   17108:	mov	r0, #44	; 0x2c
   1710c:	bl	12584 <fputc@plt>
   17110:	b	170f0 <print_full_field_name@@Base+0x220>
   17114:	mov	r0, #44	; 0x2c
   17118:	bl	12584 <fputc@plt>
   1711c:	b	16f60 <print_full_field_name@@Base+0x90>
   17120:	strdeq	fp, [r2], -r0
   17124:	andeq	ip, r2, r4, lsl r0
   17128:	strdeq	fp, [r2], -r8
   1712c:	andeq	r9, r1, pc, lsr #2
   17130:	andeq	r9, r1, fp, lsr #2
   17134:	ldr	r3, [pc, #512]	; 1733c <print_full_field_name@@Base+0x46c>
   17138:	push	{r0, r1, r2, r4, r5, lr}
   1713c:	ldr	r2, [r3]
   17140:	cmp	r2, #0
   17144:	bne	1732c <print_full_field_name@@Base+0x45c>
   17148:	ldr	r5, [pc, #496]	; 17340 <print_full_field_name@@Base+0x470>
   1714c:	mov	r1, #1
   17150:	ldr	r0, [r5]
   17154:	bl	16ed0 <print_full_field_name@@Base>
   17158:	ldr	r3, [pc, #484]	; 17344 <print_full_field_name@@Base+0x474>
   1715c:	ldr	r3, [r3]
   17160:	cmp	r3, #0
   17164:	beq	171cc <print_full_field_name@@Base+0x2fc>
   17168:	ldr	r4, [pc, #472]	; 17348 <print_full_field_name@@Base+0x478>
   1716c:	mov	r1, sp
   17170:	ldr	r3, [r4, #136]	; 0x88
   17174:	add	r3, r3, #2
   17178:	ldr	r0, [r4, r3, lsl #2]
   1717c:	bl	1265c <coda_type_get_class@plt>
   17180:	cmp	r0, #0
   17184:	beq	1718c <print_full_field_name@@Base+0x2bc>
   17188:	bl	1889c <handle_coda_error@@Base>
   1718c:	ldr	r3, [sp]
   17190:	add	r1, sp, #4
   17194:	cmp	r3, #6
   17198:	ldr	r3, [r4, #136]	; 0x88
   1719c:	add	r3, r3, #2
   171a0:	ldr	r0, [r4, r3, lsl #2]
   171a4:	bne	1729c <print_full_field_name@@Base+0x3cc>
   171a8:	bl	124c4 <coda_type_get_special_type@plt>
   171ac:	cmp	r0, #0
   171b0:	beq	171b8 <print_full_field_name@@Base+0x2e8>
   171b4:	bl	1889c <handle_coda_error@@Base>
   171b8:	ldr	r0, [sp, #4]
   171bc:	bl	121c4 <coda_type_get_special_type_name@plt>
   171c0:	mov	r1, r0
   171c4:	ldr	r0, [pc, #384]	; 1734c <print_full_field_name@@Base+0x47c>
   171c8:	bl	12218 <printf@plt>
   171cc:	ldr	r3, [pc, #380]	; 17350 <print_full_field_name@@Base+0x480>
   171d0:	ldr	r3, [r3]
   171d4:	cmp	r3, #0
   171d8:	beq	17220 <print_full_field_name@@Base+0x350>
   171dc:	ldr	r2, [pc, #356]	; 17348 <print_full_field_name@@Base+0x478>
   171e0:	add	r1, sp, #4
   171e4:	ldr	r3, [r2, #136]	; 0x88
   171e8:	add	r3, r3, #2
   171ec:	ldr	r0, [r2, r3, lsl #2]
   171f0:	bl	12338 <coda_type_get_unit@plt>
   171f4:	cmp	r0, #0
   171f8:	beq	17200 <print_full_field_name@@Base+0x330>
   171fc:	bl	1889c <handle_coda_error@@Base>
   17200:	ldr	r1, [sp, #4]
   17204:	cmp	r1, #0
   17208:	beq	17220 <print_full_field_name@@Base+0x350>
   1720c:	ldrb	r3, [r1]
   17210:	cmp	r3, #0
   17214:	beq	17220 <print_full_field_name@@Base+0x350>
   17218:	ldr	r0, [pc, #308]	; 17354 <print_full_field_name@@Base+0x484>
   1721c:	bl	12218 <printf@plt>
   17220:	ldr	r3, [pc, #304]	; 17358 <print_full_field_name@@Base+0x488>
   17224:	ldr	r3, [r3]
   17228:	cmp	r3, #0
   1722c:	beq	17274 <print_full_field_name@@Base+0x3a4>
   17230:	ldr	r2, [pc, #272]	; 17348 <print_full_field_name@@Base+0x478>
   17234:	add	r1, sp, #4
   17238:	ldr	r3, [r2, #136]	; 0x88
   1723c:	add	r3, r3, #2
   17240:	ldr	r0, [r2, r3, lsl #2]
   17244:	bl	12344 <coda_type_get_description@plt>
   17248:	cmp	r0, #0
   1724c:	beq	17254 <print_full_field_name@@Base+0x384>
   17250:	bl	1889c <handle_coda_error@@Base>
   17254:	ldr	r1, [sp, #4]
   17258:	cmp	r1, #0
   1725c:	beq	17274 <print_full_field_name@@Base+0x3a4>
   17260:	ldrb	r3, [r1]
   17264:	cmp	r3, #0
   17268:	beq	17274 <print_full_field_name@@Base+0x3a4>
   1726c:	ldr	r0, [pc, #232]	; 1735c <print_full_field_name@@Base+0x48c>
   17270:	bl	12218 <printf@plt>
   17274:	mov	r0, #10
   17278:	bl	124ac <putchar@plt>
   1727c:	ldr	r3, [pc, #220]	; 17360 <print_full_field_name@@Base+0x490>
   17280:	ldr	r3, [r3]
   17284:	cmp	r3, #0
   17288:	movne	r4, #0
   1728c:	ldrne	r5, [pc, #208]	; 17364 <print_full_field_name@@Base+0x494>
   17290:	bne	1731c <print_full_field_name@@Base+0x44c>
   17294:	add	sp, sp, #12
   17298:	pop	{r4, r5, pc}
   1729c:	bl	12410 <coda_type_get_read_type@plt>
   172a0:	cmp	r0, #0
   172a4:	beq	172ac <print_full_field_name@@Base+0x3dc>
   172a8:	bl	1889c <handle_coda_error@@Base>
   172ac:	ldr	r0, [sp, #4]
   172b0:	bl	1250c <coda_type_get_native_type_name@plt>
   172b4:	mov	r1, r0
   172b8:	ldr	r0, [pc, #140]	; 1734c <print_full_field_name@@Base+0x47c>
   172bc:	bl	12218 <printf@plt>
   172c0:	ldr	r3, [sp, #4]
   172c4:	sub	r3, r3, #11
   172c8:	cmp	r3, #1
   172cc:	bhi	171cc <print_full_field_name@@Base+0x2fc>
   172d0:	mov	r0, #40	; 0x28
   172d4:	bl	124ac <putchar@plt>
   172d8:	ldr	r1, [r4, #3360]	; 0xd20
   172dc:	cmp	r1, #0
   172e0:	bgt	172f8 <print_full_field_name@@Base+0x428>
   172e4:	ldr	r3, [pc, #124]	; 17368 <print_full_field_name@@Base+0x498>
   172e8:	mov	r2, #238	; 0xee
   172ec:	ldr	r1, [pc, #120]	; 1736c <print_full_field_name@@Base+0x49c>
   172f0:	ldr	r0, [pc, #120]	; 17370 <print_full_field_name@@Base+0x4a0>
   172f4:	bl	12650 <__assert_fail@plt>
   172f8:	ldr	r0, [r5]
   172fc:	sub	r1, r1, #1
   17300:	bl	16dec <print_json_data@@Base+0xdc>
   17304:	mov	r0, #41	; 0x29
   17308:	bl	124ac <putchar@plt>
   1730c:	b	171cc <print_full_field_name@@Base+0x2fc>
   17310:	mov	r0, r4
   17314:	bl	1555c <print_all_distinct_dims@@Base>
   17318:	add	r4, r4, #1
   1731c:	ldr	r3, [r5]
   17320:	cmp	r4, r3
   17324:	blt	17310 <print_full_field_name@@Base+0x440>
   17328:	b	17294 <print_full_field_name@@Base+0x3c4>
   1732c:	cmp	r2, #1
   17330:	bne	17294 <print_full_field_name@@Base+0x3c4>
   17334:	bl	14084 <export_data_element_to_ascii@@Base>
   17338:	b	17294 <print_full_field_name@@Base+0x3c4>
   1733c:	andeq	ip, r2, ip, lsr #1
   17340:			; <UNDEFINED> instruction: 0x0002b1bc
   17344:	andeq	ip, r2, r0, lsr #1
   17348:	strdeq	fp, [r2], -r0
   1734c:	andeq	r9, r1, r2, lsr r1
   17350:	andeq	fp, r2, r8, ror #3
   17354:	andeq	r9, r1, r1, lsr #3
   17358:	andeq	ip, r2, r4, lsr #1
   1735c:	andeq	r9, r1, r7, lsr #3
   17360:	ldrdeq	fp, [r2], -ip
   17364:	strheq	ip, [r2], -r8
   17368:	andeq	r9, r1, r1, lsl #2
   1736c:	andeq	r9, r1, r6, lsr r1
   17370:	andeq	r9, r1, r4, lsl #3
   17374:	push	{r4, r5, r6, r7, lr}
   17378:	sub	sp, sp, #20
   1737c:	ldr	r4, [pc, #744]	; 1766c <print_full_field_name@@Base+0x79c>
   17380:	add	r1, sp, #4
   17384:	ldr	r3, [r4, #136]	; 0x88
   17388:	add	r3, r3, #2
   1738c:	ldr	r0, [r4, r3, lsl #2]
   17390:	bl	1265c <coda_type_get_class@plt>
   17394:	cmp	r0, #0
   17398:	beq	173a0 <print_full_field_name@@Base+0x4d0>
   1739c:	bl	1889c <handle_coda_error@@Base>
   173a0:	ldr	r3, [sp, #4]
   173a4:	cmp	r3, #6
   173a8:	ldrls	pc, [pc, r3, lsl #2]
   173ac:	b	1753c <print_full_field_name@@Base+0x66c>
   173b0:	andeq	r7, r1, ip, asr #7
   173b4:	andeq	r7, r1, r4, asr #10
   173b8:			; <UNDEFINED> instruction: 0x000175b0
   173bc:			; <UNDEFINED> instruction: 0x000175b0
   173c0:			; <UNDEFINED> instruction: 0x000175b0
   173c4:			; <UNDEFINED> instruction: 0x000175b0
   173c8:	strdeq	r7, [r1], -r8
   173cc:	ldr	r3, [r4, #136]	; 0x88
   173d0:	cmp	r3, #30
   173d4:	bgt	1753c <print_full_field_name@@Base+0x66c>
   173d8:	ldr	r2, [r4, #3748]	; 0xea4
   173dc:	add	r3, r3, #2
   173e0:	add	r2, r2, #1
   173e4:	add	r1, sp, #8
   173e8:	ldr	r0, [r4, r3, lsl #2]
   173ec:	str	r2, [r4, #3748]	; 0xea4
   173f0:	bl	123f8 <coda_type_get_num_record_fields@plt>
   173f4:	cmp	r0, #0
   173f8:	beq	17400 <print_full_field_name@@Base+0x530>
   173fc:	bl	1889c <handle_coda_error@@Base>
   17400:	ldr	r3, [r4, #136]	; 0x88
   17404:	add	r3, r3, #1
   17408:	str	r3, [r4, #136]	; 0x88
   1740c:	ldr	r3, [r4, #796]	; 0x31c
   17410:	add	r3, r3, #166	; 0xa6
   17414:	ldr	r5, [r4, r3, lsl #2]
   17418:	cmp	r5, #0
   1741c:	movne	r7, #1
   17420:	bne	1750c <print_full_field_name@@Base+0x63c>
   17424:	str	r5, [sp, #12]
   17428:	ldr	r0, [sp, #12]
   1742c:	ldr	r3, [sp, #8]
   17430:	cmp	r0, r3
   17434:	bge	17524 <print_full_field_name@@Base+0x654>
   17438:	mov	r1, r5
   1743c:	bl	17688 <print_full_field_name@@Base+0x7b8>
   17440:	ldr	r3, [sp, #12]
   17444:	add	r3, r3, #1
   17448:	str	r3, [sp, #12]
   1744c:	b	17428 <print_full_field_name@@Base+0x558>
   17450:	bl	163f4 <codadump_filter_get_fieldname@@Base>
   17454:	subs	r6, r0, #0
   17458:	bne	17470 <print_full_field_name@@Base+0x5a0>
   1745c:	ldr	r3, [pc, #524]	; 17670 <print_full_field_name@@Base+0x7a0>
   17460:	ldr	r2, [pc, #524]	; 17674 <print_full_field_name@@Base+0x7a4>
   17464:	ldr	r1, [pc, #524]	; 17678 <print_full_field_name@@Base+0x7a8>
   17468:	ldr	r0, [pc, #524]	; 1767c <print_full_field_name@@Base+0x7ac>
   1746c:	bl	12650 <__assert_fail@plt>
   17470:	ldr	r3, [r4, #136]	; 0x88
   17474:	add	r2, sp, #12
   17478:	add	r3, r3, #1
   1747c:	mov	r1, r6
   17480:	ldr	r0, [r4, r3, lsl #2]
   17484:	bl	12560 <coda_type_get_record_field_index_from_name@plt>
   17488:	cmp	r0, #0
   1748c:	beq	174c0 <print_full_field_name@@Base+0x5f0>
   17490:	bl	125fc <coda_get_errno@plt>
   17494:	ldr	r3, [r0]
   17498:	cmn	r3, #102	; 0x66
   1749c:	bne	174bc <print_full_field_name@@Base+0x5ec>
   174a0:	ldr	r3, [pc, #472]	; 17680 <print_full_field_name@@Base+0x7b0>
   174a4:	mov	r2, r6
   174a8:	ldr	r1, [pc, #468]	; 17684 <print_full_field_name@@Base+0x7b4>
   174ac:	ldr	r0, [r3]
   174b0:	bl	1244c <fprintf@plt>
   174b4:	mov	r0, #1
   174b8:	bl	12404 <exit@plt>
   174bc:	bl	1889c <handle_coda_error@@Base>
   174c0:	ldr	r6, [r4, #796]	; 0x31c
   174c4:	add	r3, r6, #166	; 0xa6
   174c8:	add	r6, r6, #167	; 0xa7
   174cc:	ldr	r0, [r4, r3, lsl #2]
   174d0:	bl	16428 <codadump_filter_get_subfilter@@Base>
   174d4:	ldr	r3, [r4, #796]	; 0x31c
   174d8:	mov	r1, r7
   174dc:	add	r3, r3, #1
   174e0:	str	r3, [r4, #796]	; 0x31c
   174e4:	str	r0, [r4, r6, lsl #2]
   174e8:	ldr	r0, [sp, #12]
   174ec:	bl	17688 <print_full_field_name@@Base+0x7b8>
   174f0:	ldr	r6, [r4, #796]	; 0x31c
   174f4:	sub	r3, r6, #1
   174f8:	add	r6, r6, #165	; 0xa5
   174fc:	str	r3, [r4, #796]	; 0x31c
   17500:	ldr	r0, [r4, r6, lsl #2]
   17504:	bl	1645c <codadump_filter_get_next_filter@@Base>
   17508:	str	r0, [r4, r6, lsl #2]
   1750c:	ldr	r3, [r4, #796]	; 0x31c
   17510:	add	r3, r3, #166	; 0xa6
   17514:	ldr	r0, [r4, r3, lsl #2]
   17518:	cmp	r0, #0
   1751c:	bne	17450 <print_full_field_name@@Base+0x580>
   17520:	str	r5, [r4, r3, lsl #2]
   17524:	ldr	r3, [r4, #136]	; 0x88
   17528:	sub	r3, r3, #1
   1752c:	str	r3, [r4, #136]	; 0x88
   17530:	ldr	r3, [r4, #3748]	; 0xea4
   17534:	sub	r3, r3, #1
   17538:	str	r3, [r4, #3748]	; 0xea4
   1753c:	add	sp, sp, #20
   17540:	pop	{r4, r5, r6, r7, pc}
   17544:	ldr	r3, [r4, #136]	; 0x88
   17548:	cmp	r3, #30
   1754c:	bgt	1753c <print_full_field_name@@Base+0x66c>
   17550:	bl	1572c <dim_enter_array@@Base>
   17554:	ldr	r3, [r4, #3360]	; 0xd20
   17558:	add	r3, r3, #1
   1755c:	str	r3, [r4, #3360]	; 0xd20
   17560:	ldr	r3, [r4, #136]	; 0x88
   17564:	add	r2, r3, #1
   17568:	add	r1, r3, #3
   1756c:	add	r3, r3, #2
   17570:	add	r1, r4, r1, lsl #2
   17574:	ldr	r0, [r4, r3, lsl #2]
   17578:	str	r2, [r4, #136]	; 0x88
   1757c:	bl	124e8 <coda_type_get_array_base_type@plt>
   17580:	cmp	r0, #0
   17584:	beq	1758c <print_full_field_name@@Base+0x6bc>
   17588:	bl	1889c <handle_coda_error@@Base>
   1758c:	bl	17374 <print_full_field_name@@Base+0x4a4>
   17590:	ldr	r3, [r4, #136]	; 0x88
   17594:	sub	r3, r3, #1
   17598:	str	r3, [r4, #136]	; 0x88
   1759c:	ldr	r3, [r4, #3360]	; 0xd20
   175a0:	sub	r3, r3, #1
   175a4:	str	r3, [r4, #3360]	; 0xd20
   175a8:	bl	15ec8 <dim_leave_array@@Base>
   175ac:	b	1753c <print_full_field_name@@Base+0x66c>
   175b0:	ldr	r3, [r4, #136]	; 0x88
   175b4:	add	r1, sp, #12
   175b8:	add	r3, r3, #2
   175bc:	ldr	r0, [r4, r3, lsl #2]
   175c0:	bl	12410 <coda_type_get_read_type@plt>
   175c4:	cmp	r0, #0
   175c8:	beq	175d0 <print_full_field_name@@Base+0x700>
   175cc:	bl	1889c <handle_coda_error@@Base>
   175d0:	ldr	r3, [sp, #12]
   175d4:	sub	r3, r3, #11
   175d8:	cmp	r3, #1
   175dc:	bhi	17664 <print_full_field_name@@Base+0x794>
   175e0:	bl	1572c <dim_enter_array@@Base>
   175e4:	ldr	r3, [r4, #3360]	; 0xd20
   175e8:	add	r3, r3, #1
   175ec:	str	r3, [r4, #3360]	; 0xd20
   175f0:	bl	17134 <print_full_field_name@@Base+0x264>
   175f4:	b	1759c <print_full_field_name@@Base+0x6cc>
   175f8:	bl	121e8 <coda_get_option_bypass_special_types@plt>
   175fc:	ldr	r3, [r4, #136]	; 0x88
   17600:	add	r3, r3, #2
   17604:	cmp	r0, #0
   17608:	beq	1762c <print_full_field_name@@Base+0x75c>
   1760c:	add	r1, r4, r3, lsl #2
   17610:	ldr	r0, [r4, r3, lsl #2]
   17614:	bl	12608 <coda_type_get_special_base_type@plt>
   17618:	cmp	r0, #0
   1761c:	beq	17624 <print_full_field_name@@Base+0x754>
   17620:	bl	1889c <handle_coda_error@@Base>
   17624:	bl	17374 <print_full_field_name@@Base+0x4a4>
   17628:	b	1753c <print_full_field_name@@Base+0x66c>
   1762c:	add	r1, sp, #12
   17630:	ldr	r0, [r4, r3, lsl #2]
   17634:	bl	124c4 <coda_type_get_special_type@plt>
   17638:	cmp	r0, #0
   1763c:	beq	17644 <print_full_field_name@@Base+0x774>
   17640:	bl	1889c <handle_coda_error@@Base>
   17644:	ldr	r3, [sp, #12]
   17648:	cmp	r3, #3
   1764c:	ldrls	pc, [pc, r3, lsl #2]
   17650:	b	1753c <print_full_field_name@@Base+0x66c>
   17654:	andeq	r7, r1, ip, lsr r5
   17658:	andeq	r7, r1, r4, ror #12
   1765c:	andeq	r7, r1, r4, ror #12
   17660:	andeq	r7, r1, r0, ror #11
   17664:	bl	17134 <print_full_field_name@@Base+0x264>
   17668:	b	1753c <print_full_field_name@@Base+0x66c>
   1766c:	strdeq	fp, [r2], -r0
   17670:	andeq	r9, r1, r5, lsl r1
   17674:	andeq	r0, r0, r9, lsl #3
   17678:	andeq	r9, r1, r6, lsr r1
   1767c:	andeq	r9, r1, sp, lsr #3
   17680:			; <UNDEFINED> instruction: 0x0002b1b8
   17684:			; <UNDEFINED> instruction: 0x000191ba
   17688:	push	{r0, r1, r4, r5, r6, lr}
   1768c:	mov	r5, r0
   17690:	ldr	r4, [pc, #268]	; 177a4 <print_full_field_name@@Base+0x8d4>
   17694:	mov	r6, r1
   17698:	mov	r2, sp
   1769c:	ldr	r3, [r4, #3748]	; 0xea4
   176a0:	mov	r1, r0
   176a4:	add	r3, r4, r3, lsl #2
   176a8:	str	r0, [r3, #3488]	; 0xda0
   176ac:	ldr	r3, [r4, #136]	; 0x88
   176b0:	add	r3, r3, #1
   176b4:	ldr	r0, [r4, r3, lsl #2]
   176b8:	bl	1220c <coda_type_get_record_field_hidden_status@plt>
   176bc:	cmp	r0, #0
   176c0:	beq	176c8 <print_full_field_name@@Base+0x7f8>
   176c4:	bl	1889c <handle_coda_error@@Base>
   176c8:	ldr	r3, [sp]
   176cc:	adds	r3, r3, #0
   176d0:	movne	r3, #1
   176d4:	cmp	r6, #0
   176d8:	movne	r3, #0
   176dc:	cmp	r3, #0
   176e0:	bne	1779c <print_full_field_name@@Base+0x8cc>
   176e4:	ldr	r3, [pc, #188]	; 177a8 <print_full_field_name@@Base+0x8d8>
   176e8:	ldr	r3, [r3]
   176ec:	cmp	r3, #0
   176f0:	beq	17734 <print_full_field_name@@Base+0x864>
   176f4:	ldr	r3, [r4, #136]	; 0x88
   176f8:	add	r2, sp, #4
   176fc:	add	r3, r3, #1
   17700:	mov	r1, r5
   17704:	ldr	r0, [r4, r3, lsl #2]
   17708:	bl	122fc <coda_type_get_record_field_available_status@plt>
   1770c:	cmp	r0, #0
   17710:	beq	17718 <print_full_field_name@@Base+0x848>
   17714:	bl	1889c <handle_coda_error@@Base>
   17718:	ldr	r3, [sp, #4]
   1771c:	cmn	r3, #1
   17720:	beq	17790 <print_full_field_name@@Base+0x8c0>
   17724:	ldr	r3, [r4, #136]	; 0x88
   17728:	ldr	r2, [sp, #4]
   1772c:	add	r3, r4, r3, lsl #2
   17730:	str	r2, [r3, #3360]	; 0xd20
   17734:	ldr	r2, [r4, #3748]	; 0xea4
   17738:	ldr	r3, [r4, #136]	; 0x88
   1773c:	add	r2, r2, #904	; 0x388
   17740:	add	r3, r3, #1
   17744:	add	r2, r4, r2, lsl #2
   17748:	mov	r1, r5
   1774c:	ldr	r0, [r4, r3, lsl #2]
   17750:	bl	12614 <coda_type_get_record_field_name@plt>
   17754:	cmp	r0, #0
   17758:	beq	17760 <print_full_field_name@@Base+0x890>
   1775c:	bl	1889c <handle_coda_error@@Base>
   17760:	ldr	r3, [r4, #136]	; 0x88
   17764:	mov	r1, r5
   17768:	add	r2, r3, #2
   1776c:	add	r3, r3, #1
   17770:	add	r2, r4, r2, lsl #2
   17774:	ldr	r0, [r4, r3, lsl #2]
   17778:	bl	122c0 <coda_type_get_record_field_type@plt>
   1777c:	cmp	r0, #0
   17780:	beq	17788 <print_full_field_name@@Base+0x8b8>
   17784:	bl	1889c <handle_coda_error@@Base>
   17788:	bl	17374 <print_full_field_name@@Base+0x4a4>
   1778c:	b	1779c <print_full_field_name@@Base+0x8cc>
   17790:	bl	16018 <dim_record_field_available@@Base>
   17794:	cmp	r0, #0
   17798:	bne	17724 <print_full_field_name@@Base+0x854>
   1779c:	add	sp, sp, #8
   177a0:	pop	{r4, r5, r6, pc}
   177a4:	strdeq	fp, [r2], -r0
   177a8:	andeq	fp, r2, ip, ror #3

000177ac <traverse_info_init@@Base>:
   177ac:	ldr	r3, [pc, #20]	; 177c8 <traverse_info_init@@Base+0x1c>
   177b0:	mov	r2, #0
   177b4:	str	r2, [r3, #4]
   177b8:	str	r2, [r3, #136]	; 0x88
   177bc:	str	r2, [r3, #3360]	; 0xd20
   177c0:	str	r2, [r3, #3748]	; 0xea4
   177c4:	bx	lr
   177c8:	strdeq	fp, [r2], -r0

000177cc <traverse_info_done@@Base>:
   177cc:	ldr	r3, [pc, #44]	; 17800 <traverse_info_done@@Base+0x34>
   177d0:	push	{r4, lr}
   177d4:	mov	r4, r3
   177d8:	ldr	r0, [r3, #4]
   177dc:	cmp	r0, #0
   177e0:	beq	177e8 <traverse_info_done@@Base+0x1c>
   177e4:	bl	12530 <coda_close@plt>
   177e8:	ldr	r3, [r4, #664]	; 0x298
   177ec:	cmp	r3, #0
   177f0:	popeq	{r4, pc}
   177f4:	ldr	r0, [pc, #8]	; 17804 <traverse_info_done@@Base+0x38>
   177f8:	pop	{r4, lr}
   177fc:	b	16028 <codadump_filter_remove@@Base>
   17800:	strdeq	fp, [r2], -r0
   17804:	andeq	fp, r2, r8, lsl #9

00017808 <traverse_product@@Base>:
   17808:	push	{r4, r5, r6, lr}
   1780c:	ldr	r4, [pc, #160]	; 178b4 <traverse_product@@Base+0xac>
   17810:	add	r1, r4, #4
   17814:	ldr	r0, [r4]
   17818:	bl	12248 <coda_open@plt>
   1781c:	cmp	r0, #0
   17820:	beq	17838 <traverse_product@@Base+0x30>
   17824:	bl	125fc <coda_get_errno@plt>
   17828:	ldr	r3, [r0]
   1782c:	cmn	r3, #21
   17830:	beq	17888 <traverse_product@@Base+0x80>
   17834:	bl	1889c <handle_coda_error@@Base>
   17838:	ldr	r1, [r4, #4]
   1783c:	ldr	r0, [pc, #116]	; 178b8 <traverse_product@@Base+0xb0>
   17840:	bl	12368 <coda_cursor_set_product@plt>
   17844:	cmp	r0, #0
   17848:	beq	17850 <traverse_product@@Base+0x48>
   1784c:	bl	1889c <handle_coda_error@@Base>
   17850:	ldr	r1, [r4, #136]	; 0x88
   17854:	ldr	r0, [pc, #92]	; 178b8 <traverse_product@@Base+0xb0>
   17858:	add	r1, r1, #2
   1785c:	add	r1, r4, r1, lsl #2
   17860:	bl	122cc <coda_cursor_get_type@plt>
   17864:	cmp	r0, #0
   17868:	beq	17870 <traverse_product@@Base+0x68>
   1786c:	bl	1889c <handle_coda_error@@Base>
   17870:	bl	17374 <print_full_field_name@@Base+0x4a4>
   17874:	ldr	r0, [r4, #4]
   17878:	bl	12530 <coda_close@plt>
   1787c:	mov	r3, #0
   17880:	str	r3, [r4, #4]
   17884:	pop	{r4, r5, r6, pc}
   17888:	mov	r0, #0
   1788c:	bl	12290 <coda_set_option_use_mmap@plt>
   17890:	add	r1, r4, #4
   17894:	ldr	r0, [r4]
   17898:	bl	12248 <coda_open@plt>
   1789c:	mov	r5, r0
   178a0:	mov	r0, #1
   178a4:	bl	12290 <coda_set_option_use_mmap@plt>
   178a8:	cmp	r5, #0
   178ac:	bne	17834 <traverse_product@@Base+0x2c>
   178b0:	b	17838 <traverse_product@@Base+0x30>
   178b4:	strdeq	fp, [r2], -r0
   178b8:	andeq	fp, r2, r0, lsl #5
   178bc:	push	{r0, r1, r2, r3}
   178c0:	ldr	r3, [pc, #36]	; 178ec <traverse_product@@Base+0xe4>
   178c4:	push	{r0, r1, r2, lr}
   178c8:	add	r2, sp, #20
   178cc:	ldr	r1, [sp, #16]
   178d0:	ldr	r0, [r3]
   178d4:	str	r2, [sp, #4]
   178d8:	bl	12548 <vfprintf@plt>
   178dc:	add	sp, sp, #12
   178e0:	pop	{lr}		; (ldr lr, [sp], #4)
   178e4:	add	sp, sp, #16
   178e8:	bx	lr
   178ec:	muleq	r2, r8, r0
   178f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   178f4:	mov	r5, r0
   178f8:	ldr	r7, [pc, #176]	; 179b0 <traverse_product@@Base+0x1a8>
   178fc:	ldr	r8, [pc, #176]	; 179b4 <traverse_product@@Base+0x1ac>
   17900:	ldr	r9, [pc, #176]	; 179b8 <traverse_product@@Base+0x1b0>
   17904:	mov	r6, r1
   17908:	mov	r4, r0
   1790c:	sub	r3, r4, r5
   17910:	cmp	r6, r3
   17914:	bgt	1791c <traverse_product@@Base+0x114>
   17918:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1791c:	ldrb	r1, [r4], #1
   17920:	cmp	r1, #12
   17924:	beq	17970 <traverse_product@@Base+0x168>
   17928:	bhi	17950 <traverse_product@@Base+0x148>
   1792c:	cmp	r1, #9
   17930:	beq	17980 <traverse_product@@Base+0x178>
   17934:	cmp	r1, #10
   17938:	beq	17978 <traverse_product@@Base+0x170>
   1793c:	cmp	r1, #8
   17940:	bne	17998 <traverse_product@@Base+0x190>
   17944:	ldr	r0, [pc, #112]	; 179bc <traverse_product@@Base+0x1b4>
   17948:	bl	178bc <traverse_product@@Base+0xb4>
   1794c:	b	1790c <traverse_product@@Base+0x104>
   17950:	cmp	r1, #34	; 0x22
   17954:	beq	17988 <traverse_product@@Base+0x180>
   17958:	cmp	r1, #92	; 0x5c
   1795c:	beq	17990 <traverse_product@@Base+0x188>
   17960:	cmp	r1, #13
   17964:	bne	17998 <traverse_product@@Base+0x190>
   17968:	ldr	r0, [pc, #80]	; 179c0 <traverse_product@@Base+0x1b8>
   1796c:	b	17948 <traverse_product@@Base+0x140>
   17970:	mov	r0, r7
   17974:	b	17948 <traverse_product@@Base+0x140>
   17978:	ldr	r0, [pc, #68]	; 179c4 <traverse_product@@Base+0x1bc>
   1797c:	b	17948 <traverse_product@@Base+0x140>
   17980:	ldr	r0, [pc, #64]	; 179c8 <traverse_product@@Base+0x1c0>
   17984:	b	17948 <traverse_product@@Base+0x140>
   17988:	ldr	r0, [pc, #60]	; 179cc <traverse_product@@Base+0x1c4>
   1798c:	b	17948 <traverse_product@@Base+0x140>
   17990:	ldr	r0, [pc, #56]	; 179d0 <traverse_product@@Base+0x1c8>
   17994:	b	17948 <traverse_product@@Base+0x140>
   17998:	sub	r3, r1, #32
   1799c:	cmp	r3, #94	; 0x5e
   179a0:	movls	r0, r9
   179a4:	movhi	r0, r8
   179a8:	bl	178bc <traverse_product@@Base+0xb4>
   179ac:	b	1790c <traverse_product@@Base+0x104>
   179b0:	andeq	r8, r1, r3, lsl #24
   179b4:	andeq	r9, r1, ip, asr #32
   179b8:	andeq	r8, r1, r0, ror ip
   179bc:	strdeq	r8, [r1], -r7
   179c0:	andeq	r8, r1, r6, lsl #24
   179c4:	strdeq	r8, [r1], -sp
   179c8:	strdeq	r8, [r1], -sl
   179cc:	andeq	r9, r1, r9, asr #32
   179d0:	andeq	r8, r1, r9, lsl #24
   179d4:	ldr	r3, [pc, #72]	; 17a24 <traverse_product@@Base+0x21c>
   179d8:	push	{r4, r5, r6, lr}
   179dc:	ldr	r4, [r3]
   179e0:	cmp	r4, #0
   179e4:	blt	179fc <traverse_product@@Base+0x1f4>
   179e8:	ldr	r5, [pc, #56]	; 17a28 <traverse_product@@Base+0x220>
   179ec:	ldr	r6, [pc, #56]	; 17a2c <traverse_product@@Base+0x224>
   179f0:	cmp	r4, #0
   179f4:	bne	17a10 <traverse_product@@Base+0x208>
   179f8:	pop	{r4, r5, r6, pc}
   179fc:	ldr	r3, [pc, #44]	; 17a30 <traverse_product@@Base+0x228>
   17a00:	mov	r2, #44	; 0x2c
   17a04:	ldr	r1, [pc, #40]	; 17a34 <traverse_product@@Base+0x22c>
   17a08:	ldr	r0, [pc, #40]	; 17a38 <traverse_product@@Base+0x230>
   17a0c:	bl	12650 <__assert_fail@plt>
   17a10:	ldr	r1, [r5]
   17a14:	mov	r0, r6
   17a18:	bl	12620 <fputs@plt>
   17a1c:	sub	r4, r4, #1
   17a20:	b	179f0 <traverse_product@@Base+0x1e8>
   17a24:	andeq	fp, r2, ip, asr #3
   17a28:	muleq	r2, r8, r0
   17a2c:	andeq	r8, r1, r9, lsr ip
   17a30:	andeq	r9, r1, lr, ror #3
   17a34:	strdeq	r9, [r1], -r5
   17a38:			; <UNDEFINED> instruction: 0x00018cbe
   17a3c:	push	{r0, r1, r2, r3}
   17a40:	push	{r0, r1, r2, lr}
   17a44:	bl	179d4 <traverse_product@@Base+0x1cc>
   17a48:	ldr	r3, [pc, #32]	; 17a70 <traverse_product@@Base+0x268>
   17a4c:	add	r2, sp, #20
   17a50:	ldr	r1, [sp, #16]
   17a54:	ldr	r0, [r3]
   17a58:	str	r2, [sp, #4]
   17a5c:	bl	12548 <vfprintf@plt>
   17a60:	add	sp, sp, #12
   17a64:	pop	{lr}		; (ldr lr, [sp], #4)
   17a68:	add	sp, sp, #16
   17a6c:	bx	lr
   17a70:	muleq	r2, r8, r0
   17a74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a78:	sub	sp, sp, #72	; 0x48
   17a7c:	ldr	r5, [pc, #1956]	; 18228 <traverse_product@@Base+0xa20>
   17a80:	mov	r3, #0
   17a84:	str	r3, [sp, #12]
   17a88:	ldr	r3, [r5, #4]
   17a8c:	mov	r4, r0
   17a90:	cmp	r3, #0
   17a94:	mov	r7, r1
   17a98:	beq	17b2c <traverse_product@@Base+0x324>
   17a9c:	add	r1, sp, #12
   17aa0:	bl	12308 <coda_cursor_has_attributes@plt>
   17aa4:	cmp	r0, #0
   17aa8:	beq	17ab0 <traverse_product@@Base+0x2a8>
   17aac:	bl	1889c <handle_coda_error@@Base>
   17ab0:	ldr	r3, [sp, #12]
   17ab4:	cmp	r3, #0
   17ab8:	beq	17b2c <traverse_product@@Base+0x324>
   17abc:	cmp	r7, #0
   17ac0:	beq	17ad0 <traverse_product@@Base+0x2c8>
   17ac4:	ldr	r0, [pc, #1888]	; 1822c <traverse_product@@Base+0xa24>
   17ac8:	bl	178bc <traverse_product@@Base+0xb4>
   17acc:	bl	179d4 <traverse_product@@Base+0x1cc>
   17ad0:	ldr	r0, [pc, #1880]	; 18230 <traverse_product@@Base+0xa28>
   17ad4:	bl	178bc <traverse_product@@Base+0xb4>
   17ad8:	mov	r0, r4
   17adc:	bl	12488 <coda_cursor_goto_attributes@plt>
   17ae0:	cmp	r0, #0
   17ae4:	beq	17aec <traverse_product@@Base+0x2e4>
   17ae8:	bl	1889c <handle_coda_error@@Base>
   17aec:	ldr	r3, [r5]
   17af0:	mov	r1, #1
   17af4:	add	r3, r3, #1
   17af8:	mov	r0, r4
   17afc:	str	r3, [r5]
   17b00:	bl	17a74 <traverse_product@@Base+0x26c>
   17b04:	ldr	r3, [r5]
   17b08:	mov	r0, r4
   17b0c:	sub	r3, r3, #1
   17b10:	str	r3, [r5]
   17b14:	bl	123ec <coda_cursor_goto_parent@plt>
   17b18:	ldr	r0, [pc, #1812]	; 18234 <traverse_product@@Base+0xa2c>
   17b1c:	bl	17a3c <traverse_product@@Base+0x234>
   17b20:	ldr	r3, [r5]
   17b24:	add	r3, r3, #1
   17b28:	str	r3, [r5]
   17b2c:	add	r1, sp, #8
   17b30:	mov	r0, r4
   17b34:	bl	12314 <coda_cursor_get_type_class@plt>
   17b38:	cmp	r0, #0
   17b3c:	beq	17b44 <traverse_product@@Base+0x33c>
   17b40:	bl	1889c <handle_coda_error@@Base>
   17b44:	ldr	r3, [sp, #8]
   17b48:	cmp	r3, #6
   17b4c:	ldrls	pc, [pc, r3, lsl #2]
   17b50:	b	17c70 <traverse_product@@Base+0x468>
   17b54:	andeq	r7, r1, r0, ror fp
   17b58:	muleq	r1, r0, sp
   17b5c:	andeq	r7, r1, ip, ror #28
   17b60:	andeq	r7, r1, ip, ror #28
   17b64:	andeq	r7, r1, ip, ror #28
   17b68:	andeq	r7, r1, ip, ror #28
   17b6c:	andeq	r8, r1, r4, lsr r1
   17b70:	add	r1, sp, #16
   17b74:	mov	r0, r4
   17b78:	bl	1226c <coda_cursor_get_num_elements@plt>
   17b7c:	cmp	r0, #0
   17b80:	beq	17b88 <traverse_product@@Base+0x380>
   17b84:	bl	1889c <handle_coda_error@@Base>
   17b88:	ldr	r3, [sp, #16]
   17b8c:	cmp	r3, #0
   17b90:	ble	17d84 <traverse_product@@Base+0x57c>
   17b94:	cmp	r7, #0
   17b98:	beq	17ba4 <traverse_product@@Base+0x39c>
   17b9c:	ldr	r0, [pc, #1672]	; 1822c <traverse_product@@Base+0xa24>
   17ba0:	bl	178bc <traverse_product@@Base+0xb4>
   17ba4:	add	r1, sp, #20
   17ba8:	mov	r0, r4
   17bac:	bl	122cc <coda_cursor_get_type@plt>
   17bb0:	cmp	r0, #0
   17bb4:	beq	17bbc <traverse_product@@Base+0x3b4>
   17bb8:	bl	1889c <handle_coda_error@@Base>
   17bbc:	add	r1, sp, #24
   17bc0:	ldr	r0, [sp, #20]
   17bc4:	bl	124d0 <coda_type_get_record_union_status@plt>
   17bc8:	cmp	r0, #0
   17bcc:	beq	17bd4 <traverse_product@@Base+0x3cc>
   17bd0:	bl	1889c <handle_coda_error@@Base>
   17bd4:	ldr	r3, [sp, #24]
   17bd8:	cmp	r3, #0
   17bdc:	beq	17c8c <traverse_product@@Base+0x484>
   17be0:	add	r1, sp, #28
   17be4:	mov	r0, r4
   17be8:	bl	125cc <coda_cursor_get_available_union_field_index@plt>
   17bec:	cmp	r0, #0
   17bf0:	beq	17bf8 <traverse_product@@Base+0x3f0>
   17bf4:	bl	1889c <handle_coda_error@@Base>
   17bf8:	add	r2, sp, #40	; 0x28
   17bfc:	ldr	r1, [sp, #28]
   17c00:	ldr	r0, [sp, #20]
   17c04:	bl	12614 <coda_type_get_record_field_name@plt>
   17c08:	cmp	r0, #0
   17c0c:	beq	17c14 <traverse_product@@Base+0x40c>
   17c10:	bl	1889c <handle_coda_error@@Base>
   17c14:	ldr	r1, [sp, #28]
   17c18:	mov	r0, r4
   17c1c:	bl	1238c <coda_cursor_goto_record_field_by_index@plt>
   17c20:	cmp	r0, #0
   17c24:	beq	17c2c <traverse_product@@Base+0x424>
   17c28:	bl	1889c <handle_coda_error@@Base>
   17c2c:	cmp	r7, #0
   17c30:	beq	17c38 <traverse_product@@Base+0x430>
   17c34:	bl	179d4 <traverse_product@@Base+0x1cc>
   17c38:	ldr	r1, [sp, #40]	; 0x28
   17c3c:	ldr	r0, [pc, #1524]	; 18238 <traverse_product@@Base+0xa30>
   17c40:	bl	178bc <traverse_product@@Base+0xb4>
   17c44:	ldr	r3, [r5]
   17c48:	mov	r1, #1
   17c4c:	add	r3, r3, #1
   17c50:	mov	r0, r4
   17c54:	str	r3, [r5]
   17c58:	bl	17a74 <traverse_product@@Base+0x26c>
   17c5c:	ldr	r3, [r5]
   17c60:	sub	r3, r3, #1
   17c64:	str	r3, [r5]
   17c68:	mov	r0, r4
   17c6c:	bl	123ec <coda_cursor_goto_parent@plt>
   17c70:	ldr	r3, [sp, #12]
   17c74:	cmp	r3, #0
   17c78:	ldrne	r3, [r5]
   17c7c:	subne	r3, r3, #1
   17c80:	strne	r3, [r5]
   17c84:	add	sp, sp, #72	; 0x48
   17c88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c8c:	mov	r0, r4
   17c90:	bl	12380 <coda_cursor_goto_first_record_field@plt>
   17c94:	cmp	r0, #0
   17c98:	beq	17ca0 <traverse_product@@Base+0x498>
   17c9c:	bl	1889c <handle_coda_error@@Base>
   17ca0:	ldr	r8, [pc, #1424]	; 18238 <traverse_product@@Base+0xa30>
   17ca4:	mov	r6, #1
   17ca8:	mov	r3, #0
   17cac:	str	r3, [sp, #28]
   17cb0:	ldr	r1, [sp, #28]
   17cb4:	ldr	r3, [sp, #16]
   17cb8:	cmp	r1, r3
   17cbc:	bge	17c68 <traverse_product@@Base+0x460>
   17cc0:	add	r2, sp, #40	; 0x28
   17cc4:	ldr	r0, [sp, #20]
   17cc8:	bl	1220c <coda_type_get_record_field_hidden_status@plt>
   17ccc:	cmp	r0, #0
   17cd0:	beq	17cd8 <traverse_product@@Base+0x4d0>
   17cd4:	bl	1889c <handle_coda_error@@Base>
   17cd8:	ldr	r9, [sp, #40]	; 0x28
   17cdc:	cmp	r9, #0
   17ce0:	bne	17d4c <traverse_product@@Base+0x544>
   17ce4:	add	r2, sp, #32
   17ce8:	ldr	r1, [sp, #28]
   17cec:	ldr	r0, [sp, #20]
   17cf0:	bl	12614 <coda_type_get_record_field_name@plt>
   17cf4:	cmp	r0, #0
   17cf8:	beq	17d00 <traverse_product@@Base+0x4f8>
   17cfc:	bl	1889c <handle_coda_error@@Base>
   17d00:	eor	r6, r6, #1
   17d04:	cmp	r7, #0
   17d08:	orrne	r6, r6, #1
   17d0c:	tst	r6, #1
   17d10:	beq	17d18 <traverse_product@@Base+0x510>
   17d14:	bl	179d4 <traverse_product@@Base+0x1cc>
   17d18:	ldr	r1, [sp, #32]
   17d1c:	mov	r0, r8
   17d20:	bl	178bc <traverse_product@@Base+0xb4>
   17d24:	ldr	r3, [r5]
   17d28:	mov	r1, #1
   17d2c:	add	r3, r3, #1
   17d30:	mov	r0, r4
   17d34:	str	r3, [r5]
   17d38:	bl	17a74 <traverse_product@@Base+0x26c>
   17d3c:	ldr	r3, [r5]
   17d40:	mov	r6, r9
   17d44:	sub	r3, r3, #1
   17d48:	str	r3, [r5]
   17d4c:	ldr	r3, [sp, #16]
   17d50:	ldr	r2, [sp, #28]
   17d54:	sub	r3, r3, #1
   17d58:	cmp	r3, r2
   17d5c:	ble	17d74 <traverse_product@@Base+0x56c>
   17d60:	mov	r0, r4
   17d64:	bl	12578 <coda_cursor_goto_next_record_field@plt>
   17d68:	cmp	r0, #0
   17d6c:	beq	17d74 <traverse_product@@Base+0x56c>
   17d70:	bl	1889c <handle_coda_error@@Base>
   17d74:	ldr	r3, [sp, #28]
   17d78:	add	r3, r3, #1
   17d7c:	str	r3, [sp, #28]
   17d80:	b	17cb0 <traverse_product@@Base+0x4a8>
   17d84:	ldr	r0, [pc, #1200]	; 1823c <traverse_product@@Base+0xa34>
   17d88:	bl	178bc <traverse_product@@Base+0xb4>
   17d8c:	b	17c70 <traverse_product@@Base+0x468>
   17d90:	add	r6, sp, #40	; 0x28
   17d94:	mov	r2, r6
   17d98:	add	r1, sp, #32
   17d9c:	mov	r0, r4
   17da0:	bl	12518 <coda_cursor_get_array_dim@plt>
   17da4:	cmp	r0, #0
   17da8:	beq	17db0 <traverse_product@@Base+0x5a8>
   17dac:	bl	1889c <handle_coda_error@@Base>
   17db0:	ldr	r2, [sp, #32]
   17db4:	cmp	r2, #0
   17db8:	movge	r3, #0
   17dbc:	movge	r7, #1
   17dc0:	bge	17dd8 <traverse_product@@Base+0x5d0>
   17dc4:	ldr	r0, [pc, #1140]	; 18240 <traverse_product@@Base+0xa38>
   17dc8:	b	17d88 <traverse_product@@Base+0x580>
   17dcc:	ldr	r1, [r6, r3, lsl #2]
   17dd0:	add	r3, r3, #1
   17dd4:	mul	r7, r1, r7
   17dd8:	cmp	r3, r2
   17ddc:	bne	17dcc <traverse_product@@Base+0x5c4>
   17de0:	cmp	r7, #0
   17de4:	ble	17dc4 <traverse_product@@Base+0x5bc>
   17de8:	ldr	r0, [pc, #1084]	; 1822c <traverse_product@@Base+0xa24>
   17dec:	bl	178bc <traverse_product@@Base+0xb4>
   17df0:	mov	r0, r4
   17df4:	bl	1235c <coda_cursor_goto_first_array_element@plt>
   17df8:	cmp	r0, #0
   17dfc:	beq	17e04 <traverse_product@@Base+0x5fc>
   17e00:	bl	1889c <handle_coda_error@@Base>
   17e04:	mov	r6, #0
   17e08:	ldr	r9, [pc, #1076]	; 18244 <traverse_product@@Base+0xa3c>
   17e0c:	mov	sl, r6
   17e10:	sub	r8, r7, #1
   17e14:	mov	r0, r9
   17e18:	bl	17a3c <traverse_product@@Base+0x234>
   17e1c:	ldr	r3, [r5]
   17e20:	mov	r1, sl
   17e24:	add	r3, r3, #1
   17e28:	mov	r0, r4
   17e2c:	str	r3, [r5]
   17e30:	bl	17a74 <traverse_product@@Base+0x26c>
   17e34:	ldr	r3, [r5]
   17e38:	cmp	r8, r6
   17e3c:	sub	r3, r3, #1
   17e40:	str	r3, [r5]
   17e44:	ble	17e5c <traverse_product@@Base+0x654>
   17e48:	mov	r0, r4
   17e4c:	bl	12458 <coda_cursor_goto_next_array_element@plt>
   17e50:	cmp	r0, #0
   17e54:	beq	17e5c <traverse_product@@Base+0x654>
   17e58:	bl	1889c <handle_coda_error@@Base>
   17e5c:	add	r6, r6, #1
   17e60:	cmp	r7, r6
   17e64:	bne	17e14 <traverse_product@@Base+0x60c>
   17e68:	b	17c68 <traverse_product@@Base+0x460>
   17e6c:	add	r1, sp, #28
   17e70:	mov	r0, r4
   17e74:	bl	123b0 <coda_cursor_get_read_type@plt>
   17e78:	cmp	r0, #0
   17e7c:	beq	17e84 <traverse_product@@Base+0x67c>
   17e80:	bl	1889c <handle_coda_error@@Base>
   17e84:	ldr	r3, [sp, #28]
   17e88:	add	r3, r3, #1
   17e8c:	cmp	r3, #13
   17e90:	ldrls	pc, [pc, r3, lsl #2]
   17e94:	b	17c70 <traverse_product@@Base+0x468>
   17e98:	andeq	r8, r1, ip, ror #2
   17e9c:	andeq	r8, r1, r8, asr r0
   17ea0:	andeq	r8, r1, r0, lsl #1
   17ea4:	andeq	r8, r1, r8, asr r0
   17ea8:	andeq	r8, r1, r0, lsl #1
   17eac:	andeq	r8, r1, r8, asr r0
   17eb0:	andeq	r8, r1, r0, lsl #1
   17eb4:	andeq	r8, r1, r4, lsr #1
   17eb8:	ldrdeq	r8, [r1], -r4
   17ebc:	strdeq	r8, [r1], -ip
   17ec0:	strdeq	r8, [r1], -ip
   17ec4:	ldrdeq	r7, [r1], -r0
   17ec8:	andeq	r7, r1, r4, lsl #30
   17ecc:	andeq	r7, r1, r0, lsr #31
   17ed0:	add	r1, sp, #40	; 0x28
   17ed4:	mov	r0, r4
   17ed8:	bl	12494 <coda_cursor_read_char@plt>
   17edc:	cmp	r0, #0
   17ee0:	beq	17ee8 <traverse_product@@Base+0x6e0>
   17ee4:	bl	1889c <handle_coda_error@@Base>
   17ee8:	ldr	r0, [pc, #856]	; 18248 <traverse_product@@Base+0xa40>
   17eec:	bl	178bc <traverse_product@@Base+0xb4>
   17ef0:	add	r0, sp, #40	; 0x28
   17ef4:	mov	r1, #1
   17ef8:	bl	178f0 <traverse_product@@Base+0xe8>
   17efc:	ldr	r0, [pc, #840]	; 1824c <traverse_product@@Base+0xa44>
   17f00:	b	17d88 <traverse_product@@Base+0x580>
   17f04:	add	r1, sp, #40	; 0x28
   17f08:	mov	r0, r4
   17f0c:	bl	1241c <coda_cursor_get_string_length@plt>
   17f10:	cmp	r0, #0
   17f14:	beq	17f1c <traverse_product@@Base+0x714>
   17f18:	bl	1889c <handle_coda_error@@Base>
   17f1c:	ldr	r0, [sp, #40]	; 0x28
   17f20:	add	r0, r0, #1
   17f24:	bl	123bc <malloc@plt>
   17f28:	subs	r6, r0, #0
   17f2c:	bne	17f54 <traverse_product@@Base+0x74c>
   17f30:	ldr	r3, [pc, #792]	; 18250 <traverse_product@@Base+0xa48>
   17f34:	ldr	r2, [sp, #40]	; 0x28
   17f38:	str	r3, [sp]
   17f3c:	add	r2, r2, #1
   17f40:	ldr	r3, [pc, #780]	; 18254 <traverse_product@@Base+0xa4c>
   17f44:	ldr	r1, [pc, #780]	; 18258 <traverse_product@@Base+0xa50>
   17f48:	mvn	r0, #0
   17f4c:	bl	1223c <coda_set_error@plt>
   17f50:	bl	1889c <handle_coda_error@@Base>
   17f54:	ldr	r2, [sp, #40]	; 0x28
   17f58:	mov	r1, r6
   17f5c:	add	r2, r2, #1
   17f60:	mov	r0, r4
   17f64:	bl	123e0 <coda_cursor_read_string@plt>
   17f68:	cmp	r0, #0
   17f6c:	beq	17f74 <traverse_product@@Base+0x76c>
   17f70:	bl	1889c <handle_coda_error@@Base>
   17f74:	ldr	r0, [pc, #716]	; 18248 <traverse_product@@Base+0xa40>
   17f78:	bl	178bc <traverse_product@@Base+0xb4>
   17f7c:	ldr	r1, [sp, #40]	; 0x28
   17f80:	mov	r0, r6
   17f84:	bl	178f0 <traverse_product@@Base+0xe8>
   17f88:	ldr	r1, [sp, #40]	; 0x28
   17f8c:	ldr	r0, [pc, #696]	; 1824c <traverse_product@@Base+0xa44>
   17f90:	bl	178bc <traverse_product@@Base+0xb4>
   17f94:	mov	r0, r6
   17f98:	bl	12284 <free@plt>
   17f9c:	b	17c70 <traverse_product@@Base+0x468>
   17fa0:	add	r1, sp, #40	; 0x28
   17fa4:	mov	r0, r4
   17fa8:	bl	1259c <coda_cursor_get_bit_size@plt>
   17fac:	cmp	r0, #0
   17fb0:	beq	17fb8 <traverse_product@@Base+0x7b0>
   17fb4:	bl	1889c <handle_coda_error@@Base>
   17fb8:	ldrd	r0, [sp, #40]	; 0x28
   17fbc:	mov	r3, #0
   17fc0:	and	r2, r0, #7
   17fc4:	orrs	r3, r2, r3
   17fc8:	lsr	r6, r0, #3
   17fcc:	movne	ip, #1
   17fd0:	moveq	ip, #0
   17fd4:	orr	r6, r6, r1, lsl #29
   17fd8:	adds	r6, r6, ip
   17fdc:	mov	r0, r6
   17fe0:	bl	123bc <malloc@plt>
   17fe4:	subs	r8, r0, #0
   17fe8:	bne	1800c <traverse_product@@Base+0x804>
   17fec:	mov	r3, #392	; 0x188
   17ff0:	str	r3, [sp]
   17ff4:	mov	r2, r6
   17ff8:	ldr	r3, [pc, #596]	; 18254 <traverse_product@@Base+0xa4c>
   17ffc:	ldr	r1, [pc, #596]	; 18258 <traverse_product@@Base+0xa50>
   18000:	mvn	r0, #0
   18004:	bl	1223c <coda_set_error@plt>
   18008:	bl	1889c <handle_coda_error@@Base>
   1800c:	ldrd	r2, [sp, #40]	; 0x28
   18010:	mov	r1, r8
   18014:	mov	r0, r4
   18018:	strd	r2, [sp]
   1801c:	mov	r2, #0
   18020:	mov	r3, #0
   18024:	bl	12638 <coda_cursor_read_bits@plt>
   18028:	cmp	r0, #0
   1802c:	beq	18034 <traverse_product@@Base+0x82c>
   18030:	bl	1889c <handle_coda_error@@Base>
   18034:	ldr	r0, [pc, #524]	; 18248 <traverse_product@@Base+0xa40>
   18038:	bl	178bc <traverse_product@@Base+0xb4>
   1803c:	mov	r1, r6
   18040:	mov	r0, r8
   18044:	bl	178f0 <traverse_product@@Base+0xe8>
   18048:	ldr	r0, [pc, #508]	; 1824c <traverse_product@@Base+0xa44>
   1804c:	bl	178bc <traverse_product@@Base+0xb4>
   18050:	mov	r0, r8
   18054:	b	17f98 <traverse_product@@Base+0x790>
   18058:	add	r1, sp, #40	; 0x28
   1805c:	mov	r0, r4
   18060:	bl	125d8 <coda_cursor_read_int32@plt>
   18064:	cmp	r0, #0
   18068:	beq	18070 <traverse_product@@Base+0x868>
   1806c:	bl	1889c <handle_coda_error@@Base>
   18070:	ldr	r1, [sp, #40]	; 0x28
   18074:	ldr	r0, [pc, #480]	; 1825c <traverse_product@@Base+0xa54>
   18078:	bl	178bc <traverse_product@@Base+0xb4>
   1807c:	b	17c70 <traverse_product@@Base+0x468>
   18080:	add	r1, sp, #40	; 0x28
   18084:	mov	r0, r4
   18088:	bl	122a8 <coda_cursor_read_uint32@plt>
   1808c:	cmp	r0, #0
   18090:	beq	18098 <traverse_product@@Base+0x890>
   18094:	bl	1889c <handle_coda_error@@Base>
   18098:	ldr	r1, [sp, #40]	; 0x28
   1809c:	ldr	r0, [pc, #444]	; 18260 <traverse_product@@Base+0xa58>
   180a0:	b	18078 <traverse_product@@Base+0x870>
   180a4:	add	r1, sp, #32
   180a8:	mov	r0, r4
   180ac:	bl	1253c <coda_cursor_read_int64@plt>
   180b0:	cmp	r0, #0
   180b4:	beq	180bc <traverse_product@@Base+0x8b4>
   180b8:	bl	1889c <handle_coda_error@@Base>
   180bc:	add	r2, sp, #40	; 0x28
   180c0:	ldrd	r0, [sp, #32]
   180c4:	bl	12644 <coda_str64@plt>
   180c8:	add	r1, sp, #40	; 0x28
   180cc:	ldr	r0, [pc, #400]	; 18264 <traverse_product@@Base+0xa5c>
   180d0:	b	18078 <traverse_product@@Base+0x870>
   180d4:	add	r1, sp, #32
   180d8:	mov	r0, r4
   180dc:	bl	12428 <coda_cursor_read_uint64@plt>
   180e0:	cmp	r0, #0
   180e4:	beq	180ec <traverse_product@@Base+0x8e4>
   180e8:	bl	1889c <handle_coda_error@@Base>
   180ec:	add	r2, sp, #40	; 0x28
   180f0:	ldrd	r0, [sp, #32]
   180f4:	bl	12278 <coda_str64u@plt>
   180f8:	b	180c8 <traverse_product@@Base+0x8c0>
   180fc:	add	r1, sp, #40	; 0x28
   18100:	mov	r0, r4
   18104:	bl	12434 <coda_cursor_read_double@plt>
   18108:	cmp	r0, #0
   1810c:	beq	18114 <traverse_product@@Base+0x90c>
   18110:	bl	1889c <handle_coda_error@@Base>
   18114:	ldr	r3, [sp, #28]
   18118:	cmp	r3, #8
   1811c:	ldrd	r2, [sp, #40]	; 0x28
   18120:	ldreq	r0, [pc, #320]	; 18268 <traverse_product@@Base+0xa60>
   18124:	beq	1812c <traverse_product@@Base+0x924>
   18128:	ldr	r0, [pc, #316]	; 1826c <traverse_product@@Base+0xa64>
   1812c:	bl	178bc <traverse_product@@Base+0xb4>
   18130:	b	17c70 <traverse_product@@Base+0x468>
   18134:	add	r1, sp, #28
   18138:	mov	r0, r4
   1813c:	bl	12350 <coda_cursor_get_special_type@plt>
   18140:	cmp	r0, #0
   18144:	beq	1814c <traverse_product@@Base+0x944>
   18148:	bl	1889c <handle_coda_error@@Base>
   1814c:	ldr	r3, [sp, #28]
   18150:	cmp	r3, #3
   18154:	ldrls	pc, [pc, r3, lsl #2]
   18158:	b	17c70 <traverse_product@@Base+0x468>
   1815c:	andeq	r8, r1, ip, ror #2
   18160:	andeq	r8, r1, r4, ror r1
   18164:	muleq	r1, r4, r1
   18168:	strdeq	r8, [r1], -r4
   1816c:	ldr	r0, [pc, #252]	; 18270 <traverse_product@@Base+0xa68>
   18170:	b	17d88 <traverse_product@@Base+0x580>
   18174:	add	r1, sp, #40	; 0x28
   18178:	mov	r0, r4
   1817c:	bl	12434 <coda_cursor_read_double@plt>
   18180:	cmp	r0, #0
   18184:	beq	1818c <traverse_product@@Base+0x984>
   18188:	bl	1889c <handle_coda_error@@Base>
   1818c:	ldrd	r2, [sp, #40]	; 0x28
   18190:	b	18128 <traverse_product@@Base+0x920>
   18194:	add	r1, sp, #32
   18198:	mov	r0, r4
   1819c:	bl	12434 <coda_cursor_read_double@plt>
   181a0:	cmp	r0, #0
   181a4:	beq	181ac <traverse_product@@Base+0x9a4>
   181a8:	bl	1889c <handle_coda_error@@Base>
   181ac:	vldr	d0, [sp, #32]
   181b0:	bl	12440 <coda_isNaN@plt>
   181b4:	cmp	r0, #0
   181b8:	beq	181c4 <traverse_product@@Base+0x9bc>
   181bc:	ldrd	r2, [sp, #32]
   181c0:	b	18128 <traverse_product@@Base+0x920>
   181c4:	vldr	d0, [sp, #32]
   181c8:	bl	122e4 <coda_isInf@plt>
   181cc:	cmp	r0, #0
   181d0:	bne	181bc <traverse_product@@Base+0x9b4>
   181d4:	add	r1, sp, #40	; 0x28
   181d8:	ldr	r0, [pc, #148]	; 18274 <traverse_product@@Base+0xa6c>
   181dc:	vldr	d0, [sp, #32]
   181e0:	bl	12260 <coda_time_double_to_string@plt>
   181e4:	cmp	r0, #0
   181e8:	beq	180c8 <traverse_product@@Base+0x8c0>
   181ec:	ldr	r0, [pc, #132]	; 18278 <traverse_product@@Base+0xa70>
   181f0:	b	17d88 <traverse_product@@Base+0x580>
   181f4:	add	r2, sp, #40	; 0x28
   181f8:	add	r1, sp, #32
   181fc:	mov	r0, r4
   18200:	bl	124dc <coda_cursor_read_complex_double_split@plt>
   18204:	cmp	r0, #0
   18208:	beq	18210 <traverse_product@@Base+0xa08>
   1820c:	bl	1889c <handle_coda_error@@Base>
   18210:	ldrd	r2, [sp, #40]	; 0x28
   18214:	ldr	r0, [pc, #96]	; 1827c <traverse_product@@Base+0xa74>
   18218:	strd	r2, [sp]
   1821c:	ldrd	r2, [sp, #32]
   18220:	bl	178bc <traverse_product@@Base+0xb4>
   18224:	b	17c70 <traverse_product@@Base+0x468>
   18228:	andeq	fp, r2, ip, asr #3
   1822c:	andeq	sl, r1, r1, asr #5
   18230:	andeq	r9, r1, pc, lsr r2
   18234:	andeq	r9, r1, r6, asr #4
   18238:	andeq	r9, r1, sp, asr #4
   1823c:	andeq	r9, r1, r2, asr r2
   18240:	andeq	r9, r1, r9, asr r2
   18244:	andeq	r9, r1, r6, asr r2
   18248:	andeq	r9, r1, sl, asr #32
   1824c:	andeq	sl, r1, r0, asr #5
   18250:	andeq	r0, r0, r9, ror #2
   18254:	strdeq	r9, [r1], -r5
   18258:			; <UNDEFINED> instruction: 0x00018bbf
   1825c:	strdeq	r8, [r1], -lr
   18260:	andeq	r8, r1, r3, lsl #26
   18264:	muleq	r1, sl, r1
   18268:	andeq	r8, r1, r8, lsl #26
   1826c:	andeq	r8, r1, r6, lsr #26
   18270:	andeq	r9, r1, sp, asr r2
   18274:	strheq	r9, [r1], -lr
   18278:	ldrdeq	r9, [r1], -fp
   1827c:	andeq	r8, r1, r9, asr #26

00018280 <print_yaml_data@@Base>:
   18280:	push	{r4, lr}
   18284:	sub	sp, sp, #528	; 0x210
   18288:	ldr	r3, [pc, #184]	; 18348 <print_yaml_data@@Base+0xc8>
   1828c:	ldr	r4, [pc, #184]	; 1834c <print_yaml_data@@Base+0xcc>
   18290:	add	r1, sp, #4
   18294:	str	r0, [r3, #4]
   18298:	ldr	r0, [r4]
   1829c:	bl	12248 <coda_open@plt>
   182a0:	cmp	r0, #0
   182a4:	beq	182bc <print_yaml_data@@Base+0x3c>
   182a8:	bl	125fc <coda_get_errno@plt>
   182ac:	ldr	r3, [r0]
   182b0:	cmn	r3, #21
   182b4:	beq	1831c <print_yaml_data@@Base+0x9c>
   182b8:	bl	1889c <handle_coda_error@@Base>
   182bc:	ldr	r1, [sp, #4]
   182c0:	add	r0, sp, #8
   182c4:	bl	12368 <coda_cursor_set_product@plt>
   182c8:	cmp	r0, #0
   182cc:	beq	182d4 <print_yaml_data@@Base+0x54>
   182d0:	bl	1889c <handle_coda_error@@Base>
   182d4:	ldr	r3, [pc, #116]	; 18350 <print_yaml_data@@Base+0xd0>
   182d8:	ldr	r1, [r3]
   182dc:	cmp	r1, #0
   182e0:	beq	182f8 <print_yaml_data@@Base+0x78>
   182e4:	add	r0, sp, #8
   182e8:	bl	12554 <coda_cursor_goto@plt>
   182ec:	cmp	r0, #0
   182f0:	beq	182f8 <print_yaml_data@@Base+0x78>
   182f4:	bl	1889c <handle_coda_error@@Base>
   182f8:	mov	r0, #0
   182fc:	bl	121f4 <coda_set_option_perform_boundary_checks@plt>
   18300:	mov	r1, #0
   18304:	add	r0, sp, #8
   18308:	bl	17a74 <traverse_product@@Base+0x26c>
   1830c:	ldr	r0, [sp, #4]
   18310:	bl	12530 <coda_close@plt>
   18314:	add	sp, sp, #528	; 0x210
   18318:	pop	{r4, pc}
   1831c:	mov	r0, #0
   18320:	bl	12290 <coda_set_option_use_mmap@plt>
   18324:	add	r1, sp, #4
   18328:	ldr	r0, [r4]
   1832c:	bl	12248 <coda_open@plt>
   18330:	mov	r4, r0
   18334:	mov	r0, #1
   18338:	bl	12290 <coda_set_option_use_mmap@plt>
   1833c:	cmp	r4, #0
   18340:	bne	182b8 <print_yaml_data@@Base+0x38>
   18344:	b	182bc <print_yaml_data@@Base+0x3c>
   18348:	andeq	fp, r2, ip, asr #3
   1834c:	strdeq	fp, [r2], -r0
   18350:	strheq	ip, [r2], -r0
   18354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18358:	sub	sp, sp, #20
   1835c:	ldr	r0, [pc, #1036]	; 18770 <print_yaml_data@@Base+0x4f0>
   18360:	bl	123a4 <puts@plt>
   18364:	ldr	r0, [pc, #1032]	; 18774 <print_yaml_data@@Base+0x4f4>
   18368:	bl	123a4 <puts@plt>
   1836c:	ldr	r0, [pc, #1028]	; 18778 <print_yaml_data@@Base+0x4f8>
   18370:	bl	123a4 <puts@plt>
   18374:	ldr	r3, [pc, #1024]	; 1877c <print_yaml_data@@Base+0x4fc>
   18378:	ldr	fp, [pc, #1024]	; 18780 <print_yaml_data@@Base+0x500>
   1837c:	mov	r0, r3
   18380:	str	r3, [sp, #4]
   18384:	bl	123a4 <puts@plt>
   18388:	ldr	r0, [pc, #1012]	; 18784 <print_yaml_data@@Base+0x504>
   1838c:	bl	123a4 <puts@plt>
   18390:	ldr	sl, [pc, #1008]	; 18788 <print_yaml_data@@Base+0x508>
   18394:	ldr	r0, [pc, #1008]	; 1878c <print_yaml_data@@Base+0x50c>
   18398:	bl	123a4 <puts@plt>
   1839c:	ldr	r5, [pc, #1004]	; 18790 <print_yaml_data@@Base+0x510>
   183a0:	mov	r0, fp
   183a4:	bl	123a4 <puts@plt>
   183a8:	ldr	r4, [pc, #996]	; 18794 <print_yaml_data@@Base+0x514>
   183ac:	mov	r0, sl
   183b0:	bl	123a4 <puts@plt>
   183b4:	mov	r0, r5
   183b8:	bl	123a4 <puts@plt>
   183bc:	mov	r0, r4
   183c0:	bl	123a4 <puts@plt>
   183c4:	ldr	r0, [pc, #972]	; 18798 <print_yaml_data@@Base+0x518>
   183c8:	bl	123a4 <puts@plt>
   183cc:	ldr	r0, [pc, #968]	; 1879c <print_yaml_data@@Base+0x51c>
   183d0:	bl	123a4 <puts@plt>
   183d4:	ldr	r0, [pc, #964]	; 187a0 <print_yaml_data@@Base+0x520>
   183d8:	bl	123a4 <puts@plt>
   183dc:	ldr	r0, [pc, #960]	; 187a4 <print_yaml_data@@Base+0x524>
   183e0:	bl	123a4 <puts@plt>
   183e4:	ldr	r0, [pc, #956]	; 187a8 <print_yaml_data@@Base+0x528>
   183e8:	bl	123a4 <puts@plt>
   183ec:	ldr	r0, [pc, #952]	; 187ac <print_yaml_data@@Base+0x52c>
   183f0:	bl	123a4 <puts@plt>
   183f4:	ldr	r0, [pc, #948]	; 187b0 <print_yaml_data@@Base+0x530>
   183f8:	bl	123a4 <puts@plt>
   183fc:	ldr	r9, [pc, #944]	; 187b4 <print_yaml_data@@Base+0x534>
   18400:	ldr	r0, [pc, #944]	; 187b8 <print_yaml_data@@Base+0x538>
   18404:	bl	123a4 <puts@plt>
   18408:	ldr	r8, [pc, #940]	; 187bc <print_yaml_data@@Base+0x53c>
   1840c:	ldr	r0, [pc, #940]	; 187c0 <print_yaml_data@@Base+0x540>
   18410:	bl	123a4 <puts@plt>
   18414:	ldr	r7, [pc, #936]	; 187c4 <print_yaml_data@@Base+0x544>
   18418:	mov	r0, r9
   1841c:	bl	123a4 <puts@plt>
   18420:	ldr	r6, [pc, #928]	; 187c8 <print_yaml_data@@Base+0x548>
   18424:	mov	r0, r8
   18428:	bl	123a4 <puts@plt>
   1842c:	mov	r0, r7
   18430:	bl	123a4 <puts@plt>
   18434:	mov	r0, r6
   18438:	bl	123a4 <puts@plt>
   1843c:	mov	r0, #10
   18440:	bl	124ac <putchar@plt>
   18444:	ldr	r0, [pc, #896]	; 187cc <print_yaml_data@@Base+0x54c>
   18448:	bl	123a4 <puts@plt>
   1844c:	ldr	r0, [pc, #892]	; 187d0 <print_yaml_data@@Base+0x550>
   18450:	bl	123a4 <puts@plt>
   18454:	ldr	r3, [sp, #4]
   18458:	mov	r0, r3
   1845c:	bl	123a4 <puts@plt>
   18460:	mov	r0, fp
   18464:	bl	123a4 <puts@plt>
   18468:	mov	r0, sl
   1846c:	bl	123a4 <puts@plt>
   18470:	mov	r0, r5
   18474:	bl	123a4 <puts@plt>
   18478:	mov	r0, r4
   1847c:	bl	123a4 <puts@plt>
   18480:	ldr	r0, [pc, #844]	; 187d4 <print_yaml_data@@Base+0x554>
   18484:	bl	123a4 <puts@plt>
   18488:	ldr	r0, [pc, #840]	; 187d8 <print_yaml_data@@Base+0x558>
   1848c:	bl	123a4 <puts@plt>
   18490:	ldr	r5, [pc, #836]	; 187dc <print_yaml_data@@Base+0x55c>
   18494:	ldr	r0, [pc, #836]	; 187e0 <print_yaml_data@@Base+0x560>
   18498:	bl	123a4 <puts@plt>
   1849c:	ldr	r4, [pc, #832]	; 187e4 <print_yaml_data@@Base+0x564>
   184a0:	ldr	r0, [pc, #832]	; 187e8 <print_yaml_data@@Base+0x568>
   184a4:	bl	123a4 <puts@plt>
   184a8:	mov	r0, r5
   184ac:	bl	123a4 <puts@plt>
   184b0:	mov	r0, r4
   184b4:	bl	123a4 <puts@plt>
   184b8:	ldr	r0, [pc, #812]	; 187ec <print_yaml_data@@Base+0x56c>
   184bc:	bl	123a4 <puts@plt>
   184c0:	ldr	r0, [pc, #808]	; 187f0 <print_yaml_data@@Base+0x570>
   184c4:	bl	123a4 <puts@plt>
   184c8:	ldr	r0, [pc, #804]	; 187f4 <print_yaml_data@@Base+0x574>
   184cc:	bl	123a4 <puts@plt>
   184d0:	ldr	r0, [pc, #800]	; 187f8 <print_yaml_data@@Base+0x578>
   184d4:	bl	123a4 <puts@plt>
   184d8:	ldr	r0, [pc, #796]	; 187fc <print_yaml_data@@Base+0x57c>
   184dc:	bl	123a4 <puts@plt>
   184e0:	ldr	r0, [pc, #792]	; 18800 <print_yaml_data@@Base+0x580>
   184e4:	bl	123a4 <puts@plt>
   184e8:	mov	r0, r9
   184ec:	bl	123a4 <puts@plt>
   184f0:	mov	r0, r8
   184f4:	bl	123a4 <puts@plt>
   184f8:	mov	r0, r7
   184fc:	bl	123a4 <puts@plt>
   18500:	mov	r0, r6
   18504:	bl	123a4 <puts@plt>
   18508:	mov	r0, #10
   1850c:	bl	124ac <putchar@plt>
   18510:	ldr	r0, [pc, #748]	; 18804 <print_yaml_data@@Base+0x584>
   18514:	bl	123a4 <puts@plt>
   18518:	ldr	r0, [pc, #744]	; 18808 <print_yaml_data@@Base+0x588>
   1851c:	bl	123a4 <puts@plt>
   18520:	ldr	r0, [pc, #740]	; 1880c <print_yaml_data@@Base+0x58c>
   18524:	bl	123a4 <puts@plt>
   18528:	ldr	r2, [pc, #736]	; 18810 <print_yaml_data@@Base+0x590>
   1852c:	mov	r0, r2
   18530:	str	r2, [sp, #12]
   18534:	bl	123a4 <puts@plt>
   18538:	ldr	r3, [pc, #724]	; 18814 <print_yaml_data@@Base+0x594>
   1853c:	mov	r0, r3
   18540:	str	r3, [sp, #8]
   18544:	bl	123a4 <puts@plt>
   18548:	ldr	r0, [pc, #712]	; 18818 <print_yaml_data@@Base+0x598>
   1854c:	bl	123a4 <puts@plt>
   18550:	mov	r0, fp
   18554:	bl	123a4 <puts@plt>
   18558:	mov	r0, sl
   1855c:	bl	123a4 <puts@plt>
   18560:	mov	r0, r5
   18564:	bl	123a4 <puts@plt>
   18568:	mov	r0, r4
   1856c:	bl	123a4 <puts@plt>
   18570:	ldr	r1, [pc, #676]	; 1881c <print_yaml_data@@Base+0x59c>
   18574:	mov	r0, r1
   18578:	str	r1, [sp, #4]
   1857c:	bl	123a4 <puts@plt>
   18580:	ldr	r0, [pc, #664]	; 18820 <print_yaml_data@@Base+0x5a0>
   18584:	bl	123a4 <puts@plt>
   18588:	ldr	r0, [pc, #660]	; 18824 <print_yaml_data@@Base+0x5a4>
   1858c:	bl	123a4 <puts@plt>
   18590:	mov	r0, r9
   18594:	bl	123a4 <puts@plt>
   18598:	mov	r0, r8
   1859c:	bl	123a4 <puts@plt>
   185a0:	mov	r0, r7
   185a4:	bl	123a4 <puts@plt>
   185a8:	mov	r0, r6
   185ac:	bl	123a4 <puts@plt>
   185b0:	mov	r0, #10
   185b4:	bl	124ac <putchar@plt>
   185b8:	ldr	r0, [pc, #616]	; 18828 <print_yaml_data@@Base+0x5a8>
   185bc:	bl	123a4 <puts@plt>
   185c0:	ldr	r0, [pc, #612]	; 1882c <print_yaml_data@@Base+0x5ac>
   185c4:	bl	123a4 <puts@plt>
   185c8:	ldr	r0, [pc, #608]	; 18830 <print_yaml_data@@Base+0x5b0>
   185cc:	bl	123a4 <puts@plt>
   185d0:	ldr	r2, [sp, #12]
   185d4:	mov	r0, r2
   185d8:	bl	123a4 <puts@plt>
   185dc:	ldr	r3, [sp, #8]
   185e0:	mov	r0, r3
   185e4:	bl	123a4 <puts@plt>
   185e8:	ldr	r0, [pc, #580]	; 18834 <print_yaml_data@@Base+0x5b4>
   185ec:	bl	123a4 <puts@plt>
   185f0:	ldr	r0, [pc, #576]	; 18838 <print_yaml_data@@Base+0x5b8>
   185f4:	bl	123a4 <puts@plt>
   185f8:	mov	r0, fp
   185fc:	bl	123a4 <puts@plt>
   18600:	mov	r0, sl
   18604:	bl	123a4 <puts@plt>
   18608:	mov	r0, r5
   1860c:	bl	123a4 <puts@plt>
   18610:	mov	r0, r4
   18614:	bl	123a4 <puts@plt>
   18618:	ldr	r1, [sp, #4]
   1861c:	mov	r0, r1
   18620:	bl	123a4 <puts@plt>
   18624:	ldr	r0, [pc, #500]	; 18820 <print_yaml_data@@Base+0x5a0>
   18628:	bl	123a4 <puts@plt>
   1862c:	ldr	r0, [pc, #496]	; 18824 <print_yaml_data@@Base+0x5a4>
   18630:	bl	123a4 <puts@plt>
   18634:	mov	r0, r9
   18638:	bl	123a4 <puts@plt>
   1863c:	mov	r0, r8
   18640:	bl	123a4 <puts@plt>
   18644:	mov	r0, r7
   18648:	bl	123a4 <puts@plt>
   1864c:	mov	r0, r6
   18650:	bl	123a4 <puts@plt>
   18654:	mov	r0, #10
   18658:	bl	124ac <putchar@plt>
   1865c:	ldr	r0, [pc, #472]	; 1883c <print_yaml_data@@Base+0x5bc>
   18660:	bl	123a4 <puts@plt>
   18664:	ldr	r0, [pc, #468]	; 18840 <print_yaml_data@@Base+0x5c0>
   18668:	bl	123a4 <puts@plt>
   1866c:	ldr	r0, [pc, #464]	; 18844 <print_yaml_data@@Base+0x5c4>
   18670:	bl	123a4 <puts@plt>
   18674:	ldr	r0, [pc, #460]	; 18848 <print_yaml_data@@Base+0x5c8>
   18678:	bl	123a4 <puts@plt>
   1867c:	ldr	r0, [pc, #456]	; 1884c <print_yaml_data@@Base+0x5cc>
   18680:	bl	123a4 <puts@plt>
   18684:	ldr	r0, [pc, #452]	; 18850 <print_yaml_data@@Base+0x5d0>
   18688:	bl	123a4 <puts@plt>
   1868c:	ldr	r0, [pc, #448]	; 18854 <print_yaml_data@@Base+0x5d4>
   18690:	bl	123a4 <puts@plt>
   18694:	mov	r0, r5
   18698:	bl	123a4 <puts@plt>
   1869c:	mov	r0, r4
   186a0:	bl	123a4 <puts@plt>
   186a4:	ldr	r1, [sp, #4]
   186a8:	mov	r0, r1
   186ac:	bl	123a4 <puts@plt>
   186b0:	ldr	r0, [pc, #360]	; 18820 <print_yaml_data@@Base+0x5a0>
   186b4:	bl	123a4 <puts@plt>
   186b8:	ldr	r0, [pc, #356]	; 18824 <print_yaml_data@@Base+0x5a4>
   186bc:	bl	123a4 <puts@plt>
   186c0:	ldr	r0, [pc, #400]	; 18858 <print_yaml_data@@Base+0x5d8>
   186c4:	bl	123a4 <puts@plt>
   186c8:	ldr	r0, [pc, #396]	; 1885c <print_yaml_data@@Base+0x5dc>
   186cc:	bl	123a4 <puts@plt>
   186d0:	ldr	r0, [pc, #392]	; 18860 <print_yaml_data@@Base+0x5e0>
   186d4:	bl	123a4 <puts@plt>
   186d8:	ldr	r0, [pc, #388]	; 18864 <print_yaml_data@@Base+0x5e4>
   186dc:	bl	123a4 <puts@plt>
   186e0:	ldr	r0, [pc, #384]	; 18868 <print_yaml_data@@Base+0x5e8>
   186e4:	bl	123a4 <puts@plt>
   186e8:	ldr	r0, [pc, #380]	; 1886c <print_yaml_data@@Base+0x5ec>
   186ec:	bl	123a4 <puts@plt>
   186f0:	mov	r0, #10
   186f4:	bl	124ac <putchar@plt>
   186f8:	ldr	r0, [pc, #368]	; 18870 <print_yaml_data@@Base+0x5f0>
   186fc:	bl	123a4 <puts@plt>
   18700:	ldr	r0, [pc, #364]	; 18874 <print_yaml_data@@Base+0x5f4>
   18704:	bl	123a4 <puts@plt>
   18708:	mov	r0, #10
   1870c:	bl	124ac <putchar@plt>
   18710:	ldr	r0, [pc, #352]	; 18878 <print_yaml_data@@Base+0x5f8>
   18714:	bl	123a4 <puts@plt>
   18718:	ldr	r0, [pc, #348]	; 1887c <print_yaml_data@@Base+0x5fc>
   1871c:	bl	123a4 <puts@plt>
   18720:	mov	r0, #10
   18724:	bl	124ac <putchar@plt>
   18728:	ldr	r0, [pc, #336]	; 18880 <print_yaml_data@@Base+0x600>
   1872c:	bl	123a4 <puts@plt>
   18730:	ldr	r0, [pc, #332]	; 18884 <print_yaml_data@@Base+0x604>
   18734:	bl	123a4 <puts@plt>
   18738:	ldr	r0, [pc, #328]	; 18888 <print_yaml_data@@Base+0x608>
   1873c:	bl	123a4 <puts@plt>
   18740:	ldr	r0, [pc, #324]	; 1888c <print_yaml_data@@Base+0x60c>
   18744:	bl	123a4 <puts@plt>
   18748:	ldr	r0, [pc, #320]	; 18890 <print_yaml_data@@Base+0x610>
   1874c:	bl	123a4 <puts@plt>
   18750:	ldr	r0, [pc, #316]	; 18894 <print_yaml_data@@Base+0x614>
   18754:	bl	123a4 <puts@plt>
   18758:	ldr	r0, [pc, #312]	; 18898 <print_yaml_data@@Base+0x618>
   1875c:	bl	123a4 <puts@plt>
   18760:	mov	r0, #10
   18764:	add	sp, sp, #20
   18768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1876c:	b	124ac <putchar@plt>
   18770:	andeq	r9, r1, r3, ror #4
   18774:	andeq	r9, r1, sl, ror #4
   18778:			; <UNDEFINED> instruction: 0x000192b0
   1877c:	ldrdeq	r9, [r1], -ip
   18780:	andeq	r9, r1, r4, asr #6
   18784:	strdeq	r9, [r1], -r2
   18788:	andeq	r9, r1, sl, ror #6
   1878c:	andeq	r9, r1, sp, lsl #6
   18790:	andeq	r9, r1, r4, lsr #7
   18794:	ldrdeq	r9, [r1], -r3
   18798:	andeq	r9, r1, fp, lsl r4
   1879c:	andeq	r9, r1, r2, lsr r4
   187a0:	andeq	r9, r1, fp, asr r4
   187a4:	andeq	r9, r1, r2, ror r4
   187a8:	muleq	r1, ip, r4
   187ac:			; <UNDEFINED> instruction: 0x000194b6
   187b0:	andeq	r9, r1, r7, ror #9
   187b4:	andeq	r9, r1, pc, ror #10
   187b8:	andeq	r9, r1, r0, lsl #10
   187bc:	andeq	r9, r1, lr, lsl #11
   187c0:	andeq	r9, r1, r6, asr #10
   187c4:	ldrdeq	r9, [r1], -lr
   187c8:	andeq	r9, r1, ip, lsr #12
   187cc:	andeq	r9, r1, sl, asr #12
   187d0:	muleq	r1, r2, r6
   187d4:	andeq	r9, r1, lr, asr #13
   187d8:	andeq	r9, r1, r6, ror #13
   187dc:	andeq	r9, r1, sl, lsl #15
   187e0:	andeq	r9, r1, r7, lsr #14
   187e4:	andeq	r9, r1, lr, lsr #15
   187e8:	andeq	r9, r1, pc, lsr r7
   187ec:	andeq	r9, r1, r1, ror #15
   187f0:	andeq	r9, r1, r1, lsl #16
   187f4:	andeq	r9, r1, ip, asr #16
   187f8:	andeq	r9, r1, r4, lsl #17
   187fc:	ldrdeq	r9, [r1], -r0
   18800:	strdeq	r9, [r1], -r1
   18804:	andeq	r9, r1, r0, asr #18
   18808:	andeq	r9, r1, r6, lsl #19
   1880c:	andeq	r9, r1, r2, asr #19
   18810:	ldrdeq	r9, [r1], -r8
   18814:	strdeq	r9, [r1], -r5
   18818:	andeq	r9, r1, ip, lsr sl
   1881c:	andeq	r9, r1, r7, lsl #21
   18820:	andeq	r9, r1, r5, lsr #21
   18824:	andeq	r9, r1, sp, ror #21
   18828:	andeq	r9, r1, sl, lsr fp
   1882c:	andeq	r9, r1, r0, lsl #23
   18830:			; <UNDEFINED> instruction: 0x00019bbc
   18834:	ldrdeq	r9, [r1], -r2
   18838:	andeq	r9, r1, lr, lsl ip
   1883c:	andeq	r9, r1, sp, lsr ip
   18840:	andeq	r9, r1, r5, lsl #25
   18844:	andeq	r9, r1, pc, asr #25
   18848:	andeq	r9, r1, r9, lsl sp
   1884c:	andeq	r9, r1, r7, asr #26
   18850:	andeq	r9, r1, lr, asr sp
   18854:	andeq	r9, r1, lr, lsl #27
   18858:	andeq	r9, r1, r3, asr #27
   1885c:	andeq	r9, r1, r3, ror #27
   18860:	andeq	r9, r1, r1, lsr lr
   18864:	andeq	r9, r1, ip, ror lr
   18868:			; <UNDEFINED> instruction: 0x00019ebb
   1886c:	andeq	r9, r1, r8, lsl #30
   18870:	andeq	r9, r1, sp, lsr pc
   18874:	andeq	r9, r1, r5, asr pc
   18878:	andeq	r9, r1, r3, ror pc
   1887c:	andeq	r9, r1, lr, lsl #31
   18880:	andeq	r9, r1, r0, asr #31
   18884:	andeq	sl, r1, lr
   18888:	andeq	sl, r1, r7, asr r0
   1888c:	andeq	sl, r1, r2, lsl #1
   18890:	andeq	sl, r1, lr, asr #1
   18894:	andeq	sl, r1, r4, lsl r1
   18898:	andeq	sl, r1, r3, asr r1

0001889c <handle_coda_error@@Base>:
   1889c:	push	{r4, lr}
   188a0:	ldr	r4, [pc, #44]	; 188d4 <handle_coda_error@@Base+0x38>
   188a4:	ldr	r5, [r4]
   188a8:	bl	125fc <coda_get_errno@plt>
   188ac:	ldr	r0, [r0]
   188b0:	bl	125b4 <coda_errno_to_string@plt>
   188b4:	ldr	r1, [pc, #28]	; 188d8 <handle_coda_error@@Base+0x3c>
   188b8:	mov	r2, r0
   188bc:	mov	r0, r5
   188c0:	bl	1244c <fprintf@plt>
   188c4:	ldr	r0, [r4]
   188c8:	bl	12254 <fflush@plt>
   188cc:	mov	r0, #1
   188d0:	bl	12404 <exit@plt>
   188d4:			; <UNDEFINED> instruction: 0x0002b1b8
   188d8:	muleq	r1, r3, r1
   188dc:	cmp	r3, #0
   188e0:	cmpeq	r2, #0
   188e4:	bne	18908 <handle_coda_error@@Base+0x6c>
   188e8:	cmp	r1, #0
   188ec:	movlt	r1, #-2147483648	; 0x80000000
   188f0:	movlt	r0, #0
   188f4:	blt	18904 <handle_coda_error@@Base+0x68>
   188f8:	cmpeq	r0, #0
   188fc:	mvnne	r1, #-2147483648	; 0x80000000
   18900:	mvnne	r0, #0
   18904:	b	189b0 <handle_coda_error@@Base+0x114>
   18908:	sub	sp, sp, #8
   1890c:	push	{sp, lr}
   18910:	cmp	r1, #0
   18914:	blt	18934 <handle_coda_error@@Base+0x98>
   18918:	cmp	r3, #0
   1891c:	blt	18968 <handle_coda_error@@Base+0xcc>
   18920:	bl	189c0 <handle_coda_error@@Base+0x124>
   18924:	ldr	lr, [sp, #4]
   18928:	add	sp, sp, #8
   1892c:	pop	{r2, r3}
   18930:	bx	lr
   18934:	rsbs	r0, r0, #0
   18938:	sbc	r1, r1, r1, lsl #1
   1893c:	cmp	r3, #0
   18940:	blt	1898c <handle_coda_error@@Base+0xf0>
   18944:	bl	189c0 <handle_coda_error@@Base+0x124>
   18948:	ldr	lr, [sp, #4]
   1894c:	add	sp, sp, #8
   18950:	pop	{r2, r3}
   18954:	rsbs	r0, r0, #0
   18958:	sbc	r1, r1, r1, lsl #1
   1895c:	rsbs	r2, r2, #0
   18960:	sbc	r3, r3, r3, lsl #1
   18964:	bx	lr
   18968:	rsbs	r2, r2, #0
   1896c:	sbc	r3, r3, r3, lsl #1
   18970:	bl	189c0 <handle_coda_error@@Base+0x124>
   18974:	ldr	lr, [sp, #4]
   18978:	add	sp, sp, #8
   1897c:	pop	{r2, r3}
   18980:	rsbs	r0, r0, #0
   18984:	sbc	r1, r1, r1, lsl #1
   18988:	bx	lr
   1898c:	rsbs	r2, r2, #0
   18990:	sbc	r3, r3, r3, lsl #1
   18994:	bl	189c0 <handle_coda_error@@Base+0x124>
   18998:	ldr	lr, [sp, #4]
   1899c:	add	sp, sp, #8
   189a0:	pop	{r2, r3}
   189a4:	rsbs	r2, r2, #0
   189a8:	sbc	r3, r3, r3, lsl #1
   189ac:	bx	lr
   189b0:	push	{r1, lr}
   189b4:	mov	r0, #8
   189b8:	bl	121dc <raise@plt>
   189bc:	pop	{r1, pc}
   189c0:	cmp	r1, r3
   189c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   189c8:	cmpeq	r0, r2
   189cc:	mov	r4, r0
   189d0:	mov	r5, r1
   189d4:	ldr	r9, [sp, #28]
   189d8:	movcc	r0, #0
   189dc:	movcc	r1, #0
   189e0:	bcc	18ad8 <handle_coda_error@@Base+0x23c>
   189e4:	cmp	r3, #0
   189e8:	clzeq	ip, r2
   189ec:	clzne	ip, r3
   189f0:	addeq	ip, ip, #32
   189f4:	cmp	r5, #0
   189f8:	clzeq	r1, r4
   189fc:	addeq	r1, r1, #32
   18a00:	clzne	r1, r5
   18a04:	sub	ip, ip, r1
   18a08:	sub	lr, ip, #32
   18a0c:	lsl	r7, r3, ip
   18a10:	rsb	r8, ip, #32
   18a14:	orr	r7, r7, r2, lsl lr
   18a18:	orr	r7, r7, r2, lsr r8
   18a1c:	lsl	r6, r2, ip
   18a20:	cmp	r5, r7
   18a24:	cmpeq	r4, r6
   18a28:	movcc	r0, #0
   18a2c:	movcc	r1, #0
   18a30:	bcc	18a4c <handle_coda_error@@Base+0x1b0>
   18a34:	mov	r3, #1
   18a38:	subs	r4, r4, r6
   18a3c:	lsl	r1, r3, lr
   18a40:	lsl	r0, r3, ip
   18a44:	orr	r1, r1, r3, lsr r8
   18a48:	sbc	r5, r5, r7
   18a4c:	cmp	ip, #0
   18a50:	beq	18ad8 <handle_coda_error@@Base+0x23c>
   18a54:	lsrs	r3, r7, #1
   18a58:	rrx	r2, r6
   18a5c:	mov	r6, ip
   18a60:	b	18a84 <handle_coda_error@@Base+0x1e8>
   18a64:	subs	r4, r4, r2
   18a68:	sbc	r5, r5, r3
   18a6c:	adds	r4, r4, r4
   18a70:	adc	r5, r5, r5
   18a74:	adds	r4, r4, #1
   18a78:	adc	r5, r5, #0
   18a7c:	subs	r6, r6, #1
   18a80:	beq	18aa0 <handle_coda_error@@Base+0x204>
   18a84:	cmp	r5, r3
   18a88:	cmpeq	r4, r2
   18a8c:	bcs	18a64 <handle_coda_error@@Base+0x1c8>
   18a90:	adds	r4, r4, r4
   18a94:	adc	r5, r5, r5
   18a98:	subs	r6, r6, #1
   18a9c:	bne	18a84 <handle_coda_error@@Base+0x1e8>
   18aa0:	lsr	r6, r4, ip
   18aa4:	lsr	r7, r5, ip
   18aa8:	orr	r6, r6, r5, lsl r8
   18aac:	adds	r2, r0, r4
   18ab0:	orr	r6, r6, r5, lsr lr
   18ab4:	adc	r3, r1, r5
   18ab8:	lsl	r1, r7, ip
   18abc:	orr	r1, r1, r6, lsl lr
   18ac0:	lsl	r0, r6, ip
   18ac4:	orr	r1, r1, r6, lsr r8
   18ac8:	subs	r0, r2, r0
   18acc:	mov	r4, r6
   18ad0:	mov	r5, r7
   18ad4:	sbc	r1, r3, r1
   18ad8:	cmp	r9, #0
   18adc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   18ae0:	strd	r4, [r9]
   18ae4:	pop	{r4, r5, r6, r7, r8, r9, pc}

00018ae8 <__libc_csu_init@@Base>:
   18ae8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18aec:	mov	r7, r0
   18af0:	ldr	r6, [pc, #72]	; 18b40 <__libc_csu_init@@Base+0x58>
   18af4:	ldr	r5, [pc, #72]	; 18b44 <__libc_csu_init@@Base+0x5c>
   18af8:	add	r6, pc, r6
   18afc:	add	r5, pc, r5
   18b00:	sub	r6, r6, r5
   18b04:	mov	r8, r1
   18b08:	mov	r9, r2
   18b0c:	bl	12198 <coda_cursor_get_byte_size@plt-0x20>
   18b10:	asrs	r6, r6, #2
   18b14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b18:	mov	r4, #0
   18b1c:	add	r4, r4, #1
   18b20:	ldr	r3, [r5], #4
   18b24:	mov	r2, r9
   18b28:	mov	r1, r8
   18b2c:	mov	r0, r7
   18b30:	blx	r3
   18b34:	cmp	r6, r4
   18b38:	bne	18b1c <__libc_csu_init@@Base+0x34>
   18b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b40:	strdeq	r2, [r1], -r8
   18b44:	strdeq	r2, [r1], -r0

00018b48 <__libc_csu_fini@@Base>:
   18b48:	bx	lr

Disassembly of section .fini:

00018b4c <.fini>:
   18b4c:	push	{r3, lr}
   18b50:	pop	{r3, pc}
