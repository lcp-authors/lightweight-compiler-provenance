
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000099c <_init>:
 99c:	push	{r3, lr}
 9a0:	bl	b30 <call_weak_fn>
 9a4:	pop	{r3, pc}

Disassembly of section .plt:

000009a8 <.plt>:
 9a8:	push	{lr}		; (str lr, [sp, #-4]!)
 9ac:	ldr	lr, [pc, #4]	; 9b8 <.plt+0x10>
 9b0:	add	lr, pc, lr
 9b4:	ldr	pc, [lr, #8]!
 9b8:	.word	0x00011648

000009bc <calloc@plt>:
 9bc:	add	ip, pc, #0, 12
 9c0:	add	ip, ip, #69632	; 0x11000
 9c4:	ldr	pc, [ip, #1608]!	; 0x648

000009c8 <rb_current_time@plt>:
 9c8:	add	ip, pc, #0, 12
 9cc:	add	ip, ip, #69632	; 0x11000
 9d0:	ldr	pc, [ip, #1600]!	; 0x640

000009d4 <__cxa_finalize@plt>:
 9d4:	add	ip, pc, #0, 12
 9d8:	add	ip, ip, #69632	; 0x11000
 9dc:	ldr	pc, [ip, #1592]!	; 0x638

000009e0 <RSA_public_encrypt@plt>:
 9e0:	add	ip, pc, #0, 12
 9e4:	add	ip, ip, #69632	; 0x11000
 9e8:	ldr	pc, [ip, #1584]!	; 0x630

000009ec <sendto_one@plt>:
 9ec:	add	ip, pc, #0, 12
 9f0:	add	ip, ip, #69632	; 0x11000
 9f4:	ldr	pc, [ip, #1576]!	; 0x628

000009f8 <free@plt>:
 9f8:	add	ip, pc, #0, 12
 9fc:	add	ip, ip, #69632	; 0x11000
 a00:	ldr	pc, [ip, #1568]!	; 0x620

00000a04 <rb_strcasecmp@plt>:
 a04:	add	ip, pc, #0, 12
 a08:	add	ip, ip, #69632	; 0x11000
 a0c:	ldr	pc, [ip, #1560]!	; 0x618

00000a10 <RSA_size@plt>:
 a10:	add	ip, pc, #0, 12
 a14:	add	ip, ip, #69632	; 0x11000
 a18:	ldr	pc, [ip, #1552]!	; 0x610

00000a1c <rb_outofmemory@plt>:
 a1c:	add	ip, pc, #0, 12
 a20:	add	ip, ip, #69632	; 0x11000
 a24:	ldr	pc, [ip, #1544]!	; 0x608

00000a28 <memcmp@plt>:
 a28:	add	ip, pc, #0, 12
 a2c:	add	ip, ip, #69632	; 0x11000
 a30:	ldr	pc, [ip, #1536]!	; 0x600

00000a34 <sendto_realops_snomask@plt>:
 a34:	add	ip, pc, #0, 12
 a38:	add	ip, ip, #69632	; 0x11000
 a3c:	ldr	pc, [ip, #1528]!	; 0x5f8

00000a40 <rb_base64_decode@plt>:
 a40:	add	ip, pc, #0, 12
 a44:	add	ip, ip, #69632	; 0x11000
 a48:	ldr	pc, [ip, #1520]!	; 0x5f0

00000a4c <strcpy@plt>:
 a4c:	add	ip, pc, #0, 12
 a50:	add	ip, ip, #69632	; 0x11000
 a54:	ldr	pc, [ip, #1512]!	; 0x5e8

00000a58 <malloc@plt>:
 a58:	add	ip, pc, #0, 12
 a5c:	add	ip, ip, #69632	; 0x11000
 a60:	ldr	pc, [ip, #1504]!	; 0x5e0

00000a64 <rb_get_random@plt>:
 a64:	add	ip, pc, #0, 12
 a68:	add	ip, ip, #69632	; 0x11000
 a6c:	ldr	pc, [ip, #1496]!	; 0x5d8

00000a70 <__gmon_start__@plt>:
 a70:	add	ip, pc, #0, 12
 a74:	add	ip, ip, #69632	; 0x11000
 a78:	ldr	pc, [ip, #1488]!	; 0x5d0

00000a7c <OPENSSL_init_crypto@plt>:
 a7c:	add	ip, pc, #0, 12
 a80:	add	ip, ip, #69632	; 0x11000
 a84:	ldr	pc, [ip, #1480]!	; 0x5c8

00000a88 <send_oper_motd@plt>:
 a88:	add	ip, pc, #0, 12
 a8c:	add	ip, ip, #69632	; 0x11000
 a90:	ldr	pc, [ip, #1472]!	; 0x5c0

00000a94 <sendto_one_numeric@plt>:
 a94:	add	ip, pc, #0, 12
 a98:	add	ip, ip, #69632	; 0x11000
 a9c:	ldr	pc, [ip, #1464]!	; 0x5b8

00000aa0 <strlen@plt>:
 aa0:	add	ip, pc, #0, 12
 aa4:	add	ip, ip, #69632	; 0x11000
 aa8:	ldr	pc, [ip, #1456]!	; 0x5b0

00000aac <SHA1_Update@plt>:
 aac:	add	ip, pc, #0, 12
 ab0:	add	ip, ip, #69632	; 0x11000
 ab4:	ldr	pc, [ip, #1448]!	; 0x5a8

00000ab8 <ERR_error_string@plt>:
 ab8:	add	ip, pc, #0, 12
 abc:	add	ip, ip, #69632	; 0x11000
 ac0:	ldr	pc, [ip, #1440]!	; 0x5a0

00000ac4 <ilog@plt>:
 ac4:	add	ip, pc, #0, 12
 ac8:	add	ip, ip, #69632	; 0x11000
 acc:	ldr	pc, [ip, #1432]!	; 0x598

00000ad0 <SHA1_Init@plt>:
 ad0:	add	ip, pc, #0, 12
 ad4:	add	ip, ip, #69632	; 0x11000
 ad8:	ldr	pc, [ip, #1424]!	; 0x590

00000adc <ERR_get_error@plt>:
 adc:	add	ip, pc, #0, 12
 ae0:	add	ip, ip, #69632	; 0x11000
 ae4:	ldr	pc, [ip, #1416]!	; 0x588

00000ae8 <sendto_one_notice@plt>:
 ae8:	add	ip, pc, #0, 12
 aec:	add	ip, ip, #69632	; 0x11000
 af0:	ldr	pc, [ip, #1408]!	; 0x580

00000af4 <rb_strlcpy@plt>:
 af4:	add	ip, pc, #0, 12
 af8:	add	ip, ip, #69632	; 0x11000
 afc:	ldr	pc, [ip, #1400]!	; 0x578

00000b00 <find_oper_conf@plt>:
 b00:	add	ip, pc, #0, 12
 b04:	add	ip, ip, #69632	; 0x11000
 b08:	ldr	pc, [ip, #1392]!	; 0x570

00000b0c <oper_up@plt>:
 b0c:	add	ip, pc, #0, 12
 b10:	add	ip, ip, #69632	; 0x11000
 b14:	ldr	pc, [ip, #1384]!	; 0x568

00000b18 <rb_base64_encode@plt>:
 b18:	add	ip, pc, #0, 12
 b1c:	add	ip, ip, #69632	; 0x11000
 b20:	ldr	pc, [ip, #1376]!	; 0x560

00000b24 <SHA1_Final@plt>:
 b24:	add	ip, pc, #0, 12
 b28:	add	ip, ip, #69632	; 0x11000
 b2c:	ldr	pc, [ip, #1368]!	; 0x558

Disassembly of section .text:

00000b30 <call_weak_fn>:
     b30:	ldr	r3, [pc, #20]	; b4c <call_weak_fn+0x1c>
     b34:	ldr	r2, [pc, #20]	; b50 <call_weak_fn+0x20>
     b38:	add	r3, pc, r3
     b3c:	ldr	r2, [r3, r2]
     b40:	cmp	r2, #0
     b44:	bxeq	lr
     b48:	b	a70 <__gmon_start__@plt>
     b4c:	.word	0x000114c0
     b50:	.word	0x00000090

00000b54 <deregister_tm_clones>:
     b54:	ldr	r0, [pc, #44]	; b88 <deregister_tm_clones+0x34>
     b58:	ldr	r3, [pc, #44]	; b8c <deregister_tm_clones+0x38>
     b5c:	add	r0, pc, r0
     b60:	add	r3, pc, r3
     b64:	cmp	r3, r0
     b68:	ldr	r3, [pc, #32]	; b90 <deregister_tm_clones+0x3c>
     b6c:	add	r3, pc, r3
     b70:	bxeq	lr
     b74:	ldr	r2, [pc, #24]	; b94 <deregister_tm_clones+0x40>
     b78:	ldr	r3, [r3, r2]
     b7c:	cmp	r3, #0
     b80:	bxeq	lr
     b84:	bx	r3
     b88:	.word	0x000115b4
     b8c:	.word	0x000115b0
     b90:	.word	0x0001148c
     b94:	.word	0x0000008c

00000b98 <register_tm_clones>:
     b98:	ldr	r0, [pc, #56]	; bd8 <register_tm_clones+0x40>
     b9c:	ldr	r3, [pc, #56]	; bdc <register_tm_clones+0x44>
     ba0:	add	r0, pc, r0
     ba4:	add	r3, pc, r3
     ba8:	sub	r1, r3, r0
     bac:	ldr	r3, [pc, #44]	; be0 <register_tm_clones+0x48>
     bb0:	asr	r1, r1, #2
     bb4:	add	r3, pc, r3
     bb8:	add	r1, r1, r1, lsr #31
     bbc:	asrs	r1, r1, #1
     bc0:	bxeq	lr
     bc4:	ldr	r2, [pc, #24]	; be4 <register_tm_clones+0x4c>
     bc8:	ldr	r3, [r3, r2]
     bcc:	cmp	r3, #0
     bd0:	bxeq	lr
     bd4:	bx	r3
     bd8:	.word	0x00011570
     bdc:	.word	0x0001156c
     be0:	.word	0x00011444
     be4:	.word	0x00000094

00000be8 <__do_global_dtors_aux>:
     be8:	ldr	r3, [pc, #76]	; c3c <__do_global_dtors_aux+0x54>
     bec:	ldr	r2, [pc, #76]	; c40 <__do_global_dtors_aux+0x58>
     bf0:	add	r3, pc, r3
     bf4:	add	r2, pc, r2
     bf8:	ldrb	r3, [r3]
     bfc:	cmp	r3, #0
     c00:	bxne	lr
     c04:	ldr	r3, [pc, #56]	; c44 <__do_global_dtors_aux+0x5c>
     c08:	push	{r4, lr}
     c0c:	ldr	r3, [r2, r3]
     c10:	cmp	r3, #0
     c14:	beq	c24 <__do_global_dtors_aux+0x3c>
     c18:	ldr	r3, [pc, #40]	; c48 <__do_global_dtors_aux+0x60>
     c1c:	ldr	r0, [pc, r3]
     c20:	bl	9d4 <__cxa_finalize@plt>
     c24:	bl	b54 <deregister_tm_clones>
     c28:	ldr	r3, [pc, #28]	; c4c <__do_global_dtors_aux+0x64>
     c2c:	mov	r2, #1
     c30:	add	r3, pc, r3
     c34:	strb	r2, [r3]
     c38:	pop	{r4, pc}
     c3c:	.word	0x00011520
     c40:	.word	0x00011404
     c44:	.word	0x00000088
     c48:	.word	0x0001147c
     c4c:	.word	0x000114e0

00000c50 <frame_dummy>:
     c50:	b	b98 <register_tm_clones>

00000c54 <m_challenge>:
     c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c58:	add	fp, sp, #28
     c5c:	sub	sp, sp, #532	; 0x214
     c60:	mov	r0, #0
     c64:	mov	r4, r2
     c68:	str	r0, [sp, #20]
     c6c:	ldrb	r0, [r2, #57]	; 0x39
     c70:	tst	r0, #16
     c74:	bne	d48 <m_challenge+0xf4>
     c78:	ldr	r6, [fp, #8]
     c7c:	ldr	r0, [r6, #4]
     c80:	ldrb	r0, [r0]
     c84:	cmp	r0, #43	; 0x2b
     c88:	bne	d74 <m_challenge+0x120>
     c8c:	ldr	r0, [r4, #432]	; 0x1b0
     c90:	ldr	r0, [r0, #284]	; 0x11c
     c94:	cmp	r0, #0
     c98:	beq	1288 <m_challenge+0x634>
     c9c:	bl	9c8 <rb_current_time@plt>
     ca0:	ldr	r1, [r4, #432]	; 0x1b0
     ca4:	ldr	r1, [r1, #304]	; 0x130
     ca8:	sub	r0, r0, r1
     cac:	cmp	r0, #181	; 0xb5
     cb0:	blt	e8c <m_challenge+0x238>
     cb4:	ldr	r0, [pc, #1596]	; 12f8 <m_challenge+0x6a4>
     cb8:	add	r5, r4, #88	; 0x58
     cbc:	mov	r3, r5
     cc0:	ldr	r0, [pc, r0]
     cc4:	ldr	r1, [pc, #1584]	; 12fc <m_challenge+0x6a8>
     cc8:	add	r2, r0, #88	; 0x58
     ccc:	add	r1, pc, r1
     cd0:	mov	r0, r4
     cd4:	bl	9ec <sendto_one@plt>
     cd8:	ldr	r1, [r4, #24]
     cdc:	movw	r0, #291	; 0x123
     ce0:	add	r6, r4, #163	; 0xa3
     ce4:	add	r7, r4, #152	; 0x98
     ce8:	mov	r3, r5
     cec:	add	r0, r4, r0
     cf0:	ldr	r2, [r1, #32]
     cf4:	str	r0, [sp, #8]
     cf8:	str	r7, [sp]
     cfc:	str	r6, [sp, #4]
     d00:	mov	r0, #4
     d04:	ldr	r1, [pc, #1524]	; 1300 <m_challenge+0x6ac>
     d08:	add	r1, pc, r1
     d0c:	bl	ac4 <ilog@plt>
     d10:	ldr	r0, [pc, #1516]	; 1304 <m_challenge+0x6b0>
     d14:	ldr	r0, [pc, r0]
     d18:	ldr	r0, [r0, #84]	; 0x54
     d1c:	cmp	r0, #0
     d20:	beq	f74 <m_challenge+0x320>
     d24:	str	r7, [sp]
     d28:	str	r6, [sp, #4]
     d2c:	mov	r0, #256	; 0x100
     d30:	mov	r1, #256	; 0x100
     d34:	mov	r3, r5
     d38:	ldr	r2, [pc, #1480]	; 1308 <m_challenge+0x6b4>
     d3c:	add	r2, pc, r2
     d40:	bl	a34 <sendto_realops_snomask@plt>
     d44:	b	f74 <m_challenge+0x320>
     d48:	ldr	r0, [pc, #1440]	; 12f0 <m_challenge+0x69c>
     d4c:	add	r3, r4, #88	; 0x58
     d50:	ldr	r0, [pc, r0]
     d54:	ldr	r1, [pc, #1432]	; 12f4 <m_challenge+0x6a0>
     d58:	add	r2, r0, #88	; 0x58
     d5c:	add	r1, pc, r1
     d60:	mov	r0, r4
     d64:	bl	9ec <sendto_one@plt>
     d68:	mov	r0, r4
     d6c:	bl	a88 <send_oper_motd@plt>
     d70:	b	1288 <m_challenge+0x634>
     d74:	mov	r0, r4
     d78:	bl	1378 <cleanup_challenge>
     d7c:	ldr	r3, [r6, #4]
     d80:	movw	r0, #291	; 0x123
     d84:	add	r5, r4, #152	; 0x98
     d88:	add	r1, r4, #227	; 0xe3
     d8c:	add	r7, r4, r0
     d90:	mov	r0, r5
     d94:	mov	r2, r7
     d98:	bl	b00 <find_oper_conf@plt>
     d9c:	cmp	r0, #0
     da0:	beq	e28 <m_challenge+0x1d4>
     da4:	ldr	r8, [r0, #40]	; 0x28
     da8:	mov	r9, r0
     dac:	cmp	r8, #0
     db0:	beq	1010 <m_challenge+0x3bc>
     db4:	ldrb	r0, [r9, #22]
     db8:	tst	r0, #8
     dbc:	beq	f80 <m_challenge+0x32c>
     dc0:	ldrb	r0, [r4, #57]	; 0x39
     dc4:	tst	r0, #64	; 0x40
     dc8:	bne	f80 <m_challenge+0x32c>
     dcc:	ldr	r2, [pc, #1392]	; 1344 <m_challenge+0x6f0>
     dd0:	mov	r0, r4
     dd4:	movw	r1, #491	; 0x1eb
     dd8:	add	r2, pc, r2
     ddc:	bl	a94 <sendto_one_numeric@plt>
     de0:	ldr	r2, [r6, #4]
     de4:	add	r6, r4, #163	; 0xa3
     de8:	add	r4, r4, #88	; 0x58
     dec:	mov	r0, #4
     df0:	stm	sp, {r5, r6, r7}
     df4:	mov	r3, r4
     df8:	ldr	r1, [pc, #1352]	; 1348 <m_challenge+0x6f4>
     dfc:	add	r1, pc, r1
     e00:	bl	ac4 <ilog@plt>
     e04:	ldr	r0, [pc, #1344]	; 134c <m_challenge+0x6f8>
     e08:	ldr	r0, [pc, r0]
     e0c:	ldr	r0, [r0, #84]	; 0x54
     e10:	cmp	r0, #0
     e14:	beq	1288 <m_challenge+0x634>
     e18:	stm	sp, {r5, r6}
     e1c:	ldr	r2, [pc, #1324]	; 1350 <m_challenge+0x6fc>
     e20:	add	r2, pc, r2
     e24:	b	ffc <m_challenge+0x3a8>
     e28:	ldr	r2, [pc, #1284]	; 1334 <m_challenge+0x6e0>
     e2c:	mov	r0, r4
     e30:	movw	r1, #491	; 0x1eb
     e34:	add	r2, pc, r2
     e38:	bl	a94 <sendto_one_numeric@plt>
     e3c:	ldr	r2, [r6, #4]
     e40:	add	r6, r4, #163	; 0xa3
     e44:	add	r4, r4, #88	; 0x58
     e48:	mov	r0, #4
     e4c:	stm	sp, {r5, r6, r7}
     e50:	mov	r3, r4
     e54:	ldr	r1, [pc, #1244]	; 1338 <m_challenge+0x6e4>
     e58:	add	r1, pc, r1
     e5c:	bl	ac4 <ilog@plt>
     e60:	ldr	r0, [pc, #1236]	; 133c <m_challenge+0x6e8>
     e64:	ldr	r0, [pc, r0]
     e68:	ldr	r0, [r0, #84]	; 0x54
     e6c:	cmp	r0, #0
     e70:	beq	1288 <m_challenge+0x634>
     e74:	stm	sp, {r5, r6}
     e78:	ldr	r2, [pc, #1196]	; 132c <m_challenge+0x6d8>
     e7c:	mov	r0, #256	; 0x100
     e80:	mov	r1, #256	; 0x100
     e84:	add	r2, pc, r2
     e88:	b	1004 <m_challenge+0x3b0>
     e8c:	ldr	r0, [r6, #4]
     e90:	add	r5, r0, #1
     e94:	mov	r0, r5
     e98:	str	r5, [r6, #4]
     e9c:	bl	aa0 <strlen@plt>
     ea0:	mov	r1, r0
     ea4:	add	r2, sp, #20
     ea8:	mov	r0, r5
     eac:	bl	a40 <rb_base64_decode@plt>
     eb0:	mov	r8, r0
     eb4:	ldr	r0, [sp, #20]
     eb8:	cmp	r0, #20
     ebc:	bne	edc <m_challenge+0x288>
     ec0:	ldr	r0, [r4, #432]	; 0x1b0
     ec4:	mov	r1, r8
     ec8:	mov	r2, #20
     ecc:	ldr	r0, [r0, #284]	; 0x11c
     ed0:	bl	a28 <memcmp@plt>
     ed4:	cmp	r0, #0
     ed8:	beq	101c <m_challenge+0x3c8>
     edc:	ldr	r0, [pc, #1064]	; 130c <m_challenge+0x6b8>
     ee0:	add	r6, r4, #88	; 0x58
     ee4:	mov	r3, r6
     ee8:	ldr	r0, [pc, r0]
     eec:	ldr	r1, [pc, #1052]	; 1310 <m_challenge+0x6bc>
     ef0:	add	r2, r0, #88	; 0x58
     ef4:	add	r1, pc, r1
     ef8:	mov	r0, r4
     efc:	bl	9ec <sendto_one@plt>
     f00:	ldr	r1, [r4, #24]
     f04:	movw	r0, #291	; 0x123
     f08:	add	r7, r4, #163	; 0xa3
     f0c:	add	r5, r4, #152	; 0x98
     f10:	mov	r3, r6
     f14:	add	r0, r4, r0
     f18:	ldr	r2, [r1, #32]
     f1c:	stm	sp, {r5, r7}
     f20:	str	r0, [sp, #8]
     f24:	mov	r0, #4
     f28:	ldr	r1, [pc, #996]	; 1314 <m_challenge+0x6c0>
     f2c:	add	r1, pc, r1
     f30:	bl	ac4 <ilog@plt>
     f34:	ldr	r0, [pc, #988]	; 1318 <m_challenge+0x6c4>
     f38:	ldr	r0, [pc, r0]
     f3c:	ldr	r0, [r0, #84]	; 0x54
     f40:	cmp	r0, #0
     f44:	beq	f64 <m_challenge+0x310>
     f48:	stm	sp, {r5, r7}
     f4c:	mov	r0, #256	; 0x100
     f50:	mov	r1, #256	; 0x100
     f54:	mov	r3, r6
     f58:	ldr	r2, [pc, #956]	; 131c <m_challenge+0x6c8>
     f5c:	add	r2, pc, r2
     f60:	bl	a34 <sendto_realops_snomask@plt>
     f64:	cmp	r8, #0
     f68:	beq	f74 <m_challenge+0x320>
     f6c:	mov	r0, r8
     f70:	bl	9f8 <free@plt>
     f74:	mov	r0, r4
     f78:	bl	1378 <cleanup_challenge>
     f7c:	b	1288 <m_challenge+0x634>
     f80:	ldr	r1, [r9, #16]
     f84:	cmp	r1, #0
     f88:	beq	10a0 <m_challenge+0x44c>
     f8c:	ldr	r0, [r4, #444]	; 0x1bc
     f90:	cmp	r0, #0
     f94:	beq	fa4 <m_challenge+0x350>
     f98:	bl	a04 <rb_strcasecmp@plt>
     f9c:	cmp	r0, #0
     fa0:	beq	109c <m_challenge+0x448>
     fa4:	ldr	r2, [pc, #936]	; 1354 <m_challenge+0x700>
     fa8:	mov	r0, r4
     fac:	movw	r1, #491	; 0x1eb
     fb0:	add	r2, pc, r2
     fb4:	bl	a94 <sendto_one_numeric@plt>
     fb8:	ldr	r2, [r6, #4]
     fbc:	add	r6, r4, #163	; 0xa3
     fc0:	add	r4, r4, #88	; 0x58
     fc4:	mov	r0, #4
     fc8:	stm	sp, {r5, r6, r7}
     fcc:	mov	r3, r4
     fd0:	ldr	r1, [pc, #896]	; 1358 <m_challenge+0x704>
     fd4:	add	r1, pc, r1
     fd8:	bl	ac4 <ilog@plt>
     fdc:	ldr	r0, [pc, #888]	; 135c <m_challenge+0x708>
     fe0:	ldr	r0, [pc, r0]
     fe4:	ldr	r0, [r0, #84]	; 0x54
     fe8:	cmp	r0, #0
     fec:	beq	1288 <m_challenge+0x634>
     ff0:	stm	sp, {r5, r6}
     ff4:	ldr	r2, [pc, #868]	; 1360 <m_challenge+0x70c>
     ff8:	add	r2, pc, r2
     ffc:	mov	r0, #256	; 0x100
    1000:	mov	r1, #0
    1004:	mov	r3, r4
    1008:	bl	a34 <sendto_realops_snomask@plt>
    100c:	b	1288 <m_challenge+0x634>
    1010:	ldr	r1, [pc, #808]	; 1340 <m_challenge+0x6ec>
    1014:	add	r1, pc, r1
    1018:	b	1280 <m_challenge+0x62c>
    101c:	cmp	r8, #0
    1020:	beq	102c <m_challenge+0x3d8>
    1024:	mov	r0, r8
    1028:	bl	9f8 <free@plt>
    102c:	movw	r0, #291	; 0x123
    1030:	add	r5, r4, #152	; 0x98
    1034:	add	r1, r4, #227	; 0xe3
    1038:	add	r6, r4, r0
    103c:	ldr	r0, [r4, #24]
    1040:	mov	r2, r6
    1044:	ldr	r3, [r0, #32]
    1048:	mov	r0, r5
    104c:	bl	b00 <find_oper_conf@plt>
    1050:	cmp	r0, #0
    1054:	beq	1290 <m_challenge+0x63c>
    1058:	mov	r7, r0
    105c:	mov	r0, r4
    1060:	bl	1378 <cleanup_challenge>
    1064:	mov	r0, r4
    1068:	mov	r1, r7
    106c:	bl	b0c <oper_up@plt>
    1070:	ldr	r0, [r4, #24]
    1074:	add	r3, r4, #88	; 0x58
    1078:	ldr	r2, [r0, #32]
    107c:	add	r0, r4, #163	; 0xa3
    1080:	str	r5, [sp]
    1084:	stmib	sp, {r0, r6}
    1088:	mov	r0, #3
    108c:	ldr	r1, [pc, #668]	; 1330 <m_challenge+0x6dc>
    1090:	add	r1, pc, r1
    1094:	bl	ac4 <ilog@plt>
    1098:	b	1288 <m_challenge+0x634>
    109c:	ldr	r8, [r9, #40]	; 0x28
    10a0:	cmp	r8, #0
    10a4:	beq	1278 <m_challenge+0x624>
    10a8:	ldr	sl, [r4, #432]	; 0x1b0
    10ac:	add	r0, sp, #27
    10b0:	mov	r1, #128	; 0x80
    10b4:	bl	a64 <rb_get_random@plt>
    10b8:	cmp	r0, #0
    10bc:	beq	122c <m_challenge+0x5d8>
    10c0:	sub	r6, fp, #128	; 0x80
    10c4:	mov	r0, r6
    10c8:	bl	ad0 <SHA1_Init@plt>
    10cc:	add	r1, sp, #27
    10d0:	mov	r0, r6
    10d4:	mov	r2, #128	; 0x80
    10d8:	bl	aac <SHA1_Update@plt>
    10dc:	mov	r0, #20
    10e0:	bl	a58 <malloc@plt>
    10e4:	mov	r1, r6
    10e8:	str	r0, [sl, #284]	; 0x11c
    10ec:	bl	b24 <SHA1_Final@plt>
    10f0:	mov	r0, r8
    10f4:	bl	a10 <RSA_size@plt>
    10f8:	mov	r1, r0
    10fc:	mov	r0, #1
    1100:	bl	9bc <calloc@plt>
    1104:	cmp	r0, #0
    1108:	beq	12ec <m_challenge+0x698>
    110c:	mov	r7, r0
    1110:	mov	r0, #4
    1114:	add	r5, sp, #27
    1118:	mov	r3, r8
    111c:	str	r0, [sp]
    1120:	mov	r0, #128	; 0x80
    1124:	mov	r1, r5
    1128:	mov	r2, r7
    112c:	bl	9e0 <RSA_public_encrypt@plt>
    1130:	cmn	r0, #1
    1134:	ble	120c <m_challenge+0x5b8>
    1138:	mov	r1, r0
    113c:	mov	r0, r7
    1140:	bl	b18 <rb_base64_encode@plt>
    1144:	mov	r8, r0
    1148:	mov	r0, r7
    114c:	bl	9f8 <free@plt>
    1150:	bl	9c8 <rb_current_time@plt>
    1154:	ldr	r1, [r4, #432]	; 0x1b0
    1158:	add	r7, r4, #88	; 0x58
    115c:	str	r0, [r1, #304]	; 0x130
    1160:	ldr	r0, [pc, #516]	; 136c <m_challenge+0x718>
    1164:	ldr	r0, [pc, r0]
    1168:	str	r8, [sp, #16]
    116c:	add	r6, r0, #88	; 0x58
    1170:	mov	r0, r5
    1174:	mov	r1, r8
    1178:	movw	r2, #405	; 0x195
    117c:	bl	af4 <rb_strlcpy@plt>
    1180:	str	r5, [sp]
    1184:	mov	sl, r0
    1188:	mov	r0, r4
    118c:	mov	r2, r6
    1190:	mov	r3, r7
    1194:	ldr	r1, [pc, #468]	; 1370 <m_challenge+0x71c>
    1198:	add	r1, pc, r1
    119c:	bl	9ec <sendto_one@plt>
    11a0:	lsr	r0, sl, #1
    11a4:	add	r8, r8, #404	; 0x194
    11a8:	cmp	r0, #202	; 0xca
    11ac:	bhi	1170 <m_challenge+0x51c>
    11b0:	ldr	r1, [pc, #444]	; 1374 <m_challenge+0x720>
    11b4:	mov	r0, r4
    11b8:	mov	r2, r6
    11bc:	mov	r3, r7
    11c0:	add	r1, pc, r1
    11c4:	bl	9ec <sendto_one@plt>
    11c8:	ldr	r0, [sp, #16]
    11cc:	cmp	r0, #0
    11d0:	beq	11d8 <m_challenge+0x584>
    11d4:	bl	9f8 <free@plt>
    11d8:	ldr	r5, [r9]
    11dc:	mov	r0, r5
    11e0:	bl	aa0 <strlen@plt>
    11e4:	add	r0, r0, #1
    11e8:	bl	a58 <malloc@plt>
    11ec:	cmp	r0, #0
    11f0:	beq	12ec <m_challenge+0x698>
    11f4:	mov	r1, r5
    11f8:	mov	r6, r0
    11fc:	bl	a4c <strcpy@plt>
    1200:	ldr	r0, [r4, #24]
    1204:	str	r6, [r0, #32]
    1208:	b	1288 <m_challenge+0x634>
    120c:	mov	r0, r7
    1210:	bl	9f8 <free@plt>
    1214:	ldr	r0, [sl, #284]	; 0x11c
    1218:	cmp	r0, #0
    121c:	beq	1224 <m_challenge+0x5d0>
    1220:	bl	9f8 <free@plt>
    1224:	mov	r0, #0
    1228:	str	r0, [sl, #284]	; 0x11c
    122c:	mov	r0, #2
    1230:	mov	r1, #0
    1234:	mov	r2, #0
    1238:	mov	r6, #0
    123c:	bl	a7c <OPENSSL_init_crypto@plt>
    1240:	ldr	r5, [pc, #284]	; 1364 <m_challenge+0x710>
    1244:	add	r5, pc, r5
    1248:	bl	adc <ERR_get_error@plt>
    124c:	cmp	r0, #0
    1250:	beq	1278 <m_challenge+0x624>
    1254:	mov	r1, #0
    1258:	bl	ab8 <ERR_error_string@plt>
    125c:	mov	r2, r0
    1260:	mov	r0, #0
    1264:	mov	r1, r5
    1268:	bl	ac4 <ilog@plt>
    126c:	add	r6, r6, #1
    1270:	cmp	r6, #100	; 0x64
    1274:	bcc	1248 <m_challenge+0x5f4>
    1278:	ldr	r1, [pc, #232]	; 1368 <m_challenge+0x714>
    127c:	add	r1, pc, r1
    1280:	mov	r0, r4
    1284:	bl	ae8 <sendto_one_notice@plt>
    1288:	sub	sp, fp, #28
    128c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1290:	ldr	r2, [pc, #136]	; 1320 <m_challenge+0x6cc>
    1294:	mov	r0, r4
    1298:	movw	r1, #491	; 0x1eb
    129c:	add	r2, pc, r2
    12a0:	bl	a94 <sendto_one_numeric@plt>
    12a4:	ldr	r0, [r4, #24]
    12a8:	add	r7, r4, #163	; 0xa3
    12ac:	add	r4, r4, #88	; 0x58
    12b0:	mov	r3, r4
    12b4:	ldr	r2, [r0, #32]
    12b8:	stm	sp, {r5, r7}
    12bc:	str	r6, [sp, #8]
    12c0:	mov	r0, #4
    12c4:	ldr	r1, [pc, #88]	; 1324 <m_challenge+0x6d0>
    12c8:	add	r1, pc, r1
    12cc:	bl	ac4 <ilog@plt>
    12d0:	ldr	r0, [pc, #80]	; 1328 <m_challenge+0x6d4>
    12d4:	ldr	r0, [pc, r0]
    12d8:	ldr	r0, [r0, #84]	; 0x54
    12dc:	cmp	r0, #0
    12e0:	beq	1288 <m_challenge+0x634>
    12e4:	stm	sp, {r5, r7}
    12e8:	b	e78 <m_challenge+0x224>
    12ec:	bl	a1c <rb_outofmemory@plt>
    12f0:	.word	0x00011340
    12f4:	.word	0x00000678
    12f8:	.word	0x000113d0
    12fc:	.word	0x00000794
    1300:	.word	0x00000777
    1304:	.word	0x00011380
    1308:	.word	0x0000076d
    130c:	.word	0x000111a8
    1310:	.word	0x0000056c
    1314:	.word	0x000005a5
    1318:	.word	0x0001115c
    131c:	.word	0x0000059e
    1320:	.word	0x00000285
    1324:	.word	0x00000292
    1328:	.word	0x00010dc0
    132c:	.word	0x000006fa
    1330:	.word	0x00000525
    1334:	.word	0x000006ed
    1338:	.word	0x00000702
    133c:	.word	0x00011230
    1340:	.word	0x000005ba
    1344:	.word	0x00000749
    1348:	.word	0x00000816
    134c:	.word	0x0001128c
    1350:	.word	0x0000082f
    1354:	.word	0x00000571
    1358:	.word	0x000006b4
    135c:	.word	0x000110b4
    1360:	.word	0x000006df
    1364:	.word	0x0000052a
    1368:	.word	0x000004d3
    136c:	.word	0x00010f2c
    1370:	.word	0x0000058b
    1374:	.word	0x00000572

00001378 <cleanup_challenge>:
    1378:	push	{r4, sl, fp, lr}
    137c:	add	fp, sp, #8
    1380:	mov	r4, r0
    1384:	ldr	r0, [r0, #432]	; 0x1b0
    1388:	cmp	r0, #0
    138c:	popeq	{r4, sl, fp, pc}
    1390:	ldr	r0, [r0, #284]	; 0x11c
    1394:	cmp	r0, #0
    1398:	beq	13a0 <cleanup_challenge+0x28>
    139c:	bl	9f8 <free@plt>
    13a0:	ldr	r1, [r4, #24]
    13a4:	ldr	r0, [r1, #32]!
    13a8:	cmp	r0, #0
    13ac:	beq	13bc <cleanup_challenge+0x44>
    13b0:	bl	9f8 <free@plt>
    13b4:	ldr	r0, [r4, #24]
    13b8:	add	r1, r0, #32
    13bc:	ldr	r0, [r4, #432]	; 0x1b0
    13c0:	mov	r2, #0
    13c4:	str	r2, [r0, #284]	; 0x11c
    13c8:	str	r2, [r1]
    13cc:	str	r2, [r0, #304]	; 0x130
    13d0:	pop	{r4, sl, fp, pc}

Disassembly of section .fini:

000013d4 <_fini>:
    13d4:	push	{r3, lr}
    13d8:	pop	{r3, pc}
