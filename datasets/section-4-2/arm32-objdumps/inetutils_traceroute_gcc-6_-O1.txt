
../repos/inetutils/src/traceroute:     file format elf32-littlearm


Disassembly of section .init:

00010fc0 <.init>:
   10fc0:	push	{r3, lr}
   10fc4:	bl	11314 <__assert_fail@plt+0x4c>
   10fc8:	pop	{r3, pc}

Disassembly of section .plt:

00010fcc <calloc@plt-0x14>:
   10fcc:	push	{lr}		; (str lr, [sp, #-4]!)
   10fd0:	ldr	lr, [pc, #4]	; 10fdc <calloc@plt-0x4>
   10fd4:	add	lr, pc, lr
   10fd8:	ldr	pc, [lr, #8]!
   10fdc:	andeq	sl, r1, r4, lsr #32

00010fe0 <calloc@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #106496	; 0x1a000
   10fe8:	ldr	pc, [ip, #36]!	; 0x24

00010fec <fputs_unlocked@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #106496	; 0x1a000
   10ff4:	ldr	pc, [ip, #28]!

00010ff8 <raise@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #106496	; 0x1a000
   11000:	ldr	pc, [ip, #20]!

00011004 <strcmp@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #106496	; 0x1a000
   1100c:	ldr	pc, [ip, #12]!

00011010 <strtol@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #106496	; 0x1a000
   11018:	ldr	pc, [ip, #4]!

0001101c <setsockopt@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #4092]!	; 0xffc

00011028 <printf@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #4084]!	; 0xff4

00011034 <getprotobyname@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #4076]!	; 0xfec

00011040 <fflush@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #4068]!	; 0xfe4

0001104c <memmove@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #4060]!	; 0xfdc

00011058 <strchrnul@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #4052]!	; 0xfd4

00011064 <free@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011070 <gai_strerror@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #4036]!	; 0xfc4

0001107c <strndup@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #4028]!	; 0xfbc

00011088 <memcpy@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #4020]!	; 0xfb4

00011094 <fwrite_unlocked@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #4012]!	; 0xfac

000110a0 <inet_ntoa@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110ac <select@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #102400	; 0x19000
   110b4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110b8 <sleep@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #102400	; 0x19000
   110c0:	ldr	pc, [ip, #3988]!	; 0xf94

000110c4 <gethostbyaddr@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #102400	; 0x19000
   110cc:	ldr	pc, [ip, #3980]!	; 0xf8c

000110d0 <recvfrom@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #102400	; 0x19000
   110d8:	ldr	pc, [ip, #3972]!	; 0xf84

000110dc <realloc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #102400	; 0x19000
   110e4:	ldr	pc, [ip, #3964]!	; 0xf7c

000110e8 <strcasecmp@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #102400	; 0x19000
   110f0:	ldr	pc, [ip, #3956]!	; 0xf74

000110f4 <funlockfile@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #102400	; 0x19000
   110fc:	ldr	pc, [ip, #3948]!	; 0xf6c

00011100 <fwrite@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #102400	; 0x19000
   11108:	ldr	pc, [ip, #3940]!	; 0xf64

0001110c <strcat@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #102400	; 0x19000
   11114:	ldr	pc, [ip, #3932]!	; 0xf5c

00011118 <gettimeofday@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #102400	; 0x19000
   11120:	ldr	pc, [ip, #3924]!	; 0xf54

00011124 <error@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #102400	; 0x19000
   1112c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011130 <getenv@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #102400	; 0x19000
   11138:	ldr	pc, [ip, #3908]!	; 0xf44

0001113c <malloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #102400	; 0x19000
   11144:	ldr	pc, [ip, #3900]!	; 0xf3c

00011148 <__libc_start_main@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #102400	; 0x19000
   11150:	ldr	pc, [ip, #3892]!	; 0xf34

00011154 <strerror@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #102400	; 0x19000
   1115c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011160 <__ctype_tolower_loc@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #102400	; 0x19000
   11168:	ldr	pc, [ip, #3876]!	; 0xf24

0001116c <__gmon_start__@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #102400	; 0x19000
   11174:	ldr	pc, [ip, #3868]!	; 0xf1c

00011178 <mempcpy@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #102400	; 0x19000
   11180:	ldr	pc, [ip, #3860]!	; 0xf14

00011184 <__ctype_b_loc@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #102400	; 0x19000
   1118c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011190 <getpid@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #102400	; 0x19000
   11198:	ldr	pc, [ip, #3844]!	; 0xf04

0001119c <exit@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #102400	; 0x19000
   111a4:	ldr	pc, [ip, #3836]!	; 0xefc

000111a8 <strlen@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #102400	; 0x19000
   111b0:	ldr	pc, [ip, #3828]!	; 0xef4

000111b4 <strchr@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #102400	; 0x19000
   111bc:	ldr	pc, [ip, #3820]!	; 0xeec

000111c0 <fprintf@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #102400	; 0x19000
   111c8:	ldr	pc, [ip, #3812]!	; 0xee4

000111cc <__errno_location@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #102400	; 0x19000
   111d4:	ldr	pc, [ip, #3804]!	; 0xedc

000111d8 <strerror_r@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #102400	; 0x19000
   111e0:	ldr	pc, [ip, #3796]!	; 0xed4

000111e4 <memset@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #102400	; 0x19000
   111ec:	ldr	pc, [ip, #3788]!	; 0xecc

000111f0 <putchar@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #102400	; 0x19000
   111f8:	ldr	pc, [ip, #3780]!	; 0xec4

000111fc <memchr@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #102400	; 0x19000
   11204:	ldr	pc, [ip, #3772]!	; 0xebc

00011208 <sendto@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #102400	; 0x19000
   11210:	ldr	pc, [ip, #3764]!	; 0xeb4

00011214 <__overflow@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3756]!	; 0xeac

00011220 <setlocale@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3748]!	; 0xea4

0001122c <getnameinfo@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3740]!	; 0xe9c

00011238 <strrchr@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3732]!	; 0xe94

00011244 <vfprintf@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011250 <fputc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3716]!	; 0xe84

0001125c <flockfile@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3708]!	; 0xe7c

00011268 <vsnprintf@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3700]!	; 0xe74

00011274 <qsort@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011280 <strpbrk@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3684]!	; 0xe64

0001128c <freeaddrinfo@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3676]!	; 0xe5c

00011298 <getaddrinfo@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3668]!	; 0xe54

000112a4 <socket@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3660]!	; 0xe4c

000112b0 <strncmp@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3652]!	; 0xe44

000112bc <abort@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3644]!	; 0xe3c

000112c8 <__assert_fail@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3636]!	; 0xe34

Disassembly of section .text:

000112d8 <argp_failure@@Base-0x320c>:
   112d8:	mov	fp, #0
   112dc:	mov	lr, #0
   112e0:	pop	{r1}		; (ldr r1, [sp], #4)
   112e4:	mov	r2, sp
   112e8:	push	{r2}		; (str r2, [sp, #-4]!)
   112ec:	push	{r0}		; (str r0, [sp, #-4]!)
   112f0:	ldr	ip, [pc, #16]	; 11308 <__assert_fail@plt+0x40>
   112f4:	push	{ip}		; (str ip, [sp, #-4]!)
   112f8:	ldr	r0, [pc, #12]	; 1130c <__assert_fail@plt+0x44>
   112fc:	ldr	r3, [pc, #12]	; 11310 <__assert_fail@plt+0x48>
   11300:	bl	11148 <__libc_start_main@plt>
   11304:	bl	112bc <abort@plt>
   11308:	andeq	r9, r1, ip, ror #2
   1130c:	andeq	r2, r1, r0, asr #10
   11310:	andeq	r9, r1, ip, lsl #2
   11314:	ldr	r3, [pc, #20]	; 11330 <__assert_fail@plt+0x68>
   11318:	ldr	r2, [pc, #20]	; 11334 <__assert_fail@plt+0x6c>
   1131c:	add	r3, pc, r3
   11320:	ldr	r2, [r3, r2]
   11324:	cmp	r2, #0
   11328:	bxeq	lr
   1132c:	b	1116c <__gmon_start__@plt>
   11330:	ldrdeq	r9, [r1], -ip
   11334:	andeq	r0, r0, r8, lsl #2
   11338:	ldr	r3, [pc, #28]	; 1135c <__assert_fail@plt+0x94>
   1133c:	ldr	r0, [pc, #28]	; 11360 <__assert_fail@plt+0x98>
   11340:	sub	r3, r3, r0
   11344:	cmp	r3, #6
   11348:	bxls	lr
   1134c:	ldr	r3, [pc, #16]	; 11364 <__assert_fail@plt+0x9c>
   11350:	cmp	r3, #0
   11354:	bxeq	lr
   11358:	bx	r3
   1135c:	muleq	r2, r7, r2
   11360:	muleq	r2, r4, r2
   11364:	andeq	r0, r0, r0
   11368:	ldr	r1, [pc, #36]	; 11394 <__assert_fail@plt+0xcc>
   1136c:	ldr	r0, [pc, #36]	; 11398 <__assert_fail@plt+0xd0>
   11370:	sub	r1, r1, r0
   11374:	asr	r1, r1, #2
   11378:	add	r1, r1, r1, lsr #31
   1137c:	asrs	r1, r1, #1
   11380:	bxeq	lr
   11384:	ldr	r3, [pc, #16]	; 1139c <__assert_fail@plt+0xd4>
   11388:	cmp	r3, #0
   1138c:	bxeq	lr
   11390:	bx	r3
   11394:	muleq	r2, r4, r2
   11398:	muleq	r2, r4, r2
   1139c:	andeq	r0, r0, r0
   113a0:	push	{r4, lr}
   113a4:	ldr	r4, [pc, #24]	; 113c4 <__assert_fail@plt+0xfc>
   113a8:	ldrb	r3, [r4]
   113ac:	cmp	r3, #0
   113b0:	popne	{r4, pc}
   113b4:	bl	11338 <__assert_fail@plt+0x70>
   113b8:	mov	r3, #1
   113bc:	strb	r3, [r4]
   113c0:	pop	{r4, pc}
   113c4:	andeq	fp, r2, r8, lsr #5
   113c8:	ldr	r0, [pc, #40]	; 113f8 <__assert_fail@plt+0x130>
   113cc:	ldr	r3, [r0]
   113d0:	cmp	r3, #0
   113d4:	bne	113dc <__assert_fail@plt+0x114>
   113d8:	b	11368 <__assert_fail@plt+0xa0>
   113dc:	ldr	r3, [pc, #24]	; 113fc <__assert_fail@plt+0x134>
   113e0:	cmp	r3, #0
   113e4:	beq	113d8 <__assert_fail@plt+0x110>
   113e8:	push	{r4, lr}
   113ec:	blx	r3
   113f0:	pop	{r4, lr}
   113f4:	b	11368 <__assert_fail@plt+0xa0>
   113f8:	andeq	sl, r2, ip, lsl #30
   113fc:	andeq	r0, r0, r0
   11400:	push	{r4, r5, r6, lr}
   11404:	sub	sp, sp, #8
   11408:	mov	r5, r1
   1140c:	cmp	r0, #109	; 0x6d
   11410:	beq	115c8 <__assert_fail@plt+0x300>
   11414:	mov	r4, r2
   11418:	ble	1144c <__assert_fail@plt+0x184>
   1141c:	cmp	r0, #116	; 0x74
   11420:	beq	1168c <__assert_fail@plt+0x3c4>
   11424:	ble	114f8 <__assert_fail@plt+0x230>
   11428:	cmp	r0, #256	; 0x100
   1142c:	beq	1177c <__assert_fail@plt+0x4b4>
   11430:	ldr	r3, [pc, #928]	; 117d8 <__assert_fail@plt+0x510>
   11434:	cmp	r0, r3
   11438:	beq	117b0 <__assert_fail@plt+0x4e8>
   1143c:	cmp	r0, #119	; 0x77
   11440:	beq	11730 <__assert_fail@plt+0x468>
   11444:	mov	r0, #7
   11448:	b	11478 <__assert_fail@plt+0x1b0>
   1144c:	cmp	r0, #77	; 0x4d
   11450:	beq	116d8 <__assert_fail@plt+0x410>
   11454:	bgt	11480 <__assert_fail@plt+0x1b8>
   11458:	cmp	r0, #0
   1145c:	beq	11790 <__assert_fail@plt+0x4c8>
   11460:	cmp	r0, #73	; 0x49
   11464:	bne	11444 <__assert_fail@plt+0x17c>
   11468:	mov	r2, #1
   1146c:	ldr	r3, [pc, #872]	; 117dc <__assert_fail@plt+0x514>
   11470:	str	r2, [r3, #4]
   11474:	mov	r0, #0
   11478:	add	sp, sp, #8
   1147c:	pop	{r4, r5, r6, pc}
   11480:	cmp	r0, #102	; 0x66
   11484:	beq	11560 <__assert_fail@plt+0x298>
   11488:	cmp	r0, #103	; 0x67
   1148c:	bne	11444 <__assert_fail@plt+0x17c>
   11490:	ldr	r3, [pc, #836]	; 117dc <__assert_fail@plt+0x514>
   11494:	ldr	r4, [r3]
   11498:	cmp	r4, #0
   1149c:	beq	115b0 <__assert_fail@plt+0x2e8>
   114a0:	mov	r0, r4
   114a4:	bl	111a8 <strlen@plt>
   114a8:	mov	r6, r0
   114ac:	mov	r0, r5
   114b0:	bl	111a8 <strlen@plt>
   114b4:	add	r1, r6, r0
   114b8:	add	r1, r1, #3
   114bc:	mov	r0, r4
   114c0:	bl	1729c <argp_parse@@Base+0x1210>
   114c4:	ldr	r3, [pc, #784]	; 117dc <__assert_fail@plt+0x514>
   114c8:	str	r0, [r3]
   114cc:	mov	r2, #44	; 0x2c
   114d0:	strb	r2, [r0, r6]
   114d4:	ldr	r0, [r3]
   114d8:	add	r0, r0, r6
   114dc:	mov	r4, #0
   114e0:	strb	r4, [r0, #1]
   114e4:	mov	r1, r5
   114e8:	ldr	r0, [r3]
   114ec:	bl	1110c <strcat@plt>
   114f0:	mov	r0, r4
   114f4:	b	11478 <__assert_fail@plt+0x1b0>
   114f8:	cmp	r0, #112	; 0x70
   114fc:	beq	11618 <__assert_fail@plt+0x350>
   11500:	cmp	r0, #113	; 0x71
   11504:	bne	11444 <__assert_fail@plt+0x17c>
   11508:	mov	r2, #10
   1150c:	add	r1, sp, #4
   11510:	mov	r0, r5
   11514:	bl	11010 <strtol@plt>
   11518:	ldr	r3, [pc, #704]	; 117e0 <__assert_fail@plt+0x518>
   1151c:	str	r0, [r3, #12]
   11520:	ldr	r3, [sp, #4]
   11524:	ldrb	r2, [r3]
   11528:	cmp	r2, #0
   1152c:	bne	11678 <__assert_fail@plt+0x3b0>
   11530:	ldr	r3, [pc, #680]	; 117e0 <__assert_fail@plt+0x518>
   11534:	ldr	r3, [r3, #12]
   11538:	sub	r3, r3, #1
   1153c:	cmp	r3, #9
   11540:	movls	r0, #0
   11544:	bls	11478 <__assert_fail@plt+0x1b0>
   11548:	ldr	r2, [pc, #660]	; 117e4 <__assert_fail@plt+0x51c>
   1154c:	mov	r1, #0
   11550:	mov	r0, #1
   11554:	bl	11124 <error@plt>
   11558:	mov	r0, #0
   1155c:	b	11478 <__assert_fail@plt+0x1b0>
   11560:	mov	r2, #0
   11564:	add	r1, sp, #4
   11568:	mov	r0, r5
   1156c:	bl	11010 <strtol@plt>
   11570:	ldr	r3, [pc, #616]	; 117e0 <__assert_fail@plt+0x518>
   11574:	str	r0, [r3]
   11578:	ldr	r3, [sp, #4]
   1157c:	ldrb	r3, [r3]
   11580:	sub	r0, r0, #1
   11584:	cmp	r0, #254	; 0xfe
   11588:	cmpls	r3, #0
   1158c:	moveq	r0, #0
   11590:	beq	11478 <__assert_fail@plt+0x1b0>
   11594:	mov	r3, r5
   11598:	ldr	r2, [pc, #584]	; 117e8 <__assert_fail@plt+0x520>
   1159c:	mov	r1, #0
   115a0:	mov	r0, #1
   115a4:	bl	11124 <error@plt>
   115a8:	mov	r0, #0
   115ac:	b	11478 <__assert_fail@plt+0x1b0>
   115b0:	mov	r0, r1
   115b4:	bl	177f0 <argp_parse@@Base+0x1764>
   115b8:	ldr	r3, [pc, #540]	; 117dc <__assert_fail@plt+0x514>
   115bc:	str	r0, [r3]
   115c0:	mov	r0, #0
   115c4:	b	11478 <__assert_fail@plt+0x1b0>
   115c8:	mov	r2, #0
   115cc:	add	r1, sp, #4
   115d0:	mov	r0, r5
   115d4:	bl	11010 <strtol@plt>
   115d8:	ldr	r3, [pc, #512]	; 117e0 <__assert_fail@plt+0x518>
   115dc:	str	r0, [r3, #4]
   115e0:	ldr	r3, [sp, #4]
   115e4:	ldrb	r3, [r3]
   115e8:	sub	r0, r0, #1
   115ec:	cmp	r0, #254	; 0xfe
   115f0:	cmpls	r3, #0
   115f4:	moveq	r0, #0
   115f8:	beq	11478 <__assert_fail@plt+0x1b0>
   115fc:	mov	r3, r5
   11600:	ldr	r2, [pc, #484]	; 117ec <__assert_fail@plt+0x524>
   11604:	mov	r1, #0
   11608:	mov	r0, #1
   1160c:	bl	11124 <error@plt>
   11610:	mov	r0, #0
   11614:	b	11478 <__assert_fail@plt+0x1b0>
   11618:	mov	r2, #0
   1161c:	add	r1, sp, #4
   11620:	mov	r0, r5
   11624:	bl	11010 <strtol@plt>
   11628:	ldr	r3, [pc, #432]	; 117e0 <__assert_fail@plt+0x518>
   1162c:	str	r0, [r3, #8]
   11630:	ldr	r3, [sp, #4]
   11634:	ldrb	r3, [r3]
   11638:	sub	r0, r0, #1
   1163c:	cmp	r0, #65536	; 0x10000
   11640:	movcc	r0, #0
   11644:	movcs	r0, #1
   11648:	cmp	r3, #0
   1164c:	orrne	r0, r0, #1
   11650:	cmp	r0, #0
   11654:	moveq	r0, #0
   11658:	beq	11478 <__assert_fail@plt+0x1b0>
   1165c:	mov	r3, r5
   11660:	ldr	r2, [pc, #392]	; 117f0 <__assert_fail@plt+0x528>
   11664:	mov	r1, #0
   11668:	mov	r0, #1
   1166c:	bl	11124 <error@plt>
   11670:	mov	r0, #0
   11674:	b	11478 <__assert_fail@plt+0x1b0>
   11678:	mov	r2, r5
   1167c:	ldr	r1, [pc, #368]	; 117f4 <__assert_fail@plt+0x52c>
   11680:	mov	r0, r4
   11684:	bl	15960 <argp_error@@Base>
   11688:	b	11530 <__assert_fail@plt+0x268>
   1168c:	mov	r2, #0
   11690:	add	r1, sp, #4
   11694:	mov	r0, r5
   11698:	bl	11010 <strtol@plt>
   1169c:	ldr	r3, [pc, #316]	; 117e0 <__assert_fail@plt+0x518>
   116a0:	str	r0, [r3, #16]
   116a4:	ldr	r3, [sp, #4]
   116a8:	ldrb	r3, [r3]
   116ac:	cmp	r0, #255	; 0xff
   116b0:	cmpls	r3, #0
   116b4:	moveq	r0, #0
   116b8:	beq	11478 <__assert_fail@plt+0x1b0>
   116bc:	mov	r3, r5
   116c0:	ldr	r2, [pc, #304]	; 117f8 <__assert_fail@plt+0x530>
   116c4:	mov	r1, #0
   116c8:	mov	r0, #1
   116cc:	bl	11124 <error@plt>
   116d0:	mov	r0, #0
   116d4:	b	11478 <__assert_fail@plt+0x1b0>
   116d8:	ldr	r1, [pc, #284]	; 117fc <__assert_fail@plt+0x534>
   116dc:	mov	r0, r5
   116e0:	bl	11004 <strcmp@plt>
   116e4:	cmp	r0, #0
   116e8:	beq	1170c <__assert_fail@plt+0x444>
   116ec:	ldr	r1, [pc, #268]	; 11800 <__assert_fail@plt+0x538>
   116f0:	mov	r0, r5
   116f4:	bl	11004 <strcmp@plt>
   116f8:	cmp	r0, #0
   116fc:	bne	1171c <__assert_fail@plt+0x454>
   11700:	ldr	r3, [pc, #212]	; 117dc <__assert_fail@plt+0x514>
   11704:	str	r0, [r3, #4]
   11708:	b	11478 <__assert_fail@plt+0x1b0>
   1170c:	mov	r2, #1
   11710:	ldr	r3, [pc, #196]	; 117dc <__assert_fail@plt+0x514>
   11714:	str	r2, [r3, #4]
   11718:	b	11478 <__assert_fail@plt+0x1b0>
   1171c:	ldr	r1, [pc, #224]	; 11804 <__assert_fail@plt+0x53c>
   11720:	mov	r0, r4
   11724:	bl	15960 <argp_error@@Base>
   11728:	mov	r0, #0
   1172c:	b	11478 <__assert_fail@plt+0x1b0>
   11730:	mov	r2, #0
   11734:	add	r1, sp, #4
   11738:	mov	r0, r5
   1173c:	bl	11010 <strtol@plt>
   11740:	ldr	r3, [pc, #152]	; 117e0 <__assert_fail@plt+0x518>
   11744:	str	r0, [r3, #20]
   11748:	ldr	r3, [sp, #4]
   1174c:	ldrb	r3, [r3]
   11750:	cmp	r0, #60	; 0x3c
   11754:	cmpls	r3, #0
   11758:	moveq	r0, #0
   1175c:	beq	11478 <__assert_fail@plt+0x1b0>
   11760:	mov	r3, r5
   11764:	ldr	r2, [pc, #156]	; 11808 <__assert_fail@plt+0x540>
   11768:	mov	r1, #0
   1176c:	mov	r0, #1
   11770:	bl	11124 <error@plt>
   11774:	mov	r0, #0
   11778:	b	11478 <__assert_fail@plt+0x1b0>
   1177c:	mov	r2, #1
   11780:	ldr	r3, [pc, #84]	; 117dc <__assert_fail@plt+0x514>
   11784:	str	r2, [r3, #8]
   11788:	mov	r0, #0
   1178c:	b	11478 <__assert_fail@plt+0x1b0>
   11790:	ldr	r4, [pc, #68]	; 117dc <__assert_fail@plt+0x514>
   11794:	mov	r3, #1
   11798:	strb	r3, [r4, #12]
   1179c:	mov	r0, r1
   117a0:	bl	177f0 <argp_parse@@Base+0x1764>
   117a4:	str	r0, [r4, #16]
   117a8:	mov	r0, #0
   117ac:	b	11478 <__assert_fail@plt+0x1b0>
   117b0:	ldr	r3, [pc, #36]	; 117dc <__assert_fail@plt+0x514>
   117b4:	ldrb	r3, [r3, #12]
   117b8:	cmp	r3, #0
   117bc:	movne	r0, #0
   117c0:	bne	11478 <__assert_fail@plt+0x1b0>
   117c4:	ldr	r1, [pc, #64]	; 1180c <__assert_fail@plt+0x544>
   117c8:	mov	r0, r2
   117cc:	bl	15960 <argp_error@@Base>
   117d0:	mov	r0, #0
   117d4:	b	11478 <__assert_fail@plt+0x1b0>
   117d8:	tsteq	r0, r4
   117dc:	andeq	fp, r2, ip, lsr #5
   117e0:	andeq	fp, r2, r4, lsl r1
   117e4:	andeq	r9, r1, r8, lsl #5
   117e8:	andeq	r9, r1, r8, lsl r2
   117ec:	andeq	r9, r1, r4, lsr r2
   117f0:	andeq	r9, r1, ip, asr #4
   117f4:	andeq	r9, r1, r8, ror #4
   117f8:			; <UNDEFINED> instruction: 0x000192b4
   117fc:	andeq	r9, r1, ip, asr #5
   11800:	ldrdeq	r9, [r1], -r4
   11804:	ldrdeq	r9, [r1], -r8
   11808:	andeq	r9, r1, r8, ror #5
   1180c:	andeq	r9, r1, r8, lsl #6
   11810:	push	{r4, lr}
   11814:	mov	r4, r0
   11818:	mov	r2, #2
   1181c:	mov	r1, #4
   11820:	bl	110c4 <gethostbyaddr@plt>
   11824:	cmp	r0, #0
   11828:	beq	11834 <__assert_fail@plt+0x56c>
   1182c:	ldr	r0, [r0]
   11830:	pop	{r4, pc}
   11834:	ldr	r0, [r4]
   11838:	bl	110a0 <inet_ntoa@plt>
   1183c:	pop	{r4, pc}
   11840:	sub	sp, sp, #16
   11844:	push	{r4, r5, r6, r7, lr}
   11848:	sub	sp, sp, #12
   1184c:	add	ip, sp, #36	; 0x24
   11850:	stm	ip, {r1, r2, r3}
   11854:	ldr	lr, [sp, #52]	; 0x34
   11858:	subs	r4, r0, #0
   1185c:	beq	118a4 <__assert_fail@plt+0x5dc>
   11860:	add	r5, r4, #48	; 0x30
   11864:	str	lr, [r4, #8]
   11868:	add	ip, r4, #16
   1186c:	add	r3, sp, #36	; 0x24
   11870:	ldm	r3, {r0, r1, r2, r3}
   11874:	stm	ip, {r0, r1, r2, r3}
   11878:	ldr	r3, [pc, #600]	; 11ad8 <__assert_fail@plt+0x810>
   1187c:	ldr	r3, [r3]
   11880:	str	r3, [r4, #48]	; 0x30
   11884:	mov	r3, #0
   11888:	str	r3, [r4, #12]
   1188c:	cmp	lr, r3
   11890:	beq	118b8 <__assert_fail@plt+0x5f0>
   11894:	cmp	lr, #1
   11898:	bls	11998 <__assert_fail@plt+0x6d0>
   1189c:	ldr	r4, [r4]
   118a0:	b	11914 <__assert_fail@plt+0x64c>
   118a4:	ldr	r3, [pc, #560]	; 11adc <__assert_fail@plt+0x814>
   118a8:	ldr	r2, [pc, #560]	; 11ae0 <__assert_fail@plt+0x818>
   118ac:	ldr	r1, [pc, #560]	; 11ae4 <__assert_fail@plt+0x81c>
   118b0:	ldr	r0, [pc, #560]	; 11ae8 <__assert_fail@plt+0x820>
   118b4:	bl	112c8 <__assert_fail@plt>
   118b8:	mov	r2, r3
   118bc:	mov	r1, #2
   118c0:	mov	r0, r1
   118c4:	bl	112a4 <socket@plt>
   118c8:	str	r0, [r4, #4]
   118cc:	cmp	r0, #0
   118d0:	blt	11968 <__assert_fail@plt+0x6a0>
   118d4:	ldr	r0, [r4, #4]
   118d8:	mov	r3, #4
   118dc:	str	r3, [sp]
   118e0:	mov	r3, r5
   118e4:	mov	r2, #2
   118e8:	mov	r1, #0
   118ec:	bl	1101c <setsockopt@plt>
   118f0:	cmp	r0, #0
   118f4:	blt	11980 <__assert_fail@plt+0x6b8>
   118f8:	ldr	r3, [r4, #8]
   118fc:	cmp	r3, #1
   11900:	bls	11998 <__assert_fail@plt+0x6d0>
   11904:	ldr	r3, [r4, #8]
   11908:	cmp	r3, #0
   1190c:	bne	1189c <__assert_fail@plt+0x5d4>
   11910:	ldr	r4, [r4, #4]
   11914:	ldr	r3, [pc, #444]	; 11ad8 <__assert_fail@plt+0x810>
   11918:	ldr	r3, [r3, #16]
   1191c:	cmp	r3, #0
   11920:	blt	11948 <__assert_fail@plt+0x680>
   11924:	mov	r3, #4
   11928:	str	r3, [sp]
   1192c:	ldr	r3, [pc, #440]	; 11aec <__assert_fail@plt+0x824>
   11930:	mov	r2, #1
   11934:	mov	r1, #0
   11938:	mov	r0, r4
   1193c:	bl	1101c <setsockopt@plt>
   11940:	cmp	r0, #0
   11944:	blt	11a88 <__assert_fail@plt+0x7c0>
   11948:	ldr	r3, [pc, #416]	; 11af0 <__assert_fail@plt+0x828>
   1194c:	ldr	r3, [r3, #20]
   11950:	cmp	r3, #0
   11954:	bne	11aa0 <__assert_fail@plt+0x7d8>
   11958:	add	sp, sp, #12
   1195c:	pop	{r4, r5, r6, r7, lr}
   11960:	add	sp, sp, #16
   11964:	bx	lr
   11968:	bl	111cc <__errno_location@plt>
   1196c:	ldr	r2, [pc, #384]	; 11af4 <__assert_fail@plt+0x82c>
   11970:	ldr	r1, [r0]
   11974:	mov	r0, #1
   11978:	bl	11124 <error@plt>
   1197c:	b	118d4 <__assert_fail@plt+0x60c>
   11980:	bl	111cc <__errno_location@plt>
   11984:	ldr	r2, [pc, #364]	; 11af8 <__assert_fail@plt+0x830>
   11988:	ldr	r1, [r0]
   1198c:	mov	r0, #1
   11990:	bl	11124 <error@plt>
   11994:	b	118f8 <__assert_fail@plt+0x630>
   11998:	ldr	r0, [pc, #348]	; 11afc <__assert_fail@plt+0x834>
   1199c:	bl	11034 <getprotobyname@plt>
   119a0:	subs	r6, r0, #0
   119a4:	beq	11a74 <__assert_fail@plt+0x7ac>
   119a8:	ldr	r2, [r6, #8]
   119ac:	mov	r1, #3
   119b0:	mov	r0, #2
   119b4:	bl	112a4 <socket@plt>
   119b8:	str	r0, [r4]
   119bc:	cmp	r0, #0
   119c0:	blt	11a00 <__assert_fail@plt+0x738>
   119c4:	ldr	r0, [r4]
   119c8:	mov	r3, #4
   119cc:	str	r3, [sp]
   119d0:	mov	r3, r5
   119d4:	mov	r2, #2
   119d8:	mov	r1, #0
   119dc:	bl	1101c <setsockopt@plt>
   119e0:	cmp	r0, #0
   119e4:	bge	11904 <__assert_fail@plt+0x63c>
   119e8:	bl	111cc <__errno_location@plt>
   119ec:	ldr	r2, [pc, #260]	; 11af8 <__assert_fail@plt+0x830>
   119f0:	ldr	r1, [r0]
   119f4:	mov	r0, #1
   119f8:	bl	11124 <error@plt>
   119fc:	b	11904 <__assert_fail@plt+0x63c>
   11a00:	bl	111cc <__errno_location@plt>
   11a04:	mov	r7, r0
   11a08:	ldr	r3, [r0]
   11a0c:	cmp	r3, #13
   11a10:	cmpne	r3, #1
   11a14:	beq	11a2c <__assert_fail@plt+0x764>
   11a18:	ldr	r2, [pc, #212]	; 11af4 <__assert_fail@plt+0x82c>
   11a1c:	ldr	r1, [r7]
   11a20:	mov	r0, #1
   11a24:	bl	11124 <error@plt>
   11a28:	b	119c4 <__assert_fail@plt+0x6fc>
   11a2c:	mov	r3, #0
   11a30:	str	r3, [r0]
   11a34:	ldr	r2, [r6, #8]
   11a38:	mov	r1, #2
   11a3c:	mov	r0, r1
   11a40:	bl	112a4 <socket@plt>
   11a44:	str	r0, [r4]
   11a48:	ldr	r3, [r4, #12]
   11a4c:	add	r3, r3, #1
   11a50:	str	r3, [r4, #12]
   11a54:	ldr	r3, [r7]
   11a58:	cmp	r3, #93	; 0x5d
   11a5c:	moveq	r3, #1
   11a60:	streq	r3, [r7]
   11a64:	ldr	r3, [r4]
   11a68:	cmp	r3, #0
   11a6c:	bge	119c4 <__assert_fail@plt+0x6fc>
   11a70:	b	11a18 <__assert_fail@plt+0x750>
   11a74:	ldr	r2, [pc, #132]	; 11b00 <__assert_fail@plt+0x838>
   11a78:	mov	r1, #0
   11a7c:	mov	r0, #1
   11a80:	bl	11124 <error@plt>
   11a84:	b	11904 <__assert_fail@plt+0x63c>
   11a88:	bl	111cc <__errno_location@plt>
   11a8c:	ldr	r2, [pc, #112]	; 11b04 <__assert_fail@plt+0x83c>
   11a90:	ldr	r1, [r0]
   11a94:	mov	r0, #0
   11a98:	bl	11124 <error@plt>
   11a9c:	b	11948 <__assert_fail@plt+0x680>
   11aa0:	str	r3, [sp]
   11aa4:	ldr	r3, [pc, #92]	; 11b08 <__assert_fail@plt+0x840>
   11aa8:	mov	r2, #4
   11aac:	mov	r1, #0
   11ab0:	mov	r0, r4
   11ab4:	bl	1101c <setsockopt@plt>
   11ab8:	cmp	r0, #0
   11abc:	bge	11958 <__assert_fail@plt+0x690>
   11ac0:	bl	111cc <__errno_location@plt>
   11ac4:	ldr	r2, [pc, #64]	; 11b0c <__assert_fail@plt+0x844>
   11ac8:	ldr	r1, [r0]
   11acc:	mov	r0, #0
   11ad0:	bl	11124 <error@plt>
   11ad4:	b	11958 <__assert_fail@plt+0x690>
   11ad8:	andeq	fp, r2, r4, lsl r1
   11adc:	andeq	r9, r1, ip, ror r1
   11ae0:	ldrdeq	r0, [r0], -fp
   11ae4:	andeq	r9, r1, r0, lsr #6
   11ae8:	andeq	r9, r1, r0, lsr r3
   11aec:	andeq	fp, r2, r4, lsr #2
   11af0:	andeq	fp, r2, ip, lsr #5
   11af4:	andeq	r9, r1, r4, lsr r3
   11af8:	andeq	r9, r1, ip, lsr r3
   11afc:	andeq	r9, r1, ip, asr #5
   11b00:	andeq	r9, r1, r8, asr #6
   11b04:	andeq	r9, r1, ip, ror #6
   11b08:	andeq	fp, r2, r0, lsl r3
   11b0c:	andeq	r9, r1, r0, lsl #7
   11b10:	cmp	r0, #0
   11b14:	beq	11b2c <__assert_fail@plt+0x864>
   11b18:	cmp	r1, #1024	; 0x400
   11b1c:	ldrcc	r3, [pc, #32]	; 11b44 <__assert_fail@plt+0x87c>
   11b20:	strhcc	r3, [r0, #18]
   11b24:	strhcs	r1, [r0, #18]
   11b28:	bx	lr
   11b2c:	push	{r4, lr}
   11b30:	ldr	r3, [pc, #16]	; 11b48 <__assert_fail@plt+0x880>
   11b34:	ldr	r2, [pc, #16]	; 11b4c <__assert_fail@plt+0x884>
   11b38:	ldr	r1, [pc, #16]	; 11b50 <__assert_fail@plt+0x888>
   11b3c:	ldr	r0, [pc, #16]	; 11b54 <__assert_fail@plt+0x88c>
   11b40:	bl	112c8 <__assert_fail@plt>
   11b44:			; <UNDEFINED> instruction: 0xffff829a
   11b48:	andeq	r9, r1, r8, lsl #3
   11b4c:	andeq	r0, r0, sl, lsr #4
   11b50:	andeq	r9, r1, r0, lsr #6
   11b54:	andeq	r9, r1, r0, lsr r3
   11b58:	push	{r4, r5, r6, lr}
   11b5c:	sub	sp, sp, #160	; 0xa0
   11b60:	subs	r4, r0, #0
   11b64:	beq	11bec <__assert_fail@plt+0x924>
   11b68:	mov	r6, r1
   11b6c:	mov	r5, r2
   11b70:	mov	r3, #16
   11b74:	str	r3, [sp, #12]
   11b78:	mov	r3, r4
   11b7c:	ldr	r0, [r3], #32
   11b80:	add	r2, sp, #12
   11b84:	str	r2, [sp, #4]
   11b88:	str	r3, [sp]
   11b8c:	mov	r3, #0
   11b90:	mov	r2, #136	; 0x88
   11b94:	add	r1, sp, #24
   11b98:	bl	110d0 <recvfrom@plt>
   11b9c:	cmp	r0, #0
   11ba0:	blt	11c00 <__assert_fail@plt+0x938>
   11ba4:	add	r3, sp, #16
   11ba8:	add	r2, sp, #20
   11bac:	mov	r1, #136	; 0x88
   11bb0:	add	r0, sp, #24
   11bb4:	bl	127d8 <__assert_fail@plt+0x1510>
   11bb8:	ldr	r3, [sp, #16]
   11bbc:	ldrb	r2, [r3]
   11bc0:	str	r2, [r6]
   11bc4:	ldrb	r2, [r3, #1]
   11bc8:	str	r2, [r5]
   11bcc:	ldr	r2, [r4, #8]
   11bd0:	cmp	r2, #0
   11bd4:	beq	11c18 <__assert_fail@plt+0x950>
   11bd8:	cmp	r2, #1
   11bdc:	beq	11c7c <__assert_fail@plt+0x9b4>
   11be0:	mov	r0, #0
   11be4:	add	sp, sp, #160	; 0xa0
   11be8:	pop	{r4, r5, r6, pc}
   11bec:	ldr	r3, [pc, #472]	; 11dcc <__assert_fail@plt+0xb04>
   11bf0:	ldr	r2, [pc, #472]	; 11dd0 <__assert_fail@plt+0xb08>
   11bf4:	ldr	r1, [pc, #472]	; 11dd4 <__assert_fail@plt+0xb0c>
   11bf8:	ldr	r0, [pc, #472]	; 11dd8 <__assert_fail@plt+0xb10>
   11bfc:	bl	112c8 <__assert_fail@plt>
   11c00:	bl	111cc <__errno_location@plt>
   11c04:	ldr	r2, [pc, #464]	; 11ddc <__assert_fail@plt+0xb14>
   11c08:	ldr	r1, [r0]
   11c0c:	mov	r0, #1
   11c10:	bl	11124 <error@plt>
   11c14:	b	11ba4 <__assert_fail@plt+0x8dc>
   11c18:	ldrb	r1, [r3]
   11c1c:	and	r2, r1, #247	; 0xf7
   11c20:	cmp	r2, #3
   11c24:	bne	11d9c <__assert_fail@plt+0xad4>
   11c28:	ldrb	r2, [r3, #8]
   11c2c:	and	r2, r2, #15
   11c30:	add	r2, r3, r2, lsl #2
   11c34:	ldrh	r0, [r2, #10]
   11c38:	ldrh	r2, [r4, #18]
   11c3c:	cmp	r0, r2
   11c40:	bne	11da4 <__assert_fail@plt+0xadc>
   11c44:	cmp	r1, #3
   11c48:	movne	r0, #0
   11c4c:	bne	11be4 <__assert_fail@plt+0x91c>
   11c50:	mov	r1, #1
   11c54:	ldr	r2, [pc, #388]	; 11de0 <__assert_fail@plt+0xb18>
   11c58:	str	r1, [r2, #24]
   11c5c:	ldrb	r2, [r3]
   11c60:	cmp	r2, #3
   11c64:	movne	r0, #0
   11c68:	bne	11be4 <__assert_fail@plt+0x91c>
   11c6c:	ldrb	r0, [r3, #1]
   11c70:	subs	r0, r0, #3
   11c74:	movne	r0, #1
   11c78:	b	11be4 <__assert_fail@plt+0x91c>
   11c7c:	ldrb	r2, [r3]
   11c80:	and	r1, r2, #247	; 0xf7
   11c84:	cmp	r2, #0
   11c88:	cmpne	r1, #3
   11c8c:	movne	r0, #1
   11c90:	moveq	r0, #0
   11c94:	bne	11dac <__assert_fail@plt+0xae4>
   11c98:	cmp	r2, #0
   11c9c:	bne	11d18 <__assert_fail@plt+0xa50>
   11ca0:	ldrh	r2, [r3, #6]
   11ca4:	rev16	r2, r2
   11ca8:	uxth	r2, r2
   11cac:	ldr	r1, [pc, #304]	; 11de4 <__assert_fail@plt+0xb1c>
   11cb0:	ldr	r1, [r1]
   11cb4:	cmp	r2, r1
   11cb8:	bne	11db4 <__assert_fail@plt+0xaec>
   11cbc:	ldrh	r2, [r3, #4]
   11cc0:	rev16	r2, r2
   11cc4:	uxth	r2, r2
   11cc8:	ldr	r1, [pc, #280]	; 11de8 <__assert_fail@plt+0xb20>
   11ccc:	ldr	r1, [r1]
   11cd0:	cmp	r2, r1
   11cd4:	beq	11ce4 <__assert_fail@plt+0xa1c>
   11cd8:	ldr	r2, [r4, #12]
   11cdc:	cmp	r2, #0
   11ce0:	beq	11dbc <__assert_fail@plt+0xaf4>
   11ce4:	ldr	r2, [sp, #20]
   11ce8:	ldr	r1, [r2, #12]
   11cec:	ldr	r2, [pc, #248]	; 11dec <__assert_fail@plt+0xb24>
   11cf0:	ldr	r2, [r2, #4]
   11cf4:	cmp	r1, r2
   11cf8:	orreq	r0, r0, #1
   11cfc:	cmp	r0, #0
   11d00:	bne	11d6c <__assert_fail@plt+0xaa4>
   11d04:	ldrb	r0, [r3]
   11d08:	cmp	r0, #3
   11d0c:	movne	r0, #0
   11d10:	moveq	r0, #1
   11d14:	b	11be4 <__assert_fail@plt+0x91c>
   11d18:	cmp	r2, #3
   11d1c:	movne	ip, #0
   11d20:	moveq	ip, #1
   11d24:	cmp	r1, #3
   11d28:	bne	11d94 <__assert_fail@plt+0xacc>
   11d2c:	add	r1, r3, #8
   11d30:	ldrb	ip, [r3, #8]
   11d34:	and	ip, ip, #15
   11d38:	add	r1, r1, ip, lsl #2
   11d3c:	ldrh	ip, [r1, #6]
   11d40:	rev16	ip, ip
   11d44:	uxth	ip, ip
   11d48:	ldrh	r1, [r1, #4]
   11d4c:	rev16	r1, r1
   11d50:	uxth	r1, r1
   11d54:	ldr	lr, [pc, #140]	; 11de8 <__assert_fail@plt+0xb20>
   11d58:	ldr	lr, [lr]
   11d5c:	cmp	r1, lr
   11d60:	bne	11dc4 <__assert_fail@plt+0xafc>
   11d64:	cmp	r2, #11
   11d68:	beq	11d7c <__assert_fail@plt+0xab4>
   11d6c:	mov	r1, #1
   11d70:	ldr	r2, [pc, #104]	; 11de0 <__assert_fail@plt+0xb18>
   11d74:	str	r1, [r2, #24]
   11d78:	b	11d04 <__assert_fail@plt+0xa3c>
   11d7c:	ldr	r2, [pc, #96]	; 11de4 <__assert_fail@plt+0xb1c>
   11d80:	ldr	r2, [r2]
   11d84:	cmp	ip, r2
   11d88:	beq	11ce4 <__assert_fail@plt+0xa1c>
   11d8c:	mvn	r0, #0
   11d90:	b	11be4 <__assert_fail@plt+0x91c>
   11d94:	mov	r0, ip
   11d98:	b	11ce4 <__assert_fail@plt+0xa1c>
   11d9c:	mvn	r0, #0
   11da0:	b	11be4 <__assert_fail@plt+0x91c>
   11da4:	mvn	r0, #0
   11da8:	b	11be4 <__assert_fail@plt+0x91c>
   11dac:	mvn	r0, #0
   11db0:	b	11be4 <__assert_fail@plt+0x91c>
   11db4:	mvn	r0, #0
   11db8:	b	11be4 <__assert_fail@plt+0x91c>
   11dbc:	mvn	r0, #0
   11dc0:	b	11be4 <__assert_fail@plt+0x91c>
   11dc4:	mvn	r0, #0
   11dc8:	b	11be4 <__assert_fail@plt+0x91c>
   11dcc:	muleq	r1, r4, r1
   11dd0:	andeq	r0, r0, r3, asr #4
   11dd4:	andeq	r9, r1, r0, lsr #6
   11dd8:	andeq	r9, r1, r0, lsr r3
   11ddc:	muleq	r1, r8, r3
   11de0:	andeq	fp, r2, ip, lsr #5
   11de4:	andeq	fp, r2, ip, lsr r3
   11de8:	andeq	fp, r2, r8, lsr r3
   11dec:	andeq	fp, r2, r0, lsl #6
   11df0:	push	{r4, r5, lr}
   11df4:	sub	sp, sp, #44	; 0x2c
   11df8:	subs	r4, r0, #0
   11dfc:	beq	11e1c <__assert_fail@plt+0xb54>
   11e00:	ldr	r3, [r4, #8]
   11e04:	cmp	r3, #0
   11e08:	beq	11e30 <__assert_fail@plt+0xb68>
   11e0c:	cmp	r3, #1
   11e10:	beq	11ecc <__assert_fail@plt+0xc04>
   11e14:	mov	r5, #0
   11e18:	b	11e88 <__assert_fail@plt+0xbc0>
   11e1c:	ldr	r3, [pc, #380]	; 11fa0 <__assert_fail@plt+0xcd8>
   11e20:	ldr	r2, [pc, #380]	; 11fa4 <__assert_fail@plt+0xcdc>
   11e24:	ldr	r1, [pc, #380]	; 11fa8 <__assert_fail@plt+0xce0>
   11e28:	ldr	r0, [pc, #380]	; 11fac <__assert_fail@plt+0xce4>
   11e2c:	bl	112c8 <__assert_fail@plt>
   11e30:	ldr	r2, [pc, #376]	; 11fb0 <__assert_fail@plt+0xce8>
   11e34:	add	r3, sp, #12
   11e38:	ldm	r2, {r0, r1, r2}
   11e3c:	stmia	r3!, {r0, r1}
   11e40:	strb	r2, [r3]
   11e44:	ldr	r0, [r4, #4]
   11e48:	add	r3, r4, #16
   11e4c:	mov	r2, #16
   11e50:	str	r2, [sp, #4]
   11e54:	str	r3, [sp]
   11e58:	mov	r3, #0
   11e5c:	mov	r2, #9
   11e60:	add	r1, sp, #12
   11e64:	bl	11208 <sendto@plt>
   11e68:	cmp	r0, #0
   11e6c:	blt	11e94 <__assert_fail@plt+0xbcc>
   11e70:	mov	r1, #0
   11e74:	add	r0, r4, #52	; 0x34
   11e78:	bl	11118 <gettimeofday@plt>
   11e7c:	cmp	r0, #0
   11e80:	blt	11eb4 <__assert_fail@plt+0xbec>
   11e84:	mov	r5, #0
   11e88:	mov	r0, r5
   11e8c:	add	sp, sp, #44	; 0x2c
   11e90:	pop	{r4, r5, pc}
   11e94:	bl	111cc <__errno_location@plt>
   11e98:	ldr	r1, [r0]
   11e9c:	cmp	r1, #104	; 0x68
   11ea0:	beq	11e70 <__assert_fail@plt+0xba8>
   11ea4:	ldr	r2, [pc, #264]	; 11fb4 <__assert_fail@plt+0xcec>
   11ea8:	mov	r0, #1
   11eac:	bl	11124 <error@plt>
   11eb0:	b	11e70 <__assert_fail@plt+0xba8>
   11eb4:	bl	111cc <__errno_location@plt>
   11eb8:	ldr	r2, [pc, #248]	; 11fb8 <__assert_fail@plt+0xcf0>
   11ebc:	ldr	r1, [r0]
   11ec0:	mov	r0, #1
   11ec4:	bl	11124 <error@plt>
   11ec8:	b	11e84 <__assert_fail@plt+0xbbc>
   11ecc:	add	r2, sp, #11
   11ed0:	mov	r3, #0
   11ed4:	strb	r3, [r2, #1]!
   11ed8:	add	r3, r3, #1
   11edc:	cmp	r3, #28
   11ee0:	bne	11ed4 <__assert_fail@plt+0xc0c>
   11ee4:	ldr	r3, [r4, #12]
   11ee8:	cmp	r3, #0
   11eec:	ldrne	r3, [pc, #200]	; 11fbc <__assert_fail@plt+0xcf4>
   11ef0:	ldrne	r3, [r3, #4]
   11ef4:	strne	r3, [sp, #24]
   11ef8:	ldr	r3, [pc, #192]	; 11fc0 <__assert_fail@plt+0xcf8>
   11efc:	ldr	r2, [r3]
   11f00:	ldr	r1, [pc, #188]	; 11fc4 <__assert_fail@plt+0xcfc>
   11f04:	ldr	r3, [r1]
   11f08:	add	r3, r3, #1
   11f0c:	str	r3, [r1]
   11f10:	mov	r1, #28
   11f14:	add	r0, sp, #12
   11f18:	bl	12830 <__assert_fail@plt+0x1568>
   11f1c:	subs	r5, r0, #0
   11f20:	mvnne	r5, #0
   11f24:	bne	11e88 <__assert_fail@plt+0xbc0>
   11f28:	mov	r3, r4
   11f2c:	ldr	r0, [r3], #16
   11f30:	mov	r2, #16
   11f34:	str	r2, [sp, #4]
   11f38:	str	r3, [sp]
   11f3c:	mov	r3, #0
   11f40:	mov	r2, #28
   11f44:	add	r1, sp, #12
   11f48:	bl	11208 <sendto@plt>
   11f4c:	cmp	r0, #0
   11f50:	blt	11f80 <__assert_fail@plt+0xcb8>
   11f54:	mov	r1, #0
   11f58:	add	r0, r4, #52	; 0x34
   11f5c:	bl	11118 <gettimeofday@plt>
   11f60:	cmp	r0, #0
   11f64:	bge	11e88 <__assert_fail@plt+0xbc0>
   11f68:	bl	111cc <__errno_location@plt>
   11f6c:	ldr	r2, [pc, #68]	; 11fb8 <__assert_fail@plt+0xcf0>
   11f70:	ldr	r1, [r0]
   11f74:	mov	r0, #1
   11f78:	bl	11124 <error@plt>
   11f7c:	b	11e88 <__assert_fail@plt+0xbc0>
   11f80:	bl	111cc <__errno_location@plt>
   11f84:	ldr	r1, [r0]
   11f88:	cmp	r1, #104	; 0x68
   11f8c:	beq	11f54 <__assert_fail@plt+0xc8c>
   11f90:	ldr	r2, [pc, #28]	; 11fb4 <__assert_fail@plt+0xcec>
   11f94:	mov	r0, #1
   11f98:	bl	11124 <error@plt>
   11f9c:	b	11f54 <__assert_fail@plt+0xc8c>
   11fa0:	andeq	r9, r1, r0, lsr #3
   11fa4:	andeq	r0, r0, r5, lsr #5
   11fa8:	andeq	r9, r1, r0, lsr #6
   11fac:	andeq	r9, r1, r0, lsr r3
   11fb0:			; <UNDEFINED> instruction: 0x000193bc
   11fb4:	andeq	r9, r1, r4, lsr #7
   11fb8:	andeq	r9, r1, ip, lsr #7
   11fbc:	andeq	fp, r2, r0, lsl #6
   11fc0:	andeq	fp, r2, r8, lsr r3
   11fc4:	andeq	fp, r2, ip, lsr r3
   11fc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fcc:	vpush	{d8}
   11fd0:	sub	sp, sp, #180	; 0xb4
   11fd4:	mov	r7, r0
   11fd8:	mov	r4, r3
   11fdc:	str	r3, [sp, #16]
   11fe0:	ldr	r0, [pc, #664]	; 12280 <__assert_fail@plt+0xfb8>
   11fe4:	bl	11028 <printf@plt>
   11fe8:	cmp	r4, #0
   11fec:	ble	12260 <__assert_fail@plt+0xf98>
   11ff0:	mov	r3, #0
   11ff4:	mov	r8, r3
   11ff8:	str	r3, [sp, #20]
   11ffc:	mov	r1, r3
   12000:	mov	r4, r3
   12004:	ldr	fp, [pc, #632]	; 12284 <__assert_fail@plt+0xfbc>
   12008:	vldr	d8, [pc, #616]	; 12278 <__assert_fail@plt+0xfb0>
   1200c:	b	12070 <__assert_fail@plt+0xda8>
   12010:	mov	r0, r7
   12014:	bl	11df0 <__assert_fail@plt+0xb28>
   12018:	b	120e4 <__assert_fail@plt+0xe1c>
   1201c:	ldr	r3, [sp, #12]
   12020:	cmp	r3, #4
   12024:	beq	12050 <__assert_fail@plt+0xd88>
   12028:	ldr	r2, [pc, #600]	; 12288 <__assert_fail@plt+0xfc0>
   1202c:	ldr	r1, [r9]
   12030:	mov	r0, #1
   12034:	bl	11124 <error@plt>
   12038:	b	12050 <__assert_fail@plt+0xd88>
   1203c:	ldr	r0, [pc, #584]	; 1228c <__assert_fail@plt+0xfc4>
   12040:	bl	11028 <printf@plt>
   12044:	ldr	r3, [pc, #580]	; 12290 <__assert_fail@plt+0xfc8>
   12048:	ldr	r0, [r3]
   1204c:	bl	11040 <fflush@plt>
   12050:	ldr	r3, [pc, #568]	; 12290 <__assert_fail@plt+0xfc8>
   12054:	ldr	r0, [r3]
   12058:	bl	11040 <fflush@plt>
   1205c:	mov	r1, r4
   12060:	add	r8, r8, #1
   12064:	ldr	r3, [sp, #16]
   12068:	cmp	r3, r8
   1206c:	ble	12260 <__assert_fail@plt+0xf98>
   12070:	cmp	r7, #0
   12074:	ldrne	sl, [r7]
   12078:	mvneq	sl, #0
   1207c:	add	r3, sp, #44	; 0x2c
   12080:	add	r2, sp, #172	; 0xac
   12084:	str	r4, [r3, #4]!
   12088:	cmp	r3, r2
   1208c:	bne	12084 <__assert_fail@plt+0xdbc>
   12090:	add	r5, sl, #31
   12094:	cmp	sl, #0
   12098:	movge	r5, sl
   1209c:	asr	r5, r5, #5
   120a0:	asr	r3, sl, #31
   120a4:	lsr	r3, r3, #27
   120a8:	add	r6, sl, r3
   120ac:	and	r6, r6, #31
   120b0:	sub	r3, r6, r3
   120b4:	mov	r6, #1
   120b8:	lsl	r6, r6, r3
   120bc:	add	r3, sp, #176	; 0xb0
   120c0:	add	r2, r3, r5, lsl #2
   120c4:	ldr	r3, [r2, #-128]	; 0xffffff80
   120c8:	orr	r3, r3, r6
   120cc:	str	r3, [r2, #-128]	; 0xffffff80
   120d0:	str	r4, [sp, #36]	; 0x24
   120d4:	ldr	r3, [fp, #20]
   120d8:	str	r3, [sp, #32]
   120dc:	cmp	r1, #0
   120e0:	beq	12010 <__assert_fail@plt+0xd48>
   120e4:	bl	111cc <__errno_location@plt>
   120e8:	mov	r9, r0
   120ec:	str	r4, [r0]
   120f0:	add	r3, sp, #32
   120f4:	str	r3, [sp]
   120f8:	mov	r3, r4
   120fc:	mov	r2, r4
   12100:	add	r1, sp, #48	; 0x30
   12104:	add	r0, sl, #1
   12108:	bl	110ac <select@plt>
   1210c:	mov	sl, r0
   12110:	ldr	r3, [r9]
   12114:	str	r3, [sp, #12]
   12118:	mov	r1, r4
   1211c:	add	r0, sp, #40	; 0x28
   12120:	bl	11118 <gettimeofday@plt>
   12124:	ldr	r2, [r7, #56]	; 0x38
   12128:	ldr	r3, [sp, #44]	; 0x2c
   1212c:	sub	r3, r3, r2
   12130:	str	r3, [sp, #44]	; 0x2c
   12134:	ldr	r1, [r7, #52]	; 0x34
   12138:	ldr	r2, [sp, #40]	; 0x28
   1213c:	sub	r2, r2, r1
   12140:	cmp	r3, #0
   12144:	strge	r2, [sp, #40]	; 0x28
   12148:	sublt	r2, r2, #1
   1214c:	strlt	r2, [sp, #40]	; 0x28
   12150:	addlt	r3, r3, #999424	; 0xf4000
   12154:	addlt	r3, r3, #576	; 0x240
   12158:	strlt	r3, [sp, #44]	; 0x2c
   1215c:	cmp	sl, #0
   12160:	blt	1201c <__assert_fail@plt+0xd54>
   12164:	cmp	sl, #0
   12168:	beq	1203c <__assert_fail@plt+0xd74>
   1216c:	add	r3, sp, #176	; 0xb0
   12170:	add	r5, r3, r5, lsl #2
   12174:	ldr	r3, [r5, #-128]	; 0xffffff80
   12178:	tst	r6, r3
   1217c:	beq	12050 <__assert_fail@plt+0xd88>
   12180:	ldr	r9, [sp, #40]	; 0x28
   12184:	ldr	r6, [sp, #44]	; 0x2c
   12188:	add	r2, sp, #28
   1218c:	add	r1, sp, #24
   12190:	mov	r0, r7
   12194:	bl	11b58 <__assert_fail@plt+0x890>
   12198:	subs	r5, r0, #0
   1219c:	sublt	r8, r8, #1
   121a0:	movlt	r1, #1
   121a4:	blt	12060 <__assert_fail@plt+0xd98>
   121a8:	cmp	r8, #0
   121ac:	beq	121c0 <__assert_fail@plt+0xef8>
   121b0:	ldr	r3, [r7, #36]	; 0x24
   121b4:	ldr	r2, [sp, #20]
   121b8:	cmp	r3, r2
   121bc:	beq	121e4 <__assert_fail@plt+0xf1c>
   121c0:	ldr	r0, [r7, #36]	; 0x24
   121c4:	bl	110a0 <inet_ntoa@plt>
   121c8:	mov	r1, r0
   121cc:	ldr	r0, [pc, #192]	; 12294 <__assert_fail@plt+0xfcc>
   121d0:	bl	11028 <printf@plt>
   121d4:	ldr	r3, [pc, #188]	; 12298 <__assert_fail@plt+0xfd0>
   121d8:	ldr	r3, [r3, #8]
   121dc:	cmp	r3, #0
   121e0:	bne	12228 <__assert_fail@plt+0xf60>
   121e4:	vmov	s15, r9
   121e8:	vcvt.f64.s32	d7, s15
   121ec:	vmov	s13, r6
   121f0:	vcvt.f64.s32	d6, s13
   121f4:	vdiv.f64	d5, d6, d8
   121f8:	vmla.f64	d5, d7, d8
   121fc:	vmov	r2, r3, d5
   12200:	ldr	r0, [pc, #148]	; 1229c <__assert_fail@plt+0xfd4>
   12204:	bl	11028 <printf@plt>
   12208:	cmp	r5, #0
   1220c:	ble	1221c <__assert_fail@plt+0xf54>
   12210:	ldr	r3, [sp, #24]
   12214:	cmp	r3, #3
   12218:	beq	12240 <__assert_fail@plt+0xf78>
   1221c:	ldr	r3, [r7, #36]	; 0x24
   12220:	str	r3, [sp, #20]
   12224:	b	12050 <__assert_fail@plt+0xd88>
   12228:	add	r0, r7, #36	; 0x24
   1222c:	bl	11810 <__assert_fail@plt+0x548>
   12230:	mov	r1, r0
   12234:	ldr	r0, [pc, #100]	; 122a0 <__assert_fail@plt+0xfd8>
   12238:	bl	11028 <printf@plt>
   1223c:	b	121e4 <__assert_fail@plt+0xf1c>
   12240:	ldr	r3, [sp, #28]
   12244:	and	r3, r3, #15
   12248:	ldr	r2, [pc, #84]	; 122a4 <__assert_fail@plt+0xfdc>
   1224c:	add	r3, r2, r3
   12250:	ldrb	r1, [r3, #48]	; 0x30
   12254:	ldr	r0, [pc, #76]	; 122a8 <__assert_fail@plt+0xfe0>
   12258:	bl	11028 <printf@plt>
   1225c:	b	1221c <__assert_fail@plt+0xf54>
   12260:	mov	r0, #10
   12264:	bl	111f0 <putchar@plt>
   12268:	add	sp, sp, #180	; 0xb4
   1226c:	vpop	{d8}
   12270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12274:	nop			; (mov r0, r0)
   12278:	andeq	r0, r0, r0
   1227c:	addmi	r4, pc, r0
   12280:	andeq	r9, r1, r8, asr #7
   12284:	andeq	fp, r2, r4, lsl r1
   12288:	ldrdeq	r9, [r1], -r0
   1228c:	andeq	r9, r1, r0, ror #7
   12290:	andeq	fp, r2, r4, lsr #5
   12294:	andeq	r9, r1, r4, ror #7
   12298:	andeq	fp, r2, ip, lsr #5
   1229c:	strdeq	r9, [r1], -r4
   122a0:	andeq	r9, r1, ip, ror #7
   122a4:	andeq	r9, r1, ip, ror r1
   122a8:	andeq	r9, r1, r0, lsl #8
   122ac:	cmp	r0, #0
   122b0:	ldrne	r0, [r0, #4]
   122b4:	mvneq	r0, #0
   122b8:	bx	lr
   122bc:	cmp	r0, #0
   122c0:	ldrne	r0, [r0]
   122c4:	mvneq	r0, #0
   122c8:	bx	lr
   122cc:	push	{lr}		; (str lr, [sp, #-4]!)
   122d0:	sub	sp, sp, #12
   122d4:	cmp	r0, #0
   122d8:	beq	12320 <__assert_fail@plt+0x1058>
   122dc:	add	r3, r0, #48	; 0x30
   122e0:	ldr	r2, [r0, #48]	; 0x30
   122e4:	add	r2, r2, #1
   122e8:	str	r2, [r0, #48]	; 0x30
   122ec:	ldr	r2, [r0, #8]
   122f0:	cmp	r2, #0
   122f4:	ldreq	r0, [r0, #4]
   122f8:	ldrne	r0, [r0]
   122fc:	mov	r2, #4
   12300:	str	r2, [sp]
   12304:	mov	r2, #2
   12308:	mov	r1, #0
   1230c:	bl	1101c <setsockopt@plt>
   12310:	cmp	r0, #0
   12314:	blt	12334 <__assert_fail@plt+0x106c>
   12318:	add	sp, sp, #12
   1231c:	pop	{pc}		; (ldr pc, [sp], #4)
   12320:	ldr	r3, [pc, #36]	; 1234c <__assert_fail@plt+0x1084>
   12324:	mov	r2, #768	; 0x300
   12328:	ldr	r1, [pc, #32]	; 12350 <__assert_fail@plt+0x1088>
   1232c:	ldr	r0, [pc, #32]	; 12354 <__assert_fail@plt+0x108c>
   12330:	bl	112c8 <__assert_fail@plt>
   12334:	bl	111cc <__errno_location@plt>
   12338:	ldr	r2, [pc, #24]	; 12358 <__assert_fail@plt+0x1090>
   1233c:	ldr	r1, [r0]
   12340:	mov	r0, #1
   12344:	bl	11124 <error@plt>
   12348:	b	12318 <__assert_fail@plt+0x1050>
   1234c:	andeq	r9, r1, r0, asr #3
   12350:	andeq	r9, r1, r0, lsr #6
   12354:	andeq	r9, r1, r0, lsr r3
   12358:	andeq	r9, r1, ip, lsr r3
   1235c:	cmp	r0, #0
   12360:	beq	1238c <__assert_fail@plt+0x10c4>
   12364:	ldr	r3, [r0, #8]
   12368:	cmp	r3, #0
   1236c:	bne	12388 <__assert_fail@plt+0x10c0>
   12370:	ldrh	r3, [r0, #18]
   12374:	rev16	r3, r3
   12378:	uxth	r3, r3
   1237c:	add	r3, r3, #1
   12380:	rev16	r3, r3
   12384:	strh	r3, [r0, #18]
   12388:	bx	lr
   1238c:	push	{r4, lr}
   12390:	ldr	r3, [pc, #12]	; 123a4 <__assert_fail@plt+0x10dc>
   12394:	mov	r2, #780	; 0x30c
   12398:	ldr	r1, [pc, #8]	; 123a8 <__assert_fail@plt+0x10e0>
   1239c:	ldr	r0, [pc, #8]	; 123ac <__assert_fail@plt+0x10e4>
   123a0:	bl	112c8 <__assert_fail@plt>
   123a4:	ldrdeq	r9, [r1], -r0
   123a8:	andeq	r9, r1, r0, lsr #6
   123ac:	andeq	r9, r1, r0, lsr r3
   123b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123b4:	sub	sp, sp, #52	; 0x34
   123b8:	ldr	r3, [pc, #364]	; 1252c <__assert_fail@plt+0x1264>
   123bc:	ldr	r5, [r3]
   123c0:	cmp	r5, #0
   123c4:	beq	123d4 <__assert_fail@plt+0x110c>
   123c8:	ldrb	r3, [r5]
   123cc:	cmp	r3, #0
   123d0:	bne	123dc <__assert_fail@plt+0x1114>
   123d4:	add	sp, sp, #52	; 0x34
   123d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123dc:	mov	fp, r0
   123e0:	mov	r2, #32
   123e4:	mov	r1, #0
   123e8:	add	r0, sp, #16
   123ec:	bl	111e4 <memset@plt>
   123f0:	mov	r3, #2
   123f4:	str	r3, [sp, #20]
   123f8:	str	r3, [sp, #24]
   123fc:	ldr	r4, [pc, #300]	; 12530 <__assert_fail@plt+0x1268>
   12400:	mov	r2, #40	; 0x28
   12404:	mov	r1, #0
   12408:	mov	r0, r4
   1240c:	bl	111e4 <memset@plt>
   12410:	mvn	r3, #124	; 0x7c
   12414:	strb	r3, [r4]
   12418:	mov	r3, #3
   1241c:	strb	r3, [r4, #1]
   12420:	mov	r3, #4
   12424:	strb	r3, [r4, #2]
   12428:	ldrb	r3, [r5]
   1242c:	cmp	r3, #0
   12430:	beq	124fc <__assert_fail@plt+0x1234>
   12434:	ldr	r9, [pc, #248]	; 12534 <__assert_fail@plt+0x126c>
   12438:	mov	r7, #0
   1243c:	b	12488 <__assert_fail@plt+0x11c0>
   12440:	ldr	r0, [sp, #12]
   12444:	ldr	r3, [r0, #20]
   12448:	ldr	r2, [r3, #4]
   1244c:	ldrb	r3, [r4, #1]
   12450:	str	r2, [r3, r4]
   12454:	bl	1128c <freeaddrinfo@plt>
   12458:	ldrb	r3, [r4, #1]
   1245c:	add	r3, r3, #4
   12460:	strb	r3, [r4, #1]
   12464:	cmp	r6, #0
   12468:	beq	124fc <__assert_fail@plt+0x1234>
   1246c:	ldrb	r3, [r6]
   12470:	cmp	r3, #0
   12474:	beq	124fc <__assert_fail@plt+0x1234>
   12478:	mov	r5, r6
   1247c:	ldrb	r3, [r4, #2]
   12480:	cmp	r3, #35	; 0x23
   12484:	bhi	124ec <__assert_fail@plt+0x1224>
   12488:	mov	r1, r9
   1248c:	mov	r0, r5
   12490:	bl	11280 <strpbrk@plt>
   12494:	cmp	r0, #0
   12498:	addne	r6, r0, #1
   1249c:	strbne	r7, [r0]
   124a0:	moveq	r6, r0
   124a4:	add	r3, sp, #12
   124a8:	add	r2, sp, #16
   124ac:	mov	r1, r7
   124b0:	mov	r0, r5
   124b4:	bl	11298 <getaddrinfo@plt>
   124b8:	subs	r8, r0, #0
   124bc:	beq	12440 <__assert_fail@plt+0x1178>
   124c0:	bl	111cc <__errno_location@plt>
   124c4:	ldr	sl, [r0]
   124c8:	mov	r0, r8
   124cc:	bl	11070 <gai_strerror@plt>
   124d0:	str	r0, [sp]
   124d4:	mov	r3, r5
   124d8:	ldr	r2, [pc, #88]	; 12538 <__assert_fail@plt+0x1270>
   124dc:	mov	r1, sl
   124e0:	mov	r0, #1
   124e4:	bl	11124 <error@plt>
   124e8:	b	12440 <__assert_fail@plt+0x1178>
   124ec:	ldr	r2, [pc, #72]	; 1253c <__assert_fail@plt+0x1274>
   124f0:	mov	r1, #0
   124f4:	mov	r0, #1
   124f8:	bl	11124 <error@plt>
   124fc:	ldr	r1, [fp, #4]
   12500:	ldr	r2, [pc, #40]	; 12530 <__assert_fail@plt+0x1268>
   12504:	ldrb	r3, [r2, #1]
   12508:	str	r1, [r3, r2]
   1250c:	ldrb	r3, [r2, #1]
   12510:	add	r3, r3, #4
   12514:	uxtb	r3, r3
   12518:	strb	r3, [r2, #1]
   1251c:	add	r3, r3, #1
   12520:	ldr	r2, [pc, #4]	; 1252c <__assert_fail@plt+0x1264>
   12524:	str	r3, [r2, #20]
   12528:	b	123d4 <__assert_fail@plt+0x110c>
   1252c:	andeq	fp, r2, ip, lsr #5
   12530:	andeq	fp, r2, r0, lsl r3
   12534:	andeq	r9, r1, r8, lsl #8
   12538:	andeq	r9, r1, r0, lsl r4
   1253c:	andeq	r9, r1, r0, lsr #8
   12540:	push	{r4, r5, r6, lr}
   12544:	sub	sp, sp, #112	; 0x70
   12548:	mov	r6, r0
   1254c:	mov	r5, r1
   12550:	ldr	r0, [r1]
   12554:	bl	16d90 <argp_parse@@Base+0xd04>
   12558:	ldr	r1, [pc, #508]	; 1275c <__assert_fail@plt+0x1494>
   1255c:	mov	r0, #6
   12560:	bl	11220 <setlocale@plt>
   12564:	bl	11190 <getpid@plt>
   12568:	uxth	r0, r0
   1256c:	ldr	r3, [pc, #492]	; 12760 <__assert_fail@plt+0x1498>
   12570:	str	r0, [r3]
   12574:	ldr	r2, [pc, #488]	; 12764 <__assert_fail@plt+0x149c>
   12578:	ldr	r3, [pc, #488]	; 12768 <__assert_fail@plt+0x14a0>
   1257c:	str	r2, [r3]
   12580:	ldr	r4, [pc, #484]	; 1276c <__assert_fail@plt+0x14a4>
   12584:	add	r1, r4, #24
   12588:	ldr	r0, [pc, #480]	; 12770 <__assert_fail@plt+0x14a8>
   1258c:	bl	16b98 <argp_parse@@Base+0xb0c>
   12590:	mov	r3, #0
   12594:	str	r3, [sp, #4]
   12598:	str	r3, [sp]
   1259c:	mov	r2, r5
   125a0:	mov	r1, r6
   125a4:	add	r0, r4, #32
   125a8:	bl	1608c <argp_parse@@Base>
   125ac:	ldr	r3, [pc, #448]	; 12774 <__assert_fail@plt+0x14ac>
   125b0:	ldr	r3, [r3, #16]
   125b4:	cmp	r3, #0
   125b8:	beq	125c8 <__assert_fail@plt+0x1300>
   125bc:	ldrb	r3, [r3]
   125c0:	cmp	r3, #0
   125c4:	bne	125d8 <__assert_fail@plt+0x1310>
   125c8:	ldr	r2, [pc, #424]	; 12778 <__assert_fail@plt+0x14b0>
   125cc:	mov	r1, #0
   125d0:	mov	r0, #1
   125d4:	bl	11124 <error@plt>
   125d8:	mov	r2, #32
   125dc:	mov	r1, #0
   125e0:	add	r0, sp, #80	; 0x50
   125e4:	bl	111e4 <memset@plt>
   125e8:	mov	r3, #2
   125ec:	str	r3, [sp, #84]	; 0x54
   125f0:	mov	r3, #194	; 0xc2
   125f4:	str	r3, [sp, #80]	; 0x50
   125f8:	ldr	r3, [pc, #372]	; 12774 <__assert_fail@plt+0x14ac>
   125fc:	ldr	r5, [r3, #16]
   12600:	add	r3, sp, #76	; 0x4c
   12604:	add	r2, sp, #80	; 0x50
   12608:	mov	r1, #0
   1260c:	mov	r0, r5
   12610:	bl	11298 <getaddrinfo@plt>
   12614:	cmp	r0, #0
   12618:	bne	12740 <__assert_fail@plt+0x1478>
   1261c:	ldr	r4, [sp, #76]	; 0x4c
   12620:	ldr	r6, [pc, #340]	; 1277c <__assert_fail@plt+0x14b4>
   12624:	ldr	r2, [r4, #16]
   12628:	ldr	r1, [r4, #20]
   1262c:	mov	r0, r6
   12630:	bl	11088 <memcpy@plt>
   12634:	ldr	r3, [pc, #304]	; 1276c <__assert_fail@plt+0x14a4>
   12638:	ldr	r3, [r3, #8]
   1263c:	rev16	r3, r3
   12640:	strh	r3, [r6, #2]
   12644:	ldr	r1, [r4, #16]
   12648:	ldr	r0, [r4, #20]
   1264c:	mov	r3, #1
   12650:	str	r3, [sp, #8]
   12654:	mov	r3, #0
   12658:	str	r3, [sp, #4]
   1265c:	str	r3, [sp]
   12660:	mov	r3, #46	; 0x2e
   12664:	ldr	r2, [pc, #276]	; 12780 <__assert_fail@plt+0x14b8>
   12668:	bl	1122c <getnameinfo@plt>
   1266c:	ldr	r3, [sp, #76]	; 0x4c
   12670:	ldr	r1, [r3, #24]
   12674:	ldr	r3, [pc, #240]	; 1276c <__assert_fail@plt+0x14a4>
   12678:	ldr	r3, [r3, #4]
   1267c:	ldr	r2, [pc, #252]	; 12780 <__assert_fail@plt+0x14b8>
   12680:	cmp	r1, #0
   12684:	moveq	r1, r5
   12688:	ldr	r0, [pc, #244]	; 12784 <__assert_fail@plt+0x14bc>
   1268c:	bl	11028 <printf@plt>
   12690:	mov	r0, r5
   12694:	bl	16c80 <argp_parse@@Base+0xbf4>
   12698:	ldr	r0, [sp, #76]	; 0x4c
   1269c:	bl	1128c <freeaddrinfo@plt>
   126a0:	mov	r0, r6
   126a4:	bl	123b0 <__assert_fail@plt+0x10e8>
   126a8:	ldr	r5, [pc, #196]	; 12774 <__assert_fail@plt+0x14ac>
   126ac:	ldr	r3, [r5, #4]
   126b0:	str	r3, [sp, #4]
   126b4:	ldr	r3, [r6, #12]
   126b8:	str	r3, [sp]
   126bc:	ldm	r6, {r1, r2, r3}
   126c0:	add	r0, sp, #16
   126c4:	bl	11840 <__assert_fail@plt+0x578>
   126c8:	mvn	r2, #0
   126cc:	ldr	r3, [pc, #180]	; 12788 <__assert_fail@plt+0x14c0>
   126d0:	str	r2, [r3]
   126d4:	ldr	r3, [r5, #24]
   126d8:	cmp	r3, #0
   126dc:	bne	12754 <__assert_fail@plt+0x148c>
   126e0:	ldr	r3, [pc, #132]	; 1276c <__assert_fail@plt+0x14a4>
   126e4:	ldr	r2, [r3, #4]
   126e8:	cmp	r2, #0
   126ec:	ble	12738 <__assert_fail@plt+0x1470>
   126f0:	mov	r4, #1
   126f4:	mov	r5, r3
   126f8:	ldr	r6, [pc, #116]	; 12774 <__assert_fail@plt+0x14ac>
   126fc:	ldr	r3, [r5, #12]
   12700:	mov	r1, r4
   12704:	add	r0, sp, #16
   12708:	bl	11fc8 <__assert_fail@plt+0xd00>
   1270c:	add	r0, sp, #16
   12710:	bl	122cc <__assert_fail@plt+0x1004>
   12714:	add	r0, sp, #16
   12718:	bl	1235c <__assert_fail@plt+0x1094>
   1271c:	add	r4, r4, #1
   12720:	ldr	r3, [r6, #24]
   12724:	cmp	r3, #0
   12728:	bne	12754 <__assert_fail@plt+0x148c>
   1272c:	ldr	r2, [r5, #4]
   12730:	cmp	r2, r4
   12734:	bge	126fc <__assert_fail@plt+0x1434>
   12738:	mov	r0, #1
   1273c:	bl	1119c <exit@plt>
   12740:	ldr	r2, [pc, #48]	; 12778 <__assert_fail@plt+0x14b0>
   12744:	mov	r1, #0
   12748:	mov	r0, #1
   1274c:	bl	11124 <error@plt>
   12750:	b	1261c <__assert_fail@plt+0x1354>
   12754:	mov	r0, #0
   12758:	bl	1119c <exit@plt>
   1275c:	andeq	sl, r1, ip, lsl #3
   12760:	andeq	fp, r2, r8, lsr r3
   12764:	andeq	r9, r1, ip, lsr r4
   12768:	andeq	fp, r2, r0, ror r3
   1276c:	andeq	fp, r2, r4, lsl r1
   12770:	andeq	r9, r1, r4, asr r4
   12774:	andeq	fp, r2, ip, lsr #5
   12778:	andeq	r9, r1, r0, ror #8
   1277c:	andeq	fp, r2, r0, lsl #6
   12780:	andeq	fp, r2, r0, asr #6
   12784:	andeq	r9, r1, r0, ror r4
   12788:	andeq	fp, r2, ip, lsr r3
   1278c:	cmp	r1, #7
   12790:	bls	127d0 <__assert_fail@plt+0x1508>
   12794:	push	{r4, r5, r6, lr}
   12798:	mov	r4, r0
   1279c:	strb	r2, [r0]
   127a0:	mov	r5, #0
   127a4:	strb	r5, [r0, #1]
   127a8:	strh	r5, [r0, #2]
   127ac:	ldr	r2, [sp, #16]
   127b0:	rev16	r2, r2
   127b4:	strh	r2, [r0, #6]
   127b8:	rev16	r3, r3
   127bc:	strh	r3, [r0, #4]
   127c0:	bl	1285c <__assert_fail@plt+0x1594>
   127c4:	strh	r0, [r4, #2]
   127c8:	mov	r0, r5
   127cc:	pop	{r4, r5, r6, pc}
   127d0:	mvn	r0, #0
   127d4:	bx	lr
   127d8:	push	{r4, r5, r6, lr}
   127dc:	ldrb	ip, [r0]
   127e0:	and	ip, ip, #15
   127e4:	lsl	ip, ip, #2
   127e8:	add	lr, ip, #8
   127ec:	cmp	lr, r1
   127f0:	bhi	12828 <__assert_fail@plt+0x1560>
   127f4:	add	r4, r0, ip
   127f8:	str	r0, [r2]
   127fc:	str	r4, [r3]
   12800:	ldrh	r5, [r4, #2]
   12804:	mov	r3, #0
   12808:	strh	r3, [r4, #2]
   1280c:	sub	r1, r1, ip
   12810:	mov	r0, r4
   12814:	bl	1285c <__assert_fail@plt+0x1594>
   12818:	strh	r0, [r4, #2]
   1281c:	subs	r0, r5, r0
   12820:	movne	r0, #1
   12824:	pop	{r4, r5, r6, pc}
   12828:	mvn	r0, #0
   1282c:	pop	{r4, r5, r6, pc}
   12830:	push	{lr}		; (str lr, [sp, #-4]!)
   12834:	sub	sp, sp, #12
   12838:	str	r3, [sp]
   1283c:	mov	r3, r2
   12840:	mov	r2, #8
   12844:	bl	1278c <__assert_fail@plt+0x14c4>
   12848:	add	sp, sp, #12
   1284c:	pop	{pc}		; (ldr pc, [sp], #4)
   12850:	push	{r4, lr}
   12854:	bl	127d8 <__assert_fail@plt+0x1510>
   12858:	pop	{r4, pc}
   1285c:	push	{lr}		; (str lr, [sp, #-4]!)
   12860:	sub	sp, sp, #12
   12864:	mov	r3, #0
   12868:	strh	r3, [sp, #6]
   1286c:	cmp	r1, #1
   12870:	ble	128d8 <__assert_fail@plt+0x1610>
   12874:	mov	ip, r0
   12878:	mov	r3, r1
   1287c:	mov	r2, #0
   12880:	ldrh	lr, [ip], #2
   12884:	add	r2, r2, lr
   12888:	sub	r3, r3, #2
   1288c:	cmp	r3, #1
   12890:	bgt	12880 <__assert_fail@plt+0x15b8>
   12894:	sub	r1, r1, #2
   12898:	bic	r3, r1, #1
   1289c:	add	r3, r3, #2
   128a0:	add	r0, r0, r3
   128a4:	and	r1, r1, #1
   128a8:	cmp	r1, #1
   128ac:	ldrbeq	r3, [r0]
   128b0:	strbeq	r3, [sp, #6]
   128b4:	ldrheq	r3, [sp, #6]
   128b8:	addeq	r2, r2, r3
   128bc:	uxth	r0, r2
   128c0:	add	r2, r0, r2, asr #16
   128c4:	add	r2, r2, r2, asr #16
   128c8:	mvn	r0, r2
   128cc:	uxth	r0, r0
   128d0:	add	sp, sp, #12
   128d4:	pop	{pc}		; (ldr pc, [sp], #4)
   128d8:	mov	r2, #0
   128dc:	b	128a8 <__assert_fail@plt+0x15e0>
   128e0:	ldr	r3, [r0]
   128e4:	ldr	r2, [r0, #4]
   128e8:	cmp	r2, #0
   128ec:	beq	12928 <__assert_fail@plt+0x1660>
   128f0:	add	r3, r3, #24
   128f4:	b	12904 <__assert_fail@plt+0x163c>
   128f8:	add	r3, r3, #24
   128fc:	subs	r2, r2, #1
   12900:	beq	12920 <__assert_fail@plt+0x1658>
   12904:	ldr	r0, [r3, #-24]	; 0xffffffe8
   12908:	cmp	r0, #0
   1290c:	beq	128f8 <__assert_fail@plt+0x1630>
   12910:	ldr	r1, [r3, #-12]
   12914:	tst	r1, #2
   12918:	bne	128f8 <__assert_fail@plt+0x1630>
   1291c:	bx	lr
   12920:	mov	r0, #0
   12924:	bx	lr
   12928:	mov	r0, #0
   1292c:	bx	lr
   12930:	ldr	r2, [r0, #8]
   12934:	cmp	r2, #0
   12938:	beq	12944 <__assert_fail@plt+0x167c>
   1293c:	mov	r0, #0
   12940:	bx	lr
   12944:	ldr	r2, [r1, #8]
   12948:	cmp	r2, #0
   1294c:	bne	1293c <__assert_fail@plt+0x1674>
   12950:	ldr	r2, [r0, #12]
   12954:	ldr	r1, [r1, #12]
   12958:	orr	r2, r2, r1
   1295c:	tst	r2, #16
   12960:	ldreq	r2, [r3]
   12964:	addeq	r1, r2, #1
   12968:	streq	r1, [r3]
   1296c:	ldreq	r3, [r0, #4]
   12970:	strbeq	r3, [r2]
   12974:	b	1293c <__assert_fail@plt+0x1674>
   12978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1297c:	sub	sp, sp, #12
   12980:	ldr	r4, [r0]
   12984:	ldr	r9, [r0, #8]
   12988:	ldr	r5, [r0, #4]
   1298c:	cmp	r5, #0
   12990:	beq	129e4 <__assert_fail@plt+0x171c>
   12994:	str	r3, [sp, #4]
   12998:	str	r2, [sp]
   1299c:	mov	fp, r1
   129a0:	mov	sl, r4
   129a4:	mov	r8, #0
   129a8:	b	12a24 <__assert_fail@plt+0x175c>
   129ac:	and	r3, r6, #4
   129b0:	cmp	r3, #0
   129b4:	moveq	sl, r4
   129b8:	tst	r6, #2
   129bc:	beq	129c8 <__assert_fail@plt+0x1700>
   129c0:	add	r9, r9, #1
   129c4:	b	12a00 <__assert_fail@plt+0x1738>
   129c8:	ldr	r3, [sp, #4]
   129cc:	ldr	r2, [sp]
   129d0:	mov	r1, sl
   129d4:	mov	r0, r4
   129d8:	blx	fp
   129dc:	mov	r8, r0
   129e0:	b	129c0 <__assert_fail@plt+0x16f8>
   129e4:	mov	r8, #0
   129e8:	mov	r0, r8
   129ec:	add	sp, sp, #12
   129f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129f4:	ldrb	r3, [r9]
   129f8:	cmp	r3, r7
   129fc:	beq	129ac <__assert_fail@plt+0x16e4>
   12a00:	add	r4, r4, #24
   12a04:	subs	r5, r5, #1
   12a08:	movne	r3, #1
   12a0c:	moveq	r3, #0
   12a10:	cmp	r8, #0
   12a14:	movne	r3, #0
   12a18:	andeq	r3, r3, #1
   12a1c:	cmp	r3, #0
   12a20:	beq	129e8 <__assert_fail@plt+0x1720>
   12a24:	ldr	r6, [r4, #12]
   12a28:	tst	r6, #8
   12a2c:	bne	12a00 <__assert_fail@plt+0x1738>
   12a30:	ldr	r7, [r4, #4]
   12a34:	sub	r3, r7, #1
   12a38:	cmp	r3, #254	; 0xfe
   12a3c:	bhi	12a00 <__assert_fail@plt+0x1738>
   12a40:	bl	11184 <__ctype_b_loc@plt>
   12a44:	ldr	r2, [r0]
   12a48:	lsl	r3, r7, #1
   12a4c:	ldrh	r3, [r2, r3]
   12a50:	tst	r3, #16384	; 0x4000
   12a54:	bne	129f4 <__assert_fail@plt+0x172c>
   12a58:	b	12a00 <__assert_fail@plt+0x1738>
   12a5c:	push	{r4, r5, r6, lr}
   12a60:	ldr	r4, [r0, #12]
   12a64:	ands	r4, r4, #8
   12a68:	movne	r4, #0
   12a6c:	bne	12a9c <__assert_fail@plt+0x17d4>
   12a70:	ldr	r5, [r0, #4]
   12a74:	sub	r3, r5, #1
   12a78:	cmp	r3, #254	; 0xfe
   12a7c:	bhi	12a9c <__assert_fail@plt+0x17d4>
   12a80:	bl	11184 <__ctype_b_loc@plt>
   12a84:	ldr	r2, [r0]
   12a88:	lsl	r3, r5, #1
   12a8c:	ldrh	r3, [r2, r3]
   12a90:	and	r3, r3, #16384	; 0x4000
   12a94:	cmp	r3, #0
   12a98:	movne	r4, r5
   12a9c:	mov	r0, r4
   12aa0:	pop	{r4, r5, r6, pc}
   12aa4:	push	{r4, lr}
   12aa8:	mov	r4, r0
   12aac:	bl	11184 <__ctype_b_loc@plt>
   12ab0:	b	12abc <__assert_fail@plt+0x17f4>
   12ab4:	add	r3, r3, #1
   12ab8:	str	r3, [r4]
   12abc:	ldr	r3, [r4]
   12ac0:	ldrb	r2, [r3]
   12ac4:	ldr	ip, [r0]
   12ac8:	lsl	r1, r2, #1
   12acc:	ldrh	r1, [ip, r1]
   12ad0:	tst	r1, #8192	; 0x2000
   12ad4:	bne	12ab4 <__assert_fail@plt+0x17ec>
   12ad8:	subs	ip, r2, #45	; 0x2d
   12adc:	movne	ip, #1
   12ae0:	cmp	r2, #0
   12ae4:	beq	12b18 <__assert_fail@plt+0x1850>
   12ae8:	tst	r1, #8
   12aec:	bne	12b18 <__assert_fail@plt+0x1850>
   12af0:	add	r3, r3, #1
   12af4:	str	r3, [r4]
   12af8:	ldrb	r2, [r3]
   12afc:	cmp	r2, #0
   12b00:	beq	12b18 <__assert_fail@plt+0x1850>
   12b04:	ldr	r1, [r0]
   12b08:	lsl	r2, r2, #1
   12b0c:	ldrh	r2, [r1, r2]
   12b10:	tst	r2, #8
   12b14:	beq	12af0 <__assert_fail@plt+0x1828>
   12b18:	mov	r0, ip
   12b1c:	pop	{r4, pc}
   12b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b24:	add	fp, sp, #32
   12b28:	sub	sp, sp, #12
   12b2c:	ldr	r5, [r0, #4]
   12b30:	cmp	r5, #0
   12b34:	bne	12b40 <__assert_fail@plt+0x1878>
   12b38:	sub	sp, fp, #32
   12b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b40:	mov	r9, r1
   12b44:	mov	r6, r0
   12b48:	ldr	r0, [r0, #8]
   12b4c:	bl	111a8 <strlen@plt>
   12b50:	add	r3, r0, #15
   12b54:	bic	r3, r3, #7
   12b58:	sub	sp, sp, r3
   12b5c:	mov	sl, sp
   12b60:	sub	r7, fp, #36	; 0x24
   12b64:	str	sp, [r7, #-4]!
   12b68:	ldr	r4, [r6]
   12b6c:	ldr	r8, [pc, #336]	; 12cc4 <__assert_fail@plt+0x19fc>
   12b70:	ldr	r2, [r4, #20]
   12b74:	mov	r3, r7
   12b78:	ldr	r2, [r2, #24]
   12b7c:	mov	r1, r8
   12b80:	mov	r0, r4
   12b84:	bl	12978 <__assert_fail@plt+0x16b0>
   12b88:	add	r4, r4, #28
   12b8c:	subs	r5, r5, #1
   12b90:	bne	12b70 <__assert_fail@plt+0x18a8>
   12b94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12b98:	cmp	sl, r3
   12b9c:	bcc	12bf4 <__assert_fail@plt+0x192c>
   12ba0:	ldr	r4, [r6]
   12ba4:	ldr	r5, [r6, #4]
   12ba8:	cmp	r5, #0
   12bac:	beq	12b38 <__assert_fail@plt+0x1870>
   12bb0:	ldr	r7, [pc, #272]	; 12cc8 <__assert_fail@plt+0x1a00>
   12bb4:	ldr	r2, [r4, #20]
   12bb8:	mov	r3, r9
   12bbc:	ldr	r2, [r2, #24]
   12bc0:	mov	r1, r7
   12bc4:	mov	r0, r4
   12bc8:	bl	12978 <__assert_fail@plt+0x16b0>
   12bcc:	add	r4, r4, #28
   12bd0:	subs	r5, r5, #1
   12bd4:	bne	12bb4 <__assert_fail@plt+0x18ec>
   12bd8:	ldr	r7, [r6]
   12bdc:	ldr	r8, [r6, #4]
   12be0:	cmp	r8, #0
   12be4:	beq	12b38 <__assert_fail@plt+0x1870>
   12be8:	add	r7, r7, #28
   12bec:	ldr	sl, [pc, #216]	; 12ccc <__assert_fail@plt+0x1a04>
   12bf0:	b	12cac <__assert_fail@plt+0x19e4>
   12bf4:	add	r2, r3, #1
   12bf8:	str	r2, [fp, #-40]	; 0xffffffd8
   12bfc:	mov	r2, #0
   12c00:	strb	r2, [r3]
   12c04:	mov	r2, sl
   12c08:	ldr	r1, [pc, #192]	; 12cd0 <__assert_fail@plt+0x1a08>
   12c0c:	mov	r0, r9
   12c10:	bl	18014 <argp_parse@@Base+0x1f88>
   12c14:	b	12ba0 <__assert_fail@plt+0x18d8>
   12c18:	tst	r1, #16
   12c1c:	bne	12c40 <__assert_fail@plt+0x1978>
   12c20:	ldr	r3, [r6, #8]
   12c24:	cmp	r3, #0
   12c28:	beq	12c90 <__assert_fail@plt+0x19c8>
   12c2c:	tst	r1, #1
   12c30:	ldrne	r1, [pc, #156]	; 12cd4 <__assert_fail@plt+0x1a0c>
   12c34:	moveq	r1, sl
   12c38:	mov	r0, r9
   12c3c:	bl	18014 <argp_parse@@Base+0x1f88>
   12c40:	add	r4, r4, #24
   12c44:	subs	r5, r5, #1
   12c48:	beq	12ca0 <__assert_fail@plt+0x19d8>
   12c4c:	ldr	r2, [r4]
   12c50:	cmp	r2, #0
   12c54:	beq	12c40 <__assert_fail@plt+0x1978>
   12c58:	ldr	r1, [r4, #12]
   12c5c:	and	r3, r1, #4
   12c60:	cmp	r3, #0
   12c64:	moveq	r6, r4
   12c68:	tst	r1, #2
   12c6c:	bne	12c40 <__assert_fail@plt+0x1978>
   12c70:	ldr	r3, [r4, #8]
   12c74:	ldr	r0, [r6, #12]
   12c78:	orr	r1, r1, r0
   12c7c:	cmp	r3, #0
   12c80:	beq	12c18 <__assert_fail@plt+0x1950>
   12c84:	tst	r1, #16
   12c88:	beq	12c2c <__assert_fail@plt+0x1964>
   12c8c:	b	12c40 <__assert_fail@plt+0x1978>
   12c90:	ldr	r1, [pc, #64]	; 12cd8 <__assert_fail@plt+0x1a10>
   12c94:	mov	r0, r9
   12c98:	bl	18014 <argp_parse@@Base+0x1f88>
   12c9c:	b	12c40 <__assert_fail@plt+0x1978>
   12ca0:	add	r7, r7, #28
   12ca4:	subs	r8, r8, #1
   12ca8:	beq	12b38 <__assert_fail@plt+0x1870>
   12cac:	ldr	r4, [r7, #-28]	; 0xffffffe4
   12cb0:	ldr	r5, [r7, #-24]	; 0xffffffe8
   12cb4:	cmp	r5, #0
   12cb8:	beq	12ca0 <__assert_fail@plt+0x19d8>
   12cbc:	mov	r6, r4
   12cc0:	b	12c4c <__assert_fail@plt+0x1984>
   12cc4:	andeq	r2, r1, r0, lsr r9
   12cc8:	andeq	r2, r1, r0, ror pc
   12ccc:	andeq	r9, r1, r8, ror r7
   12cd0:	andeq	r9, r1, r0, ror #14
   12cd4:	andeq	r9, r1, r8, ror #14
   12cd8:	andeq	r9, r1, r4, lsl #15
   12cdc:	push	{r4, r5, r6, lr}
   12ce0:	mov	r5, r0
   12ce4:	ldr	r0, [r0, #12]
   12ce8:	cmp	r0, #0
   12cec:	beq	12d04 <__assert_fail@plt+0x1a3c>
   12cf0:	ldr	r4, [r0, #24]
   12cf4:	bl	16c80 <argp_parse@@Base+0xbf4>
   12cf8:	mov	r0, r4
   12cfc:	cmp	r4, #0
   12d00:	bne	12cf0 <__assert_fail@plt+0x1a28>
   12d04:	ldr	r3, [r5, #4]
   12d08:	cmp	r3, #0
   12d0c:	bne	12d1c <__assert_fail@plt+0x1a54>
   12d10:	mov	r0, r5
   12d14:	bl	16c80 <argp_parse@@Base+0xbf4>
   12d18:	pop	{r4, r5, r6, pc}
   12d1c:	ldr	r0, [r5]
   12d20:	bl	16c80 <argp_parse@@Base+0xbf4>
   12d24:	ldr	r0, [r5, #8]
   12d28:	bl	16c80 <argp_parse@@Base+0xbf4>
   12d2c:	b	12d10 <__assert_fail@plt+0x1a48>
   12d30:	push	{r4, r5, r6, r7, r8, lr}
   12d34:	mov	r6, r1
   12d38:	ldr	r7, [r0]
   12d3c:	ldr	r3, [r0, #4]
   12d40:	sub	r8, r3, #1
   12d44:	cmp	r3, #0
   12d48:	bne	12da4 <__assert_fail@plt+0x1adc>
   12d4c:	mov	r7, #0
   12d50:	b	12d8c <__assert_fail@plt+0x1ac4>
   12d54:	sub	r5, r5, #1
   12d58:	add	r4, r4, #24
   12d5c:	cmn	r5, #1
   12d60:	beq	12d94 <__assert_fail@plt+0x1acc>
   12d64:	ldr	r0, [r4, #-24]	; 0xffffffe8
   12d68:	cmp	r0, #0
   12d6c:	beq	12d54 <__assert_fail@plt+0x1a8c>
   12d70:	ldr	r3, [r4, #-12]
   12d74:	tst	r3, #2
   12d78:	bne	12d54 <__assert_fail@plt+0x1a8c>
   12d7c:	mov	r1, r6
   12d80:	bl	11004 <strcmp@plt>
   12d84:	cmp	r0, #0
   12d88:	bne	12d54 <__assert_fail@plt+0x1a8c>
   12d8c:	mov	r0, r7
   12d90:	pop	{r4, r5, r6, r7, r8, pc}
   12d94:	add	r7, r7, #28
   12d98:	sub	r8, r8, #1
   12d9c:	cmn	r8, #1
   12da0:	beq	12dc0 <__assert_fail@plt+0x1af8>
   12da4:	ldr	r4, [r7]
   12da8:	ldr	r3, [r7, #4]
   12dac:	sub	r5, r3, #1
   12db0:	cmp	r3, #0
   12db4:	beq	12d94 <__assert_fail@plt+0x1acc>
   12db8:	add	r4, r4, #24
   12dbc:	b	12d64 <__assert_fail@plt+0x1a9c>
   12dc0:	mov	r7, #0
   12dc4:	b	12d8c <__assert_fail@plt+0x1ac4>
   12dc8:	push	{r4, r5, r6, lr}
   12dcc:	ldr	r4, [r0, #16]
   12dd0:	ldr	r0, [r0, #8]
   12dd4:	cmp	r0, #0
   12dd8:	moveq	r5, #0
   12ddc:	beq	12df0 <__assert_fail@plt+0x1b28>
   12de0:	mov	r1, #10
   12de4:	bl	111b4 <strchr@plt>
   12de8:	adds	r5, r0, #0
   12dec:	movne	r5, #1
   12df0:	cmp	r4, #0
   12df4:	beq	12e18 <__assert_fail@plt+0x1b50>
   12df8:	ldr	r0, [r4]
   12dfc:	cmp	r0, #0
   12e00:	beq	12e18 <__assert_fail@plt+0x1b50>
   12e04:	bl	12dc8 <__assert_fail@plt+0x1b00>
   12e08:	add	r5, r5, r0
   12e0c:	ldr	r0, [r4, #16]!
   12e10:	cmp	r0, #0
   12e14:	bne	12e04 <__assert_fail@plt+0x1b3c>
   12e18:	mov	r0, r5
   12e1c:	pop	{r4, r5, r6, pc}
   12e20:	push	{r4, r5, r6, r7, r8, lr}
   12e24:	mov	r4, r0
   12e28:	mov	r5, r1
   12e2c:	ldr	r3, [r0, #28]
   12e30:	ldr	r2, [r0, #24]
   12e34:	sub	r3, r3, r2
   12e38:	ldr	r2, [r0, #16]
   12e3c:	cmp	r3, r2
   12e40:	bhi	12e5c <__assert_fail@plt+0x1b94>
   12e44:	ldr	r3, [r4, #20]
   12e48:	cmp	r3, #0
   12e4c:	subge	r5, r5, r3
   12e50:	mov	r6, #32
   12e54:	mov	r7, #1
   12e58:	b	12e78 <__assert_fail@plt+0x1bb0>
   12e5c:	bl	17980 <argp_parse@@Base+0x18f4>
   12e60:	b	12e44 <__assert_fail@plt+0x1b7c>
   12e64:	ldr	r3, [r4, #28]
   12e68:	add	r2, r3, #1
   12e6c:	str	r2, [r4, #28]
   12e70:	strb	r6, [r3]
   12e74:	sub	r5, r5, #1
   12e78:	cmp	r5, #0
   12e7c:	ble	12ea8 <__assert_fail@plt+0x1be0>
   12e80:	ldr	r2, [r4, #28]
   12e84:	ldr	r3, [r4, #32]
   12e88:	cmp	r2, r3
   12e8c:	bcc	12e64 <__assert_fail@plt+0x1b9c>
   12e90:	mov	r1, r7
   12e94:	mov	r0, r4
   12e98:	bl	17f24 <argp_parse@@Base+0x1e98>
   12e9c:	cmp	r0, #0
   12ea0:	beq	12e74 <__assert_fail@plt+0x1bac>
   12ea4:	b	12e64 <__assert_fail@plt+0x1b9c>
   12ea8:	pop	{r4, r5, r6, r7, r8, pc}
   12eac:	push	{r4, r5, r6, lr}
   12eb0:	mov	r4, r0
   12eb4:	mov	r5, r1
   12eb8:	ldr	r3, [r0, #28]
   12ebc:	ldr	r2, [r0, #24]
   12ec0:	sub	r3, r3, r2
   12ec4:	ldr	r2, [r0, #16]
   12ec8:	cmp	r3, r2
   12ecc:	bhi	12f10 <__assert_fail@plt+0x1c48>
   12ed0:	ldr	r3, [r4, #20]
   12ed4:	cmp	r3, #0
   12ed8:	addge	r5, r5, r3
   12edc:	ldr	r3, [r4, #8]
   12ee0:	cmp	r5, r3
   12ee4:	bcc	12f30 <__assert_fail@plt+0x1c68>
   12ee8:	ldr	r2, [r4, #28]
   12eec:	ldr	r3, [r4, #32]
   12ef0:	cmp	r2, r3
   12ef4:	bcs	12f18 <__assert_fail@plt+0x1c50>
   12ef8:	ldr	r3, [r4, #28]
   12efc:	add	r2, r3, #1
   12f00:	str	r2, [r4, #28]
   12f04:	mov	r2, #10
   12f08:	strb	r2, [r3]
   12f0c:	pop	{r4, r5, r6, pc}
   12f10:	bl	17980 <argp_parse@@Base+0x18f4>
   12f14:	b	12ed0 <__assert_fail@plt+0x1c08>
   12f18:	mov	r1, #1
   12f1c:	mov	r0, r4
   12f20:	bl	17f24 <argp_parse@@Base+0x1e98>
   12f24:	cmp	r0, #0
   12f28:	popeq	{r4, r5, r6, pc}
   12f2c:	b	12ef8 <__assert_fail@plt+0x1c30>
   12f30:	ldr	r2, [r4, #28]
   12f34:	ldr	r3, [r4, #32]
   12f38:	cmp	r2, r3
   12f3c:	bcs	12f58 <__assert_fail@plt+0x1c90>
   12f40:	ldr	r3, [r4, #28]
   12f44:	add	r2, r3, #1
   12f48:	str	r2, [r4, #28]
   12f4c:	mov	r2, #32
   12f50:	strb	r2, [r3]
   12f54:	pop	{r4, r5, r6, pc}
   12f58:	mov	r1, #1
   12f5c:	mov	r0, r4
   12f60:	bl	17f24 <argp_parse@@Base+0x1e98>
   12f64:	cmp	r0, #0
   12f68:	bne	12f40 <__assert_fail@plt+0x1c78>
   12f6c:	pop	{r4, r5, r6, pc}
   12f70:	push	{r4, r5, r6, lr}
   12f74:	ldr	r5, [r0, #8]
   12f78:	ldr	r2, [r0, #12]
   12f7c:	ldr	ip, [r1, #12]
   12f80:	orr	r2, r2, ip
   12f84:	cmp	r5, #0
   12f88:	beq	12fd4 <__assert_fail@plt+0x1d0c>
   12f8c:	tst	r2, #16
   12f90:	bne	12fcc <__assert_fail@plt+0x1d04>
   12f94:	mov	r6, r3
   12f98:	mov	r4, r0
   12f9c:	tst	r2, #1
   12fa0:	bne	12fe4 <__assert_fail@plt+0x1d1c>
   12fa4:	mov	r0, r5
   12fa8:	bl	111a8 <strlen@plt>
   12fac:	add	r1, r0, #6
   12fb0:	mov	r0, r6
   12fb4:	bl	12eac <__assert_fail@plt+0x1be4>
   12fb8:	mov	r3, r5
   12fbc:	ldr	r2, [r4, #4]
   12fc0:	ldr	r1, [pc, #52]	; 12ffc <__assert_fail@plt+0x1d34>
   12fc4:	mov	r0, r6
   12fc8:	bl	18014 <argp_parse@@Base+0x1f88>
   12fcc:	mov	r0, #0
   12fd0:	pop	{r4, r5, r6, pc}
   12fd4:	ldr	r5, [r1, #8]
   12fd8:	cmp	r5, #0
   12fdc:	beq	12fcc <__assert_fail@plt+0x1d04>
   12fe0:	b	12f8c <__assert_fail@plt+0x1cc4>
   12fe4:	mov	r3, r5
   12fe8:	ldr	r2, [r0, #4]
   12fec:	ldr	r1, [pc, #12]	; 13000 <__assert_fail@plt+0x1d38>
   12ff0:	mov	r0, r6
   12ff4:	bl	18014 <argp_parse@@Base+0x1f88>
   12ff8:	b	12fcc <__assert_fail@plt+0x1d04>
   12ffc:	muleq	r1, r8, r7
   13000:	andeq	r9, r1, ip, lsl #15
   13004:	push	{r4, r5, r6, lr}
   13008:	subs	r5, r2, #0
   1300c:	popeq	{r4, r5, r6, pc}
   13010:	ldr	ip, [r5, #20]
   13014:	cmp	ip, #0
   13018:	popeq	{r4, r5, r6, pc}
   1301c:	mov	r6, r1
   13020:	mov	r4, r0
   13024:	mov	r1, r3
   13028:	mov	r0, r5
   1302c:	bl	16b00 <argp_parse@@Base+0xa74>
   13030:	ldr	r3, [r5, #20]
   13034:	mov	r2, r0
   13038:	mov	r1, r4
   1303c:	mov	r0, r6
   13040:	blx	r3
   13044:	pop	{r4, r5, r6, pc}
   13048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1304c:	sub	sp, sp, #28
   13050:	str	r1, [sp, #16]
   13054:	mov	r8, r2
   13058:	mov	r4, r3
   1305c:	ldr	r5, [sp, #64]	; 0x40
   13060:	ldr	r3, [r2]
   13064:	mov	r6, r3
   13068:	str	r3, [sp, #20]
   1306c:	ldr	sl, [r0, #16]
   13070:	ldr	r2, [r0, #8]
   13074:	mov	ip, r2
   13078:	str	r2, [sp, #12]
   1307c:	mov	r3, r1
   13080:	mov	r2, r0
   13084:	ldr	r1, [pc, #424]	; 13234 <__assert_fail@plt+0x1f6c>
   13088:	mov	r0, ip
   1308c:	bl	13004 <__assert_fail@plt+0x1d3c>
   13090:	subs	r3, r0, #0
   13094:	str	r3, [sp, #8]
   13098:	beq	13220 <__assert_fail@plt+0x1f58>
   1309c:	mov	r1, #10
   130a0:	mov	r0, r3
   130a4:	bl	11058 <strchrnul@plt>
   130a8:	mov	r7, r0
   130ac:	ldrb	r3, [r0]
   130b0:	cmp	r3, #0
   130b4:	beq	131f0 <__assert_fail@plt+0x1f28>
   130b8:	ldrb	fp, [r6]
   130bc:	cmp	fp, #0
   130c0:	ble	131e8 <__assert_fail@plt+0x1f20>
   130c4:	mov	r6, #0
   130c8:	add	r9, r0, #1
   130cc:	mov	r1, #10
   130d0:	mov	r0, r9
   130d4:	bl	11058 <strchrnul@plt>
   130d8:	add	r6, r6, #1
   130dc:	cmp	r6, fp
   130e0:	bne	130c8 <__assert_fail@plt+0x1e00>
   130e4:	mov	r7, r0
   130e8:	ldr	r3, [r8]
   130ec:	add	r3, r3, #1
   130f0:	str	r3, [r8]
   130f4:	mov	fp, #1
   130f8:	add	r1, r7, #1
   130fc:	sub	r1, r1, r9
   13100:	mov	r0, r5
   13104:	bl	12eac <__assert_fail@plt+0x1be4>
   13108:	sub	r6, r7, r9
   1310c:	ldr	r3, [r5, #28]
   13110:	add	r3, r3, r6
   13114:	ldr	r2, [r5, #32]
   13118:	cmp	r2, r3
   1311c:	bcs	13134 <__assert_fail@plt+0x1e6c>
   13120:	mov	r1, r6
   13124:	mov	r0, r5
   13128:	bl	17f24 <argp_parse@@Base+0x1e98>
   1312c:	cmp	r0, #0
   13130:	beq	13150 <__assert_fail@plt+0x1e88>
   13134:	mov	r2, r6
   13138:	mov	r1, r9
   1313c:	ldr	r0, [r5, #28]
   13140:	bl	11088 <memcpy@plt>
   13144:	ldr	r3, [r5, #28]
   13148:	add	r6, r3, r6
   1314c:	str	r6, [r5, #28]
   13150:	ldr	r3, [sp, #12]
   13154:	ldr	r2, [sp, #8]
   13158:	cmp	r3, r2
   1315c:	bne	131fc <__assert_fail@plt+0x1f34>
   13160:	cmp	sl, #0
   13164:	beq	131a4 <__assert_fail@plt+0x1edc>
   13168:	ldr	r0, [sl]
   1316c:	cmp	r0, #0
   13170:	beq	131a4 <__assert_fail@plt+0x1edc>
   13174:	mov	r3, r4
   13178:	ldr	r4, [sp, #16]
   1317c:	str	r5, [sp]
   13180:	mov	r2, r8
   13184:	mov	r1, r4
   13188:	bl	13048 <__assert_fail@plt+0x1d80>
   1318c:	clz	r3, r0
   13190:	lsr	r3, r3, #5
   13194:	ldr	r0, [sl, #16]!
   13198:	cmp	r0, #0
   1319c:	bne	1317c <__assert_fail@plt+0x1eb4>
   131a0:	mov	r4, r3
   131a4:	cmp	r4, #0
   131a8:	moveq	fp, #0
   131ac:	andne	fp, fp, #1
   131b0:	cmp	fp, #0
   131b4:	beq	131d8 <__assert_fail@plt+0x1f10>
   131b8:	ldrb	r3, [r7]
   131bc:	cmp	r3, #0
   131c0:	bne	13208 <__assert_fail@plt+0x1f40>
   131c4:	ldr	r2, [sp, #20]
   131c8:	ldrb	r3, [r2]
   131cc:	cmp	r3, #0
   131d0:	movne	r3, #0
   131d4:	strbne	r3, [r2]
   131d8:	clz	r0, r4
   131dc:	lsr	r0, r0, #5
   131e0:	add	sp, sp, #28
   131e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e8:	ldr	r9, [sp, #8]
   131ec:	b	130e8 <__assert_fail@plt+0x1e20>
   131f0:	ldr	r9, [sp, #8]
   131f4:	mov	fp, #0
   131f8:	b	130f8 <__assert_fail@plt+0x1e30>
   131fc:	mov	r0, r2
   13200:	bl	16c80 <argp_parse@@Base+0xbf4>
   13204:	b	13160 <__assert_fail@plt+0x1e98>
   13208:	ldr	r2, [sp, #20]
   1320c:	ldrb	r3, [r2]
   13210:	add	r3, r3, #1
   13214:	strb	r3, [r2]
   13218:	mov	r4, #0
   1321c:	b	131d8 <__assert_fail@plt+0x1f10>
   13220:	cmp	sl, #0
   13224:	beq	131d8 <__assert_fail@plt+0x1f10>
   13228:	ldr	r7, [sp, #8]
   1322c:	mov	fp, #0
   13230:	b	13168 <__assert_fail@plt+0x1ea0>
   13234:	andeq	r0, r0, #6
   13238:	push	{r4, r5, r6, r7, r8, lr}
   1323c:	mov	r7, r0
   13240:	mov	r4, r2
   13244:	ldr	r3, [r2, #16]
   13248:	mov	r2, r1
   1324c:	ldr	r1, [pc, #448]	; 13414 <__assert_fail@plt+0x214c>
   13250:	bl	13004 <__assert_fail@plt+0x1d3c>
   13254:	subs	r5, r0, #0
   13258:	beq	133ac <__assert_fail@plt+0x20e4>
   1325c:	ldrb	r3, [r5]
   13260:	cmp	r3, #0
   13264:	beq	133a0 <__assert_fail@plt+0x20d8>
   13268:	ldr	r3, [r4, #8]
   1326c:	ldr	r3, [r3]
   13270:	cmp	r3, #0
   13274:	beq	132a0 <__assert_fail@plt+0x1fd8>
   13278:	ldr	r6, [r4, #4]
   1327c:	ldr	r2, [r6, #28]
   13280:	ldr	r3, [r6, #32]
   13284:	cmp	r2, r3
   13288:	bcs	133c0 <__assert_fail@plt+0x20f8>
   1328c:	ldr	r3, [r6, #28]
   13290:	add	r2, r3, #1
   13294:	str	r2, [r6, #28]
   13298:	mov	r2, #10
   1329c:	strb	r2, [r3]
   132a0:	ldr	r8, [pc, #368]	; 13418 <__assert_fail@plt+0x2150>
   132a4:	ldr	r1, [r8, #24]
   132a8:	ldr	r0, [r4, #4]
   132ac:	bl	12e20 <__assert_fail@plt+0x1b58>
   132b0:	ldr	r6, [r4, #4]
   132b4:	ldr	r8, [r8, #24]
   132b8:	ldr	r3, [r6, #28]
   132bc:	ldr	r2, [r6, #24]
   132c0:	sub	r3, r3, r2
   132c4:	ldr	r2, [r6, #16]
   132c8:	cmp	r3, r2
   132cc:	bhi	133d8 <__assert_fail@plt+0x2110>
   132d0:	str	r8, [r6, #4]
   132d4:	ldr	r6, [r4, #4]
   132d8:	ldr	r3, [pc, #312]	; 13418 <__assert_fail@plt+0x2150>
   132dc:	ldr	r8, [r3, #24]
   132e0:	ldr	r3, [r6, #28]
   132e4:	ldr	r2, [r6, #24]
   132e8:	sub	r3, r3, r2
   132ec:	ldr	r2, [r6, #16]
   132f0:	cmp	r3, r2
   132f4:	bhi	133e4 <__assert_fail@plt+0x211c>
   132f8:	str	r8, [r6, #12]
   132fc:	mov	r0, r5
   13300:	bl	111a8 <strlen@plt>
   13304:	subs	r8, r0, #0
   13308:	beq	13354 <__assert_fail@plt+0x208c>
   1330c:	ldr	r6, [r4, #4]
   13310:	ldr	r3, [r6, #28]
   13314:	add	r3, r3, r8
   13318:	ldr	r2, [r6, #32]
   1331c:	cmp	r2, r3
   13320:	bcs	13338 <__assert_fail@plt+0x2070>
   13324:	mov	r1, r8
   13328:	mov	r0, r6
   1332c:	bl	17f24 <argp_parse@@Base+0x1e98>
   13330:	cmp	r0, #0
   13334:	beq	13354 <__assert_fail@plt+0x208c>
   13338:	mov	r2, r8
   1333c:	mov	r1, r5
   13340:	ldr	r0, [r6, #28]
   13344:	bl	11088 <memcpy@plt>
   13348:	ldr	r3, [r6, #28]
   1334c:	add	r8, r3, r8
   13350:	str	r8, [r6, #28]
   13354:	ldr	r6, [r4, #4]
   13358:	ldr	r3, [r6, #28]
   1335c:	ldr	r2, [r6, #24]
   13360:	sub	r3, r3, r2
   13364:	ldr	r2, [r6, #16]
   13368:	cmp	r3, r2
   1336c:	bhi	133f0 <__assert_fail@plt+0x2128>
   13370:	mov	r3, #0
   13374:	str	r3, [r6, #4]
   13378:	ldr	r6, [r4, #4]
   1337c:	ldr	r2, [r6, #28]
   13380:	ldr	r3, [r6, #32]
   13384:	cmp	r2, r3
   13388:	bcs	133fc <__assert_fail@plt+0x2134>
   1338c:	ldr	r3, [r6, #28]
   13390:	add	r2, r3, #1
   13394:	str	r2, [r6, #28]
   13398:	mov	r2, #10
   1339c:	strb	r2, [r3]
   133a0:	ldr	r3, [r4, #8]
   133a4:	mov	r2, #1
   133a8:	str	r2, [r3, #4]
   133ac:	cmp	r7, r5
   133b0:	popeq	{r4, r5, r6, r7, r8, pc}
   133b4:	mov	r0, r5
   133b8:	bl	16c80 <argp_parse@@Base+0xbf4>
   133bc:	pop	{r4, r5, r6, r7, r8, pc}
   133c0:	mov	r1, #1
   133c4:	mov	r0, r6
   133c8:	bl	17f24 <argp_parse@@Base+0x1e98>
   133cc:	cmp	r0, #0
   133d0:	beq	132a0 <__assert_fail@plt+0x1fd8>
   133d4:	b	1328c <__assert_fail@plt+0x1fc4>
   133d8:	mov	r0, r6
   133dc:	bl	17980 <argp_parse@@Base+0x18f4>
   133e0:	b	132d0 <__assert_fail@plt+0x2008>
   133e4:	mov	r0, r6
   133e8:	bl	17980 <argp_parse@@Base+0x18f4>
   133ec:	b	132f8 <__assert_fail@plt+0x2030>
   133f0:	mov	r0, r6
   133f4:	bl	17980 <argp_parse@@Base+0x18f4>
   133f8:	b	13370 <__assert_fail@plt+0x20a8>
   133fc:	mov	r1, #1
   13400:	mov	r0, r6
   13404:	bl	17f24 <argp_parse@@Base+0x1e98>
   13408:	cmp	r0, #0
   1340c:	beq	133a0 <__assert_fail@plt+0x20d8>
   13410:	b	1338c <__assert_fail@plt+0x20c4>
   13414:	andeq	r0, r0, #3
   13418:	andeq	fp, r2, r8, asr r2
   1341c:	push	{r4, r5, r6, r7, r8, lr}
   13420:	mov	r6, r0
   13424:	mov	r4, r1
   13428:	ldr	r3, [r1, #12]
   1342c:	cmp	r3, #0
   13430:	beq	13550 <__assert_fail@plt+0x2288>
   13434:	ldr	r3, [r1, #8]
   13438:	ldr	r7, [r3]
   1343c:	ldr	r2, [r1]
   13440:	ldr	r5, [r2, #16]
   13444:	ldr	r3, [r3, #4]
   13448:	cmp	r3, #0
   1344c:	cmpne	r7, #0
   13450:	beq	1348c <__assert_fail@plt+0x21c4>
   13454:	ldr	r2, [r2, #12]
   13458:	ldr	r3, [r7, #12]
   1345c:	cmp	r2, r3
   13460:	beq	1348c <__assert_fail@plt+0x21c4>
   13464:	ldr	r8, [r1, #4]
   13468:	ldr	r2, [r8, #28]
   1346c:	ldr	r3, [r8, #32]
   13470:	cmp	r2, r3
   13474:	bcs	1352c <__assert_fail@plt+0x2264>
   13478:	ldr	r3, [r8, #28]
   1347c:	add	r2, r3, #1
   13480:	str	r2, [r8, #28]
   13484:	mov	r2, #10
   13488:	strb	r2, [r3]
   1348c:	cmp	r5, #0
   13490:	beq	13514 <__assert_fail@plt+0x224c>
   13494:	ldr	r0, [r5]
   13498:	cmp	r0, #0
   1349c:	beq	13514 <__assert_fail@plt+0x224c>
   134a0:	ldrb	r3, [r0]
   134a4:	cmp	r3, #0
   134a8:	beq	13514 <__assert_fail@plt+0x224c>
   134ac:	cmp	r7, #0
   134b0:	beq	134e0 <__assert_fail@plt+0x2218>
   134b4:	ldr	r3, [r7, #16]
   134b8:	cmp	r5, r3
   134bc:	beq	13514 <__assert_fail@plt+0x224c>
   134c0:	cmp	r3, #0
   134c4:	beq	134e0 <__assert_fail@plt+0x2218>
   134c8:	ldr	r3, [r3, #12]
   134cc:	cmp	r3, #0
   134d0:	cmpne	r5, r3
   134d4:	bne	134c8 <__assert_fail@plt+0x2200>
   134d8:	cmp	r5, r3
   134dc:	beq	13514 <__assert_fail@plt+0x224c>
   134e0:	ldr	r3, [r4, #4]
   134e4:	ldr	r7, [r3, #12]
   134e8:	mov	r2, r4
   134ec:	ldr	r1, [r5, #16]
   134f0:	bl	13238 <__assert_fail@plt+0x1f70>
   134f4:	ldr	r5, [r4, #4]
   134f8:	ldr	r3, [r5, #28]
   134fc:	ldr	r2, [r5, #24]
   13500:	sub	r3, r3, r2
   13504:	ldr	r2, [r5, #16]
   13508:	cmp	r3, r2
   1350c:	bhi	13544 <__assert_fail@plt+0x227c>
   13510:	str	r7, [r5, #12]
   13514:	mov	r3, #0
   13518:	str	r3, [r4, #12]
   1351c:	mov	r1, r6
   13520:	ldr	r0, [r4, #4]
   13524:	bl	12e20 <__assert_fail@plt+0x1b58>
   13528:	pop	{r4, r5, r6, r7, r8, pc}
   1352c:	mov	r1, #1
   13530:	mov	r0, r8
   13534:	bl	17f24 <argp_parse@@Base+0x1e98>
   13538:	cmp	r0, #0
   1353c:	beq	1348c <__assert_fail@plt+0x21c4>
   13540:	b	13478 <__assert_fail@plt+0x21b0>
   13544:	mov	r0, r5
   13548:	bl	17980 <argp_parse@@Base+0x18f4>
   1354c:	b	13510 <__assert_fail@plt+0x2248>
   13550:	ldr	r5, [r1, #4]
   13554:	ldr	r3, [r5, #28]
   13558:	add	r3, r3, #2
   1355c:	ldr	r2, [r5, #32]
   13560:	cmp	r2, r3
   13564:	bcs	1357c <__assert_fail@plt+0x22b4>
   13568:	mov	r1, #2
   1356c:	mov	r0, r5
   13570:	bl	17f24 <argp_parse@@Base+0x1e98>
   13574:	cmp	r0, #0
   13578:	beq	1351c <__assert_fail@plt+0x2254>
   1357c:	ldr	r3, [r5, #28]
   13580:	ldr	r2, [pc, #20]	; 1359c <__assert_fail@plt+0x22d4>
   13584:	ldrh	r2, [r2]
   13588:	strh	r2, [r3]
   1358c:	ldr	r3, [r5, #28]
   13590:	add	r3, r3, #2
   13594:	str	r3, [r5, #28]
   13598:	b	1351c <__assert_fail@plt+0x2254>
   1359c:	andeq	r9, r1, r4, lsr #15
   135a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a4:	sub	sp, sp, #28
   135a8:	mov	fp, r0
   135ac:	str	r1, [sp, #8]
   135b0:	mov	r6, r2
   135b4:	mov	r8, r3
   135b8:	ldr	r7, [sp, #64]	; 0x40
   135bc:	ldr	r5, [sp, #68]	; 0x44
   135c0:	ldr	r9, [r0, #12]
   135c4:	ldr	r3, [r0, #16]
   135c8:	str	r3, [sp, #16]
   135cc:	cmp	r9, #0
   135d0:	beq	13a2c <__assert_fail@plt+0x2764>
   135d4:	mov	r1, #11
   135d8:	mov	r0, r9
   135dc:	bl	111b4 <strchr@plt>
   135e0:	cmp	r6, #0
   135e4:	beq	138dc <__assert_fail@plt+0x2614>
   135e8:	cmp	r0, #0
   135ec:	addne	r9, r0, #1
   135f0:	beq	13a14 <__assert_fail@plt+0x274c>
   135f4:	ldr	r3, [fp, #20]
   135f8:	cmp	r3, #0
   135fc:	movne	sl, #0
   13600:	beq	13a1c <__assert_fail@plt+0x2754>
   13604:	ldr	r1, [sp, #8]
   13608:	mov	r0, fp
   1360c:	bl	16b00 <argp_parse@@Base+0xa74>
   13610:	str	r0, [sp, #12]
   13614:	ldr	r3, [fp, #20]
   13618:	ldr	r2, [pc, #1140]	; 13a94 <__assert_fail@plt+0x27cc>
   1361c:	ldr	r0, [pc, #1140]	; 13a98 <__assert_fail@plt+0x27d0>
   13620:	cmp	r6, #0
   13624:	moveq	r0, r2
   13628:	ldr	r2, [sp, #12]
   1362c:	mov	r1, r9
   13630:	blx	r3
   13634:	mov	r4, r0
   13638:	cmp	r4, #0
   1363c:	beq	139cc <__assert_fail@plt+0x2704>
   13640:	cmp	r8, #0
   13644:	beq	1366c <__assert_fail@plt+0x23a4>
   13648:	ldr	r2, [r5, #28]
   1364c:	ldr	r3, [r5, #32]
   13650:	cmp	r2, r3
   13654:	bcs	13920 <__assert_fail@plt+0x2658>
   13658:	ldr	r3, [r5, #28]
   1365c:	add	r2, r3, #1
   13660:	str	r2, [r5, #28]
   13664:	mov	r2, #10
   13668:	strb	r2, [r3]
   1366c:	cmp	r4, r9
   13670:	movne	r3, #0
   13674:	moveq	r3, #1
   13678:	cmp	sl, #0
   1367c:	moveq	r3, #0
   13680:	cmp	r3, #0
   13684:	beq	13938 <__assert_fail@plt+0x2670>
   13688:	ldr	r3, [r5, #28]
   1368c:	add	r3, r3, sl
   13690:	ldr	r2, [r5, #32]
   13694:	cmp	r2, r3
   13698:	bcs	136b0 <__assert_fail@plt+0x23e8>
   1369c:	mov	r1, sl
   136a0:	mov	r0, r5
   136a4:	bl	17f24 <argp_parse@@Base+0x1e98>
   136a8:	cmp	r0, #0
   136ac:	beq	136cc <__assert_fail@plt+0x2404>
   136b0:	mov	r2, sl
   136b4:	mov	r1, r9
   136b8:	ldr	r0, [r5, #28]
   136bc:	bl	11088 <memcpy@plt>
   136c0:	ldr	r3, [r5, #28]
   136c4:	add	r3, r3, sl
   136c8:	str	r3, [r5, #28]
   136cc:	ldr	r3, [r5, #28]
   136d0:	ldr	r2, [r5, #24]
   136d4:	sub	r3, r3, r2
   136d8:	ldr	r2, [r5, #16]
   136dc:	cmp	r3, r2
   136e0:	bhi	13998 <__assert_fail@plt+0x26d0>
   136e4:	ldr	r3, [r5, #20]
   136e8:	bic	r3, r3, r3, asr #31
   136ec:	ldr	r2, [r5, #4]
   136f0:	cmp	r2, r3
   136f4:	bcs	1371c <__assert_fail@plt+0x2454>
   136f8:	ldr	r2, [r5, #28]
   136fc:	ldr	r3, [r5, #32]
   13700:	cmp	r2, r3
   13704:	bcs	139a4 <__assert_fail@plt+0x26dc>
   13708:	ldr	r3, [r5, #28]
   1370c:	add	r2, r3, #1
   13710:	str	r2, [r5, #28]
   13714:	mov	r2, #10
   13718:	strb	r2, [r3]
   1371c:	cmp	r4, r9
   13720:	moveq	r4, #1
   13724:	bne	139bc <__assert_fail@plt+0x26f4>
   13728:	cmp	r9, #0
   1372c:	cmpne	sl, #0
   13730:	beq	13748 <__assert_fail@plt+0x2480>
   13734:	ldr	r3, [fp, #20]
   13738:	cmp	r3, #0
   1373c:	beq	13854 <__assert_fail@plt+0x258c>
   13740:	mov	r0, r9
   13744:	bl	16c80 <argp_parse@@Base+0xbf4>
   13748:	cmp	r6, #0
   1374c:	beq	13854 <__assert_fail@plt+0x258c>
   13750:	ldr	r3, [fp, #20]
   13754:	cmp	r3, #0
   13758:	beq	13854 <__assert_fail@plt+0x258c>
   1375c:	ldr	r2, [sp, #12]
   13760:	mov	r1, #0
   13764:	ldr	r0, [pc, #816]	; 13a9c <__assert_fail@plt+0x27d4>
   13768:	blx	r3
   1376c:	subs	r9, r0, #0
   13770:	beq	13854 <__assert_fail@plt+0x258c>
   13774:	orrs	r3, r8, r4
   13778:	beq	137a0 <__assert_fail@plt+0x24d8>
   1377c:	ldr	r2, [r5, #28]
   13780:	ldr	r3, [r5, #32]
   13784:	cmp	r2, r3
   13788:	bcs	139d4 <__assert_fail@plt+0x270c>
   1378c:	ldr	r3, [r5, #28]
   13790:	add	r2, r3, #1
   13794:	str	r2, [r5, #28]
   13798:	mov	r2, #10
   1379c:	strb	r2, [r3]
   137a0:	mov	r0, r9
   137a4:	bl	111a8 <strlen@plt>
   137a8:	subs	r4, r0, #0
   137ac:	beq	137f4 <__assert_fail@plt+0x252c>
   137b0:	ldr	r3, [r5, #28]
   137b4:	add	r3, r3, r4
   137b8:	ldr	r2, [r5, #32]
   137bc:	cmp	r2, r3
   137c0:	bcs	137d8 <__assert_fail@plt+0x2510>
   137c4:	mov	r1, r4
   137c8:	mov	r0, r5
   137cc:	bl	17f24 <argp_parse@@Base+0x1e98>
   137d0:	cmp	r0, #0
   137d4:	beq	137f4 <__assert_fail@plt+0x252c>
   137d8:	mov	r2, r4
   137dc:	mov	r1, r9
   137e0:	ldr	r0, [r5, #28]
   137e4:	bl	11088 <memcpy@plt>
   137e8:	ldr	r3, [r5, #28]
   137ec:	add	r4, r3, r4
   137f0:	str	r4, [r5, #28]
   137f4:	mov	r0, r9
   137f8:	bl	16c80 <argp_parse@@Base+0xbf4>
   137fc:	ldr	r3, [r5, #28]
   13800:	ldr	r2, [r5, #24]
   13804:	sub	r3, r3, r2
   13808:	ldr	r2, [r5, #16]
   1380c:	cmp	r3, r2
   13810:	bhi	139ec <__assert_fail@plt+0x2724>
   13814:	ldr	r3, [r5, #20]
   13818:	bic	r3, r3, r3, asr #31
   1381c:	ldr	r2, [r5, #4]
   13820:	cmp	r2, r3
   13824:	movcs	r4, #1
   13828:	bcs	13854 <__assert_fail@plt+0x258c>
   1382c:	ldr	r2, [r5, #28]
   13830:	ldr	r3, [r5, #32]
   13834:	cmp	r2, r3
   13838:	bcs	139f8 <__assert_fail@plt+0x2730>
   1383c:	ldr	r3, [r5, #28]
   13840:	add	r2, r3, #1
   13844:	str	r2, [r5, #28]
   13848:	mov	r2, #10
   1384c:	strb	r2, [r3]
   13850:	mov	r4, #1
   13854:	ldr	r3, [sp, #16]
   13858:	cmp	r3, #0
   1385c:	beq	138d0 <__assert_fail@plt+0x2608>
   13860:	ldr	r0, [r3]
   13864:	cmp	r0, #0
   13868:	beq	138d0 <__assert_fail@plt+0x2608>
   1386c:	clz	r9, r7
   13870:	lsr	r9, r9, #5
   13874:	cmp	r7, #0
   13878:	cmpne	r4, #0
   1387c:	bne	138d0 <__assert_fail@plt+0x2608>
   13880:	mov	sl, r3
   13884:	ldr	fp, [sp, #8]
   13888:	orrs	r3, r8, r4
   1388c:	str	r5, [sp, #4]
   13890:	str	r7, [sp]
   13894:	movne	r3, #1
   13898:	moveq	r3, #0
   1389c:	mov	r2, r6
   138a0:	mov	r1, fp
   138a4:	bl	135a0 <__assert_fail@plt+0x22d8>
   138a8:	orr	r4, r4, r0
   138ac:	ldr	r0, [sl, #16]
   138b0:	cmp	r0, #0
   138b4:	beq	138d0 <__assert_fail@plt+0x2608>
   138b8:	add	sl, sl, #16
   138bc:	cmp	r4, #0
   138c0:	movne	r3, r9
   138c4:	orreq	r3, r9, #1
   138c8:	cmp	r3, #0
   138cc:	bne	13888 <__assert_fail@plt+0x25c0>
   138d0:	mov	r0, r4
   138d4:	add	sp, sp, #28
   138d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138dc:	cmp	r0, #0
   138e0:	beq	13a64 <__assert_fail@plt+0x279c>
   138e4:	sub	sl, r0, r9
   138e8:	ldr	r3, [fp, #20]
   138ec:	cmp	r3, #0
   138f0:	beq	13910 <__assert_fail@plt+0x2648>
   138f4:	cmp	sl, #0
   138f8:	beq	13604 <__assert_fail@plt+0x233c>
   138fc:	mov	r1, sl
   13900:	mov	r0, r9
   13904:	bl	1107c <strndup@plt>
   13908:	mov	r9, r0
   1390c:	b	13604 <__assert_fail@plt+0x233c>
   13910:	mov	r4, r9
   13914:	mov	r3, #0
   13918:	str	r3, [sp, #12]
   1391c:	b	13640 <__assert_fail@plt+0x2378>
   13920:	mov	r1, #1
   13924:	mov	r0, r5
   13928:	bl	17f24 <argp_parse@@Base+0x1e98>
   1392c:	cmp	r0, #0
   13930:	beq	1366c <__assert_fail@plt+0x23a4>
   13934:	b	13658 <__assert_fail@plt+0x2390>
   13938:	mov	r0, r4
   1393c:	bl	111a8 <strlen@plt>
   13940:	subs	r3, r0, #0
   13944:	mov	r1, r3
   13948:	str	r3, [sp, #20]
   1394c:	beq	136cc <__assert_fail@plt+0x2404>
   13950:	ldr	r3, [r5, #28]
   13954:	add	r3, r3, r1
   13958:	ldr	r2, [r5, #32]
   1395c:	cmp	r2, r3
   13960:	bcs	13974 <__assert_fail@plt+0x26ac>
   13964:	mov	r0, r5
   13968:	bl	17f24 <argp_parse@@Base+0x1e98>
   1396c:	cmp	r0, #0
   13970:	beq	136cc <__assert_fail@plt+0x2404>
   13974:	ldr	r2, [sp, #20]
   13978:	mov	r1, r4
   1397c:	ldr	r0, [r5, #28]
   13980:	bl	11088 <memcpy@plt>
   13984:	ldr	r3, [r5, #28]
   13988:	ldr	r2, [sp, #20]
   1398c:	add	r3, r3, r2
   13990:	str	r3, [r5, #28]
   13994:	b	136cc <__assert_fail@plt+0x2404>
   13998:	mov	r0, r5
   1399c:	bl	17980 <argp_parse@@Base+0x18f4>
   139a0:	b	136e4 <__assert_fail@plt+0x241c>
   139a4:	mov	r1, #1
   139a8:	mov	r0, r5
   139ac:	bl	17f24 <argp_parse@@Base+0x1e98>
   139b0:	cmp	r0, #0
   139b4:	beq	1371c <__assert_fail@plt+0x2454>
   139b8:	b	13708 <__assert_fail@plt+0x2440>
   139bc:	mov	r0, r4
   139c0:	bl	16c80 <argp_parse@@Base+0xbf4>
   139c4:	mov	r4, #1
   139c8:	b	13728 <__assert_fail@plt+0x2460>
   139cc:	mov	r4, #0
   139d0:	b	13728 <__assert_fail@plt+0x2460>
   139d4:	mov	r1, #1
   139d8:	mov	r0, r5
   139dc:	bl	17f24 <argp_parse@@Base+0x1e98>
   139e0:	cmp	r0, #0
   139e4:	beq	137a0 <__assert_fail@plt+0x24d8>
   139e8:	b	1378c <__assert_fail@plt+0x24c4>
   139ec:	mov	r0, r5
   139f0:	bl	17980 <argp_parse@@Base+0x18f4>
   139f4:	b	13814 <__assert_fail@plt+0x254c>
   139f8:	mov	r1, #1
   139fc:	mov	r0, r5
   13a00:	bl	17f24 <argp_parse@@Base+0x1e98>
   13a04:	cmp	r0, #0
   13a08:	moveq	r4, #1
   13a0c:	beq	13854 <__assert_fail@plt+0x258c>
   13a10:	b	1383c <__assert_fail@plt+0x2574>
   13a14:	mov	r9, #0
   13a18:	b	135f4 <__assert_fail@plt+0x232c>
   13a1c:	mov	r4, r9
   13a20:	mov	sl, #0
   13a24:	str	sl, [sp, #12]
   13a28:	b	13638 <__assert_fail@plt+0x2370>
   13a2c:	ldr	r3, [r0, #20]
   13a30:	cmp	r3, #0
   13a34:	movne	sl, #0
   13a38:	bne	13604 <__assert_fail@plt+0x233c>
   13a3c:	mov	r3, r9
   13a40:	cmp	r9, #0
   13a44:	moveq	r4, #0
   13a48:	streq	r4, [sp, #12]
   13a4c:	beq	13748 <__assert_fail@plt+0x2480>
   13a50:	mov	r4, r9
   13a54:	mov	r9, r3
   13a58:	mov	sl, #0
   13a5c:	str	sl, [sp, #12]
   13a60:	b	13640 <__assert_fail@plt+0x2378>
   13a64:	ldr	r3, [fp, #20]
   13a68:	cmp	r3, #0
   13a6c:	moveq	r3, r9
   13a70:	beq	13a40 <__assert_fail@plt+0x2778>
   13a74:	ldr	r1, [sp, #8]
   13a78:	mov	r0, fp
   13a7c:	bl	16b00 <argp_parse@@Base+0xa74>
   13a80:	str	r0, [sp, #12]
   13a84:	ldr	r3, [fp, #20]
   13a88:	mov	sl, #0
   13a8c:	ldr	r0, [pc]	; 13a94 <__assert_fail@plt+0x27cc>
   13a90:	b	13628 <__assert_fail@plt+0x2360>
   13a94:	andeq	r0, r0, #1
   13a98:	andeq	r0, r0, #2
   13a9c:	andeq	r0, r0, #4
   13aa0:	ldr	r3, [r0, #12]
   13aa4:	ldr	r2, [r1, #12]
   13aa8:	cmp	r3, r2
   13aac:	beq	13b04 <__assert_fail@plt+0x283c>
   13ab0:	push	{r4, r5, r6, lr}
   13ab4:	mov	r5, r1
   13ab8:	mov	r4, r0
   13abc:	mov	r1, r2
   13ac0:	mov	r0, r3
   13ac4:	bl	13aa0 <__assert_fail@plt+0x27d8>
   13ac8:	subs	r3, r0, #0
   13acc:	bne	13afc <__assert_fail@plt+0x2834>
   13ad0:	ldr	r0, [r4, #8]
   13ad4:	ldr	r3, [r5, #8]
   13ad8:	mvn	r2, r3
   13adc:	lsr	r2, r2, #31
   13ae0:	cmp	r2, r0, lsr #31
   13ae4:	subne	r3, r0, r3
   13ae8:	subeq	r3, r3, r0
   13aec:	cmp	r3, #0
   13af0:	ldreq	r3, [r5, #4]
   13af4:	ldreq	r0, [r4, #4]
   13af8:	subeq	r3, r3, r0
   13afc:	mov	r0, r3
   13b00:	pop	{r4, r5, r6, pc}
   13b04:	ldr	r2, [r0, #8]
   13b08:	ldr	r3, [r1, #8]
   13b0c:	mvn	ip, r3
   13b10:	lsr	ip, ip, #31
   13b14:	cmp	ip, r2, lsr #31
   13b18:	subne	r3, r2, r3
   13b1c:	subeq	r3, r3, r2
   13b20:	cmp	r3, #0
   13b24:	ldreq	r3, [r1, #4]
   13b28:	ldreq	r0, [r0, #4]
   13b2c:	subeq	r3, r3, r0
   13b30:	mov	r0, r3
   13b34:	bx	lr
   13b38:	push	{r4, r5, r6, r7, r8, lr}
   13b3c:	sub	sp, sp, #8
   13b40:	ldr	lr, [r0, #16]
   13b44:	cmp	lr, #0
   13b48:	movne	r2, lr
   13b4c:	bne	13b5c <__assert_fail@plt+0x2894>
   13b50:	ldr	ip, [r0, #12]
   13b54:	b	13b6c <__assert_fail@plt+0x28a4>
   13b58:	mov	r2, r3
   13b5c:	ldr	r3, [r2, #12]
   13b60:	cmp	r3, #0
   13b64:	bne	13b58 <__assert_fail@plt+0x2890>
   13b68:	ldr	ip, [r2, #8]
   13b6c:	ldr	r5, [r1, #16]
   13b70:	cmp	r5, #0
   13b74:	movne	r2, r5
   13b78:	bne	13b88 <__assert_fail@plt+0x28c0>
   13b7c:	ldr	r4, [r1, #12]
   13b80:	b	13b98 <__assert_fail@plt+0x28d0>
   13b84:	mov	r2, r3
   13b88:	ldr	r3, [r2, #12]
   13b8c:	cmp	r3, #0
   13b90:	bne	13b84 <__assert_fail@plt+0x28bc>
   13b94:	ldr	r4, [r2, #8]
   13b98:	mvn	r3, r4
   13b9c:	lsr	r3, r3, #31
   13ba0:	cmp	r3, ip, lsr #31
   13ba4:	subne	r4, ip, r4
   13ba8:	subeq	r4, r4, ip
   13bac:	cmp	r4, #0
   13bb0:	bne	13c18 <__assert_fail@plt+0x2950>
   13bb4:	adds	r4, r5, #0
   13bb8:	movne	r4, #1
   13bbc:	cmp	lr, #0
   13bc0:	rsbeq	r4, r4, #0
   13bc4:	rsbne	r4, r4, #1
   13bc8:	cmp	r4, #0
   13bcc:	bne	13c18 <__assert_fail@plt+0x2950>
   13bd0:	mov	r6, r1
   13bd4:	mov	r7, r0
   13bd8:	cmp	lr, #0
   13bdc:	beq	13c68 <__assert_fail@plt+0x29a0>
   13be0:	ldr	ip, [lr, #20]
   13be4:	ldr	r2, [r5, #20]
   13be8:	cmp	ip, r2
   13bec:	ble	13c24 <__assert_fail@plt+0x295c>
   13bf0:	mov	r0, lr
   13bf4:	ldr	r0, [r0, #12]
   13bf8:	ldr	r3, [r0, #20]
   13bfc:	cmp	r2, r3
   13c00:	blt	13bf4 <__assert_fail@plt+0x292c>
   13c04:	mov	r1, r5
   13c08:	bl	13aa0 <__assert_fail@plt+0x27d8>
   13c0c:	subs	r4, r0, #0
   13c10:	cmp	r0, #0
   13c14:	moveq	r4, #1
   13c18:	mov	r0, r4
   13c1c:	add	sp, sp, #8
   13c20:	pop	{r4, r5, r6, r7, r8, pc}
   13c24:	cmp	ip, r2
   13c28:	bge	13c54 <__assert_fail@plt+0x298c>
   13c2c:	mov	r1, r5
   13c30:	ldr	r1, [r1, #12]
   13c34:	ldr	r3, [r1, #20]
   13c38:	cmp	ip, r3
   13c3c:	blt	13c30 <__assert_fail@plt+0x2968>
   13c40:	mov	r0, lr
   13c44:	bl	13aa0 <__assert_fail@plt+0x27d8>
   13c48:	subs	r4, r0, #0
   13c4c:	mvneq	r4, #0
   13c50:	b	13c18 <__assert_fail@plt+0x2950>
   13c54:	mov	r1, r5
   13c58:	mov	r0, lr
   13c5c:	bl	13aa0 <__assert_fail@plt+0x27d8>
   13c60:	subs	r4, r0, #0
   13c64:	bne	13c18 <__assert_fail@plt+0x2950>
   13c68:	ldr	r3, [r7, #12]
   13c6c:	ldr	r4, [r6, #12]
   13c70:	mvn	r2, r4
   13c74:	lsr	r2, r2, #31
   13c78:	cmp	r2, r3, lsr #31
   13c7c:	subne	r4, r3, r4
   13c80:	subeq	r4, r4, r3
   13c84:	cmp	r4, #0
   13c88:	bne	13c18 <__assert_fail@plt+0x2950>
   13c8c:	mov	r0, r7
   13c90:	bl	128e0 <__assert_fail@plt+0x1618>
   13c94:	mov	r5, r0
   13c98:	str	r0, [sp]
   13c9c:	mov	r0, r6
   13ca0:	bl	128e0 <__assert_fail@plt+0x1618>
   13ca4:	str	r0, [sp, #4]
   13ca8:	ldr	r3, [r7]
   13cac:	ldr	r3, [r3, #12]
   13cb0:	adds	r5, r5, #0
   13cb4:	movne	r5, #1
   13cb8:	ands	r3, r5, r3, lsr #3
   13cbc:	beq	13e00 <__assert_fail@plt+0x2b38>
   13cc0:	mov	r0, sp
   13cc4:	bl	12aa4 <__assert_fail@plt+0x17dc>
   13cc8:	adds	r5, r0, #0
   13ccc:	movne	r5, #1
   13cd0:	ldr	r3, [r6]
   13cd4:	ldr	r0, [r3, #12]
   13cd8:	ands	r0, r0, #8
   13cdc:	beq	13cfc <__assert_fail@plt+0x2a34>
   13ce0:	ldr	r3, [sp, #4]
   13ce4:	cmp	r3, #0
   13ce8:	beq	13df8 <__assert_fail@plt+0x2b30>
   13cec:	add	r0, sp, #4
   13cf0:	bl	12aa4 <__assert_fail@plt+0x17dc>
   13cf4:	adds	r0, r0, #0
   13cf8:	movne	r0, #1
   13cfc:	subs	r4, r5, r0
   13d00:	bne	13c18 <__assert_fail@plt+0x2950>
   13d04:	ldr	r2, [r7, #20]
   13d08:	ldr	r4, [pc, #276]	; 13e24 <__assert_fail@plt+0x2b5c>
   13d0c:	mov	r3, #0
   13d10:	ldr	r2, [r2, #24]
   13d14:	mov	r1, r4
   13d18:	mov	r0, r7
   13d1c:	bl	12978 <__assert_fail@plt+0x16b0>
   13d20:	mov	r5, r0
   13d24:	uxtb	r8, r0
   13d28:	ldr	r2, [r6, #20]
   13d2c:	mov	r3, #0
   13d30:	ldr	r2, [r2, #24]
   13d34:	mov	r1, r4
   13d38:	mov	r0, r6
   13d3c:	bl	12978 <__assert_fail@plt+0x16b0>
   13d40:	uxtb	r7, r0
   13d44:	cmp	r8, #0
   13d48:	movne	r5, r8
   13d4c:	bne	13d60 <__assert_fail@plt+0x2a98>
   13d50:	ldr	r3, [sp]
   13d54:	cmp	r3, #0
   13d58:	ldrbne	r5, [r3]
   13d5c:	moveq	r5, #0
   13d60:	cmp	r7, #0
   13d64:	uxtbne	r6, r0
   13d68:	bne	13d7c <__assert_fail@plt+0x2ab4>
   13d6c:	ldr	r3, [sp, #4]
   13d70:	cmp	r3, #0
   13d74:	ldrbne	r6, [r3]
   13d78:	moveq	r6, #0
   13d7c:	bl	11160 <__ctype_tolower_loc@plt>
   13d80:	ldr	r3, [r0]
   13d84:	ldr	r4, [r3, r5, lsl #2]
   13d88:	ldr	r3, [r3, r6, lsl #2]
   13d8c:	subs	r4, r4, r3
   13d90:	bne	13c18 <__assert_fail@plt+0x2950>
   13d94:	subs	r4, r6, r5
   13d98:	bne	13c18 <__assert_fail@plt+0x2950>
   13d9c:	adds	r4, r7, #0
   13da0:	movne	r4, #1
   13da4:	cmp	r8, #0
   13da8:	rsbeq	r4, r4, #0
   13dac:	rsbne	r4, r4, #1
   13db0:	cmp	r4, #0
   13db4:	bne	13c18 <__assert_fail@plt+0x2950>
   13db8:	cmp	r8, #0
   13dbc:	bne	13c18 <__assert_fail@plt+0x2950>
   13dc0:	ldr	r0, [sp]
   13dc4:	ldr	r1, [sp, #4]
   13dc8:	adds	r4, r1, #0
   13dcc:	movne	r4, #1
   13dd0:	cmp	r0, #0
   13dd4:	rsbeq	r4, r4, #0
   13dd8:	rsbne	r4, r4, #1
   13ddc:	cmp	r4, #0
   13de0:	bne	13c18 <__assert_fail@plt+0x2950>
   13de4:	cmp	r0, #0
   13de8:	beq	13c18 <__assert_fail@plt+0x2950>
   13dec:	bl	110e8 <strcasecmp@plt>
   13df0:	mov	r4, r0
   13df4:	b	13c18 <__assert_fail@plt+0x2950>
   13df8:	mov	r0, r4
   13dfc:	b	13cfc <__assert_fail@plt+0x2a34>
   13e00:	ldr	r3, [r6]
   13e04:	ldr	r3, [r3, #12]
   13e08:	tst	r3, #8
   13e0c:	beq	13d04 <__assert_fail@plt+0x2a3c>
   13e10:	ldr	r3, [sp, #4]
   13e14:	cmp	r3, #0
   13e18:	movne	r5, r4
   13e1c:	bne	13cec <__assert_fail@plt+0x2a24>
   13e20:	b	13d04 <__assert_fail@plt+0x2a3c>
   13e24:	andeq	r2, r1, ip, asr sl
   13e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e2c:	sub	sp, sp, #52	; 0x34
   13e30:	str	r0, [sp, #24]
   13e34:	str	r1, [sp, #28]
   13e38:	ldr	r2, [r0, #16]
   13e3c:	str	r2, [sp, #8]
   13e40:	ldr	r5, [r0]
   13e44:	mov	r0, #16
   13e48:	bl	17888 <argp_parse@@Base+0x17fc>
   13e4c:	subs	fp, r0, #0
   13e50:	beq	13e80 <__assert_fail@plt+0x2bb8>
   13e54:	mov	r3, #0
   13e58:	str	r3, [fp, #4]
   13e5c:	str	r3, [fp, #12]
   13e60:	cmp	r5, r3
   13e64:	beq	14058 <__assert_fail@plt+0x2d90>
   13e68:	ldr	r4, [r5, #12]
   13e6c:	ands	r4, r4, #4
   13e70:	bne	13e94 <__assert_fail@plt+0x2bcc>
   13e74:	add	r6, r5, #24
   13e78:	mov	r8, r3
   13e7c:	b	13ebc <__assert_fail@plt+0x2bf4>
   13e80:	ldr	r3, [pc, #1576]	; 144b0 <__assert_fail@plt+0x31e8>
   13e84:	ldr	r2, [pc, #1576]	; 144b4 <__assert_fail@plt+0x31ec>
   13e88:	ldr	r1, [pc, #1576]	; 144b8 <__assert_fail@plt+0x31f0>
   13e8c:	ldr	r0, [pc, #1576]	; 144bc <__assert_fail@plt+0x31f4>
   13e90:	bl	112c8 <__assert_fail@plt>
   13e94:	ldr	r3, [pc, #1556]	; 144b0 <__assert_fail@plt+0x31e8>
   13e98:	mov	r2, #460	; 0x1cc
   13e9c:	ldr	r1, [pc, #1556]	; 144b8 <__assert_fail@plt+0x31f0>
   13ea0:	ldr	r0, [pc, #1560]	; 144c0 <__assert_fail@plt+0x31f8>
   13ea4:	bl	112c8 <__assert_fail@plt>
   13ea8:	ldr	r2, [fp, #4]
   13eac:	add	r2, r2, #1
   13eb0:	str	r2, [fp, #4]
   13eb4:	b	13ee4 <__assert_fail@plt+0x2c1c>
   13eb8:	add	r6, r6, #24
   13ebc:	mov	r3, r6
   13ec0:	ldr	r2, [r6, #-20]	; 0xffffffec
   13ec4:	cmp	r2, #0
   13ec8:	bne	13ed8 <__assert_fail@plt+0x2c10>
   13ecc:	ldr	r2, [r6, #-24]	; 0xffffffe8
   13ed0:	cmp	r2, #0
   13ed4:	beq	13f1c <__assert_fail@plt+0x2c54>
   13ed8:	ldr	r2, [r3, #-12]
   13edc:	tst	r2, #4
   13ee0:	beq	13ea8 <__assert_fail@plt+0x2be0>
   13ee4:	ldr	r2, [r3, #-12]
   13ee8:	tst	r2, #8
   13eec:	bne	13eb8 <__assert_fail@plt+0x2bf0>
   13ef0:	ldr	r7, [r3, #-20]	; 0xffffffec
   13ef4:	sub	r3, r7, #1
   13ef8:	cmp	r3, #254	; 0xfe
   13efc:	bhi	13eb8 <__assert_fail@plt+0x2bf0>
   13f00:	bl	11184 <__ctype_b_loc@plt>
   13f04:	ldr	r3, [r0]
   13f08:	lsl	r7, r7, #1
   13f0c:	ldrh	r3, [r3, r7]
   13f10:	tst	r3, #16384	; 0x4000
   13f14:	addne	r8, r8, #1
   13f18:	b	13eb8 <__assert_fail@plt+0x2bf0>
   13f1c:	ldr	r2, [r6, #-8]
   13f20:	cmp	r2, #0
   13f24:	bne	13ed8 <__assert_fail@plt+0x2c10>
   13f28:	ldr	r2, [r6, #-4]
   13f2c:	cmp	r2, #0
   13f30:	bne	13ed8 <__assert_fail@plt+0x2c10>
   13f34:	ldr	r0, [fp, #4]
   13f38:	rsb	r0, r0, r0, lsl #3
   13f3c:	lsl	r0, r0, #2
   13f40:	bl	17888 <argp_parse@@Base+0x17fc>
   13f44:	str	r0, [fp]
   13f48:	add	r0, r8, #1
   13f4c:	bl	17888 <argp_parse@@Base+0x17fc>
   13f50:	str	r0, [fp, #8]
   13f54:	ldr	r8, [fp]
   13f58:	cmp	r0, #0
   13f5c:	cmpne	r8, #0
   13f60:	bne	13f78 <__assert_fail@plt+0x2cb0>
   13f64:	ldr	r3, [pc, #1348]	; 144b0 <__assert_fail@plt+0x31e8>
   13f68:	ldr	r2, [pc, #1364]	; 144c4 <__assert_fail@plt+0x31fc>
   13f6c:	ldr	r1, [pc, #1348]	; 144b8 <__assert_fail@plt+0x31f0>
   13f70:	ldr	r0, [pc, #1360]	; 144c8 <__assert_fail@plt+0x3200>
   13f74:	bl	112c8 <__assert_fail@plt>
   13f78:	ldr	r2, [fp, #4]
   13f7c:	ldr	r3, [pc, #1352]	; 144cc <__assert_fail@plt+0x3204>
   13f80:	cmp	r2, r3
   13f84:	addls	r8, r8, #28
   13f88:	movls	r7, r0
   13f8c:	movls	sl, #0
   13f90:	bls	13fdc <__assert_fail@plt+0x2d14>
   13f94:	ldr	r3, [pc, #1300]	; 144b0 <__assert_fail@plt+0x31e8>
   13f98:	mov	r2, #476	; 0x1dc
   13f9c:	ldr	r1, [pc, #1300]	; 144b8 <__assert_fail@plt+0x31f0>
   13fa0:	ldr	r0, [pc, #1320]	; 144d0 <__assert_fail@plt+0x3208>
   13fa4:	bl	112c8 <__assert_fail@plt>
   13fa8:	ldr	r3, [r5, #4]
   13fac:	cmp	r3, #0
   13fb0:	addeq	r9, r4, #1
   13fb4:	movne	r9, r4
   13fb8:	b	14020 <__assert_fail@plt+0x2d58>
   13fbc:	ldr	r3, [r5, #16]
   13fc0:	cmp	r3, #0
   13fc4:	bne	143cc <__assert_fail@plt+0x3104>
   13fc8:	ldr	r3, [r5, #20]
   13fcc:	cmp	r3, #0
   13fd0:	bne	143cc <__assert_fail@plt+0x3104>
   13fd4:	add	r8, r8, #28
   13fd8:	mov	r4, r9
   13fdc:	ldr	r3, [r5, #4]
   13fe0:	cmp	r3, #0
   13fe4:	bne	13ff4 <__assert_fail@plt+0x2d2c>
   13fe8:	ldr	r3, [r5]
   13fec:	cmp	r3, #0
   13ff0:	beq	14038 <__assert_fail@plt+0x2d70>
   13ff4:	mov	r6, r8
   13ff8:	str	r5, [r8, #-28]	; 0xffffffe4
   13ffc:	str	sl, [r8, #-24]	; 0xffffffe8
   14000:	str	r7, [r8, #-20]	; 0xffffffec
   14004:	ldr	r9, [r5, #20]
   14008:	cmp	r9, #0
   1400c:	bne	14020 <__assert_fail@plt+0x2d58>
   14010:	ldr	r3, [r5]
   14014:	cmp	r3, #0
   14018:	movne	r9, r4
   1401c:	beq	13fa8 <__assert_fail@plt+0x2ce0>
   14020:	str	r9, [r6, #-16]
   14024:	ldr	r3, [sp, #28]
   14028:	str	r3, [r6, #-12]
   1402c:	ldr	r3, [sp, #24]
   14030:	str	r3, [r6, #-8]
   14034:	b	143d8 <__assert_fail@plt+0x3110>
   14038:	ldr	r3, [r5, #16]
   1403c:	cmp	r3, #0
   14040:	bne	13ff4 <__assert_fail@plt+0x2d2c>
   14044:	ldr	r3, [r5, #20]
   14048:	cmp	r3, #0
   1404c:	bne	13ff4 <__assert_fail@plt+0x2d2c>
   14050:	mov	r3, #0
   14054:	strb	r3, [r7]
   14058:	ldr	r3, [sp, #8]
   1405c:	cmp	r3, #0
   14060:	beq	1439c <__assert_fail@plt+0x30d4>
   14064:	ldr	r3, [r3]
   14068:	cmp	r3, #0
   1406c:	beq	1439c <__assert_fail@plt+0x30d4>
   14070:	add	r3, fp, #12
   14074:	str	r3, [sp, #44]	; 0x2c
   14078:	str	fp, [sp, #20]
   1407c:	b	1410c <__assert_fail@plt+0x2e44>
   14080:	ldr	r1, [sp, #28]
   14084:	b	1418c <__assert_fail@plt+0x2ec4>
   14088:	mov	r2, r3
   1408c:	ldr	r3, [r2, #24]
   14090:	cmp	r3, #0
   14094:	bne	14088 <__assert_fail@plt+0x2dc0>
   14098:	add	r2, r2, #24
   1409c:	ldr	r1, [sp, #16]
   140a0:	ldr	r3, [r1, #12]
   140a4:	str	r3, [r2]
   140a8:	mov	r2, #0
   140ac:	str	r2, [r1, #12]
   140b0:	ldr	r3, [r1, #4]
   140b4:	cmp	r3, r2
   140b8:	beq	140f0 <__assert_fail@plt+0x2e28>
   140bc:	ldr	r0, [sp, #20]
   140c0:	ldr	r2, [r0, #4]
   140c4:	cmp	r2, #0
   140c8:	bne	141b4 <__assert_fail@plt+0x2eec>
   140cc:	str	r3, [r0, #4]
   140d0:	mov	r2, r1
   140d4:	ldr	r3, [r1]
   140d8:	str	r3, [r0]
   140dc:	ldr	r3, [r2, #8]
   140e0:	str	r3, [r0, #8]
   140e4:	mov	r3, r2
   140e8:	mov	r2, #0
   140ec:	str	r2, [r3, #4]
   140f0:	ldr	r0, [sp, #16]
   140f4:	bl	12cdc <__assert_fail@plt+0x1a14>
   140f8:	ldr	r2, [sp, #8]
   140fc:	ldr	r3, [r2, #16]!
   14100:	str	r2, [sp, #8]
   14104:	cmp	r3, #0
   14108:	beq	14398 <__assert_fail@plt+0x30d0>
   1410c:	ldr	r3, [sp, #8]
   14110:	ldr	r4, [r3, #12]
   14114:	cmp	r4, #0
   14118:	bne	14128 <__assert_fail@plt+0x2e60>
   1411c:	ldr	r3, [r3, #8]
   14120:	cmp	r3, #0
   14124:	beq	14080 <__assert_fail@plt+0x2db8>
   14128:	ldr	r2, [sp, #8]
   1412c:	ldr	r5, [r2, #8]
   14130:	ldr	r7, [sp, #24]
   14134:	ldr	r3, [r7, #16]
   14138:	sub	r3, r2, r3
   1413c:	asr	r6, r3, #4
   14140:	mov	r0, #28
   14144:	bl	17888 <argp_parse@@Base+0x17fc>
   14148:	subs	r1, r0, #0
   1414c:	beq	1418c <__assert_fail@plt+0x2ec4>
   14150:	str	r4, [r1, #8]
   14154:	str	r5, [r1]
   14158:	str	r6, [r1, #4]
   1415c:	ldr	r3, [sp, #28]
   14160:	str	r3, [r1, #12]
   14164:	str	r7, [r1, #16]
   14168:	cmp	r3, #0
   1416c:	ldrne	r3, [r3, #20]
   14170:	addne	r3, r3, #1
   14174:	moveq	r3, #0
   14178:	str	r3, [r1, #20]
   1417c:	ldr	r2, [sp, #20]
   14180:	ldr	r3, [r2, #12]
   14184:	str	r3, [r1, #24]
   14188:	str	r1, [r2, #12]
   1418c:	ldr	r3, [sp, #8]
   14190:	ldr	r0, [r3]
   14194:	bl	13e28 <__assert_fail@plt+0x2b60>
   14198:	str	r0, [sp, #16]
   1419c:	ldr	r3, [sp, #20]
   141a0:	ldr	r2, [r3, #12]
   141a4:	cmp	r2, #0
   141a8:	ldreq	r2, [sp, #44]	; 0x2c
   141ac:	bne	1408c <__assert_fail@plt+0x2dc4>
   141b0:	b	1409c <__assert_fail@plt+0x2dd4>
   141b4:	add	r3, r3, r2
   141b8:	str	r3, [sp, #36]	; 0x24
   141bc:	rsb	r0, r3, r3, lsl #3
   141c0:	lsl	r0, r0, #2
   141c4:	bl	17888 <argp_parse@@Base+0x17fc>
   141c8:	mov	r4, r0
   141cc:	str	r0, [sp, #32]
   141d0:	ldr	r3, [sp, #20]
   141d4:	ldr	r0, [r3, #8]
   141d8:	bl	111a8 <strlen@plt>
   141dc:	mov	r6, r0
   141e0:	ldr	r3, [sp, #16]
   141e4:	ldr	r0, [r3, #8]
   141e8:	bl	111a8 <strlen@plt>
   141ec:	add	r0, r6, r0
   141f0:	add	r0, r0, #1
   141f4:	bl	17888 <argp_parse@@Base+0x17fc>
   141f8:	mov	sl, r0
   141fc:	cmp	r4, #0
   14200:	cmpne	r0, #0
   14204:	beq	142d0 <__assert_fail@plt+0x3008>
   14208:	ldr	r3, [sp, #36]	; 0x24
   1420c:	ldr	r2, [pc, #696]	; 144cc <__assert_fail@plt+0x3204>
   14210:	cmp	r3, r2
   14214:	bhi	142e4 <__assert_fail@plt+0x301c>
   14218:	ldr	r5, [sp, #20]
   1421c:	ldr	r2, [r5]
   14220:	mov	r1, r2
   14224:	str	r2, [sp, #40]	; 0x28
   14228:	ldr	r4, [r5, #4]
   1422c:	rsb	r7, r4, r4, lsl #3
   14230:	lsl	r7, r7, #2
   14234:	mov	r2, r7
   14238:	ldr	r8, [sp, #32]
   1423c:	mov	r0, r8
   14240:	bl	11178 <mempcpy@plt>
   14244:	ldr	r3, [sp, #16]
   14248:	ldr	r1, [r3, #4]
   1424c:	str	r1, [sp, #4]
   14250:	rsb	r2, r1, r1, lsl #3
   14254:	lsl	r2, r2, #2
   14258:	ldr	r1, [r3]
   1425c:	bl	11088 <memcpy@plt>
   14260:	ldr	r5, [r5, #8]
   14264:	mov	r2, r6
   14268:	mov	r1, r5
   1426c:	mov	r0, sl
   14270:	bl	11088 <memcpy@plt>
   14274:	cmp	r4, #0
   14278:	beq	142f8 <__assert_fail@plt+0x3030>
   1427c:	mov	r2, r8
   14280:	ldr	r3, [r2, #8]
   14284:	sub	r3, r3, r5
   14288:	add	r3, sl, r3
   1428c:	str	r3, [r2, #8]
   14290:	add	r2, r2, #28
   14294:	subs	r4, r4, #1
   14298:	bne	14280 <__assert_fail@plt+0x2fb8>
   1429c:	ldr	r3, [sp, #32]
   142a0:	add	r7, r3, r7
   142a4:	add	r3, sl, r6
   142a8:	str	r3, [sp, #12]
   142ac:	ldr	r2, [sp, #16]
   142b0:	ldr	r8, [r2, #8]
   142b4:	ldr	r2, [sp, #4]
   142b8:	cmp	r2, #0
   142bc:	beq	14360 <__assert_fail@plt+0x3098>
   142c0:	add	r9, r7, #28
   142c4:	mov	fp, r3
   142c8:	sub	r7, r3, #1
   142cc:	b	14348 <__assert_fail@plt+0x3080>
   142d0:	ldr	r3, [pc, #508]	; 144d4 <__assert_fail@plt+0x320c>
   142d4:	ldr	r2, [pc, #508]	; 144d8 <__assert_fail@plt+0x3210>
   142d8:	ldr	r1, [pc, #472]	; 144b8 <__assert_fail@plt+0x31f0>
   142dc:	ldr	r0, [pc, #504]	; 144dc <__assert_fail@plt+0x3214>
   142e0:	bl	112c8 <__assert_fail@plt>
   142e4:	ldr	r3, [pc, #488]	; 144d4 <__assert_fail@plt+0x320c>
   142e8:	mov	r2, #972	; 0x3cc
   142ec:	ldr	r1, [pc, #452]	; 144b8 <__assert_fail@plt+0x31f0>
   142f0:	ldr	r0, [pc, #488]	; 144e0 <__assert_fail@plt+0x3218>
   142f4:	bl	112c8 <__assert_fail@plt>
   142f8:	ldr	r7, [sp, #32]
   142fc:	b	142a4 <__assert_fail@plt+0x2fdc>
   14300:	ldr	r3, [sp, #12]
   14304:	cmp	sl, r3
   14308:	bcs	144a0 <__assert_fail@plt+0x31d8>
   1430c:	ldrb	r3, [sl]
   14310:	cmp	r3, r1
   14314:	beq	144a8 <__assert_fail@plt+0x31e0>
   14318:	mov	r3, sl
   1431c:	cmp	r7, r3
   14320:	beq	144a0 <__assert_fail@plt+0x31d8>
   14324:	ldrb	r2, [r3, #1]!
   14328:	cmp	r2, r1
   1432c:	bne	1431c <__assert_fail@plt+0x3054>
   14330:	b	144a8 <__assert_fail@plt+0x31e0>
   14334:	add	r9, r9, #28
   14338:	ldr	r3, [sp, #4]
   1433c:	subs	r3, r3, #1
   14340:	str	r3, [sp, #4]
   14344:	beq	14364 <__assert_fail@plt+0x309c>
   14348:	str	fp, [r9, #-20]	; 0xffffffec
   1434c:	ldr	r5, [r9, #-24]	; 0xffffffe8
   14350:	ldr	r4, [r9, #-28]	; 0xffffffe4
   14354:	cmp	r5, #0
   14358:	bne	14468 <__assert_fail@plt+0x31a0>
   1435c:	b	14334 <__assert_fail@plt+0x306c>
   14360:	ldr	fp, [sp, #12]
   14364:	mov	r3, #0
   14368:	strb	r3, [fp]
   1436c:	ldr	r0, [sp, #40]	; 0x28
   14370:	bl	16c80 <argp_parse@@Base+0xbf4>
   14374:	ldr	r4, [sp, #20]
   14378:	ldr	r0, [r4, #8]
   1437c:	bl	16c80 <argp_parse@@Base+0xbf4>
   14380:	ldr	r2, [sp, #32]
   14384:	str	r2, [r4]
   14388:	ldr	r2, [sp, #36]	; 0x24
   1438c:	str	r2, [r4, #4]
   14390:	str	sl, [r4, #8]
   14394:	b	140f0 <__assert_fail@plt+0x2e28>
   14398:	ldr	fp, [sp, #20]
   1439c:	mov	r0, fp
   143a0:	add	sp, sp, #52	; 0x34
   143a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143a8:	strb	r4, [r7]
   143ac:	add	r7, r7, #1
   143b0:	add	r5, r5, #24
   143b4:	ldr	r3, [r5, #4]
   143b8:	cmp	r3, #0
   143bc:	bne	143cc <__assert_fail@plt+0x3104>
   143c0:	ldr	r3, [r5]
   143c4:	cmp	r3, #0
   143c8:	beq	13fbc <__assert_fail@plt+0x2cf4>
   143cc:	ldr	r3, [r5, #12]
   143d0:	tst	r3, #4
   143d4:	beq	13fd4 <__assert_fail@plt+0x2d0c>
   143d8:	ldr	r3, [r6, #-24]	; 0xffffffe8
   143dc:	add	r3, r3, #1
   143e0:	str	r3, [r6, #-24]	; 0xffffffe8
   143e4:	ldr	r3, [r5, #12]
   143e8:	tst	r3, #8
   143ec:	bne	143b0 <__assert_fail@plt+0x30e8>
   143f0:	ldr	r4, [r5, #4]
   143f4:	sub	r3, r4, #1
   143f8:	cmp	r3, #254	; 0xfe
   143fc:	bhi	143b0 <__assert_fail@plt+0x30e8>
   14400:	bl	11184 <__ctype_b_loc@plt>
   14404:	ldr	r2, [r0]
   14408:	lsl	r3, r4, #1
   1440c:	ldrh	r3, [r2, r3]
   14410:	tst	r3, #16384	; 0x4000
   14414:	beq	143b0 <__assert_fail@plt+0x30e8>
   14418:	uxtb	r4, r4
   1441c:	ldr	r3, [fp, #8]
   14420:	cmp	r3, r7
   14424:	bcs	143a8 <__assert_fail@plt+0x30e0>
   14428:	ldrb	r2, [r3]
   1442c:	cmp	r2, r4
   14430:	beq	143b0 <__assert_fail@plt+0x30e8>
   14434:	sub	r1, r7, #1
   14438:	cmp	r3, r1
   1443c:	beq	143a8 <__assert_fail@plt+0x30e0>
   14440:	ldrb	r2, [r3, #1]!
   14444:	cmp	r2, r4
   14448:	bne	14438 <__assert_fail@plt+0x3170>
   1444c:	b	143b0 <__assert_fail@plt+0x30e8>
   14450:	ldrb	r1, [r8]
   14454:	cmp	r1, r6
   14458:	beq	14300 <__assert_fail@plt+0x3038>
   1445c:	add	r4, r4, #24
   14460:	subs	r5, r5, #1
   14464:	beq	14334 <__assert_fail@plt+0x306c>
   14468:	ldr	r3, [r4, #12]
   1446c:	tst	r3, #8
   14470:	bne	1445c <__assert_fail@plt+0x3194>
   14474:	ldr	r6, [r4, #4]
   14478:	sub	r3, r6, #1
   1447c:	cmp	r3, #254	; 0xfe
   14480:	bhi	1445c <__assert_fail@plt+0x3194>
   14484:	bl	11184 <__ctype_b_loc@plt>
   14488:	ldr	r2, [r0]
   1448c:	lsl	r3, r6, #1
   14490:	ldrh	r3, [r2, r3]
   14494:	tst	r3, #16384	; 0x4000
   14498:	bne	14450 <__assert_fail@plt+0x3188>
   1449c:	b	1445c <__assert_fail@plt+0x3194>
   144a0:	strb	r1, [fp]
   144a4:	add	fp, fp, #1
   144a8:	add	r8, r8, #1
   144ac:	b	1445c <__assert_fail@plt+0x3194>
   144b0:			; <UNDEFINED> instruction: 0x000196b8
   144b4:	andeq	r0, r0, r2, asr #3
   144b8:	andeq	r9, r1, r8, lsr #15
   144bc:			; <UNDEFINED> instruction: 0x000197b4
   144c0:			; <UNDEFINED> instruction: 0x000197b8
   144c4:	ldrdeq	r0, [r0], -sl
   144c8:	andeq	r9, r1, r8, asr #15
   144cc:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   144d0:	andeq	r9, r1, ip, ror #15
   144d4:	andeq	r9, r1, r4, asr #13
   144d8:	andeq	r0, r0, sl, asr #7
   144dc:	andeq	r9, r1, r8, lsr #16
   144e0:	andeq	r9, r1, r4, asr #16

000144e4 <argp_failure@@Base>:
   144e4:	push	{r3}		; (str r3, [sp, #-4]!)
   144e8:	push	{r4, r5, r6, r7, lr}
   144ec:	sub	sp, sp, #200	; 0xc8
   144f0:	mov	r7, r1
   144f4:	mov	r6, r2
   144f8:	subs	r5, r0, #0
   144fc:	beq	1464c <argp_failure@@Base+0x168>
   14500:	ldr	r3, [r5, #16]
   14504:	tst	r3, #2
   14508:	bne	1463c <argp_failure@@Base+0x158>
   1450c:	ldr	r4, [r5, #44]	; 0x2c
   14510:	cmp	r4, #0
   14514:	beq	1463c <argp_failure@@Base+0x158>
   14518:	mov	r0, r4
   1451c:	bl	1125c <flockfile@plt>
   14520:	ldr	r0, [r5, #40]	; 0x28
   14524:	mov	r1, r4
   14528:	bl	10fec <fputs_unlocked@plt>
   1452c:	ldr	r3, [sp, #220]	; 0xdc
   14530:	cmp	r3, #0
   14534:	beq	14590 <argp_failure@@Base+0xac>
   14538:	add	r3, sp, #224	; 0xe0
   1453c:	str	r3, [sp]
   14540:	ldr	r3, [r4, #20]
   14544:	ldr	r2, [r4, #24]
   14548:	cmp	r3, r2
   1454c:	addcc	r2, r3, #1
   14550:	strcc	r2, [r4, #20]
   14554:	movcc	r2, #58	; 0x3a
   14558:	strbcc	r2, [r3]
   1455c:	bcs	14670 <argp_failure@@Base+0x18c>
   14560:	ldr	r3, [r4, #20]
   14564:	ldr	r2, [r4, #24]
   14568:	cmp	r3, r2
   1456c:	addcc	r2, r3, #1
   14570:	strcc	r2, [r4, #20]
   14574:	movcc	r2, #32
   14578:	strbcc	r2, [r3]
   1457c:	bcs	14680 <argp_failure@@Base+0x19c>
   14580:	ldr	r2, [sp]
   14584:	ldr	r1, [sp, #220]	; 0xdc
   14588:	mov	r0, r4
   1458c:	bl	11244 <vfprintf@plt>
   14590:	cmp	r6, #0
   14594:	beq	145f8 <argp_failure@@Base+0x114>
   14598:	ldr	r3, [r4, #20]
   1459c:	ldr	r2, [r4, #24]
   145a0:	cmp	r3, r2
   145a4:	addcc	r2, r3, #1
   145a8:	strcc	r2, [r4, #20]
   145ac:	movcc	r2, #58	; 0x3a
   145b0:	strbcc	r2, [r3]
   145b4:	bcs	14690 <argp_failure@@Base+0x1ac>
   145b8:	ldr	r3, [r4, #20]
   145bc:	ldr	r2, [r4, #24]
   145c0:	cmp	r3, r2
   145c4:	addcc	r2, r3, #1
   145c8:	strcc	r2, [r4, #20]
   145cc:	movcc	r2, #32
   145d0:	strbcc	r2, [r3]
   145d4:	bcs	146a0 <argp_failure@@Base+0x1bc>
   145d8:	mov	r2, #200	; 0xc8
   145dc:	mov	r1, sp
   145e0:	mov	r0, r6
   145e4:	bl	111d8 <strerror_r@plt>
   145e8:	cmp	r0, #0
   145ec:	beq	146b0 <argp_failure@@Base+0x1cc>
   145f0:	mov	r1, r4
   145f4:	bl	10fec <fputs_unlocked@plt>
   145f8:	ldr	r3, [r4, #20]
   145fc:	ldr	r2, [r4, #24]
   14600:	cmp	r3, r2
   14604:	addcc	r2, r3, #1
   14608:	strcc	r2, [r4, #20]
   1460c:	movcc	r2, #10
   14610:	strbcc	r2, [r3]
   14614:	bcs	146c8 <argp_failure@@Base+0x1e4>
   14618:	mov	r0, r4
   1461c:	bl	110f4 <funlockfile@plt>
   14620:	cmp	r7, #0
   14624:	beq	1463c <argp_failure@@Base+0x158>
   14628:	cmp	r5, #0
   1462c:	beq	146d8 <argp_failure@@Base+0x1f4>
   14630:	ldr	r3, [r5, #16]
   14634:	tst	r3, #32
   14638:	beq	146d8 <argp_failure@@Base+0x1f4>
   1463c:	add	sp, sp, #200	; 0xc8
   14640:	pop	{r4, r5, r6, r7, lr}
   14644:	add	sp, sp, #4
   14648:	bx	lr
   1464c:	ldr	r3, [pc, #140]	; 146e0 <argp_failure@@Base+0x1fc>
   14650:	ldr	r4, [r3]
   14654:	cmp	r4, #0
   14658:	beq	1463c <argp_failure@@Base+0x158>
   1465c:	mov	r0, r4
   14660:	bl	1125c <flockfile@plt>
   14664:	ldr	r3, [pc, #120]	; 146e4 <argp_failure@@Base+0x200>
   14668:	ldr	r0, [r3]
   1466c:	b	14524 <argp_failure@@Base+0x40>
   14670:	mov	r1, #58	; 0x3a
   14674:	mov	r0, r4
   14678:	bl	11214 <__overflow@plt>
   1467c:	b	14560 <argp_failure@@Base+0x7c>
   14680:	mov	r1, #32
   14684:	mov	r0, r4
   14688:	bl	11214 <__overflow@plt>
   1468c:	b	14580 <argp_failure@@Base+0x9c>
   14690:	mov	r1, #58	; 0x3a
   14694:	mov	r0, r4
   14698:	bl	11214 <__overflow@plt>
   1469c:	b	145b8 <argp_failure@@Base+0xd4>
   146a0:	mov	r1, #32
   146a4:	mov	r0, r4
   146a8:	bl	11214 <__overflow@plt>
   146ac:	b	145d8 <argp_failure@@Base+0xf4>
   146b0:	mov	r0, r6
   146b4:	bl	11154 <strerror@plt>
   146b8:	ldr	r3, [pc, #40]	; 146e8 <argp_failure@@Base+0x204>
   146bc:	cmp	r0, #0
   146c0:	moveq	r0, r3
   146c4:	b	145f0 <argp_failure@@Base+0x10c>
   146c8:	mov	r1, #10
   146cc:	mov	r0, r4
   146d0:	bl	11214 <__overflow@plt>
   146d4:	b	14618 <argp_failure@@Base+0x134>
   146d8:	mov	r0, r7
   146dc:	bl	1119c <exit@plt>
   146e0:	andeq	fp, r2, r0, lsr #5
   146e4:	muleq	r2, r8, r2
   146e8:	andeq	r9, r1, r8, ror r8
   146ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146f0:	add	fp, sp, #32
   146f4:	sub	sp, sp, #108	; 0x6c
   146f8:	str	r0, [fp, #-112]	; 0xffffff90
   146fc:	str	r1, [fp, #-100]	; 0xffffff9c
   14700:	str	r3, [fp, #-104]	; 0xffffff98
   14704:	subs	r3, r2, #0
   14708:	str	r3, [fp, #-132]	; 0xffffff7c
   1470c:	beq	15778 <argp_failure@@Base+0x1294>
   14710:	mov	r0, r3
   14714:	bl	1125c <flockfile@plt>
   14718:	ldr	r3, [pc, #3772]	; 155dc <argp_failure@@Base+0x10f8>
   1471c:	ldr	r3, [r3, #36]	; 0x24
   14720:	str	r3, [fp, #-108]	; 0xffffff94
   14724:	cmp	r3, #0
   14728:	beq	14800 <argp_failure@@Base+0x31c>
   1472c:	mov	r3, #0
   14730:	ldr	r2, [pc, #3748]	; 155dc <argp_failure@@Base+0x10f8>
   14734:	ldr	r2, [r2, #32]
   14738:	mov	r1, r3
   1473c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   14740:	bl	17908 <argp_parse@@Base+0x187c>
   14744:	subs	sl, r0, #0
   14748:	beq	14bac <argp_failure@@Base+0x6c8>
   1474c:	ldr	r3, [fp, #-104]	; 0xffffff98
   14750:	tst	r3, #11
   14754:	moveq	r3, #0
   14758:	streq	r3, [fp, #-108]	; 0xffffff94
   1475c:	bne	14bb8 <argp_failure@@Base+0x6d4>
   14760:	ldr	r3, [fp, #-104]	; 0xffffff98
   14764:	tst	r3, #3
   14768:	moveq	r4, #0
   1476c:	bne	14c3c <argp_failure@@Base+0x758>
   14770:	ldr	r3, [fp, #-104]	; 0xffffff98
   14774:	tst	r3, #16
   14778:	bne	14e38 <argp_failure@@Base+0x954>
   1477c:	ldr	r3, [fp, #-104]	; 0xffffff98
   14780:	tst	r3, #4
   14784:	bne	14e60 <argp_failure@@Base+0x97c>
   14788:	ldr	r3, [fp, #-104]	; 0xffffff98
   1478c:	tst	r3, #8
   14790:	beq	156ec <argp_failure@@Base+0x1208>
   14794:	ldr	r3, [fp, #-108]	; 0xffffff94
   14798:	ldr	r3, [r3, #4]
   1479c:	cmp	r3, #0
   147a0:	beq	156ec <argp_failure@@Base+0x1208>
   147a4:	cmp	r4, #0
   147a8:	beq	147d0 <argp_failure@@Base+0x2ec>
   147ac:	ldr	r2, [sl, #28]
   147b0:	ldr	r3, [sl, #32]
   147b4:	cmp	r2, r3
   147b8:	bcs	14e7c <argp_failure@@Base+0x998>
   147bc:	ldr	r3, [sl, #28]
   147c0:	add	r2, r3, #1
   147c4:	str	r2, [sl, #28]
   147c8:	mov	r2, #10
   147cc:	strb	r2, [r3]
   147d0:	mov	r3, #0
   147d4:	str	r3, [fp, #-88]	; 0xffffffa8
   147d8:	str	r3, [fp, #-84]	; 0xffffffac
   147dc:	str	r3, [fp, #-80]	; 0xffffffb0
   147e0:	ldr	r3, [fp, #-108]	; 0xffffff94
   147e4:	ldr	r2, [r3]
   147e8:	str	r2, [fp, #-96]	; 0xffffffa0
   147ec:	ldr	r3, [r3, #4]
   147f0:	str	r3, [fp, #-120]	; 0xffffff88
   147f4:	cmp	r3, #0
   147f8:	bne	15264 <argp_failure@@Base+0xd80>
   147fc:	b	156e8 <argp_failure@@Base+0x1204>
   14800:	ldr	r0, [pc, #3452]	; 15584 <argp_failure@@Base+0x10a0>
   14804:	bl	11130 <getenv@plt>
   14808:	mov	r9, r0
   1480c:	sub	ip, fp, #76	; 0x4c
   14810:	ldr	lr, [pc, #3524]	; 155dc <argp_failure@@Base+0x10f8>
   14814:	ldm	lr!, {r0, r1, r2, r3}
   14818:	stmia	ip!, {r0, r1, r2, r3}
   1481c:	ldm	lr!, {r0, r1, r2, r3}
   14820:	stmia	ip!, {r0, r1, r2, r3}
   14824:	ldm	lr, {r0, r1}
   14828:	stm	ip, {r0, r1}
   1482c:	cmp	r9, #0
   14830:	ldrne	sl, [pc, #3408]	; 15588 <argp_failure@@Base+0x10a4>
   14834:	addne	r8, sl, #168	; 0xa8
   14838:	bne	14adc <argp_failure@@Base+0x5f8>
   1483c:	b	1472c <argp_failure@@Base+0x248>
   14840:	mov	r5, r3
   14844:	mov	r9, r5
   14848:	mov	r3, r5
   1484c:	ldrb	r0, [r3], #1
   14850:	lsl	r2, r0, #1
   14854:	ldrh	r2, [r1, r2]
   14858:	tst	r2, #8192	; 0x2000
   1485c:	bne	14840 <argp_failure@@Base+0x35c>
   14860:	tst	r2, #1024	; 0x400
   14864:	beq	14ad4 <argp_failure@@Base+0x5f0>
   14868:	cmp	r0, #95	; 0x5f
   1486c:	cmpne	r0, #45	; 0x2d
   14870:	moveq	r3, #1
   14874:	movne	r3, #0
   14878:	lsl	r2, r2, #28
   1487c:	orrs	r3, r3, r2, lsr #31
   14880:	beq	157fc <argp_failure@@Base+0x1318>
   14884:	mov	r4, r5
   14888:	ldrb	r3, [r4, #1]!
   1488c:	lsl	r2, r3, #1
   14890:	ldrh	r2, [r1, r2]
   14894:	lsl	r2, r2, #28
   14898:	cmp	r3, #95	; 0x5f
   1489c:	cmpne	r3, #45	; 0x2d
   148a0:	moveq	r3, #1
   148a4:	movne	r3, #0
   148a8:	orrs	r3, r3, r2, lsr #31
   148ac:	bne	14888 <argp_failure@@Base+0x3a4>
   148b0:	sub	r5, r4, r5
   148b4:	ldrb	r3, [r4]
   148b8:	lsl	r2, r3, #1
   148bc:	ldrh	r2, [r1, r2]
   148c0:	tst	r2, #8192	; 0x2000
   148c4:	beq	148dc <argp_failure@@Base+0x3f8>
   148c8:	ldrb	r3, [r4, #1]!
   148cc:	lsl	r2, r3, #1
   148d0:	ldrh	r2, [r1, r2]
   148d4:	tst	r2, #8192	; 0x2000
   148d8:	bne	148c8 <argp_failure@@Base+0x3e4>
   148dc:	cmp	r3, #44	; 0x2c
   148e0:	cmpne	r3, #0
   148e4:	beq	15814 <argp_failure@@Base+0x1330>
   148e8:	cmp	r3, #61	; 0x3d
   148ec:	beq	14914 <argp_failure@@Base+0x430>
   148f0:	ldrb	r3, [r4]
   148f4:	lsl	r3, r3, #1
   148f8:	ldrh	r3, [r1, r3]
   148fc:	tst	r3, #2048	; 0x800
   14900:	bne	14994 <argp_failure@@Base+0x4b0>
   14904:	ldr	r3, [fp, #-108]	; 0xffffff94
   14908:	str	r3, [fp, #-96]	; 0xffffffa0
   1490c:	str	r3, [fp, #-116]	; 0xffffff8c
   14910:	b	15828 <argp_failure@@Base+0x1344>
   14914:	add	r2, r4, #1
   14918:	ldrb	r3, [r4, #1]
   1491c:	lsl	r3, r3, #1
   14920:	ldrh	r3, [r1, r3]
   14924:	tst	r3, #8192	; 0x2000
   14928:	beq	1580c <argp_failure@@Base+0x1328>
   1492c:	ldrb	r3, [r2, #1]!
   14930:	lsl	r3, r3, #1
   14934:	ldrh	r3, [r1, r3]
   14938:	tst	r3, #8192	; 0x2000
   1493c:	bne	1492c <argp_failure@@Base+0x448>
   14940:	mov	r4, r2
   14944:	b	148f0 <argp_failure@@Base+0x40c>
   14948:	ldrb	r3, [r9, #1]
   1494c:	cmp	r3, #111	; 0x6f
   14950:	movne	r3, #1
   14954:	strne	r3, [fp, #-96]	; 0xffffffa0
   14958:	strne	r3, [fp, #-116]	; 0xffffff8c
   1495c:	bne	15828 <argp_failure@@Base+0x1344>
   14960:	ldrb	r3, [r9, #2]
   14964:	cmp	r3, #45	; 0x2d
   14968:	movne	r3, #1
   1496c:	strne	r3, [fp, #-96]	; 0xffffffa0
   14970:	strne	r3, [fp, #-116]	; 0xffffff8c
   14974:	bne	15828 <argp_failure@@Base+0x1344>
   14978:	add	r9, r9, #3
   1497c:	sub	r5, r5, #3
   14980:	ldr	r3, [fp, #-108]	; 0xffffff94
   14984:	str	r3, [fp, #-116]	; 0xffffff8c
   14988:	mov	r3, #1
   1498c:	str	r3, [fp, #-96]	; 0xffffffa0
   14990:	b	15828 <argp_failure@@Base+0x1344>
   14994:	mov	r2, #10
   14998:	mov	r1, #0
   1499c:	mov	r0, r4
   149a0:	bl	11010 <strtol@plt>
   149a4:	str	r0, [fp, #-116]	; 0xffffff8c
   149a8:	ldr	r2, [r6]
   149ac:	ldrb	r3, [r4]
   149b0:	lsl	r3, r3, #1
   149b4:	ldrh	r3, [r2, r3]
   149b8:	tst	r3, #2048	; 0x800
   149bc:	beq	149d4 <argp_failure@@Base+0x4f0>
   149c0:	ldrb	r3, [r4, #1]!
   149c4:	lsl	r3, r3, #1
   149c8:	ldrh	r3, [r2, r3]
   149cc:	tst	r3, #2048	; 0x800
   149d0:	bne	149c0 <argp_failure@@Base+0x4dc>
   149d4:	ldrb	r3, [r4]
   149d8:	lsl	r3, r3, #1
   149dc:	ldrh	r3, [r2, r3]
   149e0:	tst	r3, #8192	; 0x2000
   149e4:	beq	14a08 <argp_failure@@Base+0x524>
   149e8:	ldrb	r3, [r4, #1]!
   149ec:	lsl	r3, r3, #1
   149f0:	ldrh	r3, [r2, r3]
   149f4:	tst	r3, #8192	; 0x2000
   149f8:	bne	149e8 <argp_failure@@Base+0x504>
   149fc:	ldr	r3, [fp, #-108]	; 0xffffff94
   14a00:	str	r3, [fp, #-96]	; 0xffffffa0
   14a04:	b	15828 <argp_failure@@Base+0x1344>
   14a08:	ldr	r3, [fp, #-108]	; 0xffffff94
   14a0c:	str	r3, [fp, #-96]	; 0xffffffa0
   14a10:	b	15828 <argp_failure@@Base+0x1344>
   14a14:	str	r9, [sp, #4]
   14a18:	str	r7, [sp]
   14a1c:	ldr	r3, [pc, #2920]	; 1558c <argp_failure@@Base+0x10a8>
   14a20:	mov	r2, #0
   14a24:	mov	r1, r2
   14a28:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14a2c:	bl	144e4 <argp_failure@@Base>
   14a30:	b	14a98 <argp_failure@@Base+0x5b4>
   14a34:	add	r6, r6, #16
   14a38:	cmp	r6, r8
   14a3c:	beq	14ab4 <argp_failure@@Base+0x5d0>
   14a40:	mov	r0, r6
   14a44:	bl	111a8 <strlen@plt>
   14a48:	mov	r7, r0
   14a4c:	cmp	r0, r5
   14a50:	bne	14a34 <argp_failure@@Base+0x550>
   14a54:	mov	r2, r5
   14a58:	mov	r1, r6
   14a5c:	mov	r0, r9
   14a60:	bl	112b0 <strncmp@plt>
   14a64:	cmp	r0, #0
   14a68:	bne	14a34 <argp_failure@@Base+0x550>
   14a6c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14a70:	cmp	r3, #0
   14a74:	beq	14a84 <argp_failure@@Base+0x5a0>
   14a78:	ldrb	r3, [r6, #14]
   14a7c:	cmp	r3, #0
   14a80:	beq	14a14 <argp_failure@@Base+0x530>
   14a84:	ldrb	r3, [r6, #15]
   14a88:	sub	r2, fp, #36	; 0x24
   14a8c:	add	r3, r2, r3
   14a90:	ldr	r2, [fp, #-116]	; 0xffffff8c
   14a94:	str	r2, [r3, #-40]	; 0xffffffd8
   14a98:	cmp	r6, r8
   14a9c:	beq	14ab4 <argp_failure@@Base+0x5d0>
   14aa0:	ldrb	r3, [r4]
   14aa4:	cmp	r3, #44	; 0x2c
   14aa8:	addeq	r9, r4, #1
   14aac:	movne	r9, r4
   14ab0:	b	14adc <argp_failure@@Base+0x5f8>
   14ab4:	str	r9, [sp, #4]
   14ab8:	str	r5, [sp]
   14abc:	ldr	r3, [pc, #2764]	; 15590 <argp_failure@@Base+0x10ac>
   14ac0:	mov	r2, #0
   14ac4:	mov	r1, r2
   14ac8:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14acc:	bl	144e4 <argp_failure@@Base>
   14ad0:	b	14aa0 <argp_failure@@Base+0x5bc>
   14ad4:	cmp	r0, #0
   14ad8:	bne	14afc <argp_failure@@Base+0x618>
   14adc:	ldrb	r3, [r9]
   14ae0:	cmp	r3, #0
   14ae4:	beq	14b14 <argp_failure@@Base+0x630>
   14ae8:	bl	11184 <__ctype_b_loc@plt>
   14aec:	mov	r6, r0
   14af0:	ldr	r1, [r0]
   14af4:	mov	r5, r9
   14af8:	b	14844 <argp_failure@@Base+0x360>
   14afc:	str	r5, [sp]
   14b00:	ldr	r3, [pc, #2700]	; 15594 <argp_failure@@Base+0x10b0>
   14b04:	mov	r2, #0
   14b08:	mov	r1, r2
   14b0c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14b10:	bl	144e4 <argp_failure@@Base>
   14b14:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14b18:	ldr	r3, [pc, #2680]	; 15598 <argp_failure@@Base+0x10b4>
   14b1c:	add	r1, r3, #144	; 0x90
   14b20:	add	r3, r3, #16
   14b24:	cmp	r3, r1
   14b28:	beq	14b7c <argp_failure@@Base+0x698>
   14b2c:	ldrb	r2, [r3, #14]
   14b30:	cmp	r2, #0
   14b34:	bne	14b20 <argp_failure@@Base+0x63c>
   14b38:	ldrb	r2, [r3, #15]
   14b3c:	cmp	r2, #32
   14b40:	beq	14b20 <argp_failure@@Base+0x63c>
   14b44:	sub	ip, fp, #36	; 0x24
   14b48:	add	r2, ip, r2
   14b4c:	ldr	r2, [r2, #-40]	; 0xffffffd8
   14b50:	cmp	r2, r0
   14b54:	blt	14b20 <argp_failure@@Base+0x63c>
   14b58:	str	r3, [sp, #4]
   14b5c:	ldr	r3, [pc, #2616]	; 1559c <argp_failure@@Base+0x10b8>
   14b60:	str	r3, [sp]
   14b64:	ldr	r3, [pc, #2612]	; 155a0 <argp_failure@@Base+0x10bc>
   14b68:	mov	r2, #0
   14b6c:	mov	r1, r2
   14b70:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14b74:	bl	144e4 <argp_failure@@Base>
   14b78:	b	1472c <argp_failure@@Base+0x248>
   14b7c:	ldr	r4, [pc, #2648]	; 155dc <argp_failure@@Base+0x10f8>
   14b80:	mov	ip, r4
   14b84:	sub	lr, fp, #76	; 0x4c
   14b88:	ldm	lr!, {r0, r1, r2, r3}
   14b8c:	stmia	ip!, {r0, r1, r2, r3}
   14b90:	ldm	lr!, {r0, r1, r2, r3}
   14b94:	stmia	ip!, {r0, r1, r2, r3}
   14b98:	ldm	lr, {r0, r1}
   14b9c:	stm	ip, {r0, r1}
   14ba0:	mov	r3, #1
   14ba4:	str	r3, [r4, #36]	; 0x24
   14ba8:	b	1472c <argp_failure@@Base+0x248>
   14bac:	ldr	r0, [fp, #-132]	; 0xffffff7c
   14bb0:	bl	110f4 <funlockfile@plt>
   14bb4:	b	15778 <argp_failure@@Base+0x1294>
   14bb8:	mov	r1, #0
   14bbc:	ldr	r0, [fp, #-112]	; 0xffffff90
   14bc0:	bl	13e28 <__assert_fail@plt+0x2b60>
   14bc4:	str	r0, [fp, #-108]	; 0xffffff94
   14bc8:	ldr	r1, [pc, #2516]	; 155a4 <argp_failure@@Base+0x10c0>
   14bcc:	bl	12d30 <__assert_fail@plt+0x1a68>
   14bd0:	cmp	r0, #0
   14bd4:	mvnne	r3, #0
   14bd8:	strne	r3, [r0, #12]
   14bdc:	ldr	r1, [pc, #2500]	; 155a8 <argp_failure@@Base+0x10c4>
   14be0:	ldr	r0, [fp, #-108]	; 0xffffff94
   14be4:	bl	12d30 <__assert_fail@plt+0x1a68>
   14be8:	cmp	r0, #0
   14bec:	mvnne	r3, #0
   14bf0:	strne	r3, [r0, #12]
   14bf4:	ldr	r0, [fp, #-108]	; 0xffffff94
   14bf8:	ldr	r3, [r0, #4]
   14bfc:	cmp	r3, #0
   14c00:	beq	14760 <argp_failure@@Base+0x27c>
   14c04:	ldr	r2, [r0]
   14c08:	mov	r3, #0
   14c0c:	str	r3, [r2, #24]
   14c10:	add	r3, r3, #1
   14c14:	add	r2, r2, #28
   14c18:	ldr	r1, [r0, #4]
   14c1c:	cmp	r3, r1
   14c20:	bcc	14c0c <argp_failure@@Base+0x728>
   14c24:	ldr	r3, [pc, #2432]	; 155ac <argp_failure@@Base+0x10c8>
   14c28:	mov	r2, #28
   14c2c:	ldr	r0, [fp, #-108]	; 0xffffff94
   14c30:	ldr	r0, [r0]
   14c34:	bl	11274 <qsort@plt>
   14c38:	b	14760 <argp_failure@@Base+0x27c>
   14c3c:	ldr	r0, [fp, #-112]	; 0xffffff90
   14c40:	bl	12dc8 <__assert_fail@plt+0x1b00>
   14c44:	mov	r2, r0
   14c48:	add	r3, r0, #14
   14c4c:	bic	r3, r3, #7
   14c50:	sub	sp, sp, r3
   14c54:	add	r8, sp, #8
   14c58:	mov	r1, #0
   14c5c:	mov	r0, r8
   14c60:	bl	111e4 <memset@plt>
   14c64:	mov	r5, #1
   14c68:	ldr	r4, [pc, #2412]	; 155dc <argp_failure@@Base+0x10f8>
   14c6c:	ldr	r9, [pc, #2364]	; 155b0 <argp_failure@@Base+0x10cc>
   14c70:	str	r8, [fp, #-96]	; 0xffffffa0
   14c74:	ldr	r8, [fp, #-104]	; 0xffffff98
   14c78:	b	14d28 <argp_failure@@Base+0x844>
   14c7c:	mov	r0, sl
   14c80:	bl	17980 <argp_parse@@Base+0x18f4>
   14c84:	b	14d44 <argp_failure@@Base+0x860>
   14c88:	mov	r0, sl
   14c8c:	bl	17980 <argp_parse@@Base+0x18f4>
   14c90:	b	14d8c <argp_failure@@Base+0x8a8>
   14c94:	mov	r1, sl
   14c98:	ldr	r0, [fp, #-108]	; 0xffffff94
   14c9c:	bl	12b20 <__assert_fail@plt+0x1858>
   14ca0:	orr	r8, r8, #2
   14ca4:	str	sl, [sp]
   14ca8:	mov	r3, #1
   14cac:	sub	r2, fp, #76	; 0x4c
   14cb0:	ldr	r1, [fp, #-100]	; 0xffffff9c
   14cb4:	ldr	r0, [fp, #-112]	; 0xffffff90
   14cb8:	bl	13048 <__assert_fail@plt+0x1d80>
   14cbc:	mov	r6, r0
   14cc0:	ldr	r3, [sl, #28]
   14cc4:	ldr	r2, [sl, #24]
   14cc8:	sub	r3, r3, r2
   14ccc:	ldr	r2, [sl, #16]
   14cd0:	cmp	r3, r2
   14cd4:	bhi	14dfc <argp_failure@@Base+0x918>
   14cd8:	str	r7, [sl, #12]
   14cdc:	ldr	r3, [sl, #28]
   14ce0:	ldr	r2, [sl, #24]
   14ce4:	sub	r3, r3, r2
   14ce8:	ldr	r2, [sl, #16]
   14cec:	cmp	r3, r2
   14cf0:	bhi	14e08 <argp_failure@@Base+0x924>
   14cf4:	str	r5, [sl, #4]
   14cf8:	ldr	r2, [sl, #28]
   14cfc:	ldr	r3, [sl, #32]
   14d00:	cmp	r2, r3
   14d04:	bcs	14e14 <argp_failure@@Base+0x930>
   14d08:	ldr	r3, [sl, #28]
   14d0c:	add	r2, r3, #1
   14d10:	str	r2, [sl, #28]
   14d14:	mov	r2, #10
   14d18:	strb	r2, [r3]
   14d1c:	mov	r5, #0
   14d20:	cmp	r6, r5
   14d24:	beq	14e2c <argp_failure@@Base+0x948>
   14d28:	ldr	r6, [r4, #28]
   14d2c:	ldr	r3, [sl, #28]
   14d30:	ldr	r2, [sl, #24]
   14d34:	sub	r3, r3, r2
   14d38:	ldr	r2, [sl, #16]
   14d3c:	cmp	r3, r2
   14d40:	bhi	14c7c <argp_failure@@Base+0x798>
   14d44:	ldr	r7, [sl, #12]
   14d48:	str	r6, [sl, #12]
   14d4c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14d50:	str	r3, [fp, #-76]	; 0xffffffb4
   14d54:	cmp	r5, #0
   14d58:	ldr	r3, [fp, #4]
   14d5c:	ldrne	r2, [pc, #2128]	; 155b4 <argp_failure@@Base+0x10d0>
   14d60:	ldreq	r2, [pc, #2128]	; 155b8 <argp_failure@@Base+0x10d4>
   14d64:	mov	r1, r9
   14d68:	mov	r0, sl
   14d6c:	bl	18014 <argp_parse@@Base+0x1f88>
   14d70:	ldr	r6, [r4, #28]
   14d74:	ldr	r3, [sl, #28]
   14d78:	ldr	r2, [sl, #24]
   14d7c:	sub	r3, r3, r2
   14d80:	ldr	r2, [sl, #16]
   14d84:	cmp	r3, r2
   14d88:	bhi	14c88 <argp_failure@@Base+0x7a4>
   14d8c:	ldr	r5, [sl, #4]
   14d90:	str	r6, [sl, #4]
   14d94:	tst	r8, #2
   14d98:	beq	14c94 <argp_failure@@Base+0x7b0>
   14d9c:	ldr	r3, [fp, #-108]	; 0xffffff94
   14da0:	ldr	r3, [r3, #4]
   14da4:	cmp	r3, #0
   14da8:	beq	14ca4 <argp_failure@@Base+0x7c0>
   14dac:	ldr	r3, [sl, #28]
   14db0:	add	r3, r3, #12
   14db4:	ldr	r2, [sl, #32]
   14db8:	cmp	r2, r3
   14dbc:	bcs	14dd4 <argp_failure@@Base+0x8f0>
   14dc0:	mov	r1, #12
   14dc4:	mov	r0, sl
   14dc8:	bl	17f24 <argp_parse@@Base+0x1e98>
   14dcc:	cmp	r0, #0
   14dd0:	beq	14ca4 <argp_failure@@Base+0x7c0>
   14dd4:	ldr	ip, [sl, #28]
   14dd8:	ldr	r3, [pc, #2012]	; 155bc <argp_failure@@Base+0x10d8>
   14ddc:	ldm	r3!, {r0, r1, r2}
   14de0:	str	r0, [ip]
   14de4:	str	r1, [ip, #4]
   14de8:	str	r2, [ip, #8]
   14dec:	ldr	r3, [sl, #28]
   14df0:	add	r3, r3, #12
   14df4:	str	r3, [sl, #28]
   14df8:	b	14ca4 <argp_failure@@Base+0x7c0>
   14dfc:	mov	r0, sl
   14e00:	bl	17980 <argp_parse@@Base+0x18f4>
   14e04:	b	14cd8 <argp_failure@@Base+0x7f4>
   14e08:	mov	r0, sl
   14e0c:	bl	17980 <argp_parse@@Base+0x18f4>
   14e10:	b	14cf4 <argp_failure@@Base+0x810>
   14e14:	mov	r1, #1
   14e18:	mov	r0, sl
   14e1c:	bl	17f24 <argp_parse@@Base+0x1e98>
   14e20:	cmp	r0, #0
   14e24:	beq	14d1c <argp_failure@@Base+0x838>
   14e28:	b	14d08 <argp_failure@@Base+0x824>
   14e2c:	str	r8, [fp, #-104]	; 0xffffff98
   14e30:	mov	r4, #1
   14e34:	b	14770 <argp_failure@@Base+0x28c>
   14e38:	str	sl, [sp, #4]
   14e3c:	mov	r3, #1
   14e40:	str	r3, [sp]
   14e44:	mov	r3, #0
   14e48:	mov	r2, r3
   14e4c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   14e50:	ldr	r0, [fp, #-112]	; 0xffffff90
   14e54:	bl	135a0 <__assert_fail@plt+0x22d8>
   14e58:	orr	r4, r4, r0
   14e5c:	b	1477c <argp_failure@@Base+0x298>
   14e60:	ldr	r3, [fp, #4]
   14e64:	mov	r2, r3
   14e68:	ldr	r1, [pc, #1872]	; 155c0 <argp_failure@@Base+0x10dc>
   14e6c:	mov	r0, sl
   14e70:	bl	18014 <argp_parse@@Base+0x1f88>
   14e74:	mov	r4, #1
   14e78:	b	14788 <argp_failure@@Base+0x2a4>
   14e7c:	mov	r1, #1
   14e80:	mov	r0, sl
   14e84:	bl	17f24 <argp_parse@@Base+0x1e98>
   14e88:	cmp	r0, #0
   14e8c:	beq	147d0 <argp_failure@@Base+0x2ec>
   14e90:	b	147bc <argp_failure@@Base+0x2d8>
   14e94:	mov	r0, sl
   14e98:	bl	17980 <argp_parse@@Base+0x18f4>
   14e9c:	b	15288 <argp_failure@@Base+0xda4>
   14ea0:	add	r3, r3, #24
   14ea4:	subs	r2, r2, #1
   14ea8:	beq	14ecc <argp_failure@@Base+0x9e8>
   14eac:	ldr	r1, [r3, #-24]	; 0xffffffe8
   14eb0:	cmp	r1, #0
   14eb4:	beq	14ea0 <argp_failure@@Base+0x9bc>
   14eb8:	ldr	r1, [r3, #-12]
   14ebc:	tst	r1, #2
   14ec0:	bne	14ea0 <argp_failure@@Base+0x9bc>
   14ec4:	mov	r3, #1
   14ec8:	str	r3, [fp, #-116]	; 0xffffff8c
   14ecc:	ldr	r3, [pc, #1800]	; 155dc <argp_failure@@Base+0x10f8>
   14ed0:	ldr	r4, [r3, #8]
   14ed4:	ldr	r3, [sl, #28]
   14ed8:	ldr	r2, [sl, #24]
   14edc:	sub	r3, r3, r2
   14ee0:	ldr	r2, [sl, #16]
   14ee4:	cmp	r3, r2
   14ee8:	bhi	14f08 <argp_failure@@Base+0xa24>
   14eec:	str	r4, [sl, #12]
   14ef0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14ef4:	ldr	r5, [r3, #4]
   14ef8:	cmp	r5, #0
   14efc:	beq	15004 <argp_failure@@Base+0xb20>
   14f00:	mov	r4, r8
   14f04:	b	15848 <argp_failure@@Base+0x1364>
   14f08:	mov	r0, sl
   14f0c:	bl	17980 <argp_parse@@Base+0x18f4>
   14f10:	b	14eec <argp_failure@@Base+0xa08>
   14f14:	tst	r6, #2
   14f18:	beq	14f24 <argp_failure@@Base+0xa40>
   14f1c:	add	r9, r9, #1
   14f20:	b	1583c <argp_failure@@Base+0x1358>
   14f24:	sub	r1, fp, #76	; 0x4c
   14f28:	ldr	r3, [pc, #1708]	; 155dc <argp_failure@@Base+0x10f8>
   14f2c:	ldr	r0, [r3, #8]
   14f30:	bl	1341c <__assert_fail@plt+0x2154>
   14f34:	ldr	r2, [sl, #28]
   14f38:	ldr	r3, [sl, #32]
   14f3c:	cmp	r2, r3
   14f40:	bcs	14fc0 <argp_failure@@Base+0xadc>
   14f44:	ldr	r3, [sl, #28]
   14f48:	add	r2, r3, #1
   14f4c:	str	r2, [sl, #28]
   14f50:	mov	r2, #45	; 0x2d
   14f54:	strb	r2, [r3]
   14f58:	ldrb	r6, [r9]
   14f5c:	ldr	r2, [sl, #28]
   14f60:	ldr	r3, [sl, #32]
   14f64:	cmp	r2, r3
   14f68:	bcs	14fd8 <argp_failure@@Base+0xaf4>
   14f6c:	ldr	r3, [sl, #28]
   14f70:	add	r2, r3, #1
   14f74:	str	r2, [sl, #28]
   14f78:	strb	r6, [r3]
   14f7c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   14f80:	cmp	r3, #0
   14f84:	beq	14f98 <argp_failure@@Base+0xab4>
   14f88:	ldr	r3, [pc, #1612]	; 155dc <argp_failure@@Base+0x10f8>
   14f8c:	ldr	r3, [r3]
   14f90:	cmp	r3, #0
   14f94:	beq	14ff0 <argp_failure@@Base+0xb0c>
   14f98:	ldr	r2, [r8, #8]
   14f9c:	cmp	r2, #0
   14fa0:	beq	14f1c <argp_failure@@Base+0xa38>
   14fa4:	ldr	r3, [r8, #12]
   14fa8:	tst	r3, #1
   14fac:	ldrne	r1, [pc, #1552]	; 155c4 <argp_failure@@Base+0x10e0>
   14fb0:	ldreq	r1, [pc, #1552]	; 155c8 <argp_failure@@Base+0x10e4>
   14fb4:	mov	r0, sl
   14fb8:	bl	18014 <argp_parse@@Base+0x1f88>
   14fbc:	b	14f1c <argp_failure@@Base+0xa38>
   14fc0:	mov	r1, #1
   14fc4:	mov	r0, sl
   14fc8:	bl	17f24 <argp_parse@@Base+0x1e98>
   14fcc:	cmp	r0, #0
   14fd0:	beq	14f58 <argp_failure@@Base+0xa74>
   14fd4:	b	14f44 <argp_failure@@Base+0xa60>
   14fd8:	mov	r1, #1
   14fdc:	mov	r0, sl
   14fe0:	bl	17f24 <argp_parse@@Base+0x1e98>
   14fe4:	cmp	r0, #0
   14fe8:	beq	14f7c <argp_failure@@Base+0xa98>
   14fec:	b	14f6c <argp_failure@@Base+0xa88>
   14ff0:	ldr	r3, [r8, #8]
   14ff4:	cmp	r3, #0
   14ff8:	movne	r3, #1
   14ffc:	strne	r3, [fp, #-80]	; 0xffffffb0
   15000:	b	14f1c <argp_failure@@Base+0xa38>
   15004:	ldr	r3, [r8, #12]
   15008:	tst	r3, #8
   1500c:	beq	150e8 <argp_failure@@Base+0xc04>
   15010:	ldr	r3, [pc, #1476]	; 155dc <argp_failure@@Base+0x10f8>
   15014:	ldr	r4, [r3, #16]
   15018:	ldr	r3, [sl, #28]
   1501c:	ldr	r2, [sl, #24]
   15020:	sub	r3, r3, r2
   15024:	ldr	r2, [sl, #16]
   15028:	cmp	r3, r2
   1502c:	bhi	1504c <argp_failure@@Base+0xb68>
   15030:	str	r4, [sl, #12]
   15034:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15038:	ldr	r5, [r3, #4]
   1503c:	cmp	r5, #0
   15040:	beq	1519c <argp_failure@@Base+0xcb8>
   15044:	add	r4, r8, #24
   15048:	b	15080 <argp_failure@@Base+0xb9c>
   1504c:	mov	r0, sl
   15050:	bl	17980 <argp_parse@@Base+0x18f4>
   15054:	b	15030 <argp_failure@@Base+0xb4c>
   15058:	mov	r2, r6
   1505c:	mov	r1, r7
   15060:	ldr	r0, [sl, #28]
   15064:	bl	11088 <memcpy@plt>
   15068:	ldr	r3, [sl, #28]
   1506c:	add	r6, r3, r6
   15070:	str	r6, [sl, #28]
   15074:	add	r4, r4, #24
   15078:	subs	r5, r5, #1
   1507c:	beq	1519c <argp_failure@@Base+0xcb8>
   15080:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15084:	cmp	r3, #0
   15088:	beq	15074 <argp_failure@@Base+0xb90>
   1508c:	ldr	r3, [r4, #-12]
   15090:	tst	r3, #2
   15094:	bne	15074 <argp_failure@@Base+0xb90>
   15098:	sub	r1, fp, #76	; 0x4c
   1509c:	ldr	r3, [pc, #1336]	; 155dc <argp_failure@@Base+0x10f8>
   150a0:	ldr	r0, [r3, #16]
   150a4:	bl	1341c <__assert_fail@plt+0x2154>
   150a8:	ldr	r7, [r4, #-24]	; 0xffffffe8
   150ac:	mov	r0, r7
   150b0:	bl	111a8 <strlen@plt>
   150b4:	subs	r6, r0, #0
   150b8:	beq	15074 <argp_failure@@Base+0xb90>
   150bc:	ldr	r3, [sl, #28]
   150c0:	add	r3, r3, r6
   150c4:	ldr	r2, [sl, #32]
   150c8:	cmp	r2, r3
   150cc:	bcs	15058 <argp_failure@@Base+0xb74>
   150d0:	mov	r1, r6
   150d4:	mov	r0, sl
   150d8:	bl	17f24 <argp_parse@@Base+0x1e98>
   150dc:	cmp	r0, #0
   150e0:	beq	15074 <argp_failure@@Base+0xb90>
   150e4:	b	15058 <argp_failure@@Base+0xb74>
   150e8:	ldr	r3, [pc, #1260]	; 155dc <argp_failure@@Base+0x10f8>
   150ec:	ldr	r4, [r3, #12]
   150f0:	ldr	r3, [sl, #28]
   150f4:	ldr	r2, [sl, #24]
   150f8:	sub	r3, r3, r2
   150fc:	ldr	r2, [sl, #16]
   15100:	cmp	r3, r2
   15104:	bhi	15124 <argp_failure@@Base+0xc40>
   15108:	str	r4, [sl, #12]
   1510c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15110:	ldr	r5, [r3, #4]
   15114:	cmp	r5, #0
   15118:	beq	1519c <argp_failure@@Base+0xcb8>
   1511c:	add	r4, r8, #24
   15120:	b	1513c <argp_failure@@Base+0xc58>
   15124:	mov	r0, sl
   15128:	bl	17980 <argp_parse@@Base+0x18f4>
   1512c:	b	15108 <argp_failure@@Base+0xc24>
   15130:	add	r4, r4, #24
   15134:	subs	r5, r5, #1
   15138:	beq	1519c <argp_failure@@Base+0xcb8>
   1513c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15140:	cmp	r3, #0
   15144:	beq	15130 <argp_failure@@Base+0xc4c>
   15148:	ldr	r3, [r4, #-12]
   1514c:	tst	r3, #2
   15150:	bne	15130 <argp_failure@@Base+0xc4c>
   15154:	sub	r1, fp, #76	; 0x4c
   15158:	ldr	r3, [pc, #1148]	; 155dc <argp_failure@@Base+0x10f8>
   1515c:	ldr	r0, [r3, #12]
   15160:	bl	1341c <__assert_fail@plt+0x2154>
   15164:	ldr	r2, [r4, #-24]	; 0xffffffe8
   15168:	ldr	r1, [pc, #1116]	; 155cc <argp_failure@@Base+0x10e8>
   1516c:	mov	r0, sl
   15170:	bl	18014 <argp_parse@@Base+0x1f88>
   15174:	ldr	r2, [r8, #8]
   15178:	cmp	r2, #0
   1517c:	beq	15130 <argp_failure@@Base+0xc4c>
   15180:	ldr	r3, [r8, #12]
   15184:	tst	r3, #1
   15188:	ldrne	r1, [pc, #1088]	; 155d0 <argp_failure@@Base+0x10ec>
   1518c:	ldreq	r1, [pc, #1088]	; 155d4 <argp_failure@@Base+0x10f0>
   15190:	mov	r0, sl
   15194:	bl	18014 <argp_parse@@Base+0x1f88>
   15198:	b	15130 <argp_failure@@Base+0xc4c>
   1519c:	ldr	r3, [sl, #28]
   151a0:	ldr	r2, [sl, #24]
   151a4:	sub	r3, r3, r2
   151a8:	ldr	r2, [sl, #16]
   151ac:	cmp	r3, r2
   151b0:	bhi	152f0 <argp_failure@@Base+0xe0c>
   151b4:	mov	r3, #0
   151b8:	str	r3, [sl, #4]
   151bc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   151c0:	cmp	r3, #0
   151c4:	beq	15314 <argp_failure@@Base+0xe30>
   151c8:	ldr	r3, [r8, #12]
   151cc:	tst	r3, #8
   151d0:	bne	151fc <argp_failure@@Base+0xd18>
   151d4:	ldr	r4, [r8, #4]
   151d8:	sub	r3, r4, #1
   151dc:	cmp	r3, #254	; 0xfe
   151e0:	bhi	151fc <argp_failure@@Base+0xd18>
   151e4:	bl	11184 <__ctype_b_loc@plt>
   151e8:	ldr	r3, [r0]
   151ec:	lsl	r4, r4, #1
   151f0:	ldrh	r3, [r3, r4]
   151f4:	tst	r3, #16384	; 0x4000
   151f8:	bne	15208 <argp_failure@@Base+0xd24>
   151fc:	ldr	r3, [r8]
   15200:	cmp	r3, #0
   15204:	beq	152fc <argp_failure@@Base+0xe18>
   15208:	ldr	r3, [sl, #28]
   1520c:	ldr	r2, [sl, #24]
   15210:	sub	r3, r3, r2
   15214:	ldr	r2, [sl, #16]
   15218:	cmp	r3, r2
   1521c:	bhi	1556c <argp_failure@@Base+0x1088>
   15220:	ldr	r3, [fp, #-124]	; 0xffffff84
   15224:	str	r3, [sl, #4]
   15228:	ldr	r3, [sl, #28]
   1522c:	ldr	r2, [sl, #24]
   15230:	sub	r3, r3, r2
   15234:	ldr	r2, [sl, #16]
   15238:	cmp	r3, r2
   1523c:	bhi	15578 <argp_failure@@Base+0x1094>
   15240:	ldr	r3, [fp, #-128]	; 0xffffff80
   15244:	str	r3, [sl, #12]
   15248:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1524c:	add	r3, r3, #28
   15250:	str	r3, [fp, #-96]	; 0xffffffa0
   15254:	ldr	r3, [fp, #-120]	; 0xffffff88
   15258:	subs	r3, r3, #1
   1525c:	str	r3, [fp, #-120]	; 0xffffff88
   15260:	beq	155f0 <argp_failure@@Base+0x110c>
   15264:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15268:	ldr	r8, [r3]
   1526c:	ldr	r9, [r3, #8]
   15270:	ldr	r3, [sl, #28]
   15274:	ldr	r2, [sl, #24]
   15278:	sub	r3, r3, r2
   1527c:	ldr	r2, [sl, #16]
   15280:	cmp	r3, r2
   15284:	bhi	14e94 <argp_failure@@Base+0x9b0>
   15288:	ldr	r3, [sl, #4]
   1528c:	str	r3, [fp, #-124]	; 0xffffff84
   15290:	mov	r3, #0
   15294:	str	r3, [sl, #4]
   15298:	ldr	r3, [sl, #12]
   1529c:	str	r3, [fp, #-128]	; 0xffffff80
   152a0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   152a4:	str	r2, [fp, #-76]	; 0xffffffb4
   152a8:	str	sl, [fp, #-72]	; 0xffffffb8
   152ac:	sub	r3, fp, #88	; 0x58
   152b0:	str	r3, [fp, #-68]	; 0xffffffbc
   152b4:	mov	r3, #1
   152b8:	str	r3, [fp, #-64]	; 0xffffffc0
   152bc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   152c0:	str	r3, [fp, #-60]	; 0xffffffc4
   152c4:	ldr	r3, [r8, #12]
   152c8:	ands	r3, r3, #8
   152cc:	str	r3, [fp, #-116]	; 0xffffff8c
   152d0:	movne	r3, #0
   152d4:	strne	r3, [fp, #-116]	; 0xffffff8c
   152d8:	bne	14ecc <argp_failure@@Base+0x9e8>
   152dc:	ldr	r2, [r2, #4]
   152e0:	cmp	r2, #0
   152e4:	beq	14ecc <argp_failure@@Base+0x9e8>
   152e8:	add	r3, r8, #24
   152ec:	b	14eac <argp_failure@@Base+0x9c8>
   152f0:	mov	r0, sl
   152f4:	bl	17980 <argp_parse@@Base+0x18f4>
   152f8:	b	151b4 <argp_failure@@Base+0xcd0>
   152fc:	sub	r2, fp, #76	; 0x4c
   15300:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15304:	ldr	r1, [r3, #20]
   15308:	ldr	r0, [r8, #16]
   1530c:	bl	13238 <__assert_fail@plt+0x1f70>
   15310:	b	1546c <argp_failure@@Base+0xf88>
   15314:	ldr	r7, [r8, #16]
   15318:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1531c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15320:	ldr	r2, [r2, #20]
   15324:	ldr	r1, [r8, #4]
   15328:	mov	r0, r7
   1532c:	bl	13004 <__assert_fail@plt+0x1d3c>
   15330:	subs	r4, r0, #0
   15334:	beq	15428 <argp_failure@@Base+0xf44>
   15338:	ldrb	r3, [r4]
   1533c:	cmp	r3, #0
   15340:	beq	15420 <argp_failure@@Base+0xf3c>
   15344:	ldr	r3, [sl, #28]
   15348:	ldr	r2, [sl, #24]
   1534c:	sub	r3, r3, r2
   15350:	ldr	r2, [sl, #16]
   15354:	cmp	r3, r2
   15358:	bhi	15478 <argp_failure@@Base+0xf94>
   1535c:	ldr	r5, [sl, #20]
   15360:	bic	r5, r5, r5, asr #31
   15364:	ldr	r3, [pc, #624]	; 155dc <argp_failure@@Base+0x10f8>
   15368:	ldr	r6, [r3, #20]
   1536c:	str	r6, [sl, #4]
   15370:	ldr	r3, [pc, #612]	; 155dc <argp_failure@@Base+0x10f8>
   15374:	ldr	r6, [r3, #20]
   15378:	ldr	r3, [sl, #28]
   1537c:	ldr	r2, [sl, #24]
   15380:	sub	r3, r3, r2
   15384:	ldr	r2, [sl, #16]
   15388:	cmp	r3, r2
   1538c:	bhi	154b4 <argp_failure@@Base+0xfd0>
   15390:	str	r6, [sl, #12]
   15394:	ldr	r3, [pc, #576]	; 155dc <argp_failure@@Base+0x10f8>
   15398:	ldr	r1, [r3, #20]
   1539c:	add	r3, r1, #3
   153a0:	cmp	r3, r5
   153a4:	bcs	154d8 <argp_failure@@Base+0xff4>
   153a8:	ldr	r2, [sl, #28]
   153ac:	ldr	r3, [sl, #32]
   153b0:	cmp	r2, r3
   153b4:	bcs	154c0 <argp_failure@@Base+0xfdc>
   153b8:	ldr	r3, [sl, #28]
   153bc:	add	r2, r3, #1
   153c0:	str	r2, [sl, #28]
   153c4:	mov	r2, #10
   153c8:	strb	r2, [r3]
   153cc:	mov	r0, r4
   153d0:	bl	111a8 <strlen@plt>
   153d4:	subs	r5, r0, #0
   153d8:	beq	15420 <argp_failure@@Base+0xf3c>
   153dc:	ldr	r3, [sl, #28]
   153e0:	add	r3, r3, r5
   153e4:	ldr	r2, [sl, #32]
   153e8:	cmp	r2, r3
   153ec:	bcs	15404 <argp_failure@@Base+0xf20>
   153f0:	mov	r1, r5
   153f4:	mov	r0, sl
   153f8:	bl	17f24 <argp_parse@@Base+0x1e98>
   153fc:	cmp	r0, #0
   15400:	beq	15420 <argp_failure@@Base+0xf3c>
   15404:	mov	r2, r5
   15408:	mov	r1, r4
   1540c:	ldr	r0, [sl, #28]
   15410:	bl	11088 <memcpy@plt>
   15414:	ldr	r3, [sl, #28]
   15418:	add	r5, r3, r5
   1541c:	str	r5, [sl, #28]
   15420:	cmp	r7, r4
   15424:	bne	1553c <argp_failure@@Base+0x1058>
   15428:	ldr	r3, [sl, #28]
   1542c:	ldr	r2, [sl, #24]
   15430:	sub	r3, r3, r2
   15434:	ldr	r2, [sl, #16]
   15438:	cmp	r3, r2
   1543c:	bhi	15548 <argp_failure@@Base+0x1064>
   15440:	mov	r3, #0
   15444:	str	r3, [sl, #4]
   15448:	ldr	r2, [sl, #28]
   1544c:	ldr	r3, [sl, #32]
   15450:	cmp	r2, r3
   15454:	bcs	15554 <argp_failure@@Base+0x1070>
   15458:	ldr	r3, [sl, #28]
   1545c:	add	r2, r3, #1
   15460:	str	r2, [sl, #28]
   15464:	mov	r2, #10
   15468:	strb	r2, [r3]
   1546c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15470:	str	r3, [fp, #-88]	; 0xffffffa8
   15474:	b	15208 <argp_failure@@Base+0xd24>
   15478:	mov	r0, sl
   1547c:	bl	17980 <argp_parse@@Base+0x18f4>
   15480:	ldr	r5, [sl, #20]
   15484:	bic	r5, r5, r5, asr #31
   15488:	ldr	r3, [pc, #332]	; 155dc <argp_failure@@Base+0x10f8>
   1548c:	ldr	r6, [r3, #20]
   15490:	ldr	r3, [sl, #28]
   15494:	ldr	r2, [sl, #24]
   15498:	sub	r3, r3, r2
   1549c:	ldr	r2, [sl, #16]
   154a0:	cmp	r3, r2
   154a4:	bls	1536c <argp_failure@@Base+0xe88>
   154a8:	mov	r0, sl
   154ac:	bl	17980 <argp_parse@@Base+0x18f4>
   154b0:	b	1536c <argp_failure@@Base+0xe88>
   154b4:	mov	r0, sl
   154b8:	bl	17980 <argp_parse@@Base+0x18f4>
   154bc:	b	15390 <argp_failure@@Base+0xeac>
   154c0:	mov	r1, #1
   154c4:	mov	r0, sl
   154c8:	bl	17f24 <argp_parse@@Base+0x1e98>
   154cc:	cmp	r0, #0
   154d0:	beq	153cc <argp_failure@@Base+0xee8>
   154d4:	b	153b8 <argp_failure@@Base+0xed4>
   154d8:	cmp	r1, r5
   154dc:	bhi	15530 <argp_failure@@Base+0x104c>
   154e0:	ldr	r3, [sl, #28]
   154e4:	add	r3, r3, #3
   154e8:	ldr	r2, [sl, #32]
   154ec:	cmp	r2, r3
   154f0:	bcs	15508 <argp_failure@@Base+0x1024>
   154f4:	mov	r1, #3
   154f8:	mov	r0, sl
   154fc:	bl	17f24 <argp_parse@@Base+0x1e98>
   15500:	cmp	r0, #0
   15504:	beq	153cc <argp_failure@@Base+0xee8>
   15508:	ldr	r3, [sl, #28]
   1550c:	ldr	r2, [pc, #196]	; 155d8 <argp_failure@@Base+0x10f4>
   15510:	ldrh	r1, [r2]
   15514:	ldrb	r2, [r2, #2]
   15518:	strh	r1, [r3]
   1551c:	strb	r2, [r3, #2]
   15520:	ldr	r3, [sl, #28]
   15524:	add	r3, r3, #3
   15528:	str	r3, [sl, #28]
   1552c:	b	153cc <argp_failure@@Base+0xee8>
   15530:	mov	r0, sl
   15534:	bl	12e20 <__assert_fail@plt+0x1b58>
   15538:	b	153cc <argp_failure@@Base+0xee8>
   1553c:	mov	r0, r4
   15540:	bl	16c80 <argp_parse@@Base+0xbf4>
   15544:	b	15428 <argp_failure@@Base+0xf44>
   15548:	mov	r0, sl
   1554c:	bl	17980 <argp_parse@@Base+0x18f4>
   15550:	b	15440 <argp_failure@@Base+0xf5c>
   15554:	mov	r1, #1
   15558:	mov	r0, sl
   1555c:	bl	17f24 <argp_parse@@Base+0x1e98>
   15560:	cmp	r0, #0
   15564:	beq	1546c <argp_failure@@Base+0xf88>
   15568:	b	15458 <argp_failure@@Base+0xf74>
   1556c:	mov	r0, sl
   15570:	bl	17980 <argp_parse@@Base+0x18f4>
   15574:	b	15220 <argp_failure@@Base+0xd3c>
   15578:	mov	r0, sl
   1557c:	bl	17980 <argp_parse@@Base+0x18f4>
   15580:	b	15240 <argp_failure@@Base+0xd5c>
   15584:	muleq	r1, r0, r8
   15588:			; <UNDEFINED> instruction: 0x000196b8
   1558c:	andeq	r9, r1, r0, lsr #17
   15590:	ldrdeq	r9, [r1], -r0
   15594:	strdeq	r9, [r1], -r8
   15598:	ldrdeq	r9, [r1], -r0
   1559c:	andeq	r9, r1, ip, asr #18
   155a0:	andeq	r9, r1, r8, lsl r9
   155a4:	andeq	r9, r1, r4, asr r9
   155a8:	andeq	r9, r1, ip, asr r9
   155ac:	andeq	r3, r1, r8, lsr fp
   155b0:	andeq	r9, r1, ip, ror #18
   155b4:	andeq	r9, r1, r4, ror #18
   155b8:	andeq	r9, r1, r4, ror r9
   155bc:	andeq	r9, r1, ip, ror r9
   155c0:	andeq	r9, r1, ip, lsl #19
   155c4:	andeq	r9, r1, r4, asr #19
   155c8:	andeq	r9, r1, ip, lsl r4
   155cc:	andeq	r9, r1, ip, asr #19
   155d0:	ldrdeq	r9, [r1], -r4
   155d4:	ldrdeq	r9, [r1], -ip
   155d8:	andeq	r9, r1, r0, ror #19
   155dc:	andeq	fp, r2, r8, asr r2
   155e0:	andeq	r0, r0, #5
   155e4:	andeq	r9, r1, r4, ror #19
   155e8:	andeq	fp, r2, r0, ror r3
   155ec:	andeq	r9, r1, r8, asr sl
   155f0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   155f4:	cmp	r3, #0
   155f8:	beq	156e8 <argp_failure@@Base+0x1204>
   155fc:	ldr	r3, [pc, #-40]	; 155dc <argp_failure@@Base+0x10f8>
   15600:	ldr	r3, [r3, #4]
   15604:	cmp	r3, #0
   15608:	beq	156e8 <argp_failure@@Base+0x1204>
   1560c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15610:	cmp	r3, #0
   15614:	ldrne	r2, [r3]
   15618:	moveq	r2, #0
   1561c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15620:	ldr	r1, [pc, #-72]	; 155e0 <argp_failure@@Base+0x10fc>
   15624:	ldr	r0, [pc, #-72]	; 155e4 <argp_failure@@Base+0x1100>
   15628:	bl	13004 <__assert_fail@plt+0x1d3c>
   1562c:	subs	r4, r0, #0
   15630:	beq	156e8 <argp_failure@@Base+0x1204>
   15634:	ldrb	r3, [r4]
   15638:	cmp	r3, #0
   1563c:	beq	156dc <argp_failure@@Base+0x11f8>
   15640:	ldr	r2, [sl, #28]
   15644:	ldr	r3, [sl, #32]
   15648:	cmp	r2, r3
   1564c:	bcs	15780 <argp_failure@@Base+0x129c>
   15650:	ldr	r3, [sl, #28]
   15654:	add	r2, r3, #1
   15658:	str	r2, [sl, #28]
   1565c:	mov	r2, #10
   15660:	strb	r2, [r3]
   15664:	mov	r0, r4
   15668:	bl	111a8 <strlen@plt>
   1566c:	subs	r5, r0, #0
   15670:	beq	156b8 <argp_failure@@Base+0x11d4>
   15674:	ldr	r3, [sl, #28]
   15678:	add	r3, r3, r5
   1567c:	ldr	r2, [sl, #32]
   15680:	cmp	r2, r3
   15684:	bcs	1569c <argp_failure@@Base+0x11b8>
   15688:	mov	r1, r5
   1568c:	mov	r0, sl
   15690:	bl	17f24 <argp_parse@@Base+0x1e98>
   15694:	cmp	r0, #0
   15698:	beq	156b8 <argp_failure@@Base+0x11d4>
   1569c:	mov	r2, r5
   156a0:	mov	r1, r4
   156a4:	ldr	r0, [sl, #28]
   156a8:	bl	11088 <memcpy@plt>
   156ac:	ldr	r3, [sl, #28]
   156b0:	add	r5, r3, r5
   156b4:	str	r5, [sl, #28]
   156b8:	ldr	r2, [sl, #28]
   156bc:	ldr	r3, [sl, #32]
   156c0:	cmp	r2, r3
   156c4:	bcs	15798 <argp_failure@@Base+0x12b4>
   156c8:	ldr	r3, [sl, #28]
   156cc:	add	r2, r3, #1
   156d0:	str	r2, [sl, #28]
   156d4:	mov	r2, #10
   156d8:	strb	r2, [r3]
   156dc:	ldr	r3, [pc, #-256]	; 155e4 <argp_failure@@Base+0x1100>
   156e0:	cmp	r4, r3
   156e4:	bne	157b0 <argp_failure@@Base+0x12cc>
   156e8:	mov	r4, #1
   156ec:	ldr	r3, [fp, #-104]	; 0xffffff98
   156f0:	tst	r3, #32
   156f4:	bne	157bc <argp_failure@@Base+0x12d8>
   156f8:	ldr	r3, [fp, #-104]	; 0xffffff98
   156fc:	tst	r3, #64	; 0x40
   15700:	beq	15754 <argp_failure@@Base+0x1270>
   15704:	ldr	r3, [pc, #-292]	; 155e8 <argp_failure@@Base+0x1104>
   15708:	ldr	r3, [r3]
   1570c:	cmp	r3, #0
   15710:	beq	15754 <argp_failure@@Base+0x1270>
   15714:	cmp	r4, #0
   15718:	beq	15740 <argp_failure@@Base+0x125c>
   1571c:	ldr	r2, [sl, #28]
   15720:	ldr	r3, [sl, #32]
   15724:	cmp	r2, r3
   15728:	bcs	157e4 <argp_failure@@Base+0x1300>
   1572c:	ldr	r3, [sl, #28]
   15730:	add	r2, r3, #1
   15734:	str	r2, [sl, #28]
   15738:	mov	r2, #10
   1573c:	strb	r2, [r3]
   15740:	ldr	r3, [pc, #-352]	; 155e8 <argp_failure@@Base+0x1104>
   15744:	ldr	r2, [r3]
   15748:	ldr	r1, [pc, #-356]	; 155ec <argp_failure@@Base+0x1108>
   1574c:	mov	r0, sl
   15750:	bl	18014 <argp_parse@@Base+0x1f88>
   15754:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15758:	bl	110f4 <funlockfile@plt>
   1575c:	ldr	r3, [fp, #-108]	; 0xffffff94
   15760:	cmp	r3, #0
   15764:	beq	15770 <argp_failure@@Base+0x128c>
   15768:	mov	r0, r3
   1576c:	bl	12cdc <__assert_fail@plt+0x1a14>
   15770:	mov	r0, sl
   15774:	bl	17ee4 <argp_parse@@Base+0x1e58>
   15778:	sub	sp, fp, #32
   1577c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15780:	mov	r1, #1
   15784:	mov	r0, sl
   15788:	bl	17f24 <argp_parse@@Base+0x1e98>
   1578c:	cmp	r0, #0
   15790:	beq	15664 <argp_failure@@Base+0x1180>
   15794:	b	15650 <argp_failure@@Base+0x116c>
   15798:	mov	r1, #1
   1579c:	mov	r0, sl
   157a0:	bl	17f24 <argp_parse@@Base+0x1e98>
   157a4:	cmp	r0, #0
   157a8:	beq	156dc <argp_failure@@Base+0x11f8>
   157ac:	b	156c8 <argp_failure@@Base+0x11e4>
   157b0:	mov	r0, r4
   157b4:	bl	16c80 <argp_parse@@Base+0xbf4>
   157b8:	b	156e8 <argp_failure@@Base+0x1204>
   157bc:	str	sl, [sp, #4]
   157c0:	mov	r3, #0
   157c4:	str	r3, [sp]
   157c8:	mov	r3, r4
   157cc:	mov	r2, #1
   157d0:	ldr	r1, [fp, #-100]	; 0xffffff9c
   157d4:	ldr	r0, [fp, #-112]	; 0xffffff90
   157d8:	bl	135a0 <__assert_fail@plt+0x22d8>
   157dc:	orr	r4, r4, r0
   157e0:	b	156f8 <argp_failure@@Base+0x1214>
   157e4:	mov	r1, #1
   157e8:	mov	r0, sl
   157ec:	bl	17f24 <argp_parse@@Base+0x1e98>
   157f0:	cmp	r0, #0
   157f4:	beq	15740 <argp_failure@@Base+0x125c>
   157f8:	b	1572c <argp_failure@@Base+0x1248>
   157fc:	ldrb	r3, [r5]
   15800:	mov	r4, r5
   15804:	mov	r5, #0
   15808:	b	148dc <argp_failure@@Base+0x3f8>
   1580c:	mov	r4, r2
   15810:	b	148f0 <argp_failure@@Base+0x40c>
   15814:	cmp	r0, #110	; 0x6e
   15818:	beq	14948 <argp_failure@@Base+0x464>
   1581c:	mov	r3, #1
   15820:	str	r3, [fp, #-96]	; 0xffffffa0
   15824:	str	r3, [fp, #-116]	; 0xffffff8c
   15828:	add	r6, sl, #24
   1582c:	b	14a40 <argp_failure@@Base+0x55c>
   15830:	ldrb	r3, [r9]
   15834:	cmp	r7, r3
   15838:	beq	14f14 <argp_failure@@Base+0xa30>
   1583c:	add	r4, r4, #24
   15840:	subs	r5, r5, #1
   15844:	beq	15004 <argp_failure@@Base+0xb20>
   15848:	ldr	r6, [r4, #12]
   1584c:	tst	r6, #8
   15850:	bne	1583c <argp_failure@@Base+0x1358>
   15854:	ldr	r7, [r4, #4]
   15858:	sub	r3, r7, #1
   1585c:	cmp	r3, #254	; 0xfe
   15860:	bhi	1583c <argp_failure@@Base+0x1358>
   15864:	bl	11184 <__ctype_b_loc@plt>
   15868:	ldr	r2, [r0]
   1586c:	lsl	r3, r7, #1
   15870:	ldrh	r3, [r2, r3]
   15874:	tst	r3, #16384	; 0x4000
   15878:	bne	15830 <argp_failure@@Base+0x134c>
   1587c:	b	1583c <argp_failure@@Base+0x1358>

00015880 <argp_help@@Base>:
   15880:	push	{lr}		; (str lr, [sp, #-4]!)
   15884:	sub	sp, sp, #12
   15888:	str	r3, [sp]
   1588c:	mov	r3, r2
   15890:	mov	r2, r1
   15894:	mov	r1, #0
   15898:	bl	146ec <argp_failure@@Base+0x208>
   1589c:	add	sp, sp, #12
   158a0:	pop	{pc}		; (ldr pc, [sp], #4)

000158a4 <argp_state_help@@Base>:
   158a4:	push	{r4, r5, lr}
   158a8:	sub	sp, sp, #12
   158ac:	mov	r5, r2
   158b0:	subs	r4, r0, #0
   158b4:	beq	15918 <argp_state_help@@Base+0x74>
   158b8:	ldr	r3, [r4, #16]
   158bc:	tst	r3, #2
   158c0:	bne	15910 <argp_state_help@@Base+0x6c>
   158c4:	cmp	r1, #0
   158c8:	beq	15910 <argp_state_help@@Base+0x6c>
   158cc:	ldr	r3, [r4, #16]
   158d0:	tst	r3, #64	; 0x40
   158d4:	orrne	r5, r5, #128	; 0x80
   158d8:	ldr	r0, [r4]
   158dc:	ldr	r3, [r4, #40]	; 0x28
   158e0:	str	r3, [sp]
   158e4:	mov	r3, r5
   158e8:	mov	r2, r1
   158ec:	mov	r1, r4
   158f0:	bl	146ec <argp_failure@@Base+0x208>
   158f4:	ldr	r3, [r4, #16]
   158f8:	tst	r3, #32
   158fc:	bne	15910 <argp_state_help@@Base+0x6c>
   15900:	tst	r5, #256	; 0x100
   15904:	bne	15944 <argp_state_help@@Base+0xa0>
   15908:	tst	r5, #512	; 0x200
   1590c:	bne	15950 <argp_state_help@@Base+0xac>
   15910:	add	sp, sp, #12
   15914:	pop	{r4, r5, pc}
   15918:	cmp	r1, #0
   1591c:	beq	15910 <argp_state_help@@Base+0x6c>
   15920:	ldr	r3, [pc, #48]	; 15958 <argp_state_help@@Base+0xb4>
   15924:	ldr	r3, [r3]
   15928:	str	r3, [sp]
   1592c:	mov	r3, r2
   15930:	mov	r2, r1
   15934:	mov	r1, #0
   15938:	mov	r0, r1
   1593c:	bl	146ec <argp_failure@@Base+0x208>
   15940:	b	15900 <argp_state_help@@Base+0x5c>
   15944:	ldr	r3, [pc, #16]	; 1595c <argp_state_help@@Base+0xb8>
   15948:	ldr	r0, [r3]
   1594c:	bl	1119c <exit@plt>
   15950:	mov	r0, #0
   15954:	bl	1119c <exit@plt>
   15958:	muleq	r2, r8, r2
   1595c:	andeq	fp, r2, r0, lsl #5

00015960 <argp_error@@Base>:
   15960:	push	{r1, r2, r3}
   15964:	push	{r4, r5, lr}
   15968:	sub	sp, sp, #8
   1596c:	subs	r5, r0, #0
   15970:	beq	15a40 <argp_error@@Base+0xe0>
   15974:	ldr	r3, [r5, #16]
   15978:	tst	r3, #2
   1597c:	bne	15a30 <argp_error@@Base+0xd0>
   15980:	ldr	r4, [r5, #44]	; 0x2c
   15984:	cmp	r4, #0
   15988:	beq	15a30 <argp_error@@Base+0xd0>
   1598c:	mov	r0, r4
   15990:	bl	1125c <flockfile@plt>
   15994:	add	r3, sp, #24
   15998:	str	r3, [sp, #4]
   1599c:	ldr	r0, [r5, #40]	; 0x28
   159a0:	mov	r1, r4
   159a4:	bl	10fec <fputs_unlocked@plt>
   159a8:	ldr	r3, [r4, #20]
   159ac:	ldr	r2, [r4, #24]
   159b0:	cmp	r3, r2
   159b4:	addcc	r2, r3, #1
   159b8:	strcc	r2, [r4, #20]
   159bc:	movcc	r2, #58	; 0x3a
   159c0:	strbcc	r2, [r3]
   159c4:	bcs	15a6c <argp_error@@Base+0x10c>
   159c8:	ldr	r3, [r4, #20]
   159cc:	ldr	r2, [r4, #24]
   159d0:	cmp	r3, r2
   159d4:	addcc	r2, r3, #1
   159d8:	strcc	r2, [r4, #20]
   159dc:	movcc	r2, #32
   159e0:	strbcc	r2, [r3]
   159e4:	bcs	15a7c <argp_error@@Base+0x11c>
   159e8:	ldr	r2, [sp, #4]
   159ec:	ldr	r1, [sp, #20]
   159f0:	mov	r0, r4
   159f4:	bl	11244 <vfprintf@plt>
   159f8:	ldr	r3, [r4, #20]
   159fc:	ldr	r2, [r4, #24]
   15a00:	cmp	r3, r2
   15a04:	addcc	r2, r3, #1
   15a08:	strcc	r2, [r4, #20]
   15a0c:	movcc	r2, #10
   15a10:	strbcc	r2, [r3]
   15a14:	bcs	15a8c <argp_error@@Base+0x12c>
   15a18:	mov	r2, #260	; 0x104
   15a1c:	mov	r1, r4
   15a20:	mov	r0, r5
   15a24:	bl	158a4 <argp_state_help@@Base>
   15a28:	mov	r0, r4
   15a2c:	bl	110f4 <funlockfile@plt>
   15a30:	add	sp, sp, #8
   15a34:	pop	{r4, r5, lr}
   15a38:	add	sp, sp, #12
   15a3c:	bx	lr
   15a40:	ldr	r3, [pc, #84]	; 15a9c <argp_error@@Base+0x13c>
   15a44:	ldr	r4, [r3]
   15a48:	cmp	r4, #0
   15a4c:	beq	15a30 <argp_error@@Base+0xd0>
   15a50:	mov	r0, r4
   15a54:	bl	1125c <flockfile@plt>
   15a58:	add	r3, sp, #24
   15a5c:	str	r3, [sp, #4]
   15a60:	ldr	r3, [pc, #56]	; 15aa0 <argp_error@@Base+0x140>
   15a64:	ldr	r0, [r3]
   15a68:	b	159a0 <argp_error@@Base+0x40>
   15a6c:	mov	r1, #58	; 0x3a
   15a70:	mov	r0, r4
   15a74:	bl	11214 <__overflow@plt>
   15a78:	b	159c8 <argp_error@@Base+0x68>
   15a7c:	mov	r1, #32
   15a80:	mov	r0, r4
   15a84:	bl	11214 <__overflow@plt>
   15a88:	b	159e8 <argp_error@@Base+0x88>
   15a8c:	mov	r1, #10
   15a90:	mov	r0, r4
   15a94:	bl	11214 <__overflow@plt>
   15a98:	b	15a18 <argp_error@@Base+0xb8>
   15a9c:	andeq	fp, r2, r0, lsr #5
   15aa0:	muleq	r2, r8, r2
   15aa4:	ldr	ip, [r0]
   15aa8:	cmp	ip, #0
   15aac:	beq	15b00 <argp_error@@Base+0x1a0>
   15ab0:	push	{r4, r5, r6, lr}
   15ab4:	mov	ip, r2
   15ab8:	mov	r5, r1
   15abc:	mov	r4, r0
   15ac0:	ldr	r2, [r0, #32]
   15ac4:	str	r2, [r1, #36]	; 0x24
   15ac8:	ldr	r2, [r0, #24]
   15acc:	str	r2, [r1, #28]
   15ad0:	ldr	r2, [r0, #28]
   15ad4:	str	r2, [r1, #32]
   15ad8:	ldr	r2, [r0, #12]
   15adc:	str	r2, [r1, #20]
   15ae0:	ldr	r6, [r0]
   15ae4:	mov	r2, r1
   15ae8:	mov	r1, r3
   15aec:	mov	r0, ip
   15af0:	blx	r6
   15af4:	ldr	r3, [r5, #36]	; 0x24
   15af8:	str	r3, [r4, #32]
   15afc:	pop	{r4, r5, r6, pc}
   15b00:	mov	r0, #7
   15b04:	bx	lr
   15b08:	push	{r4, r5, r6, lr}
   15b0c:	ldr	r5, [r0, #16]
   15b10:	ldr	r3, [r0]
   15b14:	cmp	r3, #0
   15b18:	beq	15b30 <argp_error@@Base+0x1d0>
   15b1c:	ldr	r2, [r1, #8]
   15b20:	add	r2, r2, #1
   15b24:	str	r2, [r1, #8]
   15b28:	mov	r2, #0
   15b2c:	b	15b84 <argp_error@@Base+0x224>
   15b30:	ldr	r3, [r0, #4]
   15b34:	cmp	r3, #0
   15b38:	ldrne	r3, [r1, #8]
   15b3c:	addne	r3, r3, #1
   15b40:	strne	r3, [r1, #8]
   15b44:	cmp	r5, #0
   15b48:	popeq	{r4, r5, r6, pc}
   15b4c:	ldr	r0, [r5]
   15b50:	cmp	r0, #0
   15b54:	popeq	{r4, r5, r6, pc}
   15b58:	mov	r4, r1
   15b5c:	mov	r1, r4
   15b60:	bl	15b08 <argp_error@@Base+0x1a8>
   15b64:	ldr	r3, [r4, #12]
   15b68:	add	r3, r3, #1
   15b6c:	str	r3, [r4, #12]
   15b70:	ldr	r0, [r5, #16]!
   15b74:	cmp	r0, #0
   15b78:	bne	15b5c <argp_error@@Base+0x1fc>
   15b7c:	pop	{r4, r5, r6, pc}
   15b80:	add	r2, r2, #1
   15b84:	add	r3, r3, #24
   15b88:	ldr	r0, [r3, #-20]	; 0xffffffec
   15b8c:	cmp	r0, #0
   15b90:	bne	15b80 <argp_error@@Base+0x220>
   15b94:	ldr	r0, [r3, #-24]	; 0xffffffe8
   15b98:	cmp	r0, #0
   15b9c:	bne	15b80 <argp_error@@Base+0x220>
   15ba0:	ldr	r0, [r3, #-8]
   15ba4:	cmp	r0, #0
   15ba8:	bne	15b80 <argp_error@@Base+0x220>
   15bac:	ldr	r0, [r3, #-4]
   15bb0:	cmp	r0, #0
   15bb4:	bne	15b80 <argp_error@@Base+0x220>
   15bb8:	add	r0, r2, r2, lsl #1
   15bbc:	ldr	r3, [r1]
   15bc0:	add	r3, r3, r0
   15bc4:	str	r3, [r1]
   15bc8:	ldr	r3, [r1, #4]
   15bcc:	add	r2, r3, r2
   15bd0:	str	r2, [r1, #4]
   15bd4:	b	15b44 <argp_error@@Base+0x1e4>
   15bd8:	cmp	r0, #86	; 0x56
   15bdc:	beq	15be8 <argp_error@@Base+0x288>
   15be0:	mov	r0, #7
   15be4:	bx	lr
   15be8:	push	{r4, lr}
   15bec:	mov	r4, r2
   15bf0:	ldr	r3, [pc, #100]	; 15c5c <argp_error@@Base+0x2fc>
   15bf4:	ldr	r3, [r3]
   15bf8:	cmp	r3, #0
   15bfc:	beq	15c20 <argp_error@@Base+0x2c0>
   15c00:	mov	r1, r2
   15c04:	ldr	r0, [r2, #48]	; 0x30
   15c08:	blx	r3
   15c0c:	ldr	r3, [r4, #16]
   15c10:	tst	r3, #32
   15c14:	beq	15c54 <argp_error@@Base+0x2f4>
   15c18:	mov	r0, #0
   15c1c:	pop	{r4, pc}
   15c20:	ldr	r3, [pc, #56]	; 15c60 <argp_error@@Base+0x300>
   15c24:	ldr	r2, [r3]
   15c28:	cmp	r2, #0
   15c2c:	beq	15c40 <argp_error@@Base+0x2e0>
   15c30:	ldr	r1, [pc, #44]	; 15c64 <argp_error@@Base+0x304>
   15c34:	ldr	r0, [r4, #48]	; 0x30
   15c38:	bl	111c0 <fprintf@plt>
   15c3c:	b	15c0c <argp_error@@Base+0x2ac>
   15c40:	ldr	r2, [pc, #32]	; 15c68 <argp_error@@Base+0x308>
   15c44:	ldr	r1, [pc, #32]	; 15c6c <argp_error@@Base+0x30c>
   15c48:	mov	r0, r4
   15c4c:	bl	15960 <argp_error@@Base>
   15c50:	b	15c0c <argp_error@@Base+0x2ac>
   15c54:	mov	r0, #0
   15c58:	bl	1119c <exit@plt>
   15c5c:	andeq	fp, r2, ip, asr #5
   15c60:	andeq	fp, r2, r4, ror r3
   15c64:	andeq	r9, r1, r4, lsl sp
   15c68:	andeq	r9, r1, r4, lsl #23
   15c6c:	andeq	r9, r1, r8, lsr #23
   15c70:	push	{r4, r5, r6, lr}
   15c74:	mov	r4, r2
   15c78:	cmn	r0, #3
   15c7c:	beq	15d18 <argp_error@@Base+0x3b8>
   15c80:	mov	r5, r1
   15c84:	ble	15cb0 <argp_error@@Base+0x350>
   15c88:	cmn	r0, #2
   15c8c:	beq	15d30 <argp_error@@Base+0x3d0>
   15c90:	cmp	r0, #63	; 0x3f
   15c94:	bne	15d74 <argp_error@@Base+0x414>
   15c98:	ldr	r2, [pc, #228]	; 15d84 <argp_error@@Base+0x424>
   15c9c:	ldr	r1, [r4, #48]	; 0x30
   15ca0:	mov	r0, r4
   15ca4:	bl	158a4 <argp_state_help@@Base>
   15ca8:	mov	r0, #0
   15cac:	pop	{r4, r5, r6, pc}
   15cb0:	cmn	r0, #4
   15cb4:	bne	15d74 <argp_error@@Base+0x414>
   15cb8:	mov	r2, #10
   15cbc:	mov	r1, #0
   15cc0:	ldr	r0, [pc, #192]	; 15d88 <argp_error@@Base+0x428>
   15cc4:	cmp	r5, r1
   15cc8:	movne	r0, r5
   15ccc:	bl	11010 <strtol@plt>
   15cd0:	ldr	r3, [pc, #180]	; 15d8c <argp_error@@Base+0x42c>
   15cd4:	str	r0, [r3]
   15cd8:	ldr	r2, [r3]
   15cdc:	sub	r1, r2, #1
   15ce0:	str	r1, [r3]
   15ce4:	cmp	r2, #0
   15ce8:	ble	15d7c <argp_error@@Base+0x41c>
   15cec:	mov	r5, #1
   15cf0:	mov	r4, r3
   15cf4:	mov	r0, r5
   15cf8:	bl	110b8 <sleep@plt>
   15cfc:	ldr	r3, [r4]
   15d00:	sub	r2, r3, #1
   15d04:	str	r2, [r4]
   15d08:	cmp	r3, #0
   15d0c:	bgt	15cf4 <argp_error@@Base+0x394>
   15d10:	mov	r0, #0
   15d14:	pop	{r4, r5, r6, pc}
   15d18:	ldr	r2, [pc, #112]	; 15d90 <argp_error@@Base+0x430>
   15d1c:	ldr	r1, [r4, #48]	; 0x30
   15d20:	mov	r0, r4
   15d24:	bl	158a4 <argp_state_help@@Base>
   15d28:	mov	r0, #0
   15d2c:	pop	{r4, r5, r6, pc}
   15d30:	ldr	r3, [pc, #92]	; 15d94 <argp_error@@Base+0x434>
   15d34:	str	r1, [r3]
   15d38:	mov	r0, r1
   15d3c:	bl	16bc0 <argp_parse@@Base+0xb34>
   15d40:	str	r0, [r4, #40]	; 0x28
   15d44:	ldr	r3, [pc, #76]	; 15d98 <argp_error@@Base+0x438>
   15d48:	str	r0, [r3]
   15d4c:	ldr	r3, [r4, #16]
   15d50:	and	r3, r3, #3
   15d54:	cmp	r3, #1
   15d58:	beq	15d64 <argp_error@@Base+0x404>
   15d5c:	mov	r0, #0
   15d60:	pop	{r4, r5, r6, pc}
   15d64:	ldr	r3, [r4, #8]
   15d68:	str	r5, [r3]
   15d6c:	mov	r0, #0
   15d70:	pop	{r4, r5, r6, pc}
   15d74:	mov	r0, #7
   15d78:	pop	{r4, r5, r6, pc}
   15d7c:	mov	r0, #0
   15d80:	pop	{r4, r5, r6, pc}
   15d84:	andeq	r0, r0, sl, ror r2
   15d88:	andeq	r9, r1, ip, lsr #23
   15d8c:	andeq	fp, r2, r8, asr #5
   15d90:	andeq	r0, r0, r1, lsl #4
   15d94:	muleq	r2, ip, r2
   15d98:	muleq	r2, r8, r2
   15d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15da0:	sub	sp, sp, #36	; 0x24
   15da4:	str	r0, [sp, #12]
   15da8:	str	r1, [sp, #16]
   15dac:	str	r2, [sp, #20]
   15db0:	mov	r8, r3
   15db4:	ldr	sl, [sp, #72]	; 0x48
   15db8:	ldr	r9, [r0]
   15dbc:	ldr	r5, [r0, #16]
   15dc0:	cmp	r9, #0
   15dc4:	addne	r6, r9, #24
   15dc8:	strne	r5, [sp, #28]
   15dcc:	strne	r8, [sp, #24]
   15dd0:	bne	15edc <argp_error@@Base+0x57c>
   15dd4:	ldr	r3, [sp, #12]
   15dd8:	ldr	r3, [r3, #4]
   15ddc:	cmp	r3, #0
   15de0:	moveq	r0, r8
   15de4:	moveq	r8, #0
   15de8:	beq	15e68 <argp_error@@Base+0x508>
   15dec:	ldr	r2, [sp, #12]
   15df0:	ldr	r3, [r2, #4]
   15df4:	str	r3, [r8]
   15df8:	str	r2, [r8, #4]
   15dfc:	ldr	r3, [sl, #4]
   15e00:	str	r3, [r8, #8]
   15e04:	mov	r3, #0
   15e08:	str	r3, [r8, #12]
   15e0c:	ldr	r2, [sp, #16]
   15e10:	str	r2, [r8, #16]
   15e14:	ldr	r2, [sp, #20]
   15e18:	str	r2, [r8, #20]
   15e1c:	str	r3, [r8, #24]
   15e20:	str	r3, [r8, #32]
   15e24:	str	r3, [r8, #28]
   15e28:	cmp	r5, r3
   15e2c:	beq	15e64 <argp_error@@Base+0x504>
   15e30:	ldr	r3, [r5]
   15e34:	cmp	r3, #0
   15e38:	beq	16084 <argp_error@@Base+0x724>
   15e3c:	mov	r3, #0
   15e40:	add	r3, r3, #1
   15e44:	ldr	r2, [r5, r3, lsl #4]
   15e48:	cmp	r2, #0
   15e4c:	bne	15e40 <argp_error@@Base+0x4e0>
   15e50:	ldr	r2, [sl, #12]
   15e54:	str	r2, [r8, #28]
   15e58:	ldr	r2, [sl, #12]
   15e5c:	add	r3, r2, r3, lsl #2
   15e60:	str	r3, [sl, #12]
   15e64:	add	r0, r8, #36	; 0x24
   15e68:	cmp	r5, #0
   15e6c:	beq	15ea8 <argp_error@@Base+0x548>
   15e70:	ldr	ip, [r5]
   15e74:	cmp	ip, #0
   15e78:	beq	15ea8 <argp_error@@Base+0x548>
   15e7c:	mov	r2, #0
   15e80:	add	r4, r2, #1
   15e84:	str	sl, [sp]
   15e88:	mov	r3, r0
   15e8c:	mov	r1, r8
   15e90:	mov	r0, ip
   15e94:	bl	15d9c <argp_error@@Base+0x43c>
   15e98:	ldr	ip, [r5, r4, lsl #4]
   15e9c:	mov	r2, r4
   15ea0:	cmp	ip, #0
   15ea4:	bne	15e80 <argp_error@@Base+0x520>
   15ea8:	add	sp, sp, #36	; 0x24
   15eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb0:	ldr	r0, [r4, #16]!
   15eb4:	cmp	r0, #0
   15eb8:	beq	15fc4 <argp_error@@Base+0x664>
   15ebc:	mov	r1, r7
   15ec0:	bl	11004 <strcmp@plt>
   15ec4:	cmp	r0, #0
   15ec8:	bne	15eb0 <argp_error@@Base+0x550>
   15ecc:	sub	r4, r4, fp
   15ed0:	cmn	r4, #15
   15ed4:	blt	15fc4 <argp_error@@Base+0x664>
   15ed8:	add	r6, r6, #24
   15edc:	sub	r2, r6, #24
   15ee0:	mov	r8, r6
   15ee4:	ldr	r4, [r6, #-20]	; 0xffffffec
   15ee8:	cmp	r4, #0
   15eec:	bne	15efc <argp_error@@Base+0x59c>
   15ef0:	ldr	r3, [r6, #-24]	; 0xffffffe8
   15ef4:	cmp	r3, #0
   15ef8:	beq	16060 <argp_error@@Base+0x700>
   15efc:	ldr	r3, [r8, #-12]
   15f00:	and	r1, r3, #4
   15f04:	cmp	r1, #0
   15f08:	moveq	r9, r2
   15f0c:	ldr	r5, [r9, #12]
   15f10:	ands	r5, r5, #8
   15f14:	bne	15ed8 <argp_error@@Base+0x578>
   15f18:	tst	r3, #8
   15f1c:	bne	15fa0 <argp_error@@Base+0x640>
   15f20:	sub	r3, r4, #1
   15f24:	cmp	r3, #254	; 0xfe
   15f28:	bhi	15fa0 <argp_error@@Base+0x640>
   15f2c:	bl	11184 <__ctype_b_loc@plt>
   15f30:	ldr	r3, [r0]
   15f34:	lsl	r4, r4, #1
   15f38:	ldrh	r3, [r3, r4]
   15f3c:	tst	r3, #16384	; 0x4000
   15f40:	beq	15fa0 <argp_error@@Base+0x640>
   15f44:	ldr	r3, [sl, #4]
   15f48:	add	r2, r3, #1
   15f4c:	str	r2, [sl, #4]
   15f50:	ldr	r2, [r8, #-20]	; 0xffffffec
   15f54:	strb	r2, [r3]
   15f58:	ldr	r3, [r9, #8]
   15f5c:	cmp	r3, #0
   15f60:	beq	15f94 <argp_error@@Base+0x634>
   15f64:	ldr	r3, [sl, #4]
   15f68:	add	r2, r3, #1
   15f6c:	str	r2, [sl, #4]
   15f70:	mov	r2, #58	; 0x3a
   15f74:	strb	r2, [r3]
   15f78:	ldr	r3, [r9, #12]
   15f7c:	tst	r3, #1
   15f80:	ldrne	r3, [sl, #4]
   15f84:	addne	r2, r3, #1
   15f88:	strne	r2, [sl, #4]
   15f8c:	movne	r2, #58	; 0x3a
   15f90:	strbne	r2, [r3]
   15f94:	ldr	r3, [sl, #4]
   15f98:	mov	r2, #0
   15f9c:	strb	r2, [r3]
   15fa0:	ldr	r7, [r8, #-24]	; 0xffffffe8
   15fa4:	cmp	r7, #0
   15fa8:	beq	15ed8 <argp_error@@Base+0x578>
   15fac:	ldr	r3, [sl]
   15fb0:	ldr	fp, [r3, #8]
   15fb4:	ldr	r0, [fp]
   15fb8:	cmp	r0, #0
   15fbc:	movne	r4, fp
   15fc0:	bne	15ebc <argp_error@@Base+0x55c>
   15fc4:	ldr	r3, [sl, #8]
   15fc8:	str	r7, [r3]
   15fcc:	ldr	r3, [sl, #8]
   15fd0:	ldr	r2, [r9, #8]
   15fd4:	cmp	r2, #0
   15fd8:	beq	15ff0 <argp_error@@Base+0x690>
   15fdc:	ldr	r5, [r9, #12]
   15fe0:	and	r5, r5, #1
   15fe4:	cmp	r5, #0
   15fe8:	movne	r5, #2
   15fec:	moveq	r5, #1
   15ff0:	str	r5, [r3, #4]
   15ff4:	ldr	r3, [sl, #8]
   15ff8:	mov	r2, #0
   15ffc:	str	r2, [r3, #8]
   16000:	ldr	r1, [sl, #8]
   16004:	ldr	r0, [r8, #-20]	; 0xffffffec
   16008:	cmp	r0, r2
   1600c:	ldreq	r0, [r9, #4]
   16010:	bic	r0, r0, #-16777216	; 0xff000000
   16014:	ldr	r3, [sl]
   16018:	ldr	r3, [r3, #48]	; 0x30
   1601c:	ldr	r2, [sp, #24]
   16020:	sub	r3, r2, r3
   16024:	asr	r3, r3, #2
   16028:	rsb	r2, r3, r3, lsl #3
   1602c:	add	r2, r2, r2, lsl #6
   16030:	add	r2, r3, r2, lsl #3
   16034:	rsb	r2, r2, r2, lsl #15
   16038:	add	r3, r3, r2, lsl #3
   1603c:	add	r3, r3, #1
   16040:	add	r3, r0, r3, lsl #24
   16044:	str	r3, [r1, #12]
   16048:	ldr	r3, [sl, #8]
   1604c:	add	r2, r3, #16
   16050:	str	r2, [sl, #8]
   16054:	mov	r2, #0
   16058:	str	r2, [r3, #16]
   1605c:	b	15ed8 <argp_error@@Base+0x578>
   16060:	ldr	r3, [r6, #-8]
   16064:	cmp	r3, #0
   16068:	bne	15efc <argp_error@@Base+0x59c>
   1606c:	ldr	r3, [r6, #-4]
   16070:	cmp	r3, #0
   16074:	bne	15efc <argp_error@@Base+0x59c>
   16078:	ldr	r5, [sp, #28]
   1607c:	ldr	r8, [sp, #24]
   16080:	b	15dec <argp_error@@Base+0x48c>
   16084:	mov	r3, #0
   16088:	b	15e50 <argp_error@@Base+0x4f0>

0001608c <argp_parse@@Base>:
   1608c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16090:	add	fp, sp, #32
   16094:	sub	sp, sp, #220	; 0xdc
   16098:	mov	r8, r0
   1609c:	str	r1, [fp, #-236]	; 0xffffff14
   160a0:	str	r2, [fp, #-232]	; 0xffffff18
   160a4:	mov	r6, r3
   160a8:	tst	r3, #1
   160ac:	bne	160dc <argp_parse@@Base+0x50>
   160b0:	ldr	r3, [pc, #2548]	; 16aac <argp_parse@@Base+0xa20>
   160b4:	ldr	r3, [r3]
   160b8:	cmp	r3, #0
   160bc:	moveq	r3, r2
   160c0:	ldreq	r2, [r3]
   160c4:	ldreq	r3, [pc, #2528]	; 16aac <argp_parse@@Base+0xa20>
   160c8:	streq	r2, [r3]
   160cc:	ldr	r3, [pc, #2524]	; 16ab0 <argp_parse@@Base+0xa24>
   160d0:	ldr	r3, [r3]
   160d4:	cmp	r3, #0
   160d8:	beq	162cc <argp_parse@@Base+0x240>
   160dc:	tst	r6, #16
   160e0:	beq	162e4 <argp_parse@@Base+0x258>
   160e4:	mov	r2, #36	; 0x24
   160e8:	mov	r1, #0
   160ec:	sub	r0, fp, #196	; 0xc4
   160f0:	bl	111e4 <memset@plt>
   160f4:	ands	r3, r6, #4
   160f8:	str	r3, [fp, #-240]	; 0xffffff10
   160fc:	moveq	r3, #1
   16100:	movne	r3, #0
   16104:	str	r3, [fp, #-228]	; 0xffffff1c
   16108:	mov	r3, #0
   1610c:	str	r3, [fp, #-224]	; 0xffffff20
   16110:	str	r3, [fp, #-220]	; 0xffffff24
   16114:	str	r3, [fp, #-216]	; 0xffffff28
   16118:	cmp	r8, r3
   1611c:	beq	1612c <argp_parse@@Base+0xa0>
   16120:	sub	r1, fp, #228	; 0xe4
   16124:	mov	r0, r8
   16128:	bl	15b08 <argp_error@@Base+0x1a8>
   1612c:	ldr	r4, [fp, #-220]	; 0xffffff24
   16130:	add	r4, r4, #1
   16134:	add	r4, r4, r4, lsl #3
   16138:	lsl	r4, r4, #2
   1613c:	ldr	r9, [fp, #-216]	; 0xffffff28
   16140:	lsl	r9, r9, #2
   16144:	add	sl, r9, r4
   16148:	ldr	r5, [fp, #-224]	; 0xffffff20
   1614c:	add	r5, r5, #1
   16150:	add	r5, sl, r5, lsl #4
   16154:	ldr	r0, [fp, #-228]	; 0xffffff1c
   16158:	add	r0, r0, #1
   1615c:	add	r0, r0, r5
   16160:	bl	17888 <argp_parse@@Base+0x17fc>
   16164:	mov	r7, r0
   16168:	str	r0, [fp, #-40]	; 0xffffffd8
   1616c:	cmp	r0, #0
   16170:	moveq	r4, #12
   16174:	beq	168fc <argp_parse@@Base+0x870>
   16178:	str	r0, [fp, #-112]	; 0xffffff90
   1617c:	add	r4, r0, r4
   16180:	str	r4, [fp, #-104]	; 0xffffff98
   16184:	add	r3, r0, sl
   16188:	str	r3, [fp, #-244]	; 0xffffff0c
   1618c:	str	r3, [fp, #-152]	; 0xffffff68
   16190:	add	sl, r0, r5
   16194:	str	sl, [fp, #-156]	; 0xffffff64
   16198:	mov	r3, #1
   1619c:	str	r3, [fp, #-196]	; 0xffffff3c
   161a0:	str	r3, [fp, #-192]	; 0xffffff40
   161a4:	sub	ip, fp, #148	; 0x94
   161a8:	sub	lr, fp, #196	; 0xc4
   161ac:	ldm	lr!, {r0, r1, r2, r3}
   161b0:	stmia	ip!, {r0, r1, r2, r3}
   161b4:	ldm	lr!, {r0, r1, r2, r3}
   161b8:	stmia	ip!, {r0, r1, r2, r3}
   161bc:	ldr	r3, [lr]
   161c0:	str	r3, [ip]
   161c4:	mov	r2, r9
   161c8:	mov	r1, #0
   161cc:	mov	r0, r4
   161d0:	bl	111e4 <memset@plt>
   161d4:	sub	r3, fp, #160	; 0xa0
   161d8:	str	r3, [fp, #-212]	; 0xffffff2c
   161dc:	str	sl, [fp, #-208]	; 0xffffff30
   161e0:	ldr	r3, [fp, #-244]	; 0xffffff0c
   161e4:	str	r3, [fp, #-204]	; 0xffffff34
   161e8:	str	r4, [fp, #-200]	; 0xffffff38
   161ec:	tst	r6, #8
   161f0:	beq	1637c <argp_parse@@Base+0x2f0>
   161f4:	add	sl, sl, #1
   161f8:	str	sl, [fp, #-208]	; 0xffffff30
   161fc:	mov	r3, #45	; 0x2d
   16200:	strb	r3, [r7, r5]
   16204:	mov	r3, #0
   16208:	ldr	r2, [fp, #-208]	; 0xffffff30
   1620c:	strb	r3, [r2]
   16210:	ldr	r2, [fp, #-204]	; 0xffffff34
   16214:	str	r3, [r2]
   16218:	str	r8, [fp, #-160]	; 0xffffff60
   1621c:	cmp	r8, r3
   16220:	beq	16398 <argp_parse@@Base+0x30c>
   16224:	sub	r3, fp, #212	; 0xd4
   16228:	str	r3, [sp]
   1622c:	ldr	r3, [fp, #-112]	; 0xffffff90
   16230:	mov	r2, #0
   16234:	mov	r1, r2
   16238:	mov	r0, r8
   1623c:	bl	15d9c <argp_error@@Base+0x43c>
   16240:	str	r0, [fp, #-108]	; 0xffffff94
   16244:	mov	r2, #56	; 0x38
   16248:	mov	r1, #0
   1624c:	sub	r0, fp, #96	; 0x60
   16250:	bl	111e4 <memset@plt>
   16254:	ldr	r3, [fp, #-160]	; 0xffffff60
   16258:	str	r3, [fp, #-96]	; 0xffffffa0
   1625c:	ldr	r3, [fp, #-236]	; 0xffffff14
   16260:	str	r3, [fp, #-92]	; 0xffffffa4
   16264:	ldr	r3, [fp, #-232]	; 0xffffff18
   16268:	str	r3, [fp, #-88]	; 0xffffffa8
   1626c:	str	r6, [fp, #-80]	; 0xffffffb0
   16270:	ldr	r3, [pc, #2108]	; 16ab4 <argp_parse@@Base+0xa28>
   16274:	ldr	r3, [r3]
   16278:	str	r3, [fp, #-52]	; 0xffffffcc
   1627c:	ldr	r3, [pc, #2100]	; 16ab8 <argp_parse@@Base+0xa2c>
   16280:	ldr	r3, [r3]
   16284:	str	r3, [fp, #-48]	; 0xffffffd0
   16288:	sub	r3, fp, #160	; 0xa0
   1628c:	str	r3, [fp, #-44]	; 0xffffffd4
   16290:	mov	r3, #1
   16294:	str	r3, [fp, #-100]	; 0xffffff9c
   16298:	ldr	r3, [fp, #-112]	; 0xffffff90
   1629c:	ldr	r2, [fp, #-108]	; 0xffffff94
   162a0:	cmp	r3, r2
   162a4:	bcs	16430 <argp_parse@@Base+0x3a4>
   162a8:	ldr	r2, [fp, #8]
   162ac:	str	r2, [r3, #24]
   162b0:	ldr	r5, [fp, #-112]	; 0xffffff90
   162b4:	ldr	r3, [fp, #-108]	; 0xffffff94
   162b8:	cmp	r5, r3
   162bc:	bcs	1643c <argp_parse@@Base+0x3b0>
   162c0:	ldr	r7, [pc, #2036]	; 16abc <argp_parse@@Base+0xa30>
   162c4:	mov	r6, #0
   162c8:	b	163d4 <argp_parse@@Base+0x348>
   162cc:	ldr	r3, [fp, #-232]	; 0xffffff18
   162d0:	ldr	r0, [r3]
   162d4:	bl	16bc0 <argp_parse@@Base+0xb34>
   162d8:	ldr	r3, [pc, #2000]	; 16ab0 <argp_parse@@Base+0xa24>
   162dc:	str	r0, [r3]
   162e0:	b	160dc <argp_parse@@Base+0x50>
   162e4:	sub	sp, sp, #72	; 0x48
   162e8:	add	r5, sp, #8
   162ec:	sub	sp, sp, #40	; 0x28
   162f0:	add	r4, sp, #8
   162f4:	mov	r1, #0
   162f8:	str	r1, [r4]
   162fc:	str	r1, [r4, #4]
   16300:	str	r1, [r4, #8]
   16304:	str	r1, [r4, #12]
   16308:	str	r1, [r4, #20]
   1630c:	str	r1, [r4, #24]
   16310:	str	r5, [r4, #16]
   16314:	mov	r2, #64	; 0x40
   16318:	mov	r0, r5
   1631c:	bl	111e4 <memset@plt>
   16320:	cmp	r8, #0
   16324:	addne	r3, r5, #16
   16328:	strne	r8, [r5]
   1632c:	moveq	r3, r5
   16330:	ldr	r2, [pc, #1928]	; 16ac0 <argp_parse@@Base+0xa34>
   16334:	str	r2, [r3]
   16338:	ldr	r2, [pc, #1924]	; 16ac4 <argp_parse@@Base+0xa38>
   1633c:	ldr	r2, [r2]
   16340:	cmp	r2, #0
   16344:	beq	16364 <argp_parse@@Base+0x2d8>
   16348:	add	r2, r3, #32
   1634c:	ldr	r1, [pc, #1908]	; 16ac8 <argp_parse@@Base+0xa3c>
   16350:	str	r1, [r3, #16]
   16354:	mov	r3, #0
   16358:	str	r3, [r2]
   1635c:	mov	r8, r4
   16360:	b	160e4 <argp_parse@@Base+0x58>
   16364:	ldr	r2, [pc, #1888]	; 16acc <argp_parse@@Base+0xa40>
   16368:	ldr	r2, [r2]
   1636c:	cmp	r2, #0
   16370:	addeq	r2, r3, #16
   16374:	bne	16348 <argp_parse@@Base+0x2bc>
   16378:	b	16354 <argp_parse@@Base+0x2c8>
   1637c:	ldr	r3, [fp, #-240]	; 0xffffff10
   16380:	cmp	r3, #0
   16384:	addne	sl, sl, #1
   16388:	strne	sl, [fp, #-208]	; 0xffffff30
   1638c:	movne	r3, #43	; 0x2b
   16390:	strbne	r3, [r7, r5]
   16394:	b	16204 <argp_parse@@Base+0x178>
   16398:	ldr	r3, [fp, #-112]	; 0xffffff90
   1639c:	str	r3, [fp, #-108]	; 0xffffff94
   163a0:	b	16244 <argp_parse@@Base+0x1b8>
   163a4:	mov	r3, r6
   163a8:	mov	r2, r7
   163ac:	sub	r1, fp, #96	; 0x60
   163b0:	mov	r0, r5
   163b4:	bl	15aa4 <argp_error@@Base+0x144>
   163b8:	add	r5, r5, #36	; 0x24
   163bc:	ldr	r3, [fp, #-108]	; 0xffffff94
   163c0:	cmp	r5, r3
   163c4:	bcs	16420 <argp_parse@@Base+0x394>
   163c8:	cmp	r0, #7
   163cc:	cmpne	r0, #0
   163d0:	bne	16420 <argp_parse@@Base+0x394>
   163d4:	ldr	r3, [r5, #16]
   163d8:	cmp	r3, #0
   163dc:	ldrne	r2, [r5, #20]
   163e0:	ldrne	r3, [r3, #28]
   163e4:	ldrne	r3, [r3, r2, lsl #2]
   163e8:	strne	r3, [r5, #24]
   163ec:	ldr	r3, [r5]
   163f0:	cmp	r3, #0
   163f4:	bne	163a4 <argp_parse@@Base+0x318>
   163f8:	ldr	r3, [r5, #4]
   163fc:	ldr	r3, [r3, #16]
   16400:	cmp	r3, #0
   16404:	beq	163a4 <argp_parse@@Base+0x318>
   16408:	ldr	r3, [r3]
   1640c:	cmp	r3, #0
   16410:	ldrne	r3, [r5, #28]
   16414:	ldrne	r2, [r5, #24]
   16418:	strne	r2, [r3]
   1641c:	b	163a4 <argp_parse@@Base+0x318>
   16420:	mov	r4, r0
   16424:	cmp	r0, #7
   16428:	beq	1643c <argp_parse@@Base+0x3b0>
   1642c:	b	16434 <argp_parse@@Base+0x3a8>
   16430:	mov	r4, #0
   16434:	cmp	r4, #0
   16438:	bne	168fc <argp_parse@@Base+0x870>
   1643c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16440:	tst	r3, #2
   16444:	moveq	r3, #1
   16448:	streq	r3, [fp, #-144]	; 0xffffff70
   1644c:	beq	16478 <argp_parse@@Base+0x3ec>
   16450:	mov	r2, #0
   16454:	str	r2, [fp, #-144]	; 0xffffff70
   16458:	tst	r3, #1
   1645c:	beq	16478 <argp_parse@@Base+0x3ec>
   16460:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16464:	sub	r3, r3, #4
   16468:	str	r3, [fp, #-88]	; 0xffffffa8
   1646c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16470:	add	r3, r3, #1
   16474:	str	r3, [fp, #-92]	; 0xffffffa4
   16478:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1647c:	ldr	r2, [fp, #-232]	; 0xffffff18
   16480:	cmp	r2, r3
   16484:	beq	164a4 <argp_parse@@Base+0x418>
   16488:	ldr	r3, [pc, #1568]	; 16ab0 <argp_parse@@Base+0xa24>
   1648c:	ldr	r3, [r3]
   16490:	str	r3, [fp, #-56]	; 0xffffffc8
   16494:	mov	r6, #0
   16498:	mov	sl, #1
   1649c:	mvn	r9, #0
   164a0:	b	16714 <argp_parse@@Base+0x688>
   164a4:	ldr	r0, [r2]
   164a8:	cmp	r0, #0
   164ac:	beq	16488 <argp_parse@@Base+0x3fc>
   164b0:	bl	16bc0 <argp_parse@@Base+0xb34>
   164b4:	str	r0, [fp, #-56]	; 0xffffffc8
   164b8:	b	16494 <argp_parse@@Base+0x408>
   164bc:	ldr	r3, [fp, #-84]	; 0xffffffac
   164c0:	str	r3, [fp, #-148]	; 0xffffff6c
   164c4:	str	r9, [fp, #-140]	; 0xffffff74
   164c8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   164cc:	tst	r3, #64	; 0x40
   164d0:	beq	1659c <argp_parse@@Base+0x510>
   164d4:	sub	r3, fp, #148	; 0x94
   164d8:	str	r3, [sp, #4]
   164dc:	str	r6, [sp]
   164e0:	ldr	r3, [fp, #-152]	; 0xffffff68
   164e4:	ldr	r2, [fp, #-156]	; 0xffffff64
   164e8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   164ec:	ldr	r0, [fp, #-92]	; 0xffffffa4
   164f0:	bl	16d5c <argp_parse@@Base+0xcd0>
   164f4:	mov	r5, r0
   164f8:	ldr	r4, [fp, #-148]	; 0xffffff6c
   164fc:	str	r4, [fp, #-84]	; 0xffffffac
   16500:	cmn	r5, #1
   16504:	beq	165c4 <argp_parse@@Base+0x538>
   16508:	cmp	r5, #63	; 0x3f
   1650c:	beq	165f0 <argp_parse@@Base+0x564>
   16510:	cmp	r5, #1
   16514:	beq	16628 <argp_parse@@Base+0x59c>
   16518:	ldr	r4, [fp, #-136]	; 0xffffff78
   1651c:	asrs	r3, r5, #24
   16520:	bne	166d4 <argp_parse@@Base+0x648>
   16524:	mov	r1, r5
   16528:	ldr	r0, [fp, #-156]	; 0xffffff64
   1652c:	bl	111b4 <strchr@plt>
   16530:	subs	r1, r0, #0
   16534:	beq	16584 <argp_parse@@Base+0x4f8>
   16538:	ldr	r0, [fp, #-112]	; 0xffffff90
   1653c:	ldr	r2, [fp, #-108]	; 0xffffff94
   16540:	cmp	r2, r0
   16544:	bls	16584 <argp_parse@@Base+0x4f8>
   16548:	ldr	r3, [r0, #8]
   1654c:	cmp	r1, r3
   16550:	bcc	1656c <argp_parse@@Base+0x4e0>
   16554:	add	r0, r0, #36	; 0x24
   16558:	cmp	r2, r0
   1655c:	bls	16584 <argp_parse@@Base+0x4f8>
   16560:	ldr	r3, [r0, #8]
   16564:	cmp	r1, r3
   16568:	bcs	16554 <argp_parse@@Base+0x4c8>
   1656c:	mov	r3, r4
   16570:	mov	r2, r5
   16574:	sub	r1, fp, #96	; 0x60
   16578:	bl	15aa4 <argp_error@@Base+0x144>
   1657c:	cmp	r0, #7
   16580:	bne	1670c <argp_parse@@Base+0x680>
   16584:	ldr	r3, [pc, #1348]	; 16ad0 <argp_parse@@Base+0xa44>
   16588:	mov	r2, r5
   1658c:	ldr	r1, [pc, #1344]	; 16ad4 <argp_parse@@Base+0xa48>
   16590:	sub	r0, fp, #96	; 0x60
   16594:	bl	15960 <argp_error@@Base>
   16598:	b	167b4 <argp_parse@@Base+0x728>
   1659c:	sub	r3, fp, #148	; 0x94
   165a0:	str	r3, [sp, #4]
   165a4:	str	r6, [sp]
   165a8:	ldr	r3, [fp, #-152]	; 0xffffff68
   165ac:	ldr	r2, [fp, #-156]	; 0xffffff64
   165b0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   165b4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   165b8:	bl	16d00 <argp_parse@@Base+0xc74>
   165bc:	mov	r5, r0
   165c0:	b	164f8 <argp_parse@@Base+0x46c>
   165c4:	str	r6, [fp, #-100]	; 0xffffff9c
   165c8:	cmp	r4, #1
   165cc:	ble	1673c <argp_parse@@Base+0x6b0>
   165d0:	sub	r3, r4, #-1073741823	; 0xc0000001
   165d4:	ldr	r1, [pc, #1276]	; 16ad8 <argp_parse@@Base+0xa4c>
   165d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   165dc:	ldr	r0, [r2, r3, lsl #2]
   165e0:	bl	11004 <strcmp@plt>
   165e4:	cmp	r0, #0
   165e8:	streq	r4, [fp, #-72]	; 0xffffffb8
   165ec:	b	1673c <argp_parse@@Base+0x6b0>
   165f0:	ldr	r3, [fp, #-140]	; 0xffffff74
   165f4:	cmn	r3, #1
   165f8:	beq	16518 <argp_parse@@Base+0x48c>
   165fc:	mov	r3, #0
   16600:	b	167c4 <argp_parse@@Base+0x738>
   16604:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16608:	tst	r2, #4
   1660c:	movne	r3, #1
   16610:	bne	167c4 <argp_parse@@Base+0x738>
   16614:	add	r2, r3, #1
   16618:	str	r2, [fp, #-84]	; 0xffffffac
   1661c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16620:	ldr	r3, [r2, r3, lsl #2]
   16624:	str	r3, [fp, #-136]	; 0xffffff78
   16628:	ldr	r7, [fp, #-136]	; 0xffffff78
   1662c:	ldr	r8, [fp, #-84]	; 0xffffffac
   16630:	sub	r8, r8, #1
   16634:	str	r8, [fp, #-84]	; 0xffffffac
   16638:	ldr	r5, [fp, #-112]	; 0xffffff90
   1663c:	ldr	r3, [fp, #-108]	; 0xffffff94
   16640:	cmp	r3, r5
   16644:	bhi	16690 <argp_parse@@Base+0x604>
   16648:	b	166cc <argp_parse@@Base+0x640>
   1664c:	ldr	r3, [fp, #-84]	; 0xffffffac
   16650:	sub	r3, r3, #1
   16654:	str	r3, [fp, #-84]	; 0xffffffac
   16658:	mov	r3, r6
   1665c:	ldr	r2, [pc, #1144]	; 16adc <argp_parse@@Base+0xa50>
   16660:	sub	r1, fp, #96	; 0x60
   16664:	mov	r0, r5
   16668:	bl	15aa4 <argp_error@@Base+0x144>
   1666c:	add	r5, r5, #36	; 0x24
   16670:	ldr	r3, [fp, #-108]	; 0xffffff94
   16674:	cmp	r5, r3
   16678:	movcs	r3, #0
   1667c:	movcc	r3, #1
   16680:	cmp	r0, #7
   16684:	movne	r3, #0
   16688:	cmp	r3, #0
   1668c:	beq	16a70 <argp_parse@@Base+0x9e4>
   16690:	ldr	r3, [fp, #-84]	; 0xffffffac
   16694:	add	r3, r3, #1
   16698:	str	r3, [fp, #-84]	; 0xffffffac
   1669c:	mov	r3, r7
   166a0:	mov	r2, r6
   166a4:	sub	r1, fp, #96	; 0x60
   166a8:	mov	r0, r5
   166ac:	bl	15aa4 <argp_error@@Base+0x144>
   166b0:	cmp	r0, #7
   166b4:	beq	1664c <argp_parse@@Base+0x5c0>
   166b8:	add	r5, r5, #36	; 0x24
   166bc:	cmp	r0, #0
   166c0:	beq	16a80 <argp_parse@@Base+0x9f4>
   166c4:	cmp	r0, #7
   166c8:	bne	1670c <argp_parse@@Base+0x680>
   166cc:	mov	r5, #1
   166d0:	b	167b4 <argp_parse@@Base+0x728>
   166d4:	ands	r1, r5, #8388608	; 0x800000
   166d8:	movne	r1, #-16777216	; 0xff000000
   166dc:	bic	r2, r5, #-16777216	; 0xff000000
   166e0:	add	r0, r3, r3, lsl #3
   166e4:	lsl	r0, r0, #2
   166e8:	sub	r0, r0, #36	; 0x24
   166ec:	mov	r3, r4
   166f0:	orr	r2, r2, r1
   166f4:	sub	r1, fp, #96	; 0x60
   166f8:	ldr	ip, [fp, #-112]	; 0xffffff90
   166fc:	add	r0, ip, r0
   16700:	bl	15aa4 <argp_error@@Base+0x144>
   16704:	cmp	r0, #7
   16708:	beq	16754 <argp_parse@@Base+0x6c8>
   1670c:	cmp	r0, #0
   16710:	bne	16864 <argp_parse@@Base+0x7d8>
   16714:	ldr	r3, [fp, #-72]	; 0xffffffb8
   16718:	cmp	r3, #0
   1671c:	beq	16730 <argp_parse@@Base+0x6a4>
   16720:	ldr	r2, [fp, #-84]	; 0xffffffac
   16724:	cmp	r3, r2
   16728:	strgt	r6, [fp, #-72]	; 0xffffffb8
   1672c:	ble	1673c <argp_parse@@Base+0x6b0>
   16730:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16734:	cmp	r3, #0
   16738:	bne	164bc <argp_parse@@Base+0x430>
   1673c:	ldr	r3, [fp, #-84]	; 0xffffffac
   16740:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16744:	cmp	r3, r2
   16748:	blt	16604 <argp_parse@@Base+0x578>
   1674c:	mov	r3, #1
   16750:	b	167c4 <argp_parse@@Base+0x738>
   16754:	ldr	r3, [fp, #-152]	; 0xffffff68
   16758:	ldr	r2, [r3, #12]
   1675c:	cmp	r2, r5
   16760:	beq	16794 <argp_parse@@Base+0x708>
   16764:	ldr	r2, [r3]
   16768:	cmp	r2, #0
   1676c:	beq	1685c <argp_parse@@Base+0x7d0>
   16770:	add	r3, r3, #16
   16774:	ldr	r2, [r3, #12]
   16778:	cmp	r2, r5
   1677c:	beq	16794 <argp_parse@@Base+0x708>
   16780:	ldr	r2, [r3]
   16784:	cmp	r2, #0
   16788:	bne	16770 <argp_parse@@Base+0x6e4>
   1678c:	ldr	r2, [pc, #844]	; 16ae0 <argp_parse@@Base+0xa54>
   16790:	b	167a4 <argp_parse@@Base+0x718>
   16794:	ldr	r2, [r3]
   16798:	ldr	r3, [pc, #832]	; 16ae0 <argp_parse@@Base+0xa54>
   1679c:	cmp	r2, #0
   167a0:	moveq	r2, r3
   167a4:	ldr	r3, [pc, #804]	; 16ad0 <argp_parse@@Base+0xa44>
   167a8:	ldr	r1, [pc, #820]	; 16ae4 <argp_parse@@Base+0xa58>
   167ac:	sub	r0, fp, #96	; 0x60
   167b0:	bl	15960 <argp_error@@Base>
   167b4:	add	r5, r5, #1
   167b8:	bics	r3, r5, #2
   167bc:	moveq	r3, #1
   167c0:	movne	r3, #0
   167c4:	cmp	r3, #0
   167c8:	moveq	r4, #7
   167cc:	beq	16868 <argp_parse@@Base+0x7dc>
   167d0:	ldr	r3, [fp, #-84]	; 0xffffffac
   167d4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   167d8:	cmp	r3, r2
   167dc:	beq	16908 <argp_parse@@Base+0x87c>
   167e0:	ldr	r2, [fp, #4]
   167e4:	cmp	r2, #0
   167e8:	strne	r3, [r2]
   167ec:	beq	16a04 <argp_parse@@Base+0x978>
   167f0:	ldr	r5, [fp, #-108]	; 0xffffff94
   167f4:	sub	r5, r5, #36	; 0x24
   167f8:	ldr	r3, [fp, #-112]	; 0xffffff90
   167fc:	cmp	r5, r3
   16800:	bcc	16a40 <argp_parse@@Base+0x9b4>
   16804:	ldr	r7, [pc, #732]	; 16ae8 <argp_parse@@Base+0xa5c>
   16808:	mov	r6, #0
   1680c:	mov	r3, r6
   16810:	mov	r2, r7
   16814:	sub	r1, fp, #96	; 0x60
   16818:	mov	r0, r5
   1681c:	bl	15aa4 <argp_error@@Base+0x144>
   16820:	sub	r5, r5, #36	; 0x24
   16824:	ldr	r3, [fp, #-112]	; 0xffffff90
   16828:	cmp	r5, r3
   1682c:	bcc	1683c <argp_parse@@Base+0x7b0>
   16830:	cmp	r0, #7
   16834:	cmpne	r0, #0
   16838:	beq	1680c <argp_parse@@Base+0x780>
   1683c:	mov	r4, r0
   16840:	cmp	r0, #7
   16844:	moveq	r4, #0
   16848:	ldr	r5, [fp, #-108]	; 0xffffff94
   1684c:	sub	r5, r5, #36	; 0x24
   16850:	cmp	r3, r5
   16854:	bls	168c0 <argp_parse@@Base+0x834>
   16858:	b	168f4 <argp_parse@@Base+0x868>
   1685c:	ldr	r2, [pc, #636]	; 16ae0 <argp_parse@@Base+0xa54>
   16860:	b	167a4 <argp_parse@@Base+0x718>
   16864:	mov	r4, r0
   16868:	cmp	r4, #7
   1686c:	beq	16a28 <argp_parse@@Base+0x99c>
   16870:	ldr	r5, [fp, #-112]	; 0xffffff90
   16874:	ldr	r3, [fp, #-108]	; 0xffffff94
   16878:	cmp	r3, r5
   1687c:	bls	168ac <argp_parse@@Base+0x820>
   16880:	ldr	r7, [pc, #612]	; 16aec <argp_parse@@Base+0xa60>
   16884:	mov	r6, #0
   16888:	mov	r3, r6
   1688c:	mov	r2, r7
   16890:	sub	r1, fp, #96	; 0x60
   16894:	mov	r0, r5
   16898:	bl	15aa4 <argp_error@@Base+0x144>
   1689c:	add	r5, r5, #36	; 0x24
   168a0:	ldr	r3, [fp, #-108]	; 0xffffff94
   168a4:	cmp	r5, r3
   168a8:	bcc	16888 <argp_parse@@Base+0x7fc>
   168ac:	ldr	r5, [fp, #-108]	; 0xffffff94
   168b0:	sub	r5, r5, #36	; 0x24
   168b4:	ldr	r3, [fp, #-112]	; 0xffffff90
   168b8:	cmp	r3, r5
   168bc:	bhi	168ec <argp_parse@@Base+0x860>
   168c0:	ldr	r7, [pc, #552]	; 16af0 <argp_parse@@Base+0xa64>
   168c4:	mov	r6, #0
   168c8:	mov	r3, r6
   168cc:	mov	r2, r7
   168d0:	sub	r1, fp, #96	; 0x60
   168d4:	mov	r0, r5
   168d8:	bl	15aa4 <argp_error@@Base+0x144>
   168dc:	sub	r5, r5, #36	; 0x24
   168e0:	ldr	r3, [fp, #-112]	; 0xffffff90
   168e4:	cmp	r5, r3
   168e8:	bcs	168c8 <argp_parse@@Base+0x83c>
   168ec:	cmp	r4, #7
   168f0:	moveq	r4, #22
   168f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   168f8:	bl	16c80 <argp_parse@@Base+0xbf4>
   168fc:	mov	r0, r4
   16900:	sub	sp, fp, #32
   16904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16908:	ldr	r6, [fp, #-112]	; 0xffffff90
   1690c:	ldr	r5, [fp, #-108]	; 0xffffff94
   16910:	cmp	r6, r5
   16914:	bcs	16a48 <argp_parse@@Base+0x9bc>
   16918:	mov	r4, #0
   1691c:	ldr	r8, [pc, #464]	; 16af4 <argp_parse@@Base+0xa68>
   16920:	mov	r7, r4
   16924:	mov	r0, r4
   16928:	b	16948 <argp_parse@@Base+0x8bc>
   1692c:	add	r6, r6, #36	; 0x24
   16930:	ldr	r5, [fp, #-108]	; 0xffffff94
   16934:	cmp	r6, r5
   16938:	bcs	16974 <argp_parse@@Base+0x8e8>
   1693c:	cmp	r0, #7
   16940:	cmpne	r0, #0
   16944:	bne	1696c <argp_parse@@Base+0x8e0>
   16948:	ldr	r3, [r6, #12]
   1694c:	cmp	r3, #0
   16950:	bne	1692c <argp_parse@@Base+0x8a0>
   16954:	mov	r3, r7
   16958:	mov	r2, r8
   1695c:	sub	r1, fp, #96	; 0x60
   16960:	mov	r0, r6
   16964:	bl	15aa4 <argp_error@@Base+0x144>
   16968:	b	1692c <argp_parse@@Base+0x8a0>
   1696c:	mov	r4, r0
   16970:	b	169d8 <argp_parse@@Base+0x94c>
   16974:	mov	r4, r0
   16978:	sub	r5, r5, #36	; 0x24
   1697c:	ldr	r3, [fp, #-112]	; 0xffffff90
   16980:	cmp	r3, r5
   16984:	bhi	169d8 <argp_parse@@Base+0x94c>
   16988:	cmp	r0, #0
   1698c:	cmpne	r0, #7
   16990:	bne	169d8 <argp_parse@@Base+0x94c>
   16994:	ldr	r7, [pc, #348]	; 16af8 <argp_parse@@Base+0xa6c>
   16998:	mov	r6, #0
   1699c:	mov	r3, r6
   169a0:	mov	r2, r7
   169a4:	sub	r1, fp, #96	; 0x60
   169a8:	mov	r0, r5
   169ac:	bl	15aa4 <argp_error@@Base+0x144>
   169b0:	sub	r5, r5, #36	; 0x24
   169b4:	ldr	r3, [fp, #-112]	; 0xffffff90
   169b8:	cmp	r5, r3
   169bc:	bcc	169d4 <argp_parse@@Base+0x948>
   169c0:	cmp	r0, #7
   169c4:	cmpne	r0, #0
   169c8:	beq	1699c <argp_parse@@Base+0x910>
   169cc:	mov	r4, r0
   169d0:	b	169d8 <argp_parse@@Base+0x94c>
   169d4:	mov	r4, r0
   169d8:	cmp	r4, #7
   169dc:	beq	16a5c <argp_parse@@Base+0x9d0>
   169e0:	ldr	r3, [fp, #4]
   169e4:	cmp	r3, #0
   169e8:	beq	16aa0 <argp_parse@@Base+0xa14>
   169ec:	ldr	r3, [fp, #-84]	; 0xffffffac
   169f0:	ldr	r2, [fp, #4]
   169f4:	str	r3, [r2]
   169f8:	cmp	r4, #0
   169fc:	beq	167f0 <argp_parse@@Base+0x764>
   16a00:	b	16868 <argp_parse@@Base+0x7dc>
   16a04:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16a08:	tst	r3, #2
   16a0c:	bne	16a28 <argp_parse@@Base+0x99c>
   16a10:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16a14:	cmp	r0, #0
   16a18:	beq	16a28 <argp_parse@@Base+0x99c>
   16a1c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16a20:	ldr	r1, [pc, #212]	; 16afc <argp_parse@@Base+0xa70>
   16a24:	bl	111c0 <fprintf@plt>
   16a28:	mov	r2, #260	; 0x104
   16a2c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16a30:	sub	r0, fp, #96	; 0x60
   16a34:	bl	158a4 <argp_state_help@@Base>
   16a38:	mov	r4, #7
   16a3c:	b	16870 <argp_parse@@Base+0x7e4>
   16a40:	mov	r4, #0
   16a44:	b	168ec <argp_parse@@Base+0x860>
   16a48:	sub	r5, r5, #36	; 0x24
   16a4c:	cmp	r6, r5
   16a50:	movhi	r4, #0
   16a54:	bls	16994 <argp_parse@@Base+0x908>
   16a58:	b	169e0 <argp_parse@@Base+0x954>
   16a5c:	ldr	r3, [fp, #4]
   16a60:	cmp	r3, #0
   16a64:	movne	r4, #0
   16a68:	bne	169ec <argp_parse@@Base+0x960>
   16a6c:	b	167f0 <argp_parse@@Base+0x764>
   16a70:	cmp	r0, #0
   16a74:	bne	166c4 <argp_parse@@Base+0x638>
   16a78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16a7c:	str	r3, [fp, #-84]	; 0xffffffac
   16a80:	ldr	r3, [fp, #-84]	; 0xffffffac
   16a84:	cmp	r8, r3
   16a88:	sublt	r8, r3, r8
   16a8c:	ldrlt	r3, [r5, #-24]	; 0xffffffe8
   16a90:	addlt	r8, r3, r8
   16a94:	strlt	r8, [r5, #-24]	; 0xffffffe8
   16a98:	strge	sl, [fp, #-100]	; 0xffffff9c
   16a9c:	b	16714 <argp_parse@@Base+0x688>
   16aa0:	cmp	r4, #0
   16aa4:	beq	167f0 <argp_parse@@Base+0x764>
   16aa8:	b	16870 <argp_parse@@Base+0x7e4>
   16aac:	muleq	r2, ip, r2
   16ab0:	muleq	r2, r8, r2
   16ab4:	andeq	fp, r2, r0, lsr #5
   16ab8:	andeq	fp, r2, r4, lsr #5
   16abc:	tsteq	r0, r3
   16ac0:	andeq	r9, r1, ip, ror #20
   16ac4:	andeq	fp, r2, r4, ror r3
   16ac8:	andeq	r9, r1, r8, lsl #21
   16acc:	andeq	fp, r2, ip, asr #5
   16ad0:	andeq	r9, r1, r4, lsr #21
   16ad4:			; <UNDEFINED> instruction: 0x00019bbc
   16ad8:			; <UNDEFINED> instruction: 0x00019bb8
   16adc:	tsteq	r0, r6
   16ae0:			; <UNDEFINED> instruction: 0x00019bb4
   16ae4:	andeq	r9, r1, r4, asr #23
   16ae8:	tsteq	r0, r4
   16aec:	tsteq	r0, r5
   16af0:	tsteq	r0, r7
   16af4:	tsteq	r0, r2
   16af8:	tsteq	r0, r1
   16afc:	ldrdeq	r9, [r1], -r0
   16b00:	cmp	r1, #0
   16b04:	beq	16b50 <argp_parse@@Base+0xac4>
   16b08:	ldr	r2, [r1, #52]	; 0x34
   16b0c:	ldr	r3, [r2, #48]	; 0x30
   16b10:	ldr	r1, [r2, #52]	; 0x34
   16b14:	cmp	r3, r1
   16b18:	bcs	16b58 <argp_parse@@Base+0xacc>
   16b1c:	ldr	r2, [r3, #4]
   16b20:	cmp	r0, r2
   16b24:	beq	16b40 <argp_parse@@Base+0xab4>
   16b28:	add	r3, r3, #36	; 0x24
   16b2c:	cmp	r3, r1
   16b30:	bcs	16b48 <argp_parse@@Base+0xabc>
   16b34:	ldr	r2, [r3, #4]
   16b38:	cmp	r2, r0
   16b3c:	bne	16b28 <argp_parse@@Base+0xa9c>
   16b40:	ldr	r0, [r3, #24]
   16b44:	bx	lr
   16b48:	mov	r0, #0
   16b4c:	bx	lr
   16b50:	mov	r0, #0
   16b54:	bx	lr
   16b58:	mov	r0, #0
   16b5c:	bx	lr
   16b60:	push	{lr}		; (str lr, [sp, #-4]!)
   16b64:	sub	sp, sp, #12
   16b68:	ldr	r3, [pc, #28]	; 16b8c <argp_parse@@Base+0xb00>
   16b6c:	ldr	r1, [r3]
   16b70:	ldr	r3, [r3, #4]
   16b74:	str	r3, [sp]
   16b78:	ldr	r3, [pc, #16]	; 16b90 <argp_parse@@Base+0xb04>
   16b7c:	ldr	r2, [pc, #16]	; 16b94 <argp_parse@@Base+0xb08>
   16b80:	bl	17140 <argp_parse@@Base+0x10b4>
   16b84:	add	sp, sp, #12
   16b88:	pop	{pc}		; (ldr pc, [sp], #4)
   16b8c:	ldrdeq	fp, [r2], -r0
   16b90:	andeq	r9, r1, r8, lsr #25
   16b94:			; <UNDEFINED> instruction: 0x00019cb8
   16b98:	ldr	r2, [pc, #20]	; 16bb4 <argp_parse@@Base+0xb28>
   16b9c:	ldr	r3, [pc, #20]	; 16bb8 <argp_parse@@Base+0xb2c>
   16ba0:	str	r2, [r3]
   16ba4:	ldr	r3, [pc, #16]	; 16bbc <argp_parse@@Base+0xb30>
   16ba8:	str	r0, [r3]
   16bac:	str	r1, [r3, #4]
   16bb0:	bx	lr
   16bb4:	andeq	r6, r1, r0, ror #22
   16bb8:	andeq	fp, r2, ip, asr #5
   16bbc:	ldrdeq	fp, [r2], -r0
   16bc0:	ldrb	r3, [r0]
   16bc4:	cmp	r3, #47	; 0x2f
   16bc8:	bne	16bd8 <argp_parse@@Base+0xb4c>
   16bcc:	ldrb	r3, [r0, #1]!
   16bd0:	cmp	r3, #47	; 0x2f
   16bd4:	beq	16bcc <argp_parse@@Base+0xb40>
   16bd8:	ldrb	r2, [r0]
   16bdc:	cmp	r2, #0
   16be0:	bxeq	lr
   16be4:	push	{lr}		; (str lr, [sp, #-4]!)
   16be8:	mov	r1, r0
   16bec:	mov	r3, #0
   16bf0:	mov	lr, #1
   16bf4:	mov	ip, r3
   16bf8:	b	16c08 <argp_parse@@Base+0xb7c>
   16bfc:	ldrb	r2, [r1, #1]!
   16c00:	cmp	r2, #0
   16c04:	beq	16c24 <argp_parse@@Base+0xb98>
   16c08:	cmp	r2, #47	; 0x2f
   16c0c:	moveq	r3, lr
   16c10:	beq	16bfc <argp_parse@@Base+0xb70>
   16c14:	cmp	r3, #0
   16c18:	movne	r0, r1
   16c1c:	movne	r3, ip
   16c20:	b	16bfc <argp_parse@@Base+0xb70>
   16c24:	pop	{pc}		; (ldr pc, [sp], #4)
   16c28:	push	{r4, lr}
   16c2c:	mov	r4, r0
   16c30:	bl	111a8 <strlen@plt>
   16c34:	cmp	r0, #1
   16c38:	popls	{r4, pc}
   16c3c:	sub	r3, r0, #1
   16c40:	add	r2, r4, r3
   16c44:	ldrb	r1, [r4, r3]
   16c48:	cmp	r1, #47	; 0x2f
   16c4c:	popne	{r4, pc}
   16c50:	cmp	r3, #1
   16c54:	beq	16c78 <argp_parse@@Base+0xbec>
   16c58:	sub	r0, r3, #1
   16c5c:	ldrb	r1, [r2, #-1]!
   16c60:	cmp	r1, #47	; 0x2f
   16c64:	beq	16c70 <argp_parse@@Base+0xbe4>
   16c68:	mov	r0, r3
   16c6c:	pop	{r4, pc}
   16c70:	mov	r3, r0
   16c74:	b	16c50 <argp_parse@@Base+0xbc4>
   16c78:	mov	r0, #1
   16c7c:	pop	{r4, pc}
   16c80:	push	{r4, r5, lr}
   16c84:	sub	sp, sp, #12
   16c88:	mov	r5, r0
   16c8c:	bl	111cc <__errno_location@plt>
   16c90:	mov	r4, r0
   16c94:	ldr	r3, [r0]
   16c98:	str	r3, [sp]
   16c9c:	str	r3, [sp, #4]
   16ca0:	mov	r3, #0
   16ca4:	str	r3, [r0]
   16ca8:	mov	r0, r5
   16cac:	bl	11064 <free@plt>
   16cb0:	ldr	r3, [r4]
   16cb4:	cmp	r3, #0
   16cb8:	moveq	r3, #4
   16cbc:	movne	r3, #0
   16cc0:	add	r2, sp, #8
   16cc4:	add	r3, r2, r3
   16cc8:	ldr	r3, [r3, #-8]
   16ccc:	str	r3, [r4]
   16cd0:	add	sp, sp, #12
   16cd4:	pop	{r4, r5, pc}
   16cd8:	push	{lr}		; (str lr, [sp, #-4]!)
   16cdc:	sub	sp, sp, #20
   16ce0:	mov	ip, #0
   16ce4:	str	ip, [sp, #8]
   16ce8:	str	ip, [sp, #4]
   16cec:	ldr	ip, [sp, #24]
   16cf0:	str	ip, [sp]
   16cf4:	bl	18bcc <argp_parse@@Base+0x2b40>
   16cf8:	add	sp, sp, #20
   16cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16d00:	push	{lr}		; (str lr, [sp, #-4]!)
   16d04:	sub	sp, sp, #20
   16d08:	mov	ip, #0
   16d0c:	str	ip, [sp, #12]
   16d10:	ldr	lr, [sp, #28]
   16d14:	str	lr, [sp, #8]
   16d18:	str	ip, [sp, #4]
   16d1c:	ldr	ip, [sp, #24]
   16d20:	str	ip, [sp]
   16d24:	bl	18650 <argp_parse@@Base+0x25c4>
   16d28:	add	sp, sp, #20
   16d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d30:	push	{lr}		; (str lr, [sp, #-4]!)
   16d34:	sub	sp, sp, #20
   16d38:	mov	ip, #0
   16d3c:	str	ip, [sp, #8]
   16d40:	mov	ip, #1
   16d44:	str	ip, [sp, #4]
   16d48:	ldr	ip, [sp, #24]
   16d4c:	str	ip, [sp]
   16d50:	bl	18bcc <argp_parse@@Base+0x2b40>
   16d54:	add	sp, sp, #20
   16d58:	pop	{pc}		; (ldr pc, [sp], #4)
   16d5c:	push	{lr}		; (str lr, [sp, #-4]!)
   16d60:	sub	sp, sp, #20
   16d64:	mov	ip, #0
   16d68:	str	ip, [sp, #12]
   16d6c:	ldr	ip, [sp, #28]
   16d70:	str	ip, [sp, #8]
   16d74:	mov	ip, #1
   16d78:	str	ip, [sp, #4]
   16d7c:	ldr	ip, [sp, #24]
   16d80:	str	ip, [sp]
   16d84:	bl	18650 <argp_parse@@Base+0x25c4>
   16d88:	add	sp, sp, #20
   16d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d90:	push	{r4, r5, r6, lr}
   16d94:	subs	r4, r0, #0
   16d98:	beq	16e10 <argp_parse@@Base+0xd84>
   16d9c:	mov	r1, #47	; 0x2f
   16da0:	mov	r0, r4
   16da4:	bl	11238 <strrchr@plt>
   16da8:	cmp	r0, #0
   16dac:	addne	r5, r0, #1
   16db0:	moveq	r5, r4
   16db4:	sub	r3, r5, r4
   16db8:	cmp	r3, #6
   16dbc:	ble	16dfc <argp_parse@@Base+0xd70>
   16dc0:	mov	r2, #7
   16dc4:	ldr	r1, [pc, #96]	; 16e2c <argp_parse@@Base+0xda0>
   16dc8:	sub	r0, r5, #7
   16dcc:	bl	112b0 <strncmp@plt>
   16dd0:	cmp	r0, #0
   16dd4:	bne	16dfc <argp_parse@@Base+0xd70>
   16dd8:	mov	r2, #3
   16ddc:	ldr	r1, [pc, #76]	; 16e30 <argp_parse@@Base+0xda4>
   16de0:	mov	r0, r5
   16de4:	bl	112b0 <strncmp@plt>
   16de8:	cmp	r0, #0
   16dec:	addeq	r4, r5, #3
   16df0:	ldreq	r3, [pc, #60]	; 16e34 <argp_parse@@Base+0xda8>
   16df4:	streq	r4, [r3]
   16df8:	movne	r4, r5
   16dfc:	ldr	r3, [pc, #52]	; 16e38 <argp_parse@@Base+0xdac>
   16e00:	str	r4, [r3]
   16e04:	ldr	r3, [pc, #48]	; 16e3c <argp_parse@@Base+0xdb0>
   16e08:	str	r4, [r3]
   16e0c:	pop	{r4, r5, r6, pc}
   16e10:	ldr	r3, [pc, #40]	; 16e40 <argp_parse@@Base+0xdb4>
   16e14:	ldr	r3, [r3]
   16e18:	mov	r2, #55	; 0x37
   16e1c:	mov	r1, #1
   16e20:	ldr	r0, [pc, #28]	; 16e44 <argp_parse@@Base+0xdb8>
   16e24:	bl	11100 <fwrite@plt>
   16e28:	bl	112bc <abort@plt>
   16e2c:	andeq	r9, r1, r0, lsl #26
   16e30:	andeq	r9, r1, r8, lsl #26
   16e34:	muleq	r2, r8, r2
   16e38:	ldrdeq	fp, [r2], -r8
   16e3c:	muleq	r2, ip, r2
   16e40:	andeq	fp, r2, r0, lsr #5
   16e44:	andeq	r9, r1, r8, asr #25
   16e48:	push	{r4, r5, r6, lr}
   16e4c:	sub	sp, sp, #32
   16e50:	mov	r4, r0
   16e54:	ldr	r5, [sp, #48]	; 0x30
   16e58:	ldr	r6, [sp, #52]	; 0x34
   16e5c:	cmp	r1, #0
   16e60:	beq	16ee8 <argp_parse@@Base+0xe5c>
   16e64:	str	r3, [sp]
   16e68:	mov	r3, r2
   16e6c:	mov	r2, r1
   16e70:	ldr	r1, [pc, #644]	; 170fc <argp_parse@@Base+0x1070>
   16e74:	bl	111c0 <fprintf@plt>
   16e78:	ldr	r3, [pc, #640]	; 17100 <argp_parse@@Base+0x1074>
   16e7c:	ldr	r2, [pc, #640]	; 17104 <argp_parse@@Base+0x1078>
   16e80:	ldr	r1, [pc, #640]	; 17108 <argp_parse@@Base+0x107c>
   16e84:	mov	r0, r4
   16e88:	bl	111c0 <fprintf@plt>
   16e8c:	mov	r1, r4
   16e90:	mov	r0, #10
   16e94:	bl	11250 <fputc@plt>
   16e98:	ldr	r2, [pc, #620]	; 1710c <argp_parse@@Base+0x1080>
   16e9c:	ldr	r1, [pc, #620]	; 17110 <argp_parse@@Base+0x1084>
   16ea0:	mov	r0, r4
   16ea4:	bl	111c0 <fprintf@plt>
   16ea8:	mov	r1, r4
   16eac:	mov	r0, #10
   16eb0:	bl	11250 <fputc@plt>
   16eb4:	cmp	r6, #9
   16eb8:	ldrls	pc, [pc, r6, lsl #2]
   16ebc:	b	170ac <argp_parse@@Base+0x1020>
   16ec0:	andeq	r6, r1, r4, lsl #30
   16ec4:	strdeq	r6, [r1], -r4
   16ec8:	andeq	r6, r1, ip, lsl #30
   16ecc:	andeq	r6, r1, r4, lsr #30
   16ed0:	andeq	r6, r1, r4, asr #30
   16ed4:	andeq	r6, r1, ip, ror #30
   16ed8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16edc:	ldrdeq	r6, [r1], -r4
   16ee0:	andeq	r7, r1, r4, lsl r0
   16ee4:	andeq	r7, r1, ip, asr r0
   16ee8:	ldr	r1, [pc, #548]	; 17114 <argp_parse@@Base+0x1088>
   16eec:	bl	111c0 <fprintf@plt>
   16ef0:	b	16e78 <argp_parse@@Base+0xdec>
   16ef4:	ldr	r2, [r5]
   16ef8:	ldr	r1, [pc, #536]	; 17118 <argp_parse@@Base+0x108c>
   16efc:	mov	r0, r4
   16f00:	bl	111c0 <fprintf@plt>
   16f04:	add	sp, sp, #32
   16f08:	pop	{r4, r5, r6, pc}
   16f0c:	ldr	r3, [r5, #4]
   16f10:	ldr	r2, [r5]
   16f14:	ldr	r1, [pc, #512]	; 1711c <argp_parse@@Base+0x1090>
   16f18:	mov	r0, r4
   16f1c:	bl	111c0 <fprintf@plt>
   16f20:	b	16f04 <argp_parse@@Base+0xe78>
   16f24:	ldr	r3, [r5, #4]
   16f28:	ldr	r2, [r5]
   16f2c:	ldr	r1, [r5, #8]
   16f30:	str	r1, [sp]
   16f34:	ldr	r1, [pc, #484]	; 17120 <argp_parse@@Base+0x1094>
   16f38:	mov	r0, r4
   16f3c:	bl	111c0 <fprintf@plt>
   16f40:	b	16f04 <argp_parse@@Base+0xe78>
   16f44:	ldr	r3, [r5, #4]
   16f48:	ldr	r2, [r5]
   16f4c:	ldr	r1, [r5, #12]
   16f50:	str	r1, [sp, #4]
   16f54:	ldr	r1, [r5, #8]
   16f58:	str	r1, [sp]
   16f5c:	ldr	r1, [pc, #448]	; 17124 <argp_parse@@Base+0x1098>
   16f60:	mov	r0, r4
   16f64:	bl	111c0 <fprintf@plt>
   16f68:	b	16f04 <argp_parse@@Base+0xe78>
   16f6c:	ldr	r3, [r5, #4]
   16f70:	ldr	r2, [r5]
   16f74:	ldr	r1, [r5, #16]
   16f78:	str	r1, [sp, #8]
   16f7c:	ldr	r1, [r5, #12]
   16f80:	str	r1, [sp, #4]
   16f84:	ldr	r1, [r5, #8]
   16f88:	str	r1, [sp]
   16f8c:	ldr	r1, [pc, #404]	; 17128 <argp_parse@@Base+0x109c>
   16f90:	mov	r0, r4
   16f94:	bl	111c0 <fprintf@plt>
   16f98:	b	16f04 <argp_parse@@Base+0xe78>
   16f9c:	ldr	r3, [r5, #4]
   16fa0:	ldr	r2, [r5]
   16fa4:	ldr	r1, [r5, #20]
   16fa8:	str	r1, [sp, #12]
   16fac:	ldr	r1, [r5, #16]
   16fb0:	str	r1, [sp, #8]
   16fb4:	ldr	r1, [r5, #12]
   16fb8:	str	r1, [sp, #4]
   16fbc:	ldr	r1, [r5, #8]
   16fc0:	str	r1, [sp]
   16fc4:	ldr	r1, [pc, #352]	; 1712c <argp_parse@@Base+0x10a0>
   16fc8:	mov	r0, r4
   16fcc:	bl	111c0 <fprintf@plt>
   16fd0:	b	16f04 <argp_parse@@Base+0xe78>
   16fd4:	ldr	r3, [r5, #4]
   16fd8:	ldr	r2, [r5]
   16fdc:	ldr	r1, [r5, #24]
   16fe0:	str	r1, [sp, #16]
   16fe4:	ldr	r1, [r5, #20]
   16fe8:	str	r1, [sp, #12]
   16fec:	ldr	r1, [r5, #16]
   16ff0:	str	r1, [sp, #8]
   16ff4:	ldr	r1, [r5, #12]
   16ff8:	str	r1, [sp, #4]
   16ffc:	ldr	r1, [r5, #8]
   17000:	str	r1, [sp]
   17004:	ldr	r1, [pc, #292]	; 17130 <argp_parse@@Base+0x10a4>
   17008:	mov	r0, r4
   1700c:	bl	111c0 <fprintf@plt>
   17010:	b	16f04 <argp_parse@@Base+0xe78>
   17014:	ldr	r3, [r5, #4]
   17018:	ldr	r2, [r5]
   1701c:	ldr	r1, [r5, #28]
   17020:	str	r1, [sp, #20]
   17024:	ldr	r1, [r5, #24]
   17028:	str	r1, [sp, #16]
   1702c:	ldr	r1, [r5, #20]
   17030:	str	r1, [sp, #12]
   17034:	ldr	r1, [r5, #16]
   17038:	str	r1, [sp, #8]
   1703c:	ldr	r1, [r5, #12]
   17040:	str	r1, [sp, #4]
   17044:	ldr	r1, [r5, #8]
   17048:	str	r1, [sp]
   1704c:	ldr	r1, [pc, #224]	; 17134 <argp_parse@@Base+0x10a8>
   17050:	mov	r0, r4
   17054:	bl	111c0 <fprintf@plt>
   17058:	b	16f04 <argp_parse@@Base+0xe78>
   1705c:	ldr	r3, [r5, #4]
   17060:	ldr	r2, [r5]
   17064:	ldr	r1, [r5, #32]
   17068:	str	r1, [sp, #24]
   1706c:	ldr	r1, [r5, #28]
   17070:	str	r1, [sp, #20]
   17074:	ldr	r1, [r5, #24]
   17078:	str	r1, [sp, #16]
   1707c:	ldr	r1, [r5, #20]
   17080:	str	r1, [sp, #12]
   17084:	ldr	r1, [r5, #16]
   17088:	str	r1, [sp, #8]
   1708c:	ldr	r1, [r5, #12]
   17090:	str	r1, [sp, #4]
   17094:	ldr	r1, [r5, #8]
   17098:	str	r1, [sp]
   1709c:	ldr	r1, [pc, #148]	; 17138 <argp_parse@@Base+0x10ac>
   170a0:	mov	r0, r4
   170a4:	bl	111c0 <fprintf@plt>
   170a8:	b	16f04 <argp_parse@@Base+0xe78>
   170ac:	ldr	r3, [r5, #4]
   170b0:	ldr	r2, [r5]
   170b4:	ldr	r1, [r5, #32]
   170b8:	str	r1, [sp, #24]
   170bc:	ldr	r1, [r5, #28]
   170c0:	str	r1, [sp, #20]
   170c4:	ldr	r1, [r5, #24]
   170c8:	str	r1, [sp, #16]
   170cc:	ldr	r1, [r5, #20]
   170d0:	str	r1, [sp, #12]
   170d4:	ldr	r1, [r5, #16]
   170d8:	str	r1, [sp, #8]
   170dc:	ldr	r1, [r5, #12]
   170e0:	str	r1, [sp, #4]
   170e4:	ldr	r1, [r5, #8]
   170e8:	str	r1, [sp]
   170ec:	ldr	r1, [pc, #72]	; 1713c <argp_parse@@Base+0x10b0>
   170f0:	mov	r0, r4
   170f4:	bl	111c0 <fprintf@plt>
   170f8:	b	16f04 <argp_parse@@Base+0xe78>
   170fc:	andeq	r9, r1, ip, lsl #26
   17100:	andeq	r0, r0, r6, ror #15
   17104:	andeq	r9, r1, r0, lsr #26
   17108:	andeq	sl, r1, r0, lsr #32
   1710c:	andeq	r9, r1, r4, lsr #26
   17110:	andeq	r9, r1, r8, asr #26
   17114:	andeq	r9, r1, r8, lsl sp
   17118:	strdeq	r9, [r1], -r4
   1711c:	andeq	r9, r1, r4, lsl #28
   17120:	andeq	r9, r1, ip, lsl lr
   17124:	andeq	r9, r1, r8, lsr lr
   17128:	andeq	r9, r1, r8, asr lr
   1712c:	andeq	r9, r1, ip, ror lr
   17130:	andeq	r9, r1, r4, lsr #29
   17134:	ldrdeq	r9, [r1], -r0
   17138:	andeq	r9, r1, r0, lsl #30
   1713c:	andeq	r9, r1, r4, lsr pc
   17140:	push	{r4, r5, lr}
   17144:	sub	sp, sp, #12
   17148:	ldr	r5, [sp, #24]
   1714c:	ldr	ip, [r5]
   17150:	cmp	ip, #0
   17154:	beq	17184 <argp_parse@@Base+0x10f8>
   17158:	mov	lr, r5
   1715c:	mov	ip, #0
   17160:	add	ip, ip, #1
   17164:	ldr	r4, [lr, #4]!
   17168:	cmp	r4, #0
   1716c:	bne	17160 <argp_parse@@Base+0x10d4>
   17170:	str	ip, [sp, #4]
   17174:	str	r5, [sp]
   17178:	bl	16e48 <argp_parse@@Base+0xdbc>
   1717c:	add	sp, sp, #12
   17180:	pop	{r4, r5, pc}
   17184:	mov	ip, #0
   17188:	b	17170 <argp_parse@@Base+0x10e4>
   1718c:	push	{r4, r5, lr}
   17190:	sub	sp, sp, #52	; 0x34
   17194:	ldr	r4, [sp, #64]	; 0x40
   17198:	sub	r4, r4, #4
   1719c:	add	r5, sp, #4
   171a0:	mov	ip, #0
   171a4:	ldr	lr, [r4, #4]!
   171a8:	str	lr, [r5, #4]!
   171ac:	cmp	lr, #0
   171b0:	beq	171c0 <argp_parse@@Base+0x1134>
   171b4:	add	ip, ip, #1
   171b8:	cmp	ip, #10
   171bc:	bne	171a4 <argp_parse@@Base+0x1118>
   171c0:	str	ip, [sp, #4]
   171c4:	add	ip, sp, #8
   171c8:	str	ip, [sp]
   171cc:	bl	16e48 <argp_parse@@Base+0xdbc>
   171d0:	add	sp, sp, #52	; 0x34
   171d4:	pop	{r4, r5, pc}
   171d8:	push	{r3}		; (str r3, [sp, #-4]!)
   171dc:	push	{lr}		; (str lr, [sp, #-4]!)
   171e0:	sub	sp, sp, #16
   171e4:	add	r3, sp, #24
   171e8:	str	r3, [sp, #12]
   171ec:	str	r3, [sp]
   171f0:	ldr	r3, [sp, #20]
   171f4:	bl	1718c <argp_parse@@Base+0x1100>
   171f8:	add	sp, sp, #16
   171fc:	pop	{lr}		; (ldr lr, [sp], #4)
   17200:	add	sp, sp, #4
   17204:	bx	lr
   17208:	push	{r4, lr}
   1720c:	ldr	r3, [pc, #52]	; 17248 <argp_parse@@Base+0x11bc>
   17210:	ldr	r1, [r3]
   17214:	mov	r0, #10
   17218:	bl	11250 <fputc@plt>
   1721c:	ldr	r1, [pc, #40]	; 1724c <argp_parse@@Base+0x11c0>
   17220:	ldr	r0, [pc, #40]	; 17250 <argp_parse@@Base+0x11c4>
   17224:	bl	11028 <printf@plt>
   17228:	ldr	r2, [pc, #36]	; 17254 <argp_parse@@Base+0x11c8>
   1722c:	ldr	r1, [pc, #36]	; 17258 <argp_parse@@Base+0x11cc>
   17230:	ldr	r0, [pc, #36]	; 1725c <argp_parse@@Base+0x11d0>
   17234:	bl	11028 <printf@plt>
   17238:	ldr	r1, [pc, #32]	; 17260 <argp_parse@@Base+0x11d4>
   1723c:	ldr	r0, [pc, #32]	; 17264 <argp_parse@@Base+0x11d8>
   17240:	bl	11028 <printf@plt>
   17244:	pop	{r4, pc}
   17248:	andeq	fp, r2, r4, lsr #5
   1724c:	andeq	r9, r1, r0, ror pc
   17250:	andeq	r9, r1, r8, lsl #31
   17254:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17258:			; <UNDEFINED> instruction: 0x00019cb8
   1725c:	andeq	r9, r1, r4, asr #31
   17260:	ldrdeq	r9, [r1], -r8
   17264:	strdeq	r9, [r1], -r8
   17268:	push	{r4, lr}
   1726c:	bl	17888 <argp_parse@@Base+0x17fc>
   17270:	cmp	r0, #0
   17274:	popne	{r4, pc}
   17278:	bl	1780c <argp_parse@@Base+0x1780>
   1727c:	push	{r4, lr}
   17280:	bl	17888 <argp_parse@@Base+0x17fc>
   17284:	cmp	r0, #0
   17288:	popne	{r4, pc}
   1728c:	bl	1780c <argp_parse@@Base+0x1780>
   17290:	push	{r4, lr}
   17294:	bl	17268 <argp_parse@@Base+0x11dc>
   17298:	pop	{r4, pc}
   1729c:	push	{r4, r5, r6, lr}
   172a0:	mov	r5, r0
   172a4:	mov	r4, r1
   172a8:	bl	178b8 <argp_parse@@Base+0x182c>
   172ac:	cmp	r0, #0
   172b0:	popne	{r4, r5, r6, pc}
   172b4:	adds	r4, r4, #0
   172b8:	movne	r4, #1
   172bc:	cmp	r5, #0
   172c0:	orreq	r4, r4, #1
   172c4:	cmp	r4, #0
   172c8:	popeq	{r4, r5, r6, pc}
   172cc:	bl	1780c <argp_parse@@Base+0x1780>
   172d0:	push	{r4, lr}
   172d4:	cmp	r1, #0
   172d8:	orreq	r1, r1, #1
   172dc:	bl	178b8 <argp_parse@@Base+0x182c>
   172e0:	cmp	r0, #0
   172e4:	popne	{r4, pc}
   172e8:	bl	1780c <argp_parse@@Base+0x1780>
   172ec:	push	{r4, r5, r6, lr}
   172f0:	mov	r6, r0
   172f4:	mov	r5, r1
   172f8:	mov	r4, r2
   172fc:	bl	18c64 <argp_parse@@Base+0x2bd8>
   17300:	cmp	r0, #0
   17304:	popne	{r4, r5, r6, pc}
   17308:	cmp	r6, #0
   1730c:	beq	1731c <argp_parse@@Base+0x1290>
   17310:	cmp	r5, #0
   17314:	cmpne	r4, #0
   17318:	popeq	{r4, r5, r6, pc}
   1731c:	bl	1780c <argp_parse@@Base+0x1780>
   17320:	push	{r4, lr}
   17324:	bl	172ec <argp_parse@@Base+0x1260>
   17328:	pop	{r4, pc}
   1732c:	push	{r4, lr}
   17330:	mov	ip, r1
   17334:	mov	r3, r2
   17338:	cmp	r2, #0
   1733c:	cmpne	r1, #0
   17340:	moveq	r3, #1
   17344:	moveq	ip, r3
   17348:	mov	r2, r3
   1734c:	mov	r1, ip
   17350:	bl	18c64 <argp_parse@@Base+0x2bd8>
   17354:	cmp	r0, #0
   17358:	popne	{r4, pc}
   1735c:	bl	1780c <argp_parse@@Base+0x1780>
   17360:	push	{r4, lr}
   17364:	mov	r2, r1
   17368:	mov	r1, r0
   1736c:	mov	r0, #0
   17370:	bl	172ec <argp_parse@@Base+0x1260>
   17374:	pop	{r4, pc}
   17378:	push	{r4, lr}
   1737c:	mov	r2, r1
   17380:	mov	r1, r0
   17384:	mov	r0, #0
   17388:	bl	1732c <argp_parse@@Base+0x12a0>
   1738c:	pop	{r4, pc}
   17390:	push	{r4, r5, r6, r7, r8, lr}
   17394:	mov	r5, r1
   17398:	mov	r6, r2
   1739c:	ldr	r4, [r1]
   173a0:	subs	r7, r0, #0
   173a4:	beq	173c0 <argp_parse@@Base+0x1334>
   173a8:	lsr	r2, r4, #1
   173ac:	add	r3, r2, #1
   173b0:	mvn	r3, r3
   173b4:	cmp	r4, r3
   173b8:	bls	173e4 <argp_parse@@Base+0x1358>
   173bc:	bl	1780c <argp_parse@@Base+0x1780>
   173c0:	cmp	r4, #0
   173c4:	bne	173ec <argp_parse@@Base+0x1360>
   173c8:	mov	r1, r2
   173cc:	mov	r0, #64	; 0x40
   173d0:	bl	18cb0 <argp_parse@@Base+0x2c24>
   173d4:	cmp	r0, #0
   173d8:	movne	r4, r0
   173dc:	addeq	r4, r0, #1
   173e0:	b	173ec <argp_parse@@Base+0x1360>
   173e4:	add	r4, r4, #1
   173e8:	add	r4, r4, r2
   173ec:	mov	r2, r6
   173f0:	mov	r1, r4
   173f4:	mov	r0, r7
   173f8:	bl	172ec <argp_parse@@Base+0x1260>
   173fc:	str	r4, [r5]
   17400:	pop	{r4, r5, r6, r7, r8, pc}
   17404:	push	{r4, lr}
   17408:	mov	r2, #1
   1740c:	bl	17390 <argp_parse@@Base+0x1304>
   17410:	pop	{r4, pc}
   17414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17418:	sub	sp, sp, #12
   1741c:	mov	fp, r0
   17420:	mov	sl, r1
   17424:	mov	r9, r2
   17428:	mov	r7, r3
   1742c:	ldr	r6, [sp, #48]	; 0x30
   17430:	ldr	r5, [r1]
   17434:	asrs	r4, r5, #1
   17438:	bmi	17594 <argp_parse@@Base+0x1508>
   1743c:	cmp	r5, #0
   17440:	blt	175a8 <argp_parse@@Base+0x151c>
   17444:	mvn	r3, #-2147483648	; 0x80000000
   17448:	sub	r3, r3, r4
   1744c:	cmp	r5, r3
   17450:	movle	r3, #0
   17454:	movgt	r3, #1
   17458:	cmp	r3, #0
   1745c:	addeq	r4, r4, r5
   17460:	mvnne	r4, #-2147483648	; 0x80000000
   17464:	mvn	r8, r7
   17468:	lsr	r8, r8, #31
   1746c:	cmp	r7, r4
   17470:	movge	r3, #0
   17474:	andlt	r3, r8, #1
   17478:	cmp	r3, #0
   1747c:	movne	r4, r7
   17480:	cmp	r6, #0
   17484:	blt	175bc <argp_parse@@Base+0x1530>
   17488:	cmp	r6, #0
   1748c:	beq	17668 <argp_parse@@Base+0x15dc>
   17490:	cmp	r4, #0
   17494:	blt	17618 <argp_parse@@Base+0x158c>
   17498:	mov	r1, r6
   1749c:	mvn	r0, #-2147483648	; 0x80000000
   174a0:	bl	18ebc <argp_parse@@Base+0x2e30>
   174a4:	cmp	r0, r4
   174a8:	movge	r0, #0
   174ac:	movlt	r0, #1
   174b0:	cmp	r0, #0
   174b4:	mvnne	r3, #-2147483648	; 0x80000000
   174b8:	strne	r3, [sp, #4]
   174bc:	beq	17650 <argp_parse@@Base+0x15c4>
   174c0:	mov	r1, r6
   174c4:	ldr	r0, [sp, #4]
   174c8:	bl	18ebc <argp_parse@@Base+0x2e30>
   174cc:	mov	r4, r0
   174d0:	mov	r1, r6
   174d4:	ldr	r0, [sp, #4]
   174d8:	bl	190dc <argp_parse@@Base+0x3050>
   174dc:	ldr	r3, [sp, #4]
   174e0:	sub	r1, r3, r1
   174e4:	cmp	fp, #0
   174e8:	moveq	r3, #0
   174ec:	streq	r3, [sl]
   174f0:	sub	r3, r4, r5
   174f4:	cmp	r3, r9
   174f8:	bge	17580 <argp_parse@@Base+0x14f4>
   174fc:	cmp	r9, #0
   17500:	blt	17674 <argp_parse@@Base+0x15e8>
   17504:	cmp	r5, #0
   17508:	blt	17688 <argp_parse@@Base+0x15fc>
   1750c:	mvn	r3, #-2147483648	; 0x80000000
   17510:	sub	r3, r3, r9
   17514:	cmp	r5, r3
   17518:	movle	r3, #0
   1751c:	movgt	r3, #1
   17520:	cmp	r3, #0
   17524:	bne	17730 <argp_parse@@Base+0x16a4>
   17528:	add	r5, r5, r9
   1752c:	mov	r4, r5
   17530:	cmp	r7, r5
   17534:	movge	r7, #0
   17538:	andlt	r7, r8, #1
   1753c:	cmp	r7, #0
   17540:	bne	17730 <argp_parse@@Base+0x16a4>
   17544:	cmp	r6, #0
   17548:	blt	1769c <argp_parse@@Base+0x1610>
   1754c:	cmp	r6, #0
   17550:	beq	1757c <argp_parse@@Base+0x14f0>
   17554:	cmp	r5, #0
   17558:	blt	176f8 <argp_parse@@Base+0x166c>
   1755c:	mov	r1, r6
   17560:	mvn	r0, #-2147483648	; 0x80000000
   17564:	bl	18ebc <argp_parse@@Base+0x2e30>
   17568:	cmp	r5, r0
   1756c:	movle	r0, #0
   17570:	movgt	r0, #1
   17574:	cmp	r0, #0
   17578:	bne	17730 <argp_parse@@Base+0x16a4>
   1757c:	mul	r1, r5, r6
   17580:	mov	r0, fp
   17584:	bl	1729c <argp_parse@@Base+0x1210>
   17588:	str	r4, [sl]
   1758c:	add	sp, sp, #12
   17590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17594:	rsb	r3, r4, #-2147483648	; 0x80000000
   17598:	cmp	r5, r3
   1759c:	movge	r3, #0
   175a0:	movlt	r3, #1
   175a4:	b	17458 <argp_parse@@Base+0x13cc>
   175a8:	rsb	r3, r5, #-2147483648	; 0x80000000
   175ac:	cmp	r4, r3
   175b0:	movge	r3, #0
   175b4:	movlt	r3, #1
   175b8:	b	17458 <argp_parse@@Base+0x13cc>
   175bc:	cmp	r4, #0
   175c0:	blt	175e8 <argp_parse@@Base+0x155c>
   175c4:	cmn	r6, #1
   175c8:	beq	17604 <argp_parse@@Base+0x1578>
   175cc:	mov	r1, r6
   175d0:	mov	r0, #-2147483648	; 0x80000000
   175d4:	bl	18ebc <argp_parse@@Base+0x2e30>
   175d8:	cmp	r0, r4
   175dc:	movge	r0, #0
   175e0:	movlt	r0, #1
   175e4:	b	174b0 <argp_parse@@Base+0x1424>
   175e8:	mov	r1, r6
   175ec:	mvn	r0, #-2147483648	; 0x80000000
   175f0:	bl	18ebc <argp_parse@@Base+0x2e30>
   175f4:	cmp	r0, r4
   175f8:	movle	r0, #0
   175fc:	movgt	r0, #1
   17600:	b	174b0 <argp_parse@@Base+0x1424>
   17604:	add	r0, r4, #-2147483648	; 0x80000000
   17608:	cmp	r0, #0
   1760c:	movle	r0, #0
   17610:	movgt	r0, #1
   17614:	b	174b0 <argp_parse@@Base+0x1424>
   17618:	cmn	r4, #1
   1761c:	beq	1763c <argp_parse@@Base+0x15b0>
   17620:	mov	r1, r4
   17624:	mov	r0, #-2147483648	; 0x80000000
   17628:	bl	18ebc <argp_parse@@Base+0x2e30>
   1762c:	cmp	r6, r0
   17630:	movle	r0, #0
   17634:	movgt	r0, #1
   17638:	b	174b0 <argp_parse@@Base+0x1424>
   1763c:	add	r0, r6, #-2147483648	; 0x80000000
   17640:	cmp	r0, #0
   17644:	movle	r0, #0
   17648:	movgt	r0, #1
   1764c:	b	174b0 <argp_parse@@Base+0x1424>
   17650:	mul	r1, r6, r4
   17654:	cmp	r1, #63	; 0x3f
   17658:	movle	r3, #64	; 0x40
   1765c:	strle	r3, [sp, #4]
   17660:	bgt	174e4 <argp_parse@@Base+0x1458>
   17664:	b	174c0 <argp_parse@@Base+0x1434>
   17668:	mov	r3, #64	; 0x40
   1766c:	str	r3, [sp, #4]
   17670:	b	174c0 <argp_parse@@Base+0x1434>
   17674:	rsb	r3, r9, #-2147483648	; 0x80000000
   17678:	cmp	r5, r3
   1767c:	movge	r3, #0
   17680:	movlt	r3, #1
   17684:	b	17520 <argp_parse@@Base+0x1494>
   17688:	rsb	r3, r5, #-2147483648	; 0x80000000
   1768c:	cmp	r9, r3
   17690:	movge	r3, #0
   17694:	movlt	r3, #1
   17698:	b	17520 <argp_parse@@Base+0x1494>
   1769c:	cmp	r5, #0
   176a0:	blt	176c8 <argp_parse@@Base+0x163c>
   176a4:	cmn	r6, #1
   176a8:	beq	176e4 <argp_parse@@Base+0x1658>
   176ac:	mov	r1, r6
   176b0:	mov	r0, #-2147483648	; 0x80000000
   176b4:	bl	18ebc <argp_parse@@Base+0x2e30>
   176b8:	cmp	r5, r0
   176bc:	movle	r0, #0
   176c0:	movgt	r0, #1
   176c4:	b	17574 <argp_parse@@Base+0x14e8>
   176c8:	mov	r1, r6
   176cc:	mvn	r0, #-2147483648	; 0x80000000
   176d0:	bl	18ebc <argp_parse@@Base+0x2e30>
   176d4:	cmp	r5, r0
   176d8:	movge	r0, #0
   176dc:	movlt	r0, #1
   176e0:	b	17574 <argp_parse@@Base+0x14e8>
   176e4:	add	r0, r5, #-2147483648	; 0x80000000
   176e8:	cmp	r0, #0
   176ec:	movle	r0, #0
   176f0:	movgt	r0, #1
   176f4:	b	17574 <argp_parse@@Base+0x14e8>
   176f8:	cmn	r5, #1
   176fc:	beq	1771c <argp_parse@@Base+0x1690>
   17700:	mov	r1, r5
   17704:	mov	r0, #-2147483648	; 0x80000000
   17708:	bl	18ebc <argp_parse@@Base+0x2e30>
   1770c:	cmp	r6, r0
   17710:	movle	r0, #0
   17714:	movgt	r0, #1
   17718:	b	17574 <argp_parse@@Base+0x14e8>
   1771c:	add	r0, r6, #-2147483648	; 0x80000000
   17720:	cmp	r0, #0
   17724:	movle	r0, #0
   17728:	movgt	r0, #1
   1772c:	b	17574 <argp_parse@@Base+0x14e8>
   17730:	bl	1780c <argp_parse@@Base+0x1780>
   17734:	push	{r4, lr}
   17738:	bl	17838 <argp_parse@@Base+0x17ac>
   1773c:	cmp	r0, #0
   17740:	popne	{r4, pc}
   17744:	bl	1780c <argp_parse@@Base+0x1780>
   17748:	push	{r4, lr}
   1774c:	mov	r1, #1
   17750:	bl	17734 <argp_parse@@Base+0x16a8>
   17754:	pop	{r4, pc}
   17758:	push	{r4, lr}
   1775c:	bl	17838 <argp_parse@@Base+0x17ac>
   17760:	cmp	r0, #0
   17764:	popne	{r4, pc}
   17768:	bl	1780c <argp_parse@@Base+0x1780>
   1776c:	push	{r4, lr}
   17770:	mov	r1, #1
   17774:	bl	17758 <argp_parse@@Base+0x16cc>
   17778:	pop	{r4, pc}
   1777c:	push	{r4, r5, r6, lr}
   17780:	mov	r5, r0
   17784:	mov	r4, r1
   17788:	mov	r0, r1
   1778c:	bl	17268 <argp_parse@@Base+0x11dc>
   17790:	mov	r2, r4
   17794:	mov	r1, r5
   17798:	bl	11088 <memcpy@plt>
   1779c:	pop	{r4, r5, r6, pc}
   177a0:	push	{r4, r5, r6, lr}
   177a4:	mov	r5, r0
   177a8:	mov	r4, r1
   177ac:	mov	r0, r1
   177b0:	bl	1727c <argp_parse@@Base+0x11f0>
   177b4:	mov	r2, r4
   177b8:	mov	r1, r5
   177bc:	bl	11088 <memcpy@plt>
   177c0:	pop	{r4, r5, r6, pc}
   177c4:	push	{r4, r5, r6, lr}
   177c8:	mov	r5, r0
   177cc:	mov	r4, r1
   177d0:	add	r0, r1, #1
   177d4:	bl	1727c <argp_parse@@Base+0x11f0>
   177d8:	mov	r2, #0
   177dc:	strb	r2, [r0, r4]
   177e0:	mov	r2, r4
   177e4:	mov	r1, r5
   177e8:	bl	11088 <memcpy@plt>
   177ec:	pop	{r4, r5, r6, pc}
   177f0:	push	{r4, lr}
   177f4:	mov	r4, r0
   177f8:	bl	111a8 <strlen@plt>
   177fc:	add	r1, r0, #1
   17800:	mov	r0, r4
   17804:	bl	1777c <argp_parse@@Base+0x16f0>
   17808:	pop	{r4, pc}
   1780c:	push	{r4, lr}
   17810:	ldr	r3, [pc, #20]	; 1782c <argp_parse@@Base+0x17a0>
   17814:	ldr	r0, [r3]
   17818:	ldr	r3, [pc, #16]	; 17830 <argp_parse@@Base+0x17a4>
   1781c:	ldr	r2, [pc, #16]	; 17834 <argp_parse@@Base+0x17a8>
   17820:	mov	r1, #0
   17824:	bl	11124 <error@plt>
   17828:	bl	112bc <abort@plt>
   1782c:	andeq	fp, r2, r4, lsl #5
   17830:	andeq	sl, r1, r0, asr r0
   17834:	andeq	r9, r1, r8, lsr #23
   17838:	push	{r4, lr}
   1783c:	mov	r2, r0
   17840:	mov	r3, r1
   17844:	cmp	r1, #0
   17848:	cmpne	r0, #0
   1784c:	moveq	r3, #1
   17850:	moveq	r2, r3
   17854:	umull	r0, r1, r2, r3
   17858:	cmp	r0, #0
   1785c:	cmpge	r1, #0
   17860:	bne	17874 <argp_parse@@Base+0x17e8>
   17864:	mov	r1, r3
   17868:	mov	r0, r2
   1786c:	bl	10fe0 <calloc@plt>
   17870:	pop	{r4, pc}
   17874:	bl	111cc <__errno_location@plt>
   17878:	mov	r3, #12
   1787c:	str	r3, [r0]
   17880:	mov	r0, #0
   17884:	pop	{r4, pc}
   17888:	push	{r4, lr}
   1788c:	cmp	r0, #0
   17890:	moveq	r0, #1
   17894:	cmp	r0, #0
   17898:	blt	178a4 <argp_parse@@Base+0x1818>
   1789c:	bl	1113c <malloc@plt>
   178a0:	pop	{r4, pc}
   178a4:	bl	111cc <__errno_location@plt>
   178a8:	mov	r3, #12
   178ac:	str	r3, [r0]
   178b0:	mov	r0, #0
   178b4:	pop	{r4, pc}
   178b8:	push	{r4, lr}
   178bc:	cmp	r0, #0
   178c0:	beq	178dc <argp_parse@@Base+0x1850>
   178c4:	cmp	r1, #0
   178c8:	beq	178e8 <argp_parse@@Base+0x185c>
   178cc:	cmp	r1, #0
   178d0:	blt	178f4 <argp_parse@@Base+0x1868>
   178d4:	bl	110dc <realloc@plt>
   178d8:	pop	{r4, pc}
   178dc:	mov	r0, r1
   178e0:	bl	17888 <argp_parse@@Base+0x17fc>
   178e4:	pop	{r4, pc}
   178e8:	bl	16c80 <argp_parse@@Base+0xbf4>
   178ec:	mov	r0, #0
   178f0:	pop	{r4, pc}
   178f4:	bl	111cc <__errno_location@plt>
   178f8:	mov	r3, #12
   178fc:	str	r3, [r0]
   17900:	mov	r0, #0
   17904:	pop	{r4, pc}
   17908:	push	{r4, r5, r6, r7, r8, lr}
   1790c:	mov	r8, r0
   17910:	mov	r7, r1
   17914:	mov	r6, r2
   17918:	mov	r5, r3
   1791c:	mov	r0, #36	; 0x24
   17920:	bl	17888 <argp_parse@@Base+0x17fc>
   17924:	subs	r4, r0, #0
   17928:	beq	17968 <argp_parse@@Base+0x18dc>
   1792c:	str	r8, [r4]
   17930:	str	r7, [r4, #4]
   17934:	str	r6, [r4, #8]
   17938:	str	r5, [r4, #12]
   1793c:	mov	r3, #0
   17940:	str	r3, [r4, #20]
   17944:	str	r3, [r4, #16]
   17948:	mov	r0, #200	; 0xc8
   1794c:	bl	17888 <argp_parse@@Base+0x17fc>
   17950:	str	r0, [r4, #24]
   17954:	cmp	r0, #0
   17958:	strne	r0, [r4, #28]
   1795c:	addne	r0, r0, #200	; 0xc8
   17960:	strne	r0, [r4, #32]
   17964:	beq	17970 <argp_parse@@Base+0x18e4>
   17968:	mov	r0, r4
   1796c:	pop	{r4, r5, r6, r7, r8, pc}
   17970:	mov	r0, r4
   17974:	bl	16c80 <argp_parse@@Base+0xbf4>
   17978:	mov	r4, #0
   1797c:	b	17968 <argp_parse@@Base+0x18dc>
   17980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17984:	sub	sp, sp, #20
   17988:	mov	r4, r0
   1798c:	ldr	r2, [r0, #24]
   17990:	ldr	r3, [r0, #16]
   17994:	add	r9, r2, r3
   17998:	mov	sl, #32
   1799c:	b	17a48 <argp_parse@@Base+0x19bc>
   179a0:	add	r5, r5, #1
   179a4:	cmp	r6, r5
   179a8:	beq	179d8 <argp_parse@@Base+0x194c>
   179ac:	ldr	r0, [r4]
   179b0:	ldr	r3, [r0, #20]
   179b4:	ldr	r2, [r0, #24]
   179b8:	cmp	r3, r2
   179bc:	addcc	r2, r3, #1
   179c0:	strcc	r2, [r0, #20]
   179c4:	strbcc	sl, [r3]
   179c8:	bcc	179a0 <argp_parse@@Base+0x1914>
   179cc:	mov	r1, sl
   179d0:	bl	11214 <__overflow@plt>
   179d4:	b	179a0 <argp_parse@@Base+0x1914>
   179d8:	str	r6, [r4, #20]
   179dc:	ldr	fp, [r4, #28]
   179e0:	str	fp, [sp, #8]
   179e4:	str	r9, [sp, #4]
   179e8:	sub	r3, fp, r9
   179ec:	str	r3, [sp]
   179f0:	mov	r2, r3
   179f4:	mov	r1, #10
   179f8:	mov	r0, r9
   179fc:	bl	111fc <memchr@plt>
   17a00:	mov	r7, r0
   17a04:	ldr	r3, [r4, #20]
   17a08:	cmp	r3, #0
   17a0c:	movlt	r3, #0
   17a10:	strlt	r3, [r4, #20]
   17a14:	cmp	r7, #0
   17a18:	beq	17ab8 <argp_parse@@Base+0x1a2c>
   17a1c:	ldr	r0, [r4, #20]
   17a20:	mov	r5, r7
   17a24:	ldr	r8, [r4, #8]
   17a28:	ldr	r3, [sp, #4]
   17a2c:	sub	r3, r7, r3
   17a30:	add	r3, r3, r0
   17a34:	cmp	r3, r8
   17a38:	bge	17b08 <argp_parse@@Base+0x1a7c>
   17a3c:	mov	r3, #0
   17a40:	str	r3, [r4, #20]
   17a44:	add	r9, r7, #1
   17a48:	ldr	fp, [r4, #28]
   17a4c:	cmp	r9, fp
   17a50:	bcs	17af0 <argp_parse@@Base+0x1a64>
   17a54:	ldr	r3, [r4, #20]
   17a58:	cmp	r3, #0
   17a5c:	bne	179dc <argp_parse@@Base+0x1950>
   17a60:	ldr	r6, [r4, #4]
   17a64:	cmp	r6, #0
   17a68:	beq	17eb4 <argp_parse@@Base+0x1e28>
   17a6c:	add	r3, fp, r6
   17a70:	ldr	r2, [r4, #32]
   17a74:	cmp	r2, r3
   17a78:	movls	r5, #0
   17a7c:	bls	179ac <argp_parse@@Base+0x1920>
   17a80:	add	r5, r9, r6
   17a84:	sub	r2, fp, r9
   17a88:	mov	r1, r9
   17a8c:	mov	r0, r5
   17a90:	bl	1104c <memmove@plt>
   17a94:	ldr	r3, [r4, #28]
   17a98:	add	r3, r3, r6
   17a9c:	str	r3, [r4, #28]
   17aa0:	mov	r2, r6
   17aa4:	mov	r1, sl
   17aa8:	mov	r0, r9
   17aac:	bl	111e4 <memset@plt>
   17ab0:	mov	r9, r5
   17ab4:	b	179d8 <argp_parse@@Base+0x194c>
   17ab8:	ldr	r3, [r4, #20]
   17abc:	ldr	r2, [sp]
   17ac0:	add	r3, r2, r3
   17ac4:	ldr	r6, [r4, #8]
   17ac8:	cmp	r3, r6
   17acc:	bcc	17aec <argp_parse@@Base+0x1a60>
   17ad0:	sub	r6, r6, #1
   17ad4:	ldr	r3, [r4, #12]
   17ad8:	str	r3, [sp, #12]
   17adc:	cmp	r3, #0
   17ae0:	blt	17bfc <argp_parse@@Base+0x1b70>
   17ae4:	mov	r7, fp
   17ae8:	b	17b1c <argp_parse@@Base+0x1a90>
   17aec:	str	r3, [r4, #20]
   17af0:	ldr	r3, [r4, #28]
   17af4:	ldr	r2, [r4, #24]
   17af8:	sub	r3, r3, r2
   17afc:	str	r3, [r4, #16]
   17b00:	add	sp, sp, #20
   17b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b08:	sub	r6, r8, #1
   17b0c:	ldr	r3, [r4, #12]
   17b10:	str	r3, [sp, #12]
   17b14:	cmp	r3, #0
   17b18:	blt	17bb0 <argp_parse@@Base+0x1b24>
   17b1c:	ldr	r5, [r4, #20]
   17b20:	rsb	r5, r5, #1
   17b24:	add	r5, r5, r6
   17b28:	adds	r5, r9, r5
   17b2c:	bcs	17edc <argp_parse@@Base+0x1e50>
   17b30:	bl	11184 <__ctype_b_loc@plt>
   17b34:	ldr	r0, [r0]
   17b38:	mov	r3, r5
   17b3c:	mov	r1, r3
   17b40:	sub	r3, r3, #1
   17b44:	ldrb	r2, [r1]
   17b48:	lsl	r2, r2, #1
   17b4c:	ldrh	r2, [r0, r2]
   17b50:	tst	r2, #1
   17b54:	bne	17c1c <argp_parse@@Base+0x1b90>
   17b58:	mov	r1, r3
   17b5c:	cmp	r3, r9
   17b60:	bcs	17b3c <argp_parse@@Base+0x1ab0>
   17b64:	add	r6, r1, #1
   17b68:	cmp	r6, r9
   17b6c:	bhi	17c58 <argp_parse@@Base+0x1bcc>
   17b70:	cmp	r5, r7
   17b74:	bcs	17d08 <argp_parse@@Base+0x1c7c>
   17b78:	add	r6, r5, #1
   17b7c:	mov	r8, r7
   17b80:	mov	r5, r6
   17b84:	cmp	r8, r6
   17b88:	beq	17d08 <argp_parse@@Base+0x1c7c>
   17b8c:	bl	11184 <__ctype_b_loc@plt>
   17b90:	add	r6, r6, #1
   17b94:	ldrb	r3, [r5]
   17b98:	ldr	r2, [r0]
   17b9c:	lsl	r3, r3, #1
   17ba0:	ldrh	r3, [r2, r3]
   17ba4:	tst	r3, #1
   17ba8:	beq	17b80 <argp_parse@@Base+0x1af4>
   17bac:	b	17d1c <argp_parse@@Base+0x1c90>
   17bb0:	cmp	fp, r7
   17bb4:	bls	17bfc <argp_parse@@Base+0x1b70>
   17bb8:	sub	r0, r6, r0
   17bbc:	ldr	r3, [sp, #8]
   17bc0:	sub	r2, r3, r7
   17bc4:	mov	r1, r7
   17bc8:	add	r0, r9, r0
   17bcc:	bl	1104c <memmove@plt>
   17bd0:	ldr	r3, [r4, #20]
   17bd4:	sub	r6, r6, r3
   17bd8:	add	r6, r9, r6
   17bdc:	sub	r5, r6, r7
   17be0:	ldr	r3, [r4, #28]
   17be4:	sub	r5, r3, r5
   17be8:	str	r5, [r4, #28]
   17bec:	mov	r3, #0
   17bf0:	str	r3, [r4, #20]
   17bf4:	add	r9, r9, r8
   17bf8:	b	17a48 <argp_parse@@Base+0x19bc>
   17bfc:	ldr	r3, [r4, #20]
   17c00:	ldr	r2, [sp]
   17c04:	add	r3, r2, r3
   17c08:	str	r3, [r4, #20]
   17c0c:	sub	r3, r6, r3
   17c10:	add	r3, fp, r3
   17c14:	str	r3, [r4, #28]
   17c18:	b	17af0 <argp_parse@@Base+0x1a64>
   17c1c:	add	r6, r1, #1
   17c20:	cmp	r6, r9
   17c24:	bls	17b70 <argp_parse@@Base+0x1ae4>
   17c28:	cmp	r1, r9
   17c2c:	bcc	17c58 <argp_parse@@Base+0x1bcc>
   17c30:	sub	ip, r9, #1
   17c34:	mov	r1, r3
   17c38:	cmp	ip, r3
   17c3c:	beq	17c58 <argp_parse@@Base+0x1bcc>
   17c40:	sub	r3, r3, #1
   17c44:	ldrb	r2, [r1]
   17c48:	lsl	r2, r2, #1
   17c4c:	ldrh	r2, [r0, r2]
   17c50:	tst	r2, #1
   17c54:	bne	17c34 <argp_parse@@Base+0x1ba8>
   17c58:	add	r5, r1, #1
   17c5c:	ldr	r3, [sp]
   17c60:	add	r3, r3, #1
   17c64:	add	r3, r9, r3
   17c68:	cmp	r6, r3
   17c6c:	beq	17d40 <argp_parse@@Base+0x1cb4>
   17c70:	add	r3, r5, #1
   17c74:	sub	r3, r6, r3
   17c78:	ldr	r2, [sp, #12]
   17c7c:	cmp	r3, r2
   17c80:	bge	17d58 <argp_parse@@Base+0x1ccc>
   17c84:	cmp	r6, fp
   17c88:	bcs	17d58 <argp_parse@@Base+0x1ccc>
   17c8c:	ldr	r3, [r4, #32]
   17c90:	ldr	r2, [sp, #8]
   17c94:	sub	r3, r3, r2
   17c98:	ldr	r2, [sp, #12]
   17c9c:	add	r2, r2, #1
   17ca0:	cmp	r3, r2
   17ca4:	bgt	17da0 <argp_parse@@Base+0x1d14>
   17ca8:	ldr	r0, [r4, #24]
   17cac:	cmp	r5, r0
   17cb0:	bls	17cc4 <argp_parse@@Base+0x1c38>
   17cb4:	ldr	r3, [r4]
   17cb8:	sub	r2, r5, r0
   17cbc:	mov	r1, #1
   17cc0:	bl	11094 <fwrite_unlocked@plt>
   17cc4:	ldr	r0, [r4]
   17cc8:	ldr	r3, [r0, #20]
   17ccc:	ldr	r2, [r0, #24]
   17cd0:	cmp	r3, r2
   17cd4:	addcc	r2, r3, #1
   17cd8:	strcc	r2, [r0, #20]
   17cdc:	movcc	r2, #10
   17ce0:	strbcc	r2, [r3]
   17ce4:	bcs	17dec <argp_parse@@Base+0x1d60>
   17ce8:	ldr	r7, [r4, #24]
   17cec:	ldr	r3, [sp, #4]
   17cf0:	sub	r3, r3, r7
   17cf4:	ldr	r2, [sp]
   17cf8:	add	r3, r2, r3
   17cfc:	str	r3, [sp]
   17d00:	mov	r9, r7
   17d04:	b	17d68 <argp_parse@@Base+0x1cdc>
   17d08:	cmp	r5, r7
   17d0c:	moveq	r3, #0
   17d10:	streq	r3, [r4, #20]
   17d14:	addeq	r9, r7, #1
   17d18:	beq	17a48 <argp_parse@@Base+0x19bc>
   17d1c:	bl	11184 <__ctype_b_loc@plt>
   17d20:	ldr	r2, [r0]
   17d24:	mov	r6, r5
   17d28:	ldrb	r3, [r6, #1]!
   17d2c:	lsl	r3, r3, #1
   17d30:	ldrh	r3, [r2, r3]
   17d34:	tst	r3, #1
   17d38:	bne	17d28 <argp_parse@@Base+0x1c9c>
   17d3c:	b	17c5c <argp_parse@@Base+0x1bd0>
   17d40:	ldr	r3, [r4, #32]
   17d44:	sub	r3, r3, r5
   17d48:	ldr	r2, [sp, #12]
   17d4c:	add	r2, r2, #1
   17d50:	cmp	r3, r2
   17d54:	blt	17c84 <argp_parse@@Base+0x1bf8>
   17d58:	mov	r3, #10
   17d5c:	strb	r3, [r5]
   17d60:	mov	r7, r9
   17d64:	add	r9, r5, #1
   17d68:	mov	r8, r6
   17d6c:	ldr	r3, [r4, #12]
   17d70:	sub	r2, r6, r9
   17d74:	cmp	r2, r3
   17d78:	bge	17e08 <argp_parse@@Base+0x1d7c>
   17d7c:	ldr	r2, [sp]
   17d80:	add	r2, r2, #1
   17d84:	add	r2, r7, r2
   17d88:	cmp	r6, r2
   17d8c:	beq	17df8 <argp_parse@@Base+0x1d6c>
   17d90:	cmp	r3, #0
   17d94:	movgt	r5, #0
   17d98:	bgt	17e6c <argp_parse@@Base+0x1de0>
   17d9c:	b	17e2c <argp_parse@@Base+0x1da0>
   17da0:	ldr	r3, [sp, #8]
   17da4:	sub	r7, r3, r6
   17da8:	mov	r0, r2
   17dac:	mov	r2, r7
   17db0:	mov	r1, r6
   17db4:	add	r0, r5, r0
   17db8:	bl	1104c <memmove@plt>
   17dbc:	ldr	r6, [r4, #12]
   17dc0:	add	r6, r6, #1
   17dc4:	add	r6, r5, r6
   17dc8:	add	r7, r6, r7
   17dcc:	ldr	r3, [sp, #4]
   17dd0:	sub	r3, r7, r3
   17dd4:	str	r3, [sp]
   17dd8:	mov	r3, #10
   17ddc:	strb	r3, [r5]
   17de0:	mov	r7, r9
   17de4:	add	r9, r5, #1
   17de8:	b	17d68 <argp_parse@@Base+0x1cdc>
   17dec:	mov	r1, #10
   17df0:	bl	11214 <__overflow@plt>
   17df4:	b	17ce8 <argp_parse@@Base+0x1c5c>
   17df8:	ldr	r2, [r4, #32]
   17dfc:	sub	r2, r2, r6
   17e00:	cmp	r3, r2
   17e04:	bgt	17d90 <argp_parse@@Base+0x1d04>
   17e08:	cmp	r3, #0
   17e0c:	ble	17e2c <argp_parse@@Base+0x1da0>
   17e10:	mov	r3, r9
   17e14:	strb	sl, [r3], #1
   17e18:	sub	r1, r3, r9
   17e1c:	ldr	r2, [r4, #12]
   17e20:	cmp	r1, r2
   17e24:	blt	17e14 <argp_parse@@Base+0x1d88>
   17e28:	mov	r9, r3
   17e2c:	cmp	r9, r6
   17e30:	bcc	17e98 <argp_parse@@Base+0x1e0c>
   17e34:	sub	r7, r8, r7
   17e38:	ldr	r3, [sp]
   17e3c:	sub	r7, r3, r7
   17e40:	add	r7, r9, r7
   17e44:	str	r7, [r4, #28]
   17e48:	ldr	r3, [r4, #12]
   17e4c:	cmp	r3, #0
   17e50:	mvneq	r3, #0
   17e54:	str	r3, [r4, #20]
   17e58:	b	17a48 <argp_parse@@Base+0x19bc>
   17e5c:	add	r5, r5, #1
   17e60:	ldr	r3, [r4, #12]
   17e64:	cmp	r3, r5
   17e68:	ble	17e2c <argp_parse@@Base+0x1da0>
   17e6c:	ldr	r0, [r4]
   17e70:	ldr	r3, [r0, #20]
   17e74:	ldr	r2, [r0, #24]
   17e78:	cmp	r3, r2
   17e7c:	addcc	r2, r3, #1
   17e80:	strcc	r2, [r0, #20]
   17e84:	strbcc	sl, [r3]
   17e88:	bcc	17e5c <argp_parse@@Base+0x1dd0>
   17e8c:	mov	r1, sl
   17e90:	bl	11214 <__overflow@plt>
   17e94:	b	17e5c <argp_parse@@Base+0x1dd0>
   17e98:	ldr	r3, [sp]
   17e9c:	add	r2, r7, r3
   17ea0:	sub	r2, r2, r8
   17ea4:	mov	r1, r6
   17ea8:	mov	r0, r9
   17eac:	bl	1104c <memmove@plt>
   17eb0:	b	17e34 <argp_parse@@Base+0x1da8>
   17eb4:	str	fp, [sp, #8]
   17eb8:	str	r9, [sp, #4]
   17ebc:	sub	r3, fp, r9
   17ec0:	str	r3, [sp]
   17ec4:	mov	r2, r3
   17ec8:	mov	r1, #10
   17ecc:	mov	r0, r9
   17ed0:	bl	111fc <memchr@plt>
   17ed4:	mov	r7, r0
   17ed8:	b	17a14 <argp_parse@@Base+0x1988>
   17edc:	mov	r1, r5
   17ee0:	b	17b64 <argp_parse@@Base+0x1ad8>
   17ee4:	push	{r4, lr}
   17ee8:	mov	r4, r0
   17eec:	bl	17980 <argp_parse@@Base+0x18f4>
   17ef0:	ldr	r2, [r4, #28]
   17ef4:	ldr	r0, [r4, #24]
   17ef8:	cmp	r2, r0
   17efc:	bls	17f10 <argp_parse@@Base+0x1e84>
   17f00:	ldr	r3, [r4]
   17f04:	sub	r2, r2, r0
   17f08:	mov	r1, #1
   17f0c:	bl	11094 <fwrite_unlocked@plt>
   17f10:	ldr	r0, [r4, #24]
   17f14:	bl	16c80 <argp_parse@@Base+0xbf4>
   17f18:	mov	r0, r4
   17f1c:	bl	16c80 <argp_parse@@Base+0xbf4>
   17f20:	pop	{r4, pc}
   17f24:	ldr	r3, [r0, #32]
   17f28:	ldr	r2, [r0, #28]
   17f2c:	sub	r3, r3, r2
   17f30:	cmp	r3, r1
   17f34:	bcc	17f40 <argp_parse@@Base+0x1eb4>
   17f38:	mov	r0, #1
   17f3c:	bx	lr
   17f40:	push	{r4, r5, r6, lr}
   17f44:	mov	r5, r1
   17f48:	mov	r4, r0
   17f4c:	bl	17980 <argp_parse@@Base+0x18f4>
   17f50:	ldr	r0, [r4, #24]
   17f54:	ldr	r2, [r4, #28]
   17f58:	ldr	r3, [r4]
   17f5c:	sub	r2, r2, r0
   17f60:	mov	r1, #1
   17f64:	bl	11094 <fwrite_unlocked@plt>
   17f68:	ldr	r2, [r4, #28]
   17f6c:	ldr	r3, [r4, #24]
   17f70:	sub	r1, r2, r3
   17f74:	cmp	r0, r1
   17f78:	bne	17fbc <argp_parse@@Base+0x1f30>
   17f7c:	str	r3, [r4, #28]
   17f80:	mov	r2, #0
   17f84:	str	r2, [r4, #16]
   17f88:	ldr	r1, [r4, #32]
   17f8c:	sub	r1, r1, r3
   17f90:	cmp	r5, r1
   17f94:	bls	17fb4 <argp_parse@@Base+0x1f28>
   17f98:	adds	r5, r5, r1
   17f9c:	bcc	17fe8 <argp_parse@@Base+0x1f5c>
   17fa0:	bl	111cc <__errno_location@plt>
   17fa4:	mov	r3, #12
   17fa8:	str	r3, [r0]
   17fac:	mov	r0, #0
   17fb0:	pop	{r4, r5, r6, pc}
   17fb4:	mov	r0, #1
   17fb8:	pop	{r4, r5, r6, pc}
   17fbc:	sub	r2, r2, r0
   17fc0:	str	r2, [r4, #28]
   17fc4:	ldr	r1, [r4, #16]
   17fc8:	sub	r1, r1, r0
   17fcc:	str	r1, [r4, #16]
   17fd0:	sub	r2, r2, r3
   17fd4:	add	r1, r3, r0
   17fd8:	mov	r0, r3
   17fdc:	bl	1104c <memmove@plt>
   17fe0:	mov	r0, #0
   17fe4:	pop	{r4, r5, r6, pc}
   17fe8:	mov	r1, r5
   17fec:	mov	r0, r3
   17ff0:	bl	178b8 <argp_parse@@Base+0x182c>
   17ff4:	cmp	r0, #0
   17ff8:	beq	17fa0 <argp_parse@@Base+0x1f14>
   17ffc:	str	r0, [r4, #24]
   18000:	add	r5, r0, r5
   18004:	str	r5, [r4, #32]
   18008:	str	r0, [r4, #28]
   1800c:	mov	r0, #1
   18010:	pop	{r4, r5, r6, pc}
   18014:	push	{r1, r2, r3}
   18018:	push	{r4, r5, r6, r7, lr}
   1801c:	sub	sp, sp, #8
   18020:	mov	r5, r0
   18024:	ldr	r7, [sp, #28]
   18028:	mov	r1, #150	; 0x96
   1802c:	add	r6, sp, #32
   18030:	mov	r0, r5
   18034:	bl	17f24 <argp_parse@@Base+0x1e98>
   18038:	cmp	r0, #0
   1803c:	beq	18070 <argp_parse@@Base+0x1fe4>
   18040:	str	r6, [sp, #4]
   18044:	ldr	r0, [r5, #28]
   18048:	ldr	r4, [r5, #32]
   1804c:	sub	r4, r4, r0
   18050:	mov	r3, r6
   18054:	mov	r2, r7
   18058:	mov	r1, r4
   1805c:	bl	11268 <vsnprintf@plt>
   18060:	cmp	r4, r0
   18064:	bhi	18078 <argp_parse@@Base+0x1fec>
   18068:	add	r1, r0, #1
   1806c:	b	18030 <argp_parse@@Base+0x1fa4>
   18070:	mvn	r0, #0
   18074:	b	18084 <argp_parse@@Base+0x1ff8>
   18078:	ldr	r3, [r5, #28]
   1807c:	add	r3, r3, r0
   18080:	str	r3, [r5, #28]
   18084:	add	sp, sp, #8
   18088:	pop	{r4, r5, r6, r7, lr}
   1808c:	add	sp, sp, #12
   18090:	bx	lr
   18094:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18098:	ldr	r4, [r1, #28]
   1809c:	ldr	r5, [r1, #32]
   180a0:	ldr	r6, [r1]
   180a4:	add	r7, r0, r5, lsl #2
   180a8:	b	180e0 <argp_parse@@Base+0x2054>
   180ac:	cmp	sl, #0
   180b0:	ble	180dc <argp_parse@@Base+0x2050>
   180b4:	add	r2, r0, r4, lsl #2
   180b8:	sub	r3, r6, sl
   180bc:	add	r3, r0, r3, lsl #2
   180c0:	add	r8, r0, r6, lsl #2
   180c4:	ldr	ip, [r2]
   180c8:	ldr	lr, [r3]
   180cc:	str	lr, [r2], #4
   180d0:	str	ip, [r3], #4
   180d4:	cmp	r3, r8
   180d8:	bne	180c4 <argp_parse@@Base+0x2038>
   180dc:	sub	r6, r6, sl
   180e0:	cmp	r6, r5
   180e4:	movle	r3, #0
   180e8:	movgt	r3, #1
   180ec:	cmp	r4, r5
   180f0:	movge	r3, #0
   180f4:	cmp	r3, #0
   180f8:	beq	18144 <argp_parse@@Base+0x20b8>
   180fc:	sub	r9, r6, r5
   18100:	sub	sl, r5, r4
   18104:	cmp	r9, sl
   18108:	bgt	180ac <argp_parse@@Base+0x2020>
   1810c:	cmp	r9, #0
   18110:	addgt	r3, r0, r4, lsl #2
   18114:	addgt	r8, r9, r4
   18118:	addgt	r8, r0, r8, lsl #2
   1811c:	movgt	r2, r7
   18120:	ble	1813c <argp_parse@@Base+0x20b0>
   18124:	ldr	ip, [r3]
   18128:	ldr	lr, [r2]
   1812c:	str	lr, [r3], #4
   18130:	str	ip, [r2], #4
   18134:	cmp	r3, r8
   18138:	bne	18124 <argp_parse@@Base+0x2098>
   1813c:	add	r4, r4, r9
   18140:	b	180e0 <argp_parse@@Base+0x2054>
   18144:	ldr	r0, [r1]
   18148:	ldr	r3, [r1, #32]
   1814c:	sub	r2, r0, r3
   18150:	ldr	r3, [r1, #28]
   18154:	add	r3, r3, r2
   18158:	str	r3, [r1, #28]
   1815c:	str	r0, [r1, #32]
   18160:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18168:	sub	sp, sp, #44	; 0x2c
   1816c:	str	r0, [sp, #20]
   18170:	str	r1, [sp, #12]
   18174:	str	r2, [sp, #24]
   18178:	str	r3, [sp, #8]
   1817c:	ldr	fp, [sp, #88]	; 0x58
   18180:	ldr	sl, [fp, #20]
   18184:	ldrb	r3, [sl]
   18188:	cmp	r3, #0
   1818c:	cmpne	r3, #61	; 0x3d
   18190:	beq	181cc <argp_parse@@Base+0x2140>
   18194:	mov	r8, sl
   18198:	ldrb	r3, [r8, #1]!
   1819c:	cmp	r3, #0
   181a0:	cmpne	r3, #61	; 0x3d
   181a4:	bne	18198 <argp_parse@@Base+0x210c>
   181a8:	sub	r7, r8, sl
   181ac:	ldr	r5, [sp, #8]
   181b0:	ldr	r3, [r5]
   181b4:	str	r3, [sp, #16]
   181b8:	cmp	r3, #0
   181bc:	beq	184c0 <argp_parse@@Base+0x2434>
   181c0:	mov	r4, r3
   181c4:	mov	r6, #0
   181c8:	b	181e4 <argp_parse@@Base+0x2158>
   181cc:	mov	r8, sl
   181d0:	b	181a8 <argp_parse@@Base+0x211c>
   181d4:	add	r6, r6, #1
   181d8:	ldr	r4, [r5, #16]!
   181dc:	cmp	r4, #0
   181e0:	beq	1821c <argp_parse@@Base+0x2190>
   181e4:	mov	r9, r5
   181e8:	mov	r2, r7
   181ec:	mov	r1, sl
   181f0:	mov	r0, r4
   181f4:	bl	112b0 <strncmp@plt>
   181f8:	cmp	r0, #0
   181fc:	bne	181d4 <argp_parse@@Base+0x2148>
   18200:	mov	r0, r4
   18204:	bl	111a8 <strlen@plt>
   18208:	cmp	r7, r0
   1820c:	bne	181d4 <argp_parse@@Base+0x2148>
   18210:	cmp	r5, #0
   18214:	strne	r6, [sp, #28]
   18218:	bne	18470 <argp_parse@@Base+0x23e4>
   1821c:	ldr	r4, [sp, #8]
   18220:	mvn	r3, #0
   18224:	str	r3, [sp, #28]
   18228:	mov	sl, #0
   1822c:	str	sl, [sp, #36]	; 0x24
   18230:	mov	r5, sl
   18234:	mov	r9, sl
   18238:	str	r8, [sp, #32]
   1823c:	mov	r8, sl
   18240:	ldr	r0, [sp, #16]
   18244:	b	18294 <argp_parse@@Base+0x2208>
   18248:	ldr	r2, [r9, #8]
   1824c:	ldr	r3, [r4, #8]
   18250:	cmp	r2, r3
   18254:	bne	182cc <argp_parse@@Base+0x2240>
   18258:	ldr	r2, [r9, #12]
   1825c:	ldr	r3, [r4, #12]
   18260:	cmp	r2, r3
   18264:	bne	182cc <argp_parse@@Base+0x2240>
   18268:	b	18284 <argp_parse@@Base+0x21f8>
   1826c:	cmp	r8, #0
   18270:	moveq	sl, #1
   18274:	beq	18284 <argp_parse@@Base+0x21f8>
   18278:	mov	sl, #1
   1827c:	mov	r3, #1
   18280:	strb	r3, [r8, r5]
   18284:	add	r5, r5, #1
   18288:	ldr	r0, [r4, #16]!
   1828c:	cmp	r0, #0
   18290:	beq	18334 <argp_parse@@Base+0x22a8>
   18294:	mov	r2, r7
   18298:	ldr	r1, [fp, #20]
   1829c:	bl	112b0 <strncmp@plt>
   182a0:	cmp	r0, #0
   182a4:	bne	18284 <argp_parse@@Base+0x21f8>
   182a8:	cmp	r9, #0
   182ac:	beq	18320 <argp_parse@@Base+0x2294>
   182b0:	ldr	r3, [sp, #84]	; 0x54
   182b4:	cmp	r3, #0
   182b8:	bne	182cc <argp_parse@@Base+0x2240>
   182bc:	ldr	r2, [r9, #4]
   182c0:	ldr	r3, [r4, #4]
   182c4:	cmp	r2, r3
   182c8:	beq	18248 <argp_parse@@Base+0x21bc>
   182cc:	cmp	sl, #0
   182d0:	bne	18284 <argp_parse@@Base+0x21f8>
   182d4:	ldr	r3, [sp, #92]	; 0x5c
   182d8:	cmp	r3, #0
   182dc:	beq	1826c <argp_parse@@Base+0x21e0>
   182e0:	cmp	r8, #0
   182e4:	bne	1827c <argp_parse@@Base+0x21f0>
   182e8:	mov	r0, r6
   182ec:	bl	17888 <argp_parse@@Base+0x17fc>
   182f0:	subs	r8, r0, #0
   182f4:	beq	1832c <argp_parse@@Base+0x22a0>
   182f8:	mov	r2, r6
   182fc:	mov	r1, #0
   18300:	mov	r0, r8
   18304:	bl	111e4 <memset@plt>
   18308:	ldr	r3, [sp, #28]
   1830c:	mov	r2, #1
   18310:	strb	r2, [r8, r3]
   18314:	mov	r3, #1
   18318:	str	r3, [sp, #36]	; 0x24
   1831c:	b	1827c <argp_parse@@Base+0x21f0>
   18320:	str	r5, [sp, #28]
   18324:	mov	r9, r4
   18328:	b	18284 <argp_parse@@Base+0x21f8>
   1832c:	mov	sl, #1
   18330:	b	18284 <argp_parse@@Base+0x21f8>
   18334:	mov	r3, r8
   18338:	str	r8, [sp, #16]
   1833c:	ldr	r8, [sp, #32]
   18340:	cmp	sl, #0
   18344:	cmpeq	r3, #0
   18348:	beq	18468 <argp_parse@@Base+0x23dc>
   1834c:	ldr	r3, [sp, #92]	; 0x5c
   18350:	cmp	r3, #0
   18354:	beq	18384 <argp_parse@@Base+0x22f8>
   18358:	cmp	sl, #0
   1835c:	beq	183c0 <argp_parse@@Base+0x2334>
   18360:	ldr	r3, [sp, #12]
   18364:	ldr	r2, [r3]
   18368:	ldr	r3, [pc, #708]	; 18634 <argp_parse@@Base+0x25a8>
   1836c:	ldr	r0, [r3]
   18370:	ldr	r3, [fp, #20]
   18374:	str	r3, [sp]
   18378:	ldr	r3, [sp, #96]	; 0x60
   1837c:	ldr	r1, [pc, #692]	; 18638 <argp_parse@@Base+0x25ac>
   18380:	bl	111c0 <fprintf@plt>
   18384:	ldr	r3, [sp, #36]	; 0x24
   18388:	cmp	r3, #0
   1838c:	bne	1845c <argp_parse@@Base+0x23d0>
   18390:	ldr	r4, [fp, #20]
   18394:	mov	r0, r4
   18398:	bl	111a8 <strlen@plt>
   1839c:	add	r0, r4, r0
   183a0:	str	r0, [fp, #20]
   183a4:	ldr	r3, [fp]
   183a8:	add	r3, r3, #1
   183ac:	str	r3, [fp]
   183b0:	mov	r3, #0
   183b4:	str	r3, [fp, #8]
   183b8:	mov	r0, #63	; 0x3f
   183bc:	b	185b4 <argp_parse@@Base+0x2528>
   183c0:	ldr	r4, [pc, #620]	; 18634 <argp_parse@@Base+0x25a8>
   183c4:	ldr	r0, [r4]
   183c8:	bl	1125c <flockfile@plt>
   183cc:	ldr	r3, [sp, #12]
   183d0:	ldr	r2, [r3]
   183d4:	ldr	r0, [r4]
   183d8:	ldr	r3, [fp, #20]
   183dc:	str	r3, [sp]
   183e0:	ldr	r3, [sp, #96]	; 0x60
   183e4:	ldr	r1, [pc, #592]	; 1863c <argp_parse@@Base+0x25b0>
   183e8:	bl	111c0 <fprintf@plt>
   183ec:	cmp	r6, #0
   183f0:	ble	18440 <argp_parse@@Base+0x23b4>
   183f4:	ldr	r3, [sp, #16]
   183f8:	mov	r4, r3
   183fc:	add	r6, r3, r6
   18400:	ldr	r7, [pc, #568]	; 18640 <argp_parse@@Base+0x25b4>
   18404:	ldr	r5, [pc, #552]	; 18634 <argp_parse@@Base+0x25a8>
   18408:	ldr	r8, [sp, #8]
   1840c:	b	1841c <argp_parse@@Base+0x2390>
   18410:	add	sl, sl, #1
   18414:	cmp	r4, r6
   18418:	beq	18440 <argp_parse@@Base+0x23b4>
   1841c:	ldrb	r3, [r4], #1
   18420:	cmp	r3, #0
   18424:	beq	18410 <argp_parse@@Base+0x2384>
   18428:	ldr	r3, [r8, sl, lsl #4]
   1842c:	ldr	r2, [sp, #96]	; 0x60
   18430:	mov	r1, r7
   18434:	ldr	r0, [r5]
   18438:	bl	111c0 <fprintf@plt>
   1843c:	b	18410 <argp_parse@@Base+0x2384>
   18440:	ldr	r4, [pc, #492]	; 18634 <argp_parse@@Base+0x25a8>
   18444:	ldr	r1, [r4]
   18448:	mov	r0, #10
   1844c:	bl	11250 <fputc@plt>
   18450:	ldr	r0, [r4]
   18454:	bl	110f4 <funlockfile@plt>
   18458:	b	18384 <argp_parse@@Base+0x22f8>
   1845c:	ldr	r0, [sp, #16]
   18460:	bl	16c80 <argp_parse@@Base+0xbf4>
   18464:	b	18390 <argp_parse@@Base+0x2304>
   18468:	cmp	r9, #0
   1846c:	beq	184c0 <argp_parse@@Base+0x2434>
   18470:	ldr	r2, [fp]
   18474:	add	r3, r2, #1
   18478:	str	r3, [fp]
   1847c:	mov	r1, #0
   18480:	str	r1, [fp, #20]
   18484:	ldrb	r1, [r8]
   18488:	cmp	r1, #0
   1848c:	beq	18580 <argp_parse@@Base+0x24f4>
   18490:	ldr	r3, [r9, #4]
   18494:	cmp	r3, #0
   18498:	addne	r8, r8, #1
   1849c:	strne	r8, [fp, #12]
   184a0:	bne	1858c <argp_parse@@Base+0x2500>
   184a4:	ldr	r3, [sp, #92]	; 0x5c
   184a8:	cmp	r3, #0
   184ac:	bne	18558 <argp_parse@@Base+0x24cc>
   184b0:	ldr	r3, [r9, #12]
   184b4:	str	r3, [fp, #8]
   184b8:	mov	r0, #63	; 0x3f
   184bc:	b	185b4 <argp_parse@@Base+0x2528>
   184c0:	ldr	r3, [sp, #84]	; 0x54
   184c4:	cmp	r3, #0
   184c8:	bne	184f8 <argp_parse@@Base+0x246c>
   184cc:	ldr	r3, [sp, #92]	; 0x5c
   184d0:	cmp	r3, #0
   184d4:	bne	18530 <argp_parse@@Base+0x24a4>
   184d8:	mov	r2, #0
   184dc:	str	r2, [fp, #20]
   184e0:	ldr	r3, [fp]
   184e4:	add	r3, r3, #1
   184e8:	str	r3, [fp]
   184ec:	str	r2, [fp, #8]
   184f0:	mov	r0, #63	; 0x3f
   184f4:	b	185b4 <argp_parse@@Base+0x2528>
   184f8:	ldr	r3, [fp]
   184fc:	ldr	r2, [sp, #12]
   18500:	ldr	r3, [r2, r3, lsl #2]
   18504:	ldrb	r3, [r3, #1]
   18508:	cmp	r3, #45	; 0x2d
   1850c:	beq	184cc <argp_parse@@Base+0x2440>
   18510:	ldr	r3, [fp, #20]
   18514:	ldrb	r1, [r3]
   18518:	ldr	r0, [sp, #24]
   1851c:	bl	111b4 <strchr@plt>
   18520:	cmp	r0, #0
   18524:	beq	184cc <argp_parse@@Base+0x2440>
   18528:	mvn	r0, #0
   1852c:	b	185b4 <argp_parse@@Base+0x2528>
   18530:	ldr	r3, [sp, #12]
   18534:	ldr	r2, [r3]
   18538:	ldr	r3, [pc, #244]	; 18634 <argp_parse@@Base+0x25a8>
   1853c:	ldr	r0, [r3]
   18540:	ldr	r3, [fp, #20]
   18544:	str	r3, [sp]
   18548:	ldr	r3, [sp, #96]	; 0x60
   1854c:	ldr	r1, [pc, #240]	; 18644 <argp_parse@@Base+0x25b8>
   18550:	bl	111c0 <fprintf@plt>
   18554:	b	184d8 <argp_parse@@Base+0x244c>
   18558:	ldr	r3, [sp, #12]
   1855c:	ldr	r2, [r3]
   18560:	ldr	r3, [pc, #204]	; 18634 <argp_parse@@Base+0x25a8>
   18564:	ldr	r0, [r3]
   18568:	ldr	r3, [r9]
   1856c:	str	r3, [sp]
   18570:	ldr	r3, [sp, #96]	; 0x60
   18574:	ldr	r1, [pc, #204]	; 18648 <argp_parse@@Base+0x25bc>
   18578:	bl	111c0 <fprintf@plt>
   1857c:	b	184b0 <argp_parse@@Base+0x2424>
   18580:	ldr	r1, [r9, #4]
   18584:	cmp	r1, #1
   18588:	beq	185bc <argp_parse@@Base+0x2530>
   1858c:	ldr	r3, [sp, #80]	; 0x50
   18590:	cmp	r3, #0
   18594:	ldrne	r2, [sp, #28]
   18598:	strne	r2, [r3]
   1859c:	ldr	r3, [r9, #8]
   185a0:	cmp	r3, #0
   185a4:	ldrne	r2, [r9, #12]
   185a8:	strne	r2, [r3]
   185ac:	movne	r0, #0
   185b0:	ldreq	r0, [r9, #12]
   185b4:	add	sp, sp, #44	; 0x2c
   185b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185bc:	ldr	r1, [sp, #20]
   185c0:	cmp	r3, r1
   185c4:	bge	185e0 <argp_parse@@Base+0x2554>
   185c8:	add	r2, r2, #2
   185cc:	str	r2, [fp]
   185d0:	ldr	r2, [sp, #12]
   185d4:	ldr	r3, [r2, r3, lsl #2]
   185d8:	str	r3, [fp, #12]
   185dc:	b	1858c <argp_parse@@Base+0x2500>
   185e0:	ldr	r3, [sp, #92]	; 0x5c
   185e4:	cmp	r3, #0
   185e8:	bne	1860c <argp_parse@@Base+0x2580>
   185ec:	ldr	r3, [r9, #12]
   185f0:	str	r3, [fp, #8]
   185f4:	ldr	r3, [sp, #24]
   185f8:	ldrb	r0, [r3]
   185fc:	cmp	r0, #58	; 0x3a
   18600:	moveq	r0, #58	; 0x3a
   18604:	movne	r0, #63	; 0x3f
   18608:	b	185b4 <argp_parse@@Base+0x2528>
   1860c:	ldr	r3, [sp, #12]
   18610:	ldr	r2, [r3]
   18614:	ldr	r3, [pc, #24]	; 18634 <argp_parse@@Base+0x25a8>
   18618:	ldr	r0, [r3]
   1861c:	ldr	r3, [r9]
   18620:	str	r3, [sp]
   18624:	ldr	r3, [sp, #96]	; 0x60
   18628:	ldr	r1, [pc, #28]	; 1864c <argp_parse@@Base+0x25c0>
   1862c:	bl	111c0 <fprintf@plt>
   18630:	b	185ec <argp_parse@@Base+0x2560>
   18634:	andeq	fp, r2, r0, lsr #5
   18638:	andeq	sl, r1, r4, rrx
   1863c:	andeq	sl, r1, r4, lsl #1
   18640:	strheq	sl, [r1], -r4
   18644:	strheq	sl, [r1], -ip
   18648:	ldrdeq	sl, [r1], -ip
   1864c:	andeq	sl, r1, ip, lsl #2
   18650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18654:	sub	sp, sp, #36	; 0x24
   18658:	str	r3, [sp, #24]
   1865c:	ldr	r4, [sp, #80]	; 0x50
   18660:	ldr	r8, [r4, #4]
   18664:	subs	r5, r0, #0
   18668:	ble	18b70 <argp_parse@@Base+0x2ae4>
   1866c:	mov	r9, r1
   18670:	mov	r6, r2
   18674:	mov	r3, #0
   18678:	str	r3, [r4, #12]
   1867c:	ldr	r3, [r4]
   18680:	cmp	r3, #0
   18684:	beq	186a8 <argp_parse@@Base+0x261c>
   18688:	ldr	r3, [r4, #16]
   1868c:	cmp	r3, #0
   18690:	beq	186b0 <argp_parse@@Base+0x2624>
   18694:	ldrb	r3, [r2]
   18698:	sub	r3, r3, #43	; 0x2b
   1869c:	tst	r3, #253	; 0xfd
   186a0:	addeq	r6, r2, #1
   186a4:	b	1870c <argp_parse@@Base+0x2680>
   186a8:	mov	r3, #1
   186ac:	str	r3, [r4]
   186b0:	ldr	r3, [r4]
   186b4:	str	r3, [r4, #32]
   186b8:	str	r3, [r4, #28]
   186bc:	mov	r3, #0
   186c0:	str	r3, [r4, #20]
   186c4:	ldrb	r3, [r6]
   186c8:	cmp	r3, #45	; 0x2d
   186cc:	moveq	r3, #2
   186d0:	streq	r3, [r4, #24]
   186d4:	addeq	r6, r6, #1
   186d8:	beq	18704 <argp_parse@@Base+0x2678>
   186dc:	cmp	r3, #43	; 0x2b
   186e0:	moveq	r3, #0
   186e4:	streq	r3, [r4, #24]
   186e8:	addeq	r6, r6, #1
   186ec:	beq	18704 <argp_parse@@Base+0x2678>
   186f0:	ldr	r3, [sp, #84]	; 0x54
   186f4:	cmp	r3, #0
   186f8:	beq	187a8 <argp_parse@@Base+0x271c>
   186fc:	mov	r3, #0
   18700:	str	r3, [r4, #24]
   18704:	mov	r3, #1
   18708:	str	r3, [r4, #16]
   1870c:	ldrb	r3, [r6]
   18710:	cmp	r3, #58	; 0x3a
   18714:	moveq	r8, #0
   18718:	ldr	r3, [r4, #20]
   1871c:	cmp	r3, #0
   18720:	beq	18730 <argp_parse@@Base+0x26a4>
   18724:	ldrb	r3, [r3]
   18728:	cmp	r3, #0
   1872c:	bne	188bc <argp_parse@@Base+0x2830>
   18730:	ldr	r3, [r4]
   18734:	ldr	r2, [r4, #32]
   18738:	cmp	r2, r3
   1873c:	strgt	r3, [r4, #32]
   18740:	ldr	r2, [r4, #28]
   18744:	cmp	r3, r2
   18748:	strlt	r3, [r4, #28]
   1874c:	ldr	r2, [r4, #24]
   18750:	cmp	r2, #1
   18754:	beq	187c4 <argp_parse@@Base+0x2738>
   18758:	ldr	r7, [r4]
   1875c:	cmp	r5, r7
   18760:	beq	18848 <argp_parse@@Base+0x27bc>
   18764:	ldr	sl, [r9, r7, lsl #2]
   18768:	ldr	r1, [pc, #1088]	; 18bb0 <argp_parse@@Base+0x2b24>
   1876c:	mov	r0, sl
   18770:	bl	11004 <strcmp@plt>
   18774:	cmp	r0, #0
   18778:	bne	18b80 <argp_parse@@Base+0x2af4>
   1877c:	add	r7, r7, #1
   18780:	str	r7, [r4]
   18784:	ldr	r2, [r4, #28]
   18788:	ldr	r3, [r4, #32]
   1878c:	cmp	r7, r3
   18790:	cmpne	r2, r3
   18794:	beq	18838 <argp_parse@@Base+0x27ac>
   18798:	mov	r1, r4
   1879c:	mov	r0, r9
   187a0:	bl	18094 <argp_parse@@Base+0x2008>
   187a4:	b	18840 <argp_parse@@Base+0x27b4>
   187a8:	ldr	r0, [pc, #1028]	; 18bb4 <argp_parse@@Base+0x2b28>
   187ac:	bl	11130 <getenv@plt>
   187b0:	cmp	r0, #0
   187b4:	bne	186fc <argp_parse@@Base+0x2670>
   187b8:	mov	r3, #1
   187bc:	str	r3, [r4, #24]
   187c0:	b	18704 <argp_parse@@Base+0x2678>
   187c4:	ldr	r2, [r4, #32]
   187c8:	ldr	r1, [r4, #28]
   187cc:	cmp	r1, r2
   187d0:	cmpne	r3, r2
   187d4:	beq	187e8 <argp_parse@@Base+0x275c>
   187d8:	mov	r1, r4
   187dc:	mov	r0, r9
   187e0:	bl	18094 <argp_parse@@Base+0x2008>
   187e4:	b	187f0 <argp_parse@@Base+0x2764>
   187e8:	cmp	r3, r2
   187ec:	strne	r3, [r4, #28]
   187f0:	ldr	r3, [r4]
   187f4:	cmp	r5, r3
   187f8:	ble	18830 <argp_parse@@Base+0x27a4>
   187fc:	add	r1, r9, r3, lsl #2
   18800:	b	18814 <argp_parse@@Base+0x2788>
   18804:	add	r3, r3, #1
   18808:	str	r3, [r4]
   1880c:	cmp	r5, r3
   18810:	beq	18830 <argp_parse@@Base+0x27a4>
   18814:	ldr	r2, [r1], #4
   18818:	ldrb	r0, [r2]
   1881c:	cmp	r0, #45	; 0x2d
   18820:	bne	18804 <argp_parse@@Base+0x2778>
   18824:	ldrb	r2, [r2, #1]
   18828:	cmp	r2, #0
   1882c:	beq	18804 <argp_parse@@Base+0x2778>
   18830:	str	r3, [r4, #32]
   18834:	b	18758 <argp_parse@@Base+0x26cc>
   18838:	cmp	r2, r3
   1883c:	streq	r7, [r4, #28]
   18840:	str	r5, [r4, #32]
   18844:	str	r5, [r4]
   18848:	ldr	r3, [r4, #28]
   1884c:	ldr	r2, [r4, #32]
   18850:	cmp	r3, r2
   18854:	mvneq	r0, #0
   18858:	strne	r3, [r4]
   1885c:	mvnne	r0, #0
   18860:	b	189c0 <argp_parse@@Base+0x2934>
   18864:	ldrb	r1, [sl, #1]
   18868:	cmp	r1, #0
   1886c:	beq	18b8c <argp_parse@@Base+0x2b00>
   18870:	ldr	r3, [sp, #24]
   18874:	cmp	r3, #0
   18878:	beq	188ac <argp_parse@@Base+0x2820>
   1887c:	cmp	r1, #45	; 0x2d
   18880:	beq	18924 <argp_parse@@Base+0x2898>
   18884:	ldr	r3, [sp, #76]	; 0x4c
   18888:	cmp	r3, #0
   1888c:	beq	188ac <argp_parse@@Base+0x2820>
   18890:	ldrb	r3, [sl, #2]
   18894:	cmp	r3, #0
   18898:	bne	18964 <argp_parse@@Base+0x28d8>
   1889c:	mov	r0, r6
   188a0:	bl	111b4 <strchr@plt>
   188a4:	cmp	r0, #0
   188a8:	beq	18964 <argp_parse@@Base+0x28d8>
   188ac:	ldr	r3, [r4]
   188b0:	ldr	r3, [r9, r3, lsl #2]
   188b4:	add	r3, r3, #1
   188b8:	str	r3, [r4, #20]
   188bc:	ldr	sl, [r4, #20]
   188c0:	add	fp, sl, #1
   188c4:	str	fp, [r4, #20]
   188c8:	ldrb	r7, [sl]
   188cc:	str	r7, [sp, #28]
   188d0:	mov	r1, r7
   188d4:	mov	r0, r6
   188d8:	bl	111b4 <strchr@plt>
   188dc:	ldrb	r3, [sl, #1]
   188e0:	cmp	r3, #0
   188e4:	ldreq	r3, [r4]
   188e8:	addeq	r3, r3, #1
   188ec:	streq	r3, [r4]
   188f0:	sub	r3, r7, #58	; 0x3a
   188f4:	uxtb	r3, r3
   188f8:	cmp	r0, #0
   188fc:	cmpne	r3, #1
   18900:	bls	189ac <argp_parse@@Base+0x2920>
   18904:	ldrb	r3, [r0]
   18908:	cmp	r3, #87	; 0x57
   1890c:	beq	189e4 <argp_parse@@Base+0x2958>
   18910:	ldrb	r3, [r0, #1]
   18914:	cmp	r3, #58	; 0x3a
   18918:	beq	18ab0 <argp_parse@@Base+0x2a24>
   1891c:	mov	r0, r7
   18920:	b	189c0 <argp_parse@@Base+0x2934>
   18924:	add	sl, sl, #2
   18928:	str	sl, [r4, #20]
   1892c:	ldr	r3, [pc, #636]	; 18bb0 <argp_parse@@Base+0x2b24>
   18930:	str	r3, [sp, #16]
   18934:	str	r8, [sp, #12]
   18938:	str	r4, [sp, #8]
   1893c:	ldr	r3, [sp, #76]	; 0x4c
   18940:	str	r3, [sp, #4]
   18944:	ldr	r3, [sp, #72]	; 0x48
   18948:	str	r3, [sp]
   1894c:	ldr	r3, [sp, #24]
   18950:	mov	r2, r6
   18954:	mov	r1, r9
   18958:	mov	r0, r5
   1895c:	bl	18164 <argp_parse@@Base+0x20d8>
   18960:	b	189c0 <argp_parse@@Base+0x2934>
   18964:	add	sl, sl, #1
   18968:	str	sl, [r4, #20]
   1896c:	ldr	r3, [pc, #580]	; 18bb8 <argp_parse@@Base+0x2b2c>
   18970:	str	r3, [sp, #16]
   18974:	str	r8, [sp, #12]
   18978:	str	r4, [sp, #8]
   1897c:	ldr	r3, [sp, #76]	; 0x4c
   18980:	str	r3, [sp, #4]
   18984:	ldr	r3, [sp, #72]	; 0x48
   18988:	str	r3, [sp]
   1898c:	ldr	r3, [sp, #24]
   18990:	mov	r2, r6
   18994:	mov	r1, r9
   18998:	mov	r0, r5
   1899c:	bl	18164 <argp_parse@@Base+0x20d8>
   189a0:	cmn	r0, #1
   189a4:	bne	189c0 <argp_parse@@Base+0x2934>
   189a8:	b	188ac <argp_parse@@Base+0x2820>
   189ac:	cmp	r8, #0
   189b0:	bne	189c8 <argp_parse@@Base+0x293c>
   189b4:	ldr	r3, [sp, #28]
   189b8:	str	r3, [r4, #8]
   189bc:	mov	r0, #63	; 0x3f
   189c0:	add	sp, sp, #36	; 0x24
   189c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189c8:	ldr	r3, [sp, #28]
   189cc:	ldr	r2, [r9]
   189d0:	ldr	r1, [pc, #484]	; 18bbc <argp_parse@@Base+0x2b30>
   189d4:	ldr	r0, [pc, #484]	; 18bc0 <argp_parse@@Base+0x2b34>
   189d8:	ldr	r0, [r0]
   189dc:	bl	111c0 <fprintf@plt>
   189e0:	b	189b4 <argp_parse@@Base+0x2928>
   189e4:	ldrb	r3, [r0, #1]
   189e8:	ldr	r2, [sp, #24]
   189ec:	cmp	r3, #59	; 0x3b
   189f0:	movne	r3, #0
   189f4:	moveq	r3, #1
   189f8:	cmp	r2, #0
   189fc:	moveq	r3, #0
   18a00:	cmp	r3, #0
   18a04:	beq	18910 <argp_parse@@Base+0x2884>
   18a08:	ldrb	r3, [sl, #1]
   18a0c:	cmp	r3, #0
   18a10:	strne	fp, [r4, #12]
   18a14:	bne	18a2c <argp_parse@@Base+0x29a0>
   18a18:	ldr	r3, [r4]
   18a1c:	cmp	r5, r3
   18a20:	beq	18a70 <argp_parse@@Base+0x29e4>
   18a24:	ldr	r3, [r9, r3, lsl #2]
   18a28:	str	r3, [r4, #12]
   18a2c:	ldr	r3, [r4, #12]
   18a30:	str	r3, [r4, #20]
   18a34:	mov	r3, #0
   18a38:	str	r3, [r4, #12]
   18a3c:	ldr	r2, [pc, #384]	; 18bc4 <argp_parse@@Base+0x2b38>
   18a40:	str	r2, [sp, #16]
   18a44:	str	r8, [sp, #12]
   18a48:	str	r4, [sp, #8]
   18a4c:	str	r3, [sp, #4]
   18a50:	ldr	r3, [sp, #72]	; 0x48
   18a54:	str	r3, [sp]
   18a58:	ldr	r3, [sp, #24]
   18a5c:	mov	r2, r6
   18a60:	mov	r1, r9
   18a64:	mov	r0, r5
   18a68:	bl	18164 <argp_parse@@Base+0x20d8>
   18a6c:	b	189c0 <argp_parse@@Base+0x2934>
   18a70:	cmp	r8, #0
   18a74:	bne	18a94 <argp_parse@@Base+0x2a08>
   18a78:	ldr	r3, [sp, #28]
   18a7c:	str	r3, [r4, #8]
   18a80:	ldrb	r0, [r6]
   18a84:	cmp	r0, #58	; 0x3a
   18a88:	moveq	r0, #58	; 0x3a
   18a8c:	movne	r0, #63	; 0x3f
   18a90:	b	189c0 <argp_parse@@Base+0x2934>
   18a94:	ldr	r3, [sp, #28]
   18a98:	ldr	r2, [r9]
   18a9c:	ldr	r1, [pc, #292]	; 18bc8 <argp_parse@@Base+0x2b3c>
   18aa0:	ldr	r0, [pc, #280]	; 18bc0 <argp_parse@@Base+0x2b34>
   18aa4:	ldr	r0, [r0]
   18aa8:	bl	111c0 <fprintf@plt>
   18aac:	b	18a78 <argp_parse@@Base+0x29ec>
   18ab0:	ldrb	r3, [r0, #2]
   18ab4:	cmp	r3, #58	; 0x3a
   18ab8:	beq	18ae4 <argp_parse@@Base+0x2a58>
   18abc:	ldrb	r3, [sl, #1]
   18ac0:	cmp	r3, #0
   18ac4:	beq	18b10 <argp_parse@@Base+0x2a84>
   18ac8:	str	fp, [r4, #12]
   18acc:	ldr	r3, [r4]
   18ad0:	add	r3, r3, #1
   18ad4:	str	r3, [r4]
   18ad8:	mov	r3, #0
   18adc:	str	r3, [r4, #20]
   18ae0:	b	1891c <argp_parse@@Base+0x2890>
   18ae4:	ldrb	r3, [sl, #1]
   18ae8:	cmp	r3, #0
   18aec:	strne	fp, [r4, #12]
   18af0:	ldrne	r3, [r4]
   18af4:	addne	r3, r3, #1
   18af8:	strne	r3, [r4]
   18afc:	moveq	r3, #0
   18b00:	streq	r3, [r4, #12]
   18b04:	mov	r3, #0
   18b08:	str	r3, [r4, #20]
   18b0c:	b	1891c <argp_parse@@Base+0x2890>
   18b10:	ldr	r3, [r4]
   18b14:	cmp	r5, r3
   18b18:	beq	18b30 <argp_parse@@Base+0x2aa4>
   18b1c:	add	r2, r3, #1
   18b20:	str	r2, [r4]
   18b24:	ldr	r3, [r9, r3, lsl #2]
   18b28:	str	r3, [r4, #12]
   18b2c:	b	18ad8 <argp_parse@@Base+0x2a4c>
   18b30:	cmp	r8, #0
   18b34:	bne	18b54 <argp_parse@@Base+0x2ac8>
   18b38:	ldr	r3, [sp, #28]
   18b3c:	str	r3, [r4, #8]
   18b40:	ldrb	r7, [r6]
   18b44:	cmp	r7, #58	; 0x3a
   18b48:	moveq	r7, #58	; 0x3a
   18b4c:	movne	r7, #63	; 0x3f
   18b50:	b	18ad8 <argp_parse@@Base+0x2a4c>
   18b54:	ldr	r3, [sp, #28]
   18b58:	ldr	r2, [r9]
   18b5c:	ldr	r1, [pc, #100]	; 18bc8 <argp_parse@@Base+0x2b3c>
   18b60:	ldr	r0, [pc, #88]	; 18bc0 <argp_parse@@Base+0x2b34>
   18b64:	ldr	r0, [r0]
   18b68:	bl	111c0 <fprintf@plt>
   18b6c:	b	18b38 <argp_parse@@Base+0x2aac>
   18b70:	mvn	r0, #0
   18b74:	b	189c0 <argp_parse@@Base+0x2934>
   18b78:	mvn	r0, #0
   18b7c:	b	189c0 <argp_parse@@Base+0x2934>
   18b80:	ldrb	r3, [sl]
   18b84:	cmp	r3, #45	; 0x2d
   18b88:	beq	18864 <argp_parse@@Base+0x27d8>
   18b8c:	ldr	r3, [r4, #24]
   18b90:	cmp	r3, #0
   18b94:	beq	18b78 <argp_parse@@Base+0x2aec>
   18b98:	add	r3, r7, #1
   18b9c:	str	r3, [r4]
   18ba0:	ldr	r3, [r9, r7, lsl #2]
   18ba4:	str	r3, [r4, #12]
   18ba8:	mov	r0, #1
   18bac:	b	189c0 <argp_parse@@Base+0x2934>
   18bb0:			; <UNDEFINED> instruction: 0x00019bb8
   18bb4:	andeq	sl, r1, r4, lsr r1
   18bb8:	andeq	sl, r1, r4, asr #2
   18bbc:	andeq	sl, r1, r8, asr #2
   18bc0:	andeq	fp, r2, r0, lsr #5
   18bc4:	muleq	r1, r0, r1
   18bc8:	andeq	sl, r1, r4, ror #2
   18bcc:	push	{r4, r5, lr}
   18bd0:	sub	sp, sp, #20
   18bd4:	ldr	r4, [pc, #84]	; 18c30 <argp_parse@@Base+0x2ba4>
   18bd8:	ldr	r5, [pc, #84]	; 18c34 <argp_parse@@Base+0x2ba8>
   18bdc:	ldr	ip, [r5]
   18be0:	str	ip, [r4]
   18be4:	ldr	ip, [r5, #4]
   18be8:	str	ip, [r4, #4]
   18bec:	ldr	ip, [sp, #40]	; 0x28
   18bf0:	str	ip, [sp, #12]
   18bf4:	str	r4, [sp, #8]
   18bf8:	ldr	ip, [sp, #36]	; 0x24
   18bfc:	str	ip, [sp, #4]
   18c00:	ldr	ip, [sp, #32]
   18c04:	str	ip, [sp]
   18c08:	bl	18650 <argp_parse@@Base+0x25c4>
   18c0c:	ldr	r3, [r4]
   18c10:	str	r3, [r5]
   18c14:	ldr	r2, [r4, #12]
   18c18:	ldr	r3, [pc, #24]	; 18c38 <argp_parse@@Base+0x2bac>
   18c1c:	str	r2, [r3]
   18c20:	ldr	r3, [r4, #8]
   18c24:	str	r3, [r5, #8]
   18c28:	add	sp, sp, #20
   18c2c:	pop	{r4, r5, pc}
   18c30:	ldrdeq	fp, [r2], -ip
   18c34:	andeq	fp, r2, r8, lsl #5
   18c38:	andeq	fp, r2, r8, ror r3
   18c3c:	push	{lr}		; (str lr, [sp, #-4]!)
   18c40:	sub	sp, sp, #20
   18c44:	mov	r3, #1
   18c48:	str	r3, [sp, #8]
   18c4c:	mov	r3, #0
   18c50:	str	r3, [sp, #4]
   18c54:	str	r3, [sp]
   18c58:	bl	18bcc <argp_parse@@Base+0x2b40>
   18c5c:	add	sp, sp, #20
   18c60:	pop	{pc}		; (ldr pc, [sp], #4)
   18c64:	push	{r4, r5, r6, lr}
   18c68:	mov	r6, r0
   18c6c:	mov	r5, r1
   18c70:	subs	r4, r2, #0
   18c74:	beq	18ca0 <argp_parse@@Base+0x2c14>
   18c78:	mov	r1, r4
   18c7c:	mvn	r0, #0
   18c80:	bl	18cb0 <argp_parse@@Base+0x2c24>
   18c84:	cmp	r0, r5
   18c88:	bcs	18ca0 <argp_parse@@Base+0x2c14>
   18c8c:	bl	111cc <__errno_location@plt>
   18c90:	mov	r3, #12
   18c94:	str	r3, [r0]
   18c98:	mov	r0, #0
   18c9c:	pop	{r4, r5, r6, pc}
   18ca0:	mul	r1, r5, r4
   18ca4:	mov	r0, r6
   18ca8:	bl	178b8 <argp_parse@@Base+0x182c>
   18cac:	pop	{r4, r5, r6, pc}
   18cb0:	subs	r2, r1, #1
   18cb4:	bxeq	lr
   18cb8:	bcc	18e90 <argp_parse@@Base+0x2e04>
   18cbc:	cmp	r0, r1
   18cc0:	bls	18e74 <argp_parse@@Base+0x2de8>
   18cc4:	tst	r1, r2
   18cc8:	beq	18e80 <argp_parse@@Base+0x2df4>
   18ccc:	clz	r3, r0
   18cd0:	clz	r2, r1
   18cd4:	sub	r3, r2, r3
   18cd8:	rsbs	r3, r3, #31
   18cdc:	addne	r3, r3, r3, lsl #1
   18ce0:	mov	r2, #0
   18ce4:	addne	pc, pc, r3, lsl #2
   18ce8:	nop			; (mov r0, r0)
   18cec:	cmp	r0, r1, lsl #31
   18cf0:	adc	r2, r2, r2
   18cf4:	subcs	r0, r0, r1, lsl #31
   18cf8:	cmp	r0, r1, lsl #30
   18cfc:	adc	r2, r2, r2
   18d00:	subcs	r0, r0, r1, lsl #30
   18d04:	cmp	r0, r1, lsl #29
   18d08:	adc	r2, r2, r2
   18d0c:	subcs	r0, r0, r1, lsl #29
   18d10:	cmp	r0, r1, lsl #28
   18d14:	adc	r2, r2, r2
   18d18:	subcs	r0, r0, r1, lsl #28
   18d1c:	cmp	r0, r1, lsl #27
   18d20:	adc	r2, r2, r2
   18d24:	subcs	r0, r0, r1, lsl #27
   18d28:	cmp	r0, r1, lsl #26
   18d2c:	adc	r2, r2, r2
   18d30:	subcs	r0, r0, r1, lsl #26
   18d34:	cmp	r0, r1, lsl #25
   18d38:	adc	r2, r2, r2
   18d3c:	subcs	r0, r0, r1, lsl #25
   18d40:	cmp	r0, r1, lsl #24
   18d44:	adc	r2, r2, r2
   18d48:	subcs	r0, r0, r1, lsl #24
   18d4c:	cmp	r0, r1, lsl #23
   18d50:	adc	r2, r2, r2
   18d54:	subcs	r0, r0, r1, lsl #23
   18d58:	cmp	r0, r1, lsl #22
   18d5c:	adc	r2, r2, r2
   18d60:	subcs	r0, r0, r1, lsl #22
   18d64:	cmp	r0, r1, lsl #21
   18d68:	adc	r2, r2, r2
   18d6c:	subcs	r0, r0, r1, lsl #21
   18d70:	cmp	r0, r1, lsl #20
   18d74:	adc	r2, r2, r2
   18d78:	subcs	r0, r0, r1, lsl #20
   18d7c:	cmp	r0, r1, lsl #19
   18d80:	adc	r2, r2, r2
   18d84:	subcs	r0, r0, r1, lsl #19
   18d88:	cmp	r0, r1, lsl #18
   18d8c:	adc	r2, r2, r2
   18d90:	subcs	r0, r0, r1, lsl #18
   18d94:	cmp	r0, r1, lsl #17
   18d98:	adc	r2, r2, r2
   18d9c:	subcs	r0, r0, r1, lsl #17
   18da0:	cmp	r0, r1, lsl #16
   18da4:	adc	r2, r2, r2
   18da8:	subcs	r0, r0, r1, lsl #16
   18dac:	cmp	r0, r1, lsl #15
   18db0:	adc	r2, r2, r2
   18db4:	subcs	r0, r0, r1, lsl #15
   18db8:	cmp	r0, r1, lsl #14
   18dbc:	adc	r2, r2, r2
   18dc0:	subcs	r0, r0, r1, lsl #14
   18dc4:	cmp	r0, r1, lsl #13
   18dc8:	adc	r2, r2, r2
   18dcc:	subcs	r0, r0, r1, lsl #13
   18dd0:	cmp	r0, r1, lsl #12
   18dd4:	adc	r2, r2, r2
   18dd8:	subcs	r0, r0, r1, lsl #12
   18ddc:	cmp	r0, r1, lsl #11
   18de0:	adc	r2, r2, r2
   18de4:	subcs	r0, r0, r1, lsl #11
   18de8:	cmp	r0, r1, lsl #10
   18dec:	adc	r2, r2, r2
   18df0:	subcs	r0, r0, r1, lsl #10
   18df4:	cmp	r0, r1, lsl #9
   18df8:	adc	r2, r2, r2
   18dfc:	subcs	r0, r0, r1, lsl #9
   18e00:	cmp	r0, r1, lsl #8
   18e04:	adc	r2, r2, r2
   18e08:	subcs	r0, r0, r1, lsl #8
   18e0c:	cmp	r0, r1, lsl #7
   18e10:	adc	r2, r2, r2
   18e14:	subcs	r0, r0, r1, lsl #7
   18e18:	cmp	r0, r1, lsl #6
   18e1c:	adc	r2, r2, r2
   18e20:	subcs	r0, r0, r1, lsl #6
   18e24:	cmp	r0, r1, lsl #5
   18e28:	adc	r2, r2, r2
   18e2c:	subcs	r0, r0, r1, lsl #5
   18e30:	cmp	r0, r1, lsl #4
   18e34:	adc	r2, r2, r2
   18e38:	subcs	r0, r0, r1, lsl #4
   18e3c:	cmp	r0, r1, lsl #3
   18e40:	adc	r2, r2, r2
   18e44:	subcs	r0, r0, r1, lsl #3
   18e48:	cmp	r0, r1, lsl #2
   18e4c:	adc	r2, r2, r2
   18e50:	subcs	r0, r0, r1, lsl #2
   18e54:	cmp	r0, r1, lsl #1
   18e58:	adc	r2, r2, r2
   18e5c:	subcs	r0, r0, r1, lsl #1
   18e60:	cmp	r0, r1
   18e64:	adc	r2, r2, r2
   18e68:	subcs	r0, r0, r1
   18e6c:	mov	r0, r2
   18e70:	bx	lr
   18e74:	moveq	r0, #1
   18e78:	movne	r0, #0
   18e7c:	bx	lr
   18e80:	clz	r2, r1
   18e84:	rsb	r2, r2, #31
   18e88:	lsr	r0, r0, r2
   18e8c:	bx	lr
   18e90:	cmp	r0, #0
   18e94:	mvnne	r0, #0
   18e98:	b	190fc <argp_parse@@Base+0x3070>
   18e9c:	cmp	r1, #0
   18ea0:	beq	18e90 <argp_parse@@Base+0x2e04>
   18ea4:	push	{r0, r1, lr}
   18ea8:	bl	18cb0 <argp_parse@@Base+0x2c24>
   18eac:	pop	{r1, r2, lr}
   18eb0:	mul	r3, r2, r0
   18eb4:	sub	r1, r1, r3
   18eb8:	bx	lr
   18ebc:	cmp	r1, #0
   18ec0:	beq	190cc <argp_parse@@Base+0x3040>
   18ec4:	eor	ip, r0, r1
   18ec8:	rsbmi	r1, r1, #0
   18ecc:	subs	r2, r1, #1
   18ed0:	beq	19098 <argp_parse@@Base+0x300c>
   18ed4:	movs	r3, r0
   18ed8:	rsbmi	r3, r0, #0
   18edc:	cmp	r3, r1
   18ee0:	bls	190a4 <argp_parse@@Base+0x3018>
   18ee4:	tst	r1, r2
   18ee8:	beq	190b4 <argp_parse@@Base+0x3028>
   18eec:	clz	r2, r3
   18ef0:	clz	r0, r1
   18ef4:	sub	r2, r0, r2
   18ef8:	rsbs	r2, r2, #31
   18efc:	addne	r2, r2, r2, lsl #1
   18f00:	mov	r0, #0
   18f04:	addne	pc, pc, r2, lsl #2
   18f08:	nop			; (mov r0, r0)
   18f0c:	cmp	r3, r1, lsl #31
   18f10:	adc	r0, r0, r0
   18f14:	subcs	r3, r3, r1, lsl #31
   18f18:	cmp	r3, r1, lsl #30
   18f1c:	adc	r0, r0, r0
   18f20:	subcs	r3, r3, r1, lsl #30
   18f24:	cmp	r3, r1, lsl #29
   18f28:	adc	r0, r0, r0
   18f2c:	subcs	r3, r3, r1, lsl #29
   18f30:	cmp	r3, r1, lsl #28
   18f34:	adc	r0, r0, r0
   18f38:	subcs	r3, r3, r1, lsl #28
   18f3c:	cmp	r3, r1, lsl #27
   18f40:	adc	r0, r0, r0
   18f44:	subcs	r3, r3, r1, lsl #27
   18f48:	cmp	r3, r1, lsl #26
   18f4c:	adc	r0, r0, r0
   18f50:	subcs	r3, r3, r1, lsl #26
   18f54:	cmp	r3, r1, lsl #25
   18f58:	adc	r0, r0, r0
   18f5c:	subcs	r3, r3, r1, lsl #25
   18f60:	cmp	r3, r1, lsl #24
   18f64:	adc	r0, r0, r0
   18f68:	subcs	r3, r3, r1, lsl #24
   18f6c:	cmp	r3, r1, lsl #23
   18f70:	adc	r0, r0, r0
   18f74:	subcs	r3, r3, r1, lsl #23
   18f78:	cmp	r3, r1, lsl #22
   18f7c:	adc	r0, r0, r0
   18f80:	subcs	r3, r3, r1, lsl #22
   18f84:	cmp	r3, r1, lsl #21
   18f88:	adc	r0, r0, r0
   18f8c:	subcs	r3, r3, r1, lsl #21
   18f90:	cmp	r3, r1, lsl #20
   18f94:	adc	r0, r0, r0
   18f98:	subcs	r3, r3, r1, lsl #20
   18f9c:	cmp	r3, r1, lsl #19
   18fa0:	adc	r0, r0, r0
   18fa4:	subcs	r3, r3, r1, lsl #19
   18fa8:	cmp	r3, r1, lsl #18
   18fac:	adc	r0, r0, r0
   18fb0:	subcs	r3, r3, r1, lsl #18
   18fb4:	cmp	r3, r1, lsl #17
   18fb8:	adc	r0, r0, r0
   18fbc:	subcs	r3, r3, r1, lsl #17
   18fc0:	cmp	r3, r1, lsl #16
   18fc4:	adc	r0, r0, r0
   18fc8:	subcs	r3, r3, r1, lsl #16
   18fcc:	cmp	r3, r1, lsl #15
   18fd0:	adc	r0, r0, r0
   18fd4:	subcs	r3, r3, r1, lsl #15
   18fd8:	cmp	r3, r1, lsl #14
   18fdc:	adc	r0, r0, r0
   18fe0:	subcs	r3, r3, r1, lsl #14
   18fe4:	cmp	r3, r1, lsl #13
   18fe8:	adc	r0, r0, r0
   18fec:	subcs	r3, r3, r1, lsl #13
   18ff0:	cmp	r3, r1, lsl #12
   18ff4:	adc	r0, r0, r0
   18ff8:	subcs	r3, r3, r1, lsl #12
   18ffc:	cmp	r3, r1, lsl #11
   19000:	adc	r0, r0, r0
   19004:	subcs	r3, r3, r1, lsl #11
   19008:	cmp	r3, r1, lsl #10
   1900c:	adc	r0, r0, r0
   19010:	subcs	r3, r3, r1, lsl #10
   19014:	cmp	r3, r1, lsl #9
   19018:	adc	r0, r0, r0
   1901c:	subcs	r3, r3, r1, lsl #9
   19020:	cmp	r3, r1, lsl #8
   19024:	adc	r0, r0, r0
   19028:	subcs	r3, r3, r1, lsl #8
   1902c:	cmp	r3, r1, lsl #7
   19030:	adc	r0, r0, r0
   19034:	subcs	r3, r3, r1, lsl #7
   19038:	cmp	r3, r1, lsl #6
   1903c:	adc	r0, r0, r0
   19040:	subcs	r3, r3, r1, lsl #6
   19044:	cmp	r3, r1, lsl #5
   19048:	adc	r0, r0, r0
   1904c:	subcs	r3, r3, r1, lsl #5
   19050:	cmp	r3, r1, lsl #4
   19054:	adc	r0, r0, r0
   19058:	subcs	r3, r3, r1, lsl #4
   1905c:	cmp	r3, r1, lsl #3
   19060:	adc	r0, r0, r0
   19064:	subcs	r3, r3, r1, lsl #3
   19068:	cmp	r3, r1, lsl #2
   1906c:	adc	r0, r0, r0
   19070:	subcs	r3, r3, r1, lsl #2
   19074:	cmp	r3, r1, lsl #1
   19078:	adc	r0, r0, r0
   1907c:	subcs	r3, r3, r1, lsl #1
   19080:	cmp	r3, r1
   19084:	adc	r0, r0, r0
   19088:	subcs	r3, r3, r1
   1908c:	cmp	ip, #0
   19090:	rsbmi	r0, r0, #0
   19094:	bx	lr
   19098:	teq	ip, r0
   1909c:	rsbmi	r0, r0, #0
   190a0:	bx	lr
   190a4:	movcc	r0, #0
   190a8:	asreq	r0, ip, #31
   190ac:	orreq	r0, r0, #1
   190b0:	bx	lr
   190b4:	clz	r2, r1
   190b8:	rsb	r2, r2, #31
   190bc:	cmp	ip, #0
   190c0:	lsr	r0, r3, r2
   190c4:	rsbmi	r0, r0, #0
   190c8:	bx	lr
   190cc:	cmp	r0, #0
   190d0:	mvngt	r0, #-2147483648	; 0x80000000
   190d4:	movlt	r0, #-2147483648	; 0x80000000
   190d8:	b	190fc <argp_parse@@Base+0x3070>
   190dc:	cmp	r1, #0
   190e0:	beq	190cc <argp_parse@@Base+0x3040>
   190e4:	push	{r0, r1, lr}
   190e8:	bl	18ec4 <argp_parse@@Base+0x2e38>
   190ec:	pop	{r1, r2, lr}
   190f0:	mul	r3, r2, r0
   190f4:	sub	r1, r1, r3
   190f8:	bx	lr
   190fc:	push	{r1, lr}
   19100:	mov	r0, #8
   19104:	bl	10ff8 <raise@plt>
   19108:	pop	{r1, pc}
   1910c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19110:	mov	r7, r0
   19114:	ldr	r6, [pc, #72]	; 19164 <argp_parse@@Base+0x30d8>
   19118:	ldr	r5, [pc, #72]	; 19168 <argp_parse@@Base+0x30dc>
   1911c:	add	r6, pc, r6
   19120:	add	r5, pc, r5
   19124:	sub	r6, r6, r5
   19128:	mov	r8, r1
   1912c:	mov	r9, r2
   19130:	bl	10fc0 <calloc@plt-0x20>
   19134:	asrs	r6, r6, #2
   19138:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1913c:	mov	r4, #0
   19140:	add	r4, r4, #1
   19144:	ldr	r3, [r5], #4
   19148:	mov	r2, r9
   1914c:	mov	r1, r8
   19150:	mov	r0, r7
   19154:	blx	r3
   19158:	cmp	r6, r4
   1915c:	bne	19140 <argp_parse@@Base+0x30b4>
   19160:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19164:	andeq	r1, r1, r4, ror #27
   19168:	ldrdeq	r1, [r1], -ip
   1916c:	bx	lr

Disassembly of section .fini:

00019170 <.fini>:
   19170:	push	{r3, lr}
   19174:	pop	{r3, pc}
