
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010ab8 <.init>:
   10ab8:	push	{r3, lr}
   10abc:	bl	11410 <__assert_fail@plt+0x734>
   10ac0:	pop	{r3, pc}

Disassembly of section .plt:

00010ac4 <calloc@plt-0x14>:
   10ac4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ac8:	ldr	lr, [pc, #4]	; 10ad4 <calloc@plt-0x4>
   10acc:	add	lr, pc, lr
   10ad0:	ldr	pc, [lr, #8]!
   10ad4:	andeq	r5, r1, ip, lsr #10

00010ad8 <calloc@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #86016	; 0x15000
   10ae0:	ldr	pc, [ip, #1324]!	; 0x52c

00010ae4 <fputs_unlocked@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #86016	; 0x15000
   10aec:	ldr	pc, [ip, #1316]!	; 0x524

00010af0 <strcmp@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #86016	; 0x15000
   10af8:	ldr	pc, [ip, #1308]!	; 0x51c

00010afc <fflush@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #86016	; 0x15000
   10b04:	ldr	pc, [ip, #1300]!	; 0x514

00010b08 <free@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #86016	; 0x15000
   10b10:	ldr	pc, [ip, #1292]!	; 0x50c

00010b14 <_exit@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #86016	; 0x15000
   10b1c:	ldr	pc, [ip, #1284]!	; 0x504

00010b20 <memcpy@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #86016	; 0x15000
   10b28:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b2c <mbsinit@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #86016	; 0x15000
   10b34:	ldr	pc, [ip, #1268]!	; 0x4f4

00010b38 <memcmp@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #86016	; 0x15000
   10b40:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b44 <fputc_unlocked@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #86016	; 0x15000
   10b4c:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b50 <dcgettext@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #86016	; 0x15000
   10b58:	ldr	pc, [ip, #1244]!	; 0x4dc

00010b5c <realloc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #86016	; 0x15000
   10b64:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b68 <textdomain@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #86016	; 0x15000
   10b70:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b74 <iswprint@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #86016	; 0x15000
   10b7c:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b80 <fwrite@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #86016	; 0x15000
   10b88:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b8c <lseek64@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #86016	; 0x15000
   10b94:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b98 <__ctype_get_mb_cur_max@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #86016	; 0x15000
   10ba0:	ldr	pc, [ip, #1196]!	; 0x4ac

00010ba4 <__fpending@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #86016	; 0x15000
   10bac:	ldr	pc, [ip, #1188]!	; 0x4a4

00010bb0 <mbrtowc@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #86016	; 0x15000
   10bb8:	ldr	pc, [ip, #1180]!	; 0x49c

00010bbc <error@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #86016	; 0x15000
   10bc4:	ldr	pc, [ip, #1172]!	; 0x494

00010bc8 <getenv@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #86016	; 0x15000
   10bd0:	ldr	pc, [ip, #1164]!	; 0x48c

00010bd4 <malloc@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #86016	; 0x15000
   10bdc:	ldr	pc, [ip, #1156]!	; 0x484

00010be0 <__libc_start_main@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #86016	; 0x15000
   10be8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bec <__freading@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #86016	; 0x15000
   10bf4:	ldr	pc, [ip, #1140]!	; 0x474

00010bf8 <__gmon_start__@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #86016	; 0x15000
   10c00:	ldr	pc, [ip, #1132]!	; 0x46c

00010c04 <__ctype_b_loc@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #86016	; 0x15000
   10c0c:	ldr	pc, [ip, #1124]!	; 0x464

00010c10 <exit@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #86016	; 0x15000
   10c18:	ldr	pc, [ip, #1116]!	; 0x45c

00010c1c <strlen@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #86016	; 0x15000
   10c24:	ldr	pc, [ip, #1108]!	; 0x454

00010c28 <__errno_location@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #86016	; 0x15000
   10c30:	ldr	pc, [ip, #1100]!	; 0x44c

00010c34 <__cxa_atexit@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #86016	; 0x15000
   10c3c:	ldr	pc, [ip, #1092]!	; 0x444

00010c40 <memset@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #86016	; 0x15000
   10c48:	ldr	pc, [ip, #1084]!	; 0x43c

00010c4c <__printf_chk@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #86016	; 0x15000
   10c54:	ldr	pc, [ip, #1076]!	; 0x434

00010c58 <fileno@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #1068]!	; 0x42c

00010c64 <__fprintf_chk@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #1060]!	; 0x424

00010c70 <fclose@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #1052]!	; 0x41c

00010c7c <fseeko64@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #1044]!	; 0x414

00010c88 <__overflow@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #1036]!	; 0x40c

00010c94 <setlocale@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #1028]!	; 0x404

00010ca0 <strrchr@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #1020]!	; 0x3fc

00010cac <nl_langinfo@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #1012]!	; 0x3f4

00010cb8 <bindtextdomain@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #1004]!	; 0x3ec

00010cc4 <strncmp@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #996]!	; 0x3e4

00010cd0 <abort@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #988]!	; 0x3dc

00010cdc <__assert_fail@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #980]!	; 0x3d4

Disassembly of section .text:

00010ce8 <.text>:
   10ce8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10cec:	strd	r6, [sp, #8]
   10cf0:	mov	r6, r0
   10cf4:	movw	r0, #21448	; 0x53c8
   10cf8:	movt	r0, #1
   10cfc:	strd	r8, [sp, #16]
   10d00:	mov	r7, r1
   10d04:	strd	sl, [sp, #24]
   10d08:	str	lr, [sp, #32]
   10d0c:	sub	sp, sp, #20
   10d10:	bl	10bc8 <getenv@plt>
   10d14:	subs	r5, r0, #0
   10d18:	movne	r4, #1
   10d1c:	moveq	r4, #0
   10d20:	beq	112dc <__assert_fail@plt+0x600>
   10d24:	cmp	r6, #1
   10d28:	ble	10e78 <__assert_fail@plt+0x19c>
   10d2c:	movw	r1, #21464	; 0x53d8
   10d30:	movt	r1, #1
   10d34:	ldr	r0, [r7, #4]
   10d38:	bl	10af0 <strcmp@plt>
   10d3c:	cmp	r0, #0
   10d40:	bne	10e78 <__assert_fail@plt+0x19c>
   10d44:	ldr	r0, [r7]
   10d48:	bl	11a5c <__assert_fail@plt+0xd80>
   10d4c:	movw	r1, #21208	; 0x52d8
   10d50:	movt	r1, #1
   10d54:	mov	r0, #6
   10d58:	bl	10c94 <setlocale@plt>
   10d5c:	movw	r1, #21468	; 0x53dc
   10d60:	movt	r1, #1
   10d64:	movw	r0, #21280	; 0x5320
   10d68:	movt	r0, #1
   10d6c:	bl	10cb8 <bindtextdomain@plt>
   10d70:	movw	r0, #21280	; 0x5320
   10d74:	movt	r0, #1
   10d78:	bl	10b68 <textdomain@plt>
   10d7c:	movw	r0, #6512	; 0x1970
   10d80:	movt	r0, #1
   10d84:	bl	14dfc <__assert_fail@plt+0x4120>
   10d88:	cmp	r6, #2
   10d8c:	bne	113c4 <__assert_fail@plt+0x6e8>
   10d90:	ldr	r6, [r7, #4]
   10d94:	movw	r1, #21492	; 0x53f4
   10d98:	movt	r1, #1
   10d9c:	mov	r0, r6
   10da0:	bl	10af0 <strcmp@plt>
   10da4:	cmp	r0, #0
   10da8:	beq	113d0 <__assert_fail@plt+0x6f4>
   10dac:	mov	r0, r6
   10db0:	movw	r1, #21500	; 0x53fc
   10db4:	movt	r1, #1
   10db8:	bl	10af0 <strcmp@plt>
   10dbc:	cmp	r0, #0
   10dc0:	addne	r7, r7, #4
   10dc4:	movne	r6, #1
   10dc8:	beq	1133c <__assert_fail@plt+0x660>
   10dcc:	ldr	r0, [r7]
   10dd0:	ldrb	r3, [r0]
   10dd4:	cmp	r3, #45	; 0x2d
   10dd8:	moveq	lr, r7
   10ddc:	moveq	ip, #0
   10de0:	moveq	r8, #1
   10de4:	bne	113b4 <__assert_fail@plt+0x6d8>
   10de8:	ldrb	r2, [r0, #1]
   10dec:	mov	r7, lr
   10df0:	add	r0, r0, #1
   10df4:	cmp	r2, #0
   10df8:	beq	11394 <__assert_fail@plt+0x6b8>
   10dfc:	mov	r3, r2
   10e00:	mov	r1, r0
   10e04:	cmp	r3, #101	; 0x65
   10e08:	beq	11230 <__assert_fail@plt+0x554>
   10e0c:	cmp	r3, #110	; 0x6e
   10e10:	beq	11230 <__assert_fail@plt+0x554>
   10e14:	cmp	r3, #69	; 0x45
   10e18:	beq	11230 <__assert_fail@plt+0x554>
   10e1c:	orr	ip, r4, ip
   10e20:	tst	ip, #255	; 0xff
   10e24:	bne	10f28 <__assert_fail@plt+0x24c>
   10e28:	movw	r4, #24860	; 0x611c
   10e2c:	movt	r4, #2
   10e30:	sub	r7, r7, #4
   10e34:	mov	r5, #32
   10e38:	ldr	r0, [r7, #4]!
   10e3c:	ldr	r1, [r4]
   10e40:	bl	10ae4 <fputs_unlocked@plt>
   10e44:	subs	r6, r6, #1
   10e48:	beq	10ed4 <__assert_fail@plt+0x1f8>
   10e4c:	ldr	r0, [r4]
   10e50:	ldr	r3, [r0, #20]
   10e54:	ldr	r2, [r0, #24]
   10e58:	cmp	r3, r2
   10e5c:	addcc	r2, r3, #1
   10e60:	strcc	r2, [r0, #20]
   10e64:	strbcc	r5, [r3]
   10e68:	bcc	10e38 <__assert_fail@plt+0x15c>
   10e6c:	mov	r1, #32
   10e70:	bl	10c88 <__overflow@plt>
   10e74:	b	10e38 <__assert_fail@plt+0x15c>
   10e78:	ldr	r0, [r7], #4
   10e7c:	sub	r6, r6, #1
   10e80:	mov	r8, #1
   10e84:	bl	11a5c <__assert_fail@plt+0xd80>
   10e88:	movw	r1, #21208	; 0x52d8
   10e8c:	movt	r1, #1
   10e90:	mov	r0, #6
   10e94:	bl	10c94 <setlocale@plt>
   10e98:	movw	r1, #21468	; 0x53dc
   10e9c:	movt	r1, #1
   10ea0:	movw	r0, #21280	; 0x5320
   10ea4:	movt	r0, #1
   10ea8:	bl	10cb8 <bindtextdomain@plt>
   10eac:	movw	r0, #21280	; 0x5320
   10eb0:	movt	r0, #1
   10eb4:	bl	10b68 <textdomain@plt>
   10eb8:	movw	r0, #6512	; 0x1970
   10ebc:	movt	r0, #1
   10ec0:	bl	14dfc <__assert_fail@plt+0x4120>
   10ec4:	cmp	r5, #0
   10ec8:	bne	10f28 <__assert_fail@plt+0x24c>
   10ecc:	cmp	r6, #0
   10ed0:	bgt	10e28 <__assert_fail@plt+0x14c>
   10ed4:	cmp	r8, #0
   10ed8:	beq	10f08 <__assert_fail@plt+0x22c>
   10edc:	movw	r3, #24860	; 0x611c
   10ee0:	movt	r3, #2
   10ee4:	ldr	r0, [r3]
   10ee8:	ldr	r3, [r0, #20]
   10eec:	ldr	r2, [r0, #24]
   10ef0:	cmp	r3, r2
   10ef4:	addcc	r1, r3, #1
   10ef8:	movcc	r2, #10
   10efc:	strcc	r1, [r0, #20]
   10f00:	strbcc	r2, [r3]
   10f04:	bcs	11388 <__assert_fail@plt+0x6ac>
   10f08:	mov	r0, #0
   10f0c:	add	sp, sp, #20
   10f10:	ldrd	r4, [sp]
   10f14:	ldrd	r6, [sp, #8]
   10f18:	ldrd	r8, [sp, #16]
   10f1c:	ldrd	sl, [sp, #24]
   10f20:	add	sp, sp, #32
   10f24:	pop	{pc}		; (ldr pc, [sp], #4)
   10f28:	cmp	r6, #0
   10f2c:	ble	10ed4 <__assert_fail@plt+0x1f8>
   10f30:	movw	r9, #24860	; 0x611c
   10f34:	movt	r9, #2
   10f38:	sub	r7, r7, #4
   10f3c:	ldr	r5, [r7, #4]!
   10f40:	b	10f6c <__assert_fail@plt+0x290>
   10f44:	mov	sl, r3
   10f48:	ldr	r0, [r9]
   10f4c:	ldr	r2, [r0, #20]
   10f50:	ldr	r1, [r0, #24]
   10f54:	cmp	r2, r1
   10f58:	addcc	r1, r2, #1
   10f5c:	strcc	r1, [r0, #20]
   10f60:	strbcc	r3, [r2]
   10f64:	bcs	11298 <__assert_fail@plt+0x5bc>
   10f68:	mov	r5, r4
   10f6c:	mov	r4, r5
   10f70:	ldrb	r3, [r4], #1
   10f74:	cmp	r3, #0
   10f78:	beq	112a4 <__assert_fail@plt+0x5c8>
   10f7c:	cmp	r3, #92	; 0x5c
   10f80:	bne	10f44 <__assert_fail@plt+0x268>
   10f84:	ldrb	sl, [r5, #1]
   10f88:	cmp	sl, #0
   10f8c:	beq	10f44 <__assert_fail@plt+0x268>
   10f90:	sub	r3, sl, #48	; 0x30
   10f94:	add	r4, r5, #2
   10f98:	cmp	r3, #72	; 0x48
   10f9c:	ldrls	pc, [pc, r3, lsl #2]
   10fa0:	b	11208 <__assert_fail@plt+0x52c>
   10fa4:	andeq	r1, r1, r0, lsr r1
   10fa8:	andeq	r1, r1, ip, ror #1
   10fac:	andeq	r1, r1, ip, ror #1
   10fb0:	andeq	r1, r1, ip, ror #1
   10fb4:	andeq	r1, r1, ip, ror #1
   10fb8:	andeq	r1, r1, ip, ror #1
   10fbc:	andeq	r1, r1, ip, ror #1
   10fc0:	andeq	r1, r1, ip, ror #1
   10fc4:	andeq	r1, r1, r8, lsl #4
   10fc8:	andeq	r1, r1, r8, lsl #4
   10fcc:	andeq	r1, r1, r8, lsl #4
   10fd0:	andeq	r1, r1, r8, lsl #4
   10fd4:	andeq	r1, r1, r8, lsl #4
   10fd8:	andeq	r1, r1, r8, lsl #4
   10fdc:	andeq	r1, r1, r8, lsl #4
   10fe0:	andeq	r1, r1, r8, lsl #4
   10fe4:	andeq	r1, r1, r8, lsl #4
   10fe8:	andeq	r1, r1, r8, lsl #4
   10fec:	andeq	r1, r1, r8, lsl #4
   10ff0:	andeq	r1, r1, r8, lsl #4
   10ff4:	andeq	r1, r1, r8, lsl #4
   10ff8:	andeq	r1, r1, r8, lsl #4
   10ffc:	andeq	r1, r1, r8, lsl #4
   11000:	andeq	r1, r1, r8, lsl #4
   11004:	andeq	r1, r1, r8, lsl #4
   11008:	andeq	r1, r1, r8, lsl #4
   1100c:	andeq	r1, r1, r8, lsl #4
   11010:	andeq	r1, r1, r8, lsl #4
   11014:	andeq	r1, r1, r8, lsl #4
   11018:	andeq	r1, r1, r8, lsl #4
   1101c:	andeq	r1, r1, r8, lsl #4
   11020:	andeq	r1, r1, r8, lsl #4
   11024:	andeq	r1, r1, r8, lsl #4
   11028:	andeq	r1, r1, r8, lsl #4
   1102c:	andeq	r1, r1, r8, lsl #4
   11030:	andeq	r1, r1, r8, lsl #4
   11034:	andeq	r1, r1, r8, lsl #4
   11038:	andeq	r1, r1, r8, lsl #4
   1103c:	andeq	r1, r1, r8, lsl #4
   11040:	andeq	r1, r1, r8, lsl #4
   11044:	andeq	r1, r1, r8, lsl #4
   11048:	andeq	r1, r1, r8, lsl #4
   1104c:	andeq	r1, r1, r8, lsl #4
   11050:	andeq	r1, r1, r8, lsl #4
   11054:	andeq	r1, r1, r8, asr #1
   11058:	andeq	r1, r1, r8, lsl #4
   1105c:	andeq	r1, r1, r8, lsl #4
   11060:	andeq	r1, r1, r8, lsl #4
   11064:	andeq	r1, r1, r8, lsl #4
   11068:	andeq	r1, r1, r0, ror #1
   1106c:	ldrdeq	r1, [r1], -r4
   11070:	andeq	r0, r1, r8, lsl #30
   11074:	andeq	r1, r1, r8, lsl #4
   11078:	strdeq	r1, [r1], -ip
   1107c:	strdeq	r1, [r1], -r0
   11080:	andeq	r1, r1, r8, lsl #4
   11084:	andeq	r1, r1, r8, lsl #4
   11088:	andeq	r1, r1, r8, lsl #4
   1108c:	andeq	r1, r1, r8, lsl #4
   11090:	andeq	r1, r1, r8, lsl #4
   11094:	andeq	r1, r1, r8, lsl #4
   11098:	andeq	r1, r1, r8, lsl #4
   1109c:	andeq	r1, r1, r4, ror #3
   110a0:	andeq	r1, r1, r8, lsl #4
   110a4:	andeq	r1, r1, r8, lsl #4
   110a8:	andeq	r1, r1, r8, lsl #4
   110ac:	ldrdeq	r1, [r1], -r8
   110b0:	andeq	r1, r1, r8, lsl #4
   110b4:	andeq	r1, r1, ip, asr #3
   110b8:	andeq	r1, r1, r8, lsl #4
   110bc:	andeq	r1, r1, r0, asr #3
   110c0:	andeq	r1, r1, r8, lsl #4
   110c4:	andeq	r1, r1, r8, asr r1
   110c8:	mov	r3, sl
   110cc:	mov	sl, #92	; 0x5c
   110d0:	b	10f48 <__assert_fail@plt+0x26c>
   110d4:	mov	sl, #8
   110d8:	mov	r3, sl
   110dc:	b	10f48 <__assert_fail@plt+0x26c>
   110e0:	mov	sl, #7
   110e4:	mov	r3, sl
   110e8:	b	10f48 <__assert_fail@plt+0x26c>
   110ec:	ldrb	r2, [r5, #2]
   110f0:	sub	r2, r2, #48	; 0x30
   110f4:	uxtb	r3, r3
   110f8:	uxtb	r2, r2
   110fc:	cmp	r2, #7
   11100:	bhi	11110 <__assert_fail@plt+0x434>
   11104:	add	r3, r2, r3, lsl #3
   11108:	add	r4, r4, #1
   1110c:	and	r3, r3, #255	; 0xff
   11110:	ldrb	r2, [r4]
   11114:	sub	r1, r2, #48	; 0x30
   11118:	cmp	r1, #7
   1111c:	addls	r3, r2, r3, lsl #3
   11120:	addls	r4, r4, #1
   11124:	subls	r3, r3, #48	; 0x30
   11128:	andls	r3, r3, #255	; 0xff
   1112c:	b	10f44 <__assert_fail@plt+0x268>
   11130:	ldrb	sl, [r5, #2]
   11134:	sub	r3, sl, #48	; 0x30
   11138:	uxtb	r2, r3
   1113c:	cmp	r2, #7
   11140:	movhi	sl, #0
   11144:	movhi	r3, sl
   11148:	bhi	10f48 <__assert_fail@plt+0x26c>
   1114c:	ldrb	r2, [r5, #3]
   11150:	add	r4, r5, #3
   11154:	b	110f0 <__assert_fail@plt+0x414>
   11158:	ldrb	fp, [r5, #2]
   1115c:	bl	10c04 <__ctype_b_loc@plt>
   11160:	ldr	r2, [r0]
   11164:	lsl	r3, fp, #1
   11168:	ldrh	r3, [r2, r3]
   1116c:	tst	r3, #4096	; 0x1000
   11170:	beq	11208 <__assert_fail@plt+0x52c>
   11174:	mov	r0, fp
   11178:	bl	114c4 <__assert_fail@plt+0x7e8>
   1117c:	ldrb	r1, [r5, #3]
   11180:	uxtb	r3, r0
   11184:	lsl	r0, r1, #1
   11188:	ldrh	r2, [r2, r0]
   1118c:	tst	r2, #4096	; 0x1000
   11190:	addeq	r4, r5, #3
   11194:	moveq	sl, r3
   11198:	beq	10f48 <__assert_fail@plt+0x26c>
   1119c:	lsl	r3, r3, #4
   111a0:	mov	r0, r1
   111a4:	add	r4, r5, #4
   111a8:	uxtb	r2, r3
   111ac:	bl	114c4 <__assert_fail@plt+0x7e8>
   111b0:	add	r3, r2, r0
   111b4:	uxtb	r3, r3
   111b8:	mov	sl, r3
   111bc:	b	10f48 <__assert_fail@plt+0x26c>
   111c0:	mov	sl, #11
   111c4:	mov	r3, sl
   111c8:	b	10f48 <__assert_fail@plt+0x26c>
   111cc:	mov	sl, #9
   111d0:	mov	r3, sl
   111d4:	b	10f48 <__assert_fail@plt+0x26c>
   111d8:	mov	sl, #13
   111dc:	mov	r3, sl
   111e0:	b	10f48 <__assert_fail@plt+0x26c>
   111e4:	mov	sl, #10
   111e8:	mov	r3, sl
   111ec:	b	10f48 <__assert_fail@plt+0x26c>
   111f0:	mov	sl, #12
   111f4:	mov	r3, sl
   111f8:	b	10f48 <__assert_fail@plt+0x26c>
   111fc:	mov	sl, #27
   11200:	mov	r3, sl
   11204:	b	10f48 <__assert_fail@plt+0x26c>
   11208:	ldr	r0, [r9]
   1120c:	ldrd	r2, [r0, #20]
   11210:	cmp	r3, r2
   11214:	bls	113a4 <__assert_fail@plt+0x6c8>
   11218:	add	r3, r2, #1
   1121c:	mov	r1, #92	; 0x5c
   11220:	str	r3, [r0, #20]
   11224:	mov	r3, sl
   11228:	strb	r1, [r2]
   1122c:	b	10f48 <__assert_fail@plt+0x26c>
   11230:	ldrb	r3, [r1, #1]!
   11234:	cmp	r3, #0
   11238:	bne	10e04 <__assert_fail@plt+0x128>
   1123c:	cmp	r2, #101	; 0x65
   11240:	moveq	ip, #1
   11244:	beq	1125c <__assert_fail@plt+0x580>
   11248:	cmp	r2, #110	; 0x6e
   1124c:	moveq	r8, #0
   11250:	beq	1125c <__assert_fail@plt+0x580>
   11254:	cmp	r2, #69	; 0x45
   11258:	moveq	ip, #0
   1125c:	ldrb	r2, [r0, #1]!
   11260:	cmp	r2, #0
   11264:	bne	1123c <__assert_fail@plt+0x560>
   11268:	add	r7, lr, #4
   1126c:	subs	r6, r6, #1
   11270:	mov	lr, r7
   11274:	beq	10ed4 <__assert_fail@plt+0x1f8>
   11278:	ldr	r0, [r7]
   1127c:	ldrb	r3, [r0]
   11280:	cmp	r3, #45	; 0x2d
   11284:	beq	10de8 <__assert_fail@plt+0x10c>
   11288:	orr	ip, r4, ip
   1128c:	tst	ip, #255	; 0xff
   11290:	beq	10e28 <__assert_fail@plt+0x14c>
   11294:	b	10f30 <__assert_fail@plt+0x254>
   11298:	mov	r1, sl
   1129c:	bl	10c88 <__overflow@plt>
   112a0:	b	10f68 <__assert_fail@plt+0x28c>
   112a4:	subs	r6, r6, #1
   112a8:	beq	10ed4 <__assert_fail@plt+0x1f8>
   112ac:	ldr	r0, [r9]
   112b0:	ldr	r3, [r0, #20]
   112b4:	ldr	r2, [r0, #24]
   112b8:	cmp	r3, r2
   112bc:	addcc	r1, r3, #1
   112c0:	movcc	r2, #32
   112c4:	strcc	r1, [r0, #20]
   112c8:	strbcc	r2, [r3]
   112cc:	bcc	10f3c <__assert_fail@plt+0x260>
   112d0:	mov	r1, #32
   112d4:	bl	10c88 <__overflow@plt>
   112d8:	b	10f3c <__assert_fail@plt+0x260>
   112dc:	ldr	r0, [r7]
   112e0:	bl	11a5c <__assert_fail@plt+0xd80>
   112e4:	movw	r1, #21208	; 0x52d8
   112e8:	movt	r1, #1
   112ec:	mov	r0, #6
   112f0:	bl	10c94 <setlocale@plt>
   112f4:	movw	r1, #21468	; 0x53dc
   112f8:	movt	r1, #1
   112fc:	movw	r0, #21280	; 0x5320
   11300:	movt	r0, #1
   11304:	bl	10cb8 <bindtextdomain@plt>
   11308:	movw	r0, #21280	; 0x5320
   1130c:	movt	r0, #1
   11310:	bl	10b68 <textdomain@plt>
   11314:	movw	r0, #6512	; 0x1970
   11318:	movt	r0, #1
   1131c:	bl	14dfc <__assert_fail@plt+0x4120>
   11320:	cmp	r6, #2
   11324:	beq	10d90 <__assert_fail@plt+0xb4>
   11328:	sub	r6, r6, #1
   1132c:	add	r7, r7, #4
   11330:	cmp	r6, #0
   11334:	bgt	10dcc <__assert_fail@plt+0xf0>
   11338:	b	10edc <__assert_fail@plt+0x200>
   1133c:	movw	r1, #21512	; 0x5408
   11340:	movt	r1, #1
   11344:	movw	r2, #21524	; 0x5414
   11348:	movt	r2, #1
   1134c:	movw	r3, #24776	; 0x60c8
   11350:	movt	r3, #2
   11354:	str	r0, [sp, #8]
   11358:	movw	r0, #24860	; 0x611c
   1135c:	movt	r0, #2
   11360:	str	r2, [sp]
   11364:	movw	r2, #21276	; 0x531c
   11368:	movt	r2, #1
   1136c:	str	r1, [sp, #4]
   11370:	movw	r1, #20064	; 0x4e60
   11374:	movt	r1, #1
   11378:	ldr	r0, [r0]
   1137c:	ldr	r3, [r3]
   11380:	bl	141e8 <__assert_fail@plt+0x350c>
   11384:	b	10f08 <__assert_fail@plt+0x22c>
   11388:	mov	r1, #10
   1138c:	bl	10c88 <__overflow@plt>
   11390:	b	10f08 <__assert_fail@plt+0x22c>
   11394:	orr	ip, r4, ip
   11398:	tst	ip, #255	; 0xff
   1139c:	bne	10f30 <__assert_fail@plt+0x254>
   113a0:	b	10ecc <__assert_fail@plt+0x1f0>
   113a4:	mov	r1, #92	; 0x5c
   113a8:	bl	10c88 <__overflow@plt>
   113ac:	mov	r3, sl
   113b0:	b	10f48 <__assert_fail@plt+0x26c>
   113b4:	cmp	r5, #0
   113b8:	mov	r8, #1
   113bc:	bne	10f30 <__assert_fail@plt+0x254>
   113c0:	b	10e28 <__assert_fail@plt+0x14c>
   113c4:	sub	r6, r6, #1
   113c8:	add	r7, r7, #4
   113cc:	b	10dcc <__assert_fail@plt+0xf0>
   113d0:	bl	115a4 <__assert_fail@plt+0x8c8>
   113d4:	mov	fp, #0
   113d8:	mov	lr, #0
   113dc:	pop	{r1}		; (ldr r1, [sp], #4)
   113e0:	mov	r2, sp
   113e4:	push	{r2}		; (str r2, [sp, #-4]!)
   113e8:	push	{r0}		; (str r0, [sp, #-4]!)
   113ec:	ldr	ip, [pc, #16]	; 11404 <__assert_fail@plt+0x728>
   113f0:	push	{ip}		; (str ip, [sp, #-4]!)
   113f4:	ldr	r0, [pc, #12]	; 11408 <__assert_fail@plt+0x72c>
   113f8:	ldr	r3, [pc, #12]	; 1140c <__assert_fail@plt+0x730>
   113fc:	bl	10be0 <__libc_start_main@plt>
   11400:	bl	10cd0 <abort@plt>
   11404:	strdeq	r4, [r1], -r8
   11408:	andeq	r0, r1, r8, ror #25
   1140c:	muleq	r1, r8, sp
   11410:	ldr	r3, [pc, #20]	; 1142c <__assert_fail@plt+0x750>
   11414:	ldr	r2, [pc, #20]	; 11430 <__assert_fail@plt+0x754>
   11418:	add	r3, pc, r3
   1141c:	ldr	r2, [r3, r2]
   11420:	cmp	r2, #0
   11424:	bxeq	lr
   11428:	b	10bf8 <__gmon_start__@plt>
   1142c:	andeq	r4, r1, r0, ror #23
   11430:	strheq	r0, [r0], -ip
   11434:	ldr	r0, [pc, #24]	; 11454 <__assert_fail@plt+0x778>
   11438:	ldr	r3, [pc, #24]	; 11458 <__assert_fail@plt+0x77c>
   1143c:	cmp	r3, r0
   11440:	bxeq	lr
   11444:	ldr	r3, [pc, #16]	; 1145c <__assert_fail@plt+0x780>
   11448:	cmp	r3, #0
   1144c:	bxeq	lr
   11450:	bx	r3
   11454:	andeq	r6, r2, r0, lsl r1
   11458:	andeq	r6, r2, r0, lsl r1
   1145c:	andeq	r0, r0, r0
   11460:	ldr	r0, [pc, #36]	; 1148c <__assert_fail@plt+0x7b0>
   11464:	ldr	r1, [pc, #36]	; 11490 <__assert_fail@plt+0x7b4>
   11468:	sub	r1, r1, r0
   1146c:	asr	r1, r1, #2
   11470:	add	r1, r1, r1, lsr #31
   11474:	asrs	r1, r1, #1
   11478:	bxeq	lr
   1147c:	ldr	r3, [pc, #16]	; 11494 <__assert_fail@plt+0x7b8>
   11480:	cmp	r3, #0
   11484:	bxeq	lr
   11488:	bx	r3
   1148c:	andeq	r6, r2, r0, lsl r1
   11490:	andeq	r6, r2, r0, lsl r1
   11494:	andeq	r0, r0, r0
   11498:	push	{r4, lr}
   1149c:	ldr	r4, [pc, #24]	; 114bc <__assert_fail@plt+0x7e0>
   114a0:	ldrb	r3, [r4]
   114a4:	cmp	r3, #0
   114a8:	popne	{r4, pc}
   114ac:	bl	11434 <__assert_fail@plt+0x758>
   114b0:	mov	r3, #1
   114b4:	strb	r3, [r4]
   114b8:	pop	{r4, pc}
   114bc:	andeq	r6, r2, r0, lsr #2
   114c0:	b	11460 <__assert_fail@plt+0x784>
   114c4:	sub	r3, r0, #65	; 0x41
   114c8:	cmp	r3, #37	; 0x25
   114cc:	ldrls	pc, [pc, r3, lsl #2]
   114d0:	b	1159c <__assert_fail@plt+0x8c0>
   114d4:	andeq	r1, r1, ip, ror #10
   114d8:	muleq	r1, r4, r5
   114dc:	andeq	r1, r1, r4, ror r5
   114e0:	andeq	r1, r1, ip, ror r5
   114e4:	andeq	r1, r1, r4, lsl #11
   114e8:	andeq	r1, r1, ip, lsl #11
   114ec:	muleq	r1, ip, r5
   114f0:	muleq	r1, ip, r5
   114f4:	muleq	r1, ip, r5
   114f8:	muleq	r1, ip, r5
   114fc:	muleq	r1, ip, r5
   11500:	muleq	r1, ip, r5
   11504:	muleq	r1, ip, r5
   11508:	muleq	r1, ip, r5
   1150c:	muleq	r1, ip, r5
   11510:	muleq	r1, ip, r5
   11514:	muleq	r1, ip, r5
   11518:	muleq	r1, ip, r5
   1151c:	muleq	r1, ip, r5
   11520:	muleq	r1, ip, r5
   11524:	muleq	r1, ip, r5
   11528:	muleq	r1, ip, r5
   1152c:	muleq	r1, ip, r5
   11530:	muleq	r1, ip, r5
   11534:	muleq	r1, ip, r5
   11538:	muleq	r1, ip, r5
   1153c:	muleq	r1, ip, r5
   11540:	muleq	r1, ip, r5
   11544:	muleq	r1, ip, r5
   11548:	muleq	r1, ip, r5
   1154c:	muleq	r1, ip, r5
   11550:	muleq	r1, ip, r5
   11554:	andeq	r1, r1, ip, ror #10
   11558:	muleq	r1, r4, r5
   1155c:	andeq	r1, r1, r4, ror r5
   11560:	andeq	r1, r1, ip, ror r5
   11564:	andeq	r1, r1, r4, lsl #11
   11568:	andeq	r1, r1, ip, lsl #11
   1156c:	mov	r0, #10
   11570:	bx	lr
   11574:	mov	r0, #12
   11578:	bx	lr
   1157c:	mov	r0, #13
   11580:	bx	lr
   11584:	mov	r0, #14
   11588:	bx	lr
   1158c:	mov	r0, #15
   11590:	bx	lr
   11594:	mov	r0, #11
   11598:	bx	lr
   1159c:	sub	r0, r0, #48	; 0x30
   115a0:	bx	lr
   115a4:	subs	r4, r0, #0
   115a8:	push	{lr}		; (str lr, [sp, #-4]!)
   115ac:	sub	sp, sp, #60	; 0x3c
   115b0:	beq	115d4 <__assert_fail@plt+0x8f8>
   115b4:	movw	r3, #20000	; 0x4e20
   115b8:	movt	r3, #1
   115bc:	movw	r1, #20072	; 0x4e68
   115c0:	movt	r1, #1
   115c4:	movw	r0, #20084	; 0x4e74
   115c8:	movt	r0, #1
   115cc:	mov	r2, #40	; 0x28
   115d0:	bl	10cdc <__assert_fail@plt>
   115d4:	mov	r2, #5
   115d8:	movw	r1, #20108	; 0x4e8c
   115dc:	movt	r1, #1
   115e0:	movw	r6, #24860	; 0x611c
   115e4:	movt	r6, #2
   115e8:	bl	10b50 <dcgettext@plt>
   115ec:	movw	r3, #24876	; 0x612c
   115f0:	movt	r3, #2
   115f4:	ldr	r3, [r3]
   115f8:	mov	r1, r0
   115fc:	mov	r0, #1
   11600:	mov	r2, r3
   11604:	bl	10c4c <__printf_chk@plt>
   11608:	mov	r2, #5
   1160c:	mov	r0, r4
   11610:	movw	r1, #20172	; 0x4ecc
   11614:	movt	r1, #1
   11618:	bl	10b50 <dcgettext@plt>
   1161c:	ldr	r1, [r6]
   11620:	bl	10ae4 <fputs_unlocked@plt>
   11624:	mov	r2, #5
   11628:	mov	r0, r4
   1162c:	movw	r1, #20268	; 0x4f2c
   11630:	movt	r1, #1
   11634:	bl	10b50 <dcgettext@plt>
   11638:	ldr	r1, [r6]
   1163c:	bl	10ae4 <fputs_unlocked@plt>
   11640:	mov	r2, #5
   11644:	mov	r0, r4
   11648:	movw	r1, #20400	; 0x4fb0
   1164c:	movt	r1, #1
   11650:	bl	10b50 <dcgettext@plt>
   11654:	ldr	r1, [r6]
   11658:	bl	10ae4 <fputs_unlocked@plt>
   1165c:	mov	r2, #5
   11660:	mov	r0, r4
   11664:	movw	r1, #20448	; 0x4fe0
   11668:	movt	r1, #1
   1166c:	bl	10b50 <dcgettext@plt>
   11670:	ldr	r1, [r6]
   11674:	bl	10ae4 <fputs_unlocked@plt>
   11678:	mov	r2, #5
   1167c:	mov	r0, r4
   11680:	movw	r1, #20504	; 0x5018
   11684:	movt	r1, #1
   11688:	bl	10b50 <dcgettext@plt>
   1168c:	ldr	r1, [r6]
   11690:	bl	10ae4 <fputs_unlocked@plt>
   11694:	mov	r2, #5
   11698:	mov	r0, r4
   1169c:	movw	r1, #20568	; 0x5058
   116a0:	movt	r1, #1
   116a4:	bl	10b50 <dcgettext@plt>
   116a8:	ldr	r1, [r6]
   116ac:	bl	10ae4 <fputs_unlocked@plt>
   116b0:	mov	r2, #5
   116b4:	mov	r0, r4
   116b8:	movw	r1, #20800	; 0x5140
   116bc:	movt	r1, #1
   116c0:	bl	10b50 <dcgettext@plt>
   116c4:	ldr	r1, [r6]
   116c8:	bl	10ae4 <fputs_unlocked@plt>
   116cc:	mov	r2, #5
   116d0:	mov	r0, r4
   116d4:	movw	r1, #20912	; 0x51b0
   116d8:	movt	r1, #1
   116dc:	bl	10b50 <dcgettext@plt>
   116e0:	mov	r1, r0
   116e4:	movw	r2, #20064	; 0x4e60
   116e8:	movt	r2, #1
   116ec:	mov	r0, #1
   116f0:	bl	10c4c <__printf_chk@plt>
   116f4:	mov	r2, #5
   116f8:	mov	r0, r4
   116fc:	movw	r1, #21104	; 0x5270
   11700:	movt	r1, #1
   11704:	bl	10b50 <dcgettext@plt>
   11708:	ldr	r1, [r6]
   1170c:	bl	10ae4 <fputs_unlocked@plt>
   11710:	movw	r0, #20000	; 0x4e20
   11714:	movt	r0, #1
   11718:	ldr	ip, [r0, #8]
   1171c:	ldrd	r2, [r0, #16]
   11720:	ldr	r4, [r0, #12]
   11724:	subs	r1, ip, #0
   11728:	str	ip, [sp]
   1172c:	ldrd	r8, [r0, #24]
   11730:	strd	r2, [sp, #8]
   11734:	ldrd	r2, [r0, #32]
   11738:	str	r4, [sp, #4]
   1173c:	ldrd	r4, [r0, #40]	; 0x28
   11740:	strd	r8, [sp, #16]
   11744:	ldrd	r8, [r0, #48]	; 0x30
   11748:	strd	r2, [sp, #24]
   1174c:	ldrd	r2, [r0, #56]	; 0x38
   11750:	strd	r4, [sp, #32]
   11754:	movwne	r5, #20064	; 0x4e60
   11758:	mov	r4, sp
   1175c:	movtne	r5, #1
   11760:	strd	r8, [sp, #40]	; 0x28
   11764:	strd	r2, [sp, #48]	; 0x30
   11768:	bne	11864 <__assert_fail@plt+0xb88>
   1176c:	ldr	r4, [r4, #4]
   11770:	movw	r1, #21212	; 0x52dc
   11774:	movt	r1, #1
   11778:	mov	r2, #5
   1177c:	cmp	r4, #0
   11780:	beq	11878 <__assert_fail@plt+0xb9c>
   11784:	mov	r0, #0
   11788:	bl	10b50 <dcgettext@plt>
   1178c:	mov	r1, r0
   11790:	movw	r3, #21236	; 0x52f4
   11794:	movt	r3, #1
   11798:	movw	r2, #21276	; 0x531c
   1179c:	movt	r2, #1
   117a0:	mov	r0, #1
   117a4:	bl	10c4c <__printf_chk@plt>
   117a8:	mov	r1, #0
   117ac:	mov	r0, #5
   117b0:	bl	10c94 <setlocale@plt>
   117b4:	cmp	r0, #0
   117b8:	movweq	r5, #20064	; 0x4e60
   117bc:	movteq	r5, #1
   117c0:	beq	117e4 <__assert_fail@plt+0xb08>
   117c4:	movw	r1, #21292	; 0x532c
   117c8:	movt	r1, #1
   117cc:	mov	r2, #3
   117d0:	movw	r5, #20064	; 0x4e60
   117d4:	movt	r5, #1
   117d8:	bl	10cc4 <strncmp@plt>
   117dc:	cmp	r0, #0
   117e0:	bne	11930 <__assert_fail@plt+0xc54>
   117e4:	mov	r2, #5
   117e8:	movw	r1, #21368	; 0x5378
   117ec:	movt	r1, #1
   117f0:	mov	r0, #0
   117f4:	bl	10b50 <dcgettext@plt>
   117f8:	mov	r1, r0
   117fc:	movw	r3, #20064	; 0x4e60
   11800:	movt	r3, #1
   11804:	movw	r2, #21236	; 0x52f4
   11808:	movt	r2, #1
   1180c:	mov	r0, #1
   11810:	bl	10c4c <__printf_chk@plt>
   11814:	mov	r2, #5
   11818:	movw	r1, #21396	; 0x5394
   1181c:	movt	r1, #1
   11820:	mov	r0, #0
   11824:	bl	10b50 <dcgettext@plt>
   11828:	movw	r2, #21544	; 0x5428
   1182c:	movt	r2, #1
   11830:	cmp	r4, r5
   11834:	movw	r3, #21208	; 0x52d8
   11838:	movt	r3, #1
   1183c:	mov	r1, r0
   11840:	moveq	r3, r2
   11844:	mov	r2, r4
   11848:	mov	r0, #1
   1184c:	bl	10c4c <__printf_chk@plt>
   11850:	mov	r0, #0
   11854:	bl	10c10 <exit@plt>
   11858:	ldr	r1, [r4, #8]!
   1185c:	cmp	r1, #0
   11860:	beq	1176c <__assert_fail@plt+0xa90>
   11864:	mov	r0, r5
   11868:	bl	10af0 <strcmp@plt>
   1186c:	cmp	r0, #0
   11870:	bne	11858 <__assert_fail@plt+0xb7c>
   11874:	b	1176c <__assert_fail@plt+0xa90>
   11878:	mov	r0, r4
   1187c:	bl	10b50 <dcgettext@plt>
   11880:	mov	r1, r0
   11884:	movw	r3, #21236	; 0x52f4
   11888:	movt	r3, #1
   1188c:	movw	r2, #21276	; 0x531c
   11890:	movt	r2, #1
   11894:	mov	r0, #1
   11898:	bl	10c4c <__printf_chk@plt>
   1189c:	mov	r1, r4
   118a0:	mov	r0, #5
   118a4:	bl	10c94 <setlocale@plt>
   118a8:	cmp	r0, #0
   118ac:	beq	118c8 <__assert_fail@plt+0xbec>
   118b0:	movw	r1, #21292	; 0x532c
   118b4:	movt	r1, #1
   118b8:	mov	r2, #3
   118bc:	bl	10cc4 <strncmp@plt>
   118c0:	cmp	r0, #0
   118c4:	bne	11924 <__assert_fail@plt+0xc48>
   118c8:	mov	r2, #5
   118cc:	movw	r1, #21368	; 0x5378
   118d0:	movt	r1, #1
   118d4:	mov	r0, #0
   118d8:	bl	10b50 <dcgettext@plt>
   118dc:	mov	r1, r0
   118e0:	movw	r3, #20064	; 0x4e60
   118e4:	movt	r3, #1
   118e8:	movw	r2, #21236	; 0x52f4
   118ec:	movt	r2, #1
   118f0:	mov	r0, #1
   118f4:	bl	10c4c <__printf_chk@plt>
   118f8:	movw	r1, #21396	; 0x5394
   118fc:	movt	r1, #1
   11900:	mov	r2, #5
   11904:	mov	r0, #0
   11908:	bl	10b50 <dcgettext@plt>
   1190c:	movw	r4, #20064	; 0x4e60
   11910:	movt	r4, #1
   11914:	movw	r3, #21544	; 0x5428
   11918:	movt	r3, #1
   1191c:	mov	r1, r0
   11920:	b	11844 <__assert_fail@plt+0xb68>
   11924:	movw	r5, #20064	; 0x4e60
   11928:	movt	r5, #1
   1192c:	mov	r4, r5
   11930:	mov	r2, #5
   11934:	movw	r1, #21296	; 0x5330
   11938:	movt	r1, #1
   1193c:	mov	r0, #0
   11940:	bl	10b50 <dcgettext@plt>
   11944:	ldr	r1, [r6]
   11948:	bl	10ae4 <fputs_unlocked@plt>
   1194c:	b	117e4 <__assert_fail@plt+0xb08>
   11950:	movw	r3, #24868	; 0x6124
   11954:	movt	r3, #2
   11958:	str	r0, [r3]
   1195c:	bx	lr
   11960:	movw	r3, #24868	; 0x6124
   11964:	movt	r3, #2
   11968:	strb	r0, [r3, #4]
   1196c:	bx	lr
   11970:	movw	r3, #24860	; 0x611c
   11974:	movt	r3, #2
   11978:	strd	r4, [sp, #-16]!
   1197c:	ldr	r0, [r3]
   11980:	str	r6, [sp, #8]
   11984:	str	lr, [sp, #12]
   11988:	sub	sp, sp, #8
   1198c:	bl	148bc <__assert_fail@plt+0x3be0>
   11990:	cmp	r0, #0
   11994:	beq	119c0 <__assert_fail@plt+0xce4>
   11998:	movw	r4, #24868	; 0x6124
   1199c:	movt	r4, #2
   119a0:	ldrb	r6, [r4, #4]
   119a4:	bl	10c28 <__errno_location@plt>
   119a8:	mov	r5, r0
   119ac:	cmp	r6, #0
   119b0:	beq	119ec <__assert_fail@plt+0xd10>
   119b4:	ldr	r3, [r0]
   119b8:	cmp	r3, #32
   119bc:	bne	119ec <__assert_fail@plt+0xd10>
   119c0:	movw	r3, #24856	; 0x6118
   119c4:	movt	r3, #2
   119c8:	ldr	r0, [r3]
   119cc:	bl	148bc <__assert_fail@plt+0x3be0>
   119d0:	cmp	r0, #0
   119d4:	bne	11a34 <__assert_fail@plt+0xd58>
   119d8:	add	sp, sp, #8
   119dc:	ldrd	r4, [sp]
   119e0:	ldr	r6, [sp, #8]
   119e4:	add	sp, sp, #12
   119e8:	pop	{pc}		; (ldr pc, [sp], #4)
   119ec:	movw	r1, #21660	; 0x549c
   119f0:	movt	r1, #1
   119f4:	mov	r2, #5
   119f8:	mov	r0, #0
   119fc:	bl	10b50 <dcgettext@plt>
   11a00:	mov	r6, r0
   11a04:	ldr	r0, [r4]
   11a08:	cmp	r0, #0
   11a0c:	beq	11a44 <__assert_fail@plt+0xd68>
   11a10:	ldr	r4, [r5]
   11a14:	bl	13b60 <__assert_fail@plt+0x2e84>
   11a18:	mov	r3, r0
   11a1c:	movw	r2, #21672	; 0x54a8
   11a20:	movt	r2, #1
   11a24:	mov	r0, #0
   11a28:	str	r6, [sp]
   11a2c:	mov	r1, r4
   11a30:	bl	10bbc <error@plt>
   11a34:	movw	r3, #24780	; 0x60cc
   11a38:	movt	r3, #2
   11a3c:	ldr	r0, [r3]
   11a40:	bl	10b14 <_exit@plt>
   11a44:	mov	r3, r6
   11a48:	movw	r2, #21676	; 0x54ac
   11a4c:	movt	r2, #1
   11a50:	ldr	r1, [r5]
   11a54:	bl	10bbc <error@plt>
   11a58:	b	11a34 <__assert_fail@plt+0xd58>
   11a5c:	strd	r4, [sp, #-16]!
   11a60:	subs	r4, r0, #0
   11a64:	str	r6, [sp, #8]
   11a68:	str	lr, [sp, #12]
   11a6c:	beq	11b04 <__assert_fail@plt+0xe28>
   11a70:	mov	r1, #47	; 0x2f
   11a74:	bl	10ca0 <strrchr@plt>
   11a78:	subs	r5, r0, #0
   11a7c:	beq	11adc <__assert_fail@plt+0xe00>
   11a80:	add	r6, r5, #1
   11a84:	sub	r3, r6, r4
   11a88:	cmp	r3, #6
   11a8c:	ble	11adc <__assert_fail@plt+0xe00>
   11a90:	movw	r1, #21736	; 0x54e8
   11a94:	movt	r1, #1
   11a98:	mov	r2, #7
   11a9c:	sub	r0, r5, #6
   11aa0:	bl	10cc4 <strncmp@plt>
   11aa4:	cmp	r0, #0
   11aa8:	bne	11adc <__assert_fail@plt+0xe00>
   11aac:	movw	r1, #21744	; 0x54f0
   11ab0:	movt	r1, #1
   11ab4:	mov	r2, #3
   11ab8:	mov	r0, r6
   11abc:	bl	10cc4 <strncmp@plt>
   11ac0:	cmp	r0, #0
   11ac4:	movne	r4, r6
   11ac8:	bne	11adc <__assert_fail@plt+0xe00>
   11acc:	add	r4, r5, #4
   11ad0:	movw	r3, #24848	; 0x6110
   11ad4:	movt	r3, #2
   11ad8:	str	r4, [r3]
   11adc:	movw	r2, #24876	; 0x612c
   11ae0:	movt	r2, #2
   11ae4:	ldr	r6, [sp, #8]
   11ae8:	movw	r3, #24852	; 0x6114
   11aec:	movt	r3, #2
   11af0:	str	r4, [r2]
   11af4:	str	r4, [r3]
   11af8:	ldrd	r4, [sp]
   11afc:	add	sp, sp, #12
   11b00:	pop	{pc}		; (ldr pc, [sp], #4)
   11b04:	movw	r3, #24856	; 0x6118
   11b08:	movt	r3, #2
   11b0c:	movw	r0, #21680	; 0x54b0
   11b10:	movt	r0, #1
   11b14:	ldr	r3, [r3]
   11b18:	mov	r2, #55	; 0x37
   11b1c:	mov	r1, #1
   11b20:	bl	10b80 <fwrite@plt>
   11b24:	bl	10cd0 <abort@plt>
   11b28:	strd	r4, [sp, #-16]!
   11b2c:	mov	r4, #0
   11b30:	mov	r5, #0
   11b34:	cmp	r1, #10
   11b38:	str	r6, [sp, #8]
   11b3c:	strd	r4, [r0]
   11b40:	strd	r4, [r0, #8]
   11b44:	str	lr, [sp, #12]
   11b48:	strd	r4, [r0, #16]
   11b4c:	strd	r4, [r0, #24]
   11b50:	strd	r4, [r0, #32]
   11b54:	strd	r4, [r0, #40]	; 0x28
   11b58:	beq	11b70 <__assert_fail@plt+0xe94>
   11b5c:	ldrd	r4, [sp]
   11b60:	str	r1, [r0]
   11b64:	ldr	r6, [sp, #8]
   11b68:	add	sp, sp, #12
   11b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b70:	bl	10cd0 <abort@plt>
   11b74:	mov	r2, #5
   11b78:	strd	r4, [sp, #-16]!
   11b7c:	mov	r5, r0
   11b80:	str	r6, [sp, #8]
   11b84:	mov	r6, r1
   11b88:	mov	r1, r0
   11b8c:	mov	r0, #0
   11b90:	str	lr, [sp, #12]
   11b94:	bl	10b50 <dcgettext@plt>
   11b98:	cmp	r5, r0
   11b9c:	mov	r4, r0
   11ba0:	beq	11bb8 <__assert_fail@plt+0xedc>
   11ba4:	mov	r0, r4
   11ba8:	ldrd	r4, [sp]
   11bac:	ldr	r6, [sp, #8]
   11bb0:	add	sp, sp, #12
   11bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bb8:	bl	14b88 <__assert_fail@plt+0x3eac>
   11bbc:	ldrb	r3, [r0]
   11bc0:	bic	r3, r3, #32
   11bc4:	cmp	r3, #85	; 0x55
   11bc8:	bne	11c30 <__assert_fail@plt+0xf54>
   11bcc:	ldrb	r3, [r0, #1]
   11bd0:	bic	r3, r3, #32
   11bd4:	cmp	r3, #84	; 0x54
   11bd8:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11bdc:	ldrb	r3, [r0, #2]
   11be0:	bic	r3, r3, #32
   11be4:	cmp	r3, #70	; 0x46
   11be8:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11bec:	ldrb	r3, [r0, #3]
   11bf0:	cmp	r3, #45	; 0x2d
   11bf4:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11bf8:	ldrb	r3, [r0, #4]
   11bfc:	cmp	r3, #56	; 0x38
   11c00:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c04:	ldrb	r3, [r0, #5]
   11c08:	cmp	r3, #0
   11c0c:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c10:	ldrb	r2, [r4]
   11c14:	movw	r3, #21836	; 0x554c
   11c18:	movt	r3, #1
   11c1c:	movw	r4, #21848	; 0x5558
   11c20:	movt	r4, #1
   11c24:	cmp	r2, #96	; 0x60
   11c28:	movne	r4, r3
   11c2c:	b	11ba4 <__assert_fail@plt+0xec8>
   11c30:	cmp	r3, #71	; 0x47
   11c34:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c38:	ldrb	r3, [r0, #1]
   11c3c:	bic	r3, r3, #32
   11c40:	cmp	r3, #66	; 0x42
   11c44:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c48:	ldrb	r3, [r0, #2]
   11c4c:	cmp	r3, #49	; 0x31
   11c50:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c54:	ldrb	r3, [r0, #3]
   11c58:	cmp	r3, #56	; 0x38
   11c5c:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c60:	ldrb	r3, [r0, #4]
   11c64:	cmp	r3, #48	; 0x30
   11c68:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c6c:	ldrb	r3, [r0, #5]
   11c70:	cmp	r3, #51	; 0x33
   11c74:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c78:	ldrb	r3, [r0, #6]
   11c7c:	cmp	r3, #48	; 0x30
   11c80:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c84:	ldrb	r3, [r0, #7]
   11c88:	cmp	r3, #0
   11c8c:	bne	11cb0 <__assert_fail@plt+0xfd4>
   11c90:	ldrb	r2, [r4]
   11c94:	movw	r3, #21840	; 0x5550
   11c98:	movt	r3, #1
   11c9c:	movw	r4, #21844	; 0x5554
   11ca0:	movt	r4, #1
   11ca4:	cmp	r2, #96	; 0x60
   11ca8:	movne	r4, r3
   11cac:	b	11ba4 <__assert_fail@plt+0xec8>
   11cb0:	movw	r3, #21852	; 0x555c
   11cb4:	movt	r3, #1
   11cb8:	cmp	r6, #9
   11cbc:	movw	r4, #21832	; 0x5548
   11cc0:	movt	r4, #1
   11cc4:	movne	r4, r3
   11cc8:	b	11ba4 <__assert_fail@plt+0xec8>
   11ccc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11cd0:	strd	r6, [sp, #8]
   11cd4:	strd	r8, [sp, #16]
   11cd8:	strd	sl, [sp, #24]
   11cdc:	mov	fp, r0
   11ce0:	mov	sl, r1
   11ce4:	str	lr, [sp, #32]
   11ce8:	sub	sp, sp, #116	; 0x74
   11cec:	ldr	r8, [sp, #152]	; 0x98
   11cf0:	str	r3, [sp, #28]
   11cf4:	ldr	r3, [sp, #156]	; 0x9c
   11cf8:	str	r2, [sp, #32]
   11cfc:	and	r4, r3, #2
   11d00:	ubfx	r3, r3, #1, #1
   11d04:	str	r3, [sp, #44]	; 0x2c
   11d08:	bl	10b98 <__ctype_get_mb_cur_max@plt>
   11d0c:	str	r0, [sp, #64]	; 0x40
   11d10:	cmp	r8, #10
   11d14:	ldrls	pc, [pc, r8, lsl #2]
   11d18:	b	13488 <__assert_fail@plt+0x27ac>
   11d1c:	andeq	r2, r1, r0, lsr #2
   11d20:			; <UNDEFINED> instruction: 0x000121bc
   11d24:	muleq	r1, r8, r7
   11d28:	ldrdeq	r2, [r1], -ip
   11d2c:	andeq	r2, r1, r4, lsl #1
   11d30:	ldrdeq	r2, [r1], -r0
   11d34:	andeq	r2, r1, r0, asr r1
   11d38:	andeq	r2, r1, ip, lsl #3
   11d3c:	andeq	r1, r1, r8, asr #26
   11d40:	andeq	r1, r1, r8, asr #26
   11d44:	andeq	r1, r1, r8, asr #26
   11d48:	cmp	r8, #10
   11d4c:	beq	11d78 <__assert_fail@plt+0x109c>
   11d50:	mov	r1, r8
   11d54:	movw	r0, #21856	; 0x5560
   11d58:	movt	r0, #1
   11d5c:	bl	11b74 <__assert_fail@plt+0xe98>
   11d60:	mov	r1, r8
   11d64:	str	r0, [sp, #164]	; 0xa4
   11d68:	movw	r0, #21852	; 0x555c
   11d6c:	movt	r0, #1
   11d70:	bl	11b74 <__assert_fail@plt+0xe98>
   11d74:	str	r0, [sp, #168]	; 0xa8
   11d78:	cmp	r4, #0
   11d7c:	movne	r4, #0
   11d80:	beq	13164 <__assert_fail@plt+0x2488>
   11d84:	mov	r3, #1
   11d88:	mov	r5, #0
   11d8c:	ldr	r0, [sp, #168]	; 0xa8
   11d90:	str	r3, [sp, #36]	; 0x24
   11d94:	str	r3, [sp, #40]	; 0x28
   11d98:	str	r5, [sp, #68]	; 0x44
   11d9c:	bl	10c1c <strlen@plt>
   11da0:	ldr	r3, [sp, #168]	; 0xa8
   11da4:	str	r5, [sp, #48]	; 0x30
   11da8:	str	r0, [sp, #56]	; 0x38
   11dac:	str	r3, [sp, #60]	; 0x3c
   11db0:	str	r5, [sp, #72]	; 0x48
   11db4:	str	r8, [sp, #152]	; 0x98
   11db8:	mov	r8, fp
   11dbc:	mov	r9, #0
   11dc0:	ldr	fp, [sp, #152]	; 0x98
   11dc4:	ldr	r3, [sp, #28]
   11dc8:	cmn	r3, #1
   11dcc:	beq	1232c <__assert_fail@plt+0x1650>
   11dd0:	ldr	r3, [sp, #28]
   11dd4:	subs	r6, r3, r9
   11dd8:	movne	r6, #1
   11ddc:	cmp	r6, #0
   11de0:	beq	12344 <__assert_fail@plt+0x1668>
   11de4:	ldr	r0, [sp, #32]
   11de8:	ldr	r7, [sp, #40]	; 0x28
   11dec:	add	r3, r0, r9
   11df0:	cmp	fp, #2
   11df4:	moveq	r7, #0
   11df8:	andne	r7, r7, #1
   11dfc:	str	r3, [sp, #52]	; 0x34
   11e00:	cmp	r7, #0
   11e04:	beq	127e0 <__assert_fail@plt+0x1b04>
   11e08:	ldr	r2, [sp, #56]	; 0x38
   11e0c:	cmp	r2, #0
   11e10:	beq	12a7c <__assert_fail@plt+0x1da0>
   11e14:	ldr	r1, [sp, #28]
   11e18:	cmp	r2, #1
   11e1c:	mov	r3, r2
   11e20:	movls	r3, #0
   11e24:	movhi	r3, #1
   11e28:	add	r5, r9, r2
   11e2c:	cmn	r1, #1
   11e30:	movne	r3, #0
   11e34:	cmp	r3, #0
   11e38:	beq	11e44 <__assert_fail@plt+0x1168>
   11e3c:	bl	10c1c <strlen@plt>
   11e40:	str	r0, [sp, #28]
   11e44:	ldr	r3, [sp, #28]
   11e48:	cmp	r5, r3
   11e4c:	bhi	12a7c <__assert_fail@plt+0x1da0>
   11e50:	ldr	r0, [sp, #52]	; 0x34
   11e54:	ldr	r2, [sp, #56]	; 0x38
   11e58:	ldr	r1, [sp, #60]	; 0x3c
   11e5c:	bl	10b38 <memcmp@plt>
   11e60:	cmp	r0, #0
   11e64:	bne	12a7c <__assert_fail@plt+0x1da0>
   11e68:	ldr	r3, [sp, #44]	; 0x2c
   11e6c:	cmp	r3, #0
   11e70:	bne	133ac <__assert_fail@plt+0x26d0>
   11e74:	ldr	r3, [sp, #52]	; 0x34
   11e78:	ldrb	r5, [r3]
   11e7c:	cmp	r5, #126	; 0x7e
   11e80:	ldrls	pc, [pc, r5, lsl #2]
   11e84:	b	1273c <__assert_fail@plt+0x1a60>
   11e88:	andeq	r2, r1, r0, asr #12
   11e8c:	andeq	r2, r1, ip, lsr r7
   11e90:	andeq	r2, r1, ip, lsr r7
   11e94:	andeq	r2, r1, ip, lsr r7
   11e98:	andeq	r2, r1, ip, lsr r7
   11e9c:	andeq	r2, r1, ip, lsr r7
   11ea0:	andeq	r2, r1, ip, lsr r7
   11ea4:	andeq	r2, r1, r4, lsl r6
   11ea8:	andeq	r2, r1, ip, lsl #12
   11eac:	andeq	r2, r1, r4, asr r5
   11eb0:	andeq	r2, r1, r0, lsl #12
   11eb4:	andeq	r2, r1, ip, asr #10
   11eb8:	ldrdeq	r2, [r1], -ip
   11ebc:	andeq	r2, r1, r8, lsr #12
   11ec0:	andeq	r2, r1, ip, lsr r7
   11ec4:	andeq	r2, r1, ip, lsr r7
   11ec8:	andeq	r2, r1, ip, lsr r7
   11ecc:	andeq	r2, r1, ip, lsr r7
   11ed0:	andeq	r2, r1, ip, lsr r7
   11ed4:	andeq	r2, r1, ip, lsr r7
   11ed8:	andeq	r2, r1, ip, lsr r7
   11edc:	andeq	r2, r1, ip, lsr r7
   11ee0:	andeq	r2, r1, ip, lsr r7
   11ee4:	andeq	r2, r1, ip, lsr r7
   11ee8:	andeq	r2, r1, ip, lsr r7
   11eec:	andeq	r2, r1, ip, lsr r7
   11ef0:	andeq	r2, r1, ip, lsr r7
   11ef4:	andeq	r2, r1, ip, lsr r7
   11ef8:	andeq	r2, r1, ip, lsr r7
   11efc:	andeq	r2, r1, ip, lsr r7
   11f00:	andeq	r2, r1, ip, lsr r7
   11f04:	andeq	r2, r1, ip, lsr r7
   11f08:	andeq	r2, r1, r8, lsl r7
   11f0c:	andeq	r2, r1, r0, lsr #12
   11f10:	andeq	r2, r1, r0, lsr #12
   11f14:	strdeq	r2, [r1], -ip
   11f18:	andeq	r2, r1, r0, lsr #12
   11f1c:	andeq	r2, r1, r0, lsr r7
   11f20:	andeq	r2, r1, r0, lsr #12
   11f24:	andeq	r2, r1, ip, ror r4
   11f28:	andeq	r2, r1, r0, lsr #12
   11f2c:	andeq	r2, r1, r0, lsr #12
   11f30:	andeq	r2, r1, r0, lsr #12
   11f34:	andeq	r2, r1, r0, lsr r7
   11f38:	andeq	r2, r1, r0, lsr r7
   11f3c:	andeq	r2, r1, r0, lsr r7
   11f40:	andeq	r2, r1, r0, lsr r7
   11f44:	andeq	r2, r1, r0, lsr r7
   11f48:	andeq	r2, r1, r0, lsr r7
   11f4c:	andeq	r2, r1, r0, lsr r7
   11f50:	andeq	r2, r1, r0, lsr r7
   11f54:	andeq	r2, r1, r0, lsr r7
   11f58:	andeq	r2, r1, r0, lsr r7
   11f5c:	andeq	r2, r1, r0, lsr r7
   11f60:	andeq	r2, r1, r0, lsr r7
   11f64:	andeq	r2, r1, r0, lsr r7
   11f68:	andeq	r2, r1, r0, lsr r7
   11f6c:	andeq	r2, r1, r0, lsr r7
   11f70:	andeq	r2, r1, r0, lsr r7
   11f74:	andeq	r2, r1, r0, lsr #12
   11f78:	andeq	r2, r1, r0, lsr #12
   11f7c:	andeq	r2, r1, r0, lsr #12
   11f80:	andeq	r2, r1, r0, lsr #12
   11f84:	andeq	r2, r1, r0, asr r4
   11f88:	andeq	r2, r1, ip, lsr r7
   11f8c:	andeq	r2, r1, r0, lsr r7
   11f90:	andeq	r2, r1, r0, lsr r7
   11f94:	andeq	r2, r1, r0, lsr r7
   11f98:	andeq	r2, r1, r0, lsr r7
   11f9c:	andeq	r2, r1, r0, lsr r7
   11fa0:	andeq	r2, r1, r0, lsr r7
   11fa4:	andeq	r2, r1, r0, lsr r7
   11fa8:	andeq	r2, r1, r0, lsr r7
   11fac:	andeq	r2, r1, r0, lsr r7
   11fb0:	andeq	r2, r1, r0, lsr r7
   11fb4:	andeq	r2, r1, r0, lsr r7
   11fb8:	andeq	r2, r1, r0, lsr r7
   11fbc:	andeq	r2, r1, r0, lsr r7
   11fc0:	andeq	r2, r1, r0, lsr r7
   11fc4:	andeq	r2, r1, r0, lsr r7
   11fc8:	andeq	r2, r1, r0, lsr r7
   11fcc:	andeq	r2, r1, r0, lsr r7
   11fd0:	andeq	r2, r1, r0, lsr r7
   11fd4:	andeq	r2, r1, r0, lsr r7
   11fd8:	andeq	r2, r1, r0, lsr r7
   11fdc:	andeq	r2, r1, r0, lsr r7
   11fe0:	andeq	r2, r1, r0, lsr r7
   11fe4:	andeq	r2, r1, r0, lsr r7
   11fe8:	andeq	r2, r1, r0, lsr r7
   11fec:	andeq	r2, r1, r0, lsr r7
   11ff0:	andeq	r2, r1, r0, lsr r7
   11ff4:	andeq	r2, r1, r0, lsr #12
   11ff8:	strdeq	r2, [r1], -r8
   11ffc:	andeq	r2, r1, r0, lsr r7
   12000:	andeq	r2, r1, r0, lsr #12
   12004:	andeq	r2, r1, r0, lsr r7
   12008:	andeq	r2, r1, r0, lsr #12
   1200c:	andeq	r2, r1, r0, lsr r7
   12010:	andeq	r2, r1, r0, lsr r7
   12014:	andeq	r2, r1, r0, lsr r7
   12018:	andeq	r2, r1, r0, lsr r7
   1201c:	andeq	r2, r1, r0, lsr r7
   12020:	andeq	r2, r1, r0, lsr r7
   12024:	andeq	r2, r1, r0, lsr r7
   12028:	andeq	r2, r1, r0, lsr r7
   1202c:	andeq	r2, r1, r0, lsr r7
   12030:	andeq	r2, r1, r0, lsr r7
   12034:	andeq	r2, r1, r0, lsr r7
   12038:	andeq	r2, r1, r0, lsr r7
   1203c:	andeq	r2, r1, r0, lsr r7
   12040:	andeq	r2, r1, r0, lsr r7
   12044:	andeq	r2, r1, r0, lsr r7
   12048:	andeq	r2, r1, r0, lsr r7
   1204c:	andeq	r2, r1, r0, lsr r7
   12050:	andeq	r2, r1, r0, lsr r7
   12054:	andeq	r2, r1, r0, lsr r7
   12058:	andeq	r2, r1, r0, lsr r7
   1205c:	andeq	r2, r1, r0, lsr r7
   12060:	andeq	r2, r1, r0, lsr r7
   12064:	andeq	r2, r1, r0, lsr r7
   12068:	andeq	r2, r1, r0, lsr r7
   1206c:	andeq	r2, r1, r0, lsr r7
   12070:	andeq	r2, r1, r0, lsr r7
   12074:	andeq	r2, r1, ip, lsl r2
   12078:	andeq	r2, r1, r0, lsr #12
   1207c:	andeq	r2, r1, ip, lsl r2
   12080:	strdeq	r2, [r1], -ip
   12084:	cmp	r4, #0
   12088:	moveq	r3, #1
   1208c:	streq	r3, [sp, #40]	; 0x28
   12090:	beq	127a4 <__assert_fail@plt+0x1ac8>
   12094:	mov	r3, #0
   12098:	mov	r2, #1
   1209c:	mov	r4, r3
   120a0:	str	r2, [sp, #36]	; 0x24
   120a4:	str	r2, [sp, #44]	; 0x2c
   120a8:	str	r2, [sp, #56]	; 0x38
   120ac:	str	r3, [sp, #68]	; 0x44
   120b0:	movw	r3, #21852	; 0x555c
   120b4:	movt	r3, #1
   120b8:	str	r4, [sp, #40]	; 0x28
   120bc:	mov	r8, #2
   120c0:	str	r4, [sp, #48]	; 0x30
   120c4:	str	r3, [sp, #60]	; 0x3c
   120c8:	str	r4, [sp, #72]	; 0x48
   120cc:	b	11db4 <__assert_fail@plt+0x10d8>
   120d0:	cmp	r4, #0
   120d4:	bne	13320 <__assert_fail@plt+0x2644>
   120d8:	cmp	sl, #0
   120dc:	beq	130e0 <__assert_fail@plt+0x2404>
   120e0:	mov	r3, #34	; 0x22
   120e4:	mov	r1, r4
   120e8:	mov	r2, #1
   120ec:	strb	r3, [fp]
   120f0:	movw	r3, #21832	; 0x5548
   120f4:	movt	r3, #1
   120f8:	mov	r4, r2
   120fc:	str	r2, [sp, #36]	; 0x24
   12100:	str	r2, [sp, #40]	; 0x28
   12104:	str	r1, [sp, #44]	; 0x2c
   12108:	str	r1, [sp, #48]	; 0x30
   1210c:	str	r2, [sp, #56]	; 0x38
   12110:	str	r3, [sp, #60]	; 0x3c
   12114:	str	r1, [sp, #68]	; 0x44
   12118:	str	r1, [sp, #72]	; 0x48
   1211c:	b	11db4 <__assert_fail@plt+0x10d8>
   12120:	mov	r3, #0
   12124:	mov	r4, r8
   12128:	str	r3, [sp, #40]	; 0x28
   1212c:	str	r3, [sp, #44]	; 0x2c
   12130:	str	r3, [sp, #48]	; 0x30
   12134:	str	r8, [sp, #56]	; 0x38
   12138:	str	r3, [sp, #60]	; 0x3c
   1213c:	str	r3, [sp, #68]	; 0x44
   12140:	mov	r3, #1
   12144:	str	r3, [sp, #36]	; 0x24
   12148:	str	r8, [sp, #72]	; 0x48
   1214c:	b	11db4 <__assert_fail@plt+0x10d8>
   12150:	mov	r3, #1
   12154:	mov	r2, #0
   12158:	mov	r4, r2
   1215c:	mov	r8, #5
   12160:	str	r3, [sp, #36]	; 0x24
   12164:	str	r3, [sp, #40]	; 0x28
   12168:	str	r3, [sp, #44]	; 0x2c
   1216c:	str	r2, [sp, #48]	; 0x30
   12170:	str	r3, [sp, #56]	; 0x38
   12174:	movw	r3, #21832	; 0x5548
   12178:	movt	r3, #1
   1217c:	str	r3, [sp, #60]	; 0x3c
   12180:	str	r2, [sp, #68]	; 0x44
   12184:	str	r2, [sp, #72]	; 0x48
   12188:	b	11db4 <__assert_fail@plt+0x10d8>
   1218c:	mov	r3, #0
   12190:	mov	r2, #1
   12194:	mov	r4, r3
   12198:	str	r2, [sp, #36]	; 0x24
   1219c:	str	r2, [sp, #40]	; 0x28
   121a0:	str	r3, [sp, #44]	; 0x2c
   121a4:	str	r3, [sp, #48]	; 0x30
   121a8:	str	r3, [sp, #56]	; 0x38
   121ac:	str	r3, [sp, #60]	; 0x3c
   121b0:	str	r3, [sp, #68]	; 0x44
   121b4:	str	r3, [sp, #72]	; 0x48
   121b8:	b	11db4 <__assert_fail@plt+0x10d8>
   121bc:	mov	r2, #1
   121c0:	mov	r3, #0
   121c4:	mov	r4, r3
   121c8:	str	r2, [sp, #36]	; 0x24
   121cc:	str	r2, [sp, #44]	; 0x2c
   121d0:	str	r8, [sp, #56]	; 0x38
   121d4:	str	r3, [sp, #68]	; 0x44
   121d8:	b	120b0 <__assert_fail@plt+0x13d4>
   121dc:	mov	r3, #1
   121e0:	mov	r2, #0
   121e4:	mov	r4, r2
   121e8:	mov	r8, #2
   121ec:	str	r3, [sp, #36]	; 0x24
   121f0:	str	r3, [sp, #40]	; 0x28
   121f4:	str	r3, [sp, #44]	; 0x2c
   121f8:	str	r2, [sp, #48]	; 0x30
   121fc:	str	r3, [sp, #56]	; 0x38
   12200:	movw	r3, #21852	; 0x555c
   12204:	movt	r3, #1
   12208:	str	r3, [sp, #60]	; 0x3c
   1220c:	str	r2, [sp, #68]	; 0x44
   12210:	str	r2, [sp, #72]	; 0x48
   12214:	b	11db4 <__assert_fail@plt+0x10d8>
   12218:	mov	r7, #0
   1221c:	ldr	r3, [sp, #28]
   12220:	cmn	r3, #1
   12224:	beq	12cfc <__assert_fail@plt+0x2020>
   12228:	ldr	r3, [sp, #28]
   1222c:	subs	r2, r3, #1
   12230:	movne	r2, #1
   12234:	sub	r3, fp, #2
   12238:	cmp	r2, #0
   1223c:	clz	r3, r3
   12240:	lsr	r3, r3, #5
   12244:	bne	12250 <__assert_fail@plt+0x1574>
   12248:	cmp	r9, #0
   1224c:	beq	12a5c <__assert_fail@plt+0x1d80>
   12250:	mov	r6, #0
   12254:	ldr	r2, [sp, #40]	; 0x28
   12258:	eor	r2, r2, #1
   1225c:	orrs	r3, r3, r2
   12260:	bne	12438 <__assert_fail@plt+0x175c>
   12264:	ldr	r2, [sp, #160]	; 0xa0
   12268:	cmp	r2, #0
   1226c:	beq	1228c <__assert_fail@plt+0x15b0>
   12270:	ldr	r0, [sp, #160]	; 0xa0
   12274:	ubfx	r1, r5, #5, #8
   12278:	and	r2, r5, #31
   1227c:	ldr	r1, [r0, r1, lsl #2]
   12280:	lsr	r2, r1, r2
   12284:	tst	r2, #1
   12288:	bne	12294 <__assert_fail@plt+0x15b8>
   1228c:	cmp	r7, #0
   12290:	beq	12504 <__assert_fail@plt+0x1828>
   12294:	ldr	r2, [sp, #44]	; 0x2c
   12298:	sub	r3, fp, #2
   1229c:	clz	r3, r3
   122a0:	lsr	r3, r3, #5
   122a4:	cmp	r2, #0
   122a8:	bne	13050 <__assert_fail@plt+0x2374>
   122ac:	ldr	r2, [sp, #48]	; 0x30
   122b0:	eor	r2, r2, #1
   122b4:	ands	r3, r3, r2
   122b8:	beq	122f0 <__assert_fail@plt+0x1614>
   122bc:	cmp	sl, r4
   122c0:	str	r3, [sp, #48]	; 0x30
   122c4:	movhi	r2, #39	; 0x27
   122c8:	strbhi	r2, [r8, r4]
   122cc:	add	r2, r4, #1
   122d0:	cmp	sl, r2
   122d4:	movhi	r1, #36	; 0x24
   122d8:	strbhi	r1, [r8, r2]
   122dc:	add	r2, r4, #2
   122e0:	add	r4, r4, #3
   122e4:	cmp	sl, r2
   122e8:	movhi	r1, #39	; 0x27
   122ec:	strbhi	r1, [r8, r2]
   122f0:	cmp	r4, sl
   122f4:	add	r9, r9, #1
   122f8:	movcc	r3, #92	; 0x5c
   122fc:	strbcc	r3, [r8, r4]
   12300:	add	r4, r4, #1
   12304:	cmp	r4, sl
   12308:	ldr	r3, [sp, #36]	; 0x24
   1230c:	strbcc	r5, [r8, r4]
   12310:	cmp	r6, #0
   12314:	add	r4, r4, #1
   12318:	moveq	r3, #0
   1231c:	str	r3, [sp, #36]	; 0x24
   12320:	ldr	r3, [sp, #28]
   12324:	cmn	r3, #1
   12328:	bne	11dd0 <__assert_fail@plt+0x10f4>
   1232c:	ldr	r3, [sp, #32]
   12330:	ldrb	r6, [r3, r9]
   12334:	adds	r6, r6, #0
   12338:	movne	r6, #1
   1233c:	cmp	r6, #0
   12340:	bne	11de4 <__assert_fail@plt+0x1108>
   12344:	str	fp, [sp, #152]	; 0x98
   12348:	mov	fp, r8
   1234c:	cmp	r4, #0
   12350:	ldr	r1, [sp, #44]	; 0x2c
   12354:	movne	r3, #0
   12358:	ldr	r8, [sp, #152]	; 0x98
   1235c:	sub	r2, r8, #2
   12360:	clz	r2, r2
   12364:	lsr	r2, r2, #5
   12368:	andeq	r3, r2, r1
   1236c:	cmp	r3, #0
   12370:	bne	1342c <__assert_fail@plt+0x2750>
   12374:	eor	r3, r1, #1
   12378:	ands	r2, r2, r3
   1237c:	beq	13358 <__assert_fail@plt+0x267c>
   12380:	ldr	r3, [sp, #68]	; 0x44
   12384:	cmp	r3, #0
   12388:	beq	1335c <__assert_fail@plt+0x2680>
   1238c:	ldr	r3, [sp, #36]	; 0x24
   12390:	cmp	r3, #0
   12394:	bne	133e8 <__assert_fail@plt+0x270c>
   12398:	ldr	r3, [sp, #72]	; 0x48
   1239c:	adds	r3, r3, #0
   123a0:	movne	r3, #1
   123a4:	cmp	sl, #0
   123a8:	movne	r3, #0
   123ac:	cmp	r3, #0
   123b0:	ldreq	r2, [sp, #68]	; 0x44
   123b4:	beq	1335c <__assert_fail@plt+0x2680>
   123b8:	ldr	r2, [sp, #72]	; 0x48
   123bc:	str	r3, [sp, #68]	; 0x44
   123c0:	movw	r3, #21852	; 0x555c
   123c4:	movt	r3, #1
   123c8:	mov	r1, #39	; 0x27
   123cc:	mov	r4, #1
   123d0:	ldr	sl, [sp, #72]	; 0x48
   123d4:	mov	r8, #2
   123d8:	str	r3, [sp, #60]	; 0x3c
   123dc:	mov	r3, #0
   123e0:	strb	r1, [fp]
   123e4:	str	r3, [sp, #44]	; 0x2c
   123e8:	str	r4, [sp, #56]	; 0x38
   123ec:	str	r2, [sp, #72]	; 0x48
   123f0:	b	11db4 <__assert_fail@plt+0x10d8>
   123f4:	mov	r7, #0
   123f8:	cmp	fp, #2
   123fc:	beq	12cdc <__assert_fail@plt+0x2000>
   12400:	ldr	r2, [sp, #40]	; 0x28
   12404:	ldr	r3, [sp, #56]	; 0x38
   12408:	ldr	r1, [sp, #44]	; 0x2c
   1240c:	cmp	r3, #0
   12410:	moveq	r3, #0
   12414:	andne	r3, r2, r1
   12418:	cmp	r3, #0
   1241c:	moveq	r5, #92	; 0x5c
   12420:	moveq	r3, r5
   12424:	bne	12ce8 <__assert_fail@plt+0x200c>
   12428:	ldr	r2, [sp, #40]	; 0x28
   1242c:	cmp	r2, #0
   12430:	bne	13124 <__assert_fail@plt+0x2448>
   12434:	mov	r6, #0
   12438:	ldr	r3, [sp, #44]	; 0x2c
   1243c:	cmp	r3, #0
   12440:	beq	12cd4 <__assert_fail@plt+0x1ff8>
   12444:	mov	r3, #0
   12448:	b	12264 <__assert_fail@plt+0x1588>
   1244c:	mov	r7, #0
   12450:	cmp	fp, #2
   12454:	beq	12d4c <__assert_fail@plt+0x2070>
   12458:	cmp	fp, #5
   1245c:	beq	12d10 <__assert_fail@plt+0x2034>
   12460:	sub	r3, fp, #2
   12464:	mov	r6, #0
   12468:	clz	r3, r3
   1246c:	mov	r5, #63	; 0x3f
   12470:	lsr	r3, r3, #5
   12474:	b	12254 <__assert_fail@plt+0x1578>
   12478:	mov	r7, #0
   1247c:	cmp	fp, #2
   12480:	movne	r3, #0
   12484:	movne	r5, #39	; 0x27
   12488:	strne	r6, [sp, #68]	; 0x44
   1248c:	bne	12254 <__assert_fail@plt+0x1578>
   12490:	ldr	r3, [sp, #44]	; 0x2c
   12494:	cmp	r3, #0
   12498:	bne	13154 <__assert_fail@plt+0x2478>
   1249c:	ldr	r3, [sp, #72]	; 0x48
   124a0:	cmp	sl, #0
   124a4:	clz	r3, r3
   124a8:	lsr	r3, r3, #5
   124ac:	moveq	r3, #0
   124b0:	cmp	r3, #0
   124b4:	bne	13080 <__assert_fail@plt+0x23a4>
   124b8:	cmp	sl, r4
   124bc:	movhi	r3, #39	; 0x27
   124c0:	strbhi	r3, [r8, r4]
   124c4:	add	r3, r4, #1
   124c8:	cmp	sl, r3
   124cc:	movhi	r2, #92	; 0x5c
   124d0:	strbhi	r2, [r8, r3]
   124d4:	add	r3, r4, #2
   124d8:	cmp	sl, r3
   124dc:	bls	124e8 <__assert_fail@plt+0x180c>
   124e0:	mov	r2, #39	; 0x27
   124e4:	strb	r2, [r8, r3]
   124e8:	mov	r3, #0
   124ec:	cmp	r7, #0
   124f0:	add	r4, r4, #3
   124f4:	mov	r5, #39	; 0x27
   124f8:	str	r3, [sp, #48]	; 0x30
   124fc:	str	r6, [sp, #68]	; 0x44
   12500:	bne	12294 <__assert_fail@plt+0x15b8>
   12504:	ldr	r2, [sp, #48]	; 0x30
   12508:	eor	r3, r3, #1
   1250c:	add	r9, r9, #1
   12510:	and	r3, r3, r2
   12514:	uxtb	r3, r3
   12518:	cmp	r3, #0
   1251c:	beq	12304 <__assert_fail@plt+0x1628>
   12520:	cmp	sl, r4
   12524:	movhi	r3, #39	; 0x27
   12528:	strbhi	r3, [r8, r4]
   1252c:	add	r3, r4, #1
   12530:	add	r4, r4, #2
   12534:	cmp	sl, r3
   12538:	movhi	r2, #39	; 0x27
   1253c:	strbhi	r2, [r8, r3]
   12540:	mov	r3, #0
   12544:	str	r3, [sp, #48]	; 0x30
   12548:	b	12304 <__assert_fail@plt+0x1628>
   1254c:	mov	r3, #118	; 0x76
   12550:	b	12428 <__assert_fail@plt+0x174c>
   12554:	mov	r3, #116	; 0x74
   12558:	ldr	r2, [sp, #44]	; 0x2c
   1255c:	cmp	fp, #2
   12560:	movne	r2, #0
   12564:	andeq	r2, r2, #1
   12568:	cmp	r2, #0
   1256c:	beq	12428 <__assert_fail@plt+0x174c>
   12570:	mov	fp, r8
   12574:	mov	r8, #2
   12578:	ldr	r3, [sp, #40]	; 0x28
   1257c:	cmp	r3, #0
   12580:	movne	r8, #4
   12584:	mov	lr, #0
   12588:	mov	r0, fp
   1258c:	ldr	r2, [sp, #32]
   12590:	ldr	r3, [sp, #156]	; 0x9c
   12594:	ldr	r1, [sp, #164]	; 0xa4
   12598:	bic	ip, r3, #2
   1259c:	ldr	r3, [sp, #28]
   125a0:	stm	sp, {r8, ip, lr}
   125a4:	ldr	ip, [sp, #168]	; 0xa8
   125a8:	str	r1, [sp, #12]
   125ac:	mov	r1, sl
   125b0:	str	ip, [sp, #16]
   125b4:	bl	11ccc <__assert_fail@plt+0xff0>
   125b8:	mov	r4, r0
   125bc:	mov	r0, r4
   125c0:	add	sp, sp, #116	; 0x74
   125c4:	ldrd	r4, [sp]
   125c8:	ldrd	r6, [sp, #8]
   125cc:	ldrd	r8, [sp, #16]
   125d0:	ldrd	sl, [sp, #24]
   125d4:	add	sp, sp, #32
   125d8:	pop	{pc}		; (ldr pc, [sp], #4)
   125dc:	mov	r5, #102	; 0x66
   125e0:	ldr	r2, [sp, #44]	; 0x2c
   125e4:	sub	r3, fp, #2
   125e8:	clz	r3, r3
   125ec:	lsr	r3, r3, #5
   125f0:	cmp	r2, #0
   125f4:	bne	13050 <__assert_fail@plt+0x2374>
   125f8:	mov	r6, r2
   125fc:	b	122f0 <__assert_fail@plt+0x1614>
   12600:	mov	r5, #110	; 0x6e
   12604:	mov	r6, #0
   12608:	b	12294 <__assert_fail@plt+0x15b8>
   1260c:	mov	r5, #98	; 0x62
   12610:	b	125e0 <__assert_fail@plt+0x1904>
   12614:	mov	r5, #97	; 0x61
   12618:	b	125e0 <__assert_fail@plt+0x1904>
   1261c:	mov	r7, #0
   12620:	mov	r6, #0
   12624:	b	12444 <__assert_fail@plt+0x1768>
   12628:	mov	r5, #114	; 0x72
   1262c:	b	12604 <__assert_fail@plt+0x1928>
   12630:	ldr	r3, [sp, #44]	; 0x2c
   12634:	cmp	r3, #0
   12638:	bne	133c8 <__assert_fail@plt+0x26ec>
   1263c:	mov	r7, r3
   12640:	ldr	r3, [sp, #48]	; 0x30
   12644:	sub	r2, fp, #2
   12648:	clz	r2, r2
   1264c:	lsr	r2, r2, #5
   12650:	eor	r3, r3, #1
   12654:	ands	r3, r2, r3
   12658:	beq	1306c <__assert_fail@plt+0x2390>
   1265c:	cmp	sl, r4
   12660:	movhi	r1, #39	; 0x27
   12664:	strbhi	r1, [r8, r4]
   12668:	add	r1, r4, #1
   1266c:	cmp	sl, r1
   12670:	movhi	r0, #36	; 0x24
   12674:	strbhi	r0, [r8, r1]
   12678:	add	r1, r4, #2
   1267c:	cmp	sl, r1
   12680:	movhi	r0, #39	; 0x27
   12684:	strbhi	r0, [r8, r1]
   12688:	add	r1, r4, #3
   1268c:	cmp	sl, r1
   12690:	bls	130c4 <__assert_fail@plt+0x23e8>
   12694:	mov	r4, r1
   12698:	mov	r1, #92	; 0x5c
   1269c:	mov	r0, r4
   126a0:	str	r3, [sp, #48]	; 0x30
   126a4:	strb	r1, [r8, r4]
   126a8:	cmp	fp, #2
   126ac:	add	r4, r4, #1
   126b0:	beq	13114 <__assert_fail@plt+0x2438>
   126b4:	ldr	r1, [sp, #28]
   126b8:	add	r3, r9, #1
   126bc:	cmp	r3, r1
   126c0:	bcs	126d8 <__assert_fail@plt+0x19fc>
   126c4:	ldr	r1, [sp, #32]
   126c8:	ldrb	r3, [r1, r3]
   126cc:	sub	r3, r3, #48	; 0x30
   126d0:	cmp	r3, #9
   126d4:	bls	1312c <__assert_fail@plt+0x2450>
   126d8:	mov	r5, #48	; 0x30
   126dc:	ldr	r3, [sp, #40]	; 0x28
   126e0:	eor	r3, r3, #1
   126e4:	orrs	r2, r2, r3
   126e8:	mov	r3, r6
   126ec:	moveq	r6, r2
   126f0:	beq	12264 <__assert_fail@plt+0x1588>
   126f4:	mov	r6, #0
   126f8:	b	1228c <__assert_fail@plt+0x15b0>
   126fc:	cmp	r9, #0
   12700:	mov	r2, r7
   12704:	bne	12ca4 <__assert_fail@plt+0x1fc8>
   12708:	mov	r6, r7
   1270c:	mov	r3, r9
   12710:	mov	r7, r2
   12714:	b	12254 <__assert_fail@plt+0x1578>
   12718:	mov	r2, r7
   1271c:	mov	r6, r7
   12720:	mov	r3, #0
   12724:	mov	r7, r2
   12728:	mov	r5, #32
   1272c:	b	12254 <__assert_fail@plt+0x1578>
   12730:	mov	r6, r7
   12734:	b	12444 <__assert_fail@plt+0x1768>
   12738:	mov	r7, #0
   1273c:	ldr	r3, [sp, #64]	; 0x40
   12740:	cmp	r3, #1
   12744:	bne	12d64 <__assert_fail@plt+0x2088>
   12748:	bl	10c04 <__ctype_b_loc@plt>
   1274c:	ldr	r2, [r0]
   12750:	sxth	r3, r5
   12754:	lsl	r3, r3, #1
   12758:	ldr	r1, [sp, #64]	; 0x40
   1275c:	ldrh	r3, [r2, r3]
   12760:	mov	ip, r1
   12764:	and	r3, r3, #16384	; 0x4000
   12768:	cmp	r3, #0
   1276c:	ldr	r3, [sp, #40]	; 0x28
   12770:	movne	r6, #1
   12774:	moveq	r6, #0
   12778:	movne	r2, #0
   1277c:	andeq	r2, r3, #1
   12780:	cmp	r2, #0
   12784:	bne	130ac <__assert_fail@plt+0x23d0>
   12788:	sub	r3, fp, #2
   1278c:	clz	r3, r3
   12790:	lsr	r3, r3, #5
   12794:	b	12254 <__assert_fail@plt+0x1578>
   12798:	cmp	r4, #0
   1279c:	bne	1343c <__assert_fail@plt+0x2760>
   127a0:	str	r4, [sp, #40]	; 0x28
   127a4:	cmp	sl, #0
   127a8:	bne	1346c <__assert_fail@plt+0x2790>
   127ac:	mov	r3, #1
   127b0:	movw	r2, #21852	; 0x555c
   127b4:	movt	r2, #1
   127b8:	mov	r4, r3
   127bc:	mov	r8, #2
   127c0:	str	r3, [sp, #36]	; 0x24
   127c4:	str	sl, [sp, #44]	; 0x2c
   127c8:	str	sl, [sp, #48]	; 0x30
   127cc:	str	r3, [sp, #56]	; 0x38
   127d0:	str	r2, [sp, #60]	; 0x3c
   127d4:	str	sl, [sp, #68]	; 0x44
   127d8:	str	sl, [sp, #72]	; 0x48
   127dc:	b	11db4 <__assert_fail@plt+0x10d8>
   127e0:	ldr	r3, [sp, #32]
   127e4:	ldrb	r5, [r3, r9]
   127e8:	cmp	r5, #126	; 0x7e
   127ec:	ldrls	pc, [pc, r5, lsl #2]
   127f0:	b	1273c <__assert_fail@plt+0x1a60>
   127f4:	andeq	r2, r1, r8, lsl sl
   127f8:	andeq	r2, r1, ip, lsr r7
   127fc:	andeq	r2, r1, ip, lsr r7
   12800:	andeq	r2, r1, ip, lsr r7
   12804:	andeq	r2, r1, ip, lsr r7
   12808:	andeq	r2, r1, ip, lsr r7
   1280c:	andeq	r2, r1, ip, lsr r7
   12810:	andeq	r2, r1, r0, lsl sl
   12814:	andeq	r2, r1, r8, lsl #20
   12818:	andeq	r2, r1, r4, asr r5
   1281c:	andeq	r2, r1, r0, lsl #20
   12820:	andeq	r2, r1, ip, asr #10
   12824:	strdeq	r2, [r1], -r8
   12828:	strdeq	r2, [r1], -r0
   1282c:	andeq	r2, r1, ip, lsr r7
   12830:	andeq	r2, r1, ip, lsr r7
   12834:	andeq	r2, r1, ip, lsr r7
   12838:	andeq	r2, r1, ip, lsr r7
   1283c:	andeq	r2, r1, ip, lsr r7
   12840:	andeq	r2, r1, ip, lsr r7
   12844:	andeq	r2, r1, ip, lsr r7
   12848:	andeq	r2, r1, ip, lsr r7
   1284c:	andeq	r2, r1, ip, lsr r7
   12850:	andeq	r2, r1, ip, lsr r7
   12854:	andeq	r2, r1, ip, lsr r7
   12858:	andeq	r2, r1, ip, lsr r7
   1285c:	andeq	r2, r1, ip, lsr r7
   12860:	andeq	r2, r1, ip, lsr r7
   12864:	andeq	r2, r1, ip, lsr r7
   12868:	andeq	r2, r1, ip, lsr r7
   1286c:	andeq	r2, r1, ip, lsr r7
   12870:	andeq	r2, r1, ip, lsr r7
   12874:	andeq	r2, r1, ip, ror #20
   12878:	andeq	r2, r1, ip, asr #20
   1287c:	andeq	r2, r1, ip, asr #20
   12880:	andeq	r2, r1, ip, lsr sl
   12884:	andeq	r2, r1, ip, asr #20
   12888:	andeq	r2, r1, r8, lsl #15
   1288c:	andeq	r2, r1, ip, asr #20
   12890:	andeq	r2, r1, ip, ror r4
   12894:	andeq	r2, r1, ip, asr #20
   12898:	andeq	r2, r1, ip, asr #20
   1289c:	andeq	r2, r1, ip, asr #20
   128a0:	andeq	r2, r1, r8, lsl #15
   128a4:	andeq	r2, r1, r8, lsl #15
   128a8:	andeq	r2, r1, r8, lsl #15
   128ac:	andeq	r2, r1, r8, lsl #15
   128b0:	andeq	r2, r1, r8, lsl #15
   128b4:	andeq	r2, r1, r8, lsl #15
   128b8:	andeq	r2, r1, r8, lsl #15
   128bc:	andeq	r2, r1, r8, lsl #15
   128c0:	andeq	r2, r1, r8, lsl #15
   128c4:	andeq	r2, r1, r8, lsl #15
   128c8:	andeq	r2, r1, r8, lsl #15
   128cc:	andeq	r2, r1, r8, lsl #15
   128d0:	andeq	r2, r1, r8, lsl #15
   128d4:	andeq	r2, r1, r8, lsl #15
   128d8:	andeq	r2, r1, r8, lsl #15
   128dc:	andeq	r2, r1, r8, lsl #15
   128e0:	andeq	r2, r1, ip, asr #20
   128e4:	andeq	r2, r1, ip, asr #20
   128e8:	andeq	r2, r1, ip, asr #20
   128ec:	andeq	r2, r1, ip, asr #20
   128f0:	andeq	r2, r1, r0, asr r4
   128f4:	andeq	r2, r1, ip, lsr r7
   128f8:	andeq	r2, r1, r8, lsl #15
   128fc:	andeq	r2, r1, r8, lsl #15
   12900:	andeq	r2, r1, r8, lsl #15
   12904:	andeq	r2, r1, r8, lsl #15
   12908:	andeq	r2, r1, r8, lsl #15
   1290c:	andeq	r2, r1, r8, lsl #15
   12910:	andeq	r2, r1, r8, lsl #15
   12914:	andeq	r2, r1, r8, lsl #15
   12918:	andeq	r2, r1, r8, lsl #15
   1291c:	andeq	r2, r1, r8, lsl #15
   12920:	andeq	r2, r1, r8, lsl #15
   12924:	andeq	r2, r1, r8, lsl #15
   12928:	andeq	r2, r1, r8, lsl #15
   1292c:	andeq	r2, r1, r8, lsl #15
   12930:	andeq	r2, r1, r8, lsl #15
   12934:	andeq	r2, r1, r8, lsl #15
   12938:	andeq	r2, r1, r8, lsl #15
   1293c:	andeq	r2, r1, r8, lsl #15
   12940:	andeq	r2, r1, r8, lsl #15
   12944:	andeq	r2, r1, r8, lsl #15
   12948:	andeq	r2, r1, r8, lsl #15
   1294c:	andeq	r2, r1, r8, lsl #15
   12950:	andeq	r2, r1, r8, lsl #15
   12954:	andeq	r2, r1, r8, lsl #15
   12958:	andeq	r2, r1, r8, lsl #15
   1295c:	andeq	r2, r1, r8, lsl #15
   12960:	andeq	r2, r1, ip, asr #20
   12964:	strdeq	r2, [r1], -r8
   12968:	andeq	r2, r1, r8, lsl #15
   1296c:	andeq	r2, r1, ip, asr #20
   12970:	andeq	r2, r1, r8, lsl #15
   12974:	andeq	r2, r1, ip, asr #20
   12978:	andeq	r2, r1, r8, lsl #15
   1297c:	andeq	r2, r1, r8, lsl #15
   12980:	andeq	r2, r1, r8, lsl #15
   12984:	andeq	r2, r1, r8, lsl #15
   12988:	andeq	r2, r1, r8, lsl #15
   1298c:	andeq	r2, r1, r8, lsl #15
   12990:	andeq	r2, r1, r8, lsl #15
   12994:	andeq	r2, r1, r8, lsl #15
   12998:	andeq	r2, r1, r8, lsl #15
   1299c:	andeq	r2, r1, r8, lsl #15
   129a0:	andeq	r2, r1, r8, lsl #15
   129a4:	andeq	r2, r1, r8, lsl #15
   129a8:	andeq	r2, r1, r8, lsl #15
   129ac:	andeq	r2, r1, r8, lsl #15
   129b0:	andeq	r2, r1, r8, lsl #15
   129b4:	andeq	r2, r1, r8, lsl #15
   129b8:	andeq	r2, r1, r8, lsl #15
   129bc:	andeq	r2, r1, r8, lsl #15
   129c0:	andeq	r2, r1, r8, lsl #15
   129c4:	andeq	r2, r1, r8, lsl #15
   129c8:	andeq	r2, r1, r8, lsl #15
   129cc:	andeq	r2, r1, r8, lsl #15
   129d0:	andeq	r2, r1, r8, lsl #15
   129d4:	andeq	r2, r1, r8, lsl #15
   129d8:	andeq	r2, r1, r8, lsl #15
   129dc:	andeq	r2, r1, r8, lsl #15
   129e0:	andeq	r2, r1, ip, lsl r2
   129e4:	andeq	r2, r1, ip, asr #20
   129e8:	andeq	r2, r1, ip, lsl r2
   129ec:	andeq	r2, r1, ip, lsr sl
   129f0:	mov	r3, #114	; 0x72
   129f4:	b	12558 <__assert_fail@plt+0x187c>
   129f8:	mov	r3, #102	; 0x66
   129fc:	b	12428 <__assert_fail@plt+0x174c>
   12a00:	mov	r3, #110	; 0x6e
   12a04:	b	12558 <__assert_fail@plt+0x187c>
   12a08:	mov	r3, #98	; 0x62
   12a0c:	b	12428 <__assert_fail@plt+0x174c>
   12a10:	mov	r3, #97	; 0x61
   12a14:	b	12428 <__assert_fail@plt+0x174c>
   12a18:	ldr	r3, [sp, #40]	; 0x28
   12a1c:	cmp	r3, #0
   12a20:	bne	12630 <__assert_fail@plt+0x1954>
   12a24:	ldr	r3, [sp, #156]	; 0x9c
   12a28:	tst	r3, #1
   12a2c:	addne	r9, r9, #1
   12a30:	bne	11dc4 <__assert_fail@plt+0x10e8>
   12a34:	ldr	r7, [sp, #40]	; 0x28
   12a38:	b	12434 <__assert_fail@plt+0x1758>
   12a3c:	sub	r3, fp, #2
   12a40:	clz	r3, r3
   12a44:	lsr	r3, r3, #5
   12a48:	b	12248 <__assert_fail@plt+0x156c>
   12a4c:	sub	r3, fp, #2
   12a50:	mov	r6, #0
   12a54:	clz	r3, r3
   12a58:	lsr	r3, r3, #5
   12a5c:	ldr	r2, [sp, #44]	; 0x2c
   12a60:	tst	r2, r3
   12a64:	beq	12254 <__assert_fail@plt+0x1578>
   12a68:	b	12570 <__assert_fail@plt+0x1894>
   12a6c:	sub	r3, fp, #2
   12a70:	clz	r3, r3
   12a74:	lsr	r3, r3, #5
   12a78:	b	12a5c <__assert_fail@plt+0x1d80>
   12a7c:	ldr	r3, [sp, #52]	; 0x34
   12a80:	ldrb	r5, [r3]
   12a84:	cmp	r5, #126	; 0x7e
   12a88:	ldrls	pc, [pc, r5, lsl #2]
   12a8c:	b	12738 <__assert_fail@plt+0x1a5c>
   12a90:	andeq	r2, r1, r0, lsr r6
   12a94:	andeq	r2, r1, r8, lsr r7
   12a98:	andeq	r2, r1, r8, lsr r7
   12a9c:	andeq	r2, r1, r8, lsr r7
   12aa0:	andeq	r2, r1, r8, lsr r7
   12aa4:	andeq	r2, r1, r8, lsr r7
   12aa8:	andeq	r2, r1, r8, lsr r7
   12aac:	andeq	r2, r1, r4, lsl r6
   12ab0:	andeq	r2, r1, ip, lsl #12
   12ab4:	andeq	r2, r1, r8, asr #25
   12ab8:	andeq	r2, r1, r0, lsl #12
   12abc:			; <UNDEFINED> instruction: 0x00012cbc
   12ac0:	ldrdeq	r2, [r1], -ip
   12ac4:	andeq	r2, r1, r8, lsr #12
   12ac8:	andeq	r2, r1, r8, lsr r7
   12acc:	andeq	r2, r1, r8, lsr r7
   12ad0:	andeq	r2, r1, r8, lsr r7
   12ad4:	andeq	r2, r1, r8, lsr r7
   12ad8:	andeq	r2, r1, r8, lsr r7
   12adc:	andeq	r2, r1, r8, lsr r7
   12ae0:	andeq	r2, r1, r8, lsr r7
   12ae4:	andeq	r2, r1, r8, lsr r7
   12ae8:	andeq	r2, r1, r8, lsr r7
   12aec:	andeq	r2, r1, r8, lsr r7
   12af0:	andeq	r2, r1, r8, lsr r7
   12af4:	andeq	r2, r1, r8, lsr r7
   12af8:	andeq	r2, r1, r8, lsr r7
   12afc:	andeq	r2, r1, r8, lsr r7
   12b00:	andeq	r2, r1, r8, lsr r7
   12b04:	andeq	r2, r1, r8, lsr r7
   12b08:	andeq	r2, r1, r8, lsr r7
   12b0c:	andeq	r2, r1, r8, lsr r7
   12b10:			; <UNDEFINED> instruction: 0x00012cb4
   12b14:	andeq	r2, r1, ip, lsl r6
   12b18:	andeq	r2, r1, ip, lsl r6
   12b1c:	muleq	r1, r8, ip
   12b20:	andeq	r2, r1, ip, lsl r6
   12b24:	andeq	r2, r1, ip, lsl #25
   12b28:	andeq	r2, r1, ip, lsl r6
   12b2c:	andeq	r2, r1, r8, ror r4
   12b30:	andeq	r2, r1, ip, lsl r6
   12b34:	andeq	r2, r1, ip, lsl r6
   12b38:	andeq	r2, r1, ip, lsl r6
   12b3c:	andeq	r2, r1, ip, lsl #25
   12b40:	andeq	r2, r1, ip, lsl #25
   12b44:	andeq	r2, r1, ip, lsl #25
   12b48:	andeq	r2, r1, ip, lsl #25
   12b4c:	andeq	r2, r1, ip, lsl #25
   12b50:	andeq	r2, r1, ip, lsl #25
   12b54:	andeq	r2, r1, ip, lsl #25
   12b58:	andeq	r2, r1, ip, lsl #25
   12b5c:	andeq	r2, r1, ip, lsl #25
   12b60:	andeq	r2, r1, ip, lsl #25
   12b64:	andeq	r2, r1, ip, lsl #25
   12b68:	andeq	r2, r1, ip, lsl #25
   12b6c:	andeq	r2, r1, ip, lsl #25
   12b70:	andeq	r2, r1, ip, lsl #25
   12b74:	andeq	r2, r1, ip, lsl #25
   12b78:	andeq	r2, r1, ip, lsl #25
   12b7c:	andeq	r2, r1, ip, lsl r6
   12b80:	andeq	r2, r1, ip, lsl r6
   12b84:	andeq	r2, r1, ip, lsl r6
   12b88:	andeq	r2, r1, ip, lsl r6
   12b8c:	andeq	r2, r1, ip, asr #8
   12b90:	andeq	r2, r1, r8, lsr r7
   12b94:	andeq	r2, r1, ip, lsl #25
   12b98:	andeq	r2, r1, ip, lsl #25
   12b9c:	andeq	r2, r1, ip, lsl #25
   12ba0:	andeq	r2, r1, ip, lsl #25
   12ba4:	andeq	r2, r1, ip, lsl #25
   12ba8:	andeq	r2, r1, ip, lsl #25
   12bac:	andeq	r2, r1, ip, lsl #25
   12bb0:	andeq	r2, r1, ip, lsl #25
   12bb4:	andeq	r2, r1, ip, lsl #25
   12bb8:	andeq	r2, r1, ip, lsl #25
   12bbc:	andeq	r2, r1, ip, lsl #25
   12bc0:	andeq	r2, r1, ip, lsl #25
   12bc4:	andeq	r2, r1, ip, lsl #25
   12bc8:	andeq	r2, r1, ip, lsl #25
   12bcc:	andeq	r2, r1, ip, lsl #25
   12bd0:	andeq	r2, r1, ip, lsl #25
   12bd4:	andeq	r2, r1, ip, lsl #25
   12bd8:	andeq	r2, r1, ip, lsl #25
   12bdc:	andeq	r2, r1, ip, lsl #25
   12be0:	andeq	r2, r1, ip, lsl #25
   12be4:	andeq	r2, r1, ip, lsl #25
   12be8:	andeq	r2, r1, ip, lsl #25
   12bec:	andeq	r2, r1, ip, lsl #25
   12bf0:	andeq	r2, r1, ip, lsl #25
   12bf4:	andeq	r2, r1, ip, lsl #25
   12bf8:	andeq	r2, r1, ip, lsl #25
   12bfc:	andeq	r2, r1, ip, lsl r6
   12c00:	strdeq	r2, [r1], -r4
   12c04:	andeq	r2, r1, ip, lsl #25
   12c08:	andeq	r2, r1, ip, lsl r6
   12c0c:	andeq	r2, r1, ip, lsl #25
   12c10:	andeq	r2, r1, ip, lsl r6
   12c14:	andeq	r2, r1, ip, lsl #25
   12c18:	andeq	r2, r1, ip, lsl #25
   12c1c:	andeq	r2, r1, ip, lsl #25
   12c20:	andeq	r2, r1, ip, lsl #25
   12c24:	andeq	r2, r1, ip, lsl #25
   12c28:	andeq	r2, r1, ip, lsl #25
   12c2c:	andeq	r2, r1, ip, lsl #25
   12c30:	andeq	r2, r1, ip, lsl #25
   12c34:	andeq	r2, r1, ip, lsl #25
   12c38:	andeq	r2, r1, ip, lsl #25
   12c3c:	andeq	r2, r1, ip, lsl #25
   12c40:	andeq	r2, r1, ip, lsl #25
   12c44:	andeq	r2, r1, ip, lsl #25
   12c48:	andeq	r2, r1, ip, lsl #25
   12c4c:	andeq	r2, r1, ip, lsl #25
   12c50:	andeq	r2, r1, ip, lsl #25
   12c54:	andeq	r2, r1, ip, lsl #25
   12c58:	andeq	r2, r1, ip, lsl #25
   12c5c:	andeq	r2, r1, ip, lsl #25
   12c60:	andeq	r2, r1, ip, lsl #25
   12c64:	andeq	r2, r1, ip, lsl #25
   12c68:	andeq	r2, r1, ip, lsl #25
   12c6c:	andeq	r2, r1, ip, lsl #25
   12c70:	andeq	r2, r1, ip, lsl #25
   12c74:	andeq	r2, r1, ip, lsl #25
   12c78:	andeq	r2, r1, ip, lsl #25
   12c7c:	andeq	r2, r1, r8, lsl r2
   12c80:	andeq	r2, r1, ip, lsl r6
   12c84:	andeq	r2, r1, r8, lsl r2
   12c88:	muleq	r1, r8, ip
   12c8c:	mov	r6, r7
   12c90:	mov	r7, #0
   12c94:	b	12444 <__assert_fail@plt+0x1768>
   12c98:	cmp	r9, #0
   12c9c:	mov	r2, #0
   12ca0:	beq	12708 <__assert_fail@plt+0x1a2c>
   12ca4:	mov	r6, #0
   12ca8:	mov	r7, r2
   12cac:	mov	r3, r6
   12cb0:	b	12264 <__assert_fail@plt+0x1588>
   12cb4:	mov	r2, #0
   12cb8:	b	1271c <__assert_fail@plt+0x1a40>
   12cbc:	mov	r7, #0
   12cc0:	mov	r3, #118	; 0x76
   12cc4:	b	12428 <__assert_fail@plt+0x174c>
   12cc8:	mov	r7, #0
   12ccc:	mov	r3, #116	; 0x74
   12cd0:	b	12558 <__assert_fail@plt+0x187c>
   12cd4:	ldr	r3, [sp, #44]	; 0x2c
   12cd8:	b	1228c <__assert_fail@plt+0x15b0>
   12cdc:	ldr	r3, [sp, #44]	; 0x2c
   12ce0:	cmp	r3, #0
   12ce4:	bne	13154 <__assert_fail@plt+0x2478>
   12ce8:	add	r9, r9, #1
   12cec:	mov	r6, #0
   12cf0:	ldr	r3, [sp, #48]	; 0x30
   12cf4:	mov	r5, #92	; 0x5c
   12cf8:	b	12518 <__assert_fail@plt+0x183c>
   12cfc:	ldr	r3, [sp, #32]
   12d00:	ldrb	r2, [r3, #1]
   12d04:	adds	r2, r2, #0
   12d08:	movne	r2, #1
   12d0c:	b	12234 <__assert_fail@plt+0x1558>
   12d10:	ldr	r3, [sp, #156]	; 0x9c
   12d14:	ands	r3, r3, #4
   12d18:	beq	12d40 <__assert_fail@plt+0x2064>
   12d1c:	ldr	r2, [sp, #28]
   12d20:	add	r3, r9, #2
   12d24:	cmp	r3, r2
   12d28:	bcs	12d3c <__assert_fail@plt+0x2060>
   12d2c:	ldr	r2, [sp, #52]	; 0x34
   12d30:	ldrb	r5, [r2, #1]
   12d34:	cmp	r5, #63	; 0x3f
   12d38:	beq	131b8 <__assert_fail@plt+0x24dc>
   12d3c:	mov	r3, #0
   12d40:	mov	r5, #63	; 0x3f
   12d44:	mov	r6, r3
   12d48:	b	12254 <__assert_fail@plt+0x1578>
   12d4c:	ldr	r3, [sp, #44]	; 0x2c
   12d50:	cmp	r3, #0
   12d54:	bne	13154 <__assert_fail@plt+0x2478>
   12d58:	mov	r6, r3
   12d5c:	mov	r5, #63	; 0x3f
   12d60:	b	1228c <__assert_fail@plt+0x15b0>
   12d64:	ldr	r1, [sp, #28]
   12d68:	mov	r2, #0
   12d6c:	mov	r3, #0
   12d70:	strd	r2, [sp, #104]	; 0x68
   12d74:	cmn	r1, #1
   12d78:	bne	12d88 <__assert_fail@plt+0x20ac>
   12d7c:	ldr	r0, [sp, #32]
   12d80:	bl	10c1c <strlen@plt>
   12d84:	str	r0, [sp, #28]
   12d88:	str	r8, [sp, #76]	; 0x4c
   12d8c:	mov	r3, #0
   12d90:	str	sl, [sp, #80]	; 0x50
   12d94:	ldr	sl, [sp, #32]
   12d98:	str	r5, [sp, #84]	; 0x54
   12d9c:	mov	r5, r3
   12da0:	ldr	r8, [sp, #44]	; 0x2c
   12da4:	str	r7, [sp, #88]	; 0x58
   12da8:	str	r4, [sp, #92]	; 0x5c
   12dac:	ldr	r2, [sp, #28]
   12db0:	add	r4, r9, r5
   12db4:	add	r3, sp, #104	; 0x68
   12db8:	add	r7, sl, r4
   12dbc:	add	r0, sp, #100	; 0x64
   12dc0:	mov	r1, r7
   12dc4:	sub	r2, r2, r4
   12dc8:	bl	14bd4 <__assert_fail@plt+0x3ef8>
   12dcc:	subs	r1, r0, #0
   12dd0:	beq	12e1c <__assert_fail@plt+0x2140>
   12dd4:	cmn	r1, #1
   12dd8:	beq	13194 <__assert_fail@plt+0x24b8>
   12ddc:	cmn	r1, #2
   12de0:	beq	132b4 <__assert_fail@plt+0x25d8>
   12de4:	cmp	fp, #2
   12de8:	movne	r3, #0
   12dec:	andeq	r3, r8, #1
   12df0:	cmp	r3, #0
   12df4:	bne	12f80 <__assert_fail@plt+0x22a4>
   12df8:	ldr	r0, [sp, #100]	; 0x64
   12dfc:	add	r5, r5, r1
   12e00:	bl	10b74 <iswprint@plt>
   12e04:	cmp	r0, #0
   12e08:	add	r0, sp, #104	; 0x68
   12e0c:	moveq	r6, #0
   12e10:	bl	10b2c <mbsinit@plt>
   12e14:	cmp	r0, #0
   12e18:	beq	12dac <__assert_fail@plt+0x20d0>
   12e1c:	ldr	r3, [sp, #40]	; 0x28
   12e20:	mov	ip, r5
   12e24:	eor	r2, r6, #1
   12e28:	ldr	r8, [sp, #76]	; 0x4c
   12e2c:	ldr	sl, [sp, #80]	; 0x50
   12e30:	and	r2, r2, r3
   12e34:	ldr	r5, [sp, #84]	; 0x54
   12e38:	ldr	r7, [sp, #88]	; 0x58
   12e3c:	ldr	r4, [sp, #92]	; 0x5c
   12e40:	cmp	ip, #1
   12e44:	bls	12780 <__assert_fail@plt+0x1aa4>
   12e48:	add	r1, ip, r9
   12e4c:	mov	r0, #39	; 0x27
   12e50:	ldr	lr, [sp, #52]	; 0x34
   12e54:	mov	ip, #0
   12e58:	str	r6, [sp, #52]	; 0x34
   12e5c:	ldr	r6, [sp, #48]	; 0x30
   12e60:	b	12f1c <__assert_fail@plt+0x2240>
   12e64:	ldr	ip, [sp, #44]	; 0x2c
   12e68:	sub	r3, fp, #2
   12e6c:	clz	r3, r3
   12e70:	lsr	r3, r3, #5
   12e74:	cmp	ip, #0
   12e78:	bne	1308c <__assert_fail@plt+0x23b0>
   12e7c:	eor	ip, r6, #1
   12e80:	ands	r3, r3, ip
   12e84:	beq	12eb4 <__assert_fail@plt+0x21d8>
   12e88:	cmp	sl, r4
   12e8c:	add	ip, r4, #1
   12e90:	strbhi	r0, [r8, r4]
   12e94:	cmp	sl, ip
   12e98:	movhi	r6, #36	; 0x24
   12e9c:	strbhi	r6, [r8, ip]
   12ea0:	add	ip, r4, #2
   12ea4:	mov	r6, r3
   12ea8:	cmp	sl, ip
   12eac:	add	r4, r4, #3
   12eb0:	strbhi	r0, [r8, ip]
   12eb4:	cmp	sl, r4
   12eb8:	movhi	r3, #92	; 0x5c
   12ebc:	strbhi	r3, [r8, r4]
   12ec0:	add	r3, r4, #1
   12ec4:	cmp	sl, r3
   12ec8:	bls	12ed8 <__assert_fail@plt+0x21fc>
   12ecc:	lsr	ip, r5, #6
   12ed0:	add	ip, ip, #48	; 0x30
   12ed4:	strb	ip, [r8, r3]
   12ed8:	add	r3, r4, #2
   12edc:	cmp	sl, r3
   12ee0:	bls	12ef0 <__assert_fail@plt+0x2214>
   12ee4:	ubfx	ip, r5, #3, #3
   12ee8:	add	ip, ip, #48	; 0x30
   12eec:	strb	ip, [r8, r3]
   12ef0:	add	r9, r9, #1
   12ef4:	and	r5, r5, #7
   12ef8:	cmp	r9, r1
   12efc:	add	r5, r5, #48	; 0x30
   12f00:	add	r4, r4, #3
   12f04:	bcs	130b8 <__assert_fail@plt+0x23dc>
   12f08:	mov	ip, r2
   12f0c:	cmp	sl, r4
   12f10:	strbhi	r5, [r8, r4]
   12f14:	add	r4, r4, #1
   12f18:	ldrb	r5, [lr, #1]!
   12f1c:	cmp	r2, #0
   12f20:	bne	12e64 <__assert_fail@plt+0x2188>
   12f24:	eor	r3, ip, #1
   12f28:	cmp	r7, #0
   12f2c:	and	r3, r3, r6
   12f30:	uxtb	r3, r3
   12f34:	beq	12f48 <__assert_fail@plt+0x226c>
   12f38:	cmp	sl, r4
   12f3c:	movhi	r7, #92	; 0x5c
   12f40:	strbhi	r7, [r8, r4]
   12f44:	add	r4, r4, #1
   12f48:	add	r9, r9, #1
   12f4c:	cmp	r9, r1
   12f50:	bcs	130a0 <__assert_fail@plt+0x23c4>
   12f54:	cmp	r3, #0
   12f58:	beq	130d8 <__assert_fail@plt+0x23fc>
   12f5c:	cmp	sl, r4
   12f60:	add	r3, r4, #1
   12f64:	mov	r7, #0
   12f68:	strbhi	r0, [r8, r4]
   12f6c:	cmp	sl, r3
   12f70:	add	r4, r4, #2
   12f74:	mov	r6, r7
   12f78:	strbhi	r0, [r8, r3]
   12f7c:	b	12f0c <__assert_fail@plt+0x2230>
   12f80:	cmp	r1, #1
   12f84:	beq	12df8 <__assert_fail@plt+0x211c>
   12f88:	add	r2, r4, #1
   12f8c:	add	r3, sl, r1
   12f90:	add	r2, sl, r2
   12f94:	add	r4, r3, r4
   12f98:	ldrb	r3, [r2], #1
   12f9c:	sub	r3, r3, #91	; 0x5b
   12fa0:	cmp	r3, #33	; 0x21
   12fa4:	ldrls	pc, [pc, r3, lsl #2]
   12fa8:	b	13034 <__assert_fail@plt+0x2358>
   12fac:	andeq	r3, r1, r0, asr #32
   12fb0:	andeq	r3, r1, r0, asr #32
   12fb4:	andeq	r3, r1, r4, lsr r0
   12fb8:	andeq	r3, r1, r0, asr #32
   12fbc:	andeq	r3, r1, r4, lsr r0
   12fc0:	andeq	r3, r1, r0, asr #32
   12fc4:	andeq	r3, r1, r4, lsr r0
   12fc8:	andeq	r3, r1, r4, lsr r0
   12fcc:	andeq	r3, r1, r4, lsr r0
   12fd0:	andeq	r3, r1, r4, lsr r0
   12fd4:	andeq	r3, r1, r4, lsr r0
   12fd8:	andeq	r3, r1, r4, lsr r0
   12fdc:	andeq	r3, r1, r4, lsr r0
   12fe0:	andeq	r3, r1, r4, lsr r0
   12fe4:	andeq	r3, r1, r4, lsr r0
   12fe8:	andeq	r3, r1, r4, lsr r0
   12fec:	andeq	r3, r1, r4, lsr r0
   12ff0:	andeq	r3, r1, r4, lsr r0
   12ff4:	andeq	r3, r1, r4, lsr r0
   12ff8:	andeq	r3, r1, r4, lsr r0
   12ffc:	andeq	r3, r1, r4, lsr r0
   13000:	andeq	r3, r1, r4, lsr r0
   13004:	andeq	r3, r1, r4, lsr r0
   13008:	andeq	r3, r1, r4, lsr r0
   1300c:	andeq	r3, r1, r4, lsr r0
   13010:	andeq	r3, r1, r4, lsr r0
   13014:	andeq	r3, r1, r4, lsr r0
   13018:	andeq	r3, r1, r4, lsr r0
   1301c:	andeq	r3, r1, r4, lsr r0
   13020:	andeq	r3, r1, r4, lsr r0
   13024:	andeq	r3, r1, r4, lsr r0
   13028:	andeq	r3, r1, r4, lsr r0
   1302c:	andeq	r3, r1, r4, lsr r0
   13030:	andeq	r3, r1, r0, asr #32
   13034:	cmp	r4, r2
   13038:	bne	12f98 <__assert_fail@plt+0x22bc>
   1303c:	b	12df8 <__assert_fail@plt+0x211c>
   13040:	mov	r8, #2
   13044:	ldr	fp, [sp, #76]	; 0x4c
   13048:	ldr	sl, [sp, #80]	; 0x50
   1304c:	b	12578 <__assert_fail@plt+0x189c>
   13050:	ldr	r2, [sp, #40]	; 0x28
   13054:	str	fp, [sp, #152]	; 0x98
   13058:	mov	fp, r8
   1305c:	ldr	r8, [sp, #152]	; 0x98
   13060:	and	r2, r2, r3
   13064:	str	r2, [sp, #40]	; 0x28
   13068:	b	12578 <__assert_fail@plt+0x189c>
   1306c:	cmp	sl, r4
   13070:	movls	r0, r4
   13074:	bls	126a8 <__assert_fail@plt+0x19cc>
   13078:	ldr	r3, [sp, #48]	; 0x30
   1307c:	b	12698 <__assert_fail@plt+0x19bc>
   13080:	str	sl, [sp, #72]	; 0x48
   13084:	ldr	sl, [sp, #44]	; 0x2c
   13088:	b	124e8 <__assert_fail@plt+0x180c>
   1308c:	str	r3, [sp, #40]	; 0x28
   13090:	str	fp, [sp, #152]	; 0x98
   13094:	mov	fp, r8
   13098:	ldr	r8, [sp, #152]	; 0x98
   1309c:	b	12578 <__assert_fail@plt+0x189c>
   130a0:	str	r6, [sp, #48]	; 0x30
   130a4:	ldr	r6, [sp, #52]	; 0x34
   130a8:	b	12518 <__assert_fail@plt+0x183c>
   130ac:	mov	r6, #0
   130b0:	ldr	r2, [sp, #40]	; 0x28
   130b4:	b	12e48 <__assert_fail@plt+0x216c>
   130b8:	str	r6, [sp, #48]	; 0x30
   130bc:	ldr	r6, [sp, #52]	; 0x34
   130c0:	b	12304 <__assert_fail@plt+0x1628>
   130c4:	add	r4, r4, #4
   130c8:	mov	r6, #0
   130cc:	str	r3, [sp, #48]	; 0x30
   130d0:	mov	r5, #48	; 0x30
   130d4:	b	1228c <__assert_fail@plt+0x15b0>
   130d8:	mov	r7, r3
   130dc:	b	12f0c <__assert_fail@plt+0x2230>
   130e0:	mov	r3, #1
   130e4:	movw	r2, #21832	; 0x5548
   130e8:	movt	r2, #1
   130ec:	mov	r4, r3
   130f0:	str	r3, [sp, #36]	; 0x24
   130f4:	str	r3, [sp, #40]	; 0x28
   130f8:	str	sl, [sp, #44]	; 0x2c
   130fc:	str	sl, [sp, #48]	; 0x30
   13100:	str	r3, [sp, #56]	; 0x38
   13104:	str	r2, [sp, #60]	; 0x3c
   13108:	str	sl, [sp, #68]	; 0x44
   1310c:	str	sl, [sp, #72]	; 0x48
   13110:	b	11db4 <__assert_fail@plt+0x10d8>
   13114:	mov	r3, r6
   13118:	mov	r5, #48	; 0x30
   1311c:	mov	r6, #0
   13120:	b	1228c <__assert_fail@plt+0x15b0>
   13124:	mov	r5, r3
   13128:	b	12604 <__assert_fail@plt+0x1928>
   1312c:	cmp	sl, r4
   13130:	mov	r5, #48	; 0x30
   13134:	movhi	r3, #48	; 0x30
   13138:	strbhi	r3, [r8, r4]
   1313c:	add	r3, r0, #2
   13140:	add	r4, r0, #3
   13144:	cmp	sl, r3
   13148:	movhi	r1, #48	; 0x30
   1314c:	strbhi	r1, [r8, r3]
   13150:	b	126dc <__assert_fail@plt+0x1a00>
   13154:	str	fp, [sp, #152]	; 0x98
   13158:	mov	fp, r8
   1315c:	ldr	r8, [sp, #152]	; 0x98
   13160:	b	12578 <__assert_fail@plt+0x189c>
   13164:	ldr	r3, [sp, #164]	; 0xa4
   13168:	ldrb	r3, [r3]
   1316c:	cmp	r3, #0
   13170:	beq	11d84 <__assert_fail@plt+0x10a8>
   13174:	ldr	r2, [sp, #164]	; 0xa4
   13178:	cmp	sl, r4
   1317c:	strbhi	r3, [fp, r4]
   13180:	add	r4, r4, #1
   13184:	ldrb	r3, [r2, #1]!
   13188:	cmp	r3, #0
   1318c:	bne	13178 <__assert_fail@plt+0x249c>
   13190:	b	11d84 <__assert_fail@plt+0x10a8>
   13194:	mov	ip, r5
   13198:	mov	r6, #0
   1319c:	ldr	r2, [sp, #40]	; 0x28
   131a0:	ldr	r8, [sp, #76]	; 0x4c
   131a4:	ldr	sl, [sp, #80]	; 0x50
   131a8:	ldr	r5, [sp, #84]	; 0x54
   131ac:	ldr	r7, [sp, #88]	; 0x58
   131b0:	ldr	r4, [sp, #92]	; 0x5c
   131b4:	b	12e40 <__assert_fail@plt+0x2164>
   131b8:	ldr	r2, [sp, #32]
   131bc:	ldrb	r1, [r2, r3]
   131c0:	sub	r2, r1, #33	; 0x21
   131c4:	cmp	r2, #29
   131c8:	ldrls	pc, [pc, r2, lsl #2]
   131cc:	b	132a8 <__assert_fail@plt+0x25cc>
   131d0:	andeq	r3, r1, r8, asr #4
   131d4:	andeq	r3, r1, r8, lsr #5
   131d8:	andeq	r3, r1, r8, lsr #5
   131dc:	andeq	r3, r1, r8, lsr #5
   131e0:	andeq	r3, r1, r8, lsr #5
   131e4:	andeq	r3, r1, r8, lsr #5
   131e8:	andeq	r3, r1, r8, asr #4
   131ec:	andeq	r3, r1, r8, asr #4
   131f0:	andeq	r3, r1, r8, asr #4
   131f4:	andeq	r3, r1, r8, lsr #5
   131f8:	andeq	r3, r1, r8, lsr #5
   131fc:	andeq	r3, r1, r8, lsr #5
   13200:	andeq	r3, r1, r8, asr #4
   13204:	andeq	r3, r1, r8, lsr #5
   13208:	andeq	r3, r1, r8, asr #4
   1320c:	andeq	r3, r1, r8, lsr #5
   13210:	andeq	r3, r1, r8, lsr #5
   13214:	andeq	r3, r1, r8, lsr #5
   13218:	andeq	r3, r1, r8, lsr #5
   1321c:	andeq	r3, r1, r8, lsr #5
   13220:	andeq	r3, r1, r8, lsr #5
   13224:	andeq	r3, r1, r8, lsr #5
   13228:	andeq	r3, r1, r8, lsr #5
   1322c:	andeq	r3, r1, r8, lsr #5
   13230:	andeq	r3, r1, r8, lsr #5
   13234:	andeq	r3, r1, r8, lsr #5
   13238:	andeq	r3, r1, r8, lsr #5
   1323c:	andeq	r3, r1, r8, asr #4
   13240:	andeq	r3, r1, r8, asr #4
   13244:	andeq	r3, r1, r8, asr #4
   13248:	ldr	r2, [sp, #44]	; 0x2c
   1324c:	cmp	r2, #0
   13250:	bne	133ac <__assert_fail@plt+0x26d0>
   13254:	cmp	sl, r4
   13258:	mov	r5, r1
   1325c:	movhi	r2, #63	; 0x3f
   13260:	mov	r9, r3
   13264:	strbhi	r2, [r8, r4]
   13268:	add	r2, r4, #1
   1326c:	cmp	sl, r2
   13270:	movhi	r0, #34	; 0x22
   13274:	strbhi	r0, [r8, r2]
   13278:	add	r2, r4, #2
   1327c:	cmp	sl, r2
   13280:	movhi	r0, #34	; 0x22
   13284:	strbhi	r0, [r8, r2]
   13288:	add	r2, r4, #3
   1328c:	add	r4, r4, #4
   13290:	cmp	sl, r2
   13294:	movhi	r0, #63	; 0x3f
   13298:	strbhi	r0, [r8, r2]
   1329c:	mov	r2, #0
   132a0:	mov	r6, r2
   132a4:	b	126dc <__assert_fail@plt+0x1a00>
   132a8:	mov	r3, #0
   132ac:	mov	r6, r3
   132b0:	b	12254 <__assert_fail@plt+0x1578>
   132b4:	ldr	r0, [sp, #28]
   132b8:	mov	r1, r4
   132bc:	mov	r2, r7
   132c0:	mov	r3, r5
   132c4:	mov	ip, r5
   132c8:	ldr	r8, [sp, #76]	; 0x4c
   132cc:	ldr	sl, [sp, #80]	; 0x50
   132d0:	cmp	r1, r0
   132d4:	ldr	r5, [sp, #84]	; 0x54
   132d8:	ldr	r7, [sp, #88]	; 0x58
   132dc:	ldr	r4, [sp, #92]	; 0x5c
   132e0:	bcs	13314 <__assert_fail@plt+0x2638>
   132e4:	ldrb	r6, [r2]
   132e8:	cmp	r6, #0
   132ec:	bne	13300 <__assert_fail@plt+0x2624>
   132f0:	b	13434 <__assert_fail@plt+0x2758>
   132f4:	ldrb	r6, [r2, #1]!
   132f8:	cmp	r6, #0
   132fc:	beq	133bc <__assert_fail@plt+0x26e0>
   13300:	add	r3, r3, #1
   13304:	add	r1, r9, r3
   13308:	cmp	r1, r0
   1330c:	bcc	132f4 <__assert_fail@plt+0x2618>
   13310:	mov	ip, r3
   13314:	mov	r6, #0
   13318:	ldr	r2, [sp, #40]	; 0x28
   1331c:	b	12e40 <__assert_fail@plt+0x2164>
   13320:	mov	r3, #1
   13324:	mov	r2, #0
   13328:	mov	r4, r2
   1332c:	str	r3, [sp, #36]	; 0x24
   13330:	str	r3, [sp, #40]	; 0x28
   13334:	str	r3, [sp, #44]	; 0x2c
   13338:	str	r2, [sp, #48]	; 0x30
   1333c:	str	r3, [sp, #56]	; 0x38
   13340:	movw	r3, #21832	; 0x5548
   13344:	movt	r3, #1
   13348:	str	r3, [sp, #60]	; 0x3c
   1334c:	str	r2, [sp, #68]	; 0x44
   13350:	str	r2, [sp, #72]	; 0x48
   13354:	b	11db4 <__assert_fail@plt+0x10d8>
   13358:	mov	r2, r3
   1335c:	ldr	r3, [sp, #60]	; 0x3c
   13360:	cmp	r3, #0
   13364:	moveq	r2, #0
   13368:	andne	r2, r2, #1
   1336c:	cmp	r2, #0
   13370:	beq	1339c <__assert_fail@plt+0x26c0>
   13374:	mov	r2, r3
   13378:	ldrb	r3, [r3]
   1337c:	cmp	r3, #0
   13380:	beq	1339c <__assert_fail@plt+0x26c0>
   13384:	cmp	sl, r4
   13388:	strbhi	r3, [fp, r4]
   1338c:	add	r4, r4, #1
   13390:	ldrb	r3, [r2, #1]!
   13394:	cmp	r3, #0
   13398:	bne	13384 <__assert_fail@plt+0x26a8>
   1339c:	cmp	sl, r4
   133a0:	movhi	r3, #0
   133a4:	strbhi	r3, [fp, r4]
   133a8:	b	125bc <__assert_fail@plt+0x18e0>
   133ac:	str	fp, [sp, #152]	; 0x98
   133b0:	mov	fp, r8
   133b4:	ldr	r8, [sp, #152]	; 0x98
   133b8:	b	12584 <__assert_fail@plt+0x18a8>
   133bc:	mov	ip, r3
   133c0:	ldr	r2, [sp, #40]	; 0x28
   133c4:	b	12e40 <__assert_fail@plt+0x2164>
   133c8:	str	fp, [sp, #152]	; 0x98
   133cc:	mov	fp, r8
   133d0:	ldr	r8, [sp, #152]	; 0x98
   133d4:	sub	r3, r8, #2
   133d8:	clz	r3, r3
   133dc:	lsr	r3, r3, #5
   133e0:	str	r3, [sp, #40]	; 0x28
   133e4:	b	12578 <__assert_fail@plt+0x189c>
   133e8:	mov	ip, #5
   133ec:	ldr	r3, [sp, #28]
   133f0:	str	ip, [sp]
   133f4:	ldr	r2, [sp, #156]	; 0x9c
   133f8:	ldr	ip, [sp, #164]	; 0xa4
   133fc:	ldr	r0, [sp, #160]	; 0xa0
   13400:	str	r2, [sp, #4]
   13404:	ldr	r2, [sp, #32]
   13408:	ldr	r1, [sp, #72]	; 0x48
   1340c:	str	ip, [sp, #12]
   13410:	ldr	ip, [sp, #168]	; 0xa8
   13414:	str	r0, [sp, #8]
   13418:	mov	r0, fp
   1341c:	str	ip, [sp, #16]
   13420:	bl	11ccc <__assert_fail@plt+0xff0>
   13424:	mov	r4, r0
   13428:	b	125bc <__assert_fail@plt+0x18e0>
   1342c:	mov	r8, #2
   13430:	b	12578 <__assert_fail@plt+0x189c>
   13434:	ldr	r2, [sp, #40]	; 0x28
   13438:	b	12e40 <__assert_fail@plt+0x2164>
   1343c:	mov	r3, #0
   13440:	mov	r2, #1
   13444:	mov	r4, r3
   13448:	strd	r2, [sp, #36]	; 0x24
   1344c:	strd	r2, [sp, #44]	; 0x2c
   13450:	str	r2, [sp, #56]	; 0x38
   13454:	str	r3, [sp, #68]	; 0x44
   13458:	str	r3, [sp, #72]	; 0x48
   1345c:	movw	r3, #21852	; 0x555c
   13460:	movt	r3, #1
   13464:	str	r3, [sp, #60]	; 0x3c
   13468:	b	11db4 <__assert_fail@plt+0x10d8>
   1346c:	mov	r3, #0
   13470:	mov	r1, #1
   13474:	mov	r2, r3
   13478:	str	r1, [sp, #36]	; 0x24
   1347c:	str	r3, [sp, #48]	; 0x30
   13480:	str	sl, [sp, #72]	; 0x48
   13484:	b	123bc <__assert_fail@plt+0x16e0>
   13488:	bl	10cd0 <abort@plt>
   1348c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13490:	mov	r4, r0
   13494:	mov	r5, r3
   13498:	strd	r6, [sp, #8]
   1349c:	movw	r7, #24784	; 0x60d0
   134a0:	movt	r7, #2
   134a4:	strd	r8, [sp, #16]
   134a8:	strd	sl, [sp, #24]
   134ac:	mov	sl, r1
   134b0:	mov	fp, r2
   134b4:	str	lr, [sp, #32]
   134b8:	sub	sp, sp, #60	; 0x3c
   134bc:	bl	10c28 <__errno_location@plt>
   134c0:	mov	r8, r0
   134c4:	cmn	r4, #-2147483647	; 0x80000001
   134c8:	ldr	r6, [r7]
   134cc:	movne	r0, #0
   134d0:	moveq	r0, #1
   134d4:	ldr	r3, [r8]
   134d8:	orrs	r0, r0, r4, lsr #31
   134dc:	str	r3, [sp, #28]
   134e0:	bne	13670 <__assert_fail@plt+0x2994>
   134e4:	ldr	r3, [r7, #4]
   134e8:	cmp	r3, r4
   134ec:	bgt	1354c <__assert_fail@plt+0x2870>
   134f0:	add	r1, r7, #8
   134f4:	sub	r2, r4, r3
   134f8:	str	r3, [sp, #52]	; 0x34
   134fc:	cmp	r6, r1
   13500:	add	r2, r2, #1
   13504:	beq	13648 <__assert_fail@plt+0x296c>
   13508:	mov	r1, #8
   1350c:	mov	r0, r6
   13510:	mvn	r3, #-2147483648	; 0x80000000
   13514:	str	r1, [sp]
   13518:	add	r1, sp, #52	; 0x34
   1351c:	bl	144f0 <__assert_fail@plt+0x3814>
   13520:	mov	r6, r0
   13524:	str	r0, [r7]
   13528:	ldr	r0, [r7, #4]
   1352c:	mov	r1, #0
   13530:	ldr	r2, [sp, #52]	; 0x34
   13534:	sub	r2, r2, r0
   13538:	add	r0, r6, r0, lsl #3
   1353c:	lsl	r2, r2, #3
   13540:	bl	10c40 <memset@plt>
   13544:	ldr	r3, [sp, #52]	; 0x34
   13548:	str	r3, [r7, #4]
   1354c:	ldr	r1, [r5, #4]
   13550:	add	r0, r6, r4, lsl #3
   13554:	add	ip, r5, #8
   13558:	mov	r3, fp
   1355c:	mov	r2, sl
   13560:	ldr	r7, [r0, #4]
   13564:	str	r0, [sp, #36]	; 0x24
   13568:	str	ip, [sp, #40]	; 0x28
   1356c:	orr	r0, r1, #1
   13570:	ldr	r9, [r6, r4, lsl #3]
   13574:	str	ip, [sp, #8]
   13578:	ldr	lr, [r5, #44]	; 0x2c
   1357c:	str	r0, [sp, #4]
   13580:	ldr	ip, [r5]
   13584:	mov	r1, r9
   13588:	str	ip, [sp, #32]
   1358c:	ldr	ip, [r5, #40]	; 0x28
   13590:	str	ip, [sp, #12]
   13594:	ldr	ip, [sp, #32]
   13598:	str	lr, [sp, #16]
   1359c:	str	r0, [sp, #44]	; 0x2c
   135a0:	mov	r0, r7
   135a4:	str	ip, [sp]
   135a8:	bl	11ccc <__assert_fail@plt+0xff0>
   135ac:	cmp	r9, r0
   135b0:	bhi	13620 <__assert_fail@plt+0x2944>
   135b4:	add	r9, r0, #1
   135b8:	movw	r3, #24880	; 0x6130
   135bc:	movt	r3, #2
   135c0:	cmp	r7, r3
   135c4:	str	r9, [r6, r4, lsl #3]
   135c8:	beq	135d4 <__assert_fail@plt+0x28f8>
   135cc:	mov	r0, r7
   135d0:	bl	14a58 <__assert_fail@plt+0x3d7c>
   135d4:	mov	r0, r9
   135d8:	bl	14340 <__assert_fail@plt+0x3664>
   135dc:	ldr	ip, [r5]
   135e0:	mov	r3, fp
   135e4:	mov	r2, sl
   135e8:	mov	r1, r9
   135ec:	mov	r7, r0
   135f0:	ldr	lr, [sp, #36]	; 0x24
   135f4:	ldr	r4, [r5, #40]	; 0x28
   135f8:	str	r0, [lr, #4]
   135fc:	ldr	lr, [r5, #44]	; 0x2c
   13600:	str	ip, [sp]
   13604:	ldr	ip, [sp, #44]	; 0x2c
   13608:	str	ip, [sp, #4]
   1360c:	ldr	ip, [sp, #40]	; 0x28
   13610:	str	r4, [sp, #12]
   13614:	str	lr, [sp, #16]
   13618:	str	ip, [sp, #8]
   1361c:	bl	11ccc <__assert_fail@plt+0xff0>
   13620:	ldr	r3, [sp, #28]
   13624:	mov	r0, r7
   13628:	str	r3, [r8]
   1362c:	add	sp, sp, #60	; 0x3c
   13630:	ldrd	r4, [sp]
   13634:	ldrd	r6, [sp, #8]
   13638:	ldrd	r8, [sp, #16]
   1363c:	ldrd	sl, [sp, #24]
   13640:	add	sp, sp, #32
   13644:	pop	{pc}		; (ldr pc, [sp], #4)
   13648:	mov	r1, #8
   1364c:	mvn	r3, #-2147483648	; 0x80000000
   13650:	str	r1, [sp]
   13654:	add	r1, sp, #52	; 0x34
   13658:	bl	144f0 <__assert_fail@plt+0x3814>
   1365c:	ldrd	r2, [r7, #8]
   13660:	mov	r6, r0
   13664:	str	r0, [r7]
   13668:	strd	r2, [r0]
   1366c:	b	13528 <__assert_fail@plt+0x284c>
   13670:	bl	10cd0 <abort@plt>
   13674:	strd	r4, [sp, #-16]!
   13678:	mov	r5, r0
   1367c:	str	r6, [sp, #8]
   13680:	str	lr, [sp, #12]
   13684:	bl	10c28 <__errno_location@plt>
   13688:	mov	r4, r0
   1368c:	cmp	r5, #0
   13690:	ldr	r0, [pc, #32]	; 136b8 <__assert_fail@plt+0x29dc>
   13694:	mov	r1, #48	; 0x30
   13698:	movne	r0, r5
   1369c:	ldr	r6, [r4]
   136a0:	bl	14668 <__assert_fail@plt+0x398c>
   136a4:	str	r6, [r4]
   136a8:	ldrd	r4, [sp]
   136ac:	ldr	r6, [sp, #8]
   136b0:	add	sp, sp, #12
   136b4:	pop	{pc}		; (ldr pc, [sp], #4)
   136b8:	andeq	r6, r2, r0, lsr r2
   136bc:	ldr	r3, [pc, #12]	; 136d0 <__assert_fail@plt+0x29f4>
   136c0:	cmp	r0, #0
   136c4:	moveq	r0, r3
   136c8:	ldr	r0, [r0]
   136cc:	bx	lr
   136d0:	andeq	r6, r2, r0, lsr r2
   136d4:	ldr	r3, [pc, #12]	; 136e8 <__assert_fail@plt+0x2a0c>
   136d8:	cmp	r0, #0
   136dc:	moveq	r0, r3
   136e0:	str	r1, [r0]
   136e4:	bx	lr
   136e8:	andeq	r6, r2, r0, lsr r2
   136ec:	ldr	r3, [pc, #52]	; 13728 <__assert_fail@plt+0x2a4c>
   136f0:	cmp	r0, #0
   136f4:	push	{lr}		; (str lr, [sp, #-4]!)
   136f8:	lsr	lr, r1, #5
   136fc:	and	r1, r1, #31
   13700:	moveq	r0, r3
   13704:	add	r3, r0, #8
   13708:	ldr	ip, [r3, lr, lsl #2]
   1370c:	lsr	r0, ip, r1
   13710:	eor	r2, r2, r0
   13714:	and	r0, r0, #1
   13718:	and	r2, r2, #1
   1371c:	eor	r1, ip, r2, lsl r1
   13720:	str	r1, [r3, lr, lsl #2]
   13724:	pop	{pc}		; (ldr pc, [sp], #4)
   13728:	andeq	r6, r2, r0, lsr r2
   1372c:	ldr	r3, [pc, #16]	; 13744 <__assert_fail@plt+0x2a68>
   13730:	cmp	r0, #0
   13734:	movne	r3, r0
   13738:	ldr	r0, [r3, #4]
   1373c:	str	r1, [r3, #4]
   13740:	bx	lr
   13744:	andeq	r6, r2, r0, lsr r2
   13748:	ldr	r3, [pc, #48]	; 13780 <__assert_fail@plt+0x2aa4>
   1374c:	cmp	r0, #0
   13750:	mov	ip, #10
   13754:	moveq	r0, r3
   13758:	cmp	r2, #0
   1375c:	cmpne	r1, #0
   13760:	str	ip, [r0]
   13764:	beq	13774 <__assert_fail@plt+0x2a98>
   13768:	str	r1, [r0, #40]	; 0x28
   1376c:	str	r2, [r0, #44]	; 0x2c
   13770:	bx	lr
   13774:	str	r4, [sp, #-8]!
   13778:	str	lr, [sp, #4]
   1377c:	bl	10cd0 <abort@plt>
   13780:	andeq	r6, r2, r0, lsr r2
   13784:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13788:	strd	r6, [sp, #8]
   1378c:	mov	r7, r0
   13790:	mov	r6, r1
   13794:	strd	r8, [sp, #16]
   13798:	mov	r8, r2
   1379c:	mov	r9, r3
   137a0:	str	lr, [sp, #24]
   137a4:	sub	sp, sp, #28
   137a8:	ldr	r4, [sp, #56]	; 0x38
   137ac:	ldr	ip, [pc, #104]	; 1381c <__assert_fail@plt+0x2b40>
   137b0:	cmp	r4, #0
   137b4:	moveq	r4, ip
   137b8:	bl	10c28 <__errno_location@plt>
   137bc:	ldr	ip, [r4, #44]	; 0x2c
   137c0:	mov	r5, r0
   137c4:	mov	r1, r6
   137c8:	add	lr, r4, #8
   137cc:	mov	r3, r9
   137d0:	ldr	r6, [r5]
   137d4:	mov	r2, r8
   137d8:	mov	r0, r7
   137dc:	str	ip, [sp, #16]
   137e0:	ldr	ip, [r4, #40]	; 0x28
   137e4:	str	lr, [sp, #8]
   137e8:	str	ip, [sp, #12]
   137ec:	ldr	ip, [r4, #4]
   137f0:	str	ip, [sp, #4]
   137f4:	ldr	ip, [r4]
   137f8:	str	ip, [sp]
   137fc:	bl	11ccc <__assert_fail@plt+0xff0>
   13800:	str	r6, [r5]
   13804:	add	sp, sp, #28
   13808:	ldrd	r4, [sp]
   1380c:	ldrd	r6, [sp, #8]
   13810:	ldrd	r8, [sp, #16]
   13814:	add	sp, sp, #24
   13818:	pop	{pc}		; (ldr pc, [sp], #4)
   1381c:	andeq	r6, r2, r0, lsr r2
   13820:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13824:	cmp	r3, #0
   13828:	ldr	r4, [pc, #220]	; 1390c <__assert_fail@plt+0x2c30>
   1382c:	movne	r4, r3
   13830:	strd	r6, [sp, #8]
   13834:	mov	r6, r2
   13838:	strd	r8, [sp, #16]
   1383c:	mov	r9, r0
   13840:	strd	sl, [sp, #24]
   13844:	mov	sl, r1
   13848:	str	lr, [sp, #32]
   1384c:	sub	sp, sp, #44	; 0x2c
   13850:	bl	10c28 <__errno_location@plt>
   13854:	ldr	r5, [r4, #4]
   13858:	mov	r7, r0
   1385c:	mov	r1, #0
   13860:	add	r8, r4, #8
   13864:	mov	r3, sl
   13868:	ldr	ip, [r4, #44]	; 0x2c
   1386c:	mov	r2, r9
   13870:	mov	r0, r1
   13874:	ldr	lr, [r7]
   13878:	cmp	r6, r1
   1387c:	orreq	r5, r5, #1
   13880:	str	ip, [sp, #16]
   13884:	ldr	ip, [r4, #40]	; 0x28
   13888:	stmib	sp, {r5, r8, ip}
   1388c:	ldr	ip, [r4]
   13890:	str	lr, [sp, #28]
   13894:	str	ip, [sp]
   13898:	bl	11ccc <__assert_fail@plt+0xff0>
   1389c:	add	r1, r0, #1
   138a0:	mov	fp, r0
   138a4:	mov	r0, r1
   138a8:	str	r1, [sp, #36]	; 0x24
   138ac:	bl	14340 <__assert_fail@plt+0x3664>
   138b0:	ldr	ip, [r4, #44]	; 0x2c
   138b4:	mov	r3, sl
   138b8:	mov	r2, r9
   138bc:	ldr	r1, [sp, #36]	; 0x24
   138c0:	str	ip, [sp, #16]
   138c4:	ldr	ip, [r4, #40]	; 0x28
   138c8:	str	r0, [sp, #32]
   138cc:	stmib	sp, {r5, r8, ip}
   138d0:	ldr	ip, [r4]
   138d4:	str	ip, [sp]
   138d8:	bl	11ccc <__assert_fail@plt+0xff0>
   138dc:	ldr	lr, [sp, #28]
   138e0:	cmp	r6, #0
   138e4:	ldr	r0, [sp, #32]
   138e8:	str	lr, [r7]
   138ec:	strne	fp, [r6]
   138f0:	add	sp, sp, #44	; 0x2c
   138f4:	ldrd	r4, [sp]
   138f8:	ldrd	r6, [sp, #8]
   138fc:	ldrd	r8, [sp, #16]
   13900:	ldrd	sl, [sp, #24]
   13904:	add	sp, sp, #32
   13908:	pop	{pc}		; (ldr pc, [sp], #4)
   1390c:	andeq	r6, r2, r0, lsr r2
   13910:	mov	r3, r2
   13914:	mov	r2, #0
   13918:	b	13820 <__assert_fail@plt+0x2b44>
   1391c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13920:	movw	r5, #24784	; 0x60d0
   13924:	movt	r5, #2
   13928:	ldr	r3, [r5, #4]
   1392c:	strd	r6, [sp, #8]
   13930:	str	r8, [sp, #16]
   13934:	str	lr, [sp, #20]
   13938:	ldr	r7, [r5]
   1393c:	cmp	r3, #1
   13940:	ble	13964 <__assert_fail@plt+0x2c88>
   13944:	mov	r4, #1
   13948:	add	r6, r7, #4
   1394c:	ldr	r0, [r6, r4, lsl #3]
   13950:	add	r4, r4, #1
   13954:	bl	14a58 <__assert_fail@plt+0x3d7c>
   13958:	ldr	r3, [r5, #4]
   1395c:	cmp	r3, r4
   13960:	bgt	1394c <__assert_fail@plt+0x2c70>
   13964:	ldr	r0, [r7, #4]
   13968:	movw	r4, #24880	; 0x6130
   1396c:	movt	r4, #2
   13970:	cmp	r0, r4
   13974:	beq	13988 <__assert_fail@plt+0x2cac>
   13978:	bl	14a58 <__assert_fail@plt+0x3d7c>
   1397c:	mov	r3, #256	; 0x100
   13980:	str	r3, [r5, #8]
   13984:	str	r4, [r5, #12]
   13988:	ldr	r4, [pc, #44]	; 139bc <__assert_fail@plt+0x2ce0>
   1398c:	cmp	r7, r4
   13990:	beq	139a0 <__assert_fail@plt+0x2cc4>
   13994:	mov	r0, r7
   13998:	bl	14a58 <__assert_fail@plt+0x3d7c>
   1399c:	str	r4, [r5]
   139a0:	mov	r3, #1
   139a4:	ldrd	r6, [sp, #8]
   139a8:	str	r3, [r5, #4]
   139ac:	ldrd	r4, [sp]
   139b0:	ldr	r8, [sp, #16]
   139b4:	add	sp, sp, #20
   139b8:	pop	{pc}		; (ldr pc, [sp], #4)
   139bc:	ldrdeq	r6, [r2], -r8
   139c0:	ldr	r3, [pc, #4]	; 139cc <__assert_fail@plt+0x2cf0>
   139c4:	mvn	r2, #0
   139c8:	b	1348c <__assert_fail@plt+0x27b0>
   139cc:	andeq	r6, r2, r0, lsr r2
   139d0:	ldr	r3, [pc]	; 139d8 <__assert_fail@plt+0x2cfc>
   139d4:	b	1348c <__assert_fail@plt+0x27b0>
   139d8:	andeq	r6, r2, r0, lsr r2
   139dc:	mov	r1, r0
   139e0:	ldr	r3, [pc, #8]	; 139f0 <__assert_fail@plt+0x2d14>
   139e4:	mvn	r2, #0
   139e8:	mov	r0, #0
   139ec:	b	1348c <__assert_fail@plt+0x27b0>
   139f0:	andeq	r6, r2, r0, lsr r2
   139f4:	mov	r2, r1
   139f8:	ldr	r3, [pc, #8]	; 13a08 <__assert_fail@plt+0x2d2c>
   139fc:	mov	r1, r0
   13a00:	mov	r0, #0
   13a04:	b	1348c <__assert_fail@plt+0x27b0>
   13a08:	andeq	r6, r2, r0, lsr r2
   13a0c:	strd	r4, [sp, #-12]!
   13a10:	mov	r5, r2
   13a14:	mov	r4, r0
   13a18:	str	lr, [sp, #8]
   13a1c:	sub	sp, sp, #52	; 0x34
   13a20:	mov	r0, sp
   13a24:	bl	11b28 <__assert_fail@plt+0xe4c>
   13a28:	mov	r3, sp
   13a2c:	mov	r1, r5
   13a30:	mov	r0, r4
   13a34:	mvn	r2, #0
   13a38:	bl	1348c <__assert_fail@plt+0x27b0>
   13a3c:	add	sp, sp, #52	; 0x34
   13a40:	ldrd	r4, [sp]
   13a44:	add	sp, sp, #8
   13a48:	pop	{pc}		; (ldr pc, [sp], #4)
   13a4c:	strd	r4, [sp, #-16]!
   13a50:	mov	r5, r2
   13a54:	mov	r4, r0
   13a58:	str	r6, [sp, #8]
   13a5c:	mov	r6, r3
   13a60:	str	lr, [sp, #12]
   13a64:	sub	sp, sp, #48	; 0x30
   13a68:	mov	r0, sp
   13a6c:	bl	11b28 <__assert_fail@plt+0xe4c>
   13a70:	mov	r3, sp
   13a74:	mov	r2, r6
   13a78:	mov	r1, r5
   13a7c:	mov	r0, r4
   13a80:	bl	1348c <__assert_fail@plt+0x27b0>
   13a84:	add	sp, sp, #48	; 0x30
   13a88:	ldrd	r4, [sp]
   13a8c:	ldr	r6, [sp, #8]
   13a90:	add	sp, sp, #12
   13a94:	pop	{pc}		; (ldr pc, [sp], #4)
   13a98:	mov	r2, r1
   13a9c:	mov	r1, r0
   13aa0:	mov	r0, #0
   13aa4:	b	13a0c <__assert_fail@plt+0x2d30>
   13aa8:	mov	r3, r2
   13aac:	mov	r2, r1
   13ab0:	mov	r1, r0
   13ab4:	mov	r0, #0
   13ab8:	b	13a4c <__assert_fail@plt+0x2d70>
   13abc:	ldr	ip, [pc, #140]	; 13b50 <__assert_fail@plt+0x2e74>
   13ac0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13ac4:	ldrd	r4, [ip]
   13ac8:	strd	r6, [sp, #8]
   13acc:	ldrd	r6, [ip, #8]
   13ad0:	strd	r8, [sp, #16]
   13ad4:	lsr	r9, r2, #5
   13ad8:	str	lr, [sp, #24]
   13adc:	sub	sp, sp, #52	; 0x34
   13ae0:	and	lr, r2, #31
   13ae4:	add	r8, sp, #8
   13ae8:	mov	r2, r1
   13aec:	strd	r4, [sp]
   13af0:	mov	r1, r0
   13af4:	mov	r3, sp
   13af8:	strd	r6, [sp, #8]
   13afc:	mov	r0, #0
   13b00:	ldrd	r4, [ip, #16]
   13b04:	ldrd	r6, [ip, #24]
   13b08:	strd	r4, [sp, #16]
   13b0c:	ldrd	r4, [ip, #32]
   13b10:	strd	r6, [sp, #24]
   13b14:	ldrd	r6, [ip, #40]	; 0x28
   13b18:	strd	r4, [sp, #32]
   13b1c:	strd	r6, [sp, #40]	; 0x28
   13b20:	ldr	ip, [r8, r9, lsl #2]
   13b24:	mvn	r4, ip, lsr lr
   13b28:	and	r4, r4, #1
   13b2c:	eor	lr, ip, r4, lsl lr
   13b30:	str	lr, [r8, r9, lsl #2]
   13b34:	bl	1348c <__assert_fail@plt+0x27b0>
   13b38:	add	sp, sp, #52	; 0x34
   13b3c:	ldrd	r4, [sp]
   13b40:	ldrd	r6, [sp, #8]
   13b44:	ldrd	r8, [sp, #16]
   13b48:	add	sp, sp, #24
   13b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b50:	andeq	r6, r2, r0, lsr r2
   13b54:	mov	r2, r1
   13b58:	mvn	r1, #0
   13b5c:	b	13abc <__assert_fail@plt+0x2de0>
   13b60:	mov	r2, #58	; 0x3a
   13b64:	mvn	r1, #0
   13b68:	b	13abc <__assert_fail@plt+0x2de0>
   13b6c:	mov	r2, #58	; 0x3a
   13b70:	b	13abc <__assert_fail@plt+0x2de0>
   13b74:	strd	r4, [sp, #-20]!	; 0xffffffec
   13b78:	strd	r6, [sp, #8]
   13b7c:	mov	r6, r0
   13b80:	mov	r7, r2
   13b84:	str	lr, [sp, #16]
   13b88:	sub	sp, sp, #100	; 0x64
   13b8c:	mov	r0, sp
   13b90:	bl	11b28 <__assert_fail@plt+0xe4c>
   13b94:	ldrd	r4, [sp, #8]
   13b98:	mov	r1, r7
   13b9c:	mov	r0, r6
   13ba0:	add	r3, sp, #48	; 0x30
   13ba4:	mvn	r2, #0
   13ba8:	ldrd	r6, [sp]
   13bac:	strd	r4, [sp, #56]	; 0x38
   13bb0:	ldrd	r4, [sp, #16]
   13bb4:	strd	r6, [sp, #48]	; 0x30
   13bb8:	ldrd	r6, [sp, #32]
   13bbc:	ldr	lr, [sp, #60]	; 0x3c
   13bc0:	strd	r4, [sp, #64]	; 0x40
   13bc4:	ldrd	r4, [sp, #24]
   13bc8:	mvn	ip, lr
   13bcc:	and	ip, ip, #67108864	; 0x4000000
   13bd0:	strd	r4, [sp, #72]	; 0x48
   13bd4:	eor	ip, ip, lr
   13bd8:	ldrd	r4, [sp, #40]	; 0x28
   13bdc:	str	ip, [sp, #60]	; 0x3c
   13be0:	strd	r6, [sp, #80]	; 0x50
   13be4:	strd	r4, [sp, #88]	; 0x58
   13be8:	bl	1348c <__assert_fail@plt+0x27b0>
   13bec:	add	sp, sp, #100	; 0x64
   13bf0:	ldrd	r4, [sp]
   13bf4:	ldrd	r6, [sp, #8]
   13bf8:	add	sp, sp, #16
   13bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   13c00:	ldr	ip, [pc, #156]	; 13ca4 <__assert_fail@plt+0x2fc8>
   13c04:	cmp	r2, #0
   13c08:	cmpne	r1, #0
   13c0c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13c10:	strd	r6, [sp, #8]
   13c14:	mov	r6, r2
   13c18:	str	r8, [sp, #16]
   13c1c:	mov	r8, r3
   13c20:	strd	sl, [sp, #20]
   13c24:	ldrd	r4, [ip]
   13c28:	str	lr, [sp, #28]
   13c2c:	sub	sp, sp, #48	; 0x30
   13c30:	mov	lr, #10
   13c34:	ldrd	r2, [ip, #8]
   13c38:	ldrd	sl, [ip, #16]
   13c3c:	strd	r4, [sp]
   13c40:	ldrd	r4, [ip, #32]
   13c44:	str	lr, [sp]
   13c48:	strd	r2, [sp, #8]
   13c4c:	strd	sl, [sp, #16]
   13c50:	ldrd	r2, [ip, #24]
   13c54:	ldrd	sl, [ip, #40]	; 0x28
   13c58:	strd	r2, [sp, #24]
   13c5c:	strd	r4, [sp, #32]
   13c60:	strd	sl, [sp, #40]	; 0x28
   13c64:	beq	13ca0 <__assert_fail@plt+0x2fc4>
   13c68:	ldr	r2, [sp, #80]	; 0x50
   13c6c:	mov	r7, r1
   13c70:	mov	r3, sp
   13c74:	mov	r1, r8
   13c78:	str	r7, [sp, #40]	; 0x28
   13c7c:	str	r6, [sp, #44]	; 0x2c
   13c80:	bl	1348c <__assert_fail@plt+0x27b0>
   13c84:	add	sp, sp, #48	; 0x30
   13c88:	ldrd	r4, [sp]
   13c8c:	ldrd	r6, [sp, #8]
   13c90:	ldr	r8, [sp, #16]
   13c94:	ldrd	sl, [sp, #20]
   13c98:	add	sp, sp, #28
   13c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13ca0:	bl	10cd0 <abort@plt>
   13ca4:	andeq	r6, r2, r0, lsr r2
   13ca8:	mvn	ip, #0
   13cac:	push	{lr}		; (str lr, [sp, #-4]!)
   13cb0:	sub	sp, sp, #12
   13cb4:	str	ip, [sp]
   13cb8:	bl	13c00 <__assert_fail@plt+0x2f24>
   13cbc:	add	sp, sp, #12
   13cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cc4:	mvn	ip, #0
   13cc8:	push	{lr}		; (str lr, [sp, #-4]!)
   13ccc:	sub	sp, sp, #12
   13cd0:	mov	r3, r2
   13cd4:	mov	r2, r1
   13cd8:	mov	r1, r0
   13cdc:	mov	r0, #0
   13ce0:	str	ip, [sp]
   13ce4:	bl	13c00 <__assert_fail@plt+0x2f24>
   13ce8:	add	sp, sp, #12
   13cec:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf0:	push	{lr}		; (str lr, [sp, #-4]!)
   13cf4:	sub	sp, sp, #12
   13cf8:	str	r3, [sp]
   13cfc:	mov	r3, r2
   13d00:	mov	r2, r1
   13d04:	mov	r1, r0
   13d08:	mov	r0, #0
   13d0c:	bl	13c00 <__assert_fail@plt+0x2f24>
   13d10:	add	sp, sp, #12
   13d14:	pop	{pc}		; (ldr pc, [sp], #4)
   13d18:	ldr	r3, [pc]	; 13d20 <__assert_fail@plt+0x3044>
   13d1c:	b	1348c <__assert_fail@plt+0x27b0>
   13d20:	andeq	r6, r2, r0, ror #1
   13d24:	mov	r2, r1
   13d28:	ldr	r3, [pc, #8]	; 13d38 <__assert_fail@plt+0x305c>
   13d2c:	mov	r1, r0
   13d30:	mov	r0, #0
   13d34:	b	1348c <__assert_fail@plt+0x27b0>
   13d38:	andeq	r6, r2, r0, ror #1
   13d3c:	ldr	r3, [pc, #4]	; 13d48 <__assert_fail@plt+0x306c>
   13d40:	mvn	r2, #0
   13d44:	b	1348c <__assert_fail@plt+0x27b0>
   13d48:	andeq	r6, r2, r0, ror #1
   13d4c:	mov	r1, r0
   13d50:	ldr	r3, [pc, #8]	; 13d60 <__assert_fail@plt+0x3084>
   13d54:	mvn	r2, #0
   13d58:	mov	r0, #0
   13d5c:	b	1348c <__assert_fail@plt+0x27b0>
   13d60:	andeq	r6, r2, r0, ror #1
   13d64:	cmp	r1, #0
   13d68:	strd	r4, [sp, #-16]!
   13d6c:	mov	ip, r3
   13d70:	str	r6, [sp, #8]
   13d74:	mov	r4, r0
   13d78:	str	lr, [sp, #12]
   13d7c:	sub	sp, sp, #32
   13d80:	ldr	r5, [sp, #48]	; 0x30
   13d84:	ldr	r6, [sp, #52]	; 0x34
   13d88:	beq	13ecc <__assert_fail@plt+0x31f0>
   13d8c:	mov	r3, r1
   13d90:	mov	r1, #1
   13d94:	stm	sp, {r2, ip}
   13d98:	movw	r2, #21964	; 0x55cc
   13d9c:	movt	r2, #1
   13da0:	bl	10c64 <__fprintf_chk@plt>
   13da4:	mov	r2, #5
   13da8:	movw	r1, #21984	; 0x55e0
   13dac:	movt	r1, #1
   13db0:	mov	r0, #0
   13db4:	bl	10b50 <dcgettext@plt>
   13db8:	movw	ip, #2022	; 0x7e6
   13dbc:	mov	r3, r0
   13dc0:	mov	r1, #1
   13dc4:	movw	r2, #22712	; 0x58b8
   13dc8:	movt	r2, #1
   13dcc:	mov	r0, r4
   13dd0:	str	ip, [sp]
   13dd4:	bl	10c64 <__fprintf_chk@plt>
   13dd8:	mov	r1, r4
   13ddc:	mov	r0, #10
   13de0:	bl	10b44 <fputc_unlocked@plt>
   13de4:	mov	r2, #5
   13de8:	movw	r1, #21988	; 0x55e4
   13dec:	movt	r1, #1
   13df0:	mov	r0, #0
   13df4:	bl	10b50 <dcgettext@plt>
   13df8:	mov	r2, r0
   13dfc:	mov	r1, #1
   13e00:	movw	r3, #22160	; 0x5690
   13e04:	movt	r3, #1
   13e08:	mov	r0, r4
   13e0c:	bl	10c64 <__fprintf_chk@plt>
   13e10:	mov	r1, r4
   13e14:	mov	r0, #10
   13e18:	bl	10b44 <fputc_unlocked@plt>
   13e1c:	cmp	r6, #9
   13e20:	ldrls	pc, [pc, r6, lsl #2]
   13e24:	b	14138 <__assert_fail@plt+0x345c>
   13e28:			; <UNDEFINED> instruction: 0x00013eb8
   13e2c:	andeq	r3, r1, r8, ror #29
   13e30:	andeq	r3, r1, r4, lsr #30
   13e34:	andeq	r3, r1, r4, ror #30
   13e38:	andeq	r3, r1, ip, lsr #31
   13e3c:	andeq	r3, r1, r4, ror #31
   13e40:	andeq	r4, r1, ip, lsr #32
   13e44:	andeq	r4, r1, r0, lsl #1
   13e48:	ldrdeq	r4, [r1], -r8
   13e4c:	andeq	r3, r1, r0, asr lr
   13e50:	movw	r1, #22464	; 0x57c0
   13e54:	movt	r1, #1
   13e58:	mov	r2, #5
   13e5c:	mov	r0, #0
   13e60:	bl	10b50 <dcgettext@plt>
   13e64:	ldr	lr, [r5, #4]
   13e68:	mov	r2, r0
   13e6c:	mov	r1, #1
   13e70:	mov	r0, r4
   13e74:	ldr	r3, [r5, #8]
   13e78:	ldr	ip, [r5, #32]
   13e7c:	str	lr, [sp]
   13e80:	ldr	lr, [r5, #12]
   13e84:	str	ip, [sp, #28]
   13e88:	ldr	ip, [r5, #28]
   13e8c:	str	r3, [sp, #4]
   13e90:	ldr	r3, [r5, #16]
   13e94:	str	lr, [sp, #8]
   13e98:	ldr	lr, [r5, #20]
   13e9c:	str	ip, [sp, #24]
   13ea0:	ldr	ip, [r5, #24]
   13ea4:	str	r3, [sp, #12]
   13ea8:	ldr	r3, [r5]
   13eac:	str	lr, [sp, #16]
   13eb0:	str	ip, [sp, #20]
   13eb4:	bl	10c64 <__fprintf_chk@plt>
   13eb8:	add	sp, sp, #32
   13ebc:	ldrd	r4, [sp]
   13ec0:	ldr	r6, [sp, #8]
   13ec4:	add	sp, sp, #12
   13ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ecc:	mov	r3, r2
   13ed0:	mov	r1, #1
   13ed4:	str	ip, [sp]
   13ed8:	movw	r2, #21976	; 0x55d8
   13edc:	movt	r2, #1
   13ee0:	bl	10c64 <__fprintf_chk@plt>
   13ee4:	b	13da4 <__assert_fail@plt+0x30c8>
   13ee8:	mov	r2, #5
   13eec:	movw	r1, #22196	; 0x56b4
   13ef0:	movt	r1, #1
   13ef4:	mov	r0, #0
   13ef8:	bl	10b50 <dcgettext@plt>
   13efc:	ldr	r3, [r5]
   13f00:	mov	r2, r0
   13f04:	mov	r1, #1
   13f08:	mov	r0, r4
   13f0c:	add	sp, sp, #32
   13f10:	ldrd	r4, [sp]
   13f14:	ldr	r6, [sp, #8]
   13f18:	ldr	lr, [sp, #12]
   13f1c:	add	sp, sp, #16
   13f20:	b	10c64 <__fprintf_chk@plt>
   13f24:	mov	r2, #5
   13f28:	movw	r1, #22212	; 0x56c4
   13f2c:	movt	r1, #1
   13f30:	mov	r0, #0
   13f34:	bl	10b50 <dcgettext@plt>
   13f38:	ldm	r5, {r3, ip}
   13f3c:	mov	r2, r0
   13f40:	mov	r1, #1
   13f44:	mov	r0, r4
   13f48:	str	ip, [sp, #48]	; 0x30
   13f4c:	add	sp, sp, #32
   13f50:	ldrd	r4, [sp]
   13f54:	ldr	r6, [sp, #8]
   13f58:	ldr	lr, [sp, #12]
   13f5c:	add	sp, sp, #16
   13f60:	b	10c64 <__fprintf_chk@plt>
   13f64:	mov	r2, #5
   13f68:	movw	r1, #22236	; 0x56dc
   13f6c:	movt	r1, #1
   13f70:	mov	r0, #0
   13f74:	bl	10b50 <dcgettext@plt>
   13f78:	ldm	r5, {r3, lr}
   13f7c:	mov	r2, r0
   13f80:	mov	r1, #1
   13f84:	mov	r0, r4
   13f88:	ldr	ip, [r5, #8]
   13f8c:	str	lr, [sp, #48]	; 0x30
   13f90:	str	ip, [sp, #52]	; 0x34
   13f94:	add	sp, sp, #32
   13f98:	ldrd	r4, [sp]
   13f9c:	ldr	r6, [sp, #8]
   13fa0:	ldr	lr, [sp, #12]
   13fa4:	add	sp, sp, #16
   13fa8:	b	10c64 <__fprintf_chk@plt>
   13fac:	mov	r2, #5
   13fb0:	movw	r1, #22264	; 0x56f8
   13fb4:	movt	r1, #1
   13fb8:	mov	r0, #0
   13fbc:	bl	10b50 <dcgettext@plt>
   13fc0:	ldmib	r5, {r3, ip, lr}
   13fc4:	mov	r2, r0
   13fc8:	mov	r1, #1
   13fcc:	mov	r0, r4
   13fd0:	str	r3, [sp]
   13fd4:	ldr	r3, [r5]
   13fd8:	stmib	sp, {ip, lr}
   13fdc:	bl	10c64 <__fprintf_chk@plt>
   13fe0:	b	13eb8 <__assert_fail@plt+0x31dc>
   13fe4:	mov	r2, #5
   13fe8:	movw	r1, #22296	; 0x5718
   13fec:	movt	r1, #1
   13ff0:	mov	r0, #0
   13ff4:	bl	10b50 <dcgettext@plt>
   13ff8:	ldmib	r5, {ip, lr}
   13ffc:	mov	r2, r0
   14000:	mov	r1, #1
   14004:	mov	r0, r4
   14008:	ldr	r3, [r5, #16]
   1400c:	str	ip, [sp]
   14010:	ldr	ip, [r5, #12]
   14014:	str	r3, [sp, #12]
   14018:	ldr	r3, [r5]
   1401c:	str	lr, [sp, #4]
   14020:	str	ip, [sp, #8]
   14024:	bl	10c64 <__fprintf_chk@plt>
   14028:	b	13eb8 <__assert_fail@plt+0x31dc>
   1402c:	mov	r2, #5
   14030:	movw	r1, #22332	; 0x573c
   14034:	movt	r1, #1
   14038:	mov	r0, #0
   1403c:	bl	10b50 <dcgettext@plt>
   14040:	ldr	lr, [r5, #4]
   14044:	mov	r2, r0
   14048:	mov	r1, #1
   1404c:	mov	r0, r4
   14050:	ldr	r3, [r5, #8]
   14054:	ldr	ip, [r5, #20]
   14058:	str	lr, [sp]
   1405c:	ldr	lr, [r5, #12]
   14060:	str	ip, [sp, #16]
   14064:	ldr	ip, [r5, #16]
   14068:	str	r3, [sp, #4]
   1406c:	ldr	r3, [r5]
   14070:	str	lr, [sp, #8]
   14074:	str	ip, [sp, #12]
   14078:	bl	10c64 <__fprintf_chk@plt>
   1407c:	b	13eb8 <__assert_fail@plt+0x31dc>
   14080:	mov	r2, #5
   14084:	movw	r1, #22372	; 0x5764
   14088:	movt	r1, #1
   1408c:	mov	r0, #0
   14090:	bl	10b50 <dcgettext@plt>
   14094:	ldmib	r5, {r3, ip}
   14098:	mov	r2, r0
   1409c:	mov	r1, #1
   140a0:	mov	r0, r4
   140a4:	ldr	lr, [r5, #24]
   140a8:	str	r3, [sp]
   140ac:	ldr	r3, [r5, #12]
   140b0:	str	lr, [sp, #20]
   140b4:	ldr	lr, [r5, #20]
   140b8:	str	ip, [sp, #4]
   140bc:	ldr	ip, [r5, #16]
   140c0:	str	r3, [sp, #8]
   140c4:	ldr	r3, [r5]
   140c8:	str	ip, [sp, #12]
   140cc:	str	lr, [sp, #16]
   140d0:	bl	10c64 <__fprintf_chk@plt>
   140d4:	b	13eb8 <__assert_fail@plt+0x31dc>
   140d8:	mov	r2, #5
   140dc:	movw	r1, #22416	; 0x5790
   140e0:	movt	r1, #1
   140e4:	mov	r0, #0
   140e8:	bl	10b50 <dcgettext@plt>
   140ec:	ldmib	r5, {ip, lr}
   140f0:	mov	r2, r0
   140f4:	mov	r1, #1
   140f8:	mov	r0, r4
   140fc:	ldr	r3, [r5, #28]
   14100:	str	ip, [sp]
   14104:	ldr	ip, [r5, #12]
   14108:	str	r3, [sp, #24]
   1410c:	ldr	r3, [r5, #24]
   14110:	str	lr, [sp, #4]
   14114:	ldr	lr, [r5, #16]
   14118:	str	ip, [sp, #8]
   1411c:	ldr	ip, [r5, #20]
   14120:	str	r3, [sp, #20]
   14124:	ldr	r3, [r5]
   14128:	str	lr, [sp, #12]
   1412c:	str	ip, [sp, #16]
   14130:	bl	10c64 <__fprintf_chk@plt>
   14134:	b	13eb8 <__assert_fail@plt+0x31dc>
   14138:	movw	r1, #22516	; 0x57f4
   1413c:	movt	r1, #1
   14140:	b	13e58 <__assert_fail@plt+0x317c>
   14144:	strd	r4, [sp, #-12]!
   14148:	str	lr, [sp, #8]
   1414c:	sub	sp, sp, #12
   14150:	ldr	r5, [sp, #24]
   14154:	ldr	ip, [r5]
   14158:	cmp	ip, #0
   1415c:	beq	14178 <__assert_fail@plt+0x349c>
   14160:	mov	lr, r5
   14164:	mov	ip, #0
   14168:	ldr	r4, [lr, #4]!
   1416c:	add	ip, ip, #1
   14170:	cmp	r4, #0
   14174:	bne	14168 <__assert_fail@plt+0x348c>
   14178:	stm	sp, {r5, ip}
   1417c:	bl	13d64 <__assert_fail@plt+0x3088>
   14180:	add	sp, sp, #12
   14184:	ldrd	r4, [sp]
   14188:	add	sp, sp, #8
   1418c:	pop	{pc}		; (ldr pc, [sp], #4)
   14190:	strd	r4, [sp, #-16]!
   14194:	mov	ip, #0
   14198:	str	r6, [sp, #8]
   1419c:	str	lr, [sp, #12]
   141a0:	sub	sp, sp, #48	; 0x30
   141a4:	ldr	r5, [sp, #64]	; 0x40
   141a8:	add	r6, sp, #8
   141ac:	mov	r4, r6
   141b0:	ldr	lr, [r5], #4
   141b4:	cmp	lr, #0
   141b8:	str	lr, [r4], #4
   141bc:	beq	141cc <__assert_fail@plt+0x34f0>
   141c0:	add	ip, ip, #1
   141c4:	cmp	ip, #10
   141c8:	bne	141b0 <__assert_fail@plt+0x34d4>
   141cc:	stm	sp, {r6, ip}
   141d0:	bl	13d64 <__assert_fail@plt+0x3088>
   141d4:	add	sp, sp, #48	; 0x30
   141d8:	ldrd	r4, [sp]
   141dc:	ldr	r6, [sp, #8]
   141e0:	add	sp, sp, #12
   141e4:	pop	{pc}		; (ldr pc, [sp], #4)
   141e8:	push	{r3}		; (str r3, [sp, #-4]!)
   141ec:	mov	ip, #0
   141f0:	strd	r4, [sp, #-12]!
   141f4:	str	lr, [sp, #8]
   141f8:	sub	sp, sp, #56	; 0x38
   141fc:	add	r3, sp, #72	; 0x48
   14200:	add	r5, sp, #16
   14204:	mov	r4, r3
   14208:	mov	lr, r5
   1420c:	str	r3, [sp, #12]
   14210:	ldr	r3, [r4], #4
   14214:	cmp	r3, #0
   14218:	str	r3, [lr], #4
   1421c:	beq	1422c <__assert_fail@plt+0x3550>
   14220:	add	ip, ip, #1
   14224:	cmp	ip, #10
   14228:	bne	14210 <__assert_fail@plt+0x3534>
   1422c:	ldr	r3, [sp, #68]	; 0x44
   14230:	stm	sp, {r5, ip}
   14234:	bl	13d64 <__assert_fail@plt+0x3088>
   14238:	add	sp, sp, #56	; 0x38
   1423c:	ldrd	r4, [sp]
   14240:	ldr	lr, [sp, #8]
   14244:	add	sp, sp, #12
   14248:	add	sp, sp, #4
   1424c:	bx	lr
   14250:	movw	r3, #24860	; 0x611c
   14254:	movt	r3, #2
   14258:	str	r4, [sp, #-8]!
   1425c:	mov	r0, #10
   14260:	ldr	r1, [r3]
   14264:	str	lr, [sp, #4]
   14268:	bl	10b44 <fputc_unlocked@plt>
   1426c:	mov	r2, #5
   14270:	movw	r1, #22576	; 0x5830
   14274:	movt	r1, #1
   14278:	mov	r0, #0
   1427c:	bl	10b50 <dcgettext@plt>
   14280:	mov	r1, r0
   14284:	movw	r2, #22596	; 0x5844
   14288:	movt	r2, #1
   1428c:	mov	r0, #1
   14290:	bl	10c4c <__printf_chk@plt>
   14294:	mov	r2, #5
   14298:	movw	r1, #22620	; 0x585c
   1429c:	movt	r1, #1
   142a0:	mov	r0, #0
   142a4:	bl	10b50 <dcgettext@plt>
   142a8:	mov	r1, r0
   142ac:	movw	r3, #21236	; 0x52f4
   142b0:	movt	r3, #1
   142b4:	movw	r2, #21276	; 0x531c
   142b8:	movt	r2, #1
   142bc:	mov	r0, #1
   142c0:	bl	10c4c <__printf_chk@plt>
   142c4:	mov	r2, #5
   142c8:	movw	r1, #22640	; 0x5870
   142cc:	movt	r1, #1
   142d0:	mov	r0, #0
   142d4:	bl	10b50 <dcgettext@plt>
   142d8:	mov	r1, r0
   142dc:	movw	r2, #22680	; 0x5898
   142e0:	movt	r2, #1
   142e4:	mov	r0, #1
   142e8:	ldr	r4, [sp]
   142ec:	ldr	lr, [sp, #4]
   142f0:	add	sp, sp, #8
   142f4:	b	10c4c <__printf_chk@plt>
   142f8:	str	r4, [sp, #-8]!
   142fc:	str	lr, [sp, #4]
   14300:	bl	14828 <__assert_fail@plt+0x3b4c>
   14304:	cmp	r0, #0
   14308:	beq	14318 <__assert_fail@plt+0x363c>
   1430c:	ldr	r4, [sp]
   14310:	add	sp, sp, #4
   14314:	pop	{pc}		; (ldr pc, [sp], #4)
   14318:	bl	14770 <__assert_fail@plt+0x3a94>
   1431c:	str	r4, [sp, #-8]!
   14320:	str	lr, [sp, #4]
   14324:	bl	14828 <__assert_fail@plt+0x3b4c>
   14328:	cmp	r0, #0
   1432c:	beq	1433c <__assert_fail@plt+0x3660>
   14330:	ldr	r4, [sp]
   14334:	add	sp, sp, #4
   14338:	pop	{pc}		; (ldr pc, [sp], #4)
   1433c:	bl	14770 <__assert_fail@plt+0x3a94>
   14340:	str	r4, [sp, #-8]!
   14344:	str	lr, [sp, #4]
   14348:	bl	14828 <__assert_fail@plt+0x3b4c>
   1434c:	cmp	r0, #0
   14350:	beq	14360 <__assert_fail@plt+0x3684>
   14354:	ldr	r4, [sp]
   14358:	add	sp, sp, #4
   1435c:	pop	{pc}		; (ldr pc, [sp], #4)
   14360:	bl	14770 <__assert_fail@plt+0x3a94>
   14364:	strd	r4, [sp, #-16]!
   14368:	mov	r5, r0
   1436c:	mov	r4, r1
   14370:	str	r6, [sp, #8]
   14374:	str	lr, [sp, #12]
   14378:	bl	14864 <__assert_fail@plt+0x3b88>
   1437c:	cmp	r0, #0
   14380:	beq	14394 <__assert_fail@plt+0x36b8>
   14384:	ldrd	r4, [sp]
   14388:	ldr	r6, [sp, #8]
   1438c:	add	sp, sp, #12
   14390:	pop	{pc}		; (ldr pc, [sp], #4)
   14394:	adds	r4, r4, #0
   14398:	movne	r4, #1
   1439c:	cmp	r5, #0
   143a0:	moveq	r4, #1
   143a4:	cmp	r4, #0
   143a8:	beq	14384 <__assert_fail@plt+0x36a8>
   143ac:	bl	14770 <__assert_fail@plt+0x3a94>
   143b0:	cmp	r1, #0
   143b4:	orreq	r1, r1, #1
   143b8:	str	r4, [sp, #-8]!
   143bc:	str	lr, [sp, #4]
   143c0:	bl	14864 <__assert_fail@plt+0x3b88>
   143c4:	cmp	r0, #0
   143c8:	beq	143d8 <__assert_fail@plt+0x36fc>
   143cc:	ldr	r4, [sp]
   143d0:	add	sp, sp, #4
   143d4:	pop	{pc}		; (ldr pc, [sp], #4)
   143d8:	bl	14770 <__assert_fail@plt+0x3a94>
   143dc:	strd	r4, [sp, #-16]!
   143e0:	mov	r4, r0
   143e4:	mov	r5, r2
   143e8:	str	r6, [sp, #8]
   143ec:	mov	r6, r1
   143f0:	str	lr, [sp, #12]
   143f4:	bl	14c44 <__assert_fail@plt+0x3f68>
   143f8:	cmp	r0, #0
   143fc:	beq	14410 <__assert_fail@plt+0x3734>
   14400:	ldrd	r4, [sp]
   14404:	ldr	r6, [sp, #8]
   14408:	add	sp, sp, #12
   1440c:	pop	{pc}		; (ldr pc, [sp], #4)
   14410:	cmp	r4, #0
   14414:	beq	14424 <__assert_fail@plt+0x3748>
   14418:	cmp	r6, #0
   1441c:	cmpne	r5, #0
   14420:	beq	14400 <__assert_fail@plt+0x3724>
   14424:	bl	14770 <__assert_fail@plt+0x3a94>
   14428:	b	143dc <__assert_fail@plt+0x3700>
   1442c:	cmp	r2, #0
   14430:	cmpne	r1, #0
   14434:	str	r4, [sp, #-8]!
   14438:	moveq	r2, #1
   1443c:	str	lr, [sp, #4]
   14440:	moveq	r1, r2
   14444:	bl	14c44 <__assert_fail@plt+0x3f68>
   14448:	cmp	r0, #0
   1444c:	beq	1445c <__assert_fail@plt+0x3780>
   14450:	ldr	r4, [sp]
   14454:	add	sp, sp, #4
   14458:	pop	{pc}		; (ldr pc, [sp], #4)
   1445c:	bl	14770 <__assert_fail@plt+0x3a94>
   14460:	mov	r2, r1
   14464:	mov	r1, r0
   14468:	mov	r0, #0
   1446c:	b	143dc <__assert_fail@plt+0x3700>
   14470:	mov	r2, r1
   14474:	mov	r1, r0
   14478:	mov	r0, #0
   1447c:	b	1442c <__assert_fail@plt+0x3750>
   14480:	cmp	r0, #0
   14484:	strd	r4, [sp, #-16]!
   14488:	mov	r5, r1
   1448c:	ldr	r4, [r1]
   14490:	str	r6, [sp, #8]
   14494:	str	lr, [sp, #12]
   14498:	beq	144c8 <__assert_fail@plt+0x37ec>
   1449c:	lsr	r3, r4, #1
   144a0:	add	r3, r3, #1
   144a4:	adds	r4, r4, r3
   144a8:	bcs	144e4 <__assert_fail@plt+0x3808>
   144ac:	mov	r1, r4
   144b0:	bl	143dc <__assert_fail@plt+0x3700>
   144b4:	ldr	r6, [sp, #8]
   144b8:	str	r4, [r5]
   144bc:	ldrd	r4, [sp]
   144c0:	add	sp, sp, #12
   144c4:	pop	{pc}		; (ldr pc, [sp], #4)
   144c8:	cmp	r4, #0
   144cc:	bne	144ac <__assert_fail@plt+0x37d0>
   144d0:	mov	r4, #64	; 0x40
   144d4:	udiv	r4, r4, r2
   144d8:	cmp	r2, #64	; 0x40
   144dc:	addhi	r4, r4, #1
   144e0:	b	144ac <__assert_fail@plt+0x37d0>
   144e4:	bl	14770 <__assert_fail@plt+0x3a94>
   144e8:	mov	r2, #1
   144ec:	b	14480 <__assert_fail@plt+0x37a4>
   144f0:	ldr	ip, [r1]
   144f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   144f8:	mov	r5, r1
   144fc:	strd	r6, [sp, #8]
   14500:	str	lr, [sp, #28]
   14504:	strd	r8, [sp, #16]
   14508:	asr	lr, ip, #1
   1450c:	ldr	r8, [sp, #32]
   14510:	str	sl, [sp, #24]
   14514:	adds	r4, ip, lr
   14518:	mvn	lr, r3
   1451c:	lsr	lr, lr, #31
   14520:	mvnvs	r4, #-2147483648	; 0x80000000
   14524:	cmp	r3, r4
   14528:	movge	r1, #0
   1452c:	andlt	r1, lr, #1
   14530:	cmp	r1, #0
   14534:	movne	r4, r3
   14538:	smull	r6, r7, r4, r8
   1453c:	cmp	r7, r6, asr #31
   14540:	bne	145c8 <__assert_fail@plt+0x38ec>
   14544:	cmp	r6, #63	; 0x3f
   14548:	mov	r1, r6
   1454c:	ble	145b0 <__assert_fail@plt+0x38d4>
   14550:	cmp	r0, #0
   14554:	sub	r6, r4, ip
   14558:	streq	r0, [r5]
   1455c:	cmp	r6, r2
   14560:	bge	14590 <__assert_fail@plt+0x38b4>
   14564:	adds	r4, ip, r2
   14568:	bvs	145c4 <__assert_fail@plt+0x38e8>
   1456c:	cmp	r4, r3
   14570:	movle	r3, #0
   14574:	andgt	r3, lr, #1
   14578:	cmp	r3, #0
   1457c:	bne	145c4 <__assert_fail@plt+0x38e8>
   14580:	smull	r8, r9, r4, r8
   14584:	cmp	r9, r8, asr #31
   14588:	mov	r1, r8
   1458c:	bne	145c4 <__assert_fail@plt+0x38e8>
   14590:	bl	14364 <__assert_fail@plt+0x3688>
   14594:	ldrd	r6, [sp, #8]
   14598:	ldrd	r8, [sp, #16]
   1459c:	ldr	sl, [sp, #24]
   145a0:	str	r4, [r5]
   145a4:	ldrd	r4, [sp]
   145a8:	add	sp, sp, #28
   145ac:	pop	{pc}		; (ldr pc, [sp], #4)
   145b0:	mov	r6, #64	; 0x40
   145b4:	sdiv	r4, r6, r8
   145b8:	mls	r1, r8, r4, r6
   145bc:	sub	r1, r6, r1
   145c0:	b	14550 <__assert_fail@plt+0x3874>
   145c4:	bl	14770 <__assert_fail@plt+0x3a94>
   145c8:	mvn	r6, #-2147483648	; 0x80000000
   145cc:	b	145b4 <__assert_fail@plt+0x38d8>
   145d0:	mov	r1, #1
   145d4:	str	r4, [sp, #-8]!
   145d8:	str	lr, [sp, #4]
   145dc:	bl	147b4 <__assert_fail@plt+0x3ad8>
   145e0:	cmp	r0, #0
   145e4:	beq	145f4 <__assert_fail@plt+0x3918>
   145e8:	ldr	r4, [sp]
   145ec:	add	sp, sp, #4
   145f0:	pop	{pc}		; (ldr pc, [sp], #4)
   145f4:	bl	14770 <__assert_fail@plt+0x3a94>
   145f8:	mov	r1, #1
   145fc:	str	r4, [sp, #-8]!
   14600:	str	lr, [sp, #4]
   14604:	bl	147b4 <__assert_fail@plt+0x3ad8>
   14608:	cmp	r0, #0
   1460c:	beq	1461c <__assert_fail@plt+0x3940>
   14610:	ldr	r4, [sp]
   14614:	add	sp, sp, #4
   14618:	pop	{pc}		; (ldr pc, [sp], #4)
   1461c:	bl	14770 <__assert_fail@plt+0x3a94>
   14620:	str	r4, [sp, #-8]!
   14624:	str	lr, [sp, #4]
   14628:	bl	147b4 <__assert_fail@plt+0x3ad8>
   1462c:	cmp	r0, #0
   14630:	beq	14640 <__assert_fail@plt+0x3964>
   14634:	ldr	r4, [sp]
   14638:	add	sp, sp, #4
   1463c:	pop	{pc}		; (ldr pc, [sp], #4)
   14640:	bl	14770 <__assert_fail@plt+0x3a94>
   14644:	str	r4, [sp, #-8]!
   14648:	str	lr, [sp, #4]
   1464c:	bl	147b4 <__assert_fail@plt+0x3ad8>
   14650:	cmp	r0, #0
   14654:	beq	14664 <__assert_fail@plt+0x3988>
   14658:	ldr	r4, [sp]
   1465c:	add	sp, sp, #4
   14660:	pop	{pc}		; (ldr pc, [sp], #4)
   14664:	bl	14770 <__assert_fail@plt+0x3a94>
   14668:	strd	r4, [sp, #-16]!
   1466c:	mov	r4, r1
   14670:	str	r6, [sp, #8]
   14674:	mov	r6, r0
   14678:	mov	r0, r1
   1467c:	str	lr, [sp, #12]
   14680:	bl	14828 <__assert_fail@plt+0x3b4c>
   14684:	subs	r5, r0, #0
   14688:	beq	146ac <__assert_fail@plt+0x39d0>
   1468c:	mov	r2, r4
   14690:	mov	r1, r6
   14694:	bl	10b20 <memcpy@plt>
   14698:	mov	r0, r5
   1469c:	ldrd	r4, [sp]
   146a0:	ldr	r6, [sp, #8]
   146a4:	add	sp, sp, #12
   146a8:	pop	{pc}		; (ldr pc, [sp], #4)
   146ac:	bl	14770 <__assert_fail@plt+0x3a94>
   146b0:	strd	r4, [sp, #-16]!
   146b4:	mov	r4, r1
   146b8:	str	r6, [sp, #8]
   146bc:	mov	r6, r0
   146c0:	mov	r0, r1
   146c4:	str	lr, [sp, #12]
   146c8:	bl	14828 <__assert_fail@plt+0x3b4c>
   146cc:	subs	r5, r0, #0
   146d0:	beq	146f4 <__assert_fail@plt+0x3a18>
   146d4:	mov	r2, r4
   146d8:	mov	r1, r6
   146dc:	bl	10b20 <memcpy@plt>
   146e0:	mov	r0, r5
   146e4:	ldrd	r4, [sp]
   146e8:	ldr	r6, [sp, #8]
   146ec:	add	sp, sp, #12
   146f0:	pop	{pc}		; (ldr pc, [sp], #4)
   146f4:	bl	14770 <__assert_fail@plt+0x3a94>
   146f8:	strd	r4, [sp, #-16]!
   146fc:	mov	r4, r1
   14700:	str	r6, [sp, #8]
   14704:	mov	r6, r0
   14708:	add	r0, r1, #1
   1470c:	str	lr, [sp, #12]
   14710:	bl	14828 <__assert_fail@plt+0x3b4c>
   14714:	subs	r5, r0, #0
   14718:	beq	14744 <__assert_fail@plt+0x3a68>
   1471c:	mov	r3, #0
   14720:	mov	r1, r6
   14724:	mov	r2, r4
   14728:	strb	r3, [r5, r4]
   1472c:	bl	10b20 <memcpy@plt>
   14730:	mov	r0, r5
   14734:	ldrd	r4, [sp]
   14738:	ldr	r6, [sp, #8]
   1473c:	add	sp, sp, #12
   14740:	pop	{pc}		; (ldr pc, [sp], #4)
   14744:	bl	14770 <__assert_fail@plt+0x3a94>
   14748:	str	r4, [sp, #-8]!
   1474c:	mov	r4, r0
   14750:	str	lr, [sp, #4]
   14754:	bl	10c1c <strlen@plt>
   14758:	add	r1, r0, #1
   1475c:	mov	r0, r4
   14760:	ldr	r4, [sp]
   14764:	ldr	lr, [sp, #4]
   14768:	add	sp, sp, #8
   1476c:	b	14668 <__assert_fail@plt+0x398c>
   14770:	movw	r3, #24780	; 0x60cc
   14774:	movt	r3, #2
   14778:	str	r4, [sp, #-8]!
   1477c:	ldr	r4, [r3]
   14780:	mov	r2, #5
   14784:	movw	r1, #22760	; 0x58e8
   14788:	movt	r1, #1
   1478c:	mov	r0, #0
   14790:	str	lr, [sp, #4]
   14794:	bl	10b50 <dcgettext@plt>
   14798:	mov	r3, r0
   1479c:	movw	r2, #21676	; 0x54ac
   147a0:	movt	r2, #1
   147a4:	mov	r1, #0
   147a8:	mov	r0, r4
   147ac:	bl	10bbc <error@plt>
   147b0:	bl	10cd0 <abort@plt>
   147b4:	cmp	r1, #0
   147b8:	cmpne	r0, #0
   147bc:	beq	14808 <__assert_fail@plt+0x3b2c>
   147c0:	strd	r4, [sp, #-16]!
   147c4:	umull	r4, r5, r0, r1
   147c8:	str	r6, [sp, #8]
   147cc:	str	lr, [sp, #12]
   147d0:	adds	r3, r5, #0
   147d4:	movne	r3, #1
   147d8:	cmp	r4, #0
   147dc:	blt	147e8 <__assert_fail@plt+0x3b0c>
   147e0:	cmp	r3, #0
   147e4:	beq	14814 <__assert_fail@plt+0x3b38>
   147e8:	bl	10c28 <__errno_location@plt>
   147ec:	mov	r3, #12
   147f0:	ldrd	r4, [sp]
   147f4:	ldr	r6, [sp, #8]
   147f8:	add	sp, sp, #12
   147fc:	str	r3, [r0]
   14800:	mov	r0, #0
   14804:	pop	{pc}		; (ldr pc, [sp], #4)
   14808:	mov	r1, #1
   1480c:	mov	r0, r1
   14810:	b	10ad8 <calloc@plt>
   14814:	ldrd	r4, [sp]
   14818:	ldr	r6, [sp, #8]
   1481c:	ldr	lr, [sp, #12]
   14820:	add	sp, sp, #16
   14824:	b	10ad8 <calloc@plt>
   14828:	cmp	r0, #0
   1482c:	beq	14838 <__assert_fail@plt+0x3b5c>
   14830:	blt	14840 <__assert_fail@plt+0x3b64>
   14834:	b	10bd4 <malloc@plt>
   14838:	mov	r0, #1
   1483c:	b	10bd4 <malloc@plt>
   14840:	str	r4, [sp, #-8]!
   14844:	str	lr, [sp, #4]
   14848:	bl	10c28 <__errno_location@plt>
   1484c:	mov	r3, #12
   14850:	ldr	r4, [sp]
   14854:	add	sp, sp, #4
   14858:	str	r3, [r0]
   1485c:	mov	r0, #0
   14860:	pop	{pc}		; (ldr pc, [sp], #4)
   14864:	cmp	r0, #0
   14868:	beq	14890 <__assert_fail@plt+0x3bb4>
   1486c:	cmp	r1, #0
   14870:	str	r4, [sp, #-8]!
   14874:	str	lr, [sp, #4]
   14878:	beq	14898 <__assert_fail@plt+0x3bbc>
   1487c:	blt	148ac <__assert_fail@plt+0x3bd0>
   14880:	ldr	r4, [sp]
   14884:	ldr	lr, [sp, #4]
   14888:	add	sp, sp, #8
   1488c:	b	10b5c <realloc@plt>
   14890:	mov	r0, r1
   14894:	b	14828 <__assert_fail@plt+0x3b4c>
   14898:	bl	14a58 <__assert_fail@plt+0x3d7c>
   1489c:	ldr	r4, [sp]
   148a0:	add	sp, sp, #4
   148a4:	mov	r0, #0
   148a8:	pop	{pc}		; (ldr pc, [sp], #4)
   148ac:	bl	10c28 <__errno_location@plt>
   148b0:	mov	r3, #12
   148b4:	str	r3, [r0]
   148b8:	b	1489c <__assert_fail@plt+0x3bc0>
   148bc:	strd	r4, [sp, #-16]!
   148c0:	mov	r4, r0
   148c4:	str	r6, [sp, #8]
   148c8:	str	lr, [sp, #12]
   148cc:	bl	10ba4 <__fpending@plt>
   148d0:	ldr	r5, [r4]
   148d4:	mov	r6, r0
   148d8:	mov	r0, r4
   148dc:	bl	14944 <__assert_fail@plt+0x3c68>
   148e0:	mov	r4, r0
   148e4:	and	r5, r5, #32
   148e8:	cmp	r5, #0
   148ec:	bne	14924 <__assert_fail@plt+0x3c48>
   148f0:	cmp	r0, #0
   148f4:	beq	14910 <__assert_fail@plt+0x3c34>
   148f8:	cmp	r6, #0
   148fc:	bne	1493c <__assert_fail@plt+0x3c60>
   14900:	bl	10c28 <__errno_location@plt>
   14904:	ldr	r4, [r0]
   14908:	subs	r4, r4, #9
   1490c:	mvnne	r4, #0
   14910:	mov	r0, r4
   14914:	ldrd	r4, [sp]
   14918:	ldr	r6, [sp, #8]
   1491c:	add	sp, sp, #12
   14920:	pop	{pc}		; (ldr pc, [sp], #4)
   14924:	cmp	r0, #0
   14928:	bne	1493c <__assert_fail@plt+0x3c60>
   1492c:	bl	10c28 <__errno_location@plt>
   14930:	str	r4, [r0]
   14934:	mvn	r4, #0
   14938:	b	14910 <__assert_fail@plt+0x3c34>
   1493c:	mvn	r4, #0
   14940:	b	14910 <__assert_fail@plt+0x3c34>
   14944:	strd	r4, [sp, #-12]!
   14948:	mov	r4, r0
   1494c:	str	lr, [sp, #8]
   14950:	sub	sp, sp, #12
   14954:	bl	10c58 <fileno@plt>
   14958:	cmp	r0, #0
   1495c:	mov	r0, r4
   14960:	blt	149e4 <__assert_fail@plt+0x3d08>
   14964:	bl	10bec <__freading@plt>
   14968:	cmp	r0, #0
   1496c:	bne	149b0 <__assert_fail@plt+0x3cd4>
   14970:	mov	r0, r4
   14974:	bl	149f8 <__assert_fail@plt+0x3d1c>
   14978:	cmp	r0, #0
   1497c:	beq	149e0 <__assert_fail@plt+0x3d04>
   14980:	bl	10c28 <__errno_location@plt>
   14984:	mov	r5, r0
   14988:	mov	r0, r4
   1498c:	ldr	r4, [r5]
   14990:	bl	10c70 <fclose@plt>
   14994:	cmp	r4, #0
   14998:	mvnne	r0, #0
   1499c:	strne	r4, [r5]
   149a0:	add	sp, sp, #12
   149a4:	ldrd	r4, [sp]
   149a8:	add	sp, sp, #8
   149ac:	pop	{pc}		; (ldr pc, [sp], #4)
   149b0:	mov	r0, r4
   149b4:	bl	10c58 <fileno@plt>
   149b8:	mov	r1, #1
   149bc:	mov	r2, #0
   149c0:	mov	r3, #0
   149c4:	str	r1, [sp]
   149c8:	bl	10b8c <lseek64@plt>
   149cc:	mvn	r3, #0
   149d0:	mvn	r2, #0
   149d4:	cmp	r1, r3
   149d8:	cmpeq	r0, r2
   149dc:	bne	14970 <__assert_fail@plt+0x3c94>
   149e0:	mov	r0, r4
   149e4:	add	sp, sp, #12
   149e8:	ldrd	r4, [sp]
   149ec:	ldr	lr, [sp, #8]
   149f0:	add	sp, sp, #12
   149f4:	b	10c70 <fclose@plt>
   149f8:	str	r4, [sp, #-8]!
   149fc:	subs	r4, r0, #0
   14a00:	str	lr, [sp, #4]
   14a04:	sub	sp, sp, #8
   14a08:	beq	14a24 <__assert_fail@plt+0x3d48>
   14a0c:	bl	10bec <__freading@plt>
   14a10:	cmp	r0, #0
   14a14:	beq	14a24 <__assert_fail@plt+0x3d48>
   14a18:	ldr	r3, [r4]
   14a1c:	tst	r3, #256	; 0x100
   14a20:	bne	14a3c <__assert_fail@plt+0x3d60>
   14a24:	mov	r0, r4
   14a28:	add	sp, sp, #8
   14a2c:	ldr	r4, [sp]
   14a30:	ldr	lr, [sp, #4]
   14a34:	add	sp, sp, #8
   14a38:	b	10afc <fflush@plt>
   14a3c:	mov	r1, #1
   14a40:	mov	r2, #0
   14a44:	mov	r3, #0
   14a48:	mov	r0, r4
   14a4c:	str	r1, [sp]
   14a50:	bl	14ab8 <__assert_fail@plt+0x3ddc>
   14a54:	b	14a24 <__assert_fail@plt+0x3d48>
   14a58:	strd	r4, [sp, #-12]!
   14a5c:	mov	r5, r0
   14a60:	str	lr, [sp, #8]
   14a64:	sub	sp, sp, #12
   14a68:	bl	10c28 <__errno_location@plt>
   14a6c:	mov	r4, r0
   14a70:	mov	r2, #0
   14a74:	ldr	r3, [r4]
   14a78:	mov	r0, r5
   14a7c:	str	r2, [r4]
   14a80:	str	r3, [sp]
   14a84:	str	r3, [sp, #4]
   14a88:	bl	10b08 <free@plt>
   14a8c:	ldr	r3, [r4]
   14a90:	add	r2, sp, #8
   14a94:	clz	r3, r3
   14a98:	lsr	r3, r3, #5
   14a9c:	add	r3, r2, r3, lsl #2
   14aa0:	ldr	r3, [r3, #-8]
   14aa4:	str	r3, [r4]
   14aa8:	add	sp, sp, #12
   14aac:	ldrd	r4, [sp]
   14ab0:	add	sp, sp, #8
   14ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14abc:	mov	r4, r0
   14ac0:	ldr	ip, [r0, #4]
   14ac4:	strd	r6, [sp, #8]
   14ac8:	str	lr, [sp, #20]
   14acc:	ldr	lr, [r0, #8]
   14ad0:	str	r8, [sp, #16]
   14ad4:	sub	sp, sp, #8
   14ad8:	ldr	r5, [sp, #32]
   14adc:	cmp	lr, ip
   14ae0:	beq	14b08 <__assert_fail@plt+0x3e2c>
   14ae4:	mov	r0, r4
   14ae8:	str	r5, [sp, #32]
   14aec:	add	sp, sp, #8
   14af0:	ldrd	r4, [sp]
   14af4:	ldrd	r6, [sp, #8]
   14af8:	ldr	r8, [sp, #16]
   14afc:	ldr	lr, [sp, #20]
   14b00:	add	sp, sp, #24
   14b04:	b	10c7c <fseeko64@plt>
   14b08:	ldr	ip, [r0, #16]
   14b0c:	ldr	lr, [r0, #20]
   14b10:	cmp	lr, ip
   14b14:	bne	14ae4 <__assert_fail@plt+0x3e08>
   14b18:	ldr	r8, [r0, #36]	; 0x24
   14b1c:	cmp	r8, #0
   14b20:	bne	14ae4 <__assert_fail@plt+0x3e08>
   14b24:	mov	r6, r2
   14b28:	mov	r7, r3
   14b2c:	bl	10c58 <fileno@plt>
   14b30:	mov	r2, r6
   14b34:	mov	r3, r7
   14b38:	str	r5, [sp]
   14b3c:	bl	10b8c <lseek64@plt>
   14b40:	mvn	r3, #0
   14b44:	mvn	r2, #0
   14b48:	cmp	r1, r3
   14b4c:	cmpeq	r0, r2
   14b50:	beq	14b80 <__assert_fail@plt+0x3ea4>
   14b54:	ldr	r3, [r4]
   14b58:	strd	r0, [r4, #80]	; 0x50
   14b5c:	bic	r3, r3, #16
   14b60:	str	r3, [r4]
   14b64:	mov	r0, r8
   14b68:	add	sp, sp, #8
   14b6c:	ldrd	r4, [sp]
   14b70:	ldrd	r6, [sp, #8]
   14b74:	ldr	r8, [sp, #16]
   14b78:	add	sp, sp, #20
   14b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b80:	mvn	r8, #0
   14b84:	b	14b64 <__assert_fail@plt+0x3e88>
   14b88:	mov	r0, #14
   14b8c:	str	r4, [sp, #-8]!
   14b90:	str	lr, [sp, #4]
   14b94:	bl	10cac <nl_langinfo@plt>
   14b98:	cmp	r0, #0
   14b9c:	beq	14bc0 <__assert_fail@plt+0x3ee4>
   14ba0:	ldrb	r2, [r0]
   14ba4:	movw	r3, #22780	; 0x58fc
   14ba8:	movt	r3, #1
   14bac:	ldr	r4, [sp]
   14bb0:	add	sp, sp, #4
   14bb4:	cmp	r2, #0
   14bb8:	moveq	r0, r3
   14bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc0:	ldr	r4, [sp]
   14bc4:	add	sp, sp, #4
   14bc8:	movw	r0, #22780	; 0x58fc
   14bcc:	movt	r0, #1
   14bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd4:	strd	r4, [sp, #-20]!	; 0xffffffec
   14bd8:	mov	r5, r2
   14bdc:	strd	r6, [sp, #8]
   14be0:	subs	r6, r0, #0
   14be4:	mov	r7, r1
   14be8:	str	lr, [sp, #16]
   14bec:	sub	sp, sp, #12
   14bf0:	addeq	r6, sp, #4
   14bf4:	mov	r0, r6
   14bf8:	bl	10bb0 <mbrtowc@plt>
   14bfc:	cmp	r5, #0
   14c00:	cmnne	r0, #3
   14c04:	mov	r4, r0
   14c08:	bhi	14c24 <__assert_fail@plt+0x3f48>
   14c0c:	mov	r0, r4
   14c10:	add	sp, sp, #12
   14c14:	ldrd	r4, [sp]
   14c18:	ldrd	r6, [sp, #8]
   14c1c:	add	sp, sp, #16
   14c20:	pop	{pc}		; (ldr pc, [sp], #4)
   14c24:	mov	r0, #0
   14c28:	bl	14c7c <__assert_fail@plt+0x3fa0>
   14c2c:	cmp	r0, #0
   14c30:	bne	14c0c <__assert_fail@plt+0x3f30>
   14c34:	ldrb	r3, [r7]
   14c38:	mov	r4, #1
   14c3c:	str	r3, [r6]
   14c40:	b	14c0c <__assert_fail@plt+0x3f30>
   14c44:	umull	r2, r3, r1, r2
   14c48:	cmp	r3, #0
   14c4c:	bne	14c58 <__assert_fail@plt+0x3f7c>
   14c50:	mov	r1, r2
   14c54:	b	14864 <__assert_fail@plt+0x3b88>
   14c58:	str	r4, [sp, #-8]!
   14c5c:	str	lr, [sp, #4]
   14c60:	bl	10c28 <__errno_location@plt>
   14c64:	mov	r3, #12
   14c68:	ldr	r4, [sp]
   14c6c:	add	sp, sp, #4
   14c70:	str	r3, [r0]
   14c74:	mov	r0, #0
   14c78:	pop	{pc}		; (ldr pc, [sp], #4)
   14c7c:	push	{lr}		; (str lr, [sp, #-4]!)
   14c80:	sub	sp, sp, #268	; 0x10c
   14c84:	movw	r2, #257	; 0x101
   14c88:	add	r1, sp, #4
   14c8c:	bl	14cd4 <__assert_fail@plt+0x3ff8>
   14c90:	cmp	r0, #0
   14c94:	movne	r0, #0
   14c98:	bne	14ccc <__assert_fail@plt+0x3ff0>
   14c9c:	movw	r1, #22788	; 0x5904
   14ca0:	movt	r1, #1
   14ca4:	add	r0, sp, #4
   14ca8:	bl	10af0 <strcmp@plt>
   14cac:	cmp	r0, #0
   14cb0:	beq	14ccc <__assert_fail@plt+0x3ff0>
   14cb4:	add	r0, sp, #4
   14cb8:	movw	r1, #22792	; 0x5908
   14cbc:	movt	r1, #1
   14cc0:	bl	10af0 <strcmp@plt>
   14cc4:	adds	r0, r0, #0
   14cc8:	movne	r0, #1
   14ccc:	add	sp, sp, #268	; 0x10c
   14cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cd4:	strd	r4, [sp, #-16]!
   14cd8:	mov	r5, r1
   14cdc:	mov	r1, #0
   14ce0:	mov	r4, r2
   14ce4:	str	r6, [sp, #8]
   14ce8:	str	lr, [sp, #12]
   14cec:	bl	10c94 <setlocale@plt>
   14cf0:	subs	r6, r0, #0
   14cf4:	beq	14d74 <__assert_fail@plt+0x4098>
   14cf8:	bl	10c1c <strlen@plt>
   14cfc:	cmp	r4, r0
   14d00:	bhi	14d20 <__assert_fail@plt+0x4044>
   14d04:	cmp	r4, #0
   14d08:	moveq	r0, #34	; 0x22
   14d0c:	bne	14d44 <__assert_fail@plt+0x4068>
   14d10:	ldrd	r4, [sp]
   14d14:	ldr	r6, [sp, #8]
   14d18:	add	sp, sp, #12
   14d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d20:	add	r2, r0, #1
   14d24:	mov	r1, r6
   14d28:	mov	r0, r5
   14d2c:	bl	10b20 <memcpy@plt>
   14d30:	ldrd	r4, [sp]
   14d34:	mov	r0, #0
   14d38:	ldr	r6, [sp, #8]
   14d3c:	add	sp, sp, #12
   14d40:	pop	{pc}		; (ldr pc, [sp], #4)
   14d44:	sub	r4, r4, #1
   14d48:	mov	r1, r6
   14d4c:	mov	r2, r4
   14d50:	mov	r0, r5
   14d54:	bl	10b20 <memcpy@plt>
   14d58:	mov	r3, #0
   14d5c:	mov	r0, #34	; 0x22
   14d60:	strb	r3, [r5, r4]
   14d64:	ldrd	r4, [sp]
   14d68:	ldr	r6, [sp, #8]
   14d6c:	add	sp, sp, #12
   14d70:	pop	{pc}		; (ldr pc, [sp], #4)
   14d74:	cmp	r4, #0
   14d78:	mov	r0, #22
   14d7c:	strbne	r6, [r5]
   14d80:	ldrd	r4, [sp]
   14d84:	ldr	r6, [sp, #8]
   14d88:	add	sp, sp, #12
   14d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d90:	mov	r1, #0
   14d94:	b	10c94 <setlocale@plt>
   14d98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d9c:	mov	r7, r0
   14da0:	ldr	r6, [pc, #72]	; 14df0 <__assert_fail@plt+0x4114>
   14da4:	ldr	r5, [pc, #72]	; 14df4 <__assert_fail@plt+0x4118>
   14da8:	add	r6, pc, r6
   14dac:	add	r5, pc, r5
   14db0:	sub	r6, r6, r5
   14db4:	mov	r8, r1
   14db8:	mov	r9, r2
   14dbc:	bl	10ab8 <calloc@plt-0x20>
   14dc0:	asrs	r6, r6, #2
   14dc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14dc8:	mov	r4, #0
   14dcc:	add	r4, r4, #1
   14dd0:	ldr	r3, [r5], #4
   14dd4:	mov	r2, r9
   14dd8:	mov	r1, r8
   14ddc:	mov	r0, r7
   14de0:	blx	r3
   14de4:	cmp	r6, r4
   14de8:	bne	14dcc <__assert_fail@plt+0x40f0>
   14dec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14df0:	andeq	r1, r1, r4, ror #2
   14df4:	andeq	r1, r1, ip, asr r1
   14df8:	bx	lr
   14dfc:	ldr	r3, [pc, #12]	; 14e10 <__assert_fail@plt+0x4134>
   14e00:	mov	r1, #0
   14e04:	add	r3, pc, r3
   14e08:	ldr	r2, [r3]
   14e0c:	b	10c34 <__cxa_atexit@plt>
   14e10:			; <UNDEFINED> instruction: 0x000112b8

Disassembly of section .fini:

00014e14 <.fini>:
   14e14:	push	{r3, lr}
   14e18:	pop	{r3, pc}
