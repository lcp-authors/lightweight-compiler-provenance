
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

000104a8 <.init>:
   104a8:	push	{r3, lr}
   104ac:	bl	107a8 <strcmp@plt+0x268>
   104b0:	pop	{r3, pc}

Disassembly of section .plt:

000104b4 <abort@plt-0x14>:
   104b4:	push	{lr}		; (str lr, [sp, #-4]!)
   104b8:	ldr	lr, [pc, #4]	; 104c4 <abort@plt-0x4>
   104bc:	add	lr, pc, lr
   104c0:	ldr	pc, [lr, #8]!
   104c4:	andeq	r0, r1, ip, lsr fp

000104c8 <abort@plt>:
   104c8:	add	ip, pc, #0, 12
   104cc:	add	ip, ip, #16, 20	; 0x10000
   104d0:	ldr	pc, [ip, #2876]!	; 0xb3c

000104d4 <__libc_start_main@plt>:
   104d4:	add	ip, pc, #0, 12
   104d8:	add	ip, ip, #16, 20	; 0x10000
   104dc:	ldr	pc, [ip, #2868]!	; 0xb34

000104e0 <__gmon_start__@plt>:
   104e0:	add	ip, pc, #0, 12
   104e4:	add	ip, ip, #16, 20	; 0x10000
   104e8:	ldr	pc, [ip, #2860]!	; 0xb2c

000104ec <putchar@plt>:
   104ec:	add	ip, pc, #0, 12
   104f0:	add	ip, ip, #16, 20	; 0x10000
   104f4:	ldr	pc, [ip, #2852]!	; 0xb24

000104f8 <memset@plt>:
   104f8:	add	ip, pc, #0, 12
   104fc:	add	ip, ip, #16, 20	; 0x10000
   10500:	ldr	pc, [ip, #2844]!	; 0xb1c

00010504 <perror@plt>:
   10504:	add	ip, pc, #0, 12
   10508:	add	ip, ip, #16, 20	; 0x10000
   1050c:	ldr	pc, [ip, #2836]!	; 0xb14

00010510 <printf@plt>:
   10510:	add	ip, pc, #0, 12
   10514:	add	ip, ip, #16, 20	; 0x10000
   10518:	ldr	pc, [ip, #2828]!	; 0xb0c

0001051c <fwrite@plt>:
   1051c:	add	ip, pc, #0, 12
   10520:	add	ip, ip, #16, 20	; 0x10000
   10524:	ldr	pc, [ip, #2820]!	; 0xb04

00010528 <puts@plt>:
   10528:	add	ip, pc, #0, 12
   1052c:	add	ip, ip, #16, 20	; 0x10000
   10530:	ldr	pc, [ip, #2812]!	; 0xafc

00010534 <rb_get_ssl_certfp_file@plt>:
   10534:	add	ip, pc, #0, 12
   10538:	add	ip, ip, #16, 20	; 0x10000
   1053c:	ldr	pc, [ip, #2804]!	; 0xaf4

00010540 <strcmp@plt>:
   10540:	add	ip, pc, #0, 12
   10544:	add	ip, ip, #16, 20	; 0x10000
   10548:	ldr	pc, [ip, #2796]!	; 0xaec

Disassembly of section .text:

0001054c <.text>:
   1054c:	push	{r4, r5, r6, r7, r8, lr}
   10550:	sub	sp, sp, #72	; 0x48
   10554:	add	r4, sp, #4
   10558:	mov	r5, r0
   1055c:	mov	r6, r1
   10560:	mov	r0, r4
   10564:	mov	r2, #65	; 0x41
   10568:	mov	r1, #0
   1056c:	bl	104f8 <memset@plt>
   10570:	cmp	r5, #3
   10574:	ldr	r5, [pc, #416]	; 1071c <strcmp@plt+0x1dc>
   10578:	add	r5, pc, r5
   1057c:	bne	10610 <strcmp@plt+0xd0>
   10580:	ldr	r7, [r6, #4]
   10584:	ldr	r1, [pc, #404]	; 10720 <strcmp@plt+0x1e0>
   10588:	mov	r0, r7
   1058c:	add	r1, pc, r1
   10590:	bl	10540 <strcmp@plt>
   10594:	ldr	r8, [r6, #8]
   10598:	subs	r2, r0, #0
   1059c:	beq	106c8 <strcmp@plt+0x188>
   105a0:	ldr	r1, [pc, #380]	; 10724 <strcmp@plt+0x1e4>
   105a4:	mov	r0, r7
   105a8:	add	r1, pc, r1
   105ac:	bl	10540 <strcmp@plt>
   105b0:	cmp	r0, #0
   105b4:	beq	10634 <strcmp@plt+0xf4>
   105b8:	ldr	r1, [pc, #360]	; 10728 <strcmp@plt+0x1e8>
   105bc:	mov	r0, r7
   105c0:	add	r1, pc, r1
   105c4:	bl	10540 <strcmp@plt>
   105c8:	cmp	r0, #0
   105cc:	beq	106d4 <strcmp@plt+0x194>
   105d0:	ldr	r1, [pc, #340]	; 1072c <strcmp@plt+0x1ec>
   105d4:	mov	r0, r7
   105d8:	add	r1, pc, r1
   105dc:	bl	10540 <strcmp@plt>
   105e0:	cmp	r0, #0
   105e4:	beq	106e4 <strcmp@plt+0x1a4>
   105e8:	ldr	r1, [pc, #320]	; 10730 <strcmp@plt+0x1f0>
   105ec:	mov	r0, r7
   105f0:	add	r1, pc, r1
   105f4:	bl	10540 <strcmp@plt>
   105f8:	cmp	r0, #0
   105fc:	bne	10704 <strcmp@plt+0x1c4>
   10600:	ldr	r7, [pc, #300]	; 10734 <strcmp@plt+0x1f4>
   10604:	ldr	r2, [pc, #300]	; 10738 <strcmp@plt+0x1f8>
   10608:	add	r7, pc, r7
   1060c:	b	10640 <strcmp@plt+0x100>
   10610:	ldr	r0, [pc, #292]	; 1073c <strcmp@plt+0x1fc>
   10614:	add	r0, pc, r0
   10618:	bl	10528 <puts@plt>
   1061c:	ldr	r0, [pc, #284]	; 10740 <strcmp@plt+0x200>
   10620:	add	r0, pc, r0
   10624:	bl	10528 <puts@plt>
   10628:	mov	r0, #1
   1062c:	add	sp, sp, #72	; 0x48
   10630:	pop	{r4, r5, r6, r7, r8, pc}
   10634:	ldr	r7, [pc, #264]	; 10744 <strcmp@plt+0x204>
   10638:	mov	r2, #1
   1063c:	add	r7, pc, r7
   10640:	mov	r1, r4
   10644:	mov	r0, r8
   10648:	bl	10534 <rb_get_ssl_certfp_file@plt>
   1064c:	subs	r6, r0, #0
   10650:	blt	106f4 <strcmp@plt+0x1b4>
   10654:	beq	106a0 <strcmp@plt+0x160>
   10658:	ldr	r0, [pc, #232]	; 10748 <strcmp@plt+0x208>
   1065c:	mov	r1, r7
   10660:	add	r0, pc, r0
   10664:	bl	10510 <printf@plt>
   10668:	ldr	r7, [pc, #220]	; 1074c <strcmp@plt+0x20c>
   1066c:	add	r5, sp, #3
   10670:	add	r7, pc, r7
   10674:	mov	r4, #0
   10678:	add	r4, r4, #1
   1067c:	ldrb	r1, [r5, #1]!
   10680:	mov	r0, r7
   10684:	bl	10510 <printf@plt>
   10688:	cmp	r6, r4
   1068c:	bgt	10678 <strcmp@plt+0x138>
   10690:	mov	r0, #10
   10694:	bl	104ec <putchar@plt>
   10698:	mov	r0, #0
   1069c:	b	1062c <strcmp@plt+0xec>
   106a0:	ldr	r3, [pc, #168]	; 10750 <strcmp@plt+0x210>
   106a4:	ldr	r0, [pc, #168]	; 10754 <strcmp@plt+0x214>
   106a8:	mov	r2, #14
   106ac:	ldr	r3, [r5, r3]
   106b0:	mov	r1, #1
   106b4:	add	r0, pc, r0
   106b8:	ldr	r3, [r3]
   106bc:	bl	1051c <fwrite@plt>
   106c0:	mov	r0, #1
   106c4:	b	1062c <strcmp@plt+0xec>
   106c8:	ldr	r7, [pc, #136]	; 10758 <strcmp@plt+0x218>
   106cc:	add	r7, pc, r7
   106d0:	b	10640 <strcmp@plt+0x100>
   106d4:	ldr	r7, [pc, #128]	; 1075c <strcmp@plt+0x21c>
   106d8:	mov	r2, #2
   106dc:	add	r7, pc, r7
   106e0:	b	10640 <strcmp@plt+0x100>
   106e4:	ldr	r7, [pc, #116]	; 10760 <strcmp@plt+0x220>
   106e8:	ldr	r2, [pc, #116]	; 10764 <strcmp@plt+0x224>
   106ec:	add	r7, pc, r7
   106f0:	b	10640 <strcmp@plt+0x100>
   106f4:	mov	r0, r8
   106f8:	bl	10504 <perror@plt>
   106fc:	mov	r0, #1
   10700:	b	1062c <strcmp@plt+0xec>
   10704:	ldr	r0, [pc, #92]	; 10768 <strcmp@plt+0x228>
   10708:	mov	r1, r7
   1070c:	add	r0, pc, r0
   10710:	bl	10510 <printf@plt>
   10714:	mov	r0, #1
   10718:	b	1062c <strcmp@plt+0xec>
   1071c:	andeq	r0, r1, r0, lsl #21
   10720:	strdeq	r0, [r0], -r4
   10724:	andeq	r0, r0, r0, ror #7
   10728:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1072c:	andeq	r0, r0, r0, asr #7
   10730:	andeq	r0, r0, r4, lsl #7
   10734:	andeq	r0, r0, r4, lsl #6
   10738:	andeq	r1, r0, r2
   1073c:	andeq	r0, r0, r8, lsl #6
   10740:	andeq	r0, r0, r0, lsr #6
   10744:	andeq	r0, r0, r8, asr #6
   10748:	andeq	r0, r0, r8, ror #6
   1074c:	andeq	r0, r0, ip, asr r3
   10750:	andeq	r0, r0, ip, lsr r0
   10754:	andeq	r0, r0, r4, lsl #6
   10758:			; <UNDEFINED> instruction: 0x000002b8
   1075c:	andeq	r0, r0, r8, lsr #5
   10760:	andeq	r0, r0, r0, lsl r2
   10764:	andeq	r1, r0, r1
   10768:	muleq	r0, r8, r2
   1076c:	mov	fp, #0
   10770:	mov	lr, #0
   10774:	pop	{r1}		; (ldr r1, [sp], #4)
   10778:	mov	r2, sp
   1077c:	push	{r2}		; (str r2, [sp, #-4]!)
   10780:	push	{r0}		; (str r0, [sp, #-4]!)
   10784:	ldr	ip, [pc, #16]	; 1079c <strcmp@plt+0x25c>
   10788:	push	{ip}		; (str ip, [sp, #-4]!)
   1078c:	ldr	r0, [pc, #12]	; 107a0 <strcmp@plt+0x260>
   10790:	ldr	r3, [pc, #12]	; 107a4 <strcmp@plt+0x264>
   10794:	bl	104d4 <__libc_start_main@plt>
   10798:	bl	104c8 <abort@plt>
   1079c:	strdeq	r0, [r1], -r4
   107a0:	andeq	r0, r1, ip, asr #10
   107a4:	muleq	r1, r4, r8
   107a8:	ldr	r3, [pc, #20]	; 107c4 <strcmp@plt+0x284>
   107ac:	ldr	r2, [pc, #20]	; 107c8 <strcmp@plt+0x288>
   107b0:	add	r3, pc, r3
   107b4:	ldr	r2, [r3, r2]
   107b8:	cmp	r2, #0
   107bc:	bxeq	lr
   107c0:	b	104e0 <__gmon_start__@plt>
   107c4:	andeq	r0, r1, r8, asr #16
   107c8:	andeq	r0, r0, r8, lsr r0
   107cc:	ldr	r3, [pc, #28]	; 107f0 <strcmp@plt+0x2b0>
   107d0:	ldr	r0, [pc, #28]	; 107f4 <strcmp@plt+0x2b4>
   107d4:	sub	r3, r3, r0
   107d8:	cmp	r3, #6
   107dc:	bxls	lr
   107e0:	ldr	r3, [pc, #16]	; 107f8 <strcmp@plt+0x2b8>
   107e4:	cmp	r3, #0
   107e8:	bxeq	lr
   107ec:	bx	r3
   107f0:	andeq	r1, r2, fp, asr #32
   107f4:	andeq	r1, r2, r8, asr #32
   107f8:	andeq	r0, r0, r0
   107fc:	ldr	r1, [pc, #36]	; 10828 <strcmp@plt+0x2e8>
   10800:	ldr	r0, [pc, #36]	; 1082c <strcmp@plt+0x2ec>
   10804:	sub	r1, r1, r0
   10808:	asr	r1, r1, #2
   1080c:	add	r1, r1, r1, lsr #31
   10810:	asrs	r1, r1, #1
   10814:	bxeq	lr
   10818:	ldr	r3, [pc, #16]	; 10830 <strcmp@plt+0x2f0>
   1081c:	cmp	r3, #0
   10820:	bxeq	lr
   10824:	bx	r3
   10828:	andeq	r1, r2, r8, asr #32
   1082c:	andeq	r1, r2, r8, asr #32
   10830:	andeq	r0, r0, r0
   10834:	push	{r4, lr}
   10838:	ldr	r4, [pc, #24]	; 10858 <strcmp@plt+0x318>
   1083c:	ldrb	r3, [r4]
   10840:	cmp	r3, #0
   10844:	popne	{r4, pc}
   10848:	bl	107cc <strcmp@plt+0x28c>
   1084c:	mov	r3, #1
   10850:	strb	r3, [r4]
   10854:	pop	{r4, pc}
   10858:	andeq	r1, r2, r8, asr #32
   1085c:	ldr	r0, [pc, #40]	; 1088c <strcmp@plt+0x34c>
   10860:	ldr	r3, [r0]
   10864:	cmp	r3, #0
   10868:	bne	10870 <strcmp@plt+0x330>
   1086c:	b	107fc <strcmp@plt+0x2bc>
   10870:	ldr	r3, [pc, #24]	; 10890 <strcmp@plt+0x350>
   10874:	cmp	r3, #0
   10878:	beq	1086c <strcmp@plt+0x32c>
   1087c:	push	{r4, lr}
   10880:	blx	r3
   10884:	pop	{r4, lr}
   10888:	b	107fc <strcmp@plt+0x2bc>
   1088c:	strdeq	r0, [r2], -ip
   10890:	andeq	r0, r0, r0
   10894:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10898:	mov	r7, r0
   1089c:	ldr	r6, [pc, #72]	; 108ec <strcmp@plt+0x3ac>
   108a0:	ldr	r5, [pc, #72]	; 108f0 <strcmp@plt+0x3b0>
   108a4:	add	r6, pc, r6
   108a8:	add	r5, pc, r5
   108ac:	sub	r6, r6, r5
   108b0:	mov	r8, r1
   108b4:	mov	r9, r2
   108b8:	bl	104a8 <abort@plt-0x20>
   108bc:	asrs	r6, r6, #2
   108c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108c4:	mov	r4, #0
   108c8:	add	r4, r4, #1
   108cc:	ldr	r3, [r5], #4
   108d0:	mov	r2, r9
   108d4:	mov	r1, r8
   108d8:	mov	r0, r7
   108dc:	blx	r3
   108e0:	cmp	r6, r4
   108e4:	bne	108c8 <strcmp@plt+0x388>
   108e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108ec:	andeq	r0, r1, ip, asr #12
   108f0:	andeq	r0, r1, r4, asr #12
   108f4:	bx	lr

Disassembly of section .fini:

000108f8 <.fini>:
   108f8:	push	{r3, lr}
   108fc:	pop	{r3, pc}
