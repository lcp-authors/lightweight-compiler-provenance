
../repos/coreutils/src/realpath:     file format elf32-littlearm


Disassembly of section .init:

00010d98 <.init>:
   10d98:	push	{r3, lr}
   10d9c:	bl	1105c <__mempcpy_chk@plt+0x4c>
   10da0:	pop	{r3, pc}

Disassembly of section .plt:

00010da4 <calloc@plt-0x14>:
   10da4:	push	{lr}		; (str lr, [sp, #-4]!)
   10da8:	ldr	lr, [pc, #4]	; 10db4 <calloc@plt-0x4>
   10dac:	add	lr, pc, lr
   10db0:	ldr	pc, [lr, #8]!
   10db4:	andeq	r7, r1, ip, asr #4

00010db8 <calloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #588]!	; 0x24c

00010dc4 <fputs_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #580]!	; 0x244

00010dd0 <raise@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #572]!	; 0x23c

00010ddc <strcmp@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #564]!	; 0x234

00010de8 <fflush@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #556]!	; 0x22c

00010df4 <memmove@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #548]!	; 0x224

00010e00 <free@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #540]!	; 0x21c

00010e0c <faccessat@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #532]!	; 0x214

00010e18 <_exit@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #524]!	; 0x20c

00010e24 <memcpy@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #516]!	; 0x204

00010e30 <mbsinit@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #508]!	; 0x1fc

00010e3c <dcgettext@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #500]!	; 0x1f4

00010e48 <realloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #492]!	; 0x1ec

00010e54 <textdomain@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e60 <rawmemchr@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #476]!	; 0x1dc

00010e6c <iswprint@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #468]!	; 0x1d4

00010e78 <readlink@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #460]!	; 0x1cc

00010e84 <fwrite@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e90 <lseek64@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #444]!	; 0x1bc

00010e9c <__ctype_get_mb_cur_max@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ea8 <__fpending@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #428]!	; 0x1ac

00010eb4 <mbrtowc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ec0 <error@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #412]!	; 0x19c

00010ecc <malloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #404]!	; 0x194

00010ed8 <__libc_start_main@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #396]!	; 0x18c

00010ee4 <__freading@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #388]!	; 0x184

00010ef0 <__gmon_start__@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #380]!	; 0x17c

00010efc <getopt_long@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #372]!	; 0x174

00010f08 <__ctype_b_loc@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #364]!	; 0x16c

00010f14 <getcwd@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #356]!	; 0x164

00010f20 <exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #348]!	; 0x15c

00010f2c <bcmp@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #340]!	; 0x154

00010f38 <strlen@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #332]!	; 0x14c

00010f44 <__errno_location@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #324]!	; 0x144

00010f50 <__cxa_atexit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #316]!	; 0x13c

00010f5c <memset@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #308]!	; 0x134

00010f68 <__printf_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #300]!	; 0x12c

00010f74 <fileno@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #292]!	; 0x124

00010f80 <__fprintf_chk@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #284]!	; 0x11c

00010f8c <fclose@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #276]!	; 0x114

00010f98 <fseeko64@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #268]!	; 0x10c

00010fa4 <__overflow@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #260]!	; 0x104

00010fb0 <setlocale@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #252]!	; 0xfc

00010fbc <strrchr@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #244]!	; 0xf4

00010fc8 <nl_langinfo@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #236]!	; 0xec

00010fd4 <bindtextdomain@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #228]!	; 0xe4

00010fe0 <__xstat64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #220]!	; 0xdc

00010fec <strncmp@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #212]!	; 0xd4

00010ff8 <abort@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #204]!	; 0xcc

00011004 <strspn@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #196]!	; 0xc4

00011010 <__mempcpy_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #188]!	; 0xbc

Disassembly of section .text:

00011020 <.text>:
   11020:	mov	fp, #0
   11024:	mov	lr, #0
   11028:	pop	{r1}		; (ldr r1, [sp], #4)
   1102c:	mov	r2, sp
   11030:	push	{r2}		; (str r2, [sp, #-4]!)
   11034:	push	{r0}		; (str r0, [sp, #-4]!)
   11038:	ldr	ip, [pc, #16]	; 11050 <__mempcpy_chk@plt+0x40>
   1103c:	push	{ip}		; (str ip, [sp, #-4]!)
   11040:	ldr	r0, [pc, #12]	; 11054 <__mempcpy_chk@plt+0x44>
   11044:	ldr	r3, [pc, #12]	; 11058 <__mempcpy_chk@plt+0x48>
   11048:	bl	10ed8 <__libc_start_main@plt>
   1104c:	bl	10ff8 <abort@plt>
   11050:	andeq	r6, r1, r4, lsr #27
   11054:	andeq	r1, r1, r0, ror r3
   11058:	andeq	r6, r1, r4, asr #26
   1105c:	ldr	r3, [pc, #20]	; 11078 <__mempcpy_chk@plt+0x68>
   11060:	ldr	r2, [pc, #20]	; 1107c <__mempcpy_chk@plt+0x6c>
   11064:	add	r3, pc, r3
   11068:	ldr	r2, [r3, r2]
   1106c:	cmp	r2, #0
   11070:	bxeq	lr
   11074:	b	10ef0 <__gmon_start__@plt>
   11078:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1107c:	ldrdeq	r0, [r0], -r8
   11080:	ldr	r0, [pc, #24]	; 110a0 <__mempcpy_chk@plt+0x90>
   11084:	ldr	r3, [pc, #24]	; 110a4 <__mempcpy_chk@plt+0x94>
   11088:	cmp	r3, r0
   1108c:	bxeq	lr
   11090:	ldr	r3, [pc, #16]	; 110a8 <__mempcpy_chk@plt+0x98>
   11094:	cmp	r3, #0
   11098:	bxeq	lr
   1109c:	bx	r3
   110a0:	andeq	r8, r2, r0, lsr r1
   110a4:	andeq	r8, r2, r0, lsr r1
   110a8:	andeq	r0, r0, r0
   110ac:	ldr	r0, [pc, #36]	; 110d8 <__mempcpy_chk@plt+0xc8>
   110b0:	ldr	r1, [pc, #36]	; 110dc <__mempcpy_chk@plt+0xcc>
   110b4:	sub	r1, r1, r0
   110b8:	asr	r1, r1, #2
   110bc:	add	r1, r1, r1, lsr #31
   110c0:	asrs	r1, r1, #1
   110c4:	bxeq	lr
   110c8:	ldr	r3, [pc, #16]	; 110e0 <__mempcpy_chk@plt+0xd0>
   110cc:	cmp	r3, #0
   110d0:	bxeq	lr
   110d4:	bx	r3
   110d8:	andeq	r8, r2, r0, lsr r1
   110dc:	andeq	r8, r2, r0, lsr r1
   110e0:	andeq	r0, r0, r0
   110e4:	push	{r4, lr}
   110e8:	ldr	r4, [pc, #24]	; 11108 <__mempcpy_chk@plt+0xf8>
   110ec:	ldrb	r3, [r4]
   110f0:	cmp	r3, #0
   110f4:	popne	{r4, pc}
   110f8:	bl	11080 <__mempcpy_chk@plt+0x70>
   110fc:	mov	r3, #1
   11100:	strb	r3, [r4]
   11104:	pop	{r4, pc}
   11108:	andeq	r8, r2, ip, asr #2
   1110c:	b	110ac <__mempcpy_chk@plt+0x9c>
   11110:	push	{fp, lr}
   11114:	mov	fp, sp
   11118:	sub	sp, sp, #56	; 0x38
   1111c:	mov	r4, r0
   11120:	cmp	r0, #0
   11124:	bne	1132c <__mempcpy_chk@plt+0x31c>
   11128:	movw	r1, #28147	; 0x6df3
   1112c:	mov	r0, #0
   11130:	mov	r2, #5
   11134:	movt	r1, #1
   11138:	bl	10e3c <dcgettext@plt>
   1113c:	mov	r1, r0
   11140:	movw	r0, #33124	; 0x8164
   11144:	movt	r0, #2
   11148:	ldr	r2, [r0]
   1114c:	mov	r0, #1
   11150:	bl	10f68 <__printf_chk@plt>
   11154:	movw	r1, #28178	; 0x6e12
   11158:	mov	r0, #0
   1115c:	mov	r2, #5
   11160:	movt	r1, #1
   11164:	bl	10e3c <dcgettext@plt>
   11168:	movw	r7, #33092	; 0x8144
   1116c:	movt	r7, #2
   11170:	ldr	r1, [r7]
   11174:	bl	10dc4 <fputs_unlocked@plt>
   11178:	movw	r1, #28257	; 0x6e61
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	movt	r1, #1
   11188:	bl	10e3c <dcgettext@plt>
   1118c:	ldr	r1, [r7]
   11190:	bl	10dc4 <fputs_unlocked@plt>
   11194:	movw	r1, #28883	; 0x70d3
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e3c <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10dc4 <fputs_unlocked@plt>
   111b0:	movw	r1, #28928	; 0x7100
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e3c <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10dc4 <fputs_unlocked@plt>
   111cc:	movw	r0, #29736	; 0x7428
   111d0:	mov	r2, #48	; 0x30
   111d4:	mov	r6, sp
   111d8:	movw	r5, #28982	; 0x7136
   111dc:	movt	r0, #1
   111e0:	movt	r5, #1
   111e4:	add	r1, r0, #32
   111e8:	add	r3, r0, #16
   111ec:	vld1.64	{d18-d19}, [r0], r2
   111f0:	vld1.64	{d16-d17}, [r1]
   111f4:	vld1.64	{d20-d21}, [r3]
   111f8:	vldr	d22, [r0]
   111fc:	add	r1, r6, #32
   11200:	add	r0, r6, #16
   11204:	vst1.64	{d16-d17}, [r1]
   11208:	movw	r1, #29067	; 0x718b
   1120c:	vst1.64	{d20-d21}, [r0]
   11210:	mov	r0, r6
   11214:	movt	r1, #1
   11218:	vst1.64	{d18-d19}, [r0], r2
   1121c:	vstr	d22, [r0]
   11220:	mov	r0, r5
   11224:	bl	10ddc <strcmp@plt>
   11228:	cmp	r0, #0
   1122c:	ldrne	r1, [r6, #8]!
   11230:	cmpne	r1, #0
   11234:	bne	11220 <__mempcpy_chk@plt+0x210>
   11238:	movw	r1, #29162	; 0x71ea
   1123c:	ldr	r6, [r6, #4]
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10e3c <dcgettext@plt>
   11250:	movw	r2, #29023	; 0x715f
   11254:	movw	r3, #29185	; 0x7201
   11258:	mov	r1, r0
   1125c:	mov	r0, #1
   11260:	movt	r2, #1
   11264:	movt	r3, #1
   11268:	bl	10f68 <__printf_chk@plt>
   1126c:	cmp	r6, #0
   11270:	mov	r0, #5
   11274:	mov	r1, #0
   11278:	moveq	r6, r5
   1127c:	bl	10fb0 <setlocale@plt>
   11280:	cmp	r0, #0
   11284:	beq	112bc <__mempcpy_chk@plt+0x2ac>
   11288:	movw	r1, #29225	; 0x7229
   1128c:	mov	r2, #3
   11290:	movt	r1, #1
   11294:	bl	10fec <strncmp@plt>
   11298:	cmp	r0, #0
   1129c:	beq	112bc <__mempcpy_chk@plt+0x2ac>
   112a0:	movw	r1, #29229	; 0x722d
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10e3c <dcgettext@plt>
   112b4:	ldr	r1, [r7]
   112b8:	bl	10dc4 <fputs_unlocked@plt>
   112bc:	movw	r1, #29300	; 0x7274
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	movt	r1, #1
   112cc:	bl	10e3c <dcgettext@plt>
   112d0:	movw	r2, #29185	; 0x7201
   112d4:	mov	r1, r0
   112d8:	mov	r0, #1
   112dc:	mov	r3, r5
   112e0:	movt	r2, #1
   112e4:	bl	10f68 <__printf_chk@plt>
   112e8:	movw	r1, #29327	; 0x728f
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10e3c <dcgettext@plt>
   112fc:	mov	r1, r0
   11300:	movw	r0, #29095	; 0x71a7
   11304:	movw	r3, #28256	; 0x6e60
   11308:	cmp	r6, r5
   1130c:	mov	r2, r6
   11310:	movt	r0, #1
   11314:	movt	r3, #1
   11318:	moveq	r3, r0
   1131c:	mov	r0, #1
   11320:	bl	10f68 <__printf_chk@plt>
   11324:	mov	r0, r4
   11328:	bl	10f20 <exit@plt>
   1132c:	movw	r0, #33088	; 0x8140
   11330:	movw	r1, #28108	; 0x6dcc
   11334:	mov	r2, #5
   11338:	movt	r0, #2
   1133c:	movt	r1, #1
   11340:	ldr	r5, [r0]
   11344:	mov	r0, #0
   11348:	bl	10e3c <dcgettext@plt>
   1134c:	mov	r2, r0
   11350:	movw	r0, #33124	; 0x8164
   11354:	mov	r1, #1
   11358:	movt	r0, #2
   1135c:	ldr	r3, [r0]
   11360:	mov	r0, r5
   11364:	bl	10f80 <__fprintf_chk@plt>
   11368:	mov	r0, r4
   1136c:	bl	10f20 <exit@plt>
   11370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11374:	add	fp, sp, #28
   11378:	sub	sp, sp, #132	; 0x84
   1137c:	mov	r9, r0
   11380:	ldr	r0, [r1]
   11384:	mov	r5, r1
   11388:	bl	13b58 <__mempcpy_chk@plt+0x2b48>
   1138c:	movw	r1, #28256	; 0x6e60
   11390:	mov	r0, #6
   11394:	movt	r1, #1
   11398:	bl	10fb0 <setlocale@plt>
   1139c:	movw	r4, #29027	; 0x7163
   113a0:	movw	r1, #28991	; 0x713f
   113a4:	movt	r4, #1
   113a8:	movt	r1, #1
   113ac:	mov	r0, r4
   113b0:	bl	10fd4 <bindtextdomain@plt>
   113b4:	mov	r0, r4
   113b8:	bl	10e54 <textdomain@plt>
   113bc:	movw	r0, #9688	; 0x25d8
   113c0:	movt	r0, #1
   113c4:	bl	16da8 <__mempcpy_chk@plt+0x5d98>
   113c8:	mov	r1, r5
   113cc:	movw	r5, #29015	; 0x7157
   113d0:	movw	r4, #29528	; 0x7358
   113d4:	movw	sl, #33096	; 0x8148
   113d8:	mov	r0, #1
   113dc:	mov	r7, #0
   113e0:	mov	r6, #0
   113e4:	mov	r8, #0
   113e8:	str	r9, [sp, #16]
   113ec:	movt	r5, #1
   113f0:	movt	r4, #1
   113f4:	movt	sl, #2
   113f8:	str	r0, [sp, #20]
   113fc:	str	r1, [sp, #12]
   11400:	mov	r0, r9
   11404:	mov	r2, r5
   11408:	mov	r3, r4
   1140c:	str	r7, [sp]
   11410:	bl	10efc <getopt_long@plt>
   11414:	cmp	r0, #75	; 0x4b
   11418:	ble	1159c <__mempcpy_chk@plt+0x58c>
   1141c:	sub	r1, r0, #76	; 0x4c
   11420:	cmp	r1, #46	; 0x2e
   11424:	bhi	11500 <__mempcpy_chk@plt+0x4f0>
   11428:	add	r0, pc, #0
   1142c:	ldr	pc, [r0, r1, lsl #2]
   11430:	andeq	r1, r1, ip, ror #9
   11434:			; <UNDEFINED> instruction: 0x00011ab4
   11438:			; <UNDEFINED> instruction: 0x00011ab4
   1143c:			; <UNDEFINED> instruction: 0x00011ab4
   11440:	andeq	r1, r1, ip, lsr #10
   11444:			; <UNDEFINED> instruction: 0x00011ab4
   11448:			; <UNDEFINED> instruction: 0x00011ab4
   1144c:			; <UNDEFINED> instruction: 0x00011ab4
   11450:			; <UNDEFINED> instruction: 0x00011ab4
   11454:			; <UNDEFINED> instruction: 0x00011ab4
   11458:			; <UNDEFINED> instruction: 0x00011ab4
   1145c:			; <UNDEFINED> instruction: 0x00011ab4
   11460:			; <UNDEFINED> instruction: 0x00011ab4
   11464:			; <UNDEFINED> instruction: 0x00011ab4
   11468:			; <UNDEFINED> instruction: 0x00011ab4
   1146c:			; <UNDEFINED> instruction: 0x00011ab4
   11470:			; <UNDEFINED> instruction: 0x00011ab4
   11474:			; <UNDEFINED> instruction: 0x00011ab4
   11478:			; <UNDEFINED> instruction: 0x00011ab4
   1147c:			; <UNDEFINED> instruction: 0x00011ab4
   11480:			; <UNDEFINED> instruction: 0x00011ab4
   11484:			; <UNDEFINED> instruction: 0x00011ab4
   11488:			; <UNDEFINED> instruction: 0x00011ab4
   1148c:			; <UNDEFINED> instruction: 0x00011ab4
   11490:			; <UNDEFINED> instruction: 0x00011ab4
   11494:	andeq	r1, r1, r0, lsr #10
   11498:			; <UNDEFINED> instruction: 0x00011ab4
   1149c:			; <UNDEFINED> instruction: 0x00011ab4
   114a0:			; <UNDEFINED> instruction: 0x00011ab4
   114a4:			; <UNDEFINED> instruction: 0x00011ab4
   114a8:			; <UNDEFINED> instruction: 0x00011ab4
   114ac:			; <UNDEFINED> instruction: 0x00011ab4
   114b0:			; <UNDEFINED> instruction: 0x00011ab4
   114b4:	andeq	r1, r1, r0, lsl r5
   114b8:			; <UNDEFINED> instruction: 0x00011ab4
   114bc:			; <UNDEFINED> instruction: 0x00011ab4
   114c0:			; <UNDEFINED> instruction: 0x00011ab4
   114c4:	andeq	r1, r1, r0, ror #10
   114c8:			; <UNDEFINED> instruction: 0x00011ab4
   114cc:	andeq	r1, r1, r4, asr #10
   114d0:			; <UNDEFINED> instruction: 0x00011ab4
   114d4:			; <UNDEFINED> instruction: 0x00011ab4
   114d8:			; <UNDEFINED> instruction: 0x00011ab4
   114dc:			; <UNDEFINED> instruction: 0x00011ab4
   114e0:			; <UNDEFINED> instruction: 0x00011ab4
   114e4:			; <UNDEFINED> instruction: 0x00011ab4
   114e8:	andeq	r1, r1, ip, ror #10
   114ec:	movw	r0, #33104	; 0x8150
   114f0:	mov	r1, #1
   114f4:	movt	r0, #2
   114f8:	strb	r1, [r0]
   114fc:	b	11550 <__mempcpy_chk@plt+0x540>
   11500:	cmp	r0, #256	; 0x100
   11504:	bne	11580 <__mempcpy_chk@plt+0x570>
   11508:	ldr	r6, [sl]
   1150c:	b	11590 <__mempcpy_chk@plt+0x580>
   11510:	ldr	r0, [sp, #20]
   11514:	mov	r1, #2
   11518:	bfi	r0, r1, #0, #2
   1151c:	b	11558 <__mempcpy_chk@plt+0x548>
   11520:	ldr	r0, [sp, #20]
   11524:	bic	r0, r0, #3
   11528:	b	11558 <__mempcpy_chk@plt+0x548>
   1152c:	movw	r0, #33104	; 0x8150
   11530:	movt	r0, #2
   11534:	strb	r7, [r0]
   11538:	ldr	r0, [sp, #20]
   1153c:	bic	r0, r0, #4
   11540:	b	11558 <__mempcpy_chk@plt+0x548>
   11544:	movw	r0, #33104	; 0x8150
   11548:	movt	r0, #2
   1154c:	strb	r7, [r0]
   11550:	ldr	r0, [sp, #20]
   11554:	orr	r0, r0, #4
   11558:	str	r0, [sp, #20]
   1155c:	b	11590 <__mempcpy_chk@plt+0x580>
   11560:	movw	r0, #33105	; 0x8151
   11564:	movt	r0, #2
   11568:	b	11574 <__mempcpy_chk@plt+0x564>
   1156c:	movw	r0, #33106	; 0x8152
   11570:	movt	r0, #2
   11574:	mov	r1, #1
   11578:	strb	r1, [r0]
   1157c:	b	11590 <__mempcpy_chk@plt+0x580>
   11580:	movw	r1, #257	; 0x101
   11584:	cmp	r0, r1
   11588:	bne	11ab4 <__mempcpy_chk@plt+0xaa4>
   1158c:	ldr	r8, [sl]
   11590:	ldr	r1, [sp, #12]
   11594:	ldr	r9, [sp, #16]
   11598:	b	11400 <__mempcpy_chk@plt+0x3f0>
   1159c:	cmn	r0, #1
   115a0:	bne	11a30 <__mempcpy_chk@plt+0xa20>
   115a4:	movw	r9, #33080	; 0x8138
   115a8:	ldr	sl, [sp, #16]
   115ac:	movt	r9, #2
   115b0:	ldr	r0, [r9]
   115b4:	cmp	r0, sl
   115b8:	bge	11a90 <__mempcpy_chk@plt+0xa80>
   115bc:	ldr	r0, [sp, #20]
   115c0:	cmp	r8, #0
   115c4:	mov	r4, r8
   115c8:	moveq	r4, r6
   115cc:	cmp	r6, #0
   115d0:	movne	r4, r6
   115d4:	cmp	r4, #0
   115d8:	and	r6, r0, #3
   115dc:	beq	11674 <__mempcpy_chk@plt+0x664>
   115e0:	ldr	r1, [sp, #20]
   115e4:	mov	r0, r4
   115e8:	bl	11ecc <__mempcpy_chk@plt+0xebc>
   115ec:	mov	r5, r0
   115f0:	movw	r0, #33104	; 0x8150
   115f4:	movt	r0, #2
   115f8:	ldrb	r0, [r0]
   115fc:	cmp	r0, #1
   11600:	bne	1162c <__mempcpy_chk@plt+0x61c>
   11604:	cmp	r5, #0
   11608:	beq	1162c <__mempcpy_chk@plt+0x61c>
   1160c:	ldr	r0, [sp, #20]
   11610:	bic	r1, r0, #4
   11614:	mov	r0, r5
   11618:	bl	11ecc <__mempcpy_chk@plt+0xebc>
   1161c:	mov	r7, r0
   11620:	mov	r0, r5
   11624:	bl	1278c <__mempcpy_chk@plt+0x177c>
   11628:	b	11630 <__mempcpy_chk@plt+0x620>
   1162c:	mov	r7, r5
   11630:	movw	r0, #33108	; 0x8154
   11634:	cmp	r7, #0
   11638:	movt	r0, #2
   1163c:	str	r7, [r0]
   11640:	beq	11abc <__mempcpy_chk@plt+0xaac>
   11644:	cmp	r6, #0
   11648:	bne	11674 <__mempcpy_chk@plt+0x664>
   1164c:	add	r2, sp, #24
   11650:	mov	r0, #3
   11654:	mov	r1, r7
   11658:	bl	10fe0 <__xstat64@plt>
   1165c:	cmp	r0, #0
   11660:	bne	11aec <__mempcpy_chk@plt+0xadc>
   11664:	ldr	r0, [sp, #40]	; 0x28
   11668:	and	r0, r0, #61440	; 0xf000
   1166c:	cmp	r0, #16384	; 0x4000
   11670:	bne	11b2c <__mempcpy_chk@plt+0xb1c>
   11674:	cmp	r8, r4
   11678:	beq	11704 <__mempcpy_chk@plt+0x6f4>
   1167c:	cmp	r8, #0
   11680:	beq	11814 <__mempcpy_chk@plt+0x804>
   11684:	ldr	r1, [sp, #20]
   11688:	mov	r0, r8
   1168c:	bl	11ecc <__mempcpy_chk@plt+0xebc>
   11690:	mov	r5, r0
   11694:	movw	r0, #33104	; 0x8150
   11698:	movt	r0, #2
   1169c:	ldrb	r0, [r0]
   116a0:	cmp	r0, #1
   116a4:	bne	11714 <__mempcpy_chk@plt+0x704>
   116a8:	cmp	r5, #0
   116ac:	beq	11714 <__mempcpy_chk@plt+0x704>
   116b0:	ldr	r0, [sp, #20]
   116b4:	bic	r1, r0, #4
   116b8:	mov	r0, r5
   116bc:	bl	11ecc <__mempcpy_chk@plt+0xebc>
   116c0:	mov	r4, r0
   116c4:	mov	r0, r5
   116c8:	bl	1278c <__mempcpy_chk@plt+0x177c>
   116cc:	cmp	r4, #0
   116d0:	bne	11720 <__mempcpy_chk@plt+0x710>
   116d4:	bl	10f44 <__errno_location@plt>
   116d8:	ldr	r4, [r0]
   116dc:	mov	r0, #0
   116e0:	mov	r1, #3
   116e4:	mov	r2, r8
   116e8:	bl	15500 <__mempcpy_chk@plt+0x44f0>
   116ec:	movw	r2, #29852	; 0x749c
   116f0:	mov	r3, r0
   116f4:	mov	r0, #1
   116f8:	mov	r1, r4
   116fc:	movt	r2, #1
   11700:	bl	10ec0 <error@plt>
   11704:	movw	r0, #33108	; 0x8154
   11708:	movt	r0, #2
   1170c:	ldr	r0, [r0]
   11710:	b	11808 <__mempcpy_chk@plt+0x7f8>
   11714:	mov	r4, r5
   11718:	cmp	r4, #0
   1171c:	beq	116d4 <__mempcpy_chk@plt+0x6c4>
   11720:	cmp	r6, #0
   11724:	bne	11750 <__mempcpy_chk@plt+0x740>
   11728:	add	r2, sp, #24
   1172c:	mov	r0, #3
   11730:	mov	r1, r4
   11734:	bl	10fe0 <__xstat64@plt>
   11738:	cmp	r0, #0
   1173c:	bne	11b3c <__mempcpy_chk@plt+0xb2c>
   11740:	ldr	r0, [sp, #40]	; 0x28
   11744:	and	r0, r0, #61440	; 0xf000
   11748:	cmp	r0, #16384	; 0x4000
   1174c:	bne	11b7c <__mempcpy_chk@plt+0xb6c>
   11750:	movw	r1, #33108	; 0x8154
   11754:	ldrb	r0, [r4, #1]
   11758:	movt	r1, #2
   1175c:	ldr	r3, [r1]
   11760:	cmp	r0, #0
   11764:	beq	11784 <__mempcpy_chk@plt+0x774>
   11768:	cmp	r0, #47	; 0x2f
   1176c:	bne	11794 <__mempcpy_chk@plt+0x784>
   11770:	ldrb	r2, [r4, #2]
   11774:	ldrb	r1, [r3, #1]
   11778:	cmp	r2, #0
   1177c:	bne	11798 <__mempcpy_chk@plt+0x788>
   11780:	b	117d0 <__mempcpy_chk@plt+0x7c0>
   11784:	ldrb	r0, [r3, #1]
   11788:	cmp	r0, #47	; 0x2f
   1178c:	bne	117d8 <__mempcpy_chk@plt+0x7c8>
   11790:	b	117e8 <__mempcpy_chk@plt+0x7d8>
   11794:	ldrb	r1, [r3, #1]
   11798:	add	r2, r4, #2
   1179c:	add	r3, r3, #2
   117a0:	tst	r1, #255	; 0xff
   117a4:	beq	117e8 <__mempcpy_chk@plt+0x7d8>
   117a8:	uxtb	r1, r1
   117ac:	uxtb	r0, r0
   117b0:	cmp	r0, r1
   117b4:	bne	117e8 <__mempcpy_chk@plt+0x7d8>
   117b8:	ldrb	r0, [r2], #1
   117bc:	ldrb	r1, [r3], #1
   117c0:	cmp	r0, #0
   117c4:	bne	117a0 <__mempcpy_chk@plt+0x790>
   117c8:	cmp	r1, #0
   117cc:	beq	117d8 <__mempcpy_chk@plt+0x7c8>
   117d0:	cmp	r1, #47	; 0x2f
   117d4:	bne	117e8 <__mempcpy_chk@plt+0x7d8>
   117d8:	movw	r0, #33112	; 0x8158
   117dc:	movt	r0, #2
   117e0:	str	r4, [r0]
   117e4:	b	11814 <__mempcpy_chk@plt+0x804>
   117e8:	mov	r0, r4
   117ec:	bl	1278c <__mempcpy_chk@plt+0x177c>
   117f0:	movw	r0, #33108	; 0x8154
   117f4:	mov	r1, #0
   117f8:	movt	r0, #2
   117fc:	mov	r2, r0
   11800:	ldr	r0, [r0]
   11804:	str	r1, [r2]
   11808:	movw	r1, #33112	; 0x8158
   1180c:	movt	r1, #2
   11810:	str	r0, [r1]
   11814:	ldr	r1, [r9]
   11818:	mov	r0, #0
   1181c:	cmp	r1, sl
   11820:	bge	11a28 <__mempcpy_chk@plt+0xa18>
   11824:	ldr	r0, [sp, #20]
   11828:	movw	r6, #33092	; 0x8144
   1182c:	mov	sl, #1
   11830:	movt	r6, #2
   11834:	bic	r0, r0, #4
   11838:	str	r0, [sp, #8]
   1183c:	b	118ac <__mempcpy_chk@plt+0x89c>
   11840:	ldr	r1, [r6]
   11844:	mov	r0, r8
   11848:	bl	10dc4 <fputs_unlocked@plt>
   1184c:	movw	r0, #33106	; 0x8152
   11850:	mov	r1, #10
   11854:	movt	r0, #2
   11858:	ldrb	r0, [r0]
   1185c:	cmp	r0, #0
   11860:	ldr	r0, [r6]
   11864:	movwne	r1, #0
   11868:	ldr	r2, [r0, #20]
   1186c:	ldr	r3, [r0, #24]
   11870:	cmp	r2, r3
   11874:	bcs	11a1c <__mempcpy_chk@plt+0xa0c>
   11878:	add	r3, r2, #1
   1187c:	str	r3, [r0, #20]
   11880:	strb	r1, [r2]
   11884:	mov	r0, r8
   11888:	bl	1278c <__mempcpy_chk@plt+0x177c>
   1188c:	mov	r7, #1
   11890:	ldr	r0, [r9]
   11894:	and	sl, sl, r7
   11898:	add	r1, r0, #1
   1189c:	ldr	r0, [sp, #16]
   118a0:	str	r1, [r9]
   118a4:	cmp	r1, r0
   118a8:	bge	11a24 <__mempcpy_chk@plt+0xa14>
   118ac:	ldr	r0, [sp, #12]
   118b0:	ldr	r5, [r0, r1, lsl #2]
   118b4:	ldr	r1, [sp, #20]
   118b8:	mov	r0, r5
   118bc:	bl	11ecc <__mempcpy_chk@plt+0xebc>
   118c0:	mov	r4, r0
   118c4:	movw	r0, #33104	; 0x8150
   118c8:	movt	r0, #2
   118cc:	ldrb	r0, [r0]
   118d0:	cmp	r0, #1
   118d4:	bne	11950 <__mempcpy_chk@plt+0x940>
   118d8:	cmp	r4, #0
   118dc:	beq	11950 <__mempcpy_chk@plt+0x940>
   118e0:	ldr	r1, [sp, #8]
   118e4:	mov	r0, r4
   118e8:	bl	11ecc <__mempcpy_chk@plt+0xebc>
   118ec:	mov	r8, r0
   118f0:	mov	r0, r4
   118f4:	bl	1278c <__mempcpy_chk@plt+0x177c>
   118f8:	cmp	r8, #0
   118fc:	bne	1195c <__mempcpy_chk@plt+0x94c>
   11900:	movw	r0, #33105	; 0x8151
   11904:	mov	r7, #0
   11908:	movt	r0, #2
   1190c:	ldrb	r0, [r0]
   11910:	cmp	r0, #0
   11914:	bne	11890 <__mempcpy_chk@plt+0x880>
   11918:	bl	10f44 <__errno_location@plt>
   1191c:	ldr	r4, [r0]
   11920:	mov	r0, #0
   11924:	mov	r1, #3
   11928:	mov	r2, r5
   1192c:	mov	r7, #0
   11930:	bl	15500 <__mempcpy_chk@plt+0x44f0>
   11934:	movw	r2, #29852	; 0x749c
   11938:	mov	r3, r0
   1193c:	mov	r0, #0
   11940:	mov	r1, r4
   11944:	movt	r2, #1
   11948:	bl	10ec0 <error@plt>
   1194c:	b	11890 <__mempcpy_chk@plt+0x880>
   11950:	mov	r8, r4
   11954:	cmp	r8, #0
   11958:	beq	11900 <__mempcpy_chk@plt+0x8f0>
   1195c:	movw	r0, #33108	; 0x8154
   11960:	movt	r0, #2
   11964:	ldr	r1, [r0]
   11968:	cmp	r1, #0
   1196c:	beq	11840 <__mempcpy_chk@plt+0x830>
   11970:	movw	r0, #33112	; 0x8158
   11974:	movt	r0, #2
   11978:	ldr	r3, [r0]
   1197c:	cmp	r3, #0
   11980:	beq	11a00 <__mempcpy_chk@plt+0x9f0>
   11984:	ldrb	r0, [r3, #1]
   11988:	cmp	r0, #0
   1198c:	beq	119ac <__mempcpy_chk@plt+0x99c>
   11990:	cmp	r0, #47	; 0x2f
   11994:	bne	119bc <__mempcpy_chk@plt+0x9ac>
   11998:	ldrb	r7, [r3, #2]
   1199c:	ldrb	r2, [r8, #1]
   119a0:	cmp	r7, #0
   119a4:	bne	119c0 <__mempcpy_chk@plt+0x9b0>
   119a8:	b	119f8 <__mempcpy_chk@plt+0x9e8>
   119ac:	ldrb	r0, [r8, #1]
   119b0:	cmp	r0, #47	; 0x2f
   119b4:	bne	11a00 <__mempcpy_chk@plt+0x9f0>
   119b8:	b	11840 <__mempcpy_chk@plt+0x830>
   119bc:	ldrb	r2, [r8, #1]
   119c0:	add	r3, r3, #2
   119c4:	add	r5, r8, #2
   119c8:	tst	r2, #255	; 0xff
   119cc:	beq	11840 <__mempcpy_chk@plt+0x830>
   119d0:	uxtb	r2, r2
   119d4:	uxtb	r0, r0
   119d8:	cmp	r0, r2
   119dc:	bne	11840 <__mempcpy_chk@plt+0x830>
   119e0:	ldrb	r0, [r3], #1
   119e4:	ldrb	r2, [r5], #1
   119e8:	cmp	r0, #0
   119ec:	bne	119c8 <__mempcpy_chk@plt+0x9b8>
   119f0:	cmp	r2, #0
   119f4:	beq	11a00 <__mempcpy_chk@plt+0x9f0>
   119f8:	cmp	r2, #47	; 0x2f
   119fc:	bne	11840 <__mempcpy_chk@plt+0x830>
   11a00:	mov	r0, r8
   11a04:	mov	r2, #0
   11a08:	mov	r3, #0
   11a0c:	bl	11ba4 <__mempcpy_chk@plt+0xb94>
   11a10:	cmp	r0, #0
   11a14:	beq	11840 <__mempcpy_chk@plt+0x830>
   11a18:	b	1184c <__mempcpy_chk@plt+0x83c>
   11a1c:	bl	10fa4 <__overflow@plt>
   11a20:	b	11884 <__mempcpy_chk@plt+0x874>
   11a24:	eor	r0, sl, #1
   11a28:	sub	sp, fp, #28
   11a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a30:	cmn	r0, #3
   11a34:	bne	11a80 <__mempcpy_chk@plt+0xa70>
   11a38:	movw	r0, #33000	; 0x80e8
   11a3c:	movw	r2, #29037	; 0x716d
   11a40:	mov	r1, #0
   11a44:	movt	r0, #2
   11a48:	movt	r2, #1
   11a4c:	str	r1, [sp, #4]
   11a50:	movw	r1, #28982	; 0x7136
   11a54:	movt	r1, #1
   11a58:	ldr	r3, [r0]
   11a5c:	movw	r0, #33092	; 0x8144
   11a60:	str	r2, [sp]
   11a64:	movw	r2, #29023	; 0x715f
   11a68:	movt	r0, #2
   11a6c:	movt	r2, #1
   11a70:	ldr	r0, [r0]
   11a74:	bl	15f00 <__mempcpy_chk@plt+0x4ef0>
   11a78:	mov	r0, #0
   11a7c:	bl	10f20 <exit@plt>
   11a80:	cmn	r0, #2
   11a84:	bne	11ab4 <__mempcpy_chk@plt+0xaa4>
   11a88:	mov	r0, #0
   11a8c:	bl	11110 <__mempcpy_chk@plt+0x100>
   11a90:	movw	r1, #29051	; 0x717b
   11a94:	mov	r0, #0
   11a98:	mov	r2, #5
   11a9c:	movt	r1, #1
   11aa0:	bl	10e3c <dcgettext@plt>
   11aa4:	mov	r2, r0
   11aa8:	mov	r0, #0
   11aac:	mov	r1, #0
   11ab0:	bl	10ec0 <error@plt>
   11ab4:	mov	r0, #1
   11ab8:	bl	11110 <__mempcpy_chk@plt+0x100>
   11abc:	bl	10f44 <__errno_location@plt>
   11ac0:	ldr	r5, [r0]
   11ac4:	mov	r0, #0
   11ac8:	mov	r1, #3
   11acc:	mov	r2, r4
   11ad0:	bl	15500 <__mempcpy_chk@plt+0x44f0>
   11ad4:	movw	r2, #29852	; 0x749c
   11ad8:	mov	r3, r0
   11adc:	mov	r0, #1
   11ae0:	mov	r1, r5
   11ae4:	movt	r2, #1
   11ae8:	bl	10ec0 <error@plt>
   11aec:	bl	10f44 <__errno_location@plt>
   11af0:	movw	r1, #29506	; 0x7342
   11af4:	ldr	r4, [r0]
   11af8:	mov	r0, #0
   11afc:	mov	r2, #5
   11b00:	movt	r1, #1
   11b04:	bl	10e3c <dcgettext@plt>
   11b08:	mov	r5, r0
   11b0c:	mov	r0, #4
   11b10:	mov	r1, r7
   11b14:	bl	15284 <__mempcpy_chk@plt+0x4274>
   11b18:	mov	r3, r0
   11b1c:	mov	r0, #1
   11b20:	mov	r1, r4
   11b24:	mov	r2, r5
   11b28:	bl	10ec0 <error@plt>
   11b2c:	mov	r0, #0
   11b30:	mov	r1, #3
   11b34:	mov	r2, r4
   11b38:	b	11b88 <__mempcpy_chk@plt+0xb78>
   11b3c:	bl	10f44 <__errno_location@plt>
   11b40:	movw	r1, #29506	; 0x7342
   11b44:	ldr	r5, [r0]
   11b48:	mov	r0, #0
   11b4c:	mov	r2, #5
   11b50:	movt	r1, #1
   11b54:	bl	10e3c <dcgettext@plt>
   11b58:	mov	r6, r0
   11b5c:	mov	r0, #4
   11b60:	mov	r1, r4
   11b64:	bl	15284 <__mempcpy_chk@plt+0x4274>
   11b68:	mov	r3, r0
   11b6c:	mov	r0, #1
   11b70:	mov	r1, r5
   11b74:	mov	r2, r6
   11b78:	bl	10ec0 <error@plt>
   11b7c:	mov	r0, #0
   11b80:	mov	r1, #3
   11b84:	mov	r2, r8
   11b88:	bl	15500 <__mempcpy_chk@plt+0x44f0>
   11b8c:	movw	r2, #29852	; 0x749c
   11b90:	mov	r3, r0
   11b94:	mov	r0, #1
   11b98:	mov	r1, #20
   11b9c:	movt	r2, #1
   11ba0:	bl	10ec0 <error@plt>
   11ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ba8:	add	fp, sp, #28
   11bac:	sub	sp, sp, #4
   11bb0:	mov	r7, r1
   11bb4:	ldrb	r1, [r1, #1]
   11bb8:	mov	r6, r0
   11bbc:	ldrb	r0, [r0, #1]
   11bc0:	mov	r4, #0
   11bc4:	sub	r0, r0, #47	; 0x2f
   11bc8:	sub	r1, r1, #47	; 0x2f
   11bcc:	clz	r0, r0
   11bd0:	clz	r1, r1
   11bd4:	lsr	r0, r0, #5
   11bd8:	lsr	r1, r1, #5
   11bdc:	teq	r1, r0
   11be0:	bne	11ec0 <__mempcpy_chk@plt+0xeb0>
   11be4:	mov	sl, r3
   11be8:	ldrb	r3, [r7]
   11bec:	ldrb	r1, [r6]
   11bf0:	mov	r8, r2
   11bf4:	cmp	r3, #0
   11bf8:	beq	11c48 <__mempcpy_chk@plt+0xc38>
   11bfc:	mov	r0, #0
   11c00:	mov	r2, #1
   11c04:	tst	r1, #255	; 0xff
   11c08:	beq	11c70 <__mempcpy_chk@plt+0xc60>
   11c0c:	uxtb	r4, r1
   11c10:	uxtb	r5, r3
   11c14:	cmp	r5, r4
   11c18:	bne	11c70 <__mempcpy_chk@plt+0xc60>
   11c1c:	ldrb	r3, [r7, r2]
   11c20:	ldrb	r1, [r6, r2]
   11c24:	cmp	r4, #47	; 0x2f
   11c28:	moveq	r0, r2
   11c2c:	add	r2, r2, #1
   11c30:	cmp	r3, #0
   11c34:	bne	11c04 <__mempcpy_chk@plt+0xbf4>
   11c38:	sub	r2, r2, #1
   11c3c:	cmp	r1, #0
   11c40:	bne	11c58 <__mempcpy_chk@plt+0xc48>
   11c44:	b	11e34 <__mempcpy_chk@plt+0xe24>
   11c48:	mov	r2, #0
   11c4c:	mov	r0, #0
   11c50:	cmp	r1, #0
   11c54:	beq	11e34 <__mempcpy_chk@plt+0xe24>
   11c58:	cmp	r1, #47	; 0x2f
   11c5c:	moveq	r0, r2
   11c60:	cmp	r0, #0
   11c64:	bne	11c88 <__mempcpy_chk@plt+0xc78>
   11c68:	mov	r4, #0
   11c6c:	b	11ec0 <__mempcpy_chk@plt+0xeb0>
   11c70:	tst	r1, #255	; 0xff
   11c74:	uxtbeq	r1, r3
   11c78:	cmpeq	r1, #47	; 0x2f
   11c7c:	beq	11e30 <__mempcpy_chk@plt+0xe20>
   11c80:	cmp	r0, #0
   11c84:	beq	11c68 <__mempcpy_chk@plt+0xc58>
   11c88:	ldrb	r1, [r6, r0]!
   11c8c:	ldrb	r0, [r7, r0]!
   11c90:	mov	r5, r6
   11c94:	cmp	r1, #47	; 0x2f
   11c98:	sub	r1, r1, #47	; 0x2f
   11c9c:	addeq	r5, r5, #1
   11ca0:	cmp	r0, #47	; 0x2f
   11ca4:	clz	r1, r1
   11ca8:	addeq	r7, r7, #1
   11cac:	lsr	r1, r1, #5
   11cb0:	ldrb	r0, [r7]
   11cb4:	cmp	r0, #0
   11cb8:	beq	11cf4 <__mempcpy_chk@plt+0xce4>
   11cbc:	movw	r2, #33092	; 0x8144
   11cc0:	cmp	r8, #0
   11cc4:	str	r1, [sp]
   11cc8:	movt	r2, #2
   11ccc:	beq	11d34 <__mempcpy_chk@plt+0xd24>
   11cd0:	mov	r4, #1
   11cd4:	cmp	sl, #3
   11cd8:	bcc	11d54 <__mempcpy_chk@plt+0xd44>
   11cdc:	movw	r0, #11822	; 0x2e2e
   11ce0:	mov	r4, #0
   11ce4:	sub	sl, sl, #2
   11ce8:	strh	r0, [r8]
   11cec:	strb	r4, [r8, #2]!
   11cf0:	b	11d54 <__mempcpy_chk@plt+0xd44>
   11cf4:	ldrb	r0, [r6, r1]
   11cf8:	movw	r1, #29794	; 0x7462
   11cfc:	movt	r1, #1
   11d00:	cmp	r0, #0
   11d04:	moveq	r5, r1
   11d08:	cmp	r8, #0
   11d0c:	beq	11e44 <__mempcpy_chk@plt+0xe34>
   11d10:	mov	r0, r5
   11d14:	bl	10f38 <strlen@plt>
   11d18:	cmp	r0, sl
   11d1c:	bcs	11e88 <__mempcpy_chk@plt+0xe78>
   11d20:	add	r2, r0, #1
   11d24:	mov	r0, r8
   11d28:	mov	r1, r5
   11d2c:	bl	10e24 <memcpy@plt>
   11d30:	b	11ebc <__mempcpy_chk@plt+0xeac>
   11d34:	ldr	r1, [r2]
   11d38:	movw	r0, #29793	; 0x7461
   11d3c:	movt	r0, #1
   11d40:	bl	10dc4 <fputs_unlocked@plt>
   11d44:	movw	r2, #33092	; 0x8144
   11d48:	mov	r8, #0
   11d4c:	mov	r4, #0
   11d50:	movt	r2, #2
   11d54:	movw	r9, #29792	; 0x7460
   11d58:	movt	r9, #1
   11d5c:	b	11d6c <__mempcpy_chk@plt+0xd5c>
   11d60:	cmp	r0, #0
   11d64:	beq	11dc8 <__mempcpy_chk@plt+0xdb8>
   11d68:	add	r7, r7, #1
   11d6c:	ldrb	r0, [r7]
   11d70:	cmp	r0, #47	; 0x2f
   11d74:	bne	11d60 <__mempcpy_chk@plt+0xd50>
   11d78:	cmp	r8, #0
   11d7c:	beq	11da0 <__mempcpy_chk@plt+0xd90>
   11d80:	mov	r0, #1
   11d84:	cmp	sl, #4
   11d88:	bcc	11dbc <__mempcpy_chk@plt+0xdac>
   11d8c:	movw	r0, #11823	; 0x2e2f
   11d90:	sub	sl, sl, #3
   11d94:	movt	r0, #46	; 0x2e
   11d98:	str	r0, [r8], #3
   11d9c:	b	11db8 <__mempcpy_chk@plt+0xda8>
   11da0:	ldr	r1, [r2]
   11da4:	mov	r0, r9
   11da8:	bl	10dc4 <fputs_unlocked@plt>
   11dac:	movw	r2, #33092	; 0x8144
   11db0:	mov	r8, #0
   11db4:	movt	r2, #2
   11db8:	mov	r0, #0
   11dbc:	and	r1, r4, #1
   11dc0:	orr	r4, r0, r1
   11dc4:	b	11d68 <__mempcpy_chk@plt+0xd58>
   11dc8:	ldr	r0, [sp]
   11dcc:	ldrb	r0, [r6, r0]
   11dd0:	and	r6, r4, #1
   11dd4:	cmp	r0, #0
   11dd8:	beq	11e20 <__mempcpy_chk@plt+0xe10>
   11ddc:	cmp	r8, #0
   11de0:	beq	11e5c <__mempcpy_chk@plt+0xe4c>
   11de4:	cmp	sl, #1
   11de8:	mov	r4, #1
   11dec:	movhi	r0, #47	; 0x2f
   11df0:	movls	r6, #1
   11df4:	subhi	sl, sl, #1
   11df8:	strhhi	r0, [r8], #1
   11dfc:	mov	r0, r5
   11e00:	bl	10f38 <strlen@plt>
   11e04:	cmp	r0, sl
   11e08:	bcs	11e80 <__mempcpy_chk@plt+0xe70>
   11e0c:	add	r2, r0, #1
   11e10:	mov	r0, r8
   11e14:	mov	r1, r5
   11e18:	bl	10e24 <memcpy@plt>
   11e1c:	b	11e7c <__mempcpy_chk@plt+0xe6c>
   11e20:	mov	r4, #1
   11e24:	cmp	r6, #0
   11e28:	bne	11e88 <__mempcpy_chk@plt+0xe78>
   11e2c:	b	11ec0 <__mempcpy_chk@plt+0xeb0>
   11e30:	sub	r2, r2, #1
   11e34:	mov	r0, r2
   11e38:	cmp	r0, #0
   11e3c:	bne	11c88 <__mempcpy_chk@plt+0xc78>
   11e40:	b	11c68 <__mempcpy_chk@plt+0xc58>
   11e44:	movw	r0, #33092	; 0x8144
   11e48:	movt	r0, #2
   11e4c:	ldr	r1, [r0]
   11e50:	mov	r0, r5
   11e54:	bl	10dc4 <fputs_unlocked@plt>
   11e58:	b	11ebc <__mempcpy_chk@plt+0xeac>
   11e5c:	ldr	r1, [r2]
   11e60:	movw	r0, #30967	; 0x78f7
   11e64:	mov	r4, r2
   11e68:	movt	r0, #1
   11e6c:	bl	10dc4 <fputs_unlocked@plt>
   11e70:	ldr	r1, [r4]
   11e74:	mov	r0, r5
   11e78:	bl	10dc4 <fputs_unlocked@plt>
   11e7c:	mov	r4, #0
   11e80:	orrs	r0, r4, r6
   11e84:	beq	11ebc <__mempcpy_chk@plt+0xeac>
   11e88:	movw	r1, #29796	; 0x7464
   11e8c:	mov	r0, #0
   11e90:	mov	r2, #5
   11e94:	mov	r4, #0
   11e98:	movt	r1, #1
   11e9c:	bl	10e3c <dcgettext@plt>
   11ea0:	movw	r2, #29852	; 0x749c
   11ea4:	mov	r3, r0
   11ea8:	mov	r0, #0
   11eac:	mov	r1, #36	; 0x24
   11eb0:	movt	r2, #1
   11eb4:	bl	10ec0 <error@plt>
   11eb8:	b	11ec0 <__mempcpy_chk@plt+0xeb0>
   11ebc:	mov	r4, #1
   11ec0:	mov	r0, r4
   11ec4:	sub	sp, fp, #28
   11ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ed0:	add	fp, sp, #28
   11ed4:	sub	sp, sp, #180	; 0xb4
   11ed8:	sub	sp, sp, #3072	; 0xc00
   11edc:	and	r7, r1, #3
   11ee0:	mov	r8, r0
   11ee4:	sub	r0, r7, #1
   11ee8:	tst	r7, r0
   11eec:	bne	11f78 <__mempcpy_chk@plt+0xf68>
   11ef0:	cmp	r8, #0
   11ef4:	beq	11f78 <__mempcpy_chk@plt+0xf68>
   11ef8:	ldrb	r0, [r8]
   11efc:	cmp	r0, #0
   11f00:	beq	11f94 <__mempcpy_chk@plt+0xf84>
   11f04:	mov	r4, r1
   11f08:	mov	r1, #1024	; 0x400
   11f0c:	sub	lr, fp, #1024	; 0x400
   11f10:	cmp	r0, #47	; 0x2f
   11f14:	str	r1, [fp, #-1060]	; 0xfffffbdc
   11f18:	str	r1, [sp, #52]	; 0x34
   11f1c:	str	r1, [sp, #1188]	; 0x4a4
   11f20:	add	r1, sp, #1184	; 0x4a0
   11f24:	sub	r2, lr, #40	; 0x28
   11f28:	add	r1, r1, #8
   11f2c:	add	r2, r2, #8
   11f30:	str	r1, [sp, #16]
   11f34:	str	r1, [sp, #1184]	; 0x4a0
   11f38:	add	r1, sp, #48	; 0x30
   11f3c:	str	r2, [sp, #12]
   11f40:	str	r2, [fp, #-1064]	; 0xfffffbd8
   11f44:	add	r5, r1, #8
   11f48:	mov	r0, r5
   11f4c:	str	r5, [sp, #48]	; 0x30
   11f50:	str	r5, [sp, #8]
   11f54:	bne	11fa0 <__mempcpy_chk@plt+0xf90>
   11f58:	mov	r1, r8
   11f5c:	mov	r2, #0
   11f60:	mov	r3, #1024	; 0x400
   11f64:	bl	11010 <__mempcpy_chk@plt>
   11f68:	mov	r6, r0
   11f6c:	mov	r0, #47	; 0x2f
   11f70:	strb	r0, [r6], #1
   11f74:	b	11fc0 <__mempcpy_chk@plt+0xfb0>
   11f78:	bl	10f44 <__errno_location@plt>
   11f7c:	mov	r1, #22
   11f80:	mov	r4, #0
   11f84:	str	r1, [r0]
   11f88:	mov	r0, r4
   11f8c:	sub	sp, fp, #28
   11f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f94:	bl	10f44 <__errno_location@plt>
   11f98:	mov	r1, #2
   11f9c:	b	11f80 <__mempcpy_chk@plt+0xf70>
   11fa0:	mov	r1, #1024	; 0x400
   11fa4:	bl	10f14 <getcwd@plt>
   11fa8:	cmp	r0, #0
   11fac:	beq	124dc <__mempcpy_chk@plt+0x14cc>
   11fb0:	mov	r0, r5
   11fb4:	mov	r1, #0
   11fb8:	bl	10e60 <rawmemchr@plt>
   11fbc:	mov	r6, r0
   11fc0:	ldrb	r0, [r8]
   11fc4:	cmp	r0, #0
   11fc8:	beq	124a0 <__mempcpy_chk@plt+0x1490>
   11fcc:	and	r1, r4, #4
   11fd0:	add	r9, sp, #48	; 0x30
   11fd4:	str	r7, [sp, #32]
   11fd8:	str	r1, [sp, #40]	; 0x28
   11fdc:	mov	r1, #0
   11fe0:	str	r1, [sp, #24]
   11fe4:	mov	r1, #0
   11fe8:	str	r1, [sp, #36]	; 0x24
   11fec:	mov	r1, #0
   11ff0:	str	r1, [sp, #20]
   11ff4:	b	12010 <__mempcpy_chk@plt+0x1000>
   11ff8:	cmp	r0, #0
   11ffc:	beq	12318 <__mempcpy_chk@plt+0x1308>
   12000:	mov	r8, sl
   12004:	ldrb	r0, [r8]
   12008:	cmp	r0, #0
   1200c:	beq	124a8 <__mempcpy_chk@plt+0x1498>
   12010:	uxtb	r1, r0
   12014:	cmp	r1, #47	; 0x2f
   12018:	bne	12028 <__mempcpy_chk@plt+0x1018>
   1201c:	ldrb	r0, [r8, #1]!
   12020:	cmp	r0, #47	; 0x2f
   12024:	beq	1201c <__mempcpy_chk@plt+0x100c>
   12028:	mov	r1, r0
   1202c:	mov	sl, r8
   12030:	b	12038 <__mempcpy_chk@plt+0x1028>
   12034:	ldrb	r1, [sl, #1]!
   12038:	uxtb	r1, r1
   1203c:	cmp	r1, #0
   12040:	cmpne	r1, #47	; 0x2f
   12044:	bne	12034 <__mempcpy_chk@plt+0x1024>
   12048:	sub	r2, sl, r8
   1204c:	cmp	r2, #1
   12050:	beq	12068 <__mempcpy_chk@plt+0x1058>
   12054:	cmp	r2, #2
   12058:	beq	12078 <__mempcpy_chk@plt+0x1068>
   1205c:	cmp	r2, #0
   12060:	bne	120c0 <__mempcpy_chk@plt+0x10b0>
   12064:	b	124a8 <__mempcpy_chk@plt+0x1498>
   12068:	uxtb	r0, r0
   1206c:	cmp	r0, #46	; 0x2e
   12070:	bne	120c0 <__mempcpy_chk@plt+0x10b0>
   12074:	b	12000 <__mempcpy_chk@plt+0xff0>
   12078:	uxtb	r0, r0
   1207c:	cmp	r0, #46	; 0x2e
   12080:	bne	120c0 <__mempcpy_chk@plt+0x10b0>
   12084:	ldrb	r0, [r8, #1]
   12088:	cmp	r0, #46	; 0x2e
   1208c:	bne	120c0 <__mempcpy_chk@plt+0x10b0>
   12090:	add	r0, r5, #1
   12094:	cmp	r6, r0
   12098:	bls	12000 <__mempcpy_chk@plt+0xff0>
   1209c:	sub	r0, r6, #1
   120a0:	mov	r6, r0
   120a4:	cmp	r0, r5
   120a8:	bls	12000 <__mempcpy_chk@plt+0xff0>
   120ac:	mov	r0, r6
   120b0:	ldrb	r1, [r0, #-1]!
   120b4:	cmp	r1, #47	; 0x2f
   120b8:	bne	120a0 <__mempcpy_chk@plt+0x1090>
   120bc:	b	12000 <__mempcpy_chk@plt+0xff0>
   120c0:	ldrb	r0, [r6, #-1]
   120c4:	add	r4, r2, #2
   120c8:	str	r2, [sp, #44]	; 0x2c
   120cc:	cmp	r0, #47	; 0x2f
   120d0:	movne	r0, #47	; 0x2f
   120d4:	strbne	r0, [r6], #1
   120d8:	ldr	r0, [sp, #52]	; 0x34
   120dc:	add	r0, r5, r0
   120e0:	sub	r0, r0, r6
   120e4:	cmp	r0, r4
   120e8:	bcs	12120 <__mempcpy_chk@plt+0x1110>
   120ec:	mov	r0, r9
   120f0:	bl	159d4 <__mempcpy_chk@plt+0x49c4>
   120f4:	cmp	r0, #0
   120f8:	beq	125a0 <__mempcpy_chk@plt+0x1590>
   120fc:	sub	r0, r6, r5
   12100:	ldr	r5, [sp, #48]	; 0x30
   12104:	ldr	r1, [sp, #52]	; 0x34
   12108:	add	r6, r5, r0
   1210c:	add	r0, r5, r1
   12110:	sub	r0, r0, r6
   12114:	cmp	r0, r4
   12118:	bcc	120ec <__mempcpy_chk@plt+0x10dc>
   1211c:	ldr	r2, [sp, #44]	; 0x2c
   12120:	mov	r0, r6
   12124:	mov	r1, r8
   12128:	mvn	r3, #0
   1212c:	bl	11010 <__mempcpy_chk@plt>
   12130:	mov	r6, r0
   12134:	mov	r0, #0
   12138:	strb	r0, [r6]
   1213c:	ldr	r0, [sp, #40]	; 0x28
   12140:	cmp	r0, #0
   12144:	bne	121a8 <__mempcpy_chk@plt+0x1198>
   12148:	ldr	r0, [sp, #1188]	; 0x4a4
   1214c:	ldr	r7, [sp, #1184]	; 0x4a0
   12150:	sub	r9, r0, #1
   12154:	mov	r0, r5
   12158:	mov	r1, r7
   1215c:	mov	r2, r9
   12160:	bl	10e78 <readlink@plt>
   12164:	cmp	r0, r9
   12168:	blt	12180 <__mempcpy_chk@plt+0x1170>
   1216c:	add	r0, sp, #1184	; 0x4a0
   12170:	bl	15964 <__mempcpy_chk@plt+0x4954>
   12174:	cmp	r0, #0
   12178:	bne	12148 <__mempcpy_chk@plt+0x1138>
   1217c:	b	125a0 <__mempcpy_chk@plt+0x1590>
   12180:	mov	r4, r0
   12184:	cmp	r0, #0
   12188:	add	r9, sp, #48	; 0x30
   1218c:	bmi	121a8 <__mempcpy_chk@plt+0x1198>
   12190:	ldr	r0, [sp, #24]
   12194:	cmp	r0, #19
   12198:	bgt	12228 <__mempcpy_chk@plt+0x1218>
   1219c:	add	r0, r0, #1
   121a0:	str	r0, [sp, #24]
   121a4:	b	12388 <__mempcpy_chk@plt+0x1378>
   121a8:	ldr	r7, [sp, #32]
   121ac:	cmp	r7, #2
   121b0:	beq	12000 <__mempcpy_chk@plt+0xff0>
   121b4:	ldrb	r0, [sl]
   121b8:	cmp	r0, #47	; 0x2f
   121bc:	bne	122f8 <__mempcpy_chk@plt+0x12e8>
   121c0:	mov	r2, sl
   121c4:	mov	r1, r2
   121c8:	ldrb	r3, [r2, #1]!
   121cc:	cmp	r3, #47	; 0x2f
   121d0:	beq	121c4 <__mempcpy_chk@plt+0x11b4>
   121d4:	cmp	r3, #46	; 0x2e
   121d8:	bne	122f0 <__mempcpy_chk@plt+0x12e0>
   121dc:	add	r2, r1, #2
   121e0:	ldrb	r3, [r2]
   121e4:	cmp	r3, #47	; 0x2f
   121e8:	beq	121c4 <__mempcpy_chk@plt+0x11b4>
   121ec:	cmp	r3, #0
   121f0:	beq	1220c <__mempcpy_chk@plt+0x11fc>
   121f4:	cmp	r3, #46	; 0x2e
   121f8:	bne	122f8 <__mempcpy_chk@plt+0x12e8>
   121fc:	ldrb	r1, [r1, #3]
   12200:	cmp	r1, #47	; 0x2f
   12204:	cmpne	r1, #0
   12208:	bne	122f8 <__mempcpy_chk@plt+0x12e8>
   1220c:	mov	r0, #47	; 0x2f
   12210:	mov	r1, r5
   12214:	mov	r2, #0
   12218:	mov	r3, #512	; 0x200
   1221c:	strh	r0, [r6]
   12220:	mvn	r0, #99	; 0x63
   12224:	b	12328 <__mempcpy_chk@plt+0x1318>
   12228:	ldrb	r0, [r8]
   1222c:	add	lr, sp, #1024	; 0x400
   12230:	add	r2, lr, #56	; 0x38
   12234:	cmp	r0, #0
   12238:	beq	12388 <__mempcpy_chk@plt+0x1378>
   1223c:	ldr	r9, [sp, #44]	; 0x2c
   12240:	mov	r0, #0
   12244:	mov	r1, r5
   12248:	strb	r0, [r6, -r9]
   1224c:	ldrb	r0, [r5]
   12250:	cmp	r0, #0
   12254:	movw	r0, #29794	; 0x7462
   12258:	movt	r0, #1
   1225c:	moveq	r1, r0
   12260:	mov	r0, #3
   12264:	bl	10fe0 <__xstat64@plt>
   12268:	cmp	r0, #0
   1226c:	bne	125b0 <__mempcpy_chk@plt+0x15a0>
   12270:	rsb	r0, r9, #0
   12274:	ldr	r9, [sp, #20]
   12278:	ldrb	r1, [r8]
   1227c:	cmp	r9, #0
   12280:	strb	r1, [r6, r0]
   12284:	bne	122bc <__mempcpy_chk@plt+0x12ac>
   12288:	movw	r0, #15160	; 0x3b38
   1228c:	movw	r2, #15000	; 0x3a98
   12290:	movw	r3, #15056	; 0x3ad0
   12294:	mov	r1, #0
   12298:	movt	r0, #1
   1229c:	movt	r2, #1
   122a0:	movt	r3, #1
   122a4:	str	r0, [sp]
   122a8:	mov	r0, #7
   122ac:	bl	12c5c <__mempcpy_chk@plt+0x1c4c>
   122b0:	mov	r9, r0
   122b4:	cmp	r0, #0
   122b8:	beq	125a0 <__mempcpy_chk@plt+0x1590>
   122bc:	add	lr, sp, #1024	; 0x400
   122c0:	mov	r0, r9
   122c4:	mov	r1, r8
   122c8:	add	r2, lr, #56	; 0x38
   122cc:	bl	1273c <__mempcpy_chk@plt+0x172c>
   122d0:	cmp	r0, #0
   122d4:	str	r9, [sp, #20]
   122d8:	beq	12374 <__mempcpy_chk@plt+0x1364>
   122dc:	ldr	r7, [sp, #32]
   122e0:	cmp	r7, #2
   122e4:	bne	125a4 <__mempcpy_chk@plt+0x1594>
   122e8:	mov	r8, sl
   122ec:	b	1245c <__mempcpy_chk@plt+0x144c>
   122f0:	cmp	r3, #0
   122f4:	beq	1220c <__mempcpy_chk@plt+0x11fc>
   122f8:	ldr	r1, [sp, #40]	; 0x28
   122fc:	cmp	r1, #0
   12300:	bne	11ff8 <__mempcpy_chk@plt+0xfe8>
   12304:	bl	10f44 <__errno_location@plt>
   12308:	ldr	r0, [r0]
   1230c:	cmp	r0, #22
   12310:	beq	12000 <__mempcpy_chk@plt+0xff0>
   12314:	b	12334 <__mempcpy_chk@plt+0x1324>
   12318:	mvn	r0, #99	; 0x63
   1231c:	mov	r1, r5
   12320:	mov	r2, #0
   12324:	mov	r3, #512	; 0x200
   12328:	bl	10e0c <faccessat@plt>
   1232c:	cmp	r0, #0
   12330:	beq	12000 <__mempcpy_chk@plt+0xff0>
   12334:	mov	r4, #1
   12338:	cmp	r7, #1
   1233c:	bne	124c8 <__mempcpy_chk@plt+0x14b8>
   12340:	bl	10f44 <__errno_location@plt>
   12344:	ldr	r0, [r0]
   12348:	cmp	r0, #2
   1234c:	bne	124c8 <__mempcpy_chk@plt+0x14b8>
   12350:	movw	r1, #30967	; 0x78f7
   12354:	mov	r0, sl
   12358:	movt	r1, #1
   1235c:	bl	11004 <strspn@plt>
   12360:	ldrb	r0, [sl, r0]
   12364:	mov	r8, sl
   12368:	cmp	r0, #0
   1236c:	beq	12004 <__mempcpy_chk@plt+0xff4>
   12370:	b	124c8 <__mempcpy_chk@plt+0x14b8>
   12374:	add	lr, sp, #1024	; 0x400
   12378:	mov	r0, r9
   1237c:	mov	r1, r8
   12380:	add	r2, lr, #56	; 0x38
   12384:	bl	126c0 <__mempcpy_chk@plt+0x16b0>
   12388:	mov	r0, #0
   1238c:	strb	r0, [r7, r4]
   12390:	ldr	r0, [sp, #36]	; 0x24
   12394:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   12398:	tst	r0, #1
   1239c:	ldr	r0, [sp, #28]
   123a0:	subne	r0, sl, r8
   123a4:	str	r0, [sp, #28]
   123a8:	mov	r0, sl
   123ac:	bl	10f38 <strlen@plt>
   123b0:	mvn	r1, r4
   123b4:	cmp	r0, r1
   123b8:	bhi	125a0 <__mempcpy_chk@plt+0x1590>
   123bc:	str	r0, [sp, #44]	; 0x2c
   123c0:	add	r9, r0, r4
   123c4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   123c8:	cmp	r0, r9
   123cc:	bhi	123f4 <__mempcpy_chk@plt+0x13e4>
   123d0:	sub	lr, fp, #1024	; 0x400
   123d4:	sub	r0, lr, #40	; 0x28
   123d8:	bl	159d4 <__mempcpy_chk@plt+0x49c4>
   123dc:	cmp	r0, #0
   123e0:	beq	125a0 <__mempcpy_chk@plt+0x1590>
   123e4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   123e8:	cmp	r0, r9
   123ec:	bls	123d0 <__mempcpy_chk@plt+0x13c0>
   123f0:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   123f4:	ldr	r0, [sp, #36]	; 0x24
   123f8:	ldr	r1, [sp, #44]	; 0x2c
   123fc:	tst	r0, #1
   12400:	ldr	r0, [sp, #28]
   12404:	add	r2, r1, #1
   12408:	addne	sl, r8, r0
   1240c:	add	r0, r8, r4
   12410:	mov	r1, sl
   12414:	bl	10df4 <memmove@plt>
   12418:	mov	r0, r8
   1241c:	mov	r1, r7
   12420:	mov	r2, r4
   12424:	bl	10e24 <memcpy@plt>
   12428:	ldrb	r0, [r7]
   1242c:	cmp	r0, #47	; 0x2f
   12430:	bne	12464 <__mempcpy_chk@plt+0x1454>
   12434:	mov	r0, r5
   12438:	mov	r1, r7
   1243c:	mov	r2, #0
   12440:	mvn	r3, #0
   12444:	bl	11010 <__mempcpy_chk@plt>
   12448:	mov	r6, r0
   1244c:	mov	r0, #47	; 0x2f
   12450:	strb	r0, [r6], #1
   12454:	mov	r0, #1
   12458:	str	r0, [sp, #36]	; 0x24
   1245c:	add	r9, sp, #48	; 0x30
   12460:	b	12004 <__mempcpy_chk@plt+0xff4>
   12464:	add	r0, r5, #1
   12468:	mov	r1, #1
   1246c:	add	r9, sp, #48	; 0x30
   12470:	cmp	r6, r0
   12474:	str	r1, [sp, #36]	; 0x24
   12478:	bls	12004 <__mempcpy_chk@plt+0xff4>
   1247c:	sub	r0, r6, #1
   12480:	mov	r6, r0
   12484:	cmp	r0, r5
   12488:	bls	12004 <__mempcpy_chk@plt+0xff4>
   1248c:	mov	r0, r6
   12490:	ldrb	r1, [r0, #-1]!
   12494:	cmp	r1, #47	; 0x2f
   12498:	bne	12480 <__mempcpy_chk@plt+0x1470>
   1249c:	b	12004 <__mempcpy_chk@plt+0xff4>
   124a0:	mov	r0, #0
   124a4:	str	r0, [sp, #20]
   124a8:	add	r0, r5, #1
   124ac:	cmp	r6, r0
   124b0:	bls	124c4 <__mempcpy_chk@plt+0x14b4>
   124b4:	mov	r0, r6
   124b8:	ldrb	r1, [r0, #-1]!
   124bc:	cmp	r1, #47	; 0x2f
   124c0:	moveq	r6, r0
   124c4:	mov	r4, #0
   124c8:	ldr	r0, [sp, #20]
   124cc:	cmp	r0, #0
   124d0:	beq	12534 <__mempcpy_chk@plt+0x1524>
   124d4:	bl	12f60 <__mempcpy_chk@plt+0x1f50>
   124d8:	b	12534 <__mempcpy_chk@plt+0x1524>
   124dc:	bl	10f44 <__errno_location@plt>
   124e0:	ldr	r5, [sp, #8]
   124e4:	mov	r6, r0
   124e8:	add	r9, sp, #48	; 0x30
   124ec:	ldr	r0, [r6]
   124f0:	cmp	r0, #34	; 0x22
   124f4:	bne	12524 <__mempcpy_chk@plt+0x1514>
   124f8:	mov	r0, r9
   124fc:	bl	15964 <__mempcpy_chk@plt+0x4954>
   12500:	cmp	r0, #0
   12504:	beq	125a0 <__mempcpy_chk@plt+0x1590>
   12508:	ldr	r5, [sp, #48]	; 0x30
   1250c:	ldr	r1, [sp, #52]	; 0x34
   12510:	mov	r0, r5
   12514:	bl	10f14 <getcwd@plt>
   12518:	cmp	r0, #0
   1251c:	beq	124ec <__mempcpy_chk@plt+0x14dc>
   12520:	b	11fb0 <__mempcpy_chk@plt+0xfa0>
   12524:	cmp	r0, #12
   12528:	beq	125a0 <__mempcpy_chk@plt+0x1590>
   1252c:	mov	r4, #1
   12530:	mov	r6, r5
   12534:	ldr	r1, [sp, #12]
   12538:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   1253c:	ldr	r7, [sp, #16]
   12540:	cmp	r0, r1
   12544:	beq	1254c <__mempcpy_chk@plt+0x153c>
   12548:	bl	1278c <__mempcpy_chk@plt+0x177c>
   1254c:	ldr	r0, [sp, #1184]	; 0x4a0
   12550:	cmp	r0, r7
   12554:	beq	1255c <__mempcpy_chk@plt+0x154c>
   12558:	bl	1278c <__mempcpy_chk@plt+0x177c>
   1255c:	cmp	r4, #0
   12560:	beq	12580 <__mempcpy_chk@plt+0x1570>
   12564:	ldr	r0, [sp, #48]	; 0x30
   12568:	ldr	r1, [sp, #8]
   1256c:	mov	r4, #0
   12570:	cmp	r0, r1
   12574:	beq	11f88 <__mempcpy_chk@plt+0xf78>
   12578:	bl	1278c <__mempcpy_chk@plt+0x177c>
   1257c:	b	11f88 <__mempcpy_chk@plt+0xf78>
   12580:	mov	r0, #0
   12584:	strb	r0, [r6], -r5
   12588:	add	r0, sp, #48	; 0x30
   1258c:	add	r1, r6, #1
   12590:	bl	158f8 <__mempcpy_chk@plt+0x48e8>
   12594:	mov	r4, r0
   12598:	cmp	r0, #0
   1259c:	bne	11f88 <__mempcpy_chk@plt+0xf78>
   125a0:	bl	16670 <__mempcpy_chk@plt+0x5660>
   125a4:	bl	10f44 <__errno_location@plt>
   125a8:	mov	r1, #40	; 0x28
   125ac:	str	r1, [r0]
   125b0:	mov	r4, #1
   125b4:	b	124c8 <__mempcpy_chk@plt+0x14b8>
   125b8:	movw	r1, #33116	; 0x815c
   125bc:	movt	r1, #2
   125c0:	str	r0, [r1]
   125c4:	bx	lr
   125c8:	movw	r1, #33120	; 0x8160
   125cc:	movt	r1, #2
   125d0:	strb	r0, [r1]
   125d4:	bx	lr
   125d8:	push	{r4, r5, r6, sl, fp, lr}
   125dc:	add	fp, sp, #16
   125e0:	sub	sp, sp, #8
   125e4:	movw	r0, #33092	; 0x8144
   125e8:	movt	r0, #2
   125ec:	ldr	r0, [r0]
   125f0:	bl	1678c <__mempcpy_chk@plt+0x577c>
   125f4:	cmp	r0, #0
   125f8:	beq	12620 <__mempcpy_chk@plt+0x1610>
   125fc:	movw	r0, #33120	; 0x8160
   12600:	movt	r0, #2
   12604:	ldrb	r0, [r0]
   12608:	cmp	r0, #0
   1260c:	beq	12640 <__mempcpy_chk@plt+0x1630>
   12610:	bl	10f44 <__errno_location@plt>
   12614:	ldr	r0, [r0]
   12618:	cmp	r0, #32
   1261c:	bne	12640 <__mempcpy_chk@plt+0x1630>
   12620:	movw	r0, #33088	; 0x8140
   12624:	movt	r0, #2
   12628:	ldr	r0, [r0]
   1262c:	bl	1678c <__mempcpy_chk@plt+0x577c>
   12630:	cmp	r0, #0
   12634:	subeq	sp, fp, #16
   12638:	popeq	{r4, r5, r6, sl, fp, pc}
   1263c:	b	126b0 <__mempcpy_chk@plt+0x16a0>
   12640:	movw	r1, #29836	; 0x748c
   12644:	mov	r0, #0
   12648:	mov	r2, #5
   1264c:	movt	r1, #1
   12650:	bl	10e3c <dcgettext@plt>
   12654:	mov	r4, r0
   12658:	movw	r0, #33116	; 0x815c
   1265c:	movt	r0, #2
   12660:	ldr	r6, [r0]
   12664:	bl	10f44 <__errno_location@plt>
   12668:	ldr	r5, [r0]
   1266c:	cmp	r6, #0
   12670:	bne	1268c <__mempcpy_chk@plt+0x167c>
   12674:	movw	r2, #29852	; 0x749c
   12678:	mov	r0, #0
   1267c:	mov	r1, r5
   12680:	mov	r3, r4
   12684:	movt	r2, #1
   12688:	b	126ac <__mempcpy_chk@plt+0x169c>
   1268c:	mov	r0, r6
   12690:	bl	15424 <__mempcpy_chk@plt+0x4414>
   12694:	movw	r2, #29848	; 0x7498
   12698:	mov	r3, r0
   1269c:	str	r4, [sp]
   126a0:	mov	r0, #0
   126a4:	mov	r1, r5
   126a8:	movt	r2, #1
   126ac:	bl	10ec0 <error@plt>
   126b0:	movw	r0, #33004	; 0x80ec
   126b4:	movt	r0, #2
   126b8:	ldr	r0, [r0]
   126bc:	bl	10e18 <_exit@plt>
   126c0:	push	{r4, r5, r6, r7, fp, lr}
   126c4:	add	fp, sp, #16
   126c8:	cmp	r0, #0
   126cc:	beq	12734 <__mempcpy_chk@plt+0x1724>
   126d0:	mov	r5, r0
   126d4:	mov	r0, #24
   126d8:	mov	r6, r2
   126dc:	mov	r7, r1
   126e0:	bl	16134 <__mempcpy_chk@plt+0x5124>
   126e4:	mov	r4, r0
   126e8:	mov	r0, r7
   126ec:	bl	16638 <__mempcpy_chk@plt+0x5628>
   126f0:	str	r0, [r4]
   126f4:	ldrd	r0, [r6, #96]	; 0x60
   126f8:	str	r0, [r4, #8]
   126fc:	str	r1, [r4, #12]
   12700:	ldrd	r0, [r6]
   12704:	str	r1, [r4, #20]
   12708:	str	r0, [r4, #16]
   1270c:	mov	r0, r5
   12710:	mov	r1, r4
   12714:	bl	137b0 <__mempcpy_chk@plt+0x27a0>
   12718:	cmp	r0, #0
   1271c:	beq	12738 <__mempcpy_chk@plt+0x1728>
   12720:	cmp	r0, r4
   12724:	beq	12734 <__mempcpy_chk@plt+0x1724>
   12728:	mov	r0, r4
   1272c:	pop	{r4, r5, r6, r7, fp, lr}
   12730:	b	13b38 <__mempcpy_chk@plt+0x2b28>
   12734:	pop	{r4, r5, r6, r7, fp, pc}
   12738:	bl	16670 <__mempcpy_chk@plt+0x5660>
   1273c:	cmp	r0, #0
   12740:	moveq	r0, #0
   12744:	bxeq	lr
   12748:	push	{r4, r5, fp, lr}
   1274c:	add	fp, sp, #8
   12750:	sub	sp, sp, #24
   12754:	str	r1, [sp]
   12758:	mov	ip, sp
   1275c:	mov	r1, sp
   12760:	ldrd	r4, [r2, #96]	; 0x60
   12764:	add	r3, ip, #8
   12768:	add	ip, ip, #16
   1276c:	strd	r4, [r3]
   12770:	ldrd	r2, [r2]
   12774:	strd	r2, [ip]
   12778:	bl	129a8 <__mempcpy_chk@plt+0x1998>
   1277c:	cmp	r0, #0
   12780:	movwne	r0, #1
   12784:	sub	sp, fp, #8
   12788:	pop	{r4, r5, fp, pc}
   1278c:	push	{r4, r5, r6, sl, fp, lr}
   12790:	add	fp, sp, #16
   12794:	mov	r4, r0
   12798:	bl	10f44 <__errno_location@plt>
   1279c:	ldr	r6, [r0]
   127a0:	mov	r5, r0
   127a4:	mov	r0, r4
   127a8:	bl	10e00 <free@plt>
   127ac:	str	r6, [r5]
   127b0:	pop	{r4, r5, r6, sl, fp, pc}
   127b4:	andeq	r0, r0, r0
   127b8:	ldr	r0, [r0, #8]
   127bc:	bx	lr
   127c0:	ldr	r0, [r0, #12]
   127c4:	bx	lr
   127c8:	ldr	r0, [r0, #16]
   127cc:	bx	lr
   127d0:	ldm	r0, {r2, ip}
   127d4:	mov	r0, #0
   127d8:	cmp	r2, ip
   127dc:	bxcs	lr
   127e0:	mov	r0, #0
   127e4:	b	127f4 <__mempcpy_chk@plt+0x17e4>
   127e8:	add	r2, r2, #8
   127ec:	cmp	r2, ip
   127f0:	bcs	12824 <__mempcpy_chk@plt+0x1814>
   127f4:	ldr	r1, [r2]
   127f8:	cmp	r1, #0
   127fc:	beq	127e8 <__mempcpy_chk@plt+0x17d8>
   12800:	mov	r3, #0
   12804:	mov	r1, r2
   12808:	ldr	r1, [r1, #4]
   1280c:	add	r3, r3, #1
   12810:	cmp	r1, #0
   12814:	bne	12808 <__mempcpy_chk@plt+0x17f8>
   12818:	cmp	r3, r0
   1281c:	movhi	r0, r3
   12820:	b	127e8 <__mempcpy_chk@plt+0x17d8>
   12824:	bx	lr
   12828:	push	{fp, lr}
   1282c:	mov	fp, sp
   12830:	ldm	r0, {r3, ip}
   12834:	mov	lr, #0
   12838:	mov	r1, #0
   1283c:	cmp	r3, ip
   12840:	bcs	12884 <__mempcpy_chk@plt+0x1874>
   12844:	mov	r1, #0
   12848:	mov	lr, #0
   1284c:	b	1285c <__mempcpy_chk@plt+0x184c>
   12850:	add	r3, r3, #8
   12854:	cmp	r3, ip
   12858:	bcs	12884 <__mempcpy_chk@plt+0x1874>
   1285c:	ldr	r2, [r3]
   12860:	cmp	r2, #0
   12864:	beq	12850 <__mempcpy_chk@plt+0x1840>
   12868:	mov	r2, r3
   1286c:	ldr	r2, [r2, #4]
   12870:	add	r1, r1, #1
   12874:	cmp	r2, #0
   12878:	bne	1286c <__mempcpy_chk@plt+0x185c>
   1287c:	add	lr, lr, #1
   12880:	b	12850 <__mempcpy_chk@plt+0x1840>
   12884:	ldr	r2, [r0, #12]
   12888:	cmp	lr, r2
   1288c:	bne	128a4 <__mempcpy_chk@plt+0x1894>
   12890:	ldr	r2, [r0, #16]
   12894:	mov	r0, #1
   12898:	cmp	r1, r2
   1289c:	movne	r0, #0
   128a0:	pop	{fp, pc}
   128a4:	mov	r0, #0
   128a8:	pop	{fp, pc}
   128ac:	nop	{0}
   128b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   128b4:	add	fp, sp, #24
   128b8:	sub	sp, sp, #8
   128bc:	ldr	r6, [r0]
   128c0:	ldmib	r0, {r2, r7, r8}
   128c4:	ldr	r3, [r0, #16]
   128c8:	mov	r4, r1
   128cc:	mov	r5, #0
   128d0:	cmp	r6, r2
   128d4:	bcs	1291c <__mempcpy_chk@plt+0x190c>
   128d8:	mov	r5, #0
   128dc:	b	128ec <__mempcpy_chk@plt+0x18dc>
   128e0:	add	r6, r6, #8
   128e4:	cmp	r6, r2
   128e8:	bcs	1291c <__mempcpy_chk@plt+0x190c>
   128ec:	ldr	r0, [r6]
   128f0:	cmp	r0, #0
   128f4:	beq	128e0 <__mempcpy_chk@plt+0x18d0>
   128f8:	mov	r0, #0
   128fc:	mov	r1, r6
   12900:	ldr	r1, [r1, #4]
   12904:	add	r0, r0, #1
   12908:	cmp	r1, #0
   1290c:	bne	12900 <__mempcpy_chk@plt+0x18f0>
   12910:	cmp	r0, r5
   12914:	movhi	r5, r0
   12918:	b	128e0 <__mempcpy_chk@plt+0x18d0>
   1291c:	movw	r2, #29855	; 0x749f
   12920:	mov	r0, r4
   12924:	mov	r1, #1
   12928:	movt	r2, #1
   1292c:	bl	10f80 <__fprintf_chk@plt>
   12930:	movw	r2, #29879	; 0x74b7
   12934:	mov	r0, r4
   12938:	mov	r1, #1
   1293c:	mov	r3, r7
   12940:	movt	r2, #1
   12944:	bl	10f80 <__fprintf_chk@plt>
   12948:	vmov	s0, r8
   1294c:	vldr	d16, [pc, #76]	; 129a0 <__mempcpy_chk@plt+0x1990>
   12950:	movw	r2, #29903	; 0x74cf
   12954:	mov	r0, r4
   12958:	mov	r1, #1
   1295c:	mov	r3, r8
   12960:	movt	r2, #1
   12964:	vcvt.f64.u32	d17, s0
   12968:	vmov	s0, r7
   1296c:	vcvt.f64.u32	d18, s0
   12970:	vmul.f64	d16, d17, d16
   12974:	vdiv.f64	d16, d16, d18
   12978:	vstr	d16, [sp]
   1297c:	bl	10f80 <__fprintf_chk@plt>
   12980:	movw	r2, #29936	; 0x74f0
   12984:	mov	r0, r4
   12988:	mov	r1, #1
   1298c:	mov	r3, r5
   12990:	movt	r2, #1
   12994:	sub	sp, fp, #24
   12998:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1299c:	b	10f80 <__fprintf_chk@plt>
   129a0:	andeq	r0, r0, r0
   129a4:	subsmi	r0, r9, r0
   129a8:	push	{r4, r5, r6, r7, fp, lr}
   129ac:	add	fp, sp, #16
   129b0:	mov	r4, r1
   129b4:	ldr	r1, [r0, #8]
   129b8:	ldr	r2, [r0, #24]
   129bc:	mov	r5, r0
   129c0:	mov	r0, r4
   129c4:	blx	r2
   129c8:	ldr	r1, [r5, #8]
   129cc:	cmp	r0, r1
   129d0:	bcs	12a38 <__mempcpy_chk@plt+0x1a28>
   129d4:	ldr	r7, [r5]
   129d8:	mov	r6, #0
   129dc:	ldr	r1, [r7, r0, lsl #3]!
   129e0:	cmp	r1, #0
   129e4:	cmpne	r7, #0
   129e8:	bne	12a18 <__mempcpy_chk@plt+0x1a08>
   129ec:	mov	r0, r6
   129f0:	pop	{r4, r5, r6, r7, fp, pc}
   129f4:	ldr	r2, [r5, #28]
   129f8:	mov	r0, r4
   129fc:	blx	r2
   12a00:	cmp	r0, #0
   12a04:	bne	12a2c <__mempcpy_chk@plt+0x1a1c>
   12a08:	ldr	r7, [r7, #4]
   12a0c:	cmp	r7, #0
   12a10:	beq	129ec <__mempcpy_chk@plt+0x19dc>
   12a14:	ldr	r1, [r7]
   12a18:	cmp	r1, r4
   12a1c:	bne	129f4 <__mempcpy_chk@plt+0x19e4>
   12a20:	mov	r6, r4
   12a24:	mov	r0, r6
   12a28:	pop	{r4, r5, r6, r7, fp, pc}
   12a2c:	ldr	r6, [r7]
   12a30:	mov	r0, r6
   12a34:	pop	{r4, r5, r6, r7, fp, pc}
   12a38:	bl	10ff8 <abort@plt>
   12a3c:	push	{fp, lr}
   12a40:	mov	fp, sp
   12a44:	ldr	r1, [r0, #16]
   12a48:	cmp	r1, #0
   12a4c:	beq	12a6c <__mempcpy_chk@plt+0x1a5c>
   12a50:	ldm	r0, {r1, r2}
   12a54:	cmp	r1, r2
   12a58:	bcs	12a74 <__mempcpy_chk@plt+0x1a64>
   12a5c:	ldr	r0, [r1], #8
   12a60:	cmp	r0, #0
   12a64:	beq	12a54 <__mempcpy_chk@plt+0x1a44>
   12a68:	pop	{fp, pc}
   12a6c:	mov	r0, #0
   12a70:	pop	{fp, pc}
   12a74:	bl	10ff8 <abort@plt>
   12a78:	push	{r4, r5, fp, lr}
   12a7c:	add	fp, sp, #8
   12a80:	mov	r5, r1
   12a84:	ldr	r1, [r0, #8]
   12a88:	ldr	r2, [r0, #24]
   12a8c:	mov	r4, r0
   12a90:	mov	r0, r5
   12a94:	blx	r2
   12a98:	ldr	r1, [r4, #8]
   12a9c:	cmp	r0, r1
   12aa0:	bcs	12b04 <__mempcpy_chk@plt+0x1af4>
   12aa4:	ldr	r1, [r4]
   12aa8:	add	r2, r1, r0, lsl #3
   12aac:	ldr	r3, [r2]
   12ab0:	ldr	r2, [r2, #4]
   12ab4:	cmp	r3, r5
   12ab8:	beq	12ac8 <__mempcpy_chk@plt+0x1ab8>
   12abc:	cmp	r2, #0
   12ac0:	bne	12aac <__mempcpy_chk@plt+0x1a9c>
   12ac4:	b	12ad8 <__mempcpy_chk@plt+0x1ac8>
   12ac8:	cmp	r2, #0
   12acc:	beq	12ad8 <__mempcpy_chk@plt+0x1ac8>
   12ad0:	ldr	r0, [r2]
   12ad4:	pop	{r4, r5, fp, pc}
   12ad8:	ldr	r2, [r4, #4]
   12adc:	add	r0, r1, r0, lsl #3
   12ae0:	add	r1, r0, #8
   12ae4:	cmp	r1, r2
   12ae8:	bcs	12afc <__mempcpy_chk@plt+0x1aec>
   12aec:	ldr	r0, [r1], #8
   12af0:	cmp	r0, #0
   12af4:	beq	12ae4 <__mempcpy_chk@plt+0x1ad4>
   12af8:	pop	{r4, r5, fp, pc}
   12afc:	mov	r0, #0
   12b00:	pop	{r4, r5, fp, pc}
   12b04:	bl	10ff8 <abort@plt>
   12b08:	push	{r4, r5, fp, lr}
   12b0c:	add	fp, sp, #8
   12b10:	ldm	r0, {r5, lr}
   12b14:	mov	ip, r0
   12b18:	mov	r0, #0
   12b1c:	cmp	r5, lr
   12b20:	popcs	{r4, r5, fp, pc}
   12b24:	mov	r0, #0
   12b28:	b	12b3c <__mempcpy_chk@plt+0x1b2c>
   12b2c:	ldr	lr, [ip, #4]
   12b30:	add	r5, r5, #8
   12b34:	cmp	r5, lr
   12b38:	bcs	12b74 <__mempcpy_chk@plt+0x1b64>
   12b3c:	ldr	r3, [r5]
   12b40:	cmp	r3, #0
   12b44:	cmpne	r5, #0
   12b48:	beq	12b30 <__mempcpy_chk@plt+0x1b20>
   12b4c:	mov	r3, r5
   12b50:	cmp	r0, r2
   12b54:	bcs	12b74 <__mempcpy_chk@plt+0x1b64>
   12b58:	ldr	r4, [r3]
   12b5c:	str	r4, [r1, r0, lsl #2]
   12b60:	add	r0, r0, #1
   12b64:	ldr	r3, [r3, #4]
   12b68:	cmp	r3, #0
   12b6c:	bne	12b50 <__mempcpy_chk@plt+0x1b40>
   12b70:	b	12b2c <__mempcpy_chk@plt+0x1b1c>
   12b74:	pop	{r4, r5, fp, pc}
   12b78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b7c:	add	fp, sp, #24
   12b80:	mov	r5, r1
   12b84:	ldr	r4, [r0]
   12b88:	ldr	r1, [r0, #4]
   12b8c:	mov	r6, #0
   12b90:	cmp	r4, r1
   12b94:	bcs	12c00 <__mempcpy_chk@plt+0x1bf0>
   12b98:	mov	r9, r2
   12b9c:	mov	r8, r0
   12ba0:	mov	r6, #0
   12ba4:	b	12bb8 <__mempcpy_chk@plt+0x1ba8>
   12ba8:	ldr	r1, [r8, #4]
   12bac:	add	r4, r4, #8
   12bb0:	cmp	r4, r1
   12bb4:	bcs	12c00 <__mempcpy_chk@plt+0x1bf0>
   12bb8:	ldr	r0, [r4]
   12bbc:	cmp	r0, #0
   12bc0:	cmpne	r4, #0
   12bc4:	beq	12bac <__mempcpy_chk@plt+0x1b9c>
   12bc8:	mov	r1, r9
   12bcc:	blx	r5
   12bd0:	cmp	r0, #0
   12bd4:	beq	12c00 <__mempcpy_chk@plt+0x1bf0>
   12bd8:	mov	r7, r4
   12bdc:	ldr	r7, [r7, #4]
   12be0:	add	r6, r6, #1
   12be4:	cmp	r7, #0
   12be8:	beq	12ba8 <__mempcpy_chk@plt+0x1b98>
   12bec:	ldr	r0, [r7]
   12bf0:	mov	r1, r9
   12bf4:	blx	r5
   12bf8:	cmp	r0, #0
   12bfc:	bne	12bdc <__mempcpy_chk@plt+0x1bcc>
   12c00:	mov	r0, r6
   12c04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c08:	ldrb	r2, [r0]
   12c0c:	cmp	r2, #0
   12c10:	moveq	r0, #0
   12c14:	bxeq	lr
   12c18:	add	r3, r0, #1
   12c1c:	mov	r0, #0
   12c20:	rsb	r0, r0, r0, lsl #5
   12c24:	uxtab	r0, r0, r2
   12c28:	udiv	r2, r0, r1
   12c2c:	mls	r0, r2, r1, r0
   12c30:	ldrb	r2, [r3], #1
   12c34:	cmp	r2, #0
   12c38:	bne	12c20 <__mempcpy_chk@plt+0x1c10>
   12c3c:	bx	lr
   12c40:	movw	r1, #29960	; 0x7508
   12c44:	movt	r1, #1
   12c48:	vld1.32	{d16-d17}, [r1]!
   12c4c:	ldr	r1, [r1]
   12c50:	vst1.32	{d16-d17}, [r0]!
   12c54:	str	r1, [r0]
   12c58:	bx	lr
   12c5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c60:	add	fp, sp, #24
   12c64:	movw	r9, #11908	; 0x2e84
   12c68:	cmp	r3, #0
   12c6c:	movw	r5, #11888	; 0x2e70
   12c70:	mov	r6, r0
   12c74:	mov	r0, #40	; 0x28
   12c78:	mov	r7, r1
   12c7c:	movt	r9, #1
   12c80:	movne	r9, r3
   12c84:	cmp	r2, #0
   12c88:	movt	r5, #1
   12c8c:	movne	r5, r2
   12c90:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   12c94:	mov	r8, #0
   12c98:	cmp	r0, #0
   12c9c:	beq	12e58 <__mempcpy_chk@plt+0x1e48>
   12ca0:	mov	r4, r0
   12ca4:	movw	r0, #29960	; 0x7508
   12ca8:	cmp	r7, #0
   12cac:	movt	r0, #1
   12cb0:	moveq	r7, r0
   12cb4:	cmp	r7, r0
   12cb8:	str	r7, [r4, #20]
   12cbc:	beq	12d38 <__mempcpy_chk@plt+0x1d28>
   12cc0:	vldr	s2, [pc, #408]	; 12e60 <__mempcpy_chk@plt+0x1e50>
   12cc4:	vldr	s0, [r7, #8]
   12cc8:	vcmpe.f32	s0, s2
   12ccc:	vmrs	APSR_nzcv, fpscr
   12cd0:	ble	12de4 <__mempcpy_chk@plt+0x1dd4>
   12cd4:	vldr	s4, [pc, #392]	; 12e64 <__mempcpy_chk@plt+0x1e54>
   12cd8:	vcmpe.f32	s0, s4
   12cdc:	vmrs	APSR_nzcv, fpscr
   12ce0:	bpl	12de4 <__mempcpy_chk@plt+0x1dd4>
   12ce4:	vldr	s4, [pc, #380]	; 12e68 <__mempcpy_chk@plt+0x1e58>
   12ce8:	vldr	s6, [r7, #12]
   12cec:	vcmpe.f32	s6, s4
   12cf0:	vmrs	APSR_nzcv, fpscr
   12cf4:	ble	12de4 <__mempcpy_chk@plt+0x1dd4>
   12cf8:	vldr	s4, [r7]
   12cfc:	vcmpe.f32	s4, #0.0
   12d00:	vmrs	APSR_nzcv, fpscr
   12d04:	blt	12de4 <__mempcpy_chk@plt+0x1dd4>
   12d08:	vadd.f32	s2, s4, s2
   12d0c:	vcmpe.f32	s2, s0
   12d10:	vmrs	APSR_nzcv, fpscr
   12d14:	bpl	12de4 <__mempcpy_chk@plt+0x1dd4>
   12d18:	vldr	s0, [r7, #4]
   12d1c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   12d20:	vcmpe.f32	s0, s4
   12d24:	vmrs	APSR_nzcv, fpscr
   12d28:	bhi	12de4 <__mempcpy_chk@plt+0x1dd4>
   12d2c:	vcmpe.f32	s2, s0
   12d30:	vmrs	APSR_nzcv, fpscr
   12d34:	bpl	12de4 <__mempcpy_chk@plt+0x1dd4>
   12d38:	ldrb	r0, [r7, #16]
   12d3c:	cmp	r0, #0
   12d40:	bne	12d6c <__mempcpy_chk@plt+0x1d5c>
   12d44:	vmov	s2, r6
   12d48:	vldr	s0, [r7, #8]
   12d4c:	vldr	s4, [pc, #280]	; 12e6c <__mempcpy_chk@plt+0x1e5c>
   12d50:	vcvt.f32.u32	s2, s2
   12d54:	vdiv.f32	s2, s2, s0
   12d58:	vcvt.u32.f32	s0, s2
   12d5c:	vcmpe.f32	s2, s4
   12d60:	vmrs	APSR_nzcv, fpscr
   12d64:	bge	12df4 <__mempcpy_chk@plt+0x1de4>
   12d68:	vmov	r6, s0
   12d6c:	cmp	r6, #10
   12d70:	movls	r6, #10
   12d74:	orr	r0, r6, #1
   12d78:	cmn	r0, #1
   12d7c:	beq	12df4 <__mempcpy_chk@plt+0x1de4>
   12d80:	ldr	r6, [fp, #8]
   12d84:	mov	r1, #3
   12d88:	cmp	r0, #10
   12d8c:	bcc	12dc4 <__mempcpy_chk@plt+0x1db4>
   12d90:	mov	r1, #3
   12d94:	mov	r3, #9
   12d98:	mov	r2, #12
   12d9c:	udiv	r7, r0, r1
   12da0:	mls	r7, r7, r1, r0
   12da4:	cmp	r7, #0
   12da8:	beq	12dc4 <__mempcpy_chk@plt+0x1db4>
   12dac:	add	r3, r3, r2
   12db0:	add	r2, r2, #8
   12db4:	add	r1, r1, #2
   12db8:	add	r3, r3, #4
   12dbc:	cmp	r3, r0
   12dc0:	bcc	12d9c <__mempcpy_chk@plt+0x1d8c>
   12dc4:	udiv	r2, r0, r1
   12dc8:	mls	r1, r2, r1, r0
   12dcc:	cmp	r1, #0
   12dd0:	bne	12dec <__mempcpy_chk@plt+0x1ddc>
   12dd4:	add	r0, r0, #2
   12dd8:	cmn	r0, #1
   12ddc:	bne	12d84 <__mempcpy_chk@plt+0x1d74>
   12de0:	b	12df4 <__mempcpy_chk@plt+0x1de4>
   12de4:	str	r0, [r4, #20]
   12de8:	b	12dfc <__mempcpy_chk@plt+0x1dec>
   12dec:	cmp	r0, #536870912	; 0x20000000
   12df0:	bcc	12e0c <__mempcpy_chk@plt+0x1dfc>
   12df4:	mov	r0, #0
   12df8:	str	r0, [r4, #8]
   12dfc:	mov	r0, r4
   12e00:	bl	1278c <__mempcpy_chk@plt+0x177c>
   12e04:	mov	r0, r8
   12e08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e0c:	cmp	r0, #0
   12e10:	str	r0, [r4, #8]
   12e14:	beq	12dfc <__mempcpy_chk@plt+0x1dec>
   12e18:	mov	r1, #8
   12e1c:	bl	166b4 <__mempcpy_chk@plt+0x56a4>
   12e20:	cmp	r0, #0
   12e24:	str	r0, [r4]
   12e28:	beq	12dfc <__mempcpy_chk@plt+0x1dec>
   12e2c:	mov	r1, #0
   12e30:	str	r5, [r4, #24]
   12e34:	str	r9, [r4, #28]
   12e38:	str	r6, [r4, #32]
   12e3c:	mov	r8, r4
   12e40:	str	r1, [r4, #36]	; 0x24
   12e44:	str	r1, [r4, #12]
   12e48:	str	r1, [r4, #16]
   12e4c:	ldr	r1, [r4, #8]
   12e50:	add	r0, r0, r1, lsl #3
   12e54:	str	r0, [r4, #4]
   12e58:	mov	r0, r8
   12e5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e60:	stclcc	12, cr12, [ip, #820]	; 0x334
   12e64:	svccc	0x00666666
   12e68:	svccc	0x008ccccd
   12e6c:	svcmi	0x00800000
   12e70:	ror	r2, r0, #3
   12e74:	udiv	r2, r2, r1
   12e78:	mul	r1, r2, r1
   12e7c:	rsb	r0, r1, r0, ror #3
   12e80:	bx	lr
   12e84:	sub	r0, r0, r1
   12e88:	clz	r0, r0
   12e8c:	lsr	r0, r0, #5
   12e90:	bx	lr
   12e94:	push	{r4, r5, r6, r7, fp, lr}
   12e98:	add	fp, sp, #16
   12e9c:	mov	r4, r0
   12ea0:	ldr	r5, [r0]
   12ea4:	ldr	r0, [r0, #4]
   12ea8:	cmp	r5, r0
   12eac:	bcs	12f50 <__mempcpy_chk@plt+0x1f40>
   12eb0:	mov	r6, #0
   12eb4:	b	12ed0 <__mempcpy_chk@plt+0x1ec0>
   12eb8:	str	r6, [r5]
   12ebc:	str	r6, [r5, #4]
   12ec0:	ldr	r0, [r4, #4]
   12ec4:	add	r5, r5, #8
   12ec8:	cmp	r5, r0
   12ecc:	bcs	12f50 <__mempcpy_chk@plt+0x1f40>
   12ed0:	ldr	r1, [r5]
   12ed4:	cmp	r1, #0
   12ed8:	beq	12ec4 <__mempcpy_chk@plt+0x1eb4>
   12edc:	ldr	r1, [r4, #32]
   12ee0:	ldr	r7, [r5, #4]
   12ee4:	cmp	r1, #0
   12ee8:	mov	r0, r1
   12eec:	movwne	r0, #1
   12ef0:	cmp	r7, #0
   12ef4:	bne	12f38 <__mempcpy_chk@plt+0x1f28>
   12ef8:	cmp	r0, #0
   12efc:	beq	12eb8 <__mempcpy_chk@plt+0x1ea8>
   12f00:	ldr	r0, [r5]
   12f04:	blx	r1
   12f08:	b	12eb8 <__mempcpy_chk@plt+0x1ea8>
   12f0c:	str	r6, [r7]
   12f10:	cmp	r1, #0
   12f14:	ldr	r2, [r7, #4]
   12f18:	ldr	r0, [r4, #36]	; 0x24
   12f1c:	str	r0, [r7, #4]
   12f20:	mov	r0, r1
   12f24:	str	r7, [r4, #36]	; 0x24
   12f28:	movwne	r0, #1
   12f2c:	cmp	r2, #0
   12f30:	mov	r7, r2
   12f34:	beq	12ef8 <__mempcpy_chk@plt+0x1ee8>
   12f38:	tst	r0, #1
   12f3c:	beq	12f0c <__mempcpy_chk@plt+0x1efc>
   12f40:	ldr	r0, [r7]
   12f44:	blx	r1
   12f48:	ldr	r1, [r4, #32]
   12f4c:	b	12f0c <__mempcpy_chk@plt+0x1efc>
   12f50:	mov	r0, #0
   12f54:	str	r0, [r4, #12]
   12f58:	str	r0, [r4, #16]
   12f5c:	pop	{r4, r5, r6, r7, fp, pc}
   12f60:	push	{r4, r5, r6, sl, fp, lr}
   12f64:	add	fp, sp, #16
   12f68:	mov	r4, r0
   12f6c:	ldr	r0, [r0, #32]
   12f70:	cmp	r0, #0
   12f74:	beq	12fe8 <__mempcpy_chk@plt+0x1fd8>
   12f78:	ldr	r0, [r4, #16]
   12f7c:	cmp	r0, #0
   12f80:	beq	12fe8 <__mempcpy_chk@plt+0x1fd8>
   12f84:	ldr	r5, [r4]
   12f88:	ldr	r1, [r4, #4]
   12f8c:	cmp	r5, r1
   12f90:	bcc	12fa8 <__mempcpy_chk@plt+0x1f98>
   12f94:	b	12fe8 <__mempcpy_chk@plt+0x1fd8>
   12f98:	ldr	r1, [r4, #4]
   12f9c:	add	r5, r5, #8
   12fa0:	cmp	r5, r1
   12fa4:	bcs	12fe8 <__mempcpy_chk@plt+0x1fd8>
   12fa8:	ldr	r0, [r5]
   12fac:	cmp	r0, #0
   12fb0:	cmpne	r5, #0
   12fb4:	beq	12f9c <__mempcpy_chk@plt+0x1f8c>
   12fb8:	ldr	r1, [r4, #32]
   12fbc:	blx	r1
   12fc0:	ldr	r6, [r5, #4]
   12fc4:	cmp	r6, #0
   12fc8:	beq	12f98 <__mempcpy_chk@plt+0x1f88>
   12fcc:	ldr	r1, [r4, #32]
   12fd0:	ldr	r0, [r6]
   12fd4:	blx	r1
   12fd8:	ldr	r6, [r6, #4]
   12fdc:	cmp	r6, #0
   12fe0:	bne	12fcc <__mempcpy_chk@plt+0x1fbc>
   12fe4:	b	12f98 <__mempcpy_chk@plt+0x1f88>
   12fe8:	ldr	r5, [r4]
   12fec:	ldr	r1, [r4, #4]
   12ff0:	cmp	r5, r1
   12ff4:	bcc	13008 <__mempcpy_chk@plt+0x1ff8>
   12ff8:	b	13030 <__mempcpy_chk@plt+0x2020>
   12ffc:	add	r5, r5, #8
   13000:	cmp	r5, r1
   13004:	bcs	13030 <__mempcpy_chk@plt+0x2020>
   13008:	ldr	r0, [r5, #4]
   1300c:	cmp	r0, #0
   13010:	beq	12ffc <__mempcpy_chk@plt+0x1fec>
   13014:	ldr	r6, [r0, #4]
   13018:	bl	1278c <__mempcpy_chk@plt+0x177c>
   1301c:	cmp	r6, #0
   13020:	mov	r0, r6
   13024:	bne	13014 <__mempcpy_chk@plt+0x2004>
   13028:	ldr	r1, [r4, #4]
   1302c:	b	12ffc <__mempcpy_chk@plt+0x1fec>
   13030:	ldr	r0, [r4, #36]	; 0x24
   13034:	cmp	r0, #0
   13038:	beq	13050 <__mempcpy_chk@plt+0x2040>
   1303c:	ldr	r5, [r0, #4]
   13040:	bl	1278c <__mempcpy_chk@plt+0x177c>
   13044:	cmp	r5, #0
   13048:	mov	r0, r5
   1304c:	bne	1303c <__mempcpy_chk@plt+0x202c>
   13050:	ldr	r0, [r4]
   13054:	bl	1278c <__mempcpy_chk@plt+0x177c>
   13058:	mov	r0, r4
   1305c:	pop	{r4, r5, r6, sl, fp, lr}
   13060:	b	1278c <__mempcpy_chk@plt+0x177c>
   13064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13068:	add	fp, sp, #28
   1306c:	sub	sp, sp, #44	; 0x2c
   13070:	mov	r7, r0
   13074:	mov	r4, r0
   13078:	ldr	r0, [r7, #20]!
   1307c:	ldrb	r2, [r0, #16]
   13080:	cmp	r2, #0
   13084:	bne	130b4 <__mempcpy_chk@plt+0x20a4>
   13088:	vmov	s2, r1
   1308c:	vldr	s0, [r0, #8]
   13090:	vldr	s4, [pc, #564]	; 132cc <__mempcpy_chk@plt+0x22bc>
   13094:	mov	r5, #0
   13098:	vcvt.f32.u32	s2, s2
   1309c:	vdiv.f32	s2, s2, s0
   130a0:	vcvt.u32.f32	s0, s2
   130a4:	vcmpe.f32	s2, s4
   130a8:	vmrs	APSR_nzcv, fpscr
   130ac:	bge	132bc <__mempcpy_chk@plt+0x22ac>
   130b0:	vmov	r1, s0
   130b4:	cmp	r1, #10
   130b8:	mov	r5, #0
   130bc:	movls	r1, #10
   130c0:	orr	r6, r1, #1
   130c4:	cmn	r6, #1
   130c8:	beq	132bc <__mempcpy_chk@plt+0x22ac>
   130cc:	mov	r0, #3
   130d0:	cmp	r6, #10
   130d4:	bcc	1310c <__mempcpy_chk@plt+0x20fc>
   130d8:	mov	r0, #3
   130dc:	mov	r2, #9
   130e0:	mov	r1, #12
   130e4:	udiv	r3, r6, r0
   130e8:	mls	r3, r3, r0, r6
   130ec:	cmp	r3, #0
   130f0:	beq	1310c <__mempcpy_chk@plt+0x20fc>
   130f4:	add	r2, r2, r1
   130f8:	add	r1, r1, #8
   130fc:	add	r0, r0, #2
   13100:	add	r2, r2, #4
   13104:	cmp	r2, r6
   13108:	bcc	130e4 <__mempcpy_chk@plt+0x20d4>
   1310c:	udiv	r1, r6, r0
   13110:	mls	r0, r1, r0, r6
   13114:	cmp	r0, #0
   13118:	bne	1312c <__mempcpy_chk@plt+0x211c>
   1311c:	add	r6, r6, #2
   13120:	cmn	r6, #1
   13124:	bne	130cc <__mempcpy_chk@plt+0x20bc>
   13128:	b	132bc <__mempcpy_chk@plt+0x22ac>
   1312c:	sub	r0, r6, #1
   13130:	cmn	r0, #-536870910	; 0xe0000002
   13134:	bhi	132bc <__mempcpy_chk@plt+0x22ac>
   13138:	ldr	r0, [r4, #8]
   1313c:	cmp	r6, r0
   13140:	bne	1314c <__mempcpy_chk@plt+0x213c>
   13144:	mov	r5, #1
   13148:	b	132bc <__mempcpy_chk@plt+0x22ac>
   1314c:	mov	r0, r6
   13150:	mov	r1, #8
   13154:	bl	166b4 <__mempcpy_chk@plt+0x56a4>
   13158:	cmp	r0, #0
   1315c:	str	r0, [sp, #4]
   13160:	beq	132bc <__mempcpy_chk@plt+0x22ac>
   13164:	add	r0, r0, r6, lsl #3
   13168:	mov	r1, #0
   1316c:	add	r5, sp, #4
   13170:	mov	sl, r4
   13174:	mov	r2, #0
   13178:	str	r1, [sp, #20]
   1317c:	str	r1, [sp, #16]
   13180:	str	r6, [sp, #12]
   13184:	mov	r1, r4
   13188:	str	r0, [sp, #8]
   1318c:	add	r0, r5, #20
   13190:	vld1.32	{d16-d17}, [r7]
   13194:	vst1.32	{d16-d17}, [r0]
   13198:	ldr	r0, [sl, #36]!	; 0x24
   1319c:	str	r0, [sp, #40]	; 0x28
   131a0:	mov	r0, r5
   131a4:	bl	132d0 <__mempcpy_chk@plt+0x22c0>
   131a8:	cmp	r0, #0
   131ac:	beq	131d4 <__mempcpy_chk@plt+0x21c4>
   131b0:	ldr	r0, [r4]
   131b4:	bl	1278c <__mempcpy_chk@plt+0x177c>
   131b8:	mov	r0, #36	; 0x24
   131bc:	vld1.32	{d16-d17}, [r5], r0
   131c0:	vst1.32	{d16-d17}, [r4], r0
   131c4:	ldr	r0, [r5]
   131c8:	mov	r5, #1
   131cc:	str	r0, [r4]
   131d0:	b	132bc <__mempcpy_chk@plt+0x22ac>
   131d4:	ldr	r0, [sp, #40]	; 0x28
   131d8:	str	r0, [sl]
   131dc:	ldr	r0, [sp, #8]
   131e0:	ldr	r8, [sp, #4]
   131e4:	cmp	r8, r0
   131e8:	str	r0, [sp]
   131ec:	bcs	13298 <__mempcpy_chk@plt+0x2288>
   131f0:	mov	r9, #0
   131f4:	b	1320c <__mempcpy_chk@plt+0x21fc>
   131f8:	str	r9, [r8, #4]
   131fc:	ldr	r0, [sp]
   13200:	add	r8, r8, #8
   13204:	cmp	r8, r0
   13208:	bcs	13298 <__mempcpy_chk@plt+0x2288>
   1320c:	ldr	r0, [r8]
   13210:	cmp	r0, #0
   13214:	beq	131fc <__mempcpy_chk@plt+0x21ec>
   13218:	ldr	r6, [r8, #4]
   1321c:	cmp	r6, #0
   13220:	beq	131f8 <__mempcpy_chk@plt+0x21e8>
   13224:	ldr	r1, [r4, #8]
   13228:	b	1324c <__mempcpy_chk@plt+0x223c>
   1322c:	add	r0, r3, r0, lsl #3
   13230:	add	r0, r0, #4
   13234:	ldr	r3, [r0]
   13238:	cmp	r2, #0
   1323c:	str	r3, [r6, #4]
   13240:	str	r6, [r0]
   13244:	mov	r6, r2
   13248:	beq	131f8 <__mempcpy_chk@plt+0x21e8>
   1324c:	ldr	r5, [r6]
   13250:	ldr	r2, [r4, #24]
   13254:	mov	r0, r5
   13258:	blx	r2
   1325c:	ldr	r1, [r4, #8]
   13260:	cmp	r0, r1
   13264:	bcs	132c8 <__mempcpy_chk@plt+0x22b8>
   13268:	ldr	r3, [r4]
   1326c:	ldr	r2, [r6, #4]
   13270:	ldr	r7, [r3, r0, lsl #3]
   13274:	cmp	r7, #0
   13278:	bne	1322c <__mempcpy_chk@plt+0x221c>
   1327c:	str	r5, [r3, r0, lsl #3]
   13280:	ldr	r0, [r4, #12]
   13284:	add	r0, r0, #1
   13288:	str	r0, [r4, #12]
   1328c:	mov	r0, sl
   13290:	str	r9, [r6]
   13294:	b	13234 <__mempcpy_chk@plt+0x2224>
   13298:	add	r1, sp, #4
   1329c:	mov	r0, r4
   132a0:	mov	r2, #0
   132a4:	mov	r5, #0
   132a8:	bl	132d0 <__mempcpy_chk@plt+0x22c0>
   132ac:	cmp	r0, #0
   132b0:	beq	132c8 <__mempcpy_chk@plt+0x22b8>
   132b4:	ldr	r0, [sp, #4]
   132b8:	bl	1278c <__mempcpy_chk@plt+0x177c>
   132bc:	mov	r0, r5
   132c0:	sub	sp, fp, #28
   132c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132c8:	bl	10ff8 <abort@plt>
   132cc:	svcmi	0x00800000
   132d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132d4:	add	fp, sp, #28
   132d8:	sub	sp, sp, #12
   132dc:	ldr	sl, [r1]
   132e0:	str	r1, [sp, #8]
   132e4:	ldr	r1, [r1, #4]
   132e8:	mov	r7, r0
   132ec:	mov	r0, #1
   132f0:	str	r2, [sp, #4]
   132f4:	cmp	sl, r1
   132f8:	bcs	13454 <__mempcpy_chk@plt+0x2444>
   132fc:	add	r8, r7, #36	; 0x24
   13300:	mov	r9, #0
   13304:	b	13340 <__mempcpy_chk@plt+0x2330>
   13308:	str	r4, [r6, r5, lsl #3]
   1330c:	ldr	r0, [r7, #12]
   13310:	add	r0, r0, #1
   13314:	str	r0, [r7, #12]
   13318:	ldr	r1, [sp, #8]
   1331c:	str	r9, [sl]
   13320:	ldr	r0, [r1, #12]
   13324:	sub	r0, r0, #1
   13328:	str	r0, [r1, #12]
   1332c:	ldr	r0, [sp, #8]
   13330:	add	sl, sl, #8
   13334:	ldr	r0, [r0, #4]
   13338:	cmp	sl, r0
   1333c:	bcs	13450 <__mempcpy_chk@plt+0x2440>
   13340:	ldr	r4, [sl]
   13344:	cmp	r4, #0
   13348:	beq	1332c <__mempcpy_chk@plt+0x231c>
   1334c:	ldr	r5, [sl, #4]
   13350:	cmp	r5, #0
   13354:	beq	133d0 <__mempcpy_chk@plt+0x23c0>
   13358:	ldr	r1, [r7, #8]
   1335c:	b	13390 <__mempcpy_chk@plt+0x2380>
   13360:	str	r4, [r3, r0, lsl #3]
   13364:	ldr	r0, [r7, #12]
   13368:	add	r0, r0, #1
   1336c:	str	r0, [r7, #12]
   13370:	mov	r0, r8
   13374:	str	r9, [r5]
   13378:	ldr	r3, [r0]
   1337c:	cmp	r2, #0
   13380:	str	r3, [r5, #4]
   13384:	str	r5, [r0]
   13388:	mov	r5, r2
   1338c:	beq	133cc <__mempcpy_chk@plt+0x23bc>
   13390:	ldr	r4, [r5]
   13394:	ldr	r2, [r7, #24]
   13398:	mov	r0, r4
   1339c:	blx	r2
   133a0:	ldr	r1, [r7, #8]
   133a4:	cmp	r0, r1
   133a8:	bcs	13468 <__mempcpy_chk@plt+0x2458>
   133ac:	ldr	r3, [r7]
   133b0:	ldr	r2, [r5, #4]
   133b4:	ldr	r6, [r3, r0, lsl #3]
   133b8:	cmp	r6, #0
   133bc:	beq	13360 <__mempcpy_chk@plt+0x2350>
   133c0:	add	r0, r3, r0, lsl #3
   133c4:	add	r0, r0, #4
   133c8:	b	13378 <__mempcpy_chk@plt+0x2368>
   133cc:	ldr	r4, [sl]
   133d0:	ldr	r0, [sp, #4]
   133d4:	str	r9, [sl, #4]
   133d8:	cmp	r0, #0
   133dc:	bne	1332c <__mempcpy_chk@plt+0x231c>
   133e0:	ldr	r1, [r7, #8]
   133e4:	ldr	r2, [r7, #24]
   133e8:	mov	r0, r4
   133ec:	blx	r2
   133f0:	mov	r5, r0
   133f4:	ldr	r0, [r7, #8]
   133f8:	cmp	r5, r0
   133fc:	bcs	13468 <__mempcpy_chk@plt+0x2458>
   13400:	ldr	r6, [r7]
   13404:	ldr	r0, [r6, r5, lsl #3]
   13408:	cmp	r0, #0
   1340c:	beq	13308 <__mempcpy_chk@plt+0x22f8>
   13410:	ldr	r0, [r8]
   13414:	cmp	r0, #0
   13418:	beq	13428 <__mempcpy_chk@plt+0x2418>
   1341c:	ldr	r1, [r0, #4]
   13420:	str	r1, [r8]
   13424:	b	13438 <__mempcpy_chk@plt+0x2428>
   13428:	mov	r0, #8
   1342c:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   13430:	cmp	r0, #0
   13434:	beq	1345c <__mempcpy_chk@plt+0x244c>
   13438:	add	r1, r6, r5, lsl #3
   1343c:	str	r4, [r0]
   13440:	ldr	r2, [r1, #4]
   13444:	str	r2, [r0, #4]
   13448:	str	r0, [r1, #4]
   1344c:	b	13318 <__mempcpy_chk@plt+0x2308>
   13450:	mov	r0, #1
   13454:	sub	sp, fp, #28
   13458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1345c:	mov	r0, #0
   13460:	sub	sp, fp, #28
   13464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13468:	bl	10ff8 <abort@plt>
   1346c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13470:	add	fp, sp, #28
   13474:	sub	sp, sp, #4
   13478:	cmp	r1, #0
   1347c:	beq	13798 <__mempcpy_chk@plt+0x2788>
   13480:	mov	r8, r2
   13484:	mov	sl, r1
   13488:	ldr	r1, [r0, #8]
   1348c:	ldr	r2, [r0, #24]
   13490:	mov	r4, r0
   13494:	mov	r0, sl
   13498:	blx	r2
   1349c:	mov	r7, r0
   134a0:	ldr	r0, [r4, #8]
   134a4:	cmp	r7, r0
   134a8:	bcs	13798 <__mempcpy_chk@plt+0x2788>
   134ac:	ldr	r5, [r4]
   134b0:	mov	r9, r5
   134b4:	ldr	r1, [r9, r7, lsl #3]!
   134b8:	cmp	r1, #0
   134bc:	beq	13548 <__mempcpy_chk@plt+0x2538>
   134c0:	cmp	r1, sl
   134c4:	beq	134f0 <__mempcpy_chk@plt+0x24e0>
   134c8:	ldr	r2, [r4, #28]
   134cc:	mov	r0, sl
   134d0:	blx	r2
   134d4:	cmp	r0, #0
   134d8:	mov	r6, r9
   134dc:	beq	13504 <__mempcpy_chk@plt+0x24f4>
   134e0:	ldr	r0, [r6]
   134e4:	cmp	r0, #0
   134e8:	bne	134f4 <__mempcpy_chk@plt+0x24e4>
   134ec:	b	13548 <__mempcpy_chk@plt+0x2538>
   134f0:	mov	r0, sl
   134f4:	cmp	r8, #0
   134f8:	mov	r7, #0
   134fc:	strne	r0, [r8]
   13500:	b	13734 <__mempcpy_chk@plt+0x2724>
   13504:	add	r6, r5, r7, lsl #3
   13508:	ldr	r0, [r6, #4]!
   1350c:	cmp	r0, #0
   13510:	beq	13548 <__mempcpy_chk@plt+0x2538>
   13514:	ldr	r1, [r0]
   13518:	cmp	r1, sl
   1351c:	beq	1353c <__mempcpy_chk@plt+0x252c>
   13520:	ldr	r2, [r4, #28]
   13524:	mov	r0, sl
   13528:	blx	r2
   1352c:	ldr	r6, [r6]
   13530:	cmp	r0, #0
   13534:	beq	13508 <__mempcpy_chk@plt+0x24f8>
   13538:	b	134e0 <__mempcpy_chk@plt+0x24d0>
   1353c:	mov	r0, sl
   13540:	cmp	r0, #0
   13544:	bne	134f4 <__mempcpy_chk@plt+0x24e4>
   13548:	vldr	s0, [r4, #8]
   1354c:	vldr	s2, [r4, #12]
   13550:	ldr	r0, [r4, #20]
   13554:	vcvt.f32.u32	s0, s0
   13558:	vcvt.f32.u32	s4, s2
   1355c:	vldr	s2, [r0, #8]
   13560:	vmul.f32	s6, s2, s0
   13564:	vcmpe.f32	s6, s4
   13568:	vmrs	APSR_nzcv, fpscr
   1356c:	bpl	136c0 <__mempcpy_chk@plt+0x26b0>
   13570:	movw	r1, #29960	; 0x7508
   13574:	movt	r1, #1
   13578:	cmp	r0, r1
   1357c:	beq	13608 <__mempcpy_chk@plt+0x25f8>
   13580:	vldr	s6, [pc, #532]	; 1379c <__mempcpy_chk@plt+0x278c>
   13584:	vcmpe.f32	s2, s6
   13588:	vmrs	APSR_nzcv, fpscr
   1358c:	ble	135f4 <__mempcpy_chk@plt+0x25e4>
   13590:	vldr	s8, [pc, #520]	; 137a0 <__mempcpy_chk@plt+0x2790>
   13594:	vcmpe.f32	s2, s8
   13598:	vmrs	APSR_nzcv, fpscr
   1359c:	bpl	135f4 <__mempcpy_chk@plt+0x25e4>
   135a0:	vldr	s8, [pc, #508]	; 137a4 <__mempcpy_chk@plt+0x2794>
   135a4:	vldr	s10, [r0, #12]
   135a8:	vcmpe.f32	s10, s8
   135ac:	vmrs	APSR_nzcv, fpscr
   135b0:	ble	135f4 <__mempcpy_chk@plt+0x25e4>
   135b4:	vldr	s8, [r0]
   135b8:	vcmpe.f32	s8, #0.0
   135bc:	vmrs	APSR_nzcv, fpscr
   135c0:	blt	135f4 <__mempcpy_chk@plt+0x25e4>
   135c4:	vadd.f32	s6, s8, s6
   135c8:	vcmpe.f32	s6, s2
   135cc:	vmrs	APSR_nzcv, fpscr
   135d0:	bpl	135f4 <__mempcpy_chk@plt+0x25e4>
   135d4:	vldr	s8, [r0, #4]
   135d8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   135dc:	vcmpe.f32	s8, s10
   135e0:	vmrs	APSR_nzcv, fpscr
   135e4:	bhi	135f4 <__mempcpy_chk@plt+0x25e4>
   135e8:	vcmpe.f32	s6, s8
   135ec:	vmrs	APSR_nzcv, fpscr
   135f0:	bmi	1360c <__mempcpy_chk@plt+0x25fc>
   135f4:	vldr	s2, [pc, #428]	; 137a8 <__mempcpy_chk@plt+0x2798>
   135f8:	movw	r0, #29960	; 0x7508
   135fc:	movt	r0, #1
   13600:	str	r0, [r4, #20]
   13604:	b	1360c <__mempcpy_chk@plt+0x25fc>
   13608:	mov	r0, r1
   1360c:	vmul.f32	s6, s2, s0
   13610:	vcmpe.f32	s6, s4
   13614:	vmrs	APSR_nzcv, fpscr
   13618:	bpl	136c0 <__mempcpy_chk@plt+0x26b0>
   1361c:	vldr	s4, [r0, #12]
   13620:	ldrb	r0, [r0, #16]
   13624:	mvn	r7, #0
   13628:	cmp	r0, #0
   1362c:	vmul.f32	s0, s4, s0
   13630:	vldr	s4, [pc, #372]	; 137ac <__mempcpy_chk@plt+0x279c>
   13634:	vmul.f32	s2, s2, s0
   13638:	vseleq.f32	s0, s2, s0
   1363c:	vcmpe.f32	s0, s4
   13640:	vmrs	APSR_nzcv, fpscr
   13644:	bge	13734 <__mempcpy_chk@plt+0x2724>
   13648:	vcvt.u32.f32	s0, s0
   1364c:	mov	r0, r4
   13650:	vmov	r1, s0
   13654:	bl	13064 <__mempcpy_chk@plt+0x2054>
   13658:	cmp	r0, #0
   1365c:	beq	13734 <__mempcpy_chk@plt+0x2724>
   13660:	ldr	r1, [r4, #8]
   13664:	ldr	r2, [r4, #24]
   13668:	mov	r0, sl
   1366c:	blx	r2
   13670:	mov	r7, r0
   13674:	ldr	r0, [r4, #8]
   13678:	cmp	r7, r0
   1367c:	bcs	13798 <__mempcpy_chk@plt+0x2788>
   13680:	ldr	r5, [r4]
   13684:	mov	r9, r5
   13688:	ldr	r1, [r9, r7, lsl #3]!
   1368c:	cmp	r1, #0
   13690:	beq	136c0 <__mempcpy_chk@plt+0x26b0>
   13694:	cmp	r1, sl
   13698:	mov	r0, sl
   1369c:	beq	136b8 <__mempcpy_chk@plt+0x26a8>
   136a0:	ldr	r2, [r4, #28]
   136a4:	mov	r0, sl
   136a8:	blx	r2
   136ac:	cmp	r0, #0
   136b0:	beq	13748 <__mempcpy_chk@plt+0x2738>
   136b4:	ldr	r0, [r9]
   136b8:	cmp	r0, #0
   136bc:	bne	13798 <__mempcpy_chk@plt+0x2788>
   136c0:	ldr	r0, [r9]
   136c4:	cmp	r0, #0
   136c8:	beq	136e4 <__mempcpy_chk@plt+0x26d4>
   136cc:	ldr	r0, [r4, #36]	; 0x24
   136d0:	cmp	r0, #0
   136d4:	beq	13704 <__mempcpy_chk@plt+0x26f4>
   136d8:	ldr	r1, [r0, #4]
   136dc:	str	r1, [r4, #36]	; 0x24
   136e0:	b	13714 <__mempcpy_chk@plt+0x2704>
   136e4:	str	sl, [r9]
   136e8:	ldr	r0, [r4, #12]
   136ec:	ldr	r1, [r4, #16]
   136f0:	add	r0, r0, #1
   136f4:	add	r1, r1, #1
   136f8:	str	r0, [r4, #12]
   136fc:	str	r1, [r4, #16]
   13700:	b	13730 <__mempcpy_chk@plt+0x2720>
   13704:	mov	r0, #8
   13708:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   1370c:	cmp	r0, #0
   13710:	beq	13740 <__mempcpy_chk@plt+0x2730>
   13714:	str	sl, [r0]
   13718:	ldr	r1, [r9, #4]
   1371c:	str	r1, [r0, #4]
   13720:	str	r0, [r9, #4]
   13724:	ldr	r0, [r4, #16]
   13728:	add	r0, r0, #1
   1372c:	str	r0, [r4, #16]
   13730:	mov	r7, #1
   13734:	mov	r0, r7
   13738:	sub	sp, fp, #28
   1373c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13740:	mvn	r7, #0
   13744:	b	13734 <__mempcpy_chk@plt+0x2724>
   13748:	add	r6, r5, r7, lsl #3
   1374c:	ldr	r0, [r6, #4]!
   13750:	cmp	r0, #0
   13754:	beq	136c0 <__mempcpy_chk@plt+0x26b0>
   13758:	ldr	r1, [r0]
   1375c:	cmp	r1, sl
   13760:	beq	1378c <__mempcpy_chk@plt+0x277c>
   13764:	ldr	r2, [r4, #28]
   13768:	mov	r0, sl
   1376c:	blx	r2
   13770:	ldr	r6, [r6]
   13774:	cmp	r0, #0
   13778:	beq	1374c <__mempcpy_chk@plt+0x273c>
   1377c:	ldr	r0, [r6]
   13780:	cmp	r0, #0
   13784:	beq	136c0 <__mempcpy_chk@plt+0x26b0>
   13788:	b	13798 <__mempcpy_chk@plt+0x2788>
   1378c:	mov	r0, sl
   13790:	cmp	r0, #0
   13794:	beq	136c0 <__mempcpy_chk@plt+0x26b0>
   13798:	bl	10ff8 <abort@plt>
   1379c:	stclcc	12, cr12, [ip, #820]	; 0x334
   137a0:	svccc	0x00666666
   137a4:	svccc	0x008ccccd
   137a8:	svccc	0x004ccccd
   137ac:	svcmi	0x00800000
   137b0:	push	{r4, sl, fp, lr}
   137b4:	add	fp, sp, #8
   137b8:	sub	sp, sp, #8
   137bc:	add	r2, sp, #4
   137c0:	mov	r4, r1
   137c4:	bl	1346c <__mempcpy_chk@plt+0x245c>
   137c8:	cmn	r0, #1
   137cc:	beq	137e0 <__mempcpy_chk@plt+0x27d0>
   137d0:	ldr	r1, [sp, #4]
   137d4:	cmp	r0, #0
   137d8:	moveq	r4, r1
   137dc:	b	137e4 <__mempcpy_chk@plt+0x27d4>
   137e0:	mov	r4, #0
   137e4:	mov	r0, r4
   137e8:	sub	sp, fp, #8
   137ec:	pop	{r4, sl, fp, pc}
   137f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137f4:	add	fp, sp, #24
   137f8:	mov	r9, r1
   137fc:	ldr	r1, [r0, #8]
   13800:	ldr	r2, [r0, #24]
   13804:	mov	r5, r0
   13808:	mov	r0, r9
   1380c:	blx	r2
   13810:	mov	r7, r0
   13814:	ldr	r0, [r5, #8]
   13818:	cmp	r7, r0
   1381c:	bcs	13a80 <__mempcpy_chk@plt+0x2a70>
   13820:	ldr	r6, [r5]
   13824:	mov	r8, #0
   13828:	mov	r4, r6
   1382c:	ldr	r1, [r4, r7, lsl #3]!
   13830:	cmp	r1, #0
   13834:	beq	138e8 <__mempcpy_chk@plt+0x28d8>
   13838:	cmp	r1, r9
   1383c:	beq	13858 <__mempcpy_chk@plt+0x2848>
   13840:	ldr	r2, [r5, #28]
   13844:	mov	r0, r9
   13848:	blx	r2
   1384c:	cmp	r0, #0
   13850:	beq	13890 <__mempcpy_chk@plt+0x2880>
   13854:	ldr	r9, [r4]
   13858:	add	r0, r6, r7, lsl #3
   1385c:	ldr	r0, [r0, #4]
   13860:	cmp	r0, #0
   13864:	beq	138d8 <__mempcpy_chk@plt+0x28c8>
   13868:	ldm	r0, {r1, r2}
   1386c:	stm	r4, {r1, r2}
   13870:	mov	r1, #0
   13874:	str	r1, [r0]
   13878:	ldr	r1, [r5, #36]	; 0x24
   1387c:	str	r1, [r0, #4]
   13880:	str	r0, [r5, #36]	; 0x24
   13884:	cmp	r9, #0
   13888:	bne	13920 <__mempcpy_chk@plt+0x2910>
   1388c:	b	138e8 <__mempcpy_chk@plt+0x28d8>
   13890:	add	r7, r6, r7, lsl #3
   13894:	ldr	r0, [r7, #4]!
   13898:	cmp	r0, #0
   1389c:	beq	138e8 <__mempcpy_chk@plt+0x28d8>
   138a0:	ldr	r1, [r0]
   138a4:	cmp	r1, r9
   138a8:	beq	138f0 <__mempcpy_chk@plt+0x28e0>
   138ac:	ldr	r2, [r5, #28]
   138b0:	mov	r0, r9
   138b4:	blx	r2
   138b8:	ldr	r1, [r7]
   138bc:	cmp	r0, #0
   138c0:	bne	138f8 <__mempcpy_chk@plt+0x28e8>
   138c4:	ldr	r0, [r1, #4]!
   138c8:	mov	r7, r1
   138cc:	cmp	r0, #0
   138d0:	bne	138a0 <__mempcpy_chk@plt+0x2890>
   138d4:	b	138e8 <__mempcpy_chk@plt+0x28d8>
   138d8:	mov	r0, #0
   138dc:	str	r0, [r4]
   138e0:	cmp	r9, #0
   138e4:	bne	13920 <__mempcpy_chk@plt+0x2910>
   138e8:	mov	r0, r8
   138ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   138f0:	mov	r1, r0
   138f4:	b	138fc <__mempcpy_chk@plt+0x28ec>
   138f8:	ldr	r9, [r1]
   138fc:	ldr	r0, [r1, #4]
   13900:	str	r0, [r7]
   13904:	mov	r0, #0
   13908:	str	r0, [r1]
   1390c:	ldr	r0, [r5, #36]	; 0x24
   13910:	str	r0, [r1, #4]
   13914:	str	r1, [r5, #36]	; 0x24
   13918:	cmp	r9, #0
   1391c:	beq	138e8 <__mempcpy_chk@plt+0x28d8>
   13920:	ldr	r0, [r5, #16]
   13924:	sub	r0, r0, #1
   13928:	str	r0, [r5, #16]
   1392c:	ldr	r0, [r4]
   13930:	cmp	r0, #0
   13934:	bne	13a74 <__mempcpy_chk@plt+0x2a64>
   13938:	ldr	r0, [r5, #12]
   1393c:	vldr	s0, [r5, #8]
   13940:	sub	r1, r0, #1
   13944:	str	r1, [r5, #12]
   13948:	vmov	s2, r1
   1394c:	ldr	r0, [r5, #20]
   13950:	vcvt.f32.u32	s0, s0
   13954:	vcvt.f32.u32	s2, s2
   13958:	vldr	s4, [r0]
   1395c:	vmul.f32	s6, s4, s0
   13960:	vcmpe.f32	s6, s2
   13964:	vmrs	APSR_nzcv, fpscr
   13968:	ble	13a74 <__mempcpy_chk@plt+0x2a64>
   1396c:	movw	r1, #29960	; 0x7508
   13970:	movt	r1, #1
   13974:	cmp	r0, r1
   13978:	beq	13a04 <__mempcpy_chk@plt+0x29f4>
   1397c:	vldr	s8, [pc, #256]	; 13a84 <__mempcpy_chk@plt+0x2a74>
   13980:	vldr	s6, [r0, #8]
   13984:	vcmpe.f32	s6, s8
   13988:	vmrs	APSR_nzcv, fpscr
   1398c:	ble	139f0 <__mempcpy_chk@plt+0x29e0>
   13990:	vldr	s10, [pc, #240]	; 13a88 <__mempcpy_chk@plt+0x2a78>
   13994:	vcmpe.f32	s6, s10
   13998:	vmrs	APSR_nzcv, fpscr
   1399c:	bpl	139f0 <__mempcpy_chk@plt+0x29e0>
   139a0:	vcmpe.f32	s4, #0.0
   139a4:	vmrs	APSR_nzcv, fpscr
   139a8:	blt	139f0 <__mempcpy_chk@plt+0x29e0>
   139ac:	vldr	s10, [r0, #12]
   139b0:	vldr	s12, [pc, #212]	; 13a8c <__mempcpy_chk@plt+0x2a7c>
   139b4:	vcmpe.f32	s10, s12
   139b8:	vmrs	APSR_nzcv, fpscr
   139bc:	ble	139f0 <__mempcpy_chk@plt+0x29e0>
   139c0:	vadd.f32	s8, s4, s8
   139c4:	vcmpe.f32	s8, s6
   139c8:	vmrs	APSR_nzcv, fpscr
   139cc:	bpl	139f0 <__mempcpy_chk@plt+0x29e0>
   139d0:	vldr	s6, [r0, #4]
   139d4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   139d8:	vcmpe.f32	s6, s10
   139dc:	vmrs	APSR_nzcv, fpscr
   139e0:	bhi	139f0 <__mempcpy_chk@plt+0x29e0>
   139e4:	vcmpe.f32	s8, s6
   139e8:	vmrs	APSR_nzcv, fpscr
   139ec:	bmi	13a08 <__mempcpy_chk@plt+0x29f8>
   139f0:	vldr	s4, [pc, #152]	; 13a90 <__mempcpy_chk@plt+0x2a80>
   139f4:	movw	r0, #29960	; 0x7508
   139f8:	movt	r0, #1
   139fc:	str	r0, [r5, #20]
   13a00:	b	13a08 <__mempcpy_chk@plt+0x29f8>
   13a04:	mov	r0, r1
   13a08:	vmul.f32	s4, s4, s0
   13a0c:	vcmpe.f32	s4, s2
   13a10:	vmrs	APSR_nzcv, fpscr
   13a14:	ble	13a74 <__mempcpy_chk@plt+0x2a64>
   13a18:	vldr	s2, [r0, #4]
   13a1c:	ldrb	r1, [r0, #16]
   13a20:	cmp	r1, #0
   13a24:	vmul.f32	s0, s2, s0
   13a28:	bne	13a34 <__mempcpy_chk@plt+0x2a24>
   13a2c:	vldr	s2, [r0, #8]
   13a30:	vmul.f32	s0, s0, s2
   13a34:	vcvt.u32.f32	s0, s0
   13a38:	mov	r0, r5
   13a3c:	vmov	r1, s0
   13a40:	bl	13064 <__mempcpy_chk@plt+0x2054>
   13a44:	cmp	r0, #0
   13a48:	bne	13a74 <__mempcpy_chk@plt+0x2a64>
   13a4c:	ldr	r0, [r5, #36]	; 0x24
   13a50:	cmp	r0, #0
   13a54:	beq	13a6c <__mempcpy_chk@plt+0x2a5c>
   13a58:	ldr	r4, [r0, #4]
   13a5c:	bl	1278c <__mempcpy_chk@plt+0x177c>
   13a60:	cmp	r4, #0
   13a64:	mov	r0, r4
   13a68:	bne	13a58 <__mempcpy_chk@plt+0x2a48>
   13a6c:	mov	r0, #0
   13a70:	str	r0, [r5, #36]	; 0x24
   13a74:	mov	r8, r9
   13a78:	mov	r0, r8
   13a7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a80:	bl	10ff8 <abort@plt>
   13a84:	stclcc	12, cr12, [ip, #820]	; 0x334
   13a88:	svccc	0x00666666
   13a8c:	svccc	0x008ccccd
   13a90:	andeq	r0, r0, r0
   13a94:	b	137f0 <__mempcpy_chk@plt+0x27e0>
   13a98:	push	{r4, r5, fp, lr}
   13a9c:	add	fp, sp, #8
   13aa0:	mov	r5, r0
   13aa4:	ldr	r0, [r0]
   13aa8:	mov	r4, r1
   13aac:	bl	169b0 <__mempcpy_chk@plt+0x59a0>
   13ab0:	ldrd	r2, [r5, #8]
   13ab4:	eor	r0, r2, r0
   13ab8:	mov	r1, r3
   13abc:	mov	r2, r4
   13ac0:	mov	r3, #0
   13ac4:	bl	16bd0 <__mempcpy_chk@plt+0x5bc0>
   13ac8:	mov	r0, r2
   13acc:	pop	{r4, r5, fp, pc}
   13ad0:	push	{r4, r5, fp, lr}
   13ad4:	add	fp, sp, #8
   13ad8:	mov	lr, r1
   13adc:	mov	r2, r0
   13ae0:	ldr	r3, [r2, #8]!
   13ae4:	ldr	ip, [lr, #8]!
   13ae8:	ldr	r4, [r2, #4]
   13aec:	eor	ip, r3, ip
   13af0:	ldr	r3, [lr, #4]
   13af4:	eor	r3, r4, r3
   13af8:	orrs	r3, ip, r3
   13afc:	mov	ip, #0
   13b00:	bne	13b30 <__mempcpy_chk@plt+0x2b20>
   13b04:	ldrd	r4, [lr, #8]
   13b08:	ldrd	r2, [r2, #8]
   13b0c:	eor	r3, r3, r5
   13b10:	eor	r2, r2, r4
   13b14:	orrs	r2, r2, r3
   13b18:	bne	13b30 <__mempcpy_chk@plt+0x2b20>
   13b1c:	ldr	r1, [r1]
   13b20:	ldr	r0, [r0]
   13b24:	bl	10ddc <strcmp@plt>
   13b28:	clz	r0, r0
   13b2c:	lsr	ip, r0, #5
   13b30:	mov	r0, ip
   13b34:	pop	{r4, r5, fp, pc}
   13b38:	push	{r4, sl, fp, lr}
   13b3c:	add	fp, sp, #8
   13b40:	mov	r4, r0
   13b44:	ldr	r0, [r0]
   13b48:	bl	1278c <__mempcpy_chk@plt+0x177c>
   13b4c:	mov	r0, r4
   13b50:	pop	{r4, sl, fp, lr}
   13b54:	b	1278c <__mempcpy_chk@plt+0x177c>
   13b58:	push	{r4, r5, fp, lr}
   13b5c:	add	fp, sp, #8
   13b60:	cmp	r0, #0
   13b64:	beq	13bf8 <__mempcpy_chk@plt+0x2be8>
   13b68:	mov	r1, #47	; 0x2f
   13b6c:	mov	r4, r0
   13b70:	bl	10fbc <strrchr@plt>
   13b74:	cmp	r0, #0
   13b78:	mov	r5, r4
   13b7c:	addne	r5, r0, #1
   13b80:	sub	r0, r5, r4
   13b84:	cmp	r0, #7
   13b88:	blt	13bdc <__mempcpy_chk@plt+0x2bcc>
   13b8c:	movw	r1, #30036	; 0x7554
   13b90:	sub	r0, r5, #7
   13b94:	mov	r2, #7
   13b98:	movt	r1, #1
   13b9c:	bl	10fec <strncmp@plt>
   13ba0:	cmp	r0, #0
   13ba4:	bne	13bdc <__mempcpy_chk@plt+0x2bcc>
   13ba8:	movw	r1, #30044	; 0x755c
   13bac:	mov	r0, r5
   13bb0:	mov	r2, #3
   13bb4:	movt	r1, #1
   13bb8:	bl	10fec <strncmp@plt>
   13bbc:	cmp	r0, #0
   13bc0:	beq	13bcc <__mempcpy_chk@plt+0x2bbc>
   13bc4:	mov	r4, r5
   13bc8:	b	13bdc <__mempcpy_chk@plt+0x2bcc>
   13bcc:	movw	r0, #33072	; 0x8130
   13bd0:	add	r4, r5, #3
   13bd4:	movt	r0, #2
   13bd8:	str	r4, [r0]
   13bdc:	movw	r0, #33076	; 0x8134
   13be0:	movt	r0, #2
   13be4:	str	r4, [r0]
   13be8:	movw	r0, #33124	; 0x8164
   13bec:	movt	r0, #2
   13bf0:	str	r4, [r0]
   13bf4:	pop	{r4, r5, fp, pc}
   13bf8:	movw	r0, #33088	; 0x8140
   13bfc:	mov	r1, #55	; 0x37
   13c00:	mov	r2, #1
   13c04:	movt	r0, #2
   13c08:	ldr	r3, [r0]
   13c0c:	movw	r0, #29980	; 0x751c
   13c10:	movt	r0, #1
   13c14:	bl	10e84 <fwrite@plt>
   13c18:	bl	10ff8 <abort@plt>
   13c1c:	push	{r4, r5, r6, sl, fp, lr}
   13c20:	add	fp, sp, #16
   13c24:	mov	r4, r0
   13c28:	movw	r0, #33128	; 0x8168
   13c2c:	movt	r0, #2
   13c30:	cmp	r4, #0
   13c34:	moveq	r4, r0
   13c38:	bl	10f44 <__errno_location@plt>
   13c3c:	ldr	r6, [r0]
   13c40:	mov	r5, r0
   13c44:	mov	r0, r4
   13c48:	mov	r1, #48	; 0x30
   13c4c:	bl	16594 <__mempcpy_chk@plt+0x5584>
   13c50:	str	r6, [r5]
   13c54:	pop	{r4, r5, r6, sl, fp, pc}
   13c58:	movw	r1, #33128	; 0x8168
   13c5c:	cmp	r0, #0
   13c60:	movt	r1, #2
   13c64:	movne	r1, r0
   13c68:	ldr	r0, [r1]
   13c6c:	bx	lr
   13c70:	movw	r2, #33128	; 0x8168
   13c74:	cmp	r0, #0
   13c78:	movt	r2, #2
   13c7c:	movne	r2, r0
   13c80:	str	r1, [r2]
   13c84:	bx	lr
   13c88:	movw	r3, #33128	; 0x8168
   13c8c:	cmp	r0, #0
   13c90:	and	r2, r2, #1
   13c94:	movt	r3, #2
   13c98:	movne	r3, r0
   13c9c:	ubfx	r0, r1, #5, #3
   13ca0:	and	r1, r1, #31
   13ca4:	add	ip, r3, r0, lsl #2
   13ca8:	mov	r0, #1
   13cac:	ldr	r3, [ip, #8]
   13cb0:	and	r0, r0, r3, lsr r1
   13cb4:	eor	r2, r0, r2
   13cb8:	eor	r1, r3, r2, lsl r1
   13cbc:	str	r1, [ip, #8]
   13cc0:	bx	lr
   13cc4:	movw	r2, #33128	; 0x8168
   13cc8:	cmp	r0, #0
   13ccc:	movt	r2, #2
   13cd0:	movne	r2, r0
   13cd4:	ldr	r0, [r2, #4]
   13cd8:	str	r1, [r2, #4]
   13cdc:	bx	lr
   13ce0:	push	{fp, lr}
   13ce4:	mov	fp, sp
   13ce8:	movw	r3, #33128	; 0x8168
   13cec:	cmp	r0, #0
   13cf0:	movt	r3, #2
   13cf4:	movne	r3, r0
   13cf8:	cmp	r1, #0
   13cfc:	mov	r0, #10
   13d00:	cmpne	r2, #0
   13d04:	str	r0, [r3]
   13d08:	bne	13d10 <__mempcpy_chk@plt+0x2d00>
   13d0c:	bl	10ff8 <abort@plt>
   13d10:	str	r1, [r3, #40]	; 0x28
   13d14:	str	r2, [r3, #44]	; 0x2c
   13d18:	pop	{fp, pc}
   13d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d20:	add	fp, sp, #28
   13d24:	sub	sp, sp, #20
   13d28:	mov	r7, r0
   13d2c:	ldr	r0, [fp, #8]
   13d30:	movw	r5, #33128	; 0x8168
   13d34:	mov	r8, r3
   13d38:	mov	r9, r2
   13d3c:	mov	sl, r1
   13d40:	movt	r5, #2
   13d44:	cmp	r0, #0
   13d48:	movne	r5, r0
   13d4c:	bl	10f44 <__errno_location@plt>
   13d50:	ldr	r2, [r5, #40]	; 0x28
   13d54:	ldr	r3, [r5, #44]	; 0x2c
   13d58:	mov	r4, r0
   13d5c:	ldm	r5, {r0, r1}
   13d60:	add	r5, r5, #8
   13d64:	ldr	r6, [r4]
   13d68:	stm	sp, {r0, r1, r5}
   13d6c:	mov	r0, r7
   13d70:	mov	r1, sl
   13d74:	str	r2, [sp, #12]
   13d78:	str	r3, [sp, #16]
   13d7c:	mov	r2, r9
   13d80:	mov	r3, r8
   13d84:	bl	13d94 <__mempcpy_chk@plt+0x2d84>
   13d88:	str	r6, [r4]
   13d8c:	sub	sp, fp, #28
   13d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d98:	add	fp, sp, #28
   13d9c:	sub	sp, sp, #156	; 0x9c
   13da0:	mov	r5, r0
   13da4:	add	r0, r2, #1
   13da8:	mov	r6, r1
   13dac:	mov	sl, r3
   13db0:	str	r2, [fp, #-80]	; 0xffffffb0
   13db4:	str	r0, [sp, #72]	; 0x48
   13db8:	ldr	r0, [fp, #12]
   13dbc:	and	r1, r0, #1
   13dc0:	str	r1, [sp, #36]	; 0x24
   13dc4:	and	r1, r0, #4
   13dc8:	str	r1, [sp, #32]
   13dcc:	ubfx	r9, r0, #1, #1
   13dd0:	bl	10e9c <__ctype_get_mb_cur_max@plt>
   13dd4:	str	r0, [sp, #40]	; 0x28
   13dd8:	ldr	r0, [fp, #24]
   13ddc:	ldr	r7, [fp, #8]
   13de0:	mov	r1, #0
   13de4:	str	r5, [fp, #-84]	; 0xffffffac
   13de8:	str	r1, [fp, #-56]	; 0xffffffc8
   13dec:	mov	r1, #0
   13df0:	str	r1, [sp, #60]	; 0x3c
   13df4:	mov	r1, #1
   13df8:	str	r1, [fp, #-48]	; 0xffffffd0
   13dfc:	str	r0, [sp, #80]	; 0x50
   13e00:	ldr	r0, [fp, #20]
   13e04:	str	r0, [sp, #76]	; 0x4c
   13e08:	mov	r0, #0
   13e0c:	str	r0, [sp, #56]	; 0x38
   13e10:	mov	r0, #0
   13e14:	str	r0, [fp, #-88]	; 0xffffffa8
   13e18:	mov	r0, #0
   13e1c:	str	r0, [fp, #-72]	; 0xffffffb8
   13e20:	mov	r0, #0
   13e24:	cmp	r7, #10
   13e28:	bhi	14dbc <__mempcpy_chk@plt+0x3dac>
   13e2c:	add	r1, pc, #24
   13e30:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13e34:	mov	r4, r6
   13e38:	mov	r8, #0
   13e3c:	mov	r2, #1
   13e40:	mov	r3, #0
   13e44:	mov	lr, sl
   13e48:	ldr	pc, [r1, r7, lsl #2]
   13e4c:	andeq	r3, r1, r0, lsl pc
   13e50:	andeq	r3, r1, r4, ror #30
   13e54:	andeq	r3, r1, r4, lsr #30
   13e58:	andeq	r3, r1, r8, lsl #30
   13e5c:	andeq	r3, r1, r8, asr pc
   13e60:	andeq	r3, r1, ip, lsl #31
   13e64:	andeq	r3, r1, r4, lsr pc
   13e68:	andeq	r4, r1, r0, lsl r0
   13e6c:	andeq	r3, r1, r8, ror lr
   13e70:	andeq	r3, r1, r8, ror lr
   13e74:	andeq	r3, r1, r0, lsr #29
   13e78:	movw	r0, #30128	; 0x75b0
   13e7c:	mov	r1, r7
   13e80:	movt	r0, #1
   13e84:	bl	157c4 <__mempcpy_chk@plt+0x47b4>
   13e88:	str	r0, [sp, #76]	; 0x4c
   13e8c:	movw	r0, #30130	; 0x75b2
   13e90:	mov	r1, r7
   13e94:	movt	r0, #1
   13e98:	bl	157c4 <__mempcpy_chk@plt+0x47b4>
   13e9c:	str	r0, [sp, #80]	; 0x50
   13ea0:	mov	r8, #0
   13ea4:	tst	r9, #1
   13ea8:	bne	13ee0 <__mempcpy_chk@plt+0x2ed0>
   13eac:	ldr	r0, [sp, #76]	; 0x4c
   13eb0:	ldrb	r0, [r0]
   13eb4:	cmp	r0, #0
   13eb8:	beq	13ee0 <__mempcpy_chk@plt+0x2ed0>
   13ebc:	ldr	r1, [sp, #76]	; 0x4c
   13ec0:	mov	r8, #0
   13ec4:	add	r1, r1, #1
   13ec8:	cmp	r8, r4
   13ecc:	strbcc	r0, [r5, r8]
   13ed0:	ldrb	r0, [r1, r8]
   13ed4:	add	r8, r8, #1
   13ed8:	cmp	r0, #0
   13edc:	bne	13ec8 <__mempcpy_chk@plt+0x2eb8>
   13ee0:	ldr	r6, [sp, #80]	; 0x50
   13ee4:	mov	r0, r6
   13ee8:	bl	10f38 <strlen@plt>
   13eec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13ef0:	str	r0, [fp, #-72]	; 0xffffffb8
   13ef4:	str	r6, [fp, #-88]	; 0xffffffa8
   13ef8:	mov	r2, #1
   13efc:	mov	r3, r9
   13f00:	mov	lr, sl
   13f04:	b	14010 <__mempcpy_chk@plt+0x3000>
   13f08:	mov	r0, #1
   13f0c:	b	13f64 <__mempcpy_chk@plt+0x2f54>
   13f10:	mov	r7, #0
   13f14:	mov	r8, #0
   13f18:	mov	r2, r0
   13f1c:	mov	r3, #0
   13f20:	b	14010 <__mempcpy_chk@plt+0x3000>
   13f24:	tst	r9, #1
   13f28:	bne	13f64 <__mempcpy_chk@plt+0x2f54>
   13f2c:	mov	r2, r0
   13f30:	b	13fbc <__mempcpy_chk@plt+0x2fac>
   13f34:	mov	r0, #1
   13f38:	mov	r8, #0
   13f3c:	mov	r7, #5
   13f40:	mov	r2, #1
   13f44:	str	r0, [fp, #-72]	; 0xffffffb8
   13f48:	movw	r0, #30126	; 0x75ae
   13f4c:	movt	r0, #1
   13f50:	str	r0, [fp, #-88]	; 0xffffffa8
   13f54:	b	13f84 <__mempcpy_chk@plt+0x2f74>
   13f58:	mov	r2, #1
   13f5c:	tst	r9, #1
   13f60:	beq	13fbc <__mempcpy_chk@plt+0x2fac>
   13f64:	mov	r1, #1
   13f68:	mov	r8, #0
   13f6c:	mov	r7, #2
   13f70:	mov	r2, r0
   13f74:	str	r1, [fp, #-72]	; 0xffffffb8
   13f78:	movw	r1, #30130	; 0x75b2
   13f7c:	movt	r1, #1
   13f80:	str	r1, [fp, #-88]	; 0xffffffa8
   13f84:	mov	r3, #1
   13f88:	b	14010 <__mempcpy_chk@plt+0x3000>
   13f8c:	tst	r9, #1
   13f90:	beq	13fe0 <__mempcpy_chk@plt+0x2fd0>
   13f94:	mov	r0, #1
   13f98:	mov	r8, #0
   13f9c:	mov	r2, #1
   13fa0:	mov	r3, #1
   13fa4:	mov	r7, #5
   13fa8:	str	r0, [fp, #-72]	; 0xffffffb8
   13fac:	movw	r0, #30126	; 0x75ae
   13fb0:	movt	r0, #1
   13fb4:	str	r0, [fp, #-88]	; 0xffffffa8
   13fb8:	b	14010 <__mempcpy_chk@plt+0x3000>
   13fbc:	cmp	r4, #0
   13fc0:	mov	r8, #1
   13fc4:	mov	r3, #0
   13fc8:	mov	r7, #2
   13fcc:	movne	r0, #39	; 0x27
   13fd0:	strbne	r0, [r5]
   13fd4:	movw	r0, #30130	; 0x75b2
   13fd8:	movt	r0, #1
   13fdc:	b	14004 <__mempcpy_chk@plt+0x2ff4>
   13fe0:	cmp	r4, #0
   13fe4:	mov	r8, #1
   13fe8:	mov	r2, #1
   13fec:	mov	r7, #5
   13ff0:	mov	r3, #0
   13ff4:	movne	r0, #34	; 0x22
   13ff8:	strbne	r0, [r5]
   13ffc:	movw	r0, #30126	; 0x75ae
   14000:	movt	r0, #1
   14004:	str	r0, [fp, #-88]	; 0xffffffa8
   14008:	mov	r0, #1
   1400c:	str	r0, [fp, #-72]	; 0xffffffb8
   14010:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14014:	eor	r6, r3, #1
   14018:	str	r7, [fp, #-68]	; 0xffffffbc
   1401c:	str	r3, [fp, #-76]	; 0xffffffb4
   14020:	str	r2, [sp, #84]	; 0x54
   14024:	str	r6, [sp, #92]	; 0x5c
   14028:	cmp	r0, #0
   1402c:	movwne	r0, #1
   14030:	and	r1, r0, r3
   14034:	and	r1, r2, r1
   14038:	str	r1, [sp, #48]	; 0x30
   1403c:	sub	r1, r7, #2
   14040:	clz	r1, r1
   14044:	lsr	r1, r1, #5
   14048:	and	r1, r1, r3
   1404c:	str	r1, [sp, #64]	; 0x40
   14050:	subs	r1, r7, #2
   14054:	mov	r7, #0
   14058:	movwne	r1, #1
   1405c:	orr	r6, r1, r6
   14060:	and	r1, r1, r2
   14064:	and	r0, r0, r1
   14068:	str	r6, [sp, #68]	; 0x44
   1406c:	str	r0, [fp, #-60]	; 0xffffffc4
   14070:	orr	r0, r1, r3
   14074:	ldr	r1, [fp, #16]
   14078:	eor	r0, r0, #1
   1407c:	clz	r1, r1
   14080:	lsr	r1, r1, #5
   14084:	orr	r0, r1, r0
   14088:	str	r0, [fp, #-64]	; 0xffffffc0
   1408c:	eor	r0, r2, #1
   14090:	str	r0, [sp, #52]	; 0x34
   14094:	cmn	lr, #1
   14098:	beq	140a8 <__mempcpy_chk@plt+0x3098>
   1409c:	cmp	r7, lr
   140a0:	bne	140b4 <__mempcpy_chk@plt+0x30a4>
   140a4:	b	14bfc <__mempcpy_chk@plt+0x3bec>
   140a8:	ldrb	r0, [ip, r7]
   140ac:	cmp	r0, #0
   140b0:	beq	14c04 <__mempcpy_chk@plt+0x3bf4>
   140b4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   140b8:	mov	sl, #0
   140bc:	cmp	r0, #0
   140c0:	beq	140f8 <__mempcpy_chk@plt+0x30e8>
   140c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   140c8:	add	r5, r7, r0
   140cc:	cmp	r0, #2
   140d0:	bcc	140ec <__mempcpy_chk@plt+0x30dc>
   140d4:	cmn	lr, #1
   140d8:	bne	140ec <__mempcpy_chk@plt+0x30dc>
   140dc:	mov	r0, ip
   140e0:	bl	10f38 <strlen@plt>
   140e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   140e8:	mov	lr, r0
   140ec:	cmp	r5, lr
   140f0:	bls	14100 <__mempcpy_chk@plt+0x30f0>
   140f4:	ldr	r5, [fp, #-84]	; 0xffffffac
   140f8:	mov	r0, #0
   140fc:	b	1414c <__mempcpy_chk@plt+0x313c>
   14100:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14104:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14108:	add	r0, ip, r7
   1410c:	mov	r6, r4
   14110:	mov	r4, lr
   14114:	bl	10f2c <bcmp@plt>
   14118:	ldr	r2, [sp, #92]	; 0x5c
   1411c:	cmp	r0, #0
   14120:	ldr	r5, [fp, #-84]	; 0xffffffac
   14124:	mov	r1, r0
   14128:	movwne	r1, #1
   1412c:	orr	r1, r1, r2
   14130:	tst	r1, #1
   14134:	beq	14c8c <__mempcpy_chk@plt+0x3c7c>
   14138:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1413c:	clz	r0, r0
   14140:	mov	lr, r4
   14144:	mov	r4, r6
   14148:	lsr	r0, r0, #5
   1414c:	str	r0, [fp, #-52]	; 0xffffffcc
   14150:	ldrb	r6, [ip, r7]
   14154:	cmp	r6, #126	; 0x7e
   14158:	bhi	14688 <__mempcpy_chk@plt+0x3678>
   1415c:	add	r3, pc, #16
   14160:	mov	r9, #1
   14164:	mov	r2, #110	; 0x6e
   14168:	mov	r0, #97	; 0x61
   1416c:	mov	r1, #0
   14170:	ldr	pc, [r3, r6, lsl #2]
   14174:	andeq	r4, r1, r8, ror #9
   14178:	andeq	r4, r1, r8, lsl #13
   1417c:	andeq	r4, r1, r8, lsl #13
   14180:	andeq	r4, r1, r8, lsl #13
   14184:	andeq	r4, r1, r8, lsl #13
   14188:	andeq	r4, r1, r8, lsl #13
   1418c:	andeq	r4, r1, r8, lsl #13
   14190:	andeq	r4, r1, r4, ror #14
   14194:	andeq	r4, r1, r8, asr #9
   14198:	andeq	r4, r1, r0, asr #9
   1419c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141a0:	strdeq	r4, [r1], -r0
   141a4:			; <UNDEFINED> instruction: 0x000144b8
   141a8:	ldrdeq	r4, [r1], -r0
   141ac:	andeq	r4, r1, r8, lsl #13
   141b0:	andeq	r4, r1, r8, lsl #13
   141b4:	andeq	r4, r1, r8, lsl #13
   141b8:	andeq	r4, r1, r8, lsl #13
   141bc:	andeq	r4, r1, r8, lsl #13
   141c0:	andeq	r4, r1, r8, lsl #13
   141c4:	andeq	r4, r1, r8, lsl #13
   141c8:	andeq	r4, r1, r8, lsl #13
   141cc:	andeq	r4, r1, r8, lsl #13
   141d0:	andeq	r4, r1, r8, lsl #13
   141d4:	andeq	r4, r1, r8, lsl #13
   141d8:	andeq	r4, r1, r8, lsl #13
   141dc:	andeq	r4, r1, r8, lsl #13
   141e0:	andeq	r4, r1, r8, lsl #13
   141e4:	andeq	r4, r1, r8, lsl #13
   141e8:	andeq	r4, r1, r8, lsl #13
   141ec:	andeq	r4, r1, r8, lsl #13
   141f0:	andeq	r4, r1, r8, lsl #13
   141f4:	andeq	r4, r1, ip, ror #8
   141f8:	andeq	r4, r1, r0, ror r4
   141fc:	andeq	r4, r1, r0, ror r4
   14200:	andeq	r4, r1, r8, asr r4
   14204:	andeq	r4, r1, r0, ror r4
   14208:	andeq	r4, r1, r0, ror r3
   1420c:	andeq	r4, r1, r0, ror r4
   14210:	strdeq	r4, [r1], -r8
   14214:	andeq	r4, r1, r0, ror r4
   14218:	andeq	r4, r1, r0, ror r4
   1421c:	andeq	r4, r1, r0, ror r4
   14220:	andeq	r4, r1, r0, ror r3
   14224:	andeq	r4, r1, r0, ror r3
   14228:	andeq	r4, r1, r0, ror r3
   1422c:	andeq	r4, r1, r0, ror r3
   14230:	andeq	r4, r1, r0, ror r3
   14234:	andeq	r4, r1, r0, ror r3
   14238:	andeq	r4, r1, r0, ror r3
   1423c:	andeq	r4, r1, r0, ror r3
   14240:	andeq	r4, r1, r0, ror r3
   14244:	andeq	r4, r1, r0, ror r3
   14248:	andeq	r4, r1, r0, ror r3
   1424c:	andeq	r4, r1, r0, ror r3
   14250:	andeq	r4, r1, r0, ror r3
   14254:	andeq	r4, r1, r0, ror r3
   14258:	andeq	r4, r1, r0, ror r3
   1425c:	andeq	r4, r1, r0, ror r3
   14260:	andeq	r4, r1, r0, ror r4
   14264:	andeq	r4, r1, r0, ror r4
   14268:	andeq	r4, r1, r0, ror r4
   1426c:	andeq	r4, r1, r0, ror r4
   14270:	andeq	r4, r1, r0, asr #11
   14274:	andeq	r4, r1, r8, lsl #13
   14278:	andeq	r4, r1, r0, ror r3
   1427c:	andeq	r4, r1, r0, ror r3
   14280:	andeq	r4, r1, r0, ror r3
   14284:	andeq	r4, r1, r0, ror r3
   14288:	andeq	r4, r1, r0, ror r3
   1428c:	andeq	r4, r1, r0, ror r3
   14290:	andeq	r4, r1, r0, ror r3
   14294:	andeq	r4, r1, r0, ror r3
   14298:	andeq	r4, r1, r0, ror r3
   1429c:	andeq	r4, r1, r0, ror r3
   142a0:	andeq	r4, r1, r0, ror r3
   142a4:	andeq	r4, r1, r0, ror r3
   142a8:	andeq	r4, r1, r0, ror r3
   142ac:	andeq	r4, r1, r0, ror r3
   142b0:	andeq	r4, r1, r0, ror r3
   142b4:	andeq	r4, r1, r0, ror r3
   142b8:	andeq	r4, r1, r0, ror r3
   142bc:	andeq	r4, r1, r0, ror r3
   142c0:	andeq	r4, r1, r0, ror r3
   142c4:	andeq	r4, r1, r0, ror r3
   142c8:	andeq	r4, r1, r0, ror r3
   142cc:	andeq	r4, r1, r0, ror r3
   142d0:	andeq	r4, r1, r0, ror r3
   142d4:	andeq	r4, r1, r0, ror r3
   142d8:	andeq	r4, r1, r0, ror r3
   142dc:	andeq	r4, r1, r0, ror r3
   142e0:	andeq	r4, r1, r0, ror r4
   142e4:	muleq	r1, r8, r4
   142e8:	andeq	r4, r1, r0, ror r3
   142ec:	andeq	r4, r1, r0, ror r4
   142f0:	andeq	r4, r1, r0, ror r3
   142f4:	andeq	r4, r1, r0, ror r4
   142f8:	andeq	r4, r1, r0, ror r3
   142fc:	andeq	r4, r1, r0, ror r3
   14300:	andeq	r4, r1, r0, ror r3
   14304:	andeq	r4, r1, r0, ror r3
   14308:	andeq	r4, r1, r0, ror r3
   1430c:	andeq	r4, r1, r0, ror r3
   14310:	andeq	r4, r1, r0, ror r3
   14314:	andeq	r4, r1, r0, ror r3
   14318:	andeq	r4, r1, r0, ror r3
   1431c:	andeq	r4, r1, r0, ror r3
   14320:	andeq	r4, r1, r0, ror r3
   14324:	andeq	r4, r1, r0, ror r3
   14328:	andeq	r4, r1, r0, ror r3
   1432c:	andeq	r4, r1, r0, ror r3
   14330:	andeq	r4, r1, r0, ror r3
   14334:	andeq	r4, r1, r0, ror r3
   14338:	andeq	r4, r1, r0, ror r3
   1433c:	andeq	r4, r1, r0, ror r3
   14340:	andeq	r4, r1, r0, ror r3
   14344:	andeq	r4, r1, r0, ror r3
   14348:	andeq	r4, r1, r0, ror r3
   1434c:	andeq	r4, r1, r0, ror r3
   14350:	andeq	r4, r1, r0, ror r3
   14354:	andeq	r4, r1, r0, ror r3
   14358:	andeq	r4, r1, r0, ror r3
   1435c:	andeq	r4, r1, r0, ror r3
   14360:	andeq	r4, r1, ip, lsr #8
   14364:	andeq	r4, r1, r0, ror r4
   14368:	andeq	r4, r1, ip, lsr #8
   1436c:	andeq	r4, r1, r8, asr r4
   14370:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14374:	tst	r0, #1
   14378:	bne	143a4 <__mempcpy_chk@plt+0x3394>
   1437c:	ldr	r1, [fp, #16]
   14380:	ubfx	r0, r6, #5, #3
   14384:	mov	r2, #1
   14388:	ldr	r0, [r1, r0, lsl #2]
   1438c:	and	r1, r6, #31
   14390:	tst	r0, r2, lsl r1
   14394:	beq	143a4 <__mempcpy_chk@plt+0x3394>
   14398:	mov	r0, r6
   1439c:	mov	r1, r9
   143a0:	b	143b8 <__mempcpy_chk@plt+0x33a8>
   143a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   143a8:	mov	r1, r9
   143ac:	cmp	r0, #0
   143b0:	mov	r0, r6
   143b4:	beq	146f8 <__mempcpy_chk@plt+0x36e8>
   143b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   143bc:	tst	r2, #1
   143c0:	bne	14cc8 <__mempcpy_chk@plt+0x3cb8>
   143c4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   143c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   143cc:	subs	r2, r2, #2
   143d0:	movwne	r2, #1
   143d4:	orr	r2, r2, r3
   143d8:	tst	r2, #1
   143dc:	bne	14418 <__mempcpy_chk@plt+0x3408>
   143e0:	cmp	r8, r4
   143e4:	movcc	r2, #39	; 0x27
   143e8:	strbcc	r2, [r5, r8]
   143ec:	add	r2, r8, #1
   143f0:	cmp	r2, r4
   143f4:	movcc	r3, #36	; 0x24
   143f8:	strbcc	r3, [r5, r2]
   143fc:	add	r2, r8, #2
   14400:	add	r8, r8, #3
   14404:	cmp	r2, r4
   14408:	movcc	r3, #39	; 0x27
   1440c:	strbcc	r3, [r5, r2]
   14410:	mov	r2, #1
   14414:	str	r2, [fp, #-56]	; 0xffffffc8
   14418:	cmp	r8, r4
   1441c:	movcc	r2, #92	; 0x5c
   14420:	strbcc	r2, [r5, r8]
   14424:	add	r8, r8, #1
   14428:	b	1473c <__mempcpy_chk@plt+0x372c>
   1442c:	cmp	lr, #1
   14430:	beq	14458 <__mempcpy_chk@plt+0x3448>
   14434:	mov	r9, #0
   14438:	cmn	lr, #1
   1443c:	bne	14464 <__mempcpy_chk@plt+0x3454>
   14440:	ldrb	r0, [ip, #1]
   14444:	cmp	r0, #0
   14448:	beq	14458 <__mempcpy_chk@plt+0x3448>
   1444c:	mvn	lr, #0
   14450:	mov	sl, #0
   14454:	b	14370 <__mempcpy_chk@plt+0x3360>
   14458:	mov	r9, #0
   1445c:	cmp	r7, #0
   14460:	beq	1446c <__mempcpy_chk@plt+0x345c>
   14464:	mov	sl, #0
   14468:	b	14370 <__mempcpy_chk@plt+0x3360>
   1446c:	mov	r1, #1
   14470:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14474:	cmp	r0, #2
   14478:	bne	14490 <__mempcpy_chk@plt+0x3480>
   1447c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14480:	mov	r9, r1
   14484:	tst	r0, #1
   14488:	beq	14370 <__mempcpy_chk@plt+0x3360>
   1448c:	b	14cc8 <__mempcpy_chk@plt+0x3cb8>
   14490:	mov	r9, r1
   14494:	b	14370 <__mempcpy_chk@plt+0x3360>
   14498:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1449c:	cmp	r0, #2
   144a0:	bne	146dc <__mempcpy_chk@plt+0x36cc>
   144a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   144a8:	tst	r0, #1
   144ac:	bne	14cc8 <__mempcpy_chk@plt+0x3cb8>
   144b0:	mov	sl, #0
   144b4:	b	146f0 <__mempcpy_chk@plt+0x36e0>
   144b8:	mov	r0, #102	; 0x66
   144bc:	b	14764 <__mempcpy_chk@plt+0x3754>
   144c0:	mov	r2, #116	; 0x74
   144c4:	b	144d4 <__mempcpy_chk@plt+0x34c4>
   144c8:	mov	r0, #98	; 0x62
   144cc:	b	14764 <__mempcpy_chk@plt+0x3754>
   144d0:	mov	r2, #114	; 0x72
   144d4:	ldr	r0, [sp, #68]	; 0x44
   144d8:	tst	r0, #1
   144dc:	mov	r0, r2
   144e0:	bne	14764 <__mempcpy_chk@plt+0x3754>
   144e4:	b	14cc8 <__mempcpy_chk@plt+0x3cb8>
   144e8:	ldr	r0, [sp, #84]	; 0x54
   144ec:	tst	r0, #1
   144f0:	beq	14780 <__mempcpy_chk@plt+0x3770>
   144f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   144f8:	tst	r0, #1
   144fc:	bne	14db4 <__mempcpy_chk@plt+0x3da4>
   14500:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14504:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14508:	subs	r0, r0, #2
   1450c:	movwne	r0, #1
   14510:	orr	r0, r0, r1
   14514:	tst	r0, #1
   14518:	bne	14554 <__mempcpy_chk@plt+0x3544>
   1451c:	cmp	r8, r4
   14520:	movcc	r0, #39	; 0x27
   14524:	strbcc	r0, [r5, r8]
   14528:	add	r0, r8, #1
   1452c:	cmp	r0, r4
   14530:	movcc	r1, #36	; 0x24
   14534:	strbcc	r1, [r5, r0]
   14538:	add	r0, r8, #2
   1453c:	add	r8, r8, #3
   14540:	cmp	r0, r4
   14544:	movcc	r1, #39	; 0x27
   14548:	strbcc	r1, [r5, r0]
   1454c:	mov	r0, #1
   14550:	str	r0, [fp, #-56]	; 0xffffffc8
   14554:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14558:	cmp	r8, r4
   1455c:	mov	r9, #0
   14560:	mov	sl, #1
   14564:	mov	r6, #48	; 0x30
   14568:	movcc	r0, #92	; 0x5c
   1456c:	strbcc	r0, [r5, r8]
   14570:	add	r0, r8, #1
   14574:	cmp	r1, #2
   14578:	beq	14948 <__mempcpy_chk@plt+0x3938>
   1457c:	add	r1, r7, #1
   14580:	cmp	r1, lr
   14584:	bcs	14948 <__mempcpy_chk@plt+0x3938>
   14588:	ldrb	r1, [ip, r1]
   1458c:	sub	r1, r1, #48	; 0x30
   14590:	uxtb	r1, r1
   14594:	cmp	r1, #9
   14598:	bhi	14948 <__mempcpy_chk@plt+0x3938>
   1459c:	cmp	r0, r4
   145a0:	movcc	r1, #48	; 0x30
   145a4:	strbcc	r1, [r5, r0]
   145a8:	add	r0, r8, #2
   145ac:	add	r8, r8, #3
   145b0:	cmp	r0, r4
   145b4:	movcc	r1, #48	; 0x30
   145b8:	strbcc	r1, [r5, r0]
   145bc:	b	14370 <__mempcpy_chk@plt+0x3360>
   145c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   145c4:	mov	sl, #0
   145c8:	mov	r6, #63	; 0x3f
   145cc:	cmp	r0, #5
   145d0:	beq	14950 <__mempcpy_chk@plt+0x3940>
   145d4:	cmp	r0, #2
   145d8:	bne	149f8 <__mempcpy_chk@plt+0x39e8>
   145dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   145e0:	mov	r9, #0
   145e4:	tst	r0, #1
   145e8:	beq	14370 <__mempcpy_chk@plt+0x3360>
   145ec:	b	14cc8 <__mempcpy_chk@plt+0x3cb8>
   145f0:	mov	r0, #118	; 0x76
   145f4:	b	14764 <__mempcpy_chk@plt+0x3754>
   145f8:	mov	r0, #1
   145fc:	mov	r6, #39	; 0x27
   14600:	str	r0, [sp, #60]	; 0x3c
   14604:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14608:	cmp	r0, #2
   1460c:	bne	1479c <__mempcpy_chk@plt+0x378c>
   14610:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14614:	tst	r0, #1
   14618:	bne	14cc8 <__mempcpy_chk@plt+0x3cb8>
   1461c:	ldr	r2, [sp, #56]	; 0x38
   14620:	clz	r1, r4
   14624:	mov	sl, #0
   14628:	mov	r9, #1
   1462c:	lsr	r1, r1, #5
   14630:	cmp	r2, #0
   14634:	mov	r0, r2
   14638:	movwne	r0, #1
   1463c:	orrs	r0, r0, r1
   14640:	moveq	r2, r4
   14644:	moveq	r4, r0
   14648:	cmp	r8, r4
   1464c:	str	r2, [sp, #56]	; 0x38
   14650:	movcc	r0, #39	; 0x27
   14654:	strbcc	r0, [r5, r8]
   14658:	add	r0, r8, #1
   1465c:	cmp	r0, r4
   14660:	movcc	r1, #92	; 0x5c
   14664:	strbcc	r1, [r5, r0]
   14668:	add	r0, r8, #2
   1466c:	add	r8, r8, #3
   14670:	cmp	r0, r4
   14674:	movcc	r1, #39	; 0x27
   14678:	strbcc	r1, [r5, r0]
   1467c:	mov	r0, #0
   14680:	str	r0, [fp, #-56]	; 0xffffffc8
   14684:	b	14370 <__mempcpy_chk@plt+0x3360>
   14688:	ldr	r0, [sp, #40]	; 0x28
   1468c:	str	r4, [sp, #88]	; 0x58
   14690:	cmp	r0, #1
   14694:	bne	147a4 <__mempcpy_chk@plt+0x3794>
   14698:	str	lr, [sp, #28]
   1469c:	bl	10f08 <__ctype_b_loc@plt>
   146a0:	ldr	r0, [r0]
   146a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   146a8:	mov	r2, #1
   146ac:	add	r0, r0, r6, lsl #1
   146b0:	ldrb	r0, [r0, #1]
   146b4:	ubfx	r9, r0, #6, #1
   146b8:	ldr	r0, [sp, #52]	; 0x34
   146bc:	cmp	r2, #1
   146c0:	orr	r0, r9, r0
   146c4:	bhi	14a00 <__mempcpy_chk@plt+0x39f0>
   146c8:	tst	r0, #1
   146cc:	beq	14a00 <__mempcpy_chk@plt+0x39f0>
   146d0:	ldr	lr, [sp, #28]
   146d4:	ldr	r4, [sp, #88]	; 0x58
   146d8:	b	14370 <__mempcpy_chk@plt+0x3360>
   146dc:	ldr	r1, [sp, #48]	; 0x30
   146e0:	mov	sl, #0
   146e4:	mov	r0, #92	; 0x5c
   146e8:	cmp	r1, #0
   146ec:	beq	14764 <__mempcpy_chk@plt+0x3754>
   146f0:	mov	r6, #92	; 0x5c
   146f4:	mov	r9, #0
   146f8:	cmp	sl, #0
   146fc:	bne	14734 <__mempcpy_chk@plt+0x3724>
   14700:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14704:	tst	r0, #1
   14708:	beq	14734 <__mempcpy_chk@plt+0x3724>
   1470c:	cmp	r8, r4
   14710:	movcc	r0, #39	; 0x27
   14714:	strbcc	r0, [r5, r8]
   14718:	add	r0, r8, #1
   1471c:	add	r8, r8, #2
   14720:	cmp	r0, r4
   14724:	movcc	r1, #39	; 0x27
   14728:	strbcc	r1, [r5, r0]
   1472c:	mov	r0, #0
   14730:	str	r0, [fp, #-56]	; 0xffffffc8
   14734:	mov	r1, r9
   14738:	mov	r0, r6
   1473c:	cmp	r8, r4
   14740:	strbcc	r0, [r5, r8]
   14744:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14748:	add	r8, r8, #1
   1474c:	and	r0, r0, r1
   14750:	str	r0, [fp, #-48]	; 0xffffffd0
   14754:	add	r7, r7, #1
   14758:	cmn	lr, #1
   1475c:	bne	1409c <__mempcpy_chk@plt+0x308c>
   14760:	b	140a8 <__mempcpy_chk@plt+0x3098>
   14764:	ldr	r1, [sp, #84]	; 0x54
   14768:	mov	sl, #0
   1476c:	mov	r9, #0
   14770:	tst	r1, #1
   14774:	mov	r1, #0
   14778:	beq	14370 <__mempcpy_chk@plt+0x3360>
   1477c:	b	143b8 <__mempcpy_chk@plt+0x33a8>
   14780:	ldr	r0, [sp, #36]	; 0x24
   14784:	mov	r6, #0
   14788:	mov	sl, #0
   1478c:	mov	r9, #0
   14790:	cmp	r0, #0
   14794:	beq	14370 <__mempcpy_chk@plt+0x3360>
   14798:	b	14754 <__mempcpy_chk@plt+0x3744>
   1479c:	mov	r9, #1
   147a0:	b	14370 <__mempcpy_chk@plt+0x3360>
   147a4:	mov	r0, #0
   147a8:	cmn	lr, #1
   147ac:	sub	r4, fp, #40	; 0x28
   147b0:	str	r0, [fp, #-36]	; 0xffffffdc
   147b4:	str	r0, [fp, #-40]	; 0xffffffd8
   147b8:	bne	147cc <__mempcpy_chk@plt+0x37bc>
   147bc:	mov	r0, ip
   147c0:	bl	10f38 <strlen@plt>
   147c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   147c8:	mov	lr, r0
   147cc:	ldr	r0, [sp, #72]	; 0x48
   147d0:	mov	r9, #1
   147d4:	mov	r2, #0
   147d8:	str	lr, [sp, #28]
   147dc:	add	r0, r0, r7
   147e0:	str	r0, [sp, #20]
   147e4:	b	14828 <__mempcpy_chk@plt+0x3818>
   147e8:	ldr	r5, [sp, #44]	; 0x2c
   147ec:	add	r5, r0, r5
   147f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   147f4:	bl	10e6c <iswprint@plt>
   147f8:	cmp	r0, #0
   147fc:	sub	r4, fp, #40	; 0x28
   14800:	movwne	r0, #1
   14804:	and	r9, r9, r0
   14808:	mov	r0, r4
   1480c:	bl	10e30 <mbsinit@plt>
   14810:	mov	r2, r5
   14814:	ldr	lr, [sp, #28]
   14818:	ldr	r5, [fp, #-84]	; 0xffffffac
   1481c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14820:	cmp	r0, #0
   14824:	bne	146b8 <__mempcpy_chk@plt+0x36a8>
   14828:	add	r0, r2, r7
   1482c:	str	r2, [sp, #44]	; 0x2c
   14830:	mov	r3, r4
   14834:	add	r1, ip, r0
   14838:	str	r0, [sp, #24]
   1483c:	sub	r2, lr, r0
   14840:	sub	r0, fp, #44	; 0x2c
   14844:	bl	16a24 <__mempcpy_chk@plt+0x5a14>
   14848:	cmp	r0, #0
   1484c:	beq	14bf0 <__mempcpy_chk@plt+0x3be0>
   14850:	cmn	r0, #1
   14854:	beq	14bac <__mempcpy_chk@plt+0x3b9c>
   14858:	ldr	lr, [sp, #28]
   1485c:	cmn	r0, #2
   14860:	beq	14bb4 <__mempcpy_chk@plt+0x3ba4>
   14864:	ldr	r2, [sp, #64]	; 0x40
   14868:	ldr	r4, [sp, #88]	; 0x58
   1486c:	ldr	ip, [sp, #84]	; 0x54
   14870:	cmp	r0, #2
   14874:	mov	r1, #0
   14878:	movwcc	r1, #1
   1487c:	eor	r2, r2, #1
   14880:	orrs	r1, r2, r1
   14884:	bne	147e8 <__mempcpy_chk@plt+0x37d8>
   14888:	ldr	r1, [sp, #44]	; 0x2c
   1488c:	ldr	r2, [sp, #20]
   14890:	add	r1, r2, r1
   14894:	sub	r2, r0, #1
   14898:	b	148a8 <__mempcpy_chk@plt+0x3898>
   1489c:	add	r1, r1, #1
   148a0:	subs	r2, r2, #1
   148a4:	beq	147e8 <__mempcpy_chk@plt+0x37d8>
   148a8:	ldrb	r3, [r1]
   148ac:	sub	r3, r3, #91	; 0x5b
   148b0:	cmp	r3, #33	; 0x21
   148b4:	bhi	1489c <__mempcpy_chk@plt+0x388c>
   148b8:	add	r5, pc, #0
   148bc:	ldr	pc, [r5, r3, lsl #2]
   148c0:	andeq	r4, r1, r4, lsr #25
   148c4:	andeq	r4, r1, r4, lsr #25
   148c8:	muleq	r1, ip, r8
   148cc:	andeq	r4, r1, r4, lsr #25
   148d0:	muleq	r1, ip, r8
   148d4:	andeq	r4, r1, r4, lsr #25
   148d8:	muleq	r1, ip, r8
   148dc:	muleq	r1, ip, r8
   148e0:	muleq	r1, ip, r8
   148e4:	muleq	r1, ip, r8
   148e8:	muleq	r1, ip, r8
   148ec:	muleq	r1, ip, r8
   148f0:	muleq	r1, ip, r8
   148f4:	muleq	r1, ip, r8
   148f8:	muleq	r1, ip, r8
   148fc:	muleq	r1, ip, r8
   14900:	muleq	r1, ip, r8
   14904:	muleq	r1, ip, r8
   14908:	muleq	r1, ip, r8
   1490c:	muleq	r1, ip, r8
   14910:	muleq	r1, ip, r8
   14914:	muleq	r1, ip, r8
   14918:	muleq	r1, ip, r8
   1491c:	muleq	r1, ip, r8
   14920:	muleq	r1, ip, r8
   14924:	muleq	r1, ip, r8
   14928:	muleq	r1, ip, r8
   1492c:	muleq	r1, ip, r8
   14930:	muleq	r1, ip, r8
   14934:	muleq	r1, ip, r8
   14938:	muleq	r1, ip, r8
   1493c:	muleq	r1, ip, r8
   14940:	muleq	r1, ip, r8
   14944:	andeq	r4, r1, r4, lsr #25
   14948:	mov	r8, r0
   1494c:	b	14370 <__mempcpy_chk@plt+0x3360>
   14950:	ldr	r0, [sp, #32]
   14954:	cmp	r0, #0
   14958:	beq	149f8 <__mempcpy_chk@plt+0x39e8>
   1495c:	add	r0, r7, #2
   14960:	cmp	r0, lr
   14964:	bcs	149f8 <__mempcpy_chk@plt+0x39e8>
   14968:	add	r1, r7, ip
   1496c:	ldrb	r1, [r1, #1]
   14970:	cmp	r1, #63	; 0x3f
   14974:	bne	149f8 <__mempcpy_chk@plt+0x39e8>
   14978:	ldrb	r9, [ip, r0]
   1497c:	sub	r2, r9, #33	; 0x21
   14980:	cmp	r2, #29
   14984:	bhi	149f8 <__mempcpy_chk@plt+0x39e8>
   14988:	movw	r1, #20929	; 0x51c1
   1498c:	mov	r3, #1
   14990:	movt	r1, #14336	; 0x3800
   14994:	tst	r1, r3, lsl r2
   14998:	beq	149f8 <__mempcpy_chk@plt+0x39e8>
   1499c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   149a0:	tst	r1, #1
   149a4:	bne	14cc8 <__mempcpy_chk@plt+0x3cb8>
   149a8:	cmp	r8, r4
   149ac:	add	r2, r8, #1
   149b0:	mov	r6, r9
   149b4:	mov	r7, r0
   149b8:	mov	r9, #0
   149bc:	movcc	r1, #63	; 0x3f
   149c0:	strbcc	r1, [r5, r8]
   149c4:	cmp	r2, r4
   149c8:	movcc	r1, #34	; 0x22
   149cc:	strbcc	r1, [r5, r2]
   149d0:	add	r2, r8, #2
   149d4:	cmp	r2, r4
   149d8:	movcc	r1, #34	; 0x22
   149dc:	strbcc	r1, [r5, r2]
   149e0:	add	r2, r8, #3
   149e4:	add	r8, r8, #4
   149e8:	cmp	r2, r4
   149ec:	movcc	r1, #63	; 0x3f
   149f0:	strbcc	r1, [r5, r2]
   149f4:	b	14370 <__mempcpy_chk@plt+0x3360>
   149f8:	mov	r9, #0
   149fc:	b	14370 <__mempcpy_chk@plt+0x3360>
   14a00:	ldr	lr, [sp, #28]
   14a04:	ldr	r4, [fp, #-56]	; 0xffffffc8
   14a08:	add	r1, r2, r7
   14a0c:	mov	r2, #0
   14a10:	str	r1, [sp, #44]	; 0x2c
   14a14:	tst	r0, #1
   14a18:	bne	14b34 <__mempcpy_chk@plt+0x3b24>
   14a1c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14a20:	tst	r1, #1
   14a24:	bne	14cc4 <__mempcpy_chk@plt+0x3cb4>
   14a28:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14a2c:	subs	r2, r1, #2
   14a30:	movwne	r2, #1
   14a34:	orr	r2, r2, r4
   14a38:	tst	r2, #1
   14a3c:	bne	14a80 <__mempcpy_chk@plt+0x3a70>
   14a40:	ldr	r1, [sp, #88]	; 0x58
   14a44:	add	r2, r8, #1
   14a48:	mov	r4, #1
   14a4c:	cmp	r8, r1
   14a50:	movcc	r1, #39	; 0x27
   14a54:	strbcc	r1, [r5, r8]
   14a58:	ldr	r1, [sp, #88]	; 0x58
   14a5c:	cmp	r2, r1
   14a60:	movcc	r1, #36	; 0x24
   14a64:	strbcc	r1, [r5, r2]
   14a68:	ldr	r1, [sp, #88]	; 0x58
   14a6c:	add	r2, r8, #2
   14a70:	add	r8, r8, #3
   14a74:	cmp	r2, r1
   14a78:	movcc	r1, #39	; 0x27
   14a7c:	strbcc	r1, [r5, r2]
   14a80:	ldr	r1, [sp, #88]	; 0x58
   14a84:	add	r2, r8, #1
   14a88:	cmp	r8, r1
   14a8c:	movcc	r1, #92	; 0x5c
   14a90:	strbcc	r1, [r5, r8]
   14a94:	ldr	r1, [sp, #88]	; 0x58
   14a98:	cmp	r2, r1
   14a9c:	bcs	14ab0 <__mempcpy_chk@plt+0x3aa0>
   14aa0:	uxtb	r3, r6
   14aa4:	mov	r1, #48	; 0x30
   14aa8:	orr	r3, r1, r3, lsr #6
   14aac:	strb	r3, [r5, r2]
   14ab0:	ldr	r1, [sp, #88]	; 0x58
   14ab4:	add	r2, r8, #2
   14ab8:	add	r8, r8, #3
   14abc:	cmp	r2, r1
   14ac0:	lsrcc	r3, r6, #3
   14ac4:	movcc	r1, #6
   14ac8:	bficc	r3, r1, #3, #29
   14acc:	mov	r1, #6
   14ad0:	bfi	r6, r1, #3, #29
   14ad4:	strbcc	r3, [r5, r2]
   14ad8:	mov	r2, #1
   14adc:	b	14b5c <__mempcpy_chk@plt+0x3b4c>
   14ae0:	ldr	r1, [sp, #88]	; 0x58
   14ae4:	ldr	r5, [fp, #-84]	; 0xffffffac
   14ae8:	ldr	r4, [sp, #88]	; 0x58
   14aec:	cmp	r8, r1
   14af0:	movcc	r1, #39	; 0x27
   14af4:	strbcc	r1, [r5, r8]
   14af8:	add	r1, r8, #1
   14afc:	add	r8, r8, #2
   14b00:	cmp	r1, r4
   14b04:	movcc	r4, #39	; 0x27
   14b08:	strbcc	r4, [r5, r1]
   14b0c:	mov	r4, #0
   14b10:	ldr	r1, [sp, #88]	; 0x58
   14b14:	cmp	r8, r1
   14b18:	ldr	r1, [sp, #72]	; 0x48
   14b1c:	strbcc	r6, [r5, r8]
   14b20:	add	r8, r8, #1
   14b24:	ldrb	r6, [r1, r7]
   14b28:	mov	r7, r3
   14b2c:	tst	r0, #1
   14b30:	beq	14a1c <__mempcpy_chk@plt+0x3a0c>
   14b34:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14b38:	tst	r1, #1
   14b3c:	beq	14b54 <__mempcpy_chk@plt+0x3b44>
   14b40:	ldr	r1, [sp, #88]	; 0x58
   14b44:	cmp	r8, r1
   14b48:	movcc	r1, #92	; 0x5c
   14b4c:	strbcc	r1, [r5, r8]
   14b50:	add	r8, r8, #1
   14b54:	mov	r1, #0
   14b58:	str	r1, [fp, #-52]	; 0xffffffcc
   14b5c:	ldr	r1, [sp, #44]	; 0x2c
   14b60:	add	r3, r7, #1
   14b64:	and	sl, r2, #1
   14b68:	cmp	r1, r3
   14b6c:	bls	14b90 <__mempcpy_chk@plt+0x3b80>
   14b70:	cmp	sl, #0
   14b74:	mvn	r5, r4
   14b78:	movwne	sl, #1
   14b7c:	orr	r5, r5, sl
   14b80:	tst	r5, #1
   14b84:	beq	14ae0 <__mempcpy_chk@plt+0x3ad0>
   14b88:	ldr	r5, [fp, #-84]	; 0xffffffac
   14b8c:	b	14b10 <__mempcpy_chk@plt+0x3b00>
   14b90:	str	r4, [fp, #-56]	; 0xffffffc8
   14b94:	ldr	r4, [sp, #88]	; 0x58
   14b98:	cmp	sl, #0
   14b9c:	movwne	sl, #1
   14ba0:	cmp	sl, #0
   14ba4:	beq	14700 <__mempcpy_chk@plt+0x36f0>
   14ba8:	b	14734 <__mempcpy_chk@plt+0x3724>
   14bac:	mov	r9, #0
   14bb0:	b	14bf0 <__mempcpy_chk@plt+0x3be0>
   14bb4:	ldr	r0, [sp, #24]
   14bb8:	mov	r9, #0
   14bbc:	cmp	lr, r0
   14bc0:	bls	14bf0 <__mempcpy_chk@plt+0x3be0>
   14bc4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14bc8:	ldr	r2, [sp, #44]	; 0x2c
   14bcc:	add	r0, ip, r7
   14bd0:	ldrb	r1, [r0, r2]
   14bd4:	cmp	r1, #0
   14bd8:	beq	146b8 <__mempcpy_chk@plt+0x36a8>
   14bdc:	add	r2, r2, #1
   14be0:	add	r1, r7, r2
   14be4:	cmp	r1, lr
   14be8:	bcc	14bd0 <__mempcpy_chk@plt+0x3bc0>
   14bec:	b	146b8 <__mempcpy_chk@plt+0x36a8>
   14bf0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14bf4:	ldr	r2, [sp, #44]	; 0x2c
   14bf8:	b	146b8 <__mempcpy_chk@plt+0x36a8>
   14bfc:	mov	lr, r7
   14c00:	b	14c08 <__mempcpy_chk@plt+0x3bf8>
   14c04:	mvn	lr, #0
   14c08:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14c0c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14c10:	eor	r0, r1, #2
   14c14:	orr	r0, r0, r8
   14c18:	clz	r0, r0
   14c1c:	lsr	r0, r0, #5
   14c20:	tst	r2, r0
   14c24:	bne	14cc8 <__mempcpy_chk@plt+0x3cb8>
   14c28:	subs	r0, r1, #2
   14c2c:	movwne	r0, #1
   14c30:	orr	r0, r2, r0
   14c34:	tst	r0, #1
   14c38:	ldreq	r0, [sp, #60]	; 0x3c
   14c3c:	eoreq	r0, r0, #1
   14c40:	tsteq	r0, #1
   14c44:	bne	14d5c <__mempcpy_chk@plt+0x3d4c>
   14c48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14c4c:	mov	sl, lr
   14c50:	tst	r0, #1
   14c54:	bne	14d28 <__mempcpy_chk@plt+0x3d18>
   14c58:	ldr	r6, [sp, #56]	; 0x38
   14c5c:	mov	r9, #0
   14c60:	cmp	r6, #0
   14c64:	beq	14d54 <__mempcpy_chk@plt+0x3d44>
   14c68:	ldr	r0, [sp, #84]	; 0x54
   14c6c:	mov	r1, #0
   14c70:	mov	r7, #2
   14c74:	cmp	r4, #0
   14c78:	str	r1, [fp, #-48]	; 0xffffffd0
   14c7c:	mov	r1, #0
   14c80:	str	r1, [fp, #-76]	; 0xffffffb4
   14c84:	beq	13e24 <__mempcpy_chk@plt+0x2e14>
   14c88:	b	14d5c <__mempcpy_chk@plt+0x3d4c>
   14c8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14c90:	ldr	r1, [fp, #12]
   14c94:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14c98:	mov	lr, r4
   14c9c:	mov	r4, r6
   14ca0:	b	14ce8 <__mempcpy_chk@plt+0x3cd8>
   14ca4:	tst	ip, #1
   14ca8:	ldr	r5, [fp, #-84]	; 0xffffffac
   14cac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14cb0:	ldr	r1, [fp, #12]
   14cb4:	mov	r0, #2
   14cb8:	movwne	r0, #4
   14cbc:	mov	r2, r0
   14cc0:	b	14ce8 <__mempcpy_chk@plt+0x3cd8>
   14cc4:	ldr	r4, [sp, #88]	; 0x58
   14cc8:	ldr	r1, [sp, #84]	; 0x54
   14ccc:	mov	r0, #2
   14cd0:	tst	r1, #1
   14cd4:	movwne	r0, #4
   14cd8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14cdc:	ldr	r1, [fp, #12]
   14ce0:	cmp	r2, #2
   14ce4:	moveq	r2, r0
   14ce8:	mov	r0, #0
   14cec:	bic	r1, r1, #2
   14cf0:	str	r2, [sp]
   14cf4:	mov	r2, ip
   14cf8:	mov	r3, lr
   14cfc:	str	r0, [sp, #8]
   14d00:	ldr	r0, [sp, #76]	; 0x4c
   14d04:	str	r1, [sp, #4]
   14d08:	mov	r1, r4
   14d0c:	str	r0, [sp, #12]
   14d10:	ldr	r0, [sp, #80]	; 0x50
   14d14:	str	r0, [sp, #16]
   14d18:	mov	r0, r5
   14d1c:	bl	13d94 <__mempcpy_chk@plt+0x2d84>
   14d20:	mov	r8, r0
   14d24:	b	14da8 <__mempcpy_chk@plt+0x3d98>
   14d28:	mov	r0, #5
   14d2c:	ldr	r1, [sp, #56]	; 0x38
   14d30:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14d34:	mov	r3, sl
   14d38:	str	r0, [sp]
   14d3c:	ldr	r0, [fp, #12]
   14d40:	str	r0, [sp, #4]
   14d44:	ldr	r0, [fp, #16]
   14d48:	str	r0, [sp, #8]
   14d4c:	ldr	r0, [sp, #76]	; 0x4c
   14d50:	b	14d0c <__mempcpy_chk@plt+0x3cfc>
   14d54:	mov	r0, #0
   14d58:	str	r0, [fp, #-76]	; 0xffffffb4
   14d5c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14d60:	cmp	r1, #0
   14d64:	beq	14d9c <__mempcpy_chk@plt+0x3d8c>
   14d68:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14d6c:	tst	r0, #1
   14d70:	bne	14d9c <__mempcpy_chk@plt+0x3d8c>
   14d74:	ldrb	r0, [r1]
   14d78:	cmp	r0, #0
   14d7c:	beq	14d9c <__mempcpy_chk@plt+0x3d8c>
   14d80:	add	r1, r1, #1
   14d84:	cmp	r8, r4
   14d88:	strbcc	r0, [r5, r8]
   14d8c:	add	r8, r8, #1
   14d90:	ldrb	r0, [r1], #1
   14d94:	cmp	r0, #0
   14d98:	bne	14d84 <__mempcpy_chk@plt+0x3d74>
   14d9c:	cmp	r8, r4
   14da0:	movcc	r0, #0
   14da4:	strbcc	r0, [r5, r8]
   14da8:	mov	r0, r8
   14dac:	sub	sp, fp, #28
   14db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db4:	mov	r0, #4
   14db8:	b	14cd8 <__mempcpy_chk@plt+0x3cc8>
   14dbc:	bl	10ff8 <abort@plt>
   14dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dc4:	add	fp, sp, #28
   14dc8:	sub	sp, sp, #28
   14dcc:	movw	r5, #33128	; 0x8168
   14dd0:	cmp	r2, #0
   14dd4:	mov	r4, r1
   14dd8:	mov	r7, r0
   14ddc:	str	r0, [sp, #20]
   14de0:	movt	r5, #2
   14de4:	movne	r5, r2
   14de8:	bl	10f44 <__errno_location@plt>
   14dec:	mov	sl, r0
   14df0:	ldr	r2, [r5, #40]	; 0x28
   14df4:	ldr	r3, [r5, #44]	; 0x2c
   14df8:	ldm	r5, {r0, r1}
   14dfc:	orr	r8, r1, #1
   14e00:	add	r9, r5, #8
   14e04:	mov	r1, #0
   14e08:	ldr	r6, [sl]
   14e0c:	stm	sp, {r0, r8, r9}
   14e10:	mov	r0, #0
   14e14:	str	r2, [sp, #12]
   14e18:	str	r3, [sp, #16]
   14e1c:	mov	r2, r7
   14e20:	mov	r3, r4
   14e24:	str	r6, [sp, #24]
   14e28:	mov	r6, r4
   14e2c:	bl	13d94 <__mempcpy_chk@plt+0x2d84>
   14e30:	add	r7, r0, #1
   14e34:	mov	r0, r7
   14e38:	bl	16164 <__mempcpy_chk@plt+0x5154>
   14e3c:	mov	r4, r0
   14e40:	ldr	r0, [r5]
   14e44:	ldr	r2, [r5, #44]	; 0x2c
   14e48:	ldr	r1, [r5, #40]	; 0x28
   14e4c:	mov	r3, r6
   14e50:	stm	sp, {r0, r8, r9}
   14e54:	str	r2, [sp, #16]
   14e58:	ldr	r2, [sp, #20]
   14e5c:	str	r1, [sp, #12]
   14e60:	mov	r0, r4
   14e64:	mov	r1, r7
   14e68:	bl	13d94 <__mempcpy_chk@plt+0x2d84>
   14e6c:	ldr	r0, [sp, #24]
   14e70:	str	r0, [sl]
   14e74:	mov	r0, r4
   14e78:	sub	sp, fp, #28
   14e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e84:	add	fp, sp, #28
   14e88:	sub	sp, sp, #36	; 0x24
   14e8c:	movw	r8, #33128	; 0x8168
   14e90:	cmp	r3, #0
   14e94:	mov	r4, r2
   14e98:	str	r2, [sp, #24]
   14e9c:	mov	r5, r1
   14ea0:	mov	r6, r0
   14ea4:	str	r0, [sp, #20]
   14ea8:	movt	r8, #2
   14eac:	movne	r8, r3
   14eb0:	bl	10f44 <__errno_location@plt>
   14eb4:	str	r0, [sp, #28]
   14eb8:	ldr	r1, [r8, #40]	; 0x28
   14ebc:	ldr	r2, [r8, #44]	; 0x2c
   14ec0:	ldr	r7, [r0]
   14ec4:	cmp	r4, #0
   14ec8:	add	sl, r8, #8
   14ecc:	mov	r0, #0
   14ed0:	ldm	r8, {r3, r9}
   14ed4:	orreq	r9, r9, #1
   14ed8:	stm	sp, {r3, r9, sl}
   14edc:	str	r1, [sp, #12]
   14ee0:	str	r2, [sp, #16]
   14ee4:	mov	r1, #0
   14ee8:	mov	r2, r6
   14eec:	mov	r3, r5
   14ef0:	str	r7, [sp, #32]
   14ef4:	mov	r7, r5
   14ef8:	bl	13d94 <__mempcpy_chk@plt+0x2d84>
   14efc:	add	r4, r0, #1
   14f00:	mov	r5, r0
   14f04:	mov	r0, r4
   14f08:	bl	16164 <__mempcpy_chk@plt+0x5154>
   14f0c:	mov	r6, r0
   14f10:	ldr	r0, [r8]
   14f14:	ldr	r2, [r8, #44]	; 0x2c
   14f18:	ldr	r1, [r8, #40]	; 0x28
   14f1c:	mov	r3, r7
   14f20:	stm	sp, {r0, r9, sl}
   14f24:	str	r2, [sp, #16]
   14f28:	ldr	r2, [sp, #20]
   14f2c:	str	r1, [sp, #12]
   14f30:	mov	r0, r6
   14f34:	mov	r1, r4
   14f38:	bl	13d94 <__mempcpy_chk@plt+0x2d84>
   14f3c:	ldr	r0, [sp, #24]
   14f40:	ldr	r1, [sp, #32]
   14f44:	ldr	r2, [sp, #28]
   14f48:	cmp	r0, #0
   14f4c:	str	r1, [r2]
   14f50:	strne	r5, [r0]
   14f54:	mov	r0, r6
   14f58:	sub	sp, fp, #28
   14f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f64:	add	fp, sp, #24
   14f68:	movw	r5, #33012	; 0x80f4
   14f6c:	movw	r8, #33008	; 0x80f0
   14f70:	movt	r5, #2
   14f74:	movt	r8, #2
   14f78:	ldr	r0, [r5]
   14f7c:	ldr	r4, [r8]
   14f80:	cmp	r0, #2
   14f84:	blt	14fb0 <__mempcpy_chk@plt+0x3fa0>
   14f88:	add	r7, r4, #12
   14f8c:	mov	r6, #0
   14f90:	ldr	r0, [r7, r6, lsl #3]
   14f94:	bl	1278c <__mempcpy_chk@plt+0x177c>
   14f98:	ldr	r1, [r5]
   14f9c:	add	r2, r6, #2
   14fa0:	add	r0, r6, #1
   14fa4:	mov	r6, r0
   14fa8:	cmp	r2, r1
   14fac:	blt	14f90 <__mempcpy_chk@plt+0x3f80>
   14fb0:	ldr	r0, [r4, #4]
   14fb4:	movw	r9, #33176	; 0x8198
   14fb8:	movw	r7, #33016	; 0x80f8
   14fbc:	movt	r9, #2
   14fc0:	movt	r7, #2
   14fc4:	cmp	r0, r9
   14fc8:	beq	14fd8 <__mempcpy_chk@plt+0x3fc8>
   14fcc:	bl	1278c <__mempcpy_chk@plt+0x177c>
   14fd0:	mov	r0, #256	; 0x100
   14fd4:	stm	r7, {r0, r9}
   14fd8:	cmp	r4, r7
   14fdc:	beq	14fec <__mempcpy_chk@plt+0x3fdc>
   14fe0:	mov	r0, r4
   14fe4:	bl	1278c <__mempcpy_chk@plt+0x177c>
   14fe8:	str	r7, [r8]
   14fec:	mov	r0, #1
   14ff0:	str	r0, [r5]
   14ff4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ff8:	movw	r3, #33128	; 0x8168
   14ffc:	mvn	r2, #0
   15000:	movt	r3, #2
   15004:	b	15008 <__mempcpy_chk@plt+0x3ff8>
   15008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1500c:	add	fp, sp, #28
   15010:	sub	sp, sp, #44	; 0x2c
   15014:	mov	r7, r3
   15018:	str	r2, [sp, #36]	; 0x24
   1501c:	str	r1, [sp, #32]
   15020:	mov	r5, r0
   15024:	bl	10f44 <__errno_location@plt>
   15028:	cmp	r5, #0
   1502c:	bmi	1519c <__mempcpy_chk@plt+0x418c>
   15030:	cmn	r5, #-2147483647	; 0x80000001
   15034:	beq	1519c <__mempcpy_chk@plt+0x418c>
   15038:	movw	r8, #33012	; 0x80f4
   1503c:	movw	r4, #33008	; 0x80f0
   15040:	str	r0, [sp, #28]
   15044:	ldr	r0, [r0]
   15048:	movt	r8, #2
   1504c:	movt	r4, #2
   15050:	ldr	r1, [r8]
   15054:	ldr	r6, [r4]
   15058:	str	r0, [sp, #24]
   1505c:	cmp	r1, r5
   15060:	ble	1506c <__mempcpy_chk@plt+0x405c>
   15064:	mov	sl, r6
   15068:	b	150d8 <__mempcpy_chk@plt+0x40c8>
   1506c:	movw	r9, #33016	; 0x80f8
   15070:	mov	r0, #8
   15074:	str	r1, [fp, #-32]	; 0xffffffe0
   15078:	sub	r1, r5, r1
   1507c:	mvn	r3, #-2147483648	; 0x80000000
   15080:	movt	r9, #2
   15084:	str	r0, [sp]
   15088:	add	r2, r1, #1
   1508c:	sub	r1, fp, #32
   15090:	subs	r0, r6, r9
   15094:	movne	r0, r6
   15098:	bl	16364 <__mempcpy_chk@plt+0x5354>
   1509c:	mov	sl, r0
   150a0:	cmp	r6, r9
   150a4:	str	r0, [r4]
   150a8:	bne	150b4 <__mempcpy_chk@plt+0x40a4>
   150ac:	ldrd	r0, [r9]
   150b0:	stm	sl, {r0, r1}
   150b4:	ldr	r1, [r8]
   150b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   150bc:	add	r0, sl, r1, lsl #3
   150c0:	sub	r1, r2, r1
   150c4:	lsl	r2, r1, #3
   150c8:	mov	r1, #0
   150cc:	bl	10f5c <memset@plt>
   150d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   150d4:	str	r0, [r8]
   150d8:	mov	r9, sl
   150dc:	ldm	r7, {r0, r1}
   150e0:	orr	r8, r1, #1
   150e4:	add	r1, r7, #8
   150e8:	ldr	r2, [r7, #40]	; 0x28
   150ec:	ldr	r3, [r7, #44]	; 0x2c
   150f0:	ldr	r6, [r9, r5, lsl #3]!
   150f4:	str	r1, [sp, #20]
   150f8:	ldr	r4, [r9, #4]!
   150fc:	stm	sp, {r0, r8}
   15100:	add	r0, sp, #8
   15104:	stm	r0, {r1, r2, r3}
   15108:	ldr	r2, [sp, #32]
   1510c:	ldr	r3, [sp, #36]	; 0x24
   15110:	mov	r1, r6
   15114:	mov	r0, r4
   15118:	bl	13d94 <__mempcpy_chk@plt+0x2d84>
   1511c:	cmp	r6, r0
   15120:	bhi	15184 <__mempcpy_chk@plt+0x4174>
   15124:	add	r6, r0, #1
   15128:	movw	r0, #33176	; 0x8198
   1512c:	movt	r0, #2
   15130:	str	r6, [sl, r5, lsl #3]
   15134:	cmp	r4, r0
   15138:	beq	15144 <__mempcpy_chk@plt+0x4134>
   1513c:	mov	r0, r4
   15140:	bl	1278c <__mempcpy_chk@plt+0x177c>
   15144:	mov	r0, r6
   15148:	bl	16164 <__mempcpy_chk@plt+0x5154>
   1514c:	str	r0, [r9]
   15150:	mov	r4, r0
   15154:	add	r3, sp, #8
   15158:	ldr	r0, [r7]
   1515c:	ldr	r1, [r7, #40]	; 0x28
   15160:	ldr	r2, [r7, #44]	; 0x2c
   15164:	stm	sp, {r0, r8}
   15168:	ldr	r0, [sp, #20]
   1516c:	stm	r3, {r0, r1, r2}
   15170:	ldr	r2, [sp, #32]
   15174:	ldr	r3, [sp, #36]	; 0x24
   15178:	mov	r0, r4
   1517c:	mov	r1, r6
   15180:	bl	13d94 <__mempcpy_chk@plt+0x2d84>
   15184:	ldr	r0, [sp, #28]
   15188:	ldr	r1, [sp, #24]
   1518c:	str	r1, [r0]
   15190:	mov	r0, r4
   15194:	sub	sp, fp, #28
   15198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1519c:	bl	10ff8 <abort@plt>
   151a0:	movw	r3, #33128	; 0x8168
   151a4:	movt	r3, #2
   151a8:	b	15008 <__mempcpy_chk@plt+0x3ff8>
   151ac:	movw	r3, #33128	; 0x8168
   151b0:	mov	r1, r0
   151b4:	mov	r0, #0
   151b8:	mvn	r2, #0
   151bc:	movt	r3, #2
   151c0:	b	15008 <__mempcpy_chk@plt+0x3ff8>
   151c4:	movw	r3, #33128	; 0x8168
   151c8:	mov	r2, r1
   151cc:	mov	r1, r0
   151d0:	mov	r0, #0
   151d4:	movt	r3, #2
   151d8:	b	15008 <__mempcpy_chk@plt+0x3ff8>
   151dc:	push	{fp, lr}
   151e0:	mov	fp, sp
   151e4:	sub	sp, sp, #48	; 0x30
   151e8:	vmov.i32	q8, #0	; 0x00000000
   151ec:	mov	ip, #32
   151f0:	mov	r3, sp
   151f4:	mov	lr, r2
   151f8:	cmp	r1, #10
   151fc:	add	r2, r3, #16
   15200:	vst1.64	{d16-d17}, [r3], ip
   15204:	vst1.64	{d16-d17}, [r2]
   15208:	vst1.64	{d16-d17}, [r3]
   1520c:	beq	1522c <__mempcpy_chk@plt+0x421c>
   15210:	str	r1, [sp]
   15214:	mov	r3, sp
   15218:	mov	r1, lr
   1521c:	mvn	r2, #0
   15220:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   15224:	mov	sp, fp
   15228:	pop	{fp, pc}
   1522c:	bl	10ff8 <abort@plt>
   15230:	push	{r4, sl, fp, lr}
   15234:	add	fp, sp, #8
   15238:	sub	sp, sp, #48	; 0x30
   1523c:	vmov.i32	q8, #0	; 0x00000000
   15240:	mov	ip, r3
   15244:	mov	r3, sp
   15248:	mov	lr, #32
   1524c:	cmp	r1, #10
   15250:	add	r4, r3, #16
   15254:	vst1.64	{d16-d17}, [r3], lr
   15258:	vst1.64	{d16-d17}, [r4]
   1525c:	vst1.64	{d16-d17}, [r3]
   15260:	beq	15280 <__mempcpy_chk@plt+0x4270>
   15264:	str	r1, [sp]
   15268:	mov	r1, r2
   1526c:	mov	r3, sp
   15270:	mov	r2, ip
   15274:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   15278:	sub	sp, fp, #8
   1527c:	pop	{r4, sl, fp, pc}
   15280:	bl	10ff8 <abort@plt>
   15284:	push	{fp, lr}
   15288:	mov	fp, sp
   1528c:	sub	sp, sp, #48	; 0x30
   15290:	vmov.i32	q8, #0	; 0x00000000
   15294:	mov	r3, sp
   15298:	mov	ip, #32
   1529c:	cmp	r0, #10
   152a0:	add	r2, r3, #16
   152a4:	vst1.64	{d16-d17}, [r3], ip
   152a8:	vst1.64	{d16-d17}, [r2]
   152ac:	vst1.64	{d16-d17}, [r3]
   152b0:	beq	152d0 <__mempcpy_chk@plt+0x42c0>
   152b4:	str	r0, [sp]
   152b8:	mov	r3, sp
   152bc:	mov	r0, #0
   152c0:	mvn	r2, #0
   152c4:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   152c8:	mov	sp, fp
   152cc:	pop	{fp, pc}
   152d0:	bl	10ff8 <abort@plt>
   152d4:	push	{fp, lr}
   152d8:	mov	fp, sp
   152dc:	sub	sp, sp, #48	; 0x30
   152e0:	vmov.i32	q8, #0	; 0x00000000
   152e4:	mov	r3, sp
   152e8:	mov	ip, #32
   152ec:	cmp	r0, #10
   152f0:	add	lr, r3, #16
   152f4:	vst1.64	{d16-d17}, [r3], ip
   152f8:	vst1.64	{d16-d17}, [lr]
   152fc:	vst1.64	{d16-d17}, [r3]
   15300:	beq	1531c <__mempcpy_chk@plt+0x430c>
   15304:	str	r0, [sp]
   15308:	mov	r3, sp
   1530c:	mov	r0, #0
   15310:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   15314:	mov	sp, fp
   15318:	pop	{fp, pc}
   1531c:	bl	10ff8 <abort@plt>
   15320:	push	{r4, sl, fp, lr}
   15324:	add	fp, sp, #8
   15328:	sub	sp, sp, #48	; 0x30
   1532c:	mov	lr, r0
   15330:	movw	r0, #33128	; 0x8168
   15334:	mov	ip, r1
   15338:	mov	r1, #32
   1533c:	mov	r4, #1
   15340:	movt	r0, #2
   15344:	add	r3, r0, #16
   15348:	vld1.64	{d16-d17}, [r0], r1
   1534c:	vld1.64	{d20-d21}, [r0]
   15350:	vld1.64	{d18-d19}, [r3]
   15354:	mov	r3, sp
   15358:	add	r0, r3, #32
   1535c:	add	r1, r3, #16
   15360:	vst1.64	{d20-d21}, [r0]
   15364:	mov	r0, #28
   15368:	vst1.64	{d18-d19}, [r1]
   1536c:	mov	r1, r3
   15370:	and	r0, r0, r2, lsr #3
   15374:	and	r2, r2, #31
   15378:	vst1.64	{d16-d17}, [r1], r0
   1537c:	ldr	r0, [r1, #8]
   15380:	bic	r4, r4, r0, lsr r2
   15384:	eor	r0, r0, r4, lsl r2
   15388:	mov	r2, ip
   1538c:	str	r0, [r1, #8]
   15390:	mov	r0, #0
   15394:	mov	r1, lr
   15398:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   1539c:	sub	sp, fp, #8
   153a0:	pop	{r4, sl, fp, pc}
   153a4:	push	{fp, lr}
   153a8:	mov	fp, sp
   153ac:	sub	sp, sp, #48	; 0x30
   153b0:	mov	ip, r0
   153b4:	movw	r0, #33128	; 0x8168
   153b8:	mov	r2, #32
   153bc:	movt	r0, #2
   153c0:	add	r3, r0, #16
   153c4:	vld1.64	{d16-d17}, [r0], r2
   153c8:	vld1.64	{d20-d21}, [r0]
   153cc:	vld1.64	{d18-d19}, [r3]
   153d0:	mov	r3, sp
   153d4:	add	r0, r3, #32
   153d8:	add	r2, r3, #16
   153dc:	vst1.64	{d20-d21}, [r0]
   153e0:	mov	r0, #28
   153e4:	vst1.64	{d18-d19}, [r2]
   153e8:	mov	r2, r3
   153ec:	and	r0, r0, r1, lsr #3
   153f0:	and	r1, r1, #31
   153f4:	vst1.64	{d16-d17}, [r2], r0
   153f8:	mov	r0, #1
   153fc:	ldr	lr, [r2, #8]
   15400:	bic	r0, r0, lr, lsr r1
   15404:	eor	r0, lr, r0, lsl r1
   15408:	mov	r1, ip
   1540c:	str	r0, [r2, #8]
   15410:	mov	r0, #0
   15414:	mvn	r2, #0
   15418:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   1541c:	mov	sp, fp
   15420:	pop	{fp, pc}
   15424:	push	{fp, lr}
   15428:	mov	fp, sp
   1542c:	sub	sp, sp, #48	; 0x30
   15430:	mov	r1, r0
   15434:	movw	r0, #33128	; 0x8168
   15438:	mov	r3, #32
   1543c:	movt	r0, #2
   15440:	add	r2, r0, #16
   15444:	vld1.64	{d16-d17}, [r0], r3
   15448:	mov	r3, sp
   1544c:	vld1.64	{d18-d19}, [r2]
   15450:	vld1.64	{d20-d21}, [r0]
   15454:	add	r2, r3, #16
   15458:	add	r0, r3, #32
   1545c:	vst1.64	{d18-d19}, [r2]
   15460:	vst1.64	{d20-d21}, [r0]
   15464:	mov	r0, #12
   15468:	mov	r2, r3
   1546c:	vst1.64	{d16-d17}, [r2], r0
   15470:	ldr	r0, [r2]
   15474:	orr	r0, r0, #67108864	; 0x4000000
   15478:	str	r0, [r2]
   1547c:	mov	r0, #0
   15480:	mvn	r2, #0
   15484:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   15488:	mov	sp, fp
   1548c:	pop	{fp, pc}
   15490:	push	{fp, lr}
   15494:	mov	fp, sp
   15498:	sub	sp, sp, #48	; 0x30
   1549c:	mov	ip, r1
   154a0:	mov	r1, r0
   154a4:	movw	r0, #33128	; 0x8168
   154a8:	mov	r2, #32
   154ac:	movt	r0, #2
   154b0:	add	r3, r0, #16
   154b4:	vld1.64	{d16-d17}, [r0], r2
   154b8:	vld1.64	{d18-d19}, [r3]
   154bc:	vld1.64	{d20-d21}, [r0]
   154c0:	mov	r3, sp
   154c4:	add	r2, r3, #16
   154c8:	add	r0, r3, #32
   154cc:	vst1.64	{d18-d19}, [r2]
   154d0:	vst1.64	{d20-d21}, [r0]
   154d4:	mov	r0, #12
   154d8:	mov	r2, r3
   154dc:	vst1.64	{d16-d17}, [r2], r0
   154e0:	ldr	r0, [r2]
   154e4:	orr	r0, r0, #67108864	; 0x4000000
   154e8:	str	r0, [r2]
   154ec:	mov	r0, #0
   154f0:	mov	r2, ip
   154f4:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   154f8:	mov	sp, fp
   154fc:	pop	{fp, pc}
   15500:	push	{r4, sl, fp, lr}
   15504:	add	fp, sp, #8
   15508:	sub	sp, sp, #96	; 0x60
   1550c:	vmov.i32	q8, #0	; 0x00000000
   15510:	mov	ip, r2
   15514:	mov	r2, sp
   15518:	mov	r4, #28
   1551c:	cmp	r1, #10
   15520:	mov	r3, r2
   15524:	add	lr, r2, #16
   15528:	vst1.64	{d16-d17}, [r3], r4
   1552c:	vst1.64	{d16-d17}, [lr]
   15530:	vst1.32	{d16-d17}, [r3]
   15534:	beq	15584 <__mempcpy_chk@plt+0x4574>
   15538:	vld1.64	{d16-d17}, [r2], r4
   1553c:	vld1.64	{d18-d19}, [lr]
   15540:	add	r3, sp, #48	; 0x30
   15544:	vld1.32	{d20-d21}, [r2]
   15548:	add	r2, r3, #20
   1554c:	add	r4, r3, #4
   15550:	vst1.32	{d18-d19}, [r2]
   15554:	add	r2, r3, #32
   15558:	vst1.32	{d16-d17}, [r4]
   1555c:	vst1.32	{d20-d21}, [r2]
   15560:	str	r1, [sp, #48]	; 0x30
   15564:	mvn	r2, #0
   15568:	ldr	r1, [sp, #60]	; 0x3c
   1556c:	orr	r1, r1, #67108864	; 0x4000000
   15570:	str	r1, [sp, #60]	; 0x3c
   15574:	mov	r1, ip
   15578:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   1557c:	sub	sp, fp, #8
   15580:	pop	{r4, sl, fp, pc}
   15584:	bl	10ff8 <abort@plt>
   15588:	push	{r4, r5, r6, sl, fp, lr}
   1558c:	add	fp, sp, #16
   15590:	sub	sp, sp, #48	; 0x30
   15594:	mov	ip, r3
   15598:	movw	r3, #33128	; 0x8168
   1559c:	mov	r6, #32
   155a0:	cmp	r1, #0
   155a4:	mov	r4, sp
   155a8:	movt	r3, #2
   155ac:	cmpne	r2, #0
   155b0:	add	r5, r4, #16
   155b4:	add	lr, r3, #16
   155b8:	vld1.64	{d16-d17}, [r3], r6
   155bc:	vld1.64	{d18-d19}, [lr]
   155c0:	vld1.64	{d20-d21}, [r3]
   155c4:	mov	r3, #10
   155c8:	vst1.64	{d16-d17}, [r4], r6
   155cc:	vst1.64	{d18-d19}, [r5]
   155d0:	vst1.64	{d20-d21}, [r4]
   155d4:	str	r3, [sp]
   155d8:	bne	155e0 <__mempcpy_chk@plt+0x45d0>
   155dc:	bl	10ff8 <abort@plt>
   155e0:	str	r2, [sp, #44]	; 0x2c
   155e4:	str	r1, [sp, #40]	; 0x28
   155e8:	mov	r3, sp
   155ec:	mov	r1, ip
   155f0:	mvn	r2, #0
   155f4:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   155f8:	sub	sp, fp, #16
   155fc:	pop	{r4, r5, r6, sl, fp, pc}
   15600:	push	{r4, r5, r6, sl, fp, lr}
   15604:	add	fp, sp, #16
   15608:	sub	sp, sp, #48	; 0x30
   1560c:	mov	lr, r3
   15610:	movw	r3, #33128	; 0x8168
   15614:	mov	r6, #32
   15618:	cmp	r1, #0
   1561c:	mov	r4, sp
   15620:	movt	r3, #2
   15624:	cmpne	r2, #0
   15628:	add	r5, r4, #16
   1562c:	add	ip, r3, #16
   15630:	vld1.64	{d16-d17}, [r3], r6
   15634:	vld1.64	{d18-d19}, [ip]
   15638:	vld1.64	{d20-d21}, [r3]
   1563c:	mov	r3, #10
   15640:	vst1.64	{d16-d17}, [r4], r6
   15644:	vst1.64	{d18-d19}, [r5]
   15648:	vst1.64	{d20-d21}, [r4]
   1564c:	str	r3, [sp]
   15650:	bne	15658 <__mempcpy_chk@plt+0x4648>
   15654:	bl	10ff8 <abort@plt>
   15658:	ldr	ip, [fp, #8]
   1565c:	str	r2, [sp, #44]	; 0x2c
   15660:	str	r1, [sp, #40]	; 0x28
   15664:	mov	r3, sp
   15668:	mov	r1, lr
   1566c:	mov	r2, ip
   15670:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   15674:	sub	sp, fp, #16
   15678:	pop	{r4, r5, r6, sl, fp, pc}
   1567c:	push	{r4, sl, fp, lr}
   15680:	add	fp, sp, #8
   15684:	sub	sp, sp, #48	; 0x30
   15688:	movw	r3, #33128	; 0x8168
   1568c:	mov	lr, #32
   15690:	mov	ip, r2
   15694:	cmp	r0, #0
   15698:	movt	r3, #2
   1569c:	cmpne	r1, #0
   156a0:	add	r2, r3, #16
   156a4:	vld1.64	{d16-d17}, [r3], lr
   156a8:	vld1.64	{d20-d21}, [r3]
   156ac:	vld1.64	{d18-d19}, [r2]
   156b0:	mov	r2, sp
   156b4:	add	r4, r2, #16
   156b8:	vst1.64	{d16-d17}, [r2], lr
   156bc:	vst1.64	{d20-d21}, [r2]
   156c0:	mov	r2, #10
   156c4:	vst1.64	{d18-d19}, [r4]
   156c8:	str	r2, [sp]
   156cc:	bne	156d4 <__mempcpy_chk@plt+0x46c4>
   156d0:	bl	10ff8 <abort@plt>
   156d4:	str	r1, [sp, #44]	; 0x2c
   156d8:	str	r0, [sp, #40]	; 0x28
   156dc:	mov	r3, sp
   156e0:	mov	r0, #0
   156e4:	mov	r1, ip
   156e8:	mvn	r2, #0
   156ec:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   156f0:	sub	sp, fp, #8
   156f4:	pop	{r4, sl, fp, pc}
   156f8:	push	{r4, r5, fp, lr}
   156fc:	add	fp, sp, #8
   15700:	sub	sp, sp, #48	; 0x30
   15704:	mov	ip, r3
   15708:	movw	r3, #33128	; 0x8168
   1570c:	mov	r4, #32
   15710:	mov	lr, r2
   15714:	cmp	r0, #0
   15718:	movt	r3, #2
   1571c:	cmpne	r1, #0
   15720:	add	r2, r3, #16
   15724:	vld1.64	{d16-d17}, [r3], r4
   15728:	vld1.64	{d20-d21}, [r3]
   1572c:	vld1.64	{d18-d19}, [r2]
   15730:	mov	r2, sp
   15734:	add	r5, r2, #16
   15738:	vst1.64	{d16-d17}, [r2], r4
   1573c:	vst1.64	{d20-d21}, [r2]
   15740:	mov	r2, #10
   15744:	vst1.64	{d18-d19}, [r5]
   15748:	str	r2, [sp]
   1574c:	bne	15754 <__mempcpy_chk@plt+0x4744>
   15750:	bl	10ff8 <abort@plt>
   15754:	str	r1, [sp, #44]	; 0x2c
   15758:	str	r0, [sp, #40]	; 0x28
   1575c:	mov	r3, sp
   15760:	mov	r0, #0
   15764:	mov	r1, lr
   15768:	mov	r2, ip
   1576c:	bl	15008 <__mempcpy_chk@plt+0x3ff8>
   15770:	sub	sp, fp, #8
   15774:	pop	{r4, r5, fp, pc}
   15778:	movw	r3, #33024	; 0x8100
   1577c:	movt	r3, #2
   15780:	b	15008 <__mempcpy_chk@plt+0x3ff8>
   15784:	movw	r3, #33024	; 0x8100
   15788:	mov	r2, r1
   1578c:	mov	r1, r0
   15790:	mov	r0, #0
   15794:	movt	r3, #2
   15798:	b	15008 <__mempcpy_chk@plt+0x3ff8>
   1579c:	movw	r3, #33024	; 0x8100
   157a0:	mvn	r2, #0
   157a4:	movt	r3, #2
   157a8:	b	15008 <__mempcpy_chk@plt+0x3ff8>
   157ac:	movw	r3, #33024	; 0x8100
   157b0:	mov	r1, r0
   157b4:	mov	r0, #0
   157b8:	mvn	r2, #0
   157bc:	movt	r3, #2
   157c0:	b	15008 <__mempcpy_chk@plt+0x3ff8>
   157c4:	push	{r4, r5, fp, lr}
   157c8:	add	fp, sp, #8
   157cc:	mov	r5, r0
   157d0:	mov	r4, r1
   157d4:	mov	r0, #0
   157d8:	mov	r2, #5
   157dc:	mov	r1, r5
   157e0:	bl	10e3c <dcgettext@plt>
   157e4:	cmp	r0, r5
   157e8:	popne	{r4, r5, fp, pc}
   157ec:	bl	169ec <__mempcpy_chk@plt+0x59dc>
   157f0:	ldrb	r1, [r0]
   157f4:	and	r1, r1, #223	; 0xdf
   157f8:	cmp	r1, #71	; 0x47
   157fc:	beq	15864 <__mempcpy_chk@plt+0x4854>
   15800:	cmp	r1, #85	; 0x55
   15804:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   15808:	ldrb	r1, [r0, #1]
   1580c:	and	r1, r1, #223	; 0xdf
   15810:	cmp	r1, #84	; 0x54
   15814:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   15818:	ldrb	r1, [r0, #2]
   1581c:	and	r1, r1, #223	; 0xdf
   15820:	cmp	r1, #70	; 0x46
   15824:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   15828:	ldrb	r1, [r0, #3]
   1582c:	cmp	r1, #45	; 0x2d
   15830:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   15834:	ldrb	r1, [r0, #4]
   15838:	cmp	r1, #56	; 0x38
   1583c:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   15840:	ldrb	r0, [r0, #5]
   15844:	cmp	r0, #0
   15848:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   1584c:	ldrb	r1, [r5]
   15850:	movw	r2, #30132	; 0x75b4
   15854:	movw	r0, #30136	; 0x75b8
   15858:	movt	r2, #1
   1585c:	movt	r0, #1
   15860:	b	158ec <__mempcpy_chk@plt+0x48dc>
   15864:	ldrb	r1, [r0, #1]
   15868:	and	r1, r1, #223	; 0xdf
   1586c:	cmp	r1, #66	; 0x42
   15870:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   15874:	ldrb	r1, [r0, #2]
   15878:	cmp	r1, #49	; 0x31
   1587c:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   15880:	ldrb	r1, [r0, #3]
   15884:	cmp	r1, #56	; 0x38
   15888:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   1588c:	ldrb	r1, [r0, #4]
   15890:	cmp	r1, #48	; 0x30
   15894:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   15898:	ldrb	r1, [r0, #5]
   1589c:	cmp	r1, #51	; 0x33
   158a0:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   158a4:	ldrb	r1, [r0, #6]
   158a8:	cmp	r1, #48	; 0x30
   158ac:	bne	158bc <__mempcpy_chk@plt+0x48ac>
   158b0:	ldrb	r0, [r0, #7]
   158b4:	cmp	r0, #0
   158b8:	beq	158d8 <__mempcpy_chk@plt+0x48c8>
   158bc:	movw	r1, #30126	; 0x75ae
   158c0:	movw	r0, #30130	; 0x75b2
   158c4:	cmp	r4, #9
   158c8:	movt	r1, #1
   158cc:	movt	r0, #1
   158d0:	moveq	r0, r1
   158d4:	pop	{r4, r5, fp, pc}
   158d8:	ldrb	r1, [r5]
   158dc:	movw	r2, #30140	; 0x75bc
   158e0:	movw	r0, #30144	; 0x75c0
   158e4:	movt	r2, #1
   158e8:	movt	r0, #1
   158ec:	cmp	r1, #96	; 0x60
   158f0:	moveq	r0, r2
   158f4:	pop	{r4, r5, fp, pc}
   158f8:	push	{r4, r5, r6, sl, fp, lr}
   158fc:	add	fp, sp, #16
   15900:	ldr	r4, [r0], #8
   15904:	mov	r5, r1
   15908:	cmp	r4, r0
   1590c:	beq	15930 <__mempcpy_chk@plt+0x4920>
   15910:	mov	r0, r4
   15914:	mov	r1, r5
   15918:	bl	16738 <__mempcpy_chk@plt+0x5728>
   1591c:	cmp	r0, #0
   15920:	mov	r6, r0
   15924:	moveq	r6, r4
   15928:	mov	r0, r6
   1592c:	pop	{r4, r5, r6, sl, fp, pc}
   15930:	mov	r0, r5
   15934:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   15938:	cmp	r0, #0
   1593c:	beq	15958 <__mempcpy_chk@plt+0x4948>
   15940:	mov	r1, r4
   15944:	mov	r2, r5
   15948:	mov	r6, r0
   1594c:	bl	10e24 <memcpy@plt>
   15950:	mov	r0, r6
   15954:	pop	{r4, r5, r6, sl, fp, pc}
   15958:	mov	r6, #0
   1595c:	mov	r0, r6
   15960:	pop	{r4, r5, r6, sl, fp, pc}
   15964:	push	{r4, r5, r6, sl, fp, lr}
   15968:	add	fp, sp, #16
   1596c:	mov	r4, r0
   15970:	add	r6, r0, #8
   15974:	ldrd	r0, [r0]
   15978:	lsl	r5, r1, #1
   1597c:	cmp	r0, r6
   15980:	beq	1598c <__mempcpy_chk@plt+0x497c>
   15984:	bl	1278c <__mempcpy_chk@plt+0x177c>
   15988:	ldr	r1, [r4, #4]
   1598c:	cmp	r5, r1
   15990:	bcc	159b4 <__mempcpy_chk@plt+0x49a4>
   15994:	mov	r0, r5
   15998:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   1599c:	cmp	r0, #0
   159a0:	strne	r0, [r4]
   159a4:	movne	r0, #1
   159a8:	strne	r5, [r4, #4]
   159ac:	popne	{r4, r5, r6, sl, fp, pc}
   159b0:	b	159c0 <__mempcpy_chk@plt+0x49b0>
   159b4:	bl	10f44 <__errno_location@plt>
   159b8:	mov	r1, #12
   159bc:	str	r1, [r0]
   159c0:	mov	r0, #0
   159c4:	mov	r5, #1024	; 0x400
   159c8:	str	r6, [r4]
   159cc:	str	r5, [r4, #4]
   159d0:	pop	{r4, r5, r6, sl, fp, pc}
   159d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   159d8:	add	fp, sp, #24
   159dc:	ldrd	r8, [r0]
   159e0:	add	r7, r0, #8
   159e4:	mov	r4, r0
   159e8:	lsl	r5, r9, #1
   159ec:	cmp	r8, r7
   159f0:	beq	15a1c <__mempcpy_chk@plt+0x4a0c>
   159f4:	cmp	r5, r9
   159f8:	bcc	15a54 <__mempcpy_chk@plt+0x4a44>
   159fc:	mov	r0, r8
   15a00:	mov	r1, r5
   15a04:	bl	16738 <__mempcpy_chk@plt+0x5728>
   15a08:	mov	r6, r0
   15a0c:	cmp	r0, #0
   15a10:	bne	15a3c <__mempcpy_chk@plt+0x4a2c>
   15a14:	ldr	r8, [r4]
   15a18:	b	15a60 <__mempcpy_chk@plt+0x4a50>
   15a1c:	mov	r0, r5
   15a20:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   15a24:	cmp	r0, #0
   15a28:	beq	15a4c <__mempcpy_chk@plt+0x4a3c>
   15a2c:	ldr	r2, [r4, #4]
   15a30:	mov	r1, r8
   15a34:	mov	r6, r0
   15a38:	bl	10e24 <memcpy@plt>
   15a3c:	mov	r0, #1
   15a40:	str	r6, [r4]
   15a44:	str	r5, [r4, #4]
   15a48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15a4c:	mov	r0, #0
   15a50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15a54:	bl	10f44 <__errno_location@plt>
   15a58:	mov	r1, #12
   15a5c:	str	r1, [r0]
   15a60:	mov	r0, r8
   15a64:	bl	1278c <__mempcpy_chk@plt+0x177c>
   15a68:	mov	r0, #0
   15a6c:	mov	r5, #1024	; 0x400
   15a70:	str	r7, [r4]
   15a74:	str	r5, [r4, #4]
   15a78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15a7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a80:	add	fp, sp, #24
   15a84:	sub	sp, sp, #32
   15a88:	ldr	r6, [fp, #12]
   15a8c:	ldr	r7, [fp, #8]
   15a90:	mov	r4, r2
   15a94:	mov	r8, r0
   15a98:	cmp	r1, #0
   15a9c:	beq	15ac4 <__mempcpy_chk@plt+0x4ab4>
   15aa0:	movw	r2, #30232	; 0x7618
   15aa4:	mov	r5, r1
   15aa8:	str	r3, [sp, #4]
   15aac:	str	r4, [sp]
   15ab0:	mov	r0, r8
   15ab4:	mov	r1, #1
   15ab8:	movt	r2, #1
   15abc:	mov	r3, r5
   15ac0:	b	15adc <__mempcpy_chk@plt+0x4acc>
   15ac4:	movw	r2, #30244	; 0x7624
   15ac8:	str	r3, [sp]
   15acc:	mov	r0, r8
   15ad0:	mov	r1, #1
   15ad4:	mov	r3, r4
   15ad8:	movt	r2, #1
   15adc:	bl	10f80 <__fprintf_chk@plt>
   15ae0:	movw	r1, #30251	; 0x762b
   15ae4:	mov	r0, #0
   15ae8:	mov	r2, #5
   15aec:	movt	r1, #1
   15af0:	bl	10e3c <dcgettext@plt>
   15af4:	movw	r2, #30969	; 0x78f9
   15af8:	mov	r3, r0
   15afc:	movw	r0, #2022	; 0x7e6
   15b00:	mov	r1, #1
   15b04:	movt	r2, #1
   15b08:	str	r0, [sp]
   15b0c:	mov	r0, r8
   15b10:	bl	10f80 <__fprintf_chk@plt>
   15b14:	movw	r4, #28255	; 0x6e5f
   15b18:	mov	r1, r8
   15b1c:	movt	r4, #1
   15b20:	mov	r0, r4
   15b24:	bl	10dc4 <fputs_unlocked@plt>
   15b28:	movw	r1, #30255	; 0x762f
   15b2c:	mov	r0, #0
   15b30:	mov	r2, #5
   15b34:	movt	r1, #1
   15b38:	bl	10e3c <dcgettext@plt>
   15b3c:	movw	r3, #30426	; 0x76da
   15b40:	mov	r2, r0
   15b44:	mov	r0, r8
   15b48:	mov	r1, #1
   15b4c:	movt	r3, #1
   15b50:	bl	10f80 <__fprintf_chk@plt>
   15b54:	mov	r0, r4
   15b58:	mov	r1, r8
   15b5c:	bl	10dc4 <fputs_unlocked@plt>
   15b60:	cmp	r6, #9
   15b64:	bhi	15ba0 <__mempcpy_chk@plt+0x4b90>
   15b68:	add	r0, pc, #0
   15b6c:	ldr	pc, [r0, r6, lsl #2]
   15b70:	muleq	r1, r8, fp
   15b74:	andeq	r5, r1, ip, lsr #23
   15b78:	ldrdeq	r5, [r1], -ip
   15b7c:	andeq	r5, r1, r4, lsl #24
   15b80:	andeq	r5, r1, ip, lsr #24
   15b84:	andeq	r5, r1, r4, asr ip
   15b88:	andeq	r5, r1, ip, ror ip
   15b8c:			; <UNDEFINED> instruction: 0x00015cb4
   15b90:	andeq	r5, r1, r4, asr sp
   15b94:	strdeq	r5, [r1], -ip
   15b98:	sub	sp, fp, #24
   15b9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ba0:	movw	r1, #30779	; 0x783b
   15ba4:	movt	r1, #1
   15ba8:	b	15d04 <__mempcpy_chk@plt+0x4cf4>
   15bac:	movw	r1, #30460	; 0x76fc
   15bb0:	mov	r0, #0
   15bb4:	mov	r2, #5
   15bb8:	movt	r1, #1
   15bbc:	bl	10e3c <dcgettext@plt>
   15bc0:	ldr	r3, [r7]
   15bc4:	mov	r2, r0
   15bc8:	mov	r0, r8
   15bcc:	mov	r1, #1
   15bd0:	sub	sp, fp, #24
   15bd4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15bd8:	b	10f80 <__fprintf_chk@plt>
   15bdc:	movw	r1, #30476	; 0x770c
   15be0:	mov	r0, #0
   15be4:	mov	r2, #5
   15be8:	movt	r1, #1
   15bec:	bl	10e3c <dcgettext@plt>
   15bf0:	mov	r2, r0
   15bf4:	ldr	r3, [r7]
   15bf8:	ldr	r0, [r7, #4]
   15bfc:	str	r0, [sp]
   15c00:	b	15cf0 <__mempcpy_chk@plt+0x4ce0>
   15c04:	movw	r1, #30499	; 0x7723
   15c08:	mov	r0, #0
   15c0c:	mov	r2, #5
   15c10:	movt	r1, #1
   15c14:	bl	10e3c <dcgettext@plt>
   15c18:	mov	r2, r0
   15c1c:	ldr	r3, [r7]
   15c20:	ldmib	r7, {r0, r1}
   15c24:	stm	sp, {r0, r1}
   15c28:	b	15cf0 <__mempcpy_chk@plt+0x4ce0>
   15c2c:	movw	r1, #30527	; 0x773f
   15c30:	mov	r0, #0
   15c34:	mov	r2, #5
   15c38:	movt	r1, #1
   15c3c:	bl	10e3c <dcgettext@plt>
   15c40:	ldr	r3, [r7]
   15c44:	mov	r2, r0
   15c48:	ldmib	r7, {r0, r1, r7}
   15c4c:	stm	sp, {r0, r1, r7}
   15c50:	b	15cf0 <__mempcpy_chk@plt+0x4ce0>
   15c54:	movw	r1, #30559	; 0x775f
   15c58:	mov	r0, #0
   15c5c:	mov	r2, #5
   15c60:	movt	r1, #1
   15c64:	bl	10e3c <dcgettext@plt>
   15c68:	ldr	r3, [r7]
   15c6c:	mov	r2, r0
   15c70:	ldmib	r7, {r0, r1, r6, r7}
   15c74:	stm	sp, {r0, r1, r6, r7}
   15c78:	b	15cf0 <__mempcpy_chk@plt+0x4ce0>
   15c7c:	movw	r1, #30595	; 0x7783
   15c80:	mov	r0, #0
   15c84:	mov	r2, #5
   15c88:	movt	r1, #1
   15c8c:	bl	10e3c <dcgettext@plt>
   15c90:	mov	r2, r0
   15c94:	ldr	r3, [r7]
   15c98:	ldmib	r7, {r0, r1, r6}
   15c9c:	ldr	r5, [r7, #16]
   15ca0:	ldr	r7, [r7, #20]
   15ca4:	stm	sp, {r0, r1, r6}
   15ca8:	str	r5, [sp, #12]
   15cac:	str	r7, [sp, #16]
   15cb0:	b	15cf0 <__mempcpy_chk@plt+0x4ce0>
   15cb4:	movw	r1, #30635	; 0x77ab
   15cb8:	mov	r0, #0
   15cbc:	mov	r2, #5
   15cc0:	movt	r1, #1
   15cc4:	bl	10e3c <dcgettext@plt>
   15cc8:	mov	r2, r0
   15ccc:	ldr	r3, [r7]
   15cd0:	ldmib	r7, {r0, r1, r6}
   15cd4:	ldr	r5, [r7, #16]
   15cd8:	ldr	r4, [r7, #20]
   15cdc:	ldr	r7, [r7, #24]
   15ce0:	stm	sp, {r0, r1, r6}
   15ce4:	str	r5, [sp, #12]
   15ce8:	str	r4, [sp, #16]
   15cec:	str	r7, [sp, #20]
   15cf0:	mov	r0, r8
   15cf4:	mov	r1, #1
   15cf8:	b	15da4 <__mempcpy_chk@plt+0x4d94>
   15cfc:	movw	r1, #30727	; 0x7807
   15d00:	movt	r1, #1
   15d04:	mov	r0, #0
   15d08:	mov	r2, #5
   15d0c:	bl	10e3c <dcgettext@plt>
   15d10:	mov	ip, r0
   15d14:	ldr	r3, [r7]
   15d18:	ldr	r0, [r7, #4]
   15d1c:	ldr	r1, [r7, #8]
   15d20:	ldr	r6, [r7, #12]
   15d24:	ldr	r5, [r7, #16]
   15d28:	ldr	r4, [r7, #20]
   15d2c:	ldr	r2, [r7, #24]
   15d30:	ldr	lr, [r7, #28]
   15d34:	ldr	r7, [r7, #32]
   15d38:	stm	sp, {r0, r1, r6}
   15d3c:	str	r5, [sp, #12]
   15d40:	str	r4, [sp, #16]
   15d44:	str	r2, [sp, #20]
   15d48:	str	lr, [sp, #24]
   15d4c:	str	r7, [sp, #28]
   15d50:	b	15d98 <__mempcpy_chk@plt+0x4d88>
   15d54:	movw	r1, #30679	; 0x77d7
   15d58:	mov	r0, #0
   15d5c:	mov	r2, #5
   15d60:	movt	r1, #1
   15d64:	bl	10e3c <dcgettext@plt>
   15d68:	mov	ip, r0
   15d6c:	ldr	r3, [r7]
   15d70:	ldmib	r7, {r0, r1, r6}
   15d74:	ldr	r5, [r7, #16]
   15d78:	ldr	r4, [r7, #20]
   15d7c:	ldr	r2, [r7, #24]
   15d80:	ldr	r7, [r7, #28]
   15d84:	stm	sp, {r0, r1, r6}
   15d88:	str	r5, [sp, #12]
   15d8c:	str	r4, [sp, #16]
   15d90:	str	r2, [sp, #20]
   15d94:	str	r7, [sp, #24]
   15d98:	mov	r0, r8
   15d9c:	mov	r1, #1
   15da0:	mov	r2, ip
   15da4:	bl	10f80 <__fprintf_chk@plt>
   15da8:	sub	sp, fp, #24
   15dac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15db0:	push	{r4, sl, fp, lr}
   15db4:	add	fp, sp, #8
   15db8:	sub	sp, sp, #8
   15dbc:	ldr	ip, [fp, #8]
   15dc0:	mov	lr, #0
   15dc4:	ldr	r4, [ip, lr, lsl #2]
   15dc8:	add	lr, lr, #1
   15dcc:	cmp	r4, #0
   15dd0:	bne	15dc4 <__mempcpy_chk@plt+0x4db4>
   15dd4:	sub	r4, lr, #1
   15dd8:	str	ip, [sp]
   15ddc:	str	r4, [sp, #4]
   15de0:	bl	15a7c <__mempcpy_chk@plt+0x4a6c>
   15de4:	sub	sp, fp, #8
   15de8:	pop	{r4, sl, fp, pc}
   15dec:	push	{fp, lr}
   15df0:	mov	fp, sp
   15df4:	sub	sp, sp, #48	; 0x30
   15df8:	ldr	ip, [fp, #8]
   15dfc:	ldr	lr, [ip]
   15e00:	cmp	lr, #0
   15e04:	str	lr, [sp, #8]
   15e08:	beq	15ea4 <__mempcpy_chk@plt+0x4e94>
   15e0c:	ldr	lr, [ip, #4]
   15e10:	cmp	lr, #0
   15e14:	str	lr, [sp, #12]
   15e18:	beq	15eac <__mempcpy_chk@plt+0x4e9c>
   15e1c:	ldr	lr, [ip, #8]
   15e20:	cmp	lr, #0
   15e24:	str	lr, [sp, #16]
   15e28:	beq	15eb4 <__mempcpy_chk@plt+0x4ea4>
   15e2c:	ldr	lr, [ip, #12]
   15e30:	cmp	lr, #0
   15e34:	str	lr, [sp, #20]
   15e38:	beq	15ebc <__mempcpy_chk@plt+0x4eac>
   15e3c:	ldr	lr, [ip, #16]
   15e40:	cmp	lr, #0
   15e44:	str	lr, [sp, #24]
   15e48:	beq	15ec4 <__mempcpy_chk@plt+0x4eb4>
   15e4c:	ldr	lr, [ip, #20]
   15e50:	cmp	lr, #0
   15e54:	str	lr, [sp, #28]
   15e58:	beq	15ecc <__mempcpy_chk@plt+0x4ebc>
   15e5c:	ldr	lr, [ip, #24]
   15e60:	cmp	lr, #0
   15e64:	str	lr, [sp, #32]
   15e68:	beq	15ed4 <__mempcpy_chk@plt+0x4ec4>
   15e6c:	ldr	lr, [ip, #28]
   15e70:	cmp	lr, #0
   15e74:	str	lr, [sp, #36]	; 0x24
   15e78:	beq	15edc <__mempcpy_chk@plt+0x4ecc>
   15e7c:	ldr	lr, [ip, #32]
   15e80:	cmp	lr, #0
   15e84:	str	lr, [sp, #40]	; 0x28
   15e88:	beq	15ee4 <__mempcpy_chk@plt+0x4ed4>
   15e8c:	ldr	lr, [ip, #36]	; 0x24
   15e90:	mov	ip, #10
   15e94:	cmp	lr, #0
   15e98:	str	lr, [sp, #44]	; 0x2c
   15e9c:	movweq	ip, #9
   15ea0:	b	15ee8 <__mempcpy_chk@plt+0x4ed8>
   15ea4:	mov	ip, #0
   15ea8:	b	15ee8 <__mempcpy_chk@plt+0x4ed8>
   15eac:	mov	ip, #1
   15eb0:	b	15ee8 <__mempcpy_chk@plt+0x4ed8>
   15eb4:	mov	ip, #2
   15eb8:	b	15ee8 <__mempcpy_chk@plt+0x4ed8>
   15ebc:	mov	ip, #3
   15ec0:	b	15ee8 <__mempcpy_chk@plt+0x4ed8>
   15ec4:	mov	ip, #4
   15ec8:	b	15ee8 <__mempcpy_chk@plt+0x4ed8>
   15ecc:	mov	ip, #5
   15ed0:	b	15ee8 <__mempcpy_chk@plt+0x4ed8>
   15ed4:	mov	ip, #6
   15ed8:	b	15ee8 <__mempcpy_chk@plt+0x4ed8>
   15edc:	mov	ip, #7
   15ee0:	b	15ee8 <__mempcpy_chk@plt+0x4ed8>
   15ee4:	mov	ip, #8
   15ee8:	add	lr, sp, #8
   15eec:	str	ip, [sp, #4]
   15ef0:	str	lr, [sp]
   15ef4:	bl	15a7c <__mempcpy_chk@plt+0x4a6c>
   15ef8:	mov	sp, fp
   15efc:	pop	{fp, pc}
   15f00:	push	{fp, lr}
   15f04:	mov	fp, sp
   15f08:	sub	sp, sp, #56	; 0x38
   15f0c:	add	ip, fp, #8
   15f10:	str	ip, [sp, #12]
   15f14:	ldr	lr, [fp, #8]
   15f18:	cmp	lr, #0
   15f1c:	str	lr, [sp, #16]
   15f20:	beq	15fbc <__mempcpy_chk@plt+0x4fac>
   15f24:	ldr	lr, [ip, #4]
   15f28:	cmp	lr, #0
   15f2c:	str	lr, [sp, #20]
   15f30:	beq	15fc4 <__mempcpy_chk@plt+0x4fb4>
   15f34:	ldr	lr, [ip, #8]
   15f38:	cmp	lr, #0
   15f3c:	str	lr, [sp, #24]
   15f40:	beq	15fcc <__mempcpy_chk@plt+0x4fbc>
   15f44:	ldr	lr, [ip, #12]
   15f48:	cmp	lr, #0
   15f4c:	str	lr, [sp, #28]
   15f50:	beq	15fd4 <__mempcpy_chk@plt+0x4fc4>
   15f54:	ldr	lr, [ip, #16]
   15f58:	cmp	lr, #0
   15f5c:	str	lr, [sp, #32]
   15f60:	beq	15fdc <__mempcpy_chk@plt+0x4fcc>
   15f64:	ldr	lr, [ip, #20]
   15f68:	cmp	lr, #0
   15f6c:	str	lr, [sp, #36]	; 0x24
   15f70:	beq	15fe4 <__mempcpy_chk@plt+0x4fd4>
   15f74:	ldr	lr, [ip, #24]
   15f78:	cmp	lr, #0
   15f7c:	str	lr, [sp, #40]	; 0x28
   15f80:	beq	15fec <__mempcpy_chk@plt+0x4fdc>
   15f84:	ldr	lr, [ip, #28]
   15f88:	cmp	lr, #0
   15f8c:	str	lr, [sp, #44]	; 0x2c
   15f90:	beq	15ff4 <__mempcpy_chk@plt+0x4fe4>
   15f94:	ldr	lr, [ip, #32]
   15f98:	cmp	lr, #0
   15f9c:	str	lr, [sp, #48]	; 0x30
   15fa0:	beq	15ffc <__mempcpy_chk@plt+0x4fec>
   15fa4:	ldr	lr, [ip, #36]	; 0x24
   15fa8:	mov	ip, #10
   15fac:	cmp	lr, #0
   15fb0:	str	lr, [sp, #52]	; 0x34
   15fb4:	movweq	ip, #9
   15fb8:	b	16000 <__mempcpy_chk@plt+0x4ff0>
   15fbc:	mov	ip, #0
   15fc0:	b	16000 <__mempcpy_chk@plt+0x4ff0>
   15fc4:	mov	ip, #1
   15fc8:	b	16000 <__mempcpy_chk@plt+0x4ff0>
   15fcc:	mov	ip, #2
   15fd0:	b	16000 <__mempcpy_chk@plt+0x4ff0>
   15fd4:	mov	ip, #3
   15fd8:	b	16000 <__mempcpy_chk@plt+0x4ff0>
   15fdc:	mov	ip, #4
   15fe0:	b	16000 <__mempcpy_chk@plt+0x4ff0>
   15fe4:	mov	ip, #5
   15fe8:	b	16000 <__mempcpy_chk@plt+0x4ff0>
   15fec:	mov	ip, #6
   15ff0:	b	16000 <__mempcpy_chk@plt+0x4ff0>
   15ff4:	mov	ip, #7
   15ff8:	b	16000 <__mempcpy_chk@plt+0x4ff0>
   15ffc:	mov	ip, #8
   16000:	add	lr, sp, #16
   16004:	str	ip, [sp, #4]
   16008:	str	lr, [sp]
   1600c:	bl	15a7c <__mempcpy_chk@plt+0x4a6c>
   16010:	mov	sp, fp
   16014:	pop	{fp, pc}
   16018:	push	{fp, lr}
   1601c:	mov	fp, sp
   16020:	movw	r0, #33092	; 0x8144
   16024:	movt	r0, #2
   16028:	ldr	r1, [r0]
   1602c:	movw	r0, #28255	; 0x6e5f
   16030:	movt	r0, #1
   16034:	bl	10dc4 <fputs_unlocked@plt>
   16038:	movw	r1, #30839	; 0x7877
   1603c:	mov	r0, #0
   16040:	mov	r2, #5
   16044:	movt	r1, #1
   16048:	bl	10e3c <dcgettext@plt>
   1604c:	movw	r2, #30859	; 0x788b
   16050:	mov	r1, r0
   16054:	mov	r0, #1
   16058:	movt	r2, #1
   1605c:	bl	10f68 <__printf_chk@plt>
   16060:	movw	r1, #30881	; 0x78a1
   16064:	mov	r0, #0
   16068:	mov	r2, #5
   1606c:	movt	r1, #1
   16070:	bl	10e3c <dcgettext@plt>
   16074:	movw	r2, #29023	; 0x715f
   16078:	movw	r3, #29185	; 0x7201
   1607c:	mov	r1, r0
   16080:	mov	r0, #1
   16084:	movt	r2, #1
   16088:	movt	r3, #1
   1608c:	bl	10f68 <__printf_chk@plt>
   16090:	movw	r1, #30901	; 0x78b5
   16094:	mov	r0, #0
   16098:	mov	r2, #5
   1609c:	movt	r1, #1
   160a0:	bl	10e3c <dcgettext@plt>
   160a4:	movw	r2, #30940	; 0x78dc
   160a8:	mov	r1, r0
   160ac:	mov	r0, #1
   160b0:	movt	r2, #1
   160b4:	pop	{fp, lr}
   160b8:	b	10f68 <__printf_chk@plt>
   160bc:	push	{r4, r5, r6, sl, fp, lr}
   160c0:	add	fp, sp, #16
   160c4:	mov	r4, r2
   160c8:	mov	r5, r1
   160cc:	mov	r6, r0
   160d0:	bl	16a88 <__mempcpy_chk@plt+0x5a78>
   160d4:	cmp	r0, #0
   160d8:	popne	{r4, r5, r6, sl, fp, pc}
   160dc:	cmp	r6, #0
   160e0:	beq	160f4 <__mempcpy_chk@plt+0x50e4>
   160e4:	cmp	r5, #0
   160e8:	cmpne	r4, #0
   160ec:	bne	160f4 <__mempcpy_chk@plt+0x50e4>
   160f0:	pop	{r4, r5, r6, sl, fp, pc}
   160f4:	bl	16670 <__mempcpy_chk@plt+0x5660>
   160f8:	push	{r4, r5, r6, sl, fp, lr}
   160fc:	add	fp, sp, #16
   16100:	mov	r4, r2
   16104:	mov	r5, r1
   16108:	mov	r6, r0
   1610c:	bl	16a88 <__mempcpy_chk@plt+0x5a78>
   16110:	cmp	r0, #0
   16114:	popne	{r4, r5, r6, sl, fp, pc}
   16118:	cmp	r6, #0
   1611c:	beq	16130 <__mempcpy_chk@plt+0x5120>
   16120:	cmp	r5, #0
   16124:	cmpne	r4, #0
   16128:	bne	16130 <__mempcpy_chk@plt+0x5120>
   1612c:	pop	{r4, r5, r6, sl, fp, pc}
   16130:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16134:	push	{fp, lr}
   16138:	mov	fp, sp
   1613c:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   16140:	cmp	r0, #0
   16144:	popne	{fp, pc}
   16148:	bl	16670 <__mempcpy_chk@plt+0x5660>
   1614c:	push	{fp, lr}
   16150:	mov	fp, sp
   16154:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   16158:	cmp	r0, #0
   1615c:	popne	{fp, pc}
   16160:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16164:	push	{fp, lr}
   16168:	mov	fp, sp
   1616c:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   16170:	cmp	r0, #0
   16174:	popne	{fp, pc}
   16178:	bl	16670 <__mempcpy_chk@plt+0x5660>
   1617c:	push	{r4, r5, fp, lr}
   16180:	add	fp, sp, #8
   16184:	mov	r4, r1
   16188:	mov	r5, r0
   1618c:	bl	16738 <__mempcpy_chk@plt+0x5728>
   16190:	cmp	r0, #0
   16194:	popne	{r4, r5, fp, pc}
   16198:	cmp	r5, #0
   1619c:	beq	161ac <__mempcpy_chk@plt+0x519c>
   161a0:	cmp	r4, #0
   161a4:	bne	161ac <__mempcpy_chk@plt+0x519c>
   161a8:	pop	{r4, r5, fp, pc}
   161ac:	bl	16670 <__mempcpy_chk@plt+0x5660>
   161b0:	push	{fp, lr}
   161b4:	mov	fp, sp
   161b8:	cmp	r1, #0
   161bc:	orreq	r1, r1, #1
   161c0:	bl	16738 <__mempcpy_chk@plt+0x5728>
   161c4:	cmp	r0, #0
   161c8:	popne	{fp, pc}
   161cc:	bl	16670 <__mempcpy_chk@plt+0x5660>
   161d0:	push	{fp, lr}
   161d4:	mov	fp, sp
   161d8:	clz	r3, r2
   161dc:	lsr	ip, r3, #5
   161e0:	clz	r3, r1
   161e4:	lsr	r3, r3, #5
   161e8:	orrs	r3, r3, ip
   161ec:	movwne	r1, #1
   161f0:	movwne	r2, #1
   161f4:	bl	16a88 <__mempcpy_chk@plt+0x5a78>
   161f8:	cmp	r0, #0
   161fc:	popne	{fp, pc}
   16200:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16204:	push	{fp, lr}
   16208:	mov	fp, sp
   1620c:	mov	r2, r1
   16210:	mov	r1, r0
   16214:	mov	r0, #0
   16218:	bl	16a88 <__mempcpy_chk@plt+0x5a78>
   1621c:	cmp	r0, #0
   16220:	popne	{fp, pc}
   16224:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16228:	push	{fp, lr}
   1622c:	mov	fp, sp
   16230:	mov	r2, r1
   16234:	mov	r1, r0
   16238:	clz	r0, r2
   1623c:	clz	r3, r1
   16240:	lsr	r0, r0, #5
   16244:	lsr	r3, r3, #5
   16248:	orrs	r0, r3, r0
   1624c:	mov	r0, #0
   16250:	movwne	r1, #1
   16254:	movwne	r2, #1
   16258:	bl	16a88 <__mempcpy_chk@plt+0x5a78>
   1625c:	cmp	r0, #0
   16260:	popne	{fp, pc}
   16264:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16268:	push	{r4, r5, r6, sl, fp, lr}
   1626c:	add	fp, sp, #16
   16270:	ldr	r5, [r1]
   16274:	mov	r4, r1
   16278:	mov	r6, r0
   1627c:	cmp	r0, #0
   16280:	beq	16298 <__mempcpy_chk@plt+0x5288>
   16284:	mov	r0, #1
   16288:	add	r0, r0, r5, lsr #1
   1628c:	adds	r5, r5, r0
   16290:	bcc	162a0 <__mempcpy_chk@plt+0x5290>
   16294:	b	162dc <__mempcpy_chk@plt+0x52cc>
   16298:	cmp	r5, #0
   1629c:	movweq	r5, #64	; 0x40
   162a0:	mov	r0, r6
   162a4:	mov	r1, r5
   162a8:	mov	r2, #1
   162ac:	bl	16a88 <__mempcpy_chk@plt+0x5a78>
   162b0:	cmp	r5, #0
   162b4:	mov	r1, r5
   162b8:	movwne	r1, #1
   162bc:	cmp	r0, #0
   162c0:	bne	162d4 <__mempcpy_chk@plt+0x52c4>
   162c4:	clz	r2, r6
   162c8:	lsr	r2, r2, #5
   162cc:	orrs	r1, r2, r1
   162d0:	bne	162dc <__mempcpy_chk@plt+0x52cc>
   162d4:	str	r5, [r4]
   162d8:	pop	{r4, r5, r6, sl, fp, pc}
   162dc:	bl	16670 <__mempcpy_chk@plt+0x5660>
   162e0:	push	{r4, r5, r6, r7, fp, lr}
   162e4:	add	fp, sp, #16
   162e8:	ldr	r5, [r1]
   162ec:	mov	r6, r2
   162f0:	mov	r4, r1
   162f4:	mov	r7, r0
   162f8:	cmp	r0, #0
   162fc:	beq	16314 <__mempcpy_chk@plt+0x5304>
   16300:	mov	r0, #1
   16304:	add	r0, r0, r5, lsr #1
   16308:	adds	r5, r5, r0
   1630c:	bcc	1632c <__mempcpy_chk@plt+0x531c>
   16310:	b	16360 <__mempcpy_chk@plt+0x5350>
   16314:	cmp	r5, #0
   16318:	bne	1632c <__mempcpy_chk@plt+0x531c>
   1631c:	mov	r0, #64	; 0x40
   16320:	cmp	r6, #64	; 0x40
   16324:	udiv	r5, r0, r6
   16328:	addhi	r5, r5, #1
   1632c:	mov	r0, r7
   16330:	mov	r1, r5
   16334:	mov	r2, r6
   16338:	bl	16a88 <__mempcpy_chk@plt+0x5a78>
   1633c:	cmp	r0, #0
   16340:	bne	16358 <__mempcpy_chk@plt+0x5348>
   16344:	cmp	r7, #0
   16348:	beq	16360 <__mempcpy_chk@plt+0x5350>
   1634c:	cmp	r6, #0
   16350:	cmpne	r5, #0
   16354:	bne	16360 <__mempcpy_chk@plt+0x5350>
   16358:	str	r5, [r4]
   1635c:	pop	{r4, r5, r6, r7, fp, pc}
   16360:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16364:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16368:	add	fp, sp, #24
   1636c:	mov	r8, r1
   16370:	ldr	r1, [r1]
   16374:	mov	r5, r0
   16378:	add	r0, r1, r1, asr #1
   1637c:	cmp	r0, r1
   16380:	mvnvs	r0, #-2147483648	; 0x80000000
   16384:	cmp	r0, r3
   16388:	mov	r7, r0
   1638c:	movgt	r7, r3
   16390:	cmn	r3, #1
   16394:	movle	r7, r0
   16398:	ldr	r0, [fp, #8]
   1639c:	cmn	r0, #1
   163a0:	ble	163c8 <__mempcpy_chk@plt+0x53b8>
   163a4:	cmp	r0, #0
   163a8:	beq	1641c <__mempcpy_chk@plt+0x540c>
   163ac:	cmn	r7, #1
   163b0:	ble	163f0 <__mempcpy_chk@plt+0x53e0>
   163b4:	mvn	r4, #-2147483648	; 0x80000000
   163b8:	udiv	r6, r4, r0
   163bc:	cmp	r6, r7
   163c0:	bge	1641c <__mempcpy_chk@plt+0x540c>
   163c4:	b	1642c <__mempcpy_chk@plt+0x541c>
   163c8:	cmn	r7, #1
   163cc:	ble	1640c <__mempcpy_chk@plt+0x53fc>
   163d0:	cmn	r0, #1
   163d4:	beq	1641c <__mempcpy_chk@plt+0x540c>
   163d8:	mov	r6, #-2147483648	; 0x80000000
   163dc:	mvn	r4, #-2147483648	; 0x80000000
   163e0:	sdiv	r6, r6, r0
   163e4:	cmp	r6, r7
   163e8:	bge	1641c <__mempcpy_chk@plt+0x540c>
   163ec:	b	1642c <__mempcpy_chk@plt+0x541c>
   163f0:	beq	1641c <__mempcpy_chk@plt+0x540c>
   163f4:	mov	r6, #-2147483648	; 0x80000000
   163f8:	mvn	r4, #-2147483648	; 0x80000000
   163fc:	sdiv	r6, r6, r7
   16400:	cmp	r6, r0
   16404:	bge	1641c <__mempcpy_chk@plt+0x540c>
   16408:	b	1642c <__mempcpy_chk@plt+0x541c>
   1640c:	mvn	r4, #-2147483648	; 0x80000000
   16410:	sdiv	r6, r4, r0
   16414:	cmp	r7, r6
   16418:	blt	1642c <__mempcpy_chk@plt+0x541c>
   1641c:	mul	r6, r7, r0
   16420:	mov	r4, #64	; 0x40
   16424:	cmp	r6, #63	; 0x3f
   16428:	bgt	16434 <__mempcpy_chk@plt+0x5424>
   1642c:	sdiv	r7, r4, r0
   16430:	mul	r6, r7, r0
   16434:	cmp	r5, #0
   16438:	moveq	r4, #0
   1643c:	streq	r4, [r8]
   16440:	sub	r4, r7, r1
   16444:	cmp	r4, r2
   16448:	bge	164f4 <__mempcpy_chk@plt+0x54e4>
   1644c:	add	r7, r1, r2
   16450:	mov	r6, #0
   16454:	mov	r2, #0
   16458:	cmp	r7, r3
   1645c:	movwgt	r6, #1
   16460:	cmn	r3, #1
   16464:	movwgt	r2, #1
   16468:	cmp	r7, r1
   1646c:	bvs	16528 <__mempcpy_chk@plt+0x5518>
   16470:	ands	r1, r2, r6
   16474:	bne	16528 <__mempcpy_chk@plt+0x5518>
   16478:	cmn	r0, #1
   1647c:	ble	164a4 <__mempcpy_chk@plt+0x5494>
   16480:	cmp	r0, #0
   16484:	beq	164f0 <__mempcpy_chk@plt+0x54e0>
   16488:	cmn	r7, #1
   1648c:	ble	164c8 <__mempcpy_chk@plt+0x54b8>
   16490:	mvn	r1, #-2147483648	; 0x80000000
   16494:	udiv	r1, r1, r0
   16498:	cmp	r1, r7
   1649c:	bge	164f0 <__mempcpy_chk@plt+0x54e0>
   164a0:	b	16528 <__mempcpy_chk@plt+0x5518>
   164a4:	cmn	r7, #1
   164a8:	ble	164e0 <__mempcpy_chk@plt+0x54d0>
   164ac:	cmn	r0, #1
   164b0:	beq	164f0 <__mempcpy_chk@plt+0x54e0>
   164b4:	mov	r1, #-2147483648	; 0x80000000
   164b8:	sdiv	r1, r1, r0
   164bc:	cmp	r1, r7
   164c0:	bge	164f0 <__mempcpy_chk@plt+0x54e0>
   164c4:	b	16528 <__mempcpy_chk@plt+0x5518>
   164c8:	beq	164f0 <__mempcpy_chk@plt+0x54e0>
   164cc:	mov	r1, #-2147483648	; 0x80000000
   164d0:	sdiv	r1, r1, r7
   164d4:	cmp	r1, r0
   164d8:	bge	164f0 <__mempcpy_chk@plt+0x54e0>
   164dc:	b	16528 <__mempcpy_chk@plt+0x5518>
   164e0:	mvn	r1, #-2147483648	; 0x80000000
   164e4:	sdiv	r1, r1, r0
   164e8:	cmp	r7, r1
   164ec:	blt	16528 <__mempcpy_chk@plt+0x5518>
   164f0:	mul	r6, r7, r0
   164f4:	mov	r0, r5
   164f8:	mov	r1, r6
   164fc:	bl	16738 <__mempcpy_chk@plt+0x5728>
   16500:	cmp	r6, #0
   16504:	movwne	r6, #1
   16508:	cmp	r0, #0
   1650c:	bne	16520 <__mempcpy_chk@plt+0x5510>
   16510:	clz	r1, r5
   16514:	lsr	r1, r1, #5
   16518:	orrs	r1, r1, r6
   1651c:	bne	16528 <__mempcpy_chk@plt+0x5518>
   16520:	str	r7, [r8]
   16524:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16528:	bl	16670 <__mempcpy_chk@plt+0x5660>
   1652c:	push	{fp, lr}
   16530:	mov	fp, sp
   16534:	mov	r1, #1
   16538:	bl	166b4 <__mempcpy_chk@plt+0x56a4>
   1653c:	cmp	r0, #0
   16540:	popne	{fp, pc}
   16544:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16548:	push	{fp, lr}
   1654c:	mov	fp, sp
   16550:	bl	166b4 <__mempcpy_chk@plt+0x56a4>
   16554:	cmp	r0, #0
   16558:	popne	{fp, pc}
   1655c:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16560:	push	{fp, lr}
   16564:	mov	fp, sp
   16568:	mov	r1, #1
   1656c:	bl	166b4 <__mempcpy_chk@plt+0x56a4>
   16570:	cmp	r0, #0
   16574:	popne	{fp, pc}
   16578:	bl	16670 <__mempcpy_chk@plt+0x5660>
   1657c:	push	{fp, lr}
   16580:	mov	fp, sp
   16584:	bl	166b4 <__mempcpy_chk@plt+0x56a4>
   16588:	cmp	r0, #0
   1658c:	popne	{fp, pc}
   16590:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16594:	push	{r4, r5, fp, lr}
   16598:	add	fp, sp, #8
   1659c:	mov	r5, r0
   165a0:	mov	r0, r1
   165a4:	mov	r4, r1
   165a8:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   165ac:	cmp	r0, #0
   165b0:	beq	165c4 <__mempcpy_chk@plt+0x55b4>
   165b4:	mov	r1, r5
   165b8:	mov	r2, r4
   165bc:	pop	{r4, r5, fp, lr}
   165c0:	b	10e24 <memcpy@plt>
   165c4:	bl	16670 <__mempcpy_chk@plt+0x5660>
   165c8:	push	{r4, r5, fp, lr}
   165cc:	add	fp, sp, #8
   165d0:	mov	r5, r0
   165d4:	mov	r0, r1
   165d8:	mov	r4, r1
   165dc:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   165e0:	cmp	r0, #0
   165e4:	beq	165f8 <__mempcpy_chk@plt+0x55e8>
   165e8:	mov	r1, r5
   165ec:	mov	r2, r4
   165f0:	pop	{r4, r5, fp, lr}
   165f4:	b	10e24 <memcpy@plt>
   165f8:	bl	16670 <__mempcpy_chk@plt+0x5660>
   165fc:	push	{r4, r5, fp, lr}
   16600:	add	fp, sp, #8
   16604:	mov	r5, r0
   16608:	add	r0, r1, #1
   1660c:	mov	r4, r1
   16610:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   16614:	cmp	r0, #0
   16618:	beq	16634 <__mempcpy_chk@plt+0x5624>
   1661c:	mov	r1, #0
   16620:	mov	r2, r4
   16624:	strb	r1, [r0, r4]
   16628:	mov	r1, r5
   1662c:	pop	{r4, r5, fp, lr}
   16630:	b	10e24 <memcpy@plt>
   16634:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16638:	push	{r4, r5, fp, lr}
   1663c:	add	fp, sp, #8
   16640:	mov	r4, r0
   16644:	bl	10f38 <strlen@plt>
   16648:	add	r5, r0, #1
   1664c:	mov	r0, r5
   16650:	bl	16708 <__mempcpy_chk@plt+0x56f8>
   16654:	cmp	r0, #0
   16658:	beq	1666c <__mempcpy_chk@plt+0x565c>
   1665c:	mov	r1, r4
   16660:	mov	r2, r5
   16664:	pop	{r4, r5, fp, lr}
   16668:	b	10e24 <memcpy@plt>
   1666c:	bl	16670 <__mempcpy_chk@plt+0x5660>
   16670:	push	{fp, lr}
   16674:	mov	fp, sp
   16678:	movw	r0, #33004	; 0x80ec
   1667c:	movw	r1, #31016	; 0x7928
   16680:	mov	r2, #5
   16684:	movt	r0, #2
   16688:	movt	r1, #1
   1668c:	ldr	r4, [r0]
   16690:	mov	r0, #0
   16694:	bl	10e3c <dcgettext@plt>
   16698:	movw	r2, #29852	; 0x749c
   1669c:	mov	r3, r0
   166a0:	mov	r0, r4
   166a4:	mov	r1, #0
   166a8:	movt	r2, #1
   166ac:	bl	10ec0 <error@plt>
   166b0:	bl	10ff8 <abort@plt>
   166b4:	clz	r2, r1
   166b8:	clz	r3, r0
   166bc:	lsr	r2, r2, #5
   166c0:	lsr	r3, r3, #5
   166c4:	orrs	r2, r3, r2
   166c8:	movwne	r1, #1
   166cc:	movwne	r0, #1
   166d0:	cmp	r1, #0
   166d4:	beq	16704 <__mempcpy_chk@plt+0x56f4>
   166d8:	mvn	r2, #-2147483648	; 0x80000000
   166dc:	udiv	r2, r2, r1
   166e0:	cmp	r2, r0
   166e4:	bcs	16704 <__mempcpy_chk@plt+0x56f4>
   166e8:	push	{fp, lr}
   166ec:	mov	fp, sp
   166f0:	bl	10f44 <__errno_location@plt>
   166f4:	mov	r1, #12
   166f8:	str	r1, [r0]
   166fc:	mov	r0, #0
   16700:	pop	{fp, pc}
   16704:	b	10db8 <calloc@plt>
   16708:	cmp	r0, #0
   1670c:	movweq	r0, #1
   16710:	cmn	r0, #1
   16714:	ble	1671c <__mempcpy_chk@plt+0x570c>
   16718:	b	10ecc <malloc@plt>
   1671c:	push	{fp, lr}
   16720:	mov	fp, sp
   16724:	bl	10f44 <__errno_location@plt>
   16728:	mov	r1, #12
   1672c:	str	r1, [r0]
   16730:	mov	r0, #0
   16734:	pop	{fp, pc}
   16738:	push	{fp, lr}
   1673c:	mov	fp, sp
   16740:	cmp	r0, #0
   16744:	beq	16760 <__mempcpy_chk@plt+0x5750>
   16748:	cmp	r1, #0
   1674c:	beq	1676c <__mempcpy_chk@plt+0x575c>
   16750:	cmn	r1, #1
   16754:	ble	16778 <__mempcpy_chk@plt+0x5768>
   16758:	pop	{fp, lr}
   1675c:	b	10e48 <realloc@plt>
   16760:	mov	r0, r1
   16764:	pop	{fp, lr}
   16768:	b	16708 <__mempcpy_chk@plt+0x56f8>
   1676c:	bl	1278c <__mempcpy_chk@plt+0x177c>
   16770:	mov	r0, #0
   16774:	pop	{fp, pc}
   16778:	bl	10f44 <__errno_location@plt>
   1677c:	mov	r1, #12
   16780:	str	r1, [r0]
   16784:	mov	r0, #0
   16788:	pop	{fp, pc}
   1678c:	push	{r4, r5, r6, sl, fp, lr}
   16790:	add	fp, sp, #16
   16794:	mov	r4, r0
   16798:	bl	10ea8 <__fpending@plt>
   1679c:	ldr	r6, [r4]
   167a0:	mov	r5, r0
   167a4:	mov	r0, r4
   167a8:	bl	16810 <__mempcpy_chk@plt+0x5800>
   167ac:	tst	r6, #32
   167b0:	bne	167e8 <__mempcpy_chk@plt+0x57d8>
   167b4:	cmp	r0, #0
   167b8:	mov	r4, r0
   167bc:	mvnne	r4, #0
   167c0:	cmp	r5, #0
   167c4:	bne	167f4 <__mempcpy_chk@plt+0x57e4>
   167c8:	cmp	r0, #0
   167cc:	beq	167f4 <__mempcpy_chk@plt+0x57e4>
   167d0:	bl	10f44 <__errno_location@plt>
   167d4:	ldr	r0, [r0]
   167d8:	subs	r4, r0, #9
   167dc:	mvnne	r4, #0
   167e0:	mov	r0, r4
   167e4:	pop	{r4, r5, r6, sl, fp, pc}
   167e8:	mvn	r4, #0
   167ec:	cmp	r0, #0
   167f0:	beq	167fc <__mempcpy_chk@plt+0x57ec>
   167f4:	mov	r0, r4
   167f8:	pop	{r4, r5, r6, sl, fp, pc}
   167fc:	bl	10f44 <__errno_location@plt>
   16800:	mov	r1, #0
   16804:	str	r1, [r0]
   16808:	mov	r0, r4
   1680c:	pop	{r4, r5, r6, sl, fp, pc}
   16810:	push	{r4, r5, r6, sl, fp, lr}
   16814:	add	fp, sp, #16
   16818:	sub	sp, sp, #8
   1681c:	mov	r4, r0
   16820:	bl	10f74 <fileno@plt>
   16824:	cmn	r0, #1
   16828:	ble	1689c <__mempcpy_chk@plt+0x588c>
   1682c:	mov	r0, r4
   16830:	bl	10ee4 <__freading@plt>
   16834:	cmp	r0, #0
   16838:	beq	16864 <__mempcpy_chk@plt+0x5854>
   1683c:	mov	r0, r4
   16840:	bl	10f74 <fileno@plt>
   16844:	mov	r1, #1
   16848:	mov	r2, #0
   1684c:	mov	r3, #0
   16850:	str	r1, [sp]
   16854:	bl	10e90 <lseek64@plt>
   16858:	and	r0, r0, r1
   1685c:	cmn	r0, #1
   16860:	beq	1689c <__mempcpy_chk@plt+0x588c>
   16864:	mov	r0, r4
   16868:	bl	168ac <__mempcpy_chk@plt+0x589c>
   1686c:	cmp	r0, #0
   16870:	beq	1689c <__mempcpy_chk@plt+0x588c>
   16874:	bl	10f44 <__errno_location@plt>
   16878:	ldr	r6, [r0]
   1687c:	mov	r5, r0
   16880:	mov	r0, r4
   16884:	bl	10f8c <fclose@plt>
   16888:	cmp	r6, #0
   1688c:	strne	r6, [r5]
   16890:	mvnne	r0, #0
   16894:	sub	sp, fp, #16
   16898:	pop	{r4, r5, r6, sl, fp, pc}
   1689c:	mov	r0, r4
   168a0:	sub	sp, fp, #16
   168a4:	pop	{r4, r5, r6, sl, fp, lr}
   168a8:	b	10f8c <fclose@plt>
   168ac:	push	{r4, sl, fp, lr}
   168b0:	add	fp, sp, #8
   168b4:	sub	sp, sp, #8
   168b8:	mov	r4, r0
   168bc:	cmp	r0, #0
   168c0:	beq	168f8 <__mempcpy_chk@plt+0x58e8>
   168c4:	mov	r0, r4
   168c8:	bl	10ee4 <__freading@plt>
   168cc:	cmp	r0, #0
   168d0:	beq	168f8 <__mempcpy_chk@plt+0x58e8>
   168d4:	ldrb	r0, [r4, #1]
   168d8:	tst	r0, #1
   168dc:	beq	168f8 <__mempcpy_chk@plt+0x58e8>
   168e0:	mov	r0, #1
   168e4:	mov	r2, #0
   168e8:	mov	r3, #0
   168ec:	str	r0, [sp]
   168f0:	mov	r0, r4
   168f4:	bl	16908 <__mempcpy_chk@plt+0x58f8>
   168f8:	mov	r0, r4
   168fc:	sub	sp, fp, #8
   16900:	pop	{r4, sl, fp, lr}
   16904:	b	10de8 <fflush@plt>
   16908:	push	{r4, r5, r6, r7, fp, lr}
   1690c:	add	fp, sp, #16
   16910:	sub	sp, sp, #8
   16914:	mov	r4, r0
   16918:	ldr	r0, [r0, #4]
   1691c:	mov	r5, r3
   16920:	mov	r6, r2
   16924:	ldr	r1, [r4, #8]
   16928:	cmp	r1, r0
   1692c:	bne	16948 <__mempcpy_chk@plt+0x5938>
   16930:	ldrd	r0, [r4, #16]
   16934:	cmp	r1, r0
   16938:	bne	16948 <__mempcpy_chk@plt+0x5938>
   1693c:	ldr	r0, [r4, #36]	; 0x24
   16940:	cmp	r0, #0
   16944:	beq	16960 <__mempcpy_chk@plt+0x5950>
   16948:	mov	r0, r4
   1694c:	mov	r2, r6
   16950:	mov	r3, r5
   16954:	sub	sp, fp, #16
   16958:	pop	{r4, r5, r6, r7, fp, lr}
   1695c:	b	10f98 <fseeko64@plt>
   16960:	ldr	r7, [fp, #8]
   16964:	mov	r0, r4
   16968:	bl	10f74 <fileno@plt>
   1696c:	mov	r2, r6
   16970:	mov	r3, r5
   16974:	str	r7, [sp]
   16978:	bl	10e90 <lseek64@plt>
   1697c:	and	r2, r0, r1
   16980:	cmn	r2, #1
   16984:	beq	169a4 <__mempcpy_chk@plt+0x5994>
   16988:	strd	r0, [r4, #80]	; 0x50
   1698c:	ldr	r0, [r4]
   16990:	bic	r0, r0, #16
   16994:	str	r0, [r4]
   16998:	mov	r0, #0
   1699c:	sub	sp, fp, #16
   169a0:	pop	{r4, r5, r6, r7, fp, pc}
   169a4:	mvn	r0, #0
   169a8:	sub	sp, fp, #16
   169ac:	pop	{r4, r5, r6, r7, fp, pc}
   169b0:	ldrb	r2, [r0]
   169b4:	cmp	r2, #0
   169b8:	beq	169dc <__mempcpy_chk@plt+0x59cc>
   169bc:	add	r3, r0, #1
   169c0:	mov	r0, #0
   169c4:	ror	r0, r0, #23
   169c8:	uxtab	r0, r0, r2
   169cc:	ldrb	r2, [r3], #1
   169d0:	cmp	r2, #0
   169d4:	bne	169c4 <__mempcpy_chk@plt+0x59b4>
   169d8:	b	169e0 <__mempcpy_chk@plt+0x59d0>
   169dc:	mov	r0, #0
   169e0:	udiv	r2, r0, r1
   169e4:	mls	r0, r2, r1, r0
   169e8:	bx	lr
   169ec:	push	{fp, lr}
   169f0:	mov	fp, sp
   169f4:	mov	r0, #14
   169f8:	bl	10fc8 <nl_langinfo@plt>
   169fc:	movw	r1, #28256	; 0x6e60
   16a00:	cmp	r0, #0
   16a04:	movt	r1, #1
   16a08:	movne	r1, r0
   16a0c:	movw	r0, #31033	; 0x7939
   16a10:	ldrb	r2, [r1]
   16a14:	movt	r0, #1
   16a18:	cmp	r2, #0
   16a1c:	movne	r0, r1
   16a20:	pop	{fp, pc}
   16a24:	push	{r4, r5, r6, r7, fp, lr}
   16a28:	add	fp, sp, #16
   16a2c:	sub	sp, sp, #8
   16a30:	cmp	r0, #0
   16a34:	add	r5, sp, #4
   16a38:	mov	r7, r2
   16a3c:	mov	r4, r1
   16a40:	movne	r5, r0
   16a44:	mov	r0, r5
   16a48:	bl	10eb4 <mbrtowc@plt>
   16a4c:	mov	r6, r0
   16a50:	cmp	r7, #0
   16a54:	beq	16a7c <__mempcpy_chk@plt+0x5a6c>
   16a58:	cmn	r6, #2
   16a5c:	bcc	16a7c <__mempcpy_chk@plt+0x5a6c>
   16a60:	mov	r0, #0
   16a64:	bl	16ac4 <__mempcpy_chk@plt+0x5ab4>
   16a68:	cmp	r0, #0
   16a6c:	bne	16a7c <__mempcpy_chk@plt+0x5a6c>
   16a70:	ldrb	r0, [r4]
   16a74:	mov	r6, #1
   16a78:	str	r0, [r5]
   16a7c:	mov	r0, r6
   16a80:	sub	sp, fp, #16
   16a84:	pop	{r4, r5, r6, r7, fp, pc}
   16a88:	cmp	r2, #0
   16a8c:	beq	16abc <__mempcpy_chk@plt+0x5aac>
   16a90:	mvn	r3, #0
   16a94:	udiv	r3, r3, r2
   16a98:	cmp	r3, r1
   16a9c:	bcs	16abc <__mempcpy_chk@plt+0x5aac>
   16aa0:	push	{fp, lr}
   16aa4:	mov	fp, sp
   16aa8:	bl	10f44 <__errno_location@plt>
   16aac:	mov	r1, #12
   16ab0:	str	r1, [r0]
   16ab4:	mov	r0, #0
   16ab8:	pop	{fp, pc}
   16abc:	mul	r1, r2, r1
   16ac0:	b	16738 <__mempcpy_chk@plt+0x5728>
   16ac4:	push	{r4, sl, fp, lr}
   16ac8:	add	fp, sp, #8
   16acc:	sub	sp, sp, #264	; 0x108
   16ad0:	add	r1, sp, #7
   16ad4:	movw	r2, #257	; 0x101
   16ad8:	bl	16b30 <__mempcpy_chk@plt+0x5b20>
   16adc:	mov	r4, #0
   16ae0:	cmp	r0, #0
   16ae4:	bne	16b24 <__mempcpy_chk@plt+0x5b14>
   16ae8:	movw	r1, #31039	; 0x793f
   16aec:	add	r0, sp, #7
   16af0:	mov	r2, #2
   16af4:	movt	r1, #1
   16af8:	bl	10f2c <bcmp@plt>
   16afc:	cmp	r0, #0
   16b00:	beq	16b24 <__mempcpy_chk@plt+0x5b14>
   16b04:	movw	r1, #31041	; 0x7941
   16b08:	add	r0, sp, #7
   16b0c:	mov	r2, #6
   16b10:	movt	r1, #1
   16b14:	bl	10f2c <bcmp@plt>
   16b18:	cmp	r0, #0
   16b1c:	mov	r4, r0
   16b20:	movwne	r4, #1
   16b24:	mov	r0, r4
   16b28:	sub	sp, fp, #8
   16b2c:	pop	{r4, sl, fp, pc}
   16b30:	push	{r4, r5, r6, r7, fp, lr}
   16b34:	add	fp, sp, #16
   16b38:	mov	r4, r1
   16b3c:	mov	r1, #0
   16b40:	mov	r6, r2
   16b44:	bl	10fb0 <setlocale@plt>
   16b48:	cmp	r0, #0
   16b4c:	beq	16b7c <__mempcpy_chk@plt+0x5b6c>
   16b50:	mov	r7, r0
   16b54:	bl	10f38 <strlen@plt>
   16b58:	cmp	r0, r6
   16b5c:	bcs	16b98 <__mempcpy_chk@plt+0x5b88>
   16b60:	add	r2, r0, #1
   16b64:	mov	r0, r4
   16b68:	mov	r1, r7
   16b6c:	bl	10e24 <memcpy@plt>
   16b70:	mov	r5, #0
   16b74:	mov	r0, r5
   16b78:	pop	{r4, r5, r6, r7, fp, pc}
   16b7c:	mov	r5, #22
   16b80:	cmp	r6, #0
   16b84:	beq	16bc0 <__mempcpy_chk@plt+0x5bb0>
   16b88:	mov	r0, #0
   16b8c:	strb	r0, [r4]
   16b90:	mov	r0, r5
   16b94:	pop	{r4, r5, r6, r7, fp, pc}
   16b98:	mov	r5, #34	; 0x22
   16b9c:	cmp	r6, #0
   16ba0:	beq	16bc0 <__mempcpy_chk@plt+0x5bb0>
   16ba4:	sub	r6, r6, #1
   16ba8:	mov	r0, r4
   16bac:	mov	r1, r7
   16bb0:	mov	r2, r6
   16bb4:	bl	10e24 <memcpy@plt>
   16bb8:	mov	r0, #0
   16bbc:	strb	r0, [r4, r6]
   16bc0:	mov	r0, r5
   16bc4:	pop	{r4, r5, r6, r7, fp, pc}
   16bc8:	mov	r1, #0
   16bcc:	b	10fb0 <setlocale@plt>
   16bd0:	cmp	r3, #0
   16bd4:	cmpeq	r2, #0
   16bd8:	bne	16bf0 <__mempcpy_chk@plt+0x5be0>
   16bdc:	cmp	r1, #0
   16be0:	cmpeq	r0, #0
   16be4:	mvnne	r1, #0
   16be8:	mvnne	r0, #0
   16bec:	b	16c0c <__mempcpy_chk@plt+0x5bfc>
   16bf0:	sub	sp, sp, #8
   16bf4:	push	{sp, lr}
   16bf8:	bl	16c1c <__mempcpy_chk@plt+0x5c0c>
   16bfc:	ldr	lr, [sp, #4]
   16c00:	add	sp, sp, #8
   16c04:	pop	{r2, r3}
   16c08:	bx	lr
   16c0c:	push	{r1, lr}
   16c10:	mov	r0, #8
   16c14:	bl	10dd0 <raise@plt>
   16c18:	pop	{r1, pc}
   16c1c:	cmp	r1, r3
   16c20:	cmpeq	r0, r2
   16c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c28:	mov	r4, r0
   16c2c:	movcc	r0, #0
   16c30:	mov	r5, r1
   16c34:	ldr	lr, [sp, #36]	; 0x24
   16c38:	movcc	r1, r0
   16c3c:	bcc	16d38 <__mempcpy_chk@plt+0x5d28>
   16c40:	cmp	r3, #0
   16c44:	clzeq	ip, r2
   16c48:	clzne	ip, r3
   16c4c:	addeq	ip, ip, #32
   16c50:	cmp	r5, #0
   16c54:	clzeq	r1, r4
   16c58:	addeq	r1, r1, #32
   16c5c:	clzne	r1, r5
   16c60:	sub	ip, ip, r1
   16c64:	sub	sl, ip, #32
   16c68:	lsl	r9, r3, ip
   16c6c:	rsb	fp, ip, #32
   16c70:	orr	r9, r9, r2, lsl sl
   16c74:	orr	r9, r9, r2, lsr fp
   16c78:	lsl	r8, r2, ip
   16c7c:	cmp	r5, r9
   16c80:	cmpeq	r4, r8
   16c84:	movcc	r0, #0
   16c88:	movcc	r1, r0
   16c8c:	bcc	16ca8 <__mempcpy_chk@plt+0x5c98>
   16c90:	mov	r0, #1
   16c94:	subs	r4, r4, r8
   16c98:	lsl	r1, r0, sl
   16c9c:	orr	r1, r1, r0, lsr fp
   16ca0:	lsl	r0, r0, ip
   16ca4:	sbc	r5, r5, r9
   16ca8:	cmp	ip, #0
   16cac:	beq	16d38 <__mempcpy_chk@plt+0x5d28>
   16cb0:	lsr	r6, r8, #1
   16cb4:	orr	r6, r6, r9, lsl #31
   16cb8:	lsr	r7, r9, #1
   16cbc:	mov	r2, ip
   16cc0:	b	16ce4 <__mempcpy_chk@plt+0x5cd4>
   16cc4:	subs	r3, r4, r6
   16cc8:	sbc	r8, r5, r7
   16ccc:	adds	r3, r3, r3
   16cd0:	adc	r8, r8, r8
   16cd4:	adds	r4, r3, #1
   16cd8:	adc	r5, r8, #0
   16cdc:	subs	r2, r2, #1
   16ce0:	beq	16d00 <__mempcpy_chk@plt+0x5cf0>
   16ce4:	cmp	r5, r7
   16ce8:	cmpeq	r4, r6
   16cec:	bcs	16cc4 <__mempcpy_chk@plt+0x5cb4>
   16cf0:	adds	r4, r4, r4
   16cf4:	adc	r5, r5, r5
   16cf8:	subs	r2, r2, #1
   16cfc:	bne	16ce4 <__mempcpy_chk@plt+0x5cd4>
   16d00:	lsr	r3, r4, ip
   16d04:	orr	r3, r3, r5, lsl fp
   16d08:	lsr	r2, r5, ip
   16d0c:	orr	r3, r3, r5, lsr sl
   16d10:	adds	r0, r0, r4
   16d14:	mov	r4, r3
   16d18:	lsl	r3, r2, ip
   16d1c:	orr	r3, r3, r4, lsl sl
   16d20:	lsl	ip, r4, ip
   16d24:	orr	r3, r3, r4, lsr fp
   16d28:	adc	r1, r1, r5
   16d2c:	subs	r0, r0, ip
   16d30:	mov	r5, r2
   16d34:	sbc	r1, r1, r3
   16d38:	cmp	lr, #0
   16d3c:	strdne	r4, [lr]
   16d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d48:	mov	r7, r0
   16d4c:	ldr	r6, [pc, #72]	; 16d9c <__mempcpy_chk@plt+0x5d8c>
   16d50:	ldr	r5, [pc, #72]	; 16da0 <__mempcpy_chk@plt+0x5d90>
   16d54:	add	r6, pc, r6
   16d58:	add	r5, pc, r5
   16d5c:	sub	r6, r6, r5
   16d60:	mov	r8, r1
   16d64:	mov	r9, r2
   16d68:	bl	10d98 <calloc@plt-0x20>
   16d6c:	asrs	r6, r6, #2
   16d70:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d74:	mov	r4, #0
   16d78:	add	r4, r4, #1
   16d7c:	ldr	r3, [r5], #4
   16d80:	mov	r2, r9
   16d84:	mov	r1, r8
   16d88:	mov	r0, r7
   16d8c:	blx	r3
   16d90:	cmp	r6, r4
   16d94:	bne	16d78 <__mempcpy_chk@plt+0x5d68>
   16d98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d9c:			; <UNDEFINED> instruction: 0x000111b0
   16da0:	andeq	r1, r1, r8, lsr #3
   16da4:	bx	lr
   16da8:	ldr	r3, [pc, #12]	; 16dbc <__mempcpy_chk@plt+0x5dac>
   16dac:	mov	r1, #0
   16db0:	add	r3, pc, r3
   16db4:	ldr	r2, [r3]
   16db8:	b	10f50 <__cxa_atexit@plt>
   16dbc:	andeq	r1, r1, ip, lsr #6

Disassembly of section .fini:

00016dc0 <.fini>:
   16dc0:	push	{r3, lr}
   16dc4:	pop	{r3, pc}
