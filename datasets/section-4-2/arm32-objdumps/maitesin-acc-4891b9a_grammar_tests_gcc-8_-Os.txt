
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011820 <.init>:
   11820:	push	{r3, lr}
   11824:	bl	12228 <_start@@Base+0x3c>
   11828:	pop	{r3, pc}

Disassembly of section .plt:

0001182c <fdopen@plt-0x14>:
   1182c:	push	{lr}		; (str lr, [sp, #-4]!)
   11830:	ldr	lr, [pc, #4]	; 1183c <fdopen@plt-0x4>
   11834:	add	lr, pc, lr
   11838:	ldr	pc, [lr, #8]!
   1183c:	andeq	r8, r1, r4, asr #15

00011840 <fdopen@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #24, 20	; 0x18000
   11848:	ldr	pc, [ip, #1988]!	; 0x7c4

0001184c <raise@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #24, 20	; 0x18000
   11854:	ldr	pc, [ip, #1980]!	; 0x7bc

00011858 <setbuf@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #24, 20	; 0x18000
   11860:	ldr	pc, [ip, #1972]!	; 0x7b4

00011864 <printf@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #24, 20	; 0x18000
   1186c:	ldr	pc, [ip, #1964]!	; 0x7ac

00011870 <fflush@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #24, 20	; 0x18000
   11878:	ldr	pc, [ip, #1956]!	; 0x7a4

0001187c <free@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #24, 20	; 0x18000
   11884:	ldr	pc, [ip, #1948]!	; 0x79c

00011888 <memcpy@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #24, 20	; 0x18000
   11890:	ldr	pc, [ip, #1940]!	; 0x794

00011894 <ftell@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #24, 20	; 0x18000
   1189c:	ldr	pc, [ip, #1932]!	; 0x78c

000118a0 <fwrite@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #24, 20	; 0x18000
   118a8:	ldr	pc, [ip, #1924]!	; 0x784

000118ac <strcpy@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #24, 20	; 0x18000
   118b4:	ldr	pc, [ip, #1916]!	; 0x77c

000118b8 <fread@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #24, 20	; 0x18000
   118c0:	ldr	pc, [ip, #1908]!	; 0x774

000118c4 <open64@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #24, 20	; 0x18000
   118cc:	ldr	pc, [ip, #1900]!	; 0x76c

000118d0 <getenv@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #24, 20	; 0x18000
   118d8:	ldr	pc, [ip, #1892]!	; 0x764

000118dc <puts@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #24, 20	; 0x18000
   118e4:	ldr	pc, [ip, #1884]!	; 0x75c

000118e8 <malloc@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #24, 20	; 0x18000
   118f0:	ldr	pc, [ip, #1876]!	; 0x754

000118f4 <__libc_start_main@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #24, 20	; 0x18000
   118fc:	ldr	pc, [ip, #1868]!	; 0x74c

00011900 <__gmon_start__@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #24, 20	; 0x18000
   11908:	ldr	pc, [ip, #1860]!	; 0x744

0001190c <getpid@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #24, 20	; 0x18000
   11914:	ldr	pc, [ip, #1852]!	; 0x73c

00011918 <exit@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #24, 20	; 0x18000
   11920:	ldr	pc, [ip, #1844]!	; 0x734

00011924 <strlen@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #24, 20	; 0x18000
   1192c:	ldr	pc, [ip, #1836]!	; 0x72c

00011930 <fprintf@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #24, 20	; 0x18000
   11938:	ldr	pc, [ip, #1828]!	; 0x724

0001193c <__errno_location@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #24, 20	; 0x18000
   11944:	ldr	pc, [ip, #1820]!	; 0x71c

00011948 <mkdir@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #24, 20	; 0x18000
   11950:	ldr	pc, [ip, #1812]!	; 0x714

00011954 <memset@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #24, 20	; 0x18000
   1195c:	ldr	pc, [ip, #1804]!	; 0x70c

00011960 <access@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #24, 20	; 0x18000
   11968:	ldr	pc, [ip, #1796]!	; 0x704

0001196c <fclose@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #24, 20	; 0x18000
   11974:	ldr	pc, [ip, #1788]!	; 0x6fc

00011978 <strnlen@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #24, 20	; 0x18000
   11980:	ldr	pc, [ip, #1780]!	; 0x6f4

00011984 <fcntl64@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #24, 20	; 0x18000
   1198c:	ldr	pc, [ip, #1772]!	; 0x6ec

00011990 <vfprintf@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #24, 20	; 0x18000
   11998:	ldr	pc, [ip, #1764]!	; 0x6e4

0001199c <atoi@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #24, 20	; 0x18000
   119a4:	ldr	pc, [ip, #1756]!	; 0x6dc

000119a8 <fopen64@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #24, 20	; 0x18000
   119b0:	ldr	pc, [ip, #1748]!	; 0x6d4

000119b4 <fseek@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #24, 20	; 0x18000
   119bc:	ldr	pc, [ip, #1740]!	; 0x6cc

000119c0 <fputs@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #24, 20	; 0x18000
   119c8:	ldr	pc, [ip, #1732]!	; 0x6c4

000119cc <strncmp@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #24, 20	; 0x18000
   119d4:	ldr	pc, [ip, #1724]!	; 0x6bc

000119d8 <abort@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #24, 20	; 0x18000
   119e0:	ldr	pc, [ip, #1716]!	; 0x6b4

000119e4 <close@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #24, 20	; 0x18000
   119ec:	ldr	pc, [ip, #1708]!	; 0x6ac

000119f0 <__assert_fail@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #24, 20	; 0x18000
   119f8:	ldr	pc, [ip, #1700]!	; 0x6a4

Disassembly of section .text:

000119fc <main@@Base-0x10>:
   119fc:	b	18508 <__gcov_sort_n_vals@@Base+0x430>
   11a00:	b	18508 <__gcov_sort_n_vals@@Base+0x430>
   11a04:	b	18508 <__gcov_sort_n_vals@@Base+0x430>
   11a08:	b	18508 <__gcov_sort_n_vals@@Base+0x430>

00011a0c <main@@Base>:
   11a0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11a10:	mov	r1, #0
   11a14:	ldr	r5, [pc, #1864]	; 12164 <main@@Base+0x758>
   11a18:	ldr	r6, [pc, #1864]	; 12168 <main@@Base+0x75c>
   11a1c:	ldr	r9, [pc, #1864]	; 1216c <main@@Base+0x760>
   11a20:	add	r4, r5, #1520	; 0x5f0
   11a24:	ldr	r3, [r4, #-8]
   11a28:	ldr	r2, [r4, #-4]
   11a2c:	ldr	r0, [r6]
   11a30:	adds	r3, r3, #1
   11a34:	ldr	r8, [pc, #1844]	; 12170 <main@@Base+0x764>
   11a38:	adc	r2, r2, #0
   11a3c:	str	r3, [r4, #-8]
   11a40:	ldr	r7, [pc, #1836]	; 12174 <main@@Base+0x768>
   11a44:	str	r2, [r4, #-4]
   11a48:	bl	11858 <setbuf@plt>
   11a4c:	ldr	r3, [r4]
   11a50:	mov	r0, r9
   11a54:	ldr	r2, [r4, #4]
   11a58:	ldr	r1, [r6]
   11a5c:	adds	r3, r3, #1
   11a60:	adc	r2, r2, #0
   11a64:	str	r3, [r4]
   11a68:	str	r2, [r4, #4]
   11a6c:	bl	119c0 <fputs@plt>
   11a70:	ldr	r3, [r4, #8]
   11a74:	ldr	r2, [r4, #12]
   11a78:	ldr	r0, [pc, #1784]	; 12178 <main@@Base+0x76c>
   11a7c:	adds	r3, r3, #1
   11a80:	ldr	r1, [r6]
   11a84:	adc	r2, r2, #0
   11a88:	str	r3, [r4, #8]
   11a8c:	str	r2, [r4, #12]
   11a90:	bl	119c0 <fputs@plt>
   11a94:	ldr	r3, [r4, #16]
   11a98:	ldr	r2, [r4, #20]
   11a9c:	ldr	r0, [pc, #1752]	; 1217c <main@@Base+0x770>
   11aa0:	adds	r3, r3, #1
   11aa4:	ldr	r1, [r6]
   11aa8:	adc	r2, r2, #0
   11aac:	str	r3, [r4, #16]
   11ab0:	ldr	r6, [pc, #1736]	; 12180 <main@@Base+0x774>
   11ab4:	str	r2, [r4, #20]
   11ab8:	bl	119c0 <fputs@plt>
   11abc:	ldr	r3, [r4, #24]
   11ac0:	mov	r0, #0
   11ac4:	ldr	r2, [r4, #28]
   11ac8:	adds	r3, r3, #1
   11acc:	adc	r2, r2, #0
   11ad0:	str	r3, [r4, #24]
   11ad4:	str	r2, [r4, #28]
   11ad8:	bl	11870 <fflush@plt>
   11adc:	ldr	r3, [r4, #32]
   11ae0:	mov	r1, r8
   11ae4:	mov	r0, r7
   11ae8:	ldr	r2, [r4, #36]	; 0x24
   11aec:	adds	r3, r3, #1
   11af0:	adc	r2, r2, #0
   11af4:	str	r3, [r4, #32]
   11af8:	str	r2, [r4, #36]	; 0x24
   11afc:	ldr	r2, [pc, #1664]	; 12184 <main@@Base+0x778>
   11b00:	bl	11864 <printf@plt>
   11b04:	ldr	r3, [r4, #40]	; 0x28
   11b08:	ldr	r2, [r4, #44]	; 0x2c
   11b0c:	adds	r3, r3, #1
   11b10:	adc	r2, r2, #0
   11b14:	str	r3, [r4, #40]	; 0x28
   11b18:	str	r2, [r4, #44]	; 0x2c
   11b1c:	bl	125e0 <setup@@Base>
   11b20:	ldr	r3, [r4, #48]	; 0x30
   11b24:	ldr	r2, [r4, #52]	; 0x34
   11b28:	adds	r3, r3, #1
   11b2c:	adc	r2, r2, #0
   11b30:	str	r3, [r4, #48]	; 0x30
   11b34:	str	r2, [r4, #52]	; 0x34
   11b38:	bl	12640 <no_int_as_first_stuff@@Base>
   11b3c:	ldr	r3, [r4, #56]	; 0x38
   11b40:	mov	r0, r6
   11b44:	ldr	r2, [r4, #60]	; 0x3c
   11b48:	adds	r3, r3, #1
   11b4c:	adc	r2, r2, #0
   11b50:	str	r3, [r4, #56]	; 0x38
   11b54:	str	r2, [r4, #60]	; 0x3c
   11b58:	bl	118dc <puts@plt>
   11b5c:	ldr	r3, [r4, #64]	; 0x40
   11b60:	mov	r1, r8
   11b64:	mov	r0, r7
   11b68:	ldr	r2, [r4, #68]	; 0x44
   11b6c:	adds	r3, r3, #1
   11b70:	adc	r2, r2, #0
   11b74:	str	r3, [r4, #64]	; 0x40
   11b78:	str	r2, [r4, #68]	; 0x44
   11b7c:	ldr	r2, [pc, #1540]	; 12188 <main@@Base+0x77c>
   11b80:	bl	11864 <printf@plt>
   11b84:	ldr	r3, [r4, #72]	; 0x48
   11b88:	ldr	r2, [r4, #76]	; 0x4c
   11b8c:	adds	r3, r3, #1
   11b90:	adc	r2, r2, #0
   11b94:	str	r3, [r4, #72]	; 0x48
   11b98:	str	r2, [r4, #76]	; 0x4c
   11b9c:	bl	125e0 <setup@@Base>
   11ba0:	ldr	r3, [r4, #80]	; 0x50
   11ba4:	ldr	r2, [r4, #84]	; 0x54
   11ba8:	adds	r3, r3, #1
   11bac:	adc	r2, r2, #0
   11bb0:	str	r3, [r4, #80]	; 0x50
   11bb4:	str	r2, [r4, #84]	; 0x54
   11bb8:	bl	12760 <int_but_not_followed_by_function@@Base>
   11bbc:	ldr	r3, [r4, #88]	; 0x58
   11bc0:	mov	r0, r6
   11bc4:	ldr	r2, [r4, #92]	; 0x5c
   11bc8:	adds	r3, r3, #1
   11bcc:	adc	r2, r2, #0
   11bd0:	str	r3, [r4, #88]	; 0x58
   11bd4:	str	r2, [r4, #92]	; 0x5c
   11bd8:	bl	118dc <puts@plt>
   11bdc:	ldr	r3, [r4, #96]	; 0x60
   11be0:	mov	r1, r8
   11be4:	mov	r0, r7
   11be8:	ldr	r2, [r4, #100]	; 0x64
   11bec:	adds	r3, r3, #1
   11bf0:	adc	r2, r2, #0
   11bf4:	str	r3, [r4, #96]	; 0x60
   11bf8:	str	r2, [r4, #100]	; 0x64
   11bfc:	ldr	r2, [pc, #1416]	; 1218c <main@@Base+0x780>
   11c00:	bl	11864 <printf@plt>
   11c04:	ldr	r3, [r4, #104]	; 0x68
   11c08:	ldr	r2, [r4, #108]	; 0x6c
   11c0c:	adds	r3, r3, #1
   11c10:	adc	r2, r2, #0
   11c14:	str	r3, [r4, #104]	; 0x68
   11c18:	str	r2, [r4, #108]	; 0x6c
   11c1c:	bl	125e0 <setup@@Base>
   11c20:	ldr	r3, [r4, #112]	; 0x70
   11c24:	ldr	r2, [r4, #116]	; 0x74
   11c28:	adds	r3, r3, #1
   11c2c:	adc	r2, r2, #0
   11c30:	str	r3, [r4, #112]	; 0x70
   11c34:	str	r2, [r4, #116]	; 0x74
   11c38:	bl	13090 <boolean_unary_operator_is_read_properly@@Base>
   11c3c:	ldr	r3, [r4, #120]	; 0x78
   11c40:	mov	r0, r6
   11c44:	ldr	r2, [r4, #124]	; 0x7c
   11c48:	adds	r3, r3, #1
   11c4c:	adc	r2, r2, #0
   11c50:	str	r3, [r4, #120]	; 0x78
   11c54:	str	r2, [r4, #124]	; 0x7c
   11c58:	bl	118dc <puts@plt>
   11c5c:	ldr	r3, [r4, #128]	; 0x80
   11c60:	mov	r1, r8
   11c64:	mov	r0, r7
   11c68:	ldr	r2, [r4, #132]	; 0x84
   11c6c:	adds	r3, r3, #1
   11c70:	adc	r2, r2, #0
   11c74:	str	r3, [r4, #128]	; 0x80
   11c78:	str	r2, [r4, #132]	; 0x84
   11c7c:	ldr	r2, [pc, #1292]	; 12190 <main@@Base+0x784>
   11c80:	bl	11864 <printf@plt>
   11c84:	ldr	r3, [r4, #136]	; 0x88
   11c88:	ldr	r2, [r4, #140]	; 0x8c
   11c8c:	adds	r3, r3, #1
   11c90:	adc	r2, r2, #0
   11c94:	str	r3, [r4, #136]	; 0x88
   11c98:	str	r2, [r4, #140]	; 0x8c
   11c9c:	bl	125e0 <setup@@Base>
   11ca0:	ldr	r3, [r4, #144]	; 0x90
   11ca4:	ldr	r2, [r4, #148]	; 0x94
   11ca8:	adds	r3, r3, #1
   11cac:	adc	r2, r2, #0
   11cb0:	str	r3, [r4, #144]	; 0x90
   11cb4:	str	r2, [r4, #148]	; 0x94
   11cb8:	bl	12e24 <boolean_binary_operator_is_read_properly@@Base>
   11cbc:	ldr	r3, [r4, #152]	; 0x98
   11cc0:	mov	r0, r6
   11cc4:	ldr	r2, [r4, #156]	; 0x9c
   11cc8:	adds	r3, r3, #1
   11ccc:	adc	r2, r2, #0
   11cd0:	str	r3, [r4, #152]	; 0x98
   11cd4:	str	r2, [r4, #156]	; 0x9c
   11cd8:	bl	118dc <puts@plt>
   11cdc:	ldr	r3, [r4, #160]	; 0xa0
   11ce0:	mov	r1, r8
   11ce4:	mov	r0, r7
   11ce8:	ldr	r2, [r4, #164]	; 0xa4
   11cec:	adds	r3, r3, #1
   11cf0:	adc	r2, r2, #0
   11cf4:	str	r3, [r4, #160]	; 0xa0
   11cf8:	str	r2, [r4, #164]	; 0xa4
   11cfc:	ldr	r2, [pc, #1168]	; 12194 <main@@Base+0x788>
   11d00:	bl	11864 <printf@plt>
   11d04:	ldr	r3, [r4, #168]	; 0xa8
   11d08:	ldr	r2, [r4, #172]	; 0xac
   11d0c:	adds	r3, r3, #1
   11d10:	adc	r2, r2, #0
   11d14:	str	r3, [r4, #168]	; 0xa8
   11d18:	str	r2, [r4, #172]	; 0xac
   11d1c:	bl	125e0 <setup@@Base>
   11d20:	ldr	r3, [r4, #176]	; 0xb0
   11d24:	ldr	r2, [r4, #180]	; 0xb4
   11d28:	adds	r3, r3, #1
   11d2c:	adc	r2, r2, #0
   11d30:	str	r3, [r4, #176]	; 0xb0
   11d34:	str	r2, [r4, #180]	; 0xb4
   11d38:	bl	128bc <boolean_expression_is_read_properly@@Base>
   11d3c:	ldr	r3, [r4, #184]	; 0xb8
   11d40:	mov	r0, r6
   11d44:	ldr	r2, [r4, #188]	; 0xbc
   11d48:	adds	r3, r3, #1
   11d4c:	adc	r2, r2, #0
   11d50:	str	r3, [r4, #184]	; 0xb8
   11d54:	str	r2, [r4, #188]	; 0xbc
   11d58:	bl	118dc <puts@plt>
   11d5c:	ldr	r3, [r4, #192]	; 0xc0
   11d60:	mov	r1, r8
   11d64:	mov	r0, r7
   11d68:	ldr	r2, [r4, #196]	; 0xc4
   11d6c:	adds	r3, r3, #1
   11d70:	adc	r2, r2, #0
   11d74:	str	r3, [r4, #192]	; 0xc0
   11d78:	str	r2, [r4, #196]	; 0xc4
   11d7c:	ldr	r2, [pc, #1044]	; 12198 <main@@Base+0x78c>
   11d80:	bl	11864 <printf@plt>
   11d84:	ldr	r3, [r4, #200]	; 0xc8
   11d88:	ldr	r2, [r4, #204]	; 0xcc
   11d8c:	adds	r3, r3, #1
   11d90:	adc	r2, r2, #0
   11d94:	str	r3, [r4, #200]	; 0xc8
   11d98:	str	r2, [r4, #204]	; 0xcc
   11d9c:	bl	125e0 <setup@@Base>
   11da0:	ldr	r3, [r4, #208]	; 0xd0
   11da4:	ldr	r2, [r4, #212]	; 0xd4
   11da8:	adds	r3, r3, #1
   11dac:	adc	r2, r2, #0
   11db0:	str	r3, [r4, #208]	; 0xd0
   11db4:	str	r2, [r4, #212]	; 0xd4
   11db8:	bl	12b14 <boolean_expression_complex@@Base>
   11dbc:	ldr	r3, [r4, #216]	; 0xd8
   11dc0:	mov	r0, r6
   11dc4:	ldr	r2, [r4, #220]	; 0xdc
   11dc8:	adds	r3, r3, #1
   11dcc:	adc	r2, r2, #0
   11dd0:	str	r3, [r4, #216]	; 0xd8
   11dd4:	str	r2, [r4, #220]	; 0xdc
   11dd8:	bl	118dc <puts@plt>
   11ddc:	ldr	r3, [r4, #224]	; 0xe0
   11de0:	mov	r1, r8
   11de4:	mov	r0, r7
   11de8:	ldr	r2, [r4, #228]	; 0xe4
   11dec:	adds	r3, r3, #1
   11df0:	adc	r2, r2, #0
   11df4:	str	r3, [r4, #224]	; 0xe0
   11df8:	str	r2, [r4, #228]	; 0xe4
   11dfc:	ldr	r2, [pc, #920]	; 1219c <main@@Base+0x790>
   11e00:	bl	11864 <printf@plt>
   11e04:	ldr	r3, [r4, #232]	; 0xe8
   11e08:	ldr	r2, [r4, #236]	; 0xec
   11e0c:	adds	r3, r3, #1
   11e10:	adc	r2, r2, #0
   11e14:	str	r3, [r4, #232]	; 0xe8
   11e18:	str	r2, [r4, #236]	; 0xec
   11e1c:	bl	125e0 <setup@@Base>
   11e20:	ldr	r3, [r4, #240]	; 0xf0
   11e24:	ldr	r2, [r4, #244]	; 0xf4
   11e28:	adds	r3, r3, #1
   11e2c:	adc	r2, r2, #0
   11e30:	str	r3, [r4, #240]	; 0xf0
   11e34:	str	r2, [r4, #244]	; 0xf4
   11e38:	bl	132c4 <if_statement_only@@Base>
   11e3c:	ldr	r3, [r4, #248]	; 0xf8
   11e40:	mov	r0, r6
   11e44:	ldr	r2, [r4, #252]	; 0xfc
   11e48:	adds	r3, r3, #1
   11e4c:	adc	r2, r2, #0
   11e50:	str	r3, [r4, #248]	; 0xf8
   11e54:	str	r2, [r4, #252]	; 0xfc
   11e58:	add	r4, r5, #1952	; 0x7a0
   11e5c:	add	r5, r5, #1968	; 0x7b0
   11e60:	bl	118dc <puts@plt>
   11e64:	ldr	r3, [r5, #-192]	; 0xffffff40
   11e68:	mov	r0, r7
   11e6c:	ldr	r1, [r5, #-188]	; 0xffffff44
   11e70:	ldr	r2, [pc, #808]	; 121a0 <main@@Base+0x794>
   11e74:	adds	r3, r3, #1
   11e78:	adc	r1, r1, #0
   11e7c:	str	r3, [r5, #-192]	; 0xffffff40
   11e80:	str	r1, [r5, #-188]	; 0xffffff44
   11e84:	mov	r1, r8
   11e88:	bl	11864 <printf@plt>
   11e8c:	ldr	r3, [r5, #-184]	; 0xffffff48
   11e90:	ldr	r2, [r5, #-180]	; 0xffffff4c
   11e94:	adds	r3, r3, #1
   11e98:	adc	r2, r2, #0
   11e9c:	str	r3, [r5, #-184]	; 0xffffff48
   11ea0:	str	r2, [r5, #-180]	; 0xffffff4c
   11ea4:	bl	125e0 <setup@@Base>
   11ea8:	ldr	r3, [r5, #-176]	; 0xffffff50
   11eac:	ldr	r2, [r5, #-172]	; 0xffffff54
   11eb0:	adds	r3, r3, #1
   11eb4:	adc	r2, r2, #0
   11eb8:	str	r3, [r5, #-176]	; 0xffffff50
   11ebc:	str	r2, [r5, #-172]	; 0xffffff54
   11ec0:	bl	135a0 <if_else_statements@@Base>
   11ec4:	ldr	r3, [r5, #-168]	; 0xffffff58
   11ec8:	mov	r0, r6
   11ecc:	ldr	r2, [r5, #-164]	; 0xffffff5c
   11ed0:	adds	r3, r3, #1
   11ed4:	adc	r2, r2, #0
   11ed8:	str	r3, [r5, #-168]	; 0xffffff58
   11edc:	str	r2, [r5, #-164]	; 0xffffff5c
   11ee0:	bl	118dc <puts@plt>
   11ee4:	ldr	r3, [r5, #-160]	; 0xffffff60
   11ee8:	mov	r1, r8
   11eec:	mov	r0, r7
   11ef0:	ldr	r2, [r5, #-156]	; 0xffffff64
   11ef4:	adds	r3, r3, #1
   11ef8:	adc	r2, r2, #0
   11efc:	str	r3, [r5, #-160]	; 0xffffff60
   11f00:	str	r2, [r5, #-156]	; 0xffffff64
   11f04:	ldr	r2, [pc, #664]	; 121a4 <main@@Base+0x798>
   11f08:	bl	11864 <printf@plt>
   11f0c:	ldr	r3, [r5, #-152]	; 0xffffff68
   11f10:	ldr	r2, [r5, #-148]	; 0xffffff6c
   11f14:	adds	r3, r3, #1
   11f18:	adc	r2, r2, #0
   11f1c:	str	r3, [r5, #-152]	; 0xffffff68
   11f20:	str	r2, [r5, #-148]	; 0xffffff6c
   11f24:	bl	125e0 <setup@@Base>
   11f28:	ldr	r3, [r5, #-144]	; 0xffffff70
   11f2c:	ldr	r2, [r5, #-140]	; 0xffffff74
   11f30:	adds	r3, r3, #1
   11f34:	adc	r2, r2, #0
   11f38:	str	r3, [r5, #-144]	; 0xffffff70
   11f3c:	str	r2, [r5, #-140]	; 0xffffff74
   11f40:	bl	13e28 <if_statement_inside_if_statement@@Base>
   11f44:	ldr	r3, [r5, #-136]	; 0xffffff78
   11f48:	mov	r0, r6
   11f4c:	ldr	r2, [r5, #-132]	; 0xffffff7c
   11f50:	adds	r3, r3, #1
   11f54:	adc	r2, r2, #0
   11f58:	str	r3, [r5, #-136]	; 0xffffff78
   11f5c:	str	r2, [r5, #-132]	; 0xffffff7c
   11f60:	bl	118dc <puts@plt>
   11f64:	ldr	r3, [r5, #-128]	; 0xffffff80
   11f68:	mov	r1, r8
   11f6c:	mov	r0, r7
   11f70:	ldr	r2, [r5, #-124]	; 0xffffff84
   11f74:	adds	r3, r3, #1
   11f78:	adc	r2, r2, #0
   11f7c:	str	r3, [r5, #-128]	; 0xffffff80
   11f80:	str	r2, [r5, #-124]	; 0xffffff84
   11f84:	ldr	r2, [pc, #540]	; 121a8 <main@@Base+0x79c>
   11f88:	bl	11864 <printf@plt>
   11f8c:	ldr	r3, [r5, #-120]	; 0xffffff88
   11f90:	ldr	r2, [r5, #-116]	; 0xffffff8c
   11f94:	adds	r3, r3, #1
   11f98:	adc	r2, r2, #0
   11f9c:	str	r3, [r5, #-120]	; 0xffffff88
   11fa0:	str	r2, [r5, #-116]	; 0xffffff8c
   11fa4:	bl	125e0 <setup@@Base>
   11fa8:	ldr	r3, [r5, #-112]	; 0xffffff90
   11fac:	ldr	r2, [r5, #-108]	; 0xffffff94
   11fb0:	adds	r3, r3, #1
   11fb4:	adc	r2, r2, #0
   11fb8:	str	r3, [r5, #-112]	; 0xffffff90
   11fbc:	str	r2, [r5, #-108]	; 0xffffff94
   11fc0:	bl	142bc <if_statement_inside_else_statement@@Base>
   11fc4:	ldr	r3, [r5, #-104]	; 0xffffff98
   11fc8:	mov	r0, r6
   11fcc:	ldr	r2, [r5, #-100]	; 0xffffff9c
   11fd0:	adds	r3, r3, #1
   11fd4:	adc	r2, r2, #0
   11fd8:	str	r3, [r5, #-104]	; 0xffffff98
   11fdc:	str	r2, [r5, #-100]	; 0xffffff9c
   11fe0:	bl	118dc <puts@plt>
   11fe4:	ldr	r3, [r5, #-96]	; 0xffffffa0
   11fe8:	mov	r1, r8
   11fec:	mov	r0, r7
   11ff0:	ldr	r2, [r5, #-92]	; 0xffffffa4
   11ff4:	adds	r3, r3, #1
   11ff8:	adc	r2, r2, #0
   11ffc:	str	r3, [r5, #-96]	; 0xffffffa0
   12000:	str	r2, [r5, #-92]	; 0xffffffa4
   12004:	ldr	r2, [pc, #416]	; 121ac <main@@Base+0x7a0>
   12008:	bl	11864 <printf@plt>
   1200c:	ldr	r3, [r5, #-88]	; 0xffffffa8
   12010:	ldr	r2, [r5, #-84]	; 0xffffffac
   12014:	adds	r3, r3, #1
   12018:	adc	r2, r2, #0
   1201c:	str	r3, [r5, #-88]	; 0xffffffa8
   12020:	str	r2, [r5, #-84]	; 0xffffffac
   12024:	bl	125e0 <setup@@Base>
   12028:	ldr	r3, [r5, #-80]	; 0xffffffb0
   1202c:	ldr	r2, [r5, #-76]	; 0xffffffb4
   12030:	adds	r3, r3, #1
   12034:	adc	r2, r2, #0
   12038:	str	r3, [r5, #-80]	; 0xffffffb0
   1203c:	str	r2, [r5, #-76]	; 0xffffffb4
   12040:	bl	13bd8 <body_with_one_return@@Base>
   12044:	ldr	r3, [r5, #-72]	; 0xffffffb8
   12048:	mov	r0, r6
   1204c:	ldr	r2, [r5, #-68]	; 0xffffffbc
   12050:	adds	r3, r3, #1
   12054:	adc	r2, r2, #0
   12058:	str	r3, [r5, #-72]	; 0xffffffb8
   1205c:	str	r2, [r5, #-68]	; 0xffffffbc
   12060:	bl	118dc <puts@plt>
   12064:	ldr	r3, [r5, #-64]	; 0xffffffc0
   12068:	mov	r1, r8
   1206c:	mov	r0, r7
   12070:	ldr	r2, [r5, #-60]	; 0xffffffc4
   12074:	adds	r3, r3, #1
   12078:	adc	r2, r2, #0
   1207c:	str	r3, [r5, #-64]	; 0xffffffc0
   12080:	str	r2, [r5, #-60]	; 0xffffffc4
   12084:	ldr	r2, [pc, #292]	; 121b0 <main@@Base+0x7a4>
   12088:	bl	11864 <printf@plt>
   1208c:	ldr	r3, [r5, #-56]	; 0xffffffc8
   12090:	ldr	r2, [r5, #-52]	; 0xffffffcc
   12094:	adds	r3, r3, #1
   12098:	adc	r2, r2, #0
   1209c:	str	r3, [r5, #-56]	; 0xffffffc8
   120a0:	str	r2, [r5, #-52]	; 0xffffffcc
   120a4:	bl	125e0 <setup@@Base>
   120a8:	ldr	r3, [r5, #-48]	; 0xffffffd0
   120ac:	ldr	r2, [r5, #-44]	; 0xffffffd4
   120b0:	adds	r3, r3, #1
   120b4:	adc	r2, r2, #0
   120b8:	str	r3, [r5, #-48]	; 0xffffffd0
   120bc:	str	r2, [r5, #-44]	; 0xffffffd4
   120c0:	bl	138cc <body_with_two_returns@@Base>
   120c4:	ldr	r3, [r5, #-40]	; 0xffffffd8
   120c8:	mov	r0, r6
   120cc:	ldr	r2, [r5, #-36]	; 0xffffffdc
   120d0:	adds	r3, r3, #1
   120d4:	adc	r2, r2, #0
   120d8:	str	r3, [r5, #-40]	; 0xffffffd8
   120dc:	str	r2, [r5, #-36]	; 0xffffffdc
   120e0:	bl	118dc <puts@plt>
   120e4:	ldr	r3, [r5, #-32]	; 0xffffffe0
   120e8:	ldr	r2, [r5, #-28]	; 0xffffffe4
   120ec:	ldr	r0, [pc, #192]	; 121b4 <main@@Base+0x7a8>
   120f0:	adds	r3, r3, #1
   120f4:	adc	r2, r2, #0
   120f8:	str	r3, [r5, #-32]	; 0xffffffe0
   120fc:	str	r2, [r5, #-28]	; 0xffffffe4
   12100:	bl	118dc <puts@plt>
   12104:	ldr	r3, [r5, #-24]	; 0xffffffe8
   12108:	ldr	r2, [r5, #-20]	; 0xffffffec
   1210c:	ldr	r0, [pc, #164]	; 121b8 <main@@Base+0x7ac>
   12110:	adds	r3, r3, #1
   12114:	adc	r2, r2, #0
   12118:	str	r3, [r5, #-24]	; 0xffffffe8
   1211c:	str	r2, [r5, #-20]	; 0xffffffec
   12120:	bl	118dc <puts@plt>
   12124:	ldr	r3, [r5, #-16]
   12128:	mov	r0, r9
   1212c:	ldr	r2, [r5, #-12]
   12130:	adds	r3, r3, #1
   12134:	adc	r2, r2, #0
   12138:	str	r3, [r5, #-16]
   1213c:	str	r2, [r5, #-12]
   12140:	bl	118dc <puts@plt>
   12144:	ldr	r3, [r5, #-8]
   12148:	mov	r0, #0
   1214c:	ldr	r2, [r5, #-4]
   12150:	adds	r3, r3, #1
   12154:	adc	r2, r2, #0
   12158:	str	r3, [r5, #-8]
   1215c:	str	r2, [r5, #-4]
   12160:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12164:	andeq	sl, r2, r8, lsl #19
   12168:	andeq	sl, r2, ip, ror r9
   1216c:	andeq	r8, r1, r5, ror #25
   12170:	andeq	r8, r1, r9, lsr #26
   12174:	andeq	r8, r1, r5, lsr sp
   12178:	strdeq	r8, [r1], -r4
   1217c:	andeq	r8, r1, r3, lsl #26
   12180:	andeq	r8, r1, r7, asr #26
   12184:	andeq	r8, r1, r3, lsl sp
   12188:	andeq	r8, r1, r0, asr sp
   1218c:	andeq	r8, r1, r1, ror sp
   12190:	muleq	r1, r9, sp
   12194:	andeq	r8, r1, r2, asr #27
   12198:	andeq	r8, r1, r6, ror #27
   1219c:	andeq	r8, r1, r1, lsl #28
   121a0:	andeq	r8, r1, r3, lsl lr
   121a4:	andeq	r8, r1, r6, lsr #28
   121a8:	andeq	r8, r1, r7, asr #28
   121ac:	andeq	r8, r1, sl, ror #28
   121b0:	andeq	r8, r1, pc, ror lr
   121b4:	muleq	r1, r5, lr
   121b8:	andeq	r8, r1, r4, lsr #29
   121bc:	ldr	r0, [pc]	; 121c4 <main@@Base+0x7b8>
   121c0:	b	18578 <__gcov_sort_n_vals@@Base+0x4a0>
   121c4:	strheq	sl, [r2], -ip
   121c8:	ldr	r0, [pc]	; 121d0 <main@@Base+0x7c4>
   121cc:	b	18578 <__gcov_sort_n_vals@@Base+0x4a0>
   121d0:	strdeq	sl, [r2], -r0
   121d4:	ldr	r0, [pc]	; 121dc <main@@Base+0x7d0>
   121d8:	b	18578 <__gcov_sort_n_vals@@Base+0x4a0>
   121dc:	andeq	sl, r2, r4, lsl #12
   121e0:	ldr	r0, [pc]	; 121e8 <main@@Base+0x7dc>
   121e4:	b	18578 <__gcov_sort_n_vals@@Base+0x4a0>
   121e8:	andeq	sl, r2, r0, lsl #16

000121ec <_start@@Base>:
   121ec:	mov	fp, #0
   121f0:	mov	lr, #0
   121f4:	pop	{r1}		; (ldr r1, [sp], #4)
   121f8:	mov	r2, sp
   121fc:	push	{r2}		; (str r2, [sp, #-4]!)
   12200:	push	{r0}		; (str r0, [sp, #-4]!)
   12204:	ldr	ip, [pc, #16]	; 1221c <_start@@Base+0x30>
   12208:	push	{ip}		; (str ip, [sp, #-4]!)
   1220c:	ldr	r0, [pc, #12]	; 12220 <_start@@Base+0x34>
   12210:	ldr	r3, [pc, #12]	; 12224 <_start@@Base+0x38>
   12214:	bl	118f4 <__libc_start_main@plt>
   12218:	bl	119d8 <abort@plt>
   1221c:	strdeq	r8, [r1], -r0
   12220:	andeq	r1, r1, ip, lsl #20
   12224:	muleq	r1, r0, r8
   12228:	ldr	r3, [pc, #20]	; 12244 <_start@@Base+0x58>
   1222c:	ldr	r2, [pc, #20]	; 12248 <_start@@Base+0x5c>
   12230:	add	r3, pc, r3
   12234:	ldr	r2, [r3, r2]
   12238:	cmp	r2, #0
   1223c:	bxeq	lr
   12240:	b	11900 <__gmon_start__@plt>
   12244:	andeq	r7, r1, r8, asr #27
   12248:	andeq	r0, r0, r4, lsr #1
   1224c:	ldr	r0, [pc, #24]	; 1226c <_start@@Base+0x80>
   12250:	ldr	r3, [pc, #24]	; 12270 <_start@@Base+0x84>
   12254:	cmp	r3, r0
   12258:	bxeq	lr
   1225c:	ldr	r3, [pc, #16]	; 12274 <_start@@Base+0x88>
   12260:	cmp	r3, #0
   12264:	bxeq	lr
   12268:	bx	r3
   1226c:	andeq	sl, r2, r8, ror r9
   12270:	andeq	sl, r2, r8, ror r9
   12274:	andeq	r0, r0, r0
   12278:	ldr	r0, [pc, #36]	; 122a4 <_start@@Base+0xb8>
   1227c:	ldr	r1, [pc, #36]	; 122a8 <_start@@Base+0xbc>
   12280:	sub	r1, r1, r0
   12284:	asr	r1, r1, #2
   12288:	add	r1, r1, r1, lsr #31
   1228c:	asrs	r1, r1, #1
   12290:	bxeq	lr
   12294:	ldr	r3, [pc, #16]	; 122ac <_start@@Base+0xc0>
   12298:	cmp	r3, #0
   1229c:	bxeq	lr
   122a0:	bx	r3
   122a4:	andeq	sl, r2, r8, ror r9
   122a8:	andeq	sl, r2, r8, ror r9
   122ac:	andeq	r0, r0, r0
   122b0:	push	{r4, lr}
   122b4:	ldr	r4, [pc, #24]	; 122d4 <_start@@Base+0xe8>
   122b8:	ldrb	r3, [r4]
   122bc:	cmp	r3, #0
   122c0:	popne	{r4, pc}
   122c4:	bl	1224c <_start@@Base+0x60>
   122c8:	mov	r3, #1
   122cc:	strb	r3, [r4]
   122d0:	pop	{r4, pc}
   122d4:	andeq	sl, r2, r0, lsl #19
   122d8:	b	12278 <_start@@Base+0x8c>

000122dc <next@@Base>:
   122dc:	ldr	r3, [pc, #332]	; 12430 <next@@Base+0x154>
   122e0:	push	{r4, lr}
   122e4:	ldr	r4, [pc, #328]	; 12434 <next@@Base+0x158>
   122e8:	str	r0, [r3]
   122ec:	ldr	r1, [r3, #204]	; 0xcc
   122f0:	cmp	r1, #49	; 0x31
   122f4:	bhi	12380 <next@@Base+0xa4>
   122f8:	ldm	r4, {r2, ip}
   122fc:	add	r1, r1, #1
   12300:	str	r0, [r3, r1, lsl #2]
   12304:	adds	r2, r2, #1
   12308:	adc	ip, ip, #0
   1230c:	stm	r4, {r2, ip}
   12310:	ldr	r1, [pc, #288]	; 12438 <next@@Base+0x15c>
   12314:	ldr	r2, [r3, #204]	; 0xcc
   12318:	ldr	ip, [r1, #200]	; 0xc8
   1231c:	add	r2, r2, #1
   12320:	str	r2, [r3, #204]	; 0xcc
   12324:	cmp	ip, #49	; 0x31
   12328:	bhi	12354 <next@@Base+0x78>
   1232c:	ldr	r2, [r4, #16]
   12330:	ldr	lr, [r4, #20]
   12334:	adds	r2, r2, #1
   12338:	str	r2, [r4, #16]
   1233c:	add	r2, ip, #1
   12340:	adc	lr, lr, #0
   12344:	str	r2, [r1, #200]	; 0xc8
   12348:	ldr	r2, [pc, #236]	; 1243c <next@@Base+0x160>
   1234c:	str	lr, [r4, #20]
   12350:	str	r2, [r1, ip, lsl #2]
   12354:	ldr	r2, [r3, #232]	; 0xe8
   12358:	cmp	r2, #0
   1235c:	beq	123a8 <next@@Base+0xcc>
   12360:	blx	r2
   12364:	ldr	r3, [r4, #24]
   12368:	ldr	r2, [r4, #28]
   1236c:	adds	r3, r3, #1
   12370:	adc	r2, r2, #0
   12374:	str	r3, [r4, #24]
   12378:	str	r2, [r4, #28]
   1237c:	pop	{r4, pc}
   12380:	ldr	r2, [r4, #8]
   12384:	ldr	r1, [r4, #12]
   12388:	adds	r2, r2, #1
   1238c:	str	r2, [r4, #8]
   12390:	adc	r1, r1, #0
   12394:	ldr	r2, [r3, #212]	; 0xd4
   12398:	str	r1, [r4, #12]
   1239c:	add	r2, r2, #1
   123a0:	str	r2, [r3, #212]	; 0xd4
   123a4:	b	12310 <next@@Base+0x34>
   123a8:	ldr	r2, [r3, #220]	; 0xdc
   123ac:	cmp	r2, #0
   123b0:	beq	12410 <next@@Base+0x134>
   123b4:	ldr	r1, [r3, #224]	; 0xe0
   123b8:	ldr	ip, [r3, #228]	; 0xe4
   123bc:	cmp	r2, r1
   123c0:	ble	123ec <next@@Base+0x110>
   123c4:	ldr	r2, [r4, #40]	; 0x28
   123c8:	ldr	r0, [r4, #44]	; 0x2c
   123cc:	adds	r2, r2, #1
   123d0:	adc	r0, r0, #0
   123d4:	str	r2, [r4, #40]	; 0x28
   123d8:	add	r2, r1, #1
   123dc:	str	r0, [r4, #44]	; 0x2c
   123e0:	ldr	r0, [ip, r1, lsl #2]
   123e4:	str	r2, [r3, #224]	; 0xe0
   123e8:	pop	{r4, pc}
   123ec:	ldr	r3, [r4, #48]	; 0x30
   123f0:	sub	r2, r2, #-1073741823	; 0xc0000001
   123f4:	ldr	r1, [r4, #52]	; 0x34
   123f8:	ldr	r0, [ip, r2, lsl #2]
   123fc:	adds	r3, r3, #1
   12400:	adc	r1, r1, #0
   12404:	str	r3, [r4, #48]	; 0x30
   12408:	str	r1, [r4, #52]	; 0x34
   1240c:	pop	{r4, pc}
   12410:	ldr	r2, [r4, #32]
   12414:	ldr	r1, [r4, #36]	; 0x24
   12418:	ldr	r0, [r3, #216]	; 0xd8
   1241c:	adds	r2, r2, #1
   12420:	adc	r1, r1, #0
   12424:	str	r2, [r4, #32]
   12428:	str	r1, [r4, #36]	; 0x24
   1242c:	pop	{r4, pc}
   12430:	andeq	fp, r2, ip, ror #17
   12434:	andeq	sl, r2, r8, lsl #19
   12438:	ldrdeq	fp, [r2], -r8
   1243c:	ldrdeq	r2, [r1], -ip

00012440 <push_back@@Base>:
   12440:	ldr	r3, [pc, #248]	; 12540 <push_back@@Base+0x100>
   12444:	push	{r4, r5, r6, lr}
   12448:	ldr	r4, [pc, #244]	; 12544 <push_back@@Base+0x104>
   1244c:	str	r0, [r3]
   12450:	ldr	ip, [r3, #408]	; 0x198
   12454:	str	r1, [r3, #204]	; 0xcc
   12458:	cmp	ip, #49	; 0x31
   1245c:	bhi	124f8 <push_back@@Base+0xb8>
   12460:	ldr	r2, [r4, #56]	; 0x38
   12464:	add	ip, ip, #1
   12468:	str	r0, [r3, ip, lsl #2]
   1246c:	ldr	lr, [r4, #60]	; 0x3c
   12470:	adds	r2, r2, #1
   12474:	str	r2, [r4, #56]	; 0x38
   12478:	ldr	r2, [r3, #408]	; 0x198
   1247c:	adc	lr, lr, #0
   12480:	str	lr, [r4, #60]	; 0x3c
   12484:	add	r2, r2, #52	; 0x34
   12488:	str	r1, [r3, r2, lsl #2]
   1248c:	ldr	ip, [pc, #180]	; 12548 <push_back@@Base+0x108>
   12490:	ldr	r2, [r3, #408]	; 0x198
   12494:	ldr	lr, [ip, #200]	; 0xc8
   12498:	add	r2, r2, #1
   1249c:	str	r2, [r3, #408]	; 0x198
   124a0:	cmp	lr, #49	; 0x31
   124a4:	bhi	124d0 <push_back@@Base+0x90>
   124a8:	ldr	r2, [r4, #72]	; 0x48
   124ac:	ldr	r5, [r4, #76]	; 0x4c
   124b0:	adds	r2, r2, #1
   124b4:	str	r2, [r4, #72]	; 0x48
   124b8:	add	r2, lr, #1
   124bc:	adc	r5, r5, #0
   124c0:	str	r2, [ip, #200]	; 0xc8
   124c4:	ldr	r2, [pc, #128]	; 1254c <push_back@@Base+0x10c>
   124c8:	str	r5, [r4, #76]	; 0x4c
   124cc:	str	r2, [ip, lr, lsl #2]
   124d0:	ldr	r3, [r3, #420]	; 0x1a4
   124d4:	cmp	r3, #0
   124d8:	bne	12520 <push_back@@Base+0xe0>
   124dc:	ldr	r3, [r4, #80]	; 0x50
   124e0:	ldr	r2, [r4, #84]	; 0x54
   124e4:	adds	r3, r3, #1
   124e8:	adc	r2, r2, #0
   124ec:	str	r3, [r4, #80]	; 0x50
   124f0:	str	r2, [r4, #84]	; 0x54
   124f4:	pop	{r4, r5, r6, pc}
   124f8:	ldr	r2, [r4, #64]	; 0x40
   124fc:	ldr	ip, [r4, #68]	; 0x44
   12500:	adds	r2, r2, #1
   12504:	str	r2, [r4, #64]	; 0x40
   12508:	adc	ip, ip, #0
   1250c:	ldr	r2, [r3, #416]	; 0x1a0
   12510:	str	ip, [r4, #68]	; 0x44
   12514:	add	r2, r2, #1
   12518:	str	r2, [r3, #416]	; 0x1a0
   1251c:	b	1248c <push_back@@Base+0x4c>
   12520:	blx	r3
   12524:	ldr	r3, [r4, #88]	; 0x58
   12528:	ldr	r2, [r4, #92]	; 0x5c
   1252c:	adds	r3, r3, #1
   12530:	adc	r2, r2, #0
   12534:	str	r3, [r4, #88]	; 0x58
   12538:	str	r2, [r4, #92]	; 0x5c
   1253c:	pop	{r4, r5, r6, pc}
   12540:	andeq	fp, r2, r4, asr #14
   12544:	andeq	sl, r2, r8, lsl #19
   12548:	ldrdeq	fp, [r2], -r8
   1254c:	andeq	r2, r1, r0, asr #8

00012550 <next_reset@@Base>:
   12550:	ldr	r2, [pc, #56]	; 12590 <next_reset@@Base+0x40>
   12554:	push	{r4, lr}
   12558:	ldr	r3, [r2, #96]	; 0x60
   1255c:	ldr	r1, [r2, #100]	; 0x64
   12560:	adds	r3, r3, #1
   12564:	str	r3, [r2, #96]	; 0x60
   12568:	adc	r1, r1, #0
   1256c:	ldr	r3, [pc, #32]	; 12594 <next_reset@@Base+0x44>
   12570:	str	r1, [r2, #100]	; 0x64
   12574:	mov	r2, #236	; 0xec
   12578:	mov	r1, #0
   1257c:	mov	r0, r3
   12580:	bl	11954 <memset@plt>
   12584:	mov	r2, #50	; 0x32
   12588:	str	r2, [r0, #208]	; 0xd0
   1258c:	pop	{r4, pc}
   12590:	andeq	sl, r2, r8, lsl #19
   12594:	andeq	fp, r2, ip, ror #17

00012598 <push_back_reset@@Base>:
   12598:	ldr	r2, [pc, #56]	; 125d8 <push_back_reset@@Base+0x40>
   1259c:	push	{r4, lr}
   125a0:	ldr	r3, [r2, #104]	; 0x68
   125a4:	ldr	r1, [r2, #108]	; 0x6c
   125a8:	adds	r3, r3, #1
   125ac:	str	r3, [r2, #104]	; 0x68
   125b0:	adc	r1, r1, #0
   125b4:	ldr	r3, [pc, #32]	; 125dc <push_back_reset@@Base+0x44>
   125b8:	str	r1, [r2, #108]	; 0x6c
   125bc:	mov	r2, #424	; 0x1a8
   125c0:	mov	r1, #0
   125c4:	mov	r0, r3
   125c8:	bl	11954 <memset@plt>
   125cc:	mov	r2, #50	; 0x32
   125d0:	str	r2, [r0, #412]	; 0x19c
   125d4:	pop	{r4, pc}
   125d8:	andeq	sl, r2, r8, lsl #19
   125dc:	andeq	fp, r2, r4, asr #14

000125e0 <setup@@Base>:
   125e0:	push	{r4, lr}
   125e4:	ldr	r4, [pc, #80]	; 1263c <setup@@Base+0x5c>
   125e8:	ldr	r3, [r4, #112]	; 0x70
   125ec:	ldr	r2, [r4, #116]	; 0x74
   125f0:	adds	r3, r3, #1
   125f4:	adc	r2, r2, #0
   125f8:	str	r3, [r4, #112]	; 0x70
   125fc:	str	r2, [r4, #116]	; 0x74
   12600:	bl	12550 <next_reset@@Base>
   12604:	ldr	r3, [r4, #120]	; 0x78
   12608:	ldr	r2, [r4, #124]	; 0x7c
   1260c:	adds	r3, r3, #1
   12610:	adc	r2, r2, #0
   12614:	str	r3, [r4, #120]	; 0x78
   12618:	str	r2, [r4, #124]	; 0x7c
   1261c:	bl	12598 <push_back_reset@@Base>
   12620:	ldr	r3, [r4, #128]	; 0x80
   12624:	ldr	r2, [r4, #132]	; 0x84
   12628:	adds	r3, r3, #1
   1262c:	adc	r2, r2, #0
   12630:	str	r3, [r4, #128]	; 0x80
   12634:	str	r2, [r4, #132]	; 0x84
   12638:	pop	{r4, pc}
   1263c:	andeq	sl, r2, r8, lsl #19

00012640 <no_int_as_first_stuff@@Base>:
   12640:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12644:	add	r1, sp, #4
   12648:	mov	r0, sp
   1264c:	ldr	r4, [pc, #244]	; 12748 <no_int_as_first_stuff@@Base+0x108>
   12650:	ldr	r5, [pc, #244]	; 1274c <no_int_as_first_stuff@@Base+0x10c>
   12654:	ldr	r3, [r4, #136]	; 0x88
   12658:	ldr	r2, [r4, #140]	; 0x8c
   1265c:	adds	r3, r3, #1
   12660:	adc	r2, r2, #0
   12664:	str	r3, [r4, #136]	; 0x88
   12668:	str	r2, [r4, #140]	; 0x8c
   1266c:	bl	15594 <init_grammar@@Base>
   12670:	ldr	r3, [r4, #144]	; 0x90
   12674:	mov	r0, #4
   12678:	ldr	r2, [r4, #148]	; 0x94
   1267c:	adds	r3, r3, #1
   12680:	adc	r2, r2, #0
   12684:	str	r3, [r4, #144]	; 0x90
   12688:	str	r2, [r4, #148]	; 0x94
   1268c:	bl	118e8 <malloc@plt>
   12690:	mov	r6, r0
   12694:	bl	1482c <init_token_opar@@Base>
   12698:	ldr	r3, [r4, #152]	; 0x98
   1269c:	mov	r0, sp
   126a0:	str	r6, [r5, #216]	; 0xd8
   126a4:	ldr	r2, [r4, #156]	; 0x9c
   126a8:	adds	r3, r3, #1
   126ac:	adc	r2, r2, #0
   126b0:	str	r3, [r4, #152]	; 0x98
   126b4:	str	r2, [r4, #156]	; 0x9c
   126b8:	bl	162f4 <read_function_ast_node@@Base>
   126bc:	ldr	r3, [r5, #204]	; 0xcc
   126c0:	cmp	r3, #1
   126c4:	beq	126f4 <no_int_as_first_stuff@@Base+0xb4>
   126c8:	ldr	r3, [r4, #160]	; 0xa0
   126cc:	ldr	r2, [r4, #164]	; 0xa4
   126d0:	ldr	r1, [pc, #120]	; 12750 <no_int_as_first_stuff@@Base+0x110>
   126d4:	adds	r3, r3, #1
   126d8:	ldr	r0, [pc, #116]	; 12754 <no_int_as_first_stuff@@Base+0x114>
   126dc:	str	r3, [r4, #160]	; 0xa0
   126e0:	adc	r2, r2, #0
   126e4:	ldr	r3, [pc, #108]	; 12758 <no_int_as_first_stuff@@Base+0x118>
   126e8:	str	r2, [r4, #164]	; 0xa4
   126ec:	mov	r2, #41	; 0x29
   126f0:	bl	119f0 <__assert_fail@plt>
   126f4:	cmp	r0, #0
   126f8:	beq	12728 <no_int_as_first_stuff@@Base+0xe8>
   126fc:	ldr	r3, [r4, #176]	; 0xb0
   12700:	ldr	r2, [r4, #180]	; 0xb4
   12704:	ldr	r1, [pc, #68]	; 12750 <no_int_as_first_stuff@@Base+0x110>
   12708:	adds	r3, r3, #1
   1270c:	ldr	r0, [pc, #72]	; 1275c <no_int_as_first_stuff@@Base+0x11c>
   12710:	adc	r2, r2, #0
   12714:	str	r3, [r4, #176]	; 0xb0
   12718:	ldr	r3, [pc, #56]	; 12758 <no_int_as_first_stuff@@Base+0x118>
   1271c:	str	r2, [r4, #180]	; 0xb4
   12720:	mov	r2, #42	; 0x2a
   12724:	b	126f0 <no_int_as_first_stuff@@Base+0xb0>
   12728:	ldr	r3, [r4, #168]	; 0xa8
   1272c:	ldr	r2, [r4, #172]	; 0xac
   12730:	adds	r3, r3, #1
   12734:	adc	r2, r2, #0
   12738:	str	r3, [r4, #168]	; 0xa8
   1273c:	str	r2, [r4, #172]	; 0xac
   12740:	add	sp, sp, #16
   12744:	pop	{r4, r5, r6, pc}
   12748:	andeq	sl, r2, r8, lsl #19
   1274c:	andeq	fp, r2, ip, ror #17
   12750:	andeq	r8, r1, fp, asr sl
   12754:	muleq	r1, pc, sl	; <UNPREDICTABLE>
   12758:	andeq	r8, r1, r0, lsl #18
   1275c:			; <UNDEFINED> instruction: 0x00018ab9

00012760 <int_but_not_followed_by_function@@Base>:
   12760:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12764:	add	r1, sp, #4
   12768:	mov	r0, sp
   1276c:	ldr	r4, [pc, #304]	; 128a4 <int_but_not_followed_by_function@@Base+0x144>
   12770:	ldr	r5, [pc, #304]	; 128a8 <int_but_not_followed_by_function@@Base+0x148>
   12774:	ldr	r3, [r4, #184]	; 0xb8
   12778:	ldr	r2, [r4, #188]	; 0xbc
   1277c:	adds	r3, r3, #1
   12780:	adc	r2, r2, #0
   12784:	str	r3, [r4, #184]	; 0xb8
   12788:	str	r2, [r4, #188]	; 0xbc
   1278c:	bl	15594 <init_grammar@@Base>
   12790:	ldr	r3, [r4, #192]	; 0xc0
   12794:	mov	r0, #8
   12798:	ldr	r2, [r4, #196]	; 0xc4
   1279c:	adds	r3, r3, #1
   127a0:	adc	r2, r2, #0
   127a4:	str	r3, [r4, #192]	; 0xc0
   127a8:	str	r2, [r4, #196]	; 0xc4
   127ac:	bl	118e8 <malloc@plt>
   127b0:	mov	r6, r0
   127b4:	mov	r0, #4
   127b8:	bl	118e8 <malloc@plt>
   127bc:	str	r0, [r6]
   127c0:	bl	147a0 <init_token_int_type@@Base>
   127c4:	ldr	r3, [r4, #200]	; 0xc8
   127c8:	mov	r0, #4
   127cc:	ldr	r2, [r4, #204]	; 0xcc
   127d0:	adds	r3, r3, #1
   127d4:	adc	r2, r2, #0
   127d8:	str	r3, [r4, #200]	; 0xc8
   127dc:	str	r2, [r4, #204]	; 0xcc
   127e0:	bl	118e8 <malloc@plt>
   127e4:	str	r0, [r6, #4]
   127e8:	bl	1482c <init_token_opar@@Base>
   127ec:	ldr	r3, [r4, #208]	; 0xd0
   127f0:	mov	r0, sp
   127f4:	str	r6, [r5, #228]	; 0xe4
   127f8:	ldr	r2, [r4, #212]	; 0xd4
   127fc:	adds	r3, r3, #1
   12800:	adc	r2, r2, #0
   12804:	str	r3, [r4, #208]	; 0xd0
   12808:	mov	r3, #2
   1280c:	str	r2, [r4, #212]	; 0xd4
   12810:	str	r3, [r5, #220]	; 0xdc
   12814:	bl	162f4 <read_function_ast_node@@Base>
   12818:	ldr	r3, [r5, #204]	; 0xcc
   1281c:	cmp	r3, #2
   12820:	beq	12850 <int_but_not_followed_by_function@@Base+0xf0>
   12824:	ldr	r3, [r4, #216]	; 0xd8
   12828:	ldr	r2, [r4, #220]	; 0xdc
   1282c:	ldr	r1, [pc, #120]	; 128ac <int_but_not_followed_by_function@@Base+0x14c>
   12830:	adds	r3, r3, #1
   12834:	ldr	r0, [pc, #116]	; 128b0 <int_but_not_followed_by_function@@Base+0x150>
   12838:	str	r3, [r4, #216]	; 0xd8
   1283c:	adc	r2, r2, #0
   12840:	ldr	r3, [pc, #108]	; 128b4 <int_but_not_followed_by_function@@Base+0x154>
   12844:	str	r2, [r4, #220]	; 0xdc
   12848:	mov	r2, #67	; 0x43
   1284c:	bl	119f0 <__assert_fail@plt>
   12850:	cmp	r0, #0
   12854:	beq	12884 <int_but_not_followed_by_function@@Base+0x124>
   12858:	ldr	r3, [r4, #232]	; 0xe8
   1285c:	ldr	r2, [r4, #236]	; 0xec
   12860:	ldr	r1, [pc, #68]	; 128ac <int_but_not_followed_by_function@@Base+0x14c>
   12864:	adds	r3, r3, #1
   12868:	ldr	r0, [pc, #72]	; 128b8 <int_but_not_followed_by_function@@Base+0x158>
   1286c:	adc	r2, r2, #0
   12870:	str	r3, [r4, #232]	; 0xe8
   12874:	ldr	r3, [pc, #56]	; 128b4 <int_but_not_followed_by_function@@Base+0x154>
   12878:	str	r2, [r4, #236]	; 0xec
   1287c:	mov	r2, #68	; 0x44
   12880:	b	1284c <int_but_not_followed_by_function@@Base+0xec>
   12884:	ldr	r3, [r4, #224]	; 0xe0
   12888:	ldr	r2, [r4, #228]	; 0xe4
   1288c:	adds	r3, r3, #1
   12890:	adc	r2, r2, #0
   12894:	str	r3, [r4, #224]	; 0xe0
   12898:	str	r2, [r4, #228]	; 0xe4
   1289c:	add	sp, sp, #16
   128a0:	pop	{r4, r5, r6, pc}
   128a4:	andeq	sl, r2, r8, lsl #19
   128a8:	andeq	fp, r2, ip, ror #17
   128ac:	andeq	r8, r1, fp, asr sl
   128b0:	andeq	r8, r1, r5, asr #21
   128b4:	andeq	r8, r1, r6, lsl r9
   128b8:			; <UNDEFINED> instruction: 0x00018ab9

000128bc <boolean_expression_is_read_properly@@Base>:
   128bc:	push	{r4, r5, r6, r7, lr}
   128c0:	mov	r0, #3
   128c4:	sub	sp, sp, #20
   128c8:	ldr	r4, [pc, #548]	; 12af4 <boolean_expression_is_read_properly@@Base+0x238>
   128cc:	ldr	r5, [pc, #548]	; 12af8 <boolean_expression_is_read_properly@@Base+0x23c>
   128d0:	ldr	r3, [r4, #240]	; 0xf0
   128d4:	ldr	r2, [r4, #244]	; 0xf4
   128d8:	adds	r3, r3, #1
   128dc:	adc	r2, r2, #0
   128e0:	str	r3, [r4, #240]	; 0xf0
   128e4:	str	r2, [r4, #244]	; 0xf4
   128e8:	bl	118e8 <malloc@plt>
   128ec:	movw	r3, #15649	; 0x3d21
   128f0:	add	r1, sp, #4
   128f4:	mov	r7, r0
   128f8:	strh	r3, [r0]
   128fc:	mov	r3, #0
   12900:	strb	r3, [r0, #2]
   12904:	mov	r0, sp
   12908:	bl	15594 <init_grammar@@Base>
   1290c:	ldr	r3, [r4, #248]	; 0xf8
   12910:	mov	r0, #20
   12914:	ldr	r2, [r4, #252]	; 0xfc
   12918:	adds	r3, r3, #1
   1291c:	adc	r2, r2, #0
   12920:	str	r3, [r4, #248]	; 0xf8
   12924:	str	r2, [r4, #252]	; 0xfc
   12928:	bl	118e8 <malloc@plt>
   1292c:	mov	r6, r0
   12930:	mov	r0, #8
   12934:	bl	118e8 <malloc@plt>
   12938:	mov	r1, #2
   1293c:	str	r0, [r6]
   12940:	bl	147cc <init_token_int_value@@Base>
   12944:	ldr	r3, [r4, #256]	; 0x100
   12948:	mov	r0, #8
   1294c:	ldr	r1, [r4, #260]	; 0x104
   12950:	adds	r3, r3, #1
   12954:	adc	r1, r1, #0
   12958:	str	r3, [r4, #256]	; 0x100
   1295c:	str	r1, [r4, #260]	; 0x104
   12960:	bl	118e8 <malloc@plt>
   12964:	mov	r1, #2
   12968:	str	r0, [r6, #4]
   1296c:	bl	147cc <init_token_int_value@@Base>
   12970:	ldr	r3, [r4, #264]	; 0x108
   12974:	mov	r0, #8
   12978:	ldr	r2, [r4, #268]	; 0x10c
   1297c:	adds	r3, r3, #1
   12980:	adc	r2, r2, #0
   12984:	str	r3, [r4, #264]	; 0x108
   12988:	str	r2, [r4, #268]	; 0x10c
   1298c:	bl	118e8 <malloc@plt>
   12990:	mov	r1, r7
   12994:	str	r0, [r6, #8]
   12998:	bl	149b8 <init_token_boolean_op@@Base>
   1299c:	ldr	r3, [r4, #272]	; 0x110
   129a0:	mov	r0, #8
   129a4:	ldr	r2, [r4, #276]	; 0x114
   129a8:	adds	r3, r3, #1
   129ac:	adc	r2, r2, #0
   129b0:	str	r3, [r4, #272]	; 0x110
   129b4:	str	r2, [r4, #276]	; 0x114
   129b8:	bl	118e8 <malloc@plt>
   129bc:	mov	r1, #1
   129c0:	str	r0, [r6, #12]
   129c4:	bl	147cc <init_token_int_value@@Base>
   129c8:	ldr	r3, [r4, #280]	; 0x118
   129cc:	mov	r0, #4
   129d0:	ldr	r2, [r4, #284]	; 0x11c
   129d4:	adds	r3, r3, #1
   129d8:	adc	r2, r2, #0
   129dc:	str	r3, [r4, #280]	; 0x118
   129e0:	str	r2, [r4, #284]	; 0x11c
   129e4:	bl	118e8 <malloc@plt>
   129e8:	str	r0, [r6, #16]
   129ec:	bl	14858 <init_token_cpar@@Base>
   129f0:	ldr	r3, [r4, #288]	; 0x120
   129f4:	mov	r0, sp
   129f8:	str	r6, [r5, #228]	; 0xe4
   129fc:	ldr	r2, [r4, #292]	; 0x124
   12a00:	adds	r3, r3, #1
   12a04:	adc	r2, r2, #0
   12a08:	str	r3, [r4, #288]	; 0x120
   12a0c:	mov	r3, #5
   12a10:	str	r3, [r5, #220]	; 0xdc
   12a14:	str	r2, [r4, #292]	; 0x124
   12a18:	bl	15ce0 <read_boolean_expression@@Base>
   12a1c:	ldr	r3, [r5, #204]	; 0xcc
   12a20:	cmp	r3, #5
   12a24:	beq	12a58 <boolean_expression_is_read_properly@@Base+0x19c>
   12a28:	add	r4, r4, #304	; 0x130
   12a2c:	ldr	r3, [r4, #-8]
   12a30:	ldr	r2, [r4, #-4]
   12a34:	ldr	r1, [pc, #192]	; 12afc <boolean_expression_is_read_properly@@Base+0x240>
   12a38:	adds	r3, r3, #1
   12a3c:	ldr	r0, [pc, #188]	; 12b00 <boolean_expression_is_read_properly@@Base+0x244>
   12a40:	str	r3, [r4, #-8]
   12a44:	adc	r2, r2, #0
   12a48:	ldr	r3, [pc, #180]	; 12b04 <boolean_expression_is_read_properly@@Base+0x248>
   12a4c:	str	r2, [r4, #-4]
   12a50:	mov	r2, #105	; 0x69
   12a54:	bl	119f0 <__assert_fail@plt>
   12a58:	ldr	r3, [pc, #168]	; 12b08 <boolean_expression_is_read_properly@@Base+0x24c>
   12a5c:	ldr	r3, [r3, #408]	; 0x198
   12a60:	cmp	r3, #1
   12a64:	beq	12a98 <boolean_expression_is_read_properly@@Base+0x1dc>
   12a68:	add	r4, r4, #304	; 0x130
   12a6c:	ldr	r3, [r4]
   12a70:	ldr	r2, [r4, #4]
   12a74:	ldr	r1, [pc, #128]	; 12afc <boolean_expression_is_read_properly@@Base+0x240>
   12a78:	adds	r3, r3, #1
   12a7c:	ldr	r0, [pc, #136]	; 12b0c <boolean_expression_is_read_properly@@Base+0x250>
   12a80:	adc	r2, r2, #0
   12a84:	str	r3, [r4]
   12a88:	ldr	r3, [pc, #116]	; 12b04 <boolean_expression_is_read_properly@@Base+0x248>
   12a8c:	str	r2, [r4, #4]
   12a90:	mov	r2, #106	; 0x6a
   12a94:	b	12a54 <boolean_expression_is_read_properly@@Base+0x198>
   12a98:	ldr	r3, [r0]
   12a9c:	add	r4, r4, #320	; 0x140
   12aa0:	cmp	r3, #5
   12aa4:	beq	12ad4 <boolean_expression_is_read_properly@@Base+0x218>
   12aa8:	ldr	r3, [r4]
   12aac:	ldr	r2, [r4, #4]
   12ab0:	ldr	r1, [pc, #68]	; 12afc <boolean_expression_is_read_properly@@Base+0x240>
   12ab4:	adds	r3, r3, #1
   12ab8:	ldr	r0, [pc, #80]	; 12b10 <boolean_expression_is_read_properly@@Base+0x254>
   12abc:	adc	r2, r2, #0
   12ac0:	str	r3, [r4]
   12ac4:	ldr	r3, [pc, #56]	; 12b04 <boolean_expression_is_read_properly@@Base+0x248>
   12ac8:	str	r2, [r4, #4]
   12acc:	mov	r2, #107	; 0x6b
   12ad0:	b	12a54 <boolean_expression_is_read_properly@@Base+0x198>
   12ad4:	ldr	r3, [r4, #-8]
   12ad8:	ldr	r2, [r4, #-4]
   12adc:	adds	r3, r3, #1
   12ae0:	adc	r2, r2, #0
   12ae4:	str	r3, [r4, #-8]
   12ae8:	str	r2, [r4, #-4]
   12aec:	add	sp, sp, #20
   12af0:	pop	{r4, r5, r6, r7, pc}
   12af4:	andeq	sl, r2, r8, lsl #19
   12af8:	andeq	fp, r2, ip, ror #17
   12afc:	andeq	r8, r1, fp, asr sl
   12b00:	ldrdeq	r8, [r1], -pc	; <UNPREDICTABLE>
   12b04:	andeq	r8, r1, r7, lsr r9
   12b08:	andeq	fp, r2, r4, asr #14
   12b0c:	strdeq	r8, [r1], -r9
   12b10:	andeq	r8, r1, r8, lsl fp

00012b14 <boolean_expression_complex@@Base>:
   12b14:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12b18:	mov	r0, #3
   12b1c:	ldr	r4, [pc, #744]	; 12e0c <boolean_expression_complex@@Base+0x2f8>
   12b20:	ldr	r3, [r4, #-8]
   12b24:	ldr	r2, [r4, #-4]
   12b28:	adds	r3, r3, #1
   12b2c:	adc	r2, r2, #0
   12b30:	str	r3, [r4, #-8]
   12b34:	str	r2, [r4, #-4]
   12b38:	bl	118e8 <malloc@plt>
   12b3c:	mov	r8, r0
   12b40:	mov	r0, #3
   12b44:	bl	118e8 <malloc@plt>
   12b48:	mov	r7, r0
   12b4c:	mov	r0, #3
   12b50:	bl	118e8 <malloc@plt>
   12b54:	movw	r3, #15676	; 0x3d3c
   12b58:	movw	r2, #9766	; 0x2626
   12b5c:	add	r1, sp, #4
   12b60:	mov	r6, r0
   12b64:	strh	r2, [r7]
   12b68:	movw	r2, #15677	; 0x3d3d
   12b6c:	strh	r3, [r8]
   12b70:	mov	r3, #0
   12b74:	strh	r2, [r0]
   12b78:	strb	r3, [r0, #2]
   12b7c:	mov	r0, sp
   12b80:	strb	r3, [r7, #2]
   12b84:	strb	r3, [r8, #2]
   12b88:	bl	15594 <init_grammar@@Base>
   12b8c:	ldr	r3, [r4]
   12b90:	mov	r0, #40	; 0x28
   12b94:	ldr	r2, [r4, #4]
   12b98:	adds	r3, r3, #1
   12b9c:	adc	r2, r2, #0
   12ba0:	str	r3, [r4]
   12ba4:	str	r2, [r4, #4]
   12ba8:	bl	118e8 <malloc@plt>
   12bac:	mov	r5, r0
   12bb0:	mov	r0, #8
   12bb4:	bl	118e8 <malloc@plt>
   12bb8:	mov	r1, #2
   12bbc:	str	r0, [r5]
   12bc0:	bl	147cc <init_token_int_value@@Base>
   12bc4:	ldr	r3, [r4, #8]
   12bc8:	mov	r0, #8
   12bcc:	ldr	r2, [r4, #12]
   12bd0:	adds	r3, r3, #1
   12bd4:	adc	r2, r2, #0
   12bd8:	str	r3, [r4, #8]
   12bdc:	str	r2, [r4, #12]
   12be0:	bl	118e8 <malloc@plt>
   12be4:	mov	r1, #2
   12be8:	str	r0, [r5, #4]
   12bec:	bl	147cc <init_token_int_value@@Base>
   12bf0:	ldr	r3, [r4, #16]
   12bf4:	mov	r0, #8
   12bf8:	ldr	r2, [r4, #20]
   12bfc:	adds	r3, r3, #1
   12c00:	adc	r2, r2, #0
   12c04:	str	r3, [r4, #16]
   12c08:	str	r2, [r4, #20]
   12c0c:	bl	118e8 <malloc@plt>
   12c10:	mov	r1, r8
   12c14:	str	r0, [r5, #8]
   12c18:	bl	149b8 <init_token_boolean_op@@Base>
   12c1c:	ldr	r3, [r4, #24]
   12c20:	mov	r0, #8
   12c24:	ldr	r2, [r4, #28]
   12c28:	adds	r3, r3, #1
   12c2c:	adc	r2, r2, #0
   12c30:	str	r3, [r4, #24]
   12c34:	str	r2, [r4, #28]
   12c38:	bl	118e8 <malloc@plt>
   12c3c:	mov	r1, #1
   12c40:	str	r0, [r5, #12]
   12c44:	bl	147cc <init_token_int_value@@Base>
   12c48:	ldr	r3, [r4, #32]
   12c4c:	mov	r0, #8
   12c50:	ldr	r2, [r4, #36]	; 0x24
   12c54:	adds	r3, r3, #1
   12c58:	adc	r2, r2, #0
   12c5c:	str	r3, [r4, #32]
   12c60:	str	r2, [r4, #36]	; 0x24
   12c64:	bl	118e8 <malloc@plt>
   12c68:	mov	r1, r7
   12c6c:	str	r0, [r5, #16]
   12c70:	bl	149b8 <init_token_boolean_op@@Base>
   12c74:	ldr	r3, [r4, #40]	; 0x28
   12c78:	mov	r0, #8
   12c7c:	ldr	r2, [r4, #44]	; 0x2c
   12c80:	adds	r3, r3, #1
   12c84:	adc	r2, r2, #0
   12c88:	str	r3, [r4, #40]	; 0x28
   12c8c:	str	r2, [r4, #44]	; 0x2c
   12c90:	bl	118e8 <malloc@plt>
   12c94:	mov	r1, #4
   12c98:	str	r0, [r5, #20]
   12c9c:	bl	147cc <init_token_int_value@@Base>
   12ca0:	ldr	r3, [r4, #48]	; 0x30
   12ca4:	mov	r0, #8
   12ca8:	ldr	r2, [r4, #52]	; 0x34
   12cac:	adds	r3, r3, #1
   12cb0:	adc	r2, r2, #0
   12cb4:	str	r3, [r4, #48]	; 0x30
   12cb8:	str	r2, [r4, #52]	; 0x34
   12cbc:	bl	118e8 <malloc@plt>
   12cc0:	mov	r1, #4
   12cc4:	str	r0, [r5, #24]
   12cc8:	bl	147cc <init_token_int_value@@Base>
   12ccc:	ldr	r3, [r4, #56]	; 0x38
   12cd0:	mov	r0, #8
   12cd4:	ldr	r2, [r4, #60]	; 0x3c
   12cd8:	adds	r3, r3, #1
   12cdc:	adc	r2, r2, #0
   12ce0:	str	r3, [r4, #56]	; 0x38
   12ce4:	str	r2, [r4, #60]	; 0x3c
   12ce8:	bl	118e8 <malloc@plt>
   12cec:	mov	r1, r6
   12cf0:	str	r0, [r5, #28]
   12cf4:	bl	149b8 <init_token_boolean_op@@Base>
   12cf8:	ldr	r3, [r4, #64]	; 0x40
   12cfc:	mov	r0, #8
   12d00:	ldr	r2, [r4, #68]	; 0x44
   12d04:	ldr	r6, [pc, #260]	; 12e10 <boolean_expression_complex@@Base+0x2fc>
   12d08:	adds	r3, r3, #1
   12d0c:	adc	r2, r2, #0
   12d10:	str	r3, [r4, #64]	; 0x40
   12d14:	str	r2, [r4, #68]	; 0x44
   12d18:	bl	118e8 <malloc@plt>
   12d1c:	mov	r1, #4
   12d20:	str	r0, [r5, #32]
   12d24:	bl	147cc <init_token_int_value@@Base>
   12d28:	ldr	r3, [r4, #72]	; 0x48
   12d2c:	mov	r0, #4
   12d30:	ldr	r2, [r4, #76]	; 0x4c
   12d34:	adds	r3, r3, #1
   12d38:	adc	r2, r2, #0
   12d3c:	str	r3, [r4, #72]	; 0x48
   12d40:	str	r2, [r4, #76]	; 0x4c
   12d44:	bl	118e8 <malloc@plt>
   12d48:	str	r0, [r5, #36]	; 0x24
   12d4c:	bl	14858 <init_token_cpar@@Base>
   12d50:	ldr	r3, [r4, #80]	; 0x50
   12d54:	mov	r0, sp
   12d58:	str	r5, [r6, #228]	; 0xe4
   12d5c:	ldr	r2, [r4, #84]	; 0x54
   12d60:	adds	r3, r3, #1
   12d64:	adc	r2, r2, #0
   12d68:	str	r3, [r4, #80]	; 0x50
   12d6c:	mov	r3, #10
   12d70:	str	r2, [r4, #84]	; 0x54
   12d74:	str	r3, [r6, #220]	; 0xdc
   12d78:	bl	15ce0 <read_boolean_expression@@Base>
   12d7c:	ldr	r3, [r6, #204]	; 0xcc
   12d80:	cmp	r3, #10
   12d84:	beq	12db4 <boolean_expression_complex@@Base+0x2a0>
   12d88:	ldr	r3, [r4, #88]	; 0x58
   12d8c:	ldr	r2, [r4, #92]	; 0x5c
   12d90:	ldr	r1, [pc, #124]	; 12e14 <boolean_expression_complex@@Base+0x300>
   12d94:	adds	r3, r3, #1
   12d98:	ldr	r0, [pc, #120]	; 12e18 <boolean_expression_complex@@Base+0x304>
   12d9c:	str	r3, [r4, #88]	; 0x58
   12da0:	adc	r2, r2, #0
   12da4:	ldr	r3, [pc, #112]	; 12e1c <boolean_expression_complex@@Base+0x308>
   12da8:	str	r2, [r4, #92]	; 0x5c
   12dac:	mov	r2, #166	; 0xa6
   12db0:	bl	119f0 <__assert_fail@plt>
   12db4:	ldr	r3, [r0]
   12db8:	cmp	r3, #5
   12dbc:	beq	12dec <boolean_expression_complex@@Base+0x2d8>
   12dc0:	ldr	r3, [r4, #104]	; 0x68
   12dc4:	ldr	r2, [r4, #108]	; 0x6c
   12dc8:	ldr	r1, [pc, #68]	; 12e14 <boolean_expression_complex@@Base+0x300>
   12dcc:	adds	r3, r3, #1
   12dd0:	ldr	r0, [pc, #72]	; 12e20 <boolean_expression_complex@@Base+0x30c>
   12dd4:	adc	r2, r2, #0
   12dd8:	str	r3, [r4, #104]	; 0x68
   12ddc:	ldr	r3, [pc, #56]	; 12e1c <boolean_expression_complex@@Base+0x308>
   12de0:	str	r2, [r4, #108]	; 0x6c
   12de4:	mov	r2, #167	; 0xa7
   12de8:	b	12db0 <boolean_expression_complex@@Base+0x29c>
   12dec:	ldr	r3, [r4, #96]	; 0x60
   12df0:	ldr	r2, [r4, #100]	; 0x64
   12df4:	adds	r3, r3, #1
   12df8:	adc	r2, r2, #0
   12dfc:	str	r3, [r4, #96]	; 0x60
   12e00:	str	r2, [r4, #100]	; 0x64
   12e04:	add	sp, sp, #16
   12e08:	pop	{r4, r5, r6, r7, r8, pc}
   12e0c:	ldrdeq	sl, [r2], -r8
   12e10:	andeq	fp, r2, ip, ror #17
   12e14:	andeq	r8, r1, fp, asr sl
   12e18:	andeq	r8, r1, r8, lsr fp
   12e1c:	andeq	r8, r1, fp, asr r9
   12e20:	andeq	r8, r1, r8, lsl fp

00012e24 <boolean_binary_operator_is_read_properly@@Base>:
   12e24:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12e28:	mov	r0, #3
   12e2c:	ldr	r4, [pc, #568]	; 1306c <boolean_binary_operator_is_read_properly@@Base+0x248>
   12e30:	ldr	r3, [r4]
   12e34:	ldr	r2, [r4, #4]
   12e38:	adds	r3, r3, #1
   12e3c:	adc	r2, r2, #0
   12e40:	str	r3, [r4]
   12e44:	str	r2, [r4, #4]
   12e48:	bl	118e8 <malloc@plt>
   12e4c:	movw	r3, #15649	; 0x3d21
   12e50:	add	r1, sp, #4
   12e54:	mov	r6, r0
   12e58:	strh	r3, [r0]
   12e5c:	mov	r3, #0
   12e60:	strb	r3, [r0, #2]
   12e64:	mov	r0, sp
   12e68:	bl	15594 <init_grammar@@Base>
   12e6c:	ldr	r3, [r4, #8]
   12e70:	mov	r0, #12
   12e74:	ldr	r2, [r4, #12]
   12e78:	adds	r3, r3, #1
   12e7c:	adc	r2, r2, #0
   12e80:	str	r3, [r4, #8]
   12e84:	str	r2, [r4, #12]
   12e88:	bl	118e8 <malloc@plt>
   12e8c:	mov	r5, r0
   12e90:	mov	r0, #8
   12e94:	bl	118e8 <malloc@plt>
   12e98:	mov	r1, #2
   12e9c:	str	r0, [r5]
   12ea0:	bl	147cc <init_token_int_value@@Base>
   12ea4:	ldr	r3, [r4, #16]
   12ea8:	mov	r0, #8
   12eac:	ldr	r2, [r4, #20]
   12eb0:	adds	r3, r3, #1
   12eb4:	adc	r2, r2, #0
   12eb8:	str	r3, [r4, #16]
   12ebc:	str	r2, [r4, #20]
   12ec0:	bl	118e8 <malloc@plt>
   12ec4:	mov	r1, r6
   12ec8:	str	r0, [r5, #4]
   12ecc:	bl	149b8 <init_token_boolean_op@@Base>
   12ed0:	ldr	r3, [r4, #24]
   12ed4:	mov	r0, #8
   12ed8:	ldr	r2, [r4, #28]
   12edc:	ldr	r6, [pc, #396]	; 13070 <boolean_binary_operator_is_read_properly@@Base+0x24c>
   12ee0:	adds	r3, r3, #1
   12ee4:	adc	r2, r2, #0
   12ee8:	str	r3, [r4, #24]
   12eec:	str	r2, [r4, #28]
   12ef0:	bl	118e8 <malloc@plt>
   12ef4:	mov	r1, #1
   12ef8:	str	r0, [r5, #8]
   12efc:	bl	147cc <init_token_int_value@@Base>
   12f00:	ldr	r3, [r4, #32]
   12f04:	mov	r0, sp
   12f08:	str	r5, [r6, #228]	; 0xe4
   12f0c:	ldr	r2, [r4, #36]	; 0x24
   12f10:	adds	r3, r3, #1
   12f14:	adc	r2, r2, #0
   12f18:	str	r3, [r4, #32]
   12f1c:	mov	r3, #3
   12f20:	str	r2, [r4, #36]	; 0x24
   12f24:	str	r3, [r6, #220]	; 0xdc
   12f28:	bl	15904 <read_boolean_binary_expression@@Base>
   12f2c:	ldr	r3, [r6, #204]	; 0xcc
   12f30:	cmp	r3, #3
   12f34:	beq	12f64 <boolean_binary_operator_is_read_properly@@Base+0x140>
   12f38:	ldr	r3, [r4, #40]	; 0x28
   12f3c:	ldr	r2, [r4, #44]	; 0x2c
   12f40:	ldr	r1, [pc, #300]	; 13074 <boolean_binary_operator_is_read_properly@@Base+0x250>
   12f44:	adds	r3, r3, #1
   12f48:	ldr	r0, [pc, #296]	; 13078 <boolean_binary_operator_is_read_properly@@Base+0x254>
   12f4c:	str	r3, [r4, #40]	; 0x28
   12f50:	adc	r2, r2, #0
   12f54:	ldr	r3, [pc, #288]	; 1307c <boolean_binary_operator_is_read_properly@@Base+0x258>
   12f58:	str	r2, [r4, #44]	; 0x2c
   12f5c:	mov	r2, #200	; 0xc8
   12f60:	bl	119f0 <__assert_fail@plt>
   12f64:	ldr	r3, [r0]
   12f68:	cmp	r3, #5
   12f6c:	beq	12f9c <boolean_binary_operator_is_read_properly@@Base+0x178>
   12f70:	ldr	r3, [r4, #48]	; 0x30
   12f74:	ldr	r2, [r4, #52]	; 0x34
   12f78:	ldr	r1, [pc, #244]	; 13074 <boolean_binary_operator_is_read_properly@@Base+0x250>
   12f7c:	adds	r3, r3, #1
   12f80:	ldr	r0, [pc, #248]	; 13080 <boolean_binary_operator_is_read_properly@@Base+0x25c>
   12f84:	adc	r2, r2, #0
   12f88:	str	r3, [r4, #48]	; 0x30
   12f8c:	ldr	r3, [pc, #232]	; 1307c <boolean_binary_operator_is_read_properly@@Base+0x258>
   12f90:	str	r2, [r4, #52]	; 0x34
   12f94:	mov	r2, #201	; 0xc9
   12f98:	b	12f60 <boolean_binary_operator_is_read_properly@@Base+0x13c>
   12f9c:	ldr	r3, [r0, #8]
   12fa0:	ldr	r3, [r3]
   12fa4:	cmp	r3, #1
   12fa8:	beq	12fd8 <boolean_binary_operator_is_read_properly@@Base+0x1b4>
   12fac:	ldr	r3, [r4, #56]	; 0x38
   12fb0:	ldr	r2, [r4, #60]	; 0x3c
   12fb4:	ldr	r1, [pc, #184]	; 13074 <boolean_binary_operator_is_read_properly@@Base+0x250>
   12fb8:	adds	r3, r3, #1
   12fbc:	ldr	r0, [pc, #192]	; 13084 <boolean_binary_operator_is_read_properly@@Base+0x260>
   12fc0:	adc	r2, r2, #0
   12fc4:	str	r3, [r4, #56]	; 0x38
   12fc8:	ldr	r3, [pc, #172]	; 1307c <boolean_binary_operator_is_read_properly@@Base+0x258>
   12fcc:	str	r2, [r4, #60]	; 0x3c
   12fd0:	mov	r2, #203	; 0xcb
   12fd4:	b	12f60 <boolean_binary_operator_is_read_properly@@Base+0x13c>
   12fd8:	ldr	r3, [r0, #16]
   12fdc:	cmp	r3, #1
   12fe0:	beq	13010 <boolean_binary_operator_is_read_properly@@Base+0x1ec>
   12fe4:	ldr	r3, [r4, #64]	; 0x40
   12fe8:	ldr	r2, [r4, #68]	; 0x44
   12fec:	ldr	r1, [pc, #128]	; 13074 <boolean_binary_operator_is_read_properly@@Base+0x250>
   12ff0:	adds	r3, r3, #1
   12ff4:	ldr	r0, [pc, #140]	; 13088 <boolean_binary_operator_is_read_properly@@Base+0x264>
   12ff8:	adc	r2, r2, #0
   12ffc:	str	r3, [r4, #64]	; 0x40
   13000:	ldr	r3, [pc, #116]	; 1307c <boolean_binary_operator_is_read_properly@@Base+0x258>
   13004:	str	r2, [r4, #68]	; 0x44
   13008:	mov	r2, #204	; 0xcc
   1300c:	b	12f60 <boolean_binary_operator_is_read_properly@@Base+0x13c>
   13010:	ldr	r3, [r0, #12]
   13014:	ldr	r3, [r3]
   13018:	cmp	r3, #1
   1301c:	beq	1304c <boolean_binary_operator_is_read_properly@@Base+0x228>
   13020:	ldr	r3, [r4, #80]	; 0x50
   13024:	ldr	r2, [r4, #84]	; 0x54
   13028:	ldr	r1, [pc, #68]	; 13074 <boolean_binary_operator_is_read_properly@@Base+0x250>
   1302c:	adds	r3, r3, #1
   13030:	ldr	r0, [pc, #84]	; 1308c <boolean_binary_operator_is_read_properly@@Base+0x268>
   13034:	adc	r2, r2, #0
   13038:	str	r3, [r4, #80]	; 0x50
   1303c:	ldr	r3, [pc, #56]	; 1307c <boolean_binary_operator_is_read_properly@@Base+0x258>
   13040:	str	r2, [r4, #84]	; 0x54
   13044:	mov	r2, #205	; 0xcd
   13048:	b	12f60 <boolean_binary_operator_is_read_properly@@Base+0x13c>
   1304c:	ldr	r3, [r4, #72]	; 0x48
   13050:	ldr	r2, [r4, #76]	; 0x4c
   13054:	adds	r3, r3, #1
   13058:	adc	r2, r2, #0
   1305c:	str	r3, [r4, #72]	; 0x48
   13060:	str	r2, [r4, #76]	; 0x4c
   13064:	add	sp, sp, #16
   13068:	pop	{r4, r5, r6, pc}
   1306c:	andeq	sl, r2, r8, asr #22
   13070:	andeq	fp, r2, ip, ror #17
   13074:	andeq	r8, r1, fp, asr sl
   13078:	andeq	r8, r1, r3, asr fp
   1307c:	andeq	r8, r1, r6, ror r9
   13080:	andeq	r8, r1, r8, lsl fp
   13084:	andeq	r8, r1, sp, ror #22
   13088:	andeq	r8, r1, r8, lsl #23
   1308c:	andeq	r8, r1, r1, lsr #23

00013090 <boolean_unary_operator_is_read_properly@@Base>:
   13090:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13094:	mov	r0, #2
   13098:	ldr	r4, [pc, #512]	; 132a0 <boolean_unary_operator_is_read_properly@@Base+0x210>
   1309c:	ldr	r3, [r4, #-8]
   130a0:	ldr	r2, [r4, #-4]
   130a4:	adds	r3, r3, #1
   130a8:	adc	r2, r2, #0
   130ac:	str	r3, [r4, #-8]
   130b0:	str	r2, [r4, #-4]
   130b4:	bl	118e8 <malloc@plt>
   130b8:	mov	r3, #33	; 0x21
   130bc:	add	r1, sp, #4
   130c0:	mov	r5, r0
   130c4:	strh	r3, [r0]
   130c8:	mov	r0, sp
   130cc:	bl	15594 <init_grammar@@Base>
   130d0:	ldr	r3, [r4]
   130d4:	mov	r0, #8
   130d8:	ldr	r2, [r4, #4]
   130dc:	adds	r3, r3, #1
   130e0:	adc	r2, r2, #0
   130e4:	str	r3, [r4]
   130e8:	str	r2, [r4, #4]
   130ec:	bl	118e8 <malloc@plt>
   130f0:	mov	r6, r0
   130f4:	mov	r0, #8
   130f8:	bl	118e8 <malloc@plt>
   130fc:	mov	r1, r5
   13100:	str	r0, [r6]
   13104:	bl	149b8 <init_token_boolean_op@@Base>
   13108:	ldr	r3, [r4, #8]
   1310c:	mov	r0, #8
   13110:	ldr	r2, [r4, #12]
   13114:	ldr	r5, [pc, #392]	; 132a4 <boolean_unary_operator_is_read_properly@@Base+0x214>
   13118:	adds	r3, r3, #1
   1311c:	adc	r2, r2, #0
   13120:	str	r3, [r4, #8]
   13124:	str	r2, [r4, #12]
   13128:	bl	118e8 <malloc@plt>
   1312c:	mov	r1, #1
   13130:	str	r0, [r6, #4]
   13134:	bl	147cc <init_token_int_value@@Base>
   13138:	ldr	r3, [r4, #16]
   1313c:	mov	r0, sp
   13140:	str	r6, [r5, #228]	; 0xe4
   13144:	ldr	r2, [r4, #20]
   13148:	adds	r3, r3, #1
   1314c:	adc	r2, r2, #0
   13150:	str	r3, [r4, #16]
   13154:	mov	r3, #2
   13158:	str	r2, [r4, #20]
   1315c:	str	r3, [r5, #220]	; 0xdc
   13160:	bl	15734 <read_boolean_unary_expression@@Base>
   13164:	ldr	r3, [r5, #204]	; 0xcc
   13168:	cmp	r3, #2
   1316c:	beq	1319c <boolean_unary_operator_is_read_properly@@Base+0x10c>
   13170:	ldr	r3, [r4, #24]
   13174:	ldr	r2, [r4, #28]
   13178:	ldr	r1, [pc, #296]	; 132a8 <boolean_unary_operator_is_read_properly@@Base+0x218>
   1317c:	adds	r3, r3, #1
   13180:	ldr	r0, [pc, #292]	; 132ac <boolean_unary_operator_is_read_properly@@Base+0x21c>
   13184:	str	r3, [r4, #24]
   13188:	adc	r2, r2, #0
   1318c:	ldr	r3, [pc, #284]	; 132b0 <boolean_unary_operator_is_read_properly@@Base+0x220>
   13190:	str	r2, [r4, #28]
   13194:	mov	r2, #235	; 0xeb
   13198:	bl	119f0 <__assert_fail@plt>
   1319c:	ldr	r3, [r0]
   131a0:	cmp	r3, #5
   131a4:	beq	131d4 <boolean_unary_operator_is_read_properly@@Base+0x144>
   131a8:	ldr	r3, [r4, #32]
   131ac:	ldr	r2, [r4, #36]	; 0x24
   131b0:	ldr	r1, [pc, #240]	; 132a8 <boolean_unary_operator_is_read_properly@@Base+0x218>
   131b4:	adds	r3, r3, #1
   131b8:	ldr	r0, [pc, #244]	; 132b4 <boolean_unary_operator_is_read_properly@@Base+0x224>
   131bc:	adc	r2, r2, #0
   131c0:	str	r3, [r4, #32]
   131c4:	ldr	r3, [pc, #228]	; 132b0 <boolean_unary_operator_is_read_properly@@Base+0x220>
   131c8:	str	r2, [r4, #36]	; 0x24
   131cc:	mov	r2, #236	; 0xec
   131d0:	b	13198 <boolean_unary_operator_is_read_properly@@Base+0x108>
   131d4:	ldr	r3, [r0, #8]
   131d8:	ldr	r3, [r3]
   131dc:	cmp	r3, #1
   131e0:	beq	13210 <boolean_unary_operator_is_read_properly@@Base+0x180>
   131e4:	ldr	r3, [r4, #40]	; 0x28
   131e8:	ldr	r2, [r4, #44]	; 0x2c
   131ec:	ldr	r1, [pc, #180]	; 132a8 <boolean_unary_operator_is_read_properly@@Base+0x218>
   131f0:	adds	r3, r3, #1
   131f4:	ldr	r0, [pc, #188]	; 132b8 <boolean_unary_operator_is_read_properly@@Base+0x228>
   131f8:	adc	r2, r2, #0
   131fc:	str	r3, [r4, #40]	; 0x28
   13200:	ldr	r3, [pc, #168]	; 132b0 <boolean_unary_operator_is_read_properly@@Base+0x220>
   13204:	str	r2, [r4, #44]	; 0x2c
   13208:	mov	r2, #238	; 0xee
   1320c:	b	13198 <boolean_unary_operator_is_read_properly@@Base+0x108>
   13210:	ldr	r3, [r0, #16]
   13214:	cmp	r3, #8
   13218:	beq	13248 <boolean_unary_operator_is_read_properly@@Base+0x1b8>
   1321c:	ldr	r3, [r4, #48]	; 0x30
   13220:	ldr	r2, [r4, #52]	; 0x34
   13224:	ldr	r1, [pc, #124]	; 132a8 <boolean_unary_operator_is_read_properly@@Base+0x218>
   13228:	adds	r3, r3, #1
   1322c:	ldr	r0, [pc, #136]	; 132bc <boolean_unary_operator_is_read_properly@@Base+0x22c>
   13230:	adc	r2, r2, #0
   13234:	str	r3, [r4, #48]	; 0x30
   13238:	ldr	r3, [pc, #112]	; 132b0 <boolean_unary_operator_is_read_properly@@Base+0x220>
   1323c:	str	r2, [r4, #52]	; 0x34
   13240:	mov	r2, #239	; 0xef
   13244:	b	13198 <boolean_unary_operator_is_read_properly@@Base+0x108>
   13248:	ldr	r3, [r0, #12]
   1324c:	cmp	r3, #0
   13250:	beq	13280 <boolean_unary_operator_is_read_properly@@Base+0x1f0>
   13254:	ldr	r3, [r4, #64]	; 0x40
   13258:	ldr	r2, [r4, #68]	; 0x44
   1325c:	ldr	r1, [pc, #68]	; 132a8 <boolean_unary_operator_is_read_properly@@Base+0x218>
   13260:	adds	r3, r3, #1
   13264:	ldr	r0, [pc, #84]	; 132c0 <boolean_unary_operator_is_read_properly@@Base+0x230>
   13268:	adc	r2, r2, #0
   1326c:	str	r3, [r4, #64]	; 0x40
   13270:	ldr	r3, [pc, #56]	; 132b0 <boolean_unary_operator_is_read_properly@@Base+0x220>
   13274:	str	r2, [r4, #68]	; 0x44
   13278:	mov	r2, #240	; 0xf0
   1327c:	b	13198 <boolean_unary_operator_is_read_properly@@Base+0x108>
   13280:	ldr	r3, [r4, #56]	; 0x38
   13284:	ldr	r2, [r4, #60]	; 0x3c
   13288:	adds	r3, r3, #1
   1328c:	adc	r2, r2, #0
   13290:	str	r3, [r4, #56]	; 0x38
   13294:	str	r2, [r4, #60]	; 0x3c
   13298:	add	sp, sp, #16
   1329c:	pop	{r4, r5, r6, pc}
   132a0:	andeq	sl, r2, r8, lsr #23
   132a4:	andeq	fp, r2, ip, ror #17
   132a8:	andeq	r8, r1, fp, asr sl
   132ac:	andeq	r8, r1, r5, asr #21
   132b0:	muleq	r1, pc, r9	; <UNPREDICTABLE>
   132b4:	andeq	r8, r1, r8, lsl fp
   132b8:	andeq	r8, r1, sp, ror #22
   132bc:			; <UNDEFINED> instruction: 0x00018bbd
   132c0:	ldrdeq	r8, [r1], -r1

000132c4 <if_statement_only@@Base>:
   132c4:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   132c8:	add	r1, sp, #4
   132cc:	mov	r0, sp
   132d0:	ldr	r4, [pc, #684]	; 13584 <if_statement_only@@Base+0x2c0>
   132d4:	ldr	r3, [r4, #-8]
   132d8:	ldr	r2, [r4, #-4]
   132dc:	adds	r3, r3, #1
   132e0:	adc	r2, r2, #0
   132e4:	str	r3, [r4, #-8]
   132e8:	str	r2, [r4, #-4]
   132ec:	bl	15594 <init_grammar@@Base>
   132f0:	ldr	r3, [r4]
   132f4:	mov	r0, #3
   132f8:	ldr	r2, [r4, #4]
   132fc:	adds	r3, r3, #1
   13300:	adc	r2, r2, #0
   13304:	str	r3, [r4]
   13308:	str	r2, [r4, #4]
   1330c:	bl	118e8 <malloc@plt>
   13310:	movw	r3, #15649	; 0x3d21
   13314:	mov	r6, r0
   13318:	strh	r3, [r0]
   1331c:	mov	r3, #0
   13320:	strb	r3, [r0, #2]
   13324:	mov	r0, #36	; 0x24
   13328:	bl	118e8 <malloc@plt>
   1332c:	mov	r5, r0
   13330:	mov	r0, #4
   13334:	bl	118e8 <malloc@plt>
   13338:	str	r0, [r5]
   1333c:	bl	1482c <init_token_opar@@Base>
   13340:	ldr	r3, [r4, #8]
   13344:	mov	r0, #8
   13348:	ldr	r2, [r4, #12]
   1334c:	adds	r3, r3, #1
   13350:	adc	r2, r2, #0
   13354:	str	r3, [r4, #8]
   13358:	str	r2, [r4, #12]
   1335c:	bl	118e8 <malloc@plt>
   13360:	mov	r1, #1
   13364:	str	r0, [r5, #4]
   13368:	bl	147cc <init_token_int_value@@Base>
   1336c:	ldr	r3, [r4, #16]
   13370:	mov	r0, #8
   13374:	ldr	r2, [r4, #20]
   13378:	adds	r3, r3, #1
   1337c:	adc	r2, r2, #0
   13380:	str	r3, [r4, #16]
   13384:	str	r2, [r4, #20]
   13388:	bl	118e8 <malloc@plt>
   1338c:	mov	r1, #1
   13390:	str	r0, [r5, #8]
   13394:	bl	147cc <init_token_int_value@@Base>
   13398:	ldr	r3, [r4, #24]
   1339c:	mov	r0, #8
   133a0:	ldr	r2, [r4, #28]
   133a4:	adds	r3, r3, #1
   133a8:	adc	r2, r2, #0
   133ac:	str	r3, [r4, #24]
   133b0:	str	r2, [r4, #28]
   133b4:	bl	118e8 <malloc@plt>
   133b8:	mov	r1, r6
   133bc:	str	r0, [r5, #12]
   133c0:	bl	149b8 <init_token_boolean_op@@Base>
   133c4:	ldr	r3, [r4, #32]
   133c8:	mov	r0, #8
   133cc:	ldr	r2, [r4, #36]	; 0x24
   133d0:	ldr	r6, [pc, #432]	; 13588 <if_statement_only@@Base+0x2c4>
   133d4:	adds	r3, r3, #1
   133d8:	adc	r2, r2, #0
   133dc:	str	r3, [r4, #32]
   133e0:	str	r2, [r4, #36]	; 0x24
   133e4:	bl	118e8 <malloc@plt>
   133e8:	mov	r1, #1
   133ec:	str	r0, [r5, #16]
   133f0:	bl	147cc <init_token_int_value@@Base>
   133f4:	ldr	r3, [r4, #40]	; 0x28
   133f8:	mov	r0, #4
   133fc:	ldr	r2, [r4, #44]	; 0x2c
   13400:	adds	r3, r3, #1
   13404:	adc	r2, r2, #0
   13408:	str	r3, [r4, #40]	; 0x28
   1340c:	str	r2, [r4, #44]	; 0x2c
   13410:	bl	118e8 <malloc@plt>
   13414:	str	r0, [r5, #20]
   13418:	bl	14858 <init_token_cpar@@Base>
   1341c:	ldr	r3, [r4, #48]	; 0x30
   13420:	mov	r0, #4
   13424:	ldr	r2, [r4, #52]	; 0x34
   13428:	adds	r3, r3, #1
   1342c:	adc	r2, r2, #0
   13430:	str	r3, [r4, #48]	; 0x30
   13434:	str	r2, [r4, #52]	; 0x34
   13438:	bl	118e8 <malloc@plt>
   1343c:	str	r0, [r5, #24]
   13440:	bl	14884 <init_token_obra@@Base>
   13444:	ldr	r3, [r4, #56]	; 0x38
   13448:	mov	r0, #4
   1344c:	ldr	r2, [r4, #60]	; 0x3c
   13450:	adds	r3, r3, #1
   13454:	adc	r2, r2, #0
   13458:	str	r3, [r4, #56]	; 0x38
   1345c:	str	r2, [r4, #60]	; 0x3c
   13460:	bl	118e8 <malloc@plt>
   13464:	str	r0, [r5, #28]
   13468:	bl	148b0 <init_token_cbra@@Base>
   1346c:	ldr	r3, [r4, #64]	; 0x40
   13470:	mov	r0, #4
   13474:	ldr	r2, [r4, #68]	; 0x44
   13478:	adds	r3, r3, #1
   1347c:	adc	r2, r2, #0
   13480:	str	r3, [r4, #64]	; 0x40
   13484:	str	r2, [r4, #68]	; 0x44
   13488:	bl	118e8 <malloc@plt>
   1348c:	str	r0, [r5, #32]
   13490:	bl	14934 <init_token_eof@@Base>
   13494:	ldr	r3, [r4, #72]	; 0x48
   13498:	mov	r0, sp
   1349c:	str	r5, [r6, #228]	; 0xe4
   134a0:	ldr	r2, [r4, #76]	; 0x4c
   134a4:	adds	r3, r3, #1
   134a8:	adc	r2, r2, #0
   134ac:	str	r3, [r4, #72]	; 0x48
   134b0:	mov	r3, #9
   134b4:	str	r2, [r4, #76]	; 0x4c
   134b8:	str	r3, [r6, #220]	; 0xdc
   134bc:	bl	15eec <read_if_statement@@Base>
   134c0:	ldr	r3, [r6, #204]	; 0xcc
   134c4:	cmp	r3, #9
   134c8:	beq	134f8 <if_statement_only@@Base+0x234>
   134cc:	ldr	r3, [r4, #80]	; 0x50
   134d0:	ldr	r2, [r4, #84]	; 0x54
   134d4:	ldr	r1, [pc, #176]	; 1358c <if_statement_only@@Base+0x2c8>
   134d8:	adds	r3, r3, #1
   134dc:	ldr	r0, [pc, #172]	; 13590 <if_statement_only@@Base+0x2cc>
   134e0:	str	r3, [r4, #80]	; 0x50
   134e4:	adc	r2, r2, #0
   134e8:	ldr	r3, [pc, #164]	; 13594 <if_statement_only@@Base+0x2d0>
   134ec:	str	r2, [r4, #84]	; 0x54
   134f0:	movw	r2, #283	; 0x11b
   134f4:	bl	119f0 <__assert_fail@plt>
   134f8:	cmp	r0, #0
   134fc:	bne	1352c <if_statement_only@@Base+0x268>
   13500:	ldr	r3, [r4, #88]	; 0x58
   13504:	ldr	r2, [r4, #92]	; 0x5c
   13508:	ldr	r1, [pc, #124]	; 1358c <if_statement_only@@Base+0x2c8>
   1350c:	adds	r3, r3, #1
   13510:	ldr	r0, [pc, #128]	; 13598 <if_statement_only@@Base+0x2d4>
   13514:	adc	r2, r2, #0
   13518:	str	r3, [r4, #88]	; 0x58
   1351c:	ldr	r3, [pc, #112]	; 13594 <if_statement_only@@Base+0x2d0>
   13520:	str	r2, [r4, #92]	; 0x5c
   13524:	mov	r2, #284	; 0x11c
   13528:	b	134f4 <if_statement_only@@Base+0x230>
   1352c:	ldr	r3, [r0]
   13530:	cmp	r3, #4
   13534:	beq	13564 <if_statement_only@@Base+0x2a0>
   13538:	ldr	r3, [r4, #104]	; 0x68
   1353c:	ldr	r2, [r4, #108]	; 0x6c
   13540:	ldr	r1, [pc, #68]	; 1358c <if_statement_only@@Base+0x2c8>
   13544:	adds	r3, r3, #1
   13548:	ldr	r0, [pc, #76]	; 1359c <if_statement_only@@Base+0x2d8>
   1354c:	adc	r2, r2, #0
   13550:	str	r3, [r4, #104]	; 0x68
   13554:	ldr	r3, [pc, #56]	; 13594 <if_statement_only@@Base+0x2d0>
   13558:	str	r2, [r4, #108]	; 0x6c
   1355c:	movw	r2, #285	; 0x11d
   13560:	b	134f4 <if_statement_only@@Base+0x230>
   13564:	ldr	r3, [r4, #96]	; 0x60
   13568:	ldr	r2, [r4, #100]	; 0x64
   1356c:	adds	r3, r3, #1
   13570:	adc	r2, r2, #0
   13574:	str	r3, [r4, #96]	; 0x60
   13578:	str	r2, [r4, #100]	; 0x64
   1357c:	add	sp, sp, #16
   13580:	pop	{r4, r5, r6, pc}
   13584:	strdeq	sl, [r2], -r8
   13588:	andeq	fp, r2, ip, ror #17
   1358c:	andeq	r8, r1, fp, asr sl
   13590:	andeq	r8, r1, r6, ror #23
   13594:	andeq	r8, r1, r7, asr #19
   13598:	andeq	r8, r1, r0, lsl #24
   1359c:	andeq	r8, r1, ip, lsl #24

000135a0 <if_else_statements@@Base>:
   135a0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   135a4:	add	r1, sp, #4
   135a8:	mov	r0, sp
   135ac:	ldr	r4, [pc, #764]	; 138b0 <if_else_statements@@Base+0x310>
   135b0:	ldr	r3, [r4]
   135b4:	ldr	r2, [r4, #4]
   135b8:	adds	r3, r3, #1
   135bc:	adc	r2, r2, #0
   135c0:	str	r3, [r4]
   135c4:	str	r2, [r4, #4]
   135c8:	bl	15594 <init_grammar@@Base>
   135cc:	ldr	r3, [r4, #8]
   135d0:	mov	r0, #3
   135d4:	ldr	r2, [r4, #12]
   135d8:	adds	r3, r3, #1
   135dc:	adc	r2, r2, #0
   135e0:	str	r3, [r4, #8]
   135e4:	str	r2, [r4, #12]
   135e8:	bl	118e8 <malloc@plt>
   135ec:	movw	r3, #15649	; 0x3d21
   135f0:	mov	r6, r0
   135f4:	strh	r3, [r0]
   135f8:	mov	r3, #0
   135fc:	strb	r3, [r0, #2]
   13600:	mov	r0, #44	; 0x2c
   13604:	bl	118e8 <malloc@plt>
   13608:	mov	r5, r0
   1360c:	mov	r0, #4
   13610:	bl	118e8 <malloc@plt>
   13614:	str	r0, [r5]
   13618:	bl	1482c <init_token_opar@@Base>
   1361c:	ldr	r3, [r4, #16]
   13620:	mov	r0, #8
   13624:	ldr	r2, [r4, #20]
   13628:	adds	r3, r3, #1
   1362c:	adc	r2, r2, #0
   13630:	str	r3, [r4, #16]
   13634:	str	r2, [r4, #20]
   13638:	bl	118e8 <malloc@plt>
   1363c:	mov	r1, #1
   13640:	str	r0, [r5, #4]
   13644:	bl	147cc <init_token_int_value@@Base>
   13648:	ldr	r3, [r4, #24]
   1364c:	mov	r0, #8
   13650:	ldr	r2, [r4, #28]
   13654:	adds	r3, r3, #1
   13658:	adc	r2, r2, #0
   1365c:	str	r3, [r4, #24]
   13660:	str	r2, [r4, #28]
   13664:	bl	118e8 <malloc@plt>
   13668:	mov	r1, #1
   1366c:	str	r0, [r5, #8]
   13670:	bl	147cc <init_token_int_value@@Base>
   13674:	ldr	r3, [r4, #32]
   13678:	mov	r0, #8
   1367c:	ldr	r2, [r4, #36]	; 0x24
   13680:	adds	r3, r3, #1
   13684:	adc	r2, r2, #0
   13688:	str	r3, [r4, #32]
   1368c:	str	r2, [r4, #36]	; 0x24
   13690:	bl	118e8 <malloc@plt>
   13694:	mov	r1, r6
   13698:	str	r0, [r5, #12]
   1369c:	bl	149b8 <init_token_boolean_op@@Base>
   136a0:	ldr	r3, [r4, #40]	; 0x28
   136a4:	mov	r0, #8
   136a8:	ldr	r2, [r4, #44]	; 0x2c
   136ac:	ldr	r6, [pc, #512]	; 138b4 <if_else_statements@@Base+0x314>
   136b0:	adds	r3, r3, #1
   136b4:	adc	r2, r2, #0
   136b8:	str	r3, [r4, #40]	; 0x28
   136bc:	str	r2, [r4, #44]	; 0x2c
   136c0:	bl	118e8 <malloc@plt>
   136c4:	mov	r1, #1
   136c8:	str	r0, [r5, #16]
   136cc:	bl	147cc <init_token_int_value@@Base>
   136d0:	ldr	r3, [r4, #48]	; 0x30
   136d4:	mov	r0, #4
   136d8:	ldr	r2, [r4, #52]	; 0x34
   136dc:	adds	r3, r3, #1
   136e0:	adc	r2, r2, #0
   136e4:	str	r3, [r4, #48]	; 0x30
   136e8:	str	r2, [r4, #52]	; 0x34
   136ec:	bl	118e8 <malloc@plt>
   136f0:	str	r0, [r5, #20]
   136f4:	bl	14858 <init_token_cpar@@Base>
   136f8:	ldr	r3, [r4, #56]	; 0x38
   136fc:	mov	r0, #4
   13700:	ldr	r2, [r4, #60]	; 0x3c
   13704:	adds	r3, r3, #1
   13708:	adc	r2, r2, #0
   1370c:	str	r3, [r4, #56]	; 0x38
   13710:	str	r2, [r4, #60]	; 0x3c
   13714:	bl	118e8 <malloc@plt>
   13718:	str	r0, [r5, #24]
   1371c:	bl	14884 <init_token_obra@@Base>
   13720:	ldr	r3, [r4, #64]	; 0x40
   13724:	mov	r0, #4
   13728:	ldr	r2, [r4, #68]	; 0x44
   1372c:	adds	r3, r3, #1
   13730:	adc	r2, r2, #0
   13734:	str	r3, [r4, #64]	; 0x40
   13738:	str	r2, [r4, #68]	; 0x44
   1373c:	bl	118e8 <malloc@plt>
   13740:	str	r0, [r5, #28]
   13744:	bl	148b0 <init_token_cbra@@Base>
   13748:	ldr	r3, [r4, #72]	; 0x48
   1374c:	mov	r0, #4
   13750:	ldr	r2, [r4, #76]	; 0x4c
   13754:	adds	r3, r3, #1
   13758:	adc	r2, r2, #0
   1375c:	str	r3, [r4, #72]	; 0x48
   13760:	str	r2, [r4, #76]	; 0x4c
   13764:	bl	118e8 <malloc@plt>
   13768:	str	r0, [r5, #32]
   1376c:	bl	1498c <init_token_else@@Base>
   13770:	ldr	r3, [r4, #80]	; 0x50
   13774:	mov	r0, #4
   13778:	ldr	r2, [r4, #84]	; 0x54
   1377c:	adds	r3, r3, #1
   13780:	adc	r2, r2, #0
   13784:	str	r3, [r4, #80]	; 0x50
   13788:	str	r2, [r4, #84]	; 0x54
   1378c:	bl	118e8 <malloc@plt>
   13790:	str	r0, [r5, #36]	; 0x24
   13794:	bl	14884 <init_token_obra@@Base>
   13798:	ldr	r3, [r4, #88]	; 0x58
   1379c:	mov	r0, #4
   137a0:	ldr	r2, [r4, #92]	; 0x5c
   137a4:	adds	r3, r3, #1
   137a8:	adc	r2, r2, #0
   137ac:	str	r3, [r4, #88]	; 0x58
   137b0:	str	r2, [r4, #92]	; 0x5c
   137b4:	bl	118e8 <malloc@plt>
   137b8:	str	r0, [r5, #40]	; 0x28
   137bc:	bl	148b0 <init_token_cbra@@Base>
   137c0:	ldr	r3, [r4, #96]	; 0x60
   137c4:	mov	r0, sp
   137c8:	str	r5, [r6, #228]	; 0xe4
   137cc:	ldr	r2, [r4, #100]	; 0x64
   137d0:	adds	r3, r3, #1
   137d4:	adc	r2, r2, #0
   137d8:	str	r3, [r4, #96]	; 0x60
   137dc:	mov	r3, #11
   137e0:	str	r2, [r4, #100]	; 0x64
   137e4:	str	r3, [r6, #220]	; 0xdc
   137e8:	bl	15eec <read_if_statement@@Base>
   137ec:	ldr	r3, [r6, #204]	; 0xcc
   137f0:	cmp	r3, #11
   137f4:	beq	13824 <if_else_statements@@Base+0x284>
   137f8:	ldr	r3, [r4, #104]	; 0x68
   137fc:	ldr	r2, [r4, #108]	; 0x6c
   13800:	ldr	r1, [pc, #176]	; 138b8 <if_else_statements@@Base+0x318>
   13804:	adds	r3, r3, #1
   13808:	ldr	r0, [pc, #172]	; 138bc <if_else_statements@@Base+0x31c>
   1380c:	str	r3, [r4, #104]	; 0x68
   13810:	adc	r2, r2, #0
   13814:	ldr	r3, [pc, #164]	; 138c0 <if_else_statements@@Base+0x320>
   13818:	str	r2, [r4, #108]	; 0x6c
   1381c:	mov	r2, #332	; 0x14c
   13820:	bl	119f0 <__assert_fail@plt>
   13824:	cmp	r0, #0
   13828:	bne	13858 <if_else_statements@@Base+0x2b8>
   1382c:	ldr	r3, [r4, #112]	; 0x70
   13830:	ldr	r2, [r4, #116]	; 0x74
   13834:	ldr	r1, [pc, #124]	; 138b8 <if_else_statements@@Base+0x318>
   13838:	adds	r3, r3, #1
   1383c:	ldr	r0, [pc, #128]	; 138c4 <if_else_statements@@Base+0x324>
   13840:	adc	r2, r2, #0
   13844:	str	r3, [r4, #112]	; 0x70
   13848:	ldr	r3, [pc, #112]	; 138c0 <if_else_statements@@Base+0x320>
   1384c:	str	r2, [r4, #116]	; 0x74
   13850:	movw	r2, #333	; 0x14d
   13854:	b	13820 <if_else_statements@@Base+0x280>
   13858:	ldr	r3, [r0]
   1385c:	cmp	r3, #4
   13860:	beq	13890 <if_else_statements@@Base+0x2f0>
   13864:	ldr	r3, [r4, #128]	; 0x80
   13868:	ldr	r2, [r4, #132]	; 0x84
   1386c:	ldr	r1, [pc, #68]	; 138b8 <if_else_statements@@Base+0x318>
   13870:	adds	r3, r3, #1
   13874:	ldr	r0, [pc, #76]	; 138c8 <if_else_statements@@Base+0x328>
   13878:	adc	r2, r2, #0
   1387c:	str	r3, [r4, #128]	; 0x80
   13880:	ldr	r3, [pc, #56]	; 138c0 <if_else_statements@@Base+0x320>
   13884:	str	r2, [r4, #132]	; 0x84
   13888:	movw	r2, #334	; 0x14e
   1388c:	b	13820 <if_else_statements@@Base+0x280>
   13890:	ldr	r3, [r4, #120]	; 0x78
   13894:	ldr	r2, [r4, #124]	; 0x7c
   13898:	adds	r3, r3, #1
   1389c:	adc	r2, r2, #0
   138a0:	str	r3, [r4, #120]	; 0x78
   138a4:	str	r2, [r4, #124]	; 0x7c
   138a8:	add	sp, sp, #16
   138ac:	pop	{r4, r5, r6, pc}
   138b0:	andeq	sl, r2, r8, ror #24
   138b4:	andeq	fp, r2, ip, ror #17
   138b8:	andeq	r8, r1, fp, asr sl
   138bc:	andeq	r8, r1, lr, lsl ip
   138c0:	ldrdeq	r8, [r1], -r9
   138c4:	andeq	r8, r1, r0, lsl #24
   138c8:	andeq	r8, r1, ip, lsl #24

000138cc <body_with_two_returns@@Base>:
   138cc:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   138d0:	add	r1, sp, #4
   138d4:	mov	r0, sp
   138d8:	ldr	r4, [pc, #724]	; 13bb4 <body_with_two_returns@@Base+0x2e8>
   138dc:	ldr	r6, [pc, #724]	; 13bb8 <body_with_two_returns@@Base+0x2ec>
   138e0:	ldr	r3, [r4, #-8]
   138e4:	ldr	r2, [r4, #-4]
   138e8:	adds	r3, r3, #1
   138ec:	adc	r2, r2, #0
   138f0:	str	r3, [r4, #-8]
   138f4:	str	r2, [r4, #-4]
   138f8:	bl	15594 <init_grammar@@Base>
   138fc:	ldr	r3, [r4]
   13900:	mov	r0, #32
   13904:	ldr	r2, [r4, #4]
   13908:	adds	r3, r3, #1
   1390c:	adc	r2, r2, #0
   13910:	str	r3, [r4]
   13914:	str	r2, [r4, #4]
   13918:	bl	118e8 <malloc@plt>
   1391c:	mov	r5, r0
   13920:	mov	r0, #4
   13924:	bl	118e8 <malloc@plt>
   13928:	str	r0, [r5]
   1392c:	bl	14884 <init_token_obra@@Base>
   13930:	ldr	r3, [r4, #8]
   13934:	mov	r0, #4
   13938:	ldr	r2, [r4, #12]
   1393c:	adds	r3, r3, #1
   13940:	adc	r2, r2, #0
   13944:	str	r3, [r4, #8]
   13948:	str	r2, [r4, #12]
   1394c:	bl	118e8 <malloc@plt>
   13950:	str	r0, [r5, #4]
   13954:	bl	148dc <init_token_return@@Base>
   13958:	ldr	r3, [r4, #16]
   1395c:	mov	r0, #8
   13960:	ldr	r2, [r4, #20]
   13964:	adds	r3, r3, #1
   13968:	adc	r2, r2, #0
   1396c:	str	r3, [r4, #16]
   13970:	str	r2, [r4, #20]
   13974:	bl	118e8 <malloc@plt>
   13978:	mov	r1, #1
   1397c:	str	r0, [r5, #8]
   13980:	bl	147cc <init_token_int_value@@Base>
   13984:	ldr	r3, [r4, #24]
   13988:	mov	r0, #4
   1398c:	ldr	r2, [r4, #28]
   13990:	adds	r3, r3, #1
   13994:	adc	r2, r2, #0
   13998:	str	r3, [r4, #24]
   1399c:	str	r2, [r4, #28]
   139a0:	bl	118e8 <malloc@plt>
   139a4:	str	r0, [r5, #12]
   139a8:	bl	14908 <init_token_semicolon@@Base>
   139ac:	ldr	r3, [r4, #32]
   139b0:	mov	r0, #4
   139b4:	ldr	r2, [r4, #36]	; 0x24
   139b8:	adds	r3, r3, #1
   139bc:	adc	r2, r2, #0
   139c0:	str	r3, [r4, #32]
   139c4:	str	r2, [r4, #36]	; 0x24
   139c8:	bl	118e8 <malloc@plt>
   139cc:	str	r0, [r5, #16]
   139d0:	bl	148dc <init_token_return@@Base>
   139d4:	ldr	r3, [r4, #40]	; 0x28
   139d8:	mov	r0, #8
   139dc:	ldr	r2, [r4, #44]	; 0x2c
   139e0:	adds	r3, r3, #1
   139e4:	adc	r2, r2, #0
   139e8:	str	r3, [r4, #40]	; 0x28
   139ec:	str	r2, [r4, #44]	; 0x2c
   139f0:	bl	118e8 <malloc@plt>
   139f4:	mov	r1, #1
   139f8:	str	r0, [r5, #20]
   139fc:	bl	147cc <init_token_int_value@@Base>
   13a00:	ldr	r3, [r4, #48]	; 0x30
   13a04:	mov	r0, #4
   13a08:	ldr	r2, [r4, #52]	; 0x34
   13a0c:	adds	r3, r3, #1
   13a10:	adc	r2, r2, #0
   13a14:	str	r3, [r4, #48]	; 0x30
   13a18:	str	r2, [r4, #52]	; 0x34
   13a1c:	bl	118e8 <malloc@plt>
   13a20:	str	r0, [r5, #24]
   13a24:	bl	14908 <init_token_semicolon@@Base>
   13a28:	ldr	r3, [r4, #56]	; 0x38
   13a2c:	mov	r0, #4
   13a30:	ldr	r2, [r4, #60]	; 0x3c
   13a34:	adds	r3, r3, #1
   13a38:	adc	r2, r2, #0
   13a3c:	str	r3, [r4, #56]	; 0x38
   13a40:	str	r2, [r4, #60]	; 0x3c
   13a44:	bl	118e8 <malloc@plt>
   13a48:	str	r0, [r5, #28]
   13a4c:	bl	148b0 <init_token_cbra@@Base>
   13a50:	ldr	r3, [r4, #64]	; 0x40
   13a54:	mov	r0, sp
   13a58:	str	r5, [r6, #228]	; 0xe4
   13a5c:	ldr	r2, [r4, #68]	; 0x44
   13a60:	adds	r3, r3, #1
   13a64:	adc	r2, r2, #0
   13a68:	str	r3, [r4, #64]	; 0x40
   13a6c:	mov	r3, #8
   13a70:	str	r2, [r4, #68]	; 0x44
   13a74:	str	r3, [r6, #220]	; 0xdc
   13a78:	bl	160b4 <read_body@@Base>
   13a7c:	ldr	r3, [r6, #204]	; 0xcc
   13a80:	cmp	r3, #8
   13a84:	beq	13ab4 <body_with_two_returns@@Base+0x1e8>
   13a88:	ldr	r3, [r4, #72]	; 0x48
   13a8c:	ldr	r2, [r4, #76]	; 0x4c
   13a90:	ldr	r1, [pc, #292]	; 13bbc <body_with_two_returns@@Base+0x2f0>
   13a94:	adds	r3, r3, #1
   13a98:	ldr	r0, [pc, #288]	; 13bc0 <body_with_two_returns@@Base+0x2f4>
   13a9c:	str	r3, [r4, #72]	; 0x48
   13aa0:	adc	r2, r2, #0
   13aa4:	ldr	r3, [pc, #280]	; 13bc4 <body_with_two_returns@@Base+0x2f8>
   13aa8:	str	r2, [r4, #76]	; 0x4c
   13aac:	movw	r2, #371	; 0x173
   13ab0:	bl	119f0 <__assert_fail@plt>
   13ab4:	cmp	r0, #0
   13ab8:	bne	13ae8 <body_with_two_returns@@Base+0x21c>
   13abc:	ldr	r3, [r4, #80]	; 0x50
   13ac0:	ldr	r2, [r4, #84]	; 0x54
   13ac4:	ldr	r1, [pc, #240]	; 13bbc <body_with_two_returns@@Base+0x2f0>
   13ac8:	adds	r3, r3, #1
   13acc:	ldr	r0, [pc, #244]	; 13bc8 <body_with_two_returns@@Base+0x2fc>
   13ad0:	adc	r2, r2, #0
   13ad4:	str	r3, [r4, #80]	; 0x50
   13ad8:	ldr	r3, [pc, #228]	; 13bc4 <body_with_two_returns@@Base+0x2f8>
   13adc:	str	r2, [r4, #84]	; 0x54
   13ae0:	mov	r2, #372	; 0x174
   13ae4:	b	13ab0 <body_with_two_returns@@Base+0x1e4>
   13ae8:	ldr	r3, [r0]
   13aec:	cmp	r3, #3
   13af0:	beq	13b20 <body_with_two_returns@@Base+0x254>
   13af4:	ldr	r3, [r4, #88]	; 0x58
   13af8:	ldr	r2, [r4, #92]	; 0x5c
   13afc:	ldr	r1, [pc, #184]	; 13bbc <body_with_two_returns@@Base+0x2f0>
   13b00:	adds	r3, r3, #1
   13b04:	ldr	r0, [pc, #192]	; 13bcc <body_with_two_returns@@Base+0x300>
   13b08:	adc	r2, r2, #0
   13b0c:	str	r3, [r4, #88]	; 0x58
   13b10:	ldr	r3, [pc, #172]	; 13bc4 <body_with_two_returns@@Base+0x2f8>
   13b14:	str	r2, [r4, #92]	; 0x5c
   13b18:	movw	r2, #373	; 0x175
   13b1c:	b	13ab0 <body_with_two_returns@@Base+0x1e4>
   13b20:	ldr	r3, [r0, #4]
   13b24:	ldr	r2, [r3]
   13b28:	cmp	r2, #3
   13b2c:	beq	13b5c <body_with_two_returns@@Base+0x290>
   13b30:	ldr	r3, [r4, #96]	; 0x60
   13b34:	ldr	r2, [r4, #100]	; 0x64
   13b38:	ldr	r1, [pc, #124]	; 13bbc <body_with_two_returns@@Base+0x2f0>
   13b3c:	adds	r3, r3, #1
   13b40:	ldr	r0, [pc, #136]	; 13bd0 <body_with_two_returns@@Base+0x304>
   13b44:	adc	r2, r2, #0
   13b48:	str	r3, [r4, #96]	; 0x60
   13b4c:	ldr	r3, [pc, #112]	; 13bc4 <body_with_two_returns@@Base+0x2f8>
   13b50:	str	r2, [r4, #100]	; 0x64
   13b54:	movw	r2, #374	; 0x176
   13b58:	b	13ab0 <body_with_two_returns@@Base+0x1e4>
   13b5c:	ldr	r3, [r3, #4]
   13b60:	cmp	r3, #0
   13b64:	beq	13b94 <body_with_two_returns@@Base+0x2c8>
   13b68:	ldr	r3, [r4, #112]	; 0x70
   13b6c:	ldr	r2, [r4, #116]	; 0x74
   13b70:	ldr	r1, [pc, #68]	; 13bbc <body_with_two_returns@@Base+0x2f0>
   13b74:	adds	r3, r3, #1
   13b78:	ldr	r0, [pc, #84]	; 13bd4 <body_with_two_returns@@Base+0x308>
   13b7c:	adc	r2, r2, #0
   13b80:	str	r3, [r4, #112]	; 0x70
   13b84:	ldr	r3, [pc, #56]	; 13bc4 <body_with_two_returns@@Base+0x2f8>
   13b88:	str	r2, [r4, #116]	; 0x74
   13b8c:	movw	r2, #375	; 0x177
   13b90:	b	13ab0 <body_with_two_returns@@Base+0x1e4>
   13b94:	ldr	r3, [r4, #104]	; 0x68
   13b98:	ldr	r2, [r4, #108]	; 0x6c
   13b9c:	adds	r3, r3, #1
   13ba0:	adc	r2, r2, #0
   13ba4:	str	r3, [r4, #104]	; 0x68
   13ba8:	str	r2, [r4, #108]	; 0x6c
   13bac:	add	sp, sp, #16
   13bb0:	pop	{r4, r5, r6, pc}
   13bb4:	strdeq	sl, [r2], -r8
   13bb8:	andeq	fp, r2, ip, ror #17
   13bbc:	andeq	r8, r1, fp, asr sl
   13bc0:	andeq	r8, r1, r9, lsr ip
   13bc4:	andeq	r8, r1, ip, ror #19
   13bc8:	andeq	r8, r1, r0, lsl #24
   13bcc:	andeq	r8, r1, r3, asr ip
   13bd0:	andeq	r8, r1, r9, ror #24
   13bd4:	andeq	r8, r1, r5, lsl #25

00013bd8 <body_with_one_return@@Base>:
   13bd8:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13bdc:	add	r1, sp, #4
   13be0:	mov	r0, sp
   13be4:	ldr	r4, [pc, #540]	; 13e08 <body_with_one_return@@Base+0x230>
   13be8:	ldr	r6, [pc, #540]	; 13e0c <body_with_one_return@@Base+0x234>
   13bec:	ldr	r3, [r4, #-8]
   13bf0:	ldr	r2, [r4, #-4]
   13bf4:	adds	r3, r3, #1
   13bf8:	adc	r2, r2, #0
   13bfc:	str	r3, [r4, #-8]
   13c00:	str	r2, [r4, #-4]
   13c04:	bl	15594 <init_grammar@@Base>
   13c08:	ldr	r3, [r4]
   13c0c:	mov	r0, #20
   13c10:	ldr	r2, [r4, #4]
   13c14:	adds	r3, r3, #1
   13c18:	adc	r2, r2, #0
   13c1c:	str	r3, [r4]
   13c20:	str	r2, [r4, #4]
   13c24:	bl	118e8 <malloc@plt>
   13c28:	mov	r5, r0
   13c2c:	mov	r0, #4
   13c30:	bl	118e8 <malloc@plt>
   13c34:	str	r0, [r5]
   13c38:	bl	14884 <init_token_obra@@Base>
   13c3c:	ldr	r3, [r4, #8]
   13c40:	mov	r0, #4
   13c44:	ldr	r2, [r4, #12]
   13c48:	adds	r3, r3, #1
   13c4c:	adc	r2, r2, #0
   13c50:	str	r3, [r4, #8]
   13c54:	str	r2, [r4, #12]
   13c58:	bl	118e8 <malloc@plt>
   13c5c:	str	r0, [r5, #4]
   13c60:	bl	148dc <init_token_return@@Base>
   13c64:	ldr	r3, [r4, #16]
   13c68:	mov	r0, #8
   13c6c:	ldr	r2, [r4, #20]
   13c70:	adds	r3, r3, #1
   13c74:	adc	r2, r2, #0
   13c78:	str	r3, [r4, #16]
   13c7c:	str	r2, [r4, #20]
   13c80:	bl	118e8 <malloc@plt>
   13c84:	mov	r1, #1
   13c88:	str	r0, [r5, #8]
   13c8c:	bl	147cc <init_token_int_value@@Base>
   13c90:	ldr	r3, [r4, #24]
   13c94:	mov	r0, #4
   13c98:	ldr	r2, [r4, #28]
   13c9c:	adds	r3, r3, #1
   13ca0:	adc	r2, r2, #0
   13ca4:	str	r3, [r4, #24]
   13ca8:	str	r2, [r4, #28]
   13cac:	bl	118e8 <malloc@plt>
   13cb0:	str	r0, [r5, #12]
   13cb4:	bl	14908 <init_token_semicolon@@Base>
   13cb8:	ldr	r3, [r4, #32]
   13cbc:	mov	r0, #4
   13cc0:	ldr	r2, [r4, #36]	; 0x24
   13cc4:	adds	r3, r3, #1
   13cc8:	adc	r2, r2, #0
   13ccc:	str	r3, [r4, #32]
   13cd0:	str	r2, [r4, #36]	; 0x24
   13cd4:	bl	118e8 <malloc@plt>
   13cd8:	str	r0, [r5, #16]
   13cdc:	bl	148b0 <init_token_cbra@@Base>
   13ce0:	ldr	r3, [r4, #40]	; 0x28
   13ce4:	mov	r0, sp
   13ce8:	str	r5, [r6, #228]	; 0xe4
   13cec:	ldr	r2, [r4, #44]	; 0x2c
   13cf0:	adds	r3, r3, #1
   13cf4:	adc	r2, r2, #0
   13cf8:	str	r3, [r4, #40]	; 0x28
   13cfc:	mov	r3, #5
   13d00:	str	r2, [r4, #44]	; 0x2c
   13d04:	str	r3, [r6, #220]	; 0xdc
   13d08:	bl	160b4 <read_body@@Base>
   13d0c:	ldr	r3, [r6, #204]	; 0xcc
   13d10:	cmp	r3, #5
   13d14:	beq	13d44 <body_with_one_return@@Base+0x16c>
   13d18:	ldr	r3, [r4, #48]	; 0x30
   13d1c:	ldr	r2, [r4, #52]	; 0x34
   13d20:	ldr	r1, [pc, #232]	; 13e10 <body_with_one_return@@Base+0x238>
   13d24:	adds	r3, r3, #1
   13d28:	ldr	r0, [pc, #228]	; 13e14 <body_with_one_return@@Base+0x23c>
   13d2c:	str	r3, [r4, #48]	; 0x30
   13d30:	adc	r2, r2, #0
   13d34:	ldr	r3, [pc, #220]	; 13e18 <body_with_one_return@@Base+0x240>
   13d38:	str	r2, [r4, #52]	; 0x34
   13d3c:	movw	r2, #406	; 0x196
   13d40:	bl	119f0 <__assert_fail@plt>
   13d44:	cmp	r0, #0
   13d48:	bne	13d78 <body_with_one_return@@Base+0x1a0>
   13d4c:	ldr	r3, [r4, #56]	; 0x38
   13d50:	ldr	r2, [r4, #60]	; 0x3c
   13d54:	ldr	r1, [pc, #180]	; 13e10 <body_with_one_return@@Base+0x238>
   13d58:	adds	r3, r3, #1
   13d5c:	ldr	r0, [pc, #184]	; 13e1c <body_with_one_return@@Base+0x244>
   13d60:	adc	r2, r2, #0
   13d64:	str	r3, [r4, #56]	; 0x38
   13d68:	ldr	r3, [pc, #168]	; 13e18 <body_with_one_return@@Base+0x240>
   13d6c:	str	r2, [r4, #60]	; 0x3c
   13d70:	movw	r2, #407	; 0x197
   13d74:	b	13d40 <body_with_one_return@@Base+0x168>
   13d78:	ldr	r3, [r0]
   13d7c:	cmp	r3, #3
   13d80:	beq	13db0 <body_with_one_return@@Base+0x1d8>
   13d84:	ldr	r3, [r4, #64]	; 0x40
   13d88:	ldr	r2, [r4, #68]	; 0x44
   13d8c:	ldr	r1, [pc, #124]	; 13e10 <body_with_one_return@@Base+0x238>
   13d90:	adds	r3, r3, #1
   13d94:	ldr	r0, [pc, #132]	; 13e20 <body_with_one_return@@Base+0x248>
   13d98:	adc	r2, r2, #0
   13d9c:	str	r3, [r4, #64]	; 0x40
   13da0:	ldr	r3, [pc, #112]	; 13e18 <body_with_one_return@@Base+0x240>
   13da4:	str	r2, [r4, #68]	; 0x44
   13da8:	mov	r2, #408	; 0x198
   13dac:	b	13d40 <body_with_one_return@@Base+0x168>
   13db0:	ldr	r3, [r0, #4]
   13db4:	cmp	r3, #0
   13db8:	beq	13de8 <body_with_one_return@@Base+0x210>
   13dbc:	ldr	r3, [r4, #80]	; 0x50
   13dc0:	ldr	r2, [r4, #84]	; 0x54
   13dc4:	ldr	r1, [pc, #68]	; 13e10 <body_with_one_return@@Base+0x238>
   13dc8:	adds	r3, r3, #1
   13dcc:	ldr	r0, [pc, #80]	; 13e24 <body_with_one_return@@Base+0x24c>
   13dd0:	adc	r2, r2, #0
   13dd4:	str	r3, [r4, #80]	; 0x50
   13dd8:	ldr	r3, [pc, #56]	; 13e18 <body_with_one_return@@Base+0x240>
   13ddc:	str	r2, [r4, #84]	; 0x54
   13de0:	movw	r2, #409	; 0x199
   13de4:	b	13d40 <body_with_one_return@@Base+0x168>
   13de8:	ldr	r3, [r4, #72]	; 0x48
   13dec:	ldr	r2, [r4, #76]	; 0x4c
   13df0:	adds	r3, r3, #1
   13df4:	adc	r2, r2, #0
   13df8:	str	r3, [r4, #72]	; 0x48
   13dfc:	str	r2, [r4, #76]	; 0x4c
   13e00:	add	sp, sp, #16
   13e04:	pop	{r4, r5, r6, pc}
   13e08:	andeq	sl, r2, r8, ror sp
   13e0c:	andeq	fp, r2, ip, ror #17
   13e10:	andeq	r8, r1, fp, asr sl
   13e14:	ldrdeq	r8, [r1], -pc	; <UNPREDICTABLE>
   13e18:	andeq	r8, r1, r2, lsl #20
   13e1c:	andeq	r8, r1, r0, lsl #24
   13e20:	andeq	r8, r1, r3, asr ip
   13e24:	muleq	r1, sp, ip

00013e28 <if_statement_inside_if_statement@@Base>:
   13e28:	push	{r4, r5, r6, r7, lr}
   13e2c:	sub	sp, sp, #20
   13e30:	add	r1, sp, #4
   13e34:	mov	r0, sp
   13e38:	ldr	r4, [pc, #1120]	; 142a0 <if_statement_inside_if_statement@@Base+0x478>
   13e3c:	ldr	r3, [r4, #-8]
   13e40:	ldr	r2, [r4, #-4]
   13e44:	adds	r3, r3, #1
   13e48:	adc	r2, r2, #0
   13e4c:	str	r3, [r4, #-8]
   13e50:	str	r2, [r4, #-4]
   13e54:	bl	15594 <init_grammar@@Base>
   13e58:	ldr	r3, [r4]
   13e5c:	mov	r0, #3
   13e60:	ldr	r2, [r4, #4]
   13e64:	adds	r3, r3, #1
   13e68:	adc	r2, r2, #0
   13e6c:	str	r3, [r4]
   13e70:	str	r2, [r4, #4]
   13e74:	bl	118e8 <malloc@plt>
   13e78:	mov	r7, r0
   13e7c:	mov	r0, #3
   13e80:	bl	118e8 <malloc@plt>
   13e84:	movw	r2, #15649	; 0x3d21
   13e88:	mov	r3, #0
   13e8c:	mov	r6, r0
   13e90:	strh	r2, [r0]
   13e94:	strb	r3, [r0, #2]
   13e98:	mov	r0, #76	; 0x4c
   13e9c:	strh	r2, [r7]
   13ea0:	strb	r3, [r7, #2]
   13ea4:	bl	118e8 <malloc@plt>
   13ea8:	mov	r5, r0
   13eac:	mov	r0, #4
   13eb0:	bl	118e8 <malloc@plt>
   13eb4:	str	r0, [r5]
   13eb8:	bl	1482c <init_token_opar@@Base>
   13ebc:	ldr	r3, [r4, #8]
   13ec0:	mov	r0, #8
   13ec4:	ldr	r2, [r4, #12]
   13ec8:	adds	r3, r3, #1
   13ecc:	adc	r2, r2, #0
   13ed0:	str	r3, [r4, #8]
   13ed4:	str	r2, [r4, #12]
   13ed8:	bl	118e8 <malloc@plt>
   13edc:	mov	r1, #1
   13ee0:	str	r0, [r5, #4]
   13ee4:	bl	147cc <init_token_int_value@@Base>
   13ee8:	ldr	r3, [r4, #16]
   13eec:	mov	r0, #8
   13ef0:	ldr	r2, [r4, #20]
   13ef4:	adds	r3, r3, #1
   13ef8:	adc	r2, r2, #0
   13efc:	str	r3, [r4, #16]
   13f00:	str	r2, [r4, #20]
   13f04:	bl	118e8 <malloc@plt>
   13f08:	mov	r1, #1
   13f0c:	str	r0, [r5, #8]
   13f10:	bl	147cc <init_token_int_value@@Base>
   13f14:	ldr	r3, [r4, #24]
   13f18:	mov	r0, #8
   13f1c:	ldr	r2, [r4, #28]
   13f20:	adds	r3, r3, #1
   13f24:	adc	r2, r2, #0
   13f28:	str	r3, [r4, #24]
   13f2c:	str	r2, [r4, #28]
   13f30:	bl	118e8 <malloc@plt>
   13f34:	mov	r1, r7
   13f38:	str	r0, [r5, #12]
   13f3c:	bl	149b8 <init_token_boolean_op@@Base>
   13f40:	ldr	r3, [r4, #32]
   13f44:	mov	r0, #8
   13f48:	ldr	r2, [r4, #36]	; 0x24
   13f4c:	adds	r3, r3, #1
   13f50:	adc	r2, r2, #0
   13f54:	str	r3, [r4, #32]
   13f58:	str	r2, [r4, #36]	; 0x24
   13f5c:	bl	118e8 <malloc@plt>
   13f60:	mov	r1, #1
   13f64:	str	r0, [r5, #16]
   13f68:	bl	147cc <init_token_int_value@@Base>
   13f6c:	ldr	r3, [r4, #40]	; 0x28
   13f70:	mov	r0, #4
   13f74:	ldr	r2, [r4, #44]	; 0x2c
   13f78:	adds	r3, r3, #1
   13f7c:	adc	r2, r2, #0
   13f80:	str	r3, [r4, #40]	; 0x28
   13f84:	str	r2, [r4, #44]	; 0x2c
   13f88:	bl	118e8 <malloc@plt>
   13f8c:	str	r0, [r5, #20]
   13f90:	bl	14858 <init_token_cpar@@Base>
   13f94:	ldr	r3, [r4, #48]	; 0x30
   13f98:	mov	r0, #4
   13f9c:	ldr	r2, [r4, #52]	; 0x34
   13fa0:	adds	r3, r3, #1
   13fa4:	adc	r2, r2, #0
   13fa8:	str	r3, [r4, #48]	; 0x30
   13fac:	str	r2, [r4, #52]	; 0x34
   13fb0:	bl	118e8 <malloc@plt>
   13fb4:	str	r0, [r5, #24]
   13fb8:	bl	14884 <init_token_obra@@Base>
   13fbc:	ldr	r3, [r4, #56]	; 0x38
   13fc0:	mov	r0, #4
   13fc4:	ldr	r2, [r4, #60]	; 0x3c
   13fc8:	adds	r3, r3, #1
   13fcc:	adc	r2, r2, #0
   13fd0:	str	r3, [r4, #56]	; 0x38
   13fd4:	str	r2, [r4, #60]	; 0x3c
   13fd8:	bl	118e8 <malloc@plt>
   13fdc:	str	r0, [r5, #28]
   13fe0:	bl	14960 <init_token_if@@Base>
   13fe4:	ldr	r3, [r4, #64]	; 0x40
   13fe8:	mov	r0, #4
   13fec:	ldr	r2, [r4, #68]	; 0x44
   13ff0:	adds	r3, r3, #1
   13ff4:	adc	r2, r2, #0
   13ff8:	str	r3, [r4, #64]	; 0x40
   13ffc:	str	r2, [r4, #68]	; 0x44
   14000:	bl	118e8 <malloc@plt>
   14004:	str	r0, [r5, #32]
   14008:	bl	1482c <init_token_opar@@Base>
   1400c:	ldr	r3, [r4, #72]	; 0x48
   14010:	mov	r0, #8
   14014:	ldr	r2, [r4, #76]	; 0x4c
   14018:	adds	r3, r3, #1
   1401c:	adc	r2, r2, #0
   14020:	str	r3, [r4, #72]	; 0x48
   14024:	str	r2, [r4, #76]	; 0x4c
   14028:	bl	118e8 <malloc@plt>
   1402c:	mov	r1, #1
   14030:	str	r0, [r5, #36]	; 0x24
   14034:	bl	147cc <init_token_int_value@@Base>
   14038:	ldr	r3, [r4, #80]	; 0x50
   1403c:	mov	r0, #8
   14040:	ldr	r2, [r4, #84]	; 0x54
   14044:	adds	r3, r3, #1
   14048:	adc	r2, r2, #0
   1404c:	str	r3, [r4, #80]	; 0x50
   14050:	str	r2, [r4, #84]	; 0x54
   14054:	bl	118e8 <malloc@plt>
   14058:	mov	r1, #1
   1405c:	str	r0, [r5, #40]	; 0x28
   14060:	bl	147cc <init_token_int_value@@Base>
   14064:	ldr	r3, [r4, #88]	; 0x58
   14068:	mov	r0, #8
   1406c:	ldr	r2, [r4, #92]	; 0x5c
   14070:	adds	r3, r3, #1
   14074:	adc	r2, r2, #0
   14078:	str	r3, [r4, #88]	; 0x58
   1407c:	str	r2, [r4, #92]	; 0x5c
   14080:	bl	118e8 <malloc@plt>
   14084:	mov	r1, r6
   14088:	str	r0, [r5, #44]	; 0x2c
   1408c:	bl	149b8 <init_token_boolean_op@@Base>
   14090:	ldr	r3, [r4, #96]	; 0x60
   14094:	mov	r0, #8
   14098:	ldr	r2, [r4, #100]	; 0x64
   1409c:	ldr	r6, [pc, #512]	; 142a4 <if_statement_inside_if_statement@@Base+0x47c>
   140a0:	adds	r3, r3, #1
   140a4:	adc	r2, r2, #0
   140a8:	str	r3, [r4, #96]	; 0x60
   140ac:	str	r2, [r4, #100]	; 0x64
   140b0:	bl	118e8 <malloc@plt>
   140b4:	mov	r1, #1
   140b8:	str	r0, [r5, #48]	; 0x30
   140bc:	bl	147cc <init_token_int_value@@Base>
   140c0:	ldr	r3, [r4, #104]	; 0x68
   140c4:	mov	r0, #4
   140c8:	ldr	r2, [r4, #108]	; 0x6c
   140cc:	adds	r3, r3, #1
   140d0:	adc	r2, r2, #0
   140d4:	str	r3, [r4, #104]	; 0x68
   140d8:	str	r2, [r4, #108]	; 0x6c
   140dc:	bl	118e8 <malloc@plt>
   140e0:	str	r0, [r5, #52]	; 0x34
   140e4:	bl	14858 <init_token_cpar@@Base>
   140e8:	ldr	r3, [r4, #112]	; 0x70
   140ec:	mov	r0, #4
   140f0:	ldr	r2, [r4, #116]	; 0x74
   140f4:	adds	r3, r3, #1
   140f8:	adc	r2, r2, #0
   140fc:	str	r3, [r4, #112]	; 0x70
   14100:	str	r2, [r4, #116]	; 0x74
   14104:	bl	118e8 <malloc@plt>
   14108:	str	r0, [r5, #56]	; 0x38
   1410c:	bl	14884 <init_token_obra@@Base>
   14110:	ldr	r3, [r4, #120]	; 0x78
   14114:	mov	r0, #4
   14118:	ldr	r2, [r4, #124]	; 0x7c
   1411c:	adds	r3, r3, #1
   14120:	adc	r2, r2, #0
   14124:	str	r3, [r4, #120]	; 0x78
   14128:	str	r2, [r4, #124]	; 0x7c
   1412c:	bl	118e8 <malloc@plt>
   14130:	str	r0, [r5, #60]	; 0x3c
   14134:	bl	148b0 <init_token_cbra@@Base>
   14138:	ldr	r3, [r4, #128]	; 0x80
   1413c:	mov	r0, #4
   14140:	ldr	r2, [r4, #132]	; 0x84
   14144:	adds	r3, r3, #1
   14148:	adc	r2, r2, #0
   1414c:	str	r3, [r4, #128]	; 0x80
   14150:	str	r2, [r4, #132]	; 0x84
   14154:	bl	118e8 <malloc@plt>
   14158:	str	r0, [r5, #64]	; 0x40
   1415c:	bl	148b0 <init_token_cbra@@Base>
   14160:	ldr	r3, [r4, #136]	; 0x88
   14164:	mov	r0, #4
   14168:	ldr	r2, [r4, #140]	; 0x8c
   1416c:	adds	r3, r3, #1
   14170:	adc	r2, r2, #0
   14174:	str	r3, [r4, #136]	; 0x88
   14178:	str	r2, [r4, #140]	; 0x8c
   1417c:	bl	118e8 <malloc@plt>
   14180:	str	r0, [r5, #68]	; 0x44
   14184:	bl	148b0 <init_token_cbra@@Base>
   14188:	ldr	r3, [r4, #144]	; 0x90
   1418c:	mov	r0, #4
   14190:	ldr	r2, [r4, #148]	; 0x94
   14194:	adds	r3, r3, #1
   14198:	adc	r2, r2, #0
   1419c:	str	r3, [r4, #144]	; 0x90
   141a0:	str	r2, [r4, #148]	; 0x94
   141a4:	bl	118e8 <malloc@plt>
   141a8:	str	r0, [r5, #72]	; 0x48
   141ac:	bl	14934 <init_token_eof@@Base>
   141b0:	ldr	r3, [r4, #152]	; 0x98
   141b4:	mov	r0, sp
   141b8:	str	r5, [r6, #228]	; 0xe4
   141bc:	ldr	r2, [r4, #156]	; 0x9c
   141c0:	adds	r3, r3, #1
   141c4:	adc	r2, r2, #0
   141c8:	str	r3, [r4, #152]	; 0x98
   141cc:	mov	r3, #19
   141d0:	str	r2, [r4, #156]	; 0x9c
   141d4:	str	r3, [r6, #220]	; 0xdc
   141d8:	bl	15eec <read_if_statement@@Base>
   141dc:	ldr	r3, [r6, #204]	; 0xcc
   141e0:	cmp	r3, #19
   141e4:	beq	14214 <if_statement_inside_if_statement@@Base+0x3ec>
   141e8:	ldr	r3, [r4, #160]	; 0xa0
   141ec:	ldr	r2, [r4, #164]	; 0xa4
   141f0:	ldr	r1, [pc, #176]	; 142a8 <if_statement_inside_if_statement@@Base+0x480>
   141f4:	adds	r3, r3, #1
   141f8:	ldr	r0, [pc, #172]	; 142ac <if_statement_inside_if_statement@@Base+0x484>
   141fc:	str	r3, [r4, #160]	; 0xa0
   14200:	adc	r2, r2, #0
   14204:	ldr	r3, [pc, #164]	; 142b0 <if_statement_inside_if_statement@@Base+0x488>
   14208:	str	r2, [r4, #164]	; 0xa4
   1420c:	mov	r2, #480	; 0x1e0
   14210:	bl	119f0 <__assert_fail@plt>
   14214:	cmp	r0, #0
   14218:	bne	14248 <if_statement_inside_if_statement@@Base+0x420>
   1421c:	ldr	r3, [r4, #168]	; 0xa8
   14220:	ldr	r2, [r4, #172]	; 0xac
   14224:	ldr	r1, [pc, #124]	; 142a8 <if_statement_inside_if_statement@@Base+0x480>
   14228:	adds	r3, r3, #1
   1422c:	ldr	r0, [pc, #128]	; 142b4 <if_statement_inside_if_statement@@Base+0x48c>
   14230:	adc	r2, r2, #0
   14234:	str	r3, [r4, #168]	; 0xa8
   14238:	ldr	r3, [pc, #112]	; 142b0 <if_statement_inside_if_statement@@Base+0x488>
   1423c:	str	r2, [r4, #172]	; 0xac
   14240:	movw	r2, #481	; 0x1e1
   14244:	b	14210 <if_statement_inside_if_statement@@Base+0x3e8>
   14248:	ldr	r3, [r0]
   1424c:	cmp	r3, #4
   14250:	beq	14280 <if_statement_inside_if_statement@@Base+0x458>
   14254:	ldr	r3, [r4, #184]	; 0xb8
   14258:	ldr	r2, [r4, #188]	; 0xbc
   1425c:	ldr	r1, [pc, #68]	; 142a8 <if_statement_inside_if_statement@@Base+0x480>
   14260:	adds	r3, r3, #1
   14264:	ldr	r0, [pc, #76]	; 142b8 <if_statement_inside_if_statement@@Base+0x490>
   14268:	adc	r2, r2, #0
   1426c:	str	r3, [r4, #184]	; 0xb8
   14270:	ldr	r3, [pc, #56]	; 142b0 <if_statement_inside_if_statement@@Base+0x488>
   14274:	str	r2, [r4, #188]	; 0xbc
   14278:	movw	r2, #482	; 0x1e2
   1427c:	b	14210 <if_statement_inside_if_statement@@Base+0x3e8>
   14280:	ldr	r3, [r4, #176]	; 0xb0
   14284:	ldr	r2, [r4, #180]	; 0xb4
   14288:	adds	r3, r3, #1
   1428c:	adc	r2, r2, #0
   14290:	str	r3, [r4, #176]	; 0xb0
   14294:	str	r2, [r4, #180]	; 0xb4
   14298:	add	sp, sp, #20
   1429c:	pop	{r4, r5, r6, r7, pc}
   142a0:	ldrdeq	sl, [r2], -r8
   142a4:	andeq	fp, r2, ip, ror #17
   142a8:	andeq	r8, r1, fp, asr sl
   142ac:	andeq	r8, r1, pc, lsr #25
   142b0:	andeq	r8, r1, r7, lsl sl
   142b4:	andeq	r8, r1, r0, lsl #24
   142b8:	andeq	r8, r1, ip, lsl #24

000142bc <if_statement_inside_else_statement@@Base>:
   142bc:	push	{r4, r5, r6, r7, lr}
   142c0:	sub	sp, sp, #20
   142c4:	add	r1, sp, #4
   142c8:	mov	r0, sp
   142cc:	ldr	r4, [pc, #1200]	; 14784 <if_statement_inside_else_statement@@Base+0x4c8>
   142d0:	ldr	r3, [r4]
   142d4:	ldr	r2, [r4, #4]
   142d8:	adds	r3, r3, #1
   142dc:	adc	r2, r2, #0
   142e0:	str	r3, [r4]
   142e4:	str	r2, [r4, #4]
   142e8:	bl	15594 <init_grammar@@Base>
   142ec:	ldr	r3, [r4, #8]
   142f0:	mov	r0, #3
   142f4:	ldr	r2, [r4, #12]
   142f8:	adds	r3, r3, #1
   142fc:	adc	r2, r2, #0
   14300:	str	r3, [r4, #8]
   14304:	str	r2, [r4, #12]
   14308:	bl	118e8 <malloc@plt>
   1430c:	mov	r7, r0
   14310:	mov	r0, #3
   14314:	bl	118e8 <malloc@plt>
   14318:	movw	r2, #15649	; 0x3d21
   1431c:	mov	r3, #0
   14320:	mov	r6, r0
   14324:	strh	r2, [r0]
   14328:	strb	r3, [r0, #2]
   1432c:	mov	r0, #84	; 0x54
   14330:	strh	r2, [r7]
   14334:	strb	r3, [r7, #2]
   14338:	bl	118e8 <malloc@plt>
   1433c:	mov	r5, r0
   14340:	mov	r0, #4
   14344:	bl	118e8 <malloc@plt>
   14348:	str	r0, [r5]
   1434c:	bl	1482c <init_token_opar@@Base>
   14350:	ldr	r3, [r4, #16]
   14354:	mov	r0, #8
   14358:	ldr	r2, [r4, #20]
   1435c:	adds	r3, r3, #1
   14360:	adc	r2, r2, #0
   14364:	str	r3, [r4, #16]
   14368:	str	r2, [r4, #20]
   1436c:	bl	118e8 <malloc@plt>
   14370:	mov	r1, #1
   14374:	str	r0, [r5, #4]
   14378:	bl	147cc <init_token_int_value@@Base>
   1437c:	ldr	r3, [r4, #24]
   14380:	mov	r0, #8
   14384:	ldr	r2, [r4, #28]
   14388:	adds	r3, r3, #1
   1438c:	adc	r2, r2, #0
   14390:	str	r3, [r4, #24]
   14394:	str	r2, [r4, #28]
   14398:	bl	118e8 <malloc@plt>
   1439c:	mov	r1, #1
   143a0:	str	r0, [r5, #8]
   143a4:	bl	147cc <init_token_int_value@@Base>
   143a8:	ldr	r3, [r4, #32]
   143ac:	mov	r0, #8
   143b0:	ldr	r2, [r4, #36]	; 0x24
   143b4:	adds	r3, r3, #1
   143b8:	adc	r2, r2, #0
   143bc:	str	r3, [r4, #32]
   143c0:	str	r2, [r4, #36]	; 0x24
   143c4:	bl	118e8 <malloc@plt>
   143c8:	mov	r1, r7
   143cc:	str	r0, [r5, #12]
   143d0:	bl	149b8 <init_token_boolean_op@@Base>
   143d4:	ldr	r3, [r4, #40]	; 0x28
   143d8:	mov	r0, #8
   143dc:	ldr	r2, [r4, #44]	; 0x2c
   143e0:	adds	r3, r3, #1
   143e4:	adc	r2, r2, #0
   143e8:	str	r3, [r4, #40]	; 0x28
   143ec:	str	r2, [r4, #44]	; 0x2c
   143f0:	bl	118e8 <malloc@plt>
   143f4:	mov	r1, #1
   143f8:	str	r0, [r5, #16]
   143fc:	bl	147cc <init_token_int_value@@Base>
   14400:	ldr	r3, [r4, #48]	; 0x30
   14404:	mov	r0, #4
   14408:	ldr	r2, [r4, #52]	; 0x34
   1440c:	adds	r3, r3, #1
   14410:	adc	r2, r2, #0
   14414:	str	r3, [r4, #48]	; 0x30
   14418:	str	r2, [r4, #52]	; 0x34
   1441c:	bl	118e8 <malloc@plt>
   14420:	str	r0, [r5, #20]
   14424:	bl	14858 <init_token_cpar@@Base>
   14428:	ldr	r3, [r4, #56]	; 0x38
   1442c:	mov	r0, #4
   14430:	ldr	r2, [r4, #60]	; 0x3c
   14434:	adds	r3, r3, #1
   14438:	adc	r2, r2, #0
   1443c:	str	r3, [r4, #56]	; 0x38
   14440:	str	r2, [r4, #60]	; 0x3c
   14444:	bl	118e8 <malloc@plt>
   14448:	str	r0, [r5, #24]
   1444c:	bl	14884 <init_token_obra@@Base>
   14450:	ldr	r3, [r4, #64]	; 0x40
   14454:	mov	r0, #4
   14458:	ldr	r2, [r4, #68]	; 0x44
   1445c:	adds	r3, r3, #1
   14460:	adc	r2, r2, #0
   14464:	str	r3, [r4, #64]	; 0x40
   14468:	str	r2, [r4, #68]	; 0x44
   1446c:	bl	118e8 <malloc@plt>
   14470:	str	r0, [r5, #28]
   14474:	bl	148b0 <init_token_cbra@@Base>
   14478:	ldr	r3, [r4, #72]	; 0x48
   1447c:	mov	r0, #4
   14480:	ldr	r2, [r4, #76]	; 0x4c
   14484:	adds	r3, r3, #1
   14488:	adc	r2, r2, #0
   1448c:	str	r3, [r4, #72]	; 0x48
   14490:	str	r2, [r4, #76]	; 0x4c
   14494:	bl	118e8 <malloc@plt>
   14498:	str	r0, [r5, #32]
   1449c:	bl	1498c <init_token_else@@Base>
   144a0:	ldr	r3, [r4, #80]	; 0x50
   144a4:	mov	r0, #4
   144a8:	ldr	r2, [r4, #84]	; 0x54
   144ac:	adds	r3, r3, #1
   144b0:	adc	r2, r2, #0
   144b4:	str	r3, [r4, #80]	; 0x50
   144b8:	str	r2, [r4, #84]	; 0x54
   144bc:	bl	118e8 <malloc@plt>
   144c0:	str	r0, [r5, #36]	; 0x24
   144c4:	bl	14884 <init_token_obra@@Base>
   144c8:	ldr	r3, [r4, #88]	; 0x58
   144cc:	mov	r0, #4
   144d0:	ldr	r2, [r4, #92]	; 0x5c
   144d4:	adds	r3, r3, #1
   144d8:	adc	r2, r2, #0
   144dc:	str	r3, [r4, #88]	; 0x58
   144e0:	str	r2, [r4, #92]	; 0x5c
   144e4:	bl	118e8 <malloc@plt>
   144e8:	str	r0, [r5, #40]	; 0x28
   144ec:	bl	14960 <init_token_if@@Base>
   144f0:	ldr	r3, [r4, #96]	; 0x60
   144f4:	mov	r0, #4
   144f8:	ldr	r2, [r4, #100]	; 0x64
   144fc:	adds	r3, r3, #1
   14500:	adc	r2, r2, #0
   14504:	str	r3, [r4, #96]	; 0x60
   14508:	str	r2, [r4, #100]	; 0x64
   1450c:	bl	118e8 <malloc@plt>
   14510:	str	r0, [r5, #44]	; 0x2c
   14514:	bl	1482c <init_token_opar@@Base>
   14518:	ldr	r3, [r4, #104]	; 0x68
   1451c:	mov	r0, #8
   14520:	ldr	r2, [r4, #108]	; 0x6c
   14524:	adds	r3, r3, #1
   14528:	adc	r2, r2, #0
   1452c:	str	r3, [r4, #104]	; 0x68
   14530:	str	r2, [r4, #108]	; 0x6c
   14534:	bl	118e8 <malloc@plt>
   14538:	mov	r1, #1
   1453c:	str	r0, [r5, #48]	; 0x30
   14540:	bl	147cc <init_token_int_value@@Base>
   14544:	ldr	r3, [r4, #112]	; 0x70
   14548:	mov	r0, #8
   1454c:	ldr	r2, [r4, #116]	; 0x74
   14550:	adds	r3, r3, #1
   14554:	adc	r2, r2, #0
   14558:	str	r3, [r4, #112]	; 0x70
   1455c:	str	r2, [r4, #116]	; 0x74
   14560:	bl	118e8 <malloc@plt>
   14564:	mov	r1, #1
   14568:	str	r0, [r5, #52]	; 0x34
   1456c:	bl	147cc <init_token_int_value@@Base>
   14570:	ldr	r3, [r4, #120]	; 0x78
   14574:	mov	r0, #8
   14578:	ldr	r2, [r4, #124]	; 0x7c
   1457c:	adds	r3, r3, #1
   14580:	adc	r2, r2, #0
   14584:	str	r3, [r4, #120]	; 0x78
   14588:	str	r2, [r4, #124]	; 0x7c
   1458c:	bl	118e8 <malloc@plt>
   14590:	mov	r1, r6
   14594:	str	r0, [r5, #56]	; 0x38
   14598:	bl	149b8 <init_token_boolean_op@@Base>
   1459c:	ldr	r3, [r4, #128]	; 0x80
   145a0:	mov	r0, #8
   145a4:	ldr	r2, [r4, #132]	; 0x84
   145a8:	ldr	r6, [pc, #472]	; 14788 <if_statement_inside_else_statement@@Base+0x4cc>
   145ac:	adds	r3, r3, #1
   145b0:	adc	r2, r2, #0
   145b4:	str	r3, [r4, #128]	; 0x80
   145b8:	str	r2, [r4, #132]	; 0x84
   145bc:	bl	118e8 <malloc@plt>
   145c0:	mov	r1, #1
   145c4:	str	r0, [r5, #60]	; 0x3c
   145c8:	bl	147cc <init_token_int_value@@Base>
   145cc:	ldr	r3, [r4, #136]	; 0x88
   145d0:	mov	r0, #4
   145d4:	ldr	r2, [r4, #140]	; 0x8c
   145d8:	adds	r3, r3, #1
   145dc:	adc	r2, r2, #0
   145e0:	str	r3, [r4, #136]	; 0x88
   145e4:	str	r2, [r4, #140]	; 0x8c
   145e8:	bl	118e8 <malloc@plt>
   145ec:	str	r0, [r5, #64]	; 0x40
   145f0:	bl	14858 <init_token_cpar@@Base>
   145f4:	ldr	r3, [r4, #144]	; 0x90
   145f8:	mov	r0, #4
   145fc:	ldr	r2, [r4, #148]	; 0x94
   14600:	adds	r3, r3, #1
   14604:	adc	r2, r2, #0
   14608:	str	r3, [r4, #144]	; 0x90
   1460c:	str	r2, [r4, #148]	; 0x94
   14610:	bl	118e8 <malloc@plt>
   14614:	str	r0, [r5, #68]	; 0x44
   14618:	bl	14884 <init_token_obra@@Base>
   1461c:	ldr	r3, [r4, #152]	; 0x98
   14620:	mov	r0, #4
   14624:	ldr	r2, [r4, #156]	; 0x9c
   14628:	adds	r3, r3, #1
   1462c:	adc	r2, r2, #0
   14630:	str	r3, [r4, #152]	; 0x98
   14634:	str	r2, [r4, #156]	; 0x9c
   14638:	bl	118e8 <malloc@plt>
   1463c:	str	r0, [r5, #72]	; 0x48
   14640:	bl	148b0 <init_token_cbra@@Base>
   14644:	ldr	r3, [r4, #160]	; 0xa0
   14648:	mov	r0, #4
   1464c:	ldr	r2, [r4, #164]	; 0xa4
   14650:	adds	r3, r3, #1
   14654:	adc	r2, r2, #0
   14658:	str	r3, [r4, #160]	; 0xa0
   1465c:	str	r2, [r4, #164]	; 0xa4
   14660:	bl	118e8 <malloc@plt>
   14664:	str	r0, [r5, #76]	; 0x4c
   14668:	bl	148b0 <init_token_cbra@@Base>
   1466c:	ldr	r3, [r4, #168]	; 0xa8
   14670:	mov	r0, #4
   14674:	ldr	r2, [r4, #172]	; 0xac
   14678:	adds	r3, r3, #1
   1467c:	adc	r2, r2, #0
   14680:	str	r3, [r4, #168]	; 0xa8
   14684:	str	r2, [r4, #172]	; 0xac
   14688:	bl	118e8 <malloc@plt>
   1468c:	str	r0, [r5, #80]	; 0x50
   14690:	bl	148b0 <init_token_cbra@@Base>
   14694:	ldr	r3, [r4, #176]	; 0xb0
   14698:	mov	r0, sp
   1469c:	str	r5, [r6, #228]	; 0xe4
   146a0:	ldr	r2, [r4, #180]	; 0xb4
   146a4:	adds	r3, r3, #1
   146a8:	adc	r2, r2, #0
   146ac:	str	r3, [r4, #176]	; 0xb0
   146b0:	mov	r3, #21
   146b4:	str	r2, [r4, #180]	; 0xb4
   146b8:	str	r3, [r6, #220]	; 0xdc
   146bc:	bl	15eec <read_if_statement@@Base>
   146c0:	ldr	r3, [r6, #204]	; 0xcc
   146c4:	cmp	r3, #21
   146c8:	beq	146f8 <if_statement_inside_else_statement@@Base+0x43c>
   146cc:	ldr	r3, [r4, #184]	; 0xb8
   146d0:	ldr	r2, [r4, #188]	; 0xbc
   146d4:	ldr	r1, [pc, #176]	; 1478c <if_statement_inside_else_statement@@Base+0x4d0>
   146d8:	adds	r3, r3, #1
   146dc:	ldr	r0, [pc, #172]	; 14790 <if_statement_inside_else_statement@@Base+0x4d4>
   146e0:	str	r3, [r4, #184]	; 0xb8
   146e4:	adc	r2, r2, #0
   146e8:	ldr	r3, [pc, #164]	; 14794 <if_statement_inside_else_statement@@Base+0x4d8>
   146ec:	str	r2, [r4, #188]	; 0xbc
   146f0:	movw	r2, #558	; 0x22e
   146f4:	bl	119f0 <__assert_fail@plt>
   146f8:	cmp	r0, #0
   146fc:	bne	1472c <if_statement_inside_else_statement@@Base+0x470>
   14700:	ldr	r3, [r4, #192]	; 0xc0
   14704:	ldr	r2, [r4, #196]	; 0xc4
   14708:	ldr	r1, [pc, #124]	; 1478c <if_statement_inside_else_statement@@Base+0x4d0>
   1470c:	adds	r3, r3, #1
   14710:	ldr	r0, [pc, #128]	; 14798 <if_statement_inside_else_statement@@Base+0x4dc>
   14714:	adc	r2, r2, #0
   14718:	str	r3, [r4, #192]	; 0xc0
   1471c:	ldr	r3, [pc, #112]	; 14794 <if_statement_inside_else_statement@@Base+0x4d8>
   14720:	str	r2, [r4, #196]	; 0xc4
   14724:	movw	r2, #559	; 0x22f
   14728:	b	146f4 <if_statement_inside_else_statement@@Base+0x438>
   1472c:	ldr	r3, [r0]
   14730:	cmp	r3, #4
   14734:	beq	14764 <if_statement_inside_else_statement@@Base+0x4a8>
   14738:	ldr	r3, [r4, #208]	; 0xd0
   1473c:	ldr	r2, [r4, #212]	; 0xd4
   14740:	ldr	r1, [pc, #68]	; 1478c <if_statement_inside_else_statement@@Base+0x4d0>
   14744:	adds	r3, r3, #1
   14748:	ldr	r0, [pc, #76]	; 1479c <if_statement_inside_else_statement@@Base+0x4e0>
   1474c:	adc	r2, r2, #0
   14750:	str	r3, [r4, #208]	; 0xd0
   14754:	ldr	r3, [pc, #56]	; 14794 <if_statement_inside_else_statement@@Base+0x4d8>
   14758:	str	r2, [r4, #212]	; 0xd4
   1475c:	mov	r2, #560	; 0x230
   14760:	b	146f4 <if_statement_inside_else_statement@@Base+0x438>
   14764:	ldr	r3, [r4, #200]	; 0xc8
   14768:	ldr	r2, [r4, #204]	; 0xcc
   1476c:	adds	r3, r3, #1
   14770:	adc	r2, r2, #0
   14774:	str	r3, [r4, #200]	; 0xc8
   14778:	str	r2, [r4, #204]	; 0xcc
   1477c:	add	sp, sp, #20
   14780:	pop	{r4, r5, r6, r7, pc}
   14784:	muleq	r2, r8, lr
   14788:	andeq	fp, r2, ip, ror #17
   1478c:	andeq	r8, r1, fp, asr sl
   14790:	andeq	r8, r1, sl, asr #25
   14794:	andeq	r8, r1, r8, lsr sl
   14798:	andeq	r8, r1, r0, lsl #24
   1479c:	andeq	r8, r1, ip, lsl #24

000147a0 <init_token_int_type@@Base>:
   147a0:	ldr	r2, [pc, #32]	; 147c8 <init_token_int_type@@Base+0x28>
   147a4:	ldr	r3, [r2]
   147a8:	ldr	r1, [r2, #4]
   147ac:	adds	r3, r3, #1
   147b0:	adc	r1, r1, #0
   147b4:	str	r3, [r2]
   147b8:	mov	r3, #0
   147bc:	str	r3, [r0]
   147c0:	str	r1, [r2, #4]
   147c4:	bx	lr
   147c8:	andeq	fp, r2, r8, lsr r1

000147cc <init_token_int_value@@Base>:
   147cc:	ldr	r2, [pc, #36]	; 147f8 <init_token_int_value@@Base+0x2c>
   147d0:	str	r1, [r0, #4]
   147d4:	ldr	r3, [r2, #8]
   147d8:	ldr	ip, [r2, #12]
   147dc:	adds	r3, r3, #1
   147e0:	adc	ip, ip, #0
   147e4:	str	r3, [r2, #8]
   147e8:	mov	r3, #1
   147ec:	str	r3, [r0]
   147f0:	str	ip, [r2, #12]
   147f4:	bx	lr
   147f8:	andeq	fp, r2, r8, lsr r1

000147fc <init_token_function@@Base>:
   147fc:	ldr	r2, [pc, #36]	; 14828 <init_token_function@@Base+0x2c>
   14800:	str	r1, [r0, #4]
   14804:	ldr	r3, [r2, #16]
   14808:	ldr	ip, [r2, #20]
   1480c:	adds	r3, r3, #1
   14810:	adc	ip, ip, #0
   14814:	str	r3, [r2, #16]
   14818:	mov	r3, #2
   1481c:	str	r3, [r0]
   14820:	str	ip, [r2, #20]
   14824:	bx	lr
   14828:	andeq	fp, r2, r8, lsr r1

0001482c <init_token_opar@@Base>:
   1482c:	ldr	r2, [pc, #32]	; 14854 <init_token_opar@@Base+0x28>
   14830:	ldr	r3, [r2, #24]
   14834:	ldr	r1, [r2, #28]
   14838:	adds	r3, r3, #1
   1483c:	adc	r1, r1, #0
   14840:	str	r3, [r2, #24]
   14844:	mov	r3, #3
   14848:	str	r3, [r0]
   1484c:	str	r1, [r2, #28]
   14850:	bx	lr
   14854:	andeq	fp, r2, r8, lsr r1

00014858 <init_token_cpar@@Base>:
   14858:	ldr	r2, [pc, #32]	; 14880 <init_token_cpar@@Base+0x28>
   1485c:	ldr	r3, [r2, #32]
   14860:	ldr	r1, [r2, #36]	; 0x24
   14864:	adds	r3, r3, #1
   14868:	adc	r1, r1, #0
   1486c:	str	r3, [r2, #32]
   14870:	mov	r3, #4
   14874:	str	r3, [r0]
   14878:	str	r1, [r2, #36]	; 0x24
   1487c:	bx	lr
   14880:	andeq	fp, r2, r8, lsr r1

00014884 <init_token_obra@@Base>:
   14884:	ldr	r2, [pc, #32]	; 148ac <init_token_obra@@Base+0x28>
   14888:	ldr	r3, [r2, #40]	; 0x28
   1488c:	ldr	r1, [r2, #44]	; 0x2c
   14890:	adds	r3, r3, #1
   14894:	adc	r1, r1, #0
   14898:	str	r3, [r2, #40]	; 0x28
   1489c:	mov	r3, #5
   148a0:	str	r3, [r0]
   148a4:	str	r1, [r2, #44]	; 0x2c
   148a8:	bx	lr
   148ac:	andeq	fp, r2, r8, lsr r1

000148b0 <init_token_cbra@@Base>:
   148b0:	ldr	r2, [pc, #32]	; 148d8 <init_token_cbra@@Base+0x28>
   148b4:	ldr	r3, [r2, #48]	; 0x30
   148b8:	ldr	r1, [r2, #52]	; 0x34
   148bc:	adds	r3, r3, #1
   148c0:	adc	r1, r1, #0
   148c4:	str	r3, [r2, #48]	; 0x30
   148c8:	mov	r3, #6
   148cc:	str	r3, [r0]
   148d0:	str	r1, [r2, #52]	; 0x34
   148d4:	bx	lr
   148d8:	andeq	fp, r2, r8, lsr r1

000148dc <init_token_return@@Base>:
   148dc:	ldr	r2, [pc, #32]	; 14904 <init_token_return@@Base+0x28>
   148e0:	ldr	r3, [r2, #56]	; 0x38
   148e4:	ldr	r1, [r2, #60]	; 0x3c
   148e8:	adds	r3, r3, #1
   148ec:	adc	r1, r1, #0
   148f0:	str	r3, [r2, #56]	; 0x38
   148f4:	mov	r3, #7
   148f8:	str	r3, [r0]
   148fc:	str	r1, [r2, #60]	; 0x3c
   14900:	bx	lr
   14904:	andeq	fp, r2, r8, lsr r1

00014908 <init_token_semicolon@@Base>:
   14908:	ldr	r2, [pc, #32]	; 14930 <init_token_semicolon@@Base+0x28>
   1490c:	ldr	r3, [r2, #64]	; 0x40
   14910:	ldr	r1, [r2, #68]	; 0x44
   14914:	adds	r3, r3, #1
   14918:	adc	r1, r1, #0
   1491c:	str	r3, [r2, #64]	; 0x40
   14920:	mov	r3, #8
   14924:	str	r3, [r0]
   14928:	str	r1, [r2, #68]	; 0x44
   1492c:	bx	lr
   14930:	andeq	fp, r2, r8, lsr r1

00014934 <init_token_eof@@Base>:
   14934:	ldr	r2, [pc, #32]	; 1495c <init_token_eof@@Base+0x28>
   14938:	ldr	r3, [r2, #72]	; 0x48
   1493c:	ldr	r1, [r2, #76]	; 0x4c
   14940:	adds	r3, r3, #1
   14944:	adc	r1, r1, #0
   14948:	str	r3, [r2, #72]	; 0x48
   1494c:	mov	r3, #9
   14950:	str	r3, [r0]
   14954:	str	r1, [r2, #76]	; 0x4c
   14958:	bx	lr
   1495c:	andeq	fp, r2, r8, lsr r1

00014960 <init_token_if@@Base>:
   14960:	ldr	r2, [pc, #32]	; 14988 <init_token_if@@Base+0x28>
   14964:	ldr	r3, [r2, #80]	; 0x50
   14968:	ldr	r1, [r2, #84]	; 0x54
   1496c:	adds	r3, r3, #1
   14970:	adc	r1, r1, #0
   14974:	str	r3, [r2, #80]	; 0x50
   14978:	mov	r3, #10
   1497c:	str	r3, [r0]
   14980:	str	r1, [r2, #84]	; 0x54
   14984:	bx	lr
   14988:	andeq	fp, r2, r8, lsr r1

0001498c <init_token_else@@Base>:
   1498c:	ldr	r2, [pc, #32]	; 149b4 <init_token_else@@Base+0x28>
   14990:	ldr	r3, [r2, #88]	; 0x58
   14994:	ldr	r1, [r2, #92]	; 0x5c
   14998:	adds	r3, r3, #1
   1499c:	adc	r1, r1, #0
   149a0:	str	r3, [r2, #88]	; 0x58
   149a4:	mov	r3, #11
   149a8:	str	r3, [r0]
   149ac:	str	r1, [r2, #92]	; 0x5c
   149b0:	bx	lr
   149b4:	andeq	fp, r2, r8, lsr r1

000149b8 <init_token_boolean_op@@Base>:
   149b8:	ldr	r2, [pc, #36]	; 149e4 <init_token_boolean_op@@Base+0x2c>
   149bc:	str	r1, [r0, #4]
   149c0:	ldr	r3, [r2, #96]	; 0x60
   149c4:	ldr	ip, [r2, #100]	; 0x64
   149c8:	adds	r3, r3, #1
   149cc:	adc	ip, ip, #0
   149d0:	str	r3, [r2, #96]	; 0x60
   149d4:	mov	r3, #12
   149d8:	str	r3, [r0]
   149dc:	str	ip, [r2, #100]	; 0x64
   149e0:	bx	lr
   149e4:	andeq	fp, r2, r8, lsr r1

000149e8 <free_token_int_type@@Base>:
   149e8:	ldr	r2, [pc, #24]	; 14a08 <free_token_int_type@@Base+0x20>
   149ec:	ldr	r3, [r2, #104]	; 0x68
   149f0:	ldr	r1, [r2, #108]	; 0x6c
   149f4:	adds	r3, r3, #1
   149f8:	adc	r1, r1, #0
   149fc:	str	r3, [r2, #104]	; 0x68
   14a00:	str	r1, [r2, #108]	; 0x6c
   14a04:	b	1187c <free@plt>
   14a08:	andeq	fp, r2, r8, lsr r1

00014a0c <free_token_int_value@@Base>:
   14a0c:	ldr	r2, [pc, #24]	; 14a2c <free_token_int_value@@Base+0x20>
   14a10:	ldr	r3, [r2, #112]	; 0x70
   14a14:	ldr	r1, [r2, #116]	; 0x74
   14a18:	adds	r3, r3, #1
   14a1c:	adc	r1, r1, #0
   14a20:	str	r3, [r2, #112]	; 0x70
   14a24:	str	r1, [r2, #116]	; 0x74
   14a28:	b	1187c <free@plt>
   14a2c:	andeq	fp, r2, r8, lsr r1

00014a30 <free_token_function@@Base>:
   14a30:	ldr	r2, [pc, #24]	; 14a50 <free_token_function@@Base+0x20>
   14a34:	ldr	r3, [r2, #120]	; 0x78
   14a38:	ldr	r1, [r2, #124]	; 0x7c
   14a3c:	adds	r3, r3, #1
   14a40:	adc	r1, r1, #0
   14a44:	str	r3, [r2, #120]	; 0x78
   14a48:	str	r1, [r2, #124]	; 0x7c
   14a4c:	b	1187c <free@plt>
   14a50:	andeq	fp, r2, r8, lsr r1

00014a54 <free_token_opar@@Base>:
   14a54:	ldr	r2, [pc, #24]	; 14a74 <free_token_opar@@Base+0x20>
   14a58:	ldr	r3, [r2, #128]	; 0x80
   14a5c:	ldr	r1, [r2, #132]	; 0x84
   14a60:	adds	r3, r3, #1
   14a64:	adc	r1, r1, #0
   14a68:	str	r3, [r2, #128]	; 0x80
   14a6c:	str	r1, [r2, #132]	; 0x84
   14a70:	b	1187c <free@plt>
   14a74:	andeq	fp, r2, r8, lsr r1

00014a78 <free_token_cpar@@Base>:
   14a78:	ldr	r2, [pc, #24]	; 14a98 <free_token_cpar@@Base+0x20>
   14a7c:	ldr	r3, [r2, #136]	; 0x88
   14a80:	ldr	r1, [r2, #140]	; 0x8c
   14a84:	adds	r3, r3, #1
   14a88:	adc	r1, r1, #0
   14a8c:	str	r3, [r2, #136]	; 0x88
   14a90:	str	r1, [r2, #140]	; 0x8c
   14a94:	b	1187c <free@plt>
   14a98:	andeq	fp, r2, r8, lsr r1

00014a9c <free_token_obra@@Base>:
   14a9c:	ldr	r2, [pc, #24]	; 14abc <free_token_obra@@Base+0x20>
   14aa0:	ldr	r3, [r2, #144]	; 0x90
   14aa4:	ldr	r1, [r2, #148]	; 0x94
   14aa8:	adds	r3, r3, #1
   14aac:	adc	r1, r1, #0
   14ab0:	str	r3, [r2, #144]	; 0x90
   14ab4:	str	r1, [r2, #148]	; 0x94
   14ab8:	b	1187c <free@plt>
   14abc:	andeq	fp, r2, r8, lsr r1

00014ac0 <free_token_cbra@@Base>:
   14ac0:	ldr	r2, [pc, #24]	; 14ae0 <free_token_cbra@@Base+0x20>
   14ac4:	ldr	r3, [r2, #152]	; 0x98
   14ac8:	ldr	r1, [r2, #156]	; 0x9c
   14acc:	adds	r3, r3, #1
   14ad0:	adc	r1, r1, #0
   14ad4:	str	r3, [r2, #152]	; 0x98
   14ad8:	str	r1, [r2, #156]	; 0x9c
   14adc:	b	1187c <free@plt>
   14ae0:	andeq	fp, r2, r8, lsr r1

00014ae4 <free_token_return@@Base>:
   14ae4:	ldr	r2, [pc, #24]	; 14b04 <free_token_return@@Base+0x20>
   14ae8:	ldr	r3, [r2, #160]	; 0xa0
   14aec:	ldr	r1, [r2, #164]	; 0xa4
   14af0:	adds	r3, r3, #1
   14af4:	adc	r1, r1, #0
   14af8:	str	r3, [r2, #160]	; 0xa0
   14afc:	str	r1, [r2, #164]	; 0xa4
   14b00:	b	1187c <free@plt>
   14b04:	andeq	fp, r2, r8, lsr r1

00014b08 <free_token_semicolon@@Base>:
   14b08:	ldr	r2, [pc, #24]	; 14b28 <free_token_semicolon@@Base+0x20>
   14b0c:	ldr	r3, [r2, #168]	; 0xa8
   14b10:	ldr	r1, [r2, #172]	; 0xac
   14b14:	adds	r3, r3, #1
   14b18:	adc	r1, r1, #0
   14b1c:	str	r3, [r2, #168]	; 0xa8
   14b20:	str	r1, [r2, #172]	; 0xac
   14b24:	b	1187c <free@plt>
   14b28:	andeq	fp, r2, r8, lsr r1

00014b2c <free_token_eof@@Base>:
   14b2c:	ldr	r2, [pc, #24]	; 14b4c <free_token_eof@@Base+0x20>
   14b30:	ldr	r3, [r2, #176]	; 0xb0
   14b34:	ldr	r1, [r2, #180]	; 0xb4
   14b38:	adds	r3, r3, #1
   14b3c:	adc	r1, r1, #0
   14b40:	str	r3, [r2, #176]	; 0xb0
   14b44:	str	r1, [r2, #180]	; 0xb4
   14b48:	b	1187c <free@plt>
   14b4c:	andeq	fp, r2, r8, lsr r1

00014b50 <free_token_if@@Base>:
   14b50:	ldr	r2, [pc, #24]	; 14b70 <free_token_if@@Base+0x20>
   14b54:	ldr	r3, [r2, #184]	; 0xb8
   14b58:	ldr	r1, [r2, #188]	; 0xbc
   14b5c:	adds	r3, r3, #1
   14b60:	adc	r1, r1, #0
   14b64:	str	r3, [r2, #184]	; 0xb8
   14b68:	str	r1, [r2, #188]	; 0xbc
   14b6c:	b	1187c <free@plt>
   14b70:	andeq	fp, r2, r8, lsr r1

00014b74 <free_token_else@@Base>:
   14b74:	ldr	r2, [pc, #24]	; 14b94 <free_token_else@@Base+0x20>
   14b78:	ldr	r3, [r2, #192]	; 0xc0
   14b7c:	ldr	r1, [r2, #196]	; 0xc4
   14b80:	adds	r3, r3, #1
   14b84:	adc	r1, r1, #0
   14b88:	str	r3, [r2, #192]	; 0xc0
   14b8c:	str	r1, [r2, #196]	; 0xc4
   14b90:	b	1187c <free@plt>
   14b94:	andeq	fp, r2, r8, lsr r1

00014b98 <free_token_boolean_op@@Base>:
   14b98:	push	{r4, lr}
   14b9c:	mov	r4, r0
   14ba0:	ldr	r0, [r0, #4]
   14ba4:	ldr	r3, [pc, #72]	; 14bf4 <free_token_boolean_op@@Base+0x5c>
   14ba8:	cmp	r0, #0
   14bac:	bne	14bd4 <free_token_boolean_op@@Base+0x3c>
   14bb0:	ldr	r2, [r3, #208]	; 0xd0
   14bb4:	ldr	r1, [r3, #212]	; 0xd4
   14bb8:	adds	r2, r2, #1
   14bbc:	adc	r1, r1, #0
   14bc0:	str	r2, [r3, #208]	; 0xd0
   14bc4:	str	r1, [r3, #212]	; 0xd4
   14bc8:	mov	r0, r4
   14bcc:	pop	{r4, lr}
   14bd0:	b	1187c <free@plt>
   14bd4:	ldr	r2, [r3, #200]	; 0xc8
   14bd8:	ldr	r1, [r3, #204]	; 0xcc
   14bdc:	adds	r2, r2, #1
   14be0:	adc	r1, r1, #0
   14be4:	str	r2, [r3, #200]	; 0xc8
   14be8:	str	r1, [r3, #204]	; 0xcc
   14bec:	bl	1187c <free@plt>
   14bf0:	b	14bc8 <free_token_boolean_op@@Base+0x30>
   14bf4:	andeq	fp, r2, r8, lsr r1

00014bf8 <init_ast_base@@Base>:
   14bf8:	ldr	ip, [pc, #24]	; 14c18 <init_ast_base@@Base+0x20>
   14bfc:	push	{lr}		; (str lr, [sp, #-4]!)
   14c00:	stm	r0, {r1, r2}
   14c04:	ldm	ip, {r3, lr}
   14c08:	adds	r3, r3, #1
   14c0c:	adc	lr, lr, #0
   14c10:	stm	ip, {r3, lr}
   14c14:	pop	{pc}		; (ldr pc, [sp], #4)
   14c18:	andeq	fp, r2, r0, lsl r2

00014c1c <init_ast_base_single@@Base>:
   14c1c:	ldr	r2, [pc, #36]	; 14c48 <init_ast_base_single@@Base+0x2c>
   14c20:	str	r1, [r0]
   14c24:	ldr	r3, [r2, #8]
   14c28:	ldr	ip, [r2, #12]
   14c2c:	adds	r3, r3, #1
   14c30:	adc	ip, ip, #0
   14c34:	str	r3, [r2, #8]
   14c38:	mov	r3, #0
   14c3c:	str	r3, [r0, #4]
   14c40:	str	ip, [r2, #12]
   14c44:	bx	lr
   14c48:	andeq	fp, r2, r0, lsl r2

00014c4c <init_node_id@@Base>:
   14c4c:	ldr	r2, [pc, #40]	; 14c7c <init_node_id@@Base+0x30>
   14c50:	str	r1, [r0, #8]
   14c54:	ldr	r3, [r2, #16]
   14c58:	ldr	ip, [r2, #20]
   14c5c:	adds	r3, r3, #1
   14c60:	adc	ip, ip, #0
   14c64:	str	r3, [r2, #16]
   14c68:	mov	r3, #0
   14c6c:	str	r3, [r0]
   14c70:	str	r3, [r0, #4]
   14c74:	str	ip, [r2, #20]
   14c78:	bx	lr
   14c7c:	andeq	fp, r2, r0, lsl r2

00014c80 <init_node_int@@Base>:
   14c80:	ldr	r2, [pc, #40]	; 14cb0 <init_node_int@@Base+0x30>
   14c84:	str	r1, [r0, #8]
   14c88:	ldr	r3, [r2, #24]
   14c8c:	ldr	ip, [r2, #28]
   14c90:	adds	r3, r3, #1
   14c94:	adc	ip, ip, #0
   14c98:	str	r3, [r2, #24]
   14c9c:	mov	r3, #0
   14ca0:	str	ip, [r2, #28]
   14ca4:	mov	r2, #1
   14ca8:	strd	r2, [r0]
   14cac:	bx	lr
   14cb0:	andeq	fp, r2, r0, lsl r2

00014cb4 <init_node_function@@Base>:
   14cb4:	ldr	ip, [pc, #48]	; 14cec <init_node_function@@Base+0x38>
   14cb8:	push	{lr}		; (str lr, [sp, #-4]!)
   14cbc:	str	r1, [r0, #8]
   14cc0:	ldr	r3, [ip, #32]
   14cc4:	str	r2, [r0, #12]
   14cc8:	mov	r2, #2
   14ccc:	ldr	lr, [ip, #36]	; 0x24
   14cd0:	adds	r3, r3, #1
   14cd4:	adc	lr, lr, #0
   14cd8:	str	r3, [ip, #32]
   14cdc:	mov	r3, #0
   14ce0:	strd	r2, [r0]
   14ce4:	str	lr, [ip, #36]	; 0x24
   14ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   14cec:	andeq	fp, r2, r0, lsl r2

00014cf0 <init_node_return@@Base>:
   14cf0:	ldr	r2, [pc, #40]	; 14d20 <init_node_return@@Base+0x30>
   14cf4:	str	r1, [r0, #8]
   14cf8:	ldr	r3, [r2, #40]	; 0x28
   14cfc:	ldr	ip, [r2, #44]	; 0x2c
   14d00:	adds	r3, r3, #1
   14d04:	adc	ip, ip, #0
   14d08:	str	r3, [r2, #40]	; 0x28
   14d0c:	mov	r3, #0
   14d10:	str	ip, [r2, #44]	; 0x2c
   14d14:	mov	r2, #3
   14d18:	strd	r2, [r0]
   14d1c:	bx	lr
   14d20:	andeq	fp, r2, r0, lsl r2

00014d24 <init_node_if@@Base>:
   14d24:	push	{r4, lr}
   14d28:	ldr	lr, [pc, #44]	; 14d5c <init_node_if@@Base+0x38>
   14d2c:	str	r1, [r0, #8]
   14d30:	strd	r2, [r0, #12]
   14d34:	mov	r2, #4
   14d38:	mov	r3, #0
   14d3c:	strd	r2, [r0]
   14d40:	ldr	ip, [lr, #48]	; 0x30
   14d44:	ldr	r4, [lr, #52]	; 0x34
   14d48:	adds	ip, ip, #1
   14d4c:	adc	r4, r4, #0
   14d50:	str	ip, [lr, #48]	; 0x30
   14d54:	str	r4, [lr, #52]	; 0x34
   14d58:	pop	{r4, pc}
   14d5c:	andeq	fp, r2, r0, lsl r2

00014d60 <init_node_boolean_operator@@Base>:
   14d60:	push	{r4, lr}
   14d64:	ldr	lr, [pc, #44]	; 14d98 <init_node_boolean_operator@@Base+0x38>
   14d68:	strd	r2, [r0, #8]
   14d6c:	mov	r2, #5
   14d70:	mov	r3, #0
   14d74:	strd	r2, [r0]
   14d78:	str	r1, [r0, #16]
   14d7c:	ldr	ip, [lr, #56]	; 0x38
   14d80:	ldr	r4, [lr, #60]	; 0x3c
   14d84:	adds	ip, ip, #1
   14d88:	adc	r4, r4, #0
   14d8c:	str	ip, [lr, #56]	; 0x38
   14d90:	str	r4, [lr, #60]	; 0x3c
   14d94:	pop	{r4, pc}
   14d98:	andeq	fp, r2, r0, lsl r2

00014d9c <free_node_boolean_operator@@Base>:
   14d9c:	push	{r4, r5, r6, lr}
   14da0:	mov	r5, r0
   14da4:	ldr	r0, [r0, #4]
   14da8:	ldr	r4, [pc, #160]	; 14e50 <free_node_boolean_operator@@Base+0xb4>
   14dac:	cmp	r0, #0
   14db0:	bne	14e18 <free_node_boolean_operator@@Base+0x7c>
   14db4:	ldr	r3, [r4, #72]	; 0x48
   14db8:	ldr	r2, [r4, #76]	; 0x4c
   14dbc:	adds	r3, r3, #1
   14dc0:	adc	r2, r2, #0
   14dc4:	str	r3, [r4, #72]	; 0x48
   14dc8:	str	r2, [r4, #76]	; 0x4c
   14dcc:	ldr	r0, [r5, #8]
   14dd0:	bl	14e54 <free_node@@Base>
   14dd4:	ldr	r3, [r4, #88]	; 0x58
   14dd8:	ldr	r2, [r4, #92]	; 0x5c
   14ddc:	ldr	r0, [r5, #12]
   14de0:	adds	r3, r3, #1
   14de4:	adc	r2, r2, #0
   14de8:	str	r3, [r4, #88]	; 0x58
   14dec:	str	r2, [r4, #92]	; 0x5c
   14df0:	bl	14e54 <free_node@@Base>
   14df4:	ldr	r3, [r4, #96]	; 0x60
   14df8:	mov	r0, r5
   14dfc:	ldr	r2, [r4, #100]	; 0x64
   14e00:	adds	r3, r3, #1
   14e04:	adc	r2, r2, #0
   14e08:	str	r3, [r4, #96]	; 0x60
   14e0c:	str	r2, [r4, #100]	; 0x64
   14e10:	pop	{r4, r5, r6, lr}
   14e14:	b	1187c <free@plt>
   14e18:	ldr	r3, [r4, #64]	; 0x40
   14e1c:	ldr	r2, [r4, #68]	; 0x44
   14e20:	adds	r3, r3, #1
   14e24:	adc	r2, r2, #0
   14e28:	str	r3, [r4, #64]	; 0x40
   14e2c:	str	r2, [r4, #68]	; 0x44
   14e30:	bl	14e54 <free_node@@Base>
   14e34:	ldr	r3, [r4, #80]	; 0x50
   14e38:	ldr	r2, [r4, #84]	; 0x54
   14e3c:	adds	r3, r3, #1
   14e40:	adc	r2, r2, #0
   14e44:	str	r3, [r4, #80]	; 0x50
   14e48:	str	r2, [r4, #84]	; 0x54
   14e4c:	b	14dcc <free_node_boolean_operator@@Base+0x30>
   14e50:	andeq	fp, r2, r0, lsl r2

00014e54 <free_node@@Base>:
   14e54:	ldr	r3, [r0]
   14e58:	push	{r4, lr}
   14e5c:	ldr	r4, [pc, #440]	; 1501c <free_node@@Base+0x1c8>
   14e60:	cmp	r3, #5
   14e64:	ldrls	pc, [pc, r3, lsl #2]
   14e68:	b	14fd4 <free_node@@Base+0x180>
   14e6c:	andeq	r4, r1, r4, lsl #29
   14e70:			; <UNDEFINED> instruction: 0x00014ebc
   14e74:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e78:	andeq	r4, r1, ip, lsr #30
   14e7c:	andeq	r4, r1, r4, ror #30
   14e80:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14e84:	ldr	r3, [r4, #112]	; 0x70
   14e88:	ldr	r2, [r4, #116]	; 0x74
   14e8c:	adds	r3, r3, #1
   14e90:	adc	r2, r2, #0
   14e94:	str	r3, [r4, #112]	; 0x70
   14e98:	str	r2, [r4, #116]	; 0x74
   14e9c:	bl	15278 <free_node_id@@Base>
   14ea0:	ldr	r3, [r4, #160]	; 0xa0
   14ea4:	ldr	r2, [r4, #164]	; 0xa4
   14ea8:	adds	r3, r3, #1
   14eac:	adc	r2, r2, #0
   14eb0:	str	r3, [r4, #160]	; 0xa0
   14eb4:	str	r2, [r4, #164]	; 0xa4
   14eb8:	pop	{r4, pc}
   14ebc:	ldr	r3, [r4, #120]	; 0x78
   14ec0:	ldr	r2, [r4, #124]	; 0x7c
   14ec4:	adds	r3, r3, #1
   14ec8:	adc	r2, r2, #0
   14ecc:	str	r3, [r4, #120]	; 0x78
   14ed0:	str	r2, [r4, #124]	; 0x7c
   14ed4:	bl	15200 <free_node_int@@Base>
   14ed8:	ldr	r3, [r4, #168]	; 0xa8
   14edc:	ldr	r2, [r4, #172]	; 0xac
   14ee0:	adds	r3, r3, #1
   14ee4:	adc	r2, r2, #0
   14ee8:	str	r3, [r4, #168]	; 0xa8
   14eec:	str	r2, [r4, #172]	; 0xac
   14ef0:	pop	{r4, pc}
   14ef4:	ldr	r3, [r4, #128]	; 0x80
   14ef8:	ldr	r2, [r4, #132]	; 0x84
   14efc:	adds	r3, r3, #1
   14f00:	adc	r2, r2, #0
   14f04:	str	r3, [r4, #128]	; 0x80
   14f08:	str	r2, [r4, #132]	; 0x84
   14f0c:	bl	15180 <free_node_function@@Base>
   14f10:	ldr	r3, [r4, #176]	; 0xb0
   14f14:	ldr	r2, [r4, #180]	; 0xb4
   14f18:	adds	r3, r3, #1
   14f1c:	adc	r2, r2, #0
   14f20:	str	r3, [r4, #176]	; 0xb0
   14f24:	str	r2, [r4, #180]	; 0xb4
   14f28:	pop	{r4, pc}
   14f2c:	ldr	r3, [r4, #136]	; 0x88
   14f30:	ldr	r2, [r4, #140]	; 0x8c
   14f34:	adds	r3, r3, #1
   14f38:	adc	r2, r2, #0
   14f3c:	str	r3, [r4, #136]	; 0x88
   14f40:	str	r2, [r4, #140]	; 0x8c
   14f44:	bl	15108 <free_node_return@@Base>
   14f48:	ldr	r3, [r4, #184]	; 0xb8
   14f4c:	ldr	r2, [r4, #188]	; 0xbc
   14f50:	adds	r3, r3, #1
   14f54:	adc	r2, r2, #0
   14f58:	str	r3, [r4, #184]	; 0xb8
   14f5c:	str	r2, [r4, #188]	; 0xbc
   14f60:	pop	{r4, pc}
   14f64:	ldr	r3, [r4, #144]	; 0x90
   14f68:	ldr	r2, [r4, #148]	; 0x94
   14f6c:	adds	r3, r3, #1
   14f70:	adc	r2, r2, #0
   14f74:	str	r3, [r4, #144]	; 0x90
   14f78:	str	r2, [r4, #148]	; 0x94
   14f7c:	bl	15028 <free_node_if@@Base>
   14f80:	ldr	r3, [r4, #192]	; 0xc0
   14f84:	ldr	r2, [r4, #196]	; 0xc4
   14f88:	adds	r3, r3, #1
   14f8c:	adc	r2, r2, #0
   14f90:	str	r3, [r4, #192]	; 0xc0
   14f94:	str	r2, [r4, #196]	; 0xc4
   14f98:	pop	{r4, pc}
   14f9c:	ldr	r3, [r4, #152]	; 0x98
   14fa0:	ldr	r2, [r4, #156]	; 0x9c
   14fa4:	adds	r3, r3, #1
   14fa8:	adc	r2, r2, #0
   14fac:	str	r3, [r4, #152]	; 0x98
   14fb0:	str	r2, [r4, #156]	; 0x9c
   14fb4:	bl	14d9c <free_node_boolean_operator@@Base>
   14fb8:	ldr	r3, [r4, #200]	; 0xc8
   14fbc:	ldr	r2, [r4, #204]	; 0xcc
   14fc0:	adds	r3, r3, #1
   14fc4:	adc	r2, r2, #0
   14fc8:	str	r3, [r4, #200]	; 0xc8
   14fcc:	str	r2, [r4, #204]	; 0xcc
   14fd0:	pop	{r4, pc}
   14fd4:	ldr	r3, [r4, #104]	; 0x68
   14fd8:	ldr	r2, [r4, #108]	; 0x6c
   14fdc:	ldr	r0, [pc, #60]	; 15020 <free_node@@Base+0x1cc>
   14fe0:	adds	r3, r3, #1
   14fe4:	str	r3, [r4, #104]	; 0x68
   14fe8:	adc	r2, r2, #0
   14fec:	ldr	r3, [pc, #48]	; 15024 <free_node@@Base+0x1d0>
   14ff0:	str	r2, [r4, #108]	; 0x6c
   14ff4:	ldr	r1, [r3]
   14ff8:	bl	119c0 <fputs@plt>
   14ffc:	ldr	r3, [r4, #208]	; 0xd0
   15000:	mov	r0, #1
   15004:	ldr	r2, [r4, #212]	; 0xd4
   15008:	adds	r3, r3, #1
   1500c:	adc	r2, r2, #0
   15010:	str	r3, [r4, #208]	; 0xd0
   15014:	str	r2, [r4, #212]	; 0xd4
   15018:	bl	11918 <exit@plt>
   1501c:	andeq	fp, r2, r0, lsl r2
   15020:	andeq	r8, r1, sp, ror #30
   15024:	andeq	sl, r2, r8, ror r9

00015028 <free_node_if@@Base>:
   15028:	push	{r4, r5, r6, lr}
   1502c:	mov	r5, r0
   15030:	ldr	r0, [r0, #4]
   15034:	ldr	r4, [pc, #196]	; 15100 <free_node_if@@Base+0xd8>
   15038:	cmp	r0, #0
   1503c:	bne	150c8 <free_node_if@@Base+0xa0>
   15040:	ldr	r3, [r4, #224]	; 0xe0
   15044:	ldr	r2, [r4, #228]	; 0xe4
   15048:	adds	r3, r3, #1
   1504c:	adc	r2, r2, #0
   15050:	str	r3, [r4, #224]	; 0xe0
   15054:	str	r2, [r4, #228]	; 0xe4
   15058:	ldr	r0, [r5, #8]
   1505c:	bl	14e54 <free_node@@Base>
   15060:	ldr	r3, [r4, #240]	; 0xf0
   15064:	ldr	r2, [r4, #244]	; 0xf4
   15068:	ldr	r0, [r5, #12]
   1506c:	adds	r3, r3, #1
   15070:	adc	r2, r2, #0
   15074:	str	r3, [r4, #240]	; 0xf0
   15078:	str	r2, [r4, #244]	; 0xf4
   1507c:	bl	14e54 <free_node@@Base>
   15080:	ldr	r3, [r4, #248]	; 0xf8
   15084:	ldr	r2, [r4, #252]	; 0xfc
   15088:	ldr	r0, [r5, #16]
   1508c:	adds	r3, r3, #1
   15090:	adc	r2, r2, #0
   15094:	str	r3, [r4, #248]	; 0xf8
   15098:	str	r2, [r4, #252]	; 0xfc
   1509c:	bl	14e54 <free_node@@Base>
   150a0:	ldr	r2, [pc, #92]	; 15104 <free_node_if@@Base+0xdc>
   150a4:	mov	r0, r5
   150a8:	pop	{r4, r5, r6, lr}
   150ac:	ldr	r3, [r2]
   150b0:	ldr	r1, [r2, #4]
   150b4:	adds	r3, r3, #1
   150b8:	adc	r1, r1, #0
   150bc:	str	r3, [r2]
   150c0:	str	r1, [r2, #4]
   150c4:	b	1187c <free@plt>
   150c8:	ldr	r3, [r4, #216]	; 0xd8
   150cc:	ldr	r2, [r4, #220]	; 0xdc
   150d0:	adds	r3, r3, #1
   150d4:	adc	r2, r2, #0
   150d8:	str	r3, [r4, #216]	; 0xd8
   150dc:	str	r2, [r4, #220]	; 0xdc
   150e0:	bl	14e54 <free_node@@Base>
   150e4:	ldr	r3, [r4, #232]	; 0xe8
   150e8:	ldr	r2, [r4, #236]	; 0xec
   150ec:	adds	r3, r3, #1
   150f0:	adc	r2, r2, #0
   150f4:	str	r3, [r4, #232]	; 0xe8
   150f8:	str	r2, [r4, #236]	; 0xec
   150fc:	b	15058 <free_node_if@@Base+0x30>
   15100:	andeq	fp, r2, r0, lsl r2
   15104:	andeq	fp, r2, r0, lsl r3

00015108 <free_node_return@@Base>:
   15108:	push	{r4, r5, r6, lr}
   1510c:	mov	r5, r0
   15110:	ldr	r0, [r0, #4]
   15114:	ldr	r4, [pc, #96]	; 1517c <free_node_return@@Base+0x74>
   15118:	cmp	r0, #0
   1511c:	bne	15144 <free_node_return@@Base+0x3c>
   15120:	ldr	r3, [r4]
   15124:	ldr	r2, [r4, #4]
   15128:	adds	r3, r3, #1
   1512c:	adc	r2, r2, #0
   15130:	str	r3, [r4]
   15134:	str	r2, [r4, #4]
   15138:	mov	r0, r5
   1513c:	pop	{r4, r5, r6, lr}
   15140:	b	1187c <free@plt>
   15144:	ldr	r3, [r4, #-8]
   15148:	ldr	r2, [r4, #-4]
   1514c:	adds	r3, r3, #1
   15150:	adc	r2, r2, #0
   15154:	str	r3, [r4, #-8]
   15158:	str	r2, [r4, #-4]
   1515c:	bl	14e54 <free_node@@Base>
   15160:	ldr	r3, [r4, #8]
   15164:	ldr	r2, [r4, #12]
   15168:	adds	r3, r3, #1
   1516c:	adc	r2, r2, #0
   15170:	str	r3, [r4, #8]
   15174:	str	r2, [r4, #12]
   15178:	b	15138 <free_node_return@@Base+0x30>
   1517c:	andeq	fp, r2, r0, lsr #6

00015180 <free_node_function@@Base>:
   15180:	push	{r4, r5, r6, lr}
   15184:	mov	r5, r0
   15188:	ldr	r0, [r0, #4]
   1518c:	ldr	r4, [pc, #104]	; 151fc <free_node_function@@Base+0x7c>
   15190:	cmp	r0, #0
   15194:	bne	151c4 <free_node_function@@Base+0x44>
   15198:	ldr	r3, [r4, #8]
   1519c:	ldr	r2, [r4, #12]
   151a0:	adds	r3, r3, #1
   151a4:	adc	r2, r2, #0
   151a8:	str	r3, [r4, #8]
   151ac:	str	r2, [r4, #12]
   151b0:	ldr	r0, [r5, #8]
   151b4:	bl	1187c <free@plt>
   151b8:	mov	r0, r5
   151bc:	pop	{r4, r5, r6, lr}
   151c0:	b	1187c <free@plt>
   151c4:	ldr	r3, [r4]
   151c8:	ldr	r2, [r4, #4]
   151cc:	adds	r3, r3, #1
   151d0:	adc	r2, r2, #0
   151d4:	str	r3, [r4]
   151d8:	str	r2, [r4, #4]
   151dc:	bl	14e54 <free_node@@Base>
   151e0:	ldr	r3, [r4, #16]
   151e4:	ldr	r2, [r4, #20]
   151e8:	adds	r3, r3, #1
   151ec:	adc	r2, r2, #0
   151f0:	str	r3, [r4, #16]
   151f4:	str	r2, [r4, #20]
   151f8:	b	151b0 <free_node_function@@Base+0x30>
   151fc:	andeq	fp, r2, r0, lsr r3

00015200 <free_node_int@@Base>:
   15200:	push	{r4, r5, r6, lr}
   15204:	mov	r5, r0
   15208:	ldr	r0, [r0, #4]
   1520c:	ldr	r4, [pc, #96]	; 15274 <free_node_int@@Base+0x74>
   15210:	cmp	r0, #0
   15214:	bne	1523c <free_node_int@@Base+0x3c>
   15218:	ldr	r3, [r4]
   1521c:	ldr	r2, [r4, #4]
   15220:	adds	r3, r3, #1
   15224:	adc	r2, r2, #0
   15228:	str	r3, [r4]
   1522c:	str	r2, [r4, #4]
   15230:	mov	r0, r5
   15234:	pop	{r4, r5, r6, lr}
   15238:	b	1187c <free@plt>
   1523c:	ldr	r3, [r4, #-8]
   15240:	ldr	r2, [r4, #-4]
   15244:	adds	r3, r3, #1
   15248:	adc	r2, r2, #0
   1524c:	str	r3, [r4, #-8]
   15250:	str	r2, [r4, #-4]
   15254:	bl	14e54 <free_node@@Base>
   15258:	ldr	r3, [r4, #8]
   1525c:	ldr	r2, [r4, #12]
   15260:	adds	r3, r3, #1
   15264:	adc	r2, r2, #0
   15268:	str	r3, [r4, #8]
   1526c:	str	r2, [r4, #12]
   15270:	b	15230 <free_node_int@@Base+0x30>
   15274:	andeq	fp, r2, r0, asr r3

00015278 <free_node_id@@Base>:
   15278:	push	{r4, r5, r6, lr}
   1527c:	mov	r5, r0
   15280:	ldr	r0, [r0, #4]
   15284:	ldr	r4, [pc, #96]	; 152ec <free_node_id@@Base+0x74>
   15288:	cmp	r0, #0
   1528c:	bne	152b4 <free_node_id@@Base+0x3c>
   15290:	ldr	r3, [r4, #8]
   15294:	ldr	r2, [r4, #12]
   15298:	adds	r3, r3, #1
   1529c:	adc	r2, r2, #0
   152a0:	str	r3, [r4, #8]
   152a4:	str	r2, [r4, #12]
   152a8:	mov	r0, r5
   152ac:	pop	{r4, r5, r6, lr}
   152b0:	b	1187c <free@plt>
   152b4:	ldr	r3, [r4]
   152b8:	ldr	r2, [r4, #4]
   152bc:	adds	r3, r3, #1
   152c0:	adc	r2, r2, #0
   152c4:	str	r3, [r4]
   152c8:	str	r2, [r4, #4]
   152cc:	bl	14e54 <free_node@@Base>
   152d0:	ldr	r3, [r4, #16]
   152d4:	ldr	r2, [r4, #20]
   152d8:	adds	r3, r3, #1
   152dc:	adc	r2, r2, #0
   152e0:	str	r3, [r4, #16]
   152e4:	str	r2, [r4, #20]
   152e8:	b	152a8 <free_node_id@@Base+0x30>
   152ec:	andeq	fp, r2, r0, ror #6

000152f0 <get_boolean_op_value@@Base>:
   152f0:	push	{r4, r5, r6, lr}
   152f4:	mov	r1, #2
   152f8:	ldr	r6, [r0, #4]
   152fc:	ldr	r4, [pc, #620]	; 15570 <get_boolean_op_value@@Base+0x280>
   15300:	mov	r0, r6
   15304:	bl	11978 <strnlen@plt>
   15308:	cmp	r0, #2
   1530c:	bne	1548c <get_boolean_op_value@@Base+0x19c>
   15310:	mov	r2, r0
   15314:	mov	r5, r0
   15318:	ldr	r1, [pc, #596]	; 15574 <get_boolean_op_value@@Base+0x284>
   1531c:	mov	r0, r6
   15320:	bl	119cc <strncmp@plt>
   15324:	cmp	r0, #0
   15328:	beq	15550 <get_boolean_op_value@@Base+0x260>
   1532c:	mov	r2, r5
   15330:	ldr	r1, [pc, #576]	; 15578 <get_boolean_op_value@@Base+0x288>
   15334:	mov	r0, r6
   15338:	bl	119cc <strncmp@plt>
   1533c:	cmp	r0, #0
   15340:	bne	15368 <get_boolean_op_value@@Base+0x78>
   15344:	ldr	r3, [r4]
   15348:	mov	r5, #1
   1534c:	ldr	r2, [r4, #4]
   15350:	adds	r3, r3, #1
   15354:	adc	r2, r2, #0
   15358:	str	r3, [r4]
   1535c:	str	r2, [r4, #4]
   15360:	mov	r0, r5
   15364:	pop	{r4, r5, r6, pc}
   15368:	mov	r2, r5
   1536c:	ldr	r1, [pc, #520]	; 1557c <get_boolean_op_value@@Base+0x28c>
   15370:	mov	r0, r6
   15374:	bl	119cc <strncmp@plt>
   15378:	cmp	r0, #0
   1537c:	bne	1539c <get_boolean_op_value@@Base+0xac>
   15380:	ldr	r3, [r4, #8]
   15384:	ldr	r2, [r4, #12]
   15388:	adds	r3, r3, #1
   1538c:	adc	r2, r2, #0
   15390:	str	r3, [r4, #8]
   15394:	str	r2, [r4, #12]
   15398:	b	15360 <get_boolean_op_value@@Base+0x70>
   1539c:	mov	r2, r5
   153a0:	ldr	r1, [pc, #472]	; 15580 <get_boolean_op_value@@Base+0x290>
   153a4:	mov	r0, r6
   153a8:	bl	119cc <strncmp@plt>
   153ac:	cmp	r0, #0
   153b0:	bne	153d4 <get_boolean_op_value@@Base+0xe4>
   153b4:	ldr	r3, [r4, #16]
   153b8:	mov	r5, #3
   153bc:	ldr	r2, [r4, #20]
   153c0:	adds	r3, r3, #1
   153c4:	adc	r2, r2, #0
   153c8:	str	r3, [r4, #16]
   153cc:	str	r2, [r4, #20]
   153d0:	b	15360 <get_boolean_op_value@@Base+0x70>
   153d4:	mov	r2, r5
   153d8:	ldr	r1, [pc, #420]	; 15584 <get_boolean_op_value@@Base+0x294>
   153dc:	mov	r0, r6
   153e0:	bl	119cc <strncmp@plt>
   153e4:	cmp	r0, #0
   153e8:	bne	1540c <get_boolean_op_value@@Base+0x11c>
   153ec:	ldr	r3, [r4, #24]
   153f0:	mov	r5, #4
   153f4:	ldr	r2, [r4, #28]
   153f8:	adds	r3, r3, #1
   153fc:	adc	r2, r2, #0
   15400:	str	r3, [r4, #24]
   15404:	str	r2, [r4, #28]
   15408:	b	15360 <get_boolean_op_value@@Base+0x70>
   1540c:	ldr	r3, [r4, #32]
   15410:	mov	r0, r6
   15414:	ldr	r2, [r4, #36]	; 0x24
   15418:	ldr	r1, [pc, #360]	; 15588 <get_boolean_op_value@@Base+0x298>
   1541c:	adds	r3, r3, #1
   15420:	adc	r2, r2, #0
   15424:	str	r3, [r4, #32]
   15428:	str	r2, [r4, #36]	; 0x24
   1542c:	mov	r2, r5
   15430:	bl	119cc <strncmp@plt>
   15434:	cmp	r0, #0
   15438:	moveq	r5, #5
   1543c:	beq	15360 <get_boolean_op_value@@Base+0x70>
   15440:	ldr	r3, [r4, #40]	; 0x28
   15444:	ldr	r2, [r4, #44]	; 0x2c
   15448:	ldr	r1, [pc, #316]	; 1558c <get_boolean_op_value@@Base+0x29c>
   1544c:	adds	r3, r3, #1
   15450:	str	r3, [r4, #40]	; 0x28
   15454:	adc	r2, r2, #0
   15458:	ldr	r3, [pc, #304]	; 15590 <get_boolean_op_value@@Base+0x2a0>
   1545c:	str	r2, [r4, #44]	; 0x2c
   15460:	mov	r2, r6
   15464:	ldr	r0, [r3]
   15468:	bl	11930 <fprintf@plt>
   1546c:	ldr	r3, [r4, #48]	; 0x30
   15470:	ldr	r2, [r4, #52]	; 0x34
   15474:	adds	r3, r3, #1
   15478:	adc	r2, r2, #0
   1547c:	str	r3, [r4, #48]	; 0x30
   15480:	str	r2, [r4, #52]	; 0x34
   15484:	mov	r0, #1
   15488:	bl	11918 <exit@plt>
   1548c:	ldrb	r3, [r6]
   15490:	cmp	r3, #60	; 0x3c
   15494:	beq	154c8 <get_boolean_op_value@@Base+0x1d8>
   15498:	cmp	r3, #62	; 0x3e
   1549c:	beq	154e8 <get_boolean_op_value@@Base+0x1f8>
   154a0:	cmp	r3, #33	; 0x21
   154a4:	bne	15508 <get_boolean_op_value@@Base+0x218>
   154a8:	ldr	r3, [r4, #64]	; 0x40
   154ac:	mov	r5, #8
   154b0:	ldr	r2, [r4, #68]	; 0x44
   154b4:	adds	r3, r3, #1
   154b8:	adc	r2, r2, #0
   154bc:	str	r3, [r4, #64]	; 0x40
   154c0:	str	r2, [r4, #68]	; 0x44
   154c4:	b	15360 <get_boolean_op_value@@Base+0x70>
   154c8:	ldr	r3, [r4, #72]	; 0x48
   154cc:	mov	r5, #6
   154d0:	ldr	r2, [r4, #76]	; 0x4c
   154d4:	adds	r3, r3, #1
   154d8:	adc	r2, r2, #0
   154dc:	str	r3, [r4, #72]	; 0x48
   154e0:	str	r2, [r4, #76]	; 0x4c
   154e4:	b	15360 <get_boolean_op_value@@Base+0x70>
   154e8:	ldr	r3, [r4, #80]	; 0x50
   154ec:	mov	r5, #7
   154f0:	ldr	r2, [r4, #84]	; 0x54
   154f4:	adds	r3, r3, #1
   154f8:	adc	r2, r2, #0
   154fc:	str	r3, [r4, #80]	; 0x50
   15500:	str	r2, [r4, #84]	; 0x54
   15504:	b	15360 <get_boolean_op_value@@Base+0x70>
   15508:	ldr	r3, [r4, #56]	; 0x38
   1550c:	ldr	r2, [r4, #60]	; 0x3c
   15510:	ldr	r1, [pc, #116]	; 1558c <get_boolean_op_value@@Base+0x29c>
   15514:	adds	r3, r3, #1
   15518:	str	r3, [r4, #56]	; 0x38
   1551c:	adc	r2, r2, #0
   15520:	ldr	r3, [pc, #104]	; 15590 <get_boolean_op_value@@Base+0x2a0>
   15524:	str	r2, [r4, #60]	; 0x3c
   15528:	mov	r2, r6
   1552c:	ldr	r0, [r3]
   15530:	bl	11930 <fprintf@plt>
   15534:	ldr	r3, [r4, #88]	; 0x58
   15538:	ldr	r2, [r4, #92]	; 0x5c
   1553c:	adds	r3, r3, #1
   15540:	adc	r2, r2, #0
   15544:	str	r3, [r4, #88]	; 0x58
   15548:	str	r2, [r4, #92]	; 0x5c
   1554c:	b	15484 <get_boolean_op_value@@Base+0x194>
   15550:	ldr	r3, [r4, #-8]
   15554:	mov	r5, r0
   15558:	ldr	r2, [r4, #-4]
   1555c:	adds	r3, r3, #1
   15560:	adc	r2, r2, #0
   15564:	str	r3, [r4, #-8]
   15568:	str	r2, [r4, #-4]
   1556c:	b	15360 <get_boolean_op_value@@Base+0x70>
   15570:	andeq	fp, r2, r0, lsl #7
   15574:	andeq	r8, r1, sp, lsl #31
   15578:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1557c:	muleq	r1, r3, pc	; <UNPREDICTABLE>
   15580:	muleq	r1, r6, pc	; <UNPREDICTABLE>
   15584:	muleq	r1, r9, pc	; <UNPREDICTABLE>
   15588:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1558c:	muleq	r1, pc, pc	; <UNPREDICTABLE>
   15590:	andeq	sl, r2, r8, ror r9

00015594 <init_grammar@@Base>:
   15594:	ldr	r2, [pc, #20]	; 155b0 <init_grammar@@Base+0x1c>
   15598:	str	r1, [r0]
   1559c:	ldm	r2, {r3, ip}
   155a0:	adds	r3, r3, #1
   155a4:	adc	ip, ip, #0
   155a8:	stm	r2, {r3, ip}
   155ac:	bx	lr
   155b0:	andeq	fp, r2, r0, ror #7

000155b4 <destroy_grammar@@Base>:
   155b4:	ldr	r2, [pc, #24]	; 155d4 <destroy_grammar@@Base+0x20>
   155b8:	ldr	r3, [r2, #8]
   155bc:	ldr	r1, [r2, #12]
   155c0:	adds	r3, r3, #1
   155c4:	adc	r1, r1, #0
   155c8:	str	r3, [r2, #8]
   155cc:	str	r1, [r2, #12]
   155d0:	bx	lr
   155d4:	andeq	fp, r2, r0, ror #7

000155d8 <read_return_expression@@Base>:
   155d8:	push	{r4, r5, r6, r7, r8, lr}
   155dc:	mov	r5, r0
   155e0:	ldr	r4, [pc, #328]	; 15730 <read_return_expression@@Base+0x158>
   155e4:	ldr	r0, [r0]
   155e8:	ldr	r3, [r4, #16]
   155ec:	ldr	r2, [r4, #20]
   155f0:	adds	r3, r3, #1
   155f4:	adc	r2, r2, #0
   155f8:	str	r3, [r4, #16]
   155fc:	str	r2, [r4, #20]
   15600:	bl	122dc <next@@Base>
   15604:	ldr	r3, [r0]
   15608:	cmp	r3, #1
   1560c:	beq	15634 <read_return_expression@@Base+0x5c>
   15610:	ldr	r3, [r4, #24]
   15614:	ldr	r2, [r4, #28]
   15618:	adds	r3, r3, #1
   1561c:	adc	r2, r2, #0
   15620:	str	r3, [r4, #24]
   15624:	str	r2, [r4, #28]
   15628:	mov	r6, #0
   1562c:	mov	r0, r6
   15630:	pop	{r4, r5, r6, r7, r8, pc}
   15634:	ldr	r3, [r4, #32]
   15638:	mov	r6, r0
   1563c:	mov	r0, #12
   15640:	ldr	r2, [r4, #36]	; 0x24
   15644:	adds	r3, r3, #1
   15648:	adc	r2, r2, #0
   1564c:	str	r3, [r4, #32]
   15650:	str	r2, [r4, #36]	; 0x24
   15654:	bl	118e8 <malloc@plt>
   15658:	ldr	r1, [r6, #4]
   1565c:	mov	r7, r0
   15660:	bl	14c80 <init_node_int@@Base>
   15664:	ldr	r3, [r4, #40]	; 0x28
   15668:	mov	r0, r6
   1566c:	ldr	r2, [r4, #44]	; 0x2c
   15670:	adds	r3, r3, #1
   15674:	adc	r2, r2, #0
   15678:	str	r3, [r4, #40]	; 0x28
   1567c:	str	r2, [r4, #44]	; 0x2c
   15680:	bl	14a0c <free_token_int_value@@Base>
   15684:	ldr	r3, [r4, #48]	; 0x30
   15688:	mov	r0, #12
   1568c:	ldr	r2, [r4, #52]	; 0x34
   15690:	adds	r3, r3, #1
   15694:	adc	r2, r2, #0
   15698:	str	r3, [r4, #48]	; 0x30
   1569c:	str	r2, [r4, #52]	; 0x34
   156a0:	bl	118e8 <malloc@plt>
   156a4:	mov	r1, r7
   156a8:	mov	r6, r0
   156ac:	bl	14cf0 <init_node_return@@Base>
   156b0:	ldr	r3, [r4, #56]	; 0x38
   156b4:	ldr	r2, [r4, #60]	; 0x3c
   156b8:	ldr	r0, [r5]
   156bc:	adds	r3, r3, #1
   156c0:	adc	r2, r2, #0
   156c4:	str	r3, [r4, #56]	; 0x38
   156c8:	str	r2, [r4, #60]	; 0x3c
   156cc:	bl	122dc <next@@Base>
   156d0:	ldr	r3, [r0]
   156d4:	cmp	r3, #8
   156d8:	beq	156f8 <read_return_expression@@Base+0x120>
   156dc:	ldr	r3, [r4, #64]	; 0x40
   156e0:	ldr	r2, [r4, #68]	; 0x44
   156e4:	adds	r3, r3, #1
   156e8:	adc	r2, r2, #0
   156ec:	str	r3, [r4, #64]	; 0x40
   156f0:	str	r2, [r4, #68]	; 0x44
   156f4:	b	15628 <read_return_expression@@Base+0x50>
   156f8:	ldr	r3, [r4, #72]	; 0x48
   156fc:	ldr	r2, [r4, #76]	; 0x4c
   15700:	adds	r3, r3, #1
   15704:	adc	r2, r2, #0
   15708:	str	r3, [r4, #72]	; 0x48
   1570c:	str	r2, [r4, #76]	; 0x4c
   15710:	bl	14b08 <free_token_semicolon@@Base>
   15714:	ldr	r3, [r4, #80]	; 0x50
   15718:	ldr	r2, [r4, #84]	; 0x54
   1571c:	adds	r3, r3, #1
   15720:	adc	r2, r2, #0
   15724:	str	r3, [r4, #80]	; 0x50
   15728:	str	r2, [r4, #84]	; 0x54
   1572c:	b	1562c <read_return_expression@@Base+0x54>
   15730:	andeq	fp, r2, r0, ror #7

00015734 <read_boolean_unary_expression@@Base>:
   15734:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15738:	mov	r7, r0
   1573c:	mov	r0, #20
   15740:	ldr	r4, [pc, #440]	; 15900 <read_boolean_unary_expression@@Base+0x1cc>
   15744:	ldr	r3, [r4, #88]	; 0x58
   15748:	ldr	r2, [r4, #92]	; 0x5c
   1574c:	adds	r3, r3, #1
   15750:	adc	r2, r2, #0
   15754:	str	r3, [r4, #88]	; 0x58
   15758:	str	r2, [r4, #92]	; 0x5c
   1575c:	bl	118e8 <malloc@plt>
   15760:	mov	r5, r0
   15764:	ldr	r0, [r7]
   15768:	bl	122dc <next@@Base>
   1576c:	ldr	r8, [r0]
   15770:	cmp	r8, #12
   15774:	beq	157bc <read_boolean_unary_expression@@Base+0x88>
   15778:	ldr	r3, [r4, #96]	; 0x60
   1577c:	mov	r0, r5
   15780:	ldr	r2, [r4, #100]	; 0x64
   15784:	adds	r3, r3, #1
   15788:	adc	r2, r2, #0
   1578c:	str	r3, [r4, #96]	; 0x60
   15790:	str	r2, [r4, #100]	; 0x64
   15794:	bl	14d9c <free_node_boolean_operator@@Base>
   15798:	ldr	r3, [r4, #112]	; 0x70
   1579c:	ldr	r2, [r4, #116]	; 0x74
   157a0:	adds	r3, r3, #1
   157a4:	adc	r2, r2, #0
   157a8:	str	r3, [r4, #112]	; 0x70
   157ac:	str	r2, [r4, #116]	; 0x74
   157b0:	mov	r5, #0
   157b4:	mov	r0, r5
   157b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157bc:	ldr	r3, [r4, #104]	; 0x68
   157c0:	mov	r9, r0
   157c4:	ldr	r2, [r4, #108]	; 0x6c
   157c8:	adds	r3, r3, #1
   157cc:	adc	r2, r2, #0
   157d0:	str	r3, [r4, #104]	; 0x68
   157d4:	str	r2, [r4, #108]	; 0x6c
   157d8:	bl	152f0 <get_boolean_op_value@@Base>
   157dc:	ldr	r3, [r4, #120]	; 0x78
   157e0:	mov	r6, r0
   157e4:	mov	r0, r9
   157e8:	ldr	r2, [r4, #124]	; 0x7c
   157ec:	adds	r3, r3, #1
   157f0:	adc	r2, r2, #0
   157f4:	str	r3, [r4, #120]	; 0x78
   157f8:	str	r2, [r4, #124]	; 0x7c
   157fc:	bl	14b98 <free_token_boolean_op@@Base>
   15800:	ldr	r3, [r4, #128]	; 0x80
   15804:	ldr	r2, [r4, #132]	; 0x84
   15808:	ldr	r0, [r7]
   1580c:	adds	r3, r3, #1
   15810:	adc	r2, r2, #0
   15814:	str	r3, [r4, #128]	; 0x80
   15818:	str	r2, [r4, #132]	; 0x84
   1581c:	bl	122dc <next@@Base>
   15820:	ldr	r3, [r0]
   15824:	mov	r9, r0
   15828:	cmp	r3, #1
   1582c:	beq	1586c <read_boolean_unary_expression@@Base+0x138>
   15830:	ldr	r3, [r4, #136]	; 0x88
   15834:	mov	r0, r5
   15838:	ldr	r2, [r4, #140]	; 0x8c
   1583c:	adds	r3, r3, #1
   15840:	adc	r2, r2, #0
   15844:	str	r3, [r4, #136]	; 0x88
   15848:	str	r2, [r4, #140]	; 0x8c
   1584c:	bl	14d9c <free_node_boolean_operator@@Base>
   15850:	ldr	r3, [r4, #152]	; 0x98
   15854:	ldr	r2, [r4, #156]	; 0x9c
   15858:	adds	r3, r3, #1
   1585c:	adc	r2, r2, #0
   15860:	str	r3, [r4, #152]	; 0x98
   15864:	str	r2, [r4, #156]	; 0x9c
   15868:	b	157b0 <read_boolean_unary_expression@@Base+0x7c>
   1586c:	ldr	r3, [r4, #144]	; 0x90
   15870:	mov	r0, r8
   15874:	ldr	r2, [r4, #148]	; 0x94
   15878:	adds	r3, r3, #1
   1587c:	adc	r2, r2, #0
   15880:	str	r3, [r4, #144]	; 0x90
   15884:	str	r2, [r4, #148]	; 0x94
   15888:	bl	118e8 <malloc@plt>
   1588c:	ldr	r1, [r9, #4]
   15890:	mov	r7, r0
   15894:	bl	14c80 <init_node_int@@Base>
   15898:	ldr	r3, [r4, #160]	; 0xa0
   1589c:	mov	r0, r9
   158a0:	ldr	r2, [r4, #164]	; 0xa4
   158a4:	adds	r3, r3, #1
   158a8:	adc	r2, r2, #0
   158ac:	str	r3, [r4, #160]	; 0xa0
   158b0:	str	r2, [r4, #164]	; 0xa4
   158b4:	bl	14a0c <free_token_int_value@@Base>
   158b8:	ldr	r3, [r4, #168]	; 0xa8
   158bc:	mov	r2, r7
   158c0:	mov	r0, r5
   158c4:	ldr	r1, [r4, #172]	; 0xac
   158c8:	adds	r3, r3, #1
   158cc:	adc	r1, r1, #0
   158d0:	str	r3, [r4, #168]	; 0xa8
   158d4:	mov	r3, #0
   158d8:	str	r1, [r4, #172]	; 0xac
   158dc:	mov	r1, r6
   158e0:	bl	14d60 <init_node_boolean_operator@@Base>
   158e4:	ldr	r3, [r4, #176]	; 0xb0
   158e8:	ldr	r2, [r4, #180]	; 0xb4
   158ec:	adds	r3, r3, #1
   158f0:	adc	r2, r2, #0
   158f4:	str	r3, [r4, #176]	; 0xb0
   158f8:	str	r2, [r4, #180]	; 0xb4
   158fc:	b	157b4 <read_boolean_unary_expression@@Base+0x80>
   15900:	andeq	fp, r2, r0, ror #7

00015904 <read_boolean_binary_expression@@Base>:
   15904:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15908:	mov	r9, r0
   1590c:	ldr	r4, [pc, #712]	; 15bdc <read_boolean_binary_expression@@Base+0x2d8>
   15910:	ldr	r0, [r0]
   15914:	ldr	r3, [r4, #184]	; 0xb8
   15918:	ldr	r2, [r4, #188]	; 0xbc
   1591c:	adds	r3, r3, #1
   15920:	adc	r2, r2, #0
   15924:	str	r3, [r4, #184]	; 0xb8
   15928:	str	r2, [r4, #188]	; 0xbc
   1592c:	bl	122dc <next@@Base>
   15930:	ldr	r1, [r0]
   15934:	mov	r5, r0
   15938:	cmp	r1, #1
   1593c:	beq	159c8 <read_boolean_binary_expression@@Base+0xc4>
   15940:	ldr	r3, [r4, #192]	; 0xc0
   15944:	ldr	r2, [r4, #196]	; 0xc4
   15948:	adds	r3, r3, #1
   1594c:	adc	r2, r2, #0
   15950:	cmp	r1, #12
   15954:	str	r3, [r4, #192]	; 0xc0
   15958:	str	r2, [r4, #196]	; 0xc4
   1595c:	bne	15a80 <read_boolean_binary_expression@@Base+0x17c>
   15960:	ldr	r3, [r4, #208]	; 0xd0
   15964:	mov	r1, r0
   15968:	ldr	r2, [r4, #212]	; 0xd4
   1596c:	ldr	r0, [r9]
   15970:	adds	r3, r3, #1
   15974:	adc	r2, r2, #0
   15978:	str	r3, [r4, #208]	; 0xd0
   1597c:	str	r2, [r4, #212]	; 0xd4
   15980:	bl	12440 <push_back@@Base>
   15984:	ldr	r3, [r4, #216]	; 0xd8
   15988:	mov	r0, r9
   1598c:	ldr	r2, [r4, #220]	; 0xdc
   15990:	adds	r3, r3, #1
   15994:	adc	r2, r2, #0
   15998:	str	r3, [r4, #216]	; 0xd8
   1599c:	str	r2, [r4, #220]	; 0xdc
   159a0:	bl	15734 <read_boolean_unary_expression@@Base>
   159a4:	ldr	r3, [r4, #224]	; 0xe0
   159a8:	mov	r5, r0
   159ac:	ldr	r2, [r4, #228]	; 0xe4
   159b0:	adds	r3, r3, #1
   159b4:	adc	r2, r2, #0
   159b8:	str	r3, [r4, #224]	; 0xe0
   159bc:	str	r2, [r4, #228]	; 0xe4
   159c0:	mov	r0, r5
   159c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159c8:	ldr	r3, [r4, #200]	; 0xc8
   159cc:	mov	r0, #12
   159d0:	ldr	r2, [r4, #204]	; 0xcc
   159d4:	adds	r3, r3, #1
   159d8:	adc	r2, r2, #0
   159dc:	str	r3, [r4, #200]	; 0xc8
   159e0:	str	r2, [r4, #204]	; 0xcc
   159e4:	bl	118e8 <malloc@plt>
   159e8:	ldr	r1, [r5, #4]
   159ec:	mov	r7, r0
   159f0:	bl	14c80 <init_node_int@@Base>
   159f4:	ldr	r3, [r4, #232]	; 0xe8
   159f8:	mov	r0, r5
   159fc:	add	r5, r4, #272	; 0x110
   15a00:	ldr	r2, [r4, #236]	; 0xec
   15a04:	adds	r3, r3, #1
   15a08:	adc	r2, r2, #0
   15a0c:	str	r3, [r4, #232]	; 0xe8
   15a10:	str	r2, [r4, #236]	; 0xec
   15a14:	bl	14a0c <free_token_int_value@@Base>
   15a18:	ldr	r3, [r4, #240]	; 0xf0
   15a1c:	ldr	r2, [r4, #244]	; 0xf4
   15a20:	ldr	r0, [r9]
   15a24:	adds	r3, r3, #1
   15a28:	adc	r2, r2, #0
   15a2c:	str	r3, [r4, #240]	; 0xf0
   15a30:	str	r2, [r4, #244]	; 0xf4
   15a34:	bl	122dc <next@@Base>
   15a38:	ldr	sl, [r0]
   15a3c:	mov	r6, r0
   15a40:	cmp	sl, #12
   15a44:	beq	15a88 <read_boolean_binary_expression@@Base+0x184>
   15a48:	ldr	r3, [r4, #248]	; 0xf8
   15a4c:	mov	r0, r7
   15a50:	ldr	r2, [r4, #252]	; 0xfc
   15a54:	adds	r3, r3, #1
   15a58:	adc	r2, r2, #0
   15a5c:	str	r3, [r4, #248]	; 0xf8
   15a60:	str	r2, [r4, #252]	; 0xfc
   15a64:	bl	14e54 <free_node@@Base>
   15a68:	ldr	r3, [r5, #-8]
   15a6c:	ldr	r2, [r5, #-4]
   15a70:	adds	r3, r3, #1
   15a74:	adc	r2, r2, #0
   15a78:	str	r3, [r5, #-8]
   15a7c:	str	r2, [r5, #-4]
   15a80:	mov	r5, #0
   15a84:	b	159c0 <read_boolean_binary_expression@@Base+0xbc>
   15a88:	ldr	r3, [r4, #256]	; 0x100
   15a8c:	ldr	r1, [r4, #260]	; 0x104
   15a90:	adds	r3, r3, #1
   15a94:	adc	r1, r1, #0
   15a98:	str	r3, [r4, #256]	; 0x100
   15a9c:	str	r1, [r4, #260]	; 0x104
   15aa0:	bl	152f0 <get_boolean_op_value@@Base>
   15aa4:	ldr	r3, [r5]
   15aa8:	mov	r8, r0
   15aac:	mov	r0, r6
   15ab0:	add	r6, r4, #288	; 0x120
   15ab4:	ldr	r2, [r5, #4]
   15ab8:	adds	r3, r3, #1
   15abc:	adc	r2, r2, #0
   15ac0:	str	r3, [r5]
   15ac4:	str	r2, [r5, #4]
   15ac8:	add	r5, r4, #304	; 0x130
   15acc:	bl	14b98 <free_token_boolean_op@@Base>
   15ad0:	ldr	r3, [r4, #280]	; 0x118
   15ad4:	ldr	r2, [r4, #284]	; 0x11c
   15ad8:	ldr	r0, [r9]
   15adc:	adds	r3, r3, #1
   15ae0:	adc	r2, r2, #0
   15ae4:	str	r3, [r4, #280]	; 0x118
   15ae8:	str	r2, [r4, #284]	; 0x11c
   15aec:	bl	122dc <next@@Base>
   15af0:	ldr	r3, [r0]
   15af4:	mov	r9, r0
   15af8:	cmp	r3, #1
   15afc:	beq	15b3c <read_boolean_binary_expression@@Base+0x238>
   15b00:	ldr	r3, [r4, #288]	; 0x120
   15b04:	mov	r0, r7
   15b08:	ldr	r2, [r4, #292]	; 0x124
   15b0c:	adds	r3, r3, #1
   15b10:	adc	r2, r2, #0
   15b14:	str	r3, [r4, #288]	; 0x120
   15b18:	str	r2, [r4, #292]	; 0x124
   15b1c:	bl	14e54 <free_node@@Base>
   15b20:	ldr	r3, [r5]
   15b24:	ldr	r2, [r5, #4]
   15b28:	adds	r3, r3, #1
   15b2c:	adc	r2, r2, #0
   15b30:	str	r3, [r5]
   15b34:	str	r2, [r5, #4]
   15b38:	b	15a80 <read_boolean_binary_expression@@Base+0x17c>
   15b3c:	ldr	r3, [r5, #-8]
   15b40:	mov	r0, sl
   15b44:	add	r4, r4, #336	; 0x150
   15b48:	ldr	r2, [r5, #-4]
   15b4c:	adds	r3, r3, #1
   15b50:	adc	r2, r2, #0
   15b54:	str	r3, [r5, #-8]
   15b58:	str	r2, [r5, #-4]
   15b5c:	bl	118e8 <malloc@plt>
   15b60:	ldr	r1, [r9, #4]
   15b64:	mov	r6, r0
   15b68:	bl	14c80 <init_node_int@@Base>
   15b6c:	ldr	r2, [r4, #-24]	; 0xffffffe8
   15b70:	mov	r0, r9
   15b74:	ldr	r3, [r4, #-20]	; 0xffffffec
   15b78:	adds	r2, r2, #1
   15b7c:	adc	r3, r3, #0
   15b80:	str	r2, [r4, #-24]	; 0xffffffe8
   15b84:	str	r3, [r4, #-20]	; 0xffffffec
   15b88:	bl	14a0c <free_token_int_value@@Base>
   15b8c:	ldr	r2, [r4, #-16]
   15b90:	mov	r0, #20
   15b94:	ldr	r3, [r4, #-12]
   15b98:	adds	r2, r2, #1
   15b9c:	adc	r3, r3, #0
   15ba0:	str	r2, [r4, #-16]
   15ba4:	str	r3, [r4, #-12]
   15ba8:	bl	118e8 <malloc@plt>
   15bac:	mov	r3, r6
   15bb0:	mov	r2, r7
   15bb4:	mov	r1, r8
   15bb8:	mov	r5, r0
   15bbc:	bl	14d60 <init_node_boolean_operator@@Base>
   15bc0:	ldr	r3, [r4, #-8]
   15bc4:	ldr	r2, [r4, #-4]
   15bc8:	adds	r3, r3, #1
   15bcc:	adc	r2, r2, #0
   15bd0:	str	r3, [r4, #-8]
   15bd4:	str	r2, [r4, #-4]
   15bd8:	b	159c0 <read_boolean_binary_expression@@Base+0xbc>
   15bdc:	andeq	fp, r2, r0, ror #7

00015be0 <read_single_boolean_expression@@Base>:
   15be0:	cmp	r1, #0
   15be4:	push	{r4, r5, r6, r7, r8, lr}
   15be8:	ldr	r4, [pc, #236]	; 15cdc <read_single_boolean_expression@@Base+0xfc>
   15bec:	bne	15c30 <read_single_boolean_expression@@Base+0x50>
   15bf0:	ldr	r3, [r4]
   15bf4:	ldr	r2, [r4, #4]
   15bf8:	adds	r3, r3, #1
   15bfc:	adc	r2, r2, #0
   15c00:	str	r3, [r4]
   15c04:	str	r2, [r4, #4]
   15c08:	bl	15904 <read_boolean_binary_expression@@Base>
   15c0c:	ldr	r3, [r4, #8]
   15c10:	mov	r5, r0
   15c14:	ldr	r2, [r4, #12]
   15c18:	adds	r3, r3, #1
   15c1c:	adc	r2, r2, #0
   15c20:	str	r3, [r4, #8]
   15c24:	str	r2, [r4, #12]
   15c28:	mov	r0, r5
   15c2c:	pop	{r4, r5, r6, r7, r8, pc}
   15c30:	ldr	r1, [r2]
   15c34:	mov	r6, r2
   15c38:	cmp	r1, #0
   15c3c:	beq	15cbc <read_single_boolean_expression@@Base+0xdc>
   15c40:	mov	r7, r3
   15c44:	ldr	r3, [r4, #16]
   15c48:	ldr	r2, [r4, #20]
   15c4c:	adds	r3, r3, #1
   15c50:	adc	r2, r2, #0
   15c54:	str	r3, [r4, #16]
   15c58:	str	r2, [r4, #20]
   15c5c:	bl	15904 <read_boolean_binary_expression@@Base>
   15c60:	ldr	r2, [r4, #32]
   15c64:	mov	r8, r0
   15c68:	mov	r0, #20
   15c6c:	ldr	r1, [r4, #36]	; 0x24
   15c70:	adds	r2, r2, #1
   15c74:	adc	r1, r1, #0
   15c78:	str	r2, [r4, #32]
   15c7c:	str	r1, [r4, #36]	; 0x24
   15c80:	bl	118e8 <malloc@plt>
   15c84:	mov	r3, r8
   15c88:	mov	r2, #0
   15c8c:	mov	r1, r7
   15c90:	mov	r5, r0
   15c94:	bl	14d60 <init_node_boolean_operator@@Base>
   15c98:	mov	r3, #0
   15c9c:	ldr	r2, [r4, #44]	; 0x2c
   15ca0:	str	r3, [r6]
   15ca4:	ldr	r3, [r4, #40]	; 0x28
   15ca8:	adds	r3, r3, #1
   15cac:	adc	r2, r2, #0
   15cb0:	str	r3, [r4, #40]	; 0x28
   15cb4:	str	r2, [r4, #44]	; 0x2c
   15cb8:	b	15c28 <read_single_boolean_expression@@Base+0x48>
   15cbc:	ldr	r3, [r4, #24]
   15cc0:	ldr	r2, [r4, #28]
   15cc4:	adds	r3, r3, #1
   15cc8:	adc	r2, r2, #0
   15ccc:	str	r3, [r4, #24]
   15cd0:	ldr	r3, [r1, #4]
   15cd4:	str	r2, [r4, #28]
   15cd8:	udf	#0
   15cdc:	andeq	fp, r2, r0, lsr r5

00015ce0 <read_boolean_expression@@Base>:
   15ce0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   15ce4:	mov	r5, #0
   15ce8:	mov	r6, r0
   15cec:	mov	r8, #1
   15cf0:	ldr	r4, [pc, #488]	; 15ee0 <read_boolean_expression@@Base+0x200>
   15cf4:	str	r5, [sp, #4]
   15cf8:	ldr	r0, [r0]
   15cfc:	ldr	r3, [r4, #-8]
   15d00:	ldr	r2, [r4, #-4]
   15d04:	adds	r3, r3, #1
   15d08:	adc	r2, r2, #0
   15d0c:	str	r3, [r4, #-8]
   15d10:	str	r2, [r4, #-4]
   15d14:	bl	122dc <next@@Base>
   15d18:	ldr	r3, [r4]
   15d1c:	ldr	r2, [r4, #4]
   15d20:	adds	r3, r3, #1
   15d24:	adc	r2, r2, r5
   15d28:	str	r3, [r4]
   15d2c:	str	r2, [r4, #4]
   15d30:	ldr	r3, [r0]
   15d34:	cmp	r3, #4
   15d38:	bne	15d7c <read_boolean_expression@@Base+0x9c>
   15d3c:	ldr	r3, [r4, #80]	; 0x50
   15d40:	ldr	r2, [r4, #84]	; 0x54
   15d44:	adds	r3, r3, #1
   15d48:	adc	r2, r2, #0
   15d4c:	str	r3, [r4, #80]	; 0x50
   15d50:	str	r2, [r4, #84]	; 0x54
   15d54:	bl	14a78 <free_token_cpar@@Base>
   15d58:	ldr	r3, [r4, #88]	; 0x58
   15d5c:	mov	r0, r5
   15d60:	ldr	r2, [r4, #92]	; 0x5c
   15d64:	adds	r3, r3, #1
   15d68:	adc	r2, r2, #0
   15d6c:	str	r3, [r4, #88]	; 0x58
   15d70:	str	r2, [r4, #92]	; 0x5c
   15d74:	add	sp, sp, #8
   15d78:	pop	{r4, r5, r6, r7, r8, pc}
   15d7c:	cmp	r3, #3
   15d80:	beq	15e4c <read_boolean_expression@@Base+0x16c>
   15d84:	cmp	r3, #12
   15d88:	beq	15e0c <read_boolean_expression@@Base+0x12c>
   15d8c:	cmp	r3, #1
   15d90:	bne	15e98 <read_boolean_expression@@Base+0x1b8>
   15d94:	ldr	r3, [r4, #16]
   15d98:	mov	r1, r0
   15d9c:	ldr	r2, [r4, #20]
   15da0:	ldr	r0, [r6]
   15da4:	adds	r3, r3, #1
   15da8:	adc	r2, r2, #0
   15dac:	str	r3, [r4, #16]
   15db0:	str	r2, [r4, #20]
   15db4:	bl	12440 <push_back@@Base>
   15db8:	ldr	r3, [r4, #40]	; 0x28
   15dbc:	mov	r1, r5
   15dc0:	mov	r0, r6
   15dc4:	ldr	r2, [r4, #44]	; 0x2c
   15dc8:	adds	r3, r3, #1
   15dcc:	adc	r2, r2, #0
   15dd0:	str	r3, [r4, #40]	; 0x28
   15dd4:	mov	r3, r7
   15dd8:	str	r2, [r4, #44]	; 0x2c
   15ddc:	add	r2, sp, #4
   15de0:	bl	15be0 <read_single_boolean_expression@@Base>
   15de4:	ldr	r3, [r4, #48]	; 0x30
   15de8:	mov	r5, r0
   15dec:	ldr	r2, [r4, #52]	; 0x34
   15df0:	adds	r3, r3, #1
   15df4:	adc	r2, r2, #0
   15df8:	str	r3, [r4, #48]	; 0x30
   15dfc:	str	r2, [r4, #52]	; 0x34
   15e00:	ldr	r0, [r6]
   15e04:	bl	122dc <next@@Base>
   15e08:	b	15d30 <read_boolean_expression@@Base+0x50>
   15e0c:	ldr	r3, [r4, #32]
   15e10:	ldr	r2, [r4, #36]	; 0x24
   15e14:	adds	r3, r3, #1
   15e18:	adc	r2, r2, #0
   15e1c:	str	r3, [r4, #32]
   15e20:	str	r2, [r4, #36]	; 0x24
   15e24:	bl	152f0 <get_boolean_op_value@@Base>
   15e28:	ldr	r3, [r4, #56]	; 0x38
   15e2c:	mov	r7, r0
   15e30:	str	r8, [sp, #4]
   15e34:	ldr	r2, [r4, #60]	; 0x3c
   15e38:	adds	r3, r3, #1
   15e3c:	adc	r2, r2, #0
   15e40:	str	r3, [r4, #56]	; 0x38
   15e44:	str	r2, [r4, #60]	; 0x3c
   15e48:	b	15e00 <read_boolean_expression@@Base+0x120>
   15e4c:	ldr	r3, [r4, #24]
   15e50:	mov	r1, r5
   15e54:	mov	r0, r6
   15e58:	ldr	r2, [r4, #28]
   15e5c:	adds	r3, r3, #1
   15e60:	adc	r2, r2, #0
   15e64:	str	r3, [r4, #24]
   15e68:	mov	r3, r7
   15e6c:	str	r2, [r4, #28]
   15e70:	add	r2, sp, #4
   15e74:	bl	15be0 <read_single_boolean_expression@@Base>
   15e78:	ldr	r3, [r4, #64]	; 0x40
   15e7c:	mov	r5, r0
   15e80:	ldr	r2, [r4, #68]	; 0x44
   15e84:	adds	r3, r3, #1
   15e88:	adc	r2, r2, #0
   15e8c:	str	r3, [r4, #64]	; 0x40
   15e90:	str	r2, [r4, #68]	; 0x44
   15e94:	b	15e00 <read_boolean_expression@@Base+0x120>
   15e98:	ldr	r3, [r4, #8]
   15e9c:	ldr	r2, [r4, #12]
   15ea0:	ldr	r0, [pc, #60]	; 15ee4 <read_boolean_expression@@Base+0x204>
   15ea4:	adds	r3, r3, #1
   15ea8:	str	r3, [r4, #8]
   15eac:	adc	r2, r2, #0
   15eb0:	ldr	r3, [pc, #48]	; 15ee8 <read_boolean_expression@@Base+0x208>
   15eb4:	str	r2, [r4, #12]
   15eb8:	ldr	r1, [r3]
   15ebc:	bl	119c0 <fputs@plt>
   15ec0:	ldr	r3, [r4, #72]	; 0x48
   15ec4:	mov	r0, #1
   15ec8:	ldr	r2, [r4, #76]	; 0x4c
   15ecc:	adds	r3, r3, #1
   15ed0:	adc	r2, r2, #0
   15ed4:	str	r3, [r4, #72]	; 0x48
   15ed8:	str	r2, [r4, #76]	; 0x4c
   15edc:	bl	11918 <exit@plt>
   15ee0:	andeq	fp, r2, r0, ror r5
   15ee4:	andeq	r9, r1, sp, lsr #32
   15ee8:	andeq	sl, r2, r8, ror r9

00015eec <read_if_statement@@Base>:
   15eec:	push	{r4, r5, r6, r7, r8, lr}
   15ef0:	mov	r6, r0
   15ef4:	ldr	r5, [pc, #436]	; 160b0 <read_if_statement@@Base+0x1c4>
   15ef8:	ldr	r0, [r0]
   15efc:	ldr	r3, [r5]
   15f00:	ldr	r2, [r5, #4]
   15f04:	adds	r3, r3, #1
   15f08:	adc	r2, r2, #0
   15f0c:	str	r3, [r5]
   15f10:	str	r2, [r5, #4]
   15f14:	bl	122dc <next@@Base>
   15f18:	ldr	r3, [r0]
   15f1c:	cmp	r3, #3
   15f20:	beq	15f48 <read_if_statement@@Base+0x5c>
   15f24:	ldr	r3, [r5, #8]
   15f28:	mov	r6, #0
   15f2c:	ldr	r2, [r5, #12]
   15f30:	adds	r3, r3, #1
   15f34:	adc	r2, r2, #0
   15f38:	str	r3, [r5, #8]
   15f3c:	str	r2, [r5, #12]
   15f40:	mov	r0, r6
   15f44:	pop	{r4, r5, r6, r7, r8, pc}
   15f48:	ldr	r3, [r5, #16]
   15f4c:	mov	r4, r5
   15f50:	ldr	r2, [r5, #20]
   15f54:	adds	r3, r3, #1
   15f58:	adc	r2, r2, #0
   15f5c:	str	r3, [r5, #16]
   15f60:	str	r2, [r5, #20]
   15f64:	bl	14a54 <free_token_opar@@Base>
   15f68:	ldr	r3, [r5, #24]
   15f6c:	mov	r0, r6
   15f70:	ldr	r2, [r5, #28]
   15f74:	adds	r3, r3, #1
   15f78:	adc	r2, r2, #0
   15f7c:	str	r3, [r5, #24]
   15f80:	str	r2, [r5, #28]
   15f84:	bl	15ce0 <read_boolean_expression@@Base>
   15f88:	ldr	r3, [r4, #32]
   15f8c:	mov	r5, r0
   15f90:	mov	r0, r6
   15f94:	ldr	r2, [r4, #36]	; 0x24
   15f98:	adds	r3, r3, #1
   15f9c:	adc	r2, r2, #0
   15fa0:	str	r3, [r4, #32]
   15fa4:	str	r2, [r4, #36]	; 0x24
   15fa8:	bl	160b4 <read_body@@Base>
   15fac:	ldr	r3, [r4, #40]	; 0x28
   15fb0:	mov	r7, r0
   15fb4:	ldr	r2, [r4, #44]	; 0x2c
   15fb8:	ldr	r0, [r6]
   15fbc:	adds	r3, r3, #1
   15fc0:	adc	r2, r2, #0
   15fc4:	str	r3, [r4, #40]	; 0x28
   15fc8:	str	r2, [r4, #44]	; 0x2c
   15fcc:	bl	122dc <next@@Base>
   15fd0:	ldr	r3, [r0]
   15fd4:	mov	r1, r0
   15fd8:	cmp	r3, #11
   15fdc:	bne	16070 <read_if_statement@@Base+0x184>
   15fe0:	ldr	r3, [r4, #48]	; 0x30
   15fe4:	ldr	r2, [r4, #52]	; 0x34
   15fe8:	adds	r3, r3, #1
   15fec:	adc	r2, r2, #0
   15ff0:	str	r3, [r4, #48]	; 0x30
   15ff4:	str	r2, [r4, #52]	; 0x34
   15ff8:	bl	14b74 <free_token_else@@Base>
   15ffc:	ldr	r3, [r4, #64]	; 0x40
   16000:	mov	r0, r6
   16004:	ldr	r2, [r4, #68]	; 0x44
   16008:	adds	r3, r3, #1
   1600c:	adc	r2, r2, #0
   16010:	str	r3, [r4, #64]	; 0x40
   16014:	str	r2, [r4, #68]	; 0x44
   16018:	bl	160b4 <read_body@@Base>
   1601c:	ldr	r2, [r4, #72]	; 0x48
   16020:	mov	r8, r0
   16024:	ldr	r1, [r4, #76]	; 0x4c
   16028:	adds	r2, r2, #1
   1602c:	adc	r1, r1, #0
   16030:	str	r2, [r4, #72]	; 0x48
   16034:	str	r1, [r4, #76]	; 0x4c
   16038:	mov	r0, #20
   1603c:	bl	118e8 <malloc@plt>
   16040:	mov	r3, r8
   16044:	mov	r2, r7
   16048:	mov	r1, r5
   1604c:	mov	r6, r0
   16050:	bl	14d24 <init_node_if@@Base>
   16054:	ldr	r3, [r4, #88]	; 0x58
   16058:	ldr	r2, [r4, #92]	; 0x5c
   1605c:	adds	r3, r3, #1
   16060:	adc	r2, r2, #0
   16064:	str	r3, [r4, #88]	; 0x58
   16068:	str	r2, [r4, #92]	; 0x5c
   1606c:	b	15f40 <read_if_statement@@Base+0x54>
   16070:	ldr	r3, [r4, #56]	; 0x38
   16074:	mov	r8, #0
   16078:	ldr	r2, [r4, #60]	; 0x3c
   1607c:	ldr	r0, [r6]
   16080:	adds	r3, r3, #1
   16084:	adc	r2, r2, #0
   16088:	str	r3, [r4, #56]	; 0x38
   1608c:	str	r2, [r4, #60]	; 0x3c
   16090:	bl	12440 <push_back@@Base>
   16094:	ldr	r3, [r4, #80]	; 0x50
   16098:	ldr	r2, [r4, #84]	; 0x54
   1609c:	adds	r3, r3, #1
   160a0:	adc	r2, r2, #0
   160a4:	str	r3, [r4, #80]	; 0x50
   160a8:	str	r2, [r4, #84]	; 0x54
   160ac:	b	16038 <read_if_statement@@Base+0x14c>
   160b0:	ldrdeq	fp, [r2], -r0

000160b4 <read_body@@Base>:
   160b4:	push	{r4, r5, r6, r7, r8, lr}
   160b8:	mov	r6, r0
   160bc:	ldr	r5, [pc, #556]	; 162f0 <read_body@@Base+0x23c>
   160c0:	ldr	r0, [r0]
   160c4:	ldr	r3, [r5]
   160c8:	ldr	r2, [r5, #4]
   160cc:	adds	r3, r3, #1
   160d0:	adc	r2, r2, #0
   160d4:	str	r3, [r5]
   160d8:	str	r2, [r5, #4]
   160dc:	bl	122dc <next@@Base>
   160e0:	ldr	r3, [r0]
   160e4:	cmp	r3, #5
   160e8:	beq	16110 <read_body@@Base+0x5c>
   160ec:	ldr	r3, [r5, #8]
   160f0:	ldr	r2, [r5, #12]
   160f4:	adds	r3, r3, #1
   160f8:	adc	r2, r2, #0
   160fc:	str	r3, [r5, #8]
   16100:	str	r2, [r5, #12]
   16104:	mov	r5, #0
   16108:	mov	r0, r5
   1610c:	pop	{r4, r5, r6, r7, r8, pc}
   16110:	mov	r4, r5
   16114:	mov	r7, #0
   16118:	ldr	r3, [r4, #16]
   1611c:	mov	r5, r7
   16120:	ldr	r2, [r4, #20]
   16124:	adds	r3, r3, #1
   16128:	adc	r2, r2, #0
   1612c:	str	r3, [r4, #16]
   16130:	str	r2, [r4, #20]
   16134:	bl	14a9c <free_token_obra@@Base>
   16138:	ldr	r3, [r4, #24]
   1613c:	ldr	r2, [r4, #28]
   16140:	ldr	r0, [r6]
   16144:	adds	r3, r3, #1
   16148:	adc	r2, r2, #0
   1614c:	str	r3, [r4, #24]
   16150:	str	r2, [r4, #28]
   16154:	bl	122dc <next@@Base>
   16158:	ldr	r3, [r4, #32]
   1615c:	ldr	r2, [r4, #36]	; 0x24
   16160:	adds	r3, r3, #1
   16164:	adc	r2, r2, #0
   16168:	str	r3, [r4, #32]
   1616c:	str	r2, [r4, #36]	; 0x24
   16170:	ldr	r3, [r0]
   16174:	cmp	r3, #6
   16178:	bne	161b4 <read_body@@Base+0x100>
   1617c:	ldr	r3, [r4, #112]	; 0x70
   16180:	ldr	r2, [r4, #116]	; 0x74
   16184:	adds	r3, r3, #1
   16188:	adc	r2, r2, #0
   1618c:	str	r3, [r4, #112]	; 0x70
   16190:	str	r2, [r4, #116]	; 0x74
   16194:	bl	14ac0 <free_token_cbra@@Base>
   16198:	ldr	r3, [r4, #120]	; 0x78
   1619c:	ldr	r2, [r4, #124]	; 0x7c
   161a0:	adds	r3, r3, #1
   161a4:	adc	r2, r2, #0
   161a8:	str	r3, [r4, #120]	; 0x78
   161ac:	str	r2, [r4, #124]	; 0x7c
   161b0:	b	16108 <read_body@@Base+0x54>
   161b4:	cmp	r3, #7
   161b8:	beq	16204 <read_body@@Base+0x150>
   161bc:	cmp	r3, #10
   161c0:	beq	16294 <read_body@@Base+0x1e0>
   161c4:	ldr	r3, [r4, #40]	; 0x28
   161c8:	mov	r1, r0
   161cc:	ldr	r2, [r4, #44]	; 0x2c
   161d0:	ldr	r0, [r6]
   161d4:	adds	r3, r3, #1
   161d8:	adc	r2, r2, #0
   161dc:	str	r3, [r4, #40]	; 0x28
   161e0:	str	r2, [r4, #44]	; 0x2c
   161e4:	bl	12440 <push_back@@Base>
   161e8:	ldr	r3, [r4, #96]	; 0x60
   161ec:	ldr	r2, [r4, #100]	; 0x64
   161f0:	adds	r3, r3, #1
   161f4:	adc	r2, r2, #0
   161f8:	str	r3, [r4, #96]	; 0x60
   161fc:	str	r2, [r4, #100]	; 0x64
   16200:	b	16108 <read_body@@Base+0x54>
   16204:	ldr	r3, [r4, #48]	; 0x30
   16208:	ldr	r2, [r4, #52]	; 0x34
   1620c:	adds	r3, r3, #1
   16210:	adc	r2, r2, #0
   16214:	str	r3, [r4, #48]	; 0x30
   16218:	str	r2, [r4, #52]	; 0x34
   1621c:	bl	14ae4 <free_token_return@@Base>
   16220:	ldr	r3, [r4, #64]	; 0x40
   16224:	mov	r0, r6
   16228:	ldr	r2, [r4, #68]	; 0x44
   1622c:	adds	r3, r3, #1
   16230:	adc	r2, r2, #0
   16234:	str	r3, [r4, #64]	; 0x40
   16238:	str	r2, [r4, #68]	; 0x44
   1623c:	bl	155d8 <read_return_expression@@Base>
   16240:	ldr	r3, [r4, #72]	; 0x48
   16244:	mov	r8, r0
   16248:	ldr	r2, [r4, #76]	; 0x4c
   1624c:	adds	r3, r3, #1
   16250:	adc	r2, r2, #0
   16254:	str	r3, [r4, #72]	; 0x48
   16258:	str	r2, [r4, #76]	; 0x4c
   1625c:	cmp	r5, #0
   16260:	strne	r8, [r7, #4]
   16264:	bne	16284 <read_body@@Base+0x1d0>
   16268:	ldr	r3, [r4, #104]	; 0x68
   1626c:	mov	r5, r8
   16270:	ldr	r2, [r4, #108]	; 0x6c
   16274:	adds	r3, r3, #1
   16278:	adc	r2, r2, #0
   1627c:	str	r3, [r4, #104]	; 0x68
   16280:	str	r2, [r4, #108]	; 0x6c
   16284:	ldr	r0, [r6]
   16288:	mov	r7, r8
   1628c:	bl	122dc <next@@Base>
   16290:	b	16170 <read_body@@Base+0xbc>
   16294:	ldr	r3, [r4, #56]	; 0x38
   16298:	ldr	r2, [r4, #60]	; 0x3c
   1629c:	adds	r3, r3, #1
   162a0:	adc	r2, r2, #0
   162a4:	str	r3, [r4, #56]	; 0x38
   162a8:	str	r2, [r4, #60]	; 0x3c
   162ac:	bl	14b50 <free_token_if@@Base>
   162b0:	ldr	r3, [r4, #80]	; 0x50
   162b4:	mov	r0, r6
   162b8:	ldr	r2, [r4, #84]	; 0x54
   162bc:	adds	r3, r3, #1
   162c0:	adc	r2, r2, #0
   162c4:	str	r3, [r4, #80]	; 0x50
   162c8:	str	r2, [r4, #84]	; 0x54
   162cc:	bl	15eec <read_if_statement@@Base>
   162d0:	ldr	r3, [r4, #88]	; 0x58
   162d4:	mov	r8, r0
   162d8:	ldr	r2, [r4, #92]	; 0x5c
   162dc:	adds	r3, r3, #1
   162e0:	adc	r2, r2, #0
   162e4:	str	r3, [r4, #88]	; 0x58
   162e8:	str	r2, [r4, #92]	; 0x5c
   162ec:	b	1625c <read_body@@Base+0x1a8>
   162f0:	andeq	fp, r2, r0, lsr r6

000162f4 <read_function_ast_node@@Base>:
   162f4:	push	{r4, r5, r6, r7, r8, lr}
   162f8:	mov	r7, r0
   162fc:	ldr	r4, [pc, #524]	; 16510 <read_function_ast_node@@Base+0x21c>
   16300:	ldr	r0, [r0]
   16304:	ldr	r3, [r4]
   16308:	ldr	r2, [r4, #4]
   1630c:	adds	r3, r3, #1
   16310:	adc	r2, r2, #0
   16314:	str	r3, [r4]
   16318:	str	r2, [r4, #4]
   1631c:	bl	122dc <next@@Base>
   16320:	ldr	r5, [r0]
   16324:	cmp	r5, #0
   16328:	beq	16350 <read_function_ast_node@@Base+0x5c>
   1632c:	ldr	r3, [r4, #8]
   16330:	mov	r5, #0
   16334:	ldr	r2, [r4, #12]
   16338:	adds	r3, r3, #1
   1633c:	adc	r2, r2, #0
   16340:	str	r3, [r4, #8]
   16344:	str	r2, [r4, #12]
   16348:	mov	r0, r5
   1634c:	pop	{r4, r5, r6, r7, r8, pc}
   16350:	ldr	r3, [r4, #16]
   16354:	ldr	r2, [r4, #20]
   16358:	adds	r3, r3, #1
   1635c:	adc	r2, r2, #0
   16360:	str	r3, [r4, #16]
   16364:	str	r2, [r4, #20]
   16368:	bl	149e8 <free_token_int_type@@Base>
   1636c:	ldr	r3, [r4, #24]
   16370:	ldr	r2, [r4, #28]
   16374:	ldr	r0, [r7]
   16378:	adds	r3, r3, #1
   1637c:	adc	r2, r2, #0
   16380:	str	r3, [r4, #24]
   16384:	str	r2, [r4, #28]
   16388:	bl	122dc <next@@Base>
   1638c:	ldr	r3, [r0]
   16390:	mov	r6, r0
   16394:	cmp	r3, #2
   16398:	beq	163b8 <read_function_ast_node@@Base+0xc4>
   1639c:	ldr	r3, [r4, #32]
   163a0:	ldr	r2, [r4, #36]	; 0x24
   163a4:	adds	r3, r3, #1
   163a8:	adc	r2, r2, #0
   163ac:	str	r3, [r4, #32]
   163b0:	str	r2, [r4, #36]	; 0x24
   163b4:	b	16348 <read_function_ast_node@@Base+0x54>
   163b8:	ldr	r3, [r4, #40]	; 0x28
   163bc:	ldr	r2, [r4, #44]	; 0x2c
   163c0:	ldr	r0, [r7]
   163c4:	adds	r3, r3, #1
   163c8:	adc	r2, r2, #0
   163cc:	str	r3, [r4, #40]	; 0x28
   163d0:	str	r2, [r4, #44]	; 0x2c
   163d4:	bl	122dc <next@@Base>
   163d8:	ldr	r3, [r0]
   163dc:	cmp	r3, #3
   163e0:	beq	16400 <read_function_ast_node@@Base+0x10c>
   163e4:	ldr	r3, [r4, #48]	; 0x30
   163e8:	ldr	r2, [r4, #52]	; 0x34
   163ec:	adds	r3, r3, #1
   163f0:	adc	r2, r2, #0
   163f4:	str	r3, [r4, #48]	; 0x30
   163f8:	str	r2, [r4, #52]	; 0x34
   163fc:	b	16348 <read_function_ast_node@@Base+0x54>
   16400:	ldr	r3, [r4, #56]	; 0x38
   16404:	ldr	r2, [r4, #60]	; 0x3c
   16408:	adds	r3, r3, #1
   1640c:	adc	r2, r2, #0
   16410:	str	r3, [r4, #56]	; 0x38
   16414:	str	r2, [r4, #60]	; 0x3c
   16418:	bl	14a54 <free_token_opar@@Base>
   1641c:	ldr	r3, [r4, #64]	; 0x40
   16420:	ldr	r2, [r4, #68]	; 0x44
   16424:	ldr	r0, [r7]
   16428:	adds	r3, r3, #1
   1642c:	adc	r2, r2, #0
   16430:	str	r3, [r4, #64]	; 0x40
   16434:	str	r2, [r4, #68]	; 0x44
   16438:	bl	122dc <next@@Base>
   1643c:	ldr	r3, [r0]
   16440:	cmp	r3, #4
   16444:	beq	16464 <read_function_ast_node@@Base+0x170>
   16448:	ldr	r3, [r4, #72]	; 0x48
   1644c:	ldr	r2, [r4, #76]	; 0x4c
   16450:	adds	r3, r3, #1
   16454:	adc	r2, r2, #0
   16458:	str	r3, [r4, #72]	; 0x48
   1645c:	str	r2, [r4, #76]	; 0x4c
   16460:	b	16348 <read_function_ast_node@@Base+0x54>
   16464:	ldr	r3, [r4, #80]	; 0x50
   16468:	ldr	r2, [r4, #84]	; 0x54
   1646c:	adds	r3, r3, #1
   16470:	adc	r2, r2, #0
   16474:	str	r3, [r4, #80]	; 0x50
   16478:	str	r2, [r4, #84]	; 0x54
   1647c:	bl	14a78 <free_token_cpar@@Base>
   16480:	ldr	r3, [r4, #88]	; 0x58
   16484:	mov	r0, r7
   16488:	ldr	r2, [r4, #92]	; 0x5c
   1648c:	adds	r3, r3, #1
   16490:	adc	r2, r2, #0
   16494:	str	r3, [r4, #88]	; 0x58
   16498:	str	r2, [r4, #92]	; 0x5c
   1649c:	bl	160b4 <read_body@@Base>
   164a0:	ldr	r3, [r4, #96]	; 0x60
   164a4:	mov	r7, r0
   164a8:	mov	r0, #16
   164ac:	ldr	r1, [r4, #100]	; 0x64
   164b0:	adds	r3, r3, #1
   164b4:	adc	r1, r1, #0
   164b8:	str	r3, [r4, #96]	; 0x60
   164bc:	str	r1, [r4, #100]	; 0x64
   164c0:	bl	118e8 <malloc@plt>
   164c4:	mov	r2, r7
   164c8:	ldr	r1, [r6, #4]
   164cc:	mov	r5, r0
   164d0:	bl	14cb4 <init_node_function@@Base>
   164d4:	ldr	r3, [r4, #104]	; 0x68
   164d8:	mov	r0, r6
   164dc:	ldr	r2, [r4, #108]	; 0x6c
   164e0:	adds	r3, r3, #1
   164e4:	adc	r2, r2, #0
   164e8:	str	r3, [r4, #104]	; 0x68
   164ec:	str	r2, [r4, #108]	; 0x6c
   164f0:	bl	14a30 <free_token_function@@Base>
   164f4:	ldr	r3, [r4, #112]	; 0x70
   164f8:	ldr	r2, [r4, #116]	; 0x74
   164fc:	adds	r3, r3, #1
   16500:	adc	r2, r2, #0
   16504:	str	r3, [r4, #112]	; 0x70
   16508:	str	r2, [r4, #116]	; 0x74
   1650c:	b	16348 <read_function_ast_node@@Base+0x54>
   16510:			; <UNDEFINED> instruction: 0x0002b6b0

00016514 <build_ast@@Base>:
   16514:	push	{r4, lr}
   16518:	ldr	r4, [pc, #52]	; 16554 <build_ast@@Base+0x40>
   1651c:	ldr	r3, [r4, #-8]
   16520:	ldr	r2, [r4, #-4]
   16524:	adds	r3, r3, #1
   16528:	adc	r2, r2, #0
   1652c:	str	r3, [r4, #-8]
   16530:	str	r2, [r4, #-4]
   16534:	bl	162f4 <read_function_ast_node@@Base>
   16538:	ldr	r3, [r4]
   1653c:	ldr	r2, [r4, #4]
   16540:	adds	r3, r3, #1
   16544:	adc	r2, r2, #0
   16548:	str	r3, [r4]
   1654c:	str	r2, [r4, #4]
   16550:	pop	{r4, pc}
   16554:	andeq	fp, r2, r0, lsr r7
   16558:	b	177fc <build_ast@@Base+0x12e8>
   1655c:	push	{r4, r5, r6, r7, r8, lr}
   16560:	subs	r5, r1, #0
   16564:	popeq	{r4, r5, r6, r7, r8, pc}
   16568:	mov	r4, r0
   1656c:	bl	16558 <build_ast@@Base+0x44>
   16570:	ldr	r3, [r4]
   16574:	ldr	r2, [r4, #4]
   16578:	adds	r6, r3, r0
   1657c:	adc	r7, r2, r1
   16580:	subs	r5, r5, #1
   16584:	strd	r6, [r4], #8
   16588:	bne	1656c <build_ast@@Base+0x58>
   1658c:	pop	{r4, r5, r6, r7, r8, pc}
   16590:	ldr	r3, [pc, #20]	; 165ac <build_ast@@Base+0x98>
   16594:	ldr	r2, [pc, #20]	; 165b0 <build_ast@@Base+0x9c>
   16598:	add	r3, pc, r3
   1659c:	ldr	r3, [r3, r2]
   165a0:	ldmib	r3, {r0, r3}
   165a4:	add	r0, r0, r3
   165a8:	bx	lr
   165ac:	andeq	r3, r1, r0, ror #20
   165b0:	andeq	r0, r0, ip, lsr #1
   165b4:	ldr	r3, [pc, #28]	; 165d8 <build_ast@@Base+0xc4>
   165b8:	ldr	r2, [pc, #28]	; 165dc <build_ast@@Base+0xc8>
   165bc:	add	r3, pc, r3
   165c0:	ldr	r3, [r3, r2]
   165c4:	ldr	r2, [r3]
   165c8:	cmp	r2, #0
   165cc:	ldrne	r0, [r3, #20]
   165d0:	moveq	r0, #1
   165d4:	bx	lr
   165d8:	andeq	r3, r1, ip, lsr sl
   165dc:	andeq	r0, r0, ip, lsr #1
   165e0:	bx	lr
   165e4:	ldr	ip, [pc, #32]	; 1660c <build_ast@@Base+0xf8>
   165e8:	mov	r3, #32
   165ec:	teq	r0, r1
   165f0:	movmi	r2, ip
   165f4:	movpl	r2, #0
   165f8:	subs	r3, r3, #1
   165fc:	lsl	r1, r1, #1
   16600:	eor	r0, r2, r0, lsl #1
   16604:	bne	165ec <build_ast@@Base+0xd8>
   16608:	bx	lr
   1660c:	strbeq	r1, [r1], #3511	; 0xdb7
   16610:	ldr	r2, [pc, #60]	; 16654 <build_ast@@Base+0x140>
   16614:	ldr	r3, [pc, #60]	; 16658 <build_ast@@Base+0x144>
   16618:	add	r2, pc, r2
   1661c:	push	{r4, lr}
   16620:	ldr	r4, [r2, r3]
   16624:	ldr	r0, [r4]
   16628:	cmp	r0, #0
   1662c:	popeq	{r4, pc}
   16630:	ldr	r3, [pc, #36]	; 1665c <build_ast@@Base+0x148>
   16634:	ldr	r3, [r2, r3]
   16638:	ldr	r3, [r3]
   1663c:	cmp	r0, r3
   16640:	popeq	{r4, pc}
   16644:	bl	1196c <fclose@plt>
   16648:	mov	r3, #0
   1664c:	str	r3, [r4]
   16650:	pop	{r4, pc}
   16654:	andeq	r3, r1, r0, ror #19
   16658:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1665c:	andeq	r0, r0, r0, lsr #1
   16660:	ldr	r3, [pc, #76]	; 166b4 <build_ast@@Base+0x1a0>
   16664:	ldr	r1, [pc, #76]	; 166b8 <build_ast@@Base+0x1a4>
   16668:	add	r3, pc, r3
   1666c:	push	{r4, r5, r6, lr}
   16670:	mov	r5, r0
   16674:	ldr	r4, [r3, r1]
   16678:	lsl	r1, r0, #2
   1667c:	mov	r0, r4
   16680:	mov	r2, #1
   16684:	ldr	r3, [r0], #28
   16688:	bl	118a0 <fwrite@plt>
   1668c:	cmp	r0, #1
   16690:	movne	r3, #1
   16694:	ldr	r0, [r4, #8]
   16698:	strne	r3, [r4, #20]
   1669c:	ldr	r3, [r4, #4]
   166a0:	sub	r0, r0, r5
   166a4:	add	r3, r3, r5
   166a8:	str	r3, [r4, #4]
   166ac:	str	r0, [r4, #8]
   166b0:	pop	{r4, r5, r6, pc}
   166b4:	muleq	r1, r0, r9
   166b8:	andeq	r0, r0, ip, lsr #1
   166bc:	ldr	r3, [pc, #80]	; 16714 <build_ast@@Base+0x200>
   166c0:	ldr	r2, [pc, #80]	; 16718 <build_ast@@Base+0x204>
   166c4:	add	r3, pc, r3
   166c8:	push	{r4, r5, r6, lr}
   166cc:	mov	r5, r0
   166d0:	ldr	r4, [r3, r2]
   166d4:	ldr	r3, [r4, #8]
   166d8:	cmp	r3, #1024	; 0x400
   166dc:	bcs	166f4 <build_ast@@Base+0x1e0>
   166e0:	add	r0, r3, #7
   166e4:	add	r3, r5, r3
   166e8:	str	r3, [r4, #8]
   166ec:	add	r0, r4, r0, lsl #2
   166f0:	pop	{r4, r5, r6, pc}
   166f4:	mov	r0, #1024	; 0x400
   166f8:	bl	16660 <build_ast@@Base+0x14c>
   166fc:	ldr	r3, [r4, #8]
   16700:	cmp	r3, #0
   16704:	addne	r2, r4, #4096	; 0x1000
   16708:	ldrne	r2, [r2, #28]
   1670c:	strne	r2, [r4, #28]
   16710:	b	166e0 <build_ast@@Base+0x1cc>
   16714:	andeq	r3, r1, r4, lsr r9
   16718:	andeq	r0, r0, ip, lsr #1
   1671c:	ldr	r3, [pc, #192]	; 167e4 <build_ast@@Base+0x2d0>
   16720:	ldr	r2, [pc, #192]	; 167e8 <build_ast@@Base+0x2d4>
   16724:	add	r3, pc, r3
   16728:	push	{r4, r5, r6, lr}
   1672c:	ldr	r4, [r3, r2]
   16730:	ldr	r2, [r4, #24]
   16734:	ldr	r3, [r4, #8]
   16738:	ldr	ip, [r4, #12]
   1673c:	cmp	r2, #0
   16740:	sub	ip, ip, r3
   16744:	ble	167c0 <build_ast@@Base+0x2ac>
   16748:	cmp	ip, r0
   1674c:	mov	r5, r0
   16750:	bcs	167ac <build_ast@@Base+0x298>
   16754:	ldr	r2, [r4, #4]
   16758:	cmp	ip, #0
   1675c:	add	r2, r2, r3
   16760:	str	r2, [r4, #4]
   16764:	addne	r2, r4, #28
   16768:	mov	r0, r4
   1676c:	ldrne	r3, [r2, r3, lsl #2]
   16770:	mov	r6, #0
   16774:	strne	r3, [r4, #28]
   16778:	ldr	r3, [r0], #28
   1677c:	mov	r2, #4096	; 0x1000
   16780:	add	r0, r0, ip, lsl #2
   16784:	mov	r1, #1
   16788:	str	ip, [r4, #12]
   1678c:	str	r6, [r4, #8]
   16790:	bl	118b8 <fread@plt>
   16794:	ldr	r3, [r4, #12]
   16798:	add	r0, r3, r0, lsr #2
   1679c:	cmp	r0, r5
   167a0:	str	r0, [r4, #12]
   167a4:	bcc	167c8 <build_ast@@Base+0x2b4>
   167a8:	ldr	r3, [r4, #8]
   167ac:	add	r0, r3, #7
   167b0:	add	r5, r5, r3
   167b4:	str	r5, [r4, #8]
   167b8:	add	r0, r4, r0, lsl #2
   167bc:	pop	{r4, r5, r6, pc}
   167c0:	mov	r0, #0
   167c4:	pop	{r4, r5, r6, pc}
   167c8:	ldr	r3, [r4, #16]
   167cc:	str	r6, [r4, #12]
   167d0:	add	r5, r5, r3
   167d4:	sub	r5, r5, r0
   167d8:	str	r5, [r4, #16]
   167dc:	mov	r0, r6
   167e0:	pop	{r4, r5, r6, pc}
   167e4:	ldrdeq	r3, [r1], -r4
   167e8:	andeq	r0, r0, ip, lsr #1
   167ec:	push	{r4, r5, r6, lr}
   167f0:	ldr	r4, [pc, #92]	; 16854 <build_ast@@Base+0x340>
   167f4:	ldr	r3, [pc, #92]	; 16858 <build_ast@@Base+0x344>
   167f8:	add	r4, pc, r4
   167fc:	ldr	r5, [r4, r3]
   16800:	ldr	r0, [r5]
   16804:	cmp	r0, #0
   16808:	popne	{r4, r5, r6, pc}
   1680c:	ldr	r0, [pc, #72]	; 1685c <build_ast@@Base+0x348>
   16810:	add	r0, pc, r0
   16814:	bl	118d0 <getenv@plt>
   16818:	cmp	r0, #0
   1681c:	beq	1684c <build_ast@@Base+0x338>
   16820:	ldr	r1, [pc, #56]	; 16860 <build_ast@@Base+0x34c>
   16824:	add	r1, pc, r1
   16828:	bl	119a8 <fopen64@plt>
   1682c:	str	r0, [r5]
   16830:	cmp	r0, #0
   16834:	popne	{r4, r5, r6, pc}
   16838:	ldr	r3, [pc, #36]	; 16864 <build_ast@@Base+0x350>
   1683c:	ldr	r3, [r4, r3]
   16840:	ldr	r0, [r3]
   16844:	str	r0, [r5]
   16848:	pop	{r4, r5, r6, pc}
   1684c:	ldr	r0, [r5]
   16850:	b	16830 <build_ast@@Base+0x31c>
   16854:	andeq	r3, r1, r0, lsl #16
   16858:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1685c:	muleq	r0, r4, r8
   16860:	muleq	r0, r0, r8
   16864:	andeq	r0, r0, r0, lsr #1
   16868:	push	{r0, r1, r2, r3}
   1686c:	push	{lr}		; (str lr, [sp, #-4]!)
   16870:	sub	sp, sp, #12
   16874:	add	r3, sp, #20
   16878:	str	r3, [sp, #4]
   1687c:	bl	167ec <build_ast@@Base+0x2d8>
   16880:	ldr	r1, [sp, #16]
   16884:	ldr	r2, [sp, #4]
   16888:	bl	11990 <vfprintf@plt>
   1688c:	add	sp, sp, #12
   16890:	pop	{lr}		; (ldr lr, [sp], #4)
   16894:	add	sp, sp, #16
   16898:	bx	lr
   1689c:	push	{r4, r5, r6, r7, r8, lr}
   168a0:	subs	r6, r1, #0
   168a4:	beq	168f8 <build_ast@@Base+0x3e4>
   168a8:	cmp	r2, #0
   168ac:	ldr	r7, [r6]
   168b0:	beq	168e8 <build_ast@@Base+0x3d4>
   168b4:	add	r4, r0, #12
   168b8:	add	r5, r4, r2, lsl #2
   168bc:	mov	r3, #0
   168c0:	ldr	r2, [r4, #4]!
   168c4:	add	r1, r6, r3, lsl #3
   168c8:	cmp	r2, #0
   168cc:	add	r8, r3, #1
   168d0:	beq	168e0 <build_ast@@Base+0x3cc>
   168d4:	ldr	r0, [r1, #28]
   168d8:	bl	1187c <free@plt>
   168dc:	mov	r3, r8
   168e0:	cmp	r4, r5
   168e4:	bne	168c0 <build_ast@@Base+0x3ac>
   168e8:	mov	r0, r6
   168ec:	bl	1187c <free@plt>
   168f0:	mov	r0, r7
   168f4:	pop	{r4, r5, r6, r7, r8, pc}
   168f8:	mov	r7, r6
   168fc:	b	168f0 <build_ast@@Base+0x3dc>
   16900:	push	{r4, r5}
   16904:	mov	r4, r0
   16908:	mov	r5, r1
   1690c:	orrs	r3, r4, r5
   16910:	beq	16954 <build_ast@@Base+0x440>
   16914:	cmp	r1, #0
   16918:	clzeq	r2, r0
   1691c:	addeq	r2, r2, #32
   16920:	clzne	r2, r1
   16924:	rsb	r3, r2, #63	; 0x3f
   16928:	cmp	r3, #1
   1692c:	bls	16954 <build_ast@@Base+0x440>
   16930:	rsb	r1, r2, #61	; 0x3d
   16934:	rsb	r0, r1, #32
   16938:	lsr	r3, r4, r1
   1693c:	sub	r1, r1, #32
   16940:	orr	r3, r3, r5, lsl r0
   16944:	orr	r3, r3, r5, lsr r1
   16948:	rsb	r2, r2, #1073741886	; 0x4000003e
   1694c:	and	r0, r3, #3
   16950:	add	r0, r0, r2, lsl #2
   16954:	pop	{r4, r5}
   16958:	bx	lr
   1695c:	push	{r4, r5, r6, lr}
   16960:	mov	r1, r3
   16964:	mov	r6, r0
   16968:	mov	r0, r2
   1696c:	mov	r4, r2
   16970:	mov	r5, r3
   16974:	bl	16900 <build_ast@@Base+0x3ec>
   16978:	add	r0, r0, r0, lsl #1
   1697c:	lsl	r0, r0, #3
   16980:	add	r3, r6, r0
   16984:	ldr	r1, [r6, r0]
   16988:	ldr	r2, [r3, #16]
   1698c:	add	r1, r1, #1
   16990:	str	r1, [r6, r0]
   16994:	ldrd	r0, [r3, #8]
   16998:	ldr	ip, [r3, #20]
   1699c:	adds	r2, r2, r4
   169a0:	str	r2, [r3, #16]
   169a4:	adc	r2, ip, r5
   169a8:	cmp	r4, r0
   169ac:	sbcs	r1, r5, r1
   169b0:	str	r2, [r3, #20]
   169b4:	strdlt	r4, [r3, #8]
   169b8:	pop	{r4, r5, r6, pc}
   169bc:	ldr	r3, [r1, #8]
   169c0:	cmp	r3, #0
   169c4:	bxeq	lr
   169c8:	add	r2, r1, #6016	; 0x1780
   169cc:	push	{r4, r5, r6, r7, r8, lr}
   169d0:	mov	r3, r1
   169d4:	mov	r8, r1
   169d8:	mov	r7, r0
   169dc:	ldrd	r4, [r1, #24]
   169e0:	add	r2, r2, #32
   169e4:	mov	ip, #0
   169e8:	mov	r0, #0
   169ec:	mov	r1, #0
   169f0:	str	ip, [r3, #40]	; 0x28
   169f4:	strd	r4, [r3, #48]	; 0x30
   169f8:	strd	r0, [r3, #56]	; 0x38
   169fc:	add	r3, r3, #24
   16a00:	cmp	r3, r2
   16a04:	bne	169f0 <build_ast@@Base+0x4dc>
   16a08:	cmp	r7, #0
   16a0c:	popeq	{r4, r5, r6, r7, r8, pc}
   16a10:	add	r8, r8, #40	; 0x28
   16a14:	ldr	r3, [r7, #16]
   16a18:	cmp	r3, #0
   16a1c:	beq	16aa4 <build_ast@@Base+0x590>
   16a20:	ldr	r2, [r7, #52]	; 0x34
   16a24:	cmp	r2, #0
   16a28:	beq	16aa4 <build_ast@@Base+0x590>
   16a2c:	mov	r6, #0
   16a30:	b	16a40 <build_ast@@Base+0x52c>
   16a34:	add	r6, r6, #1
   16a38:	cmp	r2, r6
   16a3c:	beq	16aa4 <build_ast@@Base+0x590>
   16a40:	ldr	r3, [r7, #56]	; 0x38
   16a44:	ldr	r5, [r3, r6, lsl #2]
   16a48:	cmp	r5, #0
   16a4c:	beq	16a34 <build_ast@@Base+0x520>
   16a50:	ldr	r3, [r5]
   16a54:	cmp	r3, r7
   16a58:	bne	16a34 <build_ast@@Base+0x520>
   16a5c:	ldr	r3, [r5, #16]
   16a60:	cmp	r3, #0
   16a64:	beq	16a34 <build_ast@@Base+0x520>
   16a68:	mov	r4, #0
   16a6c:	ldr	r2, [r5, #20]
   16a70:	lsl	r3, r4, #3
   16a74:	add	r2, r2, r3
   16a78:	mov	r0, r8
   16a7c:	ldrd	r2, [r2]
   16a80:	bl	1695c <build_ast@@Base+0x448>
   16a84:	ldr	r3, [r5, #16]
   16a88:	add	r4, r4, #1
   16a8c:	cmp	r3, r4
   16a90:	bhi	16a6c <build_ast@@Base+0x558>
   16a94:	ldr	r2, [r7, #52]	; 0x34
   16a98:	add	r6, r6, #1
   16a9c:	cmp	r2, r6
   16aa0:	bne	16a40 <build_ast@@Base+0x52c>
   16aa4:	ldr	r7, [r7, #4]
   16aa8:	cmp	r7, #0
   16aac:	bne	16a14 <build_ast@@Base+0x500>
   16ab0:	pop	{r4, r5, r6, r7, r8, pc}
   16ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ab8:	sub	sp, sp, #12
   16abc:	mov	r6, r0
   16ac0:	str	r0, [sp, #4]
   16ac4:	mov	r8, r2
   16ac8:	mov	r0, r1
   16acc:	mov	r4, r1
   16ad0:	ldr	r2, [pc, #364]	; 16c44 <build_ast@@Base+0x730>
   16ad4:	mov	r1, #0
   16ad8:	bl	11954 <memset@plt>
   16adc:	mov	r5, #0
   16ae0:	cmp	r6, #0
   16ae4:	str	r5, [r8]
   16ae8:	beq	16c28 <build_ast@@Base+0x714>
   16aec:	mov	r9, r5
   16af0:	ldr	r0, [r6, #12]
   16af4:	bl	11924 <strlen@plt>
   16af8:	cmp	r5, r0
   16afc:	strcc	r0, [r8]
   16b00:	mov	r0, r9
   16b04:	ldr	r1, [r6, #8]
   16b08:	bl	165e4 <build_ast@@Base+0xd0>
   16b0c:	ldr	r7, [r6, #52]	; 0x34
   16b10:	mov	r1, r7
   16b14:	bl	165e4 <build_ast@@Base+0xd0>
   16b18:	cmp	r7, #0
   16b1c:	mov	r9, r0
   16b20:	beq	16c14 <build_ast@@Base+0x700>
   16b24:	ldr	r5, [r6, #56]	; 0x38
   16b28:	add	r7, r5, r7, lsl #2
   16b2c:	sub	r7, r7, #4
   16b30:	sub	r5, r5, #4
   16b34:	b	16b64 <build_ast@@Base+0x650>
   16b38:	ldr	r3, [sl]
   16b3c:	mov	r0, r9
   16b40:	cmp	r3, r6
   16b44:	beq	16b80 <build_ast@@Base+0x66c>
   16b48:	mov	r1, #0
   16b4c:	bl	165e4 <build_ast@@Base+0xd0>
   16b50:	mov	r1, #0
   16b54:	bl	165e4 <build_ast@@Base+0xd0>
   16b58:	mov	r9, r0
   16b5c:	cmp	r5, r7
   16b60:	beq	16c14 <build_ast@@Base+0x700>
   16b64:	ldr	sl, [r5, #4]!
   16b68:	cmp	sl, #0
   16b6c:	bne	16b38 <build_ast@@Base+0x624>
   16b70:	mov	r1, sl
   16b74:	mov	r0, r9
   16b78:	bl	165e4 <build_ast@@Base+0xd0>
   16b7c:	b	16b50 <build_ast@@Base+0x63c>
   16b80:	ldr	r1, [sl, #12]
   16b84:	bl	165e4 <build_ast@@Base+0xd0>
   16b88:	ldr	r1, [sl, #8]
   16b8c:	bl	165e4 <build_ast@@Base+0xd0>
   16b90:	ldr	r3, [r6, #16]
   16b94:	cmp	r3, #0
   16b98:	mov	r9, r0
   16b9c:	beq	16b5c <build_ast@@Base+0x648>
   16ba0:	ldr	fp, [sl, #16]
   16ba4:	ldr	r3, [r4, #8]
   16ba8:	mov	r1, fp
   16bac:	add	r3, r3, fp
   16bb0:	str	r3, [r4, #8]
   16bb4:	bl	165e4 <build_ast@@Base+0xd0>
   16bb8:	cmp	fp, #0
   16bbc:	mov	r9, r0
   16bc0:	beq	16b5c <build_ast@@Base+0x648>
   16bc4:	ldr	r2, [sl, #20]
   16bc8:	ldr	r3, [r4, #16]
   16bcc:	add	lr, r2, fp, lsl #3
   16bd0:	ldr	ip, [r4, #20]
   16bd4:	sub	lr, lr, #8
   16bd8:	sub	r2, r2, #8
   16bdc:	ldrd	r0, [r2, #8]!
   16be0:	ldrd	sl, [r4, #24]
   16be4:	adds	r3, r3, r0
   16be8:	adc	ip, ip, r1
   16bec:	str	ip, [r4, #20]
   16bf0:	str	r3, [r4, #16]
   16bf4:	ldrd	r0, [r2]
   16bf8:	cmp	sl, r0
   16bfc:	sbcs	sl, fp, r1
   16c00:	strdlt	r0, [r4, #24]
   16c04:	cmp	lr, r2
   16c08:	bne	16bdc <build_ast@@Base+0x6c8>
   16c0c:	cmp	r5, r7
   16c10:	bne	16b64 <build_ast@@Base+0x650>
   16c14:	ldr	r6, [r6, #4]
   16c18:	cmp	r6, #0
   16c1c:	beq	16c2c <build_ast@@Base+0x718>
   16c20:	ldr	r5, [r8]
   16c24:	b	16af0 <build_ast@@Base+0x5dc>
   16c28:	ldr	r9, [sp, #4]
   16c2c:	ldr	r0, [sp, #4]
   16c30:	mov	r1, r4
   16c34:	bl	169bc <build_ast@@Base+0x4a8>
   16c38:	mov	r0, r9
   16c3c:	add	sp, sp, #12
   16c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c44:	andeq	r1, r0, r8, asr #15
   16c48:	push	{r4, r5, r6, lr}
   16c4c:	mov	r4, r0
   16c50:	ldr	r0, [pc, #192]	; 16d18 <build_ast@@Base+0x804>
   16c54:	add	r0, pc, r0
   16c58:	bl	118d0 <getenv@plt>
   16c5c:	subs	r3, r0, #0
   16c60:	beq	16c6c <build_ast@@Base+0x758>
   16c64:	bl	1199c <atoi@plt>
   16c68:	bic	r3, r0, r0, asr #31
   16c6c:	ldr	r0, [pc, #168]	; 16d1c <build_ast@@Base+0x808>
   16c70:	str	r3, [r4, #8]
   16c74:	add	r0, pc, r0
   16c78:	bl	118d0 <getenv@plt>
   16c7c:	subs	r6, r0, #0
   16c80:	beq	16cf0 <build_ast@@Base+0x7dc>
   16c84:	bl	11924 <strlen@plt>
   16c88:	ldr	r3, [r4, #4]
   16c8c:	add	r3, r3, #2
   16c90:	cmp	r0, #0
   16c94:	bne	16cd0 <build_ast@@Base+0x7bc>
   16c98:	ldr	r2, [r4, #8]
   16c9c:	cmp	r2, #0
   16ca0:	beq	16d04 <build_ast@@Base+0x7f0>
   16ca4:	ldr	r6, [pc, #116]	; 16d20 <build_ast@@Base+0x80c>
   16ca8:	mov	r5, #1
   16cac:	add	r6, pc, r6
   16cb0:	str	r5, [r4, #12]
   16cb4:	add	r0, r3, r5
   16cb8:	bl	118e8 <malloc@plt>
   16cbc:	mov	r2, r5
   16cc0:	mov	r1, r6
   16cc4:	str	r0, [r4]
   16cc8:	pop	{r4, r5, r6, lr}
   16ccc:	b	11888 <memcpy@plt>
   16cd0:	sub	r5, r0, #1
   16cd4:	ldrb	r2, [r6, r5]
   16cd8:	cmp	r2, #47	; 0x2f
   16cdc:	movne	r5, r0
   16ce0:	bne	16cb0 <build_ast@@Base+0x79c>
   16ce4:	cmp	r5, #0
   16ce8:	bne	16cb0 <build_ast@@Base+0x79c>
   16cec:	b	16c98 <build_ast@@Base+0x784>
   16cf0:	ldr	r2, [r4, #8]
   16cf4:	ldr	r3, [r4, #4]
   16cf8:	cmp	r2, #0
   16cfc:	add	r3, r3, #2
   16d00:	bne	16ca4 <build_ast@@Base+0x790>
   16d04:	str	r2, [r4, #12]
   16d08:	mov	r0, r3
   16d0c:	bl	118e8 <malloc@plt>
   16d10:	str	r0, [r4]
   16d14:	pop	{r4, r5, r6, pc}
   16d18:	andeq	r2, r0, r8, ror #8
   16d1c:	andeq	r2, r0, ip, asr r4
   16d20:	andeq	r2, r0, ip, lsl #8
   16d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d28:	sub	sp, sp, #6080	; 0x17c0
   16d2c:	sub	sp, sp, #36	; 0x24
   16d30:	mov	r3, r0
   16d34:	str	r1, [sp, #40]	; 0x28
   16d38:	mov	r1, #0
   16d3c:	mov	r4, r1
   16d40:	str	r0, [sp, #56]	; 0x38
   16d44:	add	r7, r3, #6016	; 0x1780
   16d48:	add	r0, sp, #64	; 0x40
   16d4c:	add	r6, sp, #2016	; 0x7e0
   16d50:	ldr	r2, [pc, #984]	; 17130 <build_ast@@Base+0xc1c>
   16d54:	mov	r5, #251	; 0xfb
   16d58:	str	r0, [sp, #60]	; 0x3c
   16d5c:	str	r5, [sp, #52]	; 0x34
   16d60:	str	r6, [sp, #36]	; 0x24
   16d64:	mov	r9, r4
   16d68:	bl	11954 <memset@plt>
   16d6c:	mov	sl, r4
   16d70:	add	r3, r7, #8
   16d74:	mov	r0, r4
   16d78:	str	r3, [sp, #48]	; 0x30
   16d7c:	sub	r3, r6, #1952	; 0x7a0
   16d80:	str	r3, [sp, #44]	; 0x2c
   16d84:	ldr	r3, [sp, #48]	; 0x30
   16d88:	ldr	r2, [r3, #16]
   16d8c:	ldr	r7, [r3]
   16d90:	str	r2, [sp, #16]
   16d94:	ldr	r2, [r3, #20]
   16d98:	cmp	r7, #0
   16d9c:	str	r2, [sp, #20]
   16da0:	beq	170c0 <build_ast@@Base+0xbac>
   16da4:	ldrd	r2, [r3, #8]
   16da8:	str	r9, [sp, #12]
   16dac:	strd	r2, [sp, #24]
   16db0:	b	16e90 <build_ast@@Base+0x97c>
   16db4:	bls	17124 <build_ast@@Base+0xc10>
   16db8:	ldr	r3, [sp, #12]
   16dbc:	mov	r2, r4
   16dc0:	umull	r0, r1, r7, r3
   16dc4:	mov	r3, #0
   16dc8:	mla	r1, r7, sl, r1
   16dcc:	bl	18640 <__gcov_sort_n_vals@@Base+0x568>
   16dd0:	mov	r6, r0
   16dd4:	mov	r8, r1
   16dd8:	ldr	r3, [sp, #12]
   16ddc:	sub	r4, r4, r7
   16de0:	subs	r3, r3, r6
   16de4:	sbc	sl, sl, r8
   16de8:	mov	fp, r7
   16dec:	mov	r7, #0
   16df0:	str	r3, [sp, #12]
   16df4:	ldr	r0, [sp, #16]
   16df8:	ldr	r3, [sp, #20]
   16dfc:	str	r7, [sp, #16]
   16e00:	str	r7, [sp, #20]
   16e04:	adds	r6, r6, r0
   16e08:	ldrd	r0, [sp]
   16e0c:	adc	r8, r8, r3
   16e10:	bl	16900 <build_ast@@Base+0x3ec>
   16e14:	ldr	r3, [sp, #44]	; 0x2c
   16e18:	add	r1, r0, r0, lsl #1
   16e1c:	lsl	r1, r1, #3
   16e20:	add	ip, r3, r1
   16e24:	ldr	r3, [sp, #36]	; 0x24
   16e28:	ldr	lr, [ip, #16]
   16e2c:	add	r1, r3, r1
   16e30:	adds	r6, lr, r6
   16e34:	ldr	lr, [ip, #20]
   16e38:	ldrd	r2, [ip, #8]
   16e3c:	adc	lr, lr, r8
   16e40:	ldrd	r8, [sp]
   16e44:	str	lr, [sp, #32]
   16e48:	orrs	lr, r2, r3
   16e4c:	moveq	lr, #1
   16e50:	movne	lr, #0
   16e54:	cmp	r8, r2
   16e58:	sbcs	r3, r9, r3
   16e5c:	orrlt	lr, lr, #1
   16e60:	cmp	lr, #0
   16e64:	str	r6, [ip, #16]
   16e68:	ldr	r6, [r1, #-1952]	; 0xfffff860
   16e6c:	ldr	r3, [sp, #32]
   16e70:	strdne	r8, [ip, #8]
   16e74:	cmp	r4, #0
   16e78:	add	fp, r6, fp
   16e7c:	subeq	r5, r5, #1
   16e80:	cmp	r7, #0
   16e84:	str	r3, [ip, #20]
   16e88:	str	fp, [r1, #-1952]	; 0xfffff860
   16e8c:	beq	170bc <build_ast@@Base+0xba8>
   16e90:	cmp	r4, #0
   16e94:	beq	16f18 <build_ast@@Base+0xa04>
   16e98:	add	r2, r5, r5, lsl #1
   16e9c:	ldr	r3, [sp, #40]	; 0x28
   16ea0:	add	r2, r3, r2, lsl #3
   16ea4:	ldrd	r0, [sp, #24]
   16ea8:	ldr	r3, [r2, #8]
   16eac:	ldr	r2, [r2, #12]
   16eb0:	adds	r3, r0, r3
   16eb4:	str	r3, [sp]
   16eb8:	adc	r3, r1, r2
   16ebc:	cmp	r4, r7
   16ec0:	str	r3, [sp, #4]
   16ec4:	bcs	16db4 <build_ast@@Base+0x8a0>
   16ec8:	ldr	r6, [sp, #16]
   16ecc:	ldr	r8, [sp, #20]
   16ed0:	mov	r2, r7
   16ed4:	umull	r0, r1, r4, r6
   16ed8:	mov	r3, #0
   16edc:	mla	r1, r4, r8, r1
   16ee0:	bl	18640 <__gcov_sort_n_vals@@Base+0x568>
   16ee4:	sub	r7, r7, r4
   16ee8:	mov	fp, r4
   16eec:	mov	r4, #0
   16ef0:	subs	r2, r6, r0
   16ef4:	str	r2, [sp, #16]
   16ef8:	sbc	r2, r8, r1
   16efc:	ldr	r6, [sp, #12]
   16f00:	mov	r8, sl
   16f04:	mov	r3, r1
   16f08:	str	r2, [sp, #20]
   16f0c:	str	r4, [sp, #12]
   16f10:	mov	sl, r4
   16f14:	b	16e04 <build_ast@@Base+0x8f0>
   16f18:	cmp	r5, #0
   16f1c:	blt	1711c <build_ast@@Base+0xc08>
   16f20:	ldr	r3, [sp, #40]	; 0x28
   16f24:	add	r2, r5, r5, lsl #1
   16f28:	ldr	r4, [r3, r2, lsl #3]
   16f2c:	add	r2, r3, r2, lsl #3
   16f30:	cmp	r4, #0
   16f34:	bne	170ac <build_ast@@Base+0xb98>
   16f38:	mov	r3, r2
   16f3c:	ldr	r9, [sp, #12]
   16f40:	b	16f54 <build_ast@@Base+0xa40>
   16f44:	ldr	r4, [r3]
   16f48:	mov	r2, r3
   16f4c:	cmp	r4, #0
   16f50:	bne	170ac <build_ast@@Base+0xb98>
   16f54:	subs	r5, r5, #1
   16f58:	sub	r3, r3, #24
   16f5c:	bcs	16f44 <build_ast@@Base+0xa30>
   16f60:	ldr	r2, [sp, #52]	; 0x34
   16f64:	ldr	ip, [sp, #36]	; 0x24
   16f68:	ldr	r4, [sp, #16]
   16f6c:	lsl	r3, r2, #1
   16f70:	add	r1, r3, r2
   16f74:	sub	r2, ip, #1952	; 0x7a0
   16f78:	lsl	r1, r1, #3
   16f7c:	add	r2, r2, r1
   16f80:	add	r1, ip, r1
   16f84:	ldr	ip, [r2, #16]
   16f88:	ldr	lr, [r1, #-1952]	; 0xfffff860
   16f8c:	adds	ip, ip, r4
   16f90:	add	r7, lr, r7
   16f94:	ldrd	r4, [r2, #8]
   16f98:	ldr	lr, [r2, #20]
   16f9c:	str	r7, [r1, #-1952]	; 0xfffff860
   16fa0:	ldr	r1, [sp, #20]
   16fa4:	str	ip, [r2, #16]
   16fa8:	adc	lr, lr, r1
   16fac:	orrs	r1, r4, r5
   16fb0:	str	lr, [r2, #20]
   16fb4:	beq	1708c <build_ast@@Base+0xb78>
   16fb8:	ldrd	r6, [sp, #24]
   16fbc:	cmp	r6, r4
   16fc0:	sbcs	r2, r7, r5
   16fc4:	blt	1708c <build_ast@@Base+0xb78>
   16fc8:	ldr	r2, [sp, #52]	; 0x34
   16fcc:	ldr	lr, [sp, #60]	; 0x3c
   16fd0:	add	ip, r3, r2
   16fd4:	ldr	r3, [sp, #56]	; 0x38
   16fd8:	lsl	ip, ip, #3
   16fdc:	add	r1, lr, ip
   16fe0:	add	ip, r3, ip
   16fe4:	b	17040 <build_ast@@Base+0xb2c>
   16fe8:	ldr	r3, [r1, #-8]
   16fec:	ldr	r6, [ip, #-8]
   16ff0:	ldr	r7, [ip, #-4]
   16ff4:	ldr	r2, [r1, #-4]
   16ff8:	adds	r6, r3, r6
   16ffc:	ldrd	r4, [r1, #-16]
   17000:	adc	r2, r2, r7
   17004:	ldr	r3, [r1, #-24]	; 0xffffffe8
   17008:	ldr	r7, [ip, #-24]	; 0xffffffe8
   1700c:	orrs	r8, r4, r5
   17010:	add	r3, r3, r7
   17014:	str	r2, [r1, #-4]
   17018:	str	r3, [r1, #-24]	; 0xffffffe8
   1701c:	str	r6, [r1, #-8]
   17020:	ldrd	r2, [ip, #-16]
   17024:	sub	ip, ip, #24
   17028:	beq	17038 <build_ast@@Base+0xb24>
   1702c:	cmp	r2, r4
   17030:	sbcs	r4, r3, r5
   17034:	bge	1703c <build_ast@@Base+0xb28>
   17038:	strd	r2, [r1, #-16]
   1703c:	sub	r1, r1, #24
   17040:	cmp	r1, lr
   17044:	bne	16fe8 <build_ast@@Base+0xad4>
   17048:	ldr	r3, [sp, #36]	; 0x24
   1704c:	add	r0, r0, r0, lsl #1
   17050:	sub	r3, r3, #1952	; 0x7a0
   17054:	add	r3, r3, r0, lsl #3
   17058:	ldr	r1, [sp, #60]	; 0x3c
   1705c:	ldr	r2, [r3, #16]
   17060:	ldr	ip, [r3, #20]
   17064:	adds	r9, r2, r9
   17068:	adc	sl, ip, sl
   1706c:	ldr	r0, [sp, #56]	; 0x38
   17070:	ldr	r2, [pc, #184]	; 17130 <build_ast@@Base+0xc1c>
   17074:	str	r9, [r3, #16]
   17078:	str	sl, [r3, #20]
   1707c:	bl	11888 <memcpy@plt>
   17080:	add	sp, sp, #6080	; 0x17c0
   17084:	add	sp, sp, #36	; 0x24
   17088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1708c:	ldr	r2, [sp, #52]	; 0x34
   17090:	ldrd	r4, [sp, #24]
   17094:	add	r1, r3, r2
   17098:	ldr	r2, [sp, #36]	; 0x24
   1709c:	sub	r2, r2, #1952	; 0x7a0
   170a0:	add	r2, r2, r1, lsl #3
   170a4:	strd	r4, [r2, #8]
   170a8:	b	16fc8 <build_ast@@Base+0xab4>
   170ac:	ldr	r3, [r2, #16]
   170b0:	ldr	sl, [r2, #20]
   170b4:	str	r3, [sp, #12]
   170b8:	b	16ea4 <build_ast@@Base+0x990>
   170bc:	ldr	r9, [sp, #12]
   170c0:	ldr	r3, [sp, #52]	; 0x34
   170c4:	sub	r3, r3, #1
   170c8:	str	r3, [sp, #52]	; 0x34
   170cc:	cmn	r3, #1
   170d0:	ldr	r3, [sp, #48]	; 0x30
   170d4:	sub	r3, r3, #24
   170d8:	str	r3, [sp, #48]	; 0x30
   170dc:	bne	16d84 <build_ast@@Base+0x870>
   170e0:	cmp	r4, #0
   170e4:	subne	r5, r5, #1
   170e8:	cmp	r5, #0
   170ec:	blt	17048 <build_ast@@Base+0xb34>
   170f0:	add	r5, r5, r5, lsl #1
   170f4:	ldr	ip, [sp, #40]	; 0x28
   170f8:	add	r3, ip, r5, lsl #3
   170fc:	ldr	r2, [r3, #16]
   17100:	ldr	r1, [r3, #20]
   17104:	adds	r9, r9, r2
   17108:	adc	sl, sl, r1
   1710c:	cmp	ip, r3
   17110:	sub	r3, r3, #24
   17114:	bne	170fc <build_ast@@Base+0xbe8>
   17118:	b	17048 <build_ast@@Base+0xb34>
   1711c:	ldr	r9, [sp, #12]
   17120:	b	16f60 <build_ast@@Base+0xa4c>
   17124:	ldr	r6, [sp, #12]
   17128:	mov	r8, sl
   1712c:	b	16dd8 <build_ast@@Base+0x8c4>
   17130:	andeq	r1, r0, r0, lsr #15
   17134:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17138:	ldrb	r4, [r0]
   1713c:	cmp	r4, #47	; 0x2f
   17140:	addeq	r5, r0, #1
   17144:	ldrbeq	r4, [r0, #1]
   17148:	movne	r5, r0
   1714c:	cmp	r4, #0
   17150:	beq	171a4 <build_ast@@Base+0xc90>
   17154:	mov	r6, r0
   17158:	mov	r7, #0
   1715c:	mov	r8, #47	; 0x2f
   17160:	ldr	sl, [pc, #136]	; 171f0 <build_ast@@Base+0xcdc>
   17164:	b	17174 <build_ast@@Base+0xc60>
   17168:	ldrb	r4, [r5, #1]!
   1716c:	cmp	r4, #0
   17170:	beq	171a4 <build_ast@@Base+0xc90>
   17174:	cmp	r4, #47	; 0x2f
   17178:	bne	17168 <build_ast@@Base+0xc54>
   1717c:	strb	r7, [r5]
   17180:	mov	r1, #0
   17184:	mov	r0, r6
   17188:	bl	11960 <access@plt>
   1718c:	cmn	r0, #1
   17190:	beq	171b0 <build_ast@@Base+0xc9c>
   17194:	strb	r8, [r5]
   17198:	ldrb	r4, [r5, #1]!
   1719c:	cmp	r4, #0
   171a0:	bne	17174 <build_ast@@Base+0xc60>
   171a4:	mov	r9, #0
   171a8:	mov	r0, r9
   171ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171b0:	mov	r1, sl
   171b4:	mov	r0, r6
   171b8:	bl	11948 <mkdir@plt>
   171bc:	cmn	r0, #1
   171c0:	mov	r9, r0
   171c4:	bne	17194 <build_ast@@Base+0xc80>
   171c8:	bl	1193c <__errno_location@plt>
   171cc:	ldr	r3, [r0]
   171d0:	cmp	r3, #17
   171d4:	beq	17194 <build_ast@@Base+0xc80>
   171d8:	ldr	r0, [pc, #20]	; 171f4 <build_ast@@Base+0xce0>
   171dc:	mov	r1, r6
   171e0:	add	r0, pc, r0
   171e4:	bl	16868 <build_ast@@Base+0x354>
   171e8:	strb	r4, [r5]
   171ec:	b	171a8 <build_ast@@Base+0xc94>
   171f0:	andeq	r0, r0, sp, ror #3
   171f4:	strdeq	r1, [r0], -ip
   171f8:	ldr	r3, [pc, #76]	; 1724c <build_ast@@Base+0xd38>
   171fc:	cmp	r1, r3
   17200:	beq	17244 <build_ast@@Base+0xd30>
   17204:	cmp	r2, #0
   17208:	ldr	ip, [pc, #64]	; 17250 <build_ast@@Base+0xd3c>
   1720c:	push	{lr}		; (str lr, [sp, #-4]!)
   17210:	rev	r3, r1
   17214:	sub	sp, sp, #12
   17218:	ldreq	r2, [r0]
   1721c:	ldr	r0, [pc, #48]	; 17254 <build_ast@@Base+0xd40>
   17220:	stm	sp, {r3, ip}
   17224:	mov	r1, r2
   17228:	mov	r3, sp
   1722c:	add	r2, sp, #4
   17230:	add	r0, pc, r0
   17234:	bl	16868 <build_ast@@Base+0x354>
   17238:	mov	r0, #0
   1723c:	add	sp, sp, #12
   17240:	pop	{pc}		; (ldr pc, [sp], #4)
   17244:	mov	r0, #1
   17248:	bx	lr
   1724c:	teqmi	r8, sl, lsr #6
   17250:	bcs	ce535c <__bss_end__@@Base+0xcb8888>
   17254:	ldrdeq	r1, [r0], -r4
   17258:	ldr	r2, [r2]
   1725c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17260:	cmp	r2, #0
   17264:	mov	r4, r3
   17268:	ldr	r2, [r3, #12]
   1726c:	ldr	r3, [sp, #32]
   17270:	beq	1735c <build_ast@@Base+0xe48>
   17274:	cmp	r1, #0
   17278:	addeq	r1, r2, #1
   1727c:	streq	r1, [r4, #12]
   17280:	cmp	r2, #0
   17284:	ldr	r0, [r4, #16]
   17288:	ldr	lr, [r4, #20]
   1728c:	ldrd	r6, [r4, #24]
   17290:	ldr	r2, [r4, #32]
   17294:	ldr	r1, [r4, #36]	; 0x24
   17298:	bne	17308 <build_ast@@Base+0xdf4>
   1729c:	ldr	ip, [r3, #8]
   172a0:	str	ip, [r4, #8]
   172a4:	ldr	ip, [r3, #16]
   172a8:	ldr	r5, [r3, #20]
   172ac:	adds	r0, ip, r0
   172b0:	adc	lr, r5, lr
   172b4:	str	r0, [r4, #16]
   172b8:	str	lr, [r4, #20]
   172bc:	ldrd	r8, [r3, #24]
   172c0:	cmp	r6, r8
   172c4:	sbcs	r0, r7, r9
   172c8:	bge	1737c <build_ast@@Base+0xe68>
   172cc:	strd	r8, [r4, #24]
   172d0:	ldr	r0, [r3, #24]
   172d4:	ldr	ip, [r3, #28]
   172d8:	adds	r2, r0, r2
   172dc:	adc	r1, ip, r1
   172e0:	str	r1, [r4, #36]	; 0x24
   172e4:	str	r2, [r4, #32]
   172e8:	add	r1, r3, #40	; 0x28
   172ec:	ldr	r2, [pc, #176]	; 173a4 <build_ast@@Base+0xe90>
   172f0:	add	r0, r4, #40	; 0x28
   172f4:	bl	11888 <memcpy@plt>
   172f8:	ldr	r3, [sp, #36]	; 0x24
   172fc:	mov	r0, #0
   17300:	str	r3, [r4]
   17304:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17308:	ldr	ip, [r3, #16]
   1730c:	ldr	r5, [r3, #20]
   17310:	adds	r0, ip, r0
   17314:	adc	lr, r5, lr
   17318:	str	r0, [r4, #16]
   1731c:	str	lr, [r4, #20]
   17320:	ldrd	r8, [r3, #24]
   17324:	cmp	r6, r8
   17328:	sbcs	r0, r7, r9
   1732c:	bge	17390 <build_ast@@Base+0xe7c>
   17330:	strd	r8, [r4, #24]
   17334:	ldr	r0, [r3, #24]
   17338:	ldr	ip, [r3, #28]
   1733c:	adds	r2, r0, r2
   17340:	adc	r1, ip, r1
   17344:	str	r1, [r4, #36]	; 0x24
   17348:	str	r2, [r4, #32]
   1734c:	add	r1, r3, #40	; 0x28
   17350:	add	r0, r4, #40	; 0x28
   17354:	bl	16d24 <build_ast@@Base+0x810>
   17358:	b	172f8 <build_ast@@Base+0xde4>
   1735c:	cmp	r2, #0
   17360:	beq	172f8 <build_ast@@Base+0xde4>
   17364:	mov	r1, r0
   17368:	ldr	r0, [pc, #56]	; 173a8 <build_ast@@Base+0xe94>
   1736c:	add	r0, pc, r0
   17370:	bl	16868 <build_ast@@Base+0x354>
   17374:	mvn	r0, #0
   17378:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1737c:	adds	r2, r2, r8
   17380:	adc	r1, r1, r9
   17384:	str	r1, [r4, #36]	; 0x24
   17388:	str	r2, [r4, #32]
   1738c:	b	172e8 <build_ast@@Base+0xdd4>
   17390:	adds	r2, r2, r8
   17394:	adc	r1, r1, r9
   17398:	str	r1, [r4, #36]	; 0x24
   1739c:	str	r2, [r4, #32]
   173a0:	b	1734c <build_ast@@Base+0xe38>
   173a4:	andeq	r1, r0, r0, lsr #15
   173a8:	ldrdeq	r1, [r0], -r0
   173ac:	ldr	r0, [pc, #52]	; 173e8 <build_ast@@Base+0xed4>
   173b0:	ldr	r3, [pc, #52]	; 173ec <build_ast@@Base+0xed8>
   173b4:	add	r0, pc, r0
   173b8:	push	{lr}		; (str lr, [sp, #-4]!)
   173bc:	mov	ip, #0
   173c0:	ldr	r3, [r0, r3]
   173c4:	mvn	lr, #0
   173c8:	mov	r2, ip
   173cc:	str	lr, [r3, #24]
   173d0:	mov	r1, ip
   173d4:	ldr	r0, [r3]
   173d8:	pop	{lr}		; (ldr lr, [sp], #4)
   173dc:	str	ip, [r3, #4]
   173e0:	str	ip, [r3, #8]
   173e4:	b	119b4 <fseek@plt>
   173e8:	andeq	r2, r1, r4, asr #24
   173ec:	andeq	r0, r0, ip, lsr #1
   173f0:	push	{r4, r5, r6, r7, lr}
   173f4:	mov	r2, #0
   173f8:	sub	sp, sp, #36	; 0x24
   173fc:	mov	r3, #0
   17400:	mov	r4, #0
   17404:	mov	r6, r0
   17408:	strd	r2, [sp, #8]
   1740c:	strd	r2, [sp, #16]
   17410:	strh	r4, [sp, #2]
   17414:	bl	1190c <getpid@plt>
   17418:	ldr	r3, [pc, #196]	; 174e4 <build_ast@@Base+0xfd0>
   1741c:	ldr	ip, [pc, #196]	; 174e8 <build_ast@@Base+0xfd4>
   17420:	add	r3, pc, r3
   17424:	mvn	lr, #0
   17428:	mov	r7, #1
   1742c:	ldr	r2, [pc, #184]	; 174ec <build_ast@@Base+0xfd8>
   17430:	mov	r1, #66	; 0x42
   17434:	str	r0, [sp, #24]
   17438:	ldr	r5, [r3, ip]
   1743c:	mov	r0, r6
   17440:	strh	r7, [sp]
   17444:	str	r4, [r5, #4]
   17448:	str	r4, [r5, #12]
   1744c:	str	r4, [r5, #8]
   17450:	str	r4, [r5, #20]
   17454:	str	lr, [r5, #16]
   17458:	bl	118c4 <open64@plt>
   1745c:	subs	r6, r0, #0
   17460:	movlt	r0, r4
   17464:	blt	174c8 <build_ast@@Base+0xfb4>
   17468:	mov	r4, sp
   1746c:	mov	r2, r4
   17470:	mov	r1, #14
   17474:	mov	r0, r6
   17478:	bl	11984 <fcntl64@plt>
   1747c:	cmp	r0, #0
   17480:	beq	17494 <build_ast@@Base+0xf80>
   17484:	bl	1193c <__errno_location@plt>
   17488:	ldr	r3, [r0]
   1748c:	cmp	r3, #4
   17490:	beq	1746c <build_ast@@Base+0xf58>
   17494:	ldr	r1, [pc, #84]	; 174f0 <build_ast@@Base+0xfdc>
   17498:	mov	r0, r6
   1749c:	add	r1, pc, r1
   174a0:	bl	11840 <fdopen@plt>
   174a4:	cmp	r0, #0
   174a8:	mov	r4, r0
   174ac:	str	r0, [r5]
   174b0:	beq	174d0 <build_ast@@Base+0xfbc>
   174b4:	mov	r4, #1
   174b8:	mov	r1, #0
   174bc:	str	r4, [r5, #24]
   174c0:	bl	11858 <setbuf@plt>
   174c4:	mov	r0, r4
   174c8:	add	sp, sp, #36	; 0x24
   174cc:	pop	{r4, r5, r6, r7, pc}
   174d0:	mov	r0, r6
   174d4:	bl	119e4 <close@plt>
   174d8:	mov	r0, r4
   174dc:	add	sp, sp, #36	; 0x24
   174e0:	pop	{r4, r5, r6, r7, pc}
   174e4:	ldrdeq	r2, [r1], -r8
   174e8:	andeq	r0, r0, ip, lsr #1
   174ec:			; <UNDEFINED> instruction: 0x000001b6
   174f0:	andeq	r1, r0, ip, asr #25
   174f4:	push	{r4, r5, r6, lr}
   174f8:	mov	r4, r1
   174fc:	ldr	r5, [pc, #248]	; 175fc <build_ast@@Base+0x10e8>
   17500:	ldr	ip, [r4, #8]
   17504:	ldr	lr, [r4, #12]
   17508:	ldr	r6, [r4]
   1750c:	cmp	ip, #0
   17510:	mov	r1, r0
   17514:	add	r5, pc, r5
   17518:	add	r0, r6, lr
   1751c:	ble	17558 <build_ast@@Base+0x1044>
   17520:	ldrb	r3, [r1]
   17524:	cmp	r3, #47	; 0x2f
   17528:	addeq	r2, r1, #1
   1752c:	ldrbeq	r3, [r1, #1]
   17530:	movne	r2, r1
   17534:	cmp	r3, #0
   17538:	beq	17558 <build_ast@@Base+0x1044>
   1753c:	cmp	r3, #47	; 0x2f
   17540:	moveq	r1, r2
   17544:	ldrb	r3, [r2, #1]!
   17548:	subeq	ip, ip, #1
   1754c:	cmp	r3, #0
   17550:	cmpne	ip, #0
   17554:	bne	1753c <build_ast@@Base+0x1028>
   17558:	cmp	lr, #0
   1755c:	bne	1757c <build_ast@@Base+0x1068>
   17560:	bl	118ac <strcpy@plt>
   17564:	ldr	r0, [r4]
   17568:	bl	173f0 <build_ast@@Base+0xedc>
   1756c:	cmp	r0, #0
   17570:	beq	17594 <build_ast@@Base+0x1080>
   17574:	mov	r0, #0
   17578:	pop	{r4, r5, r6, pc}
   1757c:	ldrb	r3, [r1]
   17580:	cmp	r3, #47	; 0x2f
   17584:	movne	r3, #47	; 0x2f
   17588:	addne	r0, r0, #1
   1758c:	strbne	r3, [r6, lr]
   17590:	b	17560 <build_ast@@Base+0x104c>
   17594:	ldr	r0, [r4]
   17598:	bl	17134 <build_ast@@Base+0xc20>
   1759c:	cmp	r0, #0
   175a0:	bne	175d8 <build_ast@@Base+0x10c4>
   175a4:	ldr	r0, [r4]
   175a8:	bl	173f0 <build_ast@@Base+0xedc>
   175ac:	cmp	r0, #0
   175b0:	bne	17574 <build_ast@@Base+0x1060>
   175b4:	ldr	r3, [pc, #68]	; 17600 <build_ast@@Base+0x10ec>
   175b8:	ldr	r1, [pc, #68]	; 17604 <build_ast@@Base+0x10f0>
   175bc:	ldr	r2, [r4]
   175c0:	ldr	r3, [r5, r3]
   175c4:	add	r1, pc, r1
   175c8:	ldr	r0, [r3]
   175cc:	bl	11930 <fprintf@plt>
   175d0:	mvn	r0, #0
   175d4:	pop	{r4, r5, r6, pc}
   175d8:	ldr	r3, [pc, #32]	; 17600 <build_ast@@Base+0x10ec>
   175dc:	ldr	r1, [pc, #36]	; 17608 <build_ast@@Base+0x10f4>
   175e0:	ldr	r2, [r4]
   175e4:	ldr	r3, [r5, r3]
   175e8:	add	r1, pc, r1
   175ec:	ldr	r0, [r3]
   175f0:	bl	11930 <fprintf@plt>
   175f4:	mvn	r0, #0
   175f8:	pop	{r4, r5, r6, pc}
   175fc:	andeq	r2, r1, r4, ror #21
   17600:	andeq	r0, r0, r0, lsr #1
   17604:			; <UNDEFINED> instruction: 0x00001bbc
   17608:	andeq	r1, r0, r4, lsl #23
   1760c:	ldr	r3, [pc, #96]	; 17674 <build_ast@@Base+0x1160>
   17610:	ldr	r2, [pc, #96]	; 17678 <build_ast@@Base+0x1164>
   17614:	add	r3, pc, r3
   17618:	push	{r4, lr}
   1761c:	ldr	r4, [r3, r2]
   17620:	ldr	r0, [r4]
   17624:	cmp	r0, #0
   17628:	beq	17648 <build_ast@@Base+0x1134>
   1762c:	ldr	r3, [r4, #8]
   17630:	cmp	r3, #0
   17634:	bne	17658 <build_ast@@Base+0x1144>
   17638:	bl	1196c <fclose@plt>
   1763c:	mov	r3, #0
   17640:	str	r3, [r4]
   17644:	str	r3, [r4, #12]
   17648:	mov	r3, #0
   1764c:	str	r3, [r4, #24]
   17650:	ldr	r0, [r4, #20]
   17654:	pop	{r4, pc}
   17658:	ldr	r2, [r4, #24]
   1765c:	cmp	r2, #0
   17660:	bge	17638 <build_ast@@Base+0x1124>
   17664:	mov	r0, r3
   17668:	bl	16660 <build_ast@@Base+0x14c>
   1766c:	ldr	r0, [r4]
   17670:	b	17638 <build_ast@@Base+0x1124>
   17674:	andeq	r2, r1, r4, ror #19
   17678:	andeq	r0, r0, ip, lsr #1
   1767c:	push	{r4, lr}
   17680:	mov	r4, r0
   17684:	mov	r0, #1
   17688:	bl	166bc <build_ast@@Base+0x1a8>
   1768c:	str	r4, [r0]
   17690:	pop	{r4, pc}
   17694:	push	{r4, r5, r6, lr}
   17698:	mov	r5, r0
   1769c:	mov	r0, #2
   176a0:	mov	r4, r1
   176a4:	bl	166bc <build_ast@@Base+0x1a8>
   176a8:	str	r5, [r0]
   176ac:	str	r4, [r0, #4]
   176b0:	pop	{r4, r5, r6, pc}
   176b4:	push	{r4, r5, r6, lr}
   176b8:	mov	r5, r0
   176bc:	mov	r0, #2
   176c0:	mov	r4, r1
   176c4:	bl	166bc <build_ast@@Base+0x1a8>
   176c8:	str	r5, [r0]
   176cc:	str	r4, [r0, #4]
   176d0:	pop	{r4, r5, r6, pc}
   176d4:	mov	r2, #0
   176d8:	push	{r4, r5, r6, r7, r8, lr}
   176dc:	mov	r3, r2
   176e0:	sub	sp, sp, #32
   176e4:	mov	r5, r1
   176e8:	mov	r7, r2
   176ec:	mov	r4, r1
   176f0:	mov	r8, #1
   176f4:	str	r2, [sp]
   176f8:	str	r2, [sp, #4]
   176fc:	str	r2, [sp, #8]
   17700:	str	r2, [sp, #12]
   17704:	str	r2, [sp, #16]
   17708:	str	r2, [sp, #20]
   1770c:	str	r2, [sp, #24]
   17710:	str	r2, [sp, #28]
   17714:	lsr	r2, r3, #5
   17718:	ldr	lr, [r1, #40]	; 0x28
   1771c:	add	ip, sp, #32
   17720:	cmp	lr, #0
   17724:	add	r2, ip, r2, lsl #2
   17728:	and	r6, r3, #31
   1772c:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   17730:	add	r3, r3, #1
   17734:	orrne	ip, ip, r8, lsl r6
   17738:	addne	r7, r7, #1
   1773c:	strne	ip, [r2, #-32]	; 0xffffffe0
   17740:	cmp	r3, #252	; 0xfc
   17744:	add	r1, r1, #24
   17748:	bne	17714 <build_ast@@Base+0x1200>
   1774c:	add	r7, r7, r7, lsl #2
   17750:	add	r1, r7, #17
   17754:	bl	176b4 <build_ast@@Base+0x11a0>
   17758:	ldr	r0, [r5]
   1775c:	bl	1767c <build_ast@@Base+0x1168>
   17760:	ldr	r0, [r5, #8]
   17764:	bl	1767c <build_ast@@Base+0x1168>
   17768:	ldr	r0, [r5, #12]
   1776c:	bl	1767c <build_ast@@Base+0x1168>
   17770:	ldrd	r0, [r5, #16]
   17774:	bl	17694 <build_ast@@Base+0x1180>
   17778:	ldrd	r0, [r5, #24]
   1777c:	bl	17694 <build_ast@@Base+0x1180>
   17780:	ldrd	r0, [r5, #32]
   17784:	bl	17694 <build_ast@@Base+0x1180>
   17788:	sub	r6, sp, #4
   1778c:	add	r7, sp, #28
   17790:	ldr	r0, [r6, #4]!
   17794:	bl	1767c <build_ast@@Base+0x1168>
   17798:	cmp	r7, r6
   1779c:	bne	17790 <build_ast@@Base+0x127c>
   177a0:	add	r5, r5, #6016	; 0x1780
   177a4:	add	r5, r5, #32
   177a8:	ldr	r3, [r4, #40]	; 0x28
   177ac:	subs	r0, r3, #0
   177b0:	beq	177c8 <build_ast@@Base+0x12b4>
   177b4:	bl	1767c <build_ast@@Base+0x1168>
   177b8:	ldrd	r0, [r4, #48]	; 0x30
   177bc:	bl	17694 <build_ast@@Base+0x1180>
   177c0:	ldrd	r0, [r4, #56]	; 0x38
   177c4:	bl	17694 <build_ast@@Base+0x1180>
   177c8:	add	r4, r4, #24
   177cc:	cmp	r4, r5
   177d0:	bne	177a8 <build_ast@@Base+0x1294>
   177d4:	add	sp, sp, #32
   177d8:	pop	{r4, r5, r6, r7, r8, pc}
   177dc:	push	{r4, lr}
   177e0:	mov	r0, #1
   177e4:	bl	1671c <build_ast@@Base+0x208>
   177e8:	subs	r3, r0, #0
   177ec:	popeq	{r4, pc}
   177f0:	ldr	r0, [r3]
   177f4:	pop	{r4, lr}
   177f8:	b	165e0 <build_ast@@Base+0xcc>
   177fc:	push	{r4, lr}
   17800:	mov	r0, #2
   17804:	bl	1671c <build_ast@@Base+0x208>
   17808:	subs	r2, r0, #0
   1780c:	beq	17830 <build_ast@@Base+0x131c>
   17810:	ldr	r0, [r2]
   17814:	bl	165e0 <build_ast@@Base+0xcc>
   17818:	mov	r3, r0
   1781c:	ldr	r0, [r2, #4]
   17820:	bl	165e0 <build_ast@@Base+0xcc>
   17824:	mov	r1, r0
   17828:	mov	r0, r3
   1782c:	pop	{r4, pc}
   17830:	mov	r3, r2
   17834:	mov	r1, r2
   17838:	mov	r0, r3
   1783c:	pop	{r4, pc}
   17840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17844:	sub	sp, sp, #28
   17848:	mov	r8, r1
   1784c:	str	r3, [sp, #12]
   17850:	mov	r4, #0
   17854:	add	r3, r1, #52	; 0x34
   17858:	add	r1, r1, #16
   1785c:	str	r0, [sp, #20]
   17860:	str	r2, [sp, #16]
   17864:	ldr	r2, [r3, #-4]!
   17868:	cmp	r2, #0
   1786c:	addne	r4, r4, #1
   17870:	cmp	r1, r3
   17874:	bne	17864 <build_ast@@Base+0x1350>
   17878:	add	r4, r4, #4
   1787c:	lsl	r4, r4, #3
   17880:	mov	r0, r4
   17884:	bl	118e8 <malloc@plt>
   17888:	subs	r6, r0, #0
   1788c:	beq	17960 <build_ast@@Base+0x144c>
   17890:	ldr	r3, [sp, #12]
   17894:	mov	r4, #0
   17898:	str	r3, [r6, #4]
   1789c:	str	r4, [r6]
   178a0:	bl	177dc <build_ast@@Base+0x12c8>
   178a4:	mov	r7, r4
   178a8:	add	r5, r8, #12
   178ac:	str	r0, [r6, #12]
   178b0:	bl	177dc <build_ast@@Base+0x12c8>
   178b4:	str	r0, [r6, #16]
   178b8:	bl	177dc <build_ast@@Base+0x12c8>
   178bc:	str	r0, [r6, #20]
   178c0:	b	178d0 <build_ast@@Base+0x13bc>
   178c4:	add	r4, r4, #1
   178c8:	cmp	r4, #9
   178cc:	beq	1794c <build_ast@@Base+0x1438>
   178d0:	ldr	r3, [r5, #4]!
   178d4:	cmp	r3, #0
   178d8:	beq	178c4 <build_ast@@Base+0x13b0>
   178dc:	bl	177dc <build_ast@@Base+0x12c8>
   178e0:	lsl	r3, r4, #17
   178e4:	add	r3, r3, #27262976	; 0x1a00000
   178e8:	add	r3, r3, #65536	; 0x10000
   178ec:	cmp	r0, r3
   178f0:	bne	179b4 <build_ast@@Base+0x14a0>
   178f4:	bl	177dc <build_ast@@Base+0x12c8>
   178f8:	lsr	sl, r0, #1
   178fc:	lsl	fp, sl, #3
   17900:	mov	r0, fp
   17904:	bl	118e8 <malloc@plt>
   17908:	subs	r9, r0, #0
   1790c:	beq	179c4 <build_ast@@Base+0x14b0>
   17910:	add	r1, r6, r7, lsl #3
   17914:	cmp	sl, #0
   17918:	str	sl, [r1, #24]
   1791c:	str	r9, [r1, #28]
   17920:	sub	fp, sl, #1
   17924:	beq	1793c <build_ast@@Base+0x1428>
   17928:	bl	177fc <build_ast@@Base+0x12e8>
   1792c:	sub	fp, fp, #1
   17930:	cmn	fp, #1
   17934:	strd	r0, [r9], #8
   17938:	bne	17928 <build_ast@@Base+0x1414>
   1793c:	add	r4, r4, #1
   17940:	cmp	r4, #9
   17944:	add	r7, r7, #1
   17948:	bne	178d0 <build_ast@@Base+0x13bc>
   1794c:	ldr	r3, [sp, #16]
   17950:	mov	r0, r6
   17954:	str	r6, [r3]
   17958:	add	sp, sp, #28
   1795c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17960:	mvn	r5, #0
   17964:	cmp	r4, #0
   17968:	bne	179a8 <build_ast@@Base+0x1494>
   1796c:	ldr	r3, [pc, #92]	; 179d0 <build_ast@@Base+0x14bc>
   17970:	mov	r4, r5
   17974:	add	r3, pc, r3
   17978:	ldr	r0, [pc, #84]	; 179d4 <build_ast@@Base+0x14c0>
   1797c:	ldr	r2, [sp, #12]
   17980:	ldr	r1, [sp, #20]
   17984:	str	r4, [sp]
   17988:	add	r0, pc, r0
   1798c:	bl	16868 <build_ast@@Base+0x354>
   17990:	mov	r2, r5
   17994:	mov	r1, r6
   17998:	mov	r0, r8
   1799c:	add	sp, sp, #28
   179a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179a4:	b	1689c <build_ast@@Base+0x388>
   179a8:	ldr	r3, [pc, #40]	; 179d8 <build_ast@@Base+0x14c4>
   179ac:	add	r3, pc, r3
   179b0:	b	17978 <build_ast@@Base+0x1464>
   179b4:	ldr	r3, [pc, #32]	; 179dc <build_ast@@Base+0x14c8>
   179b8:	mov	r5, r4
   179bc:	add	r3, pc, r3
   179c0:	b	17978 <build_ast@@Base+0x1464>
   179c4:	mov	r5, r4
   179c8:	mov	r4, fp
   179cc:	b	17964 <build_ast@@Base+0x1450>
   179d0:	andeq	r1, r0, r8, lsr #16
   179d4:	andeq	r1, r0, r8, lsr r8
   179d8:	andeq	r1, r0, r4, lsl #16
   179dc:	andeq	r1, r0, r0, ror #15
   179e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179e4:	sub	sp, sp, #36	; 0x24
   179e8:	mov	r9, r0
   179ec:	bl	177dc <build_ast@@Base+0x12c8>
   179f0:	mov	r7, #0
   179f4:	sub	r4, sp, #4
   179f8:	add	r5, sp, #28
   179fc:	str	r0, [r9]
   17a00:	bl	177dc <build_ast@@Base+0x12c8>
   17a04:	str	r0, [r9, #8]
   17a08:	bl	177dc <build_ast@@Base+0x12c8>
   17a0c:	str	r0, [r9, #12]
   17a10:	bl	177fc <build_ast@@Base+0x12e8>
   17a14:	strd	r0, [r9, #16]
   17a18:	bl	177fc <build_ast@@Base+0x12e8>
   17a1c:	strd	r0, [r9, #24]
   17a20:	bl	177fc <build_ast@@Base+0x12e8>
   17a24:	ldr	r2, [pc, #264]	; 17b34 <build_ast@@Base+0x1620>
   17a28:	strd	r0, [r9, #32]
   17a2c:	add	r0, r9, #40	; 0x28
   17a30:	mov	r1, r7
   17a34:	bl	11954 <memset@plt>
   17a38:	bl	177dc <build_ast@@Base+0x12c8>
   17a3c:	str	r0, [r4, #4]!
   17a40:	bl	18724 <__gcov_sort_n_vals@@Base+0x64c>
   17a44:	cmp	r4, r5
   17a48:	add	r7, r7, r0
   17a4c:	bne	17a38 <build_ast@@Base+0x1524>
   17a50:	cmp	r7, #0
   17a54:	sub	r7, r7, #1
   17a58:	beq	17b20 <build_ast@@Base+0x160c>
   17a5c:	ldr	r8, [pc, #212]	; 17b38 <build_ast@@Base+0x1624>
   17a60:	ldr	sl, [pc, #212]	; 17b3c <build_ast@@Base+0x1628>
   17a64:	mov	r4, #0
   17a68:	add	r8, pc, r8
   17a6c:	add	sl, pc, sl
   17a70:	mov	r5, r4
   17a74:	mov	r6, r4
   17a78:	cmp	r4, #0
   17a7c:	addeq	r3, sp, #32
   17a80:	addeq	r6, r3, r5, lsl #2
   17a84:	subeq	r6, r6, #36	; 0x24
   17a88:	beq	17aa4 <build_ast@@Base+0x1590>
   17a8c:	b	17acc <build_ast@@Base+0x15b8>
   17a90:	ldr	r4, [r6, #4]!
   17a94:	add	r3, r5, #1
   17a98:	cmp	r4, #0
   17a9c:	bne	17ac4 <build_ast@@Base+0x15b0>
   17aa0:	mov	r5, r3
   17aa4:	cmp	r5, #7
   17aa8:	bls	17a90 <build_ast@@Base+0x157c>
   17aac:	mov	r0, r8
   17ab0:	bl	16868 <build_ast@@Base+0x354>
   17ab4:	ldr	r4, [r6, #4]!
   17ab8:	add	r3, r5, #1
   17abc:	cmp	r4, #0
   17ac0:	beq	17aa0 <build_ast@@Base+0x158c>
   17ac4:	lsl	r6, r5, #5
   17ac8:	mov	r5, r3
   17acc:	tst	r4, #1
   17ad0:	bne	17ae4 <build_ast@@Base+0x15d0>
   17ad4:	lsr	r4, r4, #1
   17ad8:	tst	r4, #1
   17adc:	add	r6, r6, #1
   17ae0:	beq	17ad4 <build_ast@@Base+0x15c0>
   17ae4:	cmp	r6, #251	; 0xfb
   17ae8:	bhi	17b28 <build_ast@@Base+0x1614>
   17aec:	bl	177dc <build_ast@@Base+0x12c8>
   17af0:	add	fp, r6, r6, lsl #1
   17af4:	sub	r7, r7, #1
   17af8:	add	fp, r9, fp, lsl #3
   17afc:	lsr	r4, r4, #1
   17b00:	add	r6, r6, #1
   17b04:	str	r0, [fp, #40]	; 0x28
   17b08:	bl	177fc <build_ast@@Base+0x12e8>
   17b0c:	strd	r0, [fp, #48]	; 0x30
   17b10:	bl	177fc <build_ast@@Base+0x12e8>
   17b14:	cmn	r7, #1
   17b18:	strd	r0, [fp, #56]	; 0x38
   17b1c:	bne	17a78 <build_ast@@Base+0x1564>
   17b20:	add	sp, sp, #36	; 0x24
   17b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b28:	mov	r0, sl
   17b2c:	bl	16868 <build_ast@@Base+0x354>
   17b30:	b	17aec <build_ast@@Base+0x15d8>
   17b34:	andeq	r1, r0, r0, lsr #15
   17b38:	andeq	r1, r0, ip, ror r7
   17b3c:			; <UNDEFINED> instruction: 0x000017b8
   17b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b44:	sub	sp, sp, #6080	; 0x17c0
   17b48:	sub	sp, sp, #28
   17b4c:	mov	r4, r1
   17b50:	strd	r2, [sp, #4]
   17b54:	add	r3, sp, #6144	; 0x1800
   17b58:	mov	r9, r0
   17b5c:	ldr	r7, [r3]
   17b60:	add	r3, sp, #6144	; 0x1800
   17b64:	add	r3, r3, #4
   17b68:	ldr	r6, [r3]
   17b6c:	add	r3, sp, #6144	; 0x1800
   17b70:	add	r3, r3, #8
   17b74:	ldr	sl, [r3]
   17b78:	bl	177dc <build_ast@@Base+0x12c8>
   17b7c:	add	r3, r4, #12
   17b80:	mov	r2, r9
   17b84:	str	r3, [sp, #12]
   17b88:	mov	r1, r0
   17b8c:	mov	r0, r3
   17b90:	bl	171f8 <build_ast@@Base+0xce4>
   17b94:	cmp	r0, #0
   17b98:	beq	17e20 <build_ast@@Base+0x190c>
   17b9c:	bl	177dc <build_ast@@Base+0x12c8>
   17ba0:	ldr	r3, [r4, #8]
   17ba4:	cmp	r0, r3
   17ba8:	bne	17c3c <build_ast@@Base+0x1728>
   17bac:	ldr	fp, [pc, #628]	; 17e28 <build_ast@@Base+0x1914>
   17bb0:	add	r5, sp, #16
   17bb4:	add	fp, pc, fp
   17bb8:	bl	16590 <build_ast@@Base+0x7c>
   17bbc:	str	r0, [r6]
   17bc0:	bl	177dc <build_ast@@Base+0x12c8>
   17bc4:	cmp	r0, #-1560281088	; 0xa3000000
   17bc8:	bne	17c80 <build_ast@@Base+0x176c>
   17bcc:	bl	177dc <build_ast@@Base+0x12c8>
   17bd0:	mov	r0, r5
   17bd4:	bl	179e0 <build_ast@@Base+0x14cc>
   17bd8:	bl	165b4 <build_ast@@Base+0xa0>
   17bdc:	add	r2, sp, #2000	; 0x7d0
   17be0:	add	r2, r2, #8
   17be4:	subs	r8, r0, #0
   17be8:	bne	17db4 <build_ast@@Base+0x18a0>
   17bec:	ldr	r3, [r7]
   17bf0:	cmp	r3, #0
   17bf4:	bne	17c4c <build_ast@@Base+0x1738>
   17bf8:	ldr	r3, [r2, #-1992]	; 0xfffff838
   17bfc:	cmp	r3, sl
   17c00:	bne	17bb8 <build_ast@@Base+0x16a4>
   17c04:	ldr	r3, [sp, #8]
   17c08:	ldr	r2, [r2, #-1984]	; 0xfffff840
   17c0c:	ldr	r3, [r3]
   17c10:	cmp	r2, r3
   17c14:	bne	17bb8 <build_ast@@Base+0x16a4>
   17c18:	ldr	r2, [pc, #524]	; 17e2c <build_ast@@Base+0x1918>
   17c1c:	mov	r1, r5
   17c20:	ldr	r0, [sp, #4]
   17c24:	bl	11888 <memcpy@plt>
   17c28:	ldr	r3, [r6]
   17c2c:	str	r3, [r7]
   17c30:	b	17bb8 <build_ast@@Base+0x16a4>
   17c34:	cmp	r0, #0
   17c38:	bne	17df4 <build_ast@@Base+0x18e0>
   17c3c:	mov	r0, #0
   17c40:	add	sp, sp, #6080	; 0x17c0
   17c44:	add	sp, sp, #28
   17c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c4c:	ldr	r0, [pc, #476]	; 17e30 <build_ast@@Base+0x191c>
   17c50:	bl	118e8 <malloc@plt>
   17c54:	ldr	r2, [pc, #464]	; 17e2c <build_ast@@Base+0x1918>
   17c58:	mov	r1, r5
   17c5c:	mov	r3, r0
   17c60:	str	r0, [fp]
   17c64:	add	r0, r0, #8
   17c68:	str	r3, [sp]
   17c6c:	bl	11888 <memcpy@plt>
   17c70:	ldr	r3, [sp]
   17c74:	str	r8, [r3]
   17c78:	ldr	fp, [fp]
   17c7c:	b	17bb8 <build_ast@@Base+0x16a4>
   17c80:	ldr	r5, [r4, #52]	; 0x34
   17c84:	cmp	r5, #0
   17c88:	beq	17c34 <build_ast@@Base+0x1720>
   17c8c:	ldr	r3, [r4, #56]	; 0x38
   17c90:	cmp	r0, #16777216	; 0x1000000
   17c94:	ldr	r8, [r3]
   17c98:	bne	17df0 <build_ast@@Base+0x18dc>
   17c9c:	ldr	r6, [pc, #400]	; 17e34 <build_ast@@Base+0x1920>
   17ca0:	mov	r5, #0
   17ca4:	add	r6, pc, r6
   17ca8:	add	r6, r6, #4
   17cac:	b	17cf0 <build_ast@@Base+0x17dc>
   17cb0:	mov	r2, r6
   17cb4:	mov	r3, r5
   17cb8:	mov	r1, r4
   17cbc:	mov	r0, r9
   17cc0:	bl	17840 <build_ast@@Base+0x132c>
   17cc4:	subs	r6, r0, #0
   17cc8:	beq	17df4 <build_ast@@Base+0x18e0>
   17ccc:	bl	177dc <build_ast@@Base+0x12c8>
   17cd0:	ldr	r3, [r4, #52]	; 0x34
   17cd4:	add	r5, r5, #1
   17cd8:	cmp	r3, r5
   17cdc:	beq	17c34 <build_ast@@Base+0x1720>
   17ce0:	ldr	r3, [r4, #56]	; 0x38
   17ce4:	cmp	r0, #16777216	; 0x1000000
   17ce8:	ldr	r8, [r3, r5, lsl #2]
   17cec:	bne	17df4 <build_ast@@Base+0x18e0>
   17cf0:	bl	177dc <build_ast@@Base+0x12c8>
   17cf4:	cmp	r0, #0
   17cf8:	beq	17ccc <build_ast@@Base+0x17b8>
   17cfc:	cmp	r0, #3
   17d00:	bne	17df4 <build_ast@@Base+0x18e0>
   17d04:	cmp	r8, #0
   17d08:	beq	17cb0 <build_ast@@Base+0x179c>
   17d0c:	ldr	r3, [r8]
   17d10:	cmp	r4, r3
   17d14:	bne	17cb0 <build_ast@@Base+0x179c>
   17d18:	bl	177dc <build_ast@@Base+0x12c8>
   17d1c:	ldr	r3, [r8, #4]
   17d20:	cmp	r0, r3
   17d24:	bne	17df4 <build_ast@@Base+0x18e0>
   17d28:	bl	177dc <build_ast@@Base+0x12c8>
   17d2c:	ldr	r3, [r8, #8]
   17d30:	cmp	r0, r3
   17d34:	bne	17df4 <build_ast@@Base+0x18e0>
   17d38:	bl	177dc <build_ast@@Base+0x12c8>
   17d3c:	ldr	r3, [r8, #12]
   17d40:	cmp	r0, r3
   17d44:	bne	17df4 <build_ast@@Base+0x18e0>
   17d48:	ldr	r7, [pc, #232]	; 17e38 <build_ast@@Base+0x1924>
   17d4c:	ldr	fp, [sp, #12]
   17d50:	add	r8, r8, #16
   17d54:	ldr	sl, [fp, #4]!
   17d58:	cmp	sl, #0
   17d5c:	beq	17d94 <build_ast@@Base+0x1880>
   17d60:	bl	177dc <build_ast@@Base+0x12c8>
   17d64:	str	r0, [sp]
   17d68:	bl	177dc <build_ast@@Base+0x12c8>
   17d6c:	ldr	r3, [sp]
   17d70:	cmp	r3, r7
   17d74:	bne	17df4 <build_ast@@Base+0x18e0>
   17d78:	ldr	r3, [r8]
   17d7c:	mov	r1, r3
   17d80:	cmp	r0, r3, lsl #1
   17d84:	bne	17df4 <build_ast@@Base+0x18e0>
   17d88:	ldr	r0, [r8, #4]
   17d8c:	blx	sl
   17d90:	add	r8, r8, #8
   17d94:	ldr	r3, [pc, #160]	; 17e3c <build_ast@@Base+0x1928>
   17d98:	add	r7, r7, #131072	; 0x20000
   17d9c:	cmp	r7, r3
   17da0:	bne	17d54 <build_ast@@Base+0x1840>
   17da4:	bl	165b4 <build_ast@@Base+0xa0>
   17da8:	cmp	r0, #0
   17dac:	beq	17ccc <build_ast@@Base+0x17b8>
   17db0:	mov	r8, r0
   17db4:	cmp	r8, #0
   17db8:	blt	17de4 <build_ast@@Base+0x18d0>
   17dbc:	ldr	r2, [pc, #124]	; 17e40 <build_ast@@Base+0x192c>
   17dc0:	add	r2, pc, r2
   17dc4:	ldr	r0, [pc, #120]	; 17e44 <build_ast@@Base+0x1930>
   17dc8:	mov	r1, r9
   17dcc:	add	r0, pc, r0
   17dd0:	bl	16868 <build_ast@@Base+0x354>
   17dd4:	mvn	r0, #0
   17dd8:	add	sp, sp, #6080	; 0x17c0
   17ddc:	add	sp, sp, #28
   17de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17de4:	ldr	r2, [pc, #92]	; 17e48 <build_ast@@Base+0x1934>
   17de8:	add	r2, pc, r2
   17dec:	b	17dc4 <build_ast@@Base+0x18b0>
   17df0:	mov	r5, #0
   17df4:	ldr	r2, [pc, #80]	; 17e4c <build_ast@@Base+0x1938>
   17df8:	ldr	r0, [pc, #80]	; 17e50 <build_ast@@Base+0x193c>
   17dfc:	mov	r3, r5
   17e00:	mov	r1, r9
   17e04:	add	r2, pc, r2
   17e08:	add	r0, pc, r0
   17e0c:	bl	16868 <build_ast@@Base+0x354>
   17e10:	mvn	r0, #0
   17e14:	add	sp, sp, #6080	; 0x17c0
   17e18:	add	sp, sp, #28
   17e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e20:	mvn	r0, #0
   17e24:	b	17c40 <build_ast@@Base+0x172c>
   17e28:	andeq	r3, r1, ip, ror fp
   17e2c:	andeq	r1, r0, r8, asr #15
   17e30:	ldrdeq	r1, [r0], -r0
   17e34:	andeq	r3, r1, ip, lsl #21
   17e38:			; <UNDEFINED> instruction: 0x01a10000
   17e3c:			; <UNDEFINED> instruction: 0x01b30000
   17e40:	andeq	r1, r0, ip, lsr #9
   17e44:	ldrdeq	r1, [r0], -ip
   17e48:	andeq	r1, r0, r8, ror r4
   17e4c:	andeq	r1, r0, r0, ror r4
   17e50:	andeq	r1, r0, r8, ror r4
   17e54:	ldr	r3, [pc, #72]	; 17ea4 <build_ast@@Base+0x1990>
   17e58:	ldr	r2, [pc, #72]	; 17ea8 <build_ast@@Base+0x1994>
   17e5c:	add	r3, pc, r3
   17e60:	push	{r4, r5, r6, lr}
   17e64:	mov	r5, r0
   17e68:	ldr	r4, [r3, r2]
   17e6c:	ldr	r0, [r4, #8]
   17e70:	cmp	r0, #0
   17e74:	bne	17e9c <build_ast@@Base+0x1988>
   17e78:	lsl	r1, r5, #2
   17e7c:	mov	r2, #0
   17e80:	ldr	r0, [r4]
   17e84:	bl	119b4 <fseek@plt>
   17e88:	ldr	r0, [r4]
   17e8c:	bl	11894 <ftell@plt>
   17e90:	asr	r0, r0, #2
   17e94:	str	r0, [r4, #4]
   17e98:	pop	{r4, r5, r6, pc}
   17e9c:	bl	16660 <build_ast@@Base+0x14c>
   17ea0:	b	17e78 <build_ast@@Base+0x1964>
   17ea4:	muleq	r1, ip, r1
   17ea8:	andeq	r0, r0, ip, lsr #1
   17eac:	cmp	r2, #0
   17eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eb4:	mov	r8, r0
   17eb8:	sub	sp, sp, #20
   17ebc:	mov	r5, r1
   17ec0:	mov	r4, r3
   17ec4:	beq	18094 <build_ast@@Base+0x1b80>
   17ec8:	cmp	r4, #0
   17ecc:	bne	180b0 <build_ast@@Base+0x1b9c>
   17ed0:	mov	r1, r5
   17ed4:	ldr	r5, [pc, #480]	; 180bc <build_ast@@Base+0x1ba8>
   17ed8:	mov	r0, #-1560281088	; 0xa3000000
   17edc:	add	r5, pc, r5
   17ee0:	bl	176d4 <build_ast@@Base+0x11c0>
   17ee4:	ldr	r4, [r5]
   17ee8:	cmp	r4, #0
   17eec:	beq	17f18 <build_ast@@Base+0x1a04>
   17ef0:	add	r1, r4, #8
   17ef4:	mov	r0, #-1560281088	; 0xa3000000
   17ef8:	bl	176d4 <build_ast@@Base+0x11c0>
   17efc:	ldr	r3, [r5]
   17f00:	mov	r0, r3
   17f04:	ldr	r4, [r3]
   17f08:	bl	1187c <free@plt>
   17f0c:	cmp	r4, #0
   17f10:	str	r4, [r5]
   17f14:	bne	17ef0 <build_ast@@Base+0x19dc>
   17f18:	ldr	r3, [r8, #52]	; 0x34
   17f1c:	cmp	r3, #0
   17f20:	beq	1806c <build_ast@@Base+0x1b58>
   17f24:	ldr	r3, [pc, #404]	; 180c0 <build_ast@@Base+0x1bac>
   17f28:	ldr	r9, [pc, #404]	; 180c4 <build_ast@@Base+0x1bb0>
   17f2c:	add	r3, pc, r3
   17f30:	str	r3, [sp, #4]
   17f34:	ldr	r3, [pc, #396]	; 180c8 <build_ast@@Base+0x1bb4>
   17f38:	mov	r7, #0
   17f3c:	add	r3, pc, r3
   17f40:	str	r3, [sp, #12]
   17f44:	b	17f80 <build_ast@@Base+0x1a6c>
   17f48:	ldr	r3, [r8, #56]	; 0x38
   17f4c:	ldr	r4, [r3, r7, lsl #2]
   17f50:	cmp	r4, #0
   17f54:	beq	17f64 <build_ast@@Base+0x1a50>
   17f58:	ldr	r3, [r4]
   17f5c:	cmp	r3, r8
   17f60:	beq	1807c <build_ast@@Base+0x1b68>
   17f64:	mov	r1, #0
   17f68:	mov	r0, #16777216	; 0x1000000
   17f6c:	bl	176b4 <build_ast@@Base+0x11a0>
   17f70:	ldr	r3, [r8, #52]	; 0x34
   17f74:	add	r7, r7, #1
   17f78:	cmp	r3, r7
   17f7c:	beq	1806c <build_ast@@Base+0x1b58>
   17f80:	ldr	r3, [sp, #4]
   17f84:	ldr	r4, [r3, #4]
   17f88:	cmp	r4, #0
   17f8c:	beq	17f48 <build_ast@@Base+0x1a34>
   17f90:	ldr	r3, [r4, #4]
   17f94:	cmp	r3, r7
   17f98:	bne	17f48 <build_ast@@Base+0x1a34>
   17f9c:	mov	r3, #1
   17fa0:	mov	r1, #3
   17fa4:	mov	r0, #16777216	; 0x1000000
   17fa8:	add	r4, r4, #8
   17fac:	str	r3, [sp, #8]
   17fb0:	bl	176b4 <build_ast@@Base+0x11a0>
   17fb4:	ldr	r0, [r4, #4]
   17fb8:	bl	1767c <build_ast@@Base+0x1168>
   17fbc:	ldr	r0, [r4, #8]
   17fc0:	bl	1767c <build_ast@@Base+0x1168>
   17fc4:	ldr	r0, [r4, #12]
   17fc8:	bl	1767c <build_ast@@Base+0x1168>
   17fcc:	ldr	r5, [pc, #248]	; 180cc <build_ast@@Base+0x1bb8>
   17fd0:	add	r4, r4, #16
   17fd4:	add	r6, r8, #12
   17fd8:	b	17fe8 <build_ast@@Base+0x1ad4>
   17fdc:	add	r5, r5, #131072	; 0x20000
   17fe0:	cmp	r5, r9
   17fe4:	beq	18038 <build_ast@@Base+0x1b24>
   17fe8:	ldr	r3, [r6, #4]!
   17fec:	cmp	r3, #0
   17ff0:	beq	17fdc <build_ast@@Base+0x1ac8>
   17ff4:	ldr	fp, [r4]
   17ff8:	mov	r0, r5
   17ffc:	sub	sl, fp, #1
   18000:	lsl	r1, fp, #1
   18004:	bl	176b4 <build_ast@@Base+0x11a0>
   18008:	cmp	fp, #0
   1800c:	ldr	fp, [r4, #4]
   18010:	beq	18028 <build_ast@@Base+0x1b14>
   18014:	sub	sl, sl, #1
   18018:	ldrd	r0, [fp], #8
   1801c:	bl	17694 <build_ast@@Base+0x1180>
   18020:	cmn	sl, #1
   18024:	bne	18014 <build_ast@@Base+0x1b00>
   18028:	add	r5, r5, #131072	; 0x20000
   1802c:	cmp	r5, r9
   18030:	add	r4, r4, #8
   18034:	bne	17fe8 <build_ast@@Base+0x1ad4>
   18038:	ldr	r3, [sp, #8]
   1803c:	cmp	r3, #0
   18040:	beq	17f70 <build_ast@@Base+0x1a5c>
   18044:	ldr	r4, [sp, #12]
   18048:	mov	r2, #9
   1804c:	mov	r0, r8
   18050:	ldr	r1, [r4, #4]
   18054:	bl	1689c <build_ast@@Base+0x388>
   18058:	ldr	r3, [r8, #52]	; 0x34
   1805c:	add	r7, r7, #1
   18060:	cmp	r3, r7
   18064:	str	r0, [r4, #4]
   18068:	bne	17f80 <build_ast@@Base+0x1a6c>
   1806c:	mov	r0, #0
   18070:	add	sp, sp, #20
   18074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18078:	b	1767c <build_ast@@Base+0x1168>
   1807c:	mov	r1, #3
   18080:	mov	r0, #16777216	; 0x1000000
   18084:	bl	176b4 <build_ast@@Base+0x11a0>
   18088:	mov	r3, #0
   1808c:	str	r3, [sp, #8]
   18090:	b	17fb4 <build_ast@@Base+0x1aa0>
   18094:	ldr	r1, [pc, #52]	; 180d0 <build_ast@@Base+0x1bbc>
   18098:	ldr	r0, [pc, #52]	; 180d4 <build_ast@@Base+0x1bc0>
   1809c:	bl	176b4 <build_ast@@Base+0x11a0>
   180a0:	ldr	r0, [r8, #8]
   180a4:	bl	1767c <build_ast@@Base+0x1168>
   180a8:	cmp	r4, #0
   180ac:	beq	17ed0 <build_ast@@Base+0x19bc>
   180b0:	mov	r0, r4
   180b4:	bl	17e54 <build_ast@@Base+0x1940>
   180b8:	b	17ed0 <build_ast@@Base+0x19bc>
   180bc:	andeq	r3, r1, r4, asr r8
   180c0:	andeq	r3, r1, r4, lsl #16
   180c4:			; <UNDEFINED> instruction: 0x01b30000
   180c8:	strdeq	r3, [r1], -r4
   180cc:			; <UNDEFINED> instruction: 0x01a10000
   180d0:	teqmi	r8, sl, lsr #6
   180d4:	strbvs	r6, [r3, -r1, ror #8]!

000180d8 <__gcov_sort_n_vals@@Base>:
   180d8:	cmp	r1, #2
   180dc:	bxle	lr
   180e0:	sub	r1, r1, #3
   180e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180e8:	add	r2, r0, #8
   180ec:	sub	sp, sp, #20
   180f0:	mov	r6, r0
   180f4:	bic	r7, r1, #1
   180f8:	mvn	r8, #15
   180fc:	mov	lr, #0
   18100:	ldrd	r0, [r2]
   18104:	ldrd	r4, [r2, #16]
   18108:	ldrd	sl, [r2, #8]
   1810c:	add	r9, r2, #16
   18110:	cmp	r0, r4
   18114:	sbcs	r3, r1, r5
   18118:	mov	ip, r9
   1811c:	sub	r1, r6, r8
   18120:	strd	sl, [sp]
   18124:	mov	r3, lr
   18128:	bge	18190 <__gcov_sort_n_vals@@Base+0xb8>
   1812c:	add	sl, r8, #16
   18130:	mvn	fp, #1
   18134:	add	sl, r2, sl
   18138:	orr	fp, lr, fp
   1813c:	str	r7, [sp, #8]
   18140:	str	r6, [sp, #12]
   18144:	b	1815c <__gcov_sort_n_vals@@Base+0x84>
   18148:	ldrd	r6, [ip, #-16]
   1814c:	sub	r2, r2, #16
   18150:	cmp	r6, r4
   18154:	sbcs	r1, r7, r5
   18158:	bge	181b8 <__gcov_sort_n_vals@@Base+0xe0>
   1815c:	ldrd	r6, [r2, #-8]
   18160:	lsl	r1, r3, #3
   18164:	mov	r0, r3
   18168:	strd	r6, [r2, #8]
   1816c:	ldrd	r6, [sl, r1]
   18170:	sub	r3, r3, #2
   18174:	cmp	r3, fp
   18178:	strd	r6, [r2, #16]
   1817c:	mov	ip, r2
   18180:	bne	18148 <__gcov_sort_n_vals@@Base+0x70>
   18184:	ldr	r6, [sp, #12]
   18188:	ldr	r7, [sp, #8]
   1818c:	add	r1, r6, r1
   18190:	ldrd	r2, [sp]
   18194:	cmp	lr, r7
   18198:	sub	r8, r8, #16
   1819c:	strd	r2, [r1]
   181a0:	add	lr, lr, #2
   181a4:	strd	r4, [ip]
   181a8:	mov	r2, r9
   181ac:	bne	18100 <__gcov_sort_n_vals@@Base+0x28>
   181b0:	add	sp, sp, #20
   181b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181b8:	ldr	r6, [sp, #12]
   181bc:	ldr	r7, [sp, #8]
   181c0:	add	r1, r6, r0, lsl #3
   181c4:	b	18190 <__gcov_sort_n_vals@@Base+0xb8>
   181c8:	push	{r4, r5, r6, lr}
   181cc:	ldr	r4, [pc, #76]	; 18220 <__gcov_sort_n_vals@@Base+0x148>
   181d0:	smull	r2, r3, r4, r0
   181d4:	asr	r4, r0, #31
   181d8:	rsb	r4, r4, r3, asr #1
   181dc:	add	r4, r4, r4, lsl #3
   181e0:	subs	r4, r0, r4
   181e4:	bne	1821c <__gcov_sort_n_vals@@Base+0x144>
   181e8:	cmp	r0, #0
   181ec:	mov	r6, r0
   181f0:	ldr	r5, [r1]
   181f4:	pople	{r4, r5, r6, pc}
   181f8:	add	r5, r5, #8
   181fc:	mov	r0, r5
   18200:	add	r4, r4, #9
   18204:	mov	r1, #8
   18208:	bl	180d8 <__gcov_sort_n_vals@@Base>
   1820c:	cmp	r6, r4
   18210:	add	r5, r5, #72	; 0x48
   18214:	bgt	181fc <__gcov_sort_n_vals@@Base+0x124>
   18218:	pop	{r4, r5, r6, pc}
   1821c:	bl	119d8 <abort@plt>
   18220:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   18224:	ldr	r3, [r0, #48]	; 0x30
   18228:	cmp	r3, #0
   1822c:	bxeq	lr
   18230:	push	{r4, r5, r6, lr}
   18234:	ldr	lr, [r0, #52]	; 0x34
   18238:	cmp	lr, #0
   1823c:	popeq	{r4, r5, r6, pc}
   18240:	mov	r5, r0
   18244:	mov	r4, #0
   18248:	add	r6, r0, #12
   1824c:	ldr	r1, [r5, #56]	; 0x38
   18250:	mov	r2, r6
   18254:	mov	r3, #0
   18258:	ldr	r1, [r1, r4, lsl #2]
   1825c:	add	r1, r1, #16
   18260:	ldr	ip, [r2, #4]!
   18264:	cmp	ip, #0
   18268:	beq	18278 <__gcov_sort_n_vals@@Base+0x1a0>
   1826c:	cmp	r3, #8
   18270:	beq	18294 <__gcov_sort_n_vals@@Base+0x1bc>
   18274:	add	r1, r1, #8
   18278:	add	r3, r3, #1
   1827c:	cmp	r3, #9
   18280:	bne	18260 <__gcov_sort_n_vals@@Base+0x188>
   18284:	add	r4, r4, #1
   18288:	cmp	lr, r4
   1828c:	bne	1824c <__gcov_sort_n_vals@@Base+0x174>
   18290:	pop	{r4, r5, r6, pc}
   18294:	ldr	r0, [r1], #4
   18298:	bl	181c8 <__gcov_sort_n_vals@@Base+0xf0>
   1829c:	ldr	lr, [r5, #52]	; 0x34
   182a0:	b	18284 <__gcov_sort_n_vals@@Base+0x1ac>
   182a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   182a8:	sub	sp, sp, #6080	; 0x17c0
   182ac:	ldr	ip, [pc, #396]	; 18440 <__gcov_sort_n_vals@@Base+0x368>
   182b0:	sub	sp, sp, #36	; 0x24
   182b4:	add	ip, pc, ip
   182b8:	add	r5, sp, #2016	; 0x7e0
   182bc:	mov	r4, r0
   182c0:	mov	r6, r1
   182c4:	mov	r1, #0
   182c8:	str	r1, [ip, #4]
   182cc:	str	r1, [ip]
   182d0:	mov	r8, r2
   182d4:	mov	r7, r3
   182d8:	str	r1, [r5, #-2000]	; 0xfffff830
   182dc:	str	r1, [r5, #-1996]	; 0xfffff834
   182e0:	bl	18224 <__gcov_sort_n_vals@@Base+0x14c>
   182e4:	mov	r1, r6
   182e8:	ldr	r0, [r4, #12]
   182ec:	bl	174f4 <build_ast@@Base+0xfe0>
   182f0:	cmn	r0, #1
   182f4:	beq	18370 <__gcov_sort_n_vals@@Base+0x298>
   182f8:	bl	177dc <build_ast@@Base+0x12c8>
   182fc:	cmp	r0, #0
   18300:	beq	1837c <__gcov_sort_n_vals@@Base+0x2a4>
   18304:	ldr	r2, [pc, #312]	; 18444 <__gcov_sort_n_vals@@Base+0x36c>
   18308:	ldr	r1, [r6]
   1830c:	cmp	r0, r2
   18310:	beq	183d4 <__gcov_sort_n_vals@@Base+0x2fc>
   18314:	ldr	r0, [pc, #300]	; 18448 <__gcov_sort_n_vals@@Base+0x370>
   18318:	add	r0, pc, r0
   1831c:	bl	16868 <build_ast@@Base+0x354>
   18320:	ldr	r5, [pc, #292]	; 1844c <__gcov_sort_n_vals@@Base+0x374>
   18324:	add	r5, pc, r5
   18328:	ldr	r1, [r5, #4]
   1832c:	cmp	r1, #0
   18330:	beq	18350 <__gcov_sort_n_vals@@Base+0x278>
   18334:	mov	r2, #9
   18338:	mov	r0, r4
   1833c:	bl	1689c <build_ast@@Base+0x388>
   18340:	cmp	r0, #0
   18344:	mov	r1, r0
   18348:	str	r0, [r5, #4]
   1834c:	bne	18334 <__gcov_sort_n_vals@@Base+0x25c>
   18350:	bl	1760c <build_ast@@Base+0x10f8>
   18354:	cmp	r0, #0
   18358:	beq	18370 <__gcov_sort_n_vals@@Base+0x298>
   1835c:	blt	18434 <__gcov_sort_n_vals@@Base+0x35c>
   18360:	ldr	r0, [pc, #232]	; 18450 <__gcov_sort_n_vals@@Base+0x378>
   18364:	add	r0, pc, r0
   18368:	ldr	r1, [r6]
   1836c:	bl	16868 <build_ast@@Base+0x354>
   18370:	add	sp, sp, #6080	; 0x17c0
   18374:	add	sp, sp, #36	; 0x24
   18378:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1837c:	bl	173ac <build_ast@@Base+0xe98>
   18380:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18384:	add	r9, sp, #24
   18388:	cmp	r1, #0
   1838c:	beq	1841c <__gcov_sort_n_vals@@Base+0x344>
   18390:	add	r3, sp, #6144	; 0x1800
   18394:	str	r7, [sp, #4]
   18398:	ldr	r3, [r3]
   1839c:	mov	r1, r8
   183a0:	str	r3, [sp]
   183a4:	add	r2, r4, #16
   183a8:	mov	r3, r9
   183ac:	ldr	r0, [r6]
   183b0:	bl	17258 <build_ast@@Base+0xd44>
   183b4:	cmn	r0, #1
   183b8:	beq	18320 <__gcov_sort_n_vals@@Base+0x248>
   183bc:	mov	r1, r9
   183c0:	ldr	r3, [r5, #-2000]	; 0xfffff830
   183c4:	ldr	r2, [r5, #-1996]	; 0xfffff834
   183c8:	mov	r0, r4
   183cc:	bl	17eac <build_ast@@Base+0x1998>
   183d0:	b	18320 <__gcov_sort_n_vals@@Base+0x248>
   183d4:	add	ip, sp, #20
   183d8:	add	r3, sp, #16
   183dc:	str	r7, [sp, #8]
   183e0:	stm	sp, {r3, ip}
   183e4:	add	r3, sp, #6144	; 0x1800
   183e8:	add	r9, sp, #24
   183ec:	ldr	r3, [r3]
   183f0:	mov	r0, r1
   183f4:	mov	r2, r9
   183f8:	add	r3, r3, #8
   183fc:	mov	r1, r4
   18400:	bl	17b40 <build_ast@@Base+0x162c>
   18404:	cmn	r0, #1
   18408:	beq	18320 <__gcov_sort_n_vals@@Base+0x248>
   1840c:	bl	173ac <build_ast@@Base+0xe98>
   18410:	ldr	r1, [r5, #-2000]	; 0xfffff830
   18414:	cmp	r1, #0
   18418:	bne	18390 <__gcov_sort_n_vals@@Base+0x2b8>
   1841c:	ldr	r2, [pc, #48]	; 18454 <__gcov_sort_n_vals@@Base+0x37c>
   18420:	mov	r0, r9
   18424:	bl	11954 <memset@plt>
   18428:	ldr	r3, [r5, #-1996]	; 0xfffff834
   1842c:	str	r3, [r5, #-2000]	; 0xfffff830
   18430:	b	18390 <__gcov_sort_n_vals@@Base+0x2b8>
   18434:	ldr	r0, [pc, #28]	; 18458 <__gcov_sort_n_vals@@Base+0x380>
   18438:	add	r0, pc, r0
   1843c:	b	18368 <__gcov_sort_n_vals@@Base+0x290>
   18440:	andeq	r3, r1, ip, ror r4
   18444:	strbvs	r6, [r3, -r1, ror #8]!
   18448:	andeq	r0, r0, r8, ror #31
   1844c:	andeq	r3, r1, ip, lsl #8
   18450:	andeq	r0, r0, r0, lsl #31
   18454:	andeq	r1, r0, r8, asr #15
   18458:	andeq	r0, r0, ip, lsl #29
   1845c:	push	{r4, r5, r6, r7, r8, lr}
   18460:	sub	sp, sp, #6080	; 0x17c0
   18464:	sub	sp, sp, #32
   18468:	add	r6, sp, #24
   1846c:	add	r2, sp, #12
   18470:	mov	r8, r1
   18474:	mov	r1, r6
   18478:	mov	r4, r0
   1847c:	bl	16ab4 <build_ast@@Base+0x5a0>
   18480:	add	r5, sp, #8
   18484:	mov	r7, r0
   18488:	mov	r0, r5
   1848c:	bl	16c48 <build_ast@@Base+0x734>
   18490:	cmp	r4, #0
   18494:	beq	184bc <__gcov_sort_n_vals@@Base+0x3e4>
   18498:	mov	r0, r4
   1849c:	str	r6, [sp]
   184a0:	mov	r3, r7
   184a4:	mov	r2, r8
   184a8:	mov	r1, r5
   184ac:	bl	182a4 <__gcov_sort_n_vals@@Base+0x1cc>
   184b0:	ldr	r4, [r4, #4]
   184b4:	cmp	r4, #0
   184b8:	bne	18498 <__gcov_sort_n_vals@@Base+0x3c0>
   184bc:	ldr	r0, [sp, #8]
   184c0:	bl	1187c <free@plt>
   184c4:	add	sp, sp, #6080	; 0x17c0
   184c8:	add	sp, sp, #32
   184cc:	pop	{r4, r5, r6, r7, r8, pc}
   184d0:	ldrb	r1, [r0, #4]
   184d4:	tst	r1, #1
   184d8:	bxne	lr
   184dc:	push	{r4, lr}
   184e0:	lsr	r1, r1, #1
   184e4:	mov	r4, r0
   184e8:	and	r1, r1, #1
   184ec:	ldr	r0, [r0]
   184f0:	bl	1845c <__gcov_sort_n_vals@@Base+0x384>
   184f4:	ldrb	r3, [r4, #4]
   184f8:	bic	r3, r3, #3
   184fc:	orr	r3, r3, #3
   18500:	strb	r3, [r4, #4]
   18504:	pop	{r4, pc}
   18508:	push	{r4, r5, r6, lr}
   1850c:	ldr	r4, [pc, #84]	; 18568 <__gcov_sort_n_vals@@Base+0x490>
   18510:	ldr	r5, [pc, #84]	; 1856c <__gcov_sort_n_vals@@Base+0x494>
   18514:	add	r4, pc, r4
   18518:	mov	r0, r4
   1851c:	bl	184d0 <__gcov_sort_n_vals@@Base+0x3f8>
   18520:	ldr	r3, [r4, #8]
   18524:	add	r5, pc, r5
   18528:	cmp	r3, #0
   1852c:	ldrne	r2, [r4, #12]
   18530:	strne	r2, [r3, #12]
   18534:	ldr	r2, [pc, #52]	; 18570 <__gcov_sort_n_vals@@Base+0x498>
   18538:	add	r2, pc, r2
   1853c:	ldr	r2, [r2, #12]
   18540:	cmp	r2, #0
   18544:	strne	r3, [r2, #8]
   18548:	beq	18554 <__gcov_sort_n_vals@@Base+0x47c>
   1854c:	pop	{r4, r5, r6, lr}
   18550:	b	16610 <build_ast@@Base+0xfc>
   18554:	ldr	r2, [pc, #24]	; 18574 <__gcov_sort_n_vals@@Base+0x49c>
   18558:	ldr	r2, [r5, r2]
   1855c:	pop	{r4, r5, r6, lr}
   18560:	str	r3, [r2, #4]
   18564:	b	16610 <build_ast@@Base+0xfc>
   18568:	andeq	r3, r1, r8, lsl #11
   1856c:	ldrdeq	r1, [r1], -r4
   18570:	andeq	r3, r1, r4, ror #10
   18574:	andeq	r0, r0, r8, lsr #1
   18578:	ldr	r1, [r0]
   1857c:	push	{r4, r5, r6, lr}
   18580:	cmp	r1, #0
   18584:	ldr	r5, [pc, #156]	; 18628 <__gcov_sort_n_vals@@Base+0x550>
   18588:	add	r5, pc, r5
   1858c:	popeq	{r4, r5, r6, pc}
   18590:	ldr	r3, [r0, #52]	; 0x34
   18594:	cmp	r3, #0
   18598:	popeq	{r4, r5, r6, pc}
   1859c:	mov	r4, r0
   185a0:	mov	r2, #0
   185a4:	add	r0, r0, #12
   185a8:	bl	171f8 <build_ast@@Base+0xce4>
   185ac:	cmp	r0, #0
   185b0:	popeq	{r4, r5, r6, pc}
   185b4:	ldr	r6, [pc, #112]	; 1862c <__gcov_sort_n_vals@@Base+0x554>
   185b8:	add	r6, pc, r6
   185bc:	ldr	r2, [r6]
   185c0:	cmp	r2, #0
   185c4:	beq	185dc <__gcov_sort_n_vals@@Base+0x504>
   185c8:	ldr	r3, [pc, #96]	; 18630 <__gcov_sort_n_vals@@Base+0x558>
   185cc:	str	r2, [r4, #4]
   185d0:	add	r3, pc, r3
   185d4:	str	r4, [r3]
   185d8:	pop	{r4, r5, r6, pc}
   185dc:	ldr	r3, [pc, #80]	; 18634 <__gcov_sort_n_vals@@Base+0x55c>
   185e0:	ldr	r2, [pc, #80]	; 18638 <__gcov_sort_n_vals@@Base+0x560>
   185e4:	mov	r0, #12
   185e8:	ldr	r5, [r5, r3]
   185ec:	add	r2, pc, r2
   185f0:	ldr	r1, [r5]
   185f4:	bl	171f8 <build_ast@@Base+0xce4>
   185f8:	cmp	r0, #0
   185fc:	ldreq	r2, [r6]
   18600:	beq	185c8 <__gcov_sort_n_vals@@Base+0x4f0>
   18604:	ldr	r3, [r5, #4]
   18608:	cmp	r3, #0
   1860c:	str	r3, [r6, #8]
   18610:	strne	r6, [r3, #12]
   18614:	ldr	r3, [pc, #32]	; 1863c <__gcov_sort_n_vals@@Base+0x564>
   18618:	add	r3, pc, r3
   1861c:	str	r3, [r5, #4]
   18620:	ldr	r2, [r3]
   18624:	b	185c8 <__gcov_sort_n_vals@@Base+0x4f0>
   18628:	andeq	r1, r1, r0, ror sl
   1862c:	andeq	r3, r1, r4, ror #9
   18630:	andeq	r3, r1, ip, asr #9
   18634:	andeq	r0, r0, r8, lsr #1
   18638:	andeq	r0, r0, r8, lsr sp
   1863c:	andeq	r3, r1, r4, lsl #9
   18640:	cmp	r3, #0
   18644:	cmpeq	r2, #0
   18648:	bne	1866c <__gcov_sort_n_vals@@Base+0x594>
   1864c:	cmp	r1, #0
   18650:	movlt	r1, #-2147483648	; 0x80000000
   18654:	movlt	r0, #0
   18658:	blt	18668 <__gcov_sort_n_vals@@Base+0x590>
   1865c:	cmpeq	r0, #0
   18660:	mvnne	r1, #-2147483648	; 0x80000000
   18664:	mvnne	r0, #0
   18668:	b	18714 <__gcov_sort_n_vals@@Base+0x63c>
   1866c:	sub	sp, sp, #8
   18670:	push	{sp, lr}
   18674:	cmp	r1, #0
   18678:	blt	18698 <__gcov_sort_n_vals@@Base+0x5c0>
   1867c:	cmp	r3, #0
   18680:	blt	186cc <__gcov_sort_n_vals@@Base+0x5f4>
   18684:	bl	18768 <__gcov_sort_n_vals@@Base+0x690>
   18688:	ldr	lr, [sp, #4]
   1868c:	add	sp, sp, #8
   18690:	pop	{r2, r3}
   18694:	bx	lr
   18698:	rsbs	r0, r0, #0
   1869c:	sbc	r1, r1, r1, lsl #1
   186a0:	cmp	r3, #0
   186a4:	blt	186f0 <__gcov_sort_n_vals@@Base+0x618>
   186a8:	bl	18768 <__gcov_sort_n_vals@@Base+0x690>
   186ac:	ldr	lr, [sp, #4]
   186b0:	add	sp, sp, #8
   186b4:	pop	{r2, r3}
   186b8:	rsbs	r0, r0, #0
   186bc:	sbc	r1, r1, r1, lsl #1
   186c0:	rsbs	r2, r2, #0
   186c4:	sbc	r3, r3, r3, lsl #1
   186c8:	bx	lr
   186cc:	rsbs	r2, r2, #0
   186d0:	sbc	r3, r3, r3, lsl #1
   186d4:	bl	18768 <__gcov_sort_n_vals@@Base+0x690>
   186d8:	ldr	lr, [sp, #4]
   186dc:	add	sp, sp, #8
   186e0:	pop	{r2, r3}
   186e4:	rsbs	r0, r0, #0
   186e8:	sbc	r1, r1, r1, lsl #1
   186ec:	bx	lr
   186f0:	rsbs	r2, r2, #0
   186f4:	sbc	r3, r3, r3, lsl #1
   186f8:	bl	18768 <__gcov_sort_n_vals@@Base+0x690>
   186fc:	ldr	lr, [sp, #4]
   18700:	add	sp, sp, #8
   18704:	pop	{r2, r3}
   18708:	rsbs	r2, r2, #0
   1870c:	sbc	r3, r3, r3, lsl #1
   18710:	bx	lr
   18714:	push	{r1, lr}
   18718:	mov	r0, #8
   1871c:	bl	1184c <raise@plt>
   18720:	pop	{r1, pc}
   18724:	ldr	r3, [pc, #48]	; 1875c <__gcov_sort_n_vals@@Base+0x684>
   18728:	ldr	r2, [pc, #48]	; 18760 <__gcov_sort_n_vals@@Base+0x688>
   1872c:	and	r3, r3, r0, lsr #1
   18730:	sub	r0, r0, r3
   18734:	and	r3, r0, r2
   18738:	and	r0, r2, r0, lsr #2
   1873c:	add	r3, r3, r0
   18740:	ldr	r0, [pc, #28]	; 18764 <__gcov_sort_n_vals@@Base+0x68c>
   18744:	add	r3, r3, r3, lsr #4
   18748:	and	r0, r0, r3
   1874c:	add	r0, r0, r0, lsl #8
   18750:	add	r0, r0, r0, lsl #16
   18754:	lsr	r0, r0, #24
   18758:	bx	lr
   1875c:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   18760:	teqcc	r3, #-872415232	; 0xcc000000
   18764:	svceq	0x000f0f0f
   18768:	cmp	r1, r3
   1876c:	cmpeq	r0, r2
   18770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18774:	mov	r4, r0
   18778:	movcc	r0, #0
   1877c:	mov	r5, r1
   18780:	ldr	lr, [sp, #36]	; 0x24
   18784:	movcc	r1, r0
   18788:	bcc	18884 <__gcov_sort_n_vals@@Base+0x7ac>
   1878c:	cmp	r3, #0
   18790:	clzeq	ip, r2
   18794:	clzne	ip, r3
   18798:	addeq	ip, ip, #32
   1879c:	cmp	r5, #0
   187a0:	clzeq	r1, r4
   187a4:	addeq	r1, r1, #32
   187a8:	clzne	r1, r5
   187ac:	sub	ip, ip, r1
   187b0:	sub	sl, ip, #32
   187b4:	lsl	r9, r3, ip
   187b8:	rsb	fp, ip, #32
   187bc:	orr	r9, r9, r2, lsl sl
   187c0:	orr	r9, r9, r2, lsr fp
   187c4:	lsl	r8, r2, ip
   187c8:	cmp	r5, r9
   187cc:	cmpeq	r4, r8
   187d0:	movcc	r0, #0
   187d4:	movcc	r1, r0
   187d8:	bcc	187f4 <__gcov_sort_n_vals@@Base+0x71c>
   187dc:	mov	r0, #1
   187e0:	subs	r4, r4, r8
   187e4:	lsl	r1, r0, sl
   187e8:	orr	r1, r1, r0, lsr fp
   187ec:	lsl	r0, r0, ip
   187f0:	sbc	r5, r5, r9
   187f4:	cmp	ip, #0
   187f8:	beq	18884 <__gcov_sort_n_vals@@Base+0x7ac>
   187fc:	lsr	r6, r8, #1
   18800:	orr	r6, r6, r9, lsl #31
   18804:	lsr	r7, r9, #1
   18808:	mov	r2, ip
   1880c:	b	18830 <__gcov_sort_n_vals@@Base+0x758>
   18810:	subs	r3, r4, r6
   18814:	sbc	r8, r5, r7
   18818:	adds	r3, r3, r3
   1881c:	adc	r8, r8, r8
   18820:	adds	r4, r3, #1
   18824:	adc	r5, r8, #0
   18828:	subs	r2, r2, #1
   1882c:	beq	1884c <__gcov_sort_n_vals@@Base+0x774>
   18830:	cmp	r5, r7
   18834:	cmpeq	r4, r6
   18838:	bcs	18810 <__gcov_sort_n_vals@@Base+0x738>
   1883c:	adds	r4, r4, r4
   18840:	adc	r5, r5, r5
   18844:	subs	r2, r2, #1
   18848:	bne	18830 <__gcov_sort_n_vals@@Base+0x758>
   1884c:	lsr	r3, r4, ip
   18850:	orr	r3, r3, r5, lsl fp
   18854:	lsr	r2, r5, ip
   18858:	orr	r3, r3, r5, lsr sl
   1885c:	adds	r0, r0, r4
   18860:	mov	r4, r3
   18864:	lsl	r3, r2, ip
   18868:	orr	r3, r3, r4, lsl sl
   1886c:	lsl	ip, r4, ip
   18870:	orr	r3, r3, r4, lsr fp
   18874:	adc	r1, r1, r5
   18878:	subs	r0, r0, ip
   1887c:	mov	r5, r2
   18880:	sbc	r1, r1, r3
   18884:	cmp	lr, #0
   18888:	strdne	r4, [lr]
   1888c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018890 <__libc_csu_init@@Base>:
   18890:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18894:	mov	r7, r0
   18898:	ldr	r6, [pc, #72]	; 188e8 <__libc_csu_init@@Base+0x58>
   1889c:	ldr	r5, [pc, #72]	; 188ec <__libc_csu_init@@Base+0x5c>
   188a0:	add	r6, pc, r6
   188a4:	add	r5, pc, r5
   188a8:	sub	r6, r6, r5
   188ac:	mov	r8, r1
   188b0:	mov	r9, r2
   188b4:	bl	11820 <fdopen@plt-0x20>
   188b8:	asrs	r6, r6, #2
   188bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   188c0:	mov	r4, #0
   188c4:	add	r4, r4, #1
   188c8:	ldr	r3, [r5], #4
   188cc:	mov	r2, r9
   188d0:	mov	r1, r8
   188d4:	mov	r0, r7
   188d8:	blx	r3
   188dc:	cmp	r6, r4
   188e0:	bne	188c4 <__libc_csu_init@@Base+0x34>
   188e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188e8:	andeq	r1, r1, ip, asr r6
   188ec:	andeq	r1, r1, r4, asr #12

000188f0 <__libc_csu_fini@@Base>:
   188f0:	bx	lr

Disassembly of section .fini:

000188f4 <.fini>:
   188f4:	push	{r3, lr}
   188f8:	pop	{r3, pc}
