
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	11194 <__assert_fail@plt+0x48>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <calloc@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <calloc@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	r7, r1, ip, asr #2

00010eb8 <calloc@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <fputs_unlocked@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <strcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <posix_fadvise64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <fflush@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <memmove@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <free@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <ferror@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <fwrite_unlocked@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <memcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <dcgettext@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <realloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <textdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <iswprint@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <fwrite@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <lseek64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <__ctype_get_mb_cur_max@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <fread@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <__fpending@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <mbrtowc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <error@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <malloc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <__libc_start_main@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <__freading@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <__gmon_start__@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <getopt_long@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <__ctype_b_loc@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <exit@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <strlen@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <ungetc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <__errno_location@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <__cxa_atexit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <memset@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <fgetc@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__printf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <fileno@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #28]!

0001108c <__fprintf_chk@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #20]!

00011098 <memchr@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fclose@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <fseeko64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <__uflow@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <__overflow@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <setlocale@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <strrchr@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <nl_langinfo@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <clearerr_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <fopen64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <qsort@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <bindtextdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <strncmp@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <abort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <strspn@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <__assert_fail@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

Disassembly of section .text:

00011158 <.text>:
   11158:	mov	fp, #0
   1115c:	mov	lr, #0
   11160:	pop	{r1}		; (ldr r1, [sp], #4)
   11164:	mov	r2, sp
   11168:	push	{r2}		; (str r2, [sp, #-4]!)
   1116c:	push	{r0}		; (str r0, [sp, #-4]!)
   11170:	ldr	ip, [pc, #16]	; 11188 <__assert_fail@plt+0x3c>
   11174:	push	{ip}		; (str ip, [sp, #-4]!)
   11178:	ldr	r0, [pc, #12]	; 1118c <__assert_fail@plt+0x40>
   1117c:	ldr	r3, [pc, #12]	; 11190 <__assert_fail@plt+0x44>
   11180:	bl	10fe4 <__libc_start_main@plt>
   11184:	bl	11134 <abort@plt>
   11188:	andeq	r6, r1, r4, asr #2
   1118c:	andeq	r1, r1, r8, lsl #11
   11190:	andeq	r6, r1, r4, ror #1
   11194:	ldr	r3, [pc, #20]	; 111b0 <__assert_fail@plt+0x64>
   11198:	ldr	r2, [pc, #20]	; 111b4 <__assert_fail@plt+0x68>
   1119c:	add	r3, pc, r3
   111a0:	ldr	r2, [r3, r2]
   111a4:	cmp	r2, #0
   111a8:	bxeq	lr
   111ac:	b	10ffc <__gmon_start__@plt>
   111b0:	andeq	r6, r1, ip, asr lr
   111b4:	andeq	r0, r0, ip, ror #1
   111b8:	ldr	r0, [pc, #24]	; 111d8 <__assert_fail@plt+0x8c>
   111bc:	ldr	r3, [pc, #24]	; 111dc <__assert_fail@plt+0x90>
   111c0:	cmp	r3, r0
   111c4:	bxeq	lr
   111c8:	ldr	r3, [pc, #16]	; 111e0 <__assert_fail@plt+0x94>
   111cc:	cmp	r3, #0
   111d0:	bxeq	lr
   111d4:	bx	r3
   111d8:	andeq	r8, r2, r0, asr #2
   111dc:	andeq	r8, r2, r0, asr #2
   111e0:	andeq	r0, r0, r0
   111e4:	ldr	r0, [pc, #36]	; 11210 <__assert_fail@plt+0xc4>
   111e8:	ldr	r1, [pc, #36]	; 11214 <__assert_fail@plt+0xc8>
   111ec:	sub	r1, r1, r0
   111f0:	asr	r1, r1, #2
   111f4:	add	r1, r1, r1, lsr #31
   111f8:	asrs	r1, r1, #1
   111fc:	bxeq	lr
   11200:	ldr	r3, [pc, #16]	; 11218 <__assert_fail@plt+0xcc>
   11204:	cmp	r3, #0
   11208:	bxeq	lr
   1120c:	bx	r3
   11210:	andeq	r8, r2, r0, asr #2
   11214:	andeq	r8, r2, r0, asr #2
   11218:	andeq	r0, r0, r0
   1121c:	push	{r4, lr}
   11220:	ldr	r4, [pc, #24]	; 11240 <__assert_fail@plt+0xf4>
   11224:	ldrb	r3, [r4]
   11228:	cmp	r3, #0
   1122c:	popne	{r4, pc}
   11230:	bl	111b8 <__assert_fail@plt+0x6c>
   11234:	mov	r3, #1
   11238:	strb	r3, [r4]
   1123c:	pop	{r4, pc}
   11240:	andeq	r8, r2, r4, ror #2
   11244:	b	111e4 <__assert_fail@plt+0x98>
   11248:	push	{fp, lr}
   1124c:	mov	fp, sp
   11250:	sub	sp, sp, #56	; 0x38
   11254:	mov	r4, r0
   11258:	cmp	r0, #0
   1125c:	bne	11544 <__assert_fail@plt+0x3f8>
   11260:	movw	r1, #24979	; 0x6193
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f54 <dcgettext@plt>
   11274:	mov	r1, r0
   11278:	movw	r0, #33172	; 0x8194
   1127c:	movt	r0, #2
   11280:	ldr	r2, [r0]
   11284:	mov	r0, #1
   11288:	bl	11074 <__printf_chk@plt>
   1128c:	movw	r1, #25010	; 0x61b2
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	movt	r1, #1
   1129c:	bl	10f54 <dcgettext@plt>
   112a0:	movw	r7, #33116	; 0x815c
   112a4:	movt	r7, #2
   112a8:	ldr	r1, [r7]
   112ac:	bl	10ec4 <fputs_unlocked@plt>
   112b0:	movw	r1, #26810	; 0x68ba
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10f54 <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10ec4 <fputs_unlocked@plt>
   112cc:	movw	r1, #26866	; 0x68f2
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10f54 <dcgettext@plt>
   112e0:	ldr	r1, [r7]
   112e4:	bl	10ec4 <fputs_unlocked@plt>
   112e8:	movw	r1, #25076	; 0x61f4
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10f54 <dcgettext@plt>
   112fc:	ldr	r1, [r7]
   11300:	bl	10ec4 <fputs_unlocked@plt>
   11304:	movw	r1, #25253	; 0x62a5
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	movt	r1, #1
   11314:	bl	10f54 <dcgettext@plt>
   11318:	ldr	r1, [r7]
   1131c:	bl	10ec4 <fputs_unlocked@plt>
   11320:	movw	r1, #25491	; 0x6393
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10f54 <dcgettext@plt>
   11334:	ldr	r1, [r7]
   11338:	bl	10ec4 <fputs_unlocked@plt>
   1133c:	movw	r1, #25605	; 0x6405
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10f54 <dcgettext@plt>
   11350:	ldr	r1, [r7]
   11354:	bl	10ec4 <fputs_unlocked@plt>
   11358:	movw	r1, #25815	; 0x64d7
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	movt	r1, #1
   11368:	bl	10f54 <dcgettext@plt>
   1136c:	ldr	r1, [r7]
   11370:	bl	10ec4 <fputs_unlocked@plt>
   11374:	movw	r1, #25878	; 0x6516
   11378:	mov	r0, #0
   1137c:	mov	r2, #5
   11380:	movt	r1, #1
   11384:	bl	10f54 <dcgettext@plt>
   11388:	ldr	r1, [r7]
   1138c:	bl	10ec4 <fputs_unlocked@plt>
   11390:	movw	r1, #25923	; 0x6543
   11394:	mov	r0, #0
   11398:	mov	r2, #5
   1139c:	movt	r1, #1
   113a0:	bl	10f54 <dcgettext@plt>
   113a4:	ldr	r1, [r7]
   113a8:	bl	10ec4 <fputs_unlocked@plt>
   113ac:	movw	r1, #25977	; 0x6579
   113b0:	mov	r0, #0
   113b4:	mov	r2, #5
   113b8:	movt	r1, #1
   113bc:	bl	10f54 <dcgettext@plt>
   113c0:	ldr	r1, [r7]
   113c4:	bl	10ec4 <fputs_unlocked@plt>
   113c8:	movw	r1, #26181	; 0x6645
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	movt	r1, #1
   113d8:	bl	10f54 <dcgettext@plt>
   113dc:	ldr	r1, [r7]
   113e0:	bl	10ec4 <fputs_unlocked@plt>
   113e4:	movw	r0, #27568	; 0x6bb0
   113e8:	mov	r2, #48	; 0x30
   113ec:	mov	r6, sp
   113f0:	movw	r5, #26443	; 0x674b
   113f4:	movt	r0, #1
   113f8:	movt	r5, #1
   113fc:	add	r1, r0, #32
   11400:	add	r3, r0, #16
   11404:	vld1.64	{d18-d19}, [r0], r2
   11408:	vld1.64	{d16-d17}, [r1]
   1140c:	vld1.64	{d20-d21}, [r3]
   11410:	add	r1, r6, #32
   11414:	vldr	d22, [r0]
   11418:	add	r0, r6, #16
   1141c:	vst1.64	{d16-d17}, [r1]
   11420:	movw	r1, #26941	; 0x693d
   11424:	vst1.64	{d20-d21}, [r0]
   11428:	mov	r0, r6
   1142c:	vst1.64	{d18-d19}, [r0], r2
   11430:	movt	r1, #1
   11434:	vstr	d22, [r0]
   11438:	mov	r0, r5
   1143c:	bl	10ed0 <strcmp@plt>
   11440:	cmp	r0, #0
   11444:	ldrne	r1, [r6, #8]!
   11448:	cmpne	r1, #0
   1144c:	bne	11438 <__assert_fail@plt+0x2ec>
   11450:	ldr	r6, [r6, #4]
   11454:	movw	r1, #27036	; 0x699c
   11458:	mov	r0, #0
   1145c:	mov	r2, #5
   11460:	movt	r1, #1
   11464:	bl	10f54 <dcgettext@plt>
   11468:	movw	r2, #26555	; 0x67bb
   1146c:	movw	r3, #27059	; 0x69b3
   11470:	mov	r1, r0
   11474:	mov	r0, #1
   11478:	movt	r2, #1
   1147c:	movt	r3, #1
   11480:	bl	11074 <__printf_chk@plt>
   11484:	cmp	r6, #0
   11488:	mov	r0, #5
   1148c:	mov	r1, #0
   11490:	moveq	r6, r5
   11494:	bl	110d4 <setlocale@plt>
   11498:	cmp	r0, #0
   1149c:	beq	114d4 <__assert_fail@plt+0x388>
   114a0:	movw	r1, #27099	; 0x69db
   114a4:	mov	r2, #3
   114a8:	movt	r1, #1
   114ac:	bl	11128 <strncmp@plt>
   114b0:	cmp	r0, #0
   114b4:	beq	114d4 <__assert_fail@plt+0x388>
   114b8:	movw	r1, #27103	; 0x69df
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	movt	r1, #1
   114c8:	bl	10f54 <dcgettext@plt>
   114cc:	ldr	r1, [r7]
   114d0:	bl	10ec4 <fputs_unlocked@plt>
   114d4:	movw	r1, #27174	; 0x6a26
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	movt	r1, #1
   114e4:	bl	10f54 <dcgettext@plt>
   114e8:	movw	r2, #27059	; 0x69b3
   114ec:	mov	r1, r0
   114f0:	mov	r0, #1
   114f4:	mov	r3, r5
   114f8:	movt	r2, #1
   114fc:	bl	11074 <__printf_chk@plt>
   11500:	movw	r1, #27201	; 0x6a41
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	movt	r1, #1
   11510:	bl	10f54 <dcgettext@plt>
   11514:	movw	r3, #27251	; 0x6a73
   11518:	mov	r1, r0
   1151c:	movw	r0, #26969	; 0x6959
   11520:	cmp	r6, r5
   11524:	mov	r2, r6
   11528:	movt	r0, #1
   1152c:	movt	r3, #1
   11530:	moveq	r3, r0
   11534:	mov	r0, #1
   11538:	bl	11074 <__printf_chk@plt>
   1153c:	mov	r0, r4
   11540:	bl	11020 <exit@plt>
   11544:	movw	r0, #33104	; 0x8150
   11548:	movw	r1, #24940	; 0x616c
   1154c:	mov	r2, #5
   11550:	movt	r0, #2
   11554:	movt	r1, #1
   11558:	ldr	r5, [r0]
   1155c:	mov	r0, #0
   11560:	bl	10f54 <dcgettext@plt>
   11564:	mov	r2, r0
   11568:	movw	r0, #33172	; 0x8194
   1156c:	mov	r1, #1
   11570:	movt	r0, #2
   11574:	ldr	r3, [r0]
   11578:	mov	r0, r5
   1157c:	bl	1108c <__fprintf_chk@plt>
   11580:	mov	r0, r4
   11584:	bl	11020 <exit@plt>
   11588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1158c:	add	fp, sp, #28
   11590:	sub	sp, sp, #20
   11594:	mov	r5, r0
   11598:	ldr	r0, [r1]
   1159c:	mov	r9, r1
   115a0:	bl	13230 <__assert_fail@plt+0x20e4>
   115a4:	movw	r1, #27251	; 0x6a73
   115a8:	mov	r0, #6
   115ac:	movt	r1, #1
   115b0:	bl	110d4 <setlocale@plt>
   115b4:	movw	r6, #26559	; 0x67bf
   115b8:	movw	r1, #26447	; 0x674f
   115bc:	movt	r6, #1
   115c0:	movt	r1, #1
   115c4:	mov	r0, r6
   115c8:	bl	1111c <bindtextdomain@plt>
   115cc:	mov	r0, r6
   115d0:	bl	10f6c <textdomain@plt>
   115d4:	movw	r0, #11100	; 0x2b5c
   115d8:	movt	r0, #1
   115dc:	bl	16148 <__assert_fail@plt+0x4ffc>
   115e0:	movw	r0, #33128	; 0x8168
   115e4:	mov	r8, #0
   115e8:	movw	r7, #26471	; 0x6767
   115ec:	movw	r3, #27392	; 0x6b00
   115f0:	mov	r4, #0
   115f4:	mov	sl, #0
   115f8:	mov	r6, #0
   115fc:	movt	r0, #2
   11600:	movt	r7, #1
   11604:	movt	r3, #1
   11608:	strb	r8, [r0]
   1160c:	movw	r0, #33129	; 0x8169
   11610:	movt	r0, #2
   11614:	strb	r8, [r0]
   11618:	movw	r0, #33130	; 0x816a
   1161c:	movt	r0, #2
   11620:	strb	r8, [r0]
   11624:	b	11634 <__assert_fail@plt+0x4e8>
   11628:	movw	r0, #33120	; 0x8160
   1162c:	movt	r0, #2
   11630:	ldr	r6, [r0]
   11634:	mov	r0, r5
   11638:	mov	r1, r9
   1163c:	mov	r2, r7
   11640:	str	r8, [sp]
   11644:	bl	11008 <getopt_long@plt>
   11648:	cmp	r0, #97	; 0x61
   1164c:	ble	117d0 <__assert_fail@plt+0x684>
   11650:	sub	r1, r0, #98	; 0x62
   11654:	cmp	r1, #24
   11658:	bhi	116e8 <__assert_fail@plt+0x59c>
   1165c:	movw	r7, #26471	; 0x6767
   11660:	movw	r3, #27392	; 0x6b00
   11664:	add	r0, pc, #8
   11668:	movt	r7, #1
   1166c:	movt	r3, #1
   11670:	ldr	pc, [r0, r1, lsl #2]
   11674:	ldrdeq	r1, [r1], -r8
   11678:	ldrdeq	r1, [r1], -r8
   1167c:	andeq	r1, r1, r0, asr r7
   11680:	ldrdeq	r1, [r1], -r8
   11684:	ldrdeq	r1, [r1], -ip
   11688:	ldrdeq	r1, [r1], -r8
   1168c:	ldrdeq	r1, [r1], -r8
   11690:	ldrdeq	r1, [r1], -r8
   11694:	ldrdeq	r1, [r1], -r8
   11698:	ldrdeq	r1, [r1], -r8
   1169c:	ldrdeq	r1, [r1], -r8
   116a0:	ldrdeq	r1, [r1], -r8
   116a4:	andeq	r1, r1, r4, lsr r6
   116a8:	ldrdeq	r1, [r1], -r8
   116ac:	ldrdeq	r1, [r1], -r8
   116b0:	ldrdeq	r1, [r1], -r8
   116b4:	ldrdeq	r1, [r1], -r8
   116b8:	andeq	r1, r1, r4, lsl #15
   116bc:	ldrdeq	r1, [r1], -r8
   116c0:	ldrdeq	r1, [r1], -r8
   116c4:	ldrdeq	r1, [r1], -r8
   116c8:	ldrdeq	r1, [r1], -r8
   116cc:	ldrdeq	r1, [r1], -r8
   116d0:	ldrdeq	r1, [r1], -r8
   116d4:	andeq	r1, r1, ip, lsr r7
   116d8:	mov	sl, #1
   116dc:	cmp	r6, #0
   116e0:	beq	11628 <__assert_fail@plt+0x4dc>
   116e4:	b	119b4 <__assert_fail@plt+0x868>
   116e8:	movw	r7, #26471	; 0x6767
   116ec:	movw	r3, #27392	; 0x6b00
   116f0:	cmp	r0, #256	; 0x100
   116f4:	movt	r7, #1
   116f8:	movt	r3, #1
   116fc:	bne	11790 <__assert_fail@plt+0x644>
   11700:	movw	r0, #33120	; 0x8160
   11704:	movt	r0, #2
   11708:	ldr	r2, [r0]
   1170c:	ldrb	r0, [r2]
   11710:	cmp	r0, #0
   11714:	beq	117b0 <__assert_fail@plt+0x664>
   11718:	mov	r0, r2
   1171c:	mov	r7, r2
   11720:	bl	1102c <strlen@plt>
   11724:	movw	r3, #27392	; 0x6b00
   11728:	mov	r2, r7
   1172c:	movw	r7, #26471	; 0x6767
   11730:	movt	r3, #1
   11734:	movt	r7, #1
   11738:	b	117b4 <__assert_fail@plt+0x668>
   1173c:	movw	r1, #33140	; 0x8174
   11740:	mov	r0, #1
   11744:	movt	r1, #2
   11748:	strb	r0, [r1]
   1174c:	b	11634 <__assert_fail@plt+0x4e8>
   11750:	movw	r0, #33120	; 0x8160
   11754:	movt	r0, #2
   11758:	ldr	r1, [r0]
   1175c:	ldrb	r0, [r1]
   11760:	cmp	r0, #0
   11764:	ldrbne	r1, [r1, #1]
   11768:	cmpne	r1, #0
   1176c:	bne	119c0 <__assert_fail@plt+0x874>
   11770:	movw	r1, #33129	; 0x8169
   11774:	mov	r4, #1
   11778:	movt	r1, #2
   1177c:	strb	r0, [r1]
   11780:	b	11634 <__assert_fail@plt+0x4e8>
   11784:	movw	r0, #33128	; 0x8168
   11788:	movt	r0, #2
   1178c:	b	117a4 <__assert_fail@plt+0x658>
   11790:	movw	r1, #257	; 0x101
   11794:	cmp	r0, r1
   11798:	bne	119d8 <__assert_fail@plt+0x88c>
   1179c:	movw	r0, #33141	; 0x8175
   117a0:	movt	r0, #2
   117a4:	mov	r1, #1
   117a8:	strb	r1, [r0]
   117ac:	b	11634 <__assert_fail@plt+0x4e8>
   117b0:	mov	r0, #1
   117b4:	movw	r1, #33136	; 0x8170
   117b8:	movt	r1, #2
   117bc:	str	r2, [r1]
   117c0:	movw	r1, #33132	; 0x816c
   117c4:	movt	r1, #2
   117c8:	str	r0, [r1]
   117cc:	b	11634 <__assert_fail@plt+0x4e8>
   117d0:	cmn	r0, #1
   117d4:	bne	11940 <__assert_fail@plt+0x7f4>
   117d8:	cmp	r6, #0
   117dc:	beq	119cc <__assert_fail@plt+0x880>
   117e0:	tst	sl, #1
   117e4:	beq	11804 <__assert_fail@plt+0x6b8>
   117e8:	tst	r4, #1
   117ec:	bne	119e0 <__assert_fail@plt+0x894>
   117f0:	movw	r0, #33128	; 0x8168
   117f4:	movt	r0, #2
   117f8:	ldrb	r0, [r0]
   117fc:	cmp	r0, #1
   11800:	beq	119ec <__assert_fail@plt+0x8a0>
   11804:	movw	r0, #33141	; 0x8175
   11808:	ands	r1, sl, #1
   1180c:	movt	r0, #2
   11810:	movwne	r1, #4
   11814:	ldrb	r0, [r0]
   11818:	bfi	r1, r0, #1, #1
   1181c:	mov	r0, r6
   11820:	bl	1234c <__assert_fail@plt+0x1200>
   11824:	tst	r4, #1
   11828:	movweq	r1, #33129	; 0x8169
   1182c:	moveq	r0, #9
   11830:	movteq	r1, #2
   11834:	strbeq	r0, [r1]
   11838:	movw	r1, #33136	; 0x8170
   1183c:	movt	r1, #2
   11840:	ldr	r0, [r1]
   11844:	cmp	r0, #0
   11848:	bne	11878 <__assert_fail@plt+0x72c>
   1184c:	movw	r0, #33480	; 0x82c8
   11850:	movw	r2, #33132	; 0x816c
   11854:	movt	r0, #2
   11858:	movt	r2, #2
   1185c:	str	r0, [r1]
   11860:	mov	r1, #1
   11864:	str	r1, [r2]
   11868:	movw	r1, #33129	; 0x8169
   1186c:	movt	r1, #2
   11870:	ldrb	r1, [r1]
   11874:	strb	r1, [r0]
   11878:	movw	r4, #33096	; 0x8148
   1187c:	movw	r0, #6680	; 0x1a18
   11880:	movw	r7, #7188	; 0x1c14
   11884:	tst	sl, #1
   11888:	movt	r4, #2
   1188c:	movt	r0, #1
   11890:	movt	r7, #1
   11894:	ldr	r1, [r4]
   11898:	movne	r7, r0
   1189c:	cmp	r1, r5
   118a0:	bne	118bc <__assert_fail@plt+0x770>
   118a4:	movw	r0, #27780	; 0x6c84
   118a8:	mov	r1, r7
   118ac:	movt	r0, #1
   118b0:	bl	12240 <__assert_fail@plt+0x10f4>
   118b4:	mov	r6, r0
   118b8:	b	118ec <__assert_fail@plt+0x7a0>
   118bc:	mov	r6, #1
   118c0:	bge	118ec <__assert_fail@plt+0x7a0>
   118c4:	mov	r6, #1
   118c8:	ldr	r0, [r9, r1, lsl #2]
   118cc:	mov	r1, r7
   118d0:	bl	12240 <__assert_fail@plt+0x10f4>
   118d4:	ldr	r1, [r4]
   118d8:	and	r6, r6, r0
   118dc:	add	r1, r1, #1
   118e0:	cmp	r1, r5
   118e4:	str	r1, [r4]
   118e8:	blt	118c8 <__assert_fail@plt+0x77c>
   118ec:	movw	r0, #33130	; 0x816a
   118f0:	movt	r0, #2
   118f4:	ldrb	r0, [r0]
   118f8:	cmp	r0, #1
   118fc:	bne	11934 <__assert_fail@plt+0x7e8>
   11900:	movw	r0, #33112	; 0x8158
   11904:	movt	r0, #2
   11908:	ldr	r0, [r0]
   1190c:	bl	12c84 <__assert_fail@plt+0x1b38>
   11910:	cmn	r0, #1
   11914:	bne	11934 <__assert_fail@plt+0x7e8>
   11918:	bl	11044 <__errno_location@plt>
   1191c:	ldr	r1, [r0]
   11920:	movw	r2, #27780	; 0x6c84
   11924:	mov	r0, #0
   11928:	mov	r6, #0
   1192c:	movt	r2, #1
   11930:	bl	10fcc <error@plt>
   11934:	eor	r0, r6, #1
   11938:	sub	sp, fp, #28
   1193c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11940:	cmn	r0, #3
   11944:	bne	119a4 <__assert_fail@plt+0x858>
   11948:	movw	r0, #33016	; 0x80f8
   1194c:	movw	r2, #26600	; 0x67e8
   11950:	movw	r7, #26584	; 0x67d8
   11954:	movw	r6, #26569	; 0x67c9
   11958:	mov	r1, #0
   1195c:	movt	r0, #2
   11960:	movt	r2, #1
   11964:	movt	r7, #1
   11968:	movt	r6, #1
   1196c:	ldr	r3, [r0]
   11970:	movw	r0, #33116	; 0x815c
   11974:	movt	r0, #2
   11978:	ldr	r0, [r0]
   1197c:	stm	sp, {r6, r7}
   11980:	str	r2, [sp, #8]
   11984:	movw	r2, #26555	; 0x67bb
   11988:	str	r1, [sp, #12]
   1198c:	movw	r1, #26443	; 0x674b
   11990:	movt	r1, #1
   11994:	movt	r2, #1
   11998:	bl	15420 <__assert_fail@plt+0x42d4>
   1199c:	mov	r0, #0
   119a0:	bl	11020 <exit@plt>
   119a4:	cmn	r0, #2
   119a8:	bne	119d8 <__assert_fail@plt+0x88c>
   119ac:	mov	r0, #0
   119b0:	bl	11248 <__assert_fail@plt+0xfc>
   119b4:	movw	r1, #26483	; 0x6773
   119b8:	movt	r1, #1
   119bc:	b	119f4 <__assert_fail@plt+0x8a8>
   119c0:	movw	r1, #26514	; 0x6792
   119c4:	movt	r1, #1
   119c8:	b	119f4 <__assert_fail@plt+0x8a8>
   119cc:	movw	r1, #26613	; 0x67f5
   119d0:	movt	r1, #1
   119d4:	b	119f4 <__assert_fail@plt+0x8a8>
   119d8:	mov	r0, #1
   119dc:	bl	11248 <__assert_fail@plt+0xfc>
   119e0:	movw	r1, #26669	; 0x682d
   119e4:	movt	r1, #1
   119e8:	b	119f4 <__assert_fail@plt+0x8a8>
   119ec:	movw	r1, #26735	; 0x686f
   119f0:	movt	r1, #1
   119f4:	mov	r0, #0
   119f8:	mov	r2, #5
   119fc:	bl	10f54 <dcgettext@plt>
   11a00:	mov	r2, r0
   11a04:	mov	r0, #0
   11a08:	mov	r1, #0
   11a0c:	bl	10fcc <error@plt>
   11a10:	mov	r0, #1
   11a14:	bl	11248 <__assert_fail@plt+0xfc>
   11a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a1c:	add	fp, sp, #28
   11a20:	sub	sp, sp, #4
   11a24:	mov	r4, r0
   11a28:	movw	r0, #33484	; 0x82cc
   11a2c:	movw	r7, #33144	; 0x8178
   11a30:	movw	r6, #33140	; 0x8174
   11a34:	movw	lr, #33116	; 0x815c
   11a38:	mov	sl, #0
   11a3c:	movt	r0, #2
   11a40:	movt	r7, #2
   11a44:	movt	r6, #2
   11a48:	movt	lr, #2
   11a4c:	ldr	r0, [r0]
   11a50:	str	r0, [r7]
   11a54:	b	11a6c <__assert_fail@plt+0x920>
   11a58:	movw	r0, #33484	; 0x82cc
   11a5c:	mov	sl, #0
   11a60:	movt	r0, #2
   11a64:	ldr	r0, [r0]
   11a68:	str	r0, [r7]
   11a6c:	mov	r8, #0
   11a70:	mov	r9, #0
   11a74:	b	11a88 <__assert_fail@plt+0x93c>
   11a78:	add	r2, r1, #1
   11a7c:	mov	r9, ip
   11a80:	str	r2, [r0, #20]
   11a84:	strb	r5, [r1]
   11a88:	ldmib	r4, {r0, r1}
   11a8c:	cmp	r0, r1
   11a90:	bcs	11b88 <__assert_fail@plt+0xa3c>
   11a94:	add	r1, r0, #1
   11a98:	str	r1, [r4, #4]
   11a9c:	ldrb	r5, [r0]
   11aa0:	ldrb	r0, [r6]
   11aa4:	mov	r1, #10
   11aa8:	cmp	r0, #0
   11aac:	movwne	r1, #0
   11ab0:	cmp	r5, r1
   11ab4:	beq	11ba0 <__assert_fail@plt+0xa54>
   11ab8:	cmn	r5, #1
   11abc:	beq	11bd8 <__assert_fail@plt+0xa8c>
   11ac0:	ldr	r0, [r7]
   11ac4:	adds	sl, sl, #1
   11ac8:	adc	r8, r8, #0
   11acc:	ldrd	r2, [r0, #8]
   11ad0:	subs	r1, r2, sl
   11ad4:	sbcs	r1, r3, r8
   11ad8:	addcc	r0, r0, #16
   11adc:	strcc	r0, [r7]
   11ae0:	ldr	r2, [r0]
   11ae4:	ldr	r1, [r0, #4]
   11ae8:	subs	r0, sl, r2
   11aec:	sbcs	r0, r8, r1
   11af0:	bcc	11a88 <__assert_fail@plt+0x93c>
   11af4:	movw	r0, #33136	; 0x8170
   11af8:	movw	r3, #33480	; 0x82c8
   11afc:	movt	r0, #2
   11b00:	movt	r3, #2
   11b04:	ldr	r0, [r0]
   11b08:	subs	r3, r0, r3
   11b0c:	movwne	r3, #1
   11b10:	orr	ip, r9, r3
   11b14:	beq	11b5c <__assert_fail@plt+0xa10>
   11b18:	eor	r3, r9, #1
   11b1c:	tst	r3, #1
   11b20:	bne	11b5c <__assert_fail@plt+0xa10>
   11b24:	eor	r2, r2, sl
   11b28:	eor	r1, r1, r8
   11b2c:	mov	ip, #1
   11b30:	orrs	r1, r2, r1
   11b34:	bne	11b5c <__assert_fail@plt+0xa10>
   11b38:	movw	r1, #33132	; 0x816c
   11b3c:	ldr	r3, [lr]
   11b40:	mov	r9, lr
   11b44:	movt	r1, #2
   11b48:	ldr	r2, [r1]
   11b4c:	mov	r1, #1
   11b50:	bl	10f3c <fwrite_unlocked@plt>
   11b54:	mov	ip, #1
   11b58:	mov	lr, r9
   11b5c:	ldr	r0, [lr]
   11b60:	ldr	r1, [r0, #20]
   11b64:	ldr	r2, [r0, #24]
   11b68:	cmp	r1, r2
   11b6c:	bcc	11a78 <__assert_fail@plt+0x92c>
   11b70:	uxtb	r1, r5
   11b74:	mov	r5, lr
   11b78:	mov	r9, ip
   11b7c:	bl	110c8 <__overflow@plt>
   11b80:	mov	lr, r5
   11b84:	b	11a88 <__assert_fail@plt+0x93c>
   11b88:	mov	r0, r4
   11b8c:	mov	r5, lr
   11b90:	bl	110bc <__uflow@plt>
   11b94:	mov	lr, r5
   11b98:	mov	r5, r0
   11b9c:	b	11aa0 <__assert_fail@plt+0x954>
   11ba0:	ldr	r0, [lr]
   11ba4:	ldr	r1, [r0, #20]
   11ba8:	ldr	r2, [r0, #24]
   11bac:	cmp	r1, r2
   11bb0:	bcs	11bc4 <__assert_fail@plt+0xa78>
   11bb4:	add	r2, r1, #1
   11bb8:	str	r2, [r0, #20]
   11bbc:	strb	r5, [r1]
   11bc0:	b	11a58 <__assert_fail@plt+0x90c>
   11bc4:	uxtb	r1, r5
   11bc8:	mov	r5, lr
   11bcc:	bl	110c8 <__overflow@plt>
   11bd0:	mov	lr, r5
   11bd4:	b	11a58 <__assert_fail@plt+0x90c>
   11bd8:	orrs	r0, sl, r8
   11bdc:	beq	11c00 <__assert_fail@plt+0xab4>
   11be0:	ldr	r0, [lr]
   11be4:	ldr	r2, [r0, #20]
   11be8:	ldr	r3, [r0, #24]
   11bec:	cmp	r2, r3
   11bf0:	bcs	11c08 <__assert_fail@plt+0xabc>
   11bf4:	add	r3, r2, #1
   11bf8:	str	r3, [r0, #20]
   11bfc:	strb	r1, [r2]
   11c00:	sub	sp, fp, #28
   11c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c08:	sub	sp, fp, #28
   11c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c10:	b	110c8 <__overflow@plt>
   11c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c18:	add	fp, sp, #28
   11c1c:	sub	sp, sp, #20
   11c20:	mov	r4, r0
   11c24:	movw	r0, #33484	; 0x82cc
   11c28:	movw	r5, #33144	; 0x8178
   11c2c:	movt	r0, #2
   11c30:	movt	r5, #2
   11c34:	ldr	r0, [r0]
   11c38:	str	r0, [r5]
   11c3c:	ldmib	r4, {r0, r1}
   11c40:	cmp	r0, r1
   11c44:	bcs	12208 <__assert_fail@plt+0x10bc>
   11c48:	add	r1, r0, #1
   11c4c:	str	r1, [r4, #4]
   11c50:	ldrb	r0, [r0]
   11c54:	mov	r1, r4
   11c58:	bl	11038 <ungetc@plt>
   11c5c:	ldr	r0, [r5]
   11c60:	movw	sl, #33129	; 0x8169
   11c64:	movw	r9, #33140	; 0x8174
   11c68:	mov	ip, #0
   11c6c:	mov	lr, #1
   11c70:	mov	r8, #0
   11c74:	mov	r6, #0
   11c78:	movt	sl, #2
   11c7c:	movt	r9, #2
   11c80:	ldrd	r0, [r0]
   11c84:	rsbs	r0, r0, #1
   11c88:	rscs	r0, r1, #0
   11c8c:	movw	r1, #33128	; 0x8168
   11c90:	movt	r1, #2
   11c94:	mov	r0, #0
   11c98:	ldrb	r1, [r1]
   11c9c:	movwcc	r0, #1
   11ca0:	eor	r0, r1, r0
   11ca4:	eor	r0, r0, #1
   11ca8:	str	r0, [sp, #16]
   11cac:	b	11cc0 <__assert_fail@plt+0xb74>
   11cb0:	movw	r1, #33144	; 0x8178
   11cb4:	add	r0, r0, #16
   11cb8:	movt	r1, #2
   11cbc:	str	r0, [r1]
   11cc0:	ldr	r1, [sp, #16]
   11cc4:	eor	r0, lr, #1
   11cc8:	orrs	r0, r0, ip
   11ccc:	movwne	r0, #1
   11cd0:	orr	r0, r0, r1
   11cd4:	tst	r0, #1
   11cd8:	beq	11ce8 <__assert_fail@plt+0xb9c>
   11cdc:	movw	r5, #33144	; 0x8178
   11ce0:	movt	r5, #2
   11ce4:	b	11eb8 <__assert_fail@plt+0xd6c>
   11ce8:	ldrb	r0, [r9]
   11cec:	ldrb	r1, [sl]
   11cf0:	mov	r2, #0
   11cf4:	mvn	r3, #0
   11cf8:	cmp	r0, #0
   11cfc:	mov	r0, #10
   11d00:	str	r1, [sp]
   11d04:	movw	r1, #33152	; 0x8180
   11d08:	movwne	r0, #0
   11d0c:	movt	r1, #2
   11d10:	stmib	sp, {r0, r4}
   11d14:	movw	r0, #33148	; 0x817c
   11d18:	movt	r0, #2
   11d1c:	bl	12e48 <__assert_fail@plt+0x1cfc>
   11d20:	movw	r5, #33144	; 0x8178
   11d24:	movw	r7, #33128	; 0x8168
   11d28:	mov	r2, r0
   11d2c:	cmp	r0, #0
   11d30:	movt	r5, #2
   11d34:	movt	r7, #2
   11d38:	blt	121d8 <__assert_fail@plt+0x108c>
   11d3c:	cmp	r2, #0
   11d40:	beq	1221c <__assert_fail@plt+0x10d0>
   11d44:	movw	r0, #33148	; 0x817c
   11d48:	sub	r6, r2, #1
   11d4c:	ldrb	r3, [sl]
   11d50:	movt	r0, #2
   11d54:	ldr	r0, [r0]
   11d58:	ldrb	r1, [r0, r6]
   11d5c:	cmp	r1, r3
   11d60:	beq	11e24 <__assert_fail@plt+0xcd8>
   11d64:	ldrb	r1, [r7]
   11d68:	cmp	r1, #0
   11d6c:	bne	11dd4 <__assert_fail@plt+0xc88>
   11d70:	movw	r1, #33116	; 0x815c
   11d74:	movt	r1, #2
   11d78:	ldr	r3, [r1]
   11d7c:	mov	r1, #1
   11d80:	bl	10f3c <fwrite_unlocked@plt>
   11d84:	ldrb	r0, [r9]
   11d88:	mov	r1, #10
   11d8c:	cmp	r0, #0
   11d90:	movw	r0, #33148	; 0x817c
   11d94:	movt	r0, #2
   11d98:	movwne	r1, #0
   11d9c:	ldr	r0, [r0]
   11da0:	ldrb	r0, [r0, r6]
   11da4:	cmp	r1, r0
   11da8:	beq	11dd4 <__assert_fail@plt+0xc88>
   11dac:	movw	r0, #33116	; 0x815c
   11db0:	movt	r0, #2
   11db4:	ldr	r0, [r0]
   11db8:	ldr	r2, [r0, #20]
   11dbc:	ldr	r3, [r0, #24]
   11dc0:	cmp	r2, r3
   11dc4:	bcs	11e1c <__assert_fail@plt+0xcd0>
   11dc8:	add	r3, r2, #1
   11dcc:	str	r3, [r0, #20]
   11dd0:	strb	r1, [r2]
   11dd4:	ldrb	r0, [r9]
   11dd8:	ldrb	r1, [sl]
   11ddc:	mov	r2, #0
   11de0:	mvn	r3, #0
   11de4:	cmp	r0, #0
   11de8:	mov	r0, #10
   11dec:	str	r1, [sp]
   11df0:	movw	r1, #33152	; 0x8180
   11df4:	movwne	r0, #0
   11df8:	movt	r1, #2
   11dfc:	stmib	sp, {r0, r4}
   11e00:	movw	r0, #33148	; 0x817c
   11e04:	movt	r0, #2
   11e08:	bl	12e48 <__assert_fail@plt+0x1cfc>
   11e0c:	mov	r2, r0
   11e10:	cmp	r0, #0
   11e14:	bge	11d3c <__assert_fail@plt+0xbf0>
   11e18:	b	121d8 <__assert_fail@plt+0x108c>
   11e1c:	bl	110c8 <__overflow@plt>
   11e20:	b	11dd4 <__assert_fail@plt+0xc88>
   11e24:	ldr	r1, [r5]
   11e28:	ldrd	r2, [r1]
   11e2c:	rsbs	r1, r2, #1
   11e30:	rscs	r1, r3, #0
   11e34:	bcc	11e90 <__assert_fail@plt+0xd44>
   11e38:	movw	r1, #33116	; 0x815c
   11e3c:	mov	r2, r6
   11e40:	movt	r1, #2
   11e44:	ldr	r3, [r1]
   11e48:	mov	r1, #1
   11e4c:	bl	10f3c <fwrite_unlocked@plt>
   11e50:	ldrb	r0, [r9]
   11e54:	ldrb	r1, [sl]
   11e58:	cmp	r0, #0
   11e5c:	mov	r0, #10
   11e60:	movwne	r0, #0
   11e64:	cmp	r0, r1
   11e68:	bne	11e8c <__assert_fail@plt+0xd40>
   11e6c:	ldmib	r4, {r0, r1}
   11e70:	cmp	r0, r1
   11e74:	bcs	121c4 <__assert_fail@plt+0x1078>
   11e78:	add	r1, r0, #1
   11e7c:	str	r1, [r4, #4]
   11e80:	ldrb	r0, [r0]
   11e84:	mov	r1, r4
   11e88:	bl	11038 <ungetc@plt>
   11e8c:	mov	r8, #1
   11e90:	ldr	r0, [r5]
   11e94:	mov	ip, #0
   11e98:	mov	lr, #2
   11e9c:	mov	r6, #0
   11ea0:	ldrd	r2, [r0, #8]
   11ea4:	rsbs	r1, r2, #1
   11ea8:	rscs	r1, r3, #0
   11eac:	addcs	r0, r0, #16
   11eb0:	movcs	ip, #0
   11eb4:	strcs	r0, [r5]
   11eb8:	ldr	r0, [r5]
   11ebc:	ldrd	r0, [r0]
   11ec0:	subs	r0, lr, r0
   11ec4:	sbcs	r0, ip, r1
   11ec8:	bcc	11ff0 <__assert_fail@plt+0xea4>
   11ecc:	tst	r8, #1
   11ed0:	beq	11f24 <__assert_fail@plt+0xdd8>
   11ed4:	movw	r0, #33116	; 0x815c
   11ed8:	mov	r1, #1
   11edc:	mov	r5, ip
   11ee0:	mov	r7, lr
   11ee4:	movt	r0, #2
   11ee8:	ldr	r3, [r0]
   11eec:	movw	r0, #33132	; 0x816c
   11ef0:	movt	r0, #2
   11ef4:	ldr	r2, [r0]
   11ef8:	movw	r0, #33136	; 0x8170
   11efc:	movt	r0, #2
   11f00:	ldr	r0, [r0]
   11f04:	bl	10f3c <fwrite_unlocked@plt>
   11f08:	mov	lr, r7
   11f0c:	mov	ip, r5
   11f10:	b	11f24 <__assert_fail@plt+0xdd8>
   11f14:	add	r2, r1, #1
   11f18:	mov	r6, r7
   11f1c:	str	r2, [r0, #20]
   11f20:	strb	r7, [r1]
   11f24:	ldmib	r4, {r0, r1}
   11f28:	cmp	r0, r1
   11f2c:	bcs	11fa4 <__assert_fail@plt+0xe58>
   11f30:	add	r1, r0, #1
   11f34:	str	r1, [r4, #4]
   11f38:	ldrb	r7, [r0]
   11f3c:	ldrb	r0, [sl]
   11f40:	mov	r8, #1
   11f44:	cmp	r7, r0
   11f48:	beq	11fc4 <__assert_fail@plt+0xe78>
   11f4c:	ldrb	r1, [r9]
   11f50:	cmp	r1, #0
   11f54:	mov	r1, #10
   11f58:	movwne	r1, #0
   11f5c:	cmn	r7, #1
   11f60:	cmpne	r7, r1
   11f64:	beq	11fc4 <__assert_fail@plt+0xe78>
   11f68:	movw	r0, #33116	; 0x815c
   11f6c:	movt	r0, #2
   11f70:	ldr	r0, [r0]
   11f74:	ldr	r1, [r0, #20]
   11f78:	ldr	r2, [r0, #24]
   11f7c:	cmp	r1, r2
   11f80:	bcc	11f14 <__assert_fail@plt+0xdc8>
   11f84:	uxtb	r1, r7
   11f88:	mov	r5, ip
   11f8c:	mov	r6, lr
   11f90:	bl	110c8 <__overflow@plt>
   11f94:	mov	lr, r6
   11f98:	mov	ip, r5
   11f9c:	mov	r6, r7
   11fa0:	b	11f24 <__assert_fail@plt+0xdd8>
   11fa4:	mov	r0, r4
   11fa8:	mov	r5, ip
   11fac:	mov	r7, lr
   11fb0:	bl	110bc <__uflow@plt>
   11fb4:	mov	lr, r7
   11fb8:	mov	ip, r5
   11fbc:	mov	r7, r0
   11fc0:	b	11f3c <__assert_fail@plt+0xdf0>
   11fc4:	mov	r5, r6
   11fc8:	mov	r6, r7
   11fcc:	b	12034 <__assert_fail@plt+0xee8>
   11fd0:	mov	r0, r4
   11fd4:	mov	r6, ip
   11fd8:	mov	r7, lr
   11fdc:	bl	110bc <__uflow@plt>
   11fe0:	mov	ip, r6
   11fe4:	mov	lr, r7
   11fe8:	mov	r6, r0
   11fec:	b	1200c <__assert_fail@plt+0xec0>
   11ff0:	ldmib	r4, {r0, r1}
   11ff4:	mov	r5, r6
   11ff8:	cmp	r0, r1
   11ffc:	bcs	11fd0 <__assert_fail@plt+0xe84>
   12000:	add	r1, r0, #1
   12004:	str	r1, [r4, #4]
   12008:	ldrb	r6, [r0]
   1200c:	ldrb	r0, [sl]
   12010:	cmp	r6, r0
   12014:	beq	12034 <__assert_fail@plt+0xee8>
   12018:	ldrb	r1, [r9]
   1201c:	cmp	r1, #0
   12020:	mov	r1, #10
   12024:	movwne	r1, #0
   12028:	cmn	r6, #1
   1202c:	cmpne	r6, r1
   12030:	bne	11ff0 <__assert_fail@plt+0xea4>
   12034:	ldrb	r1, [r9]
   12038:	cmp	r1, #0
   1203c:	mov	r1, #10
   12040:	movwne	r1, #0
   12044:	cmp	r6, r0
   12048:	cmpeq	r1, r0
   1204c:	bne	12080 <__assert_fail@plt+0xf34>
   12050:	str	lr, [sp, #12]
   12054:	mov	r7, ip
   12058:	ldmib	r4, {r0, r1}
   1205c:	cmp	r0, r1
   12060:	bcs	12180 <__assert_fail@plt+0x1034>
   12064:	add	r1, r0, #1
   12068:	str	r1, [r4, #4]
   1206c:	ldrb	r0, [r0]
   12070:	mov	r1, r4
   12074:	bl	11038 <ungetc@plt>
   12078:	ldr	lr, [sp, #12]
   1207c:	mov	ip, r7
   12080:	ldrb	r0, [sl]
   12084:	cmp	r6, r0
   12088:	bne	120b4 <__assert_fail@plt+0xf68>
   1208c:	movw	r0, #33144	; 0x8178
   12090:	adds	lr, lr, #1
   12094:	movt	r0, #2
   12098:	adc	ip, ip, #0
   1209c:	ldr	r0, [r0]
   120a0:	ldrd	r2, [r0, #8]
   120a4:	subs	r1, r2, lr
   120a8:	sbcs	r1, r3, ip
   120ac:	bcs	11cc0 <__assert_fail@plt+0xb74>
   120b0:	b	11cb0 <__assert_fail@plt+0xb64>
   120b4:	ldrb	r1, [r9]
   120b8:	add	r3, r6, #1
   120bc:	clz	r3, r3
   120c0:	lsr	r7, r3, #5
   120c4:	cmp	r1, #0
   120c8:	mov	r1, #10
   120cc:	movwne	r1, #0
   120d0:	cmn	r6, #1
   120d4:	sub	r2, r6, r1
   120d8:	cmpne	r6, r1
   120dc:	clz	r2, r2
   120e0:	lsr	r2, r2, #5
   120e4:	bne	11cc0 <__assert_fail@plt+0xb74>
   120e8:	tst	r8, #1
   120ec:	eoreq	r3, lr, #1
   120f0:	orrseq	r3, r3, ip
   120f4:	beq	1213c <__assert_fail@plt+0xff0>
   120f8:	subs	r3, r5, r1
   120fc:	movwne	r3, #1
   12100:	cmp	r1, r0
   12104:	beq	12110 <__assert_fail@plt+0xfc4>
   12108:	orrs	r0, r3, r2
   1210c:	beq	12150 <__assert_fail@plt+0x1004>
   12110:	movw	r0, #33116	; 0x815c
   12114:	movt	r0, #2
   12118:	ldr	r0, [r0]
   1211c:	ldr	r2, [r0, #20]
   12120:	ldr	r3, [r0, #24]
   12124:	cmp	r2, r3
   12128:	bcs	121bc <__assert_fail@plt+0x1070>
   1212c:	add	r3, r2, #1
   12130:	str	r3, [r0, #20]
   12134:	strb	r1, [r2]
   12138:	b	12150 <__assert_fail@plt+0x1004>
   1213c:	movw	r3, #33128	; 0x8168
   12140:	movt	r3, #2
   12144:	ldrb	r3, [r3]
   12148:	cmp	r3, #0
   1214c:	beq	120f8 <__assert_fail@plt+0xfac>
   12150:	movw	r1, #33144	; 0x8178
   12154:	cmp	r7, #0
   12158:	movt	r1, #2
   1215c:	bne	12200 <__assert_fail@plt+0x10b4>
   12160:	movw	r0, #33484	; 0x82cc
   12164:	mov	ip, #0
   12168:	mov	lr, #1
   1216c:	mov	r8, #0
   12170:	movt	r0, #2
   12174:	ldr	r0, [r0]
   12178:	str	r0, [r1]
   1217c:	b	11cc0 <__assert_fail@plt+0xb74>
   12180:	mov	r0, r4
   12184:	bl	110bc <__uflow@plt>
   12188:	cmn	r0, #1
   1218c:	bne	12070 <__assert_fail@plt+0xf24>
   12190:	ldrb	r0, [r9]
   12194:	ldr	lr, [sp, #12]
   12198:	mov	r1, #10
   1219c:	mov	ip, r7
   121a0:	mvn	r6, #0
   121a4:	mov	r2, #0
   121a8:	mov	r7, #1
   121ac:	cmp	r0, #0
   121b0:	ldrb	r0, [sl]
   121b4:	movwne	r1, #0
   121b8:	b	120e8 <__assert_fail@plt+0xf9c>
   121bc:	bl	110c8 <__overflow@plt>
   121c0:	b	12150 <__assert_fail@plt+0x1004>
   121c4:	mov	r0, r4
   121c8:	bl	110bc <__uflow@plt>
   121cc:	cmn	r0, #1
   121d0:	bne	11e84 <__assert_fail@plt+0xd38>
   121d4:	b	11e90 <__assert_fail@plt+0xd44>
   121d8:	movw	r0, #33148	; 0x817c
   121dc:	movt	r0, #2
   121e0:	mov	r5, r0
   121e4:	ldr	r0, [r0]
   121e8:	bl	12d7c <__assert_fail@plt+0x1c30>
   121ec:	mov	r0, #0
   121f0:	str	r0, [r5]
   121f4:	ldrb	r0, [r4]
   121f8:	tst	r0, #48	; 0x30
   121fc:	beq	1223c <__assert_fail@plt+0x10f0>
   12200:	sub	sp, fp, #28
   12204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12208:	mov	r0, r4
   1220c:	bl	110bc <__uflow@plt>
   12210:	cmn	r0, #1
   12214:	bne	11c54 <__assert_fail@plt+0xb08>
   12218:	b	12200 <__assert_fail@plt+0x10b4>
   1221c:	movw	r0, #27341	; 0x6acd
   12220:	movw	r1, #27354	; 0x6ada
   12224:	movw	r3, #27364	; 0x6ae4
   12228:	movw	r2, #315	; 0x13b
   1222c:	movt	r0, #1
   12230:	movt	r1, #1
   12234:	movt	r3, #1
   12238:	bl	1114c <__assert_fail@plt>
   1223c:	bl	15bb4 <__assert_fail@plt+0x4a68>
   12240:	push	{r4, r5, r6, r7, fp, lr}
   12244:	add	fp, sp, #16
   12248:	mov	r5, r1
   1224c:	movw	r1, #27780	; 0x6c84
   12250:	mov	r4, r0
   12254:	movt	r1, #1
   12258:	bl	10ed0 <strcmp@plt>
   1225c:	cmp	r0, #0
   12260:	beq	1228c <__assert_fail@plt+0x1140>
   12264:	movw	r1, #26553	; 0x67b9
   12268:	mov	r0, r4
   1226c:	movt	r1, #1
   12270:	bl	11104 <fopen64@plt>
   12274:	mov	r6, r0
   12278:	cmp	r0, #0
   1227c:	bne	122a8 <__assert_fail@plt+0x115c>
   12280:	bl	11044 <__errno_location@plt>
   12284:	ldr	r5, [r0]
   12288:	b	12318 <__assert_fail@plt+0x11cc>
   1228c:	movw	r0, #33130	; 0x816a
   12290:	mov	r1, #1
   12294:	movt	r0, #2
   12298:	strb	r1, [r0]
   1229c:	movw	r0, #33112	; 0x8158
   122a0:	movt	r0, #2
   122a4:	ldr	r6, [r0]
   122a8:	mov	r0, r6
   122ac:	mov	r1, #2
   122b0:	bl	12c48 <__assert_fail@plt+0x1afc>
   122b4:	mov	r0, r6
   122b8:	blx	r5
   122bc:	bl	11044 <__errno_location@plt>
   122c0:	ldr	r1, [r6]
   122c4:	mov	r7, r0
   122c8:	ldr	r0, [r0]
   122cc:	lsl	r1, r1, #26
   122d0:	and	r5, r0, r1, asr #31
   122d4:	movw	r1, #27780	; 0x6c84
   122d8:	mov	r0, r4
   122dc:	movt	r1, #1
   122e0:	bl	10ed0 <strcmp@plt>
   122e4:	cmp	r0, #0
   122e8:	beq	12300 <__assert_fail@plt+0x11b4>
   122ec:	mov	r0, r6
   122f0:	bl	12c84 <__assert_fail@plt+0x1b38>
   122f4:	cmn	r0, #1
   122f8:	ldreq	r5, [r7]
   122fc:	b	12308 <__assert_fail@plt+0x11bc>
   12300:	mov	r0, r6
   12304:	bl	110f8 <clearerr_unlocked@plt>
   12308:	cmp	r5, #0
   1230c:	moveq	r6, #1
   12310:	moveq	r0, r6
   12314:	popeq	{r4, r5, r6, r7, fp, pc}
   12318:	mov	r0, #0
   1231c:	mov	r1, #3
   12320:	mov	r2, r4
   12324:	mov	r6, #0
   12328:	bl	14bb8 <__assert_fail@plt+0x3a6c>
   1232c:	movw	r2, #28038	; 0x6d86
   12330:	mov	r3, r0
   12334:	mov	r0, #0
   12338:	mov	r1, r5
   1233c:	movt	r2, #1
   12340:	bl	10fcc <error@plt>
   12344:	mov	r0, r6
   12348:	pop	{r4, r5, r6, r7, fp, pc}
   1234c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12350:	add	fp, sp, #28
   12354:	sub	sp, sp, #20
   12358:	mov	lr, r0
   1235c:	ands	r0, r1, #1
   12360:	mov	r2, #0
   12364:	str	r1, [sp]
   12368:	str	r0, [sp, #4]
   1236c:	beq	123a8 <__assert_fail@plt+0x125c>
   12370:	movw	r1, #27780	; 0x6c84
   12374:	mov	r0, lr
   12378:	mov	r4, lr
   1237c:	movt	r1, #1
   12380:	bl	10ed0 <strcmp@plt>
   12384:	cmp	r0, #0
   12388:	clz	r0, r0
   1238c:	mov	lr, r4
   12390:	mov	r2, #0
   12394:	mov	r8, #0
   12398:	lsr	sl, r0, #5
   1239c:	addeq	lr, lr, #1
   123a0:	mov	r1, sl
   123a4:	b	123b4 <__assert_fail@plt+0x1268>
   123a8:	mov	sl, #0
   123ac:	mov	r8, #0
   123b0:	mov	r1, #0
   123b4:	movw	ip, #33488	; 0x82d0
   123b8:	mov	r9, #1
   123bc:	mov	r5, r1
   123c0:	mov	r0, #0
   123c4:	mov	r6, #0
   123c8:	movt	ip, #2
   123cc:	b	123f0 <__assert_fail@plt+0x12a4>
   123d0:	mov	sl, #0
   123d4:	mov	r8, #0
   123d8:	mov	r1, #0
   123dc:	mov	r2, #0
   123e0:	mov	r5, #0
   123e4:	mov	r0, #0
   123e8:	mov	r6, r7
   123ec:	add	lr, lr, #1
   123f0:	ldrb	r7, [lr]
   123f4:	cmp	r7, #44	; 0x2c
   123f8:	beq	12568 <__assert_fail@plt+0x141c>
   123fc:	cmp	r7, #45	; 0x2d
   12400:	bne	12444 <__assert_fail@plt+0x12f8>
   12404:	tst	r5, #1
   12408:	bne	12a60 <__assert_fail@plt+0x1914>
   1240c:	orrs	r0, sl, r8
   12410:	eoreq	r0, r1, #1
   12414:	tsteq	r0, #1
   12418:	beq	129d4 <__assert_fail@plt+0x1888>
   1241c:	ands	r6, r1, #1
   12420:	mov	r9, sl
   12424:	mov	r5, #1
   12428:	mov	sl, #0
   1242c:	mov	r0, #0
   12430:	add	lr, lr, #1
   12434:	movne	r6, r8
   12438:	moveq	r9, r5
   1243c:	mov	r8, #0
   12440:	b	123f0 <__assert_fail@plt+0x12a4>
   12444:	str	r5, [sp, #8]
   12448:	mov	r5, sl
   1244c:	mov	sl, r8
   12450:	mov	r4, lr
   12454:	str	r2, [sp, #16]
   12458:	str	r1, [sp, #12]
   1245c:	mov	r8, r0
   12460:	bl	11014 <__ctype_b_loc@plt>
   12464:	mov	r3, r8
   12468:	mov	r8, sl
   1246c:	mov	sl, r5
   12470:	ldr	r5, [sp, #8]
   12474:	ldr	r1, [sp, #12]
   12478:	ldr	r2, [sp, #16]
   1247c:	movw	ip, #33488	; 0x82d0
   12480:	mov	lr, r4
   12484:	cmp	r7, #0
   12488:	movt	ip, #2
   1248c:	beq	12568 <__assert_fail@plt+0x141c>
   12490:	ldr	r0, [r0]
   12494:	add	r0, r0, r7, lsl #1
   12498:	ldrh	r0, [r0]
   1249c:	ands	r0, r0, #1
   124a0:	bne	12568 <__assert_fail@plt+0x141c>
   124a4:	sub	r0, r7, #48	; 0x30
   124a8:	cmp	r0, #9
   124ac:	bhi	12a8c <__assert_fail@plt+0x1940>
   124b0:	movw	r1, #33156	; 0x8184
   124b4:	movt	r1, #2
   124b8:	ldr	r7, [r1]
   124bc:	cmp	r7, #0
   124c0:	mov	r1, r7
   124c4:	movwne	r1, #1
   124c8:	tst	r3, r1
   124cc:	movweq	r1, #33156	; 0x8184
   124d0:	moveq	r7, lr
   124d4:	movteq	r1, #2
   124d8:	streq	lr, [r1]
   124dc:	movw	r1, #39321	; 0x9999
   124e0:	movt	r1, #39321	; 0x9999
   124e4:	subs	r1, r1, sl
   124e8:	movw	r1, #39321	; 0x9999
   124ec:	movt	r1, #6553	; 0x1999
   124f0:	sbcs	r1, r1, r8
   124f4:	bcc	129e8 <__assert_fail@plt+0x189c>
   124f8:	mov	r1, #10
   124fc:	add	r3, r8, r8, lsl #2
   12500:	umull	r1, r2, sl, r1
   12504:	add	r2, r2, r3, lsl #1
   12508:	adds	r1, r1, r0
   1250c:	adc	r0, r2, r0, asr #31
   12510:	subs	r2, r1, sl
   12514:	sbcs	r2, r0, r8
   12518:	mov	r2, #0
   1251c:	movwcc	r2, #1
   12520:	cmp	r2, #0
   12524:	moveq	r8, r0
   12528:	moveq	sl, r1
   1252c:	cmp	r2, #0
   12530:	bne	129e8 <__assert_fail@plt+0x189c>
   12534:	mvn	r1, #0
   12538:	eor	r0, sl, r1
   1253c:	eor	r1, r8, r1
   12540:	orrs	r0, r0, r1
   12544:	beq	129e8 <__assert_fail@plt+0x189c>
   12548:	ldr	r2, [sp, #16]
   1254c:	ldr	r1, [sp, #12]
   12550:	eor	r0, r5, #1
   12554:	add	lr, lr, #1
   12558:	orr	r1, r1, r0
   1255c:	orr	r2, r2, r5
   12560:	mov	r0, #1
   12564:	b	123f0 <__assert_fail@plt+0x12a4>
   12568:	tst	r5, #1
   1256c:	beq	125f8 <__assert_fail@plt+0x14ac>
   12570:	orr	r0, r1, r2
   12574:	mov	r1, r9
   12578:	mov	r9, #1
   1257c:	movw	r4, #33484	; 0x82cc
   12580:	ands	r7, r0, #1
   12584:	str	r1, [sp, #16]
   12588:	movt	r4, #2
   1258c:	movne	r9, r1
   12590:	ldr	r1, [sp, #4]
   12594:	movne	r7, r6
   12598:	cmp	r1, #0
   1259c:	movw	r1, #33160	; 0x8188
   125a0:	movt	r1, #2
   125a4:	tsteq	r0, #1
   125a8:	beq	12a80 <__assert_fail@plt+0x1934>
   125ac:	tst	r2, #1
   125b0:	beq	12648 <__assert_fail@plt+0x14fc>
   125b4:	subs	r0, sl, r9
   125b8:	sbcs	r0, r8, r7
   125bc:	bcc	12ae0 <__assert_fail@plt+0x1994>
   125c0:	ldr	r5, [ip]
   125c4:	ldr	r0, [r1]
   125c8:	cmp	r5, r0
   125cc:	bne	126bc <__assert_fail@plt+0x1570>
   125d0:	ldr	r0, [r4]
   125d4:	mov	r2, #16
   125d8:	mov	r5, lr
   125dc:	bl	15800 <__assert_fail@plt+0x46b4>
   125e0:	movw	ip, #33488	; 0x82d0
   125e4:	mov	lr, r5
   125e8:	str	r0, [r4]
   125ec:	movt	ip, #2
   125f0:	ldr	r5, [ip]
   125f4:	b	126c0 <__assert_fail@plt+0x1574>
   125f8:	movw	r4, #33484	; 0x82cc
   125fc:	movw	r1, #33160	; 0x8188
   12600:	orrs	r0, sl, r8
   12604:	movt	r4, #2
   12608:	movt	r1, #2
   1260c:	beq	129d4 <__assert_fail@plt+0x1888>
   12610:	ldr	r5, [ip]
   12614:	ldr	r0, [r1]
   12618:	cmp	r5, r0
   1261c:	bne	12680 <__assert_fail@plt+0x1534>
   12620:	ldr	r0, [r4]
   12624:	mov	r2, #16
   12628:	mov	r5, lr
   1262c:	bl	15800 <__assert_fail@plt+0x46b4>
   12630:	movw	ip, #33488	; 0x82d0
   12634:	mov	lr, r5
   12638:	str	r0, [r4]
   1263c:	movt	ip, #2
   12640:	ldr	r5, [ip]
   12644:	b	12684 <__assert_fail@plt+0x1538>
   12648:	ldr	r5, [ip]
   1264c:	ldr	r0, [r1]
   12650:	cmp	r5, r0
   12654:	bne	1269c <__assert_fail@plt+0x1550>
   12658:	ldr	r0, [r4]
   1265c:	mov	r2, #16
   12660:	mov	r5, lr
   12664:	bl	15800 <__assert_fail@plt+0x46b4>
   12668:	movw	ip, #33488	; 0x82d0
   1266c:	mov	lr, r5
   12670:	str	r0, [r4]
   12674:	movt	ip, #2
   12678:	ldr	r5, [ip]
   1267c:	b	126a0 <__assert_fail@plt+0x1554>
   12680:	ldr	r0, [r4]
   12684:	vmov.32	d16[0], sl
   12688:	add	r2, r0, r5, lsl #4
   1268c:	vmov.32	d16[1], r8
   12690:	vorr	d17, d16, d16
   12694:	vst1.64	{d16-d17}, [r2]
   12698:	b	126d4 <__assert_fail@plt+0x1588>
   1269c:	ldr	r0, [r4]
   126a0:	mov	r2, r0
   126a4:	mvn	r3, #0
   126a8:	str	r9, [r2, r5, lsl #4]!
   126ac:	str	r7, [r2, #4]
   126b0:	str	r3, [r2, #8]
   126b4:	str	r3, [r2, #12]
   126b8:	b	126d8 <__assert_fail@plt+0x158c>
   126bc:	ldr	r0, [r4]
   126c0:	mov	r2, r0
   126c4:	str	r9, [r2, r5, lsl #4]!
   126c8:	stmib	r2, {r7, sl}
   126cc:	str	r8, [r2, #12]
   126d0:	ldr	r9, [sp, #16]
   126d4:	mov	r7, r6
   126d8:	add	r1, r5, #1
   126dc:	str	r1, [ip]
   126e0:	ldrb	r2, [lr]
   126e4:	cmp	r2, #0
   126e8:	bne	123d0 <__assert_fail@plt+0x1284>
   126ec:	cmp	r1, #0
   126f0:	beq	12b0c <__assert_fail@plt+0x19c0>
   126f4:	movw	r3, #11040	; 0x2b20
   126f8:	mov	r2, #16
   126fc:	movt	r3, #1
   12700:	bl	11110 <qsort@plt>
   12704:	movw	lr, #33488	; 0x82d0
   12708:	movt	lr, #2
   1270c:	ldr	r8, [lr]
   12710:	cmp	r8, #0
   12714:	beq	127c4 <__assert_fail@plt+0x1678>
   12718:	mov	r6, #0
   1271c:	mov	sl, r6
   12720:	add	r6, r6, #1
   12724:	cmp	r6, r8
   12728:	bcs	127b8 <__assert_fail@plt+0x166c>
   1272c:	mvn	r0, #-268435455	; 0xf0000001
   12730:	sub	r9, r0, sl
   12734:	ldr	r5, [r4]
   12738:	add	r1, r5, sl, lsl #4
   1273c:	mov	r0, r5
   12740:	ldr	r7, [r0, r6, lsl #4]!
   12744:	ldr	r2, [r1, #8]!
   12748:	ldr	r3, [r1, #4]
   1274c:	ldr	r0, [r0, #4]
   12750:	subs	r7, r2, r7
   12754:	sbcs	r0, r3, r0
   12758:	bcc	127b8 <__assert_fail@plt+0x166c>
   1275c:	add	r0, r5, r6, lsl #4
   12760:	ldrd	r4, [r0, #8]
   12764:	subs	r7, r2, r4
   12768:	sbcs	r7, r3, r5
   1276c:	mov	r7, #0
   12770:	movwcc	r7, #1
   12774:	cmp	r7, #0
   12778:	movne	r2, r4
   1277c:	movne	r3, r5
   12780:	movw	r4, #33484	; 0x82cc
   12784:	strd	r2, [r1]
   12788:	add	r2, r9, r8
   1278c:	add	r1, r0, #16
   12790:	movt	r4, #2
   12794:	lsl	r2, r2, #4
   12798:	bl	10ef4 <memmove@plt>
   1279c:	movw	lr, #33488	; 0x82d0
   127a0:	movt	lr, #2
   127a4:	ldr	r0, [lr]
   127a8:	sub	r8, r0, #1
   127ac:	cmp	r6, r8
   127b0:	str	r8, [lr]
   127b4:	bcc	12734 <__assert_fail@plt+0x15e8>
   127b8:	cmp	r6, r8
   127bc:	bcc	1271c <__assert_fail@plt+0x15d0>
   127c0:	b	127c8 <__assert_fail@plt+0x167c>
   127c4:	mov	r8, #0
   127c8:	ldr	r0, [sp]
   127cc:	tst	r0, #2
   127d0:	beq	12990 <__assert_fail@plt+0x1844>
   127d4:	ldr	r7, [r4]
   127d8:	movw	r1, #33160	; 0x8188
   127dc:	mov	r0, #0
   127e0:	movt	r1, #2
   127e4:	str	r0, [lr]
   127e8:	str	r0, [r4]
   127ec:	str	r0, [r1]
   127f0:	ldr	r6, [r7]
   127f4:	ldr	r5, [r7, #4]
   127f8:	subs	r1, r6, #2
   127fc:	sbcs	r1, r5, #0
   12800:	bcc	12858 <__assert_fail@plt+0x170c>
   12804:	movw	r1, #33160	; 0x8188
   12808:	mov	r0, #0
   1280c:	mov	r2, #16
   12810:	mov	r9, #0
   12814:	movt	r1, #2
   12818:	bl	15800 <__assert_fail@plt+0x46b4>
   1281c:	movw	lr, #33488	; 0x82d0
   12820:	mov	r2, #1
   12824:	mov	r3, r0
   12828:	str	r0, [r4]
   1282c:	movt	lr, #2
   12830:	ldr	r1, [lr]
   12834:	str	r2, [r3, r1, lsl #4]!
   12838:	subs	r2, r6, #1
   1283c:	add	ip, r1, #1
   12840:	sbc	r6, r5, #0
   12844:	str	r9, [r3, #4]
   12848:	str	r2, [r3, #8]
   1284c:	str	r6, [r3, #12]
   12850:	str	ip, [lr]
   12854:	b	1285c <__assert_fail@plt+0x1710>
   12858:	mov	ip, #0
   1285c:	cmp	r8, #2
   12860:	str	r7, [sp, #16]
   12864:	bcc	128f4 <__assert_fail@plt+0x17a8>
   12868:	add	r5, r7, #16
   1286c:	sub	r7, r8, #1
   12870:	ldr	r6, [r5, #-8]
   12874:	ldr	r4, [r5, #-4]
   12878:	ldm	r5, {r2, r3}
   1287c:	adds	r9, r6, #1
   12880:	adc	r6, r4, #0
   12884:	eor	r1, r9, r2
   12888:	eor	r4, r6, r3
   1288c:	orrs	r1, r1, r4
   12890:	beq	128e8 <__assert_fail@plt+0x179c>
   12894:	movw	r1, #33160	; 0x8188
   12898:	subs	sl, r2, #1
   1289c:	movt	r1, #2
   128a0:	sbc	r4, r3, #0
   128a4:	ldr	r2, [r1]
   128a8:	cmp	ip, r2
   128ac:	bne	128d0 <__assert_fail@plt+0x1784>
   128b0:	mov	r2, #16
   128b4:	bl	15800 <__assert_fail@plt+0x46b4>
   128b8:	movw	lr, #33488	; 0x82d0
   128bc:	movw	r1, #33484	; 0x82cc
   128c0:	movt	lr, #2
   128c4:	movt	r1, #2
   128c8:	ldr	ip, [lr]
   128cc:	str	r0, [r1]
   128d0:	mov	r1, r0
   128d4:	str	r9, [r1, ip, lsl #4]!
   128d8:	add	ip, ip, #1
   128dc:	stmib	r1, {r6, sl}
   128e0:	str	r4, [r1, #12]
   128e4:	str	ip, [lr]
   128e8:	add	r5, r5, #16
   128ec:	subs	r7, r7, #1
   128f0:	bne	12870 <__assert_fail@plt+0x1724>
   128f4:	ldr	r4, [sp, #16]
   128f8:	mvn	r1, #0
   128fc:	add	r2, r4, r8, lsl #4
   12900:	ldrd	r2, [r2, #-8]
   12904:	eor	r7, r3, r1
   12908:	eor	r6, r2, r1
   1290c:	orrs	r7, r6, r7
   12910:	beq	12974 <__assert_fail@plt+0x1828>
   12914:	movw	r1, #33160	; 0x8188
   12918:	adds	r6, r2, #1
   1291c:	movt	r1, #2
   12920:	adc	r5, r3, #0
   12924:	ldr	r1, [r1]
   12928:	cmp	ip, r1
   1292c:	bne	12958 <__assert_fail@plt+0x180c>
   12930:	movw	r1, #33160	; 0x8188
   12934:	mov	r2, #16
   12938:	movt	r1, #2
   1293c:	bl	15800 <__assert_fail@plt+0x46b4>
   12940:	movw	lr, #33488	; 0x82d0
   12944:	movw	r1, #33484	; 0x82cc
   12948:	movt	lr, #2
   1294c:	movt	r1, #2
   12950:	ldr	ip, [lr]
   12954:	str	r0, [r1]
   12958:	str	r6, [r0, ip, lsl #4]!
   1295c:	mvn	r1, #0
   12960:	str	r5, [r0, #4]
   12964:	str	r1, [r0, #8]
   12968:	str	r1, [r0, #12]
   1296c:	add	r0, ip, #1
   12970:	str	r0, [lr]
   12974:	mov	r0, r4
   12978:	bl	12d7c <__assert_fail@plt+0x1c30>
   1297c:	movw	lr, #33488	; 0x82d0
   12980:	movw	r4, #33484	; 0x82cc
   12984:	movt	lr, #2
   12988:	movt	r4, #2
   1298c:	ldr	r8, [lr]
   12990:	ldr	r0, [r4]
   12994:	add	r1, r8, #1
   12998:	mov	r5, r4
   1299c:	mov	r4, lr
   129a0:	str	r1, [lr]
   129a4:	lsl	r1, r1, #4
   129a8:	bl	1569c <__assert_fail@plt+0x4550>
   129ac:	ldr	r1, [r4]
   129b0:	str	r0, [r5]
   129b4:	add	r0, r0, r1, lsl #4
   129b8:	mvn	r1, #0
   129bc:	str	r1, [r0, #-16]
   129c0:	str	r1, [r0, #-12]
   129c4:	str	r1, [r0, #-8]
   129c8:	str	r1, [r0, #-4]
   129cc:	sub	sp, fp, #28
   129d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129d4:	movw	r0, #27721	; 0x6c49
   129d8:	movw	r1, #27676	; 0x6c1c
   129dc:	movt	r0, #1
   129e0:	movt	r1, #1
   129e4:	b	12a70 <__assert_fail@plt+0x1924>
   129e8:	movw	r1, #27807	; 0x6c9f
   129ec:	mov	r0, r7
   129f0:	movt	r1, #1
   129f4:	bl	11140 <strspn@plt>
   129f8:	mov	r1, r0
   129fc:	mov	r0, r7
   12a00:	bl	15b2c <__assert_fail@plt+0x49e0>
   12a04:	ldr	r2, [sp]
   12a08:	movw	r1, #27818	; 0x6caa
   12a0c:	mov	r4, r0
   12a10:	movw	r0, #27856	; 0x6cd0
   12a14:	movt	r0, #1
   12a18:	movt	r1, #1
   12a1c:	tst	r2, #4
   12a20:	mov	r2, #5
   12a24:	moveq	r1, r0
   12a28:	mov	r0, #0
   12a2c:	bl	10f54 <dcgettext@plt>
   12a30:	mov	r5, r0
   12a34:	mov	r0, r4
   12a38:	bl	14e64 <__assert_fail@plt+0x3d18>
   12a3c:	mov	r3, r0
   12a40:	mov	r0, #0
   12a44:	mov	r1, #0
   12a48:	mov	r2, r5
   12a4c:	bl	10fcc <error@plt>
   12a50:	mov	r0, r4
   12a54:	bl	12d7c <__assert_fail@plt+0x1c30>
   12a58:	mov	r0, #1
   12a5c:	bl	11248 <__assert_fail@plt+0xfc>
   12a60:	movw	r0, #27656	; 0x6c08
   12a64:	movw	r1, #27624	; 0x6be8
   12a68:	movt	r0, #1
   12a6c:	movt	r1, #1
   12a70:	ldr	r2, [sp]
   12a74:	tst	r2, #4
   12a78:	moveq	r1, r0
   12a7c:	b	12ae8 <__assert_fail@plt+0x199c>
   12a80:	movw	r1, #27748	; 0x6c64
   12a84:	movt	r1, #1
   12a88:	b	12ae8 <__assert_fail@plt+0x199c>
   12a8c:	ldr	r2, [sp]
   12a90:	movw	r0, #27920	; 0x6d10
   12a94:	movw	r1, #27885	; 0x6ced
   12a98:	mov	r5, lr
   12a9c:	movt	r0, #1
   12aa0:	movt	r1, #1
   12aa4:	tst	r2, #4
   12aa8:	mov	r2, #5
   12aac:	moveq	r1, r0
   12ab0:	mov	r0, #0
   12ab4:	bl	10f54 <dcgettext@plt>
   12ab8:	mov	r4, r0
   12abc:	mov	r0, r5
   12ac0:	bl	14e64 <__assert_fail@plt+0x3d18>
   12ac4:	mov	r3, r0
   12ac8:	mov	r0, #0
   12acc:	mov	r1, #0
   12ad0:	mov	r2, r4
   12ad4:	bl	10fcc <error@plt>
   12ad8:	mov	r0, #1
   12adc:	bl	11248 <__assert_fail@plt+0xfc>
   12ae0:	movw	r1, #27782	; 0x6c86
   12ae4:	movt	r1, #1
   12ae8:	mov	r0, #0
   12aec:	mov	r2, #5
   12af0:	bl	10f54 <dcgettext@plt>
   12af4:	mov	r2, r0
   12af8:	mov	r0, #0
   12afc:	mov	r1, #0
   12b00:	bl	10fcc <error@plt>
   12b04:	mov	r0, #1
   12b08:	bl	11248 <__assert_fail@plt+0xfc>
   12b0c:	movw	r0, #27984	; 0x6d50
   12b10:	movw	r1, #27943	; 0x6d27
   12b14:	movt	r0, #1
   12b18:	movt	r1, #1
   12b1c:	b	12a70 <__assert_fail@plt+0x1924>
   12b20:	ldr	r2, [r0]
   12b24:	ldr	r1, [r1]
   12b28:	mov	r0, #0
   12b2c:	cmp	r2, r1
   12b30:	movwgt	r0, #1
   12b34:	mvnlt	r0, #0
   12b38:	bx	lr
   12b3c:	movw	r1, #33164	; 0x818c
   12b40:	movt	r1, #2
   12b44:	str	r0, [r1]
   12b48:	bx	lr
   12b4c:	movw	r1, #33168	; 0x8190
   12b50:	movt	r1, #2
   12b54:	strb	r0, [r1]
   12b58:	bx	lr
   12b5c:	push	{r4, r5, r6, sl, fp, lr}
   12b60:	add	fp, sp, #16
   12b64:	sub	sp, sp, #8
   12b68:	movw	r0, #33116	; 0x815c
   12b6c:	movt	r0, #2
   12b70:	ldr	r0, [r0]
   12b74:	bl	15cd0 <__assert_fail@plt+0x4b84>
   12b78:	cmp	r0, #0
   12b7c:	beq	12ba4 <__assert_fail@plt+0x1a58>
   12b80:	movw	r0, #33168	; 0x8190
   12b84:	movt	r0, #2
   12b88:	ldrb	r0, [r0]
   12b8c:	cmp	r0, #0
   12b90:	beq	12bc4 <__assert_fail@plt+0x1a78>
   12b94:	bl	11044 <__errno_location@plt>
   12b98:	ldr	r0, [r0]
   12b9c:	cmp	r0, #32
   12ba0:	bne	12bc4 <__assert_fail@plt+0x1a78>
   12ba4:	movw	r0, #33104	; 0x8150
   12ba8:	movt	r0, #2
   12bac:	ldr	r0, [r0]
   12bb0:	bl	15cd0 <__assert_fail@plt+0x4b84>
   12bb4:	cmp	r0, #0
   12bb8:	subeq	sp, fp, #16
   12bbc:	popeq	{r4, r5, r6, sl, fp, pc}
   12bc0:	b	12c34 <__assert_fail@plt+0x1ae8>
   12bc4:	movw	r1, #28022	; 0x6d76
   12bc8:	mov	r0, #0
   12bcc:	mov	r2, #5
   12bd0:	movt	r1, #1
   12bd4:	bl	10f54 <dcgettext@plt>
   12bd8:	mov	r4, r0
   12bdc:	movw	r0, #33164	; 0x818c
   12be0:	movt	r0, #2
   12be4:	ldr	r6, [r0]
   12be8:	bl	11044 <__errno_location@plt>
   12bec:	ldr	r5, [r0]
   12bf0:	cmp	r6, #0
   12bf4:	bne	12c10 <__assert_fail@plt+0x1ac4>
   12bf8:	movw	r2, #28038	; 0x6d86
   12bfc:	mov	r0, #0
   12c00:	mov	r1, r5
   12c04:	mov	r3, r4
   12c08:	movt	r2, #1
   12c0c:	b	12c30 <__assert_fail@plt+0x1ae4>
   12c10:	mov	r0, r6
   12c14:	bl	14adc <__assert_fail@plt+0x3990>
   12c18:	movw	r2, #28034	; 0x6d82
   12c1c:	mov	r3, r0
   12c20:	str	r4, [sp]
   12c24:	mov	r0, #0
   12c28:	mov	r1, r5
   12c2c:	movt	r2, #1
   12c30:	bl	10fcc <error@plt>
   12c34:	movw	r0, #33020	; 0x80fc
   12c38:	movt	r0, #2
   12c3c:	ldr	r0, [r0]
   12c40:	bl	10f18 <_exit@plt>
   12c44:	b	10edc <posix_fadvise64@plt>
   12c48:	cmp	r0, #0
   12c4c:	bxeq	lr
   12c50:	push	{r4, sl, fp, lr}
   12c54:	add	fp, sp, #8
   12c58:	sub	sp, sp, #16
   12c5c:	mov	r4, r1
   12c60:	bl	11080 <fileno@plt>
   12c64:	mov	r1, #0
   12c68:	mov	r2, #0
   12c6c:	mov	r3, #0
   12c70:	str	r1, [sp]
   12c74:	stmib	sp, {r1, r4}
   12c78:	bl	10edc <posix_fadvise64@plt>
   12c7c:	sub	sp, fp, #8
   12c80:	pop	{r4, sl, fp, pc}
   12c84:	push	{r4, r5, r6, sl, fp, lr}
   12c88:	add	fp, sp, #16
   12c8c:	sub	sp, sp, #8
   12c90:	mov	r4, r0
   12c94:	bl	11080 <fileno@plt>
   12c98:	cmn	r0, #1
   12c9c:	ble	12d10 <__assert_fail@plt+0x1bc4>
   12ca0:	mov	r0, r4
   12ca4:	bl	10ff0 <__freading@plt>
   12ca8:	cmp	r0, #0
   12cac:	beq	12cd8 <__assert_fail@plt+0x1b8c>
   12cb0:	mov	r0, r4
   12cb4:	bl	11080 <fileno@plt>
   12cb8:	mov	r1, #1
   12cbc:	mov	r2, #0
   12cc0:	mov	r3, #0
   12cc4:	str	r1, [sp]
   12cc8:	bl	10f90 <lseek64@plt>
   12ccc:	and	r0, r0, r1
   12cd0:	cmn	r0, #1
   12cd4:	beq	12d10 <__assert_fail@plt+0x1bc4>
   12cd8:	mov	r0, r4
   12cdc:	bl	12d20 <__assert_fail@plt+0x1bd4>
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d10 <__assert_fail@plt+0x1bc4>
   12ce8:	bl	11044 <__errno_location@plt>
   12cec:	ldr	r6, [r0]
   12cf0:	mov	r5, r0
   12cf4:	mov	r0, r4
   12cf8:	bl	110a4 <fclose@plt>
   12cfc:	cmp	r6, #0
   12d00:	strne	r6, [r5]
   12d04:	mvnne	r0, #0
   12d08:	sub	sp, fp, #16
   12d0c:	pop	{r4, r5, r6, sl, fp, pc}
   12d10:	mov	r0, r4
   12d14:	sub	sp, fp, #16
   12d18:	pop	{r4, r5, r6, sl, fp, lr}
   12d1c:	b	110a4 <fclose@plt>
   12d20:	push	{r4, sl, fp, lr}
   12d24:	add	fp, sp, #8
   12d28:	sub	sp, sp, #8
   12d2c:	mov	r4, r0
   12d30:	cmp	r0, #0
   12d34:	beq	12d50 <__assert_fail@plt+0x1c04>
   12d38:	mov	r0, r4
   12d3c:	bl	10ff0 <__freading@plt>
   12d40:	cmp	r0, #0
   12d44:	ldrbne	r0, [r4, #1]
   12d48:	tstne	r0, #1
   12d4c:	bne	12d60 <__assert_fail@plt+0x1c14>
   12d50:	mov	r0, r4
   12d54:	sub	sp, fp, #8
   12d58:	pop	{r4, sl, fp, lr}
   12d5c:	b	10ee8 <fflush@plt>
   12d60:	mov	r0, #1
   12d64:	mov	r2, #0
   12d68:	mov	r3, #0
   12d6c:	str	r0, [sp]
   12d70:	mov	r0, r4
   12d74:	bl	12da4 <__assert_fail@plt+0x1c58>
   12d78:	b	12d50 <__assert_fail@plt+0x1c04>
   12d7c:	push	{r4, r5, r6, sl, fp, lr}
   12d80:	add	fp, sp, #16
   12d84:	mov	r4, r0
   12d88:	bl	11044 <__errno_location@plt>
   12d8c:	ldr	r6, [r0]
   12d90:	mov	r5, r0
   12d94:	mov	r0, r4
   12d98:	bl	10f00 <free@plt>
   12d9c:	str	r6, [r5]
   12da0:	pop	{r4, r5, r6, sl, fp, pc}
   12da4:	push	{r4, r5, r6, r7, fp, lr}
   12da8:	add	fp, sp, #16
   12dac:	sub	sp, sp, #8
   12db0:	mov	r4, r0
   12db4:	ldr	r0, [r0, #4]
   12db8:	mov	r5, r3
   12dbc:	mov	r6, r2
   12dc0:	ldr	r1, [r4, #8]
   12dc4:	cmp	r1, r0
   12dc8:	bne	12de4 <__assert_fail@plt+0x1c98>
   12dcc:	ldrd	r0, [r4, #16]
   12dd0:	cmp	r1, r0
   12dd4:	bne	12de4 <__assert_fail@plt+0x1c98>
   12dd8:	ldr	r0, [r4, #36]	; 0x24
   12ddc:	cmp	r0, #0
   12de0:	beq	12dfc <__assert_fail@plt+0x1cb0>
   12de4:	mov	r0, r4
   12de8:	mov	r2, r6
   12dec:	mov	r3, r5
   12df0:	sub	sp, fp, #16
   12df4:	pop	{r4, r5, r6, r7, fp, lr}
   12df8:	b	110b0 <fseeko64@plt>
   12dfc:	ldr	r7, [fp, #8]
   12e00:	mov	r0, r4
   12e04:	bl	11080 <fileno@plt>
   12e08:	mov	r2, r6
   12e0c:	mov	r3, r5
   12e10:	str	r7, [sp]
   12e14:	bl	10f90 <lseek64@plt>
   12e18:	and	r2, r0, r1
   12e1c:	cmn	r2, #1
   12e20:	mvneq	r0, #0
   12e24:	subeq	sp, fp, #16
   12e28:	popeq	{r4, r5, r6, r7, fp, pc}
   12e2c:	strd	r0, [r4, #80]	; 0x50
   12e30:	ldr	r0, [r4]
   12e34:	bic	r0, r0, #16
   12e38:	str	r0, [r4]
   12e3c:	mov	r0, #0
   12e40:	sub	sp, fp, #16
   12e44:	pop	{r4, r5, r6, r7, fp, pc}
   12e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e4c:	add	fp, sp, #28
   12e50:	sub	sp, sp, #44	; 0x2c
   12e54:	mov	r5, r0
   12e58:	ldr	r0, [r0]
   12e5c:	mov	r6, r2
   12e60:	mov	r4, r1
   12e64:	str	r3, [sp, #24]
   12e68:	cmp	r0, #0
   12e6c:	beq	12e78 <__assert_fail@plt+0x1d2c>
   12e70:	ldr	r9, [r4]
   12e74:	b	12e94 <__assert_fail@plt+0x1d48>
   12e78:	cmp	r3, #64	; 0x40
   12e7c:	mov	r9, r3
   12e80:	movcs	r9, #64	; 0x40
   12e84:	mov	r0, r9
   12e88:	bl	15c4c <__assert_fail@plt+0x4b00>
   12e8c:	cmp	r0, #0
   12e90:	beq	1313c <__assert_fail@plt+0x1ff0>
   12e94:	cmp	r9, r6
   12e98:	str	r0, [sp, #28]
   12e9c:	str	r4, [sp, #8]
   12ea0:	str	r5, [sp, #4]
   12ea4:	bcc	13128 <__assert_fail@plt+0x1fdc>
   12ea8:	str	r6, [sp, #12]
   12eac:	sub	r8, r9, r6
   12eb0:	ldr	r6, [sp, #24]
   12eb4:	cmp	r9, r6
   12eb8:	bcc	12ec4 <__assert_fail@plt+0x1d78>
   12ebc:	cmp	r8, #0
   12ec0:	beq	13128 <__assert_fail@plt+0x1fdc>
   12ec4:	ldr	r0, [fp, #12]
   12ec8:	ldr	r1, [fp, #8]
   12ecc:	ldr	r7, [fp, #16]
   12ed0:	cmn	r0, #1
   12ed4:	mov	r2, r0
   12ed8:	moveq	r2, r1
   12edc:	cmn	r1, #1
   12ee0:	moveq	r1, r0
   12ee4:	moveq	r2, r0
   12ee8:	ldr	r0, [sp, #28]
   12eec:	str	r1, [sp, #20]
   12ef0:	ldr	r1, [sp, #12]
   12ef4:	str	r2, [sp, #16]
   12ef8:	add	r5, r0, r1
   12efc:	eor	r0, r1, #-2147483648	; 0x80000000
   12f00:	str	r0, [sp]
   12f04:	mov	r0, r7
   12f08:	sub	r1, fp, #32
   12f0c:	bl	15d54 <__assert_fail@plt+0x4c08>
   12f10:	mov	r4, r0
   12f14:	cmp	r0, #0
   12f18:	beq	12f5c <__assert_fail@plt+0x1e10>
   12f1c:	ldr	r1, [sp, #20]
   12f20:	ldr	sl, [fp, #-32]	; 0xffffffe0
   12f24:	mov	r7, #0
   12f28:	cmn	r1, #1
   12f2c:	beq	12fa4 <__assert_fail@plt+0x1e58>
   12f30:	ldr	r2, [sp, #16]
   12f34:	mov	r0, r4
   12f38:	mov	r3, sl
   12f3c:	bl	13148 <__assert_fail@plt+0x1ffc>
   12f40:	cmp	r0, #0
   12f44:	ldr	r2, [sp, #32]
   12f48:	rsbne	r1, r4, #1
   12f4c:	movne	r7, #1
   12f50:	addne	sl, r1, r0
   12f54:	strne	sl, [fp, #-32]	; 0xffffffe0
   12f58:	b	12fa8 <__assert_fail@plt+0x1e5c>
   12f5c:	ldmib	r7, {r0, r1}
   12f60:	cmp	r0, r1
   12f64:	bcs	130cc <__assert_fail@plt+0x1f80>
   12f68:	add	r1, r0, #1
   12f6c:	str	r1, [r7, #4]
   12f70:	ldrb	r2, [r0]
   12f74:	ldr	r0, [sp, #16]
   12f78:	ldr	r1, [sp, #20]
   12f7c:	mov	sl, #1
   12f80:	str	sl, [fp, #-32]	; 0xffffffe0
   12f84:	sub	r0, r2, r0
   12f88:	sub	r1, r2, r1
   12f8c:	clz	r0, r0
   12f90:	clz	r1, r1
   12f94:	lsr	r0, r0, #5
   12f98:	lsr	r1, r1, #5
   12f9c:	orr	r7, r1, r0
   12fa0:	b	12fa8 <__assert_fail@plt+0x1e5c>
   12fa4:	ldr	r2, [sp, #32]
   12fa8:	cmp	r9, r6
   12fac:	str	r2, [sp, #32]
   12fb0:	str	r7, [sp, #36]	; 0x24
   12fb4:	bcs	13054 <__assert_fail@plt+0x1f08>
   12fb8:	add	r3, sl, #1
   12fbc:	cmp	r8, r3
   12fc0:	bcs	13054 <__assert_fail@plt+0x1f08>
   12fc4:	ldr	r0, [sp, #28]
   12fc8:	lsl	r1, r9, #1
   12fcc:	cmp	r9, #64	; 0x40
   12fd0:	ldr	r7, [fp, #16]
   12fd4:	addcc	r1, r9, #64	; 0x40
   12fd8:	sub	r5, r5, r0
   12fdc:	sub	r2, r1, r5
   12fe0:	cmp	r2, r3
   12fe4:	mov	r2, r6
   12fe8:	addcc	r1, r3, r5
   12fec:	cmp	r1, r6
   12ff0:	mov	r6, r1
   12ff4:	movhi	r6, r2
   12ff8:	cmp	r9, r1
   12ffc:	ldr	r1, [sp, #12]
   13000:	movcs	r6, r2
   13004:	sub	r1, r6, r1
   13008:	cmn	r1, #1
   1300c:	bgt	1301c <__assert_fail@plt+0x1ed0>
   13010:	ldr	r6, [sp]
   13014:	cmp	r9, r6
   13018:	beq	13124 <__assert_fail@plt+0x1fd8>
   1301c:	mov	r1, r6
   13020:	bl	15c7c <__assert_fail@plt+0x4b30>
   13024:	cmp	r0, #0
   13028:	beq	13128 <__assert_fail@plt+0x1fdc>
   1302c:	sub	r8, r6, r5
   13030:	mov	r9, r6
   13034:	ldr	r6, [sp, #24]
   13038:	add	r5, r0, r5
   1303c:	str	r0, [sp, #28]
   13040:	cmp	r8, #2
   13044:	bcs	13060 <__assert_fail@plt+0x1f14>
   13048:	cmp	r4, #0
   1304c:	bne	130a8 <__assert_fail@plt+0x1f5c>
   13050:	b	130bc <__assert_fail@plt+0x1f70>
   13054:	ldr	r7, [fp, #16]
   13058:	cmp	r8, #2
   1305c:	bcc	13048 <__assert_fail@plt+0x1efc>
   13060:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13064:	sub	r6, r8, #1
   13068:	cmp	r0, r6
   1306c:	movcc	r6, r0
   13070:	cmp	r4, #0
   13074:	beq	1308c <__assert_fail@plt+0x1f40>
   13078:	mov	r0, r5
   1307c:	mov	r1, r4
   13080:	mov	r2, r6
   13084:	bl	10f24 <memcpy@plt>
   13088:	b	13094 <__assert_fail@plt+0x1f48>
   1308c:	ldr	r0, [sp, #32]
   13090:	strb	r0, [r5]
   13094:	sub	r8, r8, r6
   13098:	add	r5, r5, r6
   1309c:	ldr	r6, [sp, #24]
   130a0:	cmp	r4, #0
   130a4:	beq	130bc <__assert_fail@plt+0x1f70>
   130a8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   130ac:	mov	r0, r7
   130b0:	bl	15d88 <__assert_fail@plt+0x4c3c>
   130b4:	cmp	r0, #0
   130b8:	bne	13128 <__assert_fail@plt+0x1fdc>
   130bc:	ldr	r0, [sp, #36]	; 0x24
   130c0:	cmp	r0, #0
   130c4:	beq	12f04 <__assert_fail@plt+0x1db8>
   130c8:	b	130ec <__assert_fail@plt+0x1fa0>
   130cc:	mov	r0, r7
   130d0:	bl	110bc <__uflow@plt>
   130d4:	mov	r2, r0
   130d8:	cmn	r0, #1
   130dc:	bne	12f74 <__assert_fail@plt+0x1e28>
   130e0:	ldr	r0, [sp, #28]
   130e4:	cmp	r5, r0
   130e8:	beq	13128 <__assert_fail@plt+0x1fdc>
   130ec:	ldr	r2, [sp, #28]
   130f0:	ldr	r0, [sp, #12]
   130f4:	mov	r1, #0
   130f8:	add	r0, r2, r0
   130fc:	strb	r1, [r5], -r0
   13100:	ldr	r0, [sp, #4]
   13104:	cmp	r5, #0
   13108:	mvneq	r5, #0
   1310c:	str	r2, [r0]
   13110:	ldr	r0, [sp, #8]
   13114:	str	r9, [r0]
   13118:	mov	r0, r5
   1311c:	sub	sp, fp, #28
   13120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13124:	ldr	r9, [sp]
   13128:	ldr	r0, [sp, #4]
   1312c:	ldr	r1, [sp, #28]
   13130:	str	r1, [r0]
   13134:	ldr	r0, [sp, #8]
   13138:	str	r9, [r0]
   1313c:	mvn	r0, #0
   13140:	sub	sp, fp, #28
   13144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13148:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1314c:	add	fp, sp, #24
   13150:	uxtb	ip, r2
   13154:	uxtb	r1, r1
   13158:	cmp	r1, ip
   1315c:	bne	1316c <__assert_fail@plt+0x2020>
   13160:	mov	r2, r3
   13164:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   13168:	b	11098 <memchr@plt>
   1316c:	cmp	r3, #0
   13170:	beq	13198 <__assert_fail@plt+0x204c>
   13174:	ands	r2, r0, #3
   13178:	beq	13198 <__assert_fail@plt+0x204c>
   1317c:	ldrb	r2, [r0]
   13180:	cmp	r1, r2
   13184:	cmpne	ip, r2
   13188:	beq	1322c <__assert_fail@plt+0x20e0>
   1318c:	subs	r3, r3, #1
   13190:	add	r0, r0, #1
   13194:	bne	13174 <__assert_fail@plt+0x2028>
   13198:	cmp	r3, #4
   1319c:	bcc	13204 <__assert_fail@plt+0x20b8>
   131a0:	orr	r2, ip, ip, lsl #8
   131a4:	movw	r4, #32896	; 0x8080
   131a8:	movw	r9, #65279	; 0xfeff
   131ac:	orr	lr, r2, r2, lsl #16
   131b0:	orr	r2, r1, r1, lsl #8
   131b4:	movt	r4, #32896	; 0x8080
   131b8:	movt	r9, #65278	; 0xfefe
   131bc:	orr	r8, r2, r2, lsl #16
   131c0:	mov	r6, r0
   131c4:	ldr	r7, [r6], #4
   131c8:	eor	r2, r7, lr
   131cc:	eor	r5, r2, r4
   131d0:	add	r2, r2, r9
   131d4:	and	r2, r2, r5
   131d8:	eor	r5, r7, r8
   131dc:	eor	r7, r5, r4
   131e0:	add	r5, r5, r9
   131e4:	and	r5, r5, r7
   131e8:	orr	r2, r5, r2
   131ec:	ands	r2, r2, r4
   131f0:	subeq	r3, r3, #4
   131f4:	moveq	r0, r6
   131f8:	bne	13204 <__assert_fail@plt+0x20b8>
   131fc:	cmp	r3, #3
   13200:	bhi	131c0 <__assert_fail@plt+0x2074>
   13204:	cmp	r3, #0
   13208:	beq	13228 <__assert_fail@plt+0x20dc>
   1320c:	ldrb	r2, [r0]
   13210:	cmp	r1, r2
   13214:	cmpne	ip, r2
   13218:	beq	1322c <__assert_fail@plt+0x20e0>
   1321c:	add	r0, r0, #1
   13220:	subs	r3, r3, #1
   13224:	bne	1320c <__assert_fail@plt+0x20c0>
   13228:	mov	r0, #0
   1322c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13230:	push	{r4, r5, fp, lr}
   13234:	add	fp, sp, #8
   13238:	cmp	r0, #0
   1323c:	beq	132d0 <__assert_fail@plt+0x2184>
   13240:	mov	r1, #47	; 0x2f
   13244:	mov	r4, r0
   13248:	bl	110e0 <strrchr@plt>
   1324c:	cmp	r0, #0
   13250:	mov	r5, r4
   13254:	addne	r5, r0, #1
   13258:	sub	r0, r5, r4
   1325c:	cmp	r0, #7
   13260:	blt	132b4 <__assert_fail@plt+0x2168>
   13264:	movw	r1, #28097	; 0x6dc1
   13268:	sub	r0, r5, #7
   1326c:	mov	r2, #7
   13270:	movt	r1, #1
   13274:	bl	11128 <strncmp@plt>
   13278:	cmp	r0, #0
   1327c:	bne	132b4 <__assert_fail@plt+0x2168>
   13280:	movw	r1, #28105	; 0x6dc9
   13284:	mov	r0, r5
   13288:	mov	r2, #3
   1328c:	movt	r1, #1
   13290:	bl	11128 <strncmp@plt>
   13294:	cmp	r0, #0
   13298:	beq	132a4 <__assert_fail@plt+0x2158>
   1329c:	mov	r4, r5
   132a0:	b	132b4 <__assert_fail@plt+0x2168>
   132a4:	movw	r0, #33088	; 0x8140
   132a8:	add	r4, r5, #3
   132ac:	movt	r0, #2
   132b0:	str	r4, [r0]
   132b4:	movw	r0, #33092	; 0x8144
   132b8:	movt	r0, #2
   132bc:	str	r4, [r0]
   132c0:	movw	r0, #33172	; 0x8194
   132c4:	movt	r0, #2
   132c8:	str	r4, [r0]
   132cc:	pop	{r4, r5, fp, pc}
   132d0:	movw	r0, #33104	; 0x8150
   132d4:	mov	r1, #55	; 0x37
   132d8:	mov	r2, #1
   132dc:	movt	r0, #2
   132e0:	ldr	r3, [r0]
   132e4:	movw	r0, #28041	; 0x6d89
   132e8:	movt	r0, #1
   132ec:	bl	10f84 <fwrite@plt>
   132f0:	bl	11134 <abort@plt>
   132f4:	push	{r4, r5, r6, sl, fp, lr}
   132f8:	add	fp, sp, #16
   132fc:	mov	r4, r0
   13300:	movw	r0, #33176	; 0x8198
   13304:	movt	r0, #2
   13308:	cmp	r4, #0
   1330c:	moveq	r4, r0
   13310:	bl	11044 <__errno_location@plt>
   13314:	ldr	r6, [r0]
   13318:	mov	r5, r0
   1331c:	mov	r0, r4
   13320:	mov	r1, #48	; 0x30
   13324:	bl	15ab4 <__assert_fail@plt+0x4968>
   13328:	str	r6, [r5]
   1332c:	pop	{r4, r5, r6, sl, fp, pc}
   13330:	movw	r1, #33176	; 0x8198
   13334:	cmp	r0, #0
   13338:	movt	r1, #2
   1333c:	movne	r1, r0
   13340:	ldr	r0, [r1]
   13344:	bx	lr
   13348:	movw	r2, #33176	; 0x8198
   1334c:	cmp	r0, #0
   13350:	movt	r2, #2
   13354:	movne	r2, r0
   13358:	str	r1, [r2]
   1335c:	bx	lr
   13360:	movw	r3, #33176	; 0x8198
   13364:	cmp	r0, #0
   13368:	movt	r3, #2
   1336c:	movne	r3, r0
   13370:	ubfx	r0, r1, #5, #3
   13374:	and	r1, r1, #31
   13378:	add	r0, r3, r0, lsl #2
   1337c:	ldr	r3, [r0, #8]
   13380:	eor	r2, r2, r3, lsr r1
   13384:	and	r2, r2, #1
   13388:	eor	r2, r3, r2, lsl r1
   1338c:	str	r2, [r0, #8]
   13390:	mov	r0, #1
   13394:	and	r0, r0, r3, lsr r1
   13398:	bx	lr
   1339c:	movw	r2, #33176	; 0x8198
   133a0:	cmp	r0, #0
   133a4:	movt	r2, #2
   133a8:	movne	r2, r0
   133ac:	ldr	r0, [r2, #4]
   133b0:	str	r1, [r2, #4]
   133b4:	bx	lr
   133b8:	movw	r3, #33176	; 0x8198
   133bc:	cmp	r0, #0
   133c0:	movt	r3, #2
   133c4:	movne	r3, r0
   133c8:	cmp	r1, #0
   133cc:	mov	r0, #10
   133d0:	cmpne	r2, #0
   133d4:	str	r0, [r3]
   133d8:	bne	133e8 <__assert_fail@plt+0x229c>
   133dc:	push	{fp, lr}
   133e0:	mov	fp, sp
   133e4:	bl	11134 <abort@plt>
   133e8:	str	r1, [r3, #40]	; 0x28
   133ec:	str	r2, [r3, #44]	; 0x2c
   133f0:	bx	lr
   133f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133f8:	add	fp, sp, #28
   133fc:	sub	sp, sp, #20
   13400:	mov	r7, r0
   13404:	ldr	r0, [fp, #8]
   13408:	movw	r5, #33176	; 0x8198
   1340c:	mov	r8, r3
   13410:	mov	r9, r2
   13414:	mov	sl, r1
   13418:	movt	r5, #2
   1341c:	cmp	r0, #0
   13420:	movne	r5, r0
   13424:	bl	11044 <__errno_location@plt>
   13428:	mov	r4, r0
   1342c:	ldm	r5, {r0, r1}
   13430:	ldr	r2, [r5, #40]	; 0x28
   13434:	ldr	r3, [r5, #44]	; 0x2c
   13438:	add	r5, r5, #8
   1343c:	ldr	r6, [r4]
   13440:	stm	sp, {r0, r1, r5}
   13444:	str	r2, [sp, #12]
   13448:	str	r3, [sp, #16]
   1344c:	mov	r0, r7
   13450:	mov	r1, sl
   13454:	mov	r2, r9
   13458:	mov	r3, r8
   1345c:	bl	1346c <__assert_fail@plt+0x2320>
   13460:	str	r6, [r4]
   13464:	sub	sp, fp, #28
   13468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1346c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13470:	add	fp, sp, #28
   13474:	sub	sp, sp, #156	; 0x9c
   13478:	str	r0, [sp, #80]	; 0x50
   1347c:	ldr	r0, [fp, #12]
   13480:	mov	r6, r1
   13484:	mov	r9, r3
   13488:	str	r2, [fp, #-84]	; 0xffffffac
   1348c:	and	r1, r0, #4
   13490:	str	r1, [sp, #32]
   13494:	and	r1, r0, #1
   13498:	str	r1, [sp, #36]	; 0x24
   1349c:	ubfx	r4, r0, #1, #1
   134a0:	bl	10f9c <__ctype_get_mb_cur_max@plt>
   134a4:	str	r0, [sp, #40]	; 0x28
   134a8:	ldr	r0, [fp, #24]
   134ac:	ldr	r7, [fp, #8]
   134b0:	mov	r1, #0
   134b4:	mov	r5, #1
   134b8:	str	r1, [fp, #-56]	; 0xffffffc8
   134bc:	mov	r1, #0
   134c0:	str	r1, [sp, #60]	; 0x3c
   134c4:	str	r0, [sp, #76]	; 0x4c
   134c8:	ldr	r0, [fp, #20]
   134cc:	str	r0, [sp, #72]	; 0x48
   134d0:	mov	r0, #0
   134d4:	str	r0, [sp, #56]	; 0x38
   134d8:	mov	r0, #0
   134dc:	str	r0, [sp, #92]	; 0x5c
   134e0:	mov	r0, #0
   134e4:	str	r0, [fp, #-76]	; 0xffffffb4
   134e8:	mov	r0, #0
   134ec:	cmp	r7, #10
   134f0:	bhi	14470 <__assert_fail@plt+0x3324>
   134f4:	add	r1, pc, #28
   134f8:	mov	sl, r6
   134fc:	ldr	r6, [sp, #80]	; 0x50
   13500:	ldr	ip, [fp, #-84]	; 0xffffffac
   13504:	mov	r8, #0
   13508:	mov	r2, #1
   1350c:	mov	r3, #0
   13510:	mov	lr, r9
   13514:	ldr	pc, [r1, r7, lsl #2]
   13518:	strdeq	r3, [r1], -ip
   1351c:	andeq	r3, r1, r8, lsr #12
   13520:	andeq	r3, r1, ip, ror #11
   13524:	andeq	r3, r1, r4, ror #11
   13528:	andeq	r3, r1, ip, lsl r6
   1352c:	andeq	r3, r1, r0, ror r6
   13530:	andeq	r3, r1, ip, lsl #12
   13534:	andeq	r3, r1, ip, asr #13
   13538:	andeq	r3, r1, r4, asr #10
   1353c:	andeq	r3, r1, r4, asr #10
   13540:	andeq	r3, r1, ip, ror #10
   13544:	movw	r0, #28187	; 0x6e1b
   13548:	mov	r1, r7
   1354c:	movt	r0, #1
   13550:	bl	14e7c <__assert_fail@plt+0x3d30>
   13554:	str	r0, [sp, #72]	; 0x48
   13558:	movw	r0, #28189	; 0x6e1d
   1355c:	mov	r1, r7
   13560:	movt	r0, #1
   13564:	bl	14e7c <__assert_fail@plt+0x3d30>
   13568:	str	r0, [sp, #76]	; 0x4c
   1356c:	str	r5, [fp, #-48]	; 0xffffffd0
   13570:	mov	r8, #0
   13574:	mov	r5, r7
   13578:	tst	r4, #1
   1357c:	bne	135b4 <__assert_fail@plt+0x2468>
   13580:	ldr	r0, [sp, #72]	; 0x48
   13584:	ldrb	r0, [r0]
   13588:	cmp	r0, #0
   1358c:	beq	135b4 <__assert_fail@plt+0x2468>
   13590:	ldr	r1, [sp, #72]	; 0x48
   13594:	mov	r8, #0
   13598:	add	r1, r1, #1
   1359c:	cmp	r8, sl
   135a0:	strbcc	r0, [r6, r8]
   135a4:	ldrb	r0, [r1, r8]
   135a8:	add	r8, r8, #1
   135ac:	cmp	r0, #0
   135b0:	bne	1359c <__assert_fail@plt+0x2450>
   135b4:	ldr	r7, [sp, #76]	; 0x4c
   135b8:	mov	r0, r7
   135bc:	bl	1102c <strlen@plt>
   135c0:	str	r7, [sp, #92]	; 0x5c
   135c4:	mov	r7, r5
   135c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   135cc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   135d0:	str	r0, [fp, #-76]	; 0xffffffb4
   135d4:	mov	r2, #1
   135d8:	mov	r3, r4
   135dc:	mov	lr, r9
   135e0:	b	136cc <__assert_fail@plt+0x2580>
   135e4:	mov	r0, #1
   135e8:	b	13628 <__assert_fail@plt+0x24dc>
   135ec:	tst	r4, #1
   135f0:	bne	13628 <__assert_fail@plt+0x24dc>
   135f4:	mov	r2, r0
   135f8:	b	13650 <__assert_fail@plt+0x2504>
   135fc:	mov	r7, #0
   13600:	mov	r8, #0
   13604:	mov	r2, r0
   13608:	b	136c8 <__assert_fail@plt+0x257c>
   1360c:	mov	r0, #1
   13610:	mov	r8, #0
   13614:	mov	r7, #5
   13618:	b	13684 <__assert_fail@plt+0x2538>
   1361c:	mov	r2, #1
   13620:	tst	r4, #1
   13624:	beq	13650 <__assert_fail@plt+0x2504>
   13628:	mov	r1, #1
   1362c:	mov	r8, #0
   13630:	mov	r7, #2
   13634:	mov	r2, r0
   13638:	mov	r3, #1
   1363c:	str	r1, [fp, #-76]	; 0xffffffb4
   13640:	movw	r1, #28189	; 0x6e1d
   13644:	movt	r1, #1
   13648:	str	r1, [sp, #92]	; 0x5c
   1364c:	b	136cc <__assert_fail@plt+0x2580>
   13650:	cmp	sl, #0
   13654:	mov	r8, #1
   13658:	mov	r7, #2
   1365c:	movne	r0, #39	; 0x27
   13660:	strbne	r0, [r6]
   13664:	movw	r0, #28189	; 0x6e1d
   13668:	movt	r0, #1
   1366c:	b	136bc <__assert_fail@plt+0x2570>
   13670:	mov	r7, #5
   13674:	tst	r4, #1
   13678:	beq	136a0 <__assert_fail@plt+0x2554>
   1367c:	mov	r0, #1
   13680:	mov	r8, #0
   13684:	str	r0, [fp, #-76]	; 0xffffffb4
   13688:	movw	r0, #28185	; 0x6e19
   1368c:	mov	r2, #1
   13690:	mov	r3, #1
   13694:	movt	r0, #1
   13698:	str	r0, [sp, #92]	; 0x5c
   1369c:	b	136cc <__assert_fail@plt+0x2580>
   136a0:	cmp	sl, #0
   136a4:	mov	r8, #1
   136a8:	mov	r2, #1
   136ac:	movne	r0, #34	; 0x22
   136b0:	strbne	r0, [r6]
   136b4:	movw	r0, #28185	; 0x6e19
   136b8:	movt	r0, #1
   136bc:	str	r0, [sp, #92]	; 0x5c
   136c0:	mov	r0, #1
   136c4:	str	r0, [fp, #-76]	; 0xffffffb4
   136c8:	mov	r3, #0
   136cc:	ldr	r0, [fp, #16]
   136d0:	str	r3, [fp, #-72]	; 0xffffffb8
   136d4:	str	r7, [fp, #-64]	; 0xffffffc0
   136d8:	str	r2, [sp, #84]	; 0x54
   136dc:	cmp	r0, #0
   136e0:	movwne	r0, #1
   136e4:	and	r0, r0, r3
   136e8:	str	r0, [fp, #-88]	; 0xffffffa8
   136ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   136f0:	cmp	r0, #0
   136f4:	movwne	r0, #1
   136f8:	subs	r4, r7, #2
   136fc:	mov	r7, #0
   13700:	and	r1, r0, r3
   13704:	str	r4, [fp, #-80]	; 0xffffffb0
   13708:	and	r1, r2, r1
   1370c:	str	r1, [sp, #48]	; 0x30
   13710:	clz	r1, r4
   13714:	lsr	r1, r1, #5
   13718:	and	r1, r1, r3
   1371c:	eor	r3, r3, #1
   13720:	str	r1, [sp, #64]	; 0x40
   13724:	mov	r1, r4
   13728:	str	r3, [sp, #88]	; 0x58
   1372c:	movwne	r1, #1
   13730:	orr	r3, r1, r3
   13734:	and	r1, r1, r2
   13738:	and	r0, r0, r1
   1373c:	str	r3, [sp, #68]	; 0x44
   13740:	str	r1, [fp, #-68]	; 0xffffffbc
   13744:	str	r0, [fp, #-60]	; 0xffffffc4
   13748:	eor	r0, r2, #1
   1374c:	str	r0, [sp, #52]	; 0x34
   13750:	cmn	lr, #1
   13754:	beq	13764 <__assert_fail@plt+0x2618>
   13758:	cmp	r7, lr
   1375c:	bne	13770 <__assert_fail@plt+0x2624>
   13760:	b	14298 <__assert_fail@plt+0x314c>
   13764:	ldrb	r0, [ip, r7]
   13768:	cmp	r0, #0
   1376c:	beq	142a0 <__assert_fail@plt+0x3154>
   13770:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13774:	mov	r9, #0
   13778:	str	r5, [fp, #-48]	; 0xffffffd0
   1377c:	cmp	r0, #0
   13780:	beq	137b4 <__assert_fail@plt+0x2668>
   13784:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13788:	add	r4, r7, r0
   1378c:	cmp	r0, #2
   13790:	bcc	137ac <__assert_fail@plt+0x2660>
   13794:	cmn	lr, #1
   13798:	bne	137ac <__assert_fail@plt+0x2660>
   1379c:	mov	r0, ip
   137a0:	bl	1102c <strlen@plt>
   137a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   137a8:	mov	lr, r0
   137ac:	cmp	r4, lr
   137b0:	bls	137bc <__assert_fail@plt+0x2670>
   137b4:	mov	r0, #0
   137b8:	b	137fc <__assert_fail@plt+0x26b0>
   137bc:	ldr	r1, [sp, #92]	; 0x5c
   137c0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   137c4:	add	r0, ip, r7
   137c8:	mov	r4, lr
   137cc:	bl	10f48 <memcmp@plt>
   137d0:	ldr	r2, [sp, #88]	; 0x58
   137d4:	cmp	r0, #0
   137d8:	mov	r1, r0
   137dc:	movwne	r1, #1
   137e0:	orr	r1, r1, r2
   137e4:	tst	r1, #1
   137e8:	beq	14330 <__assert_fail@plt+0x31e4>
   137ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   137f0:	clz	r0, r0
   137f4:	mov	lr, r4
   137f8:	lsr	r0, r0, #5
   137fc:	str	r0, [fp, #-52]	; 0xffffffcc
   13800:	ldrb	r5, [ip, r7]
   13804:	cmp	r5, #126	; 0x7e
   13808:	bhi	13bc0 <__assert_fail@plt+0x2a74>
   1380c:	add	r3, pc, #16
   13810:	mov	r4, #1
   13814:	mov	r2, #110	; 0x6e
   13818:	mov	r0, #97	; 0x61
   1381c:	mov	r1, #0
   13820:	ldr	pc, [r3, r5, lsl #2]
   13824:			; <UNDEFINED> instruction: 0x00013abc
   13828:	andeq	r3, r1, r0, asr #23
   1382c:	andeq	r3, r1, r0, asr #23
   13830:	andeq	r3, r1, r0, asr #23
   13834:	andeq	r3, r1, r0, asr #23
   13838:	andeq	r3, r1, r0, asr #23
   1383c:	andeq	r3, r1, r0, asr #23
   13840:	andeq	r3, r1, r4, ror ip
   13844:	muleq	r1, ip, sl
   13848:	muleq	r1, r4, sl
   1384c:	andeq	r3, r1, r8, lsr #21
   13850:	andeq	r3, r1, r8, lsr #22
   13854:	andeq	r3, r1, ip, lsl #21
   13858:	andeq	r3, r1, r4, lsr #21
   1385c:	andeq	r3, r1, r0, asr #23
   13860:	andeq	r3, r1, r0, asr #23
   13864:	andeq	r3, r1, r0, asr #23
   13868:	andeq	r3, r1, r0, asr #23
   1386c:	andeq	r3, r1, r0, asr #23
   13870:	andeq	r3, r1, r0, asr #23
   13874:	andeq	r3, r1, r0, asr #23
   13878:	andeq	r3, r1, r0, asr #23
   1387c:	andeq	r3, r1, r0, asr #23
   13880:	andeq	r3, r1, r0, asr #23
   13884:	andeq	r3, r1, r0, asr #23
   13888:	andeq	r3, r1, r0, asr #23
   1388c:	andeq	r3, r1, r0, asr #23
   13890:	andeq	r3, r1, r0, asr #23
   13894:	andeq	r3, r1, r0, asr #23
   13898:	andeq	r3, r1, r0, asr #23
   1389c:	andeq	r3, r1, r0, asr #23
   138a0:	andeq	r3, r1, r0, asr #23
   138a4:	andeq	r3, r1, ip, lsr #24
   138a8:	andeq	r3, r1, r0, lsr ip
   138ac:	andeq	r3, r1, r0, lsr ip
   138b0:	andeq	r3, r1, r4, lsr sl
   138b4:	andeq	r3, r1, r0, lsr ip
   138b8:	andeq	r3, r1, r0, lsr #20
   138bc:	andeq	r3, r1, r0, lsr ip
   138c0:	andeq	r3, r1, r0, lsr fp
   138c4:	andeq	r3, r1, r0, lsr ip
   138c8:	andeq	r3, r1, r0, lsr ip
   138cc:	andeq	r3, r1, r0, lsr ip
   138d0:	andeq	r3, r1, r0, lsr #20
   138d4:	andeq	r3, r1, r0, lsr #20
   138d8:	andeq	r3, r1, r0, lsr #20
   138dc:	andeq	r3, r1, r0, lsr #20
   138e0:	andeq	r3, r1, r0, lsr #20
   138e4:	andeq	r3, r1, r0, lsr #20
   138e8:	andeq	r3, r1, r0, lsr #20
   138ec:	andeq	r3, r1, r0, lsr #20
   138f0:	andeq	r3, r1, r0, lsr #20
   138f4:	andeq	r3, r1, r0, lsr #20
   138f8:	andeq	r3, r1, r0, lsr #20
   138fc:	andeq	r3, r1, r0, lsr #20
   13900:	andeq	r3, r1, r0, lsr #20
   13904:	andeq	r3, r1, r0, lsr #20
   13908:	andeq	r3, r1, r0, lsr #20
   1390c:	andeq	r3, r1, r0, lsr #20
   13910:	andeq	r3, r1, r0, lsr ip
   13914:	andeq	r3, r1, r0, lsr ip
   13918:	andeq	r3, r1, r0, lsr ip
   1391c:	andeq	r3, r1, r0, lsr ip
   13920:	strdeq	r3, [r1], -ip
   13924:	andeq	r3, r1, r0, asr #23
   13928:	andeq	r3, r1, r0, lsr #20
   1392c:	andeq	r3, r1, r0, lsr #20
   13930:	andeq	r3, r1, r0, lsr #20
   13934:	andeq	r3, r1, r0, lsr #20
   13938:	andeq	r3, r1, r0, lsr #20
   1393c:	andeq	r3, r1, r0, lsr #20
   13940:	andeq	r3, r1, r0, lsr #20
   13944:	andeq	r3, r1, r0, lsr #20
   13948:	andeq	r3, r1, r0, lsr #20
   1394c:	andeq	r3, r1, r0, lsr #20
   13950:	andeq	r3, r1, r0, lsr #20
   13954:	andeq	r3, r1, r0, lsr #20
   13958:	andeq	r3, r1, r0, lsr #20
   1395c:	andeq	r3, r1, r0, lsr #20
   13960:	andeq	r3, r1, r0, lsr #20
   13964:	andeq	r3, r1, r0, lsr #20
   13968:	andeq	r3, r1, r0, lsr #20
   1396c:	andeq	r3, r1, r0, lsr #20
   13970:	andeq	r3, r1, r0, lsr #20
   13974:	andeq	r3, r1, r0, lsr #20
   13978:	andeq	r3, r1, r0, lsr #20
   1397c:	andeq	r3, r1, r0, lsr #20
   13980:	andeq	r3, r1, r0, lsr #20
   13984:	andeq	r3, r1, r0, lsr #20
   13988:	andeq	r3, r1, r0, lsr #20
   1398c:	andeq	r3, r1, r0, lsr #20
   13990:	andeq	r3, r1, r0, lsr ip
   13994:	andeq	r3, r1, r8, ror #20
   13998:	andeq	r3, r1, r0, lsr #20
   1399c:	andeq	r3, r1, r0, lsr ip
   139a0:	andeq	r3, r1, r0, lsr #20
   139a4:	andeq	r3, r1, r0, lsr ip
   139a8:	andeq	r3, r1, r0, lsr #20
   139ac:	andeq	r3, r1, r0, lsr #20
   139b0:	andeq	r3, r1, r0, lsr #20
   139b4:	andeq	r3, r1, r0, lsr #20
   139b8:	andeq	r3, r1, r0, lsr #20
   139bc:	andeq	r3, r1, r0, lsr #20
   139c0:	andeq	r3, r1, r0, lsr #20
   139c4:	andeq	r3, r1, r0, lsr #20
   139c8:	andeq	r3, r1, r0, lsr #20
   139cc:	andeq	r3, r1, r0, lsr #20
   139d0:	andeq	r3, r1, r0, lsr #20
   139d4:	andeq	r3, r1, r0, lsr #20
   139d8:	andeq	r3, r1, r0, lsr #20
   139dc:	andeq	r3, r1, r0, lsr #20
   139e0:	andeq	r3, r1, r0, lsr #20
   139e4:	andeq	r3, r1, r0, lsr #20
   139e8:	andeq	r3, r1, r0, lsr #20
   139ec:	andeq	r3, r1, r0, lsr #20
   139f0:	andeq	r3, r1, r0, lsr #20
   139f4:	andeq	r3, r1, r0, lsr #20
   139f8:	andeq	r3, r1, r0, lsr #20
   139fc:	andeq	r3, r1, r0, lsr #20
   13a00:	andeq	r3, r1, r0, lsr #20
   13a04:	andeq	r3, r1, r0, lsr #20
   13a08:	andeq	r3, r1, r0, lsr #20
   13a0c:	andeq	r3, r1, r0, lsr #20
   13a10:	andeq	r3, r1, r8, asr #20
   13a14:	andeq	r3, r1, r0, lsr ip
   13a18:	andeq	r3, r1, r8, asr #20
   13a1c:	andeq	r3, r1, r4, lsr sl
   13a20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a24:	cmp	r0, #0
   13a28:	beq	13c88 <__assert_fail@plt+0x2b3c>
   13a2c:	ldr	r0, [fp, #16]
   13a30:	b	13c8c <__assert_fail@plt+0x2b40>
   13a34:	mov	r4, #0
   13a38:	cmp	r7, #0
   13a3c:	beq	13c2c <__assert_fail@plt+0x2ae0>
   13a40:	mov	r9, #0
   13a44:	b	13a20 <__assert_fail@plt+0x28d4>
   13a48:	mov	r4, #0
   13a4c:	cmn	lr, #1
   13a50:	beq	13c10 <__assert_fail@plt+0x2ac4>
   13a54:	cmp	r7, #0
   13a58:	bne	13a40 <__assert_fail@plt+0x28f4>
   13a5c:	cmp	lr, #1
   13a60:	beq	13c2c <__assert_fail@plt+0x2ae0>
   13a64:	b	13a40 <__assert_fail@plt+0x28f4>
   13a68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a6c:	cmp	r0, #2
   13a70:	bne	13c50 <__assert_fail@plt+0x2b04>
   13a74:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13a78:	tst	r0, #1
   13a7c:	bne	1434c <__assert_fail@plt+0x3200>
   13a80:	mov	r9, #0
   13a84:	mov	r0, #92	; 0x5c
   13a88:	b	13c64 <__assert_fail@plt+0x2b18>
   13a8c:	mov	r0, #102	; 0x66
   13a90:	b	13c74 <__assert_fail@plt+0x2b28>
   13a94:	mov	r2, #116	; 0x74
   13a98:	b	13aa8 <__assert_fail@plt+0x295c>
   13a9c:	mov	r0, #98	; 0x62
   13aa0:	b	13c74 <__assert_fail@plt+0x2b28>
   13aa4:	mov	r2, #114	; 0x72
   13aa8:	ldr	r0, [sp, #68]	; 0x44
   13aac:	tst	r0, #1
   13ab0:	mov	r0, r2
   13ab4:	bne	13c74 <__assert_fail@plt+0x2b28>
   13ab8:	b	1434c <__assert_fail@plt+0x3200>
   13abc:	ldr	r0, [sp, #84]	; 0x54
   13ac0:	tst	r0, #1
   13ac4:	beq	13d64 <__assert_fail@plt+0x2c18>
   13ac8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13acc:	tst	r0, #1
   13ad0:	bne	1445c <__assert_fail@plt+0x3310>
   13ad4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ad8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13adc:	cmp	r0, #2
   13ae0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13ae4:	movwne	r0, #1
   13ae8:	orr	r0, r0, r2
   13aec:	tst	r0, #1
   13af0:	beq	14134 <__assert_fail@plt+0x2fe8>
   13af4:	mov	r0, r8
   13af8:	b	14168 <__assert_fail@plt+0x301c>
   13afc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b00:	mov	r9, #0
   13b04:	mov	r5, #63	; 0x3f
   13b08:	cmp	r0, #5
   13b0c:	beq	13f18 <__assert_fail@plt+0x2dcc>
   13b10:	cmp	r0, #2
   13b14:	bne	13fbc <__assert_fail@plt+0x2e70>
   13b18:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b1c:	tst	r0, #1
   13b20:	beq	13fc0 <__assert_fail@plt+0x2e74>
   13b24:	b	1434c <__assert_fail@plt+0x3200>
   13b28:	mov	r0, #118	; 0x76
   13b2c:	b	13c74 <__assert_fail@plt+0x2b28>
   13b30:	mov	r0, #1
   13b34:	mov	r5, #39	; 0x27
   13b38:	str	r0, [sp, #60]	; 0x3c
   13b3c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b40:	cmp	r0, #2
   13b44:	bne	13bb8 <__assert_fail@plt+0x2a6c>
   13b48:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b4c:	tst	r0, #1
   13b50:	bne	1434c <__assert_fail@plt+0x3200>
   13b54:	ldr	r2, [sp, #56]	; 0x38
   13b58:	clz	r1, sl
   13b5c:	mov	r9, #0
   13b60:	lsr	r1, r1, #5
   13b64:	cmp	r2, #0
   13b68:	mov	r0, r2
   13b6c:	movwne	r0, #1
   13b70:	orrs	r0, r0, r1
   13b74:	moveq	r2, sl
   13b78:	moveq	sl, r0
   13b7c:	cmp	r8, sl
   13b80:	str	r2, [sp, #56]	; 0x38
   13b84:	movcc	r0, #39	; 0x27
   13b88:	strbcc	r0, [r6, r8]
   13b8c:	add	r0, r8, #1
   13b90:	cmp	r0, sl
   13b94:	movcc	r1, #92	; 0x5c
   13b98:	strbcc	r1, [r6, r0]
   13b9c:	add	r0, r8, #2
   13ba0:	add	r8, r8, #3
   13ba4:	cmp	r0, sl
   13ba8:	movcc	r1, #39	; 0x27
   13bac:	strbcc	r1, [r6, r0]
   13bb0:	mov	r0, #0
   13bb4:	str	r0, [fp, #-56]	; 0xffffffc8
   13bb8:	mov	r4, #1
   13bbc:	b	13a20 <__assert_fail@plt+0x28d4>
   13bc0:	ldr	r0, [sp, #40]	; 0x28
   13bc4:	cmp	r0, #1
   13bc8:	bne	13d90 <__assert_fail@plt+0x2c44>
   13bcc:	str	lr, [sp, #28]
   13bd0:	bl	11014 <__ctype_b_loc@plt>
   13bd4:	ldr	r0, [r0]
   13bd8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13bdc:	mov	r1, #1
   13be0:	add	r0, r0, r5, lsl #1
   13be4:	ldrb	r0, [r0, #1]
   13be8:	ubfx	r4, r0, #6, #1
   13bec:	ldr	r0, [sp, #52]	; 0x34
   13bf0:	mov	r2, r1
   13bf4:	cmp	r1, #1
   13bf8:	orr	r0, r4, r0
   13bfc:	bhi	13fc8 <__assert_fail@plt+0x2e7c>
   13c00:	tst	r0, #1
   13c04:	beq	13fc8 <__assert_fail@plt+0x2e7c>
   13c08:	ldr	lr, [sp, #28]
   13c0c:	b	13a20 <__assert_fail@plt+0x28d4>
   13c10:	cmp	r7, #0
   13c14:	ldrbeq	r0, [ip, #1]
   13c18:	cmpeq	r0, #0
   13c1c:	beq	13c2c <__assert_fail@plt+0x2ae0>
   13c20:	mvn	lr, #0
   13c24:	mov	r9, #0
   13c28:	b	13a20 <__assert_fail@plt+0x28d4>
   13c2c:	mov	r1, #1
   13c30:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c34:	cmp	r0, #2
   13c38:	bne	13c48 <__assert_fail@plt+0x2afc>
   13c3c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c40:	tst	r0, #1
   13c44:	bne	1434c <__assert_fail@plt+0x3200>
   13c48:	mov	r4, r1
   13c4c:	b	13a20 <__assert_fail@plt+0x28d4>
   13c50:	ldr	r1, [sp, #48]	; 0x30
   13c54:	mov	r9, #0
   13c58:	mov	r0, #92	; 0x5c
   13c5c:	cmp	r1, #0
   13c60:	beq	13c74 <__assert_fail@plt+0x2b28>
   13c64:	mov	r4, #0
   13c68:	cmp	r9, #0
   13c6c:	beq	14200 <__assert_fail@plt+0x30b4>
   13c70:	b	1423c <__assert_fail@plt+0x30f0>
   13c74:	ldr	r1, [sp, #84]	; 0x54
   13c78:	mov	r4, #0
   13c7c:	mov	r9, #0
   13c80:	tst	r1, #1
   13c84:	bne	13cc4 <__assert_fail@plt+0x2b78>
   13c88:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13c8c:	cmp	r0, #0
   13c90:	mov	r0, r5
   13c94:	beq	13cb8 <__assert_fail@plt+0x2b6c>
   13c98:	ldr	r1, [fp, #16]
   13c9c:	ubfx	r0, r5, #5, #3
   13ca0:	mov	r2, #1
   13ca4:	ldr	r0, [r1, r0, lsl #2]
   13ca8:	and	r1, r5, #31
   13cac:	tst	r0, r2, lsl r1
   13cb0:	mov	r0, r5
   13cb4:	bne	13cc4 <__assert_fail@plt+0x2b78>
   13cb8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13cbc:	cmp	r1, #0
   13cc0:	beq	141f8 <__assert_fail@plt+0x30ac>
   13cc4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13cc8:	tst	r1, #1
   13ccc:	bne	14324 <__assert_fail@plt+0x31d8>
   13cd0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13cd4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13cd8:	cmp	r1, #2
   13cdc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13ce0:	movwne	r1, #1
   13ce4:	orr	r1, r1, r2
   13ce8:	tst	r1, #1
   13cec:	beq	13cf8 <__assert_fail@plt+0x2bac>
   13cf0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13cf4:	b	13d34 <__assert_fail@plt+0x2be8>
   13cf8:	cmp	r8, sl
   13cfc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13d00:	movcc	r1, #39	; 0x27
   13d04:	strbcc	r1, [r6, r8]
   13d08:	add	r1, r8, #1
   13d0c:	cmp	r1, sl
   13d10:	movcc	r2, #36	; 0x24
   13d14:	strbcc	r2, [r6, r1]
   13d18:	add	r1, r8, #2
   13d1c:	add	r8, r8, #3
   13d20:	cmp	r1, sl
   13d24:	movcc	r2, #39	; 0x27
   13d28:	strbcc	r2, [r6, r1]
   13d2c:	mov	r1, #1
   13d30:	str	r1, [fp, #-56]	; 0xffffffc8
   13d34:	cmp	r8, sl
   13d38:	movcc	r1, #92	; 0x5c
   13d3c:	strbcc	r1, [r6, r8]
   13d40:	add	r8, r8, #1
   13d44:	cmp	r8, sl
   13d48:	and	r5, r5, r4
   13d4c:	add	r7, r7, #1
   13d50:	strbcc	r0, [r6, r8]
   13d54:	add	r8, r8, #1
   13d58:	cmn	lr, #1
   13d5c:	bne	13758 <__assert_fail@plt+0x260c>
   13d60:	b	13764 <__assert_fail@plt+0x2618>
   13d64:	ldr	r0, [sp, #36]	; 0x24
   13d68:	mov	r4, #0
   13d6c:	mov	r9, #0
   13d70:	mov	r5, #0
   13d74:	cmp	r0, #0
   13d78:	beq	13c88 <__assert_fail@plt+0x2b3c>
   13d7c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13d80:	add	r7, r7, #1
   13d84:	cmn	lr, #1
   13d88:	bne	13758 <__assert_fail@plt+0x260c>
   13d8c:	b	13764 <__assert_fail@plt+0x2618>
   13d90:	mov	r0, #0
   13d94:	cmn	lr, #1
   13d98:	str	r0, [fp, #-36]	; 0xffffffdc
   13d9c:	str	r0, [fp, #-40]	; 0xffffffd8
   13da0:	bne	13db4 <__assert_fail@plt+0x2c68>
   13da4:	mov	r0, ip
   13da8:	bl	1102c <strlen@plt>
   13dac:	ldr	ip, [fp, #-84]	; 0xffffffac
   13db0:	mov	lr, r0
   13db4:	add	r0, ip, r7
   13db8:	mov	r4, #1
   13dbc:	mov	r6, #0
   13dc0:	str	lr, [sp, #28]
   13dc4:	str	r0, [sp, #24]
   13dc8:	sub	r0, fp, #40	; 0x28
   13dcc:	mov	r3, r0
   13dd0:	str	r6, [sp, #44]	; 0x2c
   13dd4:	add	r6, r6, r7
   13dd8:	sub	r0, fp, #44	; 0x2c
   13ddc:	add	r1, ip, r6
   13de0:	sub	r2, lr, r6
   13de4:	bl	15f04 <__assert_fail@plt+0x4db8>
   13de8:	cmp	r0, #0
   13dec:	beq	14284 <__assert_fail@plt+0x3138>
   13df0:	cmn	r0, #1
   13df4:	beq	14244 <__assert_fail@plt+0x30f8>
   13df8:	ldr	lr, [sp, #28]
   13dfc:	cmn	r0, #2
   13e00:	beq	1424c <__assert_fail@plt+0x3100>
   13e04:	ldr	r2, [sp, #64]	; 0x40
   13e08:	cmp	r0, #2
   13e0c:	mov	r1, #0
   13e10:	movwcc	r1, #1
   13e14:	eor	r2, r2, #1
   13e18:	orrs	r1, r2, r1
   13e1c:	bne	13edc <__assert_fail@plt+0x2d90>
   13e20:	ldr	r1, [sp, #44]	; 0x2c
   13e24:	ldr	r2, [sp, #24]
   13e28:	add	r1, r2, r1
   13e2c:	mov	r2, #1
   13e30:	ldrb	r3, [r1, r2]
   13e34:	sub	r3, r3, #91	; 0x5b
   13e38:	cmp	r3, #33	; 0x21
   13e3c:	bhi	13ed0 <__assert_fail@plt+0x2d84>
   13e40:	add	r6, pc, #0
   13e44:	ldr	pc, [r6, r3, lsl #2]
   13e48:	andeq	r4, r1, r4, asr #6
   13e4c:	andeq	r4, r1, r4, asr #6
   13e50:	ldrdeq	r3, [r1], -r0
   13e54:	andeq	r4, r1, r4, asr #6
   13e58:	ldrdeq	r3, [r1], -r0
   13e5c:	andeq	r4, r1, r4, asr #6
   13e60:	ldrdeq	r3, [r1], -r0
   13e64:	ldrdeq	r3, [r1], -r0
   13e68:	ldrdeq	r3, [r1], -r0
   13e6c:	ldrdeq	r3, [r1], -r0
   13e70:	ldrdeq	r3, [r1], -r0
   13e74:	ldrdeq	r3, [r1], -r0
   13e78:	ldrdeq	r3, [r1], -r0
   13e7c:	ldrdeq	r3, [r1], -r0
   13e80:	ldrdeq	r3, [r1], -r0
   13e84:	ldrdeq	r3, [r1], -r0
   13e88:	ldrdeq	r3, [r1], -r0
   13e8c:	ldrdeq	r3, [r1], -r0
   13e90:	ldrdeq	r3, [r1], -r0
   13e94:	ldrdeq	r3, [r1], -r0
   13e98:	ldrdeq	r3, [r1], -r0
   13e9c:	ldrdeq	r3, [r1], -r0
   13ea0:	ldrdeq	r3, [r1], -r0
   13ea4:	ldrdeq	r3, [r1], -r0
   13ea8:	ldrdeq	r3, [r1], -r0
   13eac:	ldrdeq	r3, [r1], -r0
   13eb0:	ldrdeq	r3, [r1], -r0
   13eb4:	ldrdeq	r3, [r1], -r0
   13eb8:	ldrdeq	r3, [r1], -r0
   13ebc:	ldrdeq	r3, [r1], -r0
   13ec0:	ldrdeq	r3, [r1], -r0
   13ec4:	ldrdeq	r3, [r1], -r0
   13ec8:	ldrdeq	r3, [r1], -r0
   13ecc:	andeq	r4, r1, r4, asr #6
   13ed0:	add	r2, r2, #1
   13ed4:	cmp	r2, r0
   13ed8:	bcc	13e30 <__assert_fail@plt+0x2ce4>
   13edc:	ldr	r6, [sp, #44]	; 0x2c
   13ee0:	add	r6, r0, r6
   13ee4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13ee8:	bl	10f78 <iswprint@plt>
   13eec:	cmp	r0, #0
   13ef0:	movwne	r0, #1
   13ef4:	and	r4, r4, r0
   13ef8:	sub	r0, fp, #40	; 0x28
   13efc:	bl	10f30 <mbsinit@plt>
   13f00:	ldr	lr, [sp, #28]
   13f04:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f08:	sub	r3, fp, #40	; 0x28
   13f0c:	cmp	r0, #0
   13f10:	beq	13dd0 <__assert_fail@plt+0x2c84>
   13f14:	b	1428c <__assert_fail@plt+0x3140>
   13f18:	ldr	r0, [sp, #32]
   13f1c:	cmp	r0, #0
   13f20:	beq	13fbc <__assert_fail@plt+0x2e70>
   13f24:	add	r0, r7, #2
   13f28:	cmp	r0, lr
   13f2c:	bcs	13fbc <__assert_fail@plt+0x2e70>
   13f30:	add	r1, ip, r7
   13f34:	ldrb	r1, [r1, #1]
   13f38:	cmp	r1, #63	; 0x3f
   13f3c:	bne	13fbc <__assert_fail@plt+0x2e70>
   13f40:	ldrb	r5, [ip, r0]
   13f44:	sub	r1, r5, #33	; 0x21
   13f48:	cmp	r1, #29
   13f4c:	bhi	13fbc <__assert_fail@plt+0x2e70>
   13f50:	movw	r3, #20929	; 0x51c1
   13f54:	mov	r2, #1
   13f58:	movt	r3, #14336	; 0x3800
   13f5c:	tst	r3, r2, lsl r1
   13f60:	beq	13fbc <__assert_fail@plt+0x2e70>
   13f64:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13f68:	tst	r1, #1
   13f6c:	bne	14464 <__assert_fail@plt+0x3318>
   13f70:	cmp	r8, sl
   13f74:	mov	r7, r0
   13f78:	mov	r4, #0
   13f7c:	movcc	r1, #63	; 0x3f
   13f80:	strbcc	r1, [r6, r8]
   13f84:	add	r1, r8, #1
   13f88:	cmp	r1, sl
   13f8c:	movcc	r2, #34	; 0x22
   13f90:	strbcc	r2, [r6, r1]
   13f94:	add	r1, r8, #2
   13f98:	cmp	r1, sl
   13f9c:	movcc	r2, #34	; 0x22
   13fa0:	strbcc	r2, [r6, r1]
   13fa4:	add	r1, r8, #3
   13fa8:	add	r8, r8, #4
   13fac:	cmp	r1, sl
   13fb0:	movcc	r2, #63	; 0x3f
   13fb4:	strbcc	r2, [r6, r1]
   13fb8:	b	13a20 <__assert_fail@plt+0x28d4>
   13fbc:	mov	r5, #63	; 0x3f
   13fc0:	mov	r4, #0
   13fc4:	b	13a20 <__assert_fail@plt+0x28d4>
   13fc8:	add	r1, r2, r7
   13fcc:	ldr	lr, [sp, #28]
   13fd0:	mov	r3, #0
   13fd4:	str	r1, [sp, #44]	; 0x2c
   13fd8:	add	r1, r7, #1
   13fdc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13fe0:	tst	r0, #1
   13fe4:	bne	140b8 <__assert_fail@plt+0x2f6c>
   13fe8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13fec:	tst	r2, #1
   13ff0:	bne	143ac <__assert_fail@plt+0x3260>
   13ff4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13ff8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13ffc:	cmp	r7, #2
   14000:	movwne	r3, #1
   14004:	orr	r3, r3, r2
   14008:	tst	r3, #1
   1400c:	bne	14048 <__assert_fail@plt+0x2efc>
   14010:	cmp	r8, sl
   14014:	add	r3, r8, #1
   14018:	movcc	r2, #39	; 0x27
   1401c:	strbcc	r2, [r6, r8]
   14020:	cmp	r3, sl
   14024:	movcc	r2, #36	; 0x24
   14028:	strbcc	r2, [r6, r3]
   1402c:	add	r3, r8, #2
   14030:	add	r8, r8, #3
   14034:	cmp	r3, sl
   14038:	movcc	r2, #39	; 0x27
   1403c:	strbcc	r2, [r6, r3]
   14040:	mov	r2, #1
   14044:	str	r2, [fp, #-56]	; 0xffffffc8
   14048:	cmp	r8, sl
   1404c:	movcc	r3, #92	; 0x5c
   14050:	strbcc	r3, [r6, r8]
   14054:	add	r3, r8, #1
   14058:	cmp	r3, sl
   1405c:	andcc	r7, r5, #192	; 0xc0
   14060:	movcc	r2, #48	; 0x30
   14064:	orrcc	r7, r2, r7, lsr #6
   14068:	strbcc	r7, [r6, r3]
   1406c:	add	r3, r8, #2
   14070:	add	r8, r8, #3
   14074:	cmp	r3, sl
   14078:	lsrcc	r7, r5, #3
   1407c:	movcc	r2, #6
   14080:	bficc	r7, r2, #3, #29
   14084:	mov	r2, #6
   14088:	strbcc	r7, [r6, r3]
   1408c:	bfi	r5, r2, #3, #29
   14090:	mov	r3, #1
   14094:	b	140dc <__assert_fail@plt+0x2f90>
   14098:	cmp	r8, sl
   1409c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   140a0:	strbcc	r5, [r6, r8]
   140a4:	add	r8, r8, #1
   140a8:	ldrb	r5, [ip, r1]
   140ac:	add	r1, r1, #1
   140b0:	tst	r0, #1
   140b4:	beq	13fe8 <__assert_fail@plt+0x2e9c>
   140b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   140bc:	tst	r2, #1
   140c0:	beq	140d4 <__assert_fail@plt+0x2f88>
   140c4:	cmp	r8, sl
   140c8:	movcc	r7, #92	; 0x5c
   140cc:	strbcc	r7, [r6, r8]
   140d0:	add	r8, r8, #1
   140d4:	mov	r2, #0
   140d8:	str	r2, [fp, #-52]	; 0xffffffcc
   140dc:	ldr	r2, [sp, #44]	; 0x2c
   140e0:	and	r9, r3, #1
   140e4:	cmp	r2, r1
   140e8:	bls	141e8 <__assert_fail@plt+0x309c>
   140ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
   140f0:	cmp	r9, #0
   140f4:	movwne	r9, #1
   140f8:	mvn	r7, r2
   140fc:	orr	r7, r7, r9
   14100:	tst	r7, #1
   14104:	bne	14098 <__assert_fail@plt+0x2f4c>
   14108:	cmp	r8, sl
   1410c:	movcc	r7, #39	; 0x27
   14110:	strbcc	r7, [r6, r8]
   14114:	add	r7, r8, #1
   14118:	add	r8, r8, #2
   1411c:	cmp	r7, sl
   14120:	movcc	r2, #39	; 0x27
   14124:	strbcc	r2, [r6, r7]
   14128:	mov	r2, #0
   1412c:	str	r2, [fp, #-56]	; 0xffffffc8
   14130:	b	14098 <__assert_fail@plt+0x2f4c>
   14134:	cmp	r8, sl
   14138:	mov	r2, #1
   1413c:	movcc	r0, #39	; 0x27
   14140:	strbcc	r0, [r6, r8]
   14144:	add	r0, r8, #1
   14148:	cmp	r0, sl
   1414c:	movcc	r1, #36	; 0x24
   14150:	strbcc	r1, [r6, r0]
   14154:	add	r0, r8, #2
   14158:	cmp	r0, sl
   1415c:	movcc	r1, #39	; 0x27
   14160:	strbcc	r1, [r6, r0]
   14164:	add	r0, r8, #3
   14168:	cmp	r0, sl
   1416c:	add	r8, r0, #1
   14170:	str	r2, [fp, #-56]	; 0xffffffc8
   14174:	movcc	r1, #92	; 0x5c
   14178:	strbcc	r1, [r6, r0]
   1417c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14180:	cmp	r1, #2
   14184:	beq	141d8 <__assert_fail@plt+0x308c>
   14188:	add	r1, r7, #1
   1418c:	mov	r4, #0
   14190:	mov	r9, #1
   14194:	mov	r5, #48	; 0x30
   14198:	cmp	r1, lr
   1419c:	bcs	13a20 <__assert_fail@plt+0x28d4>
   141a0:	ldrb	r1, [ip, r1]
   141a4:	sub	r1, r1, #48	; 0x30
   141a8:	uxtb	r1, r1
   141ac:	cmp	r1, #9
   141b0:	bhi	13a20 <__assert_fail@plt+0x28d4>
   141b4:	cmp	r8, sl
   141b8:	movcc	r1, #48	; 0x30
   141bc:	strbcc	r1, [r6, r8]
   141c0:	add	r1, r0, #2
   141c4:	add	r8, r0, #3
   141c8:	cmp	r1, sl
   141cc:	movcc	r2, #48	; 0x30
   141d0:	strbcc	r2, [r6, r1]
   141d4:	b	13a20 <__assert_fail@plt+0x28d4>
   141d8:	mov	r0, #48	; 0x30
   141dc:	mov	r9, #1
   141e0:	mov	r4, #0
   141e4:	b	13cb8 <__assert_fail@plt+0x2b6c>
   141e8:	cmp	r9, #0
   141ec:	sub	r7, r1, #1
   141f0:	mov	r0, r5
   141f4:	movwne	r9, #1
   141f8:	cmp	r9, #0
   141fc:	bne	1423c <__assert_fail@plt+0x30f0>
   14200:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14204:	tst	r1, #1
   14208:	beq	1423c <__assert_fail@plt+0x30f0>
   1420c:	cmp	r8, sl
   14210:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14214:	movcc	r1, #39	; 0x27
   14218:	strbcc	r1, [r6, r8]
   1421c:	add	r1, r8, #1
   14220:	add	r8, r8, #2
   14224:	cmp	r1, sl
   14228:	movcc	r2, #39	; 0x27
   1422c:	strbcc	r2, [r6, r1]
   14230:	mov	r1, #0
   14234:	str	r1, [fp, #-56]	; 0xffffffc8
   14238:	b	13d44 <__assert_fail@plt+0x2bf8>
   1423c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14240:	b	13d44 <__assert_fail@plt+0x2bf8>
   14244:	mov	r4, #0
   14248:	b	14284 <__assert_fail@plt+0x3138>
   1424c:	mov	r4, #0
   14250:	cmp	lr, r6
   14254:	bls	14284 <__assert_fail@plt+0x3138>
   14258:	ldr	ip, [fp, #-84]	; 0xffffffac
   1425c:	ldr	r6, [sp, #44]	; 0x2c
   14260:	ldr	r0, [sp, #24]
   14264:	ldrb	r0, [r0, r6]
   14268:	cmp	r0, #0
   1426c:	beq	1428c <__assert_fail@plt+0x3140>
   14270:	add	r6, r6, #1
   14274:	add	r0, r7, r6
   14278:	cmp	r0, lr
   1427c:	bcc	14260 <__assert_fail@plt+0x3114>
   14280:	b	1428c <__assert_fail@plt+0x3140>
   14284:	ldr	ip, [fp, #-84]	; 0xffffffac
   14288:	ldr	r6, [sp, #44]	; 0x2c
   1428c:	mov	r1, r6
   14290:	ldr	r6, [sp, #80]	; 0x50
   14294:	b	13bec <__assert_fail@plt+0x2aa0>
   14298:	mov	lr, r7
   1429c:	b	142a4 <__assert_fail@plt+0x3158>
   142a0:	mvn	lr, #0
   142a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   142a8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   142ac:	eor	r0, r7, #2
   142b0:	orr	r0, r0, r8
   142b4:	clz	r0, r0
   142b8:	lsr	r0, r0, #5
   142bc:	tst	r1, r0
   142c0:	bne	1434c <__assert_fail@plt+0x3200>
   142c4:	mov	r0, r1
   142c8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   142cc:	cmp	r7, #2
   142d0:	movwne	r1, #1
   142d4:	orr	r0, r0, r1
   142d8:	tst	r0, #1
   142dc:	ldreq	r0, [sp, #60]	; 0x3c
   142e0:	eoreq	r0, r0, #1
   142e4:	tsteq	r0, #1
   142e8:	bne	143f8 <__assert_fail@plt+0x32ac>
   142ec:	mov	r9, lr
   142f0:	tst	r5, #1
   142f4:	bne	143b4 <__assert_fail@plt+0x3268>
   142f8:	ldr	r6, [sp, #56]	; 0x38
   142fc:	mov	r4, #0
   14300:	cmp	r6, #0
   14304:	beq	143f0 <__assert_fail@plt+0x32a4>
   14308:	ldr	r0, [sp, #84]	; 0x54
   1430c:	mov	r1, #0
   14310:	cmp	sl, #0
   14314:	mov	r5, #0
   14318:	str	r1, [fp, #-72]	; 0xffffffb8
   1431c:	beq	134ec <__assert_fail@plt+0x23a0>
   14320:	b	143f8 <__assert_fail@plt+0x32ac>
   14324:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14328:	ldr	r2, [sp, #84]	; 0x54
   1432c:	b	14354 <__assert_fail@plt+0x3208>
   14330:	ldr	ip, [fp, #-84]	; 0xffffffac
   14334:	mov	r2, #1
   14338:	mov	lr, r4
   1433c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14340:	b	14354 <__assert_fail@plt+0x3208>
   14344:	ldr	r6, [sp, #80]	; 0x50
   14348:	ldr	ip, [fp, #-84]	; 0xffffffac
   1434c:	ldr	r2, [sp, #84]	; 0x54
   14350:	mov	r7, #2
   14354:	mov	r0, #0
   14358:	ldr	r1, [fp, #12]
   1435c:	tst	r2, #1
   14360:	mov	r2, r7
   14364:	mov	r3, lr
   14368:	str	r0, [sp, #8]
   1436c:	ldr	r0, [sp, #72]	; 0x48
   14370:	movwne	r2, #4
   14374:	cmp	r7, #2
   14378:	movne	r2, r7
   1437c:	str	r2, [sp]
   14380:	mov	r2, ip
   14384:	bic	r1, r1, #2
   14388:	str	r0, [sp, #12]
   1438c:	ldr	r0, [sp, #76]	; 0x4c
   14390:	str	r1, [sp, #4]
   14394:	mov	r1, sl
   14398:	str	r0, [sp, #16]
   1439c:	mov	r0, r6
   143a0:	bl	1346c <__assert_fail@plt+0x2320>
   143a4:	mov	r8, r0
   143a8:	b	14450 <__assert_fail@plt+0x3304>
   143ac:	ldr	r2, [sp, #84]	; 0x54
   143b0:	b	14354 <__assert_fail@plt+0x3208>
   143b4:	mov	r0, #5
   143b8:	ldr	r1, [sp, #56]	; 0x38
   143bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   143c0:	mov	r3, r9
   143c4:	str	r0, [sp]
   143c8:	ldr	r0, [fp, #12]
   143cc:	str	r0, [sp, #4]
   143d0:	ldr	r0, [fp, #16]
   143d4:	str	r0, [sp, #8]
   143d8:	ldr	r0, [sp, #72]	; 0x48
   143dc:	str	r0, [sp, #12]
   143e0:	ldr	r0, [sp, #76]	; 0x4c
   143e4:	str	r0, [sp, #16]
   143e8:	ldr	r0, [sp, #80]	; 0x50
   143ec:	b	143a0 <__assert_fail@plt+0x3254>
   143f0:	mov	r0, #0
   143f4:	str	r0, [fp, #-72]	; 0xffffffb8
   143f8:	ldr	r1, [sp, #92]	; 0x5c
   143fc:	cmp	r1, #0
   14400:	beq	14440 <__assert_fail@plt+0x32f4>
   14404:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14408:	ldr	r2, [sp, #80]	; 0x50
   1440c:	tst	r0, #1
   14410:	bne	14444 <__assert_fail@plt+0x32f8>
   14414:	ldrb	r0, [r1]
   14418:	cmp	r0, #0
   1441c:	beq	14444 <__assert_fail@plt+0x32f8>
   14420:	add	r1, r1, #1
   14424:	cmp	r8, sl
   14428:	strbcc	r0, [r2, r8]
   1442c:	add	r8, r8, #1
   14430:	ldrb	r0, [r1], #1
   14434:	cmp	r0, #0
   14438:	bne	14424 <__assert_fail@plt+0x32d8>
   1443c:	b	14444 <__assert_fail@plt+0x32f8>
   14440:	ldr	r2, [sp, #80]	; 0x50
   14444:	cmp	r8, sl
   14448:	movcc	r0, #0
   1444c:	strbcc	r0, [r2, r8]
   14450:	mov	r0, r8
   14454:	sub	sp, fp, #28
   14458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1445c:	mov	r2, #1
   14460:	b	1433c <__assert_fail@plt+0x31f0>
   14464:	ldr	r2, [sp, #84]	; 0x54
   14468:	mov	r7, #5
   1446c:	b	14354 <__assert_fail@plt+0x3208>
   14470:	bl	11134 <abort@plt>
   14474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14478:	add	fp, sp, #28
   1447c:	sub	sp, sp, #28
   14480:	movw	r5, #33176	; 0x8198
   14484:	cmp	r2, #0
   14488:	mov	r4, r1
   1448c:	mov	r7, r0
   14490:	str	r0, [sp, #20]
   14494:	movt	r5, #2
   14498:	movne	r5, r2
   1449c:	bl	11044 <__errno_location@plt>
   144a0:	mov	sl, r0
   144a4:	ldm	r5, {r0, r1}
   144a8:	ldr	r2, [r5, #40]	; 0x28
   144ac:	ldr	r3, [r5, #44]	; 0x2c
   144b0:	add	r9, r5, #8
   144b4:	ldr	r6, [sl]
   144b8:	orr	r8, r1, #1
   144bc:	mov	r1, #0
   144c0:	str	r6, [sp, #24]
   144c4:	stm	sp, {r0, r8, r9}
   144c8:	str	r2, [sp, #12]
   144cc:	str	r3, [sp, #16]
   144d0:	mov	r0, #0
   144d4:	mov	r2, r7
   144d8:	mov	r3, r4
   144dc:	mov	r6, r4
   144e0:	bl	1346c <__assert_fail@plt+0x2320>
   144e4:	add	r7, r0, #1
   144e8:	mov	r0, r7
   144ec:	bl	15684 <__assert_fail@plt+0x4538>
   144f0:	mov	r4, r0
   144f4:	ldr	r0, [r5]
   144f8:	ldr	r2, [r5, #44]	; 0x2c
   144fc:	ldr	r1, [r5, #40]	; 0x28
   14500:	mov	r3, r6
   14504:	stm	sp, {r0, r8, r9}
   14508:	str	r2, [sp, #16]
   1450c:	str	r1, [sp, #12]
   14510:	mov	r0, r4
   14514:	mov	r1, r7
   14518:	ldr	r2, [sp, #20]
   1451c:	bl	1346c <__assert_fail@plt+0x2320>
   14520:	ldr	r0, [sp, #24]
   14524:	str	r0, [sl]
   14528:	mov	r0, r4
   1452c:	sub	sp, fp, #28
   14530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14538:	add	fp, sp, #28
   1453c:	sub	sp, sp, #36	; 0x24
   14540:	movw	r8, #33176	; 0x8198
   14544:	cmp	r3, #0
   14548:	mov	r4, r2
   1454c:	str	r2, [sp, #24]
   14550:	mov	r5, r1
   14554:	mov	r6, r0
   14558:	str	r0, [sp, #20]
   1455c:	movt	r8, #2
   14560:	movne	r8, r3
   14564:	bl	11044 <__errno_location@plt>
   14568:	str	r0, [sp, #28]
   1456c:	cmp	r4, #0
   14570:	add	sl, r8, #8
   14574:	ldm	r8, {r3, r9}
   14578:	ldr	r7, [r0]
   1457c:	ldr	r1, [r8, #40]	; 0x28
   14580:	ldr	r2, [r8, #44]	; 0x2c
   14584:	mov	r0, #0
   14588:	orreq	r9, r9, #1
   1458c:	str	r7, [sp, #32]
   14590:	mov	r7, r5
   14594:	stm	sp, {r3, r9, sl}
   14598:	str	r1, [sp, #12]
   1459c:	str	r2, [sp, #16]
   145a0:	mov	r1, #0
   145a4:	mov	r2, r6
   145a8:	mov	r3, r5
   145ac:	bl	1346c <__assert_fail@plt+0x2320>
   145b0:	add	r4, r0, #1
   145b4:	mov	r5, r0
   145b8:	mov	r0, r4
   145bc:	bl	15684 <__assert_fail@plt+0x4538>
   145c0:	mov	r6, r0
   145c4:	ldr	r0, [r8]
   145c8:	ldr	r2, [r8, #44]	; 0x2c
   145cc:	ldr	r1, [r8, #40]	; 0x28
   145d0:	mov	r3, r7
   145d4:	stm	sp, {r0, r9, sl}
   145d8:	str	r2, [sp, #16]
   145dc:	str	r1, [sp, #12]
   145e0:	mov	r0, r6
   145e4:	mov	r1, r4
   145e8:	ldr	r2, [sp, #20]
   145ec:	bl	1346c <__assert_fail@plt+0x2320>
   145f0:	ldr	r0, [sp, #24]
   145f4:	ldr	r1, [sp, #32]
   145f8:	ldr	r2, [sp, #28]
   145fc:	cmp	r0, #0
   14600:	str	r1, [r2]
   14604:	strne	r5, [r0]
   14608:	mov	r0, r6
   1460c:	sub	sp, fp, #28
   14610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14614:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14618:	add	fp, sp, #24
   1461c:	movw	r5, #33028	; 0x8104
   14620:	movw	r8, #33024	; 0x8100
   14624:	movt	r5, #2
   14628:	movt	r8, #2
   1462c:	ldr	r0, [r5]
   14630:	ldr	r4, [r8]
   14634:	cmp	r0, #2
   14638:	blt	14664 <__assert_fail@plt+0x3518>
   1463c:	add	r7, r4, #12
   14640:	mov	r6, #0
   14644:	ldr	r0, [r7, r6, lsl #3]
   14648:	bl	12d7c <__assert_fail@plt+0x1c30>
   1464c:	ldr	r1, [r5]
   14650:	add	r2, r6, #2
   14654:	add	r0, r6, #1
   14658:	mov	r6, r0
   1465c:	cmp	r2, r1
   14660:	blt	14644 <__assert_fail@plt+0x34f8>
   14664:	ldr	r0, [r4, #4]
   14668:	movw	r7, #33224	; 0x81c8
   1466c:	movt	r7, #2
   14670:	cmp	r0, r7
   14674:	beq	1468c <__assert_fail@plt+0x3540>
   14678:	bl	12d7c <__assert_fail@plt+0x1c30>
   1467c:	movw	r0, #33032	; 0x8108
   14680:	mov	r6, #256	; 0x100
   14684:	movt	r0, #2
   14688:	strd	r6, [r0]
   1468c:	movw	r6, #33032	; 0x8108
   14690:	movt	r6, #2
   14694:	cmp	r4, r6
   14698:	beq	146a8 <__assert_fail@plt+0x355c>
   1469c:	mov	r0, r4
   146a0:	bl	12d7c <__assert_fail@plt+0x1c30>
   146a4:	str	r6, [r8]
   146a8:	mov	r0, #1
   146ac:	str	r0, [r5]
   146b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146b4:	movw	r3, #33176	; 0x8198
   146b8:	mvn	r2, #0
   146bc:	movt	r3, #2
   146c0:	b	146c4 <__assert_fail@plt+0x3578>
   146c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c8:	add	fp, sp, #28
   146cc:	sub	sp, sp, #44	; 0x2c
   146d0:	mov	r7, r3
   146d4:	str	r2, [sp, #36]	; 0x24
   146d8:	str	r1, [sp, #32]
   146dc:	mov	r5, r0
   146e0:	bl	11044 <__errno_location@plt>
   146e4:	cmp	r5, #0
   146e8:	blt	14854 <__assert_fail@plt+0x3708>
   146ec:	cmn	r5, #-2147483647	; 0x80000001
   146f0:	beq	14854 <__assert_fail@plt+0x3708>
   146f4:	movw	r8, #33028	; 0x8104
   146f8:	movw	r4, #33024	; 0x8100
   146fc:	str	r0, [sp, #28]
   14700:	ldr	r0, [r0]
   14704:	movt	r8, #2
   14708:	movt	r4, #2
   1470c:	ldr	r1, [r8]
   14710:	ldr	r6, [r4]
   14714:	str	r0, [sp, #24]
   14718:	cmp	r1, r5
   1471c:	ble	14728 <__assert_fail@plt+0x35dc>
   14720:	mov	sl, r6
   14724:	b	14790 <__assert_fail@plt+0x3644>
   14728:	movw	r9, #33032	; 0x8108
   1472c:	mov	r0, #8
   14730:	add	r2, r5, #1
   14734:	str	r1, [fp, #-32]	; 0xffffffe0
   14738:	mvn	r3, #-2147483648	; 0x80000000
   1473c:	movt	r9, #2
   14740:	str	r0, [sp]
   14744:	sub	r2, r2, r1
   14748:	sub	r1, fp, #32
   1474c:	subs	r0, r6, r9
   14750:	movne	r0, r6
   14754:	bl	15884 <__assert_fail@plt+0x4738>
   14758:	cmp	r6, r9
   1475c:	mov	sl, r0
   14760:	str	r0, [r4]
   14764:	ldrdeq	r0, [r9]
   14768:	stmeq	sl, {r0, r1}
   1476c:	ldr	r1, [r8]
   14770:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14774:	add	r0, sl, r1, lsl #3
   14778:	sub	r1, r2, r1
   1477c:	lsl	r2, r1, #3
   14780:	mov	r1, #0
   14784:	bl	1105c <memset@plt>
   14788:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1478c:	str	r0, [r8]
   14790:	mov	r9, sl
   14794:	ldr	r6, [r9, r5, lsl #3]!
   14798:	ldr	r4, [r9, #4]!
   1479c:	ldm	r7, {r0, r1}
   147a0:	ldr	r2, [r7, #40]	; 0x28
   147a4:	ldr	r3, [r7, #44]	; 0x2c
   147a8:	orr	r8, r1, #1
   147ac:	add	r1, r7, #8
   147b0:	stm	sp, {r0, r8}
   147b4:	add	r0, sp, #8
   147b8:	str	r1, [sp, #20]
   147bc:	stm	r0, {r1, r2, r3}
   147c0:	mov	r0, r4
   147c4:	mov	r1, r6
   147c8:	ldr	r2, [sp, #32]
   147cc:	ldr	r3, [sp, #36]	; 0x24
   147d0:	bl	1346c <__assert_fail@plt+0x2320>
   147d4:	cmp	r6, r0
   147d8:	bhi	1483c <__assert_fail@plt+0x36f0>
   147dc:	add	r6, r0, #1
   147e0:	movw	r0, #33224	; 0x81c8
   147e4:	movt	r0, #2
   147e8:	str	r6, [sl, r5, lsl #3]
   147ec:	cmp	r4, r0
   147f0:	beq	147fc <__assert_fail@plt+0x36b0>
   147f4:	mov	r0, r4
   147f8:	bl	12d7c <__assert_fail@plt+0x1c30>
   147fc:	mov	r0, r6
   14800:	bl	15684 <__assert_fail@plt+0x4538>
   14804:	str	r0, [r9]
   14808:	mov	r4, r0
   1480c:	add	r3, sp, #8
   14810:	ldr	r0, [r7]
   14814:	ldr	r1, [r7, #40]	; 0x28
   14818:	ldr	r2, [r7, #44]	; 0x2c
   1481c:	stm	sp, {r0, r8}
   14820:	ldr	r0, [sp, #20]
   14824:	stm	r3, {r0, r1, r2}
   14828:	mov	r0, r4
   1482c:	mov	r1, r6
   14830:	ldr	r2, [sp, #32]
   14834:	ldr	r3, [sp, #36]	; 0x24
   14838:	bl	1346c <__assert_fail@plt+0x2320>
   1483c:	ldr	r0, [sp, #28]
   14840:	ldr	r1, [sp, #24]
   14844:	str	r1, [r0]
   14848:	mov	r0, r4
   1484c:	sub	sp, fp, #28
   14850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14854:	bl	11134 <abort@plt>
   14858:	movw	r3, #33176	; 0x8198
   1485c:	movt	r3, #2
   14860:	b	146c4 <__assert_fail@plt+0x3578>
   14864:	movw	r3, #33176	; 0x8198
   14868:	mov	r1, r0
   1486c:	mov	r0, #0
   14870:	mvn	r2, #0
   14874:	movt	r3, #2
   14878:	b	146c4 <__assert_fail@plt+0x3578>
   1487c:	movw	r3, #33176	; 0x8198
   14880:	mov	r2, r1
   14884:	mov	r1, r0
   14888:	mov	r0, #0
   1488c:	movt	r3, #2
   14890:	b	146c4 <__assert_fail@plt+0x3578>
   14894:	push	{fp, lr}
   14898:	mov	fp, sp
   1489c:	sub	sp, sp, #48	; 0x30
   148a0:	vmov.i32	q8, #0	; 0x00000000
   148a4:	mov	ip, #32
   148a8:	mov	r3, sp
   148ac:	mov	lr, r2
   148b0:	cmp	r1, #10
   148b4:	add	r2, r3, #16
   148b8:	vst1.64	{d16-d17}, [r3], ip
   148bc:	vst1.64	{d16-d17}, [r3]
   148c0:	vst1.64	{d16-d17}, [r2]
   148c4:	beq	148e4 <__assert_fail@plt+0x3798>
   148c8:	str	r1, [sp]
   148cc:	mov	r3, sp
   148d0:	mov	r1, lr
   148d4:	mvn	r2, #0
   148d8:	bl	146c4 <__assert_fail@plt+0x3578>
   148dc:	mov	sp, fp
   148e0:	pop	{fp, pc}
   148e4:	bl	11134 <abort@plt>
   148e8:	push	{r4, sl, fp, lr}
   148ec:	add	fp, sp, #8
   148f0:	sub	sp, sp, #48	; 0x30
   148f4:	mov	ip, r3
   148f8:	mov	r3, sp
   148fc:	vmov.i32	q8, #0	; 0x00000000
   14900:	mov	lr, #32
   14904:	cmp	r1, #10
   14908:	add	r4, r3, #16
   1490c:	vst1.64	{d16-d17}, [r3], lr
   14910:	vst1.64	{d16-d17}, [r3]
   14914:	vst1.64	{d16-d17}, [r4]
   14918:	beq	14938 <__assert_fail@plt+0x37ec>
   1491c:	str	r1, [sp]
   14920:	mov	r1, r2
   14924:	mov	r3, sp
   14928:	mov	r2, ip
   1492c:	bl	146c4 <__assert_fail@plt+0x3578>
   14930:	sub	sp, fp, #8
   14934:	pop	{r4, sl, fp, pc}
   14938:	bl	11134 <abort@plt>
   1493c:	push	{fp, lr}
   14940:	mov	fp, sp
   14944:	sub	sp, sp, #48	; 0x30
   14948:	mov	r3, sp
   1494c:	vmov.i32	q8, #0	; 0x00000000
   14950:	mov	ip, #32
   14954:	cmp	r0, #10
   14958:	add	r2, r3, #16
   1495c:	vst1.64	{d16-d17}, [r3], ip
   14960:	vst1.64	{d16-d17}, [r3]
   14964:	vst1.64	{d16-d17}, [r2]
   14968:	beq	14988 <__assert_fail@plt+0x383c>
   1496c:	str	r0, [sp]
   14970:	mov	r3, sp
   14974:	mov	r0, #0
   14978:	mvn	r2, #0
   1497c:	bl	146c4 <__assert_fail@plt+0x3578>
   14980:	mov	sp, fp
   14984:	pop	{fp, pc}
   14988:	bl	11134 <abort@plt>
   1498c:	push	{fp, lr}
   14990:	mov	fp, sp
   14994:	sub	sp, sp, #48	; 0x30
   14998:	mov	r3, sp
   1499c:	vmov.i32	q8, #0	; 0x00000000
   149a0:	mov	ip, #32
   149a4:	cmp	r0, #10
   149a8:	add	lr, r3, #16
   149ac:	vst1.64	{d16-d17}, [r3], ip
   149b0:	vst1.64	{d16-d17}, [r3]
   149b4:	vst1.64	{d16-d17}, [lr]
   149b8:	beq	149d4 <__assert_fail@plt+0x3888>
   149bc:	str	r0, [sp]
   149c0:	mov	r3, sp
   149c4:	mov	r0, #0
   149c8:	bl	146c4 <__assert_fail@plt+0x3578>
   149cc:	mov	sp, fp
   149d0:	pop	{fp, pc}
   149d4:	bl	11134 <abort@plt>
   149d8:	push	{r4, sl, fp, lr}
   149dc:	add	fp, sp, #8
   149e0:	sub	sp, sp, #48	; 0x30
   149e4:	mov	lr, r0
   149e8:	movw	r0, #33176	; 0x8198
   149ec:	mov	r3, #32
   149f0:	mov	ip, r1
   149f4:	mov	r4, #1
   149f8:	movt	r0, #2
   149fc:	add	r1, r0, #16
   14a00:	vld1.64	{d16-d17}, [r0], r3
   14a04:	mov	r3, sp
   14a08:	vld1.64	{d18-d19}, [r1]
   14a0c:	add	r1, r3, #16
   14a10:	vld1.64	{d20-d21}, [r0]
   14a14:	add	r0, r3, #32
   14a18:	vst1.64	{d18-d19}, [r1]
   14a1c:	mov	r1, r3
   14a20:	vst1.64	{d20-d21}, [r0]
   14a24:	mov	r0, #28
   14a28:	and	r0, r0, r2, lsr #3
   14a2c:	and	r2, r2, #31
   14a30:	vst1.64	{d16-d17}, [r1], r0
   14a34:	ldr	r0, [r1, #8]
   14a38:	bic	r4, r4, r0, lsr r2
   14a3c:	eor	r0, r0, r4, lsl r2
   14a40:	mov	r2, ip
   14a44:	str	r0, [r1, #8]
   14a48:	mov	r0, #0
   14a4c:	mov	r1, lr
   14a50:	bl	146c4 <__assert_fail@plt+0x3578>
   14a54:	sub	sp, fp, #8
   14a58:	pop	{r4, sl, fp, pc}
   14a5c:	push	{fp, lr}
   14a60:	mov	fp, sp
   14a64:	sub	sp, sp, #48	; 0x30
   14a68:	mov	ip, r0
   14a6c:	movw	r0, #33176	; 0x8198
   14a70:	mov	r3, #32
   14a74:	movt	r0, #2
   14a78:	add	r2, r0, #16
   14a7c:	vld1.64	{d16-d17}, [r0], r3
   14a80:	mov	r3, sp
   14a84:	vld1.64	{d18-d19}, [r2]
   14a88:	add	r2, r3, #16
   14a8c:	vld1.64	{d20-d21}, [r0]
   14a90:	add	r0, r3, #32
   14a94:	vst1.64	{d18-d19}, [r2]
   14a98:	mov	r2, r3
   14a9c:	vst1.64	{d20-d21}, [r0]
   14aa0:	mov	r0, #28
   14aa4:	and	r0, r0, r1, lsr #3
   14aa8:	and	r1, r1, #31
   14aac:	vst1.64	{d16-d17}, [r2], r0
   14ab0:	mov	r0, #1
   14ab4:	ldr	lr, [r2, #8]
   14ab8:	bic	r0, r0, lr, lsr r1
   14abc:	eor	r0, lr, r0, lsl r1
   14ac0:	mov	r1, ip
   14ac4:	str	r0, [r2, #8]
   14ac8:	mov	r0, #0
   14acc:	mvn	r2, #0
   14ad0:	bl	146c4 <__assert_fail@plt+0x3578>
   14ad4:	mov	sp, fp
   14ad8:	pop	{fp, pc}
   14adc:	push	{fp, lr}
   14ae0:	mov	fp, sp
   14ae4:	sub	sp, sp, #48	; 0x30
   14ae8:	movw	r2, #33176	; 0x8198
   14aec:	mov	r3, #32
   14af0:	mov	r1, r0
   14af4:	movt	r2, #2
   14af8:	add	r0, r2, #16
   14afc:	vld1.64	{d16-d17}, [r2], r3
   14b00:	mov	r3, sp
   14b04:	vld1.64	{d18-d19}, [r0]
   14b08:	add	r0, r3, #16
   14b0c:	vld1.64	{d20-d21}, [r2]
   14b10:	mov	r2, r3
   14b14:	vst1.64	{d18-d19}, [r0]
   14b18:	add	r0, r3, #32
   14b1c:	vst1.64	{d20-d21}, [r0]
   14b20:	mov	r0, #12
   14b24:	vst1.64	{d16-d17}, [r2], r0
   14b28:	ldr	r0, [r2]
   14b2c:	orr	r0, r0, #67108864	; 0x4000000
   14b30:	str	r0, [r2]
   14b34:	mov	r0, #0
   14b38:	mvn	r2, #0
   14b3c:	bl	146c4 <__assert_fail@plt+0x3578>
   14b40:	mov	sp, fp
   14b44:	pop	{fp, pc}
   14b48:	push	{fp, lr}
   14b4c:	mov	fp, sp
   14b50:	sub	sp, sp, #48	; 0x30
   14b54:	mov	ip, r1
   14b58:	mov	r1, r0
   14b5c:	movw	r0, #33176	; 0x8198
   14b60:	mov	r3, #32
   14b64:	movt	r0, #2
   14b68:	add	r2, r0, #16
   14b6c:	vld1.64	{d16-d17}, [r0], r3
   14b70:	mov	r3, sp
   14b74:	vld1.64	{d18-d19}, [r2]
   14b78:	add	r2, r3, #16
   14b7c:	vld1.64	{d20-d21}, [r0]
   14b80:	add	r0, r3, #32
   14b84:	vst1.64	{d18-d19}, [r2]
   14b88:	mov	r2, r3
   14b8c:	vst1.64	{d20-d21}, [r0]
   14b90:	mov	r0, #12
   14b94:	vst1.64	{d16-d17}, [r2], r0
   14b98:	ldr	r0, [r2]
   14b9c:	orr	r0, r0, #67108864	; 0x4000000
   14ba0:	str	r0, [r2]
   14ba4:	mov	r0, #0
   14ba8:	mov	r2, ip
   14bac:	bl	146c4 <__assert_fail@plt+0x3578>
   14bb0:	mov	sp, fp
   14bb4:	pop	{fp, pc}
   14bb8:	push	{r4, sl, fp, lr}
   14bbc:	add	fp, sp, #8
   14bc0:	sub	sp, sp, #96	; 0x60
   14bc4:	mov	ip, r2
   14bc8:	mov	r2, sp
   14bcc:	vmov.i32	q8, #0	; 0x00000000
   14bd0:	mov	r4, #28
   14bd4:	cmp	r1, #10
   14bd8:	mov	r3, r2
   14bdc:	add	lr, r2, #16
   14be0:	vst1.64	{d16-d17}, [r3], r4
   14be4:	vst1.64	{d16-d17}, [lr]
   14be8:	vst1.32	{d16-d17}, [r3]
   14bec:	beq	14c3c <__assert_fail@plt+0x3af0>
   14bf0:	vld1.64	{d16-d17}, [r2], r4
   14bf4:	vld1.64	{d18-d19}, [lr]
   14bf8:	add	r3, sp, #48	; 0x30
   14bfc:	add	r4, r3, #4
   14c00:	vld1.32	{d20-d21}, [r2]
   14c04:	add	r2, r3, #20
   14c08:	vst1.32	{d16-d17}, [r4]
   14c0c:	vst1.32	{d18-d19}, [r2]
   14c10:	add	r2, r3, #32
   14c14:	vst1.32	{d20-d21}, [r2]
   14c18:	str	r1, [sp, #48]	; 0x30
   14c1c:	mvn	r2, #0
   14c20:	ldr	r1, [sp, #60]	; 0x3c
   14c24:	orr	r1, r1, #67108864	; 0x4000000
   14c28:	str	r1, [sp, #60]	; 0x3c
   14c2c:	mov	r1, ip
   14c30:	bl	146c4 <__assert_fail@plt+0x3578>
   14c34:	sub	sp, fp, #8
   14c38:	pop	{r4, sl, fp, pc}
   14c3c:	bl	11134 <abort@plt>
   14c40:	push	{r4, r5, fp, lr}
   14c44:	add	fp, sp, #8
   14c48:	sub	sp, sp, #48	; 0x30
   14c4c:	mov	ip, r3
   14c50:	movw	r3, #33176	; 0x8198
   14c54:	mov	lr, #32
   14c58:	cmp	r1, #0
   14c5c:	mov	r5, sp
   14c60:	movt	r3, #2
   14c64:	cmpne	r2, #0
   14c68:	add	r4, r3, #16
   14c6c:	vld1.64	{d16-d17}, [r3], lr
   14c70:	vld1.64	{d18-d19}, [r4]
   14c74:	add	r4, r5, #16
   14c78:	vld1.64	{d20-d21}, [r3]
   14c7c:	vst1.64	{d16-d17}, [r5], lr
   14c80:	mov	r3, #10
   14c84:	vst1.64	{d18-d19}, [r4]
   14c88:	vst1.64	{d20-d21}, [r5]
   14c8c:	str	r3, [sp]
   14c90:	bne	14c98 <__assert_fail@plt+0x3b4c>
   14c94:	bl	11134 <abort@plt>
   14c98:	str	r2, [sp, #44]	; 0x2c
   14c9c:	str	r1, [sp, #40]	; 0x28
   14ca0:	mov	r3, sp
   14ca4:	mov	r1, ip
   14ca8:	mvn	r2, #0
   14cac:	bl	146c4 <__assert_fail@plt+0x3578>
   14cb0:	sub	sp, fp, #8
   14cb4:	pop	{r4, r5, fp, pc}
   14cb8:	push	{r4, r5, fp, lr}
   14cbc:	add	fp, sp, #8
   14cc0:	sub	sp, sp, #48	; 0x30
   14cc4:	mov	lr, r3
   14cc8:	movw	r3, #33176	; 0x8198
   14ccc:	mov	ip, #32
   14cd0:	cmp	r1, #0
   14cd4:	mov	r5, sp
   14cd8:	movt	r3, #2
   14cdc:	cmpne	r2, #0
   14ce0:	add	r4, r3, #16
   14ce4:	vld1.64	{d16-d17}, [r3], ip
   14ce8:	vld1.64	{d18-d19}, [r4]
   14cec:	add	r4, r5, #16
   14cf0:	vld1.64	{d20-d21}, [r3]
   14cf4:	vst1.64	{d16-d17}, [r5], ip
   14cf8:	mov	r3, #10
   14cfc:	vst1.64	{d18-d19}, [r4]
   14d00:	vst1.64	{d20-d21}, [r5]
   14d04:	str	r3, [sp]
   14d08:	bne	14d10 <__assert_fail@plt+0x3bc4>
   14d0c:	bl	11134 <abort@plt>
   14d10:	ldr	ip, [fp, #8]
   14d14:	str	r2, [sp, #44]	; 0x2c
   14d18:	str	r1, [sp, #40]	; 0x28
   14d1c:	mov	r3, sp
   14d20:	mov	r1, lr
   14d24:	mov	r2, ip
   14d28:	bl	146c4 <__assert_fail@plt+0x3578>
   14d2c:	sub	sp, fp, #8
   14d30:	pop	{r4, r5, fp, pc}
   14d34:	push	{r4, sl, fp, lr}
   14d38:	add	fp, sp, #8
   14d3c:	sub	sp, sp, #48	; 0x30
   14d40:	mov	ip, r2
   14d44:	movw	r2, #33176	; 0x8198
   14d48:	mov	lr, #32
   14d4c:	cmp	r0, #0
   14d50:	mov	r4, sp
   14d54:	movt	r2, #2
   14d58:	cmpne	r1, #0
   14d5c:	add	r3, r2, #16
   14d60:	vld1.64	{d16-d17}, [r2], lr
   14d64:	vld1.64	{d18-d19}, [r3]
   14d68:	add	r3, r4, #16
   14d6c:	vld1.64	{d20-d21}, [r2]
   14d70:	vst1.64	{d16-d17}, [r4], lr
   14d74:	mov	r2, #10
   14d78:	vst1.64	{d18-d19}, [r3]
   14d7c:	vst1.64	{d20-d21}, [r4]
   14d80:	str	r2, [sp]
   14d84:	bne	14d8c <__assert_fail@plt+0x3c40>
   14d88:	bl	11134 <abort@plt>
   14d8c:	str	r1, [sp, #44]	; 0x2c
   14d90:	str	r0, [sp, #40]	; 0x28
   14d94:	mov	r3, sp
   14d98:	mov	r0, #0
   14d9c:	mov	r1, ip
   14da0:	mvn	r2, #0
   14da4:	bl	146c4 <__assert_fail@plt+0x3578>
   14da8:	sub	sp, fp, #8
   14dac:	pop	{r4, sl, fp, pc}
   14db0:	push	{r4, r5, fp, lr}
   14db4:	add	fp, sp, #8
   14db8:	sub	sp, sp, #48	; 0x30
   14dbc:	mov	lr, r2
   14dc0:	movw	r2, #33176	; 0x8198
   14dc4:	mov	ip, r3
   14dc8:	mov	r3, #32
   14dcc:	cmp	r0, #0
   14dd0:	mov	r5, sp
   14dd4:	movt	r2, #2
   14dd8:	cmpne	r1, #0
   14ddc:	add	r4, r2, #16
   14de0:	vld1.64	{d16-d17}, [r2], r3
   14de4:	vld1.64	{d18-d19}, [r4]
   14de8:	add	r4, r5, #16
   14dec:	vld1.64	{d20-d21}, [r2]
   14df0:	vst1.64	{d16-d17}, [r5], r3
   14df4:	mov	r2, #10
   14df8:	vst1.64	{d18-d19}, [r4]
   14dfc:	vst1.64	{d20-d21}, [r5]
   14e00:	str	r2, [sp]
   14e04:	bne	14e0c <__assert_fail@plt+0x3cc0>
   14e08:	bl	11134 <abort@plt>
   14e0c:	str	r1, [sp, #44]	; 0x2c
   14e10:	str	r0, [sp, #40]	; 0x28
   14e14:	mov	r3, sp
   14e18:	mov	r0, #0
   14e1c:	mov	r1, lr
   14e20:	mov	r2, ip
   14e24:	bl	146c4 <__assert_fail@plt+0x3578>
   14e28:	sub	sp, fp, #8
   14e2c:	pop	{r4, r5, fp, pc}
   14e30:	movw	r3, #33040	; 0x8110
   14e34:	movt	r3, #2
   14e38:	b	146c4 <__assert_fail@plt+0x3578>
   14e3c:	movw	r3, #33040	; 0x8110
   14e40:	mov	r2, r1
   14e44:	mov	r1, r0
   14e48:	mov	r0, #0
   14e4c:	movt	r3, #2
   14e50:	b	146c4 <__assert_fail@plt+0x3578>
   14e54:	movw	r3, #33040	; 0x8110
   14e58:	mvn	r2, #0
   14e5c:	movt	r3, #2
   14e60:	b	146c4 <__assert_fail@plt+0x3578>
   14e64:	movw	r3, #33040	; 0x8110
   14e68:	mov	r1, r0
   14e6c:	mov	r0, #0
   14e70:	mvn	r2, #0
   14e74:	movt	r3, #2
   14e78:	b	146c4 <__assert_fail@plt+0x3578>
   14e7c:	push	{r4, r5, fp, lr}
   14e80:	add	fp, sp, #8
   14e84:	mov	r5, r0
   14e88:	mov	r4, r1
   14e8c:	mov	r0, #0
   14e90:	mov	r2, #5
   14e94:	mov	r1, r5
   14e98:	bl	10f54 <dcgettext@plt>
   14e9c:	cmp	r0, r5
   14ea0:	popne	{r4, r5, fp, pc}
   14ea4:	bl	15ecc <__assert_fail@plt+0x4d80>
   14ea8:	ldrb	r1, [r0]
   14eac:	and	r1, r1, #223	; 0xdf
   14eb0:	cmp	r1, #71	; 0x47
   14eb4:	beq	14f1c <__assert_fail@plt+0x3dd0>
   14eb8:	cmp	r1, #85	; 0x55
   14ebc:	bne	14f40 <__assert_fail@plt+0x3df4>
   14ec0:	ldrb	r1, [r0, #1]
   14ec4:	and	r1, r1, #223	; 0xdf
   14ec8:	cmp	r1, #84	; 0x54
   14ecc:	bne	14f40 <__assert_fail@plt+0x3df4>
   14ed0:	ldrb	r1, [r0, #2]
   14ed4:	and	r1, r1, #223	; 0xdf
   14ed8:	cmp	r1, #70	; 0x46
   14edc:	ldrbeq	r1, [r0, #3]
   14ee0:	cmpeq	r1, #45	; 0x2d
   14ee4:	bne	14f40 <__assert_fail@plt+0x3df4>
   14ee8:	ldrb	r1, [r0, #4]
   14eec:	cmp	r1, #56	; 0x38
   14ef0:	ldrbeq	r0, [r0, #5]
   14ef4:	cmpeq	r0, #0
   14ef8:	bne	14f40 <__assert_fail@plt+0x3df4>
   14efc:	ldrb	r1, [r5]
   14f00:	movw	r2, #28191	; 0x6e1f
   14f04:	movw	r0, #28195	; 0x6e23
   14f08:	movt	r2, #1
   14f0c:	movt	r0, #1
   14f10:	cmp	r1, #96	; 0x60
   14f14:	moveq	r0, r2
   14f18:	pop	{r4, r5, fp, pc}
   14f1c:	ldrb	r1, [r0, #1]
   14f20:	and	r1, r1, #223	; 0xdf
   14f24:	cmp	r1, #66	; 0x42
   14f28:	bne	14f40 <__assert_fail@plt+0x3df4>
   14f2c:	ldrb	r1, [r0, #2]
   14f30:	cmp	r1, #49	; 0x31
   14f34:	ldrbeq	r1, [r0, #3]
   14f38:	cmpeq	r1, #56	; 0x38
   14f3c:	beq	14f5c <__assert_fail@plt+0x3e10>
   14f40:	movw	r1, #28185	; 0x6e19
   14f44:	movw	r0, #28189	; 0x6e1d
   14f48:	cmp	r4, #9
   14f4c:	movt	r1, #1
   14f50:	movt	r0, #1
   14f54:	moveq	r0, r1
   14f58:	pop	{r4, r5, fp, pc}
   14f5c:	ldrb	r1, [r0, #4]
   14f60:	cmp	r1, #48	; 0x30
   14f64:	ldrbeq	r1, [r0, #5]
   14f68:	cmpeq	r1, #51	; 0x33
   14f6c:	bne	14f40 <__assert_fail@plt+0x3df4>
   14f70:	ldrb	r1, [r0, #6]
   14f74:	cmp	r1, #48	; 0x30
   14f78:	ldrbeq	r0, [r0, #7]
   14f7c:	cmpeq	r0, #0
   14f80:	bne	14f40 <__assert_fail@plt+0x3df4>
   14f84:	ldrb	r1, [r5]
   14f88:	movw	r2, #28199	; 0x6e27
   14f8c:	movw	r0, #28203	; 0x6e2b
   14f90:	movt	r2, #1
   14f94:	movt	r0, #1
   14f98:	b	14f10 <__assert_fail@plt+0x3dc4>
   14f9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fa0:	add	fp, sp, #24
   14fa4:	sub	sp, sp, #32
   14fa8:	ldr	r6, [fp, #12]
   14fac:	ldr	r7, [fp, #8]
   14fb0:	mov	r4, r2
   14fb4:	mov	r8, r0
   14fb8:	cmp	r1, #0
   14fbc:	beq	14fe4 <__assert_fail@plt+0x3e98>
   14fc0:	movw	r2, #28292	; 0x6e84
   14fc4:	mov	r5, r1
   14fc8:	str	r3, [sp, #4]
   14fcc:	str	r4, [sp]
   14fd0:	mov	r0, r8
   14fd4:	mov	r1, #1
   14fd8:	movt	r2, #1
   14fdc:	mov	r3, r5
   14fe0:	b	14ffc <__assert_fail@plt+0x3eb0>
   14fe4:	movw	r2, #28304	; 0x6e90
   14fe8:	str	r3, [sp]
   14fec:	mov	r0, r8
   14ff0:	mov	r1, #1
   14ff4:	mov	r3, r4
   14ff8:	movt	r2, #1
   14ffc:	bl	1108c <__fprintf_chk@plt>
   15000:	movw	r1, #28311	; 0x6e97
   15004:	mov	r0, #0
   15008:	mov	r2, #5
   1500c:	movt	r1, #1
   15010:	bl	10f54 <dcgettext@plt>
   15014:	movw	r2, #29029	; 0x7165
   15018:	mov	r3, r0
   1501c:	movw	r0, #2022	; 0x7e6
   15020:	mov	r1, #1
   15024:	str	r0, [sp]
   15028:	movt	r2, #1
   1502c:	mov	r0, r8
   15030:	bl	1108c <__fprintf_chk@plt>
   15034:	movw	r4, #27250	; 0x6a72
   15038:	mov	r1, r8
   1503c:	movt	r4, #1
   15040:	mov	r0, r4
   15044:	bl	10ec4 <fputs_unlocked@plt>
   15048:	movw	r1, #28315	; 0x6e9b
   1504c:	mov	r0, #0
   15050:	mov	r2, #5
   15054:	movt	r1, #1
   15058:	bl	10f54 <dcgettext@plt>
   1505c:	movw	r3, #28486	; 0x6f46
   15060:	mov	r2, r0
   15064:	mov	r0, r8
   15068:	mov	r1, #1
   1506c:	movt	r3, #1
   15070:	bl	1108c <__fprintf_chk@plt>
   15074:	mov	r0, r4
   15078:	mov	r1, r8
   1507c:	bl	10ec4 <fputs_unlocked@plt>
   15080:	cmp	r6, #9
   15084:	bhi	150c0 <__assert_fail@plt+0x3f74>
   15088:	add	r0, pc, #0
   1508c:	ldr	pc, [r0, r6, lsl #2]
   15090:	strheq	r5, [r1], -r8
   15094:	andeq	r5, r1, ip, asr #1
   15098:	strdeq	r5, [r1], -ip
   1509c:	andeq	r5, r1, r4, lsr #2
   150a0:	andeq	r5, r1, ip, asr #2
   150a4:	andeq	r5, r1, r4, ror r1
   150a8:	muleq	r1, ip, r1
   150ac:	ldrdeq	r5, [r1], -r4
   150b0:	andeq	r5, r1, r4, ror r2
   150b4:	andeq	r5, r1, ip, lsl r2
   150b8:	sub	sp, fp, #24
   150bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150c0:	movw	r1, #28839	; 0x70a7
   150c4:	movt	r1, #1
   150c8:	b	15224 <__assert_fail@plt+0x40d8>
   150cc:	movw	r1, #28520	; 0x6f68
   150d0:	mov	r0, #0
   150d4:	mov	r2, #5
   150d8:	movt	r1, #1
   150dc:	bl	10f54 <dcgettext@plt>
   150e0:	ldr	r3, [r7]
   150e4:	mov	r2, r0
   150e8:	mov	r0, r8
   150ec:	mov	r1, #1
   150f0:	sub	sp, fp, #24
   150f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   150f8:	b	1108c <__fprintf_chk@plt>
   150fc:	movw	r1, #28536	; 0x6f78
   15100:	mov	r0, #0
   15104:	mov	r2, #5
   15108:	movt	r1, #1
   1510c:	bl	10f54 <dcgettext@plt>
   15110:	mov	r2, r0
   15114:	ldr	r3, [r7]
   15118:	ldr	r0, [r7, #4]
   1511c:	str	r0, [sp]
   15120:	b	15210 <__assert_fail@plt+0x40c4>
   15124:	movw	r1, #28559	; 0x6f8f
   15128:	mov	r0, #0
   1512c:	mov	r2, #5
   15130:	movt	r1, #1
   15134:	bl	10f54 <dcgettext@plt>
   15138:	ldr	r3, [r7]
   1513c:	mov	r2, r0
   15140:	ldmib	r7, {r0, r1}
   15144:	stm	sp, {r0, r1}
   15148:	b	15210 <__assert_fail@plt+0x40c4>
   1514c:	movw	r1, #28587	; 0x6fab
   15150:	mov	r0, #0
   15154:	mov	r2, #5
   15158:	movt	r1, #1
   1515c:	bl	10f54 <dcgettext@plt>
   15160:	ldr	r3, [r7]
   15164:	mov	r2, r0
   15168:	ldmib	r7, {r0, r1, r7}
   1516c:	stm	sp, {r0, r1, r7}
   15170:	b	15210 <__assert_fail@plt+0x40c4>
   15174:	movw	r1, #28619	; 0x6fcb
   15178:	mov	r0, #0
   1517c:	mov	r2, #5
   15180:	movt	r1, #1
   15184:	bl	10f54 <dcgettext@plt>
   15188:	ldr	r3, [r7]
   1518c:	mov	r2, r0
   15190:	ldmib	r7, {r0, r1, r6, r7}
   15194:	stm	sp, {r0, r1, r6, r7}
   15198:	b	15210 <__assert_fail@plt+0x40c4>
   1519c:	movw	r1, #28655	; 0x6fef
   151a0:	mov	r0, #0
   151a4:	mov	r2, #5
   151a8:	movt	r1, #1
   151ac:	bl	10f54 <dcgettext@plt>
   151b0:	ldr	r3, [r7]
   151b4:	mov	r2, r0
   151b8:	ldmib	r7, {r0, r1, r6}
   151bc:	ldr	r5, [r7, #16]
   151c0:	ldr	r7, [r7, #20]
   151c4:	stm	sp, {r0, r1, r6}
   151c8:	str	r5, [sp, #12]
   151cc:	str	r7, [sp, #16]
   151d0:	b	15210 <__assert_fail@plt+0x40c4>
   151d4:	movw	r1, #28695	; 0x7017
   151d8:	mov	r0, #0
   151dc:	mov	r2, #5
   151e0:	movt	r1, #1
   151e4:	bl	10f54 <dcgettext@plt>
   151e8:	ldr	r3, [r7]
   151ec:	mov	r2, r0
   151f0:	ldmib	r7, {r0, r1, r6}
   151f4:	ldr	r5, [r7, #16]
   151f8:	ldr	r4, [r7, #20]
   151fc:	ldr	r7, [r7, #24]
   15200:	stm	sp, {r0, r1, r6}
   15204:	str	r5, [sp, #12]
   15208:	str	r4, [sp, #16]
   1520c:	str	r7, [sp, #20]
   15210:	mov	r0, r8
   15214:	mov	r1, #1
   15218:	b	152c4 <__assert_fail@plt+0x4178>
   1521c:	movw	r1, #28787	; 0x7073
   15220:	movt	r1, #1
   15224:	mov	r0, #0
   15228:	mov	r2, #5
   1522c:	bl	10f54 <dcgettext@plt>
   15230:	mov	ip, r0
   15234:	ldr	r3, [r7]
   15238:	ldr	r0, [r7, #4]
   1523c:	ldr	r1, [r7, #8]
   15240:	ldr	r6, [r7, #12]
   15244:	ldr	r5, [r7, #16]
   15248:	ldr	r4, [r7, #20]
   1524c:	ldr	r2, [r7, #24]
   15250:	ldr	lr, [r7, #28]
   15254:	ldr	r7, [r7, #32]
   15258:	stm	sp, {r0, r1, r6}
   1525c:	str	r5, [sp, #12]
   15260:	str	r4, [sp, #16]
   15264:	str	r2, [sp, #20]
   15268:	str	lr, [sp, #24]
   1526c:	str	r7, [sp, #28]
   15270:	b	152b8 <__assert_fail@plt+0x416c>
   15274:	movw	r1, #28739	; 0x7043
   15278:	mov	r0, #0
   1527c:	mov	r2, #5
   15280:	movt	r1, #1
   15284:	bl	10f54 <dcgettext@plt>
   15288:	mov	ip, r0
   1528c:	ldr	r3, [r7]
   15290:	ldmib	r7, {r0, r1, r6}
   15294:	ldr	r5, [r7, #16]
   15298:	ldr	r4, [r7, #20]
   1529c:	ldr	r2, [r7, #24]
   152a0:	ldr	r7, [r7, #28]
   152a4:	stm	sp, {r0, r1, r6}
   152a8:	str	r5, [sp, #12]
   152ac:	str	r4, [sp, #16]
   152b0:	str	r2, [sp, #20]
   152b4:	str	r7, [sp, #24]
   152b8:	mov	r0, r8
   152bc:	mov	r1, #1
   152c0:	mov	r2, ip
   152c4:	bl	1108c <__fprintf_chk@plt>
   152c8:	sub	sp, fp, #24
   152cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   152d0:	push	{r4, sl, fp, lr}
   152d4:	add	fp, sp, #8
   152d8:	sub	sp, sp, #8
   152dc:	ldr	ip, [fp, #8]
   152e0:	mov	lr, #0
   152e4:	ldr	r4, [ip, lr, lsl #2]
   152e8:	add	lr, lr, #1
   152ec:	cmp	r4, #0
   152f0:	bne	152e4 <__assert_fail@plt+0x4198>
   152f4:	sub	r4, lr, #1
   152f8:	str	ip, [sp]
   152fc:	str	r4, [sp, #4]
   15300:	bl	14f9c <__assert_fail@plt+0x3e50>
   15304:	sub	sp, fp, #8
   15308:	pop	{r4, sl, fp, pc}
   1530c:	push	{fp, lr}
   15310:	mov	fp, sp
   15314:	sub	sp, sp, #48	; 0x30
   15318:	ldr	ip, [fp, #8]
   1531c:	ldr	lr, [ip]
   15320:	cmp	lr, #0
   15324:	str	lr, [sp, #8]
   15328:	beq	153c4 <__assert_fail@plt+0x4278>
   1532c:	ldr	lr, [ip, #4]
   15330:	cmp	lr, #0
   15334:	str	lr, [sp, #12]
   15338:	beq	153cc <__assert_fail@plt+0x4280>
   1533c:	ldr	lr, [ip, #8]
   15340:	cmp	lr, #0
   15344:	str	lr, [sp, #16]
   15348:	beq	153d4 <__assert_fail@plt+0x4288>
   1534c:	ldr	lr, [ip, #12]
   15350:	cmp	lr, #0
   15354:	str	lr, [sp, #20]
   15358:	beq	153dc <__assert_fail@plt+0x4290>
   1535c:	ldr	lr, [ip, #16]
   15360:	cmp	lr, #0
   15364:	str	lr, [sp, #24]
   15368:	beq	153e4 <__assert_fail@plt+0x4298>
   1536c:	ldr	lr, [ip, #20]
   15370:	cmp	lr, #0
   15374:	str	lr, [sp, #28]
   15378:	beq	153ec <__assert_fail@plt+0x42a0>
   1537c:	ldr	lr, [ip, #24]
   15380:	cmp	lr, #0
   15384:	str	lr, [sp, #32]
   15388:	beq	153f4 <__assert_fail@plt+0x42a8>
   1538c:	ldr	lr, [ip, #28]
   15390:	cmp	lr, #0
   15394:	str	lr, [sp, #36]	; 0x24
   15398:	beq	153fc <__assert_fail@plt+0x42b0>
   1539c:	ldr	lr, [ip, #32]
   153a0:	cmp	lr, #0
   153a4:	str	lr, [sp, #40]	; 0x28
   153a8:	beq	15404 <__assert_fail@plt+0x42b8>
   153ac:	ldr	lr, [ip, #36]	; 0x24
   153b0:	mov	ip, #10
   153b4:	cmp	lr, #0
   153b8:	str	lr, [sp, #44]	; 0x2c
   153bc:	movweq	ip, #9
   153c0:	b	15408 <__assert_fail@plt+0x42bc>
   153c4:	mov	ip, #0
   153c8:	b	15408 <__assert_fail@plt+0x42bc>
   153cc:	mov	ip, #1
   153d0:	b	15408 <__assert_fail@plt+0x42bc>
   153d4:	mov	ip, #2
   153d8:	b	15408 <__assert_fail@plt+0x42bc>
   153dc:	mov	ip, #3
   153e0:	b	15408 <__assert_fail@plt+0x42bc>
   153e4:	mov	ip, #4
   153e8:	b	15408 <__assert_fail@plt+0x42bc>
   153ec:	mov	ip, #5
   153f0:	b	15408 <__assert_fail@plt+0x42bc>
   153f4:	mov	ip, #6
   153f8:	b	15408 <__assert_fail@plt+0x42bc>
   153fc:	mov	ip, #7
   15400:	b	15408 <__assert_fail@plt+0x42bc>
   15404:	mov	ip, #8
   15408:	add	lr, sp, #8
   1540c:	str	ip, [sp, #4]
   15410:	str	lr, [sp]
   15414:	bl	14f9c <__assert_fail@plt+0x3e50>
   15418:	mov	sp, fp
   1541c:	pop	{fp, pc}
   15420:	push	{fp, lr}
   15424:	mov	fp, sp
   15428:	sub	sp, sp, #56	; 0x38
   1542c:	add	ip, fp, #8
   15430:	str	ip, [sp, #12]
   15434:	ldr	lr, [fp, #8]
   15438:	cmp	lr, #0
   1543c:	str	lr, [sp, #16]
   15440:	beq	154dc <__assert_fail@plt+0x4390>
   15444:	ldr	lr, [ip, #4]
   15448:	cmp	lr, #0
   1544c:	str	lr, [sp, #20]
   15450:	beq	154e4 <__assert_fail@plt+0x4398>
   15454:	ldr	lr, [ip, #8]
   15458:	cmp	lr, #0
   1545c:	str	lr, [sp, #24]
   15460:	beq	154ec <__assert_fail@plt+0x43a0>
   15464:	ldr	lr, [ip, #12]
   15468:	cmp	lr, #0
   1546c:	str	lr, [sp, #28]
   15470:	beq	154f4 <__assert_fail@plt+0x43a8>
   15474:	ldr	lr, [ip, #16]
   15478:	cmp	lr, #0
   1547c:	str	lr, [sp, #32]
   15480:	beq	154fc <__assert_fail@plt+0x43b0>
   15484:	ldr	lr, [ip, #20]
   15488:	cmp	lr, #0
   1548c:	str	lr, [sp, #36]	; 0x24
   15490:	beq	15504 <__assert_fail@plt+0x43b8>
   15494:	ldr	lr, [ip, #24]
   15498:	cmp	lr, #0
   1549c:	str	lr, [sp, #40]	; 0x28
   154a0:	beq	1550c <__assert_fail@plt+0x43c0>
   154a4:	ldr	lr, [ip, #28]
   154a8:	cmp	lr, #0
   154ac:	str	lr, [sp, #44]	; 0x2c
   154b0:	beq	15514 <__assert_fail@plt+0x43c8>
   154b4:	ldr	lr, [ip, #32]
   154b8:	cmp	lr, #0
   154bc:	str	lr, [sp, #48]	; 0x30
   154c0:	beq	1551c <__assert_fail@plt+0x43d0>
   154c4:	ldr	lr, [ip, #36]	; 0x24
   154c8:	mov	ip, #10
   154cc:	cmp	lr, #0
   154d0:	str	lr, [sp, #52]	; 0x34
   154d4:	movweq	ip, #9
   154d8:	b	15520 <__assert_fail@plt+0x43d4>
   154dc:	mov	ip, #0
   154e0:	b	15520 <__assert_fail@plt+0x43d4>
   154e4:	mov	ip, #1
   154e8:	b	15520 <__assert_fail@plt+0x43d4>
   154ec:	mov	ip, #2
   154f0:	b	15520 <__assert_fail@plt+0x43d4>
   154f4:	mov	ip, #3
   154f8:	b	15520 <__assert_fail@plt+0x43d4>
   154fc:	mov	ip, #4
   15500:	b	15520 <__assert_fail@plt+0x43d4>
   15504:	mov	ip, #5
   15508:	b	15520 <__assert_fail@plt+0x43d4>
   1550c:	mov	ip, #6
   15510:	b	15520 <__assert_fail@plt+0x43d4>
   15514:	mov	ip, #7
   15518:	b	15520 <__assert_fail@plt+0x43d4>
   1551c:	mov	ip, #8
   15520:	add	lr, sp, #16
   15524:	str	ip, [sp, #4]
   15528:	str	lr, [sp]
   1552c:	bl	14f9c <__assert_fail@plt+0x3e50>
   15530:	mov	sp, fp
   15534:	pop	{fp, pc}
   15538:	push	{fp, lr}
   1553c:	mov	fp, sp
   15540:	movw	r0, #33116	; 0x815c
   15544:	movt	r0, #2
   15548:	ldr	r1, [r0]
   1554c:	movw	r0, #27250	; 0x6a72
   15550:	movt	r0, #1
   15554:	bl	10ec4 <fputs_unlocked@plt>
   15558:	movw	r1, #28899	; 0x70e3
   1555c:	mov	r0, #0
   15560:	mov	r2, #5
   15564:	movt	r1, #1
   15568:	bl	10f54 <dcgettext@plt>
   1556c:	movw	r2, #28919	; 0x70f7
   15570:	mov	r1, r0
   15574:	mov	r0, #1
   15578:	movt	r2, #1
   1557c:	bl	11074 <__printf_chk@plt>
   15580:	movw	r1, #28941	; 0x710d
   15584:	mov	r0, #0
   15588:	mov	r2, #5
   1558c:	movt	r1, #1
   15590:	bl	10f54 <dcgettext@plt>
   15594:	movw	r2, #26555	; 0x67bb
   15598:	movw	r3, #27059	; 0x69b3
   1559c:	mov	r1, r0
   155a0:	mov	r0, #1
   155a4:	movt	r2, #1
   155a8:	movt	r3, #1
   155ac:	bl	11074 <__printf_chk@plt>
   155b0:	movw	r1, #28961	; 0x7121
   155b4:	mov	r0, #0
   155b8:	mov	r2, #5
   155bc:	movt	r1, #1
   155c0:	bl	10f54 <dcgettext@plt>
   155c4:	movw	r2, #29000	; 0x7148
   155c8:	mov	r1, r0
   155cc:	mov	r0, #1
   155d0:	movt	r2, #1
   155d4:	pop	{fp, lr}
   155d8:	b	11074 <__printf_chk@plt>
   155dc:	push	{r4, r5, r6, sl, fp, lr}
   155e0:	add	fp, sp, #16
   155e4:	mov	r4, r2
   155e8:	mov	r5, r1
   155ec:	mov	r6, r0
   155f0:	bl	15f64 <__assert_fail@plt+0x4e18>
   155f4:	cmp	r0, #0
   155f8:	popne	{r4, r5, r6, sl, fp, pc}
   155fc:	cmp	r6, #0
   15600:	beq	15614 <__assert_fail@plt+0x44c8>
   15604:	cmp	r5, #0
   15608:	cmpne	r4, #0
   1560c:	bne	15614 <__assert_fail@plt+0x44c8>
   15610:	pop	{r4, r5, r6, sl, fp, pc}
   15614:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15618:	push	{r4, r5, r6, sl, fp, lr}
   1561c:	add	fp, sp, #16
   15620:	mov	r4, r2
   15624:	mov	r5, r1
   15628:	mov	r6, r0
   1562c:	bl	15f64 <__assert_fail@plt+0x4e18>
   15630:	cmp	r0, #0
   15634:	popne	{r4, r5, r6, sl, fp, pc}
   15638:	cmp	r6, #0
   1563c:	beq	15650 <__assert_fail@plt+0x4504>
   15640:	cmp	r5, #0
   15644:	cmpne	r4, #0
   15648:	bne	15650 <__assert_fail@plt+0x4504>
   1564c:	pop	{r4, r5, r6, sl, fp, pc}
   15650:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15654:	push	{fp, lr}
   15658:	mov	fp, sp
   1565c:	bl	15c4c <__assert_fail@plt+0x4b00>
   15660:	cmp	r0, #0
   15664:	popne	{fp, pc}
   15668:	bl	15bb4 <__assert_fail@plt+0x4a68>
   1566c:	push	{fp, lr}
   15670:	mov	fp, sp
   15674:	bl	15c4c <__assert_fail@plt+0x4b00>
   15678:	cmp	r0, #0
   1567c:	popne	{fp, pc}
   15680:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15684:	push	{fp, lr}
   15688:	mov	fp, sp
   1568c:	bl	15c4c <__assert_fail@plt+0x4b00>
   15690:	cmp	r0, #0
   15694:	popne	{fp, pc}
   15698:	bl	15bb4 <__assert_fail@plt+0x4a68>
   1569c:	push	{r4, r5, fp, lr}
   156a0:	add	fp, sp, #8
   156a4:	mov	r4, r1
   156a8:	mov	r5, r0
   156ac:	bl	15c7c <__assert_fail@plt+0x4b30>
   156b0:	cmp	r0, #0
   156b4:	popne	{r4, r5, fp, pc}
   156b8:	cmp	r5, #0
   156bc:	beq	156cc <__assert_fail@plt+0x4580>
   156c0:	cmp	r4, #0
   156c4:	bne	156cc <__assert_fail@plt+0x4580>
   156c8:	pop	{r4, r5, fp, pc}
   156cc:	bl	15bb4 <__assert_fail@plt+0x4a68>
   156d0:	push	{fp, lr}
   156d4:	mov	fp, sp
   156d8:	cmp	r1, #0
   156dc:	orreq	r1, r1, #1
   156e0:	bl	15c7c <__assert_fail@plt+0x4b30>
   156e4:	cmp	r0, #0
   156e8:	popne	{fp, pc}
   156ec:	bl	15bb4 <__assert_fail@plt+0x4a68>
   156f0:	push	{fp, lr}
   156f4:	mov	fp, sp
   156f8:	clz	r3, r2
   156fc:	lsr	ip, r3, #5
   15700:	clz	r3, r1
   15704:	lsr	r3, r3, #5
   15708:	orrs	r3, r3, ip
   1570c:	movwne	r1, #1
   15710:	movwne	r2, #1
   15714:	bl	15f64 <__assert_fail@plt+0x4e18>
   15718:	cmp	r0, #0
   1571c:	popne	{fp, pc}
   15720:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15724:	push	{fp, lr}
   15728:	mov	fp, sp
   1572c:	mov	r2, r1
   15730:	mov	r1, r0
   15734:	mov	r0, #0
   15738:	bl	15f64 <__assert_fail@plt+0x4e18>
   1573c:	cmp	r0, #0
   15740:	popne	{fp, pc}
   15744:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15748:	push	{fp, lr}
   1574c:	mov	fp, sp
   15750:	mov	r2, r1
   15754:	mov	r1, r0
   15758:	clz	r0, r2
   1575c:	clz	r3, r1
   15760:	lsr	r0, r0, #5
   15764:	lsr	r3, r3, #5
   15768:	orrs	r0, r3, r0
   1576c:	movwne	r1, #1
   15770:	movwne	r2, #1
   15774:	mov	r0, #0
   15778:	bl	15f64 <__assert_fail@plt+0x4e18>
   1577c:	cmp	r0, #0
   15780:	popne	{fp, pc}
   15784:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15788:	push	{r4, r5, r6, sl, fp, lr}
   1578c:	add	fp, sp, #16
   15790:	ldr	r5, [r1]
   15794:	mov	r4, r1
   15798:	mov	r6, r0
   1579c:	cmp	r0, #0
   157a0:	beq	157b8 <__assert_fail@plt+0x466c>
   157a4:	mov	r0, #1
   157a8:	add	r0, r0, r5, lsr #1
   157ac:	adds	r5, r5, r0
   157b0:	bcc	157c0 <__assert_fail@plt+0x4674>
   157b4:	b	157fc <__assert_fail@plt+0x46b0>
   157b8:	cmp	r5, #0
   157bc:	movweq	r5, #64	; 0x40
   157c0:	mov	r0, r6
   157c4:	mov	r1, r5
   157c8:	mov	r2, #1
   157cc:	bl	15f64 <__assert_fail@plt+0x4e18>
   157d0:	cmp	r5, #0
   157d4:	mov	r1, r5
   157d8:	movwne	r1, #1
   157dc:	cmp	r0, #0
   157e0:	bne	157f4 <__assert_fail@plt+0x46a8>
   157e4:	clz	r2, r6
   157e8:	lsr	r2, r2, #5
   157ec:	orrs	r1, r2, r1
   157f0:	bne	157fc <__assert_fail@plt+0x46b0>
   157f4:	str	r5, [r4]
   157f8:	pop	{r4, r5, r6, sl, fp, pc}
   157fc:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15800:	push	{r4, r5, r6, r7, fp, lr}
   15804:	add	fp, sp, #16
   15808:	ldr	r5, [r1]
   1580c:	mov	r6, r2
   15810:	mov	r4, r1
   15814:	mov	r7, r0
   15818:	cmp	r0, #0
   1581c:	beq	15834 <__assert_fail@plt+0x46e8>
   15820:	mov	r0, #1
   15824:	add	r0, r0, r5, lsr #1
   15828:	adds	r5, r5, r0
   1582c:	bcc	1584c <__assert_fail@plt+0x4700>
   15830:	b	15880 <__assert_fail@plt+0x4734>
   15834:	cmp	r5, #0
   15838:	bne	1584c <__assert_fail@plt+0x4700>
   1583c:	mov	r0, #64	; 0x40
   15840:	cmp	r6, #64	; 0x40
   15844:	udiv	r5, r0, r6
   15848:	addhi	r5, r5, #1
   1584c:	mov	r0, r7
   15850:	mov	r1, r5
   15854:	mov	r2, r6
   15858:	bl	15f64 <__assert_fail@plt+0x4e18>
   1585c:	cmp	r0, #0
   15860:	bne	15878 <__assert_fail@plt+0x472c>
   15864:	cmp	r7, #0
   15868:	beq	15880 <__assert_fail@plt+0x4734>
   1586c:	cmp	r6, #0
   15870:	cmpne	r5, #0
   15874:	bne	15880 <__assert_fail@plt+0x4734>
   15878:	str	r5, [r4]
   1587c:	pop	{r4, r5, r6, r7, fp, pc}
   15880:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15884:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15888:	add	fp, sp, #24
   1588c:	mov	r8, r1
   15890:	ldr	r1, [r1]
   15894:	mov	r5, r0
   15898:	add	r0, r1, r1, asr #1
   1589c:	cmp	r0, r1
   158a0:	mvnvs	r0, #-2147483648	; 0x80000000
   158a4:	cmp	r0, r3
   158a8:	mov	r7, r0
   158ac:	movgt	r7, r3
   158b0:	cmn	r3, #1
   158b4:	movle	r7, r0
   158b8:	ldr	r0, [fp, #8]
   158bc:	cmn	r0, #1
   158c0:	ble	158e8 <__assert_fail@plt+0x479c>
   158c4:	cmp	r0, #0
   158c8:	beq	1593c <__assert_fail@plt+0x47f0>
   158cc:	cmn	r7, #1
   158d0:	ble	15910 <__assert_fail@plt+0x47c4>
   158d4:	mvn	r4, #-2147483648	; 0x80000000
   158d8:	udiv	r6, r4, r0
   158dc:	cmp	r6, r7
   158e0:	bge	1593c <__assert_fail@plt+0x47f0>
   158e4:	b	1594c <__assert_fail@plt+0x4800>
   158e8:	cmn	r7, #1
   158ec:	ble	1592c <__assert_fail@plt+0x47e0>
   158f0:	cmn	r0, #1
   158f4:	beq	1593c <__assert_fail@plt+0x47f0>
   158f8:	mov	r6, #-2147483648	; 0x80000000
   158fc:	mvn	r4, #-2147483648	; 0x80000000
   15900:	sdiv	r6, r6, r0
   15904:	cmp	r6, r7
   15908:	bge	1593c <__assert_fail@plt+0x47f0>
   1590c:	b	1594c <__assert_fail@plt+0x4800>
   15910:	beq	1593c <__assert_fail@plt+0x47f0>
   15914:	mov	r6, #-2147483648	; 0x80000000
   15918:	mvn	r4, #-2147483648	; 0x80000000
   1591c:	sdiv	r6, r6, r7
   15920:	cmp	r6, r0
   15924:	bge	1593c <__assert_fail@plt+0x47f0>
   15928:	b	1594c <__assert_fail@plt+0x4800>
   1592c:	mvn	r4, #-2147483648	; 0x80000000
   15930:	sdiv	r6, r4, r0
   15934:	cmp	r7, r6
   15938:	blt	1594c <__assert_fail@plt+0x4800>
   1593c:	mul	r6, r7, r0
   15940:	mov	r4, #64	; 0x40
   15944:	cmp	r6, #63	; 0x3f
   15948:	bgt	15954 <__assert_fail@plt+0x4808>
   1594c:	sdiv	r7, r4, r0
   15950:	mul	r6, r7, r0
   15954:	cmp	r5, #0
   15958:	moveq	r4, #0
   1595c:	streq	r4, [r8]
   15960:	sub	r4, r7, r1
   15964:	cmp	r4, r2
   15968:	bge	15a14 <__assert_fail@plt+0x48c8>
   1596c:	add	r7, r1, r2
   15970:	mov	r6, #0
   15974:	mov	r2, #0
   15978:	cmp	r7, r3
   1597c:	movwgt	r6, #1
   15980:	cmn	r3, #1
   15984:	movwgt	r2, #1
   15988:	cmp	r7, r1
   1598c:	bvs	15a48 <__assert_fail@plt+0x48fc>
   15990:	ands	r1, r2, r6
   15994:	bne	15a48 <__assert_fail@plt+0x48fc>
   15998:	cmn	r0, #1
   1599c:	ble	159c4 <__assert_fail@plt+0x4878>
   159a0:	cmp	r0, #0
   159a4:	beq	15a10 <__assert_fail@plt+0x48c4>
   159a8:	cmn	r7, #1
   159ac:	ble	159e8 <__assert_fail@plt+0x489c>
   159b0:	mvn	r1, #-2147483648	; 0x80000000
   159b4:	udiv	r1, r1, r0
   159b8:	cmp	r1, r7
   159bc:	bge	15a10 <__assert_fail@plt+0x48c4>
   159c0:	b	15a48 <__assert_fail@plt+0x48fc>
   159c4:	cmn	r7, #1
   159c8:	ble	15a00 <__assert_fail@plt+0x48b4>
   159cc:	cmn	r0, #1
   159d0:	beq	15a10 <__assert_fail@plt+0x48c4>
   159d4:	mov	r1, #-2147483648	; 0x80000000
   159d8:	sdiv	r1, r1, r0
   159dc:	cmp	r1, r7
   159e0:	bge	15a10 <__assert_fail@plt+0x48c4>
   159e4:	b	15a48 <__assert_fail@plt+0x48fc>
   159e8:	beq	15a10 <__assert_fail@plt+0x48c4>
   159ec:	mov	r1, #-2147483648	; 0x80000000
   159f0:	sdiv	r1, r1, r7
   159f4:	cmp	r1, r0
   159f8:	bge	15a10 <__assert_fail@plt+0x48c4>
   159fc:	b	15a48 <__assert_fail@plt+0x48fc>
   15a00:	mvn	r1, #-2147483648	; 0x80000000
   15a04:	sdiv	r1, r1, r0
   15a08:	cmp	r7, r1
   15a0c:	blt	15a48 <__assert_fail@plt+0x48fc>
   15a10:	mul	r6, r7, r0
   15a14:	mov	r0, r5
   15a18:	mov	r1, r6
   15a1c:	bl	15c7c <__assert_fail@plt+0x4b30>
   15a20:	cmp	r6, #0
   15a24:	movwne	r6, #1
   15a28:	cmp	r0, #0
   15a2c:	bne	15a40 <__assert_fail@plt+0x48f4>
   15a30:	clz	r1, r5
   15a34:	lsr	r1, r1, #5
   15a38:	orrs	r1, r1, r6
   15a3c:	bne	15a48 <__assert_fail@plt+0x48fc>
   15a40:	str	r7, [r8]
   15a44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a48:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15a4c:	push	{fp, lr}
   15a50:	mov	fp, sp
   15a54:	mov	r1, #1
   15a58:	bl	15bf8 <__assert_fail@plt+0x4aac>
   15a5c:	cmp	r0, #0
   15a60:	popne	{fp, pc}
   15a64:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15a68:	push	{fp, lr}
   15a6c:	mov	fp, sp
   15a70:	bl	15bf8 <__assert_fail@plt+0x4aac>
   15a74:	cmp	r0, #0
   15a78:	popne	{fp, pc}
   15a7c:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15a80:	push	{fp, lr}
   15a84:	mov	fp, sp
   15a88:	mov	r1, #1
   15a8c:	bl	15bf8 <__assert_fail@plt+0x4aac>
   15a90:	cmp	r0, #0
   15a94:	popne	{fp, pc}
   15a98:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15a9c:	push	{fp, lr}
   15aa0:	mov	fp, sp
   15aa4:	bl	15bf8 <__assert_fail@plt+0x4aac>
   15aa8:	cmp	r0, #0
   15aac:	popne	{fp, pc}
   15ab0:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15ab4:	push	{r4, r5, r6, sl, fp, lr}
   15ab8:	add	fp, sp, #16
   15abc:	mov	r5, r0
   15ac0:	mov	r0, r1
   15ac4:	mov	r4, r1
   15ac8:	bl	15c4c <__assert_fail@plt+0x4b00>
   15acc:	cmp	r0, #0
   15ad0:	beq	15aec <__assert_fail@plt+0x49a0>
   15ad4:	mov	r1, r5
   15ad8:	mov	r2, r4
   15adc:	mov	r6, r0
   15ae0:	bl	10f24 <memcpy@plt>
   15ae4:	mov	r0, r6
   15ae8:	pop	{r4, r5, r6, sl, fp, pc}
   15aec:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15af0:	push	{r4, r5, r6, sl, fp, lr}
   15af4:	add	fp, sp, #16
   15af8:	mov	r5, r0
   15afc:	mov	r0, r1
   15b00:	mov	r4, r1
   15b04:	bl	15c4c <__assert_fail@plt+0x4b00>
   15b08:	cmp	r0, #0
   15b0c:	beq	15b28 <__assert_fail@plt+0x49dc>
   15b10:	mov	r1, r5
   15b14:	mov	r2, r4
   15b18:	mov	r6, r0
   15b1c:	bl	10f24 <memcpy@plt>
   15b20:	mov	r0, r6
   15b24:	pop	{r4, r5, r6, sl, fp, pc}
   15b28:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15b2c:	push	{r4, r5, r6, sl, fp, lr}
   15b30:	add	fp, sp, #16
   15b34:	mov	r5, r0
   15b38:	add	r0, r1, #1
   15b3c:	mov	r4, r1
   15b40:	bl	15c4c <__assert_fail@plt+0x4b00>
   15b44:	cmp	r0, #0
   15b48:	beq	15b70 <__assert_fail@plt+0x4a24>
   15b4c:	mov	r6, r0
   15b50:	mov	r0, #0
   15b54:	mov	r1, r5
   15b58:	mov	r2, r4
   15b5c:	strb	r0, [r6, r4]
   15b60:	mov	r0, r6
   15b64:	bl	10f24 <memcpy@plt>
   15b68:	mov	r0, r6
   15b6c:	pop	{r4, r5, r6, sl, fp, pc}
   15b70:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15b74:	push	{r4, r5, r6, sl, fp, lr}
   15b78:	add	fp, sp, #16
   15b7c:	mov	r4, r0
   15b80:	bl	1102c <strlen@plt>
   15b84:	add	r5, r0, #1
   15b88:	mov	r0, r5
   15b8c:	bl	15c4c <__assert_fail@plt+0x4b00>
   15b90:	cmp	r0, #0
   15b94:	beq	15bb0 <__assert_fail@plt+0x4a64>
   15b98:	mov	r1, r4
   15b9c:	mov	r2, r5
   15ba0:	mov	r6, r0
   15ba4:	bl	10f24 <memcpy@plt>
   15ba8:	mov	r0, r6
   15bac:	pop	{r4, r5, r6, sl, fp, pc}
   15bb0:	bl	15bb4 <__assert_fail@plt+0x4a68>
   15bb4:	push	{fp, lr}
   15bb8:	mov	fp, sp
   15bbc:	movw	r0, #33020	; 0x80fc
   15bc0:	movw	r1, #29076	; 0x7194
   15bc4:	mov	r2, #5
   15bc8:	movt	r0, #2
   15bcc:	movt	r1, #1
   15bd0:	ldr	r4, [r0]
   15bd4:	mov	r0, #0
   15bd8:	bl	10f54 <dcgettext@plt>
   15bdc:	movw	r2, #28038	; 0x6d86
   15be0:	mov	r3, r0
   15be4:	mov	r0, r4
   15be8:	mov	r1, #0
   15bec:	movt	r2, #1
   15bf0:	bl	10fcc <error@plt>
   15bf4:	bl	11134 <abort@plt>
   15bf8:	clz	r2, r1
   15bfc:	clz	r3, r0
   15c00:	lsr	r2, r2, #5
   15c04:	lsr	r3, r3, #5
   15c08:	orrs	r2, r3, r2
   15c0c:	movwne	r1, #1
   15c10:	movwne	r0, #1
   15c14:	cmp	r1, #0
   15c18:	beq	15c48 <__assert_fail@plt+0x4afc>
   15c1c:	mvn	r2, #-2147483648	; 0x80000000
   15c20:	udiv	r2, r2, r1
   15c24:	cmp	r2, r0
   15c28:	bcs	15c48 <__assert_fail@plt+0x4afc>
   15c2c:	push	{fp, lr}
   15c30:	mov	fp, sp
   15c34:	bl	11044 <__errno_location@plt>
   15c38:	mov	r1, #12
   15c3c:	str	r1, [r0]
   15c40:	mov	r0, #0
   15c44:	pop	{fp, pc}
   15c48:	b	10eb8 <calloc@plt>
   15c4c:	cmp	r0, #0
   15c50:	movweq	r0, #1
   15c54:	cmn	r0, #1
   15c58:	ble	15c60 <__assert_fail@plt+0x4b14>
   15c5c:	b	10fd8 <malloc@plt>
   15c60:	push	{fp, lr}
   15c64:	mov	fp, sp
   15c68:	bl	11044 <__errno_location@plt>
   15c6c:	mov	r1, #12
   15c70:	str	r1, [r0]
   15c74:	mov	r0, #0
   15c78:	pop	{fp, pc}
   15c7c:	push	{fp, lr}
   15c80:	mov	fp, sp
   15c84:	cmp	r0, #0
   15c88:	beq	15ca4 <__assert_fail@plt+0x4b58>
   15c8c:	cmp	r1, #0
   15c90:	beq	15cb0 <__assert_fail@plt+0x4b64>
   15c94:	cmn	r1, #1
   15c98:	ble	15cbc <__assert_fail@plt+0x4b70>
   15c9c:	pop	{fp, lr}
   15ca0:	b	10f60 <realloc@plt>
   15ca4:	mov	r0, r1
   15ca8:	pop	{fp, lr}
   15cac:	b	15c4c <__assert_fail@plt+0x4b00>
   15cb0:	bl	12d7c <__assert_fail@plt+0x1c30>
   15cb4:	mov	r0, #0
   15cb8:	pop	{fp, pc}
   15cbc:	bl	11044 <__errno_location@plt>
   15cc0:	mov	r1, #12
   15cc4:	str	r1, [r0]
   15cc8:	mov	r0, #0
   15ccc:	pop	{fp, pc}
   15cd0:	push	{r4, r5, r6, sl, fp, lr}
   15cd4:	add	fp, sp, #16
   15cd8:	mov	r4, r0
   15cdc:	bl	10fb4 <__fpending@plt>
   15ce0:	ldr	r6, [r4]
   15ce4:	mov	r5, r0
   15ce8:	mov	r0, r4
   15cec:	bl	12c84 <__assert_fail@plt+0x1b38>
   15cf0:	tst	r6, #32
   15cf4:	bne	15d2c <__assert_fail@plt+0x4be0>
   15cf8:	cmp	r0, #0
   15cfc:	mov	r4, r0
   15d00:	mvnne	r4, #0
   15d04:	cmp	r5, #0
   15d08:	bne	15d38 <__assert_fail@plt+0x4bec>
   15d0c:	cmp	r0, #0
   15d10:	beq	15d38 <__assert_fail@plt+0x4bec>
   15d14:	bl	11044 <__errno_location@plt>
   15d18:	ldr	r0, [r0]
   15d1c:	subs	r4, r0, #9
   15d20:	mvnne	r4, #0
   15d24:	mov	r0, r4
   15d28:	pop	{r4, r5, r6, sl, fp, pc}
   15d2c:	mvn	r4, #0
   15d30:	cmp	r0, #0
   15d34:	beq	15d40 <__assert_fail@plt+0x4bf4>
   15d38:	mov	r0, r4
   15d3c:	pop	{r4, r5, r6, sl, fp, pc}
   15d40:	bl	11044 <__errno_location@plt>
   15d44:	mov	r1, #0
   15d48:	str	r1, [r0]
   15d4c:	mov	r0, r4
   15d50:	pop	{r4, r5, r6, sl, fp, pc}
   15d54:	push	{r4, r5, fp, lr}
   15d58:	add	fp, sp, #8
   15d5c:	ldrd	r4, [r0, #16]
   15d60:	mov	r2, r0
   15d64:	mov	r0, #0
   15d68:	cmp	r5, r4
   15d6c:	pophi	{r4, r5, fp, pc}
   15d70:	ldr	r3, [r2, #4]
   15d74:	ldr	r2, [r2, #8]
   15d78:	subs	r2, r2, r3
   15d7c:	movne	r0, r3
   15d80:	strne	r2, [r1]
   15d84:	pop	{r4, r5, fp, pc}
   15d88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d8c:	add	fp, sp, #24
   15d90:	sub	sp, sp, #8
   15d94:	sub	sp, sp, #4096	; 0x1000
   15d98:	mov	r8, #0
   15d9c:	cmp	r1, #0
   15da0:	beq	15ec0 <__assert_fail@plt+0x4d74>
   15da4:	mov	r6, r1
   15da8:	mov	r5, r0
   15dac:	bl	15fa0 <__assert_fail@plt+0x4e54>
   15db0:	mov	r7, r0
   15db4:	add	r4, sp, #8
   15db8:	cmp	r7, #0
   15dbc:	beq	15e28 <__assert_fail@plt+0x4cdc>
   15dc0:	mov	r0, r5
   15dc4:	mov	r1, r4
   15dc8:	bl	15d54 <__assert_fail@plt+0x4c08>
   15dcc:	cmp	r0, #0
   15dd0:	ldrne	r0, [sp, #8]
   15dd4:	cmpne	r0, #0
   15dd8:	beq	15e00 <__assert_fail@plt+0x4cb4>
   15ddc:	ldr	r1, [r5, #4]
   15de0:	cmp	r0, r6
   15de4:	movcs	r0, r6
   15de8:	subs	r6, r6, r0
   15dec:	add	r1, r1, r0
   15df0:	str	r1, [r5, #4]
   15df4:	beq	15ec0 <__assert_fail@plt+0x4d74>
   15df8:	subs	r7, r7, r0
   15dfc:	beq	15e28 <__assert_fail@plt+0x4cdc>
   15e00:	mov	r0, r5
   15e04:	bl	11068 <fgetc@plt>
   15e08:	cmn	r0, #1
   15e0c:	beq	15eac <__assert_fail@plt+0x4d60>
   15e10:	subs	r6, r6, #1
   15e14:	mov	r0, r6
   15e18:	movwne	r0, #1
   15e1c:	sub	r7, r7, r0
   15e20:	bne	15db8 <__assert_fail@plt+0x4c6c>
   15e24:	b	15ec0 <__assert_fail@plt+0x4d74>
   15e28:	mov	r0, r5
   15e2c:	bl	11080 <fileno@plt>
   15e30:	cmp	r0, #0
   15e34:	blt	15e70 <__assert_fail@plt+0x4d24>
   15e38:	mov	r4, #1
   15e3c:	mov	r2, #0
   15e40:	mov	r3, #0
   15e44:	str	r4, [sp]
   15e48:	bl	10f90 <lseek64@plt>
   15e4c:	cmp	r1, #0
   15e50:	blt	15e70 <__assert_fail@plt+0x4d24>
   15e54:	mov	r0, r5
   15e58:	mov	r2, r6
   15e5c:	mov	r3, #0
   15e60:	str	r4, [sp]
   15e64:	bl	12da4 <__assert_fail@plt+0x1c58>
   15e68:	mov	r8, r0
   15e6c:	b	15ec0 <__assert_fail@plt+0x4d74>
   15e70:	add	r4, sp, #8
   15e74:	cmp	r6, #4096	; 0x1000
   15e78:	mov	r7, r6
   15e7c:	mov	r0, r4
   15e80:	mov	r1, #1
   15e84:	mov	r3, r5
   15e88:	movcs	r7, #4096	; 0x1000
   15e8c:	mov	r2, r7
   15e90:	bl	10fa8 <fread@plt>
   15e94:	cmp	r0, r7
   15e98:	subcs	r6, r6, r7
   15e9c:	bcc	15eac <__assert_fail@plt+0x4d60>
   15ea0:	cmp	r6, #0
   15ea4:	bne	15e74 <__assert_fail@plt+0x4d28>
   15ea8:	b	15ec0 <__assert_fail@plt+0x4d74>
   15eac:	mov	r0, r5
   15eb0:	bl	10f0c <ferror@plt>
   15eb4:	mov	r8, r0
   15eb8:	cmp	r0, #0
   15ebc:	mvnne	r8, #0
   15ec0:	mov	r0, r8
   15ec4:	sub	sp, fp, #24
   15ec8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ecc:	push	{fp, lr}
   15ed0:	mov	fp, sp
   15ed4:	mov	r0, #14
   15ed8:	bl	110ec <nl_langinfo@plt>
   15edc:	movw	r1, #27251	; 0x6a73
   15ee0:	cmp	r0, #0
   15ee4:	movt	r1, #1
   15ee8:	movne	r1, r0
   15eec:	movw	r0, #29093	; 0x71a5
   15ef0:	ldrb	r2, [r1]
   15ef4:	movt	r0, #1
   15ef8:	cmp	r2, #0
   15efc:	movne	r0, r1
   15f00:	pop	{fp, pc}
   15f04:	push	{r4, r5, r6, r7, fp, lr}
   15f08:	add	fp, sp, #16
   15f0c:	sub	sp, sp, #8
   15f10:	add	r5, sp, #4
   15f14:	cmp	r0, #0
   15f18:	mov	r7, r2
   15f1c:	mov	r4, r1
   15f20:	movne	r5, r0
   15f24:	mov	r0, r5
   15f28:	bl	10fc0 <mbrtowc@plt>
   15f2c:	mov	r6, r0
   15f30:	cmp	r7, #0
   15f34:	beq	15f58 <__assert_fail@plt+0x4e0c>
   15f38:	cmn	r6, #2
   15f3c:	bcc	15f58 <__assert_fail@plt+0x4e0c>
   15f40:	mov	r0, #0
   15f44:	bl	15fdc <__assert_fail@plt+0x4e90>
   15f48:	cmp	r0, #0
   15f4c:	ldrbeq	r0, [r4]
   15f50:	moveq	r6, #1
   15f54:	streq	r0, [r5]
   15f58:	mov	r0, r6
   15f5c:	sub	sp, fp, #16
   15f60:	pop	{r4, r5, r6, r7, fp, pc}
   15f64:	cmp	r2, #0
   15f68:	beq	15f98 <__assert_fail@plt+0x4e4c>
   15f6c:	mvn	r3, #0
   15f70:	udiv	r3, r3, r2
   15f74:	cmp	r3, r1
   15f78:	bcs	15f98 <__assert_fail@plt+0x4e4c>
   15f7c:	push	{fp, lr}
   15f80:	mov	fp, sp
   15f84:	bl	11044 <__errno_location@plt>
   15f88:	mov	r1, #12
   15f8c:	str	r1, [r0]
   15f90:	mov	r0, #0
   15f94:	pop	{fp, pc}
   15f98:	mul	r1, r2, r1
   15f9c:	b	15c7c <__assert_fail@plt+0x4b30>
   15fa0:	ldrd	r2, [r0, #16]
   15fa4:	mov	r1, #0
   15fa8:	cmp	r3, r2
   15fac:	bhi	15fd4 <__assert_fail@plt+0x4e88>
   15fb0:	ldmib	r0, {r1, r2}
   15fb4:	ldrb	r3, [r0, #1]
   15fb8:	sub	r1, r2, r1
   15fbc:	mov	r2, #0
   15fc0:	tst	r3, #1
   15fc4:	ldrne	r2, [r0, #36]	; 0x24
   15fc8:	ldrne	r0, [r0, #44]	; 0x2c
   15fcc:	subne	r2, r0, r2
   15fd0:	add	r1, r1, r2
   15fd4:	mov	r0, r1
   15fd8:	bx	lr
   15fdc:	push	{r4, sl, fp, lr}
   15fe0:	add	fp, sp, #8
   15fe4:	sub	sp, sp, #264	; 0x108
   15fe8:	add	r1, sp, #7
   15fec:	movw	r2, #257	; 0x101
   15ff0:	bl	16040 <__assert_fail@plt+0x4ef4>
   15ff4:	mov	r4, #0
   15ff8:	cmp	r0, #0
   15ffc:	bne	16034 <__assert_fail@plt+0x4ee8>
   16000:	movw	r1, #29099	; 0x71ab
   16004:	add	r0, sp, #7
   16008:	movt	r1, #1
   1600c:	bl	10ed0 <strcmp@plt>
   16010:	cmp	r0, #0
   16014:	beq	16034 <__assert_fail@plt+0x4ee8>
   16018:	movw	r1, #29101	; 0x71ad
   1601c:	add	r0, sp, #7
   16020:	movt	r1, #1
   16024:	bl	10ed0 <strcmp@plt>
   16028:	mov	r4, r0
   1602c:	cmp	r0, #0
   16030:	movwne	r4, #1
   16034:	mov	r0, r4
   16038:	sub	sp, fp, #8
   1603c:	pop	{r4, sl, fp, pc}
   16040:	push	{r4, r5, r6, r7, fp, lr}
   16044:	add	fp, sp, #16
   16048:	mov	r4, r1
   1604c:	mov	r1, #0
   16050:	mov	r6, r2
   16054:	bl	110d4 <setlocale@plt>
   16058:	cmp	r0, #0
   1605c:	beq	1608c <__assert_fail@plt+0x4f40>
   16060:	mov	r7, r0
   16064:	bl	1102c <strlen@plt>
   16068:	cmp	r0, r6
   1606c:	bcs	160ac <__assert_fail@plt+0x4f60>
   16070:	add	r2, r0, #1
   16074:	mov	r0, r4
   16078:	mov	r1, r7
   1607c:	bl	10f24 <memcpy@plt>
   16080:	mov	r5, #0
   16084:	mov	r0, r5
   16088:	pop	{r4, r5, r6, r7, fp, pc}
   1608c:	cmp	r6, #0
   16090:	mov	r5, #22
   16094:	movne	r0, #0
   16098:	strbne	r0, [r4]
   1609c:	movne	r0, r5
   160a0:	popne	{r4, r5, r6, r7, fp, pc}
   160a4:	mov	r0, r5
   160a8:	pop	{r4, r5, r6, r7, fp, pc}
   160ac:	mov	r5, #34	; 0x22
   160b0:	cmp	r6, #0
   160b4:	beq	160d4 <__assert_fail@plt+0x4f88>
   160b8:	sub	r6, r6, #1
   160bc:	mov	r0, r4
   160c0:	mov	r1, r7
   160c4:	mov	r2, r6
   160c8:	bl	10f24 <memcpy@plt>
   160cc:	mov	r0, #0
   160d0:	strb	r0, [r4, r6]
   160d4:	mov	r0, r5
   160d8:	pop	{r4, r5, r6, r7, fp, pc}
   160dc:	mov	r1, #0
   160e0:	b	110d4 <setlocale@plt>
   160e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   160e8:	mov	r7, r0
   160ec:	ldr	r6, [pc, #72]	; 1613c <__assert_fail@plt+0x4ff0>
   160f0:	ldr	r5, [pc, #72]	; 16140 <__assert_fail@plt+0x4ff4>
   160f4:	add	r6, pc, r6
   160f8:	add	r5, pc, r5
   160fc:	sub	r6, r6, r5
   16100:	mov	r8, r1
   16104:	mov	r9, r2
   16108:	bl	10e98 <calloc@plt-0x20>
   1610c:	asrs	r6, r6, #2
   16110:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16114:	mov	r4, #0
   16118:	add	r4, r4, #1
   1611c:	ldr	r3, [r5], #4
   16120:	mov	r2, r9
   16124:	mov	r1, r8
   16128:	mov	r0, r7
   1612c:	blx	r3
   16130:	cmp	r6, r4
   16134:	bne	16118 <__assert_fail@plt+0x4fcc>
   16138:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1613c:	andeq	r1, r1, r0, lsl lr
   16140:	andeq	r1, r1, r8, lsl #28
   16144:	bx	lr
   16148:	ldr	r3, [pc, #12]	; 1615c <__assert_fail@plt+0x5010>
   1614c:	mov	r1, #0
   16150:	add	r3, pc, r3
   16154:	ldr	r2, [r3]
   16158:	b	11050 <__cxa_atexit@plt>
   1615c:	muleq	r1, ip, pc	; <UNPREDICTABLE>

Disassembly of section .fini:

00016160 <.fini>:
   16160:	push	{r3, lr}
   16164:	pop	{r3, pc}
