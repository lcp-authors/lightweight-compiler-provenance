
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

00011124 <.init>:
   11124:	push	{r3, lr}
   11128:	bl	11510 <__assert_fail@plt+0x48>
   1112c:	pop	{r3, pc}

Disassembly of section .plt:

00011130 <pthread_mutex_unlock@plt-0x14>:
   11130:	push	{lr}		; (str lr, [sp, #-4]!)
   11134:	ldr	lr, [pc, #4]	; 11140 <pthread_mutex_unlock@plt-0x4>
   11138:	add	lr, pc, lr
   1113c:	ldr	pc, [lr, #8]!
   11140:	andeq	r5, r2, r0, asr #29

00011144 <pthread_mutex_unlock@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #151552	; 0x25000
   1114c:	ldr	pc, [ip, #3776]!	; 0xec0

00011150 <calloc@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #151552	; 0x25000
   11158:	ldr	pc, [ip, #3768]!	; 0xeb8

0001115c <fputs_unlocked@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #151552	; 0x25000
   11164:	ldr	pc, [ip, #3760]!	; 0xeb0

00011168 <wctype@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #151552	; 0x25000
   11170:	ldr	pc, [ip, #3752]!	; 0xea8

00011174 <wcrtomb@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #151552	; 0x25000
   1117c:	ldr	pc, [ip, #3744]!	; 0xea0

00011180 <iswctype@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #151552	; 0x25000
   11188:	ldr	pc, [ip, #3736]!	; 0xe98

0001118c <strcmp@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #151552	; 0x25000
   11194:	ldr	pc, [ip, #3728]!	; 0xe90

00011198 <__gmpz_tdiv_q@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #151552	; 0x25000
   111a0:	ldr	pc, [ip, #3720]!	; 0xe88

000111a4 <strcspn@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #151552	; 0x25000
   111ac:	ldr	pc, [ip, #3712]!	; 0xe80

000111b0 <pthread_mutex_destroy@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #151552	; 0x25000
   111b8:	ldr	pc, [ip, #3704]!	; 0xe78

000111bc <fflush@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #151552	; 0x25000
   111c4:	ldr	pc, [ip, #3696]!	; 0xe70

000111c8 <wcwidth@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #151552	; 0x25000
   111d0:	ldr	pc, [ip, #3688]!	; 0xe68

000111d4 <memmove@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #151552	; 0x25000
   111dc:	ldr	pc, [ip, #3680]!	; 0xe60

000111e0 <free@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #151552	; 0x25000
   111e8:	ldr	pc, [ip, #3672]!	; 0xe58

000111ec <pthread_mutex_lock@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #151552	; 0x25000
   111f4:	ldr	pc, [ip, #3664]!	; 0xe50

000111f8 <_exit@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #151552	; 0x25000
   11200:	ldr	pc, [ip, #3656]!	; 0xe48

00011204 <memcpy@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #151552	; 0x25000
   1120c:	ldr	pc, [ip, #3648]!	; 0xe40

00011210 <__gmpz_sub@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #151552	; 0x25000
   11218:	ldr	pc, [ip, #3640]!	; 0xe38

0001121c <pthread_mutex_init@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #151552	; 0x25000
   11224:	ldr	pc, [ip, #3632]!	; 0xe30

00011228 <towlower@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #151552	; 0x25000
   11230:	ldr	pc, [ip, #3624]!	; 0xe28

00011234 <mbsinit@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #151552	; 0x25000
   1123c:	ldr	pc, [ip, #3616]!	; 0xe20

00011240 <memcmp@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #151552	; 0x25000
   11248:	ldr	pc, [ip, #3608]!	; 0xe18

0001124c <fputc_unlocked@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #151552	; 0x25000
   11254:	ldr	pc, [ip, #3600]!	; 0xe10

00011258 <dcgettext@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #151552	; 0x25000
   11260:	ldr	pc, [ip, #3592]!	; 0xe08

00011264 <__gmpz_get_str@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #151552	; 0x25000
   1126c:	ldr	pc, [ip, #3584]!	; 0xe00

00011270 <realloc@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #151552	; 0x25000
   11278:	ldr	pc, [ip, #3576]!	; 0xdf8

0001127c <__gmpz_mul@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #151552	; 0x25000
   11284:	ldr	pc, [ip, #3568]!	; 0xdf0

00011288 <textdomain@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #151552	; 0x25000
   11290:	ldr	pc, [ip, #3560]!	; 0xde8

00011294 <iswcntrl@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #151552	; 0x25000
   1129c:	ldr	pc, [ip, #3552]!	; 0xde0

000112a0 <__gmpz_out_str@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #151552	; 0x25000
   112a8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112ac <iswprint@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #151552	; 0x25000
   112b4:	ldr	pc, [ip, #3536]!	; 0xdd0

000112b8 <fwrite@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #151552	; 0x25000
   112c0:	ldr	pc, [ip, #3528]!	; 0xdc8

000112c4 <lseek64@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #151552	; 0x25000
   112cc:	ldr	pc, [ip, #3520]!	; 0xdc0

000112d0 <__ctype_get_mb_cur_max@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #151552	; 0x25000
   112d8:	ldr	pc, [ip, #3512]!	; 0xdb8

000112dc <__fpending@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #151552	; 0x25000
   112e4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112e8 <mbrtowc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #151552	; 0x25000
   112f0:	ldr	pc, [ip, #3496]!	; 0xda8

000112f4 <error@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #151552	; 0x25000
   112fc:	ldr	pc, [ip, #3488]!	; 0xda0

00011300 <strcoll@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #151552	; 0x25000
   11308:	ldr	pc, [ip, #3480]!	; 0xd98

0001130c <puts@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #151552	; 0x25000
   11314:	ldr	pc, [ip, #3472]!	; 0xd90

00011318 <malloc@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #151552	; 0x25000
   11320:	ldr	pc, [ip, #3464]!	; 0xd88

00011324 <__libc_start_main@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #151552	; 0x25000
   1132c:	ldr	pc, [ip, #3456]!	; 0xd80

00011330 <__freading@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #151552	; 0x25000
   11338:	ldr	pc, [ip, #3448]!	; 0xd78

0001133c <__ctype_tolower_loc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #151552	; 0x25000
   11344:	ldr	pc, [ip, #3440]!	; 0xd70

00011348 <__ctype_toupper_loc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #151552	; 0x25000
   11350:	ldr	pc, [ip, #3432]!	; 0xd68

00011354 <__gmon_start__@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #151552	; 0x25000
   1135c:	ldr	pc, [ip, #3424]!	; 0xd60

00011360 <mempcpy@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #151552	; 0x25000
   11368:	ldr	pc, [ip, #3416]!	; 0xd58

0001136c <getopt_long@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #151552	; 0x25000
   11374:	ldr	pc, [ip, #3408]!	; 0xd50

00011378 <__ctype_b_loc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #151552	; 0x25000
   11380:	ldr	pc, [ip, #3400]!	; 0xd48

00011384 <exit@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #151552	; 0x25000
   1138c:	ldr	pc, [ip, #3392]!	; 0xd40

00011390 <strlen@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #151552	; 0x25000
   11398:	ldr	pc, [ip, #3384]!	; 0xd38

0001139c <strchr@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #151552	; 0x25000
   113a4:	ldr	pc, [ip, #3376]!	; 0xd30

000113a8 <__gmpz_tdiv_r@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #151552	; 0x25000
   113b0:	ldr	pc, [ip, #3368]!	; 0xd28

000113b4 <__gmpz_clear@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #151552	; 0x25000
   113bc:	ldr	pc, [ip, #3360]!	; 0xd20

000113c0 <__errno_location@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #151552	; 0x25000
   113c8:	ldr	pc, [ip, #3352]!	; 0xd18

000113cc <iswalnum@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #151552	; 0x25000
   113d4:	ldr	pc, [ip, #3344]!	; 0xd10

000113d8 <__cxa_atexit@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #151552	; 0x25000
   113e0:	ldr	pc, [ip, #3336]!	; 0xd08

000113e4 <memset@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #151552	; 0x25000
   113ec:	ldr	pc, [ip, #3328]!	; 0xd00

000113f0 <btowc@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #151552	; 0x25000
   113f8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113fc <__printf_chk@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #151552	; 0x25000
   11404:	ldr	pc, [ip, #3312]!	; 0xcf0

00011408 <fileno@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #151552	; 0x25000
   11410:	ldr	pc, [ip, #3304]!	; 0xce8

00011414 <__fprintf_chk@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #151552	; 0x25000
   1141c:	ldr	pc, [ip, #3296]!	; 0xce0

00011420 <memchr@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #151552	; 0x25000
   11428:	ldr	pc, [ip, #3288]!	; 0xcd8

0001142c <fclose@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #151552	; 0x25000
   11434:	ldr	pc, [ip, #3280]!	; 0xcd0

00011438 <fseeko64@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #151552	; 0x25000
   11440:	ldr	pc, [ip, #3272]!	; 0xcc8

00011444 <__gmpz_init_set_ui@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #151552	; 0x25000
   1144c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011450 <__overflow@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #151552	; 0x25000
   11458:	ldr	pc, [ip, #3256]!	; 0xcb8

0001145c <setlocale@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #151552	; 0x25000
   11464:	ldr	pc, [ip, #3248]!	; 0xcb0

00011468 <strrchr@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #151552	; 0x25000
   11470:	ldr	pc, [ip, #3240]!	; 0xca8

00011474 <nl_langinfo@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #151552	; 0x25000
   1147c:	ldr	pc, [ip, #3232]!	; 0xca0

00011480 <__gmpz_add@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #151552	; 0x25000
   11488:	ldr	pc, [ip, #3224]!	; 0xc98

0001148c <__gmpz_init_set_str@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #151552	; 0x25000
   11494:	ldr	pc, [ip, #3216]!	; 0xc90

00011498 <bindtextdomain@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #151552	; 0x25000
   114a0:	ldr	pc, [ip, #3208]!	; 0xc88

000114a4 <towupper@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #151552	; 0x25000
   114ac:	ldr	pc, [ip, #3200]!	; 0xc80

000114b0 <strncmp@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #151552	; 0x25000
   114b8:	ldr	pc, [ip, #3192]!	; 0xc78

000114bc <abort@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #151552	; 0x25000
   114c4:	ldr	pc, [ip, #3184]!	; 0xc70

000114c8 <__assert_fail@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #151552	; 0x25000
   114d0:	ldr	pc, [ip, #3176]!	; 0xc68

Disassembly of section .text:

000114d4 <.text>:
   114d4:	mov	fp, #0
   114d8:	mov	lr, #0
   114dc:	pop	{r1}		; (ldr r1, [sp], #4)
   114e0:	mov	r2, sp
   114e4:	push	{r2}		; (str r2, [sp, #-4]!)
   114e8:	push	{r0}		; (str r0, [sp, #-4]!)
   114ec:	ldr	ip, [pc, #16]	; 11504 <__assert_fail@plt+0x3c>
   114f0:	push	{ip}		; (str ip, [sp, #-4]!)
   114f4:	ldr	r0, [pc, #12]	; 11508 <__assert_fail@plt+0x40>
   114f8:	ldr	r3, [pc, #12]	; 1150c <__assert_fail@plt+0x44>
   114fc:	bl	11324 <__libc_start_main@plt>
   11500:	bl	114bc <abort@plt>
   11504:	andeq	r4, r2, r8, ror #27
   11508:	andeq	r3, r1, r0, ror r2
   1150c:	andeq	r4, r2, r8, lsl #27
   11510:	ldr	r3, [pc, #20]	; 1152c <__assert_fail@plt+0x64>
   11514:	ldr	r2, [pc, #20]	; 11530 <__assert_fail@plt+0x68>
   11518:	add	r3, pc, r3
   1151c:	ldr	r2, [r3, r2]
   11520:	cmp	r2, #0
   11524:	bxeq	lr
   11528:	b	11354 <__gmon_start__@plt>
   1152c:	andeq	r5, r2, r0, ror #21
   11530:	andeq	r0, r0, ip, lsr r1
   11534:	ldr	r0, [pc, #24]	; 11554 <__assert_fail@plt+0x8c>
   11538:	ldr	r3, [pc, #24]	; 11558 <__assert_fail@plt+0x90>
   1153c:	cmp	r3, r0
   11540:	bxeq	lr
   11544:	ldr	r3, [pc, #16]	; 1155c <__assert_fail@plt+0x94>
   11548:	cmp	r3, #0
   1154c:	bxeq	lr
   11550:	bx	r3
   11554:	andeq	r7, r3, ip, lsl #3
   11558:	andeq	r7, r3, ip, lsl #3
   1155c:	andeq	r0, r0, r0
   11560:	ldr	r0, [pc, #36]	; 1158c <__assert_fail@plt+0xc4>
   11564:	ldr	r1, [pc, #36]	; 11590 <__assert_fail@plt+0xc8>
   11568:	sub	r1, r1, r0
   1156c:	asr	r1, r1, #2
   11570:	add	r1, r1, r1, lsr #31
   11574:	asrs	r1, r1, #1
   11578:	bxeq	lr
   1157c:	ldr	r3, [pc, #16]	; 11594 <__assert_fail@plt+0xcc>
   11580:	cmp	r3, #0
   11584:	bxeq	lr
   11588:	bx	r3
   1158c:	andeq	r7, r3, ip, lsl #3
   11590:	andeq	r7, r3, ip, lsl #3
   11594:	andeq	r0, r0, r0
   11598:	push	{r4, lr}
   1159c:	ldr	r4, [pc, #24]	; 115bc <__assert_fail@plt+0xf4>
   115a0:	ldrb	r3, [r4]
   115a4:	cmp	r3, #0
   115a8:	popne	{r4, pc}
   115ac:	bl	11534 <__assert_fail@plt+0x6c>
   115b0:	mov	r3, #1
   115b4:	strb	r3, [r4]
   115b8:	pop	{r4, pc}
   115bc:	andeq	r7, r3, ip, lsr #3
   115c0:	b	11560 <__assert_fail@plt+0x98>
   115c4:	ldrb	r3, [r0]
   115c8:	cmp	r3, #45	; 0x2d
   115cc:	addeq	r0, r0, #1
   115d0:	ldrb	r3, [r0]
   115d4:	sub	r3, r3, #48	; 0x30
   115d8:	cmp	r3, #9
   115dc:	bhi	115f4 <__assert_fail@plt+0x12c>
   115e0:	ldrb	r3, [r0, #1]!
   115e4:	cmp	r3, #0
   115e8:	bne	115d0 <__assert_fail@plt+0x108>
   115ec:	mov	r0, #1
   115f0:	bx	lr
   115f4:	mov	r0, #0
   115f8:	bx	lr
   115fc:	str	r4, [sp, #-8]!
   11600:	str	lr, [sp, #4]
   11604:	movw	r3, #29104	; 0x71b0
   11608:	movt	r3, #3
   1160c:	ldr	r4, [r3]
   11610:	ldr	r3, [r4]
   11614:	cmp	r3, #0
   11618:	moveq	r0, #0
   1161c:	beq	11644 <__assert_fail@plt+0x17c>
   11620:	mov	r1, r0
   11624:	mov	r0, r3
   11628:	bl	1118c <strcmp@plt>
   1162c:	clz	r0, r0
   11630:	lsr	r0, r0, #5
   11634:	movw	r3, #29104	; 0x71b0
   11638:	movt	r3, #3
   1163c:	add	r4, r4, r0, lsl #2
   11640:	str	r4, [r3]
   11644:	ldr	r4, [sp]
   11648:	add	sp, sp, #4
   1164c:	pop	{pc}		; (ldr pc, [sp], #4)
   11650:	push	{lr}		; (str lr, [sp, #-4]!)
   11654:	sub	sp, sp, #60	; 0x3c
   11658:	subs	r5, r0, #0
   1165c:	beq	116a4 <__assert_fail@plt+0x1dc>
   11660:	movw	r3, #29088	; 0x71a0
   11664:	movt	r3, #3
   11668:	ldr	r4, [r3]
   1166c:	mov	r2, #5
   11670:	movw	r1, #20068	; 0x4e64
   11674:	movt	r1, #2
   11678:	mov	r0, #0
   1167c:	bl	11258 <dcgettext@plt>
   11680:	movw	r3, #29116	; 0x71bc
   11684:	movt	r3, #3
   11688:	ldr	r3, [r3]
   1168c:	mov	r2, r0
   11690:	mov	r1, #1
   11694:	mov	r0, r4
   11698:	bl	11414 <__fprintf_chk@plt>
   1169c:	mov	r0, r5
   116a0:	bl	11384 <exit@plt>
   116a4:	mov	r2, #5
   116a8:	movw	r1, #20108	; 0x4e8c
   116ac:	movt	r1, #2
   116b0:	mov	r0, #0
   116b4:	bl	11258 <dcgettext@plt>
   116b8:	movw	r3, #29116	; 0x71bc
   116bc:	movt	r3, #3
   116c0:	ldr	r2, [r3]
   116c4:	mov	r3, r2
   116c8:	mov	r1, r0
   116cc:	mov	r0, #1
   116d0:	bl	113fc <__printf_chk@plt>
   116d4:	movw	r3, #29092	; 0x71a4
   116d8:	movt	r3, #3
   116dc:	ldr	r0, [r3]
   116e0:	ldr	r3, [r0, #20]
   116e4:	ldr	r2, [r0, #24]
   116e8:	cmp	r3, r2
   116ec:	addcc	r2, r3, #1
   116f0:	strcc	r2, [r0, #20]
   116f4:	movcc	r2, #10
   116f8:	strbcc	r2, [r3]
   116fc:	bcs	11978 <__assert_fail@plt+0x4b0>
   11700:	mov	r2, #5
   11704:	movw	r1, #20148	; 0x4eb4
   11708:	movt	r1, #2
   1170c:	mov	r0, #0
   11710:	bl	11258 <dcgettext@plt>
   11714:	movw	r4, #29092	; 0x71a4
   11718:	movt	r4, #3
   1171c:	ldr	r1, [r4]
   11720:	bl	1115c <fputs_unlocked@plt>
   11724:	mov	r2, #5
   11728:	movw	r1, #20196	; 0x4ee4
   1172c:	movt	r1, #2
   11730:	mov	r0, #0
   11734:	bl	11258 <dcgettext@plt>
   11738:	ldr	r1, [r4]
   1173c:	bl	1115c <fputs_unlocked@plt>
   11740:	mov	r2, #5
   11744:	movw	r1, #20252	; 0x4f1c
   11748:	movt	r1, #2
   1174c:	mov	r0, #0
   11750:	bl	11258 <dcgettext@plt>
   11754:	ldr	r1, [r4]
   11758:	bl	1115c <fputs_unlocked@plt>
   1175c:	mov	r2, #5
   11760:	movw	r1, #20528	; 0x5030
   11764:	movt	r1, #2
   11768:	mov	r0, #0
   1176c:	bl	11258 <dcgettext@plt>
   11770:	ldr	r1, [r4]
   11774:	bl	1115c <fputs_unlocked@plt>
   11778:	mov	r2, #5
   1177c:	movw	r1, #20820	; 0x5154
   11780:	movt	r1, #2
   11784:	mov	r0, #0
   11788:	bl	11258 <dcgettext@plt>
   1178c:	ldr	r1, [r4]
   11790:	bl	1115c <fputs_unlocked@plt>
   11794:	mov	r2, #5
   11798:	movw	r1, #20936	; 0x51c8
   1179c:	movt	r1, #2
   117a0:	mov	r0, #0
   117a4:	bl	11258 <dcgettext@plt>
   117a8:	ldr	r1, [r4]
   117ac:	bl	1115c <fputs_unlocked@plt>
   117b0:	mov	r2, #5
   117b4:	movw	r1, #21124	; 0x5284
   117b8:	movt	r1, #2
   117bc:	mov	r0, #0
   117c0:	bl	11258 <dcgettext@plt>
   117c4:	ldr	r1, [r4]
   117c8:	bl	1115c <fputs_unlocked@plt>
   117cc:	mov	r2, #5
   117d0:	movw	r1, #21436	; 0x53bc
   117d4:	movt	r1, #2
   117d8:	mov	r0, #0
   117dc:	bl	11258 <dcgettext@plt>
   117e0:	ldr	r1, [r4]
   117e4:	bl	1115c <fputs_unlocked@plt>
   117e8:	mov	r2, #5
   117ec:	movw	r1, #21640	; 0x5488
   117f0:	movt	r1, #2
   117f4:	mov	r0, #0
   117f8:	bl	11258 <dcgettext@plt>
   117fc:	ldr	r1, [r4]
   11800:	bl	1115c <fputs_unlocked@plt>
   11804:	mov	r2, #5
   11808:	movw	r1, #21932	; 0x55ac
   1180c:	movt	r1, #2
   11810:	mov	r0, #0
   11814:	bl	11258 <dcgettext@plt>
   11818:	ldr	r1, [r4]
   1181c:	bl	1115c <fputs_unlocked@plt>
   11820:	movw	r0, #19984	; 0x4e10
   11824:	movt	r0, #2
   11828:	ldr	r1, [r0]
   1182c:	ldr	r3, [r0, #4]
   11830:	str	r1, [sp]
   11834:	str	r3, [sp, #4]
   11838:	ldrd	r2, [r0, #8]
   1183c:	strd	r2, [sp, #8]
   11840:	ldrd	r2, [r0, #16]
   11844:	strd	r2, [sp, #16]
   11848:	ldrd	r2, [r0, #24]
   1184c:	strd	r2, [sp, #24]
   11850:	ldrd	r2, [r0, #32]
   11854:	strd	r2, [sp, #32]
   11858:	ldrd	r2, [r0, #40]	; 0x28
   1185c:	strd	r2, [sp, #40]	; 0x28
   11860:	ldrd	r2, [r0, #48]	; 0x30
   11864:	strd	r2, [sp, #48]	; 0x30
   11868:	cmp	r1, #0
   1186c:	moveq	r4, sp
   11870:	beq	1189c <__assert_fail@plt+0x3d4>
   11874:	mov	r4, sp
   11878:	movw	r6, #20060	; 0x4e5c
   1187c:	movt	r6, #2
   11880:	mov	r0, r6
   11884:	bl	1118c <strcmp@plt>
   11888:	cmp	r0, #0
   1188c:	beq	1189c <__assert_fail@plt+0x3d4>
   11890:	ldr	r1, [r4, #8]!
   11894:	cmp	r1, #0
   11898:	bne	11880 <__assert_fail@plt+0x3b8>
   1189c:	ldr	r4, [r4, #4]
   118a0:	cmp	r4, #0
   118a4:	beq	11a0c <__assert_fail@plt+0x544>
   118a8:	mov	r2, #5
   118ac:	movw	r1, #22088	; 0x5648
   118b0:	movt	r1, #2
   118b4:	mov	r0, #0
   118b8:	bl	11258 <dcgettext@plt>
   118bc:	movw	r3, #22112	; 0x5660
   118c0:	movt	r3, #2
   118c4:	movw	r2, #22152	; 0x5688
   118c8:	movt	r2, #2
   118cc:	mov	r1, r0
   118d0:	mov	r0, #1
   118d4:	bl	113fc <__printf_chk@plt>
   118d8:	mov	r1, #0
   118dc:	mov	r0, #5
   118e0:	bl	1145c <setlocale@plt>
   118e4:	cmp	r0, #0
   118e8:	beq	11904 <__assert_fail@plt+0x43c>
   118ec:	mov	r2, #3
   118f0:	movw	r1, #22168	; 0x5698
   118f4:	movt	r1, #2
   118f8:	bl	114b0 <strncmp@plt>
   118fc:	cmp	r0, #0
   11900:	bne	1198c <__assert_fail@plt+0x4c4>
   11904:	mov	r2, #5
   11908:	movw	r1, #22244	; 0x56e4
   1190c:	movt	r1, #2
   11910:	mov	r0, #0
   11914:	bl	11258 <dcgettext@plt>
   11918:	movw	r6, #20060	; 0x4e5c
   1191c:	movt	r6, #2
   11920:	mov	r3, r6
   11924:	movw	r2, #22112	; 0x5660
   11928:	movt	r2, #2
   1192c:	mov	r1, r0
   11930:	mov	r0, #1
   11934:	bl	113fc <__printf_chk@plt>
   11938:	mov	r2, #5
   1193c:	movw	r1, #22272	; 0x5700
   11940:	movt	r1, #2
   11944:	mov	r0, #0
   11948:	bl	11258 <dcgettext@plt>
   1194c:	mov	r1, r0
   11950:	movw	r2, #22892	; 0x596c
   11954:	movt	r2, #2
   11958:	movw	r3, #20932	; 0x51c4
   1195c:	movt	r3, #2
   11960:	cmp	r4, r6
   11964:	moveq	r3, r2
   11968:	mov	r2, r4
   1196c:	mov	r0, #1
   11970:	bl	113fc <__printf_chk@plt>
   11974:	b	1169c <__assert_fail@plt+0x1d4>
   11978:	mov	r1, #10
   1197c:	bl	11450 <__overflow@plt>
   11980:	b	11700 <__assert_fail@plt+0x238>
   11984:	movw	r4, #20060	; 0x4e5c
   11988:	movt	r4, #2
   1198c:	mov	r2, #5
   11990:	movw	r1, #22172	; 0x569c
   11994:	movt	r1, #2
   11998:	mov	r0, #0
   1199c:	bl	11258 <dcgettext@plt>
   119a0:	movw	r3, #29092	; 0x71a4
   119a4:	movt	r3, #3
   119a8:	ldr	r1, [r3]
   119ac:	bl	1115c <fputs_unlocked@plt>
   119b0:	b	11904 <__assert_fail@plt+0x43c>
   119b4:	mov	r2, #5
   119b8:	movw	r1, #22244	; 0x56e4
   119bc:	movt	r1, #2
   119c0:	mov	r0, #0
   119c4:	bl	11258 <dcgettext@plt>
   119c8:	movw	r4, #20060	; 0x4e5c
   119cc:	movt	r4, #2
   119d0:	mov	r3, r4
   119d4:	movw	r2, #22112	; 0x5660
   119d8:	movt	r2, #2
   119dc:	mov	r1, r0
   119e0:	mov	r0, #1
   119e4:	bl	113fc <__printf_chk@plt>
   119e8:	mov	r2, #5
   119ec:	movw	r1, #22272	; 0x5700
   119f0:	movt	r1, #2
   119f4:	mov	r0, #0
   119f8:	bl	11258 <dcgettext@plt>
   119fc:	mov	r1, r0
   11a00:	movw	r3, #22892	; 0x596c
   11a04:	movt	r3, #2
   11a08:	b	11968 <__assert_fail@plt+0x4a0>
   11a0c:	mov	r2, #5
   11a10:	movw	r1, #22088	; 0x5648
   11a14:	movt	r1, #2
   11a18:	mov	r0, #0
   11a1c:	bl	11258 <dcgettext@plt>
   11a20:	movw	r3, #22112	; 0x5660
   11a24:	movt	r3, #2
   11a28:	movw	r2, #22152	; 0x5688
   11a2c:	movt	r2, #2
   11a30:	mov	r1, r0
   11a34:	mov	r0, #1
   11a38:	bl	113fc <__printf_chk@plt>
   11a3c:	mov	r1, #0
   11a40:	mov	r0, #5
   11a44:	bl	1145c <setlocale@plt>
   11a48:	cmp	r0, #0
   11a4c:	beq	119b4 <__assert_fail@plt+0x4ec>
   11a50:	mov	r2, #3
   11a54:	movw	r1, #22168	; 0x5698
   11a58:	movt	r1, #2
   11a5c:	bl	114b0 <strncmp@plt>
   11a60:	cmp	r0, #0
   11a64:	bne	11984 <__assert_fail@plt+0x4bc>
   11a68:	mov	r2, #5
   11a6c:	movw	r1, #22244	; 0x56e4
   11a70:	movt	r1, #2
   11a74:	mov	r0, #0
   11a78:	bl	11258 <dcgettext@plt>
   11a7c:	movw	r4, #20060	; 0x4e5c
   11a80:	movt	r4, #2
   11a84:	mov	r3, r4
   11a88:	movw	r2, #22112	; 0x5660
   11a8c:	movt	r2, #2
   11a90:	mov	r1, r0
   11a94:	mov	r0, #1
   11a98:	bl	113fc <__printf_chk@plt>
   11a9c:	mov	r2, #5
   11aa0:	movw	r1, #22272	; 0x5700
   11aa4:	movt	r1, #2
   11aa8:	mov	r0, #0
   11aac:	bl	11258 <dcgettext@plt>
   11ab0:	mov	r1, r0
   11ab4:	movw	r3, #22892	; 0x596c
   11ab8:	movt	r3, #2
   11abc:	b	11968 <__assert_fail@plt+0x4a0>
   11ac0:	strd	r4, [sp, #-16]!
   11ac4:	str	r6, [sp, #8]
   11ac8:	str	lr, [sp, #12]
   11acc:	movw	r3, #29104	; 0x71b0
   11ad0:	movt	r3, #3
   11ad4:	ldr	r4, [r3]
   11ad8:	ldr	r3, [r4]
   11adc:	cmp	r3, #0
   11ae0:	beq	11af4 <__assert_fail@plt+0x62c>
   11ae4:	ldrd	r4, [sp]
   11ae8:	ldr	r6, [sp, #8]
   11aec:	add	sp, sp, #12
   11af0:	pop	{pc}		; (ldr pc, [sp], #4)
   11af4:	mov	r2, #5
   11af8:	movw	r1, #22324	; 0x5734
   11afc:	movt	r1, #2
   11b00:	mov	r0, #0
   11b04:	bl	11258 <dcgettext@plt>
   11b08:	mov	r5, r0
   11b0c:	ldr	r2, [r4, #-4]
   11b10:	mov	r1, #8
   11b14:	mov	r0, #0
   11b18:	bl	15ca8 <__assert_fail@plt+0x47e0>
   11b1c:	mov	r3, r0
   11b20:	mov	r2, r5
   11b24:	mov	r1, #0
   11b28:	mov	r0, #2
   11b2c:	bl	112f4 <error@plt>
   11b30:	ldr	r3, [r0]
   11b34:	cmp	r3, #0
   11b38:	beq	11b88 <__assert_fail@plt+0x6c0>
   11b3c:	cmp	r3, #1
   11b40:	bne	11b7c <__assert_fail@plt+0x6b4>
   11b44:	ldr	r3, [r0, #4]
   11b48:	ldrb	r2, [r3]
   11b4c:	cmp	r2, #0
   11b50:	beq	11b98 <__assert_fail@plt+0x6d0>
   11b54:	cmp	r2, #45	; 0x2d
   11b58:	addeq	r3, r3, #1
   11b5c:	ldrb	r2, [r3]
   11b60:	cmp	r2, #48	; 0x30
   11b64:	bne	11ba0 <__assert_fail@plt+0x6d8>
   11b68:	ldrb	r2, [r3, #1]!
   11b6c:	cmp	r2, #0
   11b70:	bne	11b5c <__assert_fail@plt+0x694>
   11b74:	mov	r0, #1
   11b78:	bx	lr
   11b7c:	str	r4, [sp, #-8]!
   11b80:	str	lr, [sp, #4]
   11b84:	bl	114bc <abort@plt>
   11b88:	ldr	r0, [r0, #8]
   11b8c:	clz	r0, r0
   11b90:	lsr	r0, r0, #5
   11b94:	bx	lr
   11b98:	mov	r0, #1
   11b9c:	bx	lr
   11ba0:	mov	r0, #0
   11ba4:	bx	lr
   11ba8:	strd	r4, [sp, #-16]!
   11bac:	str	r6, [sp, #8]
   11bb0:	str	lr, [sp, #12]
   11bb4:	mov	r5, r0
   11bb8:	mov	r0, #16
   11bbc:	bl	242bc <__assert_fail@plt+0x12df4>
   11bc0:	mov	r4, r0
   11bc4:	mov	r3, #1
   11bc8:	str	r3, [r0]
   11bcc:	mov	r0, r5
   11bd0:	bl	24728 <__assert_fail@plt+0x13260>
   11bd4:	str	r0, [r4, #4]
   11bd8:	mov	r0, r4
   11bdc:	ldrd	r4, [sp]
   11be0:	ldr	r6, [sp, #8]
   11be4:	add	sp, sp, #12
   11be8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bec:	strd	r4, [sp, #-16]!
   11bf0:	str	r6, [sp, #8]
   11bf4:	str	lr, [sp, #12]
   11bf8:	ldr	r3, [r0]
   11bfc:	cmp	r3, #0
   11c00:	beq	11c6c <__assert_fail@plt+0x7a4>
   11c04:	mov	r4, r0
   11c08:	cmp	r3, #1
   11c0c:	bne	11c68 <__assert_fail@plt+0x7a0>
   11c10:	ldr	r6, [r0, #4]
   11c14:	mov	r0, r6
   11c18:	bl	115c4 <__assert_fail@plt+0xfc>
   11c1c:	subs	r5, r0, #0
   11c20:	beq	11c70 <__assert_fail@plt+0x7a8>
   11c24:	mov	r2, #10
   11c28:	mov	r1, r6
   11c2c:	add	r0, r4, #4
   11c30:	bl	1148c <__gmpz_init_set_str@plt>
   11c34:	cmp	r0, #0
   11c38:	bne	11c50 <__assert_fail@plt+0x788>
   11c3c:	mov	r0, r6
   11c40:	bl	135a4 <__assert_fail@plt+0x20dc>
   11c44:	mov	r3, #0
   11c48:	str	r3, [r4]
   11c4c:	b	11c70 <__assert_fail@plt+0x7a8>
   11c50:	mov	r3, r6
   11c54:	movw	r2, #23008	; 0x59e0
   11c58:	movt	r2, #2
   11c5c:	mov	r1, #34	; 0x22
   11c60:	mov	r0, #3
   11c64:	bl	112f4 <error@plt>
   11c68:	bl	114bc <abort@plt>
   11c6c:	mov	r5, #1
   11c70:	mov	r0, r5
   11c74:	ldrd	r4, [sp]
   11c78:	ldr	r6, [sp, #8]
   11c7c:	add	sp, sp, #12
   11c80:	pop	{pc}		; (ldr pc, [sp], #4)
   11c84:	strd	r4, [sp, #-16]!
   11c88:	str	r6, [sp, #8]
   11c8c:	str	lr, [sp, #12]
   11c90:	ldr	r3, [r0]
   11c94:	cmp	r3, #0
   11c98:	beq	11cb4 <__assert_fail@plt+0x7ec>
   11c9c:	cmp	r3, #1
   11ca0:	bne	11ce8 <__assert_fail@plt+0x820>
   11ca4:	ldrd	r4, [sp]
   11ca8:	ldr	r6, [sp, #8]
   11cac:	add	sp, sp, #12
   11cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   11cb4:	mov	r4, r0
   11cb8:	add	r5, r0, #4
   11cbc:	mov	r2, r5
   11cc0:	mov	r1, #10
   11cc4:	mov	r0, #0
   11cc8:	bl	11264 <__gmpz_get_str@plt>
   11ccc:	mov	r6, r0
   11cd0:	mov	r0, r5
   11cd4:	bl	113b4 <__gmpz_clear@plt>
   11cd8:	str	r6, [r4, #4]
   11cdc:	mov	r3, #1
   11ce0:	str	r3, [r4]
   11ce4:	b	11ca4 <__assert_fail@plt+0x7dc>
   11ce8:	bl	114bc <abort@plt>
   11cec:	str	r4, [sp, #-8]!
   11cf0:	str	lr, [sp, #4]
   11cf4:	mov	r4, r0
   11cf8:	ldr	r3, [r0]
   11cfc:	cmp	r3, #1
   11d00:	beq	11d20 <__assert_fail@plt+0x858>
   11d04:	add	r0, r0, #4
   11d08:	bl	113b4 <__gmpz_clear@plt>
   11d0c:	mov	r0, r4
   11d10:	bl	135a4 <__assert_fail@plt+0x20dc>
   11d14:	ldr	r4, [sp]
   11d18:	add	sp, sp, #4
   11d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d20:	ldr	r0, [r0, #4]
   11d24:	bl	135a4 <__assert_fail@plt+0x20dc>
   11d28:	b	11d0c <__assert_fail@plt+0x844>
   11d2c:	strd	r4, [sp, #-16]!
   11d30:	str	r6, [sp, #8]
   11d34:	str	lr, [sp, #12]
   11d38:	mov	r5, r0
   11d3c:	mov	r0, #16
   11d40:	bl	242bc <__assert_fail@plt+0x12df4>
   11d44:	mov	r4, r0
   11d48:	mov	r3, #0
   11d4c:	str	r3, [r0], #4
   11d50:	mov	r1, r5
   11d54:	bl	11444 <__gmpz_init_set_ui@plt>
   11d58:	mov	r0, r4
   11d5c:	ldrd	r4, [sp]
   11d60:	ldr	r6, [sp, #8]
   11d64:	add	sp, sp, #12
   11d68:	pop	{pc}		; (ldr pc, [sp], #4)
   11d6c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11d70:	strd	r6, [sp, #8]
   11d74:	strd	r8, [sp, #16]
   11d78:	str	lr, [sp, #24]
   11d7c:	sub	sp, sp, #372	; 0x174
   11d80:	mov	r5, r0
   11d84:	mov	r4, r1
   11d88:	bl	11c84 <__assert_fail@plt+0x7bc>
   11d8c:	mov	r0, r4
   11d90:	bl	11c84 <__assert_fail@plt+0x7bc>
   11d94:	mov	r3, #0
   11d98:	str	r3, [sp, #68]	; 0x44
   11d9c:	str	r3, [sp, #72]	; 0x48
   11da0:	str	r3, [sp, #76]	; 0x4c
   11da4:	str	r3, [sp, #336]	; 0x150
   11da8:	str	r3, [sp, #340]	; 0x154
   11dac:	add	r2, sp, #80	; 0x50
   11db0:	str	r2, [sp, #352]	; 0x160
   11db4:	str	r3, [sp, #356]	; 0x164
   11db8:	movw	r3, #29424	; 0x72f0
   11dbc:	movt	r3, #3
   11dc0:	movw	r2, #710	; 0x2c6
   11dc4:	str	r2, [r3]
   11dc8:	ldr	r4, [r4, #4]
   11dcc:	mov	r0, r4
   11dd0:	bl	11390 <strlen@plt>
   11dd4:	add	r2, sp, #336	; 0x150
   11dd8:	mov	r1, r0
   11ddc:	mov	r0, r4
   11de0:	bl	22f68 <__assert_fail@plt+0x11aa0>
   11de4:	cmp	r0, #0
   11de8:	bne	11ea0 <__assert_fail@plt+0x9d8>
   11dec:	ldrb	r3, [sp, #364]	; 0x16c
   11df0:	bfc	r3, #7, #1
   11df4:	strb	r3, [sp, #364]	; 0x16c
   11df8:	ldr	r4, [r5, #4]
   11dfc:	mov	r0, r4
   11e00:	bl	11390 <strlen@plt>
   11e04:	add	r3, sp, #68	; 0x44
   11e08:	str	r3, [sp]
   11e0c:	mov	r3, #0
   11e10:	mov	r2, r0
   11e14:	mov	r1, r4
   11e18:	add	r0, sp, #336	; 0x150
   11e1c:	bl	23920 <__assert_fail@plt+0x12458>
   11e20:	subs	r6, r0, #0
   11e24:	blt	120b4 <__assert_fail@plt+0xbec>
   11e28:	ldr	r4, [sp, #360]	; 0x168
   11e2c:	cmp	r4, #0
   11e30:	beq	11ecc <__assert_fail@plt+0xa04>
   11e34:	ldr	r3, [sp, #76]	; 0x4c
   11e38:	ldr	r3, [r3, #4]
   11e3c:	cmp	r3, #0
   11e40:	blt	11eb8 <__assert_fail@plt+0x9f0>
   11e44:	ldr	r2, [r5, #4]
   11e48:	mov	r1, #0
   11e4c:	strb	r1, [r2, r3]
   11e50:	ldr	r0, [r5, #4]
   11e54:	ldr	r3, [sp, #72]	; 0x48
   11e58:	ldr	r3, [r3, #4]
   11e5c:	add	r0, r0, r3
   11e60:	bl	11ba8 <__assert_fail@plt+0x6e0>
   11e64:	mov	r4, r0
   11e68:	ldr	r3, [sp, #68]	; 0x44
   11e6c:	cmp	r3, #0
   11e70:	bne	12128 <__assert_fail@plt+0xc60>
   11e74:	mov	r3, #0
   11e78:	str	r3, [sp, #352]	; 0x160
   11e7c:	add	r0, sp, #336	; 0x150
   11e80:	bl	2374c <__assert_fail@plt+0x12284>
   11e84:	mov	r0, r4
   11e88:	add	sp, sp, #372	; 0x174
   11e8c:	ldrd	r4, [sp]
   11e90:	ldrd	r6, [sp, #8]
   11e94:	ldrd	r8, [sp, #16]
   11e98:	add	sp, sp, #24
   11e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11ea0:	mov	r3, r0
   11ea4:	movw	r2, #23008	; 0x59e0
   11ea8:	movt	r2, #2
   11eac:	mov	r1, #0
   11eb0:	mov	r0, #2
   11eb4:	bl	112f4 <error@plt>
   11eb8:	movw	r0, #20932	; 0x51c4
   11ebc:	movt	r0, #2
   11ec0:	bl	11ba8 <__assert_fail@plt+0x6e0>
   11ec4:	mov	r4, r0
   11ec8:	b	11e68 <__assert_fail@plt+0x9a0>
   11ecc:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   11ed0:	cmp	r0, #1
   11ed4:	moveq	r4, r6
   11ed8:	bne	11eec <__assert_fail@plt+0xa24>
   11edc:	mov	r0, r4
   11ee0:	bl	11d2c <__assert_fail@plt+0x864>
   11ee4:	mov	r4, r0
   11ee8:	b	11e68 <__assert_fail@plt+0x9a0>
   11eec:	ldr	r7, [r5, #4]
   11ef0:	str	r7, [sp, #28]
   11ef4:	mov	r3, #0
   11ef8:	strb	r3, [sp, #12]
   11efc:	mov	r0, #0
   11f00:	mov	r1, #0
   11f04:	strd	r0, [sp, #16]
   11f08:	strb	r3, [sp, #24]
   11f0c:	mov	r5, #1
   11f10:	movw	r8, #23076	; 0x5a24
   11f14:	movt	r8, #2
   11f18:	b	11ffc <__assert_fail@plt+0xb34>
   11f1c:	add	r0, sp, #16
   11f20:	bl	11234 <mbsinit@plt>
   11f24:	cmp	r0, #0
   11f28:	beq	12048 <__assert_fail@plt+0xb80>
   11f2c:	strb	r5, [sp, #12]
   11f30:	ldr	r9, [sp, #28]
   11f34:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   11f38:	mov	r1, r0
   11f3c:	mov	r0, r9
   11f40:	bl	23a58 <__assert_fail@plt+0x12590>
   11f44:	add	r3, sp, #16
   11f48:	mov	r2, r0
   11f4c:	mov	r1, r9
   11f50:	add	r0, sp, #40	; 0x28
   11f54:	bl	13880 <__assert_fail@plt+0x23b8>
   11f58:	str	r0, [sp, #32]
   11f5c:	cmn	r0, #1
   11f60:	streq	r5, [sp, #32]
   11f64:	moveq	r3, #0
   11f68:	strbeq	r3, [sp, #36]	; 0x24
   11f6c:	beq	11fb8 <__assert_fail@plt+0xaf0>
   11f70:	cmn	r0, #2
   11f74:	beq	12064 <__assert_fail@plt+0xb9c>
   11f78:	cmp	r0, #0
   11f7c:	bne	11fa0 <__assert_fail@plt+0xad8>
   11f80:	str	r5, [sp, #32]
   11f84:	ldr	r3, [sp, #28]
   11f88:	ldrb	r3, [r3]
   11f8c:	cmp	r3, #0
   11f90:	bne	1207c <__assert_fail@plt+0xbb4>
   11f94:	ldr	r3, [sp, #40]	; 0x28
   11f98:	cmp	r3, #0
   11f9c:	bne	12098 <__assert_fail@plt+0xbd0>
   11fa0:	strb	r5, [sp, #36]	; 0x24
   11fa4:	add	r0, sp, #16
   11fa8:	bl	11234 <mbsinit@plt>
   11fac:	cmp	r0, #0
   11fb0:	movne	r3, #0
   11fb4:	strbne	r3, [sp, #12]
   11fb8:	strb	r5, [sp, #24]
   11fbc:	ldrb	r3, [sp, #36]	; 0x24
   11fc0:	cmp	r3, #0
   11fc4:	beq	11fd4 <__assert_fail@plt+0xb0c>
   11fc8:	ldr	r3, [sp, #40]	; 0x28
   11fcc:	cmp	r3, #0
   11fd0:	beq	11edc <__assert_fail@plt+0xa14>
   11fd4:	ldr	r3, [sp, #28]
   11fd8:	sub	r2, r3, r7
   11fdc:	cmp	r6, r2
   11fe0:	bls	11edc <__assert_fail@plt+0xa14>
   11fe4:	add	r4, r4, #1
   11fe8:	ldr	r2, [sp, #32]
   11fec:	add	r3, r3, r2
   11ff0:	str	r3, [sp, #28]
   11ff4:	mov	r3, #0
   11ff8:	strb	r3, [sp, #24]
   11ffc:	ldrb	r3, [sp, #24]
   12000:	cmp	r3, #0
   12004:	bne	11fbc <__assert_fail@plt+0xaf4>
   12008:	ldrb	r3, [sp, #12]
   1200c:	cmp	r3, #0
   12010:	bne	11f30 <__assert_fail@plt+0xa68>
   12014:	ldr	r1, [sp, #28]
   12018:	ldrb	r3, [r1]
   1201c:	lsr	r2, r3, #5
   12020:	and	r3, r3, #31
   12024:	ldr	r2, [r8, r2, lsl #2]
   12028:	lsr	r3, r2, r3
   1202c:	tst	r3, #1
   12030:	beq	11f1c <__assert_fail@plt+0xa54>
   12034:	str	r5, [sp, #32]
   12038:	ldrb	r3, [r1]
   1203c:	str	r3, [sp, #40]	; 0x28
   12040:	strb	r5, [sp, #36]	; 0x24
   12044:	b	11fb8 <__assert_fail@plt+0xaf0>
   12048:	ldr	r3, [pc, #236]	; 1213c <__assert_fail@plt+0xc74>
   1204c:	mov	r2, #143	; 0x8f
   12050:	movw	r1, #22364	; 0x575c
   12054:	movt	r1, #2
   12058:	movw	r0, #22380	; 0x576c
   1205c:	movt	r0, #2
   12060:	bl	114c8 <__assert_fail@plt>
   12064:	ldr	r0, [sp, #28]
   12068:	bl	11390 <strlen@plt>
   1206c:	str	r0, [sp, #32]
   12070:	mov	r3, #0
   12074:	strb	r3, [sp, #36]	; 0x24
   12078:	b	11fb8 <__assert_fail@plt+0xaf0>
   1207c:	ldr	r3, [pc, #184]	; 1213c <__assert_fail@plt+0xc74>
   12080:	mov	r2, #171	; 0xab
   12084:	movw	r1, #22364	; 0x575c
   12088:	movt	r1, #2
   1208c:	movw	r0, #22404	; 0x5784
   12090:	movt	r0, #2
   12094:	bl	114c8 <__assert_fail@plt>
   12098:	ldr	r3, [pc, #156]	; 1213c <__assert_fail@plt+0xc74>
   1209c:	mov	r2, #172	; 0xac
   120a0:	movw	r1, #22364	; 0x575c
   120a4:	movt	r1, #2
   120a8:	movw	r0, #22428	; 0x579c
   120ac:	movt	r0, #2
   120b0:	bl	114c8 <__assert_fail@plt>
   120b4:	cmn	r6, #1
   120b8:	bne	120ec <__assert_fail@plt+0xc24>
   120bc:	ldr	r3, [sp, #360]	; 0x168
   120c0:	cmp	r3, #0
   120c4:	beq	120dc <__assert_fail@plt+0xc14>
   120c8:	movw	r0, #20932	; 0x51c4
   120cc:	movt	r0, #2
   120d0:	bl	11ba8 <__assert_fail@plt+0x6e0>
   120d4:	mov	r4, r0
   120d8:	b	11e68 <__assert_fail@plt+0x9a0>
   120dc:	mov	r0, #0
   120e0:	bl	11d2c <__assert_fail@plt+0x864>
   120e4:	mov	r4, r0
   120e8:	b	11e68 <__assert_fail@plt+0x9a0>
   120ec:	cmn	r6, #2
   120f0:	movne	r4, #75	; 0x4b
   120f4:	beq	1211c <__assert_fail@plt+0xc54>
   120f8:	mov	r2, #5
   120fc:	movw	r1, #22448	; 0x57b0
   12100:	movt	r1, #2
   12104:	mov	r0, #0
   12108:	bl	11258 <dcgettext@plt>
   1210c:	mov	r2, r0
   12110:	mov	r1, r4
   12114:	mov	r0, #3
   12118:	bl	112f4 <error@plt>
   1211c:	bl	113c0 <__errno_location@plt>
   12120:	ldr	r4, [r0]
   12124:	b	120f8 <__assert_fail@plt+0xc30>
   12128:	ldr	r0, [sp, #72]	; 0x48
   1212c:	bl	135a4 <__assert_fail@plt+0x20dc>
   12130:	ldr	r0, [sp, #76]	; 0x4c
   12134:	bl	135a4 <__assert_fail@plt+0x20dc>
   12138:	b	11e74 <__assert_fail@plt+0x9ac>
   1213c:	andeq	r4, r2, r8, asr #28
   12140:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12144:	strd	r6, [sp, #8]
   12148:	strd	r8, [sp, #16]
   1214c:	strd	sl, [sp, #24]
   12150:	str	lr, [sp, #32]
   12154:	sub	sp, sp, #132	; 0x84
   12158:	mov	r6, r0
   1215c:	movw	r0, #22484	; 0x57d4
   12160:	movt	r0, #2
   12164:	bl	115fc <__assert_fail@plt+0x134>
   12168:	cmp	r0, #0
   1216c:	bne	12238 <__assert_fail@plt+0xd70>
   12170:	movw	r0, #22488	; 0x57d8
   12174:	movt	r0, #2
   12178:	bl	115fc <__assert_fail@plt+0x134>
   1217c:	cmp	r0, #0
   12180:	bne	1227c <__assert_fail@plt+0xdb4>
   12184:	movw	r0, #22496	; 0x57e0
   12188:	movt	r0, #2
   1218c:	bl	115fc <__assert_fail@plt+0x134>
   12190:	cmp	r0, #0
   12194:	bne	122a8 <__assert_fail@plt+0xde0>
   12198:	movw	r0, #22504	; 0x57e8
   1219c:	movt	r0, #2
   121a0:	bl	115fc <__assert_fail@plt+0x134>
   121a4:	cmp	r0, #0
   121a8:	bne	122f4 <__assert_fail@plt+0xe2c>
   121ac:	movw	r0, #22512	; 0x57f0
   121b0:	movt	r0, #2
   121b4:	bl	115fc <__assert_fail@plt+0x134>
   121b8:	cmp	r0, #0
   121bc:	beq	12abc <__assert_fail@plt+0x15f4>
   121c0:	mov	r0, r6
   121c4:	bl	12140 <__assert_fail@plt+0xc78>
   121c8:	mov	r5, r0
   121cc:	mov	r0, r6
   121d0:	bl	12140 <__assert_fail@plt+0xc78>
   121d4:	mov	r4, r0
   121d8:	mov	r0, r6
   121dc:	bl	12140 <__assert_fail@plt+0xc78>
   121e0:	mov	r6, r0
   121e4:	mov	r0, r5
   121e8:	bl	11c84 <__assert_fail@plt+0x7bc>
   121ec:	mov	r0, r4
   121f0:	bl	11bec <__assert_fail@plt+0x724>
   121f4:	cmp	r0, #0
   121f8:	beq	1220c <__assert_fail@plt+0xd44>
   121fc:	mov	r0, r6
   12200:	bl	11bec <__assert_fail@plt+0x724>
   12204:	cmp	r0, #0
   12208:	bne	1277c <__assert_fail@plt+0x12b4>
   1220c:	movw	r0, #20932	; 0x51c4
   12210:	movt	r0, #2
   12214:	bl	11ba8 <__assert_fail@plt+0x6e0>
   12218:	mov	r8, r0
   1221c:	mov	r0, r5
   12220:	bl	11cec <__assert_fail@plt+0x824>
   12224:	mov	r0, r4
   12228:	bl	11cec <__assert_fail@plt+0x824>
   1222c:	mov	r0, r6
   12230:	bl	11cec <__assert_fail@plt+0x824>
   12234:	b	1225c <__assert_fail@plt+0xd94>
   12238:	bl	11ac0 <__assert_fail@plt+0x5f8>
   1223c:	movw	r3, #29104	; 0x71b0
   12240:	movt	r3, #3
   12244:	ldr	r2, [r3]
   12248:	add	r1, r2, #4
   1224c:	str	r1, [r3]
   12250:	ldr	r0, [r2]
   12254:	bl	11ba8 <__assert_fail@plt+0x6e0>
   12258:	mov	r8, r0
   1225c:	mov	r0, r8
   12260:	add	sp, sp, #132	; 0x84
   12264:	ldrd	r4, [sp]
   12268:	ldrd	r6, [sp, #8]
   1226c:	ldrd	r8, [sp, #16]
   12270:	ldrd	sl, [sp, #24]
   12274:	add	sp, sp, #32
   12278:	pop	{pc}		; (ldr pc, [sp], #4)
   1227c:	mov	r0, r6
   12280:	bl	12140 <__assert_fail@plt+0xc78>
   12284:	mov	r4, r0
   12288:	bl	11c84 <__assert_fail@plt+0x7bc>
   1228c:	ldr	r0, [r4, #4]
   12290:	bl	13b24 <__assert_fail@plt+0x265c>
   12294:	bl	11d2c <__assert_fail@plt+0x864>
   12298:	mov	r8, r0
   1229c:	mov	r0, r4
   122a0:	bl	11cec <__assert_fail@plt+0x824>
   122a4:	b	1225c <__assert_fail@plt+0xd94>
   122a8:	mov	r0, r6
   122ac:	bl	12140 <__assert_fail@plt+0xc78>
   122b0:	mov	r8, r0
   122b4:	mov	r0, r6
   122b8:	bl	12140 <__assert_fail@plt+0xc78>
   122bc:	mov	r4, r0
   122c0:	cmp	r6, #0
   122c4:	bne	122d4 <__assert_fail@plt+0xe0c>
   122c8:	mov	r0, r4
   122cc:	bl	11cec <__assert_fail@plt+0x824>
   122d0:	b	1225c <__assert_fail@plt+0xd94>
   122d4:	mov	r1, r0
   122d8:	mov	r0, r8
   122dc:	bl	11d6c <__assert_fail@plt+0x8a4>
   122e0:	mov	r5, r0
   122e4:	mov	r0, r8
   122e8:	bl	11cec <__assert_fail@plt+0x824>
   122ec:	mov	r8, r5
   122f0:	b	122c8 <__assert_fail@plt+0xe00>
   122f4:	mov	r0, r6
   122f8:	bl	12140 <__assert_fail@plt+0xc78>
   122fc:	mov	r9, r0
   12300:	mov	r0, r6
   12304:	bl	12140 <__assert_fail@plt+0xc78>
   12308:	mov	r7, r0
   1230c:	mov	r0, r9
   12310:	bl	11c84 <__assert_fail@plt+0x7bc>
   12314:	mov	r0, r7
   12318:	bl	11c84 <__assert_fail@plt+0x7bc>
   1231c:	ldr	r8, [r7, #4]
   12320:	ldrb	r3, [r8]
   12324:	cmp	r3, #0
   12328:	moveq	r5, #0
   1232c:	bne	12350 <__assert_fail@plt+0xe88>
   12330:	mov	r0, r5
   12334:	bl	11d2c <__assert_fail@plt+0x864>
   12338:	mov	r8, r0
   1233c:	mov	r0, r9
   12340:	bl	11cec <__assert_fail@plt+0x824>
   12344:	mov	r0, r7
   12348:	bl	11cec <__assert_fail@plt+0x824>
   1234c:	b	1225c <__assert_fail@plt+0xd94>
   12350:	ldr	r4, [r9, #4]
   12354:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12358:	cmp	r0, #1
   1235c:	bls	1275c <__assert_fail@plt+0x1294>
   12360:	str	r4, [sp, #32]
   12364:	mov	r5, #0
   12368:	strb	r5, [sp, #16]
   1236c:	mov	r2, #0
   12370:	mov	r3, #0
   12374:	strd	r2, [sp, #20]
   12378:	strb	r5, [sp, #28]
   1237c:	movw	sl, #23076	; 0x5a24
   12380:	movt	sl, #2
   12384:	b	12684 <__assert_fail@plt+0x11bc>
   12388:	str	r8, [sp, #88]	; 0x58
   1238c:	mov	r3, #0
   12390:	strb	r3, [sp, #72]	; 0x48
   12394:	mov	r0, #0
   12398:	mov	r1, #0
   1239c:	strd	r0, [sp, #76]	; 0x4c
   123a0:	strb	r3, [sp, #84]	; 0x54
   123a4:	mov	r4, #1
   123a8:	b	123e0 <__assert_fail@plt+0xf18>
   123ac:	ldr	r2, [sp, #92]	; 0x5c
   123b0:	ldr	r3, [sp, #36]	; 0x24
   123b4:	cmp	r2, r3
   123b8:	movne	r0, #0
   123bc:	beq	12464 <__assert_fail@plt+0xf9c>
   123c0:	cmp	r0, #0
   123c4:	bne	12330 <__assert_fail@plt+0xe68>
   123c8:	ldr	r3, [sp, #88]	; 0x58
   123cc:	ldr	r2, [sp, #92]	; 0x5c
   123d0:	add	r3, r3, r2
   123d4:	str	r3, [sp, #88]	; 0x58
   123d8:	mov	r3, #0
   123dc:	strb	r3, [sp, #84]	; 0x54
   123e0:	ldrb	r3, [sp, #84]	; 0x54
   123e4:	cmp	r3, #0
   123e8:	bne	1242c <__assert_fail@plt+0xf64>
   123ec:	ldrb	r3, [sp, #72]	; 0x48
   123f0:	cmp	r3, #0
   123f4:	bne	12490 <__assert_fail@plt+0xfc8>
   123f8:	ldr	r1, [sp, #88]	; 0x58
   123fc:	ldrb	r3, [r1]
   12400:	lsr	r2, r3, #5
   12404:	and	r3, r3, #31
   12408:	ldr	r2, [sl, r2, lsl #2]
   1240c:	lsr	r3, r2, r3
   12410:	tst	r3, #1
   12414:	beq	1247c <__assert_fail@plt+0xfb4>
   12418:	str	r4, [sp, #92]	; 0x5c
   1241c:	ldrb	r3, [r1]
   12420:	str	r3, [sp, #100]	; 0x64
   12424:	strb	r4, [sp, #96]	; 0x60
   12428:	strb	r4, [sp, #84]	; 0x54
   1242c:	ldrb	r3, [sp, #96]	; 0x60
   12430:	cmp	r3, #0
   12434:	beq	123ac <__assert_fail@plt+0xee4>
   12438:	ldr	r3, [sp, #100]	; 0x64
   1243c:	cmp	r3, #0
   12440:	beq	1266c <__assert_fail@plt+0x11a4>
   12444:	ldrb	r2, [sp, #40]	; 0x28
   12448:	cmp	r2, #0
   1244c:	beq	123ac <__assert_fail@plt+0xee4>
   12450:	ldr	r0, [sp, #44]	; 0x2c
   12454:	cmp	r0, r3
   12458:	movne	r0, #0
   1245c:	moveq	r0, #1
   12460:	b	123c0 <__assert_fail@plt+0xef8>
   12464:	ldr	r1, [sp, #32]
   12468:	ldr	r0, [sp, #88]	; 0x58
   1246c:	bl	11240 <memcmp@plt>
   12470:	clz	r0, r0
   12474:	lsr	r0, r0, #5
   12478:	b	123c0 <__assert_fail@plt+0xef8>
   1247c:	add	r0, sp, #76	; 0x4c
   12480:	bl	11234 <mbsinit@plt>
   12484:	cmp	r0, #0
   12488:	beq	1251c <__assert_fail@plt+0x1054>
   1248c:	strb	r4, [sp, #72]	; 0x48
   12490:	ldr	r6, [sp, #88]	; 0x58
   12494:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12498:	mov	r1, r0
   1249c:	mov	r0, r6
   124a0:	bl	23a58 <__assert_fail@plt+0x12590>
   124a4:	add	r3, sp, #76	; 0x4c
   124a8:	mov	r2, r0
   124ac:	mov	r1, r6
   124b0:	add	r0, sp, #100	; 0x64
   124b4:	bl	13880 <__assert_fail@plt+0x23b8>
   124b8:	str	r0, [sp, #92]	; 0x5c
   124bc:	cmn	r0, #1
   124c0:	streq	r4, [sp, #92]	; 0x5c
   124c4:	moveq	r3, #0
   124c8:	strbeq	r3, [sp, #96]	; 0x60
   124cc:	beq	12428 <__assert_fail@plt+0xf60>
   124d0:	cmn	r0, #2
   124d4:	beq	12538 <__assert_fail@plt+0x1070>
   124d8:	cmp	r0, #0
   124dc:	bne	12500 <__assert_fail@plt+0x1038>
   124e0:	str	r4, [sp, #92]	; 0x5c
   124e4:	ldr	r3, [sp, #88]	; 0x58
   124e8:	ldrb	r3, [r3]
   124ec:	cmp	r3, #0
   124f0:	bne	12550 <__assert_fail@plt+0x1088>
   124f4:	ldr	r3, [sp, #100]	; 0x64
   124f8:	cmp	r3, #0
   124fc:	bne	1256c <__assert_fail@plt+0x10a4>
   12500:	strb	r4, [sp, #96]	; 0x60
   12504:	add	r0, sp, #76	; 0x4c
   12508:	bl	11234 <mbsinit@plt>
   1250c:	cmp	r0, #0
   12510:	movne	r3, #0
   12514:	strbne	r3, [sp, #72]	; 0x48
   12518:	b	12428 <__assert_fail@plt+0xf60>
   1251c:	ldr	r3, [pc, #1732]	; 12be8 <__assert_fail@plt+0x1720>
   12520:	mov	r2, #143	; 0x8f
   12524:	movw	r1, #22364	; 0x575c
   12528:	movt	r1, #2
   1252c:	movw	r0, #22380	; 0x576c
   12530:	movt	r0, #2
   12534:	bl	114c8 <__assert_fail@plt>
   12538:	ldr	r0, [sp, #88]	; 0x58
   1253c:	bl	11390 <strlen@plt>
   12540:	str	r0, [sp, #92]	; 0x5c
   12544:	mov	r3, #0
   12548:	strb	r3, [sp, #96]	; 0x60
   1254c:	b	12428 <__assert_fail@plt+0xf60>
   12550:	ldr	r3, [pc, #1680]	; 12be8 <__assert_fail@plt+0x1720>
   12554:	mov	r2, #171	; 0xab
   12558:	movw	r1, #22364	; 0x575c
   1255c:	movt	r1, #2
   12560:	movw	r0, #22404	; 0x5784
   12564:	movt	r0, #2
   12568:	bl	114c8 <__assert_fail@plt>
   1256c:	ldr	r3, [pc, #1652]	; 12be8 <__assert_fail@plt+0x1720>
   12570:	mov	r2, #172	; 0xac
   12574:	movw	r1, #22364	; 0x575c
   12578:	movt	r1, #2
   1257c:	movw	r0, #22428	; 0x579c
   12580:	movt	r0, #2
   12584:	bl	114c8 <__assert_fail@plt>
   12588:	add	r0, sp, #20
   1258c:	bl	11234 <mbsinit@plt>
   12590:	cmp	r0, #0
   12594:	beq	126d4 <__assert_fail@plt+0x120c>
   12598:	mov	r3, #1
   1259c:	strb	r3, [sp, #16]
   125a0:	ldr	r4, [sp, #32]
   125a4:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   125a8:	mov	r1, r0
   125ac:	mov	r0, r4
   125b0:	bl	23a58 <__assert_fail@plt+0x12590>
   125b4:	add	r3, sp, #20
   125b8:	mov	r2, r0
   125bc:	mov	r1, r4
   125c0:	add	r0, sp, #44	; 0x2c
   125c4:	bl	13880 <__assert_fail@plt+0x23b8>
   125c8:	str	r0, [sp, #36]	; 0x24
   125cc:	cmn	r0, #1
   125d0:	beq	126f0 <__assert_fail@plt+0x1228>
   125d4:	cmn	r0, #2
   125d8:	beq	12704 <__assert_fail@plt+0x123c>
   125dc:	cmp	r0, #0
   125e0:	bne	12608 <__assert_fail@plt+0x1140>
   125e4:	mov	r3, #1
   125e8:	str	r3, [sp, #36]	; 0x24
   125ec:	ldr	r3, [sp, #32]
   125f0:	ldrb	r3, [r3]
   125f4:	cmp	r3, #0
   125f8:	bne	1271c <__assert_fail@plt+0x1254>
   125fc:	ldr	r3, [sp, #44]	; 0x2c
   12600:	cmp	r3, #0
   12604:	bne	12738 <__assert_fail@plt+0x1270>
   12608:	mov	r3, #1
   1260c:	strb	r3, [sp, #40]	; 0x28
   12610:	add	r0, sp, #20
   12614:	bl	11234 <mbsinit@plt>
   12618:	cmp	r0, #0
   1261c:	movne	r3, #0
   12620:	strbne	r3, [sp, #16]
   12624:	mov	r3, #1
   12628:	strb	r3, [sp, #28]
   1262c:	ldrb	r3, [sp, #40]	; 0x28
   12630:	cmp	r3, #0
   12634:	beq	12644 <__assert_fail@plt+0x117c>
   12638:	ldr	r3, [sp, #44]	; 0x2c
   1263c:	cmp	r3, #0
   12640:	beq	12754 <__assert_fail@plt+0x128c>
   12644:	add	r5, r5, #1
   12648:	ldr	r3, [sp, #36]	; 0x24
   1264c:	cmp	r3, #1
   12650:	bne	12388 <__assert_fail@plt+0xec0>
   12654:	ldr	r3, [sp, #32]
   12658:	ldrb	r1, [r3]
   1265c:	mov	r0, r8
   12660:	bl	138f0 <__assert_fail@plt+0x2428>
   12664:	cmp	r0, #0
   12668:	bne	12330 <__assert_fail@plt+0xe68>
   1266c:	ldr	r3, [sp, #32]
   12670:	ldr	r2, [sp, #36]	; 0x24
   12674:	add	r3, r3, r2
   12678:	str	r3, [sp, #32]
   1267c:	mov	r3, #0
   12680:	strb	r3, [sp, #28]
   12684:	ldrb	r3, [sp, #28]
   12688:	cmp	r3, #0
   1268c:	bne	1262c <__assert_fail@plt+0x1164>
   12690:	ldrb	r3, [sp, #16]
   12694:	cmp	r3, #0
   12698:	bne	125a0 <__assert_fail@plt+0x10d8>
   1269c:	ldr	r1, [sp, #32]
   126a0:	ldrb	r3, [r1]
   126a4:	lsr	r2, r3, #5
   126a8:	and	r3, r3, #31
   126ac:	ldr	r2, [sl, r2, lsl #2]
   126b0:	lsr	r3, r2, r3
   126b4:	tst	r3, #1
   126b8:	beq	12588 <__assert_fail@plt+0x10c0>
   126bc:	mov	r3, #1
   126c0:	str	r3, [sp, #36]	; 0x24
   126c4:	ldrb	r2, [r1]
   126c8:	str	r2, [sp, #44]	; 0x2c
   126cc:	strb	r3, [sp, #40]	; 0x28
   126d0:	b	12624 <__assert_fail@plt+0x115c>
   126d4:	ldr	r3, [pc, #1292]	; 12be8 <__assert_fail@plt+0x1720>
   126d8:	mov	r2, #143	; 0x8f
   126dc:	movw	r1, #22364	; 0x575c
   126e0:	movt	r1, #2
   126e4:	movw	r0, #22380	; 0x576c
   126e8:	movt	r0, #2
   126ec:	bl	114c8 <__assert_fail@plt>
   126f0:	mov	r3, #1
   126f4:	str	r3, [sp, #36]	; 0x24
   126f8:	mov	r3, #0
   126fc:	strb	r3, [sp, #40]	; 0x28
   12700:	b	12624 <__assert_fail@plt+0x115c>
   12704:	ldr	r0, [sp, #32]
   12708:	bl	11390 <strlen@plt>
   1270c:	str	r0, [sp, #36]	; 0x24
   12710:	mov	r3, #0
   12714:	strb	r3, [sp, #40]	; 0x28
   12718:	b	12624 <__assert_fail@plt+0x115c>
   1271c:	ldr	r3, [pc, #1220]	; 12be8 <__assert_fail@plt+0x1720>
   12720:	mov	r2, #171	; 0xab
   12724:	movw	r1, #22364	; 0x575c
   12728:	movt	r1, #2
   1272c:	movw	r0, #22404	; 0x5784
   12730:	movt	r0, #2
   12734:	bl	114c8 <__assert_fail@plt>
   12738:	ldr	r3, [pc, #1192]	; 12be8 <__assert_fail@plt+0x1720>
   1273c:	mov	r2, #172	; 0xac
   12740:	movw	r1, #22364	; 0x575c
   12744:	movt	r1, #2
   12748:	movw	r0, #22428	; 0x579c
   1274c:	movt	r0, #2
   12750:	bl	114c8 <__assert_fail@plt>
   12754:	mov	r5, r3
   12758:	b	12330 <__assert_fail@plt+0xe68>
   1275c:	mov	r1, r8
   12760:	mov	r0, r4
   12764:	bl	111a4 <strcspn@plt>
   12768:	ldrb	r3, [r4, r0]
   1276c:	cmp	r3, #0
   12770:	addne	r5, r0, #1
   12774:	moveq	r5, #0
   12778:	b	12330 <__assert_fail@plt+0xe68>
   1277c:	ldr	r3, [r4, #8]
   12780:	cmp	r3, #0
   12784:	mvnlt	r9, #0
   12788:	blt	127b4 <__assert_fail@plt+0x12ec>
   1278c:	cmp	r3, #1
   12790:	mvnhi	r9, #1
   12794:	bhi	127b4 <__assert_fail@plt+0x12ec>
   12798:	ldr	r2, [r4, #12]
   1279c:	ldr	r9, [r2]
   127a0:	cmp	r3, #0
   127a4:	moveq	r9, #0
   127a8:	beq	127b4 <__assert_fail@plt+0x12ec>
   127ac:	cmn	r9, #1
   127b0:	mvneq	r9, #1
   127b4:	ldr	r3, [r6, #8]
   127b8:	cmp	r3, #0
   127bc:	mvnlt	r8, #0
   127c0:	blt	127ec <__assert_fail@plt+0x1324>
   127c4:	cmp	r3, #1
   127c8:	mvnhi	r8, #1
   127cc:	bhi	127ec <__assert_fail@plt+0x1324>
   127d0:	ldr	r2, [r6, #12]
   127d4:	ldr	r8, [r2]
   127d8:	cmp	r3, #0
   127dc:	moveq	r8, #0
   127e0:	beq	127ec <__assert_fail@plt+0x1324>
   127e4:	cmn	r8, #1
   127e8:	mvneq	r8, #1
   127ec:	ldr	r7, [r5, #4]
   127f0:	mov	r0, r7
   127f4:	bl	11390 <strlen@plt>
   127f8:	mov	sl, r0
   127fc:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12800:	cmp	r0, #1
   12804:	movls	r0, sl
   12808:	bls	12814 <__assert_fail@plt+0x134c>
   1280c:	mov	r0, r7
   12810:	bl	13b24 <__assert_fail@plt+0x265c>
   12814:	clz	r3, r9
   12818:	lsr	r3, r3, #5
   1281c:	cmp	r0, r9
   12820:	orrcc	r3, r3, #1
   12824:	cmp	r3, #0
   12828:	bne	12838 <__assert_fail@plt+0x1370>
   1282c:	sub	r3, r8, #1
   12830:	cmn	r3, #3
   12834:	bls	12864 <__assert_fail@plt+0x139c>
   12838:	movw	r0, #20932	; 0x51c4
   1283c:	movt	r0, #2
   12840:	bl	24728 <__assert_fail@plt+0x13260>
   12844:	str	r0, [sp, #8]
   12848:	ldr	r7, [sp, #8]
   1284c:	mov	r0, r7
   12850:	bl	11ba8 <__assert_fail@plt+0x6e0>
   12854:	mov	r8, r0
   12858:	mov	r0, r7
   1285c:	bl	135a4 <__assert_fail@plt+0x20dc>
   12860:	b	1221c <__assert_fail@plt+0xd54>
   12864:	rsb	r3, r9, #1
   12868:	add	r0, r3, r0
   1286c:	cmp	r0, r8
   12870:	movcc	r8, r0
   12874:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12878:	cmp	r0, #1
   1287c:	beq	128c8 <__assert_fail@plt+0x1400>
   12880:	add	r0, sl, #1
   12884:	bl	242bc <__assert_fail@plt+0x12df4>
   12888:	mov	r2, r0
   1288c:	str	r0, [sp, #8]
   12890:	str	r7, [sp, #88]	; 0x58
   12894:	mov	r3, #0
   12898:	strb	r3, [sp, #72]	; 0x48
   1289c:	mov	r0, #0
   128a0:	mov	r1, #0
   128a4:	strd	r0, [sp, #76]	; 0x4c
   128a8:	strb	r3, [sp, #84]	; 0x54
   128ac:	str	r2, [sp, #4]
   128b0:	mov	r7, #1
   128b4:	mov	sl, r7
   128b8:	movw	fp, #23076	; 0x5a24
   128bc:	movt	fp, #2
   128c0:	str	r5, [sp, #12]
   128c4:	b	129e8 <__assert_fail@plt+0x1520>
   128c8:	add	r0, r8, #1
   128cc:	bl	242bc <__assert_fail@plt+0x12df4>
   128d0:	str	r0, [sp, #8]
   128d4:	sub	r1, r9, #1
   128d8:	mov	r2, r8
   128dc:	add	r1, r7, r1
   128e0:	bl	11360 <mempcpy@plt>
   128e4:	str	r0, [sp, #4]
   128e8:	b	12aa4 <__assert_fail@plt+0x15dc>
   128ec:	add	r0, sp, #76	; 0x4c
   128f0:	bl	11234 <mbsinit@plt>
   128f4:	cmp	r0, #0
   128f8:	beq	12a34 <__assert_fail@plt+0x156c>
   128fc:	strb	sl, [sp, #72]	; 0x48
   12900:	ldr	r5, [sp, #88]	; 0x58
   12904:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   12908:	mov	r1, r0
   1290c:	mov	r0, r5
   12910:	bl	23a58 <__assert_fail@plt+0x12590>
   12914:	add	r3, sp, #76	; 0x4c
   12918:	mov	r2, r0
   1291c:	mov	r1, r5
   12920:	add	r0, sp, #100	; 0x64
   12924:	bl	13880 <__assert_fail@plt+0x23b8>
   12928:	str	r0, [sp, #92]	; 0x5c
   1292c:	cmn	r0, #1
   12930:	streq	sl, [sp, #92]	; 0x5c
   12934:	moveq	r3, #0
   12938:	strbeq	r3, [sp, #96]	; 0x60
   1293c:	beq	12988 <__assert_fail@plt+0x14c0>
   12940:	cmn	r0, #2
   12944:	beq	12a50 <__assert_fail@plt+0x1588>
   12948:	cmp	r0, #0
   1294c:	bne	12970 <__assert_fail@plt+0x14a8>
   12950:	str	sl, [sp, #92]	; 0x5c
   12954:	ldr	r3, [sp, #88]	; 0x58
   12958:	ldrb	r3, [r3]
   1295c:	cmp	r3, #0
   12960:	bne	12a68 <__assert_fail@plt+0x15a0>
   12964:	ldr	r3, [sp, #100]	; 0x64
   12968:	cmp	r3, #0
   1296c:	bne	12a84 <__assert_fail@plt+0x15bc>
   12970:	strb	sl, [sp, #96]	; 0x60
   12974:	add	r0, sp, #76	; 0x4c
   12978:	bl	11234 <mbsinit@plt>
   1297c:	cmp	r0, #0
   12980:	movne	r3, #0
   12984:	strbne	r3, [sp, #72]	; 0x48
   12988:	strb	sl, [sp, #84]	; 0x54
   1298c:	ldrb	r3, [sp, #96]	; 0x60
   12990:	cmp	r3, #0
   12994:	beq	129a4 <__assert_fail@plt+0x14dc>
   12998:	ldr	r3, [sp, #100]	; 0x64
   1299c:	cmp	r3, #0
   129a0:	beq	12ab4 <__assert_fail@plt+0x15ec>
   129a4:	cmp	r8, #0
   129a8:	beq	12aa0 <__assert_fail@plt+0x15d8>
   129ac:	cmp	r7, r9
   129b0:	bcc	129cc <__assert_fail@plt+0x1504>
   129b4:	sub	r8, r8, #1
   129b8:	ldr	r2, [sp, #92]	; 0x5c
   129bc:	ldr	r1, [sp, #88]	; 0x58
   129c0:	ldr	r0, [sp, #4]
   129c4:	bl	11360 <mempcpy@plt>
   129c8:	str	r0, [sp, #4]
   129cc:	ldr	r3, [sp, #88]	; 0x58
   129d0:	ldr	r2, [sp, #92]	; 0x5c
   129d4:	add	r3, r3, r2
   129d8:	str	r3, [sp, #88]	; 0x58
   129dc:	mov	r3, #0
   129e0:	strb	r3, [sp, #84]	; 0x54
   129e4:	add	r7, r7, #1
   129e8:	ldrb	r3, [sp, #84]	; 0x54
   129ec:	cmp	r3, #0
   129f0:	bne	1298c <__assert_fail@plt+0x14c4>
   129f4:	ldrb	r3, [sp, #72]	; 0x48
   129f8:	cmp	r3, #0
   129fc:	bne	12900 <__assert_fail@plt+0x1438>
   12a00:	ldr	r1, [sp, #88]	; 0x58
   12a04:	ldrb	r3, [r1]
   12a08:	lsr	r2, r3, #5
   12a0c:	and	r3, r3, #31
   12a10:	ldr	r2, [fp, r2, lsl #2]
   12a14:	lsr	r3, r2, r3
   12a18:	tst	r3, #1
   12a1c:	beq	128ec <__assert_fail@plt+0x1424>
   12a20:	str	sl, [sp, #92]	; 0x5c
   12a24:	ldrb	r3, [r1]
   12a28:	str	r3, [sp, #100]	; 0x64
   12a2c:	strb	sl, [sp, #96]	; 0x60
   12a30:	b	12988 <__assert_fail@plt+0x14c0>
   12a34:	ldr	r3, [pc, #428]	; 12be8 <__assert_fail@plt+0x1720>
   12a38:	mov	r2, #143	; 0x8f
   12a3c:	movw	r1, #22364	; 0x575c
   12a40:	movt	r1, #2
   12a44:	movw	r0, #22380	; 0x576c
   12a48:	movt	r0, #2
   12a4c:	bl	114c8 <__assert_fail@plt>
   12a50:	ldr	r0, [sp, #88]	; 0x58
   12a54:	bl	11390 <strlen@plt>
   12a58:	str	r0, [sp, #92]	; 0x5c
   12a5c:	mov	r3, #0
   12a60:	strb	r3, [sp, #96]	; 0x60
   12a64:	b	12988 <__assert_fail@plt+0x14c0>
   12a68:	ldr	r3, [pc, #376]	; 12be8 <__assert_fail@plt+0x1720>
   12a6c:	mov	r2, #171	; 0xab
   12a70:	movw	r1, #22364	; 0x575c
   12a74:	movt	r1, #2
   12a78:	movw	r0, #22404	; 0x5784
   12a7c:	movt	r0, #2
   12a80:	bl	114c8 <__assert_fail@plt>
   12a84:	ldr	r3, [pc, #348]	; 12be8 <__assert_fail@plt+0x1720>
   12a88:	mov	r2, #172	; 0xac
   12a8c:	movw	r1, #22364	; 0x575c
   12a90:	movt	r1, #2
   12a94:	movw	r0, #22428	; 0x579c
   12a98:	movt	r0, #2
   12a9c:	bl	114c8 <__assert_fail@plt>
   12aa0:	ldr	r5, [sp, #12]
   12aa4:	mov	r3, #0
   12aa8:	ldr	r2, [sp, #4]
   12aac:	strb	r3, [r2]
   12ab0:	b	12848 <__assert_fail@plt+0x1380>
   12ab4:	ldr	r5, [sp, #12]
   12ab8:	b	12aa4 <__assert_fail@plt+0x15dc>
   12abc:	bl	11ac0 <__assert_fail@plt+0x5f8>
   12ac0:	movw	r0, #22520	; 0x57f8
   12ac4:	movt	r0, #2
   12ac8:	bl	115fc <__assert_fail@plt+0x134>
   12acc:	cmp	r0, #0
   12ad0:	beq	12b8c <__assert_fail@plt+0x16c4>
   12ad4:	mov	r0, r6
   12ad8:	bl	131b0 <__assert_fail@plt+0x1ce8>
   12adc:	mov	r8, r0
   12ae0:	movw	r3, #29104	; 0x71b0
   12ae4:	movt	r3, #3
   12ae8:	ldr	r4, [r3]
   12aec:	ldr	r3, [r4]
   12af0:	cmp	r3, #0
   12af4:	beq	12b50 <__assert_fail@plt+0x1688>
   12af8:	movw	r0, #22564	; 0x5824
   12afc:	movt	r0, #2
   12b00:	bl	115fc <__assert_fail@plt+0x134>
   12b04:	cmp	r0, #0
   12b08:	bne	1225c <__assert_fail@plt+0xd94>
   12b0c:	mov	r2, #5
   12b10:	movw	r1, #22568	; 0x5828
   12b14:	movt	r1, #2
   12b18:	bl	11258 <dcgettext@plt>
   12b1c:	mov	r4, r0
   12b20:	movw	r3, #29104	; 0x71b0
   12b24:	movt	r3, #3
   12b28:	ldr	r3, [r3]
   12b2c:	ldr	r2, [r3]
   12b30:	mov	r1, #8
   12b34:	mov	r0, #0
   12b38:	bl	15ca8 <__assert_fail@plt+0x47e0>
   12b3c:	mov	r3, r0
   12b40:	mov	r2, r4
   12b44:	mov	r1, #0
   12b48:	mov	r0, #2
   12b4c:	bl	112f4 <error@plt>
   12b50:	mov	r2, #5
   12b54:	movw	r1, #22524	; 0x57fc
   12b58:	movt	r1, #2
   12b5c:	mov	r0, #0
   12b60:	bl	11258 <dcgettext@plt>
   12b64:	mov	r5, r0
   12b68:	ldr	r2, [r4, #-4]
   12b6c:	mov	r1, #8
   12b70:	mov	r0, #0
   12b74:	bl	15ca8 <__assert_fail@plt+0x47e0>
   12b78:	mov	r3, r0
   12b7c:	mov	r2, r5
   12b80:	mov	r1, #0
   12b84:	mov	r0, #2
   12b88:	bl	112f4 <error@plt>
   12b8c:	movw	r0, #22564	; 0x5824
   12b90:	movt	r0, #2
   12b94:	bl	115fc <__assert_fail@plt+0x134>
   12b98:	cmp	r0, #0
   12b9c:	bne	12bc4 <__assert_fail@plt+0x16fc>
   12ba0:	movw	r3, #29104	; 0x71b0
   12ba4:	movt	r3, #3
   12ba8:	ldr	r2, [r3]
   12bac:	add	r1, r2, #4
   12bb0:	str	r1, [r3]
   12bb4:	ldr	r0, [r2]
   12bb8:	bl	11ba8 <__assert_fail@plt+0x6e0>
   12bbc:	mov	r8, r0
   12bc0:	b	1225c <__assert_fail@plt+0xd94>
   12bc4:	mov	r2, #5
   12bc8:	movw	r1, #22612	; 0x5854
   12bcc:	movt	r1, #2
   12bd0:	mov	r0, #0
   12bd4:	bl	11258 <dcgettext@plt>
   12bd8:	mov	r2, r0
   12bdc:	mov	r1, #0
   12be0:	mov	r0, #2
   12be4:	bl	112f4 <error@plt>
   12be8:	andeq	r4, r2, r8, asr #28
   12bec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12bf0:	strd	r6, [sp, #8]
   12bf4:	str	r8, [sp, #16]
   12bf8:	str	lr, [sp, #20]
   12bfc:	mov	r5, r0
   12c00:	bl	12140 <__assert_fail@plt+0xc78>
   12c04:	mov	r7, r0
   12c08:	movw	r6, #22644	; 0x5874
   12c0c:	movt	r6, #2
   12c10:	b	12c38 <__assert_fail@plt+0x1770>
   12c14:	mov	r1, r0
   12c18:	mov	r0, r7
   12c1c:	bl	11d6c <__assert_fail@plt+0x8a4>
   12c20:	mov	r8, r0
   12c24:	mov	r0, r7
   12c28:	bl	11cec <__assert_fail@plt+0x824>
   12c2c:	mov	r7, r8
   12c30:	mov	r0, r4
   12c34:	bl	11cec <__assert_fail@plt+0x824>
   12c38:	mov	r0, r6
   12c3c:	bl	115fc <__assert_fail@plt+0x134>
   12c40:	cmp	r0, #0
   12c44:	beq	12c60 <__assert_fail@plt+0x1798>
   12c48:	mov	r0, r5
   12c4c:	bl	12140 <__assert_fail@plt+0xc78>
   12c50:	mov	r4, r0
   12c54:	cmp	r5, #0
   12c58:	beq	12c30 <__assert_fail@plt+0x1768>
   12c5c:	b	12c14 <__assert_fail@plt+0x174c>
   12c60:	mov	r0, r7
   12c64:	ldrd	r4, [sp]
   12c68:	ldrd	r6, [sp, #8]
   12c6c:	ldr	r8, [sp, #16]
   12c70:	add	sp, sp, #20
   12c74:	pop	{pc}		; (ldr pc, [sp], #4)
   12c78:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12c7c:	strd	r6, [sp, #8]
   12c80:	strd	r8, [sp, #16]
   12c84:	str	sl, [sp, #24]
   12c88:	str	lr, [sp, #28]
   12c8c:	mov	r5, r0
   12c90:	bl	12bec <__assert_fail@plt+0x1724>
   12c94:	mov	r7, r0
   12c98:	movw	r6, #22648	; 0x5878
   12c9c:	movt	r6, #2
   12ca0:	movw	r8, #22652	; 0x587c
   12ca4:	movt	r8, #2
   12ca8:	movw	r9, #22656	; 0x5880
   12cac:	movt	r9, #2
   12cb0:	b	12d84 <__assert_fail@plt+0x18bc>
   12cb4:	mov	sl, #0
   12cb8:	mov	r0, r5
   12cbc:	bl	12bec <__assert_fail@plt+0x1724>
   12cc0:	mov	r4, r0
   12cc4:	cmp	r5, #0
   12cc8:	beq	12d7c <__assert_fail@plt+0x18b4>
   12ccc:	mov	r0, r7
   12cd0:	bl	11bec <__assert_fail@plt+0x724>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12d1c <__assert_fail@plt+0x1854>
   12cdc:	mov	r0, r4
   12ce0:	bl	11bec <__assert_fail@plt+0x724>
   12ce4:	cmp	r0, #0
   12ce8:	beq	12d1c <__assert_fail@plt+0x1854>
   12cec:	cmp	sl, #0
   12cf0:	beq	12d64 <__assert_fail@plt+0x189c>
   12cf4:	ldr	r3, [r4, #8]
   12cf8:	cmp	r3, #0
   12cfc:	beq	12d40 <__assert_fail@plt+0x1878>
   12d00:	movw	r3, #4504	; 0x1198
   12d04:	movt	r3, #1
   12d08:	movw	r2, #5032	; 0x13a8
   12d0c:	movt	r2, #1
   12d10:	cmp	sl, #1
   12d14:	movne	r3, r2
   12d18:	b	12d6c <__assert_fail@plt+0x18a4>
   12d1c:	mov	r2, #5
   12d20:	movw	r1, #22660	; 0x5884
   12d24:	movt	r1, #2
   12d28:	mov	r0, #0
   12d2c:	bl	11258 <dcgettext@plt>
   12d30:	mov	r2, r0
   12d34:	mov	r1, #0
   12d38:	mov	r0, #2
   12d3c:	bl	112f4 <error@plt>
   12d40:	mov	r2, #5
   12d44:	movw	r1, #22684	; 0x589c
   12d48:	movt	r1, #2
   12d4c:	mov	r0, #0
   12d50:	bl	11258 <dcgettext@plt>
   12d54:	mov	r2, r0
   12d58:	mov	r1, #0
   12d5c:	mov	r0, #2
   12d60:	bl	112f4 <error@plt>
   12d64:	movw	r3, #4732	; 0x127c
   12d68:	movt	r3, #1
   12d6c:	add	r0, r7, #4
   12d70:	add	r2, r4, #4
   12d74:	mov	r1, r0
   12d78:	blx	r3
   12d7c:	mov	r0, r4
   12d80:	bl	11cec <__assert_fail@plt+0x824>
   12d84:	mov	r0, r6
   12d88:	bl	115fc <__assert_fail@plt+0x134>
   12d8c:	cmp	r0, #0
   12d90:	bne	12cb4 <__assert_fail@plt+0x17ec>
   12d94:	mov	r0, r8
   12d98:	bl	115fc <__assert_fail@plt+0x134>
   12d9c:	cmp	r0, #0
   12da0:	movne	sl, #1
   12da4:	bne	12cb8 <__assert_fail@plt+0x17f0>
   12da8:	mov	r0, r9
   12dac:	bl	115fc <__assert_fail@plt+0x134>
   12db0:	cmp	r0, #0
   12db4:	beq	12dc0 <__assert_fail@plt+0x18f8>
   12db8:	mov	sl, #2
   12dbc:	b	12cb8 <__assert_fail@plt+0x17f0>
   12dc0:	mov	r0, r7
   12dc4:	ldrd	r4, [sp]
   12dc8:	ldrd	r6, [sp, #8]
   12dcc:	ldrd	r8, [sp, #16]
   12dd0:	ldr	sl, [sp, #24]
   12dd4:	add	sp, sp, #28
   12dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ddc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12de0:	strd	r6, [sp, #8]
   12de4:	strd	r8, [sp, #16]
   12de8:	str	sl, [sp, #24]
   12dec:	str	lr, [sp, #28]
   12df0:	mov	r5, r0
   12df4:	bl	12c78 <__assert_fail@plt+0x17b0>
   12df8:	mov	r7, r0
   12dfc:	movw	r6, #22484	; 0x57d4
   12e00:	movt	r6, #2
   12e04:	movw	r8, #22704	; 0x58b0
   12e08:	movt	r8, #2
   12e0c:	movw	r9, #5248	; 0x1480
   12e10:	movt	r9, #1
   12e14:	b	12e78 <__assert_fail@plt+0x19b0>
   12e18:	mov	sl, #0
   12e1c:	mov	r0, r5
   12e20:	bl	12c78 <__assert_fail@plt+0x17b0>
   12e24:	mov	r4, r0
   12e28:	cmp	r5, #0
   12e2c:	beq	12e70 <__assert_fail@plt+0x19a8>
   12e30:	mov	r0, r7
   12e34:	bl	11bec <__assert_fail@plt+0x724>
   12e38:	cmp	r0, #0
   12e3c:	beq	12ea0 <__assert_fail@plt+0x19d8>
   12e40:	mov	r0, r4
   12e44:	bl	11bec <__assert_fail@plt+0x724>
   12e48:	cmp	r0, #0
   12e4c:	beq	12ea0 <__assert_fail@plt+0x19d8>
   12e50:	movw	r3, #4624	; 0x1210
   12e54:	movt	r3, #1
   12e58:	cmp	sl, #0
   12e5c:	moveq	r3, r9
   12e60:	add	r0, r7, #4
   12e64:	add	r2, r4, #4
   12e68:	mov	r1, r0
   12e6c:	blx	r3
   12e70:	mov	r0, r4
   12e74:	bl	11cec <__assert_fail@plt+0x824>
   12e78:	mov	r0, r6
   12e7c:	bl	115fc <__assert_fail@plt+0x134>
   12e80:	cmp	r0, #0
   12e84:	bne	12e18 <__assert_fail@plt+0x1950>
   12e88:	mov	r0, r8
   12e8c:	bl	115fc <__assert_fail@plt+0x134>
   12e90:	cmp	r0, #0
   12e94:	beq	12ec4 <__assert_fail@plt+0x19fc>
   12e98:	mov	sl, #1
   12e9c:	b	12e1c <__assert_fail@plt+0x1954>
   12ea0:	mov	r2, #5
   12ea4:	movw	r1, #22660	; 0x5884
   12ea8:	movt	r1, #2
   12eac:	mov	r0, #0
   12eb0:	bl	11258 <dcgettext@plt>
   12eb4:	mov	r2, r0
   12eb8:	mov	r1, #0
   12ebc:	mov	r0, #2
   12ec0:	bl	112f4 <error@plt>
   12ec4:	mov	r0, r7
   12ec8:	ldrd	r4, [sp]
   12ecc:	ldrd	r6, [sp, #8]
   12ed0:	ldrd	r8, [sp, #16]
   12ed4:	ldr	sl, [sp, #24]
   12ed8:	add	sp, sp, #28
   12edc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ee0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ee4:	strd	r6, [sp, #8]
   12ee8:	strd	r8, [sp, #16]
   12eec:	strd	sl, [sp, #24]
   12ef0:	str	lr, [sp, #32]
   12ef4:	sub	sp, sp, #12
   12ef8:	mov	r6, r0
   12efc:	bl	12ddc <__assert_fail@plt+0x1914>
   12f00:	mov	r4, r0
   12f04:	movw	r9, #22708	; 0x58b4
   12f08:	movt	r9, #2
   12f0c:	movw	fp, #22712	; 0x58b8
   12f10:	movt	fp, #2
   12f14:	movw	r3, #22716	; 0x58bc
   12f18:	movt	r3, #2
   12f1c:	str	r3, [sp, #4]
   12f20:	b	13030 <__assert_fail@plt+0x1b68>
   12f24:	mov	r7, #0
   12f28:	mov	r0, r6
   12f2c:	bl	12ddc <__assert_fail@plt+0x1914>
   12f30:	mov	r5, r0
   12f34:	cmp	r6, #0
   12f38:	beq	13010 <__assert_fail@plt+0x1b48>
   12f3c:	mov	r0, r4
   12f40:	bl	11c84 <__assert_fail@plt+0x7bc>
   12f44:	mov	r0, r5
   12f48:	bl	11c84 <__assert_fail@plt+0x7bc>
   12f4c:	ldr	r8, [r4, #4]
   12f50:	mov	r0, r8
   12f54:	bl	115c4 <__assert_fail@plt+0xfc>
   12f58:	cmp	r0, #0
   12f5c:	beq	12f84 <__assert_fail@plt+0x1abc>
   12f60:	ldr	sl, [r5, #4]
   12f64:	mov	r0, sl
   12f68:	bl	115c4 <__assert_fail@plt+0xfc>
   12f6c:	cmp	r0, #0
   12f70:	beq	12f84 <__assert_fail@plt+0x1abc>
   12f74:	mov	r1, sl
   12f78:	mov	r0, r8
   12f7c:	bl	23a98 <__assert_fail@plt+0x125d0>
   12f80:	b	12f9c <__assert_fail@plt+0x1ad4>
   12f84:	bl	113c0 <__errno_location@plt>
   12f88:	mov	r3, #0
   12f8c:	str	r3, [r0]
   12f90:	ldr	r1, [r5, #4]
   12f94:	ldr	r0, [r4, #4]
   12f98:	bl	11300 <strcoll@plt>
   12f9c:	cmp	r7, #5
   12fa0:	ldrls	pc, [pc, r7, lsl #2]
   12fa4:	b	1300c <__assert_fail@plt+0x1b44>
   12fa8:	andeq	r2, r1, r0, asr #31
   12fac:	andeq	r2, r1, r8, asr #31
   12fb0:	ldrdeq	r2, [r1], -r8
   12fb4:	andeq	r2, r1, r4, ror #31
   12fb8:	strdeq	r2, [r1], -r0
   12fbc:	strdeq	r2, [r1], -ip
   12fc0:	lsr	r7, r0, #31
   12fc4:	b	13014 <__assert_fail@plt+0x1b4c>
   12fc8:	cmp	r0, #0
   12fcc:	movgt	r7, #0
   12fd0:	movle	r7, #1
   12fd4:	b	13014 <__assert_fail@plt+0x1b4c>
   12fd8:	clz	r7, r0
   12fdc:	lsr	r7, r7, #5
   12fe0:	b	13014 <__assert_fail@plt+0x1b4c>
   12fe4:	adds	r7, r0, #0
   12fe8:	movne	r7, #1
   12fec:	b	13014 <__assert_fail@plt+0x1b4c>
   12ff0:	mvn	r7, r0
   12ff4:	lsr	r7, r7, #31
   12ff8:	b	13014 <__assert_fail@plt+0x1b4c>
   12ffc:	cmp	r0, #0
   13000:	movle	r7, #0
   13004:	movgt	r7, #1
   13008:	b	13014 <__assert_fail@plt+0x1b4c>
   1300c:	bl	114bc <abort@plt>
   13010:	mov	r7, r6
   13014:	mov	r0, r4
   13018:	bl	11cec <__assert_fail@plt+0x824>
   1301c:	mov	r0, r5
   13020:	bl	11cec <__assert_fail@plt+0x824>
   13024:	mov	r0, r7
   13028:	bl	11d2c <__assert_fail@plt+0x864>
   1302c:	mov	r4, r0
   13030:	mov	r0, r9
   13034:	bl	115fc <__assert_fail@plt+0x134>
   13038:	cmp	r0, #0
   1303c:	bne	12f24 <__assert_fail@plt+0x1a5c>
   13040:	mov	r0, fp
   13044:	bl	115fc <__assert_fail@plt+0x134>
   13048:	cmp	r0, #0
   1304c:	movne	r7, #1
   13050:	bne	12f28 <__assert_fail@plt+0x1a60>
   13054:	ldr	r0, [sp, #4]
   13058:	bl	115fc <__assert_fail@plt+0x134>
   1305c:	cmp	r0, #0
   13060:	movne	r7, #2
   13064:	bne	12f28 <__assert_fail@plt+0x1a60>
   13068:	movw	r0, #22720	; 0x58c0
   1306c:	movt	r0, #2
   13070:	bl	115fc <__assert_fail@plt+0x134>
   13074:	cmp	r0, #0
   13078:	movne	r7, #2
   1307c:	bne	12f28 <__assert_fail@plt+0x1a60>
   13080:	movw	r0, #22724	; 0x58c4
   13084:	movt	r0, #2
   13088:	bl	115fc <__assert_fail@plt+0x134>
   1308c:	cmp	r0, #0
   13090:	movne	r7, #3
   13094:	bne	12f28 <__assert_fail@plt+0x1a60>
   13098:	movw	r0, #22728	; 0x58c8
   1309c:	movt	r0, #2
   130a0:	bl	115fc <__assert_fail@plt+0x134>
   130a4:	cmp	r0, #0
   130a8:	movne	r7, #4
   130ac:	bne	12f28 <__assert_fail@plt+0x1a60>
   130b0:	movw	r0, #22732	; 0x58cc
   130b4:	movt	r0, #2
   130b8:	bl	115fc <__assert_fail@plt+0x134>
   130bc:	cmp	r0, #0
   130c0:	beq	130cc <__assert_fail@plt+0x1c04>
   130c4:	mov	r7, #5
   130c8:	b	12f28 <__assert_fail@plt+0x1a60>
   130cc:	mov	r0, r4
   130d0:	add	sp, sp, #12
   130d4:	ldrd	r4, [sp]
   130d8:	ldrd	r6, [sp, #8]
   130dc:	ldrd	r8, [sp, #16]
   130e0:	ldrd	sl, [sp, #24]
   130e4:	add	sp, sp, #32
   130e8:	pop	{pc}		; (ldr pc, [sp], #4)
   130ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   130f0:	strd	r6, [sp, #8]
   130f4:	str	r8, [sp, #16]
   130f8:	str	lr, [sp, #20]
   130fc:	mov	r8, r0
   13100:	bl	12ee0 <__assert_fail@plt+0x1a18>
   13104:	mov	r4, r0
   13108:	movw	r6, #22736	; 0x58d0
   1310c:	movt	r6, #2
   13110:	mov	r7, #0
   13114:	b	13134 <__assert_fail@plt+0x1c6c>
   13118:	mov	r0, r4
   1311c:	bl	11cec <__assert_fail@plt+0x824>
   13120:	mov	r0, r5
   13124:	bl	11cec <__assert_fail@plt+0x824>
   13128:	mov	r0, r7
   1312c:	bl	11d2c <__assert_fail@plt+0x864>
   13130:	mov	r4, r0
   13134:	mov	r0, r6
   13138:	bl	115fc <__assert_fail@plt+0x134>
   1313c:	cmp	r0, #0
   13140:	beq	13198 <__assert_fail@plt+0x1cd0>
   13144:	cmp	r8, #0
   13148:	moveq	r0, r7
   1314c:	beq	13160 <__assert_fail@plt+0x1c98>
   13150:	mov	r0, r4
   13154:	bl	11b30 <__assert_fail@plt+0x668>
   13158:	eor	r0, r0, #1
   1315c:	uxtb	r0, r0
   13160:	and	r0, r0, #1
   13164:	bl	12ee0 <__assert_fail@plt+0x1a18>
   13168:	mov	r5, r0
   1316c:	mov	r0, r4
   13170:	bl	11b30 <__assert_fail@plt+0x668>
   13174:	cmp	r0, #0
   13178:	bne	13118 <__assert_fail@plt+0x1c50>
   1317c:	mov	r0, r5
   13180:	bl	11b30 <__assert_fail@plt+0x668>
   13184:	cmp	r0, #0
   13188:	bne	13118 <__assert_fail@plt+0x1c50>
   1318c:	mov	r0, r5
   13190:	bl	11cec <__assert_fail@plt+0x824>
   13194:	b	13134 <__assert_fail@plt+0x1c6c>
   13198:	mov	r0, r4
   1319c:	ldrd	r4, [sp]
   131a0:	ldrd	r6, [sp, #8]
   131a4:	ldr	r8, [sp, #16]
   131a8:	add	sp, sp, #20
   131ac:	pop	{pc}		; (ldr pc, [sp], #4)
   131b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   131b4:	strd	r6, [sp, #8]
   131b8:	str	r8, [sp, #16]
   131bc:	str	lr, [sp, #20]
   131c0:	mov	r7, r0
   131c4:	bl	130ec <__assert_fail@plt+0x1c24>
   131c8:	mov	r4, r0
   131cc:	movw	r6, #22740	; 0x58d4
   131d0:	movt	r6, #2
   131d4:	mov	r8, #0
   131d8:	b	131e4 <__assert_fail@plt+0x1d1c>
   131dc:	mov	r0, r5
   131e0:	bl	11cec <__assert_fail@plt+0x824>
   131e4:	mov	r0, r6
   131e8:	bl	115fc <__assert_fail@plt+0x134>
   131ec:	cmp	r0, #0
   131f0:	beq	13258 <__assert_fail@plt+0x1d90>
   131f4:	cmp	r7, #0
   131f8:	moveq	r0, r8
   131fc:	beq	13208 <__assert_fail@plt+0x1d40>
   13200:	mov	r0, r4
   13204:	bl	11b30 <__assert_fail@plt+0x668>
   13208:	and	r0, r0, #1
   1320c:	bl	130ec <__assert_fail@plt+0x1c24>
   13210:	mov	r5, r0
   13214:	mov	r0, r4
   13218:	bl	11b30 <__assert_fail@plt+0x668>
   1321c:	cmp	r0, #0
   13220:	beq	131dc <__assert_fail@plt+0x1d14>
   13224:	mov	r0, r4
   13228:	bl	11cec <__assert_fail@plt+0x824>
   1322c:	mov	r0, r5
   13230:	bl	11b30 <__assert_fail@plt+0x668>
   13234:	cmp	r0, #0
   13238:	moveq	r4, r5
   1323c:	beq	131e4 <__assert_fail@plt+0x1d1c>
   13240:	mov	r0, r5
   13244:	bl	11cec <__assert_fail@plt+0x824>
   13248:	mov	r0, r8
   1324c:	bl	11d2c <__assert_fail@plt+0x864>
   13250:	mov	r4, r0
   13254:	b	131e4 <__assert_fail@plt+0x1d1c>
   13258:	mov	r0, r4
   1325c:	ldrd	r4, [sp]
   13260:	ldrd	r6, [sp, #8]
   13264:	ldr	r8, [sp, #16]
   13268:	add	sp, sp, #20
   1326c:	pop	{pc}		; (ldr pc, [sp], #4)
   13270:	strd	r4, [sp, #-16]!
   13274:	str	r6, [sp, #8]
   13278:	str	lr, [sp, #12]
   1327c:	sub	sp, sp, #24
   13280:	mov	r6, r0
   13284:	mov	r4, r1
   13288:	ldr	r0, [r1]
   1328c:	bl	13d28 <__assert_fail@plt+0x2860>
   13290:	movw	r1, #20932	; 0x51c4
   13294:	movt	r1, #2
   13298:	mov	r0, #6
   1329c:	bl	1145c <setlocale@plt>
   132a0:	movw	r5, #22156	; 0x568c
   132a4:	movt	r5, #2
   132a8:	movw	r1, #22744	; 0x58d8
   132ac:	movt	r1, #2
   132b0:	mov	r0, r5
   132b4:	bl	11498 <bindtextdomain@plt>
   132b8:	mov	r0, r5
   132bc:	bl	11288 <textdomain@plt>
   132c0:	movw	r3, #29000	; 0x7148
   132c4:	movt	r3, #3
   132c8:	mov	r2, #3
   132cc:	str	r2, [r3]
   132d0:	movw	r0, #13460	; 0x3494
   132d4:	movt	r0, #1
   132d8:	bl	24dec <__assert_fail@plt+0x13924>
   132dc:	mov	r3, #0
   132e0:	str	r3, [sp, #20]
   132e4:	movw	r3, #22768	; 0x58f0
   132e8:	movt	r3, #2
   132ec:	str	r3, [sp, #16]
   132f0:	movw	r3, #22780	; 0x58fc
   132f4:	movt	r3, #2
   132f8:	str	r3, [sp, #12]
   132fc:	movw	r3, #22796	; 0x590c
   13300:	movt	r3, #2
   13304:	str	r3, [sp, #8]
   13308:	movw	r3, #5712	; 0x1650
   1330c:	movt	r3, #1
   13310:	str	r3, [sp, #4]
   13314:	movw	r3, #22808	; 0x5918
   13318:	movt	r3, #2
   1331c:	str	r3, [sp]
   13320:	movw	r3, #22152	; 0x5688
   13324:	movt	r3, #2
   13328:	movw	r2, #20060	; 0x4e5c
   1332c:	movt	r2, #2
   13330:	mov	r1, r4
   13334:	mov	r0, r6
   13338:	bl	13604 <__assert_fail@plt+0x213c>
   1333c:	cmp	r6, #1
   13340:	bls	133c0 <__assert_fail@plt+0x1ef8>
   13344:	movw	r1, #22824	; 0x5928
   13348:	movt	r1, #2
   1334c:	ldr	r0, [r4, #4]
   13350:	bl	1118c <strcmp@plt>
   13354:	cmp	r0, #0
   13358:	bne	1336c <__assert_fail@plt+0x1ea4>
   1335c:	add	r4, r4, #4
   13360:	sub	r6, r6, #1
   13364:	cmp	r6, #1
   13368:	bls	133c0 <__assert_fail@plt+0x1ef8>
   1336c:	movw	r5, #29104	; 0x71b0
   13370:	movt	r5, #3
   13374:	add	r4, r4, #4
   13378:	str	r4, [r5]
   1337c:	mov	r0, #1
   13380:	bl	131b0 <__assert_fail@plt+0x1ce8>
   13384:	mov	r4, r0
   13388:	ldr	r5, [r5]
   1338c:	ldr	r3, [r5]
   13390:	cmp	r3, #0
   13394:	bne	133ec <__assert_fail@plt+0x1f24>
   13398:	ldr	r3, [r0]
   1339c:	cmp	r3, #0
   133a0:	beq	13428 <__assert_fail@plt+0x1f60>
   133a4:	cmp	r3, #1
   133a8:	bne	13470 <__assert_fail@plt+0x1fa8>
   133ac:	ldr	r0, [r0, #4]
   133b0:	bl	1130c <puts@plt>
   133b4:	mov	r0, r4
   133b8:	bl	11b30 <__assert_fail@plt+0x668>
   133bc:	bl	11384 <exit@plt>
   133c0:	mov	r2, #5
   133c4:	movw	r1, #22828	; 0x592c
   133c8:	movt	r1, #2
   133cc:	mov	r0, #0
   133d0:	bl	11258 <dcgettext@plt>
   133d4:	mov	r2, r0
   133d8:	mov	r1, #0
   133dc:	mov	r0, r1
   133e0:	bl	112f4 <error@plt>
   133e4:	mov	r0, #2
   133e8:	bl	11650 <__assert_fail@plt+0x188>
   133ec:	mov	r2, #5
   133f0:	movw	r1, #22844	; 0x593c
   133f4:	movt	r1, #2
   133f8:	mov	r0, #0
   133fc:	bl	11258 <dcgettext@plt>
   13400:	mov	r4, r0
   13404:	ldr	r2, [r5]
   13408:	mov	r1, #8
   1340c:	mov	r0, #0
   13410:	bl	15ca8 <__assert_fail@plt+0x47e0>
   13414:	mov	r3, r0
   13418:	mov	r2, r4
   1341c:	mov	r1, #0
   13420:	mov	r0, #2
   13424:	bl	112f4 <error@plt>
   13428:	movw	r5, #29092	; 0x71a4
   1342c:	movt	r5, #3
   13430:	add	r2, r0, #4
   13434:	mov	r1, #10
   13438:	ldr	r0, [r5]
   1343c:	bl	112a0 <__gmpz_out_str@plt>
   13440:	ldr	r0, [r5]
   13444:	ldr	r3, [r0, #20]
   13448:	ldr	r2, [r0, #24]
   1344c:	cmp	r3, r2
   13450:	addcc	r2, r3, #1
   13454:	strcc	r2, [r0, #20]
   13458:	movcc	r2, #10
   1345c:	strbcc	r2, [r3]
   13460:	bcc	133b4 <__assert_fail@plt+0x1eec>
   13464:	mov	r1, #10
   13468:	bl	11450 <__overflow@plt>
   1346c:	b	133b4 <__assert_fail@plt+0x1eec>
   13470:	bl	114bc <abort@plt>
   13474:	movw	r3, #29108	; 0x71b4
   13478:	movt	r3, #3
   1347c:	str	r0, [r3]
   13480:	bx	lr
   13484:	movw	r3, #29108	; 0x71b4
   13488:	movt	r3, #3
   1348c:	strb	r0, [r3, #4]
   13490:	bx	lr
   13494:	strd	r4, [sp, #-16]!
   13498:	str	r6, [sp, #8]
   1349c:	str	lr, [sp, #12]
   134a0:	sub	sp, sp, #8
   134a4:	movw	r3, #29092	; 0x71a4
   134a8:	movt	r3, #3
   134ac:	ldr	r0, [r3]
   134b0:	bl	248a0 <__assert_fail@plt+0x133d8>
   134b4:	cmp	r0, #0
   134b8:	beq	134e0 <__assert_fail@plt+0x2018>
   134bc:	movw	r3, #29108	; 0x71b4
   134c0:	movt	r3, #3
   134c4:	ldrb	r3, [r3, #4]
   134c8:	cmp	r3, #0
   134cc:	beq	1350c <__assert_fail@plt+0x2044>
   134d0:	bl	113c0 <__errno_location@plt>
   134d4:	ldr	r3, [r0]
   134d8:	cmp	r3, #32
   134dc:	bne	1350c <__assert_fail@plt+0x2044>
   134e0:	movw	r3, #29088	; 0x71a0
   134e4:	movt	r3, #3
   134e8:	ldr	r0, [r3]
   134ec:	bl	248a0 <__assert_fail@plt+0x133d8>
   134f0:	cmp	r0, #0
   134f4:	bne	13594 <__assert_fail@plt+0x20cc>
   134f8:	add	sp, sp, #8
   134fc:	ldrd	r4, [sp]
   13500:	ldr	r6, [sp, #8]
   13504:	add	sp, sp, #12
   13508:	pop	{pc}		; (ldr pc, [sp], #4)
   1350c:	mov	r2, #5
   13510:	movw	r1, #22992	; 0x59d0
   13514:	movt	r1, #2
   13518:	mov	r0, #0
   1351c:	bl	11258 <dcgettext@plt>
   13520:	mov	r4, r0
   13524:	movw	r3, #29108	; 0x71b4
   13528:	movt	r3, #3
   1352c:	ldr	r5, [r3]
   13530:	cmp	r5, #0
   13534:	beq	13574 <__assert_fail@plt+0x20ac>
   13538:	bl	113c0 <__errno_location@plt>
   1353c:	ldr	r6, [r0]
   13540:	mov	r0, r5
   13544:	bl	15e20 <__assert_fail@plt+0x4958>
   13548:	str	r4, [sp]
   1354c:	mov	r3, r0
   13550:	movw	r2, #23004	; 0x59dc
   13554:	movt	r2, #2
   13558:	mov	r1, r6
   1355c:	mov	r0, #0
   13560:	bl	112f4 <error@plt>
   13564:	movw	r3, #29000	; 0x7148
   13568:	movt	r3, #3
   1356c:	ldr	r0, [r3]
   13570:	bl	111f8 <_exit@plt>
   13574:	bl	113c0 <__errno_location@plt>
   13578:	mov	r3, r4
   1357c:	movw	r2, #23008	; 0x59e0
   13580:	movt	r2, #2
   13584:	ldr	r1, [r0]
   13588:	mov	r0, #0
   1358c:	bl	112f4 <error@plt>
   13590:	b	13564 <__assert_fail@plt+0x209c>
   13594:	movw	r3, #29000	; 0x7148
   13598:	movt	r3, #3
   1359c:	ldr	r0, [r3]
   135a0:	bl	111f8 <_exit@plt>
   135a4:	strd	r4, [sp, #-12]!
   135a8:	str	lr, [sp, #8]
   135ac:	sub	sp, sp, #12
   135b0:	mov	r5, r0
   135b4:	bl	113c0 <__errno_location@plt>
   135b8:	mov	r4, r0
   135bc:	ldr	r3, [r0]
   135c0:	str	r3, [sp]
   135c4:	str	r3, [sp, #4]
   135c8:	mov	r3, #0
   135cc:	str	r3, [r0]
   135d0:	mov	r0, r5
   135d4:	bl	111e0 <free@plt>
   135d8:	ldr	r3, [r4]
   135dc:	clz	r3, r3
   135e0:	lsr	r3, r3, #5
   135e4:	add	r2, sp, #8
   135e8:	add	r3, r2, r3, lsl #2
   135ec:	ldr	r3, [r3, #-8]
   135f0:	str	r3, [r4]
   135f4:	add	sp, sp, #12
   135f8:	ldrd	r4, [sp]
   135fc:	add	sp, sp, #8
   13600:	pop	{pc}		; (ldr pc, [sp], #4)
   13604:	strd	r4, [sp, #-16]!
   13608:	str	r6, [sp, #8]
   1360c:	str	lr, [sp, #12]
   13610:	sub	sp, sp, #16
   13614:	movw	ip, #29096	; 0x71a8
   13618:	movt	ip, #3
   1361c:	ldr	r4, [ip]
   13620:	mov	lr, #0
   13624:	str	lr, [ip]
   13628:	cmp	r0, #2
   1362c:	beq	13660 <__assert_fail@plt+0x2198>
   13630:	movw	r3, #29096	; 0x71a8
   13634:	movt	r3, #3
   13638:	str	r4, [r3]
   1363c:	movw	r3, #29080	; 0x7198
   13640:	movt	r3, #3
   13644:	mov	r2, #0
   13648:	str	r2, [r3]
   1364c:	add	sp, sp, #16
   13650:	ldrd	r4, [sp]
   13654:	ldr	r6, [sp, #8]
   13658:	add	sp, sp, #12
   1365c:	pop	{pc}		; (ldr pc, [sp], #4)
   13660:	mov	r6, r3
   13664:	mov	r5, r2
   13668:	str	lr, [sp]
   1366c:	movw	r3, #23012	; 0x59e4
   13670:	movt	r3, #2
   13674:	movw	r2, #22484	; 0x57d4
   13678:	movt	r2, #2
   1367c:	bl	1136c <getopt_long@plt>
   13680:	cmn	r0, #1
   13684:	beq	13630 <__assert_fail@plt+0x2168>
   13688:	cmp	r0, #104	; 0x68
   1368c:	beq	136c8 <__assert_fail@plt+0x2200>
   13690:	cmp	r0, #118	; 0x76
   13694:	bne	13630 <__assert_fail@plt+0x2168>
   13698:	add	r3, sp, #40	; 0x28
   1369c:	str	r3, [sp, #12]
   136a0:	movw	r0, #29092	; 0x71a4
   136a4:	movt	r0, #3
   136a8:	str	r3, [sp]
   136ac:	ldr	r3, [sp, #32]
   136b0:	mov	r2, r6
   136b4:	mov	r1, r5
   136b8:	ldr	r0, [r0]
   136bc:	bl	24190 <__assert_fail@plt+0x12cc8>
   136c0:	mov	r0, #0
   136c4:	bl	11384 <exit@plt>
   136c8:	mov	r0, #0
   136cc:	ldr	r3, [sp, #36]	; 0x24
   136d0:	blx	r3
   136d4:	b	13630 <__assert_fail@plt+0x2168>
   136d8:	strd	r4, [sp, #-16]!
   136dc:	str	r6, [sp, #8]
   136e0:	str	lr, [sp, #12]
   136e4:	sub	sp, sp, #16
   136e8:	mov	r5, r2
   136ec:	mov	r6, r3
   136f0:	movw	r3, #29096	; 0x71a8
   136f4:	movt	r3, #3
   136f8:	ldr	r4, [r3]
   136fc:	mov	r2, #1
   13700:	str	r2, [r3]
   13704:	movw	r2, #20932	; 0x51c4
   13708:	movt	r2, #2
   1370c:	movw	ip, #22484	; 0x57d4
   13710:	movt	ip, #2
   13714:	mov	r3, #0
   13718:	str	r3, [sp]
   1371c:	movw	r3, #23012	; 0x59e4
   13720:	movt	r3, #2
   13724:	ldrb	lr, [sp, #36]	; 0x24
   13728:	cmp	lr, #0
   1372c:	moveq	r2, ip
   13730:	bl	1136c <getopt_long@plt>
   13734:	cmn	r0, #1
   13738:	beq	13770 <__assert_fail@plt+0x22a8>
   1373c:	cmp	r0, #104	; 0x68
   13740:	beq	13764 <__assert_fail@plt+0x229c>
   13744:	cmp	r0, #118	; 0x76
   13748:	beq	13790 <__assert_fail@plt+0x22c8>
   1374c:	movw	r3, #29000	; 0x7148
   13750:	movt	r3, #3
   13754:	ldr	r0, [r3]
   13758:	ldr	r3, [sp, #40]	; 0x28
   1375c:	blx	r3
   13760:	b	13770 <__assert_fail@plt+0x22a8>
   13764:	mov	r0, #0
   13768:	ldr	r3, [sp, #40]	; 0x28
   1376c:	blx	r3
   13770:	movw	r3, #29096	; 0x71a8
   13774:	movt	r3, #3
   13778:	str	r4, [r3]
   1377c:	add	sp, sp, #16
   13780:	ldrd	r4, [sp]
   13784:	ldr	r6, [sp, #8]
   13788:	add	sp, sp, #12
   1378c:	pop	{pc}		; (ldr pc, [sp], #4)
   13790:	add	r3, sp, #44	; 0x2c
   13794:	str	r3, [sp, #12]
   13798:	movw	r0, #29092	; 0x71a4
   1379c:	movt	r0, #3
   137a0:	str	r3, [sp]
   137a4:	ldr	r3, [sp, #32]
   137a8:	mov	r2, r6
   137ac:	mov	r1, r5
   137b0:	ldr	r0, [r0]
   137b4:	bl	24190 <__assert_fail@plt+0x12cc8>
   137b8:	mov	r0, #0
   137bc:	bl	11384 <exit@plt>
   137c0:	str	r4, [sp, #-8]!
   137c4:	str	lr, [sp, #4]
   137c8:	mov	r4, r0
   137cc:	bl	111c8 <wcwidth@plt>
   137d0:	cmp	r0, #0
   137d4:	blt	137e4 <__assert_fail@plt+0x231c>
   137d8:	ldr	r4, [sp]
   137dc:	add	sp, sp, #4
   137e0:	pop	{pc}		; (ldr pc, [sp], #4)
   137e4:	mov	r0, r4
   137e8:	bl	11294 <iswcntrl@plt>
   137ec:	clz	r0, r0
   137f0:	lsr	r0, r0, #5
   137f4:	b	137d8 <__assert_fail@plt+0x2310>
   137f8:	strd	r4, [sp, #-16]!
   137fc:	str	r6, [sp, #8]
   13800:	str	lr, [sp, #12]
   13804:	mov	r5, r0
   13808:	mov	r4, r1
   1380c:	ldr	r3, [r1], #16
   13810:	cmp	r3, r1
   13814:	strne	r3, [r0]
   13818:	beq	13848 <__assert_fail@plt+0x2380>
   1381c:	ldr	r3, [r4, #4]
   13820:	str	r3, [r5, #4]
   13824:	ldrb	r3, [r4, #8]
   13828:	strb	r3, [r5, #8]
   1382c:	cmp	r3, #0
   13830:	ldrne	r3, [r4, #12]
   13834:	strne	r3, [r5, #12]
   13838:	ldrd	r4, [sp]
   1383c:	ldr	r6, [sp, #8]
   13840:	add	sp, sp, #12
   13844:	pop	{pc}		; (ldr pc, [sp], #4)
   13848:	add	r6, r0, #16
   1384c:	ldr	r2, [r4, #4]
   13850:	mov	r0, r6
   13854:	bl	11204 <memcpy@plt>
   13858:	str	r6, [r5]
   1385c:	b	1381c <__assert_fail@plt+0x2354>
   13860:	movw	r3, #23076	; 0x5a24
   13864:	movt	r3, #2
   13868:	lsr	r2, r0, #5
   1386c:	and	r0, r0, #31
   13870:	ldr	r3, [r3, r2, lsl #2]
   13874:	lsr	r0, r3, r0
   13878:	and	r0, r0, #1
   1387c:	bx	lr
   13880:	strd	r4, [sp, #-20]!	; 0xffffffec
   13884:	strd	r6, [sp, #8]
   13888:	str	lr, [sp, #16]
   1388c:	sub	sp, sp, #12
   13890:	mov	r7, r1
   13894:	mov	r5, r2
   13898:	subs	r6, r0, #0
   1389c:	addeq	r6, sp, #4
   138a0:	mov	r0, r6
   138a4:	bl	112e8 <mbrtowc@plt>
   138a8:	mov	r4, r0
   138ac:	cmp	r5, #0
   138b0:	cmnne	r0, #3
   138b4:	bhi	138d0 <__assert_fail@plt+0x2408>
   138b8:	mov	r0, r4
   138bc:	add	sp, sp, #12
   138c0:	ldrd	r4, [sp]
   138c4:	ldrd	r6, [sp, #8]
   138c8:	add	sp, sp, #16
   138cc:	pop	{pc}		; (ldr pc, [sp], #4)
   138d0:	mov	r0, #0
   138d4:	bl	24bec <__assert_fail@plt+0x13724>
   138d8:	cmp	r0, #0
   138dc:	bne	138b8 <__assert_fail@plt+0x23f0>
   138e0:	ldrb	r3, [r7]
   138e4:	str	r3, [r6]
   138e8:	mov	r4, #1
   138ec:	b	138b8 <__assert_fail@plt+0x23f0>
   138f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   138f4:	strd	r6, [sp, #8]
   138f8:	str	lr, [sp, #16]
   138fc:	sub	sp, sp, #60	; 0x3c
   13900:	mov	r5, r0
   13904:	mov	r4, r1
   13908:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   1390c:	cmp	r0, #1
   13910:	bls	13920 <__assert_fail@plt+0x2458>
   13914:	uxtb	r6, r4
   13918:	cmp	r6, #47	; 0x2f
   1391c:	bhi	13940 <__assert_fail@plt+0x2478>
   13920:	mov	r1, r4
   13924:	mov	r0, r5
   13928:	bl	1139c <strchr@plt>
   1392c:	add	sp, sp, #60	; 0x3c
   13930:	ldrd	r4, [sp]
   13934:	ldrd	r6, [sp, #8]
   13938:	add	sp, sp, #16
   1393c:	pop	{pc}		; (ldr pc, [sp], #4)
   13940:	str	r5, [sp, #16]
   13944:	mov	r3, #0
   13948:	strb	r3, [sp]
   1394c:	mov	r0, #0
   13950:	mov	r1, #0
   13954:	strd	r0, [sp, #4]
   13958:	strb	r3, [sp, #12]
   1395c:	mov	r4, #1
   13960:	movw	r5, #23076	; 0x5a24
   13964:	movt	r5, #2
   13968:	b	13a44 <__assert_fail@plt+0x257c>
   1396c:	add	r0, sp, #4
   13970:	bl	11234 <mbsinit@plt>
   13974:	cmp	r0, #0
   13978:	beq	13a90 <__assert_fail@plt+0x25c8>
   1397c:	strb	r4, [sp]
   13980:	ldr	r7, [sp, #16]
   13984:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   13988:	mov	r1, r0
   1398c:	mov	r0, r7
   13990:	bl	23a58 <__assert_fail@plt+0x12590>
   13994:	add	r3, sp, #4
   13998:	mov	r2, r0
   1399c:	mov	r1, r7
   139a0:	add	r0, sp, #28
   139a4:	bl	13880 <__assert_fail@plt+0x23b8>
   139a8:	str	r0, [sp, #20]
   139ac:	cmn	r0, #1
   139b0:	streq	r4, [sp, #20]
   139b4:	moveq	r3, #0
   139b8:	strbeq	r3, [sp, #24]
   139bc:	beq	13a08 <__assert_fail@plt+0x2540>
   139c0:	cmn	r0, #2
   139c4:	beq	13ab0 <__assert_fail@plt+0x25e8>
   139c8:	cmp	r0, #0
   139cc:	bne	139f0 <__assert_fail@plt+0x2528>
   139d0:	str	r4, [sp, #20]
   139d4:	ldr	r3, [sp, #16]
   139d8:	ldrb	r3, [r3]
   139dc:	cmp	r3, #0
   139e0:	bne	13ac8 <__assert_fail@plt+0x2600>
   139e4:	ldr	r3, [sp, #28]
   139e8:	cmp	r3, #0
   139ec:	bne	13ae8 <__assert_fail@plt+0x2620>
   139f0:	strb	r4, [sp, #24]
   139f4:	add	r0, sp, #4
   139f8:	bl	11234 <mbsinit@plt>
   139fc:	cmp	r0, #0
   13a00:	movne	r3, #0
   13a04:	strbne	r3, [sp]
   13a08:	strb	r4, [sp, #12]
   13a0c:	ldrb	r3, [sp, #24]
   13a10:	cmp	r3, #0
   13a14:	beq	13a24 <__assert_fail@plt+0x255c>
   13a18:	ldr	r3, [sp, #28]
   13a1c:	cmp	r3, #0
   13a20:	beq	13b1c <__assert_fail@plt+0x2654>
   13a24:	ldr	r2, [sp, #20]
   13a28:	cmp	r2, #1
   13a2c:	beq	13b08 <__assert_fail@plt+0x2640>
   13a30:	ldr	r3, [sp, #16]
   13a34:	add	r3, r3, r2
   13a38:	str	r3, [sp, #16]
   13a3c:	mov	r3, #0
   13a40:	strb	r3, [sp, #12]
   13a44:	ldrb	r3, [sp, #12]
   13a48:	cmp	r3, #0
   13a4c:	bne	13a0c <__assert_fail@plt+0x2544>
   13a50:	ldrb	r3, [sp]
   13a54:	cmp	r3, #0
   13a58:	bne	13980 <__assert_fail@plt+0x24b8>
   13a5c:	ldr	r1, [sp, #16]
   13a60:	ldrb	r3, [r1]
   13a64:	lsr	r2, r3, #5
   13a68:	and	r3, r3, #31
   13a6c:	ldr	r2, [r5, r2, lsl #2]
   13a70:	lsr	r3, r2, r3
   13a74:	tst	r3, #1
   13a78:	beq	1396c <__assert_fail@plt+0x24a4>
   13a7c:	str	r4, [sp, #20]
   13a80:	ldrb	r3, [r1]
   13a84:	str	r3, [sp, #28]
   13a88:	strb	r4, [sp, #24]
   13a8c:	b	13a08 <__assert_fail@plt+0x2540>
   13a90:	movw	r3, #23108	; 0x5a44
   13a94:	movt	r3, #2
   13a98:	mov	r2, #143	; 0x8f
   13a9c:	movw	r1, #23128	; 0x5a58
   13aa0:	movt	r1, #2
   13aa4:	movw	r0, #22380	; 0x576c
   13aa8:	movt	r0, #2
   13aac:	bl	114c8 <__assert_fail@plt>
   13ab0:	ldr	r0, [sp, #16]
   13ab4:	bl	11390 <strlen@plt>
   13ab8:	str	r0, [sp, #20]
   13abc:	mov	r3, #0
   13ac0:	strb	r3, [sp, #24]
   13ac4:	b	13a08 <__assert_fail@plt+0x2540>
   13ac8:	movw	r3, #23108	; 0x5a44
   13acc:	movt	r3, #2
   13ad0:	mov	r2, #171	; 0xab
   13ad4:	movw	r1, #23128	; 0x5a58
   13ad8:	movt	r1, #2
   13adc:	movw	r0, #22404	; 0x5784
   13ae0:	movt	r0, #2
   13ae4:	bl	114c8 <__assert_fail@plt>
   13ae8:	movw	r3, #23108	; 0x5a44
   13aec:	movt	r3, #2
   13af0:	mov	r2, #172	; 0xac
   13af4:	movw	r1, #23128	; 0x5a58
   13af8:	movt	r1, #2
   13afc:	movw	r0, #22428	; 0x579c
   13b00:	movt	r0, #2
   13b04:	bl	114c8 <__assert_fail@plt>
   13b08:	ldr	r0, [sp, #16]
   13b0c:	ldrb	r3, [r0]
   13b10:	cmp	r3, r6
   13b14:	bne	13a30 <__assert_fail@plt+0x2568>
   13b18:	b	1392c <__assert_fail@plt+0x2464>
   13b1c:	mov	r0, #0
   13b20:	b	1392c <__assert_fail@plt+0x2464>
   13b24:	strd	r4, [sp, #-20]!	; 0xffffffec
   13b28:	strd	r6, [sp, #8]
   13b2c:	str	lr, [sp, #16]
   13b30:	sub	sp, sp, #60	; 0x3c
   13b34:	mov	r4, r0
   13b38:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   13b3c:	cmp	r0, #1
   13b40:	bhi	13b68 <__assert_fail@plt+0x26a0>
   13b44:	mov	r0, r4
   13b48:	bl	11390 <strlen@plt>
   13b4c:	mov	r4, r0
   13b50:	mov	r0, r4
   13b54:	add	sp, sp, #60	; 0x3c
   13b58:	ldrd	r4, [sp]
   13b5c:	ldrd	r6, [sp, #8]
   13b60:	add	sp, sp, #16
   13b64:	pop	{pc}		; (ldr pc, [sp], #4)
   13b68:	str	r4, [sp, #16]
   13b6c:	mov	r4, #0
   13b70:	strb	r4, [sp]
   13b74:	mov	r2, #0
   13b78:	mov	r3, #0
   13b7c:	strd	r2, [sp, #4]
   13b80:	strb	r4, [sp, #12]
   13b84:	mov	r5, #1
   13b88:	movw	r6, #23076	; 0x5a24
   13b8c:	movt	r6, #2
   13b90:	b	13c64 <__assert_fail@plt+0x279c>
   13b94:	add	r0, sp, #4
   13b98:	bl	11234 <mbsinit@plt>
   13b9c:	cmp	r0, #0
   13ba0:	beq	13cb0 <__assert_fail@plt+0x27e8>
   13ba4:	strb	r5, [sp]
   13ba8:	ldr	r7, [sp, #16]
   13bac:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   13bb0:	mov	r1, r0
   13bb4:	mov	r0, r7
   13bb8:	bl	23a58 <__assert_fail@plt+0x12590>
   13bbc:	add	r3, sp, #4
   13bc0:	mov	r2, r0
   13bc4:	mov	r1, r7
   13bc8:	add	r0, sp, #28
   13bcc:	bl	13880 <__assert_fail@plt+0x23b8>
   13bd0:	str	r0, [sp, #20]
   13bd4:	cmn	r0, #1
   13bd8:	streq	r5, [sp, #20]
   13bdc:	moveq	r3, #0
   13be0:	strbeq	r3, [sp, #24]
   13be4:	beq	13c30 <__assert_fail@plt+0x2768>
   13be8:	cmn	r0, #2
   13bec:	beq	13cd0 <__assert_fail@plt+0x2808>
   13bf0:	cmp	r0, #0
   13bf4:	bne	13c18 <__assert_fail@plt+0x2750>
   13bf8:	str	r5, [sp, #20]
   13bfc:	ldr	r3, [sp, #16]
   13c00:	ldrb	r3, [r3]
   13c04:	cmp	r3, #0
   13c08:	bne	13ce8 <__assert_fail@plt+0x2820>
   13c0c:	ldr	r3, [sp, #28]
   13c10:	cmp	r3, #0
   13c14:	bne	13d08 <__assert_fail@plt+0x2840>
   13c18:	strb	r5, [sp, #24]
   13c1c:	add	r0, sp, #4
   13c20:	bl	11234 <mbsinit@plt>
   13c24:	cmp	r0, #0
   13c28:	movne	r3, #0
   13c2c:	strbne	r3, [sp]
   13c30:	ldrb	r3, [sp, #24]
   13c34:	cmp	r3, #0
   13c38:	beq	13c48 <__assert_fail@plt+0x2780>
   13c3c:	ldr	r3, [sp, #28]
   13c40:	cmp	r3, #0
   13c44:	beq	13b50 <__assert_fail@plt+0x2688>
   13c48:	add	r4, r4, #1
   13c4c:	ldr	r3, [sp, #16]
   13c50:	ldr	r2, [sp, #20]
   13c54:	add	r3, r3, r2
   13c58:	str	r3, [sp, #16]
   13c5c:	mov	r3, #0
   13c60:	strb	r3, [sp, #12]
   13c64:	ldrb	r3, [sp, #12]
   13c68:	cmp	r3, #0
   13c6c:	bne	13c30 <__assert_fail@plt+0x2768>
   13c70:	ldrb	r3, [sp]
   13c74:	cmp	r3, #0
   13c78:	bne	13ba8 <__assert_fail@plt+0x26e0>
   13c7c:	ldr	r1, [sp, #16]
   13c80:	ldrb	r3, [r1]
   13c84:	lsr	r2, r3, #5
   13c88:	and	r3, r3, #31
   13c8c:	ldr	r2, [r6, r2, lsl #2]
   13c90:	lsr	r3, r2, r3
   13c94:	tst	r3, #1
   13c98:	beq	13b94 <__assert_fail@plt+0x26cc>
   13c9c:	str	r5, [sp, #20]
   13ca0:	ldrb	r3, [r1]
   13ca4:	str	r3, [sp, #28]
   13ca8:	strb	r5, [sp, #24]
   13cac:	b	13c30 <__assert_fail@plt+0x2768>
   13cb0:	movw	r3, #23144	; 0x5a68
   13cb4:	movt	r3, #2
   13cb8:	mov	r2, #143	; 0x8f
   13cbc:	movw	r1, #23128	; 0x5a58
   13cc0:	movt	r1, #2
   13cc4:	movw	r0, #22380	; 0x576c
   13cc8:	movt	r0, #2
   13ccc:	bl	114c8 <__assert_fail@plt>
   13cd0:	ldr	r0, [sp, #16]
   13cd4:	bl	11390 <strlen@plt>
   13cd8:	str	r0, [sp, #20]
   13cdc:	mov	r3, #0
   13ce0:	strb	r3, [sp, #24]
   13ce4:	b	13c30 <__assert_fail@plt+0x2768>
   13ce8:	movw	r3, #23144	; 0x5a68
   13cec:	movt	r3, #2
   13cf0:	mov	r2, #171	; 0xab
   13cf4:	movw	r1, #23128	; 0x5a58
   13cf8:	movt	r1, #2
   13cfc:	movw	r0, #22404	; 0x5784
   13d00:	movt	r0, #2
   13d04:	bl	114c8 <__assert_fail@plt>
   13d08:	movw	r3, #23144	; 0x5a68
   13d0c:	movt	r3, #2
   13d10:	mov	r2, #172	; 0xac
   13d14:	movw	r1, #23128	; 0x5a58
   13d18:	movt	r1, #2
   13d1c:	movw	r0, #22428	; 0x579c
   13d20:	movt	r0, #2
   13d24:	bl	114c8 <__assert_fail@plt>
   13d28:	strd	r4, [sp, #-16]!
   13d2c:	str	r6, [sp, #8]
   13d30:	str	lr, [sp, #12]
   13d34:	subs	r4, r0, #0
   13d38:	beq	13dd4 <__assert_fail@plt+0x290c>
   13d3c:	mov	r1, #47	; 0x2f
   13d40:	mov	r0, r4
   13d44:	bl	11468 <strrchr@plt>
   13d48:	subs	r5, r0, #0
   13d4c:	beq	13dac <__assert_fail@plt+0x28e4>
   13d50:	add	r6, r5, #1
   13d54:	sub	r3, r6, r4
   13d58:	cmp	r3, #6
   13d5c:	ble	13dac <__assert_fail@plt+0x28e4>
   13d60:	mov	r2, #7
   13d64:	movw	r1, #23220	; 0x5ab4
   13d68:	movt	r1, #2
   13d6c:	sub	r0, r5, #6
   13d70:	bl	114b0 <strncmp@plt>
   13d74:	cmp	r0, #0
   13d78:	bne	13dac <__assert_fail@plt+0x28e4>
   13d7c:	mov	r2, #3
   13d80:	movw	r1, #23228	; 0x5abc
   13d84:	movt	r1, #2
   13d88:	mov	r0, r6
   13d8c:	bl	114b0 <strncmp@plt>
   13d90:	cmp	r0, #0
   13d94:	movne	r4, r6
   13d98:	bne	13dac <__assert_fail@plt+0x28e4>
   13d9c:	add	r4, r5, #4
   13da0:	movw	r3, #29072	; 0x7190
   13da4:	movt	r3, #3
   13da8:	str	r4, [r3]
   13dac:	movw	r3, #29116	; 0x71bc
   13db0:	movt	r3, #3
   13db4:	str	r4, [r3]
   13db8:	movw	r3, #29076	; 0x7194
   13dbc:	movt	r3, #3
   13dc0:	str	r4, [r3]
   13dc4:	ldrd	r4, [sp]
   13dc8:	ldr	r6, [sp, #8]
   13dcc:	add	sp, sp, #12
   13dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   13dd4:	movw	r3, #29088	; 0x71a0
   13dd8:	movt	r3, #3
   13ddc:	ldr	r3, [r3]
   13de0:	mov	r2, #55	; 0x37
   13de4:	mov	r1, #1
   13de8:	movw	r0, #23164	; 0x5a7c
   13dec:	movt	r0, #2
   13df0:	bl	112b8 <fwrite@plt>
   13df4:	bl	114bc <abort@plt>
   13df8:	mov	r2, #0
   13dfc:	mov	r3, #0
   13e00:	strd	r2, [r0]
   13e04:	strd	r2, [r0, #8]
   13e08:	strd	r2, [r0, #16]
   13e0c:	strd	r2, [r0, #24]
   13e10:	strd	r2, [r0, #32]
   13e14:	strd	r2, [r0, #40]	; 0x28
   13e18:	cmp	r1, #10
   13e1c:	beq	13e28 <__assert_fail@plt+0x2960>
   13e20:	str	r1, [r0]
   13e24:	bx	lr
   13e28:	str	r4, [sp, #-8]!
   13e2c:	str	lr, [sp, #4]
   13e30:	bl	114bc <abort@plt>
   13e34:	strd	r4, [sp, #-16]!
   13e38:	str	r6, [sp, #8]
   13e3c:	str	lr, [sp, #12]
   13e40:	mov	r5, r0
   13e44:	mov	r6, r1
   13e48:	mov	r2, #5
   13e4c:	mov	r1, r0
   13e50:	mov	r0, #0
   13e54:	bl	11258 <dcgettext@plt>
   13e58:	mov	r4, r0
   13e5c:	cmp	r5, r0
   13e60:	beq	13e78 <__assert_fail@plt+0x29b0>
   13e64:	mov	r0, r4
   13e68:	ldrd	r4, [sp]
   13e6c:	ldr	r6, [sp, #8]
   13e70:	add	sp, sp, #12
   13e74:	pop	{pc}		; (ldr pc, [sp], #4)
   13e78:	bl	24c48 <__assert_fail@plt+0x13780>
   13e7c:	ldrb	r3, [r0]
   13e80:	bic	r3, r3, #32
   13e84:	cmp	r3, #85	; 0x55
   13e88:	bne	13f0c <__assert_fail@plt+0x2a44>
   13e8c:	ldrb	r3, [r0, #1]
   13e90:	bic	r3, r3, #32
   13e94:	cmp	r3, #84	; 0x54
   13e98:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13e9c:	ldrb	r3, [r0, #2]
   13ea0:	bic	r3, r3, #32
   13ea4:	cmp	r3, #70	; 0x46
   13ea8:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13eac:	ldrb	r3, [r0, #3]
   13eb0:	cmp	r3, #45	; 0x2d
   13eb4:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13eb8:	ldrb	r3, [r0, #4]
   13ebc:	cmp	r3, #56	; 0x38
   13ec0:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13ec4:	ldrb	r3, [r0, #5]
   13ec8:	cmp	r3, #0
   13ecc:	beq	13eec <__assert_fail@plt+0x2a24>
   13ed0:	movw	r4, #23316	; 0x5b14
   13ed4:	movt	r4, #2
   13ed8:	movw	r3, #23336	; 0x5b28
   13edc:	movt	r3, #2
   13ee0:	cmp	r6, #9
   13ee4:	movne	r4, r3
   13ee8:	b	13e64 <__assert_fail@plt+0x299c>
   13eec:	ldrb	r2, [r4]
   13ef0:	movw	r4, #23332	; 0x5b24
   13ef4:	movt	r4, #2
   13ef8:	movw	r3, #23320	; 0x5b18
   13efc:	movt	r3, #2
   13f00:	cmp	r2, #96	; 0x60
   13f04:	movne	r4, r3
   13f08:	b	13e64 <__assert_fail@plt+0x299c>
   13f0c:	cmp	r3, #71	; 0x47
   13f10:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13f14:	ldrb	r3, [r0, #1]
   13f18:	bic	r3, r3, #32
   13f1c:	cmp	r3, #66	; 0x42
   13f20:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13f24:	ldrb	r3, [r0, #2]
   13f28:	cmp	r3, #49	; 0x31
   13f2c:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13f30:	ldrb	r3, [r0, #3]
   13f34:	cmp	r3, #56	; 0x38
   13f38:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13f3c:	ldrb	r3, [r0, #4]
   13f40:	cmp	r3, #48	; 0x30
   13f44:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13f48:	ldrb	r3, [r0, #5]
   13f4c:	cmp	r3, #51	; 0x33
   13f50:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13f54:	ldrb	r3, [r0, #6]
   13f58:	cmp	r3, #48	; 0x30
   13f5c:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13f60:	ldrb	r3, [r0, #7]
   13f64:	cmp	r3, #0
   13f68:	bne	13ed0 <__assert_fail@plt+0x2a08>
   13f6c:	ldrb	r2, [r4]
   13f70:	movw	r4, #23328	; 0x5b20
   13f74:	movt	r4, #2
   13f78:	movw	r3, #23324	; 0x5b1c
   13f7c:	movt	r3, #2
   13f80:	cmp	r2, #96	; 0x60
   13f84:	movne	r4, r3
   13f88:	b	13e64 <__assert_fail@plt+0x299c>
   13f8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f90:	strd	r6, [sp, #8]
   13f94:	strd	r8, [sp, #16]
   13f98:	strd	sl, [sp, #24]
   13f9c:	str	lr, [sp, #32]
   13fa0:	sub	sp, sp, #116	; 0x74
   13fa4:	str	r0, [sp, #64]	; 0x40
   13fa8:	mov	r8, r1
   13fac:	str	r2, [sp, #48]	; 0x30
   13fb0:	str	r3, [sp, #24]
   13fb4:	ldr	r7, [sp, #152]	; 0x98
   13fb8:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   13fbc:	str	r0, [sp, #76]	; 0x4c
   13fc0:	ldr	r3, [sp, #156]	; 0x9c
   13fc4:	ubfx	r3, r3, #1, #1
   13fc8:	str	r3, [sp, #32]
   13fcc:	mov	r3, #1
   13fd0:	str	r3, [sp, #40]	; 0x28
   13fd4:	mov	r3, #0
   13fd8:	str	r3, [sp, #68]	; 0x44
   13fdc:	str	r3, [sp, #36]	; 0x24
   13fe0:	str	r3, [sp, #28]
   13fe4:	str	r3, [sp, #52]	; 0x34
   13fe8:	str	r3, [sp, #60]	; 0x3c
   13fec:	str	r3, [sp, #72]	; 0x48
   13ff0:	movw	r3, #23340	; 0x5b2c
   13ff4:	movt	r3, #2
   13ff8:	str	r3, [sp, #80]	; 0x50
   13ffc:	mov	r9, r8
   14000:	mov	sl, r7
   14004:	cmp	sl, #10
   14008:	ldrls	pc, [pc, sl, lsl #2]
   1400c:	b	141d0 <__assert_fail@plt+0x2d08>
   14010:	andeq	r4, r1, r0, ror r0
   14014:	andeq	r4, r1, r4, asr #32
   14018:	andeq	r4, r1, r8, lsr #3
   1401c:	andeq	r4, r1, ip, lsr r0
   14020:	andeq	r4, r1, ip, asr r1
   14024:	andeq	r4, r1, r0, lsl #1
   14028:	andeq	r5, r1, ip, asr #8
   1402c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14030:	strheq	r4, [r1], -ip
   14034:	strheq	r4, [r1], -ip
   14038:	strheq	r4, [r1], -ip
   1403c:	mov	r3, #1
   14040:	str	r3, [sp, #28]
   14044:	mov	r3, #1
   14048:	str	r3, [sp, #32]
   1404c:	str	r3, [sp, #52]	; 0x34
   14050:	movw	r3, #23336	; 0x5b28
   14054:	movt	r3, #2
   14058:	str	r3, [sp, #60]	; 0x3c
   1405c:	mov	fp, #0
   14060:	mov	sl, #2
   14064:	mov	r6, #0
   14068:	ldr	r8, [sp, #64]	; 0x40
   1406c:	b	148e4 <__assert_fail@plt+0x341c>
   14070:	mov	fp, sl
   14074:	mov	r3, #0
   14078:	str	r3, [sp, #32]
   1407c:	b	14064 <__assert_fail@plt+0x2b9c>
   14080:	ldr	r3, [sp, #32]
   14084:	cmp	r3, #0
   14088:	bne	141e8 <__assert_fail@plt+0x2d20>
   1408c:	cmp	r9, #0
   14090:	beq	1420c <__assert_fail@plt+0x2d44>
   14094:	mov	r3, #34	; 0x22
   14098:	ldr	r2, [sp, #64]	; 0x40
   1409c:	strb	r3, [r2]
   140a0:	mov	fp, #1
   140a4:	str	fp, [sp, #28]
   140a8:	str	fp, [sp, #52]	; 0x34
   140ac:	movw	r3, #23316	; 0x5b14
   140b0:	movt	r3, #2
   140b4:	str	r3, [sp, #60]	; 0x3c
   140b8:	b	14064 <__assert_fail@plt+0x2b9c>
   140bc:	cmp	sl, #10
   140c0:	bne	140f4 <__assert_fail@plt+0x2c2c>
   140c4:	ldr	r3, [sp, #32]
   140c8:	cmp	r3, #0
   140cc:	movne	fp, #0
   140d0:	beq	1411c <__assert_fail@plt+0x2c54>
   140d4:	ldr	r0, [sp, #168]	; 0xa8
   140d8:	bl	11390 <strlen@plt>
   140dc:	str	r0, [sp, #52]	; 0x34
   140e0:	ldr	r3, [sp, #168]	; 0xa8
   140e4:	str	r3, [sp, #60]	; 0x3c
   140e8:	mov	r3, #1
   140ec:	str	r3, [sp, #28]
   140f0:	b	14064 <__assert_fail@plt+0x2b9c>
   140f4:	mov	r1, sl
   140f8:	ldr	r0, [sp, #80]	; 0x50
   140fc:	bl	13e34 <__assert_fail@plt+0x296c>
   14100:	str	r0, [sp, #164]	; 0xa4
   14104:	mov	r1, sl
   14108:	movw	r0, #23336	; 0x5b28
   1410c:	movt	r0, #2
   14110:	bl	13e34 <__assert_fail@plt+0x296c>
   14114:	str	r0, [sp, #168]	; 0xa8
   14118:	b	140c4 <__assert_fail@plt+0x2bfc>
   1411c:	ldr	r3, [sp, #164]	; 0xa4
   14120:	ldrb	r3, [r3]
   14124:	cmp	r3, #0
   14128:	beq	14154 <__assert_fail@plt+0x2c8c>
   1412c:	ldr	r2, [sp, #164]	; 0xa4
   14130:	mov	fp, #0
   14134:	ldr	r1, [sp, #64]	; 0x40
   14138:	cmp	r9, fp
   1413c:	strbhi	r3, [r1, fp]
   14140:	add	fp, fp, #1
   14144:	ldrb	r3, [r2, #1]!
   14148:	cmp	r3, #0
   1414c:	bne	14138 <__assert_fail@plt+0x2c70>
   14150:	b	140d4 <__assert_fail@plt+0x2c0c>
   14154:	mov	fp, #0
   14158:	b	140d4 <__assert_fail@plt+0x2c0c>
   1415c:	ldr	r3, [sp, #32]
   14160:	cmp	r3, #0
   14164:	bne	14044 <__assert_fail@plt+0x2b7c>
   14168:	mov	r3, #1
   1416c:	str	r3, [sp, #28]
   14170:	cmp	r9, #0
   14174:	beq	14228 <__assert_fail@plt+0x2d60>
   14178:	mov	r3, #39	; 0x27
   1417c:	ldr	r2, [sp, #64]	; 0x40
   14180:	strb	r3, [r2]
   14184:	mov	r3, #0
   14188:	str	r3, [sp, #32]
   1418c:	mov	fp, #1
   14190:	str	fp, [sp, #52]	; 0x34
   14194:	movw	r3, #23336	; 0x5b28
   14198:	movt	r3, #2
   1419c:	str	r3, [sp, #60]	; 0x3c
   141a0:	mov	sl, #2
   141a4:	b	14064 <__assert_fail@plt+0x2b9c>
   141a8:	ldr	r3, [sp, #32]
   141ac:	cmp	r3, #0
   141b0:	beq	14170 <__assert_fail@plt+0x2ca8>
   141b4:	mov	r3, #1
   141b8:	str	r3, [sp, #52]	; 0x34
   141bc:	movw	r3, #23336	; 0x5b28
   141c0:	movt	r3, #2
   141c4:	str	r3, [sp, #60]	; 0x3c
   141c8:	mov	fp, #0
   141cc:	b	14064 <__assert_fail@plt+0x2b9c>
   141d0:	bl	114bc <abort@plt>
   141d4:	mov	fp, #0
   141d8:	str	fp, [sp, #32]
   141dc:	mov	r3, #1
   141e0:	str	r3, [sp, #28]
   141e4:	b	14064 <__assert_fail@plt+0x2b9c>
   141e8:	ldr	r3, [sp, #32]
   141ec:	str	r3, [sp, #28]
   141f0:	mov	r3, #1
   141f4:	str	r3, [sp, #52]	; 0x34
   141f8:	movw	r3, #23316	; 0x5b14
   141fc:	movt	r3, #2
   14200:	str	r3, [sp, #60]	; 0x3c
   14204:	mov	fp, #0
   14208:	b	14064 <__assert_fail@plt+0x2b9c>
   1420c:	mov	fp, #1
   14210:	str	fp, [sp, #28]
   14214:	str	fp, [sp, #52]	; 0x34
   14218:	movw	r3, #23316	; 0x5b14
   1421c:	movt	r3, #2
   14220:	str	r3, [sp, #60]	; 0x3c
   14224:	b	14064 <__assert_fail@plt+0x2b9c>
   14228:	mov	r3, #0
   1422c:	str	r3, [sp, #32]
   14230:	mov	fp, #1
   14234:	str	fp, [sp, #52]	; 0x34
   14238:	movw	r3, #23336	; 0x5b28
   1423c:	movt	r3, #2
   14240:	str	r3, [sp, #60]	; 0x3c
   14244:	mov	sl, #2
   14248:	b	14064 <__assert_fail@plt+0x2b9c>
   1424c:	mov	r3, r2
   14250:	add	r4, r6, r2
   14254:	ldr	r2, [sp, #24]
   14258:	cmp	r3, #1
   1425c:	movls	r3, #0
   14260:	movhi	r3, #1
   14264:	cmn	r2, #1
   14268:	movne	r3, #0
   1426c:	cmp	r3, #0
   14270:	beq	14280 <__assert_fail@plt+0x2db8>
   14274:	ldr	r0, [sp, #48]	; 0x30
   14278:	bl	11390 <strlen@plt>
   1427c:	str	r0, [sp, #24]
   14280:	ldr	r3, [sp, #24]
   14284:	cmp	r4, r3
   14288:	bhi	15474 <__assert_fail@plt+0x3fac>
   1428c:	ldr	r3, [sp, #48]	; 0x30
   14290:	add	r4, r3, r6
   14294:	ldr	r2, [sp, #52]	; 0x34
   14298:	ldr	r1, [sp, #60]	; 0x3c
   1429c:	mov	r0, r4
   142a0:	bl	11240 <memcmp@plt>
   142a4:	cmp	r0, #0
   142a8:	bne	15474 <__assert_fail@plt+0x3fac>
   142ac:	ldr	r3, [sp, #32]
   142b0:	cmp	r3, #0
   142b4:	bne	144c4 <__assert_fail@plt+0x2ffc>
   142b8:	ldrb	r4, [r4]
   142bc:	cmp	r4, #126	; 0x7e
   142c0:	ldrls	pc, [pc, r4, lsl #2]
   142c4:	b	14d78 <__assert_fail@plt+0x38b0>
   142c8:	andeq	r4, r1, r8, lsl #10
   142cc:	andeq	r4, r1, r8, ror sp
   142d0:	andeq	r4, r1, r8, ror sp
   142d4:	andeq	r4, r1, r8, ror sp
   142d8:	andeq	r4, r1, r8, ror sp
   142dc:	andeq	r4, r1, r8, ror sp
   142e0:	andeq	r4, r1, r8, ror sp
   142e4:	andeq	r4, r1, r0, lsr #24
   142e8:	andeq	r4, r1, r4, lsr #15
   142ec:	andeq	r4, r1, r8, asr #22
   142f0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   142f4:	andeq	r4, r1, ip, asr fp
   142f8:			; <UNDEFINED> instruction: 0x000147b8
   142fc:	andeq	r4, r1, ip, asr #15
   14300:	andeq	r4, r1, r8, ror sp
   14304:	andeq	r4, r1, r8, ror sp
   14308:	andeq	r4, r1, r8, ror sp
   1430c:	andeq	r4, r1, r8, ror sp
   14310:	andeq	r4, r1, r8, ror sp
   14314:	andeq	r4, r1, r8, ror sp
   14318:	andeq	r4, r1, r8, ror sp
   1431c:	andeq	r4, r1, r8, ror sp
   14320:	andeq	r4, r1, r8, ror sp
   14324:	andeq	r4, r1, r8, ror sp
   14328:	andeq	r4, r1, r8, ror sp
   1432c:	andeq	r4, r1, r8, ror sp
   14330:	andeq	r4, r1, r8, ror sp
   14334:	andeq	r4, r1, r8, ror sp
   14338:	andeq	r4, r1, r8, ror sp
   1433c:	andeq	r4, r1, r8, ror sp
   14340:	andeq	r4, r1, r8, ror sp
   14344:	andeq	r4, r1, r8, ror sp
   14348:	muleq	r1, r4, ip
   1434c:			; <UNDEFINED> instruction: 0x00014cb8
   14350:			; <UNDEFINED> instruction: 0x00014cb8
   14354:	andeq	r4, r1, r0, asr ip
   14358:			; <UNDEFINED> instruction: 0x00014cb8
   1435c:	ldrdeq	r5, [r1], -r8
   14360:			; <UNDEFINED> instruction: 0x00014cb8
   14364:	ldrdeq	r4, [r1], -r8
   14368:			; <UNDEFINED> instruction: 0x00014cb8
   1436c:			; <UNDEFINED> instruction: 0x00014cb8
   14370:			; <UNDEFINED> instruction: 0x00014cb8
   14374:	ldrdeq	r5, [r1], -r8
   14378:	ldrdeq	r5, [r1], -r8
   1437c:	ldrdeq	r5, [r1], -r8
   14380:	ldrdeq	r5, [r1], -r8
   14384:	ldrdeq	r5, [r1], -r8
   14388:	ldrdeq	r5, [r1], -r8
   1438c:	ldrdeq	r5, [r1], -r8
   14390:	ldrdeq	r5, [r1], -r8
   14394:	ldrdeq	r5, [r1], -r8
   14398:	ldrdeq	r5, [r1], -r8
   1439c:	ldrdeq	r5, [r1], -r8
   143a0:	ldrdeq	r5, [r1], -r8
   143a4:	ldrdeq	r5, [r1], -r8
   143a8:	ldrdeq	r5, [r1], -r8
   143ac:	ldrdeq	r5, [r1], -r8
   143b0:	ldrdeq	r5, [r1], -r8
   143b4:			; <UNDEFINED> instruction: 0x00014cb8
   143b8:			; <UNDEFINED> instruction: 0x00014cb8
   143bc:			; <UNDEFINED> instruction: 0x00014cb8
   143c0:			; <UNDEFINED> instruction: 0x00014cb8
   143c4:	andeq	r4, r1, r8, lsr r6
   143c8:	andeq	r4, r1, r8, ror sp
   143cc:	ldrdeq	r5, [r1], -r8
   143d0:	ldrdeq	r5, [r1], -r8
   143d4:	ldrdeq	r5, [r1], -r8
   143d8:	ldrdeq	r5, [r1], -r8
   143dc:	ldrdeq	r5, [r1], -r8
   143e0:	ldrdeq	r5, [r1], -r8
   143e4:	ldrdeq	r5, [r1], -r8
   143e8:	ldrdeq	r5, [r1], -r8
   143ec:	ldrdeq	r5, [r1], -r8
   143f0:	ldrdeq	r5, [r1], -r8
   143f4:	ldrdeq	r5, [r1], -r8
   143f8:	ldrdeq	r5, [r1], -r8
   143fc:	ldrdeq	r5, [r1], -r8
   14400:	ldrdeq	r5, [r1], -r8
   14404:	ldrdeq	r5, [r1], -r8
   14408:	ldrdeq	r5, [r1], -r8
   1440c:	ldrdeq	r5, [r1], -r8
   14410:	ldrdeq	r5, [r1], -r8
   14414:	ldrdeq	r5, [r1], -r8
   14418:	ldrdeq	r5, [r1], -r8
   1441c:	ldrdeq	r5, [r1], -r8
   14420:	ldrdeq	r5, [r1], -r8
   14424:	ldrdeq	r5, [r1], -r8
   14428:	ldrdeq	r5, [r1], -r8
   1442c:	ldrdeq	r5, [r1], -r8
   14430:	ldrdeq	r5, [r1], -r8
   14434:			; <UNDEFINED> instruction: 0x00014cb8
   14438:	andeq	r4, r1, r0, ror fp
   1443c:	ldrdeq	r5, [r1], -r8
   14440:			; <UNDEFINED> instruction: 0x00014cb8
   14444:	ldrdeq	r5, [r1], -r8
   14448:			; <UNDEFINED> instruction: 0x00014cb8
   1444c:	ldrdeq	r5, [r1], -r8
   14450:	ldrdeq	r5, [r1], -r8
   14454:	ldrdeq	r5, [r1], -r8
   14458:	ldrdeq	r5, [r1], -r8
   1445c:	ldrdeq	r5, [r1], -r8
   14460:	ldrdeq	r5, [r1], -r8
   14464:	ldrdeq	r5, [r1], -r8
   14468:	ldrdeq	r5, [r1], -r8
   1446c:	ldrdeq	r5, [r1], -r8
   14470:	ldrdeq	r5, [r1], -r8
   14474:	ldrdeq	r5, [r1], -r8
   14478:	ldrdeq	r5, [r1], -r8
   1447c:	ldrdeq	r5, [r1], -r8
   14480:	ldrdeq	r5, [r1], -r8
   14484:	ldrdeq	r5, [r1], -r8
   14488:	ldrdeq	r5, [r1], -r8
   1448c:	ldrdeq	r5, [r1], -r8
   14490:	ldrdeq	r5, [r1], -r8
   14494:	ldrdeq	r5, [r1], -r8
   14498:	ldrdeq	r5, [r1], -r8
   1449c:	ldrdeq	r5, [r1], -r8
   144a0:	ldrdeq	r5, [r1], -r8
   144a4:	ldrdeq	r5, [r1], -r8
   144a8:	ldrdeq	r5, [r1], -r8
   144ac:	ldrdeq	r5, [r1], -r8
   144b0:	ldrdeq	r5, [r1], -r8
   144b4:	andeq	r4, r1, r0, lsr ip
   144b8:			; <UNDEFINED> instruction: 0x00014cb8
   144bc:	andeq	r4, r1, r0, lsr ip
   144c0:	andeq	r4, r1, r0, asr ip
   144c4:	mov	r8, r9
   144c8:	mov	r7, sl
   144cc:	b	153cc <__assert_fail@plt+0x3f04>
   144d0:	ldr	r3, [sp, #28]
   144d4:	cmp	r3, #0
   144d8:	bne	144f8 <__assert_fail@plt+0x3030>
   144dc:	ldr	r3, [sp, #156]	; 0x9c
   144e0:	tst	r3, #1
   144e4:	bne	148e0 <__assert_fail@plt+0x3418>
   144e8:	ldr	r3, [sp, #28]
   144ec:	str	r3, [sp, #44]	; 0x2c
   144f0:	mov	r5, r3
   144f4:	b	14800 <__assert_fail@plt+0x3338>
   144f8:	ldr	r3, [sp, #32]
   144fc:	cmp	r3, #0
   14500:	bne	1537c <__assert_fail@plt+0x3eb4>
   14504:	str	r3, [sp, #44]	; 0x2c
   14508:	ldr	r3, [sp, #36]	; 0x24
   1450c:	eor	r3, r3, #1
   14510:	cmp	sl, #2
   14514:	movne	r3, #0
   14518:	andeq	r3, r3, #1
   1451c:	cmp	r3, #0
   14520:	beq	14578 <__assert_fail@plt+0x30b0>
   14524:	cmp	r9, fp
   14528:	movhi	r2, #39	; 0x27
   1452c:	strbhi	r2, [r8, fp]
   14530:	add	r2, fp, #1
   14534:	cmp	r9, r2
   14538:	movhi	r1, #36	; 0x24
   1453c:	strbhi	r1, [r8, r2]
   14540:	add	r2, fp, #2
   14544:	cmp	r9, r2
   14548:	movhi	r1, #39	; 0x27
   1454c:	strbhi	r1, [r8, r2]
   14550:	add	r2, fp, #3
   14554:	cmp	r9, r2
   14558:	bls	15438 <__assert_fail@plt+0x3f70>
   1455c:	mov	r1, #92	; 0x5c
   14560:	strb	r1, [r8, r2]
   14564:	add	fp, fp, #4
   14568:	str	r3, [sp, #36]	; 0x24
   1456c:	mov	r5, #0
   14570:	mov	r4, #48	; 0x30
   14574:	b	1484c <__assert_fail@plt+0x3384>
   14578:	cmp	r9, fp
   1457c:	bhi	145a4 <__assert_fail@plt+0x30dc>
   14580:	add	r1, fp, #1
   14584:	ldr	r2, [sp, #56]	; 0x38
   14588:	cmp	r2, #0
   1458c:	bne	145cc <__assert_fail@plt+0x3104>
   14590:	mov	r3, r5
   14594:	ldr	r5, [sp, #56]	; 0x38
   14598:	mov	fp, r1
   1459c:	mov	r4, #48	; 0x30
   145a0:	b	14800 <__assert_fail@plt+0x3338>
   145a4:	mov	r2, #92	; 0x5c
   145a8:	strb	r2, [r8, fp]
   145ac:	add	r1, fp, #1
   145b0:	ldr	r2, [sp, #56]	; 0x38
   145b4:	cmp	r2, #0
   145b8:	moveq	r3, r5
   145bc:	moveq	r5, r2
   145c0:	moveq	fp, r1
   145c4:	moveq	r4, #48	; 0x30
   145c8:	beq	1484c <__assert_fail@plt+0x3384>
   145cc:	add	r2, r6, #1
   145d0:	ldr	r0, [sp, #24]
   145d4:	cmp	r2, r0
   145d8:	bcs	145f4 <__assert_fail@plt+0x312c>
   145dc:	ldr	r0, [sp, #48]	; 0x30
   145e0:	ldrb	r2, [r0, r2]
   145e4:	sub	r2, r2, #48	; 0x30
   145e8:	uxtb	r2, r2
   145ec:	cmp	r2, #9
   145f0:	bls	1460c <__assert_fail@plt+0x3144>
   145f4:	mov	r2, r3
   145f8:	mov	r3, r5
   145fc:	mov	r5, r2
   14600:	mov	fp, r1
   14604:	mov	r4, #48	; 0x30
   14608:	b	14824 <__assert_fail@plt+0x335c>
   1460c:	cmp	r9, r1
   14610:	movhi	r2, #48	; 0x30
   14614:	strbhi	r2, [r8, r1]
   14618:	add	r2, fp, #2
   1461c:	cmp	r9, r2
   14620:	movhi	r1, #48	; 0x30
   14624:	strbhi	r1, [r8, r2]
   14628:	add	r1, fp, #3
   1462c:	b	145f4 <__assert_fail@plt+0x312c>
   14630:	mov	r3, #0
   14634:	str	r3, [sp, #44]	; 0x2c
   14638:	cmp	sl, #2
   1463c:	beq	14658 <__assert_fail@plt+0x3190>
   14640:	cmp	sl, #5
   14644:	beq	14670 <__assert_fail@plt+0x31a8>
   14648:	mov	r5, #0
   1464c:	mov	r3, r5
   14650:	mov	r4, #63	; 0x3f
   14654:	b	14800 <__assert_fail@plt+0x3338>
   14658:	ldr	r3, [sp, #32]
   1465c:	cmp	r3, #0
   14660:	bne	15388 <__assert_fail@plt+0x3ec0>
   14664:	mov	r5, r3
   14668:	mov	r4, #63	; 0x3f
   1466c:	b	14d68 <__assert_fail@plt+0x38a0>
   14670:	ldr	r3, [sp, #156]	; 0x9c
   14674:	tst	r3, #4
   14678:	beq	151a0 <__assert_fail@plt+0x3cd8>
   1467c:	add	r2, r6, #2
   14680:	ldr	r3, [sp, #24]
   14684:	cmp	r2, r3
   14688:	bcs	151b0 <__assert_fail@plt+0x3ce8>
   1468c:	ldr	r3, [sp, #48]	; 0x30
   14690:	add	r3, r3, r6
   14694:	ldrb	r4, [r3, #1]
   14698:	cmp	r4, #63	; 0x3f
   1469c:	movne	r5, #0
   146a0:	movne	r3, r5
   146a4:	movne	r4, #63	; 0x3f
   146a8:	bne	14800 <__assert_fail@plt+0x3338>
   146ac:	ldr	r3, [sp, #48]	; 0x30
   146b0:	ldrb	r1, [r3, r2]
   146b4:	sub	r3, r1, #33	; 0x21
   146b8:	cmp	r3, #29
   146bc:	ldrls	pc, [pc, r3, lsl #2]
   146c0:	b	151c0 <__assert_fail@plt+0x3cf8>
   146c4:	andeq	r4, r1, ip, lsr r7
   146c8:	andeq	r5, r1, r0, asr #3
   146cc:	andeq	r5, r1, r0, asr #3
   146d0:	andeq	r5, r1, r0, asr #3
   146d4:	andeq	r5, r1, r0, asr #3
   146d8:	andeq	r5, r1, r0, asr #3
   146dc:	andeq	r4, r1, ip, lsr r7
   146e0:	andeq	r4, r1, ip, lsr r7
   146e4:	andeq	r4, r1, ip, lsr r7
   146e8:	andeq	r5, r1, r0, asr #3
   146ec:	andeq	r5, r1, r0, asr #3
   146f0:	andeq	r5, r1, r0, asr #3
   146f4:	andeq	r4, r1, ip, lsr r7
   146f8:	andeq	r5, r1, r0, asr #3
   146fc:	andeq	r4, r1, ip, lsr r7
   14700:	andeq	r5, r1, r0, asr #3
   14704:	andeq	r5, r1, r0, asr #3
   14708:	andeq	r5, r1, r0, asr #3
   1470c:	andeq	r5, r1, r0, asr #3
   14710:	andeq	r5, r1, r0, asr #3
   14714:	andeq	r5, r1, r0, asr #3
   14718:	andeq	r5, r1, r0, asr #3
   1471c:	andeq	r5, r1, r0, asr #3
   14720:	andeq	r5, r1, r0, asr #3
   14724:	andeq	r5, r1, r0, asr #3
   14728:	andeq	r5, r1, r0, asr #3
   1472c:	andeq	r5, r1, r0, asr #3
   14730:	andeq	r4, r1, ip, lsr r7
   14734:	andeq	r4, r1, ip, lsr r7
   14738:	andeq	r4, r1, ip, lsr r7
   1473c:	ldr	r3, [sp, #32]
   14740:	cmp	r3, #0
   14744:	bne	1542c <__assert_fail@plt+0x3f64>
   14748:	cmp	r9, fp
   1474c:	movhi	r3, #63	; 0x3f
   14750:	strbhi	r3, [r8, fp]
   14754:	add	r3, fp, #1
   14758:	cmp	r9, r3
   1475c:	movhi	r0, #34	; 0x22
   14760:	strbhi	r0, [r8, r3]
   14764:	add	r3, fp, #2
   14768:	cmp	r9, r3
   1476c:	movhi	r0, #34	; 0x22
   14770:	strbhi	r0, [r8, r3]
   14774:	add	r3, fp, #3
   14778:	cmp	r9, r3
   1477c:	movhi	r0, #63	; 0x3f
   14780:	strbhi	r0, [r8, r3]
   14784:	add	fp, fp, #4
   14788:	ldr	r3, [sp, #32]
   1478c:	mov	r5, r3
   14790:	mov	r4, r1
   14794:	mov	r6, r2
   14798:	b	14800 <__assert_fail@plt+0x3338>
   1479c:	mov	r3, #0
   147a0:	str	r3, [sp, #44]	; 0x2c
   147a4:	mov	r4, #8
   147a8:	mov	r3, #98	; 0x62
   147ac:	b	147ec <__assert_fail@plt+0x3324>
   147b0:	mov	r3, #0
   147b4:	str	r3, [sp, #44]	; 0x2c
   147b8:	mov	r4, #12
   147bc:	mov	r3, #102	; 0x66
   147c0:	b	147ec <__assert_fail@plt+0x3324>
   147c4:	mov	r3, #0
   147c8:	str	r3, [sp, #44]	; 0x2c
   147cc:	mov	r4, #13
   147d0:	mov	r3, #114	; 0x72
   147d4:	ldr	r2, [sp, #32]
   147d8:	cmp	sl, #2
   147dc:	movne	r2, #0
   147e0:	andeq	r2, r2, #1
   147e4:	cmp	r2, #0
   147e8:	bne	14c0c <__assert_fail@plt+0x3744>
   147ec:	ldr	r2, [sp, #28]
   147f0:	cmp	r2, #0
   147f4:	bne	151f4 <__assert_fail@plt+0x3d2c>
   147f8:	mov	r5, r2
   147fc:	mov	r3, r2
   14800:	ldr	r2, [sp, #28]
   14804:	eor	r2, r2, #1
   14808:	cmp	sl, #2
   1480c:	orreq	r2, r2, #1
   14810:	eor	r2, r2, #1
   14814:	ldr	r1, [sp, #32]
   14818:	orr	r2, r1, r2
   1481c:	tst	r2, #255	; 0xff
   14820:	beq	1484c <__assert_fail@plt+0x3384>
   14824:	ldr	r2, [sp, #160]	; 0xa0
   14828:	cmp	r2, #0
   1482c:	beq	1484c <__assert_fail@plt+0x3384>
   14830:	ubfx	r1, r4, #5, #8
   14834:	and	r2, r4, #31
   14838:	ldr	r0, [sp, #160]	; 0xa0
   1483c:	ldr	r1, [r0, r1, lsl #2]
   14840:	lsr	r2, r1, r2
   14844:	tst	r2, #1
   14848:	bne	14858 <__assert_fail@plt+0x3390>
   1484c:	ldr	r2, [sp, #44]	; 0x2c
   14850:	cmp	r2, #0
   14854:	beq	14bac <__assert_fail@plt+0x36e4>
   14858:	ldr	r3, [sp, #32]
   1485c:	cmp	r3, #0
   14860:	bne	153ac <__assert_fail@plt+0x3ee4>
   14864:	ldr	r3, [sp, #36]	; 0x24
   14868:	eor	r3, r3, #1
   1486c:	cmp	sl, #2
   14870:	movne	r3, #0
   14874:	andeq	r3, r3, #1
   14878:	cmp	r3, #0
   1487c:	beq	148b4 <__assert_fail@plt+0x33ec>
   14880:	cmp	r9, fp
   14884:	movhi	r2, #39	; 0x27
   14888:	strbhi	r2, [r8, fp]
   1488c:	add	r2, fp, #1
   14890:	cmp	r9, r2
   14894:	movhi	r1, #36	; 0x24
   14898:	strbhi	r1, [r8, r2]
   1489c:	add	r2, fp, #2
   148a0:	cmp	r9, r2
   148a4:	movhi	r1, #39	; 0x27
   148a8:	strbhi	r1, [r8, r2]
   148ac:	add	fp, fp, #3
   148b0:	str	r3, [sp, #36]	; 0x24
   148b4:	cmp	r9, fp
   148b8:	movhi	r3, #92	; 0x5c
   148bc:	strbhi	r3, [r8, fp]
   148c0:	add	fp, fp, #1
   148c4:	cmp	fp, r9
   148c8:	strbcc	r4, [r8, fp]
   148cc:	add	fp, fp, #1
   148d0:	cmp	r5, #0
   148d4:	ldr	r3, [sp, #40]	; 0x28
   148d8:	moveq	r3, r5
   148dc:	str	r3, [sp, #40]	; 0x28
   148e0:	add	r6, r6, #1
   148e4:	ldr	r3, [sp, #24]
   148e8:	cmn	r3, #1
   148ec:	beq	1521c <__assert_fail@plt+0x3d54>
   148f0:	ldr	r3, [sp, #24]
   148f4:	subs	r5, r3, r6
   148f8:	movne	r5, #1
   148fc:	cmp	r5, #0
   14900:	beq	15230 <__assert_fail@plt+0x3d68>
   14904:	ldr	r3, [sp, #28]
   14908:	cmp	sl, #2
   1490c:	moveq	r3, #0
   14910:	andne	r3, r3, #1
   14914:	str	r3, [sp, #56]	; 0x38
   14918:	ldr	r2, [sp, #52]	; 0x34
   1491c:	adds	r7, r2, #0
   14920:	movne	r7, #1
   14924:	ands	r3, r3, r7
   14928:	str	r3, [sp, #44]	; 0x2c
   1492c:	bne	1424c <__assert_fail@plt+0x2d84>
   14930:	ldr	r3, [sp, #48]	; 0x30
   14934:	ldrb	r4, [r3, r6]
   14938:	cmp	r4, #126	; 0x7e
   1493c:	ldrls	pc, [pc, r4, lsl #2]
   14940:	b	14d78 <__assert_fail@plt+0x38b0>
   14944:	ldrdeq	r4, [r1], -r0
   14948:	andeq	r4, r1, r8, ror sp
   1494c:	andeq	r4, r1, r8, ror sp
   14950:	andeq	r4, r1, r8, ror sp
   14954:	andeq	r4, r1, r8, ror sp
   14958:	andeq	r4, r1, r8, ror sp
   1495c:	andeq	r4, r1, r8, ror sp
   14960:	andeq	r4, r1, r8, lsl ip
   14964:	andeq	r4, r1, r4, lsr #15
   14968:	andeq	r4, r1, r8, asr #22
   1496c:	andeq	r4, r1, ip, ror #23
   14970:	andeq	r4, r1, ip, asr fp
   14974:			; <UNDEFINED> instruction: 0x000147b8
   14978:	andeq	r4, r1, ip, asr #15
   1497c:	andeq	r4, r1, r8, ror sp
   14980:	andeq	r4, r1, r8, ror sp
   14984:	andeq	r4, r1, r8, ror sp
   14988:	andeq	r4, r1, r8, ror sp
   1498c:	andeq	r4, r1, r8, ror sp
   14990:	andeq	r4, r1, r8, ror sp
   14994:	andeq	r4, r1, r8, ror sp
   14998:	andeq	r4, r1, r8, ror sp
   1499c:	andeq	r4, r1, r8, ror sp
   149a0:	andeq	r4, r1, r8, ror sp
   149a4:	andeq	r4, r1, r8, ror sp
   149a8:	andeq	r4, r1, r8, ror sp
   149ac:	andeq	r4, r1, r8, ror sp
   149b0:	andeq	r4, r1, r8, ror sp
   149b4:	andeq	r4, r1, r8, ror sp
   149b8:	andeq	r4, r1, r8, ror sp
   149bc:	andeq	r4, r1, r8, ror sp
   149c0:	andeq	r4, r1, r8, ror sp
   149c4:	muleq	r1, r4, ip
   149c8:	muleq	r1, r0, ip
   149cc:	muleq	r1, r0, ip
   149d0:	andeq	r4, r1, r0, asr ip
   149d4:	muleq	r1, r0, ip
   149d8:	muleq	r1, r8, r1
   149dc:	muleq	r1, r0, ip
   149e0:	ldrdeq	r4, [r1], -r8
   149e4:	muleq	r1, r0, ip
   149e8:	muleq	r1, r0, ip
   149ec:	muleq	r1, r0, ip
   149f0:	muleq	r1, r8, r1
   149f4:	muleq	r1, r8, r1
   149f8:	muleq	r1, r8, r1
   149fc:	muleq	r1, r8, r1
   14a00:	muleq	r1, r8, r1
   14a04:	muleq	r1, r8, r1
   14a08:	muleq	r1, r8, r1
   14a0c:	muleq	r1, r8, r1
   14a10:	muleq	r1, r8, r1
   14a14:	muleq	r1, r8, r1
   14a18:	muleq	r1, r8, r1
   14a1c:	muleq	r1, r8, r1
   14a20:	muleq	r1, r8, r1
   14a24:	muleq	r1, r8, r1
   14a28:	muleq	r1, r8, r1
   14a2c:	muleq	r1, r8, r1
   14a30:	muleq	r1, r0, ip
   14a34:	muleq	r1, r0, ip
   14a38:	muleq	r1, r0, ip
   14a3c:	muleq	r1, r0, ip
   14a40:	andeq	r4, r1, r8, lsr r6
   14a44:	andeq	r4, r1, r8, ror sp
   14a48:	muleq	r1, r8, r1
   14a4c:	muleq	r1, r8, r1
   14a50:	muleq	r1, r8, r1
   14a54:	muleq	r1, r8, r1
   14a58:	muleq	r1, r8, r1
   14a5c:	muleq	r1, r8, r1
   14a60:	muleq	r1, r8, r1
   14a64:	muleq	r1, r8, r1
   14a68:	muleq	r1, r8, r1
   14a6c:	muleq	r1, r8, r1
   14a70:	muleq	r1, r8, r1
   14a74:	muleq	r1, r8, r1
   14a78:	muleq	r1, r8, r1
   14a7c:	muleq	r1, r8, r1
   14a80:	muleq	r1, r8, r1
   14a84:	muleq	r1, r8, r1
   14a88:	muleq	r1, r8, r1
   14a8c:	muleq	r1, r8, r1
   14a90:	muleq	r1, r8, r1
   14a94:	muleq	r1, r8, r1
   14a98:	muleq	r1, r8, r1
   14a9c:	muleq	r1, r8, r1
   14aa0:	muleq	r1, r8, r1
   14aa4:	muleq	r1, r8, r1
   14aa8:	muleq	r1, r8, r1
   14aac:	muleq	r1, r8, r1
   14ab0:	muleq	r1, r0, ip
   14ab4:	andeq	r4, r1, r0, ror fp
   14ab8:	muleq	r1, r8, r1
   14abc:	muleq	r1, r0, ip
   14ac0:	muleq	r1, r8, r1
   14ac4:	muleq	r1, r0, ip
   14ac8:	muleq	r1, r8, r1
   14acc:	muleq	r1, r8, r1
   14ad0:	muleq	r1, r8, r1
   14ad4:	muleq	r1, r8, r1
   14ad8:	muleq	r1, r8, r1
   14adc:	muleq	r1, r8, r1
   14ae0:	muleq	r1, r8, r1
   14ae4:	muleq	r1, r8, r1
   14ae8:	muleq	r1, r8, r1
   14aec:	muleq	r1, r8, r1
   14af0:	muleq	r1, r8, r1
   14af4:	muleq	r1, r8, r1
   14af8:	muleq	r1, r8, r1
   14afc:	muleq	r1, r8, r1
   14b00:	muleq	r1, r8, r1
   14b04:	muleq	r1, r8, r1
   14b08:	muleq	r1, r8, r1
   14b0c:	muleq	r1, r8, r1
   14b10:	muleq	r1, r8, r1
   14b14:	muleq	r1, r8, r1
   14b18:	muleq	r1, r8, r1
   14b1c:	muleq	r1, r8, r1
   14b20:	muleq	r1, r8, r1
   14b24:	muleq	r1, r8, r1
   14b28:	muleq	r1, r8, r1
   14b2c:	muleq	r1, r8, r1
   14b30:	andeq	r4, r1, r0, lsr ip
   14b34:	muleq	r1, r0, ip
   14b38:	andeq	r4, r1, r0, lsr ip
   14b3c:	andeq	r4, r1, r0, asr ip
   14b40:	mov	r3, #0
   14b44:	str	r3, [sp, #44]	; 0x2c
   14b48:	mov	r4, #9
   14b4c:	mov	r3, #116	; 0x74
   14b50:	b	147d4 <__assert_fail@plt+0x330c>
   14b54:	mov	r3, #0
   14b58:	str	r3, [sp, #44]	; 0x2c
   14b5c:	mov	r4, #11
   14b60:	mov	r3, #118	; 0x76
   14b64:	b	147ec <__assert_fail@plt+0x3324>
   14b68:	mov	r3, #0
   14b6c:	str	r3, [sp, #44]	; 0x2c
   14b70:	cmp	sl, #2
   14b74:	beq	14b98 <__assert_fail@plt+0x36d0>
   14b78:	ldr	r3, [sp, #28]
   14b7c:	ldr	r2, [sp, #32]
   14b80:	and	r3, r3, r2
   14b84:	tst	r7, r3
   14b88:	bne	1520c <__assert_fail@plt+0x3d44>
   14b8c:	mov	r4, #92	; 0x5c
   14b90:	mov	r3, r4
   14b94:	b	147ec <__assert_fail@plt+0x3324>
   14b98:	ldr	r3, [sp, #32]
   14b9c:	cmp	r3, #0
   14ba0:	bne	15394 <__assert_fail@plt+0x3ecc>
   14ba4:	mov	r5, r3
   14ba8:	mov	r4, #92	; 0x5c
   14bac:	eor	r3, r3, #1
   14bb0:	ldr	r2, [sp, #36]	; 0x24
   14bb4:	and	r3, r3, r2
   14bb8:	tst	r3, #255	; 0xff
   14bbc:	beq	148c4 <__assert_fail@plt+0x33fc>
   14bc0:	cmp	r9, fp
   14bc4:	movhi	r3, #39	; 0x27
   14bc8:	strbhi	r3, [r8, fp]
   14bcc:	add	r3, fp, #1
   14bd0:	cmp	r9, r3
   14bd4:	movhi	r2, #39	; 0x27
   14bd8:	strbhi	r2, [r8, r3]
   14bdc:	add	fp, fp, #2
   14be0:	mov	r3, #0
   14be4:	str	r3, [sp, #36]	; 0x24
   14be8:	b	148c4 <__assert_fail@plt+0x33fc>
   14bec:	mov	r3, #110	; 0x6e
   14bf0:	b	147d4 <__assert_fail@plt+0x330c>
   14bf4:	mov	r3, #110	; 0x6e
   14bf8:	b	147d4 <__assert_fail@plt+0x330c>
   14bfc:	mov	r3, #0
   14c00:	str	r3, [sp, #44]	; 0x2c
   14c04:	mov	r3, #110	; 0x6e
   14c08:	b	147d4 <__assert_fail@plt+0x330c>
   14c0c:	mov	r8, r9
   14c10:	mov	r7, #2
   14c14:	b	153b4 <__assert_fail@plt+0x3eec>
   14c18:	mov	r3, #97	; 0x61
   14c1c:	b	147ec <__assert_fail@plt+0x3324>
   14c20:	mov	r3, #97	; 0x61
   14c24:	b	147ec <__assert_fail@plt+0x3324>
   14c28:	mov	r3, #0
   14c2c:	str	r3, [sp, #44]	; 0x2c
   14c30:	ldr	r3, [sp, #24]
   14c34:	cmn	r3, #1
   14c38:	beq	14c64 <__assert_fail@plt+0x379c>
   14c3c:	ldr	r3, [sp, #24]
   14c40:	subs	r3, r3, #1
   14c44:	movne	r3, #1
   14c48:	cmp	r3, #0
   14c4c:	bne	151cc <__assert_fail@plt+0x3d04>
   14c50:	cmp	r6, #0
   14c54:	beq	14c94 <__assert_fail@plt+0x37cc>
   14c58:	mov	r5, #0
   14c5c:	mov	r3, r5
   14c60:	b	14800 <__assert_fail@plt+0x3338>
   14c64:	ldr	r3, [sp, #48]	; 0x30
   14c68:	ldrb	r3, [r3, #1]
   14c6c:	adds	r3, r3, #0
   14c70:	movne	r3, #1
   14c74:	b	14c48 <__assert_fail@plt+0x3780>
   14c78:	mov	r3, #0
   14c7c:	str	r3, [sp, #44]	; 0x2c
   14c80:	b	14c50 <__assert_fail@plt+0x3788>
   14c84:	mov	r3, #0
   14c88:	str	r3, [sp, #44]	; 0x2c
   14c8c:	b	14c94 <__assert_fail@plt+0x37cc>
   14c90:	ldr	r5, [sp, #44]	; 0x2c
   14c94:	ldr	r3, [sp, #32]
   14c98:	cmp	sl, #2
   14c9c:	movne	r3, #0
   14ca0:	andeq	r3, r3, #1
   14ca4:	cmp	r3, #0
   14ca8:	beq	14800 <__assert_fail@plt+0x3338>
   14cac:	mov	r8, r9
   14cb0:	mov	r7, #2
   14cb4:	b	153b4 <__assert_fail@plt+0x3eec>
   14cb8:	ldr	r5, [sp, #32]
   14cbc:	b	14c94 <__assert_fail@plt+0x37cc>
   14cc0:	mov	r3, #0
   14cc4:	str	r3, [sp, #44]	; 0x2c
   14cc8:	mov	r5, r3
   14ccc:	b	14c94 <__assert_fail@plt+0x37cc>
   14cd0:	mov	r3, #0
   14cd4:	str	r3, [sp, #44]	; 0x2c
   14cd8:	cmp	sl, #2
   14cdc:	strne	r5, [sp, #68]	; 0x44
   14ce0:	movne	r3, #0
   14ce4:	movne	r4, #39	; 0x27
   14ce8:	bne	14800 <__assert_fail@plt+0x3338>
   14cec:	ldr	r3, [sp, #32]
   14cf0:	cmp	r3, #0
   14cf4:	bne	153a0 <__assert_fail@plt+0x3ed8>
   14cf8:	ldr	r3, [sp, #72]	; 0x48
   14cfc:	clz	r3, r3
   14d00:	lsr	r3, r3, #5
   14d04:	cmp	r9, #0
   14d08:	moveq	r3, #0
   14d0c:	cmp	r3, #0
   14d10:	movne	r3, #0
   14d14:	bne	14d3c <__assert_fail@plt+0x3874>
   14d18:	cmp	r9, fp
   14d1c:	movhi	r3, #39	; 0x27
   14d20:	strbhi	r3, [r8, fp]
   14d24:	add	r3, fp, #1
   14d28:	cmp	r9, r3
   14d2c:	movhi	r2, #92	; 0x5c
   14d30:	strbhi	r2, [r8, r3]
   14d34:	mov	r3, r9
   14d38:	ldr	r9, [sp, #72]	; 0x48
   14d3c:	add	r2, fp, #2
   14d40:	cmp	r2, r3
   14d44:	movcc	r1, #39	; 0x27
   14d48:	strbcc	r1, [r8, r2]
   14d4c:	add	fp, fp, #3
   14d50:	str	r5, [sp, #68]	; 0x44
   14d54:	ldr	r2, [sp, #32]
   14d58:	str	r2, [sp, #36]	; 0x24
   14d5c:	str	r9, [sp, #72]	; 0x48
   14d60:	mov	r9, r3
   14d64:	mov	r4, #39	; 0x27
   14d68:	mov	r3, #0
   14d6c:	b	1484c <__assert_fail@plt+0x3384>
   14d70:	mov	r3, #0
   14d74:	str	r3, [sp, #44]	; 0x2c
   14d78:	ldr	r7, [sp, #76]	; 0x4c
   14d7c:	cmp	r7, #1
   14d80:	bne	14db8 <__assert_fail@plt+0x38f0>
   14d84:	bl	11378 <__ctype_b_loc@plt>
   14d88:	ldr	r2, [r0]
   14d8c:	lsl	r3, r4, #1
   14d90:	ldrh	r5, [r2, r3]
   14d94:	ubfx	r5, r5, #14, #1
   14d98:	mov	ip, r7
   14d9c:	eor	r3, r5, #1
   14da0:	ldr	r2, [sp, #28]
   14da4:	and	r3, r3, r2
   14da8:	ands	r3, r3, #255	; 0xff
   14dac:	beq	14800 <__assert_fail@plt+0x3338>
   14db0:	mov	r5, #0
   14db4:	b	15014 <__assert_fail@plt+0x3b4c>
   14db8:	mov	r2, #0
   14dbc:	mov	r3, #0
   14dc0:	strd	r2, [sp, #104]	; 0x68
   14dc4:	ldr	r3, [sp, #24]
   14dc8:	cmn	r3, #1
   14dcc:	beq	14df0 <__assert_fail@plt+0x3928>
   14dd0:	mov	r3, #0
   14dd4:	str	r4, [sp, #88]	; 0x58
   14dd8:	str	fp, [sp, #92]	; 0x5c
   14ddc:	str	r8, [sp, #56]	; 0x38
   14de0:	mov	r8, r3
   14de4:	str	r9, [sp, #84]	; 0x54
   14de8:	ldr	r9, [sp, #48]	; 0x30
   14dec:	b	14f3c <__assert_fail@plt+0x3a74>
   14df0:	ldr	r0, [sp, #48]	; 0x30
   14df4:	bl	11390 <strlen@plt>
   14df8:	str	r0, [sp, #24]
   14dfc:	b	14dd0 <__assert_fail@plt+0x3908>
   14e00:	mov	r1, fp
   14e04:	ldr	r4, [sp, #88]	; 0x58
   14e08:	mov	r2, r8
   14e0c:	mov	ip, r8
   14e10:	ldr	fp, [sp, #92]	; 0x5c
   14e14:	ldr	r8, [sp, #56]	; 0x38
   14e18:	ldr	r9, [sp, #84]	; 0x54
   14e1c:	ldr	r0, [sp, #24]
   14e20:	cmp	r7, r0
   14e24:	bcs	14fdc <__assert_fail@plt+0x3b14>
   14e28:	ldrb	r3, [r1]
   14e2c:	cmp	r3, #0
   14e30:	beq	14fe4 <__assert_fail@plt+0x3b1c>
   14e34:	mov	r3, r1
   14e38:	add	r2, r2, #1
   14e3c:	add	r1, r6, r2
   14e40:	cmp	r0, r1
   14e44:	bls	14fec <__assert_fail@plt+0x3b24>
   14e48:	ldrb	r1, [r3, #1]!
   14e4c:	cmp	r1, #0
   14e50:	bne	14e38 <__assert_fail@plt+0x3970>
   14e54:	mov	ip, r2
   14e58:	mov	r5, #0
   14e5c:	b	1500c <__assert_fail@plt+0x3b44>
   14e60:	ldr	r3, [sp, #56]	; 0x38
   14e64:	str	r3, [sp, #64]	; 0x40
   14e68:	ldr	r8, [sp, #84]	; 0x54
   14e6c:	mov	r7, #2
   14e70:	b	153b4 <__assert_fail@plt+0x3eec>
   14e74:	cmp	r2, r7
   14e78:	beq	14f18 <__assert_fail@plt+0x3a50>
   14e7c:	ldrb	r3, [r2], #1
   14e80:	sub	r3, r3, #91	; 0x5b
   14e84:	cmp	r3, #33	; 0x21
   14e88:	ldrls	pc, [pc, r3, lsl #2]
   14e8c:	b	14e74 <__assert_fail@plt+0x39ac>
   14e90:	andeq	r4, r1, r0, ror #28
   14e94:	andeq	r4, r1, r0, ror #28
   14e98:	andeq	r4, r1, r4, ror lr
   14e9c:	andeq	r4, r1, r0, ror #28
   14ea0:	andeq	r4, r1, r4, ror lr
   14ea4:	andeq	r4, r1, r0, ror #28
   14ea8:	andeq	r4, r1, r4, ror lr
   14eac:	andeq	r4, r1, r4, ror lr
   14eb0:	andeq	r4, r1, r4, ror lr
   14eb4:	andeq	r4, r1, r4, ror lr
   14eb8:	andeq	r4, r1, r4, ror lr
   14ebc:	andeq	r4, r1, r4, ror lr
   14ec0:	andeq	r4, r1, r4, ror lr
   14ec4:	andeq	r4, r1, r4, ror lr
   14ec8:	andeq	r4, r1, r4, ror lr
   14ecc:	andeq	r4, r1, r4, ror lr
   14ed0:	andeq	r4, r1, r4, ror lr
   14ed4:	andeq	r4, r1, r4, ror lr
   14ed8:	andeq	r4, r1, r4, ror lr
   14edc:	andeq	r4, r1, r4, ror lr
   14ee0:	andeq	r4, r1, r4, ror lr
   14ee4:	andeq	r4, r1, r4, ror lr
   14ee8:	andeq	r4, r1, r4, ror lr
   14eec:	andeq	r4, r1, r4, ror lr
   14ef0:	andeq	r4, r1, r4, ror lr
   14ef4:	andeq	r4, r1, r4, ror lr
   14ef8:	andeq	r4, r1, r4, ror lr
   14efc:	andeq	r4, r1, r4, ror lr
   14f00:	andeq	r4, r1, r4, ror lr
   14f04:	andeq	r4, r1, r4, ror lr
   14f08:	andeq	r4, r1, r4, ror lr
   14f0c:	andeq	r4, r1, r4, ror lr
   14f10:	andeq	r4, r1, r4, ror lr
   14f14:	andeq	r4, r1, r0, ror #28
   14f18:	ldr	r0, [sp, #100]	; 0x64
   14f1c:	bl	112ac <iswprint@plt>
   14f20:	cmp	r0, #0
   14f24:	moveq	r5, #0
   14f28:	add	r8, r8, r4
   14f2c:	add	r0, sp, #104	; 0x68
   14f30:	bl	11234 <mbsinit@plt>
   14f34:	cmp	r0, #0
   14f38:	bne	14fa8 <__assert_fail@plt+0x3ae0>
   14f3c:	add	r7, r6, r8
   14f40:	add	fp, r9, r7
   14f44:	add	r3, sp, #104	; 0x68
   14f48:	ldr	r2, [sp, #24]
   14f4c:	sub	r2, r2, r7
   14f50:	mov	r1, fp
   14f54:	add	r0, sp, #100	; 0x64
   14f58:	bl	13880 <__assert_fail@plt+0x23b8>
   14f5c:	subs	r4, r0, #0
   14f60:	beq	14ff8 <__assert_fail@plt+0x3b30>
   14f64:	cmn	r4, #1
   14f68:	beq	14fc0 <__assert_fail@plt+0x3af8>
   14f6c:	cmn	r4, #2
   14f70:	beq	14e00 <__assert_fail@plt+0x3938>
   14f74:	ldr	r3, [sp, #32]
   14f78:	cmp	sl, #2
   14f7c:	movne	r3, #0
   14f80:	andeq	r3, r3, #1
   14f84:	cmp	r3, #0
   14f88:	beq	14f18 <__assert_fail@plt+0x3a50>
   14f8c:	cmp	r4, #1
   14f90:	bls	14f18 <__assert_fail@plt+0x3a50>
   14f94:	add	r2, r7, #1
   14f98:	add	r2, r9, r2
   14f9c:	add	r3, r9, r4
   14fa0:	add	r7, r3, r7
   14fa4:	b	14e7c <__assert_fail@plt+0x39b4>
   14fa8:	ldr	r4, [sp, #88]	; 0x58
   14fac:	mov	ip, r8
   14fb0:	ldr	fp, [sp, #92]	; 0x5c
   14fb4:	ldr	r8, [sp, #56]	; 0x38
   14fb8:	ldr	r9, [sp, #84]	; 0x54
   14fbc:	b	1500c <__assert_fail@plt+0x3b44>
   14fc0:	ldr	r4, [sp, #88]	; 0x58
   14fc4:	mov	ip, r8
   14fc8:	ldr	fp, [sp, #92]	; 0x5c
   14fcc:	ldr	r8, [sp, #56]	; 0x38
   14fd0:	ldr	r9, [sp, #84]	; 0x54
   14fd4:	mov	r5, #0
   14fd8:	b	1500c <__assert_fail@plt+0x3b44>
   14fdc:	mov	r5, #0
   14fe0:	b	1500c <__assert_fail@plt+0x3b44>
   14fe4:	mov	r5, #0
   14fe8:	b	1500c <__assert_fail@plt+0x3b44>
   14fec:	mov	ip, r2
   14ff0:	mov	r5, #0
   14ff4:	b	1500c <__assert_fail@plt+0x3b44>
   14ff8:	ldr	r4, [sp, #88]	; 0x58
   14ffc:	mov	ip, r8
   15000:	ldr	fp, [sp, #92]	; 0x5c
   15004:	ldr	r8, [sp, #56]	; 0x38
   15008:	ldr	r9, [sp, #84]	; 0x54
   1500c:	cmp	ip, #1
   15010:	bls	14d9c <__assert_fail@plt+0x38d4>
   15014:	add	lr, r6, ip
   15018:	ldr	r3, [sp, #48]	; 0x30
   1501c:	add	r1, r3, r6
   15020:	mov	r3, #0
   15024:	eor	r0, r5, #1
   15028:	ldr	r2, [sp, #28]
   1502c:	and	r0, r0, r2
   15030:	uxtb	r0, r0
   15034:	str	r0, [sp, #56]	; 0x38
   15038:	mov	r7, #92	; 0x5c
   1503c:	ldr	ip, [sp, #36]	; 0x24
   15040:	str	r5, [sp, #84]	; 0x54
   15044:	ldr	r2, [sp, #44]	; 0x2c
   15048:	b	150b8 <__assert_fail@plt+0x3bf0>
   1504c:	cmp	r2, #0
   15050:	beq	15060 <__assert_fail@plt+0x3b98>
   15054:	cmp	r9, fp
   15058:	strbhi	r7, [r8, fp]
   1505c:	add	fp, fp, #1
   15060:	add	r5, r6, #1
   15064:	cmp	r5, lr
   15068:	bcs	15174 <__assert_fail@plt+0x3cac>
   1506c:	eor	r2, r3, #1
   15070:	and	r2, r2, ip
   15074:	ands	r2, r2, #255	; 0xff
   15078:	beq	15190 <__assert_fail@plt+0x3cc8>
   1507c:	cmp	r9, fp
   15080:	movhi	r2, #39	; 0x27
   15084:	strbhi	r2, [r8, fp]
   15088:	add	r2, fp, #1
   1508c:	cmp	r9, r2
   15090:	movhi	ip, #39	; 0x27
   15094:	strbhi	ip, [r8, r2]
   15098:	add	fp, fp, #2
   1509c:	ldr	ip, [sp, #56]	; 0x38
   150a0:	mov	r2, ip
   150a4:	mov	r6, r5
   150a8:	cmp	r9, fp
   150ac:	strbhi	r4, [r8, fp]
   150b0:	add	fp, fp, #1
   150b4:	ldrb	r4, [r1, #1]!
   150b8:	cmp	r0, #0
   150bc:	beq	1504c <__assert_fail@plt+0x3b84>
   150c0:	ldr	r3, [sp, #32]
   150c4:	cmp	r3, #0
   150c8:	bne	1535c <__assert_fail@plt+0x3e94>
   150cc:	eor	r3, ip, #1
   150d0:	cmp	sl, #2
   150d4:	movne	r3, #0
   150d8:	andeq	r3, r3, #1
   150dc:	cmp	r3, #0
   150e0:	beq	15118 <__assert_fail@plt+0x3c50>
   150e4:	cmp	r9, fp
   150e8:	movhi	ip, #39	; 0x27
   150ec:	strbhi	ip, [r8, fp]
   150f0:	add	ip, fp, #1
   150f4:	cmp	r9, ip
   150f8:	movhi	r5, #36	; 0x24
   150fc:	strbhi	r5, [r8, ip]
   15100:	add	ip, fp, #2
   15104:	cmp	r9, ip
   15108:	movhi	r5, #39	; 0x27
   1510c:	strbhi	r5, [r8, ip]
   15110:	add	fp, fp, #3
   15114:	mov	ip, r3
   15118:	cmp	r9, fp
   1511c:	strbhi	r7, [r8, fp]
   15120:	add	r3, fp, #1
   15124:	cmp	r9, r3
   15128:	bls	15138 <__assert_fail@plt+0x3c70>
   1512c:	lsr	r5, r4, #6
   15130:	add	r5, r5, #48	; 0x30
   15134:	strb	r5, [r8, r3]
   15138:	add	r3, fp, #2
   1513c:	cmp	r9, r3
   15140:	bls	15150 <__assert_fail@plt+0x3c88>
   15144:	ubfx	r5, r4, #3, #3
   15148:	add	r5, r5, #48	; 0x30
   1514c:	strb	r5, [r8, r3]
   15150:	add	fp, fp, #3
   15154:	and	r4, r4, #7
   15158:	add	r4, r4, #48	; 0x30
   1515c:	add	r5, r6, #1
   15160:	cmp	r5, lr
   15164:	bcs	15180 <__assert_fail@plt+0x3cb8>
   15168:	ldr	r3, [sp, #56]	; 0x38
   1516c:	mov	r6, r5
   15170:	b	150a8 <__assert_fail@plt+0x3be0>
   15174:	str	ip, [sp, #36]	; 0x24
   15178:	ldr	r5, [sp, #84]	; 0x54
   1517c:	b	14bac <__assert_fail@plt+0x36e4>
   15180:	str	ip, [sp, #36]	; 0x24
   15184:	ldr	r5, [sp, #84]	; 0x54
   15188:	mov	r3, r0
   1518c:	b	14bac <__assert_fail@plt+0x36e4>
   15190:	mov	r6, r5
   15194:	b	150a8 <__assert_fail@plt+0x3be0>
   15198:	ldr	r3, [sp, #44]	; 0x2c
   1519c:	b	14800 <__assert_fail@plt+0x3338>
   151a0:	mov	r5, #0
   151a4:	mov	r3, r5
   151a8:	mov	r4, #63	; 0x3f
   151ac:	b	14800 <__assert_fail@plt+0x3338>
   151b0:	mov	r5, #0
   151b4:	mov	r3, r5
   151b8:	mov	r4, #63	; 0x3f
   151bc:	b	14800 <__assert_fail@plt+0x3338>
   151c0:	mov	r5, #0
   151c4:	mov	r3, r5
   151c8:	b	14800 <__assert_fail@plt+0x3338>
   151cc:	mov	r5, #0
   151d0:	mov	r3, r5
   151d4:	b	14800 <__assert_fail@plt+0x3338>
   151d8:	ldr	r5, [sp, #44]	; 0x2c
   151dc:	ldr	r3, [sp, #32]
   151e0:	b	14800 <__assert_fail@plt+0x3338>
   151e4:	ldr	r5, [sp, #44]	; 0x2c
   151e8:	mov	r3, #0
   151ec:	str	r3, [sp, #44]	; 0x2c
   151f0:	b	14800 <__assert_fail@plt+0x3338>
   151f4:	mov	r4, r3
   151f8:	mov	r5, #0
   151fc:	b	14858 <__assert_fail@plt+0x3390>
   15200:	mov	r5, #0
   15204:	mov	r4, #97	; 0x61
   15208:	b	14858 <__assert_fail@plt+0x3390>
   1520c:	mov	r5, #0
   15210:	mov	r3, r5
   15214:	mov	r4, #92	; 0x5c
   15218:	b	14bac <__assert_fail@plt+0x36e4>
   1521c:	ldr	r3, [sp, #48]	; 0x30
   15220:	ldrb	r5, [r3, r6]
   15224:	adds	r5, r5, #0
   15228:	movne	r5, #1
   1522c:	b	148fc <__assert_fail@plt+0x3434>
   15230:	cmp	sl, #2
   15234:	movne	r3, #0
   15238:	moveq	r3, #1
   1523c:	ldr	r1, [sp, #32]
   15240:	cmp	fp, #0
   15244:	andeq	r2, r3, r1
   15248:	movne	r2, #0
   1524c:	cmp	r2, #0
   15250:	bne	15370 <__assert_fail@plt+0x3ea8>
   15254:	eor	r2, r1, #1
   15258:	uxtb	r2, r2
   1525c:	and	r3, r3, r2
   15260:	ldr	r1, [sp, #68]	; 0x44
   15264:	ands	r3, r1, r3
   15268:	beq	152fc <__assert_fail@plt+0x3e34>
   1526c:	ldr	r2, [sp, #40]	; 0x28
   15270:	cmp	r2, #0
   15274:	bne	152ac <__assert_fail@plt+0x3de4>
   15278:	ldr	r2, [sp, #72]	; 0x48
   1527c:	adds	r2, r2, #0
   15280:	movne	r2, #1
   15284:	cmp	r9, #0
   15288:	movne	r2, #0
   1528c:	str	r2, [sp, #68]	; 0x44
   15290:	mov	sl, #2
   15294:	ldr	r1, [sp, #40]	; 0x28
   15298:	str	r1, [sp, #32]
   1529c:	cmp	r2, #0
   152a0:	beq	152f0 <__assert_fail@plt+0x3e28>
   152a4:	ldr	r9, [sp, #72]	; 0x48
   152a8:	b	14004 <__assert_fail@plt+0x2b3c>
   152ac:	ldr	r3, [sp, #168]	; 0xa8
   152b0:	str	r3, [sp, #16]
   152b4:	ldr	r3, [sp, #164]	; 0xa4
   152b8:	str	r3, [sp, #12]
   152bc:	ldr	r3, [sp, #160]	; 0xa0
   152c0:	str	r3, [sp, #8]
   152c4:	ldr	r3, [sp, #156]	; 0x9c
   152c8:	str	r3, [sp, #4]
   152cc:	mov	r3, #5
   152d0:	str	r3, [sp]
   152d4:	ldr	r3, [sp, #24]
   152d8:	ldr	r2, [sp, #48]	; 0x30
   152dc:	ldr	r1, [sp, #72]	; 0x48
   152e0:	ldr	r0, [sp, #64]	; 0x40
   152e4:	bl	13f8c <__assert_fail@plt+0x2ac4>
   152e8:	mov	fp, r0
   152ec:	b	1540c <__assert_fail@plt+0x3f44>
   152f0:	mov	r8, r9
   152f4:	mov	r2, r3
   152f8:	b	15300 <__assert_fail@plt+0x3e38>
   152fc:	mov	r8, r9
   15300:	ldr	r3, [sp, #60]	; 0x3c
   15304:	cmp	r3, #0
   15308:	moveq	r2, #0
   1530c:	andne	r2, r2, #1
   15310:	cmp	r2, #0
   15314:	beq	15344 <__assert_fail@plt+0x3e7c>
   15318:	mov	r2, r3
   1531c:	ldrb	r3, [r3]
   15320:	cmp	r3, #0
   15324:	beq	15344 <__assert_fail@plt+0x3e7c>
   15328:	ldr	r1, [sp, #64]	; 0x40
   1532c:	cmp	r8, fp
   15330:	strbhi	r3, [r1, fp]
   15334:	add	fp, fp, #1
   15338:	ldrb	r3, [r2, #1]!
   1533c:	cmp	r3, #0
   15340:	bne	1532c <__assert_fail@plt+0x3e64>
   15344:	cmp	r8, fp
   15348:	bls	1540c <__assert_fail@plt+0x3f44>
   1534c:	mov	r3, #0
   15350:	ldr	r2, [sp, #64]	; 0x40
   15354:	strb	r3, [r2, fp]
   15358:	b	1540c <__assert_fail@plt+0x3f44>
   1535c:	mov	r8, r9
   15360:	mov	r7, sl
   15364:	ldr	r3, [sp, #32]
   15368:	str	r3, [sp, #28]
   1536c:	b	153b4 <__assert_fail@plt+0x3eec>
   15370:	mov	r8, r9
   15374:	mov	r7, #2
   15378:	b	153b4 <__assert_fail@plt+0x3eec>
   1537c:	mov	r8, r9
   15380:	mov	r7, sl
   15384:	b	153b4 <__assert_fail@plt+0x3eec>
   15388:	mov	r8, r9
   1538c:	mov	r7, sl
   15390:	b	153b4 <__assert_fail@plt+0x3eec>
   15394:	mov	r8, r9
   15398:	mov	r7, sl
   1539c:	b	153b4 <__assert_fail@plt+0x3eec>
   153a0:	mov	r8, r9
   153a4:	mov	r7, sl
   153a8:	b	153b4 <__assert_fail@plt+0x3eec>
   153ac:	mov	r8, r9
   153b0:	mov	r7, sl
   153b4:	ldr	r3, [sp, #28]
   153b8:	cmp	r7, #2
   153bc:	movne	r3, #0
   153c0:	andeq	r3, r3, #1
   153c4:	cmp	r3, #0
   153c8:	movne	r7, #4
   153cc:	ldr	r3, [sp, #168]	; 0xa8
   153d0:	str	r3, [sp, #16]
   153d4:	ldr	r3, [sp, #164]	; 0xa4
   153d8:	str	r3, [sp, #12]
   153dc:	mov	r3, #0
   153e0:	str	r3, [sp, #8]
   153e4:	ldr	r3, [sp, #156]	; 0x9c
   153e8:	bic	r3, r3, #2
   153ec:	str	r3, [sp, #4]
   153f0:	str	r7, [sp]
   153f4:	ldr	r3, [sp, #24]
   153f8:	ldr	r2, [sp, #48]	; 0x30
   153fc:	mov	r1, r8
   15400:	ldr	r0, [sp, #64]	; 0x40
   15404:	bl	13f8c <__assert_fail@plt+0x2ac4>
   15408:	mov	fp, r0
   1540c:	mov	r0, fp
   15410:	add	sp, sp, #116	; 0x74
   15414:	ldrd	r4, [sp]
   15418:	ldrd	r6, [sp, #8]
   1541c:	ldrd	r8, [sp, #16]
   15420:	ldrd	sl, [sp, #24]
   15424:	add	sp, sp, #32
   15428:	pop	{pc}		; (ldr pc, [sp], #4)
   1542c:	mov	r8, r9
   15430:	mov	r7, sl
   15434:	b	153cc <__assert_fail@plt+0x3f04>
   15438:	add	fp, fp, #4
   1543c:	str	r3, [sp, #36]	; 0x24
   15440:	mov	r5, #0
   15444:	mov	r4, #48	; 0x30
   15448:	b	14800 <__assert_fail@plt+0x3338>
   1544c:	mov	r3, #1
   15450:	str	r3, [sp, #32]
   15454:	str	r3, [sp, #28]
   15458:	str	r3, [sp, #52]	; 0x34
   1545c:	movw	r3, #23316	; 0x5b14
   15460:	movt	r3, #2
   15464:	str	r3, [sp, #60]	; 0x3c
   15468:	mov	fp, #0
   1546c:	mov	sl, #5
   15470:	b	14064 <__assert_fail@plt+0x2b9c>
   15474:	ldr	r3, [sp, #48]	; 0x30
   15478:	ldrb	r4, [r3, r6]
   1547c:	cmp	r4, #126	; 0x7e
   15480:	ldrls	pc, [pc, r4, lsl #2]
   15484:	b	14d70 <__assert_fail@plt+0x38a8>
   15488:	strdeq	r4, [r1], -r8
   1548c:	andeq	r4, r1, r0, ror sp
   15490:	andeq	r4, r1, r0, ror sp
   15494:	andeq	r4, r1, r0, ror sp
   15498:	andeq	r4, r1, r0, ror sp
   1549c:	andeq	r4, r1, r0, ror sp
   154a0:	andeq	r4, r1, r0, ror sp
   154a4:	andeq	r5, r1, r0, lsl #4
   154a8:	muleq	r1, ip, r7
   154ac:	andeq	r4, r1, r0, asr #22
   154b0:	strdeq	r4, [r1], -ip
   154b4:	andeq	r4, r1, r4, asr fp
   154b8:			; <UNDEFINED> instruction: 0x000147b0
   154bc:	andeq	r4, r1, r4, asr #15
   154c0:	andeq	r4, r1, r0, ror sp
   154c4:	andeq	r4, r1, r0, ror sp
   154c8:	andeq	r4, r1, r0, ror sp
   154cc:	andeq	r4, r1, r0, ror sp
   154d0:	andeq	r4, r1, r0, ror sp
   154d4:	andeq	r4, r1, r0, ror sp
   154d8:	andeq	r4, r1, r0, ror sp
   154dc:	andeq	r4, r1, r0, ror sp
   154e0:	andeq	r4, r1, r0, ror sp
   154e4:	andeq	r4, r1, r0, ror sp
   154e8:	andeq	r4, r1, r0, ror sp
   154ec:	andeq	r4, r1, r0, ror sp
   154f0:	andeq	r4, r1, r0, ror sp
   154f4:	andeq	r4, r1, r0, ror sp
   154f8:	andeq	r4, r1, r0, ror sp
   154fc:	andeq	r4, r1, r0, ror sp
   15500:	andeq	r4, r1, r0, ror sp
   15504:	andeq	r4, r1, r0, ror sp
   15508:	andeq	r4, r1, r4, lsl #25
   1550c:	andeq	r4, r1, r0, asr #25
   15510:	andeq	r4, r1, r0, asr #25
   15514:	andeq	r4, r1, r8, ror ip
   15518:	andeq	r4, r1, r0, asr #25
   1551c:	andeq	r5, r1, r4, ror #3
   15520:	andeq	r4, r1, r0, asr #25
   15524:	ldrdeq	r4, [r1], -r0
   15528:	andeq	r4, r1, r0, asr #25
   1552c:	andeq	r4, r1, r0, asr #25
   15530:	andeq	r4, r1, r0, asr #25
   15534:	andeq	r5, r1, r4, ror #3
   15538:	andeq	r5, r1, r4, ror #3
   1553c:	andeq	r5, r1, r4, ror #3
   15540:	andeq	r5, r1, r4, ror #3
   15544:	andeq	r5, r1, r4, ror #3
   15548:	andeq	r5, r1, r4, ror #3
   1554c:	andeq	r5, r1, r4, ror #3
   15550:	andeq	r5, r1, r4, ror #3
   15554:	andeq	r5, r1, r4, ror #3
   15558:	andeq	r5, r1, r4, ror #3
   1555c:	andeq	r5, r1, r4, ror #3
   15560:	andeq	r5, r1, r4, ror #3
   15564:	andeq	r5, r1, r4, ror #3
   15568:	andeq	r5, r1, r4, ror #3
   1556c:	andeq	r5, r1, r4, ror #3
   15570:	andeq	r5, r1, r4, ror #3
   15574:	andeq	r4, r1, r0, asr #25
   15578:	andeq	r4, r1, r0, asr #25
   1557c:	andeq	r4, r1, r0, asr #25
   15580:	andeq	r4, r1, r0, asr #25
   15584:	andeq	r4, r1, r0, lsr r6
   15588:	andeq	r4, r1, r0, ror sp
   1558c:	andeq	r5, r1, r4, ror #3
   15590:	andeq	r5, r1, r4, ror #3
   15594:	andeq	r5, r1, r4, ror #3
   15598:	andeq	r5, r1, r4, ror #3
   1559c:	andeq	r5, r1, r4, ror #3
   155a0:	andeq	r5, r1, r4, ror #3
   155a4:	andeq	r5, r1, r4, ror #3
   155a8:	andeq	r5, r1, r4, ror #3
   155ac:	andeq	r5, r1, r4, ror #3
   155b0:	andeq	r5, r1, r4, ror #3
   155b4:	andeq	r5, r1, r4, ror #3
   155b8:	andeq	r5, r1, r4, ror #3
   155bc:	andeq	r5, r1, r4, ror #3
   155c0:	andeq	r5, r1, r4, ror #3
   155c4:	andeq	r5, r1, r4, ror #3
   155c8:	andeq	r5, r1, r4, ror #3
   155cc:	andeq	r5, r1, r4, ror #3
   155d0:	andeq	r5, r1, r4, ror #3
   155d4:	andeq	r5, r1, r4, ror #3
   155d8:	andeq	r5, r1, r4, ror #3
   155dc:	andeq	r5, r1, r4, ror #3
   155e0:	andeq	r5, r1, r4, ror #3
   155e4:	andeq	r5, r1, r4, ror #3
   155e8:	andeq	r5, r1, r4, ror #3
   155ec:	andeq	r5, r1, r4, ror #3
   155f0:	andeq	r5, r1, r4, ror #3
   155f4:	andeq	r4, r1, r0, asr #25
   155f8:	andeq	r4, r1, r8, ror #22
   155fc:	andeq	r5, r1, r4, ror #3
   15600:	andeq	r4, r1, r0, asr #25
   15604:	andeq	r5, r1, r4, ror #3
   15608:	andeq	r4, r1, r0, asr #25
   1560c:	andeq	r5, r1, r4, ror #3
   15610:	andeq	r5, r1, r4, ror #3
   15614:	andeq	r5, r1, r4, ror #3
   15618:	andeq	r5, r1, r4, ror #3
   1561c:	andeq	r5, r1, r4, ror #3
   15620:	andeq	r5, r1, r4, ror #3
   15624:	andeq	r5, r1, r4, ror #3
   15628:	andeq	r5, r1, r4, ror #3
   1562c:	andeq	r5, r1, r4, ror #3
   15630:	andeq	r5, r1, r4, ror #3
   15634:	andeq	r5, r1, r4, ror #3
   15638:	andeq	r5, r1, r4, ror #3
   1563c:	andeq	r5, r1, r4, ror #3
   15640:	andeq	r5, r1, r4, ror #3
   15644:	andeq	r5, r1, r4, ror #3
   15648:	andeq	r5, r1, r4, ror #3
   1564c:	andeq	r5, r1, r4, ror #3
   15650:	andeq	r5, r1, r4, ror #3
   15654:	andeq	r5, r1, r4, ror #3
   15658:	andeq	r5, r1, r4, ror #3
   1565c:	andeq	r5, r1, r4, ror #3
   15660:	andeq	r5, r1, r4, ror #3
   15664:	andeq	r5, r1, r4, ror #3
   15668:	andeq	r5, r1, r4, ror #3
   1566c:	andeq	r5, r1, r4, ror #3
   15670:	andeq	r5, r1, r4, ror #3
   15674:	andeq	r4, r1, r8, lsr #24
   15678:	andeq	r4, r1, r0, asr #25
   1567c:	andeq	r4, r1, r8, lsr #24
   15680:	andeq	r4, r1, r8, ror ip
   15684:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15688:	strd	r6, [sp, #8]
   1568c:	strd	r8, [sp, #16]
   15690:	strd	sl, [sp, #24]
   15694:	str	lr, [sp, #32]
   15698:	sub	sp, sp, #52	; 0x34
   1569c:	mov	r5, r0
   156a0:	str	r1, [sp, #24]
   156a4:	str	r2, [sp, #28]
   156a8:	mov	r4, r3
   156ac:	bl	113c0 <__errno_location@plt>
   156b0:	str	r0, [sp, #32]
   156b4:	ldr	r3, [r0]
   156b8:	str	r3, [sp, #36]	; 0x24
   156bc:	movw	r3, #29004	; 0x714c
   156c0:	movt	r3, #3
   156c4:	ldr	r6, [r3]
   156c8:	cmn	r5, #-2147483647	; 0x80000001
   156cc:	movne	r3, #0
   156d0:	moveq	r3, #1
   156d4:	orrs	r3, r3, r5, lsr #31
   156d8:	bne	1583c <__assert_fail@plt+0x4374>
   156dc:	movw	r3, #29004	; 0x714c
   156e0:	movt	r3, #3
   156e4:	ldr	r2, [r3, #4]
   156e8:	cmp	r2, r5
   156ec:	bgt	1575c <__assert_fail@plt+0x4294>
   156f0:	str	r2, [sp, #44]	; 0x2c
   156f4:	add	r3, r3, #8
   156f8:	cmp	r6, r3
   156fc:	beq	15840 <__assert_fail@plt+0x4378>
   15700:	sub	r2, r5, r2
   15704:	mov	r3, #8
   15708:	str	r3, [sp]
   1570c:	mvn	r3, #-2147483648	; 0x80000000
   15710:	add	r2, r2, #1
   15714:	add	r1, sp, #44	; 0x2c
   15718:	mov	r0, r6
   1571c:	bl	24508 <__assert_fail@plt+0x13040>
   15720:	mov	r6, r0
   15724:	movw	r3, #29004	; 0x714c
   15728:	movt	r3, #3
   1572c:	str	r0, [r3]
   15730:	movw	r7, #29004	; 0x714c
   15734:	movt	r7, #3
   15738:	ldr	r0, [r7, #4]
   1573c:	ldr	r2, [sp, #44]	; 0x2c
   15740:	sub	r2, r2, r0
   15744:	lsl	r2, r2, #3
   15748:	mov	r1, #0
   1574c:	add	r0, r6, r0, lsl #3
   15750:	bl	113e4 <memset@plt>
   15754:	ldr	r3, [sp, #44]	; 0x2c
   15758:	str	r3, [r7, #4]
   1575c:	add	fp, r6, r5, lsl #3
   15760:	ldr	r8, [r6, r5, lsl #3]
   15764:	ldr	r7, [fp, #4]
   15768:	ldr	r3, [r4, #4]
   1576c:	orr	r9, r3, #1
   15770:	add	sl, r4, #8
   15774:	ldr	r3, [r4, #44]	; 0x2c
   15778:	str	r3, [sp, #16]
   1577c:	ldr	r3, [r4, #40]	; 0x28
   15780:	str	r3, [sp, #12]
   15784:	str	sl, [sp, #8]
   15788:	str	r9, [sp, #4]
   1578c:	ldr	r3, [r4]
   15790:	str	r3, [sp]
   15794:	ldr	r3, [sp, #28]
   15798:	ldr	r2, [sp, #24]
   1579c:	mov	r1, r8
   157a0:	mov	r0, r7
   157a4:	bl	13f8c <__assert_fail@plt+0x2ac4>
   157a8:	cmp	r8, r0
   157ac:	bhi	15810 <__assert_fail@plt+0x4348>
   157b0:	add	r8, r0, #1
   157b4:	str	r8, [r6, r5, lsl #3]
   157b8:	movw	r3, #29120	; 0x71c0
   157bc:	movt	r3, #3
   157c0:	cmp	r7, r3
   157c4:	beq	157d0 <__assert_fail@plt+0x4308>
   157c8:	mov	r0, r7
   157cc:	bl	135a4 <__assert_fail@plt+0x20dc>
   157d0:	mov	r0, r8
   157d4:	bl	24304 <__assert_fail@plt+0x12e3c>
   157d8:	mov	r7, r0
   157dc:	str	r0, [fp, #4]
   157e0:	ldr	r3, [r4, #44]	; 0x2c
   157e4:	str	r3, [sp, #16]
   157e8:	ldr	r3, [r4, #40]	; 0x28
   157ec:	str	r3, [sp, #12]
   157f0:	str	sl, [sp, #8]
   157f4:	str	r9, [sp, #4]
   157f8:	ldr	r3, [r4]
   157fc:	str	r3, [sp]
   15800:	ldr	r3, [sp, #28]
   15804:	ldr	r2, [sp, #24]
   15808:	mov	r1, r8
   1580c:	bl	13f8c <__assert_fail@plt+0x2ac4>
   15810:	ldr	r3, [sp, #32]
   15814:	ldr	r2, [sp, #36]	; 0x24
   15818:	str	r2, [r3]
   1581c:	mov	r0, r7
   15820:	add	sp, sp, #52	; 0x34
   15824:	ldrd	r4, [sp]
   15828:	ldrd	r6, [sp, #8]
   1582c:	ldrd	r8, [sp, #16]
   15830:	ldrd	sl, [sp, #24]
   15834:	add	sp, sp, #32
   15838:	pop	{pc}		; (ldr pc, [sp], #4)
   1583c:	bl	114bc <abort@plt>
   15840:	sub	r2, r5, r2
   15844:	mov	r3, #8
   15848:	str	r3, [sp]
   1584c:	mvn	r3, #-2147483648	; 0x80000000
   15850:	add	r2, r2, #1
   15854:	add	r1, sp, #44	; 0x2c
   15858:	mov	r0, #0
   1585c:	bl	24508 <__assert_fail@plt+0x13040>
   15860:	mov	r6, r0
   15864:	movw	r3, #29004	; 0x714c
   15868:	movt	r3, #3
   1586c:	str	r0, [r3]
   15870:	ldrd	r2, [r3, #8]
   15874:	strd	r2, [r0]
   15878:	b	15730 <__assert_fail@plt+0x4268>
   1587c:	strd	r4, [sp, #-16]!
   15880:	str	r6, [sp, #8]
   15884:	str	lr, [sp, #12]
   15888:	mov	r4, r0
   1588c:	bl	113c0 <__errno_location@plt>
   15890:	mov	r5, r0
   15894:	ldr	r6, [r0]
   15898:	cmp	r4, #0
   1589c:	ldr	r3, [pc, #32]	; 158c4 <__assert_fail@plt+0x43fc>
   158a0:	moveq	r4, r3
   158a4:	mov	r1, #48	; 0x30
   158a8:	mov	r0, r4
   158ac:	bl	24678 <__assert_fail@plt+0x131b0>
   158b0:	str	r6, [r5]
   158b4:	ldrd	r4, [sp]
   158b8:	ldr	r6, [sp, #8]
   158bc:	add	sp, sp, #12
   158c0:	pop	{pc}		; (ldr pc, [sp], #4)
   158c4:	andeq	r7, r3, r0, asr #5
   158c8:	subs	r3, r0, #0
   158cc:	ldr	r2, [pc, #8]	; 158dc <__assert_fail@plt+0x4414>
   158d0:	moveq	r3, r2
   158d4:	ldr	r0, [r3]
   158d8:	bx	lr
   158dc:	andeq	r7, r3, r0, asr #5
   158e0:	subs	r3, r0, #0
   158e4:	ldr	r2, [pc, #8]	; 158f4 <__assert_fail@plt+0x442c>
   158e8:	moveq	r3, r2
   158ec:	str	r1, [r3]
   158f0:	bx	lr
   158f4:	andeq	r7, r3, r0, asr #5
   158f8:	push	{lr}		; (str lr, [sp, #-4]!)
   158fc:	subs	r3, r0, #0
   15900:	ldr	r0, [pc, #44]	; 15934 <__assert_fail@plt+0x446c>
   15904:	moveq	r3, r0
   15908:	add	r3, r3, #8
   1590c:	lsr	lr, r1, #5
   15910:	and	r1, r1, #31
   15914:	ldr	ip, [r3, lr, lsl #2]
   15918:	lsr	r0, ip, r1
   1591c:	eor	r2, r2, r0
   15920:	and	r2, r2, #1
   15924:	eor	r1, ip, r2, lsl r1
   15928:	str	r1, [r3, lr, lsl #2]
   1592c:	and	r0, r0, #1
   15930:	pop	{pc}		; (ldr pc, [sp], #4)
   15934:	andeq	r7, r3, r0, asr #5
   15938:	subs	r3, r0, #0
   1593c:	ldr	r2, [pc, #12]	; 15950 <__assert_fail@plt+0x4488>
   15940:	moveq	r3, r2
   15944:	ldr	r0, [r3, #4]
   15948:	str	r1, [r3, #4]
   1594c:	bx	lr
   15950:	andeq	r7, r3, r0, asr #5
   15954:	subs	r3, r0, #0
   15958:	ldr	r0, [pc, #44]	; 1598c <__assert_fail@plt+0x44c4>
   1595c:	moveq	r3, r0
   15960:	mov	r0, #10
   15964:	str	r0, [r3]
   15968:	cmp	r2, #0
   1596c:	cmpne	r1, #0
   15970:	beq	15980 <__assert_fail@plt+0x44b8>
   15974:	str	r1, [r3, #40]	; 0x28
   15978:	str	r2, [r3, #44]	; 0x2c
   1597c:	bx	lr
   15980:	str	r4, [sp, #-8]!
   15984:	str	lr, [sp, #4]
   15988:	bl	114bc <abort@plt>
   1598c:	andeq	r7, r3, r0, asr #5
   15990:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15994:	strd	r6, [sp, #8]
   15998:	strd	r8, [sp, #16]
   1599c:	str	sl, [sp, #24]
   159a0:	str	lr, [sp, #28]
   159a4:	sub	sp, sp, #24
   159a8:	mov	r7, r0
   159ac:	mov	r8, r1
   159b0:	mov	r9, r2
   159b4:	mov	sl, r3
   159b8:	ldr	r4, [sp, #56]	; 0x38
   159bc:	cmp	r4, #0
   159c0:	ldr	r3, [pc, #104]	; 15a30 <__assert_fail@plt+0x4568>
   159c4:	moveq	r4, r3
   159c8:	bl	113c0 <__errno_location@plt>
   159cc:	mov	r5, r0
   159d0:	ldr	r6, [r0]
   159d4:	ldr	r3, [r4, #44]	; 0x2c
   159d8:	str	r3, [sp, #16]
   159dc:	ldr	r3, [r4, #40]	; 0x28
   159e0:	str	r3, [sp, #12]
   159e4:	add	r3, r4, #8
   159e8:	str	r3, [sp, #8]
   159ec:	ldr	r3, [r4, #4]
   159f0:	str	r3, [sp, #4]
   159f4:	ldr	r3, [r4]
   159f8:	str	r3, [sp]
   159fc:	mov	r3, sl
   15a00:	mov	r2, r9
   15a04:	mov	r1, r8
   15a08:	mov	r0, r7
   15a0c:	bl	13f8c <__assert_fail@plt+0x2ac4>
   15a10:	str	r6, [r5]
   15a14:	add	sp, sp, #24
   15a18:	ldrd	r4, [sp]
   15a1c:	ldrd	r6, [sp, #8]
   15a20:	ldrd	r8, [sp, #16]
   15a24:	ldr	sl, [sp, #24]
   15a28:	add	sp, sp, #28
   15a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a30:	andeq	r7, r3, r0, asr #5
   15a34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a38:	strd	r6, [sp, #8]
   15a3c:	strd	r8, [sp, #16]
   15a40:	strd	sl, [sp, #24]
   15a44:	str	lr, [sp, #32]
   15a48:	sub	sp, sp, #44	; 0x2c
   15a4c:	mov	r8, r0
   15a50:	mov	sl, r1
   15a54:	mov	r6, r2
   15a58:	subs	r4, r3, #0
   15a5c:	ldr	r3, [pc, #200]	; 15b2c <__assert_fail@plt+0x4664>
   15a60:	moveq	r4, r3
   15a64:	bl	113c0 <__errno_location@plt>
   15a68:	mov	r7, r0
   15a6c:	ldr	fp, [r0]
   15a70:	ldr	r5, [r4, #4]
   15a74:	cmp	r6, #0
   15a78:	orreq	r5, r5, #1
   15a7c:	add	r9, r4, #8
   15a80:	ldr	r3, [r4, #44]	; 0x2c
   15a84:	str	r3, [sp, #16]
   15a88:	ldr	r3, [r4, #40]	; 0x28
   15a8c:	str	r3, [sp, #12]
   15a90:	str	r9, [sp, #8]
   15a94:	str	r5, [sp, #4]
   15a98:	ldr	r3, [r4]
   15a9c:	str	r3, [sp]
   15aa0:	str	sl, [sp, #36]	; 0x24
   15aa4:	mov	r3, sl
   15aa8:	str	r8, [sp, #32]
   15aac:	mov	r2, r8
   15ab0:	mov	r1, #0
   15ab4:	mov	r0, r1
   15ab8:	bl	13f8c <__assert_fail@plt+0x2ac4>
   15abc:	mov	sl, r0
   15ac0:	add	r8, r0, #1
   15ac4:	mov	r0, r8
   15ac8:	bl	24304 <__assert_fail@plt+0x12e3c>
   15acc:	str	r0, [sp, #28]
   15ad0:	ldr	r3, [r4, #44]	; 0x2c
   15ad4:	str	r3, [sp, #16]
   15ad8:	ldr	r3, [r4, #40]	; 0x28
   15adc:	str	r3, [sp, #12]
   15ae0:	str	r9, [sp, #8]
   15ae4:	str	r5, [sp, #4]
   15ae8:	ldr	r3, [r4]
   15aec:	str	r3, [sp]
   15af0:	ldr	r3, [sp, #36]	; 0x24
   15af4:	ldr	r2, [sp, #32]
   15af8:	mov	r1, r8
   15afc:	bl	13f8c <__assert_fail@plt+0x2ac4>
   15b00:	str	fp, [r7]
   15b04:	cmp	r6, #0
   15b08:	strne	sl, [r6]
   15b0c:	ldr	r0, [sp, #28]
   15b10:	add	sp, sp, #44	; 0x2c
   15b14:	ldrd	r4, [sp]
   15b18:	ldrd	r6, [sp, #8]
   15b1c:	ldrd	r8, [sp, #16]
   15b20:	ldrd	sl, [sp, #24]
   15b24:	add	sp, sp, #32
   15b28:	pop	{pc}		; (ldr pc, [sp], #4)
   15b2c:	andeq	r7, r3, r0, asr #5
   15b30:	str	r4, [sp, #-8]!
   15b34:	str	lr, [sp, #4]
   15b38:	mov	r3, r2
   15b3c:	mov	r2, #0
   15b40:	bl	15a34 <__assert_fail@plt+0x456c>
   15b44:	ldr	r4, [sp]
   15b48:	add	sp, sp, #4
   15b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15b54:	strd	r6, [sp, #8]
   15b58:	str	r8, [sp, #16]
   15b5c:	str	lr, [sp, #20]
   15b60:	movw	r3, #29004	; 0x714c
   15b64:	movt	r3, #3
   15b68:	ldr	r7, [r3]
   15b6c:	ldr	r3, [r3, #4]
   15b70:	cmp	r3, #1
   15b74:	ble	15ba0 <__assert_fail@plt+0x46d8>
   15b78:	mov	r4, #1
   15b7c:	add	r6, r7, #4
   15b80:	movw	r5, #29004	; 0x714c
   15b84:	movt	r5, #3
   15b88:	ldr	r0, [r6, r4, lsl #3]
   15b8c:	bl	135a4 <__assert_fail@plt+0x20dc>
   15b90:	add	r4, r4, #1
   15b94:	ldr	r3, [r5, #4]
   15b98:	cmp	r3, r4
   15b9c:	bgt	15b88 <__assert_fail@plt+0x46c0>
   15ba0:	ldr	r0, [r7, #4]
   15ba4:	movw	r3, #29120	; 0x71c0
   15ba8:	movt	r3, #3
   15bac:	cmp	r0, r3
   15bb0:	beq	15bd4 <__assert_fail@plt+0x470c>
   15bb4:	bl	135a4 <__assert_fail@plt+0x20dc>
   15bb8:	movw	r3, #29004	; 0x714c
   15bbc:	movt	r3, #3
   15bc0:	mov	r2, #256	; 0x100
   15bc4:	str	r2, [r3, #8]
   15bc8:	movw	r2, #29120	; 0x71c0
   15bcc:	movt	r2, #3
   15bd0:	str	r2, [r3, #12]
   15bd4:	ldr	r3, [pc, #64]	; 15c1c <__assert_fail@plt+0x4754>
   15bd8:	cmp	r7, r3
   15bdc:	beq	15bf8 <__assert_fail@plt+0x4730>
   15be0:	mov	r0, r7
   15be4:	bl	135a4 <__assert_fail@plt+0x20dc>
   15be8:	movw	r3, #29004	; 0x714c
   15bec:	movt	r3, #3
   15bf0:	add	r2, r3, #8
   15bf4:	str	r2, [r3]
   15bf8:	movw	r3, #29004	; 0x714c
   15bfc:	movt	r3, #3
   15c00:	mov	r2, #1
   15c04:	str	r2, [r3, #4]
   15c08:	ldrd	r4, [sp]
   15c0c:	ldrd	r6, [sp, #8]
   15c10:	ldr	r8, [sp, #16]
   15c14:	add	sp, sp, #20
   15c18:	pop	{pc}		; (ldr pc, [sp], #4)
   15c1c:	andeq	r7, r3, r4, asr r1
   15c20:	str	r4, [sp, #-8]!
   15c24:	str	lr, [sp, #4]
   15c28:	ldr	r3, [pc, #16]	; 15c40 <__assert_fail@plt+0x4778>
   15c2c:	mvn	r2, #0
   15c30:	bl	15684 <__assert_fail@plt+0x41bc>
   15c34:	ldr	r4, [sp]
   15c38:	add	sp, sp, #4
   15c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c40:	andeq	r7, r3, r0, asr #5
   15c44:	str	r4, [sp, #-8]!
   15c48:	str	lr, [sp, #4]
   15c4c:	ldr	r3, [pc, #12]	; 15c60 <__assert_fail@plt+0x4798>
   15c50:	bl	15684 <__assert_fail@plt+0x41bc>
   15c54:	ldr	r4, [sp]
   15c58:	add	sp, sp, #4
   15c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c60:	andeq	r7, r3, r0, asr #5
   15c64:	str	r4, [sp, #-8]!
   15c68:	str	lr, [sp, #4]
   15c6c:	mov	r1, r0
   15c70:	mov	r0, #0
   15c74:	bl	15c20 <__assert_fail@plt+0x4758>
   15c78:	ldr	r4, [sp]
   15c7c:	add	sp, sp, #4
   15c80:	pop	{pc}		; (ldr pc, [sp], #4)
   15c84:	str	r4, [sp, #-8]!
   15c88:	str	lr, [sp, #4]
   15c8c:	mov	r2, r1
   15c90:	mov	r1, r0
   15c94:	mov	r0, #0
   15c98:	bl	15c44 <__assert_fail@plt+0x477c>
   15c9c:	ldr	r4, [sp]
   15ca0:	add	sp, sp, #4
   15ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ca8:	strd	r4, [sp, #-12]!
   15cac:	str	lr, [sp, #8]
   15cb0:	sub	sp, sp, #52	; 0x34
   15cb4:	mov	r4, r0
   15cb8:	mov	r5, r2
   15cbc:	mov	r0, sp
   15cc0:	bl	13df8 <__assert_fail@plt+0x2930>
   15cc4:	mov	r3, sp
   15cc8:	mvn	r2, #0
   15ccc:	mov	r1, r5
   15cd0:	mov	r0, r4
   15cd4:	bl	15684 <__assert_fail@plt+0x41bc>
   15cd8:	add	sp, sp, #52	; 0x34
   15cdc:	ldrd	r4, [sp]
   15ce0:	add	sp, sp, #8
   15ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce8:	strd	r4, [sp, #-16]!
   15cec:	str	r6, [sp, #8]
   15cf0:	str	lr, [sp, #12]
   15cf4:	sub	sp, sp, #48	; 0x30
   15cf8:	mov	r4, r0
   15cfc:	mov	r5, r2
   15d00:	mov	r6, r3
   15d04:	mov	r0, sp
   15d08:	bl	13df8 <__assert_fail@plt+0x2930>
   15d0c:	mov	r3, sp
   15d10:	mov	r2, r6
   15d14:	mov	r1, r5
   15d18:	mov	r0, r4
   15d1c:	bl	15684 <__assert_fail@plt+0x41bc>
   15d20:	add	sp, sp, #48	; 0x30
   15d24:	ldrd	r4, [sp]
   15d28:	ldr	r6, [sp, #8]
   15d2c:	add	sp, sp, #12
   15d30:	pop	{pc}		; (ldr pc, [sp], #4)
   15d34:	str	r4, [sp, #-8]!
   15d38:	str	lr, [sp, #4]
   15d3c:	mov	r2, r1
   15d40:	mov	r1, r0
   15d44:	mov	r0, #0
   15d48:	bl	15ca8 <__assert_fail@plt+0x47e0>
   15d4c:	ldr	r4, [sp]
   15d50:	add	sp, sp, #4
   15d54:	pop	{pc}		; (ldr pc, [sp], #4)
   15d58:	str	r4, [sp, #-8]!
   15d5c:	str	lr, [sp, #4]
   15d60:	mov	r3, r2
   15d64:	mov	r2, r1
   15d68:	mov	r1, r0
   15d6c:	mov	r0, #0
   15d70:	bl	15ce8 <__assert_fail@plt+0x4820>
   15d74:	ldr	r4, [sp]
   15d78:	add	sp, sp, #4
   15d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d80:	strd	r4, [sp, #-12]!
   15d84:	str	lr, [sp, #8]
   15d88:	sub	sp, sp, #52	; 0x34
   15d8c:	mov	r4, r0
   15d90:	mov	r5, r1
   15d94:	mov	r1, r2
   15d98:	ldr	r0, [pc, #92]	; 15dfc <__assert_fail@plt+0x4934>
   15d9c:	ldrd	r2, [r0]
   15da0:	strd	r2, [sp]
   15da4:	ldrd	r2, [r0, #8]
   15da8:	strd	r2, [sp, #8]
   15dac:	ldrd	r2, [r0, #16]
   15db0:	strd	r2, [sp, #16]
   15db4:	ldrd	r2, [r0, #24]
   15db8:	strd	r2, [sp, #24]
   15dbc:	ldrd	r2, [r0, #32]
   15dc0:	strd	r2, [sp, #32]
   15dc4:	ldrd	r2, [r0, #40]	; 0x28
   15dc8:	strd	r2, [sp, #40]	; 0x28
   15dcc:	mov	r2, #1
   15dd0:	mov	r0, sp
   15dd4:	bl	158f8 <__assert_fail@plt+0x4430>
   15dd8:	mov	r3, sp
   15ddc:	mov	r2, r5
   15de0:	mov	r1, r4
   15de4:	mov	r0, #0
   15de8:	bl	15684 <__assert_fail@plt+0x41bc>
   15dec:	add	sp, sp, #52	; 0x34
   15df0:	ldrd	r4, [sp]
   15df4:	add	sp, sp, #8
   15df8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dfc:	andeq	r7, r3, r0, asr #5
   15e00:	str	r4, [sp, #-8]!
   15e04:	str	lr, [sp, #4]
   15e08:	mov	r2, r1
   15e0c:	mvn	r1, #0
   15e10:	bl	15d80 <__assert_fail@plt+0x48b8>
   15e14:	ldr	r4, [sp]
   15e18:	add	sp, sp, #4
   15e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e20:	str	r4, [sp, #-8]!
   15e24:	str	lr, [sp, #4]
   15e28:	mov	r1, #58	; 0x3a
   15e2c:	bl	15e00 <__assert_fail@plt+0x4938>
   15e30:	ldr	r4, [sp]
   15e34:	add	sp, sp, #4
   15e38:	pop	{pc}		; (ldr pc, [sp], #4)
   15e3c:	str	r4, [sp, #-8]!
   15e40:	str	lr, [sp, #4]
   15e44:	mov	r2, #58	; 0x3a
   15e48:	bl	15d80 <__assert_fail@plt+0x48b8>
   15e4c:	ldr	r4, [sp]
   15e50:	add	sp, sp, #4
   15e54:	pop	{pc}		; (ldr pc, [sp], #4)
   15e58:	strd	r4, [sp, #-12]!
   15e5c:	str	lr, [sp, #8]
   15e60:	sub	sp, sp, #100	; 0x64
   15e64:	mov	r4, r0
   15e68:	mov	r5, r2
   15e6c:	mov	r0, sp
   15e70:	bl	13df8 <__assert_fail@plt+0x2930>
   15e74:	ldrd	r2, [sp]
   15e78:	strd	r2, [sp, #48]	; 0x30
   15e7c:	ldrd	r2, [sp, #8]
   15e80:	strd	r2, [sp, #56]	; 0x38
   15e84:	ldrd	r2, [sp, #16]
   15e88:	strd	r2, [sp, #64]	; 0x40
   15e8c:	ldrd	r2, [sp, #24]
   15e90:	strd	r2, [sp, #72]	; 0x48
   15e94:	ldrd	r2, [sp, #32]
   15e98:	strd	r2, [sp, #80]	; 0x50
   15e9c:	ldrd	r2, [sp, #40]	; 0x28
   15ea0:	strd	r2, [sp, #88]	; 0x58
   15ea4:	mov	r2, #1
   15ea8:	mov	r1, #58	; 0x3a
   15eac:	add	r0, sp, #48	; 0x30
   15eb0:	bl	158f8 <__assert_fail@plt+0x4430>
   15eb4:	add	r3, sp, #48	; 0x30
   15eb8:	mvn	r2, #0
   15ebc:	mov	r1, r5
   15ec0:	mov	r0, r4
   15ec4:	bl	15684 <__assert_fail@plt+0x41bc>
   15ec8:	add	sp, sp, #100	; 0x64
   15ecc:	ldrd	r4, [sp]
   15ed0:	add	sp, sp, #8
   15ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ed8:	strd	r4, [sp, #-20]!	; 0xffffffec
   15edc:	strd	r6, [sp, #8]
   15ee0:	str	lr, [sp, #16]
   15ee4:	sub	sp, sp, #52	; 0x34
   15ee8:	mov	r4, r0
   15eec:	mov	r5, r3
   15ef0:	ldr	r3, [pc, #92]	; 15f54 <__assert_fail@plt+0x4a8c>
   15ef4:	ldrd	r6, [r3]
   15ef8:	strd	r6, [sp]
   15efc:	ldrd	r6, [r3, #8]
   15f00:	strd	r6, [sp, #8]
   15f04:	ldrd	r6, [r3, #16]
   15f08:	strd	r6, [sp, #16]
   15f0c:	ldrd	r6, [r3, #24]
   15f10:	strd	r6, [sp, #24]
   15f14:	ldrd	r6, [r3, #32]
   15f18:	strd	r6, [sp, #32]
   15f1c:	ldrd	r6, [r3, #40]	; 0x28
   15f20:	strd	r6, [sp, #40]	; 0x28
   15f24:	mov	r0, sp
   15f28:	bl	15954 <__assert_fail@plt+0x448c>
   15f2c:	mov	r3, sp
   15f30:	ldr	r2, [sp, #72]	; 0x48
   15f34:	mov	r1, r5
   15f38:	mov	r0, r4
   15f3c:	bl	15684 <__assert_fail@plt+0x41bc>
   15f40:	add	sp, sp, #52	; 0x34
   15f44:	ldrd	r4, [sp]
   15f48:	ldrd	r6, [sp, #8]
   15f4c:	add	sp, sp, #16
   15f50:	pop	{pc}		; (ldr pc, [sp], #4)
   15f54:	andeq	r7, r3, r0, asr #5
   15f58:	push	{lr}		; (str lr, [sp, #-4]!)
   15f5c:	sub	sp, sp, #12
   15f60:	mvn	ip, #0
   15f64:	str	ip, [sp]
   15f68:	bl	15ed8 <__assert_fail@plt+0x4a10>
   15f6c:	add	sp, sp, #12
   15f70:	pop	{pc}		; (ldr pc, [sp], #4)
   15f74:	str	r4, [sp, #-8]!
   15f78:	str	lr, [sp, #4]
   15f7c:	mov	r3, r2
   15f80:	mov	r2, r1
   15f84:	mov	r1, r0
   15f88:	mov	r0, #0
   15f8c:	bl	15f58 <__assert_fail@plt+0x4a90>
   15f90:	ldr	r4, [sp]
   15f94:	add	sp, sp, #4
   15f98:	pop	{pc}		; (ldr pc, [sp], #4)
   15f9c:	push	{lr}		; (str lr, [sp, #-4]!)
   15fa0:	sub	sp, sp, #12
   15fa4:	str	r3, [sp]
   15fa8:	mov	r3, r2
   15fac:	mov	r2, r1
   15fb0:	mov	r1, r0
   15fb4:	mov	r0, #0
   15fb8:	bl	15ed8 <__assert_fail@plt+0x4a10>
   15fbc:	add	sp, sp, #12
   15fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc4:	str	r4, [sp, #-8]!
   15fc8:	str	lr, [sp, #4]
   15fcc:	ldr	r3, [pc, #12]	; 15fe0 <__assert_fail@plt+0x4b18>
   15fd0:	bl	15684 <__assert_fail@plt+0x41bc>
   15fd4:	ldr	r4, [sp]
   15fd8:	add	sp, sp, #4
   15fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15fe0:	andeq	r7, r3, ip, asr r1
   15fe4:	str	r4, [sp, #-8]!
   15fe8:	str	lr, [sp, #4]
   15fec:	mov	r2, r1
   15ff0:	mov	r1, r0
   15ff4:	mov	r0, #0
   15ff8:	bl	15fc4 <__assert_fail@plt+0x4afc>
   15ffc:	ldr	r4, [sp]
   16000:	add	sp, sp, #4
   16004:	pop	{pc}		; (ldr pc, [sp], #4)
   16008:	str	r4, [sp, #-8]!
   1600c:	str	lr, [sp, #4]
   16010:	mvn	r2, #0
   16014:	bl	15fc4 <__assert_fail@plt+0x4afc>
   16018:	ldr	r4, [sp]
   1601c:	add	sp, sp, #4
   16020:	pop	{pc}		; (ldr pc, [sp], #4)
   16024:	str	r4, [sp, #-8]!
   16028:	str	lr, [sp, #4]
   1602c:	mov	r1, r0
   16030:	mov	r0, #0
   16034:	bl	16008 <__assert_fail@plt+0x4b40>
   16038:	ldr	r4, [sp]
   1603c:	add	sp, sp, #4
   16040:	pop	{pc}		; (ldr pc, [sp], #4)
   16044:	mov	r2, r0
   16048:	ldr	r0, [r0, #80]	; 0x50
   1604c:	cmp	r0, #1
   16050:	beq	1609c <__assert_fail@plt+0x4bd4>
   16054:	add	r0, r1, #1
   16058:	ldr	r3, [r2, #28]
   1605c:	cmp	r0, r3
   16060:	bge	160a4 <__assert_fail@plt+0x4bdc>
   16064:	ldr	ip, [r2, #8]
   16068:	add	r2, ip, r0, lsl #2
   1606c:	ldr	r0, [ip, r0, lsl #2]
   16070:	cmn	r0, #1
   16074:	bne	160ac <__assert_fail@plt+0x4be4>
   16078:	sub	r0, r3, r1
   1607c:	mov	r3, #1
   16080:	add	r3, r3, #1
   16084:	cmp	r3, r0
   16088:	beq	160a0 <__assert_fail@plt+0x4bd8>
   1608c:	ldr	r1, [r2, #4]!
   16090:	cmn	r1, #1
   16094:	beq	16080 <__assert_fail@plt+0x4bb8>
   16098:	mov	r0, r3
   1609c:	bx	lr
   160a0:	bx	lr
   160a4:	mov	r0, #1
   160a8:	bx	lr
   160ac:	mov	r0, #1
   160b0:	bx	lr
   160b4:	ldr	r3, [r0, #80]	; 0x50
   160b8:	cmp	r3, #1
   160bc:	ldreq	r3, [r0, #4]
   160c0:	ldrbeq	r0, [r3, r1]
   160c4:	ldrne	r3, [r0, #8]
   160c8:	ldrne	r0, [r3, r1, lsl #2]
   160cc:	bx	lr
   160d0:	ldr	ip, [r0, #36]	; 0x24
   160d4:	ldr	r3, [r0, #48]	; 0x30
   160d8:	cmp	ip, r3
   160dc:	movge	ip, r3
   160e0:	ldr	r3, [r0, #28]
   160e4:	cmp	ip, r3
   160e8:	ble	16124 <__assert_fail@plt+0x4c5c>
   160ec:	ldr	r2, [r0]
   160f0:	ldr	r1, [r0, #24]
   160f4:	add	r2, r2, r3
   160f8:	ldrb	r2, [r2, r1]
   160fc:	ldr	r1, [r0, #64]	; 0x40
   16100:	ldrb	r1, [r1, r2]
   16104:	ldr	r2, [r0, #4]
   16108:	strb	r1, [r2, r3]
   1610c:	add	r3, r3, #1
   16110:	cmp	ip, r3
   16114:	bne	160ec <__assert_fail@plt+0x4c24>
   16118:	str	ip, [r0, #28]
   1611c:	str	ip, [r0, #32]
   16120:	bx	lr
   16124:	mov	ip, r3
   16128:	b	16118 <__assert_fail@plt+0x4c50>
   1612c:	push	{lr}		; (str lr, [sp, #-4]!)
   16130:	mov	ip, r0
   16134:	mov	lr, r1
   16138:	clz	r1, r1
   1613c:	lsr	r1, r1, #5
   16140:	cmp	r0, #0
   16144:	movne	r0, r1
   16148:	moveq	r0, #1
   1614c:	cmp	r0, #0
   16150:	movne	r0, #0
   16154:	bne	16190 <__assert_fail@plt+0x4cc8>
   16158:	ldr	r3, [ip, #4]
   1615c:	ldr	r2, [lr, #4]
   16160:	cmp	r3, r2
   16164:	bne	16190 <__assert_fail@plt+0x4cc8>
   16168:	subs	r3, r3, #1
   1616c:	bmi	1618c <__assert_fail@plt+0x4cc4>
   16170:	ldr	r1, [ip, #8]
   16174:	ldr	r2, [lr, #8]
   16178:	ldr	r1, [r1, r3, lsl #2]
   1617c:	ldr	r2, [r2, r3, lsl #2]
   16180:	cmp	r1, r2
   16184:	beq	16168 <__assert_fail@plt+0x4ca0>
   16188:	b	16190 <__assert_fail@plt+0x4cc8>
   1618c:	mov	r0, #1
   16190:	pop	{pc}		; (ldr pc, [sp], #4)
   16194:	str	r4, [sp, #-8]!
   16198:	str	lr, [sp, #4]
   1619c:	ldr	lr, [r0, #4]
   161a0:	cmp	lr, #0
   161a4:	movle	r0, #0
   161a8:	ble	16220 <__assert_fail@plt+0x4d58>
   161ac:	sub	lr, lr, #1
   161b0:	mov	ip, #0
   161b4:	cmp	lr, ip
   161b8:	bls	1620c <__assert_fail@plt+0x4d44>
   161bc:	add	r2, lr, ip
   161c0:	lsr	r2, r2, #1
   161c4:	ldr	r4, [r0, #8]
   161c8:	ldr	r3, [r4, r2, lsl #2]
   161cc:	cmp	r1, r3
   161d0:	bgt	161f8 <__assert_fail@plt+0x4d30>
   161d4:	cmp	ip, r2
   161d8:	bcs	1620c <__assert_fail@plt+0x4d44>
   161dc:	add	r3, ip, r2
   161e0:	lsr	r3, r3, #1
   161e4:	ldr	lr, [r4, r3, lsl #2]
   161e8:	cmp	lr, r1
   161ec:	blt	16200 <__assert_fail@plt+0x4d38>
   161f0:	mov	r2, r3
   161f4:	b	161d4 <__assert_fail@plt+0x4d0c>
   161f8:	mov	r3, r2
   161fc:	mov	r2, lr
   16200:	add	ip, r3, #1
   16204:	mov	lr, r2
   16208:	b	161b4 <__assert_fail@plt+0x4cec>
   1620c:	ldr	r3, [r0, #8]
   16210:	ldr	r3, [r3, ip, lsl #2]
   16214:	cmp	r3, r1
   16218:	addeq	r0, ip, #1
   1621c:	movne	r0, #0
   16220:	ldr	r4, [sp]
   16224:	add	sp, sp, #4
   16228:	pop	{pc}		; (ldr pc, [sp], #4)
   1622c:	cmp	r1, #0
   16230:	blt	16278 <__assert_fail@plt+0x4db0>
   16234:	ldr	r3, [r0, #4]
   16238:	cmp	r3, r1
   1623c:	ble	16278 <__assert_fail@plt+0x4db0>
   16240:	sub	r3, r3, #1
   16244:	str	r3, [r0, #4]
   16248:	cmp	r3, r1
   1624c:	ble	16278 <__assert_fail@plt+0x4db0>
   16250:	add	r3, r1, #1
   16254:	lsl	r3, r3, #2
   16258:	ldr	r2, [r0, #8]
   1625c:	ldr	ip, [r2, r3]
   16260:	str	ip, [r2, r1, lsl #2]
   16264:	add	r1, r1, #1
   16268:	add	r3, r3, #4
   1626c:	ldr	r2, [r0, #4]
   16270:	cmp	r2, r1
   16274:	bgt	16258 <__assert_fail@plt+0x4d90>
   16278:	bx	lr
   1627c:	strd	r4, [sp, #-16]!
   16280:	str	r6, [sp, #8]
   16284:	str	lr, [sp, #12]
   16288:	mov	r4, r0
   1628c:	mov	r6, r1
   16290:	mov	r5, r2
   16294:	b	1629c <__assert_fail@plt+0x4dd4>
   16298:	mov	r4, r3
   1629c:	ldr	r3, [r4, #4]
   162a0:	cmp	r3, #0
   162a4:	bne	16298 <__assert_fail@plt+0x4dd0>
   162a8:	ldr	r3, [r4, #8]
   162ac:	cmp	r3, #0
   162b0:	bne	16298 <__assert_fail@plt+0x4dd0>
   162b4:	mov	r1, r4
   162b8:	mov	r0, r5
   162bc:	blx	r6
   162c0:	cmp	r0, #0
   162c4:	bne	16300 <__assert_fail@plt+0x4e38>
   162c8:	ldr	r2, [r4]
   162cc:	cmp	r2, #0
   162d0:	beq	16300 <__assert_fail@plt+0x4e38>
   162d4:	ldr	r3, [r2, #8]
   162d8:	cmp	r3, r4
   162dc:	movne	r4, #0
   162e0:	moveq	r4, #1
   162e4:	cmp	r3, #0
   162e8:	movne	r1, r4
   162ec:	moveq	r1, #1
   162f0:	mov	r4, r2
   162f4:	cmp	r1, #0
   162f8:	bne	162b4 <__assert_fail@plt+0x4dec>
   162fc:	b	16298 <__assert_fail@plt+0x4dd0>
   16300:	ldrd	r4, [sp]
   16304:	ldr	r6, [sp, #8]
   16308:	add	sp, sp, #12
   1630c:	pop	{pc}		; (ldr pc, [sp], #4)
   16310:	strd	r4, [sp, #-16]!
   16314:	str	r6, [sp, #8]
   16318:	str	lr, [sp, #12]
   1631c:	mov	r4, r0
   16320:	mov	r6, r1
   16324:	mov	r5, r2
   16328:	b	16334 <__assert_fail@plt+0x4e6c>
   1632c:	mov	r3, r2
   16330:	mov	r4, r3
   16334:	mov	r1, r4
   16338:	mov	r0, r5
   1633c:	blx	r6
   16340:	cmp	r0, #0
   16344:	bne	1637c <__assert_fail@plt+0x4eb4>
   16348:	ldr	r3, [r4, #4]
   1634c:	cmp	r3, #0
   16350:	bne	16330 <__assert_fail@plt+0x4e68>
   16354:	ldr	r2, [r4, #8]
   16358:	cmp	r2, #0
   1635c:	cmpne	r2, r3
   16360:	bne	1632c <__assert_fail@plt+0x4e64>
   16364:	ldr	r2, [r4]
   16368:	mov	r3, r4
   1636c:	cmp	r2, #0
   16370:	beq	1637c <__assert_fail@plt+0x4eb4>
   16374:	mov	r4, r2
   16378:	b	16354 <__assert_fail@plt+0x4e8c>
   1637c:	ldrd	r4, [sp]
   16380:	ldr	r6, [sp, #8]
   16384:	add	sp, sp, #12
   16388:	pop	{pc}		; (ldr pc, [sp], #4)
   1638c:	ldrb	r3, [r1, #24]
   16390:	cmp	r3, #4
   16394:	beq	163a8 <__assert_fail@plt+0x4ee0>
   16398:	cmp	r3, #17
   1639c:	beq	163d4 <__assert_fail@plt+0x4f0c>
   163a0:	mov	r0, #0
   163a4:	bx	lr
   163a8:	ldr	r3, [r0, #132]	; 0x84
   163ac:	cmp	r3, #0
   163b0:	beq	163a0 <__assert_fail@plt+0x4ed8>
   163b4:	ldr	r2, [r1, #20]
   163b8:	ldr	r2, [r3, r2, lsl #2]
   163bc:	str	r2, [r1, #20]
   163c0:	ldr	r3, [r0, #80]	; 0x50
   163c4:	mov	r1, #1
   163c8:	orr	r3, r3, r1, lsl r2
   163cc:	str	r3, [r0, #80]	; 0x50
   163d0:	b	163a0 <__assert_fail@plt+0x4ed8>
   163d4:	ldr	r3, [r1, #4]
   163d8:	cmp	r3, #0
   163dc:	beq	163a0 <__assert_fail@plt+0x4ed8>
   163e0:	ldrb	r2, [r3, #24]
   163e4:	cmp	r2, #17
   163e8:	bne	163a0 <__assert_fail@plt+0x4ed8>
   163ec:	ldr	r2, [r3, #20]
   163f0:	ldr	r3, [r3, #4]
   163f4:	str	r3, [r1, #4]
   163f8:	cmp	r3, #0
   163fc:	strne	r1, [r3]
   16400:	ldr	r3, [r0, #132]	; 0x84
   16404:	ldr	r1, [r1, #20]
   16408:	ldr	r1, [r3, r1, lsl #2]
   1640c:	str	r1, [r3, r2, lsl #2]
   16410:	cmp	r2, #31
   16414:	bgt	163a0 <__assert_fail@plt+0x4ed8>
   16418:	ldr	r3, [r0, #80]	; 0x50
   1641c:	mov	r1, #1
   16420:	bic	r2, r3, r1, lsl r2
   16424:	str	r2, [r0, #80]	; 0x50
   16428:	b	163a0 <__assert_fail@plt+0x4ed8>
   1642c:	ldrb	r3, [r1, #24]
   16430:	cmp	r3, #11
   16434:	beq	16464 <__assert_fail@plt+0x4f9c>
   16438:	cmp	r3, #16
   1643c:	beq	16474 <__assert_fail@plt+0x4fac>
   16440:	ldr	r3, [r1, #4]
   16444:	cmp	r3, #0
   16448:	ldrne	r2, [r1, #16]
   1644c:	strne	r2, [r3, #16]
   16450:	ldr	r3, [r1, #8]
   16454:	cmp	r3, #0
   16458:	ldrne	r2, [r1, #16]
   1645c:	strne	r2, [r3, #16]
   16460:	b	1646c <__assert_fail@plt+0x4fa4>
   16464:	ldr	r3, [r1, #4]
   16468:	str	r1, [r3, #16]
   1646c:	mov	r0, #0
   16470:	bx	lr
   16474:	ldr	r3, [r1, #4]
   16478:	ldr	r2, [r1, #8]
   1647c:	ldr	r2, [r2, #12]
   16480:	str	r2, [r3, #16]
   16484:	ldr	r3, [r1, #8]
   16488:	ldr	r2, [r1, #16]
   1648c:	str	r2, [r3, #16]
   16490:	b	1646c <__assert_fail@plt+0x4fa4>
   16494:	ldr	r3, [r1, #40]	; 0x28
   16498:	ldr	ip, [r1, #56]	; 0x38
   1649c:	cmp	ip, r3
   164a0:	ble	1651c <__assert_fail@plt+0x5054>
   164a4:	push	{lr}		; (str lr, [sp, #-4]!)
   164a8:	ldr	ip, [r1, #4]
   164ac:	ldrb	r3, [ip, r3]
   164b0:	strb	r3, [r0]
   164b4:	ldr	ip, [r1, #80]	; 0x50
   164b8:	cmp	ip, #1
   164bc:	ble	164ec <__assert_fail@plt+0x5024>
   164c0:	ldr	ip, [r1, #40]	; 0x28
   164c4:	ldr	lr, [r1, #28]
   164c8:	cmp	ip, lr
   164cc:	beq	164ec <__assert_fail@plt+0x5024>
   164d0:	ldr	lr, [r1, #8]
   164d4:	ldr	ip, [lr, ip, lsl #2]
   164d8:	cmn	ip, #1
   164dc:	moveq	r3, #1
   164e0:	strbeq	r3, [r0, #4]
   164e4:	moveq	r0, r3
   164e8:	beq	16614 <__assert_fail@plt+0x514c>
   164ec:	cmp	r3, #92	; 0x5c
   164f0:	beq	1652c <__assert_fail@plt+0x5064>
   164f4:	cmp	r3, #91	; 0x5b
   164f8:	beq	16578 <__assert_fail@plt+0x50b0>
   164fc:	cmp	r3, #93	; 0x5d
   16500:	beq	16618 <__assert_fail@plt+0x5150>
   16504:	cmp	r3, #94	; 0x5e
   16508:	bne	16600 <__assert_fail@plt+0x5138>
   1650c:	mov	r3, #25
   16510:	strb	r3, [r0, #4]
   16514:	mov	r0, #1
   16518:	b	16614 <__assert_fail@plt+0x514c>
   1651c:	mov	r3, #2
   16520:	strb	r3, [r0, #4]
   16524:	mov	r0, #0
   16528:	bx	lr
   1652c:	tst	r2, #1
   16530:	beq	16548 <__assert_fail@plt+0x5080>
   16534:	ldr	r3, [r1, #40]	; 0x28
   16538:	add	r3, r3, #1
   1653c:	ldr	r2, [r1, #48]	; 0x30
   16540:	cmp	r3, r2
   16544:	blt	16558 <__assert_fail@plt+0x5090>
   16548:	mov	r3, #1
   1654c:	strb	r3, [r0, #4]
   16550:	mov	r0, r3
   16554:	b	16614 <__assert_fail@plt+0x514c>
   16558:	str	r3, [r1, #40]	; 0x28
   1655c:	ldr	r2, [r1, #4]
   16560:	ldrb	r3, [r2, r3]
   16564:	strb	r3, [r0]
   16568:	mov	r3, #1
   1656c:	strb	r3, [r0, #4]
   16570:	mov	r0, r3
   16574:	b	16614 <__assert_fail@plt+0x514c>
   16578:	ldr	r3, [r1, #40]	; 0x28
   1657c:	add	lr, r3, #1
   16580:	ldr	ip, [r1, #48]	; 0x30
   16584:	cmp	lr, ip
   16588:	bge	165c0 <__assert_fail@plt+0x50f8>
   1658c:	ldr	r1, [r1, #4]
   16590:	add	r3, r1, r3
   16594:	ldrb	r3, [r3, #1]
   16598:	strb	r3, [r0]
   1659c:	cmp	r3, #58	; 0x3a
   165a0:	beq	165e8 <__assert_fail@plt+0x5120>
   165a4:	cmp	r3, #61	; 0x3d
   165a8:	beq	165d8 <__assert_fail@plt+0x5110>
   165ac:	cmp	r3, #46	; 0x2e
   165b0:	moveq	r3, #26
   165b4:	strbeq	r3, [r0, #4]
   165b8:	moveq	r0, #2
   165bc:	beq	16614 <__assert_fail@plt+0x514c>
   165c0:	mov	r3, #1
   165c4:	strb	r3, [r0, #4]
   165c8:	mov	r2, #91	; 0x5b
   165cc:	strb	r2, [r0]
   165d0:	mov	r0, r3
   165d4:	b	16614 <__assert_fail@plt+0x514c>
   165d8:	mov	r3, #28
   165dc:	strb	r3, [r0, #4]
   165e0:	mov	r0, #2
   165e4:	b	16614 <__assert_fail@plt+0x514c>
   165e8:	tst	r2, #4
   165ec:	beq	165c0 <__assert_fail@plt+0x50f8>
   165f0:	mov	r3, #30
   165f4:	strb	r3, [r0, #4]
   165f8:	mov	r0, #2
   165fc:	b	16614 <__assert_fail@plt+0x514c>
   16600:	cmp	r3, #45	; 0x2d
   16604:	bne	16548 <__assert_fail@plt+0x5080>
   16608:	mov	r3, #22
   1660c:	strb	r3, [r0, #4]
   16610:	mov	r0, #1
   16614:	pop	{pc}		; (ldr pc, [sp], #4)
   16618:	mov	r3, #21
   1661c:	strb	r3, [r0, #4]
   16620:	mov	r0, #1
   16624:	b	16614 <__assert_fail@plt+0x514c>
   16628:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1662c:	strd	r6, [sp, #8]
   16630:	strd	r8, [sp, #16]
   16634:	str	sl, [sp, #24]
   16638:	str	lr, [sp, #28]
   1663c:	sub	sp, sp, #8
   16640:	mov	r6, r0
   16644:	mov	r4, r1
   16648:	mov	r8, r2
   1664c:	mov	r9, r3
   16650:	ldr	r5, [r1, #40]	; 0x28
   16654:	mov	r1, r5
   16658:	mov	r0, r4
   1665c:	bl	16044 <__assert_fail@plt+0x4b7c>
   16660:	cmp	r0, #1
   16664:	bgt	166b0 <__assert_fail@plt+0x51e8>
   16668:	add	r5, r5, r9
   1666c:	str	r5, [r4, #40]	; 0x28
   16670:	ldrb	r3, [r8, #4]
   16674:	and	r2, r3, #251	; 0xfb
   16678:	cmp	r3, #28
   1667c:	cmpne	r2, #26
   16680:	beq	166f8 <__assert_fail@plt+0x5230>
   16684:	ldrb	r2, [sp, #48]	; 0x30
   16688:	cmp	r3, #22
   1668c:	moveq	r3, r2
   16690:	orrne	r3, r2, #1
   16694:	cmp	r3, #0
   16698:	beq	168a0 <__assert_fail@plt+0x53d8>
   1669c:	mov	r0, #0
   166a0:	str	r0, [r6]
   166a4:	ldrb	r3, [r8]
   166a8:	strb	r3, [r6, #4]
   166ac:	b	166dc <__assert_fail@plt+0x5214>
   166b0:	mov	r7, r0
   166b4:	mov	r3, #1
   166b8:	str	r3, [r6]
   166bc:	ldr	r1, [r4, #40]	; 0x28
   166c0:	mov	r0, r4
   166c4:	bl	160b4 <__assert_fail@plt+0x4bec>
   166c8:	str	r0, [r6, #4]
   166cc:	ldr	r3, [r4, #40]	; 0x28
   166d0:	add	r7, r3, r7
   166d4:	str	r7, [r4, #40]	; 0x28
   166d8:	mov	r0, #0
   166dc:	add	sp, sp, #8
   166e0:	ldrd	r4, [sp]
   166e4:	ldrd	r6, [sp, #8]
   166e8:	ldrd	r8, [sp, #16]
   166ec:	ldr	sl, [sp, #24]
   166f0:	add	sp, sp, #28
   166f4:	pop	{pc}		; (ldr pc, [sp], #4)
   166f8:	ldr	r3, [r4, #56]	; 0x38
   166fc:	cmp	r5, r3
   16700:	movge	r0, #7
   16704:	bge	166dc <__assert_fail@plt+0x5214>
   16708:	ldrb	r9, [r8]
   1670c:	mov	r5, #0
   16710:	b	167f8 <__assert_fail@plt+0x5330>
   16714:	ldrb	r3, [r4, #75]	; 0x4b
   16718:	cmp	r3, #0
   1671c:	bne	16738 <__assert_fail@plt+0x5270>
   16720:	ldr	r2, [r4, #4]
   16724:	ldr	r3, [r4, #40]	; 0x28
   16728:	add	r1, r3, #1
   1672c:	str	r1, [r4, #40]	; 0x28
   16730:	ldrb	r7, [r2, r3]
   16734:	b	16818 <__assert_fail@plt+0x5350>
   16738:	ldrb	r3, [r4, #76]	; 0x4c
   1673c:	cmp	r3, #0
   16740:	beq	167c4 <__assert_fail@plt+0x52fc>
   16744:	ldr	sl, [r4, #40]	; 0x28
   16748:	ldr	r3, [r4, #28]
   1674c:	cmp	sl, r3
   16750:	beq	16764 <__assert_fail@plt+0x529c>
   16754:	ldr	r3, [r4, #8]
   16758:	ldr	r3, [r3, sl, lsl #2]
   1675c:	cmn	r3, #1
   16760:	beq	16798 <__assert_fail@plt+0x52d0>
   16764:	ldr	r2, [r4, #12]
   16768:	ldr	r3, [r4]
   1676c:	ldr	r1, [r2, sl, lsl #2]
   16770:	ldr	r2, [r4, #24]
   16774:	add	r3, r3, r1
   16778:	ldrb	r7, [r3, r2]
   1677c:	bics	r3, r7, #127	; 0x7f
   16780:	beq	167ac <__assert_fail@plt+0x52e4>
   16784:	ldr	r3, [r4, #4]
   16788:	add	r2, sl, #1
   1678c:	str	r2, [r4, #40]	; 0x28
   16790:	ldrb	r7, [r3, sl]
   16794:	b	16818 <__assert_fail@plt+0x5350>
   16798:	ldr	r3, [r4, #4]
   1679c:	add	r2, sl, #1
   167a0:	str	r2, [r4, #40]	; 0x28
   167a4:	ldrb	r7, [r3, sl]
   167a8:	b	16818 <__assert_fail@plt+0x5350>
   167ac:	mov	r1, sl
   167b0:	mov	r0, r4
   167b4:	bl	16044 <__assert_fail@plt+0x4b7c>
   167b8:	add	r0, sl, r0
   167bc:	str	r0, [r4, #40]	; 0x28
   167c0:	b	16818 <__assert_fail@plt+0x5350>
   167c4:	ldr	r3, [r4]
   167c8:	ldr	r1, [r4, #24]
   167cc:	ldr	r2, [r4, #40]	; 0x28
   167d0:	add	r0, r2, #1
   167d4:	str	r0, [r4, #40]	; 0x28
   167d8:	add	r3, r3, r1
   167dc:	ldrb	r7, [r3, r2]
   167e0:	b	16818 <__assert_fail@plt+0x5350>
   167e4:	ldr	r3, [r6, #4]
   167e8:	strb	r7, [r3, r5]
   167ec:	add	r5, r5, #1
   167f0:	cmp	r5, #32
   167f4:	beq	168cc <__assert_fail@plt+0x5404>
   167f8:	ldrb	r3, [r8, #4]
   167fc:	cmp	r3, #30
   16800:	beq	16714 <__assert_fail@plt+0x524c>
   16804:	ldr	r2, [r4, #4]
   16808:	ldr	r3, [r4, #40]	; 0x28
   1680c:	add	r1, r3, #1
   16810:	str	r1, [r4, #40]	; 0x28
   16814:	ldrb	r7, [r2, r3]
   16818:	ldr	r3, [r4, #40]	; 0x28
   1681c:	ldr	r2, [r4, #56]	; 0x38
   16820:	cmp	r2, r3
   16824:	ble	168c4 <__assert_fail@plt+0x53fc>
   16828:	cmp	r9, r7
   1682c:	bne	167e4 <__assert_fail@plt+0x531c>
   16830:	ldr	r2, [r4, #4]
   16834:	ldrb	r2, [r2, r3]
   16838:	cmp	r2, #93	; 0x5d
   1683c:	bne	167e4 <__assert_fail@plt+0x531c>
   16840:	add	r3, r3, #1
   16844:	str	r3, [r4, #40]	; 0x28
   16848:	ldr	r3, [r6, #4]
   1684c:	mov	r2, #0
   16850:	strb	r2, [r3, r5]
   16854:	ldrb	r3, [r8, #4]
   16858:	cmp	r3, #28
   1685c:	beq	16880 <__assert_fail@plt+0x53b8>
   16860:	cmp	r3, #30
   16864:	beq	16890 <__assert_fail@plt+0x53c8>
   16868:	cmp	r3, #26
   1686c:	moveq	r3, #3
   16870:	streq	r3, [r6]
   16874:	moveq	r0, r2
   16878:	movne	r0, #0
   1687c:	b	166dc <__assert_fail@plt+0x5214>
   16880:	mov	r3, #2
   16884:	str	r3, [r6]
   16888:	mov	r0, #0
   1688c:	b	166dc <__assert_fail@plt+0x5214>
   16890:	mov	r3, #4
   16894:	str	r3, [r6]
   16898:	mov	r0, #0
   1689c:	b	166dc <__assert_fail@plt+0x5214>
   168a0:	ldr	r2, [sp, #44]	; 0x2c
   168a4:	mov	r1, r4
   168a8:	mov	r0, sp
   168ac:	bl	16494 <__assert_fail@plt+0x4fcc>
   168b0:	ldrb	r3, [sp, #4]
   168b4:	cmp	r3, #21
   168b8:	movne	r0, #11
   168bc:	beq	1669c <__assert_fail@plt+0x51d4>
   168c0:	b	166dc <__assert_fail@plt+0x5214>
   168c4:	mov	r0, #7
   168c8:	b	166dc <__assert_fail@plt+0x5214>
   168cc:	mov	r0, #7
   168d0:	b	166dc <__assert_fail@plt+0x5214>
   168d4:	ldrb	r3, [r1, #24]
   168d8:	cmp	r3, #17
   168dc:	beq	168e8 <__assert_fail@plt+0x5420>
   168e0:	mov	r0, #0
   168e4:	bx	lr
   168e8:	ldr	r3, [r1, #20]
   168ec:	cmp	r0, r3
   168f0:	bne	168e0 <__assert_fail@plt+0x5418>
   168f4:	ldrb	r3, [r1, #26]
   168f8:	orr	r3, r3, #8
   168fc:	strb	r3, [r1, #26]
   16900:	b	168e0 <__assert_fail@plt+0x5418>
   16904:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16908:	strd	r6, [sp, #8]
   1690c:	strd	r8, [sp, #16]
   16910:	strd	sl, [sp, #24]
   16914:	str	lr, [sp, #32]
   16918:	sub	sp, sp, #52	; 0x34
   1691c:	str	r0, [sp, #12]
   16920:	mov	fp, r1
   16924:	mov	sl, r2
   16928:	str	r3, [sp, #32]
   1692c:	ldr	r8, [r0, #84]	; 0x54
   16930:	add	r3, r3, r3, lsl #1
   16934:	ldr	r7, [r8, #24]
   16938:	add	r7, r7, r3, lsl #2
   1693c:	ldr	r3, [r7, #4]
   16940:	cmp	r3, #0
   16944:	ble	16ae0 <__assert_fail@plt+0x5618>
   16948:	mov	r3, #1
   1694c:	lsl	r3, r3, sl
   16950:	str	r3, [sp, #20]
   16954:	mvn	r3, r3
   16958:	str	r3, [sp, #24]
   1695c:	mov	r4, #0
   16960:	ldr	r3, [sp, #88]	; 0x58
   16964:	add	r3, r3, #1
   16968:	add	r3, r3, r3, lsl #1
   1696c:	str	r3, [sp, #36]	; 0x24
   16970:	b	16a50 <__assert_fail@plt+0x5588>
   16974:	ldr	r3, [r8, #20]
   16978:	add	r3, r3, r4
   1697c:	ldr	r3, [r3, #8]
   16980:	ldr	r3, [r3]
   16984:	cmp	r7, r3
   16988:	beq	16a10 <__assert_fail@plt+0x5548>
   1698c:	str	fp, [sp]
   16990:	mov	r2, sl
   16994:	ldr	r1, [sp, #16]
   16998:	ldr	r0, [sp, #12]
   1699c:	bl	16904 <__assert_fail@plt+0x543c>
   169a0:	cmn	r0, #1
   169a4:	beq	16ae4 <__assert_fail@plt+0x561c>
   169a8:	cmp	r0, #0
   169ac:	bne	169bc <__assert_fail@plt+0x54f4>
   169b0:	ldr	r3, [sp, #28]
   169b4:	cmp	r3, #0
   169b8:	bne	16ae4 <__assert_fail@plt+0x561c>
   169bc:	cmp	sl, #31
   169c0:	bgt	169d4 <__assert_fail@plt+0x550c>
   169c4:	ldr	r3, [r9, #-8]
   169c8:	ldr	r2, [sp, #24]
   169cc:	and	r3, r3, r2
   169d0:	str	r3, [r9, #-8]
   169d4:	add	r5, r5, #24
   169d8:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   169dc:	cmp	r3, #0
   169e0:	beq	16a1c <__assert_fail@plt+0x5554>
   169e4:	mov	r9, r5
   169e8:	ldr	r3, [r5, #-24]	; 0xffffffe8
   169ec:	cmp	r3, r6
   169f0:	bne	169d4 <__assert_fail@plt+0x550c>
   169f4:	cmp	sl, #31
   169f8:	bgt	16974 <__assert_fail@plt+0x54ac>
   169fc:	ldr	r3, [r5, #-8]
   16a00:	ldr	r2, [sp, #20]
   16a04:	tst	r2, r3
   16a08:	bne	16974 <__assert_fail@plt+0x54ac>
   16a0c:	b	169d4 <__assert_fail@plt+0x550c>
   16a10:	ldr	fp, [sp, #16]
   16a14:	sbfx	r0, fp, #0, #1
   16a18:	b	16ae4 <__assert_fail@plt+0x561c>
   16a1c:	ldr	r7, [sp, #40]	; 0x28
   16a20:	ldr	r4, [sp, #44]	; 0x2c
   16a24:	ldr	fp, [sp, #16]
   16a28:	b	16a40 <__assert_fail@plt+0x5578>
   16a2c:	tst	fp, #1
   16a30:	beq	16a40 <__assert_fail@plt+0x5578>
   16a34:	ldr	r3, [r2, r6, lsl #3]
   16a38:	cmp	r3, sl
   16a3c:	beq	16b00 <__assert_fail@plt+0x5638>
   16a40:	add	r4, r4, #1
   16a44:	ldr	r3, [r7, #4]
   16a48:	cmp	r3, r4
   16a4c:	ble	16ae0 <__assert_fail@plt+0x5618>
   16a50:	ldr	r3, [r7, #8]
   16a54:	ldr	r6, [r3, r4, lsl #2]
   16a58:	ldr	r2, [r8]
   16a5c:	add	r3, r2, r6, lsl #3
   16a60:	ldrb	r3, [r3, #4]
   16a64:	cmp	r3, #8
   16a68:	beq	16a2c <__assert_fail@plt+0x5564>
   16a6c:	cmp	r3, #9
   16a70:	beq	16ac4 <__assert_fail@plt+0x55fc>
   16a74:	cmp	r3, #4
   16a78:	bne	16a40 <__assert_fail@plt+0x5578>
   16a7c:	ldr	r3, [sp, #88]	; 0x58
   16a80:	cmn	r3, #1
   16a84:	beq	16a40 <__assert_fail@plt+0x5578>
   16a88:	add	r3, r6, r6, lsl #1
   16a8c:	lsl	r3, r3, #2
   16a90:	ldr	r2, [sp, #12]
   16a94:	ldr	r5, [r2, #116]	; 0x74
   16a98:	ldr	r2, [sp, #36]	; 0x24
   16a9c:	add	r5, r5, r2, lsl #3
   16aa0:	and	r2, fp, #2
   16aa4:	str	r2, [sp, #28]
   16aa8:	str	r7, [sp, #40]	; 0x28
   16aac:	str	r4, [sp, #44]	; 0x2c
   16ab0:	mov	r4, r3
   16ab4:	str	fp, [sp, #16]
   16ab8:	ldr	r7, [sp, #32]
   16abc:	ldr	fp, [sp, #88]	; 0x58
   16ac0:	b	169e4 <__assert_fail@plt+0x551c>
   16ac4:	tst	fp, #2
   16ac8:	beq	16a40 <__assert_fail@plt+0x5578>
   16acc:	ldr	r3, [r2, r6, lsl #3]
   16ad0:	cmp	r3, sl
   16ad4:	bne	16a40 <__assert_fail@plt+0x5578>
   16ad8:	mov	r0, #0
   16adc:	b	16ae4 <__assert_fail@plt+0x561c>
   16ae0:	ubfx	r0, fp, #1, #1
   16ae4:	add	sp, sp, #52	; 0x34
   16ae8:	ldrd	r4, [sp]
   16aec:	ldrd	r6, [sp, #8]
   16af0:	ldrd	r8, [sp, #16]
   16af4:	ldrd	sl, [sp, #24]
   16af8:	add	sp, sp, #32
   16afc:	pop	{pc}		; (ldr pc, [sp], #4)
   16b00:	mvn	r0, #0
   16b04:	b	16ae4 <__assert_fail@plt+0x561c>
   16b08:	str	r4, [sp, #-8]!
   16b0c:	str	lr, [sp, #4]
   16b10:	sub	sp, sp, #8
   16b14:	ldr	lr, [sp, #16]
   16b18:	add	r1, r1, r1, lsl #1
   16b1c:	ldr	ip, [r0, #116]	; 0x74
   16b20:	add	r1, ip, r1, lsl #3
   16b24:	ldr	ip, [r1, #8]
   16b28:	cmp	ip, lr
   16b2c:	bgt	16b70 <__assert_fail@plt+0x56a8>
   16b30:	ldr	r4, [r1, #12]
   16b34:	cmp	r4, lr
   16b38:	movlt	r0, #1
   16b3c:	blt	16b60 <__assert_fail@plt+0x5698>
   16b40:	cmp	ip, lr
   16b44:	movne	r1, #0
   16b48:	moveq	r1, #1
   16b4c:	cmp	r4, lr
   16b50:	beq	16b78 <__assert_fail@plt+0x56b0>
   16b54:	cmp	ip, lr
   16b58:	movne	r0, #0
   16b5c:	beq	16b7c <__assert_fail@plt+0x56b4>
   16b60:	add	sp, sp, #8
   16b64:	ldr	r4, [sp]
   16b68:	add	sp, sp, #4
   16b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b70:	mvn	r0, #0
   16b74:	b	16b60 <__assert_fail@plt+0x5698>
   16b78:	orr	r1, r1, #2
   16b7c:	ldr	ip, [sp, #20]
   16b80:	str	ip, [sp]
   16b84:	bl	16904 <__assert_fail@plt+0x543c>
   16b88:	b	16b60 <__assert_fail@plt+0x5698>
   16b8c:	strd	r4, [sp, #-12]!
   16b90:	str	lr, [sp, #8]
   16b94:	mov	r4, r0
   16b98:	ldr	r5, [r0, #108]	; 0x6c
   16b9c:	mov	ip, r5
   16ba0:	mov	r0, #0
   16ba4:	cmp	ip, r0
   16ba8:	ble	16c14 <__assert_fail@plt+0x574c>
   16bac:	add	r2, ip, r0
   16bb0:	add	r2, r2, r2, lsr #31
   16bb4:	asr	r2, r2, #1
   16bb8:	ldr	lr, [r4, #116]	; 0x74
   16bbc:	add	r3, r2, r2, lsl #1
   16bc0:	add	r3, lr, r3, lsl #3
   16bc4:	ldr	r3, [r3, #4]
   16bc8:	cmp	r1, r3
   16bcc:	bgt	16c00 <__assert_fail@plt+0x5738>
   16bd0:	cmp	r0, r2
   16bd4:	bge	16c14 <__assert_fail@plt+0x574c>
   16bd8:	add	r3, r0, r2
   16bdc:	add	r3, r3, r3, lsr #31
   16be0:	asr	r3, r3, #1
   16be4:	add	ip, r3, r3, lsl #1
   16be8:	add	ip, lr, ip, lsl #3
   16bec:	ldr	ip, [ip, #4]
   16bf0:	cmp	ip, r1
   16bf4:	blt	16c08 <__assert_fail@plt+0x5740>
   16bf8:	mov	r2, r3
   16bfc:	b	16bd0 <__assert_fail@plt+0x5708>
   16c00:	mov	r3, r2
   16c04:	mov	r2, ip
   16c08:	add	r0, r3, #1
   16c0c:	mov	ip, r2
   16c10:	b	16ba4 <__assert_fail@plt+0x56dc>
   16c14:	cmp	r5, r0
   16c18:	ble	16c40 <__assert_fail@plt+0x5778>
   16c1c:	ldr	r3, [r4, #116]	; 0x74
   16c20:	add	r2, r0, r0, lsl #1
   16c24:	add	r3, r3, r2, lsl #3
   16c28:	ldr	r3, [r3, #4]
   16c2c:	cmp	r3, r1
   16c30:	mvnne	r0, #0
   16c34:	ldrd	r4, [sp]
   16c38:	add	sp, sp, #8
   16c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c40:	mvn	r0, #0
   16c44:	b	16c34 <__assert_fail@plt+0x576c>
   16c48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c4c:	strd	r6, [sp, #8]
   16c50:	strd	r8, [sp, #16]
   16c54:	strd	sl, [sp, #24]
   16c58:	str	lr, [sp, #32]
   16c5c:	sub	sp, sp, #20
   16c60:	mov	r4, r0
   16c64:	mov	r5, r1
   16c68:	str	r2, [sp, #12]
   16c6c:	mov	r8, r3
   16c70:	ldr	sl, [r0, #84]	; 0x54
   16c74:	mov	r1, r3
   16c78:	bl	16b8c <__assert_fail@plt+0x56c4>
   16c7c:	mov	fp, r0
   16c80:	ldr	r1, [sp, #60]	; 0x3c
   16c84:	mov	r0, r4
   16c88:	bl	16b8c <__assert_fail@plt+0x56c4>
   16c8c:	str	r0, [sp, #8]
   16c90:	ldr	r3, [r5, #4]
   16c94:	cmp	r3, #0
   16c98:	ble	16d40 <__assert_fail@plt+0x5878>
   16c9c:	mov	r6, #0
   16ca0:	ldr	r3, [r5, #8]
   16ca4:	ldr	r1, [r3, r6, lsl #2]
   16ca8:	ldr	r3, [r4, #116]	; 0x74
   16cac:	add	r2, r1, r1, lsl #1
   16cb0:	ldr	r2, [r3, r2, lsl #3]
   16cb4:	ldr	r3, [sl]
   16cb8:	ldr	r7, [r3, r2, lsl #3]
   16cbc:	str	fp, [sp, #4]
   16cc0:	str	r8, [sp]
   16cc4:	ldr	r3, [sp, #12]
   16cc8:	mov	r2, r7
   16ccc:	mov	r0, r4
   16cd0:	bl	16b08 <__assert_fail@plt+0x5640>
   16cd4:	mov	r9, r0
   16cd8:	ldr	r3, [r5, #8]
   16cdc:	ldr	r1, [r3, r6, lsl #2]
   16ce0:	ldr	r3, [sp, #8]
   16ce4:	str	r3, [sp, #4]
   16ce8:	ldr	r3, [sp, #60]	; 0x3c
   16cec:	str	r3, [sp]
   16cf0:	ldr	r3, [sp, #56]	; 0x38
   16cf4:	mov	r2, r7
   16cf8:	mov	r0, r4
   16cfc:	bl	16b08 <__assert_fail@plt+0x5640>
   16d00:	cmp	r9, r0
   16d04:	beq	16d28 <__assert_fail@plt+0x5860>
   16d08:	mov	r0, #1
   16d0c:	add	sp, sp, #20
   16d10:	ldrd	r4, [sp]
   16d14:	ldrd	r6, [sp, #8]
   16d18:	ldrd	r8, [sp, #16]
   16d1c:	ldrd	sl, [sp, #24]
   16d20:	add	sp, sp, #32
   16d24:	pop	{pc}		; (ldr pc, [sp], #4)
   16d28:	add	r6, r6, #1
   16d2c:	ldr	r3, [r5, #4]
   16d30:	cmp	r3, r6
   16d34:	bgt	16ca0 <__assert_fail@plt+0x57d8>
   16d38:	mov	r0, #0
   16d3c:	b	16d0c <__assert_fail@plt+0x5844>
   16d40:	mov	r0, #0
   16d44:	b	16d0c <__assert_fail@plt+0x5844>
   16d48:	strd	r4, [sp, #-16]!
   16d4c:	str	r6, [sp, #8]
   16d50:	str	lr, [sp, #12]
   16d54:	mov	r4, r0
   16d58:	mov	r5, r1
   16d5c:	ldr	r3, [r0, #80]	; 0x50
   16d60:	cmp	r3, #1
   16d64:	ble	16dac <__assert_fail@plt+0x58e4>
   16d68:	cmn	r1, #-1073741823	; 0xc0000001
   16d6c:	bhi	16dec <__assert_fail@plt+0x5924>
   16d70:	lsl	r6, r1, #2
   16d74:	mov	r1, r6
   16d78:	ldr	r0, [r0, #8]
   16d7c:	bl	24844 <__assert_fail@plt+0x1337c>
   16d80:	cmp	r0, #0
   16d84:	beq	16df4 <__assert_fail@plt+0x592c>
   16d88:	str	r0, [r4, #8]
   16d8c:	ldr	r0, [r4, #12]
   16d90:	cmp	r0, #0
   16d94:	beq	16dac <__assert_fail@plt+0x58e4>
   16d98:	mov	r1, r6
   16d9c:	bl	24844 <__assert_fail@plt+0x1337c>
   16da0:	cmp	r0, #0
   16da4:	beq	16dfc <__assert_fail@plt+0x5934>
   16da8:	str	r0, [r4, #12]
   16dac:	ldrb	r3, [r4, #75]	; 0x4b
   16db0:	cmp	r3, #0
   16db4:	bne	16dd0 <__assert_fail@plt+0x5908>
   16db8:	str	r5, [r4, #36]	; 0x24
   16dbc:	mov	r0, #0
   16dc0:	ldrd	r4, [sp]
   16dc4:	ldr	r6, [sp, #8]
   16dc8:	add	sp, sp, #12
   16dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   16dd0:	mov	r1, r5
   16dd4:	ldr	r0, [r4, #4]
   16dd8:	bl	24844 <__assert_fail@plt+0x1337c>
   16ddc:	cmp	r0, #0
   16de0:	beq	16e04 <__assert_fail@plt+0x593c>
   16de4:	str	r0, [r4, #4]
   16de8:	b	16db8 <__assert_fail@plt+0x58f0>
   16dec:	mov	r0, #12
   16df0:	b	16dc0 <__assert_fail@plt+0x58f8>
   16df4:	mov	r0, #12
   16df8:	b	16dc0 <__assert_fail@plt+0x58f8>
   16dfc:	mov	r0, #12
   16e00:	b	16dc0 <__assert_fail@plt+0x58f8>
   16e04:	mov	r0, #12
   16e08:	b	16dc0 <__assert_fail@plt+0x58f8>
   16e0c:	strd	r4, [sp, #-16]!
   16e10:	str	r6, [sp, #8]
   16e14:	str	lr, [sp, #12]
   16e18:	mov	r4, r0
   16e1c:	mov	r5, r1
   16e20:	ldr	r1, [r0]
   16e24:	ldr	r3, [r0, #4]
   16e28:	cmp	r1, r3
   16e2c:	beq	16e58 <__assert_fail@plt+0x5990>
   16e30:	ldr	r2, [r4, #8]
   16e34:	ldr	r3, [r4, #4]
   16e38:	add	r1, r3, #1
   16e3c:	str	r1, [r4, #4]
   16e40:	str	r5, [r2, r3, lsl #2]
   16e44:	mov	r0, #1
   16e48:	ldrd	r4, [sp]
   16e4c:	ldr	r6, [sp, #8]
   16e50:	add	sp, sp, #12
   16e54:	pop	{pc}		; (ldr pc, [sp], #4)
   16e58:	add	r1, r1, #1
   16e5c:	lsl	r3, r1, #1
   16e60:	str	r3, [r0]
   16e64:	lsl	r1, r1, #3
   16e68:	ldr	r0, [r0, #8]
   16e6c:	bl	24844 <__assert_fail@plt+0x1337c>
   16e70:	cmp	r0, #0
   16e74:	beq	16e80 <__assert_fail@plt+0x59b8>
   16e78:	str	r0, [r4, #8]
   16e7c:	b	16e30 <__assert_fail@plt+0x5968>
   16e80:	mov	r0, #0
   16e84:	b	16e48 <__assert_fail@plt+0x5980>
   16e88:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16e8c:	strd	r6, [sp, #8]
   16e90:	str	r8, [sp, #16]
   16e94:	str	lr, [sp, #20]
   16e98:	mov	r7, r0
   16e9c:	mov	r5, r1
   16ea0:	mov	r4, r2
   16ea4:	mov	r6, r3
   16ea8:	ldr	r3, [r0, #64]	; 0x40
   16eac:	cmp	r3, #31
   16eb0:	beq	16f30 <__assert_fail@plt+0x5a68>
   16eb4:	ldr	r3, [r7, #56]	; 0x38
   16eb8:	ldr	r2, [r7, #64]	; 0x40
   16ebc:	add	r1, r2, #1
   16ec0:	str	r1, [r7, #64]	; 0x40
   16ec4:	lsl	r2, r2, #5
   16ec8:	add	r0, r2, #4
   16ecc:	add	r0, r3, r0
   16ed0:	add	r3, r3, r2
   16ed4:	mov	r2, #0
   16ed8:	str	r2, [r3, #4]
   16edc:	str	r5, [r3, #8]
   16ee0:	str	r4, [r3, #12]
   16ee4:	ldrd	r6, [r6]
   16ee8:	strd	r6, [r3, #24]
   16eec:	ldrb	r1, [r3, #30]
   16ef0:	and	r1, r1, #251	; 0xfb
   16ef4:	bfi	r1, r2, #3, #1
   16ef8:	strb	r1, [r3, #30]
   16efc:	str	r2, [r3, #16]
   16f00:	str	r2, [r3, #20]
   16f04:	mvn	r2, #0
   16f08:	str	r2, [r3, #32]
   16f0c:	cmp	r5, #0
   16f10:	strne	r0, [r5]
   16f14:	cmp	r4, #0
   16f18:	strne	r0, [r4]
   16f1c:	ldrd	r4, [sp]
   16f20:	ldrd	r6, [sp, #8]
   16f24:	ldr	r8, [sp, #16]
   16f28:	add	sp, sp, #20
   16f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f30:	mov	r0, #996	; 0x3e4
   16f34:	bl	24808 <__assert_fail@plt+0x13340>
   16f38:	cmp	r0, #0
   16f3c:	beq	16f1c <__assert_fail@plt+0x5a54>
   16f40:	ldr	r3, [r7, #56]	; 0x38
   16f44:	str	r3, [r0]
   16f48:	str	r0, [r7, #56]	; 0x38
   16f4c:	mov	r3, #0
   16f50:	str	r3, [r7, #64]	; 0x40
   16f54:	b	16eb4 <__assert_fail@plt+0x59ec>
   16f58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16f5c:	strd	r6, [sp, #8]
   16f60:	str	r8, [sp, #16]
   16f64:	str	lr, [sp, #20]
   16f68:	sub	sp, sp, #8
   16f6c:	mov	r4, r0
   16f70:	mov	r7, r1
   16f74:	ldr	r5, [r0]
   16f78:	add	r8, sp, #4
   16f7c:	mov	r6, #0
   16f80:	add	r3, r4, #20
   16f84:	mov	r2, r6
   16f88:	mov	r1, r6
   16f8c:	mov	r0, r7
   16f90:	bl	16e88 <__assert_fail@plt+0x59c0>
   16f94:	str	r0, [r8]
   16f98:	cmp	r0, #0
   16f9c:	beq	16fd4 <__assert_fail@plt+0x5b0c>
   16fa0:	str	r5, [r0]
   16fa4:	ldr	r2, [r8]
   16fa8:	ldrb	r3, [r2, #26]
   16fac:	orr	r3, r3, #4
   16fb0:	strb	r3, [r2, #26]
   16fb4:	ldr	r5, [r8]
   16fb8:	ldr	r3, [r4, #4]
   16fbc:	cmp	r3, #0
   16fc0:	beq	16fec <__assert_fail@plt+0x5b24>
   16fc4:	add	r8, r5, #4
   16fc8:	mov	r4, r3
   16fcc:	b	16f80 <__assert_fail@plt+0x5ab8>
   16fd0:	ldr	r0, [sp, #4]
   16fd4:	add	sp, sp, #8
   16fd8:	ldrd	r4, [sp]
   16fdc:	ldrd	r6, [sp, #8]
   16fe0:	ldr	r8, [sp, #16]
   16fe4:	add	sp, sp, #20
   16fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fec:	ldr	r2, [r4, #8]
   16ff0:	cmp	r2, r3
   16ff4:	cmpne	r2, #0
   16ff8:	bne	17018 <__assert_fail@plt+0x5b50>
   16ffc:	ldr	r2, [r4]
   17000:	ldr	r5, [r5]
   17004:	mov	r3, r4
   17008:	cmp	r2, #0
   1700c:	beq	16fd0 <__assert_fail@plt+0x5b08>
   17010:	mov	r4, r2
   17014:	b	16fec <__assert_fail@plt+0x5b24>
   17018:	add	r8, r5, #8
   1701c:	mov	r4, r2
   17020:	b	16f80 <__assert_fail@plt+0x5ab8>
   17024:	strd	r4, [sp, #-12]!
   17028:	str	lr, [sp, #8]
   1702c:	sub	sp, sp, #12
   17030:	mov	r4, #0
   17034:	mov	r5, #0
   17038:	strd	r4, [sp]
   1703c:	strb	r3, [sp, #4]
   17040:	mov	r3, sp
   17044:	bl	16e88 <__assert_fail@plt+0x59c0>
   17048:	add	sp, sp, #12
   1704c:	ldrd	r4, [sp]
   17050:	add	sp, sp, #8
   17054:	pop	{pc}		; (ldr pc, [sp], #4)
   17058:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1705c:	strd	r6, [sp, #8]
   17060:	strd	r8, [sp, #16]
   17064:	str	sl, [sp, #24]
   17068:	str	lr, [sp, #28]
   1706c:	mov	r8, r0
   17070:	mov	r7, r2
   17074:	ldr	r6, [r1]
   17078:	ldr	r4, [r2, #4]
   1707c:	ldrb	r3, [r1, #28]
   17080:	ubfx	r3, r3, #4, #1
   17084:	cmp	r4, #0
   17088:	moveq	r3, #0
   1708c:	cmp	r3, #0
   17090:	bne	170d8 <__assert_fail@plt+0x5c10>
   17094:	mov	r3, #8
   17098:	mov	r2, #0
   1709c:	mov	r1, r2
   170a0:	mov	r0, r6
   170a4:	bl	17024 <__assert_fail@plt+0x5b5c>
   170a8:	mov	r5, r0
   170ac:	mov	r3, #9
   170b0:	mov	r2, #0
   170b4:	mov	r1, r2
   170b8:	mov	r0, r6
   170bc:	bl	17024 <__assert_fail@plt+0x5b5c>
   170c0:	mov	sl, r0
   170c4:	cmp	r4, #0
   170c8:	moveq	r9, r0
   170cc:	beq	1713c <__assert_fail@plt+0x5c74>
   170d0:	mov	r9, r0
   170d4:	b	17124 <__assert_fail@plt+0x5c5c>
   170d8:	ldr	r3, [r2, #20]
   170dc:	cmp	r3, #31
   170e0:	bgt	17198 <__assert_fail@plt+0x5cd0>
   170e4:	ldr	r2, [r6, #80]	; 0x50
   170e8:	lsr	r3, r2, r3
   170ec:	tst	r3, #1
   170f0:	beq	17198 <__assert_fail@plt+0x5cd0>
   170f4:	mov	r3, #8
   170f8:	mov	r2, #0
   170fc:	mov	r1, r2
   17100:	mov	r0, r6
   17104:	bl	17024 <__assert_fail@plt+0x5b5c>
   17108:	mov	r5, r0
   1710c:	mov	r3, #9
   17110:	mov	r2, #0
   17114:	mov	r1, r2
   17118:	mov	r0, r6
   1711c:	bl	17024 <__assert_fail@plt+0x5b5c>
   17120:	mov	r9, r0
   17124:	mov	r3, #16
   17128:	mov	r2, r9
   1712c:	mov	r1, r4
   17130:	mov	r0, r6
   17134:	bl	17024 <__assert_fail@plt+0x5b5c>
   17138:	mov	sl, r0
   1713c:	mov	r3, #16
   17140:	mov	r2, sl
   17144:	mov	r1, r5
   17148:	mov	r0, r6
   1714c:	bl	17024 <__assert_fail@plt+0x5b5c>
   17150:	mov	r4, r0
   17154:	cmp	sl, #0
   17158:	cmpne	r0, #0
   1715c:	beq	171b4 <__assert_fail@plt+0x5cec>
   17160:	cmp	r9, #0
   17164:	cmpne	r5, #0
   17168:	beq	171b4 <__assert_fail@plt+0x5cec>
   1716c:	ldr	r3, [r7, #20]
   17170:	str	r3, [r9, #20]
   17174:	str	r3, [r5, #20]
   17178:	ldrb	r3, [r7, #26]
   1717c:	ubfx	r3, r3, #3, #1
   17180:	ldrb	r2, [r9, #26]
   17184:	bfi	r2, r3, #3, #1
   17188:	strb	r2, [r9, #26]
   1718c:	ldrb	r2, [r5, #26]
   17190:	bfi	r2, r3, #3, #1
   17194:	strb	r2, [r5, #26]
   17198:	mov	r0, r4
   1719c:	ldrd	r4, [sp]
   171a0:	ldrd	r6, [sp, #8]
   171a4:	ldrd	r8, [sp, #16]
   171a8:	ldr	sl, [sp, #24]
   171ac:	add	sp, sp, #28
   171b0:	pop	{pc}		; (ldr pc, [sp], #4)
   171b4:	mov	r3, #12
   171b8:	str	r3, [r8]
   171bc:	mov	r4, #0
   171c0:	b	17198 <__assert_fail@plt+0x5cd0>
   171c4:	strd	r4, [sp, #-12]!
   171c8:	str	lr, [sp, #8]
   171cc:	sub	sp, sp, #12
   171d0:	mov	r5, r0
   171d4:	mov	r4, r1
   171d8:	mov	r3, #0
   171dc:	str	r3, [sp, #4]
   171e0:	ldr	r2, [r1, #4]
   171e4:	cmp	r2, r3
   171e8:	beq	171f8 <__assert_fail@plt+0x5d30>
   171ec:	ldrb	r3, [r2, #24]
   171f0:	cmp	r3, #17
   171f4:	beq	17224 <__assert_fail@plt+0x5d5c>
   171f8:	ldr	r2, [r4, #8]
   171fc:	cmp	r2, #0
   17200:	beq	17210 <__assert_fail@plt+0x5d48>
   17204:	ldrb	r3, [r2, #24]
   17208:	cmp	r3, #17
   1720c:	beq	17240 <__assert_fail@plt+0x5d78>
   17210:	ldr	r0, [sp, #4]
   17214:	add	sp, sp, #12
   17218:	ldrd	r4, [sp]
   1721c:	add	sp, sp, #8
   17220:	pop	{pc}		; (ldr pc, [sp], #4)
   17224:	mov	r1, r0
   17228:	add	r0, sp, #4
   1722c:	bl	17058 <__assert_fail@plt+0x5b90>
   17230:	str	r0, [r4, #4]
   17234:	cmp	r0, #0
   17238:	strne	r4, [r0]
   1723c:	b	171f8 <__assert_fail@plt+0x5d30>
   17240:	mov	r1, r5
   17244:	add	r0, sp, #4
   17248:	bl	17058 <__assert_fail@plt+0x5b90>
   1724c:	str	r0, [r4, #8]
   17250:	cmp	r0, #0
   17254:	strne	r4, [r0]
   17258:	b	17210 <__assert_fail@plt+0x5d48>
   1725c:	strd	r4, [sp, #-16]!
   17260:	str	r6, [sp, #8]
   17264:	str	lr, [sp, #12]
   17268:	mov	r4, r0
   1726c:	mov	r5, r1
   17270:	mov	r3, #1
   17274:	str	r3, [r0]
   17278:	str	r3, [r0, #4]
   1727c:	mov	r0, #4
   17280:	bl	24808 <__assert_fail@plt+0x13340>
   17284:	str	r0, [r4, #8]
   17288:	cmp	r0, #0
   1728c:	moveq	r3, #0
   17290:	streq	r3, [r4, #4]
   17294:	streq	r3, [r4]
   17298:	moveq	r0, #12
   1729c:	strne	r5, [r0]
   172a0:	movne	r0, #0
   172a4:	ldrd	r4, [sp]
   172a8:	ldr	r6, [sp, #8]
   172ac:	add	sp, sp, #12
   172b0:	pop	{pc}		; (ldr pc, [sp], #4)
   172b4:	str	r4, [sp, #-8]!
   172b8:	str	lr, [sp, #4]
   172bc:	mov	r4, r0
   172c0:	str	r1, [r0]
   172c4:	mov	r3, #0
   172c8:	str	r3, [r0, #4]
   172cc:	lsl	r0, r1, #2
   172d0:	bl	24808 <__assert_fail@plt+0x13340>
   172d4:	str	r0, [r4, #8]
   172d8:	cmp	r0, #0
   172dc:	movne	r0, #0
   172e0:	moveq	r0, #12
   172e4:	ldr	r4, [sp]
   172e8:	add	sp, sp, #4
   172ec:	pop	{pc}		; (ldr pc, [sp], #4)
   172f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   172f4:	strd	r6, [sp, #8]
   172f8:	strd	r8, [sp, #16]
   172fc:	str	sl, [sp, #24]
   17300:	str	lr, [sp, #28]
   17304:	mov	r6, r0
   17308:	mov	r5, r1
   1730c:	mov	r7, r2
   17310:	mov	r8, r1
   17314:	str	r2, [r8], #16
   17318:	ldr	r1, [r1, #8]
   1731c:	mov	r0, r8
   17320:	bl	172b4 <__assert_fail@plt+0x5dec>
   17324:	subs	r9, r0, #0
   17328:	bne	17404 <__assert_fail@plt+0x5f3c>
   1732c:	ldr	r3, [r5, #8]
   17330:	cmp	r3, #0
   17334:	ble	17384 <__assert_fail@plt+0x5ebc>
   17338:	mov	r4, r9
   1733c:	b	17350 <__assert_fail@plt+0x5e88>
   17340:	add	r4, r4, #1
   17344:	ldr	r3, [r5, #8]
   17348:	cmp	r3, r4
   1734c:	ble	17384 <__assert_fail@plt+0x5ebc>
   17350:	ldr	r3, [r5, #12]
   17354:	ldr	r1, [r3, r4, lsl #2]
   17358:	ldr	r3, [r6]
   1735c:	add	r3, r3, r1, lsl #3
   17360:	ldrb	r3, [r3, #4]
   17364:	tst	r3, #8
   17368:	bne	17340 <__assert_fail@plt+0x5e78>
   1736c:	mov	r0, r8
   17370:	bl	16e0c <__assert_fail@plt+0x5944>
   17374:	cmp	r0, #0
   17378:	bne	17340 <__assert_fail@plt+0x5e78>
   1737c:	mov	r9, #12
   17380:	b	173c0 <__assert_fail@plt+0x5ef8>
   17384:	ldr	r4, [r6, #68]	; 0x44
   17388:	and	r7, r7, r4
   1738c:	add	r7, r7, r7, lsl #1
   17390:	lsl	r4, r7, #2
   17394:	ldr	r6, [r6, #32]
   17398:	add	r7, r6, r4
   1739c:	ldr	r3, [r6, r4]
   173a0:	ldr	r2, [r7, #4]
   173a4:	cmp	r2, r3
   173a8:	ble	173dc <__assert_fail@plt+0x5f14>
   173ac:	ldr	r2, [r7, #8]
   173b0:	ldr	r3, [r6, r4]
   173b4:	add	r1, r3, #1
   173b8:	str	r1, [r6, r4]
   173bc:	str	r5, [r2, r3, lsl #2]
   173c0:	mov	r0, r9
   173c4:	ldrd	r4, [sp]
   173c8:	ldrd	r6, [sp, #8]
   173cc:	ldrd	r8, [sp, #16]
   173d0:	ldr	sl, [sp, #24]
   173d4:	add	sp, sp, #28
   173d8:	pop	{pc}		; (ldr pc, [sp], #4)
   173dc:	add	r3, r3, #1
   173e0:	lsl	r8, r3, #1
   173e4:	lsl	r1, r3, #3
   173e8:	ldr	r0, [r7, #8]
   173ec:	bl	24844 <__assert_fail@plt+0x1337c>
   173f0:	cmp	r0, #0
   173f4:	beq	1740c <__assert_fail@plt+0x5f44>
   173f8:	str	r0, [r7, #8]
   173fc:	str	r8, [r7, #4]
   17400:	b	173ac <__assert_fail@plt+0x5ee4>
   17404:	mov	r9, #12
   17408:	b	173c0 <__assert_fail@plt+0x5ef8>
   1740c:	mov	r9, #12
   17410:	b	173c0 <__assert_fail@plt+0x5ef8>
   17414:	strd	r4, [sp, #-20]!	; 0xffffffec
   17418:	strd	r6, [sp, #8]
   1741c:	str	lr, [sp, #16]
   17420:	sub	sp, sp, #84	; 0x54
   17424:	mov	r4, r0
   17428:	ldr	r5, [r0, #36]	; 0x24
   1742c:	ldr	r3, [r0, #48]	; 0x30
   17430:	cmp	r5, r3
   17434:	movge	r5, r3
   17438:	ldr	r7, [r0, #28]
   1743c:	cmp	r5, r7
   17440:	ble	17588 <__assert_fail@plt+0x60c0>
   17444:	mov	r6, #1
   17448:	b	17528 <__assert_fail@plt+0x6060>
   1744c:	ldr	r3, [r4, #80]	; 0x50
   17450:	cmp	r3, #0
   17454:	cmpgt	r2, #0
   17458:	ble	174b0 <__assert_fail@plt+0x5fe8>
   1745c:	add	r0, sp, #16
   17460:	mov	r1, #0
   17464:	ldr	r3, [r4]
   17468:	ldr	ip, [r4, #24]
   1746c:	add	r3, r3, r7
   17470:	add	r3, r3, r1
   17474:	ldrb	r3, [r3, ip]
   17478:	ldr	ip, [r4, #64]	; 0x40
   1747c:	ldrb	ip, [ip, r3]
   17480:	ldr	r3, [r4, #4]
   17484:	add	r3, r3, r7
   17488:	strb	ip, [r3, r1]
   1748c:	strb	ip, [r0], #1
   17490:	add	r1, r1, #1
   17494:	ldr	r3, [r4, #80]	; 0x50
   17498:	cmp	r2, r3
   1749c:	movlt	r3, r2
   174a0:	cmp	r3, r1
   174a4:	bgt	17464 <__assert_fail@plt+0x5f9c>
   174a8:	add	r1, sp, #16
   174ac:	b	17550 <__assert_fail@plt+0x6088>
   174b0:	add	r1, sp, #16
   174b4:	b	17550 <__assert_fail@plt+0x6088>
   174b8:	ldr	r3, [r4]
   174bc:	ldr	r2, [r4, #24]
   174c0:	add	r3, r3, r7
   174c4:	ldrb	r3, [r3, r2]
   174c8:	str	r3, [sp, #4]
   174cc:	ldr	r2, [r4, #64]	; 0x40
   174d0:	cmp	r2, #0
   174d4:	ldrbne	r3, [r2, r3]
   174d8:	strne	r3, [sp, #4]
   174dc:	ldrd	r2, [sp, #8]
   174e0:	strd	r2, [r4, #16]
   174e4:	mov	r0, r6
   174e8:	add	r3, r7, #1
   174ec:	ldr	r2, [r4, #8]
   174f0:	ldr	r1, [sp, #4]
   174f4:	str	r1, [r2, r7, lsl #2]
   174f8:	add	r0, r7, r0
   174fc:	cmp	r3, r0
   17500:	bge	175a4 <__assert_fail@plt+0x60dc>
   17504:	mvn	r1, #0
   17508:	ldr	r2, [r4, #8]
   1750c:	str	r1, [r2, r3, lsl #2]
   17510:	add	r3, r3, #1
   17514:	cmp	r3, r0
   17518:	bne	17508 <__assert_fail@plt+0x6040>
   1751c:	mov	r7, r0
   17520:	cmp	r7, r5
   17524:	bge	17588 <__assert_fail@plt+0x60c0>
   17528:	sub	r2, r5, r7
   1752c:	ldrd	r0, [r4, #16]
   17530:	strd	r0, [sp, #8]
   17534:	ldr	r3, [r4, #64]	; 0x40
   17538:	cmp	r3, #0
   1753c:	bne	1744c <__assert_fail@plt+0x5f84>
   17540:	ldr	r1, [r4, #24]
   17544:	add	r3, r7, r1
   17548:	ldr	r1, [r4]
   1754c:	add	r1, r1, r3
   17550:	add	r3, r4, #16
   17554:	add	r0, sp, #4
   17558:	bl	13880 <__assert_fail@plt+0x23b8>
   1755c:	sub	r3, r0, #1
   17560:	cmn	r3, #3
   17564:	bhi	174b8 <__assert_fail@plt+0x5ff0>
   17568:	cmn	r0, #2
   1756c:	bne	174e8 <__assert_fail@plt+0x6020>
   17570:	ldr	r2, [r4, #36]	; 0x24
   17574:	ldr	r3, [r4, #48]	; 0x30
   17578:	cmp	r2, r3
   1757c:	bge	174b8 <__assert_fail@plt+0x5ff0>
   17580:	ldrd	r2, [sp, #8]
   17584:	strd	r2, [r4, #16]
   17588:	str	r7, [r4, #28]
   1758c:	str	r7, [r4, #32]
   17590:	add	sp, sp, #84	; 0x54
   17594:	ldrd	r4, [sp]
   17598:	ldrd	r6, [sp, #8]
   1759c:	add	sp, sp, #16
   175a0:	pop	{pc}		; (ldr pc, [sp], #4)
   175a4:	mov	r7, r3
   175a8:	b	17520 <__assert_fail@plt+0x6058>
   175ac:	ldr	r3, [r1, #4]
   175b0:	cmp	r3, #0
   175b4:	beq	17770 <__assert_fail@plt+0x62a8>
   175b8:	ldr	ip, [r2, #4]
   175bc:	cmp	ip, #0
   175c0:	beq	1776c <__assert_fail@plt+0x62a4>
   175c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   175c8:	strd	r6, [sp, #8]
   175cc:	str	r8, [sp, #16]
   175d0:	str	lr, [sp, #20]
   175d4:	mov	r6, r2
   175d8:	mov	r5, r1
   175dc:	mov	r7, r0
   175e0:	add	r3, r3, ip
   175e4:	ldr	r4, [r0]
   175e8:	ldr	r2, [r0, #4]
   175ec:	add	r2, r3, r2
   175f0:	cmp	r2, r4
   175f4:	bgt	1761c <__assert_fail@plt+0x6154>
   175f8:	ldr	r3, [r7, #4]
   175fc:	ldr	r4, [r5, #4]
   17600:	ldr	r2, [r6, #4]
   17604:	add	r1, r3, r4
   17608:	add	r1, r1, r2
   1760c:	sub	r4, r4, #1
   17610:	sub	r2, r2, #1
   17614:	sub	r3, r3, #1
   17618:	b	176a8 <__assert_fail@plt+0x61e0>
   1761c:	add	r4, r3, r4
   17620:	lsl	r1, r4, #2
   17624:	ldr	r0, [r0, #8]
   17628:	bl	24844 <__assert_fail@plt+0x1337c>
   1762c:	cmp	r0, #0
   17630:	beq	17778 <__assert_fail@plt+0x62b0>
   17634:	str	r0, [r7, #8]
   17638:	str	r4, [r7]
   1763c:	b	175f8 <__assert_fail@plt+0x6130>
   17640:	cmp	r3, #0
   17644:	blt	17680 <__assert_fail@plt+0x61b8>
   17648:	ldr	r8, [r7, #8]
   1764c:	add	lr, r8, r3, lsl #2
   17650:	ldr	r0, [r8, r3, lsl #2]
   17654:	cmp	ip, r0
   17658:	bge	17674 <__assert_fail@plt+0x61ac>
   1765c:	sub	r3, r3, #1
   17660:	cmn	r3, #1
   17664:	beq	17680 <__assert_fail@plt+0x61b8>
   17668:	ldr	r0, [lr, #-4]!
   1766c:	cmp	ip, r0
   17670:	blt	1765c <__assert_fail@plt+0x6194>
   17674:	ldr	r0, [r8, r3, lsl #2]
   17678:	cmp	ip, r0
   1767c:	beq	1768c <__assert_fail@plt+0x61c4>
   17680:	sub	r1, r1, #1
   17684:	ldr	r0, [r7, #8]
   17688:	str	ip, [r0, r1, lsl #2]
   1768c:	subs	r4, r4, #1
   17690:	bmi	176d0 <__assert_fail@plt+0x6208>
   17694:	subs	r2, r2, #1
   17698:	bpl	176a8 <__assert_fail@plt+0x61e0>
   1769c:	b	176d0 <__assert_fail@plt+0x6208>
   176a0:	subs	r4, r4, #1
   176a4:	bmi	176d0 <__assert_fail@plt+0x6208>
   176a8:	ldr	r0, [r5, #8]
   176ac:	ldr	ip, [r0, r4, lsl #2]
   176b0:	ldr	r0, [r6, #8]
   176b4:	ldr	r0, [r0, r2, lsl #2]
   176b8:	cmp	ip, r0
   176bc:	beq	17640 <__assert_fail@plt+0x6178>
   176c0:	cmp	ip, r0
   176c4:	bge	176a0 <__assert_fail@plt+0x61d8>
   176c8:	subs	r2, r2, #1
   176cc:	bpl	176a8 <__assert_fail@plt+0x61e0>
   176d0:	ldr	r3, [r7, #4]
   176d4:	sub	r0, r3, #1
   176d8:	ldr	r2, [r5, #4]
   176dc:	add	r2, r3, r2
   176e0:	ldr	ip, [r6, #4]
   176e4:	add	r2, r2, ip
   176e8:	sub	r4, r2, #1
   176ec:	sub	r2, r2, r1
   176f0:	add	r3, r3, r2
   176f4:	str	r3, [r7, #4]
   176f8:	cmp	r0, #0
   176fc:	cmpge	r2, #0
   17700:	bgt	17740 <__assert_fail@plt+0x6278>
   17704:	ldr	r0, [r7, #8]
   17708:	lsl	r2, r2, #2
   1770c:	add	r1, r0, r1, lsl #2
   17710:	bl	11204 <memcpy@plt>
   17714:	mov	r3, #0
   17718:	mov	r0, r3
   1771c:	ldrd	r4, [sp]
   17720:	ldrd	r6, [sp, #8]
   17724:	ldr	r8, [sp, #16]
   17728:	add	sp, sp, #20
   1772c:	pop	{pc}		; (ldr pc, [sp], #4)
   17730:	add	lr, r0, r2
   17734:	str	ip, [r3, lr, lsl #2]
   17738:	subs	r0, r0, #1
   1773c:	bmi	17704 <__assert_fail@plt+0x623c>
   17740:	ldr	r3, [r7, #8]
   17744:	ldr	lr, [r3, r4, lsl #2]
   17748:	ldr	ip, [r3, r0, lsl #2]
   1774c:	cmp	lr, ip
   17750:	ble	17730 <__assert_fail@plt+0x6268>
   17754:	sub	r4, r4, #1
   17758:	add	ip, r0, r2
   1775c:	str	lr, [r3, ip, lsl #2]
   17760:	subs	r2, r2, #1
   17764:	bne	17740 <__assert_fail@plt+0x6278>
   17768:	b	17704 <__assert_fail@plt+0x623c>
   1776c:	mov	r3, ip
   17770:	mov	r0, r3
   17774:	bx	lr
   17778:	mov	r3, #12
   1777c:	b	17718 <__assert_fail@plt+0x6250>
   17780:	ldr	r3, [r1, #4]
   17784:	str	r3, [r0, #4]
   17788:	cmp	r3, #0
   1778c:	ble	177f0 <__assert_fail@plt+0x6328>
   17790:	strd	r4, [sp, #-16]!
   17794:	str	r6, [sp, #8]
   17798:	str	lr, [sp, #12]
   1779c:	mov	r5, r1
   177a0:	mov	r4, r0
   177a4:	str	r3, [r0]
   177a8:	lsl	r0, r3, #2
   177ac:	bl	24808 <__assert_fail@plt+0x13340>
   177b0:	str	r0, [r4, #8]
   177b4:	cmp	r0, #0
   177b8:	moveq	r3, #0
   177bc:	streq	r3, [r4, #4]
   177c0:	streq	r3, [r4]
   177c4:	moveq	r0, #12
   177c8:	beq	177e0 <__assert_fail@plt+0x6318>
   177cc:	ldr	r2, [r5, #4]
   177d0:	lsl	r2, r2, #2
   177d4:	ldr	r1, [r5, #8]
   177d8:	bl	11204 <memcpy@plt>
   177dc:	mov	r0, #0
   177e0:	ldrd	r4, [sp]
   177e4:	ldr	r6, [sp, #8]
   177e8:	add	sp, sp, #12
   177ec:	pop	{pc}		; (ldr pc, [sp], #4)
   177f0:	mov	r3, #0
   177f4:	str	r3, [r0]
   177f8:	str	r3, [r0, #4]
   177fc:	str	r3, [r0, #8]
   17800:	mov	r0, r3
   17804:	bx	lr
   17808:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1780c:	strd	r6, [sp, #8]
   17810:	strd	r8, [sp, #16]
   17814:	str	sl, [sp, #24]
   17818:	str	lr, [sp, #28]
   1781c:	mov	r5, r0
   17820:	mov	r4, r2
   17824:	subs	r6, r1, #0
   17828:	beq	17844 <__assert_fail@plt+0x637c>
   1782c:	ldr	r0, [r6, #4]
   17830:	cmp	r2, #0
   17834:	cmpne	r0, #0
   17838:	bgt	17880 <__assert_fail@plt+0x63b8>
   1783c:	cmp	r0, #0
   17840:	bgt	1788c <__assert_fail@plt+0x63c4>
   17844:	cmp	r4, #0
   17848:	beq	17858 <__assert_fail@plt+0x6390>
   1784c:	ldr	r3, [r4, #4]
   17850:	cmp	r3, #0
   17854:	bgt	178c8 <__assert_fail@plt+0x6400>
   17858:	mov	r0, #0
   1785c:	str	r0, [r5]
   17860:	str	r0, [r5, #4]
   17864:	str	r0, [r5, #8]
   17868:	ldrd	r4, [sp]
   1786c:	ldrd	r6, [sp, #8]
   17870:	ldrd	r8, [sp, #16]
   17874:	ldr	sl, [sp, #24]
   17878:	add	sp, sp, #28
   1787c:	pop	{pc}		; (ldr pc, [sp], #4)
   17880:	ldr	r3, [r2, #4]
   17884:	cmp	r3, #0
   17888:	bgt	1789c <__assert_fail@plt+0x63d4>
   1788c:	mov	r1, r6
   17890:	mov	r0, r5
   17894:	bl	17780 <__assert_fail@plt+0x62b8>
   17898:	b	17868 <__assert_fail@plt+0x63a0>
   1789c:	add	r0, r0, r3
   178a0:	str	r0, [r5]
   178a4:	lsl	r0, r0, #2
   178a8:	bl	24808 <__assert_fail@plt+0x13340>
   178ac:	str	r0, [r5, #8]
   178b0:	cmp	r0, #0
   178b4:	beq	179a4 <__assert_fail@plt+0x64dc>
   178b8:	mov	r3, #0
   178bc:	mov	r8, r3
   178c0:	mov	r7, r3
   178c4:	b	178e8 <__assert_fail@plt+0x6420>
   178c8:	mov	r1, r4
   178cc:	mov	r0, r5
   178d0:	bl	17780 <__assert_fail@plt+0x62b8>
   178d4:	b	17868 <__assert_fail@plt+0x63a0>
   178d8:	add	r8, r8, #1
   178dc:	ldr	r2, [r5, #8]
   178e0:	str	r1, [r2, r3, lsl #2]
   178e4:	add	r3, r3, #1
   178e8:	mov	r9, r3
   178ec:	ldr	r2, [r6, #4]
   178f0:	cmp	r2, r7
   178f4:	ble	17960 <__assert_fail@plt+0x6498>
   178f8:	ldr	r1, [r4, #4]
   178fc:	cmp	r1, r8
   17900:	ble	17934 <__assert_fail@plt+0x646c>
   17904:	ldr	r2, [r6, #8]
   17908:	ldr	r2, [r2, r7, lsl #2]
   1790c:	ldr	r1, [r4, #8]
   17910:	ldr	r1, [r1, r8, lsl #2]
   17914:	cmp	r2, r1
   17918:	bgt	178d8 <__assert_fail@plt+0x6410>
   1791c:	cmp	r2, r1
   17920:	addeq	r8, r8, #1
   17924:	add	r7, r7, #1
   17928:	ldr	r1, [r5, #8]
   1792c:	str	r2, [r1, r3, lsl #2]
   17930:	b	178e4 <__assert_fail@plt+0x641c>
   17934:	ldr	r0, [r5, #8]
   17938:	sub	r2, r2, r7
   1793c:	ldr	r1, [r6, #8]
   17940:	lsl	r2, r2, #2
   17944:	add	r1, r1, r7, lsl #2
   17948:	add	r0, r0, r3, lsl #2
   1794c:	bl	11204 <memcpy@plt>
   17950:	ldr	r3, [r6, #4]
   17954:	sub	r7, r3, r7
   17958:	add	r9, r9, r7
   1795c:	b	1796c <__assert_fail@plt+0x64a4>
   17960:	ldr	r2, [r4, #4]
   17964:	cmp	r2, r8
   17968:	bgt	17978 <__assert_fail@plt+0x64b0>
   1796c:	str	r9, [r5, #4]
   17970:	mov	r0, #0
   17974:	b	17868 <__assert_fail@plt+0x63a0>
   17978:	ldr	r0, [r5, #8]
   1797c:	sub	r2, r2, r8
   17980:	ldr	r1, [r4, #8]
   17984:	lsl	r2, r2, #2
   17988:	add	r1, r1, r8, lsl #2
   1798c:	add	r0, r0, r3, lsl #2
   17990:	bl	11204 <memcpy@plt>
   17994:	ldr	r3, [r4, #4]
   17998:	sub	r8, r3, r8
   1799c:	add	r9, r9, r8
   179a0:	b	1796c <__assert_fail@plt+0x64a4>
   179a4:	mov	r0, #12
   179a8:	b	17868 <__assert_fail@plt+0x63a0>
   179ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   179b0:	strd	r6, [sp, #8]
   179b4:	strd	r8, [sp, #16]
   179b8:	strd	sl, [sp, #24]
   179bc:	str	lr, [sp, #32]
   179c0:	sub	sp, sp, #92	; 0x5c
   179c4:	mov	r5, r0
   179c8:	ldr	r4, [r0, #28]
   179cc:	ldr	r6, [r0, #36]	; 0x24
   179d0:	ldr	r3, [r0, #48]	; 0x30
   179d4:	cmp	r6, r3
   179d8:	movge	r6, r3
   179dc:	ldrb	r3, [r0, #74]	; 0x4a
   179e0:	cmp	r3, #0
   179e4:	bne	179f4 <__assert_fail@plt+0x652c>
   179e8:	ldr	r3, [r0, #64]	; 0x40
   179ec:	cmp	r3, #0
   179f0:	beq	17a28 <__assert_fail@plt+0x6560>
   179f4:	ldr	r7, [r5, #32]
   179f8:	cmp	r4, r6
   179fc:	blt	17b54 <__assert_fail@plt+0x668c>
   17a00:	str	r4, [r5, #28]
   17a04:	str	r7, [r5, #32]
   17a08:	mov	r0, #0
   17a0c:	add	sp, sp, #92	; 0x5c
   17a10:	ldrd	r4, [sp]
   17a14:	ldrd	r6, [sp, #8]
   17a18:	ldrd	r8, [sp, #16]
   17a1c:	ldrd	sl, [sp, #24]
   17a20:	add	sp, sp, #32
   17a24:	pop	{pc}		; (ldr pc, [sp], #4)
   17a28:	ldrb	r3, [r0, #76]	; 0x4c
   17a2c:	cmp	r3, #0
   17a30:	bne	179f4 <__assert_fail@plt+0x652c>
   17a34:	cmp	r4, r6
   17a38:	bge	17cb4 <__assert_fail@plt+0x67ec>
   17a3c:	add	r3, r0, #16
   17a40:	str	r3, [sp, #4]
   17a44:	mvn	r7, #0
   17a48:	b	17b00 <__assert_fail@plt+0x6638>
   17a4c:	ldr	r0, [sp, #4]
   17a50:	ldrd	r2, [r0]
   17a54:	strd	r2, [sp, #80]	; 0x50
   17a58:	mov	r9, r4
   17a5c:	add	r1, r8, r4
   17a60:	mov	r3, r0
   17a64:	sub	r2, r6, r4
   17a68:	add	r1, sl, r1
   17a6c:	add	r0, sp, #12
   17a70:	bl	13880 <__assert_fail@plt+0x23b8>
   17a74:	mov	r8, r0
   17a78:	sub	r3, r0, #1
   17a7c:	cmn	r3, #4
   17a80:	bhi	17c50 <__assert_fail@plt+0x6788>
   17a84:	ldr	sl, [sp, #12]
   17a88:	mov	r0, sl
   17a8c:	bl	114a4 <towupper@plt>
   17a90:	mov	fp, r0
   17a94:	cmp	sl, r0
   17a98:	beq	17c2c <__assert_fail@plt+0x6764>
   17a9c:	add	r2, sp, #80	; 0x50
   17aa0:	mov	r1, r0
   17aa4:	add	r0, sp, #16
   17aa8:	bl	11174 <wcrtomb@plt>
   17aac:	cmp	r8, r0
   17ab0:	bne	17b50 <__assert_fail@plt+0x6688>
   17ab4:	ldr	r0, [r5, #4]
   17ab8:	mov	r2, r8
   17abc:	add	r1, sp, #16
   17ac0:	add	r0, r0, r4
   17ac4:	bl	11204 <memcpy@plt>
   17ac8:	add	r4, r4, #1
   17acc:	ldr	r3, [r5, #8]
   17ad0:	str	fp, [r3, r9, lsl #2]
   17ad4:	add	r9, r9, r8
   17ad8:	cmp	r4, r9
   17adc:	bge	17af8 <__assert_fail@plt+0x6630>
   17ae0:	ldr	r3, [r5, #8]
   17ae4:	str	r7, [r3, r4, lsl #2]
   17ae8:	add	r4, r4, #1
   17aec:	cmp	r9, r4
   17af0:	bne	17ae0 <__assert_fail@plt+0x6618>
   17af4:	mov	r4, r9
   17af8:	cmp	r6, r4
   17afc:	ble	17cb4 <__assert_fail@plt+0x67ec>
   17b00:	ldr	sl, [r5]
   17b04:	ldr	r8, [r5, #24]
   17b08:	add	r3, sl, r8
   17b0c:	ldrb	fp, [r3, r4]
   17b10:	bics	r3, fp, #127	; 0x7f
   17b14:	bne	17a4c <__assert_fail@plt+0x6584>
   17b18:	ldr	r0, [sp, #4]
   17b1c:	bl	11234 <mbsinit@plt>
   17b20:	cmp	r0, #0
   17b24:	beq	17a4c <__assert_fail@plt+0x6584>
   17b28:	mov	r0, fp
   17b2c:	bl	114a4 <towupper@plt>
   17b30:	bics	r3, r0, #127	; 0x7f
   17b34:	bne	17a4c <__assert_fail@plt+0x6584>
   17b38:	ldr	r3, [r5, #4]
   17b3c:	strb	r0, [r3, r4]
   17b40:	ldr	r3, [r5, #8]
   17b44:	str	r0, [r3, r4, lsl #2]
   17b48:	add	r4, r4, #1
   17b4c:	b	17af8 <__assert_fail@plt+0x6630>
   17b50:	mov	r7, r4
   17b54:	sub	r2, r6, r4
   17b58:	ldrd	r0, [r5, #16]
   17b5c:	strd	r0, [sp, #80]	; 0x50
   17b60:	ldr	r3, [r5, #64]	; 0x40
   17b64:	cmp	r3, #0
   17b68:	bne	17cc4 <__assert_fail@plt+0x67fc>
   17b6c:	ldr	r3, [r5, #24]
   17b70:	add	r3, r7, r3
   17b74:	ldr	r1, [r5]
   17b78:	add	r3, r1, r3
   17b7c:	str	r3, [sp, #4]
   17b80:	add	r3, r5, #16
   17b84:	ldr	r1, [sp, #4]
   17b88:	add	r0, sp, #12
   17b8c:	bl	13880 <__assert_fail@plt+0x23b8>
   17b90:	mov	r8, r0
   17b94:	sub	fp, r0, #1
   17b98:	cmn	fp, #4
   17b9c:	bhi	17eac <__assert_fail@plt+0x69e4>
   17ba0:	ldr	sl, [sp, #12]
   17ba4:	mov	r0, sl
   17ba8:	bl	114a4 <towupper@plt>
   17bac:	mov	r9, r0
   17bb0:	cmp	sl, r0
   17bb4:	beq	17e6c <__assert_fail@plt+0x69a4>
   17bb8:	add	r2, sp, #80	; 0x50
   17bbc:	mov	r1, r0
   17bc0:	add	r0, sp, #16
   17bc4:	bl	11174 <wcrtomb@plt>
   17bc8:	mov	sl, r0
   17bcc:	cmp	r8, r0
   17bd0:	bne	17d24 <__assert_fail@plt+0x685c>
   17bd4:	ldr	r0, [r5, #4]
   17bd8:	mov	r2, sl
   17bdc:	add	r1, sp, #16
   17be0:	add	r0, r0, r4
   17be4:	bl	11204 <memcpy@plt>
   17be8:	ldrb	r3, [r5, #76]	; 0x4c
   17bec:	cmp	r3, #0
   17bf0:	bne	17e84 <__assert_fail@plt+0x69bc>
   17bf4:	add	r7, r7, r8
   17bf8:	add	r3, r4, #1
   17bfc:	ldr	r2, [r5, #8]
   17c00:	str	r9, [r2, r4, lsl #2]
   17c04:	add	r4, r4, r8
   17c08:	cmp	r3, r4
   17c0c:	bge	17f28 <__assert_fail@plt+0x6a60>
   17c10:	mvn	r1, #0
   17c14:	ldr	r2, [r5, #8]
   17c18:	str	r1, [r2, r3, lsl #2]
   17c1c:	add	r3, r3, #1
   17c20:	cmp	r4, r3
   17c24:	bne	17c14 <__assert_fail@plt+0x674c>
   17c28:	b	179f8 <__assert_fail@plt+0x6530>
   17c2c:	ldr	r0, [r5, #4]
   17c30:	ldr	r3, [r5, #24]
   17c34:	add	r3, r4, r3
   17c38:	ldr	r1, [r5]
   17c3c:	mov	r2, r8
   17c40:	add	r1, r1, r3
   17c44:	add	r0, r0, r4
   17c48:	bl	11204 <memcpy@plt>
   17c4c:	b	17ac8 <__assert_fail@plt+0x6600>
   17c50:	cmn	r3, #3
   17c54:	bhi	17c80 <__assert_fail@plt+0x67b8>
   17c58:	ldr	r2, [r5, #36]	; 0x24
   17c5c:	ldr	r3, [r5, #48]	; 0x30
   17c60:	cmp	r2, r3
   17c64:	blt	17cac <__assert_fail@plt+0x67e4>
   17c68:	ldr	r3, [r5, #4]
   17c6c:	strb	fp, [r3, r4]
   17c70:	add	r4, r4, #1
   17c74:	ldr	r3, [r5, #8]
   17c78:	str	fp, [r3, r9, lsl #2]
   17c7c:	b	17af8 <__assert_fail@plt+0x6630>
   17c80:	ldr	r3, [r5, #4]
   17c84:	strb	fp, [r3, r4]
   17c88:	add	r4, r4, #1
   17c8c:	ldr	r3, [r5, #8]
   17c90:	str	fp, [r3, r9, lsl #2]
   17c94:	cmn	r0, #1
   17c98:	bne	17af8 <__assert_fail@plt+0x6630>
   17c9c:	ldrd	r2, [sp, #80]	; 0x50
   17ca0:	ldr	r1, [sp, #4]
   17ca4:	strd	r2, [r1]
   17ca8:	b	17af8 <__assert_fail@plt+0x6630>
   17cac:	ldrd	r2, [sp, #80]	; 0x50
   17cb0:	strd	r2, [r5, #16]
   17cb4:	str	r4, [r5, #28]
   17cb8:	str	r4, [r5, #32]
   17cbc:	mov	r0, #0
   17cc0:	b	17a0c <__assert_fail@plt+0x6544>
   17cc4:	ldr	lr, [r5, #80]	; 0x50
   17cc8:	cmp	r2, #0
   17ccc:	cmpgt	lr, #0
   17cd0:	ble	17d18 <__assert_fail@plt+0x6850>
   17cd4:	ldr	r8, [r5]
   17cd8:	ldr	ip, [r5, #24]
   17cdc:	add	ip, r7, ip
   17ce0:	add	r1, r8, ip
   17ce4:	add	r0, sp, #16
   17ce8:	cmp	lr, r2
   17cec:	movge	lr, r2
   17cf0:	mov	r8, r1
   17cf4:	ldrb	ip, [r1], #1
   17cf8:	ldrb	ip, [r3, ip]
   17cfc:	strb	ip, [r0], #1
   17d00:	sub	ip, r1, r8
   17d04:	cmp	lr, ip
   17d08:	bgt	17cf4 <__assert_fail@plt+0x682c>
   17d0c:	add	r3, sp, #16
   17d10:	str	r3, [sp, #4]
   17d14:	b	17b80 <__assert_fail@plt+0x66b8>
   17d18:	add	r3, sp, #16
   17d1c:	str	r3, [sp, #4]
   17d20:	b	17b80 <__assert_fail@plt+0x66b8>
   17d24:	cmn	r0, #1
   17d28:	beq	17e54 <__assert_fail@plt+0x698c>
   17d2c:	mov	r6, r4
   17d30:	add	r3, r4, r0
   17d34:	str	r3, [sp, #4]
   17d38:	ldr	r0, [r5, #36]	; 0x24
   17d3c:	cmp	r3, r0
   17d40:	bls	17d50 <__assert_fail@plt+0x6888>
   17d44:	ldrd	r2, [sp, #80]	; 0x50
   17d48:	strd	r2, [r5, #16]
   17d4c:	b	17a00 <__assert_fail@plt+0x6538>
   17d50:	ldr	r3, [r5, #12]
   17d54:	cmp	r3, #0
   17d58:	beq	17e38 <__assert_fail@plt+0x6970>
   17d5c:	ldrb	r3, [r5, #76]	; 0x4c
   17d60:	cmp	r3, #0
   17d64:	bne	17d8c <__assert_fail@plt+0x68c4>
   17d68:	cmp	r6, #0
   17d6c:	beq	17d84 <__assert_fail@plt+0x68bc>
   17d70:	ldr	r2, [r5, #12]
   17d74:	str	r3, [r2, r3, lsl #2]
   17d78:	add	r3, r3, #1
   17d7c:	cmp	r6, r3
   17d80:	bne	17d70 <__assert_fail@plt+0x68a8>
   17d84:	mov	r3, #1
   17d88:	strb	r3, [r5, #76]	; 0x4c
   17d8c:	ldr	r0, [r5, #4]
   17d90:	mov	r2, sl
   17d94:	add	r1, sp, #16
   17d98:	add	r0, r0, r6
   17d9c:	bl	11204 <memcpy@plt>
   17da0:	lsl	r3, r6, #2
   17da4:	ldr	r2, [r5, #8]
   17da8:	str	r9, [r2, r6, lsl #2]
   17dac:	ldr	r2, [r5, #12]
   17db0:	str	r7, [r2, r6, lsl #2]
   17db4:	cmp	sl, #1
   17db8:	bls	17df8 <__assert_fail@plt+0x6930>
   17dbc:	add	r3, r3, #4
   17dc0:	mov	r2, #1
   17dc4:	mvn	r0, #0
   17dc8:	cmp	r2, r8
   17dcc:	movcc	r1, r2
   17dd0:	movcs	r1, fp
   17dd4:	ldr	ip, [r5, #12]
   17dd8:	add	r1, r7, r1
   17ddc:	str	r1, [ip, r3]
   17de0:	ldr	r1, [r5, #8]
   17de4:	str	r0, [r1, r3]
   17de8:	add	r2, r2, #1
   17dec:	add	r3, r3, #4
   17df0:	cmp	r2, sl
   17df4:	bne	17dc8 <__assert_fail@plt+0x6900>
   17df8:	sub	sl, sl, r8
   17dfc:	ldr	r6, [r5, #48]	; 0x30
   17e00:	add	r6, sl, r6
   17e04:	str	r6, [r5, #48]	; 0x30
   17e08:	ldr	r3, [r5, #52]	; 0x34
   17e0c:	cmp	r3, r7
   17e10:	ble	17e20 <__assert_fail@plt+0x6958>
   17e14:	ldr	r3, [r5, #56]	; 0x38
   17e18:	add	sl, r3, sl
   17e1c:	str	sl, [r5, #56]	; 0x38
   17e20:	ldr	r3, [r5, #36]	; 0x24
   17e24:	cmp	r6, r3
   17e28:	movge	r6, r3
   17e2c:	ldr	r4, [sp, #4]
   17e30:	add	r7, r7, r8
   17e34:	b	179f8 <__assert_fail@plt+0x6530>
   17e38:	lsl	r0, r0, #2
   17e3c:	bl	24808 <__assert_fail@plt+0x13340>
   17e40:	str	r0, [r5, #12]
   17e44:	cmp	r0, #0
   17e48:	moveq	r0, #12
   17e4c:	bne	17d5c <__assert_fail@plt+0x6894>
   17e50:	b	17a0c <__assert_fail@plt+0x6544>
   17e54:	ldr	r0, [r5, #4]
   17e58:	mov	r2, r8
   17e5c:	ldr	r1, [sp, #4]
   17e60:	add	r0, r0, r4
   17e64:	bl	11204 <memcpy@plt>
   17e68:	b	17be8 <__assert_fail@plt+0x6720>
   17e6c:	ldr	r0, [r5, #4]
   17e70:	mov	r2, r8
   17e74:	ldr	r1, [sp, #4]
   17e78:	add	r0, r0, r4
   17e7c:	bl	11204 <memcpy@plt>
   17e80:	b	17be8 <__assert_fail@plt+0x6720>
   17e84:	lsl	r2, r4, #2
   17e88:	mov	r3, r7
   17e8c:	add	r0, r8, r7
   17e90:	ldr	r1, [r5, #12]
   17e94:	str	r3, [r1, r2]
   17e98:	add	r2, r2, #4
   17e9c:	add	r3, r3, #1
   17ea0:	cmp	r3, r0
   17ea4:	bne	17e90 <__assert_fail@plt+0x69c8>
   17ea8:	b	17bf4 <__assert_fail@plt+0x672c>
   17eac:	cmn	fp, #3
   17eb0:	bhi	17ec4 <__assert_fail@plt+0x69fc>
   17eb4:	ldr	r2, [r5, #36]	; 0x24
   17eb8:	ldr	r3, [r5, #48]	; 0x30
   17ebc:	cmp	r2, r3
   17ec0:	blt	17f1c <__assert_fail@plt+0x6a54>
   17ec4:	ldr	r3, [r5]
   17ec8:	ldr	r2, [r5, #24]
   17ecc:	add	r3, r3, r7
   17ed0:	ldrb	r3, [r3, r2]
   17ed4:	ldr	r2, [r5, #64]	; 0x40
   17ed8:	cmp	r2, #0
   17edc:	ldrbne	r3, [r2, r3]
   17ee0:	mov	r1, r4
   17ee4:	ldr	r2, [r5, #4]
   17ee8:	strb	r3, [r2, r4]
   17eec:	ldrb	r2, [r5, #76]	; 0x4c
   17ef0:	cmp	r2, #0
   17ef4:	ldrne	r2, [r5, #12]
   17ef8:	strne	r7, [r2, r4, lsl #2]
   17efc:	add	r7, r7, #1
   17f00:	add	r4, r4, #1
   17f04:	ldr	r2, [r5, #8]
   17f08:	str	r3, [r2, r1, lsl #2]
   17f0c:	cmn	r8, #1
   17f10:	ldrdeq	r2, [sp, #80]	; 0x50
   17f14:	strdeq	r2, [r5, #16]
   17f18:	b	179f8 <__assert_fail@plt+0x6530>
   17f1c:	ldrd	r2, [sp, #80]	; 0x50
   17f20:	strd	r2, [r5, #16]
   17f24:	b	17a00 <__assert_fail@plt+0x6538>
   17f28:	mov	r4, r3
   17f2c:	b	179f8 <__assert_fail@plt+0x6530>
   17f30:	strd	r4, [sp, #-16]!
   17f34:	str	r6, [sp, #8]
   17f38:	str	lr, [sp, #12]
   17f3c:	mov	r5, r0
   17f40:	ldr	r6, [r0, #36]	; 0x24
   17f44:	ldr	r3, [r0, #48]	; 0x30
   17f48:	cmp	r6, r3
   17f4c:	movge	r6, r3
   17f50:	ldr	r4, [r0, #28]
   17f54:	cmp	r6, r4
   17f58:	ble	17fb0 <__assert_fail@plt+0x6ae8>
   17f5c:	bl	11348 <__ctype_toupper_loc@plt>
   17f60:	ldr	r3, [r5]
   17f64:	ldr	r2, [r5, #24]
   17f68:	add	r3, r3, r4
   17f6c:	ldrb	r3, [r3, r2]
   17f70:	ldr	r2, [r5, #64]	; 0x40
   17f74:	cmp	r2, #0
   17f78:	ldrbne	r3, [r2, r3]
   17f7c:	ldr	r2, [r5, #4]
   17f80:	ldr	r1, [r0]
   17f84:	ldr	r3, [r1, r3, lsl #2]
   17f88:	strb	r3, [r2, r4]
   17f8c:	add	r4, r4, #1
   17f90:	cmp	r6, r4
   17f94:	bne	17f60 <__assert_fail@plt+0x6a98>
   17f98:	str	r6, [r5, #28]
   17f9c:	str	r6, [r5, #32]
   17fa0:	ldrd	r4, [sp]
   17fa4:	ldr	r6, [sp, #8]
   17fa8:	add	sp, sp, #12
   17fac:	pop	{pc}		; (ldr pc, [sp], #4)
   17fb0:	mov	r6, r4
   17fb4:	b	17f98 <__assert_fail@plt+0x6ad0>
   17fb8:	strd	r4, [sp, #-16]!
   17fbc:	str	r6, [sp, #8]
   17fc0:	str	lr, [sp, #12]
   17fc4:	ldr	r3, [r0, #36]	; 0x24
   17fc8:	cmn	r3, #-536870910	; 0xe0000002
   17fcc:	bhi	18094 <__assert_fail@plt+0x6bcc>
   17fd0:	mov	r4, r0
   17fd4:	lsl	r3, r3, #1
   17fd8:	ldr	r2, [r0, #48]	; 0x30
   17fdc:	cmp	r3, r2
   17fe0:	movge	r3, r2
   17fe4:	cmp	r3, r1
   17fe8:	movge	r1, r3
   17fec:	bl	16d48 <__assert_fail@plt+0x5880>
   17ff0:	subs	r5, r0, #0
   17ff4:	bne	18044 <__assert_fail@plt+0x6b7c>
   17ff8:	ldr	r0, [r4, #100]	; 0x64
   17ffc:	cmp	r0, #0
   18000:	beq	18020 <__assert_fail@plt+0x6b58>
   18004:	ldr	r1, [r4, #36]	; 0x24
   18008:	add	r1, r1, #1
   1800c:	lsl	r1, r1, #2
   18010:	bl	24844 <__assert_fail@plt+0x1337c>
   18014:	cmp	r0, #0
   18018:	beq	1809c <__assert_fail@plt+0x6bd4>
   1801c:	str	r0, [r4, #100]	; 0x64
   18020:	ldrb	r3, [r4, #72]	; 0x48
   18024:	cmp	r3, #0
   18028:	beq	18064 <__assert_fail@plt+0x6b9c>
   1802c:	ldr	r3, [r4, #80]	; 0x50
   18030:	cmp	r3, #1
   18034:	ble	18058 <__assert_fail@plt+0x6b90>
   18038:	mov	r0, r4
   1803c:	bl	179ac <__assert_fail@plt+0x64e4>
   18040:	mov	r5, r0
   18044:	mov	r0, r5
   18048:	ldrd	r4, [sp]
   1804c:	ldr	r6, [sp, #8]
   18050:	add	sp, sp, #12
   18054:	pop	{pc}		; (ldr pc, [sp], #4)
   18058:	mov	r0, r4
   1805c:	bl	17f30 <__assert_fail@plt+0x6a68>
   18060:	b	18044 <__assert_fail@plt+0x6b7c>
   18064:	ldr	r3, [r4, #80]	; 0x50
   18068:	cmp	r3, #1
   1806c:	bgt	18088 <__assert_fail@plt+0x6bc0>
   18070:	ldr	r3, [r4, #64]	; 0x40
   18074:	cmp	r3, #0
   18078:	beq	18044 <__assert_fail@plt+0x6b7c>
   1807c:	mov	r0, r4
   18080:	bl	160d0 <__assert_fail@plt+0x4c08>
   18084:	b	18044 <__assert_fail@plt+0x6b7c>
   18088:	mov	r0, r4
   1808c:	bl	17414 <__assert_fail@plt+0x5f4c>
   18090:	b	18044 <__assert_fail@plt+0x6b7c>
   18094:	mov	r5, #12
   18098:	b	18044 <__assert_fail@plt+0x6b7c>
   1809c:	mov	r5, #12
   180a0:	b	18044 <__assert_fail@plt+0x6b7c>
   180a4:	ldr	r3, [r1, #40]	; 0x28
   180a8:	ldr	ip, [r1, #56]	; 0x38
   180ac:	cmp	ip, r3
   180b0:	ble	18348 <__assert_fail@plt+0x6e80>
   180b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   180b8:	strd	r6, [sp, #8]
   180bc:	str	r8, [sp, #16]
   180c0:	str	lr, [sp, #20]
   180c4:	sub	sp, sp, #8
   180c8:	ldr	ip, [r1, #4]
   180cc:	ldrb	r6, [ip, r3]
   180d0:	strb	r6, [r0]
   180d4:	ldrb	r3, [r0, #6]
   180d8:	and	r3, r3, #191	; 0xbf
   180dc:	bfc	r3, #5, #1
   180e0:	strb	r3, [r0, #6]
   180e4:	ldr	r3, [r1, #80]	; 0x50
   180e8:	cmp	r3, #1
   180ec:	ble	18110 <__assert_fail@plt+0x6c48>
   180f0:	ldr	ip, [r1, #40]	; 0x28
   180f4:	ldr	lr, [r1, #28]
   180f8:	cmp	ip, lr
   180fc:	beq	18110 <__assert_fail@plt+0x6c48>
   18100:	ldr	lr, [r1, #8]
   18104:	ldr	ip, [lr, ip, lsl #2]
   18108:	cmn	ip, #1
   1810c:	beq	18358 <__assert_fail@plt+0x6e90>
   18110:	mov	r7, r2
   18114:	mov	r4, r1
   18118:	mov	r5, r0
   1811c:	cmp	r6, #92	; 0x5c
   18120:	beq	18374 <__assert_fail@plt+0x6eac>
   18124:	mov	r3, #1
   18128:	strb	r3, [r0, #4]
   1812c:	ldr	r3, [r1, #80]	; 0x50
   18130:	cmp	r3, #1
   18134:	ble	18858 <__assert_fail@plt+0x7390>
   18138:	ldr	r1, [r1, #40]	; 0x28
   1813c:	mov	r0, r4
   18140:	bl	160b4 <__assert_fail@plt+0x4bec>
   18144:	mov	r8, r0
   18148:	bl	113cc <iswalnum@plt>
   1814c:	adds	r0, r0, #0
   18150:	movne	r0, #1
   18154:	cmp	r8, #95	; 0x5f
   18158:	orreq	r0, r0, #1
   1815c:	ldrb	r3, [r5, #6]
   18160:	bfi	r3, r0, #6, #1
   18164:	strb	r3, [r5, #6]
   18168:	sub	r3, r6, #10
   1816c:	cmp	r3, #115	; 0x73
   18170:	ldrls	pc, [pc, r3, lsl #2]
   18174:	b	18a70 <__assert_fail@plt+0x75a8>
   18178:	andeq	r8, r1, r4, lsl #17
   1817c:	andeq	r8, r1, r0, ror sl
   18180:	andeq	r8, r1, r0, ror sl
   18184:	andeq	r8, r1, r0, ror sl
   18188:	andeq	r8, r1, r0, ror sl
   1818c:	andeq	r8, r1, r0, ror sl
   18190:	andeq	r8, r1, r0, ror sl
   18194:	andeq	r8, r1, r0, ror sl
   18198:	andeq	r8, r1, r0, ror sl
   1819c:	andeq	r8, r1, r0, ror sl
   181a0:	andeq	r8, r1, r0, ror sl
   181a4:	andeq	r8, r1, r0, ror sl
   181a8:	andeq	r8, r1, r0, ror sl
   181ac:	andeq	r8, r1, r0, ror sl
   181b0:	andeq	r8, r1, r0, ror sl
   181b4:	andeq	r8, r1, r0, ror sl
   181b8:	andeq	r8, r1, r0, ror sl
   181bc:	andeq	r8, r1, r0, ror sl
   181c0:	andeq	r8, r1, r0, ror sl
   181c4:	andeq	r8, r1, r0, ror sl
   181c8:	andeq	r8, r1, r0, ror sl
   181cc:	andeq	r8, r1, r0, ror sl
   181d0:	andeq	r8, r1, r0, ror sl
   181d4:	andeq	r8, r1, r0, ror sl
   181d8:	andeq	r8, r1, r0, ror sl
   181dc:	andeq	r8, r1, r0, ror sl
   181e0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   181e4:	andeq	r8, r1, r0, ror sl
   181e8:	andeq	r8, r1, r0, ror sl
   181ec:	andeq	r8, r1, r0, ror sl
   181f0:	andeq	r8, r1, r4, asr #18
   181f4:	andeq	r8, r1, r0, ror #18
   181f8:			; <UNDEFINED> instruction: 0x000188bc
   181fc:	andeq	r8, r1, ip, asr #17
   18200:	andeq	r8, r1, r0, ror sl
   18204:	andeq	r8, r1, r0, ror sl
   18208:	andeq	r8, r1, ip, lsl #19
   1820c:	andeq	r8, r1, r0, ror sl
   18210:	andeq	r8, r1, r0, ror sl
   18214:	andeq	r8, r1, r0, ror sl
   18218:	andeq	r8, r1, r0, ror sl
   1821c:	andeq	r8, r1, r0, ror sl
   18220:	andeq	r8, r1, r0, ror sl
   18224:	andeq	r8, r1, r0, ror sl
   18228:	andeq	r8, r1, r0, ror sl
   1822c:	andeq	r8, r1, r0, ror sl
   18230:	andeq	r8, r1, r0, ror sl
   18234:	andeq	r8, r1, r0, ror sl
   18238:	andeq	r8, r1, r0, ror sl
   1823c:	andeq	r8, r1, r0, ror sl
   18240:	andeq	r8, r1, r0, ror sl
   18244:	andeq	r8, r1, r0, ror sl
   18248:	andeq	r8, r1, r0, ror sl
   1824c:	andeq	r8, r1, ip, ror #17
   18250:	andeq	r8, r1, r0, ror sl
   18254:	andeq	r8, r1, r0, ror sl
   18258:	andeq	r8, r1, r0, ror sl
   1825c:	andeq	r8, r1, r0, ror sl
   18260:	andeq	r8, r1, r0, ror sl
   18264:	andeq	r8, r1, r0, ror sl
   18268:	andeq	r8, r1, r0, ror sl
   1826c:	andeq	r8, r1, r0, ror sl
   18270:	andeq	r8, r1, r0, ror sl
   18274:	andeq	r8, r1, r0, ror sl
   18278:	andeq	r8, r1, r0, ror sl
   1827c:	andeq	r8, r1, r0, ror sl
   18280:	andeq	r8, r1, r0, ror sl
   18284:	andeq	r8, r1, r0, ror sl
   18288:	andeq	r8, r1, r0, ror sl
   1828c:	andeq	r8, r1, r0, ror sl
   18290:	andeq	r8, r1, r0, ror sl
   18294:	andeq	r8, r1, r0, ror sl
   18298:	andeq	r8, r1, r0, ror sl
   1829c:	andeq	r8, r1, r0, ror sl
   182a0:	andeq	r8, r1, r0, ror sl
   182a4:	andeq	r8, r1, r0, ror sl
   182a8:	andeq	r8, r1, r0, ror sl
   182ac:	andeq	r8, r1, r0, ror sl
   182b0:	andeq	r8, r1, r0, ror sl
   182b4:	andeq	r8, r1, r0, ror sl
   182b8:	andeq	r8, r1, r0, ror sl
   182bc:	andeq	r8, r1, ip, ror r9
   182c0:	andeq	r8, r1, r0, ror sl
   182c4:	andeq	r8, r1, r0, ror sl
   182c8:	muleq	r1, ip, r9
   182cc:	andeq	r8, r1, r0, ror sl
   182d0:	andeq	r8, r1, r0, ror sl
   182d4:	andeq	r8, r1, r0, ror sl
   182d8:	andeq	r8, r1, r0, ror sl
   182dc:	andeq	r8, r1, r0, ror sl
   182e0:	andeq	r8, r1, r0, ror sl
   182e4:	andeq	r8, r1, r0, ror sl
   182e8:	andeq	r8, r1, r0, ror sl
   182ec:	andeq	r8, r1, r0, ror sl
   182f0:	andeq	r8, r1, r0, ror sl
   182f4:	andeq	r8, r1, r0, ror sl
   182f8:	andeq	r8, r1, r0, ror sl
   182fc:	andeq	r8, r1, r0, ror sl
   18300:	andeq	r8, r1, r0, ror sl
   18304:	andeq	r8, r1, r0, ror sl
   18308:	andeq	r8, r1, r0, ror sl
   1830c:	andeq	r8, r1, r0, ror sl
   18310:	andeq	r8, r1, r0, ror sl
   18314:	andeq	r8, r1, r0, ror sl
   18318:	andeq	r8, r1, r0, ror sl
   1831c:	andeq	r8, r1, r0, ror sl
   18320:	andeq	r8, r1, r0, ror sl
   18324:	andeq	r8, r1, r0, ror sl
   18328:	andeq	r8, r1, r0, ror sl
   1832c:	andeq	r8, r1, r0, ror sl
   18330:	andeq	r8, r1, r0, ror sl
   18334:	andeq	r8, r1, r0, ror sl
   18338:	andeq	r8, r1, r0, ror sl
   1833c:	andeq	r8, r1, ip, lsl #18
   18340:	andeq	r8, r1, r0, lsr #17
   18344:	andeq	r8, r1, r8, lsr #18
   18348:	mov	r3, #2
   1834c:	strb	r3, [r0, #4]
   18350:	mov	r0, #0
   18354:	bx	lr
   18358:	mov	r3, #1
   1835c:	strb	r3, [r0, #4]
   18360:	ldrb	r2, [r0, #6]
   18364:	orr	r2, r2, #32
   18368:	strb	r2, [r0, #6]
   1836c:	mov	r0, r3
   18370:	b	18394 <__assert_fail@plt+0x6ecc>
   18374:	ldr	r1, [r1, #40]	; 0x28
   18378:	add	r2, r1, #1
   1837c:	ldr	r0, [r4, #48]	; 0x30
   18380:	cmp	r2, r0
   18384:	blt	183ac <__assert_fail@plt+0x6ee4>
   18388:	mov	r3, #36	; 0x24
   1838c:	strb	r3, [r5, #4]
   18390:	mov	r0, #1
   18394:	add	sp, sp, #8
   18398:	ldrd	r4, [sp]
   1839c:	ldrd	r6, [sp, #8]
   183a0:	ldr	r8, [sp, #16]
   183a4:	add	sp, sp, #20
   183a8:	pop	{pc}		; (ldr pc, [sp], #4)
   183ac:	ldrb	r0, [r4, #75]	; 0x4b
   183b0:	cmp	r0, #0
   183b4:	bne	18578 <__assert_fail@plt+0x70b0>
   183b8:	ldr	r3, [r4, #4]
   183bc:	ldrb	r6, [r3, r2]
   183c0:	strb	r6, [r5]
   183c4:	mov	r3, #1
   183c8:	strb	r3, [r5, #4]
   183cc:	ldr	r3, [r4, #80]	; 0x50
   183d0:	cmp	r3, #1
   183d4:	ble	185f4 <__assert_fail@plt+0x712c>
   183d8:	ldr	r1, [r4, #40]	; 0x28
   183dc:	add	r1, r1, #1
   183e0:	mov	r0, r4
   183e4:	bl	160b4 <__assert_fail@plt+0x4bec>
   183e8:	mov	r4, r0
   183ec:	bl	113cc <iswalnum@plt>
   183f0:	adds	r0, r0, #0
   183f4:	movne	r0, #1
   183f8:	cmp	r4, #95	; 0x5f
   183fc:	orreq	r0, r0, #1
   18400:	ldrb	r3, [r5, #6]
   18404:	bfi	r3, r0, #6, #1
   18408:	strb	r3, [r5, #6]
   1840c:	sub	r3, r6, #39	; 0x27
   18410:	cmp	r3, #86	; 0x56
   18414:	ldrls	pc, [pc, r3, lsl #2]
   18418:	b	18a68 <__assert_fail@plt+0x75a0>
   1841c:	andeq	r8, r1, r4, lsl #15
   18420:	andeq	r8, r1, r8, lsr #15
   18424:	andeq	r8, r1, r4, asr #15
   18428:	andeq	r8, r1, r8, ror #20
   1842c:	andeq	r8, r1, r0, ror #15
   18430:	andeq	r8, r1, r8, ror #20
   18434:	andeq	r8, r1, r8, ror #20
   18438:	andeq	r8, r1, r8, ror #20
   1843c:	andeq	r8, r1, r8, ror #20
   18440:	andeq	r8, r1, r8, ror #20
   18444:	andeq	r8, r1, ip, lsr r6
   18448:	andeq	r8, r1, ip, lsr r6
   1844c:	andeq	r8, r1, ip, lsr r6
   18450:	andeq	r8, r1, ip, lsr r6
   18454:	andeq	r8, r1, ip, lsr r6
   18458:	andeq	r8, r1, ip, lsr r6
   1845c:	andeq	r8, r1, ip, lsr r6
   18460:	andeq	r8, r1, ip, lsr r6
   18464:	andeq	r8, r1, ip, lsr r6
   18468:	andeq	r8, r1, r8, ror #20
   1846c:	andeq	r8, r1, r8, ror #20
   18470:	andeq	r8, r1, r0, ror #12
   18474:	andeq	r8, r1, r8, ror #20
   18478:	andeq	r8, r1, r4, lsl #13
   1847c:	andeq	r8, r1, r0, lsl #16
   18480:	andeq	r8, r1, r8, ror #20
   18484:	andeq	r8, r1, r8, ror #20
   18488:	andeq	r8, r1, ip, asr #13
   1848c:	andeq	r8, r1, r8, ror #20
   18490:	andeq	r8, r1, r8, ror #20
   18494:	andeq	r8, r1, r8, ror #20
   18498:	andeq	r8, r1, r8, ror #20
   1849c:	andeq	r8, r1, r8, ror #20
   184a0:	andeq	r8, r1, r8, ror #20
   184a4:	andeq	r8, r1, r8, ror #20
   184a8:	andeq	r8, r1, r8, ror #20
   184ac:	andeq	r8, r1, r8, ror #20
   184b0:	andeq	r8, r1, r8, ror #20
   184b4:	andeq	r8, r1, r8, ror #20
   184b8:	andeq	r8, r1, r8, ror #20
   184bc:	andeq	r8, r1, r8, ror #20
   184c0:	andeq	r8, r1, r8, ror #20
   184c4:	andeq	r8, r1, r8, ror #20
   184c8:	andeq	r8, r1, r8, ror #20
   184cc:	andeq	r8, r1, r4, asr #14
   184d0:	andeq	r8, r1, r8, ror #20
   184d4:	andeq	r8, r1, r8, ror #20
   184d8:	andeq	r8, r1, r8, ror #20
   184dc:	andeq	r8, r1, ip, lsl #14
   184e0:	andeq	r8, r1, r8, ror #20
   184e4:	andeq	r8, r1, r8, ror #20
   184e8:	andeq	r8, r1, r8, ror #20
   184ec:	andeq	r8, r1, r8, ror #20
   184f0:	andeq	r8, r1, r8, ror #20
   184f4:	andeq	r8, r1, r8, ror #20
   184f8:	andeq	r8, r1, r8, ror #20
   184fc:	andeq	r8, r1, r8, ror #20
   18500:	andeq	r8, r1, r0, ror #14
   18504:	andeq	r8, r1, r8, ror #20
   18508:	andeq	r8, r1, r8, lsr #13
   1850c:	andeq	r8, r1, r8, ror #20
   18510:	andeq	r8, r1, r8, ror #20
   18514:	andeq	r8, r1, r8, ror #20
   18518:	andeq	r8, r1, r8, ror #20
   1851c:	andeq	r8, r1, r8, ror #20
   18520:	andeq	r8, r1, r8, ror #20
   18524:	andeq	r8, r1, r8, ror #20
   18528:	andeq	r8, r1, r8, ror #20
   1852c:	andeq	r8, r1, r8, ror #20
   18530:	andeq	r8, r1, r8, ror #20
   18534:	andeq	r8, r1, r8, ror #20
   18538:	andeq	r8, r1, r8, ror #20
   1853c:	andeq	r8, r1, r8, ror #20
   18540:	andeq	r8, r1, r8, ror #20
   18544:	andeq	r8, r1, r8, ror #20
   18548:	andeq	r8, r1, r8, ror #20
   1854c:	andeq	r8, r1, r8, lsr #14
   18550:	andeq	r8, r1, r8, ror #20
   18554:	andeq	r8, r1, r8, ror #20
   18558:	andeq	r8, r1, r8, ror #20
   1855c:	strdeq	r8, [r1], -r0
   18560:	andeq	r8, r1, r8, ror #20
   18564:	andeq	r8, r1, r8, ror #20
   18568:	andeq	r8, r1, r8, ror #20
   1856c:	andeq	r8, r1, r0, lsr #16
   18570:	andeq	r8, r1, r0, lsr #12
   18574:	andeq	r8, r1, ip, lsr r8
   18578:	cmp	r3, #1
   1857c:	ble	185b4 <__assert_fail@plt+0x70ec>
   18580:	ldr	r3, [r4, #8]
   18584:	lsl	ip, r2, #2
   18588:	ldr	r0, [r3, r2, lsl #2]
   1858c:	cmn	r0, #1
   18590:	beq	185e8 <__assert_fail@plt+0x7120>
   18594:	add	r1, r1, #2
   18598:	ldr	r0, [r4, #28]
   1859c:	cmp	r0, r1
   185a0:	beq	185b4 <__assert_fail@plt+0x70ec>
   185a4:	add	r3, r3, ip
   185a8:	ldr	r3, [r3, #4]
   185ac:	cmn	r3, #1
   185b0:	beq	185e8 <__assert_fail@plt+0x7120>
   185b4:	ldrb	r3, [r4, #76]	; 0x4c
   185b8:	cmp	r3, #0
   185bc:	beq	18a78 <__assert_fail@plt+0x75b0>
   185c0:	ldr	r1, [r4, #12]
   185c4:	ldr	r3, [r4]
   185c8:	ldr	r0, [r1, r2, lsl #2]
   185cc:	ldr	r1, [r4, #24]
   185d0:	add	r3, r3, r0
   185d4:	ldrb	r6, [r3, r1]
   185d8:	bics	r3, r6, #127	; 0x7f
   185dc:	ldrne	r3, [r4, #4]
   185e0:	ldrbne	r6, [r3, r2]
   185e4:	b	183c0 <__assert_fail@plt+0x6ef8>
   185e8:	ldr	r3, [r4, #4]
   185ec:	ldrb	r6, [r3, r2]
   185f0:	b	183c0 <__assert_fail@plt+0x6ef8>
   185f4:	bl	11378 <__ctype_b_loc@plt>
   185f8:	ldr	r2, [r0]
   185fc:	lsl	r3, r6, #1
   18600:	ldrh	r3, [r2, r3]
   18604:	ubfx	r3, r3, #3, #1
   18608:	cmp	r6, #95	; 0x5f
   1860c:	orreq	r3, r3, #1
   18610:	ldrb	r2, [r5, #6]
   18614:	bfi	r2, r3, #6, #1
   18618:	strb	r2, [r5, #6]
   1861c:	b	1840c <__assert_fail@plt+0x6f44>
   18620:	tst	r7, #33792	; 0x8400
   18624:	movne	r0, #2
   18628:	bne	18394 <__assert_fail@plt+0x6ecc>
   1862c:	mov	r3, #10
   18630:	strb	r3, [r5, #4]
   18634:	mov	r0, #2
   18638:	b	18394 <__assert_fail@plt+0x6ecc>
   1863c:	tst	r7, #16384	; 0x4000
   18640:	movne	r0, #2
   18644:	bne	18394 <__assert_fail@plt+0x6ecc>
   18648:	mov	r3, #4
   1864c:	strb	r3, [r5, #4]
   18650:	sub	r6, r6, #49	; 0x31
   18654:	str	r6, [r5]
   18658:	mov	r0, #2
   1865c:	b	18394 <__assert_fail@plt+0x6ecc>
   18660:	tst	r7, #524288	; 0x80000
   18664:	movne	r0, #2
   18668:	bne	18394 <__assert_fail@plt+0x6ecc>
   1866c:	mov	r3, #12
   18670:	strb	r3, [r5, #4]
   18674:	mov	r3, #6
   18678:	str	r3, [r5]
   1867c:	mov	r0, #2
   18680:	b	18394 <__assert_fail@plt+0x6ecc>
   18684:	tst	r7, #524288	; 0x80000
   18688:	movne	r0, #2
   1868c:	bne	18394 <__assert_fail@plt+0x6ecc>
   18690:	mov	r3, #12
   18694:	strb	r3, [r5, #4]
   18698:	mov	r3, #9
   1869c:	str	r3, [r5]
   186a0:	mov	r0, #2
   186a4:	b	18394 <__assert_fail@plt+0x6ecc>
   186a8:	tst	r7, #524288	; 0x80000
   186ac:	movne	r0, #2
   186b0:	bne	18394 <__assert_fail@plt+0x6ecc>
   186b4:	mov	r3, #12
   186b8:	strb	r3, [r5, #4]
   186bc:	mov	r3, #256	; 0x100
   186c0:	str	r3, [r5]
   186c4:	mov	r0, #2
   186c8:	b	18394 <__assert_fail@plt+0x6ecc>
   186cc:	tst	r7, #524288	; 0x80000
   186d0:	movne	r0, #2
   186d4:	bne	18394 <__assert_fail@plt+0x6ecc>
   186d8:	mov	r3, #12
   186dc:	strb	r3, [r5, #4]
   186e0:	mov	r3, #512	; 0x200
   186e4:	str	r3, [r5]
   186e8:	mov	r0, #2
   186ec:	b	18394 <__assert_fail@plt+0x6ecc>
   186f0:	tst	r7, #524288	; 0x80000
   186f4:	movne	r0, #2
   186f8:	bne	18394 <__assert_fail@plt+0x6ecc>
   186fc:	mov	r3, #32
   18700:	strb	r3, [r5, #4]
   18704:	mov	r0, #2
   18708:	b	18394 <__assert_fail@plt+0x6ecc>
   1870c:	tst	r7, #524288	; 0x80000
   18710:	movne	r0, #2
   18714:	bne	18394 <__assert_fail@plt+0x6ecc>
   18718:	mov	r3, #33	; 0x21
   1871c:	strb	r3, [r5, #4]
   18720:	mov	r0, #2
   18724:	b	18394 <__assert_fail@plt+0x6ecc>
   18728:	tst	r7, #524288	; 0x80000
   1872c:	movne	r0, #2
   18730:	bne	18394 <__assert_fail@plt+0x6ecc>
   18734:	mov	r3, #34	; 0x22
   18738:	strb	r3, [r5, #4]
   1873c:	mov	r0, #2
   18740:	b	18394 <__assert_fail@plt+0x6ecc>
   18744:	tst	r7, #524288	; 0x80000
   18748:	movne	r0, #2
   1874c:	bne	18394 <__assert_fail@plt+0x6ecc>
   18750:	mov	r3, #35	; 0x23
   18754:	strb	r3, [r5, #4]
   18758:	mov	r0, #2
   1875c:	b	18394 <__assert_fail@plt+0x6ecc>
   18760:	tst	r7, #524288	; 0x80000
   18764:	movne	r0, #2
   18768:	bne	18394 <__assert_fail@plt+0x6ecc>
   1876c:	mov	r3, #12
   18770:	strb	r3, [r5, #4]
   18774:	mov	r3, #64	; 0x40
   18778:	str	r3, [r5]
   1877c:	mov	r0, #2
   18780:	b	18394 <__assert_fail@plt+0x6ecc>
   18784:	tst	r7, #524288	; 0x80000
   18788:	movne	r0, #2
   1878c:	bne	18394 <__assert_fail@plt+0x6ecc>
   18790:	mov	r3, #12
   18794:	strb	r3, [r5, #4]
   18798:	mov	r3, #128	; 0x80
   1879c:	str	r3, [r5]
   187a0:	mov	r0, #2
   187a4:	b	18394 <__assert_fail@plt+0x6ecc>
   187a8:	tst	r7, #8192	; 0x2000
   187ac:	movne	r0, #2
   187b0:	bne	18394 <__assert_fail@plt+0x6ecc>
   187b4:	mov	r3, #8
   187b8:	strb	r3, [r5, #4]
   187bc:	mov	r0, #2
   187c0:	b	18394 <__assert_fail@plt+0x6ecc>
   187c4:	tst	r7, #8192	; 0x2000
   187c8:	movne	r0, #2
   187cc:	bne	18394 <__assert_fail@plt+0x6ecc>
   187d0:	mov	r3, #9
   187d4:	strb	r3, [r5, #4]
   187d8:	mov	r0, #2
   187dc:	b	18394 <__assert_fail@plt+0x6ecc>
   187e0:	movw	r2, #1026	; 0x402
   187e4:	and	r2, r7, r2
   187e8:	cmp	r2, #2
   187ec:	moveq	r3, #18
   187f0:	strbeq	r3, [r5, #4]
   187f4:	moveq	r0, #2
   187f8:	movne	r0, #2
   187fc:	b	18394 <__assert_fail@plt+0x6ecc>
   18800:	movw	r2, #1026	; 0x402
   18804:	and	r2, r7, r2
   18808:	cmp	r2, #2
   1880c:	moveq	r3, #19
   18810:	strbeq	r3, [r5, #4]
   18814:	moveq	r0, #2
   18818:	movne	r0, #2
   1881c:	b	18394 <__assert_fail@plt+0x6ecc>
   18820:	and	r2, r7, #4608	; 0x1200
   18824:	cmp	r2, #512	; 0x200
   18828:	moveq	r3, #23
   1882c:	strbeq	r3, [r5, #4]
   18830:	moveq	r0, #2
   18834:	movne	r0, #2
   18838:	b	18394 <__assert_fail@plt+0x6ecc>
   1883c:	and	r2, r7, #4608	; 0x1200
   18840:	cmp	r2, #512	; 0x200
   18844:	moveq	r3, #24
   18848:	strbeq	r3, [r5, #4]
   1884c:	moveq	r0, #2
   18850:	movne	r0, #2
   18854:	b	18394 <__assert_fail@plt+0x6ecc>
   18858:	bl	11378 <__ctype_b_loc@plt>
   1885c:	ldr	r2, [r0]
   18860:	lsl	r3, r6, #1
   18864:	ldrh	r3, [r2, r3]
   18868:	ubfx	r3, r3, #3, #1
   1886c:	cmp	r6, #95	; 0x5f
   18870:	orreq	r3, r3, #1
   18874:	ldrb	r2, [r5, #6]
   18878:	bfi	r2, r3, #6, #1
   1887c:	strb	r2, [r5, #6]
   18880:	b	18168 <__assert_fail@plt+0x6ca0>
   18884:	tst	r7, #2048	; 0x800
   18888:	moveq	r0, #1
   1888c:	beq	18394 <__assert_fail@plt+0x6ecc>
   18890:	mov	r3, #10
   18894:	strb	r3, [r5, #4]
   18898:	mov	r0, #1
   1889c:	b	18394 <__assert_fail@plt+0x6ecc>
   188a0:	and	r2, r7, #33792	; 0x8400
   188a4:	cmp	r2, #32768	; 0x8000
   188a8:	moveq	r3, #10
   188ac:	strbeq	r3, [r5, #4]
   188b0:	moveq	r0, #1
   188b4:	movne	r0, #1
   188b8:	b	18394 <__assert_fail@plt+0x6ecc>
   188bc:	mov	r3, #11
   188c0:	strb	r3, [r5, #4]
   188c4:	mov	r0, #1
   188c8:	b	18394 <__assert_fail@plt+0x6ecc>
   188cc:	movw	r3, #1026	; 0x402
   188d0:	tst	r7, r3
   188d4:	movne	r0, #1
   188d8:	bne	18394 <__assert_fail@plt+0x6ecc>
   188dc:	mov	r3, #18
   188e0:	strb	r3, [r5, #4]
   188e4:	mov	r0, #1
   188e8:	b	18394 <__assert_fail@plt+0x6ecc>
   188ec:	movw	r3, #1026	; 0x402
   188f0:	tst	r7, r3
   188f4:	movne	r0, #1
   188f8:	bne	18394 <__assert_fail@plt+0x6ecc>
   188fc:	mov	r3, #19
   18900:	strb	r3, [r5, #4]
   18904:	mov	r0, #1
   18908:	b	18394 <__assert_fail@plt+0x6ecc>
   1890c:	and	r2, r7, #4608	; 0x1200
   18910:	cmp	r2, #4608	; 0x1200
   18914:	moveq	r3, #23
   18918:	strbeq	r3, [r5, #4]
   1891c:	moveq	r0, #1
   18920:	movne	r0, #1
   18924:	b	18394 <__assert_fail@plt+0x6ecc>
   18928:	and	r2, r7, #4608	; 0x1200
   1892c:	cmp	r2, #4608	; 0x1200
   18930:	moveq	r3, #24
   18934:	strbeq	r3, [r5, #4]
   18938:	moveq	r0, #1
   1893c:	movne	r0, #1
   18940:	b	18394 <__assert_fail@plt+0x6ecc>
   18944:	tst	r7, #8192	; 0x2000
   18948:	moveq	r0, #1
   1894c:	beq	18394 <__assert_fail@plt+0x6ecc>
   18950:	mov	r3, #8
   18954:	strb	r3, [r5, #4]
   18958:	mov	r0, #1
   1895c:	b	18394 <__assert_fail@plt+0x6ecc>
   18960:	tst	r7, #8192	; 0x2000
   18964:	moveq	r0, #1
   18968:	beq	18394 <__assert_fail@plt+0x6ecc>
   1896c:	mov	r3, #9
   18970:	strb	r3, [r5, #4]
   18974:	mov	r0, #1
   18978:	b	18394 <__assert_fail@plt+0x6ecc>
   1897c:	mov	r3, #20
   18980:	strb	r3, [r5, #4]
   18984:	mov	r0, #1
   18988:	b	18394 <__assert_fail@plt+0x6ecc>
   1898c:	mov	r3, #5
   18990:	strb	r3, [r5, #4]
   18994:	mov	r0, #1
   18998:	b	18394 <__assert_fail@plt+0x6ecc>
   1899c:	mov	r3, #8
   189a0:	movt	r3, #128	; 0x80
   189a4:	tst	r7, r3
   189a8:	bne	189e0 <__assert_fail@plt+0x7518>
   189ac:	ldr	r3, [r4, #40]	; 0x28
   189b0:	cmp	r3, #0
   189b4:	beq	189e0 <__assert_fail@plt+0x7518>
   189b8:	ldr	r2, [r4, #4]
   189bc:	add	r3, r2, r3
   189c0:	ldrb	r2, [r3, #-1]
   189c4:	eor	r3, r7, #2048	; 0x800
   189c8:	ubfx	r3, r3, #11, #1
   189cc:	cmp	r2, #10
   189d0:	orrne	r3, r3, #1
   189d4:	cmp	r3, #0
   189d8:	movne	r0, #1
   189dc:	bne	18394 <__assert_fail@plt+0x6ecc>
   189e0:	mov	r3, #12
   189e4:	strb	r3, [r5, #4]
   189e8:	mov	r3, #16
   189ec:	str	r3, [r5]
   189f0:	mov	r0, #1
   189f4:	b	18394 <__assert_fail@plt+0x6ecc>
   189f8:	tst	r7, #8
   189fc:	bne	18a14 <__assert_fail@plt+0x754c>
   18a00:	ldr	r3, [r4, #40]	; 0x28
   18a04:	add	r3, r3, #1
   18a08:	ldr	r2, [r4, #48]	; 0x30
   18a0c:	cmp	r3, r2
   18a10:	bne	18a2c <__assert_fail@plt+0x7564>
   18a14:	mov	r3, #12
   18a18:	strb	r3, [r5, #4]
   18a1c:	mov	r3, #32
   18a20:	str	r3, [r5]
   18a24:	mov	r0, #1
   18a28:	b	18394 <__assert_fail@plt+0x6ecc>
   18a2c:	str	r3, [r4, #40]	; 0x28
   18a30:	mov	r2, r7
   18a34:	mov	r1, r4
   18a38:	mov	r0, sp
   18a3c:	bl	180a4 <__assert_fail@plt+0x6bdc>
   18a40:	ldr	r3, [r4, #40]	; 0x28
   18a44:	sub	r3, r3, #1
   18a48:	str	r3, [r4, #40]	; 0x28
   18a4c:	ldrb	r3, [sp, #4]
   18a50:	sub	r3, r3, #9
   18a54:	uxtb	r3, r3
   18a58:	cmp	r3, #1
   18a5c:	movhi	r0, #1
   18a60:	bhi	18394 <__assert_fail@plt+0x6ecc>
   18a64:	b	18a14 <__assert_fail@plt+0x754c>
   18a68:	mov	r0, #2
   18a6c:	b	18394 <__assert_fail@plt+0x6ecc>
   18a70:	mov	r0, #1
   18a74:	b	18394 <__assert_fail@plt+0x6ecc>
   18a78:	ldr	r3, [r4]
   18a7c:	ldr	r1, [r4, #24]
   18a80:	add	r2, r3, r2
   18a84:	ldrb	r6, [r2, r1]
   18a88:	b	183c0 <__assert_fail@plt+0x6ef8>
   18a8c:	str	r4, [sp, #-8]!
   18a90:	str	lr, [sp, #4]
   18a94:	mov	r4, r1
   18a98:	bl	180a4 <__assert_fail@plt+0x6bdc>
   18a9c:	ldr	r3, [r4, #40]	; 0x28
   18aa0:	add	r0, r3, r0
   18aa4:	str	r0, [r4, #40]	; 0x28
   18aa8:	ldr	r4, [sp]
   18aac:	add	sp, sp, #4
   18ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ab4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18ab8:	strd	r6, [sp, #8]
   18abc:	strd	r8, [sp, #16]
   18ac0:	str	sl, [sp, #24]
   18ac4:	str	lr, [sp, #28]
   18ac8:	mov	r6, r0
   18acc:	mov	r4, r1
   18ad0:	mov	r5, r2
   18ad4:	mvn	r9, #0
   18ad8:	movw	r8, #32816	; 0x8030
   18adc:	mvn	r7, #1
   18ae0:	mov	r2, r5
   18ae4:	mov	r1, r6
   18ae8:	mov	r0, r4
   18aec:	bl	18a8c <__assert_fail@plt+0x75c4>
   18af0:	ldrb	r2, [r4]
   18af4:	ldrb	r3, [r4, #4]
   18af8:	cmp	r3, #2
   18afc:	beq	18b64 <__assert_fail@plt+0x769c>
   18b00:	cmp	r3, #24
   18b04:	cmpne	r2, #44	; 0x2c
   18b08:	beq	18b68 <__assert_fail@plt+0x76a0>
   18b0c:	cmp	r3, #1
   18b10:	movne	r9, r7
   18b14:	bne	18ae0 <__assert_fail@plt+0x7618>
   18b18:	sub	r3, r2, #48	; 0x30
   18b1c:	uxtb	r1, r3
   18b20:	cmp	r1, #9
   18b24:	movhi	r3, #0
   18b28:	movls	r3, #1
   18b2c:	cmn	r9, #2
   18b30:	moveq	r3, #0
   18b34:	cmp	r3, #0
   18b38:	moveq	r9, r7
   18b3c:	beq	18ae0 <__assert_fail@plt+0x7618>
   18b40:	cmn	r9, #1
   18b44:	subeq	r9, r2, #48	; 0x30
   18b48:	beq	18ae0 <__assert_fail@plt+0x7618>
   18b4c:	add	r9, r9, r9, lsl #2
   18b50:	add	r2, r2, r9, lsl #1
   18b54:	cmp	r2, r8
   18b58:	movge	r2, r8
   18b5c:	sub	r9, r2, #48	; 0x30
   18b60:	b	18ae0 <__assert_fail@plt+0x7618>
   18b64:	mvn	r9, #1
   18b68:	mov	r0, r9
   18b6c:	ldrd	r4, [sp]
   18b70:	ldrd	r6, [sp, #8]
   18b74:	ldrd	r8, [sp, #16]
   18b78:	ldr	sl, [sp, #24]
   18b7c:	add	sp, sp, #28
   18b80:	pop	{pc}		; (ldr pc, [sp], #4)
   18b84:	str	r4, [sp, #-8]!
   18b88:	str	lr, [sp, #4]
   18b8c:	mov	r4, r0
   18b90:	ldr	r0, [r0]
   18b94:	bl	135a4 <__assert_fail@plt+0x20dc>
   18b98:	ldr	r0, [r4, #4]
   18b9c:	bl	135a4 <__assert_fail@plt+0x20dc>
   18ba0:	ldr	r0, [r4, #8]
   18ba4:	bl	135a4 <__assert_fail@plt+0x20dc>
   18ba8:	ldr	r0, [r4, #12]
   18bac:	bl	135a4 <__assert_fail@plt+0x20dc>
   18bb0:	mov	r0, r4
   18bb4:	bl	135a4 <__assert_fail@plt+0x20dc>
   18bb8:	ldr	r4, [sp]
   18bbc:	add	sp, sp, #4
   18bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bc4:	str	r4, [sp, #-8]!
   18bc8:	str	lr, [sp, #4]
   18bcc:	ldr	r2, [r0, #4]
   18bd0:	mov	r3, #255	; 0xff
   18bd4:	movt	r3, #4
   18bd8:	and	r3, r3, r2
   18bdc:	cmp	r3, #6
   18be0:	beq	18bf8 <__assert_fail@plt+0x7730>
   18be4:	cmp	r3, #3
   18be8:	beq	18c04 <__assert_fail@plt+0x773c>
   18bec:	ldr	r4, [sp]
   18bf0:	add	sp, sp, #4
   18bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   18bf8:	ldr	r0, [r0]
   18bfc:	bl	18b84 <__assert_fail@plt+0x76bc>
   18c00:	b	18bec <__assert_fail@plt+0x7724>
   18c04:	ldr	r0, [r0]
   18c08:	bl	135a4 <__assert_fail@plt+0x20dc>
   18c0c:	b	18bec <__assert_fail@plt+0x7724>
   18c10:	str	r4, [sp, #-8]!
   18c14:	str	lr, [sp, #4]
   18c18:	add	r0, r1, #20
   18c1c:	bl	18bc4 <__assert_fail@plt+0x76fc>
   18c20:	mov	r0, #0
   18c24:	ldr	r4, [sp]
   18c28:	add	sp, sp, #4
   18c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18c34:	strd	r6, [sp, #8]
   18c38:	strd	r8, [sp, #16]
   18c3c:	str	sl, [sp, #24]
   18c40:	str	lr, [sp, #28]
   18c44:	sub	sp, sp, #8
   18c48:	mov	r4, r0
   18c4c:	add	r3, sp, #8
   18c50:	stmdb	r3, {r1, r2}
   18c54:	ldrb	r5, [sp, #4]
   18c58:	ldr	r6, [r0, #4]
   18c5c:	ldr	r3, [r0, #8]
   18c60:	cmp	r3, r6
   18c64:	bcs	18d3c <__assert_fail@plt+0x7874>
   18c68:	ldr	r1, [r4, #8]
   18c6c:	ldr	r0, [r4]
   18c70:	lsl	r1, r1, #3
   18c74:	ldrd	r2, [sp]
   18c78:	strd	r2, [r0, r1]
   18c7c:	ldr	r2, [r4, #8]
   18c80:	ldr	r3, [r4]
   18c84:	add	r3, r3, r2, lsl #3
   18c88:	ldr	r2, [r3, #4]
   18c8c:	bfc	r2, #8, #10
   18c90:	str	r2, [r3, #4]
   18c94:	cmp	r5, #5
   18c98:	beq	18e0c <__assert_fail@plt+0x7944>
   18c9c:	cmp	r5, #6
   18ca0:	movne	r5, #0
   18ca4:	moveq	r5, #1
   18ca8:	ldr	r2, [r4, #8]
   18cac:	ldr	r3, [r4]
   18cb0:	add	r3, r3, r2, lsl #3
   18cb4:	ldrb	r2, [r3, #6]
   18cb8:	bfi	r2, r5, #4, #1
   18cbc:	strb	r2, [r3, #6]
   18cc0:	ldr	r2, [r4, #8]
   18cc4:	ldr	r3, [r4, #12]
   18cc8:	mvn	r1, #0
   18ccc:	str	r1, [r3, r2, lsl #2]
   18cd0:	ldr	r3, [r4, #8]
   18cd4:	add	r3, r3, r3, lsl #1
   18cd8:	lsl	r3, r3, #2
   18cdc:	ldr	r0, [r4, #20]
   18ce0:	add	r1, r0, r3
   18ce4:	mov	r2, #0
   18ce8:	str	r2, [r0, r3]
   18cec:	str	r2, [r1, #4]
   18cf0:	str	r2, [r1, #8]
   18cf4:	ldr	r3, [r4, #8]
   18cf8:	add	r3, r3, r3, lsl #1
   18cfc:	lsl	r3, r3, #2
   18d00:	ldr	r0, [r4, #24]
   18d04:	add	r1, r0, r3
   18d08:	str	r2, [r0, r3]
   18d0c:	str	r2, [r1, #4]
   18d10:	str	r2, [r1, #8]
   18d14:	ldr	r0, [r4, #8]
   18d18:	add	r3, r0, #1
   18d1c:	str	r3, [r4, #8]
   18d20:	add	sp, sp, #8
   18d24:	ldrd	r4, [sp]
   18d28:	ldrd	r6, [sp, #8]
   18d2c:	ldrd	r8, [sp, #16]
   18d30:	ldr	sl, [sp, #24]
   18d34:	add	sp, sp, #28
   18d38:	pop	{pc}		; (ldr pc, [sp], #4)
   18d3c:	lsl	r7, r6, #1
   18d40:	movw	r3, #21845	; 0x5555
   18d44:	movt	r3, #5461	; 0x1555
   18d48:	cmp	r7, r3
   18d4c:	bhi	18e20 <__assert_fail@plt+0x7958>
   18d50:	lsl	r1, r6, #4
   18d54:	ldr	r0, [r0]
   18d58:	bl	24844 <__assert_fail@plt+0x1337c>
   18d5c:	cmp	r0, #0
   18d60:	beq	18e28 <__assert_fail@plt+0x7960>
   18d64:	str	r0, [r4]
   18d68:	lsl	r8, r6, #3
   18d6c:	mov	r1, r8
   18d70:	ldr	r0, [r4, #12]
   18d74:	bl	24844 <__assert_fail@plt+0x1337c>
   18d78:	mov	r9, r0
   18d7c:	mov	r1, r8
   18d80:	ldr	r0, [r4, #16]
   18d84:	bl	24844 <__assert_fail@plt+0x1337c>
   18d88:	mov	r8, r0
   18d8c:	add	r6, r6, r6, lsl #1
   18d90:	lsl	r6, r6, #3
   18d94:	mov	r1, r6
   18d98:	ldr	r0, [r4, #20]
   18d9c:	bl	24844 <__assert_fail@plt+0x1337c>
   18da0:	mov	sl, r0
   18da4:	mov	r1, r6
   18da8:	ldr	r0, [r4, #24]
   18dac:	bl	24844 <__assert_fail@plt+0x1337c>
   18db0:	mov	r6, r0
   18db4:	cmp	r8, #0
   18db8:	cmpne	r9, #0
   18dbc:	beq	18de4 <__assert_fail@plt+0x791c>
   18dc0:	cmp	r0, #0
   18dc4:	cmpne	sl, #0
   18dc8:	beq	18de4 <__assert_fail@plt+0x791c>
   18dcc:	str	r9, [r4, #12]
   18dd0:	str	r8, [r4, #16]
   18dd4:	str	sl, [r4, #20]
   18dd8:	str	r0, [r4, #24]
   18ddc:	str	r7, [r4, #4]
   18de0:	b	18c68 <__assert_fail@plt+0x77a0>
   18de4:	mov	r0, r9
   18de8:	bl	135a4 <__assert_fail@plt+0x20dc>
   18dec:	mov	r0, r8
   18df0:	bl	135a4 <__assert_fail@plt+0x20dc>
   18df4:	mov	r0, sl
   18df8:	bl	135a4 <__assert_fail@plt+0x20dc>
   18dfc:	mov	r0, r6
   18e00:	bl	135a4 <__assert_fail@plt+0x20dc>
   18e04:	mvn	r0, #0
   18e08:	b	18d20 <__assert_fail@plt+0x7858>
   18e0c:	ldr	r3, [r4, #92]	; 0x5c
   18e10:	cmp	r3, #1
   18e14:	movgt	r5, #1
   18e18:	bgt	18ca8 <__assert_fail@plt+0x77e0>
   18e1c:	b	18c9c <__assert_fail@plt+0x77d4>
   18e20:	mvn	r0, #0
   18e24:	b	18d20 <__assert_fail@plt+0x7858>
   18e28:	mvn	r0, #0
   18e2c:	b	18d20 <__assert_fail@plt+0x7858>
   18e30:	ldrb	r3, [r1, #24]
   18e34:	cmp	r3, #16
   18e38:	bne	18e58 <__assert_fail@plt+0x7990>
   18e3c:	ldr	r3, [r1, #4]
   18e40:	ldr	r2, [r3, #12]
   18e44:	str	r2, [r1, #12]
   18e48:	ldr	r3, [r3, #28]
   18e4c:	str	r3, [r1, #28]
   18e50:	mov	r0, #0
   18e54:	bx	lr
   18e58:	strd	r4, [sp, #-16]!
   18e5c:	str	r6, [sp, #8]
   18e60:	str	lr, [sp, #12]
   18e64:	mov	r4, r1
   18e68:	mov	r5, r0
   18e6c:	str	r1, [r4, #12]
   18e70:	add	r3, r1, #20
   18e74:	ldm	r3, {r1, r2}
   18e78:	bl	18c30 <__assert_fail@plt+0x7768>
   18e7c:	str	r0, [r4, #28]
   18e80:	cmn	r0, #1
   18e84:	beq	18ec8 <__assert_fail@plt+0x7a00>
   18e88:	ldrb	r3, [r4, #24]
   18e8c:	cmp	r3, #12
   18e90:	movne	r0, #0
   18e94:	beq	18ea8 <__assert_fail@plt+0x79e0>
   18e98:	ldrd	r4, [sp]
   18e9c:	ldr	r6, [sp, #8]
   18ea0:	add	sp, sp, #12
   18ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ea8:	ldr	r3, [r5]
   18eac:	add	r0, r3, r0, lsl #3
   18eb0:	ldr	r3, [r0, #4]
   18eb4:	ldr	r2, [r4, #20]
   18eb8:	bfi	r3, r2, #8, #10
   18ebc:	str	r3, [r0, #4]
   18ec0:	mov	r0, #0
   18ec4:	b	18e98 <__assert_fail@plt+0x79d0>
   18ec8:	mov	r0, #12
   18ecc:	b	18e98 <__assert_fail@plt+0x79d0>
   18ed0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ed4:	strd	r6, [sp, #8]
   18ed8:	str	r8, [sp, #16]
   18edc:	str	lr, [sp, #20]
   18ee0:	mov	r4, r0
   18ee4:	mov	r5, r1
   18ee8:	mov	r7, r2
   18eec:	lsl	r6, r1, #3
   18ef0:	ldr	r3, [r0]
   18ef4:	add	r3, r3, r6
   18ef8:	ldm	r3, {r1, r2}
   18efc:	bl	18c30 <__assert_fail@plt+0x7768>
   18f00:	cmn	r0, #1
   18f04:	beq	18f60 <__assert_fail@plt+0x7a98>
   18f08:	lsl	r3, r0, #3
   18f0c:	ldr	r2, [r4]
   18f10:	add	r2, r2, r3
   18f14:	ldr	r1, [r2, #4]
   18f18:	bfi	r1, r7, #8, #10
   18f1c:	str	r1, [r2, #4]
   18f20:	ldr	r2, [r4]
   18f24:	add	ip, r2, r3
   18f28:	add	r2, r2, r6
   18f2c:	ldr	r1, [r2, #4]
   18f30:	ldr	r2, [ip, #4]
   18f34:	orr	r1, r2, r1
   18f38:	ubfx	r1, r1, #8, #10
   18f3c:	bfi	r2, r1, #8, #10
   18f40:	str	r2, [ip, #4]
   18f44:	ldr	r2, [r4]
   18f48:	add	r3, r2, r3
   18f4c:	ldrb	r2, [r3, #6]
   18f50:	orr	r2, r2, #4
   18f54:	strb	r2, [r3, #6]
   18f58:	ldr	r3, [r4, #16]
   18f5c:	str	r5, [r3, r0, lsl #2]
   18f60:	ldrd	r4, [sp]
   18f64:	ldrd	r6, [sp, #8]
   18f68:	ldr	r8, [sp, #16]
   18f6c:	add	sp, sp, #20
   18f70:	pop	{pc}		; (ldr pc, [sp], #4)
   18f74:	str	r4, [sp, #-8]!
   18f78:	str	lr, [sp, #4]
   18f7c:	mov	r4, r0
   18f80:	ldr	r0, [r0, #24]
   18f84:	bl	135a4 <__assert_fail@plt+0x20dc>
   18f88:	ldr	r0, [r4, #36]	; 0x24
   18f8c:	bl	135a4 <__assert_fail@plt+0x20dc>
   18f90:	ldr	r3, [r4, #40]	; 0x28
   18f94:	add	r2, r4, #4
   18f98:	cmp	r3, r2
   18f9c:	beq	18fb0 <__assert_fail@plt+0x7ae8>
   18fa0:	ldr	r0, [r3, #8]
   18fa4:	bl	135a4 <__assert_fail@plt+0x20dc>
   18fa8:	ldr	r0, [r4, #40]	; 0x28
   18fac:	bl	135a4 <__assert_fail@plt+0x20dc>
   18fb0:	ldr	r0, [r4, #12]
   18fb4:	bl	135a4 <__assert_fail@plt+0x20dc>
   18fb8:	ldr	r0, [r4, #48]	; 0x30
   18fbc:	bl	135a4 <__assert_fail@plt+0x20dc>
   18fc0:	ldr	r0, [r4, #44]	; 0x2c
   18fc4:	bl	135a4 <__assert_fail@plt+0x20dc>
   18fc8:	mov	r0, r4
   18fcc:	bl	135a4 <__assert_fail@plt+0x20dc>
   18fd0:	ldr	r4, [sp]
   18fd4:	add	sp, sp, #4
   18fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18fe0:	strd	r6, [sp, #8]
   18fe4:	strd	r8, [sp, #16]
   18fe8:	strd	sl, [sp, #24]
   18fec:	str	lr, [sp, #32]
   18ff0:	sub	sp, sp, #20
   18ff4:	mov	ip, #0
   18ff8:	str	ip, [r0]
   18ffc:	ldr	r5, [r2, #4]
   19000:	cmp	r5, ip
   19004:	moveq	r5, #0
   19008:	beq	192a0 <__assert_fail@plt+0x7dd8>
   1900c:	add	r8, r3, r5
   19010:	ble	1902c <__assert_fail@plt+0x7b64>
   19014:	ldr	ip, [r2, #8]
   19018:	add	r5, ip, r5, lsl #2
   1901c:	ldr	lr, [ip], #4
   19020:	add	r8, r8, lr
   19024:	cmp	r5, ip
   19028:	bne	1901c <__assert_fail@plt+0x7b54>
   1902c:	mov	r4, r3
   19030:	mov	r7, r2
   19034:	mov	r9, r1
   19038:	str	r0, [sp, #12]
   1903c:	ldr	r3, [r1, #68]	; 0x44
   19040:	and	r3, r3, r8
   19044:	add	r3, r3, r3, lsl #1
   19048:	lsl	r3, r3, #2
   1904c:	ldr	r2, [r1, #32]
   19050:	add	r1, r2, r3
   19054:	ldr	fp, [r2, r3]
   19058:	cmp	fp, #0
   1905c:	ble	190b4 <__assert_fail@plt+0x7bec>
   19060:	ldr	sl, [r1, #8]
   19064:	sub	sl, sl, #4
   19068:	mov	r6, #0
   1906c:	b	1907c <__assert_fail@plt+0x7bb4>
   19070:	add	r6, r6, #1
   19074:	cmp	r6, fp
   19078:	beq	190b4 <__assert_fail@plt+0x7bec>
   1907c:	ldr	r5, [sl, #4]!
   19080:	ldr	r3, [r5]
   19084:	cmp	r3, r8
   19088:	bne	19070 <__assert_fail@plt+0x7ba8>
   1908c:	ldrb	r3, [r5, #52]	; 0x34
   19090:	and	r3, r3, #15
   19094:	cmp	r3, r4
   19098:	bne	19070 <__assert_fail@plt+0x7ba8>
   1909c:	mov	r1, r7
   190a0:	ldr	r0, [r5, #40]	; 0x28
   190a4:	bl	1612c <__assert_fail@plt+0x4c64>
   190a8:	cmp	r0, #0
   190ac:	beq	19070 <__assert_fail@plt+0x7ba8>
   190b0:	b	192a0 <__assert_fail@plt+0x7dd8>
   190b4:	mov	r1, #1
   190b8:	mov	r0, #56	; 0x38
   190bc:	bl	24794 <__assert_fail@plt+0x132cc>
   190c0:	subs	r5, r0, #0
   190c4:	beq	19178 <__assert_fail@plt+0x7cb0>
   190c8:	add	fp, r5, #4
   190cc:	mov	r1, r7
   190d0:	mov	r0, fp
   190d4:	bl	17780 <__assert_fail@plt+0x62b8>
   190d8:	subs	r6, r0, #0
   190dc:	bne	19120 <__assert_fail@plt+0x7c58>
   190e0:	ldrb	r3, [r5, #52]	; 0x34
   190e4:	bfi	r3, r4, #0, #4
   190e8:	strb	r3, [r5, #52]	; 0x34
   190ec:	str	fp, [r5, #40]	; 0x28
   190f0:	ldr	r3, [r7, #4]
   190f4:	cmp	r3, #0
   190f8:	ble	19288 <__assert_fail@plt+0x7dc0>
   190fc:	mov	sl, r6
   19100:	and	r3, r4, #4
   19104:	str	r3, [sp, #4]
   19108:	and	r3, r4, #2
   1910c:	str	r3, [sp]
   19110:	and	r3, r4, #1
   19114:	str	r8, [sp, #8]
   19118:	mov	r8, r3
   1911c:	b	191f0 <__assert_fail@plt+0x7d28>
   19120:	mov	r0, r5
   19124:	bl	135a4 <__assert_fail@plt+0x20dc>
   19128:	b	19178 <__assert_fail@plt+0x7cb0>
   1912c:	ldrb	r3, [r5, #52]	; 0x34
   19130:	orr	r3, r3, #64	; 0x40
   19134:	strb	r3, [r5, #52]	; 0x34
   19138:	b	19254 <__assert_fail@plt+0x7d8c>
   1913c:	mov	r0, #12
   19140:	bl	24808 <__assert_fail@plt+0x13340>
   19144:	cmp	r0, #0
   19148:	beq	19170 <__assert_fail@plt+0x7ca8>
   1914c:	str	r0, [r5, #40]	; 0x28
   19150:	mov	r1, r7
   19154:	bl	17780 <__assert_fail@plt+0x62b8>
   19158:	subs	sl, r0, #0
   1915c:	bne	1918c <__assert_fail@plt+0x7cc4>
   19160:	ldrb	r3, [r5, #52]	; 0x34
   19164:	orr	r3, r3, #128	; 0x80
   19168:	strb	r3, [r5, #52]	; 0x34
   1916c:	b	19268 <__assert_fail@plt+0x7da0>
   19170:	mov	r0, r5
   19174:	bl	18f74 <__assert_fail@plt+0x7aac>
   19178:	mov	r3, #12
   1917c:	ldr	r2, [sp, #12]
   19180:	str	r3, [r2]
   19184:	mov	r5, #0
   19188:	b	192a0 <__assert_fail@plt+0x7dd8>
   1918c:	mov	r0, r5
   19190:	bl	18f74 <__assert_fail@plt+0x7aac>
   19194:	b	19178 <__assert_fail@plt+0x7cb0>
   19198:	tst	r4, #2
   1919c:	beq	191a8 <__assert_fail@plt+0x7ce0>
   191a0:	cmp	r8, #0
   191a4:	bne	191d0 <__assert_fail@plt+0x7d08>
   191a8:	tst	r4, #16
   191ac:	beq	191bc <__assert_fail@plt+0x7cf4>
   191b0:	ldr	r3, [sp]
   191b4:	cmp	r3, #0
   191b8:	beq	191d0 <__assert_fail@plt+0x7d08>
   191bc:	tst	r4, #64	; 0x40
   191c0:	beq	191e0 <__assert_fail@plt+0x7d18>
   191c4:	ldr	r3, [sp, #4]
   191c8:	cmp	r3, #0
   191cc:	bne	191e0 <__assert_fail@plt+0x7d18>
   191d0:	sub	r1, r6, sl
   191d4:	mov	r0, fp
   191d8:	bl	1622c <__assert_fail@plt+0x4d64>
   191dc:	add	sl, sl, #1
   191e0:	add	r6, r6, #1
   191e4:	ldr	r3, [r7, #4]
   191e8:	cmp	r6, r3
   191ec:	bge	19284 <__assert_fail@plt+0x7dbc>
   191f0:	ldr	r3, [r7, #8]
   191f4:	ldr	r2, [r3, r6, lsl #2]
   191f8:	ldr	r3, [r9]
   191fc:	add	r3, r3, r2, lsl #3
   19200:	ldrb	r1, [r3, #4]
   19204:	ldr	r4, [r3, #4]
   19208:	ubfx	r4, r4, #8, #10
   1920c:	cmp	r1, #1
   19210:	cmpeq	r4, #0
   19214:	beq	191e0 <__assert_fail@plt+0x7d18>
   19218:	ldrb	r2, [r5, #52]	; 0x34
   1921c:	ubfx	r0, r2, #5, #1
   19220:	ldrb	r3, [r3, #6]
   19224:	ubfx	r3, r3, #4, #1
   19228:	orr	r0, r0, r3
   1922c:	mov	r3, r2
   19230:	bfi	r3, r0, #5, #1
   19234:	strb	r3, [r5, #52]	; 0x34
   19238:	cmp	r1, #2
   1923c:	uxtbeq	r3, r3
   19240:	orreq	r3, r3, #16
   19244:	strbeq	r3, [r5, #52]	; 0x34
   19248:	beq	19254 <__assert_fail@plt+0x7d8c>
   1924c:	cmp	r1, #4
   19250:	beq	1912c <__assert_fail@plt+0x7c64>
   19254:	cmp	r4, #0
   19258:	beq	191e0 <__assert_fail@plt+0x7d18>
   1925c:	ldr	r3, [r5, #40]	; 0x28
   19260:	cmp	fp, r3
   19264:	beq	1913c <__assert_fail@plt+0x7c74>
   19268:	tst	r4, #1
   1926c:	beq	19198 <__assert_fail@plt+0x7cd0>
   19270:	cmp	r8, #0
   19274:	beq	191d0 <__assert_fail@plt+0x7d08>
   19278:	tst	r4, #2
   1927c:	bne	191d0 <__assert_fail@plt+0x7d08>
   19280:	b	191a8 <__assert_fail@plt+0x7ce0>
   19284:	ldr	r8, [sp, #8]
   19288:	mov	r2, r8
   1928c:	mov	r1, r5
   19290:	mov	r0, r9
   19294:	bl	172f0 <__assert_fail@plt+0x5e28>
   19298:	cmp	r0, #0
   1929c:	bne	192c0 <__assert_fail@plt+0x7df8>
   192a0:	mov	r0, r5
   192a4:	add	sp, sp, #20
   192a8:	ldrd	r4, [sp]
   192ac:	ldrd	r6, [sp, #8]
   192b0:	ldrd	r8, [sp, #16]
   192b4:	ldrd	sl, [sp, #24]
   192b8:	add	sp, sp, #32
   192bc:	pop	{pc}		; (ldr pc, [sp], #4)
   192c0:	mov	r0, r5
   192c4:	bl	18f74 <__assert_fail@plt+0x7aac>
   192c8:	b	19178 <__assert_fail@plt+0x7cb0>
   192cc:	strd	r4, [sp, #-16]!
   192d0:	str	r6, [sp, #8]
   192d4:	str	lr, [sp, #12]
   192d8:	ldr	r5, [r0]
   192dc:	ldr	r0, [r5, #56]	; 0x38
   192e0:	cmp	r0, #0
   192e4:	beq	192fc <__assert_fail@plt+0x7e34>
   192e8:	ldr	r4, [r0]
   192ec:	bl	135a4 <__assert_fail@plt+0x20dc>
   192f0:	mov	r0, r4
   192f4:	cmp	r4, #0
   192f8:	bne	192e8 <__assert_fail@plt+0x7e20>
   192fc:	mov	r4, #0
   19300:	str	r4, [r5, #56]	; 0x38
   19304:	mov	r3, #31
   19308:	str	r3, [r5, #64]	; 0x40
   1930c:	str	r4, [r5, #52]	; 0x34
   19310:	ldr	r0, [r5, #16]
   19314:	bl	135a4 <__assert_fail@plt+0x20dc>
   19318:	str	r4, [r5, #16]
   1931c:	ldrd	r4, [sp]
   19320:	ldr	r6, [sp, #8]
   19324:	add	sp, sp, #12
   19328:	pop	{pc}		; (ldr pc, [sp], #4)
   1932c:	str	r4, [sp, #-8]!
   19330:	str	lr, [sp, #4]
   19334:	mov	r4, r0
   19338:	ldr	r0, [r0, #8]
   1933c:	bl	135a4 <__assert_fail@plt+0x20dc>
   19340:	ldr	r0, [r4, #12]
   19344:	bl	135a4 <__assert_fail@plt+0x20dc>
   19348:	ldrb	r3, [r4, #75]	; 0x4b
   1934c:	cmp	r3, #0
   19350:	bne	19360 <__assert_fail@plt+0x7e98>
   19354:	ldr	r4, [sp]
   19358:	add	sp, sp, #4
   1935c:	pop	{pc}		; (ldr pc, [sp], #4)
   19360:	ldr	r0, [r4, #4]
   19364:	bl	135a4 <__assert_fail@plt+0x20dc>
   19368:	b	19354 <__assert_fail@plt+0x7e8c>
   1936c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19370:	strd	r6, [sp, #8]
   19374:	str	r8, [sp, #16]
   19378:	str	lr, [sp, #20]
   1937c:	mov	r6, r0
   19380:	ldr	r3, [r0]
   19384:	cmp	r3, #0
   19388:	beq	193b8 <__assert_fail@plt+0x7ef0>
   1938c:	ldr	r3, [r0, #8]
   19390:	cmp	r3, #0
   19394:	beq	193b8 <__assert_fail@plt+0x7ef0>
   19398:	mov	r4, #0
   1939c:	ldr	r0, [r6]
   193a0:	add	r0, r0, r4, lsl #3
   193a4:	bl	18bc4 <__assert_fail@plt+0x76fc>
   193a8:	add	r4, r4, #1
   193ac:	ldr	r3, [r6, #8]
   193b0:	cmp	r3, r4
   193b4:	bhi	1939c <__assert_fail@plt+0x7ed4>
   193b8:	ldr	r0, [r6, #12]
   193bc:	bl	135a4 <__assert_fail@plt+0x20dc>
   193c0:	ldr	r3, [r6, #8]
   193c4:	cmp	r3, #0
   193c8:	beq	19438 <__assert_fail@plt+0x7f70>
   193cc:	mov	r4, #0
   193d0:	mov	r5, r4
   193d4:	b	193ec <__assert_fail@plt+0x7f24>
   193d8:	add	r5, r5, #1
   193dc:	add	r4, r4, #12
   193e0:	ldr	r3, [r6, #8]
   193e4:	cmp	r3, r5
   193e8:	bls	19438 <__assert_fail@plt+0x7f70>
   193ec:	ldr	r3, [r6, #24]
   193f0:	cmp	r3, #0
   193f4:	beq	19404 <__assert_fail@plt+0x7f3c>
   193f8:	add	r3, r3, r4
   193fc:	ldr	r0, [r3, #8]
   19400:	bl	135a4 <__assert_fail@plt+0x20dc>
   19404:	ldr	r3, [r6, #28]
   19408:	cmp	r3, #0
   1940c:	beq	1941c <__assert_fail@plt+0x7f54>
   19410:	add	r3, r3, r4
   19414:	ldr	r0, [r3, #8]
   19418:	bl	135a4 <__assert_fail@plt+0x20dc>
   1941c:	ldr	r3, [r6, #20]
   19420:	cmp	r3, #0
   19424:	beq	193d8 <__assert_fail@plt+0x7f10>
   19428:	add	r3, r3, r4
   1942c:	ldr	r0, [r3, #8]
   19430:	bl	135a4 <__assert_fail@plt+0x20dc>
   19434:	b	193d8 <__assert_fail@plt+0x7f10>
   19438:	ldr	r0, [r6, #20]
   1943c:	bl	135a4 <__assert_fail@plt+0x20dc>
   19440:	ldr	r0, [r6, #24]
   19444:	bl	135a4 <__assert_fail@plt+0x20dc>
   19448:	ldr	r0, [r6, #28]
   1944c:	bl	135a4 <__assert_fail@plt+0x20dc>
   19450:	ldr	r0, [r6]
   19454:	bl	135a4 <__assert_fail@plt+0x20dc>
   19458:	ldr	r3, [r6, #32]
   1945c:	cmp	r3, #0
   19460:	beq	194c4 <__assert_fail@plt+0x7ffc>
   19464:	mov	r7, #0
   19468:	mov	r8, r7
   1946c:	b	1948c <__assert_fail@plt+0x7fc4>
   19470:	ldr	r0, [r5, #8]
   19474:	bl	135a4 <__assert_fail@plt+0x20dc>
   19478:	add	r8, r8, #1
   1947c:	add	r7, r7, #12
   19480:	ldr	r3, [r6, #68]	; 0x44
   19484:	cmp	r3, r8
   19488:	bcc	194c4 <__assert_fail@plt+0x7ffc>
   1948c:	ldr	r3, [r6, #32]
   19490:	add	r5, r3, r7
   19494:	ldr	r3, [r3, r7]
   19498:	cmp	r3, #0
   1949c:	ble	19470 <__assert_fail@plt+0x7fa8>
   194a0:	mov	r4, #0
   194a4:	ldr	r3, [r5, #8]
   194a8:	ldr	r0, [r3, r4, lsl #2]
   194ac:	bl	18f74 <__assert_fail@plt+0x7aac>
   194b0:	add	r4, r4, #1
   194b4:	ldr	r3, [r5]
   194b8:	cmp	r3, r4
   194bc:	bgt	194a4 <__assert_fail@plt+0x7fdc>
   194c0:	b	19470 <__assert_fail@plt+0x7fa8>
   194c4:	ldr	r0, [r6, #32]
   194c8:	bl	135a4 <__assert_fail@plt+0x20dc>
   194cc:	ldr	r0, [r6, #60]	; 0x3c
   194d0:	movw	r3, #23448	; 0x5b98
   194d4:	movt	r3, #2
   194d8:	cmp	r0, r3
   194dc:	beq	194e4 <__assert_fail@plt+0x801c>
   194e0:	bl	135a4 <__assert_fail@plt+0x20dc>
   194e4:	ldr	r0, [r6, #132]	; 0x84
   194e8:	bl	135a4 <__assert_fail@plt+0x20dc>
   194ec:	mov	r0, r6
   194f0:	bl	135a4 <__assert_fail@plt+0x20dc>
   194f4:	ldrd	r4, [sp]
   194f8:	ldrd	r6, [sp, #8]
   194fc:	ldr	r8, [sp, #16]
   19500:	add	sp, sp, #20
   19504:	pop	{pc}		; (ldr pc, [sp], #4)
   19508:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1950c:	strd	r6, [sp, #8]
   19510:	str	r8, [sp, #16]
   19514:	str	lr, [sp, #20]
   19518:	mov	r8, r0
   1951c:	ldr	r3, [r0, #124]	; 0x7c
   19520:	cmp	r3, #0
   19524:	ble	195b0 <__assert_fail@plt+0x80e8>
   19528:	mov	r7, #0
   1952c:	b	19548 <__assert_fail@plt+0x8080>
   19530:	mov	r0, r6
   19534:	bl	135a4 <__assert_fail@plt+0x20dc>
   19538:	add	r7, r7, #1
   1953c:	ldr	r3, [r8, #124]	; 0x7c
   19540:	cmp	r3, r7
   19544:	ble	195b0 <__assert_fail@plt+0x80e8>
   19548:	ldr	r3, [r8, #132]	; 0x84
   1954c:	ldr	r6, [r3, r7, lsl #2]
   19550:	ldr	r3, [r6, #16]
   19554:	cmp	r3, #0
   19558:	ble	19588 <__assert_fail@plt+0x80c0>
   1955c:	mov	r4, #0
   19560:	ldr	r3, [r6, #20]
   19564:	ldr	r5, [r3, r4, lsl #2]
   19568:	ldr	r0, [r5, #16]
   1956c:	bl	135a4 <__assert_fail@plt+0x20dc>
   19570:	mov	r0, r5
   19574:	bl	135a4 <__assert_fail@plt+0x20dc>
   19578:	add	r4, r4, #1
   1957c:	ldr	r3, [r6, #16]
   19580:	cmp	r3, r4
   19584:	bgt	19560 <__assert_fail@plt+0x8098>
   19588:	ldr	r0, [r6, #20]
   1958c:	bl	135a4 <__assert_fail@plt+0x20dc>
   19590:	ldr	r3, [r6, #8]
   19594:	cmp	r3, #0
   19598:	beq	19530 <__assert_fail@plt+0x8068>
   1959c:	ldr	r0, [r3, #8]
   195a0:	bl	135a4 <__assert_fail@plt+0x20dc>
   195a4:	ldr	r0, [r6, #8]
   195a8:	bl	135a4 <__assert_fail@plt+0x20dc>
   195ac:	b	19530 <__assert_fail@plt+0x8068>
   195b0:	mov	r3, #0
   195b4:	str	r3, [r8, #124]	; 0x7c
   195b8:	str	r3, [r8, #108]	; 0x6c
   195bc:	ldrd	r4, [sp]
   195c0:	ldrd	r6, [sp, #8]
   195c4:	ldr	r8, [sp, #16]
   195c8:	add	sp, sp, #20
   195cc:	pop	{pc}		; (ldr pc, [sp], #4)
   195d0:	strd	r4, [sp, #-16]!
   195d4:	str	r6, [sp, #8]
   195d8:	str	lr, [sp, #12]
   195dc:	mov	r4, r0
   195e0:	ldr	r0, [r0, #8]
   195e4:	add	r5, r4, #12
   195e8:	cmp	r0, r5
   195ec:	beq	195f4 <__assert_fail@plt+0x812c>
   195f0:	bl	135a4 <__assert_fail@plt+0x20dc>
   195f4:	mov	r3, #0
   195f8:	str	r3, [r4]
   195fc:	mov	r3, #16
   19600:	str	r3, [r4, #4]
   19604:	str	r5, [r4, #8]
   19608:	ldrd	r4, [sp]
   1960c:	ldr	r6, [sp, #8]
   19610:	add	sp, sp, #12
   19614:	pop	{pc}		; (ldr pc, [sp], #4)
   19618:	strd	r4, [sp, #-16]!
   1961c:	str	r6, [sp, #8]
   19620:	str	lr, [sp, #12]
   19624:	subs	r5, r0, #0
   19628:	beq	1967c <__assert_fail@plt+0x81b4>
   1962c:	ldr	r3, [r5]
   19630:	cmp	r3, #0
   19634:	ble	19674 <__assert_fail@plt+0x81ac>
   19638:	mov	r4, #0
   1963c:	mov	r6, r4
   19640:	ldr	r3, [r5, #8]
   19644:	add	r3, r3, r4
   19648:	ldr	r0, [r3, #20]
   1964c:	bl	135a4 <__assert_fail@plt+0x20dc>
   19650:	ldr	r3, [r5, #8]
   19654:	add	r3, r3, r4
   19658:	ldr	r0, [r3, #8]
   1965c:	bl	135a4 <__assert_fail@plt+0x20dc>
   19660:	add	r6, r6, #1
   19664:	add	r4, r4, #24
   19668:	ldr	r3, [r5]
   1966c:	cmp	r3, r6
   19670:	bgt	19640 <__assert_fail@plt+0x8178>
   19674:	ldr	r0, [r5, #8]
   19678:	bl	135a4 <__assert_fail@plt+0x20dc>
   1967c:	mov	r0, #0
   19680:	ldrd	r4, [sp]
   19684:	ldr	r6, [sp, #8]
   19688:	add	sp, sp, #12
   1968c:	pop	{pc}		; (ldr pc, [sp], #4)
   19690:	strd	r4, [sp, #-16]!
   19694:	str	r6, [sp, #8]
   19698:	str	lr, [sp, #12]
   1969c:	ldr	r2, [r1, #28]
   196a0:	ldrb	r3, [r1, #24]
   196a4:	sub	r3, r3, #2
   196a8:	cmp	r3, #14
   196ac:	ldrls	pc, [pc, r3, lsl #2]
   196b0:	b	197e8 <__assert_fail@plt+0x8320>
   196b4:	andeq	r9, r1, r0, lsl #16
   196b8:	andeq	r9, r1, r8, ror #15
   196bc:	andeq	r9, r1, ip, lsr #15
   196c0:	andeq	r9, r1, r8, ror #15
   196c4:	andeq	r9, r1, r8, ror #15
   196c8:	andeq	r9, r1, r8, ror #15
   196cc:	muleq	r1, r0, r7
   196d0:	muleq	r1, r0, r7
   196d4:	strdeq	r9, [r1], -r0
   196d8:	strdeq	r9, [r1], -r0
   196dc:	muleq	r1, r0, r7
   196e0:	andeq	r9, r1, r8, ror #15
   196e4:	andeq	r9, r1, r8, ror #15
   196e8:	andeq	r9, r1, r8, ror #15
   196ec:	andeq	r9, r1, r0, lsl #16
   196f0:	ldrb	r3, [r0, #88]	; 0x58
   196f4:	orr	r3, r3, #1
   196f8:	strb	r3, [r0, #88]	; 0x58
   196fc:	ldr	r3, [r1, #4]
   19700:	cmp	r3, #0
   19704:	ldrne	r3, [r3, #12]
   19708:	ldreq	r3, [r1, #16]
   1970c:	ldr	r4, [r3, #28]
   19710:	ldr	r3, [r1, #8]
   19714:	cmp	r3, #0
   19718:	ldrne	r3, [r3, #12]
   1971c:	ldreq	r3, [r1, #16]
   19720:	ldr	r5, [r3, #28]
   19724:	add	r2, r2, r2, lsl #1
   19728:	lsl	r2, r2, #2
   1972c:	ldr	r3, [r0, #20]
   19730:	add	r6, r3, r2
   19734:	mov	r1, #2
   19738:	str	r1, [r3, r2]
   1973c:	mov	r0, #8
   19740:	bl	24808 <__assert_fail@plt+0x13340>
   19744:	str	r0, [r6, #8]
   19748:	cmp	r0, #0
   1974c:	beq	19814 <__assert_fail@plt+0x834c>
   19750:	cmp	r4, r5
   19754:	beq	1977c <__assert_fail@plt+0x82b4>
   19758:	mov	r3, #2
   1975c:	str	r3, [r6, #4]
   19760:	cmp	r4, r5
   19764:	strlt	r4, [r0]
   19768:	strlt	r5, [r0, #4]
   1976c:	strge	r5, [r0]
   19770:	strge	r4, [r0, #4]
   19774:	mov	r0, #0
   19778:	b	19804 <__assert_fail@plt+0x833c>
   1977c:	mov	r3, #1
   19780:	str	r3, [r6, #4]
   19784:	str	r4, [r0]
   19788:	mov	r0, #0
   1978c:	b	19804 <__assert_fail@plt+0x833c>
   19790:	ldr	r1, [r1, #16]
   19794:	add	r2, r2, r2, lsl #1
   19798:	ldr	r0, [r0, #20]
   1979c:	ldr	r1, [r1, #28]
   197a0:	add	r0, r0, r2, lsl #2
   197a4:	bl	1725c <__assert_fail@plt+0x5d94>
   197a8:	b	19804 <__assert_fail@plt+0x833c>
   197ac:	ldr	r3, [r1, #16]
   197b0:	ldr	ip, [r3, #28]
   197b4:	ldr	r3, [r0, #12]
   197b8:	str	ip, [r3, r2, lsl #2]
   197bc:	ldrb	r3, [r1, #24]
   197c0:	cmp	r3, #4
   197c4:	movne	r0, #0
   197c8:	bne	19804 <__assert_fail@plt+0x833c>
   197cc:	ldr	r1, [r0, #12]
   197d0:	add	ip, r2, r2, lsl #1
   197d4:	ldr	r0, [r0, #20]
   197d8:	ldr	r1, [r1, r2, lsl #2]
   197dc:	add	r0, r0, ip, lsl #2
   197e0:	bl	1725c <__assert_fail@plt+0x5d94>
   197e4:	b	19804 <__assert_fail@plt+0x833c>
   197e8:	ldr	r3, [r1, #16]
   197ec:	ldr	r1, [r3, #28]
   197f0:	ldr	r3, [r0, #12]
   197f4:	str	r1, [r3, r2, lsl #2]
   197f8:	mov	r0, #0
   197fc:	b	19804 <__assert_fail@plt+0x833c>
   19800:	mov	r0, #0
   19804:	ldrd	r4, [sp]
   19808:	ldr	r6, [sp, #8]
   1980c:	add	sp, sp, #12
   19810:	pop	{pc}		; (ldr pc, [sp], #4)
   19814:	mov	r0, #12
   19818:	b	19804 <__assert_fail@plt+0x833c>
   1981c:	strd	r4, [sp, #-16]!
   19820:	str	r6, [sp, #8]
   19824:	str	lr, [sp, #12]
   19828:	mov	r4, r0
   1982c:	mov	r5, r1
   19830:	ldr	r1, [r0]
   19834:	cmp	r1, #0
   19838:	beq	19870 <__assert_fail@plt+0x83a8>
   1983c:	ldr	r3, [r0, #4]
   19840:	cmp	r3, #0
   19844:	bne	19884 <__assert_fail@plt+0x83bc>
   19848:	ldr	r3, [r0, #8]
   1984c:	str	r5, [r3]
   19850:	ldr	r3, [r0, #4]
   19854:	add	r3, r3, #1
   19858:	str	r3, [r0, #4]
   1985c:	mov	r0, #1
   19860:	ldrd	r4, [sp]
   19864:	ldr	r6, [sp, #8]
   19868:	add	sp, sp, #12
   1986c:	pop	{pc}		; (ldr pc, [sp], #4)
   19870:	mov	r1, r5
   19874:	bl	1725c <__assert_fail@plt+0x5d94>
   19878:	clz	r0, r0
   1987c:	lsr	r0, r0, #5
   19880:	b	19860 <__assert_fail@plt+0x8398>
   19884:	cmp	r1, r3
   19888:	beq	198e4 <__assert_fail@plt+0x841c>
   1988c:	ldr	r1, [r4, #8]
   19890:	ldr	r3, [r1]
   19894:	cmp	r3, r5
   19898:	ble	19908 <__assert_fail@plt+0x8440>
   1989c:	ldr	r3, [r4, #4]
   198a0:	cmp	r3, #0
   198a4:	ble	198c8 <__assert_fail@plt+0x8400>
   198a8:	sub	r2, r3, #-1073741823	; 0xc0000001
   198ac:	lsl	r2, r2, #2
   198b0:	ldr	r1, [r4, #8]
   198b4:	ldr	r0, [r1, r2]
   198b8:	str	r0, [r1, r3, lsl #2]
   198bc:	sub	r2, r2, #4
   198c0:	subs	r3, r3, #1
   198c4:	bne	198b0 <__assert_fail@plt+0x83e8>
   198c8:	ldr	r2, [r4, #8]
   198cc:	str	r5, [r2, r3, lsl #2]
   198d0:	ldr	r3, [r4, #4]
   198d4:	add	r3, r3, #1
   198d8:	str	r3, [r4, #4]
   198dc:	mov	r0, #1
   198e0:	b	19860 <__assert_fail@plt+0x8398>
   198e4:	lsl	r3, r1, #1
   198e8:	str	r3, [r0]
   198ec:	lsl	r1, r1, #3
   198f0:	ldr	r0, [r0, #8]
   198f4:	bl	24844 <__assert_fail@plt+0x1337c>
   198f8:	cmp	r0, #0
   198fc:	beq	19948 <__assert_fail@plt+0x8480>
   19900:	str	r0, [r4, #8]
   19904:	b	1988c <__assert_fail@plt+0x83c4>
   19908:	ldr	r3, [r4, #4]
   1990c:	sub	r0, r3, #-1073741823	; 0xc0000001
   19910:	lsl	r2, r0, #2
   19914:	ldr	r0, [r1, r0, lsl #2]
   19918:	cmp	r5, r0
   1991c:	bge	198c8 <__assert_fail@plt+0x8400>
   19920:	add	r2, r2, #4
   19924:	str	r0, [r1, r2]
   19928:	sub	r3, r3, #1
   1992c:	ldr	r1, [r4, #8]
   19930:	add	r0, r1, r2
   19934:	ldr	r0, [r0, #-8]
   19938:	sub	r2, r2, #4
   1993c:	cmp	r0, r5
   19940:	bgt	19924 <__assert_fail@plt+0x845c>
   19944:	b	198c8 <__assert_fail@plt+0x8400>
   19948:	mov	r0, #0
   1994c:	b	19860 <__assert_fail@plt+0x8398>
   19950:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19954:	strd	r6, [sp, #8]
   19958:	strd	r8, [sp, #16]
   1995c:	strd	sl, [sp, #24]
   19960:	str	lr, [sp, #32]
   19964:	sub	sp, sp, #20
   19968:	mov	r4, r0
   1996c:	mov	r5, r1
   19970:	mov	r6, r2
   19974:	mov	r9, r3
   19978:	ldr	r7, [sp, #56]	; 0x38
   1997c:	mov	r8, #0
   19980:	b	19b50 <__assert_fail@plt+0x8688>
   19984:	lsl	fp, r5, #2
   19988:	ldr	r3, [r4, #12]
   1998c:	ldr	r5, [r3, r5, lsl #2]
   19990:	str	r6, [sp, #12]
   19994:	add	r6, r6, r6, lsl #1
   19998:	lsl	sl, r6, #2
   1999c:	ldr	r3, [r4, #20]
   199a0:	add	r3, r3, sl
   199a4:	str	r8, [r3, #4]
   199a8:	mov	r2, r7
   199ac:	mov	r1, r5
   199b0:	mov	r0, r4
   199b4:	bl	18ed0 <__assert_fail@plt+0x7a08>
   199b8:	mov	r6, r0
   199bc:	cmn	r0, #1
   199c0:	beq	19c48 <__assert_fail@plt+0x8780>
   199c4:	ldr	r3, [r4, #12]
   199c8:	ldr	r2, [r3, fp]
   199cc:	ldr	r1, [sp, #12]
   199d0:	str	r2, [r3, r1, lsl #2]
   199d4:	ldr	r0, [r4, #20]
   199d8:	mov	r1, r6
   199dc:	add	r0, r0, sl
   199e0:	bl	1981c <__assert_fail@plt+0x8354>
   199e4:	cmp	r0, #0
   199e8:	bne	19b50 <__assert_fail@plt+0x8688>
   199ec:	mov	r0, #12
   199f0:	b	19c74 <__assert_fail@plt+0x87ac>
   199f4:	ldr	r3, [r4, #12]
   199f8:	ldr	r2, [r3, r5, lsl #2]
   199fc:	str	r2, [r3, r6, lsl #2]
   19a00:	b	19c74 <__assert_fail@plt+0x87ac>
   19a04:	ldr	r2, [r2, #8]
   19a08:	ldr	fp, [r2]
   19a0c:	add	sl, r6, r6, lsl #1
   19a10:	lsl	sl, sl, #2
   19a14:	add	r3, r3, sl
   19a18:	str	r8, [r3, #4]
   19a1c:	cmp	r5, r9
   19a20:	movne	r3, #0
   19a24:	moveq	r3, #1
   19a28:	cmp	r5, r6
   19a2c:	moveq	r3, #0
   19a30:	cmp	r3, #0
   19a34:	bne	19a88 <__assert_fail@plt+0x85c0>
   19a38:	ldr	r3, [r4]
   19a3c:	add	r1, r3, r1
   19a40:	ldr	r3, [r1, #4]
   19a44:	ubfx	r3, r3, #8, #10
   19a48:	orr	r7, r7, r3
   19a4c:	mov	r2, r7
   19a50:	mov	r1, fp
   19a54:	mov	r0, r4
   19a58:	bl	18ed0 <__assert_fail@plt+0x7a08>
   19a5c:	mov	r6, r0
   19a60:	cmn	r0, #1
   19a64:	beq	19c50 <__assert_fail@plt+0x8788>
   19a68:	ldr	r0, [r4, #20]
   19a6c:	mov	r1, r6
   19a70:	add	r0, r0, sl
   19a74:	bl	1981c <__assert_fail@plt+0x8354>
   19a78:	cmp	r0, #0
   19a7c:	beq	19aa8 <__assert_fail@plt+0x85e0>
   19a80:	mov	r5, fp
   19a84:	b	19b50 <__assert_fail@plt+0x8688>
   19a88:	ldr	r0, [r4, #20]
   19a8c:	mov	r1, fp
   19a90:	add	r0, r0, sl
   19a94:	bl	1981c <__assert_fail@plt+0x8354>
   19a98:	cmp	r0, #0
   19a9c:	movne	r0, #0
   19aa0:	moveq	r0, #12
   19aa4:	b	19c74 <__assert_fail@plt+0x87ac>
   19aa8:	mov	r0, #12
   19aac:	b	19c74 <__assert_fail@plt+0x87ac>
   19ab0:	sub	r1, r1, #1
   19ab4:	add	r2, r2, r0
   19ab8:	ldrb	r3, [r2, #6]
   19abc:	ubfx	r3, r3, #2, #1
   19ac0:	cmp	r1, #0
   19ac4:	movle	r3, #0
   19ac8:	andgt	r3, r3, #1
   19acc:	cmp	r3, #0
   19ad0:	beq	19be8 <__assert_fail@plt+0x8720>
   19ad4:	ldr	r3, [ip, #-4]!
   19ad8:	cmp	r5, r3
   19adc:	bne	19ab0 <__assert_fail@plt+0x85e8>
   19ae0:	ldr	r3, [r2, #4]
   19ae4:	ubfx	r3, r3, #8, #10
   19ae8:	cmp	r7, r3
   19aec:	bne	19ab0 <__assert_fail@plt+0x85e8>
   19af0:	cmn	r1, #1
   19af4:	beq	19be8 <__assert_fail@plt+0x8720>
   19af8:	ldr	r0, [r4, #20]
   19afc:	add	r0, r0, fp
   19b00:	bl	1981c <__assert_fail@plt+0x8354>
   19b04:	cmp	r0, #0
   19b08:	beq	19c68 <__assert_fail@plt+0x87a0>
   19b0c:	ldr	r3, [r4, #20]
   19b10:	add	sl, r3, sl
   19b14:	ldr	r3, [sl, #8]
   19b18:	ldr	r5, [r3, #4]
   19b1c:	mov	r2, r7
   19b20:	mov	r1, r5
   19b24:	mov	r0, r4
   19b28:	bl	18ed0 <__assert_fail@plt+0x7a08>
   19b2c:	mov	r6, r0
   19b30:	cmn	r0, #1
   19b34:	beq	19c70 <__assert_fail@plt+0x87a8>
   19b38:	ldr	r0, [r4, #20]
   19b3c:	mov	r1, r6
   19b40:	add	r0, r0, fp
   19b44:	bl	1981c <__assert_fail@plt+0x8354>
   19b48:	cmp	r0, #0
   19b4c:	beq	19c40 <__assert_fail@plt+0x8778>
   19b50:	lsl	r1, r5, #3
   19b54:	ldr	r3, [r4]
   19b58:	add	r3, r3, r1
   19b5c:	ldrb	r3, [r3, #4]
   19b60:	cmp	r3, #4
   19b64:	beq	19984 <__assert_fail@plt+0x84bc>
   19b68:	ldr	r3, [r4, #20]
   19b6c:	add	sl, r5, r5, lsl #1
   19b70:	lsl	sl, sl, #2
   19b74:	add	r2, r3, sl
   19b78:	ldr	r0, [r2, #4]
   19b7c:	cmp	r0, #0
   19b80:	beq	199f4 <__assert_fail@plt+0x852c>
   19b84:	cmp	r0, #1
   19b88:	beq	19a04 <__assert_fail@plt+0x853c>
   19b8c:	ldr	r2, [r2, #8]
   19b90:	ldr	r5, [r2]
   19b94:	add	r6, r6, r6, lsl #1
   19b98:	lsl	fp, r6, #2
   19b9c:	add	r3, r3, fp
   19ba0:	str	r8, [r3, #4]
   19ba4:	ldr	lr, [r4, #8]
   19ba8:	sub	r1, lr, #1
   19bac:	ldr	r0, [r4]
   19bb0:	add	r2, r0, r1, lsl #3
   19bb4:	ldrb	r3, [r2, #6]
   19bb8:	ubfx	r3, r3, #2, #1
   19bbc:	cmp	r1, #0
   19bc0:	movle	r3, #0
   19bc4:	andgt	r3, r3, #1
   19bc8:	cmp	r3, #0
   19bcc:	beq	19be8 <__assert_fail@plt+0x8720>
   19bd0:	ldr	ip, [r4, #16]
   19bd4:	add	ip, ip, lr, lsl #2
   19bd8:	add	r0, r0, lr, lsl #3
   19bdc:	sub	r0, r0, r2
   19be0:	sub	r0, r0, #16
   19be4:	b	19ad4 <__assert_fail@plt+0x860c>
   19be8:	mov	r2, r7
   19bec:	mov	r1, r5
   19bf0:	mov	r0, r4
   19bf4:	bl	18ed0 <__assert_fail@plt+0x7a08>
   19bf8:	mov	r6, r0
   19bfc:	cmn	r0, #1
   19c00:	beq	19c58 <__assert_fail@plt+0x8790>
   19c04:	ldr	r0, [r4, #20]
   19c08:	mov	r1, r6
   19c0c:	add	r0, r0, fp
   19c10:	bl	1981c <__assert_fail@plt+0x8354>
   19c14:	cmp	r0, #0
   19c18:	beq	19c60 <__assert_fail@plt+0x8798>
   19c1c:	str	r7, [sp]
   19c20:	mov	r3, r9
   19c24:	mov	r2, r6
   19c28:	mov	r1, r5
   19c2c:	mov	r0, r4
   19c30:	bl	19950 <__assert_fail@plt+0x8488>
   19c34:	cmp	r0, #0
   19c38:	beq	19b0c <__assert_fail@plt+0x8644>
   19c3c:	b	19c74 <__assert_fail@plt+0x87ac>
   19c40:	mov	r0, #12
   19c44:	b	19c74 <__assert_fail@plt+0x87ac>
   19c48:	mov	r0, #12
   19c4c:	b	19c74 <__assert_fail@plt+0x87ac>
   19c50:	mov	r0, #12
   19c54:	b	19c74 <__assert_fail@plt+0x87ac>
   19c58:	mov	r0, #12
   19c5c:	b	19c74 <__assert_fail@plt+0x87ac>
   19c60:	mov	r0, #12
   19c64:	b	19c74 <__assert_fail@plt+0x87ac>
   19c68:	mov	r0, #12
   19c6c:	b	19c74 <__assert_fail@plt+0x87ac>
   19c70:	mov	r0, #12
   19c74:	add	sp, sp, #20
   19c78:	ldrd	r4, [sp]
   19c7c:	ldrd	r6, [sp, #8]
   19c80:	ldrd	r8, [sp, #16]
   19c84:	ldrd	sl, [sp, #24]
   19c88:	add	sp, sp, #32
   19c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   19c90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19c94:	strd	r6, [sp, #8]
   19c98:	strd	r8, [sp, #16]
   19c9c:	str	sl, [sp, #24]
   19ca0:	str	lr, [sp, #28]
   19ca4:	sub	sp, sp, #8
   19ca8:	mov	r6, r0
   19cac:	mov	r7, r1
   19cb0:	mov	r4, r2
   19cb4:	mov	r9, r3
   19cb8:	ldr	r8, [sp, #40]	; 0x28
   19cbc:	b	19d08 <__assert_fail@plt+0x8840>
   19cc0:	mov	r1, r4
   19cc4:	mov	r0, r7
   19cc8:	bl	1981c <__assert_fail@plt+0x8354>
   19ccc:	cmp	r0, #0
   19cd0:	beq	19d90 <__assert_fail@plt+0x88c8>
   19cd4:	add	r5, r5, r5, lsl #1
   19cd8:	lsl	r5, r5, #2
   19cdc:	ldr	r3, [r6, #20]
   19ce0:	add	r3, r3, r5
   19ce4:	ldr	sl, [r3, #4]
   19ce8:	cmp	sl, #0
   19cec:	beq	19d94 <__assert_fail@plt+0x88cc>
   19cf0:	cmp	sl, #2
   19cf4:	beq	19d60 <__assert_fail@plt+0x8898>
   19cf8:	ldr	r3, [r6, #20]
   19cfc:	add	r5, r3, r5
   19d00:	ldr	r3, [r5, #8]
   19d04:	ldr	r4, [r3]
   19d08:	mov	r1, r4
   19d0c:	mov	r0, r7
   19d10:	bl	16194 <__assert_fail@plt+0x4ccc>
   19d14:	subs	sl, r0, #0
   19d18:	bne	19d88 <__assert_fail@plt+0x88c0>
   19d1c:	mov	r5, r4
   19d20:	ldr	r3, [r6]
   19d24:	add	r2, r3, r4, lsl #3
   19d28:	ldrb	r2, [r2, #4]
   19d2c:	cmp	r2, r8
   19d30:	bne	19cc0 <__assert_fail@plt+0x87f8>
   19d34:	ldr	r3, [r3, r4, lsl #3]
   19d38:	cmp	r3, r9
   19d3c:	bne	19cc0 <__assert_fail@plt+0x87f8>
   19d40:	cmp	r8, #9
   19d44:	bne	19d94 <__assert_fail@plt+0x88cc>
   19d48:	mov	r1, r4
   19d4c:	mov	r0, r7
   19d50:	bl	1981c <__assert_fail@plt+0x8354>
   19d54:	cmp	r0, #0
   19d58:	moveq	sl, #12
   19d5c:	b	19d94 <__assert_fail@plt+0x88cc>
   19d60:	ldr	r3, [r3, #8]
   19d64:	ldr	r2, [r3, #4]
   19d68:	str	r8, [sp]
   19d6c:	mov	r3, r9
   19d70:	mov	r1, r7
   19d74:	mov	r0, r6
   19d78:	bl	19c90 <__assert_fail@plt+0x87c8>
   19d7c:	subs	sl, r0, #0
   19d80:	beq	19cf8 <__assert_fail@plt+0x8830>
   19d84:	b	19d94 <__assert_fail@plt+0x88cc>
   19d88:	mov	sl, #0
   19d8c:	b	19d94 <__assert_fail@plt+0x88cc>
   19d90:	mov	sl, #12
   19d94:	mov	r0, sl
   19d98:	add	sp, sp, #8
   19d9c:	ldrd	r4, [sp]
   19da0:	ldrd	r6, [sp, #8]
   19da4:	ldrd	r8, [sp, #16]
   19da8:	ldr	sl, [sp, #24]
   19dac:	add	sp, sp, #28
   19db0:	pop	{pc}		; (ldr pc, [sp], #4)
   19db4:	strd	r4, [sp, #-16]!
   19db8:	str	r6, [sp, #8]
   19dbc:	str	lr, [sp, #12]
   19dc0:	subs	r6, r1, #0
   19dc4:	moveq	r2, #0
   19dc8:	beq	19f30 <__assert_fail@plt+0x8a68>
   19dcc:	ldr	r2, [r6, #4]
   19dd0:	cmp	r2, #0
   19dd4:	beq	19f30 <__assert_fail@plt+0x8a68>
   19dd8:	mov	r4, r0
   19ddc:	ldr	r1, [r0]
   19de0:	ldr	r3, [r0, #4]
   19de4:	add	r0, r3, r2, lsl #1
   19de8:	cmp	r1, r0
   19dec:	blt	19e0c <__assert_fail@plt+0x8944>
   19df0:	cmp	r3, #0
   19df4:	beq	19e40 <__assert_fail@plt+0x8978>
   19df8:	ldr	r2, [r6, #4]
   19dfc:	add	r5, r3, r2, lsl #1
   19e00:	sub	r2, r2, #1
   19e04:	sub	r3, r3, #1
   19e08:	b	19e78 <__assert_fail@plt+0x89b0>
   19e0c:	add	r1, r2, r1
   19e10:	lsl	r5, r1, #1
   19e14:	lsl	r1, r1, #3
   19e18:	ldr	r0, [r4, #8]
   19e1c:	bl	24844 <__assert_fail@plt+0x1337c>
   19e20:	cmp	r0, #0
   19e24:	beq	19f5c <__assert_fail@plt+0x8a94>
   19e28:	str	r0, [r4, #8]
   19e2c:	str	r5, [r4]
   19e30:	ldr	r3, [r4, #4]
   19e34:	cmp	r3, #0
   19e38:	bne	19df8 <__assert_fail@plt+0x8930>
   19e3c:	b	19e44 <__assert_fail@plt+0x897c>
   19e40:	ldr	r0, [r4, #8]
   19e44:	ldr	r3, [r6, #4]
   19e48:	str	r3, [r4, #4]
   19e4c:	ldr	r2, [r6, #4]
   19e50:	lsl	r2, r2, #2
   19e54:	ldr	r1, [r6, #8]
   19e58:	bl	11204 <memcpy@plt>
   19e5c:	mov	r2, #0
   19e60:	b	19f30 <__assert_fail@plt+0x8a68>
   19e64:	cmp	r0, r1
   19e68:	sublt	r2, r2, #1
   19e6c:	sublt	r5, r5, #1
   19e70:	strlt	r1, [ip, r5, lsl #2]
   19e74:	subge	r3, r3, #1
   19e78:	cmp	r2, #0
   19e7c:	cmpge	r3, #0
   19e80:	blt	19ea8 <__assert_fail@plt+0x89e0>
   19e84:	ldr	ip, [r4, #8]
   19e88:	ldr	r0, [ip, r3, lsl #2]
   19e8c:	ldr	r1, [r6, #8]
   19e90:	ldr	r1, [r1, r2, lsl #2]
   19e94:	cmp	r0, r1
   19e98:	subeq	r2, r2, #1
   19e9c:	subeq	r3, r3, #1
   19ea0:	bne	19e64 <__assert_fail@plt+0x899c>
   19ea4:	b	19e78 <__assert_fail@plt+0x89b0>
   19ea8:	cmp	r2, #0
   19eac:	bge	19ed8 <__assert_fail@plt+0x8a10>
   19eb0:	ldr	r3, [r4, #4]
   19eb4:	ldr	r2, [r6, #4]
   19eb8:	add	r2, r3, r2, lsl #1
   19ebc:	sub	lr, r2, #1
   19ec0:	subs	r2, r2, r5
   19ec4:	beq	19f30 <__assert_fail@plt+0x8a68>
   19ec8:	sub	ip, r3, #1
   19ecc:	add	r3, r3, r2
   19ed0:	str	r3, [r4, #4]
   19ed4:	b	19f08 <__assert_fail@plt+0x8a40>
   19ed8:	add	r2, r2, #1
   19edc:	sub	r5, r5, r2
   19ee0:	ldr	r0, [r4, #8]
   19ee4:	lsl	r2, r2, #2
   19ee8:	ldr	r1, [r6, #8]
   19eec:	add	r0, r0, r5, lsl #2
   19ef0:	bl	11204 <memcpy@plt>
   19ef4:	b	19eb0 <__assert_fail@plt+0x89e8>
   19ef8:	add	r0, ip, r2
   19efc:	str	r1, [r3, r0, lsl #2]
   19f00:	subs	ip, ip, #1
   19f04:	bmi	19f44 <__assert_fail@plt+0x8a7c>
   19f08:	ldr	r3, [r4, #8]
   19f0c:	ldr	r0, [r3, lr, lsl #2]
   19f10:	ldr	r1, [r3, ip, lsl #2]
   19f14:	cmp	r0, r1
   19f18:	ble	19ef8 <__assert_fail@plt+0x8a30>
   19f1c:	sub	lr, lr, #1
   19f20:	add	r1, ip, r2
   19f24:	str	r0, [r3, r1, lsl #2]
   19f28:	subs	r2, r2, #1
   19f2c:	bne	19f08 <__assert_fail@plt+0x8a40>
   19f30:	mov	r0, r2
   19f34:	ldrd	r4, [sp]
   19f38:	ldr	r6, [sp, #8]
   19f3c:	add	sp, sp, #12
   19f40:	pop	{pc}		; (ldr pc, [sp], #4)
   19f44:	ldr	r0, [r4, #8]
   19f48:	lsl	r2, r2, #2
   19f4c:	add	r1, r0, r5, lsl #2
   19f50:	bl	11204 <memcpy@plt>
   19f54:	mov	r2, #0
   19f58:	b	19f30 <__assert_fail@plt+0x8a68>
   19f5c:	mov	r2, #12
   19f60:	b	19f30 <__assert_fail@plt+0x8a68>
   19f64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19f68:	strd	r6, [sp, #8]
   19f6c:	strd	r8, [sp, #16]
   19f70:	strd	sl, [sp, #24]
   19f74:	str	lr, [sp, #32]
   19f78:	sub	sp, sp, #44	; 0x2c
   19f7c:	mov	sl, r0
   19f80:	mov	r4, r1
   19f84:	mov	r5, r2
   19f88:	mov	fp, r3
   19f8c:	add	r7, r2, r2, lsl #1
   19f90:	lsl	r7, r7, #2
   19f94:	ldr	r3, [r1, #20]
   19f98:	add	r3, r3, r7
   19f9c:	ldr	r1, [r3, #4]
   19fa0:	add	r1, r1, #1
   19fa4:	add	r0, sp, #28
   19fa8:	bl	172b4 <__assert_fail@plt+0x5dec>
   19fac:	subs	r9, r0, #0
   19fb0:	bne	1a178 <__assert_fail@plt+0x8cb0>
   19fb4:	mov	r8, r7
   19fb8:	ldr	r3, [sp, #32]
   19fbc:	add	r2, r3, #1
   19fc0:	str	r2, [sp, #32]
   19fc4:	ldr	r2, [sp, #36]	; 0x24
   19fc8:	str	r5, [r2, r3, lsl #2]
   19fcc:	ldr	r3, [r4, #24]
   19fd0:	add	r3, r3, r7
   19fd4:	mvn	r2, #0
   19fd8:	str	r2, [r3, #4]
   19fdc:	ldr	r2, [r4]
   19fe0:	lsl	r6, r5, #3
   19fe4:	add	r1, r2, r6
   19fe8:	ldr	r0, [r1, #4]
   19fec:	mov	r3, #65280	; 0xff00
   19ff0:	movt	r3, #3
   19ff4:	and	r3, r3, r0
   19ff8:	cmp	r3, #0
   19ffc:	beq	1a02c <__assert_fail@plt+0x8b64>
   1a000:	ldr	r3, [r4, #20]
   1a004:	add	r3, r3, r7
   1a008:	ldr	r0, [r3, #4]
   1a00c:	cmp	r0, #0
   1a010:	beq	1a198 <__assert_fail@plt+0x8cd0>
   1a014:	ldr	r3, [r3, #8]
   1a018:	ldr	r3, [r3]
   1a01c:	add	r2, r2, r3, lsl #3
   1a020:	ldrb	r3, [r2, #6]
   1a024:	tst	r3, #4
   1a028:	beq	1a064 <__assert_fail@plt+0x8b9c>
   1a02c:	ldr	r3, [r4]
   1a030:	add	r6, r3, r6
   1a034:	ldrb	r3, [r6, #4]
   1a038:	tst	r3, #8
   1a03c:	beq	1a198 <__assert_fail@plt+0x8cd0>
   1a040:	ldr	r3, [r4, #20]
   1a044:	add	r3, r3, r7
   1a048:	ldr	r2, [r3, #4]
   1a04c:	cmp	r2, #0
   1a050:	ble	1a198 <__assert_fail@plt+0x8cd0>
   1a054:	mov	r6, r9
   1a058:	mov	r2, #0
   1a05c:	str	r2, [sp, #12]
   1a060:	b	1a0d8 <__assert_fail@plt+0x8c10>
   1a064:	ldr	r3, [r1, #4]
   1a068:	ubfx	r3, r3, #8, #10
   1a06c:	str	r3, [sp]
   1a070:	mov	r3, r5
   1a074:	mov	r2, r5
   1a078:	mov	r1, r5
   1a07c:	mov	r0, r4
   1a080:	bl	19950 <__assert_fail@plt+0x8488>
   1a084:	cmp	r0, #0
   1a088:	beq	1a02c <__assert_fail@plt+0x8b64>
   1a08c:	mov	r9, r0
   1a090:	b	1a178 <__assert_fail@plt+0x8cb0>
   1a094:	mov	r1, r4
   1a098:	add	r0, sp, #16
   1a09c:	bl	19f64 <__assert_fail@plt+0x8a9c>
   1a0a0:	cmp	r0, #0
   1a0a4:	beq	1a11c <__assert_fail@plt+0x8c54>
   1a0a8:	mov	r9, r0
   1a0ac:	b	1a178 <__assert_fail@plt+0x8cb0>
   1a0b0:	ldr	r0, [sp, #24]
   1a0b4:	bl	135a4 <__assert_fail@plt+0x20dc>
   1a0b8:	mov	r3, #1
   1a0bc:	str	r3, [sp, #12]
   1a0c0:	add	r6, r6, #1
   1a0c4:	ldr	r3, [r4, #20]
   1a0c8:	add	r3, r3, r8
   1a0cc:	ldr	r2, [r3, #4]
   1a0d0:	cmp	r2, r6
   1a0d4:	ble	1a148 <__assert_fail@plt+0x8c80>
   1a0d8:	ldr	r3, [r3, #8]
   1a0dc:	ldr	r2, [r3, r6, lsl #2]
   1a0e0:	add	r5, r2, r2, lsl #1
   1a0e4:	lsl	r5, r5, #2
   1a0e8:	ldr	r0, [r4, #24]
   1a0ec:	add	r1, r0, r5
   1a0f0:	ldr	r3, [r1, #4]
   1a0f4:	cmn	r3, #1
   1a0f8:	moveq	r3, #1
   1a0fc:	streq	r3, [sp, #12]
   1a100:	beq	1a0c0 <__assert_fail@plt+0x8bf8>
   1a104:	cmp	r3, #0
   1a108:	beq	1a094 <__assert_fail@plt+0x8bcc>
   1a10c:	ldrd	r2, [r0, r5]
   1a110:	strd	r2, [sp, #16]
   1a114:	ldr	r3, [r1, #8]
   1a118:	str	r3, [sp, #24]
   1a11c:	add	r1, sp, #16
   1a120:	add	r0, sp, #28
   1a124:	bl	19db4 <__assert_fail@plt+0x88ec>
   1a128:	cmp	r0, #0
   1a12c:	bne	1a0a8 <__assert_fail@plt+0x8be0>
   1a130:	ldr	r3, [r4, #24]
   1a134:	add	r5, r3, r5
   1a138:	ldr	r3, [r5, #4]
   1a13c:	cmp	r3, #0
   1a140:	bne	1a0c0 <__assert_fail@plt+0x8bf8>
   1a144:	b	1a0b0 <__assert_fail@plt+0x8be8>
   1a148:	eor	fp, fp, #1
   1a14c:	ldr	r3, [sp, #12]
   1a150:	tst	r3, fp
   1a154:	beq	1a198 <__assert_fail@plt+0x8cd0>
   1a158:	ldr	r3, [r4, #24]
   1a15c:	add	r7, r3, r7
   1a160:	mov	r3, #0
   1a164:	str	r3, [r7, #4]
   1a168:	ldrd	r2, [sp, #28]
   1a16c:	strd	r2, [sl]
   1a170:	ldr	r3, [sp, #36]	; 0x24
   1a174:	str	r3, [sl, #8]
   1a178:	mov	r0, r9
   1a17c:	add	sp, sp, #44	; 0x2c
   1a180:	ldrd	r4, [sp]
   1a184:	ldrd	r6, [sp, #8]
   1a188:	ldrd	r8, [sp, #16]
   1a18c:	ldrd	sl, [sp, #24]
   1a190:	add	sp, sp, #32
   1a194:	pop	{pc}		; (ldr pc, [sp], #4)
   1a198:	ldr	r1, [r4, #24]
   1a19c:	add	r0, r1, r7
   1a1a0:	ldrd	r2, [sp, #28]
   1a1a4:	strd	r2, [r1, r7]
   1a1a8:	ldr	r3, [sp, #36]	; 0x24
   1a1ac:	str	r3, [r0, #8]
   1a1b0:	b	1a168 <__assert_fail@plt+0x8ca0>
   1a1b4:	strd	r4, [sp, #-16]!
   1a1b8:	str	r6, [sp, #8]
   1a1bc:	str	lr, [sp, #12]
   1a1c0:	mov	r5, r0
   1a1c4:	cmp	r1, #0
   1a1c8:	ldrlt	r0, [r0, #60]	; 0x3c
   1a1cc:	blt	1a20c <__assert_fail@plt+0x8d44>
   1a1d0:	ldr	r3, [r5, #48]	; 0x30
   1a1d4:	cmp	r3, r1
   1a1d8:	beq	1a21c <__assert_fail@plt+0x8d54>
   1a1dc:	ldr	r3, [r5, #80]	; 0x50
   1a1e0:	cmp	r3, #1
   1a1e4:	ble	1a284 <__assert_fail@plt+0x8dbc>
   1a1e8:	ldr	r3, [r5, #8]
   1a1ec:	add	r3, r3, r1, lsl #2
   1a1f0:	ldr	r4, [r3], #-4
   1a1f4:	cmn	r4, #1
   1a1f8:	bne	1a230 <__assert_fail@plt+0x8d68>
   1a1fc:	sub	r1, r1, #1
   1a200:	cmn	r1, #1
   1a204:	bne	1a1f0 <__assert_fail@plt+0x8d28>
   1a208:	ldr	r0, [r5, #60]	; 0x3c
   1a20c:	ldrd	r4, [sp]
   1a210:	ldr	r6, [sp, #8]
   1a214:	add	sp, sp, #12
   1a218:	pop	{pc}		; (ldr pc, [sp], #4)
   1a21c:	and	r2, r2, #2
   1a220:	cmp	r2, #0
   1a224:	movne	r0, #8
   1a228:	moveq	r0, #10
   1a22c:	b	1a20c <__assert_fail@plt+0x8d44>
   1a230:	ldrb	r3, [r5, #78]	; 0x4e
   1a234:	cmp	r3, #0
   1a238:	bne	1a25c <__assert_fail@plt+0x8d94>
   1a23c:	cmp	r4, #10
   1a240:	movne	r0, #0
   1a244:	bne	1a20c <__assert_fail@plt+0x8d44>
   1a248:	ldrb	r3, [r5, #77]	; 0x4d
   1a24c:	cmp	r3, #0
   1a250:	moveq	r0, #0
   1a254:	movne	r0, #2
   1a258:	b	1a20c <__assert_fail@plt+0x8d44>
   1a25c:	mov	r0, r4
   1a260:	bl	113cc <iswalnum@plt>
   1a264:	adds	r3, r0, #0
   1a268:	movne	r3, #1
   1a26c:	cmp	r4, #95	; 0x5f
   1a270:	orreq	r3, r3, #1
   1a274:	cmp	r3, #0
   1a278:	movne	r0, #1
   1a27c:	bne	1a20c <__assert_fail@plt+0x8d44>
   1a280:	b	1a23c <__assert_fail@plt+0x8d74>
   1a284:	ldr	r3, [r5, #4]
   1a288:	ldrb	r3, [r3, r1]
   1a28c:	asr	r0, r3, #5
   1a290:	ldr	r1, [r5, #68]	; 0x44
   1a294:	and	r2, r3, #31
   1a298:	ldr	r0, [r1, r0, lsl #2]
   1a29c:	lsr	r0, r0, r2
   1a2a0:	ands	r0, r0, #1
   1a2a4:	bne	1a20c <__assert_fail@plt+0x8d44>
   1a2a8:	cmp	r3, #10
   1a2ac:	bne	1a20c <__assert_fail@plt+0x8d44>
   1a2b0:	ldrb	r3, [r5, #77]	; 0x4d
   1a2b4:	cmp	r3, #0
   1a2b8:	movne	r0, #2
   1a2bc:	b	1a20c <__assert_fail@plt+0x8d44>
   1a2c0:	str	r4, [sp, #-8]!
   1a2c4:	str	lr, [sp, #4]
   1a2c8:	ldr	r3, [r0, #4]
   1a2cc:	ldrb	ip, [r3, r2]
   1a2d0:	ldrb	r3, [r1, #4]
   1a2d4:	sub	r3, r3, #1
   1a2d8:	cmp	r3, #6
   1a2dc:	ldrls	pc, [pc, r3, lsl #2]
   1a2e0:	b	1a408 <__assert_fail@plt+0x8f40>
   1a2e4:	andeq	sl, r1, r0, lsl #6
   1a2e8:	andeq	sl, r1, r8, lsl #8
   1a2ec:	andeq	sl, r1, r4, lsl r3
   1a2f0:	andeq	sl, r1, r8, lsl #8
   1a2f4:	muleq	r1, r4, r3
   1a2f8:	andeq	sl, r1, r8, lsl #8
   1a2fc:	andeq	sl, r1, r8, lsl #7
   1a300:	ldrb	r3, [r1]
   1a304:	cmp	r3, ip
   1a308:	movne	r0, #0
   1a30c:	bne	1a40c <__assert_fail@plt+0x8f44>
   1a310:	b	1a330 <__assert_fail@plt+0x8e68>
   1a314:	lsr	lr, ip, #5
   1a318:	ldr	r3, [r1]
   1a31c:	and	ip, ip, #31
   1a320:	ldr	r3, [r3, lr, lsl #2]
   1a324:	lsr	ip, r3, ip
   1a328:	tst	ip, #1
   1a32c:	beq	1a418 <__assert_fail@plt+0x8f50>
   1a330:	ldr	ip, [r1, #4]
   1a334:	mov	r3, #65280	; 0xff00
   1a338:	movt	r3, #3
   1a33c:	and	r3, r3, ip
   1a340:	cmp	r3, #0
   1a344:	moveq	r0, #1
   1a348:	beq	1a40c <__assert_fail@plt+0x8f44>
   1a34c:	mov	r3, r2
   1a350:	mov	r4, r1
   1a354:	ldr	r2, [r0, #88]	; 0x58
   1a358:	mov	r1, r3
   1a35c:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1a360:	ldr	r3, [r4, #4]
   1a364:	ubfx	r3, r3, #8, #10
   1a368:	tst	r3, #4
   1a36c:	beq	1a3d4 <__assert_fail@plt+0x8f0c>
   1a370:	tst	r0, #1
   1a374:	beq	1a420 <__assert_fail@plt+0x8f58>
   1a378:	tst	r3, #8
   1a37c:	beq	1a3e4 <__assert_fail@plt+0x8f1c>
   1a380:	mov	r0, #0
   1a384:	b	1a40c <__assert_fail@plt+0x8f44>
   1a388:	tst	ip, #128	; 0x80
   1a38c:	movne	r0, #0
   1a390:	bne	1a40c <__assert_fail@plt+0x8f44>
   1a394:	cmp	ip, #10
   1a398:	beq	1a3bc <__assert_fail@plt+0x8ef4>
   1a39c:	cmp	ip, #0
   1a3a0:	bne	1a330 <__assert_fail@plt+0x8e68>
   1a3a4:	ldr	r3, [r0, #84]	; 0x54
   1a3a8:	ldr	r3, [r3, #128]	; 0x80
   1a3ac:	tst	r3, #128	; 0x80
   1a3b0:	movne	r0, #0
   1a3b4:	beq	1a330 <__assert_fail@plt+0x8e68>
   1a3b8:	b	1a40c <__assert_fail@plt+0x8f44>
   1a3bc:	ldr	r3, [r0, #84]	; 0x54
   1a3c0:	ldr	r3, [r3, #128]	; 0x80
   1a3c4:	tst	r3, #64	; 0x40
   1a3c8:	bne	1a330 <__assert_fail@plt+0x8e68>
   1a3cc:	mov	r0, #0
   1a3d0:	b	1a40c <__assert_fail@plt+0x8f44>
   1a3d4:	tst	r3, #8
   1a3d8:	beq	1a3e4 <__assert_fail@plt+0x8f1c>
   1a3dc:	tst	r0, #1
   1a3e0:	bne	1a428 <__assert_fail@plt+0x8f60>
   1a3e4:	tst	r3, #32
   1a3e8:	beq	1a3f8 <__assert_fail@plt+0x8f30>
   1a3ec:	tst	r0, #2
   1a3f0:	moveq	r0, #0
   1a3f4:	beq	1a40c <__assert_fail@plt+0x8f44>
   1a3f8:	tst	r3, #128	; 0x80
   1a3fc:	ubfxne	r0, r0, #3, #1
   1a400:	moveq	r0, #1
   1a404:	b	1a40c <__assert_fail@plt+0x8f44>
   1a408:	mov	r0, #0
   1a40c:	ldr	r4, [sp]
   1a410:	add	sp, sp, #4
   1a414:	pop	{pc}		; (ldr pc, [sp], #4)
   1a418:	mov	r0, #0
   1a41c:	b	1a40c <__assert_fail@plt+0x8f44>
   1a420:	mov	r0, #0
   1a424:	b	1a40c <__assert_fail@plt+0x8f44>
   1a428:	mov	r0, #0
   1a42c:	b	1a40c <__assert_fail@plt+0x8f44>
   1a430:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a434:	strd	r6, [sp, #8]
   1a438:	strd	r8, [sp, #16]
   1a43c:	strd	sl, [sp, #24]
   1a440:	str	lr, [sp, #32]
   1a444:	sub	sp, sp, #4
   1a448:	ldr	r7, [r0, #84]	; 0x54
   1a44c:	ldr	r3, [r1, #4]
   1a450:	cmp	r3, #0
   1a454:	ble	1a554 <__assert_fail@plt+0x908c>
   1a458:	mov	r9, r2
   1a45c:	mov	r6, r1
   1a460:	mov	r8, r0
   1a464:	mov	r4, #0
   1a468:	b	1a49c <__assert_fail@plt+0x8fd4>
   1a46c:	lsl	sl, r1, #1
   1a470:	lsl	r1, r1, #3
   1a474:	bl	24844 <__assert_fail@plt+0x1337c>
   1a478:	cmp	r0, #0
   1a47c:	beq	1a55c <__assert_fail@plt+0x9094>
   1a480:	str	r0, [r8, #132]	; 0x84
   1a484:	str	sl, [r8, #128]	; 0x80
   1a488:	b	1a4e8 <__assert_fail@plt+0x9020>
   1a48c:	add	r4, r4, #1
   1a490:	ldr	r3, [r6, #4]
   1a494:	cmp	r3, r4
   1a498:	ble	1a534 <__assert_fail@plt+0x906c>
   1a49c:	ldr	r3, [r6, #8]
   1a4a0:	ldr	r5, [r3, r4, lsl #2]
   1a4a4:	ldr	r3, [r7]
   1a4a8:	add	r2, r3, r5, lsl #3
   1a4ac:	ldrb	r2, [r2, #4]
   1a4b0:	cmp	r2, #8
   1a4b4:	bne	1a48c <__assert_fail@plt+0x8fc4>
   1a4b8:	ldr	r3, [r3, r5, lsl #3]
   1a4bc:	cmp	r3, #31
   1a4c0:	bgt	1a48c <__assert_fail@plt+0x8fc4>
   1a4c4:	ldr	r2, [r7, #80]	; 0x50
   1a4c8:	lsr	r3, r2, r3
   1a4cc:	tst	r3, #1
   1a4d0:	beq	1a48c <__assert_fail@plt+0x8fc4>
   1a4d4:	ldr	r0, [r8, #132]	; 0x84
   1a4d8:	ldr	r1, [r8, #128]	; 0x80
   1a4dc:	ldr	r3, [r8, #124]	; 0x7c
   1a4e0:	cmp	r1, r3
   1a4e4:	beq	1a46c <__assert_fail@plt+0x8fa4>
   1a4e8:	ldr	fp, [r8, #124]	; 0x7c
   1a4ec:	ldr	sl, [r8, #132]	; 0x84
   1a4f0:	mov	r1, #24
   1a4f4:	mov	r0, #1
   1a4f8:	bl	24794 <__assert_fail@plt+0x132cc>
   1a4fc:	str	r0, [sl, fp, lsl #2]
   1a500:	ldr	r2, [r8, #124]	; 0x7c
   1a504:	ldr	r3, [r8, #132]	; 0x84
   1a508:	ldr	r3, [r3, r2, lsl #2]
   1a50c:	cmp	r3, #0
   1a510:	beq	1a55c <__assert_fail@plt+0x9094>
   1a514:	str	r5, [r3, #4]
   1a518:	ldr	r2, [r8, #132]	; 0x84
   1a51c:	ldr	r3, [r8, #124]	; 0x7c
   1a520:	add	r1, r3, #1
   1a524:	str	r1, [r8, #124]	; 0x7c
   1a528:	ldr	r3, [r2, r3, lsl #2]
   1a52c:	str	r9, [r3]
   1a530:	b	1a48c <__assert_fail@plt+0x8fc4>
   1a534:	mov	r0, #0
   1a538:	add	sp, sp, #4
   1a53c:	ldrd	r4, [sp]
   1a540:	ldrd	r6, [sp, #8]
   1a544:	ldrd	r8, [sp, #16]
   1a548:	ldrd	sl, [sp, #24]
   1a54c:	add	sp, sp, #32
   1a550:	pop	{pc}		; (ldr pc, [sp], #4)
   1a554:	mov	r0, #0
   1a558:	b	1a538 <__assert_fail@plt+0x9070>
   1a55c:	mov	r0, #12
   1a560:	b	1a538 <__assert_fail@plt+0x9070>
   1a564:	strd	r4, [sp, #-16]!
   1a568:	str	r6, [sp, #8]
   1a56c:	str	lr, [sp, #12]
   1a570:	mov	r4, r0
   1a574:	mov	r5, r1
   1a578:	ldr	r6, [r0, #104]	; 0x68
   1a57c:	ldr	r3, [r0, #36]	; 0x24
   1a580:	cmp	r3, r1
   1a584:	bgt	1a594 <__assert_fail@plt+0x90cc>
   1a588:	ldr	r2, [r0, #48]	; 0x30
   1a58c:	cmp	r3, r2
   1a590:	blt	1a5ac <__assert_fail@plt+0x90e4>
   1a594:	ldr	r3, [r4, #28]
   1a598:	cmp	r3, r5
   1a59c:	bgt	1a5c0 <__assert_fail@plt+0x90f8>
   1a5a0:	ldr	r2, [r4, #48]	; 0x30
   1a5a4:	cmp	r3, r2
   1a5a8:	bge	1a5c0 <__assert_fail@plt+0x90f8>
   1a5ac:	add	r1, r5, #1
   1a5b0:	mov	r0, r4
   1a5b4:	bl	17fb8 <__assert_fail@plt+0x6af0>
   1a5b8:	cmp	r0, #0
   1a5bc:	bne	1a5f0 <__assert_fail@plt+0x9128>
   1a5c0:	cmp	r6, r5
   1a5c4:	movge	r0, #0
   1a5c8:	bge	1a5f0 <__assert_fail@plt+0x9128>
   1a5cc:	sub	r2, r5, r6
   1a5d0:	add	r6, r6, #1
   1a5d4:	ldr	r0, [r4, #100]	; 0x64
   1a5d8:	lsl	r2, r2, #2
   1a5dc:	mov	r1, #0
   1a5e0:	add	r0, r0, r6, lsl #2
   1a5e4:	bl	113e4 <memset@plt>
   1a5e8:	str	r5, [r4, #104]	; 0x68
   1a5ec:	mov	r0, #0
   1a5f0:	ldrd	r4, [sp]
   1a5f4:	ldr	r6, [sp, #8]
   1a5f8:	add	sp, sp, #12
   1a5fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a604:	strd	r6, [sp, #8]
   1a608:	strd	r8, [sp, #16]
   1a60c:	strd	sl, [sp, #24]
   1a610:	str	lr, [sp, #32]
   1a614:	sub	sp, sp, #28
   1a618:	mov	r5, r0
   1a61c:	mov	r6, r1
   1a620:	mov	r7, r2
   1a624:	mov	r8, r3
   1a628:	ldr	r1, [r1, #4]
   1a62c:	add	r0, sp, #12
   1a630:	bl	172b4 <__assert_fail@plt+0x5dec>
   1a634:	subs	r9, r0, #0
   1a638:	bne	1a710 <__assert_fail@plt+0x9248>
   1a63c:	ldr	r3, [r6, #4]
   1a640:	cmp	r3, #0
   1a644:	ble	1a730 <__assert_fail@plt+0x9268>
   1a648:	mov	r4, r9
   1a64c:	b	1a6b0 <__assert_fail@plt+0x91e8>
   1a650:	add	r0, r0, #1
   1a654:	cmp	lr, r0
   1a658:	beq	1a6e4 <__assert_fail@plt+0x921c>
   1a65c:	ldr	ip, [r3, #4]!
   1a660:	add	fp, sl, ip, lsl #3
   1a664:	ldrb	fp, [fp, #4]
   1a668:	cmp	r8, fp
   1a66c:	bne	1a650 <__assert_fail@plt+0x9188>
   1a670:	ldr	fp, [sl, ip, lsl #3]
   1a674:	cmp	r7, fp
   1a678:	bne	1a650 <__assert_fail@plt+0x9188>
   1a67c:	cmn	ip, #1
   1a680:	beq	1a6e4 <__assert_fail@plt+0x921c>
   1a684:	str	r8, [sp]
   1a688:	mov	r3, r7
   1a68c:	add	r1, sp, #12
   1a690:	mov	r0, r5
   1a694:	bl	19c90 <__assert_fail@plt+0x87c8>
   1a698:	subs	sl, r0, #0
   1a69c:	bne	1a704 <__assert_fail@plt+0x923c>
   1a6a0:	add	r4, r4, #1
   1a6a4:	ldr	r3, [r6, #4]
   1a6a8:	cmp	r3, r4
   1a6ac:	ble	1a730 <__assert_fail@plt+0x9268>
   1a6b0:	ldr	r3, [r6, #8]
   1a6b4:	ldr	r2, [r3, r4, lsl #2]
   1a6b8:	add	r3, r2, r2, lsl #1
   1a6bc:	ldr	r1, [r5, #24]
   1a6c0:	add	r1, r1, r3, lsl #2
   1a6c4:	ldr	lr, [r1, #4]
   1a6c8:	cmp	lr, #0
   1a6cc:	ble	1a6e4 <__assert_fail@plt+0x921c>
   1a6d0:	ldr	sl, [r5]
   1a6d4:	ldr	r3, [r1, #8]
   1a6d8:	sub	r3, r3, #4
   1a6dc:	mov	r0, r9
   1a6e0:	b	1a65c <__assert_fail@plt+0x9194>
   1a6e4:	add	r0, sp, #12
   1a6e8:	bl	19db4 <__assert_fail@plt+0x88ec>
   1a6ec:	subs	sl, r0, #0
   1a6f0:	beq	1a6a0 <__assert_fail@plt+0x91d8>
   1a6f4:	ldr	r0, [sp, #20]
   1a6f8:	bl	135a4 <__assert_fail@plt+0x20dc>
   1a6fc:	mov	r9, sl
   1a700:	b	1a710 <__assert_fail@plt+0x9248>
   1a704:	ldr	r0, [sp, #20]
   1a708:	bl	135a4 <__assert_fail@plt+0x20dc>
   1a70c:	mov	r9, sl
   1a710:	mov	r0, r9
   1a714:	add	sp, sp, #28
   1a718:	ldrd	r4, [sp]
   1a71c:	ldrd	r6, [sp, #8]
   1a720:	ldrd	r8, [sp, #16]
   1a724:	ldrd	sl, [sp, #24]
   1a728:	add	sp, sp, #32
   1a72c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a730:	ldr	r0, [r6, #8]
   1a734:	bl	135a4 <__assert_fail@plt+0x20dc>
   1a738:	ldrd	r2, [sp, #12]
   1a73c:	strd	r2, [r6]
   1a740:	ldr	r3, [sp, #20]
   1a744:	str	r3, [r6, #8]
   1a748:	b	1a710 <__assert_fail@plt+0x9248>
   1a74c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a750:	strd	r6, [sp, #8]
   1a754:	str	r8, [sp, #16]
   1a758:	str	lr, [sp, #20]
   1a75c:	mov	r4, r0
   1a760:	mov	r5, r1
   1a764:	mov	r1, r2
   1a768:	ldr	r2, [r0, #88]	; 0x58
   1a76c:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1a770:	ldr	lr, [r5, #8]
   1a774:	cmp	lr, #0
   1a778:	ble	1a7e4 <__assert_fail@plt+0x931c>
   1a77c:	ldr	r3, [r4, #84]	; 0x54
   1a780:	ldr	r4, [r3]
   1a784:	ldr	ip, [r5, #12]
   1a788:	sub	ip, ip, #4
   1a78c:	mov	r1, #0
   1a790:	and	r7, r0, #8
   1a794:	and	r6, r0, #2
   1a798:	and	r5, r0, #1
   1a79c:	b	1a7f8 <__assert_fail@plt+0x9330>
   1a7a0:	tst	r3, #8
   1a7a4:	beq	1a7b0 <__assert_fail@plt+0x92e8>
   1a7a8:	cmp	r5, #0
   1a7ac:	bne	1a7ec <__assert_fail@plt+0x9324>
   1a7b0:	tst	r3, #32
   1a7b4:	beq	1a7c0 <__assert_fail@plt+0x92f8>
   1a7b8:	cmp	r6, #0
   1a7bc:	beq	1a7ec <__assert_fail@plt+0x9324>
   1a7c0:	tst	r3, #128	; 0x80
   1a7c4:	beq	1a7d0 <__assert_fail@plt+0x9308>
   1a7c8:	cmp	r7, #0
   1a7cc:	beq	1a7ec <__assert_fail@plt+0x9324>
   1a7d0:	ldrd	r4, [sp]
   1a7d4:	ldrd	r6, [sp, #8]
   1a7d8:	ldr	r8, [sp, #16]
   1a7dc:	add	sp, sp, #20
   1a7e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7e4:	mov	r0, #0
   1a7e8:	b	1a7d0 <__assert_fail@plt+0x9308>
   1a7ec:	add	r1, r1, #1
   1a7f0:	cmp	lr, r1
   1a7f4:	beq	1a838 <__assert_fail@plt+0x9370>
   1a7f8:	ldr	r0, [ip, #4]!
   1a7fc:	add	r2, r4, r0, lsl #3
   1a800:	ldr	r3, [r2, #4]
   1a804:	ubfx	r3, r3, #8, #10
   1a808:	ldrb	r2, [r2, #4]
   1a80c:	cmp	r2, #2
   1a810:	bne	1a7ec <__assert_fail@plt+0x9324>
   1a814:	cmp	r3, #0
   1a818:	beq	1a7d0 <__assert_fail@plt+0x9308>
   1a81c:	tst	r3, #4
   1a820:	beq	1a7a0 <__assert_fail@plt+0x92d8>
   1a824:	cmp	r5, #0
   1a828:	beq	1a7ec <__assert_fail@plt+0x9324>
   1a82c:	tst	r3, #8
   1a830:	beq	1a7b0 <__assert_fail@plt+0x92e8>
   1a834:	b	1a7ec <__assert_fail@plt+0x9324>
   1a838:	mov	r0, #0
   1a83c:	b	1a7d0 <__assert_fail@plt+0x9308>
   1a840:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a844:	strd	r6, [sp, #8]
   1a848:	str	r8, [sp, #16]
   1a84c:	str	lr, [sp, #20]
   1a850:	ldr	r7, [sp, #28]
   1a854:	subs	r5, r0, #0
   1a858:	beq	1a90c <__assert_fail@plt+0x9444>
   1a85c:	ldr	r4, [r5]
   1a860:	cmp	r4, #0
   1a864:	beq	1a914 <__assert_fail@plt+0x944c>
   1a868:	mov	r0, r3
   1a86c:	sub	r4, r4, #1
   1a870:	str	r4, [r5]
   1a874:	add	r4, r4, r4, lsl #1
   1a878:	lsl	r4, r4, #3
   1a87c:	ldr	r3, [r5, #8]
   1a880:	ldr	r3, [r3, r4]
   1a884:	str	r3, [r1]
   1a888:	lsl	r6, r2, #3
   1a88c:	ldr	r3, [r5, #8]
   1a890:	add	r3, r3, r4
   1a894:	mov	r2, r6
   1a898:	ldr	r1, [r3, #8]
   1a89c:	bl	11204 <memcpy@plt>
   1a8a0:	ldr	r3, [r5, #8]
   1a8a4:	add	r3, r3, r4
   1a8a8:	ldr	r1, [r3, #8]
   1a8ac:	mov	r2, r6
   1a8b0:	add	r1, r1, r6
   1a8b4:	ldr	r0, [sp, #24]
   1a8b8:	bl	11204 <memcpy@plt>
   1a8bc:	ldr	r0, [r7, #8]
   1a8c0:	bl	135a4 <__assert_fail@plt+0x20dc>
   1a8c4:	ldr	r3, [r5, #8]
   1a8c8:	add	r3, r3, r4
   1a8cc:	ldr	r0, [r3, #8]
   1a8d0:	bl	135a4 <__assert_fail@plt+0x20dc>
   1a8d4:	ldr	r1, [r5, #8]
   1a8d8:	add	r1, r1, r4
   1a8dc:	ldrd	r2, [r1, #12]
   1a8e0:	strd	r2, [r7]
   1a8e4:	ldr	r3, [r1, #20]
   1a8e8:	str	r3, [r7, #8]
   1a8ec:	ldr	r3, [r5, #8]
   1a8f0:	add	r4, r3, r4
   1a8f4:	ldr	r0, [r4, #4]
   1a8f8:	ldrd	r4, [sp]
   1a8fc:	ldrd	r6, [sp, #8]
   1a900:	ldr	r8, [sp, #16]
   1a904:	add	sp, sp, #20
   1a908:	pop	{pc}		; (ldr pc, [sp], #4)
   1a90c:	mvn	r0, #0
   1a910:	b	1a8f8 <__assert_fail@plt+0x9430>
   1a914:	mvn	r0, #0
   1a918:	b	1a8f8 <__assert_fail@plt+0x9430>
   1a91c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a920:	strd	r6, [sp, #8]
   1a924:	strd	r8, [sp, #16]
   1a928:	str	sl, [sp, #24]
   1a92c:	str	lr, [sp, #28]
   1a930:	mov	r6, r0
   1a934:	mov	r4, r1
   1a938:	mov	r5, r2
   1a93c:	mov	r9, r3
   1a940:	ldr	r7, [sp, #32]
   1a944:	ldr	r3, [sp, #36]	; 0x24
   1a948:	tst	r3, #4194304	; 0x400000
   1a94c:	beq	1a990 <__assert_fail@plt+0x94c8>
   1a950:	movw	r1, #23940	; 0x5d84
   1a954:	movt	r1, #2
   1a958:	mov	r0, r7
   1a95c:	bl	1118c <strcmp@plt>
   1a960:	cmp	r0, #0
   1a964:	movweq	r7, #23932	; 0x5d7c
   1a968:	movteq	r7, #2
   1a96c:	beq	1a990 <__assert_fail@plt+0x94c8>
   1a970:	movw	r1, #23948	; 0x5d8c
   1a974:	movt	r1, #2
   1a978:	mov	r0, r7
   1a97c:	bl	1118c <strcmp@plt>
   1a980:	movw	r3, #23932	; 0x5d7c
   1a984:	movt	r3, #2
   1a988:	cmp	r0, #0
   1a98c:	moveq	r7, r3
   1a990:	ldr	r3, [r5, #36]	; 0x24
   1a994:	ldr	r2, [r9]
   1a998:	cmp	r2, r3
   1a99c:	beq	1a9ec <__assert_fail@plt+0x9524>
   1a9a0:	ldr	r9, [r5, #12]
   1a9a4:	ldr	r8, [r5, #36]	; 0x24
   1a9a8:	add	r3, r8, #1
   1a9ac:	str	r3, [r5, #36]	; 0x24
   1a9b0:	mov	r0, r7
   1a9b4:	bl	11168 <wctype@plt>
   1a9b8:	str	r0, [r9, r8, lsl #2]
   1a9bc:	movw	r1, #23956	; 0x5d94
   1a9c0:	movt	r1, #2
   1a9c4:	mov	r0, r7
   1a9c8:	bl	1118c <strcmp@plt>
   1a9cc:	subs	r5, r0, #0
   1a9d0:	bne	1aab0 <__assert_fail@plt+0x95e8>
   1a9d4:	cmp	r6, #0
   1a9d8:	bne	1aa14 <__assert_fail@plt+0x954c>
   1a9dc:	bl	11378 <__ctype_b_loc@plt>
   1a9e0:	mov	r3, r5
   1a9e4:	mov	lr, #1
   1a9e8:	b	1aa6c <__assert_fail@plt+0x95a4>
   1a9ec:	lsl	r3, r3, #1
   1a9f0:	add	r8, r3, #1
   1a9f4:	lsl	r1, r8, #2
   1a9f8:	ldr	r0, [r5, #12]
   1a9fc:	bl	24844 <__assert_fail@plt+0x1337c>
   1aa00:	cmp	r0, #0
   1aa04:	beq	1b378 <__assert_fail@plt+0x9eb0>
   1aa08:	str	r0, [r5, #12]
   1aa0c:	str	r8, [r9]
   1aa10:	b	1a9a0 <__assert_fail@plt+0x94d8>
   1aa14:	bl	11378 <__ctype_b_loc@plt>
   1aa18:	mov	r3, r5
   1aa1c:	mov	lr, #1
   1aa20:	b	1aa30 <__assert_fail@plt+0x9568>
   1aa24:	add	r3, r3, #1
   1aa28:	cmp	r3, #256	; 0x100
   1aa2c:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1aa30:	ldr	r1, [r0]
   1aa34:	lsl	r2, r3, #1
   1aa38:	ldrh	r2, [r1, r2]
   1aa3c:	tst	r2, #8
   1aa40:	beq	1aa24 <__assert_fail@plt+0x955c>
   1aa44:	ldrb	r2, [r6, r3]
   1aa48:	asr	ip, r2, #5
   1aa4c:	and	r2, r2, #31
   1aa50:	ldr	r1, [r4, ip, lsl #2]
   1aa54:	orr	r2, r1, lr, lsl r2
   1aa58:	str	r2, [r4, ip, lsl #2]
   1aa5c:	b	1aa24 <__assert_fail@plt+0x955c>
   1aa60:	add	r3, r3, #1
   1aa64:	cmp	r3, #256	; 0x100
   1aa68:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1aa6c:	ldr	r1, [r0]
   1aa70:	lsl	r2, r3, #1
   1aa74:	ldrh	r2, [r1, r2]
   1aa78:	tst	r2, #8
   1aa7c:	beq	1aa60 <__assert_fail@plt+0x9598>
   1aa80:	add	r2, r3, #31
   1aa84:	cmp	r3, #0
   1aa88:	movge	r2, r3
   1aa8c:	asr	r2, r2, #5
   1aa90:	rsbs	r1, r3, #0
   1aa94:	and	ip, r3, #31
   1aa98:	and	r1, r1, #31
   1aa9c:	rsbpl	ip, r1, #0
   1aaa0:	ldr	r1, [r4, r2, lsl #2]
   1aaa4:	orr	r1, r1, lr, lsl ip
   1aaa8:	str	r1, [r4, r2, lsl #2]
   1aaac:	b	1aa60 <__assert_fail@plt+0x9598>
   1aab0:	movw	r1, #23964	; 0x5d9c
   1aab4:	movt	r1, #2
   1aab8:	mov	r0, r7
   1aabc:	bl	1118c <strcmp@plt>
   1aac0:	subs	r5, r0, #0
   1aac4:	bne	1ab7c <__assert_fail@plt+0x96b4>
   1aac8:	cmp	r6, #0
   1aacc:	bne	1aae0 <__assert_fail@plt+0x9618>
   1aad0:	bl	11378 <__ctype_b_loc@plt>
   1aad4:	mov	r3, r5
   1aad8:	mov	lr, #1
   1aadc:	b	1ab38 <__assert_fail@plt+0x9670>
   1aae0:	bl	11378 <__ctype_b_loc@plt>
   1aae4:	mov	r3, r5
   1aae8:	mov	lr, #1
   1aaec:	b	1aafc <__assert_fail@plt+0x9634>
   1aaf0:	add	r3, r3, #1
   1aaf4:	cmp	r3, #256	; 0x100
   1aaf8:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1aafc:	ldr	r1, [r0]
   1ab00:	lsl	r2, r3, #1
   1ab04:	ldrh	r2, [r1, r2]
   1ab08:	tst	r2, #2
   1ab0c:	beq	1aaf0 <__assert_fail@plt+0x9628>
   1ab10:	ldrb	r2, [r6, r3]
   1ab14:	asr	ip, r2, #5
   1ab18:	and	r2, r2, #31
   1ab1c:	ldr	r1, [r4, ip, lsl #2]
   1ab20:	orr	r2, r1, lr, lsl r2
   1ab24:	str	r2, [r4, ip, lsl #2]
   1ab28:	b	1aaf0 <__assert_fail@plt+0x9628>
   1ab2c:	add	r3, r3, #1
   1ab30:	cmp	r3, #256	; 0x100
   1ab34:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1ab38:	ldr	r1, [r0]
   1ab3c:	lsl	r2, r3, #1
   1ab40:	ldrh	r2, [r1, r2]
   1ab44:	tst	r2, #2
   1ab48:	beq	1ab2c <__assert_fail@plt+0x9664>
   1ab4c:	add	r2, r3, #31
   1ab50:	cmp	r3, #0
   1ab54:	movge	r2, r3
   1ab58:	asr	r2, r2, #5
   1ab5c:	rsbs	r1, r3, #0
   1ab60:	and	ip, r3, #31
   1ab64:	and	r1, r1, #31
   1ab68:	rsbpl	ip, r1, #0
   1ab6c:	ldr	r1, [r4, r2, lsl #2]
   1ab70:	orr	r1, r1, lr, lsl ip
   1ab74:	str	r1, [r4, r2, lsl #2]
   1ab78:	b	1ab2c <__assert_fail@plt+0x9664>
   1ab7c:	movw	r1, #23948	; 0x5d8c
   1ab80:	movt	r1, #2
   1ab84:	mov	r0, r7
   1ab88:	bl	1118c <strcmp@plt>
   1ab8c:	subs	r5, r0, #0
   1ab90:	bne	1ac48 <__assert_fail@plt+0x9780>
   1ab94:	cmp	r6, #0
   1ab98:	bne	1abac <__assert_fail@plt+0x96e4>
   1ab9c:	bl	11378 <__ctype_b_loc@plt>
   1aba0:	mov	r3, r5
   1aba4:	mov	lr, #1
   1aba8:	b	1ac04 <__assert_fail@plt+0x973c>
   1abac:	bl	11378 <__ctype_b_loc@plt>
   1abb0:	mov	r3, r5
   1abb4:	mov	lr, #1
   1abb8:	b	1abc8 <__assert_fail@plt+0x9700>
   1abbc:	add	r3, r3, #1
   1abc0:	cmp	r3, #256	; 0x100
   1abc4:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1abc8:	ldr	r1, [r0]
   1abcc:	lsl	r2, r3, #1
   1abd0:	ldrh	r2, [r1, r2]
   1abd4:	tst	r2, #512	; 0x200
   1abd8:	beq	1abbc <__assert_fail@plt+0x96f4>
   1abdc:	ldrb	r2, [r6, r3]
   1abe0:	asr	ip, r2, #5
   1abe4:	and	r2, r2, #31
   1abe8:	ldr	r1, [r4, ip, lsl #2]
   1abec:	orr	r2, r1, lr, lsl r2
   1abf0:	str	r2, [r4, ip, lsl #2]
   1abf4:	b	1abbc <__assert_fail@plt+0x96f4>
   1abf8:	add	r3, r3, #1
   1abfc:	cmp	r3, #256	; 0x100
   1ac00:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1ac04:	ldr	r1, [r0]
   1ac08:	lsl	r2, r3, #1
   1ac0c:	ldrh	r2, [r1, r2]
   1ac10:	tst	r2, #512	; 0x200
   1ac14:	beq	1abf8 <__assert_fail@plt+0x9730>
   1ac18:	add	r2, r3, #31
   1ac1c:	cmp	r3, #0
   1ac20:	movge	r2, r3
   1ac24:	asr	r2, r2, #5
   1ac28:	rsbs	r1, r3, #0
   1ac2c:	and	ip, r3, #31
   1ac30:	and	r1, r1, #31
   1ac34:	rsbpl	ip, r1, #0
   1ac38:	ldr	r1, [r4, r2, lsl #2]
   1ac3c:	orr	r1, r1, lr, lsl ip
   1ac40:	str	r1, [r4, r2, lsl #2]
   1ac44:	b	1abf8 <__assert_fail@plt+0x9730>
   1ac48:	movw	r1, #23972	; 0x5da4
   1ac4c:	movt	r1, #2
   1ac50:	mov	r0, r7
   1ac54:	bl	1118c <strcmp@plt>
   1ac58:	subs	r5, r0, #0
   1ac5c:	bne	1ad14 <__assert_fail@plt+0x984c>
   1ac60:	cmp	r6, #0
   1ac64:	bne	1ac78 <__assert_fail@plt+0x97b0>
   1ac68:	bl	11378 <__ctype_b_loc@plt>
   1ac6c:	mov	r3, r5
   1ac70:	mov	lr, #1
   1ac74:	b	1acd0 <__assert_fail@plt+0x9808>
   1ac78:	bl	11378 <__ctype_b_loc@plt>
   1ac7c:	mov	r3, r5
   1ac80:	mov	lr, #1
   1ac84:	b	1ac94 <__assert_fail@plt+0x97cc>
   1ac88:	add	r3, r3, #1
   1ac8c:	cmp	r3, #256	; 0x100
   1ac90:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1ac94:	ldr	r1, [r0]
   1ac98:	lsl	r2, r3, #1
   1ac9c:	ldrh	r2, [r1, r2]
   1aca0:	tst	r2, #8192	; 0x2000
   1aca4:	beq	1ac88 <__assert_fail@plt+0x97c0>
   1aca8:	ldrb	r2, [r6, r3]
   1acac:	asr	ip, r2, #5
   1acb0:	and	r2, r2, #31
   1acb4:	ldr	r1, [r4, ip, lsl #2]
   1acb8:	orr	r2, r1, lr, lsl r2
   1acbc:	str	r2, [r4, ip, lsl #2]
   1acc0:	b	1ac88 <__assert_fail@plt+0x97c0>
   1acc4:	add	r3, r3, #1
   1acc8:	cmp	r3, #256	; 0x100
   1accc:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1acd0:	ldr	r1, [r0]
   1acd4:	lsl	r2, r3, #1
   1acd8:	ldrh	r2, [r1, r2]
   1acdc:	tst	r2, #8192	; 0x2000
   1ace0:	beq	1acc4 <__assert_fail@plt+0x97fc>
   1ace4:	add	r2, r3, #31
   1ace8:	cmp	r3, #0
   1acec:	movge	r2, r3
   1acf0:	asr	r2, r2, #5
   1acf4:	rsbs	r1, r3, #0
   1acf8:	and	ip, r3, #31
   1acfc:	and	r1, r1, #31
   1ad00:	rsbpl	ip, r1, #0
   1ad04:	ldr	r1, [r4, r2, lsl #2]
   1ad08:	orr	r1, r1, lr, lsl ip
   1ad0c:	str	r1, [r4, r2, lsl #2]
   1ad10:	b	1acc4 <__assert_fail@plt+0x97fc>
   1ad14:	movw	r1, #23932	; 0x5d7c
   1ad18:	movt	r1, #2
   1ad1c:	mov	r0, r7
   1ad20:	bl	1118c <strcmp@plt>
   1ad24:	subs	r5, r0, #0
   1ad28:	bne	1ade0 <__assert_fail@plt+0x9918>
   1ad2c:	cmp	r6, #0
   1ad30:	bne	1ad44 <__assert_fail@plt+0x987c>
   1ad34:	bl	11378 <__ctype_b_loc@plt>
   1ad38:	mov	r3, r5
   1ad3c:	mov	lr, #1
   1ad40:	b	1ad9c <__assert_fail@plt+0x98d4>
   1ad44:	bl	11378 <__ctype_b_loc@plt>
   1ad48:	mov	r3, r5
   1ad4c:	mov	lr, #1
   1ad50:	b	1ad60 <__assert_fail@plt+0x9898>
   1ad54:	add	r3, r3, #1
   1ad58:	cmp	r3, #256	; 0x100
   1ad5c:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1ad60:	ldr	r1, [r0]
   1ad64:	lsl	r2, r3, #1
   1ad68:	ldrh	r2, [r1, r2]
   1ad6c:	tst	r2, #1024	; 0x400
   1ad70:	beq	1ad54 <__assert_fail@plt+0x988c>
   1ad74:	ldrb	r2, [r6, r3]
   1ad78:	asr	ip, r2, #5
   1ad7c:	and	r2, r2, #31
   1ad80:	ldr	r1, [r4, ip, lsl #2]
   1ad84:	orr	r2, r1, lr, lsl r2
   1ad88:	str	r2, [r4, ip, lsl #2]
   1ad8c:	b	1ad54 <__assert_fail@plt+0x988c>
   1ad90:	add	r3, r3, #1
   1ad94:	cmp	r3, #256	; 0x100
   1ad98:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1ad9c:	ldr	r1, [r0]
   1ada0:	lsl	r2, r3, #1
   1ada4:	ldrh	r2, [r1, r2]
   1ada8:	tst	r2, #1024	; 0x400
   1adac:	beq	1ad90 <__assert_fail@plt+0x98c8>
   1adb0:	add	r2, r3, #31
   1adb4:	cmp	r3, #0
   1adb8:	movge	r2, r3
   1adbc:	asr	r2, r2, #5
   1adc0:	rsbs	r1, r3, #0
   1adc4:	and	ip, r3, #31
   1adc8:	and	r1, r1, #31
   1adcc:	rsbpl	ip, r1, #0
   1add0:	ldr	r1, [r4, r2, lsl #2]
   1add4:	orr	r1, r1, lr, lsl ip
   1add8:	str	r1, [r4, r2, lsl #2]
   1addc:	b	1ad90 <__assert_fail@plt+0x98c8>
   1ade0:	movw	r1, #23980	; 0x5dac
   1ade4:	movt	r1, #2
   1ade8:	mov	r0, r7
   1adec:	bl	1118c <strcmp@plt>
   1adf0:	subs	r5, r0, #0
   1adf4:	bne	1aeac <__assert_fail@plt+0x99e4>
   1adf8:	cmp	r6, #0
   1adfc:	bne	1ae10 <__assert_fail@plt+0x9948>
   1ae00:	bl	11378 <__ctype_b_loc@plt>
   1ae04:	mov	r3, r5
   1ae08:	mov	lr, #1
   1ae0c:	b	1ae68 <__assert_fail@plt+0x99a0>
   1ae10:	bl	11378 <__ctype_b_loc@plt>
   1ae14:	mov	r3, r5
   1ae18:	mov	lr, #1
   1ae1c:	b	1ae2c <__assert_fail@plt+0x9964>
   1ae20:	add	r3, r3, #1
   1ae24:	cmp	r3, #256	; 0x100
   1ae28:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1ae2c:	ldr	r1, [r0]
   1ae30:	lsl	r2, r3, #1
   1ae34:	ldrh	r2, [r1, r2]
   1ae38:	tst	r2, #2048	; 0x800
   1ae3c:	beq	1ae20 <__assert_fail@plt+0x9958>
   1ae40:	ldrb	r2, [r6, r3]
   1ae44:	asr	ip, r2, #5
   1ae48:	and	r2, r2, #31
   1ae4c:	ldr	r1, [r4, ip, lsl #2]
   1ae50:	orr	r2, r1, lr, lsl r2
   1ae54:	str	r2, [r4, ip, lsl #2]
   1ae58:	b	1ae20 <__assert_fail@plt+0x9958>
   1ae5c:	add	r3, r3, #1
   1ae60:	cmp	r3, #256	; 0x100
   1ae64:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1ae68:	ldr	r1, [r0]
   1ae6c:	lsl	r2, r3, #1
   1ae70:	ldrh	r2, [r1, r2]
   1ae74:	tst	r2, #2048	; 0x800
   1ae78:	beq	1ae5c <__assert_fail@plt+0x9994>
   1ae7c:	add	r2, r3, #31
   1ae80:	cmp	r3, #0
   1ae84:	movge	r2, r3
   1ae88:	asr	r2, r2, #5
   1ae8c:	rsbs	r1, r3, #0
   1ae90:	and	ip, r3, #31
   1ae94:	and	r1, r1, #31
   1ae98:	rsbpl	ip, r1, #0
   1ae9c:	ldr	r1, [r4, r2, lsl #2]
   1aea0:	orr	r1, r1, lr, lsl ip
   1aea4:	str	r1, [r4, r2, lsl #2]
   1aea8:	b	1ae5c <__assert_fail@plt+0x9994>
   1aeac:	movw	r1, #23988	; 0x5db4
   1aeb0:	movt	r1, #2
   1aeb4:	mov	r0, r7
   1aeb8:	bl	1118c <strcmp@plt>
   1aebc:	subs	r5, r0, #0
   1aec0:	bne	1af78 <__assert_fail@plt+0x9ab0>
   1aec4:	cmp	r6, #0
   1aec8:	bne	1aedc <__assert_fail@plt+0x9a14>
   1aecc:	bl	11378 <__ctype_b_loc@plt>
   1aed0:	mov	r3, r5
   1aed4:	mov	lr, #1
   1aed8:	b	1af34 <__assert_fail@plt+0x9a6c>
   1aedc:	bl	11378 <__ctype_b_loc@plt>
   1aee0:	mov	r3, r5
   1aee4:	mov	lr, #1
   1aee8:	b	1aef8 <__assert_fail@plt+0x9a30>
   1aeec:	add	r3, r3, #1
   1aef0:	cmp	r3, #256	; 0x100
   1aef4:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1aef8:	ldr	r1, [r0]
   1aefc:	lsl	r2, r3, #1
   1af00:	ldrh	r2, [r1, r2]
   1af04:	tst	r2, #16384	; 0x4000
   1af08:	beq	1aeec <__assert_fail@plt+0x9a24>
   1af0c:	ldrb	r2, [r6, r3]
   1af10:	asr	ip, r2, #5
   1af14:	and	r2, r2, #31
   1af18:	ldr	r1, [r4, ip, lsl #2]
   1af1c:	orr	r2, r1, lr, lsl r2
   1af20:	str	r2, [r4, ip, lsl #2]
   1af24:	b	1aeec <__assert_fail@plt+0x9a24>
   1af28:	add	r3, r3, #1
   1af2c:	cmp	r3, #256	; 0x100
   1af30:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1af34:	ldr	r1, [r0]
   1af38:	lsl	r2, r3, #1
   1af3c:	ldrh	r2, [r1, r2]
   1af40:	tst	r2, #16384	; 0x4000
   1af44:	beq	1af28 <__assert_fail@plt+0x9a60>
   1af48:	add	r2, r3, #31
   1af4c:	cmp	r3, #0
   1af50:	movge	r2, r3
   1af54:	asr	r2, r2, #5
   1af58:	rsbs	r1, r3, #0
   1af5c:	and	ip, r3, #31
   1af60:	and	r1, r1, #31
   1af64:	rsbpl	ip, r1, #0
   1af68:	ldr	r1, [r4, r2, lsl #2]
   1af6c:	orr	r1, r1, lr, lsl ip
   1af70:	str	r1, [r4, r2, lsl #2]
   1af74:	b	1af28 <__assert_fail@plt+0x9a60>
   1af78:	movw	r1, #23940	; 0x5d84
   1af7c:	movt	r1, #2
   1af80:	mov	r0, r7
   1af84:	bl	1118c <strcmp@plt>
   1af88:	subs	r5, r0, #0
   1af8c:	bne	1b044 <__assert_fail@plt+0x9b7c>
   1af90:	cmp	r6, #0
   1af94:	bne	1afa8 <__assert_fail@plt+0x9ae0>
   1af98:	bl	11378 <__ctype_b_loc@plt>
   1af9c:	mov	r3, r5
   1afa0:	mov	lr, #1
   1afa4:	b	1b000 <__assert_fail@plt+0x9b38>
   1afa8:	bl	11378 <__ctype_b_loc@plt>
   1afac:	mov	r3, r5
   1afb0:	mov	lr, #1
   1afb4:	b	1afc4 <__assert_fail@plt+0x9afc>
   1afb8:	add	r3, r3, #1
   1afbc:	cmp	r3, #256	; 0x100
   1afc0:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1afc4:	ldr	r1, [r0]
   1afc8:	lsl	r2, r3, #1
   1afcc:	ldrh	r2, [r1, r2]
   1afd0:	tst	r2, #256	; 0x100
   1afd4:	beq	1afb8 <__assert_fail@plt+0x9af0>
   1afd8:	ldrb	r2, [r6, r3]
   1afdc:	asr	ip, r2, #5
   1afe0:	and	r2, r2, #31
   1afe4:	ldr	r1, [r4, ip, lsl #2]
   1afe8:	orr	r2, r1, lr, lsl r2
   1afec:	str	r2, [r4, ip, lsl #2]
   1aff0:	b	1afb8 <__assert_fail@plt+0x9af0>
   1aff4:	add	r3, r3, #1
   1aff8:	cmp	r3, #256	; 0x100
   1affc:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1b000:	ldr	r1, [r0]
   1b004:	lsl	r2, r3, #1
   1b008:	ldrh	r2, [r1, r2]
   1b00c:	tst	r2, #256	; 0x100
   1b010:	beq	1aff4 <__assert_fail@plt+0x9b2c>
   1b014:	add	r2, r3, #31
   1b018:	cmp	r3, #0
   1b01c:	movge	r2, r3
   1b020:	asr	r2, r2, #5
   1b024:	rsbs	r1, r3, #0
   1b028:	and	ip, r3, #31
   1b02c:	and	r1, r1, #31
   1b030:	rsbpl	ip, r1, #0
   1b034:	ldr	r1, [r4, r2, lsl #2]
   1b038:	orr	r1, r1, lr, lsl ip
   1b03c:	str	r1, [r4, r2, lsl #2]
   1b040:	b	1aff4 <__assert_fail@plt+0x9b2c>
   1b044:	movw	r1, #23996	; 0x5dbc
   1b048:	movt	r1, #2
   1b04c:	mov	r0, r7
   1b050:	bl	1118c <strcmp@plt>
   1b054:	subs	r5, r0, #0
   1b058:	bne	1b110 <__assert_fail@plt+0x9c48>
   1b05c:	cmp	r6, #0
   1b060:	bne	1b074 <__assert_fail@plt+0x9bac>
   1b064:	bl	11378 <__ctype_b_loc@plt>
   1b068:	mov	r3, r5
   1b06c:	mov	lr, #1
   1b070:	b	1b0cc <__assert_fail@plt+0x9c04>
   1b074:	bl	11378 <__ctype_b_loc@plt>
   1b078:	mov	r3, r5
   1b07c:	mov	lr, #1
   1b080:	b	1b090 <__assert_fail@plt+0x9bc8>
   1b084:	add	r3, r3, #1
   1b088:	cmp	r3, #256	; 0x100
   1b08c:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1b090:	ldr	r1, [r0]
   1b094:	lsl	r2, r3, #1
   1b098:	ldrh	r2, [r1, r2]
   1b09c:	tst	r2, #1
   1b0a0:	beq	1b084 <__assert_fail@plt+0x9bbc>
   1b0a4:	ldrb	r2, [r6, r3]
   1b0a8:	asr	ip, r2, #5
   1b0ac:	and	r2, r2, #31
   1b0b0:	ldr	r1, [r4, ip, lsl #2]
   1b0b4:	orr	r2, r1, lr, lsl r2
   1b0b8:	str	r2, [r4, ip, lsl #2]
   1b0bc:	b	1b084 <__assert_fail@plt+0x9bbc>
   1b0c0:	add	r3, r3, #1
   1b0c4:	cmp	r3, #256	; 0x100
   1b0c8:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1b0cc:	ldr	r1, [r0]
   1b0d0:	lsl	r2, r3, #1
   1b0d4:	ldrh	r2, [r1, r2]
   1b0d8:	tst	r2, #1
   1b0dc:	beq	1b0c0 <__assert_fail@plt+0x9bf8>
   1b0e0:	add	r2, r3, #31
   1b0e4:	cmp	r3, #0
   1b0e8:	movge	r2, r3
   1b0ec:	asr	r2, r2, #5
   1b0f0:	rsbs	r1, r3, #0
   1b0f4:	and	ip, r3, #31
   1b0f8:	and	r1, r1, #31
   1b0fc:	rsbpl	ip, r1, #0
   1b100:	ldr	r1, [r4, r2, lsl #2]
   1b104:	orr	r1, r1, lr, lsl ip
   1b108:	str	r1, [r4, r2, lsl #2]
   1b10c:	b	1b0c0 <__assert_fail@plt+0x9bf8>
   1b110:	movw	r1, #24004	; 0x5dc4
   1b114:	movt	r1, #2
   1b118:	mov	r0, r7
   1b11c:	bl	1118c <strcmp@plt>
   1b120:	subs	r5, r0, #0
   1b124:	bne	1b1dc <__assert_fail@plt+0x9d14>
   1b128:	cmp	r6, #0
   1b12c:	bne	1b140 <__assert_fail@plt+0x9c78>
   1b130:	bl	11378 <__ctype_b_loc@plt>
   1b134:	mov	r3, r5
   1b138:	mov	lr, #1
   1b13c:	b	1b198 <__assert_fail@plt+0x9cd0>
   1b140:	bl	11378 <__ctype_b_loc@plt>
   1b144:	mov	r3, r5
   1b148:	mov	lr, #1
   1b14c:	b	1b15c <__assert_fail@plt+0x9c94>
   1b150:	add	r3, r3, #1
   1b154:	cmp	r3, #256	; 0x100
   1b158:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1b15c:	ldr	r1, [r0]
   1b160:	lsl	r2, r3, #1
   1b164:	ldrsh	r2, [r1, r2]
   1b168:	cmp	r2, #0
   1b16c:	bge	1b150 <__assert_fail@plt+0x9c88>
   1b170:	ldrb	r2, [r6, r3]
   1b174:	asr	ip, r2, #5
   1b178:	and	r2, r2, #31
   1b17c:	ldr	r1, [r4, ip, lsl #2]
   1b180:	orr	r2, r1, lr, lsl r2
   1b184:	str	r2, [r4, ip, lsl #2]
   1b188:	b	1b150 <__assert_fail@plt+0x9c88>
   1b18c:	add	r3, r3, #1
   1b190:	cmp	r3, #256	; 0x100
   1b194:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1b198:	ldr	r1, [r0]
   1b19c:	lsl	r2, r3, #1
   1b1a0:	ldrsh	r2, [r1, r2]
   1b1a4:	cmp	r2, #0
   1b1a8:	bge	1b18c <__assert_fail@plt+0x9cc4>
   1b1ac:	add	r2, r3, #31
   1b1b0:	cmp	r3, #0
   1b1b4:	movge	r2, r3
   1b1b8:	asr	r2, r2, #5
   1b1bc:	rsbs	r1, r3, #0
   1b1c0:	and	ip, r3, #31
   1b1c4:	and	r1, r1, #31
   1b1c8:	rsbpl	ip, r1, #0
   1b1cc:	ldr	r1, [r4, r2, lsl #2]
   1b1d0:	orr	r1, r1, lr, lsl ip
   1b1d4:	str	r1, [r4, r2, lsl #2]
   1b1d8:	b	1b18c <__assert_fail@plt+0x9cc4>
   1b1dc:	movw	r1, #24012	; 0x5dcc
   1b1e0:	movt	r1, #2
   1b1e4:	mov	r0, r7
   1b1e8:	bl	1118c <strcmp@plt>
   1b1ec:	subs	r5, r0, #0
   1b1f0:	bne	1b2a8 <__assert_fail@plt+0x9de0>
   1b1f4:	cmp	r6, #0
   1b1f8:	bne	1b20c <__assert_fail@plt+0x9d44>
   1b1fc:	bl	11378 <__ctype_b_loc@plt>
   1b200:	mov	r3, r5
   1b204:	mov	lr, #1
   1b208:	b	1b264 <__assert_fail@plt+0x9d9c>
   1b20c:	bl	11378 <__ctype_b_loc@plt>
   1b210:	mov	r3, #0
   1b214:	mov	lr, #1
   1b218:	b	1b22c <__assert_fail@plt+0x9d64>
   1b21c:	add	r3, r3, #2
   1b220:	add	r6, r6, #1
   1b224:	cmp	r3, #512	; 0x200
   1b228:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1b22c:	ldr	r2, [r0]
   1b230:	ldrh	r2, [r2, r3]
   1b234:	tst	r2, #4
   1b238:	beq	1b21c <__assert_fail@plt+0x9d54>
   1b23c:	ldrb	r2, [r6]
   1b240:	asr	ip, r2, #5
   1b244:	and	r2, r2, #31
   1b248:	ldr	r1, [r4, ip, lsl #2]
   1b24c:	orr	r2, r1, lr, lsl r2
   1b250:	str	r2, [r4, ip, lsl #2]
   1b254:	b	1b21c <__assert_fail@plt+0x9d54>
   1b258:	add	r3, r3, #1
   1b25c:	cmp	r3, #256	; 0x100
   1b260:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1b264:	ldr	r1, [r0]
   1b268:	lsl	r2, r3, #1
   1b26c:	ldrh	r2, [r1, r2]
   1b270:	tst	r2, #4
   1b274:	beq	1b258 <__assert_fail@plt+0x9d90>
   1b278:	add	r2, r3, #31
   1b27c:	cmp	r3, #0
   1b280:	movge	r2, r3
   1b284:	asr	r2, r2, #5
   1b288:	rsbs	r1, r3, #0
   1b28c:	and	ip, r3, #31
   1b290:	and	r1, r1, #31
   1b294:	rsbpl	ip, r1, #0
   1b298:	ldr	r1, [r4, r2, lsl #2]
   1b29c:	orr	r1, r1, lr, lsl ip
   1b2a0:	str	r1, [r4, r2, lsl #2]
   1b2a4:	b	1b258 <__assert_fail@plt+0x9d90>
   1b2a8:	movw	r1, #24020	; 0x5dd4
   1b2ac:	movt	r1, #2
   1b2b0:	mov	r0, r7
   1b2b4:	bl	1118c <strcmp@plt>
   1b2b8:	subs	r5, r0, #0
   1b2bc:	movne	r5, #4
   1b2c0:	bne	1b37c <__assert_fail@plt+0x9eb4>
   1b2c4:	cmp	r6, #0
   1b2c8:	bne	1b2dc <__assert_fail@plt+0x9e14>
   1b2cc:	bl	11378 <__ctype_b_loc@plt>
   1b2d0:	mov	r3, r5
   1b2d4:	mov	lr, #1
   1b2d8:	b	1b334 <__assert_fail@plt+0x9e6c>
   1b2dc:	bl	11378 <__ctype_b_loc@plt>
   1b2e0:	mov	r3, r5
   1b2e4:	mov	lr, #1
   1b2e8:	b	1b2f8 <__assert_fail@plt+0x9e30>
   1b2ec:	add	r3, r3, #1
   1b2f0:	cmp	r3, #256	; 0x100
   1b2f4:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1b2f8:	ldr	r1, [r0]
   1b2fc:	lsl	r2, r3, #1
   1b300:	ldrh	r2, [r1, r2]
   1b304:	tst	r2, #4096	; 0x1000
   1b308:	beq	1b2ec <__assert_fail@plt+0x9e24>
   1b30c:	ldrb	r2, [r6, r3]
   1b310:	asr	ip, r2, #5
   1b314:	and	r2, r2, #31
   1b318:	ldr	r1, [r4, ip, lsl #2]
   1b31c:	orr	r2, r1, lr, lsl r2
   1b320:	str	r2, [r4, ip, lsl #2]
   1b324:	b	1b2ec <__assert_fail@plt+0x9e24>
   1b328:	add	r3, r3, #1
   1b32c:	cmp	r3, #256	; 0x100
   1b330:	beq	1b37c <__assert_fail@plt+0x9eb4>
   1b334:	ldr	r1, [r0]
   1b338:	lsl	r2, r3, #1
   1b33c:	ldrh	r2, [r1, r2]
   1b340:	tst	r2, #4096	; 0x1000
   1b344:	beq	1b328 <__assert_fail@plt+0x9e60>
   1b348:	add	r2, r3, #31
   1b34c:	cmp	r3, #0
   1b350:	movge	r2, r3
   1b354:	asr	r2, r2, #5
   1b358:	rsbs	r1, r3, #0
   1b35c:	and	ip, r3, #31
   1b360:	and	r1, r1, #31
   1b364:	rsbpl	ip, r1, #0
   1b368:	ldr	r1, [r4, r2, lsl #2]
   1b36c:	orr	r1, r1, lr, lsl ip
   1b370:	str	r1, [r4, r2, lsl #2]
   1b374:	b	1b328 <__assert_fail@plt+0x9e60>
   1b378:	mov	r5, #12
   1b37c:	mov	r0, r5
   1b380:	ldrd	r4, [sp]
   1b384:	ldrd	r6, [sp, #8]
   1b388:	ldrd	r8, [sp, #16]
   1b38c:	ldr	sl, [sp, #24]
   1b390:	add	sp, sp, #28
   1b394:	pop	{pc}		; (ldr pc, [sp], #4)
   1b398:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1b39c:	strd	r6, [sp, #8]
   1b3a0:	strd	r8, [sp, #16]
   1b3a4:	str	sl, [sp, #24]
   1b3a8:	str	lr, [sp, #28]
   1b3ac:	sub	sp, sp, #24
   1b3b0:	mov	r6, r0
   1b3b4:	mov	r9, r1
   1b3b8:	mov	sl, r2
   1b3bc:	mov	r5, r3
   1b3c0:	ldrb	r8, [sp, #56]	; 0x38
   1b3c4:	mov	r3, #0
   1b3c8:	str	r3, [sp, #20]
   1b3cc:	mov	r1, #1
   1b3d0:	mov	r0, #32
   1b3d4:	bl	24794 <__assert_fail@plt+0x132cc>
   1b3d8:	subs	r4, r0, #0
   1b3dc:	beq	1b550 <__assert_fail@plt+0xa088>
   1b3e0:	mov	r1, #1
   1b3e4:	mov	r0, #40	; 0x28
   1b3e8:	bl	24794 <__assert_fail@plt+0x132cc>
   1b3ec:	subs	r7, r0, #0
   1b3f0:	beq	1b564 <__assert_fail@plt+0xa09c>
   1b3f4:	ldrb	r3, [r7, #16]
   1b3f8:	bfi	r3, r8, #0, #1
   1b3fc:	strb	r3, [r7, #16]
   1b400:	mov	r3, #0
   1b404:	str	r3, [sp, #4]
   1b408:	str	sl, [sp]
   1b40c:	add	r3, sp, #20
   1b410:	mov	r2, r7
   1b414:	mov	r1, r4
   1b418:	mov	r0, r9
   1b41c:	bl	1a91c <__assert_fail@plt+0x9454>
   1b420:	subs	r9, r0, #0
   1b424:	bne	1b580 <__assert_fail@plt+0xa0b8>
   1b428:	ldrb	r3, [r5]
   1b42c:	cmp	r3, #0
   1b430:	beq	1b458 <__assert_fail@plt+0x9f90>
   1b434:	mov	r0, #1
   1b438:	lsr	r1, r3, #5
   1b43c:	and	r3, r3, #31
   1b440:	ldr	r2, [r4, r1, lsl #2]
   1b444:	orr	r3, r2, r0, lsl r3
   1b448:	str	r3, [r4, r1, lsl #2]
   1b44c:	ldrb	r3, [r5, #1]!
   1b450:	cmp	r3, #0
   1b454:	bne	1b438 <__assert_fail@plt+0x9f70>
   1b458:	cmp	r8, #0
   1b45c:	beq	1b47c <__assert_fail@plt+0x9fb4>
   1b460:	sub	r3, r4, #4
   1b464:	add	r1, r4, #28
   1b468:	ldr	r2, [r3, #4]!
   1b46c:	mvn	r2, r2
   1b470:	str	r2, [r3]
   1b474:	cmp	r3, r1
   1b478:	bne	1b468 <__assert_fail@plt+0x9fa0>
   1b47c:	ldr	r3, [r6, #92]	; 0x5c
   1b480:	cmp	r3, #1
   1b484:	ble	1b4b0 <__assert_fail@plt+0x9fe8>
   1b488:	sub	r3, r4, #4
   1b48c:	ldr	r1, [r6, #60]	; 0x3c
   1b490:	sub	r1, r1, #4
   1b494:	add	ip, r4, #28
   1b498:	ldr	r2, [r3, #4]!
   1b49c:	ldr	r0, [r1, #4]!
   1b4a0:	and	r2, r2, r0
   1b4a4:	str	r2, [r3]
   1b4a8:	cmp	r3, ip
   1b4ac:	bne	1b498 <__assert_fail@plt+0x9fd0>
   1b4b0:	mov	r1, #0
   1b4b4:	str	r1, [sp, #16]
   1b4b8:	str	r4, [sp, #12]
   1b4bc:	mov	r3, #3
   1b4c0:	strb	r3, [sp, #16]
   1b4c4:	add	r3, sp, #12
   1b4c8:	mov	r2, r1
   1b4cc:	mov	r0, r6
   1b4d0:	bl	16e88 <__assert_fail@plt+0x59c0>
   1b4d4:	subs	r5, r0, #0
   1b4d8:	beq	1b5ac <__assert_fail@plt+0xa0e4>
   1b4dc:	ldr	r3, [r6, #92]	; 0x5c
   1b4e0:	cmp	r3, #1
   1b4e4:	ble	1b5a0 <__assert_fail@plt+0xa0d8>
   1b4e8:	mov	r3, #6
   1b4ec:	strb	r3, [sp, #16]
   1b4f0:	str	r7, [sp, #12]
   1b4f4:	ldrb	r3, [r6, #88]	; 0x58
   1b4f8:	orr	r3, r3, #2
   1b4fc:	strb	r3, [r6, #88]	; 0x58
   1b500:	add	r3, sp, #12
   1b504:	mov	r2, #0
   1b508:	mov	r1, r2
   1b50c:	mov	r0, r6
   1b510:	bl	16e88 <__assert_fail@plt+0x59c0>
   1b514:	subs	r2, r0, #0
   1b518:	beq	1b5ac <__assert_fail@plt+0xa0e4>
   1b51c:	mov	r3, #10
   1b520:	mov	r1, r5
   1b524:	mov	r0, r6
   1b528:	bl	17024 <__assert_fail@plt+0x5b5c>
   1b52c:	mov	r5, r0
   1b530:	mov	r0, r5
   1b534:	add	sp, sp, #24
   1b538:	ldrd	r4, [sp]
   1b53c:	ldrd	r6, [sp, #8]
   1b540:	ldrd	r8, [sp, #16]
   1b544:	ldr	sl, [sp, #24]
   1b548:	add	sp, sp, #28
   1b54c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b550:	mov	r3, #12
   1b554:	ldr	r2, [sp, #60]	; 0x3c
   1b558:	str	r3, [r2]
   1b55c:	mov	r5, r4
   1b560:	b	1b530 <__assert_fail@plt+0xa068>
   1b564:	mov	r0, r4
   1b568:	bl	135a4 <__assert_fail@plt+0x20dc>
   1b56c:	mov	r3, #12
   1b570:	ldr	r2, [sp, #60]	; 0x3c
   1b574:	str	r3, [r2]
   1b578:	mov	r5, r7
   1b57c:	b	1b530 <__assert_fail@plt+0xa068>
   1b580:	mov	r0, r4
   1b584:	bl	135a4 <__assert_fail@plt+0x20dc>
   1b588:	mov	r0, r7
   1b58c:	bl	18b84 <__assert_fail@plt+0x76bc>
   1b590:	ldr	r3, [sp, #60]	; 0x3c
   1b594:	str	r9, [r3]
   1b598:	mov	r5, #0
   1b59c:	b	1b530 <__assert_fail@plt+0xa068>
   1b5a0:	mov	r0, r7
   1b5a4:	bl	18b84 <__assert_fail@plt+0x76bc>
   1b5a8:	b	1b530 <__assert_fail@plt+0xa068>
   1b5ac:	mov	r0, r4
   1b5b0:	bl	135a4 <__assert_fail@plt+0x20dc>
   1b5b4:	mov	r0, r7
   1b5b8:	bl	18b84 <__assert_fail@plt+0x76bc>
   1b5bc:	mov	r3, #12
   1b5c0:	ldr	r2, [sp, #60]	; 0x3c
   1b5c4:	str	r3, [r2]
   1b5c8:	mov	r5, #0
   1b5cc:	b	1b530 <__assert_fail@plt+0xa068>
   1b5d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b5d4:	strd	r6, [sp, #8]
   1b5d8:	strd	r8, [sp, #16]
   1b5dc:	strd	sl, [sp, #24]
   1b5e0:	str	lr, [sp, #32]
   1b5e4:	sub	sp, sp, #4
   1b5e8:	ldr	r9, [r0]
   1b5ec:	add	ip, r9, r1, lsl #3
   1b5f0:	ldrb	fp, [ip, #4]
   1b5f4:	cmp	fp, #7
   1b5f8:	beq	1b664 <__assert_fail@plt+0xa19c>
   1b5fc:	mov	r5, r3
   1b600:	mov	r6, r2
   1b604:	mov	r8, r1
   1b608:	mov	r7, r0
   1b60c:	mov	r1, r3
   1b610:	mov	r0, r2
   1b614:	bl	16044 <__assert_fail@plt+0x4b7c>
   1b618:	mov	sl, r0
   1b61c:	cmp	fp, #5
   1b620:	beq	1b778 <__assert_fail@plt+0xa2b0>
   1b624:	cmp	fp, #6
   1b628:	movne	r4, #0
   1b62c:	moveq	r4, #1
   1b630:	cmp	r0, #1
   1b634:	movle	r4, #0
   1b638:	cmp	r4, #0
   1b63c:	moveq	sl, #0
   1b640:	bne	1b7c0 <__assert_fail@plt+0xa2f8>
   1b644:	mov	r0, sl
   1b648:	add	sp, sp, #4
   1b64c:	ldrd	r4, [sp]
   1b650:	ldrd	r6, [sp, #8]
   1b654:	ldrd	r8, [sp, #16]
   1b658:	ldrd	sl, [sp, #24]
   1b65c:	add	sp, sp, #32
   1b660:	pop	{pc}		; (ldr pc, [sp], #4)
   1b664:	ldr	r1, [r2, #4]
   1b668:	ldrb	r0, [r1, r3]
   1b66c:	cmp	r0, #193	; 0xc1
   1b670:	movls	sl, #0
   1b674:	bls	1b644 <__assert_fail@plt+0xa17c>
   1b678:	add	ip, r3, #1
   1b67c:	ldr	r2, [r2, #48]	; 0x30
   1b680:	cmp	ip, r2
   1b684:	movge	sl, #0
   1b688:	bge	1b644 <__assert_fail@plt+0xa17c>
   1b68c:	add	lr, r1, r3
   1b690:	ldrb	lr, [lr, #1]
   1b694:	cmp	r0, #223	; 0xdf
   1b698:	bls	1b700 <__assert_fail@plt+0xa238>
   1b69c:	cmp	r0, #239	; 0xef
   1b6a0:	bhi	1b714 <__assert_fail@plt+0xa24c>
   1b6a4:	cmp	lr, #159	; 0x9f
   1b6a8:	cmpls	r0, #224	; 0xe0
   1b6ac:	movne	sl, #3
   1b6b0:	beq	1b8e8 <__assert_fail@plt+0xa420>
   1b6b4:	add	r0, sl, r3
   1b6b8:	cmp	r2, r0
   1b6bc:	movlt	sl, #0
   1b6c0:	blt	1b644 <__assert_fail@plt+0xa17c>
   1b6c4:	ldrb	r2, [r1, ip]
   1b6c8:	eor	r2, r2, #128	; 0x80
   1b6cc:	cmp	r2, #63	; 0x3f
   1b6d0:	bhi	1b8f0 <__assert_fail@plt+0xa428>
   1b6d4:	add	r0, r3, #2
   1b6d8:	add	r0, r1, r0
   1b6dc:	add	r3, r1, r3
   1b6e0:	add	r3, r3, sl
   1b6e4:	ldrb	r2, [r0], #1
   1b6e8:	eor	r2, r2, #128	; 0x80
   1b6ec:	cmp	r2, #63	; 0x3f
   1b6f0:	bhi	1b8f8 <__assert_fail@plt+0xa430>
   1b6f4:	cmp	r3, r0
   1b6f8:	bne	1b6e4 <__assert_fail@plt+0xa21c>
   1b6fc:	b	1b644 <__assert_fail@plt+0xa17c>
   1b700:	eor	lr, lr, #128	; 0x80
   1b704:	cmp	lr, #63	; 0x3f
   1b708:	movhi	sl, #0
   1b70c:	movls	sl, #2
   1b710:	b	1b644 <__assert_fail@plt+0xa17c>
   1b714:	cmp	r0, #247	; 0xf7
   1b718:	bhi	1b734 <__assert_fail@plt+0xa26c>
   1b71c:	cmp	lr, #143	; 0x8f
   1b720:	cmpls	r0, #240	; 0xf0
   1b724:	movne	sl, #4
   1b728:	bne	1b6b4 <__assert_fail@plt+0xa1ec>
   1b72c:	mov	sl, #0
   1b730:	b	1b644 <__assert_fail@plt+0xa17c>
   1b734:	cmp	r0, #251	; 0xfb
   1b738:	bhi	1b754 <__assert_fail@plt+0xa28c>
   1b73c:	cmp	lr, #135	; 0x87
   1b740:	cmpls	r0, #248	; 0xf8
   1b744:	movne	sl, #5
   1b748:	bne	1b6b4 <__assert_fail@plt+0xa1ec>
   1b74c:	mov	sl, #0
   1b750:	b	1b644 <__assert_fail@plt+0xa17c>
   1b754:	cmp	r0, #253	; 0xfd
   1b758:	movhi	sl, #0
   1b75c:	bhi	1b644 <__assert_fail@plt+0xa17c>
   1b760:	cmp	lr, #131	; 0x83
   1b764:	cmpls	r0, #252	; 0xfc
   1b768:	moveq	sl, #0
   1b76c:	beq	1b644 <__assert_fail@plt+0xa17c>
   1b770:	mov	sl, #6
   1b774:	b	1b6b4 <__assert_fail@plt+0xa1ec>
   1b778:	cmp	r0, #1
   1b77c:	movle	sl, #0
   1b780:	ble	1b644 <__assert_fail@plt+0xa17c>
   1b784:	ldr	r3, [r7, #128]	; 0x80
   1b788:	tst	r3, #64	; 0x40
   1b78c:	bne	1b7a4 <__assert_fail@plt+0xa2dc>
   1b790:	ldr	r2, [r6, #4]
   1b794:	ldrb	r2, [r2, r5]
   1b798:	cmp	r2, #10
   1b79c:	moveq	sl, #0
   1b7a0:	beq	1b644 <__assert_fail@plt+0xa17c>
   1b7a4:	tst	r3, #128	; 0x80
   1b7a8:	beq	1b644 <__assert_fail@plt+0xa17c>
   1b7ac:	ldr	r3, [r6, #4]
   1b7b0:	ldrb	r3, [r3, r5]
   1b7b4:	cmp	r3, #0
   1b7b8:	moveq	sl, #0
   1b7bc:	b	1b644 <__assert_fail@plt+0xa17c>
   1b7c0:	ldr	r7, [r9, r8, lsl #3]
   1b7c4:	ldr	r3, [r7, #32]
   1b7c8:	cmp	r3, #0
   1b7cc:	bne	1b80c <__assert_fail@plt+0xa344>
   1b7d0:	ldr	r3, [r7, #36]	; 0x24
   1b7d4:	cmp	r3, #0
   1b7d8:	bne	1b80c <__assert_fail@plt+0xa344>
   1b7dc:	ldr	r3, [r7, #20]
   1b7e0:	cmp	r3, #0
   1b7e4:	moveq	r4, #0
   1b7e8:	beq	1b8a0 <__assert_fail@plt+0xa3d8>
   1b7ec:	mov	r1, r5
   1b7f0:	mov	r0, r6
   1b7f4:	bl	160b4 <__assert_fail@plt+0x4bec>
   1b7f8:	mov	r4, r0
   1b7fc:	ldr	r0, [r7, #20]
   1b800:	cmp	r0, #0
   1b804:	bgt	1b828 <__assert_fail@plt+0xa360>
   1b808:	b	1b8a0 <__assert_fail@plt+0xa3d8>
   1b80c:	mov	r1, r5
   1b810:	mov	r0, r6
   1b814:	bl	160b4 <__assert_fail@plt+0x4bec>
   1b818:	mov	r4, r0
   1b81c:	ldr	r0, [r7, #20]
   1b820:	cmp	r0, #0
   1b824:	ble	1b868 <__assert_fail@plt+0xa3a0>
   1b828:	ldr	r2, [r7]
   1b82c:	ldr	r3, [r2]
   1b830:	cmp	r3, r4
   1b834:	beq	1b854 <__assert_fail@plt+0xa38c>
   1b838:	mov	r3, #0
   1b83c:	add	r3, r3, #1
   1b840:	cmp	r0, r3
   1b844:	beq	1b868 <__assert_fail@plt+0xa3a0>
   1b848:	ldr	r1, [r2, #4]!
   1b84c:	cmp	r1, r4
   1b850:	bne	1b83c <__assert_fail@plt+0xa374>
   1b854:	ldrb	r3, [r7, #16]
   1b858:	and	r3, r3, #1
   1b85c:	cmp	r3, #0
   1b860:	movne	sl, #0
   1b864:	b	1b644 <__assert_fail@plt+0xa17c>
   1b868:	ldr	r3, [r7, #36]	; 0x24
   1b86c:	cmp	r3, #0
   1b870:	ble	1b8a0 <__assert_fail@plt+0xa3d8>
   1b874:	mov	r5, #0
   1b878:	ldr	r3, [r7, #12]
   1b87c:	ldr	r1, [r3, r5, lsl #2]
   1b880:	mov	r0, r4
   1b884:	bl	11180 <iswctype@plt>
   1b888:	cmp	r0, #0
   1b88c:	bne	1b854 <__assert_fail@plt+0xa38c>
   1b890:	add	r5, r5, #1
   1b894:	ldr	r3, [r7, #36]	; 0x24
   1b898:	cmp	r3, r5
   1b89c:	bgt	1b878 <__assert_fail@plt+0xa3b0>
   1b8a0:	ldr	r0, [r7, #32]
   1b8a4:	cmp	r0, #0
   1b8a8:	ble	1b908 <__assert_fail@plt+0xa440>
   1b8ac:	ldr	r2, [r7, #4]
   1b8b0:	sub	r2, r2, #4
   1b8b4:	mov	r3, #0
   1b8b8:	b	1b8c8 <__assert_fail@plt+0xa400>
   1b8bc:	add	r3, r3, #1
   1b8c0:	cmp	r0, r3
   1b8c4:	beq	1b908 <__assert_fail@plt+0xa440>
   1b8c8:	ldr	r1, [r2, #4]!
   1b8cc:	cmp	r4, r1
   1b8d0:	bcc	1b8bc <__assert_fail@plt+0xa3f4>
   1b8d4:	ldr	r1, [r7, #8]
   1b8d8:	ldr	r1, [r1, r3, lsl #2]
   1b8dc:	cmp	r4, r1
   1b8e0:	bhi	1b8bc <__assert_fail@plt+0xa3f4>
   1b8e4:	b	1b854 <__assert_fail@plt+0xa38c>
   1b8e8:	mov	sl, #0
   1b8ec:	b	1b644 <__assert_fail@plt+0xa17c>
   1b8f0:	mov	sl, #0
   1b8f4:	b	1b644 <__assert_fail@plt+0xa17c>
   1b8f8:	mov	sl, #0
   1b8fc:	b	1b644 <__assert_fail@plt+0xa17c>
   1b900:	mov	sl, #0
   1b904:	b	1b644 <__assert_fail@plt+0xa17c>
   1b908:	ldrb	r3, [r7, #16]
   1b90c:	tst	r3, #1
   1b910:	beq	1b900 <__assert_fail@plt+0xa438>
   1b914:	cmp	sl, #1
   1b918:	movlt	sl, #1
   1b91c:	b	1b644 <__assert_fail@plt+0xa17c>
   1b920:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b924:	strd	r6, [sp, #8]
   1b928:	strd	r8, [sp, #16]
   1b92c:	strd	sl, [sp, #24]
   1b930:	str	lr, [sp, #32]
   1b934:	sub	sp, sp, #28
   1b938:	str	r3, [sp, #4]
   1b93c:	add	r3, r1, r1, lsl #1
   1b940:	ldr	r6, [r0, #28]
   1b944:	add	r6, r6, r3, lsl #2
   1b948:	mov	r3, #0
   1b94c:	str	r3, [sp, #12]
   1b950:	str	r3, [sp, #16]
   1b954:	str	r3, [sp, #20]
   1b958:	ldr	r3, [r6, #4]
   1b95c:	cmp	r3, #0
   1b960:	ble	1b9dc <__assert_fail@plt+0xa514>
   1b964:	mov	r7, r0
   1b968:	mov	r8, r1
   1b96c:	mov	fp, r2
   1b970:	mov	r5, #0
   1b974:	b	1ba5c <__assert_fail@plt+0xa594>
   1b978:	ldr	r0, [sp, #20]
   1b97c:	bl	135a4 <__assert_fail@plt+0x20dc>
   1b980:	b	1b9e8 <__assert_fail@plt+0xa520>
   1b984:	cmp	r3, #0
   1b988:	ble	1b9dc <__assert_fail@plt+0xa514>
   1b98c:	mov	r4, #0
   1b990:	b	1b9bc <__assert_fail@plt+0xa4f4>
   1b994:	mov	r1, r5
   1b998:	mov	r0, fp
   1b99c:	bl	16194 <__assert_fail@plt+0x4ccc>
   1b9a0:	sub	r1, r0, #1
   1b9a4:	mov	r0, fp
   1b9a8:	bl	1622c <__assert_fail@plt+0x4d64>
   1b9ac:	add	r4, r4, #1
   1b9b0:	ldr	r3, [r6, #4]
   1b9b4:	cmp	r3, r4
   1b9b8:	ble	1b9dc <__assert_fail@plt+0xa514>
   1b9bc:	ldr	r3, [r6, #8]
   1b9c0:	ldr	r5, [r3, r4, lsl #2]
   1b9c4:	mov	r1, r5
   1b9c8:	add	r0, sp, #12
   1b9cc:	bl	16194 <__assert_fail@plt+0x4ccc>
   1b9d0:	cmp	r0, #0
   1b9d4:	bne	1b9ac <__assert_fail@plt+0xa4e4>
   1b9d8:	b	1b994 <__assert_fail@plt+0xa4cc>
   1b9dc:	ldr	r0, [sp, #20]
   1b9e0:	bl	135a4 <__assert_fail@plt+0x20dc>
   1b9e4:	mov	r4, #0
   1b9e8:	mov	r0, r4
   1b9ec:	add	sp, sp, #28
   1b9f0:	ldrd	r4, [sp]
   1b9f4:	ldrd	r6, [sp, #8]
   1b9f8:	ldrd	r8, [sp, #16]
   1b9fc:	ldrd	sl, [sp, #24]
   1ba00:	add	sp, sp, #32
   1ba04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba08:	mov	r1, r9
   1ba0c:	mov	r0, r6
   1ba10:	bl	16194 <__assert_fail@plt+0x4ccc>
   1ba14:	cmp	r0, #0
   1ba18:	bne	1ba4c <__assert_fail@plt+0xa584>
   1ba1c:	mov	r1, r9
   1ba20:	mov	r0, fp
   1ba24:	bl	16194 <__assert_fail@plt+0x4ccc>
   1ba28:	cmp	r0, #0
   1ba2c:	beq	1ba4c <__assert_fail@plt+0xa584>
   1ba30:	ldr	r2, [r7, #28]
   1ba34:	add	r2, r2, r4
   1ba38:	ldr	r1, [sp, #4]
   1ba3c:	add	r0, sp, #12
   1ba40:	bl	175ac <__assert_fail@plt+0x60e4>
   1ba44:	subs	r4, r0, #0
   1ba48:	bne	1b978 <__assert_fail@plt+0xa4b0>
   1ba4c:	add	r5, r5, #1
   1ba50:	ldr	r3, [r6, #4]
   1ba54:	cmp	r3, r5
   1ba58:	ble	1b984 <__assert_fail@plt+0xa4bc>
   1ba5c:	ldr	r3, [r6, #8]
   1ba60:	ldr	r4, [r3, r5, lsl #2]
   1ba64:	cmp	r8, r4
   1ba68:	beq	1ba4c <__assert_fail@plt+0xa584>
   1ba6c:	ldr	r3, [r7]
   1ba70:	add	r3, r3, r4, lsl #3
   1ba74:	ldrb	r3, [r3, #4]
   1ba78:	tst	r3, #8
   1ba7c:	beq	1ba4c <__assert_fail@plt+0xa584>
   1ba80:	add	r4, r4, r4, lsl #1
   1ba84:	lsl	r4, r4, #2
   1ba88:	ldr	r3, [r7, #20]
   1ba8c:	add	r3, r3, r4
   1ba90:	ldr	r2, [r3, #8]
   1ba94:	ldr	r9, [r2]
   1ba98:	ldr	r3, [r3, #4]
   1ba9c:	cmp	r3, #1
   1baa0:	ble	1ba08 <__assert_fail@plt+0xa540>
   1baa4:	ldr	sl, [r2, #4]
   1baa8:	mov	r1, r9
   1baac:	mov	r0, r6
   1bab0:	bl	16194 <__assert_fail@plt+0x4ccc>
   1bab4:	cmp	r0, #0
   1bab8:	bne	1bad0 <__assert_fail@plt+0xa608>
   1babc:	mov	r1, r9
   1bac0:	mov	r0, fp
   1bac4:	bl	16194 <__assert_fail@plt+0x4ccc>
   1bac8:	cmp	r0, #0
   1bacc:	bne	1ba30 <__assert_fail@plt+0xa568>
   1bad0:	cmp	sl, #0
   1bad4:	ble	1ba4c <__assert_fail@plt+0xa584>
   1bad8:	mov	r1, sl
   1badc:	mov	r0, r6
   1bae0:	bl	16194 <__assert_fail@plt+0x4ccc>
   1bae4:	cmp	r0, #0
   1bae8:	bne	1ba4c <__assert_fail@plt+0xa584>
   1baec:	mov	r1, sl
   1baf0:	mov	r0, fp
   1baf4:	bl	16194 <__assert_fail@plt+0x4ccc>
   1baf8:	cmp	r0, #0
   1bafc:	beq	1ba4c <__assert_fail@plt+0xa584>
   1bb00:	b	1ba30 <__assert_fail@plt+0xa568>
   1bb04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bb08:	strd	r6, [sp, #8]
   1bb0c:	strd	r8, [sp, #16]
   1bb10:	strd	sl, [sp, #24]
   1bb14:	str	lr, [sp, #32]
   1bb18:	sub	sp, sp, #28
   1bb1c:	mov	r4, r0
   1bb20:	mov	r6, r1
   1bb24:	mov	r7, r2
   1bb28:	ldr	r5, [r0, #24]
   1bb2c:	cmp	r5, r1
   1bb30:	suble	r5, r1, r5
   1bb34:	ble	1bb90 <__assert_fail@plt+0xa6c8>
   1bb38:	ldr	r3, [r0, #80]	; 0x50
   1bb3c:	cmp	r3, #1
   1bb40:	bgt	1bc54 <__assert_fail@plt+0xa78c>
   1bb44:	ldr	r3, [r4, #44]	; 0x2c
   1bb48:	str	r3, [r4, #48]	; 0x30
   1bb4c:	ldr	r3, [r4, #52]	; 0x34
   1bb50:	str	r3, [r4, #56]	; 0x38
   1bb54:	mov	r3, #0
   1bb58:	str	r3, [r4, #28]
   1bb5c:	str	r3, [r4, #24]
   1bb60:	str	r3, [r4, #32]
   1bb64:	strb	r3, [r4, #76]	; 0x4c
   1bb68:	and	r3, r7, #1
   1bb6c:	cmp	r3, #0
   1bb70:	movne	r3, #4
   1bb74:	moveq	r3, #6
   1bb78:	str	r3, [r4, #60]	; 0x3c
   1bb7c:	ldrb	r3, [r4, #75]	; 0x4b
   1bb80:	cmp	r3, #0
   1bb84:	ldreq	r3, [r4]
   1bb88:	streq	r3, [r4, #4]
   1bb8c:	mov	r5, r6
   1bb90:	cmp	r5, #0
   1bb94:	beq	1bc0c <__assert_fail@plt+0xa744>
   1bb98:	ldr	r3, [r4, #32]
   1bb9c:	cmp	r3, r5
   1bba0:	ble	1be88 <__assert_fail@plt+0xa9c0>
   1bba4:	ldrb	r3, [r4, #76]	; 0x4c
   1bba8:	cmp	r3, #0
   1bbac:	bne	1bc64 <__assert_fail@plt+0xa79c>
   1bbb0:	mov	r2, r7
   1bbb4:	sub	r1, r5, #1
   1bbb8:	mov	r0, r4
   1bbbc:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1bbc0:	str	r0, [r4, #60]	; 0x3c
   1bbc4:	ldr	r3, [r4, #80]	; 0x50
   1bbc8:	cmp	r3, #1
   1bbcc:	bgt	1be54 <__assert_fail@plt+0xa98c>
   1bbd0:	ldrb	r3, [r4, #75]	; 0x4b
   1bbd4:	cmp	r3, #0
   1bbd8:	bne	1be70 <__assert_fail@plt+0xa9a8>
   1bbdc:	ldr	r3, [r4, #28]
   1bbe0:	sub	r3, r3, r5
   1bbe4:	str	r3, [r4, #28]
   1bbe8:	ldr	r3, [r4, #32]
   1bbec:	sub	r3, r3, r5
   1bbf0:	str	r3, [r4, #32]
   1bbf4:	ldrb	r3, [r4, #75]	; 0x4b
   1bbf8:	cmp	r3, #0
   1bbfc:	bne	1bc0c <__assert_fail@plt+0xa744>
   1bc00:	ldr	r3, [r4, #4]
   1bc04:	add	r3, r3, r5
   1bc08:	str	r3, [r4, #4]
   1bc0c:	str	r6, [r4, #24]
   1bc10:	ldr	r3, [r4, #48]	; 0x30
   1bc14:	sub	r3, r3, r5
   1bc18:	str	r3, [r4, #48]	; 0x30
   1bc1c:	ldr	r2, [r4, #56]	; 0x38
   1bc20:	sub	r5, r2, r5
   1bc24:	str	r5, [r4, #56]	; 0x38
   1bc28:	ldr	r2, [r4, #80]	; 0x50
   1bc2c:	cmp	r2, #1
   1bc30:	ble	1c1cc <__assert_fail@plt+0xad04>
   1bc34:	ldrb	r3, [r4, #72]	; 0x48
   1bc38:	cmp	r3, #0
   1bc3c:	beq	1c1c0 <__assert_fail@plt+0xacf8>
   1bc40:	mov	r0, r4
   1bc44:	bl	179ac <__assert_fail@plt+0x64e4>
   1bc48:	cmp	r0, #0
   1bc4c:	beq	1c1dc <__assert_fail@plt+0xad14>
   1bc50:	b	1c1e4 <__assert_fail@plt+0xad1c>
   1bc54:	mov	r3, #0
   1bc58:	str	r3, [r0, #16]
   1bc5c:	str	r3, [r0, #20]
   1bc60:	b	1bb44 <__assert_fail@plt+0xa67c>
   1bc64:	ldr	sl, [r4, #28]
   1bc68:	ldr	r9, [r4, #12]
   1bc6c:	mov	r2, sl
   1bc70:	mov	r1, #0
   1bc74:	b	1bc84 <__assert_fail@plt+0xa7bc>
   1bc78:	mov	r2, r8
   1bc7c:	cmp	r1, r2
   1bc80:	bge	1bca8 <__assert_fail@plt+0xa7e0>
   1bc84:	add	r3, r1, r2
   1bc88:	add	r3, r3, r3, lsr #31
   1bc8c:	asr	r8, r3, #1
   1bc90:	ldr	r3, [r9, r8, lsl #2]
   1bc94:	cmp	r3, r5
   1bc98:	bgt	1bc78 <__assert_fail@plt+0xa7b0>
   1bc9c:	bge	1bcb0 <__assert_fail@plt+0xa7e8>
   1bca0:	add	r1, r8, #1
   1bca4:	b	1bc7c <__assert_fail@plt+0xa7b4>
   1bca8:	cmp	r3, r5
   1bcac:	addlt	r8, r8, #1
   1bcb0:	mov	r2, r7
   1bcb4:	sub	r1, r8, #1
   1bcb8:	mov	r0, r4
   1bcbc:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1bcc0:	str	r0, [r4, #60]	; 0x3c
   1bcc4:	cmp	r5, sl
   1bcc8:	movge	r3, #0
   1bccc:	movlt	r3, #1
   1bcd0:	cmp	r5, r8
   1bcd4:	movne	r3, #0
   1bcd8:	cmp	r3, #0
   1bcdc:	bne	1bdb4 <__assert_fail@plt+0xa8ec>
   1bce0:	ldr	r3, [r4, #44]	; 0x2c
   1bce4:	sub	r3, r3, r6
   1bce8:	add	r3, r3, r5
   1bcec:	str	r3, [r4, #48]	; 0x30
   1bcf0:	ldr	r3, [r4, #52]	; 0x34
   1bcf4:	sub	r3, r3, r6
   1bcf8:	add	r3, r3, r5
   1bcfc:	str	r3, [r4, #56]	; 0x38
   1bd00:	mov	r3, #0
   1bd04:	strb	r3, [r4, #76]	; 0x4c
   1bd08:	cmp	r8, r3
   1bd0c:	ble	1bd38 <__assert_fail@plt+0xa870>
   1bd10:	sub	r2, r8, #-1073741823	; 0xc0000001
   1bd14:	add	r3, r9, r2, lsl #2
   1bd18:	ldr	r2, [r9, r2, lsl #2]
   1bd1c:	cmp	r5, r2
   1bd20:	bne	1bd38 <__assert_fail@plt+0xa870>
   1bd24:	subs	r8, r8, #1
   1bd28:	beq	1bd38 <__assert_fail@plt+0xa870>
   1bd2c:	ldr	r2, [r3, #-4]!
   1bd30:	cmp	r2, r5
   1bd34:	beq	1bd24 <__assert_fail@plt+0xa85c>
   1bd38:	cmp	r8, sl
   1bd3c:	bge	1be38 <__assert_fail@plt+0xa970>
   1bd40:	ldr	r2, [r4, #8]
   1bd44:	add	r3, r2, r8, lsl #2
   1bd48:	ldr	r2, [r2, r8, lsl #2]
   1bd4c:	cmn	r2, #1
   1bd50:	bne	1bd6c <__assert_fail@plt+0xa8a4>
   1bd54:	add	r8, r8, #1
   1bd58:	cmp	sl, r8
   1bd5c:	beq	1be40 <__assert_fail@plt+0xa978>
   1bd60:	ldr	r2, [r3, #4]!
   1bd64:	cmn	r2, #1
   1bd68:	beq	1bd54 <__assert_fail@plt+0xa88c>
   1bd6c:	ldr	r2, [r9, r8, lsl #2]
   1bd70:	sub	r2, r2, r5
   1bd74:	str	r2, [r4, #28]
   1bd78:	cmp	r2, #0
   1bd7c:	beq	1be48 <__assert_fail@plt+0xa980>
   1bd80:	ble	1bda4 <__assert_fail@plt+0xa8dc>
   1bd84:	mov	r3, #0
   1bd88:	mvn	r1, #0
   1bd8c:	ldr	r2, [r4, #8]
   1bd90:	str	r1, [r2, r3, lsl #2]
   1bd94:	add	r3, r3, #1
   1bd98:	ldr	r2, [r4, #28]
   1bd9c:	cmp	r2, r3
   1bda0:	bgt	1bd8c <__assert_fail@plt+0xa8c4>
   1bda4:	mov	r1, #255	; 0xff
   1bda8:	ldr	r0, [r4, #4]
   1bdac:	bl	113e4 <memset@plt>
   1bdb0:	b	1be48 <__assert_fail@plt+0xa980>
   1bdb4:	ldr	r3, [r9, r8, lsl #2]
   1bdb8:	cmp	r3, r5
   1bdbc:	bne	1bce0 <__assert_fail@plt+0xa818>
   1bdc0:	ldr	r0, [r4, #8]
   1bdc4:	lsl	r7, r5, #2
   1bdc8:	sub	r2, sl, r5
   1bdcc:	lsl	r2, r2, #2
   1bdd0:	add	r1, r0, r7
   1bdd4:	bl	111d4 <memmove@plt>
   1bdd8:	ldr	r0, [r4, #4]
   1bddc:	ldr	r2, [r4, #28]
   1bde0:	sub	r2, r2, r5
   1bde4:	add	r1, r0, r5
   1bde8:	bl	111d4 <memmove@plt>
   1bdec:	ldr	r3, [r4, #28]
   1bdf0:	sub	r3, r3, r5
   1bdf4:	str	r3, [r4, #28]
   1bdf8:	ldr	r2, [r4, #32]
   1bdfc:	sub	r2, r2, r5
   1be00:	str	r2, [r4, #32]
   1be04:	cmp	r3, #0
   1be08:	ble	1bbf4 <__assert_fail@plt+0xa72c>
   1be0c:	mov	r3, #0
   1be10:	ldr	r1, [r4, #12]
   1be14:	ldr	r2, [r1, r7]
   1be18:	sub	r2, r2, r5
   1be1c:	str	r2, [r1, r3, lsl #2]
   1be20:	add	r3, r3, #1
   1be24:	add	r7, r7, #4
   1be28:	ldr	r2, [r4, #28]
   1be2c:	cmp	r2, r3
   1be30:	bgt	1be10 <__assert_fail@plt+0xa948>
   1be34:	b	1bbf4 <__assert_fail@plt+0xa72c>
   1be38:	cmp	r8, sl
   1be3c:	bne	1bd6c <__assert_fail@plt+0xa8a4>
   1be40:	mov	r3, #0
   1be44:	str	r3, [r4, #28]
   1be48:	ldr	r3, [r4, #28]
   1be4c:	str	r3, [r4, #32]
   1be50:	b	1bbf4 <__assert_fail@plt+0xa72c>
   1be54:	ldr	r0, [r4, #8]
   1be58:	ldr	r2, [r4, #28]
   1be5c:	sub	r2, r2, r5
   1be60:	lsl	r2, r2, #2
   1be64:	add	r1, r0, r5, lsl #2
   1be68:	bl	111d4 <memmove@plt>
   1be6c:	b	1bbd0 <__assert_fail@plt+0xa708>
   1be70:	ldr	r0, [r4, #4]
   1be74:	ldr	r2, [r4, #28]
   1be78:	sub	r2, r2, r5
   1be7c:	add	r1, r0, r5
   1be80:	bl	111d4 <memmove@plt>
   1be84:	b	1bbdc <__assert_fail@plt+0xa714>
   1be88:	ldr	fp, [r4, #28]
   1be8c:	ldrb	r3, [r4, #76]	; 0x4c
   1be90:	cmp	r3, #0
   1be94:	bne	1bff4 <__assert_fail@plt+0xab2c>
   1be98:	mov	r3, #0
   1be9c:	str	r3, [r4, #28]
   1bea0:	ldr	r3, [r4, #80]	; 0x50
   1bea4:	cmp	r3, #1
   1bea8:	ble	1c15c <__assert_fail@plt+0xac94>
   1beac:	ldrb	r2, [r4, #73]	; 0x49
   1beb0:	cmp	r2, #0
   1beb4:	beq	1bf6c <__assert_fail@plt+0xaaa4>
   1beb8:	ldr	r1, [r4]
   1bebc:	ldr	r9, [r4, #24]
   1bec0:	add	r9, r1, r9
   1bec4:	sub	r3, r5, r3
   1bec8:	add	r3, r9, r3
   1becc:	cmp	r1, r3
   1bed0:	movcc	r1, r3
   1bed4:	mov	sl, r5
   1bed8:	sub	r3, r5, #1
   1bedc:	add	r8, r9, r3
   1bee0:	cmp	r1, r8
   1bee4:	bhi	1bf6c <__assert_fail@plt+0xaaa4>
   1bee8:	ldrb	r3, [r9, r3]
   1beec:	and	r3, r3, #192	; 0xc0
   1bef0:	cmp	r3, #128	; 0x80
   1bef4:	subeq	r3, r8, #1
   1bef8:	subeq	r1, r1, #1
   1befc:	bne	1bf20 <__assert_fail@plt+0xaa58>
   1bf00:	mov	r8, r3
   1bf04:	cmp	r3, r1
   1bf08:	beq	1bf6c <__assert_fail@plt+0xaaa4>
   1bf0c:	sub	r3, r3, #1
   1bf10:	ldrb	r2, [r8]
   1bf14:	and	r2, r2, #192	; 0xc0
   1bf18:	cmp	r2, #128	; 0x80
   1bf1c:	beq	1bf00 <__assert_fail@plt+0xaa38>
   1bf20:	ldr	r2, [r4, #48]	; 0x30
   1bf24:	add	r2, r9, r2
   1bf28:	sub	r2, r2, r8
   1bf2c:	ldr	r3, [r4, #64]	; 0x40
   1bf30:	cmp	r3, #0
   1bf34:	moveq	ip, r8
   1bf38:	bne	1c020 <__assert_fail@plt+0xab58>
   1bf3c:	mov	r0, #0
   1bf40:	mov	r1, #0
   1bf44:	strd	r0, [sp, #16]
   1bf48:	add	r3, sp, #16
   1bf4c:	mov	r1, ip
   1bf50:	add	r0, sp, #4
   1bf54:	bl	13880 <__assert_fail@plt+0x23b8>
   1bf58:	add	r9, r9, sl
   1bf5c:	sub	r8, r9, r8
   1bf60:	cmp	r8, r0
   1bf64:	cmnls	r0, #3
   1bf68:	bls	1c068 <__assert_fail@plt+0xaba0>
   1bf6c:	ldr	r0, [r4, #24]
   1bf70:	ldr	r3, [r4, #32]
   1bf74:	add	r0, r0, r3
   1bf78:	cmp	r6, r0
   1bf7c:	ble	1c230 <__assert_fail@plt+0xad68>
   1bf80:	add	r9, r4, #16
   1bf84:	ldr	r8, [r4, #44]	; 0x2c
   1bf88:	sub	r8, r8, r0
   1bf8c:	ldrd	r2, [r9]
   1bf90:	strd	r2, [sp, #16]
   1bf94:	mov	sl, r0
   1bf98:	ldr	r1, [r4]
   1bf9c:	mov	r3, r9
   1bfa0:	mov	r2, r8
   1bfa4:	add	r1, r1, r0
   1bfa8:	add	r0, sp, #8
   1bfac:	bl	13880 <__assert_fail@plt+0x23b8>
   1bfb0:	sub	r3, r0, #1
   1bfb4:	cmn	r3, #4
   1bfb8:	ldrls	r8, [sp, #8]
   1bfbc:	bhi	1c0bc <__assert_fail@plt+0xabf4>
   1bfc0:	add	r0, sl, r0
   1bfc4:	cmp	r6, r0
   1bfc8:	bgt	1bf84 <__assert_fail@plt+0xaabc>
   1bfcc:	sub	r0, r0, r6
   1bfd0:	str	r0, [r4, #28]
   1bfd4:	cmn	r8, #1
   1bfd8:	bne	1c088 <__assert_fail@plt+0xabc0>
   1bfdc:	mov	r2, r7
   1bfe0:	sub	r1, fp, #1
   1bfe4:	mov	r0, r4
   1bfe8:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1bfec:	str	r0, [r4, #60]	; 0x3c
   1bff0:	b	1c0a4 <__assert_fail@plt+0xabdc>
   1bff4:	ldr	r3, [r4, #44]	; 0x2c
   1bff8:	sub	r3, r3, r6
   1bffc:	add	r3, r3, r5
   1c000:	str	r3, [r4, #48]	; 0x30
   1c004:	ldr	r3, [r4, #52]	; 0x34
   1c008:	sub	r3, r3, r6
   1c00c:	add	r3, r3, r5
   1c010:	str	r3, [r4, #56]	; 0x38
   1c014:	mov	r3, #0
   1c018:	strb	r3, [r4, #76]	; 0x4c
   1c01c:	b	1be98 <__assert_fail@plt+0xa9d0>
   1c020:	cmp	r2, #6
   1c024:	movlt	r0, r2
   1c028:	movge	r0, #6
   1c02c:	cmp	r2, #0
   1c030:	addle	ip, sp, #8
   1c034:	ble	1bf3c <__assert_fail@plt+0xaa74>
   1c038:	add	r1, r8, r0
   1c03c:	add	ip, sp, #24
   1c040:	add	r0, ip, r0
   1c044:	sub	r0, r0, #17
   1c048:	mov	lr, r8
   1c04c:	ldrb	ip, [r1, #-1]!
   1c050:	ldrb	ip, [r3, ip]
   1c054:	strb	ip, [r0], #-1
   1c058:	cmp	r1, lr
   1c05c:	bne	1c04c <__assert_fail@plt+0xab84>
   1c060:	add	ip, sp, #8
   1c064:	b	1bf3c <__assert_fail@plt+0xaa74>
   1c068:	mov	r3, #0
   1c06c:	str	r3, [r4, #16]
   1c070:	str	r3, [r4, #20]
   1c074:	sub	r0, r0, r8
   1c078:	str	r0, [r4, #28]
   1c07c:	ldr	r8, [sp, #4]
   1c080:	cmn	r8, #1
   1c084:	beq	1bf6c <__assert_fail@plt+0xaaa4>
   1c088:	ldrb	r3, [r4, #78]	; 0x4e
   1c08c:	cmp	r3, #0
   1c090:	bne	1c0e0 <__assert_fail@plt+0xac18>
   1c094:	cmp	r8, #10
   1c098:	movne	r3, #0
   1c09c:	beq	1c108 <__assert_fail@plt+0xac40>
   1c0a0:	str	r3, [r4, #60]	; 0x3c
   1c0a4:	ldr	r2, [r4, #28]
   1c0a8:	cmp	r2, #0
   1c0ac:	bne	1c11c <__assert_fail@plt+0xac54>
   1c0b0:	ldr	r3, [r4, #28]
   1c0b4:	str	r3, [r4, #32]
   1c0b8:	b	1bbf4 <__assert_fail@plt+0xa72c>
   1c0bc:	cmp	r8, #0
   1c0c0:	cmpne	r0, #0
   1c0c4:	ldrne	r3, [r4]
   1c0c8:	ldrbne	r8, [r3, sl]
   1c0cc:	moveq	r8, #0
   1c0d0:	ldrd	r2, [sp, #16]
   1c0d4:	strd	r2, [r9]
   1c0d8:	mov	r0, #1
   1c0dc:	b	1bfc0 <__assert_fail@plt+0xaaf8>
   1c0e0:	mov	r0, r8
   1c0e4:	bl	113cc <iswalnum@plt>
   1c0e8:	subs	r3, r8, #95	; 0x5f
   1c0ec:	movne	r3, #1
   1c0f0:	cmp	r0, #0
   1c0f4:	movne	r3, #0
   1c0f8:	cmp	r3, #0
   1c0fc:	moveq	r3, #1
   1c100:	beq	1c0a0 <__assert_fail@plt+0xabd8>
   1c104:	b	1c094 <__assert_fail@plt+0xabcc>
   1c108:	ldrb	r3, [r4, #77]	; 0x4d
   1c10c:	cmp	r3, #0
   1c110:	moveq	r3, #0
   1c114:	movne	r3, #2
   1c118:	b	1c0a0 <__assert_fail@plt+0xabd8>
   1c11c:	ble	1c140 <__assert_fail@plt+0xac78>
   1c120:	mov	r3, #0
   1c124:	mvn	r1, #0
   1c128:	ldr	r2, [r4, #8]
   1c12c:	str	r1, [r2, r3, lsl #2]
   1c130:	add	r3, r3, #1
   1c134:	ldr	r2, [r4, #28]
   1c138:	cmp	r2, r3
   1c13c:	bgt	1c128 <__assert_fail@plt+0xac60>
   1c140:	ldrb	r3, [r4, #75]	; 0x4b
   1c144:	cmp	r3, #0
   1c148:	beq	1c0b0 <__assert_fail@plt+0xabe8>
   1c14c:	mov	r1, #255	; 0xff
   1c150:	ldr	r0, [r4, #4]
   1c154:	bl	113e4 <memset@plt>
   1c158:	b	1c0b0 <__assert_fail@plt+0xabe8>
   1c15c:	ldr	r3, [r4]
   1c160:	ldr	r2, [r4, #24]
   1c164:	add	r3, r3, r5
   1c168:	add	r3, r3, r2
   1c16c:	ldrb	r1, [r3, #-1]
   1c170:	mov	r3, #0
   1c174:	str	r3, [r4, #32]
   1c178:	ldr	r3, [r4, #64]	; 0x40
   1c17c:	cmp	r3, #0
   1c180:	ldrbne	r1, [r3, r1]
   1c184:	lsr	r2, r1, #5
   1c188:	ldr	r0, [r4, #68]	; 0x44
   1c18c:	and	r3, r1, #31
   1c190:	ldr	r2, [r0, r2, lsl #2]
   1c194:	lsr	r3, r2, r3
   1c198:	ands	r3, r3, #1
   1c19c:	bne	1c1a8 <__assert_fail@plt+0xace0>
   1c1a0:	cmp	r1, #10
   1c1a4:	beq	1c1b0 <__assert_fail@plt+0xace8>
   1c1a8:	str	r3, [r4, #60]	; 0x3c
   1c1ac:	b	1bbf4 <__assert_fail@plt+0xa72c>
   1c1b0:	ldrb	r2, [r4, #77]	; 0x4d
   1c1b4:	cmp	r2, #0
   1c1b8:	movne	r3, #2
   1c1bc:	b	1c1a8 <__assert_fail@plt+0xace0>
   1c1c0:	mov	r0, r4
   1c1c4:	bl	17414 <__assert_fail@plt+0x5f4c>
   1c1c8:	b	1c1dc <__assert_fail@plt+0xad14>
   1c1cc:	ldrb	r2, [r4, #75]	; 0x4b
   1c1d0:	cmp	r2, #0
   1c1d4:	streq	r3, [r4, #28]
   1c1d8:	bne	1c200 <__assert_fail@plt+0xad38>
   1c1dc:	mov	r0, #0
   1c1e0:	str	r0, [r4, #40]	; 0x28
   1c1e4:	add	sp, sp, #28
   1c1e8:	ldrd	r4, [sp]
   1c1ec:	ldrd	r6, [sp, #8]
   1c1f0:	ldrd	r8, [sp, #16]
   1c1f4:	ldrd	sl, [sp, #24]
   1c1f8:	add	sp, sp, #32
   1c1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c200:	ldrb	r3, [r4, #72]	; 0x48
   1c204:	cmp	r3, #0
   1c208:	bne	1c224 <__assert_fail@plt+0xad5c>
   1c20c:	ldr	r3, [r4, #64]	; 0x40
   1c210:	cmp	r3, #0
   1c214:	beq	1c1dc <__assert_fail@plt+0xad14>
   1c218:	mov	r0, r4
   1c21c:	bl	160d0 <__assert_fail@plt+0x4c08>
   1c220:	b	1c1dc <__assert_fail@plt+0xad14>
   1c224:	mov	r0, r4
   1c228:	bl	17f30 <__assert_fail@plt+0x6a68>
   1c22c:	b	1c1dc <__assert_fail@plt+0xad14>
   1c230:	sub	r0, r0, r6
   1c234:	str	r0, [r4, #28]
   1c238:	b	1bfdc <__assert_fail@plt+0xab14>
   1c23c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c240:	strd	r6, [sp, #8]
   1c244:	strd	r8, [sp, #16]
   1c248:	strd	sl, [sp, #24]
   1c24c:	str	lr, [sp, #32]
   1c250:	sub	sp, sp, #14464	; 0x3880
   1c254:	sub	sp, sp, #44	; 0x2c
   1c258:	str	r1, [sp, #16]
   1c25c:	mov	r3, #0
   1c260:	str	r3, [r1, #44]	; 0x2c
   1c264:	str	r3, [r1, #48]	; 0x30
   1c268:	mov	r2, #0
   1c26c:	mov	r3, #0
   1c270:	strd	r2, [sp, #24]
   1c274:	strd	r2, [sp, #32]
   1c278:	strd	r2, [sp, #40]	; 0x28
   1c27c:	strd	r2, [sp, #48]	; 0x30
   1c280:	ldr	r3, [r1, #8]
   1c284:	cmp	r3, #0
   1c288:	ble	1c8d8 <__assert_fail@plt+0xb410>
   1c28c:	mov	r9, r1
   1c290:	mov	sl, #0
   1c294:	str	sl, [sp, #4]
   1c298:	str	r0, [sp, #8]
   1c29c:	b	1c714 <__assert_fail@plt+0xb24c>
   1c2a0:	ldrb	r3, [r3, r1, lsl #3]
   1c2a4:	asr	r0, r3, #5
   1c2a8:	and	r3, r3, #31
   1c2ac:	add	r1, sp, #24
   1c2b0:	ldr	r1, [r1, r0, lsl #2]
   1c2b4:	mov	ip, #1
   1c2b8:	orr	r3, r1, ip, lsl r3
   1c2bc:	add	r1, sp, #24
   1c2c0:	str	r3, [r1, r0, lsl #2]
   1c2c4:	cmp	r2, #0
   1c2c8:	beq	1c3a8 <__assert_fail@plt+0xaee0>
   1c2cc:	tst	r2, #32
   1c2d0:	bne	1c474 <__assert_fail@plt+0xafac>
   1c2d4:	tst	r2, #128	; 0x80
   1c2d8:	bne	1c4a4 <__assert_fail@plt+0xafdc>
   1c2dc:	tst	r2, #4
   1c2e0:	beq	1c344 <__assert_fail@plt+0xae7c>
   1c2e4:	cmp	r7, #1
   1c2e8:	beq	1c4c0 <__assert_fail@plt+0xaff8>
   1c2ec:	ldr	r1, [sp, #8]
   1c2f0:	ldr	r3, [r1, #92]	; 0x5c
   1c2f4:	cmp	r3, #1
   1c2f8:	ble	1c4e8 <__assert_fail@plt+0xb020>
   1c2fc:	add	ip, sp, #20
   1c300:	add	r0, r1, #96	; 0x60
   1c304:	ldr	lr, [r1, #60]	; 0x3c
   1c308:	sub	lr, lr, #4
   1c30c:	add	r4, r1, #128	; 0x80
   1c310:	mov	r1, #0
   1c314:	ldr	r5, [r0], #4
   1c318:	ldr	r3, [lr, #4]!
   1c31c:	mvn	r3, r3
   1c320:	orr	r3, r3, r5
   1c324:	ldr	r5, [ip, #4]!
   1c328:	and	r3, r3, r5
   1c32c:	str	r3, [ip]
   1c330:	orr	r1, r1, r3
   1c334:	cmp	r0, r4
   1c338:	bne	1c314 <__assert_fail@plt+0xae4c>
   1c33c:	cmp	r1, #0
   1c340:	beq	1c6f8 <__assert_fail@plt+0xb230>
   1c344:	tst	r2, #8
   1c348:	beq	1c3a8 <__assert_fail@plt+0xaee0>
   1c34c:	cmp	r7, #1
   1c350:	beq	1c51c <__assert_fail@plt+0xb054>
   1c354:	ldr	r2, [sp, #8]
   1c358:	ldr	r3, [r2, #92]	; 0x5c
   1c35c:	cmp	r3, #1
   1c360:	ble	1c544 <__assert_fail@plt+0xb07c>
   1c364:	add	r0, sp, #20
   1c368:	add	r1, r2, #96	; 0x60
   1c36c:	ldr	ip, [r2, #60]	; 0x3c
   1c370:	sub	ip, ip, #4
   1c374:	add	lr, r2, #128	; 0x80
   1c378:	mov	r2, #0
   1c37c:	ldr	r3, [r1], #4
   1c380:	ldr	r4, [ip, #4]!
   1c384:	and	r4, r4, r3
   1c388:	ldr	r3, [r0, #4]!
   1c38c:	bic	r3, r3, r4
   1c390:	str	r3, [r0]
   1c394:	orr	r2, r2, r3
   1c398:	cmp	r1, lr
   1c39c:	bne	1c37c <__assert_fail@plt+0xaeb4>
   1c3a0:	cmp	r2, #0
   1c3a4:	beq	1c6f8 <__assert_fail@plt+0xb230>
   1c3a8:	cmp	sl, #0
   1c3ac:	addgt	r4, sp, #148	; 0x94
   1c3b0:	movgt	r5, #0
   1c3b4:	bgt	1c5c4 <__assert_fail@plt+0xb0fc>
   1c3b8:	mov	r5, #0
   1c3bc:	b	1c6f0 <__assert_fail@plt+0xb228>
   1c3c0:	ldr	lr, [r3, r1, lsl #3]
   1c3c4:	add	r0, sp, #20
   1c3c8:	sub	r1, lr, #4
   1c3cc:	add	lr, lr, #28
   1c3d0:	ldr	r3, [r0, #4]!
   1c3d4:	ldr	ip, [r1, #4]!
   1c3d8:	orr	r3, r3, ip
   1c3dc:	str	r3, [r0]
   1c3e0:	cmp	r1, lr
   1c3e4:	bne	1c3d0 <__assert_fail@plt+0xaf08>
   1c3e8:	b	1c2c4 <__assert_fail@plt+0xadfc>
   1c3ec:	ldr	r1, [sp, #8]
   1c3f0:	ldr	r3, [r1, #92]	; 0x5c
   1c3f4:	cmp	r3, #1
   1c3f8:	ble	1c428 <__assert_fail@plt+0xaf60>
   1c3fc:	ldr	lr, [r1, #60]	; 0x3c
   1c400:	add	r0, sp, #20
   1c404:	sub	r1, lr, #4
   1c408:	add	lr, lr, #28
   1c40c:	ldr	r3, [r0, #4]!
   1c410:	ldr	ip, [r1, #4]!
   1c414:	orr	r3, r3, ip
   1c418:	str	r3, [r0]
   1c41c:	cmp	r1, lr
   1c420:	bne	1c40c <__assert_fail@plt+0xaf44>
   1c424:	b	1c440 <__assert_fail@plt+0xaf78>
   1c428:	mvn	r0, #0
   1c42c:	mvn	r1, #0
   1c430:	strd	r0, [sp, #24]
   1c434:	strd	r0, [sp, #32]
   1c438:	strd	r0, [sp, #40]	; 0x28
   1c43c:	strd	r0, [sp, #48]	; 0x30
   1c440:	ldr	r3, [sp, #8]
   1c444:	ldr	r3, [r3, #128]	; 0x80
   1c448:	tst	r3, #64	; 0x40
   1c44c:	bne	1c45c <__assert_fail@plt+0xaf94>
   1c450:	ldr	r1, [sp, #24]
   1c454:	bic	r1, r1, #1024	; 0x400
   1c458:	str	r1, [sp, #24]
   1c45c:	tst	r3, #128	; 0x80
   1c460:	beq	1c2c4 <__assert_fail@plt+0xadfc>
   1c464:	ldr	r3, [sp, #24]
   1c468:	bic	r3, r3, #1
   1c46c:	str	r3, [sp, #24]
   1c470:	b	1c2c4 <__assert_fail@plt+0xadfc>
   1c474:	ldr	r3, [sp, #24]
   1c478:	mov	r0, #0
   1c47c:	mov	r1, #0
   1c480:	strd	r0, [sp, #24]
   1c484:	strd	r0, [sp, #32]
   1c488:	strd	r0, [sp, #40]	; 0x28
   1c48c:	strd	r0, [sp, #48]	; 0x30
   1c490:	tst	r3, #1024	; 0x400
   1c494:	beq	1c6f8 <__assert_fail@plt+0xb230>
   1c498:	mov	r3, #1024	; 0x400
   1c49c:	str	r3, [sp, #24]
   1c4a0:	b	1c2d4 <__assert_fail@plt+0xae0c>
   1c4a4:	mov	r2, #0
   1c4a8:	mov	r3, #0
   1c4ac:	strd	r2, [sp, #24]
   1c4b0:	strd	r2, [sp, #32]
   1c4b4:	strd	r2, [sp, #40]	; 0x28
   1c4b8:	strd	r2, [sp, #48]	; 0x30
   1c4bc:	b	1c6f8 <__assert_fail@plt+0xb230>
   1c4c0:	ldrb	r3, [r8, #6]
   1c4c4:	tst	r3, #64	; 0x40
   1c4c8:	bne	1c2ec <__assert_fail@plt+0xae24>
   1c4cc:	mov	r2, #0
   1c4d0:	mov	r3, #0
   1c4d4:	strd	r2, [sp, #24]
   1c4d8:	strd	r2, [sp, #32]
   1c4dc:	strd	r2, [sp, #40]	; 0x28
   1c4e0:	strd	r2, [sp, #48]	; 0x30
   1c4e4:	b	1c6f8 <__assert_fail@plt+0xb230>
   1c4e8:	add	ip, sp, #20
   1c4ec:	ldr	r3, [sp, #8]
   1c4f0:	add	r0, r3, #96	; 0x60
   1c4f4:	add	lr, r3, #128	; 0x80
   1c4f8:	mov	r1, #0
   1c4fc:	ldr	r3, [r0], #4
   1c500:	ldr	r4, [ip, #4]!
   1c504:	and	r3, r3, r4
   1c508:	str	r3, [ip]
   1c50c:	orr	r1, r1, r3
   1c510:	cmp	r0, lr
   1c514:	bne	1c4fc <__assert_fail@plt+0xb034>
   1c518:	b	1c33c <__assert_fail@plt+0xae74>
   1c51c:	ldrb	r3, [r8, #6]
   1c520:	tst	r3, #64	; 0x40
   1c524:	beq	1c354 <__assert_fail@plt+0xae8c>
   1c528:	mov	r2, #0
   1c52c:	mov	r3, #0
   1c530:	strd	r2, [sp, #24]
   1c534:	strd	r2, [sp, #32]
   1c538:	strd	r2, [sp, #40]	; 0x28
   1c53c:	strd	r2, [sp, #48]	; 0x30
   1c540:	b	1c6f8 <__assert_fail@plt+0xb230>
   1c544:	add	r0, sp, #20
   1c548:	ldr	r3, [sp, #8]
   1c54c:	add	r1, r3, #96	; 0x60
   1c550:	add	lr, r3, #128	; 0x80
   1c554:	mov	r2, #0
   1c558:	ldr	ip, [r1], #4
   1c55c:	ldr	r3, [r0, #4]!
   1c560:	bic	r3, r3, ip
   1c564:	str	r3, [r0]
   1c568:	orr	r2, r2, r3
   1c56c:	cmp	r1, lr
   1c570:	bne	1c558 <__assert_fail@plt+0xb090>
   1c574:	b	1c3a0 <__assert_fail@plt+0xaed8>
   1c578:	add	r2, sp, #20
   1c57c:	sub	r1, r4, #32
   1c580:	add	r6, sp, #52	; 0x34
   1c584:	mov	ip, r1
   1c588:	mov	lr, r2
   1c58c:	mov	r0, #0
   1c590:	ldr	r3, [lr, #4]!
   1c594:	ldr	fp, [ip, #4]!
   1c598:	and	r3, r3, fp
   1c59c:	str	r3, [r6, #4]!
   1c5a0:	orr	r0, r0, r3
   1c5a4:	cmp	ip, r4
   1c5a8:	bne	1c590 <__assert_fail@plt+0xb0c8>
   1c5ac:	cmp	r0, #0
   1c5b0:	bne	1c604 <__assert_fail@plt+0xb13c>
   1c5b4:	add	r5, r5, #1
   1c5b8:	add	r4, r4, #32
   1c5bc:	cmp	r5, sl
   1c5c0:	bge	1c6f0 <__assert_fail@plt+0xb228>
   1c5c4:	cmp	r7, #1
   1c5c8:	bne	1c578 <__assert_fail@plt+0xb0b0>
   1c5cc:	ldrb	r2, [r8]
   1c5d0:	asr	r1, r2, #5
   1c5d4:	lsl	r3, r5, #5
   1c5d8:	add	r3, r3, r1, lsl #2
   1c5dc:	add	r1, sp, #14464	; 0x3880
   1c5e0:	add	r1, r1, #40	; 0x28
   1c5e4:	add	r3, r1, r3
   1c5e8:	sub	r3, r3, #14336	; 0x3800
   1c5ec:	and	r2, r2, #31
   1c5f0:	ldr	r3, [r3, #-48]	; 0xffffffd0
   1c5f4:	lsr	r2, r3, r2
   1c5f8:	tst	r2, #1
   1c5fc:	beq	1c5b4 <__assert_fail@plt+0xb0ec>
   1c600:	b	1c578 <__assert_fail@plt+0xb0b0>
   1c604:	add	fp, sp, #84	; 0x54
   1c608:	mov	r6, #0
   1c60c:	mov	lr, r6
   1c610:	ldr	r3, [r2, #4]!
   1c614:	ldr	r0, [r1, #4]!
   1c618:	bic	ip, r0, r3
   1c61c:	str	ip, [fp, #4]!
   1c620:	orr	lr, lr, ip
   1c624:	bic	r3, r3, r0
   1c628:	str	r3, [r2]
   1c62c:	orr	r6, r6, r3
   1c630:	cmp	r1, r4
   1c634:	bne	1c610 <__assert_fail@plt+0xb148>
   1c638:	cmp	lr, #0
   1c63c:	beq	1c6c0 <__assert_fail@plt+0xb1f8>
   1c640:	add	r3, sp, #14464	; 0x3880
   1c644:	add	r3, r3, #40	; 0x28
   1c648:	add	ip, r3, sl, lsl #5
   1c64c:	sub	ip, ip, #14336	; 0x3800
   1c650:	add	r1, sp, #88	; 0x58
   1c654:	ldrd	r2, [r1]
   1c658:	strd	r2, [ip, #-48]	; 0xffffffd0
   1c65c:	ldrd	r2, [r1, #8]
   1c660:	strd	r2, [ip, #-40]	; 0xffffffd8
   1c664:	ldrd	r2, [r1, #16]
   1c668:	strd	r2, [ip, #-32]	; 0xffffffe0
   1c66c:	ldrd	r2, [r1, #24]
   1c670:	strd	r2, [ip, #-24]	; 0xffffffe8
   1c674:	add	r1, sp, #56	; 0x38
   1c678:	ldrd	r2, [r1]
   1c67c:	strd	r2, [r4, #-28]	; 0xffffffe4
   1c680:	ldrd	r2, [r1, #8]
   1c684:	strd	r2, [r4, #-20]	; 0xffffffec
   1c688:	ldrd	r2, [r1, #16]
   1c68c:	strd	r2, [r4, #-12]
   1c690:	ldrd	r2, [r1, #24]
   1c694:	strd	r2, [r4, #-4]
   1c698:	add	r1, r5, r5, lsl #1
   1c69c:	add	r0, sl, sl, lsl #1
   1c6a0:	add	r3, sp, #8256	; 0x2040
   1c6a4:	add	r3, r3, #56	; 0x38
   1c6a8:	add	r1, r3, r1, lsl #2
   1c6ac:	add	r0, r3, r0, lsl #2
   1c6b0:	bl	17780 <__assert_fail@plt+0x62b8>
   1c6b4:	cmp	r0, #0
   1c6b8:	bne	1c81c <__assert_fail@plt+0xb354>
   1c6bc:	add	sl, sl, #1
   1c6c0:	ldr	r3, [r9, #12]
   1c6c4:	add	r0, r5, r5, lsl #1
   1c6c8:	ldr	r2, [sp, #12]
   1c6cc:	ldr	r1, [r3, r2]
   1c6d0:	add	r3, sp, #8256	; 0x2040
   1c6d4:	add	r3, r3, #56	; 0x38
   1c6d8:	add	r0, r3, r0, lsl #2
   1c6dc:	bl	1981c <__assert_fail@plt+0x8354>
   1c6e0:	cmp	r0, #0
   1c6e4:	beq	1c81c <__assert_fail@plt+0xb354>
   1c6e8:	cmp	r6, #0
   1c6ec:	bne	1c5b4 <__assert_fail@plt+0xb0ec>
   1c6f0:	cmp	sl, r5
   1c6f4:	beq	1c7a4 <__assert_fail@plt+0xb2dc>
   1c6f8:	ldr	r3, [sp, #4]
   1c6fc:	add	r3, r3, #1
   1c700:	mov	r2, r3
   1c704:	str	r3, [sp, #4]
   1c708:	ldr	r3, [r9, #8]
   1c70c:	cmp	r2, r3
   1c710:	bge	1c850 <__assert_fail@plt+0xb388>
   1c714:	ldr	r2, [sp, #4]
   1c718:	lsl	r3, r2, #2
   1c71c:	str	r3, [sp, #12]
   1c720:	ldr	r3, [r9, #12]
   1c724:	ldr	r1, [r3, r2, lsl #2]
   1c728:	ldr	r3, [sp, #8]
   1c72c:	ldr	r3, [r3]
   1c730:	add	r8, r3, r1, lsl #3
   1c734:	ldrb	r7, [r8, #4]
   1c738:	ldr	r2, [r8, #4]
   1c73c:	ubfx	r2, r2, #8, #10
   1c740:	cmp	r7, #1
   1c744:	beq	1c2a0 <__assert_fail@plt+0xadd8>
   1c748:	cmp	r7, #3
   1c74c:	beq	1c3c0 <__assert_fail@plt+0xaef8>
   1c750:	cmp	r7, #5
   1c754:	beq	1c3ec <__assert_fail@plt+0xaf24>
   1c758:	cmp	r7, #7
   1c75c:	bne	1c6f8 <__assert_fail@plt+0xb230>
   1c760:	mvn	r0, #0
   1c764:	mvn	r1, #0
   1c768:	strd	r0, [sp, #24]
   1c76c:	strd	r0, [sp, #32]
   1c770:	ldr	r3, [sp, #8]
   1c774:	ldr	r3, [r3, #128]	; 0x80
   1c778:	tst	r3, #64	; 0x40
   1c77c:	bne	1c78c <__assert_fail@plt+0xb2c4>
   1c780:	ldr	r1, [sp, #24]
   1c784:	bic	r1, r1, #1024	; 0x400
   1c788:	str	r1, [sp, #24]
   1c78c:	tst	r3, #128	; 0x80
   1c790:	beq	1c2c4 <__assert_fail@plt+0xadfc>
   1c794:	ldr	r3, [sp, #24]
   1c798:	bic	r3, r3, #1
   1c79c:	str	r3, [sp, #24]
   1c7a0:	b	1c2c4 <__assert_fail@plt+0xadfc>
   1c7a4:	add	r3, sp, #14464	; 0x3880
   1c7a8:	add	r3, r3, #40	; 0x28
   1c7ac:	add	r1, r3, sl, lsl #5
   1c7b0:	sub	r1, r1, #14336	; 0x3800
   1c7b4:	ldrd	r2, [sp, #24]
   1c7b8:	strd	r2, [r1, #-48]	; 0xffffffd0
   1c7bc:	ldrd	r2, [sp, #32]
   1c7c0:	strd	r2, [r1, #-40]	; 0xffffffd8
   1c7c4:	ldrd	r2, [sp, #40]	; 0x28
   1c7c8:	strd	r2, [r1, #-32]	; 0xffffffe0
   1c7cc:	ldrd	r2, [sp, #48]	; 0x30
   1c7d0:	strd	r2, [r1, #-24]	; 0xffffffe8
   1c7d4:	ldr	r3, [r9, #12]
   1c7d8:	add	r0, sl, sl, lsl #1
   1c7dc:	ldr	r2, [sp, #12]
   1c7e0:	ldr	r1, [r3, r2]
   1c7e4:	add	r3, sp, #8256	; 0x2040
   1c7e8:	add	r3, r3, #56	; 0x38
   1c7ec:	add	r0, r3, r0, lsl #2
   1c7f0:	bl	1725c <__assert_fail@plt+0x5d94>
   1c7f4:	cmp	r0, #0
   1c7f8:	bne	1c81c <__assert_fail@plt+0xb354>
   1c7fc:	add	sl, sl, #1
   1c800:	mov	r2, #0
   1c804:	mov	r3, #0
   1c808:	strd	r2, [sp, #24]
   1c80c:	strd	r2, [sp, #32]
   1c810:	strd	r2, [sp, #40]	; 0x28
   1c814:	strd	r2, [sp, #48]	; 0x30
   1c818:	b	1c6f8 <__assert_fail@plt+0xb230>
   1c81c:	cmp	sl, #0
   1c820:	ble	1c848 <__assert_fail@plt+0xb380>
   1c824:	add	r4, sp, #8256	; 0x2040
   1c828:	add	r4, r4, #56	; 0x38
   1c82c:	add	r5, sl, sl, lsl #1
   1c830:	add	r5, r4, r5, lsl #2
   1c834:	ldr	r0, [r4, #8]
   1c838:	bl	135a4 <__assert_fail@plt+0x20dc>
   1c83c:	add	r4, r4, #12
   1c840:	cmp	r4, r5
   1c844:	bne	1c834 <__assert_fail@plt+0xb36c>
   1c848:	mov	r0, #0
   1c84c:	b	1c984 <__assert_fail@plt+0xb4bc>
   1c850:	ldr	r7, [sp, #8]
   1c854:	cmp	sl, #0
   1c858:	ble	1c8d4 <__assert_fail@plt+0xb40c>
   1c85c:	add	r1, sl, #1
   1c860:	add	r0, sp, #11392	; 0x2c80
   1c864:	add	r0, r0, #24
   1c868:	bl	172b4 <__assert_fail@plt+0x5dec>
   1c86c:	str	r0, [sp, #4]
   1c870:	add	r2, sp, #14464	; 0x3880
   1c874:	add	r2, r2, #36	; 0x24
   1c878:	str	r0, [r2]
   1c87c:	cmp	r0, #0
   1c880:	bne	1c94c <__assert_fail@plt+0xb484>
   1c884:	add	r3, sp, #11328	; 0x2c40
   1c888:	add	r3, r3, #56	; 0x38
   1c88c:	mov	r0, #0
   1c890:	mov	r1, #0
   1c894:	strd	r0, [r3]
   1c898:	strd	r0, [r3, #8]
   1c89c:	strd	r0, [r3, #16]
   1c8a0:	strd	r0, [r3, #24]
   1c8a4:	add	r8, sp, #8256	; 0x2040
   1c8a8:	add	r8, r8, #56	; 0x38
   1c8ac:	str	r8, [sp, #20]
   1c8b0:	add	r3, sp, #120	; 0x78
   1c8b4:	str	r3, [sp, #12]
   1c8b8:	add	r6, sp, #148	; 0x94
   1c8bc:	add	fp, sp, #13440	; 0x3480
   1c8c0:	add	fp, fp, #36	; 0x24
   1c8c4:	ldr	r9, [sp, #4]
   1c8c8:	mov	r3, #0
   1c8cc:	str	r3, [sp, #8]
   1c8d0:	b	1ca30 <__assert_fail@plt+0xb568>
   1c8d4:	bne	1cd44 <__assert_fail@plt+0xb87c>
   1c8d8:	mov	r1, #256	; 0x100
   1c8dc:	mov	r0, #4
   1c8e0:	bl	24794 <__assert_fail@plt+0x132cc>
   1c8e4:	ldr	r3, [sp, #16]
   1c8e8:	str	r0, [r3, #44]	; 0x2c
   1c8ec:	adds	r0, r0, #0
   1c8f0:	movne	r0, #1
   1c8f4:	b	1c984 <__assert_fail@plt+0xb4bc>
   1c8f8:	add	r4, r4, #1
   1c8fc:	ldr	r3, [r5, #4]
   1c900:	cmp	r3, r4
   1c904:	ble	1c9a4 <__assert_fail@plt+0xb4dc>
   1c908:	ldr	r3, [r5, #8]
   1c90c:	ldr	r2, [r3, r4, lsl #2]
   1c910:	ldr	r3, [r7, #12]
   1c914:	ldr	r1, [r3, r2, lsl #2]
   1c918:	cmn	r1, #1
   1c91c:	beq	1c8f8 <__assert_fail@plt+0xb430>
   1c920:	add	r1, r1, r1, lsl #1
   1c924:	ldr	r3, [r7, #24]
   1c928:	add	r1, r3, r1, lsl #2
   1c92c:	add	r0, sp, #11392	; 0x2c80
   1c930:	add	r0, r0, #24
   1c934:	bl	19db4 <__assert_fail@plt+0x88ec>
   1c938:	add	r3, sp, #14464	; 0x3880
   1c93c:	add	r3, r3, #36	; 0x24
   1c940:	str	r0, [r3]
   1c944:	cmp	r0, #0
   1c948:	beq	1c8f8 <__assert_fail@plt+0xb430>
   1c94c:	add	r3, sp, #11392	; 0x2c80
   1c950:	add	r3, r3, #32
   1c954:	ldr	r0, [r3]
   1c958:	bl	135a4 <__assert_fail@plt+0x20dc>
   1c95c:	add	r4, sp, #8256	; 0x2040
   1c960:	add	r4, r4, #56	; 0x38
   1c964:	add	r5, sl, sl, lsl #1
   1c968:	add	r5, r4, r5, lsl #2
   1c96c:	ldr	r0, [r4, #8]
   1c970:	bl	135a4 <__assert_fail@plt+0x20dc>
   1c974:	add	r4, r4, #12
   1c978:	cmp	r5, r4
   1c97c:	bne	1c96c <__assert_fail@plt+0xb4a4>
   1c980:	mov	r0, #0
   1c984:	add	sp, sp, #14464	; 0x3880
   1c988:	add	sp, sp, #44	; 0x2c
   1c98c:	ldrd	r4, [sp]
   1c990:	ldrd	r6, [sp, #8]
   1c994:	ldrd	r8, [sp, #16]
   1c998:	ldrd	sl, [sp, #24]
   1c99c:	add	sp, sp, #32
   1c9a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9a4:	mov	r3, #0
   1c9a8:	add	r2, sp, #11392	; 0x2c80
   1c9ac:	add	r2, r2, #24
   1c9b0:	mov	r1, r7
   1c9b4:	add	r0, sp, #14464	; 0x3880
   1c9b8:	add	r0, r0, #36	; 0x24
   1c9bc:	bl	18fdc <__assert_fail@plt+0x7b14>
   1c9c0:	mov	r4, r0
   1c9c4:	str	r0, [fp], #4
   1c9c8:	cmp	r0, #0
   1c9cc:	beq	1ca58 <__assert_fail@plt+0xb590>
   1c9d0:	ldrsb	r3, [r4, #52]	; 0x34
   1c9d4:	cmp	r3, #0
   1c9d8:	blt	1ca70 <__assert_fail@plt+0xb5a8>
   1c9dc:	add	r3, sp, #12416	; 0x3080
   1c9e0:	add	r3, r3, #36	; 0x24
   1c9e4:	str	r4, [r3, r9, lsl #2]
   1c9e8:	add	r3, sp, #11392	; 0x2c80
   1c9ec:	add	r3, r3, #36	; 0x24
   1c9f0:	str	r4, [r3, r9, lsl #2]
   1c9f4:	add	r4, sp, #11328	; 0x2c40
   1c9f8:	add	r4, r4, #52	; 0x34
   1c9fc:	sub	r1, r6, #32
   1ca00:	mov	r2, r4
   1ca04:	ldr	r3, [r2, #4]!
   1ca08:	ldr	r0, [r1, #4]!
   1ca0c:	orr	r3, r3, r0
   1ca10:	str	r3, [r2]
   1ca14:	cmp	r6, r1
   1ca18:	bne	1ca04 <__assert_fail@plt+0xb53c>
   1ca1c:	add	r9, r9, #1
   1ca20:	add	r8, r8, #12
   1ca24:	add	r6, r6, #32
   1ca28:	cmp	r9, sl
   1ca2c:	beq	1cb20 <__assert_fail@plt+0xb658>
   1ca30:	add	r3, sp, #11392	; 0x2c80
   1ca34:	add	r3, r3, #28
   1ca38:	mov	r2, #0
   1ca3c:	str	r2, [r3]
   1ca40:	mov	r5, r8
   1ca44:	ldr	r3, [r8, #4]
   1ca48:	cmp	r3, r2
   1ca4c:	ble	1c9a4 <__assert_fail@plt+0xb4dc>
   1ca50:	ldr	r4, [sp, #4]
   1ca54:	b	1c908 <__assert_fail@plt+0xb440>
   1ca58:	add	r3, sp, #14464	; 0x3880
   1ca5c:	add	r3, r3, #36	; 0x24
   1ca60:	ldr	r3, [r3]
   1ca64:	cmp	r3, #0
   1ca68:	beq	1c9d0 <__assert_fail@plt+0xb508>
   1ca6c:	b	1c94c <__assert_fail@plt+0xb484>
   1ca70:	mov	r3, #1
   1ca74:	add	r2, sp, #11392	; 0x2c80
   1ca78:	add	r2, r2, #24
   1ca7c:	mov	r1, r7
   1ca80:	add	r0, sp, #14464	; 0x3880
   1ca84:	add	r0, r0, #36	; 0x24
   1ca88:	bl	18fdc <__assert_fail@plt+0x7b14>
   1ca8c:	mov	r5, r9
   1ca90:	add	r3, sp, #12416	; 0x3080
   1ca94:	add	r3, r3, #36	; 0x24
   1ca98:	str	r0, [r3, r9, lsl #2]
   1ca9c:	cmp	r0, #0
   1caa0:	beq	1cb08 <__assert_fail@plt+0xb640>
   1caa4:	cmp	r4, r0
   1caa8:	beq	1cac0 <__assert_fail@plt+0xb5f8>
   1caac:	ldr	r3, [r7, #92]	; 0x5c
   1cab0:	cmp	r3, #2
   1cab4:	ldr	r3, [sp, #8]
   1cab8:	movge	r3, #1
   1cabc:	str	r3, [sp, #8]
   1cac0:	mov	r3, #2
   1cac4:	add	r2, sp, #11392	; 0x2c80
   1cac8:	add	r2, r2, #24
   1cacc:	mov	r1, r7
   1cad0:	add	r0, sp, #14464	; 0x3880
   1cad4:	add	r0, r0, #36	; 0x24
   1cad8:	bl	18fdc <__assert_fail@plt+0x7b14>
   1cadc:	add	r3, sp, #11392	; 0x2c80
   1cae0:	add	r3, r3, #36	; 0x24
   1cae4:	str	r0, [r3, r5, lsl #2]
   1cae8:	cmp	r0, #0
   1caec:	bne	1c9f4 <__assert_fail@plt+0xb52c>
   1caf0:	add	r3, sp, #14464	; 0x3880
   1caf4:	add	r3, r3, #36	; 0x24
   1caf8:	ldr	r3, [r3]
   1cafc:	cmp	r3, #0
   1cb00:	beq	1c9f4 <__assert_fail@plt+0xb52c>
   1cb04:	b	1c94c <__assert_fail@plt+0xb484>
   1cb08:	add	r3, sp, #14464	; 0x3880
   1cb0c:	add	r3, r3, #36	; 0x24
   1cb10:	ldr	r3, [r3]
   1cb14:	cmp	r3, #0
   1cb18:	beq	1caac <__assert_fail@plt+0xb5e4>
   1cb1c:	b	1c94c <__assert_fail@plt+0xb484>
   1cb20:	ldr	r3, [sp, #8]
   1cb24:	cmp	r3, #0
   1cb28:	bne	1cc8c <__assert_fail@plt+0xb7c4>
   1cb2c:	mov	r1, #256	; 0x100
   1cb30:	mov	r0, #4
   1cb34:	bl	24794 <__assert_fail@plt+0x132cc>
   1cb38:	mov	r9, r0
   1cb3c:	ldr	r3, [sp, #16]
   1cb40:	str	r0, [r3, #44]	; 0x2c
   1cb44:	cmp	r0, #0
   1cb48:	beq	1c94c <__assert_fail@plt+0xb484>
   1cb4c:	mov	r5, r0
   1cb50:	add	r7, r7, #96	; 0x60
   1cb54:	add	r8, r0, #1024	; 0x400
   1cb58:	ldr	r6, [sp, #12]
   1cb5c:	ldr	r3, [r4, #4]!
   1cb60:	cmp	r3, #0
   1cb64:	beq	1cb8c <__assert_fail@plt+0xb6c4>
   1cb68:	mov	r0, r5
   1cb6c:	mov	r2, #1
   1cb70:	mov	ip, r6
   1cb74:	tst	r3, #1
   1cb78:	bne	1cc40 <__assert_fail@plt+0xb778>
   1cb7c:	lsl	r2, r2, #1
   1cb80:	add	r0, r0, #4
   1cb84:	lsrs	r3, r3, #1
   1cb88:	bne	1cb74 <__assert_fail@plt+0xb6ac>
   1cb8c:	add	r5, r5, #128	; 0x80
   1cb90:	add	r7, r7, #4
   1cb94:	add	r6, r6, #4
   1cb98:	cmp	r8, r5
   1cb9c:	bne	1cb5c <__assert_fail@plt+0xb694>
   1cba0:	add	r3, sp, #11328	; 0x2c40
   1cba4:	add	r3, r3, #56	; 0x38
   1cba8:	ldr	r3, [r3]
   1cbac:	tst	r3, #1024	; 0x400
   1cbb0:	beq	1cc08 <__assert_fail@plt+0xb740>
   1cbb4:	ldr	r3, [sp, #120]	; 0x78
   1cbb8:	tst	r3, #1024	; 0x400
   1cbbc:	bne	1cbe4 <__assert_fail@plt+0xb71c>
   1cbc0:	ldr	r2, [sp, #12]
   1cbc4:	ldr	r3, [sp, #4]
   1cbc8:	add	r3, r3, #1
   1cbcc:	cmp	r3, sl
   1cbd0:	beq	1cc08 <__assert_fail@plt+0xb740>
   1cbd4:	ldr	r1, [r2, #32]!
   1cbd8:	tst	r1, #1024	; 0x400
   1cbdc:	beq	1cbc8 <__assert_fail@plt+0xb700>
   1cbe0:	str	r3, [sp, #4]
   1cbe4:	add	r3, sp, #14464	; 0x3880
   1cbe8:	add	r3, r3, #40	; 0x28
   1cbec:	ldr	r2, [sp, #4]
   1cbf0:	add	r3, r3, r2, lsl #2
   1cbf4:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   1cbf8:	str	r3, [r9, #40]	; 0x28
   1cbfc:	ldr	r2, [sp, #8]
   1cc00:	cmp	r2, #0
   1cc04:	strne	r3, [r9, #1064]	; 0x428
   1cc08:	add	r3, sp, #11392	; 0x2c80
   1cc0c:	add	r3, r3, #32
   1cc10:	ldr	r0, [r3]
   1cc14:	bl	135a4 <__assert_fail@plt+0x20dc>
   1cc18:	add	r4, sl, sl, lsl #1
   1cc1c:	ldr	r5, [sp, #20]
   1cc20:	add	r4, r5, r4, lsl #2
   1cc24:	ldr	r0, [r5, #8]
   1cc28:	bl	135a4 <__assert_fail@plt+0x20dc>
   1cc2c:	add	r5, r5, #12
   1cc30:	cmp	r4, r5
   1cc34:	bne	1cc24 <__assert_fail@plt+0xb75c>
   1cc38:	mov	r0, #1
   1cc3c:	b	1c984 <__assert_fail@plt+0xb4bc>
   1cc40:	ldr	r1, [r6]
   1cc44:	tst	r2, r1
   1cc48:	bne	1cc84 <__assert_fail@plt+0xb7bc>
   1cc4c:	ldr	r1, [sp, #4]
   1cc50:	add	r1, r1, #1
   1cc54:	ldr	lr, [ip, r1, lsl #5]
   1cc58:	tst	r2, lr
   1cc5c:	beq	1cc50 <__assert_fail@plt+0xb788>
   1cc60:	ldr	lr, [r7]
   1cc64:	tst	r2, lr
   1cc68:	add	lr, sp, #14464	; 0x3880
   1cc6c:	add	lr, lr, #40	; 0x28
   1cc70:	add	r1, lr, r1, lsl #2
   1cc74:	ldrne	r1, [r1, #-2052]	; 0xfffff7fc
   1cc78:	ldreq	r1, [r1, #-1028]	; 0xfffffbfc
   1cc7c:	str	r1, [r0]
   1cc80:	b	1cb7c <__assert_fail@plt+0xb6b4>
   1cc84:	ldr	r1, [sp, #4]
   1cc88:	b	1cc60 <__assert_fail@plt+0xb798>
   1cc8c:	mov	r1, #512	; 0x200
   1cc90:	mov	r0, #4
   1cc94:	bl	24794 <__assert_fail@plt+0x132cc>
   1cc98:	mov	r9, r0
   1cc9c:	ldr	r3, [sp, #16]
   1cca0:	str	r0, [r3, #48]	; 0x30
   1cca4:	cmp	r0, #0
   1cca8:	beq	1c94c <__assert_fail@plt+0xb484>
   1ccac:	mov	r6, r0
   1ccb0:	add	r7, r0, #1024	; 0x400
   1ccb4:	ldr	r5, [sp, #12]
   1ccb8:	ldr	r3, [r4, #4]!
   1ccbc:	cmp	r3, #0
   1ccc0:	beq	1cce8 <__assert_fail@plt+0xb820>
   1ccc4:	mov	r0, r6
   1ccc8:	mov	r2, #1
   1cccc:	mov	lr, r5
   1ccd0:	tst	r3, #1
   1ccd4:	bne	1ccfc <__assert_fail@plt+0xb834>
   1ccd8:	lsl	r2, r2, #1
   1ccdc:	add	r0, r0, #4
   1cce0:	lsrs	r3, r3, #1
   1cce4:	bne	1ccd0 <__assert_fail@plt+0xb808>
   1cce8:	add	r6, r6, #128	; 0x80
   1ccec:	add	r5, r5, #4
   1ccf0:	cmp	r7, r6
   1ccf4:	bne	1ccb8 <__assert_fail@plt+0xb7f0>
   1ccf8:	b	1cba0 <__assert_fail@plt+0xb6d8>
   1ccfc:	ldr	r1, [r5]
   1cd00:	tst	r2, r1
   1cd04:	bne	1cd3c <__assert_fail@plt+0xb874>
   1cd08:	ldr	r1, [sp, #4]
   1cd0c:	add	r1, r1, #1
   1cd10:	ldr	ip, [lr, r1, lsl #5]
   1cd14:	tst	r2, ip
   1cd18:	beq	1cd0c <__assert_fail@plt+0xb844>
   1cd1c:	add	ip, sp, #14464	; 0x3880
   1cd20:	add	ip, ip, #40	; 0x28
   1cd24:	add	r1, ip, r1, lsl #2
   1cd28:	ldr	ip, [r1, #-1028]	; 0xfffffbfc
   1cd2c:	str	ip, [r0]
   1cd30:	ldr	r1, [r1, #-2052]	; 0xfffff7fc
   1cd34:	str	r1, [r0, #1024]	; 0x400
   1cd38:	b	1ccd8 <__assert_fail@plt+0xb810>
   1cd3c:	ldr	r1, [sp, #4]
   1cd40:	b	1cd1c <__assert_fail@plt+0xb854>
   1cd44:	mov	r0, #0
   1cd48:	b	1c984 <__assert_fail@plt+0xb4bc>
   1cd4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cd50:	strd	r6, [sp, #8]
   1cd54:	strd	r8, [sp, #16]
   1cd58:	strd	sl, [sp, #24]
   1cd5c:	str	lr, [sp, #32]
   1cd60:	sub	sp, sp, #316	; 0x13c
   1cd64:	ldr	fp, [r0]
   1cd68:	ldr	r3, [fp, #92]	; 0x5c
   1cd6c:	cmp	r3, #1
   1cd70:	ldreq	r3, [r0, #12]
   1cd74:	ubfxeq	r3, r3, #22, #1
   1cd78:	movne	r3, #0
   1cd7c:	mov	r9, r3
   1cd80:	ldr	r3, [r1, #8]
   1cd84:	cmp	r3, #0
   1cd88:	ble	1ce8c <__assert_fail@plt+0xb9c4>
   1cd8c:	mov	r7, r2
   1cd90:	str	r1, [sp, #8]
   1cd94:	str	r0, [sp, #28]
   1cd98:	mov	r3, #0
   1cd9c:	str	r3, [sp, #4]
   1cda0:	str	r3, [sp, #20]
   1cda4:	str	r3, [sp, #24]
   1cda8:	mov	r3, #255	; 0xff
   1cdac:	movt	r3, #32
   1cdb0:	str	r3, [sp, #32]
   1cdb4:	mov	r3, #1
   1cdb8:	movt	r3, #32
   1cdbc:	str	r3, [sp, #36]	; 0x24
   1cdc0:	mov	sl, fp
   1cdc4:	b	1ce24 <__assert_fail@plt+0xb95c>
   1cdc8:	ldrb	r5, [r2, r4, lsl #3]
   1cdcc:	strb	r3, [r7, r5]
   1cdd0:	cmp	r9, #0
   1cdd4:	beq	1cdec <__assert_fail@plt+0xb924>
   1cdd8:	bl	1133c <__ctype_tolower_loc@plt>
   1cddc:	ldr	r3, [r0]
   1cde0:	ldr	r3, [r3, r5, lsl #2]
   1cde4:	mov	r2, #1
   1cde8:	strb	r2, [r7, r3]
   1cdec:	ldr	r3, [sp, #28]
   1cdf0:	ldr	r3, [r3, #12]
   1cdf4:	tst	r3, #4194304	; 0x400000
   1cdf8:	beq	1ce08 <__assert_fail@plt+0xb940>
   1cdfc:	ldr	r3, [sl, #92]	; 0x5c
   1ce00:	cmp	r3, #1
   1ce04:	bgt	1cea8 <__assert_fail@plt+0xb9e0>
   1ce08:	ldr	r3, [sp, #4]
   1ce0c:	add	r2, r3, #1
   1ce10:	str	r2, [sp, #4]
   1ce14:	ldr	r3, [sp, #8]
   1ce18:	ldr	r3, [r3, #8]
   1ce1c:	cmp	r3, r2
   1ce20:	ble	1ce8c <__assert_fail@plt+0xb9c4>
   1ce24:	ldr	r3, [sp, #8]
   1ce28:	ldr	r3, [r3, #12]
   1ce2c:	ldr	r2, [sp, #4]
   1ce30:	ldr	r4, [r3, r2, lsl #2]
   1ce34:	lsl	r3, r4, #3
   1ce38:	str	r3, [sp, #12]
   1ce3c:	ldr	r2, [sl]
   1ce40:	add	r3, r2, r3
   1ce44:	ldrb	r3, [r3, #4]
   1ce48:	mov	r5, r3
   1ce4c:	cmp	r3, #1
   1ce50:	beq	1cdc8 <__assert_fail@plt+0xb900>
   1ce54:	cmp	r3, #3
   1ce58:	beq	1cf8c <__assert_fail@plt+0xbac4>
   1ce5c:	cmp	r3, #6
   1ce60:	beq	1d01c <__assert_fail@plt+0xbb54>
   1ce64:	and	r2, r3, #253	; 0xfd
   1ce68:	cmp	r3, #2
   1ce6c:	cmpne	r2, #5
   1ce70:	bne	1ce08 <__assert_fail@plt+0xb940>
   1ce74:	mov	r2, #256	; 0x100
   1ce78:	mov	r1, #1
   1ce7c:	mov	r0, r7
   1ce80:	bl	113e4 <memset@plt>
   1ce84:	cmp	r5, #2
   1ce88:	beq	1d17c <__assert_fail@plt+0xbcb4>
   1ce8c:	add	sp, sp, #316	; 0x13c
   1ce90:	ldrd	r4, [sp]
   1ce94:	ldrd	r6, [sp, #8]
   1ce98:	ldrd	r8, [sp, #16]
   1ce9c:	ldrd	sl, [sp, #24]
   1cea0:	add	sp, sp, #32
   1cea4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cea8:	ldr	r3, [sl]
   1ceac:	ldrb	r3, [r3, r4, lsl #3]
   1ceb0:	strb	r3, [sp, #56]	; 0x38
   1ceb4:	add	r2, r4, #1
   1ceb8:	ldr	r3, [sl, #8]
   1cebc:	cmp	r2, r3
   1cec0:	bcs	1cf7c <__assert_fail@plt+0xbab4>
   1cec4:	ldr	r3, [sp, #12]
   1cec8:	add	r3, r3, #8
   1cecc:	ldr	r1, [sl]
   1ced0:	add	r3, r1, r3
   1ced4:	ldr	r1, [r3, #4]
   1ced8:	ldr	r0, [sp, #32]
   1cedc:	and	r1, r1, r0
   1cee0:	ldr	ip, [sp, #36]	; 0x24
   1cee4:	cmp	r1, ip
   1cee8:	bne	1cf84 <__assert_fail@plt+0xbabc>
   1ceec:	add	r4, sp, #57	; 0x39
   1cef0:	ldrb	r3, [r3]
   1cef4:	strb	r3, [r4], #1
   1cef8:	add	r2, r2, #1
   1cefc:	ldr	r3, [sl, #8]
   1cf00:	cmp	r3, r2
   1cf04:	bls	1cf20 <__assert_fail@plt+0xba58>
   1cf08:	ldr	r3, [sl]
   1cf0c:	add	r3, r3, r2, lsl #3
   1cf10:	ldr	r1, [r3, #4]
   1cf14:	and	r1, r1, r0
   1cf18:	cmp	r1, ip
   1cf1c:	beq	1cef0 <__assert_fail@plt+0xba28>
   1cf20:	mov	r3, #0
   1cf24:	str	r3, [sp, #48]	; 0x30
   1cf28:	str	r3, [sp, #52]	; 0x34
   1cf2c:	add	r1, sp, #56	; 0x38
   1cf30:	sub	r4, r4, r1
   1cf34:	add	r3, sp, #48	; 0x30
   1cf38:	mov	r2, r4
   1cf3c:	add	r0, sp, #44	; 0x2c
   1cf40:	bl	13880 <__assert_fail@plt+0x23b8>
   1cf44:	cmp	r4, r0
   1cf48:	bne	1ce08 <__assert_fail@plt+0xb940>
   1cf4c:	ldr	r0, [sp, #44]	; 0x2c
   1cf50:	bl	11228 <towlower@plt>
   1cf54:	add	r2, sp, #48	; 0x30
   1cf58:	mov	r1, r0
   1cf5c:	add	r0, sp, #56	; 0x38
   1cf60:	bl	11174 <wcrtomb@plt>
   1cf64:	cmn	r0, #1
   1cf68:	beq	1ce08 <__assert_fail@plt+0xb940>
   1cf6c:	ldrb	r3, [sp, #56]	; 0x38
   1cf70:	mov	r2, #1
   1cf74:	strb	r2, [r7, r3]
   1cf78:	b	1ce08 <__assert_fail@plt+0xb940>
   1cf7c:	add	r4, sp, #57	; 0x39
   1cf80:	b	1cf20 <__assert_fail@plt+0xba58>
   1cf84:	add	r4, sp, #57	; 0x39
   1cf88:	b	1cf20 <__assert_fail@plt+0xba58>
   1cf8c:	mov	fp, #0
   1cf90:	mov	r8, #1
   1cf94:	str	sl, [sp, #16]
   1cf98:	b	1cff4 <__assert_fail@plt+0xbb2c>
   1cf9c:	strb	r8, [r7, r3]
   1cfa0:	add	r4, r4, #1
   1cfa4:	add	r5, r5, #1
   1cfa8:	cmp	r4, #32
   1cfac:	beq	1cfe8 <__assert_fail@plt+0xbb20>
   1cfb0:	lsr	r3, r6, r4
   1cfb4:	tst	r3, #1
   1cfb8:	beq	1cfa0 <__assert_fail@plt+0xbad8>
   1cfbc:	strb	r8, [r7, r5]
   1cfc0:	cmp	r9, #0
   1cfc4:	beq	1cfa0 <__assert_fail@plt+0xbad8>
   1cfc8:	add	r3, r5, #128	; 0x80
   1cfcc:	cmp	r3, #384	; 0x180
   1cfd0:	movcs	r3, r5
   1cfd4:	bcs	1cf9c <__assert_fail@plt+0xbad4>
   1cfd8:	bl	1133c <__ctype_tolower_loc@plt>
   1cfdc:	ldr	r3, [r0]
   1cfe0:	ldr	r3, [r3, r5, lsl #2]
   1cfe4:	b	1cf9c <__assert_fail@plt+0xbad4>
   1cfe8:	add	fp, fp, #4
   1cfec:	cmp	fp, #32
   1cff0:	beq	1d014 <__assert_fail@plt+0xbb4c>
   1cff4:	lsl	r5, fp, #3
   1cff8:	ldr	r3, [sp, #16]
   1cffc:	ldr	r3, [r3]
   1d000:	ldr	r2, [sp, #12]
   1d004:	ldr	r3, [r3, r2]
   1d008:	ldr	r6, [r3, fp]
   1d00c:	mov	r4, #0
   1d010:	b	1cfb0 <__assert_fail@plt+0xbae8>
   1d014:	ldr	sl, [sp, #16]
   1d018:	b	1ce08 <__assert_fail@plt+0xb940>
   1d01c:	ldr	r5, [r2, r4, lsl #3]
   1d020:	ldr	r3, [sl, #92]	; 0x5c
   1d024:	cmp	r3, #1
   1d028:	ble	1d064 <__assert_fail@plt+0xbb9c>
   1d02c:	ldr	r3, [r5, #36]	; 0x24
   1d030:	cmp	r3, #0
   1d034:	bne	1d050 <__assert_fail@plt+0xbb88>
   1d038:	ldrb	r3, [r5, #16]
   1d03c:	tst	r3, #1
   1d040:	bne	1d050 <__assert_fail@plt+0xbb88>
   1d044:	ldr	r3, [r5, #32]
   1d048:	cmp	r3, #0
   1d04c:	beq	1d064 <__assert_fail@plt+0xbb9c>
   1d050:	mov	r3, #0
   1d054:	strb	r3, [sp, #48]	; 0x30
   1d058:	ldr	r4, [sp, #20]
   1d05c:	ldr	r5, [sp, #24]
   1d060:	b	1d094 <__assert_fail@plt+0xbbcc>
   1d064:	ldr	r3, [r5, #20]
   1d068:	cmp	r3, #0
   1d06c:	ble	1ce08 <__assert_fail@plt+0xb940>
   1d070:	mov	r4, #0
   1d074:	ldr	fp, [sp, #28]
   1d078:	b	1d0d8 <__assert_fail@plt+0xbc10>
   1d07c:	ldrb	r3, [sp, #48]	; 0x30
   1d080:	add	r3, r3, #1
   1d084:	uxtb	r3, r3
   1d088:	strb	r3, [sp, #48]	; 0x30
   1d08c:	cmp	r3, #0
   1d090:	beq	1ce08 <__assert_fail@plt+0xb940>
   1d094:	str	r4, [sp, #56]	; 0x38
   1d098:	str	r5, [sp, #60]	; 0x3c
   1d09c:	add	r3, sp, #56	; 0x38
   1d0a0:	mov	r2, #1
   1d0a4:	add	r1, sp, #48	; 0x30
   1d0a8:	mov	r0, #0
   1d0ac:	bl	13880 <__assert_fail@plt+0x23b8>
   1d0b0:	cmn	r0, #2
   1d0b4:	bne	1d07c <__assert_fail@plt+0xbbb4>
   1d0b8:	ldrb	r3, [sp, #48]	; 0x30
   1d0bc:	mov	r2, #1
   1d0c0:	strb	r2, [r7, r3]
   1d0c4:	b	1d07c <__assert_fail@plt+0xbbb4>
   1d0c8:	add	r4, r4, #1
   1d0cc:	ldr	r3, [r5, #20]
   1d0d0:	cmp	r3, r4
   1d0d4:	ble	1ce08 <__assert_fail@plt+0xb940>
   1d0d8:	ldr	r3, [sp, #20]
   1d0dc:	str	r3, [sp, #48]	; 0x30
   1d0e0:	ldr	r3, [sp, #24]
   1d0e4:	str	r3, [sp, #52]	; 0x34
   1d0e8:	lsl	r8, r4, #2
   1d0ec:	ldr	r3, [r5]
   1d0f0:	add	r2, sp, #48	; 0x30
   1d0f4:	ldr	r1, [r3, r4, lsl #2]
   1d0f8:	add	r0, sp, #56	; 0x38
   1d0fc:	bl	11174 <wcrtomb@plt>
   1d100:	cmn	r0, #1
   1d104:	beq	1d130 <__assert_fail@plt+0xbc68>
   1d108:	ldrb	r6, [sp, #56]	; 0x38
   1d10c:	mov	r3, #1
   1d110:	strb	r3, [r7, r6]
   1d114:	cmp	r9, #0
   1d118:	beq	1d130 <__assert_fail@plt+0xbc68>
   1d11c:	bl	1133c <__ctype_tolower_loc@plt>
   1d120:	ldr	r3, [r0]
   1d124:	ldr	r3, [r3, r6, lsl #2]
   1d128:	mov	r2, #1
   1d12c:	strb	r2, [r7, r3]
   1d130:	ldr	r3, [fp, #12]
   1d134:	tst	r3, #4194304	; 0x400000
   1d138:	beq	1d0c8 <__assert_fail@plt+0xbc00>
   1d13c:	ldr	r3, [sl, #92]	; 0x5c
   1d140:	cmp	r3, #1
   1d144:	ble	1d0c8 <__assert_fail@plt+0xbc00>
   1d148:	ldr	r3, [r5]
   1d14c:	ldr	r0, [r3, r8]
   1d150:	bl	11228 <towlower@plt>
   1d154:	add	r2, sp, #48	; 0x30
   1d158:	mov	r1, r0
   1d15c:	add	r0, sp, #56	; 0x38
   1d160:	bl	11174 <wcrtomb@plt>
   1d164:	cmn	r0, #1
   1d168:	beq	1d0c8 <__assert_fail@plt+0xbc00>
   1d16c:	ldrb	r3, [sp, #56]	; 0x38
   1d170:	mov	r2, #1
   1d174:	strb	r2, [r7, r3]
   1d178:	b	1d0c8 <__assert_fail@plt+0xbc00>
   1d17c:	ldr	r2, [sp, #28]
   1d180:	ldrb	r3, [r2, #28]
   1d184:	orr	r3, r3, #1
   1d188:	strb	r3, [r2, #28]
   1d18c:	b	1ce8c <__assert_fail@plt+0xb9c4>
   1d190:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d194:	strd	r6, [sp, #8]
   1d198:	strd	r8, [sp, #16]
   1d19c:	strd	sl, [sp, #24]
   1d1a0:	str	lr, [sp, #32]
   1d1a4:	sub	sp, sp, #164	; 0xa4
   1d1a8:	mov	r9, r0
   1d1ac:	mov	r4, r1
   1d1b0:	mov	r8, r2
   1d1b4:	str	r3, [sp, #24]
   1d1b8:	ldr	fp, [sp, #204]	; 0xcc
   1d1bc:	ldr	r3, [r1]
   1d1c0:	str	r3, [sp, #20]
   1d1c4:	ldrb	r2, [r2, #4]
   1d1c8:	sub	r3, r2, #1
   1d1cc:	cmp	r3, #35	; 0x23
   1d1d0:	ldrls	pc, [pc, r3, lsl #2]
   1d1d4:	b	1e090 <__assert_fail@plt+0xcbc8>
   1d1d8:	andeq	sp, r1, r8, ror #4
   1d1dc:	strdeq	lr, [r1], -r4
   1d1e0:	muleq	r1, r0, r0
   1d1e4:	andeq	sp, r1, r4, lsr #24
   1d1e8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1d1ec:	muleq	r1, r0, r0
   1d1f0:	muleq	r1, r0, r0
   1d1f4:	andeq	sp, r1, r0, lsr r3
   1d1f8:	ldrdeq	sp, [r1], -r8
   1d1fc:	strdeq	lr, [r1], -r4
   1d200:			; <UNDEFINED> instruction: 0x0001dcb4
   1d204:	muleq	r1, r0, sp
   1d208:	muleq	r1, r0, r0
   1d20c:	muleq	r1, r0, r0
   1d210:	muleq	r1, r0, r0
   1d214:	muleq	r1, r0, r0
   1d218:	muleq	r1, r0, r0
   1d21c:			; <UNDEFINED> instruction: 0x0001dcb4
   1d220:			; <UNDEFINED> instruction: 0x0001dcb4
   1d224:	andeq	sp, r1, r0, lsl r4
   1d228:	muleq	r1, r0, r0
   1d22c:	muleq	r1, r0, r0
   1d230:	muleq	r1, ip, ip
   1d234:	andeq	sp, r1, r0, ror #25
   1d238:	muleq	r1, r0, r0
   1d23c:	muleq	r1, r0, r0
   1d240:	muleq	r1, r0, r0
   1d244:	muleq	r1, r0, r0
   1d248:	muleq	r1, r0, r0
   1d24c:	muleq	r1, r0, r0
   1d250:	muleq	r1, r0, r0
   1d254:	andeq	sp, r1, r0, ror #31
   1d258:	andeq	sp, r1, r0, ror #31
   1d25c:	andeq	lr, r1, r8, lsr r0
   1d260:	andeq	lr, r1, r8, lsr r0
   1d264:	muleq	r1, r0, r0
   1d268:	mov	r3, r8
   1d26c:	mov	r2, #0
   1d270:	mov	r1, r2
   1d274:	ldr	r0, [sp, #20]
   1d278:	bl	16e88 <__assert_fail@plt+0x59c0>
   1d27c:	subs	sl, r0, #0
   1d280:	moveq	r3, #12
   1d284:	streq	r3, [fp]
   1d288:	beq	1e318 <__assert_fail@plt+0xce50>
   1d28c:	ldr	r3, [sp, #20]
   1d290:	ldr	r3, [r3, #92]	; 0x5c
   1d294:	cmp	r3, #1
   1d298:	movgt	r6, #0
   1d29c:	movgt	r5, #16
   1d2a0:	ble	1dd0c <__assert_fail@plt+0xc844>
   1d2a4:	ldr	r3, [r9, #40]	; 0x28
   1d2a8:	ldr	r2, [r9, #56]	; 0x38
   1d2ac:	cmp	r2, r3
   1d2b0:	ble	1dd0c <__assert_fail@plt+0xc844>
   1d2b4:	ldr	r2, [r9, #28]
   1d2b8:	cmp	r3, r2
   1d2bc:	beq	1dd0c <__assert_fail@plt+0xc844>
   1d2c0:	ldr	r2, [r9, #8]
   1d2c4:	ldr	r3, [r2, r3, lsl #2]
   1d2c8:	cmn	r3, #1
   1d2cc:	bne	1dd0c <__assert_fail@plt+0xc844>
   1d2d0:	ldr	r2, [sp, #24]
   1d2d4:	mov	r1, r9
   1d2d8:	mov	r0, r8
   1d2dc:	bl	18a8c <__assert_fail@plt+0x75c4>
   1d2e0:	mov	r3, r8
   1d2e4:	mov	r2, r6
   1d2e8:	mov	r1, r6
   1d2ec:	ldr	r7, [sp, #20]
   1d2f0:	mov	r0, r7
   1d2f4:	bl	16e88 <__assert_fail@plt+0x59c0>
   1d2f8:	mov	r4, r0
   1d2fc:	mov	r3, r5
   1d300:	mov	r2, r0
   1d304:	mov	r1, sl
   1d308:	mov	r0, r7
   1d30c:	bl	17024 <__assert_fail@plt+0x5b5c>
   1d310:	mov	sl, r0
   1d314:	cmp	r0, #0
   1d318:	cmpne	r4, #0
   1d31c:	bne	1d2a4 <__assert_fail@plt+0xbddc>
   1d320:	mov	r3, #12
   1d324:	str	r3, [fp]
   1d328:	mov	sl, #0
   1d32c:	b	1e318 <__assert_fail@plt+0xce50>
   1d330:	ldr	r5, [r1, #24]
   1d334:	add	r3, r5, #1
   1d338:	str	r3, [r1, #24]
   1d33c:	ldr	r6, [sp, #24]
   1d340:	orr	r2, r6, #8388608	; 0x800000
   1d344:	mov	r1, r0
   1d348:	mov	r0, r8
   1d34c:	bl	18a8c <__assert_fail@plt+0x75c4>
   1d350:	ldrb	r3, [r8, #4]
   1d354:	cmp	r3, #9
   1d358:	moveq	r0, #0
   1d35c:	bne	1d3a8 <__assert_fail@plt+0xbee0>
   1d360:	cmp	r5, #8
   1d364:	bhi	1d37c <__assert_fail@plt+0xbeb4>
   1d368:	ldr	r1, [sp, #20]
   1d36c:	ldr	r3, [r1, #84]	; 0x54
   1d370:	mov	r2, #1
   1d374:	orr	r3, r3, r2, lsl r5
   1d378:	str	r3, [r1, #84]	; 0x54
   1d37c:	mov	r3, #17
   1d380:	mov	r2, #0
   1d384:	mov	r1, r0
   1d388:	ldr	r0, [sp, #20]
   1d38c:	bl	17024 <__assert_fail@plt+0x5b5c>
   1d390:	subs	sl, r0, #0
   1d394:	moveq	r3, #12
   1d398:	streq	r3, [fp]
   1d39c:	beq	1d3d8 <__assert_fail@plt+0xbf10>
   1d3a0:	str	r5, [sl, #20]
   1d3a4:	b	1dd0c <__assert_fail@plt+0xc844>
   1d3a8:	str	fp, [sp, #4]
   1d3ac:	ldr	r3, [sp, #200]	; 0xc8
   1d3b0:	add	r3, r3, #1
   1d3b4:	str	r3, [sp]
   1d3b8:	mov	r3, r6
   1d3bc:	mov	r2, r8
   1d3c0:	mov	r1, r4
   1d3c4:	mov	r0, r9
   1d3c8:	bl	1e778 <__assert_fail@plt+0xd2b0>
   1d3cc:	ldr	r3, [fp]
   1d3d0:	cmp	r3, #0
   1d3d4:	beq	1d3e0 <__assert_fail@plt+0xbf18>
   1d3d8:	mov	sl, #0
   1d3dc:	b	1e318 <__assert_fail@plt+0xce50>
   1d3e0:	ldrb	r3, [r8, #4]
   1d3e4:	cmp	r3, #9
   1d3e8:	beq	1d360 <__assert_fail@plt+0xbe98>
   1d3ec:	cmp	r0, #0
   1d3f0:	beq	1d404 <__assert_fail@plt+0xbf3c>
   1d3f4:	mov	r2, #0
   1d3f8:	movw	r1, #35856	; 0x8c10
   1d3fc:	movt	r1, #1
   1d400:	bl	1627c <__assert_fail@plt+0x4db4>
   1d404:	mov	r3, #8
   1d408:	str	r3, [fp]
   1d40c:	b	1d3d8 <__assert_fail@plt+0xbf10>
   1d410:	mov	r3, #0
   1d414:	str	r3, [sp, #68]	; 0x44
   1d418:	mov	r1, #1
   1d41c:	mov	r0, #32
   1d420:	bl	24794 <__assert_fail@plt+0x132cc>
   1d424:	mov	r4, r0
   1d428:	str	r0, [sp, #32]
   1d42c:	mov	r1, #1
   1d430:	mov	r0, #40	; 0x28
   1d434:	bl	24794 <__assert_fail@plt+0x132cc>
   1d438:	str	r0, [sp, #36]	; 0x24
   1d43c:	clz	r0, r0
   1d440:	lsr	r0, r0, #5
   1d444:	cmp	r4, #0
   1d448:	movne	r7, r0
   1d44c:	moveq	r7, #1
   1d450:	cmp	r7, #0
   1d454:	bne	1d4cc <__assert_fail@plt+0xc004>
   1d458:	ldr	r2, [sp, #24]
   1d45c:	mov	r1, r9
   1d460:	mov	r0, r8
   1d464:	bl	16494 <__assert_fail@plt+0x4fcc>
   1d468:	str	r0, [sp, #28]
   1d46c:	ldrb	r3, [r8, #4]
   1d470:	cmp	r3, #2
   1d474:	streq	r3, [fp]
   1d478:	beq	1d55c <__assert_fail@plt+0xc094>
   1d47c:	cmp	r3, #25
   1d480:	strne	r7, [sp, #52]	; 0x34
   1d484:	beq	1d4e8 <__assert_fail@plt+0xc020>
   1d488:	ldrb	r3, [r8, #4]
   1d48c:	cmp	r3, #21
   1d490:	moveq	r3, #1
   1d494:	strbeq	r3, [r8, #4]
   1d498:	mov	r3, #0
   1d49c:	str	r3, [sp, #48]	; 0x30
   1d4a0:	mov	r2, #1
   1d4a4:	str	r3, [sp, #44]	; 0x2c
   1d4a8:	add	sl, sp, #96	; 0x60
   1d4ac:	ldr	r3, [sp, #24]
   1d4b0:	ubfx	r3, r3, #16, #1
   1d4b4:	str	r3, [sp, #60]	; 0x3c
   1d4b8:	ldr	r4, [sp, #32]
   1d4bc:	str	r7, [sp, #40]	; 0x28
   1d4c0:	str	fp, [sp, #204]	; 0xcc
   1d4c4:	ldr	fp, [sp, #36]	; 0x24
   1d4c8:	b	1d8ec <__assert_fail@plt+0xc424>
   1d4cc:	ldr	r0, [sp, #32]
   1d4d0:	bl	135a4 <__assert_fail@plt+0x20dc>
   1d4d4:	ldr	r0, [sp, #36]	; 0x24
   1d4d8:	bl	135a4 <__assert_fail@plt+0x20dc>
   1d4dc:	mov	r3, #12
   1d4e0:	str	r3, [fp]
   1d4e4:	b	1d56c <__assert_fail@plt+0xc0a4>
   1d4e8:	ldr	r2, [sp, #36]	; 0x24
   1d4ec:	ldrb	r3, [r2, #16]
   1d4f0:	orr	r3, r3, #1
   1d4f4:	strb	r3, [r2, #16]
   1d4f8:	ldr	r3, [sp, #24]
   1d4fc:	tst	r3, #256	; 0x100
   1d500:	beq	1d514 <__assert_fail@plt+0xc04c>
   1d504:	ldr	r2, [sp, #32]
   1d508:	ldr	r3, [r2]
   1d50c:	orr	r3, r3, #1024	; 0x400
   1d510:	str	r3, [r2]
   1d514:	ldr	r3, [r9, #40]	; 0x28
   1d518:	ldr	r2, [sp, #28]
   1d51c:	add	r3, r3, r2
   1d520:	str	r3, [r9, #40]	; 0x28
   1d524:	ldr	r2, [sp, #24]
   1d528:	mov	r1, r9
   1d52c:	mov	r0, r8
   1d530:	bl	16494 <__assert_fail@plt+0x4fcc>
   1d534:	str	r0, [sp, #28]
   1d538:	ldrb	r3, [r8, #4]
   1d53c:	cmp	r3, #2
   1d540:	streq	r3, [fp]
   1d544:	beq	1d55c <__assert_fail@plt+0xc094>
   1d548:	mov	r3, #1
   1d54c:	str	r3, [sp, #52]	; 0x34
   1d550:	b	1d488 <__assert_fail@plt+0xbfc0>
   1d554:	ldr	fp, [sp, #204]	; 0xcc
   1d558:	str	r0, [fp]
   1d55c:	ldr	r0, [sp, #32]
   1d560:	bl	135a4 <__assert_fail@plt+0x20dc>
   1d564:	ldr	r0, [sp, #36]	; 0x24
   1d568:	bl	18b84 <__assert_fail@plt+0x76bc>
   1d56c:	ldr	r3, [fp]
   1d570:	cmp	r3, #0
   1d574:	bne	1e4fc <__assert_fail@plt+0xd034>
   1d578:	mov	sl, #0
   1d57c:	b	1dd0c <__assert_fail@plt+0xc844>
   1d580:	ldr	fp, [sp, #204]	; 0xcc
   1d584:	mov	r3, #7
   1d588:	str	r3, [fp]
   1d58c:	b	1d55c <__assert_fail@plt+0xc094>
   1d590:	ldr	r3, [r9, #40]	; 0x28
   1d594:	ldr	r2, [sp, #28]
   1d598:	add	r3, r3, r2
   1d59c:	str	r3, [r9, #40]	; 0x28
   1d5a0:	ldr	r2, [sp, #24]
   1d5a4:	mov	r1, r9
   1d5a8:	add	r0, sp, #88	; 0x58
   1d5ac:	bl	16494 <__assert_fail@plt+0x4fcc>
   1d5b0:	mov	r3, r0
   1d5b4:	ldrb	r2, [sp, #92]	; 0x5c
   1d5b8:	cmp	r2, #2
   1d5bc:	beq	1d5e4 <__assert_fail@plt+0xc11c>
   1d5c0:	cmp	r2, #21
   1d5c4:	bne	1d5f4 <__assert_fail@plt+0xc12c>
   1d5c8:	ldr	r3, [r9, #40]	; 0x28
   1d5cc:	ldr	r2, [sp, #28]
   1d5d0:	sub	r3, r3, r2
   1d5d4:	str	r3, [r9, #40]	; 0x28
   1d5d8:	mov	r3, #1
   1d5dc:	strb	r3, [r8, #4]
   1d5e0:	b	1d960 <__assert_fail@plt+0xc498>
   1d5e4:	ldr	fp, [sp, #204]	; 0xcc
   1d5e8:	mov	r3, #7
   1d5ec:	str	r3, [fp]
   1d5f0:	b	1d55c <__assert_fail@plt+0xc094>
   1d5f4:	add	r2, sp, #128	; 0x80
   1d5f8:	str	r2, [sp, #84]	; 0x54
   1d5fc:	mov	r2, #3
   1d600:	str	r2, [sp, #80]	; 0x50
   1d604:	mov	r2, #1
   1d608:	str	r2, [sp, #8]
   1d60c:	ldr	r2, [sp, #24]
   1d610:	str	r2, [sp, #4]
   1d614:	ldr	r2, [sp, #20]
   1d618:	str	r2, [sp]
   1d61c:	add	r2, sp, #88	; 0x58
   1d620:	mov	r1, r9
   1d624:	add	r0, sp, #80	; 0x50
   1d628:	bl	16628 <__assert_fail@plt+0x5160>
   1d62c:	cmp	r0, #0
   1d630:	bne	1d73c <__assert_fail@plt+0xc274>
   1d634:	ldr	r2, [sp, #24]
   1d638:	mov	r1, r9
   1d63c:	mov	r0, r8
   1d640:	bl	16494 <__assert_fail@plt+0x4fcc>
   1d644:	str	r0, [sp, #28]
   1d648:	ldr	r6, [sp, #72]	; 0x48
   1d64c:	sub	r3, r6, #2
   1d650:	bics	r3, r3, #2
   1d654:	beq	1e57c <__assert_fail@plt+0xd0b4>
   1d658:	ldr	r7, [sp, #80]	; 0x50
   1d65c:	sub	r3, r7, #2
   1d660:	bics	r3, r3, #2
   1d664:	beq	1e588 <__assert_fail@plt+0xd0c0>
   1d668:	cmp	r6, #3
   1d66c:	moveq	r3, #1
   1d670:	movne	r3, #0
   1d674:	str	r3, [sp, #56]	; 0x38
   1d678:	beq	1d748 <__assert_fail@plt+0xc280>
   1d67c:	cmp	r7, #3
   1d680:	beq	1d778 <__assert_fail@plt+0xc2b0>
   1d684:	cmp	r6, #0
   1d688:	movne	r5, #0
   1d68c:	bne	1d694 <__assert_fail@plt+0xc1cc>
   1d690:	ldrb	r5, [sp, #76]	; 0x4c
   1d694:	cmp	r7, #0
   1d698:	bne	1d7a0 <__assert_fail@plt+0xc2d8>
   1d69c:	ldrb	r7, [sp, #84]	; 0x54
   1d6a0:	ldr	r3, [sp, #56]	; 0x38
   1d6a4:	cmp	r6, #0
   1d6a8:	moveq	r3, #1
   1d6ac:	cmp	r3, #0
   1d6b0:	bne	1d7b4 <__assert_fail@plt+0xc2ec>
   1d6b4:	ldr	r5, [sp, #76]	; 0x4c
   1d6b8:	ldr	r3, [sp, #80]	; 0x50
   1d6bc:	cmp	r3, #3
   1d6c0:	cmpne	r3, #0
   1d6c4:	beq	1d7d4 <__assert_fail@plt+0xc30c>
   1d6c8:	ldr	r7, [sp, #84]	; 0x54
   1d6cc:	cmn	r5, #1
   1d6d0:	cmnne	r7, #1
   1d6d4:	beq	1e5a4 <__assert_fail@plt+0xd0dc>
   1d6d8:	ldr	r3, [sp, #60]	; 0x3c
   1d6dc:	cmp	r7, r5
   1d6e0:	movcs	r3, #0
   1d6e4:	andcc	r3, r3, #1
   1d6e8:	cmp	r3, #0
   1d6ec:	bne	1e5b0 <__assert_fail@plt+0xd0e8>
   1d6f0:	ldr	r3, [sp, #20]
   1d6f4:	ldr	r3, [r3, #92]	; 0x5c
   1d6f8:	cmp	r3, #1
   1d6fc:	ble	1d730 <__assert_fail@plt+0xc268>
   1d700:	ldr	r3, [fp, #32]
   1d704:	ldr	r2, [sp, #48]	; 0x30
   1d708:	cmp	r3, r2
   1d70c:	beq	1d7f4 <__assert_fail@plt+0xc32c>
   1d710:	ldr	r2, [fp, #32]
   1d714:	ldr	r3, [fp, #4]
   1d718:	str	r5, [r3, r2, lsl #2]
   1d71c:	ldr	r2, [fp, #8]
   1d720:	ldr	r3, [fp, #32]
   1d724:	add	r1, r3, #1
   1d728:	str	r1, [fp, #32]
   1d72c:	str	r7, [r2, r3, lsl #2]
   1d730:	mov	r3, #0
   1d734:	mov	ip, #1
   1d738:	b	1d86c <__assert_fail@plt+0xc3a4>
   1d73c:	ldr	fp, [sp, #204]	; 0xcc
   1d740:	str	r0, [fp]
   1d744:	b	1d55c <__assert_fail@plt+0xc094>
   1d748:	ldr	r0, [sp, #76]	; 0x4c
   1d74c:	bl	11390 <strlen@plt>
   1d750:	cmp	r0, #1
   1d754:	bhi	1d76c <__assert_fail@plt+0xc2a4>
   1d758:	cmp	r7, #3
   1d75c:	beq	1e5d8 <__assert_fail@plt+0xd110>
   1d760:	ldr	r3, [sp, #76]	; 0x4c
   1d764:	ldrb	r5, [r3]
   1d768:	b	1d694 <__assert_fail@plt+0xc1cc>
   1d76c:	ldr	fp, [sp, #204]	; 0xcc
   1d770:	mov	r3, #3
   1d774:	b	1e590 <__assert_fail@plt+0xd0c8>
   1d778:	ldr	r0, [sp, #84]	; 0x54
   1d77c:	bl	11390 <strlen@plt>
   1d780:	cmp	r0, #1
   1d784:	bhi	1e598 <__assert_fail@plt+0xd0d0>
   1d788:	cmp	r6, #0
   1d78c:	beq	1d690 <__assert_fail@plt+0xc1c8>
   1d790:	cmp	r6, #3
   1d794:	beq	1d760 <__assert_fail@plt+0xc298>
   1d798:	mov	r5, #0
   1d79c:	b	1d694 <__assert_fail@plt+0xc1cc>
   1d7a0:	cmp	r7, #3
   1d7a4:	ldreq	r3, [sp, #84]	; 0x54
   1d7a8:	ldrbeq	r7, [r3]
   1d7ac:	movne	r7, #0
   1d7b0:	b	1d6a0 <__assert_fail@plt+0xc1d8>
   1d7b4:	ldr	r3, [sp, #20]
   1d7b8:	ldr	r3, [r3, #92]	; 0x5c
   1d7bc:	cmp	r3, #1
   1d7c0:	ble	1e5c4 <__assert_fail@plt+0xd0fc>
   1d7c4:	mov	r0, r5
   1d7c8:	bl	113f0 <btowc@plt>
   1d7cc:	mov	r5, r0
   1d7d0:	b	1d6b8 <__assert_fail@plt+0xc1f0>
   1d7d4:	ldr	r3, [sp, #20]
   1d7d8:	ldr	r3, [r3, #92]	; 0x5c
   1d7dc:	cmp	r3, #1
   1d7e0:	ble	1d6cc <__assert_fail@plt+0xc204>
   1d7e4:	mov	r0, r7
   1d7e8:	bl	113f0 <btowc@plt>
   1d7ec:	mov	r7, r0
   1d7f0:	b	1d6cc <__assert_fail@plt+0xc204>
   1d7f4:	lsl	r3, r2, #1
   1d7f8:	add	r3, r3, #1
   1d7fc:	str	r3, [sp, #48]	; 0x30
   1d800:	lsl	r6, r3, #2
   1d804:	mov	r1, r6
   1d808:	ldr	r0, [fp, #4]
   1d80c:	bl	24844 <__assert_fail@plt+0x1337c>
   1d810:	str	r0, [sp, #56]	; 0x38
   1d814:	mov	r1, r6
   1d818:	ldr	r0, [fp, #8]
   1d81c:	bl	24844 <__assert_fail@plt+0x1337c>
   1d820:	mov	r6, r0
   1d824:	ldr	r3, [sp, #56]	; 0x38
   1d828:	cmp	r0, #0
   1d82c:	cmpne	r3, #0
   1d830:	beq	1d844 <__assert_fail@plt+0xc37c>
   1d834:	ldr	r3, [sp, #56]	; 0x38
   1d838:	str	r3, [fp, #4]
   1d83c:	str	r0, [fp, #8]
   1d840:	b	1d710 <__assert_fail@plt+0xc248>
   1d844:	ldr	fp, [sp, #204]	; 0xcc
   1d848:	mov	r0, r3
   1d84c:	bl	135a4 <__assert_fail@plt+0x20dc>
   1d850:	mov	r0, r6
   1d854:	bl	135a4 <__assert_fail@plt+0x20dc>
   1d858:	mov	r3, #12
   1d85c:	b	1e590 <__assert_fail@plt+0xd0c8>
   1d860:	add	r3, r3, #1
   1d864:	cmp	r3, #256	; 0x100
   1d868:	beq	1e56c <__assert_fail@plt+0xd0a4>
   1d86c:	cmp	r3, r5
   1d870:	movcc	r2, #0
   1d874:	movcs	r2, #1
   1d878:	cmp	r3, r7
   1d87c:	movhi	r2, #0
   1d880:	cmp	r2, #0
   1d884:	beq	1d860 <__assert_fail@plt+0xc398>
   1d888:	add	r2, r3, #31
   1d88c:	cmp	r3, #0
   1d890:	movge	r2, r3
   1d894:	asr	r2, r2, #5
   1d898:	rsbs	r1, r3, #0
   1d89c:	and	r0, r3, #31
   1d8a0:	and	r1, r1, #31
   1d8a4:	rsbpl	r0, r1, #0
   1d8a8:	ldr	r1, [r4, r2, lsl #2]
   1d8ac:	orr	r1, r1, ip, lsl r0
   1d8b0:	str	r1, [r4, r2, lsl #2]
   1d8b4:	b	1d860 <__assert_fail@plt+0xc398>
   1d8b8:	ldrb	r3, [sp, #76]	; 0x4c
   1d8bc:	asr	r1, r3, #5
   1d8c0:	and	r3, r3, #31
   1d8c4:	ldr	r2, [r4, r1, lsl #2]
   1d8c8:	mov	r0, #1
   1d8cc:	orr	r3, r2, r0, lsl r3
   1d8d0:	str	r3, [r4, r1, lsl #2]
   1d8d4:	ldrb	r3, [r8, #4]
   1d8d8:	cmp	r3, #2
   1d8dc:	beq	1da8c <__assert_fail@plt+0xc5c4>
   1d8e0:	cmp	r3, #21
   1d8e4:	beq	1da9c <__assert_fail@plt+0xc5d4>
   1d8e8:	ldr	r2, [sp, #40]	; 0x28
   1d8ec:	str	sl, [sp, #76]	; 0x4c
   1d8f0:	mov	r3, #3
   1d8f4:	str	r3, [sp, #72]	; 0x48
   1d8f8:	str	r2, [sp, #8]
   1d8fc:	ldr	r3, [sp, #24]
   1d900:	str	r3, [sp, #4]
   1d904:	ldr	r3, [sp, #20]
   1d908:	str	r3, [sp]
   1d90c:	ldr	r3, [sp, #28]
   1d910:	mov	r2, r8
   1d914:	mov	r1, r9
   1d918:	add	r0, sp, #72	; 0x48
   1d91c:	bl	16628 <__assert_fail@plt+0x5160>
   1d920:	cmp	r0, #0
   1d924:	bne	1d554 <__assert_fail@plt+0xc08c>
   1d928:	ldr	r2, [sp, #24]
   1d92c:	mov	r1, r9
   1d930:	mov	r0, r8
   1d934:	bl	16494 <__assert_fail@plt+0x4fcc>
   1d938:	str	r0, [sp, #28]
   1d93c:	ldr	r3, [sp, #72]	; 0x48
   1d940:	sub	r3, r3, #2
   1d944:	bics	r3, r3, #2
   1d948:	beq	1d960 <__assert_fail@plt+0xc498>
   1d94c:	ldrb	r3, [r8, #4]
   1d950:	cmp	r3, #2
   1d954:	beq	1d580 <__assert_fail@plt+0xc0b8>
   1d958:	cmp	r3, #22
   1d95c:	beq	1d590 <__assert_fail@plt+0xc0c8>
   1d960:	ldr	r3, [sp, #72]	; 0x48
   1d964:	cmp	r3, #4
   1d968:	ldrls	pc, [pc, r3, lsl #2]
   1d96c:	b	1da50 <__assert_fail@plt+0xc588>
   1d970:			; <UNDEFINED> instruction: 0x0001d8b8
   1d974:	andeq	sp, r1, r4, lsl #19
   1d978:	ldrdeq	sp, [r1], -r8
   1d97c:	andeq	sp, r1, r4, lsl sl
   1d980:	andeq	sp, r1, r0, asr sl
   1d984:	ldr	r3, [fp, #20]
   1d988:	ldr	r2, [sp, #44]	; 0x2c
   1d98c:	cmp	r3, r2
   1d990:	beq	1d9b0 <__assert_fail@plt+0xc4e8>
   1d994:	ldr	r2, [fp]
   1d998:	ldr	r3, [fp, #20]
   1d99c:	add	r1, r3, #1
   1d9a0:	str	r1, [fp, #20]
   1d9a4:	ldr	r1, [sp, #76]	; 0x4c
   1d9a8:	str	r1, [r2, r3, lsl #2]
   1d9ac:	b	1d8d4 <__assert_fail@plt+0xc40c>
   1d9b0:	lsl	r3, r2, #1
   1d9b4:	add	r3, r3, #1
   1d9b8:	str	r3, [sp, #44]	; 0x2c
   1d9bc:	lsl	r1, r3, #2
   1d9c0:	ldr	r0, [fp]
   1d9c4:	bl	24844 <__assert_fail@plt+0x1337c>
   1d9c8:	cmp	r0, #0
   1d9cc:	beq	1dc14 <__assert_fail@plt+0xc74c>
   1d9d0:	str	r0, [fp]
   1d9d4:	b	1d994 <__assert_fail@plt+0xc4cc>
   1d9d8:	ldr	r5, [sp, #76]	; 0x4c
   1d9dc:	mov	r0, r5
   1d9e0:	bl	11390 <strlen@plt>
   1d9e4:	cmp	r0, #1
   1d9e8:	bne	1e54c <__assert_fail@plt+0xd084>
   1d9ec:	ldrb	r3, [r5]
   1d9f0:	asr	r1, r3, #5
   1d9f4:	and	r3, r3, #31
   1d9f8:	ldr	r2, [r4, r1, lsl #2]
   1d9fc:	orr	r3, r2, r0, lsl r3
   1da00:	str	r3, [r4, r1, lsl #2]
   1da04:	mov	r3, #0
   1da08:	ldr	r2, [sp, #204]	; 0xcc
   1da0c:	str	r3, [r2]
   1da10:	b	1d8d4 <__assert_fail@plt+0xc40c>
   1da14:	ldr	r5, [sp, #76]	; 0x4c
   1da18:	mov	r0, r5
   1da1c:	bl	11390 <strlen@plt>
   1da20:	cmp	r0, #1
   1da24:	bne	1e55c <__assert_fail@plt+0xd094>
   1da28:	ldrb	r3, [r5]
   1da2c:	asr	r1, r3, #5
   1da30:	and	r3, r3, #31
   1da34:	ldr	r2, [r4, r1, lsl #2]
   1da38:	orr	r3, r2, r0, lsl r3
   1da3c:	str	r3, [r4, r1, lsl #2]
   1da40:	mov	r3, #0
   1da44:	ldr	r2, [sp, #204]	; 0xcc
   1da48:	str	r3, [r2]
   1da4c:	b	1d8d4 <__assert_fail@plt+0xc40c>
   1da50:	ldr	r3, [sp, #24]
   1da54:	str	r3, [sp, #4]
   1da58:	ldr	r3, [sp, #76]	; 0x4c
   1da5c:	str	r3, [sp]
   1da60:	add	r3, sp, #68	; 0x44
   1da64:	mov	r2, fp
   1da68:	mov	r1, r4
   1da6c:	ldr	r0, [r9, #64]	; 0x40
   1da70:	bl	1a91c <__assert_fail@plt+0x9454>
   1da74:	ldr	r3, [sp, #204]	; 0xcc
   1da78:	str	r0, [r3]
   1da7c:	cmp	r0, #0
   1da80:	beq	1d8d4 <__assert_fail@plt+0xc40c>
   1da84:	ldr	fp, [sp, #204]	; 0xcc
   1da88:	b	1d55c <__assert_fail@plt+0xc094>
   1da8c:	ldr	fp, [sp, #204]	; 0xcc
   1da90:	mov	r3, #7
   1da94:	str	r3, [fp]
   1da98:	b	1d55c <__assert_fail@plt+0xc094>
   1da9c:	ldr	fp, [sp, #204]	; 0xcc
   1daa0:	ldr	r3, [r9, #40]	; 0x28
   1daa4:	ldr	r2, [sp, #28]
   1daa8:	add	r3, r3, r2
   1daac:	str	r3, [r9, #40]	; 0x28
   1dab0:	ldr	r3, [sp, #52]	; 0x34
   1dab4:	cmp	r3, #0
   1dab8:	beq	1dadc <__assert_fail@plt+0xc614>
   1dabc:	ldr	r2, [sp, #32]
   1dac0:	sub	r3, r2, #4
   1dac4:	add	r1, r2, #28
   1dac8:	ldr	r2, [r3, #4]!
   1dacc:	mvn	r2, r2
   1dad0:	str	r2, [r3]
   1dad4:	cmp	r3, r1
   1dad8:	bne	1dac8 <__assert_fail@plt+0xc600>
   1dadc:	ldr	r3, [sp, #20]
   1dae0:	ldr	r0, [r3, #92]	; 0x5c
   1dae4:	cmp	r0, #1
   1dae8:	ble	1db18 <__assert_fail@plt+0xc650>
   1daec:	ldr	r1, [sp, #32]
   1daf0:	sub	r2, r1, #4
   1daf4:	ldr	r3, [r3, #60]	; 0x3c
   1daf8:	sub	r3, r3, #4
   1dafc:	add	ip, r1, #28
   1db00:	ldr	r1, [r2, #4]!
   1db04:	ldr	lr, [r3, #4]!
   1db08:	and	r1, r1, lr
   1db0c:	str	r1, [r2]
   1db10:	cmp	ip, r2
   1db14:	bne	1db00 <__assert_fail@plt+0xc638>
   1db18:	ldr	r2, [sp, #36]	; 0x24
   1db1c:	ldr	r3, [r2, #20]
   1db20:	cmp	r3, #0
   1db24:	bne	1db6c <__assert_fail@plt+0xc6a4>
   1db28:	ldr	r3, [r2, #24]
   1db2c:	cmp	r3, #0
   1db30:	bne	1db6c <__assert_fail@plt+0xc6a4>
   1db34:	ldr	r3, [r2, #28]
   1db38:	cmp	r3, #0
   1db3c:	bne	1db6c <__assert_fail@plt+0xc6a4>
   1db40:	ldr	r3, [r2, #32]
   1db44:	cmp	r3, #0
   1db48:	bne	1db6c <__assert_fail@plt+0xc6a4>
   1db4c:	cmp	r0, #1
   1db50:	ble	1dbdc <__assert_fail@plt+0xc714>
   1db54:	ldr	r3, [r2, #36]	; 0x24
   1db58:	cmp	r3, #0
   1db5c:	bne	1db6c <__assert_fail@plt+0xc6a4>
   1db60:	ldrb	r3, [r2, #16]
   1db64:	tst	r3, #1
   1db68:	beq	1dbdc <__assert_fail@plt+0xc714>
   1db6c:	ldr	r0, [sp, #20]
   1db70:	ldrb	r3, [r0, #88]	; 0x58
   1db74:	orr	r3, r3, #2
   1db78:	strb	r3, [r0, #88]	; 0x58
   1db7c:	mov	r3, #6
   1db80:	strb	r3, [sp, #132]	; 0x84
   1db84:	ldr	r3, [sp, #36]	; 0x24
   1db88:	str	r3, [sp, #128]	; 0x80
   1db8c:	add	r3, sp, #128	; 0x80
   1db90:	mov	r2, #0
   1db94:	mov	r1, r2
   1db98:	bl	16e88 <__assert_fail@plt+0x59c0>
   1db9c:	subs	sl, r0, #0
   1dba0:	beq	1dc18 <__assert_fail@plt+0xc750>
   1dba4:	ldr	r2, [sp, #32]
   1dba8:	ldr	r3, [r2]
   1dbac:	cmp	r3, #0
   1dbb0:	bne	1e504 <__assert_fail@plt+0xd03c>
   1dbb4:	mov	r3, r2
   1dbb8:	add	r2, r2, #28
   1dbbc:	ldr	r1, [r3, #4]!
   1dbc0:	cmp	r1, #0
   1dbc4:	bne	1e504 <__assert_fail@plt+0xd03c>
   1dbc8:	cmp	r3, r2
   1dbcc:	bne	1dbbc <__assert_fail@plt+0xc6f4>
   1dbd0:	ldr	r0, [sp, #32]
   1dbd4:	bl	135a4 <__assert_fail@plt+0x20dc>
   1dbd8:	b	1dd0c <__assert_fail@plt+0xc844>
   1dbdc:	ldr	r0, [sp, #36]	; 0x24
   1dbe0:	bl	18b84 <__assert_fail@plt+0x76bc>
   1dbe4:	mov	r3, #3
   1dbe8:	strb	r3, [sp, #132]	; 0x84
   1dbec:	ldr	r3, [sp, #32]
   1dbf0:	str	r3, [sp, #128]	; 0x80
   1dbf4:	add	r3, sp, #128	; 0x80
   1dbf8:	mov	r2, #0
   1dbfc:	mov	r1, r2
   1dc00:	ldr	r0, [sp, #20]
   1dc04:	bl	16e88 <__assert_fail@plt+0x59c0>
   1dc08:	subs	sl, r0, #0
   1dc0c:	bne	1dd0c <__assert_fail@plt+0xc844>
   1dc10:	b	1dc18 <__assert_fail@plt+0xc750>
   1dc14:	ldr	fp, [sp, #204]	; 0xcc
   1dc18:	mov	r3, #12
   1dc1c:	str	r3, [fp]
   1dc20:	b	1d55c <__assert_fail@plt+0xc094>
   1dc24:	ldr	r2, [r8]
   1dc28:	mov	r3, #1
   1dc2c:	lsl	r3, r3, r2
   1dc30:	ldr	r2, [sp, #20]
   1dc34:	ldr	r2, [r2, #84]	; 0x54
   1dc38:	tst	r3, r2
   1dc3c:	moveq	r3, #6
   1dc40:	streq	r3, [fp]
   1dc44:	moveq	sl, #0
   1dc48:	beq	1e318 <__assert_fail@plt+0xce50>
   1dc4c:	ldr	r0, [sp, #20]
   1dc50:	ldr	r2, [r0, #80]	; 0x50
   1dc54:	orr	r3, r2, r3
   1dc58:	str	r3, [r0, #80]	; 0x50
   1dc5c:	mov	r3, r8
   1dc60:	mov	r2, #0
   1dc64:	mov	r1, r2
   1dc68:	bl	16e88 <__assert_fail@plt+0x59c0>
   1dc6c:	subs	sl, r0, #0
   1dc70:	moveq	r3, #12
   1dc74:	streq	r3, [fp]
   1dc78:	beq	1e318 <__assert_fail@plt+0xce50>
   1dc7c:	ldr	r2, [sp, #20]
   1dc80:	ldr	r3, [r2, #76]	; 0x4c
   1dc84:	add	r3, r3, #1
   1dc88:	str	r3, [r2, #76]	; 0x4c
   1dc8c:	ldrb	r3, [r2, #88]	; 0x58
   1dc90:	orr	r3, r3, #2
   1dc94:	strb	r3, [r2, #88]	; 0x58
   1dc98:	b	1dd0c <__assert_fail@plt+0xc844>
   1dc9c:	ldr	r3, [sp, #24]
   1dca0:	tst	r3, #16777216	; 0x1000000
   1dca4:	movne	r3, #13
   1dca8:	strne	r3, [fp]
   1dcac:	movne	sl, #0
   1dcb0:	bne	1e318 <__assert_fail@plt+0xce50>
   1dcb4:	ldr	r3, [sp, #24]
   1dcb8:	tst	r3, #32
   1dcbc:	movne	r3, #13
   1dcc0:	strne	r3, [fp]
   1dcc4:	movne	sl, #0
   1dcc8:	bne	1e318 <__assert_fail@plt+0xce50>
   1dccc:	ldr	r3, [sp, #24]
   1dcd0:	tst	r3, #16
   1dcd4:	bne	1dd38 <__assert_fail@plt+0xc870>
   1dcd8:	cmp	r2, #9
   1dcdc:	beq	1dd74 <__assert_fail@plt+0xc8ac>
   1dce0:	mov	r3, #1
   1dce4:	strb	r3, [r8, #4]
   1dce8:	mov	r3, r8
   1dcec:	mov	r2, #0
   1dcf0:	mov	r1, r2
   1dcf4:	ldr	r0, [sp, #20]
   1dcf8:	bl	16e88 <__assert_fail@plt+0x59c0>
   1dcfc:	subs	sl, r0, #0
   1dd00:	moveq	r3, #12
   1dd04:	streq	r3, [fp]
   1dd08:	beq	1e318 <__assert_fail@plt+0xce50>
   1dd0c:	ldr	r2, [sp, #24]
   1dd10:	mov	r1, r9
   1dd14:	mov	r0, r8
   1dd18:	bl	18a8c <__assert_fail@plt+0x75c4>
   1dd1c:	movw	r3, #26836	; 0x68d4
   1dd20:	movt	r3, #1
   1dd24:	str	r3, [sp, #32]
   1dd28:	movw	r3, #35856	; 0x8c10
   1dd2c:	movt	r3, #1
   1dd30:	str	r3, [sp, #36]	; 0x24
   1dd34:	b	1e3b0 <__assert_fail@plt+0xcee8>
   1dd38:	mov	r5, r3
   1dd3c:	mov	r2, r3
   1dd40:	mov	r1, r9
   1dd44:	mov	r0, r8
   1dd48:	bl	18a8c <__assert_fail@plt+0x75c4>
   1dd4c:	str	fp, [sp, #4]
   1dd50:	ldr	r3, [sp, #200]	; 0xc8
   1dd54:	str	r3, [sp]
   1dd58:	mov	r3, r5
   1dd5c:	mov	r2, r8
   1dd60:	mov	r1, r4
   1dd64:	mov	r0, r9
   1dd68:	bl	1d190 <__assert_fail@plt+0xbcc8>
   1dd6c:	mov	sl, r0
   1dd70:	b	1e318 <__assert_fail@plt+0xce50>
   1dd74:	ldr	r3, [sp, #24]
   1dd78:	tst	r3, #131072	; 0x20000
   1dd7c:	moveq	r3, #16
   1dd80:	streq	r3, [fp]
   1dd84:	moveq	sl, #0
   1dd88:	bne	1dce0 <__assert_fail@plt+0xc818>
   1dd8c:	b	1e318 <__assert_fail@plt+0xce50>
   1dd90:	ldr	r3, [r8]
   1dd94:	movw	r2, #783	; 0x30f
   1dd98:	tst	r2, r3
   1dd9c:	beq	1ddb0 <__assert_fail@plt+0xc8e8>
   1dda0:	ldr	r3, [sp, #20]
   1dda4:	ldrb	r3, [r3, #88]	; 0x58
   1dda8:	tst	r3, #16
   1ddac:	beq	1de64 <__assert_fail@plt+0xc99c>
   1ddb0:	ldr	r3, [r8]
   1ddb4:	sub	r2, r3, #256	; 0x100
   1ddb8:	bics	r2, r2, #256	; 0x100
   1ddbc:	bne	1df74 <__assert_fail@plt+0xcaac>
   1ddc0:	cmp	r3, #256	; 0x100
   1ddc4:	beq	1df48 <__assert_fail@plt+0xca80>
   1ddc8:	mov	r3, #5
   1ddcc:	str	r3, [r8]
   1ddd0:	mov	r3, r8
   1ddd4:	mov	r2, #0
   1ddd8:	mov	r1, r2
   1dddc:	ldr	r0, [sp, #20]
   1dde0:	bl	16e88 <__assert_fail@plt+0x59c0>
   1dde4:	mov	r5, r0
   1dde8:	mov	r3, #10
   1ddec:	str	r3, [r8]
   1ddf0:	mov	r3, r8
   1ddf4:	mov	r2, #0
   1ddf8:	mov	r1, r2
   1ddfc:	ldr	r6, [sp, #20]
   1de00:	mov	r0, r6
   1de04:	bl	16e88 <__assert_fail@plt+0x59c0>
   1de08:	mov	r4, r0
   1de0c:	mov	r3, #10
   1de10:	mov	r2, r0
   1de14:	mov	r1, r5
   1de18:	mov	r0, r6
   1de1c:	bl	17024 <__assert_fail@plt+0x5b5c>
   1de20:	clz	r3, r4
   1de24:	lsr	r3, r3, #5
   1de28:	cmp	r5, #0
   1de2c:	moveq	r3, #1
   1de30:	mov	sl, r0
   1de34:	cmp	r0, #0
   1de38:	moveq	r3, #1
   1de3c:	cmp	r3, #0
   1de40:	movne	r3, #12
   1de44:	strne	r3, [fp]
   1de48:	movne	sl, #0
   1de4c:	bne	1e318 <__assert_fail@plt+0xce50>
   1de50:	ldr	r2, [sp, #24]
   1de54:	mov	r1, r9
   1de58:	mov	r0, r8
   1de5c:	bl	18a8c <__assert_fail@plt+0x75c4>
   1de60:	b	1e318 <__assert_fail@plt+0xce50>
   1de64:	ldr	r2, [sp, #20]
   1de68:	orr	r3, r3, #16
   1de6c:	strb	r3, [r2, #88]	; 0x58
   1de70:	tst	r3, #8
   1de74:	bne	1dec8 <__assert_fail@plt+0xca00>
   1de78:	mov	r3, #0
   1de7c:	str	r3, [r2, #96]	; 0x60
   1de80:	movt	r3, #1023	; 0x3ff
   1de84:	str	r3, [r2, #100]	; 0x64
   1de88:	mvn	r3, #2013265921	; 0x78000001
   1de8c:	str	r3, [r2, #104]	; 0x68
   1de90:	mvn	r3, #-134217727	; 0xf8000001
   1de94:	str	r3, [r2, #108]	; 0x6c
   1de98:	ldrb	r3, [r2, #88]	; 0x58
   1de9c:	tst	r3, #4
   1dea0:	moveq	r5, #128	; 0x80
   1dea4:	moveq	r3, #4
   1dea8:	beq	1ded0 <__assert_fail@plt+0xca08>
   1deac:	ldr	r1, [sp, #20]
   1deb0:	mov	r2, #0
   1deb4:	str	r2, [r1, #112]	; 0x70
   1deb8:	str	r2, [r1, #116]	; 0x74
   1debc:	str	r2, [r1, #120]	; 0x78
   1dec0:	str	r2, [r1, #124]	; 0x7c
   1dec4:	b	1ddb0 <__assert_fail@plt+0xc8e8>
   1dec8:	mov	r5, #0
   1decc:	mov	r3, r5
   1ded0:	add	r3, r3, #24
   1ded4:	ldr	r2, [sp, #20]
   1ded8:	add	r4, r2, r3, lsl #2
   1dedc:	add	r6, r2, #128	; 0x80
   1dee0:	bl	11378 <__ctype_b_loc@plt>
   1dee4:	mov	ip, #1
   1dee8:	b	1df3c <__assert_fail@plt+0xca74>
   1deec:	ldr	r3, [r4]
   1def0:	orr	r3, r3, ip, lsl r1
   1def4:	str	r3, [r4]
   1def8:	add	r1, r1, #1
   1defc:	add	r2, r2, #1
   1df00:	cmp	r1, #32
   1df04:	beq	1df2c <__assert_fail@plt+0xca64>
   1df08:	ldr	lr, [r0]
   1df0c:	lsl	r3, r2, #1
   1df10:	ldrh	r3, [lr, r3]
   1df14:	ubfx	r3, r3, #3, #1
   1df18:	cmp	r2, #95	; 0x5f
   1df1c:	orreq	r3, r3, #1
   1df20:	cmp	r3, #0
   1df24:	bne	1deec <__assert_fail@plt+0xca24>
   1df28:	b	1def8 <__assert_fail@plt+0xca30>
   1df2c:	add	r5, r5, #32
   1df30:	add	r4, r4, #4
   1df34:	cmp	r6, r4
   1df38:	beq	1ddb0 <__assert_fail@plt+0xc8e8>
   1df3c:	mov	r2, r5
   1df40:	mov	r1, #0
   1df44:	b	1df08 <__assert_fail@plt+0xca40>
   1df48:	mov	r3, #6
   1df4c:	str	r3, [r8]
   1df50:	mov	r3, r8
   1df54:	mov	r2, #0
   1df58:	mov	r1, r2
   1df5c:	ldr	r0, [sp, #20]
   1df60:	bl	16e88 <__assert_fail@plt+0x59c0>
   1df64:	mov	r5, r0
   1df68:	mov	r3, #9
   1df6c:	str	r3, [r8]
   1df70:	b	1ddf0 <__assert_fail@plt+0xc928>
   1df74:	mov	r3, r8
   1df78:	mov	r2, #0
   1df7c:	mov	r1, r2
   1df80:	ldr	r0, [sp, #20]
   1df84:	bl	16e88 <__assert_fail@plt+0x59c0>
   1df88:	subs	sl, r0, #0
   1df8c:	moveq	r3, #12
   1df90:	streq	r3, [fp]
   1df94:	bne	1de50 <__assert_fail@plt+0xc988>
   1df98:	b	1e318 <__assert_fail@plt+0xce50>
   1df9c:	mov	r3, r8
   1dfa0:	mov	r2, #0
   1dfa4:	mov	r1, r2
   1dfa8:	ldr	r0, [sp, #20]
   1dfac:	bl	16e88 <__assert_fail@plt+0x59c0>
   1dfb0:	subs	sl, r0, #0
   1dfb4:	moveq	r3, #12
   1dfb8:	streq	r3, [fp]
   1dfbc:	beq	1e318 <__assert_fail@plt+0xce50>
   1dfc0:	ldr	r2, [sp, #20]
   1dfc4:	ldr	r3, [r2, #92]	; 0x5c
   1dfc8:	cmp	r3, #1
   1dfcc:	ble	1dd0c <__assert_fail@plt+0xc844>
   1dfd0:	ldrb	r3, [r2, #88]	; 0x58
   1dfd4:	orr	r3, r3, #2
   1dfd8:	strb	r3, [r2, #88]	; 0x58
   1dfdc:	b	1dd0c <__assert_fail@plt+0xc844>
   1dfe0:	str	fp, [sp, #4]
   1dfe4:	cmp	r2, #33	; 0x21
   1dfe8:	movne	r2, #0
   1dfec:	moveq	r2, #1
   1dff0:	str	r2, [sp]
   1dff4:	movw	r3, #24028	; 0x5ddc
   1dff8:	movt	r3, #2
   1dffc:	movw	r2, #23956	; 0x5d94
   1e000:	movt	r2, #2
   1e004:	ldr	r1, [r0, #64]	; 0x40
   1e008:	ldr	r0, [sp, #20]
   1e00c:	bl	1b398 <__assert_fail@plt+0x9ed0>
   1e010:	ldr	r3, [fp]
   1e014:	mov	sl, r0
   1e018:	clz	r0, r0
   1e01c:	lsr	r0, r0, #5
   1e020:	cmp	r3, #0
   1e024:	moveq	r0, #0
   1e028:	cmp	r0, #0
   1e02c:	beq	1dd0c <__assert_fail@plt+0xc844>
   1e030:	mov	sl, #0
   1e034:	b	1e318 <__assert_fail@plt+0xce50>
   1e038:	str	fp, [sp, #4]
   1e03c:	cmp	r2, #35	; 0x23
   1e040:	movne	r2, #0
   1e044:	moveq	r2, #1
   1e048:	str	r2, [sp]
   1e04c:	movw	r3, #20932	; 0x51c4
   1e050:	movt	r3, #2
   1e054:	movw	r2, #23972	; 0x5da4
   1e058:	movt	r2, #2
   1e05c:	ldr	r1, [r0, #64]	; 0x40
   1e060:	ldr	r0, [sp, #20]
   1e064:	bl	1b398 <__assert_fail@plt+0x9ed0>
   1e068:	ldr	r3, [fp]
   1e06c:	mov	sl, r0
   1e070:	clz	r0, r0
   1e074:	lsr	r0, r0, #5
   1e078:	cmp	r3, #0
   1e07c:	moveq	r0, #0
   1e080:	cmp	r0, #0
   1e084:	beq	1dd0c <__assert_fail@plt+0xc844>
   1e088:	mov	sl, #0
   1e08c:	b	1e318 <__assert_fail@plt+0xce50>
   1e090:	mov	r3, #5
   1e094:	str	r3, [fp]
   1e098:	mov	sl, #0
   1e09c:	b	1e318 <__assert_fail@plt+0xce50>
   1e0a0:	ldr	r2, [sp, #24]
   1e0a4:	mov	r1, r8
   1e0a8:	mov	r0, r9
   1e0ac:	bl	18ab4 <__assert_fail@plt+0x75ec>
   1e0b0:	mov	r4, r0
   1e0b4:	cmn	r0, #1
   1e0b8:	beq	1e100 <__assert_fail@plt+0xcc38>
   1e0bc:	cmn	r0, #2
   1e0c0:	beq	1e0d8 <__assert_fail@plt+0xcc10>
   1e0c4:	ldrb	r3, [r8, #4]
   1e0c8:	cmp	r3, #24
   1e0cc:	beq	1e208 <__assert_fail@plt+0xcd40>
   1e0d0:	cmp	r3, #1
   1e0d4:	beq	1e11c <__assert_fail@plt+0xcc54>
   1e0d8:	ldr	r3, [sp, #24]
   1e0dc:	tst	r3, #2097152	; 0x200000
   1e0e0:	bne	1e134 <__assert_fail@plt+0xcc6c>
   1e0e4:	ldrb	r3, [r8, #4]
   1e0e8:	cmp	r3, #2
   1e0ec:	bne	1e1f8 <__assert_fail@plt+0xcd30>
   1e0f0:	mov	r3, #9
   1e0f4:	str	r3, [fp]
   1e0f8:	mov	r6, #0
   1e0fc:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e100:	ldrb	r3, [r8, #4]
   1e104:	cmp	r3, #1
   1e108:	bne	1e150 <__assert_fail@plt+0xcc88>
   1e10c:	ldrb	r3, [r8]
   1e110:	cmp	r3, #44	; 0x2c
   1e114:	moveq	r4, #0
   1e118:	bne	1e150 <__assert_fail@plt+0xcc88>
   1e11c:	ldrb	r3, [r8]
   1e120:	cmp	r3, #44	; 0x2c
   1e124:	beq	1e160 <__assert_fail@plt+0xcc98>
   1e128:	ldr	r3, [sp, #24]
   1e12c:	tst	r3, #2097152	; 0x200000
   1e130:	beq	1e1f8 <__assert_fail@plt+0xcd30>
   1e134:	str	r6, [r9, #40]	; 0x28
   1e138:	ldrd	r2, [sp, #128]	; 0x80
   1e13c:	strd	r2, [r8]
   1e140:	mov	r3, #1
   1e144:	strb	r3, [r8, #4]
   1e148:	mov	r6, sl
   1e14c:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e150:	mov	r3, #10
   1e154:	str	r3, [fp]
   1e158:	mov	r6, #0
   1e15c:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e160:	ldr	r2, [sp, #24]
   1e164:	mov	r1, r8
   1e168:	mov	r0, r9
   1e16c:	bl	18ab4 <__assert_fail@plt+0x75ec>
   1e170:	mov	r7, r0
   1e174:	cmn	r4, #2
   1e178:	cmnne	r0, #2
   1e17c:	beq	1e0d8 <__assert_fail@plt+0xcc10>
   1e180:	cmn	r0, #1
   1e184:	cmpne	r4, r0
   1e188:	bgt	1e210 <__assert_fail@plt+0xcd48>
   1e18c:	ldrb	r3, [r8, #4]
   1e190:	cmp	r3, #24
   1e194:	bne	1e210 <__assert_fail@plt+0xcd48>
   1e198:	cmn	r7, #1
   1e19c:	beq	1e220 <__assert_fail@plt+0xcd58>
   1e1a0:	cmp	r7, #32768	; 0x8000
   1e1a4:	movlt	r3, #0
   1e1a8:	movge	r3, #1
   1e1ac:	cmp	r3, #0
   1e1b0:	movne	r3, #15
   1e1b4:	strne	r3, [fp]
   1e1b8:	movne	r6, #0
   1e1bc:	bne	1e2b4 <__assert_fail@plt+0xcdec>
   1e1c0:	ldr	r2, [sp, #24]
   1e1c4:	mov	r1, r9
   1e1c8:	mov	r0, r8
   1e1cc:	bl	18a8c <__assert_fail@plt+0x75c4>
   1e1d0:	cmp	sl, #0
   1e1d4:	beq	1e370 <__assert_fail@plt+0xcea8>
   1e1d8:	orrs	r3, r4, r7
   1e1dc:	bne	1e230 <__assert_fail@plt+0xcd68>
   1e1e0:	mov	r2, #0
   1e1e4:	ldr	r1, [sp, #36]	; 0x24
   1e1e8:	mov	r0, sl
   1e1ec:	bl	1627c <__assert_fail@plt+0x4db4>
   1e1f0:	mov	r6, #0
   1e1f4:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e1f8:	mov	r3, #10
   1e1fc:	str	r3, [fp]
   1e200:	mov	r6, #0
   1e204:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e208:	mov	r7, r0
   1e20c:	b	1e18c <__assert_fail@plt+0xccc4>
   1e210:	mov	r3, #10
   1e214:	str	r3, [fp]
   1e218:	mov	r6, #0
   1e21c:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e220:	cmp	r4, #32768	; 0x8000
   1e224:	movlt	r3, #0
   1e228:	movge	r3, #1
   1e22c:	b	1e1ac <__assert_fail@plt+0xcce4>
   1e230:	cmp	r4, #0
   1e234:	ble	1e34c <__assert_fail@plt+0xce84>
   1e238:	cmp	r4, #1
   1e23c:	ble	1e338 <__assert_fail@plt+0xce70>
   1e240:	str	sl, [sp, #28]
   1e244:	mov	r5, sl
   1e248:	mov	r6, #2
   1e24c:	ldr	r1, [sp, #20]
   1e250:	mov	r0, r5
   1e254:	bl	16f58 <__assert_fail@plt+0x5a90>
   1e258:	mov	r5, r0
   1e25c:	mov	r3, #16
   1e260:	mov	r2, r0
   1e264:	ldr	r1, [sp, #28]
   1e268:	ldr	r0, [sp, #20]
   1e26c:	bl	17024 <__assert_fail@plt+0x5b5c>
   1e270:	str	r0, [sp, #28]
   1e274:	cmp	r0, #0
   1e278:	cmpne	r5, #0
   1e27c:	beq	1e2a8 <__assert_fail@plt+0xcde0>
   1e280:	add	r6, r6, #1
   1e284:	cmp	r4, r6
   1e288:	bge	1e24c <__assert_fail@plt+0xcd84>
   1e28c:	cmp	r4, r7
   1e290:	beq	1e5bc <__assert_fail@plt+0xd0f4>
   1e294:	ldr	r1, [sp, #20]
   1e298:	mov	r0, r5
   1e29c:	bl	16f58 <__assert_fail@plt+0x5a90>
   1e2a0:	subs	r5, r0, #0
   1e2a4:	bne	1e434 <__assert_fail@plt+0xcf6c>
   1e2a8:	mov	r3, #12
   1e2ac:	str	r3, [fp]
   1e2b0:	mov	r6, #0
   1e2b4:	ldr	r2, [fp]
   1e2b8:	clz	r3, r6
   1e2bc:	lsr	r3, r3, #5
   1e2c0:	cmp	r2, #0
   1e2c4:	moveq	r3, #0
   1e2c8:	cmp	r3, #0
   1e2cc:	bne	1e388 <__assert_fail@plt+0xcec0>
   1e2d0:	ldr	r3, [sp, #24]
   1e2d4:	tst	r3, #16777216	; 0x1000000
   1e2d8:	beq	1e3ac <__assert_fail@plt+0xcee4>
   1e2dc:	ldrb	r3, [r8, #4]
   1e2e0:	mov	sl, r6
   1e2e4:	cmp	r3, #23
   1e2e8:	cmpne	r3, #11
   1e2ec:	bne	1e3b0 <__assert_fail@plt+0xcee8>
   1e2f0:	cmp	r6, #0
   1e2f4:	beq	1e30c <__assert_fail@plt+0xce44>
   1e2f8:	mov	r2, #0
   1e2fc:	movw	r1, #35856	; 0x8c10
   1e300:	movt	r1, #1
   1e304:	mov	r0, r6
   1e308:	bl	1627c <__assert_fail@plt+0x4db4>
   1e30c:	mov	r3, #13
   1e310:	str	r3, [fp]
   1e314:	mov	sl, #0
   1e318:	mov	r0, sl
   1e31c:	add	sp, sp, #164	; 0xa4
   1e320:	ldrd	r4, [sp]
   1e324:	ldrd	r6, [sp, #8]
   1e328:	ldrd	r8, [sp, #16]
   1e32c:	ldrd	sl, [sp, #24]
   1e330:	add	sp, sp, #32
   1e334:	pop	{pc}		; (ldr pc, [sp], #4)
   1e338:	cmp	r4, r7
   1e33c:	beq	1e378 <__assert_fail@plt+0xceb0>
   1e340:	str	sl, [sp, #28]
   1e344:	mov	r5, sl
   1e348:	b	1e294 <__assert_fail@plt+0xcdcc>
   1e34c:	mov	r5, sl
   1e350:	mov	r3, #0
   1e354:	str	r3, [sp, #28]
   1e358:	b	1e434 <__assert_fail@plt+0xcf6c>
   1e35c:	ldr	r2, [r5, #20]
   1e360:	ldr	r1, [sp, #32]
   1e364:	mov	r0, r5
   1e368:	bl	1627c <__assert_fail@plt+0x4db4>
   1e36c:	b	1e440 <__assert_fail@plt+0xcf78>
   1e370:	mov	r6, sl
   1e374:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e378:	mov	r6, sl
   1e37c:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e380:	mov	r6, sl
   1e384:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e388:	cmp	sl, #0
   1e38c:	beq	1e318 <__assert_fail@plt+0xce50>
   1e390:	mov	r2, #0
   1e394:	movw	r1, #35856	; 0x8c10
   1e398:	movt	r1, #1
   1e39c:	mov	r0, sl
   1e3a0:	bl	1627c <__assert_fail@plt+0x4db4>
   1e3a4:	mov	sl, #0
   1e3a8:	b	1e318 <__assert_fail@plt+0xce50>
   1e3ac:	mov	sl, r6
   1e3b0:	ldrb	r5, [r8, #4]
   1e3b4:	cmp	r5, #18
   1e3b8:	movne	r4, #0
   1e3bc:	moveq	r4, #1
   1e3c0:	cmp	r5, #11
   1e3c4:	cmpne	r5, #23
   1e3c8:	moveq	r3, #1
   1e3cc:	movne	r3, #0
   1e3d0:	sub	r2, r5, #18
   1e3d4:	uxtb	r2, r2
   1e3d8:	cmp	r2, #1
   1e3dc:	orrls	r3, r3, #1
   1e3e0:	cmp	r3, #0
   1e3e4:	beq	1e318 <__assert_fail@plt+0xce50>
   1e3e8:	ldr	r6, [r9, #40]	; 0x28
   1e3ec:	ldrd	r2, [r8]
   1e3f0:	strd	r2, [sp, #128]	; 0x80
   1e3f4:	cmp	r5, #23
   1e3f8:	beq	1e0a0 <__assert_fail@plt+0xcbd8>
   1e3fc:	cmp	r5, #19
   1e400:	moveq	r7, #1
   1e404:	mvnne	r7, #0
   1e408:	ldr	r2, [sp, #24]
   1e40c:	mov	r1, r9
   1e410:	mov	r0, r8
   1e414:	bl	18a8c <__assert_fail@plt+0x75c4>
   1e418:	cmp	sl, #0
   1e41c:	beq	1e380 <__assert_fail@plt+0xceb8>
   1e420:	cmp	r5, #18
   1e424:	beq	1e338 <__assert_fail@plt+0xce70>
   1e428:	mov	r5, sl
   1e42c:	mov	r3, #0
   1e430:	str	r3, [sp, #28]
   1e434:	ldrb	r3, [r5, #24]
   1e438:	cmp	r3, #17
   1e43c:	beq	1e35c <__assert_fail@plt+0xce94>
   1e440:	cmn	r7, #1
   1e444:	moveq	r3, #11
   1e448:	movne	r3, #10
   1e44c:	mov	r2, #0
   1e450:	mov	r1, r5
   1e454:	ldr	r0, [sp, #20]
   1e458:	bl	17024 <__assert_fail@plt+0x5b5c>
   1e45c:	subs	r6, r0, #0
   1e460:	beq	1e2a8 <__assert_fail@plt+0xcde0>
   1e464:	add	r4, r4, #2
   1e468:	cmp	r7, r4
   1e46c:	blt	1e4cc <__assert_fail@plt+0xd004>
   1e470:	ldr	r1, [sp, #20]
   1e474:	mov	r0, r5
   1e478:	bl	16f58 <__assert_fail@plt+0x5a90>
   1e47c:	mov	r5, r0
   1e480:	mov	r3, #16
   1e484:	mov	r2, r0
   1e488:	mov	r1, r6
   1e48c:	ldr	r6, [sp, #20]
   1e490:	mov	r0, r6
   1e494:	bl	17024 <__assert_fail@plt+0x5b5c>
   1e498:	mov	r1, r0
   1e49c:	cmp	r0, #0
   1e4a0:	cmpne	r5, #0
   1e4a4:	beq	1e2a8 <__assert_fail@plt+0xcde0>
   1e4a8:	mov	r3, #10
   1e4ac:	mov	r2, #0
   1e4b0:	mov	r0, r6
   1e4b4:	bl	17024 <__assert_fail@plt+0x5b5c>
   1e4b8:	subs	r6, r0, #0
   1e4bc:	beq	1e2a8 <__assert_fail@plt+0xcde0>
   1e4c0:	add	r4, r4, #1
   1e4c4:	cmp	r7, r4
   1e4c8:	bge	1e470 <__assert_fail@plt+0xcfa8>
   1e4cc:	ldr	r3, [sp, #28]
   1e4d0:	cmp	r3, #0
   1e4d4:	beq	1e2d0 <__assert_fail@plt+0xce08>
   1e4d8:	mov	r3, #16
   1e4dc:	mov	r2, r6
   1e4e0:	ldr	r1, [sp, #28]
   1e4e4:	ldr	r0, [sp, #20]
   1e4e8:	bl	17024 <__assert_fail@plt+0x5b5c>
   1e4ec:	mov	r6, r0
   1e4f0:	b	1e2b4 <__assert_fail@plt+0xcdec>
   1e4f4:	mov	sl, #0
   1e4f8:	b	1e318 <__assert_fail@plt+0xce50>
   1e4fc:	mov	sl, #0
   1e500:	b	1e318 <__assert_fail@plt+0xce50>
   1e504:	mov	r3, #3
   1e508:	strb	r3, [sp, #132]	; 0x84
   1e50c:	ldr	r3, [sp, #32]
   1e510:	str	r3, [sp, #128]	; 0x80
   1e514:	add	r3, sp, #128	; 0x80
   1e518:	mov	r2, #0
   1e51c:	mov	r1, r2
   1e520:	ldr	r0, [sp, #20]
   1e524:	bl	16e88 <__assert_fail@plt+0x59c0>
   1e528:	subs	r1, r0, #0
   1e52c:	beq	1dc18 <__assert_fail@plt+0xc750>
   1e530:	mov	r3, #10
   1e534:	mov	r2, sl
   1e538:	ldr	r0, [sp, #20]
   1e53c:	bl	17024 <__assert_fail@plt+0x5b5c>
   1e540:	subs	sl, r0, #0
   1e544:	bne	1dd0c <__assert_fail@plt+0xc844>
   1e548:	b	1dc18 <__assert_fail@plt+0xc750>
   1e54c:	ldr	fp, [sp, #204]	; 0xcc
   1e550:	mov	r3, #3
   1e554:	str	r3, [fp]
   1e558:	b	1d55c <__assert_fail@plt+0xc094>
   1e55c:	ldr	fp, [sp, #204]	; 0xcc
   1e560:	mov	r3, #3
   1e564:	str	r3, [fp]
   1e568:	b	1d55c <__assert_fail@plt+0xc094>
   1e56c:	mov	r3, #0
   1e570:	ldr	r2, [sp, #204]	; 0xcc
   1e574:	str	r3, [r2]
   1e578:	b	1d8d4 <__assert_fail@plt+0xc40c>
   1e57c:	ldr	fp, [sp, #204]	; 0xcc
   1e580:	mov	r3, #11
   1e584:	b	1e590 <__assert_fail@plt+0xd0c8>
   1e588:	ldr	fp, [sp, #204]	; 0xcc
   1e58c:	mov	r3, #11
   1e590:	str	r3, [fp]
   1e594:	b	1d55c <__assert_fail@plt+0xc094>
   1e598:	ldr	fp, [sp, #204]	; 0xcc
   1e59c:	mov	r3, #3
   1e5a0:	b	1e590 <__assert_fail@plt+0xd0c8>
   1e5a4:	ldr	fp, [sp, #204]	; 0xcc
   1e5a8:	mov	r3, #3
   1e5ac:	b	1e590 <__assert_fail@plt+0xd0c8>
   1e5b0:	ldr	fp, [sp, #204]	; 0xcc
   1e5b4:	mov	r3, #11
   1e5b8:	b	1e590 <__assert_fail@plt+0xd0c8>
   1e5bc:	ldr	r6, [sp, #28]
   1e5c0:	b	1e2d0 <__assert_fail@plt+0xce08>
   1e5c4:	ldr	r3, [sp, #80]	; 0x50
   1e5c8:	cmp	r3, #3
   1e5cc:	cmpne	r3, #0
   1e5d0:	bne	1d6c8 <__assert_fail@plt+0xc200>
   1e5d4:	b	1d6cc <__assert_fail@plt+0xc204>
   1e5d8:	ldr	r0, [sp, #84]	; 0x54
   1e5dc:	bl	11390 <strlen@plt>
   1e5e0:	cmp	r0, #1
   1e5e4:	bls	1d760 <__assert_fail@plt+0xc298>
   1e5e8:	ldr	fp, [sp, #204]	; 0xcc
   1e5ec:	mov	r3, #3
   1e5f0:	b	1e590 <__assert_fail@plt+0xd0c8>
   1e5f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e5f8:	strd	r6, [sp, #8]
   1e5fc:	strd	r8, [sp, #16]
   1e600:	strd	sl, [sp, #24]
   1e604:	str	lr, [sp, #32]
   1e608:	sub	sp, sp, #20
   1e60c:	mov	fp, r0
   1e610:	mov	r9, r1
   1e614:	mov	r8, r2
   1e618:	mov	sl, r3
   1e61c:	ldr	r7, [sp, #56]	; 0x38
   1e620:	ldr	r6, [sp, #60]	; 0x3c
   1e624:	ldr	ip, [r1]
   1e628:	str	ip, [sp, #12]
   1e62c:	str	r6, [sp, #4]
   1e630:	str	r7, [sp]
   1e634:	bl	1d190 <__assert_fail@plt+0xbcc8>
   1e638:	ldr	r3, [r6]
   1e63c:	mov	r4, r0
   1e640:	clz	r0, r0
   1e644:	lsr	r0, r0, #5
   1e648:	cmp	r3, #0
   1e64c:	moveq	r0, #0
   1e650:	cmp	r0, #0
   1e654:	beq	1e6a4 <__assert_fail@plt+0xd1dc>
   1e658:	mov	r4, #0
   1e65c:	b	1e758 <__assert_fail@plt+0xd290>
   1e660:	cmp	r4, #0
   1e664:	beq	1e758 <__assert_fail@plt+0xd290>
   1e668:	mov	r2, #0
   1e66c:	movw	r1, #35856	; 0x8c10
   1e670:	movt	r1, #1
   1e674:	mov	r0, r4
   1e678:	bl	1627c <__assert_fail@plt+0x4db4>
   1e67c:	mov	r4, #0
   1e680:	b	1e758 <__assert_fail@plt+0xd290>
   1e684:	mov	r3, #16
   1e688:	mov	r2, r5
   1e68c:	mov	r1, r4
   1e690:	ldr	r0, [sp, #12]
   1e694:	bl	17024 <__assert_fail@plt+0x5b5c>
   1e698:	cmp	r0, #0
   1e69c:	beq	1e720 <__assert_fail@plt+0xd258>
   1e6a0:	mov	r4, r0
   1e6a4:	ldrb	r2, [r8, #4]
   1e6a8:	and	r3, r2, #247	; 0xf7
   1e6ac:	cmp	r3, #2
   1e6b0:	beq	1e758 <__assert_fail@plt+0xd290>
   1e6b4:	clz	r3, r7
   1e6b8:	lsr	r3, r3, #5
   1e6bc:	cmp	r2, #9
   1e6c0:	orrne	r3, r3, #1
   1e6c4:	cmp	r3, #0
   1e6c8:	beq	1e758 <__assert_fail@plt+0xd290>
   1e6cc:	str	r6, [sp, #4]
   1e6d0:	str	r7, [sp]
   1e6d4:	mov	r3, sl
   1e6d8:	mov	r2, r8
   1e6dc:	mov	r1, r9
   1e6e0:	mov	r0, fp
   1e6e4:	bl	1d190 <__assert_fail@plt+0xbcc8>
   1e6e8:	ldr	r3, [r6]
   1e6ec:	mov	r5, r0
   1e6f0:	clz	r0, r0
   1e6f4:	lsr	r0, r0, #5
   1e6f8:	cmp	r3, #0
   1e6fc:	moveq	r0, #0
   1e700:	cmp	r0, #0
   1e704:	bne	1e660 <__assert_fail@plt+0xd198>
   1e708:	cmp	r4, #0
   1e70c:	cmpne	r5, #0
   1e710:	bne	1e684 <__assert_fail@plt+0xd1bc>
   1e714:	cmp	r4, #0
   1e718:	moveq	r4, r5
   1e71c:	b	1e6a4 <__assert_fail@plt+0xd1dc>
   1e720:	mov	fp, r0
   1e724:	movw	r7, #35856	; 0x8c10
   1e728:	movt	r7, #1
   1e72c:	mov	r2, #0
   1e730:	mov	r1, r7
   1e734:	mov	r0, r5
   1e738:	bl	1627c <__assert_fail@plt+0x4db4>
   1e73c:	mov	r2, #0
   1e740:	mov	r1, r7
   1e744:	mov	r0, r4
   1e748:	bl	1627c <__assert_fail@plt+0x4db4>
   1e74c:	mov	r3, #12
   1e750:	str	r3, [r6]
   1e754:	mov	r4, fp
   1e758:	mov	r0, r4
   1e75c:	add	sp, sp, #20
   1e760:	ldrd	r4, [sp]
   1e764:	ldrd	r6, [sp, #8]
   1e768:	ldrd	r8, [sp, #16]
   1e76c:	ldrd	sl, [sp, #24]
   1e770:	add	sp, sp, #32
   1e774:	pop	{pc}		; (ldr pc, [sp], #4)
   1e778:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e77c:	strd	r6, [sp, #8]
   1e780:	strd	r8, [sp, #16]
   1e784:	strd	sl, [sp, #24]
   1e788:	str	lr, [sp, #32]
   1e78c:	sub	sp, sp, #28
   1e790:	str	r0, [sp, #12]
   1e794:	str	r1, [sp, #16]
   1e798:	mov	r4, r2
   1e79c:	mov	r9, r3
   1e7a0:	str	r3, [sp, #20]
   1e7a4:	ldr	r8, [sp, #64]	; 0x40
   1e7a8:	ldr	r7, [sp, #68]	; 0x44
   1e7ac:	ldr	r5, [r1]
   1e7b0:	ldr	fp, [r5, #84]	; 0x54
   1e7b4:	str	r7, [sp, #4]
   1e7b8:	str	r8, [sp]
   1e7bc:	bl	1e5f4 <__assert_fail@plt+0xd12c>
   1e7c0:	ldr	r3, [r7]
   1e7c4:	mov	r6, r0
   1e7c8:	clz	r0, r0
   1e7cc:	lsr	r0, r0, #5
   1e7d0:	cmp	r3, #0
   1e7d4:	moveq	r0, #0
   1e7d8:	cmp	r0, #0
   1e7dc:	bne	1e8f0 <__assert_fail@plt+0xd428>
   1e7e0:	orr	r9, r9, #8388608	; 0x800000
   1e7e4:	b	1e828 <__assert_fail@plt+0xd360>
   1e7e8:	cmp	r6, #0
   1e7ec:	beq	1e8d0 <__assert_fail@plt+0xd408>
   1e7f0:	mov	r2, #0
   1e7f4:	movw	r1, #35856	; 0x8c10
   1e7f8:	movt	r1, #1
   1e7fc:	mov	r0, r6
   1e800:	bl	1627c <__assert_fail@plt+0x4db4>
   1e804:	mov	r6, #0
   1e808:	b	1e8d0 <__assert_fail@plt+0xd408>
   1e80c:	mov	r2, #0
   1e810:	mov	r3, #10
   1e814:	mov	r1, r6
   1e818:	mov	r0, r5
   1e81c:	bl	17024 <__assert_fail@plt+0x5b5c>
   1e820:	subs	r6, r0, #0
   1e824:	beq	1e8c8 <__assert_fail@plt+0xd400>
   1e828:	ldrb	r3, [r4, #4]
   1e82c:	cmp	r3, #10
   1e830:	bne	1e8d0 <__assert_fail@plt+0xd408>
   1e834:	mov	r2, r9
   1e838:	ldr	r1, [sp, #12]
   1e83c:	mov	r0, r4
   1e840:	bl	18a8c <__assert_fail@plt+0x75c4>
   1e844:	ldrb	r2, [r4, #4]
   1e848:	and	r3, r2, #247	; 0xf7
   1e84c:	cmp	r3, #2
   1e850:	beq	1e80c <__assert_fail@plt+0xd344>
   1e854:	clz	r3, r8
   1e858:	lsr	r3, r3, #5
   1e85c:	cmp	r2, #9
   1e860:	orrne	r3, r3, #1
   1e864:	cmp	r3, #0
   1e868:	beq	1e8c0 <__assert_fail@plt+0xd3f8>
   1e86c:	ldr	sl, [r5, #84]	; 0x54
   1e870:	str	fp, [r5, #84]	; 0x54
   1e874:	str	r7, [sp, #4]
   1e878:	str	r8, [sp]
   1e87c:	ldr	r3, [sp, #20]
   1e880:	mov	r2, r4
   1e884:	ldr	r1, [sp, #16]
   1e888:	ldr	r0, [sp, #12]
   1e88c:	bl	1e5f4 <__assert_fail@plt+0xd12c>
   1e890:	ldr	r3, [r7]
   1e894:	mov	r2, r0
   1e898:	clz	r0, r0
   1e89c:	lsr	r0, r0, #5
   1e8a0:	cmp	r3, #0
   1e8a4:	moveq	r0, #0
   1e8a8:	cmp	r0, #0
   1e8ac:	bne	1e7e8 <__assert_fail@plt+0xd320>
   1e8b0:	ldr	r3, [r5, #84]	; 0x54
   1e8b4:	orr	sl, r3, sl
   1e8b8:	str	sl, [r5, #84]	; 0x54
   1e8bc:	b	1e810 <__assert_fail@plt+0xd348>
   1e8c0:	mov	r2, #0
   1e8c4:	b	1e810 <__assert_fail@plt+0xd348>
   1e8c8:	mov	r3, #12
   1e8cc:	str	r3, [r7]
   1e8d0:	mov	r0, r6
   1e8d4:	add	sp, sp, #28
   1e8d8:	ldrd	r4, [sp]
   1e8dc:	ldrd	r6, [sp, #8]
   1e8e0:	ldrd	r8, [sp, #16]
   1e8e4:	ldrd	sl, [sp, #24]
   1e8e8:	add	sp, sp, #32
   1e8ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8f0:	mov	r6, #0
   1e8f4:	b	1e8d0 <__assert_fail@plt+0xd408>
   1e8f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e8fc:	strd	r6, [sp, #8]
   1e900:	strd	r8, [sp, #16]
   1e904:	strd	sl, [sp, #24]
   1e908:	str	lr, [sp, #32]
   1e90c:	sub	sp, sp, #4
   1e910:	mov	r3, #0
   1e914:	str	r3, [r0]
   1e918:	ldr	lr, [r2, #4]
   1e91c:	cmp	lr, r3
   1e920:	beq	1eb1c <__assert_fail@plt+0xd654>
   1e924:	mov	r6, lr
   1e928:	ble	1e944 <__assert_fail@plt+0xd47c>
   1e92c:	ldr	r3, [r2, #8]
   1e930:	add	lr, r3, lr, lsl #2
   1e934:	ldr	ip, [r3], #4
   1e938:	add	r6, r6, ip
   1e93c:	cmp	r3, lr
   1e940:	bne	1e934 <__assert_fail@plt+0xd46c>
   1e944:	mov	fp, r2
   1e948:	mov	r9, r1
   1e94c:	mov	sl, r0
   1e950:	ldr	r3, [r1, #68]	; 0x44
   1e954:	and	r3, r3, r6
   1e958:	add	r3, r3, r3, lsl #1
   1e95c:	lsl	r3, r3, #2
   1e960:	ldr	r2, [r1, #32]
   1e964:	add	r1, r2, r3
   1e968:	ldr	r8, [r2, r3]
   1e96c:	cmp	r8, #0
   1e970:	ble	1e9b8 <__assert_fail@plt+0xd4f0>
   1e974:	ldr	r7, [r1, #8]
   1e978:	sub	r7, r7, #4
   1e97c:	mov	r5, #0
   1e980:	b	1e990 <__assert_fail@plt+0xd4c8>
   1e984:	add	r5, r5, #1
   1e988:	cmp	r8, r5
   1e98c:	beq	1e9b8 <__assert_fail@plt+0xd4f0>
   1e990:	ldr	r4, [r7, #4]!
   1e994:	ldr	r3, [r4]
   1e998:	cmp	r6, r3
   1e99c:	bne	1e984 <__assert_fail@plt+0xd4bc>
   1e9a0:	mov	r1, fp
   1e9a4:	add	r0, r4, #4
   1e9a8:	bl	1612c <__assert_fail@plt+0x4c64>
   1e9ac:	cmp	r0, #0
   1e9b0:	beq	1e984 <__assert_fail@plt+0xd4bc>
   1e9b4:	b	1eaf0 <__assert_fail@plt+0xd628>
   1e9b8:	mov	r1, #1
   1e9bc:	mov	r0, #56	; 0x38
   1e9c0:	bl	24794 <__assert_fail@plt+0x132cc>
   1e9c4:	subs	r4, r0, #0
   1e9c8:	beq	1ea14 <__assert_fail@plt+0xd54c>
   1e9cc:	add	r5, r4, #4
   1e9d0:	mov	r1, fp
   1e9d4:	mov	r0, r5
   1e9d8:	bl	17780 <__assert_fail@plt+0x62b8>
   1e9dc:	cmp	r0, #0
   1e9e0:	bne	1ea0c <__assert_fail@plt+0xd544>
   1e9e4:	str	r5, [r4, #40]	; 0x28
   1e9e8:	ldr	lr, [fp, #4]
   1e9ec:	cmp	lr, #0
   1e9f0:	ble	1ead8 <__assert_fail@plt+0xd610>
   1e9f4:	ldr	r5, [r9]
   1e9f8:	ldr	r1, [fp, #8]
   1e9fc:	add	lr, r1, lr, lsl #2
   1ea00:	mov	r7, #65280	; 0xff00
   1ea04:	movt	r7, #3
   1ea08:	b	1ea70 <__assert_fail@plt+0xd5a8>
   1ea0c:	mov	r0, r4
   1ea10:	bl	135a4 <__assert_fail@plt+0x20dc>
   1ea14:	mov	r3, #12
   1ea18:	str	r3, [sl]
   1ea1c:	mov	r4, #0
   1ea20:	b	1eaf0 <__assert_fail@plt+0xd628>
   1ea24:	ldr	r2, [r3, #4]
   1ea28:	tst	r7, r2
   1ea2c:	beq	1ea68 <__assert_fail@plt+0xd5a0>
   1ea30:	ldrb	r2, [r4, #52]	; 0x34
   1ea34:	ubfx	r0, r2, #5, #1
   1ea38:	ldrb	ip, [r3, #6]
   1ea3c:	ubfx	ip, ip, #4, #1
   1ea40:	orr	r0, r0, ip
   1ea44:	bfi	r2, r0, #5, #1
   1ea48:	strb	r2, [r4, #52]	; 0x34
   1ea4c:	ldr	r3, [r3, #4]
   1ea50:	tst	r7, r3
   1ea54:	beq	1ea68 <__assert_fail@plt+0xd5a0>
   1ea58:	b	1eac8 <__assert_fail@plt+0xd600>
   1ea5c:	uxtb	r3, r2
   1ea60:	orr	r3, r3, #16
   1ea64:	strb	r3, [r4, #52]	; 0x34
   1ea68:	cmp	r1, lr
   1ea6c:	beq	1ead8 <__assert_fail@plt+0xd610>
   1ea70:	ldr	r3, [r1], #4
   1ea74:	add	r3, r5, r3, lsl #3
   1ea78:	ldrb	r0, [r3, #4]
   1ea7c:	cmp	r0, #1
   1ea80:	beq	1ea24 <__assert_fail@plt+0xd55c>
   1ea84:	ldrb	r2, [r4, #52]	; 0x34
   1ea88:	ubfx	ip, r2, #5, #1
   1ea8c:	ldrb	r8, [r3, #6]
   1ea90:	ubfx	r8, r8, #4, #1
   1ea94:	orr	ip, ip, r8
   1ea98:	bfi	r2, ip, #5, #1
   1ea9c:	strb	r2, [r4, #52]	; 0x34
   1eaa0:	cmp	r0, #2
   1eaa4:	beq	1ea5c <__assert_fail@plt+0xd594>
   1eaa8:	cmp	r0, #4
   1eaac:	bne	1eac0 <__assert_fail@plt+0xd5f8>
   1eab0:	ldrb	r3, [r4, #52]	; 0x34
   1eab4:	orr	r3, r3, #64	; 0x40
   1eab8:	strb	r3, [r4, #52]	; 0x34
   1eabc:	b	1ea68 <__assert_fail@plt+0xd5a0>
   1eac0:	cmp	r0, #12
   1eac4:	bne	1ea4c <__assert_fail@plt+0xd584>
   1eac8:	ldrb	r3, [r4, #52]	; 0x34
   1eacc:	orr	r3, r3, #128	; 0x80
   1ead0:	strb	r3, [r4, #52]	; 0x34
   1ead4:	b	1ea68 <__assert_fail@plt+0xd5a0>
   1ead8:	mov	r2, r6
   1eadc:	mov	r1, r4
   1eae0:	mov	r0, r9
   1eae4:	bl	172f0 <__assert_fail@plt+0x5e28>
   1eae8:	cmp	r0, #0
   1eaec:	bne	1eb10 <__assert_fail@plt+0xd648>
   1eaf0:	mov	r0, r4
   1eaf4:	add	sp, sp, #4
   1eaf8:	ldrd	r4, [sp]
   1eafc:	ldrd	r6, [sp, #8]
   1eb00:	ldrd	r8, [sp, #16]
   1eb04:	ldrd	sl, [sp, #24]
   1eb08:	add	sp, sp, #32
   1eb0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb10:	mov	r0, r4
   1eb14:	bl	18f74 <__assert_fail@plt+0x7aac>
   1eb18:	b	1ea14 <__assert_fail@plt+0xd54c>
   1eb1c:	mov	r4, #0
   1eb20:	b	1eaf0 <__assert_fail@plt+0xd628>
   1eb24:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1eb28:	strd	r6, [sp, #8]
   1eb2c:	strd	r8, [sp, #16]
   1eb30:	str	lr, [sp, #24]
   1eb34:	sub	sp, sp, #20
   1eb38:	subs	r8, r3, #0
   1eb3c:	ble	1ebe8 <__assert_fail@plt+0xd720>
   1eb40:	mov	r7, r2
   1eb44:	mov	r9, r0
   1eb48:	sub	r4, r1, #4
   1eb4c:	mov	r5, #0
   1eb50:	b	1eb68 <__assert_fail@plt+0xd6a0>
   1eb54:	ldr	r3, [r7, r5, lsl #2]
   1eb58:	str	r3, [r4]
   1eb5c:	add	r5, r5, #1
   1eb60:	cmp	r8, r5
   1eb64:	beq	1ebcc <__assert_fail@plt+0xd704>
   1eb68:	add	r4, r4, #4
   1eb6c:	ldr	r1, [r4]
   1eb70:	cmp	r1, #0
   1eb74:	beq	1eb54 <__assert_fail@plt+0xd68c>
   1eb78:	ldr	r2, [r7, r5, lsl #2]
   1eb7c:	cmp	r2, #0
   1eb80:	beq	1eb5c <__assert_fail@plt+0xd694>
   1eb84:	add	r2, r2, #4
   1eb88:	add	r1, r1, #4
   1eb8c:	mov	r0, sp
   1eb90:	bl	17808 <__assert_fail@plt+0x6340>
   1eb94:	str	r0, [sp, #12]
   1eb98:	cmp	r0, #0
   1eb9c:	bne	1ebd0 <__assert_fail@plt+0xd708>
   1eba0:	mov	r2, sp
   1eba4:	mov	r1, r9
   1eba8:	add	r0, sp, #12
   1ebac:	bl	1e8f8 <__assert_fail@plt+0xd430>
   1ebb0:	str	r0, [r4]
   1ebb4:	ldr	r0, [sp, #8]
   1ebb8:	bl	135a4 <__assert_fail@plt+0x20dc>
   1ebbc:	ldr	r0, [sp, #12]
   1ebc0:	cmp	r0, #0
   1ebc4:	beq	1eb5c <__assert_fail@plt+0xd694>
   1ebc8:	b	1ebd0 <__assert_fail@plt+0xd708>
   1ebcc:	mov	r0, #0
   1ebd0:	add	sp, sp, #20
   1ebd4:	ldrd	r4, [sp]
   1ebd8:	ldrd	r6, [sp, #8]
   1ebdc:	ldrd	r8, [sp, #16]
   1ebe0:	add	sp, sp, #24
   1ebe4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebe8:	mov	r0, #0
   1ebec:	b	1ebd0 <__assert_fail@plt+0xd708>
   1ebf0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ebf4:	strd	r6, [sp, #8]
   1ebf8:	strd	r8, [sp, #16]
   1ebfc:	strd	sl, [sp, #24]
   1ec00:	str	lr, [sp, #32]
   1ec04:	sub	sp, sp, #28
   1ec08:	mov	r8, r0
   1ec0c:	str	r1, [sp]
   1ec10:	mov	r7, r2
   1ec14:	str	r3, [sp, #4]
   1ec18:	mov	r1, r2
   1ec1c:	bl	16b8c <__assert_fail@plt+0x56c4>
   1ec20:	cmn	r0, #1
   1ec24:	moveq	r0, #0
   1ec28:	beq	1edf8 <__assert_fail@plt+0xd930>
   1ec2c:	ldr	r9, [r8, #84]	; 0x54
   1ec30:	add	r0, r0, #1
   1ec34:	add	r0, r0, r0, lsl #1
   1ec38:	lsl	fp, r0, #3
   1ec3c:	b	1ecbc <__assert_fail@plt+0xd7f4>
   1ec40:	ldr	r3, [r9, #20]
   1ec44:	add	r6, r6, r6, lsl #1
   1ec48:	add	r6, r3, r6, lsl #2
   1ec4c:	ldr	r3, [r6, #8]
   1ec50:	ldr	r5, [r3]
   1ec54:	mov	r1, r5
   1ec58:	ldr	r6, [sp]
   1ec5c:	mov	r0, r6
   1ec60:	bl	16194 <__assert_fail@plt+0x4ccc>
   1ec64:	cmp	r0, #0
   1ec68:	bne	1ed28 <__assert_fail@plt+0xd860>
   1ec6c:	mov	r1, r5
   1ec70:	add	r0, sp, #8
   1ec74:	bl	1725c <__assert_fail@plt+0x5d94>
   1ec78:	str	r0, [sp, #20]
   1ec7c:	ldr	r3, [sp, #64]	; 0x40
   1ec80:	ldr	r2, [sp, #4]
   1ec84:	add	r1, sp, #8
   1ec88:	mov	r0, r9
   1ec8c:	bl	1a600 <__assert_fail@plt+0x9138>
   1ec90:	mov	r4, r0
   1ec94:	add	r1, sp, #8
   1ec98:	mov	r0, r6
   1ec9c:	bl	19db4 <__assert_fail@plt+0x88ec>
   1eca0:	mov	r5, r0
   1eca4:	ldr	r0, [sp, #16]
   1eca8:	bl	135a4 <__assert_fail@plt+0x20dc>
   1ecac:	ldr	r0, [sp, #20]
   1ecb0:	orr	r3, r4, r5
   1ecb4:	orrs	r3, r3, r0
   1ecb8:	bne	1ecc8 <__assert_fail@plt+0xd800>
   1ecbc:	ldr	r4, [r8, #116]	; 0x74
   1ecc0:	add	r4, r4, fp
   1ecc4:	b	1ed38 <__assert_fail@plt+0xd870>
   1ecc8:	cmp	r0, #0
   1eccc:	bne	1edf8 <__assert_fail@plt+0xd930>
   1ecd0:	cmp	r4, #0
   1ecd4:	movne	r0, r4
   1ecd8:	moveq	r0, r5
   1ecdc:	b	1edf8 <__assert_fail@plt+0xd930>
   1ece0:	mov	r1, sl
   1ece4:	add	r0, sp, #8
   1ece8:	bl	1725c <__assert_fail@plt+0x5d94>
   1ecec:	str	r0, [sp, #20]
   1ecf0:	cmp	r0, #0
   1ecf4:	bne	1edf8 <__assert_fail@plt+0xd930>
   1ecf8:	ldr	r6, [r8, #100]	; 0x64
   1ecfc:	add	r2, sp, #8
   1ed00:	mov	r1, r9
   1ed04:	add	r0, sp, #20
   1ed08:	bl	1e8f8 <__assert_fail@plt+0xd430>
   1ed0c:	str	r0, [r6, r5, lsl #2]
   1ed10:	ldr	r0, [sp, #16]
   1ed14:	bl	135a4 <__assert_fail@plt+0x20dc>
   1ed18:	ldr	r3, [r8, #100]	; 0x64
   1ed1c:	ldr	r3, [r3, r5, lsl #2]
   1ed20:	cmp	r3, #0
   1ed24:	beq	1ede4 <__assert_fail@plt+0xd91c>
   1ed28:	add	r4, r4, #24
   1ed2c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1ed30:	cmp	r3, #0
   1ed34:	beq	1edf4 <__assert_fail@plt+0xd92c>
   1ed38:	ldr	r6, [r4, #-24]	; 0xffffffe8
   1ed3c:	mov	r1, r6
   1ed40:	ldr	r0, [sp]
   1ed44:	bl	16194 <__assert_fail@plt+0x4ccc>
   1ed48:	cmp	r0, #0
   1ed4c:	beq	1ed28 <__assert_fail@plt+0xd860>
   1ed50:	ldr	r5, [r4, #-12]
   1ed54:	add	r5, r7, r5
   1ed58:	ldr	r3, [r4, #-16]
   1ed5c:	sub	r5, r5, r3
   1ed60:	cmp	r7, r5
   1ed64:	beq	1ec40 <__assert_fail@plt+0xd778>
   1ed68:	ldr	r3, [r9, #12]
   1ed6c:	ldr	sl, [r3, r6, lsl #2]
   1ed70:	ldr	r3, [r8, #100]	; 0x64
   1ed74:	ldr	r6, [r3, r5, lsl #2]
   1ed78:	cmp	r6, #0
   1ed7c:	beq	1ece0 <__assert_fail@plt+0xd818>
   1ed80:	add	r6, r6, #4
   1ed84:	mov	r1, sl
   1ed88:	mov	r0, r6
   1ed8c:	bl	16194 <__assert_fail@plt+0x4ccc>
   1ed90:	cmp	r0, #0
   1ed94:	bne	1ed28 <__assert_fail@plt+0xd860>
   1ed98:	mov	r1, r6
   1ed9c:	add	r0, sp, #8
   1eda0:	bl	17780 <__assert_fail@plt+0x62b8>
   1eda4:	str	r0, [sp, #20]
   1eda8:	mov	r1, sl
   1edac:	add	r0, sp, #8
   1edb0:	bl	1981c <__assert_fail@plt+0x8354>
   1edb4:	eor	r0, r0, #1
   1edb8:	ldr	r3, [sp, #20]
   1edbc:	cmp	r3, #0
   1edc0:	orrne	r0, r0, #1
   1edc4:	tst	r0, #255	; 0xff
   1edc8:	beq	1ecf8 <__assert_fail@plt+0xd830>
   1edcc:	ldr	r0, [sp, #16]
   1edd0:	bl	135a4 <__assert_fail@plt+0x20dc>
   1edd4:	ldr	r0, [sp, #20]
   1edd8:	cmp	r0, #0
   1eddc:	moveq	r0, #12
   1ede0:	b	1edf8 <__assert_fail@plt+0xd930>
   1ede4:	ldr	r0, [sp, #20]
   1ede8:	cmp	r0, #0
   1edec:	beq	1ed28 <__assert_fail@plt+0xd860>
   1edf0:	b	1edf8 <__assert_fail@plt+0xd930>
   1edf4:	mov	r0, #0
   1edf8:	add	sp, sp, #28
   1edfc:	ldrd	r4, [sp]
   1ee00:	ldrd	r6, [sp, #8]
   1ee04:	ldrd	r8, [sp, #16]
   1ee08:	ldrd	sl, [sp, #24]
   1ee0c:	add	sp, sp, #32
   1ee10:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ee18:	strd	r6, [sp, #8]
   1ee1c:	strd	r8, [sp, #16]
   1ee20:	strd	sl, [sp, #24]
   1ee24:	str	lr, [sp, #32]
   1ee28:	sub	sp, sp, #84	; 0x54
   1ee2c:	mov	r4, r0
   1ee30:	str	r1, [sp, #32]
   1ee34:	mov	r7, r2
   1ee38:	mov	r6, r3
   1ee3c:	ldr	r3, [r0, #84]	; 0x54
   1ee40:	mov	r2, r3
   1ee44:	str	r3, [sp, #24]
   1ee48:	mov	r3, #0
   1ee4c:	str	r3, [sp, #76]	; 0x4c
   1ee50:	ldr	r3, [r2]
   1ee54:	ldr	r3, [r3, r7, lsl #3]
   1ee58:	str	r3, [sp, #28]
   1ee5c:	ldr	r5, [r0, #120]	; 0x78
   1ee60:	ldr	r3, [sp, #124]	; 0x7c
   1ee64:	add	r5, r3, r5
   1ee68:	ldr	r8, [r1, #4]
   1ee6c:	cmp	r5, r8
   1ee70:	bge	1efc0 <__assert_fail@plt+0xdaf8>
   1ee74:	ldr	r3, [sp, #32]
   1ee78:	ldr	r5, [r3]
   1ee7c:	cmp	r5, #0
   1ee80:	beq	1f3ec <__assert_fail@plt+0xdf24>
   1ee84:	ldr	r2, [r4, #100]	; 0x64
   1ee88:	str	r2, [sp, #40]	; 0x28
   1ee8c:	ldr	r2, [r4, #40]	; 0x28
   1ee90:	str	r2, [sp, #44]	; 0x2c
   1ee94:	ldr	r9, [r3, #8]
   1ee98:	str	r9, [r4, #100]	; 0x64
   1ee9c:	str	r5, [r4, #40]	; 0x28
   1eea0:	str	r4, [sp, #12]
   1eea4:	ldr	r2, [r4, #88]	; 0x58
   1eea8:	sub	r1, r5, #1
   1eeac:	mov	r0, r4
   1eeb0:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1eeb4:	mov	r8, r0
   1eeb8:	cmp	r5, r6
   1eebc:	beq	1f424 <__assert_fail@plt+0xdf5c>
   1eec0:	ldr	sl, [r9, r5, lsl #2]
   1eec4:	cmp	sl, #0
   1eec8:	beq	1f470 <__assert_fail@plt+0xdfa8>
   1eecc:	ldrb	r3, [sl, #52]	; 0x34
   1eed0:	tst	r3, #64	; 0x40
   1eed4:	bne	1f018 <__assert_fail@plt+0xdb50>
   1eed8:	mov	r3, #0
   1eedc:	str	r3, [sp, #64]	; 0x40
   1eee0:	str	r3, [sp, #68]	; 0x44
   1eee4:	str	r3, [sp, #72]	; 0x48
   1eee8:	ldrb	r3, [sl, #52]	; 0x34
   1eeec:	tst	r3, #64	; 0x40
   1eef0:	beq	1ef4c <__assert_fail@plt+0xda84>
   1eef4:	ldr	r3, [sp, #68]	; 0x44
   1eef8:	cmp	r3, #0
   1eefc:	beq	1ef28 <__assert_fail@plt+0xda60>
   1ef00:	ldr	r3, [sp, #128]	; 0x80
   1ef04:	str	r3, [sp]
   1ef08:	ldr	r3, [sp, #28]
   1ef0c:	mov	r2, r5
   1ef10:	add	r1, sp, #64	; 0x40
   1ef14:	mov	r0, r4
   1ef18:	bl	1ebf0 <__assert_fail@plt+0xd728>
   1ef1c:	str	r0, [sp, #76]	; 0x4c
   1ef20:	cmp	r0, #0
   1ef24:	bne	1f034 <__assert_fail@plt+0xdb6c>
   1ef28:	mov	r3, r8
   1ef2c:	add	r2, sp, #64	; 0x40
   1ef30:	ldr	r1, [sp, #24]
   1ef34:	add	r0, sp, #76	; 0x4c
   1ef38:	bl	18fdc <__assert_fail@plt+0x7b14>
   1ef3c:	subs	sl, r0, #0
   1ef40:	beq	1f044 <__assert_fail@plt+0xdb7c>
   1ef44:	ldr	r3, [r4, #100]	; 0x64
   1ef48:	str	sl, [r3, r5, lsl #2]
   1ef4c:	ldr	r3, [sp, #124]	; 0x7c
   1ef50:	cmp	r3, r5
   1ef54:	ble	1ef74 <__assert_fail@plt+0xdaac>
   1ef58:	ldr	r3, [r4, #120]	; 0x78
   1ef5c:	cmp	r3, #0
   1ef60:	addge	r7, r5, #1
   1ef64:	movge	r3, #0
   1ef68:	strge	r3, [sp, #16]
   1ef6c:	movge	r9, r3
   1ef70:	bge	1f258 <__assert_fail@plt+0xdd90>
   1ef74:	ldr	r0, [sp, #72]	; 0x48
   1ef78:	bl	135a4 <__assert_fail@plt+0x20dc>
   1ef7c:	ldr	r3, [r4, #100]	; 0x64
   1ef80:	ldr	r2, [sp, #124]	; 0x7c
   1ef84:	ldr	r0, [r3, r2, lsl #2]
   1ef88:	cmp	r0, #0
   1ef8c:	beq	1f3bc <__assert_fail@plt+0xdef4>
   1ef90:	ldr	r3, [sp, #32]
   1ef94:	str	r5, [r3]
   1ef98:	ldr	r3, [sp, #40]	; 0x28
   1ef9c:	str	r3, [r4, #100]	; 0x64
   1efa0:	ldr	r3, [sp, #44]	; 0x2c
   1efa4:	str	r3, [r4, #40]	; 0x28
   1efa8:	ldr	r1, [sp, #120]	; 0x78
   1efac:	add	r0, r0, #4
   1efb0:	bl	16194 <__assert_fail@plt+0x4ccc>
   1efb4:	clz	r0, r0
   1efb8:	lsr	r0, r0, #5
   1efbc:	b	1f06c <__assert_fail@plt+0xdba4>
   1efc0:	add	r5, r5, #1
   1efc4:	movw	r3, #65535	; 0xffff
   1efc8:	movt	r3, #32767	; 0x7fff
   1efcc:	sub	r3, r3, r8
   1efd0:	cmp	r3, r5
   1efd4:	blt	1f3a4 <__assert_fail@plt+0xdedc>
   1efd8:	add	r9, r8, r5
   1efdc:	cmn	r9, #-1073741823	; 0xc0000001
   1efe0:	bhi	1f3ac <__assert_fail@plt+0xdee4>
   1efe4:	lsl	r1, r9, #2
   1efe8:	ldr	sl, [sp, #32]
   1efec:	ldr	r0, [sl, #8]
   1eff0:	bl	24844 <__assert_fail@plt+0x1337c>
   1eff4:	cmp	r0, #0
   1eff8:	beq	1f3b4 <__assert_fail@plt+0xdeec>
   1effc:	str	r0, [sl, #8]
   1f000:	str	r9, [sl, #4]
   1f004:	lsl	r2, r5, #2
   1f008:	mov	r1, #0
   1f00c:	add	r0, r0, r8, lsl #2
   1f010:	bl	113e4 <memset@plt>
   1f014:	b	1ee74 <__assert_fail@plt+0xd9ac>
   1f018:	add	r1, sl, #4
   1f01c:	add	r0, sp, #64	; 0x40
   1f020:	bl	17780 <__assert_fail@plt+0x62b8>
   1f024:	str	r0, [sp, #76]	; 0x4c
   1f028:	cmp	r0, #0
   1f02c:	beq	1eee8 <__assert_fail@plt+0xda20>
   1f030:	b	1f06c <__assert_fail@plt+0xdba4>
   1f034:	ldr	r0, [sp, #72]	; 0x48
   1f038:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f03c:	ldr	r0, [sp, #76]	; 0x4c
   1f040:	b	1f06c <__assert_fail@plt+0xdba4>
   1f044:	ldr	r3, [sp, #76]	; 0x4c
   1f048:	cmp	r3, #0
   1f04c:	beq	1ef44 <__assert_fail@plt+0xda7c>
   1f050:	ldr	r0, [sp, #72]	; 0x48
   1f054:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f058:	ldr	r0, [sp, #76]	; 0x4c
   1f05c:	b	1f06c <__assert_fail@plt+0xdba4>
   1f060:	ldr	r0, [sp, #72]	; 0x48
   1f064:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f068:	ldr	r0, [sp, #76]	; 0x4c
   1f06c:	add	sp, sp, #84	; 0x54
   1f070:	ldrd	r4, [sp]
   1f074:	ldrd	r6, [sp, #8]
   1f078:	ldrd	r8, [sp, #16]
   1f07c:	ldrd	sl, [sp, #24]
   1f080:	add	sp, sp, #32
   1f084:	pop	{pc}		; (ldr pc, [sp], #4)
   1f088:	ldr	r5, [sp, #8]
   1f08c:	mov	r3, r5
   1f090:	ldr	r2, [sp, #12]
   1f094:	mov	r0, r6
   1f098:	bl	1b5d0 <__assert_fail@plt+0xa108>
   1f09c:	cmp	r0, #1
   1f0a0:	ble	1f30c <__assert_fail@plt+0xde44>
   1f0a4:	ldr	r3, [r6, #12]
   1f0a8:	ldr	fp, [r3, r7, lsl #2]
   1f0ac:	add	r5, r5, r0
   1f0b0:	ldr	r3, [r4, #100]	; 0x64
   1f0b4:	ldr	r1, [r3, r5, lsl #2]
   1f0b8:	str	r9, [sp, #56]	; 0x38
   1f0bc:	cmp	r1, #0
   1f0c0:	beq	1f0dc <__assert_fail@plt+0xdc14>
   1f0c4:	add	r1, r1, #4
   1f0c8:	add	r0, sp, #52	; 0x34
   1f0cc:	bl	19db4 <__assert_fail@plt+0x88ec>
   1f0d0:	str	r0, [sp, #48]	; 0x30
   1f0d4:	cmp	r0, #0
   1f0d8:	bne	1f184 <__assert_fail@plt+0xdcbc>
   1f0dc:	mov	r1, fp
   1f0e0:	add	r0, sp, #52	; 0x34
   1f0e4:	bl	1981c <__assert_fail@plt+0x8354>
   1f0e8:	cmp	r0, #0
   1f0ec:	beq	1f2e0 <__assert_fail@plt+0xde18>
   1f0f0:	ldr	fp, [r4, #100]	; 0x64
   1f0f4:	add	r2, sp, #52	; 0x34
   1f0f8:	mov	r1, r6
   1f0fc:	add	r0, sp, #48	; 0x30
   1f100:	bl	1e8f8 <__assert_fail@plt+0xd430>
   1f104:	str	r0, [fp, r5, lsl #2]
   1f108:	ldr	r3, [r4, #100]	; 0x64
   1f10c:	ldr	r3, [r3, r5, lsl #2]
   1f110:	cmp	r3, #0
   1f114:	beq	1f2ec <__assert_fail@plt+0xde24>
   1f118:	ldr	r3, [r6, #12]
   1f11c:	ldr	r1, [r3, r7, lsl #2]
   1f120:	add	r0, sp, #64	; 0x40
   1f124:	bl	1981c <__assert_fail@plt+0x8354>
   1f128:	cmp	r0, #0
   1f12c:	beq	1f318 <__assert_fail@plt+0xde50>
   1f130:	add	r8, r8, #1
   1f134:	ldr	r3, [sl, #20]
   1f138:	cmp	r8, r3
   1f13c:	bge	1f338 <__assert_fail@plt+0xde70>
   1f140:	ldr	r3, [sl, #24]
   1f144:	ldr	r1, [r3, r8, lsl #2]
   1f148:	mov	r7, r1
   1f14c:	lsl	fp, r1, #3
   1f150:	ldr	r3, [r6]
   1f154:	add	r3, r3, fp
   1f158:	ldrb	r3, [r3, #6]
   1f15c:	tst	r3, #16
   1f160:	bne	1f088 <__assert_fail@plt+0xdbc0>
   1f164:	ldr	r1, [r6]
   1f168:	ldr	r2, [sp, #8]
   1f16c:	add	r1, r1, fp
   1f170:	mov	r0, r4
   1f174:	bl	1a2c0 <__assert_fail@plt+0x8df8>
   1f178:	cmp	r0, #0
   1f17c:	beq	1f130 <__assert_fail@plt+0xdc68>
   1f180:	b	1f118 <__assert_fail@plt+0xdc50>
   1f184:	ldr	r7, [sp, #36]	; 0x24
   1f188:	ldr	r0, [sp, #60]	; 0x3c
   1f18c:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f190:	ldr	r3, [sp, #48]	; 0x30
   1f194:	str	r3, [sp, #76]	; 0x4c
   1f198:	cmp	r3, #0
   1f19c:	bne	1f328 <__assert_fail@plt+0xde60>
   1f1a0:	mov	r5, r7
   1f1a4:	ldr	r3, [sp, #68]	; 0x44
   1f1a8:	cmp	r3, #0
   1f1ac:	beq	1f1f8 <__assert_fail@plt+0xdd30>
   1f1b0:	ldr	r3, [sp, #128]	; 0x80
   1f1b4:	ldr	r2, [sp, #28]
   1f1b8:	add	r1, sp, #64	; 0x40
   1f1bc:	ldr	r0, [sp, #24]
   1f1c0:	bl	1a600 <__assert_fail@plt+0x9138>
   1f1c4:	str	r0, [sp, #76]	; 0x4c
   1f1c8:	cmp	r0, #0
   1f1cc:	bne	1f34c <__assert_fail@plt+0xde84>
   1f1d0:	ldr	r3, [sp, #128]	; 0x80
   1f1d4:	str	r3, [sp]
   1f1d8:	ldr	r3, [sp, #28]
   1f1dc:	mov	r2, r7
   1f1e0:	add	r1, sp, #64	; 0x40
   1f1e4:	mov	r0, r4
   1f1e8:	bl	1ebf0 <__assert_fail@plt+0xd728>
   1f1ec:	str	r0, [sp, #76]	; 0x4c
   1f1f0:	cmp	r0, #0
   1f1f4:	bne	1f35c <__assert_fail@plt+0xde94>
   1f1f8:	ldr	r2, [r4, #88]	; 0x58
   1f1fc:	ldr	r1, [sp, #8]
   1f200:	ldr	r0, [sp, #12]
   1f204:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1f208:	mov	r3, r0
   1f20c:	add	r2, sp, #64	; 0x40
   1f210:	ldr	r1, [sp, #24]
   1f214:	add	r0, sp, #76	; 0x4c
   1f218:	bl	18fdc <__assert_fail@plt+0x7b14>
   1f21c:	subs	sl, r0, #0
   1f220:	beq	1f36c <__assert_fail@plt+0xdea4>
   1f224:	ldr	r3, [r4, #100]	; 0x64
   1f228:	ldr	r2, [sp, #20]
   1f22c:	str	sl, [r3, r2]
   1f230:	mov	r3, #0
   1f234:	str	r3, [sp, #16]
   1f238:	ldr	r3, [sp, #124]	; 0x7c
   1f23c:	cmp	r3, r5
   1f240:	ble	1ef74 <__assert_fail@plt+0xdaac>
   1f244:	add	r7, r7, #1
   1f248:	ldr	r3, [r4, #120]	; 0x78
   1f24c:	ldr	r2, [sp, #16]
   1f250:	cmp	r2, r3
   1f254:	bgt	1ef74 <__assert_fail@plt+0xdaac>
   1f258:	sub	r3, r7, #1
   1f25c:	str	r3, [sp, #8]
   1f260:	str	r9, [sp, #68]	; 0x44
   1f264:	lsl	r3, r7, #2
   1f268:	str	r3, [sp, #20]
   1f26c:	ldr	r3, [r4, #100]	; 0x64
   1f270:	ldr	r1, [r3, r7, lsl #2]
   1f274:	cmp	r1, #0
   1f278:	beq	1f3dc <__assert_fail@plt+0xdf14>
   1f27c:	add	r1, r1, #4
   1f280:	add	r0, sp, #64	; 0x40
   1f284:	bl	19db4 <__assert_fail@plt+0x88ec>
   1f288:	str	r0, [sp, #76]	; 0x4c
   1f28c:	cmp	r0, #0
   1f290:	bne	1f060 <__assert_fail@plt+0xdb98>
   1f294:	cmp	sl, #0
   1f298:	beq	1f1a0 <__assert_fail@plt+0xdcd8>
   1f29c:	ldr	r6, [r4, #84]	; 0x54
   1f2a0:	str	r9, [sp, #48]	; 0x30
   1f2a4:	str	r9, [sp, #52]	; 0x34
   1f2a8:	str	r9, [sp, #56]	; 0x38
   1f2ac:	str	r9, [sp, #60]	; 0x3c
   1f2b0:	ldr	r3, [sl, #20]
   1f2b4:	cmp	r3, #0
   1f2b8:	ble	1f33c <__assert_fail@plt+0xde74>
   1f2bc:	ldr	r3, [sl, #24]
   1f2c0:	ldr	r1, [r3]
   1f2c4:	lsl	fp, r1, #3
   1f2c8:	ldr	r3, [r6]
   1f2cc:	add	r3, r3, fp
   1f2d0:	mov	r8, #0
   1f2d4:	str	r7, [sp, #36]	; 0x24
   1f2d8:	mov	r7, r1
   1f2dc:	b	1f158 <__assert_fail@plt+0xdc90>
   1f2e0:	ldr	r0, [sp, #60]	; 0x3c
   1f2e4:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f2e8:	b	1f320 <__assert_fail@plt+0xde58>
   1f2ec:	ldr	r3, [sp, #48]	; 0x30
   1f2f0:	cmp	r3, #0
   1f2f4:	beq	1f118 <__assert_fail@plt+0xdc50>
   1f2f8:	ldr	r7, [sp, #36]	; 0x24
   1f2fc:	ldr	r0, [sp, #60]	; 0x3c
   1f300:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f304:	ldr	r3, [sp, #48]	; 0x30
   1f308:	b	1f194 <__assert_fail@plt+0xdccc>
   1f30c:	cmp	r0, #0
   1f310:	beq	1f164 <__assert_fail@plt+0xdc9c>
   1f314:	b	1f118 <__assert_fail@plt+0xdc50>
   1f318:	ldr	r0, [sp, #60]	; 0x3c
   1f31c:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f320:	mov	r3, #12
   1f324:	str	r3, [sp, #76]	; 0x4c
   1f328:	ldr	r0, [sp, #72]	; 0x48
   1f32c:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f330:	ldr	r0, [sp, #76]	; 0x4c
   1f334:	b	1f06c <__assert_fail@plt+0xdba4>
   1f338:	ldr	r7, [sp, #36]	; 0x24
   1f33c:	ldr	r0, [sp, #60]	; 0x3c
   1f340:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f344:	str	r9, [sp, #76]	; 0x4c
   1f348:	b	1f1a0 <__assert_fail@plt+0xdcd8>
   1f34c:	ldr	r0, [sp, #72]	; 0x48
   1f350:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f354:	ldr	r0, [sp, #76]	; 0x4c
   1f358:	b	1f06c <__assert_fail@plt+0xdba4>
   1f35c:	ldr	r0, [sp, #72]	; 0x48
   1f360:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f364:	ldr	r0, [sp, #76]	; 0x4c
   1f368:	b	1f06c <__assert_fail@plt+0xdba4>
   1f36c:	ldr	r3, [sp, #76]	; 0x4c
   1f370:	cmp	r3, #0
   1f374:	bne	1f394 <__assert_fail@plt+0xdecc>
   1f378:	ldr	r3, [r4, #100]	; 0x64
   1f37c:	ldr	r2, [sp, #20]
   1f380:	str	r9, [r3, r2]
   1f384:	ldr	r3, [sp, #16]
   1f388:	add	r3, r3, #1
   1f38c:	str	r3, [sp, #16]
   1f390:	b	1f238 <__assert_fail@plt+0xdd70>
   1f394:	ldr	r0, [sp, #72]	; 0x48
   1f398:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f39c:	ldr	r0, [sp, #76]	; 0x4c
   1f3a0:	b	1f06c <__assert_fail@plt+0xdba4>
   1f3a4:	mov	r0, #12
   1f3a8:	b	1f06c <__assert_fail@plt+0xdba4>
   1f3ac:	mov	r0, #12
   1f3b0:	b	1f06c <__assert_fail@plt+0xdba4>
   1f3b4:	mov	r0, #12
   1f3b8:	b	1f06c <__assert_fail@plt+0xdba4>
   1f3bc:	ldr	r3, [sp, #32]
   1f3c0:	str	r5, [r3]
   1f3c4:	ldr	r3, [sp, #40]	; 0x28
   1f3c8:	str	r3, [r4, #100]	; 0x64
   1f3cc:	ldr	r3, [sp, #44]	; 0x2c
   1f3d0:	str	r3, [r4, #40]	; 0x28
   1f3d4:	mov	r0, #1
   1f3d8:	b	1f06c <__assert_fail@plt+0xdba4>
   1f3dc:	cmp	sl, #0
   1f3e0:	bne	1f29c <__assert_fail@plt+0xddd4>
   1f3e4:	mov	r5, r7
   1f3e8:	b	1f1f8 <__assert_fail@plt+0xdd30>
   1f3ec:	ldr	r3, [r4, #100]	; 0x64
   1f3f0:	str	r3, [sp, #40]	; 0x28
   1f3f4:	ldr	r3, [r4, #40]	; 0x28
   1f3f8:	str	r3, [sp, #44]	; 0x2c
   1f3fc:	ldr	r3, [sp, #32]
   1f400:	ldr	r3, [r3, #8]
   1f404:	str	r3, [r4, #100]	; 0x64
   1f408:	str	r6, [r4, #40]	; 0x28
   1f40c:	str	r4, [sp, #12]
   1f410:	ldr	r2, [r4, #88]	; 0x58
   1f414:	sub	r1, r6, #1
   1f418:	mov	r0, r4
   1f41c:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1f420:	mov	r8, r0
   1f424:	mov	r1, r7
   1f428:	add	r0, sp, #64	; 0x40
   1f42c:	bl	1725c <__assert_fail@plt+0x5d94>
   1f430:	str	r0, [sp, #76]	; 0x4c
   1f434:	cmp	r0, #0
   1f438:	bne	1f06c <__assert_fail@plt+0xdba4>
   1f43c:	ldr	r3, [sp, #128]	; 0x80
   1f440:	ldr	r2, [sp, #28]
   1f444:	add	r1, sp, #64	; 0x40
   1f448:	ldr	r0, [sp, #24]
   1f44c:	bl	1a600 <__assert_fail@plt+0x9138>
   1f450:	str	r0, [sp, #76]	; 0x4c
   1f454:	cmp	r0, #0
   1f458:	moveq	r5, r6
   1f45c:	beq	1eef4 <__assert_fail@plt+0xda2c>
   1f460:	ldr	r0, [sp, #72]	; 0x48
   1f464:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f468:	ldr	r0, [sp, #76]	; 0x4c
   1f46c:	b	1f06c <__assert_fail@plt+0xdba4>
   1f470:	mov	r3, #0
   1f474:	str	r3, [sp, #64]	; 0x40
   1f478:	str	r3, [sp, #68]	; 0x44
   1f47c:	str	r3, [sp, #72]	; 0x48
   1f480:	b	1ef4c <__assert_fail@plt+0xda84>
   1f484:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f488:	strd	r6, [sp, #8]
   1f48c:	strd	r8, [sp, #16]
   1f490:	str	sl, [sp, #24]
   1f494:	str	lr, [sp, #28]
   1f498:	sub	sp, sp, #16
   1f49c:	mov	r4, r0
   1f4a0:	mov	r8, r1
   1f4a4:	mov	r6, r2
   1f4a8:	mov	r9, r3
   1f4ac:	ldr	r5, [sp, #48]	; 0x30
   1f4b0:	mov	r1, r2
   1f4b4:	mov	r3, #8
   1f4b8:	str	r3, [sp, #8]
   1f4bc:	str	r5, [sp, #4]
   1f4c0:	str	r9, [sp]
   1f4c4:	ldr	r3, [r2, #4]
   1f4c8:	ldr	r2, [r1], #8
   1f4cc:	bl	1ee14 <__assert_fail@plt+0xd94c>
   1f4d0:	cmp	r0, #0
   1f4d4:	beq	1f4f4 <__assert_fail@plt+0xe02c>
   1f4d8:	add	sp, sp, #16
   1f4dc:	ldrd	r4, [sp]
   1f4e0:	ldrd	r6, [sp, #8]
   1f4e4:	ldrd	r8, [sp, #16]
   1f4e8:	ldr	sl, [sp, #24]
   1f4ec:	add	sp, sp, #28
   1f4f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4f4:	ldr	sl, [r8]
   1f4f8:	ldr	r7, [r6, #4]
   1f4fc:	ldr	r1, [r4, #112]	; 0x70
   1f500:	ldr	r3, [r4, #108]	; 0x6c
   1f504:	cmp	r3, r1
   1f508:	bge	1f5f4 <__assert_fail@plt+0xe12c>
   1f50c:	ldr	r3, [r4, #108]	; 0x6c
   1f510:	cmp	r3, #0
   1f514:	ble	1f53c <__assert_fail@plt+0xe074>
   1f518:	add	r3, r3, r3, lsl #1
   1f51c:	lsl	r3, r3, #3
   1f520:	sub	r3, r3, #24
   1f524:	ldr	r2, [r4, #116]	; 0x74
   1f528:	add	r3, r2, r3
   1f52c:	ldr	r2, [r3, #4]
   1f530:	cmp	r5, r2
   1f534:	moveq	r2, #1
   1f538:	strbeq	r2, [r3, #20]
   1f53c:	ldr	r3, [r4, #108]	; 0x6c
   1f540:	ldr	r2, [r4, #116]	; 0x74
   1f544:	add	r3, r3, r3, lsl #1
   1f548:	str	r9, [r2, r3, lsl #3]
   1f54c:	ldr	r3, [r4, #108]	; 0x6c
   1f550:	ldr	r2, [r4, #116]	; 0x74
   1f554:	add	r3, r3, r3, lsl #1
   1f558:	add	r3, r2, r3, lsl #3
   1f55c:	str	r5, [r3, #4]
   1f560:	ldr	r3, [r4, #108]	; 0x6c
   1f564:	ldr	r2, [r4, #116]	; 0x74
   1f568:	add	r3, r3, r3, lsl #1
   1f56c:	add	r3, r2, r3, lsl #3
   1f570:	str	sl, [r3, #8]
   1f574:	ldr	r3, [r4, #108]	; 0x6c
   1f578:	ldr	r2, [r4, #116]	; 0x74
   1f57c:	add	r3, r3, r3, lsl #1
   1f580:	add	r3, r2, r3, lsl #3
   1f584:	str	r7, [r3, #12]
   1f588:	ldr	r3, [r4, #108]	; 0x6c
   1f58c:	ldr	r2, [r4, #116]	; 0x74
   1f590:	add	r3, r3, r3, lsl #1
   1f594:	add	r3, r2, r3, lsl #3
   1f598:	cmp	sl, r7
   1f59c:	movne	r2, #0
   1f5a0:	mvneq	r2, #0
   1f5a4:	str	r2, [r3, #16]
   1f5a8:	ldr	r2, [r4, #116]	; 0x74
   1f5ac:	ldr	r3, [r4, #108]	; 0x6c
   1f5b0:	add	r1, r3, #1
   1f5b4:	str	r1, [r4, #108]	; 0x6c
   1f5b8:	add	r3, r3, r3, lsl #1
   1f5bc:	add	r3, r2, r3, lsl #3
   1f5c0:	mov	r2, #0
   1f5c4:	strb	r2, [r3, #20]
   1f5c8:	sub	r7, r7, sl
   1f5cc:	ldr	r3, [r4, #120]	; 0x78
   1f5d0:	cmp	r3, r7
   1f5d4:	strlt	r7, [r4, #120]	; 0x78
   1f5d8:	ldr	r1, [r6, #4]
   1f5dc:	add	r5, r5, r1
   1f5e0:	ldr	r1, [r8]
   1f5e4:	sub	r1, r5, r1
   1f5e8:	mov	r0, r4
   1f5ec:	bl	1a564 <__assert_fail@plt+0x909c>
   1f5f0:	b	1f4d8 <__assert_fail@plt+0xe010>
   1f5f4:	add	r1, r1, r1, lsl #1
   1f5f8:	lsl	r1, r1, #4
   1f5fc:	ldr	r0, [r4, #116]	; 0x74
   1f600:	bl	24844 <__assert_fail@plt+0x1337c>
   1f604:	cmp	r0, #0
   1f608:	beq	1f640 <__assert_fail@plt+0xe178>
   1f60c:	str	r0, [r4, #116]	; 0x74
   1f610:	ldr	r2, [r4, #112]	; 0x70
   1f614:	add	r2, r2, r2, lsl #1
   1f618:	ldr	r3, [r4, #108]	; 0x6c
   1f61c:	add	r3, r3, r3, lsl #1
   1f620:	lsl	r2, r2, #3
   1f624:	mov	r1, #0
   1f628:	add	r0, r0, r3, lsl #3
   1f62c:	bl	113e4 <memset@plt>
   1f630:	ldr	r3, [r4, #112]	; 0x70
   1f634:	lsl	r3, r3, #1
   1f638:	str	r3, [r4, #112]	; 0x70
   1f63c:	b	1f50c <__assert_fail@plt+0xe044>
   1f640:	ldr	r0, [r4, #116]	; 0x74
   1f644:	bl	135a4 <__assert_fail@plt+0x20dc>
   1f648:	mov	r0, #12
   1f64c:	b	1f4d8 <__assert_fail@plt+0xe010>
   1f650:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f654:	strd	r6, [sp, #8]
   1f658:	strd	r8, [sp, #16]
   1f65c:	strd	sl, [sp, #24]
   1f660:	str	lr, [sp, #32]
   1f664:	sub	sp, sp, #84	; 0x54
   1f668:	ldr	fp, [r0, #84]	; 0x54
   1f66c:	ldr	r2, [r0, #40]	; 0x28
   1f670:	str	r2, [sp, #28]
   1f674:	ldr	r3, [r1, #4]
   1f678:	cmp	r3, #0
   1f67c:	ble	1fd38 <__assert_fail@plt+0xe870>
   1f680:	mov	sl, r0
   1f684:	lsl	r3, r2, #2
   1f688:	str	r3, [sp, #40]	; 0x28
   1f68c:	mov	r3, #0
   1f690:	str	r3, [sp, #20]
   1f694:	mov	r7, r1
   1f698:	b	1f6e8 <__assert_fail@plt+0xe220>
   1f69c:	tst	r3, #8
   1f6a0:	beq	1f6ac <__assert_fail@plt+0xe1e4>
   1f6a4:	tst	r0, #1
   1f6a8:	bne	1f6cc <__assert_fail@plt+0xe204>
   1f6ac:	tst	r3, #32
   1f6b0:	beq	1f6bc <__assert_fail@plt+0xe1f4>
   1f6b4:	tst	r0, #2
   1f6b8:	beq	1f6cc <__assert_fail@plt+0xe204>
   1f6bc:	tst	r3, #128	; 0x80
   1f6c0:	beq	1f754 <__assert_fail@plt+0xe28c>
   1f6c4:	tst	r0, #8
   1f6c8:	bne	1f754 <__assert_fail@plt+0xe28c>
   1f6cc:	ldr	r3, [sp, #20]
   1f6d0:	add	r3, r3, #1
   1f6d4:	mov	r2, r3
   1f6d8:	str	r3, [sp, #20]
   1f6dc:	ldr	r3, [r7, #4]
   1f6e0:	cmp	r3, r2
   1f6e4:	ble	1fd38 <__assert_fail@plt+0xe870>
   1f6e8:	ldr	r3, [r7, #8]
   1f6ec:	ldr	r2, [sp, #20]
   1f6f0:	ldr	r8, [r3, r2, lsl #2]
   1f6f4:	ldr	r4, [fp]
   1f6f8:	add	r4, r4, r8, lsl #3
   1f6fc:	ldrb	r3, [r4, #4]
   1f700:	cmp	r3, #4
   1f704:	bne	1f6cc <__assert_fail@plt+0xe204>
   1f708:	ldr	r2, [r4, #4]
   1f70c:	mov	r3, #65280	; 0xff00
   1f710:	movt	r3, #3
   1f714:	and	r3, r3, r2
   1f718:	cmp	r3, #0
   1f71c:	beq	1f754 <__assert_fail@plt+0xe28c>
   1f720:	ldr	r2, [sl, #88]	; 0x58
   1f724:	ldr	r1, [sp, #28]
   1f728:	mov	r0, sl
   1f72c:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1f730:	ldr	r3, [r4, #4]
   1f734:	ubfx	r3, r3, #8, #10
   1f738:	tst	r3, #4
   1f73c:	beq	1f69c <__assert_fail@plt+0xe1d4>
   1f740:	tst	r0, #1
   1f744:	beq	1f6cc <__assert_fail@plt+0xe204>
   1f748:	tst	r3, #8
   1f74c:	beq	1f6ac <__assert_fail@plt+0xe1e4>
   1f750:	b	1f6cc <__assert_fail@plt+0xe204>
   1f754:	ldr	r9, [sl, #108]	; 0x6c
   1f758:	ldr	r1, [sp, #28]
   1f75c:	mov	r0, sl
   1f760:	bl	16b8c <__assert_fail@plt+0x56c4>
   1f764:	cmn	r0, #1
   1f768:	beq	1f798 <__assert_fail@plt+0xe2d0>
   1f76c:	add	r0, r0, #1
   1f770:	add	r0, r0, r0, lsl #1
   1f774:	ldr	r3, [sl, #116]	; 0x74
   1f778:	add	r3, r3, r0, lsl #3
   1f77c:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1f780:	cmp	r8, r2
   1f784:	beq	1fb08 <__assert_fail@plt+0xe640>
   1f788:	add	r3, r3, #24
   1f78c:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1f790:	cmp	r2, #0
   1f794:	bne	1f77c <__assert_fail@plt+0xe2b4>
   1f798:	ldr	r3, [sl, #84]	; 0x54
   1f79c:	str	r3, [sp, #44]	; 0x2c
   1f7a0:	ldr	r3, [r3]
   1f7a4:	ldr	r3, [r3, r8, lsl #3]
   1f7a8:	str	r3, [sp, #48]	; 0x30
   1f7ac:	ldr	r3, [sl, #124]	; 0x7c
   1f7b0:	cmp	r3, #0
   1f7b4:	ble	1fb08 <__assert_fail@plt+0xe640>
   1f7b8:	ldr	r3, [sl, #4]
   1f7bc:	mov	r2, #0
   1f7c0:	str	r2, [sp, #32]
   1f7c4:	str	fp, [sp, #52]	; 0x34
   1f7c8:	str	r8, [sp, #36]	; 0x24
   1f7cc:	str	r9, [sp, #56]	; 0x38
   1f7d0:	mov	fp, r3
   1f7d4:	str	r7, [sp, #60]	; 0x3c
   1f7d8:	b	1f8b0 <__assert_fail@plt+0xe3e8>
   1f7dc:	mov	r2, r5
   1f7e0:	ldr	r3, [sp, #24]
   1f7e4:	add	r1, fp, r3
   1f7e8:	add	r0, fp, r7
   1f7ec:	bl	11240 <memcmp@plt>
   1f7f0:	cmp	r0, #0
   1f7f4:	bne	1f888 <__assert_fail@plt+0xe3c0>
   1f7f8:	add	r7, r7, r5
   1f7fc:	ldr	r3, [sp, #28]
   1f800:	str	r3, [sp]
   1f804:	ldr	r3, [sp, #36]	; 0x24
   1f808:	mov	r2, r8
   1f80c:	mov	r1, r4
   1f810:	mov	r0, sl
   1f814:	bl	1f484 <__assert_fail@plt+0xdfbc>
   1f818:	ldr	fp, [sl, #4]
   1f81c:	cmp	r0, #1
   1f820:	bhi	1fb3c <__assert_fail@plt+0xe674>
   1f824:	add	r6, r6, #1
   1f828:	str	r9, [sp, #24]
   1f82c:	ldr	r3, [r4, #16]
   1f830:	cmp	r6, r3
   1f834:	bge	1f8fc <__assert_fail@plt+0xe434>
   1f838:	ldr	r3, [r4, #20]
   1f83c:	ldr	r8, [r3, r6, lsl #2]
   1f840:	ldr	r9, [r8, #4]
   1f844:	ldr	r3, [sp, #24]
   1f848:	sub	r5, r9, r3
   1f84c:	cmp	r5, #0
   1f850:	ble	1f7f8 <__assert_fail@plt+0xe330>
   1f854:	add	r1, r5, r7
   1f858:	ldr	r3, [sl, #28]
   1f85c:	cmp	r1, r3
   1f860:	ble	1f7dc <__assert_fail@plt+0xe314>
   1f864:	ldr	r3, [sl, #48]	; 0x30
   1f868:	cmp	r1, r3
   1f86c:	bgt	1f888 <__assert_fail@plt+0xe3c0>
   1f870:	mov	r0, sl
   1f874:	bl	1a564 <__assert_fail@plt+0x909c>
   1f878:	cmp	r0, #0
   1f87c:	bne	1fd48 <__assert_fail@plt+0xe880>
   1f880:	ldr	fp, [sl, #4]
   1f884:	b	1f7dc <__assert_fail@plt+0xe314>
   1f888:	ldr	r3, [r4, #16]
   1f88c:	cmp	r3, r6
   1f890:	ble	1f8f8 <__assert_fail@plt+0xe430>
   1f894:	ldr	r3, [sp, #32]
   1f898:	add	r3, r3, #1
   1f89c:	mov	r2, r3
   1f8a0:	str	r3, [sp, #32]
   1f8a4:	ldr	r3, [sl, #124]	; 0x7c
   1f8a8:	cmp	r2, r3
   1f8ac:	bge	1faf8 <__assert_fail@plt+0xe630>
   1f8b0:	ldr	r3, [sl, #132]	; 0x84
   1f8b4:	ldr	r2, [sp, #32]
   1f8b8:	ldr	r4, [r3, r2, lsl #2]
   1f8bc:	ldr	r2, [r4, #4]
   1f8c0:	ldr	r3, [sp, #44]	; 0x2c
   1f8c4:	ldr	r3, [r3]
   1f8c8:	ldr	r3, [r3, r2, lsl #3]
   1f8cc:	ldr	r2, [sp, #48]	; 0x30
   1f8d0:	cmp	r2, r3
   1f8d4:	bne	1f894 <__assert_fail@plt+0xe3cc>
   1f8d8:	ldr	r3, [r4]
   1f8dc:	str	r3, [sp, #24]
   1f8e0:	ldr	r3, [r4, #16]
   1f8e4:	cmp	r3, #0
   1f8e8:	ble	1f91c <__assert_fail@plt+0xe454>
   1f8ec:	ldr	r7, [sp, #28]
   1f8f0:	mov	r6, #0
   1f8f4:	b	1f838 <__assert_fail@plt+0xe370>
   1f8f8:	ldr	r9, [sp, #24]
   1f8fc:	cmp	r6, #0
   1f900:	addgt	r9, r9, #1
   1f904:	ldr	r3, [sp, #28]
   1f908:	cmp	r3, r9
   1f90c:	blt	1f894 <__assert_fail@plt+0xe3cc>
   1f910:	mov	r8, #1
   1f914:	ldr	r6, [sp, #48]	; 0x30
   1f918:	b	1fa3c <__assert_fail@plt+0xe574>
   1f91c:	ldr	r7, [sp, #28]
   1f920:	ldr	r9, [sp, #24]
   1f924:	b	1f904 <__assert_fail@plt+0xe43c>
   1f928:	ldr	r3, [sl, #48]	; 0x30
   1f92c:	cmp	r3, r7
   1f930:	ble	1f894 <__assert_fail@plt+0xe3cc>
   1f934:	add	r1, r7, #1
   1f938:	mov	r0, sl
   1f93c:	bl	17fb8 <__assert_fail@plt+0x6af0>
   1f940:	cmp	r0, #0
   1f944:	bne	1fd48 <__assert_fail@plt+0xe880>
   1f948:	ldr	fp, [sl, #4]
   1f94c:	b	1fa58 <__assert_fail@plt+0xe590>
   1f950:	add	r3, r3, #1
   1f954:	cmp	ip, r3
   1f958:	beq	1fa2c <__assert_fail@plt+0xe564>
   1f95c:	ldr	r5, [r2, #4]!
   1f960:	add	r1, r0, r5, lsl #3
   1f964:	ldrb	r1, [r1, #4]
   1f968:	cmp	r1, #9
   1f96c:	bne	1f950 <__assert_fail@plt+0xe488>
   1f970:	ldr	r1, [r0, r5, lsl #3]
   1f974:	cmp	r6, r1
   1f978:	bne	1f950 <__assert_fail@plt+0xe488>
   1f97c:	cmn	r5, #1
   1f980:	beq	1fa2c <__assert_fail@plt+0xe564>
   1f984:	ldr	r3, [r4, #8]
   1f988:	cmp	r3, #0
   1f98c:	beq	1faa8 <__assert_fail@plt+0xe5e0>
   1f990:	ldr	r3, [r4]
   1f994:	ldr	r2, [r4, #4]
   1f998:	ldr	r1, [r4, #8]
   1f99c:	mov	r0, #9
   1f9a0:	str	r0, [sp, #8]
   1f9a4:	str	r9, [sp, #4]
   1f9a8:	str	r5, [sp]
   1f9ac:	mov	r0, sl
   1f9b0:	bl	1ee14 <__assert_fail@plt+0xd94c>
   1f9b4:	cmp	r0, #1
   1f9b8:	beq	1fa2c <__assert_fail@plt+0xe564>
   1f9bc:	cmp	r0, #0
   1f9c0:	bne	1fd48 <__assert_fail@plt+0xe880>
   1f9c4:	ldr	r3, [r4, #12]
   1f9c8:	ldr	r2, [r4, #16]
   1f9cc:	cmp	r2, r3
   1f9d0:	beq	1fad0 <__assert_fail@plt+0xe608>
   1f9d4:	mov	r1, #20
   1f9d8:	mov	r0, r8
   1f9dc:	bl	24794 <__assert_fail@plt+0x132cc>
   1f9e0:	subs	r2, r0, #0
   1f9e4:	beq	1fd44 <__assert_fail@plt+0xe87c>
   1f9e8:	ldr	r1, [r4, #16]
   1f9ec:	ldr	r3, [r4, #20]
   1f9f0:	str	r2, [r3, r1, lsl #2]
   1f9f4:	str	r5, [r2]
   1f9f8:	str	r9, [r2, #4]
   1f9fc:	ldr	r3, [r4, #16]
   1fa00:	add	r3, r3, #1
   1fa04:	str	r3, [r4, #16]
   1fa08:	ldr	r3, [sp, #28]
   1fa0c:	str	r3, [sp]
   1fa10:	ldr	r3, [sp, #36]	; 0x24
   1fa14:	mov	r1, r4
   1fa18:	mov	r0, sl
   1fa1c:	bl	1f484 <__assert_fail@plt+0xdfbc>
   1fa20:	ldr	fp, [sl, #4]
   1fa24:	cmp	r0, #1
   1fa28:	bhi	1fb3c <__assert_fail@plt+0xe674>
   1fa2c:	add	r9, r9, #1
   1fa30:	ldr	r3, [sp, #28]
   1fa34:	cmp	r3, r9
   1fa38:	blt	1f894 <__assert_fail@plt+0xe3cc>
   1fa3c:	ldr	r3, [r4]
   1fa40:	sub	r3, r9, r3
   1fa44:	cmp	r3, #0
   1fa48:	ble	1fa74 <__assert_fail@plt+0xe5ac>
   1fa4c:	ldr	r3, [sl, #28]
   1fa50:	cmp	r3, r7
   1fa54:	ble	1f928 <__assert_fail@plt+0xe460>
   1fa58:	add	r1, r7, #1
   1fa5c:	add	r3, fp, r9
   1fa60:	ldrb	r2, [fp, r7]
   1fa64:	ldrb	r3, [r3, #-1]
   1fa68:	cmp	r2, r3
   1fa6c:	bne	1f894 <__assert_fail@plt+0xe3cc>
   1fa70:	mov	r7, r1
   1fa74:	ldr	r3, [sl, #100]	; 0x64
   1fa78:	ldr	r3, [r3, r9, lsl #2]
   1fa7c:	cmp	r3, #0
   1fa80:	beq	1fa2c <__assert_fail@plt+0xe564>
   1fa84:	ldr	ip, [r3, #8]
   1fa88:	cmp	ip, #0
   1fa8c:	ble	1fa2c <__assert_fail@plt+0xe564>
   1fa90:	ldr	r2, [sp, #44]	; 0x2c
   1fa94:	ldr	r0, [r2]
   1fa98:	ldr	r2, [r3, #12]
   1fa9c:	sub	r2, r2, #4
   1faa0:	mov	r3, #0
   1faa4:	b	1f95c <__assert_fail@plt+0xe494>
   1faa8:	ldr	r1, [r4]
   1faac:	sub	r1, r9, r1
   1fab0:	add	r1, r1, #1
   1fab4:	mov	r0, #12
   1fab8:	bl	24794 <__assert_fail@plt+0x132cc>
   1fabc:	str	r0, [r4, #8]
   1fac0:	cmp	r0, #0
   1fac4:	bne	1f990 <__assert_fail@plt+0xe4c8>
   1fac8:	mov	r0, #12
   1facc:	b	1fd48 <__assert_fail@plt+0xe880>
   1fad0:	lsl	r3, r3, #1
   1fad4:	add	fp, r3, #1
   1fad8:	lsl	r1, fp, #2
   1fadc:	ldr	r0, [r4, #20]
   1fae0:	bl	24844 <__assert_fail@plt+0x1337c>
   1fae4:	cmp	r0, #0
   1fae8:	beq	1fd44 <__assert_fail@plt+0xe87c>
   1faec:	str	r0, [r4, #20]
   1faf0:	str	fp, [r4, #12]
   1faf4:	b	1f9d4 <__assert_fail@plt+0xe50c>
   1faf8:	ldr	fp, [sp, #52]	; 0x34
   1fafc:	ldr	r8, [sp, #36]	; 0x24
   1fb00:	ldr	r9, [sp, #56]	; 0x38
   1fb04:	ldr	r7, [sp, #60]	; 0x3c
   1fb08:	mov	r3, #0
   1fb0c:	str	r3, [sp, #76]	; 0x4c
   1fb10:	lsl	r3, r8, #2
   1fb14:	str	r3, [sp, #44]	; 0x2c
   1fb18:	ldr	r3, [sl, #108]	; 0x6c
   1fb1c:	cmp	r3, r9
   1fb20:	ble	1f6cc <__assert_fail@plt+0xe204>
   1fb24:	add	r3, r8, r8, lsl #1
   1fb28:	lsl	r3, r3, #2
   1fb2c:	str	r3, [sp, #48]	; 0x30
   1fb30:	ldr	r6, [sp, #28]
   1fb34:	str	r7, [sp, #52]	; 0x34
   1fb38:	b	1fbe4 <__assert_fail@plt+0xe71c>
   1fb3c:	str	r0, [sp, #76]	; 0x4c
   1fb40:	ldr	r0, [sp, #76]	; 0x4c
   1fb44:	add	sp, sp, #84	; 0x54
   1fb48:	ldrd	r4, [sp]
   1fb4c:	ldrd	r6, [sp, #8]
   1fb50:	ldrd	r8, [sp, #16]
   1fb54:	ldrd	sl, [sp, #24]
   1fb58:	add	sp, sp, #32
   1fb5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb60:	ldr	r2, [fp, #12]
   1fb64:	ldr	r1, [sp, #44]	; 0x2c
   1fb68:	ldr	r2, [r2, r1]
   1fb6c:	add	r2, r2, r2, lsl #1
   1fb70:	ldr	r1, [fp, #24]
   1fb74:	add	r2, r1, r2, lsl #2
   1fb78:	str	r2, [sp, #24]
   1fb7c:	b	1fc3c <__assert_fail@plt+0xe774>
   1fb80:	ldr	r3, [sp, #32]
   1fb84:	ldr	r2, [sp, #24]
   1fb88:	mov	r1, fp
   1fb8c:	add	r0, sp, #76	; 0x4c
   1fb90:	bl	18fdc <__assert_fail@plt+0x7b14>
   1fb94:	str	r0, [r5, r4, lsl #2]
   1fb98:	ldr	r3, [sl, #100]	; 0x64
   1fb9c:	ldr	r3, [r3, r4, lsl #2]
   1fba0:	cmp	r3, #0
   1fba4:	bne	1fcd0 <__assert_fail@plt+0xe808>
   1fba8:	ldr	r3, [sp, #76]	; 0x4c
   1fbac:	cmp	r3, #0
   1fbb0:	beq	1fcd0 <__assert_fail@plt+0xe808>
   1fbb4:	b	1fb40 <__assert_fail@plt+0xe678>
   1fbb8:	ldr	r0, [sp, #72]	; 0x48
   1fbbc:	bl	135a4 <__assert_fail@plt+0x20dc>
   1fbc0:	b	1fb40 <__assert_fail@plt+0xe678>
   1fbc4:	ldr	r3, [sp, #76]	; 0x4c
   1fbc8:	cmp	r3, #0
   1fbcc:	beq	1fcd0 <__assert_fail@plt+0xe808>
   1fbd0:	b	1fb40 <__assert_fail@plt+0xe678>
   1fbd4:	add	r9, r9, #1
   1fbd8:	ldr	r3, [sl, #108]	; 0x6c
   1fbdc:	cmp	r3, r9
   1fbe0:	ble	1fd30 <__assert_fail@plt+0xe868>
   1fbe4:	add	r3, r9, r9, lsl #1
   1fbe8:	ldr	r2, [sl, #116]	; 0x74
   1fbec:	add	r1, r2, r3, lsl #3
   1fbf0:	ldr	r3, [r2, r3, lsl #3]
   1fbf4:	cmp	r3, r8
   1fbf8:	bne	1fbd4 <__assert_fail@plt+0xe70c>
   1fbfc:	ldr	r3, [r1, #4]
   1fc00:	cmp	r3, r6
   1fc04:	bne	1fbd4 <__assert_fail@plt+0xe70c>
   1fc08:	ldr	r3, [r1, #12]
   1fc0c:	ldr	r4, [r1, #8]
   1fc10:	subs	r7, r3, r4
   1fc14:	bne	1fb60 <__assert_fail@plt+0xe698>
   1fc18:	ldr	r2, [fp, #20]
   1fc1c:	ldr	r1, [sp, #48]	; 0x30
   1fc20:	add	r2, r2, r1
   1fc24:	ldr	r2, [r2, #8]
   1fc28:	ldr	r2, [r2]
   1fc2c:	add	r2, r2, r2, lsl #1
   1fc30:	ldr	r1, [fp, #24]
   1fc34:	add	r2, r1, r2, lsl #2
   1fc38:	str	r2, [sp, #24]
   1fc3c:	add	r3, r3, r6
   1fc40:	sub	r4, r3, r4
   1fc44:	ldr	r2, [sl, #88]	; 0x58
   1fc48:	sub	r1, r4, #1
   1fc4c:	mov	r0, sl
   1fc50:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1fc54:	str	r0, [sp, #32]
   1fc58:	ldr	r5, [sl, #100]	; 0x64
   1fc5c:	ldr	r3, [r5, r4, lsl #2]
   1fc60:	ldr	r2, [sp, #40]	; 0x28
   1fc64:	ldr	r2, [r5, r2]
   1fc68:	cmp	r2, #0
   1fc6c:	ldrne	r2, [r2, #8]
   1fc70:	moveq	r2, #0
   1fc74:	str	r2, [sp, #36]	; 0x24
   1fc78:	cmp	r3, #0
   1fc7c:	beq	1fb80 <__assert_fail@plt+0xe6b8>
   1fc80:	ldr	r2, [sp, #24]
   1fc84:	ldr	r1, [r3, #40]	; 0x28
   1fc88:	add	r0, sp, #64	; 0x40
   1fc8c:	bl	17808 <__assert_fail@plt+0x6340>
   1fc90:	str	r0, [sp, #76]	; 0x4c
   1fc94:	cmp	r0, #0
   1fc98:	bne	1fbb8 <__assert_fail@plt+0xe6f0>
   1fc9c:	ldr	r5, [sl, #100]	; 0x64
   1fca0:	ldr	r3, [sp, #32]
   1fca4:	add	r2, sp, #64	; 0x40
   1fca8:	mov	r1, fp
   1fcac:	add	r0, sp, #76	; 0x4c
   1fcb0:	bl	18fdc <__assert_fail@plt+0x7b14>
   1fcb4:	str	r0, [r5, r4, lsl #2]
   1fcb8:	ldr	r0, [sp, #72]	; 0x48
   1fcbc:	bl	135a4 <__assert_fail@plt+0x20dc>
   1fcc0:	ldr	r3, [sl, #100]	; 0x64
   1fcc4:	ldr	r3, [r3, r4, lsl #2]
   1fcc8:	cmp	r3, #0
   1fccc:	beq	1fbc4 <__assert_fail@plt+0xe6fc>
   1fcd0:	cmp	r7, #0
   1fcd4:	bne	1fbd4 <__assert_fail@plt+0xe70c>
   1fcd8:	ldr	r3, [sl, #100]	; 0x64
   1fcdc:	ldr	r2, [sp, #40]	; 0x28
   1fce0:	ldr	r3, [r3, r2]
   1fce4:	ldr	r3, [r3, #8]
   1fce8:	ldr	r2, [sp, #36]	; 0x24
   1fcec:	cmp	r3, r2
   1fcf0:	ble	1fbd4 <__assert_fail@plt+0xe70c>
   1fcf4:	mov	r2, r6
   1fcf8:	ldr	r4, [sp, #24]
   1fcfc:	mov	r1, r4
   1fd00:	mov	r0, sl
   1fd04:	bl	1a430 <__assert_fail@plt+0x8f68>
   1fd08:	str	r0, [sp, #76]	; 0x4c
   1fd0c:	cmp	r0, #0
   1fd10:	bne	1fb40 <__assert_fail@plt+0xe678>
   1fd14:	mov	r1, r4
   1fd18:	mov	r0, sl
   1fd1c:	bl	1f650 <__assert_fail@plt+0xe188>
   1fd20:	str	r0, [sp, #76]	; 0x4c
   1fd24:	cmp	r0, #0
   1fd28:	beq	1fbd4 <__assert_fail@plt+0xe70c>
   1fd2c:	b	1fb40 <__assert_fail@plt+0xe678>
   1fd30:	ldr	r7, [sp, #52]	; 0x34
   1fd34:	b	1f6cc <__assert_fail@plt+0xe204>
   1fd38:	mov	r3, #0
   1fd3c:	str	r3, [sp, #76]	; 0x4c
   1fd40:	b	1fb40 <__assert_fail@plt+0xe678>
   1fd44:	mov	r0, #12
   1fd48:	str	r0, [sp, #76]	; 0x4c
   1fd4c:	b	1fb40 <__assert_fail@plt+0xe678>
   1fd50:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1fd54:	strd	r6, [sp, #8]
   1fd58:	strd	r8, [sp, #16]
   1fd5c:	str	sl, [sp, #24]
   1fd60:	str	lr, [sp, #28]
   1fd64:	sub	sp, sp, #16
   1fd68:	mov	r8, r0
   1fd6c:	mov	r4, r1
   1fd70:	ldr	r7, [r1, #84]	; 0x54
   1fd74:	ldr	r6, [r1, #40]	; 0x28
   1fd78:	ldr	r3, [r1, #104]	; 0x68
   1fd7c:	cmp	r3, r6
   1fd80:	bge	1fdc4 <__assert_fail@plt+0xe8fc>
   1fd84:	ldr	r3, [r1, #100]	; 0x64
   1fd88:	str	r2, [r3, r6, lsl #2]
   1fd8c:	str	r6, [r1, #104]	; 0x68
   1fd90:	mov	r5, r2
   1fd94:	ldr	r3, [r7, #76]	; 0x4c
   1fd98:	cmp	r3, #0
   1fd9c:	cmpne	r5, #0
   1fda0:	bne	1fe94 <__assert_fail@plt+0xe9cc>
   1fda4:	mov	r0, r5
   1fda8:	add	sp, sp, #16
   1fdac:	ldrd	r4, [sp]
   1fdb0:	ldrd	r6, [sp, #8]
   1fdb4:	ldrd	r8, [sp, #16]
   1fdb8:	ldr	sl, [sp, #24]
   1fdbc:	add	sp, sp, #28
   1fdc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fdc4:	ldr	r9, [r1, #100]	; 0x64
   1fdc8:	ldr	r3, [r9, r6, lsl #2]
   1fdcc:	cmp	r3, #0
   1fdd0:	streq	r2, [r9, r6, lsl #2]
   1fdd4:	moveq	r5, r2
   1fdd8:	beq	1fd94 <__assert_fail@plt+0xe8cc>
   1fddc:	ldr	r3, [r3, #40]	; 0x28
   1fde0:	cmp	r2, #0
   1fde4:	beq	1fe54 <__assert_fail@plt+0xe98c>
   1fde8:	ldr	r9, [r2, #40]	; 0x28
   1fdec:	mov	r2, r3
   1fdf0:	mov	r1, r9
   1fdf4:	add	r0, sp, #4
   1fdf8:	bl	17808 <__assert_fail@plt+0x6340>
   1fdfc:	str	r0, [r8]
   1fe00:	cmp	r0, #0
   1fe04:	movne	r5, #0
   1fe08:	bne	1fda4 <__assert_fail@plt+0xe8dc>
   1fe0c:	ldr	r1, [r4, #40]	; 0x28
   1fe10:	ldr	r2, [r4, #88]	; 0x58
   1fe14:	sub	r1, r1, #1
   1fe18:	mov	r0, r4
   1fe1c:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1fe20:	ldr	sl, [r4, #100]	; 0x64
   1fe24:	mov	r3, r0
   1fe28:	add	r2, sp, #4
   1fe2c:	mov	r1, r7
   1fe30:	mov	r0, r8
   1fe34:	bl	18fdc <__assert_fail@plt+0x7b14>
   1fe38:	mov	r5, r0
   1fe3c:	str	r0, [sl, r6, lsl #2]
   1fe40:	cmp	r9, #0
   1fe44:	beq	1fd94 <__assert_fail@plt+0xe8cc>
   1fe48:	ldr	r0, [sp, #12]
   1fe4c:	bl	135a4 <__assert_fail@plt+0x20dc>
   1fe50:	b	1fd94 <__assert_fail@plt+0xe8cc>
   1fe54:	ldrd	r0, [r3]
   1fe58:	strd	r0, [sp, #4]
   1fe5c:	ldr	r3, [r3, #8]
   1fe60:	str	r3, [sp, #12]
   1fe64:	ldr	r2, [r4, #88]	; 0x58
   1fe68:	sub	r1, r6, #1
   1fe6c:	mov	r0, r4
   1fe70:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   1fe74:	mov	r3, r0
   1fe78:	add	r2, sp, #4
   1fe7c:	mov	r1, r7
   1fe80:	mov	r0, r8
   1fe84:	bl	18fdc <__assert_fail@plt+0x7b14>
   1fe88:	mov	r5, r0
   1fe8c:	str	r0, [r9, r6, lsl #2]
   1fe90:	b	1fd94 <__assert_fail@plt+0xe8cc>
   1fe94:	add	r7, r5, #4
   1fe98:	mov	r2, r6
   1fe9c:	mov	r1, r7
   1fea0:	mov	r0, r4
   1fea4:	bl	1a430 <__assert_fail@plt+0x8f68>
   1fea8:	str	r0, [r8]
   1feac:	cmp	r0, #0
   1feb0:	bne	1fee4 <__assert_fail@plt+0xea1c>
   1feb4:	ldrb	r3, [r5, #52]	; 0x34
   1feb8:	tst	r3, #64	; 0x40
   1febc:	beq	1fda4 <__assert_fail@plt+0xe8dc>
   1fec0:	mov	r1, r7
   1fec4:	mov	r0, r4
   1fec8:	bl	1f650 <__assert_fail@plt+0xe188>
   1fecc:	str	r0, [r8]
   1fed0:	cmp	r0, #0
   1fed4:	bne	1feec <__assert_fail@plt+0xea24>
   1fed8:	ldr	r3, [r4, #100]	; 0x64
   1fedc:	ldr	r5, [r3, r6, lsl #2]
   1fee0:	b	1fda4 <__assert_fail@plt+0xe8dc>
   1fee4:	mov	r5, #0
   1fee8:	b	1fda4 <__assert_fail@plt+0xe8dc>
   1feec:	mov	r5, #0
   1fef0:	b	1fda4 <__assert_fail@plt+0xe8dc>
   1fef4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fef8:	strd	r6, [sp, #8]
   1fefc:	strd	r8, [sp, #16]
   1ff00:	strd	sl, [sp, #24]
   1ff04:	str	lr, [sp, #32]
   1ff08:	sub	sp, sp, #84	; 0x54
   1ff0c:	str	r0, [sp, #8]
   1ff10:	mov	r4, r1
   1ff14:	mov	sl, r2
   1ff18:	mov	r5, r3
   1ff1c:	ldr	r6, [r0, #84]	; 0x54
   1ff20:	mov	r3, #0
   1ff24:	str	r3, [sp, #76]	; 0x4c
   1ff28:	lsl	r3, sl, #2
   1ff2c:	str	r3, [sp, #12]
   1ff30:	ldr	r3, [r0, #100]	; 0x64
   1ff34:	ldr	fp, [r3, sl, lsl #2]
   1ff38:	cmp	fp, #0
   1ff3c:	beq	2003c <__assert_fail@plt+0xeb74>
   1ff40:	add	fp, fp, #4
   1ff44:	ldr	r3, [r5, #4]
   1ff48:	cmp	r3, #0
   1ff4c:	beq	20048 <__assert_fail@plt+0xeb80>
   1ff50:	mov	r3, #0
   1ff54:	str	r3, [sp, #48]	; 0x30
   1ff58:	mov	r2, r5
   1ff5c:	mov	r1, r6
   1ff60:	add	r0, sp, #48	; 0x30
   1ff64:	bl	1e8f8 <__assert_fail@plt+0xd430>
   1ff68:	mov	r9, r0
   1ff6c:	ldr	r8, [sp, #48]	; 0x30
   1ff70:	cmp	r8, #0
   1ff74:	bne	2007c <__assert_fail@plt+0xebb4>
   1ff78:	ldr	r3, [r0, #28]
   1ff7c:	cmp	r3, #0
   1ff80:	bne	1ffe8 <__assert_fail@plt+0xeb20>
   1ff84:	add	r8, r0, #28
   1ff88:	ldr	r1, [r5, #4]
   1ff8c:	mov	r0, r8
   1ff90:	bl	172b4 <__assert_fail@plt+0x5dec>
   1ff94:	mov	r7, r0
   1ff98:	str	r0, [sp, #48]	; 0x30
   1ff9c:	cmp	r0, #0
   1ffa0:	bne	20590 <__assert_fail@plt+0xf0c8>
   1ffa4:	ldr	r3, [r5, #4]
   1ffa8:	cmp	r3, #0
   1ffac:	ble	1ffe8 <__assert_fail@plt+0xeb20>
   1ffb0:	ldr	r3, [r5, #8]
   1ffb4:	ldr	r1, [r3, r7, lsl #2]
   1ffb8:	add	r1, r1, r1, lsl #1
   1ffbc:	ldr	r3, [r6, #28]
   1ffc0:	add	r1, r3, r1, lsl #2
   1ffc4:	mov	r0, r8
   1ffc8:	bl	19db4 <__assert_fail@plt+0x88ec>
   1ffcc:	str	r0, [sp, #48]	; 0x30
   1ffd0:	cmp	r0, #0
   1ffd4:	bne	20598 <__assert_fail@plt+0xf0d0>
   1ffd8:	add	r7, r7, #1
   1ffdc:	ldr	r3, [r5, #4]
   1ffe0:	cmp	r7, r3
   1ffe4:	blt	1ffb0 <__assert_fail@plt+0xeae8>
   1ffe8:	add	r2, r9, #28
   1ffec:	mov	r1, fp
   1fff0:	mov	r0, r5
   1fff4:	bl	175ac <__assert_fail@plt+0x60e4>
   1fff8:	str	r0, [sp, #28]
   1fffc:	str	r0, [sp, #76]	; 0x4c
   20000:	cmp	r0, #0
   20004:	bne	20588 <__assert_fail@plt+0xf0c0>
   20008:	ldr	r3, [r4, #20]
   2000c:	cmp	r3, #0
   20010:	bne	2009c <__assert_fail@plt+0xebd4>
   20014:	ldr	r7, [r4]
   20018:	mov	r2, r5
   2001c:	mov	r1, r6
   20020:	add	r0, sp, #76	; 0x4c
   20024:	bl	1e8f8 <__assert_fail@plt+0xd430>
   20028:	str	r0, [r7, sl, lsl #2]
   2002c:	ldr	r8, [sp, #76]	; 0x4c
   20030:	cmp	r8, #0
   20034:	beq	20060 <__assert_fail@plt+0xeb98>
   20038:	b	2007c <__assert_fail@plt+0xebb4>
   2003c:	ldr	r3, [r5, #4]
   20040:	cmp	r3, #0
   20044:	bne	202ac <__assert_fail@plt+0xede4>
   20048:	ldr	r3, [r4]
   2004c:	mov	r2, #0
   20050:	str	r2, [r3, sl, lsl #2]
   20054:	cmp	fp, r2
   20058:	moveq	r8, r2
   2005c:	beq	2007c <__assert_fail@plt+0xebb4>
   20060:	ldr	r3, [sp, #8]
   20064:	ldr	r3, [r3, #100]	; 0x64
   20068:	ldr	r3, [r3, sl, lsl #2]
   2006c:	ldrb	r3, [r3, #52]	; 0x34
   20070:	tst	r3, #64	; 0x40
   20074:	moveq	r8, #0
   20078:	bne	202cc <__assert_fail@plt+0xee04>
   2007c:	mov	r0, r8
   20080:	add	sp, sp, #84	; 0x54
   20084:	ldrd	r4, [sp]
   20088:	ldrd	r6, [sp, #8]
   2008c:	ldrd	r8, [sp, #16]
   20090:	ldrd	sl, [sp, #24]
   20094:	add	sp, sp, #32
   20098:	pop	{pc}		; (ldr pc, [sp], #4)
   2009c:	ldr	r3, [sp, #8]
   200a0:	ldr	r3, [r3, #116]	; 0x74
   200a4:	str	r3, [sp, #20]
   200a8:	ble	202a0 <__assert_fail@plt+0xedd8>
   200ac:	mov	r7, r0
   200b0:	str	fp, [sp, #24]
   200b4:	b	20140 <__assert_fail@plt+0xec78>
   200b8:	ldr	lr, [r5, #4]
   200bc:	cmp	lr, #0
   200c0:	ble	20130 <__assert_fail@plt+0xec68>
   200c4:	ldr	r2, [r5, #8]
   200c8:	add	lr, r2, lr, lsl #2
   200cc:	mvn	r8, #0
   200d0:	mov	r1, r8
   200d4:	b	200ec <__assert_fail@plt+0xec24>
   200d8:	ldr	ip, [r0, r3, lsl #3]
   200dc:	cmp	r9, ip
   200e0:	moveq	r1, r3
   200e4:	cmp	r2, lr
   200e8:	beq	20118 <__assert_fail@plt+0xec50>
   200ec:	ldr	r3, [r2], #4
   200f0:	add	ip, r0, r3, lsl #3
   200f4:	ldrb	ip, [ip, #4]
   200f8:	cmp	ip, #8
   200fc:	beq	200d8 <__assert_fail@plt+0xec10>
   20100:	cmp	ip, #9
   20104:	bne	200e4 <__assert_fail@plt+0xec1c>
   20108:	ldr	ip, [r0, r3, lsl #3]
   2010c:	cmp	r9, ip
   20110:	moveq	r8, r3
   20114:	b	200e4 <__assert_fail@plt+0xec1c>
   20118:	str	r8, [sp, #16]
   2011c:	cmp	r1, #0
   20120:	bge	20198 <__assert_fail@plt+0xecd0>
   20124:	ldr	r3, [sp, #16]
   20128:	cmp	r3, #0
   2012c:	bge	201c4 <__assert_fail@plt+0xecfc>
   20130:	add	r7, r7, #1
   20134:	ldr	r3, [r4, #20]
   20138:	cmp	r7, r3
   2013c:	bge	2029c <__assert_fail@plt+0xedd4>
   20140:	ldr	r3, [r4, #24]
   20144:	ldr	r3, [r3, r7, lsl #2]
   20148:	add	r3, r3, r3, lsl #1
   2014c:	ldr	ip, [sp, #20]
   20150:	add	r2, ip, r3, lsl #3
   20154:	ldr	r1, [r2, #8]
   20158:	cmp	sl, r1
   2015c:	ble	20130 <__assert_fail@plt+0xec68>
   20160:	ldr	r1, [r2, #4]
   20164:	cmp	sl, r1
   20168:	bgt	20130 <__assert_fail@plt+0xec68>
   2016c:	ldr	r0, [r6]
   20170:	ldr	r3, [ip, r3, lsl #3]
   20174:	ldr	r9, [r0, r3, lsl #3]
   20178:	ldr	r3, [r2, #12]
   2017c:	cmp	sl, r3
   20180:	beq	200b8 <__assert_fail@plt+0xebf0>
   20184:	ldr	r3, [r5, #4]
   20188:	cmp	r3, #0
   2018c:	ldrgt	fp, [sp, #28]
   20190:	bgt	20250 <__assert_fail@plt+0xed88>
   20194:	b	20130 <__assert_fail@plt+0xec68>
   20198:	ldr	r3, [sp, #24]
   2019c:	mov	r2, r5
   201a0:	mov	r0, r6
   201a4:	bl	1b920 <__assert_fail@plt+0xa458>
   201a8:	cmp	r0, #0
   201ac:	bne	205a0 <__assert_fail@plt+0xf0d8>
   201b0:	cmp	r8, #0
   201b4:	blt	20130 <__assert_fail@plt+0xec68>
   201b8:	ldr	r3, [r5, #4]
   201bc:	cmp	r3, #0
   201c0:	ble	20130 <__assert_fail@plt+0xec68>
   201c4:	ldr	r9, [sp, #28]
   201c8:	b	201dc <__assert_fail@plt+0xed14>
   201cc:	add	r9, r9, #1
   201d0:	ldr	r3, [r5, #4]
   201d4:	cmp	r9, r3
   201d8:	bge	20130 <__assert_fail@plt+0xec68>
   201dc:	ldr	r3, [r5, #8]
   201e0:	ldr	fp, [r3, r9, lsl #2]
   201e4:	add	r8, fp, fp, lsl #1
   201e8:	lsl	r8, r8, #2
   201ec:	ldr	r0, [r6, #28]
   201f0:	ldr	r1, [sp, #16]
   201f4:	add	r0, r0, r8
   201f8:	bl	16194 <__assert_fail@plt+0x4ccc>
   201fc:	cmp	r0, #0
   20200:	bne	201cc <__assert_fail@plt+0xed04>
   20204:	ldr	r0, [r6, #24]
   20208:	ldr	r1, [sp, #16]
   2020c:	add	r0, r0, r8
   20210:	bl	16194 <__assert_fail@plt+0x4ccc>
   20214:	cmp	r0, #0
   20218:	bne	201cc <__assert_fail@plt+0xed04>
   2021c:	ldr	r3, [sp, #24]
   20220:	mov	r2, r5
   20224:	mov	r1, fp
   20228:	mov	r0, r6
   2022c:	bl	1b920 <__assert_fail@plt+0xa458>
   20230:	cmp	r0, #0
   20234:	bne	205a8 <__assert_fail@plt+0xf0e0>
   20238:	sub	r9, r9, #1
   2023c:	b	201cc <__assert_fail@plt+0xed04>
   20240:	add	fp, fp, #1
   20244:	ldr	r3, [r5, #4]
   20248:	cmp	fp, r3
   2024c:	bge	20130 <__assert_fail@plt+0xec68>
   20250:	ldr	r3, [r5, #8]
   20254:	ldr	r1, [r3, fp, lsl #2]
   20258:	ldr	r2, [r6]
   2025c:	add	r3, r2, r1, lsl #3
   20260:	ldrb	r3, [r3, #4]
   20264:	sub	r3, r3, #8
   20268:	cmp	r3, #1
   2026c:	bhi	20240 <__assert_fail@plt+0xed78>
   20270:	ldr	r3, [r2, r1, lsl #3]
   20274:	cmp	r9, r3
   20278:	bne	20240 <__assert_fail@plt+0xed78>
   2027c:	ldr	r3, [sp, #24]
   20280:	mov	r2, r5
   20284:	mov	r0, r6
   20288:	bl	1b920 <__assert_fail@plt+0xa458>
   2028c:	cmp	r0, #0
   20290:	beq	20240 <__assert_fail@plt+0xed78>
   20294:	mov	r8, r0
   20298:	b	2007c <__assert_fail@plt+0xebb4>
   2029c:	ldr	fp, [sp, #24]
   202a0:	mov	r3, #0
   202a4:	str	r3, [sp, #76]	; 0x4c
   202a8:	b	20014 <__assert_fail@plt+0xeb4c>
   202ac:	ldr	r4, [r1]
   202b0:	mov	r2, r5
   202b4:	mov	r1, r6
   202b8:	add	r0, sp, #76	; 0x4c
   202bc:	bl	1e8f8 <__assert_fail@plt+0xd430>
   202c0:	str	r0, [r4, sl, lsl #2]
   202c4:	ldr	r8, [sp, #76]	; 0x4c
   202c8:	b	2007c <__assert_fail@plt+0xebb4>
   202cc:	mov	r1, sl
   202d0:	ldr	r5, [sp, #8]
   202d4:	mov	r0, r5
   202d8:	bl	16b8c <__assert_fail@plt+0x56c4>
   202dc:	str	r0, [sp, #32]
   202e0:	cmn	r0, #1
   202e4:	moveq	r8, #0
   202e8:	beq	2007c <__assert_fail@plt+0xebb4>
   202ec:	ldr	r7, [r5, #84]	; 0x54
   202f0:	mov	r3, #0
   202f4:	str	r3, [sp, #48]	; 0x30
   202f8:	ldr	r3, [fp, #4]
   202fc:	cmp	r3, #0
   20300:	ble	20580 <__assert_fail@plt+0xf0b8>
   20304:	add	r3, r0, r0, lsl #1
   20308:	lsl	r3, r3, #3
   2030c:	str	r3, [sp, #36]	; 0x24
   20310:	mov	r3, #0
   20314:	add	r2, r4, #16
   20318:	str	r2, [sp, #24]
   2031c:	str	sl, [sp, #28]
   20320:	mov	sl, r3
   20324:	b	20340 <__assert_fail@plt+0xee78>
   20328:	cmp	r2, #4
   2032c:	beq	20374 <__assert_fail@plt+0xeeac>
   20330:	add	sl, sl, #1
   20334:	ldr	r3, [fp, #4]
   20338:	cmp	sl, r3
   2033c:	bge	20554 <__assert_fail@plt+0xf08c>
   20340:	ldr	r3, [fp, #8]
   20344:	ldr	r6, [r3, sl, lsl #2]
   20348:	ldr	r3, [r7]
   2034c:	add	r3, r3, r6, lsl #3
   20350:	ldrb	r2, [r3, #4]
   20354:	ldr	r3, [r4, #8]
   20358:	cmp	r6, r3
   2035c:	bne	20328 <__assert_fail@plt+0xee60>
   20360:	ldr	r3, [r4, #12]
   20364:	ldr	r1, [sp, #28]
   20368:	cmp	r1, r3
   2036c:	bne	20328 <__assert_fail@plt+0xee60>
   20370:	b	20330 <__assert_fail@plt+0xee68>
   20374:	ldr	r3, [sp, #8]
   20378:	ldr	r5, [r3, #116]	; 0x74
   2037c:	ldr	r3, [sp, #36]	; 0x24
   20380:	add	r5, r5, r3
   20384:	add	r3, r6, r6, lsl #1
   20388:	lsl	r3, r3, #2
   2038c:	str	r3, [sp, #20]
   20390:	lsl	r3, r6, #2
   20394:	str	r3, [sp, #16]
   20398:	ldr	r3, [sp, #32]
   2039c:	str	fp, [sp, #40]	; 0x28
   203a0:	str	sl, [sp, #44]	; 0x2c
   203a4:	mov	sl, r3
   203a8:	ldr	fp, [sp, #28]
   203ac:	b	20450 <__assert_fail@plt+0xef88>
   203b0:	ldr	r3, [r7, #20]
   203b4:	ldr	r2, [sp, #20]
   203b8:	add	r3, r3, r2
   203bc:	ldr	r3, [r3, #8]
   203c0:	ldr	r8, [r3]
   203c4:	b	20480 <__assert_fail@plt+0xefb8>
   203c8:	ldrd	r2, [r4]
   203cc:	strd	r2, [sp, #48]	; 0x30
   203d0:	ldrd	r2, [r4, #8]
   203d4:	strd	r2, [sp, #56]	; 0x38
   203d8:	ldrd	r2, [r4, #16]
   203dc:	strd	r2, [sp, #64]	; 0x40
   203e0:	ldr	r3, [r4, #24]
   203e4:	str	r3, [sp, #72]	; 0x48
   203e8:	ldr	r1, [sp, #24]
   203ec:	add	r0, sp, #64	; 0x40
   203f0:	bl	17780 <__assert_fail@plt+0x62b8>
   203f4:	cmp	r0, #0
   203f8:	beq	204e0 <__assert_fail@plt+0xf018>
   203fc:	mov	r8, r0
   20400:	b	20560 <__assert_fail@plt+0xf098>
   20404:	ldr	r3, [sp, #48]	; 0x30
   20408:	ldr	r2, [sp, #12]
   2040c:	str	r5, [r3, r2]
   20410:	mov	r1, sl
   20414:	add	r0, sp, #64	; 0x40
   20418:	bl	16194 <__assert_fail@plt+0x4ccc>
   2041c:	sub	r1, r0, #1
   20420:	add	r0, sp, #64	; 0x40
   20424:	bl	1622c <__assert_fail@plt+0x4d64>
   20428:	add	r5, sl, sl, lsl #1
   2042c:	ldr	r3, [sp, #8]
   20430:	ldr	r3, [r3, #116]	; 0x74
   20434:	add	r5, r3, r5, lsl #3
   20438:	add	sl, sl, #1
   2043c:	add	r2, r5, #24
   20440:	ldrb	r3, [r5, #20]
   20444:	cmp	r3, #0
   20448:	beq	20548 <__assert_fail@plt+0xf080>
   2044c:	mov	r5, r2
   20450:	ldr	r3, [r5]
   20454:	cmp	r6, r3
   20458:	bne	20438 <__assert_fail@plt+0xef70>
   2045c:	ldr	r3, [r5, #12]
   20460:	ldr	r2, [r5, #8]
   20464:	sub	r3, r3, r2
   20468:	add	r9, fp, r3
   2046c:	cmp	r3, #0
   20470:	beq	203b0 <__assert_fail@plt+0xeee8>
   20474:	ldr	r3, [r7, #12]
   20478:	ldr	r2, [sp, #16]
   2047c:	ldr	r8, [r3, r2]
   20480:	ldr	r3, [r4, #12]
   20484:	cmp	r9, r3
   20488:	bgt	20438 <__assert_fail@plt+0xef70>
   2048c:	ldr	r3, [r4]
   20490:	ldr	r0, [r3, r9, lsl #2]
   20494:	cmp	r0, #0
   20498:	beq	20438 <__assert_fail@plt+0xef70>
   2049c:	mov	r1, r8
   204a0:	add	r0, r0, #4
   204a4:	bl	16194 <__assert_fail@plt+0x4ccc>
   204a8:	cmp	r0, #0
   204ac:	beq	20438 <__assert_fail@plt+0xef70>
   204b0:	str	r9, [sp, #4]
   204b4:	str	r8, [sp]
   204b8:	mov	r3, fp
   204bc:	mov	r2, r6
   204c0:	ldr	r1, [sp, #24]
   204c4:	ldr	r0, [sp, #8]
   204c8:	bl	16c48 <__assert_fail@plt+0x5780>
   204cc:	cmp	r0, #0
   204d0:	bne	20438 <__assert_fail@plt+0xef70>
   204d4:	ldr	r3, [sp, #48]	; 0x30
   204d8:	cmp	r3, #0
   204dc:	beq	203c8 <__assert_fail@plt+0xef00>
   204e0:	str	r6, [sp, #56]	; 0x38
   204e4:	str	fp, [sp, #60]	; 0x3c
   204e8:	mov	r1, sl
   204ec:	add	r0, sp, #64	; 0x40
   204f0:	bl	1981c <__assert_fail@plt+0x8354>
   204f4:	cmp	r0, #0
   204f8:	beq	2055c <__assert_fail@plt+0xf094>
   204fc:	ldr	r3, [sp, #48]	; 0x30
   20500:	ldr	r2, [sp, #12]
   20504:	ldr	r5, [r3, r2]
   20508:	add	r1, sp, #48	; 0x30
   2050c:	ldr	r0, [sp, #8]
   20510:	bl	205b0 <__assert_fail@plt+0xf0e8>
   20514:	cmp	r0, #0
   20518:	bne	20578 <__assert_fail@plt+0xf0b0>
   2051c:	ldr	r1, [r4, #4]
   20520:	cmp	r1, #0
   20524:	beq	20404 <__assert_fail@plt+0xef3c>
   20528:	add	r3, fp, #1
   2052c:	ldr	r2, [sp, #48]	; 0x30
   20530:	mov	r0, r7
   20534:	bl	1eb24 <__assert_fail@plt+0xd65c>
   20538:	cmp	r0, #0
   2053c:	beq	20404 <__assert_fail@plt+0xef3c>
   20540:	mov	r8, r0
   20544:	b	20560 <__assert_fail@plt+0xf098>
   20548:	ldr	fp, [sp, #40]	; 0x28
   2054c:	ldr	sl, [sp, #44]	; 0x2c
   20550:	b	20330 <__assert_fail@plt+0xee68>
   20554:	mov	r8, #0
   20558:	b	20560 <__assert_fail@plt+0xf098>
   2055c:	mov	r8, #12
   20560:	ldr	r3, [sp, #48]	; 0x30
   20564:	cmp	r3, #0
   20568:	beq	2007c <__assert_fail@plt+0xebb4>
   2056c:	ldr	r0, [sp, #72]	; 0x48
   20570:	bl	135a4 <__assert_fail@plt+0x20dc>
   20574:	b	2007c <__assert_fail@plt+0xebb4>
   20578:	mov	r8, r0
   2057c:	b	20560 <__assert_fail@plt+0xf098>
   20580:	mov	r8, #0
   20584:	b	2007c <__assert_fail@plt+0xebb4>
   20588:	ldr	r8, [sp, #28]
   2058c:	b	2007c <__assert_fail@plt+0xebb4>
   20590:	mov	r8, #12
   20594:	b	2007c <__assert_fail@plt+0xebb4>
   20598:	mov	r8, #12
   2059c:	b	2007c <__assert_fail@plt+0xebb4>
   205a0:	mov	r8, r0
   205a4:	b	2007c <__assert_fail@plt+0xebb4>
   205a8:	mov	r8, r0
   205ac:	b	2007c <__assert_fail@plt+0xebb4>
   205b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   205b4:	strd	r6, [sp, #8]
   205b8:	strd	r8, [sp, #16]
   205bc:	strd	sl, [sp, #24]
   205c0:	str	lr, [sp, #32]
   205c4:	sub	sp, sp, #60	; 0x3c
   205c8:	mov	sl, r0
   205cc:	mov	r7, r1
   205d0:	ldr	fp, [r1, #12]
   205d4:	ldr	r1, [r1, #8]
   205d8:	add	r0, sp, #44	; 0x2c
   205dc:	bl	1725c <__assert_fail@plt+0x5d94>
   205e0:	subs	r4, r0, #0
   205e4:	bne	20870 <__assert_fail@plt+0xf3a8>
   205e8:	add	r3, sp, #44	; 0x2c
   205ec:	mov	r2, fp
   205f0:	mov	r1, r7
   205f4:	mov	r0, sl
   205f8:	bl	1fef4 <__assert_fail@plt+0xea2c>
   205fc:	subs	r3, r0, #0
   20600:	str	r3, [sp, #32]
   20604:	bne	20854 <__assert_fail@plt+0xf38c>
   20608:	cmp	fp, #0
   2060c:	ble	2085c <__assert_fail@plt+0xf394>
   20610:	str	r3, [sp, #20]
   20614:	mov	r9, sl
   20618:	b	207b0 <__assert_fail@plt+0xf2e8>
   2061c:	ldr	r2, [sp, #16]
   20620:	mov	r1, #0
   20624:	bl	113e4 <memset@plt>
   20628:	ldr	r0, [sp, #52]	; 0x34
   2062c:	bl	135a4 <__assert_fail@plt+0x20dc>
   20630:	ldr	r4, [sp, #32]
   20634:	b	20870 <__assert_fail@plt+0xf3a8>
   20638:	ldr	r3, [r7, #12]
   2063c:	str	r3, [sp, #24]
   20640:	ldr	r2, [sp, #12]
   20644:	ldr	r3, [r2, #84]	; 0x54
   20648:	mov	r0, r3
   2064c:	mov	r3, r9
   20650:	mov	r1, fp
   20654:	str	r0, [sp, #36]	; 0x24
   20658:	bl	1b5d0 <__assert_fail@plt+0xa108>
   2065c:	subs	r6, r0, #0
   20660:	ble	20778 <__assert_fail@plt+0xf2b0>
   20664:	add	r3, r9, r6
   20668:	ldr	r2, [sp, #24]
   2066c:	cmp	r2, r3
   20670:	blt	206a4 <__assert_fail@plt+0xf1dc>
   20674:	ldr	r2, [r7]
   20678:	ldr	r0, [r2, r3, lsl #2]
   2067c:	cmp	r0, #0
   20680:	beq	20724 <__assert_fail@plt+0xf25c>
   20684:	ldr	r3, [sp, #36]	; 0x24
   20688:	ldr	r3, [r3, #12]
   2068c:	ldr	r2, [sp, #8]
   20690:	ldr	r1, [r3, r2, lsl #2]
   20694:	add	r0, r0, #4
   20698:	bl	16194 <__assert_fail@plt+0x4ccc>
   2069c:	cmp	r0, #0
   206a0:	beq	20724 <__assert_fail@plt+0xf25c>
   206a4:	ldr	r3, [r7, #20]
   206a8:	cmp	r3, #0
   206ac:	beq	206dc <__assert_fail@plt+0xf214>
   206b0:	ldr	r3, [r4, #12]
   206b4:	ldr	r2, [sp, #8]
   206b8:	ldr	r2, [r3, r2, lsl #2]
   206bc:	str	r9, [sp, #4]
   206c0:	str	fp, [sp]
   206c4:	add	r3, r9, r6
   206c8:	ldr	r1, [sp, #28]
   206cc:	ldr	r0, [sp, #12]
   206d0:	bl	16c48 <__assert_fail@plt+0x5780>
   206d4:	cmp	r0, #0
   206d8:	bne	206f0 <__assert_fail@plt+0xf228>
   206dc:	mov	r1, fp
   206e0:	add	r0, sp, #44	; 0x2c
   206e4:	bl	1981c <__assert_fail@plt+0x8354>
   206e8:	cmp	r0, #0
   206ec:	beq	20864 <__assert_fail@plt+0xf39c>
   206f0:	add	sl, sl, #1
   206f4:	ldr	r3, [r5, #20]
   206f8:	cmp	sl, r3
   206fc:	bge	20784 <__assert_fail@plt+0xf2bc>
   20700:	ldr	r3, [r5, #24]
   20704:	ldr	fp, [r3, sl, lsl #2]
   20708:	str	fp, [sp, #8]
   2070c:	lsl	r8, fp, #3
   20710:	ldr	r3, [r4]
   20714:	add	r3, r3, r8
   20718:	ldrb	r3, [r3, #6]
   2071c:	tst	r3, #16
   20720:	bne	20638 <__assert_fail@plt+0xf170>
   20724:	ldr	r1, [r4]
   20728:	mov	r2, r9
   2072c:	add	r1, r1, r8
   20730:	ldr	r0, [sp, #12]
   20734:	bl	1a2c0 <__assert_fail@plt+0x8df8>
   20738:	cmp	r0, #0
   2073c:	beq	206f0 <__assert_fail@plt+0xf228>
   20740:	ldr	r3, [r7]
   20744:	ldr	r2, [sp, #16]
   20748:	ldr	r0, [r3, r2]
   2074c:	cmp	r0, #0
   20750:	beq	206f0 <__assert_fail@plt+0xf228>
   20754:	ldr	r3, [r4, #12]
   20758:	ldr	r2, [sp, #8]
   2075c:	ldr	r1, [r3, r2, lsl #2]
   20760:	add	r0, r0, #4
   20764:	bl	16194 <__assert_fail@plt+0x4ccc>
   20768:	cmp	r0, #0
   2076c:	beq	206f0 <__assert_fail@plt+0xf228>
   20770:	mov	r6, #1
   20774:	b	206a4 <__assert_fail@plt+0xf1dc>
   20778:	cmp	r6, #0
   2077c:	beq	20724 <__assert_fail@plt+0xf25c>
   20780:	b	206a4 <__assert_fail@plt+0xf1dc>
   20784:	mov	fp, r9
   20788:	ldr	r9, [sp, #12]
   2078c:	add	r3, sp, #44	; 0x2c
   20790:	mov	r2, fp
   20794:	mov	r1, r7
   20798:	mov	r0, r9
   2079c:	bl	1fef4 <__assert_fail@plt+0xea2c>
   207a0:	cmp	r0, #0
   207a4:	bne	20890 <__assert_fail@plt+0xf3c8>
   207a8:	cmp	fp, #0
   207ac:	beq	2084c <__assert_fail@plt+0xf384>
   207b0:	ldr	r0, [r7]
   207b4:	lsl	r3, fp, #2
   207b8:	str	r3, [sp, #16]
   207bc:	ldr	r3, [r0, fp, lsl #2]
   207c0:	cmp	r3, #0
   207c4:	ldreq	r3, [sp, #20]
   207c8:	addeq	r3, r3, #1
   207cc:	ldrne	r3, [sp, #32]
   207d0:	str	r3, [sp, #20]
   207d4:	ldr	r3, [r9, #120]	; 0x78
   207d8:	ldr	r2, [sp, #20]
   207dc:	cmp	r3, r2
   207e0:	blt	2061c <__assert_fail@plt+0xf154>
   207e4:	mov	r3, #0
   207e8:	str	r3, [sp, #48]	; 0x30
   207ec:	sub	fp, fp, #1
   207f0:	ldr	r3, [r9, #100]	; 0x64
   207f4:	ldr	r2, [sp, #16]
   207f8:	add	r3, r3, r2
   207fc:	ldr	r5, [r3, #-4]
   20800:	cmp	r5, #0
   20804:	beq	2078c <__assert_fail@plt+0xf2c4>
   20808:	ldr	r4, [r9, #84]	; 0x54
   2080c:	ldr	r3, [r5, #20]
   20810:	cmp	r3, #0
   20814:	ble	2078c <__assert_fail@plt+0xf2c4>
   20818:	ldr	r3, [r5, #24]
   2081c:	ldr	r6, [r3]
   20820:	str	r6, [sp, #8]
   20824:	lsl	r8, r6, #3
   20828:	ldr	r3, [r4]
   2082c:	add	r3, r3, r8
   20830:	ldr	sl, [sp, #32]
   20834:	add	r2, r7, #16
   20838:	str	r2, [sp, #28]
   2083c:	str	r9, [sp, #12]
   20840:	mov	r9, fp
   20844:	mov	fp, r6
   20848:	b	20718 <__assert_fail@plt+0xf250>
   2084c:	mov	r4, fp
   20850:	b	20868 <__assert_fail@plt+0xf3a0>
   20854:	ldr	r4, [sp, #32]
   20858:	b	20868 <__assert_fail@plt+0xf3a0>
   2085c:	ldr	r4, [sp, #32]
   20860:	b	20868 <__assert_fail@plt+0xf3a0>
   20864:	mov	r4, #12
   20868:	ldr	r0, [sp, #52]	; 0x34
   2086c:	bl	135a4 <__assert_fail@plt+0x20dc>
   20870:	mov	r0, r4
   20874:	add	sp, sp, #60	; 0x3c
   20878:	ldrd	r4, [sp]
   2087c:	ldrd	r6, [sp, #8]
   20880:	ldrd	r8, [sp, #16]
   20884:	ldrd	sl, [sp, #24]
   20888:	add	sp, sp, #32
   2088c:	pop	{pc}		; (ldr pc, [sp], #4)
   20890:	mov	r4, r0
   20894:	b	20868 <__assert_fail@plt+0xf3a0>
   20898:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2089c:	strd	r6, [sp, #8]
   208a0:	strd	r8, [sp, #16]
   208a4:	strd	sl, [sp, #24]
   208a8:	str	lr, [sp, #32]
   208ac:	sub	sp, sp, #420	; 0x1a4
   208b0:	mov	r5, r0
   208b4:	str	r0, [sp, #20]
   208b8:	str	r1, [sp, #44]	; 0x2c
   208bc:	str	r2, [sp, #60]	; 0x3c
   208c0:	mov	r4, r3
   208c4:	ldr	r6, [sp, #456]	; 0x1c8
   208c8:	ldr	sl, [r0]
   208cc:	mov	r2, #136	; 0x88
   208d0:	mov	r1, #0
   208d4:	add	r0, sp, #276	; 0x114
   208d8:	bl	113e4 <memset@plt>
   208dc:	str	sl, [sp, #360]	; 0x168
   208e0:	ldr	r2, [r5, #16]
   208e4:	str	r2, [sp, #32]
   208e8:	cmp	r2, #0
   208ec:	beq	20914 <__assert_fail@plt+0xf44c>
   208f0:	ldrb	r2, [r5, #28]
   208f4:	ubfx	r3, r2, #3, #1
   208f8:	cmp	r4, r6
   208fc:	moveq	r3, #0
   20900:	andne	r3, r3, #1
   20904:	cmp	r3, #0
   20908:	moveq	r3, #0
   2090c:	streq	r3, [sp, #32]
   20910:	bne	20c60 <__assert_fail@plt+0xf798>
   20914:	ldr	r3, [sp, #20]
   20918:	ldr	r3, [r3, #24]
   2091c:	ldr	r2, [sp, #464]	; 0x1d0
   20920:	cmp	r3, r2
   20924:	subcc	r2, r2, #1
   20928:	subcc	r3, r2, r3
   2092c:	movcs	r3, #0
   20930:	str	r3, [sp, #72]	; 0x48
   20934:	ldr	ip, [sp, #20]
   20938:	ldr	r3, [ip, #8]
   2093c:	cmp	r3, #0
   20940:	beq	21e5c <__assert_fail@plt+0x10994>
   20944:	ldr	r3, [sl, #36]	; 0x24
   20948:	cmp	r3, #0
   2094c:	beq	21e68 <__assert_fail@plt+0x109a0>
   20950:	ldr	r2, [sl, #40]	; 0x28
   20954:	cmp	r2, #0
   20958:	beq	21e74 <__assert_fail@plt+0x109ac>
   2095c:	ldr	r1, [sl, #44]	; 0x2c
   20960:	cmp	r1, #0
   20964:	beq	21e80 <__assert_fail@plt+0x109b8>
   20968:	ldr	r0, [sl, #48]	; 0x30
   2096c:	cmp	r0, #0
   20970:	beq	21e8c <__assert_fail@plt+0x109c4>
   20974:	ldr	r3, [r3, #8]
   20978:	cmp	r3, #0
   2097c:	bne	209b8 <__assert_fail@plt+0xf4f0>
   20980:	ldr	r3, [r2, #8]
   20984:	cmp	r3, #0
   20988:	bne	209b8 <__assert_fail@plt+0xf4f0>
   2098c:	ldr	r2, [r1, #8]
   20990:	cmp	r2, #0
   20994:	beq	209a4 <__assert_fail@plt+0xf4dc>
   20998:	ldrsb	r2, [ip, #28]
   2099c:	cmp	r2, #0
   209a0:	blt	209b8 <__assert_fail@plt+0xf4f0>
   209a4:	cmp	r4, #0
   209a8:	cmpne	r6, #0
   209ac:	bne	21e98 <__assert_fail@plt+0x109d0>
   209b0:	mov	r6, r3
   209b4:	mov	r4, r3
   209b8:	ldr	r3, [sp, #464]	; 0x1d0
   209bc:	ldr	r2, [sp, #72]	; 0x48
   209c0:	subs	r3, r3, r2
   209c4:	str	r3, [sp, #64]	; 0x40
   209c8:	movne	r5, #1
   209cc:	bne	209dc <__assert_fail@plt+0xf514>
   209d0:	ldr	r5, [sl, #76]	; 0x4c
   209d4:	adds	r5, r5, #0
   209d8:	movne	r5, #1
   209dc:	ldr	r3, [sp, #20]
   209e0:	ldr	ip, [r3, #20]
   209e4:	str	ip, [sp, #68]	; 0x44
   209e8:	ldr	r2, [r3, #12]
   209ec:	ldr	r0, [sl, #92]	; 0x5c
   209f0:	ldr	r3, [sl, #8]
   209f4:	add	r3, r3, #1
   209f8:	cmp	r3, r0
   209fc:	movlt	r3, r0
   20a00:	ldr	lr, [sp, #60]	; 0x3c
   20a04:	add	r1, lr, #1
   20a08:	ldr	r7, [sp, #44]	; 0x2c
   20a0c:	str	r7, [sp, #276]	; 0x114
   20a10:	str	lr, [sp, #324]	; 0x144
   20a14:	str	lr, [sp, #320]	; 0x140
   20a18:	mov	r7, ip
   20a1c:	str	ip, [sp, #340]	; 0x154
   20a20:	and	ip, r2, #4194304	; 0x400000
   20a24:	ubfx	r2, r2, #22, #1
   20a28:	strb	r2, [sp, #348]	; 0x15c
   20a2c:	orrs	r2, r7, ip
   20a30:	movne	r2, #1
   20a34:	moveq	r2, #0
   20a38:	strb	r2, [sp, #351]	; 0x15f
   20a3c:	str	r0, [sp, #356]	; 0x164
   20a40:	ldrb	r2, [sl, #88]	; 0x58
   20a44:	ubfx	r0, r2, #2, #1
   20a48:	strb	r0, [sp, #349]	; 0x15d
   20a4c:	ubfx	r2, r2, #3, #1
   20a50:	strb	r2, [sp, #350]	; 0x15e
   20a54:	str	lr, [sp, #332]	; 0x14c
   20a58:	str	lr, [sp, #328]	; 0x148
   20a5c:	cmp	r3, r1
   20a60:	movlt	r1, r3
   20a64:	add	r0, sp, #276	; 0x114
   20a68:	bl	16d48 <__assert_fail@plt+0x5880>
   20a6c:	subs	r2, r0, #0
   20a70:	str	r2, [sp, #76]	; 0x4c
   20a74:	bne	21df0 <__assert_fail@plt+0x10928>
   20a78:	add	r3, sl, #96	; 0x60
   20a7c:	str	r3, [sp, #344]	; 0x158
   20a80:	ldrb	r3, [sl, #88]	; 0x58
   20a84:	ubfx	r3, r3, #4, #1
   20a88:	strb	r3, [sp, #354]	; 0x162
   20a8c:	ldrb	r3, [sp, #351]	; 0x15f
   20a90:	cmp	r3, #0
   20a94:	beq	21fa0 <__assert_fail@plt+0x10ad8>
   20a98:	mov	r3, r2
   20a9c:	str	r3, [sp, #304]	; 0x130
   20aa0:	str	r3, [sp, #308]	; 0x134
   20aa4:	ldr	r3, [sp, #460]	; 0x1cc
   20aa8:	str	r3, [sp, #332]	; 0x14c
   20aac:	str	r3, [sp, #328]	; 0x148
   20ab0:	ldr	r3, [sp, #20]
   20ab4:	ldrb	r3, [r3, #28]
   20ab8:	ubfx	r3, r3, #7, #1
   20abc:	strb	r3, [sp, #353]	; 0x161
   20ac0:	ldr	r7, [sl, #76]	; 0x4c
   20ac4:	lsl	r7, r7, #1
   20ac8:	ldr	r3, [sp, #472]	; 0x1d8
   20acc:	str	r3, [sp, #364]	; 0x16c
   20ad0:	mvn	r3, #0
   20ad4:	str	r3, [sp, #368]	; 0x170
   20ad8:	cmp	r7, #0
   20adc:	ble	20b1c <__assert_fail@plt+0xf654>
   20ae0:	movw	r3, #43690	; 0xaaaa
   20ae4:	movt	r3, #2730	; 0xaaa
   20ae8:	cmp	r7, r3
   20aec:	bhi	21f94 <__assert_fail@plt+0x10acc>
   20af0:	add	r0, r7, r7, lsl #1
   20af4:	lsl	r0, r0, #3
   20af8:	bl	24808 <__assert_fail@plt+0x13340>
   20afc:	str	r0, [sp, #392]	; 0x188
   20b00:	lsl	r0, r7, #2
   20b04:	bl	24808 <__assert_fail@plt+0x13340>
   20b08:	str	r0, [sp, #408]	; 0x198
   20b0c:	ldr	r3, [sp, #392]	; 0x188
   20b10:	cmp	r0, #0
   20b14:	cmpne	r3, #0
   20b18:	beq	21f94 <__assert_fail@plt+0x10acc>
   20b1c:	str	r7, [sp, #388]	; 0x184
   20b20:	mov	r3, #1
   20b24:	str	r3, [sp, #396]	; 0x18c
   20b28:	str	r7, [sp, #404]	; 0x194
   20b2c:	ldr	r3, [sp, #64]	; 0x40
   20b30:	cmp	r3, #1
   20b34:	bls	20c78 <__assert_fail@plt+0xf7b0>
   20b38:	ldr	r0, [sp, #312]	; 0x138
   20b3c:	cmn	r0, #-1073741822	; 0xc0000002
   20b40:	bhi	21dfc <__assert_fail@plt+0x10934>
   20b44:	add	r0, r0, #1
   20b48:	lsl	r0, r0, #2
   20b4c:	bl	24808 <__assert_fail@plt+0x13340>
   20b50:	str	r0, [sp, #376]	; 0x178
   20b54:	cmp	r0, #0
   20b58:	beq	21e08 <__assert_fail@plt+0x10940>
   20b5c:	str	r4, [sp, #412]	; 0x19c
   20b60:	ldr	r3, [sp, #472]	; 0x1d8
   20b64:	and	r3, r3, #1
   20b68:	cmp	r3, #0
   20b6c:	movne	r3, #4
   20b70:	moveq	r3, #6
   20b74:	str	r3, [sp, #336]	; 0x150
   20b78:	cmp	r4, r6
   20b7c:	mvngt	r3, #0
   20b80:	movle	r3, #1
   20b84:	str	r3, [sp, #92]	; 0x5c
   20b88:	movlt	r3, r4
   20b8c:	movge	r3, r6
   20b90:	str	r3, [sp, #56]	; 0x38
   20b94:	movge	r3, r4
   20b98:	movlt	r3, r6
   20b9c:	str	r3, [sp, #48]	; 0x30
   20ba0:	ldr	r3, [sl, #92]	; 0x5c
   20ba4:	str	r3, [sp, #88]	; 0x58
   20ba8:	ldr	r2, [sp, #32]
   20bac:	cmp	r2, #0
   20bb0:	beq	20c88 <__assert_fail@plt+0xf7c0>
   20bb4:	cmp	r3, #1
   20bb8:	moveq	r3, #4
   20bbc:	beq	20be0 <__assert_fail@plt+0xf718>
   20bc0:	ldr	r3, [sp, #20]
   20bc4:	ldr	r3, [r3, #12]
   20bc8:	and	r3, r3, #4194304	; 0x400000
   20bcc:	ldr	r2, [sp, #68]	; 0x44
   20bd0:	orr	r3, r2, r3
   20bd4:	cmp	r3, #0
   20bd8:	ldr	r3, [sp, #76]	; 0x4c
   20bdc:	moveq	r3, #4
   20be0:	ldr	r2, [sp, #76]	; 0x4c
   20be4:	cmp	r4, r6
   20be8:	movle	r2, #2
   20bec:	ldr	r1, [sp, #68]	; 0x44
   20bf0:	cmp	r1, #0
   20bf4:	orrne	r3, r3, #1
   20bf8:	orr	r3, r3, r2
   20bfc:	str	r3, [sp, #80]	; 0x50
   20c00:	ldr	r3, [sp, #48]	; 0x30
   20c04:	cmp	r4, r3
   20c08:	movle	r3, #0
   20c0c:	movgt	r3, #1
   20c10:	ldr	r2, [sp, #56]	; 0x38
   20c14:	cmp	r4, r2
   20c18:	orrlt	r3, r3, #1
   20c1c:	str	r3, [sp, #84]	; 0x54
   20c20:	cmp	r3, #0
   20c24:	bne	21e14 <__assert_fail@plt+0x1094c>
   20c28:	str	r5, [sp, #16]
   20c2c:	add	r3, sp, #416	; 0x1a0
   20c30:	cmp	r4, r6
   20c34:	suble	r3, r3, #4
   20c38:	movgt	r3, #0
   20c3c:	str	r3, [sp, #96]	; 0x60
   20c40:	adds	r3, r3, #0
   20c44:	movne	r3, #1
   20c48:	str	r3, [sp, #100]	; 0x64
   20c4c:	mov	r3, #65280	; 0xff00
   20c50:	movt	r3, #3
   20c54:	str	r3, [sp, #40]	; 0x28
   20c58:	str	sl, [sp, #52]	; 0x34
   20c5c:	b	22034 <__assert_fail@plt+0x10b6c>
   20c60:	and	r2, r2, #1
   20c64:	cmp	r2, #0
   20c68:	ldr	r3, [sp, #32]
   20c6c:	movne	r3, #0
   20c70:	str	r3, [sp, #32]
   20c74:	b	20914 <__assert_fail@plt+0xf44c>
   20c78:	ldrb	r3, [sl, #88]	; 0x58
   20c7c:	tst	r3, #2
   20c80:	beq	20b5c <__assert_fail@plt+0xf694>
   20c84:	b	20b38 <__assert_fail@plt+0xf670>
   20c88:	mov	r3, #8
   20c8c:	str	r3, [sp, #80]	; 0x50
   20c90:	b	20c00 <__assert_fail@plt+0xf738>
   20c94:	ldr	r5, [sp, #76]	; 0x4c
   20c98:	ldr	r4, [sp, #412]	; 0x19c
   20c9c:	ldr	r3, [sp, #300]	; 0x12c
   20ca0:	sub	r3, r4, r3
   20ca4:	ldr	r2, [sp, #308]	; 0x134
   20ca8:	cmp	r2, r3
   20cac:	bhi	20cd4 <__assert_fail@plt+0xf80c>
   20cb0:	ldr	r2, [sp, #472]	; 0x1d8
   20cb4:	mov	r1, r4
   20cb8:	add	r0, sp, #276	; 0x114
   20cbc:	bl	1bb04 <__assert_fail@plt+0xa63c>
   20cc0:	subs	r3, r0, #0
   20cc4:	str	r3, [sp, #24]
   20cc8:	bne	21e30 <__assert_fail@plt+0x10968>
   20ccc:	ldr	r3, [sp, #300]	; 0x12c
   20cd0:	sub	r3, r4, r3
   20cd4:	ldr	r2, [sp, #304]	; 0x130
   20cd8:	cmp	r2, r3
   20cdc:	ldrhi	r2, [sp, #280]	; 0x118
   20ce0:	ldrbhi	r3, [r2, r3]
   20ce4:	movls	r3, r5
   20ce8:	ldr	r2, [sp, #32]
   20cec:	ldrb	r3, [r2, r3]
   20cf0:	cmp	r3, #0
   20cf4:	bne	20eec <__assert_fail@plt+0xfa24>
   20cf8:	ldr	r3, [sp, #92]	; 0x5c
   20cfc:	add	r4, r4, r3
   20d00:	str	r4, [sp, #412]	; 0x19c
   20d04:	ldr	r3, [sp, #48]	; 0x30
   20d08:	cmp	r4, r3
   20d0c:	movle	r3, #0
   20d10:	movgt	r3, #1
   20d14:	ldr	r2, [sp, #56]	; 0x38
   20d18:	cmp	r4, r2
   20d1c:	movge	r4, r3
   20d20:	orrlt	r4, r3, #1
   20d24:	cmp	r4, #0
   20d28:	beq	20c98 <__assert_fail@plt+0xf7d0>
   20d2c:	ldr	sl, [sp, #52]	; 0x34
   20d30:	mov	r3, #1
   20d34:	str	r3, [sp, #24]
   20d38:	b	20e8c <__assert_fail@plt+0xf9c4>
   20d3c:	ldr	r2, [sp, #412]	; 0x19c
   20d40:	ldr	r3, [sp, #48]	; 0x30
   20d44:	cmp	r3, r2
   20d48:	ble	20edc <__assert_fail@plt+0xfa14>
   20d4c:	ldr	r1, [sp, #44]	; 0x2c
   20d50:	add	r3, r1, r2
   20d54:	ldrb	r2, [r1, r2]
   20d58:	ldr	r1, [sp, #68]	; 0x44
   20d5c:	ldrb	r2, [r1, r2]
   20d60:	ldr	r1, [sp, #32]
   20d64:	ldrb	r2, [r1, r2]
   20d68:	cmp	r2, #0
   20d6c:	bne	20eec <__assert_fail@plt+0xfa24>
   20d70:	ldr	r2, [sp, #44]	; 0x2c
   20d74:	sub	r1, r2, #1
   20d78:	ldr	r0, [sp, #48]	; 0x30
   20d7c:	add	r1, r1, r0
   20d80:	rsb	ip, r2, #1
   20d84:	ldr	lr, [sp, #32]
   20d88:	ldr	r4, [sp, #68]	; 0x44
   20d8c:	add	r0, ip, r3
   20d90:	cmp	r3, r1
   20d94:	beq	20fc0 <__assert_fail@plt+0xfaf8>
   20d98:	ldrb	r2, [r3, #1]!
   20d9c:	ldrb	r2, [r4, r2]
   20da0:	ldrb	r2, [lr, r2]
   20da4:	cmp	r2, #0
   20da8:	beq	20d8c <__assert_fail@plt+0xf8c4>
   20dac:	str	r0, [sp, #412]	; 0x19c
   20db0:	b	20eec <__assert_fail@plt+0xfa24>
   20db4:	ldr	r2, [sp, #412]	; 0x19c
   20db8:	ldr	r3, [sp, #48]	; 0x30
   20dbc:	cmp	r3, r2
   20dc0:	ble	20edc <__assert_fail@plt+0xfa14>
   20dc4:	ldr	r1, [sp, #44]	; 0x2c
   20dc8:	add	r3, r1, r2
   20dcc:	ldrb	r2, [r1, r2]
   20dd0:	ldr	r1, [sp, #32]
   20dd4:	ldrb	r2, [r1, r2]
   20dd8:	cmp	r2, #0
   20ddc:	bne	20eec <__assert_fail@plt+0xfa24>
   20de0:	ldr	r2, [sp, #44]	; 0x2c
   20de4:	sub	r1, r2, #1
   20de8:	ldr	r0, [sp, #48]	; 0x30
   20dec:	add	r1, r1, r0
   20df0:	rsb	ip, r2, #1
   20df4:	ldr	lr, [sp, #32]
   20df8:	add	r0, ip, r3
   20dfc:	cmp	r1, r3
   20e00:	beq	20ed8 <__assert_fail@plt+0xfa10>
   20e04:	ldrb	r2, [r3, #1]!
   20e08:	ldrb	r2, [lr, r2]
   20e0c:	cmp	r2, #0
   20e10:	beq	20df8 <__assert_fail@plt+0xf930>
   20e14:	str	r0, [sp, #412]	; 0x19c
   20e18:	b	20eec <__assert_fail@plt+0xfa24>
   20e1c:	ldr	r3, [sp, #412]	; 0x19c
   20e20:	ldr	r2, [sp, #56]	; 0x38
   20e24:	cmp	r2, r3
   20e28:	bgt	20ec8 <__assert_fail@plt+0xfa00>
   20e2c:	ldr	r1, [sp, #84]	; 0x54
   20e30:	ldr	ip, [sp, #76]	; 0x4c
   20e34:	mov	r0, #1
   20e38:	ldr	r4, [sp, #32]
   20e3c:	ldr	lr, [sp, #68]	; 0x44
   20e40:	ldr	r6, [sp, #56]	; 0x38
   20e44:	ldr	r7, [sp, #44]	; 0x2c
   20e48:	ldr	r5, [sp, #60]	; 0x3c
   20e4c:	cmp	r5, r3
   20e50:	ldrbgt	r2, [r7, r3]
   20e54:	movle	r2, ip
   20e58:	cmp	lr, #0
   20e5c:	ldrbne	r2, [lr, r2]
   20e60:	ldrb	r2, [r4, r2]
   20e64:	cmp	r2, #0
   20e68:	bne	21008 <__assert_fail@plt+0xfb40>
   20e6c:	sub	r3, r3, #1
   20e70:	mov	r1, r0
   20e74:	cmp	r3, r6
   20e78:	bge	20e4c <__assert_fail@plt+0xf984>
   20e7c:	ldr	sl, [sp, #52]	; 0x34
   20e80:	str	r3, [sp, #412]	; 0x19c
   20e84:	mov	r3, #1
   20e88:	str	r3, [sp, #24]
   20e8c:	ldr	r0, [sp, #376]	; 0x178
   20e90:	bl	135a4 <__assert_fail@plt+0x20dc>
   20e94:	ldr	r3, [sl, #76]	; 0x4c
   20e98:	cmp	r3, #0
   20e9c:	bne	21e40 <__assert_fail@plt+0x10978>
   20ea0:	add	r0, sp, #276	; 0x114
   20ea4:	bl	1932c <__assert_fail@plt+0x7e64>
   20ea8:	ldr	r0, [sp, #24]
   20eac:	add	sp, sp, #420	; 0x1a4
   20eb0:	ldrd	r4, [sp]
   20eb4:	ldrd	r6, [sp, #8]
   20eb8:	ldrd	r8, [sp, #16]
   20ebc:	ldrd	sl, [sp, #24]
   20ec0:	add	sp, sp, #32
   20ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   20ec8:	ldr	sl, [sp, #52]	; 0x34
   20ecc:	mov	r3, #1
   20ed0:	str	r3, [sp, #24]
   20ed4:	b	20e8c <__assert_fail@plt+0xf9c4>
   20ed8:	str	r0, [sp, #412]	; 0x19c
   20edc:	ldr	r3, [sp, #412]	; 0x19c
   20ee0:	ldr	r2, [sp, #48]	; 0x30
   20ee4:	cmp	r3, r2
   20ee8:	beq	20fc8 <__assert_fail@plt+0xfb00>
   20eec:	ldr	r2, [sp, #472]	; 0x1d8
   20ef0:	ldr	r1, [sp, #412]	; 0x19c
   20ef4:	add	r0, sp, #276	; 0x114
   20ef8:	bl	1bb04 <__assert_fail@plt+0xa63c>
   20efc:	subs	r3, r0, #0
   20f00:	str	r3, [sp, #24]
   20f04:	bne	21e38 <__assert_fail@plt+0x10970>
   20f08:	ldr	r3, [sp, #88]	; 0x58
   20f0c:	cmp	r3, #1
   20f10:	beq	20f30 <__assert_fail@plt+0xfa68>
   20f14:	ldr	r3, [sp, #304]	; 0x130
   20f18:	cmp	r3, #0
   20f1c:	beq	20f30 <__assert_fail@plt+0xfa68>
   20f20:	ldr	r3, [sp, #284]	; 0x11c
   20f24:	ldr	r3, [r3]
   20f28:	cmn	r3, #1
   20f2c:	beq	21ffc <__assert_fail@plt+0x10b34>
   20f30:	mov	r3, #0
   20f34:	str	r3, [sp, #396]	; 0x18c
   20f38:	str	r3, [sp, #384]	; 0x180
   20f3c:	str	r3, [sp, #380]	; 0x17c
   20f40:	ldr	r4, [sp, #360]	; 0x168
   20f44:	ldr	r1, [sp, #316]	; 0x13c
   20f48:	str	r1, [sp, #36]	; 0x24
   20f4c:	str	r3, [sp, #112]	; 0x70
   20f50:	ldr	r5, [r4, #36]	; 0x24
   20f54:	ldrsb	r3, [r5, #52]	; 0x34
   20f58:	cmp	r3, #0
   20f5c:	bge	21030 <__assert_fail@plt+0xfb68>
   20f60:	ldr	r2, [sp, #364]	; 0x16c
   20f64:	sub	r1, r1, #1
   20f68:	add	r0, sp, #276	; 0x114
   20f6c:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   20f70:	tst	r0, #1
   20f74:	bne	2102c <__assert_fail@plt+0xfb64>
   20f78:	cmp	r0, #0
   20f7c:	beq	21030 <__assert_fail@plt+0xfb68>
   20f80:	and	r3, r0, #6
   20f84:	cmp	r3, #6
   20f88:	beq	21078 <__assert_fail@plt+0xfbb0>
   20f8c:	tst	r0, #2
   20f90:	bne	21080 <__assert_fail@plt+0xfbb8>
   20f94:	tst	r0, #4
   20f98:	beq	21030 <__assert_fail@plt+0xfb68>
   20f9c:	mov	r3, r0
   20fa0:	ldr	r2, [r5, #40]	; 0x28
   20fa4:	mov	r1, r4
   20fa8:	add	r0, sp, #112	; 0x70
   20fac:	bl	18fdc <__assert_fail@plt+0x7b14>
   20fb0:	subs	r5, r0, #0
   20fb4:	bne	21030 <__assert_fail@plt+0xfb68>
   20fb8:	ldr	sl, [sp, #52]	; 0x34
   20fbc:	b	21f7c <__assert_fail@plt+0x10ab4>
   20fc0:	str	r0, [sp, #412]	; 0x19c
   20fc4:	b	20edc <__assert_fail@plt+0xfa14>
   20fc8:	ldr	r2, [sp, #60]	; 0x3c
   20fcc:	cmp	r3, r2
   20fd0:	ldrlt	r2, [sp, #44]	; 0x2c
   20fd4:	ldrblt	r3, [r2, r3]
   20fd8:	ldrge	r3, [sp, #76]	; 0x4c
   20fdc:	ldr	r2, [sp, #68]	; 0x44
   20fe0:	cmp	r2, #0
   20fe4:	ldrbne	r3, [r2, r3]
   20fe8:	ldr	r2, [sp, #32]
   20fec:	ldrb	r3, [r2, r3]
   20ff0:	cmp	r3, #0
   20ff4:	bne	20eec <__assert_fail@plt+0xfa24>
   20ff8:	ldr	sl, [sp, #52]	; 0x34
   20ffc:	mov	r3, #1
   21000:	str	r3, [sp, #24]
   21004:	b	20e8c <__assert_fail@plt+0xf9c4>
   21008:	cmp	r1, #0
   2100c:	strne	r3, [sp, #412]	; 0x19c
   21010:	ldr	r2, [sp, #56]	; 0x38
   21014:	cmp	r2, r3
   21018:	ble	20eec <__assert_fail@plt+0xfa24>
   2101c:	ldr	sl, [sp, #52]	; 0x34
   21020:	mov	r3, #1
   21024:	str	r3, [sp, #24]
   21028:	b	20e8c <__assert_fail@plt+0xf9c4>
   2102c:	ldr	r5, [r4, #40]	; 0x28
   21030:	ldr	r3, [sp, #376]	; 0x178
   21034:	cmp	r3, #0
   21038:	beq	210e4 <__assert_fail@plt+0xfc1c>
   2103c:	ldr	r2, [sp, #36]	; 0x24
   21040:	str	r5, [r3, r2, lsl #2]
   21044:	ldr	r3, [r4, #76]	; 0x4c
   21048:	cmp	r3, #0
   2104c:	ldreq	sl, [sp, #100]	; 0x64
   21050:	bne	21088 <__assert_fail@plt+0xfbc0>
   21054:	ldrb	r3, [r5, #52]	; 0x34
   21058:	tst	r3, #16
   2105c:	bne	210ec <__assert_fail@plt+0xfc24>
   21060:	ldr	r3, [sp, #24]
   21064:	str	r3, [sp, #12]
   21068:	mvn	fp, #0
   2106c:	ldr	r3, [sp, #96]	; 0x60
   21070:	str	r3, [sp, #28]
   21074:	b	21490 <__assert_fail@plt+0xffc8>
   21078:	ldr	r5, [r4, #48]	; 0x30
   2107c:	b	21030 <__assert_fail@plt+0xfb68>
   21080:	ldr	r5, [r4, #44]	; 0x2c
   21084:	b	21030 <__assert_fail@plt+0xfb68>
   21088:	add	r4, r5, #4
   2108c:	mov	r2, #0
   21090:	mov	r1, r4
   21094:	add	r0, sp, #276	; 0x114
   21098:	bl	1a430 <__assert_fail@plt+0x8f68>
   2109c:	mov	fp, r0
   210a0:	str	r0, [sp, #112]	; 0x70
   210a4:	cmp	r0, #0
   210a8:	bne	22200 <__assert_fail@plt+0x10d38>
   210ac:	ldrb	r3, [r5, #52]	; 0x34
   210b0:	tst	r3, #64	; 0x40
   210b4:	bne	210c0 <__assert_fail@plt+0xfbf8>
   210b8:	ldr	sl, [sp, #84]	; 0x54
   210bc:	b	21054 <__assert_fail@plt+0xfb8c>
   210c0:	mov	r1, r4
   210c4:	add	r0, sp, #276	; 0x114
   210c8:	bl	1f650 <__assert_fail@plt+0xe188>
   210cc:	mov	fp, r0
   210d0:	str	r0, [sp, #112]	; 0x70
   210d4:	cmp	r0, #0
   210d8:	bne	22200 <__assert_fail@plt+0x10d38>
   210dc:	ldr	sl, [sp, #84]	; 0x54
   210e0:	b	21054 <__assert_fail@plt+0xfb8c>
   210e4:	ldr	sl, [sp, #100]	; 0x64
   210e8:	b	21054 <__assert_fail@plt+0xfb8c>
   210ec:	ldrsb	r3, [r5, #52]	; 0x34
   210f0:	cmp	r3, #0
   210f4:	blt	21114 <__assert_fail@plt+0xfc4c>
   210f8:	ldr	r3, [sp, #16]
   210fc:	cmp	r3, #0
   21100:	beq	21138 <__assert_fail@plt+0xfc70>
   21104:	ldr	fp, [sp, #36]	; 0x24
   21108:	mov	r3, #1
   2110c:	str	r3, [sp, #12]
   21110:	b	2106c <__assert_fail@plt+0xfba4>
   21114:	ldr	r2, [sp, #36]	; 0x24
   21118:	mov	r1, r5
   2111c:	add	r0, sp, #276	; 0x114
   21120:	bl	1a74c <__assert_fail@plt+0x9284>
   21124:	subs	r3, r0, #0
   21128:	str	r3, [sp, #12]
   2112c:	bne	210f8 <__assert_fail@plt+0xfc30>
   21130:	mvn	fp, #0
   21134:	b	2106c <__assert_fail@plt+0xfba4>
   21138:	ldr	fp, [sp, #36]	; 0x24
   2113c:	b	22200 <__assert_fail@plt+0x10d38>
   21140:	ldr	r2, [sp, #324]	; 0x144
   21144:	cmp	r3, r2
   21148:	bge	214b0 <__assert_fail@plt+0xffe8>
   2114c:	add	r1, r1, #2
   21150:	add	r0, sp, #276	; 0x114
   21154:	bl	17fb8 <__assert_fail@plt+0x6af0>
   21158:	str	r0, [sp, #112]	; 0x70
   2115c:	cmp	r0, #0
   21160:	beq	214bc <__assert_fail@plt+0xfff4>
   21164:	ldr	sl, [sp, #52]	; 0x34
   21168:	b	21f7c <__assert_fail@plt+0x10ab4>
   2116c:	ldr	r2, [sp, #324]	; 0x144
   21170:	cmp	r3, r2
   21174:	bge	214bc <__assert_fail@plt+0xfff4>
   21178:	b	2114c <__assert_fail@plt+0xfc84>
   2117c:	ldr	r6, [sp, #360]	; 0x168
   21180:	ldr	r3, [r5, #8]
   21184:	cmp	r3, #0
   21188:	ble	21f88 <__assert_fail@plt+0x10ac0>
   2118c:	ldr	r7, [sp, #24]
   21190:	b	212a4 <__assert_fail@plt+0xfddc>
   21194:	tst	r3, #8
   21198:	beq	211a4 <__assert_fail@plt+0xfcdc>
   2119c:	tst	r0, #1
   211a0:	bne	21294 <__assert_fail@plt+0xfdcc>
   211a4:	tst	r3, #32
   211a8:	beq	211b4 <__assert_fail@plt+0xfcec>
   211ac:	tst	r0, #2
   211b0:	beq	21294 <__assert_fail@plt+0xfdcc>
   211b4:	tst	r3, #128	; 0x80
   211b8:	beq	211c4 <__assert_fail@plt+0xfcfc>
   211bc:	tst	r0, #8
   211c0:	beq	21294 <__assert_fail@plt+0xfdcc>
   211c4:	ldr	r3, [sp, #316]	; 0x13c
   211c8:	add	r2, sp, #276	; 0x114
   211cc:	mov	r1, r8
   211d0:	mov	r0, r6
   211d4:	bl	1b5d0 <__assert_fail@plt+0xa108>
   211d8:	cmp	r0, #0
   211dc:	beq	21294 <__assert_fail@plt+0xfdcc>
   211e0:	ldr	r4, [sp, #316]	; 0x13c
   211e4:	add	r4, r0, r4
   211e8:	ldr	r3, [sp, #396]	; 0x18c
   211ec:	cmp	r3, r0
   211f0:	movlt	r3, r0
   211f4:	str	r3, [sp, #396]	; 0x18c
   211f8:	mov	r1, r4
   211fc:	add	r0, sp, #276	; 0x114
   21200:	bl	1a564 <__assert_fail@plt+0x909c>
   21204:	str	r0, [sp, #124]	; 0x7c
   21208:	cmp	r0, #0
   2120c:	bne	2134c <__assert_fail@plt+0xfe84>
   21210:	ldr	r3, [r6, #12]
   21214:	ldr	r3, [r3, r8, lsl #2]
   21218:	add	r3, r3, r3, lsl #1
   2121c:	lsl	r3, r3, #2
   21220:	ldr	r0, [r6, #24]
   21224:	add	r2, r0, r3
   21228:	ldr	r8, [sp, #376]	; 0x178
   2122c:	ldr	r1, [r8, r4, lsl #2]
   21230:	cmp	r1, #0
   21234:	beq	21304 <__assert_fail@plt+0xfe3c>
   21238:	ldr	r1, [r1, #40]	; 0x28
   2123c:	add	r0, sp, #136	; 0x88
   21240:	bl	17808 <__assert_fail@plt+0x6340>
   21244:	str	r0, [sp, #124]	; 0x7c
   21248:	cmp	r0, #0
   2124c:	bne	2134c <__assert_fail@plt+0xfe84>
   21250:	ldr	r2, [sp, #364]	; 0x16c
   21254:	sub	r1, r4, #1
   21258:	add	r0, sp, #276	; 0x114
   2125c:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   21260:	ldr	r8, [sp, #376]	; 0x178
   21264:	mov	r3, r0
   21268:	add	r2, sp, #136	; 0x88
   2126c:	mov	r1, r6
   21270:	add	r0, sp, #124	; 0x7c
   21274:	bl	18fdc <__assert_fail@plt+0x7b14>
   21278:	str	r0, [r8, r4, lsl #2]
   2127c:	ldr	r0, [sp, #144]	; 0x90
   21280:	bl	135a4 <__assert_fail@plt+0x20dc>
   21284:	ldr	r3, [sp, #376]	; 0x178
   21288:	ldr	r3, [r3, r4, lsl #2]
   2128c:	cmp	r3, #0
   21290:	beq	21340 <__assert_fail@plt+0xfe78>
   21294:	add	r7, r7, #1
   21298:	ldr	r3, [r5, #8]
   2129c:	cmp	r7, r3
   212a0:	bge	21f88 <__assert_fail@plt+0x10ac0>
   212a4:	ldr	r3, [r5, #12]
   212a8:	ldr	r8, [r3, r7, lsl #2]
   212ac:	ldr	r4, [r6]
   212b0:	add	r4, r4, r8, lsl #3
   212b4:	ldrb	r3, [r4, #6]
   212b8:	tst	r3, #16
   212bc:	beq	21294 <__assert_fail@plt+0xfdcc>
   212c0:	ldr	r3, [r4, #4]
   212c4:	ldr	r2, [sp, #40]	; 0x28
   212c8:	tst	r2, r3
   212cc:	beq	211c4 <__assert_fail@plt+0xfcfc>
   212d0:	ldr	r2, [sp, #364]	; 0x16c
   212d4:	ldr	r1, [sp, #316]	; 0x13c
   212d8:	add	r0, sp, #276	; 0x114
   212dc:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   212e0:	ldr	r3, [r4, #4]
   212e4:	ubfx	r3, r3, #8, #10
   212e8:	tst	r3, #4
   212ec:	beq	21194 <__assert_fail@plt+0xfccc>
   212f0:	tst	r0, #1
   212f4:	beq	21294 <__assert_fail@plt+0xfdcc>
   212f8:	tst	r3, #8
   212fc:	beq	211a4 <__assert_fail@plt+0xfcdc>
   21300:	b	21294 <__assert_fail@plt+0xfdcc>
   21304:	ldrd	r0, [r0, r3]
   21308:	strd	r0, [sp, #136]	; 0x88
   2130c:	ldr	r3, [r2, #8]
   21310:	str	r3, [sp, #144]	; 0x90
   21314:	ldr	r2, [sp, #364]	; 0x16c
   21318:	sub	r1, r4, #1
   2131c:	add	r0, sp, #276	; 0x114
   21320:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   21324:	mov	r3, r0
   21328:	add	r2, sp, #136	; 0x88
   2132c:	mov	r1, r6
   21330:	add	r0, sp, #124	; 0x7c
   21334:	bl	18fdc <__assert_fail@plt+0x7b14>
   21338:	str	r0, [r8, r4, lsl #2]
   2133c:	b	21284 <__assert_fail@plt+0xfdbc>
   21340:	ldr	r0, [sp, #124]	; 0x7c
   21344:	cmp	r0, #0
   21348:	beq	21294 <__assert_fail@plt+0xfdcc>
   2134c:	str	r0, [sp, #112]	; 0x70
   21350:	ldr	r3, [sp, #376]	; 0x178
   21354:	cmp	r3, #0
   21358:	beq	221d8 <__assert_fail@plt+0x10d10>
   2135c:	mov	r4, #0
   21360:	b	214f8 <__assert_fail@plt+0x10030>
   21364:	ldr	r6, [r5, #48]	; 0x30
   21368:	cmp	r6, #0
   2136c:	beq	21394 <__assert_fail@plt+0xfecc>
   21370:	ldr	r2, [sp, #364]	; 0x16c
   21374:	ldr	r1, [sp, #316]	; 0x13c
   21378:	sub	r1, r1, #1
   2137c:	add	r0, sp, #276	; 0x114
   21380:	bl	1a1b4 <__assert_fail@plt+0x8cec>
   21384:	tst	r0, #1
   21388:	addne	r4, r4, #256	; 0x100
   2138c:	ldr	r4, [r6, r4, lsl #2]
   21390:	b	214ec <__assert_fail@plt+0x10024>
   21394:	mov	r1, r5
   21398:	ldr	r0, [sp, #360]	; 0x168
   2139c:	bl	1c23c <__assert_fail@plt+0xad74>
   213a0:	cmp	r0, #0
   213a4:	bne	214dc <__assert_fail@plt+0x10014>
   213a8:	mov	r3, #12
   213ac:	str	r3, [sp, #112]	; 0x70
   213b0:	b	21350 <__assert_fail@plt+0xfe88>
   213b4:	ldr	r3, [sp, #112]	; 0x70
   213b8:	cmp	r3, #0
   213bc:	bne	21f78 <__assert_fail@plt+0x10ab0>
   213c0:	ldr	r3, [sp, #376]	; 0x178
   213c4:	cmp	r3, #0
   213c8:	beq	221e4 <__assert_fail@plt+0x10d1c>
   213cc:	ldr	r3, [sp, #12]
   213d0:	ldr	r2, [sp, #16]
   213d4:	cmp	r3, #0
   213d8:	eorne	r3, r2, #1
   213dc:	moveq	r3, #0
   213e0:	cmp	r3, #0
   213e4:	bne	221e4 <__assert_fail@plt+0x10d1c>
   213e8:	mov	r6, #0
   213ec:	ldr	r0, [sp, #380]	; 0x17c
   213f0:	ldr	r2, [sp, #316]	; 0x13c
   213f4:	ldr	r3, [sp, #376]	; 0x178
   213f8:	add	r3, r3, r2, lsl #2
   213fc:	add	r2, r2, #1
   21400:	cmp	r0, r2
   21404:	blt	221e4 <__assert_fail@plt+0x10d1c>
   21408:	ldr	r1, [sp, #316]	; 0x13c
   2140c:	add	r1, r1, #1
   21410:	str	r1, [sp, #316]	; 0x13c
   21414:	ldr	r1, [r3, #4]!
   21418:	cmp	r1, #0
   2141c:	beq	213fc <__assert_fail@plt+0xff34>
   21420:	mov	r2, r6
   21424:	add	r1, sp, #276	; 0x114
   21428:	add	r0, sp, #112	; 0x70
   2142c:	bl	1fd50 <__assert_fail@plt+0xe888>
   21430:	ldr	r3, [sp, #112]	; 0x70
   21434:	orrs	r3, r0, r3
   21438:	beq	213ec <__assert_fail@plt+0xff24>
   2143c:	mov	r4, r0
   21440:	cmp	r0, #0
   21444:	bne	21514 <__assert_fail@plt+0x1004c>
   21448:	b	221e4 <__assert_fail@plt+0x10d1c>
   2144c:	ldr	r3, [sp, #84]	; 0x54
   21450:	cmp	r5, r4
   21454:	movne	sl, r3
   21458:	ldr	r3, [sp, #36]	; 0x24
   2145c:	cmp	r5, r4
   21460:	moveq	r3, r9
   21464:	str	r3, [sp, #36]	; 0x24
   21468:	b	2151c <__assert_fail@plt+0x10054>
   2146c:	ldr	fp, [sp, #316]	; 0x13c
   21470:	ldr	r3, [sp, #16]
   21474:	cmp	r3, #0
   21478:	beq	22200 <__assert_fail@plt+0x10d38>
   2147c:	mov	r3, #1
   21480:	str	r3, [sp, #12]
   21484:	mov	r3, #0
   21488:	str	r3, [sp, #28]
   2148c:	mov	r5, r4
   21490:	ldr	r1, [sp, #316]	; 0x13c
   21494:	ldr	r3, [sp, #332]	; 0x14c
   21498:	cmp	r1, r3
   2149c:	bge	221e4 <__assert_fail@plt+0x10d1c>
   214a0:	add	r9, r1, #1
   214a4:	ldr	r3, [sp, #312]	; 0x138
   214a8:	cmp	r9, r3
   214ac:	bge	21140 <__assert_fail@plt+0xfc78>
   214b0:	ldr	r3, [sp, #304]	; 0x130
   214b4:	cmp	r9, r3
   214b8:	bge	2116c <__assert_fail@plt+0xfca4>
   214bc:	ldrb	r3, [r5, #52]	; 0x34
   214c0:	tst	r3, #32
   214c4:	bne	2117c <__assert_fail@plt+0xfcb4>
   214c8:	ldr	r3, [sp, #316]	; 0x13c
   214cc:	add	r2, r3, #1
   214d0:	str	r2, [sp, #316]	; 0x13c
   214d4:	ldr	r2, [sp, #280]	; 0x118
   214d8:	ldrb	r4, [r2, r3]
   214dc:	ldr	r3, [r5, #44]	; 0x2c
   214e0:	cmp	r3, #0
   214e4:	beq	21364 <__assert_fail@plt+0xfe9c>
   214e8:	ldr	r4, [r3, r4, lsl #2]
   214ec:	ldr	r3, [sp, #376]	; 0x178
   214f0:	cmp	r3, #0
   214f4:	beq	2150c <__assert_fail@plt+0x10044>
   214f8:	mov	r2, r4
   214fc:	add	r1, sp, #276	; 0x114
   21500:	add	r0, sp, #112	; 0x70
   21504:	bl	1fd50 <__assert_fail@plt+0xe888>
   21508:	mov	r4, r0
   2150c:	cmp	r4, #0
   21510:	beq	213b4 <__assert_fail@plt+0xfeec>
   21514:	cmp	sl, #0
   21518:	bne	2144c <__assert_fail@plt+0xff84>
   2151c:	ldrb	r3, [r4, #52]	; 0x34
   21520:	tst	r3, #16
   21524:	beq	2148c <__assert_fail@plt+0xffc4>
   21528:	tst	r3, #128	; 0x80
   2152c:	beq	2146c <__assert_fail@plt+0xffa4>
   21530:	ldr	r2, [sp, #316]	; 0x13c
   21534:	mov	r1, r4
   21538:	add	r0, sp, #276	; 0x114
   2153c:	bl	1a74c <__assert_fail@plt+0x9284>
   21540:	cmp	r0, #0
   21544:	beq	2148c <__assert_fail@plt+0xffc4>
   21548:	b	2146c <__assert_fail@plt+0xffa4>
   2154c:	ldr	r9, [sp, #28]
   21550:	mov	r3, sl
   21554:	ldr	sl, [sp, #12]
   21558:	mov	r2, r5
   2155c:	mov	r1, r4
   21560:	mov	r0, r9
   21564:	bl	1eb24 <__assert_fail@plt+0xd65c>
   21568:	mov	r8, r0
   2156c:	mov	r0, r5
   21570:	bl	135a4 <__assert_fail@plt+0x20dc>
   21574:	cmp	r8, #0
   21578:	beq	215d0 <__assert_fail@plt+0x10108>
   2157c:	mov	r5, #0
   21580:	b	21fdc <__assert_fail@plt+0x10b14>
   21584:	str	r4, [sp, #136]	; 0x88
   21588:	mov	r3, #0
   2158c:	str	r3, [sp, #140]	; 0x8c
   21590:	str	r7, [sp, #144]	; 0x90
   21594:	str	fp, [sp, #148]	; 0x94
   21598:	str	r3, [sp, #152]	; 0x98
   2159c:	str	r3, [sp, #156]	; 0x9c
   215a0:	str	r3, [sp, #160]	; 0xa0
   215a4:	add	r1, sp, #136	; 0x88
   215a8:	add	r0, sp, #276	; 0x114
   215ac:	bl	205b0 <__assert_fail@plt+0xf0e8>
   215b0:	mov	r8, r0
   215b4:	ldr	r0, [sp, #160]	; 0xa0
   215b8:	bl	135a4 <__assert_fail@plt+0x20dc>
   215bc:	cmp	r8, #0
   215c0:	bne	21fd8 <__assert_fail@plt+0x10b10>
   215c4:	ldr	r5, [r4]
   215c8:	cmp	r5, #0
   215cc:	beq	21fc4 <__assert_fail@plt+0x10afc>
   215d0:	mov	r8, sl
   215d4:	ldr	sl, [sp, #52]	; 0x34
   215d8:	ldr	r0, [sp, #376]	; 0x178
   215dc:	bl	135a4 <__assert_fail@plt+0x20dc>
   215e0:	str	r4, [sp, #376]	; 0x178
   215e4:	str	r7, [sp, #372]	; 0x174
   215e8:	str	fp, [sp, #368]	; 0x170
   215ec:	mov	r0, #0
   215f0:	bl	135a4 <__assert_fail@plt+0x20dc>
   215f4:	mov	r0, #0
   215f8:	bl	135a4 <__assert_fail@plt+0x20dc>
   215fc:	b	22254 <__assert_fail@plt+0x10d8c>
   21600:	ldr	sl, [sp, #52]	; 0x34
   21604:	mov	r3, #1
   21608:	str	r3, [sp, #24]
   2160c:	b	20e8c <__assert_fail@plt+0xf9c4>
   21610:	mov	r8, sl
   21614:	ldr	sl, [sp, #52]	; 0x34
   21618:	b	22254 <__assert_fail@plt+0x10d8c>
   2161c:	ldrb	r3, [sl, #88]	; 0x58
   21620:	tst	r3, #1
   21624:	beq	21eb0 <__assert_fail@plt+0x109e8>
   21628:	ldr	r3, [sl, #76]	; 0x4c
   2162c:	cmp	r3, #0
   21630:	ble	21eb0 <__assert_fail@plt+0x109e8>
   21634:	ldr	r3, [sp, #20]
   21638:	ldr	r3, [r3]
   2163c:	str	r3, [sp, #16]
   21640:	mov	r3, #0
   21644:	str	r3, [sp, #124]	; 0x7c
   21648:	mov	r2, #2
   2164c:	str	r2, [sp, #128]	; 0x80
   21650:	str	r3, [sp, #132]	; 0x84
   21654:	str	r3, [sp, #136]	; 0x88
   21658:	mov	r3, #16
   2165c:	str	r3, [sp, #140]	; 0x8c
   21660:	add	r3, sp, #148	; 0x94
   21664:	str	r3, [sp, #144]	; 0x90
   21668:	mov	r0, #48	; 0x30
   2166c:	bl	24808 <__assert_fail@plt+0x13340>
   21670:	str	r0, [sp, #132]	; 0x84
   21674:	cmp	r0, #0
   21678:	beq	21ea4 <__assert_fail@plt+0x109dc>
   2167c:	add	fp, sp, #124	; 0x7c
   21680:	b	21ee4 <__assert_fail@plt+0x10a1c>
   21684:	mov	r3, #8
   21688:	add	r2, sp, #148	; 0x94
   2168c:	ldr	r1, [sp, #64]	; 0x40
   21690:	add	r0, sp, #136	; 0x88
   21694:	bl	2492c <__assert_fail@plt+0x13464>
   21698:	cmp	r0, #0
   2169c:	bne	21f14 <__assert_fail@plt+0x10a4c>
   216a0:	ldr	r0, [sp, #144]	; 0x90
   216a4:	add	r3, sp, #148	; 0x94
   216a8:	cmp	r0, r3
   216ac:	beq	216b4 <__assert_fail@plt+0x101ec>
   216b0:	bl	135a4 <__assert_fail@plt+0x20dc>
   216b4:	add	r3, sp, #148	; 0x94
   216b8:	str	r3, [sp, #144]	; 0x90
   216bc:	mov	r3, #0
   216c0:	str	r3, [sp, #136]	; 0x88
   216c4:	mvn	r3, #0
   216c8:	str	r3, [sp, #140]	; 0x8c
   216cc:	add	r0, sp, #136	; 0x88
   216d0:	bl	195d0 <__assert_fail@plt+0x8108>
   216d4:	mov	r0, fp
   216d8:	bl	19618 <__assert_fail@plt+0x8150>
   216dc:	mov	r3, #12
   216e0:	str	r3, [sp, #24]
   216e4:	b	20e8c <__assert_fail@plt+0xf9c4>
   216e8:	ldr	r3, [r2, r7, lsl #3]
   216ec:	add	r3, r3, #1
   216f0:	ldr	r2, [sp, #64]	; 0x40
   216f4:	cmp	r2, r3
   216f8:	ble	21a74 <__assert_fail@plt+0x105ac>
   216fc:	ldr	r2, [sp, #468]	; 0x1d4
   21700:	add	r2, r2, r3, lsl #3
   21704:	ldr	r0, [sp, #468]	; 0x1d4
   21708:	str	r1, [r0, r3, lsl #3]
   2170c:	mvn	r3, #0
   21710:	str	r3, [r2, #4]
   21714:	b	21a74 <__assert_fail@plt+0x105ac>
   21718:	ldr	r3, [r2, r0]
   2171c:	add	r3, r3, #1
   21720:	ldr	r2, [sp, #64]	; 0x40
   21724:	cmp	r2, r3
   21728:	ble	21a74 <__assert_fail@plt+0x105ac>
   2172c:	ldr	r2, [sp, #468]	; 0x1d4
   21730:	add	r2, r2, r3, lsl #3
   21734:	ldr	r0, [sp, #468]	; 0x1d4
   21738:	ldr	r0, [r0, r3, lsl #3]
   2173c:	cmp	r1, r0
   21740:	bgt	21768 <__assert_fail@plt+0x102a0>
   21744:	ldrb	r0, [ip, #6]
   21748:	tst	r0, #8
   2174c:	beq	21760 <__assert_fail@plt+0x10298>
   21750:	ldr	r0, [sp, #32]
   21754:	ldr	r3, [r0, r3, lsl #3]
   21758:	cmn	r3, #1
   2175c:	bne	21780 <__assert_fail@plt+0x102b8>
   21760:	str	r1, [r2, #4]
   21764:	b	21a74 <__assert_fail@plt+0x105ac>
   21768:	str	r1, [r2, #4]
   2176c:	ldr	r2, [sp, #36]	; 0x24
   21770:	ldr	r1, [sp, #468]	; 0x1d4
   21774:	ldr	r0, [sp, #32]
   21778:	bl	11204 <memcpy@plt>
   2177c:	b	21a74 <__assert_fail@plt+0x105ac>
   21780:	ldr	r2, [sp, #36]	; 0x24
   21784:	mov	r1, r0
   21788:	ldr	r0, [sp, #468]	; 0x1d4
   2178c:	bl	11204 <memcpy@plt>
   21790:	b	21a74 <__assert_fail@plt+0x105ac>
   21794:	ldr	r3, [sp, #372]	; 0x174
   21798:	cmp	r7, r3
   2179c:	bne	21a88 <__assert_fail@plt+0x105c0>
   217a0:	cmp	fp, #0
   217a4:	beq	21838 <__assert_fail@plt+0x10370>
   217a8:	ldr	r3, [sp, #24]
   217ac:	b	217b4 <__assert_fail@plt+0x102ec>
   217b0:	ldr	r3, [sp, #24]
   217b4:	ldr	r1, [sp, #12]
   217b8:	b	217c8 <__assert_fail@plt+0x10300>
   217bc:	add	r3, r3, #1
   217c0:	cmp	r1, r3
   217c4:	beq	21818 <__assert_fail@plt+0x10350>
   217c8:	ldr	r2, [sp, #468]	; 0x1d4
   217cc:	ldr	r2, [r2, r3, lsl #3]
   217d0:	cmp	r2, #0
   217d4:	blt	217bc <__assert_fail@plt+0x102f4>
   217d8:	ldr	r2, [r9, r3, lsl #3]
   217dc:	cmn	r2, #1
   217e0:	bne	217bc <__assert_fail@plt+0x102f4>
   217e4:	add	r3, sp, #112	; 0x70
   217e8:	str	r3, [sp, #4]
   217ec:	ldr	r3, [sp, #32]
   217f0:	str	r3, [sp]
   217f4:	ldr	r3, [sp, #468]	; 0x1d4
   217f8:	ldr	r2, [sp, #12]
   217fc:	add	r1, sp, #108	; 0x6c
   21800:	mov	r0, fp
   21804:	bl	1a840 <__assert_fail@plt+0x9378>
   21808:	subs	r7, r0, #0
   2180c:	bge	21aa4 <__assert_fail@plt+0x105dc>
   21810:	ldr	sl, [sp, #28]
   21814:	b	2181c <__assert_fail@plt+0x10354>
   21818:	ldr	sl, [sp, #28]
   2181c:	ldr	r0, [sp, #120]	; 0x78
   21820:	bl	135a4 <__assert_fail@plt+0x20dc>
   21824:	add	r0, sp, #136	; 0x88
   21828:	bl	195d0 <__assert_fail@plt+0x8108>
   2182c:	mov	r0, fp
   21830:	bl	19618 <__assert_fail@plt+0x8150>
   21834:	b	21cdc <__assert_fail@plt+0x10814>
   21838:	ldr	sl, [sp, #28]
   2183c:	b	2181c <__assert_fail@plt+0x10354>
   21840:	mov	r1, r7
   21844:	add	r0, sp, #112	; 0x70
   21848:	bl	1981c <__assert_fail@plt+0x8354>
   2184c:	cmp	r0, #0
   21850:	bne	21af4 <__assert_fail@plt+0x1062c>
   21854:	ldr	sl, [sp, #28]
   21858:	ldr	r0, [sp, #120]	; 0x78
   2185c:	bl	135a4 <__assert_fail@plt+0x20dc>
   21860:	add	r0, sp, #136	; 0x88
   21864:	bl	195d0 <__assert_fail@plt+0x8108>
   21868:	mov	r0, fp
   2186c:	bl	19618 <__assert_fail@plt+0x8150>
   21870:	mov	r3, #12
   21874:	str	r3, [sp, #24]
   21878:	b	20e8c <__assert_fail@plt+0xf9c4>
   2187c:	mov	r1, r7
   21880:	add	r0, sp, #112	; 0x70
   21884:	bl	16194 <__assert_fail@plt+0x4ccc>
   21888:	cmp	r0, #0
   2188c:	bne	21c98 <__assert_fail@plt+0x107d0>
   21890:	cmp	fp, #0
   21894:	beq	21a2c <__assert_fail@plt+0x10564>
   21898:	ldr	r8, [sp, #108]	; 0x6c
   2189c:	ldr	r4, [fp]
   218a0:	add	r3, r4, #1
   218a4:	str	r3, [fp]
   218a8:	ldr	r1, [fp, #4]
   218ac:	cmp	r3, r1
   218b0:	beq	21948 <__assert_fail@plt+0x10480>
   218b4:	add	r4, r4, r4, lsl #1
   218b8:	lsl	r6, r4, #3
   218bc:	ldr	r3, [fp, #8]
   218c0:	str	r8, [r3, r4, lsl #3]
   218c4:	ldr	r3, [fp, #8]
   218c8:	add	r3, r3, r6
   218cc:	str	r5, [r3, #4]
   218d0:	ldr	r4, [fp, #8]
   218d4:	add	r4, r4, r6
   218d8:	ldr	r0, [sp, #40]	; 0x28
   218dc:	bl	24808 <__assert_fail@plt+0x13340>
   218e0:	str	r0, [r4, #8]
   218e4:	ldr	r3, [fp, #8]
   218e8:	add	r3, r3, r6
   218ec:	ldr	r0, [r3, #8]
   218f0:	cmp	r0, #0
   218f4:	beq	21cb0 <__assert_fail@plt+0x107e8>
   218f8:	ldr	r4, [sp, #36]	; 0x24
   218fc:	mov	r2, r4
   21900:	ldr	r1, [sp, #468]	; 0x1d4
   21904:	bl	11204 <memcpy@plt>
   21908:	ldr	r3, [fp, #8]
   2190c:	add	r3, r3, r6
   21910:	ldr	r0, [r3, #8]
   21914:	mov	r2, r4
   21918:	ldr	r1, [sp, #32]
   2191c:	add	r0, r0, r4
   21920:	bl	11204 <memcpy@plt>
   21924:	ldr	r0, [fp, #8]
   21928:	add	r0, r0, r6
   2192c:	add	r1, sp, #112	; 0x70
   21930:	add	r0, r0, #12
   21934:	bl	17780 <__assert_fail@plt+0x62b8>
   21938:	cmp	r0, #0
   2193c:	beq	21a2c <__assert_fail@plt+0x10564>
   21940:	ldr	sl, [sp, #28]
   21944:	b	21858 <__assert_fail@plt+0x10390>
   21948:	add	r1, r1, r1, lsl #1
   2194c:	lsl	r1, r1, #4
   21950:	ldr	r0, [fp, #8]
   21954:	bl	24844 <__assert_fail@plt+0x1337c>
   21958:	cmp	r0, #0
   2195c:	beq	21ca8 <__assert_fail@plt+0x107e0>
   21960:	ldr	r3, [fp, #4]
   21964:	lsl	r3, r3, #1
   21968:	str	r3, [fp, #4]
   2196c:	str	r0, [fp, #8]
   21970:	b	218b4 <__assert_fail@plt+0x103ec>
   21974:	add	r4, r4, #1
   21978:	cmp	sl, r4
   2197c:	beq	21a2c <__assert_fail@plt+0x10564>
   21980:	ldr	r5, [r6, #4]!
   21984:	mov	r1, r5
   21988:	mov	r0, r8
   2198c:	bl	16194 <__assert_fail@plt+0x4ccc>
   21990:	cmp	r0, #0
   21994:	beq	21974 <__assert_fail@plt+0x104ac>
   21998:	cmn	r7, #1
   2199c:	bne	2187c <__assert_fail@plt+0x103b4>
   219a0:	mov	r7, r5
   219a4:	b	21974 <__assert_fail@plt+0x104ac>
   219a8:	ldrb	r3, [r3, #6]
   219ac:	tst	r3, #16
   219b0:	bne	21b14 <__assert_fail@plt+0x1064c>
   219b4:	cmp	r2, #4
   219b8:	beq	21b44 <__assert_fail@plt+0x1067c>
   219bc:	ldr	r5, [sp, #108]	; 0x6c
   219c0:	ldr	r1, [r4]
   219c4:	mov	r2, r5
   219c8:	add	r1, r1, r6
   219cc:	add	r0, sp, #276	; 0x114
   219d0:	bl	1a2c0 <__assert_fail@plt+0x8df8>
   219d4:	cmp	r0, #0
   219d8:	beq	21bd4 <__assert_fail@plt+0x1070c>
   219dc:	ldr	r3, [r4, #12]
   219e0:	ldr	r7, [r3, r8, lsl #2]
   219e4:	add	r5, r5, #1
   219e8:	str	r5, [sp, #108]	; 0x6c
   219ec:	cmp	fp, #0
   219f0:	beq	21a24 <__assert_fail@plt+0x1055c>
   219f4:	ldr	r3, [sp, #368]	; 0x170
   219f8:	cmp	r5, r3
   219fc:	bgt	21bd4 <__assert_fail@plt+0x1070c>
   21a00:	ldr	r3, [sp, #376]	; 0x178
   21a04:	ldr	r0, [r3, r5, lsl #2]
   21a08:	cmp	r0, #0
   21a0c:	beq	21bd4 <__assert_fail@plt+0x1070c>
   21a10:	mov	r1, r7
   21a14:	add	r0, r0, #4
   21a18:	bl	16194 <__assert_fail@plt+0x4ccc>
   21a1c:	cmp	r0, #0
   21a20:	beq	21bd4 <__assert_fail@plt+0x1070c>
   21a24:	mov	r3, #0
   21a28:	str	r3, [sp, #116]	; 0x74
   21a2c:	cmp	r7, #0
   21a30:	blt	21bd8 <__assert_fail@plt+0x10710>
   21a34:	ldr	r1, [sp, #108]	; 0x6c
   21a38:	ldr	r3, [sp, #468]	; 0x1d4
   21a3c:	ldr	r3, [r3, #4]
   21a40:	cmp	r1, r3
   21a44:	bgt	21cc0 <__assert_fail@plt+0x107f8>
   21a48:	ldr	r3, [sp, #12]
   21a4c:	str	r3, [sp, #20]
   21a50:	lsl	r0, r7, #3
   21a54:	ldr	r3, [sp, #16]
   21a58:	ldr	r2, [r3]
   21a5c:	add	ip, r2, r0
   21a60:	ldrb	r3, [ip, #4]
   21a64:	cmp	r3, #8
   21a68:	beq	216e8 <__assert_fail@plt+0x10220>
   21a6c:	cmp	r3, #9
   21a70:	beq	21718 <__assert_fail@plt+0x10250>
   21a74:	ldr	r3, [sp, #468]	; 0x1d4
   21a78:	ldr	r2, [r3, #4]
   21a7c:	ldr	r3, [sp, #108]	; 0x6c
   21a80:	cmp	r2, r3
   21a84:	beq	21794 <__assert_fail@plt+0x102cc>
   21a88:	cmp	fp, #0
   21a8c:	beq	21aa4 <__assert_fail@plt+0x105dc>
   21a90:	mov	r1, r7
   21a94:	add	r0, sp, #112	; 0x70
   21a98:	bl	16194 <__assert_fail@plt+0x4ccc>
   21a9c:	cmp	r0, #0
   21aa0:	bne	217b0 <__assert_fail@plt+0x102e8>
   21aa4:	ldr	r4, [sp, #360]	; 0x168
   21aa8:	mov	r8, r7
   21aac:	lsl	r6, r7, #3
   21ab0:	ldr	r1, [r4]
   21ab4:	add	r3, r1, r6
   21ab8:	ldrb	r2, [r3, #4]
   21abc:	tst	r2, #8
   21ac0:	beq	219a8 <__assert_fail@plt+0x104e0>
   21ac4:	ldr	r2, [sp, #108]	; 0x6c
   21ac8:	ldr	r3, [sp, #376]	; 0x178
   21acc:	ldr	r8, [r3, r2, lsl #2]
   21ad0:	add	r8, r8, #4
   21ad4:	add	r3, r7, r7, lsl #1
   21ad8:	ldr	r4, [r4, #20]
   21adc:	add	r4, r4, r3, lsl #2
   21ae0:	mov	r1, r7
   21ae4:	add	r0, sp, #112	; 0x70
   21ae8:	bl	16194 <__assert_fail@plt+0x4ccc>
   21aec:	cmp	r0, #0
   21af0:	beq	21840 <__assert_fail@plt+0x10378>
   21af4:	ldr	sl, [r4, #4]
   21af8:	cmp	sl, #0
   21afc:	ble	21bd4 <__assert_fail@plt+0x1070c>
   21b00:	ldr	r6, [r4, #8]
   21b04:	sub	r6, r6, #4
   21b08:	ldr	r4, [sp, #24]
   21b0c:	mvn	r7, #0
   21b10:	b	21980 <__assert_fail@plt+0x104b8>
   21b14:	ldr	r3, [sp, #108]	; 0x6c
   21b18:	add	r2, sp, #276	; 0x114
   21b1c:	mov	r1, r7
   21b20:	mov	r0, r4
   21b24:	bl	1b5d0 <__assert_fail@plt+0xa108>
   21b28:	subs	r5, r0, #0
   21b2c:	beq	219bc <__assert_fail@plt+0x104f4>
   21b30:	ldr	r3, [r4, #12]
   21b34:	ldr	r7, [r3, r8, lsl #2]
   21b38:	ldr	r3, [sp, #108]	; 0x6c
   21b3c:	add	r5, r5, r3
   21b40:	b	219e8 <__assert_fail@plt+0x10520>
   21b44:	ldr	r3, [r1, r6]
   21b48:	add	r3, r3, #1
   21b4c:	ldr	r2, [sp, #64]	; 0x40
   21b50:	cmp	r2, r3
   21b54:	ble	21c34 <__assert_fail@plt+0x1076c>
   21b58:	ldr	r2, [sp, #468]	; 0x1d4
   21b5c:	add	r2, r2, r3, lsl #3
   21b60:	ldr	r5, [r2, #4]
   21b64:	ldr	r2, [sp, #468]	; 0x1d4
   21b68:	ldr	r2, [r2, r3, lsl #3]
   21b6c:	sub	r5, r5, r2
   21b70:	cmp	fp, #0
   21b74:	beq	21c8c <__assert_fail@plt+0x107c4>
   21b78:	ldr	r2, [sp, #468]	; 0x1d4
   21b7c:	add	r2, r2, r3, lsl #3
   21b80:	ldr	r1, [sp, #468]	; 0x1d4
   21b84:	ldr	r0, [r1, r3, lsl #3]
   21b88:	cmn	r0, #1
   21b8c:	beq	21bd4 <__assert_fail@plt+0x1070c>
   21b90:	ldr	r3, [r2, #4]
   21b94:	cmn	r3, #1
   21b98:	beq	21bd4 <__assert_fail@plt+0x1070c>
   21b9c:	cmp	r5, #0
   21ba0:	beq	21c40 <__assert_fail@plt+0x10778>
   21ba4:	ldr	ip, [sp, #280]	; 0x118
   21ba8:	ldr	r1, [sp, #108]	; 0x6c
   21bac:	ldr	r3, [sp, #304]	; 0x130
   21bb0:	sub	r3, r3, r1
   21bb4:	cmp	r5, r3
   21bb8:	bgt	21bd4 <__assert_fail@plt+0x1070c>
   21bbc:	mov	r2, r5
   21bc0:	add	r1, ip, r1
   21bc4:	add	r0, ip, r0
   21bc8:	bl	11240 <memcmp@plt>
   21bcc:	cmp	r0, #0
   21bd0:	beq	21b30 <__assert_fail@plt+0x10668>
   21bd4:	mvn	r7, #0
   21bd8:	cmn	r7, #2
   21bdc:	beq	21ca0 <__assert_fail@plt+0x107d8>
   21be0:	add	r3, sp, #112	; 0x70
   21be4:	str	r3, [sp, #4]
   21be8:	ldr	r3, [sp, #32]
   21bec:	str	r3, [sp]
   21bf0:	ldr	r3, [sp, #468]	; 0x1d4
   21bf4:	ldr	r2, [sp, #20]
   21bf8:	add	r1, sp, #108	; 0x6c
   21bfc:	mov	r0, fp
   21c00:	bl	1a840 <__assert_fail@plt+0x9378>
   21c04:	subs	r7, r0, #0
   21c08:	bge	21a34 <__assert_fail@plt+0x1056c>
   21c0c:	ldr	sl, [sp, #28]
   21c10:	ldr	r0, [sp, #120]	; 0x78
   21c14:	bl	135a4 <__assert_fail@plt+0x20dc>
   21c18:	add	r0, sp, #136	; 0x88
   21c1c:	bl	195d0 <__assert_fail@plt+0x8108>
   21c20:	mov	r0, fp
   21c24:	bl	19618 <__assert_fail@plt+0x8150>
   21c28:	mov	r3, #1
   21c2c:	str	r3, [sp, #24]
   21c30:	b	20e8c <__assert_fail@plt+0xf9c4>
   21c34:	cmp	fp, #0
   21c38:	mvnne	r7, #0
   21c3c:	bne	21a2c <__assert_fail@plt+0x10564>
   21c40:	mov	r1, r7
   21c44:	add	r0, sp, #112	; 0x70
   21c48:	bl	1981c <__assert_fail@plt+0x8354>
   21c4c:	cmp	r0, #0
   21c50:	beq	21cb8 <__assert_fail@plt+0x107f0>
   21c54:	ldr	r3, [r4, #20]
   21c58:	add	r2, r8, r8, lsl #1
   21c5c:	add	r3, r3, r2, lsl #2
   21c60:	ldr	r3, [r3, #8]
   21c64:	ldr	r7, [r3]
   21c68:	ldr	r2, [sp, #108]	; 0x6c
   21c6c:	ldr	r3, [sp, #376]	; 0x178
   21c70:	ldr	r0, [r3, r2, lsl #2]
   21c74:	mov	r1, r7
   21c78:	add	r0, r0, #4
   21c7c:	bl	16194 <__assert_fail@plt+0x4ccc>
   21c80:	cmp	r0, #0
   21c84:	beq	219bc <__assert_fail@plt+0x104f4>
   21c88:	b	21a2c <__assert_fail@plt+0x10564>
   21c8c:	cmp	r5, #0
   21c90:	bne	21b30 <__assert_fail@plt+0x10668>
   21c94:	b	21c40 <__assert_fail@plt+0x10778>
   21c98:	mov	r7, r5
   21c9c:	b	21a2c <__assert_fail@plt+0x10564>
   21ca0:	ldr	sl, [sp, #28]
   21ca4:	b	21858 <__assert_fail@plt+0x10390>
   21ca8:	ldr	sl, [sp, #28]
   21cac:	b	21858 <__assert_fail@plt+0x10390>
   21cb0:	ldr	sl, [sp, #28]
   21cb4:	b	21858 <__assert_fail@plt+0x10390>
   21cb8:	ldr	sl, [sp, #28]
   21cbc:	b	21858 <__assert_fail@plt+0x10390>
   21cc0:	ldr	sl, [sp, #28]
   21cc4:	ldr	r0, [sp, #120]	; 0x78
   21cc8:	bl	135a4 <__assert_fail@plt+0x20dc>
   21ccc:	add	r0, sp, #136	; 0x88
   21cd0:	bl	195d0 <__assert_fail@plt+0x8108>
   21cd4:	mov	r0, fp
   21cd8:	bl	19618 <__assert_fail@plt+0x8150>
   21cdc:	cmp	r0, #0
   21ce0:	beq	222bc <__assert_fail@plt+0x10df4>
   21ce4:	str	r0, [sp, #24]
   21ce8:	b	20e8c <__assert_fail@plt+0xf9c4>
   21cec:	ldr	r0, [r1, #-4]
   21cf0:	add	r0, r0, ip
   21cf4:	str	r0, [r1, #-4]
   21cf8:	ldr	r0, [r1]
   21cfc:	add	r0, r0, ip
   21d00:	str	r0, [r1]
   21d04:	add	r2, r2, #8
   21d08:	cmp	r2, lr
   21d0c:	beq	21d50 <__assert_fail@plt+0x10888>
   21d10:	mov	r1, r2
   21d14:	ldr	r0, [r2, #-4]
   21d18:	cmn	r0, #1
   21d1c:	beq	21d04 <__assert_fail@plt+0x1083c>
   21d20:	cmp	r4, #0
   21d24:	beq	21cec <__assert_fail@plt+0x10824>
   21d28:	cmp	r0, r5
   21d2c:	ldrne	r0, [r6, r0, lsl #2]
   21d30:	moveq	r0, r7
   21d34:	str	r0, [r2, #-4]
   21d38:	ldr	r0, [r2]
   21d3c:	cmp	r5, r0
   21d40:	ldrne	r0, [r6, r0, lsl #2]
   21d44:	moveq	r0, r7
   21d48:	str	r0, [r2]
   21d4c:	b	21cec <__assert_fail@plt+0x10824>
   21d50:	ldr	r2, [sp, #72]	; 0x48
   21d54:	cmp	r2, #0
   21d58:	ble	21d84 <__assert_fail@plt+0x108bc>
   21d5c:	ldr	r2, [sp, #468]	; 0x1d4
   21d60:	add	r3, r2, r3
   21d64:	ldr	r1, [sp, #464]	; 0x1d0
   21d68:	add	r1, r2, r1, lsl #3
   21d6c:	mvn	r2, #0
   21d70:	str	r2, [r3]
   21d74:	str	r2, [r3, #4]
   21d78:	add	r3, r3, #8
   21d7c:	cmp	r1, r3
   21d80:	bne	21d70 <__assert_fail@plt+0x108a8>
   21d84:	ldr	r3, [sl, #132]	; 0x84
   21d88:	cmp	r3, #0
   21d8c:	beq	20e8c <__assert_fail@plt+0xf9c4>
   21d90:	ldr	r3, [sp, #64]	; 0x40
   21d94:	sub	r1, r3, #1
   21d98:	mov	r3, #0
   21d9c:	ldr	r2, [sp, #468]	; 0x1d4
   21da0:	add	ip, r2, #8
   21da4:	add	r0, r2, #12
   21da8:	b	21dd4 <__assert_fail@plt+0x1090c>
   21dac:	add	r2, r2, #1
   21db0:	ldr	lr, [sp, #468]	; 0x1d4
   21db4:	ldr	r2, [lr, r2, lsl #3]
   21db8:	str	r2, [ip, r3, lsl #3]
   21dbc:	ldr	r2, [sl, #132]	; 0x84
   21dc0:	ldr	r2, [r2, r3, lsl #2]
   21dc4:	add	r2, lr, r2, lsl #3
   21dc8:	ldr	r2, [r2, #12]
   21dcc:	str	r2, [r0, r3, lsl #3]
   21dd0:	add	r3, r3, #1
   21dd4:	cmp	r3, r1
   21dd8:	beq	20e8c <__assert_fail@plt+0xf9c4>
   21ddc:	ldr	r2, [sl, #132]	; 0x84
   21de0:	ldr	r2, [r2, r3, lsl #2]
   21de4:	cmp	r3, r2
   21de8:	bne	21dac <__assert_fail@plt+0x108e4>
   21dec:	b	21dd0 <__assert_fail@plt+0x10908>
   21df0:	ldr	r3, [sp, #76]	; 0x4c
   21df4:	str	r3, [sp, #24]
   21df8:	b	20e8c <__assert_fail@plt+0xf9c4>
   21dfc:	mov	r3, #12
   21e00:	str	r3, [sp, #24]
   21e04:	b	20e8c <__assert_fail@plt+0xf9c4>
   21e08:	mov	r3, #12
   21e0c:	str	r3, [sp, #24]
   21e10:	b	20e8c <__assert_fail@plt+0xf9c4>
   21e14:	mov	r3, #1
   21e18:	str	r3, [sp, #24]
   21e1c:	b	20e8c <__assert_fail@plt+0xf9c4>
   21e20:	ldr	sl, [sp, #52]	; 0x34
   21e24:	mov	r3, #12
   21e28:	str	r3, [sp, #24]
   21e2c:	b	20e8c <__assert_fail@plt+0xf9c4>
   21e30:	ldr	sl, [sp, #52]	; 0x34
   21e34:	b	20e8c <__assert_fail@plt+0xf9c4>
   21e38:	ldr	sl, [sp, #52]	; 0x34
   21e3c:	b	20e8c <__assert_fail@plt+0xf9c4>
   21e40:	add	r0, sp, #276	; 0x114
   21e44:	bl	19508 <__assert_fail@plt+0x8040>
   21e48:	ldr	r0, [sp, #408]	; 0x198
   21e4c:	bl	135a4 <__assert_fail@plt+0x20dc>
   21e50:	ldr	r0, [sp, #392]	; 0x188
   21e54:	bl	135a4 <__assert_fail@plt+0x20dc>
   21e58:	b	20ea0 <__assert_fail@plt+0xf9d8>
   21e5c:	mov	r3, #1
   21e60:	str	r3, [sp, #24]
   21e64:	b	20ea8 <__assert_fail@plt+0xf9e0>
   21e68:	mov	r3, #1
   21e6c:	str	r3, [sp, #24]
   21e70:	b	20ea8 <__assert_fail@plt+0xf9e0>
   21e74:	mov	r3, #1
   21e78:	str	r3, [sp, #24]
   21e7c:	b	20ea8 <__assert_fail@plt+0xf9e0>
   21e80:	mov	r3, #1
   21e84:	str	r3, [sp, #24]
   21e88:	b	20ea8 <__assert_fail@plt+0xf9e0>
   21e8c:	mov	r3, #1
   21e90:	str	r3, [sp, #24]
   21e94:	b	20ea8 <__assert_fail@plt+0xf9e0>
   21e98:	mov	r3, #1
   21e9c:	str	r3, [sp, #24]
   21ea0:	b	20ea8 <__assert_fail@plt+0xf9e0>
   21ea4:	mov	r3, #12
   21ea8:	str	r3, [sp, #24]
   21eac:	b	20e8c <__assert_fail@plt+0xf9c4>
   21eb0:	ldr	r3, [sp, #20]
   21eb4:	ldr	r3, [r3]
   21eb8:	str	r3, [sp, #16]
   21ebc:	mov	fp, #0
   21ec0:	str	fp, [sp, #124]	; 0x7c
   21ec4:	mov	r3, #2
   21ec8:	str	r3, [sp, #128]	; 0x80
   21ecc:	str	fp, [sp, #132]	; 0x84
   21ed0:	str	fp, [sp, #136]	; 0x88
   21ed4:	mov	r3, #16
   21ed8:	str	r3, [sp, #140]	; 0x8c
   21edc:	add	r3, sp, #148	; 0x94
   21ee0:	str	r3, [sp, #144]	; 0x90
   21ee4:	ldr	r3, [sp, #16]
   21ee8:	ldr	r7, [r3, #72]	; 0x48
   21eec:	mov	r3, #0
   21ef0:	str	r3, [sp, #112]	; 0x70
   21ef4:	str	r3, [sp, #116]	; 0x74
   21ef8:	str	r3, [sp, #120]	; 0x78
   21efc:	ldr	r3, [sp, #136]	; 0x88
   21f00:	ldr	r2, [sp, #64]	; 0x40
   21f04:	cmp	r2, r3
   21f08:	bhi	21684 <__assert_fail@plt+0x101bc>
   21f0c:	ldr	r3, [sp, #64]	; 0x40
   21f10:	str	r3, [sp, #136]	; 0x88
   21f14:	ldr	r3, [sp, #144]	; 0x90
   21f18:	str	r3, [sp, #32]
   21f1c:	ldr	r2, [sp, #36]	; 0x24
   21f20:	ldr	r1, [sp, #468]	; 0x1d4
   21f24:	mov	r0, r3
   21f28:	bl	11204 <memcpy@plt>
   21f2c:	ldr	r9, [sp, #468]	; 0x1d4
   21f30:	ldr	r3, [r9], #4
   21f34:	str	r3, [sp, #108]	; 0x6c
   21f38:	ldr	r3, [sp, #64]	; 0x40
   21f3c:	lsl	r2, r3, #4
   21f40:	str	r2, [sp, #40]	; 0x28
   21f44:	str	r3, [sp, #12]
   21f48:	str	sl, [sp, #28]
   21f4c:	b	21a34 <__assert_fail@plt+0x1056c>
   21f50:	mov	r3, #0
   21f54:	ldr	r2, [sp, #468]	; 0x1d4
   21f58:	str	r3, [r2]
   21f5c:	ldr	r3, [sp, #368]	; 0x170
   21f60:	str	r3, [r2, #4]
   21f64:	b	222bc <__assert_fail@plt+0x10df4>
   21f68:	ldr	sl, [sp, #52]	; 0x34
   21f6c:	mov	r3, #12
   21f70:	str	r3, [sp, #24]
   21f74:	b	20e8c <__assert_fail@plt+0xf9c4>
   21f78:	ldr	sl, [sp, #52]	; 0x34
   21f7c:	mov	r3, #12
   21f80:	str	r3, [sp, #24]
   21f84:	b	20e8c <__assert_fail@plt+0xf9c4>
   21f88:	mov	r3, #0
   21f8c:	str	r3, [sp, #112]	; 0x70
   21f90:	b	214c8 <__assert_fail@plt+0x10000>
   21f94:	mov	r3, #12
   21f98:	str	r3, [sp, #24]
   21f9c:	b	20e8c <__assert_fail@plt+0xf9c4>
   21fa0:	ldr	r3, [sp, #44]	; 0x2c
   21fa4:	str	r3, [sp, #280]	; 0x118
   21fa8:	ldr	r3, [sl, #92]	; 0x5c
   21fac:	ldr	r2, [sp, #60]	; 0x3c
   21fb0:	ldr	r1, [sp, #76]	; 0x4c
   21fb4:	cmp	r3, #1
   21fb8:	movgt	r2, r1
   21fbc:	mov	r3, r2
   21fc0:	b	20a9c <__assert_fail@plt+0xf5d4>
   21fc4:	mov	r0, r4
   21fc8:	bl	135a4 <__assert_fail@plt+0x20dc>
   21fcc:	mov	r0, r5
   21fd0:	bl	135a4 <__assert_fail@plt+0x20dc>
   21fd4:	b	21ff4 <__assert_fail@plt+0x10b2c>
   21fd8:	mov	r5, #0
   21fdc:	mov	r0, r4
   21fe0:	bl	135a4 <__assert_fail@plt+0x20dc>
   21fe4:	mov	r0, r5
   21fe8:	bl	135a4 <__assert_fail@plt+0x20dc>
   21fec:	cmp	r8, #1
   21ff0:	bne	2205c <__assert_fail@plt+0x10b94>
   21ff4:	add	r0, sp, #276	; 0x114
   21ff8:	bl	19508 <__assert_fail@plt+0x8040>
   21ffc:	ldr	r3, [sp, #412]	; 0x19c
   22000:	ldr	r2, [sp, #92]	; 0x5c
   22004:	add	r3, r2, r3
   22008:	str	r3, [sp, #412]	; 0x19c
   2200c:	ldr	r2, [sp, #48]	; 0x30
   22010:	cmp	r3, r2
   22014:	movle	r2, #0
   22018:	movgt	r2, #1
   2201c:	ldr	r1, [sp, #56]	; 0x38
   22020:	cmp	r3, r1
   22024:	movge	r3, r2
   22028:	orrlt	r3, r2, #1
   2202c:	cmp	r3, #0
   22030:	bne	21600 <__assert_fail@plt+0x10138>
   22034:	ldr	r3, [sp, #80]	; 0x50
   22038:	sub	r3, r3, #4
   2203c:	cmp	r3, #4
   22040:	ldrls	pc, [pc, r3, lsl #2]
   22044:	b	20c94 <__assert_fail@plt+0xf7cc>
   22048:	andeq	r0, r2, ip, lsl lr
   2204c:	andeq	r0, r2, ip, lsl lr
   22050:			; <UNDEFINED> instruction: 0x00020db4
   22054:	andeq	r0, r2, ip, lsr sp
   22058:	andeq	r0, r2, ip, ror #29
   2205c:	mov	r3, r8
   22060:	ldr	sl, [sp, #52]	; 0x34
   22064:	str	r3, [sp, #24]
   22068:	b	20e8c <__assert_fail@plt+0xf9c4>
   2206c:	ldr	sl, [sp, #52]	; 0x34
   22070:	mov	r0, r4
   22074:	bl	135a4 <__assert_fail@plt+0x20dc>
   22078:	mov	r0, #0
   2207c:	bl	135a4 <__assert_fail@plt+0x20dc>
   22080:	mov	r3, #12
   22084:	b	22064 <__assert_fail@plt+0x10b9c>
   22088:	mov	r2, fp
   2208c:	ldr	r3, [sp, #376]	; 0x178
   22090:	ldr	r1, [r3, fp, lsl #2]
   22094:	add	r0, sp, #276	; 0x114
   22098:	bl	1a74c <__assert_fail@plt+0x9284>
   2209c:	str	r0, [sp, #372]	; 0x174
   220a0:	ldr	r3, [sp, #52]	; 0x34
   220a4:	ldrb	r3, [r3, #88]	; 0x58
   220a8:	tst	r3, #1
   220ac:	bne	220dc <__assert_fail@plt+0x10c14>
   220b0:	b	220cc <__assert_fail@plt+0x10c04>
   220b4:	mov	r2, fp
   220b8:	ldr	r3, [sp, #376]	; 0x178
   220bc:	ldr	r1, [r3, fp, lsl #2]
   220c0:	add	r0, sp, #276	; 0x114
   220c4:	bl	1a74c <__assert_fail@plt+0x9284>
   220c8:	str	r0, [sp, #372]	; 0x174
   220cc:	ldr	r3, [sp, #52]	; 0x34
   220d0:	ldr	r3, [r3, #76]	; 0x4c
   220d4:	cmp	r3, #0
   220d8:	beq	21610 <__assert_fail@plt+0x10148>
   220dc:	ldr	r9, [sp, #360]	; 0x168
   220e0:	ldr	r7, [sp, #372]	; 0x174
   220e4:	cmn	fp, #-1073741822	; 0xc0000002
   220e8:	bhi	21f68 <__assert_fail@plt+0x10aa0>
   220ec:	add	r5, fp, #1
   220f0:	lsl	r5, r5, #2
   220f4:	mov	r0, r5
   220f8:	bl	24808 <__assert_fail@plt+0x13340>
   220fc:	subs	r4, r0, #0
   22100:	beq	2206c <__assert_fail@plt+0x10ba4>
   22104:	ldr	r3, [r9, #76]	; 0x4c
   22108:	cmp	r3, #0
   2210c:	beq	21584 <__assert_fail@plt+0x100bc>
   22110:	mov	r0, r5
   22114:	bl	24808 <__assert_fail@plt+0x13340>
   22118:	subs	r5, r0, #0
   2211c:	beq	2206c <__assert_fail@plt+0x10ba4>
   22120:	mov	r6, #0
   22124:	str	sl, [sp, #12]
   22128:	str	r9, [sp, #28]
   2212c:	add	sl, fp, #1
   22130:	lsl	r9, sl, #2
   22134:	mov	r2, r9
   22138:	mov	r1, r6
   2213c:	mov	r0, r5
   22140:	bl	113e4 <memset@plt>
   22144:	str	r4, [sp, #136]	; 0x88
   22148:	str	r5, [sp, #140]	; 0x8c
   2214c:	str	r7, [sp, #144]	; 0x90
   22150:	str	fp, [sp, #148]	; 0x94
   22154:	str	r6, [sp, #152]	; 0x98
   22158:	str	r6, [sp, #156]	; 0x9c
   2215c:	str	r6, [sp, #160]	; 0xa0
   22160:	add	r1, sp, #136	; 0x88
   22164:	add	r0, sp, #276	; 0x114
   22168:	bl	205b0 <__assert_fail@plt+0xf0e8>
   2216c:	mov	r8, r0
   22170:	ldr	r0, [sp, #160]	; 0xa0
   22174:	bl	135a4 <__assert_fail@plt+0x20dc>
   22178:	cmp	r8, #0
   2217c:	bne	21fdc <__assert_fail@plt+0x10b14>
   22180:	ldr	r3, [r4]
   22184:	cmp	r3, #0
   22188:	bne	2154c <__assert_fail@plt+0x10084>
   2218c:	ldr	r3, [r5]
   22190:	cmp	r3, #0
   22194:	bne	2154c <__assert_fail@plt+0x10084>
   22198:	sub	r9, r9, #4
   2219c:	ldr	r3, [sp, #376]	; 0x178
   221a0:	add	r9, r3, r9
   221a4:	subs	fp, fp, #1
   221a8:	bmi	21fc4 <__assert_fail@plt+0x10afc>
   221ac:	ldr	r1, [r9, #-4]!
   221b0:	cmp	r1, #0
   221b4:	beq	221a4 <__assert_fail@plt+0x10cdc>
   221b8:	ldrb	r3, [r1, #52]	; 0x34
   221bc:	tst	r3, #16
   221c0:	beq	221a4 <__assert_fail@plt+0x10cdc>
   221c4:	mov	r2, fp
   221c8:	add	r0, sp, #276	; 0x114
   221cc:	bl	1a74c <__assert_fail@plt+0x9284>
   221d0:	mov	r7, r0
   221d4:	b	2212c <__assert_fail@plt+0x10c64>
   221d8:	ldr	r3, [sp, #112]	; 0x70
   221dc:	cmp	r3, #0
   221e0:	bne	222e8 <__assert_fail@plt+0x10e20>
   221e4:	ldr	r2, [sp, #28]
   221e8:	cmp	r2, #0
   221ec:	beq	22200 <__assert_fail@plt+0x10d38>
   221f0:	ldr	r3, [r2]
   221f4:	ldr	r1, [sp, #36]	; 0x24
   221f8:	add	r3, r3, r1
   221fc:	str	r3, [r2]
   22200:	cmn	fp, #1
   22204:	beq	21ff4 <__assert_fail@plt+0x10b2c>
   22208:	cmn	fp, #2
   2220c:	beq	21e20 <__assert_fail@plt+0x10958>
   22210:	str	fp, [sp, #368]	; 0x170
   22214:	ldr	r3, [sp, #64]	; 0x40
   22218:	cmp	r3, #1
   2221c:	movls	sl, #0
   22220:	movhi	sl, #1
   22224:	ldr	r3, [sp, #20]
   22228:	ldrb	r3, [r3, #28]
   2222c:	eor	r3, r3, #16
   22230:	ubfx	r3, r3, #4, #1
   22234:	tst	sl, r3
   22238:	bne	22088 <__assert_fail@plt+0x10bc0>
   2223c:	ldr	r2, [sp, #52]	; 0x34
   22240:	ldr	r3, [r2, #76]	; 0x4c
   22244:	cmp	r3, #0
   22248:	bne	220b4 <__assert_fail@plt+0x10bec>
   2224c:	mov	r8, sl
   22250:	mov	sl, r2
   22254:	ldr	r2, [sp, #64]	; 0x40
   22258:	cmp	r2, #0
   2225c:	beq	20e8c <__assert_fail@plt+0xf9c4>
   22260:	cmp	r2, #1
   22264:	bls	21f50 <__assert_fail@plt+0x10a88>
   22268:	ldr	r3, [sp, #468]	; 0x1d4
   2226c:	lsl	r2, r2, #3
   22270:	str	r2, [sp, #36]	; 0x24
   22274:	sub	r1, r3, #8
   22278:	add	r1, r1, r2
   2227c:	mvn	r2, #0
   22280:	str	r2, [r3, #12]
   22284:	str	r2, [r3, #8]!
   22288:	cmp	r3, r1
   2228c:	bne	22280 <__assert_fail@plt+0x10db8>
   22290:	mov	r3, #0
   22294:	ldr	r2, [sp, #468]	; 0x1d4
   22298:	str	r3, [r2]
   2229c:	ldr	r3, [sp, #368]	; 0x170
   222a0:	str	r3, [r2, #4]
   222a4:	ldr	r3, [sp, #20]
   222a8:	ldrb	r3, [r3, #28]
   222ac:	eor	r3, r3, #16
   222b0:	ubfx	r3, r3, #4, #1
   222b4:	tst	r8, r3
   222b8:	bne	2161c <__assert_fail@plt+0x10154>
   222bc:	ldrb	r4, [sp, #352]	; 0x160
   222c0:	ldr	r5, [sp, #304]	; 0x130
   222c4:	ldr	r6, [sp, #288]	; 0x120
   222c8:	ldr	ip, [sp, #412]	; 0x19c
   222cc:	ldr	r3, [sp, #468]	; 0x1d4
   222d0:	add	r2, r3, #4
   222d4:	ldr	r3, [sp, #64]	; 0x40
   222d8:	lsl	r3, r3, #3
   222dc:	add	lr, r2, r3
   222e0:	ldr	r7, [sp, #308]	; 0x134
   222e4:	b	21d10 <__assert_fail@plt+0x10848>
   222e8:	ldr	sl, [sp, #52]	; 0x34
   222ec:	b	21f7c <__assert_fail@plt+0x10ab4>
   222f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   222f4:	strd	r6, [sp, #8]
   222f8:	strd	r8, [sp, #16]
   222fc:	strd	sl, [sp, #24]
   22300:	str	lr, [sp, #32]
   22304:	sub	sp, sp, #132	; 0x84
   22308:	mov	r5, r0
   2230c:	mov	fp, r1
   22310:	mov	r6, r2
   22314:	mov	r9, r3
   22318:	mov	r2, #0
   2231c:	str	r2, [sp, #124]	; 0x7c
   22320:	ldrb	r3, [r0, #28]
   22324:	str	r9, [r0, #12]
   22328:	str	r2, [r0, #8]
   2232c:	str	r2, [r0, #24]
   22330:	and	r3, r3, #150	; 0x96
   22334:	bfi	r3, r2, #1, #2
   22338:	strb	r3, [r0, #28]
   2233c:	ldr	r4, [r0]
   22340:	ldr	r3, [r0, #4]
   22344:	cmp	r3, #159	; 0x9f
   22348:	bls	2260c <__assert_fail@plt+0x11144>
   2234c:	mov	r2, #160	; 0xa0
   22350:	str	r2, [r5, #8]
   22354:	mov	r1, #0
   22358:	mov	r0, r4
   2235c:	bl	113e4 <memset@plt>
   22360:	mov	r3, #31
   22364:	str	r3, [r4, #64]	; 0x40
   22368:	movw	r3, #43689	; 0xaaa9
   2236c:	movt	r3, #2730	; 0xaaa
   22370:	cmp	r6, r3
   22374:	bhi	22f44 <__assert_fail@plt+0x11a7c>
   22378:	add	r0, r6, #1
   2237c:	str	r0, [r4, #4]
   22380:	lsl	r0, r0, #3
   22384:	bl	24808 <__assert_fail@plt+0x13340>
   22388:	str	r0, [r4]
   2238c:	cmp	r6, #0
   22390:	beq	22630 <__assert_fail@plt+0x11168>
   22394:	mov	r7, #1
   22398:	lsl	r7, r7, #1
   2239c:	cmp	r6, r7
   223a0:	bcs	22398 <__assert_fail@plt+0x10ed0>
   223a4:	mov	r1, r7
   223a8:	mov	r0, #12
   223ac:	bl	24794 <__assert_fail@plt+0x132cc>
   223b0:	str	r0, [r4, #32]
   223b4:	sub	r7, r7, #1
   223b8:	str	r7, [r4, #68]	; 0x44
   223bc:	bl	112d0 <__ctype_get_mb_cur_max@plt>
   223c0:	str	r0, [r4, #92]	; 0x5c
   223c4:	mov	r0, #14
   223c8:	bl	11474 <nl_langinfo@plt>
   223cc:	ldrb	r3, [r0]
   223d0:	and	r3, r3, #223	; 0xdf
   223d4:	cmp	r3, #85	; 0x55
   223d8:	bne	22430 <__assert_fail@plt+0x10f68>
   223dc:	ldrb	r3, [r0, #1]
   223e0:	and	r3, r3, #223	; 0xdf
   223e4:	cmp	r3, #84	; 0x54
   223e8:	bne	22430 <__assert_fail@plt+0x10f68>
   223ec:	ldrb	r3, [r0, #2]
   223f0:	and	r3, r3, #223	; 0xdf
   223f4:	cmp	r3, #70	; 0x46
   223f8:	bne	22430 <__assert_fail@plt+0x10f68>
   223fc:	ldrb	r3, [r0, #3]
   22400:	cmp	r3, #45	; 0x2d
   22404:	moveq	r3, #4
   22408:	movne	r3, #3
   2240c:	movw	r1, #24032	; 0x5de0
   22410:	movt	r1, #2
   22414:	add	r0, r0, r3
   22418:	bl	1118c <strcmp@plt>
   2241c:	cmp	r0, #0
   22420:	bne	22430 <__assert_fail@plt+0x10f68>
   22424:	ldrb	r3, [r4, #88]	; 0x58
   22428:	orr	r3, r3, #4
   2242c:	strb	r3, [r4, #88]	; 0x58
   22430:	ldrb	r3, [r4, #88]	; 0x58
   22434:	bfc	r3, #3, #1
   22438:	strb	r3, [r4, #88]	; 0x58
   2243c:	ldr	r3, [r4, #92]	; 0x5c
   22440:	cmp	r3, #1
   22444:	ble	22460 <__assert_fail@plt+0x10f98>
   22448:	ldrb	r3, [r4, #88]	; 0x58
   2244c:	tst	r3, #4
   22450:	beq	22638 <__assert_fail@plt+0x11170>
   22454:	movw	r3, #23448	; 0x5b98
   22458:	movt	r3, #2
   2245c:	str	r3, [r4, #60]	; 0x3c
   22460:	ldr	r3, [r4]
   22464:	cmp	r3, #0
   22468:	beq	22f44 <__assert_fail@plt+0x11a7c>
   2246c:	ldr	r3, [r4, #32]
   22470:	cmp	r3, #0
   22474:	beq	22f44 <__assert_fail@plt+0x11a7c>
   22478:	mov	r3, #0
   2247c:	str	r3, [sp, #124]	; 0x7c
   22480:	movw	r3, #0
   22484:	movt	r3, #0
   22488:	cmp	r3, #0
   2248c:	movne	r3, #1
   22490:	moveq	r3, #0
   22494:	mov	r2, r3
   22498:	movw	r3, #0
   2249c:	movt	r3, #0
   224a0:	cmp	r3, #0
   224a4:	movne	r3, #1
   224a8:	moveq	r3, #0
   224ac:	orr	r3, r2, r3
   224b0:	ands	r3, r3, #255	; 0xff
   224b4:	str	r3, [sp, #16]
   224b8:	beq	224e4 <__assert_fail@plt+0x1101c>
   224bc:	mov	r1, #0
   224c0:	add	r0, r4, #136	; 0x88
   224c4:	bl	1121c <pthread_mutex_init@plt>
   224c8:	cmp	r0, #0
   224cc:	movne	r3, #12
   224d0:	strne	r3, [sp, #124]	; 0x7c
   224d4:	bne	22f4c <__assert_fail@plt+0x11a84>
   224d8:	ldr	r3, [sp, #124]	; 0x7c
   224dc:	cmp	r3, #0
   224e0:	bne	22f4c <__assert_fail@plt+0x11a84>
   224e4:	str	r6, [sp, #12]
   224e8:	ldr	r8, [r5, #20]
   224ec:	and	r7, r9, #4194304	; 0x400000
   224f0:	orr	sl, r8, r7
   224f4:	mov	r2, #76	; 0x4c
   224f8:	mov	r1, #0
   224fc:	add	r0, sp, #44	; 0x2c
   22500:	bl	113e4 <memset@plt>
   22504:	str	fp, [sp, #40]	; 0x28
   22508:	str	r6, [sp, #88]	; 0x58
   2250c:	str	r6, [sp, #84]	; 0x54
   22510:	str	r8, [sp, #104]	; 0x68
   22514:	adds	r3, r7, #0
   22518:	movne	r3, #1
   2251c:	strb	r3, [sp, #112]	; 0x70
   22520:	adds	r3, sl, #0
   22524:	movne	r3, #1
   22528:	strb	r3, [sp, #115]	; 0x73
   2252c:	ldr	r3, [r4, #92]	; 0x5c
   22530:	str	r3, [sp, #120]	; 0x78
   22534:	ldrb	r3, [r4, #88]	; 0x58
   22538:	ubfx	r2, r3, #2, #1
   2253c:	strb	r2, [sp, #113]	; 0x71
   22540:	ubfx	r3, r3, #3, #1
   22544:	strb	r3, [sp, #114]	; 0x72
   22548:	str	r6, [sp, #96]	; 0x60
   2254c:	str	r6, [sp, #92]	; 0x5c
   22550:	cmp	r6, #0
   22554:	bgt	226c4 <__assert_fail@plt+0x111fc>
   22558:	ldrb	r3, [sp, #115]	; 0x73
   2255c:	cmp	r3, #0
   22560:	ldrne	fp, [sp, #44]	; 0x2c
   22564:	str	fp, [sp, #44]	; 0x2c
   22568:	cmp	r7, #0
   2256c:	beq	226e8 <__assert_fail@plt+0x11220>
   22570:	ldr	r3, [r4, #92]	; 0x5c
   22574:	cmp	r3, #1
   22578:	ble	226dc <__assert_fail@plt+0x11214>
   2257c:	ldr	r6, [sp, #12]
   22580:	add	r0, sp, #40	; 0x28
   22584:	bl	179ac <__assert_fail@plt+0x64e4>
   22588:	cmp	r0, #0
   2258c:	bne	225c8 <__assert_fail@plt+0x11100>
   22590:	ldr	r3, [sp, #72]	; 0x48
   22594:	cmp	r6, r3
   22598:	ble	22710 <__assert_fail@plt+0x11248>
   2259c:	ldr	r1, [sp, #76]	; 0x4c
   225a0:	ldr	r2, [r4, #92]	; 0x5c
   225a4:	ldr	r3, [sp, #68]	; 0x44
   225a8:	add	r3, r3, r2
   225ac:	cmp	r1, r3
   225b0:	bgt	22710 <__assert_fail@plt+0x11248>
   225b4:	lsl	r1, r1, #1
   225b8:	add	r0, sp, #40	; 0x28
   225bc:	bl	16d48 <__assert_fail@plt+0x5880>
   225c0:	cmp	r0, #0
   225c4:	beq	22580 <__assert_fail@plt+0x110b8>
   225c8:	str	r0, [sp, #124]	; 0x7c
   225cc:	mov	r0, r5
   225d0:	bl	192cc <__assert_fail@plt+0x7e04>
   225d4:	add	r0, sp, #40	; 0x28
   225d8:	bl	1932c <__assert_fail@plt+0x7e64>
   225dc:	ldr	r3, [sp, #16]
   225e0:	cmp	r3, #0
   225e4:	beq	225f0 <__assert_fail@plt+0x11128>
   225e8:	add	r0, r4, #136	; 0x88
   225ec:	bl	111b0 <pthread_mutex_destroy@plt>
   225f0:	mov	r0, r4
   225f4:	bl	1936c <__assert_fail@plt+0x7ea4>
   225f8:	mov	r3, #0
   225fc:	str	r3, [r5]
   22600:	str	r3, [r5, #4]
   22604:	ldr	r0, [sp, #124]	; 0x7c
   22608:	b	22e48 <__assert_fail@plt+0x11980>
   2260c:	mov	r1, #160	; 0xa0
   22610:	mov	r0, r4
   22614:	bl	24844 <__assert_fail@plt+0x1337c>
   22618:	subs	r4, r0, #0
   2261c:	beq	22efc <__assert_fail@plt+0x11a34>
   22620:	mov	r3, #160	; 0xa0
   22624:	str	r3, [r5, #4]
   22628:	str	r4, [r5]
   2262c:	b	2234c <__assert_fail@plt+0x10e84>
   22630:	mov	r7, #1
   22634:	b	223a4 <__assert_fail@plt+0x10edc>
   22638:	mov	r1, #1
   2263c:	mov	r0, #32
   22640:	bl	24794 <__assert_fail@plt+0x132cc>
   22644:	str	r0, [r4, #60]	; 0x3c
   22648:	cmp	r0, #0
   2264c:	beq	22f44 <__assert_fail@plt+0x11a7c>
   22650:	mov	r7, #0
   22654:	b	226b8 <__assert_fail@plt+0x111f0>
   22658:	ldrb	r3, [r4, #88]	; 0x58
   2265c:	orr	r3, r3, #8
   22660:	strb	r3, [r4, #88]	; 0x58
   22664:	add	sl, sl, #1
   22668:	add	r8, r8, #1
   2266c:	cmp	sl, #32
   22670:	beq	226ac <__assert_fail@plt+0x111e4>
   22674:	mov	r0, r8
   22678:	bl	113f0 <btowc@plt>
   2267c:	cmn	r0, #1
   22680:	beq	22698 <__assert_fail@plt+0x111d0>
   22684:	ldr	r2, [r4, #60]	; 0x3c
   22688:	ldr	r3, [r2, r7]
   2268c:	mov	r1, #1
   22690:	orr	r3, r3, r1, lsl sl
   22694:	str	r3, [r2, r7]
   22698:	bics	r3, r8, #127	; 0x7f
   2269c:	bne	22664 <__assert_fail@plt+0x1119c>
   226a0:	cmp	r0, r8
   226a4:	bne	22658 <__assert_fail@plt+0x11190>
   226a8:	b	22664 <__assert_fail@plt+0x1119c>
   226ac:	add	r7, r7, #4
   226b0:	cmp	r7, #32
   226b4:	beq	22460 <__assert_fail@plt+0x10f98>
   226b8:	lsl	r8, r7, #3
   226bc:	mov	sl, #0
   226c0:	b	22674 <__assert_fail@plt+0x111ac>
   226c4:	add	r1, r6, #1
   226c8:	add	r0, sp, #40	; 0x28
   226cc:	bl	16d48 <__assert_fail@plt+0x5880>
   226d0:	cmp	r0, #0
   226d4:	beq	22558 <__assert_fail@plt+0x11090>
   226d8:	b	225c8 <__assert_fail@plt+0x11100>
   226dc:	add	r0, sp, #40	; 0x28
   226e0:	bl	17f30 <__assert_fail@plt+0x6a68>
   226e4:	b	22710 <__assert_fail@plt+0x11248>
   226e8:	ldr	r3, [r4, #92]	; 0x5c
   226ec:	cmp	r3, #1
   226f0:	bgt	22708 <__assert_fail@plt+0x11240>
   226f4:	cmp	sl, #0
   226f8:	beq	22944 <__assert_fail@plt+0x1147c>
   226fc:	add	r0, sp, #40	; 0x28
   22700:	bl	160d0 <__assert_fail@plt+0x4c08>
   22704:	b	22710 <__assert_fail@plt+0x11248>
   22708:	add	r0, sp, #40	; 0x28
   2270c:	bl	17414 <__assert_fail@plt+0x5f4c>
   22710:	mov	r8, #0
   22714:	str	r8, [sp, #124]	; 0x7c
   22718:	str	r8, [r5, #24]
   2271c:	ldr	r6, [r5]
   22720:	str	r9, [r6, #128]	; 0x80
   22724:	orr	r2, r9, #8388608	; 0x800000
   22728:	add	r1, sp, #40	; 0x28
   2272c:	add	r0, sp, #28
   22730:	bl	18a8c <__assert_fail@plt+0x75c4>
   22734:	add	r3, sp, #124	; 0x7c
   22738:	str	r3, [sp, #4]
   2273c:	str	r8, [sp]
   22740:	mov	r3, r9
   22744:	add	r2, sp, #28
   22748:	mov	r1, r5
   2274c:	add	r0, sp, #40	; 0x28
   22750:	bl	1e778 <__assert_fail@plt+0xd2b0>
   22754:	mov	r8, r0
   22758:	clz	r0, r0
   2275c:	lsr	r0, r0, #5
   22760:	ldr	r3, [sp, #124]	; 0x7c
   22764:	cmp	r3, #0
   22768:	moveq	r0, #0
   2276c:	cmp	r0, #0
   22770:	bne	22f38 <__assert_fail@plt+0x11a70>
   22774:	mov	r3, #2
   22778:	mov	r2, #0
   2277c:	mov	r1, r2
   22780:	mov	r0, r6
   22784:	bl	17024 <__assert_fail@plt+0x5b5c>
   22788:	mov	r9, r0
   2278c:	cmp	r8, #0
   22790:	beq	227a8 <__assert_fail@plt+0x112e0>
   22794:	mov	r3, #16
   22798:	mov	r2, r9
   2279c:	mov	r1, r8
   227a0:	mov	r0, r6
   227a4:	bl	17024 <__assert_fail@plt+0x5b5c>
   227a8:	cmp	r0, #0
   227ac:	cmpne	r9, #0
   227b0:	moveq	r3, #12
   227b4:	streq	r3, [sp, #124]	; 0x7c
   227b8:	beq	22f38 <__assert_fail@plt+0x11a70>
   227bc:	str	r0, [r4, #52]	; 0x34
   227c0:	ldr	r6, [r5]
   227c4:	ldr	r0, [r6, #4]
   227c8:	lsl	r0, r0, #2
   227cc:	bl	24808 <__assert_fail@plt+0x13340>
   227d0:	str	r0, [r6, #12]
   227d4:	ldr	r0, [r6, #4]
   227d8:	lsl	r0, r0, #2
   227dc:	bl	24808 <__assert_fail@plt+0x13340>
   227e0:	str	r0, [r6, #16]
   227e4:	ldr	r0, [r6, #4]
   227e8:	add	r0, r0, r0, lsl #1
   227ec:	lsl	r0, r0, #2
   227f0:	bl	24808 <__assert_fail@plt+0x13340>
   227f4:	str	r0, [r6, #20]
   227f8:	ldr	r0, [r6, #4]
   227fc:	add	r0, r0, r0, lsl #1
   22800:	lsl	r0, r0, #2
   22804:	bl	24808 <__assert_fail@plt+0x13340>
   22808:	str	r0, [r6, #24]
   2280c:	ldr	r3, [r6, #12]
   22810:	cmp	r3, #0
   22814:	beq	22f30 <__assert_fail@plt+0x11a68>
   22818:	ldr	r3, [r6, #16]
   2281c:	cmp	r3, #0
   22820:	beq	22f04 <__assert_fail@plt+0x11a3c>
   22824:	ldr	r3, [r6, #20]
   22828:	clz	sl, r0
   2282c:	lsr	sl, sl, #5
   22830:	cmp	r3, #0
   22834:	moveq	sl, #1
   22838:	cmp	sl, #0
   2283c:	bne	22f0c <__assert_fail@plt+0x11a44>
   22840:	ldr	r0, [r5, #24]
   22844:	lsl	r0, r0, #2
   22848:	bl	24808 <__assert_fail@plt+0x13340>
   2284c:	str	r0, [r6, #132]	; 0x84
   22850:	cmp	r0, #0
   22854:	beq	228cc <__assert_fail@plt+0x11404>
   22858:	ldr	r3, [r5, #24]
   2285c:	cmp	r3, #0
   22860:	beq	22880 <__assert_fail@plt+0x113b8>
   22864:	mov	r3, #0
   22868:	ldr	r2, [r6, #132]	; 0x84
   2286c:	str	r3, [r2, r3, lsl #2]
   22870:	add	r3, r3, #1
   22874:	ldr	r2, [r5, #24]
   22878:	cmp	r2, r3
   2287c:	bhi	22868 <__assert_fail@plt+0x113a0>
   22880:	mov	r2, r6
   22884:	movw	r1, #25484	; 0x638c
   22888:	movt	r1, #1
   2288c:	ldr	r0, [r6, #52]	; 0x34
   22890:	bl	16310 <__assert_fail@plt+0x4e48>
   22894:	ldr	ip, [r5, #24]
   22898:	cmp	ip, #0
   2289c:	beq	2295c <__assert_fail@plt+0x11494>
   228a0:	ldr	r2, [r6, #132]	; 0x84
   228a4:	ldr	r3, [r2]
   228a8:	cmp	r3, #0
   228ac:	bne	228cc <__assert_fail@plt+0x11404>
   228b0:	mov	r0, ip
   228b4:	add	r3, r3, #1
   228b8:	cmp	r0, r3
   228bc:	beq	22954 <__assert_fail@plt+0x1148c>
   228c0:	ldr	r1, [r2, #4]!
   228c4:	cmp	r1, r3
   228c8:	beq	228b4 <__assert_fail@plt+0x113ec>
   228cc:	mov	r2, r5
   228d0:	movw	r1, #29124	; 0x71c4
   228d4:	movt	r1, #1
   228d8:	ldr	r0, [r6, #52]	; 0x34
   228dc:	bl	1627c <__assert_fail@plt+0x4db4>
   228e0:	cmp	r0, #0
   228e4:	bne	22f28 <__assert_fail@plt+0x11a60>
   228e8:	mov	r2, r6
   228ec:	movw	r1, #36400	; 0x8e30
   228f0:	movt	r1, #1
   228f4:	ldr	r0, [r6, #52]	; 0x34
   228f8:	bl	1627c <__assert_fail@plt+0x4db4>
   228fc:	cmp	r0, #0
   22900:	bne	22f28 <__assert_fail@plt+0x11a60>
   22904:	mov	r2, r6
   22908:	movw	r1, #25644	; 0x642c
   2290c:	movt	r1, #1
   22910:	ldr	r0, [r6, #52]	; 0x34
   22914:	bl	16310 <__assert_fail@plt+0x4e48>
   22918:	mov	r2, r6
   2291c:	movw	r1, #38544	; 0x9690
   22920:	movt	r1, #1
   22924:	ldr	r0, [r6, #52]	; 0x34
   22928:	bl	16310 <__assert_fail@plt+0x4e48>
   2292c:	subs	r3, r0, #0
   22930:	str	r3, [sp, #12]
   22934:	bne	22f14 <__assert_fail@plt+0x11a4c>
   22938:	mov	r8, sl
   2293c:	mov	r9, r3
   22940:	b	229a0 <__assert_fail@plt+0x114d8>
   22944:	ldr	r3, [sp, #76]	; 0x4c
   22948:	str	r3, [sp, #68]	; 0x44
   2294c:	str	r3, [sp, #72]	; 0x48
   22950:	b	22710 <__assert_fail@plt+0x11248>
   22954:	cmp	ip, r3
   22958:	bne	228cc <__assert_fail@plt+0x11404>
   2295c:	ldr	r0, [r6, #132]	; 0x84
   22960:	bl	135a4 <__assert_fail@plt+0x20dc>
   22964:	mov	r3, #0
   22968:	str	r3, [r6, #132]	; 0x84
   2296c:	b	228cc <__assert_fail@plt+0x11404>
   22970:	cmp	r8, #0
   22974:	beq	229f0 <__assert_fail@plt+0x11528>
   22978:	mov	r8, sl
   2297c:	ldr	r9, [sp, #12]
   22980:	b	229a0 <__assert_fail@plt+0x114d8>
   22984:	ldr	r0, [sp, #36]	; 0x24
   22988:	bl	135a4 <__assert_fail@plt+0x20dc>
   2298c:	mov	r8, #1
   22990:	add	r9, r9, #1
   22994:	ldr	r3, [r6, #8]
   22998:	cmp	r3, r9
   2299c:	beq	22970 <__assert_fail@plt+0x114a8>
   229a0:	add	fp, r9, r9, lsl #1
   229a4:	lsl	fp, fp, #2
   229a8:	ldr	r3, [r6, #24]
   229ac:	add	r3, r3, fp
   229b0:	ldr	r3, [r3, #4]
   229b4:	cmp	r3, #0
   229b8:	bne	22990 <__assert_fail@plt+0x114c8>
   229bc:	mov	r3, #1
   229c0:	mov	r2, r9
   229c4:	mov	r1, r6
   229c8:	add	r0, sp, #28
   229cc:	bl	19f64 <__assert_fail@plt+0x8a9c>
   229d0:	cmp	r0, #0
   229d4:	bne	22f28 <__assert_fail@plt+0x11a60>
   229d8:	ldr	r3, [r6, #24]
   229dc:	add	fp, r3, fp
   229e0:	ldr	r3, [fp, #4]
   229e4:	cmp	r3, #0
   229e8:	bne	22990 <__assert_fail@plt+0x114c8>
   229ec:	b	22984 <__assert_fail@plt+0x114bc>
   229f0:	ldrb	r3, [r5, #28]
   229f4:	tst	r3, #16
   229f8:	beq	22b64 <__assert_fail@plt+0x1169c>
   229fc:	ldr	r3, [r6, #76]	; 0x4c
   22a00:	cmp	r3, #0
   22a04:	beq	22aec <__assert_fail@plt+0x11624>
   22a08:	ldr	r0, [r6, #8]
   22a0c:	add	r0, r0, r0, lsl #1
   22a10:	lsl	r0, r0, #2
   22a14:	bl	24808 <__assert_fail@plt+0x13340>
   22a18:	str	r0, [r6, #28]
   22a1c:	cmp	r0, #0
   22a20:	beq	22f1c <__assert_fail@plt+0x11a54>
   22a24:	ldr	r3, [r6, #8]
   22a28:	cmp	r3, #0
   22a2c:	beq	22aec <__assert_fail@plt+0x11624>
   22a30:	ldr	r1, [sp, #12]
   22a34:	mov	r3, #0
   22a38:	mov	r2, r3
   22a3c:	ldr	ip, [r6, #28]
   22a40:	add	r0, ip, r3
   22a44:	str	r2, [ip, r3]
   22a48:	str	r2, [r0, #4]
   22a4c:	str	r2, [r0, #8]
   22a50:	add	r1, r1, #1
   22a54:	ldr	r0, [r6, #8]
   22a58:	add	r3, r3, #12
   22a5c:	cmp	r1, r0
   22a60:	bcc	22a3c <__assert_fail@plt+0x11574>
   22a64:	cmp	r0, #0
   22a68:	beq	22aec <__assert_fail@plt+0x11624>
   22a6c:	ldr	r3, [sp, #12]
   22a70:	mov	fp, #0
   22a74:	str	r7, [sp, #20]
   22a78:	mov	r7, r3
   22a7c:	ldr	r3, [r6, #24]
   22a80:	add	r3, r3, fp
   22a84:	ldr	sl, [r3, #8]
   22a88:	ldr	r3, [r3, #4]
   22a8c:	cmp	r3, #0
   22a90:	ble	22ad4 <__assert_fail@plt+0x1160c>
   22a94:	sub	sl, sl, #4
   22a98:	ldr	r9, [sp, #12]
   22a9c:	ldr	r0, [sl, #4]!
   22aa0:	add	r0, r0, r0, lsl #1
   22aa4:	ldr	r3, [r6, #28]
   22aa8:	mov	r1, r7
   22aac:	add	r0, r3, r0, lsl #2
   22ab0:	bl	16e0c <__assert_fail@plt+0x5944>
   22ab4:	cmp	r0, #0
   22ab8:	beq	22f24 <__assert_fail@plt+0x11a5c>
   22abc:	add	r9, r9, #1
   22ac0:	ldr	r3, [r6, #24]
   22ac4:	add	r3, r3, fp
   22ac8:	ldr	r3, [r3, #4]
   22acc:	cmp	r9, r3
   22ad0:	blt	22a9c <__assert_fail@plt+0x115d4>
   22ad4:	add	r7, r7, #1
   22ad8:	add	fp, fp, #12
   22adc:	ldr	r3, [r6, #8]
   22ae0:	cmp	r7, r3
   22ae4:	bcc	22a7c <__assert_fail@plt+0x115b4>
   22ae8:	ldr	r7, [sp, #20]
   22aec:	mov	r3, #0
   22af0:	str	r3, [sp, #124]	; 0x7c
   22af4:	ldrb	r3, [r4, #88]	; 0x58
   22af8:	ubfx	r3, r3, #2, #1
   22afc:	cmp	r7, #0
   22b00:	moveq	r7, r3
   22b04:	movne	r7, #0
   22b08:	cmp	r7, #0
   22b0c:	bne	22b80 <__assert_fail@plt+0x116b8>
   22b10:	ldr	r3, [r4, #52]	; 0x34
   22b14:	ldr	r3, [r3, #12]
   22b18:	ldr	r1, [r3, #28]
   22b1c:	str	r1, [r4, #72]	; 0x48
   22b20:	add	r1, r1, r1, lsl #1
   22b24:	ldr	r3, [r4, #24]
   22b28:	add	r1, r3, r1, lsl #2
   22b2c:	add	r0, sp, #28
   22b30:	bl	17780 <__assert_fail@plt+0x62b8>
   22b34:	mov	r7, r0
   22b38:	str	r0, [sp, #24]
   22b3c:	cmp	r0, #0
   22b40:	bne	22e24 <__assert_fail@plt+0x1195c>
   22b44:	ldr	r3, [r4, #76]	; 0x4c
   22b48:	cmp	r3, #0
   22b4c:	ble	22de0 <__assert_fail@plt+0x11918>
   22b50:	ldr	r0, [sp, #32]
   22b54:	cmp	r0, #0
   22b58:	ble	22de0 <__assert_fail@plt+0x11918>
   22b5c:	mov	r6, r7
   22b60:	b	22d84 <__assert_fail@plt+0x118bc>
   22b64:	ldr	r3, [r5, #24]
   22b68:	cmp	r3, #0
   22b6c:	beq	229fc <__assert_fail@plt+0x11534>
   22b70:	ldrb	r3, [r6, #88]	; 0x58
   22b74:	tst	r3, #1
   22b78:	bne	22a08 <__assert_fail@plt+0x11540>
   22b7c:	b	229fc <__assert_fail@plt+0x11534>
   22b80:	ldr	r3, [r5, #20]
   22b84:	cmp	r3, #0
   22b88:	bne	22b10 <__assert_fail@plt+0x11648>
   22b8c:	ldr	r0, [r4, #8]
   22b90:	cmp	r0, #0
   22b94:	beq	22ce8 <__assert_fail@plt+0x11820>
   22b98:	ldr	r2, [r4]
   22b9c:	mov	ip, r8
   22ba0:	ldr	r1, [sp, #12]
   22ba4:	mov	lr, r7
   22ba8:	b	22c08 <__assert_fail@plt+0x11740>
   22bac:	mov	ip, lr
   22bb0:	b	22bf8 <__assert_fail@plt+0x11730>
   22bb4:	ldr	r3, [r2]
   22bb8:	ldr	r6, [r3, #16]
   22bbc:	cmp	r6, #0
   22bc0:	bne	22b10 <__assert_fail@plt+0x11648>
   22bc4:	ldr	r6, [r3, #20]
   22bc8:	cmp	r6, #0
   22bcc:	bne	22b10 <__assert_fail@plt+0x11648>
   22bd0:	ldr	r6, [r3, #24]
   22bd4:	cmp	r6, #0
   22bd8:	bne	22b10 <__assert_fail@plt+0x11648>
   22bdc:	ldr	r3, [r3, #28]
   22be0:	cmp	r3, #0
   22be4:	beq	22bf8 <__assert_fail@plt+0x11730>
   22be8:	b	22b10 <__assert_fail@plt+0x11648>
   22bec:	ldrsb	r3, [r2]
   22bf0:	cmp	r3, #0
   22bf4:	movlt	r8, r7
   22bf8:	add	r1, r1, #1
   22bfc:	add	r2, r2, #8
   22c00:	cmp	r1, r0
   22c04:	beq	22c80 <__assert_fail@plt+0x117b8>
   22c08:	ldrb	r3, [r2, #4]
   22c0c:	sub	r3, r3, #1
   22c10:	cmp	r3, #11
   22c14:	ldrls	pc, [pc, r3, lsl #2]
   22c18:	b	22c7c <__assert_fail@plt+0x117b4>
   22c1c:	andeq	r2, r2, ip, ror #23
   22c20:	strdeq	r2, [r2], -r8
   22c24:			; <UNDEFINED> instruction: 0x00022bb4
   22c28:	strdeq	r2, [r2], -r8
   22c2c:	andeq	r2, r2, ip, lsr #23
   22c30:	andeq	r2, r2, r0, lsl fp
   22c34:	andeq	r2, r2, ip, ror ip
   22c38:	strdeq	r2, [r2], -r8
   22c3c:	strdeq	r2, [r2], -r8
   22c40:	strdeq	r2, [r2], -r8
   22c44:	strdeq	r2, [r2], -r8
   22c48:	andeq	r2, r2, ip, asr #24
   22c4c:	ldr	r3, [r2]
   22c50:	cmp	r3, #32
   22c54:	beq	22bf8 <__assert_fail@plt+0x11730>
   22c58:	bls	22c70 <__assert_fail@plt+0x117a8>
   22c5c:	cmp	r3, #64	; 0x40
   22c60:	beq	22bf8 <__assert_fail@plt+0x11730>
   22c64:	cmp	r3, #128	; 0x80
   22c68:	beq	22bf8 <__assert_fail@plt+0x11730>
   22c6c:	b	22b10 <__assert_fail@plt+0x11648>
   22c70:	cmp	r3, #16
   22c74:	beq	22bf8 <__assert_fail@plt+0x11730>
   22c78:	b	22b10 <__assert_fail@plt+0x11648>
   22c7c:	bl	114bc <abort@plt>
   22c80:	orr	r8, r8, ip
   22c84:	tst	r8, #255	; 0xff
   22c88:	beq	22cec <__assert_fail@plt+0x11824>
   22c8c:	mov	lr, #7
   22c90:	ldr	r3, [sp, #12]
   22c94:	b	22cb4 <__assert_fail@plt+0x117ec>
   22c98:	ldrsb	r2, [r6, r0]
   22c9c:	cmp	r2, #0
   22ca0:	blt	22cd8 <__assert_fail@plt+0x11810>
   22ca4:	add	r3, r3, #1
   22ca8:	ldr	r2, [r4, #8]
   22cac:	cmp	r3, r2
   22cb0:	bcs	22cec <__assert_fail@plt+0x11824>
   22cb4:	lsl	r0, r3, #3
   22cb8:	ldr	r6, [r4]
   22cbc:	add	r1, r6, r0
   22cc0:	ldrb	r2, [r1, #4]
   22cc4:	cmp	r2, #1
   22cc8:	beq	22c98 <__assert_fail@plt+0x117d0>
   22ccc:	cmp	r2, #5
   22cd0:	strbeq	lr, [r1, #4]
   22cd4:	b	22ca4 <__assert_fail@plt+0x117dc>
   22cd8:	ldrb	r2, [r1, #6]
   22cdc:	bfc	r2, #5, #1
   22ce0:	strb	r2, [r1, #6]
   22ce4:	b	22ca4 <__assert_fail@plt+0x117dc>
   22ce8:	mov	ip, r8
   22cec:	mov	r3, #1
   22cf0:	str	r3, [r4, #92]	; 0x5c
   22cf4:	ldrb	r3, [r4, #88]	; 0x58
   22cf8:	ldr	r2, [r4, #76]	; 0x4c
   22cfc:	cmp	r2, #0
   22d00:	orrgt	ip, ip, #1
   22d04:	and	r3, r3, #251	; 0xfb
   22d08:	bfi	r3, ip, #1, #1
   22d0c:	strb	r3, [r4, #88]	; 0x58
   22d10:	b	22b10 <__assert_fail@plt+0x11648>
   22d14:	add	r1, r1, #1
   22d18:	cmp	r0, r1
   22d1c:	beq	22d74 <__assert_fail@plt+0x118ac>
   22d20:	ldr	r8, [r2, #4]!
   22d24:	add	r9, ip, r8, lsl #3
   22d28:	ldrb	r9, [r9, #4]
   22d2c:	cmp	r9, #9
   22d30:	bne	22d14 <__assert_fail@plt+0x1184c>
   22d34:	ldr	r9, [ip, r8, lsl #3]
   22d38:	ldr	r8, [lr]
   22d3c:	cmp	r9, r8
   22d40:	bne	22d14 <__assert_fail@plt+0x1184c>
   22d44:	cmp	r1, r0
   22d48:	beq	22d74 <__assert_fail@plt+0x118ac>
   22d4c:	ldr	r2, [r4, #20]
   22d50:	add	r3, r3, r3, lsl #1
   22d54:	add	r3, r2, r3, lsl #2
   22d58:	ldr	r3, [r3, #8]
   22d5c:	ldr	r8, [r3]
   22d60:	mov	r1, r8
   22d64:	add	r0, sp, #28
   22d68:	bl	16194 <__assert_fail@plt+0x4ccc>
   22d6c:	cmp	r0, #0
   22d70:	beq	22dbc <__assert_fail@plt+0x118f4>
   22d74:	add	r6, r6, #1
   22d78:	ldr	r0, [sp, #32]
   22d7c:	cmp	r0, r6
   22d80:	ble	22de0 <__assert_fail@plt+0x11918>
   22d84:	ldr	r2, [sp, #36]	; 0x24
   22d88:	ldr	ip, [r4]
   22d8c:	ldr	r3, [r2, r6, lsl #2]
   22d90:	add	lr, ip, r3, lsl #3
   22d94:	ldrb	r1, [lr, #4]
   22d98:	cmp	r1, #4
   22d9c:	bne	22d74 <__assert_fail@plt+0x118ac>
   22da0:	cmp	r0, #0
   22da4:	ble	22db4 <__assert_fail@plt+0x118ec>
   22da8:	sub	r2, r2, #4
   22dac:	mov	r1, r7
   22db0:	b	22d20 <__assert_fail@plt+0x11858>
   22db4:	mov	r1, r7
   22db8:	b	22d44 <__assert_fail@plt+0x1187c>
   22dbc:	add	r8, r8, r8, lsl #1
   22dc0:	ldr	r1, [r4, #24]
   22dc4:	add	r1, r1, r8, lsl #2
   22dc8:	add	r0, sp, #28
   22dcc:	bl	19db4 <__assert_fail@plt+0x88ec>
   22dd0:	subs	r6, r0, #0
   22dd4:	beq	22d74 <__assert_fail@plt+0x118ac>
   22dd8:	mov	r7, r6
   22ddc:	b	22e24 <__assert_fail@plt+0x1195c>
   22de0:	mov	r3, #0
   22de4:	add	r2, sp, #28
   22de8:	mov	r1, r4
   22dec:	add	r0, sp, #24
   22df0:	bl	18fdc <__assert_fail@plt+0x7b14>
   22df4:	str	r0, [r4, #36]	; 0x24
   22df8:	cmp	r0, #0
   22dfc:	ldreq	r7, [sp, #24]
   22e00:	beq	22e24 <__assert_fail@plt+0x1195c>
   22e04:	ldrsb	r3, [r0, #52]	; 0x34
   22e08:	cmp	r3, #0
   22e0c:	strge	r0, [r4, #48]	; 0x30
   22e10:	strge	r0, [r4, #44]	; 0x2c
   22e14:	strge	r0, [r4, #40]	; 0x28
   22e18:	blt	22e64 <__assert_fail@plt+0x1199c>
   22e1c:	ldr	r0, [sp, #36]	; 0x24
   22e20:	bl	135a4 <__assert_fail@plt+0x20dc>
   22e24:	str	r7, [sp, #124]	; 0x7c
   22e28:	mov	r0, r5
   22e2c:	bl	192cc <__assert_fail@plt+0x7e04>
   22e30:	add	r0, sp, #40	; 0x28
   22e34:	bl	1932c <__assert_fail@plt+0x7e64>
   22e38:	ldr	r3, [sp, #124]	; 0x7c
   22e3c:	cmp	r3, #0
   22e40:	bne	22ed0 <__assert_fail@plt+0x11a08>
   22e44:	ldr	r0, [sp, #124]	; 0x7c
   22e48:	add	sp, sp, #132	; 0x84
   22e4c:	ldrd	r4, [sp]
   22e50:	ldrd	r6, [sp, #8]
   22e54:	ldrd	r8, [sp, #16]
   22e58:	ldrd	sl, [sp, #24]
   22e5c:	add	sp, sp, #32
   22e60:	pop	{pc}		; (ldr pc, [sp], #4)
   22e64:	mov	r3, #1
   22e68:	add	r2, sp, #28
   22e6c:	mov	r1, r4
   22e70:	add	r0, sp, #24
   22e74:	bl	18fdc <__assert_fail@plt+0x7b14>
   22e78:	str	r0, [r4, #40]	; 0x28
   22e7c:	mov	r3, #2
   22e80:	add	r2, sp, #28
   22e84:	mov	r1, r4
   22e88:	add	r0, sp, #24
   22e8c:	bl	18fdc <__assert_fail@plt+0x7b14>
   22e90:	str	r0, [r4, #44]	; 0x2c
   22e94:	mov	r3, #6
   22e98:	add	r2, sp, #28
   22e9c:	mov	r1, r4
   22ea0:	add	r0, sp, #24
   22ea4:	bl	18fdc <__assert_fail@plt+0x7b14>
   22ea8:	str	r0, [r4, #48]	; 0x30
   22eac:	ldr	r3, [r4, #40]	; 0x28
   22eb0:	cmp	r3, #0
   22eb4:	beq	22ec8 <__assert_fail@plt+0x11a00>
   22eb8:	ldr	r3, [r4, #44]	; 0x2c
   22ebc:	cmp	r0, #0
   22ec0:	cmpne	r3, #0
   22ec4:	bne	22e1c <__assert_fail@plt+0x11954>
   22ec8:	ldr	r7, [sp, #24]
   22ecc:	b	22e24 <__assert_fail@plt+0x1195c>
   22ed0:	ldr	r3, [sp, #16]
   22ed4:	cmp	r3, #0
   22ed8:	beq	22ee4 <__assert_fail@plt+0x11a1c>
   22edc:	add	r0, r4, #136	; 0x88
   22ee0:	bl	111b0 <pthread_mutex_destroy@plt>
   22ee4:	mov	r0, r4
   22ee8:	bl	1936c <__assert_fail@plt+0x7ea4>
   22eec:	mov	r3, #0
   22ef0:	str	r3, [r5]
   22ef4:	str	r3, [r5, #4]
   22ef8:	b	22e44 <__assert_fail@plt+0x1197c>
   22efc:	mov	r0, #12
   22f00:	b	22e48 <__assert_fail@plt+0x11980>
   22f04:	mov	r0, #12
   22f08:	b	22f28 <__assert_fail@plt+0x11a60>
   22f0c:	mov	r0, #12
   22f10:	b	22f28 <__assert_fail@plt+0x11a60>
   22f14:	ldr	r0, [sp, #12]
   22f18:	b	22f28 <__assert_fail@plt+0x11a60>
   22f1c:	mov	r0, #12
   22f20:	b	22f28 <__assert_fail@plt+0x11a60>
   22f24:	mov	r0, #12
   22f28:	str	r0, [sp, #124]	; 0x7c
   22f2c:	b	225cc <__assert_fail@plt+0x11104>
   22f30:	mov	r0, #12
   22f34:	b	22f28 <__assert_fail@plt+0x11a60>
   22f38:	mov	r3, #0
   22f3c:	str	r3, [r4, #52]	; 0x34
   22f40:	b	225cc <__assert_fail@plt+0x11104>
   22f44:	mov	r3, #12
   22f48:	str	r3, [sp, #124]	; 0x7c
   22f4c:	mov	r0, r4
   22f50:	bl	1936c <__assert_fail@plt+0x7ea4>
   22f54:	mov	r3, #0
   22f58:	str	r3, [r5]
   22f5c:	str	r3, [r5, #4]
   22f60:	ldr	r0, [sp, #124]	; 0x7c
   22f64:	b	22e48 <__assert_fail@plt+0x11980>
   22f68:	str	r4, [sp, #-8]!
   22f6c:	str	lr, [sp, #4]
   22f70:	mov	ip, r2
   22f74:	movw	r3, #29424	; 0x72f0
   22f78:	movt	r3, #3
   22f7c:	ldr	r3, [r3]
   22f80:	ubfx	lr, r3, #25, #1
   22f84:	ldrb	r2, [r2, #28]
   22f88:	bfi	r2, lr, #4, #1
   22f8c:	mvn	r2, r2, lsl #25
   22f90:	mvn	r2, r2, lsr #25
   22f94:	strb	r2, [ip, #28]
   22f98:	mov	r2, r1
   22f9c:	mov	r1, r0
   22fa0:	mov	r0, ip
   22fa4:	bl	222f0 <__assert_fail@plt+0x10e28>
   22fa8:	cmp	r0, #0
   22fac:	moveq	r0, #0
   22fb0:	beq	22fd8 <__assert_fail@plt+0x11b10>
   22fb4:	movw	r3, #23448	; 0x5b98
   22fb8:	movt	r3, #2
   22fbc:	add	r1, r3, #32
   22fc0:	add	r3, r3, r0, lsl #2
   22fc4:	ldr	r3, [r3, #416]	; 0x1a0
   22fc8:	mov	r2, #5
   22fcc:	add	r1, r1, r3
   22fd0:	mov	r0, #0
   22fd4:	bl	11258 <dcgettext@plt>
   22fd8:	ldr	r4, [sp]
   22fdc:	add	sp, sp, #4
   22fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   22fe4:	movw	r3, #29424	; 0x72f0
   22fe8:	movt	r3, #3
   22fec:	ldr	r2, [r3]
   22ff0:	str	r0, [r3]
   22ff4:	mov	r0, r2
   22ff8:	bx	lr
   22ffc:	strd	r4, [sp, #-16]!
   23000:	str	r6, [sp, #8]
   23004:	str	lr, [sp, #12]
   23008:	mov	r5, r0
   2300c:	ldr	r4, [r0]
   23010:	ldr	r6, [r0, #16]
   23014:	mov	r2, #256	; 0x100
   23018:	mov	r1, #0
   2301c:	mov	r0, r6
   23020:	bl	113e4 <memset@plt>
   23024:	mov	r2, r6
   23028:	ldr	r1, [r4, #36]	; 0x24
   2302c:	mov	r0, r5
   23030:	bl	1cd4c <__assert_fail@plt+0xb884>
   23034:	ldr	r1, [r4, #40]	; 0x28
   23038:	ldr	r3, [r4, #36]	; 0x24
   2303c:	cmp	r3, r1
   23040:	beq	23050 <__assert_fail@plt+0x11b88>
   23044:	mov	r2, r6
   23048:	mov	r0, r5
   2304c:	bl	1cd4c <__assert_fail@plt+0xb884>
   23050:	ldr	r1, [r4, #44]	; 0x2c
   23054:	ldr	r3, [r4, #36]	; 0x24
   23058:	cmp	r3, r1
   2305c:	beq	2306c <__assert_fail@plt+0x11ba4>
   23060:	mov	r2, r6
   23064:	mov	r0, r5
   23068:	bl	1cd4c <__assert_fail@plt+0xb884>
   2306c:	ldr	r1, [r4, #48]	; 0x30
   23070:	ldr	r3, [r4, #36]	; 0x24
   23074:	cmp	r3, r1
   23078:	beq	23088 <__assert_fail@plt+0x11bc0>
   2307c:	mov	r2, r6
   23080:	mov	r0, r5
   23084:	bl	1cd4c <__assert_fail@plt+0xb884>
   23088:	ldrb	r3, [r5, #28]
   2308c:	orr	r3, r3, #8
   23090:	strb	r3, [r5, #28]
   23094:	mov	r0, #0
   23098:	ldrd	r4, [sp]
   2309c:	ldr	r6, [sp, #8]
   230a0:	add	sp, sp, #12
   230a4:	pop	{pc}		; (ldr pc, [sp], #4)
   230a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   230ac:	strd	r6, [sp, #8]
   230b0:	strd	r8, [sp, #16]
   230b4:	strd	sl, [sp, #24]
   230b8:	str	lr, [sp, #32]
   230bc:	sub	sp, sp, #52	; 0x34
   230c0:	ldr	ip, [sp, #88]	; 0x58
   230c4:	ldr	r7, [sp, #96]	; 0x60
   230c8:	ldr	r9, [r0]
   230cc:	add	r8, r3, ip
   230d0:	cmp	r3, r2
   230d4:	movle	lr, #0
   230d8:	movgt	lr, #1
   230dc:	orrs	lr, lr, r3, lsr #31
   230e0:	bne	23444 <__assert_fail@plt+0x11f7c>
   230e4:	mov	r5, r3
   230e8:	str	r2, [sp, #32]
   230ec:	str	r1, [sp, #36]	; 0x24
   230f0:	mov	r6, r0
   230f4:	cmp	r8, r2
   230f8:	bgt	23250 <__assert_fail@plt+0x11d88>
   230fc:	cmp	ip, #0
   23100:	cmpge	r3, r8
   23104:	bgt	23258 <__assert_fail@plt+0x11d90>
   23108:	cmp	r8, #0
   2310c:	blt	23454 <__assert_fail@plt+0x11f8c>
   23110:	cmp	r3, r8
   23114:	movgt	r3, #0
   23118:	movle	r3, #1
   2311c:	ands	r3, r3, ip, lsr #31
   23120:	bne	23454 <__assert_fail@plt+0x11f8c>
   23124:	movw	r3, #0
   23128:	movt	r3, #0
   2312c:	cmp	r3, #0
   23130:	movne	r3, #1
   23134:	moveq	r3, #0
   23138:	mov	r2, r3
   2313c:	movw	r3, #0
   23140:	movt	r3, #0
   23144:	cmp	r3, #0
   23148:	movne	r3, #1
   2314c:	moveq	r3, #0
   23150:	orr	r3, r2, r3
   23154:	ands	r3, r3, #255	; 0xff
   23158:	str	r3, [sp, #28]
   2315c:	beq	23170 <__assert_fail@plt+0x11ca8>
   23160:	add	r0, r9, #136	; 0x88
   23164:	bl	111ec <pthread_mutex_lock@plt>
   23168:	mov	r3, #1
   2316c:	str	r3, [sp, #28]
   23170:	ldrb	r3, [r6, #28]
   23174:	ubfx	fp, r3, #5, #2
   23178:	cmp	r8, r5
   2317c:	ble	23194 <__assert_fail@plt+0x11ccc>
   23180:	ldr	r2, [r6, #16]
   23184:	cmp	r2, #0
   23188:	beq	23194 <__assert_fail@plt+0x11ccc>
   2318c:	tst	r3, #8
   23190:	beq	23260 <__assert_fail@plt+0x11d98>
   23194:	ldrb	r3, [r6, #28]
   23198:	tst	r3, #16
   2319c:	bne	23290 <__assert_fail@plt+0x11dc8>
   231a0:	cmp	r7, #0
   231a4:	moveq	r4, #1
   231a8:	beq	231c0 <__assert_fail@plt+0x11cf8>
   231ac:	and	r3, r3, #6
   231b0:	cmp	r3, #4
   231b4:	beq	2326c <__assert_fail@plt+0x11da4>
   231b8:	ldr	r4, [r6, #24]
   231bc:	add	r4, r4, #1
   231c0:	str	r4, [sp, #40]	; 0x28
   231c4:	lsl	r0, r4, #3
   231c8:	bl	24808 <__assert_fail@plt+0x13340>
   231cc:	subs	sl, r0, #0
   231d0:	beq	2343c <__assert_fail@plt+0x11f74>
   231d4:	str	fp, [sp, #16]
   231d8:	str	sl, [sp, #12]
   231dc:	str	r4, [sp, #8]
   231e0:	ldr	r3, [sp, #92]	; 0x5c
   231e4:	str	r3, [sp, #4]
   231e8:	str	r8, [sp]
   231ec:	mov	r3, r5
   231f0:	ldr	r2, [sp, #32]
   231f4:	ldr	r1, [sp, #36]	; 0x24
   231f8:	mov	r0, r6
   231fc:	bl	20898 <__assert_fail@plt+0xf3d0>
   23200:	subs	r8, r0, #0
   23204:	beq	2329c <__assert_fail@plt+0x11dd4>
   23208:	cmp	r8, #1
   2320c:	mvneq	r5, #0
   23210:	mvnne	r5, #1
   23214:	mov	r0, sl
   23218:	bl	135a4 <__assert_fail@plt+0x20dc>
   2321c:	ldr	r3, [sp, #28]
   23220:	cmp	r3, #0
   23224:	beq	23230 <__assert_fail@plt+0x11d68>
   23228:	add	r0, r9, #136	; 0x88
   2322c:	bl	11144 <pthread_mutex_unlock@plt>
   23230:	mov	r0, r5
   23234:	add	sp, sp, #52	; 0x34
   23238:	ldrd	r4, [sp]
   2323c:	ldrd	r6, [sp, #8]
   23240:	ldrd	r8, [sp, #16]
   23244:	ldrd	sl, [sp, #24]
   23248:	add	sp, sp, #32
   2324c:	pop	{pc}		; (ldr pc, [sp], #4)
   23250:	ldr	r8, [sp, #32]
   23254:	b	23124 <__assert_fail@plt+0x11c5c>
   23258:	ldr	r8, [sp, #32]
   2325c:	b	23124 <__assert_fail@plt+0x11c5c>
   23260:	mov	r0, r6
   23264:	bl	22ffc <__assert_fail@plt+0x11b34>
   23268:	b	23194 <__assert_fail@plt+0x11ccc>
   2326c:	ldr	r3, [r7]
   23270:	ldr	r2, [r6, #24]
   23274:	cmp	r3, r2
   23278:	bhi	231b8 <__assert_fail@plt+0x11cf0>
   2327c:	cmp	r3, #0
   23280:	movgt	r4, r3
   23284:	movle	r4, #1
   23288:	movle	r7, #0
   2328c:	b	231c0 <__assert_fail@plt+0x11cf8>
   23290:	mov	r4, #1
   23294:	mov	r7, #0
   23298:	b	231c0 <__assert_fail@plt+0x11cf8>
   2329c:	cmp	r7, #0
   232a0:	beq	2334c <__assert_fail@plt+0x11e84>
   232a4:	ldrb	fp, [r6, #28]
   232a8:	ubfx	fp, fp, #1, #2
   232ac:	add	r3, r4, #1
   232b0:	str	r3, [sp, #32]
   232b4:	cmp	fp, #0
   232b8:	beq	23360 <__assert_fail@plt+0x11e98>
   232bc:	cmp	fp, #1
   232c0:	movne	fp, #2
   232c4:	beq	233ac <__assert_fail@plt+0x11ee4>
   232c8:	cmp	r4, #0
   232cc:	ble	23418 <__assert_fail@plt+0x11f50>
   232d0:	ldr	r3, [sp, #40]	; 0x28
   232d4:	lsl	ip, r3, #2
   232d8:	mov	r3, #0
   232dc:	add	r0, sl, #4
   232e0:	ldr	r1, [sl, r3, lsl #1]
   232e4:	ldr	r2, [r7, #4]
   232e8:	str	r1, [r2, r3]
   232ec:	ldr	r1, [r0, r3, lsl #1]
   232f0:	ldr	r2, [r7, #8]
   232f4:	str	r1, [r2, r3]
   232f8:	add	r3, r3, #4
   232fc:	cmp	ip, r3
   23300:	bne	232e0 <__assert_fail@plt+0x11e18>
   23304:	ldr	r3, [r7]
   23308:	cmp	r4, r3
   2330c:	bcs	23334 <__assert_fail@plt+0x11e6c>
   23310:	mvn	r3, #0
   23314:	ldr	r2, [r7, #8]
   23318:	str	r3, [r2, r4, lsl #2]
   2331c:	ldr	r2, [r7, #4]
   23320:	str	r3, [r2, r4, lsl #2]
   23324:	add	r4, r4, #1
   23328:	ldr	r2, [r7]
   2332c:	cmp	r4, r2
   23330:	bcc	23314 <__assert_fail@plt+0x11e4c>
   23334:	ldrb	r3, [r6, #28]
   23338:	bfi	r3, fp, #1, #2
   2333c:	strb	r3, [r6, #28]
   23340:	and	r3, r3, #6
   23344:	cmp	r3, #0
   23348:	beq	2344c <__assert_fail@plt+0x11f84>
   2334c:	ldrb	r3, [sp, #100]	; 0x64
   23350:	cmp	r3, #0
   23354:	bne	23430 <__assert_fail@plt+0x11f68>
   23358:	ldr	r5, [sl]
   2335c:	b	23214 <__assert_fail@plt+0x11d4c>
   23360:	lsl	fp, r3, #2
   23364:	mov	r0, fp
   23368:	bl	24808 <__assert_fail@plt+0x13340>
   2336c:	str	r0, [r7, #4]
   23370:	cmp	r0, #0
   23374:	beq	23420 <__assert_fail@plt+0x11f58>
   23378:	mov	r0, fp
   2337c:	bl	24808 <__assert_fail@plt+0x13340>
   23380:	str	r0, [r7, #8]
   23384:	cmp	r0, #0
   23388:	beq	2339c <__assert_fail@plt+0x11ed4>
   2338c:	ldr	r3, [sp, #32]
   23390:	str	r3, [r7]
   23394:	mov	fp, #1
   23398:	b	232c8 <__assert_fail@plt+0x11e00>
   2339c:	ldr	r0, [r7, #4]
   233a0:	bl	135a4 <__assert_fail@plt+0x20dc>
   233a4:	mov	fp, #0
   233a8:	b	23334 <__assert_fail@plt+0x11e6c>
   233ac:	ldr	r3, [r7]
   233b0:	ldr	r2, [sp, #32]
   233b4:	cmp	r3, r2
   233b8:	bcs	232c8 <__assert_fail@plt+0x11e00>
   233bc:	lsl	r3, r2, #2
   233c0:	str	r3, [sp, #44]	; 0x2c
   233c4:	mov	r1, r3
   233c8:	ldr	r0, [r7, #4]
   233cc:	bl	24844 <__assert_fail@plt+0x1337c>
   233d0:	subs	r2, r0, #0
   233d4:	str	r2, [sp, #36]	; 0x24
   233d8:	beq	23428 <__assert_fail@plt+0x11f60>
   233dc:	ldr	r1, [sp, #44]	; 0x2c
   233e0:	ldr	r0, [r7, #8]
   233e4:	bl	24844 <__assert_fail@plt+0x1337c>
   233e8:	cmp	r0, #0
   233ec:	beq	23408 <__assert_fail@plt+0x11f40>
   233f0:	ldr	r3, [sp, #36]	; 0x24
   233f4:	str	r3, [r7, #4]
   233f8:	str	r0, [r7, #8]
   233fc:	ldr	r3, [sp, #32]
   23400:	str	r3, [r7]
   23404:	b	232c8 <__assert_fail@plt+0x11e00>
   23408:	ldr	r0, [sp, #36]	; 0x24
   2340c:	bl	135a4 <__assert_fail@plt+0x20dc>
   23410:	mov	fp, #0
   23414:	b	23334 <__assert_fail@plt+0x11e6c>
   23418:	mov	r4, r8
   2341c:	b	23304 <__assert_fail@plt+0x11e3c>
   23420:	mov	fp, #0
   23424:	b	23334 <__assert_fail@plt+0x11e6c>
   23428:	mov	fp, #0
   2342c:	b	23334 <__assert_fail@plt+0x11e6c>
   23430:	ldr	r3, [sl, #4]
   23434:	sub	r5, r3, r5
   23438:	b	23214 <__assert_fail@plt+0x11d4c>
   2343c:	mvn	r5, #1
   23440:	b	2321c <__assert_fail@plt+0x11d54>
   23444:	mvn	r5, #0
   23448:	b	23230 <__assert_fail@plt+0x11d68>
   2344c:	mvn	r5, #1
   23450:	b	23214 <__assert_fail@plt+0x11d4c>
   23454:	movw	r3, #0
   23458:	movt	r3, #0
   2345c:	cmp	r3, #0
   23460:	movne	r3, #1
   23464:	moveq	r3, #0
   23468:	mov	r2, r3
   2346c:	movw	r3, #0
   23470:	movt	r3, #0
   23474:	cmp	r3, #0
   23478:	movne	r3, #1
   2347c:	moveq	r3, #0
   23480:	orr	r3, r2, r3
   23484:	ands	r3, r3, #255	; 0xff
   23488:	str	r3, [sp, #28]
   2348c:	movne	r8, #0
   23490:	bne	23160 <__assert_fail@plt+0x11c98>
   23494:	ldrb	fp, [r6, #28]
   23498:	ubfx	fp, fp, #5, #2
   2349c:	mov	r8, #0
   234a0:	b	23194 <__assert_fail@plt+0x11ccc>
   234a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   234a8:	strd	r6, [sp, #8]
   234ac:	strd	r8, [sp, #16]
   234b0:	strd	sl, [sp, #24]
   234b4:	str	lr, [sp, #32]
   234b8:	sub	sp, sp, #20
   234bc:	mov	r7, r3
   234c0:	ldr	r5, [sp, #56]	; 0x38
   234c4:	ldr	r6, [sp, #72]	; 0x48
   234c8:	orr	r3, r5, r2
   234cc:	orrs	r3, r3, r6
   234d0:	mvnmi	r4, #1
   234d4:	bmi	2353c <__assert_fail@plt+0x12074>
   234d8:	mov	r9, r0
   234dc:	mov	sl, r1
   234e0:	mov	r4, r2
   234e4:	adds	fp, r2, r5
   234e8:	bvs	235a0 <__assert_fail@plt+0x120d8>
   234ec:	cmp	r5, #0
   234f0:	ble	23594 <__assert_fail@plt+0x120cc>
   234f4:	cmp	r2, #0
   234f8:	movle	r8, #0
   234fc:	bgt	2355c <__assert_fail@plt+0x12094>
   23500:	ldrb	r3, [sp, #76]	; 0x4c
   23504:	str	r3, [sp, #12]
   23508:	ldr	r3, [sp, #68]	; 0x44
   2350c:	str	r3, [sp, #8]
   23510:	str	r6, [sp, #4]
   23514:	ldr	r3, [sp, #64]	; 0x40
   23518:	str	r3, [sp]
   2351c:	ldr	r3, [sp, #60]	; 0x3c
   23520:	mov	r2, fp
   23524:	mov	r1, r7
   23528:	mov	r0, r9
   2352c:	bl	230a8 <__assert_fail@plt+0x11be0>
   23530:	mov	r4, r0
   23534:	mov	r0, r8
   23538:	bl	135a4 <__assert_fail@plt+0x20dc>
   2353c:	mov	r0, r4
   23540:	add	sp, sp, #20
   23544:	ldrd	r4, [sp]
   23548:	ldrd	r6, [sp, #8]
   2354c:	ldrd	r8, [sp, #16]
   23550:	ldrd	sl, [sp, #24]
   23554:	add	sp, sp, #32
   23558:	pop	{pc}		; (ldr pc, [sp], #4)
   2355c:	mov	r0, fp
   23560:	bl	24808 <__assert_fail@plt+0x13340>
   23564:	subs	r8, r0, #0
   23568:	beq	235a8 <__assert_fail@plt+0x120e0>
   2356c:	mov	r2, r4
   23570:	mov	r1, sl
   23574:	mov	r0, r8
   23578:	bl	11204 <memcpy@plt>
   2357c:	mov	r2, r5
   23580:	mov	r1, r7
   23584:	add	r0, r8, r4
   23588:	bl	11204 <memcpy@plt>
   2358c:	mov	r7, r8
   23590:	b	23500 <__assert_fail@plt+0x12038>
   23594:	mov	r7, r1
   23598:	mov	r8, #0
   2359c:	b	23500 <__assert_fail@plt+0x12038>
   235a0:	mvn	r4, #1
   235a4:	b	2353c <__assert_fail@plt+0x12074>
   235a8:	mvn	r4, #1
   235ac:	b	2353c <__assert_fail@plt+0x12074>
   235b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   235b4:	strd	r6, [sp, #8]
   235b8:	str	r8, [sp, #16]
   235bc:	str	lr, [sp, #20]
   235c0:	mov	r4, r0
   235c4:	mov	r7, r1
   235c8:	mov	r6, r2
   235cc:	and	r2, r2, #1
   235d0:	movw	r5, #45820	; 0xb2fc
   235d4:	movt	r5, #3
   235d8:	movw	r3, #710	; 0x2c6
   235dc:	movt	r3, #257	; 0x101
   235e0:	cmp	r2, #0
   235e4:	moveq	r5, r3
   235e8:	mov	r3, #0
   235ec:	str	r3, [r0]
   235f0:	str	r3, [r0, #4]
   235f4:	str	r3, [r0, #8]
   235f8:	mov	r0, #256	; 0x100
   235fc:	bl	24808 <__assert_fail@plt+0x13340>
   23600:	str	r0, [r4, #16]
   23604:	cmp	r0, #0
   23608:	beq	236b0 <__assert_fail@plt+0x121e8>
   2360c:	lsl	r3, r6, #21
   23610:	and	r3, r3, #4194304	; 0x400000
   23614:	orr	r5, r3, r5
   23618:	tst	r6, #4
   2361c:	bicne	r5, r5, #64	; 0x40
   23620:	orrne	r5, r5, #256	; 0x100
   23624:	movne	r2, #1
   23628:	moveq	r2, #0
   2362c:	ldrb	r3, [r4, #28]
   23630:	bfi	r3, r2, #7, #1
   23634:	ubfx	r6, r6, #3, #1
   23638:	bfi	r3, r6, #4, #1
   2363c:	strb	r3, [r4, #28]
   23640:	mov	r3, #0
   23644:	str	r3, [r4, #20]
   23648:	mov	r0, r7
   2364c:	bl	11390 <strlen@plt>
   23650:	mov	r3, r5
   23654:	mov	r2, r0
   23658:	mov	r1, r7
   2365c:	mov	r0, r4
   23660:	bl	222f0 <__assert_fail@plt+0x10e28>
   23664:	mov	r5, r0
   23668:	cmp	r0, #16
   2366c:	beq	23698 <__assert_fail@plt+0x121d0>
   23670:	cmp	r0, #0
   23674:	bne	2369c <__assert_fail@plt+0x121d4>
   23678:	mov	r0, r4
   2367c:	bl	22ffc <__assert_fail@plt+0x11b34>
   23680:	mov	r0, r5
   23684:	ldrd	r4, [sp]
   23688:	ldrd	r6, [sp, #8]
   2368c:	ldr	r8, [sp, #16]
   23690:	add	sp, sp, #20
   23694:	pop	{pc}		; (ldr pc, [sp], #4)
   23698:	mov	r5, #8
   2369c:	ldr	r0, [r4, #16]
   236a0:	bl	135a4 <__assert_fail@plt+0x20dc>
   236a4:	mov	r3, #0
   236a8:	str	r3, [r4, #16]
   236ac:	b	23680 <__assert_fail@plt+0x121b8>
   236b0:	mov	r5, #12
   236b4:	b	23680 <__assert_fail@plt+0x121b8>
   236b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   236bc:	strd	r6, [sp, #8]
   236c0:	str	r8, [sp, #16]
   236c4:	str	lr, [sp, #20]
   236c8:	cmp	r0, #16
   236cc:	bhi	23748 <__assert_fail@plt+0x12280>
   236d0:	mov	r6, r2
   236d4:	mov	r4, r3
   236d8:	movw	r3, #23448	; 0x5b98
   236dc:	movt	r3, #2
   236e0:	add	r1, r3, #32
   236e4:	add	r3, r3, r0, lsl #2
   236e8:	ldr	r3, [r3, #416]	; 0x1a0
   236ec:	mov	r2, #5
   236f0:	add	r1, r1, r3
   236f4:	mov	r0, #0
   236f8:	bl	11258 <dcgettext@plt>
   236fc:	mov	r7, r0
   23700:	bl	11390 <strlen@plt>
   23704:	add	r5, r0, #1
   23708:	cmp	r4, #0
   2370c:	beq	23730 <__assert_fail@plt+0x12268>
   23710:	cmp	r5, r4
   23714:	subhi	r2, r4, #1
   23718:	movhi	r3, #0
   2371c:	strbhi	r3, [r6, r2]
   23720:	movls	r2, r5
   23724:	mov	r1, r7
   23728:	mov	r0, r6
   2372c:	bl	11204 <memcpy@plt>
   23730:	mov	r0, r5
   23734:	ldrd	r4, [sp]
   23738:	ldrd	r6, [sp, #8]
   2373c:	ldr	r8, [sp, #16]
   23740:	add	sp, sp, #20
   23744:	pop	{pc}		; (ldr pc, [sp], #4)
   23748:	bl	114bc <abort@plt>
   2374c:	strd	r4, [sp, #-16]!
   23750:	str	r6, [sp, #8]
   23754:	str	lr, [sp, #12]
   23758:	mov	r4, r0
   2375c:	ldr	r5, [r0]
   23760:	cmp	r5, #0
   23764:	beq	237ac <__assert_fail@plt+0x122e4>
   23768:	movw	r3, #0
   2376c:	movt	r3, #0
   23770:	cmp	r3, #0
   23774:	movne	r3, #1
   23778:	moveq	r3, #0
   2377c:	movw	r2, #0
   23780:	movt	r2, #0
   23784:	cmp	r2, #0
   23788:	movne	r2, #1
   2378c:	moveq	r2, #0
   23790:	orr	r3, r3, r2
   23794:	tst	r3, #255	; 0xff
   23798:	beq	237a4 <__assert_fail@plt+0x122dc>
   2379c:	add	r0, r5, #136	; 0x88
   237a0:	bl	111b0 <pthread_mutex_destroy@plt>
   237a4:	mov	r0, r5
   237a8:	bl	1936c <__assert_fail@plt+0x7ea4>
   237ac:	mov	r5, #0
   237b0:	str	r5, [r4]
   237b4:	str	r5, [r4, #4]
   237b8:	ldr	r0, [r4, #16]
   237bc:	bl	135a4 <__assert_fail@plt+0x20dc>
   237c0:	str	r5, [r4, #16]
   237c4:	ldr	r0, [r4, #20]
   237c8:	bl	135a4 <__assert_fail@plt+0x20dc>
   237cc:	str	r5, [r4, #20]
   237d0:	ldrd	r4, [sp]
   237d4:	ldr	r6, [sp, #8]
   237d8:	add	sp, sp, #12
   237dc:	pop	{pc}		; (ldr pc, [sp], #4)
   237e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   237e4:	strd	r6, [sp, #8]
   237e8:	strd	r8, [sp, #16]
   237ec:	strd	sl, [sp, #24]
   237f0:	str	lr, [sp, #32]
   237f4:	sub	sp, sp, #36	; 0x24
   237f8:	ldr	r6, [sp, #72]	; 0x48
   237fc:	bics	ip, r6, #7
   23800:	movne	r0, #2
   23804:	bne	238c4 <__assert_fail@plt+0x123fc>
   23808:	mov	r7, r3
   2380c:	mov	r9, r2
   23810:	str	r1, [sp, #28]
   23814:	mov	r5, r0
   23818:	ands	fp, r6, #4
   2381c:	beq	238e0 <__assert_fail@plt+0x12418>
   23820:	ldr	fp, [r3]
   23824:	ldr	r8, [r3, #4]
   23828:	ldr	sl, [r5]
   2382c:	movw	r3, #0
   23830:	movt	r3, #0
   23834:	cmp	r3, #0
   23838:	movne	r4, #1
   2383c:	moveq	r4, #0
   23840:	mov	r3, r4
   23844:	mov	r4, #1
   23848:	movw	r2, #0
   2384c:	movt	r2, #0
   23850:	cmp	r2, #0
   23854:	movne	r4, #1
   23858:	moveq	r4, #0
   2385c:	orr	r4, r3, r4
   23860:	ands	r4, r4, #255	; 0xff
   23864:	beq	23870 <__assert_fail@plt+0x123a8>
   23868:	add	r0, sl, #136	; 0x88
   2386c:	bl	111ec <pthread_mutex_lock@plt>
   23870:	ldrb	r3, [r5, #28]
   23874:	tst	r3, #16
   23878:	beq	238f0 <__assert_fail@plt+0x12428>
   2387c:	str	r6, [sp, #16]
   23880:	mov	r3, #0
   23884:	str	r3, [sp, #12]
   23888:	str	r3, [sp, #8]
   2388c:	str	r8, [sp, #4]
   23890:	str	r8, [sp]
   23894:	mov	r3, fp
   23898:	mov	r2, r8
   2389c:	ldr	r1, [sp, #28]
   238a0:	mov	r0, r5
   238a4:	bl	20898 <__assert_fail@plt+0xf3d0>
   238a8:	mov	r5, r0
   238ac:	cmp	r4, #0
   238b0:	beq	238bc <__assert_fail@plt+0x123f4>
   238b4:	add	r0, sl, #136	; 0x88
   238b8:	bl	11144 <pthread_mutex_unlock@plt>
   238bc:	adds	r0, r5, #0
   238c0:	movne	r0, #1
   238c4:	add	sp, sp, #36	; 0x24
   238c8:	ldrd	r4, [sp]
   238cc:	ldrd	r6, [sp, #8]
   238d0:	ldrd	r8, [sp, #16]
   238d4:	ldrd	sl, [sp, #24]
   238d8:	add	sp, sp, #32
   238dc:	pop	{pc}		; (ldr pc, [sp], #4)
   238e0:	ldr	r0, [sp, #28]
   238e4:	bl	11390 <strlen@plt>
   238e8:	mov	r8, r0
   238ec:	b	23828 <__assert_fail@plt+0x12360>
   238f0:	str	r6, [sp, #16]
   238f4:	str	r7, [sp, #12]
   238f8:	str	r9, [sp, #8]
   238fc:	str	r8, [sp, #4]
   23900:	str	r8, [sp]
   23904:	mov	r3, fp
   23908:	mov	r2, r8
   2390c:	ldr	r1, [sp, #28]
   23910:	mov	r0, r5
   23914:	bl	20898 <__assert_fail@plt+0xf3d0>
   23918:	mov	r5, r0
   2391c:	b	238ac <__assert_fail@plt+0x123e4>
   23920:	push	{lr}		; (str lr, [sp, #-4]!)
   23924:	sub	sp, sp, #20
   23928:	mov	ip, #1
   2392c:	str	ip, [sp, #12]
   23930:	ldr	ip, [sp, #24]
   23934:	str	ip, [sp, #8]
   23938:	str	r2, [sp, #4]
   2393c:	mov	ip, #0
   23940:	str	ip, [sp]
   23944:	bl	230a8 <__assert_fail@plt+0x11be0>
   23948:	add	sp, sp, #20
   2394c:	pop	{pc}		; (ldr pc, [sp], #4)
   23950:	push	{lr}		; (str lr, [sp, #-4]!)
   23954:	sub	sp, sp, #20
   23958:	mov	ip, #0
   2395c:	str	ip, [sp, #12]
   23960:	ldr	ip, [sp, #28]
   23964:	str	ip, [sp, #8]
   23968:	str	r2, [sp, #4]
   2396c:	ldr	ip, [sp, #24]
   23970:	str	ip, [sp]
   23974:	bl	230a8 <__assert_fail@plt+0x11be0>
   23978:	add	sp, sp, #20
   2397c:	pop	{pc}		; (ldr pc, [sp], #4)
   23980:	push	{lr}		; (str lr, [sp, #-4]!)
   23984:	sub	sp, sp, #28
   23988:	mov	ip, #1
   2398c:	str	ip, [sp, #20]
   23990:	ldr	ip, [sp, #44]	; 0x2c
   23994:	str	ip, [sp, #16]
   23998:	ldr	ip, [sp, #40]	; 0x28
   2399c:	str	ip, [sp, #12]
   239a0:	mov	ip, #0
   239a4:	str	ip, [sp, #8]
   239a8:	ldr	ip, [sp, #36]	; 0x24
   239ac:	str	ip, [sp, #4]
   239b0:	ldr	ip, [sp, #32]
   239b4:	str	ip, [sp]
   239b8:	bl	234a4 <__assert_fail@plt+0x11fdc>
   239bc:	add	sp, sp, #28
   239c0:	pop	{pc}		; (ldr pc, [sp], #4)
   239c4:	push	{lr}		; (str lr, [sp, #-4]!)
   239c8:	sub	sp, sp, #28
   239cc:	mov	ip, #0
   239d0:	str	ip, [sp, #20]
   239d4:	ldr	ip, [sp, #48]	; 0x30
   239d8:	str	ip, [sp, #16]
   239dc:	ldr	ip, [sp, #44]	; 0x2c
   239e0:	str	ip, [sp, #12]
   239e4:	ldr	ip, [sp, #40]	; 0x28
   239e8:	str	ip, [sp, #8]
   239ec:	ldr	ip, [sp, #36]	; 0x24
   239f0:	str	ip, [sp, #4]
   239f4:	ldr	ip, [sp, #32]
   239f8:	str	ip, [sp]
   239fc:	bl	234a4 <__assert_fail@plt+0x11fdc>
   23a00:	add	sp, sp, #28
   23a04:	pop	{pc}		; (ldr pc, [sp], #4)
   23a08:	cmp	r2, #0
   23a0c:	beq	23a38 <__assert_fail@plt+0x12570>
   23a10:	push	{lr}		; (str lr, [sp, #-4]!)
   23a14:	ldrb	ip, [r0, #28]
   23a18:	mov	lr, #1
   23a1c:	bfi	ip, lr, #1, #2
   23a20:	strb	ip, [r0, #28]
   23a24:	str	r2, [r1]
   23a28:	str	r3, [r1, #4]
   23a2c:	ldr	r3, [sp, #4]
   23a30:	str	r3, [r1, #8]
   23a34:	pop	{pc}		; (ldr pc, [sp], #4)
   23a38:	ldrb	r3, [r0, #28]
   23a3c:	bfc	r3, #1, #2
   23a40:	strb	r3, [r0, #28]
   23a44:	mov	r3, #0
   23a48:	str	r3, [r1]
   23a4c:	str	r3, [r1, #8]
   23a50:	str	r3, [r1, #4]
   23a54:	bx	lr
   23a58:	strd	r4, [sp, #-16]!
   23a5c:	str	r6, [sp, #8]
   23a60:	str	lr, [sp, #12]
   23a64:	mov	r5, r0
   23a68:	mov	r4, r1
   23a6c:	mov	r2, r1
   23a70:	mov	r1, #0
   23a74:	bl	11420 <memchr@plt>
   23a78:	cmp	r0, #0
   23a7c:	subne	r0, r0, r5
   23a80:	addne	r0, r0, #1
   23a84:	moveq	r0, r4
   23a88:	ldrd	r4, [sp]
   23a8c:	ldr	r6, [sp, #8]
   23a90:	add	sp, sp, #12
   23a94:	pop	{pc}		; (ldr pc, [sp], #4)
   23a98:	str	r4, [sp, #-8]!
   23a9c:	str	lr, [sp, #4]
   23aa0:	mov	ip, r0
   23aa4:	ldrb	r3, [r0]
   23aa8:	ldrb	lr, [r1]
   23aac:	cmp	r3, #45	; 0x2d
   23ab0:	beq	23b20 <__assert_fail@plt+0x12658>
   23ab4:	cmp	lr, #45	; 0x2d
   23ab8:	beq	23c2c <__assert_fail@plt+0x12764>
   23abc:	cmp	r3, #48	; 0x30
   23ac0:	bne	23ad0 <__assert_fail@plt+0x12608>
   23ac4:	ldrb	r3, [ip, #1]!
   23ac8:	cmp	r3, #48	; 0x30
   23acc:	beq	23ac4 <__assert_fail@plt+0x125fc>
   23ad0:	cmp	lr, #48	; 0x30
   23ad4:	bne	23ae4 <__assert_fail@plt+0x1261c>
   23ad8:	ldrb	lr, [r1, #1]!
   23adc:	cmp	lr, #48	; 0x30
   23ae0:	beq	23ad8 <__assert_fail@plt+0x12610>
   23ae4:	cmp	r3, lr
   23ae8:	bne	23c70 <__assert_fail@plt+0x127a8>
   23aec:	sub	r2, r3, #48	; 0x30
   23af0:	cmp	r2, #9
   23af4:	bhi	23b14 <__assert_fail@plt+0x1264c>
   23af8:	ldrb	r3, [ip, #1]!
   23afc:	ldrb	lr, [r1, #1]!
   23b00:	cmp	r3, lr
   23b04:	bne	23c70 <__assert_fail@plt+0x127a8>
   23b08:	sub	r2, r3, #48	; 0x30
   23b0c:	cmp	r2, #9
   23b10:	bls	23af8 <__assert_fail@plt+0x12630>
   23b14:	sub	r0, r3, lr
   23b18:	mov	r4, #0
   23b1c:	b	23c98 <__assert_fail@plt+0x127d0>
   23b20:	ldrb	r2, [ip, #1]!
   23b24:	cmp	r2, #48	; 0x30
   23b28:	beq	23b20 <__assert_fail@plt+0x12658>
   23b2c:	cmp	lr, #45	; 0x2d
   23b30:	beq	23b70 <__assert_fail@plt+0x126a8>
   23b34:	sub	r2, r2, #48	; 0x30
   23b38:	cmp	r2, #9
   23b3c:	bls	23ce4 <__assert_fail@plt+0x1281c>
   23b40:	cmp	lr, #48	; 0x30
   23b44:	bne	23b54 <__assert_fail@plt+0x1268c>
   23b48:	ldrb	lr, [r1, #1]!
   23b4c:	cmp	lr, #48	; 0x30
   23b50:	beq	23b48 <__assert_fail@plt+0x12680>
   23b54:	sub	lr, lr, #48	; 0x30
   23b58:	cmp	lr, #9
   23b5c:	movhi	r0, #0
   23b60:	mvnls	r0, #0
   23b64:	ldr	r4, [sp]
   23b68:	add	sp, sp, #4
   23b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   23b70:	ldrb	r4, [r1, #1]!
   23b74:	cmp	r4, #48	; 0x30
   23b78:	beq	23b70 <__assert_fail@plt+0x126a8>
   23b7c:	cmp	r2, r4
   23b80:	bne	23bb8 <__assert_fail@plt+0x126f0>
   23b84:	sub	r3, r2, #48	; 0x30
   23b88:	cmp	r3, #9
   23b8c:	bhi	23bac <__assert_fail@plt+0x126e4>
   23b90:	ldrb	r2, [ip, #1]!
   23b94:	ldrb	r4, [r1, #1]!
   23b98:	cmp	r2, r4
   23b9c:	bne	23bb8 <__assert_fail@plt+0x126f0>
   23ba0:	sub	r3, r2, #48	; 0x30
   23ba4:	cmp	r3, #9
   23ba8:	bls	23b90 <__assert_fail@plt+0x126c8>
   23bac:	sub	r0, r4, r2
   23bb0:	mov	r2, #0
   23bb4:	b	23be0 <__assert_fail@plt+0x12718>
   23bb8:	sub	r0, r4, r2
   23bbc:	sub	r2, r2, #48	; 0x30
   23bc0:	cmp	r2, #9
   23bc4:	bhi	23c18 <__assert_fail@plt+0x12750>
   23bc8:	mov	r2, #0
   23bcc:	add	r2, r2, #1
   23bd0:	ldrb	r3, [ip, #1]!
   23bd4:	sub	r3, r3, #48	; 0x30
   23bd8:	cmp	r3, #9
   23bdc:	bls	23bcc <__assert_fail@plt+0x12704>
   23be0:	sub	r4, r4, #48	; 0x30
   23be4:	cmp	r4, #9
   23be8:	bhi	23cec <__assert_fail@plt+0x12824>
   23bec:	mov	ip, #0
   23bf0:	add	ip, ip, #1
   23bf4:	ldrb	r3, [r1, #1]!
   23bf8:	sub	r3, r3, #48	; 0x30
   23bfc:	cmp	r3, #9
   23c00:	bls	23bf0 <__assert_fail@plt+0x12728>
   23c04:	cmp	ip, r2
   23c08:	beq	23c20 <__assert_fail@plt+0x12758>
   23c0c:	movhi	r0, #1
   23c10:	mvnls	r0, #0
   23c14:	b	23b64 <__assert_fail@plt+0x1269c>
   23c18:	mov	r2, #0
   23c1c:	b	23be0 <__assert_fail@plt+0x12718>
   23c20:	cmp	r2, #0
   23c24:	moveq	r0, #0
   23c28:	b	23b64 <__assert_fail@plt+0x1269c>
   23c2c:	ldrb	r2, [r1, #1]!
   23c30:	cmp	r2, #48	; 0x30
   23c34:	beq	23c2c <__assert_fail@plt+0x12764>
   23c38:	sub	r2, r2, #48	; 0x30
   23c3c:	cmp	r2, #9
   23c40:	movls	r0, #1
   23c44:	bls	23b64 <__assert_fail@plt+0x1269c>
   23c48:	cmp	r3, #48	; 0x30
   23c4c:	bne	23c5c <__assert_fail@plt+0x12794>
   23c50:	ldrb	r3, [ip, #1]!
   23c54:	cmp	r3, #48	; 0x30
   23c58:	beq	23c50 <__assert_fail@plt+0x12788>
   23c5c:	sub	r3, r3, #48	; 0x30
   23c60:	cmp	r3, #9
   23c64:	movhi	r0, #0
   23c68:	movls	r0, #1
   23c6c:	b	23b64 <__assert_fail@plt+0x1269c>
   23c70:	sub	r0, r3, lr
   23c74:	sub	r2, r3, #48	; 0x30
   23c78:	cmp	r2, #9
   23c7c:	bhi	23cd0 <__assert_fail@plt+0x12808>
   23c80:	mov	r4, #0
   23c84:	add	r4, r4, #1
   23c88:	ldrb	r3, [ip, #1]!
   23c8c:	sub	r3, r3, #48	; 0x30
   23c90:	cmp	r3, #9
   23c94:	bls	23c84 <__assert_fail@plt+0x127bc>
   23c98:	sub	r2, lr, #48	; 0x30
   23c9c:	cmp	r2, #9
   23ca0:	bhi	23cfc <__assert_fail@plt+0x12834>
   23ca4:	mov	r2, #0
   23ca8:	add	r2, r2, #1
   23cac:	ldrb	r3, [r1, #1]!
   23cb0:	sub	r3, r3, #48	; 0x30
   23cb4:	cmp	r3, #9
   23cb8:	bls	23ca8 <__assert_fail@plt+0x127e0>
   23cbc:	cmp	r2, r4
   23cc0:	beq	23cd8 <__assert_fail@plt+0x12810>
   23cc4:	mvnhi	r0, #0
   23cc8:	movls	r0, #1
   23ccc:	b	23b64 <__assert_fail@plt+0x1269c>
   23cd0:	mov	r4, #0
   23cd4:	b	23c98 <__assert_fail@plt+0x127d0>
   23cd8:	cmp	r4, #0
   23cdc:	moveq	r0, #0
   23ce0:	b	23b64 <__assert_fail@plt+0x1269c>
   23ce4:	mvn	r0, #0
   23ce8:	b	23b64 <__assert_fail@plt+0x1269c>
   23cec:	adds	r3, r2, #0
   23cf0:	movne	r3, #1
   23cf4:	rsb	r0, r3, #0
   23cf8:	b	23b64 <__assert_fail@plt+0x1269c>
   23cfc:	adds	r0, r4, #0
   23d00:	movne	r0, #1
   23d04:	b	23b64 <__assert_fail@plt+0x1269c>
   23d08:	strd	r4, [sp, #-16]!
   23d0c:	str	r6, [sp, #8]
   23d10:	str	lr, [sp, #12]
   23d14:	sub	sp, sp, #32
   23d18:	mov	r4, r0
   23d1c:	ldr	r5, [sp, #48]	; 0x30
   23d20:	ldr	r6, [sp, #52]	; 0x34
   23d24:	cmp	r1, #0
   23d28:	beq	23df4 <__assert_fail@plt+0x1292c>
   23d2c:	str	r3, [sp, #4]
   23d30:	str	r2, [sp]
   23d34:	mov	r3, r1
   23d38:	movw	r2, #24036	; 0x5de4
   23d3c:	movt	r2, #2
   23d40:	mov	r1, #1
   23d44:	bl	11414 <__fprintf_chk@plt>
   23d48:	mov	r2, #5
   23d4c:	movw	r1, #24056	; 0x5df8
   23d50:	movt	r1, #2
   23d54:	mov	r0, #0
   23d58:	bl	11258 <dcgettext@plt>
   23d5c:	movw	r3, #2022	; 0x7e6
   23d60:	str	r3, [sp]
   23d64:	mov	r3, r0
   23d68:	movw	r2, #24784	; 0x60d0
   23d6c:	movt	r2, #2
   23d70:	mov	r1, #1
   23d74:	mov	r0, r4
   23d78:	bl	11414 <__fprintf_chk@plt>
   23d7c:	mov	r1, r4
   23d80:	mov	r0, #10
   23d84:	bl	1124c <fputc_unlocked@plt>
   23d88:	mov	r2, #5
   23d8c:	movw	r1, #24060	; 0x5dfc
   23d90:	movt	r1, #2
   23d94:	mov	r0, #0
   23d98:	bl	11258 <dcgettext@plt>
   23d9c:	movw	r3, #24232	; 0x5ea8
   23da0:	movt	r3, #2
   23da4:	mov	r2, r0
   23da8:	mov	r1, #1
   23dac:	mov	r0, r4
   23db0:	bl	11414 <__fprintf_chk@plt>
   23db4:	mov	r1, r4
   23db8:	mov	r0, #10
   23dbc:	bl	1124c <fputc_unlocked@plt>
   23dc0:	cmp	r6, #9
   23dc4:	ldrls	pc, [pc, r6, lsl #2]
   23dc8:	b	240cc <__assert_fail@plt+0x12c04>
   23dcc:	andeq	r3, r2, r8, lsr lr
   23dd0:	andeq	r3, r2, r0, lsl lr
   23dd4:	andeq	r3, r2, ip, asr #28
   23dd8:	andeq	r3, r2, r0, lsl #29
   23ddc:			; <UNDEFINED> instruction: 0x00023ebc
   23de0:	andeq	r3, r2, r0, lsl #30
   23de4:	andeq	r3, r2, ip, asr #30
   23de8:	andeq	r3, r2, r0, lsr #31
   23dec:	strdeq	r3, [r2], -ip
   23df0:	andeq	r4, r2, r0, rrx
   23df4:	str	r3, [sp]
   23df8:	mov	r3, r2
   23dfc:	movw	r2, #24048	; 0x5df0
   23e00:	movt	r2, #2
   23e04:	mov	r1, #1
   23e08:	bl	11414 <__fprintf_chk@plt>
   23e0c:	b	23d48 <__assert_fail@plt+0x12880>
   23e10:	mov	r2, #5
   23e14:	movw	r1, #24268	; 0x5ecc
   23e18:	movt	r1, #2
   23e1c:	mov	r0, #0
   23e20:	bl	11258 <dcgettext@plt>
   23e24:	ldr	r3, [r5]
   23e28:	mov	r2, r0
   23e2c:	mov	r1, #1
   23e30:	mov	r0, r4
   23e34:	bl	11414 <__fprintf_chk@plt>
   23e38:	add	sp, sp, #32
   23e3c:	ldrd	r4, [sp]
   23e40:	ldr	r6, [sp, #8]
   23e44:	add	sp, sp, #12
   23e48:	pop	{pc}		; (ldr pc, [sp], #4)
   23e4c:	mov	r2, #5
   23e50:	movw	r1, #24284	; 0x5edc
   23e54:	movt	r1, #2
   23e58:	mov	r0, #0
   23e5c:	bl	11258 <dcgettext@plt>
   23e60:	ldr	r3, [r5, #4]
   23e64:	str	r3, [sp]
   23e68:	ldr	r3, [r5]
   23e6c:	mov	r2, r0
   23e70:	mov	r1, #1
   23e74:	mov	r0, r4
   23e78:	bl	11414 <__fprintf_chk@plt>
   23e7c:	b	23e38 <__assert_fail@plt+0x12970>
   23e80:	mov	r2, #5
   23e84:	movw	r1, #24308	; 0x5ef4
   23e88:	movt	r1, #2
   23e8c:	mov	r0, #0
   23e90:	bl	11258 <dcgettext@plt>
   23e94:	ldr	r3, [r5, #8]
   23e98:	str	r3, [sp, #4]
   23e9c:	ldr	r3, [r5, #4]
   23ea0:	str	r3, [sp]
   23ea4:	ldr	r3, [r5]
   23ea8:	mov	r2, r0
   23eac:	mov	r1, #1
   23eb0:	mov	r0, r4
   23eb4:	bl	11414 <__fprintf_chk@plt>
   23eb8:	b	23e38 <__assert_fail@plt+0x12970>
   23ebc:	mov	r2, #5
   23ec0:	movw	r1, #24336	; 0x5f10
   23ec4:	movt	r1, #2
   23ec8:	mov	r0, #0
   23ecc:	bl	11258 <dcgettext@plt>
   23ed0:	ldr	r3, [r5, #12]
   23ed4:	str	r3, [sp, #8]
   23ed8:	ldr	r3, [r5, #8]
   23edc:	str	r3, [sp, #4]
   23ee0:	ldr	r3, [r5, #4]
   23ee4:	str	r3, [sp]
   23ee8:	ldr	r3, [r5]
   23eec:	mov	r2, r0
   23ef0:	mov	r1, #1
   23ef4:	mov	r0, r4
   23ef8:	bl	11414 <__fprintf_chk@plt>
   23efc:	b	23e38 <__assert_fail@plt+0x12970>
   23f00:	mov	r2, #5
   23f04:	movw	r1, #24368	; 0x5f30
   23f08:	movt	r1, #2
   23f0c:	mov	r0, #0
   23f10:	bl	11258 <dcgettext@plt>
   23f14:	ldr	r3, [r5, #16]
   23f18:	str	r3, [sp, #12]
   23f1c:	ldr	r3, [r5, #12]
   23f20:	str	r3, [sp, #8]
   23f24:	ldr	r3, [r5, #8]
   23f28:	str	r3, [sp, #4]
   23f2c:	ldr	r3, [r5, #4]
   23f30:	str	r3, [sp]
   23f34:	ldr	r3, [r5]
   23f38:	mov	r2, r0
   23f3c:	mov	r1, #1
   23f40:	mov	r0, r4
   23f44:	bl	11414 <__fprintf_chk@plt>
   23f48:	b	23e38 <__assert_fail@plt+0x12970>
   23f4c:	mov	r2, #5
   23f50:	movw	r1, #24404	; 0x5f54
   23f54:	movt	r1, #2
   23f58:	mov	r0, #0
   23f5c:	bl	11258 <dcgettext@plt>
   23f60:	ldr	r3, [r5, #20]
   23f64:	str	r3, [sp, #16]
   23f68:	ldr	r3, [r5, #16]
   23f6c:	str	r3, [sp, #12]
   23f70:	ldr	r3, [r5, #12]
   23f74:	str	r3, [sp, #8]
   23f78:	ldr	r3, [r5, #8]
   23f7c:	str	r3, [sp, #4]
   23f80:	ldr	r3, [r5, #4]
   23f84:	str	r3, [sp]
   23f88:	ldr	r3, [r5]
   23f8c:	mov	r2, r0
   23f90:	mov	r1, #1
   23f94:	mov	r0, r4
   23f98:	bl	11414 <__fprintf_chk@plt>
   23f9c:	b	23e38 <__assert_fail@plt+0x12970>
   23fa0:	mov	r2, #5
   23fa4:	movw	r1, #24444	; 0x5f7c
   23fa8:	movt	r1, #2
   23fac:	mov	r0, #0
   23fb0:	bl	11258 <dcgettext@plt>
   23fb4:	ldr	r3, [r5, #24]
   23fb8:	str	r3, [sp, #20]
   23fbc:	ldr	r3, [r5, #20]
   23fc0:	str	r3, [sp, #16]
   23fc4:	ldr	r3, [r5, #16]
   23fc8:	str	r3, [sp, #12]
   23fcc:	ldr	r3, [r5, #12]
   23fd0:	str	r3, [sp, #8]
   23fd4:	ldr	r3, [r5, #8]
   23fd8:	str	r3, [sp, #4]
   23fdc:	ldr	r3, [r5, #4]
   23fe0:	str	r3, [sp]
   23fe4:	ldr	r3, [r5]
   23fe8:	mov	r2, r0
   23fec:	mov	r1, #1
   23ff0:	mov	r0, r4
   23ff4:	bl	11414 <__fprintf_chk@plt>
   23ff8:	b	23e38 <__assert_fail@plt+0x12970>
   23ffc:	mov	r2, #5
   24000:	movw	r1, #24488	; 0x5fa8
   24004:	movt	r1, #2
   24008:	mov	r0, #0
   2400c:	bl	11258 <dcgettext@plt>
   24010:	ldr	r3, [r5, #28]
   24014:	str	r3, [sp, #24]
   24018:	ldr	r3, [r5, #24]
   2401c:	str	r3, [sp, #20]
   24020:	ldr	r3, [r5, #20]
   24024:	str	r3, [sp, #16]
   24028:	ldr	r3, [r5, #16]
   2402c:	str	r3, [sp, #12]
   24030:	ldr	r3, [r5, #12]
   24034:	str	r3, [sp, #8]
   24038:	ldr	r3, [r5, #8]
   2403c:	str	r3, [sp, #4]
   24040:	ldr	r3, [r5, #4]
   24044:	str	r3, [sp]
   24048:	ldr	r3, [r5]
   2404c:	mov	r2, r0
   24050:	mov	r1, #1
   24054:	mov	r0, r4
   24058:	bl	11414 <__fprintf_chk@plt>
   2405c:	b	23e38 <__assert_fail@plt+0x12970>
   24060:	mov	r2, #5
   24064:	movw	r1, #24536	; 0x5fd8
   24068:	movt	r1, #2
   2406c:	mov	r0, #0
   24070:	bl	11258 <dcgettext@plt>
   24074:	ldr	r3, [r5, #32]
   24078:	str	r3, [sp, #28]
   2407c:	ldr	r3, [r5, #28]
   24080:	str	r3, [sp, #24]
   24084:	ldr	r3, [r5, #24]
   24088:	str	r3, [sp, #20]
   2408c:	ldr	r3, [r5, #20]
   24090:	str	r3, [sp, #16]
   24094:	ldr	r3, [r5, #16]
   24098:	str	r3, [sp, #12]
   2409c:	ldr	r3, [r5, #12]
   240a0:	str	r3, [sp, #8]
   240a4:	ldr	r3, [r5, #8]
   240a8:	str	r3, [sp, #4]
   240ac:	ldr	r3, [r5, #4]
   240b0:	str	r3, [sp]
   240b4:	ldr	r3, [r5]
   240b8:	mov	r2, r0
   240bc:	mov	r1, #1
   240c0:	mov	r0, r4
   240c4:	bl	11414 <__fprintf_chk@plt>
   240c8:	b	23e38 <__assert_fail@plt+0x12970>
   240cc:	mov	r2, #5
   240d0:	movw	r1, #24588	; 0x600c
   240d4:	movt	r1, #2
   240d8:	mov	r0, #0
   240dc:	bl	11258 <dcgettext@plt>
   240e0:	ldr	r3, [r5, #32]
   240e4:	str	r3, [sp, #28]
   240e8:	ldr	r3, [r5, #28]
   240ec:	str	r3, [sp, #24]
   240f0:	ldr	r3, [r5, #24]
   240f4:	str	r3, [sp, #20]
   240f8:	ldr	r3, [r5, #20]
   240fc:	str	r3, [sp, #16]
   24100:	ldr	r3, [r5, #16]
   24104:	str	r3, [sp, #12]
   24108:	ldr	r3, [r5, #12]
   2410c:	str	r3, [sp, #8]
   24110:	ldr	r3, [r5, #8]
   24114:	str	r3, [sp, #4]
   24118:	ldr	r3, [r5, #4]
   2411c:	str	r3, [sp]
   24120:	ldr	r3, [r5]
   24124:	mov	r2, r0
   24128:	mov	r1, #1
   2412c:	mov	r0, r4
   24130:	bl	11414 <__fprintf_chk@plt>
   24134:	b	23e38 <__assert_fail@plt+0x12970>
   24138:	strd	r4, [sp, #-12]!
   2413c:	str	lr, [sp, #8]
   24140:	sub	sp, sp, #12
   24144:	ldr	r5, [sp, #24]
   24148:	ldr	ip, [r5]
   2414c:	cmp	ip, #0
   24150:	beq	24188 <__assert_fail@plt+0x12cc0>
   24154:	mov	lr, r5
   24158:	mov	ip, #0
   2415c:	add	ip, ip, #1
   24160:	ldr	r4, [lr, #4]!
   24164:	cmp	r4, #0
   24168:	bne	2415c <__assert_fail@plt+0x12c94>
   2416c:	str	ip, [sp, #4]
   24170:	str	r5, [sp]
   24174:	bl	23d08 <__assert_fail@plt+0x12840>
   24178:	add	sp, sp, #12
   2417c:	ldrd	r4, [sp]
   24180:	add	sp, sp, #8
   24184:	pop	{pc}		; (ldr pc, [sp], #4)
   24188:	mov	ip, #0
   2418c:	b	2416c <__assert_fail@plt+0x12ca4>
   24190:	strd	r4, [sp, #-12]!
   24194:	str	lr, [sp, #8]
   24198:	sub	sp, sp, #52	; 0x34
   2419c:	ldr	r5, [sp, #64]	; 0x40
   241a0:	add	r4, sp, #8
   241a4:	mov	ip, #0
   241a8:	ldr	lr, [r5], #4
   241ac:	str	lr, [r4], #4
   241b0:	cmp	lr, #0
   241b4:	beq	241c4 <__assert_fail@plt+0x12cfc>
   241b8:	add	ip, ip, #1
   241bc:	cmp	ip, #10
   241c0:	bne	241a8 <__assert_fail@plt+0x12ce0>
   241c4:	str	ip, [sp, #4]
   241c8:	add	ip, sp, #8
   241cc:	str	ip, [sp]
   241d0:	bl	23d08 <__assert_fail@plt+0x12840>
   241d4:	add	sp, sp, #52	; 0x34
   241d8:	ldrd	r4, [sp]
   241dc:	add	sp, sp, #8
   241e0:	pop	{pc}		; (ldr pc, [sp], #4)
   241e4:	push	{r3}		; (str r3, [sp, #-4]!)
   241e8:	push	{lr}		; (str lr, [sp, #-4]!)
   241ec:	sub	sp, sp, #16
   241f0:	add	r3, sp, #24
   241f4:	str	r3, [sp, #12]
   241f8:	str	r3, [sp]
   241fc:	ldr	r3, [sp, #20]
   24200:	bl	24190 <__assert_fail@plt+0x12cc8>
   24204:	add	sp, sp, #16
   24208:	pop	{lr}		; (ldr lr, [sp], #4)
   2420c:	add	sp, sp, #4
   24210:	bx	lr
   24214:	str	r4, [sp, #-8]!
   24218:	str	lr, [sp, #4]
   2421c:	movw	r3, #29092	; 0x71a4
   24220:	movt	r3, #3
   24224:	ldr	r1, [r3]
   24228:	mov	r0, #10
   2422c:	bl	1124c <fputc_unlocked@plt>
   24230:	mov	r2, #5
   24234:	movw	r1, #24648	; 0x6048
   24238:	movt	r1, #2
   2423c:	mov	r0, #0
   24240:	bl	11258 <dcgettext@plt>
   24244:	movw	r2, #24668	; 0x605c
   24248:	movt	r2, #2
   2424c:	mov	r1, r0
   24250:	mov	r0, #1
   24254:	bl	113fc <__printf_chk@plt>
   24258:	mov	r2, #5
   2425c:	movw	r1, #24692	; 0x6074
   24260:	movt	r1, #2
   24264:	mov	r0, #0
   24268:	bl	11258 <dcgettext@plt>
   2426c:	movw	r3, #22112	; 0x5660
   24270:	movt	r3, #2
   24274:	movw	r2, #22152	; 0x5688
   24278:	movt	r2, #2
   2427c:	mov	r1, r0
   24280:	mov	r0, #1
   24284:	bl	113fc <__printf_chk@plt>
   24288:	mov	r2, #5
   2428c:	movw	r1, #24712	; 0x6088
   24290:	movt	r1, #2
   24294:	mov	r0, #0
   24298:	bl	11258 <dcgettext@plt>
   2429c:	movw	r2, #24752	; 0x60b0
   242a0:	movt	r2, #2
   242a4:	mov	r1, r0
   242a8:	mov	r0, #1
   242ac:	bl	113fc <__printf_chk@plt>
   242b0:	ldr	r4, [sp]
   242b4:	add	sp, sp, #4
   242b8:	pop	{pc}		; (ldr pc, [sp], #4)
   242bc:	str	r4, [sp, #-8]!
   242c0:	str	lr, [sp, #4]
   242c4:	bl	24808 <__assert_fail@plt+0x13340>
   242c8:	cmp	r0, #0
   242cc:	beq	242dc <__assert_fail@plt+0x12e14>
   242d0:	ldr	r4, [sp]
   242d4:	add	sp, sp, #4
   242d8:	pop	{pc}		; (ldr pc, [sp], #4)
   242dc:	bl	24750 <__assert_fail@plt+0x13288>
   242e0:	str	r4, [sp, #-8]!
   242e4:	str	lr, [sp, #4]
   242e8:	bl	24808 <__assert_fail@plt+0x13340>
   242ec:	cmp	r0, #0
   242f0:	beq	24300 <__assert_fail@plt+0x12e38>
   242f4:	ldr	r4, [sp]
   242f8:	add	sp, sp, #4
   242fc:	pop	{pc}		; (ldr pc, [sp], #4)
   24300:	bl	24750 <__assert_fail@plt+0x13288>
   24304:	str	r4, [sp, #-8]!
   24308:	str	lr, [sp, #4]
   2430c:	bl	242bc <__assert_fail@plt+0x12df4>
   24310:	ldr	r4, [sp]
   24314:	add	sp, sp, #4
   24318:	pop	{pc}		; (ldr pc, [sp], #4)
   2431c:	strd	r4, [sp, #-16]!
   24320:	str	r6, [sp, #8]
   24324:	str	lr, [sp, #12]
   24328:	mov	r5, r0
   2432c:	mov	r4, r1
   24330:	bl	24844 <__assert_fail@plt+0x1337c>
   24334:	cmp	r0, #0
   24338:	beq	2434c <__assert_fail@plt+0x12e84>
   2433c:	ldrd	r4, [sp]
   24340:	ldr	r6, [sp, #8]
   24344:	add	sp, sp, #12
   24348:	pop	{pc}		; (ldr pc, [sp], #4)
   2434c:	adds	r4, r4, #0
   24350:	movne	r4, #1
   24354:	cmp	r5, #0
   24358:	moveq	r4, #1
   2435c:	cmp	r4, #0
   24360:	beq	2433c <__assert_fail@plt+0x12e74>
   24364:	bl	24750 <__assert_fail@plt+0x13288>
   24368:	str	r4, [sp, #-8]!
   2436c:	str	lr, [sp, #4]
   24370:	cmp	r1, #0
   24374:	orreq	r1, r1, #1
   24378:	bl	24844 <__assert_fail@plt+0x1337c>
   2437c:	cmp	r0, #0
   24380:	beq	24390 <__assert_fail@plt+0x12ec8>
   24384:	ldr	r4, [sp]
   24388:	add	sp, sp, #4
   2438c:	pop	{pc}		; (ldr pc, [sp], #4)
   24390:	bl	24750 <__assert_fail@plt+0x13288>
   24394:	strd	r4, [sp, #-16]!
   24398:	str	r6, [sp, #8]
   2439c:	str	lr, [sp, #12]
   243a0:	mov	r4, r0
   243a4:	mov	r6, r1
   243a8:	mov	r5, r2
   243ac:	bl	24c8c <__assert_fail@plt+0x137c4>
   243b0:	cmp	r0, #0
   243b4:	beq	243c8 <__assert_fail@plt+0x12f00>
   243b8:	ldrd	r4, [sp]
   243bc:	ldr	r6, [sp, #8]
   243c0:	add	sp, sp, #12
   243c4:	pop	{pc}		; (ldr pc, [sp], #4)
   243c8:	cmp	r4, #0
   243cc:	beq	243dc <__assert_fail@plt+0x12f14>
   243d0:	cmp	r6, #0
   243d4:	cmpne	r5, #0
   243d8:	beq	243b8 <__assert_fail@plt+0x12ef0>
   243dc:	bl	24750 <__assert_fail@plt+0x13288>
   243e0:	str	r4, [sp, #-8]!
   243e4:	str	lr, [sp, #4]
   243e8:	bl	24394 <__assert_fail@plt+0x12ecc>
   243ec:	ldr	r4, [sp]
   243f0:	add	sp, sp, #4
   243f4:	pop	{pc}		; (ldr pc, [sp], #4)
   243f8:	str	r4, [sp, #-8]!
   243fc:	str	lr, [sp, #4]
   24400:	mov	ip, r1
   24404:	mov	r3, r2
   24408:	cmp	r2, #0
   2440c:	cmpne	r1, #0
   24410:	moveq	r3, #1
   24414:	moveq	ip, r3
   24418:	mov	r2, r3
   2441c:	mov	r1, ip
   24420:	bl	24c8c <__assert_fail@plt+0x137c4>
   24424:	cmp	r0, #0
   24428:	beq	24438 <__assert_fail@plt+0x12f70>
   2442c:	ldr	r4, [sp]
   24430:	add	sp, sp, #4
   24434:	pop	{pc}		; (ldr pc, [sp], #4)
   24438:	bl	24750 <__assert_fail@plt+0x13288>
   2443c:	str	r4, [sp, #-8]!
   24440:	str	lr, [sp, #4]
   24444:	mov	r2, r1
   24448:	mov	r1, r0
   2444c:	mov	r0, #0
   24450:	bl	24394 <__assert_fail@plt+0x12ecc>
   24454:	ldr	r4, [sp]
   24458:	add	sp, sp, #4
   2445c:	pop	{pc}		; (ldr pc, [sp], #4)
   24460:	str	r4, [sp, #-8]!
   24464:	str	lr, [sp, #4]
   24468:	mov	r2, r1
   2446c:	mov	r1, r0
   24470:	mov	r0, #0
   24474:	bl	243f8 <__assert_fail@plt+0x12f30>
   24478:	ldr	r4, [sp]
   2447c:	add	sp, sp, #4
   24480:	pop	{pc}		; (ldr pc, [sp], #4)
   24484:	strd	r4, [sp, #-16]!
   24488:	str	r6, [sp, #8]
   2448c:	str	lr, [sp, #12]
   24490:	mov	r5, r1
   24494:	ldr	r4, [r1]
   24498:	cmp	r0, #0
   2449c:	beq	244cc <__assert_fail@plt+0x13004>
   244a0:	lsr	r3, r4, #1
   244a4:	add	r3, r3, #1
   244a8:	adds	r4, r4, r3
   244ac:	bcs	244e8 <__assert_fail@plt+0x13020>
   244b0:	mov	r1, r4
   244b4:	bl	24394 <__assert_fail@plt+0x12ecc>
   244b8:	str	r4, [r5]
   244bc:	ldrd	r4, [sp]
   244c0:	ldr	r6, [sp, #8]
   244c4:	add	sp, sp, #12
   244c8:	pop	{pc}		; (ldr pc, [sp], #4)
   244cc:	cmp	r4, #0
   244d0:	bne	244b0 <__assert_fail@plt+0x12fe8>
   244d4:	mov	r4, #64	; 0x40
   244d8:	udiv	r4, r4, r2
   244dc:	cmp	r2, #64	; 0x40
   244e0:	addhi	r4, r4, #1
   244e4:	b	244b0 <__assert_fail@plt+0x12fe8>
   244e8:	bl	24750 <__assert_fail@plt+0x13288>
   244ec:	str	r4, [sp, #-8]!
   244f0:	str	lr, [sp, #4]
   244f4:	mov	r2, #1
   244f8:	bl	24484 <__assert_fail@plt+0x12fbc>
   244fc:	ldr	r4, [sp]
   24500:	add	sp, sp, #4
   24504:	pop	{pc}		; (ldr pc, [sp], #4)
   24508:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2450c:	strd	r6, [sp, #8]
   24510:	str	r8, [sp, #16]
   24514:	str	lr, [sp, #20]
   24518:	mov	r5, r1
   2451c:	ldr	lr, [sp, #24]
   24520:	ldr	ip, [r1]
   24524:	asr	r4, ip, #1
   24528:	adds	r4, ip, r4
   2452c:	movvs	r1, #1
   24530:	movvc	r1, #0
   24534:	cmp	r1, #0
   24538:	mvnne	r4, #-2147483648	; 0x80000000
   2453c:	mvn	r8, r3
   24540:	lsr	r8, r8, #31
   24544:	cmp	r3, r4
   24548:	movge	r1, #0
   2454c:	andlt	r1, r8, #1
   24550:	cmp	r1, #0
   24554:	movne	r4, r3
   24558:	smull	r6, r7, r4, lr
   2455c:	asr	r1, r6, #31
   24560:	cmp	r1, r7
   24564:	bne	2457c <__assert_fail@plt+0x130b4>
   24568:	mov	r1, r6
   2456c:	cmp	r6, #63	; 0x3f
   24570:	movle	r1, #64	; 0x40
   24574:	ble	24580 <__assert_fail@plt+0x130b8>
   24578:	b	2458c <__assert_fail@plt+0x130c4>
   2457c:	mvn	r1, #-2147483648	; 0x80000000
   24580:	sdiv	r4, r1, lr
   24584:	mls	r6, lr, r4, r1
   24588:	sub	r1, r1, r6
   2458c:	cmp	r0, #0
   24590:	moveq	r6, #0
   24594:	streq	r6, [r5]
   24598:	sub	r6, r4, ip
   2459c:	cmp	r6, r2
   245a0:	bge	245d8 <__assert_fail@plt+0x13110>
   245a4:	adds	r2, ip, r2
   245a8:	mov	r4, r2
   245ac:	bvs	245f4 <__assert_fail@plt+0x1312c>
   245b0:	cmp	r2, r3
   245b4:	movle	r3, #0
   245b8:	andgt	r3, r8, #1
   245bc:	cmp	r3, #0
   245c0:	bne	245f4 <__assert_fail@plt+0x1312c>
   245c4:	smull	r2, r3, r2, lr
   245c8:	asr	ip, r2, #31
   245cc:	mov	r1, r2
   245d0:	cmp	ip, r3
   245d4:	bne	245f4 <__assert_fail@plt+0x1312c>
   245d8:	bl	2431c <__assert_fail@plt+0x12e54>
   245dc:	str	r4, [r5]
   245e0:	ldrd	r4, [sp]
   245e4:	ldrd	r6, [sp, #8]
   245e8:	ldr	r8, [sp, #16]
   245ec:	add	sp, sp, #20
   245f0:	pop	{pc}		; (ldr pc, [sp], #4)
   245f4:	bl	24750 <__assert_fail@plt+0x13288>
   245f8:	str	r4, [sp, #-8]!
   245fc:	str	lr, [sp, #4]
   24600:	bl	24794 <__assert_fail@plt+0x132cc>
   24604:	cmp	r0, #0
   24608:	beq	24618 <__assert_fail@plt+0x13150>
   2460c:	ldr	r4, [sp]
   24610:	add	sp, sp, #4
   24614:	pop	{pc}		; (ldr pc, [sp], #4)
   24618:	bl	24750 <__assert_fail@plt+0x13288>
   2461c:	str	r4, [sp, #-8]!
   24620:	str	lr, [sp, #4]
   24624:	mov	r1, #1
   24628:	bl	245f8 <__assert_fail@plt+0x13130>
   2462c:	ldr	r4, [sp]
   24630:	add	sp, sp, #4
   24634:	pop	{pc}		; (ldr pc, [sp], #4)
   24638:	str	r4, [sp, #-8]!
   2463c:	str	lr, [sp, #4]
   24640:	bl	24794 <__assert_fail@plt+0x132cc>
   24644:	cmp	r0, #0
   24648:	beq	24658 <__assert_fail@plt+0x13190>
   2464c:	ldr	r4, [sp]
   24650:	add	sp, sp, #4
   24654:	pop	{pc}		; (ldr pc, [sp], #4)
   24658:	bl	24750 <__assert_fail@plt+0x13288>
   2465c:	str	r4, [sp, #-8]!
   24660:	str	lr, [sp, #4]
   24664:	mov	r1, #1
   24668:	bl	24638 <__assert_fail@plt+0x13170>
   2466c:	ldr	r4, [sp]
   24670:	add	sp, sp, #4
   24674:	pop	{pc}		; (ldr pc, [sp], #4)
   24678:	strd	r4, [sp, #-16]!
   2467c:	str	r6, [sp, #8]
   24680:	str	lr, [sp, #12]
   24684:	mov	r5, r0
   24688:	mov	r4, r1
   2468c:	mov	r0, r1
   24690:	bl	242bc <__assert_fail@plt+0x12df4>
   24694:	mov	r2, r4
   24698:	mov	r1, r5
   2469c:	bl	11204 <memcpy@plt>
   246a0:	ldrd	r4, [sp]
   246a4:	ldr	r6, [sp, #8]
   246a8:	add	sp, sp, #12
   246ac:	pop	{pc}		; (ldr pc, [sp], #4)
   246b0:	strd	r4, [sp, #-16]!
   246b4:	str	r6, [sp, #8]
   246b8:	str	lr, [sp, #12]
   246bc:	mov	r5, r0
   246c0:	mov	r4, r1
   246c4:	mov	r0, r1
   246c8:	bl	242e0 <__assert_fail@plt+0x12e18>
   246cc:	mov	r2, r4
   246d0:	mov	r1, r5
   246d4:	bl	11204 <memcpy@plt>
   246d8:	ldrd	r4, [sp]
   246dc:	ldr	r6, [sp, #8]
   246e0:	add	sp, sp, #12
   246e4:	pop	{pc}		; (ldr pc, [sp], #4)
   246e8:	strd	r4, [sp, #-16]!
   246ec:	str	r6, [sp, #8]
   246f0:	str	lr, [sp, #12]
   246f4:	mov	r5, r0
   246f8:	mov	r4, r1
   246fc:	add	r0, r1, #1
   24700:	bl	242e0 <__assert_fail@plt+0x12e18>
   24704:	mov	r2, #0
   24708:	strb	r2, [r0, r4]
   2470c:	mov	r2, r4
   24710:	mov	r1, r5
   24714:	bl	11204 <memcpy@plt>
   24718:	ldrd	r4, [sp]
   2471c:	ldr	r6, [sp, #8]
   24720:	add	sp, sp, #12
   24724:	pop	{pc}		; (ldr pc, [sp], #4)
   24728:	str	r4, [sp, #-8]!
   2472c:	str	lr, [sp, #4]
   24730:	mov	r4, r0
   24734:	bl	11390 <strlen@plt>
   24738:	add	r1, r0, #1
   2473c:	mov	r0, r4
   24740:	bl	24678 <__assert_fail@plt+0x131b0>
   24744:	ldr	r4, [sp]
   24748:	add	sp, sp, #4
   2474c:	pop	{pc}		; (ldr pc, [sp], #4)
   24750:	str	r4, [sp, #-8]!
   24754:	str	lr, [sp, #4]
   24758:	movw	r3, #29000	; 0x7148
   2475c:	movt	r3, #3
   24760:	ldr	r4, [r3]
   24764:	mov	r2, #5
   24768:	movw	r1, #24832	; 0x6100
   2476c:	movt	r1, #2
   24770:	mov	r0, #0
   24774:	bl	11258 <dcgettext@plt>
   24778:	mov	r3, r0
   2477c:	movw	r2, #23008	; 0x59e0
   24780:	movt	r2, #2
   24784:	mov	r1, #0
   24788:	mov	r0, r4
   2478c:	bl	112f4 <error@plt>
   24790:	bl	114bc <abort@plt>
   24794:	strd	r4, [sp, #-16]!
   24798:	str	r6, [sp, #8]
   2479c:	str	lr, [sp, #12]
   247a0:	cmp	r1, #0
   247a4:	cmpne	r0, #0
   247a8:	beq	247e4 <__assert_fail@plt+0x1331c>
   247ac:	mov	r2, r0
   247b0:	mov	r3, r1
   247b4:	umull	r4, r5, r0, r1
   247b8:	adds	r1, r5, #0
   247bc:	movne	r1, #1
   247c0:	cmp	r4, #0
   247c4:	movlt	r1, #1
   247c8:	cmp	r1, #0
   247cc:	beq	247ec <__assert_fail@plt+0x13324>
   247d0:	bl	113c0 <__errno_location@plt>
   247d4:	mov	r3, #12
   247d8:	str	r3, [r0]
   247dc:	mov	r0, #0
   247e0:	b	247f8 <__assert_fail@plt+0x13330>
   247e4:	mov	r3, #1
   247e8:	mov	r2, r3
   247ec:	mov	r1, r3
   247f0:	mov	r0, r2
   247f4:	bl	11150 <calloc@plt>
   247f8:	ldrd	r4, [sp]
   247fc:	ldr	r6, [sp, #8]
   24800:	add	sp, sp, #12
   24804:	pop	{pc}		; (ldr pc, [sp], #4)
   24808:	str	r4, [sp, #-8]!
   2480c:	str	lr, [sp, #4]
   24810:	cmp	r0, #0
   24814:	beq	24830 <__assert_fail@plt+0x13368>
   24818:	bge	24834 <__assert_fail@plt+0x1336c>
   2481c:	bl	113c0 <__errno_location@plt>
   24820:	mov	r3, #12
   24824:	str	r3, [r0]
   24828:	mov	r0, #0
   2482c:	b	24838 <__assert_fail@plt+0x13370>
   24830:	mov	r0, #1
   24834:	bl	11318 <malloc@plt>
   24838:	ldr	r4, [sp]
   2483c:	add	sp, sp, #4
   24840:	pop	{pc}		; (ldr pc, [sp], #4)
   24844:	str	r4, [sp, #-8]!
   24848:	str	lr, [sp, #4]
   2484c:	cmp	r0, #0
   24850:	beq	24874 <__assert_fail@plt+0x133ac>
   24854:	cmp	r1, #0
   24858:	beq	24880 <__assert_fail@plt+0x133b8>
   2485c:	cmp	r1, #0
   24860:	blt	2488c <__assert_fail@plt+0x133c4>
   24864:	bl	11270 <realloc@plt>
   24868:	ldr	r4, [sp]
   2486c:	add	sp, sp, #4
   24870:	pop	{pc}		; (ldr pc, [sp], #4)
   24874:	mov	r0, r1
   24878:	bl	24808 <__assert_fail@plt+0x13340>
   2487c:	b	24868 <__assert_fail@plt+0x133a0>
   24880:	bl	135a4 <__assert_fail@plt+0x20dc>
   24884:	mov	r0, #0
   24888:	b	24868 <__assert_fail@plt+0x133a0>
   2488c:	bl	113c0 <__errno_location@plt>
   24890:	mov	r3, #12
   24894:	str	r3, [r0]
   24898:	mov	r0, #0
   2489c:	b	24868 <__assert_fail@plt+0x133a0>
   248a0:	strd	r4, [sp, #-16]!
   248a4:	str	r6, [sp, #8]
   248a8:	str	lr, [sp, #12]
   248ac:	mov	r5, r0
   248b0:	bl	112dc <__fpending@plt>
   248b4:	mov	r6, r0
   248b8:	ldr	r4, [r5]
   248bc:	and	r4, r4, #32
   248c0:	mov	r0, r5
   248c4:	bl	24a00 <__assert_fail@plt+0x13538>
   248c8:	cmp	r4, #0
   248cc:	bne	24900 <__assert_fail@plt+0x13438>
   248d0:	cmp	r0, #0
   248d4:	beq	248f0 <__assert_fail@plt+0x13428>
   248d8:	cmp	r6, #0
   248dc:	bne	2491c <__assert_fail@plt+0x13454>
   248e0:	bl	113c0 <__errno_location@plt>
   248e4:	ldr	r0, [r0]
   248e8:	subs	r0, r0, #9
   248ec:	mvnne	r0, #0
   248f0:	ldrd	r4, [sp]
   248f4:	ldr	r6, [sp, #8]
   248f8:	add	sp, sp, #12
   248fc:	pop	{pc}		; (ldr pc, [sp], #4)
   24900:	cmp	r0, #0
   24904:	bne	24924 <__assert_fail@plt+0x1345c>
   24908:	bl	113c0 <__errno_location@plt>
   2490c:	mov	r3, #0
   24910:	str	r3, [r0]
   24914:	mvn	r0, #0
   24918:	b	248f0 <__assert_fail@plt+0x13428>
   2491c:	mvn	r0, #0
   24920:	b	248f0 <__assert_fail@plt+0x13428>
   24924:	mvn	r0, #0
   24928:	b	248f0 <__assert_fail@plt+0x13428>
   2492c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24930:	strd	r6, [sp, #8]
   24934:	strd	r8, [sp, #16]
   24938:	str	sl, [sp, #24]
   2493c:	str	lr, [sp, #28]
   24940:	ldr	ip, [r0, #4]
   24944:	cmp	ip, r1
   24948:	strcs	r1, [r0]
   2494c:	movcs	r4, #1
   24950:	bcs	249a0 <__assert_fail@plt+0x134d8>
   24954:	mov	r7, r3
   24958:	mov	r6, r1
   2495c:	mov	r5, r0
   24960:	umull	r8, r9, r1, r3
   24964:	adds	r4, r9, #0
   24968:	movne	r4, #1
   2496c:	cmp	r4, #0
   24970:	bne	249bc <__assert_fail@plt+0x134f4>
   24974:	ldr	r0, [r0, #8]
   24978:	cmp	r0, r2
   2497c:	beq	249d0 <__assert_fail@plt+0x13508>
   24980:	mov	r1, r8
   24984:	bl	24844 <__assert_fail@plt+0x1337c>
   24988:	subs	r8, r0, #0
   2498c:	beq	249a0 <__assert_fail@plt+0x134d8>
   24990:	str	r8, [r5, #8]
   24994:	str	r6, [r5, #4]
   24998:	str	r6, [r5]
   2499c:	mov	r4, #1
   249a0:	mov	r0, r4
   249a4:	ldrd	r4, [sp]
   249a8:	ldrd	r6, [sp, #8]
   249ac:	ldrd	r8, [sp, #16]
   249b0:	ldr	sl, [sp, #24]
   249b4:	add	sp, sp, #28
   249b8:	pop	{pc}		; (ldr pc, [sp], #4)
   249bc:	bl	113c0 <__errno_location@plt>
   249c0:	mov	r3, #12
   249c4:	str	r3, [r0]
   249c8:	mov	r4, #0
   249cc:	b	249a0 <__assert_fail@plt+0x134d8>
   249d0:	mov	r0, r8
   249d4:	bl	24808 <__assert_fail@plt+0x13340>
   249d8:	subs	r8, r0, #0
   249dc:	beq	249a0 <__assert_fail@plt+0x134d8>
   249e0:	ldr	r1, [r5, #8]
   249e4:	cmp	r1, #0
   249e8:	beq	24990 <__assert_fail@plt+0x134c8>
   249ec:	ldr	r2, [r5]
   249f0:	mul	r2, r2, r7
   249f4:	mov	r0, r8
   249f8:	bl	11204 <memcpy@plt>
   249fc:	b	24990 <__assert_fail@plt+0x134c8>
   24a00:	strd	r4, [sp, #-16]!
   24a04:	str	r6, [sp, #8]
   24a08:	str	lr, [sp, #12]
   24a0c:	sub	sp, sp, #8
   24a10:	mov	r4, r0
   24a14:	bl	11408 <fileno@plt>
   24a18:	cmp	r0, #0
   24a1c:	blt	24a94 <__assert_fail@plt+0x135cc>
   24a20:	mov	r0, r4
   24a24:	bl	11330 <__freading@plt>
   24a28:	cmp	r0, #0
   24a2c:	beq	24a60 <__assert_fail@plt+0x13598>
   24a30:	mov	r0, r4
   24a34:	bl	11408 <fileno@plt>
   24a38:	mov	r3, #1
   24a3c:	str	r3, [sp]
   24a40:	mov	r2, #0
   24a44:	mov	r3, #0
   24a48:	bl	112c4 <lseek64@plt>
   24a4c:	mvn	r2, #0
   24a50:	mvn	r3, #0
   24a54:	cmp	r1, r3
   24a58:	cmpeq	r0, r2
   24a5c:	beq	24aa0 <__assert_fail@plt+0x135d8>
   24a60:	mov	r0, r4
   24a64:	bl	24abc <__assert_fail@plt+0x135f4>
   24a68:	cmp	r0, #0
   24a6c:	beq	24aa0 <__assert_fail@plt+0x135d8>
   24a70:	bl	113c0 <__errno_location@plt>
   24a74:	mov	r5, r0
   24a78:	ldr	r6, [r0]
   24a7c:	mov	r0, r4
   24a80:	bl	1142c <fclose@plt>
   24a84:	cmp	r6, #0
   24a88:	strne	r6, [r5]
   24a8c:	mvnne	r0, #0
   24a90:	b	24aa8 <__assert_fail@plt+0x135e0>
   24a94:	mov	r0, r4
   24a98:	bl	1142c <fclose@plt>
   24a9c:	b	24aa8 <__assert_fail@plt+0x135e0>
   24aa0:	mov	r0, r4
   24aa4:	bl	1142c <fclose@plt>
   24aa8:	add	sp, sp, #8
   24aac:	ldrd	r4, [sp]
   24ab0:	ldr	r6, [sp, #8]
   24ab4:	add	sp, sp, #12
   24ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   24abc:	str	r4, [sp, #-8]!
   24ac0:	str	lr, [sp, #4]
   24ac4:	sub	sp, sp, #8
   24ac8:	subs	r4, r0, #0
   24acc:	beq	24ae0 <__assert_fail@plt+0x13618>
   24ad0:	mov	r0, r4
   24ad4:	bl	11330 <__freading@plt>
   24ad8:	cmp	r0, #0
   24adc:	bne	24af8 <__assert_fail@plt+0x13630>
   24ae0:	mov	r0, r4
   24ae4:	bl	111bc <fflush@plt>
   24ae8:	add	sp, sp, #8
   24aec:	ldr	r4, [sp]
   24af0:	add	sp, sp, #4
   24af4:	pop	{pc}		; (ldr pc, [sp], #4)
   24af8:	ldr	r3, [r4]
   24afc:	tst	r3, #256	; 0x100
   24b00:	bne	24b10 <__assert_fail@plt+0x13648>
   24b04:	mov	r0, r4
   24b08:	bl	111bc <fflush@plt>
   24b0c:	b	24ae8 <__assert_fail@plt+0x13620>
   24b10:	mov	r3, #1
   24b14:	str	r3, [sp]
   24b18:	mov	r2, #0
   24b1c:	mov	r3, #0
   24b20:	mov	r0, r4
   24b24:	bl	24b2c <__assert_fail@plt+0x13664>
   24b28:	b	24b04 <__assert_fail@plt+0x1363c>
   24b2c:	str	r4, [sp, #-16]!
   24b30:	strd	r6, [sp, #4]
   24b34:	str	lr, [sp, #12]
   24b38:	sub	sp, sp, #8
   24b3c:	mov	r4, r0
   24b40:	mov	r6, r2
   24b44:	mov	r7, r3
   24b48:	ldr	r2, [r0, #8]
   24b4c:	ldr	r3, [r0, #4]
   24b50:	cmp	r2, r3
   24b54:	beq	24b84 <__assert_fail@plt+0x136bc>
   24b58:	ldr	r3, [sp, #24]
   24b5c:	str	r3, [sp]
   24b60:	mov	r2, r6
   24b64:	mov	r3, r7
   24b68:	mov	r0, r4
   24b6c:	bl	11438 <fseeko64@plt>
   24b70:	add	sp, sp, #8
   24b74:	ldr	r4, [sp]
   24b78:	ldrd	r6, [sp, #4]
   24b7c:	add	sp, sp, #12
   24b80:	pop	{pc}		; (ldr pc, [sp], #4)
   24b84:	ldr	r2, [r0, #20]
   24b88:	ldr	r3, [r0, #16]
   24b8c:	cmp	r2, r3
   24b90:	bne	24b58 <__assert_fail@plt+0x13690>
   24b94:	ldr	r3, [r0, #36]	; 0x24
   24b98:	cmp	r3, #0
   24b9c:	bne	24b58 <__assert_fail@plt+0x13690>
   24ba0:	bl	11408 <fileno@plt>
   24ba4:	ldr	r3, [sp, #24]
   24ba8:	str	r3, [sp]
   24bac:	mov	r2, r6
   24bb0:	mov	r3, r7
   24bb4:	bl	112c4 <lseek64@plt>
   24bb8:	mvn	r2, #0
   24bbc:	mvn	r3, #0
   24bc0:	cmp	r1, r3
   24bc4:	cmpeq	r0, r2
   24bc8:	beq	24be4 <__assert_fail@plt+0x1371c>
   24bcc:	ldr	r3, [r4]
   24bd0:	bic	r3, r3, #16
   24bd4:	str	r3, [r4]
   24bd8:	strd	r0, [r4, #80]	; 0x50
   24bdc:	mov	r0, #0
   24be0:	b	24b70 <__assert_fail@plt+0x136a8>
   24be4:	mvn	r0, #0
   24be8:	b	24b70 <__assert_fail@plt+0x136a8>
   24bec:	push	{lr}		; (str lr, [sp, #-4]!)
   24bf0:	sub	sp, sp, #268	; 0x10c
   24bf4:	movw	r2, #257	; 0x101
   24bf8:	add	r1, sp, #4
   24bfc:	bl	24cc8 <__assert_fail@plt+0x13800>
   24c00:	cmp	r0, #0
   24c04:	movne	r0, #0
   24c08:	bne	24c40 <__assert_fail@plt+0x13778>
   24c0c:	movw	r1, #24852	; 0x6114
   24c10:	movt	r1, #2
   24c14:	add	r0, sp, #4
   24c18:	bl	1118c <strcmp@plt>
   24c1c:	cmp	r0, #0
   24c20:	beq	24c3c <__assert_fail@plt+0x13774>
   24c24:	movw	r1, #24856	; 0x6118
   24c28:	movt	r1, #2
   24c2c:	add	r0, sp, #4
   24c30:	bl	1118c <strcmp@plt>
   24c34:	adds	r0, r0, #0
   24c38:	movne	r0, #1
   24c3c:	and	r0, r0, #1
   24c40:	add	sp, sp, #268	; 0x10c
   24c44:	pop	{pc}		; (ldr pc, [sp], #4)
   24c48:	str	r4, [sp, #-8]!
   24c4c:	str	lr, [sp, #4]
   24c50:	mov	r0, #14
   24c54:	bl	11474 <nl_langinfo@plt>
   24c58:	cmp	r0, #0
   24c5c:	beq	24c80 <__assert_fail@plt+0x137b8>
   24c60:	ldrb	r2, [r0]
   24c64:	movw	r3, #24864	; 0x6120
   24c68:	movt	r3, #2
   24c6c:	cmp	r2, #0
   24c70:	moveq	r0, r3
   24c74:	ldr	r4, [sp]
   24c78:	add	sp, sp, #4
   24c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   24c80:	movw	r0, #24864	; 0x6120
   24c84:	movt	r0, #2
   24c88:	b	24c74 <__assert_fail@plt+0x137ac>
   24c8c:	str	r4, [sp, #-8]!
   24c90:	str	lr, [sp, #4]
   24c94:	umull	r2, r3, r1, r2
   24c98:	cmp	r3, #0
   24c9c:	bne	24cb4 <__assert_fail@plt+0x137ec>
   24ca0:	mov	r1, r2
   24ca4:	bl	24844 <__assert_fail@plt+0x1337c>
   24ca8:	ldr	r4, [sp]
   24cac:	add	sp, sp, #4
   24cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   24cb4:	bl	113c0 <__errno_location@plt>
   24cb8:	mov	r3, #12
   24cbc:	str	r3, [r0]
   24cc0:	mov	r0, #0
   24cc4:	b	24ca8 <__assert_fail@plt+0x137e0>
   24cc8:	strd	r4, [sp, #-16]!
   24ccc:	str	r6, [sp, #8]
   24cd0:	str	lr, [sp, #12]
   24cd4:	mov	r6, r1
   24cd8:	mov	r4, r2
   24cdc:	mov	r1, #0
   24ce0:	bl	1145c <setlocale@plt>
   24ce4:	subs	r5, r0, #0
   24ce8:	beq	24d2c <__assert_fail@plt+0x13864>
   24cec:	mov	r0, r5
   24cf0:	bl	11390 <strlen@plt>
   24cf4:	cmp	r4, r0
   24cf8:	bhi	24d48 <__assert_fail@plt+0x13880>
   24cfc:	cmp	r4, #0
   24d00:	moveq	r0, #34	; 0x22
   24d04:	beq	24d5c <__assert_fail@plt+0x13894>
   24d08:	sub	r4, r4, #1
   24d0c:	mov	r2, r4
   24d10:	mov	r1, r5
   24d14:	mov	r0, r6
   24d18:	bl	11204 <memcpy@plt>
   24d1c:	mov	r3, #0
   24d20:	strb	r3, [r6, r4]
   24d24:	mov	r0, #34	; 0x22
   24d28:	b	24d5c <__assert_fail@plt+0x13894>
   24d2c:	cmp	r4, #0
   24d30:	moveq	r0, #22
   24d34:	beq	24d5c <__assert_fail@plt+0x13894>
   24d38:	mov	r3, #0
   24d3c:	strb	r3, [r6]
   24d40:	mov	r0, #22
   24d44:	b	24d5c <__assert_fail@plt+0x13894>
   24d48:	add	r2, r0, #1
   24d4c:	mov	r1, r5
   24d50:	mov	r0, r6
   24d54:	bl	11204 <memcpy@plt>
   24d58:	mov	r0, #0
   24d5c:	ldrd	r4, [sp]
   24d60:	ldr	r6, [sp, #8]
   24d64:	add	sp, sp, #12
   24d68:	pop	{pc}		; (ldr pc, [sp], #4)
   24d6c:	str	r4, [sp, #-8]!
   24d70:	str	lr, [sp, #4]
   24d74:	mov	r1, #0
   24d78:	bl	1145c <setlocale@plt>
   24d7c:	ldr	r4, [sp]
   24d80:	add	sp, sp, #4
   24d84:	pop	{pc}		; (ldr pc, [sp], #4)
   24d88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24d8c:	mov	r7, r0
   24d90:	ldr	r6, [pc, #72]	; 24de0 <__assert_fail@plt+0x13918>
   24d94:	ldr	r5, [pc, #72]	; 24de4 <__assert_fail@plt+0x1391c>
   24d98:	add	r6, pc, r6
   24d9c:	add	r5, pc, r5
   24da0:	sub	r6, r6, r5
   24da4:	mov	r8, r1
   24da8:	mov	r9, r2
   24dac:	bl	11124 <pthread_mutex_unlock@plt-0x20>
   24db0:	asrs	r6, r6, #2
   24db4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24db8:	mov	r4, #0
   24dbc:	add	r4, r4, #1
   24dc0:	ldr	r3, [r5], #4
   24dc4:	mov	r2, r9
   24dc8:	mov	r1, r8
   24dcc:	mov	r0, r7
   24dd0:	blx	r3
   24dd4:	cmp	r6, r4
   24dd8:	bne	24dbc <__assert_fail@plt+0x138f4>
   24ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24de0:	andeq	r2, r1, ip, ror #2
   24de4:	andeq	r2, r1, r4, ror #2
   24de8:	bx	lr
   24dec:	ldr	r3, [pc, #12]	; 24e00 <__assert_fail@plt+0x13938>
   24df0:	mov	r1, #0
   24df4:	add	r3, pc, r3
   24df8:	ldr	r2, [r3]
   24dfc:	b	113d8 <__cxa_atexit@plt>
   24e00:	andeq	r2, r1, r8, asr #6

Disassembly of section .fini:

00024e04 <.fini>:
   24e04:	push	{r3, lr}
   24e08:	pop	{r3, pc}
