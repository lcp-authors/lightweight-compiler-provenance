
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

00011824 <.init>:
   11824:	push	{r3, lr}
   11828:	bl	11d4c <__assert_fail@plt+0x4c>
   1182c:	pop	{r3, pc}

Disassembly of section .plt:

00011830 <pthread_mutex_unlock@plt-0x14>:
   11830:	push	{lr}		; (str lr, [sp, #-4]!)
   11834:	ldr	lr, [pc, #4]	; 11840 <pthread_mutex_unlock@plt-0x4>
   11838:	add	lr, pc, lr
   1183c:	ldr	pc, [lr, #8]!
   11840:	andeq	sl, r2, r0, asr #15

00011844 <pthread_mutex_unlock@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #172032	; 0x2a000
   1184c:	ldr	pc, [ip, #1984]!	; 0x7c0

00011850 <fdopen@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #172032	; 0x2a000
   11858:	ldr	pc, [ip, #1976]!	; 0x7b8

0001185c <calloc@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #172032	; 0x2a000
   11864:	ldr	pc, [ip, #1968]!	; 0x7b0

00011868 <wctype@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #172032	; 0x2a000
   11870:	ldr	pc, [ip, #1960]!	; 0x7a8

00011874 <raise@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #172032	; 0x2a000
   1187c:	ldr	pc, [ip, #1952]!	; 0x7a0

00011880 <wcrtomb@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #172032	; 0x2a000
   11888:	ldr	pc, [ip, #1944]!	; 0x798

0001188c <iswctype@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #172032	; 0x2a000
   11894:	ldr	pc, [ip, #1936]!	; 0x790

00011898 <strcmp@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #172032	; 0x2a000
   118a0:	ldr	pc, [ip, #1928]!	; 0x788

000118a4 <printf@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #172032	; 0x2a000
   118ac:	ldr	pc, [ip, #1920]!	; 0x780

000118b0 <pthread_mutex_destroy@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #172032	; 0x2a000
   118b8:	ldr	pc, [ip, #1912]!	; 0x778

000118bc <fflush@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #172032	; 0x2a000
   118c4:	ldr	pc, [ip, #1904]!	; 0x770

000118c8 <wcwidth@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #172032	; 0x2a000
   118d0:	ldr	pc, [ip, #1896]!	; 0x768

000118d4 <getuid@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #172032	; 0x2a000
   118dc:	ldr	pc, [ip, #1888]!	; 0x760

000118e0 <memmove@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #172032	; 0x2a000
   118e8:	ldr	pc, [ip, #1880]!	; 0x758

000118ec <free@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #172032	; 0x2a000
   118f4:	ldr	pc, [ip, #1872]!	; 0x750

000118f8 <pthread_mutex_lock@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #172032	; 0x2a000
   11900:	ldr	pc, [ip, #1864]!	; 0x748

00011904 <ferror@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #172032	; 0x2a000
   1190c:	ldr	pc, [ip, #1856]!	; 0x740

00011910 <strndup@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #172032	; 0x2a000
   11918:	ldr	pc, [ip, #1848]!	; 0x738

0001191c <_exit@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #172032	; 0x2a000
   11924:	ldr	pc, [ip, #1840]!	; 0x730

00011928 <memcpy@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #172032	; 0x2a000
   11930:	ldr	pc, [ip, #1832]!	; 0x728

00011934 <tolower@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #172032	; 0x2a000
   1193c:	ldr	pc, [ip, #1824]!	; 0x720

00011940 <pthread_mutex_init@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #172032	; 0x2a000
   11948:	ldr	pc, [ip, #1816]!	; 0x718

0001194c <towlower@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #172032	; 0x2a000
   11954:	ldr	pc, [ip, #1808]!	; 0x710

00011958 <mbsinit@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #172032	; 0x2a000
   11960:	ldr	pc, [ip, #1800]!	; 0x708

00011964 <time@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #172032	; 0x2a000
   1196c:	ldr	pc, [ip, #1792]!	; 0x700

00011970 <dcgettext@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #172032	; 0x2a000
   11978:	ldr	pc, [ip, #1784]!	; 0x6f8

0001197c <realloc@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #172032	; 0x2a000
   11984:	ldr	pc, [ip, #1776]!	; 0x6f0

00011988 <textdomain@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #172032	; 0x2a000
   11990:	ldr	pc, [ip, #1768]!	; 0x6e8

00011994 <iswcntrl@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #172032	; 0x2a000
   1199c:	ldr	pc, [ip, #1760]!	; 0x6e0

000119a0 <geteuid@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #172032	; 0x2a000
   119a8:	ldr	pc, [ip, #1752]!	; 0x6d8

000119ac <iswprint@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #172032	; 0x2a000
   119b4:	ldr	pc, [ip, #1744]!	; 0x6d0

000119b8 <setgroups@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #172032	; 0x2a000
   119c0:	ldr	pc, [ip, #1736]!	; 0x6c8

000119c4 <__fxstat64@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #172032	; 0x2a000
   119cc:	ldr	pc, [ip, #1728]!	; 0x6c0

000119d0 <fwrite@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #172032	; 0x2a000
   119d8:	ldr	pc, [ip, #1720]!	; 0x6b8

000119dc <lseek64@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #172032	; 0x2a000
   119e4:	ldr	pc, [ip, #1712]!	; 0x6b0

000119e8 <__ctype_get_mb_cur_max@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #172032	; 0x2a000
   119f0:	ldr	pc, [ip, #1704]!	; 0x6a8

000119f4 <fread@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #172032	; 0x2a000
   119fc:	ldr	pc, [ip, #1696]!	; 0x6a0

00011a00 <__fpending@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #172032	; 0x2a000
   11a08:	ldr	pc, [ip, #1688]!	; 0x698

00011a0c <mbrtowc@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #172032	; 0x2a000
   11a14:	ldr	pc, [ip, #1680]!	; 0x690

00011a18 <error@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #172032	; 0x2a000
   11a20:	ldr	pc, [ip, #1672]!	; 0x688

00011a24 <fnmatch@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #172032	; 0x2a000
   11a2c:	ldr	pc, [ip, #1664]!	; 0x680

00011a30 <open64@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #172032	; 0x2a000
   11a38:	ldr	pc, [ip, #1656]!	; 0x678

00011a3c <getenv@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #172032	; 0x2a000
   11a44:	ldr	pc, [ip, #1648]!	; 0x670

00011a48 <setgid@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #172032	; 0x2a000
   11a50:	ldr	pc, [ip, #1640]!	; 0x668

00011a54 <malloc@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #172032	; 0x2a000
   11a5c:	ldr	pc, [ip, #1632]!	; 0x660

00011a60 <__libc_start_main@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #172032	; 0x2a000
   11a68:	ldr	pc, [ip, #1624]!	; 0x658

00011a6c <strftime@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #172032	; 0x2a000
   11a74:	ldr	pc, [ip, #1616]!	; 0x650

00011a78 <__freading@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #172032	; 0x2a000
   11a80:	ldr	pc, [ip, #1608]!	; 0x648

00011a84 <localtime@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #172032	; 0x2a000
   11a8c:	ldr	pc, [ip, #1600]!	; 0x640

00011a90 <__ctype_tolower_loc@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #172032	; 0x2a000
   11a98:	ldr	pc, [ip, #1592]!	; 0x638

00011a9c <__gmon_start__@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #172032	; 0x2a000
   11aa4:	ldr	pc, [ip, #1584]!	; 0x630

00011aa8 <getopt_long@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #172032	; 0x2a000
   11ab0:	ldr	pc, [ip, #1576]!	; 0x628

00011ab4 <__ctype_b_loc@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #172032	; 0x2a000
   11abc:	ldr	pc, [ip, #1568]!	; 0x620

00011ac0 <exit@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #172032	; 0x2a000
   11ac8:	ldr	pc, [ip, #1560]!	; 0x618

00011acc <feof@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #172032	; 0x2a000
   11ad4:	ldr	pc, [ip, #1552]!	; 0x610

00011ad8 <bcmp@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #172032	; 0x2a000
   11ae0:	ldr	pc, [ip, #1544]!	; 0x608

00011ae4 <strtoul@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #172032	; 0x2a000
   11aec:	ldr	pc, [ip, #1536]!	; 0x600

00011af0 <strlen@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #172032	; 0x2a000
   11af8:	ldr	pc, [ip, #1528]!	; 0x5f8

00011afc <strchr@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #172032	; 0x2a000
   11b04:	ldr	pc, [ip, #1520]!	; 0x5f0

00011b08 <fprintf@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #172032	; 0x2a000
   11b10:	ldr	pc, [ip, #1512]!	; 0x5e8

00011b14 <ungetc@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #172032	; 0x2a000
   11b1c:	ldr	pc, [ip, #1504]!	; 0x5e0

00011b20 <__errno_location@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #172032	; 0x2a000
   11b28:	ldr	pc, [ip, #1496]!	; 0x5d8

00011b2c <iswalnum@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #172032	; 0x2a000
   11b34:	ldr	pc, [ip, #1488]!	; 0x5d0

00011b38 <strncasecmp@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #172032	; 0x2a000
   11b40:	ldr	pc, [ip, #1480]!	; 0x5c8

00011b44 <__cxa_atexit@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #172032	; 0x2a000
   11b4c:	ldr	pc, [ip, #1472]!	; 0x5c0

00011b50 <getgid@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #172032	; 0x2a000
   11b58:	ldr	pc, [ip, #1464]!	; 0x5b8

00011b5c <memset@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #172032	; 0x2a000
   11b64:	ldr	pc, [ip, #1456]!	; 0x5b0

00011b68 <putchar@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #172032	; 0x2a000
   11b70:	ldr	pc, [ip, #1448]!	; 0x5a8

00011b74 <btowc@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #172032	; 0x2a000
   11b7c:	ldr	pc, [ip, #1440]!	; 0x5a0

00011b80 <fgetc@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #172032	; 0x2a000
   11b88:	ldr	pc, [ip, #1432]!	; 0x598

00011b8c <fileno@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #172032	; 0x2a000
   11b94:	ldr	pc, [ip, #1424]!	; 0x590

00011b98 <difftime@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #172032	; 0x2a000
   11ba0:	ldr	pc, [ip, #1416]!	; 0x588

00011ba4 <strtoumax@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #172032	; 0x2a000
   11bac:	ldr	pc, [ip, #1408]!	; 0x580

00011bb0 <memchr@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #172032	; 0x2a000
   11bb8:	ldr	pc, [ip, #1400]!	; 0x578

00011bbc <fclose@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #172032	; 0x2a000
   11bc4:	ldr	pc, [ip, #1392]!	; 0x570

00011bc8 <strnlen@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #172032	; 0x2a000
   11bd0:	ldr	pc, [ip, #1384]!	; 0x568

00011bd4 <fseeko64@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #172032	; 0x2a000
   11bdc:	ldr	pc, [ip, #1376]!	; 0x560

00011be0 <fcntl64@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #172032	; 0x2a000
   11be8:	ldr	pc, [ip, #1368]!	; 0x558

00011bec <setlocale@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #172032	; 0x2a000
   11bf4:	ldr	pc, [ip, #1360]!	; 0x550

00011bf8 <toupper@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #172032	; 0x2a000
   11c00:	ldr	pc, [ip, #1352]!	; 0x548

00011c04 <strrchr@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #172032	; 0x2a000
   11c0c:	ldr	pc, [ip, #1344]!	; 0x540

00011c10 <nl_langinfo@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #172032	; 0x2a000
   11c18:	ldr	pc, [ip, #1336]!	; 0x538

00011c1c <fputc@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #172032	; 0x2a000
   11c24:	ldr	pc, [ip, #1328]!	; 0x530

00011c28 <setuid@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #172032	; 0x2a000
   11c30:	ldr	pc, [ip, #1320]!	; 0x528

00011c34 <localeconv@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #172032	; 0x2a000
   11c3c:	ldr	pc, [ip, #1312]!	; 0x520

00011c40 <clearerr@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #172032	; 0x2a000
   11c48:	ldr	pc, [ip, #1304]!	; 0x518

00011c4c <sprintf@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #172032	; 0x2a000
   11c54:	ldr	pc, [ip, #1296]!	; 0x510

00011c58 <putc@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #172032	; 0x2a000
   11c60:	ldr	pc, [ip, #1288]!	; 0x508

00011c64 <strpbrk@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #172032	; 0x2a000
   11c6c:	ldr	pc, [ip, #1280]!	; 0x500

00011c70 <bindtextdomain@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #172032	; 0x2a000
   11c78:	ldr	pc, [ip, #1272]!	; 0x4f8

00011c7c <getdelim@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #172032	; 0x2a000
   11c84:	ldr	pc, [ip, #1264]!	; 0x4f0

00011c88 <__xstat64@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #172032	; 0x2a000
   11c90:	ldr	pc, [ip, #1256]!	; 0x4e8

00011c94 <isatty@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #172032	; 0x2a000
   11c9c:	ldr	pc, [ip, #1248]!	; 0x4e0

00011ca0 <towupper@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #172032	; 0x2a000
   11ca8:	ldr	pc, [ip, #1240]!	; 0x4d8

00011cac <fputs@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #172032	; 0x2a000
   11cb4:	ldr	pc, [ip, #1232]!	; 0x4d0

00011cb8 <strncmp@plt>:
   11cb8:	add	ip, pc, #0, 12
   11cbc:	add	ip, ip, #172032	; 0x2a000
   11cc0:	ldr	pc, [ip, #1224]!	; 0x4c8

00011cc4 <abort@plt>:
   11cc4:	add	ip, pc, #0, 12
   11cc8:	add	ip, ip, #172032	; 0x2a000
   11ccc:	ldr	pc, [ip, #1216]!	; 0x4c0

00011cd0 <getc@plt>:
   11cd0:	add	ip, pc, #0, 12
   11cd4:	add	ip, ip, #172032	; 0x2a000
   11cd8:	ldr	pc, [ip, #1208]!	; 0x4b8

00011cdc <close@plt>:
   11cdc:	add	ip, pc, #0, 12
   11ce0:	add	ip, ip, #172032	; 0x2a000
   11ce4:	ldr	pc, [ip, #1200]!	; 0x4b0

00011ce8 <__lxstat64@plt>:
   11ce8:	add	ip, pc, #0, 12
   11cec:	add	ip, ip, #172032	; 0x2a000
   11cf0:	ldr	pc, [ip, #1192]!	; 0x4a8

00011cf4 <dcngettext@plt>:
   11cf4:	add	ip, pc, #0, 12
   11cf8:	add	ip, ip, #172032	; 0x2a000
   11cfc:	ldr	pc, [ip, #1184]!	; 0x4a0

00011d00 <__assert_fail@plt>:
   11d00:	add	ip, pc, #0, 12
   11d04:	add	ip, ip, #172032	; 0x2a000
   11d08:	ldr	pc, [ip, #1176]!	; 0x498

Disassembly of section .text:

00011d10 <.text>:
   11d10:	mov	fp, #0
   11d14:	mov	lr, #0
   11d18:	pop	{r1}		; (ldr r1, [sp], #4)
   11d1c:	mov	r2, sp
   11d20:	push	{r2}		; (str r2, [sp, #-4]!)
   11d24:	push	{r0}		; (str r0, [sp, #-4]!)
   11d28:	ldr	ip, [pc, #16]	; 11d40 <__assert_fail@plt+0x40>
   11d2c:	push	{ip}		; (str ip, [sp, #-4]!)
   11d30:	ldr	r0, [pc, #12]	; 11d44 <__assert_fail@plt+0x44>
   11d34:	ldr	r3, [pc, #12]	; 11d48 <__assert_fail@plt+0x48>
   11d38:	bl	11a60 <__libc_start_main@plt>
   11d3c:	bl	11cc4 <abort@plt>
   11d40:	andeq	r9, r2, r8, ror #11
   11d44:	andeq	r1, r1, r0, lsl #28
   11d48:	andeq	r9, r2, r8, lsl #11
   11d4c:	ldr	r3, [pc, #20]	; 11d68 <__assert_fail@plt+0x68>
   11d50:	ldr	r2, [pc, #20]	; 11d6c <__assert_fail@plt+0x6c>
   11d54:	add	r3, pc, r3
   11d58:	ldr	r2, [r3, r2]
   11d5c:	cmp	r2, #0
   11d60:	bxeq	lr
   11d64:	b	11a9c <__gmon_start__@plt>
   11d68:	andeq	sl, r2, r4, lsr #5
   11d6c:	andeq	r0, r0, r4, lsr #3
   11d70:	ldr	r0, [pc, #24]	; 11d90 <__assert_fail@plt+0x90>
   11d74:	ldr	r3, [pc, #24]	; 11d94 <__assert_fail@plt+0x94>
   11d78:	cmp	r3, r0
   11d7c:	bxeq	lr
   11d80:	ldr	r3, [pc, #16]	; 11d98 <__assert_fail@plt+0x98>
   11d84:	cmp	r3, #0
   11d88:	bxeq	lr
   11d8c:	bx	r3
   11d90:	andeq	ip, r3, r4, lsl #4
   11d94:	andeq	ip, r3, r4, lsl #4
   11d98:	andeq	r0, r0, r0
   11d9c:	ldr	r0, [pc, #36]	; 11dc8 <__assert_fail@plt+0xc8>
   11da0:	ldr	r1, [pc, #36]	; 11dcc <__assert_fail@plt+0xcc>
   11da4:	sub	r1, r1, r0
   11da8:	asr	r1, r1, #2
   11dac:	add	r1, r1, r1, lsr #31
   11db0:	asrs	r1, r1, #1
   11db4:	bxeq	lr
   11db8:	ldr	r3, [pc, #16]	; 11dd0 <__assert_fail@plt+0xd0>
   11dbc:	cmp	r3, #0
   11dc0:	bxeq	lr
   11dc4:	bx	r3
   11dc8:	andeq	ip, r3, r4, lsl #4
   11dcc:	andeq	ip, r3, r4, lsl #4
   11dd0:	andeq	r0, r0, r0
   11dd4:	push	{r4, lr}
   11dd8:	ldr	r4, [pc, #24]	; 11df8 <__assert_fail@plt+0xf8>
   11ddc:	ldrb	r3, [r4]
   11de0:	cmp	r3, #0
   11de4:	popne	{r4, pc}
   11de8:	bl	11d70 <__assert_fail@plt+0x70>
   11dec:	mov	r3, #1
   11df0:	strb	r3, [r4]
   11df4:	pop	{r4, pc}
   11df8:	andeq	ip, r3, r4, lsr #4
   11dfc:	b	11d9c <__assert_fail@plt+0x9c>
   11e00:	push	{r4, r5, r6, sl, fp, lr}
   11e04:	add	fp, sp, #16
   11e08:	mov	r4, r1
   11e0c:	mov	r5, r0
   11e10:	bl	11e30 <__assert_fail@plt+0x130>
   11e14:	mov	r6, r0
   11e18:	bl	11e7c <__assert_fail@plt+0x17c>
   11e1c:	mov	r0, r5
   11e20:	mov	r1, r4
   11e24:	mov	r2, r6
   11e28:	pop	{r4, r5, r6, sl, fp, lr}
   11e2c:	b	11fa0 <__assert_fail@plt+0x2a0>
   11e30:	push	{r4, r5, r6, sl, fp, lr}
   11e34:	add	fp, sp, #16
   11e38:	mov	r5, #0
   11e3c:	movw	r6, #41704	; 0xa2e8
   11e40:	movt	r6, #2
   11e44:	ldr	r4, [r6, r5, lsl #2]
   11e48:	mov	r0, r4
   11e4c:	bl	12be0 <__assert_fail@plt+0xee0>
   11e50:	cmp	r0, #0
   11e54:	bpl	11e6c <__assert_fail@plt+0x16c>
   11e58:	add	r5, r5, #1
   11e5c:	cmp	r5, #2
   11e60:	bne	11e44 <__assert_fail@plt+0x144>
   11e64:	mvn	r0, #0
   11e68:	pop	{r4, r5, r6, sl, fp, pc}
   11e6c:	movw	r1, #49704	; 0xc228
   11e70:	movt	r1, #3
   11e74:	str	r4, [r1]
   11e78:	pop	{r4, r5, r6, sl, fp, pc}
   11e7c:	push	{r4, r5, r6, sl, fp, lr}
   11e80:	add	fp, sp, #16
   11e84:	sub	sp, sp, #8
   11e88:	bl	119a0 <geteuid@plt>
   11e8c:	mov	r5, r0
   11e90:	bl	118d4 <getuid@plt>
   11e94:	mov	r6, r0
   11e98:	bl	11b50 <getgid@plt>
   11e9c:	mov	r4, r0
   11ea0:	cmp	r5, #0
   11ea4:	bne	11ec0 <__assert_fail@plt+0x1c0>
   11ea8:	str	r4, [sp, #4]
   11eac:	add	r1, sp, #4
   11eb0:	mov	r0, #1
   11eb4:	bl	119b8 <setgroups@plt>
   11eb8:	cmp	r0, #0
   11ebc:	bne	11f68 <__assert_fail@plt+0x268>
   11ec0:	cmp	r6, r5
   11ec4:	cmpne	r6, #0
   11ec8:	beq	11f00 <__assert_fail@plt+0x200>
   11ecc:	bl	11b20 <__errno_location@plt>
   11ed0:	mov	r5, r0
   11ed4:	mov	r0, #0
   11ed8:	str	r0, [r5]
   11edc:	bl	118d4 <getuid@plt>
   11ee0:	bl	11c28 <setuid@plt>
   11ee4:	cmp	r0, #0
   11ee8:	bne	11f74 <__assert_fail@plt+0x274>
   11eec:	mov	r6, #0
   11ef0:	mov	r0, #0
   11ef4:	bl	11c28 <setuid@plt>
   11ef8:	cmp	r0, #0
   11efc:	beq	11f80 <__assert_fail@plt+0x280>
   11f00:	bl	11b20 <__errno_location@plt>
   11f04:	mov	r1, #0
   11f08:	str	r1, [r0]
   11f0c:	mov	r0, r4
   11f10:	bl	11a48 <setgid@plt>
   11f14:	cmp	r0, #0
   11f18:	subeq	sp, fp, #16
   11f1c:	popeq	{r4, r5, r6, sl, fp, pc}
   11f20:	movw	r1, #38617	; 0x96d9
   11f24:	movt	r1, #2
   11f28:	mov	r0, #0
   11f2c:	mov	r2, #5
   11f30:	bl	11970 <dcgettext@plt>
   11f34:	mov	r4, r0
   11f38:	bl	11b20 <__errno_location@plt>
   11f3c:	ldr	r5, [r0]
   11f40:	mov	r0, #0
   11f44:	mov	r1, #8
   11f48:	mov	r2, r4
   11f4c:	bl	18984 <__assert_fail@plt+0x6c84>
   11f50:	mov	r3, r0
   11f54:	movw	r2, #45108	; 0xb034
   11f58:	movt	r2, #2
   11f5c:	mov	r0, #1
   11f60:	mov	r1, r5
   11f64:	bl	11a18 <error@plt>
   11f68:	movw	r1, #38520	; 0x9678
   11f6c:	movt	r1, #2
   11f70:	b	11f28 <__assert_fail@plt+0x228>
   11f74:	movw	r1, #38552	; 0x9698
   11f78:	movt	r1, #2
   11f7c:	b	11f28 <__assert_fail@plt+0x228>
   11f80:	movw	r1, #38585	; 0x96b9
   11f84:	movt	r1, #2
   11f88:	mov	r0, #0
   11f8c:	mov	r2, #5
   11f90:	bl	11970 <dcgettext@plt>
   11f94:	mov	r4, r0
   11f98:	str	r6, [r5]
   11f9c:	b	11f38 <__assert_fail@plt+0x238>
   11fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa4:	add	fp, sp, #28
   11fa8:	sub	sp, sp, #4
   11fac:	vpush	{d8-d11}
   11fb0:	sub	sp, sp, #256	; 0x100
   11fb4:	str	r2, [sp, #80]	; 0x50
   11fb8:	mov	sl, r1
   11fbc:	mov	r9, r0
   11fc0:	ldr	r0, [r1]
   11fc4:	cmp	r0, #0
   11fc8:	movweq	r0, #40010	; 0x9c4a
   11fcc:	movteq	r0, #2
   11fd0:	bl	17434 <__assert_fail@plt+0x5734>
   11fd4:	movw	r1, #41671	; 0xa2c7
   11fd8:	movt	r1, #2
   11fdc:	mov	r0, #6
   11fe0:	bl	11bec <setlocale@plt>
   11fe4:	movw	r4, #42233	; 0xa4f9
   11fe8:	movt	r4, #2
   11fec:	movw	r1, #38650	; 0x96fa
   11ff0:	movt	r1, #2
   11ff4:	mov	r0, r4
   11ff8:	bl	11c70 <bindtextdomain@plt>
   11ffc:	mov	r0, r4
   12000:	bl	11988 <textdomain@plt>
   12004:	mov	r0, #0
   12008:	bl	174f8 <__assert_fail@plt+0x57f8>
   1200c:	movw	r1, #49708	; 0xc22c
   12010:	movt	r1, #3
   12014:	str	r0, [r1]
   12018:	movw	r0, #20248	; 0x4f18
   1201c:	movt	r0, #1
   12020:	bl	295ec <__assert_fail@plt+0x178ec>
   12024:	cmp	r0, #0
   12028:	bne	12b88 <__assert_fail@plt+0xe88>
   1202c:	movw	r0, #11304	; 0x2c28
   12030:	movt	r0, #1
   12034:	bl	295ec <__assert_fail@plt+0x178ec>
   12038:	cmp	r0, #0
   1203c:	bne	12b88 <__assert_fail@plt+0xe88>
   12040:	movw	r0, #49728	; 0xc240
   12044:	movt	r0, #3
   12048:	mov	r1, #1
   1204c:	vmov.i32	q8, #0	; 0x00000000
   12050:	strb	r1, [r0]
   12054:	movw	r0, #49712	; 0xc230
   12058:	movt	r0, #3
   1205c:	vst1.64	{d16-d17}, [r0]
   12060:	movw	r0, #38709	; 0x9735
   12064:	movt	r0, #2
   12068:	bl	11a3c <getenv@plt>
   1206c:	str	r0, [sp, #100]	; 0x64
   12070:	movw	r0, #49732	; 0xc244
   12074:	movt	r0, #3
   12078:	mov	r1, #0
   1207c:	str	r1, [r0]
   12080:	mvn	r8, #0
   12084:	movw	r5, #38721	; 0x9741
   12088:	movt	r5, #2
   1208c:	movw	r4, #41716	; 0xa2f4
   12090:	movt	r4, #2
   12094:	mov	r0, #0
   12098:	str	r0, [sp, #96]	; 0x60
   1209c:	mov	r0, #0
   120a0:	str	r0, [sp, #112]	; 0x70
   120a4:	mov	r0, #0
   120a8:	str	r0, [sp, #60]	; 0x3c
   120ac:	mov	r0, #0
   120b0:	str	r0, [sp, #104]	; 0x68
   120b4:	mov	r7, #0
   120b8:	mov	r0, #0
   120bc:	str	r0, [sp, #92]	; 0x5c
   120c0:	mov	r0, #0
   120c4:	str	r0, [sp, #84]	; 0x54
   120c8:	mov	r0, #0
   120cc:	str	r0, [sp, #108]	; 0x6c
   120d0:	mov	r0, #0
   120d4:	str	r0, [sp, #88]	; 0x58
   120d8:	str	r8, [sp, #136]	; 0x88
   120dc:	add	r0, sp, #136	; 0x88
   120e0:	str	r0, [sp]
   120e4:	mov	r0, r9
   120e8:	mov	r1, sl
   120ec:	mov	r2, r5
   120f0:	mov	r3, r4
   120f4:	bl	11aa8 <getopt_long@plt>
   120f8:	mov	r6, r0
   120fc:	sub	r0, r0, #48	; 0x30
   12100:	cmp	r0, #209	; 0xd1
   12104:	bhi	125a0 <__assert_fail@plt+0x8a0>
   12108:	add	r1, pc, #0
   1210c:	ldr	pc, [r1, r0, lsl #2]
   12110:	andeq	r2, r1, ip, lsr r5
   12114:	andeq	r2, r1, r4, lsr fp
   12118:	andeq	r2, r1, r4, lsr fp
   1211c:	andeq	r2, r1, r4, lsr fp
   12120:	andeq	r2, r1, r4, lsr fp
   12124:	andeq	r2, r1, r4, lsr fp
   12128:	andeq	r2, r1, r4, lsr fp
   1212c:	andeq	r2, r1, r4, lsr fp
   12130:	andeq	r2, r1, r4, lsr fp
   12134:	andeq	r2, r1, r4, lsr fp
   12138:	andeq	r2, r1, r4, lsr fp
   1213c:	andeq	r2, r1, r4, lsr fp
   12140:	andeq	r2, r1, r4, lsr fp
   12144:	andeq	r2, r1, r4, lsr fp
   12148:	andeq	r2, r1, r4, lsr fp
   1214c:	andeq	r2, r1, r4, lsr fp
   12150:	andeq	r2, r1, r4, lsr fp
   12154:	muleq	r1, r8, r5
   12158:	andeq	r2, r1, r4, lsr fp
   1215c:	andeq	r2, r1, r4, lsr fp
   12160:	andeq	r2, r1, r4, lsr fp
   12164:	andeq	r2, r1, r0, ror #10
   12168:	andeq	r2, r1, r4, lsr fp
   1216c:	andeq	r2, r1, r4, lsr fp
   12170:	andeq	r2, r1, r8, asr r4
   12174:	andeq	r2, r1, r4, lsr fp
   12178:	andeq	r2, r1, r4, lsr fp
   1217c:	andeq	r2, r1, r4, lsr fp
   12180:	ldrdeq	r2, [r1], -r0
   12184:	andeq	r2, r1, r4, lsr fp
   12188:	andeq	r2, r1, r4, lsr fp
   1218c:	andeq	r2, r1, r4, lsr fp
   12190:	andeq	r2, r1, r8, asr r4
   12194:	andeq	r2, r1, r4, lsr fp
   12198:	andeq	r2, r1, r4, lsr fp
   1219c:	andeq	r2, r1, r4, ror #9
   121a0:	andeq	r2, r1, r4, lsr fp
   121a4:	andeq	r2, r1, r4, lsr fp
   121a8:	andeq	r2, r1, r4, lsr fp
   121ac:	andeq	r2, r1, r4, lsr fp
   121b0:	andeq	r2, r1, r4, lsr fp
   121b4:	andeq	r2, r1, r4, lsr fp
   121b8:	andeq	r2, r1, r4, lsr fp
   121bc:	andeq	r2, r1, r4, lsr fp
   121c0:	andeq	r2, r1, r4, lsr fp
   121c4:	andeq	r2, r1, r4, lsr fp
   121c8:	andeq	r2, r1, r4, lsr fp
   121cc:	andeq	r2, r1, r4, lsr fp
   121d0:	andeq	r2, r1, r4, lsr fp
   121d4:	andeq	r2, r1, r4, lsr fp
   121d8:			; <UNDEFINED> instruction: 0x000124b8
   121dc:	andeq	r2, r1, ip, lsl r5
   121e0:	muleq	r1, ip, r4
   121e4:	andeq	r2, r1, r8, lsl #10
   121e8:	andeq	r2, r1, r4, lsr fp
   121ec:	andeq	r2, r1, r4, lsr fp
   121f0:	andeq	r2, r1, ip, lsr fp
   121f4:	andeq	r2, r1, r4, ror r5
   121f8:	andeq	r2, r1, r4, lsr fp
   121fc:	andeq	r2, r1, r4, lsr fp
   12200:	andeq	r2, r1, r0, ror #8
   12204:	ldrdeq	r2, [r1], -r8
   12208:	andeq	r2, r1, r4, lsr fp
   1220c:	andeq	r2, r1, r4, lsr fp
   12210:	andeq	r2, r1, r4, asr #9
   12214:	andeq	r2, r1, r4, lsr fp
   12218:	andeq	r2, r1, r0, lsl #11
   1221c:	ldrdeq	r2, [r1], -r8
   12220:	andeq	r2, r1, r4, lsr fp
   12224:	andeq	r2, r1, r4, lsr fp
   12228:	ldrdeq	r2, [r1], -r8
   1222c:	andeq	r2, r1, ip, lsl #11
   12230:	andeq	r2, r1, r4, lsr fp
   12234:	andeq	r2, r1, r4, lsr fp
   12238:	andeq	r2, r1, r4, lsr fp
   1223c:	andeq	r2, r1, r4, lsr fp
   12240:	andeq	r2, r1, r4, lsr fp
   12244:	andeq	r2, r1, r4, lsr fp
   12248:	andeq	r2, r1, r4, lsr fp
   1224c:	andeq	r2, r1, r4, lsr fp
   12250:	andeq	r2, r1, r4, lsr fp
   12254:	andeq	r2, r1, r4, lsr fp
   12258:	andeq	r2, r1, r4, lsr fp
   1225c:	andeq	r2, r1, r4, lsr fp
   12260:	andeq	r2, r1, r4, lsr fp
   12264:	andeq	r2, r1, r4, lsr fp
   12268:	andeq	r2, r1, r4, lsr fp
   1226c:	andeq	r2, r1, r4, lsr fp
   12270:	andeq	r2, r1, r4, lsr fp
   12274:	andeq	r2, r1, r4, lsr fp
   12278:	andeq	r2, r1, r4, lsr fp
   1227c:	andeq	r2, r1, r4, lsr fp
   12280:	andeq	r2, r1, r4, lsr fp
   12284:	andeq	r2, r1, r4, lsr fp
   12288:	andeq	r2, r1, r4, lsr fp
   1228c:	andeq	r2, r1, r4, lsr fp
   12290:	andeq	r2, r1, r4, lsr fp
   12294:	andeq	r2, r1, r4, lsr fp
   12298:	andeq	r2, r1, r4, lsr fp
   1229c:	andeq	r2, r1, r4, lsr fp
   122a0:	andeq	r2, r1, r4, lsr fp
   122a4:	andeq	r2, r1, r4, lsr fp
   122a8:	andeq	r2, r1, r4, lsr fp
   122ac:	andeq	r2, r1, r4, lsr fp
   122b0:	andeq	r2, r1, r4, lsr fp
   122b4:	andeq	r2, r1, r4, lsr fp
   122b8:	andeq	r2, r1, r4, lsr fp
   122bc:	andeq	r2, r1, r4, lsr fp
   122c0:	andeq	r2, r1, r4, lsr fp
   122c4:	andeq	r2, r1, r4, lsr fp
   122c8:	andeq	r2, r1, r4, lsr fp
   122cc:	andeq	r2, r1, r4, lsr fp
   122d0:	andeq	r2, r1, r4, lsr fp
   122d4:	andeq	r2, r1, r4, lsr fp
   122d8:	andeq	r2, r1, r4, lsr fp
   122dc:	andeq	r2, r1, r4, lsr fp
   122e0:	andeq	r2, r1, r4, lsr fp
   122e4:	andeq	r2, r1, r4, lsr fp
   122e8:	andeq	r2, r1, r4, lsr fp
   122ec:	andeq	r2, r1, r4, lsr fp
   122f0:	andeq	r2, r1, r4, lsr fp
   122f4:	andeq	r2, r1, r4, lsr fp
   122f8:	andeq	r2, r1, r4, lsr fp
   122fc:	andeq	r2, r1, r4, lsr fp
   12300:	andeq	r2, r1, r4, lsr fp
   12304:	andeq	r2, r1, r4, lsr fp
   12308:	andeq	r2, r1, r4, lsr fp
   1230c:	andeq	r2, r1, r4, lsr fp
   12310:	andeq	r2, r1, r4, lsr fp
   12314:	andeq	r2, r1, r4, lsr fp
   12318:	andeq	r2, r1, r4, lsr fp
   1231c:	andeq	r2, r1, r4, lsr fp
   12320:	andeq	r2, r1, r4, lsr fp
   12324:	andeq	r2, r1, r4, lsr fp
   12328:	andeq	r2, r1, r4, lsr fp
   1232c:	andeq	r2, r1, r4, lsr fp
   12330:	andeq	r2, r1, r4, lsr fp
   12334:	andeq	r2, r1, r4, lsr fp
   12338:	andeq	r2, r1, r4, lsr fp
   1233c:	andeq	r2, r1, r4, lsr fp
   12340:	andeq	r2, r1, r4, lsr fp
   12344:	andeq	r2, r1, r4, lsr fp
   12348:	andeq	r2, r1, r4, lsr fp
   1234c:	andeq	r2, r1, r4, lsr fp
   12350:	andeq	r2, r1, r4, lsr fp
   12354:	andeq	r2, r1, r4, lsr fp
   12358:	andeq	r2, r1, r4, lsr fp
   1235c:	andeq	r2, r1, r4, lsr fp
   12360:	andeq	r2, r1, r4, lsr fp
   12364:	andeq	r2, r1, r4, lsr fp
   12368:	andeq	r2, r1, r4, lsr fp
   1236c:	andeq	r2, r1, r4, lsr fp
   12370:	andeq	r2, r1, r4, lsr fp
   12374:	andeq	r2, r1, r4, lsr fp
   12378:	andeq	r2, r1, r4, lsr fp
   1237c:	andeq	r2, r1, r4, lsr fp
   12380:	andeq	r2, r1, r4, lsr fp
   12384:	andeq	r2, r1, r4, lsr fp
   12388:	andeq	r2, r1, r4, lsr fp
   1238c:	andeq	r2, r1, r4, lsr fp
   12390:	andeq	r2, r1, r4, lsr fp
   12394:	andeq	r2, r1, r4, lsr fp
   12398:	andeq	r2, r1, r4, lsr fp
   1239c:	andeq	r2, r1, r4, lsr fp
   123a0:	andeq	r2, r1, r4, lsr fp
   123a4:	andeq	r2, r1, r4, lsr fp
   123a8:	andeq	r2, r1, r4, lsr fp
   123ac:	andeq	r2, r1, r4, lsr fp
   123b0:	andeq	r2, r1, r4, lsr fp
   123b4:	andeq	r2, r1, r4, lsr fp
   123b8:	andeq	r2, r1, r4, lsr fp
   123bc:	andeq	r2, r1, r4, lsr fp
   123c0:	andeq	r2, r1, r4, lsr fp
   123c4:	andeq	r2, r1, r4, lsr fp
   123c8:	andeq	r2, r1, r4, lsr fp
   123cc:	andeq	r2, r1, r4, lsr fp
   123d0:	andeq	r2, r1, r4, lsr fp
   123d4:	andeq	r2, r1, r4, lsr fp
   123d8:	andeq	r2, r1, r4, lsr fp
   123dc:	andeq	r2, r1, r4, lsr fp
   123e0:	andeq	r2, r1, r4, lsr fp
   123e4:	andeq	r2, r1, r4, lsr fp
   123e8:	andeq	r2, r1, r4, lsr fp
   123ec:	andeq	r2, r1, r4, lsr fp
   123f0:	andeq	r2, r1, r4, lsr fp
   123f4:	andeq	r2, r1, r4, lsr fp
   123f8:	andeq	r2, r1, r4, lsr fp
   123fc:	andeq	r2, r1, r4, lsr fp
   12400:	andeq	r2, r1, r4, lsr fp
   12404:	andeq	r2, r1, r4, lsr fp
   12408:	andeq	r2, r1, r4, lsr fp
   1240c:	andeq	r2, r1, r4, lsr fp
   12410:	andeq	r2, r1, r4, lsr fp
   12414:	andeq	r2, r1, r4, lsr fp
   12418:	andeq	r2, r1, r4, lsr fp
   1241c:	andeq	r2, r1, r4, lsr fp
   12420:	andeq	r2, r1, r4, lsr fp
   12424:	andeq	r2, r1, r4, lsr fp
   12428:	andeq	r2, r1, r4, lsr fp
   1242c:	andeq	r2, r1, r4, lsr fp
   12430:	andeq	r2, r1, r4, lsr fp
   12434:	andeq	r2, r1, r4, lsr fp
   12438:	andeq	r2, r1, r4, lsr fp
   1243c:	andeq	r2, r1, r4, lsr fp
   12440:	andeq	r2, r1, r4, lsr fp
   12444:	andeq	r2, r1, r4, lsr fp
   12448:	andeq	r2, r1, r4, lsr fp
   1244c:	andeq	r2, r1, r4, lsr fp
   12450:	strdeq	r2, [r1], -r0
   12454:	andeq	r2, r1, r8, lsr #10
   12458:	mov	r0, #1
   1245c:	b	124d4 <__assert_fail@plt+0x7d4>
   12460:	movw	r0, #49696	; 0xc220
   12464:	movt	r0, #3
   12468:	ldr	r0, [r0]
   1246c:	str	r0, [sp, #128]	; 0x80
   12470:	mov	r1, #0
   12474:	str	r1, [sp]
   12478:	add	r1, sp, #128	; 0x80
   1247c:	mov	r2, #10
   12480:	movw	r3, #49712	; 0xc230
   12484:	movt	r3, #3
   12488:	bl	19a3c <__assert_fail@plt+0x7d3c>
   1248c:	cmp	r0, #0
   12490:	bne	12b44 <__assert_fail@plt+0xe44>
   12494:	mov	r7, #1
   12498:	b	120d8 <__assert_fail@plt+0x3d8>
   1249c:	movw	r0, #49696	; 0xc220
   124a0:	movt	r0, #3
   124a4:	ldr	r0, [r0]
   124a8:	str	r0, [sp, #100]	; 0x64
   124ac:	cmp	r0, #0
   124b0:	bne	120d8 <__assert_fail@plt+0x3d8>
   124b4:	b	12b68 <__assert_fail@plt+0xe68>
   124b8:	mov	r0, #1
   124bc:	str	r0, [sp, #104]	; 0x68
   124c0:	b	120d8 <__assert_fail@plt+0x3d8>
   124c4:	mov	r0, #1
   124c8:	str	r0, [sp, #112]	; 0x70
   124cc:	b	120d8 <__assert_fail@plt+0x3d8>
   124d0:	mov	r0, #0
   124d4:	movw	r1, #49740	; 0xc24c
   124d8:	movt	r1, #3
   124dc:	strb	r0, [r1]
   124e0:	b	120d8 <__assert_fail@plt+0x3d8>
   124e4:	mov	r0, #1
   124e8:	str	r0, [sp, #108]	; 0x6c
   124ec:	b	120d8 <__assert_fail@plt+0x3d8>
   124f0:	movw	r0, #49696	; 0xc220
   124f4:	movt	r0, #3
   124f8:	ldr	r0, [r0]
   124fc:	bl	14b80 <__assert_fail@plt+0x2e80>
   12500:	str	r0, [sp, #84]	; 0x54
   12504:	b	120d8 <__assert_fail@plt+0x3d8>
   12508:	mov	r0, #1
   1250c:	movw	r1, #49732	; 0xc244
   12510:	movt	r1, #3
   12514:	str	r0, [r1]
   12518:	b	120d8 <__assert_fail@plt+0x3d8>
   1251c:	mov	r0, #1
   12520:	str	r0, [sp, #60]	; 0x3c
   12524:	b	120d8 <__assert_fail@plt+0x3d8>
   12528:	movw	r0, #49696	; 0xc220
   1252c:	movt	r0, #3
   12530:	ldr	r0, [r0]
   12534:	bl	12cd8 <__assert_fail@plt+0xfd8>
   12538:	b	120d8 <__assert_fail@plt+0x3d8>
   1253c:	movw	r0, #49728	; 0xc240
   12540:	movt	r0, #3
   12544:	mov	r1, #0
   12548:	strb	r1, [r0]
   1254c:	mov	r0, #1
   12550:	movw	r1, #49736	; 0xc248
   12554:	movt	r1, #3
   12558:	strb	r0, [r1]
   1255c:	b	120d8 <__assert_fail@plt+0x3d8>
   12560:	movw	r0, #49732	; 0xc244
   12564:	movt	r0, #3
   12568:	mov	r1, #2
   1256c:	str	r1, [r0]
   12570:	b	120d8 <__assert_fail@plt+0x3d8>
   12574:	mov	r0, #1
   12578:	str	r0, [sp, #96]	; 0x60
   1257c:	b	120d8 <__assert_fail@plt+0x3d8>
   12580:	mov	r0, #1
   12584:	str	r0, [sp, #92]	; 0x5c
   12588:	b	120d8 <__assert_fail@plt+0x3d8>
   1258c:	mov	r0, #0
   12590:	str	r0, [sp, #104]	; 0x68
   12594:	b	120d8 <__assert_fail@plt+0x3d8>
   12598:	mov	r0, #1
   1259c:	b	120d4 <__assert_fail@plt+0x3d4>
   125a0:	cmn	r6, #1
   125a4:	bne	12b34 <__assert_fail@plt+0xe34>
   125a8:	ldr	r0, [sp, #80]	; 0x50
   125ac:	cmp	r0, #0
   125b0:	bmi	125ec <__assert_fail@plt+0x8ec>
   125b4:	ldr	r4, [sp, #100]	; 0x64
   125b8:	cmp	r4, #0
   125bc:	mov	r6, r7
   125c0:	add	r7, sp, #136	; 0x88
   125c4:	beq	125f8 <__assert_fail@plt+0x8f8>
   125c8:	bl	11cdc <close@plt>
   125cc:	mvn	r0, #0
   125d0:	str	r0, [sp, #80]	; 0x50
   125d4:	b	125f8 <__assert_fail@plt+0x8f8>
   125d8:	movw	r0, #40010	; 0x9c4a
   125dc:	movt	r0, #2
   125e0:	bl	146ec <__assert_fail@plt+0x29ec>
   125e4:	mov	r4, #0
   125e8:	b	12af4 <__assert_fail@plt+0xdf4>
   125ec:	ldr	r4, [sp, #100]	; 0x64
   125f0:	mov	r6, r7
   125f4:	add	r7, sp, #136	; 0x88
   125f8:	ldr	r1, [sp, #108]	; 0x6c
   125fc:	ldr	r0, [sp, #60]	; 0x3c
   12600:	orrs	r0, r1, r0
   12604:	ldr	r0, [sp, #112]	; 0x70
   12608:	movweq	r0, #1
   1260c:	str	r0, [sp, #112]	; 0x70
   12610:	cmp	r1, #0
   12614:	movw	r0, #49680	; 0xc210
   12618:	movt	r0, #3
   1261c:	beq	12630 <__assert_fail@plt+0x930>
   12620:	ldr	r0, [r0]
   12624:	subs	r0, r0, r9
   12628:	moveq	r6, r0
   1262c:	b	12648 <__assert_fail@plt+0x948>
   12630:	ldr	r0, [r0]
   12634:	cmp	r0, r9
   12638:	bne	12648 <__assert_fail@plt+0x948>
   1263c:	ldr	r0, [sp, #60]	; 0x3c
   12640:	cmp	r0, #0
   12644:	beq	12bb4 <__assert_fail@plt+0xeb4>
   12648:	mov	r0, #1
   1264c:	bl	11c94 <isatty@plt>
   12650:	sub	r0, r0, #1
   12654:	clz	r0, r0
   12658:	lsr	r0, r0, #5
   1265c:	movw	r1, #49741	; 0xc24d
   12660:	movt	r1, #3
   12664:	strb	r0, [r1]
   12668:	cmp	r4, #0
   1266c:	beq	12690 <__assert_fail@plt+0x990>
   12670:	sub	r0, fp, #76	; 0x4c
   12674:	str	r0, [sp]
   12678:	movw	r1, #45096	; 0xb028
   1267c:	movt	r1, #2
   12680:	sub	r3, fp, #72	; 0x48
   12684:	mov	r0, r4
   12688:	mov	r2, #1
   1268c:	bl	14d68 <__assert_fail@plt+0x3068>
   12690:	add	r0, r7, #48	; 0x30
   12694:	str	r0, [sp, #56]	; 0x38
   12698:	mov	r5, #0
   1269c:	movw	r0, #49744	; 0xc250
   126a0:	movt	r0, #3
   126a4:	vmov.i32	q5, #0	; 0x00000000
   126a8:	add	r0, r0, #16
   126ac:	str	r0, [sp, #76]	; 0x4c
   126b0:	vldr	d9, [pc, #640]	; 12938 <__assert_fail@plt+0xc38>
   126b4:	mov	r0, #0
   126b8:	str	r0, [sp, #52]	; 0x34
   126bc:	add	r0, sp, #64	; 0x40
   126c0:	stm	r0, {r6, r9, sl}
   126c4:	cmp	r6, #0
   126c8:	beq	126ec <__assert_fail@plt+0x9ec>
   126cc:	movw	r0, #49712	; 0xc230
   126d0:	movt	r0, #3
   126d4:	mov	r3, r0
   126d8:	ldr	r0, [r0]
   126dc:	ldmib	r3, {r1, r2, r3}
   126e0:	subs	r0, r2, r0
   126e4:	sbcs	r0, r3, r1
   126e8:	bcs	12a64 <__assert_fail@plt+0xd64>
   126ec:	ldr	r0, [sp, #76]	; 0x4c
   126f0:	vst1.64	{d10-d11}, [r0]
   126f4:	movw	r0, #49744	; 0xc250
   126f8:	movt	r0, #3
   126fc:	mov	r1, #32
   12700:	vst1.64	{d10-d11}, [r0], r1
   12704:	vst1.64	{d10-d11}, [r0]
   12708:	cmp	r4, #0
   1270c:	beq	12760 <__assert_fail@plt+0xa60>
   12710:	mov	r6, #0
   12714:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12718:	cmp	r1, #0
   1271c:	beq	1278c <__assert_fail@plt+0xa8c>
   12720:	cmp	r1, #1
   12724:	bne	127b0 <__assert_fail@plt+0xab0>
   12728:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1272c:	ldrb	r0, [r4, r0]
   12730:	cmp	r0, #45	; 0x2d
   12734:	bne	12798 <__assert_fail@plt+0xa98>
   12738:	ldr	r0, [sp, #52]	; 0x34
   1273c:	tst	r0, #1
   12740:	bne	12b08 <__assert_fail@plt+0xe08>
   12744:	mov	r6, #0
   12748:	mov	r0, #1
   1274c:	str	r0, [sp, #52]	; 0x34
   12750:	movw	sl, #38887	; 0x97e7
   12754:	movt	sl, #2
   12758:	mov	r5, #0
   1275c:	b	127d8 <__assert_fail@plt+0xad8>
   12760:	ldr	r0, [sp, #80]	; 0x50
   12764:	cmn	r0, #1
   12768:	beq	12a64 <__assert_fail@plt+0xd64>
   1276c:	movw	r1, #49704	; 0xc228
   12770:	movt	r1, #3
   12774:	ldr	sl, [r1]
   12778:	mov	r6, #0
   1277c:	mov	r5, r0
   12780:	mvn	r0, #0
   12784:	str	r0, [sp, #80]	; 0x50
   12788:	b	127d8 <__assert_fail@plt+0xad8>
   1278c:	movw	sl, #38468	; 0x9644
   12790:	movt	sl, #2
   12794:	b	127c4 <__assert_fail@plt+0xac4>
   12798:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1279c:	ldrb	r0, [r4, r0]
   127a0:	cmp	r0, #46	; 0x2e
   127a4:	movw	sl, #38468	; 0x9644
   127a8:	movt	sl, #2
   127ac:	beq	127c4 <__assert_fail@plt+0xac4>
   127b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127b4:	add	r0, r4, r0
   127b8:	bl	11910 <strndup@plt>
   127bc:	mov	sl, r0
   127c0:	mov	r6, r0
   127c4:	mov	r0, sl
   127c8:	bl	12be0 <__assert_fail@plt+0xee0>
   127cc:	cmn	r0, #1
   127d0:	ble	12ac0 <__assert_fail@plt+0xdc0>
   127d4:	mov	r5, r0
   127d8:	mov	r0, r5
   127dc:	mov	r1, r7
   127e0:	bl	29614 <__assert_fail@plt+0x17914>
   127e4:	cmp	r0, #0
   127e8:	str	r6, [sp, #116]	; 0x74
   127ec:	beq	12830 <__assert_fail@plt+0xb30>
   127f0:	bl	11b20 <__errno_location@plt>
   127f4:	ldr	r4, [r0]
   127f8:	mov	r8, #0
   127fc:	mov	r0, #0
   12800:	mov	r1, #8
   12804:	mov	r2, sl
   12808:	bl	18984 <__assert_fail@plt+0x6c84>
   1280c:	mov	r3, r0
   12810:	mov	r0, #0
   12814:	mov	r1, r4
   12818:	movw	r2, #45108	; 0xb034
   1281c:	movt	r2, #2
   12820:	bl	11a18 <error@plt>
   12824:	mov	r6, #0
   12828:	mov	r9, #0
   1282c:	b	12970 <__assert_fail@plt+0xc70>
   12830:	ldr	r0, [sp, #56]	; 0x38
   12834:	ldm	r0, {r6, r9}
   12838:	add	r4, sp, #120	; 0x78
   1283c:	mov	r0, r4
   12840:	mov	r1, r7
   12844:	bl	19078 <__assert_fail@plt+0x7378>
   12848:	ldr	r0, [sp, #120]	; 0x78
   1284c:	ldr	r1, [sp, #124]	; 0x7c
   12850:	str	r1, [sp, #132]	; 0x84
   12854:	str	r0, [sp, #128]	; 0x80
   12858:	mov	r0, r4
   1285c:	bl	11964 <time@plt>
   12860:	cmn	r0, #1
   12864:	beq	12940 <__assert_fail@plt+0xc40>
   12868:	ldr	r1, [sp, #216]	; 0xd8
   1286c:	ldr	r0, [sp, #120]	; 0x78
   12870:	bl	11b98 <difftime@plt>
   12874:	vmov.f64	d8, d0
   12878:	movw	r0, #49584	; 0xc1b0
   1287c:	movt	r0, #3
   12880:	ldr	r0, [r0]
   12884:	movw	r1, #20864	; 0x5180
   12888:	movt	r1, #1
   1288c:	mul	r0, r0, r1
   12890:	vmov	s0, r0
   12894:	vcvt.f64.u32	d16, s0
   12898:	vcmpe.f64	d8, d16
   1289c:	vmrs	APSR_nzcv, fpscr
   128a0:	ble	1296c <__assert_fail@plt+0xc6c>
   128a4:	mov	r0, #0
   128a8:	movw	r1, #38919	; 0x9807
   128ac:	movt	r1, #2
   128b0:	mov	r2, #5
   128b4:	bl	11970 <dcgettext@plt>
   128b8:	str	r0, [sp, #48]	; 0x30
   128bc:	mov	r0, #0
   128c0:	mov	r1, #8
   128c4:	mov	r2, sl
   128c8:	bl	18984 <__assert_fail@plt+0x6c84>
   128cc:	str	r0, [sp, #44]	; 0x2c
   128d0:	movw	r0, #49584	; 0xc1b0
   128d4:	movt	r0, #3
   128d8:	ldr	r8, [r0]
   128dc:	mov	r0, #0
   128e0:	movw	r7, #42084	; 0xa464
   128e4:	movt	r7, #2
   128e8:	mov	r1, r7
   128ec:	mov	r2, #5
   128f0:	bl	11970 <dcgettext@plt>
   128f4:	mov	r4, r0
   128f8:	mov	r0, #0
   128fc:	mov	r1, r7
   12900:	mov	r2, #5
   12904:	bl	11970 <dcgettext@plt>
   12908:	vdiv.f64	d16, d8, d9
   1290c:	str	r0, [sp, #16]
   12910:	vstr	d16, [sp, #8]
   12914:	str	r8, [sp]
   12918:	str	r4, [sp, #4]
   1291c:	mov	r0, #0
   12920:	mov	r1, #0
   12924:	ldr	r2, [sp, #48]	; 0x30
   12928:	ldr	r3, [sp, #44]	; 0x2c
   1292c:	bl	11a18 <error@plt>
   12930:	b	1296c <__assert_fail@plt+0xc6c>
   12934:	nop	{0}
   12938:	andeq	r0, r0, r0
   1293c:	rscsmi	r1, r5, r0, lsl #16
   12940:	bl	11b20 <__errno_location@plt>
   12944:	ldr	r4, [r0]
   12948:	mov	r0, #0
   1294c:	movw	r1, #38895	; 0x97ef
   12950:	movt	r1, #2
   12954:	mov	r2, #5
   12958:	bl	11970 <dcgettext@plt>
   1295c:	mov	r2, r0
   12960:	mov	r0, #0
   12964:	mov	r1, r4
   12968:	bl	11a18 <error@plt>
   1296c:	mov	r8, #1
   12970:	mov	r0, r5
   12974:	movw	r1, #42213	; 0xa4e5
   12978:	movt	r1, #2
   1297c:	bl	11850 <fdopen@plt>
   12980:	cmp	r0, #0
   12984:	beq	12ac0 <__assert_fail@plt+0xdc0>
   12988:	mov	r4, r0
   1298c:	movw	r0, #49680	; 0xc210
   12990:	movt	r0, #3
   12994:	ldr	r1, [r0]
   12998:	ldr	r0, [sp, #88]	; 0x58
   1299c:	str	r0, [sp, #32]
   129a0:	ldr	r0, [sp, #92]	; 0x5c
   129a4:	str	r0, [sp, #36]	; 0x24
   129a8:	ldr	r0, [sp, #84]	; 0x54
   129ac:	str	r0, [sp, #40]	; 0x28
   129b0:	cmp	r8, #0
   129b4:	add	r0, sp, #128	; 0x80
   129b8:	movne	r8, r0
   129bc:	stm	sp, {r6, r9}
   129c0:	str	r8, [sp, #8]
   129c4:	ldr	r0, [sp, #96]	; 0x60
   129c8:	str	r0, [sp, #12]
   129cc:	ldr	r0, [sp, #112]	; 0x70
   129d0:	str	r0, [sp, #16]
   129d4:	ldr	r0, [sp, #104]	; 0x68
   129d8:	str	r0, [sp, #20]
   129dc:	ldr	r6, [sp, #64]	; 0x40
   129e0:	str	r6, [sp, #24]
   129e4:	ldr	r0, [sp, #108]	; 0x6c
   129e8:	str	r0, [sp, #28]
   129ec:	ldr	r0, [sp, #68]	; 0x44
   129f0:	sub	r0, r0, r1
   129f4:	ldr	r2, [sp, #72]	; 0x48
   129f8:	add	r1, r2, r1, lsl #2
   129fc:	mov	r2, sl
   12a00:	mov	r3, r4
   12a04:	bl	12dfc <__assert_fail@plt+0x10fc>
   12a08:	mov	r5, r0
   12a0c:	mov	r0, r4
   12a10:	bl	11bbc <fclose@plt>
   12a14:	cmn	r0, #1
   12a18:	beq	12ac0 <__assert_fail@plt+0xdc0>
   12a1c:	ldr	r0, [sp, #116]	; 0x74
   12a20:	cmp	r0, #0
   12a24:	beq	12a2c <__assert_fail@plt+0xd2c>
   12a28:	bl	1a1ec <__assert_fail@plt+0x84ec>
   12a2c:	ldr	r4, [sp, #100]	; 0x64
   12a30:	cmp	r4, #0
   12a34:	add	r7, sp, #136	; 0x88
   12a38:	beq	12a64 <__assert_fail@plt+0xd64>
   12a3c:	sub	r0, fp, #76	; 0x4c
   12a40:	str	r0, [sp]
   12a44:	mov	r0, r4
   12a48:	movw	r1, #45096	; 0xb028
   12a4c:	movt	r1, #2
   12a50:	mov	r2, #0
   12a54:	sub	r3, fp, #72	; 0x48
   12a58:	bl	14d68 <__assert_fail@plt+0x3068>
   12a5c:	cmp	r0, #0
   12a60:	bne	126c4 <__assert_fail@plt+0x9c4>
   12a64:	ldr	r0, [sp, #60]	; 0x3c
   12a68:	cmp	r0, #0
   12a6c:	beq	12a80 <__assert_fail@plt+0xd80>
   12a70:	movw	r0, #38987	; 0x984b
   12a74:	movt	r0, #2
   12a78:	mov	r1, r5
   12a7c:	bl	118a4 <printf@plt>
   12a80:	mov	r4, #0
   12a84:	cmp	r5, #0
   12a88:	bne	12af4 <__assert_fail@plt+0xdf4>
   12a8c:	clz	r0, r6
   12a90:	lsr	r0, r0, #5
   12a94:	movw	r1, #49712	; 0xc230
   12a98:	movt	r1, #3
   12a9c:	ldrd	r2, [r1]
   12aa0:	orrs	r1, r2, r3
   12aa4:	movwne	r1, #1
   12aa8:	orr	r0, r0, r1
   12aac:	ldr	r1, [sp, #108]	; 0x6c
   12ab0:	clz	r1, r1
   12ab4:	lsr	r1, r1, #5
   12ab8:	and	r4, r1, r0
   12abc:	b	12af4 <__assert_fail@plt+0xdf4>
   12ac0:	bl	11b20 <__errno_location@plt>
   12ac4:	ldr	r5, [r0]
   12ac8:	mov	r4, #0
   12acc:	mov	r0, #0
   12ad0:	mov	r1, #8
   12ad4:	mov	r2, sl
   12ad8:	bl	18984 <__assert_fail@plt+0x6c84>
   12adc:	mov	r3, r0
   12ae0:	movw	r2, #45108	; 0xb034
   12ae4:	movt	r2, #2
   12ae8:	mov	r0, #0
   12aec:	mov	r1, r5
   12af0:	bl	11a18 <error@plt>
   12af4:	mov	r0, r4
   12af8:	sub	sp, fp, #64	; 0x40
   12afc:	vpop	{d8-d11}
   12b00:	add	sp, sp, #4
   12b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b08:	mov	r4, #0
   12b0c:	movw	r1, #38824	; 0x97a8
   12b10:	movt	r1, #2
   12b14:	mov	r0, #0
   12b18:	mov	r2, #5
   12b1c:	bl	11970 <dcgettext@plt>
   12b20:	mov	r2, r0
   12b24:	mov	r0, #0
   12b28:	mov	r1, #0
   12b2c:	bl	11a18 <error@plt>
   12b30:	b	12af4 <__assert_fail@plt+0xdf4>
   12b34:	mov	r0, #1
   12b38:	bl	12c38 <__assert_fail@plt+0xf38>
   12b3c:	mov	r0, #0
   12b40:	bl	12c38 <__assert_fail@plt+0xf38>
   12b44:	movw	r1, #49696	; 0xc220
   12b48:	movt	r1, #3
   12b4c:	ldr	r2, [r1]
   12b50:	ldr	r1, [sp, #136]	; 0x88
   12b54:	str	r2, [sp]
   12b58:	uxtb	r2, r6
   12b5c:	movw	r3, #41716	; 0xa2f4
   12b60:	movt	r3, #2
   12b64:	bl	19978 <__assert_fail@plt+0x7c78>
   12b68:	movw	r0, #38742	; 0x9756
   12b6c:	movt	r0, #2
   12b70:	movw	r1, #38757	; 0x9765
   12b74:	movt	r1, #2
   12b78:	movw	r3, #38766	; 0x976e
   12b7c:	movt	r3, #2
   12b80:	movw	r2, #1613	; 0x64d
   12b84:	bl	11d00 <__assert_fail@plt>
   12b88:	bl	11b20 <__errno_location@plt>
   12b8c:	ldr	r4, [r0]
   12b90:	movw	r1, #38674	; 0x9712
   12b94:	movt	r1, #2
   12b98:	mov	r0, #0
   12b9c:	mov	r2, #5
   12ba0:	bl	11970 <dcgettext@plt>
   12ba4:	mov	r2, r0
   12ba8:	mov	r0, #1
   12bac:	mov	r1, r4
   12bb0:	bl	11a18 <error@plt>
   12bb4:	movw	r1, #38798	; 0x978e
   12bb8:	movt	r1, #2
   12bbc:	mov	r0, #0
   12bc0:	mov	r2, #5
   12bc4:	bl	11970 <dcgettext@plt>
   12bc8:	mov	r2, r0
   12bcc:	mov	r0, #0
   12bd0:	mov	r1, #0
   12bd4:	bl	11a18 <error@plt>
   12bd8:	mov	r0, #1
   12bdc:	bl	12c38 <__assert_fail@plt+0xf38>
   12be0:	push	{r4, sl, fp, lr}
   12be4:	add	fp, sp, #8
   12be8:	mov	r1, #131072	; 0x20000
   12bec:	bl	15000 <__assert_fail@plt+0x3300>
   12bf0:	mov	r4, r0
   12bf4:	cmp	r0, #0
   12bf8:	bmi	12c20 <__assert_fail@plt+0xf20>
   12bfc:	mov	r0, r4
   12c00:	mov	r1, #2
   12c04:	mov	r2, #1
   12c08:	bl	19fa0 <__assert_fail@plt+0x82a0>
   12c0c:	cmp	r0, #0
   12c10:	beq	12c20 <__assert_fail@plt+0xf20>
   12c14:	mov	r0, r4
   12c18:	bl	11cdc <close@plt>
   12c1c:	mvn	r4, #0
   12c20:	mov	r0, r4
   12c24:	pop	{r4, sl, fp, pc}
   12c28:	movw	r0, #49708	; 0xc22c
   12c2c:	movt	r0, #3
   12c30:	ldr	r0, [r0]
   12c34:	b	1a1ec <__assert_fail@plt+0x84ec>
   12c38:	push	{fp, lr}
   12c3c:	mov	fp, sp
   12c40:	cmp	r0, #0
   12c44:	bne	12c94 <__assert_fail@plt+0xf94>
   12c48:	movw	r5, #49692	; 0xc21c
   12c4c:	movt	r5, #3
   12c50:	ldr	r4, [r5]
   12c54:	movw	r1, #39181	; 0x990d
   12c58:	movt	r1, #2
   12c5c:	mov	r0, #0
   12c60:	mov	r2, #5
   12c64:	bl	11970 <dcgettext@plt>
   12c68:	mov	r1, r0
   12c6c:	movw	r6, #49820	; 0xc29c
   12c70:	movt	r6, #3
   12c74:	ldr	r2, [r6]
   12c78:	mov	r0, r4
   12c7c:	bl	11b08 <fprintf@plt>
   12c80:	ldr	r0, [r5]
   12c84:	ldr	r1, [r6]
   12c88:	bl	14e08 <__assert_fail@plt+0x3108>
   12c8c:	mov	r0, #0
   12c90:	bl	11ac0 <exit@plt>
   12c94:	mov	r4, r0
   12c98:	movw	r0, #49688	; 0xc218
   12c9c:	movt	r0, #3
   12ca0:	ldr	r5, [r0]
   12ca4:	movw	r1, #39142	; 0x98e6
   12ca8:	movt	r1, #2
   12cac:	mov	r0, #0
   12cb0:	mov	r2, #5
   12cb4:	bl	11970 <dcgettext@plt>
   12cb8:	mov	r1, r0
   12cbc:	movw	r0, #49820	; 0xc29c
   12cc0:	movt	r0, #3
   12cc4:	ldr	r2, [r0]
   12cc8:	mov	r0, r5
   12ccc:	bl	11b08 <fprintf@plt>
   12cd0:	mov	r0, r4
   12cd4:	bl	11ac0 <exit@plt>
   12cd8:	push	{r4, r5, r6, sl, fp, lr}
   12cdc:	add	fp, sp, #16
   12ce0:	sub	sp, sp, #8
   12ce4:	mov	r4, r0
   12ce8:	ldrb	r0, [r0]
   12cec:	cmp	r0, #0
   12cf0:	beq	12dd8 <__assert_fail@plt+0x10d8>
   12cf4:	bl	11b20 <__errno_location@plt>
   12cf8:	mov	r5, r0
   12cfc:	mov	r0, #0
   12d00:	str	r0, [r5]
   12d04:	add	r1, sp, #4
   12d08:	mov	r0, r4
   12d0c:	mov	r2, #10
   12d10:	bl	11ae4 <strtoul@plt>
   12d14:	cmp	r0, #0
   12d18:	beq	12d8c <__assert_fail@plt+0x108c>
   12d1c:	cmn	r0, #1
   12d20:	bne	12d30 <__assert_fail@plt+0x1030>
   12d24:	ldr	r1, [r5]
   12d28:	cmp	r1, #34	; 0x22
   12d2c:	beq	12d98 <__assert_fail@plt+0x1098>
   12d30:	ldr	r1, [sp, #4]
   12d34:	ldrb	r1, [r1]
   12d38:	cmp	r1, #0
   12d3c:	movweq	r1, #49584	; 0xc1b0
   12d40:	movteq	r1, #3
   12d44:	streq	r0, [r1]
   12d48:	subeq	sp, fp, #16
   12d4c:	popeq	{r4, r5, r6, sl, fp, pc}
   12d50:	movw	r1, #39658	; 0x9aea
   12d54:	movt	r1, #2
   12d58:	mov	r0, #0
   12d5c:	mov	r2, #5
   12d60:	bl	11970 <dcgettext@plt>
   12d64:	mov	r5, r0
   12d68:	mov	r0, #0
   12d6c:	mov	r1, #8
   12d70:	mov	r2, r4
   12d74:	bl	18984 <__assert_fail@plt+0x6c84>
   12d78:	mov	r3, r0
   12d7c:	mov	r0, #1
   12d80:	mov	r1, #0
   12d84:	mov	r2, r5
   12d88:	bl	11a18 <error@plt>
   12d8c:	ldr	r1, [r5]
   12d90:	cmp	r1, #22
   12d94:	bne	12d30 <__assert_fail@plt+0x1030>
   12d98:	ldr	r5, [r5]
   12d9c:	movw	r1, #39658	; 0x9aea
   12da0:	movt	r1, #2
   12da4:	mov	r0, #0
   12da8:	mov	r2, #5
   12dac:	bl	11970 <dcgettext@plt>
   12db0:	mov	r6, r0
   12db4:	mov	r0, #0
   12db8:	mov	r1, #8
   12dbc:	mov	r2, r4
   12dc0:	bl	18984 <__assert_fail@plt+0x6c84>
   12dc4:	mov	r3, r0
   12dc8:	mov	r0, #1
   12dcc:	mov	r1, r5
   12dd0:	mov	r2, r6
   12dd4:	bl	11a18 <error@plt>
   12dd8:	movw	r1, #39597	; 0x9aad
   12ddc:	movt	r1, #2
   12de0:	mov	r0, #0
   12de4:	mov	r2, #5
   12de8:	bl	11970 <dcgettext@plt>
   12dec:	mov	r2, r0
   12df0:	mov	r0, #1
   12df4:	mov	r1, #0
   12df8:	bl	11a18 <error@plt>
   12dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e00:	add	fp, sp, #28
   12e04:	sub	sp, sp, #4
   12e08:	vpush	{d8-d9}
   12e0c:	sub	sp, sp, #336	; 0x150
   12e10:	mov	r8, r2
   12e14:	mov	r5, r1
   12e18:	str	r0, [sp, #32]
   12e1c:	movw	r0, #49792	; 0xc280
   12e20:	movt	r0, #3
   12e24:	mov	r7, #0
   12e28:	str	r7, [r0]
   12e2c:	movw	r0, #49796	; 0xc284
   12e30:	movt	r0, #3
   12e34:	str	r7, [r0]
   12e38:	movw	r0, #49800	; 0xc288
   12e3c:	movt	r0, #3
   12e40:	str	r7, [r0]
   12e44:	movw	r0, #49804	; 0xc28c
   12e48:	movt	r0, #3
   12e4c:	strb	r7, [r0]
   12e50:	str	r7, [sp, #72]	; 0x48
   12e54:	str	r2, [sp, #68]	; 0x44
   12e58:	str	r7, [sp, #48]	; 0x30
   12e5c:	str	r7, [sp, #44]	; 0x2c
   12e60:	str	r3, [sp, #64]	; 0x40
   12e64:	mov	r0, #128	; 0x80
   12e68:	str	r0, [sp, #56]	; 0x38
   12e6c:	movw	sl, #49732	; 0xc244
   12e70:	movt	sl, #3
   12e74:	ldr	r9, [sl]
   12e78:	mov	r0, #128	; 0x80
   12e7c:	bl	195ac <__assert_fail@plt+0x78ac>
   12e80:	mov	r6, r0
   12e84:	str	r0, [sp, #52]	; 0x34
   12e88:	ldr	r3, [sp, #64]	; 0x40
   12e8c:	mov	r1, #1
   12e90:	mov	r2, #2
   12e94:	bl	119f4 <fread@plt>
   12e98:	mov	r4, r0
   12e9c:	str	r7, [sp, #36]	; 0x24
   12ea0:	ldr	r0, [sp, #68]	; 0x44
   12ea4:	add	r3, sp, #36	; 0x24
   12ea8:	mov	r1, r6
   12eac:	mov	r2, r4
   12eb0:	bl	135b4 <__assert_fail@plt+0x18b4>
   12eb4:	ldr	r6, [fp, #48]	; 0x30
   12eb8:	ldr	r1, [fp, #20]
   12ebc:	cmp	r1, #0
   12ec0:	orrne	r6, r6, #4194304	; 0x400000
   12ec4:	cmp	r0, #0
   12ec8:	beq	12f20 <__assert_fail@plt+0x1220>
   12ecc:	ldr	r7, [sp, #36]	; 0x24
   12ed0:	cmp	r7, #2
   12ed4:	blt	12f90 <__assert_fail@plt+0x1290>
   12ed8:	mov	r4, #0
   12edc:	movw	r1, #39708	; 0x9b1c
   12ee0:	movt	r1, #2
   12ee4:	mov	r0, #0
   12ee8:	mov	r2, #5
   12eec:	bl	11970 <dcgettext@plt>
   12ef0:	mov	r5, r0
   12ef4:	ldr	r2, [sp, #68]	; 0x44
   12ef8:	mov	r0, #0
   12efc:	mov	r1, #8
   12f00:	bl	18984 <__assert_fail@plt+0x6c84>
   12f04:	mov	r3, r0
   12f08:	str	r7, [sp]
   12f0c:	mov	r0, #0
   12f10:	mov	r1, #0
   12f14:	mov	r2, r5
   12f18:	bl	11a18 <error@plt>
   12f1c:	b	134e4 <__assert_fail@plt+0x17e4>
   12f20:	add	r0, sp, #40	; 0x28
   12f24:	mov	r7, #0
   12f28:	mov	r1, #10
   12f2c:	mov	r2, #0
   12f30:	bl	13880 <__assert_fail@plt+0x1b80>
   12f34:	ldr	r0, [sp, #52]	; 0x34
   12f38:	ldr	r3, [sp, #64]	; 0x40
   12f3c:	add	r0, r0, r4
   12f40:	rsb	r2, r4, #10
   12f44:	mov	r1, #1
   12f48:	bl	119f4 <fread@plt>
   12f4c:	add	sl, r0, r4
   12f50:	ldr	r0, [sp, #52]	; 0x34
   12f54:	mov	r1, sl
   12f58:	bl	138cc <__assert_fail@plt+0x1bcc>
   12f5c:	cmp	r0, #0
   12f60:	beq	13000 <__assert_fail@plt+0x1300>
   12f64:	movw	r0, #14044	; 0x36dc
   12f68:	movt	r0, #1
   12f6c:	mov	r1, #0
   12f70:	bl	1368c <__assert_fail@plt+0x198c>
   12f74:	movw	r0, #40017	; 0x9c51
   12f78:	movt	r0, #2
   12f7c:	str	r0, [sp, #8]
   12f80:	str	r9, [sp, #16]
   12f84:	mov	r0, #0
   12f88:	str	r0, [sp, #12]
   12f8c:	b	13094 <__assert_fail@plt+0x1394>
   12f90:	cmp	r7, #1
   12f94:	bne	12fd0 <__assert_fail@plt+0x12d0>
   12f98:	ldr	r0, [sl]
   12f9c:	cmp	r0, #2
   12fa0:	bne	134f8 <__assert_fail@plt+0x17f8>
   12fa4:	mov	r4, #0
   12fa8:	movw	r1, #39781	; 0x9b65
   12fac:	movt	r1, #2
   12fb0:	mov	r0, #0
   12fb4:	mov	r2, #5
   12fb8:	bl	11970 <dcgettext@plt>
   12fbc:	mov	r2, r0
   12fc0:	mov	r0, #0
   12fc4:	mov	r1, #0
   12fc8:	bl	11a18 <error@plt>
   12fcc:	b	134e4 <__assert_fail@plt+0x17e4>
   12fd0:	str	r9, [sp, #16]
   12fd4:	movw	r0, #14044	; 0x36dc
   12fd8:	movt	r0, #1
   12fdc:	mov	r1, #0
   12fe0:	str	r1, [sp, #12]
   12fe4:	mov	r1, #0
   12fe8:	bl	1368c <__assert_fail@plt+0x198c>
   12fec:	mov	r7, #1
   12ff0:	movw	r0, #40009	; 0x9c49
   12ff4:	movt	r0, #2
   12ff8:	str	r0, [sp, #8]
   12ffc:	b	13094 <__assert_fail@plt+0x1394>
   13000:	add	r4, sp, #40	; 0x28
   13004:	mov	r7, #0
   13008:	mov	r0, r4
   1300c:	mov	r1, #256	; 0x100
   13010:	mov	r2, #0
   13014:	bl	13880 <__assert_fail@plt+0x1b80>
   13018:	cmp	sl, #256	; 0x100
   1301c:	bge	13044 <__assert_fail@plt+0x1344>
   13020:	ldr	r0, [sp, #52]	; 0x34
   13024:	ldr	r3, [sp, #64]	; 0x40
   13028:	add	r0, r0, sl
   1302c:	rsb	r2, sl, #256	; 0x100
   13030:	mov	r1, #1
   13034:	bl	119f4 <fread@plt>
   13038:	add	r0, r0, sl
   1303c:	cmp	r0, #256	; 0x100
   13040:	bne	13578 <__assert_fail@plt+0x1878>
   13044:	ldr	r0, [sp, #52]	; 0x34
   13048:	ldrb	r1, [r0, r7, lsl #1]!
   1304c:	add	r2, r4, r7
   13050:	strb	r1, [r2, #36]	; 0x24
   13054:	ldrb	r0, [r0, #1]
   13058:	strb	r0, [r2, #164]	; 0xa4
   1305c:	add	r7, r7, #1
   13060:	cmp	r7, #128	; 0x80
   13064:	bne	13044 <__assert_fail@plt+0x1344>
   13068:	movw	r0, #14596	; 0x3904
   1306c:	movt	r0, #1
   13070:	mov	r7, #0
   13074:	mov	r1, #0
   13078:	bl	1368c <__assert_fail@plt+0x198c>
   1307c:	mov	r0, #1
   13080:	str	r0, [sp, #12]
   13084:	movw	r0, #40085	; 0x9c95
   13088:	movt	r0, #2
   1308c:	str	r0, [sp, #8]
   13090:	str	r9, [sp, #16]
   13094:	str	r7, [sp, #20]
   13098:	ldr	r0, [fp, #28]
   1309c:	cmp	r0, #0
   130a0:	beq	130b4 <__assert_fail@plt+0x13b4>
   130a4:	movw	r0, #15048	; 0x3ac8
   130a8:	movt	r0, #1
   130ac:	mov	r1, #0
   130b0:	bl	1368c <__assert_fail@plt+0x198c>
   130b4:	ldr	r0, [sp, #32]
   130b8:	cmp	r0, #1
   130bc:	blt	131fc <__assert_fail@plt+0x14fc>
   130c0:	movw	r0, #15476	; 0x3c74
   130c4:	movt	r0, #1
   130c8:	movw	r2, #15512	; 0x3c98
   130cc:	movt	r2, #1
   130d0:	ldr	r1, [fp, #20]
   130d4:	cmp	r1, #0
   130d8:	movne	r2, r0
   130dc:	str	r2, [sp, #28]
   130e0:	movw	r0, #15292	; 0x3bbc
   130e4:	movt	r0, #1
   130e8:	movw	r1, #15384	; 0x3c18
   130ec:	movt	r1, #1
   130f0:	movne	r1, r0
   130f4:	str	r1, [sp, #24]
   130f8:	vmov.i32	q4, #0	; 0x00000000
   130fc:	mov	r4, #0
   13100:	ldr	r7, [sp, #32]
   13104:	b	13130 <__assert_fail@plt+0x1430>
   13108:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   1310c:	cmp	r0, #1
   13110:	ldr	r0, [sp, #28]
   13114:	ldr	r1, [sp, #24]
   13118:	moveq	r0, r1
   1311c:	mov	r1, r8
   13120:	bl	1368c <__assert_fail@plt+0x198c>
   13124:	add	r5, r5, #4
   13128:	subs	r7, r7, #1
   1312c:	beq	131fc <__assert_fail@plt+0x14fc>
   13130:	movw	r0, #49804	; 0xc28c
   13134:	movt	r0, #3
   13138:	mov	r1, #1
   1313c:	strb	r1, [r0]
   13140:	ldr	r8, [r5]
   13144:	ldr	r0, [fp, #44]	; 0x2c
   13148:	cmp	r0, #0
   1314c:	beq	131c8 <__assert_fail@plt+0x14c8>
   13150:	mov	r0, #32
   13154:	bl	195ac <__assert_fail@plt+0x78ac>
   13158:	mov	r9, r0
   1315c:	add	r0, r0, #16
   13160:	vst1.32	{d8-d9}, [r0]
   13164:	mov	sl, r9
   13168:	mov	r0, #20
   1316c:	vst1.32	{d8-d9}, [sl], r0
   13170:	mov	r0, r6
   13174:	bl	1a648 <__assert_fail@plt+0x8948>
   13178:	mov	r0, #100	; 0x64
   1317c:	str	r0, [r9, #4]
   13180:	mov	r0, #100	; 0x64
   13184:	bl	195ac <__assert_fail@plt+0x78ac>
   13188:	str	r0, [r9]
   1318c:	str	r4, [sl]
   13190:	str	r6, [r9, #12]
   13194:	str	r4, [r9, #16]
   13198:	mov	r0, r8
   1319c:	bl	11af0 <strlen@plt>
   131a0:	mov	r1, r0
   131a4:	mov	r0, r8
   131a8:	mov	r2, r9
   131ac:	bl	1a3e0 <__assert_fail@plt+0x86e0>
   131b0:	cmp	r0, #0
   131b4:	bne	13560 <__assert_fail@plt+0x1860>
   131b8:	movw	r0, #15080	; 0x3ae8
   131bc:	movt	r0, #1
   131c0:	mov	r1, r9
   131c4:	b	13120 <__assert_fail@plt+0x1420>
   131c8:	mov	r0, r8
   131cc:	bl	13b3c <__assert_fail@plt+0x1e3c>
   131d0:	cmp	r0, #0
   131d4:	beq	13108 <__assert_fail@plt+0x1408>
   131d8:	ldr	r0, [fp, #20]
   131dc:	cmp	r0, #0
   131e0:	beq	131f0 <__assert_fail@plt+0x14f0>
   131e4:	movw	r0, #15196	; 0x3b5c
   131e8:	movt	r0, #1
   131ec:	b	1311c <__assert_fail@plt+0x141c>
   131f0:	movw	r0, #15244	; 0x3b8c
   131f4:	movt	r0, #1
   131f8:	b	1311c <__assert_fail@plt+0x141c>
   131fc:	movw	r0, #49796	; 0xc284
   13200:	movt	r0, #3
   13204:	ldr	r4, [r0]
   13208:	ldr	r0, [sp, #16]
   1320c:	cmp	r0, #2
   13210:	beq	1324c <__assert_fail@plt+0x154c>
   13214:	cmp	r0, #1
   13218:	bne	13288 <__assert_fail@plt+0x1588>
   1321c:	mov	r0, #1
   13220:	movw	r1, #49804	; 0xc28c
   13224:	movt	r1, #3
   13228:	strb	r0, [r1]
   1322c:	movw	r0, #49740	; 0xc24c
   13230:	movt	r0, #3
   13234:	ldrb	r1, [r0]
   13238:	movw	r2, #15596	; 0x3cec
   1323c:	movt	r2, #1
   13240:	movw	r0, #15548	; 0x3cbc
   13244:	movt	r0, #1
   13248:	b	13278 <__assert_fail@plt+0x1578>
   1324c:	mov	r0, #1
   13250:	movw	r1, #49804	; 0xc28c
   13254:	movt	r1, #3
   13258:	strb	r0, [r1]
   1325c:	movw	r0, #49740	; 0xc24c
   13260:	movt	r0, #3
   13264:	ldrb	r1, [r0]
   13268:	movw	r2, #15692	; 0x3d4c
   1326c:	movt	r2, #1
   13270:	movw	r0, #15644	; 0x3d1c
   13274:	movt	r0, #1
   13278:	cmp	r1, #0
   1327c:	movne	r0, r2
   13280:	mov	r1, #0
   13284:	bl	1368c <__assert_fail@plt+0x198c>
   13288:	ldr	r0, [fp, #36]	; 0x24
   1328c:	cmp	r0, #0
   13290:	beq	132a8 <__assert_fail@plt+0x15a8>
   13294:	movw	r0, #15740	; 0x3d7c
   13298:	movt	r0, #1
   1329c:	movw	r1, #49744	; 0xc250
   132a0:	movt	r1, #3
   132a4:	bl	1368c <__assert_fail@plt+0x198c>
   132a8:	ldr	r5, [fp, #32]
   132ac:	ldr	r0, [fp, #24]
   132b0:	cmp	r0, #0
   132b4:	ldr	r6, [sp, #20]
   132b8:	beq	132e8 <__assert_fail@plt+0x15e8>
   132bc:	movw	r0, #49728	; 0xc240
   132c0:	movt	r0, #3
   132c4:	ldrb	r1, [r0]
   132c8:	movw	r2, #16016	; 0x3e90
   132cc:	movt	r2, #1
   132d0:	movw	r0, #16128	; 0x3f00
   132d4:	movt	r0, #1
   132d8:	cmp	r1, #0
   132dc:	movne	r0, r2
   132e0:	mov	r1, #0
   132e4:	bl	1368c <__assert_fail@plt+0x198c>
   132e8:	movw	r1, #16248	; 0x3f78
   132ec:	movt	r1, #1
   132f0:	movw	r0, #16192	; 0x3f40
   132f4:	movt	r0, #1
   132f8:	cmp	r5, #0
   132fc:	moveq	r0, r1
   13300:	movw	r8, #49712	; 0xc230
   13304:	movt	r8, #3
   13308:	mov	r1, r8
   1330c:	bl	1368c <__assert_fail@plt+0x198c>
   13310:	ldr	r0, [sp, #32]
   13314:	cmp	r0, #2
   13318:	blt	1334c <__assert_fail@plt+0x164c>
   1331c:	ldr	r1, [fp, #40]	; 0x28
   13320:	ldr	r0, [r4, #8]
   13324:	movw	r2, #49800	; 0xc288
   13328:	movt	r2, #3
   1332c:	str	r0, [r2]
   13330:	movw	r2, #16376	; 0x3ff8
   13334:	movt	r2, #1
   13338:	movw	r0, #16280	; 0x3f98
   1333c:	movt	r0, #1
   13340:	cmp	r1, #0
   13344:	moveq	r0, r2
   13348:	b	13354 <__assert_fail@plt+0x1654>
   1334c:	movw	r0, #16472	; 0x4058
   13350:	movt	r0, #1
   13354:	movw	r5, #49808	; 0xc290
   13358:	movt	r5, #3
   1335c:	str	r0, [r5]
   13360:	ldr	r0, [fp, #36]	; 0x24
   13364:	cmp	r0, #0
   13368:	beq	1338c <__assert_fail@plt+0x168c>
   1336c:	movw	r1, #40089	; 0x9c99
   13370:	movt	r1, #2
   13374:	mov	r0, #0
   13378:	mov	r2, #5
   1337c:	bl	11970 <dcgettext@plt>
   13380:	ldr	r1, [sp, #68]	; 0x44
   13384:	ldr	r2, [sp, #8]
   13388:	bl	118a4 <printf@plt>
   1338c:	ldr	r0, [sp, #64]	; 0x40
   13390:	bl	11cd0 <getc@plt>
   13394:	str	r0, [sp, #40]	; 0x28
   13398:	cmp	r6, #0
   1339c:	cmnne	r0, #1
   133a0:	beq	133b4 <__assert_fail@plt+0x16b4>
   133a4:	ldr	r1, [sp, #64]	; 0x40
   133a8:	bl	11b14 <ungetc@plt>
   133ac:	mov	r0, #0
   133b0:	str	r0, [sp, #40]	; 0x28
   133b4:	ldr	r9, [fp, #12]
   133b8:	ldr	r4, [fp, #8]
   133bc:	ldr	r6, [fp, #16]
   133c0:	add	r7, sp, #40	; 0x28
   133c4:	ldr	r0, [sp, #40]	; 0x28
   133c8:	cmn	r0, #1
   133cc:	beq	133e4 <__assert_fail@plt+0x16e4>
   133d0:	ldr	r1, [r5]
   133d4:	mov	r0, r7
   133d8:	blx	r1
   133dc:	cmp	r0, #8
   133e0:	bne	133c4 <__assert_fail@plt+0x16c4>
   133e4:	ldr	r0, [fp, #36]	; 0x24
   133e8:	cmp	r0, #0
   133ec:	beq	13498 <__assert_fail@plt+0x1798>
   133f0:	ldr	r0, [sp, #12]
   133f4:	cmp	r0, #0
   133f8:	beq	1347c <__assert_fail@plt+0x177c>
   133fc:	movw	r1, #40123	; 0x9cbb
   13400:	movt	r1, #2
   13404:	mov	r0, #0
   13408:	mov	r2, #5
   1340c:	bl	11970 <dcgettext@plt>
   13410:	mov	r7, r0
   13414:	movw	r1, #40178	; 0x9cf2
   13418:	movt	r1, #2
   1341c:	mov	r0, #0
   13420:	mov	r2, #5
   13424:	bl	11970 <dcgettext@plt>
   13428:	mov	r1, r0
   1342c:	ldr	r0, [sp, #72]	; 0x48
   13430:	cmp	r0, #2
   13434:	beq	13454 <__assert_fail@plt+0x1754>
   13438:	cmp	r0, #1
   1343c:	bne	13464 <__assert_fail@plt+0x1764>
   13440:	movw	r0, #45108	; 0xb034
   13444:	movt	r0, #2
   13448:	mov	r1, r7
   1344c:	bl	118a4 <printf@plt>
   13450:	b	1347c <__assert_fail@plt+0x177c>
   13454:	movw	r0, #45108	; 0xb034
   13458:	movt	r0, #2
   1345c:	bl	118a4 <printf@plt>
   13460:	b	1347c <__assert_fail@plt+0x177c>
   13464:	movw	r1, #40230	; 0x9d26
   13468:	movt	r1, #2
   1346c:	mov	r0, #0
   13470:	mov	r2, #5
   13474:	bl	11970 <dcgettext@plt>
   13478:	bl	118a4 <printf@plt>
   1347c:	orrs	r0, r4, r9
   13480:	cmpeq	r6, #0
   13484:	beq	13498 <__assert_fail@plt+0x1798>
   13488:	ldr	r0, [sp, #32]
   1348c:	mov	r1, r4
   13490:	mov	r2, r6
   13494:	bl	14078 <__assert_fail@plt+0x2378>
   13498:	ldr	r0, [sp, #64]	; 0x40
   1349c:	bl	11904 <ferror@plt>
   134a0:	cmp	r0, #0
   134a4:	beq	134e0 <__assert_fail@plt+0x17e0>
   134a8:	bl	11b20 <__errno_location@plt>
   134ac:	ldr	r5, [r0]
   134b0:	ldr	r2, [sp, #68]	; 0x44
   134b4:	mov	r4, #0
   134b8:	mov	r0, #0
   134bc:	mov	r1, #8
   134c0:	bl	18984 <__assert_fail@plt+0x6c84>
   134c4:	mov	r3, r0
   134c8:	movw	r2, #45108	; 0xb034
   134cc:	movt	r2, #2
   134d0:	mov	r0, #0
   134d4:	mov	r1, r5
   134d8:	bl	11a18 <error@plt>
   134dc:	b	134e4 <__assert_fail@plt+0x17e4>
   134e0:	ldr	r4, [r8, #8]
   134e4:	mov	r0, r4
   134e8:	sub	sp, fp, #48	; 0x30
   134ec:	vpop	{d8-d9}
   134f0:	add	sp, sp, #4
   134f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134f8:	ldr	r0, [fp, #36]	; 0x24
   134fc:	ldr	r1, [fp, #24]
   13500:	orrs	r0, r0, r1
   13504:	cmpne	r9, #1
   13508:	bne	13518 <__assert_fail@plt+0x1818>
   1350c:	mov	r0, #1
   13510:	str	r0, [sp, #16]
   13514:	b	12fd4 <__assert_fail@plt+0x12d4>
   13518:	mov	r0, #1
   1351c:	str	r0, [sp, #16]
   13520:	movw	r1, #39953	; 0x9c11
   13524:	movt	r1, #2
   13528:	mov	r0, #0
   1352c:	mov	r2, #5
   13530:	bl	11970 <dcgettext@plt>
   13534:	mov	r4, r0
   13538:	ldr	r2, [sp, #68]	; 0x44
   1353c:	mov	r0, #0
   13540:	mov	r1, #8
   13544:	bl	18984 <__assert_fail@plt+0x6c84>
   13548:	mov	r3, r0
   1354c:	mov	r0, #0
   13550:	mov	r1, #0
   13554:	mov	r2, r4
   13558:	bl	11a18 <error@plt>
   1355c:	b	12fd4 <__assert_fail@plt+0x12d4>
   13560:	mov	r3, r0
   13564:	movw	r2, #45108	; 0xb034
   13568:	movt	r2, #2
   1356c:	mov	r0, #1
   13570:	mov	r1, #0
   13574:	bl	11a18 <error@plt>
   13578:	movw	r1, #40030	; 0x9c5e
   1357c:	movt	r1, #2
   13580:	mov	r0, #0
   13584:	mov	r2, #5
   13588:	bl	11970 <dcgettext@plt>
   1358c:	mov	r4, r0
   13590:	mov	r0, #0
   13594:	mov	r1, #8
   13598:	mov	r2, r8
   1359c:	bl	18984 <__assert_fail@plt+0x6c84>
   135a0:	mov	r3, r0
   135a4:	mov	r0, #1
   135a8:	mov	r1, #0
   135ac:	mov	r2, r4
   135b0:	bl	11a18 <error@plt>
   135b4:	push	{r4, r5, r6, r7, fp, lr}
   135b8:	add	fp, sp, #16
   135bc:	sub	sp, sp, #8
   135c0:	cmp	r2, #3
   135c4:	bcs	1366c <__assert_fail@plt+0x196c>
   135c8:	mov	r4, #0
   135cc:	cmp	r2, #2
   135d0:	bne	13660 <__assert_fail@plt+0x1960>
   135d4:	mov	r5, r1
   135d8:	mov	r6, r0
   135dc:	ldrb	r0, [r1, #1]
   135e0:	cmp	r0, #0
   135e4:	bne	13660 <__assert_fail@plt+0x1960>
   135e8:	mov	r7, r3
   135ec:	bl	11ab4 <__ctype_b_loc@plt>
   135f0:	ldrb	r1, [r5]
   135f4:	ldr	r0, [r0]
   135f8:	add	r0, r0, r1, lsl #1
   135fc:	ldrb	r0, [r0, #1]
   13600:	tst	r0, #8
   13604:	beq	13660 <__assert_fail@plt+0x1960>
   13608:	sub	r0, r1, #48	; 0x30
   1360c:	str	r0, [r7]
   13610:	mov	r4, #1
   13614:	cmp	r0, #2
   13618:	blt	13660 <__assert_fail@plt+0x1960>
   1361c:	movw	r1, #40372	; 0x9db4
   13620:	movt	r1, #2
   13624:	mov	r0, #0
   13628:	mov	r2, #5
   1362c:	bl	11970 <dcgettext@plt>
   13630:	mov	r7, r0
   13634:	mov	r0, #0
   13638:	mov	r1, #8
   1363c:	mov	r2, r6
   13640:	bl	18984 <__assert_fail@plt+0x6c84>
   13644:	mov	r3, r0
   13648:	ldrb	r0, [r5, #1]
   1364c:	str	r0, [sp]
   13650:	mov	r0, #0
   13654:	mov	r1, #0
   13658:	mov	r2, r7
   1365c:	bl	11a18 <error@plt>
   13660:	mov	r0, r4
   13664:	sub	sp, fp, #16
   13668:	pop	{r4, r5, r6, r7, fp, pc}
   1366c:	movw	r0, #40288	; 0x9d60
   13670:	movt	r0, #2
   13674:	movw	r1, #38757	; 0x9765
   13678:	movt	r1, #2
   1367c:	movw	r3, #40297	; 0x9d69
   13680:	movt	r3, #2
   13684:	movw	r2, #935	; 0x3a7
   13688:	bl	11d00 <__assert_fail@plt>
   1368c:	push	{r4, r5, fp, lr}
   13690:	add	fp, sp, #8
   13694:	mov	r4, r1
   13698:	mov	r5, r0
   1369c:	mov	r0, #12
   136a0:	bl	195ac <__assert_fail@plt+0x78ac>
   136a4:	mov	r1, #0
   136a8:	str	r5, [r0]
   136ac:	str	r4, [r0, #4]
   136b0:	str	r1, [r0, #8]
   136b4:	movw	r1, #49796	; 0xc284
   136b8:	movt	r1, #3
   136bc:	ldr	r2, [r1]
   136c0:	movw	r3, #49792	; 0xc280
   136c4:	movt	r3, #3
   136c8:	cmp	r2, #0
   136cc:	addne	r3, r2, #8
   136d0:	str	r0, [r3]
   136d4:	str	r0, [r1]
   136d8:	pop	{r4, r5, fp, pc}
   136dc:	push	{r4, r5, fp, lr}
   136e0:	add	fp, sp, #8
   136e4:	mov	r4, r0
   136e8:	ldr	r0, [r0]
   136ec:	cmp	r0, #128	; 0x80
   136f0:	bne	13700 <__assert_fail@plt+0x1a00>
   136f4:	ldr	r0, [r4, #24]
   136f8:	bl	143e0 <__assert_fail@plt+0x26e0>
   136fc:	b	13710 <__assert_fail@plt+0x1a10>
   13700:	blt	13710 <__assert_fail@plt+0x1a10>
   13704:	sub	r1, r0, #256	; 0x100
   13708:	ldr	r0, [r4, #4]
   1370c:	b	13714 <__assert_fail@plt+0x1a14>
   13710:	ldr	r1, [r4, #4]
   13714:	adds	r3, r1, r0
   13718:	str	r3, [r4, #4]
   1371c:	bmi	13804 <__assert_fail@plt+0x1b04>
   13720:	ldr	r0, [r4, #8]
   13724:	cmp	r3, r0
   13728:	bgt	13804 <__assert_fail@plt+0x1b04>
   1372c:	ldr	r2, [r4, #24]
   13730:	add	r0, r4, #12
   13734:	add	r1, r4, #16
   13738:	bl	1440c <__assert_fail@plt+0x270c>
   1373c:	cmp	r0, #1
   13740:	blt	137fc <__assert_fail@plt+0x1afc>
   13744:	mov	r5, r0
   13748:	ldr	r0, [r4, #24]
   1374c:	bl	11cd0 <getc@plt>
   13750:	str	r0, [r4]
   13754:	ldr	r0, [r4, #4]
   13758:	add	r0, r0, r5
   1375c:	subs	r0, r0, #1
   13760:	str	r0, [r4, #8]
   13764:	bgt	137a4 <__assert_fail@plt+0x1aa4>
   13768:	movw	r1, #40509	; 0x9e3d
   1376c:	movt	r1, #2
   13770:	mov	r0, #0
   13774:	mov	r2, #5
   13778:	bl	11970 <dcgettext@plt>
   1377c:	mov	r5, r0
   13780:	ldr	r2, [r4, #28]
   13784:	mov	r0, #0
   13788:	mov	r1, #8
   1378c:	bl	18984 <__assert_fail@plt+0x6c84>
   13790:	mov	r3, r0
   13794:	mov	r0, #1
   13798:	mov	r1, #0
   1379c:	mov	r2, r5
   137a0:	bl	11a18 <error@plt>
   137a4:	ldr	r2, [r4, #8]
   137a8:	ldr	r0, [r4, #12]
   137ac:	add	r1, r0, r2
   137b0:	ldrb	r3, [r1, #-1]
   137b4:	cmp	r3, #0
   137b8:	beq	13840 <__assert_fail@plt+0x1b40>
   137bc:	ldrb	r2, [r0, r2]
   137c0:	cmp	r2, #0
   137c4:	bne	13860 <__assert_fail@plt+0x1b60>
   137c8:	ldrb	r1, [r1, #1]
   137cc:	cmp	r1, #0
   137d0:	streq	r0, [r4, #20]
   137d4:	moveq	r0, #1
   137d8:	popeq	{r4, r5, fp, pc}
   137dc:	movw	r0, #40633	; 0x9eb9
   137e0:	movt	r0, #2
   137e4:	movw	r1, #38757	; 0x9765
   137e8:	movt	r1, #2
   137ec:	movw	r3, #40563	; 0x9e73
   137f0:	movt	r3, #2
   137f4:	movw	r2, #570	; 0x23a
   137f8:	bl	11d00 <__assert_fail@plt>
   137fc:	mov	r0, #8
   13800:	pop	{r4, r5, fp, pc}
   13804:	movw	r1, #40509	; 0x9e3d
   13808:	movt	r1, #2
   1380c:	mov	r0, #0
   13810:	mov	r2, #5
   13814:	bl	11970 <dcgettext@plt>
   13818:	mov	r5, r0
   1381c:	ldr	r2, [r4, #28]
   13820:	mov	r0, #0
   13824:	mov	r1, #8
   13828:	bl	18984 <__assert_fail@plt+0x6c84>
   1382c:	mov	r3, r0
   13830:	mov	r0, #1
   13834:	mov	r1, #0
   13838:	mov	r2, r5
   1383c:	bl	11a18 <error@plt>
   13840:	movw	r0, #40550	; 0x9e66
   13844:	movt	r0, #2
   13848:	movw	r1, #38757	; 0x9765
   1384c:	movt	r1, #2
   13850:	movw	r3, #40563	; 0x9e73
   13854:	movt	r3, #2
   13858:	mov	r2, #568	; 0x238
   1385c:	bl	11d00 <__assert_fail@plt>
   13860:	movw	r0, #40620	; 0x9eac
   13864:	movt	r0, #2
   13868:	movw	r1, #38757	; 0x9765
   1386c:	movt	r1, #2
   13870:	movw	r3, #40563	; 0x9e73
   13874:	movt	r3, #2
   13878:	movw	r2, #569	; 0x239
   1387c:	bl	11d00 <__assert_fail@plt>
   13880:	push	{r4, sl, fp, lr}
   13884:	add	fp, sp, #8
   13888:	mov	r4, r0
   1388c:	mvn	r0, r1
   13890:	cmp	r0, r2
   13894:	bcc	138c4 <__assert_fail@plt+0x1bc4>
   13898:	add	r0, r2, r1
   1389c:	mov	r1, r4
   138a0:	ldr	r2, [r1, #16]!
   138a4:	cmp	r2, r0
   138a8:	popcs	{r4, sl, fp, pc}
   138ac:	str	r0, [r4, #16]
   138b0:	ldr	r0, [r4, #12]
   138b4:	mov	r2, #1
   138b8:	bl	19670 <__assert_fail@plt+0x7970>
   138bc:	str	r0, [r4, #12]
   138c0:	pop	{r4, sl, fp, pc}
   138c4:	mov	r0, r4
   138c8:	bl	144dc <__assert_fail@plt+0x27dc>
   138cc:	mov	r2, #0
   138d0:	cmp	r1, #10
   138d4:	bcc	138fc <__assert_fail@plt+0x1bfc>
   138d8:	push	{fp, lr}
   138dc:	mov	fp, sp
   138e0:	movw	r1, #42089	; 0xa469
   138e4:	movt	r1, #2
   138e8:	mov	r2, #10
   138ec:	bl	11ad8 <bcmp@plt>
   138f0:	clz	r0, r0
   138f4:	lsr	r2, r0, #5
   138f8:	pop	{fp, lr}
   138fc:	mov	r0, r2
   13900:	bx	lr
   13904:	push	{r4, r5, r6, sl, fp, lr}
   13908:	add	fp, sp, #16
   1390c:	mov	r4, r0
   13910:	ldr	r0, [r0]
   13914:	cmn	r0, #1
   13918:	beq	1398c <__assert_fail@plt+0x1c8c>
   1391c:	cmp	r0, #30
   13920:	bne	13998 <__assert_fail@plt+0x1c98>
   13924:	ldr	r5, [r4, #4]
   13928:	ldr	r2, [r4, #8]
   1392c:	ldr	r0, [r4, #24]
   13930:	ldr	r1, [r4, #28]
   13934:	sub	r3, r5, #14
   13938:	str	r3, [r4, #4]
   1393c:	cmp	r3, #0
   13940:	subgt	r2, r2, r3
   13944:	add	r3, r4, #32
   13948:	bl	14560 <__assert_fail@plt+0x2860>
   1394c:	rsb	r1, r5, #14
   13950:	cmp	r0, r1
   13954:	blt	13a88 <__assert_fail@plt+0x1d88>
   13958:	ldr	r1, [r4, #4]
   1395c:	add	r0, r1, r0
   13960:	str	r0, [r4, #4]
   13964:	cmn	r0, #1
   13968:	bgt	139b0 <__assert_fail@plt+0x1cb0>
   1396c:	movw	r0, #40849	; 0x9f91
   13970:	movt	r0, #2
   13974:	movw	r1, #38757	; 0x9765
   13978:	movt	r1, #2
   1397c:	movw	r3, #40797	; 0x9f5d
   13980:	movt	r3, #2
   13984:	mov	r2, #480	; 0x1e0
   13988:	bl	11d00 <__assert_fail@plt>
   1398c:	mov	r6, #8
   13990:	mov	r0, r6
   13994:	pop	{r4, r5, r6, sl, fp, pc}
   13998:	ldr	r1, [r4, #4]
   1399c:	add	r0, r0, r1
   139a0:	sub	r0, r0, #14
   139a4:	str	r0, [r4, #4]
   139a8:	cmn	r0, #1
   139ac:	ble	13aa8 <__assert_fail@plt+0x1da8>
   139b0:	ldr	r5, [r4, #4]
   139b4:	ldr	r0, [r4, #24]
   139b8:	bl	11cd0 <getc@plt>
   139bc:	str	r0, [r4]
   139c0:	cmp	r0, #31
   139c4:	bge	13a2c <__assert_fail@plt+0x1d2c>
   139c8:	b	13a54 <__assert_fail@plt+0x1d54>
   139cc:	mov	r6, #2
   139d0:	mov	r0, r4
   139d4:	mov	r1, r5
   139d8:	mov	r2, #2
   139dc:	bl	13880 <__assert_fail@plt+0x1b80>
   139e0:	ldr	r0, [r4]
   139e4:	ldr	r1, [r4, #12]
   139e8:	and	r0, r0, #127	; 0x7f
   139ec:	str	r0, [r4]
   139f0:	add	r0, r4, r0
   139f4:	ldrb	r0, [r0, #36]	; 0x24
   139f8:	strb	r0, [r1, r5]
   139fc:	ldr	r0, [r4]
   13a00:	add	r0, r4, r0
   13a04:	ldrb	r0, [r0, #164]	; 0xa4
   13a08:	add	r1, r5, #1
   13a0c:	ldr	r2, [r4, #12]
   13a10:	strb	r0, [r2, r1]
   13a14:	ldr	r0, [r4, #24]
   13a18:	bl	11cd0 <getc@plt>
   13a1c:	str	r0, [r4]
   13a20:	add	r5, r5, r6
   13a24:	cmp	r0, #30
   13a28:	ble	13a54 <__assert_fail@plt+0x1d54>
   13a2c:	cmp	r0, #127	; 0x7f
   13a30:	bgt	139cc <__assert_fail@plt+0x1ccc>
   13a34:	mov	r6, #1
   13a38:	mov	r0, r4
   13a3c:	mov	r1, r5
   13a40:	mov	r2, #1
   13a44:	bl	13880 <__assert_fail@plt+0x1b80>
   13a48:	ldr	r0, [r4]
   13a4c:	mov	r1, r5
   13a50:	b	13a0c <__assert_fail@plt+0x1d0c>
   13a54:	mov	r6, #1
   13a58:	mov	r0, r4
   13a5c:	mov	r1, r5
   13a60:	mov	r2, #1
   13a64:	bl	13880 <__assert_fail@plt+0x1b80>
   13a68:	ldr	r0, [r4, #12]
   13a6c:	mov	r1, #0
   13a70:	strb	r1, [r0, r5]
   13a74:	str	r5, [r4, #8]
   13a78:	ldr	r0, [r4, #12]
   13a7c:	str	r0, [r4, #20]
   13a80:	mov	r0, r6
   13a84:	pop	{r4, r5, r6, sl, fp, pc}
   13a88:	movw	r0, #40782	; 0x9f4e
   13a8c:	movt	r0, #2
   13a90:	movw	r1, #38757	; 0x9765
   13a94:	movt	r1, #2
   13a98:	movw	r3, #40797	; 0x9f5d
   13a9c:	movt	r3, #2
   13aa0:	movw	r2, #478	; 0x1de
   13aa4:	bl	11d00 <__assert_fail@plt>
   13aa8:	movw	r0, #40849	; 0x9f91
   13aac:	movt	r0, #2
   13ab0:	movw	r1, #38757	; 0x9765
   13ab4:	movt	r1, #2
   13ab8:	movw	r3, #40797	; 0x9f5d
   13abc:	movt	r3, #2
   13ac0:	movw	r2, #485	; 0x1e5
   13ac4:	bl	11d00 <__assert_fail@plt>
   13ac8:	push	{r4, sl, fp, lr}
   13acc:	add	fp, sp, #8
   13ad0:	mov	r4, r0
   13ad4:	ldr	r0, [r0, #12]
   13ad8:	bl	14e74 <__assert_fail@plt+0x3174>
   13adc:	str	r0, [r4, #20]
   13ae0:	mov	r0, #1
   13ae4:	pop	{r4, sl, fp, pc}
   13ae8:	push	{r4, r5, fp, lr}
   13aec:	add	fp, sp, #8
   13af0:	sub	sp, sp, #8
   13af4:	mov	r4, r1
   13af8:	ldr	r5, [r0, #20]
   13afc:	mov	r0, r5
   13b00:	bl	11af0 <strlen@plt>
   13b04:	mov	r2, r0
   13b08:	mov	r0, #0
   13b0c:	str	r2, [sp]
   13b10:	str	r0, [sp, #4]
   13b14:	mov	r0, r4
   13b18:	mov	r1, r5
   13b1c:	mov	r3, #0
   13b20:	bl	1b898 <__assert_fail@plt+0x9b98>
   13b24:	mov	r1, #2
   13b28:	cmp	r0, #0
   13b2c:	movwmi	r1, #4
   13b30:	mov	r0, r1
   13b34:	sub	sp, fp, #8
   13b38:	pop	{r4, r5, fp, pc}
   13b3c:	push	{fp, lr}
   13b40:	mov	fp, sp
   13b44:	movw	r1, #40870	; 0x9fa6
   13b48:	movt	r1, #2
   13b4c:	bl	11c64 <strpbrk@plt>
   13b50:	cmp	r0, #0
   13b54:	movwne	r0, #1
   13b58:	pop	{fp, pc}
   13b5c:	push	{fp, lr}
   13b60:	mov	fp, sp
   13b64:	mov	r2, r1
   13b68:	ldr	r1, [r0, #20]
   13b6c:	mov	r0, r2
   13b70:	mov	r2, #16
   13b74:	bl	11a24 <fnmatch@plt>
   13b78:	mov	r1, #4
   13b7c:	cmp	r0, #0
   13b80:	movweq	r1, #2
   13b84:	mov	r0, r1
   13b88:	pop	{fp, pc}
   13b8c:	push	{fp, lr}
   13b90:	mov	fp, sp
   13b94:	mov	r2, r1
   13b98:	ldr	r1, [r0, #20]
   13b9c:	mov	r0, r2
   13ba0:	mov	r2, #0
   13ba4:	bl	11a24 <fnmatch@plt>
   13ba8:	mov	r1, #4
   13bac:	cmp	r0, #0
   13bb0:	movweq	r1, #2
   13bb4:	mov	r0, r1
   13bb8:	pop	{fp, pc}
   13bbc:	push	{r4, r5, fp, lr}
   13bc0:	add	fp, sp, #8
   13bc4:	mov	r4, r1
   13bc8:	mov	r5, r0
   13bcc:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   13bd0:	cmp	r0, #1
   13bd4:	bne	13bf8 <__assert_fail@plt+0x1ef8>
   13bd8:	ldr	r0, [r5, #20]
   13bdc:	mov	r1, r4
   13be0:	bl	270d0 <__assert_fail@plt+0x153d0>
   13be4:	mov	r1, #2
   13be8:	cmp	r0, #0
   13bec:	movweq	r1, #4
   13bf0:	mov	r0, r1
   13bf4:	pop	{r4, r5, fp, pc}
   13bf8:	movw	r0, #40876	; 0x9fac
   13bfc:	movt	r0, #2
   13c00:	movw	r1, #38757	; 0x9765
   13c04:	movt	r1, #2
   13c08:	movw	r3, #40892	; 0x9fbc
   13c0c:	movt	r3, #2
   13c10:	movw	r2, #714	; 0x2ca
   13c14:	bl	11d00 <__assert_fail@plt>
   13c18:	push	{r4, r5, fp, lr}
   13c1c:	add	fp, sp, #8
   13c20:	mov	r4, r1
   13c24:	mov	r5, r0
   13c28:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   13c2c:	cmp	r0, #1
   13c30:	bne	13c54 <__assert_fail@plt+0x1f54>
   13c34:	ldr	r0, [r5, #20]
   13c38:	mov	r1, r4
   13c3c:	bl	27d60 <__assert_fail@plt+0x16060>
   13c40:	mov	r1, #2
   13c44:	cmp	r0, #0
   13c48:	movweq	r1, #4
   13c4c:	mov	r0, r1
   13c50:	pop	{r4, r5, fp, pc}
   13c54:	movw	r0, #40876	; 0x9fac
   13c58:	movt	r0, #2
   13c5c:	movw	r1, #38757	; 0x9765
   13c60:	movt	r1, #2
   13c64:	movw	r3, #40965	; 0xa005
   13c68:	movt	r3, #2
   13c6c:	movw	r2, #690	; 0x2b2
   13c70:	bl	11d00 <__assert_fail@plt>
   13c74:	push	{fp, lr}
   13c78:	mov	fp, sp
   13c7c:	ldr	r0, [r0, #20]
   13c80:	bl	15b48 <__assert_fail@plt+0x3e48>
   13c84:	mov	r1, #2
   13c88:	cmp	r0, #0
   13c8c:	movweq	r1, #4
   13c90:	mov	r0, r1
   13c94:	pop	{fp, pc}
   13c98:	push	{fp, lr}
   13c9c:	mov	fp, sp
   13ca0:	ldr	r0, [r0, #20]
   13ca4:	bl	1683c <__assert_fail@plt+0x4b3c>
   13ca8:	mov	r1, #2
   13cac:	cmp	r0, #0
   13cb0:	movweq	r1, #4
   13cb4:	mov	r0, r1
   13cb8:	pop	{fp, pc}
   13cbc:	push	{fp, lr}
   13cc0:	mov	fp, sp
   13cc4:	sub	sp, sp, #104	; 0x68
   13cc8:	ldr	r0, [r0, #12]
   13ccc:	mov	r1, sp
   13cd0:	bl	29604 <__assert_fail@plt+0x17904>
   13cd4:	mov	r1, #4
   13cd8:	cmp	r0, #0
   13cdc:	movweq	r1, #1
   13ce0:	mov	r0, r1
   13ce4:	mov	sp, fp
   13ce8:	pop	{fp, pc}
   13cec:	push	{fp, lr}
   13cf0:	mov	fp, sp
   13cf4:	sub	sp, sp, #104	; 0x68
   13cf8:	ldr	r0, [r0, #12]
   13cfc:	mov	r1, sp
   13d00:	bl	29624 <__assert_fail@plt+0x17924>
   13d04:	mov	r1, #4
   13d08:	cmp	r0, #0
   13d0c:	movweq	r1, #1
   13d10:	mov	r0, r1
   13d14:	mov	sp, fp
   13d18:	pop	{fp, pc}
   13d1c:	push	{fp, lr}
   13d20:	mov	fp, sp
   13d24:	sub	sp, sp, #104	; 0x68
   13d28:	ldr	r0, [r0, #12]
   13d2c:	mov	r1, sp
   13d30:	bl	29604 <__assert_fail@plt+0x17904>
   13d34:	mov	r1, #1
   13d38:	cmp	r0, #0
   13d3c:	movweq	r1, #4
   13d40:	mov	r0, r1
   13d44:	mov	sp, fp
   13d48:	pop	{fp, pc}
   13d4c:	push	{fp, lr}
   13d50:	mov	fp, sp
   13d54:	sub	sp, sp, #104	; 0x68
   13d58:	ldr	r0, [r0, #12]
   13d5c:	mov	r1, sp
   13d60:	bl	29624 <__assert_fail@plt+0x17924>
   13d64:	mov	r1, #1
   13d68:	cmp	r0, #0
   13d6c:	movweq	r1, #4
   13d70:	mov	r0, r1
   13d74:	mov	sp, fp
   13d78:	pop	{fp, pc}
   13d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d80:	add	fp, sp, #28
   13d84:	sub	sp, sp, #4
   13d88:	mov	r9, r1
   13d8c:	ldr	r5, [r0, #12]
   13d90:	mov	r0, r5
   13d94:	bl	11af0 <strlen@plt>
   13d98:	ldr	r1, [r9, #8]!
   13d9c:	adds	r1, r1, #1
   13da0:	str	r1, [r9]
   13da4:	ldmib	r9, {r1, r2, r3}
   13da8:	adc	r1, r1, #0
   13dac:	str	r1, [r9, #4]
   13db0:	adds	r0, r2, r0
   13db4:	str	r0, [r9, #8]
   13db8:	adc	r0, r3, #0
   13dbc:	str	r0, [r9, #12]
   13dc0:	ldrb	r1, [r5]
   13dc4:	cmp	r1, #0
   13dc8:	beq	13e84 <__assert_fail@plt+0x2184>
   13dcc:	add	r5, r5, #1
   13dd0:	mov	r6, #0
   13dd4:	mov	r8, #1
   13dd8:	mov	r4, #0
   13ddc:	mov	sl, #0
   13de0:	b	13df8 <__assert_fail@plt+0x20f8>
   13de4:	ldrb	r1, [r5], #1
   13de8:	cmp	r1, #0
   13dec:	mov	r6, r0
   13df0:	mov	r4, r2
   13df4:	beq	13e3c <__assert_fail@plt+0x213c>
   13df8:	sxtb	r0, r1
   13dfc:	cmp	r0, #0
   13e00:	movwmi	sl, #1
   13e04:	uxtb	r7, r1
   13e08:	cmp	r7, #10
   13e0c:	mov	r2, #1
   13e10:	mov	r0, #1
   13e14:	beq	13de4 <__assert_fail@plt+0x20e4>
   13e18:	bl	11ab4 <__ctype_b_loc@plt>
   13e1c:	ldr	r0, [r0]
   13e20:	add	r0, r0, r7, lsl #1
   13e24:	ldrb	r0, [r0, #1]
   13e28:	tst	r0, #32
   13e2c:	movne	r4, r8
   13e30:	mov	r2, r4
   13e34:	mov	r0, r6
   13e38:	b	13de4 <__assert_fail@plt+0x20e4>
   13e3c:	cmp	sl, #0
   13e40:	beq	13e54 <__assert_fail@plt+0x2154>
   13e44:	ldrd	r4, [r9, #32]
   13e48:	adds	r4, r4, #1
   13e4c:	adc	r5, r5, #0
   13e50:	strd	r4, [r9, #32]
   13e54:	cmp	r2, #0
   13e58:	beq	13e6c <__assert_fail@plt+0x216c>
   13e5c:	ldrd	r2, [r9, #16]
   13e60:	adds	r2, r2, #1
   13e64:	adc	r3, r3, #0
   13e68:	strd	r2, [r9, #16]
   13e6c:	cmp	r0, #0
   13e70:	beq	13e84 <__assert_fail@plt+0x2184>
   13e74:	ldrd	r0, [r9, #24]
   13e78:	adds	r0, r0, #1
   13e7c:	adc	r1, r1, #0
   13e80:	strd	r0, [r9, #24]
   13e84:	mov	r0, #1
   13e88:	sub	sp, fp, #28
   13e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e90:	push	{fp, lr}
   13e94:	mov	fp, sp
   13e98:	sub	sp, sp, #8
   13e9c:	movw	r1, #49741	; 0xc24d
   13ea0:	movt	r1, #3
   13ea4:	ldrb	r2, [r1]
   13ea8:	movw	r1, #49708	; 0xc22c
   13eac:	movt	r1, #3
   13eb0:	ldr	r1, [r1]
   13eb4:	movw	r3, #49692	; 0xc21c
   13eb8:	movt	r3, #3
   13ebc:	ldr	ip, [r3]
   13ec0:	ldr	r0, [r0, #12]
   13ec4:	str	r0, [sp]
   13ec8:	movw	r3, #45108	; 0xb034
   13ecc:	movt	r3, #2
   13ed0:	mov	r0, ip
   13ed4:	bl	1479c <__assert_fail@plt+0x2a9c>
   13ed8:	movw	r0, #49736	; 0xc248
   13edc:	movt	r0, #3
   13ee0:	ldrb	r1, [r0]
   13ee4:	mov	r0, #10
   13ee8:	cmp	r1, #0
   13eec:	movwne	r0, #0
   13ef0:	bl	11b68 <putchar@plt>
   13ef4:	mov	r0, #1
   13ef8:	mov	sp, fp
   13efc:	pop	{fp, pc}
   13f00:	push	{fp, lr}
   13f04:	mov	fp, sp
   13f08:	movw	r1, #49692	; 0xc21c
   13f0c:	movt	r1, #3
   13f10:	ldr	r1, [r1]
   13f14:	ldr	r0, [r0, #12]
   13f18:	bl	11cac <fputs@plt>
   13f1c:	movw	r0, #49736	; 0xc248
   13f20:	movt	r0, #3
   13f24:	ldrb	r1, [r0]
   13f28:	mov	r0, #10
   13f2c:	cmp	r1, #0
   13f30:	movwne	r0, #0
   13f34:	bl	11b68 <putchar@plt>
   13f38:	mov	r0, #1
   13f3c:	pop	{fp, pc}
   13f40:	push	{r4, r5, fp, lr}
   13f44:	add	fp, sp, #8
   13f48:	ldr	ip, [r1]
   13f4c:	ldr	r3, [r1, #4]
   13f50:	ldr	r0, [r1, #8]
   13f54:	ldr	r2, [r1, #12]
   13f58:	adds	r4, r0, #1
   13f5c:	adc	r5, r2, #0
   13f60:	strd	r4, [r1, #8]
   13f64:	mov	r0, #8
   13f68:	subs	r1, r4, ip
   13f6c:	sbcs	r1, r5, r3
   13f70:	movwcc	r0, #1
   13f74:	pop	{r4, r5, fp, pc}
   13f78:	ldr	r0, [r1, #8]
   13f7c:	ldr	r3, [r1, #12]
   13f80:	adds	r0, r0, #1
   13f84:	adc	r3, r3, #0
   13f88:	str	r0, [r1, #8]
   13f8c:	str	r3, [r1, #12]
   13f90:	mov	r0, #1
   13f94:	bx	lr
   13f98:	push	{r4, r5, fp, lr}
   13f9c:	add	fp, sp, #8
   13fa0:	mov	r4, r0
   13fa4:	movw	r5, #49800	; 0xc288
   13fa8:	movt	r5, #3
   13fac:	ldr	r3, [r5]
   13fb0:	movw	r0, #49792	; 0xc280
   13fb4:	movt	r0, #3
   13fb8:	ldr	r0, [r0]
   13fbc:	mov	r1, #3
   13fc0:	mov	r2, r4
   13fc4:	bl	14510 <__assert_fail@plt+0x2810>
   13fc8:	cmp	r0, #1
   13fcc:	movweq	r0, #4
   13fd0:	tst	r0, #12
   13fd4:	popne	{r4, r5, fp, pc}
   13fd8:	ldr	r0, [r5]
   13fdc:	mov	r1, #1
   13fe0:	mov	r2, r4
   13fe4:	mov	r3, #0
   13fe8:	bl	14510 <__assert_fail@plt+0x2810>
   13fec:	cmp	r0, #1
   13ff0:	movweq	r0, #2
   13ff4:	pop	{r4, r5, fp, pc}
   13ff8:	push	{r4, r5, fp, lr}
   13ffc:	add	fp, sp, #8
   14000:	mov	r4, r0
   14004:	movw	r5, #49800	; 0xc288
   14008:	movt	r5, #3
   1400c:	ldr	r3, [r5]
   14010:	movw	r0, #49792	; 0xc280
   14014:	movt	r0, #3
   14018:	ldr	r0, [r0]
   1401c:	mov	r1, #5
   14020:	mov	r2, r4
   14024:	bl	14510 <__assert_fail@plt+0x2810>
   14028:	cmp	r0, #1
   1402c:	movweq	r0, #4
   14030:	tst	r0, #12
   14034:	popne	{r4, r5, fp, pc}
   14038:	ldr	r0, [r5]
   1403c:	mov	r1, #1
   14040:	mov	r2, r4
   14044:	mov	r3, #0
   14048:	bl	14510 <__assert_fail@plt+0x2810>
   1404c:	cmp	r0, #1
   14050:	movweq	r0, #2
   14054:	pop	{r4, r5, fp, pc}
   14058:	mov	r2, r0
   1405c:	movw	r0, #49792	; 0xc280
   14060:	movt	r0, #3
   14064:	ldr	r0, [r0]
   14068:	mov	r1, #3
   1406c:	mov	r3, #0
   14070:	b	14510 <__assert_fail@plt+0x2810>
   14074:	nop	{0}
   14078:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1407c:	add	fp, sp, #28
   14080:	sub	sp, sp, #588	; 0x24c
   14084:	sub	sp, sp, #2048	; 0x800
   14088:	mov	r8, r1
   1408c:	str	r0, [sp, #20]
   14090:	cmp	r2, #0
   14094:	beq	1413c <__assert_fail@plt+0x243c>
   14098:	mov	r7, r2
   1409c:	mov	r0, r2
   140a0:	bl	11a84 <localtime@plt>
   140a4:	cmp	r0, #0
   140a8:	beq	1413c <__assert_fail@plt+0x243c>
   140ac:	mov	r6, r0
   140b0:	sub	r0, fp, #684	; 0x2ac
   140b4:	movw	r2, #41040	; 0xa050
   140b8:	movt	r2, #2
   140bc:	mov	r1, #20
   140c0:	mov	r3, r6
   140c4:	bl	11a6c <strftime@plt>
   140c8:	cmp	r0, #19
   140cc:	bne	14358 <__assert_fail@plt+0x2658>
   140d0:	ldrb	r0, [fp, #-665]	; 0xfffffd67
   140d4:	cmp	r0, #0
   140d8:	bne	14378 <__assert_fail@plt+0x2678>
   140dc:	ldrb	r0, [fp, #-666]	; 0xfffffd66
   140e0:	cmp	r0, #0
   140e4:	beq	14398 <__assert_fail@plt+0x2698>
   140e8:	movw	r1, #41197	; 0xa0ed
   140ec:	movt	r1, #2
   140f0:	mov	r0, #0
   140f4:	mov	r2, #5
   140f8:	bl	11970 <dcgettext@plt>
   140fc:	ldr	r2, [r7, #4]
   14100:	sub	r5, fp, #684	; 0x2ac
   14104:	mov	r1, r5
   14108:	bl	118a4 <printf@plt>
   1410c:	movw	r2, #41236	; 0xa114
   14110:	movt	r2, #2
   14114:	mov	r0, r5
   14118:	mov	r1, #20
   1411c:	mov	r3, r6
   14120:	bl	11a6c <strftime@plt>
   14124:	cmp	r0, #5
   14128:	bne	143b8 <__assert_fail@plt+0x26b8>
   1412c:	movw	r0, #43439	; 0xa9af
   14130:	movt	r0, #2
   14134:	sub	r1, fp, #684	; 0x2ac
   14138:	bl	118a4 <printf@plt>
   1413c:	mov	r0, #5
   14140:	str	r0, [sp]
   14144:	mov	r7, #0
   14148:	movw	r1, #41252	; 0xa124
   1414c:	movt	r1, #2
   14150:	movw	r2, #41283	; 0xa143
   14154:	movt	r2, #2
   14158:	mov	r0, #0
   1415c:	mov	r3, r8
   14160:	bl	11cf4 <dcngettext@plt>
   14164:	mov	r5, r0
   14168:	mov	r9, #1
   1416c:	str	r9, [sp]
   14170:	stmib	sp, {r7, r9}
   14174:	str	r7, [sp, #12]
   14178:	sub	r6, fp, #684	; 0x2ac
   1417c:	mov	r0, r8
   14180:	mov	r1, #0
   14184:	mov	r2, r6
   14188:	mov	r3, #0
   1418c:	bl	15040 <__assert_fail@plt+0x3340>
   14190:	mov	r1, r0
   14194:	mov	r0, r5
   14198:	bl	118a4 <printf@plt>
   1419c:	movw	r0, #49804	; 0xc28c
   141a0:	movt	r0, #3
   141a4:	ldrb	r0, [r0]
   141a8:	movw	r2, #41315	; 0xa163
   141ac:	movt	r2, #2
   141b0:	movw	r1, #41339	; 0xa17b
   141b4:	movt	r1, #2
   141b8:	cmp	r0, #0
   141bc:	movne	r1, r2
   141c0:	mov	r0, #0
   141c4:	mov	r2, #5
   141c8:	bl	11970 <dcgettext@plt>
   141cc:	mov	r5, r0
   141d0:	movw	sl, #49744	; 0xc250
   141d4:	movt	sl, #3
   141d8:	ldrd	r0, [sl, #8]
   141dc:	str	r9, [sp]
   141e0:	stmib	sp, {r7, r9}
   141e4:	str	r7, [sp, #12]
   141e8:	mov	r2, r6
   141ec:	mov	r3, #0
   141f0:	bl	15040 <__assert_fail@plt+0x3340>
   141f4:	mov	r1, r0
   141f8:	mov	r0, r5
   141fc:	bl	118a4 <printf@plt>
   14200:	movw	r1, #41358	; 0xa18e
   14204:	movt	r1, #2
   14208:	mov	r0, #0
   1420c:	mov	r2, #5
   14210:	bl	11970 <dcgettext@plt>
   14214:	str	r0, [sp, #16]
   14218:	ldrd	r0, [sl, #16]
   1421c:	str	r9, [sp]
   14220:	stmib	sp, {r7, r9}
   14224:	str	r7, [sp, #12]
   14228:	mov	r2, r6
   1422c:	mov	r3, #0
   14230:	bl	15040 <__assert_fail@plt+0x3340>
   14234:	mov	r6, r0
   14238:	ldrd	r0, [sl, #24]
   1423c:	str	r9, [sp]
   14240:	stmib	sp, {r7, r9}
   14244:	str	r7, [sp, #12]
   14248:	add	r2, sp, #1328	; 0x530
   1424c:	mov	r3, #0
   14250:	bl	15040 <__assert_fail@plt+0x3340>
   14254:	mov	r5, r0
   14258:	ldrd	r0, [sl, #32]
   1425c:	str	r9, [sp]
   14260:	stmib	sp, {r7, r9}
   14264:	str	r7, [sp, #12]
   14268:	add	r2, sp, #676	; 0x2a4
   1426c:	mov	r3, #0
   14270:	bl	15040 <__assert_fail@plt+0x3340>
   14274:	mov	r4, r0
   14278:	ldrd	r0, [sl, #40]	; 0x28
   1427c:	str	r9, [sp]
   14280:	stmib	sp, {r7, r9}
   14284:	str	r7, [sp, #12]
   14288:	add	r2, sp, #24
   1428c:	mov	r3, #0
   14290:	bl	15040 <__assert_fail@plt+0x3340>
   14294:	str	r0, [sp]
   14298:	ldr	r0, [sp, #16]
   1429c:	mov	r1, r6
   142a0:	mov	r2, r5
   142a4:	mov	r3, r4
   142a8:	bl	118a4 <printf@plt>
   142ac:	ldr	r0, [sp, #20]
   142b0:	cmp	r0, #0
   142b4:	bne	14348 <__assert_fail@plt+0x2648>
   142b8:	movw	r0, #49804	; 0xc28c
   142bc:	movt	r0, #3
   142c0:	ldrb	r0, [r0]
   142c4:	cmp	r0, #1
   142c8:	bne	142d8 <__assert_fail@plt+0x25d8>
   142cc:	movw	r1, #41538	; 0xa242
   142d0:	movt	r1, #2
   142d4:	b	14338 <__assert_fail@plt+0x2638>
   142d8:	ldrd	r0, [sl, #16]
   142dc:	orrs	r0, r0, r1
   142e0:	beq	14330 <__assert_fail@plt+0x2630>
   142e4:	movw	r1, #41626	; 0xa29a
   142e8:	movt	r1, #2
   142ec:	mov	r0, #0
   142f0:	mov	r2, #5
   142f4:	bl	11970 <dcgettext@plt>
   142f8:	mov	r4, r0
   142fc:	ldrd	r0, [sl, #16]
   14300:	bl	2935c <__assert_fail@plt+0x1765c>
   14304:	vldr	d16, [pc, #204]	; 143d8 <__assert_fail@plt+0x26d8>
   14308:	vmov	s0, r8
   1430c:	vcvt.f64.u32	d17, s0
   14310:	vmov	d18, r0, r1
   14314:	vsub.f64	d17, d18, d17
   14318:	vmul.f64	d16, d17, d16
   1431c:	vdiv.f64	d16, d16, d18
   14320:	vmov	r2, r3, d16
   14324:	mov	r0, r4
   14328:	bl	118a4 <printf@plt>
   1432c:	b	14348 <__assert_fail@plt+0x2648>
   14330:	movw	r1, #41672	; 0xa2c8
   14334:	movt	r1, #2
   14338:	mov	r0, #0
   1433c:	mov	r2, #5
   14340:	bl	11970 <dcgettext@plt>
   14344:	bl	118a4 <printf@plt>
   14348:	mov	r0, #10
   1434c:	bl	11b68 <putchar@plt>
   14350:	sub	sp, fp, #28
   14354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14358:	movw	r0, #41058	; 0xa062
   1435c:	movt	r0, #2
   14360:	movw	r1, #38757	; 0x9765
   14364:	movt	r1, #2
   14368:	movw	r3, #41084	; 0xa07c
   1436c:	movt	r3, #2
   14370:	movw	r2, #845	; 0x34d
   14374:	bl	11d00 <__assert_fail@plt>
   14378:	movw	r0, #41139	; 0xa0b3
   1437c:	movt	r0, #2
   14380:	movw	r1, #38757	; 0x9765
   14384:	movt	r1, #2
   14388:	movw	r3, #41084	; 0xa07c
   1438c:	movt	r3, #2
   14390:	movw	r2, #846	; 0x34e
   14394:	bl	11d00 <__assert_fail@plt>
   14398:	movw	r0, #41168	; 0xa0d0
   1439c:	movt	r0, #2
   143a0:	movw	r1, #38757	; 0x9765
   143a4:	movt	r1, #2
   143a8:	movw	r3, #41084	; 0xa07c
   143ac:	movt	r3, #2
   143b0:	movw	r2, #847	; 0x34f
   143b4:	bl	11d00 <__assert_fail@plt>
   143b8:	movw	r0, #41239	; 0xa117
   143bc:	movt	r0, #2
   143c0:	movw	r1, #38757	; 0x9765
   143c4:	movt	r1, #2
   143c8:	movw	r3, #41084	; 0xa07c
   143cc:	movt	r3, #2
   143d0:	movw	r2, #851	; 0x353
   143d4:	bl	11d00 <__assert_fail@plt>
   143d8:	andeq	r0, r0, r0
   143dc:	subsmi	r0, r9, r0
   143e0:	push	{r4, r5, fp, lr}
   143e4:	add	fp, sp, #8
   143e8:	mov	r4, r0
   143ec:	bl	11b80 <fgetc@plt>
   143f0:	mov	r5, r0
   143f4:	mov	r0, r4
   143f8:	bl	11b80 <fgetc@plt>
   143fc:	uxtb	r0, r0
   14400:	orr	r0, r0, r5, lsl #8
   14404:	sxth	r0, r0
   14408:	pop	{r4, r5, fp, pc}
   1440c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14410:	add	fp, sp, #24
   14414:	sub	sp, sp, #8
   14418:	mov	r5, r3
   1441c:	mov	r3, r2
   14420:	mov	r8, r1
   14424:	mov	r6, r0
   14428:	mov	r0, #0
   1442c:	str	r0, [sp, #4]
   14430:	str	r0, [sp]
   14434:	add	r0, sp, #4
   14438:	mov	r1, sp
   1443c:	mov	r2, #0
   14440:	bl	11c7c <getdelim@plt>
   14444:	mov	r4, r0
   14448:	cmp	r0, #0
   1444c:	bmi	144a8 <__assert_fail@plt+0x27a8>
   14450:	ldr	r0, [sp, #4]
   14454:	cmp	r0, #0
   14458:	beq	144bc <__assert_fail@plt+0x27bc>
   1445c:	add	r0, r4, r5
   14460:	add	r7, r0, #1
   14464:	ldr	r0, [r8]
   14468:	cmp	r7, r0
   1446c:	bls	1448c <__assert_fail@plt+0x278c>
   14470:	ldr	r0, [r6]
   14474:	mov	r1, r7
   14478:	bl	1a350 <__assert_fail@plt+0x8650>
   1447c:	cmp	r0, #0
   14480:	beq	144b4 <__assert_fail@plt+0x27b4>
   14484:	str	r7, [r8]
   14488:	str	r0, [r6]
   1448c:	ldr	r0, [r6]
   14490:	add	r0, r0, r5
   14494:	ldr	r1, [sp, #4]
   14498:	add	r2, r4, #1
   1449c:	bl	11928 <memcpy@plt>
   144a0:	ldr	r0, [sp, #4]
   144a4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   144a8:	mov	r0, r4
   144ac:	sub	sp, fp, #24
   144b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144b4:	mvn	r4, #0
   144b8:	b	144a8 <__assert_fail@plt+0x27a8>
   144bc:	movw	r0, #40646	; 0x9ec6
   144c0:	movt	r0, #2
   144c4:	movw	r1, #38757	; 0x9765
   144c8:	movt	r1, #2
   144cc:	movw	r3, #40656	; 0x9ed0
   144d0:	movt	r3, #2
   144d4:	mov	r2, #245	; 0xf5
   144d8:	bl	11d00 <__assert_fail@plt>
   144dc:	push	{fp, lr}
   144e0:	mov	fp, sp
   144e4:	mov	r4, r0
   144e8:	movw	r1, #40713	; 0x9f09
   144ec:	movt	r1, #2
   144f0:	mov	r0, #0
   144f4:	mov	r2, #5
   144f8:	bl	11970 <dcgettext@plt>
   144fc:	mov	r2, r0
   14500:	ldr	r3, [r4, #28]
   14504:	mov	r0, #1
   14508:	mov	r1, #0
   1450c:	bl	11a18 <error@plt>
   14510:	push	{r4, r5, r6, r7, fp, lr}
   14514:	add	fp, sp, #16
   14518:	mov	r4, r1
   1451c:	cmp	r0, r3
   14520:	cmpne	r4, #0
   14524:	bne	14530 <__assert_fail@plt+0x2830>
   14528:	mov	r0, r4
   1452c:	pop	{r4, r5, r6, r7, fp, pc}
   14530:	mov	r5, r3
   14534:	mov	r6, r2
   14538:	mov	r7, r0
   1453c:	ldr	r2, [r7]
   14540:	ldr	r1, [r7, #4]
   14544:	mov	r0, r6
   14548:	blx	r2
   1454c:	ldr	r7, [r7, #8]
   14550:	cmp	r7, r5
   14554:	andsne	r1, r0, r4
   14558:	bne	1453c <__assert_fail@plt+0x283c>
   1455c:	pop	{r4, r5, r6, r7, fp, pc}
   14560:	push	{r4, r5, r6, r7, fp, lr}
   14564:	add	fp, sp, #16
   14568:	sub	sp, sp, #8
   1456c:	mov	r6, r3
   14570:	mov	r7, r2
   14574:	mov	r4, r1
   14578:	mov	r5, r0
   1457c:	bl	11c40 <clearerr@plt>
   14580:	add	r0, sp, #4
   14584:	mov	r1, #4
   14588:	mov	r2, #1
   1458c:	mov	r3, r5
   14590:	bl	119f4 <fread@plt>
   14594:	cmp	r0, #1
   14598:	bne	145b8 <__assert_fail@plt+0x28b8>
   1459c:	add	r0, sp, #4
   145a0:	mov	r1, r7
   145a4:	mov	r2, r6
   145a8:	mov	r3, r4
   145ac:	bl	14634 <__assert_fail@plt+0x2934>
   145b0:	sub	sp, fp, #16
   145b4:	pop	{r4, r5, r6, r7, fp, pc}
   145b8:	mov	r0, #0
   145bc:	mov	r1, #8
   145c0:	mov	r2, r4
   145c4:	bl	18984 <__assert_fail@plt+0x6c84>
   145c8:	mov	r4, r0
   145cc:	mov	r0, r5
   145d0:	bl	11acc <feof@plt>
   145d4:	cmp	r0, #0
   145d8:	bne	1460c <__assert_fail@plt+0x290c>
   145dc:	bl	11b20 <__errno_location@plt>
   145e0:	ldr	r5, [r0]
   145e4:	movw	r1, #42120	; 0xa488
   145e8:	movt	r1, #2
   145ec:	mov	r0, #0
   145f0:	mov	r2, #5
   145f4:	bl	11970 <dcgettext@plt>
   145f8:	mov	r2, r0
   145fc:	mov	r0, #1
   14600:	mov	r1, r5
   14604:	mov	r3, r4
   14608:	bl	11a18 <error@plt>
   1460c:	movw	r1, #42099	; 0xa473
   14610:	movt	r1, #2
   14614:	mov	r0, #0
   14618:	mov	r2, #5
   1461c:	bl	11970 <dcgettext@plt>
   14620:	mov	r2, r0
   14624:	mov	r0, #1
   14628:	mov	r1, #0
   1462c:	mov	r3, r4
   14630:	bl	11a18 <error@plt>
   14634:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14638:	add	fp, sp, #24
   1463c:	mov	r8, r3
   14640:	mov	r4, r2
   14644:	mov	r6, r1
   14648:	ldr	r7, [r0]
   1464c:	mov	r0, r7
   14650:	bl	146e4 <__assert_fail@plt+0x29e4>
   14654:	mov	r5, r0
   14658:	ldr	r0, [r4]
   1465c:	cmp	r0, #2
   14660:	beq	146c0 <__assert_fail@plt+0x29c0>
   14664:	cmp	r0, #0
   14668:	bne	146c4 <__assert_fail@plt+0x29c4>
   1466c:	cmp	r7, r6
   14670:	ble	146cc <__assert_fail@plt+0x29cc>
   14674:	cmp	r5, r6
   14678:	bgt	146c4 <__assert_fail@plt+0x29c4>
   1467c:	movw	r1, #42149	; 0xa4a5
   14680:	movt	r1, #2
   14684:	mov	r0, #0
   14688:	mov	r2, #5
   1468c:	bl	11970 <dcgettext@plt>
   14690:	mov	r6, r0
   14694:	mov	r0, #0
   14698:	mov	r1, #8
   1469c:	mov	r2, r8
   146a0:	bl	18984 <__assert_fail@plt+0x6c84>
   146a4:	mov	r3, r0
   146a8:	mov	r0, #0
   146ac:	mov	r1, #0
   146b0:	mov	r2, r6
   146b4:	bl	11a18 <error@plt>
   146b8:	mov	r0, #2
   146bc:	str	r0, [r4]
   146c0:	mov	r7, r5
   146c4:	mov	r0, r7
   146c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146cc:	cmp	r5, r6
   146d0:	ble	146c4 <__assert_fail@plt+0x29c4>
   146d4:	mov	r0, #1
   146d8:	str	r0, [r4]
   146dc:	mov	r0, r7
   146e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146e4:	rev	r0, r0
   146e8:	bx	lr
   146ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   146f0:	add	fp, sp, #24
   146f4:	sub	sp, sp, #16
   146f8:	mov	r8, r0
   146fc:	movw	r0, #49688	; 0xc218
   14700:	movt	r0, #3
   14704:	ldr	r0, [r0]
   14708:	bl	1a184 <__assert_fail@plt+0x8484>
   1470c:	movw	r0, #49692	; 0xc21c
   14710:	movt	r0, #3
   14714:	ldr	r6, [r0]
   14718:	movw	r0, #49588	; 0xc1b4
   1471c:	movt	r0, #3
   14720:	ldr	r5, [r0]
   14724:	mov	r9, #0
   14728:	movw	r1, #42243	; 0xa503
   1472c:	movt	r1, #2
   14730:	mov	r0, #0
   14734:	mov	r2, #5
   14738:	bl	11970 <dcgettext@plt>
   1473c:	mov	r7, r0
   14740:	movw	r1, #42258	; 0xa512
   14744:	movt	r1, #2
   14748:	mov	r0, #0
   1474c:	mov	r2, #5
   14750:	bl	11970 <dcgettext@plt>
   14754:	mov	r4, r0
   14758:	movw	r1, #42273	; 0xa521
   1475c:	movt	r1, #2
   14760:	mov	r0, #0
   14764:	mov	r2, #5
   14768:	bl	11970 <dcgettext@plt>
   1476c:	str	r7, [sp]
   14770:	str	r4, [sp, #4]
   14774:	str	r0, [sp, #8]
   14778:	str	r9, [sp, #12]
   1477c:	movw	r2, #42229	; 0xa4f5
   14780:	movt	r2, #2
   14784:	mov	r0, r6
   14788:	mov	r1, r8
   1478c:	mov	r3, r5
   14790:	bl	194c0 <__assert_fail@plt+0x77c0>
   14794:	sub	sp, fp, #24
   14798:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1479c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147a0:	add	fp, sp, #28
   147a4:	sub	sp, sp, #12
   147a8:	sub	sp, sp, #8192	; 0x2000
   147ac:	mov	r9, r3
   147b0:	mov	sl, r0
   147b4:	ldr	r7, [fp, #8]
   147b8:	cmp	r2, #0
   147bc:	beq	1485c <__assert_fail@plt+0x2b5c>
   147c0:	mov	r8, r1
   147c4:	str	r1, [sp]
   147c8:	add	r4, sp, #8
   147cc:	mov	r0, r4
   147d0:	mov	r1, #8192	; 0x2000
   147d4:	mov	r2, r7
   147d8:	mvn	r3, #0
   147dc:	bl	175f8 <__assert_fail@plt+0x58f8>
   147e0:	mov	r5, r0
   147e4:	cmp	r0, #8192	; 0x2000
   147e8:	mov	r6, r4
   147ec:	bcc	14818 <__assert_fail@plt+0x2b18>
   147f0:	add	r4, r5, #1
   147f4:	mov	r0, r4
   147f8:	bl	195ac <__assert_fail@plt+0x78ac>
   147fc:	mov	r6, r0
   14800:	str	r8, [sp]
   14804:	mov	r1, r4
   14808:	add	r4, sp, #8
   1480c:	mov	r2, r7
   14810:	mvn	r3, #0
   14814:	bl	175f8 <__assert_fail@plt+0x58f8>
   14818:	mov	r0, r6
   1481c:	mov	r1, r5
   14820:	bl	14874 <__assert_fail@plt+0x2b74>
   14824:	mov	r1, #0
   14828:	strb	r1, [r6, r0]
   1482c:	mov	r0, sl
   14830:	mov	r1, r9
   14834:	mov	r2, r6
   14838:	bl	11b08 <fprintf@plt>
   1483c:	mov	r5, r0
   14840:	cmp	r6, r4
   14844:	beq	14850 <__assert_fail@plt+0x2b50>
   14848:	mov	r0, r6
   1484c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   14850:	mov	r0, r5
   14854:	sub	sp, fp, #28
   14858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1485c:	mov	r0, sl
   14860:	mov	r1, r9
   14864:	mov	r2, r7
   14868:	sub	sp, fp, #28
   1486c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14870:	b	11b08 <fprintf@plt>
   14874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14878:	add	fp, sp, #28
   1487c:	sub	sp, sp, #20
   14880:	mov	r5, r1
   14884:	mov	sl, r0
   14888:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   1488c:	cmp	r0, #1
   14890:	bhi	148a8 <__assert_fail@plt+0x2ba8>
   14894:	mov	r0, sl
   14898:	mov	r1, r5
   1489c:	sub	sp, fp, #28
   148a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148a4:	b	14b24 <__assert_fail@plt+0x2e24>
   148a8:	cmp	r5, #1
   148ac:	mov	r4, sl
   148b0:	blt	14b18 <__assert_fail@plt+0x2e18>
   148b4:	add	r6, sl, r5
   148b8:	mov	r3, #0
   148bc:	add	r8, sp, #4
   148c0:	add	r9, sp, #8
   148c4:	mov	r4, sl
   148c8:	mov	r7, sl
   148cc:	ldrb	r0, [r7]
   148d0:	sub	r1, r0, #32
   148d4:	cmp	r1, #94	; 0x5e
   148d8:	bhi	14a74 <__assert_fail@plt+0x2d74>
   148dc:	add	r2, pc, #0
   148e0:	ldr	pc, [r2, r1, lsl #2]
   148e4:	andeq	r4, r1, r0, ror #20
   148e8:	andeq	r4, r1, r0, ror #20
   148ec:	andeq	r4, r1, r0, ror #20
   148f0:	andeq	r4, r1, r0, ror #20
   148f4:	andeq	r4, r1, r4, ror sl
   148f8:	andeq	r4, r1, r0, ror #20
   148fc:	andeq	r4, r1, r0, ror #20
   14900:	andeq	r4, r1, r0, ror #20
   14904:	andeq	r4, r1, r0, ror #20
   14908:	andeq	r4, r1, r0, ror #20
   1490c:	andeq	r4, r1, r0, ror #20
   14910:	andeq	r4, r1, r0, ror #20
   14914:	andeq	r4, r1, r0, ror #20
   14918:	andeq	r4, r1, r0, ror #20
   1491c:	andeq	r4, r1, r0, ror #20
   14920:	andeq	r4, r1, r0, ror #20
   14924:	andeq	r4, r1, r0, ror #20
   14928:	andeq	r4, r1, r0, ror #20
   1492c:	andeq	r4, r1, r0, ror #20
   14930:	andeq	r4, r1, r0, ror #20
   14934:	andeq	r4, r1, r0, ror #20
   14938:	andeq	r4, r1, r0, ror #20
   1493c:	andeq	r4, r1, r0, ror #20
   14940:	andeq	r4, r1, r0, ror #20
   14944:	andeq	r4, r1, r0, ror #20
   14948:	andeq	r4, r1, r0, ror #20
   1494c:	andeq	r4, r1, r0, ror #20
   14950:	andeq	r4, r1, r0, ror #20
   14954:	andeq	r4, r1, r0, ror #20
   14958:	andeq	r4, r1, r0, ror #20
   1495c:	andeq	r4, r1, r0, ror #20
   14960:	andeq	r4, r1, r0, ror #20
   14964:	andeq	r4, r1, r4, ror sl
   14968:	andeq	r4, r1, r0, ror #20
   1496c:	andeq	r4, r1, r0, ror #20
   14970:	andeq	r4, r1, r0, ror #20
   14974:	andeq	r4, r1, r0, ror #20
   14978:	andeq	r4, r1, r0, ror #20
   1497c:	andeq	r4, r1, r0, ror #20
   14980:	andeq	r4, r1, r0, ror #20
   14984:	andeq	r4, r1, r0, ror #20
   14988:	andeq	r4, r1, r0, ror #20
   1498c:	andeq	r4, r1, r0, ror #20
   14990:	andeq	r4, r1, r0, ror #20
   14994:	andeq	r4, r1, r0, ror #20
   14998:	andeq	r4, r1, r0, ror #20
   1499c:	andeq	r4, r1, r0, ror #20
   149a0:	andeq	r4, r1, r0, ror #20
   149a4:	andeq	r4, r1, r0, ror #20
   149a8:	andeq	r4, r1, r0, ror #20
   149ac:	andeq	r4, r1, r0, ror #20
   149b0:	andeq	r4, r1, r0, ror #20
   149b4:	andeq	r4, r1, r0, ror #20
   149b8:	andeq	r4, r1, r0, ror #20
   149bc:	andeq	r4, r1, r0, ror #20
   149c0:	andeq	r4, r1, r0, ror #20
   149c4:	andeq	r4, r1, r0, ror #20
   149c8:	andeq	r4, r1, r0, ror #20
   149cc:	andeq	r4, r1, r0, ror #20
   149d0:	andeq	r4, r1, r0, ror #20
   149d4:	andeq	r4, r1, r0, ror #20
   149d8:	andeq	r4, r1, r0, ror #20
   149dc:	andeq	r4, r1, r0, ror #20
   149e0:	andeq	r4, r1, r0, ror #20
   149e4:	andeq	r4, r1, r4, ror sl
   149e8:	andeq	r4, r1, r0, ror #20
   149ec:	andeq	r4, r1, r0, ror #20
   149f0:	andeq	r4, r1, r0, ror #20
   149f4:	andeq	r4, r1, r0, ror #20
   149f8:	andeq	r4, r1, r0, ror #20
   149fc:	andeq	r4, r1, r0, ror #20
   14a00:	andeq	r4, r1, r0, ror #20
   14a04:	andeq	r4, r1, r0, ror #20
   14a08:	andeq	r4, r1, r0, ror #20
   14a0c:	andeq	r4, r1, r0, ror #20
   14a10:	andeq	r4, r1, r0, ror #20
   14a14:	andeq	r4, r1, r0, ror #20
   14a18:	andeq	r4, r1, r0, ror #20
   14a1c:	andeq	r4, r1, r0, ror #20
   14a20:	andeq	r4, r1, r0, ror #20
   14a24:	andeq	r4, r1, r0, ror #20
   14a28:	andeq	r4, r1, r0, ror #20
   14a2c:	andeq	r4, r1, r0, ror #20
   14a30:	andeq	r4, r1, r0, ror #20
   14a34:	andeq	r4, r1, r0, ror #20
   14a38:	andeq	r4, r1, r0, ror #20
   14a3c:	andeq	r4, r1, r0, ror #20
   14a40:	andeq	r4, r1, r0, ror #20
   14a44:	andeq	r4, r1, r0, ror #20
   14a48:	andeq	r4, r1, r0, ror #20
   14a4c:	andeq	r4, r1, r0, ror #20
   14a50:	andeq	r4, r1, r0, ror #20
   14a54:	andeq	r4, r1, r0, ror #20
   14a58:	andeq	r4, r1, r0, ror #20
   14a5c:	andeq	r4, r1, r0, ror #20
   14a60:	strb	r0, [r4], #1
   14a64:	add	r7, r7, #1
   14a68:	cmp	r7, r6
   14a6c:	bcc	148cc <__assert_fail@plt+0x2bcc>
   14a70:	b	14b18 <__assert_fail@plt+0x2e18>
   14a74:	str	r3, [sp, #12]
   14a78:	str	r3, [sp, #8]
   14a7c:	b	14a9c <__assert_fail@plt+0x2d9c>
   14a80:	mov	r0, #63	; 0x3f
   14a84:	strb	r0, [r4], #1
   14a88:	add	r7, r7, r5
   14a8c:	mov	r0, r9
   14a90:	bl	11958 <mbsinit@plt>
   14a94:	cmp	r0, #0
   14a98:	bne	14b0c <__assert_fail@plt+0x2e0c>
   14a9c:	sub	r2, r6, r7
   14aa0:	mov	r0, r8
   14aa4:	mov	r1, r7
   14aa8:	mov	r3, r9
   14aac:	bl	1a2ec <__assert_fail@plt+0x85ec>
   14ab0:	cmp	r0, #0
   14ab4:	beq	14ad0 <__assert_fail@plt+0x2dd0>
   14ab8:	mov	r5, r0
   14abc:	cmn	r0, #2
   14ac0:	beq	14af8 <__assert_fail@plt+0x2df8>
   14ac4:	cmn	r5, #1
   14ac8:	bne	14ad4 <__assert_fail@plt+0x2dd4>
   14acc:	b	14b00 <__assert_fail@plt+0x2e00>
   14ad0:	mov	r5, #1
   14ad4:	ldr	r0, [sp, #4]
   14ad8:	bl	118c8 <wcwidth@plt>
   14adc:	cmp	r0, #0
   14ae0:	bmi	14a80 <__assert_fail@plt+0x2d80>
   14ae4:	ldrb	r0, [r7], #1
   14ae8:	strb	r0, [r4], #1
   14aec:	subs	r5, r5, #1
   14af0:	bne	14ae4 <__assert_fail@plt+0x2de4>
   14af4:	b	14a8c <__assert_fail@plt+0x2d8c>
   14af8:	mov	r7, r6
   14afc:	b	14b04 <__assert_fail@plt+0x2e04>
   14b00:	add	r7, r7, #1
   14b04:	mov	r0, #63	; 0x3f
   14b08:	strb	r0, [r4], #1
   14b0c:	mov	r3, #0
   14b10:	cmp	r7, r6
   14b14:	bcc	148cc <__assert_fail@plt+0x2bcc>
   14b18:	sub	r0, r4, sl
   14b1c:	sub	sp, fp, #28
   14b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b28:	add	fp, sp, #24
   14b2c:	mov	r8, r1
   14b30:	cmp	r1, #1
   14b34:	blt	14b74 <__assert_fail@plt+0x2e74>
   14b38:	mov	r5, r0
   14b3c:	add	r7, r0, r8
   14b40:	bl	11ab4 <__ctype_b_loc@plt>
   14b44:	mov	r6, r0
   14b48:	mov	r9, #63	; 0x3f
   14b4c:	ldr	r4, [r6]
   14b50:	ldrb	r0, [r5]
   14b54:	bl	14b7c <__assert_fail@plt+0x2e7c>
   14b58:	add	r0, r4, r0, lsl #1
   14b5c:	ldrb	r0, [r0, #1]
   14b60:	tst	r0, #64	; 0x40
   14b64:	strbeq	r9, [r5]
   14b68:	add	r5, r5, #1
   14b6c:	cmp	r5, r7
   14b70:	bcc	14b4c <__assert_fail@plt+0x2e4c>
   14b74:	mov	r0, r8
   14b78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14b7c:	bx	lr
   14b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b84:	add	fp, sp, #28
   14b88:	sub	sp, sp, #12
   14b8c:	mov	r7, r0
   14b90:	mov	r4, #0
   14b94:	movw	sl, #42288	; 0xa530
   14b98:	movt	sl, #2
   14b9c:	mov	r6, #0
   14ba0:	ldr	r5, [sl, r4]
   14ba4:	mov	r0, r5
   14ba8:	mov	r1, r7
   14bac:	bl	11898 <strcmp@plt>
   14bb0:	cmp	r0, #0
   14bb4:	beq	14c74 <__assert_fail@plt+0x2f74>
   14bb8:	mov	r0, r5
   14bbc:	bl	18c28 <__assert_fail@plt+0x6f28>
   14bc0:	bl	11af0 <strlen@plt>
   14bc4:	add	r0, r6, r0
   14bc8:	add	r6, r0, #2
   14bcc:	add	r4, r4, #12
   14bd0:	cmp	r4, #156	; 0x9c
   14bd4:	bne	14ba0 <__assert_fail@plt+0x2ea0>
   14bd8:	str	r7, [sp, #8]
   14bdc:	add	r0, r6, #1
   14be0:	bl	195ac <__assert_fail@plt+0x78ac>
   14be4:	mov	r6, r0
   14be8:	mov	r4, #0
   14bec:	movw	r8, #8236	; 0x202c
   14bf0:	mov	r9, #0
   14bf4:	str	r0, [sp, #4]
   14bf8:	cmp	r9, #0
   14bfc:	strhne	r8, [r6]
   14c00:	strbne	r4, [r6, #2]!
   14c04:	ldr	r0, [sl, -r9]
   14c08:	bl	18c28 <__assert_fail@plt+0x6f28>
   14c0c:	mov	r7, r0
   14c10:	bl	11af0 <strlen@plt>
   14c14:	mov	r5, r0
   14c18:	add	r2, r0, #1
   14c1c:	mov	r0, r6
   14c20:	mov	r1, r7
   14c24:	bl	11928 <memcpy@plt>
   14c28:	add	r6, r6, r5
   14c2c:	sub	r9, r9, #12
   14c30:	cmn	r9, #156	; 0x9c
   14c34:	bne	14bf8 <__assert_fail@plt+0x2ef8>
   14c38:	movw	r1, #42447	; 0xa5cf
   14c3c:	movt	r1, #2
   14c40:	mov	r0, #0
   14c44:	mov	r2, #5
   14c48:	bl	11970 <dcgettext@plt>
   14c4c:	mov	r5, r0
   14c50:	ldr	r0, [sp, #8]
   14c54:	bl	18c28 <__assert_fail@plt+0x6f28>
   14c58:	mov	r3, r0
   14c5c:	ldr	r0, [sp, #4]
   14c60:	str	r0, [sp]
   14c64:	mov	r0, #1
   14c68:	mov	r1, #0
   14c6c:	mov	r2, r5
   14c70:	bl	11a18 <error@plt>
   14c74:	add	r0, sl, r4
   14c78:	ldr	r0, [r0, #8]
   14c7c:	sub	sp, fp, #28
   14c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c84:	mov	r1, r0
   14c88:	mov	r0, #0
   14c8c:	cmp	r1, #12
   14c90:	bxhi	lr
   14c94:	add	r0, r1, r1, lsl #1
   14c98:	movw	r1, #42288	; 0xa530
   14c9c:	movt	r1, #2
   14ca0:	ldr	r0, [r1, r0, lsl #2]
   14ca4:	bx	lr
   14ca8:	mov	r1, r0
   14cac:	mvn	r0, #0
   14cb0:	cmp	r1, #12
   14cb4:	bxhi	lr
   14cb8:	add	r0, r1, r1, lsl #1
   14cbc:	movw	r1, #42288	; 0xa530
   14cc0:	movt	r1, #2
   14cc4:	add	r0, r1, r0, lsl #2
   14cc8:	ldr	r0, [r0, #8]
   14ccc:	bx	lr
   14cd0:	mov	r1, r0
   14cd4:	mov	r0, #0
   14cd8:	cmp	r1, #12
   14cdc:	bxhi	lr
   14ce0:	add	r0, r1, r1, lsl #1
   14ce4:	movw	r1, #42288	; 0xa530
   14ce8:	movt	r1, #2
   14cec:	add	r0, r1, r0, lsl #2
   14cf0:	ldr	r0, [r0, #4]
   14cf4:	bx	lr
   14cf8:	push	{r4, sl, fp, lr}
   14cfc:	add	fp, sp, #8
   14d00:	mov	lr, r0
   14d04:	mvn	r0, #0
   14d08:	cmp	lr, #12
   14d0c:	pophi	{r4, sl, fp, pc}
   14d10:	cmp	lr, #0
   14d14:	beq	14d64 <__assert_fail@plt+0x3064>
   14d18:	add	r2, lr, lr, lsl #1
   14d1c:	movw	r3, #42288	; 0xa530
   14d20:	movt	r3, #2
   14d24:	add	r2, r3, r2, lsl #2
   14d28:	ldr	ip, [r2, #8]
   14d2c:	add	r2, r3, #4
   14d30:	mov	r3, #0
   14d34:	b	14d48 <__assert_fail@plt+0x3048>
   14d38:	add	r2, r2, #12
   14d3c:	add	r3, r3, #1
   14d40:	cmp	lr, r3
   14d44:	beq	14d64 <__assert_fail@plt+0x3064>
   14d48:	ldr	r4, [r2]
   14d4c:	tst	r4, r1
   14d50:	beq	14d38 <__assert_fail@plt+0x3038>
   14d54:	ldr	r4, [r2, #4]
   14d58:	cmp	ip, r4
   14d5c:	bne	14d38 <__assert_fail@plt+0x3038>
   14d60:	mov	r0, r3
   14d64:	pop	{r4, sl, fp, pc}
   14d68:	push	{r4, r5, fp, lr}
   14d6c:	add	fp, sp, #8
   14d70:	ldr	r5, [fp, #8]
   14d74:	cmp	r2, #0
   14d78:	beq	14d8c <__assert_fail@plt+0x308c>
   14d7c:	mov	r2, #0
   14d80:	str	r2, [r3]
   14d84:	str	r2, [r5]
   14d88:	b	14db0 <__assert_fail@plt+0x30b0>
   14d8c:	ldr	r2, [r5]
   14d90:	ldr	r4, [r3]
   14d94:	add	r2, r4, r2
   14d98:	str	r2, [r3]
   14d9c:	ldrb	r4, [r0, r2]
   14da0:	cmp	r4, #0
   14da4:	beq	14dc8 <__assert_fail@plt+0x30c8>
   14da8:	add	r2, r2, #1
   14dac:	str	r2, [r3]
   14db0:	ldr	r2, [r3]
   14db4:	add	r0, r0, r2
   14db8:	bl	14dd0 <__assert_fail@plt+0x30d0>
   14dbc:	str	r0, [r5]
   14dc0:	mov	r0, #1
   14dc4:	pop	{r4, r5, fp, pc}
   14dc8:	mov	r0, #0
   14dcc:	pop	{r4, r5, fp, pc}
   14dd0:	push	{r4, sl, fp, lr}
   14dd4:	add	fp, sp, #8
   14dd8:	mov	r4, r0
   14ddc:	ldrb	r0, [r1]
   14de0:	cmp	r0, #0
   14de4:	beq	14dfc <__assert_fail@plt+0x30fc>
   14de8:	mov	r0, r4
   14dec:	bl	11c64 <strpbrk@plt>
   14df0:	cmp	r0, #0
   14df4:	subne	r0, r0, r4
   14df8:	popne	{r4, sl, fp, pc}
   14dfc:	mov	r0, r4
   14e00:	pop	{r4, sl, fp, lr}
   14e04:	b	11af0 <strlen@plt>
   14e08:	push	{r4, r5, fp, lr}
   14e0c:	add	fp, sp, #8
   14e10:	sub	sp, sp, #16
   14e14:	mov	r4, r1
   14e18:	mov	r5, r0
   14e1c:	movw	r1, #42608	; 0xa670
   14e20:	movt	r1, #2
   14e24:	mov	r0, #0
   14e28:	mov	r2, #5
   14e2c:	bl	11970 <dcgettext@plt>
   14e30:	mov	r1, r0
   14e34:	movw	r0, #42900	; 0xa794
   14e38:	movt	r0, #2
   14e3c:	movw	r2, #42853	; 0xa765
   14e40:	movt	r2, #2
   14e44:	movw	r3, #42229	; 0xa4f5
   14e48:	movt	r3, #2
   14e4c:	str	r3, [sp]
   14e50:	str	r2, [sp, #4]
   14e54:	str	r0, [sp, #8]
   14e58:	movw	r2, #42814	; 0xa73e
   14e5c:	movt	r2, #2
   14e60:	mov	r0, r5
   14e64:	mov	r3, r4
   14e68:	bl	11b08 <fprintf@plt>
   14e6c:	sub	sp, fp, #8
   14e70:	pop	{r4, r5, fp, pc}
   14e74:	sub	r0, r0, #1
   14e78:	ldrb	r3, [r0, #1]!
   14e7c:	cmp	r3, #47	; 0x2f
   14e80:	beq	14e78 <__assert_fail@plt+0x3178>
   14e84:	mov	r2, #0
   14e88:	mov	r1, r0
   14e8c:	b	14e98 <__assert_fail@plt+0x3198>
   14e90:	mov	r2, #1
   14e94:	ldrb	r3, [r1, #1]!
   14e98:	uxtb	r3, r3
   14e9c:	cmp	r3, #47	; 0x2f
   14ea0:	beq	14e90 <__assert_fail@plt+0x3190>
   14ea4:	cmp	r3, #0
   14ea8:	bxeq	lr
   14eac:	tst	r2, #1
   14eb0:	movne	r0, r1
   14eb4:	mov	r2, #0
   14eb8:	ldrb	r3, [r1, #1]!
   14ebc:	b	14e98 <__assert_fail@plt+0x3198>
   14ec0:	push	{r4, sl, fp, lr}
   14ec4:	add	fp, sp, #8
   14ec8:	mov	r4, r0
   14ecc:	bl	11af0 <strlen@plt>
   14ed0:	mov	r1, r0
   14ed4:	sub	r2, r4, #1
   14ed8:	mov	r0, r1
   14edc:	cmp	r1, #2
   14ee0:	bcc	14ef4 <__assert_fail@plt+0x31f4>
   14ee4:	ldrb	r3, [r2, r0]
   14ee8:	sub	r1, r0, #1
   14eec:	cmp	r3, #47	; 0x2f
   14ef0:	beq	14ed8 <__assert_fail@plt+0x31d8>
   14ef4:	pop	{r4, sl, fp, pc}
   14ef8:	movw	r1, #49812	; 0xc294
   14efc:	movt	r1, #3
   14f00:	str	r0, [r1]
   14f04:	bx	lr
   14f08:	movw	r1, #49816	; 0xc298
   14f0c:	movt	r1, #3
   14f10:	strb	r0, [r1]
   14f14:	bx	lr
   14f18:	push	{r4, r5, r6, sl, fp, lr}
   14f1c:	add	fp, sp, #16
   14f20:	sub	sp, sp, #8
   14f24:	movw	r0, #49692	; 0xc21c
   14f28:	movt	r0, #3
   14f2c:	ldr	r0, [r0]
   14f30:	bl	28be4 <__assert_fail@plt+0x16ee4>
   14f34:	cmp	r0, #0
   14f38:	beq	14f60 <__assert_fail@plt+0x3260>
   14f3c:	movw	r0, #49816	; 0xc298
   14f40:	movt	r0, #3
   14f44:	ldrb	r0, [r0]
   14f48:	cmp	r0, #0
   14f4c:	beq	14f80 <__assert_fail@plt+0x3280>
   14f50:	bl	11b20 <__errno_location@plt>
   14f54:	ldr	r0, [r0]
   14f58:	cmp	r0, #32
   14f5c:	bne	14f80 <__assert_fail@plt+0x3280>
   14f60:	movw	r0, #49688	; 0xc218
   14f64:	movt	r0, #3
   14f68:	ldr	r0, [r0]
   14f6c:	bl	28be4 <__assert_fail@plt+0x16ee4>
   14f70:	cmp	r0, #0
   14f74:	subeq	sp, fp, #16
   14f78:	popeq	{r4, r5, r6, sl, fp, pc}
   14f7c:	b	14ff0 <__assert_fail@plt+0x32f0>
   14f80:	movw	r1, #42922	; 0xa7aa
   14f84:	movt	r1, #2
   14f88:	mov	r0, #0
   14f8c:	mov	r2, #5
   14f90:	bl	11970 <dcgettext@plt>
   14f94:	mov	r4, r0
   14f98:	movw	r0, #49812	; 0xc294
   14f9c:	movt	r0, #3
   14fa0:	ldr	r6, [r0]
   14fa4:	bl	11b20 <__errno_location@plt>
   14fa8:	ldr	r5, [r0]
   14fac:	cmp	r6, #0
   14fb0:	bne	14fcc <__assert_fail@plt+0x32cc>
   14fb4:	movw	r2, #45108	; 0xb034
   14fb8:	movt	r2, #2
   14fbc:	mov	r0, #0
   14fc0:	mov	r1, r5
   14fc4:	mov	r3, r4
   14fc8:	b	14fec <__assert_fail@plt+0x32ec>
   14fcc:	mov	r0, r6
   14fd0:	bl	18ad8 <__assert_fail@plt+0x6dd8>
   14fd4:	mov	r3, r0
   14fd8:	str	r4, [sp]
   14fdc:	movw	r2, #42934	; 0xa7b6
   14fe0:	movt	r2, #2
   14fe4:	mov	r0, #0
   14fe8:	mov	r1, r5
   14fec:	bl	11a18 <error@plt>
   14ff0:	movw	r0, #49592	; 0xc1b8
   14ff4:	movt	r0, #3
   14ff8:	ldr	r0, [r0]
   14ffc:	bl	1191c <_exit@plt>
   15000:	sub	sp, sp, #8
   15004:	push	{fp, lr}
   15008:	mov	fp, sp
   1500c:	sub	sp, sp, #8
   15010:	str	r2, [fp, #8]
   15014:	str	r3, [fp, #12]
   15018:	mov	r2, #0
   1501c:	tst	r1, #64	; 0x40
   15020:	ldrne	r2, [fp, #8]
   15024:	bl	11a30 <open64@plt>
   15028:	bl	190c8 <__assert_fail@plt+0x73c8>
   1502c:	mov	sp, fp
   15030:	pop	{fp, lr}
   15034:	add	sp, sp, #8
   15038:	bx	lr
   1503c:	andeq	r0, r0, r0
   15040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15044:	add	fp, sp, #28
   15048:	sub	sp, sp, #4
   1504c:	vpush	{d8-d9}
   15050:	sub	sp, sp, #48	; 0x30
   15054:	mov	r5, r3
   15058:	mov	r7, r2
   1505c:	str	r1, [sp, #44]	; 0x2c
   15060:	str	r0, [sp, #40]	; 0x28
   15064:	bl	11c34 <localeconv@plt>
   15068:	mov	r4, r0
   1506c:	ldr	r6, [r0]
   15070:	mov	r0, r6
   15074:	bl	11af0 <strlen@plt>
   15078:	sub	r1, r0, #1
   1507c:	movw	r2, #38885	; 0x97e5
   15080:	movt	r2, #2
   15084:	cmp	r1, #16
   15088:	movcc	r2, r6
   1508c:	str	r2, [sp, #4]
   15090:	movcs	r0, #1
   15094:	str	r0, [sp, #8]
   15098:	ldr	r6, [r4, #4]
   1509c:	ldr	r4, [r4, #8]
   150a0:	mov	r0, r6
   150a4:	bl	11af0 <strlen@plt>
   150a8:	movw	r1, #41671	; 0xa2c7
   150ac:	movt	r1, #2
   150b0:	cmp	r0, #17
   150b4:	movcc	r1, r6
   150b8:	movw	r0, #647	; 0x287
   150bc:	str	r7, [sp, #28]
   150c0:	add	r0, r7, r0
   150c4:	str	r0, [sp, #32]
   150c8:	ands	r0, r5, #32
   150cc:	str	r0, [sp, #20]
   150d0:	mov	r6, #1000	; 0x3e8
   150d4:	movwne	r6, #1024	; 0x400
   150d8:	and	r7, r5, #3
   150dc:	ldr	r3, [fp, #20]
   150e0:	ldr	r2, [fp, #16]
   150e4:	ldr	r8, [fp, #12]
   150e8:	ldr	sl, [fp, #8]
   150ec:	subs	r0, sl, r2
   150f0:	sbcs	r0, r8, r3
   150f4:	str	r5, [sp, #36]	; 0x24
   150f8:	str	r4, [sp, #16]
   150fc:	str	r1, [sp, #12]
   15100:	str	r7, [sp, #24]
   15104:	bcs	15200 <__assert_fail@plt+0x3500>
   15108:	orrs	r0, sl, r8
   1510c:	beq	152f4 <__assert_fail@plt+0x35f4>
   15110:	mov	r0, r2
   15114:	mov	r1, r3
   15118:	mov	r2, sl
   1511c:	mov	r3, r8
   15120:	bl	293d0 <__assert_fail@plt+0x176d0>
   15124:	ldr	r2, [fp, #16]
   15128:	ldr	r3, [fp, #20]
   1512c:	mov	r5, r0
   15130:	mov	r7, r1
   15134:	umull	r0, r1, r0, sl
   15138:	mla	r1, r5, r8, r1
   1513c:	mla	r1, r7, sl, r1
   15140:	subs	r0, r2, r0
   15144:	sbc	r1, r3, r1
   15148:	orrs	r0, r0, r1
   1514c:	bne	152f4 <__assert_fail@plt+0x35f4>
   15150:	ldr	sl, [sp, #40]	; 0x28
   15154:	mov	r0, sl
   15158:	ldr	r4, [sp, #44]	; 0x2c
   1515c:	mov	r1, r4
   15160:	mov	r2, r5
   15164:	mov	r3, r7
   15168:	mov	r8, r7
   1516c:	bl	293d0 <__assert_fail@plt+0x176d0>
   15170:	mov	r9, r0
   15174:	mov	r7, r1
   15178:	umull	r0, r1, r0, r5
   1517c:	mla	r1, r9, r8, r1
   15180:	mla	r1, r7, r5, r1
   15184:	subs	r0, sl, r0
   15188:	sbc	r1, r4, r1
   1518c:	add	r1, r1, r1, lsl #2
   15190:	mov	r2, #10
   15194:	umull	r0, r2, r0, r2
   15198:	str	r0, [sp, #44]	; 0x2c
   1519c:	add	sl, r2, r1, lsl #1
   151a0:	mov	r1, sl
   151a4:	mov	r2, r5
   151a8:	mov	r3, r8
   151ac:	bl	293d0 <__assert_fail@plt+0x176d0>
   151b0:	mov	r4, r0
   151b4:	umull	r0, r2, r0, r5
   151b8:	mla	r2, r4, r8, r2
   151bc:	mla	r1, r1, r5, r2
   151c0:	ldr	r2, [sp, #44]	; 0x2c
   151c4:	subs	r0, r2, r0
   151c8:	sbc	r1, sl, r1
   151cc:	lsl	r1, r1, #1
   151d0:	orr	r1, r1, r0, lsr #31
   151d4:	mov	r2, #2
   151d8:	subs	r3, r5, r0, lsl #1
   151dc:	sbcs	r3, r8, r1
   151e0:	movwcc	r2, #3
   151e4:	orr	sl, r1, r0, lsl #1
   151e8:	cmp	sl, #0
   151ec:	movwne	sl, #1
   151f0:	rsbs	r0, r5, r0, lsl #1
   151f4:	sbcs	r0, r1, r8
   151f8:	movcs	sl, r2
   151fc:	b	15288 <__assert_fail@plt+0x3588>
   15200:	mov	r0, sl
   15204:	mov	r1, r8
   15208:	bl	293d0 <__assert_fail@plt+0x176d0>
   1520c:	ldr	r2, [fp, #16]
   15210:	ldr	r3, [fp, #20]
   15214:	mov	r4, r0
   15218:	mov	r5, r1
   1521c:	umull	r0, r1, r0, r2
   15220:	mla	r1, r4, r3, r1
   15224:	mla	r1, r5, r2, r1
   15228:	subs	r0, sl, r0
   1522c:	sbc	r1, r8, r1
   15230:	orrs	r0, r0, r1
   15234:	bne	152f4 <__assert_fail@plt+0x35f4>
   15238:	ldr	r1, [sp, #40]	; 0x28
   1523c:	umull	r9, r0, r4, r1
   15240:	ldr	r2, [sp, #44]	; 0x2c
   15244:	mla	r0, r4, r2, r0
   15248:	mla	r7, r5, r1, r0
   1524c:	mov	r0, r9
   15250:	mov	r1, r7
   15254:	mov	r2, r4
   15258:	mov	r3, r5
   1525c:	bl	293d0 <__assert_fail@plt+0x176d0>
   15260:	ldr	r2, [fp, #16]
   15264:	ldr	r3, [fp, #20]
   15268:	ldr	r5, [sp, #44]	; 0x2c
   1526c:	eor	r1, r1, r5
   15270:	ldr	r5, [sp, #40]	; 0x28
   15274:	eor	r0, r0, r5
   15278:	orrs	r0, r0, r1
   1527c:	bne	152f4 <__assert_fail@plt+0x35f4>
   15280:	mov	sl, #0
   15284:	mov	r4, #0
   15288:	ldr	r0, [sp, #36]	; 0x24
   1528c:	ands	ip, r0, #16
   15290:	mvn	r5, #0
   15294:	beq	152a8 <__assert_fail@plt+0x35a8>
   15298:	mov	r5, #0
   1529c:	subs	r0, r9, r6
   152a0:	sbcs	r0, r7, #0
   152a4:	bcs	154f4 <__assert_fail@plt+0x37f4>
   152a8:	ldr	r3, [sp, #32]
   152ac:	mov	r8, r9
   152b0:	ldr	r9, [sp, #24]
   152b4:	cmp	r9, #0
   152b8:	beq	15644 <__assert_fail@plt+0x3944>
   152bc:	cmp	r9, #1
   152c0:	bne	154e8 <__assert_fail@plt+0x37e8>
   152c4:	mov	r0, #0
   152c8:	rsbs	r1, sl, #0
   152cc:	sbc	r0, r0, #0
   152d0:	and	r2, r8, #1
   152d4:	eor	r1, r2, r1
   152d8:	orrs	r0, r1, r0
   152dc:	addne	r4, r4, #1
   152e0:	cmp	r4, #5
   152e4:	ldr	r9, [sp, #32]
   152e8:	ldr	sl, [sp, #28]
   152ec:	bgt	15658 <__assert_fail@plt+0x3958>
   152f0:	b	156b8 <__assert_fail@plt+0x39b8>
   152f4:	mov	r0, r2
   152f8:	mov	r1, r3
   152fc:	bl	2935c <__assert_fail@plt+0x1765c>
   15300:	vmov	d8, r0, r1
   15304:	ldr	r0, [sp, #40]	; 0x28
   15308:	ldr	r1, [sp, #44]	; 0x2c
   1530c:	bl	2935c <__assert_fail@plt+0x1765c>
   15310:	mov	r5, r0
   15314:	mov	r7, r1
   15318:	mov	r0, sl
   1531c:	mov	r1, r8
   15320:	bl	2935c <__assert_fail@plt+0x1765c>
   15324:	vmov	d16, r0, r1
   15328:	vmov	d17, r5, r7
   1532c:	vdiv.f64	d16, d16, d8
   15330:	vmul.f64	d0, d16, d17
   15334:	ldr	r8, [sp, #36]	; 0x24
   15338:	tst	r8, #16
   1533c:	bne	1537c <__assert_fail@plt+0x367c>
   15340:	ldr	r0, [sp, #24]
   15344:	bl	157c8 <__assert_fail@plt+0x3ac8>
   15348:	vmov	r2, r3, d0
   1534c:	movw	r1, #42941	; 0xa7bd
   15350:	movt	r1, #2
   15354:	ldr	sl, [sp, #28]
   15358:	mov	r0, sl
   1535c:	bl	11c4c <sprintf@plt>
   15360:	mov	r0, sl
   15364:	bl	11af0 <strlen@plt>
   15368:	mov	r2, r0
   1536c:	mov	r7, #0
   15370:	mvn	r5, #0
   15374:	ldr	r9, [sp, #32]
   15378:	b	1545c <__assert_fail@plt+0x375c>
   1537c:	vmov.f64	d16, #112	; 0x3f800000  1.0
   15380:	vmov	s2, r6
   15384:	vcvt.f64.u32	d17, s2
   15388:	mov	r5, #0
   1538c:	vmul.f64	d16, d16, d17
   15390:	add	r5, r5, #1
   15394:	cmp	r5, #7
   15398:	vmulls.f64	d18, d16, d17
   1539c:	vcmpels.f64	d18, d0
   153a0:	vmrsls	APSR_nzcv, fpscr
   153a4:	bls	1538c <__assert_fail@plt+0x368c>
   153a8:	vdiv.f64	d8, d0, d16
   153ac:	ldr	r9, [sp, #24]
   153b0:	mov	r0, r9
   153b4:	vmov.f64	d0, d8
   153b8:	bl	157c8 <__assert_fail@plt+0x3ac8>
   153bc:	vmov	r2, r3, d0
   153c0:	movw	r1, #42947	; 0xa7c3
   153c4:	movt	r1, #2
   153c8:	ldr	sl, [sp, #28]
   153cc:	mov	r0, sl
   153d0:	bl	11c4c <sprintf@plt>
   153d4:	mov	r0, #3
   153d8:	ldr	r1, [sp, #20]
   153dc:	cmp	r1, #0
   153e0:	movwne	r0, #2
   153e4:	ldr	r7, [sp, #8]
   153e8:	add	r4, r0, r7
   153ec:	mov	r0, sl
   153f0:	bl	11af0 <strlen@plt>
   153f4:	cmp	r4, r0
   153f8:	ldr	r4, [sp, #32]
   153fc:	bcc	15420 <__assert_fail@plt+0x3720>
   15400:	mov	r2, r0
   15404:	add	r7, r7, #1
   15408:	tst	r8, #8
   1540c:	beq	15458 <__assert_fail@plt+0x3758>
   15410:	add	r0, r2, sl
   15414:	ldrb	r0, [r0, #-1]
   15418:	cmp	r0, #48	; 0x30
   1541c:	bne	15458 <__assert_fail@plt+0x3758>
   15420:	vmov.f64	d9, #36	; 0x41200000  10.0
   15424:	vmul.f64	d0, d8, d9
   15428:	mov	r0, r9
   1542c:	bl	157c8 <__assert_fail@plt+0x3ac8>
   15430:	vdiv.f64	d16, d0, d9
   15434:	vmov	r2, r3, d16
   15438:	movw	r1, #42941	; 0xa7bd
   1543c:	movt	r1, #2
   15440:	mov	r0, sl
   15444:	bl	11c4c <sprintf@plt>
   15448:	mov	r0, sl
   1544c:	bl	11af0 <strlen@plt>
   15450:	mov	r2, r0
   15454:	mov	r7, #0
   15458:	mov	r9, r4
   1545c:	sub	r4, r9, r2
   15460:	mov	r0, r4
   15464:	mov	r1, sl
   15468:	bl	118e0 <memmove@plt>
   1546c:	sub	r0, r9, r7
   15470:	tst	r8, #4
   15474:	beq	15490 <__assert_fail@plt+0x3790>
   15478:	sub	r1, r0, r4
   1547c:	mov	r0, r4
   15480:	ldr	r2, [sp, #16]
   15484:	ldr	r3, [sp, #12]
   15488:	bl	15860 <__assert_fail@plt+0x3b60>
   1548c:	mov	r4, r0
   15490:	ldr	r3, [fp, #20]
   15494:	ldr	r7, [fp, #16]
   15498:	tst	r8, #128	; 0x80
   1549c:	beq	15614 <__assert_fail@plt+0x3914>
   154a0:	cmn	r5, #1
   154a4:	bgt	155ac <__assert_fail@plt+0x38ac>
   154a8:	mov	r5, #0
   154ac:	subs	r0, r7, #2
   154b0:	sbcs	r0, r3, #0
   154b4:	bcc	155ac <__assert_fail@plt+0x38ac>
   154b8:	mov	r0, #0
   154bc:	mov	r1, #1
   154c0:	mov	r5, #0
   154c4:	cmp	r5, #7
   154c8:	beq	155a8 <__assert_fail@plt+0x38a8>
   154cc:	add	r5, r5, #1
   154d0:	umull	r1, r2, r1, r6
   154d4:	mla	r0, r0, r6, r2
   154d8:	subs	r2, r1, r7
   154dc:	sbcs	r2, r0, r3
   154e0:	bcc	154c4 <__assert_fail@plt+0x37c4>
   154e4:	b	155ac <__assert_fail@plt+0x38ac>
   154e8:	ldr	r9, [sp, #32]
   154ec:	ldr	sl, [sp, #28]
   154f0:	b	156b8 <__assert_fail@plt+0x39b8>
   154f4:	str	ip, [sp, #44]	; 0x2c
   154f8:	mov	r5, #0
   154fc:	mov	r0, r9
   15500:	mov	r1, r7
   15504:	mov	r2, r6
   15508:	mov	r3, #0
   1550c:	bl	293d0 <__assert_fail@plt+0x176d0>
   15510:	mov	r8, r0
   15514:	mov	r7, r1
   15518:	mls	r0, r0, r6, r9
   1551c:	add	r0, r0, r0, lsl #2
   15520:	add	r0, r4, r0, lsl #1
   15524:	udiv	r4, r0, r6
   15528:	mls	r0, r4, r6, r0
   1552c:	lsl	r0, r0, #1
   15530:	add	r0, r0, sl, lsr #1
   15534:	cmp	r0, r6
   15538:	bcs	1554c <__assert_fail@plt+0x384c>
   1553c:	rsb	r1, sl, #0
   15540:	subs	sl, r0, r1
   15544:	movwne	sl, #1
   15548:	b	1555c <__assert_fail@plt+0x385c>
   1554c:	add	r0, r0, sl
   15550:	cmp	r6, r0
   15554:	mov	sl, #2
   15558:	movwcc	sl, #3
   1555c:	add	r5, r5, #1
   15560:	cmp	r5, #7
   15564:	bhi	15578 <__assert_fail@plt+0x3878>
   15568:	subs	r0, r8, r6
   1556c:	sbcs	r0, r7, #0
   15570:	mov	r9, r8
   15574:	bcs	154fc <__assert_fail@plt+0x37fc>
   15578:	rsbs	r0, r8, #9
   1557c:	rscs	r0, r7, #0
   15580:	bcc	15630 <__assert_fail@plt+0x3930>
   15584:	ldr	r9, [sp, #24]
   15588:	cmp	r9, #1
   1558c:	ldr	ip, [sp, #44]	; 0x2c
   15590:	bne	1570c <__assert_fail@plt+0x3a0c>
   15594:	and	r0, r4, #1
   15598:	add	r0, sl, r0
   1559c:	cmp	r0, #2
   155a0:	bhi	1571c <__assert_fail@plt+0x3a1c>
   155a4:	b	15750 <__assert_fail@plt+0x3a50>
   155a8:	mov	r5, #8
   155ac:	and	r0, r8, #256	; 0x100
   155b0:	tst	r8, #64	; 0x40
   155b4:	orrsne	r1, r5, r0
   155b8:	movne	r1, #32
   155bc:	strbne	r1, [sl, #647]	; 0x287
   155c0:	addne	r9, sl, #648	; 0x288
   155c4:	cmp	r5, #0
   155c8:	beq	155f0 <__assert_fail@plt+0x38f0>
   155cc:	ldr	r1, [sp, #20]
   155d0:	cmp	r1, #0
   155d4:	moveq	r1, #107	; 0x6b
   155d8:	cmpeq	r5, #1
   155dc:	beq	155ec <__assert_fail@plt+0x38ec>
   155e0:	movw	r1, #43028	; 0xa814
   155e4:	movt	r1, #2
   155e8:	ldrb	r1, [r1, r5]
   155ec:	strb	r1, [r9], #1
   155f0:	cmp	r0, #0
   155f4:	beq	15614 <__assert_fail@plt+0x3914>
   155f8:	ldr	r0, [sp, #20]
   155fc:	cmp	r0, #0
   15600:	cmpne	r5, #0
   15604:	movne	r0, #105	; 0x69
   15608:	strbne	r0, [r9], #1
   1560c:	mov	r0, #66	; 0x42
   15610:	strb	r0, [r9], #1
   15614:	mov	r0, #0
   15618:	strb	r0, [r9]
   1561c:	mov	r0, r4
   15620:	sub	sp, fp, #48	; 0x30
   15624:	vpop	{d8-d9}
   15628:	add	sp, sp, #4
   1562c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15630:	ldr	r3, [sp, #32]
   15634:	ldr	r9, [sp, #24]
   15638:	ldr	ip, [sp, #44]	; 0x2c
   1563c:	cmp	r9, #0
   15640:	bne	152bc <__assert_fail@plt+0x35bc>
   15644:	add	r0, r4, sl
   15648:	cmp	r0, #1
   1564c:	ldr	r9, [sp, #32]
   15650:	ldr	sl, [sp, #28]
   15654:	blt	156b8 <__assert_fail@plt+0x39b8>
   15658:	adds	r8, r8, #1
   1565c:	adc	r7, r7, #0
   15660:	cmp	r5, #7
   15664:	bgt	156b8 <__assert_fail@plt+0x39b8>
   15668:	cmp	ip, #0
   1566c:	beq	156b8 <__assert_fail@plt+0x39b8>
   15670:	eor	r0, r8, r6
   15674:	orrs	r0, r0, r7
   15678:	bne	156b8 <__assert_fail@plt+0x39b8>
   1567c:	add	r5, r5, #1
   15680:	mov	r7, #0
   15684:	mov	r8, #1
   15688:	ldr	r0, [sp, #36]	; 0x24
   1568c:	tst	r0, #8
   15690:	bne	156b8 <__assert_fail@plt+0x39b8>
   15694:	mov	r0, #48	; 0x30
   15698:	strb	r0, [r3, #-1]!
   1569c:	ldr	r2, [sp, #8]
   156a0:	sub	r3, r3, r2
   156a4:	mov	r0, r3
   156a8:	ldr	r1, [sp, #4]
   156ac:	mov	r4, r3
   156b0:	bl	11928 <memcpy@plt>
   156b4:	mov	r3, r4
   156b8:	str	r3, [sp, #44]	; 0x2c
   156bc:	mov	r4, r3
   156c0:	mov	r0, r8
   156c4:	mov	r1, r7
   156c8:	mov	r2, #10
   156cc:	mov	r3, #0
   156d0:	bl	293d0 <__assert_fail@plt+0x176d0>
   156d4:	add	r2, r0, r0, lsl #2
   156d8:	sub	r2, r8, r2, lsl #1
   156dc:	orr	r2, r2, #48	; 0x30
   156e0:	strb	r2, [r4, #-1]!
   156e4:	rsbs	r2, r8, #9
   156e8:	rscs	r2, r7, #0
   156ec:	mov	r8, r0
   156f0:	mov	r7, r1
   156f4:	bcc	156c0 <__assert_fail@plt+0x39c0>
   156f8:	ldr	r8, [sp, #36]	; 0x24
   156fc:	ldr	r0, [sp, #44]	; 0x2c
   15700:	tst	r8, #4
   15704:	bne	15478 <__assert_fail@plt+0x3778>
   15708:	b	15490 <__assert_fail@plt+0x3790>
   1570c:	cmp	r9, #0
   15710:	bne	15750 <__assert_fail@plt+0x3a50>
   15714:	cmp	sl, #0
   15718:	beq	15750 <__assert_fail@plt+0x3a50>
   1571c:	adds	r0, r8, #1
   15720:	adc	r1, r7, #0
   15724:	add	r4, r4, #1
   15728:	mov	sl, #0
   1572c:	cmp	r4, #10
   15730:	bne	15750 <__assert_fail@plt+0x3a50>
   15734:	mov	r4, #0
   15738:	rsbs	r2, r0, #9
   1573c:	rscs	r2, r1, #0
   15740:	mov	r8, r0
   15744:	mov	r7, r1
   15748:	mov	sl, #0
   1574c:	bcc	157a8 <__assert_fail@plt+0x3aa8>
   15750:	ldr	r0, [sp, #36]	; 0x24
   15754:	tst	r0, #8
   15758:	beq	1576c <__assert_fail@plt+0x3a6c>
   1575c:	cmp	r4, #0
   15760:	bne	1576c <__assert_fail@plt+0x3a6c>
   15764:	ldr	r3, [sp, #32]
   15768:	b	15798 <__assert_fail@plt+0x3a98>
   1576c:	add	r0, r4, #48	; 0x30
   15770:	ldr	r1, [sp, #28]
   15774:	strb	r0, [r1, #646]!	; 0x286
   15778:	ldr	r2, [sp, #8]
   1577c:	sub	r4, r1, r2
   15780:	mov	r0, r4
   15784:	ldr	r1, [sp, #4]
   15788:	bl	11928 <memcpy@plt>
   1578c:	mov	r3, r4
   15790:	ldr	ip, [sp, #44]	; 0x2c
   15794:	mov	sl, #0
   15798:	mov	r4, #0
   1579c:	cmp	r9, #0
   157a0:	bne	152bc <__assert_fail@plt+0x35bc>
   157a4:	b	15644 <__assert_fail@plt+0x3944>
   157a8:	mov	sl, #0
   157ac:	ldr	r3, [sp, #32]
   157b0:	mov	r8, #10
   157b4:	mov	r7, #0
   157b8:	cmp	r9, #0
   157bc:	bne	152bc <__assert_fail@plt+0x35bc>
   157c0:	b	15644 <__assert_fail@plt+0x3944>
   157c4:	nop	{0}
   157c8:	push	{r4, r5, r6, sl, fp, lr}
   157cc:	add	fp, sp, #16
   157d0:	vpush	{d8}
   157d4:	vmov.f64	d8, d0
   157d8:	cmp	r0, #1
   157dc:	beq	15848 <__assert_fail@plt+0x3b48>
   157e0:	vldr	d16, [pc, #112]	; 15858 <__assert_fail@plt+0x3b58>
   157e4:	vcmpe.f64	d8, d16
   157e8:	vmrs	APSR_nzcv, fpscr
   157ec:	bpl	15848 <__assert_fail@plt+0x3b48>
   157f0:	mov	r6, r0
   157f4:	vmov	r0, r1, d8
   157f8:	bl	29420 <__assert_fail@plt+0x17720>
   157fc:	mov	r4, r0
   15800:	mov	r5, r1
   15804:	mov	r0, #0
   15808:	cmp	r6, #0
   1580c:	mov	r2, #0
   15810:	bne	15838 <__assert_fail@plt+0x3b38>
   15814:	mov	r0, r4
   15818:	mov	r1, r5
   1581c:	bl	2935c <__assert_fail@plt+0x1765c>
   15820:	mov	r2, #0
   15824:	vmov	d16, r0, r1
   15828:	vcmp.f64	d16, d8
   1582c:	vmrs	APSR_nzcv, fpscr
   15830:	mov	r0, #0
   15834:	movwne	r0, #1
   15838:	adds	r0, r0, r4
   1583c:	adc	r1, r2, r5
   15840:	bl	2935c <__assert_fail@plt+0x1765c>
   15844:	vmov	d8, r0, r1
   15848:	vorr	d0, d8, d8
   1584c:	vpop	{d8}
   15850:	pop	{r4, r5, r6, sl, fp, pc}
   15854:	nop	{0}
   15858:	andeq	r0, r0, r0
   1585c:	mvnsmi	r0, #0
   15860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15864:	add	fp, sp, #28
   15868:	sub	sp, sp, #52	; 0x34
   1586c:	mov	r5, r3
   15870:	mov	r9, r2
   15874:	mov	r6, r1
   15878:	mov	r4, r0
   1587c:	mov	r0, r3
   15880:	bl	11af0 <strlen@plt>
   15884:	str	r0, [sp, #4]
   15888:	add	sl, sp, #8
   1588c:	mov	r0, sl
   15890:	mov	r1, r4
   15894:	mov	r2, r6
   15898:	bl	11928 <memcpy@plt>
   1589c:	add	r0, r4, r6
   158a0:	ldrb	r7, [r9]
   158a4:	cmp	r7, #255	; 0xff
   158a8:	mov	r8, r7
   158ac:	moveq	r8, r6
   158b0:	cmp	r7, #0
   158b4:	mvneq	r8, #0
   158b8:	cmp	r8, r6
   158bc:	movhi	r8, r6
   158c0:	sub	r4, r0, r8
   158c4:	sub	r6, r6, r8
   158c8:	add	r1, sl, r6
   158cc:	mov	r0, r4
   158d0:	mov	r2, r8
   158d4:	bl	11928 <memcpy@plt>
   158d8:	cmp	r6, #0
   158dc:	beq	1596c <__assert_fail@plt+0x3c6c>
   158e0:	clz	r0, r7
   158e4:	lsr	sl, r0, #5
   158e8:	ldr	r0, [sp, #4]
   158ec:	rsb	r0, r0, #0
   158f0:	str	r0, [sp]
   158f4:	ldr	r0, [sp]
   158f8:	add	r4, r4, r0
   158fc:	mov	r0, r4
   15900:	mov	r1, r5
   15904:	ldr	r2, [sp, #4]
   15908:	bl	11928 <memcpy@plt>
   1590c:	tst	sl, #1
   15910:	addeq	r9, r9, #1
   15914:	mov	sl, r5
   15918:	ldrb	r5, [r9]
   1591c:	cmp	r5, #255	; 0xff
   15920:	mov	r7, r5
   15924:	moveq	r7, r6
   15928:	cmp	r5, #0
   1592c:	moveq	r7, r8
   15930:	cmp	r6, r7
   15934:	movcc	r7, r6
   15938:	sub	r4, r4, r7
   1593c:	sub	r6, r6, r7
   15940:	add	r0, sp, #8
   15944:	add	r1, r0, r6
   15948:	mov	r0, r4
   1594c:	mov	r2, r7
   15950:	bl	11928 <memcpy@plt>
   15954:	clz	r0, r5
   15958:	mov	r5, sl
   1595c:	lsr	sl, r0, #5
   15960:	cmp	r6, #0
   15964:	mov	r8, r7
   15968:	bne	158f4 <__assert_fail@plt+0x3bf4>
   1596c:	mov	r0, r4
   15970:	sub	sp, fp, #28
   15974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15978:	push	{r4, sl, fp, lr}
   1597c:	add	fp, sp, #8
   15980:	mov	r4, r2
   15984:	mov	r2, r1
   15988:	mov	r1, r4
   1598c:	bl	159ac <__assert_fail@plt+0x3cac>
   15990:	ldrd	r2, [r4]
   15994:	orrs	r1, r2, r3
   15998:	popne	{r4, sl, fp, pc}
   1599c:	bl	15b1c <__assert_fail@plt+0x3e1c>
   159a0:	strd	r0, [r4]
   159a4:	mov	r0, #4
   159a8:	pop	{r4, sl, fp, pc}
   159ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159b0:	add	fp, sp, #24
   159b4:	sub	sp, sp, #8
   159b8:	mov	r8, r2
   159bc:	mov	r5, r1
   159c0:	cmp	r0, #0
   159c4:	bne	159f0 <__assert_fail@plt+0x3cf0>
   159c8:	movw	r0, #42953	; 0xa7c9
   159cc:	movt	r0, #2
   159d0:	bl	11a3c <getenv@plt>
   159d4:	cmp	r0, #0
   159d8:	bne	159f0 <__assert_fail@plt+0x3cf0>
   159dc:	movw	r0, #42964	; 0xa7d4
   159e0:	movt	r0, #2
   159e4:	bl	11a3c <getenv@plt>
   159e8:	cmp	r0, #0
   159ec:	beq	15adc <__assert_fail@plt+0x3ddc>
   159f0:	mov	r6, r0
   159f4:	ldrb	r4, [r6], #1
   159f8:	cmp	r4, #39	; 0x27
   159fc:	movne	r6, r0
   15a00:	movw	r1, #43040	; 0xa820
   15a04:	movt	r1, #2
   15a08:	movw	r7, #43052	; 0xa82c
   15a0c:	movt	r7, #2
   15a10:	mov	r0, r6
   15a14:	mov	r2, r7
   15a18:	mov	r3, #4
   15a1c:	bl	28564 <__assert_fail@plt+0x16864>
   15a20:	sub	r1, r4, #39	; 0x27
   15a24:	clz	r1, r1
   15a28:	lsr	r1, r1, #5
   15a2c:	lsl	r4, r1, #2
   15a30:	cmp	r0, #0
   15a34:	bmi	15a60 <__assert_fail@plt+0x3d60>
   15a38:	mov	r1, #0
   15a3c:	mov	r2, #1
   15a40:	str	r2, [r5]
   15a44:	str	r1, [r5, #4]
   15a48:	ldr	r0, [r7, r0, lsl #2]
   15a4c:	orr	r0, r0, r4
   15a50:	str	r0, [r8]
   15a54:	mov	r0, #0
   15a58:	sub	sp, fp, #24
   15a5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a60:	movw	r0, #42974	; 0xa7de
   15a64:	movt	r0, #2
   15a68:	str	r0, [sp]
   15a6c:	add	r1, sp, #4
   15a70:	mov	r7, #0
   15a74:	mov	r0, r6
   15a78:	mov	r2, #0
   15a7c:	mov	r3, r5
   15a80:	bl	19a3c <__assert_fail@plt+0x7d3c>
   15a84:	cmp	r0, #0
   15a88:	beq	15a98 <__assert_fail@plt+0x3d98>
   15a8c:	str	r7, [r8]
   15a90:	sub	sp, fp, #24
   15a94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a98:	ldrb	r0, [r6]
   15a9c:	sub	r0, r0, #48	; 0x30
   15aa0:	uxtb	r0, r0
   15aa4:	cmp	r0, #10
   15aa8:	bcc	15ad4 <__assert_fail@plt+0x3dd4>
   15aac:	ldr	r1, [sp, #4]
   15ab0:	cmp	r1, r6
   15ab4:	beq	15aec <__assert_fail@plt+0x3dec>
   15ab8:	add	r0, r6, #1
   15abc:	ldrb	r2, [r6, #1]
   15ac0:	sub	r2, r2, #48	; 0x30
   15ac4:	uxtb	r2, r2
   15ac8:	cmp	r2, #10
   15acc:	mov	r6, r0
   15ad0:	bcs	15ab0 <__assert_fail@plt+0x3db0>
   15ad4:	mov	r0, r4
   15ad8:	b	15a50 <__assert_fail@plt+0x3d50>
   15adc:	bl	15b1c <__assert_fail@plt+0x3e1c>
   15ae0:	strd	r0, [r5]
   15ae4:	mov	r0, #0
   15ae8:	b	15a50 <__assert_fail@plt+0x3d50>
   15aec:	ldrb	r2, [r1, #-1]
   15af0:	orr	r0, r4, #384	; 0x180
   15af4:	cmp	r2, #66	; 0x42
   15af8:	mov	r2, r0
   15afc:	orrne	r2, r4, #128	; 0x80
   15b00:	bne	15b14 <__assert_fail@plt+0x3e14>
   15b04:	ldrb	r1, [r1, #-2]
   15b08:	cmp	r1, #105	; 0x69
   15b0c:	orreq	r0, r2, #32
   15b10:	b	15a50 <__assert_fail@plt+0x3d50>
   15b14:	orr	r0, r2, #32
   15b18:	b	15a50 <__assert_fail@plt+0x3d50>
   15b1c:	push	{fp, lr}
   15b20:	mov	fp, sp
   15b24:	movw	r0, #43010	; 0xa802
   15b28:	movt	r0, #2
   15b2c:	bl	11a3c <getenv@plt>
   15b30:	mov	r1, #512	; 0x200
   15b34:	cmp	r0, #0
   15b38:	movweq	r1, #1024	; 0x400
   15b3c:	mov	r0, r1
   15b40:	mov	r1, #0
   15b44:	pop	{fp, pc}
   15b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b4c:	add	fp, sp, #28
   15b50:	sub	sp, sp, #388	; 0x184
   15b54:	mov	r5, r1
   15b58:	str	r0, [sp, #20]
   15b5c:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   15b60:	cmp	r0, #2
   15b64:	bcc	15f54 <__assert_fail@plt+0x4254>
   15b68:	mov	r6, #0
   15b6c:	str	r6, [fp, #-80]	; 0xffffffb0
   15b70:	str	r6, [fp, #-84]	; 0xffffffac
   15b74:	strb	r6, [fp, #-76]	; 0xffffffb4
   15b78:	strb	r6, [fp, #-88]	; 0xffffffa8
   15b7c:	str	r5, [fp, #-72]	; 0xffffffb8
   15b80:	sub	r4, fp, #88	; 0x58
   15b84:	mov	r0, r4
   15b88:	bl	17258 <__assert_fail@plt+0x5558>
   15b8c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15b90:	cmp	r0, #0
   15b94:	beq	15ba4 <__assert_fail@plt+0x3ea4>
   15b98:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15b9c:	cmp	r0, #0
   15ba0:	beq	16118 <__assert_fail@plt+0x4418>
   15ba4:	add	r1, r4, #16
   15ba8:	str	r6, [fp, #-136]	; 0xffffff78
   15bac:	str	r6, [fp, #-140]	; 0xffffff74
   15bb0:	str	r5, [fp, #-128]	; 0xffffff80
   15bb4:	strb	r6, [fp, #-132]	; 0xffffff7c
   15bb8:	strb	r6, [fp, #-144]	; 0xffffff70
   15bbc:	sub	r0, fp, #184	; 0xb8
   15bc0:	bl	28ee8 <__assert_fail@plt+0x171e8>
   15bc4:	ldrb	r0, [fp, #-176]	; 0xffffff50
   15bc8:	cmp	r0, #0
   15bcc:	beq	15bdc <__assert_fail@plt+0x3edc>
   15bd0:	ldr	r0, [fp, #-172]	; 0xffffff54
   15bd4:	bl	1194c <towlower@plt>
   15bd8:	str	r0, [fp, #-172]	; 0xffffff54
   15bdc:	mov	r4, #0
   15be0:	str	r4, [sp, #184]	; 0xb8
   15be4:	str	r4, [sp, #180]	; 0xb4
   15be8:	strb	r4, [sp, #188]	; 0xbc
   15bec:	strb	r4, [sp, #176]	; 0xb0
   15bf0:	ldr	r0, [sp, #20]
   15bf4:	str	r0, [sp, #192]	; 0xc0
   15bf8:	add	r0, sp, #176	; 0xb0
   15bfc:	bl	17258 <__assert_fail@plt+0x5558>
   15c00:	ldrb	r0, [sp, #200]	; 0xc8
   15c04:	cmp	r0, #0
   15c08:	beq	15c18 <__assert_fail@plt+0x3f18>
   15c0c:	ldr	r0, [sp, #204]	; 0xcc
   15c10:	cmp	r0, #0
   15c14:	beq	16124 <__assert_fail@plt+0x4424>
   15c18:	add	r0, sp, #176	; 0xb0
   15c1c:	add	r0, r0, #16
   15c20:	str	r0, [sp, #12]
   15c24:	add	r0, sp, #24
   15c28:	add	r0, r0, #4
   15c2c:	str	r0, [sp, #4]
   15c30:	mov	sl, #0
   15c34:	mov	r0, #1
   15c38:	str	r0, [sp, #8]
   15c3c:	sub	r9, fp, #144	; 0x90
   15c40:	mov	r6, #0
   15c44:	mov	r7, #0
   15c48:	mov	r1, #0
   15c4c:	mov	r4, r7
   15c50:	add	r0, r6, r6, lsl #2
   15c54:	cmp	r7, r0
   15c58:	bcc	15d0c <__assert_fail@plt+0x400c>
   15c5c:	ldr	r0, [sp, #8]
   15c60:	tst	r0, #1
   15c64:	beq	15d0c <__assert_fail@plt+0x400c>
   15c68:	cmp	r6, #10
   15c6c:	bcc	15d0c <__assert_fail@plt+0x400c>
   15c70:	subs	r0, r4, r1
   15c74:	beq	15cbc <__assert_fail@plt+0x3fbc>
   15c78:	sub	r7, r1, r4
   15c7c:	b	15c9c <__assert_fail@plt+0x3f9c>
   15c80:	strb	sl, [fp, #-132]	; 0xffffff7c
   15c84:	ldr	r0, [fp, #-128]	; 0xffffff80
   15c88:	ldr	r1, [fp, #-124]	; 0xffffff84
   15c8c:	add	r0, r0, r1
   15c90:	str	r0, [fp, #-128]	; 0xffffff80
   15c94:	adds	r7, r7, #1
   15c98:	bcs	15cbc <__assert_fail@plt+0x3fbc>
   15c9c:	mov	r0, r9
   15ca0:	bl	17258 <__assert_fail@plt+0x5558>
   15ca4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15ca8:	cmp	r0, #0
   15cac:	beq	15c80 <__assert_fail@plt+0x3f80>
   15cb0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15cb4:	cmp	r0, #0
   15cb8:	bne	15c80 <__assert_fail@plt+0x3f80>
   15cbc:	mov	r0, r9
   15cc0:	bl	17258 <__assert_fail@plt+0x5558>
   15cc4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15cc8:	cmp	r0, #0
   15ccc:	beq	15d08 <__assert_fail@plt+0x4008>
   15cd0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15cd4:	cmp	r0, #0
   15cd8:	mov	r1, r4
   15cdc:	bne	15d0c <__assert_fail@plt+0x400c>
   15ce0:	ldr	r0, [sp, #20]
   15ce4:	mov	r1, r5
   15ce8:	add	r2, sp, #80	; 0x50
   15cec:	bl	1614c <__assert_fail@plt+0x444c>
   15cf0:	mov	r1, #0
   15cf4:	str	r1, [sp, #8]
   15cf8:	cmp	r0, #0
   15cfc:	mov	r1, r4
   15d00:	beq	15d0c <__assert_fail@plt+0x400c>
   15d04:	b	16138 <__assert_fail@plt+0x4438>
   15d08:	mov	r1, r4
   15d0c:	str	r1, [sp, #16]
   15d10:	add	r0, sp, #136	; 0x88
   15d14:	ldr	r1, [sp, #12]
   15d18:	bl	28ee8 <__assert_fail@plt+0x171e8>
   15d1c:	ldrb	r0, [sp, #144]	; 0x90
   15d20:	cmp	r0, #0
   15d24:	beq	15d34 <__assert_fail@plt+0x4034>
   15d28:	ldr	r0, [sp, #148]	; 0x94
   15d2c:	bl	1194c <towlower@plt>
   15d30:	str	r0, [sp, #148]	; 0x94
   15d34:	add	r7, r4, #1
   15d38:	ldrb	r0, [sp, #144]	; 0x90
   15d3c:	cmp	r0, #0
   15d40:	ldrbne	r0, [fp, #-176]	; 0xffffff50
   15d44:	cmpne	r0, #0
   15d48:	bne	15d74 <__assert_fail@plt+0x4074>
   15d4c:	ldr	r2, [sp, #140]	; 0x8c
   15d50:	ldr	r0, [fp, #-180]	; 0xffffff4c
   15d54:	cmp	r2, r0
   15d58:	bne	15f10 <__assert_fail@plt+0x4210>
   15d5c:	ldr	r1, [fp, #-184]	; 0xffffff48
   15d60:	ldr	r0, [sp, #136]	; 0x88
   15d64:	bl	11ad8 <bcmp@plt>
   15d68:	cmp	r0, #0
   15d6c:	bne	15f10 <__assert_fail@plt+0x4210>
   15d70:	b	15d84 <__assert_fail@plt+0x4084>
   15d74:	ldr	r0, [fp, #-172]	; 0xffffff54
   15d78:	ldr	r1, [sp, #148]	; 0x94
   15d7c:	cmp	r1, r0
   15d80:	bne	15f10 <__assert_fail@plt+0x4210>
   15d84:	add	r2, sp, #176	; 0xb0
   15d88:	mov	r0, r2
   15d8c:	mov	r1, #48	; 0x30
   15d90:	vld1.64	{d16-d17}, [r0], r1
   15d94:	ldr	r1, [sp, #12]
   15d98:	vld1.64	{d18-d19}, [r1]
   15d9c:	add	r3, sp, #80	; 0x50
   15da0:	add	r1, r3, #16
   15da4:	add	r2, r2, #32
   15da8:	vld1.64	{d20-d21}, [r2]
   15dac:	vldr	d22, [r0]
   15db0:	vst1.64	{d18-d19}, [r1]
   15db4:	add	r0, r3, #32
   15db8:	vst1.64	{d20-d21}, [r0]
   15dbc:	mov	r0, r3
   15dc0:	mov	r1, #12
   15dc4:	vst1.64	{d16-d17}, [r0], r1
   15dc8:	strb	sl, [r0]
   15dcc:	str	r5, [sp, #40]	; 0x28
   15dd0:	strb	sl, [sp, #24]
   15dd4:	vstr	d22, [sp, #128]	; 0x80
   15dd8:	ldr	r0, [sp, #96]	; 0x60
   15ddc:	ldr	r1, [sp, #100]	; 0x64
   15de0:	add	r0, r0, r1
   15de4:	str	r0, [sp, #96]	; 0x60
   15de8:	ldr	r0, [sp, #4]
   15dec:	str	sl, [r0]
   15df0:	str	sl, [r0, #4]
   15df4:	strb	sl, [sp, #36]	; 0x24
   15df8:	add	r0, sp, #24
   15dfc:	bl	17258 <__assert_fail@plt+0x5558>
   15e00:	ldrb	r0, [sp, #48]	; 0x30
   15e04:	cmp	r0, #0
   15e08:	beq	15e18 <__assert_fail@plt+0x4118>
   15e0c:	ldr	r0, [sp, #52]	; 0x34
   15e10:	cmp	r0, #0
   15e14:	beq	16148 <__assert_fail@plt+0x4448>
   15e18:	strb	sl, [sp, #36]	; 0x24
   15e1c:	ldr	r0, [sp, #40]	; 0x28
   15e20:	ldr	r1, [sp, #44]	; 0x2c
   15e24:	add	r0, r0, r1
   15e28:	str	r0, [sp, #40]	; 0x28
   15e2c:	add	r0, sp, #24
   15e30:	bl	17258 <__assert_fail@plt+0x5558>
   15e34:	ldrb	r0, [sp, #48]	; 0x30
   15e38:	cmp	r0, #0
   15e3c:	beq	15e4c <__assert_fail@plt+0x414c>
   15e40:	ldr	r0, [sp, #52]	; 0x34
   15e44:	cmp	r0, #0
   15e48:	beq	16130 <__assert_fail@plt+0x4430>
   15e4c:	add	r7, r4, #2
   15e50:	add	r0, sp, #80	; 0x50
   15e54:	bl	17258 <__assert_fail@plt+0x5558>
   15e58:	ldr	r0, [sp, #108]	; 0x6c
   15e5c:	ldrb	r1, [sp, #104]	; 0x68
   15e60:	cmp	r0, #0
   15e64:	bne	15e70 <__assert_fail@plt+0x4170>
   15e68:	cmp	r1, #0
   15e6c:	bne	16120 <__assert_fail@plt+0x4420>
   15e70:	cmp	r1, #0
   15e74:	ldrbne	r1, [sp, #48]	; 0x30
   15e78:	cmpne	r1, #0
   15e7c:	bne	15ea8 <__assert_fail@plt+0x41a8>
   15e80:	ldr	r2, [sp, #100]	; 0x64
   15e84:	ldr	r0, [sp, #44]	; 0x2c
   15e88:	cmp	r2, r0
   15e8c:	bne	15f10 <__assert_fail@plt+0x4210>
   15e90:	ldr	r1, [sp, #40]	; 0x28
   15e94:	ldr	r0, [sp, #96]	; 0x60
   15e98:	bl	11ad8 <bcmp@plt>
   15e9c:	cmp	r0, #0
   15ea0:	beq	15ec0 <__assert_fail@plt+0x41c0>
   15ea4:	b	15f10 <__assert_fail@plt+0x4210>
   15ea8:	bl	1194c <towlower@plt>
   15eac:	mov	r4, r0
   15eb0:	ldr	r0, [sp, #52]	; 0x34
   15eb4:	bl	1194c <towlower@plt>
   15eb8:	cmp	r4, r0
   15ebc:	bne	15f10 <__assert_fail@plt+0x4210>
   15ec0:	strb	sl, [sp, #92]	; 0x5c
   15ec4:	strb	sl, [sp, #36]	; 0x24
   15ec8:	ldr	r0, [sp, #96]	; 0x60
   15ecc:	ldr	r1, [sp, #100]	; 0x64
   15ed0:	add	r0, r0, r1
   15ed4:	str	r0, [sp, #96]	; 0x60
   15ed8:	ldr	r0, [sp, #40]	; 0x28
   15edc:	ldr	r1, [sp, #44]	; 0x2c
   15ee0:	add	r0, r0, r1
   15ee4:	str	r0, [sp, #40]	; 0x28
   15ee8:	add	r0, sp, #24
   15eec:	bl	17258 <__assert_fail@plt+0x5558>
   15ef0:	add	r7, r7, #1
   15ef4:	ldrb	r0, [sp, #48]	; 0x30
   15ef8:	cmp	r0, #0
   15efc:	beq	15e50 <__assert_fail@plt+0x4150>
   15f00:	ldr	r0, [sp, #52]	; 0x34
   15f04:	cmp	r0, #0
   15f08:	bne	15e50 <__assert_fail@plt+0x4150>
   15f0c:	b	16130 <__assert_fail@plt+0x4430>
   15f10:	add	r6, r6, #1
   15f14:	mov	r4, #0
   15f18:	strb	r4, [sp, #188]	; 0xbc
   15f1c:	ldr	r0, [sp, #192]	; 0xc0
   15f20:	ldr	r1, [sp, #196]	; 0xc4
   15f24:	add	r0, r0, r1
   15f28:	str	r0, [sp, #192]	; 0xc0
   15f2c:	add	r0, sp, #176	; 0xb0
   15f30:	bl	17258 <__assert_fail@plt+0x5558>
   15f34:	ldrb	r0, [sp, #200]	; 0xc8
   15f38:	cmp	r0, #0
   15f3c:	ldr	r1, [sp, #16]
   15f40:	beq	15c4c <__assert_fail@plt+0x3f4c>
   15f44:	ldr	r0, [sp, #204]	; 0xcc
   15f48:	cmp	r0, #0
   15f4c:	bne	15c4c <__assert_fail@plt+0x3f4c>
   15f50:	b	16124 <__assert_fail@plt+0x4424>
   15f54:	ldrb	r7, [r5]
   15f58:	cmp	r7, #0
   15f5c:	beq	16118 <__assert_fail@plt+0x4418>
   15f60:	bl	11ab4 <__ctype_b_loc@plt>
   15f64:	mov	r9, r0
   15f68:	ldr	r0, [r0]
   15f6c:	add	r0, r0, r7, lsl #1
   15f70:	ldrb	r0, [r0, #1]
   15f74:	tst	r0, #1
   15f78:	beq	15f88 <__assert_fail@plt+0x4288>
   15f7c:	bl	11a90 <__ctype_tolower_loc@plt>
   15f80:	ldr	r0, [r0]
   15f84:	ldrb	r7, [r0, r7, lsl #2]
   15f88:	ldr	r0, [sp, #20]
   15f8c:	ldrb	r0, [r0]
   15f90:	cmp	r0, #0
   15f94:	beq	16120 <__assert_fail@plt+0x4420>
   15f98:	mov	r0, #0
   15f9c:	str	r0, [sp, #8]
   15fa0:	mov	r0, #1
   15fa4:	str	r0, [sp, #12]
   15fa8:	mov	r8, r5
   15fac:	str	r5, [sp, #16]
   15fb0:	mov	r5, #0
   15fb4:	mov	sl, #0
   15fb8:	str	r7, [sp, #4]
   15fbc:	str	r9, [sp]
   15fc0:	add	r0, sl, sl, lsl #2
   15fc4:	cmp	r5, r0
   15fc8:	cmpcs	sl, #10
   15fcc:	bcs	16074 <__assert_fail@plt+0x4374>
   15fd0:	ldr	r0, [sp, #20]
   15fd4:	ldrb	r6, [r0]
   15fd8:	ldr	r4, [r9]
   15fdc:	add	r0, r4, r6, lsl #1
   15fe0:	ldrb	r0, [r0, #1]
   15fe4:	tst	r0, #1
   15fe8:	beq	15ff8 <__assert_fail@plt+0x42f8>
   15fec:	bl	11a90 <__ctype_tolower_loc@plt>
   15ff0:	ldr	r0, [r0]
   15ff4:	ldr	r6, [r0, r6, lsl #2]
   15ff8:	cmp	r6, r7
   15ffc:	bne	1606c <__assert_fail@plt+0x436c>
   16000:	mov	r7, #1
   16004:	b	16014 <__assert_fail@plt+0x4314>
   16008:	add	r7, r7, #1
   1600c:	cmp	r6, r9
   16010:	bne	160ec <__assert_fail@plt+0x43ec>
   16014:	ldrb	r9, [r8, r7]
   16018:	cmp	r9, #0
   1601c:	beq	16118 <__assert_fail@plt+0x4418>
   16020:	ldr	r0, [sp, #20]
   16024:	ldrb	r6, [r0, r7]
   16028:	cmp	r6, #0
   1602c:	beq	16120 <__assert_fail@plt+0x4420>
   16030:	add	r0, r4, r6, lsl #1
   16034:	ldrb	r0, [r0, #1]
   16038:	tst	r0, #1
   1603c:	beq	1604c <__assert_fail@plt+0x434c>
   16040:	bl	11a90 <__ctype_tolower_loc@plt>
   16044:	ldr	r0, [r0]
   16048:	ldr	r6, [r0, r6, lsl #2]
   1604c:	add	r0, r4, r9, lsl #1
   16050:	ldrb	r0, [r0, #1]
   16054:	tst	r0, #1
   16058:	beq	16008 <__assert_fail@plt+0x4308>
   1605c:	bl	11a90 <__ctype_tolower_loc@plt>
   16060:	ldr	r0, [r0]
   16064:	ldr	r9, [r0, r9, lsl #2]
   16068:	b	16008 <__assert_fail@plt+0x4308>
   1606c:	add	r5, r5, #1
   16070:	b	160f8 <__assert_fail@plt+0x43f8>
   16074:	ldr	r0, [sp, #12]
   16078:	tst	r0, #1
   1607c:	beq	15fd0 <__assert_fail@plt+0x42d0>
   16080:	ldr	r4, [sp, #16]
   16084:	cmp	r4, #0
   16088:	beq	160b0 <__assert_fail@plt+0x43b0>
   1608c:	ldr	r0, [sp, #8]
   16090:	sub	r1, r5, r0
   16094:	mov	r0, r4
   16098:	bl	11bc8 <strnlen@plt>
   1609c:	ldrb	r0, [r4, r0]!
   160a0:	str	r4, [sp, #16]
   160a4:	cmp	r0, #0
   160a8:	str	r5, [sp, #8]
   160ac:	bne	15fd0 <__assert_fail@plt+0x42d0>
   160b0:	mov	r4, r8
   160b4:	mov	r0, r8
   160b8:	bl	11af0 <strlen@plt>
   160bc:	mov	r2, r0
   160c0:	ldr	r0, [sp, #20]
   160c4:	mov	r1, r8
   160c8:	sub	r3, fp, #88	; 0x58
   160cc:	bl	16570 <__assert_fail@plt+0x4870>
   160d0:	mov	r1, #0
   160d4:	str	r1, [sp, #16]
   160d8:	cmp	r0, #0
   160dc:	mov	r0, #0
   160e0:	str	r0, [sp, #12]
   160e4:	beq	15fd0 <__assert_fail@plt+0x42d0>
   160e8:	b	16140 <__assert_fail@plt+0x4440>
   160ec:	add	r5, r5, r7
   160f0:	ldr	r7, [sp, #4]
   160f4:	ldr	r9, [sp]
   160f8:	add	sl, sl, #1
   160fc:	ldr	r1, [sp, #20]
   16100:	ldrb	r0, [r1, #1]!
   16104:	str	r1, [sp, #20]
   16108:	mov	r4, #0
   1610c:	cmp	r0, #0
   16110:	bne	15fc0 <__assert_fail@plt+0x42c0>
   16114:	b	16124 <__assert_fail@plt+0x4424>
   16118:	ldr	r4, [sp, #20]
   1611c:	b	16124 <__assert_fail@plt+0x4424>
   16120:	mov	r4, #0
   16124:	mov	r0, r4
   16128:	sub	sp, fp, #28
   1612c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16130:	ldr	r4, [sp, #192]	; 0xc0
   16134:	b	16124 <__assert_fail@plt+0x4424>
   16138:	ldr	r4, [sp, #80]	; 0x50
   1613c:	b	16124 <__assert_fail@plt+0x4424>
   16140:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16144:	b	16124 <__assert_fail@plt+0x4424>
   16148:	bl	11cc4 <abort@plt>
   1614c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16150:	add	fp, sp, #28
   16154:	sub	sp, sp, #172	; 0xac
   16158:	mov	r9, r2
   1615c:	mov	r4, r1
   16160:	mov	r5, r0
   16164:	mov	r0, r1
   16168:	bl	16788 <__assert_fail@plt+0x4a88>
   1616c:	mov	r6, r0
   16170:	mov	r7, #0
   16174:	movw	r0, #47662	; 0xba2e
   16178:	movt	r0, #744	; 0x2e8
   1617c:	cmp	r6, r0
   16180:	bhi	16560 <__assert_fail@plt+0x4860>
   16184:	mov	r0, #44	; 0x2c
   16188:	mul	r0, r6, r0
   1618c:	cmp	r0, #4016	; 0xfb0
   16190:	bhi	161b8 <__assert_fail@plt+0x44b8>
   16194:	add	r0, r0, #22
   16198:	bic	r0, r0, #7
   1619c:	sub	r0, sp, r0
   161a0:	add	r1, r0, #15
   161a4:	bic	r8, r1, #15
   161a8:	mov	sp, r0
   161ac:	cmp	r8, #0
   161b0:	bne	161c8 <__assert_fail@plt+0x44c8>
   161b4:	b	16560 <__assert_fail@plt+0x4860>
   161b8:	bl	28e20 <__assert_fail@plt+0x17120>
   161bc:	mov	r8, r0
   161c0:	cmp	r8, #0
   161c4:	beq	16560 <__assert_fail@plt+0x4860>
   161c8:	str	r5, [fp, #-196]	; 0xffffff3c
   161cc:	mov	sl, #0
   161d0:	str	sl, [fp, #-80]	; 0xffffffb0
   161d4:	str	sl, [fp, #-84]	; 0xffffffac
   161d8:	strb	sl, [fp, #-76]	; 0xffffffb4
   161dc:	strb	sl, [fp, #-88]	; 0xffffffa8
   161e0:	str	r4, [fp, #-72]	; 0xffffffb8
   161e4:	sub	r4, fp, #88	; 0x58
   161e8:	mov	r0, r4
   161ec:	bl	17258 <__assert_fail@plt+0x5558>
   161f0:	add	r0, r6, r6, lsl #2
   161f4:	add	r0, r8, r0, lsl #3
   161f8:	str	r0, [fp, #-188]	; 0xffffff44
   161fc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16200:	cmp	r0, #0
   16204:	beq	16214 <__assert_fail@plt+0x4514>
   16208:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1620c:	cmp	r0, #0
   16210:	beq	1627c <__assert_fail@plt+0x457c>
   16214:	add	r4, r4, #16
   16218:	sub	r7, fp, #88	; 0x58
   1621c:	mov	r5, r8
   16220:	mov	r0, r5
   16224:	mov	r1, r4
   16228:	bl	28ee8 <__assert_fail@plt+0x171e8>
   1622c:	ldrb	r0, [r5, #8]
   16230:	cmp	r0, #0
   16234:	beq	16244 <__assert_fail@plt+0x4544>
   16238:	ldr	r0, [r5, #12]
   1623c:	bl	1194c <towlower@plt>
   16240:	str	r0, [r5, #12]
   16244:	strb	sl, [fp, #-76]	; 0xffffffb4
   16248:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1624c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16250:	add	r0, r0, r1
   16254:	str	r0, [fp, #-72]	; 0xffffffb8
   16258:	mov	r0, r7
   1625c:	bl	17258 <__assert_fail@plt+0x5558>
   16260:	add	r5, r5, #40	; 0x28
   16264:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16268:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1626c:	cmp	r1, #0
   16270:	beq	16220 <__assert_fail@plt+0x4520>
   16274:	cmp	r0, #0
   16278:	bne	16220 <__assert_fail@plt+0x4520>
   1627c:	str	r9, [fp, #-200]	; 0xffffff38
   16280:	mov	r0, #1
   16284:	ldr	r3, [fp, #-188]	; 0xffffff44
   16288:	str	r0, [r3, #4]
   1628c:	str	r6, [fp, #-192]	; 0xffffff40
   16290:	cmp	r6, #3
   16294:	bcc	16360 <__assert_fail@plt+0x4660>
   16298:	mov	r4, #2
   1629c:	mov	r5, #0
   162a0:	b	162c0 <__assert_fail@plt+0x45c0>
   162a4:	mov	r5, #0
   162a8:	mov	r0, r4
   162ac:	str	r0, [r3, r4, lsl #2]
   162b0:	add	r4, r4, #1
   162b4:	ldr	r0, [fp, #-192]	; 0xffffff40
   162b8:	cmp	r4, r0
   162bc:	beq	16360 <__assert_fail@plt+0x4660>
   162c0:	add	r0, r4, r4, lsl #2
   162c4:	add	r0, r8, r0, lsl #3
   162c8:	sub	sl, r0, #40	; 0x28
   162cc:	sub	r6, r0, #36	; 0x24
   162d0:	sub	r7, r0, #28
   162d4:	ldrb	r9, [r0, #-32]	; 0xffffffe0
   162d8:	cmp	r9, #0
   162dc:	beq	16308 <__assert_fail@plt+0x4608>
   162e0:	add	r0, r5, r5, lsl #2
   162e4:	add	r0, r8, r0, lsl #3
   162e8:	ldrb	r1, [r0, #8]
   162ec:	cmp	r1, #0
   162f0:	beq	16308 <__assert_fail@plt+0x4608>
   162f4:	ldr	r0, [r0, #12]
   162f8:	ldr	r1, [r7]
   162fc:	cmp	r1, r0
   16300:	bne	16338 <__assert_fail@plt+0x4638>
   16304:	b	16354 <__assert_fail@plt+0x4654>
   16308:	add	r0, r5, r5, lsl #2
   1630c:	add	r1, r8, r0, lsl #3
   16310:	ldr	r1, [r1, #4]
   16314:	ldr	r2, [r6]
   16318:	cmp	r2, r1
   1631c:	bne	16338 <__assert_fail@plt+0x4638>
   16320:	ldr	r1, [r8, r0, lsl #3]
   16324:	ldr	r0, [sl]
   16328:	bl	11ad8 <bcmp@plt>
   1632c:	ldr	r3, [fp, #-188]	; 0xffffff44
   16330:	cmp	r0, #0
   16334:	beq	16354 <__assert_fail@plt+0x4654>
   16338:	cmp	r5, #0
   1633c:	beq	162a4 <__assert_fail@plt+0x45a4>
   16340:	ldr	r0, [r3, r5, lsl #2]
   16344:	sub	r5, r5, r0
   16348:	cmp	r9, #0
   1634c:	bne	162e0 <__assert_fail@plt+0x45e0>
   16350:	b	16308 <__assert_fail@plt+0x4608>
   16354:	add	r5, r5, #1
   16358:	sub	r0, r4, r5
   1635c:	b	162ac <__assert_fail@plt+0x45ac>
   16360:	mov	r5, #0
   16364:	ldr	r0, [fp, #-200]	; 0xffffff38
   16368:	str	r5, [r0]
   1636c:	str	r5, [fp, #-80]	; 0xffffffb0
   16370:	str	r5, [fp, #-84]	; 0xffffffac
   16374:	str	r5, [fp, #-136]	; 0xffffff78
   16378:	str	r5, [fp, #-140]	; 0xffffff74
   1637c:	strb	r5, [fp, #-76]	; 0xffffffb4
   16380:	strb	r5, [fp, #-88]	; 0xffffffa8
   16384:	ldr	r0, [fp, #-196]	; 0xffffff3c
   16388:	str	r0, [fp, #-72]	; 0xffffffb8
   1638c:	str	r0, [fp, #-128]	; 0xffffff80
   16390:	strb	r5, [fp, #-132]	; 0xffffff7c
   16394:	strb	r5, [fp, #-144]	; 0xffffff70
   16398:	sub	r4, fp, #144	; 0x90
   1639c:	mov	r0, r4
   163a0:	bl	17258 <__assert_fail@plt+0x5558>
   163a4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   163a8:	cmp	r0, #0
   163ac:	beq	163bc <__assert_fail@plt+0x46bc>
   163b0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   163b4:	cmp	r0, #0
   163b8:	beq	16554 <__assert_fail@plt+0x4854>
   163bc:	add	r6, r4, #16
   163c0:	sub	r9, fp, #184	; 0xb8
   163c4:	sub	r7, fp, #144	; 0x90
   163c8:	sub	r4, fp, #88	; 0x58
   163cc:	mov	sl, #0
   163d0:	str	r6, [fp, #-196]	; 0xffffff3c
   163d4:	mov	r0, r9
   163d8:	mov	r1, r6
   163dc:	bl	28ee8 <__assert_fail@plt+0x171e8>
   163e0:	ldrb	r0, [fp, #-176]	; 0xffffff50
   163e4:	cmp	r0, #0
   163e8:	beq	163f8 <__assert_fail@plt+0x46f8>
   163ec:	ldr	r0, [fp, #-172]	; 0xffffff54
   163f0:	bl	1194c <towlower@plt>
   163f4:	str	r0, [fp, #-172]	; 0xffffff54
   163f8:	add	r0, sl, sl, lsl #2
   163fc:	add	r1, r8, r0, lsl #3
   16400:	ldrb	r2, [r1, #8]
   16404:	cmp	r2, #0
   16408:	ldrbne	r2, [fp, #-176]	; 0xffffff50
   1640c:	cmpne	r2, #0
   16410:	bne	164a0 <__assert_fail@plt+0x47a0>
   16414:	ldr	r2, [r1, #4]
   16418:	ldr	r1, [fp, #-180]	; 0xffffff4c
   1641c:	cmp	r2, r1
   16420:	bne	16438 <__assert_fail@plt+0x4738>
   16424:	ldr	r0, [r8, r0, lsl #3]
   16428:	ldr	r1, [fp, #-184]	; 0xffffff48
   1642c:	bl	11ad8 <bcmp@plt>
   16430:	cmp	r0, #0
   16434:	beq	164b0 <__assert_fail@plt+0x47b0>
   16438:	cmp	sl, #0
   1643c:	beq	164d8 <__assert_fail@plt+0x47d8>
   16440:	ldr	r0, [fp, #-188]	; 0xffffff44
   16444:	ldr	r6, [r0, sl, lsl #2]
   16448:	sub	sl, sl, r6
   1644c:	cmp	r6, #0
   16450:	bne	16474 <__assert_fail@plt+0x4774>
   16454:	b	16498 <__assert_fail@plt+0x4798>
   16458:	strb	r5, [fp, #-76]	; 0xffffffb4
   1645c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16460:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16464:	add	r0, r0, r1
   16468:	str	r0, [fp, #-72]	; 0xffffffb8
   1646c:	subs	r6, r6, #1
   16470:	beq	16498 <__assert_fail@plt+0x4798>
   16474:	mov	r0, r4
   16478:	bl	17258 <__assert_fail@plt+0x5558>
   1647c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16480:	cmp	r0, #0
   16484:	beq	16458 <__assert_fail@plt+0x4758>
   16488:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1648c:	cmp	r0, #0
   16490:	bne	16458 <__assert_fail@plt+0x4758>
   16494:	b	1656c <__assert_fail@plt+0x486c>
   16498:	ldr	r6, [fp, #-196]	; 0xffffff3c
   1649c:	b	16524 <__assert_fail@plt+0x4824>
   164a0:	ldr	r0, [r1, #12]
   164a4:	ldr	r1, [fp, #-172]	; 0xffffff54
   164a8:	cmp	r0, r1
   164ac:	bne	16438 <__assert_fail@plt+0x4738>
   164b0:	strb	r5, [fp, #-132]	; 0xffffff7c
   164b4:	ldr	r0, [fp, #-128]	; 0xffffff80
   164b8:	ldr	r1, [fp, #-124]	; 0xffffff84
   164bc:	add	r0, r0, r1
   164c0:	str	r0, [fp, #-128]	; 0xffffff80
   164c4:	add	sl, sl, #1
   164c8:	ldr	r0, [fp, #-192]	; 0xffffff40
   164cc:	cmp	sl, r0
   164d0:	bne	16524 <__assert_fail@plt+0x4824>
   164d4:	b	16548 <__assert_fail@plt+0x4848>
   164d8:	mov	r0, r4
   164dc:	bl	17258 <__assert_fail@plt+0x5558>
   164e0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   164e4:	cmp	r0, #0
   164e8:	beq	164f8 <__assert_fail@plt+0x47f8>
   164ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   164f0:	cmp	r0, #0
   164f4:	beq	1656c <__assert_fail@plt+0x486c>
   164f8:	mov	sl, #0
   164fc:	strb	sl, [fp, #-76]	; 0xffffffb4
   16500:	strb	sl, [fp, #-132]	; 0xffffff7c
   16504:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16508:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1650c:	add	r0, r0, r1
   16510:	str	r0, [fp, #-72]	; 0xffffffb8
   16514:	ldr	r0, [fp, #-128]	; 0xffffff80
   16518:	ldr	r1, [fp, #-124]	; 0xffffff84
   1651c:	add	r0, r0, r1
   16520:	str	r0, [fp, #-128]	; 0xffffff80
   16524:	mov	r0, r7
   16528:	bl	17258 <__assert_fail@plt+0x5558>
   1652c:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16530:	cmp	r0, #0
   16534:	beq	163d4 <__assert_fail@plt+0x46d4>
   16538:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1653c:	cmp	r0, #0
   16540:	bne	163d4 <__assert_fail@plt+0x46d4>
   16544:	b	16554 <__assert_fail@plt+0x4854>
   16548:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1654c:	ldr	r1, [fp, #-200]	; 0xffffff38
   16550:	str	r0, [r1]
   16554:	mov	r0, r8
   16558:	bl	28e90 <__assert_fail@plt+0x17190>
   1655c:	mov	r7, #1
   16560:	mov	r0, r7
   16564:	sub	sp, fp, #28
   16568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1656c:	bl	11cc4 <abort@plt>
   16570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16574:	add	fp, sp, #28
   16578:	sub	sp, sp, #20
   1657c:	mov	r5, #0
   16580:	cmn	r2, #-536870911	; 0xe0000001
   16584:	bhi	1677c <__assert_fail@plt+0x4a7c>
   16588:	mov	r8, r3
   1658c:	mov	r7, r2
   16590:	mov	r6, r1
   16594:	str	r0, [fp, #-44]	; 0xffffffd4
   16598:	lsl	r0, r2, #2
   1659c:	cmp	r0, #4016	; 0xfb0
   165a0:	bhi	165c8 <__assert_fail@plt+0x48c8>
   165a4:	add	r0, r0, #22
   165a8:	bic	r0, r0, #7
   165ac:	sub	r0, sp, r0
   165b0:	add	r1, r0, #15
   165b4:	bic	r4, r1, #15
   165b8:	mov	sp, r0
   165bc:	cmp	r4, #0
   165c0:	bne	165d8 <__assert_fail@plt+0x48d8>
   165c4:	b	1677c <__assert_fail@plt+0x4a7c>
   165c8:	bl	28e20 <__assert_fail@plt+0x17120>
   165cc:	mov	r4, r0
   165d0:	cmp	r4, #0
   165d4:	beq	1677c <__assert_fail@plt+0x4a7c>
   165d8:	str	r8, [fp, #-48]	; 0xffffffd0
   165dc:	mov	r0, #1
   165e0:	str	r0, [r4, #4]
   165e4:	cmp	r7, #3
   165e8:	str	r7, [fp, #-36]	; 0xffffffdc
   165ec:	bcc	16694 <__assert_fail@plt+0x4994>
   165f0:	mov	r5, #0
   165f4:	mov	r7, #2
   165f8:	bl	11ab4 <__ctype_b_loc@plt>
   165fc:	str	r0, [fp, #-40]	; 0xffffffd8
   16600:	b	16620 <__assert_fail@plt+0x4920>
   16604:	add	r5, r5, #1
   16608:	sub	r0, r7, r5
   1660c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16610:	str	r0, [r4, r7, lsl #2]
   16614:	add	r7, r7, #1
   16618:	cmp	r7, r1
   1661c:	beq	16694 <__assert_fail@plt+0x4994>
   16620:	add	r0, r7, r6
   16624:	ldrb	r9, [r0, #-1]
   16628:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1662c:	ldr	sl, [r0]
   16630:	add	r0, sl, r9, lsl #1
   16634:	ldrb	r0, [r0, #1]
   16638:	tst	r0, #1
   1663c:	beq	1664c <__assert_fail@plt+0x494c>
   16640:	bl	11a90 <__ctype_tolower_loc@plt>
   16644:	ldr	r0, [r0]
   16648:	ldrb	r9, [r0, r9, lsl #2]
   1664c:	ldrb	r8, [r6, r5]
   16650:	add	r0, sl, r8, lsl #1
   16654:	ldrb	r0, [r0, #1]
   16658:	tst	r0, #1
   1665c:	beq	1666c <__assert_fail@plt+0x496c>
   16660:	bl	11a90 <__ctype_tolower_loc@plt>
   16664:	ldr	r0, [r0]
   16668:	ldr	r8, [r0, r8, lsl #2]
   1666c:	cmp	r9, r8
   16670:	beq	16604 <__assert_fail@plt+0x4904>
   16674:	cmp	r5, #0
   16678:	beq	16688 <__assert_fail@plt+0x4988>
   1667c:	ldr	r0, [r4, r5, lsl #2]
   16680:	sub	r5, r5, r0
   16684:	b	1664c <__assert_fail@plt+0x494c>
   16688:	mov	r5, #0
   1668c:	mov	r0, r7
   16690:	b	1660c <__assert_fail@plt+0x490c>
   16694:	mov	sl, #0
   16698:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1669c:	str	sl, [r0]
   166a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   166a4:	ldrb	r7, [r0]
   166a8:	cmp	r7, #0
   166ac:	beq	16770 <__assert_fail@plt+0x4a70>
   166b0:	bl	11ab4 <__ctype_b_loc@plt>
   166b4:	ldr	r9, [r0]
   166b8:	ldr	r8, [fp, #-44]	; 0xffffffd4
   166bc:	str	r8, [fp, #-40]	; 0xffffffd8
   166c0:	b	166e4 <__assert_fail@plt+0x49e4>
   166c4:	add	r8, r8, #1
   166c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   166cc:	add	r0, r0, #1
   166d0:	str	r0, [fp, #-40]	; 0xffffffd8
   166d4:	mov	sl, #0
   166d8:	ldrb	r7, [r8]
   166dc:	cmp	r7, #0
   166e0:	beq	16770 <__assert_fail@plt+0x4a70>
   166e4:	ldrb	r5, [r6, sl]
   166e8:	add	r0, r9, r5, lsl #1
   166ec:	ldrb	r0, [r0, #1]
   166f0:	tst	r0, #1
   166f4:	beq	16704 <__assert_fail@plt+0x4a04>
   166f8:	bl	11a90 <__ctype_tolower_loc@plt>
   166fc:	ldr	r0, [r0]
   16700:	ldr	r5, [r0, r5, lsl #2]
   16704:	uxtb	r7, r7
   16708:	add	r0, r9, r7, lsl #1
   1670c:	ldrb	r0, [r0, #1]
   16710:	tst	r0, #1
   16714:	beq	16724 <__assert_fail@plt+0x4a24>
   16718:	bl	11a90 <__ctype_tolower_loc@plt>
   1671c:	ldr	r0, [r0]
   16720:	ldr	r7, [r0, r7, lsl #2]
   16724:	cmp	r5, r7
   16728:	bne	16744 <__assert_fail@plt+0x4a44>
   1672c:	add	sl, sl, #1
   16730:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16734:	cmp	sl, r0
   16738:	beq	16764 <__assert_fail@plt+0x4a64>
   1673c:	add	r8, r8, #1
   16740:	b	166d8 <__assert_fail@plt+0x49d8>
   16744:	cmp	sl, #0
   16748:	beq	166c4 <__assert_fail@plt+0x49c4>
   1674c:	ldr	r0, [r4, sl, lsl #2]
   16750:	sub	sl, sl, r0
   16754:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16758:	add	r1, r1, r0
   1675c:	str	r1, [fp, #-40]	; 0xffffffd8
   16760:	b	166d8 <__assert_fail@plt+0x49d8>
   16764:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16768:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1676c:	str	r1, [r0]
   16770:	mov	r0, r4
   16774:	bl	28e90 <__assert_fail@plt+0x17190>
   16778:	mov	r5, #1
   1677c:	mov	r0, r5
   16780:	sub	sp, fp, #28
   16784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16788:	push	{r4, r5, r6, sl, fp, lr}
   1678c:	add	fp, sp, #16
   16790:	sub	sp, sp, #56	; 0x38
   16794:	mov	r5, r0
   16798:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   1679c:	cmp	r0, #2
   167a0:	bcc	1682c <__assert_fail@plt+0x4b2c>
   167a4:	mov	r4, #0
   167a8:	str	r4, [sp, #8]
   167ac:	str	r4, [sp, #4]
   167b0:	strb	r4, [sp, #12]
   167b4:	strb	r4, [sp]
   167b8:	str	r5, [sp, #16]
   167bc:	mov	r0, sp
   167c0:	bl	17258 <__assert_fail@plt+0x5558>
   167c4:	ldrb	r0, [sp, #24]
   167c8:	cmp	r0, #0
   167cc:	beq	167dc <__assert_fail@plt+0x4adc>
   167d0:	ldr	r0, [sp, #28]
   167d4:	cmp	r0, #0
   167d8:	beq	16820 <__assert_fail@plt+0x4b20>
   167dc:	mov	r6, #0
   167e0:	mov	r5, sp
   167e4:	mov	r4, #0
   167e8:	strb	r6, [sp, #12]
   167ec:	ldr	r0, [sp, #16]
   167f0:	ldr	r1, [sp, #20]
   167f4:	add	r0, r0, r1
   167f8:	str	r0, [sp, #16]
   167fc:	mov	r0, r5
   16800:	bl	17258 <__assert_fail@plt+0x5558>
   16804:	add	r4, r4, #1
   16808:	ldr	r0, [sp, #28]
   1680c:	ldrb	r1, [sp, #24]
   16810:	cmp	r1, #0
   16814:	beq	167e8 <__assert_fail@plt+0x4ae8>
   16818:	cmp	r0, #0
   1681c:	bne	167e8 <__assert_fail@plt+0x4ae8>
   16820:	mov	r0, r4
   16824:	sub	sp, fp, #16
   16828:	pop	{r4, r5, r6, sl, fp, pc}
   1682c:	mov	r0, r5
   16830:	sub	sp, fp, #16
   16834:	pop	{r4, r5, r6, sl, fp, lr}
   16838:	b	11af0 <strlen@plt>
   1683c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16840:	add	fp, sp, #28
   16844:	sub	sp, sp, #300	; 0x12c
   16848:	mov	r5, r1
   1684c:	mov	r6, r0
   16850:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   16854:	cmp	r0, #2
   16858:	bcc	16bec <__assert_fail@plt+0x4eec>
   1685c:	mov	r4, #0
   16860:	str	r4, [fp, #-80]	; 0xffffffb0
   16864:	str	r4, [fp, #-84]	; 0xffffffac
   16868:	strb	r4, [fp, #-76]	; 0xffffffb4
   1686c:	strb	r4, [fp, #-88]	; 0xffffffa8
   16870:	str	r5, [fp, #-72]	; 0xffffffb8
   16874:	sub	r0, fp, #88	; 0x58
   16878:	bl	17258 <__assert_fail@plt+0x5558>
   1687c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16880:	cmp	r0, #0
   16884:	beq	16894 <__assert_fail@plt+0x4b94>
   16888:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1688c:	cmp	r0, #0
   16890:	beq	16cec <__assert_fail@plt+0x4fec>
   16894:	str	r4, [fp, #-136]	; 0xffffff78
   16898:	str	r4, [fp, #-140]	; 0xffffff74
   1689c:	str	r5, [fp, #-128]	; 0xffffff80
   168a0:	strb	r4, [fp, #-132]	; 0xffffff7c
   168a4:	strb	r4, [fp, #-144]	; 0xffffff70
   168a8:	str	r4, [sp, #136]	; 0x88
   168ac:	str	r4, [sp, #132]	; 0x84
   168b0:	str	r6, [sp, #144]	; 0x90
   168b4:	strb	r4, [sp, #140]	; 0x8c
   168b8:	strb	r4, [sp, #128]	; 0x80
   168bc:	add	r7, sp, #128	; 0x80
   168c0:	mov	r0, r7
   168c4:	bl	17258 <__assert_fail@plt+0x5558>
   168c8:	ldrb	r0, [sp, #152]	; 0x98
   168cc:	cmp	r0, #0
   168d0:	beq	168e0 <__assert_fail@plt+0x4be0>
   168d4:	ldr	r0, [sp, #156]	; 0x9c
   168d8:	cmp	r0, #0
   168dc:	beq	16cf8 <__assert_fail@plt+0x4ff8>
   168e0:	add	r0, sp, #16
   168e4:	add	r0, r0, #4
   168e8:	str	r0, [sp, #4]
   168ec:	mov	r0, #1
   168f0:	str	r0, [sp, #8]
   168f4:	mov	r8, #0
   168f8:	add	r0, r7, #16
   168fc:	str	r0, [sp]
   16900:	mov	r0, #0
   16904:	str	r0, [sp, #12]
   16908:	mov	sl, #0
   1690c:	mov	r9, #0
   16910:	mov	r4, sl
   16914:	add	r0, r9, r9, lsl #2
   16918:	cmp	sl, r0
   1691c:	bcc	169e0 <__assert_fail@plt+0x4ce0>
   16920:	ldr	r0, [sp, #8]
   16924:	tst	r0, #1
   16928:	beq	169e0 <__assert_fail@plt+0x4ce0>
   1692c:	cmp	r9, #10
   16930:	bcc	169e0 <__assert_fail@plt+0x4ce0>
   16934:	mov	sl, r7
   16938:	ldr	r1, [sp, #12]
   1693c:	subs	r0, r4, r1
   16940:	beq	16988 <__assert_fail@plt+0x4c88>
   16944:	sub	r7, r1, r4
   16948:	b	16968 <__assert_fail@plt+0x4c68>
   1694c:	strb	r8, [fp, #-132]	; 0xffffff7c
   16950:	ldr	r0, [fp, #-128]	; 0xffffff80
   16954:	ldr	r1, [fp, #-124]	; 0xffffff84
   16958:	add	r0, r0, r1
   1695c:	str	r0, [fp, #-128]	; 0xffffff80
   16960:	adds	r7, r7, #1
   16964:	bcs	16988 <__assert_fail@plt+0x4c88>
   16968:	sub	r0, fp, #144	; 0x90
   1696c:	bl	17258 <__assert_fail@plt+0x5558>
   16970:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16974:	cmp	r0, #0
   16978:	beq	1694c <__assert_fail@plt+0x4c4c>
   1697c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16980:	cmp	r0, #0
   16984:	bne	1694c <__assert_fail@plt+0x4c4c>
   16988:	sub	r0, fp, #144	; 0x90
   1698c:	bl	17258 <__assert_fail@plt+0x5558>
   16990:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16994:	cmp	r0, #0
   16998:	beq	169d8 <__assert_fail@plt+0x4cd8>
   1699c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   169a0:	cmp	r0, #0
   169a4:	str	r4, [sp, #12]
   169a8:	mov	r7, sl
   169ac:	bne	169e0 <__assert_fail@plt+0x4ce0>
   169b0:	mov	r0, r6
   169b4:	mov	r1, r5
   169b8:	add	r2, sp, #72	; 0x48
   169bc:	bl	16d20 <__assert_fail@plt+0x5020>
   169c0:	mov	r1, #0
   169c4:	str	r1, [sp, #8]
   169c8:	cmp	r0, #0
   169cc:	str	r4, [sp, #12]
   169d0:	beq	169e0 <__assert_fail@plt+0x4ce0>
   169d4:	b	16d14 <__assert_fail@plt+0x5014>
   169d8:	str	r4, [sp, #12]
   169dc:	mov	r7, sl
   169e0:	add	sl, r4, #1
   169e4:	ldrb	r0, [sp, #152]	; 0x98
   169e8:	cmp	r0, #0
   169ec:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   169f0:	cmpne	r0, #0
   169f4:	bne	16a20 <__assert_fail@plt+0x4d20>
   169f8:	ldr	r2, [sp, #148]	; 0x94
   169fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16a00:	cmp	r2, r0
   16a04:	bne	16bac <__assert_fail@plt+0x4eac>
   16a08:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16a0c:	ldr	r0, [sp, #144]	; 0x90
   16a10:	bl	11ad8 <bcmp@plt>
   16a14:	cmp	r0, #0
   16a18:	bne	16bac <__assert_fail@plt+0x4eac>
   16a1c:	b	16a30 <__assert_fail@plt+0x4d30>
   16a20:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16a24:	ldr	r1, [sp, #156]	; 0x9c
   16a28:	cmp	r1, r0
   16a2c:	bne	16bac <__assert_fail@plt+0x4eac>
   16a30:	mov	r0, r7
   16a34:	mov	r1, #48	; 0x30
   16a38:	vld1.64	{d16-d17}, [r0], r1
   16a3c:	ldr	r1, [sp]
   16a40:	vld1.64	{d18-d19}, [r1]
   16a44:	add	r3, sp, #72	; 0x48
   16a48:	add	r1, r3, #16
   16a4c:	add	r2, r7, #32
   16a50:	vld1.64	{d20-d21}, [r2]
   16a54:	vldr	d22, [r0]
   16a58:	vst1.64	{d18-d19}, [r1]
   16a5c:	add	r0, r3, #32
   16a60:	vst1.64	{d20-d21}, [r0]
   16a64:	mov	r0, r3
   16a68:	mov	r1, #12
   16a6c:	vst1.64	{d16-d17}, [r0], r1
   16a70:	strb	r8, [r0]
   16a74:	str	r5, [sp, #32]
   16a78:	strb	r8, [sp, #16]
   16a7c:	vstr	d22, [sp, #120]	; 0x78
   16a80:	ldr	r0, [sp, #88]	; 0x58
   16a84:	ldr	r1, [sp, #92]	; 0x5c
   16a88:	add	r0, r0, r1
   16a8c:	str	r0, [sp, #88]	; 0x58
   16a90:	ldr	r0, [sp, #4]
   16a94:	str	r8, [r0]
   16a98:	str	r8, [r0, #4]
   16a9c:	strb	r8, [sp, #28]
   16aa0:	add	r0, sp, #16
   16aa4:	bl	17258 <__assert_fail@plt+0x5558>
   16aa8:	ldrb	r0, [sp, #40]	; 0x28
   16aac:	cmp	r0, #0
   16ab0:	beq	16ac0 <__assert_fail@plt+0x4dc0>
   16ab4:	ldr	r0, [sp, #44]	; 0x2c
   16ab8:	cmp	r0, #0
   16abc:	beq	16d1c <__assert_fail@plt+0x501c>
   16ac0:	strb	r8, [sp, #28]
   16ac4:	ldr	r0, [sp, #32]
   16ac8:	ldr	r1, [sp, #36]	; 0x24
   16acc:	add	r0, r0, r1
   16ad0:	str	r0, [sp, #32]
   16ad4:	add	r0, sp, #16
   16ad8:	bl	17258 <__assert_fail@plt+0x5558>
   16adc:	ldrb	r0, [sp, #40]	; 0x28
   16ae0:	cmp	r0, #0
   16ae4:	beq	16af4 <__assert_fail@plt+0x4df4>
   16ae8:	ldr	r0, [sp, #44]	; 0x2c
   16aec:	cmp	r0, #0
   16af0:	beq	16d04 <__assert_fail@plt+0x5004>
   16af4:	add	sl, r4, #2
   16af8:	add	r0, sp, #72	; 0x48
   16afc:	bl	17258 <__assert_fail@plt+0x5558>
   16b00:	ldr	r0, [sp, #100]	; 0x64
   16b04:	ldrb	r1, [sp, #96]	; 0x60
   16b08:	cmp	r0, #0
   16b0c:	bne	16b18 <__assert_fail@plt+0x4e18>
   16b10:	cmp	r1, #0
   16b14:	bne	16cf4 <__assert_fail@plt+0x4ff4>
   16b18:	cmp	r1, #0
   16b1c:	ldrbne	r1, [sp, #40]	; 0x28
   16b20:	cmpne	r1, #0
   16b24:	bne	16b50 <__assert_fail@plt+0x4e50>
   16b28:	ldr	r2, [sp, #92]	; 0x5c
   16b2c:	ldr	r0, [sp, #36]	; 0x24
   16b30:	cmp	r2, r0
   16b34:	bne	16bac <__assert_fail@plt+0x4eac>
   16b38:	ldr	r1, [sp, #32]
   16b3c:	ldr	r0, [sp, #88]	; 0x58
   16b40:	bl	11ad8 <bcmp@plt>
   16b44:	cmp	r0, #0
   16b48:	beq	16b5c <__assert_fail@plt+0x4e5c>
   16b4c:	b	16bac <__assert_fail@plt+0x4eac>
   16b50:	ldr	r1, [sp, #44]	; 0x2c
   16b54:	cmp	r0, r1
   16b58:	bne	16bac <__assert_fail@plt+0x4eac>
   16b5c:	strb	r8, [sp, #84]	; 0x54
   16b60:	strb	r8, [sp, #28]
   16b64:	ldr	r0, [sp, #88]	; 0x58
   16b68:	ldr	r1, [sp, #92]	; 0x5c
   16b6c:	add	r0, r0, r1
   16b70:	str	r0, [sp, #88]	; 0x58
   16b74:	ldr	r0, [sp, #32]
   16b78:	ldr	r1, [sp, #36]	; 0x24
   16b7c:	add	r0, r0, r1
   16b80:	str	r0, [sp, #32]
   16b84:	add	r0, sp, #16
   16b88:	bl	17258 <__assert_fail@plt+0x5558>
   16b8c:	add	sl, sl, #1
   16b90:	ldrb	r0, [sp, #40]	; 0x28
   16b94:	cmp	r0, #0
   16b98:	beq	16af8 <__assert_fail@plt+0x4df8>
   16b9c:	ldr	r0, [sp, #44]	; 0x2c
   16ba0:	cmp	r0, #0
   16ba4:	bne	16af8 <__assert_fail@plt+0x4df8>
   16ba8:	b	16d04 <__assert_fail@plt+0x5004>
   16bac:	add	r9, r9, #1
   16bb0:	mov	r4, #0
   16bb4:	strb	r4, [sp, #140]	; 0x8c
   16bb8:	ldr	r0, [sp, #144]	; 0x90
   16bbc:	ldr	r1, [sp, #148]	; 0x94
   16bc0:	add	r0, r0, r1
   16bc4:	str	r0, [sp, #144]	; 0x90
   16bc8:	mov	r0, r7
   16bcc:	bl	17258 <__assert_fail@plt+0x5558>
   16bd0:	ldrb	r0, [sp, #152]	; 0x98
   16bd4:	cmp	r0, #0
   16bd8:	beq	16910 <__assert_fail@plt+0x4c10>
   16bdc:	ldr	r0, [sp, #156]	; 0x9c
   16be0:	cmp	r0, #0
   16be4:	bne	16910 <__assert_fail@plt+0x4c10>
   16be8:	b	16cf8 <__assert_fail@plt+0x4ff8>
   16bec:	ldrb	r9, [r5]
   16bf0:	cmp	r9, #0
   16bf4:	beq	16cec <__assert_fail@plt+0x4fec>
   16bf8:	ldrb	r0, [r6]
   16bfc:	cmp	r0, #0
   16c00:	beq	16cf4 <__assert_fail@plt+0x4ff4>
   16c04:	mov	r3, #1
   16c08:	mov	ip, #0
   16c0c:	mov	sl, r5
   16c10:	mov	r7, #0
   16c14:	mov	r8, #0
   16c18:	add	r0, r8, r8, lsl #2
   16c1c:	cmp	r7, r0
   16c20:	bcc	16c94 <__assert_fail@plt+0x4f94>
   16c24:	tst	r3, #1
   16c28:	beq	16c94 <__assert_fail@plt+0x4f94>
   16c2c:	cmp	r8, #10
   16c30:	bcc	16c94 <__assert_fail@plt+0x4f94>
   16c34:	cmp	sl, #0
   16c38:	beq	16c60 <__assert_fail@plt+0x4f60>
   16c3c:	sub	r1, r7, ip
   16c40:	mov	r0, sl
   16c44:	mov	r4, r3
   16c48:	bl	11bc8 <strnlen@plt>
   16c4c:	mov	r3, r4
   16c50:	ldrb	r0, [sl, r0]!
   16c54:	cmp	r0, #0
   16c58:	mov	ip, r7
   16c5c:	bne	16c94 <__assert_fail@plt+0x4f94>
   16c60:	mov	r0, r5
   16c64:	mov	r4, ip
   16c68:	bl	11af0 <strlen@plt>
   16c6c:	mov	r2, r0
   16c70:	mov	r0, r6
   16c74:	mov	r1, r5
   16c78:	sub	r3, fp, #88	; 0x58
   16c7c:	bl	170fc <__assert_fail@plt+0x53fc>
   16c80:	mov	ip, r4
   16c84:	mov	r3, #0
   16c88:	cmp	r0, #0
   16c8c:	mov	sl, #0
   16c90:	bne	16d0c <__assert_fail@plt+0x500c>
   16c94:	ldrb	r0, [r6]
   16c98:	cmp	r0, r9
   16c9c:	bne	16cd0 <__assert_fail@plt+0x4fd0>
   16ca0:	mov	r0, #1
   16ca4:	ldrb	r1, [r5, r0]
   16ca8:	cmp	r1, #0
   16cac:	beq	16cec <__assert_fail@plt+0x4fec>
   16cb0:	ldrb	r2, [r6, r0]
   16cb4:	cmp	r2, #0
   16cb8:	beq	16cf4 <__assert_fail@plt+0x4ff4>
   16cbc:	add	r0, r0, #1
   16cc0:	cmp	r2, r1
   16cc4:	beq	16ca4 <__assert_fail@plt+0x4fa4>
   16cc8:	add	r7, r7, r0
   16ccc:	b	16cd4 <__assert_fail@plt+0x4fd4>
   16cd0:	add	r7, r7, #1
   16cd4:	add	r8, r8, #1
   16cd8:	ldrb	r0, [r6, #1]!
   16cdc:	mov	r4, #0
   16ce0:	cmp	r0, #0
   16ce4:	bne	16c18 <__assert_fail@plt+0x4f18>
   16ce8:	b	16cf8 <__assert_fail@plt+0x4ff8>
   16cec:	mov	r4, r6
   16cf0:	b	16cf8 <__assert_fail@plt+0x4ff8>
   16cf4:	mov	r4, #0
   16cf8:	mov	r0, r4
   16cfc:	sub	sp, fp, #28
   16d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d04:	ldr	r4, [sp, #144]	; 0x90
   16d08:	b	16cf8 <__assert_fail@plt+0x4ff8>
   16d0c:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16d10:	b	16cf8 <__assert_fail@plt+0x4ff8>
   16d14:	ldr	r4, [sp, #72]	; 0x48
   16d18:	b	16cf8 <__assert_fail@plt+0x4ff8>
   16d1c:	bl	11cc4 <abort@plt>
   16d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d24:	add	fp, sp, #28
   16d28:	sub	sp, sp, #132	; 0x84
   16d2c:	mov	r5, r2
   16d30:	mov	r4, r1
   16d34:	mov	r8, r0
   16d38:	mov	r0, r1
   16d3c:	bl	16788 <__assert_fail@plt+0x4a88>
   16d40:	mov	r6, r0
   16d44:	mov	r7, #0
   16d48:	movw	r0, #47662	; 0xba2e
   16d4c:	movt	r0, #744	; 0x2e8
   16d50:	cmp	r6, r0
   16d54:	bhi	170ec <__assert_fail@plt+0x53ec>
   16d58:	mov	r0, #44	; 0x2c
   16d5c:	mul	r0, r6, r0
   16d60:	cmp	r0, #4016	; 0xfb0
   16d64:	bhi	16d8c <__assert_fail@plt+0x508c>
   16d68:	add	r0, r0, #22
   16d6c:	bic	r0, r0, #7
   16d70:	sub	r0, sp, r0
   16d74:	add	r1, r0, #15
   16d78:	bic	sl, r1, #15
   16d7c:	mov	sp, r0
   16d80:	cmp	sl, #0
   16d84:	bne	16d9c <__assert_fail@plt+0x509c>
   16d88:	b	170ec <__assert_fail@plt+0x53ec>
   16d8c:	bl	28e20 <__assert_fail@plt+0x17120>
   16d90:	mov	sl, r0
   16d94:	cmp	sl, #0
   16d98:	beq	170ec <__assert_fail@plt+0x53ec>
   16d9c:	str	r5, [fp, #-156]	; 0xffffff64
   16da0:	mov	r9, #0
   16da4:	str	r9, [fp, #-80]	; 0xffffffb0
   16da8:	str	r9, [fp, #-84]	; 0xffffffac
   16dac:	strb	r9, [fp, #-76]	; 0xffffffb4
   16db0:	strb	r9, [fp, #-88]	; 0xffffffa8
   16db4:	str	r4, [fp, #-72]	; 0xffffffb8
   16db8:	sub	r4, fp, #88	; 0x58
   16dbc:	mov	r0, r4
   16dc0:	bl	17258 <__assert_fail@plt+0x5558>
   16dc4:	add	r0, r6, r6, lsl #2
   16dc8:	add	r0, sl, r0, lsl #3
   16dcc:	str	r0, [fp, #-148]	; 0xffffff6c
   16dd0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16dd4:	cmp	r0, #0
   16dd8:	beq	16de8 <__assert_fail@plt+0x50e8>
   16ddc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16de0:	cmp	r0, #0
   16de4:	beq	16e38 <__assert_fail@plt+0x5138>
   16de8:	add	r4, r4, #16
   16dec:	sub	r7, fp, #88	; 0x58
   16df0:	mov	r5, sl
   16df4:	mov	r0, r5
   16df8:	mov	r1, r4
   16dfc:	bl	28ee8 <__assert_fail@plt+0x171e8>
   16e00:	strb	r9, [fp, #-76]	; 0xffffffb4
   16e04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16e08:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16e0c:	add	r0, r0, r1
   16e10:	str	r0, [fp, #-72]	; 0xffffffb8
   16e14:	mov	r0, r7
   16e18:	bl	17258 <__assert_fail@plt+0x5558>
   16e1c:	add	r5, r5, #40	; 0x28
   16e20:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e24:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16e28:	cmp	r1, #0
   16e2c:	beq	16df4 <__assert_fail@plt+0x50f4>
   16e30:	cmp	r0, #0
   16e34:	bne	16df4 <__assert_fail@plt+0x50f4>
   16e38:	str	r8, [fp, #-160]	; 0xffffff60
   16e3c:	mov	r0, #1
   16e40:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16e44:	str	r0, [r3, #4]
   16e48:	str	r6, [fp, #-152]	; 0xffffff68
   16e4c:	cmp	r6, #3
   16e50:	bcc	16f1c <__assert_fail@plt+0x521c>
   16e54:	mov	r4, #2
   16e58:	mov	r5, #0
   16e5c:	b	16e7c <__assert_fail@plt+0x517c>
   16e60:	mov	r5, #0
   16e64:	mov	r0, r4
   16e68:	str	r0, [r3, r4, lsl #2]
   16e6c:	add	r4, r4, #1
   16e70:	ldr	r0, [fp, #-152]	; 0xffffff68
   16e74:	cmp	r4, r0
   16e78:	beq	16f1c <__assert_fail@plt+0x521c>
   16e7c:	add	r0, r4, r4, lsl #2
   16e80:	add	r0, sl, r0, lsl #3
   16e84:	sub	r9, r0, #40	; 0x28
   16e88:	sub	r6, r0, #36	; 0x24
   16e8c:	sub	r7, r0, #28
   16e90:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   16e94:	cmp	r8, #0
   16e98:	beq	16ec4 <__assert_fail@plt+0x51c4>
   16e9c:	add	r0, r5, r5, lsl #2
   16ea0:	add	r0, sl, r0, lsl #3
   16ea4:	ldrb	r1, [r0, #8]
   16ea8:	cmp	r1, #0
   16eac:	beq	16ec4 <__assert_fail@plt+0x51c4>
   16eb0:	ldr	r0, [r0, #12]
   16eb4:	ldr	r1, [r7]
   16eb8:	cmp	r1, r0
   16ebc:	bne	16ef4 <__assert_fail@plt+0x51f4>
   16ec0:	b	16f10 <__assert_fail@plt+0x5210>
   16ec4:	add	r0, r5, r5, lsl #2
   16ec8:	add	r1, sl, r0, lsl #3
   16ecc:	ldr	r1, [r1, #4]
   16ed0:	ldr	r2, [r6]
   16ed4:	cmp	r2, r1
   16ed8:	bne	16ef4 <__assert_fail@plt+0x51f4>
   16edc:	ldr	r1, [sl, r0, lsl #3]
   16ee0:	ldr	r0, [r9]
   16ee4:	bl	11ad8 <bcmp@plt>
   16ee8:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16eec:	cmp	r0, #0
   16ef0:	beq	16f10 <__assert_fail@plt+0x5210>
   16ef4:	cmp	r5, #0
   16ef8:	beq	16e60 <__assert_fail@plt+0x5160>
   16efc:	ldr	r0, [r3, r5, lsl #2]
   16f00:	sub	r5, r5, r0
   16f04:	cmp	r8, #0
   16f08:	bne	16e9c <__assert_fail@plt+0x519c>
   16f0c:	b	16ec4 <__assert_fail@plt+0x51c4>
   16f10:	add	r5, r5, #1
   16f14:	sub	r0, r4, r5
   16f18:	b	16e68 <__assert_fail@plt+0x5168>
   16f1c:	mov	r5, #0
   16f20:	ldr	r8, [fp, #-156]	; 0xffffff64
   16f24:	str	r5, [r8]
   16f28:	str	r5, [fp, #-80]	; 0xffffffb0
   16f2c:	str	r5, [fp, #-84]	; 0xffffffac
   16f30:	str	r5, [fp, #-136]	; 0xffffff78
   16f34:	str	r5, [fp, #-140]	; 0xffffff74
   16f38:	strb	r5, [fp, #-76]	; 0xffffffb4
   16f3c:	strb	r5, [fp, #-88]	; 0xffffffa8
   16f40:	ldr	r0, [fp, #-160]	; 0xffffff60
   16f44:	str	r0, [fp, #-72]	; 0xffffffb8
   16f48:	str	r0, [fp, #-128]	; 0xffffff80
   16f4c:	strb	r5, [fp, #-132]	; 0xffffff7c
   16f50:	strb	r5, [fp, #-144]	; 0xffffff70
   16f54:	sub	r0, fp, #144	; 0x90
   16f58:	bl	17258 <__assert_fail@plt+0x5558>
   16f5c:	ldrb	r1, [fp, #-120]	; 0xffffff88
   16f60:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16f64:	cmp	r0, #0
   16f68:	bne	16f74 <__assert_fail@plt+0x5274>
   16f6c:	cmp	r1, #0
   16f70:	bne	170e0 <__assert_fail@plt+0x53e0>
   16f74:	clz	r1, r1
   16f78:	lsr	r1, r1, #5
   16f7c:	sub	r9, fp, #144	; 0x90
   16f80:	sub	r4, fp, #88	; 0x58
   16f84:	mov	r7, #0
   16f88:	add	r3, r7, r7, lsl #2
   16f8c:	add	r2, sl, r3, lsl #3
   16f90:	tst	r1, #1
   16f94:	bne	16fb4 <__assert_fail@plt+0x52b4>
   16f98:	ldrb	r1, [r2, #8]
   16f9c:	cmp	r1, #0
   16fa0:	beq	16fb4 <__assert_fail@plt+0x52b4>
   16fa4:	ldr	r1, [r2, #12]
   16fa8:	cmp	r1, r0
   16fac:	bne	16fd8 <__assert_fail@plt+0x52d8>
   16fb0:	b	17038 <__assert_fail@plt+0x5338>
   16fb4:	ldr	r2, [r2, #4]
   16fb8:	ldr	r0, [fp, #-124]	; 0xffffff84
   16fbc:	cmp	r2, r0
   16fc0:	bne	16fd8 <__assert_fail@plt+0x52d8>
   16fc4:	ldr	r0, [sl, r3, lsl #3]
   16fc8:	ldr	r1, [fp, #-128]	; 0xffffff80
   16fcc:	bl	11ad8 <bcmp@plt>
   16fd0:	cmp	r0, #0
   16fd4:	beq	17038 <__assert_fail@plt+0x5338>
   16fd8:	cmp	r7, #0
   16fdc:	beq	17060 <__assert_fail@plt+0x5360>
   16fe0:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16fe4:	ldr	r6, [r0, r7, lsl #2]
   16fe8:	sub	r7, r7, r6
   16fec:	cmp	r6, #0
   16ff0:	bne	17014 <__assert_fail@plt+0x5314>
   16ff4:	b	170ac <__assert_fail@plt+0x53ac>
   16ff8:	strb	r5, [fp, #-76]	; 0xffffffb4
   16ffc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17000:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17004:	add	r0, r0, r1
   17008:	str	r0, [fp, #-72]	; 0xffffffb8
   1700c:	subs	r6, r6, #1
   17010:	beq	170ac <__assert_fail@plt+0x53ac>
   17014:	mov	r0, r4
   17018:	bl	17258 <__assert_fail@plt+0x5558>
   1701c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   17020:	cmp	r0, #0
   17024:	beq	16ff8 <__assert_fail@plt+0x52f8>
   17028:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1702c:	cmp	r0, #0
   17030:	bne	16ff8 <__assert_fail@plt+0x52f8>
   17034:	b	170f8 <__assert_fail@plt+0x53f8>
   17038:	strb	r5, [fp, #-132]	; 0xffffff7c
   1703c:	ldr	r0, [fp, #-128]	; 0xffffff80
   17040:	ldr	r1, [fp, #-124]	; 0xffffff84
   17044:	add	r0, r0, r1
   17048:	str	r0, [fp, #-128]	; 0xffffff80
   1704c:	add	r7, r7, #1
   17050:	ldr	r0, [fp, #-152]	; 0xffffff68
   17054:	cmp	r7, r0
   17058:	bne	170ac <__assert_fail@plt+0x53ac>
   1705c:	b	170d8 <__assert_fail@plt+0x53d8>
   17060:	mov	r0, r4
   17064:	bl	17258 <__assert_fail@plt+0x5558>
   17068:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1706c:	cmp	r0, #0
   17070:	beq	17080 <__assert_fail@plt+0x5380>
   17074:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17078:	cmp	r0, #0
   1707c:	beq	170f8 <__assert_fail@plt+0x53f8>
   17080:	mov	r7, #0
   17084:	strb	r7, [fp, #-76]	; 0xffffffb4
   17088:	strb	r7, [fp, #-132]	; 0xffffff7c
   1708c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17090:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17094:	add	r0, r0, r1
   17098:	str	r0, [fp, #-72]	; 0xffffffb8
   1709c:	ldr	r0, [fp, #-128]	; 0xffffff80
   170a0:	ldr	r1, [fp, #-124]	; 0xffffff84
   170a4:	add	r0, r0, r1
   170a8:	str	r0, [fp, #-128]	; 0xffffff80
   170ac:	mov	r0, r9
   170b0:	bl	17258 <__assert_fail@plt+0x5558>
   170b4:	ldrb	r2, [fp, #-120]	; 0xffffff88
   170b8:	clz	r0, r2
   170bc:	lsr	r1, r0, #5
   170c0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   170c4:	cmp	r0, #0
   170c8:	bne	16f88 <__assert_fail@plt+0x5288>
   170cc:	cmp	r2, #0
   170d0:	beq	16f88 <__assert_fail@plt+0x5288>
   170d4:	b	170e0 <__assert_fail@plt+0x53e0>
   170d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   170dc:	str	r0, [r8]
   170e0:	mov	r0, sl
   170e4:	bl	28e90 <__assert_fail@plt+0x17190>
   170e8:	mov	r7, #1
   170ec:	mov	r0, r7
   170f0:	sub	sp, fp, #28
   170f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170f8:	bl	11cc4 <abort@plt>
   170fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17100:	add	fp, sp, #24
   17104:	mov	r4, #0
   17108:	cmn	r2, #-536870911	; 0xe0000001
   1710c:	bhi	1724c <__assert_fail@plt+0x554c>
   17110:	mov	r8, r3
   17114:	mov	r5, r2
   17118:	mov	r6, r1
   1711c:	mov	r7, r0
   17120:	lsl	r0, r2, #2
   17124:	cmp	r0, #4016	; 0xfb0
   17128:	bhi	17150 <__assert_fail@plt+0x5450>
   1712c:	add	r0, r0, #22
   17130:	bic	r0, r0, #7
   17134:	sub	r1, sp, r0
   17138:	add	r0, r1, #15
   1713c:	bic	r0, r0, #15
   17140:	mov	sp, r1
   17144:	cmp	r0, #0
   17148:	bne	1715c <__assert_fail@plt+0x545c>
   1714c:	b	1724c <__assert_fail@plt+0x554c>
   17150:	bl	28e20 <__assert_fail@plt+0x17120>
   17154:	cmp	r0, #0
   17158:	beq	1724c <__assert_fail@plt+0x554c>
   1715c:	mov	r1, #1
   17160:	str	r1, [r0, #4]
   17164:	cmp	r5, #3
   17168:	bcc	171d0 <__assert_fail@plt+0x54d0>
   1716c:	mov	r1, #2
   17170:	mov	r2, #0
   17174:	b	17190 <__assert_fail@plt+0x5490>
   17178:	add	r2, r2, #1
   1717c:	sub	r3, r1, r2
   17180:	str	r3, [r0, r1, lsl #2]
   17184:	add	r1, r1, #1
   17188:	cmp	r1, r5
   1718c:	beq	171d0 <__assert_fail@plt+0x54d0>
   17190:	ldrb	r4, [r6, r2]
   17194:	add	r3, r1, r6
   17198:	ldrb	r3, [r3, #-1]
   1719c:	cmp	r3, r4
   171a0:	beq	17178 <__assert_fail@plt+0x5478>
   171a4:	cmp	r2, #0
   171a8:	beq	171c4 <__assert_fail@plt+0x54c4>
   171ac:	ldr	r4, [r0, r2, lsl #2]
   171b0:	sub	r2, r2, r4
   171b4:	ldrb	r4, [r6, r2]
   171b8:	cmp	r3, r4
   171bc:	bne	171a4 <__assert_fail@plt+0x54a4>
   171c0:	b	17178 <__assert_fail@plt+0x5478>
   171c4:	mov	r2, #0
   171c8:	mov	r3, r1
   171cc:	b	17180 <__assert_fail@plt+0x5480>
   171d0:	mov	r1, #0
   171d4:	str	r1, [r8]
   171d8:	ldrb	r3, [r7]
   171dc:	cmp	r3, #0
   171e0:	beq	17244 <__assert_fail@plt+0x5544>
   171e4:	mov	r2, r7
   171e8:	b	17204 <__assert_fail@plt+0x5504>
   171ec:	add	r7, r7, #1
   171f0:	add	r2, r2, #1
   171f4:	mov	r1, #0
   171f8:	ldrb	r3, [r7]
   171fc:	cmp	r3, #0
   17200:	beq	17244 <__assert_fail@plt+0x5544>
   17204:	ldrb	r4, [r6, r1]
   17208:	uxtb	r3, r3
   1720c:	cmp	r4, r3
   17210:	bne	17228 <__assert_fail@plt+0x5528>
   17214:	add	r1, r1, #1
   17218:	cmp	r1, r5
   1721c:	beq	17240 <__assert_fail@plt+0x5540>
   17220:	add	r7, r7, #1
   17224:	b	171f8 <__assert_fail@plt+0x54f8>
   17228:	cmp	r1, #0
   1722c:	beq	171ec <__assert_fail@plt+0x54ec>
   17230:	ldr	r3, [r0, r1, lsl #2]
   17234:	sub	r1, r1, r3
   17238:	add	r2, r2, r3
   1723c:	b	171f8 <__assert_fail@plt+0x54f8>
   17240:	str	r2, [r8]
   17244:	bl	28e90 <__assert_fail@plt+0x17190>
   17248:	mov	r4, #1
   1724c:	mov	r0, r4
   17250:	sub	sp, fp, #24
   17254:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17258:	push	{r4, r5, r6, r7, fp, lr}
   1725c:	add	fp, sp, #16
   17260:	mov	r4, r0
   17264:	ldrb	r0, [r0, #12]
   17268:	cmp	r0, #0
   1726c:	popne	{r4, r5, r6, r7, fp, pc}
   17270:	ldrb	r0, [r4]
   17274:	cmp	r0, #0
   17278:	bne	172c4 <__assert_fail@plt+0x55c4>
   1727c:	ldr	r0, [r4, #16]
   17280:	ldrb	r0, [r0]
   17284:	bl	28f38 <__assert_fail@plt+0x17238>
   17288:	cmp	r0, #0
   1728c:	beq	172ac <__assert_fail@plt+0x55ac>
   17290:	mov	r0, #1
   17294:	str	r0, [r4, #20]
   17298:	ldr	r1, [r4, #16]
   1729c:	ldrb	r1, [r1]
   172a0:	strb	r0, [r4, #24]
   172a4:	str	r1, [r4, #28]
   172a8:	b	17378 <__assert_fail@plt+0x5678>
   172ac:	add	r0, r4, #4
   172b0:	bl	11958 <mbsinit@plt>
   172b4:	cmp	r0, #0
   172b8:	beq	17384 <__assert_fail@plt+0x5684>
   172bc:	mov	r0, #1
   172c0:	strb	r0, [r4]
   172c4:	ldr	r7, [r4, #16]
   172c8:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   172cc:	mov	r1, r0
   172d0:	mov	r0, r7
   172d4:	bl	19098 <__assert_fail@plt+0x7398>
   172d8:	mov	r2, r0
   172dc:	add	r6, r4, #28
   172e0:	add	r5, r4, #4
   172e4:	mov	r0, r6
   172e8:	mov	r1, r7
   172ec:	mov	r3, r5
   172f0:	bl	1a2ec <__assert_fail@plt+0x85ec>
   172f4:	str	r0, [r4, #20]
   172f8:	cmn	r0, #2
   172fc:	beq	17364 <__assert_fail@plt+0x5664>
   17300:	cmp	r0, #0
   17304:	beq	17320 <__assert_fail@plt+0x5620>
   17308:	cmn	r0, #1
   1730c:	bne	17344 <__assert_fail@plt+0x5644>
   17310:	mov	r0, #0
   17314:	strb	r0, [r4, #24]
   17318:	mov	r0, #1
   1731c:	b	17374 <__assert_fail@plt+0x5674>
   17320:	mov	r0, #1
   17324:	str	r0, [r4, #20]
   17328:	ldr	r0, [r4, #16]
   1732c:	ldrb	r0, [r0]
   17330:	cmp	r0, #0
   17334:	bne	173a4 <__assert_fail@plt+0x56a4>
   17338:	ldr	r0, [r6]
   1733c:	cmp	r0, #0
   17340:	bne	173c4 <__assert_fail@plt+0x56c4>
   17344:	mov	r0, #1
   17348:	strb	r0, [r4, #24]
   1734c:	mov	r0, r5
   17350:	bl	11958 <mbsinit@plt>
   17354:	cmp	r0, #0
   17358:	movne	r0, #0
   1735c:	strbne	r0, [r4]
   17360:	b	17378 <__assert_fail@plt+0x5678>
   17364:	ldr	r0, [r4, #16]
   17368:	bl	11af0 <strlen@plt>
   1736c:	mov	r1, #0
   17370:	strb	r1, [r4, #24]
   17374:	str	r0, [r4, #20]
   17378:	mov	r0, #1
   1737c:	strb	r0, [r4, #12]
   17380:	pop	{r4, r5, r6, r7, fp, pc}
   17384:	movw	r0, #43060	; 0xa834
   17388:	movt	r0, #2
   1738c:	movw	r1, #43083	; 0xa84b
   17390:	movt	r1, #2
   17394:	movw	r3, #43095	; 0xa857
   17398:	movt	r3, #2
   1739c:	mov	r2, #143	; 0x8f
   173a0:	bl	11d00 <__assert_fail@plt>
   173a4:	movw	r0, #43143	; 0xa887
   173a8:	movt	r0, #2
   173ac:	movw	r1, #43083	; 0xa84b
   173b0:	movt	r1, #2
   173b4:	movw	r3, #43095	; 0xa857
   173b8:	movt	r3, #2
   173bc:	mov	r2, #171	; 0xab
   173c0:	bl	11d00 <__assert_fail@plt>
   173c4:	movw	r0, #43166	; 0xa89e
   173c8:	movt	r0, #2
   173cc:	movw	r1, #43083	; 0xa84b
   173d0:	movt	r1, #2
   173d4:	movw	r3, #43095	; 0xa857
   173d8:	movt	r3, #2
   173dc:	mov	r2, #172	; 0xac
   173e0:	bl	11d00 <__assert_fail@plt>
   173e4:	ldr	r2, [r0, #16]
   173e8:	add	r1, r2, r1
   173ec:	str	r1, [r0, #16]
   173f0:	bx	lr
   173f4:	ldrb	r3, [r1]
   173f8:	mov	r2, r0
   173fc:	strb	r3, [r2], #4
   17400:	cmp	r3, #0
   17404:	beq	17414 <__assert_fail@plt+0x5714>
   17408:	ldmib	r1, {r3, ip}
   1740c:	stm	r2, {r3, ip}
   17410:	b	17420 <__assert_fail@plt+0x5720>
   17414:	mov	r3, #0
   17418:	str	r3, [r2]
   1741c:	str	r3, [r2, #4]
   17420:	ldrb	r2, [r1, #12]
   17424:	strb	r2, [r0, #12]
   17428:	add	r0, r0, #16
   1742c:	add	r1, r1, #16
   17430:	b	28ee8 <__assert_fail@plt+0x171e8>
   17434:	push	{r4, r5, fp, lr}
   17438:	add	fp, sp, #8
   1743c:	cmp	r0, #0
   17440:	beq	174d4 <__assert_fail@plt+0x57d4>
   17444:	mov	r4, r0
   17448:	mov	r1, #47	; 0x2f
   1744c:	bl	11c04 <strrchr@plt>
   17450:	cmp	r0, #0
   17454:	mov	r5, r4
   17458:	addne	r5, r0, #1
   1745c:	sub	r0, r5, r4
   17460:	cmp	r0, #7
   17464:	blt	174b8 <__assert_fail@plt+0x57b8>
   17468:	sub	r0, r5, #7
   1746c:	movw	r1, #43240	; 0xa8e8
   17470:	movt	r1, #2
   17474:	mov	r2, #7
   17478:	bl	11cb8 <strncmp@plt>
   1747c:	cmp	r0, #0
   17480:	bne	174b8 <__assert_fail@plt+0x57b8>
   17484:	movw	r1, #43248	; 0xa8f0
   17488:	movt	r1, #2
   1748c:	mov	r0, r5
   17490:	mov	r2, #3
   17494:	bl	11cb8 <strncmp@plt>
   17498:	cmp	r0, #0
   1749c:	beq	174a8 <__assert_fail@plt+0x57a8>
   174a0:	mov	r4, r5
   174a4:	b	174b8 <__assert_fail@plt+0x57b8>
   174a8:	add	r4, r5, #3
   174ac:	movw	r0, #49672	; 0xc208
   174b0:	movt	r0, #3
   174b4:	str	r4, [r0]
   174b8:	movw	r0, #49676	; 0xc20c
   174bc:	movt	r0, #3
   174c0:	str	r4, [r0]
   174c4:	movw	r0, #49820	; 0xc29c
   174c8:	movt	r0, #3
   174cc:	str	r4, [r0]
   174d0:	pop	{r4, r5, fp, pc}
   174d4:	movw	r0, #49688	; 0xc218
   174d8:	movt	r0, #3
   174dc:	ldr	r3, [r0]
   174e0:	movw	r0, #43184	; 0xa8b0
   174e4:	movt	r0, #2
   174e8:	mov	r1, #55	; 0x37
   174ec:	mov	r2, #1
   174f0:	bl	119d0 <fwrite@plt>
   174f4:	bl	11cc4 <abort@plt>
   174f8:	push	{r4, r5, r6, sl, fp, lr}
   174fc:	add	fp, sp, #16
   17500:	mov	r4, r0
   17504:	movw	r0, #49824	; 0xc2a0
   17508:	movt	r0, #3
   1750c:	cmp	r4, #0
   17510:	moveq	r4, r0
   17514:	bl	11b20 <__errno_location@plt>
   17518:	mov	r5, r0
   1751c:	ldr	r6, [r0]
   17520:	mov	r0, r4
   17524:	mov	r1, #48	; 0x30
   17528:	bl	19894 <__assert_fail@plt+0x7b94>
   1752c:	str	r6, [r5]
   17530:	pop	{r4, r5, r6, sl, fp, pc}
   17534:	movw	r1, #49824	; 0xc2a0
   17538:	movt	r1, #3
   1753c:	cmp	r0, #0
   17540:	movne	r1, r0
   17544:	ldr	r0, [r1]
   17548:	bx	lr
   1754c:	movw	r2, #49824	; 0xc2a0
   17550:	movt	r2, #3
   17554:	cmp	r0, #0
   17558:	movne	r2, r0
   1755c:	str	r1, [r2]
   17560:	bx	lr
   17564:	movw	r3, #49824	; 0xc2a0
   17568:	movt	r3, #3
   1756c:	cmp	r0, #0
   17570:	movne	r3, r0
   17574:	ubfx	r0, r1, #5, #3
   17578:	add	ip, r3, r0, lsl #2
   1757c:	ldr	r3, [ip, #8]
   17580:	and	r1, r1, #31
   17584:	mov	r0, #1
   17588:	and	r0, r0, r3, lsr r1
   1758c:	and	r2, r2, #1
   17590:	eor	r2, r0, r2
   17594:	eor	r1, r3, r2, lsl r1
   17598:	str	r1, [ip, #8]
   1759c:	bx	lr
   175a0:	movw	r2, #49824	; 0xc2a0
   175a4:	movt	r2, #3
   175a8:	cmp	r0, #0
   175ac:	movne	r2, r0
   175b0:	ldr	r0, [r2, #4]
   175b4:	str	r1, [r2, #4]
   175b8:	bx	lr
   175bc:	push	{fp, lr}
   175c0:	mov	fp, sp
   175c4:	movw	r3, #49824	; 0xc2a0
   175c8:	movt	r3, #3
   175cc:	cmp	r0, #0
   175d0:	movne	r3, r0
   175d4:	mov	r0, #10
   175d8:	str	r0, [r3]
   175dc:	cmp	r1, #0
   175e0:	cmpne	r2, #0
   175e4:	bne	175ec <__assert_fail@plt+0x58ec>
   175e8:	bl	11cc4 <abort@plt>
   175ec:	str	r1, [r3, #40]	; 0x28
   175f0:	str	r2, [r3, #44]	; 0x2c
   175f4:	pop	{fp, pc}
   175f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175fc:	add	fp, sp, #28
   17600:	sub	sp, sp, #20
   17604:	mov	r8, r3
   17608:	mov	r9, r2
   1760c:	mov	sl, r1
   17610:	mov	r7, r0
   17614:	ldr	r0, [fp, #8]
   17618:	movw	r5, #49824	; 0xc2a0
   1761c:	movt	r5, #3
   17620:	cmp	r0, #0
   17624:	movne	r5, r0
   17628:	bl	11b20 <__errno_location@plt>
   1762c:	mov	r4, r0
   17630:	ldm	r5, {r0, r1}
   17634:	ldr	r2, [r5, #40]	; 0x28
   17638:	ldr	r3, [r5, #44]	; 0x2c
   1763c:	ldr	r6, [r4]
   17640:	add	r5, r5, #8
   17644:	stm	sp, {r0, r1, r5}
   17648:	str	r2, [sp, #12]
   1764c:	str	r3, [sp, #16]
   17650:	mov	r0, r7
   17654:	mov	r1, sl
   17658:	mov	r2, r9
   1765c:	mov	r3, r8
   17660:	bl	17670 <__assert_fail@plt+0x5970>
   17664:	str	r6, [r4]
   17668:	sub	sp, fp, #28
   1766c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17674:	add	fp, sp, #28
   17678:	sub	sp, sp, #156	; 0x9c
   1767c:	mov	r9, r3
   17680:	mov	r7, r1
   17684:	mov	r6, r0
   17688:	str	r2, [fp, #-80]	; 0xffffffb0
   1768c:	add	r0, r2, #1
   17690:	str	r0, [sp, #76]	; 0x4c
   17694:	ldr	r0, [fp, #12]
   17698:	and	r1, r0, #1
   1769c:	str	r1, [sp, #40]	; 0x28
   176a0:	and	r1, r0, #4
   176a4:	str	r1, [sp, #36]	; 0x24
   176a8:	ubfx	r4, r0, #1, #1
   176ac:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   176b0:	str	r0, [sp, #44]	; 0x2c
   176b4:	ldr	r0, [fp, #24]
   176b8:	str	r0, [sp, #88]	; 0x58
   176bc:	ldr	r0, [fp, #20]
   176c0:	str	r0, [sp, #80]	; 0x50
   176c4:	ldr	r1, [fp, #8]
   176c8:	mov	r0, #0
   176cc:	str	r0, [sp, #84]	; 0x54
   176d0:	mov	r0, #0
   176d4:	str	r0, [fp, #-84]	; 0xffffffac
   176d8:	mov	r0, #0
   176dc:	str	r0, [fp, #-72]	; 0xffffffb8
   176e0:	mov	r0, #0
   176e4:	mov	r2, #0
   176e8:	str	r2, [fp, #-56]	; 0xffffffc8
   176ec:	mov	r2, #0
   176f0:	str	r2, [sp, #64]	; 0x40
   176f4:	mov	r2, #1
   176f8:	str	r2, [fp, #-48]	; 0xffffffd0
   176fc:	cmp	r1, #10
   17700:	bhi	1862c <__assert_fail@plt+0x692c>
   17704:	mov	sl, r7
   17708:	mov	r7, r1
   1770c:	add	r1, pc, #24
   17710:	mov	r8, #0
   17714:	mov	r2, #1
   17718:	mov	r3, #0
   1771c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17720:	mov	lr, r9
   17724:	mov	r5, r6
   17728:	ldr	pc, [r1, r7, lsl #2]
   1772c:	andeq	r7, r1, r0, lsl #16
   17730:	andeq	r7, r1, r0, asr #16
   17734:	andeq	r7, r1, r0, lsl r8
   17738:	strdeq	r7, [r1], -r8
   1773c:	andeq	r7, r1, r4, lsr r8
   17740:	muleq	r1, r4, r8
   17744:	andeq	r7, r1, r0, lsr #16
   17748:	strdeq	r7, [r1], -r0
   1774c:	andeq	r7, r1, r8, asr r7
   17750:	andeq	r7, r1, r8, asr r7
   17754:	andeq	r7, r1, r4, lsl #15
   17758:	movw	r0, #43330	; 0xa942
   1775c:	movt	r0, #2
   17760:	mov	r1, r7
   17764:	bl	18c34 <__assert_fail@plt+0x6f34>
   17768:	str	r0, [sp, #80]	; 0x50
   1776c:	movw	r0, #40561	; 0x9e71
   17770:	movt	r0, #2
   17774:	mov	r1, r7
   17778:	bl	18c34 <__assert_fail@plt+0x6f34>
   1777c:	mov	r5, r6
   17780:	str	r0, [sp, #88]	; 0x58
   17784:	mov	r8, #0
   17788:	tst	r4, #1
   1778c:	str	r7, [fp, #-64]	; 0xffffffc0
   17790:	bne	177c8 <__assert_fail@plt+0x5ac8>
   17794:	ldr	r0, [sp, #80]	; 0x50
   17798:	ldrb	r0, [r0]
   1779c:	cmp	r0, #0
   177a0:	beq	177c8 <__assert_fail@plt+0x5ac8>
   177a4:	ldr	r1, [sp, #80]	; 0x50
   177a8:	add	r1, r1, #1
   177ac:	mov	r8, #0
   177b0:	cmp	r8, sl
   177b4:	strbcc	r0, [r5, r8]
   177b8:	ldrb	r0, [r1, r8]
   177bc:	add	r8, r8, #1
   177c0:	cmp	r0, #0
   177c4:	bne	177b0 <__assert_fail@plt+0x5ab0>
   177c8:	ldr	r7, [sp, #88]	; 0x58
   177cc:	mov	r0, r7
   177d0:	bl	11af0 <strlen@plt>
   177d4:	mov	r5, r6
   177d8:	str	r0, [fp, #-72]	; 0xffffffb8
   177dc:	str	r7, [fp, #-84]	; 0xffffffac
   177e0:	mov	r2, #1
   177e4:	mov	r3, r4
   177e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   177ec:	mov	lr, r9
   177f0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   177f4:	b	178f0 <__assert_fail@plt+0x5bf0>
   177f8:	mov	r0, #1
   177fc:	b	17840 <__assert_fail@plt+0x5b40>
   17800:	mov	r7, #0
   17804:	mov	r8, #0
   17808:	mov	r2, r0
   1780c:	b	178ec <__assert_fail@plt+0x5bec>
   17810:	tst	r4, #1
   17814:	bne	17840 <__assert_fail@plt+0x5b40>
   17818:	mov	r2, r0
   1781c:	b	17868 <__assert_fail@plt+0x5b68>
   17820:	mov	r0, #1
   17824:	str	r0, [fp, #-72]	; 0xffffffb8
   17828:	mov	r8, #0
   1782c:	mov	r7, #5
   17830:	b	178ac <__assert_fail@plt+0x5bac>
   17834:	mov	r2, #1
   17838:	tst	r4, #1
   1783c:	beq	17868 <__assert_fail@plt+0x5b68>
   17840:	mov	r1, #1
   17844:	str	r1, [fp, #-72]	; 0xffffffb8
   17848:	mov	r8, #0
   1784c:	mov	r7, #2
   17850:	movw	r1, #40561	; 0x9e71
   17854:	movt	r1, #2
   17858:	str	r1, [fp, #-84]	; 0xffffffac
   1785c:	mov	r2, r0
   17860:	mov	r3, #1
   17864:	b	178f0 <__assert_fail@plt+0x5bf0>
   17868:	mov	r8, #1
   1786c:	mov	r7, #2
   17870:	cmp	sl, #0
   17874:	movne	r0, #39	; 0x27
   17878:	strbne	r0, [r5]
   1787c:	movw	r0, #40561	; 0x9e71
   17880:	movt	r0, #2
   17884:	str	r0, [fp, #-84]	; 0xffffffac
   17888:	mov	r0, #1
   1788c:	str	r0, [fp, #-72]	; 0xffffffb8
   17890:	b	178ec <__assert_fail@plt+0x5bec>
   17894:	mov	r7, #5
   17898:	tst	r4, #1
   1789c:	beq	178c4 <__assert_fail@plt+0x5bc4>
   178a0:	mov	r0, #1
   178a4:	str	r0, [fp, #-72]	; 0xffffffb8
   178a8:	mov	r8, #0
   178ac:	movw	r0, #43328	; 0xa940
   178b0:	movt	r0, #2
   178b4:	str	r0, [fp, #-84]	; 0xffffffac
   178b8:	mov	r2, #1
   178bc:	mov	r3, #1
   178c0:	b	178f0 <__assert_fail@plt+0x5bf0>
   178c4:	cmp	sl, #0
   178c8:	movne	r0, #34	; 0x22
   178cc:	strbne	r0, [r5]
   178d0:	mov	r8, #1
   178d4:	movw	r0, #43328	; 0xa940
   178d8:	movt	r0, #2
   178dc:	str	r0, [fp, #-84]	; 0xffffffac
   178e0:	mov	r0, #1
   178e4:	str	r0, [fp, #-72]	; 0xffffffb8
   178e8:	mov	r2, #1
   178ec:	mov	r3, #0
   178f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   178f4:	cmp	r0, #0
   178f8:	movwne	r0, #1
   178fc:	and	r1, r0, r3
   17900:	and	r1, r2, r1
   17904:	str	r1, [sp, #56]	; 0x38
   17908:	sub	r1, r7, #2
   1790c:	clz	r1, r1
   17910:	lsr	r1, r1, #5
   17914:	and	r1, r1, r3
   17918:	str	r1, [sp, #68]	; 0x44
   1791c:	str	r7, [fp, #-64]	; 0xffffffc0
   17920:	subs	r1, r7, #2
   17924:	movwne	r1, #1
   17928:	eor	r4, r3, #1
   1792c:	str	r4, [fp, #-88]	; 0xffffffa8
   17930:	orr	r4, r1, r4
   17934:	str	r4, [sp, #72]	; 0x48
   17938:	and	r1, r1, r2
   1793c:	and	r0, r0, r1
   17940:	str	r0, [fp, #-60]	; 0xffffffc4
   17944:	str	r3, [fp, #-76]	; 0xffffffb4
   17948:	orr	r0, r1, r3
   1794c:	eor	r0, r0, #1
   17950:	ldr	r1, [fp, #16]
   17954:	clz	r1, r1
   17958:	lsr	r1, r1, #5
   1795c:	orr	r0, r1, r0
   17960:	str	r0, [fp, #-68]	; 0xffffffbc
   17964:	str	r2, [sp, #92]	; 0x5c
   17968:	eor	r0, r2, #1
   1796c:	str	r0, [sp, #60]	; 0x3c
   17970:	mov	r7, #0
   17974:	cmn	lr, #1
   17978:	beq	17988 <__assert_fail@plt+0x5c88>
   1797c:	cmp	r7, lr
   17980:	bne	17994 <__assert_fail@plt+0x5c94>
   17984:	b	184a0 <__assert_fail@plt+0x67a0>
   17988:	ldrb	r0, [ip, r7]
   1798c:	cmp	r0, #0
   17990:	beq	184a0 <__assert_fail@plt+0x67a0>
   17994:	mov	r9, #0
   17998:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1799c:	cmp	r0, #0
   179a0:	beq	179d4 <__assert_fail@plt+0x5cd4>
   179a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   179a8:	add	r4, r7, r0
   179ac:	cmp	r0, #2
   179b0:	bcc	179cc <__assert_fail@plt+0x5ccc>
   179b4:	cmn	lr, #1
   179b8:	bne	179cc <__assert_fail@plt+0x5ccc>
   179bc:	mov	r0, ip
   179c0:	bl	11af0 <strlen@plt>
   179c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   179c8:	mov	lr, r0
   179cc:	cmp	r4, lr
   179d0:	bls	179e0 <__assert_fail@plt+0x5ce0>
   179d4:	mov	r0, #0
   179d8:	str	r0, [fp, #-52]	; 0xffffffcc
   179dc:	b	17a24 <__assert_fail@plt+0x5d24>
   179e0:	mov	r4, lr
   179e4:	add	r0, ip, r7
   179e8:	ldr	r1, [fp, #-84]	; 0xffffffac
   179ec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   179f0:	bl	11ad8 <bcmp@plt>
   179f4:	cmp	r0, #0
   179f8:	mov	r1, r0
   179fc:	movwne	r1, #1
   17a00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17a04:	orr	r1, r1, r2
   17a08:	tst	r1, #1
   17a0c:	beq	18574 <__assert_fail@plt+0x6874>
   17a10:	clz	r0, r0
   17a14:	lsr	r0, r0, #5
   17a18:	str	r0, [fp, #-52]	; 0xffffffcc
   17a1c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17a20:	mov	lr, r4
   17a24:	ldrb	r4, [ip, r7]
   17a28:	cmp	r4, #126	; 0x7e
   17a2c:	bhi	17f5c <__assert_fail@plt+0x625c>
   17a30:	mov	r6, #1
   17a34:	mov	r2, #110	; 0x6e
   17a38:	mov	r0, #97	; 0x61
   17a3c:	add	r3, pc, #4
   17a40:	mov	r1, #0
   17a44:	ldr	pc, [r3, r4, lsl #2]
   17a48:			; <UNDEFINED> instruction: 0x00017dbc
   17a4c:	andeq	r7, r1, ip, asr pc
   17a50:	andeq	r7, r1, ip, asr pc
   17a54:	andeq	r7, r1, ip, asr pc
   17a58:	andeq	r7, r1, ip, asr pc
   17a5c:	andeq	r7, r1, ip, asr pc
   17a60:	andeq	r7, r1, ip, asr pc
   17a64:	andeq	r8, r1, r0, lsr r0
   17a68:	muleq	r1, ip, sp
   17a6c:	muleq	r1, r4, sp
   17a70:	andeq	r7, r1, r8, lsr #27
   17a74:	andeq	r7, r1, r4, asr #29
   17a78:	andeq	r7, r1, ip, lsl #27
   17a7c:	andeq	r7, r1, r4, lsr #27
   17a80:	andeq	r7, r1, ip, asr pc
   17a84:	andeq	r7, r1, ip, asr pc
   17a88:	andeq	r7, r1, ip, asr pc
   17a8c:	andeq	r7, r1, ip, asr pc
   17a90:	andeq	r7, r1, ip, asr pc
   17a94:	andeq	r7, r1, ip, asr pc
   17a98:	andeq	r7, r1, ip, asr pc
   17a9c:	andeq	r7, r1, ip, asr pc
   17aa0:	andeq	r7, r1, ip, asr pc
   17aa4:	andeq	r7, r1, ip, asr pc
   17aa8:	andeq	r7, r1, ip, asr pc
   17aac:	andeq	r7, r1, ip, asr pc
   17ab0:	andeq	r7, r1, ip, asr pc
   17ab4:	andeq	r7, r1, ip, asr pc
   17ab8:	andeq	r7, r1, ip, asr pc
   17abc:	andeq	r7, r1, ip, asr pc
   17ac0:	andeq	r7, r1, ip, asr pc
   17ac4:	andeq	r7, r1, ip, asr pc
   17ac8:	andeq	r7, r1, r0, asr #26
   17acc:	andeq	r7, r1, r4, asr #26
   17ad0:	andeq	r7, r1, r4, asr #26
   17ad4:	andeq	r7, r1, ip, lsr #26
   17ad8:	andeq	r7, r1, r4, asr #26
   17adc:	andeq	r7, r1, r4, asr #24
   17ae0:	andeq	r7, r1, r4, asr #26
   17ae4:	andeq	r7, r1, ip, asr #29
   17ae8:	andeq	r7, r1, r4, asr #26
   17aec:	andeq	r7, r1, r4, asr #26
   17af0:	andeq	r7, r1, r4, asr #26
   17af4:	andeq	r7, r1, r4, asr #24
   17af8:	andeq	r7, r1, r4, asr #24
   17afc:	andeq	r7, r1, r4, asr #24
   17b00:	andeq	r7, r1, r4, asr #24
   17b04:	andeq	r7, r1, r4, asr #24
   17b08:	andeq	r7, r1, r4, asr #24
   17b0c:	andeq	r7, r1, r4, asr #24
   17b10:	andeq	r7, r1, r4, asr #24
   17b14:	andeq	r7, r1, r4, asr #24
   17b18:	andeq	r7, r1, r4, asr #24
   17b1c:	andeq	r7, r1, r4, asr #24
   17b20:	andeq	r7, r1, r4, asr #24
   17b24:	andeq	r7, r1, r4, asr #24
   17b28:	andeq	r7, r1, r4, asr #24
   17b2c:	andeq	r7, r1, r4, asr #24
   17b30:	andeq	r7, r1, r4, asr #24
   17b34:	andeq	r7, r1, r4, asr #26
   17b38:	andeq	r7, r1, r4, asr #26
   17b3c:	andeq	r7, r1, r4, asr #26
   17b40:	andeq	r7, r1, r4, asr #26
   17b44:	muleq	r1, r4, lr
   17b48:	andeq	r7, r1, ip, asr pc
   17b4c:	andeq	r7, r1, r4, asr #24
   17b50:	andeq	r7, r1, r4, asr #24
   17b54:	andeq	r7, r1, r4, asr #24
   17b58:	andeq	r7, r1, r4, asr #24
   17b5c:	andeq	r7, r1, r4, asr #24
   17b60:	andeq	r7, r1, r4, asr #24
   17b64:	andeq	r7, r1, r4, asr #24
   17b68:	andeq	r7, r1, r4, asr #24
   17b6c:	andeq	r7, r1, r4, asr #24
   17b70:	andeq	r7, r1, r4, asr #24
   17b74:	andeq	r7, r1, r4, asr #24
   17b78:	andeq	r7, r1, r4, asr #24
   17b7c:	andeq	r7, r1, r4, asr #24
   17b80:	andeq	r7, r1, r4, asr #24
   17b84:	andeq	r7, r1, r4, asr #24
   17b88:	andeq	r7, r1, r4, asr #24
   17b8c:	andeq	r7, r1, r4, asr #24
   17b90:	andeq	r7, r1, r4, asr #24
   17b94:	andeq	r7, r1, r4, asr #24
   17b98:	andeq	r7, r1, r4, asr #24
   17b9c:	andeq	r7, r1, r4, asr #24
   17ba0:	andeq	r7, r1, r4, asr #24
   17ba4:	andeq	r7, r1, r4, asr #24
   17ba8:	andeq	r7, r1, r4, asr #24
   17bac:	andeq	r7, r1, r4, asr #24
   17bb0:	andeq	r7, r1, r4, asr #24
   17bb4:	andeq	r7, r1, r4, asr #26
   17bb8:	andeq	r7, r1, ip, ror #26
   17bbc:	andeq	r7, r1, r4, asr #24
   17bc0:	andeq	r7, r1, r4, asr #26
   17bc4:	andeq	r7, r1, r4, asr #24
   17bc8:	andeq	r7, r1, r4, asr #26
   17bcc:	andeq	r7, r1, r4, asr #24
   17bd0:	andeq	r7, r1, r4, asr #24
   17bd4:	andeq	r7, r1, r4, asr #24
   17bd8:	andeq	r7, r1, r4, asr #24
   17bdc:	andeq	r7, r1, r4, asr #24
   17be0:	andeq	r7, r1, r4, asr #24
   17be4:	andeq	r7, r1, r4, asr #24
   17be8:	andeq	r7, r1, r4, asr #24
   17bec:	andeq	r7, r1, r4, asr #24
   17bf0:	andeq	r7, r1, r4, asr #24
   17bf4:	andeq	r7, r1, r4, asr #24
   17bf8:	andeq	r7, r1, r4, asr #24
   17bfc:	andeq	r7, r1, r4, asr #24
   17c00:	andeq	r7, r1, r4, asr #24
   17c04:	andeq	r7, r1, r4, asr #24
   17c08:	andeq	r7, r1, r4, asr #24
   17c0c:	andeq	r7, r1, r4, asr #24
   17c10:	andeq	r7, r1, r4, asr #24
   17c14:	andeq	r7, r1, r4, asr #24
   17c18:	andeq	r7, r1, r4, asr #24
   17c1c:	andeq	r7, r1, r4, asr #24
   17c20:	andeq	r7, r1, r4, asr #24
   17c24:	andeq	r7, r1, r4, asr #24
   17c28:	andeq	r7, r1, r4, asr #24
   17c2c:	andeq	r7, r1, r4, asr #24
   17c30:	andeq	r7, r1, r4, asr #24
   17c34:	andeq	r7, r1, r0, lsl #26
   17c38:	andeq	r7, r1, r4, asr #26
   17c3c:	andeq	r7, r1, r0, lsl #26
   17c40:	andeq	r7, r1, ip, lsr #26
   17c44:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c48:	tst	r0, #1
   17c4c:	bne	17c78 <__assert_fail@plt+0x5f78>
   17c50:	ubfx	r0, r4, #5, #3
   17c54:	ldr	r1, [fp, #16]
   17c58:	ldr	r0, [r1, r0, lsl #2]
   17c5c:	and	r1, r4, #31
   17c60:	mov	r2, #1
   17c64:	tst	r0, r2, lsl r1
   17c68:	beq	17c78 <__assert_fail@plt+0x5f78>
   17c6c:	mov	r0, r4
   17c70:	mov	r1, r6
   17c74:	b	17c8c <__assert_fail@plt+0x5f8c>
   17c78:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17c7c:	cmp	r0, #0
   17c80:	mov	r0, r4
   17c84:	mov	r1, r6
   17c88:	beq	17fc4 <__assert_fail@plt+0x62c4>
   17c8c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17c90:	tst	r2, #1
   17c94:	bne	18588 <__assert_fail@plt+0x6888>
   17c98:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17c9c:	subs	r2, r2, #2
   17ca0:	movwne	r2, #1
   17ca4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17ca8:	orr	r2, r2, r3
   17cac:	tst	r2, #1
   17cb0:	bne	17cec <__assert_fail@plt+0x5fec>
   17cb4:	cmp	r8, sl
   17cb8:	movcc	r2, #39	; 0x27
   17cbc:	strbcc	r2, [r5, r8]
   17cc0:	add	r2, r8, #1
   17cc4:	cmp	r2, sl
   17cc8:	movcc	r3, #36	; 0x24
   17ccc:	strbcc	r3, [r5, r2]
   17cd0:	add	r2, r8, #2
   17cd4:	cmp	r2, sl
   17cd8:	movcc	r3, #39	; 0x27
   17cdc:	strbcc	r3, [r5, r2]
   17ce0:	add	r8, r8, #3
   17ce4:	mov	r2, #1
   17ce8:	str	r2, [fp, #-56]	; 0xffffffc8
   17cec:	cmp	r8, sl
   17cf0:	movcc	r2, #92	; 0x5c
   17cf4:	strbcc	r2, [r5, r8]
   17cf8:	add	r8, r8, #1
   17cfc:	b	18008 <__assert_fail@plt+0x6308>
   17d00:	cmp	lr, #1
   17d04:	beq	17d2c <__assert_fail@plt+0x602c>
   17d08:	mov	r6, #0
   17d0c:	cmn	lr, #1
   17d10:	bne	17d38 <__assert_fail@plt+0x6038>
   17d14:	ldrb	r0, [ip, #1]
   17d18:	cmp	r0, #0
   17d1c:	beq	17d2c <__assert_fail@plt+0x602c>
   17d20:	mvn	lr, #0
   17d24:	mov	r9, #0
   17d28:	b	17c44 <__assert_fail@plt+0x5f44>
   17d2c:	mov	r6, #0
   17d30:	cmp	r7, #0
   17d34:	beq	17d40 <__assert_fail@plt+0x6040>
   17d38:	mov	r9, #0
   17d3c:	b	17c44 <__assert_fail@plt+0x5f44>
   17d40:	mov	r1, #1
   17d44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17d48:	cmp	r0, #2
   17d4c:	bne	17d64 <__assert_fail@plt+0x6064>
   17d50:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17d54:	tst	r0, #1
   17d58:	mov	r6, r1
   17d5c:	beq	17c44 <__assert_fail@plt+0x5f44>
   17d60:	b	18588 <__assert_fail@plt+0x6888>
   17d64:	mov	r6, r1
   17d68:	b	17c44 <__assert_fail@plt+0x5f44>
   17d6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17d70:	cmp	r0, #2
   17d74:	bne	17fa8 <__assert_fail@plt+0x62a8>
   17d78:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17d7c:	tst	r0, #1
   17d80:	bne	18588 <__assert_fail@plt+0x6888>
   17d84:	mov	r9, #0
   17d88:	b	17fbc <__assert_fail@plt+0x62bc>
   17d8c:	mov	r0, #102	; 0x66
   17d90:	b	18030 <__assert_fail@plt+0x6330>
   17d94:	mov	r2, #116	; 0x74
   17d98:	b	17da8 <__assert_fail@plt+0x60a8>
   17d9c:	mov	r0, #98	; 0x62
   17da0:	b	18030 <__assert_fail@plt+0x6330>
   17da4:	mov	r2, #114	; 0x72
   17da8:	ldr	r0, [sp, #72]	; 0x48
   17dac:	tst	r0, #1
   17db0:	mov	r0, r2
   17db4:	bne	18030 <__assert_fail@plt+0x6330>
   17db8:	b	18588 <__assert_fail@plt+0x6888>
   17dbc:	ldr	r0, [sp, #92]	; 0x5c
   17dc0:	tst	r0, #1
   17dc4:	beq	1804c <__assert_fail@plt+0x634c>
   17dc8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17dcc:	tst	r0, #1
   17dd0:	bne	18588 <__assert_fail@plt+0x6888>
   17dd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17dd8:	subs	r0, r0, #2
   17ddc:	movwne	r0, #1
   17de0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17de4:	orr	r0, r0, r1
   17de8:	tst	r0, #1
   17dec:	bne	17e28 <__assert_fail@plt+0x6128>
   17df0:	cmp	r8, sl
   17df4:	movcc	r0, #39	; 0x27
   17df8:	strbcc	r0, [r5, r8]
   17dfc:	add	r0, r8, #1
   17e00:	cmp	r0, sl
   17e04:	movcc	r1, #36	; 0x24
   17e08:	strbcc	r1, [r5, r0]
   17e0c:	add	r0, r8, #2
   17e10:	cmp	r0, sl
   17e14:	movcc	r1, #39	; 0x27
   17e18:	strbcc	r1, [r5, r0]
   17e1c:	add	r8, r8, #3
   17e20:	mov	r0, #1
   17e24:	str	r0, [fp, #-56]	; 0xffffffc8
   17e28:	cmp	r8, sl
   17e2c:	movcc	r0, #92	; 0x5c
   17e30:	strbcc	r0, [r5, r8]
   17e34:	add	r0, r8, #1
   17e38:	mov	r6, #0
   17e3c:	mov	r9, #1
   17e40:	mov	r4, #48	; 0x30
   17e44:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17e48:	cmp	r1, #2
   17e4c:	beq	18210 <__assert_fail@plt+0x6510>
   17e50:	add	r1, r7, #1
   17e54:	cmp	r1, lr
   17e58:	bcs	18210 <__assert_fail@plt+0x6510>
   17e5c:	ldrb	r1, [ip, r1]
   17e60:	sub	r1, r1, #48	; 0x30
   17e64:	uxtb	r1, r1
   17e68:	cmp	r1, #9
   17e6c:	bhi	18210 <__assert_fail@plt+0x6510>
   17e70:	cmp	r0, sl
   17e74:	movcc	r1, #48	; 0x30
   17e78:	strbcc	r1, [r5, r0]
   17e7c:	add	r0, r8, #2
   17e80:	cmp	r0, sl
   17e84:	movcc	r1, #48	; 0x30
   17e88:	strbcc	r1, [r5, r0]
   17e8c:	add	r8, r8, #3
   17e90:	b	17c44 <__assert_fail@plt+0x5f44>
   17e94:	mov	r9, #0
   17e98:	mov	r4, #63	; 0x3f
   17e9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17ea0:	cmp	r0, #5
   17ea4:	beq	18218 <__assert_fail@plt+0x6518>
   17ea8:	cmp	r0, #2
   17eac:	bne	182c0 <__assert_fail@plt+0x65c0>
   17eb0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17eb4:	tst	r0, #1
   17eb8:	mov	r6, #0
   17ebc:	beq	17c44 <__assert_fail@plt+0x5f44>
   17ec0:	b	18588 <__assert_fail@plt+0x6888>
   17ec4:	mov	r0, #118	; 0x76
   17ec8:	b	18030 <__assert_fail@plt+0x6330>
   17ecc:	mov	r4, #39	; 0x27
   17ed0:	mov	r0, #1
   17ed4:	str	r0, [sp, #64]	; 0x40
   17ed8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17edc:	cmp	r0, #2
   17ee0:	bne	18068 <__assert_fail@plt+0x6368>
   17ee4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17ee8:	tst	r0, #1
   17eec:	bne	18588 <__assert_fail@plt+0x6888>
   17ef0:	ldr	r2, [sp, #84]	; 0x54
   17ef4:	cmp	r2, #0
   17ef8:	mov	r0, r2
   17efc:	movwne	r0, #1
   17f00:	clz	r1, sl
   17f04:	lsr	r1, r1, #5
   17f08:	orrs	r0, r0, r1
   17f0c:	moveq	r2, sl
   17f10:	str	r2, [sp, #84]	; 0x54
   17f14:	moveq	sl, r0
   17f18:	cmp	r8, sl
   17f1c:	movcc	r0, #39	; 0x27
   17f20:	strbcc	r0, [r5, r8]
   17f24:	add	r0, r8, #1
   17f28:	cmp	r0, sl
   17f2c:	movcc	r1, #92	; 0x5c
   17f30:	strbcc	r1, [r5, r0]
   17f34:	add	r0, r8, #2
   17f38:	cmp	r0, sl
   17f3c:	movcc	r1, #39	; 0x27
   17f40:	strbcc	r1, [r5, r0]
   17f44:	add	r8, r8, #3
   17f48:	mov	r0, #0
   17f4c:	str	r0, [fp, #-56]	; 0xffffffc8
   17f50:	mov	r9, #0
   17f54:	mov	r6, #1
   17f58:	b	17c44 <__assert_fail@plt+0x5f44>
   17f5c:	ldr	r0, [sp, #44]	; 0x2c
   17f60:	cmp	r0, #1
   17f64:	bne	18070 <__assert_fail@plt+0x6370>
   17f68:	str	lr, [sp, #32]
   17f6c:	bl	11ab4 <__ctype_b_loc@plt>
   17f70:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17f74:	ldr	r0, [r0]
   17f78:	add	r0, r0, r4, lsl #1
   17f7c:	ldrb	r0, [r0, #1]
   17f80:	ubfx	r6, r0, #6, #1
   17f84:	mov	r2, #1
   17f88:	ldr	r0, [sp, #60]	; 0x3c
   17f8c:	orr	r1, r6, r0
   17f90:	cmp	r2, #1
   17f94:	bhi	182c8 <__assert_fail@plt+0x65c8>
   17f98:	tst	r1, #1
   17f9c:	beq	182c8 <__assert_fail@plt+0x65c8>
   17fa0:	ldr	lr, [sp, #32]
   17fa4:	b	17c44 <__assert_fail@plt+0x5f44>
   17fa8:	mov	r9, #0
   17fac:	mov	r0, #92	; 0x5c
   17fb0:	ldr	r1, [sp, #56]	; 0x38
   17fb4:	cmp	r1, #0
   17fb8:	beq	18030 <__assert_fail@plt+0x6330>
   17fbc:	mov	r4, #92	; 0x5c
   17fc0:	mov	r6, #0
   17fc4:	cmp	r9, #0
   17fc8:	bne	18000 <__assert_fail@plt+0x6300>
   17fcc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17fd0:	tst	r0, #1
   17fd4:	beq	18000 <__assert_fail@plt+0x6300>
   17fd8:	cmp	r8, sl
   17fdc:	movcc	r0, #39	; 0x27
   17fe0:	strbcc	r0, [r5, r8]
   17fe4:	add	r0, r8, #1
   17fe8:	cmp	r0, sl
   17fec:	movcc	r1, #39	; 0x27
   17ff0:	strbcc	r1, [r5, r0]
   17ff4:	add	r8, r8, #2
   17ff8:	mov	r0, #0
   17ffc:	str	r0, [fp, #-56]	; 0xffffffc8
   18000:	mov	r1, r6
   18004:	mov	r0, r4
   18008:	cmp	r8, sl
   1800c:	strbcc	r0, [r5, r8]
   18010:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18014:	and	r0, r0, r1
   18018:	str	r0, [fp, #-48]	; 0xffffffd0
   1801c:	add	r8, r8, #1
   18020:	add	r7, r7, #1
   18024:	cmn	lr, #1
   18028:	bne	1797c <__assert_fail@plt+0x5c7c>
   1802c:	b	17988 <__assert_fail@plt+0x5c88>
   18030:	mov	r9, #0
   18034:	ldr	r1, [sp, #92]	; 0x5c
   18038:	tst	r1, #1
   1803c:	mov	r6, #0
   18040:	mov	r1, #0
   18044:	beq	17c44 <__assert_fail@plt+0x5f44>
   18048:	b	17c8c <__assert_fail@plt+0x5f8c>
   1804c:	mov	r4, #0
   18050:	ldr	r0, [sp, #40]	; 0x28
   18054:	cmp	r0, #0
   18058:	mov	r9, #0
   1805c:	mov	r6, #0
   18060:	beq	17c44 <__assert_fail@plt+0x5f44>
   18064:	b	18020 <__assert_fail@plt+0x6320>
   18068:	mov	r6, #1
   1806c:	b	17c44 <__assert_fail@plt+0x5f44>
   18070:	mov	r0, #0
   18074:	str	r0, [fp, #-36]	; 0xffffffdc
   18078:	str	r0, [fp, #-40]	; 0xffffffd8
   1807c:	cmn	lr, #1
   18080:	bne	18094 <__assert_fail@plt+0x6394>
   18084:	mov	r0, ip
   18088:	bl	11af0 <strlen@plt>
   1808c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18090:	mov	lr, r0
   18094:	ldr	r0, [sp, #76]	; 0x4c
   18098:	add	r0, r0, r7
   1809c:	str	r0, [sp, #24]
   180a0:	mov	r6, #1
   180a4:	mov	r2, #0
   180a8:	sub	r0, fp, #40	; 0x28
   180ac:	mov	r3, r0
   180b0:	str	r5, [sp, #28]
   180b4:	str	lr, [sp, #32]
   180b8:	b	180fc <__assert_fail@plt+0x63fc>
   180bc:	ldr	r5, [sp, #52]	; 0x34
   180c0:	add	r5, r0, r5
   180c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   180c8:	bl	119ac <iswprint@plt>
   180cc:	cmp	r0, #0
   180d0:	movwne	r0, #1
   180d4:	and	r6, r6, r0
   180d8:	sub	r0, fp, #40	; 0x28
   180dc:	bl	11958 <mbsinit@plt>
   180e0:	sub	r3, fp, #40	; 0x28
   180e4:	mov	r2, r5
   180e8:	ldr	lr, [sp, #32]
   180ec:	cmp	r0, #0
   180f0:	ldr	r5, [sp, #28]
   180f4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   180f8:	bne	17f88 <__assert_fail@plt+0x6288>
   180fc:	str	r2, [sp, #52]	; 0x34
   18100:	add	r0, r2, r7
   18104:	add	r1, ip, r0
   18108:	str	r0, [sp, #48]	; 0x30
   1810c:	sub	r2, lr, r0
   18110:	sub	r0, fp, #44	; 0x2c
   18114:	bl	1a2ec <__assert_fail@plt+0x85ec>
   18118:	cmp	r0, #0
   1811c:	beq	18494 <__assert_fail@plt+0x6794>
   18120:	cmn	r0, #1
   18124:	beq	18450 <__assert_fail@plt+0x6750>
   18128:	cmn	r0, #2
   1812c:	ldr	lr, [sp, #32]
   18130:	beq	18458 <__assert_fail@plt+0x6758>
   18134:	cmp	r0, #2
   18138:	mov	r1, #0
   1813c:	movwcc	r1, #1
   18140:	ldr	r2, [sp, #68]	; 0x44
   18144:	eor	r2, r2, #1
   18148:	orrs	r1, r2, r1
   1814c:	bne	180bc <__assert_fail@plt+0x63bc>
   18150:	ldr	r1, [sp, #52]	; 0x34
   18154:	ldr	r2, [sp, #24]
   18158:	add	r1, r2, r1
   1815c:	sub	r2, r0, #1
   18160:	b	18170 <__assert_fail@plt+0x6470>
   18164:	add	r1, r1, #1
   18168:	subs	r2, r2, #1
   1816c:	beq	180bc <__assert_fail@plt+0x63bc>
   18170:	ldrb	r3, [r1]
   18174:	sub	r3, r3, #91	; 0x5b
   18178:	cmp	r3, #33	; 0x21
   1817c:	bhi	18164 <__assert_fail@plt+0x6464>
   18180:	add	r5, pc, #0
   18184:	ldr	pc, [r5, r3, lsl #2]
   18188:	andeq	r8, r1, r0, lsl #11
   1818c:	andeq	r8, r1, r0, lsl #11
   18190:	andeq	r8, r1, r4, ror #2
   18194:	andeq	r8, r1, r0, lsl #11
   18198:	andeq	r8, r1, r4, ror #2
   1819c:	andeq	r8, r1, r0, lsl #11
   181a0:	andeq	r8, r1, r4, ror #2
   181a4:	andeq	r8, r1, r4, ror #2
   181a8:	andeq	r8, r1, r4, ror #2
   181ac:	andeq	r8, r1, r4, ror #2
   181b0:	andeq	r8, r1, r4, ror #2
   181b4:	andeq	r8, r1, r4, ror #2
   181b8:	andeq	r8, r1, r4, ror #2
   181bc:	andeq	r8, r1, r4, ror #2
   181c0:	andeq	r8, r1, r4, ror #2
   181c4:	andeq	r8, r1, r4, ror #2
   181c8:	andeq	r8, r1, r4, ror #2
   181cc:	andeq	r8, r1, r4, ror #2
   181d0:	andeq	r8, r1, r4, ror #2
   181d4:	andeq	r8, r1, r4, ror #2
   181d8:	andeq	r8, r1, r4, ror #2
   181dc:	andeq	r8, r1, r4, ror #2
   181e0:	andeq	r8, r1, r4, ror #2
   181e4:	andeq	r8, r1, r4, ror #2
   181e8:	andeq	r8, r1, r4, ror #2
   181ec:	andeq	r8, r1, r4, ror #2
   181f0:	andeq	r8, r1, r4, ror #2
   181f4:	andeq	r8, r1, r4, ror #2
   181f8:	andeq	r8, r1, r4, ror #2
   181fc:	andeq	r8, r1, r4, ror #2
   18200:	andeq	r8, r1, r4, ror #2
   18204:	andeq	r8, r1, r4, ror #2
   18208:	andeq	r8, r1, r4, ror #2
   1820c:	andeq	r8, r1, r0, lsl #11
   18210:	mov	r8, r0
   18214:	b	17c44 <__assert_fail@plt+0x5f44>
   18218:	ldr	r0, [sp, #36]	; 0x24
   1821c:	cmp	r0, #0
   18220:	beq	182c0 <__assert_fail@plt+0x65c0>
   18224:	add	r0, r7, #2
   18228:	cmp	r0, lr
   1822c:	bcs	182c0 <__assert_fail@plt+0x65c0>
   18230:	add	r1, r7, ip
   18234:	ldrb	r1, [r1, #1]
   18238:	cmp	r1, #63	; 0x3f
   1823c:	bne	182c0 <__assert_fail@plt+0x65c0>
   18240:	ldrb	r1, [ip, r0]
   18244:	sub	r2, r1, #33	; 0x21
   18248:	cmp	r2, #29
   1824c:	bhi	182c0 <__assert_fail@plt+0x65c0>
   18250:	mov	r3, #1
   18254:	movw	r6, #20929	; 0x51c1
   18258:	movt	r6, #14336	; 0x3800
   1825c:	tst	r6, r3, lsl r2
   18260:	beq	182c0 <__assert_fail@plt+0x65c0>
   18264:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18268:	tst	r2, #1
   1826c:	bne	18588 <__assert_fail@plt+0x6888>
   18270:	cmp	r8, sl
   18274:	movcc	r2, #63	; 0x3f
   18278:	strbcc	r2, [r5, r8]
   1827c:	add	r2, r8, #1
   18280:	cmp	r2, sl
   18284:	movcc	r3, #34	; 0x22
   18288:	strbcc	r3, [r5, r2]
   1828c:	add	r2, r8, #2
   18290:	cmp	r2, sl
   18294:	movcc	r3, #34	; 0x22
   18298:	strbcc	r3, [r5, r2]
   1829c:	add	r2, r8, #3
   182a0:	cmp	r2, sl
   182a4:	movcc	r3, #63	; 0x3f
   182a8:	strbcc	r3, [r5, r2]
   182ac:	add	r8, r8, #4
   182b0:	mov	r7, r0
   182b4:	mov	r4, r1
   182b8:	mov	r6, #0
   182bc:	b	17c44 <__assert_fail@plt+0x5f44>
   182c0:	mov	r6, #0
   182c4:	b	17c44 <__assert_fail@plt+0x5f44>
   182c8:	add	r0, r2, r7
   182cc:	str	r0, [sp, #52]	; 0x34
   182d0:	mov	r2, #0
   182d4:	ldr	lr, [sp, #32]
   182d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   182dc:	str	r1, [sp, #48]	; 0x30
   182e0:	tst	r1, #1
   182e4:	bne	183c0 <__assert_fail@plt+0x66c0>
   182e8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   182ec:	tst	r1, #1
   182f0:	bne	18588 <__assert_fail@plt+0x6888>
   182f4:	mov	r3, r0
   182f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   182fc:	subs	r1, r0, #2
   18300:	movwne	r1, #1
   18304:	orr	r1, r1, r3
   18308:	tst	r1, #1
   1830c:	bne	18344 <__assert_fail@plt+0x6644>
   18310:	cmp	r8, sl
   18314:	movcc	r0, #39	; 0x27
   18318:	strbcc	r0, [r5, r8]
   1831c:	add	r2, r8, #1
   18320:	cmp	r2, sl
   18324:	movcc	r0, #36	; 0x24
   18328:	strbcc	r0, [r5, r2]
   1832c:	add	r2, r8, #2
   18330:	cmp	r2, sl
   18334:	movcc	r0, #39	; 0x27
   18338:	strbcc	r0, [r5, r2]
   1833c:	add	r8, r8, #3
   18340:	mov	r3, #1
   18344:	cmp	r8, sl
   18348:	movcc	r1, #92	; 0x5c
   1834c:	strbcc	r1, [r5, r8]
   18350:	add	r2, r8, #1
   18354:	cmp	r2, sl
   18358:	bcs	1836c <__assert_fail@plt+0x666c>
   1835c:	uxtb	r1, r4
   18360:	mov	r0, #48	; 0x30
   18364:	orr	r1, r0, r1, lsr #6
   18368:	strb	r1, [r5, r2]
   1836c:	add	r2, r8, #2
   18370:	cmp	r2, sl
   18374:	lsrcc	r1, r4, #3
   18378:	movcc	r0, #6
   1837c:	bficc	r1, r0, #3, #29
   18380:	strbcc	r1, [r5, r2]
   18384:	mov	r0, #6
   18388:	bfi	r4, r0, #3, #29
   1838c:	add	r8, r8, #3
   18390:	mov	r2, #1
   18394:	mov	r0, r3
   18398:	b	183e4 <__assert_fail@plt+0x66e4>
   1839c:	cmp	r8, sl
   183a0:	strbcc	r4, [r5, r8]
   183a4:	ldr	r1, [sp, #76]	; 0x4c
   183a8:	ldrb	r4, [r1, r7]
   183ac:	add	r8, r8, #1
   183b0:	mov	r7, r3
   183b4:	ldr	r1, [sp, #48]	; 0x30
   183b8:	tst	r1, #1
   183bc:	beq	182e8 <__assert_fail@plt+0x65e8>
   183c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   183c4:	tst	r1, #1
   183c8:	beq	183dc <__assert_fail@plt+0x66dc>
   183cc:	cmp	r8, sl
   183d0:	movcc	r1, #92	; 0x5c
   183d4:	strbcc	r1, [r5, r8]
   183d8:	add	r8, r8, #1
   183dc:	mov	r1, #0
   183e0:	str	r1, [fp, #-52]	; 0xffffffcc
   183e4:	and	r9, r2, #1
   183e8:	add	r3, r7, #1
   183ec:	ldr	r1, [sp, #52]	; 0x34
   183f0:	cmp	r1, r3
   183f4:	bls	18438 <__assert_fail@plt+0x6738>
   183f8:	cmp	r9, #0
   183fc:	movwne	r9, #1
   18400:	mvn	r1, r0
   18404:	orr	r1, r1, r9
   18408:	tst	r1, #1
   1840c:	bne	1839c <__assert_fail@plt+0x669c>
   18410:	cmp	r8, sl
   18414:	movcc	r1, #39	; 0x27
   18418:	strbcc	r1, [r5, r8]
   1841c:	add	r1, r8, #1
   18420:	cmp	r1, sl
   18424:	movcc	r0, #39	; 0x27
   18428:	strbcc	r0, [r5, r1]
   1842c:	add	r8, r8, #2
   18430:	mov	r0, #0
   18434:	b	1839c <__assert_fail@plt+0x669c>
   18438:	str	r0, [fp, #-56]	; 0xffffffc8
   1843c:	cmp	r9, #0
   18440:	movwne	r9, #1
   18444:	cmp	r9, #0
   18448:	beq	17fcc <__assert_fail@plt+0x62cc>
   1844c:	b	18000 <__assert_fail@plt+0x6300>
   18450:	mov	r6, #0
   18454:	b	18494 <__assert_fail@plt+0x6794>
   18458:	mov	r6, #0
   1845c:	ldr	r0, [sp, #48]	; 0x30
   18460:	cmp	r0, lr
   18464:	bcs	18494 <__assert_fail@plt+0x6794>
   18468:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1846c:	add	r0, ip, r7
   18470:	ldr	r2, [sp, #52]	; 0x34
   18474:	ldrb	r1, [r0, r2]
   18478:	cmp	r1, #0
   1847c:	beq	17f88 <__assert_fail@plt+0x6288>
   18480:	add	r2, r2, #1
   18484:	add	r1, r7, r2
   18488:	cmp	r1, lr
   1848c:	bcc	18474 <__assert_fail@plt+0x6774>
   18490:	b	17f88 <__assert_fail@plt+0x6288>
   18494:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18498:	ldr	r2, [sp, #52]	; 0x34
   1849c:	b	17f88 <__assert_fail@plt+0x6288>
   184a0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   184a4:	eor	r0, r1, #2
   184a8:	orr	r0, r0, r8
   184ac:	clz	r0, r0
   184b0:	lsr	r0, r0, #5
   184b4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   184b8:	tst	r3, r0
   184bc:	bne	18588 <__assert_fail@plt+0x6888>
   184c0:	mov	r6, r5
   184c4:	subs	r0, r1, #2
   184c8:	movwne	r0, #1
   184cc:	orr	r0, r3, r0
   184d0:	tst	r0, #1
   184d4:	ldr	r2, [sp, #92]	; 0x5c
   184d8:	ldreq	r0, [sp, #64]	; 0x40
   184dc:	eoreq	r0, r0, #1
   184e0:	tsteq	r0, #1
   184e4:	bne	18524 <__assert_fail@plt+0x6824>
   184e8:	mov	r9, lr
   184ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   184f0:	tst	r0, #1
   184f4:	bne	185f0 <__assert_fail@plt+0x68f0>
   184f8:	ldr	r0, [sp, #84]	; 0x54
   184fc:	cmp	r0, #0
   18500:	beq	18524 <__assert_fail@plt+0x6824>
   18504:	mov	r0, #0
   18508:	str	r0, [fp, #-48]	; 0xffffffd0
   1850c:	mov	r1, #2
   18510:	cmp	sl, #0
   18514:	mov	r0, r2
   18518:	mov	r4, r3
   1851c:	ldr	r7, [sp, #84]	; 0x54
   18520:	beq	176fc <__assert_fail@plt+0x59fc>
   18524:	ldr	r1, [fp, #-84]	; 0xffffffac
   18528:	clz	r0, r1
   1852c:	lsr	r0, r0, #5
   18530:	orr	r0, r0, r3
   18534:	tst	r0, #1
   18538:	bne	18564 <__assert_fail@plt+0x6864>
   1853c:	ldrb	r0, [r1]
   18540:	cmp	r0, #0
   18544:	beq	18564 <__assert_fail@plt+0x6864>
   18548:	add	r1, r1, #1
   1854c:	cmp	r8, sl
   18550:	strbcc	r0, [r6, r8]
   18554:	add	r8, r8, #1
   18558:	ldrb	r0, [r1], #1
   1855c:	cmp	r0, #0
   18560:	bne	1854c <__assert_fail@plt+0x684c>
   18564:	cmp	r8, sl
   18568:	movcc	r0, #0
   1856c:	strbcc	r0, [r6, r8]
   18570:	b	185e4 <__assert_fail@plt+0x68e4>
   18574:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18578:	mov	lr, r4
   1857c:	b	18588 <__assert_fail@plt+0x6888>
   18580:	ldr	r5, [sp, #28]
   18584:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18588:	mov	r0, #0
   1858c:	ldr	r1, [fp, #12]
   18590:	bic	r1, r1, #2
   18594:	mov	r2, #2
   18598:	ldr	r3, [sp, #92]	; 0x5c
   1859c:	tst	r3, #1
   185a0:	movwne	r2, #4
   185a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   185a8:	cmp	r3, #2
   185ac:	movne	r2, r3
   185b0:	str	r2, [sp]
   185b4:	str	r1, [sp, #4]
   185b8:	str	r0, [sp, #8]
   185bc:	ldr	r0, [sp, #80]	; 0x50
   185c0:	str	r0, [sp, #12]
   185c4:	ldr	r0, [sp, #88]	; 0x58
   185c8:	str	r0, [sp, #16]
   185cc:	mov	r0, r5
   185d0:	mov	r1, sl
   185d4:	mov	r2, ip
   185d8:	mov	r3, lr
   185dc:	bl	17670 <__assert_fail@plt+0x5970>
   185e0:	mov	r8, r0
   185e4:	mov	r0, r8
   185e8:	sub	sp, fp, #28
   185ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185f0:	mov	r0, #5
   185f4:	str	r0, [sp]
   185f8:	ldr	r0, [fp, #12]
   185fc:	str	r0, [sp, #4]
   18600:	ldr	r0, [fp, #16]
   18604:	str	r0, [sp, #8]
   18608:	ldr	r0, [sp, #80]	; 0x50
   1860c:	str	r0, [sp, #12]
   18610:	ldr	r0, [sp, #88]	; 0x58
   18614:	str	r0, [sp, #16]
   18618:	mov	r0, r6
   1861c:	ldr	r1, [sp, #84]	; 0x54
   18620:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18624:	mov	r3, r9
   18628:	b	185dc <__assert_fail@plt+0x68dc>
   1862c:	bl	11cc4 <abort@plt>
   18630:	mov	r3, r2
   18634:	mov	r2, #0
   18638:	b	1863c <__assert_fail@plt+0x693c>
   1863c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18640:	add	fp, sp, #28
   18644:	sub	sp, sp, #36	; 0x24
   18648:	mov	r4, r2
   1864c:	str	r2, [sp, #24]
   18650:	mov	r5, r1
   18654:	mov	r6, r0
   18658:	str	r0, [sp, #20]
   1865c:	movw	r8, #49824	; 0xc2a0
   18660:	movt	r8, #3
   18664:	cmp	r3, #0
   18668:	movne	r8, r3
   1866c:	bl	11b20 <__errno_location@plt>
   18670:	str	r0, [sp, #28]
   18674:	ldm	r8, {r3, r9}
   18678:	ldr	r1, [r8, #40]	; 0x28
   1867c:	ldr	r2, [r8, #44]	; 0x2c
   18680:	ldr	r7, [r0]
   18684:	str	r7, [sp, #32]
   18688:	add	sl, r8, #8
   1868c:	cmp	r4, #0
   18690:	orreq	r9, r9, #1
   18694:	stm	sp, {r3, r9, sl}
   18698:	str	r1, [sp, #12]
   1869c:	str	r2, [sp, #16]
   186a0:	mov	r0, #0
   186a4:	mov	r1, #0
   186a8:	mov	r2, r6
   186ac:	mov	r3, r5
   186b0:	mov	r7, r5
   186b4:	bl	17670 <__assert_fail@plt+0x5970>
   186b8:	mov	r5, r0
   186bc:	add	r4, r0, #1
   186c0:	mov	r0, r4
   186c4:	bl	195e8 <__assert_fail@plt+0x78e8>
   186c8:	mov	r6, r0
   186cc:	ldr	r0, [r8]
   186d0:	ldr	r1, [r8, #40]	; 0x28
   186d4:	ldr	r2, [r8, #44]	; 0x2c
   186d8:	stm	sp, {r0, r9, sl}
   186dc:	str	r1, [sp, #12]
   186e0:	str	r2, [sp, #16]
   186e4:	mov	r0, r6
   186e8:	mov	r1, r4
   186ec:	ldr	r2, [sp, #20]
   186f0:	mov	r3, r7
   186f4:	bl	17670 <__assert_fail@plt+0x5970>
   186f8:	ldr	r0, [sp, #24]
   186fc:	ldr	r1, [sp, #32]
   18700:	ldr	r2, [sp, #28]
   18704:	str	r1, [r2]
   18708:	cmp	r0, #0
   1870c:	strne	r5, [r0]
   18710:	mov	r0, r6
   18714:	sub	sp, fp, #28
   18718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1871c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18720:	add	fp, sp, #24
   18724:	movw	r8, #49600	; 0xc1c0
   18728:	movt	r8, #3
   1872c:	ldr	r4, [r8]
   18730:	movw	r5, #49604	; 0xc1c4
   18734:	movt	r5, #3
   18738:	ldr	r0, [r5]
   1873c:	cmp	r0, #2
   18740:	blt	1876c <__assert_fail@plt+0x6a6c>
   18744:	add	r7, r4, #12
   18748:	mov	r6, #0
   1874c:	ldr	r0, [r7, r6, lsl #3]
   18750:	bl	1a1ec <__assert_fail@plt+0x84ec>
   18754:	add	r0, r6, #1
   18758:	ldr	r1, [r5]
   1875c:	add	r2, r6, #2
   18760:	cmp	r2, r1
   18764:	mov	r6, r0
   18768:	blt	1874c <__assert_fail@plt+0x6a4c>
   1876c:	ldr	r0, [r4, #4]
   18770:	movw	r9, #49872	; 0xc2d0
   18774:	movt	r9, #3
   18778:	cmp	r0, r9
   1877c:	movw	r7, #49608	; 0xc1c8
   18780:	movt	r7, #3
   18784:	beq	18794 <__assert_fail@plt+0x6a94>
   18788:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1878c:	mov	r0, #256	; 0x100
   18790:	stm	r7, {r0, r9}
   18794:	cmp	r4, r7
   18798:	beq	187a8 <__assert_fail@plt+0x6aa8>
   1879c:	mov	r0, r4
   187a0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   187a4:	str	r7, [r8]
   187a8:	mov	r0, #1
   187ac:	str	r0, [r5]
   187b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   187b4:	movw	r3, #49824	; 0xc2a0
   187b8:	movt	r3, #3
   187bc:	mvn	r2, #0
   187c0:	b	187c4 <__assert_fail@plt+0x6ac4>
   187c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187c8:	add	fp, sp, #28
   187cc:	sub	sp, sp, #44	; 0x2c
   187d0:	mov	r7, r3
   187d4:	str	r2, [sp, #36]	; 0x24
   187d8:	str	r1, [sp, #32]
   187dc:	mov	r5, r0
   187e0:	bl	11b20 <__errno_location@plt>
   187e4:	cmp	r5, #0
   187e8:	bmi	18958 <__assert_fail@plt+0x6c58>
   187ec:	cmn	r5, #-2147483647	; 0x80000001
   187f0:	beq	18958 <__assert_fail@plt+0x6c58>
   187f4:	movw	r4, #49600	; 0xc1c0
   187f8:	movt	r4, #3
   187fc:	ldr	r6, [r4]
   18800:	str	r0, [sp, #28]
   18804:	ldr	r0, [r0]
   18808:	str	r0, [sp, #24]
   1880c:	movw	r8, #49604	; 0xc1c4
   18810:	movt	r8, #3
   18814:	ldr	r1, [r8]
   18818:	cmp	r1, r5
   1881c:	ble	18828 <__assert_fail@plt+0x6b28>
   18820:	mov	sl, r6
   18824:	b	18894 <__assert_fail@plt+0x6b94>
   18828:	str	r1, [fp, #-32]	; 0xffffffe0
   1882c:	mov	r0, #8
   18830:	str	r0, [sp]
   18834:	movw	r9, #49608	; 0xc1c8
   18838:	movt	r9, #3
   1883c:	subs	r0, r6, r9
   18840:	movne	r0, r6
   18844:	sub	r1, r5, r1
   18848:	add	r2, r1, #1
   1884c:	sub	r1, fp, #32
   18850:	mvn	r3, #-2147483648	; 0x80000000
   18854:	bl	196c4 <__assert_fail@plt+0x79c4>
   18858:	mov	sl, r0
   1885c:	str	r0, [r4]
   18860:	cmp	r6, r9
   18864:	bne	18870 <__assert_fail@plt+0x6b70>
   18868:	ldrd	r0, [r9]
   1886c:	stm	sl, {r0, r1}
   18870:	ldr	r1, [r8]
   18874:	add	r0, sl, r1, lsl #3
   18878:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1887c:	sub	r1, r2, r1
   18880:	lsl	r2, r1, #3
   18884:	mov	r1, #0
   18888:	bl	11b5c <memset@plt>
   1888c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18890:	str	r0, [r8]
   18894:	mov	r9, sl
   18898:	ldr	r6, [r9, r5, lsl #3]!
   1889c:	ldr	r4, [r9, #4]!
   188a0:	ldm	r7, {r0, r1}
   188a4:	ldr	r2, [r7, #40]	; 0x28
   188a8:	ldr	r3, [r7, #44]	; 0x2c
   188ac:	orr	r8, r1, #1
   188b0:	add	r1, r7, #8
   188b4:	stm	sp, {r0, r8}
   188b8:	str	r1, [sp, #20]
   188bc:	add	r0, sp, #8
   188c0:	stm	r0, {r1, r2, r3}
   188c4:	mov	r0, r4
   188c8:	mov	r1, r6
   188cc:	ldr	r2, [sp, #32]
   188d0:	ldr	r3, [sp, #36]	; 0x24
   188d4:	bl	17670 <__assert_fail@plt+0x5970>
   188d8:	cmp	r6, r0
   188dc:	bhi	18940 <__assert_fail@plt+0x6c40>
   188e0:	add	r6, r0, #1
   188e4:	str	r6, [sl, r5, lsl #3]
   188e8:	movw	r0, #49872	; 0xc2d0
   188ec:	movt	r0, #3
   188f0:	cmp	r4, r0
   188f4:	beq	18900 <__assert_fail@plt+0x6c00>
   188f8:	mov	r0, r4
   188fc:	bl	1a1ec <__assert_fail@plt+0x84ec>
   18900:	mov	r0, r6
   18904:	bl	195e8 <__assert_fail@plt+0x78e8>
   18908:	mov	r4, r0
   1890c:	str	r0, [r9]
   18910:	ldr	r0, [r7]
   18914:	ldr	r1, [r7, #40]	; 0x28
   18918:	ldr	r2, [r7, #44]	; 0x2c
   1891c:	stm	sp, {r0, r8}
   18920:	ldr	r0, [sp, #20]
   18924:	add	r3, sp, #8
   18928:	stm	r3, {r0, r1, r2}
   1892c:	mov	r0, r4
   18930:	mov	r1, r6
   18934:	ldr	r2, [sp, #32]
   18938:	ldr	r3, [sp, #36]	; 0x24
   1893c:	bl	17670 <__assert_fail@plt+0x5970>
   18940:	ldr	r0, [sp, #28]
   18944:	ldr	r1, [sp, #24]
   18948:	str	r1, [r0]
   1894c:	mov	r0, r4
   18950:	sub	sp, fp, #28
   18954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18958:	bl	11cc4 <abort@plt>
   1895c:	movw	r3, #49824	; 0xc2a0
   18960:	movt	r3, #3
   18964:	b	187c4 <__assert_fail@plt+0x6ac4>
   18968:	mov	r1, r0
   1896c:	mov	r0, #0
   18970:	b	187b4 <__assert_fail@plt+0x6ab4>
   18974:	mov	r2, r1
   18978:	mov	r1, r0
   1897c:	mov	r0, #0
   18980:	b	1895c <__assert_fail@plt+0x6c5c>
   18984:	push	{r4, r5, r6, sl, fp, lr}
   18988:	add	fp, sp, #16
   1898c:	sub	sp, sp, #48	; 0x30
   18990:	mov	r4, r2
   18994:	mov	r5, r0
   18998:	mov	r6, sp
   1899c:	mov	r0, r6
   189a0:	bl	189c0 <__assert_fail@plt+0x6cc0>
   189a4:	mov	r0, r5
   189a8:	mov	r1, r4
   189ac:	mvn	r2, #0
   189b0:	mov	r3, r6
   189b4:	bl	187c4 <__assert_fail@plt+0x6ac4>
   189b8:	sub	sp, fp, #16
   189bc:	pop	{r4, r5, r6, sl, fp, pc}
   189c0:	push	{fp, lr}
   189c4:	mov	fp, sp
   189c8:	vmov.i32	q8, #0	; 0x00000000
   189cc:	mov	r2, #32
   189d0:	mov	r3, r0
   189d4:	vst1.32	{d16-d17}, [r3], r2
   189d8:	vst1.32	{d16-d17}, [r3]
   189dc:	add	r2, r0, #16
   189e0:	vst1.32	{d16-d17}, [r2]
   189e4:	cmp	r1, #10
   189e8:	strne	r1, [r0]
   189ec:	popne	{fp, pc}
   189f0:	bl	11cc4 <abort@plt>
   189f4:	push	{r4, r5, r6, r7, fp, lr}
   189f8:	add	fp, sp, #16
   189fc:	sub	sp, sp, #48	; 0x30
   18a00:	mov	r4, r3
   18a04:	mov	r5, r2
   18a08:	mov	r6, r0
   18a0c:	mov	r7, sp
   18a10:	mov	r0, r7
   18a14:	bl	189c0 <__assert_fail@plt+0x6cc0>
   18a18:	mov	r0, r6
   18a1c:	mov	r1, r5
   18a20:	mov	r2, r4
   18a24:	mov	r3, r7
   18a28:	bl	187c4 <__assert_fail@plt+0x6ac4>
   18a2c:	sub	sp, fp, #16
   18a30:	pop	{r4, r5, r6, r7, fp, pc}
   18a34:	mov	r2, r1
   18a38:	mov	r1, r0
   18a3c:	mov	r0, #0
   18a40:	b	18984 <__assert_fail@plt+0x6c84>
   18a44:	mov	r3, r2
   18a48:	mov	r2, r1
   18a4c:	mov	r1, r0
   18a50:	mov	r0, #0
   18a54:	b	189f4 <__assert_fail@plt+0x6cf4>
   18a58:	push	{r4, r5, r6, sl, fp, lr}
   18a5c:	add	fp, sp, #16
   18a60:	sub	sp, sp, #48	; 0x30
   18a64:	mov	r4, r1
   18a68:	mov	r5, r0
   18a6c:	movw	r0, #49824	; 0xc2a0
   18a70:	movt	r0, #3
   18a74:	add	r1, r0, #16
   18a78:	mov	r3, #32
   18a7c:	vld1.64	{d16-d17}, [r0], r3
   18a80:	vld1.64	{d18-d19}, [r1]
   18a84:	mov	r6, sp
   18a88:	add	r1, r6, #16
   18a8c:	vld1.64	{d20-d21}, [r0]
   18a90:	vst1.64	{d18-d19}, [r1]
   18a94:	mov	r0, r6
   18a98:	vst1.64	{d16-d17}, [r0], r3
   18a9c:	vst1.64	{d20-d21}, [r0]
   18aa0:	mov	r0, r6
   18aa4:	mov	r1, r2
   18aa8:	mov	r2, #1
   18aac:	bl	17564 <__assert_fail@plt+0x5864>
   18ab0:	mov	r0, #0
   18ab4:	mov	r1, r5
   18ab8:	mov	r2, r4
   18abc:	mov	r3, r6
   18ac0:	bl	187c4 <__assert_fail@plt+0x6ac4>
   18ac4:	sub	sp, fp, #16
   18ac8:	pop	{r4, r5, r6, sl, fp, pc}
   18acc:	mov	r2, r1
   18ad0:	mvn	r1, #0
   18ad4:	b	18a58 <__assert_fail@plt+0x6d58>
   18ad8:	mov	r1, #58	; 0x3a
   18adc:	b	18acc <__assert_fail@plt+0x6dcc>
   18ae0:	mov	r2, #58	; 0x3a
   18ae4:	b	18a58 <__assert_fail@plt+0x6d58>
   18ae8:	push	{r4, r5, r6, sl, fp, lr}
   18aec:	add	fp, sp, #16
   18af0:	sub	sp, sp, #48	; 0x30
   18af4:	mov	r4, r2
   18af8:	mov	r5, r0
   18afc:	mov	r6, sp
   18b00:	mov	r0, r6
   18b04:	bl	189c0 <__assert_fail@plt+0x6cc0>
   18b08:	mov	r0, r6
   18b0c:	mov	r1, #58	; 0x3a
   18b10:	mov	r2, #1
   18b14:	bl	17564 <__assert_fail@plt+0x5864>
   18b18:	mov	r0, r5
   18b1c:	mov	r1, r4
   18b20:	mvn	r2, #0
   18b24:	mov	r3, r6
   18b28:	bl	187c4 <__assert_fail@plt+0x6ac4>
   18b2c:	sub	sp, fp, #16
   18b30:	pop	{r4, r5, r6, sl, fp, pc}
   18b34:	push	{fp, lr}
   18b38:	mov	fp, sp
   18b3c:	sub	sp, sp, #8
   18b40:	mvn	ip, #0
   18b44:	str	ip, [sp]
   18b48:	bl	18b54 <__assert_fail@plt+0x6e54>
   18b4c:	mov	sp, fp
   18b50:	pop	{fp, pc}
   18b54:	push	{r4, r5, r6, r7, fp, lr}
   18b58:	add	fp, sp, #16
   18b5c:	sub	sp, sp, #48	; 0x30
   18b60:	mov	r7, r3
   18b64:	mov	r5, r0
   18b68:	movw	r0, #49824	; 0xc2a0
   18b6c:	movt	r0, #3
   18b70:	add	r3, r0, #16
   18b74:	mov	r4, #32
   18b78:	vld1.64	{d16-d17}, [r0], r4
   18b7c:	vld1.64	{d18-d19}, [r3]
   18b80:	mov	r6, sp
   18b84:	add	r3, r6, #16
   18b88:	vld1.64	{d20-d21}, [r0]
   18b8c:	vst1.64	{d18-d19}, [r3]
   18b90:	mov	r0, r6
   18b94:	vst1.64	{d16-d17}, [r0], r4
   18b98:	vst1.64	{d20-d21}, [r0]
   18b9c:	mov	r0, r6
   18ba0:	bl	175bc <__assert_fail@plt+0x58bc>
   18ba4:	ldr	r2, [fp, #8]
   18ba8:	mov	r0, r5
   18bac:	mov	r1, r7
   18bb0:	mov	r3, r6
   18bb4:	bl	187c4 <__assert_fail@plt+0x6ac4>
   18bb8:	sub	sp, fp, #16
   18bbc:	pop	{r4, r5, r6, r7, fp, pc}
   18bc0:	mov	r3, r2
   18bc4:	mov	r2, r1
   18bc8:	mov	r1, r0
   18bcc:	mov	r0, #0
   18bd0:	b	18b34 <__assert_fail@plt+0x6e34>
   18bd4:	push	{fp, lr}
   18bd8:	mov	fp, sp
   18bdc:	sub	sp, sp, #8
   18be0:	mov	ip, r2
   18be4:	mov	r2, r1
   18be8:	mov	r1, r0
   18bec:	str	r3, [sp]
   18bf0:	mov	r0, #0
   18bf4:	mov	r3, ip
   18bf8:	bl	18b54 <__assert_fail@plt+0x6e54>
   18bfc:	mov	sp, fp
   18c00:	pop	{fp, pc}
   18c04:	movw	r3, #49616	; 0xc1d0
   18c08:	movt	r3, #3
   18c0c:	b	187c4 <__assert_fail@plt+0x6ac4>
   18c10:	mov	r2, r1
   18c14:	mov	r1, r0
   18c18:	mov	r0, #0
   18c1c:	b	18c04 <__assert_fail@plt+0x6f04>
   18c20:	mvn	r2, #0
   18c24:	b	18c04 <__assert_fail@plt+0x6f04>
   18c28:	mov	r1, r0
   18c2c:	mov	r0, #0
   18c30:	b	18c20 <__assert_fail@plt+0x6f20>
   18c34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c38:	add	fp, sp, #24
   18c3c:	sub	sp, sp, #16
   18c40:	mov	r4, r1
   18c44:	mov	r5, r0
   18c48:	mov	r7, #0
   18c4c:	mov	r0, #0
   18c50:	mov	r1, r5
   18c54:	mov	r2, #5
   18c58:	bl	11970 <dcgettext@plt>
   18c5c:	cmp	r0, r5
   18c60:	beq	18c6c <__assert_fail@plt+0x6f6c>
   18c64:	sub	sp, fp, #24
   18c68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c6c:	bl	28de8 <__assert_fail@plt+0x170e8>
   18c70:	mov	r6, r0
   18c74:	mov	r8, #56	; 0x38
   18c78:	mov	r0, #45	; 0x2d
   18c7c:	stm	sp, {r0, r8}
   18c80:	str	r7, [sp, #8]
   18c84:	str	r7, [sp, #12]
   18c88:	mov	r0, r6
   18c8c:	mov	r1, #85	; 0x55
   18c90:	mov	r2, #84	; 0x54
   18c94:	mov	r3, #70	; 0x46
   18c98:	bl	18d30 <__assert_fail@plt+0x7030>
   18c9c:	cmp	r0, #0
   18ca0:	beq	18cbc <__assert_fail@plt+0x6fbc>
   18ca4:	ldrb	r1, [r5]
   18ca8:	movw	r2, #43332	; 0xa944
   18cac:	movt	r2, #2
   18cb0:	movw	r0, #43336	; 0xa948
   18cb4:	movt	r0, #2
   18cb8:	b	18d00 <__assert_fail@plt+0x7000>
   18cbc:	mov	r0, #48	; 0x30
   18cc0:	mov	r1, #51	; 0x33
   18cc4:	str	r8, [sp]
   18cc8:	stmib	sp, {r0, r1}
   18ccc:	str	r0, [sp, #12]
   18cd0:	mov	r0, r6
   18cd4:	mov	r1, #71	; 0x47
   18cd8:	mov	r2, #66	; 0x42
   18cdc:	mov	r3, #49	; 0x31
   18ce0:	bl	18d30 <__assert_fail@plt+0x7030>
   18ce4:	cmp	r0, #0
   18ce8:	beq	18d10 <__assert_fail@plt+0x7010>
   18cec:	ldrb	r1, [r5]
   18cf0:	movw	r2, #43340	; 0xa94c
   18cf4:	movt	r2, #2
   18cf8:	movw	r0, #43344	; 0xa950
   18cfc:	movt	r0, #2
   18d00:	cmp	r1, #96	; 0x60
   18d04:	moveq	r0, r2
   18d08:	sub	sp, fp, #24
   18d0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18d10:	movw	r1, #43328	; 0xa940
   18d14:	movt	r1, #2
   18d18:	movw	r0, #40561	; 0x9e71
   18d1c:	movt	r0, #2
   18d20:	cmp	r4, #9
   18d24:	moveq	r0, r1
   18d28:	sub	sp, fp, #24
   18d2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18d30:	push	{r4, r5, r6, r7, fp, lr}
   18d34:	add	fp, sp, #16
   18d38:	sub	sp, sp, #16
   18d3c:	mov	r4, r3
   18d40:	mov	r5, r2
   18d44:	mov	r7, r1
   18d48:	mov	r6, r0
   18d4c:	mov	r0, r1
   18d50:	bl	28b74 <__assert_fail@plt+0x16e74>
   18d54:	ldrb	r1, [r6]
   18d58:	cmp	r0, #0
   18d5c:	andne	r1, r1, #223	; 0xdf
   18d60:	mov	r0, #0
   18d64:	cmp	r1, r7
   18d68:	bne	18da0 <__assert_fail@plt+0x70a0>
   18d6c:	cmp	r7, #0
   18d70:	beq	18da8 <__assert_fail@plt+0x70a8>
   18d74:	ldr	r0, [fp, #20]
   18d78:	ldr	r1, [fp, #16]
   18d7c:	ldr	r2, [fp, #12]
   18d80:	ldr	r3, [fp, #8]
   18d84:	str	r2, [sp]
   18d88:	str	r1, [sp, #4]
   18d8c:	str	r0, [sp, #8]
   18d90:	mov	r0, r6
   18d94:	mov	r1, r5
   18d98:	mov	r2, r4
   18d9c:	bl	18db4 <__assert_fail@plt+0x70b4>
   18da0:	sub	sp, fp, #16
   18da4:	pop	{r4, r5, r6, r7, fp, pc}
   18da8:	mov	r0, #1
   18dac:	sub	sp, fp, #16
   18db0:	pop	{r4, r5, r6, r7, fp, pc}
   18db4:	push	{r4, r5, r6, r7, fp, lr}
   18db8:	add	fp, sp, #16
   18dbc:	sub	sp, sp, #8
   18dc0:	mov	r4, r3
   18dc4:	mov	r5, r2
   18dc8:	mov	r7, r1
   18dcc:	mov	r6, r0
   18dd0:	mov	r0, r1
   18dd4:	bl	28b74 <__assert_fail@plt+0x16e74>
   18dd8:	ldrb	r1, [r6, #1]
   18ddc:	cmp	r0, #0
   18de0:	andne	r1, r1, #223	; 0xdf
   18de4:	mov	r0, #0
   18de8:	cmp	r1, r7
   18dec:	bne	18e1c <__assert_fail@plt+0x711c>
   18df0:	cmp	r7, #0
   18df4:	beq	18e24 <__assert_fail@plt+0x7124>
   18df8:	ldr	r0, [fp, #16]
   18dfc:	ldr	r1, [fp, #12]
   18e00:	ldr	r3, [fp, #8]
   18e04:	str	r1, [sp]
   18e08:	str	r0, [sp, #4]
   18e0c:	mov	r0, r6
   18e10:	mov	r1, r5
   18e14:	mov	r2, r4
   18e18:	bl	18e30 <__assert_fail@plt+0x7130>
   18e1c:	sub	sp, fp, #16
   18e20:	pop	{r4, r5, r6, r7, fp, pc}
   18e24:	mov	r0, #1
   18e28:	sub	sp, fp, #16
   18e2c:	pop	{r4, r5, r6, r7, fp, pc}
   18e30:	push	{r4, r5, r6, r7, fp, lr}
   18e34:	add	fp, sp, #16
   18e38:	sub	sp, sp, #8
   18e3c:	mov	r4, r3
   18e40:	mov	r5, r2
   18e44:	mov	r7, r1
   18e48:	mov	r6, r0
   18e4c:	mov	r0, r1
   18e50:	bl	28b74 <__assert_fail@plt+0x16e74>
   18e54:	ldrb	r1, [r6, #2]
   18e58:	cmp	r0, #0
   18e5c:	andne	r1, r1, #223	; 0xdf
   18e60:	mov	r0, #0
   18e64:	cmp	r1, r7
   18e68:	bne	18e90 <__assert_fail@plt+0x7190>
   18e6c:	cmp	r7, #0
   18e70:	beq	18e98 <__assert_fail@plt+0x7198>
   18e74:	ldr	r0, [fp, #12]
   18e78:	ldr	r3, [fp, #8]
   18e7c:	str	r0, [sp]
   18e80:	mov	r0, r6
   18e84:	mov	r1, r5
   18e88:	mov	r2, r4
   18e8c:	bl	18ea4 <__assert_fail@plt+0x71a4>
   18e90:	sub	sp, fp, #16
   18e94:	pop	{r4, r5, r6, r7, fp, pc}
   18e98:	mov	r0, #1
   18e9c:	sub	sp, fp, #16
   18ea0:	pop	{r4, r5, r6, r7, fp, pc}
   18ea4:	push	{r4, r5, r6, r7, fp, lr}
   18ea8:	add	fp, sp, #16
   18eac:	mov	r4, r3
   18eb0:	mov	r5, r2
   18eb4:	mov	r7, r1
   18eb8:	mov	r6, r0
   18ebc:	mov	r0, r1
   18ec0:	bl	28b74 <__assert_fail@plt+0x16e74>
   18ec4:	ldrb	r1, [r6, #3]
   18ec8:	ldr	r3, [fp, #8]
   18ecc:	cmp	r0, #0
   18ed0:	andne	r1, r1, #223	; 0xdf
   18ed4:	mov	r0, #0
   18ed8:	cmp	r1, r7
   18edc:	bne	18f00 <__assert_fail@plt+0x7200>
   18ee0:	cmp	r7, #0
   18ee4:	beq	18efc <__assert_fail@plt+0x71fc>
   18ee8:	mov	r0, r6
   18eec:	mov	r1, r5
   18ef0:	mov	r2, r4
   18ef4:	pop	{r4, r5, r6, r7, fp, lr}
   18ef8:	b	18f04 <__assert_fail@plt+0x7204>
   18efc:	mov	r0, #1
   18f00:	pop	{r4, r5, r6, r7, fp, pc}
   18f04:	push	{r4, r5, r6, r7, fp, lr}
   18f08:	add	fp, sp, #16
   18f0c:	mov	r4, r3
   18f10:	mov	r5, r2
   18f14:	mov	r7, r1
   18f18:	mov	r6, r0
   18f1c:	mov	r0, r1
   18f20:	bl	28b74 <__assert_fail@plt+0x16e74>
   18f24:	ldrb	r1, [r6, #4]
   18f28:	cmp	r0, #0
   18f2c:	andne	r1, r1, #223	; 0xdf
   18f30:	mov	r0, #0
   18f34:	cmp	r1, r7
   18f38:	bne	18f5c <__assert_fail@plt+0x725c>
   18f3c:	cmp	r7, #0
   18f40:	beq	18f58 <__assert_fail@plt+0x7258>
   18f44:	mov	r0, r6
   18f48:	mov	r1, r5
   18f4c:	mov	r2, r4
   18f50:	pop	{r4, r5, r6, r7, fp, lr}
   18f54:	b	18f60 <__assert_fail@plt+0x7260>
   18f58:	mov	r0, #1
   18f5c:	pop	{r4, r5, r6, r7, fp, pc}
   18f60:	push	{r4, r5, r6, sl, fp, lr}
   18f64:	add	fp, sp, #16
   18f68:	mov	r4, r2
   18f6c:	mov	r6, r1
   18f70:	mov	r5, r0
   18f74:	mov	r0, r1
   18f78:	bl	28b74 <__assert_fail@plt+0x16e74>
   18f7c:	ldrb	r1, [r5, #5]
   18f80:	cmp	r0, #0
   18f84:	andne	r1, r1, #223	; 0xdf
   18f88:	mov	r0, #0
   18f8c:	cmp	r1, r6
   18f90:	bne	18fb0 <__assert_fail@plt+0x72b0>
   18f94:	cmp	r6, #0
   18f98:	beq	18fac <__assert_fail@plt+0x72ac>
   18f9c:	mov	r0, r5
   18fa0:	mov	r1, r4
   18fa4:	pop	{r4, r5, r6, sl, fp, lr}
   18fa8:	b	18fb4 <__assert_fail@plt+0x72b4>
   18fac:	mov	r0, #1
   18fb0:	pop	{r4, r5, r6, sl, fp, pc}
   18fb4:	push	{r4, r5, fp, lr}
   18fb8:	add	fp, sp, #8
   18fbc:	mov	r5, r1
   18fc0:	mov	r4, r0
   18fc4:	mov	r0, r1
   18fc8:	bl	28b74 <__assert_fail@plt+0x16e74>
   18fcc:	ldrb	r1, [r4, #6]
   18fd0:	cmp	r0, #0
   18fd4:	andne	r1, r1, #223	; 0xdf
   18fd8:	mov	r0, #0
   18fdc:	cmp	r1, r5
   18fe0:	popne	{r4, r5, fp, pc}
   18fe4:	cmp	r5, #0
   18fe8:	beq	18ff8 <__assert_fail@plt+0x72f8>
   18fec:	mov	r0, r4
   18ff0:	pop	{r4, r5, fp, lr}
   18ff4:	b	19000 <__assert_fail@plt+0x7300>
   18ff8:	mov	r0, #1
   18ffc:	pop	{r4, r5, fp, pc}
   19000:	push	{r4, sl, fp, lr}
   19004:	add	fp, sp, #8
   19008:	mov	r4, r0
   1900c:	mov	r0, #0
   19010:	bl	28b74 <__assert_fail@plt+0x16e74>
   19014:	ldrb	r1, [r4, #7]
   19018:	cmp	r0, #0
   1901c:	beq	19030 <__assert_fail@plt+0x7330>
   19020:	tst	r1, #223	; 0xdf
   19024:	bne	19038 <__assert_fail@plt+0x7338>
   19028:	mov	r0, #1
   1902c:	pop	{r4, sl, fp, pc}
   19030:	cmp	r1, #0
   19034:	beq	19028 <__assert_fail@plt+0x7328>
   19038:	mov	r0, #0
   1903c:	pop	{r4, sl, fp, pc}
   19040:	ldr	r0, [r0, #76]	; 0x4c
   19044:	bx	lr
   19048:	ldr	r0, [r0, #92]	; 0x5c
   1904c:	bx	lr
   19050:	ldr	r0, [r0, #84]	; 0x54
   19054:	bx	lr
   19058:	mov	r0, #0
   1905c:	bx	lr
   19060:	ldrd	r2, [r1, #72]	; 0x48
   19064:	stm	r0, {r2, r3}
   19068:	bx	lr
   1906c:	ldrd	r2, [r1, #88]	; 0x58
   19070:	stm	r0, {r2, r3}
   19074:	bx	lr
   19078:	ldrd	r2, [r1, #80]	; 0x50
   1907c:	stm	r0, {r2, r3}
   19080:	bx	lr
   19084:	mvn	r1, #0
   19088:	str	r1, [r0]
   1908c:	str	r1, [r0, #4]
   19090:	bx	lr
   19094:	bx	lr
   19098:	push	{r4, r5, fp, lr}
   1909c:	add	fp, sp, #8
   190a0:	mov	r4, r1
   190a4:	mov	r5, r0
   190a8:	mov	r1, #0
   190ac:	mov	r2, r4
   190b0:	bl	11bb0 <memchr@plt>
   190b4:	sub	r1, r0, r5
   190b8:	cmp	r0, #0
   190bc:	addne	r4, r1, #1
   190c0:	mov	r0, r4
   190c4:	pop	{r4, r5, fp, pc}
   190c8:	push	{r4, r5, r6, r7, fp, lr}
   190cc:	add	fp, sp, #16
   190d0:	mov	r4, r0
   190d4:	cmp	r0, #2
   190d8:	bhi	19108 <__assert_fail@plt+0x7408>
   190dc:	mov	r0, r4
   190e0:	bl	29004 <__assert_fail@plt+0x17304>
   190e4:	mov	r5, r0
   190e8:	bl	11b20 <__errno_location@plt>
   190ec:	mov	r6, r0
   190f0:	ldr	r7, [r0]
   190f4:	mov	r0, r4
   190f8:	bl	11cdc <close@plt>
   190fc:	str	r7, [r6]
   19100:	mov	r0, r5
   19104:	pop	{r4, r5, r6, r7, fp, pc}
   19108:	mov	r0, r4
   1910c:	pop	{r4, r5, r6, r7, fp, pc}
   19110:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19114:	add	fp, sp, #24
   19118:	sub	sp, sp, #32
   1911c:	mov	r4, r2
   19120:	mov	r5, r0
   19124:	ldr	r7, [fp, #12]
   19128:	ldr	r6, [fp, #8]
   1912c:	cmp	r1, #0
   19130:	beq	19150 <__assert_fail@plt+0x7450>
   19134:	mov	r2, r1
   19138:	str	r3, [sp]
   1913c:	movw	r1, #43432	; 0xa9a8
   19140:	movt	r1, #2
   19144:	mov	r0, r5
   19148:	mov	r3, r4
   1914c:	b	19160 <__assert_fail@plt+0x7460>
   19150:	movw	r1, #43444	; 0xa9b4
   19154:	movt	r1, #2
   19158:	mov	r0, r5
   1915c:	mov	r2, r4
   19160:	bl	11b08 <fprintf@plt>
   19164:	movw	r1, #43451	; 0xa9bb
   19168:	movt	r1, #2
   1916c:	mov	r0, #0
   19170:	mov	r2, #5
   19174:	bl	11970 <dcgettext@plt>
   19178:	mov	r2, r0
   1917c:	movw	r1, #44147	; 0xac73
   19180:	movt	r1, #2
   19184:	mov	r0, r5
   19188:	movw	r3, #2022	; 0x7e6
   1918c:	bl	11b08 <fprintf@plt>
   19190:	mov	r0, #10
   19194:	mov	r1, r5
   19198:	bl	11c1c <fputc@plt>
   1919c:	movw	r1, #43455	; 0xa9bf
   191a0:	movt	r1, #2
   191a4:	mov	r0, #0
   191a8:	mov	r2, #5
   191ac:	bl	11970 <dcgettext@plt>
   191b0:	mov	r1, r0
   191b4:	movw	r2, #43626	; 0xaa6a
   191b8:	movt	r2, #2
   191bc:	mov	r0, r5
   191c0:	bl	11b08 <fprintf@plt>
   191c4:	mov	r0, #10
   191c8:	mov	r1, r5
   191cc:	bl	11c1c <fputc@plt>
   191d0:	cmp	r7, #9
   191d4:	bhi	19210 <__assert_fail@plt+0x7510>
   191d8:	add	r0, pc, #0
   191dc:	ldr	pc, [r0, r7, lsl #2]
   191e0:	andeq	r9, r1, r8, lsl #4
   191e4:	andeq	r9, r1, ip, lsl r2
   191e8:	andeq	r9, r1, r8, asr #4
   191ec:	andeq	r9, r1, r4, ror r2
   191f0:	muleq	r1, ip, r2
   191f4:	andeq	r9, r1, r8, asr #5
   191f8:	strdeq	r9, [r1], -ip
   191fc:	andeq	r9, r1, ip, lsr r3
   19200:	ldrdeq	r9, [r1], -r8
   19204:	andeq	r9, r1, r0, lsl #7
   19208:	sub	sp, fp, #24
   1920c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19210:	movw	r1, #43979	; 0xabcb
   19214:	movt	r1, #2
   19218:	b	19388 <__assert_fail@plt+0x7688>
   1921c:	movw	r1, #43660	; 0xaa8c
   19220:	movt	r1, #2
   19224:	mov	r0, #0
   19228:	mov	r2, #5
   1922c:	bl	11970 <dcgettext@plt>
   19230:	mov	r1, r0
   19234:	ldr	r2, [r6]
   19238:	mov	r0, r5
   1923c:	sub	sp, fp, #24
   19240:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19244:	b	11b08 <fprintf@plt>
   19248:	movw	r1, #43676	; 0xaa9c
   1924c:	movt	r1, #2
   19250:	mov	r0, #0
   19254:	mov	r2, #5
   19258:	bl	11970 <dcgettext@plt>
   1925c:	mov	r1, r0
   19260:	ldm	r6, {r2, r3}
   19264:	mov	r0, r5
   19268:	sub	sp, fp, #24
   1926c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19270:	b	11b08 <fprintf@plt>
   19274:	movw	r1, #43699	; 0xaab3
   19278:	movt	r1, #2
   1927c:	mov	r0, #0
   19280:	mov	r2, #5
   19284:	bl	11970 <dcgettext@plt>
   19288:	mov	r1, r0
   1928c:	ldm	r6, {r2, r3}
   19290:	ldr	r0, [r6, #8]
   19294:	str	r0, [sp]
   19298:	b	19334 <__assert_fail@plt+0x7634>
   1929c:	movw	r1, #43727	; 0xaacf
   192a0:	movt	r1, #2
   192a4:	mov	r0, #0
   192a8:	mov	r2, #5
   192ac:	bl	11970 <dcgettext@plt>
   192b0:	mov	r1, r0
   192b4:	ldm	r6, {r2, r3}
   192b8:	ldr	r0, [r6, #8]
   192bc:	ldr	r7, [r6, #12]
   192c0:	stm	sp, {r0, r7}
   192c4:	b	19334 <__assert_fail@plt+0x7634>
   192c8:	movw	r1, #43759	; 0xaaef
   192cc:	movt	r1, #2
   192d0:	mov	r0, #0
   192d4:	mov	r2, #5
   192d8:	bl	11970 <dcgettext@plt>
   192dc:	mov	r1, r0
   192e0:	ldm	r6, {r2, r3}
   192e4:	ldr	r0, [r6, #8]
   192e8:	ldr	r7, [r6, #12]
   192ec:	ldr	r6, [r6, #16]
   192f0:	stm	sp, {r0, r7}
   192f4:	str	r6, [sp, #8]
   192f8:	b	19334 <__assert_fail@plt+0x7634>
   192fc:	movw	r1, #43795	; 0xab13
   19300:	movt	r1, #2
   19304:	mov	r0, #0
   19308:	mov	r2, #5
   1930c:	bl	11970 <dcgettext@plt>
   19310:	mov	r1, r0
   19314:	ldm	r6, {r2, r3}
   19318:	ldr	r0, [r6, #8]
   1931c:	ldr	r7, [r6, #12]
   19320:	ldr	r4, [r6, #16]
   19324:	ldr	r6, [r6, #20]
   19328:	stm	sp, {r0, r7}
   1932c:	str	r4, [sp, #8]
   19330:	str	r6, [sp, #12]
   19334:	mov	r0, r5
   19338:	b	19428 <__assert_fail@plt+0x7728>
   1933c:	movw	r1, #43835	; 0xab3b
   19340:	movt	r1, #2
   19344:	mov	r0, #0
   19348:	mov	r2, #5
   1934c:	bl	11970 <dcgettext@plt>
   19350:	mov	ip, r0
   19354:	ldm	r6, {r2, r3}
   19358:	ldr	r0, [r6, #8]
   1935c:	ldr	r7, [r6, #12]
   19360:	ldr	r4, [r6, #16]
   19364:	ldr	r1, [r6, #20]
   19368:	ldr	r6, [r6, #24]
   1936c:	stm	sp, {r0, r7}
   19370:	str	r4, [sp, #8]
   19374:	str	r1, [sp, #12]
   19378:	str	r6, [sp, #16]
   1937c:	b	19420 <__assert_fail@plt+0x7720>
   19380:	movw	r1, #43927	; 0xab97
   19384:	movt	r1, #2
   19388:	mov	r0, #0
   1938c:	mov	r2, #5
   19390:	bl	11970 <dcgettext@plt>
   19394:	mov	ip, r0
   19398:	ldr	r2, [r6]
   1939c:	ldr	r3, [r6, #4]
   193a0:	ldr	r0, [r6, #8]
   193a4:	ldr	r7, [r6, #12]
   193a8:	ldr	r4, [r6, #16]
   193ac:	ldr	r1, [r6, #20]
   193b0:	ldr	lr, [r6, #24]
   193b4:	ldr	r8, [r6, #28]
   193b8:	ldr	r6, [r6, #32]
   193bc:	stm	sp, {r0, r7}
   193c0:	str	r4, [sp, #8]
   193c4:	str	r1, [sp, #12]
   193c8:	str	lr, [sp, #16]
   193cc:	str	r8, [sp, #20]
   193d0:	str	r6, [sp, #24]
   193d4:	b	19420 <__assert_fail@plt+0x7720>
   193d8:	movw	r1, #43879	; 0xab67
   193dc:	movt	r1, #2
   193e0:	mov	r0, #0
   193e4:	mov	r2, #5
   193e8:	bl	11970 <dcgettext@plt>
   193ec:	mov	ip, r0
   193f0:	ldm	r6, {r2, r3}
   193f4:	ldr	r0, [r6, #8]
   193f8:	ldr	r7, [r6, #12]
   193fc:	ldr	r4, [r6, #16]
   19400:	ldr	r1, [r6, #20]
   19404:	ldr	lr, [r6, #24]
   19408:	ldr	r6, [r6, #28]
   1940c:	stm	sp, {r0, r7}
   19410:	str	r4, [sp, #8]
   19414:	str	r1, [sp, #12]
   19418:	str	lr, [sp, #16]
   1941c:	str	r6, [sp, #20]
   19420:	mov	r0, r5
   19424:	mov	r1, ip
   19428:	bl	11b08 <fprintf@plt>
   1942c:	sub	sp, fp, #24
   19430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19434:	push	{r4, sl, fp, lr}
   19438:	add	fp, sp, #8
   1943c:	sub	sp, sp, #8
   19440:	mov	lr, #0
   19444:	ldr	ip, [fp, #8]
   19448:	ldr	r4, [ip, lr, lsl #2]
   1944c:	add	lr, lr, #1
   19450:	cmp	r4, #0
   19454:	bne	19448 <__assert_fail@plt+0x7748>
   19458:	sub	r4, lr, #1
   1945c:	str	ip, [sp]
   19460:	str	r4, [sp, #4]
   19464:	bl	19110 <__assert_fail@plt+0x7410>
   19468:	sub	sp, fp, #8
   1946c:	pop	{r4, sl, fp, pc}
   19470:	push	{r4, r5, fp, lr}
   19474:	add	fp, sp, #8
   19478:	sub	sp, sp, #48	; 0x30
   1947c:	mov	ip, #0
   19480:	ldr	r4, [fp, #8]
   19484:	add	lr, sp, #8
   19488:	ldr	r5, [r4]
   1948c:	str	r5, [lr, ip, lsl #2]
   19490:	cmp	r5, #0
   19494:	beq	194ac <__assert_fail@plt+0x77ac>
   19498:	add	ip, ip, #1
   1949c:	add	r4, r4, #4
   194a0:	cmp	ip, #10
   194a4:	bne	19488 <__assert_fail@plt+0x7788>
   194a8:	mov	ip, #10
   194ac:	str	lr, [sp]
   194b0:	str	ip, [sp, #4]
   194b4:	bl	19110 <__assert_fail@plt+0x7410>
   194b8:	sub	sp, fp, #8
   194bc:	pop	{r4, r5, fp, pc}
   194c0:	push	{fp, lr}
   194c4:	mov	fp, sp
   194c8:	sub	sp, sp, #8
   194cc:	add	ip, fp, #8
   194d0:	str	ip, [sp, #4]
   194d4:	str	ip, [sp]
   194d8:	bl	19470 <__assert_fail@plt+0x7770>
   194dc:	mov	sp, fp
   194e0:	pop	{fp, pc}
   194e4:	push	{fp, lr}
   194e8:	mov	fp, sp
   194ec:	movw	r0, #49692	; 0xc21c
   194f0:	movt	r0, #3
   194f4:	ldr	r1, [r0]
   194f8:	mov	r0, #10
   194fc:	bl	11c1c <fputc@plt>
   19500:	movw	r1, #44039	; 0xac07
   19504:	movt	r1, #2
   19508:	mov	r0, #0
   1950c:	mov	r2, #5
   19510:	bl	11970 <dcgettext@plt>
   19514:	movw	r1, #42900	; 0xa794
   19518:	movt	r1, #2
   1951c:	bl	118a4 <printf@plt>
   19520:	movw	r1, #44059	; 0xac1b
   19524:	movt	r1, #2
   19528:	mov	r0, #0
   1952c:	mov	r2, #5
   19530:	bl	11970 <dcgettext@plt>
   19534:	movw	r1, #42229	; 0xa4f5
   19538:	movt	r1, #2
   1953c:	movw	r2, #42814	; 0xa73e
   19540:	movt	r2, #2
   19544:	bl	118a4 <printf@plt>
   19548:	movw	r1, #44079	; 0xac2f
   1954c:	movt	r1, #2
   19550:	mov	r0, #0
   19554:	mov	r2, #5
   19558:	bl	11970 <dcgettext@plt>
   1955c:	movw	r1, #44118	; 0xac56
   19560:	movt	r1, #2
   19564:	pop	{fp, lr}
   19568:	b	118a4 <printf@plt>
   1956c:	b	19570 <__assert_fail@plt+0x7870>
   19570:	push	{r4, r5, r6, sl, fp, lr}
   19574:	add	fp, sp, #16
   19578:	mov	r4, r2
   1957c:	mov	r5, r1
   19580:	mov	r6, r0
   19584:	bl	1a3a4 <__assert_fail@plt+0x86a4>
   19588:	cmp	r0, #0
   1958c:	popne	{r4, r5, r6, sl, fp, pc}
   19590:	cmp	r6, #0
   19594:	beq	195a8 <__assert_fail@plt+0x78a8>
   19598:	cmp	r5, #0
   1959c:	cmpne	r4, #0
   195a0:	bne	195a8 <__assert_fail@plt+0x78a8>
   195a4:	pop	{r4, r5, r6, sl, fp, pc}
   195a8:	bl	19934 <__assert_fail@plt+0x7c34>
   195ac:	push	{fp, lr}
   195b0:	mov	fp, sp
   195b4:	bl	1a2bc <__assert_fail@plt+0x85bc>
   195b8:	pop	{fp, lr}
   195bc:	b	195c0 <__assert_fail@plt+0x78c0>
   195c0:	cmp	r0, #0
   195c4:	bxne	lr
   195c8:	push	{fp, lr}
   195cc:	mov	fp, sp
   195d0:	bl	19934 <__assert_fail@plt+0x7c34>
   195d4:	push	{fp, lr}
   195d8:	mov	fp, sp
   195dc:	bl	28db4 <__assert_fail@plt+0x170b4>
   195e0:	pop	{fp, lr}
   195e4:	b	195c0 <__assert_fail@plt+0x78c0>
   195e8:	b	195ac <__assert_fail@plt+0x78ac>
   195ec:	push	{r4, r5, fp, lr}
   195f0:	add	fp, sp, #8
   195f4:	mov	r4, r1
   195f8:	mov	r5, r0
   195fc:	bl	1a350 <__assert_fail@plt+0x8650>
   19600:	cmp	r0, #0
   19604:	popne	{r4, r5, fp, pc}
   19608:	cmp	r5, #0
   1960c:	beq	1961c <__assert_fail@plt+0x791c>
   19610:	cmp	r4, #0
   19614:	bne	1961c <__assert_fail@plt+0x791c>
   19618:	pop	{r4, r5, fp, pc}
   1961c:	bl	19934 <__assert_fail@plt+0x7c34>
   19620:	push	{fp, lr}
   19624:	mov	fp, sp
   19628:	bl	28db8 <__assert_fail@plt+0x170b8>
   1962c:	pop	{fp, lr}
   19630:	b	195c0 <__assert_fail@plt+0x78c0>
   19634:	push	{fp, lr}
   19638:	mov	fp, sp
   1963c:	bl	28dc8 <__assert_fail@plt+0x170c8>
   19640:	pop	{fp, lr}
   19644:	b	195c0 <__assert_fail@plt+0x78c0>
   19648:	mov	r2, r1
   1964c:	mov	r1, r0
   19650:	mov	r0, #0
   19654:	b	19570 <__assert_fail@plt+0x7870>
   19658:	mov	r2, r1
   1965c:	mov	r1, r0
   19660:	mov	r0, #0
   19664:	b	19634 <__assert_fail@plt+0x7934>
   19668:	mov	r2, #1
   1966c:	b	19670 <__assert_fail@plt+0x7970>
   19670:	push	{r4, r5, fp, lr}
   19674:	add	fp, sp, #8
   19678:	mov	r4, r1
   1967c:	ldr	r5, [r1]
   19680:	cmp	r0, #0
   19684:	beq	1969c <__assert_fail@plt+0x799c>
   19688:	mov	r1, #1
   1968c:	add	r1, r1, r5, lsr #1
   19690:	adds	r5, r5, r1
   19694:	bcc	196b4 <__assert_fail@plt+0x79b4>
   19698:	bl	19934 <__assert_fail@plt+0x7c34>
   1969c:	cmp	r5, #0
   196a0:	bne	196b4 <__assert_fail@plt+0x79b4>
   196a4:	mov	r1, #64	; 0x40
   196a8:	udiv	r5, r1, r2
   196ac:	cmp	r2, #64	; 0x40
   196b0:	addhi	r5, r5, #1
   196b4:	mov	r1, r5
   196b8:	bl	19570 <__assert_fail@plt+0x7870>
   196bc:	str	r5, [r4]
   196c0:	pop	{r4, r5, fp, pc}
   196c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   196c8:	add	fp, sp, #24
   196cc:	mov	r8, r1
   196d0:	ldr	r6, [r1]
   196d4:	add	r1, r6, r6, asr #1
   196d8:	cmp	r1, r6
   196dc:	mvnvs	r1, #-2147483648	; 0x80000000
   196e0:	cmp	r1, r3
   196e4:	mov	r5, r1
   196e8:	movgt	r5, r3
   196ec:	cmn	r3, #1
   196f0:	movle	r5, r1
   196f4:	ldr	r4, [fp, #8]
   196f8:	cmn	r4, #1
   196fc:	ble	19724 <__assert_fail@plt+0x7a24>
   19700:	cmp	r4, #0
   19704:	beq	19778 <__assert_fail@plt+0x7a78>
   19708:	cmn	r5, #1
   1970c:	ble	1974c <__assert_fail@plt+0x7a4c>
   19710:	mvn	r7, #-2147483648	; 0x80000000
   19714:	udiv	r1, r7, r4
   19718:	cmp	r1, r5
   1971c:	bge	19778 <__assert_fail@plt+0x7a78>
   19720:	b	19788 <__assert_fail@plt+0x7a88>
   19724:	cmn	r5, #1
   19728:	ble	19768 <__assert_fail@plt+0x7a68>
   1972c:	cmn	r4, #1
   19730:	beq	19778 <__assert_fail@plt+0x7a78>
   19734:	mov	r1, #-2147483648	; 0x80000000
   19738:	sdiv	r1, r1, r4
   1973c:	mvn	r7, #-2147483648	; 0x80000000
   19740:	cmp	r1, r5
   19744:	bge	19778 <__assert_fail@plt+0x7a78>
   19748:	b	19788 <__assert_fail@plt+0x7a88>
   1974c:	beq	19778 <__assert_fail@plt+0x7a78>
   19750:	mov	r1, #-2147483648	; 0x80000000
   19754:	sdiv	r1, r1, r5
   19758:	mvn	r7, #-2147483648	; 0x80000000
   1975c:	cmp	r1, r4
   19760:	bge	19778 <__assert_fail@plt+0x7a78>
   19764:	b	19788 <__assert_fail@plt+0x7a88>
   19768:	mvn	r7, #-2147483648	; 0x80000000
   1976c:	sdiv	r1, r7, r4
   19770:	cmp	r5, r1
   19774:	blt	19788 <__assert_fail@plt+0x7a88>
   19778:	mul	r1, r5, r4
   1977c:	mov	r7, #64	; 0x40
   19780:	cmp	r1, #63	; 0x3f
   19784:	bgt	19790 <__assert_fail@plt+0x7a90>
   19788:	sdiv	r5, r7, r4
   1978c:	mul	r1, r5, r4
   19790:	cmp	r0, #0
   19794:	moveq	r7, #0
   19798:	streq	r7, [r8]
   1979c:	sub	r7, r5, r6
   197a0:	cmp	r7, r2
   197a4:	bge	19850 <__assert_fail@plt+0x7b50>
   197a8:	add	r5, r6, r2
   197ac:	mov	r1, #0
   197b0:	cmp	r5, r3
   197b4:	mov	r2, #0
   197b8:	movwgt	r2, #1
   197bc:	cmn	r3, #1
   197c0:	movwgt	r1, #1
   197c4:	cmp	r5, r6
   197c8:	bvs	19838 <__assert_fail@plt+0x7b38>
   197cc:	ands	r1, r1, r2
   197d0:	bne	19838 <__assert_fail@plt+0x7b38>
   197d4:	cmn	r4, #1
   197d8:	ble	19800 <__assert_fail@plt+0x7b00>
   197dc:	cmp	r4, #0
   197e0:	beq	1984c <__assert_fail@plt+0x7b4c>
   197e4:	cmn	r5, #1
   197e8:	ble	19824 <__assert_fail@plt+0x7b24>
   197ec:	mvn	r1, #-2147483648	; 0x80000000
   197f0:	udiv	r1, r1, r4
   197f4:	cmp	r1, r5
   197f8:	bge	1984c <__assert_fail@plt+0x7b4c>
   197fc:	b	19838 <__assert_fail@plt+0x7b38>
   19800:	cmn	r5, #1
   19804:	ble	1983c <__assert_fail@plt+0x7b3c>
   19808:	cmn	r4, #1
   1980c:	beq	1984c <__assert_fail@plt+0x7b4c>
   19810:	mov	r1, #-2147483648	; 0x80000000
   19814:	sdiv	r1, r1, r4
   19818:	cmp	r1, r5
   1981c:	bge	1984c <__assert_fail@plt+0x7b4c>
   19820:	b	19838 <__assert_fail@plt+0x7b38>
   19824:	beq	1984c <__assert_fail@plt+0x7b4c>
   19828:	mov	r1, #-2147483648	; 0x80000000
   1982c:	sdiv	r1, r1, r5
   19830:	cmp	r1, r4
   19834:	bge	1984c <__assert_fail@plt+0x7b4c>
   19838:	bl	19934 <__assert_fail@plt+0x7c34>
   1983c:	mvn	r1, #-2147483648	; 0x80000000
   19840:	sdiv	r1, r1, r4
   19844:	cmp	r5, r1
   19848:	blt	19838 <__assert_fail@plt+0x7b38>
   1984c:	mul	r1, r5, r4
   19850:	bl	195ec <__assert_fail@plt+0x78ec>
   19854:	str	r5, [r8]
   19858:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1985c:	mov	r1, #1
   19860:	b	19864 <__assert_fail@plt+0x7b64>
   19864:	push	{fp, lr}
   19868:	mov	fp, sp
   1986c:	bl	19f4c <__assert_fail@plt+0x824c>
   19870:	pop	{fp, lr}
   19874:	b	195c0 <__assert_fail@plt+0x78c0>
   19878:	mov	r1, #1
   1987c:	b	19880 <__assert_fail@plt+0x7b80>
   19880:	push	{fp, lr}
   19884:	mov	fp, sp
   19888:	bl	28dc4 <__assert_fail@plt+0x170c4>
   1988c:	pop	{fp, lr}
   19890:	b	195c0 <__assert_fail@plt+0x78c0>
   19894:	push	{r4, r5, fp, lr}
   19898:	add	fp, sp, #8
   1989c:	mov	r4, r1
   198a0:	mov	r5, r0
   198a4:	mov	r0, r1
   198a8:	bl	195ac <__assert_fail@plt+0x78ac>
   198ac:	mov	r1, r5
   198b0:	mov	r2, r4
   198b4:	pop	{r4, r5, fp, lr}
   198b8:	b	11928 <memcpy@plt>
   198bc:	push	{r4, r5, fp, lr}
   198c0:	add	fp, sp, #8
   198c4:	mov	r4, r1
   198c8:	mov	r5, r0
   198cc:	mov	r0, r1
   198d0:	bl	195d4 <__assert_fail@plt+0x78d4>
   198d4:	mov	r1, r5
   198d8:	mov	r2, r4
   198dc:	pop	{r4, r5, fp, lr}
   198e0:	b	11928 <memcpy@plt>
   198e4:	push	{r4, r5, fp, lr}
   198e8:	add	fp, sp, #8
   198ec:	mov	r4, r1
   198f0:	mov	r5, r0
   198f4:	add	r0, r1, #1
   198f8:	bl	195d4 <__assert_fail@plt+0x78d4>
   198fc:	mov	r1, #0
   19900:	strb	r1, [r0, r4]
   19904:	mov	r1, r5
   19908:	mov	r2, r4
   1990c:	pop	{r4, r5, fp, lr}
   19910:	b	11928 <memcpy@plt>
   19914:	push	{r4, sl, fp, lr}
   19918:	add	fp, sp, #8
   1991c:	mov	r4, r0
   19920:	bl	11af0 <strlen@plt>
   19924:	add	r1, r0, #1
   19928:	mov	r0, r4
   1992c:	pop	{r4, sl, fp, lr}
   19930:	b	19894 <__assert_fail@plt+0x7b94>
   19934:	push	{fp, lr}
   19938:	mov	fp, sp
   1993c:	movw	r0, #49592	; 0xc1b8
   19940:	movt	r0, #3
   19944:	ldr	r4, [r0]
   19948:	movw	r1, #44194	; 0xaca2
   1994c:	movt	r1, #2
   19950:	mov	r0, #0
   19954:	mov	r2, #5
   19958:	bl	11970 <dcgettext@plt>
   1995c:	mov	r3, r0
   19960:	movw	r2, #45108	; 0xb034
   19964:	movt	r2, #2
   19968:	mov	r0, r4
   1996c:	mov	r1, #0
   19970:	bl	11a18 <error@plt>
   19974:	bl	11cc4 <abort@plt>
   19978:	push	{fp, lr}
   1997c:	mov	fp, sp
   19980:	sub	sp, sp, #8
   19984:	movw	ip, #49592	; 0xc1b8
   19988:	movt	ip, #3
   1998c:	ldr	ip, [ip]
   19990:	str	ip, [sp, #4]
   19994:	ldr	ip, [fp, #8]
   19998:	str	ip, [sp]
   1999c:	bl	199a4 <__assert_fail@plt+0x7ca4>
   199a0:	bl	11cc4 <abort@plt>
   199a4:	push	{r4, r5, r6, r7, fp, lr}
   199a8:	add	fp, sp, #16
   199ac:	sub	sp, sp, #16
   199b0:	sub	r0, r0, #1
   199b4:	cmp	r0, #4
   199b8:	bcs	19a38 <__assert_fail@plt+0x7d38>
   199bc:	mov	r5, r1
   199c0:	ldr	r4, [fp, #12]
   199c4:	ldr	r6, [fp, #8]
   199c8:	movw	r1, #44308	; 0xad14
   199cc:	movt	r1, #2
   199d0:	ldr	r1, [r1, r0, lsl #2]
   199d4:	cmn	r5, #1
   199d8:	ble	199ec <__assert_fail@plt+0x7cec>
   199dc:	ldr	r7, [r3, r5, lsl #4]
   199e0:	movw	r5, #44211	; 0xacb3
   199e4:	movt	r5, #2
   199e8:	b	19a08 <__assert_fail@plt+0x7d08>
   199ec:	mov	r0, #0
   199f0:	strb	r0, [sp, #15]
   199f4:	strb	r2, [sp, #14]
   199f8:	movw	r0, #44211	; 0xacb3
   199fc:	movt	r0, #2
   19a00:	sub	r5, r0, r5
   19a04:	add	r7, sp, #14
   19a08:	mov	r0, #0
   19a0c:	mov	r2, #5
   19a10:	bl	11970 <dcgettext@plt>
   19a14:	mov	r2, r0
   19a18:	str	r7, [sp]
   19a1c:	str	r6, [sp, #4]
   19a20:	mov	r0, r4
   19a24:	mov	r1, #0
   19a28:	mov	r3, r5
   19a2c:	bl	11a18 <error@plt>
   19a30:	sub	sp, fp, #16
   19a34:	pop	{r4, r5, r6, r7, fp, pc}
   19a38:	bl	11cc4 <abort@plt>
   19a3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a40:	add	fp, sp, #28
   19a44:	sub	sp, sp, #20
   19a48:	cmp	r2, #37	; 0x25
   19a4c:	bcs	19e80 <__assert_fail@plt+0x8180>
   19a50:	mov	r5, r2
   19a54:	mov	r6, r1
   19a58:	mov	r4, r0
   19a5c:	str	r3, [sp, #4]
   19a60:	ldr	sl, [fp, #8]
   19a64:	bl	11b20 <__errno_location@plt>
   19a68:	mov	r7, r0
   19a6c:	mov	r0, #0
   19a70:	str	r0, [r7]
   19a74:	bl	11ab4 <__ctype_b_loc@plt>
   19a78:	ldr	r1, [r0]
   19a7c:	mov	r2, r4
   19a80:	ldrb	r0, [r2], #1
   19a84:	add	r3, r1, r0, lsl #1
   19a88:	ldrb	r3, [r3, #1]
   19a8c:	tst	r3, #32
   19a90:	bne	19a80 <__assert_fail@plt+0x7d80>
   19a94:	add	r9, sp, #16
   19a98:	cmp	r6, #0
   19a9c:	movne	r9, r6
   19aa0:	mov	r8, #4
   19aa4:	cmp	r0, #45	; 0x2d
   19aa8:	beq	19e74 <__assert_fail@plt+0x8174>
   19aac:	mov	r0, r4
   19ab0:	mov	r1, r9
   19ab4:	mov	r2, r5
   19ab8:	bl	11ba4 <strtoumax@plt>
   19abc:	str	r1, [sp, #12]
   19ac0:	str	r0, [sp, #8]
   19ac4:	ldr	r6, [r9]
   19ac8:	cmp	r6, r4
   19acc:	beq	19af4 <__assert_fail@plt+0x7df4>
   19ad0:	ldr	r0, [r7]
   19ad4:	cmp	r0, #0
   19ad8:	beq	19b2c <__assert_fail@plt+0x7e2c>
   19adc:	cmp	r0, #34	; 0x22
   19ae0:	bne	19e74 <__assert_fail@plt+0x8174>
   19ae4:	mov	r8, #1
   19ae8:	cmp	sl, #0
   19aec:	bne	19b38 <__assert_fail@plt+0x7e38>
   19af0:	b	19e64 <__assert_fail@plt+0x8164>
   19af4:	cmp	sl, #0
   19af8:	beq	19e74 <__assert_fail@plt+0x8174>
   19afc:	ldrb	r1, [r6]
   19b00:	cmp	r1, #0
   19b04:	beq	19e74 <__assert_fail@plt+0x8174>
   19b08:	mov	r0, sl
   19b0c:	bl	11afc <strchr@plt>
   19b10:	cmp	r0, #0
   19b14:	beq	19e74 <__assert_fail@plt+0x8174>
   19b18:	mov	r8, #0
   19b1c:	str	r8, [sp, #12]
   19b20:	mov	r0, #1
   19b24:	str	r0, [sp, #8]
   19b28:	b	19b38 <__assert_fail@plt+0x7e38>
   19b2c:	mov	r8, r0
   19b30:	cmp	sl, #0
   19b34:	beq	19e64 <__assert_fail@plt+0x8164>
   19b38:	ldrb	r4, [r6]
   19b3c:	cmp	r4, #0
   19b40:	beq	19e64 <__assert_fail@plt+0x8164>
   19b44:	mov	r0, sl
   19b48:	mov	r1, r4
   19b4c:	bl	11afc <strchr@plt>
   19b50:	cmp	r0, #0
   19b54:	beq	19d80 <__assert_fail@plt+0x8080>
   19b58:	sub	r0, r4, #69	; 0x45
   19b5c:	mov	r7, #1
   19b60:	mov	r5, #1024	; 0x400
   19b64:	cmp	r0, #47	; 0x2f
   19b68:	bhi	19c7c <__assert_fail@plt+0x7f7c>
   19b6c:	add	r1, pc, #0
   19b70:	ldr	pc, [r1, r0, lsl #2]
   19b74:	andeq	r9, r1, r4, lsr ip
   19b78:	andeq	r9, r1, ip, ror ip
   19b7c:	andeq	r9, r1, r4, lsr ip
   19b80:	andeq	r9, r1, ip, ror ip
   19b84:	andeq	r9, r1, ip, ror ip
   19b88:	andeq	r9, r1, ip, ror ip
   19b8c:	andeq	r9, r1, r4, lsr ip
   19b90:	andeq	r9, r1, ip, ror ip
   19b94:	andeq	r9, r1, r4, lsr ip
   19b98:	andeq	r9, r1, ip, ror ip
   19b9c:	andeq	r9, r1, ip, ror ip
   19ba0:	andeq	r9, r1, r4, lsr ip
   19ba4:	andeq	r9, r1, ip, ror ip
   19ba8:	andeq	r9, r1, ip, ror ip
   19bac:	andeq	r9, r1, ip, ror ip
   19bb0:	andeq	r9, r1, r4, lsr ip
   19bb4:	andeq	r9, r1, ip, ror ip
   19bb8:	andeq	r9, r1, ip, ror ip
   19bbc:	andeq	r9, r1, ip, ror ip
   19bc0:	andeq	r9, r1, ip, ror ip
   19bc4:	andeq	r9, r1, r4, lsr ip
   19bc8:	andeq	r9, r1, r4, lsr ip
   19bcc:	andeq	r9, r1, ip, ror ip
   19bd0:	andeq	r9, r1, ip, ror ip
   19bd4:	andeq	r9, r1, ip, ror ip
   19bd8:	andeq	r9, r1, ip, ror ip
   19bdc:	andeq	r9, r1, ip, ror ip
   19be0:	andeq	r9, r1, ip, ror ip
   19be4:	andeq	r9, r1, ip, ror ip
   19be8:	andeq	r9, r1, ip, ror ip
   19bec:	andeq	r9, r1, ip, ror ip
   19bf0:	andeq	r9, r1, ip, ror ip
   19bf4:	andeq	r9, r1, ip, ror ip
   19bf8:	andeq	r9, r1, ip, ror ip
   19bfc:	andeq	r9, r1, r4, lsr ip
   19c00:	andeq	r9, r1, ip, ror ip
   19c04:	andeq	r9, r1, ip, ror ip
   19c08:	andeq	r9, r1, ip, ror ip
   19c0c:	andeq	r9, r1, r4, lsr ip
   19c10:	andeq	r9, r1, ip, ror ip
   19c14:	andeq	r9, r1, r4, lsr ip
   19c18:	andeq	r9, r1, ip, ror ip
   19c1c:	andeq	r9, r1, ip, ror ip
   19c20:	andeq	r9, r1, ip, ror ip
   19c24:	andeq	r9, r1, ip, ror ip
   19c28:	andeq	r9, r1, ip, ror ip
   19c2c:	andeq	r9, r1, ip, ror ip
   19c30:	andeq	r9, r1, r4, lsr ip
   19c34:	mov	r0, sl
   19c38:	mov	r1, #48	; 0x30
   19c3c:	bl	11afc <strchr@plt>
   19c40:	cmp	r0, #0
   19c44:	beq	19c7c <__assert_fail@plt+0x7f7c>
   19c48:	ldrb	r0, [r6, #1]
   19c4c:	cmp	r0, #66	; 0x42
   19c50:	cmpne	r0, #68	; 0x44
   19c54:	bne	19c64 <__assert_fail@plt+0x7f64>
   19c58:	mov	r7, #2
   19c5c:	mov	r5, #1000	; 0x3e8
   19c60:	b	19c7c <__assert_fail@plt+0x7f7c>
   19c64:	cmp	r0, #105	; 0x69
   19c68:	bne	19c7c <__assert_fail@plt+0x7f7c>
   19c6c:	ldrb	r0, [r6, #2]
   19c70:	mov	r7, #1
   19c74:	cmp	r0, #66	; 0x42
   19c78:	movweq	r7, #3
   19c7c:	sub	r1, r4, #66	; 0x42
   19c80:	cmp	r1, #53	; 0x35
   19c84:	bhi	19d80 <__assert_fail@plt+0x8080>
   19c88:	mov	r0, #0
   19c8c:	add	r2, pc, #0
   19c90:	ldr	pc, [r2, r1, lsl #2]
   19c94:	andeq	r9, r1, r8, ror #27
   19c98:	andeq	r9, r1, r0, lsl #27
   19c9c:	andeq	r9, r1, r0, lsl #27
   19ca0:	strdeq	r9, [r1], -r4
   19ca4:	andeq	r9, r1, r0, lsl #27
   19ca8:	andeq	r9, r1, ip, ror #26
   19cac:	andeq	r9, r1, r0, lsl #27
   19cb0:	andeq	r9, r1, r0, lsl #27
   19cb4:	andeq	r9, r1, r0, lsl #27
   19cb8:	muleq	r1, r8, sp
   19cbc:	andeq	r9, r1, r0, lsl #27
   19cc0:	andeq	r9, r1, ip, lsr #27
   19cc4:	andeq	r9, r1, r0, lsl #27
   19cc8:	andeq	r9, r1, r0, lsl #27
   19ccc:	andeq	r9, r1, r8, lsl #28
   19cd0:	andeq	r9, r1, r0, lsl #27
   19cd4:	andeq	r9, r1, r0, lsl #27
   19cd8:	andeq	r9, r1, r0, lsl #27
   19cdc:	andeq	r9, r1, r0, asr #27
   19ce0:	andeq	r9, r1, r0, lsl #27
   19ce4:	andeq	r9, r1, r0, lsl #27
   19ce8:	andeq	r9, r1, r0, lsl #27
   19cec:	andeq	r9, r1, r0, lsl #27
   19cf0:	andeq	r9, r1, ip, lsl lr
   19cf4:	ldrdeq	r9, [r1], -r4
   19cf8:	andeq	r9, r1, r0, lsl #27
   19cfc:	andeq	r9, r1, r0, lsl #27
   19d00:	andeq	r9, r1, r0, lsl #27
   19d04:	andeq	r9, r1, r0, lsl #27
   19d08:	andeq	r9, r1, r0, lsl #27
   19d0c:	andeq	r9, r1, r0, lsl #27
   19d10:	andeq	r9, r1, r0, lsl #27
   19d14:	andeq	r9, r1, r0, lsr lr
   19d18:	andeq	r9, r1, r8, asr #28
   19d1c:	andeq	r9, r1, r0, lsl #27
   19d20:	andeq	r9, r1, r0, lsl #27
   19d24:	andeq	r9, r1, r0, lsl #27
   19d28:	andeq	r9, r1, ip, ror #26
   19d2c:	andeq	r9, r1, r0, lsl #27
   19d30:	andeq	r9, r1, r0, lsl #27
   19d34:	andeq	r9, r1, r0, lsl #27
   19d38:	muleq	r1, r8, sp
   19d3c:	andeq	r9, r1, r0, lsl #27
   19d40:	andeq	r9, r1, ip, lsr #27
   19d44:	andeq	r9, r1, r0, lsl #27
   19d48:	andeq	r9, r1, r0, lsl #27
   19d4c:	andeq	r9, r1, r0, lsl #27
   19d50:	andeq	r9, r1, r0, lsl #27
   19d54:	andeq	r9, r1, r0, lsl #27
   19d58:	andeq	r9, r1, r0, lsl #27
   19d5c:	andeq	r9, r1, r0, asr #27
   19d60:	andeq	r9, r1, r0, lsl #27
   19d64:	andeq	r9, r1, r0, lsl #27
   19d68:	andeq	r9, r1, ip, lsr lr
   19d6c:	add	r0, sp, #8
   19d70:	mov	r1, r5
   19d74:	mov	r2, #3
   19d78:	bl	19f00 <__assert_fail@plt+0x8200>
   19d7c:	b	19e48 <__assert_fail@plt+0x8148>
   19d80:	ldr	r0, [sp, #8]
   19d84:	ldr	r1, [sp, #12]
   19d88:	ldr	r2, [sp, #4]
   19d8c:	strd	r0, [r2]
   19d90:	orr	r8, r8, #2
   19d94:	b	19e74 <__assert_fail@plt+0x8174>
   19d98:	add	r0, sp, #8
   19d9c:	mov	r1, r5
   19da0:	mov	r2, #1
   19da4:	bl	19f00 <__assert_fail@plt+0x8200>
   19da8:	b	19e48 <__assert_fail@plt+0x8148>
   19dac:	add	r0, sp, #8
   19db0:	mov	r1, r5
   19db4:	mov	r2, #2
   19db8:	bl	19f00 <__assert_fail@plt+0x8200>
   19dbc:	b	19e48 <__assert_fail@plt+0x8148>
   19dc0:	add	r0, sp, #8
   19dc4:	mov	r1, r5
   19dc8:	mov	r2, #4
   19dcc:	bl	19f00 <__assert_fail@plt+0x8200>
   19dd0:	b	19e48 <__assert_fail@plt+0x8148>
   19dd4:	add	r0, sp, #8
   19dd8:	mov	r1, r5
   19ddc:	mov	r2, #7
   19de0:	bl	19f00 <__assert_fail@plt+0x8200>
   19de4:	b	19e48 <__assert_fail@plt+0x8148>
   19de8:	add	r0, sp, #8
   19dec:	mov	r1, #1024	; 0x400
   19df0:	b	19e44 <__assert_fail@plt+0x8144>
   19df4:	add	r0, sp, #8
   19df8:	mov	r1, r5
   19dfc:	mov	r2, #6
   19e00:	bl	19f00 <__assert_fail@plt+0x8200>
   19e04:	b	19e48 <__assert_fail@plt+0x8148>
   19e08:	add	r0, sp, #8
   19e0c:	mov	r1, r5
   19e10:	mov	r2, #5
   19e14:	bl	19f00 <__assert_fail@plt+0x8200>
   19e18:	b	19e48 <__assert_fail@plt+0x8148>
   19e1c:	add	r0, sp, #8
   19e20:	mov	r1, r5
   19e24:	mov	r2, #8
   19e28:	bl	19f00 <__assert_fail@plt+0x8200>
   19e2c:	b	19e48 <__assert_fail@plt+0x8148>
   19e30:	add	r0, sp, #8
   19e34:	mov	r1, #512	; 0x200
   19e38:	b	19e44 <__assert_fail@plt+0x8144>
   19e3c:	add	r0, sp, #8
   19e40:	mov	r1, #2
   19e44:	bl	19ea0 <__assert_fail@plt+0x81a0>
   19e48:	ldr	r1, [r9]
   19e4c:	add	r2, r1, r7
   19e50:	str	r2, [r9]
   19e54:	ldrb	r1, [r1, r7]
   19e58:	orr	r8, r0, r8
   19e5c:	cmp	r1, #0
   19e60:	orrne	r8, r8, #2
   19e64:	ldr	r0, [sp, #8]
   19e68:	ldr	r1, [sp, #12]
   19e6c:	ldr	r2, [sp, #4]
   19e70:	strd	r0, [r2]
   19e74:	mov	r0, r8
   19e78:	sub	sp, fp, #28
   19e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e80:	movw	r0, #44324	; 0xad24
   19e84:	movt	r0, #2
   19e88:	movw	r1, #44362	; 0xad4a
   19e8c:	movt	r1, #2
   19e90:	movw	r3, #44374	; 0xad56
   19e94:	movt	r3, #2
   19e98:	mov	r2, #84	; 0x54
   19e9c:	bl	11d00 <__assert_fail@plt>
   19ea0:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   19ea4:	add	fp, sp, #24
   19ea8:	mov	r4, r1
   19eac:	mov	r5, r0
   19eb0:	asr	r6, r1, #31
   19eb4:	mvn	r0, #0
   19eb8:	mvn	r1, #0
   19ebc:	mov	r2, r4
   19ec0:	mov	r3, r6
   19ec4:	bl	293d0 <__assert_fail@plt+0x176d0>
   19ec8:	ldrd	r8, [r5]
   19ecc:	mov	r2, #0
   19ed0:	subs	r0, r0, r8
   19ed4:	sbcs	r0, r1, r9
   19ed8:	movwcc	r2, #1
   19edc:	umull	r1, r0, r8, r4
   19ee0:	cmp	r2, #0
   19ee4:	mvnne	r1, #0
   19ee8:	mla	r0, r8, r6, r0
   19eec:	mla	r3, r9, r4, r0
   19ef0:	mvnne	r3, #0
   19ef4:	stm	r5, {r1, r3}
   19ef8:	mov	r0, r2
   19efc:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   19f00:	push	{r4, r5, r6, r7, fp, lr}
   19f04:	add	fp, sp, #16
   19f08:	cmp	r2, #0
   19f0c:	beq	19f40 <__assert_fail@plt+0x8240>
   19f10:	mov	r4, r2
   19f14:	mov	r5, r1
   19f18:	mov	r7, r0
   19f1c:	mov	r6, #0
   19f20:	mov	r0, r7
   19f24:	mov	r1, r5
   19f28:	bl	19ea0 <__assert_fail@plt+0x81a0>
   19f2c:	orr	r6, r0, r6
   19f30:	subs	r4, r4, #1
   19f34:	bne	19f20 <__assert_fail@plt+0x8220>
   19f38:	mov	r0, r6
   19f3c:	pop	{r4, r5, r6, r7, fp, pc}
   19f40:	mov	r6, #0
   19f44:	mov	r0, r6
   19f48:	pop	{r4, r5, r6, r7, fp, pc}
   19f4c:	clz	r2, r1
   19f50:	lsr	r2, r2, #5
   19f54:	clz	r3, r0
   19f58:	lsr	r3, r3, #5
   19f5c:	orrs	r2, r3, r2
   19f60:	movwne	r1, #1
   19f64:	movwne	r0, #1
   19f68:	cmp	r1, #0
   19f6c:	beq	19f9c <__assert_fail@plt+0x829c>
   19f70:	mvn	r2, #-2147483648	; 0x80000000
   19f74:	udiv	r2, r2, r1
   19f78:	cmp	r2, r0
   19f7c:	bcs	19f9c <__assert_fail@plt+0x829c>
   19f80:	push	{fp, lr}
   19f84:	mov	fp, sp
   19f88:	bl	11b20 <__errno_location@plt>
   19f8c:	mov	r1, #12
   19f90:	str	r1, [r0]
   19f94:	mov	r0, #0
   19f98:	pop	{fp, pc}
   19f9c:	b	1185c <calloc@plt>
   19fa0:	sub	sp, sp, #8
   19fa4:	push	{fp, lr}
   19fa8:	mov	fp, sp
   19fac:	sub	sp, sp, #8
   19fb0:	str	r2, [fp, #8]
   19fb4:	str	r3, [fp, #12]
   19fb8:	add	r2, fp, #8
   19fbc:	str	r2, [sp, #4]
   19fc0:	cmp	r1, #11
   19fc4:	bhi	1a004 <__assert_fail@plt+0x8304>
   19fc8:	mov	r2, #1
   19fcc:	movw	r3, #1300	; 0x514
   19fd0:	tst	r3, r2, lsl r1
   19fd4:	bne	1a054 <__assert_fail@plt+0x8354>
   19fd8:	movw	r3, #2570	; 0xa0a
   19fdc:	tst	r3, r2, lsl r1
   19fe0:	bne	1a02c <__assert_fail@plt+0x832c>
   19fe4:	cmp	r1, #0
   19fe8:	bne	1a004 <__assert_fail@plt+0x8304>
   19fec:	ldr	r1, [sp, #4]
   19ff0:	add	r2, r1, #4
   19ff4:	str	r2, [sp, #4]
   19ff8:	ldr	r1, [r1]
   19ffc:	bl	1a078 <__assert_fail@plt+0x8378>
   1a000:	b	1a068 <__assert_fail@plt+0x8368>
   1a004:	sub	r2, r1, #1024	; 0x400
   1a008:	cmp	r2, #10
   1a00c:	bhi	1a054 <__assert_fail@plt+0x8354>
   1a010:	mov	ip, #1
   1a014:	movw	r3, #645	; 0x285
   1a018:	tst	r3, ip, lsl r2
   1a01c:	bne	1a054 <__assert_fail@plt+0x8354>
   1a020:	movw	r3, #1282	; 0x502
   1a024:	tst	r3, ip, lsl r2
   1a028:	beq	1a034 <__assert_fail@plt+0x8334>
   1a02c:	bl	11be0 <fcntl64@plt>
   1a030:	b	1a068 <__assert_fail@plt+0x8368>
   1a034:	cmp	r2, #6
   1a038:	bne	1a054 <__assert_fail@plt+0x8354>
   1a03c:	ldr	r1, [sp, #4]
   1a040:	add	r2, r1, #4
   1a044:	str	r2, [sp, #4]
   1a048:	ldr	r1, [r1]
   1a04c:	bl	1a084 <__assert_fail@plt+0x8384>
   1a050:	b	1a068 <__assert_fail@plt+0x8368>
   1a054:	ldr	r2, [sp, #4]
   1a058:	add	r3, r2, #4
   1a05c:	str	r3, [sp, #4]
   1a060:	ldr	r2, [r2]
   1a064:	bl	11be0 <fcntl64@plt>
   1a068:	mov	sp, fp
   1a06c:	pop	{fp, lr}
   1a070:	add	sp, sp, #8
   1a074:	bx	lr
   1a078:	mov	r2, r1
   1a07c:	mov	r1, #0
   1a080:	b	11be0 <fcntl64@plt>
   1a084:	push	{r4, r5, r6, r7, fp, lr}
   1a088:	add	fp, sp, #16
   1a08c:	mov	r5, r1
   1a090:	mov	r6, r0
   1a094:	movw	r7, #50128	; 0xc3d0
   1a098:	movt	r7, #3
   1a09c:	ldr	r0, [r7]
   1a0a0:	cmp	r0, #0
   1a0a4:	bmi	1a108 <__assert_fail@plt+0x8408>
   1a0a8:	mov	r0, r6
   1a0ac:	movw	r1, #1030	; 0x406
   1a0b0:	mov	r2, r5
   1a0b4:	bl	11be0 <fcntl64@plt>
   1a0b8:	mov	r4, r0
   1a0bc:	cmn	r0, #1
   1a0c0:	bgt	1a0f4 <__assert_fail@plt+0x83f4>
   1a0c4:	bl	11b20 <__errno_location@plt>
   1a0c8:	ldr	r0, [r0]
   1a0cc:	cmp	r0, #22
   1a0d0:	bne	1a0f4 <__assert_fail@plt+0x83f4>
   1a0d4:	mov	r0, r6
   1a0d8:	mov	r1, r5
   1a0dc:	bl	1a078 <__assert_fail@plt+0x8378>
   1a0e0:	mov	r4, r0
   1a0e4:	cmp	r0, #0
   1a0e8:	bmi	1a158 <__assert_fail@plt+0x8458>
   1a0ec:	mvn	r0, #0
   1a0f0:	b	1a0f8 <__assert_fail@plt+0x83f8>
   1a0f4:	mov	r0, #1
   1a0f8:	str	r0, [r7]
   1a0fc:	cmp	r4, #0
   1a100:	bpl	1a120 <__assert_fail@plt+0x8420>
   1a104:	b	1a158 <__assert_fail@plt+0x8458>
   1a108:	mov	r0, r6
   1a10c:	mov	r1, r5
   1a110:	bl	1a078 <__assert_fail@plt+0x8378>
   1a114:	mov	r4, r0
   1a118:	cmp	r4, #0
   1a11c:	bmi	1a158 <__assert_fail@plt+0x8458>
   1a120:	ldr	r0, [r7]
   1a124:	cmn	r0, #1
   1a128:	bne	1a158 <__assert_fail@plt+0x8458>
   1a12c:	mov	r0, r4
   1a130:	mov	r1, #1
   1a134:	bl	11be0 <fcntl64@plt>
   1a138:	cmp	r0, #0
   1a13c:	bmi	1a160 <__assert_fail@plt+0x8460>
   1a140:	orr	r2, r0, #1
   1a144:	mov	r0, r4
   1a148:	mov	r1, #2
   1a14c:	bl	11be0 <fcntl64@plt>
   1a150:	cmn	r0, #1
   1a154:	beq	1a160 <__assert_fail@plt+0x8460>
   1a158:	mov	r0, r4
   1a15c:	pop	{r4, r5, r6, r7, fp, pc}
   1a160:	bl	11b20 <__errno_location@plt>
   1a164:	mov	r5, r0
   1a168:	ldr	r6, [r0]
   1a16c:	mov	r0, r4
   1a170:	bl	11cdc <close@plt>
   1a174:	str	r6, [r5]
   1a178:	mvn	r4, #0
   1a17c:	mov	r0, r4
   1a180:	pop	{r4, r5, r6, r7, fp, pc}
   1a184:	push	{r4, sl, fp, lr}
   1a188:	add	fp, sp, #8
   1a18c:	mov	r4, r0
   1a190:	cmp	r0, #0
   1a194:	beq	1a1ac <__assert_fail@plt+0x84ac>
   1a198:	mov	r0, r4
   1a19c:	bl	11a78 <__freading@plt>
   1a1a0:	cmp	r0, #0
   1a1a4:	movne	r0, r4
   1a1a8:	blne	1a1b8 <__assert_fail@plt+0x84b8>
   1a1ac:	mov	r0, r4
   1a1b0:	pop	{r4, sl, fp, lr}
   1a1b4:	b	118bc <fflush@plt>
   1a1b8:	push	{fp, lr}
   1a1bc:	mov	fp, sp
   1a1c0:	sub	sp, sp, #8
   1a1c4:	ldrb	r1, [r0, #1]
   1a1c8:	tst	r1, #1
   1a1cc:	beq	1a1e4 <__assert_fail@plt+0x84e4>
   1a1d0:	mov	r1, #1
   1a1d4:	str	r1, [sp]
   1a1d8:	mov	r2, #0
   1a1dc:	mov	r3, #0
   1a1e0:	bl	1a214 <__assert_fail@plt+0x8514>
   1a1e4:	mov	sp, fp
   1a1e8:	pop	{fp, pc}
   1a1ec:	push	{r4, r5, r6, sl, fp, lr}
   1a1f0:	add	fp, sp, #16
   1a1f4:	mov	r4, r0
   1a1f8:	bl	11b20 <__errno_location@plt>
   1a1fc:	mov	r5, r0
   1a200:	ldr	r6, [r0]
   1a204:	mov	r0, r4
   1a208:	bl	118ec <free@plt>
   1a20c:	str	r6, [r5]
   1a210:	pop	{r4, r5, r6, sl, fp, pc}
   1a214:	push	{r4, r5, r6, r7, fp, lr}
   1a218:	add	fp, sp, #16
   1a21c:	sub	sp, sp, #8
   1a220:	mov	r5, r3
   1a224:	mov	r6, r2
   1a228:	mov	r4, r0
   1a22c:	ldr	r0, [r0, #4]
   1a230:	ldr	r1, [r4, #8]
   1a234:	cmp	r1, r0
   1a238:	bne	1a254 <__assert_fail@plt+0x8554>
   1a23c:	ldrd	r0, [r4, #16]
   1a240:	cmp	r1, r0
   1a244:	bne	1a254 <__assert_fail@plt+0x8554>
   1a248:	ldr	r0, [r4, #36]	; 0x24
   1a24c:	cmp	r0, #0
   1a250:	beq	1a26c <__assert_fail@plt+0x856c>
   1a254:	mov	r0, r4
   1a258:	mov	r2, r6
   1a25c:	mov	r3, r5
   1a260:	sub	sp, fp, #16
   1a264:	pop	{r4, r5, r6, r7, fp, lr}
   1a268:	b	11bd4 <fseeko64@plt>
   1a26c:	ldr	r7, [fp, #8]
   1a270:	mov	r0, r4
   1a274:	bl	11b8c <fileno@plt>
   1a278:	str	r7, [sp]
   1a27c:	mov	r2, r6
   1a280:	mov	r3, r5
   1a284:	bl	119dc <lseek64@plt>
   1a288:	and	r2, r0, r1
   1a28c:	cmn	r2, #1
   1a290:	beq	1a2b0 <__assert_fail@plt+0x85b0>
   1a294:	strd	r0, [r4, #80]	; 0x50
   1a298:	ldr	r0, [r4]
   1a29c:	bic	r0, r0, #16
   1a2a0:	str	r0, [r4]
   1a2a4:	mov	r0, #0
   1a2a8:	sub	sp, fp, #16
   1a2ac:	pop	{r4, r5, r6, r7, fp, pc}
   1a2b0:	mvn	r0, #0
   1a2b4:	sub	sp, fp, #16
   1a2b8:	pop	{r4, r5, r6, r7, fp, pc}
   1a2bc:	cmp	r0, #0
   1a2c0:	movweq	r0, #1
   1a2c4:	cmn	r0, #1
   1a2c8:	ble	1a2d0 <__assert_fail@plt+0x85d0>
   1a2cc:	b	11a54 <malloc@plt>
   1a2d0:	push	{fp, lr}
   1a2d4:	mov	fp, sp
   1a2d8:	bl	11b20 <__errno_location@plt>
   1a2dc:	mov	r1, #12
   1a2e0:	str	r1, [r0]
   1a2e4:	mov	r0, #0
   1a2e8:	pop	{fp, pc}
   1a2ec:	push	{r4, r5, r6, r7, fp, lr}
   1a2f0:	add	fp, sp, #16
   1a2f4:	sub	sp, sp, #8
   1a2f8:	mov	r7, r2
   1a2fc:	mov	r4, r1
   1a300:	add	r5, sp, #4
   1a304:	cmp	r0, #0
   1a308:	movne	r5, r0
   1a30c:	mov	r0, r5
   1a310:	bl	11a0c <mbrtowc@plt>
   1a314:	mov	r6, r0
   1a318:	cmp	r7, #0
   1a31c:	beq	1a344 <__assert_fail@plt+0x8644>
   1a320:	cmn	r6, #2
   1a324:	bcc	1a344 <__assert_fail@plt+0x8644>
   1a328:	mov	r0, #0
   1a32c:	bl	28d2c <__assert_fail@plt+0x1702c>
   1a330:	cmp	r0, #0
   1a334:	bne	1a344 <__assert_fail@plt+0x8644>
   1a338:	ldrb	r0, [r4]
   1a33c:	str	r0, [r5]
   1a340:	mov	r6, #1
   1a344:	mov	r0, r6
   1a348:	sub	sp, fp, #16
   1a34c:	pop	{r4, r5, r6, r7, fp, pc}
   1a350:	push	{fp, lr}
   1a354:	mov	fp, sp
   1a358:	cmp	r0, #0
   1a35c:	beq	1a378 <__assert_fail@plt+0x8678>
   1a360:	cmp	r1, #0
   1a364:	beq	1a384 <__assert_fail@plt+0x8684>
   1a368:	cmn	r1, #1
   1a36c:	ble	1a390 <__assert_fail@plt+0x8690>
   1a370:	pop	{fp, lr}
   1a374:	b	1197c <realloc@plt>
   1a378:	mov	r0, r1
   1a37c:	pop	{fp, lr}
   1a380:	b	1a2bc <__assert_fail@plt+0x85bc>
   1a384:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1a388:	mov	r0, #0
   1a38c:	pop	{fp, pc}
   1a390:	bl	11b20 <__errno_location@plt>
   1a394:	mov	r1, #12
   1a398:	str	r1, [r0]
   1a39c:	mov	r0, #0
   1a3a0:	pop	{fp, pc}
   1a3a4:	cmp	r2, #0
   1a3a8:	beq	1a3d8 <__assert_fail@plt+0x86d8>
   1a3ac:	mvn	r3, #0
   1a3b0:	udiv	r3, r3, r2
   1a3b4:	cmp	r3, r1
   1a3b8:	bcs	1a3d8 <__assert_fail@plt+0x86d8>
   1a3bc:	push	{fp, lr}
   1a3c0:	mov	fp, sp
   1a3c4:	bl	11b20 <__errno_location@plt>
   1a3c8:	mov	r1, #12
   1a3cc:	str	r1, [r0]
   1a3d0:	mov	r0, #0
   1a3d4:	pop	{fp, pc}
   1a3d8:	mul	r1, r2, r1
   1a3dc:	b	1a350 <__assert_fail@plt+0x8650>
   1a3e0:	push	{fp, lr}
   1a3e4:	mov	fp, sp
   1a3e8:	mov	ip, r1
   1a3ec:	mov	lr, r0
   1a3f0:	movw	r0, #50132	; 0xc3d4
   1a3f4:	movt	r0, #3
   1a3f8:	ldr	r3, [r0]
   1a3fc:	mov	r0, #16
   1a400:	and	r0, r0, r3, lsr #21
   1a404:	ldrb	r1, [r2, #28]
   1a408:	and	r1, r1, #111	; 0x6f
   1a40c:	orr	r0, r1, r0
   1a410:	orr	r0, r0, #128	; 0x80
   1a414:	strb	r0, [r2, #28]
   1a418:	mov	r0, r2
   1a41c:	mov	r1, lr
   1a420:	mov	r2, ip
   1a424:	bl	1a460 <__assert_fail@plt+0x8760>
   1a428:	cmp	r0, #0
   1a42c:	beq	1a458 <__assert_fail@plt+0x8758>
   1a430:	movw	r1, #44840	; 0xaf28
   1a434:	movt	r1, #2
   1a438:	ldr	r0, [r1, r0, lsl #2]
   1a43c:	movw	r1, #44456	; 0xada8
   1a440:	movt	r1, #2
   1a444:	add	r1, r1, r0
   1a448:	mov	r0, #0
   1a44c:	mov	r2, #5
   1a450:	pop	{fp, lr}
   1a454:	b	11970 <dcgettext@plt>
   1a458:	mov	r0, #0
   1a45c:	pop	{fp, pc}
   1a460:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a464:	add	fp, sp, #24
   1a468:	sub	sp, sp, #96	; 0x60
   1a46c:	mov	r6, r3
   1a470:	mov	r7, r2
   1a474:	mov	r8, r1
   1a478:	mov	r4, r0
   1a47c:	mov	r0, #0
   1a480:	str	r0, [fp, #-28]	; 0xffffffe4
   1a484:	str	r0, [r4, #24]
   1a488:	str	r0, [r4, #8]
   1a48c:	str	r3, [r4, #12]
   1a490:	ldrb	r0, [r4, #28]
   1a494:	and	r0, r0, #144	; 0x90
   1a498:	strb	r0, [r4, #28]
   1a49c:	ldr	r5, [r4]
   1a4a0:	ldr	r0, [r4, #4]
   1a4a4:	cmp	r0, #159	; 0x9f
   1a4a8:	bls	1a60c <__assert_fail@plt+0x890c>
   1a4ac:	mov	r0, #160	; 0xa0
   1a4b0:	str	r0, [r4, #8]
   1a4b4:	mov	r0, r5
   1a4b8:	mov	r1, r7
   1a4bc:	bl	1bb50 <__assert_fail@plt+0x9e50>
   1a4c0:	str	r0, [fp, #-28]	; 0xffffffe4
   1a4c4:	cmp	r0, #0
   1a4c8:	bne	1a4fc <__assert_fail@plt+0x87fc>
   1a4cc:	movw	r1, #0
   1a4d0:	movt	r1, #0
   1a4d4:	movw	r2, #0
   1a4d8:	movt	r2, #0
   1a4dc:	orrs	r1, r2, r1
   1a4e0:	beq	1a4fc <__assert_fail@plt+0x87fc>
   1a4e4:	add	r0, r5, #136	; 0x88
   1a4e8:	mov	r1, #0
   1a4ec:	bl	11940 <pthread_mutex_init@plt>
   1a4f0:	cmp	r0, #0
   1a4f4:	bne	1a630 <__assert_fail@plt+0x8930>
   1a4f8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a4fc:	cmp	r0, #0
   1a500:	bne	1a5f4 <__assert_fail@plt+0x88f4>
   1a504:	ldr	r3, [r4, #20]
   1a508:	str	r5, [sp, #4]
   1a50c:	ubfx	r0, r6, #22, #1
   1a510:	str	r0, [sp]
   1a514:	add	r0, sp, #8
   1a518:	mov	r1, r8
   1a51c:	mov	r2, r7
   1a520:	bl	1bd0c <__assert_fail@plt+0xa00c>
   1a524:	str	r0, [fp, #-28]	; 0xffffffe4
   1a528:	cmp	r0, #0
   1a52c:	bne	1a5c4 <__assert_fail@plt+0x88c4>
   1a530:	mov	r0, #0
   1a534:	str	r0, [r4, #24]
   1a538:	add	r0, sp, #8
   1a53c:	sub	r3, fp, #28
   1a540:	mov	r1, r4
   1a544:	mov	r2, r6
   1a548:	bl	1bee0 <__assert_fail@plt+0xa1e0>
   1a54c:	str	r0, [r5, #52]	; 0x34
   1a550:	cmp	r0, #0
   1a554:	beq	1a5c4 <__assert_fail@plt+0x88c4>
   1a558:	mov	r0, r4
   1a55c:	bl	1bfb4 <__assert_fail@plt+0xa2b4>
   1a560:	str	r0, [fp, #-28]	; 0xffffffe4
   1a564:	cmp	r0, #0
   1a568:	bne	1a5c4 <__assert_fail@plt+0x88c4>
   1a56c:	ands	r0, r6, #4194304	; 0x400000
   1a570:	bne	1a590 <__assert_fail@plt+0x8890>
   1a574:	ldrb	r0, [r5, #88]	; 0x58
   1a578:	ands	r0, r0, #4
   1a57c:	beq	1a590 <__assert_fail@plt+0x8890>
   1a580:	ldr	r0, [r4, #20]
   1a584:	cmp	r0, #0
   1a588:	moveq	r0, r5
   1a58c:	bleq	1c1d0 <__assert_fail@plt+0xa4d0>
   1a590:	mov	r0, r5
   1a594:	bl	1c374 <__assert_fail@plt+0xa674>
   1a598:	str	r0, [fp, #-28]	; 0xffffffe4
   1a59c:	mov	r0, r4
   1a5a0:	bl	1be5c <__assert_fail@plt+0xa15c>
   1a5a4:	add	r0, sp, #8
   1a5a8:	bl	1beac <__assert_fail@plt+0xa1ac>
   1a5ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a5b0:	cmp	r0, #0
   1a5b4:	bne	1a5d4 <__assert_fail@plt+0x88d4>
   1a5b8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a5bc:	sub	sp, fp, #24
   1a5c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a5c4:	mov	r0, r4
   1a5c8:	bl	1be5c <__assert_fail@plt+0xa15c>
   1a5cc:	add	r0, sp, #8
   1a5d0:	bl	1beac <__assert_fail@plt+0xa1ac>
   1a5d4:	movw	r0, #0
   1a5d8:	movt	r0, #0
   1a5dc:	movw	r1, #0
   1a5e0:	movt	r1, #0
   1a5e4:	orrs	r0, r1, r0
   1a5e8:	beq	1a5f4 <__assert_fail@plt+0x88f4>
   1a5ec:	add	r0, r5, #136	; 0x88
   1a5f0:	bl	118b0 <pthread_mutex_destroy@plt>
   1a5f4:	mov	r0, r5
   1a5f8:	bl	1ac64 <__assert_fail@plt+0x8f64>
   1a5fc:	mov	r0, #0
   1a600:	str	r0, [r4]
   1a604:	str	r0, [r4, #4]
   1a608:	b	1a5b8 <__assert_fail@plt+0x88b8>
   1a60c:	mov	r9, #160	; 0xa0
   1a610:	mov	r0, r5
   1a614:	mov	r1, #160	; 0xa0
   1a618:	bl	1a350 <__assert_fail@plt+0x8650>
   1a61c:	cmp	r0, #0
   1a620:	beq	1a63c <__assert_fail@plt+0x893c>
   1a624:	mov	r5, r0
   1a628:	stm	r4, {r0, r9}
   1a62c:	b	1a4ac <__assert_fail@plt+0x87ac>
   1a630:	mov	r0, #12
   1a634:	str	r0, [fp, #-28]	; 0xffffffe4
   1a638:	b	1a5f4 <__assert_fail@plt+0x88f4>
   1a63c:	mov	r0, #12
   1a640:	sub	sp, fp, #24
   1a644:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a648:	movw	r2, #50132	; 0xc3d4
   1a64c:	movt	r2, #3
   1a650:	ldr	r1, [r2]
   1a654:	str	r0, [r2]
   1a658:	mov	r0, r1
   1a65c:	bx	lr
   1a660:	push	{r4, r5, r6, sl, fp, lr}
   1a664:	add	fp, sp, #16
   1a668:	mov	r4, r0
   1a66c:	ldr	r6, [r0]
   1a670:	ldr	r5, [r0, #16]
   1a674:	mov	r0, r5
   1a678:	mov	r1, #0
   1a67c:	mov	r2, #256	; 0x100
   1a680:	bl	11b5c <memset@plt>
   1a684:	ldr	r1, [r6, #36]	; 0x24
   1a688:	mov	r0, r4
   1a68c:	mov	r2, r5
   1a690:	bl	1a6f0 <__assert_fail@plt+0x89f0>
   1a694:	ldr	r0, [r6, #36]	; 0x24
   1a698:	ldr	r1, [r6, #40]	; 0x28
   1a69c:	cmp	r0, r1
   1a6a0:	movne	r0, r4
   1a6a4:	movne	r2, r5
   1a6a8:	blne	1a6f0 <__assert_fail@plt+0x89f0>
   1a6ac:	ldr	r0, [r6, #36]	; 0x24
   1a6b0:	ldr	r1, [r6, #44]	; 0x2c
   1a6b4:	cmp	r0, r1
   1a6b8:	movne	r0, r4
   1a6bc:	movne	r2, r5
   1a6c0:	blne	1a6f0 <__assert_fail@plt+0x89f0>
   1a6c4:	ldr	r0, [r6, #36]	; 0x24
   1a6c8:	ldr	r1, [r6, #48]	; 0x30
   1a6cc:	cmp	r0, r1
   1a6d0:	movne	r0, r4
   1a6d4:	movne	r2, r5
   1a6d8:	blne	1a6f0 <__assert_fail@plt+0x89f0>
   1a6dc:	ldrb	r0, [r4, #28]
   1a6e0:	orr	r0, r0, #8
   1a6e4:	strb	r0, [r4, #28]
   1a6e8:	mov	r0, #0
   1a6ec:	pop	{r4, r5, r6, sl, fp, pc}
   1a6f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6f4:	add	fp, sp, #28
   1a6f8:	sub	sp, sp, #308	; 0x134
   1a6fc:	mov	r5, r2
   1a700:	str	r0, [sp, #20]
   1a704:	ldr	r8, [r0]
   1a708:	ldr	r0, [r8, #92]	; 0x5c
   1a70c:	mov	r9, #0
   1a710:	cmp	r0, #1
   1a714:	bne	1a724 <__assert_fail@plt+0x8a24>
   1a718:	ldr	r0, [sp, #20]
   1a71c:	ldrb	r0, [r0, #14]
   1a720:	ubfx	r9, r0, #6, #1
   1a724:	ldr	r0, [r1, #8]
   1a728:	cmp	r0, #1
   1a72c:	blt	1aa6c <__assert_fail@plt+0x8d6c>
   1a730:	add	r0, sp, #32
   1a734:	add	r0, r0, #1
   1a738:	str	r0, [sp, #4]
   1a73c:	mov	r7, #1
   1a740:	movw	r0, #1
   1a744:	movt	r0, #32
   1a748:	add	r0, r0, #254	; 0xfe
   1a74c:	str	r0, [sp, #8]
   1a750:	mov	r2, #0
   1a754:	str	r1, [sp, #12]
   1a758:	str	r8, [sp, #24]
   1a75c:	b	1a778 <__assert_fail@plt+0x8a78>
   1a760:	ldr	r1, [sp, #12]
   1a764:	ldr	r0, [r1, #8]
   1a768:	ldr	r2, [sp, #16]
   1a76c:	add	r2, r2, #1
   1a770:	cmp	r2, r0
   1a774:	bge	1aa6c <__assert_fail@plt+0x8d6c>
   1a778:	ldr	r0, [r1, #12]
   1a77c:	str	r2, [sp, #16]
   1a780:	ldr	sl, [r0, r2, lsl #2]
   1a784:	ldr	r0, [r8]
   1a788:	add	r1, r0, sl, lsl #3
   1a78c:	ldrb	r4, [r1, #4]
   1a790:	cmp	r4, #1
   1a794:	beq	1a810 <__assert_fail@plt+0x8b10>
   1a798:	cmp	r4, #6
   1a79c:	beq	1a900 <__assert_fail@plt+0x8c00>
   1a7a0:	cmp	r4, #3
   1a7a4:	bne	1a980 <__assert_fail@plt+0x8c80>
   1a7a8:	mov	r4, #0
   1a7ac:	mov	r6, #0
   1a7b0:	str	sl, [sp, #28]
   1a7b4:	b	1a7cc <__assert_fail@plt+0x8acc>
   1a7b8:	add	r6, r6, #1
   1a7bc:	cmp	r6, #8
   1a7c0:	ldr	r8, [sp, #24]
   1a7c4:	ldr	sl, [sp, #28]
   1a7c8:	beq	1a760 <__assert_fail@plt+0x8a60>
   1a7cc:	ldr	r0, [r8]
   1a7d0:	ldr	r0, [r0, sl, lsl #3]
   1a7d4:	ldr	r8, [r0, r6, lsl #2]
   1a7d8:	mov	sl, #0
   1a7dc:	b	1a7f0 <__assert_fail@plt+0x8af0>
   1a7e0:	add	r4, r4, #1
   1a7e4:	add	sl, sl, #1
   1a7e8:	cmp	sl, #32
   1a7ec:	beq	1a7b8 <__assert_fail@plt+0x8ab8>
   1a7f0:	tst	r8, r7, lsl sl
   1a7f4:	strbne	r7, [r5, r4]
   1a7f8:	cmpne	r9, #0
   1a7fc:	beq	1a7e0 <__assert_fail@plt+0x8ae0>
   1a800:	mov	r0, r4
   1a804:	bl	11934 <tolower@plt>
   1a808:	strb	r7, [r5, r0]
   1a80c:	b	1a7e0 <__assert_fail@plt+0x8ae0>
   1a810:	ldrb	r0, [r0, sl, lsl #3]
   1a814:	strb	r7, [r5, r0]
   1a818:	cmp	r9, #0
   1a81c:	beq	1a828 <__assert_fail@plt+0x8b28>
   1a820:	bl	11934 <tolower@plt>
   1a824:	strb	r7, [r5, r0]
   1a828:	ldr	r0, [sp, #20]
   1a82c:	ldrb	r0, [r0, #14]
   1a830:	tst	r0, #64	; 0x40
   1a834:	beq	1a760 <__assert_fail@plt+0x8a60>
   1a838:	ldr	r0, [r8, #92]	; 0x5c
   1a83c:	cmp	r0, #2
   1a840:	blt	1a760 <__assert_fail@plt+0x8a60>
   1a844:	ldr	r0, [r8]
   1a848:	ldrb	r0, [r0, sl, lsl #3]
   1a84c:	strb	r0, [sp, #32]
   1a850:	ldr	r0, [r8, #8]
   1a854:	add	r1, sl, #1
   1a858:	cmp	r1, r0
   1a85c:	ldr	r0, [sp, #4]
   1a860:	mov	r6, #0
   1a864:	movw	r4, #1
   1a868:	movt	r4, #32
   1a86c:	bcs	1a8b0 <__assert_fail@plt+0x8bb0>
   1a870:	ldr	r0, [sp, #4]
   1a874:	ldr	r1, [r8]
   1a878:	add	r1, r1, sl, lsl #3
   1a87c:	ldr	r2, [r1, #12]
   1a880:	ldr	r3, [sp, #8]
   1a884:	and	r2, r2, r3
   1a888:	cmp	r2, r4
   1a88c:	bne	1a8b0 <__assert_fail@plt+0x8bb0>
   1a890:	ldrb	r1, [r1, #8]
   1a894:	strb	r1, [r0], #1
   1a898:	add	r1, sl, #1
   1a89c:	ldr	r2, [r8, #8]
   1a8a0:	add	r3, sl, #2
   1a8a4:	cmp	r3, r2
   1a8a8:	mov	sl, r1
   1a8ac:	bcc	1a874 <__assert_fail@plt+0x8b74>
   1a8b0:	str	r6, [fp, #-44]	; 0xffffffd4
   1a8b4:	str	r6, [fp, #-48]	; 0xffffffd0
   1a8b8:	add	r1, sp, #32
   1a8bc:	sub	r4, r0, r1
   1a8c0:	sub	r0, fp, #36	; 0x24
   1a8c4:	mov	r2, r4
   1a8c8:	sub	r3, fp, #48	; 0x30
   1a8cc:	bl	1a2ec <__assert_fail@plt+0x85ec>
   1a8d0:	cmp	r0, r4
   1a8d4:	bne	1a760 <__assert_fail@plt+0x8a60>
   1a8d8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a8dc:	bl	1194c <towlower@plt>
   1a8e0:	mov	r1, r0
   1a8e4:	add	r0, sp, #32
   1a8e8:	sub	r2, fp, #48	; 0x30
   1a8ec:	bl	11880 <wcrtomb@plt>
   1a8f0:	cmn	r0, #1
   1a8f4:	ldrbne	r0, [sp, #32]
   1a8f8:	strbne	r7, [r5, r0]
   1a8fc:	b	1a760 <__assert_fail@plt+0x8a60>
   1a900:	ldr	r4, [r0, sl, lsl #3]
   1a904:	ldr	r0, [r8, #92]	; 0x5c
   1a908:	cmp	r0, #2
   1a90c:	blt	1a998 <__assert_fail@plt+0x8c98>
   1a910:	ldr	r0, [r4, #36]	; 0x24
   1a914:	cmp	r0, #0
   1a918:	bne	1a934 <__assert_fail@plt+0x8c34>
   1a91c:	ldrb	r0, [r4, #16]
   1a920:	tst	r0, #1
   1a924:	bne	1a934 <__assert_fail@plt+0x8c34>
   1a928:	ldr	r0, [r4, #32]
   1a92c:	cmp	r0, #0
   1a930:	beq	1a998 <__assert_fail@plt+0x8c98>
   1a934:	mov	r4, #0
   1a938:	strb	r4, [fp, #-48]	; 0xffffffd0
   1a93c:	str	r4, [sp, #36]	; 0x24
   1a940:	str	r4, [sp, #32]
   1a944:	mov	r0, #0
   1a948:	sub	r1, fp, #48	; 0x30
   1a94c:	mov	r2, #1
   1a950:	add	r3, sp, #32
   1a954:	bl	1a2ec <__assert_fail@plt+0x85ec>
   1a958:	cmn	r0, #2
   1a95c:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   1a960:	strbeq	r7, [r5, r0]
   1a964:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   1a968:	add	r0, r0, #1
   1a96c:	strb	r0, [fp, #-48]	; 0xffffffd0
   1a970:	uxtb	r1, r0
   1a974:	cmp	r1, r0
   1a978:	beq	1a93c <__assert_fail@plt+0x8c3c>
   1a97c:	b	1a760 <__assert_fail@plt+0x8a60>
   1a980:	cmp	r4, #7
   1a984:	bhi	1a760 <__assert_fail@plt+0x8a60>
   1a988:	mov	r0, #164	; 0xa4
   1a98c:	tst	r0, r7, lsl r4
   1a990:	beq	1a760 <__assert_fail@plt+0x8a60>
   1a994:	b	1aa44 <__assert_fail@plt+0x8d44>
   1a998:	ldr	r0, [r4, #20]
   1a99c:	cmp	r0, #1
   1a9a0:	blt	1a760 <__assert_fail@plt+0x8a60>
   1a9a4:	mov	r6, #0
   1a9a8:	b	1a9bc <__assert_fail@plt+0x8cbc>
   1a9ac:	add	r6, r6, #1
   1a9b0:	ldr	r0, [r4, #20]
   1a9b4:	cmp	r6, r0
   1a9b8:	bge	1a760 <__assert_fail@plt+0x8a60>
   1a9bc:	mov	r0, #0
   1a9c0:	str	r0, [fp, #-44]	; 0xffffffd4
   1a9c4:	str	r0, [fp, #-48]	; 0xffffffd0
   1a9c8:	ldr	r0, [r4]
   1a9cc:	ldr	r1, [r0, r6, lsl #2]
   1a9d0:	add	r0, sp, #32
   1a9d4:	sub	r2, fp, #48	; 0x30
   1a9d8:	bl	11880 <wcrtomb@plt>
   1a9dc:	cmn	r0, #1
   1a9e0:	beq	1a9fc <__assert_fail@plt+0x8cfc>
   1a9e4:	ldrb	r0, [sp, #32]
   1a9e8:	strb	r7, [r5, r0]
   1a9ec:	cmp	r9, #0
   1a9f0:	beq	1a9fc <__assert_fail@plt+0x8cfc>
   1a9f4:	bl	11934 <tolower@plt>
   1a9f8:	strb	r7, [r5, r0]
   1a9fc:	ldr	r0, [sp, #20]
   1aa00:	ldrb	r0, [r0, #14]
   1aa04:	tst	r0, #64	; 0x40
   1aa08:	beq	1a9ac <__assert_fail@plt+0x8cac>
   1aa0c:	ldr	r0, [r8, #92]	; 0x5c
   1aa10:	cmp	r0, #2
   1aa14:	blt	1a9ac <__assert_fail@plt+0x8cac>
   1aa18:	ldr	r0, [r4]
   1aa1c:	ldr	r0, [r0, r6, lsl #2]
   1aa20:	bl	1194c <towlower@plt>
   1aa24:	mov	r1, r0
   1aa28:	add	r0, sp, #32
   1aa2c:	sub	r2, fp, #48	; 0x30
   1aa30:	bl	11880 <wcrtomb@plt>
   1aa34:	cmn	r0, #1
   1aa38:	ldrbne	r0, [sp, #32]
   1aa3c:	strbne	r7, [r5, r0]
   1aa40:	b	1a9ac <__assert_fail@plt+0x8cac>
   1aa44:	mov	r0, r5
   1aa48:	mov	r1, #1
   1aa4c:	mov	r2, #256	; 0x100
   1aa50:	bl	11b5c <memset@plt>
   1aa54:	cmp	r4, #2
   1aa58:	bne	1aa6c <__assert_fail@plt+0x8d6c>
   1aa5c:	ldr	r1, [sp, #20]
   1aa60:	ldrb	r0, [r1, #28]
   1aa64:	orr	r0, r0, #1
   1aa68:	strb	r0, [r1, #28]
   1aa6c:	sub	sp, fp, #28
   1aa70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aa78:	add	fp, sp, #24
   1aa7c:	mov	r7, r2
   1aa80:	mov	r8, r1
   1aa84:	mov	r4, r0
   1aa88:	mov	r0, #0
   1aa8c:	str	r0, [r4]
   1aa90:	str	r0, [r4, #4]
   1aa94:	str	r0, [r4, #8]
   1aa98:	mov	r0, #256	; 0x100
   1aa9c:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1aaa0:	str	r0, [r4, #16]
   1aaa4:	cmp	r0, #0
   1aaa8:	beq	1ab58 <__assert_fail@plt+0x8e58>
   1aaac:	movw	r0, #45820	; 0xb2fc
   1aab0:	movt	r0, #3
   1aab4:	tst	r7, #1
   1aab8:	movweq	r0, #710	; 0x2c6
   1aabc:	movteq	r0, #257	; 0x101
   1aac0:	and	r1, r7, #2
   1aac4:	orr	r5, r0, r1, lsl #21
   1aac8:	tst	r7, #4
   1aacc:	bne	1aae0 <__assert_fail@plt+0x8de0>
   1aad0:	ldrb	r0, [r4, #28]
   1aad4:	and	r0, r0, #127	; 0x7f
   1aad8:	strb	r0, [r4, #28]
   1aadc:	b	1aafc <__assert_fail@plt+0x8dfc>
   1aae0:	ldrb	r0, [r4, #28]
   1aae4:	orr	r0, r0, #128	; 0x80
   1aae8:	strb	r0, [r4, #28]
   1aaec:	movw	r0, #45758	; 0xb2be
   1aaf0:	movt	r0, #323	; 0x143
   1aaf4:	and	r0, r5, r0
   1aaf8:	orr	r5, r0, #256	; 0x100
   1aafc:	mov	r6, #0
   1ab00:	str	r6, [r4, #20]
   1ab04:	and	r0, r7, #8
   1ab08:	ldrb	r1, [r4, #28]
   1ab0c:	and	r1, r1, #239	; 0xef
   1ab10:	orr	r0, r1, r0, lsl #1
   1ab14:	strb	r0, [r4, #28]
   1ab18:	mov	r0, r8
   1ab1c:	bl	11af0 <strlen@plt>
   1ab20:	mov	r2, r0
   1ab24:	mov	r0, r4
   1ab28:	mov	r1, r8
   1ab2c:	mov	r3, r5
   1ab30:	bl	1a460 <__assert_fail@plt+0x8760>
   1ab34:	mov	r5, r0
   1ab38:	cmp	r0, #16
   1ab3c:	movweq	r5, #8
   1ab40:	cmp	r5, #0
   1ab44:	bne	1ab64 <__assert_fail@plt+0x8e64>
   1ab48:	mov	r0, r4
   1ab4c:	bl	1a660 <__assert_fail@plt+0x8960>
   1ab50:	mov	r0, r6
   1ab54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ab58:	mov	r6, #12
   1ab5c:	mov	r0, r6
   1ab60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ab64:	ldr	r0, [r4, #16]
   1ab68:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ab6c:	str	r6, [r4, #16]
   1ab70:	mov	r0, r5
   1ab74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ab78:	push	{r4, r5, r6, r7, fp, lr}
   1ab7c:	add	fp, sp, #16
   1ab80:	cmp	r0, #17
   1ab84:	bcs	1abf8 <__assert_fail@plt+0x8ef8>
   1ab88:	mov	r5, r3
   1ab8c:	mov	r4, r2
   1ab90:	movw	r1, #44840	; 0xaf28
   1ab94:	movt	r1, #2
   1ab98:	ldr	r0, [r1, r0, lsl #2]
   1ab9c:	movw	r1, #44456	; 0xada8
   1aba0:	movt	r1, #2
   1aba4:	add	r1, r1, r0
   1aba8:	mov	r0, #0
   1abac:	mov	r2, #5
   1abb0:	bl	11970 <dcgettext@plt>
   1abb4:	mov	r6, r0
   1abb8:	bl	11af0 <strlen@plt>
   1abbc:	add	r7, r0, #1
   1abc0:	cmp	r5, #0
   1abc4:	beq	1abe0 <__assert_fail@plt+0x8ee0>
   1abc8:	cmp	r7, r5
   1abcc:	mov	r2, r7
   1abd0:	bhi	1abe8 <__assert_fail@plt+0x8ee8>
   1abd4:	mov	r0, r4
   1abd8:	mov	r1, r6
   1abdc:	bl	11928 <memcpy@plt>
   1abe0:	mov	r0, r7
   1abe4:	pop	{r4, r5, r6, r7, fp, pc}
   1abe8:	sub	r2, r5, #1
   1abec:	mov	r0, #0
   1abf0:	strb	r0, [r4, r2]
   1abf4:	b	1abd4 <__assert_fail@plt+0x8ed4>
   1abf8:	bl	11cc4 <abort@plt>
   1abfc:	push	{r4, r5, fp, lr}
   1ac00:	add	fp, sp, #8
   1ac04:	mov	r4, r0
   1ac08:	ldr	r5, [r0]
   1ac0c:	cmp	r5, #0
   1ac10:	beq	1ac3c <__assert_fail@plt+0x8f3c>
   1ac14:	movw	r0, #0
   1ac18:	movt	r0, #0
   1ac1c:	movw	r1, #0
   1ac20:	movt	r1, #0
   1ac24:	orrs	r0, r1, r0
   1ac28:	beq	1ac34 <__assert_fail@plt+0x8f34>
   1ac2c:	add	r0, r5, #136	; 0x88
   1ac30:	bl	118b0 <pthread_mutex_destroy@plt>
   1ac34:	mov	r0, r5
   1ac38:	bl	1ac64 <__assert_fail@plt+0x8f64>
   1ac3c:	mov	r5, #0
   1ac40:	str	r5, [r4]
   1ac44:	str	r5, [r4, #4]
   1ac48:	ldr	r0, [r4, #16]
   1ac4c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ac50:	str	r5, [r4, #16]
   1ac54:	ldr	r0, [r4, #20]
   1ac58:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ac5c:	str	r5, [r4, #20]
   1ac60:	pop	{r4, r5, fp, pc}
   1ac64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ac68:	add	fp, sp, #24
   1ac6c:	mov	r8, r0
   1ac70:	ldr	r0, [r0]
   1ac74:	cmp	r0, #0
   1ac78:	beq	1acb0 <__assert_fail@plt+0x8fb0>
   1ac7c:	ldr	r0, [r8, #8]
   1ac80:	cmp	r0, #0
   1ac84:	beq	1acb0 <__assert_fail@plt+0x8fb0>
   1ac88:	mov	r5, #0
   1ac8c:	mov	r6, #0
   1ac90:	ldr	r0, [r8]
   1ac94:	add	r0, r0, r5
   1ac98:	bl	1ba88 <__assert_fail@plt+0x9d88>
   1ac9c:	add	r5, r5, #8
   1aca0:	add	r6, r6, #1
   1aca4:	ldr	r0, [r8, #8]
   1aca8:	cmp	r6, r0
   1acac:	bcc	1ac90 <__assert_fail@plt+0x8f90>
   1acb0:	ldr	r0, [r8, #12]
   1acb4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1acb8:	ldr	r0, [r8, #8]
   1acbc:	cmp	r0, #0
   1acc0:	beq	1ad24 <__assert_fail@plt+0x9024>
   1acc4:	mov	r5, #0
   1acc8:	mov	r6, #8
   1accc:	b	1ace4 <__assert_fail@plt+0x8fe4>
   1acd0:	add	r6, r6, #12
   1acd4:	add	r5, r5, #1
   1acd8:	ldr	r0, [r8, #8]
   1acdc:	cmp	r5, r0
   1ace0:	bcs	1ad24 <__assert_fail@plt+0x9024>
   1ace4:	ldr	r0, [r8, #24]
   1ace8:	cmp	r0, #0
   1acec:	beq	1acf8 <__assert_fail@plt+0x8ff8>
   1acf0:	ldr	r0, [r0, r6]
   1acf4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1acf8:	ldr	r0, [r8, #28]
   1acfc:	cmp	r0, #0
   1ad00:	beq	1ad0c <__assert_fail@plt+0x900c>
   1ad04:	ldr	r0, [r0, r6]
   1ad08:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ad0c:	ldr	r0, [r8, #20]
   1ad10:	cmp	r0, #0
   1ad14:	beq	1acd0 <__assert_fail@plt+0x8fd0>
   1ad18:	ldr	r0, [r0, r6]
   1ad1c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ad20:	b	1acd0 <__assert_fail@plt+0x8fd0>
   1ad24:	ldr	r0, [r8, #20]
   1ad28:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ad2c:	ldr	r0, [r8, #24]
   1ad30:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ad34:	ldr	r0, [r8, #28]
   1ad38:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ad3c:	ldr	r0, [r8]
   1ad40:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ad44:	ldr	r0, [r8, #32]
   1ad48:	cmp	r0, #0
   1ad4c:	beq	1adb0 <__assert_fail@plt+0x90b0>
   1ad50:	mov	r5, #0
   1ad54:	b	1ad74 <__assert_fail@plt+0x9074>
   1ad58:	ldr	r0, [r7]
   1ad5c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ad60:	add	r0, r5, #1
   1ad64:	ldr	r1, [r8, #68]	; 0x44
   1ad68:	cmp	r5, r1
   1ad6c:	mov	r5, r0
   1ad70:	bcs	1adb0 <__assert_fail@plt+0x90b0>
   1ad74:	ldr	r6, [r8, #32]
   1ad78:	add	r0, r5, r5, lsl #1
   1ad7c:	ldr	r0, [r6, r0, lsl #2]!
   1ad80:	add	r7, r6, #8
   1ad84:	cmp	r0, #1
   1ad88:	blt	1ad58 <__assert_fail@plt+0x9058>
   1ad8c:	mov	r4, #0
   1ad90:	ldr	r0, [r7]
   1ad94:	ldr	r0, [r0, r4, lsl #2]
   1ad98:	bl	1bab8 <__assert_fail@plt+0x9db8>
   1ad9c:	add	r4, r4, #1
   1ada0:	ldr	r0, [r6]
   1ada4:	cmp	r4, r0
   1ada8:	blt	1ad90 <__assert_fail@plt+0x9090>
   1adac:	b	1ad58 <__assert_fail@plt+0x9058>
   1adb0:	ldr	r0, [r8, #32]
   1adb4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1adb8:	ldr	r0, [r8, #60]	; 0x3c
   1adbc:	movw	r1, #44908	; 0xaf6c
   1adc0:	movt	r1, #2
   1adc4:	cmp	r0, r1
   1adc8:	beq	1add0 <__assert_fail@plt+0x90d0>
   1adcc:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1add0:	ldr	r0, [r8, #132]	; 0x84
   1add4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1add8:	mov	r0, r8
   1addc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ade0:	b	1a1ec <__assert_fail@plt+0x84ec>
   1ade4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ade8:	add	fp, sp, #28
   1adec:	sub	sp, sp, #28
   1adf0:	mov	r7, #2
   1adf4:	ldr	sl, [fp, #8]
   1adf8:	cmp	sl, #7
   1adfc:	bhi	1aed0 <__assert_fail@plt+0x91d0>
   1ae00:	mov	r6, r3
   1ae04:	mov	r9, r2
   1ae08:	mov	r4, r1
   1ae0c:	mov	r5, r0
   1ae10:	ldr	r0, [r0]
   1ae14:	str	r0, [sp, #24]
   1ae18:	tst	sl, #4
   1ae1c:	bne	1ae34 <__assert_fail@plt+0x9134>
   1ae20:	mov	r0, r4
   1ae24:	bl	11af0 <strlen@plt>
   1ae28:	mov	r7, r0
   1ae2c:	mov	r8, #0
   1ae30:	b	1ae3c <__assert_fail@plt+0x913c>
   1ae34:	ldr	r8, [r6]
   1ae38:	ldr	r7, [r6, #4]
   1ae3c:	movw	r0, #0
   1ae40:	movt	r0, #0
   1ae44:	movw	r1, #0
   1ae48:	movt	r1, #0
   1ae4c:	orrs	r0, r1, r0
   1ae50:	str	r0, [sp, #20]
   1ae54:	beq	1ae64 <__assert_fail@plt+0x9164>
   1ae58:	ldr	r0, [sp, #24]
   1ae5c:	add	r0, r0, #136	; 0x88
   1ae60:	bl	118f8 <pthread_mutex_lock@plt>
   1ae64:	ldrb	r0, [r5, #28]
   1ae68:	tst	r0, #16
   1ae6c:	bne	1ae80 <__assert_fail@plt+0x9180>
   1ae70:	str	r7, [sp]
   1ae74:	stmib	sp, {r7, r9}
   1ae78:	str	r6, [sp, #12]
   1ae7c:	b	1ae94 <__assert_fail@plt+0x9194>
   1ae80:	mov	r0, #0
   1ae84:	str	r7, [sp]
   1ae88:	str	r7, [sp, #4]
   1ae8c:	str	r0, [sp, #8]
   1ae90:	str	r0, [sp, #12]
   1ae94:	str	sl, [sp, #16]
   1ae98:	mov	r0, r5
   1ae9c:	mov	r1, r4
   1aea0:	mov	r2, r7
   1aea4:	mov	r3, r8
   1aea8:	bl	1aedc <__assert_fail@plt+0x91dc>
   1aeac:	mov	r7, r0
   1aeb0:	ldr	r0, [sp, #20]
   1aeb4:	cmp	r0, #0
   1aeb8:	beq	1aec8 <__assert_fail@plt+0x91c8>
   1aebc:	ldr	r0, [sp, #24]
   1aec0:	add	r0, r0, #136	; 0x88
   1aec4:	bl	11844 <pthread_mutex_unlock@plt>
   1aec8:	cmp	r7, #0
   1aecc:	movwne	r7, #1
   1aed0:	mov	r0, r7
   1aed4:	sub	sp, fp, #28
   1aed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aedc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aee0:	add	fp, sp, #28
   1aee4:	sub	sp, sp, #196	; 0xc4
   1aee8:	mov	r6, r3
   1aeec:	str	r2, [sp, #52]	; 0x34
   1aef0:	str	r1, [sp, #40]	; 0x28
   1aef4:	mov	r4, r0
   1aef8:	ldr	sl, [r0]
   1aefc:	add	r0, sp, #56	; 0x38
   1af00:	mov	r7, #0
   1af04:	mov	r1, #0
   1af08:	mov	r2, #136	; 0x88
   1af0c:	bl	11b5c <memset@plt>
   1af10:	str	sl, [sp, #140]	; 0x8c
   1af14:	ldr	r1, [r4, #16]
   1af18:	ldr	r0, [fp, #16]
   1af1c:	ldr	ip, [fp, #8]
   1af20:	cmp	r1, #0
   1af24:	mov	r5, #0
   1af28:	beq	1af44 <__assert_fail@plt+0x9244>
   1af2c:	ldrb	r2, [r4, #28]
   1af30:	and	r2, r2, #9
   1af34:	cmp	r2, #8
   1af38:	movne	r1, #0
   1af3c:	subs	r5, r6, ip
   1af40:	movne	r5, r1
   1af44:	str	r6, [sp, #36]	; 0x24
   1af48:	ldr	r1, [r4, #8]
   1af4c:	ldr	r2, [r4, #24]
   1af50:	mvn	r3, r2
   1af54:	cmp	r2, r0
   1af58:	addcc	r7, r3, r0
   1af5c:	mov	r8, #1
   1af60:	cmp	r1, #0
   1af64:	beq	1b44c <__assert_fail@plt+0x974c>
   1af68:	ldr	r1, [sl, #36]	; 0x24
   1af6c:	cmp	r1, #0
   1af70:	ldrne	r2, [sl, #40]	; 0x28
   1af74:	cmpne	r2, #0
   1af78:	beq	1b44c <__assert_fail@plt+0x974c>
   1af7c:	ldr	r3, [sl, #44]	; 0x2c
   1af80:	cmp	r3, #0
   1af84:	ldrne	r6, [sl, #48]	; 0x30
   1af88:	cmpne	r6, #0
   1af8c:	beq	1b44c <__assert_fail@plt+0x974c>
   1af90:	ldr	r6, [r4, #20]
   1af94:	ldr	r1, [r1, #8]
   1af98:	cmp	r1, #0
   1af9c:	bne	1afac <__assert_fail@plt+0x92ac>
   1afa0:	ldr	r1, [r2, #8]
   1afa4:	cmp	r1, #0
   1afa8:	beq	1b588 <__assert_fail@plt+0x9888>
   1afac:	mov	r9, ip
   1afb0:	ldr	r0, [fp, #16]
   1afb4:	subs	r0, r0, r7
   1afb8:	str	r0, [sp, #48]	; 0x30
   1afbc:	mov	r0, #1
   1afc0:	str	r0, [sp, #32]
   1afc4:	bne	1afd8 <__assert_fail@plt+0x92d8>
   1afc8:	ldr	r0, [sl, #76]	; 0x4c
   1afcc:	cmp	r0, #0
   1afd0:	movwne	r0, #1
   1afd4:	str	r0, [sp, #32]
   1afd8:	ldr	r0, [sl, #8]
   1afdc:	ldr	r1, [r4, #12]
   1afe0:	str	sl, [sp, #8]
   1afe4:	str	r6, [sp]
   1afe8:	ubfx	r1, r1, #22, #1
   1afec:	str	r1, [sp, #4]
   1aff0:	add	r3, r0, #1
   1aff4:	add	r0, sp, #56	; 0x38
   1aff8:	ldr	r1, [sp, #40]	; 0x28
   1affc:	ldr	r2, [sp, #52]	; 0x34
   1b000:	bl	21804 <__assert_fail@plt+0xfb04>
   1b004:	cmp	r0, #0
   1b008:	bne	1b66c <__assert_fail@plt+0x996c>
   1b00c:	ldr	r1, [fp, #24]
   1b010:	ldr	r0, [fp, #12]
   1b014:	str	r0, [sp, #108]	; 0x6c
   1b018:	str	r0, [sp, #112]	; 0x70
   1b01c:	str	r4, [sp, #28]
   1b020:	ldrb	r0, [r4, #28]
   1b024:	lsr	r0, r0, #7
   1b028:	strb	r0, [sp, #133]	; 0x85
   1b02c:	ldr	r0, [sl, #76]	; 0x4c
   1b030:	lsl	r2, r0, #1
   1b034:	add	r0, sp, #56	; 0x38
   1b038:	bl	218b4 <__assert_fail@plt+0xfbb4>
   1b03c:	cmp	r0, #0
   1b040:	bne	1b66c <__assert_fail@plt+0x996c>
   1b044:	ldr	r0, [sp, #48]	; 0x30
   1b048:	cmp	r0, #1
   1b04c:	bhi	1b05c <__assert_fail@plt+0x935c>
   1b050:	ldrb	r0, [sl, #88]	; 0x58
   1b054:	tst	r0, #2
   1b058:	beq	1b084 <__assert_fail@plt+0x9384>
   1b05c:	mov	r8, #12
   1b060:	ldr	r0, [sp, #92]	; 0x5c
   1b064:	cmn	r0, #-1073741822	; 0xc0000002
   1b068:	bhi	1b42c <__assert_fail@plt+0x972c>
   1b06c:	mov	r1, #4
   1b070:	add	r0, r1, r0, lsl #2
   1b074:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1b078:	str	r0, [sp, #156]	; 0x9c
   1b07c:	cmp	r0, #0
   1b080:	beq	1b42c <__assert_fail@plt+0x972c>
   1b084:	str	r7, [sp, #12]
   1b088:	ldr	r7, [sp, #36]	; 0x24
   1b08c:	str	r7, [fp, #-32]	; 0xffffffe0
   1b090:	mov	r0, #4
   1b094:	ldr	r1, [fp, #24]
   1b098:	tst	r1, #1
   1b09c:	mov	r1, #4
   1b0a0:	movweq	r1, #6
   1b0a4:	str	r1, [sp, #116]	; 0x74
   1b0a8:	cmp	r9, r7
   1b0ac:	mov	r3, #1
   1b0b0:	mvnlt	r3, #0
   1b0b4:	mov	r4, r9
   1b0b8:	movlt	r4, r7
   1b0bc:	mov	r1, sl
   1b0c0:	mov	sl, r7
   1b0c4:	movlt	sl, r9
   1b0c8:	str	r1, [sp, #44]	; 0x2c
   1b0cc:	ldr	ip, [r1, #92]	; 0x5c
   1b0d0:	cmp	r5, #0
   1b0d4:	beq	1b11c <__assert_fail@plt+0x941c>
   1b0d8:	cmp	ip, #1
   1b0dc:	ldr	r2, [sp, #52]	; 0x34
   1b0e0:	beq	1b100 <__assert_fail@plt+0x9400>
   1b0e4:	ldr	r0, [sp, #28]
   1b0e8:	ldr	r0, [r0, #12]
   1b0ec:	and	r0, r0, #4194304	; 0x400000
   1b0f0:	orr	r0, r6, r0
   1b0f4:	clz	r0, r0
   1b0f8:	lsr	r0, r0, #5
   1b0fc:	lsl	r0, r0, #2
   1b100:	cmp	r6, #0
   1b104:	mov	r1, r6
   1b108:	movwne	r1, #1
   1b10c:	cmp	r9, r7
   1b110:	orrge	r1, r1, #2
   1b114:	orr	r0, r1, r0
   1b118:	b	1b124 <__assert_fail@plt+0x9424>
   1b11c:	mov	r0, #8
   1b120:	ldr	r2, [sp, #52]	; 0x34
   1b124:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b128:	cmp	r1, sl
   1b12c:	cmpge	r4, r1
   1b130:	blt	1b424 <__assert_fail@plt+0x9724>
   1b134:	sub	r1, fp, #32
   1b138:	cmp	r9, r7
   1b13c:	movwlt	r1, #0
   1b140:	str	r1, [sp, #24]
   1b144:	sub	lr, r0, #4
   1b148:	add	r9, sp, #56	; 0x38
   1b14c:	str	ip, [sp, #36]	; 0x24
   1b150:	ldr	r7, [sp, #40]	; 0x28
   1b154:	str	r3, [sp, #20]
   1b158:	str	lr, [sp, #16]
   1b15c:	cmp	lr, #4
   1b160:	bhi	1b210 <__assert_fail@plt+0x9510>
   1b164:	add	r0, pc, #0
   1b168:	ldr	pc, [r0, lr, lsl #2]
   1b16c:	andeq	fp, r1, r0, lsl #3
   1b170:	andeq	fp, r1, r0, lsl #3
   1b174:	andeq	fp, r1, r0, asr r2
   1b178:	andeq	fp, r1, r0, lsl #5
   1b17c:			; <UNDEFINED> instruction: 0x0001b2bc
   1b180:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b184:	cmp	r0, sl
   1b188:	blt	1b424 <__assert_fail@plt+0x9724>
   1b18c:	mov	r1, #0
   1b190:	cmp	r0, r2
   1b194:	ldrblt	r1, [r7, r0]
   1b198:	cmp	r6, #0
   1b19c:	ldrbne	r1, [r6, r1]
   1b1a0:	ldrb	r1, [r5, r1]
   1b1a4:	cmp	r1, #0
   1b1a8:	bne	1b2bc <__assert_fail@plt+0x95bc>
   1b1ac:	sub	r1, r0, #1
   1b1b0:	str	r1, [fp, #-32]	; 0xffffffe0
   1b1b4:	cmp	r0, sl
   1b1b8:	mov	r0, r1
   1b1bc:	bgt	1b18c <__assert_fail@plt+0x948c>
   1b1c0:	b	1b424 <__assert_fail@plt+0x9724>
   1b1c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b1c8:	add	r0, r0, r3
   1b1cc:	str	r0, [fp, #-32]	; 0xffffffe0
   1b1d0:	cmp	r0, sl
   1b1d4:	blt	1b424 <__assert_fail@plt+0x9724>
   1b1d8:	cmp	r0, r4
   1b1dc:	ble	1b210 <__assert_fail@plt+0x9510>
   1b1e0:	b	1b424 <__assert_fail@plt+0x9724>
   1b1e4:	mov	r0, r9
   1b1e8:	ldr	r2, [fp, #24]
   1b1ec:	bl	2193c <__assert_fail@plt+0xfc3c>
   1b1f0:	cmp	r0, #0
   1b1f4:	bne	1b674 <__assert_fail@plt+0x9974>
   1b1f8:	ldr	r0, [sp, #80]	; 0x50
   1b1fc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b200:	sub	r0, r1, r0
   1b204:	add	r9, sp, #56	; 0x38
   1b208:	ldr	r3, [sp, #20]
   1b20c:	b	1b228 <__assert_fail@plt+0x9528>
   1b210:	ldr	r0, [sp, #80]	; 0x50
   1b214:	ldr	r2, [sp, #88]	; 0x58
   1b218:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b21c:	sub	r0, r1, r0
   1b220:	cmp	r0, r2
   1b224:	bcs	1b1e4 <__assert_fail@plt+0x94e4>
   1b228:	mov	r1, #0
   1b22c:	ldr	r2, [sp, #84]	; 0x54
   1b230:	cmp	r0, r2
   1b234:	bcs	1b240 <__assert_fail@plt+0x9540>
   1b238:	ldr	r1, [sp, #60]	; 0x3c
   1b23c:	ldrb	r1, [r1, r0]
   1b240:	ldrb	r0, [r5, r1]
   1b244:	cmp	r0, #0
   1b248:	beq	1b1c4 <__assert_fail@plt+0x94c4>
   1b24c:	b	1b2bc <__assert_fail@plt+0x95bc>
   1b250:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b254:	cmp	r0, r4
   1b258:	bge	1b2b0 <__assert_fail@plt+0x95b0>
   1b25c:	ldrb	r1, [r7, r0]
   1b260:	ldrb	r1, [r5, r1]
   1b264:	cmp	r1, #0
   1b268:	bne	1b2b0 <__assert_fail@plt+0x95b0>
   1b26c:	add	r0, r0, #1
   1b270:	str	r0, [fp, #-32]	; 0xffffffe0
   1b274:	cmp	r0, r4
   1b278:	blt	1b25c <__assert_fail@plt+0x955c>
   1b27c:	b	1b2b0 <__assert_fail@plt+0x95b0>
   1b280:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b284:	cmp	r0, r4
   1b288:	bge	1b2b0 <__assert_fail@plt+0x95b0>
   1b28c:	ldrb	r1, [r7, r0]
   1b290:	ldrb	r1, [r6, r1]
   1b294:	ldrb	r1, [r5, r1]
   1b298:	cmp	r1, #0
   1b29c:	bne	1b2b0 <__assert_fail@plt+0x95b0>
   1b2a0:	add	r0, r0, #1
   1b2a4:	str	r0, [fp, #-32]	; 0xffffffe0
   1b2a8:	cmp	r0, r4
   1b2ac:	blt	1b28c <__assert_fail@plt+0x958c>
   1b2b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b2b4:	cmp	r1, r4
   1b2b8:	beq	1b404 <__assert_fail@plt+0x9704>
   1b2bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1b2c0:	mov	r0, r9
   1b2c4:	ldr	r2, [fp, #24]
   1b2c8:	bl	2193c <__assert_fail@plt+0xfc3c>
   1b2cc:	cmp	r0, #0
   1b2d0:	bne	1b674 <__assert_fail@plt+0x9974>
   1b2d4:	ldr	r0, [sp, #36]	; 0x24
   1b2d8:	cmp	r0, #1
   1b2dc:	add	r9, sp, #56	; 0x38
   1b2e0:	ldrne	r0, [sp, #84]	; 0x54
   1b2e4:	cmpne	r0, #0
   1b2e8:	bne	1b3f0 <__assert_fail@plt+0x96f0>
   1b2ec:	mov	r0, #0
   1b2f0:	str	r0, [sp, #164]	; 0xa4
   1b2f4:	str	r0, [sp, #176]	; 0xb0
   1b2f8:	str	r0, [sp, #160]	; 0xa0
   1b2fc:	mov	r0, r9
   1b300:	ldr	r1, [sp, #32]
   1b304:	ldr	r2, [sp, #24]
   1b308:	bl	21f74 <__assert_fail@plt+0x10274>
   1b30c:	cmn	r0, #1
   1b310:	beq	1b3bc <__assert_fail@plt+0x96bc>
   1b314:	mov	r2, r0
   1b318:	cmn	r0, #2
   1b31c:	beq	1b67c <__assert_fail@plt+0x997c>
   1b320:	str	r2, [sp, #148]	; 0x94
   1b324:	ldr	r9, [sp, #48]	; 0x30
   1b328:	cmp	r9, #2
   1b32c:	bcc	1b340 <__assert_fail@plt+0x9640>
   1b330:	ldr	r0, [sp, #28]
   1b334:	ldrb	r0, [r0, #28]
   1b338:	ands	r0, r0, #16
   1b33c:	beq	1b350 <__assert_fail@plt+0x9650>
   1b340:	ldr	r0, [sp, #44]	; 0x2c
   1b344:	ldr	r0, [r0, #76]	; 0x4c
   1b348:	cmp	r0, #0
   1b34c:	beq	1b364 <__assert_fail@plt+0x9664>
   1b350:	ldr	r0, [sp, #156]	; 0x9c
   1b354:	ldr	r1, [r0, r2, lsl #2]
   1b358:	add	r0, sp, #56	; 0x38
   1b35c:	bl	22310 <__assert_fail@plt+0x10610>
   1b360:	str	r0, [sp, #152]	; 0x98
   1b364:	cmp	r9, #2
   1b368:	bcc	1b38c <__assert_fail@plt+0x968c>
   1b36c:	ldr	r0, [sp, #28]
   1b370:	ldrb	r0, [r0, #28]
   1b374:	ands	r0, r0, #16
   1b378:	bne	1b38c <__assert_fail@plt+0x968c>
   1b37c:	ldr	r0, [sp, #44]	; 0x2c
   1b380:	ldrb	r0, [r0, #88]	; 0x58
   1b384:	tst	r0, #1
   1b388:	bne	1b39c <__assert_fail@plt+0x969c>
   1b38c:	ldr	r0, [sp, #44]	; 0x2c
   1b390:	ldr	r0, [r0, #76]	; 0x4c
   1b394:	cmp	r0, #0
   1b398:	beq	1b458 <__assert_fail@plt+0x9758>
   1b39c:	add	r0, sp, #56	; 0x38
   1b3a0:	bl	22384 <__assert_fail@plt+0x10684>
   1b3a4:	cmp	r0, #0
   1b3a8:	beq	1b458 <__assert_fail@plt+0x9758>
   1b3ac:	mov	r8, r0
   1b3b0:	cmp	r0, #1
   1b3b4:	add	r9, sp, #56	; 0x38
   1b3b8:	bne	1b428 <__assert_fail@plt+0x9728>
   1b3bc:	mov	r0, r9
   1b3c0:	bl	225a8 <__assert_fail@plt+0x108a8>
   1b3c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b3c8:	ldr	r3, [sp, #20]
   1b3cc:	add	r0, r0, r3
   1b3d0:	str	r0, [fp, #-32]	; 0xffffffe0
   1b3d4:	cmp	r0, sl
   1b3d8:	blt	1b424 <__assert_fail@plt+0x9724>
   1b3dc:	cmp	r4, r0
   1b3e0:	ldr	r2, [sp, #52]	; 0x34
   1b3e4:	ldr	lr, [sp, #16]
   1b3e8:	bge	1b15c <__assert_fail@plt+0x945c>
   1b3ec:	b	1b424 <__assert_fail@plt+0x9724>
   1b3f0:	ldr	r0, [sp, #64]	; 0x40
   1b3f4:	ldr	r0, [r0]
   1b3f8:	cmn	r0, #1
   1b3fc:	bne	1b2ec <__assert_fail@plt+0x95ec>
   1b400:	b	1b3c4 <__assert_fail@plt+0x96c4>
   1b404:	mov	r0, #0
   1b408:	cmp	r1, r2
   1b40c:	ldrblt	r0, [r7, r1]
   1b410:	cmp	r6, #0
   1b414:	ldrbne	r0, [r6, r0]
   1b418:	ldrb	r0, [r5, r0]
   1b41c:	cmp	r0, #0
   1b420:	bne	1b2bc <__assert_fail@plt+0x95bc>
   1b424:	mov	r8, #1
   1b428:	ldr	sl, [sp, #44]	; 0x2c
   1b42c:	ldr	r0, [sp, #156]	; 0x9c
   1b430:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1b434:	ldr	r0, [sl, #76]	; 0x4c
   1b438:	cmp	r0, #0
   1b43c:	addne	r0, sp, #56	; 0x38
   1b440:	blne	2289c <__assert_fail@plt+0x10b9c>
   1b444:	add	r0, sp, #56	; 0x38
   1b448:	bl	1beac <__assert_fail@plt+0xa1ac>
   1b44c:	mov	r0, r8
   1b450:	sub	sp, fp, #28
   1b454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b458:	ldr	r5, [sp, #48]	; 0x30
   1b45c:	cmp	r5, #0
   1b460:	beq	1b650 <__assert_fail@plt+0x9950>
   1b464:	cmp	r5, #1
   1b468:	ldr	sl, [sp, #44]	; 0x2c
   1b46c:	ldr	r4, [sp, #12]
   1b470:	ldr	r6, [fp, #16]
   1b474:	mov	r9, r6
   1b478:	ldr	r6, [fp, #20]
   1b47c:	beq	1b498 <__assert_fail@plt+0x9798>
   1b480:	mvn	r0, r4
   1b484:	add	r0, r0, r9
   1b488:	lsl	r2, r0, #3
   1b48c:	add	r0, r6, #8
   1b490:	mov	r1, #255	; 0xff
   1b494:	bl	11b5c <memset@plt>
   1b498:	mov	r0, #0
   1b49c:	ldr	r1, [sp, #148]	; 0x94
   1b4a0:	stm	r6, {r0, r1}
   1b4a4:	cmp	r5, #2
   1b4a8:	ldr	r0, [sp, #28]
   1b4ac:	bcc	1b4f8 <__assert_fail@plt+0x97f8>
   1b4b0:	ldrb	r1, [r0, #28]
   1b4b4:	ands	r1, r1, #16
   1b4b8:	bne	1b4f8 <__assert_fail@plt+0x97f8>
   1b4bc:	ldrb	r1, [sl, #88]	; 0x58
   1b4c0:	mov	r2, #0
   1b4c4:	tst	r1, #1
   1b4c8:	beq	1b4dc <__assert_fail@plt+0x97dc>
   1b4cc:	ldr	r1, [sl, #76]	; 0x4c
   1b4d0:	mov	r2, #0
   1b4d4:	cmp	r1, #0
   1b4d8:	movwgt	r2, #1
   1b4dc:	str	r2, [sp]
   1b4e0:	add	r1, sp, #56	; 0x38
   1b4e4:	ldr	r2, [sp, #48]	; 0x30
   1b4e8:	mov	r3, r6
   1b4ec:	bl	22658 <__assert_fail@plt+0x10958>
   1b4f0:	cmp	r0, #0
   1b4f4:	bne	1b66c <__assert_fail@plt+0x996c>
   1b4f8:	add	r0, r6, #4
   1b4fc:	add	r1, sp, #56	; 0x38
   1b500:	add	lr, r1, #32
   1b504:	ldrb	r2, [sp, #132]	; 0x84
   1b508:	mov	r3, r9
   1b50c:	ldr	r6, [sp, #48]	; 0x30
   1b510:	b	1b538 <__assert_fail@plt+0x9838>
   1b514:	ldmda	r0, {r1, r7}
   1b518:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1b51c:	add	r1, r1, r5
   1b520:	add	r7, r7, r5
   1b524:	stmda	r0, {r1, r7}
   1b528:	add	r0, r0, #8
   1b52c:	sub	r3, r3, #1
   1b530:	cmp	r4, r3
   1b534:	beq	1b5c4 <__assert_fail@plt+0x98c4>
   1b538:	ldr	r7, [r0, #-4]
   1b53c:	cmn	r7, #1
   1b540:	beq	1b528 <__assert_fail@plt+0x9828>
   1b544:	cmp	r2, #0
   1b548:	beq	1b514 <__assert_fail@plt+0x9814>
   1b54c:	ldr	ip, [sp, #68]	; 0x44
   1b550:	ldr	r5, [sp, #84]	; 0x54
   1b554:	cmp	r7, r5
   1b558:	mov	r1, lr
   1b55c:	addne	r1, ip, r7, lsl #2
   1b560:	ldr	r1, [r1]
   1b564:	str	r1, [r0, #-4]
   1b568:	ldr	r1, [r0]
   1b56c:	cmp	r1, r5
   1b570:	mov	r4, lr
   1b574:	addne	r4, ip, r1, lsl #2
   1b578:	ldr	r1, [r4]
   1b57c:	ldr	r4, [sp, #12]
   1b580:	str	r1, [r0]
   1b584:	b	1b514 <__assert_fail@plt+0x9814>
   1b588:	ldr	r1, [r3, #8]
   1b58c:	cmp	r1, #0
   1b590:	beq	1b5a0 <__assert_fail@plt+0x98a0>
   1b594:	ldrsb	r1, [r4, #28]
   1b598:	cmp	r1, #0
   1b59c:	bmi	1afac <__assert_fail@plt+0x92ac>
   1b5a0:	mov	r9, #0
   1b5a4:	ldr	r0, [sp, #36]	; 0x24
   1b5a8:	cmp	r0, #0
   1b5ac:	beq	1b660 <__assert_fail@plt+0x9960>
   1b5b0:	cmp	ip, #0
   1b5b4:	mov	r0, #0
   1b5b8:	str	r0, [sp, #36]	; 0x24
   1b5bc:	bne	1b44c <__assert_fail@plt+0x974c>
   1b5c0:	b	1afb0 <__assert_fail@plt+0x92b0>
   1b5c4:	cmp	r4, #0
   1b5c8:	ble	1b5e0 <__assert_fail@plt+0x98e0>
   1b5cc:	ldr	r0, [fp, #20]
   1b5d0:	add	r0, r0, r6, lsl #3
   1b5d4:	lsl	r2, r4, #3
   1b5d8:	mov	r1, #255	; 0xff
   1b5dc:	bl	11b5c <memset@plt>
   1b5e0:	ldr	r0, [sl, #132]	; 0x84
   1b5e4:	mov	r8, #0
   1b5e8:	cmp	r0, #0
   1b5ec:	beq	1b42c <__assert_fail@plt+0x972c>
   1b5f0:	ldr	r1, [sp, #48]	; 0x30
   1b5f4:	cmp	r1, #2
   1b5f8:	bcc	1b42c <__assert_fail@plt+0x972c>
   1b5fc:	mov	r6, r9
   1b600:	mvn	r1, r4
   1b604:	add	r1, r1, r9
   1b608:	mov	r2, #0
   1b60c:	ldr	r6, [fp, #20]
   1b610:	b	1b620 <__assert_fail@plt+0x9920>
   1b614:	add	r2, r2, #1
   1b618:	cmp	r1, r2
   1b61c:	beq	1b658 <__assert_fail@plt+0x9958>
   1b620:	ldr	r3, [r0, r2, lsl #2]
   1b624:	cmp	r2, r3
   1b628:	beq	1b614 <__assert_fail@plt+0x9914>
   1b62c:	add	r7, r6, r2, lsl #3
   1b630:	add	r3, r6, r3, lsl #3
   1b634:	ldr	r3, [r3, #8]
   1b638:	str	r3, [r7, #8]
   1b63c:	ldr	r3, [r0, r2, lsl #2]
   1b640:	add	r3, r6, r3, lsl #3
   1b644:	ldr	r3, [r3, #12]
   1b648:	str	r3, [r7, #12]
   1b64c:	b	1b614 <__assert_fail@plt+0x9914>
   1b650:	mov	r8, #0
   1b654:	b	1b428 <__assert_fail@plt+0x9728>
   1b658:	mov	r8, #0
   1b65c:	b	1b42c <__assert_fail@plt+0x972c>
   1b660:	mov	r0, #0
   1b664:	str	r0, [sp, #36]	; 0x24
   1b668:	b	1afb0 <__assert_fail@plt+0x92b0>
   1b66c:	mov	r8, r0
   1b670:	b	1b42c <__assert_fail@plt+0x972c>
   1b674:	mov	r8, r0
   1b678:	b	1b428 <__assert_fail@plt+0x9728>
   1b67c:	mov	r8, #12
   1b680:	b	1b428 <__assert_fail@plt+0x9728>
   1b684:	push	{fp, lr}
   1b688:	mov	fp, sp
   1b68c:	sub	sp, sp, #16
   1b690:	mov	ip, #1
   1b694:	str	ip, [sp, #12]
   1b698:	str	r2, [sp, #4]
   1b69c:	mov	ip, #0
   1b6a0:	str	ip, [sp]
   1b6a4:	ldr	ip, [fp, #8]
   1b6a8:	str	ip, [sp, #8]
   1b6ac:	bl	1b6b8 <__assert_fail@plt+0x99b8>
   1b6b0:	mov	sp, fp
   1b6b4:	pop	{fp, pc}
   1b6b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6bc:	add	fp, sp, #28
   1b6c0:	sub	sp, sp, #36	; 0x24
   1b6c4:	mvn	r7, #0
   1b6c8:	cmp	r3, #0
   1b6cc:	bmi	1b810 <__assert_fail@plt+0x9b10>
   1b6d0:	mov	r9, r3
   1b6d4:	mov	r6, r2
   1b6d8:	cmp	r3, r2
   1b6dc:	bgt	1b810 <__assert_fail@plt+0x9b10>
   1b6e0:	mov	r5, r0
   1b6e4:	str	r1, [sp, #28]
   1b6e8:	ldr	r0, [fp, #8]
   1b6ec:	add	r0, r0, r9
   1b6f0:	ldr	r4, [r5]
   1b6f4:	cmp	r0, r6
   1b6f8:	mov	r8, r6
   1b6fc:	bicle	r8, r0, r0, asr #31
   1b700:	movw	r0, #0
   1b704:	movt	r0, #0
   1b708:	movw	r1, #0
   1b70c:	movt	r1, #0
   1b710:	orrs	r0, r1, r0
   1b714:	str	r0, [sp, #32]
   1b718:	beq	1b724 <__assert_fail@plt+0x9a24>
   1b71c:	add	r0, r4, #136	; 0x88
   1b720:	bl	118f8 <pthread_mutex_lock@plt>
   1b724:	str	r4, [sp, #20]
   1b728:	ldr	r4, [fp, #16]
   1b72c:	ldrb	r0, [r5, #28]
   1b730:	ubfx	r1, r0, #5, #2
   1b734:	str	r1, [sp, #24]
   1b738:	cmp	r8, r9
   1b73c:	ble	1b758 <__assert_fail@plt+0x9a58>
   1b740:	tst	r0, #8
   1b744:	bne	1b758 <__assert_fail@plt+0x9a58>
   1b748:	ldr	r0, [r5, #16]
   1b74c:	cmp	r0, #0
   1b750:	movne	r0, r5
   1b754:	blne	1a660 <__assert_fail@plt+0x8960>
   1b758:	mov	r7, #1
   1b75c:	mov	sl, #0
   1b760:	cmp	r4, #0
   1b764:	beq	1b79c <__assert_fail@plt+0x9a9c>
   1b768:	ldrb	r0, [r5, #28]
   1b76c:	ands	r1, r0, #16
   1b770:	bne	1b79c <__assert_fail@plt+0x9a9c>
   1b774:	and	r0, r0, #6
   1b778:	cmp	r0, #4
   1b77c:	bne	1b790 <__assert_fail@plt+0x9a90>
   1b780:	ldr	r7, [r4]
   1b784:	ldr	r0, [r5, #24]
   1b788:	cmp	r7, r0
   1b78c:	bls	1b884 <__assert_fail@plt+0x9b84>
   1b790:	ldr	r0, [r5, #24]
   1b794:	add	r7, r0, #1
   1b798:	mov	sl, r4
   1b79c:	lsl	r0, r7, #3
   1b7a0:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1b7a4:	cmp	r0, #0
   1b7a8:	beq	1b87c <__assert_fail@plt+0x9b7c>
   1b7ac:	mov	r4, r0
   1b7b0:	ldr	r0, [fp, #12]
   1b7b4:	str	r8, [sp]
   1b7b8:	stmib	sp, {r0, r7}
   1b7bc:	str	r4, [sp, #12]
   1b7c0:	ldr	r0, [sp, #24]
   1b7c4:	str	r0, [sp, #16]
   1b7c8:	mov	r0, r5
   1b7cc:	ldr	r1, [sp, #28]
   1b7d0:	mov	r2, r6
   1b7d4:	mov	r3, r9
   1b7d8:	bl	1aedc <__assert_fail@plt+0x91dc>
   1b7dc:	cmp	r0, #0
   1b7e0:	beq	1b81c <__assert_fail@plt+0x9b1c>
   1b7e4:	mvn	r7, #1
   1b7e8:	cmp	r0, #1
   1b7ec:	mvneq	r7, #0
   1b7f0:	mov	r0, r4
   1b7f4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1b7f8:	ldr	r0, [sp, #32]
   1b7fc:	cmp	r0, #0
   1b800:	beq	1b810 <__assert_fail@plt+0x9b10>
   1b804:	ldr	r0, [sp, #20]
   1b808:	add	r0, r0, #136	; 0x88
   1b80c:	bl	11844 <pthread_mutex_unlock@plt>
   1b810:	mov	r0, r7
   1b814:	sub	sp, fp, #28
   1b818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b81c:	cmp	sl, #0
   1b820:	beq	1b854 <__assert_fail@plt+0x9b54>
   1b824:	ldrb	r0, [r5, #28]
   1b828:	ubfx	r3, r0, #1, #2
   1b82c:	mov	r0, sl
   1b830:	mov	r1, r4
   1b834:	mov	r2, r7
   1b838:	bl	216a0 <__assert_fail@plt+0xf9a0>
   1b83c:	ldrb	r1, [r5, #28]
   1b840:	and	r1, r1, #249	; 0xf9
   1b844:	bfi	r1, r0, #1, #2
   1b848:	strb	r1, [r5, #28]
   1b84c:	tst	r0, #3
   1b850:	beq	1b874 <__assert_fail@plt+0x9b74>
   1b854:	ldr	r0, [fp, #20]
   1b858:	cmp	r0, #0
   1b85c:	beq	1b86c <__assert_fail@plt+0x9b6c>
   1b860:	ldr	r0, [r4, #4]
   1b864:	sub	r7, r0, r9
   1b868:	b	1b7f0 <__assert_fail@plt+0x9af0>
   1b86c:	ldr	r7, [r4]
   1b870:	b	1b7f0 <__assert_fail@plt+0x9af0>
   1b874:	mvn	r7, #1
   1b878:	b	1b7f0 <__assert_fail@plt+0x9af0>
   1b87c:	mvn	r7, #1
   1b880:	b	1b7f8 <__assert_fail@plt+0x9af8>
   1b884:	cmp	r7, #1
   1b888:	bge	1b798 <__assert_fail@plt+0x9a98>
   1b88c:	mov	r7, #1
   1b890:	mov	sl, #0
   1b894:	b	1b79c <__assert_fail@plt+0x9a9c>
   1b898:	push	{fp, lr}
   1b89c:	mov	fp, sp
   1b8a0:	sub	sp, sp, #16
   1b8a4:	mov	ip, #0
   1b8a8:	str	ip, [sp, #12]
   1b8ac:	str	r2, [sp, #4]
   1b8b0:	ldr	ip, [fp, #12]
   1b8b4:	str	ip, [sp, #8]
   1b8b8:	ldr	ip, [fp, #8]
   1b8bc:	str	ip, [sp]
   1b8c0:	bl	1b6b8 <__assert_fail@plt+0x99b8>
   1b8c4:	mov	sp, fp
   1b8c8:	pop	{fp, pc}
   1b8cc:	push	{fp, lr}
   1b8d0:	mov	fp, sp
   1b8d4:	sub	sp, sp, #24
   1b8d8:	mov	ip, #1
   1b8dc:	str	ip, [sp, #20]
   1b8e0:	mov	ip, #0
   1b8e4:	str	ip, [sp, #8]
   1b8e8:	ldr	ip, [fp, #20]
   1b8ec:	str	ip, [sp, #16]
   1b8f0:	ldr	ip, [fp, #16]
   1b8f4:	str	ip, [sp, #12]
   1b8f8:	ldr	ip, [fp, #12]
   1b8fc:	str	ip, [sp, #4]
   1b900:	ldr	ip, [fp, #8]
   1b904:	str	ip, [sp]
   1b908:	bl	1b914 <__assert_fail@plt+0x9c14>
   1b90c:	mov	sp, fp
   1b910:	pop	{fp, pc}
   1b914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b918:	add	fp, sp, #28
   1b91c:	sub	sp, sp, #20
   1b920:	mov	r6, r2
   1b924:	mov	r8, r1
   1b928:	mov	r1, r0
   1b92c:	ldr	r4, [fp, #8]
   1b930:	orr	r0, r4, r2
   1b934:	ldr	r2, [fp, #24]
   1b938:	orrs	r0, r0, r2
   1b93c:	bmi	1b9f0 <__assert_fail@plt+0x9cf0>
   1b940:	adds	sl, r6, r4
   1b944:	bvs	1b9f0 <__assert_fail@plt+0x9cf0>
   1b948:	mov	r5, #0
   1b94c:	cmp	r4, #1
   1b950:	blt	1b9a4 <__assert_fail@plt+0x9ca4>
   1b954:	mov	r9, r3
   1b958:	cmp	r6, #1
   1b95c:	blt	1b9ac <__assert_fail@plt+0x9cac>
   1b960:	mov	r0, sl
   1b964:	mov	r5, r1
   1b968:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1b96c:	cmp	r0, #0
   1b970:	beq	1b9f0 <__assert_fail@plt+0x9cf0>
   1b974:	mov	r7, r0
   1b978:	mov	r1, r8
   1b97c:	mov	r2, r6
   1b980:	bl	11928 <memcpy@plt>
   1b984:	add	r0, r7, r6
   1b988:	mov	r1, r9
   1b98c:	mov	r2, r4
   1b990:	bl	11928 <memcpy@plt>
   1b994:	ldr	r2, [fp, #24]
   1b998:	mov	r1, r5
   1b99c:	mov	r5, r7
   1b9a0:	b	1b9b0 <__assert_fail@plt+0x9cb0>
   1b9a4:	mov	r7, r8
   1b9a8:	b	1b9b0 <__assert_fail@plt+0x9cb0>
   1b9ac:	mov	r7, r9
   1b9b0:	ldr	r0, [fp, #28]
   1b9b4:	add	r6, fp, #12
   1b9b8:	ldm	r6, {r3, r4, r6}
   1b9bc:	str	r4, [sp]
   1b9c0:	stmib	sp, {r2, r6}
   1b9c4:	str	r0, [sp, #12]
   1b9c8:	mov	r0, r1
   1b9cc:	mov	r1, r7
   1b9d0:	mov	r2, sl
   1b9d4:	bl	1b6b8 <__assert_fail@plt+0x99b8>
   1b9d8:	mov	r4, r0
   1b9dc:	mov	r0, r5
   1b9e0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1b9e4:	mov	r0, r4
   1b9e8:	sub	sp, fp, #28
   1b9ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9f0:	mvn	r0, #1
   1b9f4:	sub	sp, fp, #28
   1b9f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9fc:	push	{fp, lr}
   1ba00:	mov	fp, sp
   1ba04:	sub	sp, sp, #24
   1ba08:	mov	ip, #0
   1ba0c:	str	ip, [sp, #20]
   1ba10:	ldr	ip, [fp, #24]
   1ba14:	str	ip, [sp, #16]
   1ba18:	ldr	ip, [fp, #20]
   1ba1c:	str	ip, [sp, #12]
   1ba20:	ldr	ip, [fp, #16]
   1ba24:	str	ip, [sp, #8]
   1ba28:	ldr	ip, [fp, #12]
   1ba2c:	str	ip, [sp, #4]
   1ba30:	ldr	ip, [fp, #8]
   1ba34:	str	ip, [sp]
   1ba38:	bl	1b914 <__assert_fail@plt+0x9c14>
   1ba3c:	mov	sp, fp
   1ba40:	pop	{fp, pc}
   1ba44:	push	{fp, lr}
   1ba48:	mov	fp, sp
   1ba4c:	ldrb	ip, [r0, #28]
   1ba50:	bic	ip, ip, #6
   1ba54:	cmp	r2, #0
   1ba58:	beq	1ba70 <__assert_fail@plt+0x9d70>
   1ba5c:	ldr	lr, [fp, #8]
   1ba60:	orr	ip, ip, #2
   1ba64:	strb	ip, [r0, #28]
   1ba68:	stm	r1, {r2, r3, lr}
   1ba6c:	pop	{fp, pc}
   1ba70:	strb	ip, [r0, #28]
   1ba74:	mov	r0, #0
   1ba78:	str	r0, [r1]
   1ba7c:	str	r0, [r1, #4]
   1ba80:	str	r0, [r1, #8]
   1ba84:	pop	{fp, pc}
   1ba88:	ldr	r1, [r0, #4]
   1ba8c:	movw	r2, #255	; 0xff
   1ba90:	movt	r2, #4
   1ba94:	and	r1, r1, r2
   1ba98:	cmp	r1, #6
   1ba9c:	bne	1baa8 <__assert_fail@plt+0x9da8>
   1baa0:	ldr	r0, [r0]
   1baa4:	b	1bb18 <__assert_fail@plt+0x9e18>
   1baa8:	cmp	r1, #3
   1baac:	bxne	lr
   1bab0:	ldr	r0, [r0]
   1bab4:	b	1a1ec <__assert_fail@plt+0x84ec>
   1bab8:	push	{r4, sl, fp, lr}
   1babc:	add	fp, sp, #8
   1bac0:	mov	r4, r0
   1bac4:	ldr	r0, [r0, #24]
   1bac8:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bacc:	ldr	r0, [r4, #36]	; 0x24
   1bad0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bad4:	ldr	r0, [r4, #40]	; 0x28
   1bad8:	add	r1, r4, #4
   1badc:	cmp	r0, r1
   1bae0:	beq	1baf4 <__assert_fail@plt+0x9df4>
   1bae4:	ldr	r0, [r0, #8]
   1bae8:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1baec:	ldr	r0, [r4, #40]	; 0x28
   1baf0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1baf4:	ldr	r0, [r4, #12]
   1baf8:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bafc:	ldr	r0, [r4, #48]	; 0x30
   1bb00:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bb04:	ldr	r0, [r4, #44]	; 0x2c
   1bb08:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bb0c:	mov	r0, r4
   1bb10:	pop	{r4, sl, fp, lr}
   1bb14:	b	1a1ec <__assert_fail@plt+0x84ec>
   1bb18:	push	{r4, sl, fp, lr}
   1bb1c:	add	fp, sp, #8
   1bb20:	mov	r4, r0
   1bb24:	ldr	r0, [r0]
   1bb28:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bb2c:	ldr	r0, [r4, #4]
   1bb30:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bb34:	ldr	r0, [r4, #8]
   1bb38:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bb3c:	ldr	r0, [r4, #12]
   1bb40:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bb44:	mov	r0, r4
   1bb48:	pop	{r4, sl, fp, lr}
   1bb4c:	b	1a1ec <__assert_fail@plt+0x84ec>
   1bb50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bb54:	add	fp, sp, #24
   1bb58:	mov	r5, r1
   1bb5c:	mov	r9, r0
   1bb60:	mov	r1, #0
   1bb64:	mov	r2, #160	; 0xa0
   1bb68:	bl	11b5c <memset@plt>
   1bb6c:	mov	r0, #31
   1bb70:	str	r0, [r9, #64]	; 0x40
   1bb74:	movw	r0, #43689	; 0xaaa9
   1bb78:	movt	r0, #2730	; 0xaaa
   1bb7c:	cmp	r5, r0
   1bb80:	bhi	1bd04 <__assert_fail@plt+0xa004>
   1bb84:	add	r0, r5, #1
   1bb88:	str	r0, [r9, #4]
   1bb8c:	lsl	r0, r0, #3
   1bb90:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1bb94:	str	r0, [r9]
   1bb98:	mov	r0, #1
   1bb9c:	mov	r6, r0
   1bba0:	lsl	r0, r0, #1
   1bba4:	cmp	r6, r5
   1bba8:	bls	1bb9c <__assert_fail@plt+0x9e9c>
   1bbac:	mov	r0, #12
   1bbb0:	mov	r1, r6
   1bbb4:	bl	19f4c <__assert_fail@plt+0x824c>
   1bbb8:	sub	r1, r6, #1
   1bbbc:	str	r1, [r9, #68]	; 0x44
   1bbc0:	str	r0, [r9, #32]
   1bbc4:	bl	119e8 <__ctype_get_mb_cur_max@plt>
   1bbc8:	str	r0, [r9, #92]	; 0x5c
   1bbcc:	mov	r0, #14
   1bbd0:	bl	11c10 <nl_langinfo@plt>
   1bbd4:	ldrb	r1, [r0]
   1bbd8:	orr	r1, r1, #32
   1bbdc:	cmp	r1, #117	; 0x75
   1bbe0:	bne	1bc30 <__assert_fail@plt+0x9f30>
   1bbe4:	ldrb	r1, [r0, #1]
   1bbe8:	orr	r1, r1, #32
   1bbec:	cmp	r1, #116	; 0x74
   1bbf0:	bne	1bc30 <__assert_fail@plt+0x9f30>
   1bbf4:	ldrb	r1, [r0, #2]
   1bbf8:	orr	r1, r1, #32
   1bbfc:	cmp	r1, #102	; 0x66
   1bc00:	bne	1bc30 <__assert_fail@plt+0x9f30>
   1bc04:	ldrb	r1, [r0, #3]!
   1bc08:	cmp	r1, #45	; 0x2d
   1bc0c:	addeq	r0, r0, #1
   1bc10:	movw	r1, #44956	; 0xaf9c
   1bc14:	movt	r1, #2
   1bc18:	bl	11898 <strcmp@plt>
   1bc1c:	cmp	r0, #0
   1bc20:	bne	1bc30 <__assert_fail@plt+0x9f30>
   1bc24:	ldrb	r0, [r9, #88]	; 0x58
   1bc28:	orr	r0, r0, #4
   1bc2c:	strb	r0, [r9, #88]	; 0x58
   1bc30:	ldrb	r0, [r9, #88]	; 0x58
   1bc34:	and	r1, r0, #247	; 0xf7
   1bc38:	strb	r1, [r9, #88]	; 0x58
   1bc3c:	ldr	r1, [r9, #92]	; 0x5c
   1bc40:	cmp	r1, #2
   1bc44:	blt	1bce8 <__assert_fail@plt+0x9fe8>
   1bc48:	tst	r0, #4
   1bc4c:	bne	1bcdc <__assert_fail@plt+0x9fdc>
   1bc50:	mov	r8, #1
   1bc54:	mov	r0, #32
   1bc58:	mov	r1, #1
   1bc5c:	bl	19f4c <__assert_fail@plt+0x824c>
   1bc60:	str	r0, [r9, #60]	; 0x3c
   1bc64:	cmp	r0, #0
   1bc68:	beq	1bd04 <__assert_fail@plt+0xa004>
   1bc6c:	mov	r7, #0
   1bc70:	mov	r6, #0
   1bc74:	b	1bc88 <__assert_fail@plt+0x9f88>
   1bc78:	add	r7, r7, r4
   1bc7c:	add	r6, r6, #1
   1bc80:	cmp	r6, #8
   1bc84:	beq	1bce8 <__assert_fail@plt+0x9fe8>
   1bc88:	mov	r4, #0
   1bc8c:	b	1bc9c <__assert_fail@plt+0x9f9c>
   1bc90:	add	r4, r4, #1
   1bc94:	cmp	r4, #32
   1bc98:	beq	1bc78 <__assert_fail@plt+0x9f78>
   1bc9c:	add	r5, r7, r4
   1bca0:	mov	r0, r5
   1bca4:	bl	11b74 <btowc@plt>
   1bca8:	cmn	r0, #1
   1bcac:	beq	1bcc0 <__assert_fail@plt+0x9fc0>
   1bcb0:	ldr	r1, [r9, #60]	; 0x3c
   1bcb4:	ldr	r2, [r1, r6, lsl #2]
   1bcb8:	orr	r2, r2, r8, lsl r4
   1bcbc:	str	r2, [r1, r6, lsl #2]
   1bcc0:	cmp	r5, #127	; 0x7f
   1bcc4:	bhi	1bc90 <__assert_fail@plt+0x9f90>
   1bcc8:	cmp	r5, r0
   1bccc:	ldrbne	r0, [r9, #88]	; 0x58
   1bcd0:	orrne	r0, r0, #8
   1bcd4:	strbne	r0, [r9, #88]	; 0x58
   1bcd8:	b	1bc90 <__assert_fail@plt+0x9f90>
   1bcdc:	movw	r0, #44908	; 0xaf6c
   1bce0:	movt	r0, #2
   1bce4:	str	r0, [r9, #60]	; 0x3c
   1bce8:	ldr	r0, [r9]
   1bcec:	cmp	r0, #0
   1bcf0:	ldrne	r1, [r9, #32]
   1bcf4:	movne	r0, #0
   1bcf8:	cmpne	r1, #0
   1bcfc:	moveq	r0, #12
   1bd00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bd04:	mov	r0, #12
   1bd08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bd0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bd10:	add	fp, sp, #24
   1bd14:	sub	sp, sp, #8
   1bd18:	mov	r8, r3
   1bd1c:	mov	r5, r2
   1bd20:	mov	r7, r1
   1bd24:	mov	r4, r0
   1bd28:	vmov.i32	q8, #0	; 0x00000000
   1bd2c:	mov	r0, #80	; 0x50
   1bd30:	mov	r1, r4
   1bd34:	vst1.32	{d16-d17}, [r1], r0
   1bd38:	mov	r0, #0
   1bd3c:	str	r0, [r1]
   1bd40:	add	r0, r4, #64	; 0x40
   1bd44:	vst1.32	{d16-d17}, [r0]
   1bd48:	add	r0, r4, #48	; 0x30
   1bd4c:	vst1.32	{d16-d17}, [r0]
   1bd50:	add	r0, r4, #32
   1bd54:	vst1.32	{d16-d17}, [r0]
   1bd58:	add	r0, r4, #16
   1bd5c:	vst1.32	{d16-d17}, [r0]
   1bd60:	ldr	r6, [fp, #12]
   1bd64:	str	r6, [sp, #4]
   1bd68:	ldr	r9, [fp, #8]
   1bd6c:	str	r9, [sp]
   1bd70:	mov	r0, r7
   1bd74:	mov	r1, r2
   1bd78:	mov	r2, r4
   1bd7c:	bl	1c564 <__assert_fail@plt+0xa864>
   1bd80:	cmp	r5, #1
   1bd84:	blt	1bd9c <__assert_fail@plt+0xa09c>
   1bd88:	add	r1, r5, #1
   1bd8c:	mov	r0, r4
   1bd90:	bl	1c5bc <__assert_fail@plt+0xa8bc>
   1bd94:	cmp	r0, #0
   1bd98:	bne	1be54 <__assert_fail@plt+0xa154>
   1bd9c:	ldrb	r0, [r4, #75]	; 0x4b
   1bda0:	cmp	r0, #0
   1bda4:	ldrne	r7, [r4, #4]
   1bda8:	str	r7, [r4, #4]
   1bdac:	ldr	r0, [r6, #92]	; 0x5c
   1bdb0:	cmp	r9, #0
   1bdb4:	beq	1be10 <__assert_fail@plt+0xa110>
   1bdb8:	cmp	r0, #2
   1bdbc:	blt	1be24 <__assert_fail@plt+0xa124>
   1bdc0:	mov	r0, r4
   1bdc4:	bl	1c660 <__assert_fail@plt+0xa960>
   1bdc8:	cmp	r0, #0
   1bdcc:	bne	1be54 <__assert_fail@plt+0xa154>
   1bdd0:	ldr	r1, [r4, #32]
   1bdd4:	mov	r0, #0
   1bdd8:	cmp	r1, r5
   1bddc:	bge	1be54 <__assert_fail@plt+0xa154>
   1bde0:	ldr	r2, [r4, #28]
   1bde4:	ldr	r1, [r4, #36]	; 0x24
   1bde8:	ldr	r3, [r6, #92]	; 0x5c
   1bdec:	add	r2, r3, r2
   1bdf0:	cmp	r1, r2
   1bdf4:	bgt	1be54 <__assert_fail@plt+0xa154>
   1bdf8:	lsl	r1, r1, #1
   1bdfc:	mov	r0, r4
   1be00:	bl	1c5bc <__assert_fail@plt+0xa8bc>
   1be04:	cmp	r0, #0
   1be08:	beq	1bdc0 <__assert_fail@plt+0xa0c0>
   1be0c:	b	1be54 <__assert_fail@plt+0xa154>
   1be10:	cmp	r0, #2
   1be14:	blt	1be30 <__assert_fail@plt+0xa130>
   1be18:	mov	r0, r4
   1be1c:	bl	1cc70 <__assert_fail@plt+0xaf70>
   1be20:	b	1be50 <__assert_fail@plt+0xa150>
   1be24:	mov	r0, r4
   1be28:	bl	1cbfc <__assert_fail@plt+0xaefc>
   1be2c:	b	1be50 <__assert_fail@plt+0xa150>
   1be30:	cmp	r8, #0
   1be34:	beq	1be44 <__assert_fail@plt+0xa144>
   1be38:	mov	r0, r4
   1be3c:	bl	1ce2c <__assert_fail@plt+0xb12c>
   1be40:	b	1be50 <__assert_fail@plt+0xa150>
   1be44:	ldr	r0, [r4, #36]	; 0x24
   1be48:	str	r0, [r4, #28]
   1be4c:	str	r0, [r4, #32]
   1be50:	mov	r0, #0
   1be54:	sub	sp, fp, #24
   1be58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1be5c:	push	{r4, r5, fp, lr}
   1be60:	add	fp, sp, #8
   1be64:	ldr	r4, [r0]
   1be68:	ldr	r0, [r4, #56]	; 0x38
   1be6c:	cmp	r0, #0
   1be70:	beq	1be88 <__assert_fail@plt+0xa188>
   1be74:	ldr	r5, [r0]
   1be78:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1be7c:	cmp	r5, #0
   1be80:	mov	r0, r5
   1be84:	bne	1be74 <__assert_fail@plt+0xa174>
   1be88:	mov	r0, #31
   1be8c:	str	r0, [r4, #64]	; 0x40
   1be90:	mov	r5, #0
   1be94:	str	r5, [r4, #52]	; 0x34
   1be98:	str	r5, [r4, #56]	; 0x38
   1be9c:	ldr	r0, [r4, #16]
   1bea0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bea4:	str	r5, [r4, #16]
   1bea8:	pop	{r4, r5, fp, pc}
   1beac:	push	{r4, sl, fp, lr}
   1beb0:	add	fp, sp, #8
   1beb4:	mov	r4, r0
   1beb8:	ldr	r0, [r0, #8]
   1bebc:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bec0:	ldr	r0, [r4, #12]
   1bec4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1bec8:	ldrb	r0, [r4, #75]	; 0x4b
   1becc:	cmp	r0, #0
   1bed0:	popeq	{r4, sl, fp, pc}
   1bed4:	ldr	r0, [r4, #4]
   1bed8:	pop	{r4, sl, fp, lr}
   1bedc:	b	1a1ec <__assert_fail@plt+0x84ec>
   1bee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bee4:	add	fp, sp, #28
   1bee8:	sub	sp, sp, #20
   1beec:	mov	r8, r3
   1bef0:	mov	r4, r2
   1bef4:	mov	r7, r1
   1bef8:	mov	r5, r0
   1befc:	ldr	r9, [r1]
   1bf00:	str	r2, [r9, #128]	; 0x80
   1bf04:	orr	r2, r2, #8388608	; 0x800000
   1bf08:	add	sl, sp, #12
   1bf0c:	mov	r0, sl
   1bf10:	mov	r1, r5
   1bf14:	bl	1ce84 <__assert_fail@plt+0xb184>
   1bf18:	mov	r6, #0
   1bf1c:	stm	sp, {r6, r8}
   1bf20:	mov	r0, r5
   1bf24:	mov	r1, r7
   1bf28:	mov	r2, sl
   1bf2c:	mov	r3, r4
   1bf30:	bl	1cea4 <__assert_fail@plt+0xb1a4>
   1bf34:	mov	r7, r0
   1bf38:	cmp	r0, #0
   1bf3c:	bne	1bf4c <__assert_fail@plt+0xa24c>
   1bf40:	ldr	r0, [r8]
   1bf44:	cmp	r0, #0
   1bf48:	bne	1bf98 <__assert_fail@plt+0xa298>
   1bf4c:	mov	r0, r9
   1bf50:	mov	r1, #0
   1bf54:	mov	r2, #0
   1bf58:	mov	r3, #2
   1bf5c:	bl	1d00c <__assert_fail@plt+0xb30c>
   1bf60:	mov	r4, r0
   1bf64:	cmp	r7, #0
   1bf68:	beq	1bf88 <__assert_fail@plt+0xa288>
   1bf6c:	mov	r0, r9
   1bf70:	mov	r1, r7
   1bf74:	mov	r2, r4
   1bf78:	mov	r3, #16
   1bf7c:	bl	1d00c <__assert_fail@plt+0xb30c>
   1bf80:	mov	r6, r0
   1bf84:	b	1bf8c <__assert_fail@plt+0xa28c>
   1bf88:	mov	r6, r4
   1bf8c:	cmp	r4, #0
   1bf90:	cmpne	r6, #0
   1bf94:	beq	1bfa4 <__assert_fail@plt+0xa2a4>
   1bf98:	mov	r0, r6
   1bf9c:	sub	sp, fp, #28
   1bfa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfa4:	mov	r0, #12
   1bfa8:	str	r0, [r8]
   1bfac:	mov	r6, #0
   1bfb0:	b	1bf98 <__assert_fail@plt+0xa298>
   1bfb4:	push	{r4, r5, r6, r7, fp, lr}
   1bfb8:	add	fp, sp, #16
   1bfbc:	mov	r6, r0
   1bfc0:	ldr	r4, [r0]
   1bfc4:	ldr	r0, [r4, #4]
   1bfc8:	lsl	r0, r0, #2
   1bfcc:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1bfd0:	str	r0, [r4, #12]
   1bfd4:	ldr	r0, [r4, #4]
   1bfd8:	lsl	r0, r0, #2
   1bfdc:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1bfe0:	str	r0, [r4, #16]
   1bfe4:	ldr	r0, [r4, #4]
   1bfe8:	add	r0, r0, r0, lsl #1
   1bfec:	lsl	r0, r0, #2
   1bff0:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1bff4:	str	r0, [r4, #20]
   1bff8:	ldr	r0, [r4, #4]
   1bffc:	add	r0, r0, r0, lsl #1
   1c000:	lsl	r0, r0, #2
   1c004:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1c008:	str	r0, [r4, #24]
   1c00c:	ldr	r1, [r4, #12]
   1c010:	mov	r7, #12
   1c014:	cmp	r1, #0
   1c018:	ldrne	r1, [r4, #16]
   1c01c:	cmpne	r1, #0
   1c020:	beq	1c034 <__assert_fail@plt+0xa334>
   1c024:	cmp	r0, #0
   1c028:	ldrne	r0, [r4, #20]
   1c02c:	cmpne	r0, #0
   1c030:	bne	1c03c <__assert_fail@plt+0xa33c>
   1c034:	mov	r0, r7
   1c038:	pop	{r4, r5, r6, r7, fp, pc}
   1c03c:	ldr	r0, [r6, #24]
   1c040:	lsl	r0, r0, #2
   1c044:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1c048:	str	r0, [r4, #132]	; 0x84
   1c04c:	cmp	r0, #0
   1c050:	beq	1c0f4 <__assert_fail@plt+0xa3f4>
   1c054:	ldr	r0, [r6, #24]
   1c058:	cmp	r0, #0
   1c05c:	beq	1c07c <__assert_fail@plt+0xa37c>
   1c060:	ldr	r0, [r4, #132]	; 0x84
   1c064:	mov	r1, #0
   1c068:	str	r1, [r0, r1, lsl #2]
   1c06c:	add	r1, r1, #1
   1c070:	ldr	r2, [r6, #24]
   1c074:	cmp	r1, r2
   1c078:	bcc	1c068 <__assert_fail@plt+0xa368>
   1c07c:	ldr	r0, [r4, #52]	; 0x34
   1c080:	movw	r1, #65444	; 0xffa4
   1c084:	movt	r1, #1
   1c088:	mov	r2, r4
   1c08c:	bl	1ff24 <__assert_fail@plt+0xe224>
   1c090:	ldr	r1, [r6, #24]
   1c094:	mov	r0, #0
   1c098:	cmp	r1, #0
   1c09c:	beq	1c0d8 <__assert_fail@plt+0xa3d8>
   1c0a0:	ldr	r2, [r4, #132]	; 0x84
   1c0a4:	ldr	r3, [r2]
   1c0a8:	cmp	r3, #0
   1c0ac:	bne	1c0dc <__assert_fail@plt+0xa3dc>
   1c0b0:	mov	r3, #1
   1c0b4:	mov	r0, r3
   1c0b8:	ldr	r1, [r6, #24]
   1c0bc:	cmp	r3, r1
   1c0c0:	bcs	1c0dc <__assert_fail@plt+0xa3dc>
   1c0c4:	ldr	r5, [r2, r0, lsl #2]
   1c0c8:	add	r3, r0, #1
   1c0cc:	cmp	r0, r5
   1c0d0:	beq	1c0b4 <__assert_fail@plt+0xa3b4>
   1c0d4:	b	1c0dc <__assert_fail@plt+0xa3dc>
   1c0d8:	mov	r1, #0
   1c0dc:	cmp	r0, r1
   1c0e0:	bne	1c0f4 <__assert_fail@plt+0xa3f4>
   1c0e4:	ldr	r0, [r4, #132]	; 0x84
   1c0e8:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1c0ec:	mov	r0, #0
   1c0f0:	str	r0, [r4, #132]	; 0x84
   1c0f4:	ldr	r0, [r4, #52]	; 0x34
   1c0f8:	movw	r1, #60	; 0x3c
   1c0fc:	movt	r1, #2
   1c100:	mov	r2, r6
   1c104:	bl	1da50 <__assert_fail@plt+0xbd50>
   1c108:	cmp	r0, #0
   1c10c:	bne	1c1cc <__assert_fail@plt+0xa4cc>
   1c110:	ldr	r0, [r4, #52]	; 0x34
   1c114:	movw	r1, #196	; 0xc4
   1c118:	movt	r1, #2
   1c11c:	mov	r2, r4
   1c120:	bl	1da50 <__assert_fail@plt+0xbd50>
   1c124:	cmp	r0, #0
   1c128:	bne	1c1cc <__assert_fail@plt+0xa4cc>
   1c12c:	ldr	r0, [r4, #52]	; 0x34
   1c130:	movw	r1, #340	; 0x154
   1c134:	movt	r1, #2
   1c138:	mov	r2, r4
   1c13c:	bl	1ff24 <__assert_fail@plt+0xe224>
   1c140:	ldr	r0, [r4, #52]	; 0x34
   1c144:	movw	r1, #440	; 0x1b8
   1c148:	movt	r1, #2
   1c14c:	mov	r2, r4
   1c150:	bl	1ff24 <__assert_fail@plt+0xe224>
   1c154:	cmp	r0, #0
   1c158:	bne	1c1cc <__assert_fail@plt+0xa4cc>
   1c15c:	mov	r0, r4
   1c160:	bl	202d8 <__assert_fail@plt+0xe5d8>
   1c164:	cmp	r0, #0
   1c168:	bne	1c1cc <__assert_fail@plt+0xa4cc>
   1c16c:	ldrb	r0, [r6, #28]
   1c170:	tst	r0, #16
   1c174:	bne	1c190 <__assert_fail@plt+0xa490>
   1c178:	ldr	r0, [r6, #24]
   1c17c:	cmp	r0, #0
   1c180:	beq	1c190 <__assert_fail@plt+0xa490>
   1c184:	ldrb	r0, [r4, #88]	; 0x58
   1c188:	tst	r0, #1
   1c18c:	bne	1c19c <__assert_fail@plt+0xa49c>
   1c190:	ldr	r0, [r4, #76]	; 0x4c
   1c194:	cmp	r0, #0
   1c198:	beq	1c1c4 <__assert_fail@plt+0xa4c4>
   1c19c:	ldr	r0, [r4, #8]
   1c1a0:	add	r0, r0, r0, lsl #1
   1c1a4:	lsl	r0, r0, #2
   1c1a8:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1c1ac:	str	r0, [r4, #28]
   1c1b0:	cmp	r0, #0
   1c1b4:	beq	1c034 <__assert_fail@plt+0xa334>
   1c1b8:	mov	r0, r4
   1c1bc:	pop	{r4, r5, r6, r7, fp, lr}
   1c1c0:	b	2038c <__assert_fail@plt+0xe68c>
   1c1c4:	mov	r7, #0
   1c1c8:	mov	r0, r7
   1c1cc:	pop	{r4, r5, r6, r7, fp, pc}
   1c1d0:	push	{r4, r5, r6, r7, fp, lr}
   1c1d4:	add	fp, sp, #16
   1c1d8:	ldr	r1, [r0, #8]
   1c1dc:	cmp	r1, #0
   1c1e0:	beq	1c200 <__assert_fail@plt+0xa500>
   1c1e4:	ldr	r3, [r0]
   1c1e8:	mov	r5, #0
   1c1ec:	mov	ip, #1
   1c1f0:	mov	lr, #139	; 0x8b
   1c1f4:	mov	r2, #0
   1c1f8:	mov	r4, #0
   1c1fc:	b	1c230 <__assert_fail@plt+0xa530>
   1c200:	mov	r2, #0
   1c204:	mov	r5, #0
   1c208:	b	1c2cc <__assert_fail@plt+0xa5cc>
   1c20c:	ldrsb	r1, [r1]
   1c210:	cmp	r1, #0
   1c214:	mov	r1, #0
   1c218:	movwmi	r1, #1
   1c21c:	orr	r2, r2, r1
   1c220:	ldr	r1, [r0, #8]
   1c224:	add	r4, r4, #1
   1c228:	cmp	r4, r1
   1c22c:	bcs	1c2cc <__assert_fail@plt+0xa5cc>
   1c230:	add	r1, r3, r4, lsl #3
   1c234:	ldrb	r6, [r1, #4]
   1c238:	sub	r6, r6, #1
   1c23c:	cmp	r6, #11
   1c240:	bhi	1c370 <__assert_fail@plt+0xa670>
   1c244:	add	r7, pc, #0
   1c248:	ldr	pc, [r7, r6, lsl #2]
   1c24c:	andeq	ip, r1, ip, lsl #4
   1c250:	andeq	ip, r1, r0, lsr #4
   1c254:	andeq	ip, r1, ip, ror r2
   1c258:	andeq	ip, r1, r0, lsr #4
   1c25c:	andeq	ip, r1, r4, asr #5
   1c260:	andeq	ip, r1, ip, ror #6
   1c264:	andeq	ip, r1, r0, ror r3
   1c268:	andeq	ip, r1, r0, lsr #4
   1c26c:	andeq	ip, r1, r0, lsr #4
   1c270:	andeq	ip, r1, r0, lsr #4
   1c274:	andeq	ip, r1, r0, lsr #4
   1c278:	andeq	ip, r1, r4, lsr #5
   1c27c:	ldr	r1, [r3, r4, lsl #3]
   1c280:	add	r1, r1, #16
   1c284:	mov	r6, #0
   1c288:	ldr	r7, [r1, r6, lsl #2]
   1c28c:	cmp	r7, #0
   1c290:	bne	1c36c <__assert_fail@plt+0xa66c>
   1c294:	add	r6, r6, #1
   1c298:	cmp	r6, #4
   1c29c:	bne	1c288 <__assert_fail@plt+0xa588>
   1c2a0:	b	1c220 <__assert_fail@plt+0xa520>
   1c2a4:	ldr	r1, [r3, r4, lsl #3]
   1c2a8:	sub	r1, r1, #16
   1c2ac:	ror	r1, r1, #4
   1c2b0:	cmp	r1, #7
   1c2b4:	bhi	1c36c <__assert_fail@plt+0xa66c>
   1c2b8:	tst	lr, ip, lsl r1
   1c2bc:	bne	1c220 <__assert_fail@plt+0xa520>
   1c2c0:	b	1c36c <__assert_fail@plt+0xa66c>
   1c2c4:	mov	r5, #1
   1c2c8:	b	1c220 <__assert_fail@plt+0xa520>
   1c2cc:	tst	r2, #1
   1c2d0:	tsteq	r5, #1
   1c2d4:	beq	1c33c <__assert_fail@plt+0xa63c>
   1c2d8:	ldr	r1, [r0, #8]
   1c2dc:	cmp	r1, #0
   1c2e0:	beq	1c33c <__assert_fail@plt+0xa63c>
   1c2e4:	mov	r2, #0
   1c2e8:	mov	r3, #7
   1c2ec:	b	1c308 <__assert_fail@plt+0xa608>
   1c2f0:	bfi	r1, r3, #0, #8
   1c2f4:	str	r1, [r4, #4]
   1c2f8:	ldr	r1, [r0, #8]
   1c2fc:	add	r2, r2, #1
   1c300:	cmp	r2, r1
   1c304:	bcs	1c33c <__assert_fail@plt+0xa63c>
   1c308:	ldr	r1, [r0]
   1c30c:	add	r4, r1, r2, lsl #3
   1c310:	ldr	r1, [r4, #4]
   1c314:	uxtb	r6, r1
   1c318:	cmp	r6, #5
   1c31c:	beq	1c2f0 <__assert_fail@plt+0xa5f0>
   1c320:	cmp	r6, #1
   1c324:	bne	1c2f8 <__assert_fail@plt+0xa5f8>
   1c328:	ldrsb	r7, [r4]
   1c32c:	cmn	r7, #1
   1c330:	bgt	1c2f8 <__assert_fail@plt+0xa5f8>
   1c334:	bic	r1, r1, #2097152	; 0x200000
   1c338:	b	1c2f4 <__assert_fail@plt+0xa5f4>
   1c33c:	mov	r1, #1
   1c340:	str	r1, [r0, #92]	; 0x5c
   1c344:	ldr	r1, [r0, #76]	; 0x4c
   1c348:	mov	r2, #0
   1c34c:	cmp	r1, #0
   1c350:	movwgt	r2, #1
   1c354:	orr	r1, r5, r2
   1c358:	and	r1, r1, #1
   1c35c:	ldrb	r2, [r0, #88]	; 0x58
   1c360:	and	r2, r2, #249	; 0xf9
   1c364:	orr	r1, r2, r1, lsl #1
   1c368:	strb	r1, [r0, #88]	; 0x58
   1c36c:	pop	{r4, r5, r6, r7, fp, pc}
   1c370:	bl	11cc4 <abort@plt>
   1c374:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c378:	add	fp, sp, #24
   1c37c:	sub	sp, sp, #16
   1c380:	mov	r9, r0
   1c384:	ldr	r0, [r0, #24]
   1c388:	ldr	r1, [r9, #52]	; 0x34
   1c38c:	ldr	r1, [r1, #12]
   1c390:	ldr	r1, [r1, #28]
   1c394:	str	r1, [r9, #72]	; 0x48
   1c398:	add	r1, r1, r1, lsl #1
   1c39c:	add	r1, r0, r1, lsl #2
   1c3a0:	mov	r0, sp
   1c3a4:	bl	210b8 <__assert_fail@plt+0xf3b8>
   1c3a8:	str	r0, [sp, #12]
   1c3ac:	cmp	r0, #0
   1c3b0:	bne	1c494 <__assert_fail@plt+0xa794>
   1c3b4:	ldr	r0, [r9, #76]	; 0x4c
   1c3b8:	cmp	r0, #1
   1c3bc:	blt	1c49c <__assert_fail@plt+0xa79c>
   1c3c0:	ldr	r0, [sp, #4]
   1c3c4:	cmp	r0, #1
   1c3c8:	blt	1c49c <__assert_fail@plt+0xa79c>
   1c3cc:	mov	r7, #0
   1c3d0:	mov	r8, sp
   1c3d4:	b	1c3e8 <__assert_fail@plt+0xa6e8>
   1c3d8:	add	r7, r7, #1
   1c3dc:	ldr	r0, [sp, #4]
   1c3e0:	cmp	r7, r0
   1c3e4:	bge	1c49c <__assert_fail@plt+0xa79c>
   1c3e8:	ldr	r2, [sp, #8]
   1c3ec:	ldr	r1, [r2, r7, lsl #2]
   1c3f0:	ldr	r3, [r9]
   1c3f4:	add	r6, r3, r1, lsl #3
   1c3f8:	ldrb	r6, [r6, #4]
   1c3fc:	cmp	r6, #4
   1c400:	bne	1c3d8 <__assert_fail@plt+0xa6d8>
   1c404:	mov	r6, #0
   1c408:	cmp	r0, #1
   1c40c:	bge	1c420 <__assert_fail@plt+0xa720>
   1c410:	b	1c444 <__assert_fail@plt+0xa744>
   1c414:	add	r6, r6, #1
   1c418:	cmp	r0, r6
   1c41c:	beq	1c444 <__assert_fail@plt+0xa744>
   1c420:	ldr	r5, [r2, r6, lsl #2]
   1c424:	add	r4, r3, r5, lsl #3
   1c428:	ldrb	r4, [r4, #4]
   1c42c:	cmp	r4, #9
   1c430:	bne	1c414 <__assert_fail@plt+0xa714>
   1c434:	ldr	r4, [r3, r1, lsl #3]
   1c438:	ldr	r5, [r3, r5, lsl #3]
   1c43c:	cmp	r5, r4
   1c440:	bne	1c414 <__assert_fail@plt+0xa714>
   1c444:	cmp	r6, r0
   1c448:	beq	1c3d8 <__assert_fail@plt+0xa6d8>
   1c44c:	ldr	r0, [r9, #20]
   1c450:	add	r1, r1, r1, lsl #1
   1c454:	add	r0, r0, r1, lsl #2
   1c458:	ldr	r0, [r0, #8]
   1c45c:	ldr	r6, [r0]
   1c460:	mov	r0, r8
   1c464:	mov	r1, r6
   1c468:	bl	21134 <__assert_fail@plt+0xf434>
   1c46c:	cmp	r0, #0
   1c470:	bne	1c3d8 <__assert_fail@plt+0xa6d8>
   1c474:	ldr	r0, [r9, #24]
   1c478:	add	r1, r6, r6, lsl #1
   1c47c:	add	r1, r0, r1, lsl #2
   1c480:	mov	r0, r8
   1c484:	bl	20cb4 <__assert_fail@plt+0xefb4>
   1c488:	mov	r7, #0
   1c48c:	cmp	r0, #0
   1c490:	beq	1c3d8 <__assert_fail@plt+0xa6d8>
   1c494:	sub	sp, fp, #24
   1c498:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c49c:	add	r0, sp, #12
   1c4a0:	mov	r2, sp
   1c4a4:	mov	r1, r9
   1c4a8:	mov	r3, #0
   1c4ac:	bl	211a4 <__assert_fail@plt+0xf4a4>
   1c4b0:	str	r0, [r9, #36]	; 0x24
   1c4b4:	cmp	r0, #0
   1c4b8:	beq	1c538 <__assert_fail@plt+0xa838>
   1c4bc:	ldrsb	r1, [r0, #52]	; 0x34
   1c4c0:	cmn	r1, #1
   1c4c4:	ble	1c4d8 <__assert_fail@plt+0xa7d8>
   1c4c8:	str	r0, [r9, #40]	; 0x28
   1c4cc:	str	r0, [r9, #44]	; 0x2c
   1c4d0:	str	r0, [r9, #48]	; 0x30
   1c4d4:	b	1c550 <__assert_fail@plt+0xa850>
   1c4d8:	add	r5, sp, #12
   1c4dc:	mov	r6, sp
   1c4e0:	mov	r0, r5
   1c4e4:	mov	r1, r9
   1c4e8:	mov	r2, r6
   1c4ec:	mov	r3, #1
   1c4f0:	bl	211a4 <__assert_fail@plt+0xf4a4>
   1c4f4:	str	r0, [r9, #40]	; 0x28
   1c4f8:	mov	r0, r5
   1c4fc:	mov	r1, r9
   1c500:	mov	r2, r6
   1c504:	mov	r3, #2
   1c508:	bl	211a4 <__assert_fail@plt+0xf4a4>
   1c50c:	str	r0, [r9, #44]	; 0x2c
   1c510:	mov	r0, r5
   1c514:	mov	r1, r9
   1c518:	mov	r2, r6
   1c51c:	mov	r3, #6
   1c520:	bl	211a4 <__assert_fail@plt+0xf4a4>
   1c524:	str	r0, [r9, #48]	; 0x30
   1c528:	ldr	r1, [r9, #40]	; 0x28
   1c52c:	cmp	r1, #0
   1c530:	cmpne	r0, #0
   1c534:	bne	1c544 <__assert_fail@plt+0xa844>
   1c538:	ldr	r0, [sp, #12]
   1c53c:	sub	sp, fp, #24
   1c540:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c544:	ldr	r0, [r9, #44]	; 0x2c
   1c548:	cmp	r0, #0
   1c54c:	beq	1c538 <__assert_fail@plt+0xa838>
   1c550:	ldr	r0, [sp, #8]
   1c554:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1c558:	mov	r0, #0
   1c55c:	sub	sp, fp, #24
   1c560:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c564:	str	r1, [r2, #48]	; 0x30
   1c568:	str	r0, [r2]
   1c56c:	str	r3, [r2, #64]	; 0x40
   1c570:	str	r1, [r2, #44]	; 0x2c
   1c574:	ldr	r0, [sp]
   1c578:	strb	r0, [r2, #72]	; 0x48
   1c57c:	cmp	r3, #0
   1c580:	movwne	r3, #1
   1c584:	orr	r0, r3, r0
   1c588:	strb	r0, [r2, #75]	; 0x4b
   1c58c:	ldr	r0, [sp, #4]
   1c590:	ldr	r3, [r0, #92]	; 0x5c
   1c594:	str	r3, [r2, #80]	; 0x50
   1c598:	ldrb	r3, [r0, #88]	; 0x58
   1c59c:	ubfx	r3, r3, #2, #1
   1c5a0:	strb	r3, [r2, #73]	; 0x49
   1c5a4:	ldrb	r0, [r0, #88]	; 0x58
   1c5a8:	str	r1, [r2, #56]	; 0x38
   1c5ac:	str	r1, [r2, #52]	; 0x34
   1c5b0:	ubfx	r0, r0, #3, #1
   1c5b4:	strb	r0, [r2, #74]	; 0x4a
   1c5b8:	bx	lr
   1c5bc:	push	{r4, r5, r6, r7, fp, lr}
   1c5c0:	add	fp, sp, #16
   1c5c4:	mov	r4, r1
   1c5c8:	mov	r5, r0
   1c5cc:	ldr	r0, [r0, #80]	; 0x50
   1c5d0:	cmp	r0, #2
   1c5d4:	blt	1c620 <__assert_fail@plt+0xa920>
   1c5d8:	mov	r6, #12
   1c5dc:	cmn	r4, #-1073741823	; 0xc0000001
   1c5e0:	bhi	1c64c <__assert_fail@plt+0xa94c>
   1c5e4:	ldr	r0, [r5, #8]
   1c5e8:	lsl	r7, r4, #2
   1c5ec:	mov	r1, r7
   1c5f0:	bl	1a350 <__assert_fail@plt+0x8650>
   1c5f4:	cmp	r0, #0
   1c5f8:	beq	1c64c <__assert_fail@plt+0xa94c>
   1c5fc:	str	r0, [r5, #8]
   1c600:	ldr	r0, [r5, #12]
   1c604:	cmp	r0, #0
   1c608:	beq	1c620 <__assert_fail@plt+0xa920>
   1c60c:	mov	r1, r7
   1c610:	bl	1a350 <__assert_fail@plt+0x8650>
   1c614:	cmp	r0, #0
   1c618:	beq	1c64c <__assert_fail@plt+0xa94c>
   1c61c:	str	r0, [r5, #12]
   1c620:	ldrb	r0, [r5, #75]	; 0x4b
   1c624:	cmp	r0, #0
   1c628:	beq	1c644 <__assert_fail@plt+0xa944>
   1c62c:	ldr	r0, [r5, #4]
   1c630:	mov	r1, r4
   1c634:	bl	1a350 <__assert_fail@plt+0x8650>
   1c638:	cmp	r0, #0
   1c63c:	beq	1c654 <__assert_fail@plt+0xa954>
   1c640:	str	r0, [r5, #4]
   1c644:	str	r4, [r5, #36]	; 0x24
   1c648:	mov	r6, #0
   1c64c:	mov	r0, r6
   1c650:	pop	{r4, r5, r6, r7, fp, pc}
   1c654:	mov	r6, #12
   1c658:	mov	r0, r6
   1c65c:	pop	{r4, r5, r6, r7, fp, pc}
   1c660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c664:	add	fp, sp, #28
   1c668:	sub	sp, sp, #92	; 0x5c
   1c66c:	mov	r9, r0
   1c670:	ldrb	r0, [r0, #74]	; 0x4a
   1c674:	ldr	sl, [r9, #28]
   1c678:	ldr	r4, [r9, #36]	; 0x24
   1c67c:	ldr	r1, [r9, #48]	; 0x30
   1c680:	cmp	r4, r1
   1c684:	movgt	r4, r1
   1c688:	cmp	r0, #0
   1c68c:	bne	1c6a8 <__assert_fail@plt+0xa9a8>
   1c690:	ldr	r0, [r9, #64]	; 0x40
   1c694:	cmp	r0, #0
   1c698:	bne	1c6a8 <__assert_fail@plt+0xa9a8>
   1c69c:	ldrb	r0, [r9, #76]	; 0x4c
   1c6a0:	cmp	r0, #0
   1c6a4:	beq	1c6b0 <__assert_fail@plt+0xa9b0>
   1c6a8:	ldr	r7, [r9, #32]
   1c6ac:	b	1c884 <__assert_fail@plt+0xab84>
   1c6b0:	cmp	r4, sl
   1c6b4:	ble	1c858 <__assert_fail@plt+0xab58>
   1c6b8:	add	r5, r9, #16
   1c6bc:	str	r4, [sp, #4]
   1c6c0:	b	1c6e4 <__assert_fail@plt+0xa9e4>
   1c6c4:	ldr	r1, [r9, #4]
   1c6c8:	strb	r0, [r1, sl]
   1c6cc:	ldr	r1, [r9, #8]
   1c6d0:	str	r0, [r1, sl, lsl #2]
   1c6d4:	add	sl, sl, #1
   1c6d8:	cmp	r4, sl
   1c6dc:	mov	r7, sl
   1c6e0:	ble	1cbc8 <__assert_fail@plt+0xaec8>
   1c6e4:	ldr	r0, [r9]
   1c6e8:	ldr	r1, [r9, #24]
   1c6ec:	add	r1, r1, sl
   1c6f0:	ldrb	r6, [r0, r1]
   1c6f4:	tst	r6, #128	; 0x80
   1c6f8:	bne	1c71c <__assert_fail@plt+0xaa1c>
   1c6fc:	mov	r0, r5
   1c700:	bl	11958 <mbsinit@plt>
   1c704:	cmp	r0, #0
   1c708:	beq	1c71c <__assert_fail@plt+0xaa1c>
   1c70c:	mov	r0, r6
   1c710:	bl	11ca0 <towupper@plt>
   1c714:	cmp	r0, #127	; 0x7f
   1c718:	bls	1c6c4 <__assert_fail@plt+0xa9c4>
   1c71c:	ldm	r5, {r0, r1}
   1c720:	str	r1, [fp, #-36]	; 0xffffffdc
   1c724:	str	r0, [fp, #-40]	; 0xffffffd8
   1c728:	sub	r2, r4, sl
   1c72c:	ldr	r0, [r9]
   1c730:	ldr	r1, [r9, #24]
   1c734:	add	r0, r0, r1
   1c738:	add	r1, r0, sl
   1c73c:	add	r0, sp, #12
   1c740:	mov	r3, r5
   1c744:	bl	1a2ec <__assert_fail@plt+0x85ec>
   1c748:	mov	r4, r0
   1c74c:	sub	r8, r0, #1
   1c750:	cmn	r8, #4
   1c754:	bhi	1c810 <__assert_fail@plt+0xab10>
   1c758:	ldr	r0, [sp, #12]
   1c75c:	bl	11ca0 <towupper@plt>
   1c760:	mov	r6, r0
   1c764:	ldr	r0, [sp, #12]
   1c768:	cmp	r6, r0
   1c76c:	bne	1c78c <__assert_fail@plt+0xaa8c>
   1c770:	ldr	r1, [r9]
   1c774:	ldr	r0, [r9, #4]
   1c778:	ldr	r2, [r9, #24]
   1c77c:	add	r0, r0, sl
   1c780:	add	r1, r1, r2
   1c784:	add	r1, r1, sl
   1c788:	b	1c7b4 <__assert_fail@plt+0xaab4>
   1c78c:	add	r7, sp, #16
   1c790:	mov	r0, r7
   1c794:	mov	r1, r6
   1c798:	sub	r2, fp, #40	; 0x28
   1c79c:	bl	11880 <wcrtomb@plt>
   1c7a0:	cmp	r4, r0
   1c7a4:	bne	1c860 <__assert_fail@plt+0xab60>
   1c7a8:	ldr	r0, [r9, #4]
   1c7ac:	add	r0, r0, sl
   1c7b0:	mov	r1, r7
   1c7b4:	mov	r2, r4
   1c7b8:	bl	11928 <memcpy@plt>
   1c7bc:	ldr	r0, [r9, #8]
   1c7c0:	str	r6, [r0, sl, lsl #2]
   1c7c4:	add	r1, r4, sl
   1c7c8:	add	r6, sl, #1
   1c7cc:	cmp	r6, r1
   1c7d0:	bge	1c804 <__assert_fail@plt+0xab04>
   1c7d4:	mvn	r1, #3
   1c7d8:	add	r2, r1, r4, lsl #2
   1c7dc:	add	r0, r0, sl, lsl #2
   1c7e0:	add	r0, r0, #4
   1c7e4:	mov	r1, #255	; 0xff
   1c7e8:	bl	11b5c <memset@plt>
   1c7ec:	mov	sl, r6
   1c7f0:	ldr	r4, [sp, #4]
   1c7f4:	subs	r8, r8, #1
   1c7f8:	add	sl, sl, #1
   1c7fc:	bne	1c7f4 <__assert_fail@plt+0xaaf4>
   1c800:	b	1c6d8 <__assert_fail@plt+0xa9d8>
   1c804:	mov	sl, r6
   1c808:	ldr	r4, [sp, #4]
   1c80c:	b	1c6d8 <__assert_fail@plt+0xa9d8>
   1c810:	add	r0, r4, #1
   1c814:	cmp	r0, #2
   1c818:	bcc	1c82c <__assert_fail@plt+0xab2c>
   1c81c:	ldr	r0, [r9, #36]	; 0x24
   1c820:	ldr	r1, [r9, #48]	; 0x30
   1c824:	cmp	r0, r1
   1c828:	blt	1c870 <__assert_fail@plt+0xab70>
   1c82c:	ldr	r0, [r9, #4]
   1c830:	strb	r6, [r0, sl]
   1c834:	ldr	r0, [r9, #8]
   1c838:	str	r6, [r0, sl, lsl #2]
   1c83c:	add	sl, sl, #1
   1c840:	cmn	r4, #1
   1c844:	bne	1c808 <__assert_fail@plt+0xab08>
   1c848:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c84c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c850:	stm	r5, {r0, r1}
   1c854:	b	1c808 <__assert_fail@plt+0xab08>
   1c858:	mov	r7, sl
   1c85c:	b	1cbc8 <__assert_fail@plt+0xaec8>
   1c860:	mov	r0, sl
   1c864:	ldr	r4, [sp, #4]
   1c868:	mov	r7, sl
   1c86c:	b	1c88c <__assert_fail@plt+0xab8c>
   1c870:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c874:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c878:	stm	r5, {r0, r1}
   1c87c:	mov	r7, sl
   1c880:	b	1cbc8 <__assert_fail@plt+0xaec8>
   1c884:	cmp	sl, r4
   1c888:	bge	1cbc8 <__assert_fail@plt+0xaec8>
   1c88c:	mov	r6, r9
   1c890:	ldr	r0, [r6, #16]!
   1c894:	ldr	r1, [r6, #4]
   1c898:	str	r0, [fp, #-40]	; 0xffffffd8
   1c89c:	str	r1, [fp, #-36]	; 0xffffffdc
   1c8a0:	str	r4, [sp, #4]
   1c8a4:	sub	r2, r4, sl
   1c8a8:	ldr	r0, [r6, #48]	; 0x30
   1c8ac:	cmp	r0, #0
   1c8b0:	str	r7, [sp]
   1c8b4:	bne	1c998 <__assert_fail@plt+0xac98>
   1c8b8:	ldr	r0, [r9]
   1c8bc:	ldr	r1, [r9, #24]
   1c8c0:	add	r0, r0, r1
   1c8c4:	add	r4, r0, r7
   1c8c8:	add	r0, sp, #8
   1c8cc:	mov	r1, r4
   1c8d0:	mov	r3, r6
   1c8d4:	bl	1a2ec <__assert_fail@plt+0x85ec>
   1c8d8:	mov	r5, r0
   1c8dc:	sub	r8, r0, #1
   1c8e0:	cmn	r8, #4
   1c8e4:	bhi	1c9f0 <__assert_fail@plt+0xacf0>
   1c8e8:	ldr	r0, [sp, #8]
   1c8ec:	bl	11ca0 <towupper@plt>
   1c8f0:	mov	r7, r0
   1c8f4:	ldr	r0, [sp, #8]
   1c8f8:	cmp	r7, r0
   1c8fc:	bne	1c910 <__assert_fail@plt+0xac10>
   1c900:	ldr	r0, [r9, #4]
   1c904:	add	r0, r0, sl
   1c908:	mov	r1, r4
   1c90c:	b	1c934 <__assert_fail@plt+0xac34>
   1c910:	add	r0, sp, #16
   1c914:	sub	r2, fp, #40	; 0x28
   1c918:	mov	r1, r7
   1c91c:	bl	11880 <wcrtomb@plt>
   1c920:	cmp	r0, r5
   1c924:	bne	1ca6c <__assert_fail@plt+0xad6c>
   1c928:	ldr	r0, [r9, #4]
   1c92c:	add	r0, r0, sl
   1c930:	add	r1, sp, #16
   1c934:	mov	r2, r5
   1c938:	bl	11928 <memcpy@plt>
   1c93c:	ldrb	r0, [r9, #76]	; 0x4c
   1c940:	cmp	r0, #0
   1c944:	bne	1cb94 <__assert_fail@plt+0xae94>
   1c948:	ldr	r0, [r9, #8]
   1c94c:	str	r7, [r0, sl, lsl #2]
   1c950:	ldr	r7, [sp]
   1c954:	add	r7, r5, r7
   1c958:	add	r1, r5, sl
   1c95c:	add	r4, sl, #1
   1c960:	cmp	r4, r1
   1c964:	bge	1c98c <__assert_fail@plt+0xac8c>
   1c968:	mvn	r1, #3
   1c96c:	add	r2, r1, r5, lsl #2
   1c970:	add	r0, r0, sl, lsl #2
   1c974:	add	r0, r0, #4
   1c978:	mov	r1, #255	; 0xff
   1c97c:	bl	11b5c <memset@plt>
   1c980:	subs	r8, r8, #1
   1c984:	add	r4, r4, #1
   1c988:	bne	1c980 <__assert_fail@plt+0xac80>
   1c98c:	mov	sl, r4
   1c990:	ldr	r4, [sp, #4]
   1c994:	b	1c884 <__assert_fail@plt+0xab84>
   1c998:	add	r4, sp, #16
   1c99c:	cmp	r2, #1
   1c9a0:	ldrge	r1, [r9, #80]	; 0x50
   1c9a4:	cmpge	r1, #1
   1c9a8:	blt	1c8c8 <__assert_fail@plt+0xabc8>
   1c9ac:	mov	r1, #0
   1c9b0:	add	r4, sp, #16
   1c9b4:	ldr	r3, [r9]
   1c9b8:	ldr	r7, [r9, #24]
   1c9bc:	add	r3, r3, r7
   1c9c0:	ldr	r7, [sp]
   1c9c4:	add	r3, r3, r7
   1c9c8:	ldrb	r3, [r3, r1]
   1c9cc:	ldrb	r3, [r0, r3]
   1c9d0:	strb	r3, [r4, r1]
   1c9d4:	add	r1, r1, #1
   1c9d8:	cmp	r1, r2
   1c9dc:	bge	1c8c8 <__assert_fail@plt+0xabc8>
   1c9e0:	ldr	r3, [r9, #80]	; 0x50
   1c9e4:	cmp	r1, r3
   1c9e8:	blt	1c9b4 <__assert_fail@plt+0xacb4>
   1c9ec:	b	1c8c8 <__assert_fail@plt+0xabc8>
   1c9f0:	add	r0, r5, #1
   1c9f4:	cmp	r0, #2
   1c9f8:	bcc	1ca0c <__assert_fail@plt+0xad0c>
   1c9fc:	ldr	r0, [r9, #36]	; 0x24
   1ca00:	ldr	r1, [r9, #48]	; 0x30
   1ca04:	cmp	r0, r1
   1ca08:	blt	1cbb8 <__assert_fail@plt+0xaeb8>
   1ca0c:	ldr	r0, [r9]
   1ca10:	ldr	r2, [r9, #24]
   1ca14:	ldr	r1, [r9, #64]	; 0x40
   1ca18:	ldr	r7, [sp]
   1ca1c:	add	r2, r2, r7
   1ca20:	ldrb	r0, [r0, r2]
   1ca24:	cmp	r1, #0
   1ca28:	bne	1cbe8 <__assert_fail@plt+0xaee8>
   1ca2c:	ldr	r4, [sp, #4]
   1ca30:	ldr	r1, [r9, #4]
   1ca34:	strb	r0, [r1, sl]
   1ca38:	ldrb	r1, [r9, #76]	; 0x4c
   1ca3c:	cmp	r1, #0
   1ca40:	bne	1cbf0 <__assert_fail@plt+0xaef0>
   1ca44:	ldr	r1, [r9, #8]
   1ca48:	str	r0, [r1, sl, lsl #2]
   1ca4c:	add	sl, sl, #1
   1ca50:	add	r7, r7, #1
   1ca54:	cmn	r5, #1
   1ca58:	bne	1c884 <__assert_fail@plt+0xab84>
   1ca5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ca60:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1ca64:	stm	r6, {r0, r1}
   1ca68:	b	1c884 <__assert_fail@plt+0xab84>
   1ca6c:	mov	r2, r0
   1ca70:	cmn	r0, #1
   1ca74:	beq	1c900 <__assert_fail@plt+0xac00>
   1ca78:	add	r1, r2, sl
   1ca7c:	ldr	r0, [r9, #36]	; 0x24
   1ca80:	cmp	r1, r0
   1ca84:	bhi	1cbb8 <__assert_fail@plt+0xaeb8>
   1ca88:	str	r1, [sp, #4]
   1ca8c:	ldr	r1, [r9, #12]
   1ca90:	cmp	r1, #0
   1ca94:	bne	1cab4 <__assert_fail@plt+0xadb4>
   1ca98:	lsl	r0, r0, #2
   1ca9c:	mov	r4, r2
   1caa0:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1caa4:	mov	r2, r4
   1caa8:	str	r0, [r9, #12]
   1caac:	cmp	r0, #0
   1cab0:	beq	1cbdc <__assert_fail@plt+0xaedc>
   1cab4:	ldrb	r0, [r9, #76]	; 0x4c
   1cab8:	cmp	r0, #0
   1cabc:	bne	1cae8 <__assert_fail@plt+0xade8>
   1cac0:	cmp	sl, #0
   1cac4:	beq	1cae0 <__assert_fail@plt+0xade0>
   1cac8:	ldr	r0, [r9, #12]
   1cacc:	mov	r1, #0
   1cad0:	str	r1, [r0, r1, lsl #2]
   1cad4:	add	r1, r1, #1
   1cad8:	cmp	sl, r1
   1cadc:	bne	1cad0 <__assert_fail@plt+0xadd0>
   1cae0:	mov	r0, #1
   1cae4:	strb	r0, [r9, #76]	; 0x4c
   1cae8:	ldr	r0, [r9, #4]
   1caec:	add	r0, r0, sl
   1caf0:	add	r1, sp, #16
   1caf4:	mov	r4, r2
   1caf8:	bl	11928 <memcpy@plt>
   1cafc:	ldr	r1, [r9, #8]
   1cb00:	str	r7, [r1, sl, lsl #2]
   1cb04:	ldr	r0, [r9, #12]
   1cb08:	ldr	r6, [sp]
   1cb0c:	str	r6, [r0, sl, lsl #2]
   1cb10:	cmp	r4, #2
   1cb14:	bcc	1cb4c <__assert_fail@plt+0xae4c>
   1cb18:	add	r0, r0, sl, lsl #2
   1cb1c:	add	r1, r1, sl, lsl #2
   1cb20:	mov	r2, #1
   1cb24:	mvn	r3, #0
   1cb28:	cmp	r2, r5
   1cb2c:	mov	r7, r8
   1cb30:	movcc	r7, r2
   1cb34:	add	r7, r7, r6
   1cb38:	str	r7, [r0, r2, lsl #2]
   1cb3c:	str	r3, [r1, r2, lsl #2]
   1cb40:	add	r2, r2, #1
   1cb44:	cmp	r4, r2
   1cb48:	bne	1cb28 <__assert_fail@plt+0xae28>
   1cb4c:	sub	r1, r4, r5
   1cb50:	ldr	r0, [r9, #48]	; 0x30
   1cb54:	ldr	r2, [r9, #52]	; 0x34
   1cb58:	add	r0, r0, r1
   1cb5c:	str	r0, [r9, #48]	; 0x30
   1cb60:	cmp	r2, r6
   1cb64:	mov	r7, r6
   1cb68:	ble	1cb78 <__assert_fail@plt+0xae78>
   1cb6c:	ldr	r2, [r9, #56]	; 0x38
   1cb70:	add	r1, r2, r1
   1cb74:	str	r1, [r9, #56]	; 0x38
   1cb78:	add	r7, r5, r7
   1cb7c:	ldr	r1, [r9, #36]	; 0x24
   1cb80:	cmp	r1, r0
   1cb84:	movgt	r1, r0
   1cb88:	ldr	sl, [sp, #4]
   1cb8c:	mov	r4, r1
   1cb90:	b	1c884 <__assert_fail@plt+0xab84>
   1cb94:	ldr	r0, [r9, #12]
   1cb98:	add	r0, r0, sl, lsl #2
   1cb9c:	ldr	r1, [sp]
   1cba0:	mov	r2, r5
   1cba4:	str	r1, [r0], #4
   1cba8:	add	r1, r1, #1
   1cbac:	subs	r2, r2, #1
   1cbb0:	bne	1cba4 <__assert_fail@plt+0xaea4>
   1cbb4:	b	1c948 <__assert_fail@plt+0xac48>
   1cbb8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1cbbc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1cbc0:	stm	r6, {r0, r1}
   1cbc4:	ldr	r7, [sp]
   1cbc8:	str	sl, [r9, #28]
   1cbcc:	str	r7, [r9, #32]
   1cbd0:	mov	r0, #0
   1cbd4:	sub	sp, fp, #28
   1cbd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbdc:	mov	r0, #12
   1cbe0:	sub	sp, fp, #28
   1cbe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbe8:	ldrb	r0, [r1, r0]
   1cbec:	b	1ca2c <__assert_fail@plt+0xad2c>
   1cbf0:	ldr	r1, [r9, #12]
   1cbf4:	str	r7, [r1, sl, lsl #2]
   1cbf8:	b	1ca44 <__assert_fail@plt+0xad44>
   1cbfc:	push	{r4, r5, r6, sl, fp, lr}
   1cc00:	add	fp, sp, #16
   1cc04:	mov	r4, r0
   1cc08:	ldr	r5, [r0, #28]
   1cc0c:	ldr	r6, [r0, #36]	; 0x24
   1cc10:	ldr	r0, [r0, #48]	; 0x30
   1cc14:	cmp	r6, r0
   1cc18:	movgt	r6, r0
   1cc1c:	cmp	r5, r6
   1cc20:	bge	1cc64 <__assert_fail@plt+0xaf64>
   1cc24:	ldr	r0, [r4]
   1cc28:	ldr	r2, [r4, #24]
   1cc2c:	ldr	r1, [r4, #64]	; 0x40
   1cc30:	add	r0, r0, r2
   1cc34:	ldrb	r0, [r0, r5]
   1cc38:	cmp	r1, #0
   1cc3c:	bne	1cc5c <__assert_fail@plt+0xaf5c>
   1cc40:	bl	11bf8 <toupper@plt>
   1cc44:	ldr	r1, [r4, #4]
   1cc48:	strb	r0, [r1, r5]
   1cc4c:	add	r5, r5, #1
   1cc50:	cmp	r5, r6
   1cc54:	blt	1cc24 <__assert_fail@plt+0xaf24>
   1cc58:	b	1cc64 <__assert_fail@plt+0xaf64>
   1cc5c:	ldrb	r0, [r1, r0]
   1cc60:	b	1cc40 <__assert_fail@plt+0xaf40>
   1cc64:	str	r5, [r4, #28]
   1cc68:	str	r5, [r4, #32]
   1cc6c:	pop	{r4, r5, r6, sl, fp, pc}
   1cc70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc74:	add	fp, sp, #28
   1cc78:	sub	sp, sp, #76	; 0x4c
   1cc7c:	mov	r4, r0
   1cc80:	ldr	r6, [r0, #28]
   1cc84:	ldr	sl, [r0, #36]	; 0x24
   1cc88:	ldr	r0, [r0, #48]	; 0x30
   1cc8c:	cmp	sl, r0
   1cc90:	movgt	sl, r0
   1cc94:	cmp	sl, r6
   1cc98:	ble	1ce1c <__assert_fail@plt+0xb11c>
   1cc9c:	add	r9, r4, #16
   1cca0:	add	r0, sp, #8
   1cca4:	sub	r2, sl, r6
   1cca8:	ldm	r9, {r3, r5}
   1ccac:	ldr	r1, [r4, #64]	; 0x40
   1ccb0:	cmp	r1, #0
   1ccb4:	str	r3, [sp, #4]
   1ccb8:	bne	1cd98 <__assert_fail@plt+0xb098>
   1ccbc:	ldr	r3, [r4]
   1ccc0:	ldr	r1, [r4, #24]
   1ccc4:	add	r1, r3, r1
   1ccc8:	add	r1, r1, r6
   1cccc:	mov	r8, r0
   1ccd0:	mov	r3, r9
   1ccd4:	bl	1a2ec <__assert_fail@plt+0x85ec>
   1ccd8:	mov	r7, r0
   1ccdc:	add	r0, r0, #1
   1cce0:	cmp	r0, #2
   1cce4:	bcc	1cd00 <__assert_fail@plt+0xb000>
   1cce8:	cmn	r7, #2
   1ccec:	bne	1cd2c <__assert_fail@plt+0xb02c>
   1ccf0:	ldr	r0, [r4, #36]	; 0x24
   1ccf4:	ldr	r1, [r4, #48]	; 0x30
   1ccf8:	cmp	r0, r1
   1ccfc:	blt	1ce14 <__assert_fail@plt+0xb114>
   1cd00:	ldr	r0, [r4]
   1cd04:	ldr	r1, [r4, #24]
   1cd08:	add	r1, r1, r6
   1cd0c:	ldrb	r0, [r0, r1]
   1cd10:	str	r0, [sp, #8]
   1cd14:	ldr	r1, [r4, #64]	; 0x40
   1cd18:	cmp	r1, #0
   1cd1c:	bne	1ce08 <__assert_fail@plt+0xb108>
   1cd20:	ldr	r0, [sp, #4]
   1cd24:	stm	r9, {r0, r5}
   1cd28:	mov	r7, #1
   1cd2c:	ldr	r0, [r4, #8]
   1cd30:	ldr	r1, [sp, #8]
   1cd34:	str	r1, [r0, r6, lsl #2]
   1cd38:	add	r1, r7, r6
   1cd3c:	add	r5, r6, #1
   1cd40:	cmp	r5, r1
   1cd44:	bge	1cd84 <__assert_fail@plt+0xb084>
   1cd48:	mvn	r1, #3
   1cd4c:	add	r2, r1, r7, lsl #2
   1cd50:	add	r0, r0, r6, lsl #2
   1cd54:	add	r0, r0, #4
   1cd58:	mov	r1, #255	; 0xff
   1cd5c:	bl	11b5c <memset@plt>
   1cd60:	sub	r1, r7, #1
   1cd64:	mov	r6, r5
   1cd68:	mov	r0, r8
   1cd6c:	subs	r1, r1, #1
   1cd70:	add	r6, r6, #1
   1cd74:	bne	1cd6c <__assert_fail@plt+0xb06c>
   1cd78:	cmp	sl, r6
   1cd7c:	bgt	1cca4 <__assert_fail@plt+0xafa4>
   1cd80:	b	1ce1c <__assert_fail@plt+0xb11c>
   1cd84:	mov	r6, r5
   1cd88:	mov	r0, r8
   1cd8c:	cmp	sl, r6
   1cd90:	bgt	1cca4 <__assert_fail@plt+0xafa4>
   1cd94:	b	1ce1c <__assert_fail@plt+0xb11c>
   1cd98:	cmp	r2, #1
   1cd9c:	add	r1, sp, #12
   1cda0:	blt	1cccc <__assert_fail@plt+0xafcc>
   1cda4:	ldr	r1, [r4, #80]	; 0x50
   1cda8:	cmp	r1, #1
   1cdac:	add	r1, sp, #12
   1cdb0:	blt	1cccc <__assert_fail@plt+0xafcc>
   1cdb4:	mov	r7, #0
   1cdb8:	ldr	lr, [r4]
   1cdbc:	ldr	ip, [r4, #4]
   1cdc0:	ldr	r1, [r4, #24]
   1cdc4:	ldr	r3, [r4, #64]	; 0x40
   1cdc8:	add	r1, lr, r1
   1cdcc:	add	r1, r1, r6
   1cdd0:	ldrb	r1, [r1, r7]
   1cdd4:	ldrb	r1, [r3, r1]
   1cdd8:	add	r3, ip, r6
   1cddc:	strb	r1, [r3, r7]
   1cde0:	add	r3, sp, #12
   1cde4:	strb	r1, [r3, r7]
   1cde8:	add	r7, r7, #1
   1cdec:	cmp	r7, r2
   1cdf0:	bge	1ce00 <__assert_fail@plt+0xb100>
   1cdf4:	ldr	r1, [r4, #80]	; 0x50
   1cdf8:	cmp	r7, r1
   1cdfc:	blt	1cdb8 <__assert_fail@plt+0xb0b8>
   1ce00:	add	r1, sp, #12
   1ce04:	b	1cccc <__assert_fail@plt+0xafcc>
   1ce08:	ldrb	r0, [r1, r0]
   1ce0c:	str	r0, [sp, #8]
   1ce10:	b	1cd20 <__assert_fail@plt+0xb020>
   1ce14:	ldr	r0, [sp, #4]
   1ce18:	stm	r9, {r0, r5}
   1ce1c:	str	r6, [r4, #28]
   1ce20:	str	r6, [r4, #32]
   1ce24:	sub	sp, fp, #28
   1ce28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce2c:	push	{r4, sl, fp, lr}
   1ce30:	add	fp, sp, #8
   1ce34:	ldr	r1, [r0, #28]
   1ce38:	ldr	ip, [r0, #36]	; 0x24
   1ce3c:	ldr	r3, [r0, #48]	; 0x30
   1ce40:	cmp	ip, r3
   1ce44:	movgt	ip, r3
   1ce48:	cmp	r1, ip
   1ce4c:	bge	1ce78 <__assert_fail@plt+0xb178>
   1ce50:	ldm	r0, {r3, lr}
   1ce54:	ldr	r2, [r0, #24]
   1ce58:	ldr	r4, [r0, #64]	; 0x40
   1ce5c:	add	r2, r3, r2
   1ce60:	ldrb	r2, [r2, r1]
   1ce64:	ldrb	r2, [r4, r2]
   1ce68:	strb	r2, [lr, r1]
   1ce6c:	add	r1, r1, #1
   1ce70:	cmp	r1, ip
   1ce74:	blt	1ce50 <__assert_fail@plt+0xb150>
   1ce78:	str	r1, [r0, #28]
   1ce7c:	str	r1, [r0, #32]
   1ce80:	pop	{r4, sl, fp, pc}
   1ce84:	push	{r4, sl, fp, lr}
   1ce88:	add	fp, sp, #8
   1ce8c:	mov	r4, r1
   1ce90:	bl	1d044 <__assert_fail@plt+0xb344>
   1ce94:	ldr	r1, [r4, #40]	; 0x28
   1ce98:	add	r0, r1, r0
   1ce9c:	str	r0, [r4, #40]	; 0x28
   1cea0:	pop	{r4, sl, fp, pc}
   1cea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cea8:	add	fp, sp, #28
   1ceac:	sub	sp, sp, #28
   1ceb0:	mov	r5, r2
   1ceb4:	mov	sl, r0
   1ceb8:	ldr	r4, [r1]
   1cebc:	ldr	r0, [r4, #84]	; 0x54
   1cec0:	str	r0, [sp, #12]
   1cec4:	ldr	r7, [fp, #12]
   1cec8:	str	r7, [sp, #4]
   1cecc:	ldr	r8, [fp, #8]
   1ced0:	str	r8, [sp]
   1ced4:	mov	r0, sl
   1ced8:	str	r1, [sp, #16]
   1cedc:	str	r3, [sp, #20]
   1cee0:	bl	1d8dc <__assert_fail@plt+0xbbdc>
   1cee4:	mov	r6, r0
   1cee8:	cmp	r0, #0
   1ceec:	bne	1cefc <__assert_fail@plt+0xb1fc>
   1cef0:	ldr	r0, [r7]
   1cef4:	cmp	r0, #0
   1cef8:	bne	1d004 <__assert_fail@plt+0xb304>
   1cefc:	ldr	r0, [sp, #20]
   1cf00:	orr	r7, r0, #8388608	; 0x800000
   1cf04:	b	1cf38 <__assert_fail@plt+0xb238>
   1cf08:	ldr	r0, [r4, #84]	; 0x54
   1cf0c:	ldr	r1, [sp, #24]
   1cf10:	orr	r0, r0, r1
   1cf14:	str	r0, [r4, #84]	; 0x54
   1cf18:	mov	r8, r9
   1cf1c:	mov	r0, r4
   1cf20:	mov	r1, r6
   1cf24:	mov	r3, #10
   1cf28:	bl	1d00c <__assert_fail@plt+0xb30c>
   1cf2c:	mov	r6, r0
   1cf30:	cmp	r0, #0
   1cf34:	beq	1cff8 <__assert_fail@plt+0xb2f8>
   1cf38:	ldrb	r0, [r5, #4]
   1cf3c:	cmp	r0, #10
   1cf40:	bne	1cfe8 <__assert_fail@plt+0xb2e8>
   1cf44:	mov	r0, r5
   1cf48:	mov	r1, sl
   1cf4c:	mov	r2, r7
   1cf50:	bl	1ce84 <__assert_fail@plt+0xb184>
   1cf54:	ldrb	r0, [r5, #4]
   1cf58:	orr	r1, r0, #8
   1cf5c:	mov	r2, #0
   1cf60:	cmp	r1, #10
   1cf64:	beq	1cf1c <__assert_fail@plt+0xb21c>
   1cf68:	cmp	r8, #0
   1cf6c:	beq	1cf78 <__assert_fail@plt+0xb278>
   1cf70:	cmp	r0, #9
   1cf74:	beq	1cf1c <__assert_fail@plt+0xb21c>
   1cf78:	ldr	r0, [r4, #84]	; 0x54
   1cf7c:	str	r0, [sp, #24]
   1cf80:	ldr	r0, [sp, #12]
   1cf84:	str	r0, [r4, #84]	; 0x54
   1cf88:	mov	r9, r8
   1cf8c:	str	r8, [sp]
   1cf90:	ldr	r8, [fp, #12]
   1cf94:	str	r8, [sp, #4]
   1cf98:	mov	r0, sl
   1cf9c:	ldr	r1, [sp, #16]
   1cfa0:	mov	r2, r5
   1cfa4:	ldr	r3, [sp, #20]
   1cfa8:	bl	1d8dc <__assert_fail@plt+0xbbdc>
   1cfac:	mov	r2, r0
   1cfb0:	cmp	r0, #0
   1cfb4:	bne	1cf08 <__assert_fail@plt+0xb208>
   1cfb8:	ldr	r0, [r8]
   1cfbc:	cmp	r0, #0
   1cfc0:	beq	1cf08 <__assert_fail@plt+0xb208>
   1cfc4:	cmp	r6, #0
   1cfc8:	beq	1d004 <__assert_fail@plt+0xb304>
   1cfcc:	movw	r1, #56008	; 0xdac8
   1cfd0:	movt	r1, #1
   1cfd4:	mov	r4, #0
   1cfd8:	mov	r0, r6
   1cfdc:	mov	r2, #0
   1cfe0:	bl	1da50 <__assert_fail@plt+0xbd50>
   1cfe4:	b	1cfec <__assert_fail@plt+0xb2ec>
   1cfe8:	mov	r4, r6
   1cfec:	mov	r0, r4
   1cff0:	sub	sp, fp, #28
   1cff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cff8:	mov	r0, #12
   1cffc:	ldr	r1, [fp, #12]
   1d000:	str	r0, [r1]
   1d004:	mov	r4, #0
   1d008:	b	1cfec <__assert_fail@plt+0xb2ec>
   1d00c:	push	{fp, lr}
   1d010:	mov	fp, sp
   1d014:	sub	sp, sp, #8
   1d018:	mov	ip, #0
   1d01c:	str	ip, [sp]
   1d020:	uxtb	ip, r3
   1d024:	ldr	r3, [sp, #4]
   1d028:	bfc	r3, #0, #23
   1d02c:	orr	r3, r3, ip
   1d030:	str	r3, [sp, #4]
   1d034:	mov	r3, sp
   1d038:	bl	1e088 <__assert_fail@plt+0xc388>
   1d03c:	mov	sp, fp
   1d040:	pop	{fp, pc}
   1d044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d048:	add	fp, sp, #28
   1d04c:	sub	sp, sp, #12
   1d050:	mov	r7, r1
   1d054:	mov	sl, r0
   1d058:	ldr	r0, [r1, #40]	; 0x28
   1d05c:	ldr	r1, [r1, #56]	; 0x38
   1d060:	cmp	r1, r0
   1d064:	ble	1d140 <__assert_fail@plt+0xb440>
   1d068:	mov	r9, r2
   1d06c:	ldr	r1, [r7, #4]
   1d070:	ldrb	r6, [r1, r0]
   1d074:	mov	r5, sl
   1d078:	strb	r6, [r5], #4
   1d07c:	ldr	r4, [r5]
   1d080:	bic	r0, r4, #6291456	; 0x600000
   1d084:	str	r0, [r5]
   1d088:	ldr	r0, [r7, #80]	; 0x50
   1d08c:	movw	r8, #65280	; 0xff00
   1d090:	movt	r8, #65439	; 0xff9f
   1d094:	cmp	r0, #2
   1d098:	blt	1d0bc <__assert_fail@plt+0xb3bc>
   1d09c:	ldr	r1, [r7, #28]
   1d0a0:	ldr	r0, [r7, #40]	; 0x28
   1d0a4:	cmp	r0, r1
   1d0a8:	beq	1d0bc <__assert_fail@plt+0xb3bc>
   1d0ac:	ldr	r1, [r7, #8]
   1d0b0:	ldr	r0, [r1, r0, lsl #2]
   1d0b4:	cmn	r0, #1
   1d0b8:	beq	1d574 <__assert_fail@plt+0xb874>
   1d0bc:	cmp	r6, #92	; 0x5c
   1d0c0:	bne	1d150 <__assert_fail@plt+0xb450>
   1d0c4:	ldr	r0, [r7, #40]	; 0x28
   1d0c8:	ldr	r1, [r7, #48]	; 0x30
   1d0cc:	add	r0, r0, #1
   1d0d0:	cmp	r0, r1
   1d0d4:	bge	1d1a4 <__assert_fail@plt+0xb4a4>
   1d0d8:	mov	r0, r7
   1d0dc:	bl	1d7f8 <__assert_fail@plt+0xbaf8>
   1d0e0:	mov	r6, r0
   1d0e4:	strb	r0, [sl]
   1d0e8:	and	r0, r4, r8
   1d0ec:	orr	r4, r0, #1
   1d0f0:	str	r4, [sl, #4]
   1d0f4:	ldr	r0, [r7, #80]	; 0x50
   1d0f8:	cmp	r0, #2
   1d0fc:	blt	1d3c8 <__assert_fail@plt+0xb6c8>
   1d100:	ldr	r0, [r7, #40]	; 0x28
   1d104:	add	r1, r0, #1
   1d108:	mov	r0, r7
   1d10c:	bl	1d8b8 <__assert_fail@plt+0xbbb8>
   1d110:	mov	r7, r0
   1d114:	bl	11b2c <iswalnum@plt>
   1d118:	cmp	r0, #0
   1d11c:	movwne	r0, #1
   1d120:	sub	r1, r7, #95	; 0x5f
   1d124:	clz	r1, r1
   1d128:	lsr	r1, r1, #5
   1d12c:	orr	r0, r1, r0
   1d130:	ldr	r1, [r5]
   1d134:	bic	r1, r1, #4194304	; 0x400000
   1d138:	orr	r0, r1, r0, lsl #22
   1d13c:	b	1d3e8 <__assert_fail@plt+0xb6e8>
   1d140:	mov	r0, #2
   1d144:	strb	r0, [sl, #4]
   1d148:	mov	r8, #0
   1d14c:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d150:	and	r0, r4, r8
   1d154:	orr	r4, r0, #1
   1d158:	str	r4, [r5]
   1d15c:	ldr	r0, [r7, #80]	; 0x50
   1d160:	cmp	r0, #2
   1d164:	blt	1d1b0 <__assert_fail@plt+0xb4b0>
   1d168:	ldr	r1, [r7, #40]	; 0x28
   1d16c:	mov	r0, r7
   1d170:	bl	1d8b8 <__assert_fail@plt+0xbbb8>
   1d174:	mov	r4, r0
   1d178:	bl	11b2c <iswalnum@plt>
   1d17c:	cmp	r0, #0
   1d180:	movwne	r0, #1
   1d184:	sub	r1, r4, #95	; 0x5f
   1d188:	clz	r1, r1
   1d18c:	lsr	r1, r1, #5
   1d190:	orr	r0, r1, r0
   1d194:	ldr	r1, [r5]
   1d198:	bic	r1, r1, #4194304	; 0x400000
   1d19c:	orr	r0, r1, r0, lsl #22
   1d1a0:	b	1d1d0 <__assert_fail@plt+0xb4d0>
   1d1a4:	and	r0, r4, r8
   1d1a8:	orr	r0, r0, #36	; 0x24
   1d1ac:	b	1d580 <__assert_fail@plt+0xb880>
   1d1b0:	bl	11ab4 <__ctype_b_loc@plt>
   1d1b4:	ldr	r0, [r0]
   1d1b8:	add	r0, r0, r6, lsl #1
   1d1bc:	ldrh	r0, [r0]
   1d1c0:	ubfx	r0, r0, #3, #1
   1d1c4:	cmp	r6, #95	; 0x5f
   1d1c8:	movweq	r0, #1
   1d1cc:	orr	r0, r4, r0, lsl #22
   1d1d0:	str	r0, [r5]
   1d1d4:	sub	r1, r6, #10
   1d1d8:	mov	r8, #1
   1d1dc:	cmp	r1, #115	; 0x73
   1d1e0:	bhi	1d7ec <__assert_fail@plt+0xbaec>
   1d1e4:	add	r2, pc, #0
   1d1e8:	ldr	pc, [r2, r1, lsl #2]
   1d1ec:			; <UNDEFINED> instruction: 0x0001d3bc
   1d1f0:	andeq	sp, r1, ip, ror #15
   1d1f4:	andeq	sp, r1, ip, ror #15
   1d1f8:	andeq	sp, r1, ip, ror #15
   1d1fc:	andeq	sp, r1, ip, ror #15
   1d200:	andeq	sp, r1, ip, ror #15
   1d204:	andeq	sp, r1, ip, ror #15
   1d208:	andeq	sp, r1, ip, ror #15
   1d20c:	andeq	sp, r1, ip, ror #15
   1d210:	andeq	sp, r1, ip, ror #15
   1d214:	andeq	sp, r1, ip, ror #15
   1d218:	andeq	sp, r1, ip, ror #15
   1d21c:	andeq	sp, r1, ip, ror #15
   1d220:	andeq	sp, r1, ip, ror #15
   1d224:	andeq	sp, r1, ip, ror #15
   1d228:	andeq	sp, r1, ip, ror #15
   1d22c:	andeq	sp, r1, ip, ror #15
   1d230:	andeq	sp, r1, ip, ror #15
   1d234:	andeq	sp, r1, ip, ror #15
   1d238:	andeq	sp, r1, ip, ror #15
   1d23c:	andeq	sp, r1, ip, ror #15
   1d240:	andeq	sp, r1, ip, ror #15
   1d244:	andeq	sp, r1, ip, ror #15
   1d248:	andeq	sp, r1, ip, ror #15
   1d24c:	andeq	sp, r1, ip, ror #15
   1d250:	andeq	sp, r1, ip, ror #15
   1d254:	andeq	sp, r1, ip, lsl #11
   1d258:	andeq	sp, r1, ip, ror #15
   1d25c:	andeq	sp, r1, ip, ror #15
   1d260:	andeq	sp, r1, ip, ror #15
   1d264:	andeq	sp, r1, ip, ror #11
   1d268:	strdeq	sp, [r1], -r8
   1d26c:	andeq	sp, r1, r4, lsl #12
   1d270:	andeq	sp, r1, ip, lsl #12
   1d274:	andeq	sp, r1, ip, ror #15
   1d278:	andeq	sp, r1, ip, ror #15
   1d27c:	andeq	sp, r1, ip, lsl r6
   1d280:	andeq	sp, r1, ip, ror #15
   1d284:	andeq	sp, r1, ip, ror #15
   1d288:	andeq	sp, r1, ip, ror #15
   1d28c:	andeq	sp, r1, ip, ror #15
   1d290:	andeq	sp, r1, ip, ror #15
   1d294:	andeq	sp, r1, ip, ror #15
   1d298:	andeq	sp, r1, ip, ror #15
   1d29c:	andeq	sp, r1, ip, ror #15
   1d2a0:	andeq	sp, r1, ip, ror #15
   1d2a4:	andeq	sp, r1, ip, ror #15
   1d2a8:	andeq	sp, r1, ip, ror #15
   1d2ac:	andeq	sp, r1, ip, ror #15
   1d2b0:	andeq	sp, r1, ip, ror #15
   1d2b4:	andeq	sp, r1, ip, ror #15
   1d2b8:	andeq	sp, r1, ip, ror #15
   1d2bc:	andeq	sp, r1, ip, ror #15
   1d2c0:	andeq	sp, r1, r4, lsr #12
   1d2c4:	andeq	sp, r1, ip, ror #15
   1d2c8:	andeq	sp, r1, ip, ror #15
   1d2cc:	andeq	sp, r1, ip, ror #15
   1d2d0:	andeq	sp, r1, ip, ror #15
   1d2d4:	andeq	sp, r1, ip, ror #15
   1d2d8:	andeq	sp, r1, ip, ror #15
   1d2dc:	andeq	sp, r1, ip, ror #15
   1d2e0:	andeq	sp, r1, ip, ror #15
   1d2e4:	andeq	sp, r1, ip, ror #15
   1d2e8:	andeq	sp, r1, ip, ror #15
   1d2ec:	andeq	sp, r1, ip, ror #15
   1d2f0:	andeq	sp, r1, ip, ror #15
   1d2f4:	andeq	sp, r1, ip, ror #15
   1d2f8:	andeq	sp, r1, ip, ror #15
   1d2fc:	andeq	sp, r1, ip, ror #15
   1d300:	andeq	sp, r1, ip, ror #15
   1d304:	andeq	sp, r1, ip, ror #15
   1d308:	andeq	sp, r1, ip, ror #15
   1d30c:	andeq	sp, r1, ip, ror #15
   1d310:	andeq	sp, r1, ip, ror #15
   1d314:	andeq	sp, r1, ip, ror #15
   1d318:	andeq	sp, r1, ip, ror #15
   1d31c:	andeq	sp, r1, ip, ror #15
   1d320:	andeq	sp, r1, ip, ror #15
   1d324:	andeq	sp, r1, ip, ror #15
   1d328:	andeq	sp, r1, ip, ror #15
   1d32c:	andeq	sp, r1, ip, ror #15
   1d330:	andeq	sp, r1, r4, lsr r6
   1d334:	andeq	sp, r1, ip, ror #15
   1d338:	andeq	sp, r1, ip, ror #15
   1d33c:	andeq	sp, r1, ip, lsr r6
   1d340:	andeq	sp, r1, ip, ror #15
   1d344:	andeq	sp, r1, ip, ror #15
   1d348:	andeq	sp, r1, ip, ror #15
   1d34c:	andeq	sp, r1, ip, ror #15
   1d350:	andeq	sp, r1, ip, ror #15
   1d354:	andeq	sp, r1, ip, ror #15
   1d358:	andeq	sp, r1, ip, ror #15
   1d35c:	andeq	sp, r1, ip, ror #15
   1d360:	andeq	sp, r1, ip, ror #15
   1d364:	andeq	sp, r1, ip, ror #15
   1d368:	andeq	sp, r1, ip, ror #15
   1d36c:	andeq	sp, r1, ip, ror #15
   1d370:	andeq	sp, r1, ip, ror #15
   1d374:	andeq	sp, r1, ip, ror #15
   1d378:	andeq	sp, r1, ip, ror #15
   1d37c:	andeq	sp, r1, ip, ror #15
   1d380:	andeq	sp, r1, ip, ror #15
   1d384:	andeq	sp, r1, ip, ror #15
   1d388:	andeq	sp, r1, ip, ror #15
   1d38c:	andeq	sp, r1, ip, ror #15
   1d390:	andeq	sp, r1, ip, ror #15
   1d394:	andeq	sp, r1, ip, ror #15
   1d398:	andeq	sp, r1, ip, ror #15
   1d39c:	andeq	sp, r1, ip, ror #15
   1d3a0:	andeq	sp, r1, ip, ror #15
   1d3a4:	andeq	sp, r1, ip, ror #15
   1d3a8:	andeq	sp, r1, ip, ror #15
   1d3ac:	andeq	sp, r1, ip, ror #15
   1d3b0:	andeq	sp, r1, r4, ror #12
   1d3b4:	andeq	sp, r1, r4, ror r6
   1d3b8:	andeq	sp, r1, r8, lsl #13
   1d3bc:	tst	r9, #2048	; 0x800
   1d3c0:	bne	1d680 <__assert_fail@plt+0xb980>
   1d3c4:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d3c8:	bl	11ab4 <__ctype_b_loc@plt>
   1d3cc:	ldr	r0, [r0]
   1d3d0:	add	r0, r0, r6, lsl #1
   1d3d4:	ldrh	r0, [r0]
   1d3d8:	ubfx	r0, r0, #3, #1
   1d3dc:	cmp	r6, #95	; 0x5f
   1d3e0:	movweq	r0, #1
   1d3e4:	orr	r0, r4, r0, lsl #22
   1d3e8:	str	r0, [r5]
   1d3ec:	sub	r1, r6, #39	; 0x27
   1d3f0:	mov	r8, #2
   1d3f4:	cmp	r1, #86	; 0x56
   1d3f8:	bhi	1d7ec <__assert_fail@plt+0xbaec>
   1d3fc:	add	r2, pc, #0
   1d400:	ldr	pc, [r2, r1, lsl #2]
   1d404:	andeq	sp, r1, r4, asr #13
   1d408:	ldrdeq	sp, [r1], -r4
   1d40c:	andeq	sp, r1, r4, ror #13
   1d410:	andeq	sp, r1, ip, ror #15
   1d414:	strdeq	sp, [r1], -r4
   1d418:	andeq	sp, r1, ip, ror #15
   1d41c:	andeq	sp, r1, ip, ror #15
   1d420:	andeq	sp, r1, ip, ror #15
   1d424:	andeq	sp, r1, ip, ror #15
   1d428:	andeq	sp, r1, ip, ror #15
   1d42c:	andeq	sp, r1, r0, ror #10
   1d430:	andeq	sp, r1, r0, ror #10
   1d434:	andeq	sp, r1, r0, ror #10
   1d438:	andeq	sp, r1, r0, ror #10
   1d43c:	andeq	sp, r1, r0, ror #10
   1d440:	andeq	sp, r1, r0, ror #10
   1d444:	andeq	sp, r1, r0, ror #10
   1d448:	andeq	sp, r1, r0, ror #10
   1d44c:	andeq	sp, r1, r0, ror #10
   1d450:	andeq	sp, r1, ip, ror #15
   1d454:	andeq	sp, r1, ip, ror #15
   1d458:	andeq	sp, r1, ip, lsl #14
   1d45c:	andeq	sp, r1, ip, ror #15
   1d460:	andeq	sp, r1, ip, lsl r7
   1d464:	andeq	sp, r1, ip, lsr #14
   1d468:	andeq	sp, r1, ip, ror #15
   1d46c:	andeq	sp, r1, ip, ror #15
   1d470:	andeq	sp, r1, r4, asr #14
   1d474:	andeq	sp, r1, ip, ror #15
   1d478:	andeq	sp, r1, ip, ror #15
   1d47c:	andeq	sp, r1, ip, ror #15
   1d480:	andeq	sp, r1, ip, ror #15
   1d484:	andeq	sp, r1, ip, ror #15
   1d488:	andeq	sp, r1, ip, ror #15
   1d48c:	andeq	sp, r1, ip, ror #15
   1d490:	andeq	sp, r1, ip, ror #15
   1d494:	andeq	sp, r1, ip, ror #15
   1d498:	andeq	sp, r1, ip, ror #15
   1d49c:	andeq	sp, r1, ip, ror #15
   1d4a0:	andeq	sp, r1, ip, ror #15
   1d4a4:	andeq	sp, r1, ip, ror #15
   1d4a8:	andeq	sp, r1, ip, ror #15
   1d4ac:	andeq	sp, r1, ip, ror #15
   1d4b0:	andeq	sp, r1, ip, ror #15
   1d4b4:	andeq	sp, r1, r4, asr r7
   1d4b8:	andeq	sp, r1, ip, ror #15
   1d4bc:	andeq	sp, r1, ip, ror #15
   1d4c0:	andeq	sp, r1, ip, ror #15
   1d4c4:	andeq	sp, r1, r4, ror #14
   1d4c8:	andeq	sp, r1, ip, ror #15
   1d4cc:	andeq	sp, r1, ip, ror #15
   1d4d0:	andeq	sp, r1, ip, ror #15
   1d4d4:	andeq	sp, r1, ip, ror #15
   1d4d8:	andeq	sp, r1, ip, ror #15
   1d4dc:	andeq	sp, r1, ip, ror #15
   1d4e0:	andeq	sp, r1, ip, ror #15
   1d4e4:	andeq	sp, r1, ip, ror #15
   1d4e8:	andeq	sp, r1, r4, ror r7
   1d4ec:	andeq	sp, r1, ip, ror #15
   1d4f0:	andeq	sp, r1, r4, lsl #15
   1d4f4:	andeq	sp, r1, ip, ror #15
   1d4f8:	andeq	sp, r1, ip, ror #15
   1d4fc:	andeq	sp, r1, ip, ror #15
   1d500:	andeq	sp, r1, ip, ror #15
   1d504:	andeq	sp, r1, ip, ror #15
   1d508:	andeq	sp, r1, ip, ror #15
   1d50c:	andeq	sp, r1, ip, ror #15
   1d510:	andeq	sp, r1, ip, ror #15
   1d514:	andeq	sp, r1, ip, ror #15
   1d518:	andeq	sp, r1, ip, ror #15
   1d51c:	andeq	sp, r1, ip, ror #15
   1d520:	andeq	sp, r1, ip, ror #15
   1d524:	andeq	sp, r1, ip, ror #15
   1d528:	andeq	sp, r1, ip, ror #15
   1d52c:	andeq	sp, r1, ip, ror #15
   1d530:	andeq	sp, r1, ip, ror #15
   1d534:	muleq	r1, r4, r7
   1d538:	andeq	sp, r1, ip, ror #15
   1d53c:	andeq	sp, r1, ip, ror #15
   1d540:	andeq	sp, r1, ip, ror #15
   1d544:	andeq	sp, r1, r4, lsr #15
   1d548:	andeq	sp, r1, ip, ror #15
   1d54c:	andeq	sp, r1, ip, ror #15
   1d550:	andeq	sp, r1, ip, ror #15
   1d554:			; <UNDEFINED> instruction: 0x0001d7b4
   1d558:	andeq	sp, r1, r8, asr #15
   1d55c:	ldrdeq	sp, [r1], -r4
   1d560:	tst	r9, #16384	; 0x4000
   1d564:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d568:	sub	r1, r6, #49	; 0x31
   1d56c:	mov	r2, #4
   1d570:	b	1d654 <__assert_fail@plt+0xb954>
   1d574:	and	r0, r4, r8
   1d578:	orr	r0, r0, #1
   1d57c:	orr	r0, r0, #2097152	; 0x200000
   1d580:	str	r0, [r5]
   1d584:	mov	r8, #1
   1d588:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d58c:	tst	r9, #8
   1d590:	bne	1d5d8 <__assert_fail@plt+0xb8d8>
   1d594:	ldr	r0, [r7, #40]	; 0x28
   1d598:	ldr	r1, [r7, #48]	; 0x30
   1d59c:	add	r0, r0, #1
   1d5a0:	cmp	r0, r1
   1d5a4:	beq	1d5d8 <__assert_fail@plt+0xb8d8>
   1d5a8:	str	r0, [r7, #40]	; 0x28
   1d5ac:	add	r0, sp, #4
   1d5b0:	mov	r1, r7
   1d5b4:	mov	r2, r9
   1d5b8:	bl	1d044 <__assert_fail@plt+0xb344>
   1d5bc:	ldr	r0, [r7, #40]	; 0x28
   1d5c0:	sub	r0, r0, #1
   1d5c4:	str	r0, [r7, #40]	; 0x28
   1d5c8:	ldrb	r0, [sp, #8]
   1d5cc:	sub	r0, r0, #9
   1d5d0:	cmp	r0, #1
   1d5d4:	bhi	1d7ec <__assert_fail@plt+0xbaec>
   1d5d8:	mov	r0, #32
   1d5dc:	str	r0, [sl]
   1d5e0:	mov	r0, #12
   1d5e4:	strb	r0, [sl, #4]
   1d5e8:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d5ec:	tst	r9, #8192	; 0x2000
   1d5f0:	bne	1d6dc <__assert_fail@plt+0xb9dc>
   1d5f4:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d5f8:	tst	r9, #8192	; 0x2000
   1d5fc:	bne	1d6ec <__assert_fail@plt+0xb9ec>
   1d600:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d604:	mov	r1, #11
   1d608:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d60c:	movw	r1, #1026	; 0x402
   1d610:	tst	r9, r1
   1d614:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d618:	b	1d704 <__assert_fail@plt+0xba04>
   1d61c:	mov	r1, #5
   1d620:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d624:	movw	r1, #1026	; 0x402
   1d628:	tst	r9, r1
   1d62c:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d630:	b	1d73c <__assert_fail@plt+0xba3c>
   1d634:	mov	r1, #20
   1d638:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d63c:	movw	r1, #8
   1d640:	movt	r1, #128	; 0x80
   1d644:	tst	r9, r1
   1d648:	beq	1d698 <__assert_fail@plt+0xb998>
   1d64c:	mov	r1, #16
   1d650:	mov	r2, #12
   1d654:	bfi	r0, r2, #0, #8
   1d658:	str	r1, [sl]
   1d65c:	str	r0, [sl, #4]
   1d660:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d664:	and	r1, r9, #4608	; 0x1200
   1d668:	cmp	r1, #4608	; 0x1200
   1d66c:	beq	1d7c0 <__assert_fail@plt+0xbac0>
   1d670:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d674:	and	r1, r9, #33792	; 0x8400
   1d678:	cmp	r1, #32768	; 0x8000
   1d67c:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d680:	mov	r1, #10
   1d684:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d688:	and	r1, r9, #4608	; 0x1200
   1d68c:	cmp	r1, #4608	; 0x1200
   1d690:	beq	1d7e0 <__assert_fail@plt+0xbae0>
   1d694:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d698:	ldr	r1, [r7, #40]	; 0x28
   1d69c:	cmp	r1, #0
   1d6a0:	beq	1d64c <__assert_fail@plt+0xb94c>
   1d6a4:	tst	r9, #2048	; 0x800
   1d6a8:	beq	1d7ec <__assert_fail@plt+0xbaec>
   1d6ac:	ldr	r2, [r7, #4]
   1d6b0:	add	r1, r1, r2
   1d6b4:	ldrb	r1, [r1, #-1]
   1d6b8:	cmp	r1, #10
   1d6bc:	beq	1d64c <__assert_fail@plt+0xb94c>
   1d6c0:	b	1d7ec <__assert_fail@plt+0xbaec>
   1d6c4:	tst	r9, #524288	; 0x80000
   1d6c8:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d6cc:	mov	r1, #128	; 0x80
   1d6d0:	b	1d650 <__assert_fail@plt+0xb950>
   1d6d4:	tst	r9, #8192	; 0x2000
   1d6d8:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d6dc:	mov	r1, #8
   1d6e0:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d6e4:	tst	r9, #8192	; 0x2000
   1d6e8:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d6ec:	mov	r1, #9
   1d6f0:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d6f4:	movw	r1, #1026	; 0x402
   1d6f8:	and	r1, r9, r1
   1d6fc:	cmp	r1, #2
   1d700:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d704:	mov	r1, #18
   1d708:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d70c:	tst	r9, #524288	; 0x80000
   1d710:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d714:	mov	r1, #6
   1d718:	b	1d650 <__assert_fail@plt+0xb950>
   1d71c:	tst	r9, #524288	; 0x80000
   1d720:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d724:	mov	r1, #9
   1d728:	b	1d650 <__assert_fail@plt+0xb950>
   1d72c:	movw	r1, #1026	; 0x402
   1d730:	and	r1, r9, r1
   1d734:	cmp	r1, #2
   1d738:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d73c:	mov	r1, #19
   1d740:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d744:	tst	r9, #524288	; 0x80000
   1d748:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d74c:	mov	r1, #512	; 0x200
   1d750:	b	1d650 <__assert_fail@plt+0xb950>
   1d754:	tst	r9, #524288	; 0x80000
   1d758:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d75c:	mov	r1, #35	; 0x23
   1d760:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d764:	tst	r9, #524288	; 0x80000
   1d768:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d76c:	mov	r1, #33	; 0x21
   1d770:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d774:	tst	r9, #524288	; 0x80000
   1d778:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d77c:	mov	r1, #64	; 0x40
   1d780:	b	1d650 <__assert_fail@plt+0xb950>
   1d784:	tst	r9, #524288	; 0x80000
   1d788:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d78c:	mov	r1, #256	; 0x100
   1d790:	b	1d650 <__assert_fail@plt+0xb950>
   1d794:	tst	r9, #524288	; 0x80000
   1d798:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d79c:	mov	r1, #34	; 0x22
   1d7a0:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d7a4:	tst	r9, #524288	; 0x80000
   1d7a8:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d7ac:	mov	r1, #32
   1d7b0:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d7b4:	and	r1, r9, #4608	; 0x1200
   1d7b8:	cmp	r1, #512	; 0x200
   1d7bc:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d7c0:	mov	r1, #23
   1d7c4:	b	1d7e4 <__assert_fail@plt+0xbae4>
   1d7c8:	tst	r9, #33792	; 0x8400
   1d7cc:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d7d0:	b	1d680 <__assert_fail@plt+0xb980>
   1d7d4:	and	r1, r9, #4608	; 0x1200
   1d7d8:	cmp	r1, #512	; 0x200
   1d7dc:	bne	1d7ec <__assert_fail@plt+0xbaec>
   1d7e0:	mov	r1, #24
   1d7e4:	bfi	r0, r1, #0, #8
   1d7e8:	str	r0, [r5]
   1d7ec:	mov	r0, r8
   1d7f0:	sub	sp, fp, #28
   1d7f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7f8:	push	{fp, lr}
   1d7fc:	mov	fp, sp
   1d800:	ldrb	r1, [r0, #75]	; 0x4b
   1d804:	cmp	r1, #0
   1d808:	bne	1d828 <__assert_fail@plt+0xbb28>
   1d80c:	ldr	r1, [r0, #4]
   1d810:	ldr	r0, [r0, #40]	; 0x28
   1d814:	add	r0, r0, r1
   1d818:	add	r0, r0, #1
   1d81c:	ldrb	r3, [r0]
   1d820:	uxtb	r0, r3
   1d824:	pop	{fp, pc}
   1d828:	ldr	r1, [r0, #80]	; 0x50
   1d82c:	cmp	r1, #2
   1d830:	blt	1d868 <__assert_fail@plt+0xbb68>
   1d834:	ldr	r2, [r0, #8]
   1d838:	ldr	r3, [r0, #40]	; 0x28
   1d83c:	add	ip, r3, #1
   1d840:	ldr	r1, [r2, ip, lsl #2]
   1d844:	cmn	r1, #1
   1d848:	beq	1d8ac <__assert_fail@plt+0xbbac>
   1d84c:	ldr	r1, [r0, #28]
   1d850:	add	r3, r3, #2
   1d854:	cmp	r1, r3
   1d858:	beq	1d868 <__assert_fail@plt+0xbb68>
   1d85c:	ldr	r1, [r2, r3, lsl #2]
   1d860:	cmn	r1, #1
   1d864:	beq	1d8ac <__assert_fail@plt+0xbbac>
   1d868:	ldrb	lr, [r0, #76]	; 0x4c
   1d86c:	ldr	r1, [r0, #40]	; 0x28
   1d870:	add	ip, r1, #1
   1d874:	cmp	lr, #0
   1d878:	mov	r3, ip
   1d87c:	beq	1d888 <__assert_fail@plt+0xbb88>
   1d880:	ldr	r3, [r0, #12]
   1d884:	ldr	r3, [r3, ip, lsl #2]
   1d888:	ldr	r1, [r0]
   1d88c:	ldr	r2, [r0, #24]
   1d890:	add	r2, r2, r3
   1d894:	add	r1, r1, r2
   1d898:	ldrsb	r3, [r1]
   1d89c:	cmp	lr, #0
   1d8a0:	beq	1d820 <__assert_fail@plt+0xbb20>
   1d8a4:	cmn	r3, #1
   1d8a8:	bgt	1d820 <__assert_fail@plt+0xbb20>
   1d8ac:	ldr	r0, [r0, #4]
   1d8b0:	add	r0, r0, ip
   1d8b4:	b	1d81c <__assert_fail@plt+0xbb1c>
   1d8b8:	ldr	r2, [r0, #80]	; 0x50
   1d8bc:	cmp	r2, #1
   1d8c0:	bne	1d8d0 <__assert_fail@plt+0xbbd0>
   1d8c4:	ldr	r0, [r0, #4]
   1d8c8:	ldrb	r0, [r0, r1]
   1d8cc:	bx	lr
   1d8d0:	ldr	r0, [r0, #8]
   1d8d4:	ldr	r0, [r0, r1, lsl #2]
   1d8d8:	bx	lr
   1d8dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8e0:	add	fp, sp, #28
   1d8e4:	sub	sp, sp, #20
   1d8e8:	mov	r6, r2
   1d8ec:	mov	r7, r1
   1d8f0:	mov	r1, r0
   1d8f4:	ldr	r0, [r7]
   1d8f8:	str	r0, [sp, #8]
   1d8fc:	ldr	r5, [fp, #12]
   1d900:	str	r5, [sp, #4]
   1d904:	ldr	r4, [fp, #8]
   1d908:	str	r4, [sp]
   1d90c:	str	r1, [sp, #12]
   1d910:	mov	r0, r1
   1d914:	mov	r1, r7
   1d918:	str	r3, [sp, #16]
   1d91c:	bl	1dae0 <__assert_fail@plt+0xbde0>
   1d920:	cmp	r0, #0
   1d924:	bne	1d95c <__assert_fail@plt+0xbc5c>
   1d928:	ldr	r1, [r5]
   1d92c:	cmp	r1, #0
   1d930:	beq	1d95c <__assert_fail@plt+0xbc5c>
   1d934:	mov	r6, #0
   1d938:	b	1d9e0 <__assert_fail@plt+0xbce0>
   1d93c:	ldr	r0, [sp, #8]
   1d940:	mov	r1, r5
   1d944:	mov	r2, r8
   1d948:	mov	r3, #16
   1d94c:	bl	1d00c <__assert_fail@plt+0xb30c>
   1d950:	cmp	r0, #0
   1d954:	mov	r4, r9
   1d958:	beq	1d9ec <__assert_fail@plt+0xbcec>
   1d95c:	mov	r5, r0
   1d960:	ldrb	r0, [r6, #4]
   1d964:	orr	r1, r0, #8
   1d968:	cmp	r1, #10
   1d96c:	beq	1d9dc <__assert_fail@plt+0xbcdc>
   1d970:	cmp	r4, #0
   1d974:	beq	1d980 <__assert_fail@plt+0xbc80>
   1d978:	cmp	r0, #9
   1d97c:	beq	1d9dc <__assert_fail@plt+0xbcdc>
   1d980:	mov	r9, r4
   1d984:	str	r4, [sp]
   1d988:	ldr	sl, [fp, #12]
   1d98c:	str	sl, [sp, #4]
   1d990:	ldr	r0, [sp, #12]
   1d994:	mov	r1, r7
   1d998:	mov	r2, r6
   1d99c:	ldr	r3, [sp, #16]
   1d9a0:	bl	1dae0 <__assert_fail@plt+0xbde0>
   1d9a4:	mov	r8, r0
   1d9a8:	cmp	r0, #0
   1d9ac:	bne	1d9bc <__assert_fail@plt+0xbcbc>
   1d9b0:	ldr	r0, [sl]
   1d9b4:	cmp	r0, #0
   1d9b8:	bne	1da28 <__assert_fail@plt+0xbd28>
   1d9bc:	cmp	r5, #0
   1d9c0:	cmpne	r8, #0
   1d9c4:	bne	1d93c <__assert_fail@plt+0xbc3c>
   1d9c8:	cmp	r5, #0
   1d9cc:	movne	r8, r5
   1d9d0:	mov	r0, r8
   1d9d4:	mov	r4, r9
   1d9d8:	b	1d95c <__assert_fail@plt+0xbc5c>
   1d9dc:	mov	r6, r5
   1d9e0:	mov	r0, r6
   1d9e4:	sub	sp, fp, #28
   1d9e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9ec:	movw	r4, #56008	; 0xdac8
   1d9f0:	movt	r4, #1
   1d9f4:	mov	r6, #0
   1d9f8:	mov	r0, r8
   1d9fc:	mov	r1, r4
   1da00:	mov	r2, #0
   1da04:	bl	1da50 <__assert_fail@plt+0xbd50>
   1da08:	mov	r0, r5
   1da0c:	mov	r1, r4
   1da10:	mov	r2, #0
   1da14:	bl	1da50 <__assert_fail@plt+0xbd50>
   1da18:	mov	r0, #12
   1da1c:	ldr	r1, [fp, #12]
   1da20:	str	r0, [r1]
   1da24:	b	1d9e0 <__assert_fail@plt+0xbce0>
   1da28:	cmp	r5, #0
   1da2c:	mov	r6, #0
   1da30:	beq	1d9e0 <__assert_fail@plt+0xbce0>
   1da34:	movw	r1, #56008	; 0xdac8
   1da38:	movt	r1, #1
   1da3c:	mov	r6, #0
   1da40:	mov	r0, r5
   1da44:	mov	r2, #0
   1da48:	bl	1da50 <__assert_fail@plt+0xbd50>
   1da4c:	b	1d9e0 <__assert_fail@plt+0xbce0>
   1da50:	push	{r4, r5, r6, sl, fp, lr}
   1da54:	add	fp, sp, #16
   1da58:	mov	r4, r2
   1da5c:	mov	r5, r1
   1da60:	b	1da68 <__assert_fail@plt+0xbd68>
   1da64:	ldr	r0, [r6, #8]
   1da68:	mov	r6, r0
   1da6c:	ldr	r0, [r0, #4]
   1da70:	cmp	r0, #0
   1da74:	bne	1da68 <__assert_fail@plt+0xbd68>
   1da78:	ldr	r0, [r6, #8]
   1da7c:	cmp	r0, #0
   1da80:	bne	1da64 <__assert_fail@plt+0xbd64>
   1da84:	mov	r0, r4
   1da88:	mov	r1, r6
   1da8c:	blx	r5
   1da90:	cmp	r0, #0
   1da94:	bne	1dac4 <__assert_fail@plt+0xbdc4>
   1da98:	ldr	r1, [r6]
   1da9c:	cmp	r1, #0
   1daa0:	beq	1dac4 <__assert_fail@plt+0xbdc4>
   1daa4:	ldr	r0, [r1, #8]
   1daa8:	cmp	r0, r6
   1daac:	mov	r6, r1
   1dab0:	beq	1da84 <__assert_fail@plt+0xbd84>
   1dab4:	cmp	r0, #0
   1dab8:	mov	r6, r1
   1dabc:	beq	1da84 <__assert_fail@plt+0xbd84>
   1dac0:	b	1da68 <__assert_fail@plt+0xbd68>
   1dac4:	pop	{r4, r5, r6, sl, fp, pc}
   1dac8:	push	{fp, lr}
   1dacc:	mov	fp, sp
   1dad0:	add	r0, r1, #20
   1dad4:	bl	1ba88 <__assert_fail@plt+0x9d88>
   1dad8:	mov	r0, #0
   1dadc:	pop	{fp, pc}
   1dae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dae4:	add	fp, sp, #28
   1dae8:	sub	sp, sp, #12
   1daec:	mov	r9, r3
   1daf0:	mov	r5, r2
   1daf4:	mov	r6, r1
   1daf8:	mov	sl, r0
   1dafc:	and	ip, r3, #16
   1db00:	and	r8, r3, #32
   1db04:	and	r0, r3, #16777216	; 0x1000000
   1db08:	str	r0, [sp, #8]
   1db0c:	ldr	r3, [fp, #12]
   1db10:	ldr	r4, [fp, #8]
   1db14:	mvn	r1, #0
   1db18:	ldr	r0, [r5, #4]
   1db1c:	uxtab	r1, r1, r0
   1db20:	ldr	r7, [r6]
   1db24:	add	r2, pc, #0
   1db28:	ldr	pc, [r2, r1, lsl #2]
   1db2c:			; <UNDEFINED> instruction: 0x0001dcb4
   1db30:	andeq	lr, r1, ip, rrx
   1db34:	andeq	lr, r1, r8, lsl #1
   1db38:	andeq	sp, r1, r0, ror sp
   1db3c:	andeq	sp, r1, ip, asr #27
   1db40:	andeq	lr, r1, r8, lsl #1
   1db44:	andeq	lr, r1, r8, lsl #1
   1db48:	andeq	sp, r1, r0, lsl lr
   1db4c:	andeq	sp, r1, ip, ror #24
   1db50:	andeq	lr, r1, ip, rrx
   1db54:	andeq	sp, r1, r8, asr #23
   1db58:	andeq	sp, r1, r8, lsr lr
   1db5c:	andeq	lr, r1, r8, lsl #1
   1db60:	andeq	lr, r1, r8, lsl #1
   1db64:	andeq	lr, r1, r8, lsl #1
   1db68:	andeq	lr, r1, r8, lsl #1
   1db6c:	andeq	lr, r1, r8, lsl #1
   1db70:	andeq	sp, r1, r8, asr #23
   1db74:	andeq	sp, r1, r8, asr #23
   1db78:	andeq	sp, r1, r8, ror lr
   1db7c:	andeq	lr, r1, r8, lsl #1
   1db80:	andeq	lr, r1, r8, lsl #1
   1db84:			; <UNDEFINED> instruction: 0x0001dbbc
   1db88:	andeq	sp, r1, ip, ror ip
   1db8c:	andeq	lr, r1, r8, lsl #1
   1db90:	andeq	lr, r1, r8, lsl #1
   1db94:	andeq	lr, r1, r8, lsl #1
   1db98:	andeq	lr, r1, r8, lsl #1
   1db9c:	andeq	lr, r1, r8, lsl #1
   1dba0:	andeq	lr, r1, r8, lsl #1
   1dba4:	andeq	lr, r1, r8, lsl #1
   1dba8:	strdeq	sp, [r1], -ip
   1dbac:	strdeq	sp, [r1], -ip
   1dbb0:	andeq	sp, r1, r0, lsr ip
   1dbb4:	andeq	sp, r1, r0, lsr ip
   1dbb8:	andeq	sp, r1, r0, ror pc
   1dbbc:	ldr	r1, [sp, #8]
   1dbc0:	cmp	r1, #0
   1dbc4:	bne	1e03c <__assert_fail@plt+0xc33c>
   1dbc8:	cmp	r8, #0
   1dbcc:	bne	1e03c <__assert_fail@plt+0xc33c>
   1dbd0:	cmp	ip, #0
   1dbd4:	beq	1dc6c <__assert_fail@plt+0xbf6c>
   1dbd8:	mov	r0, r5
   1dbdc:	mov	r1, sl
   1dbe0:	mov	r2, r9
   1dbe4:	mov	r7, ip
   1dbe8:	bl	1ce84 <__assert_fail@plt+0xb184>
   1dbec:	mvn	r1, #0
   1dbf0:	mov	ip, r7
   1dbf4:	ldr	r3, [fp, #12]
   1dbf8:	b	1db18 <__assert_fail@plt+0xbe18>
   1dbfc:	mov	r8, sl
   1dc00:	ldr	r1, [sl, #64]	; 0x40
   1dc04:	mvn	r2, #32
   1dc08:	uxtab	r0, r2, r0
   1dc0c:	clz	r0, r0
   1dc10:	lsr	r0, r0, #5
   1dc14:	stm	sp, {r0, r3}
   1dc18:	movw	r2, #44958	; 0xaf9e
   1dc1c:	movt	r2, #2
   1dc20:	mov	r4, r3
   1dc24:	movw	r3, #44964	; 0xafa4
   1dc28:	movt	r3, #2
   1dc2c:	b	1dc60 <__assert_fail@plt+0xbf60>
   1dc30:	mov	r8, sl
   1dc34:	ldr	r1, [sl, #64]	; 0x40
   1dc38:	mvn	r2, #34	; 0x22
   1dc3c:	uxtab	r0, r2, r0
   1dc40:	clz	r0, r0
   1dc44:	lsr	r0, r0, #5
   1dc48:	stm	sp, {r0, r3}
   1dc4c:	movw	r2, #44966	; 0xafa6
   1dc50:	movt	r2, #2
   1dc54:	mov	r4, r3
   1dc58:	movw	r3, #41671	; 0xa2c7
   1dc5c:	movt	r3, #2
   1dc60:	mov	r0, r7
   1dc64:	bl	1e850 <__assert_fail@plt+0xcb50>
   1dc68:	b	1de98 <__assert_fail@plt+0xc198>
   1dc6c:	tst	r9, #131072	; 0x20000
   1dc70:	uxtbeq	r1, r0
   1dc74:	cmpeq	r1, #9
   1dc78:	beq	1df7c <__assert_fail@plt+0xc27c>
   1dc7c:	mov	r1, #1
   1dc80:	bfi	r0, r1, #0, #8
   1dc84:	str	r0, [r5, #4]
   1dc88:	mov	r4, #0
   1dc8c:	mov	r0, r7
   1dc90:	mov	r1, #0
   1dc94:	mov	r2, #0
   1dc98:	mov	r3, r5
   1dc9c:	bl	1e088 <__assert_fail@plt+0xc388>
   1dca0:	mov	r6, r0
   1dca4:	cmp	r0, #0
   1dca8:	mov	r8, sl
   1dcac:	bne	1deb0 <__assert_fail@plt+0xc1b0>
   1dcb0:	b	1dff0 <__assert_fail@plt+0xc2f0>
   1dcb4:	mov	r4, #0
   1dcb8:	mov	r0, r7
   1dcbc:	mov	r1, #0
   1dcc0:	mov	r2, #0
   1dcc4:	mov	r3, r5
   1dcc8:	bl	1e088 <__assert_fail@plt+0xc388>
   1dccc:	cmp	r0, #0
   1dcd0:	beq	1dff0 <__assert_fail@plt+0xc2f0>
   1dcd4:	mov	r6, r0
   1dcd8:	ldr	r0, [r7, #92]	; 0x5c
   1dcdc:	cmp	r0, #2
   1dce0:	mov	r8, sl
   1dce4:	blt	1deb0 <__assert_fail@plt+0xc1b0>
   1dce8:	ldr	r0, [r8, #40]	; 0x28
   1dcec:	ldr	r1, [r8, #56]	; 0x38
   1dcf0:	cmp	r1, r0
   1dcf4:	ble	1deb0 <__assert_fail@plt+0xc1b0>
   1dcf8:	ldr	r1, [r8, #28]
   1dcfc:	cmp	r0, r1
   1dd00:	beq	1deb0 <__assert_fail@plt+0xc1b0>
   1dd04:	ldr	r1, [r8, #8]
   1dd08:	ldr	r0, [r1, r0, lsl #2]
   1dd0c:	cmn	r0, #1
   1dd10:	bne	1deb0 <__assert_fail@plt+0xc1b0>
   1dd14:	mov	r0, r5
   1dd18:	mov	r1, r8
   1dd1c:	mov	r2, r9
   1dd20:	bl	1ce84 <__assert_fail@plt+0xb184>
   1dd24:	mov	r0, r7
   1dd28:	mov	r1, #0
   1dd2c:	mov	r2, #0
   1dd30:	mov	r3, r5
   1dd34:	bl	1e088 <__assert_fail@plt+0xc388>
   1dd38:	mov	r4, r0
   1dd3c:	mov	r0, r7
   1dd40:	mov	r1, r6
   1dd44:	mov	r2, r4
   1dd48:	mov	r3, #16
   1dd4c:	bl	1d00c <__assert_fail@plt+0xb30c>
   1dd50:	cmp	r4, #0
   1dd54:	ldr	r1, [fp, #12]
   1dd58:	movne	r6, r0
   1dd5c:	cmpne	r0, #0
   1dd60:	bne	1dce8 <__assert_fail@plt+0xbfe8>
   1dd64:	mov	r0, #12
   1dd68:	str	r0, [r1]
   1dd6c:	b	1e06c <__assert_fail@plt+0xc36c>
   1dd70:	ldr	r0, [r5]
   1dd74:	mov	r1, #1
   1dd78:	ldr	r2, [r7, #84]	; 0x54
   1dd7c:	tst	r2, r1, lsl r0
   1dd80:	beq	1e07c <__assert_fail@plt+0xc37c>
   1dd84:	lsl	r0, r1, r0
   1dd88:	ldr	r1, [r7, #80]	; 0x50
   1dd8c:	orr	r0, r1, r0
   1dd90:	str	r0, [r7, #80]	; 0x50
   1dd94:	mov	r4, #0
   1dd98:	mov	r0, r7
   1dd9c:	mov	r1, #0
   1dda0:	mov	r2, #0
   1dda4:	mov	r3, r5
   1dda8:	bl	1e088 <__assert_fail@plt+0xc388>
   1ddac:	cmp	r0, #0
   1ddb0:	beq	1dff0 <__assert_fail@plt+0xc2f0>
   1ddb4:	mov	r6, r0
   1ddb8:	mov	r8, sl
   1ddbc:	ldr	r0, [r7, #76]	; 0x4c
   1ddc0:	add	r0, r0, #1
   1ddc4:	str	r0, [r7, #76]	; 0x4c
   1ddc8:	b	1de00 <__assert_fail@plt+0xc100>
   1ddcc:	mov	r4, #0
   1ddd0:	mov	r0, r7
   1ddd4:	mov	r1, #0
   1ddd8:	mov	r2, #0
   1dddc:	mov	r3, r5
   1dde0:	bl	1e088 <__assert_fail@plt+0xc388>
   1dde4:	cmp	r0, #0
   1dde8:	beq	1dff0 <__assert_fail@plt+0xc2f0>
   1ddec:	mov	r6, r0
   1ddf0:	ldr	r0, [r7, #92]	; 0x5c
   1ddf4:	cmp	r0, #2
   1ddf8:	mov	r8, sl
   1ddfc:	blt	1deb0 <__assert_fail@plt+0xc1b0>
   1de00:	ldrb	r0, [r7, #88]	; 0x58
   1de04:	orr	r0, r0, #2
   1de08:	strb	r0, [r7, #88]	; 0x58
   1de0c:	b	1deb0 <__assert_fail@plt+0xc1b0>
   1de10:	add	r0, r4, #1
   1de14:	stm	sp, {r0, r3}
   1de18:	mov	r8, sl
   1de1c:	mov	r0, sl
   1de20:	mov	r1, r6
   1de24:	mov	r2, r5
   1de28:	mov	r4, r3
   1de2c:	mov	r3, r9
   1de30:	bl	1e134 <__assert_fail@plt+0xc434>
   1de34:	b	1de98 <__assert_fail@plt+0xc198>
   1de38:	ldr	r0, [r5]
   1de3c:	movw	r1, #783	; 0x30f
   1de40:	tst	r0, r1
   1de44:	beq	1de5c <__assert_fail@plt+0xc15c>
   1de48:	ldrb	r0, [r7, #88]	; 0x58
   1de4c:	tst	r0, #16
   1de50:	moveq	r0, r7
   1de54:	bleq	1e768 <__assert_fail@plt+0xca68>
   1de58:	ldr	r0, [r5]
   1de5c:	cmp	r0, #256	; 0x100
   1de60:	beq	1df88 <__assert_fail@plt+0xc288>
   1de64:	cmp	r0, #512	; 0x200
   1de68:	bne	1e000 <__assert_fail@plt+0xc300>
   1de6c:	mov	r6, #10
   1de70:	mov	r0, #5
   1de74:	b	1df90 <__assert_fail@plt+0xc290>
   1de78:	str	r3, [sp]
   1de7c:	mov	r8, sl
   1de80:	mov	r0, sl
   1de84:	mov	r1, r7
   1de88:	mov	r2, r5
   1de8c:	mov	r4, r3
   1de90:	mov	r3, r9
   1de94:	bl	1e24c <__assert_fail@plt+0xc54c>
   1de98:	mov	r6, r0
   1de9c:	cmp	r0, #0
   1dea0:	bne	1deb0 <__assert_fail@plt+0xc1b0>
   1dea4:	ldr	r0, [r4]
   1dea8:	cmp	r0, #0
   1deac:	bne	1e06c <__assert_fail@plt+0xc36c>
   1deb0:	mov	r0, r5
   1deb4:	mov	r1, r8
   1deb8:	mov	r2, r9
   1debc:	bl	1ce84 <__assert_fail@plt+0xb184>
   1dec0:	mov	r4, #1
   1dec4:	movw	r8, #2048	; 0x800
   1dec8:	movt	r8, #140	; 0x8c
   1decc:	ldr	r2, [fp, #12]
   1ded0:	ldrb	r0, [r5, #4]
   1ded4:	cmp	r0, #23
   1ded8:	bhi	1df68 <__assert_fail@plt+0xc268>
   1dedc:	tst	r8, r4, lsl r0
   1dee0:	beq	1df68 <__assert_fail@plt+0xc268>
   1dee4:	str	r9, [sp]
   1dee8:	str	r2, [sp, #4]
   1deec:	mov	r0, r6
   1def0:	mov	r1, sl
   1def4:	mov	r2, r7
   1def8:	mov	r3, r5
   1defc:	bl	1ea40 <__assert_fail@plt+0xcd40>
   1df00:	ldr	r2, [fp, #12]
   1df04:	cmp	r0, #0
   1df08:	bne	1df18 <__assert_fail@plt+0xc218>
   1df0c:	ldr	r1, [r2]
   1df10:	cmp	r1, #0
   1df14:	bne	1e048 <__assert_fail@plt+0xc348>
   1df18:	ldr	r1, [sp, #8]
   1df1c:	cmp	r1, #0
   1df20:	mov	r6, r0
   1df24:	beq	1ded0 <__assert_fail@plt+0xc1d0>
   1df28:	ldrb	r1, [r5, #4]
   1df2c:	cmp	r1, #23
   1df30:	beq	1df40 <__assert_fail@plt+0xc240>
   1df34:	cmp	r1, #11
   1df38:	mov	r6, r0
   1df3c:	bne	1ded0 <__assert_fail@plt+0xc1d0>
   1df40:	cmp	r0, #0
   1df44:	beq	1df5c <__assert_fail@plt+0xc25c>
   1df48:	movw	r1, #56008	; 0xdac8
   1df4c:	movt	r1, #1
   1df50:	mov	r2, #0
   1df54:	bl	1da50 <__assert_fail@plt+0xbd50>
   1df58:	ldr	r2, [fp, #12]
   1df5c:	mov	r0, #13
   1df60:	str	r0, [r2]
   1df64:	b	1e06c <__assert_fail@plt+0xc36c>
   1df68:	mov	r4, r6
   1df6c:	b	1e070 <__assert_fail@plt+0xc370>
   1df70:	mov	r0, #5
   1df74:	str	r0, [r3]
   1df78:	b	1e06c <__assert_fail@plt+0xc36c>
   1df7c:	mov	r0, #16
   1df80:	str	r0, [r3]
   1df84:	b	1e06c <__assert_fail@plt+0xc36c>
   1df88:	mov	r6, #9
   1df8c:	mov	r0, #6
   1df90:	str	r0, [r5]
   1df94:	mov	r4, #0
   1df98:	mov	r0, r7
   1df9c:	mov	r1, #0
   1dfa0:	mov	r2, #0
   1dfa4:	mov	r3, r5
   1dfa8:	bl	1e088 <__assert_fail@plt+0xc388>
   1dfac:	mov	r8, r0
   1dfb0:	str	r6, [r5]
   1dfb4:	mov	r0, r7
   1dfb8:	mov	r1, #0
   1dfbc:	mov	r2, #0
   1dfc0:	mov	r3, r5
   1dfc4:	bl	1e088 <__assert_fail@plt+0xc388>
   1dfc8:	mov	r1, r0
   1dfcc:	mov	r0, r7
   1dfd0:	mov	r7, r1
   1dfd4:	mov	r1, r8
   1dfd8:	mov	r2, r7
   1dfdc:	mov	r3, #10
   1dfe0:	bl	1d00c <__assert_fail@plt+0xb30c>
   1dfe4:	cmp	r8, #0
   1dfe8:	cmpne	r7, #0
   1dfec:	bne	1e018 <__assert_fail@plt+0xc318>
   1dff0:	mov	r0, #12
   1dff4:	ldr	r1, [fp, #12]
   1dff8:	str	r0, [r1]
   1dffc:	b	1e070 <__assert_fail@plt+0xc370>
   1e000:	mov	r4, #0
   1e004:	mov	r0, r7
   1e008:	mov	r1, #0
   1e00c:	mov	r2, #0
   1e010:	mov	r3, r5
   1e014:	bl	1e088 <__assert_fail@plt+0xc388>
   1e018:	mov	r6, r0
   1e01c:	cmp	r0, #0
   1e020:	beq	1dff0 <__assert_fail@plt+0xc2f0>
   1e024:	mov	r0, r5
   1e028:	mov	r1, sl
   1e02c:	mov	r2, r9
   1e030:	bl	1ce84 <__assert_fail@plt+0xb184>
   1e034:	mov	r4, r6
   1e038:	b	1e070 <__assert_fail@plt+0xc370>
   1e03c:	mov	r0, #13
   1e040:	str	r0, [r3]
   1e044:	b	1e06c <__assert_fail@plt+0xc36c>
   1e048:	cmp	r6, #0
   1e04c:	beq	1e06c <__assert_fail@plt+0xc36c>
   1e050:	movw	r1, #56008	; 0xdac8
   1e054:	movt	r1, #1
   1e058:	mov	r4, #0
   1e05c:	mov	r0, r6
   1e060:	mov	r2, #0
   1e064:	bl	1da50 <__assert_fail@plt+0xbd50>
   1e068:	b	1e070 <__assert_fail@plt+0xc370>
   1e06c:	mov	r4, #0
   1e070:	mov	r0, r4
   1e074:	sub	sp, fp, #28
   1e078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e07c:	mov	r0, #6
   1e080:	ldr	r1, [fp, #12]
   1e084:	b	1dd68 <__assert_fail@plt+0xc068>
   1e088:	push	{r4, r5, r6, r7, fp, lr}
   1e08c:	add	fp, sp, #16
   1e090:	mov	r6, r3
   1e094:	mov	r4, r2
   1e098:	mov	r5, r1
   1e09c:	mov	r7, r0
   1e0a0:	ldr	r0, [r0, #64]	; 0x40
   1e0a4:	cmp	r0, #31
   1e0a8:	beq	1e104 <__assert_fail@plt+0xc404>
   1e0ac:	ldr	r0, [r7, #56]	; 0x38
   1e0b0:	ldr	r1, [r7, #64]	; 0x40
   1e0b4:	add	r2, r1, #1
   1e0b8:	str	r2, [r7, #64]	; 0x40
   1e0bc:	add	r0, r0, r1, lsl #5
   1e0c0:	mov	r1, #0
   1e0c4:	str	r1, [r0, #4]!
   1e0c8:	str	r4, [r0, #8]
   1e0cc:	str	r5, [r0, #4]
   1e0d0:	ldm	r6, {r2, r3}
   1e0d4:	mvn	r7, #0
   1e0d8:	str	r7, [r0, #28]
   1e0dc:	str	r1, [r0, #16]
   1e0e0:	str	r1, [r0, #12]
   1e0e4:	str	r2, [r0, #20]
   1e0e8:	bic	r1, r3, #786432	; 0xc0000
   1e0ec:	str	r1, [r0, #24]
   1e0f0:	cmp	r5, #0
   1e0f4:	strne	r0, [r5]
   1e0f8:	cmp	r4, #0
   1e0fc:	strne	r0, [r4]
   1e100:	pop	{r4, r5, r6, r7, fp, pc}
   1e104:	mov	r0, #996	; 0x3e4
   1e108:	bl	1a2bc <__assert_fail@plt+0x85bc>
   1e10c:	cmp	r0, #0
   1e110:	beq	1e12c <__assert_fail@plt+0xc42c>
   1e114:	ldr	r1, [r7, #56]	; 0x38
   1e118:	str	r1, [r0]
   1e11c:	mov	r1, #0
   1e120:	str	r1, [r7, #64]	; 0x40
   1e124:	str	r0, [r7, #56]	; 0x38
   1e128:	b	1e0ac <__assert_fail@plt+0xc3ac>
   1e12c:	mov	r0, #0
   1e130:	pop	{r4, r5, r6, r7, fp, pc}
   1e134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e138:	add	fp, sp, #28
   1e13c:	sub	sp, sp, #12
   1e140:	mov	r5, r3
   1e144:	mov	r6, r2
   1e148:	mov	r7, r1
   1e14c:	mov	r4, r0
   1e150:	ldr	r8, [r1]
   1e154:	ldr	sl, [r1, #24]
   1e158:	add	r0, sl, #1
   1e15c:	str	r0, [r1, #24]
   1e160:	orr	r2, r3, #8388608	; 0x800000
   1e164:	mov	r0, r6
   1e168:	mov	r1, r4
   1e16c:	bl	1ce84 <__assert_fail@plt+0xb184>
   1e170:	ldrb	r0, [r6, #4]
   1e174:	mov	r1, #0
   1e178:	ldr	r9, [fp, #12]
   1e17c:	cmp	r0, #9
   1e180:	beq	1e1cc <__assert_fail@plt+0xc4cc>
   1e184:	ldr	r0, [fp, #8]
   1e188:	stm	sp, {r0, r9}
   1e18c:	mov	r0, r4
   1e190:	mov	r1, r7
   1e194:	mov	r2, r6
   1e198:	mov	r3, r5
   1e19c:	bl	1cea4 <__assert_fail@plt+0xb1a4>
   1e1a0:	mov	r1, r0
   1e1a4:	ldr	r0, [r9]
   1e1a8:	mov	r5, #0
   1e1ac:	cmp	r0, #0
   1e1b0:	bne	1e208 <__assert_fail@plt+0xc508>
   1e1b4:	ldrb	r0, [r6, #4]
   1e1b8:	cmp	r0, #9
   1e1bc:	bne	1e220 <__assert_fail@plt+0xc520>
   1e1c0:	ldr	r0, [r9]
   1e1c4:	cmp	r0, #0
   1e1c8:	bne	1e208 <__assert_fail@plt+0xc508>
   1e1cc:	cmp	sl, #8
   1e1d0:	bhi	1e1e4 <__assert_fail@plt+0xc4e4>
   1e1d4:	ldr	r0, [r8, #84]	; 0x54
   1e1d8:	mov	r2, #1
   1e1dc:	orr	r0, r0, r2, lsl sl
   1e1e0:	str	r0, [r8, #84]	; 0x54
   1e1e4:	mov	r5, #0
   1e1e8:	mov	r0, r8
   1e1ec:	mov	r2, #0
   1e1f0:	mov	r3, #17
   1e1f4:	bl	1d00c <__assert_fail@plt+0xb30c>
   1e1f8:	cmp	r0, #0
   1e1fc:	beq	1e214 <__assert_fail@plt+0xc514>
   1e200:	str	sl, [r0, #20]
   1e204:	mov	r5, r0
   1e208:	mov	r0, r5
   1e20c:	sub	sp, fp, #28
   1e210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e214:	mov	r0, #12
   1e218:	str	r0, [r9]
   1e21c:	b	1e208 <__assert_fail@plt+0xc508>
   1e220:	cmp	r1, #0
   1e224:	beq	1e240 <__assert_fail@plt+0xc540>
   1e228:	movw	r2, #56008	; 0xdac8
   1e22c:	movt	r2, #1
   1e230:	mov	r0, r1
   1e234:	mov	r1, r2
   1e238:	mov	r2, #0
   1e23c:	bl	1da50 <__assert_fail@plt+0xbd50>
   1e240:	mov	r0, #8
   1e244:	str	r0, [r9]
   1e248:	b	1e208 <__assert_fail@plt+0xc508>
   1e24c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e250:	add	fp, sp, #28
   1e254:	sub	sp, sp, #124	; 0x7c
   1e258:	mov	r8, r3
   1e25c:	mov	r6, r2
   1e260:	mov	r9, r1
   1e264:	mov	r7, r0
   1e268:	mov	r5, #0
   1e26c:	str	r5, [fp, #-32]	; 0xffffffe0
   1e270:	str	r5, [fp, #-36]	; 0xffffffdc
   1e274:	mov	r0, #32
   1e278:	mov	r1, #1
   1e27c:	bl	19f4c <__assert_fail@plt+0x824c>
   1e280:	mov	r4, r0
   1e284:	mov	r0, #40	; 0x28
   1e288:	mov	r1, #1
   1e28c:	bl	19f4c <__assert_fail@plt+0x824c>
   1e290:	mov	sl, r0
   1e294:	cmp	r4, #0
   1e298:	cmpne	sl, #0
   1e29c:	beq	1e720 <__assert_fail@plt+0xca20>
   1e2a0:	mov	r0, r6
   1e2a4:	mov	r1, r7
   1e2a8:	mov	r2, r8
   1e2ac:	bl	1ed74 <__assert_fail@plt+0xd074>
   1e2b0:	mov	r5, r0
   1e2b4:	ldrb	r0, [r6, #4]
   1e2b8:	cmp	r0, #25
   1e2bc:	beq	1e2d0 <__assert_fail@plt+0xc5d0>
   1e2c0:	cmp	r0, #2
   1e2c4:	beq	1e718 <__assert_fail@plt+0xca18>
   1e2c8:	mov	r0, #0
   1e2cc:	b	1e31c <__assert_fail@plt+0xc61c>
   1e2d0:	ldrb	r0, [sl, #16]
   1e2d4:	orr	r0, r0, #1
   1e2d8:	strb	r0, [sl, #16]
   1e2dc:	tst	r8, #256	; 0x100
   1e2e0:	movne	r0, r4
   1e2e4:	movne	r1, #10
   1e2e8:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1e2ec:	ldr	r0, [r7, #40]	; 0x28
   1e2f0:	add	r0, r0, r5
   1e2f4:	str	r0, [r7, #40]	; 0x28
   1e2f8:	mov	r0, r6
   1e2fc:	mov	r1, r7
   1e300:	mov	r2, r8
   1e304:	bl	1ed74 <__assert_fail@plt+0xd074>
   1e308:	mov	r5, r0
   1e30c:	ldrb	r0, [r6, #4]
   1e310:	cmp	r0, #2
   1e314:	beq	1e718 <__assert_fail@plt+0xca18>
   1e318:	mov	r0, #1
   1e31c:	str	r0, [sp, #20]
   1e320:	ldr	r0, [r6, #4]
   1e324:	uxtb	r1, r0
   1e328:	cmp	r1, #21
   1e32c:	moveq	r1, #1
   1e330:	bfieq	r0, r1, #0, #8
   1e334:	streq	r0, [r6, #4]
   1e338:	str	sl, [sp, #24]
   1e33c:	add	r0, sp, #68	; 0x44
   1e340:	str	r0, [fp, #-40]	; 0xffffffd8
   1e344:	mov	r0, #3
   1e348:	str	r0, [fp, #-44]	; 0xffffffd4
   1e34c:	mov	r0, #1
   1e350:	str	r8, [sp]
   1e354:	str	r0, [sp, #4]
   1e358:	sub	r0, fp, #44	; 0x2c
   1e35c:	mov	r1, r7
   1e360:	mov	r2, r6
   1e364:	mov	r3, r5
   1e368:	bl	1ef0c <__assert_fail@plt+0xd20c>
   1e36c:	cmp	r0, #0
   1e370:	bne	1e708 <__assert_fail@plt+0xca08>
   1e374:	mov	r0, #0
   1e378:	str	r0, [sp, #16]
   1e37c:	mov	r0, r6
   1e380:	mov	r1, r7
   1e384:	mov	r2, r8
   1e388:	bl	1ed74 <__assert_fail@plt+0xd074>
   1e38c:	mov	sl, r0
   1e390:	ldr	r5, [fp, #-44]	; 0xffffffd4
   1e394:	cmp	r5, #2
   1e398:	beq	1e4bc <__assert_fail@plt+0xc7bc>
   1e39c:	cmp	r5, #4
   1e3a0:	bne	1e3c4 <__assert_fail@plt+0xc6c4>
   1e3a4:	ldr	r0, [r7, #64]	; 0x40
   1e3a8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1e3ac:	stm	sp, {r1, r8}
   1e3b0:	mov	r1, r4
   1e3b4:	ldr	r2, [sp, #24]
   1e3b8:	sub	r3, fp, #36	; 0x24
   1e3bc:	bl	1f2ac <__assert_fail@plt+0xd5ac>
   1e3c0:	b	1e4c8 <__assert_fail@plt+0xc7c8>
   1e3c4:	ldrb	r0, [r6, #4]
   1e3c8:	cmp	r0, #22
   1e3cc:	beq	1e3dc <__assert_fail@plt+0xc6dc>
   1e3d0:	cmp	r0, #2
   1e3d4:	bne	1e494 <__assert_fail@plt+0xc794>
   1e3d8:	b	1e704 <__assert_fail@plt+0xca04>
   1e3dc:	ldr	r0, [r7, #40]	; 0x28
   1e3e0:	add	r0, r0, sl
   1e3e4:	str	r0, [r7, #40]	; 0x28
   1e3e8:	add	r0, sp, #28
   1e3ec:	mov	r1, r7
   1e3f0:	mov	r2, r8
   1e3f4:	bl	1ed74 <__assert_fail@plt+0xd074>
   1e3f8:	mov	r3, r0
   1e3fc:	ldrb	r0, [sp, #32]
   1e400:	cmp	r0, #21
   1e404:	beq	1e480 <__assert_fail@plt+0xc780>
   1e408:	cmp	r0, #2
   1e40c:	sub	r1, fp, #52	; 0x34
   1e410:	beq	1e704 <__assert_fail@plt+0xca04>
   1e414:	mov	r0, #3
   1e418:	str	r0, [fp, #-52]	; 0xffffffcc
   1e41c:	add	r0, sp, #36	; 0x24
   1e420:	str	r0, [fp, #-48]	; 0xffffffd0
   1e424:	str	r8, [sp]
   1e428:	mov	r0, #1
   1e42c:	str	r0, [sp, #4]
   1e430:	mov	r0, r1
   1e434:	mov	r5, r1
   1e438:	mov	r1, r7
   1e43c:	add	r2, sp, #28
   1e440:	bl	1ef0c <__assert_fail@plt+0xd20c>
   1e444:	cmp	r0, #0
   1e448:	bne	1e708 <__assert_fail@plt+0xca08>
   1e44c:	mov	r0, r6
   1e450:	mov	r1, r7
   1e454:	mov	r2, r8
   1e458:	bl	1ed74 <__assert_fail@plt+0xd074>
   1e45c:	mov	sl, r0
   1e460:	stm	sp, {r5, r9}
   1e464:	str	r8, [sp, #8]
   1e468:	mov	r0, r4
   1e46c:	ldr	r1, [sp, #24]
   1e470:	sub	r2, fp, #32
   1e474:	sub	r3, fp, #44	; 0x2c
   1e478:	bl	1f014 <__assert_fail@plt+0xd314>
   1e47c:	b	1e4c8 <__assert_fail@plt+0xc7c8>
   1e480:	ldr	r0, [r7, #40]	; 0x28
   1e484:	sub	r0, r0, sl
   1e488:	str	r0, [r7, #40]	; 0x28
   1e48c:	mov	r0, #1
   1e490:	strb	r0, [r6, #4]
   1e494:	add	r0, pc, #0
   1e498:	ldr	pc, [r0, r5, lsl #2]
   1e49c:	andeq	lr, r1, ip, lsr #9
   1e4a0:	andeq	lr, r1, r8, lsr #10
   1e4a4:			; <UNDEFINED> instruction: 0x0001e4bc
   1e4a8:	andeq	lr, r1, r8, asr r5
   1e4ac:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   1e4b0:	mov	r0, r4
   1e4b4:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1e4b8:	b	1e4d8 <__assert_fail@plt+0xc7d8>
   1e4bc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1e4c0:	mov	r0, r4
   1e4c4:	bl	1f234 <__assert_fail@plt+0xd534>
   1e4c8:	ldr	r1, [fp, #8]
   1e4cc:	str	r0, [r1]
   1e4d0:	cmp	r0, #0
   1e4d4:	bne	1e710 <__assert_fail@plt+0xca10>
   1e4d8:	ldrb	r0, [r6, #4]
   1e4dc:	cmp	r0, #21
   1e4e0:	beq	1e590 <__assert_fail@plt+0xc890>
   1e4e4:	cmp	r0, #2
   1e4e8:	beq	1e704 <__assert_fail@plt+0xca04>
   1e4ec:	add	r0, sp, #68	; 0x44
   1e4f0:	str	r0, [fp, #-40]	; 0xffffffd8
   1e4f4:	mov	r0, #3
   1e4f8:	str	r0, [fp, #-44]	; 0xffffffd4
   1e4fc:	str	r8, [sp]
   1e500:	mov	r0, #0
   1e504:	str	r0, [sp, #4]
   1e508:	sub	r0, fp, #44	; 0x2c
   1e50c:	mov	r1, r7
   1e510:	mov	r2, r6
   1e514:	mov	r3, sl
   1e518:	bl	1ef0c <__assert_fail@plt+0xd20c>
   1e51c:	cmp	r0, #0
   1e520:	beq	1e37c <__assert_fail@plt+0xc67c>
   1e524:	b	1e708 <__assert_fail@plt+0xca08>
   1e528:	ldr	r5, [sp, #24]
   1e52c:	ldr	r0, [r5, #20]
   1e530:	ldr	r1, [sp, #16]
   1e534:	cmp	r1, r0
   1e538:	beq	1e568 <__assert_fail@plt+0xc868>
   1e53c:	ldr	r0, [r5]
   1e540:	ldr	r1, [r5, #20]
   1e544:	add	r2, r1, #1
   1e548:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e54c:	str	r2, [r5, #20]
   1e550:	str	r3, [r0, r1, lsl #2]
   1e554:	b	1e4d8 <__assert_fail@plt+0xc7d8>
   1e558:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1e55c:	mov	r0, r4
   1e560:	bl	1f270 <__assert_fail@plt+0xd570>
   1e564:	b	1e4c8 <__assert_fail@plt+0xc7c8>
   1e568:	mov	r1, #1
   1e56c:	orr	r0, r1, r0, lsl #1
   1e570:	str	r0, [sp, #16]
   1e574:	lsl	r1, r0, #2
   1e578:	ldr	r0, [r5]
   1e57c:	bl	1a350 <__assert_fail@plt+0x8650>
   1e580:	cmp	r0, #0
   1e584:	beq	1e740 <__assert_fail@plt+0xca40>
   1e588:	str	r0, [r5]
   1e58c:	b	1e53c <__assert_fail@plt+0xc83c>
   1e590:	ldr	r0, [r7, #40]	; 0x28
   1e594:	add	r0, r0, sl
   1e598:	str	r0, [r7, #40]	; 0x28
   1e59c:	ldr	r0, [sp, #20]
   1e5a0:	cmp	r0, #0
   1e5a4:	movne	r0, r4
   1e5a8:	blne	1fb08 <__assert_fail@plt+0xde08>
   1e5ac:	ldr	r0, [r9, #92]	; 0x5c
   1e5b0:	cmp	r0, #2
   1e5b4:	ldr	sl, [sp, #24]
   1e5b8:	blt	1e5c8 <__assert_fail@plt+0xc8c8>
   1e5bc:	ldr	r1, [r9, #60]	; 0x3c
   1e5c0:	mov	r0, r4
   1e5c4:	bl	1fb28 <__assert_fail@plt+0xde28>
   1e5c8:	ldr	r0, [sl, #20]
   1e5cc:	cmp	r0, #0
   1e5d0:	bne	1e5f8 <__assert_fail@plt+0xc8f8>
   1e5d4:	ldr	r0, [sl, #24]
   1e5d8:	cmp	r0, #0
   1e5dc:	bne	1e5f8 <__assert_fail@plt+0xc8f8>
   1e5e0:	ldr	r0, [sl, #28]
   1e5e4:	cmp	r0, #0
   1e5e8:	bne	1e5f8 <__assert_fail@plt+0xc8f8>
   1e5ec:	ldr	r0, [sl, #32]
   1e5f0:	cmp	r0, #0
   1e5f4:	beq	1e6b4 <__assert_fail@plt+0xc9b4>
   1e5f8:	ldrb	r0, [r9, #88]	; 0x58
   1e5fc:	orr	r0, r0, #2
   1e600:	strb	r0, [r9, #88]	; 0x58
   1e604:	str	sl, [sp, #68]	; 0x44
   1e608:	ldr	r7, [sp, #72]	; 0x48
   1e60c:	mov	r0, #6
   1e610:	strb	r0, [sp, #72]	; 0x48
   1e614:	mov	r6, #0
   1e618:	add	r3, sp, #68	; 0x44
   1e61c:	mov	r0, r9
   1e620:	mov	r1, #0
   1e624:	mov	r2, #0
   1e628:	bl	1e088 <__assert_fail@plt+0xc388>
   1e62c:	cmp	r0, #0
   1e630:	beq	1e744 <__assert_fail@plt+0xca44>
   1e634:	mov	r5, r0
   1e638:	bic	r0, r7, #255	; 0xff
   1e63c:	ldr	r1, [r4, r6, lsl #2]
   1e640:	cmp	r1, #0
   1e644:	bne	1e660 <__assert_fail@plt+0xc960>
   1e648:	add	r6, r6, #1
   1e64c:	cmp	r6, #8
   1e650:	bne	1e63c <__assert_fail@plt+0xc93c>
   1e654:	mov	r0, r4
   1e658:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1e65c:	b	1e6a8 <__assert_fail@plt+0xc9a8>
   1e660:	str	r4, [sp, #68]	; 0x44
   1e664:	orr	r0, r0, #3
   1e668:	str	r0, [sp, #72]	; 0x48
   1e66c:	add	r3, sp, #68	; 0x44
   1e670:	mov	r0, r9
   1e674:	mov	r1, #0
   1e678:	mov	r2, #0
   1e67c:	bl	1e088 <__assert_fail@plt+0xc388>
   1e680:	cmp	r0, #0
   1e684:	beq	1e744 <__assert_fail@plt+0xca44>
   1e688:	mov	r1, r0
   1e68c:	mov	r0, r9
   1e690:	mov	r2, r5
   1e694:	mov	r3, #10
   1e698:	bl	1d00c <__assert_fail@plt+0xb30c>
   1e69c:	mov	r5, r0
   1e6a0:	cmp	r0, #0
   1e6a4:	beq	1e744 <__assert_fail@plt+0xca44>
   1e6a8:	mov	r0, r5
   1e6ac:	sub	sp, fp, #28
   1e6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6b4:	ldr	r0, [r9, #92]	; 0x5c
   1e6b8:	cmp	r0, #2
   1e6bc:	blt	1e6d8 <__assert_fail@plt+0xc9d8>
   1e6c0:	ldr	r0, [sl, #36]	; 0x24
   1e6c4:	cmp	r0, #0
   1e6c8:	bne	1e5f8 <__assert_fail@plt+0xc8f8>
   1e6cc:	ldrb	r0, [sl, #16]
   1e6d0:	tst	r0, #1
   1e6d4:	bne	1e5f8 <__assert_fail@plt+0xc8f8>
   1e6d8:	mov	r0, sl
   1e6dc:	bl	1bb18 <__assert_fail@plt+0x9e18>
   1e6e0:	str	r4, [sp, #68]	; 0x44
   1e6e4:	mov	r0, #3
   1e6e8:	strb	r0, [sp, #72]	; 0x48
   1e6ec:	add	r3, sp, #68	; 0x44
   1e6f0:	mov	r0, r9
   1e6f4:	mov	r1, #0
   1e6f8:	mov	r2, #0
   1e6fc:	bl	1e088 <__assert_fail@plt+0xc388>
   1e700:	b	1e69c <__assert_fail@plt+0xc99c>
   1e704:	mov	r0, #7
   1e708:	ldr	r1, [fp, #8]
   1e70c:	str	r0, [r1]
   1e710:	ldr	sl, [sp, #24]
   1e714:	b	1e750 <__assert_fail@plt+0xca50>
   1e718:	mov	r0, #2
   1e71c:	b	1e748 <__assert_fail@plt+0xca48>
   1e720:	mov	r0, r4
   1e724:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1e728:	mov	r0, sl
   1e72c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1e730:	mov	r0, #12
   1e734:	ldr	r1, [fp, #8]
   1e738:	str	r0, [r1]
   1e73c:	b	1e6a8 <__assert_fail@plt+0xc9a8>
   1e740:	mov	sl, r5
   1e744:	mov	r0, #12
   1e748:	ldr	r1, [fp, #8]
   1e74c:	str	r0, [r1]
   1e750:	mov	r0, r4
   1e754:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1e758:	mov	r0, sl
   1e75c:	bl	1bb18 <__assert_fail@plt+0x9e18>
   1e760:	mov	r5, #0
   1e764:	b	1e6a8 <__assert_fail@plt+0xc9a8>
   1e768:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e76c:	add	fp, sp, #24
   1e770:	mov	r4, r0
   1e774:	ldrb	r0, [r0, #88]	; 0x58
   1e778:	orr	r1, r0, #16
   1e77c:	strb	r1, [r4, #88]	; 0x58
   1e780:	tst	r0, #8
   1e784:	bne	1e7c4 <__assert_fail@plt+0xcac4>
   1e788:	mvn	r1, #-134217727	; 0xf8000001
   1e78c:	mvn	r2, #2013265921	; 0x78000001
   1e790:	movw	r3, #0
   1e794:	movt	r3, #1023	; 0x3ff
   1e798:	mov	r7, #0
   1e79c:	str	r7, [r4, #96]	; 0x60
   1e7a0:	str	r3, [r4, #100]	; 0x64
   1e7a4:	str	r2, [r4, #104]	; 0x68
   1e7a8:	str	r1, [r4, #108]	; 0x6c
   1e7ac:	tst	r0, #4
   1e7b0:	beq	1e7d0 <__assert_fail@plt+0xcad0>
   1e7b4:	vmov.i32	q8, #0	; 0x00000000
   1e7b8:	add	r0, r4, #112	; 0x70
   1e7bc:	vst1.32	{d16-d17}, [r0]
   1e7c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e7c4:	mov	r5, #0
   1e7c8:	mov	r8, #0
   1e7cc:	b	1e7d8 <__assert_fail@plt+0xcad8>
   1e7d0:	mov	r8, #4
   1e7d4:	mov	r5, #128	; 0x80
   1e7d8:	bl	11ab4 <__ctype_b_loc@plt>
   1e7dc:	ldr	r0, [r0]
   1e7e0:	add	r6, r0, r5, lsl #1
   1e7e4:	mov	r1, #1
   1e7e8:	b	1e800 <__assert_fail@plt+0xcb00>
   1e7ec:	add	r6, r6, #64	; 0x40
   1e7f0:	add	r8, r8, #1
   1e7f4:	add	r5, r5, #32
   1e7f8:	cmp	r8, #8
   1e7fc:	beq	1e84c <__assert_fail@plt+0xcb4c>
   1e800:	add	r0, r4, r8, lsl #2
   1e804:	add	r2, r0, #96	; 0x60
   1e808:	mov	r3, #0
   1e80c:	mov	r0, r6
   1e810:	b	1e830 <__assert_fail@plt+0xcb30>
   1e814:	ldr	r7, [r2]
   1e818:	orr	r7, r7, r1, lsl r3
   1e81c:	str	r7, [r2]
   1e820:	add	r0, r0, #2
   1e824:	add	r3, r3, #1
   1e828:	cmp	r3, #32
   1e82c:	beq	1e7ec <__assert_fail@plt+0xcaec>
   1e830:	add	r7, r5, r3
   1e834:	cmp	r7, #95	; 0x5f
   1e838:	beq	1e814 <__assert_fail@plt+0xcb14>
   1e83c:	ldrh	r7, [r0]
   1e840:	ands	r7, r7, #8
   1e844:	beq	1e820 <__assert_fail@plt+0xcb20>
   1e848:	b	1e814 <__assert_fail@plt+0xcb14>
   1e84c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e854:	add	fp, sp, #28
   1e858:	sub	sp, sp, #20
   1e85c:	mov	r8, r3
   1e860:	mov	r6, r2
   1e864:	mov	r4, r1
   1e868:	mov	r9, r0
   1e86c:	mov	r7, #0
   1e870:	str	r7, [sp, #16]
   1e874:	mov	r0, #32
   1e878:	mov	r1, #1
   1e87c:	bl	19f4c <__assert_fail@plt+0x824c>
   1e880:	ldr	r1, [fp, #12]
   1e884:	cmp	r0, #0
   1e888:	beq	1e9f8 <__assert_fail@plt+0xccf8>
   1e88c:	mov	r5, r0
   1e890:	mov	r0, #40	; 0x28
   1e894:	mov	r1, #1
   1e898:	bl	19f4c <__assert_fail@plt+0x824c>
   1e89c:	cmp	r0, #0
   1e8a0:	beq	1ea04 <__assert_fail@plt+0xcd04>
   1e8a4:	mov	sl, r0
   1e8a8:	ldr	r1, [fp, #8]
   1e8ac:	ldrb	r0, [r0, #16]
   1e8b0:	and	r0, r0, #254	; 0xfe
   1e8b4:	orr	r0, r0, r1
   1e8b8:	strb	r0, [sl, #16]
   1e8bc:	mov	r7, #0
   1e8c0:	stm	sp, {r6, r7}
   1e8c4:	add	r3, sp, #16
   1e8c8:	mov	r0, r4
   1e8cc:	mov	r1, r5
   1e8d0:	mov	r2, sl
   1e8d4:	bl	1f2ac <__assert_fail@plt+0xd5ac>
   1e8d8:	cmp	r0, #0
   1e8dc:	bne	1ea20 <__assert_fail@plt+0xcd20>
   1e8e0:	ldrb	r0, [r8]
   1e8e4:	cmp	r0, #0
   1e8e8:	beq	1e908 <__assert_fail@plt+0xcc08>
   1e8ec:	add	r4, r8, #1
   1e8f0:	uxtb	r1, r0
   1e8f4:	mov	r0, r5
   1e8f8:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1e8fc:	ldrb	r0, [r4], #1
   1e900:	cmp	r0, #0
   1e904:	bne	1e8f0 <__assert_fail@plt+0xcbf0>
   1e908:	ldr	r0, [fp, #8]
   1e90c:	cmp	r0, #0
   1e910:	movne	r0, r5
   1e914:	blne	1fb08 <__assert_fail@plt+0xde08>
   1e918:	ldr	r0, [r9, #92]	; 0x5c
   1e91c:	cmp	r0, #2
   1e920:	blt	1e930 <__assert_fail@plt+0xcc30>
   1e924:	ldr	r1, [r9, #60]	; 0x3c
   1e928:	mov	r0, r5
   1e92c:	bl	1fb28 <__assert_fail@plt+0xde28>
   1e930:	str	r5, [sp, #8]
   1e934:	ldr	r4, [sp, #12]
   1e938:	bfc	r4, #0, #23
   1e93c:	orr	r0, r4, #3
   1e940:	str	r0, [sp, #12]
   1e944:	mov	r7, #0
   1e948:	add	r3, sp, #8
   1e94c:	mov	r0, r9
   1e950:	mov	r1, #0
   1e954:	mov	r2, #0
   1e958:	bl	1e088 <__assert_fail@plt+0xc388>
   1e95c:	cmp	r0, #0
   1e960:	beq	1e9dc <__assert_fail@plt+0xccdc>
   1e964:	mov	r6, r0
   1e968:	ldr	r0, [r9, #92]	; 0x5c
   1e96c:	cmp	r0, #2
   1e970:	blt	1e9c4 <__assert_fail@plt+0xccc4>
   1e974:	str	sl, [sp, #8]
   1e978:	orr	r0, r4, #6
   1e97c:	str	r0, [sp, #12]
   1e980:	ldrb	r0, [r9, #88]	; 0x58
   1e984:	orr	r0, r0, #2
   1e988:	strb	r0, [r9, #88]	; 0x58
   1e98c:	add	r3, sp, #8
   1e990:	mov	r0, r9
   1e994:	mov	r1, #0
   1e998:	mov	r2, #0
   1e99c:	bl	1e088 <__assert_fail@plt+0xc388>
   1e9a0:	cmp	r0, #0
   1e9a4:	beq	1e9dc <__assert_fail@plt+0xccdc>
   1e9a8:	mov	r2, r0
   1e9ac:	mov	r0, r9
   1e9b0:	mov	r1, r6
   1e9b4:	mov	r3, #10
   1e9b8:	bl	1d00c <__assert_fail@plt+0xb30c>
   1e9bc:	mov	r7, r0
   1e9c0:	b	1e9d0 <__assert_fail@plt+0xccd0>
   1e9c4:	mov	r0, sl
   1e9c8:	bl	1bb18 <__assert_fail@plt+0x9e18>
   1e9cc:	mov	r7, r6
   1e9d0:	mov	r0, r7
   1e9d4:	sub	sp, fp, #28
   1e9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9dc:	mov	r0, r5
   1e9e0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1e9e4:	mov	r0, sl
   1e9e8:	bl	1bb18 <__assert_fail@plt+0x9e18>
   1e9ec:	mov	r0, #12
   1e9f0:	ldr	r1, [fp, #12]
   1e9f4:	b	1e9fc <__assert_fail@plt+0xccfc>
   1e9f8:	mov	r0, #12
   1e9fc:	str	r0, [r1]
   1ea00:	b	1e9d0 <__assert_fail@plt+0xccd0>
   1ea04:	mov	r0, r5
   1ea08:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ea0c:	mov	r0, #12
   1ea10:	ldr	r1, [fp, #12]
   1ea14:	str	r0, [r1]
   1ea18:	mov	r7, #0
   1ea1c:	b	1e9d0 <__assert_fail@plt+0xccd0>
   1ea20:	mov	r6, r0
   1ea24:	mov	r0, r5
   1ea28:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1ea2c:	mov	r0, sl
   1ea30:	bl	1bb18 <__assert_fail@plt+0x9e18>
   1ea34:	ldr	r0, [fp, #12]
   1ea38:	str	r6, [r0]
   1ea3c:	b	1e9d0 <__assert_fail@plt+0xccd0>
   1ea40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea44:	add	fp, sp, #28
   1ea48:	sub	sp, sp, #20
   1ea4c:	mov	r7, r3
   1ea50:	mov	r5, r2
   1ea54:	mov	r8, r1
   1ea58:	mov	r4, r0
   1ea5c:	ldrb	r0, [r3, #4]
   1ea60:	ldr	r1, [fp, #12]
   1ea64:	str	r1, [sp, #16]
   1ea68:	ldr	sl, [fp, #8]
   1ea6c:	cmp	r0, #23
   1ea70:	bne	1eac8 <__assert_fail@plt+0xcdc8>
   1ea74:	ldr	r0, [r7]
   1ea78:	str	r0, [sp, #12]
   1ea7c:	ldr	r0, [r7, #4]
   1ea80:	str	r0, [sp, #8]
   1ea84:	ldr	r0, [r8, #40]	; 0x28
   1ea88:	str	r0, [sp, #4]
   1ea8c:	mov	r0, r8
   1ea90:	mov	r1, r7
   1ea94:	mov	r2, sl
   1ea98:	bl	1fd78 <__assert_fail@plt+0xe078>
   1ea9c:	cmn	r0, #1
   1eaa0:	bne	1eae4 <__assert_fail@plt+0xcde4>
   1eaa4:	ldrb	r0, [r7, #4]
   1eaa8:	cmp	r0, #1
   1eaac:	bne	1eac0 <__assert_fail@plt+0xcdc0>
   1eab0:	ldrb	r0, [r7]
   1eab4:	mov	r6, #0
   1eab8:	cmp	r0, #44	; 0x2c
   1eabc:	beq	1eaf0 <__assert_fail@plt+0xcdf0>
   1eac0:	mov	r0, #10
   1eac4:	b	1ed38 <__assert_fail@plt+0xd038>
   1eac8:	mvn	r9, #0
   1eacc:	cmp	r0, #19
   1ead0:	movweq	r9, #1
   1ead4:	sub	r0, r0, #18
   1ead8:	clz	r0, r0
   1eadc:	lsr	r6, r0, #5
   1eae0:	b	1eb60 <__assert_fail@plt+0xce60>
   1eae4:	mov	r6, r0
   1eae8:	cmn	r0, #2
   1eaec:	beq	1ec68 <__assert_fail@plt+0xcf68>
   1eaf0:	ldrb	r0, [r7, #4]
   1eaf4:	cmp	r0, #24
   1eaf8:	mov	r9, r6
   1eafc:	beq	1eb30 <__assert_fail@plt+0xce30>
   1eb00:	cmp	r0, #1
   1eb04:	bne	1ec68 <__assert_fail@plt+0xcf68>
   1eb08:	ldrb	r0, [r7]
   1eb0c:	cmp	r0, #44	; 0x2c
   1eb10:	bne	1ec68 <__assert_fail@plt+0xcf68>
   1eb14:	mov	r0, r8
   1eb18:	mov	r1, r7
   1eb1c:	mov	r2, sl
   1eb20:	bl	1fd78 <__assert_fail@plt+0xe078>
   1eb24:	mov	r9, r0
   1eb28:	cmn	r0, #2
   1eb2c:	beq	1ec68 <__assert_fail@plt+0xcf68>
   1eb30:	cmn	r9, #1
   1eb34:	beq	1eb40 <__assert_fail@plt+0xce40>
   1eb38:	cmp	r6, r9
   1eb3c:	bgt	1eac0 <__assert_fail@plt+0xcdc0>
   1eb40:	ldrb	r0, [r7, #4]
   1eb44:	cmp	r0, #24
   1eb48:	bne	1eac0 <__assert_fail@plt+0xcdc0>
   1eb4c:	cmn	r9, #1
   1eb50:	mov	r0, r9
   1eb54:	moveq	r0, r6
   1eb58:	cmp	r0, #32768	; 0x8000
   1eb5c:	bge	1ed50 <__assert_fail@plt+0xd050>
   1eb60:	mov	r0, r7
   1eb64:	mov	r1, r8
   1eb68:	mov	r2, sl
   1eb6c:	bl	1ce84 <__assert_fail@plt+0xb184>
   1eb70:	cmp	r4, #0
   1eb74:	beq	1ed40 <__assert_fail@plt+0xd040>
   1eb78:	orrs	r0, r9, r6
   1eb7c:	beq	1ec9c <__assert_fail@plt+0xcf9c>
   1eb80:	mov	r8, #0
   1eb84:	cmp	r6, #1
   1eb88:	bge	1ecb4 <__assert_fail@plt+0xcfb4>
   1eb8c:	ldrb	r0, [r4, #24]
   1eb90:	cmp	r0, #17
   1eb94:	bne	1ebac <__assert_fail@plt+0xceac>
   1eb98:	ldr	r2, [r4, #20]
   1eb9c:	movw	r1, #65276	; 0xfefc
   1eba0:	movt	r1, #1
   1eba4:	mov	r0, r4
   1eba8:	bl	1da50 <__assert_fail@plt+0xbd50>
   1ebac:	mov	r3, #10
   1ebb0:	cmn	r9, #1
   1ebb4:	movweq	r3, #11
   1ebb8:	mov	r0, r5
   1ebbc:	mov	r1, r4
   1ebc0:	mov	r2, #0
   1ebc4:	bl	1d00c <__assert_fail@plt+0xb30c>
   1ebc8:	cmp	r0, #0
   1ebcc:	beq	1ed34 <__assert_fail@plt+0xd034>
   1ebd0:	mov	r7, r0
   1ebd4:	add	r0, r6, #2
   1ebd8:	cmp	r0, r9
   1ebdc:	ble	1ec04 <__assert_fail@plt+0xcf04>
   1ebe0:	cmp	r8, #0
   1ebe4:	beq	1ec94 <__assert_fail@plt+0xcf94>
   1ebe8:	mov	r0, r5
   1ebec:	mov	r1, r8
   1ebf0:	mov	r2, r7
   1ebf4:	mov	r3, #16
   1ebf8:	sub	sp, fp, #28
   1ebfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec00:	b	1d00c <__assert_fail@plt+0xb30c>
   1ec04:	add	r6, r6, #1
   1ec08:	mov	r0, r4
   1ec0c:	mov	r1, r5
   1ec10:	bl	1fe20 <__assert_fail@plt+0xe120>
   1ec14:	mov	r4, r0
   1ec18:	mov	r0, r5
   1ec1c:	mov	r1, r7
   1ec20:	mov	r2, r4
   1ec24:	mov	r3, #16
   1ec28:	bl	1d00c <__assert_fail@plt+0xb30c>
   1ec2c:	cmp	r4, #0
   1ec30:	movne	r1, r0
   1ec34:	cmpne	r0, #0
   1ec38:	beq	1ed34 <__assert_fail@plt+0xd034>
   1ec3c:	mov	r0, r5
   1ec40:	mov	r2, #0
   1ec44:	mov	r3, #10
   1ec48:	bl	1d00c <__assert_fail@plt+0xb30c>
   1ec4c:	cmp	r0, #0
   1ec50:	beq	1ed34 <__assert_fail@plt+0xd034>
   1ec54:	mov	r7, r0
   1ec58:	add	r6, r6, #1
   1ec5c:	cmp	r6, r9
   1ec60:	blt	1ec08 <__assert_fail@plt+0xcf08>
   1ec64:	b	1ebe0 <__assert_fail@plt+0xcee0>
   1ec68:	tst	sl, #2097152	; 0x200000
   1ec6c:	beq	1ed58 <__assert_fail@plt+0xd058>
   1ec70:	ldr	r0, [sp, #4]
   1ec74:	str	r0, [r8, #40]	; 0x28
   1ec78:	ldr	r0, [sp, #12]
   1ec7c:	str	r0, [r7]
   1ec80:	ldr	r0, [sp, #8]
   1ec84:	str	r0, [r7, #4]
   1ec88:	mov	r0, #1
   1ec8c:	strb	r0, [r7, #4]
   1ec90:	b	1ed44 <__assert_fail@plt+0xd044>
   1ec94:	mov	r4, r7
   1ec98:	b	1ed44 <__assert_fail@plt+0xd044>
   1ec9c:	movw	r1, #56008	; 0xdac8
   1eca0:	movt	r1, #1
   1eca4:	mov	r0, r4
   1eca8:	mov	r2, #0
   1ecac:	bl	1da50 <__assert_fail@plt+0xbd50>
   1ecb0:	b	1ed40 <__assert_fail@plt+0xd040>
   1ecb4:	bne	1ece0 <__assert_fail@plt+0xcfe0>
   1ecb8:	mov	r8, r4
   1ecbc:	cmp	r6, r9
   1ecc0:	beq	1ed2c <__assert_fail@plt+0xd02c>
   1ecc4:	mov	r0, r4
   1ecc8:	mov	r1, r5
   1eccc:	bl	1fe20 <__assert_fail@plt+0xe120>
   1ecd0:	mov	r4, r0
   1ecd4:	cmp	r0, #0
   1ecd8:	bne	1eb8c <__assert_fail@plt+0xce8c>
   1ecdc:	b	1ed34 <__assert_fail@plt+0xd034>
   1ece0:	sub	r7, r6, #1
   1ece4:	mov	r8, r4
   1ece8:	mov	r0, r4
   1ecec:	mov	r1, r5
   1ecf0:	bl	1fe20 <__assert_fail@plt+0xe120>
   1ecf4:	mov	r4, r0
   1ecf8:	mov	r0, r5
   1ecfc:	mov	r1, r8
   1ed00:	mov	r2, r4
   1ed04:	mov	r3, #16
   1ed08:	bl	1d00c <__assert_fail@plt+0xb30c>
   1ed0c:	cmp	r4, #0
   1ed10:	movne	r8, r0
   1ed14:	cmpne	r0, #0
   1ed18:	beq	1ed34 <__assert_fail@plt+0xd034>
   1ed1c:	subs	r7, r7, #1
   1ed20:	bne	1ece8 <__assert_fail@plt+0xcfe8>
   1ed24:	cmp	r6, r9
   1ed28:	bne	1ecc4 <__assert_fail@plt+0xcfc4>
   1ed2c:	mov	r4, r8
   1ed30:	b	1ed44 <__assert_fail@plt+0xd044>
   1ed34:	mov	r0, #12
   1ed38:	ldr	r1, [sp, #16]
   1ed3c:	str	r0, [r1]
   1ed40:	mov	r4, #0
   1ed44:	mov	r0, r4
   1ed48:	sub	sp, fp, #28
   1ed4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed50:	mov	r0, #15
   1ed54:	b	1ed38 <__assert_fail@plt+0xd038>
   1ed58:	ldrb	r0, [r7, #4]
   1ed5c:	mov	r1, #10
   1ed60:	cmp	r0, #2
   1ed64:	movweq	r1, #9
   1ed68:	ldr	r0, [sp, #16]
   1ed6c:	str	r1, [r0]
   1ed70:	b	1ed40 <__assert_fail@plt+0xd040>
   1ed74:	push	{r4, sl, fp, lr}
   1ed78:	add	fp, sp, #8
   1ed7c:	ldr	ip, [r1, #40]	; 0x28
   1ed80:	ldr	r3, [r1, #56]	; 0x38
   1ed84:	cmp	r3, ip
   1ed88:	ble	1ee08 <__assert_fail@plt+0xd108>
   1ed8c:	ldr	r3, [r1, #4]
   1ed90:	ldrb	ip, [r3, ip]
   1ed94:	strb	ip, [r0]
   1ed98:	ldr	r3, [r1, #80]	; 0x50
   1ed9c:	cmp	r3, #2
   1eda0:	blt	1edc4 <__assert_fail@plt+0xd0c4>
   1eda4:	ldr	lr, [r1, #28]
   1eda8:	ldr	r4, [r1, #40]	; 0x28
   1edac:	cmp	r4, lr
   1edb0:	beq	1edc4 <__assert_fail@plt+0xd0c4>
   1edb4:	ldr	r3, [r1, #8]
   1edb8:	ldr	r3, [r3, r4, lsl #2]
   1edbc:	cmn	r3, #1
   1edc0:	beq	1eeb4 <__assert_fail@plt+0xd1b4>
   1edc4:	tst	r2, #1
   1edc8:	beq	1ee1c <__assert_fail@plt+0xd11c>
   1edcc:	cmp	ip, #92	; 0x5c
   1edd0:	bne	1ee1c <__assert_fail@plt+0xd11c>
   1edd4:	ldr	r2, [r1, #40]	; 0x28
   1edd8:	ldr	r3, [r1, #48]	; 0x30
   1eddc:	add	r2, r2, #1
   1ede0:	cmp	r2, r3
   1ede4:	bge	1eeb4 <__assert_fail@plt+0xd1b4>
   1ede8:	str	r2, [r1, #40]	; 0x28
   1edec:	ldr	r1, [r1, #4]
   1edf0:	ldrb	r2, [r1, r2]
   1edf4:	mov	r1, #1
   1edf8:	strb	r1, [r0, #4]
   1edfc:	strb	r2, [r0]
   1ee00:	mov	r0, r1
   1ee04:	pop	{r4, sl, fp, pc}
   1ee08:	mov	r1, #2
   1ee0c:	strb	r1, [r0, #4]
   1ee10:	mov	r1, #0
   1ee14:	mov	r0, r1
   1ee18:	pop	{r4, sl, fp, pc}
   1ee1c:	cmp	ip, #92	; 0x5c
   1ee20:	bgt	1ee74 <__assert_fail@plt+0xd174>
   1ee24:	cmp	ip, #45	; 0x2d
   1ee28:	beq	1ee8c <__assert_fail@plt+0xd18c>
   1ee2c:	cmp	ip, #91	; 0x5b
   1ee30:	bne	1eeb4 <__assert_fail@plt+0xd1b4>
   1ee34:	ldr	r3, [r1, #40]	; 0x28
   1ee38:	ldr	r4, [r1, #48]	; 0x30
   1ee3c:	add	r3, r3, #1
   1ee40:	cmp	r3, r4
   1ee44:	bge	1eea8 <__assert_fail@plt+0xd1a8>
   1ee48:	ldr	r1, [r1, #4]
   1ee4c:	ldrb	r1, [r1, r3]
   1ee50:	strb	r1, [r0]
   1ee54:	cmp	r1, #61	; 0x3d
   1ee58:	beq	1eec4 <__assert_fail@plt+0xd1c4>
   1ee5c:	cmp	r1, #58	; 0x3a
   1ee60:	beq	1eecc <__assert_fail@plt+0xd1cc>
   1ee64:	cmp	r1, #46	; 0x2e
   1ee68:	bne	1eeb0 <__assert_fail@plt+0xd1b0>
   1ee6c:	mov	r1, #26
   1ee70:	b	1eed8 <__assert_fail@plt+0xd1d8>
   1ee74:	cmp	ip, #93	; 0x5d
   1ee78:	beq	1ee94 <__assert_fail@plt+0xd194>
   1ee7c:	cmp	ip, #94	; 0x5e
   1ee80:	bne	1eeb4 <__assert_fail@plt+0xd1b4>
   1ee84:	mov	r1, #25
   1ee88:	b	1ee98 <__assert_fail@plt+0xd198>
   1ee8c:	mov	r1, #22
   1ee90:	b	1ee98 <__assert_fail@plt+0xd198>
   1ee94:	mov	r1, #21
   1ee98:	strb	r1, [r0, #4]
   1ee9c:	mov	r1, #1
   1eea0:	mov	r0, r1
   1eea4:	pop	{r4, sl, fp, pc}
   1eea8:	mov	r1, #0
   1eeac:	strb	r1, [r0]
   1eeb0:	strb	ip, [r0]
   1eeb4:	mov	r1, #1
   1eeb8:	strb	r1, [r0, #4]
   1eebc:	mov	r0, r1
   1eec0:	pop	{r4, sl, fp, pc}
   1eec4:	mov	r1, #28
   1eec8:	b	1eed8 <__assert_fail@plt+0xd1d8>
   1eecc:	tst	r2, #4
   1eed0:	beq	1eeb0 <__assert_fail@plt+0xd1b0>
   1eed4:	mov	r1, #30
   1eed8:	strb	r1, [r0, #4]
   1eedc:	mov	r1, #2
   1eee0:	mov	r0, r1
   1eee4:	pop	{r4, sl, fp, pc}
   1eee8:	asr	r2, r1, #31
   1eeec:	add	r2, r1, r2, lsr #27
   1eef0:	asr	r2, r2, #5
   1eef4:	ldr	ip, [r0, r2, lsl #2]
   1eef8:	and	r1, r1, #31
   1eefc:	mov	r3, #1
   1ef00:	orr	r1, ip, r3, lsl r1
   1ef04:	str	r1, [r0, r2, lsl #2]
   1ef08:	bx	lr
   1ef0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ef10:	add	fp, sp, #24
   1ef14:	sub	sp, sp, #8
   1ef18:	mov	r5, r3
   1ef1c:	mov	r8, r2
   1ef20:	mov	r6, r1
   1ef24:	mov	r9, r0
   1ef28:	ldr	r7, [r1, #40]	; 0x28
   1ef2c:	mov	r0, r1
   1ef30:	mov	r1, r7
   1ef34:	bl	1fb4c <__assert_fail@plt+0xde4c>
   1ef38:	cmp	r0, #2
   1ef3c:	blt	1ef74 <__assert_fail@plt+0xd274>
   1ef40:	mov	r4, r0
   1ef44:	mov	r0, #1
   1ef48:	str	r0, [r9]
   1ef4c:	mov	r0, r6
   1ef50:	mov	r1, r7
   1ef54:	bl	1d8b8 <__assert_fail@plt+0xbbb8>
   1ef58:	str	r0, [r9, #4]
   1ef5c:	ldr	r0, [r6, #40]	; 0x28
   1ef60:	add	r0, r0, r4
   1ef64:	str	r0, [r6, #40]	; 0x28
   1ef68:	mov	r0, #0
   1ef6c:	sub	sp, fp, #24
   1ef70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ef74:	ldr	r0, [fp, #12]
   1ef78:	ldr	r2, [fp, #8]
   1ef7c:	add	r1, r7, r5
   1ef80:	str	r1, [r6, #40]	; 0x28
   1ef84:	ldrb	r1, [r8, #4]
   1ef88:	sub	r1, r1, #22
   1ef8c:	cmp	r1, #8
   1ef90:	bhi	1effc <__assert_fail@plt+0xd2fc>
   1ef94:	add	r3, pc, #0
   1ef98:	ldr	pc, [r3, r1, lsl #2]
   1ef9c:	ldrdeq	lr, [r1], -r8
   1efa0:	strdeq	lr, [r1], -ip
   1efa4:	strdeq	lr, [r1], -ip
   1efa8:	strdeq	lr, [r1], -ip
   1efac:	andeq	lr, r1, r0, asr #31
   1efb0:	strdeq	lr, [r1], -ip
   1efb4:	andeq	lr, r1, r0, asr #31
   1efb8:	strdeq	lr, [r1], -ip
   1efbc:	andeq	lr, r1, r0, asr #31
   1efc0:	mov	r0, r9
   1efc4:	mov	r1, r6
   1efc8:	mov	r2, r8
   1efcc:	sub	sp, fp, #24
   1efd0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1efd4:	b	1fba8 <__assert_fail@plt+0xdea8>
   1efd8:	cmp	r0, #0
   1efdc:	bne	1effc <__assert_fail@plt+0xd2fc>
   1efe0:	mov	r0, sp
   1efe4:	mov	r1, r6
   1efe8:	bl	1ed74 <__assert_fail@plt+0xd074>
   1efec:	ldrb	r1, [sp, #4]
   1eff0:	mov	r0, #11
   1eff4:	cmp	r1, #21
   1eff8:	bne	1f00c <__assert_fail@plt+0xd30c>
   1effc:	mov	r0, #0
   1f000:	str	r0, [r9]
   1f004:	ldrb	r1, [r8]
   1f008:	strb	r1, [r9, #4]
   1f00c:	sub	sp, fp, #24
   1f010:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f018:	add	fp, sp, #28
   1f01c:	sub	sp, sp, #12
   1f020:	mov	sl, r0
   1f024:	ldr	r7, [r3]
   1f028:	mov	r0, #11
   1f02c:	cmp	r7, #2
   1f030:	cmpne	r7, #4
   1f034:	beq	1f04c <__assert_fail@plt+0xd34c>
   1f038:	ldr	r8, [fp, #8]
   1f03c:	ldr	r5, [r8]
   1f040:	cmp	r5, #2
   1f044:	cmpne	r5, #4
   1f048:	bne	1f054 <__assert_fail@plt+0xd354>
   1f04c:	sub	sp, fp, #28
   1f050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f054:	mov	r6, r3
   1f058:	mov	r9, r2
   1f05c:	mov	r4, r1
   1f060:	cmp	r7, #3
   1f064:	bne	1f078 <__assert_fail@plt+0xd378>
   1f068:	ldr	r0, [r6, #4]
   1f06c:	bl	11af0 <strlen@plt>
   1f070:	cmp	r0, #1
   1f074:	bhi	1f1bc <__assert_fail@plt+0xd4bc>
   1f078:	cmp	r5, #3
   1f07c:	bne	1f090 <__assert_fail@plt+0xd390>
   1f080:	ldr	r0, [r8, #4]
   1f084:	bl	11af0 <strlen@plt>
   1f088:	cmp	r0, #1
   1f08c:	bhi	1f1bc <__assert_fail@plt+0xd4bc>
   1f090:	cmp	r7, #3
   1f094:	beq	1f0a8 <__assert_fail@plt+0xd3a8>
   1f098:	mov	r0, #0
   1f09c:	cmp	r7, #0
   1f0a0:	ldrbeq	r0, [r6, #4]
   1f0a4:	b	1f0b0 <__assert_fail@plt+0xd3b0>
   1f0a8:	ldr	r0, [r6, #4]
   1f0ac:	ldrb	r0, [r0]
   1f0b0:	stmib	sp, {r4, r9}
   1f0b4:	cmp	r5, #3
   1f0b8:	beq	1f0cc <__assert_fail@plt+0xd3cc>
   1f0bc:	mov	r9, #0
   1f0c0:	cmp	r5, #0
   1f0c4:	ldrbeq	r9, [r8, #4]
   1f0c8:	b	1f0d4 <__assert_fail@plt+0xd3d4>
   1f0cc:	ldr	r1, [r8, #4]
   1f0d0:	ldrb	r9, [r1]
   1f0d4:	ldr	r4, [fp, #12]
   1f0d8:	cmp	r7, #3
   1f0dc:	cmpne	r7, #0
   1f0e0:	bne	1f0f4 <__assert_fail@plt+0xd3f4>
   1f0e4:	mov	r1, r4
   1f0e8:	bl	1fd68 <__assert_fail@plt+0xe068>
   1f0ec:	mov	r7, r0
   1f0f0:	b	1f0f8 <__assert_fail@plt+0xd3f8>
   1f0f4:	ldr	r7, [r6, #4]
   1f0f8:	ldr	r0, [r8]
   1f0fc:	cmp	r0, #3
   1f100:	cmpne	r0, #0
   1f104:	bne	1f11c <__assert_fail@plt+0xd41c>
   1f108:	mov	r0, r9
   1f10c:	mov	r1, r4
   1f110:	bl	1fd68 <__assert_fail@plt+0xe068>
   1f114:	mov	r6, r0
   1f118:	b	1f120 <__assert_fail@plt+0xd420>
   1f11c:	ldr	r6, [r8, #4]
   1f120:	ldr	r1, [sp, #8]
   1f124:	ldr	r5, [sp, #4]
   1f128:	mov	r0, #3
   1f12c:	cmn	r7, #1
   1f130:	cmnne	r6, #1
   1f134:	beq	1f04c <__assert_fail@plt+0xd34c>
   1f138:	ldr	r0, [fp, #16]
   1f13c:	tst	r0, #65536	; 0x10000
   1f140:	beq	1f150 <__assert_fail@plt+0xd450>
   1f144:	cmp	r7, r6
   1f148:	mov	r0, #11
   1f14c:	bhi	1f04c <__assert_fail@plt+0xd34c>
   1f150:	ldr	r0, [r4, #92]	; 0x5c
   1f154:	cmp	r0, #2
   1f158:	blt	1f18c <__assert_fail@plt+0xd48c>
   1f15c:	ldr	r0, [r5, #32]
   1f160:	ldr	r1, [r1]
   1f164:	cmp	r1, r0
   1f168:	beq	1f1c8 <__assert_fail@plt+0xd4c8>
   1f16c:	ldr	r0, [r5, #4]
   1f170:	ldr	r1, [r5, #32]
   1f174:	str	r7, [r0, r1, lsl #2]
   1f178:	ldr	r0, [r5, #8]
   1f17c:	ldr	r1, [r5, #32]
   1f180:	add	r2, r1, #1
   1f184:	str	r2, [r5, #32]
   1f188:	str	r6, [r0, r1, lsl #2]
   1f18c:	mov	r5, #0
   1f190:	cmp	r7, r5
   1f194:	cmpls	r5, r6
   1f198:	movls	r0, sl
   1f19c:	movls	r1, r5
   1f1a0:	blls	1eee8 <__assert_fail@plt+0xd1e8>
   1f1a4:	add	r5, r5, #1
   1f1a8:	cmp	r5, #256	; 0x100
   1f1ac:	bne	1f190 <__assert_fail@plt+0xd490>
   1f1b0:	mov	r0, #0
   1f1b4:	sub	sp, fp, #28
   1f1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1bc:	mov	r0, #3
   1f1c0:	sub	sp, fp, #28
   1f1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1c8:	mov	r1, #1
   1f1cc:	orr	r8, r1, r0, lsl #1
   1f1d0:	lsl	r4, r8, #2
   1f1d4:	ldr	r0, [r5, #4]
   1f1d8:	mov	r1, r4
   1f1dc:	bl	1a350 <__assert_fail@plt+0x8650>
   1f1e0:	mov	r9, r0
   1f1e4:	ldr	r0, [r5, #8]
   1f1e8:	mov	r1, r4
   1f1ec:	bl	1a350 <__assert_fail@plt+0x8650>
   1f1f0:	mov	r4, r0
   1f1f4:	cmp	r9, #0
   1f1f8:	cmpne	r4, #0
   1f1fc:	bne	1f21c <__assert_fail@plt+0xd51c>
   1f200:	mov	r0, r9
   1f204:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1f208:	mov	r0, r4
   1f20c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   1f210:	mov	r0, #12
   1f214:	sub	sp, fp, #28
   1f218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f21c:	ldr	r5, [sp, #4]
   1f220:	str	r9, [r5, #4]
   1f224:	str	r4, [r5, #8]
   1f228:	ldr	r0, [sp, #8]
   1f22c:	str	r8, [r0]
   1f230:	b	1f16c <__assert_fail@plt+0xd46c>
   1f234:	push	{r4, r5, fp, lr}
   1f238:	add	fp, sp, #8
   1f23c:	mov	r5, r1
   1f240:	mov	r4, r0
   1f244:	mov	r0, r1
   1f248:	bl	11af0 <strlen@plt>
   1f24c:	cmp	r0, #1
   1f250:	bne	1f268 <__assert_fail@plt+0xd568>
   1f254:	ldrb	r1, [r5]
   1f258:	mov	r0, r4
   1f25c:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f260:	mov	r0, #0
   1f264:	pop	{r4, r5, fp, pc}
   1f268:	mov	r0, #3
   1f26c:	pop	{r4, r5, fp, pc}
   1f270:	push	{r4, r5, fp, lr}
   1f274:	add	fp, sp, #8
   1f278:	mov	r5, r1
   1f27c:	mov	r4, r0
   1f280:	mov	r0, r1
   1f284:	bl	11af0 <strlen@plt>
   1f288:	cmp	r0, #1
   1f28c:	bne	1f2a4 <__assert_fail@plt+0xd5a4>
   1f290:	ldrb	r1, [r5]
   1f294:	mov	r0, r4
   1f298:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f29c:	mov	r0, #0
   1f2a0:	pop	{r4, r5, fp, pc}
   1f2a4:	mov	r0, #3
   1f2a8:	pop	{r4, r5, fp, pc}
   1f2ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f2b0:	add	fp, sp, #24
   1f2b4:	mov	r5, r3
   1f2b8:	mov	r7, r2
   1f2bc:	mov	r4, r1
   1f2c0:	mov	r8, r0
   1f2c4:	ldr	r6, [fp, #8]
   1f2c8:	ldrb	r0, [fp, #14]
   1f2cc:	tst	r0, #64	; 0x40
   1f2d0:	beq	1f30c <__assert_fail@plt+0xd60c>
   1f2d4:	movw	r1, #44972	; 0xafac
   1f2d8:	movt	r1, #2
   1f2dc:	mov	r0, r6
   1f2e0:	bl	11898 <strcmp@plt>
   1f2e4:	cmp	r0, #0
   1f2e8:	beq	1f304 <__assert_fail@plt+0xd604>
   1f2ec:	movw	r1, #44978	; 0xafb2
   1f2f0:	movt	r1, #2
   1f2f4:	mov	r0, r6
   1f2f8:	bl	11898 <strcmp@plt>
   1f2fc:	cmp	r0, #0
   1f300:	bne	1f30c <__assert_fail@plt+0xd60c>
   1f304:	movw	r6, #44984	; 0xafb8
   1f308:	movt	r6, #2
   1f30c:	ldr	r0, [r7, #36]	; 0x24
   1f310:	ldr	r1, [r5]
   1f314:	cmp	r1, r0
   1f318:	beq	1f7e8 <__assert_fail@plt+0xdae8>
   1f31c:	mov	r0, r6
   1f320:	bl	11868 <wctype@plt>
   1f324:	ldr	r1, [r7, #12]
   1f328:	ldr	r2, [r7, #36]	; 0x24
   1f32c:	add	r3, r2, #1
   1f330:	str	r3, [r7, #36]	; 0x24
   1f334:	str	r0, [r1, r2, lsl #2]
   1f338:	movw	r1, #44958	; 0xaf9e
   1f33c:	movt	r1, #2
   1f340:	mov	r0, r6
   1f344:	bl	11898 <strcmp@plt>
   1f348:	cmp	r0, #0
   1f34c:	beq	1f4ac <__assert_fail@plt+0xd7ac>
   1f350:	movw	r1, #44990	; 0xafbe
   1f354:	movt	r1, #2
   1f358:	mov	r0, r6
   1f35c:	bl	11898 <strcmp@plt>
   1f360:	cmp	r0, #0
   1f364:	beq	1f4f4 <__assert_fail@plt+0xd7f4>
   1f368:	movw	r1, #44978	; 0xafb2
   1f36c:	movt	r1, #2
   1f370:	mov	r0, r6
   1f374:	bl	11898 <strcmp@plt>
   1f378:	cmp	r0, #0
   1f37c:	beq	1f53c <__assert_fail@plt+0xd83c>
   1f380:	movw	r1, #44966	; 0xafa6
   1f384:	movt	r1, #2
   1f388:	mov	r0, r6
   1f38c:	bl	11898 <strcmp@plt>
   1f390:	cmp	r0, #0
   1f394:	beq	1f588 <__assert_fail@plt+0xd888>
   1f398:	movw	r1, #44984	; 0xafb8
   1f39c:	movt	r1, #2
   1f3a0:	mov	r0, r6
   1f3a4:	bl	11898 <strcmp@plt>
   1f3a8:	cmp	r0, #0
   1f3ac:	beq	1f5d4 <__assert_fail@plt+0xd8d4>
   1f3b0:	movw	r1, #45015	; 0xafd7
   1f3b4:	movt	r1, #2
   1f3b8:	mov	r0, r6
   1f3bc:	bl	11898 <strcmp@plt>
   1f3c0:	cmp	r0, #0
   1f3c4:	beq	1f620 <__assert_fail@plt+0xd920>
   1f3c8:	movw	r1, #39083	; 0x98ab
   1f3cc:	movt	r1, #2
   1f3d0:	mov	r0, r6
   1f3d4:	bl	11898 <strcmp@plt>
   1f3d8:	cmp	r0, #0
   1f3dc:	beq	1f66c <__assert_fail@plt+0xd96c>
   1f3e0:	movw	r1, #44972	; 0xafac
   1f3e4:	movt	r1, #2
   1f3e8:	mov	r0, r6
   1f3ec:	bl	11898 <strcmp@plt>
   1f3f0:	cmp	r0, #0
   1f3f4:	beq	1f6b8 <__assert_fail@plt+0xd9b8>
   1f3f8:	movw	r1, #44996	; 0xafc4
   1f3fc:	movt	r1, #2
   1f400:	mov	r0, r6
   1f404:	bl	11898 <strcmp@plt>
   1f408:	cmp	r0, #0
   1f40c:	beq	1f704 <__assert_fail@plt+0xda04>
   1f410:	movw	r1, #45002	; 0xafca
   1f414:	movt	r1, #2
   1f418:	mov	r0, r6
   1f41c:	bl	11898 <strcmp@plt>
   1f420:	cmp	r0, #0
   1f424:	beq	1f74c <__assert_fail@plt+0xda4c>
   1f428:	movw	r1, #45008	; 0xafd0
   1f42c:	movt	r1, #2
   1f430:	mov	r0, r6
   1f434:	bl	11898 <strcmp@plt>
   1f438:	cmp	r0, #0
   1f43c:	beq	1f7a0 <__assert_fail@plt+0xdaa0>
   1f440:	movw	r1, #45014	; 0xafd6
   1f444:	movt	r1, #2
   1f448:	mov	r0, r6
   1f44c:	bl	11898 <strcmp@plt>
   1f450:	mov	r1, r0
   1f454:	mov	r0, #4
   1f458:	cmp	r1, #0
   1f45c:	bne	1f7e4 <__assert_fail@plt+0xdae4>
   1f460:	bl	11ab4 <__ctype_b_loc@plt>
   1f464:	mov	r6, r0
   1f468:	cmp	r8, #0
   1f46c:	bne	1fac0 <__assert_fail@plt+0xddc0>
   1f470:	mov	r7, #0
   1f474:	mov	r5, #0
   1f478:	ldr	r0, [r6]
   1f47c:	add	r0, r0, r7
   1f480:	ldrb	r0, [r0, #1]
   1f484:	tst	r0, #16
   1f488:	movne	r0, r4
   1f48c:	movne	r1, r5
   1f490:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f494:	add	r7, r7, #2
   1f498:	add	r5, r5, #1
   1f49c:	mov	r0, #0
   1f4a0:	cmp	r5, #256	; 0x100
   1f4a4:	bne	1f478 <__assert_fail@plt+0xd778>
   1f4a8:	b	1f7e4 <__assert_fail@plt+0xdae4>
   1f4ac:	bl	11ab4 <__ctype_b_loc@plt>
   1f4b0:	mov	r6, r0
   1f4b4:	cmp	r8, #0
   1f4b8:	bne	1f810 <__assert_fail@plt+0xdb10>
   1f4bc:	mov	r7, #0
   1f4c0:	mov	r5, #0
   1f4c4:	ldr	r0, [r6]
   1f4c8:	ldrb	r0, [r0, r7]
   1f4cc:	tst	r0, #8
   1f4d0:	movne	r0, r4
   1f4d4:	movne	r1, r5
   1f4d8:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f4dc:	add	r7, r7, #2
   1f4e0:	add	r5, r5, #1
   1f4e4:	cmp	r5, #256	; 0x100
   1f4e8:	bne	1f4c4 <__assert_fail@plt+0xd7c4>
   1f4ec:	mov	r0, #0
   1f4f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f4f4:	bl	11ab4 <__ctype_b_loc@plt>
   1f4f8:	mov	r6, r0
   1f4fc:	cmp	r8, #0
   1f500:	bne	1f84c <__assert_fail@plt+0xdb4c>
   1f504:	mov	r7, #0
   1f508:	mov	r5, #0
   1f50c:	ldr	r0, [r6]
   1f510:	ldrb	r0, [r0, r7]
   1f514:	tst	r0, #2
   1f518:	movne	r0, r4
   1f51c:	movne	r1, r5
   1f520:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f524:	add	r7, r7, #2
   1f528:	add	r5, r5, #1
   1f52c:	cmp	r5, #256	; 0x100
   1f530:	bne	1f50c <__assert_fail@plt+0xd80c>
   1f534:	mov	r0, #0
   1f538:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f53c:	bl	11ab4 <__ctype_b_loc@plt>
   1f540:	mov	r6, r0
   1f544:	cmp	r8, #0
   1f548:	bne	1f888 <__assert_fail@plt+0xdb88>
   1f54c:	mov	r7, #0
   1f550:	mov	r5, #0
   1f554:	ldr	r0, [r6]
   1f558:	add	r0, r0, r7
   1f55c:	ldrb	r0, [r0, #1]
   1f560:	tst	r0, #2
   1f564:	movne	r0, r4
   1f568:	movne	r1, r5
   1f56c:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f570:	add	r7, r7, #2
   1f574:	add	r5, r5, #1
   1f578:	cmp	r5, #256	; 0x100
   1f57c:	bne	1f554 <__assert_fail@plt+0xd854>
   1f580:	mov	r0, #0
   1f584:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f588:	bl	11ab4 <__ctype_b_loc@plt>
   1f58c:	mov	r6, r0
   1f590:	cmp	r8, #0
   1f594:	bne	1f8c8 <__assert_fail@plt+0xdbc8>
   1f598:	mov	r7, #0
   1f59c:	mov	r5, #0
   1f5a0:	ldr	r0, [r6]
   1f5a4:	add	r0, r0, r7
   1f5a8:	ldrb	r0, [r0, #1]
   1f5ac:	tst	r0, #32
   1f5b0:	movne	r0, r4
   1f5b4:	movne	r1, r5
   1f5b8:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f5bc:	add	r7, r7, #2
   1f5c0:	add	r5, r5, #1
   1f5c4:	cmp	r5, #256	; 0x100
   1f5c8:	bne	1f5a0 <__assert_fail@plt+0xd8a0>
   1f5cc:	mov	r0, #0
   1f5d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f5d4:	bl	11ab4 <__ctype_b_loc@plt>
   1f5d8:	mov	r6, r0
   1f5dc:	cmp	r8, #0
   1f5e0:	bne	1f908 <__assert_fail@plt+0xdc08>
   1f5e4:	mov	r7, #0
   1f5e8:	mov	r5, #0
   1f5ec:	ldr	r0, [r6]
   1f5f0:	add	r0, r0, r7
   1f5f4:	ldrb	r0, [r0, #1]
   1f5f8:	tst	r0, #4
   1f5fc:	movne	r0, r4
   1f600:	movne	r1, r5
   1f604:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f608:	add	r7, r7, #2
   1f60c:	add	r5, r5, #1
   1f610:	cmp	r5, #256	; 0x100
   1f614:	bne	1f5ec <__assert_fail@plt+0xd8ec>
   1f618:	mov	r0, #0
   1f61c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f620:	bl	11ab4 <__ctype_b_loc@plt>
   1f624:	mov	r6, r0
   1f628:	cmp	r8, #0
   1f62c:	bne	1f948 <__assert_fail@plt+0xdc48>
   1f630:	mov	r7, #0
   1f634:	mov	r5, #0
   1f638:	ldr	r0, [r6]
   1f63c:	add	r0, r0, r7
   1f640:	ldrb	r0, [r0, #1]
   1f644:	tst	r0, #8
   1f648:	movne	r0, r4
   1f64c:	movne	r1, r5
   1f650:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f654:	add	r7, r7, #2
   1f658:	add	r5, r5, #1
   1f65c:	cmp	r5, #256	; 0x100
   1f660:	bne	1f638 <__assert_fail@plt+0xd938>
   1f664:	mov	r0, #0
   1f668:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f66c:	bl	11ab4 <__ctype_b_loc@plt>
   1f670:	mov	r6, r0
   1f674:	cmp	r8, #0
   1f678:	bne	1f988 <__assert_fail@plt+0xdc88>
   1f67c:	mov	r7, #0
   1f680:	mov	r5, #0
   1f684:	ldr	r0, [r6]
   1f688:	add	r0, r0, r7
   1f68c:	ldrb	r0, [r0, #1]
   1f690:	tst	r0, #64	; 0x40
   1f694:	movne	r0, r4
   1f698:	movne	r1, r5
   1f69c:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f6a0:	add	r7, r7, #2
   1f6a4:	add	r5, r5, #1
   1f6a8:	mov	r0, #0
   1f6ac:	cmp	r5, #256	; 0x100
   1f6b0:	bne	1f684 <__assert_fail@plt+0xd984>
   1f6b4:	b	1f7e4 <__assert_fail@plt+0xdae4>
   1f6b8:	bl	11ab4 <__ctype_b_loc@plt>
   1f6bc:	mov	r6, r0
   1f6c0:	cmp	r8, #0
   1f6c4:	bne	1f9c8 <__assert_fail@plt+0xdcc8>
   1f6c8:	mov	r7, #0
   1f6cc:	mov	r5, #0
   1f6d0:	ldr	r0, [r6]
   1f6d4:	add	r0, r0, r7
   1f6d8:	ldrb	r0, [r0, #1]
   1f6dc:	tst	r0, #1
   1f6e0:	movne	r0, r4
   1f6e4:	movne	r1, r5
   1f6e8:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f6ec:	add	r7, r7, #2
   1f6f0:	add	r5, r5, #1
   1f6f4:	mov	r0, #0
   1f6f8:	cmp	r5, #256	; 0x100
   1f6fc:	bne	1f6d0 <__assert_fail@plt+0xd9d0>
   1f700:	b	1f7e4 <__assert_fail@plt+0xdae4>
   1f704:	bl	11ab4 <__ctype_b_loc@plt>
   1f708:	mov	r6, r0
   1f70c:	cmp	r8, #0
   1f710:	bne	1fa08 <__assert_fail@plt+0xdd08>
   1f714:	mov	r7, #0
   1f718:	mov	r5, #0
   1f71c:	ldr	r0, [r6]
   1f720:	ldrb	r0, [r0, r7]
   1f724:	tst	r0, #1
   1f728:	movne	r0, r4
   1f72c:	movne	r1, r5
   1f730:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f734:	add	r7, r7, #2
   1f738:	add	r5, r5, #1
   1f73c:	mov	r0, #0
   1f740:	cmp	r5, #256	; 0x100
   1f744:	bne	1f71c <__assert_fail@plt+0xda1c>
   1f748:	b	1f7e4 <__assert_fail@plt+0xdae4>
   1f74c:	bl	11ab4 <__ctype_b_loc@plt>
   1f750:	mov	r6, r0
   1f754:	cmp	r8, #0
   1f758:	bne	1fa44 <__assert_fail@plt+0xdd44>
   1f75c:	mov	r7, #0
   1f760:	mov	r5, #0
   1f764:	b	1f77c <__assert_fail@plt+0xda7c>
   1f768:	add	r7, r7, #2
   1f76c:	add	r5, r5, #1
   1f770:	mov	r0, #0
   1f774:	cmp	r5, #256	; 0x100
   1f778:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1f77c:	ldr	r0, [r6]
   1f780:	add	r0, r0, r7
   1f784:	ldrsh	r0, [r0]
   1f788:	cmn	r0, #1
   1f78c:	bgt	1f768 <__assert_fail@plt+0xda68>
   1f790:	mov	r0, r4
   1f794:	mov	r1, r5
   1f798:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f79c:	b	1f768 <__assert_fail@plt+0xda68>
   1f7a0:	bl	11ab4 <__ctype_b_loc@plt>
   1f7a4:	mov	r6, r0
   1f7a8:	cmp	r8, #0
   1f7ac:	bne	1fa84 <__assert_fail@plt+0xdd84>
   1f7b0:	mov	r7, #0
   1f7b4:	mov	r5, #0
   1f7b8:	ldr	r0, [r6]
   1f7bc:	ldrb	r0, [r0, r7]
   1f7c0:	tst	r0, #4
   1f7c4:	movne	r0, r4
   1f7c8:	movne	r1, r5
   1f7cc:	blne	1eee8 <__assert_fail@plt+0xd1e8>
   1f7d0:	add	r7, r7, #2
   1f7d4:	add	r5, r5, #1
   1f7d8:	mov	r0, #0
   1f7dc:	cmp	r5, #256	; 0x100
   1f7e0:	bne	1f7b8 <__assert_fail@plt+0xdab8>
   1f7e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f7e8:	mov	r1, #1
   1f7ec:	orr	r9, r1, r0, lsl #1
   1f7f0:	lsl	r1, r9, #2
   1f7f4:	ldr	r0, [r7, #12]
   1f7f8:	bl	1a350 <__assert_fail@plt+0x8650>
   1f7fc:	cmp	r0, #0
   1f800:	beq	1fb00 <__assert_fail@plt+0xde00>
   1f804:	str	r0, [r7, #12]
   1f808:	str	r9, [r5]
   1f80c:	b	1f31c <__assert_fail@plt+0xd61c>
   1f810:	mov	r5, #0
   1f814:	b	1f82c <__assert_fail@plt+0xdb2c>
   1f818:	add	r8, r8, #1
   1f81c:	add	r5, r5, #2
   1f820:	mov	r0, #0
   1f824:	cmp	r5, #512	; 0x200
   1f828:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1f82c:	ldr	r0, [r6]
   1f830:	ldrb	r0, [r0, r5]
   1f834:	tst	r0, #8
   1f838:	beq	1f818 <__assert_fail@plt+0xdb18>
   1f83c:	ldrb	r1, [r8]
   1f840:	mov	r0, r4
   1f844:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f848:	b	1f818 <__assert_fail@plt+0xdb18>
   1f84c:	mov	r5, #0
   1f850:	b	1f868 <__assert_fail@plt+0xdb68>
   1f854:	add	r8, r8, #1
   1f858:	add	r5, r5, #2
   1f85c:	mov	r0, #0
   1f860:	cmp	r5, #512	; 0x200
   1f864:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1f868:	ldr	r0, [r6]
   1f86c:	ldrb	r0, [r0, r5]
   1f870:	tst	r0, #2
   1f874:	beq	1f854 <__assert_fail@plt+0xdb54>
   1f878:	ldrb	r1, [r8]
   1f87c:	mov	r0, r4
   1f880:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f884:	b	1f854 <__assert_fail@plt+0xdb54>
   1f888:	mov	r5, #0
   1f88c:	b	1f8a4 <__assert_fail@plt+0xdba4>
   1f890:	add	r8, r8, #1
   1f894:	add	r5, r5, #2
   1f898:	mov	r0, #0
   1f89c:	cmp	r5, #512	; 0x200
   1f8a0:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1f8a4:	ldr	r0, [r6]
   1f8a8:	add	r0, r0, r5
   1f8ac:	ldrb	r0, [r0, #1]
   1f8b0:	tst	r0, #2
   1f8b4:	beq	1f890 <__assert_fail@plt+0xdb90>
   1f8b8:	ldrb	r1, [r8]
   1f8bc:	mov	r0, r4
   1f8c0:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f8c4:	b	1f890 <__assert_fail@plt+0xdb90>
   1f8c8:	mov	r5, #0
   1f8cc:	b	1f8e4 <__assert_fail@plt+0xdbe4>
   1f8d0:	add	r8, r8, #1
   1f8d4:	add	r5, r5, #2
   1f8d8:	mov	r0, #0
   1f8dc:	cmp	r5, #512	; 0x200
   1f8e0:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1f8e4:	ldr	r0, [r6]
   1f8e8:	add	r0, r0, r5
   1f8ec:	ldrb	r0, [r0, #1]
   1f8f0:	tst	r0, #32
   1f8f4:	beq	1f8d0 <__assert_fail@plt+0xdbd0>
   1f8f8:	ldrb	r1, [r8]
   1f8fc:	mov	r0, r4
   1f900:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f904:	b	1f8d0 <__assert_fail@plt+0xdbd0>
   1f908:	mov	r5, #0
   1f90c:	b	1f924 <__assert_fail@plt+0xdc24>
   1f910:	add	r8, r8, #1
   1f914:	add	r5, r5, #2
   1f918:	mov	r0, #0
   1f91c:	cmp	r5, #512	; 0x200
   1f920:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1f924:	ldr	r0, [r6]
   1f928:	add	r0, r0, r5
   1f92c:	ldrb	r0, [r0, #1]
   1f930:	tst	r0, #4
   1f934:	beq	1f910 <__assert_fail@plt+0xdc10>
   1f938:	ldrb	r1, [r8]
   1f93c:	mov	r0, r4
   1f940:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f944:	b	1f910 <__assert_fail@plt+0xdc10>
   1f948:	mov	r5, #0
   1f94c:	b	1f964 <__assert_fail@plt+0xdc64>
   1f950:	add	r8, r8, #1
   1f954:	add	r5, r5, #2
   1f958:	mov	r0, #0
   1f95c:	cmp	r5, #512	; 0x200
   1f960:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1f964:	ldr	r0, [r6]
   1f968:	add	r0, r0, r5
   1f96c:	ldrb	r0, [r0, #1]
   1f970:	tst	r0, #8
   1f974:	beq	1f950 <__assert_fail@plt+0xdc50>
   1f978:	ldrb	r1, [r8]
   1f97c:	mov	r0, r4
   1f980:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f984:	b	1f950 <__assert_fail@plt+0xdc50>
   1f988:	mov	r5, #0
   1f98c:	b	1f9a4 <__assert_fail@plt+0xdca4>
   1f990:	add	r8, r8, #1
   1f994:	add	r5, r5, #2
   1f998:	mov	r0, #0
   1f99c:	cmp	r5, #512	; 0x200
   1f9a0:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1f9a4:	ldr	r0, [r6]
   1f9a8:	add	r0, r0, r5
   1f9ac:	ldrb	r0, [r0, #1]
   1f9b0:	tst	r0, #64	; 0x40
   1f9b4:	beq	1f990 <__assert_fail@plt+0xdc90>
   1f9b8:	ldrb	r1, [r8]
   1f9bc:	mov	r0, r4
   1f9c0:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1f9c4:	b	1f990 <__assert_fail@plt+0xdc90>
   1f9c8:	mov	r5, #0
   1f9cc:	b	1f9e4 <__assert_fail@plt+0xdce4>
   1f9d0:	add	r8, r8, #1
   1f9d4:	add	r5, r5, #2
   1f9d8:	mov	r0, #0
   1f9dc:	cmp	r5, #512	; 0x200
   1f9e0:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1f9e4:	ldr	r0, [r6]
   1f9e8:	add	r0, r0, r5
   1f9ec:	ldrb	r0, [r0, #1]
   1f9f0:	tst	r0, #1
   1f9f4:	beq	1f9d0 <__assert_fail@plt+0xdcd0>
   1f9f8:	ldrb	r1, [r8]
   1f9fc:	mov	r0, r4
   1fa00:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1fa04:	b	1f9d0 <__assert_fail@plt+0xdcd0>
   1fa08:	mov	r5, #0
   1fa0c:	b	1fa24 <__assert_fail@plt+0xdd24>
   1fa10:	add	r8, r8, #1
   1fa14:	add	r5, r5, #2
   1fa18:	mov	r0, #0
   1fa1c:	cmp	r5, #512	; 0x200
   1fa20:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1fa24:	ldr	r0, [r6]
   1fa28:	ldrb	r0, [r0, r5]
   1fa2c:	tst	r0, #1
   1fa30:	beq	1fa10 <__assert_fail@plt+0xdd10>
   1fa34:	ldrb	r1, [r8]
   1fa38:	mov	r0, r4
   1fa3c:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1fa40:	b	1fa10 <__assert_fail@plt+0xdd10>
   1fa44:	mov	r5, #0
   1fa48:	b	1fa60 <__assert_fail@plt+0xdd60>
   1fa4c:	add	r8, r8, #1
   1fa50:	add	r5, r5, #2
   1fa54:	mov	r0, #0
   1fa58:	cmp	r5, #512	; 0x200
   1fa5c:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1fa60:	ldr	r0, [r6]
   1fa64:	add	r0, r0, r5
   1fa68:	ldrsh	r0, [r0]
   1fa6c:	cmn	r0, #1
   1fa70:	bgt	1fa4c <__assert_fail@plt+0xdd4c>
   1fa74:	ldrb	r1, [r8]
   1fa78:	mov	r0, r4
   1fa7c:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1fa80:	b	1fa4c <__assert_fail@plt+0xdd4c>
   1fa84:	mov	r5, #0
   1fa88:	b	1faa0 <__assert_fail@plt+0xdda0>
   1fa8c:	add	r8, r8, #1
   1fa90:	add	r5, r5, #2
   1fa94:	mov	r0, #0
   1fa98:	cmp	r5, #512	; 0x200
   1fa9c:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1faa0:	ldr	r0, [r6]
   1faa4:	ldrb	r0, [r0, r5]
   1faa8:	tst	r0, #4
   1faac:	beq	1fa8c <__assert_fail@plt+0xdd8c>
   1fab0:	ldrb	r1, [r8]
   1fab4:	mov	r0, r4
   1fab8:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1fabc:	b	1fa8c <__assert_fail@plt+0xdd8c>
   1fac0:	mov	r5, #0
   1fac4:	b	1fadc <__assert_fail@plt+0xdddc>
   1fac8:	add	r8, r8, #1
   1facc:	add	r5, r5, #2
   1fad0:	mov	r0, #0
   1fad4:	cmp	r5, #512	; 0x200
   1fad8:	beq	1f7e4 <__assert_fail@plt+0xdae4>
   1fadc:	ldr	r0, [r6]
   1fae0:	add	r0, r0, r5
   1fae4:	ldrb	r0, [r0, #1]
   1fae8:	tst	r0, #16
   1faec:	beq	1fac8 <__assert_fail@plt+0xddc8>
   1faf0:	ldrb	r1, [r8]
   1faf4:	mov	r0, r4
   1faf8:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   1fafc:	b	1fac8 <__assert_fail@plt+0xddc8>
   1fb00:	mov	r0, #12
   1fb04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fb08:	mov	r1, #0
   1fb0c:	ldr	r2, [r0, r1, lsl #2]
   1fb10:	mvn	r2, r2
   1fb14:	str	r2, [r0, r1, lsl #2]
   1fb18:	add	r1, r1, #1
   1fb1c:	cmp	r1, #8
   1fb20:	bne	1fb0c <__assert_fail@plt+0xde0c>
   1fb24:	bx	lr
   1fb28:	mov	r2, #0
   1fb2c:	ldr	ip, [r1, r2, lsl #2]
   1fb30:	ldr	r3, [r0, r2, lsl #2]
   1fb34:	and	r3, r3, ip
   1fb38:	str	r3, [r0, r2, lsl #2]
   1fb3c:	add	r2, r2, #1
   1fb40:	cmp	r2, #8
   1fb44:	bne	1fb2c <__assert_fail@plt+0xde2c>
   1fb48:	bx	lr
   1fb4c:	push	{fp, lr}
   1fb50:	mov	fp, sp
   1fb54:	mov	lr, r0
   1fb58:	ldr	r3, [r0, #80]	; 0x50
   1fb5c:	mov	r0, #1
   1fb60:	cmp	r3, #1
   1fb64:	beq	1fba4 <__assert_fail@plt+0xdea4>
   1fb68:	ldr	ip, [lr, #28]
   1fb6c:	add	r3, r1, #1
   1fb70:	cmp	r3, ip
   1fb74:	popge	{fp, pc}
   1fb78:	ldr	r0, [lr, #8]
   1fb7c:	add	ip, r0, r1, lsl #2
   1fb80:	mov	r0, #1
   1fb84:	ldr	r3, [ip, r0, lsl #2]
   1fb88:	cmn	r3, #1
   1fb8c:	bne	1fba4 <__assert_fail@plt+0xdea4>
   1fb90:	add	r0, r0, #1
   1fb94:	add	r3, r1, r0
   1fb98:	ldr	r2, [lr, #28]
   1fb9c:	cmp	r3, r2
   1fba0:	blt	1fb84 <__assert_fail@plt+0xde84>
   1fba4:	pop	{fp, pc}
   1fba8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fbac:	add	fp, sp, #24
   1fbb0:	mov	r7, r1
   1fbb4:	mov	r9, r0
   1fbb8:	ldr	r0, [r1, #40]	; 0x28
   1fbbc:	ldr	r1, [r1, #56]	; 0x38
   1fbc0:	mov	r8, #7
   1fbc4:	cmp	r1, r0
   1fbc8:	ble	1fc8c <__assert_fail@plt+0xdf8c>
   1fbcc:	mov	r6, r2
   1fbd0:	ldrb	r5, [r2]
   1fbd4:	mov	r4, #0
   1fbd8:	b	1fbf0 <__assert_fail@plt+0xdef0>
   1fbdc:	ldr	r1, [r9, #4]
   1fbe0:	strb	r0, [r1, r4]
   1fbe4:	add	r4, r4, #1
   1fbe8:	cmp	r4, #32
   1fbec:	beq	1fc8c <__assert_fail@plt+0xdf8c>
   1fbf0:	ldrb	r0, [r6, #4]
   1fbf4:	cmp	r0, #30
   1fbf8:	bne	1fc08 <__assert_fail@plt+0xdf08>
   1fbfc:	mov	r0, r7
   1fc00:	bl	1fc94 <__assert_fail@plt+0xdf94>
   1fc04:	b	1fc1c <__assert_fail@plt+0xdf1c>
   1fc08:	ldr	r0, [r7, #4]
   1fc0c:	ldr	r1, [r7, #40]	; 0x28
   1fc10:	add	r2, r1, #1
   1fc14:	str	r2, [r7, #40]	; 0x28
   1fc18:	ldrb	r0, [r0, r1]
   1fc1c:	ldr	r1, [r7, #40]	; 0x28
   1fc20:	ldr	r2, [r7, #56]	; 0x38
   1fc24:	cmp	r2, r1
   1fc28:	ble	1fc8c <__assert_fail@plt+0xdf8c>
   1fc2c:	cmp	r0, r5
   1fc30:	bne	1fbdc <__assert_fail@plt+0xdedc>
   1fc34:	ldr	r2, [r7, #4]
   1fc38:	ldrb	r2, [r2, r1]
   1fc3c:	cmp	r2, #93	; 0x5d
   1fc40:	bne	1fbdc <__assert_fail@plt+0xdedc>
   1fc44:	add	r0, r1, #1
   1fc48:	str	r0, [r7, #40]	; 0x28
   1fc4c:	ldr	r0, [r9, #4]
   1fc50:	mov	r8, #0
   1fc54:	strb	r8, [r0, r4]
   1fc58:	ldrb	r0, [r6, #4]
   1fc5c:	cmp	r0, #30
   1fc60:	beq	1fc7c <__assert_fail@plt+0xdf7c>
   1fc64:	cmp	r0, #28
   1fc68:	beq	1fc84 <__assert_fail@plt+0xdf84>
   1fc6c:	cmp	r0, #26
   1fc70:	bne	1fc8c <__assert_fail@plt+0xdf8c>
   1fc74:	mov	r0, #3
   1fc78:	b	1fc88 <__assert_fail@plt+0xdf88>
   1fc7c:	mov	r0, #4
   1fc80:	b	1fc88 <__assert_fail@plt+0xdf88>
   1fc84:	mov	r0, #2
   1fc88:	str	r0, [r9]
   1fc8c:	mov	r0, r8
   1fc90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fc94:	push	{r4, r5, r6, sl, fp, lr}
   1fc98:	add	fp, sp, #16
   1fc9c:	mov	r4, r0
   1fca0:	ldrb	r0, [r0, #75]	; 0x4b
   1fca4:	cmp	r0, #0
   1fca8:	bne	1fcc8 <__assert_fail@plt+0xdfc8>
   1fcac:	ldr	r0, [r4, #4]
   1fcb0:	ldr	r1, [r4, #40]	; 0x28
   1fcb4:	add	r2, r1, #1
   1fcb8:	str	r2, [r4, #40]	; 0x28
   1fcbc:	ldrb	r6, [r0, r1]
   1fcc0:	uxtb	r0, r6
   1fcc4:	pop	{r4, r5, r6, sl, fp, pc}
   1fcc8:	ldrb	r0, [r4, #76]	; 0x4c
   1fccc:	cmp	r0, #0
   1fcd0:	beq	1fd34 <__assert_fail@plt+0xe034>
   1fcd4:	ldr	r0, [r4, #28]
   1fcd8:	ldr	r5, [r4, #40]	; 0x28
   1fcdc:	cmp	r5, r0
   1fce0:	beq	1fcf4 <__assert_fail@plt+0xdff4>
   1fce4:	ldr	r0, [r4, #8]
   1fce8:	ldr	r0, [r0, r5, lsl #2]
   1fcec:	cmn	r0, #1
   1fcf0:	beq	1fd50 <__assert_fail@plt+0xe050>
   1fcf4:	ldr	r0, [r4]
   1fcf8:	ldr	r1, [r4, #12]
   1fcfc:	ldr	r2, [r4, #24]
   1fd00:	ldr	r1, [r1, r5, lsl #2]
   1fd04:	add	r1, r2, r1
   1fd08:	add	r0, r0, r1
   1fd0c:	ldrsb	r6, [r0]
   1fd10:	cmn	r6, #1
   1fd14:	ble	1fd50 <__assert_fail@plt+0xe050>
   1fd18:	mov	r0, r4
   1fd1c:	mov	r1, r5
   1fd20:	bl	1fb4c <__assert_fail@plt+0xde4c>
   1fd24:	add	r0, r0, r5
   1fd28:	str	r0, [r4, #40]	; 0x28
   1fd2c:	uxtb	r0, r6
   1fd30:	pop	{r4, r5, r6, sl, fp, pc}
   1fd34:	ldr	r0, [r4]
   1fd38:	ldr	r1, [r4, #24]
   1fd3c:	ldr	r2, [r4, #40]	; 0x28
   1fd40:	add	r3, r2, #1
   1fd44:	str	r3, [r4, #40]	; 0x28
   1fd48:	add	r1, r2, r1
   1fd4c:	b	1fcbc <__assert_fail@plt+0xdfbc>
   1fd50:	add	r0, r5, #1
   1fd54:	str	r0, [r4, #40]	; 0x28
   1fd58:	ldr	r0, [r4, #4]
   1fd5c:	ldrb	r6, [r0, r5]
   1fd60:	uxtb	r0, r6
   1fd64:	pop	{r4, r5, r6, sl, fp, pc}
   1fd68:	ldr	r1, [r1, #92]	; 0x5c
   1fd6c:	cmp	r1, #2
   1fd70:	bxlt	lr
   1fd74:	b	11b74 <btowc@plt>
   1fd78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fd7c:	add	fp, sp, #24
   1fd80:	mov	r4, r2
   1fd84:	mov	r5, r1
   1fd88:	mov	r6, r0
   1fd8c:	mvn	r1, #0
   1fd90:	movw	r8, #32816	; 0x8030
   1fd94:	mov	r7, r1
   1fd98:	mov	r0, r5
   1fd9c:	mov	r1, r6
   1fda0:	mov	r2, r4
   1fda4:	bl	1ce84 <__assert_fail@plt+0xb184>
   1fda8:	ldrb	r2, [r5, #4]
   1fdac:	cmp	r2, #24
   1fdb0:	beq	1fe18 <__assert_fail@plt+0xe118>
   1fdb4:	cmp	r2, #2
   1fdb8:	beq	1fe14 <__assert_fail@plt+0xe114>
   1fdbc:	ldrb	r0, [r5]
   1fdc0:	cmp	r0, #44	; 0x2c
   1fdc4:	beq	1fe18 <__assert_fail@plt+0xe118>
   1fdc8:	mvn	r1, #1
   1fdcc:	cmp	r0, #48	; 0x30
   1fdd0:	bcc	1fd94 <__assert_fail@plt+0xe094>
   1fdd4:	cmp	r2, #1
   1fdd8:	bne	1fd94 <__assert_fail@plt+0xe094>
   1fddc:	cmn	r7, #2
   1fde0:	beq	1fd94 <__assert_fail@plt+0xe094>
   1fde4:	cmp	r0, #57	; 0x39
   1fde8:	bhi	1fd94 <__assert_fail@plt+0xe094>
   1fdec:	cmn	r7, #1
   1fdf0:	beq	1fe0c <__assert_fail@plt+0xe10c>
   1fdf4:	add	r1, r7, r7, lsl #2
   1fdf8:	add	r0, r0, r1, lsl #1
   1fdfc:	cmp	r0, r8
   1fe00:	movge	r0, r8
   1fe04:	sub	r1, r0, #48	; 0x30
   1fe08:	b	1fd94 <__assert_fail@plt+0xe094>
   1fe0c:	sub	r1, r0, #48	; 0x30
   1fe10:	b	1fd94 <__assert_fail@plt+0xe094>
   1fe14:	mvn	r7, #1
   1fe18:	mov	r0, r7
   1fe1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fe20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fe24:	add	fp, sp, #24
   1fe28:	sub	sp, sp, #8
   1fe2c:	mov	r8, r1
   1fe30:	mov	r5, r0
   1fe34:	mov	r3, r0
   1fe38:	ldr	r7, [r3], #20
   1fe3c:	mov	r6, #0
   1fe40:	mov	r0, r1
   1fe44:	mov	r1, #0
   1fe48:	mov	r2, #0
   1fe4c:	bl	1e088 <__assert_fail@plt+0xc388>
   1fe50:	str	r0, [sp, #4]
   1fe54:	cmp	r0, #0
   1fe58:	beq	1fef0 <__assert_fail@plt+0xe1f0>
   1fe5c:	add	r4, sp, #4
   1fe60:	mov	r6, #0
   1fe64:	str	r7, [r0]
   1fe68:	ldr	r0, [r4]
   1fe6c:	ldr	r1, [r0, #24]
   1fe70:	orr	r1, r1, #262144	; 0x40000
   1fe74:	str	r1, [r0, #24]
   1fe78:	ldr	r0, [r5, #4]
   1fe7c:	ldr	r7, [r4]
   1fe80:	cmp	r0, #0
   1fe84:	beq	1fe94 <__assert_fail@plt+0xe194>
   1fe88:	add	r4, r7, #4
   1fe8c:	mov	r5, r0
   1fe90:	b	1fec8 <__assert_fail@plt+0xe1c8>
   1fe94:	mov	r1, #0
   1fe98:	mov	r0, r5
   1fe9c:	ldr	r5, [r5, #8]
   1fea0:	cmp	r5, r1
   1fea4:	cmpne	r5, #0
   1fea8:	bne	1fec4 <__assert_fail@plt+0xe1c4>
   1feac:	ldr	r7, [r7]
   1feb0:	ldr	r5, [r0]
   1feb4:	cmp	r5, #0
   1feb8:	mov	r1, r0
   1febc:	bne	1fe98 <__assert_fail@plt+0xe198>
   1fec0:	b	1feec <__assert_fail@plt+0xe1ec>
   1fec4:	add	r4, r7, #8
   1fec8:	add	r3, r5, #20
   1fecc:	mov	r0, r8
   1fed0:	mov	r1, #0
   1fed4:	mov	r2, #0
   1fed8:	bl	1e088 <__assert_fail@plt+0xc388>
   1fedc:	str	r0, [r4]
   1fee0:	cmp	r0, #0
   1fee4:	bne	1fe64 <__assert_fail@plt+0xe164>
   1fee8:	b	1fef0 <__assert_fail@plt+0xe1f0>
   1feec:	ldr	r6, [sp, #4]
   1fef0:	mov	r0, r6
   1fef4:	sub	sp, fp, #24
   1fef8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fefc:	ldr	r2, [r1, #24]
   1ff00:	uxtb	r3, r2
   1ff04:	cmp	r3, #17
   1ff08:	bne	1ff1c <__assert_fail@plt+0xe21c>
   1ff0c:	ldr	r3, [r1, #20]
   1ff10:	cmp	r3, r0
   1ff14:	orreq	r0, r2, #524288	; 0x80000
   1ff18:	streq	r0, [r1, #24]
   1ff1c:	mov	r0, #0
   1ff20:	bx	lr
   1ff24:	push	{r4, r5, r6, r7, fp, lr}
   1ff28:	add	fp, sp, #16
   1ff2c:	mov	r4, r2
   1ff30:	mov	r5, r1
   1ff34:	mov	r6, r0
   1ff38:	mov	r0, r2
   1ff3c:	mov	r1, r6
   1ff40:	blx	r5
   1ff44:	cmp	r0, #0
   1ff48:	beq	1ff68 <__assert_fail@plt+0xe268>
   1ff4c:	b	1ffa0 <__assert_fail@plt+0xe2a0>
   1ff50:	mov	r0, r4
   1ff54:	mov	r1, r7
   1ff58:	blx	r5
   1ff5c:	cmp	r0, #0
   1ff60:	mov	r6, r7
   1ff64:	bne	1ffa0 <__assert_fail@plt+0xe2a0>
   1ff68:	ldr	r7, [r6, #4]
   1ff6c:	cmp	r7, #0
   1ff70:	bne	1ff50 <__assert_fail@plt+0xe250>
   1ff74:	mov	r1, #0
   1ff78:	mov	r0, r6
   1ff7c:	ldr	r7, [r6, #8]
   1ff80:	cmp	r7, r1
   1ff84:	cmpne	r7, #0
   1ff88:	bne	1ff50 <__assert_fail@plt+0xe250>
   1ff8c:	ldr	r6, [r0]
   1ff90:	cmp	r6, #0
   1ff94:	mov	r1, r0
   1ff98:	bne	1ff78 <__assert_fail@plt+0xe278>
   1ff9c:	mov	r0, #0
   1ffa0:	pop	{r4, r5, r6, r7, fp, pc}
   1ffa4:	ldrb	r2, [r1, #24]
   1ffa8:	cmp	r2, #17
   1ffac:	beq	1ffe0 <__assert_fail@plt+0xe2e0>
   1ffb0:	cmp	r2, #4
   1ffb4:	bne	20034 <__assert_fail@plt+0xe334>
   1ffb8:	ldr	r2, [r0, #132]	; 0x84
   1ffbc:	cmp	r2, #0
   1ffc0:	beq	20034 <__assert_fail@plt+0xe334>
   1ffc4:	ldr	r3, [r1, #20]
   1ffc8:	ldr	r2, [r2, r3, lsl #2]
   1ffcc:	str	r2, [r1, #20]
   1ffd0:	ldr	r1, [r0, #80]	; 0x50
   1ffd4:	mov	r3, #1
   1ffd8:	orr	r1, r1, r3, lsl r2
   1ffdc:	b	20030 <__assert_fail@plt+0xe330>
   1ffe0:	ldr	r2, [r1, #4]
   1ffe4:	cmp	r2, #0
   1ffe8:	beq	20034 <__assert_fail@plt+0xe334>
   1ffec:	ldrb	r3, [r2, #24]
   1fff0:	cmp	r3, #17
   1fff4:	bne	20034 <__assert_fail@plt+0xe334>
   1fff8:	ldr	r3, [r2, #4]
   1fffc:	ldr	r2, [r2, #20]
   20000:	str	r3, [r1, #4]
   20004:	cmp	r3, #0
   20008:	strne	r1, [r3]
   2000c:	ldr	r1, [r1, #20]
   20010:	ldr	r3, [r0, #132]	; 0x84
   20014:	ldr	r1, [r3, r1, lsl #2]
   20018:	str	r1, [r3, r2, lsl #2]
   2001c:	cmp	r2, #31
   20020:	bgt	20034 <__assert_fail@plt+0xe334>
   20024:	ldr	r1, [r0, #80]	; 0x50
   20028:	mov	r3, #1
   2002c:	bic	r1, r1, r3, lsl r2
   20030:	str	r1, [r0, #80]	; 0x50
   20034:	mov	r0, #0
   20038:	bx	lr
   2003c:	push	{r4, r5, fp, lr}
   20040:	add	fp, sp, #8
   20044:	sub	sp, sp, #8
   20048:	mov	r4, r1
   2004c:	mov	r5, r0
   20050:	mov	r0, #0
   20054:	str	r0, [sp, #4]
   20058:	ldr	r2, [r1, #4]
   2005c:	cmp	r2, #0
   20060:	beq	20088 <__assert_fail@plt+0xe388>
   20064:	ldrb	r0, [r2, #24]
   20068:	cmp	r0, #17
   2006c:	bne	20088 <__assert_fail@plt+0xe388>
   20070:	add	r0, sp, #4
   20074:	mov	r1, r5
   20078:	bl	20460 <__assert_fail@plt+0xe760>
   2007c:	str	r0, [r4, #4]
   20080:	cmp	r0, #0
   20084:	strne	r4, [r0]
   20088:	ldr	r2, [r4, #8]
   2008c:	cmp	r2, #0
   20090:	beq	200b8 <__assert_fail@plt+0xe3b8>
   20094:	ldrb	r0, [r2, #24]
   20098:	cmp	r0, #17
   2009c:	bne	200b8 <__assert_fail@plt+0xe3b8>
   200a0:	add	r0, sp, #4
   200a4:	mov	r1, r5
   200a8:	bl	20460 <__assert_fail@plt+0xe760>
   200ac:	str	r0, [r4, #8]
   200b0:	cmp	r0, #0
   200b4:	strne	r4, [r0]
   200b8:	ldr	r0, [sp, #4]
   200bc:	sub	sp, fp, #8
   200c0:	pop	{r4, r5, fp, pc}
   200c4:	push	{r4, r5, fp, lr}
   200c8:	add	fp, sp, #8
   200cc:	mov	r4, r1
   200d0:	mov	r5, r0
   200d4:	ldr	r2, [r1, #24]
   200d8:	uxtb	r0, r2
   200dc:	cmp	r0, #16
   200e0:	bne	20100 <__assert_fail@plt+0xe400>
   200e4:	ldr	r0, [r4, #4]
   200e8:	ldr	r1, [r0, #12]
   200ec:	str	r1, [r4, #12]
   200f0:	ldr	r0, [r0, #28]
   200f4:	str	r0, [r4, #28]
   200f8:	mov	r0, #0
   200fc:	pop	{r4, r5, fp, pc}
   20100:	str	r4, [r4, #12]
   20104:	ldr	r1, [r4, #20]
   20108:	mov	r0, r5
   2010c:	bl	2057c <__assert_fail@plt+0xe87c>
   20110:	str	r0, [r4, #28]
   20114:	cmn	r0, #1
   20118:	beq	2014c <__assert_fail@plt+0xe44c>
   2011c:	mov	r1, r0
   20120:	ldrb	r2, [r4, #24]
   20124:	mov	r0, #0
   20128:	cmp	r2, #12
   2012c:	popne	{r4, r5, fp, pc}
   20130:	ldr	r2, [r5]
   20134:	add	r1, r2, r1, lsl #3
   20138:	ldr	r2, [r1, #4]
   2013c:	ldr	r3, [r4, #20]
   20140:	bfi	r2, r3, #8, #10
   20144:	str	r2, [r1, #4]
   20148:	pop	{r4, r5, fp, pc}
   2014c:	mov	r0, #12
   20150:	pop	{r4, r5, fp, pc}
   20154:	ldrb	r0, [r1, #24]
   20158:	cmp	r0, #16
   2015c:	beq	20170 <__assert_fail@plt+0xe470>
   20160:	cmp	r0, #11
   20164:	bne	2018c <__assert_fail@plt+0xe48c>
   20168:	ldr	r0, [r1, #4]
   2016c:	b	201ac <__assert_fail@plt+0xe4ac>
   20170:	ldmib	r1, {r0, r2}
   20174:	ldr	r3, [r2, #12]
   20178:	str	r3, [r0, #16]
   2017c:	ldr	r0, [r1, #16]
   20180:	str	r0, [r2, #16]
   20184:	mov	r0, #0
   20188:	bx	lr
   2018c:	ldr	r0, [r1, #4]
   20190:	cmp	r0, #0
   20194:	ldrne	r2, [r1, #16]
   20198:	strne	r2, [r0, #16]
   2019c:	ldr	r0, [r1, #8]
   201a0:	cmp	r0, #0
   201a4:	beq	201b0 <__assert_fail@plt+0xe4b0>
   201a8:	ldr	r1, [r1, #16]
   201ac:	str	r1, [r0, #16]
   201b0:	mov	r0, #0
   201b4:	bx	lr
   201b8:	push	{fp, lr}
   201bc:	mov	fp, sp
   201c0:	ldr	r2, [r1, #24]
   201c4:	ldr	ip, [r1, #28]
   201c8:	mvn	r3, #1
   201cc:	uxtab	r2, r3, r2
   201d0:	cmp	r2, #14
   201d4:	bhi	20288 <__assert_fail@plt+0xe588>
   201d8:	add	r3, pc, #0
   201dc:	ldr	pc, [r3, r2, lsl #2]
   201e0:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   201e4:	andeq	r0, r2, r8, lsl #5
   201e8:	muleq	r2, ip, r2
   201ec:	andeq	r0, r2, r8, lsl #5
   201f0:	andeq	r0, r2, r8, lsl #5
   201f4:	andeq	r0, r2, r8, lsl #5
   201f8:	andeq	r0, r2, ip, lsl r2
   201fc:	andeq	r0, r2, ip, lsl r2
   20200:	andeq	r0, r2, r8, lsr r2
   20204:	andeq	r0, r2, r8, lsr r2
   20208:	andeq	r0, r2, ip, lsl r2
   2020c:	andeq	r0, r2, r8, lsl #5
   20210:	andeq	r0, r2, r8, lsl #5
   20214:	andeq	r0, r2, r8, lsl #5
   20218:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2021c:	ldr	r0, [r0, #20]
   20220:	add	r2, ip, ip, lsl #1
   20224:	add	r0, r0, r2, lsl #2
   20228:	ldr	r1, [r1, #16]
   2022c:	ldr	r1, [r1, #28]
   20230:	pop	{fp, lr}
   20234:	b	207c8 <__assert_fail@plt+0xeac8>
   20238:	ldrb	r2, [r0, #88]	; 0x58
   2023c:	orr	r2, r2, #1
   20240:	strb	r2, [r0, #88]	; 0x58
   20244:	add	r3, r1, #16
   20248:	ldr	lr, [r1, #4]
   2024c:	ldr	r1, [r1, #8]
   20250:	cmp	r1, #0
   20254:	mov	r2, r3
   20258:	addne	r2, r1, #12
   2025c:	ldr	r1, [r2]
   20260:	ldr	r2, [r1, #28]
   20264:	cmp	lr, #0
   20268:	addne	r3, lr, #12
   2026c:	ldr	r1, [r3]
   20270:	ldr	r1, [r1, #28]
   20274:	ldr	r0, [r0, #20]
   20278:	add	r3, ip, ip, lsl #1
   2027c:	add	r0, r0, r3, lsl #2
   20280:	pop	{fp, lr}
   20284:	b	2074c <__assert_fail@plt+0xea4c>
   20288:	ldr	r0, [r0, #12]
   2028c:	ldr	r1, [r1, #16]
   20290:	ldr	r1, [r1, #28]
   20294:	str	r1, [r0, ip, lsl #2]
   20298:	b	202d0 <__assert_fail@plt+0xe5d0>
   2029c:	ldr	r3, [r0, #12]
   202a0:	ldr	r2, [r1, #16]
   202a4:	ldr	r2, [r2, #28]
   202a8:	str	r2, [r3, ip, lsl #2]
   202ac:	ldrb	r1, [r1, #24]
   202b0:	cmp	r1, #4
   202b4:	bne	202d0 <__assert_fail@plt+0xe5d0>
   202b8:	ldr	r0, [r0, #20]
   202bc:	add	r1, ip, ip, lsl #1
   202c0:	add	r0, r0, r1, lsl #2
   202c4:	mov	r1, r2
   202c8:	pop	{fp, lr}
   202cc:	b	207c8 <__assert_fail@plt+0xeac8>
   202d0:	mov	r0, #0
   202d4:	pop	{fp, pc}
   202d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   202dc:	add	fp, sp, #24
   202e0:	sub	sp, sp, #16
   202e4:	mov	r4, r0
   202e8:	mov	r7, #0
   202ec:	add	r8, sp, #4
   202f0:	mov	r6, #0
   202f4:	b	20324 <__assert_fail@plt+0xe624>
   202f8:	mov	r0, r7
   202fc:	ldr	r1, [r4, #8]
   20300:	add	r2, r6, #1
   20304:	subs	r3, r2, r1
   20308:	mov	r6, r3
   2030c:	movne	r6, r2
   20310:	movwne	r3, #1
   20314:	and	r7, r0, r3
   20318:	tst	r0, #1
   2031c:	cmpeq	r2, r1
   20320:	beq	20380 <__assert_fail@plt+0xe680>
   20324:	ldr	r0, [r4, #24]
   20328:	add	r5, r6, r6, lsl #1
   2032c:	add	r0, r0, r5, lsl #2
   20330:	ldr	r0, [r0, #4]
   20334:	cmp	r0, #0
   20338:	bne	202f8 <__assert_fail@plt+0xe5f8>
   2033c:	mov	r0, r8
   20340:	mov	r1, r4
   20344:	mov	r2, r6
   20348:	mov	r3, #1
   2034c:	bl	20814 <__assert_fail@plt+0xeb14>
   20350:	cmp	r0, #0
   20354:	bne	20384 <__assert_fail@plt+0xe684>
   20358:	ldr	r0, [r4, #24]
   2035c:	add	r0, r0, r5, lsl #2
   20360:	ldr	r0, [r0, #4]
   20364:	cmp	r0, #0
   20368:	mov	r0, r7
   2036c:	bne	202fc <__assert_fail@plt+0xe5fc>
   20370:	ldr	r0, [sp, #12]
   20374:	bl	1a1ec <__assert_fail@plt+0x84ec>
   20378:	mov	r0, #1
   2037c:	b	202fc <__assert_fail@plt+0xe5fc>
   20380:	mov	r0, #0
   20384:	sub	sp, fp, #24
   20388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2038c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20390:	add	fp, sp, #24
   20394:	mov	r4, r0
   20398:	ldr	r0, [r0, #8]
   2039c:	cmp	r0, #0
   203a0:	beq	20450 <__assert_fail@plt+0xe750>
   203a4:	mov	r0, #0
   203a8:	mov	r1, #0
   203ac:	mov	r2, #0
   203b0:	ldr	r3, [r4, #28]
   203b4:	str	r0, [r3, r1]!
   203b8:	str	r0, [r3, #4]
   203bc:	str	r0, [r3, #8]
   203c0:	add	r1, r1, #12
   203c4:	add	r2, r2, #1
   203c8:	ldr	r3, [r4, #8]
   203cc:	cmp	r2, r3
   203d0:	bcc	203b0 <__assert_fail@plt+0xe6b0>
   203d4:	cmp	r3, #0
   203d8:	beq	20450 <__assert_fail@plt+0xe750>
   203dc:	mov	r5, #0
   203e0:	b	203f4 <__assert_fail@plt+0xe6f4>
   203e4:	add	r5, r5, #1
   203e8:	ldr	r0, [r4, #8]
   203ec:	cmp	r5, r0
   203f0:	bcs	20450 <__assert_fail@plt+0xe750>
   203f4:	ldr	r0, [r4, #24]
   203f8:	add	r8, r5, r5, lsl #1
   203fc:	add	r0, r0, r8, lsl #2
   20400:	ldr	r1, [r0, #4]
   20404:	cmp	r1, #1
   20408:	blt	203e4 <__assert_fail@plt+0xe6e4>
   2040c:	ldr	r7, [r0, #8]
   20410:	mov	r6, #0
   20414:	ldr	r0, [r7, r6, lsl #2]
   20418:	add	r0, r0, r0, lsl #1
   2041c:	ldr	r1, [r4, #28]
   20420:	add	r0, r1, r0, lsl #2
   20424:	mov	r1, r5
   20428:	bl	21054 <__assert_fail@plt+0xf354>
   2042c:	cmp	r0, #0
   20430:	beq	20458 <__assert_fail@plt+0xe758>
   20434:	add	r6, r6, #1
   20438:	ldr	r0, [r4, #24]
   2043c:	add	r0, r0, r8, lsl #2
   20440:	ldr	r0, [r0, #4]
   20444:	cmp	r6, r0
   20448:	blt	20414 <__assert_fail@plt+0xe714>
   2044c:	b	203e4 <__assert_fail@plt+0xe6e4>
   20450:	mov	r0, #0
   20454:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20458:	mov	r0, #12
   2045c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20464:	add	fp, sp, #28
   20468:	sub	sp, sp, #4
   2046c:	mov	r9, r2
   20470:	mov	r8, r0
   20474:	ldr	r5, [r2, #4]
   20478:	ldr	r6, [r1]
   2047c:	cmp	r5, #0
   20480:	ldrbne	r0, [r1, #28]
   20484:	andsne	r0, r0, #16
   20488:	bne	20554 <__assert_fail@plt+0xe854>
   2048c:	mov	r0, r6
   20490:	mov	r1, #0
   20494:	mov	r2, #0
   20498:	mov	r3, #8
   2049c:	bl	1d00c <__assert_fail@plt+0xb30c>
   204a0:	mov	sl, r0
   204a4:	mov	r0, r6
   204a8:	mov	r1, #0
   204ac:	mov	r2, #0
   204b0:	mov	r3, #9
   204b4:	bl	1d00c <__assert_fail@plt+0xb30c>
   204b8:	mov	r4, r0
   204bc:	cmp	r5, #0
   204c0:	mov	r7, r0
   204c4:	beq	204e0 <__assert_fail@plt+0xe7e0>
   204c8:	mov	r0, r6
   204cc:	mov	r1, r5
   204d0:	mov	r2, r4
   204d4:	mov	r3, #16
   204d8:	bl	1d00c <__assert_fail@plt+0xb30c>
   204dc:	mov	r7, r0
   204e0:	mov	r0, r6
   204e4:	mov	r1, sl
   204e8:	mov	r2, r7
   204ec:	mov	r3, #16
   204f0:	bl	1d00c <__assert_fail@plt+0xb30c>
   204f4:	cmp	r4, #0
   204f8:	beq	20508 <__assert_fail@plt+0xe808>
   204fc:	cmp	sl, #0
   20500:	cmpne	r7, #0
   20504:	bne	20518 <__assert_fail@plt+0xe818>
   20508:	mov	r0, #12
   2050c:	str	r0, [r8]
   20510:	mov	r5, #0
   20514:	b	20570 <__assert_fail@plt+0xe870>
   20518:	mov	r5, r0
   2051c:	cmp	r0, #0
   20520:	beq	20508 <__assert_fail@plt+0xe808>
   20524:	ldr	r0, [r9, #20]
   20528:	str	r0, [r4, #20]
   2052c:	str	r0, [sl, #20]
   20530:	ldr	r0, [r4, #24]
   20534:	ldr	r1, [r9, #24]
   20538:	lsr	r1, r1, #19
   2053c:	bfi	r0, r1, #19, #1
   20540:	str	r0, [r4, #24]
   20544:	ldr	r0, [sl, #24]
   20548:	bfi	r0, r1, #19, #1
   2054c:	str	r0, [sl, #24]
   20550:	b	20570 <__assert_fail@plt+0xe870>
   20554:	ldr	r0, [r9, #20]
   20558:	cmp	r0, #31
   2055c:	bgt	20570 <__assert_fail@plt+0xe870>
   20560:	ldr	r1, [r6, #80]	; 0x50
   20564:	mov	r2, #1
   20568:	tst	r1, r2, lsl r0
   2056c:	bne	2048c <__assert_fail@plt+0xe78c>
   20570:	mov	r0, r5
   20574:	sub	sp, fp, #28
   20578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2057c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20580:	add	fp, sp, #28
   20584:	sub	sp, sp, #12
   20588:	mov	r5, r2
   2058c:	mov	r9, r1
   20590:	mov	r4, r0
   20594:	ldr	r7, [r0, #4]
   20598:	ldr	r0, [r0, #8]
   2059c:	cmp	r0, r7
   205a0:	bcs	20670 <__assert_fail@plt+0xe970>
   205a4:	ldr	r0, [r4]
   205a8:	ldr	r1, [r4, #8]
   205ac:	str	r9, [r0, r1, lsl #3]!
   205b0:	str	r5, [r0, #4]
   205b4:	ldr	r0, [r4]
   205b8:	ldr	r1, [r4, #8]
   205bc:	add	r0, r0, r1, lsl #3
   205c0:	ldr	r1, [r0, #4]
   205c4:	bfc	r1, #8, #10
   205c8:	str	r1, [r0, #4]
   205cc:	uxtb	r1, r5
   205d0:	cmp	r1, #5
   205d4:	bne	205e8 <__assert_fail@plt+0xe8e8>
   205d8:	ldr	r2, [r4, #92]	; 0x5c
   205dc:	mov	r0, #1048576	; 0x100000
   205e0:	cmp	r2, #1
   205e4:	bgt	205f8 <__assert_fail@plt+0xe8f8>
   205e8:	sub	r0, r1, #6
   205ec:	clz	r0, r0
   205f0:	lsr	r0, r0, #5
   205f4:	lsl	r0, r0, #20
   205f8:	ldr	r1, [r4]
   205fc:	ldr	r2, [r4, #8]
   20600:	add	r1, r1, r2, lsl #3
   20604:	ldr	r2, [r1, #4]
   20608:	bic	r2, r2, #1048576	; 0x100000
   2060c:	orr	r0, r2, r0
   20610:	str	r0, [r1, #4]
   20614:	ldr	r0, [r4, #8]
   20618:	ldr	r1, [r4, #12]
   2061c:	mvn	r2, #0
   20620:	str	r2, [r1, r0, lsl #2]
   20624:	ldr	r0, [r4, #8]
   20628:	ldr	r1, [r4, #20]
   2062c:	add	r0, r0, r0, lsl #1
   20630:	mov	r2, #0
   20634:	str	r2, [r1, r0, lsl #2]!
   20638:	str	r2, [r1, #4]
   2063c:	str	r2, [r1, #8]
   20640:	ldr	r0, [r4, #8]
   20644:	ldr	r1, [r4, #24]
   20648:	add	r0, r0, r0, lsl #1
   2064c:	str	r2, [r1, r0, lsl #2]!
   20650:	str	r2, [r1, #4]
   20654:	str	r2, [r1, #8]
   20658:	ldr	r6, [r4, #8]
   2065c:	add	r0, r6, #1
   20660:	str	r0, [r4, #8]
   20664:	mov	r0, r6
   20668:	sub	sp, fp, #28
   2066c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20670:	lsl	r1, r7, #1
   20674:	mvn	r6, #0
   20678:	movw	r0, #21845	; 0x5555
   2067c:	movt	r0, #5461	; 0x1555
   20680:	cmp	r1, r0
   20684:	bhi	20664 <__assert_fail@plt+0xe964>
   20688:	str	r1, [sp, #8]
   2068c:	ldr	r0, [r4]
   20690:	lsl	r1, r7, #4
   20694:	bl	1a350 <__assert_fail@plt+0x8650>
   20698:	cmp	r0, #0
   2069c:	beq	20664 <__assert_fail@plt+0xe964>
   206a0:	str	r0, [r4]
   206a4:	ldr	r0, [r4, #12]
   206a8:	lsl	r8, r7, #3
   206ac:	mov	r1, r8
   206b0:	bl	1a350 <__assert_fail@plt+0x8650>
   206b4:	str	r0, [sp, #4]
   206b8:	ldr	r0, [r4, #16]
   206bc:	mov	r1, r8
   206c0:	bl	1a350 <__assert_fail@plt+0x8650>
   206c4:	mov	r2, r0
   206c8:	ldr	r0, [r4, #20]
   206cc:	add	r1, r7, r7, lsl #1
   206d0:	mov	r7, r2
   206d4:	lsl	r8, r1, #3
   206d8:	mov	r1, r8
   206dc:	bl	1a350 <__assert_fail@plt+0x8650>
   206e0:	mov	sl, r0
   206e4:	ldr	r0, [r4, #24]
   206e8:	mov	r1, r8
   206ec:	bl	1a350 <__assert_fail@plt+0x8650>
   206f0:	mov	r8, r0
   206f4:	ldr	r0, [sp, #4]
   206f8:	cmp	r0, #0
   206fc:	beq	2070c <__assert_fail@plt+0xea0c>
   20700:	cmp	r7, #0
   20704:	cmpne	sl, #0
   20708:	bne	2072c <__assert_fail@plt+0xea2c>
   2070c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   20710:	mov	r0, r7
   20714:	bl	1a1ec <__assert_fail@plt+0x84ec>
   20718:	mov	r0, sl
   2071c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   20720:	mov	r0, r8
   20724:	bl	1a1ec <__assert_fail@plt+0x84ec>
   20728:	b	20664 <__assert_fail@plt+0xe964>
   2072c:	cmp	r8, #0
   20730:	beq	2070c <__assert_fail@plt+0xea0c>
   20734:	add	r1, r4, #12
   20738:	stm	r1, {r0, r7, sl}
   2073c:	str	r8, [r4, #24]
   20740:	ldr	r0, [sp, #8]
   20744:	str	r0, [r4, #4]
   20748:	b	205a4 <__assert_fail@plt+0xe8a4>
   2074c:	push	{r4, r5, r6, sl, fp, lr}
   20750:	add	fp, sp, #16
   20754:	mov	r5, r2
   20758:	mov	r4, r1
   2075c:	mov	r6, r0
   20760:	mov	r0, #2
   20764:	str	r0, [r6]
   20768:	mov	r0, #8
   2076c:	bl	1a2bc <__assert_fail@plt+0x85bc>
   20770:	str	r0, [r6, #8]
   20774:	cmp	r0, #0
   20778:	beq	207c0 <__assert_fail@plt+0xeac0>
   2077c:	cmp	r4, r5
   20780:	bne	2079c <__assert_fail@plt+0xea9c>
   20784:	mov	r0, #1
   20788:	str	r0, [r6, #4]
   2078c:	ldr	r0, [r6, #8]
   20790:	str	r4, [r0]
   20794:	mov	r0, #0
   20798:	pop	{r4, r5, r6, sl, fp, pc}
   2079c:	mov	r0, #2
   207a0:	str	r0, [r6, #4]
   207a4:	ldr	r0, [r6, #8]
   207a8:	cmp	r4, r5
   207ac:	stmlt	r0, {r4, r5}
   207b0:	strge	r5, [r0]
   207b4:	strge	r4, [r0, #4]
   207b8:	mov	r0, #0
   207bc:	pop	{r4, r5, r6, sl, fp, pc}
   207c0:	mov	r0, #12
   207c4:	pop	{r4, r5, r6, sl, fp, pc}
   207c8:	push	{r4, r5, fp, lr}
   207cc:	add	fp, sp, #8
   207d0:	mov	r5, r1
   207d4:	mov	r4, r0
   207d8:	mov	r0, #1
   207dc:	str	r0, [r4]
   207e0:	str	r0, [r4, #4]
   207e4:	mov	r0, #4
   207e8:	bl	1a2bc <__assert_fail@plt+0x85bc>
   207ec:	str	r0, [r4, #8]
   207f0:	cmp	r0, #0
   207f4:	strne	r5, [r0]
   207f8:	movne	r0, #0
   207fc:	popne	{r4, r5, fp, pc}
   20800:	mov	r0, #0
   20804:	str	r0, [r4]
   20808:	str	r0, [r4, #4]
   2080c:	mov	r0, #12
   20810:	pop	{r4, r5, fp, pc}
   20814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20818:	add	fp, sp, #28
   2081c:	sub	sp, sp, #44	; 0x2c
   20820:	mov	r8, r3
   20824:	mov	r6, r2
   20828:	mov	r5, r1
   2082c:	mov	r7, r0
   20830:	ldr	r0, [r1, #20]
   20834:	add	r4, r2, r2, lsl #1
   20838:	add	r0, r0, r4, lsl #2
   2083c:	ldr	r0, [r0, #4]
   20840:	add	r1, r0, #1
   20844:	add	r0, sp, #32
   20848:	bl	20a28 <__assert_fail@plt+0xed28>
   2084c:	cmp	r0, #0
   20850:	bne	20a20 <__assert_fail@plt+0xed20>
   20854:	ldr	r0, [sp, #36]	; 0x24
   20858:	ldr	r1, [sp, #40]	; 0x28
   2085c:	add	r2, r0, #1
   20860:	str	r2, [sp, #36]	; 0x24
   20864:	str	r6, [r1, r0, lsl #2]
   20868:	ldr	r0, [r5, #24]
   2086c:	add	r0, r0, r4, lsl #2
   20870:	mvn	r1, #0
   20874:	str	r1, [r0, #4]
   20878:	ldr	r1, [r5]
   2087c:	add	r0, r1, r6, lsl #3
   20880:	ldr	r0, [r0, #4]
   20884:	ubfx	r0, r0, #8, #10
   20888:	cmp	r0, #0
   2088c:	beq	208dc <__assert_fail@plt+0xebdc>
   20890:	ldr	r2, [r5, #20]
   20894:	add	r2, r2, r4, lsl #2
   20898:	ldr	r3, [r2, #4]
   2089c:	cmp	r3, #0
   208a0:	beq	208dc <__assert_fail@plt+0xebdc>
   208a4:	ldr	r2, [r2, #8]
   208a8:	ldr	r2, [r2]
   208ac:	add	r1, r1, r2, lsl #3
   208b0:	ldrb	r1, [r1, #6]
   208b4:	tst	r1, #4
   208b8:	bne	208dc <__assert_fail@plt+0xebdc>
   208bc:	str	r0, [sp]
   208c0:	mov	r0, r5
   208c4:	mov	r1, r6
   208c8:	mov	r2, r6
   208cc:	mov	r3, r6
   208d0:	bl	20a58 <__assert_fail@plt+0xed58>
   208d4:	cmp	r0, #0
   208d8:	bne	20a20 <__assert_fail@plt+0xed20>
   208dc:	ldr	r0, [r5]
   208e0:	add	r0, r0, r6, lsl #3
   208e4:	ldrb	r0, [r0, #4]
   208e8:	tst	r0, #8
   208ec:	beq	209f4 <__assert_fail@plt+0xecf4>
   208f0:	ldr	r0, [r5, #20]
   208f4:	add	r1, r0, r4, lsl #2
   208f8:	ldr	r1, [r1, #4]
   208fc:	cmp	r1, #1
   20900:	blt	209f4 <__assert_fail@plt+0xecf4>
   20904:	str	r8, [sp, #8]
   20908:	str	r7, [sp, #12]
   2090c:	mov	r8, #0
   20910:	add	r7, sp, #16
   20914:	add	sl, sp, #32
   20918:	mov	r6, #0
   2091c:	b	2093c <__assert_fail@plt+0xec3c>
   20920:	mov	r8, #1
   20924:	ldr	r0, [r5, #20]
   20928:	add	r1, r0, r4, lsl #2
   2092c:	ldr	r1, [r1, #4]
   20930:	add	r6, r6, #1
   20934:	cmp	r6, r1
   20938:	bge	209c8 <__assert_fail@plt+0xecc8>
   2093c:	add	r0, r0, r4, lsl #2
   20940:	ldr	r0, [r0, #8]
   20944:	ldr	r2, [r0, r6, lsl #2]
   20948:	add	r9, r2, r2, lsl #1
   2094c:	ldr	r0, [r5, #24]
   20950:	add	r0, r0, r9, lsl #2
   20954:	ldr	r1, [r0, #4]
   20958:	cmn	r1, #1
   2095c:	beq	20920 <__assert_fail@plt+0xec20>
   20960:	cmp	r1, #0
   20964:	bne	20984 <__assert_fail@plt+0xec84>
   20968:	mov	r0, r7
   2096c:	mov	r1, r5
   20970:	mov	r3, #0
   20974:	bl	20814 <__assert_fail@plt+0xeb14>
   20978:	cmp	r0, #0
   2097c:	beq	20994 <__assert_fail@plt+0xec94>
   20980:	b	20a20 <__assert_fail@plt+0xed20>
   20984:	vldr	d16, [r0]
   20988:	ldr	r0, [r0, #8]
   2098c:	str	r0, [sp, #24]
   20990:	vstr	d16, [sp, #16]
   20994:	mov	r0, sl
   20998:	mov	r1, r7
   2099c:	bl	20cb4 <__assert_fail@plt+0xefb4>
   209a0:	cmp	r0, #0
   209a4:	bne	20a20 <__assert_fail@plt+0xed20>
   209a8:	ldr	r0, [r5, #24]
   209ac:	add	r0, r0, r9, lsl #2
   209b0:	ldr	r0, [r0, #4]
   209b4:	cmp	r0, #0
   209b8:	bne	20924 <__assert_fail@plt+0xec24>
   209bc:	ldr	r0, [sp, #24]
   209c0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   209c4:	b	20920 <__assert_fail@plt+0xec20>
   209c8:	tst	r8, #1
   209cc:	ldr	r7, [sp, #12]
   209d0:	ldr	r0, [sp, #8]
   209d4:	beq	209f4 <__assert_fail@plt+0xecf4>
   209d8:	cmp	r0, #0
   209dc:	bne	209f4 <__assert_fail@plt+0xecf4>
   209e0:	ldr	r0, [r5, #24]
   209e4:	add	r0, r0, r4, lsl #2
   209e8:	mov	r1, #0
   209ec:	str	r1, [r0, #4]
   209f0:	b	20a0c <__assert_fail@plt+0xed0c>
   209f4:	ldr	r0, [r5, #24]
   209f8:	vldr	d16, [sp, #32]
   209fc:	add	r0, r0, r4, lsl #2
   20a00:	ldr	r1, [sp, #40]	; 0x28
   20a04:	str	r1, [r0, #8]
   20a08:	vstr	d16, [r0]
   20a0c:	ldr	r0, [sp, #40]	; 0x28
   20a10:	vldr	d16, [sp, #32]
   20a14:	str	r0, [r7, #8]
   20a18:	vstr	d16, [r7]
   20a1c:	mov	r0, #0
   20a20:	sub	sp, fp, #28
   20a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a28:	push	{r4, r5, fp, lr}
   20a2c:	add	fp, sp, #8
   20a30:	mov	r5, r0
   20a34:	mov	r4, #0
   20a38:	stm	r0, {r1, r4}
   20a3c:	lsl	r0, r1, #2
   20a40:	bl	1a2bc <__assert_fail@plt+0x85bc>
   20a44:	str	r0, [r5, #8]
   20a48:	cmp	r0, #0
   20a4c:	moveq	r4, #12
   20a50:	mov	r0, r4
   20a54:	pop	{r4, r5, fp, pc}
   20a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a5c:	add	fp, sp, #28
   20a60:	sub	sp, sp, #20
   20a64:	str	r3, [sp, #8]
   20a68:	mov	r8, r2
   20a6c:	mov	r9, r1
   20a70:	mov	r5, r0
   20a74:	ldr	r0, [fp, #8]
   20a78:	str	r0, [sp, #16]
   20a7c:	ldr	r0, [r5]
   20a80:	add	r0, r0, r9, lsl #3
   20a84:	ldrb	r1, [r0, #4]!
   20a88:	cmp	r1, #4
   20a8c:	bne	20afc <__assert_fail@plt+0xedfc>
   20a90:	ldr	r0, [r5, #12]
   20a94:	ldr	r1, [r5, #20]
   20a98:	ldr	r6, [r0, r9, lsl #2]
   20a9c:	add	r4, r8, r8, lsl #1
   20aa0:	add	r0, r1, r4, lsl #2
   20aa4:	mov	r1, #0
   20aa8:	str	r1, [r0, #4]
   20aac:	mov	r0, r5
   20ab0:	mov	r1, r6
   20ab4:	ldr	r2, [sp, #16]
   20ab8:	bl	20e44 <__assert_fail@plt+0xf144>
   20abc:	mov	sl, #12
   20ac0:	cmn	r0, #1
   20ac4:	beq	20c78 <__assert_fail@plt+0xef78>
   20ac8:	mov	r7, r0
   20acc:	ldr	r0, [r5, #12]
   20ad0:	ldr	r1, [r0, r9, lsl #2]
   20ad4:	str	r1, [r0, r8, lsl #2]
   20ad8:	ldr	r0, [r5, #20]
   20adc:	add	r0, r0, r4, lsl #2
   20ae0:	mov	r1, r7
   20ae4:	bl	20ecc <__assert_fail@plt+0xf1cc>
   20ae8:	cmp	r0, #0
   20aec:	mov	r9, r6
   20af0:	mov	r8, r7
   20af4:	bne	20a7c <__assert_fail@plt+0xed7c>
   20af8:	b	20c78 <__assert_fail@plt+0xef78>
   20afc:	ldr	r1, [r5, #20]
   20b00:	add	r6, r9, r9, lsl #1
   20b04:	add	r3, r1, r6, lsl #2
   20b08:	ldr	r2, [r3, #4]
   20b0c:	cmp	r2, #0
   20b10:	beq	20c5c <__assert_fail@plt+0xef5c>
   20b14:	ldr	r3, [r3, #8]
   20b18:	ldr	sl, [r3]
   20b1c:	add	r7, r8, r8, lsl #1
   20b20:	add	r4, r1, r7, lsl #2
   20b24:	mov	r1, #0
   20b28:	str	r1, [r4, #4]
   20b2c:	cmp	r2, #1
   20b30:	beq	20c24 <__assert_fail@plt+0xef24>
   20b34:	str	r6, [sp, #12]
   20b38:	mov	r0, r5
   20b3c:	mov	r1, sl
   20b40:	ldr	r6, [sp, #16]
   20b44:	mov	r2, r6
   20b48:	bl	20fd4 <__assert_fail@plt+0xf2d4>
   20b4c:	cmn	r0, #1
   20b50:	beq	20b6c <__assert_fail@plt+0xee6c>
   20b54:	mov	r1, r0
   20b58:	mov	r0, r4
   20b5c:	bl	20ecc <__assert_fail@plt+0xf1cc>
   20b60:	cmp	r0, #0
   20b64:	bne	20bd4 <__assert_fail@plt+0xeed4>
   20b68:	b	20cac <__assert_fail@plt+0xefac>
   20b6c:	mov	r9, sl
   20b70:	mov	r8, r7
   20b74:	mov	r0, r5
   20b78:	mov	r1, sl
   20b7c:	mov	r2, r6
   20b80:	bl	20e44 <__assert_fail@plt+0xf144>
   20b84:	mov	sl, #12
   20b88:	cmn	r0, #1
   20b8c:	beq	20c78 <__assert_fail@plt+0xef78>
   20b90:	mov	r7, r0
   20b94:	ldr	r0, [r5, #20]
   20b98:	add	r0, r0, r8, lsl #2
   20b9c:	mov	r1, r7
   20ba0:	bl	20ecc <__assert_fail@plt+0xf1cc>
   20ba4:	cmp	r0, #0
   20ba8:	beq	20c78 <__assert_fail@plt+0xef78>
   20bac:	ldr	r6, [sp, #16]
   20bb0:	str	r6, [sp]
   20bb4:	mov	r0, r5
   20bb8:	mov	r1, r9
   20bbc:	mov	r2, r7
   20bc0:	ldr	r3, [sp, #8]
   20bc4:	bl	20a58 <__assert_fail@plt+0xed58>
   20bc8:	cmp	r0, #0
   20bcc:	mov	r7, r8
   20bd0:	bne	20c74 <__assert_fail@plt+0xef74>
   20bd4:	ldr	r0, [r5, #20]
   20bd8:	ldr	r1, [sp, #12]
   20bdc:	add	r0, r0, r1, lsl #2
   20be0:	ldr	r0, [r0, #8]
   20be4:	ldr	r9, [r0, #4]
   20be8:	mov	r0, r5
   20bec:	mov	r1, r9
   20bf0:	mov	r2, r6
   20bf4:	bl	20e44 <__assert_fail@plt+0xf144>
   20bf8:	mov	sl, #12
   20bfc:	cmn	r0, #1
   20c00:	beq	20c78 <__assert_fail@plt+0xef78>
   20c04:	mov	r8, r0
   20c08:	ldr	r0, [r5, #20]
   20c0c:	add	r0, r0, r7, lsl #2
   20c10:	mov	r1, r8
   20c14:	bl	20ecc <__assert_fail@plt+0xf1cc>
   20c18:	cmp	r0, #0
   20c1c:	bne	20a7c <__assert_fail@plt+0xed7c>
   20c20:	b	20c78 <__assert_fail@plt+0xef78>
   20c24:	ldr	r1, [sp, #8]
   20c28:	cmp	r9, r1
   20c2c:	bne	20c38 <__assert_fail@plt+0xef38>
   20c30:	cmp	r8, r9
   20c34:	bne	20c84 <__assert_fail@plt+0xef84>
   20c38:	ldr	r0, [r0]
   20c3c:	ubfx	r0, r0, #8, #10
   20c40:	ldr	r2, [sp, #16]
   20c44:	orr	r2, r0, r2
   20c48:	mov	r0, r5
   20c4c:	mov	r9, sl
   20c50:	mov	r1, sl
   20c54:	str	r2, [sp, #16]
   20c58:	b	20bf4 <__assert_fail@plt+0xeef4>
   20c5c:	ldr	r0, [r5, #12]
   20c60:	ldr	r1, [r0, r9, lsl #2]
   20c64:	str	r1, [r0, r8, lsl #2]
   20c68:	mov	r0, #0
   20c6c:	sub	sp, fp, #28
   20c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c74:	mov	sl, r0
   20c78:	mov	r0, sl
   20c7c:	sub	sp, fp, #28
   20c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c84:	mov	r0, r4
   20c88:	mov	r1, sl
   20c8c:	bl	20ecc <__assert_fail@plt+0xf1cc>
   20c90:	mov	r1, r0
   20c94:	mov	sl, #12
   20c98:	mov	r0, #0
   20c9c:	cmp	r1, #0
   20ca0:	moveq	r0, sl
   20ca4:	sub	sp, fp, #28
   20ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cac:	mov	sl, #12
   20cb0:	b	20c78 <__assert_fail@plt+0xef78>
   20cb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20cb8:	add	fp, sp, #24
   20cbc:	mov	r8, #0
   20cc0:	cmp	r1, #0
   20cc4:	beq	20e18 <__assert_fail@plt+0xf118>
   20cc8:	mov	r6, r1
   20ccc:	ldr	r1, [r1, #4]
   20cd0:	cmp	r1, #0
   20cd4:	beq	20e18 <__assert_fail@plt+0xf118>
   20cd8:	mov	r9, r0
   20cdc:	ldr	r2, [r0]
   20ce0:	ldr	r0, [r0, #4]
   20ce4:	add	r3, r0, r1, lsl #1
   20ce8:	cmp	r2, r3
   20cec:	bge	20d18 <__assert_fail@plt+0xf018>
   20cf0:	add	r7, r2, r1
   20cf4:	lsl	r1, r7, #3
   20cf8:	ldr	r0, [r9, #8]
   20cfc:	bl	1a350 <__assert_fail@plt+0x8650>
   20d00:	cmp	r0, #0
   20d04:	beq	20e38 <__assert_fail@plt+0xf138>
   20d08:	str	r0, [r9, #8]
   20d0c:	lsl	r0, r7, #1
   20d10:	str	r0, [r9]
   20d14:	ldr	r0, [r9, #4]
   20d18:	cmp	r0, #0
   20d1c:	beq	20e20 <__assert_fail@plt+0xf120>
   20d20:	ldr	r2, [r6, #4]
   20d24:	add	r7, r0, r2, lsl #1
   20d28:	sub	r1, r0, #1
   20d2c:	sub	r0, r2, #1
   20d30:	orrs	r2, r0, r1
   20d34:	bmi	20d7c <__assert_fail@plt+0xf07c>
   20d38:	ldr	r2, [r6, #8]
   20d3c:	ldr	r3, [r9, #8]
   20d40:	b	20d60 <__assert_fail@plt+0xf060>
   20d44:	subge	r1, r1, #1
   20d48:	sublt	r7, r7, #1
   20d4c:	strlt	r4, [r3, r7, lsl #2]
   20d50:	sublt	r0, r0, #1
   20d54:	orr	r5, r0, r1
   20d58:	cmn	r5, #1
   20d5c:	ble	20d7c <__assert_fail@plt+0xf07c>
   20d60:	ldr	r4, [r2, r0, lsl #2]
   20d64:	ldr	r5, [r3, r1, lsl #2]
   20d68:	cmp	r5, r4
   20d6c:	bne	20d44 <__assert_fail@plt+0xf044>
   20d70:	sub	r1, r1, #1
   20d74:	sub	r0, r0, #1
   20d78:	b	20d54 <__assert_fail@plt+0xf054>
   20d7c:	cmp	r0, #0
   20d80:	bmi	20da0 <__assert_fail@plt+0xf0a0>
   20d84:	add	r2, r0, #1
   20d88:	sub	r7, r7, r2
   20d8c:	ldr	r0, [r9, #8]
   20d90:	add	r0, r0, r7, lsl #2
   20d94:	ldr	r1, [r6, #8]
   20d98:	lsl	r2, r2, #2
   20d9c:	bl	11928 <memcpy@plt>
   20da0:	ldr	r1, [r6, #4]
   20da4:	ldr	r0, [r9, #4]
   20da8:	add	r1, r0, r1, lsl #1
   20dac:	sub	r1, r1, #1
   20db0:	sub	r2, r1, r7
   20db4:	adds	r2, r2, #1
   20db8:	bcs	20e18 <__assert_fail@plt+0xf118>
   20dbc:	add	r3, r2, r0
   20dc0:	str	r3, [r9, #4]
   20dc4:	sub	r3, r0, #1
   20dc8:	ldr	r0, [r9, #8]
   20dcc:	ldr	r6, [r0, r3, lsl #2]
   20dd0:	ldr	r5, [r0, r1, lsl #2]
   20dd4:	cmp	r5, r6
   20dd8:	ble	20df4 <__assert_fail@plt+0xf0f4>
   20ddc:	add	r6, r2, r3
   20de0:	str	r5, [r0, r6, lsl #2]
   20de4:	subs	r2, r2, #1
   20de8:	sub	r1, r1, #1
   20dec:	bne	20dcc <__assert_fail@plt+0xf0cc>
   20df0:	b	20e18 <__assert_fail@plt+0xf118>
   20df4:	add	r5, r2, r3
   20df8:	str	r6, [r0, r5, lsl #2]
   20dfc:	sub	r6, r3, #1
   20e00:	cmp	r3, #0
   20e04:	mov	r3, r6
   20e08:	bgt	20dcc <__assert_fail@plt+0xf0cc>
   20e0c:	add	r1, r0, r7, lsl #2
   20e10:	lsl	r2, r2, #2
   20e14:	bl	11928 <memcpy@plt>
   20e18:	mov	r0, r8
   20e1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20e20:	ldr	r0, [r6, #4]
   20e24:	str	r0, [r9, #4]
   20e28:	ldr	r0, [r9, #8]
   20e2c:	ldr	r2, [r6, #4]
   20e30:	ldr	r1, [r6, #8]
   20e34:	b	20e10 <__assert_fail@plt+0xf110>
   20e38:	mov	r8, #12
   20e3c:	mov	r0, r8
   20e40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20e44:	push	{r4, r5, r6, sl, fp, lr}
   20e48:	add	fp, sp, #16
   20e4c:	mov	r6, r2
   20e50:	mov	r4, r1
   20e54:	mov	r5, r0
   20e58:	ldr	r0, [r0]
   20e5c:	ldr	r1, [r0, r1, lsl #3]!
   20e60:	ldr	r2, [r0, #4]
   20e64:	mov	r0, r5
   20e68:	bl	2057c <__assert_fail@plt+0xe87c>
   20e6c:	cmn	r0, #1
   20e70:	ldrne	r1, [r5]
   20e74:	addne	r1, r1, r0, lsl #3
   20e78:	ldrne	r2, [r1, #4]
   20e7c:	bfine	r2, r6, #8, #10
   20e80:	strne	r2, [r1, #4]
   20e84:	ldrne	r1, [r5]
   20e88:	addne	r2, r1, r4, lsl #3
   20e8c:	ldrne	r2, [r2, #4]
   20e90:	movwne	r3, #65280	; 0xff00
   20e94:	movtne	r3, #3
   20e98:	andne	r2, r2, r3
   20e9c:	addne	r1, r1, r0, lsl #3
   20ea0:	ldrne	r3, [r1, #4]
   20ea4:	orrne	r2, r2, r3
   20ea8:	strne	r2, [r1, #4]
   20eac:	ldrne	r1, [r5]
   20eb0:	addne	r1, r1, r0, lsl #3
   20eb4:	ldrne	r2, [r1, #4]
   20eb8:	orrne	r2, r2, #262144	; 0x40000
   20ebc:	strne	r2, [r1, #4]
   20ec0:	ldrne	r1, [r5, #16]
   20ec4:	strne	r4, [r1, r0, lsl #2]
   20ec8:	pop	{r4, r5, r6, sl, fp, pc}
   20ecc:	push	{r4, r5, fp, lr}
   20ed0:	add	fp, sp, #8
   20ed4:	mov	r5, r1
   20ed8:	mov	r4, r0
   20edc:	ldr	r2, [r0]
   20ee0:	cmp	r2, #0
   20ee4:	beq	20f10 <__assert_fail@plt+0xf210>
   20ee8:	ldr	r1, [r4, #4]
   20eec:	cmp	r1, #0
   20ef0:	bne	20f28 <__assert_fail@plt+0xf228>
   20ef4:	ldr	r0, [r4, #8]
   20ef8:	str	r5, [r0]
   20efc:	ldr	r0, [r4, #4]
   20f00:	add	r0, r0, #1
   20f04:	str	r0, [r4, #4]
   20f08:	mov	r0, #1
   20f0c:	pop	{r4, r5, fp, pc}
   20f10:	mov	r0, r4
   20f14:	mov	r1, r5
   20f18:	bl	207c8 <__assert_fail@plt+0xeac8>
   20f1c:	clz	r0, r0
   20f20:	lsr	r0, r0, #5
   20f24:	pop	{r4, r5, fp, pc}
   20f28:	cmp	r2, r1
   20f2c:	bne	20f54 <__assert_fail@plt+0xf254>
   20f30:	lsl	r0, r2, #1
   20f34:	str	r0, [r4]
   20f38:	ldr	r0, [r4, #8]
   20f3c:	lsl	r1, r2, #3
   20f40:	bl	1a350 <__assert_fail@plt+0x8650>
   20f44:	cmp	r0, #0
   20f48:	beq	20fcc <__assert_fail@plt+0xf2cc>
   20f4c:	str	r0, [r4, #8]
   20f50:	ldr	r1, [r4, #4]
   20f54:	ldr	ip, [r4, #8]
   20f58:	ldr	r2, [ip]
   20f5c:	cmp	r2, r5
   20f60:	ble	20f94 <__assert_fail@plt+0xf294>
   20f64:	cmp	r1, #1
   20f68:	blt	20fc4 <__assert_fail@plt+0xf2c4>
   20f6c:	add	r3, ip, r1, lsl #2
   20f70:	mov	r2, r3
   20f74:	ldr	r0, [r2, #-4]!
   20f78:	str	r0, [r3]
   20f7c:	sub	r1, r1, #1
   20f80:	cmp	r1, #0
   20f84:	mov	r3, r2
   20f88:	bgt	20f74 <__assert_fail@plt+0xf274>
   20f8c:	mov	r1, #0
   20f90:	b	20fc4 <__assert_fail@plt+0xf2c4>
   20f94:	add	r2, ip, r1, lsl #2
   20f98:	ldr	r3, [r2, #-4]
   20f9c:	cmp	r3, r5
   20fa0:	ble	20fc4 <__assert_fail@plt+0xf2c4>
   20fa4:	sub	r1, r1, #2
   20fa8:	str	r3, [r2]
   20fac:	ldr	r3, [r2, #-8]
   20fb0:	sub	r2, r2, #4
   20fb4:	sub	r1, r1, #1
   20fb8:	cmp	r3, r5
   20fbc:	bgt	20fa8 <__assert_fail@plt+0xf2a8>
   20fc0:	add	r1, r1, #2
   20fc4:	str	r5, [ip, r1, lsl #2]
   20fc8:	b	20efc <__assert_fail@plt+0xf1fc>
   20fcc:	mov	r0, #0
   20fd0:	pop	{r4, r5, fp, pc}
   20fd4:	push	{r4, r5, fp, lr}
   20fd8:	add	fp, sp, #8
   20fdc:	mov	ip, r0
   20fe0:	ldr	r3, [r0, #8]
   20fe4:	sub	lr, r3, #1
   20fe8:	mvn	r0, #0
   20fec:	cmp	lr, #1
   20ff0:	blt	21048 <__assert_fail@plt+0xf348>
   20ff4:	ldr	r4, [ip]
   20ff8:	add	r4, r4, lr, lsl #3
   20ffc:	ldr	r5, [r4, #4]
   21000:	ands	r4, r5, #262144	; 0x40000
   21004:	beq	21048 <__assert_fail@plt+0xf348>
   21008:	ldr	r4, [ip, #16]
   2100c:	sub	lr, r4, #4
   21010:	ldr	r4, [lr, r3, lsl #2]
   21014:	cmp	r4, r1
   21018:	ubfxeq	r4, r5, #8, #10
   2101c:	cmpeq	r4, r2
   21020:	beq	2104c <__assert_fail@plt+0xf34c>
   21024:	sub	r4, r3, #2
   21028:	cmp	r4, #1
   2102c:	blt	21048 <__assert_fail@plt+0xf348>
   21030:	ldr	r4, [ip]
   21034:	add	r4, r4, r3, lsl #3
   21038:	ldr	r5, [r4, #-12]
   2103c:	ands	r4, r5, #262144	; 0x40000
   21040:	sub	r3, r3, #1
   21044:	bne	21010 <__assert_fail@plt+0xf310>
   21048:	pop	{r4, r5, fp, pc}
   2104c:	sub	r0, r3, #1
   21050:	pop	{r4, r5, fp, pc}
   21054:	push	{r4, r5, fp, lr}
   21058:	add	fp, sp, #8
   2105c:	mov	r4, r1
   21060:	mov	r5, r0
   21064:	ldr	r0, [r0]
   21068:	ldr	r1, [r5, #4]
   2106c:	cmp	r0, r1
   21070:	bne	21098 <__assert_fail@plt+0xf398>
   21074:	mov	r1, #2
   21078:	add	r0, r1, r0, lsl #1
   2107c:	str	r0, [r5]
   21080:	lsl	r1, r0, #2
   21084:	ldr	r0, [r5, #8]
   21088:	bl	1a350 <__assert_fail@plt+0x8650>
   2108c:	cmp	r0, #0
   21090:	beq	210b0 <__assert_fail@plt+0xf3b0>
   21094:	str	r0, [r5, #8]
   21098:	ldmib	r5, {r0, r1}
   2109c:	add	r2, r0, #1
   210a0:	str	r2, [r5, #4]
   210a4:	str	r4, [r1, r0, lsl #2]
   210a8:	mov	r0, #1
   210ac:	pop	{r4, r5, fp, pc}
   210b0:	mov	r0, #0
   210b4:	pop	{r4, r5, fp, pc}
   210b8:	push	{r4, r5, fp, lr}
   210bc:	add	fp, sp, #8
   210c0:	mov	r5, r1
   210c4:	mov	r4, r0
   210c8:	ldr	r0, [r1, #4]
   210cc:	str	r0, [r4, #4]
   210d0:	ldr	r1, [r1, #4]
   210d4:	cmp	r1, #1
   210d8:	blt	2110c <__assert_fail@plt+0xf40c>
   210dc:	str	r0, [r4]
   210e0:	lsl	r0, r0, #2
   210e4:	bl	1a2bc <__assert_fail@plt+0x85bc>
   210e8:	str	r0, [r4, #8]
   210ec:	cmp	r0, #0
   210f0:	beq	21120 <__assert_fail@plt+0xf420>
   210f4:	ldr	r2, [r5, #4]
   210f8:	ldr	r1, [r5, #8]
   210fc:	lsl	r2, r2, #2
   21100:	bl	11928 <memcpy@plt>
   21104:	mov	r0, #0
   21108:	pop	{r4, r5, fp, pc}
   2110c:	mov	r0, #0
   21110:	str	r0, [r4]
   21114:	str	r0, [r4, #4]
   21118:	str	r0, [r4, #8]
   2111c:	pop	{r4, r5, fp, pc}
   21120:	mov	r0, #0
   21124:	str	r0, [r4]
   21128:	str	r0, [r4, #4]
   2112c:	mov	r0, #12
   21130:	pop	{r4, r5, fp, pc}
   21134:	push	{r4, r5, r6, r7, fp, lr}
   21138:	add	fp, sp, #16
   2113c:	mov	ip, r0
   21140:	ldr	r0, [r0, #4]
   21144:	cmp	r0, #1
   21148:	blt	2119c <__assert_fail@plt+0xf49c>
   2114c:	subs	r2, r0, #1
   21150:	mov	r0, #0
   21154:	mov	r3, #0
   21158:	beq	21188 <__assert_fail@plt+0xf488>
   2115c:	ldr	lr, [ip, #8]
   21160:	mov	r3, #0
   21164:	mov	r4, #1
   21168:	add	r5, r2, r3
   2116c:	lsr	r6, r5, #1
   21170:	ldr	r7, [lr, r6, lsl #2]
   21174:	cmp	r7, r1
   21178:	movge	r2, r6
   2117c:	addlt	r3, r4, r5, lsr #1
   21180:	cmp	r3, r2
   21184:	bcc	21168 <__assert_fail@plt+0xf468>
   21188:	ldr	r2, [ip, #8]
   2118c:	ldr	r2, [r2, r3, lsl #2]
   21190:	cmp	r2, r1
   21194:	addeq	r0, r3, #1
   21198:	pop	{r4, r5, r6, r7, fp, pc}
   2119c:	mov	r0, #0
   211a0:	pop	{r4, r5, r6, r7, fp, pc}
   211a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211a8:	add	fp, sp, #28
   211ac:	sub	sp, sp, #12
   211b0:	mov	r6, r1
   211b4:	ldr	r1, [r2, #4]
   211b8:	cmp	r1, #0
   211bc:	beq	2128c <__assert_fail@plt+0xf58c>
   211c0:	mov	r5, r3
   211c4:	mov	sl, r2
   211c8:	str	r0, [sp, #4]
   211cc:	mov	r0, r2
   211d0:	mov	r1, r3
   211d4:	bl	212a0 <__assert_fail@plt+0xf5a0>
   211d8:	mov	r4, r0
   211dc:	ldr	r0, [r6, #32]
   211e0:	str	r6, [sp, #8]
   211e4:	ldr	r1, [r6, #68]	; 0x44
   211e8:	and	r1, r1, r4
   211ec:	add	r1, r1, r1, lsl #1
   211f0:	mov	r6, r0
   211f4:	ldr	r2, [r6, r1, lsl #2]!
   211f8:	cmp	r2, #1
   211fc:	blt	21258 <__assert_fail@plt+0xf558>
   21200:	add	r0, r0, r1, lsl #2
   21204:	ldr	r8, [r0, #8]
   21208:	mov	r9, #0
   2120c:	b	21220 <__assert_fail@plt+0xf520>
   21210:	ldr	r0, [r6]
   21214:	add	r9, r9, #1
   21218:	cmp	r9, r0
   2121c:	bge	21258 <__assert_fail@plt+0xf558>
   21220:	ldr	r7, [r8, r9, lsl #2]
   21224:	ldr	r0, [r7]
   21228:	cmp	r0, r4
   2122c:	bne	21210 <__assert_fail@plt+0xf510>
   21230:	ldrb	r0, [r7, #52]	; 0x34
   21234:	and	r0, r0, #15
   21238:	cmp	r0, r5
   2123c:	bne	21210 <__assert_fail@plt+0xf510>
   21240:	ldr	r0, [r7, #40]	; 0x28
   21244:	mov	r1, sl
   21248:	bl	212cc <__assert_fail@plt+0xf5cc>
   2124c:	cmp	r0, #0
   21250:	beq	21210 <__assert_fail@plt+0xf510>
   21254:	b	21294 <__assert_fail@plt+0xf594>
   21258:	ldr	r0, [sp, #8]
   2125c:	mov	r1, sl
   21260:	mov	r2, r5
   21264:	mov	r3, r4
   21268:	bl	21334 <__assert_fail@plt+0xf634>
   2126c:	mov	r7, r0
   21270:	cmp	r0, #0
   21274:	bne	21294 <__assert_fail@plt+0xf594>
   21278:	mov	r0, #12
   2127c:	ldr	r1, [sp, #4]
   21280:	str	r0, [r1]
   21284:	mov	r7, #0
   21288:	b	21294 <__assert_fail@plt+0xf594>
   2128c:	mov	r7, #0
   21290:	str	r7, [r0]
   21294:	mov	r0, r7
   21298:	sub	sp, fp, #28
   2129c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212a0:	mov	r2, r0
   212a4:	ldr	r3, [r0, #4]
   212a8:	add	r0, r3, r1
   212ac:	cmp	r3, #1
   212b0:	bxlt	lr
   212b4:	ldr	r1, [r2, #8]
   212b8:	ldr	r2, [r1], #4
   212bc:	add	r0, r2, r0
   212c0:	subs	r3, r3, #1
   212c4:	bne	212b8 <__assert_fail@plt+0xf5b8>
   212c8:	bx	lr
   212cc:	push	{fp, lr}
   212d0:	mov	fp, sp
   212d4:	mov	lr, r0
   212d8:	mov	r0, #0
   212dc:	cmp	lr, #0
   212e0:	cmpne	r1, #0
   212e4:	bne	212ec <__assert_fail@plt+0xf5ec>
   212e8:	pop	{fp, pc}
   212ec:	ldr	ip, [lr, #4]
   212f0:	ldr	r3, [r1, #4]
   212f4:	cmp	ip, r3
   212f8:	popne	{fp, pc}
   212fc:	sub	r3, ip, #1
   21300:	add	r2, r3, #1
   21304:	cmp	r2, #1
   21308:	blt	2132c <__assert_fail@plt+0xf62c>
   2130c:	ldr	r2, [r1, #8]
   21310:	ldr	ip, [r2, r3, lsl #2]
   21314:	ldr	r2, [lr, #8]
   21318:	ldr	r2, [r2, r3, lsl #2]
   2131c:	sub	r3, r3, #1
   21320:	cmp	r2, ip
   21324:	beq	21300 <__assert_fail@plt+0xf600>
   21328:	b	212e8 <__assert_fail@plt+0xf5e8>
   2132c:	mov	r0, #1
   21330:	pop	{fp, pc}
   21334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21338:	add	fp, sp, #28
   2133c:	sub	sp, sp, #20
   21340:	mov	r8, r3
   21344:	mov	r9, r2
   21348:	mov	r7, r1
   2134c:	mov	r6, r0
   21350:	mov	r0, #56	; 0x38
   21354:	mov	r1, #1
   21358:	bl	19f4c <__assert_fail@plt+0x824c>
   2135c:	cmp	r0, #0
   21360:	beq	21534 <__assert_fail@plt+0xf834>
   21364:	mov	r4, r0
   21368:	add	r5, r0, #4
   2136c:	mov	r0, r5
   21370:	mov	r1, r7
   21374:	bl	210b8 <__assert_fail@plt+0xf3b8>
   21378:	cmp	r0, #0
   2137c:	bne	2153c <__assert_fail@plt+0xf83c>
   21380:	str	r8, [sp, #4]
   21384:	str	r5, [r4, #40]	; 0x28
   21388:	and	r0, r9, #15
   2138c:	ldrb	r1, [r4, #52]	; 0x34
   21390:	and	r1, r1, #240	; 0xf0
   21394:	orr	r0, r1, r0
   21398:	strb	r0, [r4, #52]	; 0x34
   2139c:	ldr	r0, [r7, #4]
   213a0:	cmp	r0, #1
   213a4:	blt	21508 <__assert_fail@plt+0xf808>
   213a8:	mov	r3, r5
   213ac:	and	r0, r9, #4
   213b0:	str	r0, [sp]
   213b4:	and	r0, r9, #2
   213b8:	str	r0, [sp, #8]
   213bc:	and	r0, r9, #1
   213c0:	str	r0, [sp, #16]
   213c4:	mov	r8, #0
   213c8:	movw	r0, #65280	; 0xff00
   213cc:	movt	r0, #3
   213d0:	add	sl, r0, #255	; 0xff
   213d4:	mov	r9, #0
   213d8:	str	r5, [sp, #12]
   213dc:	b	21404 <__assert_fail@plt+0xf704>
   213e0:	sub	r1, r8, r9
   213e4:	mov	r0, r3
   213e8:	bl	21548 <__assert_fail@plt+0xf848>
   213ec:	ldr	r3, [sp, #12]
   213f0:	add	r9, r9, #1
   213f4:	ldr	r0, [r7, #4]
   213f8:	add	r8, r8, #1
   213fc:	cmp	r8, r0
   21400:	bge	21508 <__assert_fail@plt+0xf808>
   21404:	ldr	r0, [r7, #8]
   21408:	ldr	r0, [r0, r8, lsl #2]
   2140c:	ldr	r1, [r6]
   21410:	add	r0, r1, r0, lsl #3
   21414:	ldr	r5, [r0, #4]
   21418:	and	r0, r5, sl
   2141c:	cmp	r0, #1
   21420:	beq	213f4 <__assert_fail@plt+0xf6f4>
   21424:	movw	r0, #65280	; 0xff00
   21428:	movt	r0, #3
   2142c:	and	r0, r5, r0
   21430:	mov	r1, #32
   21434:	and	r1, r1, r5, lsr #15
   21438:	ldrb	r2, [r4, #52]	; 0x34
   2143c:	orr	r1, r2, r1
   21440:	strb	r1, [r4, #52]	; 0x34
   21444:	uxtb	r2, r5
   21448:	cmp	r2, #2
   2144c:	beq	21460 <__assert_fail@plt+0xf760>
   21450:	cmp	r2, #4
   21454:	bne	2146c <__assert_fail@plt+0xf76c>
   21458:	mov	r2, #64	; 0x40
   2145c:	b	21464 <__assert_fail@plt+0xf764>
   21460:	mov	r2, #16
   21464:	orr	r1, r1, r2
   21468:	strb	r1, [r4, #52]	; 0x34
   2146c:	cmp	r0, #0
   21470:	beq	213f4 <__assert_fail@plt+0xf6f4>
   21474:	ldr	r0, [r4, #40]	; 0x28
   21478:	cmp	r0, r3
   2147c:	bne	214b8 <__assert_fail@plt+0xf7b8>
   21480:	mov	r0, #12
   21484:	bl	1a2bc <__assert_fail@plt+0x85bc>
   21488:	cmp	r0, #0
   2148c:	beq	2152c <__assert_fail@plt+0xf82c>
   21490:	str	r0, [r4, #40]	; 0x28
   21494:	mov	r1, r7
   21498:	bl	210b8 <__assert_fail@plt+0xf3b8>
   2149c:	cmp	r0, #0
   214a0:	bne	2152c <__assert_fail@plt+0xf82c>
   214a4:	ldrb	r0, [r4, #52]	; 0x34
   214a8:	orr	r0, r0, #128	; 0x80
   214ac:	strb	r0, [r4, #52]	; 0x34
   214b0:	mov	r9, #0
   214b4:	ldr	r3, [sp, #12]
   214b8:	ldr	r0, [sp, #16]
   214bc:	cmp	r0, #0
   214c0:	bne	214cc <__assert_fail@plt+0xf7cc>
   214c4:	ands	r0, r5, #256	; 0x100
   214c8:	bne	213e0 <__assert_fail@plt+0xf6e0>
   214cc:	ldr	r0, [sp, #16]
   214d0:	cmp	r0, #0
   214d4:	andsne	r0, r5, #512	; 0x200
   214d8:	bne	213e0 <__assert_fail@plt+0xf6e0>
   214dc:	ldr	r0, [sp, #8]
   214e0:	cmp	r0, #0
   214e4:	bne	214f0 <__assert_fail@plt+0xf7f0>
   214e8:	ands	r0, r5, #4096	; 0x1000
   214ec:	bne	213e0 <__assert_fail@plt+0xf6e0>
   214f0:	ldr	r0, [sp]
   214f4:	cmp	r0, #0
   214f8:	bne	213f4 <__assert_fail@plt+0xf6f4>
   214fc:	ands	r0, r5, #16384	; 0x4000
   21500:	bne	213e0 <__assert_fail@plt+0xf6e0>
   21504:	b	213f4 <__assert_fail@plt+0xf6f4>
   21508:	mov	r0, r6
   2150c:	mov	r1, r4
   21510:	ldr	r2, [sp, #4]
   21514:	bl	21590 <__assert_fail@plt+0xf890>
   21518:	cmp	r0, #0
   2151c:	bne	2152c <__assert_fail@plt+0xf82c>
   21520:	mov	r0, r4
   21524:	sub	sp, fp, #28
   21528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2152c:	mov	r0, r4
   21530:	bl	1bab8 <__assert_fail@plt+0x9db8>
   21534:	mov	r4, #0
   21538:	b	21520 <__assert_fail@plt+0xf820>
   2153c:	mov	r0, r4
   21540:	bl	1a1ec <__assert_fail@plt+0x84ec>
   21544:	b	21534 <__assert_fail@plt+0xf834>
   21548:	cmp	r1, #0
   2154c:	bxmi	lr
   21550:	ldr	r2, [r0, #4]
   21554:	cmp	r2, r1
   21558:	subgt	r2, r2, #1
   2155c:	strgt	r2, [r0, #4]
   21560:	cmpgt	r2, r1
   21564:	bgt	2156c <__assert_fail@plt+0xf86c>
   21568:	bx	lr
   2156c:	ldr	r2, [r0, #8]
   21570:	add	r3, r2, r1, lsl #2
   21574:	ldr	r3, [r3, #4]
   21578:	str	r3, [r2, r1, lsl #2]
   2157c:	add	r1, r1, #1
   21580:	ldr	r3, [r0, #4]
   21584:	cmp	r1, r3
   21588:	blt	21570 <__assert_fail@plt+0xf870>
   2158c:	b	21568 <__assert_fail@plt+0xf868>
   21590:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21594:	add	fp, sp, #28
   21598:	sub	sp, sp, #4
   2159c:	mov	r9, r2
   215a0:	mov	r4, r1
   215a4:	mov	r7, r0
   215a8:	str	r2, [r1]
   215ac:	ldr	r1, [r1, #8]
   215b0:	add	r5, r4, #16
   215b4:	mov	r0, r5
   215b8:	bl	20a28 <__assert_fail@plt+0xed28>
   215bc:	mov	r8, #12
   215c0:	cmp	r0, #0
   215c4:	bne	21660 <__assert_fail@plt+0xf960>
   215c8:	ldr	r0, [r4, #8]
   215cc:	cmp	r0, #1
   215d0:	blt	2161c <__assert_fail@plt+0xf91c>
   215d4:	mov	r6, #0
   215d8:	b	215ec <__assert_fail@plt+0xf8ec>
   215dc:	ldr	r0, [r4, #8]
   215e0:	add	r6, r6, #1
   215e4:	cmp	r6, r0
   215e8:	bge	2161c <__assert_fail@plt+0xf91c>
   215ec:	ldr	r0, [r4, #12]
   215f0:	ldr	r1, [r0, r6, lsl #2]
   215f4:	ldr	r0, [r7]
   215f8:	add	r0, r0, r1, lsl #3
   215fc:	ldrb	r0, [r0, #4]
   21600:	tst	r0, #8
   21604:	bne	215dc <__assert_fail@plt+0xf8dc>
   21608:	mov	r0, r5
   2160c:	bl	21054 <__assert_fail@plt+0xf354>
   21610:	cmp	r0, #0
   21614:	bne	215dc <__assert_fail@plt+0xf8dc>
   21618:	b	21660 <__assert_fail@plt+0xf960>
   2161c:	ldr	sl, [r7, #32]
   21620:	ldr	r0, [r7, #68]	; 0x44
   21624:	and	r0, r0, r9
   21628:	add	r7, r0, r0, lsl #1
   2162c:	mov	r6, sl
   21630:	ldr	r1, [r6, r7, lsl #2]!
   21634:	mov	r5, r6
   21638:	ldr	r0, [r5, #4]!
   2163c:	cmp	r0, r1
   21640:	ble	2166c <__assert_fail@plt+0xf96c>
   21644:	add	r0, sl, r7, lsl #2
   21648:	ldr	r0, [r0, #8]
   2164c:	ldr	r1, [r6]
   21650:	add	r2, r1, #1
   21654:	str	r2, [r6]
   21658:	str	r4, [r0, r1, lsl #2]
   2165c:	mov	r8, #0
   21660:	mov	r0, r8
   21664:	sub	sp, fp, #28
   21668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2166c:	add	r9, sl, r7, lsl #2
   21670:	ldr	r0, [r9, #8]!
   21674:	mov	r2, #2
   21678:	add	r1, r2, r1, lsl #1
   2167c:	str	r1, [sp]
   21680:	lsl	r1, r1, #2
   21684:	bl	1a350 <__assert_fail@plt+0x8650>
   21688:	cmp	r0, #0
   2168c:	beq	21660 <__assert_fail@plt+0xf960>
   21690:	str	r0, [r9]
   21694:	ldr	r0, [sp]
   21698:	str	r0, [r5]
   2169c:	b	21644 <__assert_fail@plt+0xf944>
   216a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216a4:	add	fp, sp, #28
   216a8:	sub	sp, sp, #4
   216ac:	mov	r5, r2
   216b0:	mov	sl, r1
   216b4:	mov	r4, r0
   216b8:	add	r8, r2, #1
   216bc:	cmp	r3, #1
   216c0:	beq	21710 <__assert_fail@plt+0xfa10>
   216c4:	cmp	r3, #0
   216c8:	bne	21754 <__assert_fail@plt+0xfa54>
   216cc:	lsl	r6, r8, #2
   216d0:	mov	r0, r6
   216d4:	bl	1a2bc <__assert_fail@plt+0x85bc>
   216d8:	str	r0, [r4, #4]
   216dc:	mov	r7, #0
   216e0:	cmp	r0, #0
   216e4:	beq	21794 <__assert_fail@plt+0xfa94>
   216e8:	mov	r0, r6
   216ec:	bl	1a2bc <__assert_fail@plt+0x85bc>
   216f0:	str	r0, [r4, #8]
   216f4:	cmp	r0, #0
   216f8:	beq	217f0 <__assert_fail@plt+0xfaf0>
   216fc:	str	r8, [r4]
   21700:	mov	r6, #1
   21704:	cmp	r5, #1
   21708:	bge	21728 <__assert_fail@plt+0xfa28>
   2170c:	b	21760 <__assert_fail@plt+0xfa60>
   21710:	ldr	r0, [r4]
   21714:	mov	r6, #1
   21718:	cmp	r8, r0
   2171c:	bhi	217a0 <__assert_fail@plt+0xfaa0>
   21720:	cmp	r5, #1
   21724:	blt	21760 <__assert_fail@plt+0xfa60>
   21728:	add	r0, sl, #4
   2172c:	ldmib	r4, {r1, r2}
   21730:	mov	r3, r5
   21734:	ldr	r7, [r0, #-4]
   21738:	str	r7, [r1], #4
   2173c:	ldr	r7, [r0]
   21740:	str	r7, [r2], #4
   21744:	add	r0, r0, #8
   21748:	subs	r3, r3, #1
   2174c:	bne	21734 <__assert_fail@plt+0xfa34>
   21750:	b	21764 <__assert_fail@plt+0xfa64>
   21754:	mov	r6, #2
   21758:	cmp	r5, #1
   2175c:	bge	21728 <__assert_fail@plt+0xfa28>
   21760:	mov	r5, #0
   21764:	ldr	r0, [r4]
   21768:	cmp	r5, r0
   2176c:	bcs	21790 <__assert_fail@plt+0xfa90>
   21770:	ldmib	r4, {r0, r1}
   21774:	mvn	r2, #0
   21778:	str	r2, [r1, r5, lsl #2]
   2177c:	str	r2, [r0, r5, lsl #2]
   21780:	add	r5, r5, #1
   21784:	ldr	r3, [r4]
   21788:	cmp	r5, r3
   2178c:	bcc	21778 <__assert_fail@plt+0xfa78>
   21790:	mov	r7, r6
   21794:	mov	r0, r7
   21798:	sub	sp, fp, #28
   2179c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217a0:	ldr	r0, [r4, #4]
   217a4:	lsl	r9, r8, #2
   217a8:	mov	r1, r9
   217ac:	bl	1a350 <__assert_fail@plt+0x8650>
   217b0:	mov	r7, #0
   217b4:	str	r0, [sp]
   217b8:	cmp	r0, #0
   217bc:	beq	21794 <__assert_fail@plt+0xfa94>
   217c0:	ldr	r0, [r4, #8]
   217c4:	mov	r1, r9
   217c8:	bl	1a350 <__assert_fail@plt+0x8650>
   217cc:	cmp	r0, #0
   217d0:	beq	217fc <__assert_fail@plt+0xfafc>
   217d4:	str	r8, [r4]
   217d8:	ldr	r1, [sp]
   217dc:	str	r1, [r4, #4]
   217e0:	str	r0, [r4, #8]
   217e4:	cmp	r5, #1
   217e8:	bge	21728 <__assert_fail@plt+0xfa28>
   217ec:	b	21760 <__assert_fail@plt+0xfa60>
   217f0:	ldr	r0, [r4, #4]
   217f4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   217f8:	b	21794 <__assert_fail@plt+0xfa94>
   217fc:	ldr	r0, [sp]
   21800:	b	217f4 <__assert_fail@plt+0xfaf4>
   21804:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21808:	add	fp, sp, #24
   2180c:	sub	sp, sp, #8
   21810:	mov	r7, r3
   21814:	mov	r4, r2
   21818:	mov	r8, r1
   2181c:	mov	r5, r0
   21820:	ldr	r9, [fp, #16]
   21824:	ldr	r6, [r9, #92]	; 0x5c
   21828:	str	r9, [sp, #4]
   2182c:	ldr	r0, [fp, #12]
   21830:	str	r0, [sp]
   21834:	ldr	r3, [fp, #8]
   21838:	mov	r0, r1
   2183c:	mov	r1, r2
   21840:	mov	r2, r5
   21844:	bl	1c564 <__assert_fail@plt+0xa864>
   21848:	cmp	r6, r7
   2184c:	movgt	r7, r6
   21850:	add	r1, r4, #1
   21854:	cmp	r1, r7
   21858:	movge	r1, r7
   2185c:	mov	r0, r5
   21860:	bl	1c5bc <__assert_fail@plt+0xa8bc>
   21864:	cmp	r0, #0
   21868:	bne	218ac <__assert_fail@plt+0xfbac>
   2186c:	add	r1, r9, #96	; 0x60
   21870:	str	r1, [r5, #68]	; 0x44
   21874:	ldrb	r1, [r9, #88]	; 0x58
   21878:	ubfx	r1, r1, #4, #1
   2187c:	strb	r1, [r5, #78]	; 0x4e
   21880:	ldrb	r1, [r5, #75]	; 0x4b
   21884:	cmp	r1, #0
   21888:	beq	21894 <__assert_fail@plt+0xfb94>
   2188c:	mov	r4, #0
   21890:	b	218a4 <__assert_fail@plt+0xfba4>
   21894:	str	r8, [r5, #4]
   21898:	ldr	r1, [r9, #92]	; 0x5c
   2189c:	cmp	r1, #1
   218a0:	movwgt	r4, #0
   218a4:	str	r4, [r5, #28]
   218a8:	str	r4, [r5, #32]
   218ac:	sub	sp, fp, #24
   218b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   218b4:	push	{r4, r5, r6, sl, fp, lr}
   218b8:	add	fp, sp, #16
   218bc:	mov	r4, r2
   218c0:	mov	r5, r0
   218c4:	mvn	r0, #0
   218c8:	str	r1, [r5, #88]	; 0x58
   218cc:	str	r0, [r5, #92]	; 0x5c
   218d0:	cmp	r2, #1
   218d4:	blt	21920 <__assert_fail@plt+0xfc20>
   218d8:	mov	r6, #12
   218dc:	movw	r0, #43690	; 0xaaaa
   218e0:	movt	r0, #2730	; 0xaaa
   218e4:	cmp	r4, r0
   218e8:	bhi	21918 <__assert_fail@plt+0xfc18>
   218ec:	add	r0, r4, r4, lsl #1
   218f0:	lsl	r0, r0, #3
   218f4:	bl	1a2bc <__assert_fail@plt+0x85bc>
   218f8:	str	r0, [r5, #116]	; 0x74
   218fc:	lsl	r0, r4, #2
   21900:	bl	1a2bc <__assert_fail@plt+0x85bc>
   21904:	str	r0, [r5, #132]	; 0x84
   21908:	cmp	r0, #0
   2190c:	ldrne	r0, [r5, #116]	; 0x74
   21910:	cmpne	r0, #0
   21914:	bne	21920 <__assert_fail@plt+0xfc20>
   21918:	mov	r0, r6
   2191c:	pop	{r4, r5, r6, sl, fp, pc}
   21920:	str	r4, [r5, #128]	; 0x80
   21924:	mov	r0, #1
   21928:	str	r0, [r5, #120]	; 0x78
   2192c:	str	r4, [r5, #112]	; 0x70
   21930:	mov	r6, #0
   21934:	mov	r0, r6
   21938:	pop	{r4, r5, r6, sl, fp, pc}
   2193c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21940:	add	fp, sp, #28
   21944:	sub	sp, sp, #28
   21948:	mov	r6, r2
   2194c:	mov	r7, r1
   21950:	mov	r4, r0
   21954:	ldr	r0, [r0, #24]
   21958:	cmp	r0, r1
   2195c:	ble	21acc <__assert_fail@plt+0xfdcc>
   21960:	ldr	r0, [r4, #80]	; 0x50
   21964:	cmp	r0, #2
   21968:	movge	r0, #0
   2196c:	strge	r0, [r4, #16]
   21970:	strge	r0, [r4, #20]
   21974:	mov	r0, #0
   21978:	strb	r0, [r4, #76]	; 0x4c
   2197c:	str	r0, [r4, #24]
   21980:	str	r0, [r4, #28]
   21984:	str	r0, [r4, #32]
   21988:	mov	r0, #4
   2198c:	tst	r6, #1
   21990:	movweq	r0, #6
   21994:	ldr	r1, [r4, #44]	; 0x2c
   21998:	ldr	r2, [r4, #52]	; 0x34
   2199c:	str	r1, [r4, #48]	; 0x30
   219a0:	str	r2, [r4, #56]	; 0x38
   219a4:	str	r0, [r4, #60]	; 0x3c
   219a8:	ldrb	r0, [r4, #75]	; 0x4b
   219ac:	cmp	r0, #0
   219b0:	mov	r5, r7
   219b4:	bne	219c4 <__assert_fail@plt+0xfcc4>
   219b8:	ldr	r0, [r4]
   219bc:	str	r0, [r4, #4]
   219c0:	mov	r5, r7
   219c4:	cmp	r5, #0
   219c8:	beq	21a54 <__assert_fail@plt+0xfd54>
   219cc:	ldr	r0, [r4, #32]
   219d0:	cmp	r5, r0
   219d4:	bge	21adc <__assert_fail@plt+0xfddc>
   219d8:	ldrb	r0, [r4, #76]	; 0x4c
   219dc:	cmp	r0, #0
   219e0:	bne	21c14 <__assert_fail@plt+0xff14>
   219e4:	sub	r1, r5, #1
   219e8:	mov	r0, r4
   219ec:	mov	r2, r6
   219f0:	bl	228c0 <__assert_fail@plt+0x10bc0>
   219f4:	str	r0, [r4, #60]	; 0x3c
   219f8:	ldr	r0, [r4, #80]	; 0x50
   219fc:	cmp	r0, #2
   21a00:	blt	21a1c <__assert_fail@plt+0xfd1c>
   21a04:	ldr	r0, [r4, #8]
   21a08:	ldr	r2, [r4, #28]
   21a0c:	add	r1, r0, r5, lsl #2
   21a10:	sub	r2, r2, r5
   21a14:	lsl	r2, r2, #2
   21a18:	bl	118e0 <memmove@plt>
   21a1c:	ldrb	r0, [r4, #75]	; 0x4b
   21a20:	cmp	r0, #0
   21a24:	bne	21d0c <__assert_fail@plt+0x1000c>
   21a28:	ldr	r0, [r4, #28]
   21a2c:	ldr	r1, [r4, #32]
   21a30:	sub	r0, r0, r5
   21a34:	sub	r1, r1, r5
   21a38:	str	r0, [r4, #28]
   21a3c:	str	r1, [r4, #32]
   21a40:	ldrb	r0, [r4, #75]	; 0x4b
   21a44:	cmp	r0, #0
   21a48:	ldreq	r0, [r4, #4]
   21a4c:	addeq	r0, r0, r5
   21a50:	streq	r0, [r4, #4]
   21a54:	str	r7, [r4, #24]
   21a58:	ldr	r0, [r4, #48]	; 0x30
   21a5c:	ldr	r1, [r4, #56]	; 0x38
   21a60:	ldr	r2, [r4, #80]	; 0x50
   21a64:	sub	r0, r0, r5
   21a68:	str	r0, [r4, #48]	; 0x30
   21a6c:	sub	r1, r1, r5
   21a70:	str	r1, [r4, #56]	; 0x38
   21a74:	cmp	r2, #2
   21a78:	blt	21aa0 <__assert_fail@plt+0xfda0>
   21a7c:	ldrb	r0, [r4, #72]	; 0x48
   21a80:	cmp	r0, #0
   21a84:	beq	21ab4 <__assert_fail@plt+0xfdb4>
   21a88:	mov	r0, r4
   21a8c:	bl	1c660 <__assert_fail@plt+0xa960>
   21a90:	cmp	r0, #0
   21a94:	beq	21abc <__assert_fail@plt+0xfdbc>
   21a98:	sub	sp, fp, #28
   21a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21aa0:	ldrb	r1, [r4, #75]	; 0x4b
   21aa4:	cmp	r1, #0
   21aa8:	bne	21da0 <__assert_fail@plt+0x100a0>
   21aac:	str	r0, [r4, #28]
   21ab0:	b	21abc <__assert_fail@plt+0xfdbc>
   21ab4:	mov	r0, r4
   21ab8:	bl	1cc70 <__assert_fail@plt+0xaf70>
   21abc:	mov	r0, #0
   21ac0:	str	r0, [r4, #40]	; 0x28
   21ac4:	sub	sp, fp, #28
   21ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21acc:	sub	r5, r7, r0
   21ad0:	cmp	r5, #0
   21ad4:	bne	219cc <__assert_fail@plt+0xfccc>
   21ad8:	b	21a54 <__assert_fail@plt+0xfd54>
   21adc:	ldr	r9, [r4, #28]
   21ae0:	ldrb	r0, [r4, #76]	; 0x4c
   21ae4:	cmp	r0, #0
   21ae8:	bne	21ea8 <__assert_fail@plt+0x101a8>
   21aec:	mov	r0, #0
   21af0:	str	r0, [r4, #28]
   21af4:	ldr	r1, [r4, #80]	; 0x50
   21af8:	cmp	r1, #2
   21afc:	blt	21db8 <__assert_fail@plt+0x100b8>
   21b00:	mvn	r0, #0
   21b04:	str	r0, [sp, #24]
   21b08:	ldrb	r0, [r4, #73]	; 0x49
   21b0c:	cmp	r0, #0
   21b10:	beq	21bc4 <__assert_fail@plt+0xfec4>
   21b14:	ldr	r2, [r4]
   21b18:	ldr	r0, [r4, #24]
   21b1c:	add	r0, r2, r0
   21b20:	add	r8, r0, r5
   21b24:	sub	r1, r5, r1
   21b28:	add	r1, r0, r1
   21b2c:	cmp	r1, r2
   21b30:	movcc	r1, r2
   21b34:	mov	sl, r8
   21b38:	sub	sl, sl, #1
   21b3c:	cmp	sl, r1
   21b40:	bcc	21bb8 <__assert_fail@plt+0xfeb8>
   21b44:	ldrb	r2, [sl]
   21b48:	and	r2, r2, #192	; 0xc0
   21b4c:	cmp	r2, #128	; 0x80
   21b50:	beq	21b38 <__assert_fail@plt+0xfe38>
   21b54:	ldr	r1, [r4, #48]	; 0x30
   21b58:	add	r0, r0, r1
   21b5c:	sub	r2, r0, sl
   21b60:	ldr	r0, [r4, #64]	; 0x40
   21b64:	cmp	r0, #0
   21b68:	mov	r1, sl
   21b6c:	bne	21f30 <__assert_fail@plt+0x10230>
   21b70:	mov	r0, #0
   21b74:	str	r0, [sp, #20]
   21b78:	str	r0, [sp, #16]
   21b7c:	add	r0, sp, #12
   21b80:	add	r3, sp, #16
   21b84:	bl	1a2ec <__assert_fail@plt+0x85ec>
   21b88:	sub	r1, r8, sl
   21b8c:	cmp	r0, r1
   21b90:	bcc	21bb8 <__assert_fail@plt+0xfeb8>
   21b94:	cmn	r0, #3
   21b98:	bhi	21bb8 <__assert_fail@plt+0xfeb8>
   21b9c:	mov	r2, #0
   21ba0:	str	r2, [r4, #16]
   21ba4:	str	r2, [r4, #20]
   21ba8:	sub	r0, r0, r1
   21bac:	str	r0, [r4, #28]
   21bb0:	ldr	r0, [sp, #12]
   21bb4:	str	r0, [sp, #24]
   21bb8:	ldr	r8, [sp, #24]
   21bbc:	cmn	r8, #1
   21bc0:	bne	21be8 <__assert_fail@plt+0xfee8>
   21bc4:	add	r2, sp, #24
   21bc8:	mov	r0, r4
   21bcc:	mov	r1, r7
   21bd0:	bl	2298c <__assert_fail@plt+0x10c8c>
   21bd4:	sub	r0, r0, r7
   21bd8:	str	r0, [r4, #28]
   21bdc:	ldr	r8, [sp, #24]
   21be0:	cmn	r8, #1
   21be4:	beq	21e68 <__assert_fail@plt+0x10168>
   21be8:	ldrb	r0, [r4, #78]	; 0x4e
   21bec:	cmp	r0, #0
   21bf0:	bne	21f0c <__assert_fail@plt+0x1020c>
   21bf4:	mov	r0, #0
   21bf8:	cmp	r8, #10
   21bfc:	bne	21e78 <__assert_fail@plt+0x10178>
   21c00:	ldrb	r0, [r4, #77]	; 0x4d
   21c04:	cmp	r0, #0
   21c08:	movwne	r0, #1
   21c0c:	lsl	r0, r0, #1
   21c10:	b	21e78 <__assert_fail@plt+0x10178>
   21c14:	ldr	r8, [r4, #12]
   21c18:	ldr	r9, [r4, #28]
   21c1c:	mov	r0, #0
   21c20:	mov	r1, r9
   21c24:	b	21c34 <__assert_fail@plt+0xff34>
   21c28:	cmp	r0, r3
   21c2c:	mov	r1, r3
   21c30:	bge	21c60 <__assert_fail@plt+0xff60>
   21c34:	add	r2, r0, r1
   21c38:	add	r2, r2, r2, lsr #31
   21c3c:	asr	sl, r2, #1
   21c40:	ldr	r2, [r8, sl, lsl #2]
   21c44:	cmp	r2, r5
   21c48:	mov	r3, sl
   21c4c:	bgt	21c28 <__assert_fail@plt+0xff28>
   21c50:	bge	21c60 <__assert_fail@plt+0xff60>
   21c54:	add	r0, sl, #1
   21c58:	mov	r3, r1
   21c5c:	b	21c28 <__assert_fail@plt+0xff28>
   21c60:	cmp	r2, r5
   21c64:	addlt	sl, sl, #1
   21c68:	sub	r1, sl, #1
   21c6c:	mov	r0, r4
   21c70:	mov	r2, r6
   21c74:	bl	228c0 <__assert_fail@plt+0x10bc0>
   21c78:	str	r0, [r4, #60]	; 0x3c
   21c7c:	cmp	r9, r5
   21c80:	ble	21d24 <__assert_fail@plt+0x10024>
   21c84:	cmp	sl, r5
   21c88:	bne	21d24 <__assert_fail@plt+0x10024>
   21c8c:	ldr	r0, [r8, sl, lsl #2]
   21c90:	cmp	r0, r5
   21c94:	bne	21d24 <__assert_fail@plt+0x10024>
   21c98:	ldr	r0, [r4, #8]
   21c9c:	add	r1, r0, r5, lsl #2
   21ca0:	sub	r2, r9, r5
   21ca4:	lsl	r2, r2, #2
   21ca8:	bl	118e0 <memmove@plt>
   21cac:	ldr	r0, [r4, #4]
   21cb0:	ldr	r2, [r4, #28]
   21cb4:	add	r1, r0, r5
   21cb8:	sub	r2, r2, r5
   21cbc:	bl	118e0 <memmove@plt>
   21cc0:	ldr	r0, [r4, #28]
   21cc4:	ldr	r1, [r4, #32]
   21cc8:	sub	r0, r0, r5
   21ccc:	sub	r1, r1, r5
   21cd0:	str	r0, [r4, #28]
   21cd4:	str	r1, [r4, #32]
   21cd8:	cmp	r0, #1
   21cdc:	blt	21a40 <__assert_fail@plt+0xfd40>
   21ce0:	ldr	r0, [r4, #12]
   21ce4:	add	r1, r0, r5, lsl #2
   21ce8:	mov	r2, #0
   21cec:	ldr	r3, [r1, r2, lsl #2]
   21cf0:	sub	r3, r3, r5
   21cf4:	str	r3, [r0, r2, lsl #2]
   21cf8:	add	r2, r2, #1
   21cfc:	ldr	r3, [r4, #28]
   21d00:	cmp	r2, r3
   21d04:	blt	21cec <__assert_fail@plt+0xffec>
   21d08:	b	21a40 <__assert_fail@plt+0xfd40>
   21d0c:	ldr	r0, [r4, #4]
   21d10:	ldr	r2, [r4, #28]
   21d14:	add	r1, r0, r5
   21d18:	sub	r2, r2, r5
   21d1c:	bl	118e0 <memmove@plt>
   21d20:	b	21a28 <__assert_fail@plt+0xfd28>
   21d24:	mov	r0, #0
   21d28:	strb	r0, [r4, #76]	; 0x4c
   21d2c:	sub	r0, r5, r7
   21d30:	ldr	r1, [r4, #44]	; 0x2c
   21d34:	ldr	r2, [r4, #52]	; 0x34
   21d38:	add	r1, r0, r1
   21d3c:	str	r1, [r4, #48]	; 0x30
   21d40:	add	r0, r0, r2
   21d44:	str	r0, [r4, #56]	; 0x38
   21d48:	sub	r1, r8, #4
   21d4c:	mov	r0, sl
   21d50:	cmp	sl, #1
   21d54:	blt	21d68 <__assert_fail@plt+0x10068>
   21d58:	ldr	r2, [r1, r0, lsl #2]
   21d5c:	sub	sl, r0, #1
   21d60:	cmp	r2, r5
   21d64:	beq	21d4c <__assert_fail@plt+0x1004c>
   21d68:	cmp	r0, r9
   21d6c:	bge	21d8c <__assert_fail@plt+0x1008c>
   21d70:	ldr	r1, [r4, #8]
   21d74:	ldr	r2, [r1, r0, lsl #2]
   21d78:	cmn	r2, #1
   21d7c:	bne	21d8c <__assert_fail@plt+0x1008c>
   21d80:	add	r0, r0, #1
   21d84:	cmp	r9, r0
   21d88:	bne	21d74 <__assert_fail@plt+0x10074>
   21d8c:	cmp	r0, r9
   21d90:	bne	21e04 <__assert_fail@plt+0x10104>
   21d94:	mov	r0, #0
   21d98:	str	r0, [r4, #28]
   21d9c:	b	21e88 <__assert_fail@plt+0x10188>
   21da0:	ldrb	r0, [r4, #72]	; 0x48
   21da4:	cmp	r0, #0
   21da8:	beq	21e50 <__assert_fail@plt+0x10150>
   21dac:	mov	r0, r4
   21db0:	bl	1cbfc <__assert_fail@plt+0xaefc>
   21db4:	b	21abc <__assert_fail@plt+0xfdbc>
   21db8:	ldr	r2, [r4]
   21dbc:	ldr	r3, [r4, #24]
   21dc0:	ldr	r1, [r4, #64]	; 0x40
   21dc4:	add	r3, r5, r3
   21dc8:	add	r2, r3, r2
   21dcc:	ldrb	r6, [r2, #-1]
   21dd0:	str	r0, [r4, #32]
   21dd4:	cmp	r1, #0
   21dd8:	ldrbne	r6, [r1, r6]
   21ddc:	ldr	r0, [r4, #68]	; 0x44
   21de0:	mov	r1, r6
   21de4:	bl	22a3c <__assert_fail@plt+0x10d3c>
   21de8:	mov	r1, #1
   21dec:	cmp	r0, #0
   21df0:	moveq	r1, #0
   21df4:	cmpeq	r6, #10
   21df8:	beq	21e94 <__assert_fail@plt+0x10194>
   21dfc:	str	r1, [r4, #60]	; 0x3c
   21e00:	b	21a40 <__assert_fail@plt+0xfd40>
   21e04:	ldr	r0, [r8, r0, lsl #2]
   21e08:	subs	r0, r0, r5
   21e0c:	str	r0, [r4, #28]
   21e10:	beq	21e88 <__assert_fail@plt+0x10188>
   21e14:	ldr	r2, [r4, #28]
   21e18:	cmp	r2, #1
   21e1c:	blt	21e40 <__assert_fail@plt+0x10140>
   21e20:	ldr	r0, [r4, #8]
   21e24:	mov	r1, #0
   21e28:	mvn	r3, #0
   21e2c:	str	r3, [r0, r1, lsl #2]
   21e30:	add	r1, r1, #1
   21e34:	ldr	r2, [r4, #28]
   21e38:	cmp	r1, r2
   21e3c:	blt	21e2c <__assert_fail@plt+0x1012c>
   21e40:	ldr	r0, [r4, #4]
   21e44:	mov	r1, #255	; 0xff
   21e48:	bl	11b5c <memset@plt>
   21e4c:	b	21e88 <__assert_fail@plt+0x10188>
   21e50:	ldr	r0, [r4, #64]	; 0x40
   21e54:	cmp	r0, #0
   21e58:	beq	21abc <__assert_fail@plt+0xfdbc>
   21e5c:	mov	r0, r4
   21e60:	bl	1ce2c <__assert_fail@plt+0xb12c>
   21e64:	b	21abc <__assert_fail@plt+0xfdbc>
   21e68:	sub	r1, r9, #1
   21e6c:	mov	r0, r4
   21e70:	mov	r2, r6
   21e74:	bl	228c0 <__assert_fail@plt+0x10bc0>
   21e78:	str	r0, [r4, #60]	; 0x3c
   21e7c:	ldr	r0, [r4, #28]
   21e80:	cmp	r0, #0
   21e84:	bne	21ed0 <__assert_fail@plt+0x101d0>
   21e88:	ldr	r0, [r4, #28]
   21e8c:	str	r0, [r4, #32]
   21e90:	b	21a40 <__assert_fail@plt+0xfd40>
   21e94:	ldrb	r0, [r4, #77]	; 0x4d
   21e98:	cmp	r0, #0
   21e9c:	movwne	r0, #1
   21ea0:	lsl	r1, r0, #1
   21ea4:	b	21dfc <__assert_fail@plt+0x100fc>
   21ea8:	mov	r0, #0
   21eac:	strb	r0, [r4, #76]	; 0x4c
   21eb0:	sub	r0, r5, r7
   21eb4:	ldr	r1, [r4, #44]	; 0x2c
   21eb8:	ldr	r2, [r4, #52]	; 0x34
   21ebc:	add	r1, r0, r1
   21ec0:	str	r1, [r4, #48]	; 0x30
   21ec4:	add	r0, r0, r2
   21ec8:	str	r0, [r4, #56]	; 0x38
   21ecc:	b	21aec <__assert_fail@plt+0xfdec>
   21ed0:	ldr	r2, [r4, #28]
   21ed4:	cmp	r2, #1
   21ed8:	blt	21efc <__assert_fail@plt+0x101fc>
   21edc:	ldr	r0, [r4, #8]
   21ee0:	mov	r1, #0
   21ee4:	mvn	r3, #0
   21ee8:	str	r3, [r0, r1, lsl #2]
   21eec:	add	r1, r1, #1
   21ef0:	ldr	r2, [r4, #28]
   21ef4:	cmp	r1, r2
   21ef8:	blt	21ee8 <__assert_fail@plt+0x101e8>
   21efc:	ldrb	r0, [r4, #75]	; 0x4b
   21f00:	cmp	r0, #0
   21f04:	bne	21e40 <__assert_fail@plt+0x10140>
   21f08:	b	21e88 <__assert_fail@plt+0x10188>
   21f0c:	mov	r0, r8
   21f10:	bl	11b2c <iswalnum@plt>
   21f14:	mov	r1, r0
   21f18:	mov	r0, #1
   21f1c:	cmp	r8, #95	; 0x5f
   21f20:	beq	21e78 <__assert_fail@plt+0x10178>
   21f24:	cmp	r1, #0
   21f28:	beq	21bf4 <__assert_fail@plt+0xfef4>
   21f2c:	b	21e78 <__assert_fail@plt+0x10178>
   21f30:	cmp	r2, #1
   21f34:	blt	21f6c <__assert_fail@plt+0x1026c>
   21f38:	cmp	r2, #6
   21f3c:	mov	r1, r2
   21f40:	movge	r1, #6
   21f44:	sub	ip, r1, #1
   21f48:	add	r1, sp, #6
   21f4c:	ldrb	r3, [sl, ip]
   21f50:	ldrb	r3, [r0, r3]
   21f54:	strb	r3, [r1, ip]
   21f58:	sub	r3, ip, #1
   21f5c:	cmp	ip, #0
   21f60:	mov	ip, r3
   21f64:	bgt	21f4c <__assert_fail@plt+0x1024c>
   21f68:	b	21b70 <__assert_fail@plt+0xfe70>
   21f6c:	add	r1, sp, #6
   21f70:	b	21b70 <__assert_fail@plt+0xfe70>
   21f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f78:	add	fp, sp, #28
   21f7c:	sub	sp, sp, #20
   21f80:	mov	sl, r2
   21f84:	str	r1, [sp, #12]
   21f88:	mov	r7, r0
   21f8c:	ldr	r4, [r0, #84]	; 0x54
   21f90:	ldr	r5, [r0, #40]	; 0x28
   21f94:	mov	r0, #0
   21f98:	str	r0, [sp, #16]
   21f9c:	cmp	r2, #0
   21fa0:	str	r2, [sp, #8]
   21fa4:	movwne	sl, #1
   21fa8:	ldr	r6, [r4, #36]	; 0x24
   21fac:	ldrsb	r0, [r6, #52]	; 0x34
   21fb0:	cmn	r0, #1
   21fb4:	bgt	22020 <__assert_fail@plt+0x10320>
   21fb8:	ldr	r2, [r7, #88]	; 0x58
   21fbc:	sub	r1, r5, #1
   21fc0:	mov	r0, r7
   21fc4:	bl	228c0 <__assert_fail@plt+0x10bc0>
   21fc8:	tst	r0, #1
   21fcc:	bne	2201c <__assert_fail@plt+0x1031c>
   21fd0:	mov	r3, r0
   21fd4:	cmp	r0, #0
   21fd8:	beq	22020 <__assert_fail@plt+0x10320>
   21fdc:	ands	r1, r3, #2
   21fe0:	and	r0, r3, #4
   21fe4:	cmpne	r0, #0
   21fe8:	bne	22228 <__assert_fail@plt+0x10528>
   21fec:	cmp	r1, #0
   21ff0:	bne	22238 <__assert_fail@plt+0x10538>
   21ff4:	cmp	r0, #0
   21ff8:	beq	22020 <__assert_fail@plt+0x10320>
   21ffc:	ldr	r2, [r6, #40]	; 0x28
   22000:	add	r0, sp, #16
   22004:	mov	r1, r4
   22008:	bl	211a4 <__assert_fail@plt+0xf4a4>
   2200c:	mov	r6, r0
   22010:	cmp	r6, #0
   22014:	bne	22028 <__assert_fail@plt+0x10328>
   22018:	b	22244 <__assert_fail@plt+0x10544>
   2201c:	ldr	r6, [r4, #40]	; 0x28
   22020:	cmp	r6, #0
   22024:	beq	22244 <__assert_fail@plt+0x10544>
   22028:	ldr	r0, [r7, #100]	; 0x64
   2202c:	cmp	r0, #0
   22030:	str	r5, [sp]
   22034:	beq	22048 <__assert_fail@plt+0x10348>
   22038:	str	r6, [r0, r5, lsl #2]
   2203c:	ldr	r0, [r4, #76]	; 0x4c
   22040:	cmp	r0, #0
   22044:	bne	22274 <__assert_fail@plt+0x10574>
   22048:	ldrb	r0, [r6, #52]	; 0x34
   2204c:	tst	r0, #16
   22050:	bne	2224c <__assert_fail@plt+0x1054c>
   22054:	mov	r5, #0
   22058:	mvn	r0, #0
   2205c:	str	r0, [sp, #4]
   22060:	ldr	r0, [r7, #40]	; 0x28
   22064:	ldr	r1, [r7, #56]	; 0x38
   22068:	cmp	r1, r0
   2206c:	ble	221fc <__assert_fail@plt+0x104fc>
   22070:	add	r3, sp, #16
   22074:	b	220a8 <__assert_fail@plt+0x103a8>
   22078:	ldr	r1, [r7, #40]	; 0x28
   2207c:	ldr	r0, [sp, #12]
   22080:	cmp	r0, #0
   22084:	beq	2221c <__assert_fail@plt+0x1051c>
   22088:	str	r1, [sp, #4]
   2208c:	mov	r0, #0
   22090:	str	r0, [sp, #8]
   22094:	mov	r5, #1
   22098:	ldr	r0, [r7, #40]	; 0x28
   2209c:	ldr	r1, [r7, #56]	; 0x38
   220a0:	cmp	r1, r0
   220a4:	ble	221fc <__assert_fail@plt+0x104fc>
   220a8:	mov	r9, r6
   220ac:	add	r8, r0, #1
   220b0:	ldr	r1, [r7, #36]	; 0x24
   220b4:	cmp	r8, r1
   220b8:	bge	2219c <__assert_fail@plt+0x1049c>
   220bc:	ldr	r1, [r7, #28]
   220c0:	cmp	r8, r1
   220c4:	bge	221ac <__assert_fail@plt+0x104ac>
   220c8:	mov	r0, r3
   220cc:	mov	r1, r7
   220d0:	mov	r2, r9
   220d4:	mov	r4, r3
   220d8:	bl	22ed8 <__assert_fail@plt+0x111d8>
   220dc:	mov	r6, r0
   220e0:	ldr	r0, [r7, #100]	; 0x64
   220e4:	cmp	r0, #0
   220e8:	beq	22100 <__assert_fail@plt+0x10400>
   220ec:	mov	r0, r4
   220f0:	mov	r1, r7
   220f4:	mov	r2, r6
   220f8:	bl	22f88 <__assert_fail@plt+0x11288>
   220fc:	mov	r6, r0
   22100:	cmp	r6, #0
   22104:	bne	22154 <__assert_fail@plt+0x10454>
   22108:	ldr	r0, [sp, #16]
   2210c:	cmp	r0, #0
   22110:	bne	22244 <__assert_fail@plt+0x10544>
   22114:	ldr	r0, [sp, #12]
   22118:	eor	r0, r0, #1
   2211c:	cmp	r5, #0
   22120:	mov	r1, r5
   22124:	movwne	r1, #1
   22128:	tst	r1, r0
   2212c:	bne	221fc <__assert_fail@plt+0x104fc>
   22130:	ldr	r0, [r7, #100]	; 0x64
   22134:	cmp	r0, #0
   22138:	beq	221fc <__assert_fail@plt+0x104fc>
   2213c:	add	r0, sp, #16
   22140:	mov	r1, r7
   22144:	bl	230d4 <__assert_fail@plt+0x113d4>
   22148:	mov	r6, r0
   2214c:	cmp	r0, #0
   22150:	beq	221fc <__assert_fail@plt+0x104fc>
   22154:	tst	sl, #1
   22158:	bne	221d8 <__assert_fail@plt+0x104d8>
   2215c:	mov	sl, #0
   22160:	add	r3, sp, #16
   22164:	ldrb	r0, [r6, #52]	; 0x34
   22168:	tst	r0, #16
   2216c:	beq	22098 <__assert_fail@plt+0x10398>
   22170:	sxtb	r0, r0
   22174:	cmn	r0, #1
   22178:	bgt	22078 <__assert_fail@plt+0x10378>
   2217c:	ldr	r2, [r7, #40]	; 0x28
   22180:	mov	r0, r7
   22184:	mov	r1, r6
   22188:	bl	22310 <__assert_fail@plt+0x10610>
   2218c:	add	r3, sp, #16
   22190:	cmp	r0, #0
   22194:	bne	22078 <__assert_fail@plt+0x10378>
   22198:	b	22098 <__assert_fail@plt+0x10398>
   2219c:	ldr	r2, [r7, #48]	; 0x30
   221a0:	cmp	r1, r2
   221a4:	bge	220bc <__assert_fail@plt+0x103bc>
   221a8:	b	221b8 <__assert_fail@plt+0x104b8>
   221ac:	ldr	r2, [r7, #48]	; 0x30
   221b0:	cmp	r1, r2
   221b4:	bge	220c8 <__assert_fail@plt+0x103c8>
   221b8:	add	r1, r0, #2
   221bc:	mov	r0, r7
   221c0:	bl	22e04 <__assert_fail@plt+0x11104>
   221c4:	add	r3, sp, #16
   221c8:	str	r0, [sp, #16]
   221cc:	cmp	r0, #0
   221d0:	beq	220c8 <__assert_fail@plt+0x103c8>
   221d4:	b	22244 <__assert_fail@plt+0x10544>
   221d8:	cmp	r9, r6
   221dc:	ldr	r0, [sp]
   221e0:	moveq	r0, r8
   221e4:	str	r0, [sp]
   221e8:	sub	r0, r9, r6
   221ec:	clz	r0, r0
   221f0:	lsr	r0, r0, #5
   221f4:	and	sl, sl, r0
   221f8:	b	22160 <__assert_fail@plt+0x10460>
   221fc:	ldr	r2, [sp, #8]
   22200:	cmp	r2, #0
   22204:	beq	22218 <__assert_fail@plt+0x10518>
   22208:	ldr	r0, [r2]
   2220c:	ldr	r1, [sp]
   22210:	add	r0, r0, r1
   22214:	str	r0, [r2]
   22218:	ldr	r1, [sp, #4]
   2221c:	mov	r0, r1
   22220:	sub	sp, fp, #28
   22224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22228:	ldr	r6, [r4, #48]	; 0x30
   2222c:	cmp	r6, #0
   22230:	bne	22028 <__assert_fail@plt+0x10328>
   22234:	b	22244 <__assert_fail@plt+0x10544>
   22238:	ldr	r6, [r4, #44]	; 0x2c
   2223c:	cmp	r6, #0
   22240:	bne	22028 <__assert_fail@plt+0x10328>
   22244:	mvn	r1, #1
   22248:	b	2221c <__assert_fail@plt+0x1051c>
   2224c:	sxtb	r0, r0
   22250:	cmn	r0, #1
   22254:	ble	222ac <__assert_fail@plt+0x105ac>
   22258:	mov	r4, r5
   2225c:	mov	r5, #1
   22260:	ldr	r0, [sp, #12]
   22264:	cmp	r0, #0
   22268:	str	r4, [sp, #4]
   2226c:	bne	22060 <__assert_fail@plt+0x10360>
   22270:	b	222e4 <__assert_fail@plt+0x105e4>
   22274:	add	r5, r6, #4
   22278:	mov	sl, #0
   2227c:	mov	r0, r7
   22280:	mov	r1, r5
   22284:	mov	r2, #0
   22288:	bl	22a64 <__assert_fail@plt+0x10d64>
   2228c:	str	r0, [sp, #16]
   22290:	cmp	r0, #0
   22294:	bne	22308 <__assert_fail@plt+0x10608>
   22298:	ldrb	r0, [r6, #52]	; 0x34
   2229c:	tst	r0, #64	; 0x40
   222a0:	bne	222ec <__assert_fail@plt+0x105ec>
   222a4:	ldr	r5, [sp]
   222a8:	b	22048 <__assert_fail@plt+0x10348>
   222ac:	mov	r0, r7
   222b0:	mov	r1, r6
   222b4:	mov	r2, r5
   222b8:	bl	22310 <__assert_fail@plt+0x10610>
   222bc:	mov	r4, r5
   222c0:	mov	r5, r0
   222c4:	cmp	r0, #0
   222c8:	mvneq	r4, #0
   222cc:	str	r4, [sp, #4]
   222d0:	movwne	r5, #1
   222d4:	beq	22060 <__assert_fail@plt+0x10360>
   222d8:	ldr	r0, [sp, #12]
   222dc:	cmp	r0, #0
   222e0:	bne	22060 <__assert_fail@plt+0x10360>
   222e4:	ldr	r1, [sp]
   222e8:	b	2221c <__assert_fail@plt+0x1051c>
   222ec:	mov	r0, r7
   222f0:	mov	r1, r5
   222f4:	bl	22af8 <__assert_fail@plt+0x10df8>
   222f8:	str	r0, [sp, #16]
   222fc:	cmp	r0, #0
   22300:	ldr	r5, [sp]
   22304:	beq	22048 <__assert_fail@plt+0x10348>
   22308:	mov	r1, r0
   2230c:	b	2221c <__assert_fail@plt+0x1051c>
   22310:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22314:	add	fp, sp, #24
   22318:	mov	r3, r2
   2231c:	mov	r8, r1
   22320:	mov	r6, r0
   22324:	ldr	r2, [r0, #88]	; 0x58
   22328:	mov	r1, r3
   2232c:	bl	228c0 <__assert_fail@plt+0x10bc0>
   22330:	mov	r9, r0
   22334:	ldr	r0, [r8, #8]
   22338:	cmp	r0, #1
   2233c:	blt	22378 <__assert_fail@plt+0x10678>
   22340:	ldr	r4, [r8, #12]
   22344:	ldr	r6, [r6, #84]	; 0x54
   22348:	mov	r5, #0
   2234c:	ldr	r7, [r4, r5, lsl #2]
   22350:	mov	r0, r6
   22354:	mov	r1, r7
   22358:	mov	r2, r9
   2235c:	bl	257c0 <__assert_fail@plt+0x13ac0>
   22360:	cmp	r0, #0
   22364:	bne	2237c <__assert_fail@plt+0x1067c>
   22368:	add	r5, r5, #1
   2236c:	ldr	r0, [r8, #8]
   22370:	cmp	r5, r0
   22374:	blt	2234c <__assert_fail@plt+0x1064c>
   22378:	mov	r7, #0
   2237c:	mov	r0, r7
   22380:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22388:	add	fp, sp, #28
   2238c:	sub	sp, sp, #44	; 0x2c
   22390:	ldr	r7, [r0, #92]	; 0x5c
   22394:	cmn	r7, #-1073741822	; 0xc0000002
   22398:	bhi	22598 <__assert_fail@plt+0x10898>
   2239c:	ldr	r5, [r0, #84]	; 0x54
   223a0:	str	r0, [sp, #12]
   223a4:	ldr	sl, [r0, #96]	; 0x60
   223a8:	mov	r0, #4
   223ac:	add	r6, r0, r7, lsl #2
   223b0:	mov	r0, r6
   223b4:	bl	1a2bc <__assert_fail@plt+0x85bc>
   223b8:	mov	r4, #12
   223bc:	cmp	r0, #0
   223c0:	beq	22568 <__assert_fail@plt+0x10868>
   223c4:	mov	r9, r0
   223c8:	ldr	r0, [r5, #76]	; 0x4c
   223cc:	cmp	r0, #0
   223d0:	beq	223f8 <__assert_fail@plt+0x106f8>
   223d4:	mov	r0, r6
   223d8:	bl	1a2bc <__assert_fail@plt+0x85bc>
   223dc:	cmp	r0, #0
   223e0:	beq	2256c <__assert_fail@plt+0x1086c>
   223e4:	mov	r8, r0
   223e8:	str	r5, [sp, #8]
   223ec:	add	r4, sp, #16
   223f0:	mov	r5, sl
   223f4:	b	224b0 <__assert_fail@plt+0x107b0>
   223f8:	str	r7, [sp]
   223fc:	add	r4, sp, #16
   22400:	mov	r8, #0
   22404:	mov	r0, r4
   22408:	mov	r1, r9
   2240c:	mov	r2, #0
   22410:	mov	r3, sl
   22414:	bl	25834 <__assert_fail@plt+0x13b34>
   22418:	ldr	r0, [sp, #12]
   2241c:	mov	r1, r4
   22420:	bl	25854 <__assert_fail@plt+0x13b54>
   22424:	mov	r4, r0
   22428:	ldr	r0, [sp, #40]	; 0x28
   2242c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22430:	cmp	r4, #0
   22434:	bne	22570 <__assert_fail@plt+0x10870>
   22438:	ldr	r0, [r9]
   2243c:	cmp	r0, #0
   22440:	bne	2254c <__assert_fail@plt+0x1084c>
   22444:	mov	r4, #1
   22448:	b	22570 <__assert_fail@plt+0x10870>
   2244c:	mov	r4, #1
   22450:	cmp	r7, #1
   22454:	blt	2258c <__assert_fail@plt+0x1088c>
   22458:	sub	r7, r7, #1
   2245c:	ldr	sl, [sp, #12]
   22460:	ldr	r0, [sl, #100]	; 0x64
   22464:	mov	r9, r1
   22468:	mov	r8, r6
   2246c:	b	22484 <__assert_fail@plt+0x10784>
   22470:	sub	r1, r7, #1
   22474:	add	r2, r7, #1
   22478:	cmp	r2, #2
   2247c:	mov	r7, r1
   22480:	blt	22570 <__assert_fail@plt+0x10870>
   22484:	ldr	r1, [r0, r7, lsl #2]
   22488:	cmp	r1, #0
   2248c:	beq	22470 <__assert_fail@plt+0x10770>
   22490:	ldrb	r2, [r1, #52]	; 0x34
   22494:	tst	r2, #16
   22498:	beq	22470 <__assert_fail@plt+0x10770>
   2249c:	mov	r0, sl
   224a0:	mov	r2, r7
   224a4:	bl	22310 <__assert_fail@plt+0x10610>
   224a8:	mov	r4, r5
   224ac:	mov	r5, r0
   224b0:	add	sl, r7, #1
   224b4:	lsl	r2, sl, #2
   224b8:	mov	r0, r8
   224bc:	mov	r1, #0
   224c0:	bl	11b5c <memset@plt>
   224c4:	str	r7, [sp]
   224c8:	mov	r0, r4
   224cc:	mov	r1, r9
   224d0:	mov	r6, r8
   224d4:	mov	r2, r8
   224d8:	mov	r8, r5
   224dc:	mov	r3, r5
   224e0:	bl	25834 <__assert_fail@plt+0x13b34>
   224e4:	ldr	r0, [sp, #12]
   224e8:	mov	r5, r4
   224ec:	mov	r1, r4
   224f0:	bl	25854 <__assert_fail@plt+0x13b54>
   224f4:	mov	r4, r0
   224f8:	ldr	r0, [sp, #40]	; 0x28
   224fc:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22500:	cmp	r4, #0
   22504:	bne	225a0 <__assert_fail@plt+0x108a0>
   22508:	mov	r1, r9
   2250c:	ldr	r0, [r9]
   22510:	cmp	r0, #0
   22514:	ldreq	r0, [r6]
   22518:	cmpeq	r0, #0
   2251c:	beq	2244c <__assert_fail@plt+0x1074c>
   22520:	ldr	r0, [sp, #8]
   22524:	mov	r9, r1
   22528:	mov	r2, r6
   2252c:	mov	r3, sl
   22530:	bl	2596c <__assert_fail@plt+0x13c6c>
   22534:	mov	r4, r0
   22538:	mov	r0, r6
   2253c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22540:	cmp	r4, #0
   22544:	mov	sl, r8
   22548:	bne	2256c <__assert_fail@plt+0x1086c>
   2254c:	ldr	r4, [sp, #12]
   22550:	ldr	r0, [r4, #100]	; 0x64
   22554:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22558:	str	r7, [r4, #92]	; 0x5c
   2255c:	str	sl, [r4, #96]	; 0x60
   22560:	str	r9, [r4, #100]	; 0x64
   22564:	mov	r4, #0
   22568:	mov	r9, #0
   2256c:	mov	r8, #0
   22570:	mov	r0, r9
   22574:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22578:	mov	r0, r8
   2257c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22580:	mov	r0, r4
   22584:	sub	sp, fp, #28
   22588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2258c:	mov	r9, r1
   22590:	mov	r8, r6
   22594:	b	22570 <__assert_fail@plt+0x10870>
   22598:	mov	r4, #12
   2259c:	b	22580 <__assert_fail@plt+0x10880>
   225a0:	mov	r8, r6
   225a4:	b	22570 <__assert_fail@plt+0x10870>
   225a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   225ac:	add	fp, sp, #24
   225b0:	mov	r8, r0
   225b4:	ldr	r0, [r0, #124]	; 0x7c
   225b8:	cmp	r0, #1
   225bc:	blt	22648 <__assert_fail@plt+0x10948>
   225c0:	mov	r7, #0
   225c4:	b	225e0 <__assert_fail@plt+0x108e0>
   225c8:	mov	r0, r5
   225cc:	bl	1a1ec <__assert_fail@plt+0x84ec>
   225d0:	add	r7, r7, #1
   225d4:	ldr	r0, [r8, #124]	; 0x7c
   225d8:	cmp	r7, r0
   225dc:	bge	22648 <__assert_fail@plt+0x10948>
   225e0:	ldr	r0, [r8, #132]	; 0x84
   225e4:	ldr	r5, [r0, r7, lsl #2]
   225e8:	ldr	r0, [r5, #16]
   225ec:	cmp	r0, #1
   225f0:	blt	22620 <__assert_fail@plt+0x10920>
   225f4:	mov	r4, #0
   225f8:	ldr	r0, [r5, #20]
   225fc:	ldr	r6, [r0, r4, lsl #2]
   22600:	ldr	r0, [r6, #16]
   22604:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22608:	mov	r0, r6
   2260c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22610:	add	r4, r4, #1
   22614:	ldr	r0, [r5, #16]
   22618:	cmp	r4, r0
   2261c:	blt	225f8 <__assert_fail@plt+0x108f8>
   22620:	ldr	r0, [r5, #20]
   22624:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22628:	ldr	r0, [r5, #8]
   2262c:	cmp	r0, #0
   22630:	beq	225c8 <__assert_fail@plt+0x108c8>
   22634:	ldr	r0, [r0, #8]
   22638:	bl	1a1ec <__assert_fail@plt+0x84ec>
   2263c:	ldr	r0, [r5, #8]
   22640:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22644:	b	225c8 <__assert_fail@plt+0x108c8>
   22648:	mov	r0, #0
   2264c:	str	r0, [r8, #108]	; 0x6c
   22650:	str	r0, [r8, #124]	; 0x7c
   22654:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2265c:	add	fp, sp, #28
   22660:	sub	sp, sp, #204	; 0xcc
   22664:	mov	r5, r3
   22668:	mov	r6, r2
   2266c:	mov	r9, r1
   22670:	ldr	r4, [r0]
   22674:	movw	r0, #44944	; 0xaf90
   22678:	movt	r0, #2
   2267c:	vldr	d16, [r0]
   22680:	ldr	r0, [r0, #8]
   22684:	str	r0, [fp, #-56]	; 0xffffffc8
   22688:	vstr	d16, [fp, #-64]	; 0xffffffc0
   2268c:	add	r0, sp, #28
   22690:	bl	26a30 <__assert_fail@plt+0x14d30>
   22694:	mov	r7, #0
   22698:	ldr	r0, [fp, #8]
   2269c:	cmp	r0, #0
   226a0:	mov	sl, #0
   226a4:	beq	226c8 <__assert_fail@plt+0x109c8>
   226a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   226ac:	add	r0, r0, r0, lsl #1
   226b0:	lsl	r0, r0, #3
   226b4:	bl	1a2bc <__assert_fail@plt+0x85bc>
   226b8:	str	r0, [fp, #-56]	; 0xffffffc8
   226bc:	cmp	r0, #0
   226c0:	beq	22864 <__assert_fail@plt+0x10b64>
   226c4:	sub	sl, fp, #64	; 0x40
   226c8:	ldr	r8, [r4, #72]	; 0x48
   226cc:	str	r7, [fp, #-44]	; 0xffffffd4
   226d0:	str	r7, [fp, #-48]	; 0xffffffd0
   226d4:	str	r7, [fp, #-40]	; 0xffffffd8
   226d8:	add	r0, sp, #28
   226dc:	mov	r1, r6
   226e0:	bl	26a48 <__assert_fail@plt+0x14d48>
   226e4:	mov	r7, #12
   226e8:	cmp	r0, #0
   226ec:	beq	22878 <__assert_fail@plt+0x10b78>
   226f0:	str	r4, [sp, #20]
   226f4:	str	r9, [sp, #24]
   226f8:	add	r0, sp, #28
   226fc:	bl	26b20 <__assert_fail@plt+0x14e20>
   22700:	mov	r4, r0
   22704:	lsl	r2, r6, #3
   22708:	mov	r1, r5
   2270c:	bl	11928 <memcpy@plt>
   22710:	ldr	r9, [r5]
   22714:	ldr	r0, [r5, #4]
   22718:	str	r9, [fp, #-32]	; 0xffffffe0
   2271c:	mov	r7, #0
   22720:	cmp	r9, r0
   22724:	bgt	22870 <__assert_fail@plt+0x10b70>
   22728:	str	r9, [sp]
   2272c:	str	r6, [sp, #4]
   22730:	ldr	r0, [sp, #20]
   22734:	mov	r1, r5
   22738:	mov	r2, r4
   2273c:	mov	r3, r8
   22740:	bl	26b28 <__assert_fail@plt+0x14e28>
   22744:	ldr	r0, [r5, #4]
   22748:	cmp	r9, r0
   2274c:	ldr	r9, [sp, #24]
   22750:	bne	22760 <__assert_fail@plt+0x10a60>
   22754:	ldr	r0, [r9, #96]	; 0x60
   22758:	cmp	r8, r0
   2275c:	beq	2277c <__assert_fail@plt+0x10a7c>
   22760:	cmp	sl, #0
   22764:	beq	227e0 <__assert_fail@plt+0x10ae0>
   22768:	sub	r0, fp, #48	; 0x30
   2276c:	mov	r1, r8
   22770:	bl	21134 <__assert_fail@plt+0xf434>
   22774:	cmp	r0, #0
   22778:	beq	227e0 <__assert_fail@plt+0x10ae0>
   2277c:	cmp	sl, #0
   22780:	beq	22870 <__assert_fail@plt+0x10b70>
   22784:	mov	r0, #0
   22788:	b	22798 <__assert_fail@plt+0x10a98>
   2278c:	add	r0, r0, #1
   22790:	cmp	r6, r0
   22794:	beq	2286c <__assert_fail@plt+0x10b6c>
   22798:	ldr	r1, [r5, r0, lsl #3]
   2279c:	cmp	r1, #0
   227a0:	bmi	2278c <__assert_fail@plt+0x10a8c>
   227a4:	add	r1, r5, r0, lsl #3
   227a8:	ldr	r1, [r1, #4]
   227ac:	cmn	r1, #1
   227b0:	bne	2278c <__assert_fail@plt+0x10a8c>
   227b4:	str	r4, [sp]
   227b8:	sub	r0, fp, #48	; 0x30
   227bc:	str	r0, [sp, #4]
   227c0:	mov	r0, sl
   227c4:	sub	r1, fp, #32
   227c8:	mov	r2, r6
   227cc:	mov	r3, r5
   227d0:	bl	26be0 <__assert_fail@plt+0x14ee0>
   227d4:	mov	r8, r0
   227d8:	cmp	r0, #0
   227dc:	bmi	2286c <__assert_fail@plt+0x10b6c>
   227e0:	sub	r0, fp, #32
   227e4:	stm	sp, {r0, r8}
   227e8:	sub	r0, fp, #48	; 0x30
   227ec:	str	r0, [sp, #8]
   227f0:	str	sl, [sp, #12]
   227f4:	mov	r0, r9
   227f8:	mov	r1, r6
   227fc:	mov	r2, r5
   22800:	mov	r3, r4
   22804:	bl	26c98 <__assert_fail@plt+0x14f98>
   22808:	mov	r8, r0
   2280c:	cmn	r0, #1
   22810:	ble	22828 <__assert_fail@plt+0x10b28>
   22814:	ldr	r0, [r5, #4]
   22818:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2281c:	cmp	r9, r0
   22820:	ble	22728 <__assert_fail@plt+0x10a28>
   22824:	b	22870 <__assert_fail@plt+0x10b70>
   22828:	cmn	r8, #2
   2282c:	beq	22894 <__assert_fail@plt+0x10b94>
   22830:	str	r4, [sp]
   22834:	sub	r0, fp, #48	; 0x30
   22838:	str	r0, [sp, #4]
   2283c:	mov	r0, sl
   22840:	sub	r1, fp, #32
   22844:	mov	r2, r6
   22848:	mov	r3, r5
   2284c:	bl	26be0 <__assert_fail@plt+0x14ee0>
   22850:	mov	r8, r0
   22854:	cmp	r0, #0
   22858:	bpl	22814 <__assert_fail@plt+0x10b14>
   2285c:	mov	r7, #1
   22860:	b	22870 <__assert_fail@plt+0x10b70>
   22864:	mov	r7, #12
   22868:	b	22888 <__assert_fail@plt+0x10b88>
   2286c:	mov	r7, #0
   22870:	ldr	r0, [fp, #-40]	; 0xffffffd8
   22874:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22878:	add	r0, sp, #28
   2287c:	bl	26a9c <__assert_fail@plt+0x14d9c>
   22880:	mov	r0, sl
   22884:	bl	26ab8 <__assert_fail@plt+0x14db8>
   22888:	mov	r0, r7
   2288c:	sub	sp, fp, #28
   22890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22894:	mov	r7, #12
   22898:	b	22870 <__assert_fail@plt+0x10b70>
   2289c:	push	{r4, sl, fp, lr}
   228a0:	add	fp, sp, #8
   228a4:	mov	r4, r0
   228a8:	bl	225a8 <__assert_fail@plt+0x108a8>
   228ac:	ldr	r0, [r4, #132]	; 0x84
   228b0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   228b4:	ldr	r0, [r4, #116]	; 0x74
   228b8:	pop	{r4, sl, fp, lr}
   228bc:	b	1a1ec <__assert_fail@plt+0x84ec>
   228c0:	push	{r4, r5, fp, lr}
   228c4:	add	fp, sp, #8
   228c8:	mov	r4, r0
   228cc:	cmn	r1, #1
   228d0:	ble	22908 <__assert_fail@plt+0x10c08>
   228d4:	ldr	r0, [r4, #48]	; 0x30
   228d8:	cmp	r0, r1
   228dc:	beq	22964 <__assert_fail@plt+0x10c64>
   228e0:	ldr	r0, [r4, #80]	; 0x50
   228e4:	cmp	r0, #2
   228e8:	blt	22910 <__assert_fail@plt+0x10c10>
   228ec:	ldr	r0, [r4, #8]
   228f0:	ldr	r5, [r0, r1, lsl #2]
   228f4:	cmn	r5, #1
   228f8:	bne	22938 <__assert_fail@plt+0x10c38>
   228fc:	sub	r1, r1, #1
   22900:	cmn	r1, #1
   22904:	bne	228f0 <__assert_fail@plt+0x10bf0>
   22908:	ldr	r0, [r4, #60]	; 0x3c
   2290c:	pop	{r4, r5, fp, pc}
   22910:	ldr	r2, [r4, #4]
   22914:	ldr	r0, [r4, #68]	; 0x44
   22918:	ldrb	r5, [r2, r1]
   2291c:	mov	r1, r5
   22920:	bl	22a3c <__assert_fail@plt+0x10d3c>
   22924:	mov	r1, r0
   22928:	mov	r0, #1
   2292c:	cmp	r1, #0
   22930:	beq	22944 <__assert_fail@plt+0x10c44>
   22934:	b	22960 <__assert_fail@plt+0x10c60>
   22938:	ldrb	r0, [r4, #78]	; 0x4e
   2293c:	cmp	r0, #0
   22940:	bne	22970 <__assert_fail@plt+0x10c70>
   22944:	mov	r0, #0
   22948:	cmp	r5, #10
   2294c:	popne	{r4, r5, fp, pc}
   22950:	ldrb	r0, [r4, #77]	; 0x4d
   22954:	cmp	r0, #0
   22958:	movwne	r0, #1
   2295c:	lsl	r0, r0, #1
   22960:	pop	{r4, r5, fp, pc}
   22964:	and	r0, r2, #2
   22968:	eor	r0, r0, #10
   2296c:	pop	{r4, r5, fp, pc}
   22970:	mov	r0, r5
   22974:	bl	11b2c <iswalnum@plt>
   22978:	mov	r1, r0
   2297c:	mov	r0, #1
   22980:	cmp	r5, #95	; 0x5f
   22984:	bne	2292c <__assert_fail@plt+0x10c2c>
   22988:	b	22960 <__assert_fail@plt+0x10c60>
   2298c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22990:	add	fp, sp, #28
   22994:	sub	sp, sp, #12
   22998:	str	r2, [sp, #4]
   2299c:	mov	sl, r1
   229a0:	mov	r7, r0
   229a4:	ldr	r0, [r0, #24]
   229a8:	ldr	r1, [r7, #32]
   229ac:	add	r5, r1, r0
   229b0:	mvn	r1, #0
   229b4:	cmp	r5, sl
   229b8:	bge	22a28 <__assert_fail@plt+0x10d28>
   229bc:	add	r4, r7, #16
   229c0:	ldr	r0, [r7]
   229c4:	ldr	r2, [r7, #44]	; 0x2c
   229c8:	add	r1, r0, r5
   229cc:	sub	r6, r2, r5
   229d0:	ldm	r4, {r8, r9}
   229d4:	add	r0, sp, #8
   229d8:	mov	r2, r6
   229dc:	mov	r3, r4
   229e0:	bl	1a2ec <__assert_fail@plt+0x85ec>
   229e4:	sub	r1, r0, #1
   229e8:	cmn	r1, #3
   229ec:	bcs	22a04 <__assert_fail@plt+0x10d04>
   229f0:	ldr	r1, [sp, #8]
   229f4:	add	r5, r0, r5
   229f8:	cmp	r5, sl
   229fc:	blt	229c0 <__assert_fail@plt+0x10cc0>
   22a00:	b	22a28 <__assert_fail@plt+0x10d28>
   22a04:	mov	r1, #0
   22a08:	cmp	r6, #0
   22a0c:	cmpne	r0, #0
   22a10:	beq	22a1c <__assert_fail@plt+0x10d1c>
   22a14:	ldr	r0, [r7]
   22a18:	ldrb	r1, [r0, r5]
   22a1c:	stm	r4, {r8, r9}
   22a20:	mov	r0, #1
   22a24:	b	229f4 <__assert_fail@plt+0x10cf4>
   22a28:	ldr	r0, [sp, #4]
   22a2c:	str	r1, [r0]
   22a30:	mov	r0, r5
   22a34:	sub	sp, fp, #28
   22a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a3c:	asr	r2, r1, #31
   22a40:	add	r2, r1, r2, lsr #27
   22a44:	asr	r2, r2, #5
   22a48:	ldr	r0, [r0, r2, lsl #2]
   22a4c:	and	r1, r1, #31
   22a50:	mov	r2, #1
   22a54:	and	r0, r0, r2, lsl r1
   22a58:	cmp	r0, #0
   22a5c:	movwne	r0, #1
   22a60:	bx	lr
   22a64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22a68:	add	fp, sp, #24
   22a6c:	mov	r6, r0
   22a70:	ldr	r0, [r1, #4]
   22a74:	cmp	r0, #1
   22a78:	blt	22af0 <__assert_fail@plt+0x10df0>
   22a7c:	mov	r8, r2
   22a80:	mov	r5, r1
   22a84:	ldr	r7, [r6, #84]	; 0x54
   22a88:	mov	r4, #0
   22a8c:	mov	r9, #1
   22a90:	b	22aa4 <__assert_fail@plt+0x10da4>
   22a94:	add	r4, r4, #1
   22a98:	ldr	r0, [r5, #4]
   22a9c:	cmp	r4, r0
   22aa0:	bge	22af0 <__assert_fail@plt+0x10df0>
   22aa4:	ldr	r0, [r5, #8]
   22aa8:	ldr	r1, [r0, r4, lsl #2]
   22aac:	ldr	r0, [r7]
   22ab0:	add	r2, r0, r1, lsl #3
   22ab4:	ldrb	r2, [r2, #4]
   22ab8:	cmp	r2, #8
   22abc:	bne	22a94 <__assert_fail@plt+0x10d94>
   22ac0:	ldr	r0, [r0, r1, lsl #3]
   22ac4:	cmp	r0, #31
   22ac8:	bgt	22a94 <__assert_fail@plt+0x10d94>
   22acc:	ldr	r2, [r7, #80]	; 0x50
   22ad0:	tst	r2, r9, lsl r0
   22ad4:	beq	22a94 <__assert_fail@plt+0x10d94>
   22ad8:	mov	r0, r6
   22adc:	mov	r2, r8
   22ae0:	bl	23148 <__assert_fail@plt+0x11448>
   22ae4:	cmp	r0, #0
   22ae8:	beq	22a94 <__assert_fail@plt+0x10d94>
   22aec:	b	22af4 <__assert_fail@plt+0x10df4>
   22af0:	mov	r0, #0
   22af4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22afc:	add	fp, sp, #28
   22b00:	sub	sp, sp, #52	; 0x34
   22b04:	mov	r5, r0
   22b08:	ldr	r0, [r1, #4]
   22b0c:	cmp	r0, #1
   22b10:	blt	22de4 <__assert_fail@plt+0x110e4>
   22b14:	mov	r8, r1
   22b18:	ldr	r9, [r5, #84]	; 0x54
   22b1c:	ldr	r0, [r5, #40]	; 0x28
   22b20:	str	r0, [sp, #32]
   22b24:	mov	sl, #0
   22b28:	str	r1, [sp, #4]
   22b2c:	str	r9, [sp, #16]
   22b30:	b	22b44 <__assert_fail@plt+0x10e44>
   22b34:	ldr	r0, [r8, #4]
   22b38:	add	sl, sl, #1
   22b3c:	cmp	sl, r0
   22b40:	bge	22de4 <__assert_fail@plt+0x110e4>
   22b44:	ldr	r0, [r8, #8]
   22b48:	ldr	r4, [r0, sl, lsl #2]
   22b4c:	ldr	r0, [r9]
   22b50:	add	r0, r0, r4, lsl #3
   22b54:	ldr	r6, [r0, #4]
   22b58:	uxtb	r0, r6
   22b5c:	cmp	r0, #4
   22b60:	bne	22b34 <__assert_fail@plt+0x10e34>
   22b64:	movw	r0, #65280	; 0xff00
   22b68:	movt	r0, #3
   22b6c:	tst	r6, r0
   22b70:	beq	22bc4 <__assert_fail@plt+0x10ec4>
   22b74:	ldr	r2, [r5, #88]	; 0x58
   22b78:	mov	r0, r5
   22b7c:	ldr	r1, [sp, #32]
   22b80:	bl	228c0 <__assert_fail@plt+0x10bc0>
   22b84:	and	r1, r0, #1
   22b88:	tst	r6, #1024	; 0x400
   22b8c:	beq	22b98 <__assert_fail@plt+0x10e98>
   22b90:	cmp	r1, #0
   22b94:	beq	22b34 <__assert_fail@plt+0x10e34>
   22b98:	tst	r6, #2048	; 0x800
   22b9c:	cmpne	r1, #0
   22ba0:	bne	22b34 <__assert_fail@plt+0x10e34>
   22ba4:	tst	r6, #8192	; 0x2000
   22ba8:	beq	22bb4 <__assert_fail@plt+0x10eb4>
   22bac:	ands	r1, r0, #2
   22bb0:	beq	22b34 <__assert_fail@plt+0x10e34>
   22bb4:	tst	r6, #32768	; 0x8000
   22bb8:	beq	22bc4 <__assert_fail@plt+0x10ec4>
   22bbc:	ands	r0, r0, #8
   22bc0:	beq	22b34 <__assert_fail@plt+0x10e34>
   22bc4:	ldr	r6, [r5, #108]	; 0x6c
   22bc8:	mov	r0, r5
   22bcc:	mov	r1, r4
   22bd0:	ldr	r2, [sp, #32]
   22bd4:	bl	231d4 <__assert_fail@plt+0x114d4>
   22bd8:	str	r0, [fp, #-32]	; 0xffffffe0
   22bdc:	cmp	r0, #0
   22be0:	bne	22dec <__assert_fail@plt+0x110ec>
   22be4:	ldr	r0, [r5, #108]	; 0x6c
   22be8:	cmp	r6, r0
   22bec:	bge	22b34 <__assert_fail@plt+0x10e34>
   22bf0:	add	r0, r6, r6, lsl #1
   22bf4:	lsl	r7, r0, #3
   22bf8:	str	r4, [sp, #8]
   22bfc:	b	22c14 <__assert_fail@plt+0x10f14>
   22c00:	add	r7, r7, #24
   22c04:	add	r6, r6, #1
   22c08:	ldr	r0, [r5, #108]	; 0x6c
   22c0c:	cmp	r6, r0
   22c10:	bge	22b34 <__assert_fail@plt+0x10e34>
   22c14:	ldr	r0, [r5, #116]	; 0x74
   22c18:	ldr	r1, [r0, r7]
   22c1c:	cmp	r1, r4
   22c20:	bne	22c00 <__assert_fail@plt+0x10f00>
   22c24:	add	r0, r0, r7
   22c28:	ldr	r1, [r0, #4]
   22c2c:	ldr	r2, [sp, #32]
   22c30:	cmp	r1, r2
   22c34:	bne	22c00 <__assert_fail@plt+0x10f00>
   22c38:	ldr	r2, [r0, #8]
   22c3c:	ldr	r3, [r0, #12]
   22c40:	ldr	r0, [r9, #24]
   22c44:	str	r0, [sp, #28]
   22c48:	cmp	r3, r2
   22c4c:	bne	22c64 <__assert_fail@plt+0x10f64>
   22c50:	ldr	r0, [r9, #20]
   22c54:	add	r1, r4, r4, lsl #1
   22c58:	add	r0, r0, r1, lsl #2
   22c5c:	ldr	r0, [r0, #8]
   22c60:	b	22c6c <__assert_fail@plt+0x10f6c>
   22c64:	ldr	r0, [r9, #12]
   22c68:	add	r0, r0, r4, lsl #2
   22c6c:	ldr	r0, [r0]
   22c70:	add	r9, r0, r0, lsl #1
   22c74:	ldr	r4, [sp, #32]
   22c78:	str	r3, [sp, #20]
   22c7c:	add	r0, r3, r4
   22c80:	str	r2, [sp, #24]
   22c84:	sub	r8, r0, r2
   22c88:	sub	r1, r8, #1
   22c8c:	ldr	r2, [r5, #88]	; 0x58
   22c90:	mov	r0, r5
   22c94:	bl	228c0 <__assert_fail@plt+0x10bc0>
   22c98:	mov	r3, r0
   22c9c:	ldr	r0, [r5, #100]	; 0x64
   22ca0:	ldr	r1, [r0, r4, lsl #2]
   22ca4:	ldr	r0, [r0, r8, lsl #2]
   22ca8:	cmp	r1, #0
   22cac:	beq	22cb8 <__assert_fail@plt+0x10fb8>
   22cb0:	ldr	r1, [r1, #8]
   22cb4:	b	22cbc <__assert_fail@plt+0x10fbc>
   22cb8:	mov	r1, #0
   22cbc:	str	r1, [sp, #12]
   22cc0:	add	r4, sp, #36	; 0x24
   22cc4:	ldr	r1, [sp, #28]
   22cc8:	add	r2, r1, r9, lsl #2
   22ccc:	cmp	r0, #0
   22cd0:	str	r2, [sp, #28]
   22cd4:	beq	22d44 <__assert_fail@plt+0x11044>
   22cd8:	mov	r9, r3
   22cdc:	ldr	r1, [r0, #40]	; 0x28
   22ce0:	mov	r0, r4
   22ce4:	bl	2357c <__assert_fail@plt+0x1187c>
   22ce8:	str	r0, [fp, #-32]	; 0xffffffe0
   22cec:	cmp	r0, #0
   22cf0:	ldr	r1, [sp, #16]
   22cf4:	bne	22df8 <__assert_fail@plt+0x110f8>
   22cf8:	sub	r0, fp, #32
   22cfc:	mov	r2, r4
   22d00:	mov	r3, r9
   22d04:	bl	211a4 <__assert_fail@plt+0xf4a4>
   22d08:	ldr	r1, [r5, #100]	; 0x64
   22d0c:	str	r0, [r1, r8, lsl #2]
   22d10:	ldr	r0, [sp, #44]	; 0x2c
   22d14:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22d18:	ldr	r0, [r5, #100]	; 0x64
   22d1c:	ldr	r0, [r0, r8, lsl #2]
   22d20:	cmp	r0, #0
   22d24:	bne	22d34 <__assert_fail@plt+0x11034>
   22d28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22d2c:	cmp	r0, #0
   22d30:	bne	22dec <__assert_fail@plt+0x110ec>
   22d34:	ldr	r8, [sp, #4]
   22d38:	ldr	r4, [sp, #8]
   22d3c:	ldr	r9, [sp, #16]
   22d40:	b	22d80 <__assert_fail@plt+0x11080>
   22d44:	sub	r0, fp, #32
   22d48:	ldr	r9, [sp, #16]
   22d4c:	mov	r1, r9
   22d50:	bl	211a4 <__assert_fail@plt+0xf4a4>
   22d54:	ldr	r1, [r5, #100]	; 0x64
   22d58:	str	r0, [r1, r8, lsl #2]
   22d5c:	ldr	r0, [r5, #100]	; 0x64
   22d60:	ldr	r0, [r0, r8, lsl #2]
   22d64:	cmp	r0, #0
   22d68:	ldr	r8, [sp, #4]
   22d6c:	ldr	r4, [sp, #8]
   22d70:	bne	22d80 <__assert_fail@plt+0x11080>
   22d74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22d78:	cmp	r0, #0
   22d7c:	bne	22dec <__assert_fail@plt+0x110ec>
   22d80:	ldr	r0, [sp, #24]
   22d84:	ldr	r1, [sp, #20]
   22d88:	cmp	r1, r0
   22d8c:	bne	22c00 <__assert_fail@plt+0x10f00>
   22d90:	ldr	r0, [r5, #100]	; 0x64
   22d94:	ldr	r1, [sp, #32]
   22d98:	ldr	r0, [r0, r1, lsl #2]
   22d9c:	ldr	r0, [r0, #8]
   22da0:	ldr	r1, [sp, #12]
   22da4:	cmp	r0, r1
   22da8:	ble	22c00 <__assert_fail@plt+0x10f00>
   22dac:	mov	r0, r5
   22db0:	ldr	r1, [sp, #28]
   22db4:	ldr	r2, [sp, #32]
   22db8:	bl	22a64 <__assert_fail@plt+0x10d64>
   22dbc:	str	r0, [fp, #-32]	; 0xffffffe0
   22dc0:	cmp	r0, #0
   22dc4:	bne	22dec <__assert_fail@plt+0x110ec>
   22dc8:	mov	r0, r5
   22dcc:	ldr	r1, [sp, #28]
   22dd0:	bl	22af8 <__assert_fail@plt+0x10df8>
   22dd4:	str	r0, [fp, #-32]	; 0xffffffe0
   22dd8:	cmp	r0, #0
   22ddc:	beq	22c00 <__assert_fail@plt+0x10f00>
   22de0:	b	22dec <__assert_fail@plt+0x110ec>
   22de4:	mov	r0, #0
   22de8:	str	r0, [fp, #-32]	; 0xffffffe0
   22dec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   22df0:	sub	sp, fp, #28
   22df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22df8:	ldr	r0, [sp, #44]	; 0x2c
   22dfc:	bl	1a1ec <__assert_fail@plt+0x84ec>
   22e00:	b	22dec <__assert_fail@plt+0x110ec>
   22e04:	push	{r4, r5, fp, lr}
   22e08:	add	fp, sp, #8
   22e0c:	mov	r4, r0
   22e10:	ldr	r0, [r0, #36]	; 0x24
   22e14:	mov	r5, #12
   22e18:	cmn	r0, #-536870910	; 0xe0000002
   22e1c:	bhi	22ed0 <__assert_fail@plt+0x111d0>
   22e20:	ldr	r2, [r4, #48]	; 0x30
   22e24:	cmp	r2, r0, lsl #1
   22e28:	lslge	r2, r0, #1
   22e2c:	cmp	r2, r1
   22e30:	movle	r2, r1
   22e34:	mov	r0, r4
   22e38:	mov	r1, r2
   22e3c:	bl	1c5bc <__assert_fail@plt+0xa8bc>
   22e40:	cmp	r0, #0
   22e44:	bne	22ed4 <__assert_fail@plt+0x111d4>
   22e48:	ldr	r0, [r4, #100]	; 0x64
   22e4c:	cmp	r0, #0
   22e50:	beq	22e70 <__assert_fail@plt+0x11170>
   22e54:	ldr	r1, [r4, #36]	; 0x24
   22e58:	mov	r2, #4
   22e5c:	add	r1, r2, r1, lsl #2
   22e60:	bl	1a350 <__assert_fail@plt+0x8650>
   22e64:	cmp	r0, #0
   22e68:	beq	22ed0 <__assert_fail@plt+0x111d0>
   22e6c:	str	r0, [r4, #100]	; 0x64
   22e70:	ldr	r0, [r4, #80]	; 0x50
   22e74:	ldrb	r1, [r4, #72]	; 0x48
   22e78:	cmp	r1, #0
   22e7c:	beq	22e9c <__assert_fail@plt+0x1119c>
   22e80:	cmp	r0, #2
   22e84:	blt	22eb0 <__assert_fail@plt+0x111b0>
   22e88:	mov	r0, r4
   22e8c:	bl	1c660 <__assert_fail@plt+0xa960>
   22e90:	cmp	r0, #0
   22e94:	beq	22ecc <__assert_fail@plt+0x111cc>
   22e98:	pop	{r4, r5, fp, pc}
   22e9c:	cmp	r0, #2
   22ea0:	blt	22ebc <__assert_fail@plt+0x111bc>
   22ea4:	mov	r0, r4
   22ea8:	bl	1cc70 <__assert_fail@plt+0xaf70>
   22eac:	b	22ecc <__assert_fail@plt+0x111cc>
   22eb0:	mov	r0, r4
   22eb4:	bl	1cbfc <__assert_fail@plt+0xaefc>
   22eb8:	b	22ecc <__assert_fail@plt+0x111cc>
   22ebc:	ldr	r0, [r4, #64]	; 0x40
   22ec0:	cmp	r0, #0
   22ec4:	movne	r0, r4
   22ec8:	blne	1ce2c <__assert_fail@plt+0xb12c>
   22ecc:	mov	r5, #0
   22ed0:	mov	r0, r5
   22ed4:	pop	{r4, r5, fp, pc}
   22ed8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22edc:	add	fp, sp, #24
   22ee0:	mov	r6, r2
   22ee4:	mov	r4, r1
   22ee8:	mov	r5, r0
   22eec:	ldrb	r0, [r2, #52]	; 0x34
   22ef0:	tst	r0, #32
   22ef4:	bne	22f6c <__assert_fail@plt+0x1126c>
   22ef8:	ldr	r0, [r4, #4]
   22efc:	ldr	r1, [r4, #40]	; 0x28
   22f00:	add	r2, r1, #1
   22f04:	str	r2, [r4, #40]	; 0x28
   22f08:	ldrb	r7, [r0, r1]
   22f0c:	ldr	r0, [r6, #44]	; 0x2c
   22f10:	cmp	r0, #0
   22f14:	ldrne	r0, [r0, r7, lsl #2]
   22f18:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f1c:	ldr	r8, [r6, #48]	; 0x30
   22f20:	cmp	r8, #0
   22f24:	bne	22f4c <__assert_fail@plt+0x1124c>
   22f28:	ldr	r0, [r4, #84]	; 0x54
   22f2c:	mov	r1, r6
   22f30:	bl	24d70 <__assert_fail@plt+0x13070>
   22f34:	cmp	r0, #0
   22f38:	bne	22f0c <__assert_fail@plt+0x1120c>
   22f3c:	mov	r0, #12
   22f40:	str	r0, [r5]
   22f44:	mov	r0, #0
   22f48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f4c:	ldr	r0, [r4, #40]	; 0x28
   22f50:	ldr	r2, [r4, #88]	; 0x58
   22f54:	sub	r1, r0, #1
   22f58:	mov	r0, r4
   22f5c:	bl	228c0 <__assert_fail@plt+0x10bc0>
   22f60:	bfi	r7, r0, #8, #1
   22f64:	ldr	r0, [r8, r7, lsl #2]
   22f68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f6c:	mov	r0, r4
   22f70:	mov	r1, r6
   22f74:	bl	24ba0 <__assert_fail@plt+0x12ea0>
   22f78:	str	r0, [r5]
   22f7c:	cmp	r0, #0
   22f80:	beq	22ef8 <__assert_fail@plt+0x111f8>
   22f84:	b	22f44 <__assert_fail@plt+0x11244>
   22f88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22f8c:	add	fp, sp, #24
   22f90:	sub	sp, sp, #16
   22f94:	mov	r7, r2
   22f98:	mov	r4, r1
   22f9c:	mov	r8, r0
   22fa0:	ldr	r5, [r1, #40]	; 0x28
   22fa4:	ldr	r6, [r1, #84]	; 0x54
   22fa8:	ldr	r0, [r1, #100]	; 0x64
   22fac:	ldr	r1, [r1, #104]	; 0x68
   22fb0:	cmp	r5, r1
   22fb4:	ble	22fc4 <__assert_fail@plt+0x112c4>
   22fb8:	str	r7, [r0, r5, lsl #2]
   22fbc:	str	r5, [r4, #104]	; 0x68
   22fc0:	b	23060 <__assert_fail@plt+0x11360>
   22fc4:	ldr	r1, [r0, r5, lsl #2]
   22fc8:	cmp	r1, #0
   22fcc:	beq	23000 <__assert_fail@plt+0x11300>
   22fd0:	ldr	r0, [r0, r5, lsl #2]
   22fd4:	ldr	r2, [r0, #40]	; 0x28
   22fd8:	cmp	r7, #0
   22fdc:	beq	23008 <__assert_fail@plt+0x11308>
   22fe0:	ldr	r9, [r7, #40]	; 0x28
   22fe4:	mov	r0, sp
   22fe8:	mov	r1, r9
   22fec:	bl	2357c <__assert_fail@plt+0x1187c>
   22ff0:	str	r0, [r8]
   22ff4:	cmp	r0, #0
   22ff8:	beq	2301c <__assert_fail@plt+0x1131c>
   22ffc:	b	230cc <__assert_fail@plt+0x113cc>
   23000:	str	r7, [r0, r5, lsl #2]
   23004:	b	23060 <__assert_fail@plt+0x11360>
   23008:	vldr	d16, [r2]
   2300c:	ldr	r0, [r2, #8]
   23010:	str	r0, [sp, #8]
   23014:	vstr	d16, [sp]
   23018:	mov	r9, #0
   2301c:	ldr	r0, [r4, #40]	; 0x28
   23020:	ldr	r2, [r4, #88]	; 0x58
   23024:	sub	r1, r0, #1
   23028:	mov	r0, r4
   2302c:	bl	228c0 <__assert_fail@plt+0x10bc0>
   23030:	mov	r3, r0
   23034:	mov	r2, sp
   23038:	mov	r0, r8
   2303c:	mov	r1, r6
   23040:	bl	211a4 <__assert_fail@plt+0xf4a4>
   23044:	mov	r7, r0
   23048:	ldr	r0, [r4, #100]	; 0x64
   2304c:	str	r7, [r0, r5, lsl #2]
   23050:	cmp	r9, #0
   23054:	beq	23060 <__assert_fail@plt+0x11360>
   23058:	ldr	r0, [sp, #8]
   2305c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   23060:	cmp	r7, #0
   23064:	ldrne	r0, [r6, #76]	; 0x4c
   23068:	cmpne	r0, #0
   2306c:	bne	2307c <__assert_fail@plt+0x1137c>
   23070:	mov	r0, r7
   23074:	sub	sp, fp, #24
   23078:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2307c:	add	r6, r7, #4
   23080:	mov	r0, r4
   23084:	mov	r1, r6
   23088:	mov	r2, r5
   2308c:	bl	22a64 <__assert_fail@plt+0x10d64>
   23090:	str	r0, [r8]
   23094:	cmp	r0, #0
   23098:	bne	230cc <__assert_fail@plt+0x113cc>
   2309c:	ldrb	r0, [r7, #52]	; 0x34
   230a0:	tst	r0, #64	; 0x40
   230a4:	beq	23070 <__assert_fail@plt+0x11370>
   230a8:	mov	r0, r4
   230ac:	mov	r1, r6
   230b0:	bl	22af8 <__assert_fail@plt+0x10df8>
   230b4:	str	r0, [r8]
   230b8:	cmp	r0, #0
   230bc:	mov	r7, #0
   230c0:	ldreq	r0, [r4, #100]	; 0x64
   230c4:	ldreq	r7, [r0, r5, lsl #2]
   230c8:	b	23070 <__assert_fail@plt+0x11370>
   230cc:	mov	r7, #0
   230d0:	b	23070 <__assert_fail@plt+0x11370>
   230d4:	push	{r4, r5, r6, sl, fp, lr}
   230d8:	add	fp, sp, #16
   230dc:	mov	r4, r1
   230e0:	mov	r6, r0
   230e4:	ldr	r1, [r4, #40]	; 0x28
   230e8:	ldr	r0, [r4, #104]	; 0x68
   230ec:	cmp	r1, r0
   230f0:	bge	23140 <__assert_fail@plt+0x11440>
   230f4:	add	r2, r1, #1
   230f8:	ldr	r3, [r4, #40]	; 0x28
   230fc:	ldr	r5, [r4, #100]	; 0x64
   23100:	add	r3, r3, #1
   23104:	str	r3, [r4, #40]	; 0x28
   23108:	add	r1, r5, r1, lsl #2
   2310c:	ldr	r1, [r1, #4]
   23110:	cmp	r1, #0
   23114:	mov	r1, r2
   23118:	beq	230ec <__assert_fail@plt+0x113ec>
   2311c:	mov	r0, r6
   23120:	mov	r1, r4
   23124:	mov	r2, #0
   23128:	bl	22f88 <__assert_fail@plt+0x11288>
   2312c:	cmp	r0, #0
   23130:	ldreq	r1, [r6]
   23134:	cmpeq	r1, #0
   23138:	beq	230e4 <__assert_fail@plt+0x113e4>
   2313c:	pop	{r4, r5, r6, sl, fp, pc}
   23140:	mov	r0, #0
   23144:	pop	{r4, r5, r6, sl, fp, pc}
   23148:	push	{r4, r5, r6, r7, fp, lr}
   2314c:	add	fp, sp, #16
   23150:	mov	r4, r2
   23154:	mov	r6, r1
   23158:	mov	r5, r0
   2315c:	ldr	r0, [r0, #124]	; 0x7c
   23160:	ldr	r7, [r5, #128]	; 0x80
   23164:	cmp	r0, r7
   23168:	beq	231b0 <__assert_fail@plt+0x114b0>
   2316c:	mov	r0, #1
   23170:	mov	r1, #24
   23174:	bl	19f4c <__assert_fail@plt+0x824c>
   23178:	ldr	r1, [r5, #124]	; 0x7c
   2317c:	ldr	r2, [r5, #132]	; 0x84
   23180:	str	r0, [r2, r1, lsl #2]
   23184:	ldr	r0, [r5, #132]	; 0x84
   23188:	ldr	r0, [r0, r1, lsl #2]
   2318c:	cmp	r0, #0
   23190:	strne	r6, [r0, #4]
   23194:	addne	r1, r1, #1
   23198:	strne	r1, [r5, #124]	; 0x7c
   2319c:	strne	r4, [r0]
   231a0:	movne	r0, #0
   231a4:	popne	{r4, r5, r6, r7, fp, pc}
   231a8:	mov	r0, #12
   231ac:	pop	{r4, r5, r6, r7, fp, pc}
   231b0:	ldr	r0, [r5, #132]	; 0x84
   231b4:	lsl	r1, r7, #3
   231b8:	bl	1a350 <__assert_fail@plt+0x8650>
   231bc:	cmp	r0, #0
   231c0:	beq	231a8 <__assert_fail@plt+0x114a8>
   231c4:	lsl	r1, r7, #1
   231c8:	str	r1, [r5, #128]	; 0x80
   231cc:	str	r0, [r5, #132]	; 0x84
   231d0:	b	2316c <__assert_fail@plt+0x1146c>
   231d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231d8:	add	fp, sp, #28
   231dc:	sub	sp, sp, #52	; 0x34
   231e0:	str	r1, [sp, #36]	; 0x24
   231e4:	mov	r4, r0
   231e8:	ldr	r5, [r0, #4]
   231ec:	ldr	r6, [r0, #84]	; 0x54
   231f0:	str	r2, [fp, #-36]	; 0xffffffdc
   231f4:	mov	r1, r2
   231f8:	bl	237b0 <__assert_fail@plt+0x11ab0>
   231fc:	cmn	r0, #1
   23200:	beq	23230 <__assert_fail@plt+0x11530>
   23204:	ldr	r1, [r4, #116]	; 0x74
   23208:	add	r0, r0, r0, lsl #1
   2320c:	add	r0, r1, r0, lsl #3
   23210:	ldr	r2, [sp, #36]	; 0x24
   23214:	ldr	r1, [r0]
   23218:	cmp	r1, r2
   2321c:	beq	2355c <__assert_fail@plt+0x1185c>
   23220:	ldrb	r1, [r0, #20]
   23224:	add	r0, r0, #24
   23228:	cmp	r1, #0
   2322c:	bne	23214 <__assert_fail@plt+0x11514>
   23230:	ldr	r0, [r4, #124]	; 0x7c
   23234:	cmp	r0, #1
   23238:	blt	2355c <__assert_fail@plt+0x1185c>
   2323c:	mov	ip, r6
   23240:	ldr	r0, [r6]
   23244:	ldr	r1, [sp, #36]	; 0x24
   23248:	ldr	r2, [r0, r1, lsl #3]
   2324c:	mov	r6, #0
   23250:	str	r4, [sp, #28]
   23254:	mov	r3, r5
   23258:	str	ip, [sp, #24]
   2325c:	str	r2, [sp, #20]
   23260:	b	23280 <__assert_fail@plt+0x11580>
   23264:	ldr	ip, [sp, #24]
   23268:	ldr	r2, [sp, #20]
   2326c:	ldr	r6, [sp, #16]
   23270:	add	r6, r6, #1
   23274:	ldr	r0, [r4, #124]	; 0x7c
   23278:	cmp	r6, r0
   2327c:	bge	2355c <__assert_fail@plt+0x1185c>
   23280:	ldr	r0, [r4, #132]	; 0x84
   23284:	ldr	r7, [r0, r6, lsl #2]
   23288:	ldr	r0, [r7, #4]
   2328c:	ldr	r1, [ip]
   23290:	ldr	r0, [r1, r0, lsl #3]
   23294:	cmp	r0, r2
   23298:	str	r6, [sp, #16]
   2329c:	bne	2326c <__assert_fail@plt+0x1156c>
   232a0:	ldr	r5, [r7]
   232a4:	ldr	r0, [r7, #16]
   232a8:	cmp	r0, #1
   232ac:	str	r7, [sp, #32]
   232b0:	mov	sl, #0
   232b4:	blt	2338c <__assert_fail@plt+0x1168c>
   232b8:	ldr	r6, [fp, #-36]	; 0xffffffdc
   232bc:	mov	r9, r5
   232c0:	ldr	r0, [r7, #20]
   232c4:	ldr	r2, [r0, sl, lsl #2]
   232c8:	ldr	r0, [r2, #4]
   232cc:	str	r0, [fp, #-32]	; 0xffffffe0
   232d0:	sub	r5, r0, r9
   232d4:	cmp	r5, #1
   232d8:	blt	2331c <__assert_fail@plt+0x1161c>
   232dc:	add	r1, r5, r6
   232e0:	ldr	r0, [r4, #28]
   232e4:	cmp	r1, r0
   232e8:	str	r2, [sp, #40]	; 0x28
   232ec:	bgt	23360 <__assert_fail@plt+0x11660>
   232f0:	add	r0, r3, r6
   232f4:	add	r1, r3, r9
   232f8:	mov	r8, r6
   232fc:	mov	r2, r5
   23300:	mov	r7, r3
   23304:	bl	11ad8 <bcmp@plt>
   23308:	mov	r3, r7
   2330c:	cmp	r0, #0
   23310:	ldr	r7, [sp, #32]
   23314:	ldr	r2, [sp, #40]	; 0x28
   23318:	bne	23394 <__assert_fail@plt+0x11694>
   2331c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   23320:	str	r0, [sp]
   23324:	mov	r0, r4
   23328:	mov	r1, r7
   2332c:	ldr	r3, [sp, #36]	; 0x24
   23330:	bl	238d0 <__assert_fail@plt+0x11bd0>
   23334:	cmp	r0, #1
   23338:	bhi	2356c <__assert_fail@plt+0x1186c>
   2333c:	add	r6, r5, r6
   23340:	add	sl, sl, #1
   23344:	ldr	r3, [r4, #4]
   23348:	ldr	r0, [r7, #16]
   2334c:	cmp	sl, r0
   23350:	ldr	r5, [fp, #-32]	; 0xffffffe0
   23354:	mov	r9, r5
   23358:	blt	232c0 <__assert_fail@plt+0x115c0>
   2335c:	b	23398 <__assert_fail@plt+0x11698>
   23360:	ldr	r0, [r4, #48]	; 0x30
   23364:	cmp	r1, r0
   23368:	bgt	23394 <__assert_fail@plt+0x11694>
   2336c:	mov	r7, r6
   23370:	mov	r0, r4
   23374:	bl	2383c <__assert_fail@plt+0x11b3c>
   23378:	cmp	r0, #0
   2337c:	bne	2356c <__assert_fail@plt+0x1186c>
   23380:	ldr	r3, [r4, #4]
   23384:	mov	r6, r7
   23388:	b	232f0 <__assert_fail@plt+0x115f0>
   2338c:	ldr	r6, [fp, #-36]	; 0xffffffdc
   23390:	b	23398 <__assert_fail@plt+0x11698>
   23394:	mov	r5, r9
   23398:	ldr	r0, [r7, #16]
   2339c:	cmp	sl, r0
   233a0:	blt	23264 <__assert_fail@plt+0x11564>
   233a4:	cmp	sl, #0
   233a8:	addne	r5, r5, #1
   233ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   233b0:	cmp	r5, r0
   233b4:	bgt	23264 <__assert_fail@plt+0x11564>
   233b8:	ldr	ip, [sp, #24]
   233bc:	ldr	r2, [sp, #20]
   233c0:	b	233f0 <__assert_fail@plt+0x116f0>
   233c4:	ldr	r7, [sp, #32]
   233c8:	mov	r3, sl
   233cc:	mov	r6, r9
   233d0:	ldr	ip, [sp, #24]
   233d4:	ldr	r2, [sp, #20]
   233d8:	add	r1, r5, #1
   233dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   233e0:	cmp	r5, r0
   233e4:	mov	r5, r1
   233e8:	ldr	r4, [sp, #28]
   233ec:	bge	2326c <__assert_fail@plt+0x1156c>
   233f0:	ldr	r0, [r7]
   233f4:	cmp	r5, r0
   233f8:	ble	23420 <__assert_fail@plt+0x11720>
   233fc:	ldr	r0, [r4, #28]
   23400:	cmp	r6, r0
   23404:	bge	23520 <__assert_fail@plt+0x11820>
   23408:	ldrb	r0, [r3, r6]
   2340c:	add	r1, r3, r5
   23410:	ldrb	r1, [r1, #-1]
   23414:	cmp	r0, r1
   23418:	bne	2326c <__assert_fail@plt+0x1156c>
   2341c:	add	r6, r6, #1
   23420:	ldr	r0, [r4, #100]	; 0x64
   23424:	ldr	r0, [r0, r5, lsl #2]
   23428:	cmp	r0, #0
   2342c:	beq	233d8 <__assert_fail@plt+0x116d8>
   23430:	mov	r9, r6
   23434:	mov	sl, r3
   23438:	add	r1, r0, #4
   2343c:	mov	r0, ip
   23440:	mov	r3, #9
   23444:	bl	23968 <__assert_fail@plt+0x11c68>
   23448:	cmn	r0, #1
   2344c:	beq	233c4 <__assert_fail@plt+0x116c4>
   23450:	mov	r4, r0
   23454:	ldr	r1, [sp, #32]
   23458:	ldr	r0, [r1, #8]
   2345c:	cmp	r0, #0
   23460:	bne	2348c <__assert_fail@plt+0x1178c>
   23464:	ldr	r0, [r1]
   23468:	sub	r0, r5, r0
   2346c:	add	r1, r0, #1
   23470:	mov	r8, #12
   23474:	mov	r0, #12
   23478:	bl	19f4c <__assert_fail@plt+0x824c>
   2347c:	ldr	r1, [sp, #32]
   23480:	str	r0, [r1, #8]
   23484:	cmp	r0, #0
   23488:	beq	23560 <__assert_fail@plt+0x11860>
   2348c:	ldr	r3, [r1]
   23490:	ldr	r2, [r1, #4]
   23494:	ldr	r1, [r1, #8]
   23498:	stm	sp, {r4, r5}
   2349c:	mov	r0, #9
   234a0:	str	r0, [sp, #8]
   234a4:	ldr	r0, [sp, #28]
   234a8:	bl	239c8 <__assert_fail@plt+0x11cc8>
   234ac:	ldr	r7, [sp, #32]
   234b0:	cmp	r0, #1
   234b4:	mov	r3, sl
   234b8:	mov	r6, r9
   234bc:	ldr	ip, [sp, #24]
   234c0:	ldr	r2, [sp, #20]
   234c4:	beq	233d8 <__assert_fail@plt+0x116d8>
   234c8:	mov	r8, r0
   234cc:	cmp	r0, #0
   234d0:	bne	23560 <__assert_fail@plt+0x11860>
   234d4:	mov	r0, r7
   234d8:	mov	r1, r4
   234dc:	mov	r2, r5
   234e0:	bl	23dac <__assert_fail@plt+0x120ac>
   234e4:	cmp	r0, #0
   234e8:	beq	23574 <__assert_fail@plt+0x11874>
   234ec:	mov	r2, r0
   234f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   234f4:	str	r0, [sp]
   234f8:	ldr	r4, [sp, #28]
   234fc:	mov	r0, r4
   23500:	mov	r1, r7
   23504:	ldr	r3, [sp, #36]	; 0x24
   23508:	bl	238d0 <__assert_fail@plt+0x11bd0>
   2350c:	cmp	r0, #1
   23510:	bhi	2356c <__assert_fail@plt+0x1186c>
   23514:	ldr	r3, [r4, #4]
   23518:	ldr	r7, [sp, #32]
   2351c:	b	233cc <__assert_fail@plt+0x116cc>
   23520:	ldr	r0, [r4, #48]	; 0x30
   23524:	cmp	r6, r0
   23528:	bge	2326c <__assert_fail@plt+0x1156c>
   2352c:	mov	r9, r6
   23530:	add	r1, r6, #1
   23534:	mov	r0, r4
   23538:	bl	22e04 <__assert_fail@plt+0x11104>
   2353c:	cmp	r0, #0
   23540:	bne	2356c <__assert_fail@plt+0x1186c>
   23544:	ldr	r3, [r4, #4]
   23548:	ldr	r7, [sp, #32]
   2354c:	mov	r6, r9
   23550:	ldr	ip, [sp, #24]
   23554:	ldr	r2, [sp, #20]
   23558:	b	23408 <__assert_fail@plt+0x11708>
   2355c:	mov	r8, #0
   23560:	mov	r0, r8
   23564:	sub	sp, fp, #28
   23568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2356c:	mov	r8, r0
   23570:	b	23560 <__assert_fail@plt+0x11860>
   23574:	mov	r8, #12
   23578:	b	23560 <__assert_fail@plt+0x11860>
   2357c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23580:	add	fp, sp, #28
   23584:	sub	sp, sp, #4
   23588:	mov	sl, r2
   2358c:	mov	r8, r0
   23590:	cmp	r1, #0
   23594:	beq	236c8 <__assert_fail@plt+0x119c8>
   23598:	mov	r6, r1
   2359c:	ldr	r0, [r1, #4]
   235a0:	cmp	sl, #0
   235a4:	beq	236b4 <__assert_fail@plt+0x119b4>
   235a8:	cmp	r0, #1
   235ac:	blt	236b4 <__assert_fail@plt+0x119b4>
   235b0:	ldr	r1, [sl, #4]
   235b4:	cmp	r1, #1
   235b8:	blt	236b4 <__assert_fail@plt+0x119b4>
   235bc:	add	r0, r1, r0
   235c0:	str	r0, [r8]
   235c4:	lsl	r0, r0, #2
   235c8:	bl	1a2bc <__assert_fail@plt+0x85bc>
   235cc:	str	r0, [r8, #8]
   235d0:	cmp	r0, #0
   235d4:	beq	237a4 <__assert_fail@plt+0x11aa4>
   235d8:	ldr	r2, [sl, #4]
   235dc:	mov	r4, #0
   235e0:	cmp	r2, #0
   235e4:	mov	r0, #0
   235e8:	movwgt	r0, #1
   235ec:	ldr	r3, [r6, #4]
   235f0:	cmp	r3, #1
   235f4:	blt	23708 <__assert_fail@plt+0x11a08>
   235f8:	mov	r9, #0
   235fc:	cmp	r2, #1
   23600:	blt	23718 <__assert_fail@plt+0x11a18>
   23604:	mov	ip, #0
   23608:	mov	r0, #0
   2360c:	mov	r4, ip
   23610:	mov	r7, r0
   23614:	ldr	r0, [sl, #8]
   23618:	ldr	r1, [r0, r4, lsl #2]
   2361c:	ldr	r0, [r6, #8]
   23620:	ldr	r5, [r0, r9, lsl #2]
   23624:	cmp	r5, r1
   23628:	ble	23668 <__assert_fail@plt+0x11968>
   2362c:	ldr	r0, [r8, #8]
   23630:	str	r1, [r0, r7, lsl #2]
   23634:	ldr	r2, [sl, #4]
   23638:	add	r1, r4, #1
   2363c:	cmp	r2, r1
   23640:	mov	r0, #0
   23644:	movwgt	r0, #1
   23648:	ldr	r3, [r6, #4]
   2364c:	cmp	r3, r9
   23650:	ble	23744 <__assert_fail@plt+0x11a44>
   23654:	add	r7, r7, #1
   23658:	cmp	r2, r1
   2365c:	mov	r4, r1
   23660:	bgt	23614 <__assert_fail@plt+0x11914>
   23664:	b	2371c <__assert_fail@plt+0x11a1c>
   23668:	ldr	r0, [r8, #8]
   2366c:	str	r5, [r0, r7, lsl #2]
   23670:	add	lr, r4, #1
   23674:	cmp	r5, r1
   23678:	mov	ip, r4
   2367c:	moveq	ip, lr
   23680:	ldr	r2, [sl, #4]
   23684:	cmp	r2, ip
   23688:	mov	r0, #0
   2368c:	movwgt	r0, #1
   23690:	add	r9, r9, #1
   23694:	ldr	r3, [r6, #4]
   23698:	cmp	r3, r9
   2369c:	ble	2378c <__assert_fail@plt+0x11a8c>
   236a0:	add	r0, r7, #1
   236a4:	cmp	r2, ip
   236a8:	bgt	2360c <__assert_fail@plt+0x1190c>
   236ac:	add	r7, r7, #1
   236b0:	b	2371c <__assert_fail@plt+0x11a1c>
   236b4:	cmp	r0, #1
   236b8:	blt	236c8 <__assert_fail@plt+0x119c8>
   236bc:	mov	r0, r8
   236c0:	mov	r1, r6
   236c4:	b	236e4 <__assert_fail@plt+0x119e4>
   236c8:	cmp	sl, #0
   236cc:	beq	236f0 <__assert_fail@plt+0x119f0>
   236d0:	ldr	r0, [sl, #4]
   236d4:	cmp	r0, #1
   236d8:	blt	236f0 <__assert_fail@plt+0x119f0>
   236dc:	mov	r0, r8
   236e0:	mov	r1, sl
   236e4:	sub	sp, fp, #28
   236e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236ec:	b	210b8 <__assert_fail@plt+0xf3b8>
   236f0:	mov	r0, #0
   236f4:	str	r0, [r8]
   236f8:	str	r0, [r8, #4]
   236fc:	str	r0, [r8, #8]
   23700:	sub	sp, fp, #28
   23704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23708:	mov	r6, #0
   2370c:	cmp	r0, #0
   23710:	bne	23754 <__assert_fail@plt+0x11a54>
   23714:	b	2377c <__assert_fail@plt+0x11a7c>
   23718:	mov	r7, #0
   2371c:	ldr	r0, [r8, #8]
   23720:	add	r0, r0, r7, lsl #2
   23724:	ldr	r1, [r6, #8]
   23728:	add	r1, r1, r9, lsl #2
   2372c:	sub	r2, r3, r9
   23730:	lsl	r2, r2, #2
   23734:	bl	11928 <memcpy@plt>
   23738:	sub	r0, r7, r9
   2373c:	ldr	r1, [r6, #4]
   23740:	b	23778 <__assert_fail@plt+0x11a78>
   23744:	add	r6, r7, #1
   23748:	add	r4, r4, #1
   2374c:	cmp	r0, #0
   23750:	beq	2377c <__assert_fail@plt+0x11a7c>
   23754:	ldr	r0, [r8, #8]
   23758:	add	r0, r0, r6, lsl #2
   2375c:	ldr	r1, [sl, #8]
   23760:	add	r1, r1, r4, lsl #2
   23764:	sub	r2, r2, r4
   23768:	lsl	r2, r2, #2
   2376c:	bl	11928 <memcpy@plt>
   23770:	sub	r0, r6, r4
   23774:	ldr	r1, [sl, #4]
   23778:	add	r6, r0, r1
   2377c:	str	r6, [r8, #4]
   23780:	mov	r0, #0
   23784:	sub	sp, fp, #28
   23788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2378c:	cmp	r5, r1
   23790:	moveq	r4, lr
   23794:	add	r6, r7, #1
   23798:	cmp	r0, #0
   2379c:	bne	23754 <__assert_fail@plt+0x11a54>
   237a0:	b	2377c <__assert_fail@plt+0x11a7c>
   237a4:	mov	r0, #12
   237a8:	sub	sp, fp, #28
   237ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237b0:	push	{r4, r5, r6, r7, fp, lr}
   237b4:	add	fp, sp, #16
   237b8:	mov	ip, r0
   237bc:	ldr	lr, [r0, #108]	; 0x6c
   237c0:	cmp	lr, #1
   237c4:	blt	23828 <__assert_fail@plt+0x11b28>
   237c8:	ldr	r2, [ip, #116]	; 0x74
   237cc:	mov	r0, #0
   237d0:	mov	r3, #1
   237d4:	mov	r4, lr
   237d8:	add	r5, r0, r4
   237dc:	add	r5, r5, r5, lsr #31
   237e0:	asr	r6, r5, #1
   237e4:	add	r7, r6, r6, lsl #1
   237e8:	add	r7, r2, r7, lsl #3
   237ec:	ldr	r7, [r7, #4]
   237f0:	cmp	r7, r1
   237f4:	addlt	r0, r3, r5, asr #1
   237f8:	movge	r4, r6
   237fc:	cmp	r0, r4
   23800:	blt	237d8 <__assert_fail@plt+0x11ad8>
   23804:	cmp	r0, lr
   23808:	bge	23834 <__assert_fail@plt+0x11b34>
   2380c:	ldr	r2, [ip, #116]	; 0x74
   23810:	add	r3, r0, r0, lsl #1
   23814:	add	r2, r2, r3, lsl #3
   23818:	ldr	r2, [r2, #4]
   2381c:	cmp	r2, r1
   23820:	mvnne	r0, #0
   23824:	pop	{r4, r5, r6, r7, fp, pc}
   23828:	mov	r0, #0
   2382c:	cmp	r0, lr
   23830:	blt	2380c <__assert_fail@plt+0x11b0c>
   23834:	mvn	r0, #0
   23838:	pop	{r4, r5, r6, r7, fp, pc}
   2383c:	push	{r4, r5, r6, r7, fp, lr}
   23840:	add	fp, sp, #16
   23844:	mov	r4, r1
   23848:	mov	r5, r0
   2384c:	ldr	r0, [r0, #36]	; 0x24
   23850:	ldr	r7, [r5, #104]	; 0x68
   23854:	cmp	r0, r1
   23858:	bgt	23868 <__assert_fail@plt+0x11b68>
   2385c:	ldr	r1, [r5, #48]	; 0x30
   23860:	cmp	r0, r1
   23864:	blt	23880 <__assert_fail@plt+0x11b80>
   23868:	ldr	r0, [r5, #28]
   2386c:	cmp	r0, r4
   23870:	bgt	23898 <__assert_fail@plt+0x11b98>
   23874:	ldr	r1, [r5, #48]	; 0x30
   23878:	cmp	r0, r1
   2387c:	bge	23898 <__assert_fail@plt+0x11b98>
   23880:	add	r1, r4, #1
   23884:	mov	r0, r5
   23888:	bl	22e04 <__assert_fail@plt+0x11104>
   2388c:	mov	r6, r0
   23890:	cmp	r0, #0
   23894:	bne	238c8 <__assert_fail@plt+0x11bc8>
   23898:	mov	r6, #0
   2389c:	cmp	r7, r4
   238a0:	bge	238c8 <__assert_fail@plt+0x11bc8>
   238a4:	sub	r0, r4, r7
   238a8:	lsl	r2, r0, #2
   238ac:	ldr	r0, [r5, #100]	; 0x64
   238b0:	add	r0, r0, r7, lsl #2
   238b4:	add	r0, r0, #4
   238b8:	mov	r6, #0
   238bc:	mov	r1, #0
   238c0:	bl	11b5c <memset@plt>
   238c4:	str	r4, [r5, #104]	; 0x68
   238c8:	mov	r0, r6
   238cc:	pop	{r4, r5, r6, r7, fp, pc}
   238d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   238d4:	add	fp, sp, #24
   238d8:	sub	sp, sp, #16
   238dc:	mov	r7, r3
   238e0:	mov	r6, r2
   238e4:	mov	r8, r1
   238e8:	mov	r4, r0
   238ec:	ldr	r2, [r2]
   238f0:	ldr	r3, [r6, #4]
   238f4:	mov	r0, #8
   238f8:	str	r0, [sp, #8]
   238fc:	ldr	r5, [fp, #8]
   23900:	str	r5, [sp, #4]
   23904:	str	r7, [sp]
   23908:	add	r1, r6, #8
   2390c:	mov	r0, r4
   23910:	bl	239c8 <__assert_fail@plt+0x11cc8>
   23914:	cmp	r0, #0
   23918:	beq	23924 <__assert_fail@plt+0x11c24>
   2391c:	sub	sp, fp, #24
   23920:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23924:	ldr	r3, [r8]
   23928:	ldr	r0, [r6, #4]
   2392c:	str	r0, [sp]
   23930:	mov	r0, r4
   23934:	mov	r1, r7
   23938:	mov	r2, r5
   2393c:	bl	23e30 <__assert_fail@plt+0x12130>
   23940:	cmp	r0, #0
   23944:	bne	2391c <__assert_fail@plt+0x11c1c>
   23948:	ldr	r0, [r6, #4]
   2394c:	add	r0, r0, r5
   23950:	ldr	r1, [r8]
   23954:	sub	r1, r0, r1
   23958:	mov	r0, r4
   2395c:	sub	sp, fp, #24
   23960:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   23964:	b	2383c <__assert_fail@plt+0x11b3c>
   23968:	push	{r4, r5, fp, lr}
   2396c:	add	fp, sp, #8
   23970:	ldr	r4, [r1, #4]
   23974:	cmp	r4, #1
   23978:	blt	239c0 <__assert_fail@plt+0x11cc0>
   2397c:	ldr	ip, [r0]
   23980:	ldr	lr, [r1, #8]
   23984:	mov	r4, #0
   23988:	b	2399c <__assert_fail@plt+0x11c9c>
   2398c:	add	r4, r4, #1
   23990:	ldr	r0, [r1, #4]
   23994:	cmp	r4, r0
   23998:	bge	239c0 <__assert_fail@plt+0x11cc0>
   2399c:	ldr	r0, [lr, r4, lsl #2]
   239a0:	add	r5, ip, r0, lsl #3
   239a4:	ldrb	r5, [r5, #4]
   239a8:	cmp	r5, r3
   239ac:	bne	2398c <__assert_fail@plt+0x11c8c>
   239b0:	ldr	r5, [ip, r0, lsl #3]
   239b4:	cmp	r5, r2
   239b8:	bne	2398c <__assert_fail@plt+0x11c8c>
   239bc:	pop	{r4, r5, fp, pc}
   239c0:	mvn	r0, #0
   239c4:	pop	{r4, r5, fp, pc}
   239c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239cc:	add	fp, sp, #28
   239d0:	sub	sp, sp, #52	; 0x34
   239d4:	mov	r7, r3
   239d8:	mov	r8, r2
   239dc:	mov	r6, r1
   239e0:	mov	r4, r0
   239e4:	ldr	r1, [r0, #84]	; 0x54
   239e8:	mov	r0, #0
   239ec:	str	r0, [fp, #-32]	; 0xffffffe0
   239f0:	str	r1, [sp, #28]
   239f4:	ldr	r0, [r1]
   239f8:	ldr	r0, [r0, r2, lsl #3]
   239fc:	str	r0, [sp, #20]
   23a00:	ldr	r0, [r4, #120]	; 0x78
   23a04:	ldr	sl, [fp, #12]
   23a08:	add	r0, r0, sl
   23a0c:	ldr	r5, [r6, #4]
   23a10:	cmp	r5, r0
   23a14:	ble	23d40 <__assert_fail@plt+0x12040>
   23a18:	ldr	r0, [r4, #40]	; 0x28
   23a1c:	str	r0, [sp, #16]
   23a20:	ldr	r2, [r4, #88]	; 0x58
   23a24:	ldr	r0, [r4, #100]	; 0x64
   23a28:	str	r0, [sp, #12]
   23a2c:	ldr	r9, [r6]
   23a30:	ldr	r0, [r6, #8]
   23a34:	str	r0, [r4, #100]	; 0x64
   23a38:	cmp	r9, #0
   23a3c:	moveq	r9, r7
   23a40:	str	r9, [r4, #40]	; 0x28
   23a44:	sub	r1, r9, #1
   23a48:	mov	r0, r4
   23a4c:	bl	228c0 <__assert_fail@plt+0x10bc0>
   23a50:	cmp	r9, r7
   23a54:	mov	r5, r4
   23a58:	bne	23a9c <__assert_fail@plt+0x11d9c>
   23a5c:	mov	r7, r0
   23a60:	add	r0, sp, #32
   23a64:	mov	r1, r8
   23a68:	bl	207c8 <__assert_fail@plt+0xeac8>
   23a6c:	str	r0, [fp, #-32]	; 0xffffffe0
   23a70:	cmp	r0, #0
   23a74:	bne	23da4 <__assert_fail@plt+0x120a4>
   23a78:	add	r1, sp, #32
   23a7c:	ldr	r0, [sp, #28]
   23a80:	ldr	r2, [sp, #20]
   23a84:	ldr	r3, [fp, #16]
   23a88:	bl	23f2c <__assert_fail@plt+0x1222c>
   23a8c:	str	r0, [fp, #-32]	; 0xffffffe0
   23a90:	cmp	r0, #0
   23a94:	beq	23b10 <__assert_fail@plt+0x11e10>
   23a98:	b	23ccc <__assert_fail@plt+0x11fcc>
   23a9c:	ldr	r1, [r5, #100]	; 0x64
   23aa0:	ldr	r8, [r1, r9, lsl #2]
   23aa4:	cmp	r8, #0
   23aa8:	beq	23ad0 <__assert_fail@plt+0x11dd0>
   23aac:	ldrb	r1, [r8, #52]	; 0x34
   23ab0:	mov	r7, r0
   23ab4:	tst	r1, #64	; 0x40
   23ab8:	bne	23aec <__assert_fail@plt+0x11dec>
   23abc:	mov	r0, #0
   23ac0:	str	r0, [sp, #36]	; 0x24
   23ac4:	str	r0, [sp, #32]
   23ac8:	str	r0, [sp, #40]	; 0x28
   23acc:	b	23b04 <__assert_fail@plt+0x11e04>
   23ad0:	mov	r8, #0
   23ad4:	str	r8, [sp, #36]	; 0x24
   23ad8:	str	r8, [sp, #32]
   23adc:	str	r8, [sp, #40]	; 0x28
   23ae0:	cmp	r9, sl
   23ae4:	blt	23b80 <__assert_fail@plt+0x11e80>
   23ae8:	b	23ce8 <__assert_fail@plt+0x11fe8>
   23aec:	add	r1, r8, #4
   23af0:	add	r0, sp, #32
   23af4:	bl	210b8 <__assert_fail@plt+0xf3b8>
   23af8:	str	r0, [fp, #-32]	; 0xffffffe0
   23afc:	cmp	r0, #0
   23b00:	bne	23da4 <__assert_fail@plt+0x120a4>
   23b04:	ldrb	r0, [r8, #52]	; 0x34
   23b08:	tst	r0, #64	; 0x40
   23b0c:	beq	23b78 <__assert_fail@plt+0x11e78>
   23b10:	ldr	r0, [sp, #36]	; 0x24
   23b14:	cmp	r0, #0
   23b18:	beq	23b44 <__assert_fail@plt+0x11e44>
   23b1c:	ldr	r0, [fp, #16]
   23b20:	str	r0, [sp]
   23b24:	add	r1, sp, #32
   23b28:	mov	r0, r5
   23b2c:	mov	r2, r9
   23b30:	ldr	r3, [sp, #20]
   23b34:	bl	24024 <__assert_fail@plt+0x12324>
   23b38:	str	r0, [fp, #-32]	; 0xffffffe0
   23b3c:	cmp	r0, #0
   23b40:	bne	23ccc <__assert_fail@plt+0x11fcc>
   23b44:	sub	r0, fp, #32
   23b48:	add	r2, sp, #32
   23b4c:	ldr	r1, [sp, #28]
   23b50:	mov	r3, r7
   23b54:	bl	211a4 <__assert_fail@plt+0xf4a4>
   23b58:	mov	r8, r0
   23b5c:	cmp	r0, #0
   23b60:	bne	23b70 <__assert_fail@plt+0x11e70>
   23b64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23b68:	cmp	r0, #0
   23b6c:	bne	23ccc <__assert_fail@plt+0x11fcc>
   23b70:	ldr	r0, [r5, #100]	; 0x64
   23b74:	str	r8, [r0, r9, lsl #2]
   23b78:	cmp	r9, sl
   23b7c:	bge	23ce8 <__assert_fail@plt+0x11fe8>
   23b80:	str	r6, [sp, #8]
   23b84:	rsb	r0, sl, #0
   23b88:	str	r0, [sp, #24]
   23b8c:	add	r7, r9, #1
   23b90:	add	r6, sp, #32
   23b94:	mov	sl, #0
   23b98:	ldr	r4, [sp, #20]
   23b9c:	b	23bcc <__assert_fail@plt+0x11ecc>
   23ba0:	ldr	r0, [r5, #100]	; 0x64
   23ba4:	str	r8, [r0, r7, lsl #2]
   23ba8:	cmp	r8, #0
   23bac:	mov	r0, #0
   23bb0:	addeq	r0, sl, #1
   23bb4:	add	r7, r7, #1
   23bb8:	ldr	r1, [sp, #24]
   23bbc:	add	r1, r1, r7
   23bc0:	cmp	r1, #1
   23bc4:	mov	sl, r0
   23bc8:	beq	23cdc <__assert_fail@plt+0x11fdc>
   23bcc:	sub	r9, r7, #1
   23bd0:	ldr	r0, [r5, #120]	; 0x78
   23bd4:	cmp	sl, r0
   23bd8:	bgt	23ce0 <__assert_fail@plt+0x11fe0>
   23bdc:	mov	r0, #0
   23be0:	str	r0, [sp, #36]	; 0x24
   23be4:	ldr	r0, [r5, #100]	; 0x64
   23be8:	ldr	r0, [r0, r7, lsl #2]
   23bec:	cmp	r0, #0
   23bf0:	beq	23c0c <__assert_fail@plt+0x11f0c>
   23bf4:	add	r1, r0, #4
   23bf8:	mov	r0, r6
   23bfc:	bl	20cb4 <__assert_fail@plt+0xefb4>
   23c00:	str	r0, [fp, #-32]	; 0xffffffe0
   23c04:	cmp	r0, #0
   23c08:	bne	23ccc <__assert_fail@plt+0x11fcc>
   23c0c:	cmp	r8, #0
   23c10:	beq	23c34 <__assert_fail@plt+0x11f34>
   23c14:	add	r2, r8, #16
   23c18:	mov	r0, r5
   23c1c:	mov	r1, r9
   23c20:	mov	r3, r6
   23c24:	bl	242bc <__assert_fail@plt+0x125bc>
   23c28:	str	r0, [fp, #-32]	; 0xffffffe0
   23c2c:	cmp	r0, #0
   23c30:	bne	23ccc <__assert_fail@plt+0x11fcc>
   23c34:	ldr	r0, [sp, #36]	; 0x24
   23c38:	cmp	r0, #0
   23c3c:	beq	23c90 <__assert_fail@plt+0x11f90>
   23c40:	mov	r8, r5
   23c44:	ldr	r0, [sp, #28]
   23c48:	mov	r1, r6
   23c4c:	mov	r2, r4
   23c50:	ldr	r5, [fp, #16]
   23c54:	mov	r3, r5
   23c58:	bl	23f2c <__assert_fail@plt+0x1222c>
   23c5c:	str	r0, [fp, #-32]	; 0xffffffe0
   23c60:	cmp	r0, #0
   23c64:	bne	23ccc <__assert_fail@plt+0x11fcc>
   23c68:	str	r5, [sp]
   23c6c:	mov	r5, r8
   23c70:	mov	r0, r8
   23c74:	mov	r1, r6
   23c78:	mov	r2, r7
   23c7c:	mov	r3, r4
   23c80:	bl	24024 <__assert_fail@plt+0x12324>
   23c84:	str	r0, [fp, #-32]	; 0xffffffe0
   23c88:	cmp	r0, #0
   23c8c:	bne	23ccc <__assert_fail@plt+0x11fcc>
   23c90:	ldr	r2, [r5, #88]	; 0x58
   23c94:	mov	r0, r5
   23c98:	mov	r1, r9
   23c9c:	bl	228c0 <__assert_fail@plt+0x10bc0>
   23ca0:	mov	r3, r0
   23ca4:	sub	r0, fp, #32
   23ca8:	ldr	r1, [sp, #28]
   23cac:	mov	r2, r6
   23cb0:	bl	211a4 <__assert_fail@plt+0xf4a4>
   23cb4:	mov	r8, r0
   23cb8:	cmp	r0, #0
   23cbc:	bne	23ba0 <__assert_fail@plt+0x11ea0>
   23cc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   23cc4:	cmp	r0, #0
   23cc8:	beq	23ba0 <__assert_fail@plt+0x11ea0>
   23ccc:	ldr	r0, [sp, #40]	; 0x28
   23cd0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   23cd4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   23cd8:	b	23d34 <__assert_fail@plt+0x12034>
   23cdc:	sub	r9, r7, #1
   23ce0:	ldr	r6, [sp, #8]
   23ce4:	ldr	sl, [fp, #12]
   23ce8:	ldr	r0, [sp, #40]	; 0x28
   23cec:	bl	1a1ec <__assert_fail@plt+0x84ec>
   23cf0:	ldr	r0, [r5, #100]	; 0x64
   23cf4:	ldr	r0, [r0, sl, lsl #2]
   23cf8:	str	r9, [r6]
   23cfc:	ldr	r1, [sp, #16]
   23d00:	str	r1, [r5, #40]	; 0x28
   23d04:	ldr	r1, [sp, #12]
   23d08:	str	r1, [r5, #100]	; 0x64
   23d0c:	cmp	r0, #0
   23d10:	beq	23d30 <__assert_fail@plt+0x12030>
   23d14:	ldr	r1, [fp, #8]
   23d18:	add	r0, r0, #4
   23d1c:	bl	21134 <__assert_fail@plt+0xf434>
   23d20:	mov	r4, #0
   23d24:	cmp	r0, #0
   23d28:	moveq	r4, #1
   23d2c:	b	23d34 <__assert_fail@plt+0x12034>
   23d30:	mov	r4, #1
   23d34:	mov	r0, r4
   23d38:	sub	sp, fp, #28
   23d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d40:	str	r4, [sp, #24]
   23d44:	mvn	r1, #-2147483648	; 0x80000000
   23d48:	sub	r1, r1, r5
   23d4c:	mov	r4, #12
   23d50:	cmp	r1, r0
   23d54:	ble	23d34 <__assert_fail@plt+0x12034>
   23d58:	add	r0, r0, #1
   23d5c:	add	sl, r0, r5
   23d60:	cmn	sl, #-1073741823	; 0xc0000001
   23d64:	bhi	23d34 <__assert_fail@plt+0x12034>
   23d68:	mov	r9, r0
   23d6c:	ldr	r0, [r6, #8]
   23d70:	lsl	r1, sl, #2
   23d74:	bl	1a350 <__assert_fail@plt+0x8650>
   23d78:	cmp	r0, #0
   23d7c:	beq	23d34 <__assert_fail@plt+0x12034>
   23d80:	str	sl, [r6, #4]
   23d84:	str	r0, [r6, #8]
   23d88:	add	r0, r0, r5, lsl #2
   23d8c:	lsl	r2, r9, #2
   23d90:	mov	r1, #0
   23d94:	bl	11b5c <memset@plt>
   23d98:	ldr	sl, [fp, #12]
   23d9c:	ldr	r4, [sp, #24]
   23da0:	b	23a18 <__assert_fail@plt+0x11d18>
   23da4:	mov	r4, r0
   23da8:	b	23d34 <__assert_fail@plt+0x12034>
   23dac:	push	{r4, r5, r6, r7, fp, lr}
   23db0:	add	fp, sp, #16
   23db4:	mov	r5, r2
   23db8:	mov	r6, r1
   23dbc:	mov	r4, r0
   23dc0:	ldr	r0, [r0, #12]
   23dc4:	ldr	r1, [r4, #16]
   23dc8:	cmp	r1, r0
   23dcc:	beq	23e00 <__assert_fail@plt+0x12100>
   23dd0:	mov	r0, #1
   23dd4:	mov	r1, #20
   23dd8:	bl	19f4c <__assert_fail@plt+0x824c>
   23ddc:	cmp	r0, #0
   23de0:	ldrne	r1, [r4, #16]
   23de4:	ldrne	r2, [r4, #20]
   23de8:	strne	r0, [r2, r1, lsl #2]
   23dec:	strne	r6, [r0]
   23df0:	strne	r5, [r0, #4]
   23df4:	addne	r1, r1, #1
   23df8:	strne	r1, [r4, #16]
   23dfc:	pop	{r4, r5, r6, r7, fp, pc}
   23e00:	mov	r1, #1
   23e04:	orr	r7, r1, r0, lsl #1
   23e08:	lsl	r1, r7, #2
   23e0c:	ldr	r0, [r4, #20]
   23e10:	bl	1a350 <__assert_fail@plt+0x8650>
   23e14:	cmp	r0, #0
   23e18:	beq	23e28 <__assert_fail@plt+0x12128>
   23e1c:	str	r7, [r4, #12]
   23e20:	str	r0, [r4, #20]
   23e24:	b	23dd0 <__assert_fail@plt+0x120d0>
   23e28:	mov	r0, #0
   23e2c:	pop	{r4, r5, r6, r7, fp, pc}
   23e30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23e34:	add	fp, sp, #24
   23e38:	mov	r5, r3
   23e3c:	mov	r9, r2
   23e40:	mov	r8, r1
   23e44:	mov	r4, r0
   23e48:	ldr	r1, [r0, #108]	; 0x6c
   23e4c:	ldr	r2, [r0, #112]	; 0x70
   23e50:	cmp	r1, r2
   23e54:	blt	23ea4 <__assert_fail@plt+0x121a4>
   23e58:	ldr	r0, [r4, #116]	; 0x74
   23e5c:	add	r1, r2, r2, lsl #1
   23e60:	lsl	r1, r1, #4
   23e64:	bl	1a350 <__assert_fail@plt+0x8650>
   23e68:	cmp	r0, #0
   23e6c:	beq	23f1c <__assert_fail@plt+0x1221c>
   23e70:	str	r0, [r4, #116]	; 0x74
   23e74:	ldr	r1, [r4, #108]	; 0x6c
   23e78:	ldr	r2, [r4, #112]	; 0x70
   23e7c:	add	r1, r1, r1, lsl #1
   23e80:	add	r0, r0, r1, lsl #3
   23e84:	add	r1, r2, r2, lsl #1
   23e88:	lsl	r2, r1, #3
   23e8c:	mov	r1, #0
   23e90:	bl	11b5c <memset@plt>
   23e94:	ldr	r1, [r4, #108]	; 0x6c
   23e98:	ldr	r0, [r4, #112]	; 0x70
   23e9c:	lsl	r0, r0, #1
   23ea0:	str	r0, [r4, #112]	; 0x70
   23ea4:	ldr	r2, [fp, #8]
   23ea8:	cmp	r1, #1
   23eac:	blt	23ed0 <__assert_fail@plt+0x121d0>
   23eb0:	ldr	r0, [r4, #116]	; 0x74
   23eb4:	sub	r3, r1, #1
   23eb8:	add	r3, r3, r3, lsl #1
   23ebc:	add	r0, r0, r3, lsl #3
   23ec0:	ldr	r3, [r0, #4]
   23ec4:	cmp	r3, r9
   23ec8:	moveq	r3, #1
   23ecc:	strbeq	r3, [r0, #20]
   23ed0:	mov	r0, #0
   23ed4:	cmp	r2, r5
   23ed8:	mov	r3, #0
   23edc:	mvneq	r3, #0
   23ee0:	ldr	r7, [r4, #116]	; 0x74
   23ee4:	add	r6, r1, r1, lsl #1
   23ee8:	str	r8, [r7, r6, lsl #3]!
   23eec:	str	r9, [r7, #4]
   23ef0:	str	r5, [r7, #8]
   23ef4:	str	r2, [r7, #12]
   23ef8:	str	r3, [r7, #16]
   23efc:	add	r1, r1, #1
   23f00:	str	r1, [r4, #108]	; 0x6c
   23f04:	strb	r0, [r7, #20]
   23f08:	sub	r1, r2, r5
   23f0c:	ldr	r2, [r4, #120]	; 0x78
   23f10:	cmp	r2, r1
   23f14:	strlt	r1, [r4, #120]	; 0x78
   23f18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23f1c:	ldr	r0, [r4, #116]	; 0x74
   23f20:	bl	1a1ec <__assert_fail@plt+0x84ec>
   23f24:	mov	r0, #12
   23f28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f30:	add	fp, sp, #28
   23f34:	sub	sp, sp, #20
   23f38:	mov	r9, r3
   23f3c:	mov	sl, r2
   23f40:	mov	r4, r1
   23f44:	mov	r7, r0
   23f48:	ldr	r1, [r1, #4]
   23f4c:	add	r0, sp, #8
   23f50:	bl	20a28 <__assert_fail@plt+0xed28>
   23f54:	cmp	r0, #0
   23f58:	bne	2401c <__assert_fail@plt+0x1231c>
   23f5c:	ldr	r0, [r4, #4]
   23f60:	cmp	r0, #1
   23f64:	blt	23fe4 <__assert_fail@plt+0x122e4>
   23f68:	mov	r8, #0
   23f6c:	ldr	r0, [r4, #8]
   23f70:	ldr	r5, [r0, r8, lsl #2]
   23f74:	add	r0, r5, r5, lsl #1
   23f78:	ldr	r1, [r7, #24]
   23f7c:	add	r6, r1, r0, lsl #2
   23f80:	mov	r0, r7
   23f84:	mov	r1, r6
   23f88:	mov	r2, sl
   23f8c:	mov	r3, r9
   23f90:	bl	23968 <__assert_fail@plt+0x11c68>
   23f94:	cmn	r0, #1
   23f98:	beq	23fc0 <__assert_fail@plt+0x122c0>
   23f9c:	str	r9, [sp]
   23fa0:	mov	r0, r7
   23fa4:	add	r1, sp, #8
   23fa8:	mov	r2, r5
   23fac:	mov	r3, sl
   23fb0:	bl	24474 <__assert_fail@plt+0x12774>
   23fb4:	cmp	r0, #0
   23fb8:	beq	23fd4 <__assert_fail@plt+0x122d4>
   23fbc:	b	2400c <__assert_fail@plt+0x1230c>
   23fc0:	add	r0, sp, #8
   23fc4:	mov	r1, r6
   23fc8:	bl	20cb4 <__assert_fail@plt+0xefb4>
   23fcc:	cmp	r0, #0
   23fd0:	bne	2400c <__assert_fail@plt+0x1230c>
   23fd4:	ldr	r0, [r4, #4]
   23fd8:	add	r8, r8, #1
   23fdc:	cmp	r8, r0
   23fe0:	blt	23f6c <__assert_fail@plt+0x1226c>
   23fe4:	ldr	r0, [r4, #8]
   23fe8:	bl	1a1ec <__assert_fail@plt+0x84ec>
   23fec:	vldr	d16, [sp, #8]
   23ff0:	ldr	r0, [sp, #16]
   23ff4:	str	r0, [r4, #8]
   23ff8:	vstr	d16, [r4]
   23ffc:	mov	r5, #0
   24000:	mov	r0, r5
   24004:	sub	sp, fp, #28
   24008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2400c:	mov	r5, r0
   24010:	ldr	r0, [sp, #16]
   24014:	bl	1a1ec <__assert_fail@plt+0x84ec>
   24018:	b	24000 <__assert_fail@plt+0x12300>
   2401c:	mov	r5, r0
   24020:	b	24000 <__assert_fail@plt+0x12300>
   24024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24028:	add	fp, sp, #28
   2402c:	sub	sp, sp, #44	; 0x2c
   24030:	str	r3, [sp, #8]
   24034:	mov	sl, r1
   24038:	ldr	r6, [r0, #84]	; 0x54
   2403c:	str	r0, [sp, #16]
   24040:	str	r2, [sp, #24]
   24044:	mov	r1, r2
   24048:	bl	237b0 <__assert_fail@plt+0x11ab0>
   2404c:	mov	r1, #0
   24050:	cmn	r0, #1
   24054:	beq	242b0 <__assert_fail@plt+0x125b0>
   24058:	add	r1, r0, r0, lsl #1
   2405c:	add	r7, sp, #28
   24060:	str	r6, [sp, #20]
   24064:	str	r1, [sp, #4]
   24068:	ldr	r0, [sp, #16]
   2406c:	ldr	r0, [r0, #116]	; 0x74
   24070:	add	r0, r0, r1, lsl #3
   24074:	add	r0, r0, #12
   24078:	b	24094 <__assert_fail@plt+0x12394>
   2407c:	ldr	r6, [sp, #20]
   24080:	add	r7, sp, #28
   24084:	add	r0, r9, #24
   24088:	ldrb	r1, [r9, #8]
   2408c:	cmp	r1, #0
   24090:	beq	242a4 <__assert_fail@plt+0x125a4>
   24094:	mov	r9, r0
   24098:	ldr	r1, [r0, #-12]
   2409c:	mov	r0, sl
   240a0:	bl	21134 <__assert_fail@plt+0xf434>
   240a4:	cmp	r0, #0
   240a8:	beq	24084 <__assert_fail@plt+0x12384>
   240ac:	ldmda	r9, {r0, r1}
   240b0:	ldr	r2, [sp, #24]
   240b4:	add	r1, r1, r2
   240b8:	sub	r5, r1, r0
   240bc:	cmp	r5, r2
   240c0:	bne	24174 <__assert_fail@plt+0x12474>
   240c4:	ldr	r0, [r6, #20]
   240c8:	ldr	r1, [r9, #-12]
   240cc:	add	r1, r1, r1, lsl #1
   240d0:	add	r0, r0, r1, lsl #2
   240d4:	ldr	r0, [r0, #8]
   240d8:	ldr	r4, [r0]
   240dc:	mov	r0, sl
   240e0:	mov	r1, r4
   240e4:	bl	21134 <__assert_fail@plt+0xf434>
   240e8:	mov	r1, #4
   240ec:	cmp	r0, #0
   240f0:	bne	24270 <__assert_fail@plt+0x12570>
   240f4:	mov	r0, r7
   240f8:	mov	r1, r4
   240fc:	bl	207c8 <__assert_fail@plt+0xeac8>
   24100:	mov	r4, r7
   24104:	mov	r8, r0
   24108:	str	r0, [fp, #-32]	; 0xffffffe0
   2410c:	mov	r0, r6
   24110:	mov	r1, r7
   24114:	ldr	r2, [sp, #8]
   24118:	ldr	r3, [fp, #8]
   2411c:	bl	23f2c <__assert_fail@plt+0x1222c>
   24120:	mov	r7, r0
   24124:	mov	r0, sl
   24128:	mov	r1, r4
   2412c:	bl	20cb4 <__assert_fail@plt+0xefb4>
   24130:	mov	r4, r0
   24134:	ldr	r0, [sp, #36]	; 0x24
   24138:	bl	1a1ec <__assert_fail@plt+0x84ec>
   2413c:	orr	r0, r7, r8
   24140:	orrs	r0, r0, r4
   24144:	mov	r1, #2
   24148:	beq	24270 <__assert_fail@plt+0x12570>
   2414c:	cmp	r7, #0
   24150:	movne	r4, r7
   24154:	cmp	r8, #0
   24158:	movne	r4, r8
   2415c:	str	r4, [fp, #-32]	; 0xffffffe0
   24160:	mov	r1, #1
   24164:	str	r4, [sp, #12]
   24168:	cmp	r1, #0
   2416c:	bne	24278 <__assert_fail@plt+0x12578>
   24170:	b	2407c <__assert_fail@plt+0x1237c>
   24174:	ldr	r0, [sp, #16]
   24178:	ldr	r0, [r0, #100]	; 0x64
   2417c:	ldr	r0, [r0, r5, lsl #2]
   24180:	ldr	r1, [r9, #-12]
   24184:	ldr	r2, [r6, #12]
   24188:	ldr	r4, [r2, r1, lsl #2]
   2418c:	cmp	r0, #0
   24190:	beq	24208 <__assert_fail@plt+0x12508>
   24194:	add	r8, r0, #4
   24198:	mov	r0, r8
   2419c:	mov	r1, r4
   241a0:	bl	21134 <__assert_fail@plt+0xf434>
   241a4:	mov	r1, #4
   241a8:	cmp	r0, #0
   241ac:	bne	24270 <__assert_fail@plt+0x12570>
   241b0:	mov	r0, r7
   241b4:	mov	r1, r8
   241b8:	bl	210b8 <__assert_fail@plt+0xf3b8>
   241bc:	mov	r8, r0
   241c0:	str	r0, [fp, #-32]	; 0xffffffe0
   241c4:	mov	r0, r7
   241c8:	mov	r1, r4
   241cc:	bl	20ecc <__assert_fail@plt+0xf1cc>
   241d0:	cmp	r8, #0
   241d4:	bne	241e0 <__assert_fail@plt+0x124e0>
   241d8:	cmp	r0, #0
   241dc:	bne	24220 <__assert_fail@plt+0x12520>
   241e0:	ldr	r0, [sp, #36]	; 0x24
   241e4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   241e8:	cmp	r8, #0
   241ec:	movweq	r8, #12
   241f0:	str	r8, [fp, #-32]	; 0xffffffe0
   241f4:	mov	r1, #1
   241f8:	str	r8, [sp, #12]
   241fc:	cmp	r1, #0
   24200:	bne	24278 <__assert_fail@plt+0x12578>
   24204:	b	2407c <__assert_fail@plt+0x1237c>
   24208:	mov	r0, r7
   2420c:	mov	r1, r4
   24210:	bl	207c8 <__assert_fail@plt+0xeac8>
   24214:	str	r0, [fp, #-32]	; 0xffffffe0
   24218:	cmp	r0, #0
   2421c:	bne	2428c <__assert_fail@plt+0x1258c>
   24220:	sub	r0, fp, #32
   24224:	mov	r1, r6
   24228:	mov	r2, r7
   2422c:	bl	24580 <__assert_fail@plt+0x12880>
   24230:	ldr	r4, [sp, #16]
   24234:	ldr	r1, [r4, #100]	; 0x64
   24238:	str	r0, [r1, r5, lsl #2]
   2423c:	ldr	r0, [sp, #36]	; 0x24
   24240:	bl	1a1ec <__assert_fail@plt+0x84ec>
   24244:	ldr	r0, [r4, #100]	; 0x64
   24248:	ldr	r0, [r0, r5, lsl #2]
   2424c:	clz	r0, r0
   24250:	lsr	r1, r0, #5
   24254:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24258:	cmp	r0, #0
   2425c:	mov	r2, r0
   24260:	movwne	r2, #1
   24264:	ands	r1, r1, r2
   24268:	ldreq	r0, [sp, #12]
   2426c:	str	r0, [sp, #12]
   24270:	cmp	r1, #0
   24274:	beq	2407c <__assert_fail@plt+0x1237c>
   24278:	cmp	r1, #4
   2427c:	ldr	r6, [sp, #20]
   24280:	add	r7, sp, #28
   24284:	beq	24084 <__assert_fail@plt+0x12384>
   24288:	b	24294 <__assert_fail@plt+0x12594>
   2428c:	mov	r1, #1
   24290:	b	2426c <__assert_fail@plt+0x1256c>
   24294:	cmp	r1, #2
   24298:	bne	242ac <__assert_fail@plt+0x125ac>
   2429c:	ldr	r1, [sp, #4]
   242a0:	b	24068 <__assert_fail@plt+0x12368>
   242a4:	mov	r1, #0
   242a8:	b	242b0 <__assert_fail@plt+0x125b0>
   242ac:	ldr	r1, [sp, #12]
   242b0:	mov	r0, r1
   242b4:	sub	sp, fp, #28
   242b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242c0:	add	fp, sp, #28
   242c4:	sub	sp, sp, #36	; 0x24
   242c8:	str	r1, [sp, #12]
   242cc:	mov	r7, r0
   242d0:	ldr	r4, [r0, #84]	; 0x54
   242d4:	mov	r9, #0
   242d8:	str	r9, [sp, #32]
   242dc:	str	r9, [sp, #20]
   242e0:	str	r9, [sp, #16]
   242e4:	str	r9, [sp, #24]
   242e8:	ldr	r0, [r2, #4]
   242ec:	cmp	r0, #1
   242f0:	blt	24450 <__assert_fail@plt+0x12750>
   242f4:	mov	r8, r3
   242f8:	mov	r5, r2
   242fc:	mov	r6, #0
   24300:	str	r3, [sp, #4]
   24304:	str	r2, [sp, #8]
   24308:	b	24344 <__assert_fail@plt+0x12644>
   2430c:	cmp	r0, #0
   24310:	mov	r7, r5
   24314:	ldr	r5, [sp, #8]
   24318:	beq	24360 <__assert_fail@plt+0x12660>
   2431c:	ldr	r0, [r4, #12]
   24320:	ldr	r1, [r0, sl, lsl #2]
   24324:	mov	r0, r8
   24328:	bl	20ecc <__assert_fail@plt+0xf1cc>
   2432c:	cmp	r0, #0
   24330:	beq	24464 <__assert_fail@plt+0x12764>
   24334:	add	r6, r6, #1
   24338:	ldr	r0, [r5, #4]
   2433c:	cmp	r6, r0
   24340:	bge	2444c <__assert_fail@plt+0x1274c>
   24344:	ldr	r0, [r5, #8]
   24348:	ldr	sl, [r0, r6, lsl #2]
   2434c:	ldr	r0, [r4]
   24350:	add	r0, r0, sl, lsl #3
   24354:	ldrb	r0, [r0, #6]
   24358:	tst	r0, #16
   2435c:	bne	24380 <__assert_fail@plt+0x12680>
   24360:	ldr	r0, [r4]
   24364:	add	r1, r0, sl, lsl #3
   24368:	mov	r0, r7
   2436c:	ldr	r2, [sp, #12]
   24370:	bl	24a6c <__assert_fail@plt+0x12d6c>
   24374:	cmp	r0, #0
   24378:	bne	2431c <__assert_fail@plt+0x1261c>
   2437c:	b	24334 <__assert_fail@plt+0x12634>
   24380:	mov	r0, r4
   24384:	mov	r1, sl
   24388:	mov	r2, r7
   2438c:	mov	r5, r7
   24390:	ldr	r7, [sp, #12]
   24394:	mov	r3, r7
   24398:	bl	24790 <__assert_fail@plt+0x12a90>
   2439c:	cmp	r0, #2
   243a0:	blt	2430c <__assert_fail@plt+0x1260c>
   243a4:	add	r8, r0, r7
   243a8:	ldr	r0, [r5, #100]	; 0x64
   243ac:	ldr	r0, [r0, r8, lsl #2]
   243b0:	ldr	r1, [r4, #12]
   243b4:	ldr	r2, [r1, sl, lsl #2]
   243b8:	mov	r1, #0
   243bc:	str	r1, [sp, #20]
   243c0:	cmp	r0, #0
   243c4:	mov	r7, r5
   243c8:	add	r5, sp, #16
   243cc:	beq	243f8 <__assert_fail@plt+0x126f8>
   243d0:	add	r1, r0, #4
   243d4:	mov	r0, r5
   243d8:	mov	r9, r5
   243dc:	mov	r5, r2
   243e0:	bl	20cb4 <__assert_fail@plt+0xefb4>
   243e4:	mov	r2, r5
   243e8:	mov	r5, r9
   243ec:	str	r0, [sp, #32]
   243f0:	cmp	r0, #0
   243f4:	bne	2446c <__assert_fail@plt+0x1276c>
   243f8:	mov	r0, r5
   243fc:	mov	r1, r2
   24400:	bl	20ecc <__assert_fail@plt+0xf1cc>
   24404:	cmp	r0, #0
   24408:	beq	24464 <__assert_fail@plt+0x12764>
   2440c:	add	r0, sp, #32
   24410:	mov	r1, r4
   24414:	mov	r2, r5
   24418:	bl	24580 <__assert_fail@plt+0x12880>
   2441c:	ldr	r1, [r7, #100]	; 0x64
   24420:	str	r0, [r1, r8, lsl #2]
   24424:	ldr	r0, [r7, #100]	; 0x64
   24428:	ldr	r0, [r0, r8, lsl #2]
   2442c:	cmp	r0, #0
   24430:	ldr	r8, [sp, #4]
   24434:	ldr	r5, [sp, #8]
   24438:	bne	2431c <__assert_fail@plt+0x1261c>
   2443c:	ldr	r9, [sp, #32]
   24440:	cmp	r9, #0
   24444:	beq	2431c <__assert_fail@plt+0x1261c>
   24448:	b	24450 <__assert_fail@plt+0x12750>
   2444c:	mov	r9, #0
   24450:	ldr	r0, [sp, #24]
   24454:	bl	1a1ec <__assert_fail@plt+0x84ec>
   24458:	mov	r0, r9
   2445c:	sub	sp, fp, #28
   24460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24464:	mov	r9, #12
   24468:	b	24450 <__assert_fail@plt+0x12750>
   2446c:	mov	r9, r0
   24470:	b	24450 <__assert_fail@plt+0x12750>
   24474:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24478:	add	fp, sp, #24
   2447c:	sub	sp, sp, #8
   24480:	mov	r5, r3
   24484:	mov	r7, r2
   24488:	mov	r4, r1
   2448c:	mov	r6, r0
   24490:	mov	r0, r1
   24494:	mov	r1, r2
   24498:	bl	21134 <__assert_fail@plt+0xf434>
   2449c:	cmp	r0, #0
   244a0:	beq	244b0 <__assert_fail@plt+0x127b0>
   244a4:	mov	r0, #0
   244a8:	sub	sp, fp, #24
   244ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   244b0:	ldr	r8, [fp, #8]
   244b4:	b	24500 <__assert_fail@plt+0x12800>
   244b8:	ldr	r0, [r0, #8]
   244bc:	ldr	r2, [r0, #4]
   244c0:	str	r8, [sp]
   244c4:	mov	r0, r6
   244c8:	mov	r1, r4
   244cc:	mov	r3, r5
   244d0:	bl	24474 <__assert_fail@plt+0x12774>
   244d4:	cmp	r0, #0
   244d8:	bne	244a8 <__assert_fail@plt+0x127a8>
   244dc:	ldr	r0, [r6, #20]
   244e0:	add	r0, r0, r7, lsl #2
   244e4:	ldr	r0, [r0, #8]
   244e8:	ldr	r7, [r0]
   244ec:	mov	r0, r4
   244f0:	mov	r1, r7
   244f4:	bl	21134 <__assert_fail@plt+0xf434>
   244f8:	cmp	r0, #0
   244fc:	bne	244a4 <__assert_fail@plt+0x127a4>
   24500:	ldr	r0, [r6]
   24504:	add	r1, r0, r7, lsl #3
   24508:	ldrb	r1, [r1, #4]
   2450c:	cmp	r1, r8
   24510:	bne	24520 <__assert_fail@plt+0x12820>
   24514:	ldr	r0, [r0, r7, lsl #3]
   24518:	cmp	r0, r5
   2451c:	beq	24558 <__assert_fail@plt+0x12858>
   24520:	mov	r0, r4
   24524:	mov	r1, r7
   24528:	bl	20ecc <__assert_fail@plt+0xf1cc>
   2452c:	cmp	r0, #0
   24530:	beq	24574 <__assert_fail@plt+0x12874>
   24534:	ldr	r0, [r6, #20]
   24538:	add	r7, r7, r7, lsl #1
   2453c:	add	r0, r0, r7, lsl #2
   24540:	ldr	r1, [r0, #4]
   24544:	cmp	r1, #2
   24548:	beq	244b8 <__assert_fail@plt+0x127b8>
   2454c:	cmp	r1, #0
   24550:	bne	244dc <__assert_fail@plt+0x127dc>
   24554:	b	244a4 <__assert_fail@plt+0x127a4>
   24558:	cmp	r8, #9
   2455c:	bne	244a4 <__assert_fail@plt+0x127a4>
   24560:	mov	r0, r4
   24564:	mov	r1, r7
   24568:	bl	20ecc <__assert_fail@plt+0xf1cc>
   2456c:	cmp	r0, #0
   24570:	bne	244a4 <__assert_fail@plt+0x127a4>
   24574:	mov	r0, #12
   24578:	sub	sp, fp, #24
   2457c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24584:	add	fp, sp, #28
   24588:	sub	sp, sp, #4
   2458c:	mov	r9, r1
   24590:	ldr	r1, [r2, #4]
   24594:	cmp	r1, #0
   24598:	beq	24644 <__assert_fail@plt+0x12944>
   2459c:	mov	sl, r2
   245a0:	str	r0, [sp]
   245a4:	mov	r6, #0
   245a8:	mov	r0, r2
   245ac:	mov	r1, #0
   245b0:	bl	212a0 <__assert_fail@plt+0xf5a0>
   245b4:	mov	r7, r0
   245b8:	ldr	r0, [r9, #32]
   245bc:	ldr	r1, [r9, #68]	; 0x44
   245c0:	and	r1, r1, r7
   245c4:	add	r1, r1, r1, lsl #1
   245c8:	mov	r5, r0
   245cc:	ldr	r2, [r5, r1, lsl #2]!
   245d0:	cmp	r2, #1
   245d4:	blt	2461c <__assert_fail@plt+0x1291c>
   245d8:	add	r0, r0, r1, lsl #2
   245dc:	ldr	r8, [r0, #8]
   245e0:	b	245f4 <__assert_fail@plt+0x128f4>
   245e4:	ldr	r0, [r5]
   245e8:	add	r6, r6, #1
   245ec:	cmp	r6, r0
   245f0:	bge	2461c <__assert_fail@plt+0x1291c>
   245f4:	ldr	r4, [r8, r6, lsl #2]
   245f8:	ldr	r0, [r4]
   245fc:	cmp	r7, r0
   24600:	bne	245e4 <__assert_fail@plt+0x128e4>
   24604:	add	r0, r4, #4
   24608:	mov	r1, sl
   2460c:	bl	212cc <__assert_fail@plt+0xf5cc>
   24610:	cmp	r0, #0
   24614:	beq	245e4 <__assert_fail@plt+0x128e4>
   24618:	b	24638 <__assert_fail@plt+0x12938>
   2461c:	mov	r0, r9
   24620:	mov	r1, sl
   24624:	mov	r2, r7
   24628:	bl	24664 <__assert_fail@plt+0x12964>
   2462c:	mov	r4, r0
   24630:	cmp	r0, #0
   24634:	beq	24650 <__assert_fail@plt+0x12950>
   24638:	mov	r0, r4
   2463c:	sub	sp, fp, #28
   24640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24644:	mov	r4, #0
   24648:	str	r4, [r0]
   2464c:	b	24638 <__assert_fail@plt+0x12938>
   24650:	mov	r0, #12
   24654:	ldr	r1, [sp]
   24658:	str	r0, [r1]
   2465c:	mov	r4, #0
   24660:	b	24638 <__assert_fail@plt+0x12938>
   24664:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24668:	add	fp, sp, #24
   2466c:	mov	r8, r2
   24670:	mov	r7, r1
   24674:	mov	r9, r0
   24678:	mov	r0, #56	; 0x38
   2467c:	mov	r1, #1
   24680:	bl	19f4c <__assert_fail@plt+0x824c>
   24684:	cmp	r0, #0
   24688:	beq	24784 <__assert_fail@plt+0x12a84>
   2468c:	mov	r4, r0
   24690:	add	r5, r0, #4
   24694:	mov	r0, r5
   24698:	mov	r1, r7
   2469c:	bl	210b8 <__assert_fail@plt+0xf3b8>
   246a0:	cmp	r0, #0
   246a4:	bne	24770 <__assert_fail@plt+0x12a70>
   246a8:	str	r5, [r4, #40]	; 0x28
   246ac:	ldr	r0, [r7, #4]
   246b0:	cmp	r0, #1
   246b4:	blt	24750 <__assert_fail@plt+0x12a50>
   246b8:	mov	r0, #0
   246bc:	movw	ip, #65280	; 0xff00
   246c0:	movt	ip, #3
   246c4:	add	r2, ip, #255	; 0xff
   246c8:	mov	lr, #32
   246cc:	b	246f4 <__assert_fail@plt+0x129f4>
   246d0:	ldr	r3, [r5]
   246d4:	tst	r3, ip
   246d8:	beq	246e4 <__assert_fail@plt+0x129e4>
   246dc:	orr	r1, r1, #128	; 0x80
   246e0:	strb	r1, [r4, #52]	; 0x34
   246e4:	ldr	r1, [r7, #4]
   246e8:	add	r0, r0, #1
   246ec:	cmp	r0, r1
   246f0:	bge	24750 <__assert_fail@plt+0x12a50>
   246f4:	ldr	r1, [r7, #8]
   246f8:	ldr	r1, [r1, r0, lsl #2]
   246fc:	ldr	r3, [r9]
   24700:	add	r5, r3, r1, lsl #3
   24704:	ldr	r3, [r5, #4]!
   24708:	and	r1, r3, r2
   2470c:	cmp	r1, #1
   24710:	beq	246e4 <__assert_fail@plt+0x129e4>
   24714:	and	r1, lr, r3, lsr #15
   24718:	ldrb	r6, [r4, #52]	; 0x34
   2471c:	orr	r1, r6, r1
   24720:	strb	r1, [r4, #52]	; 0x34
   24724:	uxtb	r3, r3
   24728:	cmp	r3, #12
   2472c:	beq	246dc <__assert_fail@plt+0x129dc>
   24730:	cmp	r3, #4
   24734:	beq	24748 <__assert_fail@plt+0x12a48>
   24738:	cmp	r3, #2
   2473c:	bne	246d0 <__assert_fail@plt+0x129d0>
   24740:	orr	r1, r1, #16
   24744:	b	246e0 <__assert_fail@plt+0x129e0>
   24748:	orr	r1, r1, #64	; 0x40
   2474c:	b	246e0 <__assert_fail@plt+0x129e0>
   24750:	mov	r0, r9
   24754:	mov	r1, r4
   24758:	mov	r2, r8
   2475c:	bl	21590 <__assert_fail@plt+0xf890>
   24760:	cmp	r0, #0
   24764:	bne	2477c <__assert_fail@plt+0x12a7c>
   24768:	mov	r0, r4
   2476c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24770:	mov	r0, r4
   24774:	bl	1a1ec <__assert_fail@plt+0x84ec>
   24778:	b	24784 <__assert_fail@plt+0x12a84>
   2477c:	mov	r0, r4
   24780:	bl	1bab8 <__assert_fail@plt+0x9db8>
   24784:	mov	r4, #0
   24788:	mov	r0, r4
   2478c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24794:	add	fp, sp, #28
   24798:	sub	sp, sp, #4
   2479c:	mov	sl, r3
   247a0:	mov	r7, r2
   247a4:	mov	r5, r0
   247a8:	ldr	r6, [r0]
   247ac:	add	r0, r6, r1, lsl #3
   247b0:	ldrb	r8, [r0, #4]
   247b4:	cmp	r8, #7
   247b8:	beq	2495c <__assert_fail@plt+0x12c5c>
   247bc:	mov	r4, r1
   247c0:	mov	r0, r7
   247c4:	mov	r1, sl
   247c8:	bl	1fb4c <__assert_fail@plt+0xde4c>
   247cc:	mov	r9, r0
   247d0:	mov	r2, #0
   247d4:	cmp	r8, #5
   247d8:	bne	2481c <__assert_fail@plt+0x12b1c>
   247dc:	cmp	r9, #2
   247e0:	blt	24948 <__assert_fail@plt+0x12c48>
   247e4:	ldr	r0, [r5, #128]	; 0x80
   247e8:	tst	r0, #64	; 0x40
   247ec:	bne	24800 <__assert_fail@plt+0x12b00>
   247f0:	ldr	r1, [r7, #4]
   247f4:	ldrb	r1, [r1, sl]
   247f8:	cmp	r1, #10
   247fc:	beq	24948 <__assert_fail@plt+0x12c48>
   24800:	tst	r0, #128	; 0x80
   24804:	beq	24944 <__assert_fail@plt+0x12c44>
   24808:	ldr	r0, [r7, #4]
   2480c:	ldrb	r0, [r0, sl]
   24810:	cmp	r0, #0
   24814:	movne	r2, r9
   24818:	b	24948 <__assert_fail@plt+0x12c48>
   2481c:	cmp	r8, #6
   24820:	bne	24948 <__assert_fail@plt+0x12c48>
   24824:	cmp	r9, #2
   24828:	blt	24948 <__assert_fail@plt+0x12c48>
   2482c:	ldr	r4, [r6, r4, lsl #3]
   24830:	ldr	r0, [r4, #32]
   24834:	cmp	r0, #0
   24838:	bne	24854 <__assert_fail@plt+0x12b54>
   2483c:	ldr	r0, [r4, #36]	; 0x24
   24840:	cmp	r0, #0
   24844:	bne	24854 <__assert_fail@plt+0x12b54>
   24848:	ldr	r0, [r4, #20]
   2484c:	cmp	r0, #0
   24850:	beq	24954 <__assert_fail@plt+0x12c54>
   24854:	mov	r0, r7
   24858:	mov	r1, sl
   2485c:	bl	1d8b8 <__assert_fail@plt+0xbbb8>
   24860:	mov	r6, r0
   24864:	ldr	r0, [r4, #20]
   24868:	cmp	r0, #1
   2486c:	blt	24894 <__assert_fail@plt+0x12b94>
   24870:	ldr	r0, [r4]
   24874:	mov	r1, #0
   24878:	ldr	r2, [r0, r1, lsl #2]
   2487c:	cmp	r6, r2
   24880:	beq	24910 <__assert_fail@plt+0x12c10>
   24884:	add	r1, r1, #1
   24888:	ldr	r2, [r4, #20]
   2488c:	cmp	r1, r2
   24890:	blt	24878 <__assert_fail@plt+0x12b78>
   24894:	ldr	r0, [r4, #36]	; 0x24
   24898:	cmp	r0, #1
   2489c:	blt	248cc <__assert_fail@plt+0x12bcc>
   248a0:	mov	r5, #0
   248a4:	ldr	r0, [r4, #12]
   248a8:	ldr	r1, [r0, r5, lsl #2]
   248ac:	mov	r0, r6
   248b0:	bl	1188c <iswctype@plt>
   248b4:	cmp	r0, #0
   248b8:	bne	24910 <__assert_fail@plt+0x12c10>
   248bc:	add	r5, r5, #1
   248c0:	ldr	r0, [r4, #36]	; 0x24
   248c4:	cmp	r5, r0
   248c8:	blt	248a4 <__assert_fail@plt+0x12ba4>
   248cc:	ldr	r0, [r4, #32]
   248d0:	cmp	r0, #1
   248d4:	blt	24918 <__assert_fail@plt+0x12c18>
   248d8:	ldr	r0, [r4, #4]
   248dc:	mov	r1, #0
   248e0:	b	248f4 <__assert_fail@plt+0x12bf4>
   248e4:	add	r1, r1, #1
   248e8:	ldr	r2, [r4, #32]
   248ec:	cmp	r1, r2
   248f0:	bge	24918 <__assert_fail@plt+0x12c18>
   248f4:	ldr	r2, [r0, r1, lsl #2]
   248f8:	cmp	r2, r6
   248fc:	bhi	248e4 <__assert_fail@plt+0x12be4>
   24900:	ldr	r2, [r4, #8]
   24904:	ldr	r2, [r2, r1, lsl #2]
   24908:	cmp	r6, r2
   2490c:	bhi	248e4 <__assert_fail@plt+0x12be4>
   24910:	mov	r0, r9
   24914:	b	2491c <__assert_fail@plt+0x12c1c>
   24918:	mov	r0, #0
   2491c:	ldrb	r1, [r4, #16]
   24920:	tst	r1, #1
   24924:	mov	r2, #0
   24928:	bne	24934 <__assert_fail@plt+0x12c34>
   2492c:	mov	r2, r0
   24930:	b	24948 <__assert_fail@plt+0x12c48>
   24934:	cmp	r0, #0
   24938:	bgt	24948 <__assert_fail@plt+0x12c48>
   2493c:	cmp	r9, #1
   24940:	movle	r9, #1
   24944:	mov	r2, r9
   24948:	mov	r0, r2
   2494c:	sub	sp, fp, #28
   24950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24954:	mov	r6, #0
   24958:	b	24864 <__assert_fail@plt+0x12b64>
   2495c:	ldr	r0, [r7, #4]
   24960:	ldrb	r5, [r0, sl]
   24964:	mov	r2, #0
   24968:	cmp	r5, #194	; 0xc2
   2496c:	bcc	24948 <__assert_fail@plt+0x12c48>
   24970:	ldr	r1, [r7, #48]	; 0x30
   24974:	add	r2, sl, #2
   24978:	cmp	r2, r1
   2497c:	ble	24988 <__assert_fail@plt+0x12c88>
   24980:	mov	r2, #0
   24984:	b	24948 <__assert_fail@plt+0x12c48>
   24988:	add	r0, sl, r0
   2498c:	ldrb	r3, [r0, #1]
   24990:	cmp	r5, #223	; 0xdf
   24994:	bhi	249b8 <__assert_fail@plt+0x12cb8>
   24998:	mov	r0, #0
   2499c:	cmp	r3, #192	; 0xc0
   249a0:	movwcc	r0, #1
   249a4:	lsl	r2, r0, #1
   249a8:	sxtb	r0, r3
   249ac:	cmn	r0, #1
   249b0:	movwgt	r2, #0
   249b4:	b	24948 <__assert_fail@plt+0x12c48>
   249b8:	cmp	r5, #239	; 0xef
   249bc:	bhi	249d8 <__assert_fail@plt+0x12cd8>
   249c0:	mov	r2, #3
   249c4:	cmp	r5, #224	; 0xe0
   249c8:	bne	24a34 <__assert_fail@plt+0x12d34>
   249cc:	cmp	r3, #160	; 0xa0
   249d0:	bcc	24980 <__assert_fail@plt+0x12c80>
   249d4:	b	24a34 <__assert_fail@plt+0x12d34>
   249d8:	cmp	r5, #247	; 0xf7
   249dc:	bhi	249f8 <__assert_fail@plt+0x12cf8>
   249e0:	mov	r2, #4
   249e4:	cmp	r5, #240	; 0xf0
   249e8:	bne	24a34 <__assert_fail@plt+0x12d34>
   249ec:	cmp	r3, #144	; 0x90
   249f0:	bcc	24980 <__assert_fail@plt+0x12c80>
   249f4:	b	24a34 <__assert_fail@plt+0x12d34>
   249f8:	cmp	r5, #251	; 0xfb
   249fc:	bhi	24a18 <__assert_fail@plt+0x12d18>
   24a00:	mov	r2, #5
   24a04:	cmp	r5, #248	; 0xf8
   24a08:	bne	24a34 <__assert_fail@plt+0x12d34>
   24a0c:	cmp	r3, #136	; 0x88
   24a10:	bcc	24980 <__assert_fail@plt+0x12c80>
   24a14:	b	24a34 <__assert_fail@plt+0x12d34>
   24a18:	cmp	r5, #253	; 0xfd
   24a1c:	bhi	24980 <__assert_fail@plt+0x12c80>
   24a20:	mov	r2, #6
   24a24:	cmp	r5, #252	; 0xfc
   24a28:	bne	24a34 <__assert_fail@plt+0x12d34>
   24a2c:	cmp	r3, #132	; 0x84
   24a30:	bcc	24980 <__assert_fail@plt+0x12c80>
   24a34:	add	r3, r2, sl
   24a38:	cmp	r3, r1
   24a3c:	bgt	24980 <__assert_fail@plt+0x12c80>
   24a40:	mov	r1, #1
   24a44:	ldrb	r3, [r0, r1]
   24a48:	sxtb	r7, r3
   24a4c:	cmn	r7, #1
   24a50:	bgt	24980 <__assert_fail@plt+0x12c80>
   24a54:	cmp	r3, #191	; 0xbf
   24a58:	bhi	24980 <__assert_fail@plt+0x12c80>
   24a5c:	add	r1, r1, #1
   24a60:	cmp	r2, r1
   24a64:	bne	24a44 <__assert_fail@plt+0x12d44>
   24a68:	b	24948 <__assert_fail@plt+0x12c48>
   24a6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   24a70:	add	fp, sp, #24
   24a74:	mov	r6, r0
   24a78:	ldr	r7, [r1, #4]
   24a7c:	mvn	r0, #0
   24a80:	uxtab	r0, r0, r7
   24a84:	mov	r8, #0
   24a88:	cmp	r0, #6
   24a8c:	bhi	24b98 <__assert_fail@plt+0x12e98>
   24a90:	mov	r5, r2
   24a94:	ldr	r2, [r6, #4]
   24a98:	ldrb	r2, [r2, r5]
   24a9c:	sxtb	r3, r2
   24aa0:	add	r4, pc, #0
   24aa4:	ldr	pc, [r4, r0, lsl #2]
   24aa8:	andeq	r4, r2, r4, asr #21
   24aac:	muleq	r2, r8, fp
   24ab0:	ldrdeq	r4, [r2], -r8
   24ab4:	muleq	r2, r8, fp
   24ab8:	strdeq	r4, [r2], -r8
   24abc:	muleq	r2, r8, fp
   24ac0:	strdeq	r4, [r2], -r0
   24ac4:	ldrb	r0, [r1]
   24ac8:	uxtb	r1, r3
   24acc:	cmp	r0, r1
   24ad0:	beq	24b2c <__assert_fail@plt+0x12e2c>
   24ad4:	b	24b98 <__assert_fail@plt+0x12e98>
   24ad8:	ldr	r0, [r1]
   24adc:	mov	r1, r2
   24ae0:	bl	22a3c <__assert_fail@plt+0x10d3c>
   24ae4:	cmp	r0, #0
   24ae8:	bne	24b2c <__assert_fail@plt+0x12e2c>
   24aec:	b	24b98 <__assert_fail@plt+0x12e98>
   24af0:	cmp	r3, #0
   24af4:	bmi	24b98 <__assert_fail@plt+0x12e98>
   24af8:	cmp	r2, #0
   24afc:	beq	24b1c <__assert_fail@plt+0x12e1c>
   24b00:	cmp	r2, #10
   24b04:	bne	24b2c <__assert_fail@plt+0x12e2c>
   24b08:	ldr	r0, [r6, #84]	; 0x54
   24b0c:	ldrb	r0, [r0, #128]	; 0x80
   24b10:	tst	r0, #64	; 0x40
   24b14:	bne	24b2c <__assert_fail@plt+0x12e2c>
   24b18:	b	24b98 <__assert_fail@plt+0x12e98>
   24b1c:	ldr	r0, [r6, #84]	; 0x54
   24b20:	ldrb	r0, [r0, #128]	; 0x80
   24b24:	tst	r0, #128	; 0x80
   24b28:	bne	24b98 <__assert_fail@plt+0x12e98>
   24b2c:	movw	r0, #65280	; 0xff00
   24b30:	movt	r0, #3
   24b34:	tst	r7, r0
   24b38:	beq	24b94 <__assert_fail@plt+0x12e94>
   24b3c:	ldr	r2, [r6, #88]	; 0x58
   24b40:	mov	r0, r6
   24b44:	mov	r1, r5
   24b48:	bl	228c0 <__assert_fail@plt+0x10bc0>
   24b4c:	and	r1, r0, #1
   24b50:	tst	r7, #1024	; 0x400
   24b54:	beq	24b60 <__assert_fail@plt+0x12e60>
   24b58:	cmp	r1, #0
   24b5c:	beq	24b98 <__assert_fail@plt+0x12e98>
   24b60:	tst	r7, #2048	; 0x800
   24b64:	cmpne	r1, #0
   24b68:	bne	24b98 <__assert_fail@plt+0x12e98>
   24b6c:	tst	r7, #8192	; 0x2000
   24b70:	beq	24b7c <__assert_fail@plt+0x12e7c>
   24b74:	ands	r1, r0, #2
   24b78:	beq	24b98 <__assert_fail@plt+0x12e98>
   24b7c:	uxth	r1, r7
   24b80:	mov	r2, #1
   24b84:	eor	r1, r2, r1, lsr #15
   24b88:	and	r0, r0, #8
   24b8c:	orr	r0, r1, r0, lsr #3
   24b90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24b94:	mov	r8, #1
   24b98:	mov	r0, r8
   24b9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ba4:	add	fp, sp, #28
   24ba8:	sub	sp, sp, #20
   24bac:	mov	r5, r0
   24bb0:	ldr	r0, [r1, #8]
   24bb4:	cmp	r0, #1
   24bb8:	blt	24d64 <__assert_fail@plt+0x13064>
   24bbc:	mov	r4, r1
   24bc0:	ldr	sl, [r5, #84]	; 0x54
   24bc4:	mov	r8, #0
   24bc8:	movw	r9, #65280	; 0xff00
   24bcc:	movt	r9, #3
   24bd0:	b	24be4 <__assert_fail@plt+0x12ee4>
   24bd4:	add	r8, r8, #1
   24bd8:	ldr	r0, [r4, #8]
   24bdc:	cmp	r8, r0
   24be0:	bge	24d64 <__assert_fail@plt+0x13064>
   24be4:	ldr	r0, [r4, #12]
   24be8:	ldr	r7, [r0, r8, lsl #2]
   24bec:	ldr	r0, [sl]
   24bf0:	add	r0, r0, r7, lsl #3
   24bf4:	ldr	r6, [r0, #4]
   24bf8:	tst	r6, #1048576	; 0x100000
   24bfc:	beq	24bd4 <__assert_fail@plt+0x12ed4>
   24c00:	tst	r6, r9
   24c04:	beq	24c58 <__assert_fail@plt+0x12f58>
   24c08:	ldr	r1, [r5, #40]	; 0x28
   24c0c:	ldr	r2, [r5, #88]	; 0x58
   24c10:	mov	r0, r5
   24c14:	bl	228c0 <__assert_fail@plt+0x10bc0>
   24c18:	and	r1, r0, #1
   24c1c:	tst	r6, #1024	; 0x400
   24c20:	beq	24c2c <__assert_fail@plt+0x12f2c>
   24c24:	cmp	r1, #0
   24c28:	beq	24bd4 <__assert_fail@plt+0x12ed4>
   24c2c:	tst	r6, #2048	; 0x800
   24c30:	cmpne	r1, #0
   24c34:	bne	24bd4 <__assert_fail@plt+0x12ed4>
   24c38:	tst	r6, #8192	; 0x2000
   24c3c:	beq	24c48 <__assert_fail@plt+0x12f48>
   24c40:	ands	r1, r0, #2
   24c44:	beq	24bd4 <__assert_fail@plt+0x12ed4>
   24c48:	tst	r6, #32768	; 0x8000
   24c4c:	beq	24c58 <__assert_fail@plt+0x12f58>
   24c50:	ands	r0, r0, #8
   24c54:	beq	24bd4 <__assert_fail@plt+0x12ed4>
   24c58:	ldr	r3, [r5, #40]	; 0x28
   24c5c:	mov	r0, sl
   24c60:	mov	r1, r7
   24c64:	mov	r2, r5
   24c68:	bl	24790 <__assert_fail@plt+0x12a90>
   24c6c:	cmp	r0, #0
   24c70:	beq	24bd4 <__assert_fail@plt+0x12ed4>
   24c74:	ldr	r1, [r5, #40]	; 0x28
   24c78:	ldr	r2, [r5, #120]	; 0x78
   24c7c:	cmp	r2, r0
   24c80:	movlt	r2, r0
   24c84:	str	r2, [r5, #120]	; 0x78
   24c88:	add	r6, r1, r0
   24c8c:	mov	r0, r5
   24c90:	mov	r1, r6
   24c94:	bl	2383c <__assert_fail@plt+0x11b3c>
   24c98:	str	r0, [sp, #16]
   24c9c:	cmp	r0, #0
   24ca0:	bne	24d5c <__assert_fail@plt+0x1305c>
   24ca4:	ldr	r0, [r5, #100]	; 0x64
   24ca8:	ldr	r9, [r0, r6, lsl #2]
   24cac:	ldr	r0, [sl, #12]
   24cb0:	ldr	r1, [sl, #24]
   24cb4:	ldr	r0, [r0, r7, lsl #2]
   24cb8:	add	r0, r0, r0, lsl #1
   24cbc:	add	r2, r1, r0, lsl #2
   24cc0:	cmp	r9, #0
   24cc4:	beq	24ce8 <__assert_fail@plt+0x12fe8>
   24cc8:	ldr	r1, [r9, #40]	; 0x28
   24ccc:	mov	r7, sp
   24cd0:	mov	r0, r7
   24cd4:	bl	2357c <__assert_fail@plt+0x1187c>
   24cd8:	str	r0, [sp, #16]
   24cdc:	cmp	r0, #0
   24ce0:	beq	24cfc <__assert_fail@plt+0x12ffc>
   24ce4:	b	24d5c <__assert_fail@plt+0x1305c>
   24ce8:	vldr	d16, [r2]
   24cec:	ldr	r0, [r2, #8]
   24cf0:	str	r0, [sp, #8]
   24cf4:	vstr	d16, [sp]
   24cf8:	mov	r7, sp
   24cfc:	ldr	r2, [r5, #88]	; 0x58
   24d00:	sub	r1, r6, #1
   24d04:	mov	r0, r5
   24d08:	bl	228c0 <__assert_fail@plt+0x10bc0>
   24d0c:	mov	r3, r0
   24d10:	add	r0, sp, #16
   24d14:	mov	r1, sl
   24d18:	mov	r2, r7
   24d1c:	bl	211a4 <__assert_fail@plt+0xf4a4>
   24d20:	ldr	r1, [r5, #100]	; 0x64
   24d24:	str	r0, [r1, r6, lsl #2]
   24d28:	cmp	r9, #0
   24d2c:	beq	24d38 <__assert_fail@plt+0x13038>
   24d30:	ldr	r0, [sp, #8]
   24d34:	bl	1a1ec <__assert_fail@plt+0x84ec>
   24d38:	ldr	r0, [r5, #100]	; 0x64
   24d3c:	ldr	r0, [r0, r6, lsl #2]
   24d40:	cmp	r0, #0
   24d44:	movw	r9, #65280	; 0xff00
   24d48:	movt	r9, #3
   24d4c:	bne	24bd4 <__assert_fail@plt+0x12ed4>
   24d50:	ldr	r0, [sp, #16]
   24d54:	cmp	r0, #0
   24d58:	beq	24bd4 <__assert_fail@plt+0x12ed4>
   24d5c:	sub	sp, fp, #28
   24d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d64:	mov	r0, #0
   24d68:	sub	sp, fp, #28
   24d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d74:	add	fp, sp, #28
   24d78:	sub	sp, sp, #68	; 0x44
   24d7c:	sub	sp, sp, #14336	; 0x3800
   24d80:	mov	r4, r1
   24d84:	mov	r7, r0
   24d88:	mov	r6, #0
   24d8c:	str	r6, [r1, #44]	; 0x2c
   24d90:	str	r6, [r1, #48]	; 0x30
   24d94:	sub	lr, fp, #4096	; 0x1000
   24d98:	sub	r2, lr, #2128	; 0x850
   24d9c:	add	r3, sp, #16
   24da0:	bl	25240 <__assert_fail@plt+0x13540>
   24da4:	cmp	r0, #0
   24da8:	ble	25148 <__assert_fail@plt+0x13448>
   24dac:	mov	r5, r0
   24db0:	str	r4, [sp, #4]
   24db4:	add	r1, r0, #1
   24db8:	sub	r0, fp, #3120	; 0xc30
   24dbc:	bl	20a28 <__assert_fail@plt+0xed28>
   24dc0:	str	r0, [fp, #-36]	; 0xffffffdc
   24dc4:	cmp	r0, #0
   24dc8:	bne	25114 <__assert_fail@plt+0x13414>
   24dcc:	sub	r0, fp, #3152	; 0xc50
   24dd0:	bl	2572c <__assert_fail@plt+0x13a2c>
   24dd4:	sub	sl, fp, #3120	; 0xc30
   24dd8:	sub	lr, fp, #3072	; 0xc00
   24ddc:	sub	r6, lr, #36	; 0x24
   24de0:	mov	r9, #0
   24de4:	mov	r0, #0
   24de8:	str	r0, [sp, #8]
   24dec:	str	r5, [sp, #12]
   24df0:	b	24e38 <__assert_fail@plt+0x13138>
   24df4:	ldrsb	r0, [r8, #52]	; 0x34
   24df8:	cmn	r0, #1
   24dfc:	ble	24f04 <__assert_fail@plt+0x13204>
   24e00:	sub	lr, fp, #2048	; 0x800
   24e04:	sub	r0, lr, #36	; 0x24
   24e08:	str	r8, [r0, r9, lsl #2]
   24e0c:	sub	lr, fp, #1024	; 0x400
   24e10:	sub	r0, lr, #36	; 0x24
   24e14:	ldr	r0, [r0, r9, lsl #2]
   24e18:	str	r0, [r6, r9, lsl #2]
   24e1c:	add	r0, sp, #16
   24e20:	add	r1, r0, r9, lsl #5
   24e24:	sub	r0, fp, #3152	; 0xc50
   24e28:	bl	2573c <__assert_fail@plt+0x13a3c>
   24e2c:	add	r9, r9, #1
   24e30:	cmp	r9, r5
   24e34:	beq	24f8c <__assert_fail@plt+0x1328c>
   24e38:	mov	r0, #0
   24e3c:	str	r0, [fp, #-3116]	; 0xfffff3d4
   24e40:	add	r0, r9, r9, lsl #1
   24e44:	sub	lr, fp, #4096	; 0x1000
   24e48:	sub	r1, lr, #2128	; 0x850
   24e4c:	add	r0, r1, r0, lsl #2
   24e50:	mov	r4, r0
   24e54:	ldr	r1, [r4, #4]!
   24e58:	cmp	r1, #1
   24e5c:	blt	24ec8 <__assert_fail@plt+0x131c8>
   24e60:	ldr	r5, [r0, #8]
   24e64:	mov	r6, #0
   24e68:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24e6c:	b	24e80 <__assert_fail@plt+0x13180>
   24e70:	ldr	r0, [r4]
   24e74:	add	r6, r6, #1
   24e78:	cmp	r6, r0
   24e7c:	bge	24eb8 <__assert_fail@plt+0x131b8>
   24e80:	ldr	r0, [r5, r6, lsl #2]
   24e84:	ldr	r2, [r7, #12]
   24e88:	ldr	r0, [r2, r0, lsl #2]
   24e8c:	cmn	r0, #1
   24e90:	beq	24e70 <__assert_fail@plt+0x13170>
   24e94:	ldr	r1, [r7, #24]
   24e98:	add	r0, r0, r0, lsl #1
   24e9c:	add	r1, r1, r0, lsl #2
   24ea0:	mov	r0, sl
   24ea4:	bl	20cb4 <__assert_fail@plt+0xefb4>
   24ea8:	mov	r1, #0
   24eac:	cmp	r0, #0
   24eb0:	beq	24e70 <__assert_fail@plt+0x13170>
   24eb4:	b	2510c <__assert_fail@plt+0x1340c>
   24eb8:	str	r1, [fp, #-36]	; 0xffffffdc
   24ebc:	ldr	r5, [sp, #12]
   24ec0:	sub	lr, fp, #3072	; 0xc00
   24ec4:	sub	r6, lr, #36	; 0x24
   24ec8:	sub	r0, fp, #36	; 0x24
   24ecc:	mov	r1, r7
   24ed0:	mov	r2, sl
   24ed4:	mov	r3, #0
   24ed8:	bl	211a4 <__assert_fail@plt+0xf4a4>
   24edc:	mov	r8, r0
   24ee0:	sub	lr, fp, #1024	; 0x400
   24ee4:	sub	r0, lr, #36	; 0x24
   24ee8:	str	r8, [r0, r9, lsl #2]
   24eec:	cmp	r8, #0
   24ef0:	bne	24df4 <__assert_fail@plt+0x130f4>
   24ef4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24ef8:	cmp	r0, #0
   24efc:	beq	24df4 <__assert_fail@plt+0x130f4>
   24f00:	b	25114 <__assert_fail@plt+0x13414>
   24f04:	sub	r0, fp, #36	; 0x24
   24f08:	mov	r1, r7
   24f0c:	mov	r2, sl
   24f10:	mov	r3, #1
   24f14:	bl	211a4 <__assert_fail@plt+0xf4a4>
   24f18:	sub	lr, fp, #2048	; 0x800
   24f1c:	sub	r1, lr, #36	; 0x24
   24f20:	str	r0, [r1, r9, lsl #2]
   24f24:	cmp	r0, #0
   24f28:	bne	24f38 <__assert_fail@plt+0x13238>
   24f2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24f30:	cmp	r1, #0
   24f34:	bne	25114 <__assert_fail@plt+0x13414>
   24f38:	cmp	r8, r0
   24f3c:	beq	24f5c <__assert_fail@plt+0x1325c>
   24f40:	ldr	r0, [r7, #92]	; 0x5c
   24f44:	cmp	r0, #1
   24f48:	mov	r0, #0
   24f4c:	movwgt	r0, #1
   24f50:	ldr	r1, [sp, #8]
   24f54:	orr	r1, r1, r0
   24f58:	str	r1, [sp, #8]
   24f5c:	sub	r0, fp, #36	; 0x24
   24f60:	mov	r1, r7
   24f64:	mov	r2, sl
   24f68:	mov	r3, #2
   24f6c:	bl	211a4 <__assert_fail@plt+0xf4a4>
   24f70:	str	r0, [r6, r9, lsl #2]
   24f74:	cmp	r0, #0
   24f78:	bne	24e1c <__assert_fail@plt+0x1311c>
   24f7c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24f80:	cmp	r0, #0
   24f84:	beq	24e1c <__assert_fail@plt+0x1311c>
   24f88:	b	25114 <__assert_fail@plt+0x13414>
   24f8c:	ldr	r0, [sp, #8]
   24f90:	tst	r0, #1
   24f94:	bne	2516c <__assert_fail@plt+0x1346c>
   24f98:	mov	r0, #4
   24f9c:	mov	r1, #256	; 0x100
   24fa0:	bl	19f4c <__assert_fail@plt+0x824c>
   24fa4:	mov	r8, r0
   24fa8:	ldr	r0, [sp, #4]
   24fac:	str	r8, [r0, #44]	; 0x2c
   24fb0:	cmp	r8, #0
   24fb4:	beq	25114 <__assert_fail@plt+0x13414>
   24fb8:	mov	r0, #0
   24fbc:	mov	r1, #0
   24fc0:	add	r5, sp, #16
   24fc4:	mov	r9, r5
   24fc8:	b	24fdc <__assert_fail@plt+0x132dc>
   24fcc:	add	r9, r9, #4
   24fd0:	add	r1, r1, #1
   24fd4:	cmp	r1, #8
   24fd8:	beq	25060 <__assert_fail@plt+0x13360>
   24fdc:	sub	r2, fp, #3152	; 0xc50
   24fe0:	ldr	r2, [r2, r1, lsl #2]
   24fe4:	cmp	r2, #0
   24fe8:	beq	24fcc <__assert_fail@plt+0x132cc>
   24fec:	add	r3, r7, r1, lsl #2
   24ff0:	add	ip, r3, #96	; 0x60
   24ff4:	lsl	r4, r1, #5
   24ff8:	mov	r6, #1
   24ffc:	tst	r2, #1
   25000:	bne	25020 <__assert_fail@plt+0x13320>
   25004:	add	r4, r4, #1
   25008:	lsr	r3, r2, #1
   2500c:	lsl	r6, r6, #1
   25010:	cmp	r0, r2, lsr #1
   25014:	mov	r2, r3
   25018:	bne	24ffc <__assert_fail@plt+0x132fc>
   2501c:	b	24fcc <__assert_fail@plt+0x132cc>
   25020:	mov	lr, #0
   25024:	ldr	r3, [r9, lr, lsl #3]
   25028:	add	lr, lr, #4
   2502c:	tst	r3, r6
   25030:	beq	25024 <__assert_fail@plt+0x13324>
   25034:	ldr	r3, [ip]
   25038:	tst	r3, r6
   2503c:	sub	r3, fp, #2048	; 0x800
   25040:	sub	r3, r3, #36	; 0x24
   25044:	sub	r5, fp, #1024	; 0x400
   25048:	sub	r5, r5, #36	; 0x24
   2504c:	moveq	r3, r5
   25050:	add	r3, r3, lr
   25054:	ldr	r3, [r3, #-4]
   25058:	str	r3, [r8, r4, lsl #2]
   2505c:	b	25004 <__assert_fail@plt+0x13304>
   25060:	sub	lr, fp, #3072	; 0xc00
   25064:	sub	r6, lr, #36	; 0x24
   25068:	sub	r0, fp, #3152	; 0xc50
   2506c:	mov	r1, #10
   25070:	bl	22a3c <__assert_fail@plt+0x10d3c>
   25074:	cmp	r0, #0
   25078:	beq	250cc <__assert_fail@plt+0x133cc>
   2507c:	ldr	r0, [sp, #12]
   25080:	cmp	r0, #1
   25084:	blt	250cc <__assert_fail@plt+0x133cc>
   25088:	add	r5, sp, #16
   2508c:	ldr	r4, [sp, #12]
   25090:	mov	r0, r5
   25094:	mov	r1, #10
   25098:	bl	22a3c <__assert_fail@plt+0x10d3c>
   2509c:	cmp	r0, #0
   250a0:	bne	250b8 <__assert_fail@plt+0x133b8>
   250a4:	add	r5, r5, #32
   250a8:	subs	r4, r4, #1
   250ac:	add	r6, r6, #4
   250b0:	bne	25090 <__assert_fail@plt+0x13390>
   250b4:	b	250cc <__assert_fail@plt+0x133cc>
   250b8:	ldr	r0, [r6]
   250bc:	str	r0, [r8, #40]	; 0x28
   250c0:	ldr	r1, [sp, #8]
   250c4:	tst	r1, #1
   250c8:	strne	r0, [r8, #1064]	; 0x428
   250cc:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   250d0:	bl	1a1ec <__assert_fail@plt+0x84ec>
   250d4:	mov	r6, #1
   250d8:	ldr	r5, [sp, #12]
   250dc:	cmp	r5, #1
   250e0:	blt	25100 <__assert_fail@plt+0x13400>
   250e4:	sub	lr, fp, #4096	; 0x1000
   250e8:	sub	r0, lr, #2128	; 0x850
   250ec:	add	r4, r0, #8
   250f0:	ldr	r0, [r4], #12
   250f4:	bl	1a1ec <__assert_fail@plt+0x84ec>
   250f8:	subs	r5, r5, #1
   250fc:	bne	250f0 <__assert_fail@plt+0x133f0>
   25100:	mov	r0, r6
   25104:	sub	sp, fp, #28
   25108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2510c:	str	r0, [fp, #-36]	; 0xffffffdc
   25110:	ldr	r5, [sp, #12]
   25114:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   25118:	bl	1a1ec <__assert_fail@plt+0x84ec>
   2511c:	mov	r6, #0
   25120:	cmp	r5, #1
   25124:	blt	25100 <__assert_fail@plt+0x13400>
   25128:	sub	lr, fp, #4096	; 0x1000
   2512c:	sub	r0, lr, #2128	; 0x850
   25130:	add	r4, r0, #8
   25134:	ldr	r0, [r4], #12
   25138:	bl	1a1ec <__assert_fail@plt+0x84ec>
   2513c:	subs	r5, r5, #1
   25140:	bne	25134 <__assert_fail@plt+0x13434>
   25144:	b	25100 <__assert_fail@plt+0x13400>
   25148:	bne	25100 <__assert_fail@plt+0x13400>
   2514c:	mov	r0, #4
   25150:	mov	r1, #256	; 0x100
   25154:	bl	19f4c <__assert_fail@plt+0x824c>
   25158:	mov	r6, r0
   2515c:	str	r0, [r4, #44]	; 0x2c
   25160:	cmp	r0, #0
   25164:	movwne	r6, #1
   25168:	b	25100 <__assert_fail@plt+0x13400>
   2516c:	mov	r0, #4
   25170:	mov	r1, #512	; 0x200
   25174:	bl	19f4c <__assert_fail@plt+0x824c>
   25178:	mov	r8, r0
   2517c:	ldr	r0, [sp, #4]
   25180:	str	r8, [r0, #48]	; 0x30
   25184:	cmp	r8, #0
   25188:	beq	25114 <__assert_fail@plt+0x13414>
   2518c:	sub	lr, fp, #1024	; 0x400
   25190:	sub	r0, lr, #36	; 0x24
   25194:	sub	ip, r0, #4
   25198:	sub	lr, fp, #2048	; 0x800
   2519c:	sub	r0, lr, #36	; 0x24
   251a0:	sub	lr, r0, #4
   251a4:	mov	r2, #0
   251a8:	add	r3, sp, #16
   251ac:	mov	r7, #0
   251b0:	b	251c4 <__assert_fail@plt+0x134c4>
   251b4:	add	r3, r3, #4
   251b8:	add	r7, r7, #1
   251bc:	cmp	r7, #8
   251c0:	beq	25068 <__assert_fail@plt+0x13368>
   251c4:	sub	r0, fp, #3152	; 0xc50
   251c8:	ldr	r5, [r0, r7, lsl #2]
   251cc:	cmp	r5, #0
   251d0:	beq	251b4 <__assert_fail@plt+0x134b4>
   251d4:	lsl	r0, r7, #5
   251d8:	mov	r1, #1
   251dc:	tst	r5, #1
   251e0:	bne	25200 <__assert_fail@plt+0x13500>
   251e4:	add	r0, r0, #1
   251e8:	lsr	r4, r5, #1
   251ec:	lsl	r1, r1, #1
   251f0:	cmp	r2, r5, lsr #1
   251f4:	mov	r5, r4
   251f8:	bne	251dc <__assert_fail@plt+0x134dc>
   251fc:	b	251b4 <__assert_fail@plt+0x134b4>
   25200:	mov	r4, r3
   25204:	mov	sl, ip
   25208:	mov	r9, lr
   2520c:	add	sl, sl, #4
   25210:	add	r9, r9, #4
   25214:	ldr	r6, [r4], #32
   25218:	tst	r6, r1
   2521c:	beq	2520c <__assert_fail@plt+0x1350c>
   25220:	ldr	r4, [sl]
   25224:	mov	r6, r8
   25228:	str	r4, [r6, r0, lsl #2]!
   2522c:	ldr	r4, [r9]
   25230:	str	r4, [r6, #1024]	; 0x400
   25234:	sub	r4, fp, #3072	; 0xc00
   25238:	sub	r6, r4, #36	; 0x24
   2523c:	b	251e4 <__assert_fail@plt+0x134e4>
   25240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25244:	add	fp, sp, #28
   25248:	sub	sp, sp, #140	; 0x8c
   2524c:	str	r3, [sp, #32]
   25250:	str	r2, [sp, #28]
   25254:	mov	r9, r1
   25258:	mov	sl, r0
   2525c:	sub	r7, fp, #64	; 0x40
   25260:	mov	r0, r7
   25264:	bl	2572c <__assert_fail@plt+0x13a2c>
   25268:	ldr	r0, [r9, #8]
   2526c:	cmp	r0, #1
   25270:	blt	256f4 <__assert_fail@plt+0x139f4>
   25274:	add	r6, sl, #96	; 0x60
   25278:	mov	r0, #0
   2527c:	add	r5, sp, #72	; 0x48
   25280:	mov	r4, #0
   25284:	str	sl, [sp]
   25288:	str	r6, [sp, #8]
   2528c:	str	r9, [sp, #16]
   25290:	b	252b8 <__assert_fail@plt+0x135b8>
   25294:	mov	r0, r7
   25298:	bl	2572c <__assert_fail@plt+0x13a2c>
   2529c:	ldr	r9, [sp, #16]
   252a0:	ldr	r0, [r9, #8]
   252a4:	ldr	r1, [sp, #36]	; 0x24
   252a8:	add	r1, r1, #1
   252ac:	cmp	r1, r0
   252b0:	mov	r0, r1
   252b4:	bge	256f8 <__assert_fail@plt+0x139f8>
   252b8:	str	r0, [sp, #36]	; 0x24
   252bc:	ldr	r0, [r9, #12]
   252c0:	ldr	r1, [sp, #36]	; 0x24
   252c4:	ldr	r8, [r0, r1, lsl #2]
   252c8:	ldr	r1, [sl]
   252cc:	add	r0, r1, r8, lsl #3
   252d0:	ldr	r9, [r0, #4]!
   252d4:	str	r0, [sp, #12]
   252d8:	uxtb	r0, r9
   252dc:	cmp	r0, #1
   252e0:	str	r0, [sp, #24]
   252e4:	bne	252fc <__assert_fail@plt+0x135fc>
   252e8:	str	r1, [sp, #20]
   252ec:	ldrb	r1, [r1, r8, lsl #3]
   252f0:	mov	r0, r7
   252f4:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   252f8:	b	25394 <__assert_fail@plt+0x13694>
   252fc:	cmp	r0, #7
   25300:	beq	25328 <__assert_fail@plt+0x13628>
   25304:	cmp	r0, #5
   25308:	beq	25344 <__assert_fail@plt+0x13644>
   2530c:	cmp	r0, #3
   25310:	bne	2529c <__assert_fail@plt+0x1359c>
   25314:	str	r1, [sp, #20]
   25318:	ldr	r1, [r1, r8, lsl #3]
   2531c:	mov	r0, r7
   25320:	bl	2573c <__assert_fail@plt+0x13a3c>
   25324:	b	25394 <__assert_fail@plt+0x13694>
   25328:	str	r1, [sp, #20]
   2532c:	mvn	r0, #0
   25330:	str	r0, [fp, #-52]	; 0xffffffcc
   25334:	str	r0, [fp, #-56]	; 0xffffffc8
   25338:	str	r0, [fp, #-60]	; 0xffffffc4
   2533c:	str	r0, [fp, #-64]	; 0xffffffc0
   25340:	b	2536c <__assert_fail@plt+0x1366c>
   25344:	ldr	r0, [sl, #92]	; 0x5c
   25348:	cmp	r0, #2
   2534c:	str	r1, [sp, #20]
   25350:	blt	25364 <__assert_fail@plt+0x13664>
   25354:	ldr	r1, [sl, #60]	; 0x3c
   25358:	mov	r0, r7
   2535c:	bl	2573c <__assert_fail@plt+0x13a3c>
   25360:	b	2536c <__assert_fail@plt+0x1366c>
   25364:	mov	r0, r7
   25368:	bl	25760 <__assert_fail@plt+0x13a60>
   2536c:	ldrb	r0, [sl, #128]	; 0x80
   25370:	tst	r0, #64	; 0x40
   25374:	moveq	r0, r7
   25378:	moveq	r1, #10
   2537c:	bleq	25788 <__assert_fail@plt+0x13a88>
   25380:	ldrb	r0, [sl, #128]	; 0x80
   25384:	tst	r0, #128	; 0x80
   25388:	movne	r0, r7
   2538c:	movne	r1, #0
   25390:	blne	25788 <__assert_fail@plt+0x13a88>
   25394:	movw	r0, #65280	; 0xff00
   25398:	movt	r0, #3
   2539c:	ands	r0, r9, r0
   253a0:	beq	25520 <__assert_fail@plt+0x13820>
   253a4:	tst	r9, #8192	; 0x2000
   253a8:	beq	253dc <__assert_fail@plt+0x136dc>
   253ac:	mov	r0, r7
   253b0:	mov	r1, #10
   253b4:	bl	22a3c <__assert_fail@plt+0x10d3c>
   253b8:	str	r0, [sp, #4]
   253bc:	mov	r0, r7
   253c0:	bl	2572c <__assert_fail@plt+0x13a2c>
   253c4:	ldr	r0, [sp, #4]
   253c8:	cmp	r0, #0
   253cc:	beq	2529c <__assert_fail@plt+0x1359c>
   253d0:	mov	r0, r7
   253d4:	mov	r1, #10
   253d8:	bl	1eee8 <__assert_fail@plt+0xd1e8>
   253dc:	tst	r9, #32768	; 0x8000
   253e0:	bne	25294 <__assert_fail@plt+0x13594>
   253e4:	tst	r9, #1024	; 0x400
   253e8:	beq	25484 <__assert_fail@plt+0x13784>
   253ec:	ldr	r0, [sp, #24]
   253f0:	cmp	r0, #1
   253f4:	bne	25408 <__assert_fail@plt+0x13708>
   253f8:	ldr	r0, [sp, #12]
   253fc:	ldrb	r0, [r0, #2]
   25400:	tst	r0, #64	; 0x40
   25404:	beq	25294 <__assert_fail@plt+0x13594>
   25408:	ldr	r0, [sl, #92]	; 0x5c
   2540c:	cmp	r0, #1
   25410:	ble	25454 <__assert_fail@plt+0x13754>
   25414:	ldr	r1, [sl, #60]	; 0x3c
   25418:	mov	r0, #0
   2541c:	mov	r2, #0
   25420:	ldr	r3, [r6, r2, lsl #2]
   25424:	ldr	r6, [r1, r2, lsl #2]
   25428:	mvn	r6, r6
   2542c:	orr	r3, r3, r6
   25430:	ldr	r6, [r7, r2, lsl #2]
   25434:	and	r3, r6, r3
   25438:	ldr	r6, [sp, #8]
   2543c:	str	r3, [r7, r2, lsl #2]
   25440:	orr	r0, r3, r0
   25444:	add	r2, r2, #1
   25448:	cmp	r2, #8
   2544c:	bne	25420 <__assert_fail@plt+0x13720>
   25450:	b	2547c <__assert_fail@plt+0x1377c>
   25454:	mov	r0, #0
   25458:	mov	r1, #0
   2545c:	ldr	r2, [r6, r1, lsl #2]
   25460:	ldr	r3, [r7, r1, lsl #2]
   25464:	and	r2, r3, r2
   25468:	str	r2, [r7, r1, lsl #2]
   2546c:	orr	r0, r2, r0
   25470:	add	r1, r1, #1
   25474:	cmp	r1, #8
   25478:	bne	2545c <__assert_fail@plt+0x1375c>
   2547c:	cmp	r0, #0
   25480:	beq	2529c <__assert_fail@plt+0x1359c>
   25484:	tst	r9, #2048	; 0x800
   25488:	beq	25520 <__assert_fail@plt+0x13820>
   2548c:	ldr	r0, [sp, #24]
   25490:	cmp	r0, #1
   25494:	bne	254a8 <__assert_fail@plt+0x137a8>
   25498:	ldr	r0, [sp, #12]
   2549c:	ldrb	r0, [r0, #2]
   254a0:	tst	r0, #64	; 0x40
   254a4:	bne	25294 <__assert_fail@plt+0x13594>
   254a8:	ldr	r0, [sl, #92]	; 0x5c
   254ac:	cmp	r0, #1
   254b0:	ble	254f0 <__assert_fail@plt+0x137f0>
   254b4:	ldr	r1, [sl, #60]	; 0x3c
   254b8:	mov	r0, #0
   254bc:	mov	r2, #0
   254c0:	ldr	r3, [r6, r2, lsl #2]
   254c4:	ldr	r6, [r1, r2, lsl #2]
   254c8:	and	r3, r6, r3
   254cc:	ldr	r6, [r7, r2, lsl #2]
   254d0:	bic	r3, r6, r3
   254d4:	ldr	r6, [sp, #8]
   254d8:	str	r3, [r7, r2, lsl #2]
   254dc:	orr	r0, r3, r0
   254e0:	add	r2, r2, #1
   254e4:	cmp	r2, #8
   254e8:	bne	254c0 <__assert_fail@plt+0x137c0>
   254ec:	b	25518 <__assert_fail@plt+0x13818>
   254f0:	mov	r0, #0
   254f4:	mov	r1, #0
   254f8:	ldr	r2, [r6, r1, lsl #2]
   254fc:	ldr	r3, [r7, r1, lsl #2]
   25500:	bic	r2, r3, r2
   25504:	str	r2, [r7, r1, lsl #2]
   25508:	orr	r0, r2, r0
   2550c:	add	r1, r1, #1
   25510:	cmp	r1, #8
   25514:	bne	254f8 <__assert_fail@plt+0x137f8>
   25518:	cmp	r0, #0
   2551c:	beq	2529c <__assert_fail@plt+0x1359c>
   25520:	cmp	r4, #1
   25524:	blt	25688 <__assert_fail@plt+0x13988>
   25528:	str	r8, [sp, #12]
   2552c:	mov	r8, #0
   25530:	ldr	sl, [sp, #32]
   25534:	ldr	r9, [sp, #16]
   25538:	ldr	r6, [sp, #24]
   2553c:	cmp	r6, #1
   25540:	bne	25584 <__assert_fail@plt+0x13884>
   25544:	b	25564 <__assert_fail@plt+0x13864>
   25548:	mov	r4, ip
   2554c:	add	sl, sl, #32
   25550:	add	r8, r8, #1
   25554:	cmp	r8, r4
   25558:	bge	25698 <__assert_fail@plt+0x13998>
   2555c:	cmp	r6, #1
   25560:	bne	25584 <__assert_fail@plt+0x13884>
   25564:	ldr	r0, [sp, #12]
   25568:	ldr	r1, [sp, #20]
   2556c:	ldrb	r1, [r1, r0, lsl #3]
   25570:	ldr	r0, [sp, #32]
   25574:	add	r0, r0, r8, lsl #5
   25578:	bl	22a3c <__assert_fail@plt+0x10d3c>
   2557c:	cmp	r0, #0
   25580:	beq	2554c <__assert_fail@plt+0x1384c>
   25584:	mov	ip, r4
   25588:	mov	r0, #0
   2558c:	mov	r1, #0
   25590:	ldr	r2, [r7, r1, lsl #2]
   25594:	ldr	r3, [sl, r1, lsl #2]
   25598:	and	r2, r3, r2
   2559c:	str	r2, [r5, r1, lsl #2]
   255a0:	orr	r0, r2, r0
   255a4:	add	r1, r1, #1
   255a8:	cmp	r1, #8
   255ac:	bne	25590 <__assert_fail@plt+0x13890>
   255b0:	cmp	r0, #0
   255b4:	beq	25548 <__assert_fail@plt+0x13848>
   255b8:	mov	r9, #0
   255bc:	mov	r0, #0
   255c0:	mov	r1, #0
   255c4:	ldr	r2, [r7, r1, lsl #2]
   255c8:	ldr	r3, [sl, r1, lsl #2]
   255cc:	bic	r4, r3, r2
   255d0:	add	r6, sp, #40	; 0x28
   255d4:	str	r4, [r6, r1, lsl #2]
   255d8:	bic	r2, r2, r3
   255dc:	str	r2, [r7, r1, lsl #2]
   255e0:	orr	r9, r2, r9
   255e4:	orr	r0, r4, r0
   255e8:	add	r1, r1, #1
   255ec:	cmp	r1, #8
   255f0:	bne	255c4 <__assert_fail@plt+0x138c4>
   255f4:	cmp	r0, #0
   255f8:	beq	25644 <__assert_fail@plt+0x13944>
   255fc:	mov	r4, ip
   25600:	ldr	r6, [sp, #32]
   25604:	add	r0, r6, ip, lsl #5
   25608:	add	r1, sp, #40	; 0x28
   2560c:	bl	257ac <__assert_fail@plt+0x13aac>
   25610:	add	r0, r6, r8, lsl #5
   25614:	mov	r1, r5
   25618:	bl	257ac <__assert_fail@plt+0x13aac>
   2561c:	add	r0, r4, r4, lsl #1
   25620:	ldr	r2, [sp, #28]
   25624:	add	r0, r2, r0, lsl #2
   25628:	add	r1, r8, r8, lsl #1
   2562c:	add	r1, r2, r1, lsl #2
   25630:	bl	210b8 <__assert_fail@plt+0xf3b8>
   25634:	cmp	r0, #0
   25638:	bne	25704 <__assert_fail@plt+0x13a04>
   2563c:	add	r4, r4, #1
   25640:	b	25648 <__assert_fail@plt+0x13948>
   25644:	mov	r4, ip
   25648:	ldr	r0, [sp, #16]
   2564c:	mov	r6, r0
   25650:	ldr	r0, [r0, #12]
   25654:	ldr	r1, [sp, #36]	; 0x24
   25658:	ldr	r1, [r0, r1, lsl #2]
   2565c:	add	r0, r8, r8, lsl #1
   25660:	ldr	r2, [sp, #28]
   25664:	add	r0, r2, r0, lsl #2
   25668:	bl	20ecc <__assert_fail@plt+0xf1cc>
   2566c:	cmp	r0, #0
   25670:	beq	25704 <__assert_fail@plt+0x13a04>
   25674:	cmp	r9, #0
   25678:	beq	25694 <__assert_fail@plt+0x13994>
   2567c:	mov	r9, r6
   25680:	ldr	r6, [sp, #24]
   25684:	b	2554c <__assert_fail@plt+0x1384c>
   25688:	mov	r8, #0
   2568c:	ldr	r9, [sp, #16]
   25690:	b	25698 <__assert_fail@plt+0x13998>
   25694:	mov	r9, r6
   25698:	cmp	r8, r4
   2569c:	ldr	sl, [sp]
   256a0:	bne	256ec <__assert_fail@plt+0x139ec>
   256a4:	ldr	r0, [sp, #32]
   256a8:	add	r0, r0, r4, lsl #5
   256ac:	mov	r1, r7
   256b0:	bl	257ac <__assert_fail@plt+0x13aac>
   256b4:	ldr	r0, [r9, #12]
   256b8:	ldr	r1, [sp, #36]	; 0x24
   256bc:	ldr	r1, [r0, r1, lsl #2]
   256c0:	add	r0, r4, r4, lsl #1
   256c4:	ldr	r2, [sp, #28]
   256c8:	add	r0, r2, r0, lsl #2
   256cc:	bl	207c8 <__assert_fail@plt+0xeac8>
   256d0:	cmp	r0, #0
   256d4:	ldr	r6, [sp, #8]
   256d8:	bne	25704 <__assert_fail@plt+0x13a04>
   256dc:	mov	r0, r7
   256e0:	bl	2572c <__assert_fail@plt+0x13a2c>
   256e4:	add	r4, r4, #1
   256e8:	b	252a0 <__assert_fail@plt+0x135a0>
   256ec:	ldr	r6, [sp, #8]
   256f0:	b	252a0 <__assert_fail@plt+0x135a0>
   256f4:	mov	r4, #0
   256f8:	mov	r0, r4
   256fc:	sub	sp, fp, #28
   25700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25704:	cmp	r4, #1
   25708:	blt	25724 <__assert_fail@plt+0x13a24>
   2570c:	ldr	r0, [sp, #28]
   25710:	add	r5, r0, #8
   25714:	ldr	r0, [r5], #12
   25718:	bl	1a1ec <__assert_fail@plt+0x84ec>
   2571c:	subs	r4, r4, #1
   25720:	bne	25714 <__assert_fail@plt+0x13a14>
   25724:	mvn	r4, #0
   25728:	b	256f8 <__assert_fail@plt+0x139f8>
   2572c:	vmov.i32	q8, #0	; 0x00000000
   25730:	vst1.32	{d16-d17}, [r0]!
   25734:	vst1.32	{d16-d17}, [r0]
   25738:	bx	lr
   2573c:	mov	r2, #0
   25740:	ldr	ip, [r1, r2, lsl #2]
   25744:	ldr	r3, [r0, r2, lsl #2]
   25748:	orr	r3, r3, ip
   2574c:	str	r3, [r0, r2, lsl #2]
   25750:	add	r2, r2, #1
   25754:	cmp	r2, #8
   25758:	bne	25740 <__assert_fail@plt+0x13a40>
   2575c:	bx	lr
   25760:	mvn	r1, #0
   25764:	str	r1, [r0]
   25768:	str	r1, [r0, #4]
   2576c:	str	r1, [r0, #8]
   25770:	str	r1, [r0, #12]
   25774:	str	r1, [r0, #16]
   25778:	str	r1, [r0, #20]
   2577c:	str	r1, [r0, #24]
   25780:	str	r1, [r0, #28]
   25784:	bx	lr
   25788:	asr	r2, r1, #31
   2578c:	add	r2, r1, r2, lsr #27
   25790:	asr	r2, r2, #5
   25794:	ldr	ip, [r0, r2, lsl #2]
   25798:	and	r1, r1, #31
   2579c:	mov	r3, #1
   257a0:	bic	r1, ip, r3, lsl r1
   257a4:	str	r1, [r0, r2, lsl #2]
   257a8:	bx	lr
   257ac:	vld1.32	{d16-d17}, [r1]!
   257b0:	vld1.32	{d18-d19}, [r1]
   257b4:	vst1.32	{d16-d17}, [r0]!
   257b8:	vst1.32	{d18-d19}, [r0]
   257bc:	bx	lr
   257c0:	ldr	r0, [r0]
   257c4:	add	r0, r0, r1, lsl #3
   257c8:	ldr	r1, [r0, #4]
   257cc:	uxtb	r3, r1
   257d0:	mov	r0, #0
   257d4:	cmp	r3, #2
   257d8:	bne	25830 <__assert_fail@plt+0x13b30>
   257dc:	movw	r3, #65280	; 0xff00
   257e0:	movt	r3, #3
   257e4:	tst	r1, r3
   257e8:	moveq	r0, #1
   257ec:	bxeq	lr
   257f0:	ands	ip, r2, #1
   257f4:	bne	25800 <__assert_fail@plt+0x13b00>
   257f8:	ands	r3, r1, #1024	; 0x400
   257fc:	bne	25830 <__assert_fail@plt+0x13b30>
   25800:	cmp	ip, #0
   25804:	andsne	r3, r1, #2048	; 0x800
   25808:	bne	25830 <__assert_fail@plt+0x13b30>
   2580c:	tst	r2, #2
   25810:	bne	2581c <__assert_fail@plt+0x13b1c>
   25814:	ands	r3, r1, #8192	; 0x2000
   25818:	bxne	lr
   2581c:	uxth	r0, r1
   25820:	mov	r1, #1
   25824:	eor	r0, r1, r0, lsr #15
   25828:	and	r1, r2, #8
   2582c:	orr	r0, r0, r1, lsr #3
   25830:	bx	lr
   25834:	mov	ip, #0
   25838:	str	ip, [r0, #20]
   2583c:	str	ip, [r0, #16]
   25840:	stm	r0, {r1, r2, r3}
   25844:	str	ip, [r0, #24]
   25848:	ldr	r1, [sp]
   2584c:	str	r1, [r0, #12]
   25850:	bx	lr
   25854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25858:	add	fp, sp, #28
   2585c:	sub	sp, sp, #12
   25860:	mov	sl, r1
   25864:	mov	r6, r0
   25868:	ldr	r1, [r1, #8]
   2586c:	ldr	r5, [sl, #12]
   25870:	mov	r0, sp
   25874:	bl	207c8 <__assert_fail@plt+0xeac8>
   25878:	cmp	r0, #0
   2587c:	bne	25964 <__assert_fail@plt+0x13c64>
   25880:	mov	r3, sp
   25884:	mov	r0, r6
   25888:	mov	r1, sl
   2588c:	mov	r2, r5
   25890:	bl	25a20 <__assert_fail@plt+0x13d20>
   25894:	cmp	r0, #0
   25898:	bne	25930 <__assert_fail@plt+0x13c30>
   2589c:	mov	r9, #0
   258a0:	mov	r8, sp
   258a4:	mov	r1, #0
   258a8:	cmp	r5, #1
   258ac:	bge	258dc <__assert_fail@plt+0x13bdc>
   258b0:	b	25938 <__assert_fail@plt+0x13c38>
   258b4:	mov	r0, r6
   258b8:	mov	r1, sl
   258bc:	mov	r2, r5
   258c0:	mov	r3, r8
   258c4:	bl	25a20 <__assert_fail@plt+0x13d20>
   258c8:	cmp	r0, #0
   258cc:	mov	r1, r4
   258d0:	bne	25930 <__assert_fail@plt+0x13c30>
   258d4:	cmp	r5, #1
   258d8:	blt	25938 <__assert_fail@plt+0x13c38>
   258dc:	ldr	r0, [sl]
   258e0:	ldr	r2, [r0, r5, lsl #2]
   258e4:	cmp	r2, #0
   258e8:	mov	r4, #0
   258ec:	addeq	r4, r1, #1
   258f0:	ldr	r1, [r6, #120]	; 0x78
   258f4:	cmp	r4, r1
   258f8:	bgt	25940 <__assert_fail@plt+0x13c40>
   258fc:	str	r9, [sp, #4]
   25900:	ldr	r0, [r6, #100]	; 0x64
   25904:	sub	r5, r5, #1
   25908:	ldr	r0, [r0, r5, lsl #2]
   2590c:	cmp	r0, #0
   25910:	beq	258b4 <__assert_fail@plt+0x13bb4>
   25914:	mov	r0, r6
   25918:	mov	r1, sl
   2591c:	mov	r2, r5
   25920:	mov	r3, r8
   25924:	bl	25b48 <__assert_fail@plt+0x13e48>
   25928:	cmp	r0, #0
   2592c:	beq	258b4 <__assert_fail@plt+0x13bb4>
   25930:	mov	r7, r0
   25934:	b	25950 <__assert_fail@plt+0x13c50>
   25938:	mov	r7, #0
   2593c:	b	25950 <__assert_fail@plt+0x13c50>
   25940:	lsl	r2, r5, #2
   25944:	mov	r7, #0
   25948:	mov	r1, #0
   2594c:	bl	11b5c <memset@plt>
   25950:	ldr	r0, [sp, #8]
   25954:	bl	1a1ec <__assert_fail@plt+0x84ec>
   25958:	mov	r0, r7
   2595c:	sub	sp, fp, #28
   25960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25964:	mov	r7, r0
   25968:	b	25958 <__assert_fail@plt+0x13c58>
   2596c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25970:	add	fp, sp, #24
   25974:	sub	sp, sp, #16
   25978:	cmp	r3, #1
   2597c:	blt	25a14 <__assert_fail@plt+0x13d14>
   25980:	mov	r4, r3
   25984:	mov	r5, r2
   25988:	mov	r6, r1
   2598c:	mov	r7, r0
   25990:	mov	r8, sp
   25994:	add	r9, sp, #12
   25998:	b	259b0 <__assert_fail@plt+0x13cb0>
   2599c:	str	r0, [r6]
   259a0:	add	r6, r6, #4
   259a4:	add	r5, r5, #4
   259a8:	subs	r4, r4, #1
   259ac:	beq	25a14 <__assert_fail@plt+0x13d14>
   259b0:	ldr	r0, [r5]
   259b4:	ldr	r1, [r6]
   259b8:	cmp	r1, #0
   259bc:	beq	2599c <__assert_fail@plt+0x13c9c>
   259c0:	cmp	r0, #0
   259c4:	beq	259a0 <__assert_fail@plt+0x13ca0>
   259c8:	add	r1, r1, #4
   259cc:	add	r2, r0, #4
   259d0:	mov	r0, r8
   259d4:	bl	2357c <__assert_fail@plt+0x1187c>
   259d8:	str	r0, [sp, #12]
   259dc:	cmp	r0, #0
   259e0:	bne	25a0c <__assert_fail@plt+0x13d0c>
   259e4:	mov	r0, r9
   259e8:	mov	r1, r7
   259ec:	mov	r2, r8
   259f0:	bl	24580 <__assert_fail@plt+0x12880>
   259f4:	str	r0, [r6]
   259f8:	ldr	r0, [sp, #8]
   259fc:	bl	1a1ec <__assert_fail@plt+0x84ec>
   25a00:	ldr	r0, [sp, #12]
   25a04:	cmp	r0, #0
   25a08:	beq	259a0 <__assert_fail@plt+0x13ca0>
   25a0c:	sub	sp, fp, #24
   25a10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25a14:	mov	r0, #0
   25a18:	sub	sp, fp, #24
   25a1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a24:	add	fp, sp, #28
   25a28:	sub	sp, sp, #12
   25a2c:	mov	sl, r2
   25a30:	mov	r8, r1
   25a34:	mov	r6, r0
   25a38:	ldr	r9, [r0, #84]	; 0x54
   25a3c:	mov	r0, #0
   25a40:	str	r0, [sp, #8]
   25a44:	ldr	r1, [r6, #100]	; 0x64
   25a48:	ldr	r7, [r1, r2, lsl #2]
   25a4c:	cmp	r7, #0
   25a50:	mov	r4, r7
   25a54:	addne	r4, r4, #4
   25a58:	ldr	r1, [r3, #4]
   25a5c:	cmp	r1, #0
   25a60:	beq	25af0 <__assert_fail@plt+0x13df0>
   25a64:	mov	r5, r3
   25a68:	cmp	r7, #0
   25a6c:	beq	25ac0 <__assert_fail@plt+0x13dc0>
   25a70:	mov	r0, r9
   25a74:	mov	r1, r5
   25a78:	mov	r2, r4
   25a7c:	bl	25c94 <__assert_fail@plt+0x13f94>
   25a80:	str	r0, [sp, #8]
   25a84:	cmp	r0, #0
   25a88:	bne	25b18 <__assert_fail@plt+0x13e18>
   25a8c:	ldr	r0, [r8, #20]
   25a90:	cmp	r0, #0
   25a94:	beq	25ac0 <__assert_fail@plt+0x13dc0>
   25a98:	ldr	r0, [r6, #116]	; 0x74
   25a9c:	stm	sp, {r0, sl}
   25aa0:	add	r3, r8, #16
   25aa4:	mov	r0, r9
   25aa8:	mov	r1, r5
   25aac:	mov	r2, r4
   25ab0:	bl	25d6c <__assert_fail@plt+0x1406c>
   25ab4:	str	r0, [sp, #8]
   25ab8:	cmp	r0, #0
   25abc:	bne	25b18 <__assert_fail@plt+0x13e18>
   25ac0:	add	r0, sp, #8
   25ac4:	mov	r1, r9
   25ac8:	mov	r2, r5
   25acc:	bl	24580 <__assert_fail@plt+0x12880>
   25ad0:	ldr	r1, [r8]
   25ad4:	str	r0, [r1, sl, lsl #2]
   25ad8:	ldr	r0, [sp, #8]
   25adc:	cmp	r0, #0
   25ae0:	bne	25b18 <__assert_fail@plt+0x13e18>
   25ae4:	cmp	r7, #0
   25ae8:	bne	25b00 <__assert_fail@plt+0x13e00>
   25aec:	b	25b14 <__assert_fail@plt+0x13e14>
   25af0:	ldr	r1, [r8]
   25af4:	str	r0, [r1, sl, lsl #2]
   25af8:	cmp	r7, #0
   25afc:	beq	25b14 <__assert_fail@plt+0x13e14>
   25b00:	ldr	r0, [r6, #100]	; 0x64
   25b04:	ldr	r0, [r0, sl, lsl #2]
   25b08:	ldrb	r0, [r0, #52]	; 0x34
   25b0c:	tst	r0, #64	; 0x40
   25b10:	bne	25b20 <__assert_fail@plt+0x13e20>
   25b14:	mov	r0, #0
   25b18:	sub	sp, fp, #28
   25b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b20:	mov	r0, r6
   25b24:	mov	r1, r8
   25b28:	mov	r2, sl
   25b2c:	mov	r3, r4
   25b30:	bl	25fb0 <__assert_fail@plt+0x142b0>
   25b34:	str	r0, [sp, #8]
   25b38:	cmp	r0, #0
   25b3c:	moveq	r0, #0
   25b40:	sub	sp, fp, #28
   25b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b4c:	add	fp, sp, #28
   25b50:	sub	sp, sp, #20
   25b54:	str	r3, [sp, #12]
   25b58:	mov	sl, r0
   25b5c:	ldr	r0, [r0, #100]	; 0x64
   25b60:	ldr	r7, [r0, r2, lsl #2]
   25b64:	ldr	r0, [r7, #20]
   25b68:	cmp	r0, #1
   25b6c:	blt	25c7c <__assert_fail@plt+0x13f7c>
   25b70:	mov	r5, r2
   25b74:	mov	r6, r1
   25b78:	ldr	r8, [sl, #84]	; 0x54
   25b7c:	add	r0, r1, #16
   25b80:	str	r0, [sp, #8]
   25b84:	add	r0, r2, #1
   25b88:	str	r0, [sp, #16]
   25b8c:	mov	r9, #0
   25b90:	b	25bb8 <__assert_fail@plt+0x13eb8>
   25b94:	ldr	r0, [sp, #12]
   25b98:	mov	r1, r4
   25b9c:	bl	20ecc <__assert_fail@plt+0xf1cc>
   25ba0:	cmp	r0, #0
   25ba4:	beq	25c88 <__assert_fail@plt+0x13f88>
   25ba8:	add	r9, r9, #1
   25bac:	ldr	r0, [r7, #20]
   25bb0:	cmp	r9, r0
   25bb4:	bge	25c7c <__assert_fail@plt+0x13f7c>
   25bb8:	ldr	r0, [r7, #24]
   25bbc:	ldr	r4, [r0, r9, lsl #2]
   25bc0:	ldr	r0, [r8]
   25bc4:	add	r0, r0, r4, lsl #3
   25bc8:	ldrb	r0, [r0, #6]
   25bcc:	tst	r0, #16
   25bd0:	beq	25bf8 <__assert_fail@plt+0x13ef8>
   25bd4:	ldr	r0, [r6, #12]
   25bd8:	str	r0, [sp]
   25bdc:	mov	r0, sl
   25be0:	mov	r1, r6
   25be4:	mov	r2, r4
   25be8:	mov	r3, r5
   25bec:	bl	269b0 <__assert_fail@plt+0x14cb0>
   25bf0:	cmp	r0, #0
   25bf4:	bne	25c48 <__assert_fail@plt+0x13f48>
   25bf8:	ldr	r0, [r8]
   25bfc:	add	r1, r0, r4, lsl #3
   25c00:	mov	r0, sl
   25c04:	mov	r2, r5
   25c08:	bl	24a6c <__assert_fail@plt+0x12d6c>
   25c0c:	cmp	r0, #0
   25c10:	beq	25ba8 <__assert_fail@plt+0x13ea8>
   25c14:	ldr	r0, [r6]
   25c18:	ldr	r1, [sp, #16]
   25c1c:	ldr	r0, [r0, r1, lsl #2]
   25c20:	cmp	r0, #0
   25c24:	beq	25ba8 <__assert_fail@plt+0x13ea8>
   25c28:	ldr	r1, [r8, #12]
   25c2c:	ldr	r1, [r1, r4, lsl #2]
   25c30:	add	r0, r0, #4
   25c34:	bl	21134 <__assert_fail@plt+0xf434>
   25c38:	mov	r1, r0
   25c3c:	mov	r0, #1
   25c40:	cmp	r1, #0
   25c44:	beq	25ba8 <__assert_fail@plt+0x13ea8>
   25c48:	ldr	r1, [r6, #20]
   25c4c:	cmp	r1, #0
   25c50:	beq	25b94 <__assert_fail@plt+0x13e94>
   25c54:	ldr	r1, [r8, #12]
   25c58:	ldr	r2, [r1, r4, lsl #2]
   25c5c:	stm	sp, {r4, r5}
   25c60:	add	r3, r0, r5
   25c64:	mov	r0, sl
   25c68:	ldr	r1, [sp, #8]
   25c6c:	bl	26644 <__assert_fail@plt+0x14944>
   25c70:	cmp	r0, #0
   25c74:	beq	25b94 <__assert_fail@plt+0x13e94>
   25c78:	b	25ba8 <__assert_fail@plt+0x13ea8>
   25c7c:	mov	r0, #0
   25c80:	sub	sp, fp, #28
   25c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c88:	mov	r0, #12
   25c8c:	sub	sp, fp, #28
   25c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25c98:	add	fp, sp, #24
   25c9c:	sub	sp, sp, #8
   25ca0:	mov	r8, r2
   25ca4:	mov	r5, r1
   25ca8:	mov	r6, r0
   25cac:	mov	r0, #0
   25cb0:	str	r0, [sp, #4]
   25cb4:	add	r0, sp, #4
   25cb8:	mov	r1, r6
   25cbc:	mov	r2, r5
   25cc0:	bl	24580 <__assert_fail@plt+0x12880>
   25cc4:	ldr	r9, [sp, #4]
   25cc8:	cmp	r9, #0
   25ccc:	bne	25d58 <__assert_fail@plt+0x14058>
   25cd0:	mov	r7, r0
   25cd4:	ldr	r0, [r7, #28]!
   25cd8:	cmp	r0, #0
   25cdc:	bne	25d44 <__assert_fail@plt+0x14044>
   25ce0:	ldr	r1, [r5, #4]
   25ce4:	mov	r0, r7
   25ce8:	bl	20a28 <__assert_fail@plt+0xed28>
   25cec:	str	r0, [sp, #4]
   25cf0:	mov	r9, #12
   25cf4:	cmp	r0, #0
   25cf8:	bne	25d58 <__assert_fail@plt+0x14058>
   25cfc:	ldr	r0, [r5, #4]
   25d00:	cmp	r0, #1
   25d04:	blt	25d44 <__assert_fail@plt+0x14044>
   25d08:	mov	r4, #0
   25d0c:	ldr	r0, [r5, #8]
   25d10:	ldr	r0, [r0, r4, lsl #2]
   25d14:	add	r0, r0, r0, lsl #1
   25d18:	ldr	r1, [r6, #28]
   25d1c:	add	r1, r1, r0, lsl #2
   25d20:	mov	r0, r7
   25d24:	bl	20cb4 <__assert_fail@plt+0xefb4>
   25d28:	cmp	r0, #0
   25d2c:	bne	25d64 <__assert_fail@plt+0x14064>
   25d30:	add	r4, r4, #1
   25d34:	ldr	r1, [r5, #4]
   25d38:	cmp	r4, r1
   25d3c:	blt	25d0c <__assert_fail@plt+0x1400c>
   25d40:	str	r0, [sp, #4]
   25d44:	mov	r0, r5
   25d48:	mov	r1, r8
   25d4c:	mov	r2, r7
   25d50:	bl	262a0 <__assert_fail@plt+0x145a0>
   25d54:	mov	r9, r0
   25d58:	mov	r0, r9
   25d5c:	sub	sp, fp, #24
   25d60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25d64:	str	r0, [sp, #4]
   25d68:	b	25d58 <__assert_fail@plt+0x14058>
   25d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d70:	add	fp, sp, #28
   25d74:	sub	sp, sp, #12
   25d78:	str	r2, [sp, #4]
   25d7c:	mov	ip, r0
   25d80:	ldr	r0, [r3, #4]
   25d84:	cmp	r0, #1
   25d88:	blt	25fa4 <__assert_fail@plt+0x142a4>
   25d8c:	mov	r9, r1
   25d90:	mov	r8, #0
   25d94:	str	ip, [sp]
   25d98:	str	r3, [sp, #8]
   25d9c:	b	25db4 <__assert_fail@plt+0x140b4>
   25da0:	add	r8, r8, #1
   25da4:	ldr	r3, [sp, #8]
   25da8:	ldr	r0, [r3, #4]
   25dac:	cmp	r8, r0
   25db0:	bge	25fa4 <__assert_fail@plt+0x142a4>
   25db4:	ldr	r0, [r3, #8]
   25db8:	ldr	r0, [r0, r8, lsl #2]
   25dbc:	add	r0, r0, r0, lsl #1
   25dc0:	ldr	r1, [fp, #8]
   25dc4:	add	r1, r1, r0, lsl #3
   25dc8:	ldr	r2, [r1, #8]
   25dcc:	ldr	r3, [fp, #12]
   25dd0:	cmp	r2, r3
   25dd4:	bge	25da0 <__assert_fail@plt+0x140a0>
   25dd8:	ldr	r1, [r1, #4]
   25ddc:	ldr	r2, [fp, #12]
   25de0:	cmp	r1, r2
   25de4:	blt	25da0 <__assert_fail@plt+0x140a0>
   25de8:	ldr	r1, [fp, #8]
   25dec:	ldr	r2, [r1, r0, lsl #3]!
   25df0:	ldr	r0, [ip]
   25df4:	ldr	sl, [r0, r2, lsl #3]
   25df8:	ldr	r1, [r1, #12]
   25dfc:	ldr	r2, [fp, #12]
   25e00:	cmp	r1, r2
   25e04:	bne	25e6c <__assert_fail@plt+0x1416c>
   25e08:	ldr	r1, [r9, #4]
   25e0c:	cmp	r1, #1
   25e10:	blt	25da0 <__assert_fail@plt+0x140a0>
   25e14:	ldmib	r9, {r2, r3}
   25e18:	mvn	r6, #0
   25e1c:	mov	r5, #0
   25e20:	mvn	r1, #0
   25e24:	b	25e40 <__assert_fail@plt+0x14140>
   25e28:	ldr	r4, [r0, r7, lsl #3]
   25e2c:	cmp	sl, r4
   25e30:	moveq	r6, r7
   25e34:	add	r5, r5, #1
   25e38:	cmp	r5, r2
   25e3c:	bge	25edc <__assert_fail@plt+0x141dc>
   25e40:	ldr	r7, [r3, r5, lsl #2]
   25e44:	add	r4, r0, r7, lsl #3
   25e48:	ldrb	r4, [r4, #4]
   25e4c:	cmp	r4, #9
   25e50:	beq	25e28 <__assert_fail@plt+0x14128>
   25e54:	cmp	r4, #8
   25e58:	bne	25e34 <__assert_fail@plt+0x14134>
   25e5c:	ldr	r4, [r0, r7, lsl #3]
   25e60:	cmp	sl, r4
   25e64:	moveq	r1, r7
   25e68:	b	25e34 <__assert_fail@plt+0x14134>
   25e6c:	ldr	r0, [r9, #4]
   25e70:	cmp	r0, #1
   25e74:	blt	25da0 <__assert_fail@plt+0x140a0>
   25e78:	mov	r5, #0
   25e7c:	b	25e90 <__assert_fail@plt+0x14190>
   25e80:	ldr	r0, [r9, #4]
   25e84:	add	r5, r5, #1
   25e88:	cmp	r5, r0
   25e8c:	bge	25da0 <__assert_fail@plt+0x140a0>
   25e90:	ldr	r0, [r9, #8]
   25e94:	ldr	r1, [r0, r5, lsl #2]
   25e98:	ldr	r0, [ip]
   25e9c:	add	r2, r0, r1, lsl #3
   25ea0:	ldrb	r2, [r2, #4]
   25ea4:	orr	r2, r2, #1
   25ea8:	cmp	r2, #9
   25eac:	bne	25e80 <__assert_fail@plt+0x14180>
   25eb0:	ldr	r0, [r0, r1, lsl #3]
   25eb4:	cmp	sl, r0
   25eb8:	bne	25e80 <__assert_fail@plt+0x14180>
   25ebc:	mov	r0, ip
   25ec0:	mov	r2, r9
   25ec4:	ldr	r3, [sp, #4]
   25ec8:	bl	26490 <__assert_fail@plt+0x14790>
   25ecc:	ldr	ip, [sp]
   25ed0:	cmp	r0, #0
   25ed4:	beq	25e80 <__assert_fail@plt+0x14180>
   25ed8:	b	25fa8 <__assert_fail@plt+0x142a8>
   25edc:	cmp	r1, #0
   25ee0:	bmi	25f00 <__assert_fail@plt+0x14200>
   25ee4:	mov	r0, ip
   25ee8:	mov	r2, r9
   25eec:	ldr	r3, [sp, #4]
   25ef0:	bl	26490 <__assert_fail@plt+0x14790>
   25ef4:	ldr	ip, [sp]
   25ef8:	cmp	r0, #0
   25efc:	bne	25fa8 <__assert_fail@plt+0x142a8>
   25f00:	cmp	r6, #0
   25f04:	bmi	25da0 <__assert_fail@plt+0x140a0>
   25f08:	ldr	r0, [r9, #4]
   25f0c:	cmp	r0, #1
   25f10:	blt	25da0 <__assert_fail@plt+0x140a0>
   25f14:	mov	sl, #0
   25f18:	b	25f34 <__assert_fail@plt+0x14234>
   25f1c:	mov	r6, r5
   25f20:	mov	ip, r7
   25f24:	ldr	r0, [r9, #4]
   25f28:	add	sl, sl, #1
   25f2c:	cmp	sl, r0
   25f30:	bge	25da0 <__assert_fail@plt+0x140a0>
   25f34:	ldr	r0, [r9, #8]
   25f38:	ldr	r4, [r0, sl, lsl #2]
   25f3c:	add	r5, r4, r4, lsl #1
   25f40:	ldr	r0, [ip, #28]
   25f44:	add	r0, r0, r5, lsl #2
   25f48:	mov	r1, r6
   25f4c:	mov	r7, ip
   25f50:	bl	21134 <__assert_fail@plt+0xf434>
   25f54:	cmp	r0, #0
   25f58:	bne	25f20 <__assert_fail@plt+0x14220>
   25f5c:	ldr	r0, [r7, #24]
   25f60:	add	r0, r0, r5, lsl #2
   25f64:	mov	r5, r6
   25f68:	mov	r1, r6
   25f6c:	bl	21134 <__assert_fail@plt+0xf434>
   25f70:	cmp	r0, #0
   25f74:	bne	25f1c <__assert_fail@plt+0x1421c>
   25f78:	mov	r0, r7
   25f7c:	mov	r1, r4
   25f80:	mov	r2, r9
   25f84:	ldr	r3, [sp, #4]
   25f88:	bl	26490 <__assert_fail@plt+0x14790>
   25f8c:	cmp	r0, #0
   25f90:	bne	25fa8 <__assert_fail@plt+0x142a8>
   25f94:	sub	sl, sl, #1
   25f98:	mov	r6, r5
   25f9c:	ldr	ip, [sp]
   25fa0:	b	25f24 <__assert_fail@plt+0x14224>
   25fa4:	mov	r0, #0
   25fa8:	sub	sp, fp, #28
   25fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25fb4:	add	fp, sp, #28
   25fb8:	sub	sp, sp, #84	; 0x54
   25fbc:	mov	r4, r3
   25fc0:	mov	r7, r2
   25fc4:	str	r1, [sp, #52]	; 0x34
   25fc8:	ldr	r1, [r0, #84]	; 0x54
   25fcc:	str	r1, [sp, #48]	; 0x30
   25fd0:	str	r0, [sp, #44]	; 0x2c
   25fd4:	mov	r1, r2
   25fd8:	bl	237b0 <__assert_fail@plt+0x11ab0>
   25fdc:	str	r0, [sp, #20]
   25fe0:	mov	sl, #0
   25fe4:	cmn	r0, #1
   25fe8:	beq	26284 <__assert_fail@plt+0x14584>
   25fec:	str	sl, [sp, #56]	; 0x38
   25ff0:	str	r4, [sp, #24]
   25ff4:	ldr	r0, [r4, #4]
   25ff8:	cmp	r0, #1
   25ffc:	blt	26284 <__assert_fail@plt+0x14584>
   26000:	add	r0, r7, #1
   26004:	str	r0, [sp, #8]
   26008:	add	r0, sp, #56	; 0x38
   2600c:	add	r0, r0, #16
   26010:	str	r0, [sp, #28]
   26014:	ldr	r2, [sp, #52]	; 0x34
   26018:	add	r0, r2, #16
   2601c:	str	r0, [sp, #32]
   26020:	ldr	r0, [sp, #20]
   26024:	add	r0, r0, r0, lsl #1
   26028:	str	r0, [sp, #16]
   2602c:	lsl	r0, r0, #3
   26030:	str	r0, [sp, #12]
   26034:	mov	r1, #0
   26038:	ldr	sl, [sp, #24]
   2603c:	ldr	r3, [sp, #48]	; 0x30
   26040:	str	r7, [sp, #40]	; 0x28
   26044:	b	2605c <__assert_fail@plt+0x1435c>
   26048:	ldr	r1, [sp, #36]	; 0x24
   2604c:	add	r1, r1, #1
   26050:	ldr	r0, [sl, #4]
   26054:	cmp	r1, r0
   26058:	bge	2626c <__assert_fail@plt+0x1456c>
   2605c:	ldr	r0, [sl, #8]
   26060:	str	r1, [sp, #36]	; 0x24
   26064:	ldr	r9, [r0, r1, lsl #2]
   26068:	ldr	r0, [r3]
   2606c:	add	r0, r0, r9, lsl #3
   26070:	ldrb	r0, [r0, #4]
   26074:	ldr	r1, [r2, #8]
   26078:	cmp	r9, r1
   2607c:	bne	26098 <__assert_fail@plt+0x14398>
   26080:	cmp	r0, #4
   26084:	bne	26048 <__assert_fail@plt+0x14348>
   26088:	ldr	r0, [r2, #12]
   2608c:	cmp	r0, r7
   26090:	bne	260a0 <__assert_fail@plt+0x143a0>
   26094:	b	26048 <__assert_fail@plt+0x14348>
   26098:	cmp	r0, #4
   2609c:	bne	26048 <__assert_fail@plt+0x14348>
   260a0:	ldr	r0, [sp, #44]	; 0x2c
   260a4:	ldr	r0, [r0, #116]	; 0x74
   260a8:	ldr	r1, [sp, #16]
   260ac:	add	r5, r0, r1, lsl #3
   260b0:	ldr	r4, [sp, #12]
   260b4:	ldr	r8, [sp, #20]
   260b8:	b	260d8 <__assert_fail@plt+0x143d8>
   260bc:	mov	r0, r5
   260c0:	add	r4, r4, #24
   260c4:	add	r5, r0, #24
   260c8:	add	r8, r8, #1
   260cc:	ldrb	r0, [r0, #20]
   260d0:	cmp	r0, #0
   260d4:	beq	26048 <__assert_fail@plt+0x14348>
   260d8:	ldr	r0, [r5]
   260dc:	cmp	r0, r9
   260e0:	bne	260bc <__assert_fail@plt+0x143bc>
   260e4:	ldr	r0, [r5, #8]
   260e8:	ldr	r1, [r5, #12]
   260ec:	subs	r0, r1, r0
   260f0:	add	r6, r0, r7
   260f4:	beq	26104 <__assert_fail@plt+0x14404>
   260f8:	ldr	r0, [r3, #12]
   260fc:	add	r0, r0, r9, lsl #2
   26100:	b	26114 <__assert_fail@plt+0x14414>
   26104:	ldr	r0, [r3, #20]
   26108:	add	r1, r9, r9, lsl #1
   2610c:	add	r0, r0, r1, lsl #2
   26110:	ldr	r0, [r0, #8]
   26114:	ldr	r1, [r2, #12]
   26118:	cmp	r6, r1
   2611c:	bgt	260bc <__assert_fail@plt+0x143bc>
   26120:	ldr	r1, [r2]
   26124:	ldr	r1, [r1, r6, lsl #2]
   26128:	cmp	r1, #0
   2612c:	beq	260bc <__assert_fail@plt+0x143bc>
   26130:	ldr	r7, [r0]
   26134:	add	r0, r1, #4
   26138:	mov	r1, r7
   2613c:	bl	21134 <__assert_fail@plt+0xf434>
   26140:	cmp	r0, #0
   26144:	beq	26258 <__assert_fail@plt+0x14558>
   26148:	str	r7, [sp]
   2614c:	str	r6, [sp, #4]
   26150:	ldr	r0, [sp, #44]	; 0x2c
   26154:	ldr	r1, [sp, #32]
   26158:	mov	r2, r9
   2615c:	ldr	r7, [sp, #40]	; 0x28
   26160:	mov	r3, r7
   26164:	bl	26644 <__assert_fail@plt+0x14944>
   26168:	cmp	r0, #0
   2616c:	mov	r0, r5
   26170:	ldr	r2, [sp, #52]	; 0x34
   26174:	ldr	r3, [sp, #48]	; 0x30
   26178:	bne	260c0 <__assert_fail@plt+0x143c0>
   2617c:	ldr	r0, [sp, #56]	; 0x38
   26180:	cmp	r0, #0
   26184:	bne	261b8 <__assert_fail@plt+0x144b8>
   26188:	mov	r0, r2
   2618c:	mov	r1, #12
   26190:	vld1.32	{d16-d17}, [r0], r1
   26194:	vld1.32	{d18-d19}, [r0]
   26198:	add	r0, sp, #56	; 0x38
   2619c:	vst1.64	{d16-d17}, [r0], r1
   261a0:	vst1.32	{d18-d19}, [r0]
   261a4:	ldr	r0, [sp, #28]
   261a8:	ldr	r1, [sp, #32]
   261ac:	bl	210b8 <__assert_fail@plt+0xf3b8>
   261b0:	cmp	r0, #0
   261b4:	bne	26290 <__assert_fail@plt+0x14590>
   261b8:	str	r7, [sp, #68]	; 0x44
   261bc:	str	r9, [sp, #64]	; 0x40
   261c0:	ldr	r0, [sp, #28]
   261c4:	mov	r1, r8
   261c8:	bl	20ecc <__assert_fail@plt+0xf1cc>
   261cc:	cmp	r0, #0
   261d0:	beq	26298 <__assert_fail@plt+0x14598>
   261d4:	mov	r0, r7
   261d8:	ldr	r7, [sp, #56]	; 0x38
   261dc:	ldr	r5, [r7, r0, lsl #2]
   261e0:	ldr	r0, [sp, #44]	; 0x2c
   261e4:	add	r1, sp, #56	; 0x38
   261e8:	bl	25854 <__assert_fail@plt+0x13b54>
   261ec:	cmp	r0, #0
   261f0:	bne	26290 <__assert_fail@plt+0x14590>
   261f4:	ldr	r0, [sp, #52]	; 0x34
   261f8:	ldr	r1, [r0, #4]
   261fc:	cmp	r1, #0
   26200:	beq	2621c <__assert_fail@plt+0x1451c>
   26204:	ldr	r0, [sp, #48]	; 0x30
   26208:	mov	r2, r7
   2620c:	ldr	r3, [sp, #8]
   26210:	bl	2596c <__assert_fail@plt+0x13c6c>
   26214:	cmp	r0, #0
   26218:	bne	26290 <__assert_fail@plt+0x14590>
   2621c:	ldr	r0, [sp, #40]	; 0x28
   26220:	str	r5, [r7, r0, lsl #2]
   26224:	mov	r7, r0
   26228:	ldr	r5, [sp, #28]
   2622c:	mov	r0, r5
   26230:	mov	r1, r8
   26234:	bl	21134 <__assert_fail@plt+0xf434>
   26238:	sub	r1, r0, #1
   2623c:	mov	r0, r5
   26240:	bl	21548 <__assert_fail@plt+0xf848>
   26244:	ldr	r0, [sp, #44]	; 0x2c
   26248:	ldr	r0, [r0, #116]	; 0x74
   2624c:	add	r0, r0, r4
   26250:	ldr	sl, [sp, #24]
   26254:	b	26260 <__assert_fail@plt+0x14560>
   26258:	mov	r0, r5
   2625c:	ldr	r7, [sp, #40]	; 0x28
   26260:	ldr	r2, [sp, #52]	; 0x34
   26264:	ldr	r3, [sp, #48]	; 0x30
   26268:	b	260c0 <__assert_fail@plt+0x143c0>
   2626c:	mov	sl, #0
   26270:	ldr	r0, [sp, #56]	; 0x38
   26274:	cmp	r0, #0
   26278:	beq	26284 <__assert_fail@plt+0x14584>
   2627c:	ldr	r0, [sp, #80]	; 0x50
   26280:	bl	1a1ec <__assert_fail@plt+0x84ec>
   26284:	mov	r0, sl
   26288:	sub	sp, fp, #28
   2628c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26290:	mov	sl, r0
   26294:	b	26270 <__assert_fail@plt+0x14570>
   26298:	mov	sl, #12
   2629c:	b	26270 <__assert_fail@plt+0x14570>
   262a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   262a4:	add	fp, sp, #28
   262a8:	sub	sp, sp, #4
   262ac:	mov	r9, r2
   262b0:	mov	r8, r0
   262b4:	ldr	r2, [r1, #4]
   262b8:	mov	r0, #0
   262bc:	cmp	r2, #0
   262c0:	beq	2647c <__assert_fail@plt+0x1477c>
   262c4:	mov	sl, r1
   262c8:	ldr	r1, [r9, #4]
   262cc:	cmp	r1, #0
   262d0:	beq	2647c <__assert_fail@plt+0x1477c>
   262d4:	add	r0, r1, r2
   262d8:	ldm	r8, {r1, r2}
   262dc:	add	r2, r2, r0
   262e0:	cmp	r2, r1
   262e4:	ble	26308 <__assert_fail@plt+0x14608>
   262e8:	add	r4, r1, r0
   262ec:	lsl	r1, r4, #2
   262f0:	ldr	r0, [r8, #8]
   262f4:	bl	1a350 <__assert_fail@plt+0x8650>
   262f8:	cmp	r0, #0
   262fc:	beq	26484 <__assert_fail@plt+0x14784>
   26300:	str	r4, [r8]
   26304:	str	r0, [r8, #8]
   26308:	ldr	r1, [r8, #4]
   2630c:	ldr	r6, [sl, #4]
   26310:	ldr	r0, [sl, #8]
   26314:	add	r3, r6, r1
   26318:	ldr	r5, [r9, #4]
   2631c:	ldr	r2, [r9, #8]
   26320:	add	ip, r3, r5
   26324:	sub	r7, r1, #1
   26328:	sub	r3, r5, #1
   2632c:	sub	r4, r6, #1
   26330:	ldr	r1, [r2, r3, lsl #2]
   26334:	ldr	r6, [r0, r4, lsl #2]
   26338:	cmp	r6, r1
   2633c:	beq	26358 <__assert_fail@plt+0x14658>
   26340:	blt	26388 <__assert_fail@plt+0x14688>
   26344:	sub	r1, r4, #1
   26348:	cmp	r4, #0
   2634c:	mov	r4, r1
   26350:	bgt	26330 <__assert_fail@plt+0x14630>
   26354:	b	263d8 <__assert_fail@plt+0x146d8>
   26358:	cmp	r7, #0
   2635c:	bmi	263b8 <__assert_fail@plt+0x146b8>
   26360:	ldr	r5, [r8, #8]
   26364:	mov	r1, r7
   26368:	ldr	r7, [r5, r1, lsl #2]
   2636c:	cmp	r7, r6
   26370:	ble	26394 <__assert_fail@plt+0x14694>
   26374:	sub	r7, r1, #1
   26378:	cmp	r1, #0
   2637c:	mov	r1, r7
   26380:	bgt	26368 <__assert_fail@plt+0x14668>
   26384:	b	263b8 <__assert_fail@plt+0x146b8>
   26388:	subs	r3, r3, #1
   2638c:	bge	26330 <__assert_fail@plt+0x14630>
   26390:	b	263d8 <__assert_fail@plt+0x146d8>
   26394:	ldr	r7, [r8, #8]
   26398:	ldr	r7, [r7, r1, lsl #2]
   2639c:	cmp	r7, r6
   263a0:	mov	r7, r1
   263a4:	bne	263b8 <__assert_fail@plt+0x146b8>
   263a8:	mov	r7, r1
   263ac:	cmp	r4, #1
   263b0:	bge	263cc <__assert_fail@plt+0x146cc>
   263b4:	b	263d8 <__assert_fail@plt+0x146d8>
   263b8:	ldr	r1, [r8, #8]
   263bc:	sub	ip, ip, #1
   263c0:	str	r6, [r1, ip, lsl #2]
   263c4:	cmp	r4, #1
   263c8:	blt	263d8 <__assert_fail@plt+0x146d8>
   263cc:	subs	r3, r3, #1
   263d0:	sub	r4, r4, #1
   263d4:	bge	26330 <__assert_fail@plt+0x14630>
   263d8:	ldr	r1, [sl, #4]
   263dc:	ldr	r7, [r8, #4]
   263e0:	add	r0, r7, r1
   263e4:	ldr	r3, [r9, #4]
   263e8:	add	r0, r0, r3
   263ec:	sub	r0, r0, #1
   263f0:	sub	r6, r0, ip
   263f4:	add	r2, r6, #1
   263f8:	add	r5, r2, r7
   263fc:	str	r5, [r8, #4]
   26400:	cmp	r7, #1
   26404:	blt	26468 <__assert_fail@plt+0x14768>
   26408:	cmp	r6, #0
   2640c:	bmi	26468 <__assert_fail@plt+0x14768>
   26410:	add	r3, r7, r3
   26414:	add	r1, r3, r1
   26418:	sub	r3, r1, ip
   2641c:	ldr	r1, [r8, #8]
   26420:	add	r3, r1, r3, lsl #2
   26424:	sub	r7, r7, #1
   26428:	ldr	r6, [r1, r7, lsl #2]
   2642c:	ldr	r5, [r1, r0, lsl #2]
   26430:	cmp	r5, r6
   26434:	bgt	26450 <__assert_fail@plt+0x14750>
   26438:	str	r6, [r3, r7, lsl #2]
   2643c:	sub	r6, r7, #1
   26440:	cmp	r7, #0
   26444:	mov	r7, r6
   26448:	bgt	26428 <__assert_fail@plt+0x14728>
   2644c:	b	26468 <__assert_fail@plt+0x14768>
   26450:	str	r5, [r3, r7, lsl #2]
   26454:	sub	r3, r3, #4
   26458:	subs	r2, r2, #1
   2645c:	sub	r0, r0, #1
   26460:	bne	26428 <__assert_fail@plt+0x14728>
   26464:	mov	r2, #0
   26468:	ldr	r0, [r8, #8]
   2646c:	add	r1, r0, ip, lsl #2
   26470:	lsl	r2, r2, #2
   26474:	bl	11928 <memcpy@plt>
   26478:	mov	r0, #0
   2647c:	sub	sp, fp, #28
   26480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26484:	mov	r0, #12
   26488:	sub	sp, fp, #28
   2648c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26494:	add	fp, sp, #28
   26498:	sub	sp, sp, #28
   2649c:	str	r3, [sp]
   264a0:	mov	r6, r1
   264a4:	str	r0, [sp, #12]
   264a8:	ldr	r0, [r0, #28]
   264ac:	mov	r4, #0
   264b0:	str	r4, [sp, #20]
   264b4:	str	r4, [sp, #16]
   264b8:	str	r4, [sp, #24]
   264bc:	add	r1, r1, r1, lsl #1
   264c0:	add	r1, r0, r1, lsl #2
   264c4:	mov	r8, r1
   264c8:	ldr	r0, [r8, #4]!
   264cc:	cmp	r0, #1
   264d0:	blt	26628 <__assert_fail@plt+0x14928>
   264d4:	str	r2, [sp, #4]
   264d8:	str	r1, [sp, #8]
   264dc:	add	sl, r1, #8
   264e0:	mov	r5, #0
   264e4:	b	2652c <__assert_fail@plt+0x1482c>
   264e8:	ldr	r0, [sp, #4]
   264ec:	mov	r1, r9
   264f0:	bl	21134 <__assert_fail@plt+0xf434>
   264f4:	cmp	r0, #0
   264f8:	beq	26590 <__assert_fail@plt+0x14890>
   264fc:	ldr	r0, [sp, #12]
   26500:	ldr	r0, [r0, #28]
   26504:	add	r2, r0, r7, lsl #2
   26508:	add	r0, sp, #16
   2650c:	ldr	r1, [sp]
   26510:	bl	262a0 <__assert_fail@plt+0x145a0>
   26514:	cmp	r0, #0
   26518:	bne	2663c <__assert_fail@plt+0x1493c>
   2651c:	add	r5, r5, #1
   26520:	ldr	r0, [r8]
   26524:	cmp	r5, r0
   26528:	bge	265c4 <__assert_fail@plt+0x148c4>
   2652c:	ldr	r0, [sl]
   26530:	ldr	r0, [r0, r5, lsl #2]
   26534:	cmp	r0, r6
   26538:	beq	2651c <__assert_fail@plt+0x1481c>
   2653c:	ldr	r1, [sp, #12]
   26540:	ldr	r1, [r1]
   26544:	add	r1, r1, r0, lsl #3
   26548:	ldrb	r1, [r1, #4]
   2654c:	tst	r1, #8
   26550:	beq	2651c <__assert_fail@plt+0x1481c>
   26554:	ldr	r1, [sp, #12]
   26558:	ldr	r1, [r1, #20]
   2655c:	add	r7, r0, r0, lsl #1
   26560:	add	r0, r1, r7, lsl #2
   26564:	ldr	r1, [r0, #4]
   26568:	ldr	r0, [r0, #8]
   2656c:	ldr	r9, [r0]
   26570:	mvn	r4, #0
   26574:	cmp	r1, #2
   26578:	ldrge	r4, [r0, #4]
   2657c:	ldr	r0, [sp, #8]
   26580:	mov	r1, r9
   26584:	bl	21134 <__assert_fail@plt+0xf434>
   26588:	cmp	r0, #0
   2658c:	beq	264e8 <__assert_fail@plt+0x147e8>
   26590:	cmp	r4, #1
   26594:	blt	2651c <__assert_fail@plt+0x1481c>
   26598:	ldr	r0, [sp, #8]
   2659c:	mov	r1, r4
   265a0:	bl	21134 <__assert_fail@plt+0xf434>
   265a4:	cmp	r0, #0
   265a8:	bne	2651c <__assert_fail@plt+0x1481c>
   265ac:	ldr	r0, [sp, #4]
   265b0:	mov	r1, r4
   265b4:	bl	21134 <__assert_fail@plt+0xf434>
   265b8:	cmp	r0, #0
   265bc:	bne	264fc <__assert_fail@plt+0x147fc>
   265c0:	b	2651c <__assert_fail@plt+0x1481c>
   265c4:	cmp	r0, #1
   265c8:	blt	26624 <__assert_fail@plt+0x14924>
   265cc:	mov	r6, #0
   265d0:	add	r4, sp, #16
   265d4:	ldr	r7, [sp, #4]
   265d8:	b	265ec <__assert_fail@plt+0x148ec>
   265dc:	add	r6, r6, #1
   265e0:	ldr	r0, [r8]
   265e4:	cmp	r6, r0
   265e8:	bge	26624 <__assert_fail@plt+0x14924>
   265ec:	ldr	r0, [sl]
   265f0:	ldr	r5, [r0, r6, lsl #2]
   265f4:	mov	r0, r4
   265f8:	mov	r1, r5
   265fc:	bl	21134 <__assert_fail@plt+0xf434>
   26600:	cmp	r0, #0
   26604:	bne	265dc <__assert_fail@plt+0x148dc>
   26608:	mov	r0, r7
   2660c:	mov	r1, r5
   26610:	bl	21134 <__assert_fail@plt+0xf434>
   26614:	sub	r1, r0, #1
   26618:	mov	r0, r7
   2661c:	bl	21548 <__assert_fail@plt+0xf848>
   26620:	b	265dc <__assert_fail@plt+0x148dc>
   26624:	mov	r4, #0
   26628:	ldr	r0, [sp, #24]
   2662c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   26630:	mov	r0, r4
   26634:	sub	sp, fp, #28
   26638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2663c:	mov	r4, r0
   26640:	b	26628 <__assert_fail@plt+0x14928>
   26644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26648:	add	fp, sp, #28
   2664c:	sub	sp, sp, #20
   26650:	str	r2, [sp, #12]
   26654:	mov	r6, r1
   26658:	mov	r7, r0
   2665c:	str	r3, [sp, #16]
   26660:	mov	r1, r3
   26664:	bl	237b0 <__assert_fail@plt+0x11ab0>
   26668:	str	r0, [sp, #8]
   2666c:	ldr	r1, [fp, #12]
   26670:	mov	r0, r7
   26674:	bl	237b0 <__assert_fail@plt+0x11ab0>
   26678:	mov	r4, r0
   2667c:	ldr	r0, [r6, #4]
   26680:	cmp	r0, #1
   26684:	blt	26708 <__assert_fail@plt+0x14a08>
   26688:	ldr	sl, [r7, #84]	; 0x54
   2668c:	mov	r5, #0
   26690:	ldr	r0, [r6, #8]
   26694:	ldr	r1, [r0, r5, lsl #2]
   26698:	add	r0, r1, r1, lsl #1
   2669c:	ldr	r2, [r7, #116]	; 0x74
   266a0:	ldr	r0, [r2, r0, lsl #3]
   266a4:	ldr	r2, [sl]
   266a8:	ldr	r9, [r2, r0, lsl #3]
   266ac:	ldr	r0, [sp, #16]
   266b0:	str	r0, [sp]
   266b4:	ldr	r0, [sp, #8]
   266b8:	str	r0, [sp, #4]
   266bc:	mov	r0, r7
   266c0:	mov	r2, r9
   266c4:	ldr	r3, [sp, #12]
   266c8:	bl	26720 <__assert_fail@plt+0x14a20>
   266cc:	mov	r8, r0
   266d0:	ldr	r0, [r6, #8]
   266d4:	ldr	r1, [r0, r5, lsl #2]
   266d8:	ldr	r0, [fp, #12]
   266dc:	stm	sp, {r0, r4}
   266e0:	mov	r0, r7
   266e4:	mov	r2, r9
   266e8:	ldr	r3, [fp, #8]
   266ec:	bl	26720 <__assert_fail@plt+0x14a20>
   266f0:	cmp	r0, r8
   266f4:	bne	26714 <__assert_fail@plt+0x14a14>
   266f8:	add	r5, r5, #1
   266fc:	ldr	r0, [r6, #4]
   26700:	cmp	r5, r0
   26704:	blt	26690 <__assert_fail@plt+0x14990>
   26708:	mov	r0, #0
   2670c:	sub	sp, fp, #28
   26710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26714:	mov	r0, #1
   26718:	sub	sp, fp, #28
   2671c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26720:	push	{r4, r5, fp, lr}
   26724:	add	fp, sp, #8
   26728:	sub	sp, sp, #8
   2672c:	ldr	r4, [r0, #116]	; 0x74
   26730:	add	r1, r1, r1, lsl #1
   26734:	add	r4, r4, r1, lsl #3
   26738:	ldr	ip, [r4, #8]
   2673c:	mvn	r1, #0
   26740:	ldr	lr, [fp, #8]
   26744:	cmp	ip, lr
   26748:	bgt	26798 <__assert_fail@plt+0x14a98>
   2674c:	ldr	r4, [r4, #12]
   26750:	mov	r1, #1
   26754:	cmp	r4, lr
   26758:	blt	26798 <__assert_fail@plt+0x14a98>
   2675c:	sub	r1, r4, lr
   26760:	clz	r1, r1
   26764:	lsr	r4, r1, #5
   26768:	mov	r5, #1
   2676c:	lsl	r1, r4, #1
   26770:	cmp	ip, lr
   26774:	orreq	r1, r5, r4, lsl #1
   26778:	cmp	r1, #0
   2677c:	beq	26794 <__assert_fail@plt+0x14a94>
   26780:	ldr	r5, [fp, #12]
   26784:	str	r5, [sp]
   26788:	bl	267a4 <__assert_fail@plt+0x14aa4>
   2678c:	sub	sp, fp, #8
   26790:	pop	{r4, r5, fp, pc}
   26794:	mov	r1, #0
   26798:	mov	r0, r1
   2679c:	sub	sp, fp, #8
   267a0:	pop	{r4, r5, fp, pc}
   267a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267a8:	add	fp, sp, #28
   267ac:	sub	sp, sp, #36	; 0x24
   267b0:	mov	r6, r2
   267b4:	mov	r5, r1
   267b8:	mov	r7, r0
   267bc:	ldr	r4, [r0, #84]	; 0x54
   267c0:	ldr	r0, [r4, #24]
   267c4:	str	r3, [sp, #32]
   267c8:	add	r1, r3, r3, lsl #1
   267cc:	add	r0, r0, r1, lsl #2
   267d0:	mov	r2, r0
   267d4:	ldr	r1, [r2, #4]!
   267d8:	str	r2, [sp, #24]
   267dc:	cmp	r1, #1
   267e0:	blt	26988 <__assert_fail@plt+0x14c88>
   267e4:	mov	r1, #1
   267e8:	mvn	r2, r1, lsl r6
   267ec:	str	r2, [sp, #16]
   267f0:	lsl	r1, r1, r6
   267f4:	str	r1, [sp, #20]
   267f8:	mov	sl, #0
   267fc:	cmp	r6, #31
   26800:	mov	r1, #0
   26804:	movwgt	r1, #1
   26808:	and	r2, r5, #2
   2680c:	str	r2, [sp, #8]
   26810:	orr	r1, r1, r2, lsr #1
   26814:	str	r1, [sp, #12]
   26818:	add	r0, r0, #8
   2681c:	str	r0, [sp, #28]
   26820:	and	r0, r5, #1
   26824:	str	r0, [sp, #4]
   26828:	b	26840 <__assert_fail@plt+0x14b40>
   2682c:	ldr	r0, [sp, #24]
   26830:	ldr	r0, [r0]
   26834:	add	sl, sl, #1
   26838:	cmp	sl, r0
   2683c:	bge	26988 <__assert_fail@plt+0x14c88>
   26840:	ldr	r0, [sp, #28]
   26844:	ldr	r0, [r0]
   26848:	ldr	r8, [r0, sl, lsl #2]
   2684c:	ldr	r0, [r4]
   26850:	add	r1, r0, r8, lsl #3
   26854:	ldrb	r1, [r1, #4]
   26858:	cmp	r1, #9
   2685c:	beq	26948 <__assert_fail@plt+0x14c48>
   26860:	cmp	r1, #8
   26864:	beq	26964 <__assert_fail@plt+0x14c64>
   26868:	cmp	r1, #4
   2686c:	bne	2682c <__assert_fail@plt+0x14b2c>
   26870:	ldr	r0, [fp, #8]
   26874:	cmn	r0, #1
   26878:	beq	2682c <__assert_fail@plt+0x14b2c>
   2687c:	ldr	r0, [r7, #116]	; 0x74
   26880:	ldr	r1, [fp, #8]
   26884:	add	r1, r1, r1, lsl #1
   26888:	add	r0, r0, r1, lsl #3
   2688c:	add	r9, r0, #16
   26890:	b	268b4 <__assert_fail@plt+0x14bb4>
   26894:	ldr	r0, [r9]
   26898:	ldr	r1, [sp, #16]
   2689c:	and	r0, r0, r1
   268a0:	str	r0, [r9]
   268a4:	ldrb	r0, [r9, #4]
   268a8:	add	r9, r9, #24
   268ac:	cmp	r0, #0
   268b0:	beq	2682c <__assert_fail@plt+0x14b2c>
   268b4:	ldr	r0, [r9, #-16]
   268b8:	cmp	r0, r8
   268bc:	bne	268a4 <__assert_fail@plt+0x14ba4>
   268c0:	cmp	r6, #31
   268c4:	bgt	268d8 <__assert_fail@plt+0x14bd8>
   268c8:	ldr	r0, [r9]
   268cc:	ldr	r1, [sp, #20]
   268d0:	tst	r0, r1
   268d4:	beq	268a4 <__assert_fail@plt+0x14ba4>
   268d8:	ldr	r0, [r4, #20]
   268dc:	add	r1, r8, r8, lsl #1
   268e0:	add	r0, r0, r1, lsl #2
   268e4:	ldr	r0, [r0, #8]
   268e8:	ldr	r3, [r0]
   268ec:	ldr	r0, [sp, #32]
   268f0:	cmp	r3, r0
   268f4:	beq	26994 <__assert_fail@plt+0x14c94>
   268f8:	ldr	r0, [fp, #8]
   268fc:	str	r0, [sp]
   26900:	mov	r0, r7
   26904:	mov	r1, r5
   26908:	mov	r2, r6
   2690c:	bl	267a4 <__assert_fail@plt+0x14aa4>
   26910:	cmp	r0, #0
   26914:	beq	2692c <__assert_fail@plt+0x14c2c>
   26918:	cmn	r0, #1
   2691c:	beq	269a8 <__assert_fail@plt+0x14ca8>
   26920:	cmp	r6, #31
   26924:	ble	26894 <__assert_fail@plt+0x14b94>
   26928:	b	268a4 <__assert_fail@plt+0x14ba4>
   2692c:	ldr	r0, [sp, #12]
   26930:	cmp	r0, #0
   26934:	beq	26894 <__assert_fail@plt+0x14b94>
   26938:	ldr	r0, [sp, #8]
   2693c:	cmp	r0, #0
   26940:	beq	268a4 <__assert_fail@plt+0x14ba4>
   26944:	b	269a4 <__assert_fail@plt+0x14ca4>
   26948:	ldr	r1, [sp, #8]
   2694c:	cmp	r1, #0
   26950:	beq	2682c <__assert_fail@plt+0x14b2c>
   26954:	ldr	r0, [r0, r8, lsl #3]
   26958:	cmp	r0, r6
   2695c:	bne	2682c <__assert_fail@plt+0x14b2c>
   26960:	b	269a4 <__assert_fail@plt+0x14ca4>
   26964:	ldr	r1, [sp, #4]
   26968:	cmp	r1, #0
   2696c:	beq	2682c <__assert_fail@plt+0x14b2c>
   26970:	ldr	r0, [r0, r8, lsl #3]
   26974:	cmp	r0, r6
   26978:	bne	2682c <__assert_fail@plt+0x14b2c>
   2697c:	mvn	r0, #0
   26980:	sub	sp, fp, #28
   26984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26988:	ubfx	r0, r5, #1, #1
   2698c:	sub	sp, fp, #28
   26990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26994:	ldr	r0, [sp, #4]
   26998:	rsb	r0, r0, #0
   2699c:	sub	sp, fp, #28
   269a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269a4:	mov	r0, #0
   269a8:	sub	sp, fp, #28
   269ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   269b4:	add	fp, sp, #24
   269b8:	mov	r7, r3
   269bc:	mov	r5, r2
   269c0:	mov	r8, r1
   269c4:	mov	r2, r0
   269c8:	ldr	r6, [r0, #84]	; 0x54
   269cc:	mov	r0, r6
   269d0:	mov	r1, r5
   269d4:	bl	24790 <__assert_fail@plt+0x12a90>
   269d8:	mov	r4, r0
   269dc:	cmp	r0, #1
   269e0:	blt	26a1c <__assert_fail@plt+0x14d1c>
   269e4:	ldr	r1, [fp, #8]
   269e8:	add	r0, r4, r7
   269ec:	cmp	r0, r1
   269f0:	bgt	26a1c <__assert_fail@plt+0x14d1c>
   269f4:	ldr	r1, [r8]
   269f8:	ldr	r0, [r1, r0, lsl #2]
   269fc:	cmp	r0, #0
   26a00:	beq	26a24 <__assert_fail@plt+0x14d24>
   26a04:	ldr	r1, [r6, #12]
   26a08:	ldr	r1, [r1, r5, lsl #2]
   26a0c:	add	r0, r0, #4
   26a10:	bl	21134 <__assert_fail@plt+0xf434>
   26a14:	cmp	r0, #0
   26a18:	moveq	r4, #0
   26a1c:	mov	r0, r4
   26a20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26a24:	mov	r4, #0
   26a28:	mov	r0, r4
   26a2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26a30:	mov	r1, #16
   26a34:	mov	r2, #0
   26a38:	add	r3, r0, #12
   26a3c:	str	r2, [r0]
   26a40:	stmib	r0, {r1, r3}
   26a44:	bx	lr
   26a48:	push	{r4, sl, fp, lr}
   26a4c:	add	fp, sp, #8
   26a50:	mov	r4, r0
   26a54:	ldr	r0, [r0]
   26a58:	cmp	r0, r1
   26a5c:	bcs	26a90 <__assert_fail@plt+0x14d90>
   26a60:	add	r2, r4, #12
   26a64:	mov	r0, r4
   26a68:	mov	r3, #8
   26a6c:	bl	28c68 <__assert_fail@plt+0x16f68>
   26a70:	mov	r1, r0
   26a74:	mov	r0, #1
   26a78:	cmp	r1, #0
   26a7c:	popne	{r4, sl, fp, pc}
   26a80:	mov	r0, r4
   26a84:	bl	26fa0 <__assert_fail@plt+0x152a0>
   26a88:	mov	r0, #0
   26a8c:	pop	{r4, sl, fp, pc}
   26a90:	str	r1, [r4]
   26a94:	mov	r0, #1
   26a98:	pop	{r4, sl, fp, pc}
   26a9c:	push	{r4, sl, fp, lr}
   26aa0:	add	fp, sp, #8
   26aa4:	mov	r4, r0
   26aa8:	bl	26fc8 <__assert_fail@plt+0x152c8>
   26aac:	mov	r0, r4
   26ab0:	pop	{r4, sl, fp, lr}
   26ab4:	b	26a30 <__assert_fail@plt+0x14d30>
   26ab8:	cmp	r0, #0
   26abc:	bxeq	lr
   26ac0:	push	{r4, r5, r6, sl, fp, lr}
   26ac4:	add	fp, sp, #16
   26ac8:	mov	r4, r0
   26acc:	ldr	r1, [r0]
   26ad0:	ldr	r0, [r0, #8]
   26ad4:	cmp	r1, #1
   26ad8:	blt	26b18 <__assert_fail@plt+0x14e18>
   26adc:	mov	r5, #0
   26ae0:	mov	r6, #0
   26ae4:	add	r0, r0, r5
   26ae8:	ldr	r0, [r0, #20]
   26aec:	bl	1a1ec <__assert_fail@plt+0x84ec>
   26af0:	ldr	r0, [r4, #8]
   26af4:	add	r0, r0, r5
   26af8:	ldr	r0, [r0, #8]
   26afc:	bl	1a1ec <__assert_fail@plt+0x84ec>
   26b00:	add	r5, r5, #24
   26b04:	add	r6, r6, #1
   26b08:	ldr	r1, [r4]
   26b0c:	ldr	r0, [r4, #8]
   26b10:	cmp	r6, r1
   26b14:	blt	26ae4 <__assert_fail@plt+0x14de4>
   26b18:	pop	{r4, r5, r6, sl, fp, lr}
   26b1c:	b	1a1ec <__assert_fail@plt+0x84ec>
   26b20:	ldr	r0, [r0, #8]
   26b24:	bx	lr
   26b28:	push	{r4, r5, fp, lr}
   26b2c:	add	fp, sp, #8
   26b30:	ldr	r4, [r0]
   26b34:	add	r0, r4, r3, lsl #3
   26b38:	ldr	r0, [r0, #4]
   26b3c:	uxtb	r5, r0
   26b40:	ldr	lr, [fp, #12]
   26b44:	ldr	ip, [fp, #8]
   26b48:	cmp	r5, #9
   26b4c:	beq	26b78 <__assert_fail@plt+0x14e78>
   26b50:	cmp	r5, #8
   26b54:	bne	26bdc <__assert_fail@plt+0x14edc>
   26b58:	ldr	r0, [r4, r3, lsl #3]
   26b5c:	add	r0, r0, #1
   26b60:	cmp	r0, lr
   26b64:	bge	26bdc <__assert_fail@plt+0x14edc>
   26b68:	str	ip, [r1, r0, lsl #3]!
   26b6c:	mvn	r0, #0
   26b70:	str	r0, [r1, #4]
   26b74:	pop	{r4, r5, fp, pc}
   26b78:	ldr	r3, [r4, r3, lsl #3]
   26b7c:	add	r3, r3, #1
   26b80:	cmp	r3, lr
   26b84:	popge	{r4, r5, fp, pc}
   26b88:	ldr	r4, [r1, r3, lsl #3]
   26b8c:	cmp	r4, ip
   26b90:	bge	26ba8 <__assert_fail@plt+0x14ea8>
   26b94:	add	r0, r1, r3, lsl #3
   26b98:	str	ip, [r0, #4]
   26b9c:	lsl	r3, lr, #3
   26ba0:	mov	r0, r2
   26ba4:	b	26bc8 <__assert_fail@plt+0x14ec8>
   26ba8:	tst	r0, #524288	; 0x80000
   26bac:	beq	26bd4 <__assert_fail@plt+0x14ed4>
   26bb0:	ldr	r0, [r2, r3, lsl #3]
   26bb4:	cmn	r0, #1
   26bb8:	beq	26bd4 <__assert_fail@plt+0x14ed4>
   26bbc:	lsl	r3, lr, #3
   26bc0:	mov	r0, r1
   26bc4:	mov	r1, r2
   26bc8:	mov	r2, r3
   26bcc:	pop	{r4, r5, fp, lr}
   26bd0:	b	11928 <memcpy@plt>
   26bd4:	add	r0, r1, r3, lsl #3
   26bd8:	str	ip, [r0, #4]
   26bdc:	pop	{r4, r5, fp, pc}
   26be0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26be4:	add	fp, sp, #24
   26be8:	mov	r4, r0
   26bec:	mvn	r0, #0
   26bf0:	cmp	r4, #0
   26bf4:	beq	26c94 <__assert_fail@plt+0x14f94>
   26bf8:	mov	r5, r2
   26bfc:	ldr	r2, [r4]
   26c00:	cmp	r2, #0
   26c04:	beq	26c94 <__assert_fail@plt+0x14f94>
   26c08:	ldr	r9, [fp, #12]
   26c0c:	ldr	r8, [fp, #8]
   26c10:	sub	r0, r2, #1
   26c14:	str	r0, [r4]
   26c18:	ldr	r2, [r4, #8]
   26c1c:	add	r6, r0, r0, lsl #1
   26c20:	ldr	r0, [r2, r6, lsl #3]!
   26c24:	str	r0, [r1]
   26c28:	ldr	r1, [r2, #8]
   26c2c:	lsl	r7, r5, #3
   26c30:	mov	r0, r3
   26c34:	mov	r2, r7
   26c38:	bl	11928 <memcpy@plt>
   26c3c:	ldr	r0, [r4, #8]
   26c40:	add	r0, r0, r6, lsl #3
   26c44:	ldr	r0, [r0, #8]
   26c48:	add	r1, r0, r5, lsl #3
   26c4c:	mov	r0, r8
   26c50:	mov	r2, r7
   26c54:	bl	11928 <memcpy@plt>
   26c58:	ldr	r0, [r9, #8]
   26c5c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   26c60:	ldr	r0, [r4, #8]
   26c64:	add	r0, r0, r6, lsl #3
   26c68:	ldr	r0, [r0, #8]
   26c6c:	bl	1a1ec <__assert_fail@plt+0x84ec>
   26c70:	ldr	r0, [r4, #8]
   26c74:	add	r0, r0, r6, lsl #3
   26c78:	vldr	d16, [r0, #12]
   26c7c:	ldr	r0, [r0, #20]
   26c80:	str	r0, [r9, #8]
   26c84:	vstr	d16, [r9]
   26c88:	ldr	r0, [r4, #8]
   26c8c:	add	r0, r0, r6, lsl #3
   26c90:	ldr	r0, [r0, #4]
   26c94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c9c:	add	fp, sp, #28
   26ca0:	sub	sp, sp, #20
   26ca4:	mov	r9, r3
   26ca8:	mov	r5, r0
   26cac:	ldr	r4, [r0, #84]	; 0x54
   26cb0:	ldr	r3, [r4]
   26cb4:	ldr	sl, [fp, #12]
   26cb8:	add	r0, r3, sl, lsl #3
   26cbc:	ldr	r7, [r0, #4]
   26cc0:	ldr	r0, [fp, #16]
   26cc4:	ldr	r6, [fp, #8]
   26cc8:	tst	r7, #8
   26ccc:	bne	26d8c <__assert_fail@plt+0x1508c>
   26cd0:	tst	r7, #1048576	; 0x100000
   26cd4:	bne	26e80 <__assert_fail@plt+0x15180>
   26cd8:	mov	ip, r1
   26cdc:	mov	r9, r6
   26ce0:	uxtb	r1, r7
   26ce4:	cmp	r1, #4
   26ce8:	bne	26ea4 <__assert_fail@plt+0x151a4>
   26cec:	ldr	r0, [r3, sl, lsl #3]
   26cf0:	add	r0, r0, #1
   26cf4:	mov	r7, #0
   26cf8:	mov	r6, ip
   26cfc:	cmp	r0, ip
   26d00:	mov	r3, r2
   26d04:	bge	26d18 <__assert_fail@plt+0x15018>
   26d08:	mov	r1, r3
   26d0c:	ldr	r2, [r1, r0, lsl #3]!
   26d10:	ldr	r1, [r1, #4]
   26d14:	sub	r7, r1, r2
   26d18:	ldr	r1, [fp, #20]
   26d1c:	cmp	r1, #0
   26d20:	beq	26ed4 <__assert_fail@plt+0x151d4>
   26d24:	mvn	r8, #0
   26d28:	cmp	r0, r6
   26d2c:	bge	26f40 <__assert_fail@plt+0x15240>
   26d30:	ldr	r1, [r3, r0, lsl #3]
   26d34:	cmn	r1, #1
   26d38:	beq	26f40 <__assert_fail@plt+0x15240>
   26d3c:	add	r0, r3, r0, lsl #3
   26d40:	ldr	r0, [r0, #4]
   26d44:	cmn	r0, #1
   26d48:	beq	26f40 <__assert_fail@plt+0x15240>
   26d4c:	cmp	r7, #0
   26d50:	beq	26f4c <__assert_fail@plt+0x1524c>
   26d54:	mov	r0, r9
   26d58:	ldr	r2, [r9]
   26d5c:	ldr	r0, [r5, #28]
   26d60:	sub	r0, r0, r2
   26d64:	cmp	r0, r7
   26d68:	blt	26f40 <__assert_fail@plt+0x15240>
   26d6c:	ldr	r3, [r5, #4]
   26d70:	add	r0, r3, r1
   26d74:	add	r1, r3, r2
   26d78:	mov	r2, r7
   26d7c:	bl	11ad8 <bcmp@plt>
   26d80:	cmp	r0, #0
   26d84:	bne	26f40 <__assert_fail@plt+0x15240>
   26d88:	b	26edc <__assert_fail@plt+0x151dc>
   26d8c:	str	r1, [sp, #12]
   26d90:	str	r2, [sp, #16]
   26d94:	ldr	r2, [r6]
   26d98:	ldr	r1, [r5, #100]	; 0x64
   26d9c:	ldr	r5, [r1, r2, lsl #2]
   26da0:	ldr	r4, [r4, #20]
   26da4:	mov	r1, sl
   26da8:	bl	21134 <__assert_fail@plt+0xf434>
   26dac:	cmp	r0, #0
   26db0:	bne	26dcc <__assert_fail@plt+0x150cc>
   26db4:	ldr	r0, [fp, #16]
   26db8:	mov	r1, sl
   26dbc:	bl	20ecc <__assert_fail@plt+0xf1cc>
   26dc0:	mvn	r8, #1
   26dc4:	cmp	r0, #0
   26dc8:	beq	26f40 <__assert_fail@plt+0x15240>
   26dcc:	add	r0, sl, sl, lsl #1
   26dd0:	add	r1, r4, r0, lsl #2
   26dd4:	mov	r0, r1
   26dd8:	ldr	r2, [r0, #4]!
   26ddc:	cmp	r2, #1
   26de0:	blt	26ecc <__assert_fail@plt+0x151cc>
   26de4:	add	sl, r5, #4
   26de8:	ldr	r7, [r1, #8]
   26dec:	ldr	r6, [r0]
   26df0:	mov	r5, #0
   26df4:	mvn	r8, #0
   26df8:	b	26e0c <__assert_fail@plt+0x1510c>
   26dfc:	mov	r8, r4
   26e00:	add	r5, r5, #1
   26e04:	cmp	r5, r6
   26e08:	bge	26f40 <__assert_fail@plt+0x15240>
   26e0c:	ldr	r4, [r7, r5, lsl #2]
   26e10:	mov	r0, sl
   26e14:	mov	r1, r4
   26e18:	bl	21134 <__assert_fail@plt+0xf434>
   26e1c:	cmp	r0, #0
   26e20:	beq	26e00 <__assert_fail@plt+0x15100>
   26e24:	cmn	r8, #1
   26e28:	beq	26dfc <__assert_fail@plt+0x150fc>
   26e2c:	ldr	r5, [fp, #16]
   26e30:	mov	r0, r5
   26e34:	mov	r1, r8
   26e38:	bl	21134 <__assert_fail@plt+0xf434>
   26e3c:	cmp	r0, #0
   26e40:	bne	26f3c <__assert_fail@plt+0x1523c>
   26e44:	ldr	r0, [fp, #20]
   26e48:	cmp	r0, #0
   26e4c:	beq	26f40 <__assert_fail@plt+0x15240>
   26e50:	ldr	r1, [fp, #8]
   26e54:	ldr	r1, [r1]
   26e58:	ldr	r2, [sp, #16]
   26e5c:	stm	sp, {r2, r9}
   26e60:	str	r5, [sp, #8]
   26e64:	mov	r2, r4
   26e68:	ldr	r3, [sp, #12]
   26e6c:	bl	26fe0 <__assert_fail@plt+0x152e0>
   26e70:	mvn	r4, #1
   26e74:	cmp	r0, #0
   26e78:	movne	r8, r4
   26e7c:	b	26f40 <__assert_fail@plt+0x15240>
   26e80:	mov	r9, r6
   26e84:	ldr	r3, [r6]
   26e88:	mov	r0, r4
   26e8c:	mov	r1, sl
   26e90:	mov	r2, r5
   26e94:	bl	24790 <__assert_fail@plt+0x12a90>
   26e98:	mov	r7, r0
   26e9c:	cmp	r0, #0
   26ea0:	bne	26edc <__assert_fail@plt+0x151dc>
   26ea4:	ldr	r0, [r4]
   26ea8:	add	r1, r0, sl, lsl #3
   26eac:	ldr	r2, [r9]
   26eb0:	mov	r0, r5
   26eb4:	bl	24a6c <__assert_fail@plt+0x12d6c>
   26eb8:	mvn	r8, #0
   26ebc:	mov	r7, #1
   26ec0:	cmp	r0, #0
   26ec4:	bne	26edc <__assert_fail@plt+0x151dc>
   26ec8:	b	26f40 <__assert_fail@plt+0x15240>
   26ecc:	mvn	r8, #0
   26ed0:	b	26f40 <__assert_fail@plt+0x15240>
   26ed4:	cmp	r7, #0
   26ed8:	beq	26f4c <__assert_fail@plt+0x1524c>
   26edc:	ldr	r0, [r4, #12]
   26ee0:	ldr	r4, [r0, sl, lsl #2]
   26ee4:	ldr	r0, [r9]
   26ee8:	add	r0, r0, r7
   26eec:	str	r0, [r9]
   26ef0:	ldr	r1, [fp, #20]
   26ef4:	cmp	r1, #0
   26ef8:	beq	26f30 <__assert_fail@plt+0x15230>
   26efc:	ldr	r1, [r5, #92]	; 0x5c
   26f00:	mvn	r8, #0
   26f04:	cmp	r0, r1
   26f08:	bgt	26f40 <__assert_fail@plt+0x15240>
   26f0c:	ldr	r1, [r5, #100]	; 0x64
   26f10:	ldr	r0, [r1, r0, lsl #2]
   26f14:	cmp	r0, #0
   26f18:	beq	26f40 <__assert_fail@plt+0x15240>
   26f1c:	add	r0, r0, #4
   26f20:	mov	r1, r4
   26f24:	bl	21134 <__assert_fail@plt+0xf434>
   26f28:	cmp	r0, #0
   26f2c:	beq	26f40 <__assert_fail@plt+0x15240>
   26f30:	mov	r0, #0
   26f34:	ldr	r1, [fp, #16]
   26f38:	str	r0, [r1, #4]
   26f3c:	mov	r8, r4
   26f40:	mov	r0, r8
   26f44:	sub	sp, fp, #28
   26f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f4c:	ldr	r0, [fp, #16]
   26f50:	mov	r1, sl
   26f54:	bl	20ecc <__assert_fail@plt+0xf1cc>
   26f58:	cmp	r0, #0
   26f5c:	beq	26f98 <__assert_fail@plt+0x15298>
   26f60:	ldr	r0, [r4, #20]
   26f64:	add	r1, sl, sl, lsl #1
   26f68:	add	r0, r0, r1, lsl #2
   26f6c:	ldr	r0, [r0, #8]
   26f70:	ldr	r8, [r0]
   26f74:	ldr	r0, [r9]
   26f78:	ldr	r1, [r5, #100]	; 0x64
   26f7c:	ldr	r0, [r1, r0, lsl #2]
   26f80:	add	r0, r0, #4
   26f84:	mov	r1, r8
   26f88:	bl	21134 <__assert_fail@plt+0xf434>
   26f8c:	cmp	r0, #0
   26f90:	bne	26f40 <__assert_fail@plt+0x15240>
   26f94:	b	26ea4 <__assert_fail@plt+0x151a4>
   26f98:	mvn	r8, #1
   26f9c:	b	26f40 <__assert_fail@plt+0x15240>
   26fa0:	push	{r4, sl, fp, lr}
   26fa4:	add	fp, sp, #8
   26fa8:	mov	r4, r0
   26fac:	bl	26fc8 <__assert_fail@plt+0x152c8>
   26fb0:	mvn	r0, #0
   26fb4:	mov	r1, #0
   26fb8:	add	r2, r4, #12
   26fbc:	str	r1, [r4]
   26fc0:	stmib	r4, {r0, r2}
   26fc4:	pop	{r4, sl, fp, pc}
   26fc8:	mov	r1, r0
   26fcc:	ldr	r0, [r0, #8]
   26fd0:	add	r1, r1, #12
   26fd4:	cmp	r0, r1
   26fd8:	bxeq	lr
   26fdc:	b	1a1ec <__assert_fail@plt+0x84ec>
   26fe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26fe4:	add	fp, sp, #28
   26fe8:	sub	sp, sp, #12
   26fec:	mov	r6, r3
   26ff0:	mov	r9, r2
   26ff4:	mov	r5, r1
   26ff8:	mov	r4, r0
   26ffc:	ldr	r7, [r0]
   27000:	ldr	r1, [r0, #4]
   27004:	add	r0, r7, #1
   27008:	str	r0, [r4]
   2700c:	ldr	r2, [fp, #16]
   27010:	str	r2, [sp, #8]
   27014:	ldr	r2, [fp, #12]
   27018:	str	r2, [sp, #4]
   2701c:	ldr	sl, [fp, #8]
   27020:	cmp	r0, r1
   27024:	bne	27050 <__assert_fail@plt+0x15350>
   27028:	ldr	r0, [r4, #8]
   2702c:	add	r1, r1, r1, lsl #1
   27030:	lsl	r1, r1, #4
   27034:	bl	1a350 <__assert_fail@plt+0x8650>
   27038:	cmp	r0, #0
   2703c:	beq	270c4 <__assert_fail@plt+0x153c4>
   27040:	str	r0, [r4, #8]
   27044:	ldr	r0, [r4, #4]
   27048:	lsl	r0, r0, #1
   2704c:	str	r0, [r4, #4]
   27050:	ldr	r0, [r4, #8]
   27054:	add	r8, r7, r7, lsl #1
   27058:	str	r5, [r0, r8, lsl #3]!
   2705c:	str	r9, [r0, #4]
   27060:	lsl	r0, r6, #4
   27064:	bl	1a2bc <__assert_fail@plt+0x85bc>
   27068:	ldr	r1, [r4, #8]
   2706c:	add	r1, r1, r8, lsl #3
   27070:	str	r0, [r1, #8]
   27074:	cmp	r0, #0
   27078:	beq	270c4 <__assert_fail@plt+0x153c4>
   2707c:	lsl	r5, r6, #3
   27080:	mov	r1, sl
   27084:	mov	r2, r5
   27088:	bl	11928 <memcpy@plt>
   2708c:	ldr	r0, [r4, #8]
   27090:	add	r0, r0, r8, lsl #3
   27094:	ldr	r0, [r0, #8]
   27098:	add	r0, r0, r6, lsl #3
   2709c:	ldr	r1, [sp, #4]
   270a0:	mov	r2, r5
   270a4:	bl	11928 <memcpy@plt>
   270a8:	ldr	r0, [r4, #8]
   270ac:	add	r0, r0, r8, lsl #3
   270b0:	add	r0, r0, #12
   270b4:	ldr	r1, [sp, #8]
   270b8:	sub	sp, fp, #28
   270bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   270c0:	b	210b8 <__assert_fail@plt+0xf3b8>
   270c4:	mov	r0, #12
   270c8:	sub	sp, fp, #28
   270cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   270d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   270d4:	add	fp, sp, #28
   270d8:	sub	sp, sp, #4
   270dc:	mov	r8, r1
   270e0:	mov	r9, r0
   270e4:	ldrb	r0, [r0]
   270e8:	cmp	r0, #0
   270ec:	beq	2719c <__assert_fail@plt+0x1549c>
   270f0:	mov	sl, #1
   270f4:	mov	r7, #0
   270f8:	b	27120 <__assert_fail@plt+0x15420>
   270fc:	sub	r0, r5, r4
   27100:	clz	r0, r0
   27104:	lsr	r0, r0, #5
   27108:	and	sl, sl, r0
   2710c:	add	r0, r9, r7
   27110:	ldrb	r0, [r0, #1]
   27114:	add	r7, r7, #1
   27118:	cmp	r0, #0
   2711c:	beq	27174 <__assert_fail@plt+0x15474>
   27120:	ldrb	r4, [r8, r7]
   27124:	cmp	r4, #0
   27128:	beq	27174 <__assert_fail@plt+0x15474>
   2712c:	uxtb	r5, r0
   27130:	bl	11ab4 <__ctype_b_loc@plt>
   27134:	ldr	r6, [r0]
   27138:	add	r0, r6, r5, lsl #1
   2713c:	ldrb	r0, [r0, #1]
   27140:	tst	r0, #1
   27144:	beq	27154 <__assert_fail@plt+0x15454>
   27148:	bl	11a90 <__ctype_tolower_loc@plt>
   2714c:	ldr	r0, [r0]
   27150:	ldr	r5, [r0, r5, lsl #2]
   27154:	add	r0, r6, r4, lsl #1
   27158:	ldrb	r0, [r0, #1]
   2715c:	tst	r0, #1
   27160:	beq	270fc <__assert_fail@plt+0x153fc>
   27164:	bl	11a90 <__ctype_tolower_loc@plt>
   27168:	ldr	r0, [r0]
   2716c:	ldr	r4, [r0, r4, lsl #2]
   27170:	b	270fc <__assert_fail@plt+0x153fc>
   27174:	add	r1, r8, r7
   27178:	ldrb	r2, [r1]
   2717c:	cmp	r2, #0
   27180:	mov	r0, r9
   27184:	movwne	r0, #0
   27188:	tst	sl, #1
   2718c:	cmpeq	r2, #0
   27190:	beq	271b4 <__assert_fail@plt+0x154b4>
   27194:	sub	sp, fp, #28
   27198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2719c:	ldrb	r0, [r8]
   271a0:	cmp	r0, #0
   271a4:	movne	r9, #0
   271a8:	mov	r0, r9
   271ac:	sub	sp, fp, #28
   271b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271b4:	sub	r3, r1, r8
   271b8:	sub	r1, r3, #1
   271bc:	add	r0, r9, #1
   271c0:	mov	r2, r8
   271c4:	sub	sp, fp, #28
   271c8:	cmp	r3, #31
   271cc:	bhi	271d8 <__assert_fail@plt+0x154d8>
   271d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271d4:	b	271e0 <__assert_fail@plt+0x154e0>
   271d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271dc:	b	275ec <__assert_fail@plt+0x158ec>
   271e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   271e4:	add	fp, sp, #28
   271e8:	sub	sp, sp, #52	; 0x34
   271ec:	mov	r6, r3
   271f0:	mov	r4, r2
   271f4:	mov	r8, r1
   271f8:	mov	r7, r0
   271fc:	sub	r2, fp, #32
   27200:	mov	r0, r4
   27204:	mov	r1, r3
   27208:	bl	27b18 <__assert_fail@plt+0x15e18>
   2720c:	mov	r5, r0
   27210:	ldr	r9, [fp, #-32]	; 0xffffffe0
   27214:	add	r1, r4, r9
   27218:	str	r4, [sp, #40]	; 0x28
   2721c:	mov	r0, r4
   27220:	mov	r2, r5
   27224:	bl	11b38 <strncasecmp@plt>
   27228:	cmp	r0, #0
   2722c:	beq	273f4 <__assert_fail@plt+0x156f4>
   27230:	sub	r9, r6, r5
   27234:	cmp	r5, r9
   27238:	mov	r0, r5
   2723c:	movcc	r0, r9
   27240:	add	r0, r0, #1
   27244:	str	r0, [sp, #28]
   27248:	str	r0, [fp, #-32]	; 0xffffffe0
   2724c:	add	r0, r7, r8
   27250:	sub	r2, r6, r8
   27254:	mov	sl, #0
   27258:	mov	r1, #0
   2725c:	bl	11bb0 <memchr@plt>
   27260:	cmp	r6, #0
   27264:	beq	275e0 <__assert_fail@plt+0x158e0>
   27268:	cmp	r0, #0
   2726c:	bne	275e0 <__assert_fail@plt+0x158e0>
   27270:	add	r0, r7, r5
   27274:	str	r0, [sp, #16]
   27278:	ldr	r0, [sp, #40]	; 0x28
   2727c:	add	r1, r0, r5
   27280:	str	r1, [fp, #-36]	; 0xffffffdc
   27284:	sub	r8, r0, #1
   27288:	sub	r0, r7, #1
   2728c:	str	r0, [sp, #20]
   27290:	mov	r0, #0
   27294:	str	r0, [sp, #40]	; 0x28
   27298:	str	r6, [sp, #36]	; 0x24
   2729c:	str	r6, [sp, #4]
   272a0:	str	r7, [sp, #24]
   272a4:	str	r5, [sp, #32]
   272a8:	cmp	r5, r6
   272ac:	bcs	27320 <__assert_fail@plt+0x15620>
   272b0:	ldr	r0, [sp, #16]
   272b4:	ldr	r1, [sp, #40]	; 0x28
   272b8:	add	r5, r0, r1
   272bc:	bl	11ab4 <__ctype_b_loc@plt>
   272c0:	ldr	sl, [r0]
   272c4:	mov	r4, #0
   272c8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   272cc:	ldrb	r6, [r0, r4]
   272d0:	add	r0, sl, r6, lsl #1
   272d4:	ldrb	r0, [r0, #1]
   272d8:	tst	r0, #1
   272dc:	beq	272ec <__assert_fail@plt+0x155ec>
   272e0:	bl	11a90 <__ctype_tolower_loc@plt>
   272e4:	ldr	r0, [r0]
   272e8:	ldr	r6, [r0, r6, lsl #2]
   272ec:	ldrb	r7, [r5, r4]
   272f0:	add	r0, sl, r7, lsl #1
   272f4:	ldrb	r0, [r0, #1]
   272f8:	tst	r0, #1
   272fc:	beq	2730c <__assert_fail@plt+0x1560c>
   27300:	bl	11a90 <__ctype_tolower_loc@plt>
   27304:	ldr	r0, [r0]
   27308:	ldr	r7, [r0, r7, lsl #2]
   2730c:	cmp	r6, r7
   27310:	bne	273a4 <__assert_fail@plt+0x156a4>
   27314:	add	r4, r4, #1
   27318:	cmp	r9, r4
   2731c:	bne	272c8 <__assert_fail@plt+0x155c8>
   27320:	ldr	r0, [sp, #40]	; 0x28
   27324:	ldr	r1, [sp, #20]
   27328:	add	sl, r1, r0
   2732c:	ldr	r5, [sp, #32]
   27330:	cmp	r5, #0
   27334:	bne	27350 <__assert_fail@plt+0x15650>
   27338:	b	275c8 <__assert_fail@plt+0x158c8>
   2733c:	sub	r5, r5, #1
   27340:	cmp	r6, r4
   27344:	bne	2739c <__assert_fail@plt+0x1569c>
   27348:	cmp	r5, #0
   2734c:	beq	275c8 <__assert_fail@plt+0x158c8>
   27350:	bl	11ab4 <__ctype_b_loc@plt>
   27354:	ldrb	r6, [r8, r5]
   27358:	ldr	r7, [r0]
   2735c:	add	r0, r7, r6, lsl #1
   27360:	ldrb	r0, [r0, #1]
   27364:	tst	r0, #1
   27368:	beq	27378 <__assert_fail@plt+0x15678>
   2736c:	bl	11a90 <__ctype_tolower_loc@plt>
   27370:	ldr	r0, [r0]
   27374:	ldr	r6, [r0, r6, lsl #2]
   27378:	ldrb	r4, [sl, r5]
   2737c:	add	r0, r7, r4, lsl #1
   27380:	ldrb	r0, [r0, #1]
   27384:	tst	r0, #1
   27388:	beq	2733c <__assert_fail@plt+0x1563c>
   2738c:	bl	11a90 <__ctype_tolower_loc@plt>
   27390:	ldr	r0, [r0]
   27394:	ldr	r4, [r0, r4, lsl #2]
   27398:	b	2733c <__assert_fail@plt+0x1563c>
   2739c:	ldr	r1, [sp, #28]
   273a0:	b	273a8 <__assert_fail@plt+0x156a8>
   273a4:	add	r1, r4, #1
   273a8:	ldr	r7, [sp, #24]
   273ac:	ldr	r3, [sp, #36]	; 0x24
   273b0:	add	r0, r7, r3
   273b4:	ldr	r2, [sp, #40]	; 0x28
   273b8:	add	r2, r1, r2
   273bc:	ldr	r6, [sp, #4]
   273c0:	str	r2, [sp, #40]	; 0x28
   273c4:	add	r4, r2, r6
   273c8:	sub	r2, r4, r3
   273cc:	mov	sl, #0
   273d0:	mov	r1, #0
   273d4:	bl	11bb0 <memchr@plt>
   273d8:	cmp	r4, #0
   273dc:	ldr	r5, [sp, #32]
   273e0:	beq	275e0 <__assert_fail@plt+0x158e0>
   273e4:	cmp	r0, #0
   273e8:	str	r4, [sp, #36]	; 0x24
   273ec:	beq	272a8 <__assert_fail@plt+0x155a8>
   273f0:	b	275e0 <__assert_fail@plt+0x158e0>
   273f4:	add	r0, r7, r8
   273f8:	sub	r2, r6, r8
   273fc:	mov	sl, #0
   27400:	mov	r1, #0
   27404:	bl	11bb0 <memchr@plt>
   27408:	cmp	r6, #0
   2740c:	beq	275e0 <__assert_fail@plt+0x158e0>
   27410:	str	r9, [sp, #20]
   27414:	cmp	r0, #0
   27418:	bne	275e0 <__assert_fail@plt+0x158e0>
   2741c:	ldr	r0, [sp, #20]
   27420:	sub	r0, r6, r0
   27424:	str	r0, [sp, #16]
   27428:	ldr	r0, [sp, #40]	; 0x28
   2742c:	sub	r0, r0, #1
   27430:	str	r0, [fp, #-36]	; 0xffffffdc
   27434:	sub	r0, r7, #1
   27438:	str	r0, [sp, #12]
   2743c:	rsb	r0, r5, #1
   27440:	str	r0, [sp, #8]
   27444:	mov	r0, #0
   27448:	str	r0, [sp, #36]	; 0x24
   2744c:	mov	r4, r6
   27450:	mov	r9, #0
   27454:	str	r7, [sp, #24]
   27458:	str	r5, [sp, #32]
   2745c:	str	r4, [sp, #28]
   27460:	cmp	r5, r9
   27464:	movcc	r5, r9
   27468:	mov	r8, r6
   2746c:	cmp	r5, r6
   27470:	bcs	274e0 <__assert_fail@plt+0x157e0>
   27474:	ldr	r0, [sp, #24]
   27478:	ldr	r1, [sp, #36]	; 0x24
   2747c:	add	sl, r0, r1
   27480:	bl	11ab4 <__ctype_b_loc@plt>
   27484:	ldr	r4, [r0]
   27488:	ldr	r0, [sp, #40]	; 0x28
   2748c:	ldrb	r7, [r0, r5]
   27490:	add	r0, r4, r7, lsl #1
   27494:	ldrb	r0, [r0, #1]
   27498:	tst	r0, #1
   2749c:	beq	274ac <__assert_fail@plt+0x157ac>
   274a0:	bl	11a90 <__ctype_tolower_loc@plt>
   274a4:	ldr	r0, [r0]
   274a8:	ldr	r7, [r0, r7, lsl #2]
   274ac:	ldrb	r6, [sl, r5]
   274b0:	add	r0, r4, r6, lsl #1
   274b4:	ldrb	r0, [r0, #1]
   274b8:	tst	r0, #1
   274bc:	beq	274cc <__assert_fail@plt+0x157cc>
   274c0:	bl	11a90 <__ctype_tolower_loc@plt>
   274c4:	ldr	r0, [r0]
   274c8:	ldr	r6, [r0, r6, lsl #2]
   274cc:	cmp	r7, r6
   274d0:	bne	27574 <__assert_fail@plt+0x15874>
   274d4:	add	r5, r5, #1
   274d8:	cmp	r5, r8
   274dc:	bcc	27488 <__assert_fail@plt+0x15788>
   274e0:	ldr	r0, [sp, #12]
   274e4:	ldr	r1, [sp, #36]	; 0x24
   274e8:	add	sl, r0, r1
   274ec:	ldr	r0, [sp, #32]
   274f0:	b	27500 <__assert_fail@plt+0x15800>
   274f4:	sub	r0, r4, #1
   274f8:	cmp	r7, r5
   274fc:	bne	2755c <__assert_fail@plt+0x1585c>
   27500:	mov	r4, r0
   27504:	cmp	r9, r0
   27508:	bcs	2755c <__assert_fail@plt+0x1585c>
   2750c:	bl	11ab4 <__ctype_b_loc@plt>
   27510:	ldr	r1, [fp, #-36]	; 0xffffffdc
   27514:	ldrb	r7, [r1, r4]
   27518:	ldr	r6, [r0]
   2751c:	add	r0, r6, r7, lsl #1
   27520:	ldrb	r0, [r0, #1]
   27524:	tst	r0, #1
   27528:	beq	27538 <__assert_fail@plt+0x15838>
   2752c:	bl	11a90 <__ctype_tolower_loc@plt>
   27530:	ldr	r0, [r0]
   27534:	ldr	r7, [r0, r7, lsl #2]
   27538:	ldrb	r5, [sl, r4]
   2753c:	add	r0, r6, r5, lsl #1
   27540:	ldrb	r0, [r0, #1]
   27544:	tst	r0, #1
   27548:	beq	274f4 <__assert_fail@plt+0x157f4>
   2754c:	bl	11a90 <__ctype_tolower_loc@plt>
   27550:	ldr	r0, [r0]
   27554:	ldr	r5, [r0, r5, lsl #2]
   27558:	b	274f4 <__assert_fail@plt+0x157f4>
   2755c:	add	r0, r9, #1
   27560:	cmp	r4, r0
   27564:	ldr	r9, [sp, #16]
   27568:	ldr	r1, [sp, #20]
   2756c:	bcs	27580 <__assert_fail@plt+0x15880>
   27570:	b	275d4 <__assert_fail@plt+0x158d4>
   27574:	ldr	r0, [sp, #8]
   27578:	add	r1, r0, r5
   2757c:	mov	r9, #0
   27580:	ldr	r7, [sp, #24]
   27584:	ldr	r3, [sp, #28]
   27588:	add	r0, r7, r3
   2758c:	ldr	r2, [sp, #36]	; 0x24
   27590:	add	r2, r1, r2
   27594:	mov	r6, r8
   27598:	str	r2, [sp, #36]	; 0x24
   2759c:	add	r4, r2, r8
   275a0:	sub	r2, r4, r3
   275a4:	mov	sl, #0
   275a8:	mov	r1, #0
   275ac:	bl	11bb0 <memchr@plt>
   275b0:	cmp	r4, #0
   275b4:	beq	275e0 <__assert_fail@plt+0x158e0>
   275b8:	cmp	r0, #0
   275bc:	ldr	r5, [sp, #32]
   275c0:	beq	2745c <__assert_fail@plt+0x1575c>
   275c4:	b	275e0 <__assert_fail@plt+0x158e0>
   275c8:	ldr	r0, [sp, #24]
   275cc:	ldr	r1, [sp, #40]	; 0x28
   275d0:	b	275dc <__assert_fail@plt+0x158dc>
   275d4:	ldr	r0, [sp, #24]
   275d8:	ldr	r1, [sp, #36]	; 0x24
   275dc:	add	sl, r0, r1
   275e0:	mov	r0, sl
   275e4:	sub	sp, fp, #28
   275e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275f0:	add	fp, sp, #28
   275f4:	sub	sp, sp, #60	; 0x3c
   275f8:	sub	sp, sp, #1024	; 0x400
   275fc:	mov	r4, r3
   27600:	mov	r3, r2
   27604:	mov	r8, r1
   27608:	str	r0, [sp, #36]	; 0x24
   2760c:	sub	r2, fp, #36	; 0x24
   27610:	str	r3, [sp, #44]	; 0x2c
   27614:	mov	r0, r3
   27618:	mov	r1, r4
   2761c:	bl	27b18 <__assert_fail@plt+0x15e18>
   27620:	str	r0, [sp, #20]
   27624:	mov	r0, #0
   27628:	add	r9, sp, #52	; 0x34
   2762c:	str	r4, [r9, r0, lsl #2]
   27630:	add	r0, r0, #1
   27634:	cmp	r0, #256	; 0x100
   27638:	bne	2762c <__assert_fail@plt+0x1592c>
   2763c:	str	r4, [sp, #32]
   27640:	cmp	r4, #0
   27644:	beq	27698 <__assert_fail@plt+0x15998>
   27648:	ldr	r0, [sp, #32]
   2764c:	sub	r5, r0, #1
   27650:	bl	11ab4 <__ctype_b_loc@plt>
   27654:	ldr	r6, [r0]
   27658:	ldr	r7, [sp, #44]	; 0x2c
   2765c:	b	27674 <__assert_fail@plt+0x15974>
   27660:	str	r5, [r9, r4, lsl #2]
   27664:	add	r7, r7, #1
   27668:	sub	r5, r5, #1
   2766c:	cmn	r5, #1
   27670:	beq	27698 <__assert_fail@plt+0x15998>
   27674:	ldrb	r4, [r7]
   27678:	add	r0, r6, r4, lsl #1
   2767c:	ldrb	r0, [r0, #1]
   27680:	tst	r0, #1
   27684:	beq	27660 <__assert_fail@plt+0x15960>
   27688:	bl	11a90 <__ctype_tolower_loc@plt>
   2768c:	ldr	r0, [r0]
   27690:	ldr	r4, [r0, r4, lsl #2]
   27694:	b	27660 <__assert_fail@plt+0x15960>
   27698:	ldr	r9, [fp, #-36]	; 0xffffffdc
   2769c:	ldr	r0, [sp, #44]	; 0x2c
   276a0:	add	r1, r0, r9
   276a4:	ldr	r4, [sp, #20]
   276a8:	mov	r2, r4
   276ac:	bl	11b38 <strncasecmp@plt>
   276b0:	cmp	r0, #0
   276b4:	beq	278c4 <__assert_fail@plt+0x15bc4>
   276b8:	mov	r1, r4
   276bc:	ldr	r4, [sp, #32]
   276c0:	sub	r0, r4, r1
   276c4:	cmp	r1, r0
   276c8:	movcs	r0, r1
   276cc:	add	r0, r0, #1
   276d0:	str	r0, [sp, #12]
   276d4:	str	r0, [fp, #-36]	; 0xffffffdc
   276d8:	ldr	r0, [sp, #36]	; 0x24
   276dc:	add	r0, r0, r8
   276e0:	sub	r2, r4, r8
   276e4:	mov	r6, #0
   276e8:	mov	r1, #0
   276ec:	bl	11bb0 <memchr@plt>
   276f0:	cmp	r4, #0
   276f4:	beq	27b00 <__assert_fail@plt+0x15e00>
   276f8:	cmp	r0, #0
   276fc:	bne	27b00 <__assert_fail@plt+0x15e00>
   27700:	ldr	r0, [sp, #36]	; 0x24
   27704:	ldr	r1, [sp, #20]
   27708:	add	r2, r0, r1
   2770c:	str	r2, [sp, #4]
   27710:	ldr	r2, [sp, #44]	; 0x2c
   27714:	add	r3, r2, r1
   27718:	str	r3, [sp, #40]	; 0x28
   2771c:	ldr	r4, [sp, #32]
   27720:	sub	r3, r4, #1
   27724:	str	r3, [sp, #16]
   27728:	sub	r1, r3, r1
   2772c:	str	r1, [sp, #28]
   27730:	sub	r1, r2, #1
   27734:	str	r1, [sp, #48]	; 0x30
   27738:	sub	r0, r0, #1
   2773c:	str	r0, [sp, #8]
   27740:	bl	11ab4 <__ctype_b_loc@plt>
   27744:	ldr	r9, [r0]
   27748:	mov	r8, #0
   2774c:	mov	r5, r4
   27750:	ldr	r0, [sp, #36]	; 0x24
   27754:	add	r0, r5, r0
   27758:	str	r0, [sp, #44]	; 0x2c
   2775c:	ldrb	r4, [r0, #-1]
   27760:	add	r0, r9, r4, lsl #1
   27764:	ldrb	r0, [r0, #1]
   27768:	tst	r0, #1
   2776c:	beq	2777c <__assert_fail@plt+0x15a7c>
   27770:	bl	11a90 <__ctype_tolower_loc@plt>
   27774:	ldr	r0, [r0]
   27778:	ldr	r4, [r0, r4, lsl #2]
   2777c:	add	r0, sp, #52	; 0x34
   27780:	ldr	r0, [r0, r4, lsl #2]
   27784:	cmp	r0, #0
   27788:	bne	2788c <__assert_fail@plt+0x15b8c>
   2778c:	str	r5, [sp, #24]
   27790:	ldr	r0, [sp, #20]
   27794:	ldr	r1, [sp, #16]
   27798:	cmp	r0, r1
   2779c:	bcs	27808 <__assert_fail@plt+0x15b08>
   277a0:	ldr	r0, [sp, #4]
   277a4:	add	r4, r0, r8
   277a8:	mov	r6, #0
   277ac:	ldr	r0, [sp, #40]	; 0x28
   277b0:	ldrb	r5, [r0, r6]
   277b4:	add	r0, r9, r5, lsl #1
   277b8:	ldrb	r0, [r0, #1]
   277bc:	tst	r0, #1
   277c0:	beq	277d0 <__assert_fail@plt+0x15ad0>
   277c4:	bl	11a90 <__ctype_tolower_loc@plt>
   277c8:	ldr	r0, [r0]
   277cc:	ldr	r5, [r0, r5, lsl #2]
   277d0:	ldrb	r7, [r4, r6]
   277d4:	add	r0, r9, r7, lsl #1
   277d8:	ldrb	r0, [r0, #1]
   277dc:	tst	r0, #1
   277e0:	beq	277f0 <__assert_fail@plt+0x15af0>
   277e4:	bl	11a90 <__ctype_tolower_loc@plt>
   277e8:	ldr	r0, [r0]
   277ec:	ldr	r7, [r0, r7, lsl #2]
   277f0:	cmp	r5, r7
   277f4:	bne	27884 <__assert_fail@plt+0x15b84>
   277f8:	add	r6, r6, #1
   277fc:	ldr	r0, [sp, #28]
   27800:	cmp	r0, r6
   27804:	bne	277ac <__assert_fail@plt+0x15aac>
   27808:	ldr	r0, [sp, #8]
   2780c:	add	r4, r0, r8
   27810:	ldr	r5, [sp, #20]
   27814:	cmp	r5, #0
   27818:	bne	27834 <__assert_fail@plt+0x15b34>
   2781c:	b	27af8 <__assert_fail@plt+0x15df8>
   27820:	sub	r5, r5, #1
   27824:	cmp	r6, sl
   27828:	bne	2787c <__assert_fail@plt+0x15b7c>
   2782c:	cmp	r5, #0
   27830:	beq	27af8 <__assert_fail@plt+0x15df8>
   27834:	ldr	r0, [sp, #48]	; 0x30
   27838:	ldrb	r6, [r0, r5]
   2783c:	add	r0, r9, r6, lsl #1
   27840:	ldrb	r0, [r0, #1]
   27844:	tst	r0, #1
   27848:	beq	27858 <__assert_fail@plt+0x15b58>
   2784c:	bl	11a90 <__ctype_tolower_loc@plt>
   27850:	ldr	r0, [r0]
   27854:	ldr	r6, [r0, r6, lsl #2]
   27858:	ldrb	sl, [r4, r5]
   2785c:	add	r0, r9, sl, lsl #1
   27860:	ldrb	r0, [r0, #1]
   27864:	tst	r0, #1
   27868:	beq	27820 <__assert_fail@plt+0x15b20>
   2786c:	bl	11a90 <__ctype_tolower_loc@plt>
   27870:	ldr	r0, [r0]
   27874:	ldr	sl, [r0, sl, lsl #2]
   27878:	b	27820 <__assert_fail@plt+0x15b20>
   2787c:	ldr	r0, [sp, #12]
   27880:	b	27888 <__assert_fail@plt+0x15b88>
   27884:	add	r0, r6, #1
   27888:	ldr	r5, [sp, #24]
   2788c:	add	r8, r0, r8
   27890:	ldr	r0, [sp, #32]
   27894:	add	r4, r8, r0
   27898:	sub	r2, r4, r5
   2789c:	mov	r6, #0
   278a0:	ldr	r0, [sp, #44]	; 0x2c
   278a4:	mov	r1, #0
   278a8:	bl	11bb0 <memchr@plt>
   278ac:	cmp	r4, #0
   278b0:	beq	27b00 <__assert_fail@plt+0x15e00>
   278b4:	cmp	r0, #0
   278b8:	mov	r5, r4
   278bc:	beq	27750 <__assert_fail@plt+0x15a50>
   278c0:	b	27b00 <__assert_fail@plt+0x15e00>
   278c4:	ldr	r0, [sp, #36]	; 0x24
   278c8:	add	r0, r0, r8
   278cc:	ldr	r4, [sp, #32]
   278d0:	sub	r2, r4, r8
   278d4:	mov	r6, #0
   278d8:	mov	r1, #0
   278dc:	bl	11bb0 <memchr@plt>
   278e0:	cmp	r4, #0
   278e4:	beq	27b00 <__assert_fail@plt+0x15e00>
   278e8:	cmp	r0, #0
   278ec:	bne	27b00 <__assert_fail@plt+0x15e00>
   278f0:	ldr	r4, [sp, #32]
   278f4:	sub	r5, r4, r9
   278f8:	ldr	r0, [sp, #44]	; 0x2c
   278fc:	sub	r0, r0, #1
   27900:	str	r0, [sp, #48]	; 0x30
   27904:	ldr	r0, [sp, #36]	; 0x24
   27908:	sub	r0, r0, #1
   2790c:	str	r0, [sp, #8]
   27910:	ldr	r0, [sp, #20]
   27914:	rsb	r0, r0, #1
   27918:	str	r0, [sp, #4]
   2791c:	sub	r0, r4, #1
   27920:	str	r0, [sp, #40]	; 0x28
   27924:	bl	11ab4 <__ctype_b_loc@plt>
   27928:	ldr	r7, [r0]
   2792c:	mov	sl, #0
   27930:	mov	r8, #0
   27934:	str	r9, [sp, #16]
   27938:	str	r5, [sp, #12]
   2793c:	ldr	r0, [sp, #36]	; 0x24
   27940:	str	r4, [sp, #28]
   27944:	add	r0, r4, r0
   27948:	str	r0, [sp, #24]
   2794c:	ldrb	r4, [r0, #-1]
   27950:	add	r0, r7, r4, lsl #1
   27954:	ldrb	r0, [r0, #1]
   27958:	tst	r0, #1
   2795c:	beq	2796c <__assert_fail@plt+0x15c6c>
   27960:	bl	11a90 <__ctype_tolower_loc@plt>
   27964:	ldr	r0, [r0]
   27968:	ldr	r4, [r0, r4, lsl #2]
   2796c:	add	r0, sp, #52	; 0x34
   27970:	ldr	r1, [r0, r4, lsl #2]
   27974:	cmp	r1, #0
   27978:	beq	2799c <__assert_fail@plt+0x15c9c>
   2797c:	cmp	r1, r9
   27980:	mov	r0, r1
   27984:	movcc	r0, r5
   27988:	cmp	r8, #0
   2798c:	moveq	r0, r1
   27990:	mov	r8, #0
   27994:	ldr	r1, [sp, #32]
   27998:	b	27ac4 <__assert_fail@plt+0x15dc4>
   2799c:	ldr	r6, [sp, #20]
   279a0:	cmp	r6, r8
   279a4:	movcc	r6, r8
   279a8:	ldr	r0, [sp, #40]	; 0x28
   279ac:	cmp	r6, r0
   279b0:	bcs	27a18 <__assert_fail@plt+0x15d18>
   279b4:	ldr	r0, [sp, #36]	; 0x24
   279b8:	add	r9, r0, sl
   279bc:	ldr	r0, [sp, #44]	; 0x2c
   279c0:	ldrb	r4, [r0, r6]
   279c4:	add	r0, r7, r4, lsl #1
   279c8:	ldrb	r0, [r0, #1]
   279cc:	tst	r0, #1
   279d0:	beq	279e0 <__assert_fail@plt+0x15ce0>
   279d4:	bl	11a90 <__ctype_tolower_loc@plt>
   279d8:	ldr	r0, [r0]
   279dc:	ldr	r4, [r0, r4, lsl #2]
   279e0:	ldrb	r5, [r9, r6]
   279e4:	add	r0, r7, r5, lsl #1
   279e8:	ldrb	r0, [r0, #1]
   279ec:	tst	r0, #1
   279f0:	beq	27a00 <__assert_fail@plt+0x15d00>
   279f4:	bl	11a90 <__ctype_tolower_loc@plt>
   279f8:	ldr	r0, [r0]
   279fc:	ldr	r5, [r0, r5, lsl #2]
   27a00:	cmp	r4, r5
   27a04:	bne	27aac <__assert_fail@plt+0x15dac>
   27a08:	add	r6, r6, #1
   27a0c:	ldr	r0, [sp, #40]	; 0x28
   27a10:	cmp	r6, r0
   27a14:	bcc	279bc <__assert_fail@plt+0x15cbc>
   27a18:	ldr	r0, [sp, #8]
   27a1c:	add	r5, r0, sl
   27a20:	ldr	r0, [sp, #20]
   27a24:	b	27a34 <__assert_fail@plt+0x15d34>
   27a28:	sub	r0, r6, #1
   27a2c:	cmp	r9, r4
   27a30:	bne	27a88 <__assert_fail@plt+0x15d88>
   27a34:	mov	r6, r0
   27a38:	cmp	r8, r0
   27a3c:	bcs	27a88 <__assert_fail@plt+0x15d88>
   27a40:	ldr	r0, [sp, #48]	; 0x30
   27a44:	ldrb	r9, [r0, r6]
   27a48:	add	r0, r7, r9, lsl #1
   27a4c:	ldrb	r0, [r0, #1]
   27a50:	tst	r0, #1
   27a54:	beq	27a64 <__assert_fail@plt+0x15d64>
   27a58:	bl	11a90 <__ctype_tolower_loc@plt>
   27a5c:	ldr	r0, [r0]
   27a60:	ldr	r9, [r0, r9, lsl #2]
   27a64:	ldrb	r4, [r5, r6]
   27a68:	add	r0, r7, r4, lsl #1
   27a6c:	ldrb	r0, [r0, #1]
   27a70:	tst	r0, #1
   27a74:	beq	27a28 <__assert_fail@plt+0x15d28>
   27a78:	bl	11a90 <__ctype_tolower_loc@plt>
   27a7c:	ldr	r0, [r0]
   27a80:	ldr	r4, [r0, r4, lsl #2]
   27a84:	b	27a28 <__assert_fail@plt+0x15d28>
   27a88:	add	r0, r8, #1
   27a8c:	cmp	r6, r0
   27a90:	ldr	r5, [sp, #12]
   27a94:	mov	r8, r5
   27a98:	ldr	r9, [sp, #16]
   27a9c:	mov	r0, r9
   27aa0:	ldr	r1, [sp, #32]
   27aa4:	bcs	27ac4 <__assert_fail@plt+0x15dc4>
   27aa8:	b	27b0c <__assert_fail@plt+0x15e0c>
   27aac:	ldr	r0, [sp, #4]
   27ab0:	add	r0, r0, r6
   27ab4:	mov	r8, #0
   27ab8:	ldr	r1, [sp, #32]
   27abc:	ldr	r9, [sp, #16]
   27ac0:	ldr	r5, [sp, #12]
   27ac4:	add	sl, r0, sl
   27ac8:	add	r4, sl, r1
   27acc:	ldr	r0, [sp, #28]
   27ad0:	sub	r2, r4, r0
   27ad4:	mov	r6, #0
   27ad8:	ldr	r0, [sp, #24]
   27adc:	mov	r1, #0
   27ae0:	bl	11bb0 <memchr@plt>
   27ae4:	cmp	r4, #0
   27ae8:	beq	27b00 <__assert_fail@plt+0x15e00>
   27aec:	cmp	r0, #0
   27af0:	beq	2793c <__assert_fail@plt+0x15c3c>
   27af4:	b	27b00 <__assert_fail@plt+0x15e00>
   27af8:	ldr	r0, [sp, #36]	; 0x24
   27afc:	add	r6, r0, r8
   27b00:	mov	r0, r6
   27b04:	sub	sp, fp, #28
   27b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b0c:	ldr	r0, [sp, #36]	; 0x24
   27b10:	add	r6, r0, sl
   27b14:	b	27b00 <__assert_fail@plt+0x15e00>
   27b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b1c:	add	fp, sp, #28
   27b20:	sub	sp, sp, #20
   27b24:	mov	r6, r1
   27b28:	str	r0, [sp, #16]
   27b2c:	cmp	r1, #3
   27b30:	bcs	27b48 <__assert_fail@plt+0x15e48>
   27b34:	mov	r0, #1
   27b38:	str	r0, [r2]
   27b3c:	sub	r0, r6, #1
   27b40:	sub	sp, fp, #28
   27b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b48:	str	r2, [sp]
   27b4c:	bl	11ab4 <__ctype_b_loc@plt>
   27b50:	ldr	r2, [r0]
   27b54:	mov	r0, #0
   27b58:	mvn	r4, #0
   27b5c:	mov	r5, #1
   27b60:	mov	r7, #1
   27b64:	mov	r1, #1
   27b68:	str	r2, [sp, #4]
   27b6c:	str	r6, [sp, #12]
   27b70:	b	27b94 <__assert_fail@plt+0x15e94>
   27b74:	mov	r4, sl
   27b78:	sub	r1, r5, sl
   27b7c:	mov	r7, #1
   27b80:	mov	r0, r5
   27b84:	ldr	r6, [sp, #12]
   27b88:	add	r5, r0, r7
   27b8c:	cmp	r5, r6
   27b90:	bcs	27c38 <__assert_fail@plt+0x15f38>
   27b94:	mov	r6, r0
   27b98:	ldr	r0, [sp, #16]
   27b9c:	ldrb	r9, [r0, r5]
   27ba0:	add	r0, r2, r9, lsl #1
   27ba4:	ldrb	r0, [r0, #1]
   27ba8:	tst	r0, #1
   27bac:	str	r1, [sp, #8]
   27bb0:	beq	27bc4 <__assert_fail@plt+0x15ec4>
   27bb4:	bl	11a90 <__ctype_tolower_loc@plt>
   27bb8:	ldr	r2, [sp, #4]
   27bbc:	ldr	r0, [r0]
   27bc0:	ldrb	r9, [r0, r9, lsl #2]
   27bc4:	mov	sl, r4
   27bc8:	add	r0, r4, r7
   27bcc:	ldr	r1, [sp, #16]
   27bd0:	ldrb	r8, [r1, r0]
   27bd4:	add	r0, r2, r8, lsl #1
   27bd8:	ldrb	r0, [r0, #1]
   27bdc:	tst	r0, #1
   27be0:	beq	27bf4 <__assert_fail@plt+0x15ef4>
   27be4:	bl	11a90 <__ctype_tolower_loc@plt>
   27be8:	ldr	r2, [sp, #4]
   27bec:	ldr	r0, [r0]
   27bf0:	ldrb	r8, [r0, r8, lsl #2]
   27bf4:	cmp	r9, r8
   27bf8:	bcc	27b74 <__assert_fail@plt+0x15e74>
   27bfc:	bne	27c24 <__assert_fail@plt+0x15f24>
   27c00:	ldr	r1, [sp, #8]
   27c04:	cmp	r7, r1
   27c08:	addne	r7, r7, #1
   27c0c:	movne	r0, r6
   27c10:	addeq	r0, r6, r1
   27c14:	moveq	r7, #1
   27c18:	ldr	r6, [sp, #12]
   27c1c:	mov	r4, sl
   27c20:	b	27b88 <__assert_fail@plt+0x15e88>
   27c24:	add	r0, r6, #1
   27c28:	mov	r1, #1
   27c2c:	mov	r7, #1
   27c30:	mov	r4, r6
   27c34:	b	27b84 <__assert_fail@plt+0x15e84>
   27c38:	str	r4, [sp, #4]
   27c3c:	ldr	r0, [sp]
   27c40:	str	r1, [r0]
   27c44:	cmp	r6, #2
   27c48:	bcc	27d30 <__assert_fail@plt+0x16030>
   27c4c:	bl	11ab4 <__ctype_b_loc@plt>
   27c50:	ldr	r3, [r0]
   27c54:	mov	r0, #0
   27c58:	mvn	r5, #0
   27c5c:	mov	r7, #1
   27c60:	mov	r8, #1
   27c64:	mov	r9, #1
   27c68:	str	r3, [sp, #8]
   27c6c:	b	27c90 <__assert_fail@plt+0x15f90>
   27c70:	mov	r5, sl
   27c74:	sub	r9, r7, sl
   27c78:	mov	r8, #1
   27c7c:	mov	r0, r7
   27c80:	ldr	r1, [sp, #12]
   27c84:	add	r7, r0, r8
   27c88:	cmp	r7, r1
   27c8c:	bcs	27d38 <__assert_fail@plt+0x16038>
   27c90:	mov	r4, r0
   27c94:	ldr	r0, [sp, #16]
   27c98:	ldrb	r6, [r0, r7]
   27c9c:	add	r0, r3, r6, lsl #1
   27ca0:	ldrb	r0, [r0, #1]
   27ca4:	tst	r0, #1
   27ca8:	beq	27cbc <__assert_fail@plt+0x15fbc>
   27cac:	bl	11a90 <__ctype_tolower_loc@plt>
   27cb0:	ldr	r3, [sp, #8]
   27cb4:	ldr	r0, [r0]
   27cb8:	ldrb	r6, [r0, r6, lsl #2]
   27cbc:	mov	sl, r5
   27cc0:	add	r0, r5, r8
   27cc4:	ldr	r1, [sp, #16]
   27cc8:	ldrb	r5, [r1, r0]
   27ccc:	add	r0, r3, r5, lsl #1
   27cd0:	ldrb	r0, [r0, #1]
   27cd4:	tst	r0, #1
   27cd8:	beq	27cec <__assert_fail@plt+0x15fec>
   27cdc:	bl	11a90 <__ctype_tolower_loc@plt>
   27ce0:	ldr	r3, [sp, #8]
   27ce4:	ldr	r0, [r0]
   27ce8:	ldrb	r5, [r0, r5, lsl #2]
   27cec:	cmp	r5, r6
   27cf0:	bcc	27c70 <__assert_fail@plt+0x15f70>
   27cf4:	cmp	r6, r5
   27cf8:	bne	27d1c <__assert_fail@plt+0x1601c>
   27cfc:	cmp	r8, r9
   27d00:	addne	r8, r8, #1
   27d04:	movne	r0, r4
   27d08:	addeq	r0, r4, r9
   27d0c:	moveq	r8, #1
   27d10:	ldr	r1, [sp, #12]
   27d14:	mov	r5, sl
   27d18:	b	27c84 <__assert_fail@plt+0x15f84>
   27d1c:	add	r0, r4, #1
   27d20:	mov	r9, #1
   27d24:	mov	r8, #1
   27d28:	mov	r5, r4
   27d2c:	b	27c80 <__assert_fail@plt+0x15f80>
   27d30:	mvn	r5, #0
   27d34:	mov	r9, #1
   27d38:	ldr	r0, [sp, #4]
   27d3c:	add	r0, r0, #1
   27d40:	add	r1, r5, #1
   27d44:	cmp	r1, r0
   27d48:	bcc	27d58 <__assert_fail@plt+0x16058>
   27d4c:	ldr	r0, [sp]
   27d50:	str	r9, [r0]
   27d54:	mov	r0, r1
   27d58:	sub	sp, fp, #28
   27d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d60:	push	{r4, r5, r6, sl, fp, lr}
   27d64:	add	fp, sp, #16
   27d68:	mov	r4, r0
   27d6c:	ldrb	r3, [r0]
   27d70:	cmp	r3, #0
   27d74:	beq	27df0 <__assert_fail@plt+0x160f0>
   27d78:	mov	r2, #1
   27d7c:	mov	r0, #0
   27d80:	ldrb	r6, [r1, r0]
   27d84:	cmp	r6, #0
   27d88:	uxtbne	r3, r3
   27d8c:	subne	r3, r3, r6
   27d90:	clzne	r3, r3
   27d94:	lsrne	r3, r3, #5
   27d98:	andne	r2, r2, r3
   27d9c:	addne	r3, r4, r0
   27da0:	ldrbne	r3, [r3, #1]
   27da4:	addne	r0, r0, #1
   27da8:	cmpne	r3, #0
   27dac:	bne	27d80 <__assert_fail@plt+0x16080>
   27db0:	add	r6, r1, r0
   27db4:	ldrb	r3, [r6]
   27db8:	cmp	r3, #0
   27dbc:	mov	r0, r4
   27dc0:	movwne	r0, #0
   27dc4:	tst	r2, #1
   27dc8:	cmpeq	r3, #0
   27dcc:	bne	27dec <__assert_fail@plt+0x160ec>
   27dd0:	sub	r5, r6, r1
   27dd4:	ldrb	r1, [r1]
   27dd8:	add	r0, r4, #1
   27ddc:	bl	11afc <strchr@plt>
   27de0:	cmp	r5, #1
   27de4:	cmpne	r0, #0
   27de8:	bne	27e04 <__assert_fail@plt+0x16104>
   27dec:	pop	{r4, r5, r6, sl, fp, pc}
   27df0:	ldrb	r0, [r1]
   27df4:	cmp	r0, #0
   27df8:	movne	r4, #0
   27dfc:	mov	r0, r4
   27e00:	pop	{r4, r5, r6, sl, fp, pc}
   27e04:	add	r1, r4, r5
   27e08:	subs	r1, r1, r0
   27e0c:	movwcc	r1, #1
   27e10:	sub	r2, r6, r5
   27e14:	mov	r3, r5
   27e18:	cmp	r5, #31
   27e1c:	bhi	27e28 <__assert_fail@plt+0x16128>
   27e20:	pop	{r4, r5, r6, sl, fp, lr}
   27e24:	b	27e30 <__assert_fail@plt+0x16130>
   27e28:	pop	{r4, r5, r6, sl, fp, lr}
   27e2c:	b	280cc <__assert_fail@plt+0x163cc>
   27e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e34:	add	fp, sp, #28
   27e38:	sub	sp, sp, #28
   27e3c:	mov	r4, r3
   27e40:	mov	r7, r2
   27e44:	mov	r8, r1
   27e48:	mov	r6, r0
   27e4c:	add	r2, sp, #24
   27e50:	mov	r0, r7
   27e54:	mov	r1, r3
   27e58:	bl	28414 <__assert_fail@plt+0x16714>
   27e5c:	mov	r5, r0
   27e60:	ldr	r9, [sp, #24]
   27e64:	add	r1, r7, r9
   27e68:	mov	r0, r7
   27e6c:	mov	r2, r5
   27e70:	bl	11ad8 <bcmp@plt>
   27e74:	cmp	r0, #0
   27e78:	str	r6, [sp, #16]
   27e7c:	str	r5, [sp, #20]
   27e80:	beq	27f8c <__assert_fail@plt+0x1628c>
   27e84:	sub	sl, r4, r5
   27e88:	cmp	r5, sl
   27e8c:	movcc	r5, sl
   27e90:	add	r0, r5, #1
   27e94:	str	r0, [sp, #12]
   27e98:	str	r0, [sp, #24]
   27e9c:	add	r0, r6, r8
   27ea0:	sub	r2, r4, r8
   27ea4:	mov	r5, #0
   27ea8:	mov	r1, #0
   27eac:	bl	11bb0 <memchr@plt>
   27eb0:	cmp	r0, #0
   27eb4:	bne	280c0 <__assert_fail@plt+0x163c0>
   27eb8:	cmp	r4, #0
   27ebc:	beq	280c0 <__assert_fail@plt+0x163c0>
   27ec0:	ldr	r0, [sp, #16]
   27ec4:	ldr	r1, [sp, #20]
   27ec8:	add	r2, r0, r1
   27ecc:	str	r2, [sp, #4]
   27ed0:	add	r8, r7, r1
   27ed4:	sub	r7, r7, #1
   27ed8:	sub	r0, r0, #1
   27edc:	str	r0, [sp, #8]
   27ee0:	mov	r9, #0
   27ee4:	mov	r1, r4
   27ee8:	mov	r5, #0
   27eec:	ldr	r0, [sp, #20]
   27ef0:	cmp	r0, r4
   27ef4:	bcs	27f20 <__assert_fail@plt+0x16220>
   27ef8:	ldr	r0, [sp, #4]
   27efc:	add	r2, r0, r9
   27f00:	mov	r0, #0
   27f04:	ldrb	r3, [r2, r0]
   27f08:	ldrb	r6, [r8, r0]
   27f0c:	cmp	r6, r3
   27f10:	bne	27f54 <__assert_fail@plt+0x16254>
   27f14:	add	r0, r0, #1
   27f18:	cmp	sl, r0
   27f1c:	bne	27f04 <__assert_fail@plt+0x16204>
   27f20:	ldr	r0, [sp, #8]
   27f24:	add	r0, r0, r9
   27f28:	ldr	r2, [sp, #20]
   27f2c:	cmp	r2, #0
   27f30:	beq	280b0 <__assert_fail@plt+0x163b0>
   27f34:	sub	r3, r2, #1
   27f38:	ldrb	r6, [r0, r2]
   27f3c:	ldrb	r2, [r7, r2]
   27f40:	cmp	r2, r6
   27f44:	mov	r2, r3
   27f48:	beq	27f2c <__assert_fail@plt+0x1622c>
   27f4c:	ldr	r2, [sp, #12]
   27f50:	b	27f58 <__assert_fail@plt+0x16258>
   27f54:	add	r2, r0, #1
   27f58:	ldr	r0, [sp, #16]
   27f5c:	add	r0, r0, r1
   27f60:	add	r9, r2, r9
   27f64:	add	r6, r9, r4
   27f68:	sub	r2, r6, r1
   27f6c:	mov	r1, #0
   27f70:	bl	11bb0 <memchr@plt>
   27f74:	cmp	r0, #0
   27f78:	bne	280c0 <__assert_fail@plt+0x163c0>
   27f7c:	cmp	r6, #0
   27f80:	mov	r1, r6
   27f84:	bne	27eec <__assert_fail@plt+0x161ec>
   27f88:	b	280c0 <__assert_fail@plt+0x163c0>
   27f8c:	add	r0, r6, r8
   27f90:	sub	r2, r4, r8
   27f94:	mov	r5, #0
   27f98:	mov	r1, #0
   27f9c:	bl	11bb0 <memchr@plt>
   27fa0:	cmp	r4, #0
   27fa4:	beq	280c0 <__assert_fail@plt+0x163c0>
   27fa8:	str	r9, [sp, #12]
   27fac:	cmp	r0, #0
   27fb0:	bne	280c0 <__assert_fail@plt+0x163c0>
   27fb4:	ldr	r0, [sp, #12]
   27fb8:	sub	r0, r4, r0
   27fbc:	str	r0, [sp, #8]
   27fc0:	sub	r6, r7, #1
   27fc4:	ldr	r0, [sp, #16]
   27fc8:	sub	r0, r0, #1
   27fcc:	str	r0, [sp, #4]
   27fd0:	ldr	r0, [sp, #20]
   27fd4:	rsb	r0, r0, #1
   27fd8:	str	r0, [sp]
   27fdc:	mov	r8, #0
   27fe0:	mov	lr, r4
   27fe4:	mov	r9, #0
   27fe8:	ldr	r1, [sp, #20]
   27fec:	cmp	r1, r8
   27ff0:	mov	r0, r1
   27ff4:	movcc	r0, r8
   27ff8:	cmp	r0, r4
   27ffc:	ldr	sl, [sp, #16]
   28000:	bcs	28024 <__assert_fail@plt+0x16324>
   28004:	add	r2, sl, r9
   28008:	ldrb	r3, [r2, r0]
   2800c:	ldrb	r5, [r7, r0]
   28010:	cmp	r5, r3
   28014:	bne	28070 <__assert_fail@plt+0x16370>
   28018:	add	r0, r0, #1
   2801c:	cmp	r0, r4
   28020:	bcc	28008 <__assert_fail@plt+0x16308>
   28024:	mov	ip, r4
   28028:	ldr	r0, [sp, #4]
   2802c:	add	r0, r0, r9
   28030:	mov	r3, r1
   28034:	mov	r2, r3
   28038:	cmp	r8, r3
   2803c:	bcs	28054 <__assert_fail@plt+0x16354>
   28040:	sub	r3, r2, #1
   28044:	ldrb	r5, [r0, r2]
   28048:	ldrb	r4, [r6, r2]
   2804c:	cmp	r4, r5
   28050:	beq	28034 <__assert_fail@plt+0x16334>
   28054:	add	r0, r8, #1
   28058:	cmp	r2, r0
   2805c:	ldr	r2, [sp, #12]
   28060:	ldr	r8, [sp, #8]
   28064:	mov	r4, ip
   28068:	bcs	2807c <__assert_fail@plt+0x1637c>
   2806c:	b	280bc <__assert_fail@plt+0x163bc>
   28070:	ldr	r1, [sp]
   28074:	add	r2, r1, r0
   28078:	mov	r8, #0
   2807c:	add	r0, sl, lr
   28080:	add	r9, r2, r9
   28084:	add	sl, r9, r4
   28088:	sub	r2, sl, lr
   2808c:	mov	r5, #0
   28090:	mov	r1, #0
   28094:	bl	11bb0 <memchr@plt>
   28098:	cmp	sl, #0
   2809c:	beq	280c0 <__assert_fail@plt+0x163c0>
   280a0:	cmp	r0, #0
   280a4:	mov	lr, sl
   280a8:	beq	27fe8 <__assert_fail@plt+0x162e8>
   280ac:	b	280c0 <__assert_fail@plt+0x163c0>
   280b0:	ldr	r0, [sp, #16]
   280b4:	add	r5, r0, r9
   280b8:	b	280c0 <__assert_fail@plt+0x163c0>
   280bc:	add	r5, sl, r9
   280c0:	mov	r0, r5
   280c4:	sub	sp, fp, #28
   280c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   280d0:	add	fp, sp, #28
   280d4:	sub	sp, sp, #44	; 0x2c
   280d8:	sub	sp, sp, #1024	; 0x400
   280dc:	mov	r7, r3
   280e0:	mov	r3, r2
   280e4:	mov	r5, r1
   280e8:	str	r0, [sp, #32]
   280ec:	sub	r2, fp, #36	; 0x24
   280f0:	str	r3, [sp, #24]
   280f4:	mov	r0, r3
   280f8:	mov	r1, r7
   280fc:	bl	28414 <__assert_fail@plt+0x16714>
   28100:	mov	r4, r0
   28104:	mov	r0, #0
   28108:	add	r6, sp, #36	; 0x24
   2810c:	str	r7, [r6, r0, lsl #2]
   28110:	add	r0, r0, #1
   28114:	cmp	r0, #256	; 0x100
   28118:	bne	2810c <__assert_fail@plt+0x1640c>
   2811c:	cmp	r7, #0
   28120:	ldr	r0, [sp, #24]
   28124:	beq	28144 <__assert_fail@plt+0x16444>
   28128:	sub	r3, r7, #1
   2812c:	mov	r1, r0
   28130:	ldrb	r2, [r1], #1
   28134:	str	r3, [r6, r2, lsl #2]
   28138:	sub	r3, r3, #1
   2813c:	cmn	r3, #1
   28140:	bne	28130 <__assert_fail@plt+0x16430>
   28144:	ldr	r8, [fp, #-36]	; 0xffffffdc
   28148:	add	r1, r0, r8
   2814c:	mov	r2, r4
   28150:	bl	11ad8 <bcmp@plt>
   28154:	cmp	r0, #0
   28158:	str	r4, [sp, #16]
   2815c:	str	r7, [sp, #28]
   28160:	beq	28298 <__assert_fail@plt+0x16598>
   28164:	sub	r0, r7, r4
   28168:	cmp	r4, r0
   2816c:	movcs	r0, r4
   28170:	add	r0, r0, #1
   28174:	str	r0, [sp, #20]
   28178:	str	r0, [fp, #-36]	; 0xffffffdc
   2817c:	ldr	r0, [sp, #32]
   28180:	add	r0, r0, r5
   28184:	sub	r2, r7, r5
   28188:	mov	r5, #0
   2818c:	mov	r1, #0
   28190:	bl	11bb0 <memchr@plt>
   28194:	cmp	r7, #0
   28198:	beq	28408 <__assert_fail@plt+0x16708>
   2819c:	cmp	r0, #0
   281a0:	ldr	r2, [sp, #24]
   281a4:	bne	28408 <__assert_fail@plt+0x16708>
   281a8:	ldr	r0, [sp, #32]
   281ac:	ldr	r1, [sp, #16]
   281b0:	add	r3, r0, r1
   281b4:	str	r3, [sp, #12]
   281b8:	add	r7, r2, r1
   281bc:	ldr	r3, [sp, #28]
   281c0:	sub	r5, r3, #1
   281c4:	mov	r9, r5
   281c8:	sub	r4, r5, r1
   281cc:	sub	r8, r2, #1
   281d0:	sub	r0, r0, #1
   281d4:	str	r0, [sp, #24]
   281d8:	mov	sl, #0
   281dc:	mov	r1, r3
   281e0:	ldr	r0, [sp, #32]
   281e4:	add	r0, r1, r0
   281e8:	ldrb	r2, [r0, #-1]
   281ec:	ldr	r2, [r6, r2, lsl #2]
   281f0:	cmp	r2, #0
   281f4:	beq	28230 <__assert_fail@plt+0x16530>
   281f8:	add	sl, r2, sl
   281fc:	ldr	r2, [sp, #28]
   28200:	add	r6, sl, r2
   28204:	sub	r2, r6, r1
   28208:	mov	r5, #0
   2820c:	mov	r1, #0
   28210:	bl	11bb0 <memchr@plt>
   28214:	cmp	r6, #0
   28218:	beq	28408 <__assert_fail@plt+0x16708>
   2821c:	cmp	r0, #0
   28220:	mov	r1, r6
   28224:	add	r6, sp, #36	; 0x24
   28228:	beq	281e0 <__assert_fail@plt+0x164e0>
   2822c:	b	28408 <__assert_fail@plt+0x16708>
   28230:	ldr	r2, [sp, #16]
   28234:	cmp	r2, r9
   28238:	bcs	28264 <__assert_fail@plt+0x16564>
   2823c:	ldr	r2, [sp, #12]
   28240:	add	r3, r2, sl
   28244:	mov	r2, #0
   28248:	ldrb	r6, [r3, r2]
   2824c:	ldrb	r5, [r7, r2]
   28250:	add	r2, r2, #1
   28254:	cmp	r5, r6
   28258:	bne	281f8 <__assert_fail@plt+0x164f8>
   2825c:	cmp	r4, r2
   28260:	bne	28248 <__assert_fail@plt+0x16548>
   28264:	ldr	r2, [sp, #24]
   28268:	add	r2, r2, sl
   2826c:	ldr	r3, [sp, #16]
   28270:	cmp	r3, #0
   28274:	beq	28400 <__assert_fail@plt+0x16700>
   28278:	sub	r6, r3, #1
   2827c:	ldrb	r5, [r2, r3]
   28280:	ldrb	r3, [r8, r3]
   28284:	cmp	r3, r5
   28288:	mov	r3, r6
   2828c:	beq	28270 <__assert_fail@plt+0x16570>
   28290:	ldr	r2, [sp, #20]
   28294:	b	281f8 <__assert_fail@plt+0x164f8>
   28298:	ldr	r0, [sp, #32]
   2829c:	add	r0, r0, r5
   282a0:	sub	r2, r7, r5
   282a4:	mov	r5, #0
   282a8:	mov	r1, #0
   282ac:	bl	11bb0 <memchr@plt>
   282b0:	cmp	r7, #0
   282b4:	beq	28408 <__assert_fail@plt+0x16708>
   282b8:	str	r8, [sp, #20]
   282bc:	cmp	r0, #0
   282c0:	ldr	r4, [sp, #24]
   282c4:	bne	28408 <__assert_fail@plt+0x16708>
   282c8:	ldr	r0, [sp, #20]
   282cc:	ldr	lr, [sp, #28]
   282d0:	sub	r0, lr, r0
   282d4:	str	r0, [sp, #12]
   282d8:	sub	r8, r4, #1
   282dc:	ldr	r0, [sp, #32]
   282e0:	sub	r0, r0, #1
   282e4:	str	r0, [sp, #8]
   282e8:	ldr	r0, [sp, #16]
   282ec:	rsb	r0, r0, #1
   282f0:	str	r0, [sp, #4]
   282f4:	sub	r9, lr, #1
   282f8:	mov	r7, #0
   282fc:	mov	sl, #0
   28300:	ldr	r0, [sp, #32]
   28304:	add	r0, lr, r0
   28308:	ldrb	r2, [r0, #-1]
   2830c:	ldr	r3, [r6, r2, lsl #2]
   28310:	cmp	r3, #0
   28314:	beq	2833c <__assert_fail@plt+0x1663c>
   28318:	ldr	r2, [sp, #20]
   2831c:	cmp	r3, r2
   28320:	mov	r2, r3
   28324:	ldr	r6, [sp, #12]
   28328:	movcc	r2, r6
   2832c:	cmp	r7, #0
   28330:	moveq	r2, r3
   28334:	mov	r7, #0
   28338:	b	283b8 <__assert_fail@plt+0x166b8>
   2833c:	ldr	ip, [sp, #16]
   28340:	cmp	ip, r7
   28344:	mov	r2, ip
   28348:	movcc	r2, r7
   2834c:	cmp	r2, r9
   28350:	bcs	28378 <__assert_fail@plt+0x16678>
   28354:	ldr	r3, [sp, #32]
   28358:	add	r3, r3, sl
   2835c:	ldrb	r6, [r3, r2]
   28360:	ldrb	r5, [r4, r2]
   28364:	cmp	r5, r6
   28368:	bne	283f4 <__assert_fail@plt+0x166f4>
   2836c:	add	r2, r2, #1
   28370:	cmp	r2, r9
   28374:	bcc	2835c <__assert_fail@plt+0x1665c>
   28378:	ldr	r2, [sp, #8]
   2837c:	add	r2, r2, sl
   28380:	mov	r6, ip
   28384:	mov	r3, r6
   28388:	cmp	r7, r6
   2838c:	bcs	283a4 <__assert_fail@plt+0x166a4>
   28390:	sub	r6, r3, #1
   28394:	ldrb	r5, [r2, r3]
   28398:	ldrb	r4, [r8, r3]
   2839c:	cmp	r4, r5
   283a0:	beq	28384 <__assert_fail@plt+0x16684>
   283a4:	add	r2, r7, #1
   283a8:	cmp	r3, r2
   283ac:	ldr	r2, [sp, #20]
   283b0:	ldr	r7, [sp, #12]
   283b4:	bcc	28400 <__assert_fail@plt+0x16700>
   283b8:	add	sl, r2, sl
   283bc:	ldr	r1, [sp, #28]
   283c0:	add	r6, sl, r1
   283c4:	sub	r2, r6, lr
   283c8:	mov	r5, #0
   283cc:	mov	r1, #0
   283d0:	bl	11bb0 <memchr@plt>
   283d4:	cmp	r6, #0
   283d8:	beq	28408 <__assert_fail@plt+0x16708>
   283dc:	cmp	r0, #0
   283e0:	mov	lr, r6
   283e4:	add	r6, sp, #36	; 0x24
   283e8:	ldr	r4, [sp, #24]
   283ec:	beq	28300 <__assert_fail@plt+0x16600>
   283f0:	b	28408 <__assert_fail@plt+0x16708>
   283f4:	ldr	r3, [sp, #4]
   283f8:	add	r2, r3, r2
   283fc:	b	28334 <__assert_fail@plt+0x16634>
   28400:	ldr	r0, [sp, #32]
   28404:	add	r5, r0, sl
   28408:	mov	r0, r5
   2840c:	sub	sp, fp, #28
   28410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28414:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28418:	add	fp, sp, #24
   2841c:	cmp	r1, #3
   28420:	bcs	28434 <__assert_fail@plt+0x16734>
   28424:	mov	r0, #1
   28428:	str	r0, [r2]
   2842c:	sub	r0, r1, #1
   28430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28434:	mvn	r8, #0
   28438:	mov	r6, #0
   2843c:	mov	r3, #1
   28440:	mov	ip, #1
   28444:	mov	r5, #1
   28448:	b	28464 <__assert_fail@plt+0x16764>
   2844c:	sub	ip, r3, r8
   28450:	mov	r5, #1
   28454:	mov	r6, r3
   28458:	add	r3, r5, r6
   2845c:	cmp	r3, r1
   28460:	bcs	284a8 <__assert_fail@plt+0x167a8>
   28464:	ldrb	r7, [r0, r3]
   28468:	add	r4, r5, r8
   2846c:	ldrb	r4, [r0, r4]
   28470:	cmp	r7, r4
   28474:	bcc	2844c <__assert_fail@plt+0x1674c>
   28478:	bne	28490 <__assert_fail@plt+0x16790>
   2847c:	cmp	r5, ip
   28480:	addne	r5, r5, #1
   28484:	addeq	r6, ip, r6
   28488:	moveq	r5, #1
   2848c:	b	28458 <__assert_fail@plt+0x16758>
   28490:	add	r3, r6, #1
   28494:	mov	r5, #1
   28498:	mov	r8, r6
   2849c:	mov	r6, r3
   284a0:	mov	ip, #1
   284a4:	b	28458 <__assert_fail@plt+0x16758>
   284a8:	str	ip, [r2]
   284ac:	cmp	r1, #2
   284b0:	bcc	2852c <__assert_fail@plt+0x1682c>
   284b4:	mvn	ip, #0
   284b8:	mov	r4, #0
   284bc:	mov	r5, #1
   284c0:	mov	lr, #1
   284c4:	mov	r3, #1
   284c8:	b	284e4 <__assert_fail@plt+0x167e4>
   284cc:	sub	lr, r5, ip
   284d0:	mov	r3, #1
   284d4:	mov	r4, r5
   284d8:	add	r5, r3, r4
   284dc:	cmp	r5, r1
   284e0:	bcs	28534 <__assert_fail@plt+0x16834>
   284e4:	ldrb	r6, [r0, r5]
   284e8:	add	r7, r3, ip
   284ec:	ldrb	r7, [r0, r7]
   284f0:	cmp	r7, r6
   284f4:	bcc	284cc <__assert_fail@plt+0x167cc>
   284f8:	cmp	r6, r7
   284fc:	bne	28514 <__assert_fail@plt+0x16814>
   28500:	cmp	r3, lr
   28504:	addne	r3, r3, #1
   28508:	addeq	r4, lr, r4
   2850c:	moveq	r3, #1
   28510:	b	284d8 <__assert_fail@plt+0x167d8>
   28514:	add	r7, r4, #1
   28518:	mov	r3, #1
   2851c:	mov	ip, r4
   28520:	mov	r4, r7
   28524:	mov	lr, #1
   28528:	b	284d8 <__assert_fail@plt+0x167d8>
   2852c:	mov	lr, #1
   28530:	mvn	ip, #0
   28534:	add	r0, r8, #1
   28538:	add	r1, ip, #1
   2853c:	cmp	r1, r0
   28540:	strcs	lr, [r2]
   28544:	movcs	r0, r1
   28548:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2854c:	push	{fp, lr}
   28550:	mov	fp, sp
   28554:	movw	r0, #49592	; 0xc1b8
   28558:	movt	r0, #3
   2855c:	ldr	r0, [r0]
   28560:	bl	11ac0 <exit@plt>
   28564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28568:	add	fp, sp, #28
   2856c:	sub	sp, sp, #12
   28570:	mov	r4, r3
   28574:	mov	r6, r2
   28578:	mov	r5, r1
   2857c:	mov	sl, r0
   28580:	bl	11af0 <strlen@plt>
   28584:	ldr	r8, [r5]
   28588:	cmp	r8, #0
   2858c:	beq	2864c <__assert_fail@plt+0x1694c>
   28590:	mov	r7, r0
   28594:	add	r9, r5, #4
   28598:	mov	r0, #0
   2859c:	str	r0, [sp]
   285a0:	mvn	r0, #0
   285a4:	str	r0, [sp, #8]
   285a8:	str	r6, [sp, #4]
   285ac:	mov	r5, #0
   285b0:	b	285cc <__assert_fail@plt+0x168cc>
   285b4:	str	r5, [sp, #8]
   285b8:	add	r6, r6, r4
   285bc:	ldr	r8, [r9, r5, lsl #2]
   285c0:	add	r5, r5, #1
   285c4:	cmp	r8, #0
   285c8:	beq	28634 <__assert_fail@plt+0x16934>
   285cc:	mov	r0, r8
   285d0:	mov	r1, sl
   285d4:	mov	r2, r7
   285d8:	bl	11cb8 <strncmp@plt>
   285dc:	cmp	r0, #0
   285e0:	bne	285b8 <__assert_fail@plt+0x168b8>
   285e4:	mov	r0, r8
   285e8:	bl	11af0 <strlen@plt>
   285ec:	cmp	r0, r7
   285f0:	beq	28650 <__assert_fail@plt+0x16950>
   285f4:	ldr	r0, [sp, #8]
   285f8:	cmn	r0, #1
   285fc:	beq	285b4 <__assert_fail@plt+0x168b4>
   28600:	ldr	r0, [sp, #4]
   28604:	cmp	r0, #0
   28608:	beq	28628 <__assert_fail@plt+0x16928>
   2860c:	ldr	r1, [sp, #8]
   28610:	mla	r0, r1, r4, r0
   28614:	mov	r1, r6
   28618:	mov	r2, r4
   2861c:	bl	11ad8 <bcmp@plt>
   28620:	cmp	r0, #0
   28624:	beq	285b8 <__assert_fail@plt+0x168b8>
   28628:	mov	r0, #1
   2862c:	str	r0, [sp]
   28630:	b	285b8 <__assert_fail@plt+0x168b8>
   28634:	ldr	r0, [sp]
   28638:	tst	r0, #1
   2863c:	ldr	r0, [sp, #8]
   28640:	mvnne	r0, #1
   28644:	sub	sp, fp, #28
   28648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2864c:	mvn	r5, #0
   28650:	mov	r0, r5
   28654:	sub	sp, fp, #28
   28658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2865c:	push	{r4, r5, r6, sl, fp, lr}
   28660:	add	fp, sp, #16
   28664:	sub	sp, sp, #8
   28668:	mov	r4, r1
   2866c:	mov	r5, r0
   28670:	movw	r0, #45021	; 0xafdd
   28674:	movt	r0, #2
   28678:	movw	r1, #45048	; 0xaff8
   2867c:	movt	r1, #2
   28680:	cmn	r2, #1
   28684:	moveq	r1, r0
   28688:	mov	r0, #0
   2868c:	mov	r2, #5
   28690:	bl	11970 <dcgettext@plt>
   28694:	mov	r6, r0
   28698:	mov	r0, #0
   2869c:	mov	r1, #8
   286a0:	mov	r2, r4
   286a4:	bl	18984 <__assert_fail@plt+0x6c84>
   286a8:	mov	r4, r0
   286ac:	mov	r0, #1
   286b0:	mov	r1, r5
   286b4:	bl	18c20 <__assert_fail@plt+0x6f20>
   286b8:	str	r0, [sp]
   286bc:	mov	r0, #0
   286c0:	mov	r1, #0
   286c4:	mov	r2, r6
   286c8:	mov	r3, r4
   286cc:	bl	11a18 <error@plt>
   286d0:	sub	sp, fp, #16
   286d4:	pop	{r4, r5, r6, sl, fp, pc}
   286d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286dc:	add	fp, sp, #28
   286e0:	sub	sp, sp, #4
   286e4:	mov	r9, r2
   286e8:	mov	r5, r1
   286ec:	mov	r7, r0
   286f0:	mov	r8, #0
   286f4:	movw	r1, #45077	; 0xb015
   286f8:	movt	r1, #2
   286fc:	mov	r0, #0
   28700:	mov	r2, #5
   28704:	bl	11970 <dcgettext@plt>
   28708:	movw	sl, #49688	; 0xc218
   2870c:	movt	sl, #3
   28710:	ldr	r1, [sl]
   28714:	bl	11cac <fputs@plt>
   28718:	ldr	r6, [r7]
   2871c:	cmp	r6, #0
   28720:	bne	28738 <__assert_fail@plt+0x16a38>
   28724:	ldr	r1, [sl]
   28728:	mov	r0, #10
   2872c:	sub	sp, fp, #28
   28730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28734:	b	11c58 <putc@plt>
   28738:	add	r4, r7, #4
   2873c:	mov	r7, #0
   28740:	str	r4, [sp]
   28744:	cmp	r8, #0
   28748:	bne	2878c <__assert_fail@plt+0x16a8c>
   2874c:	ldr	r7, [sl]
   28750:	mov	r0, r6
   28754:	bl	18c28 <__assert_fail@plt+0x6f28>
   28758:	mov	r2, r0
   2875c:	mov	r0, r7
   28760:	movw	r1, #45098	; 0xb02a
   28764:	movt	r1, #2
   28768:	bl	11b08 <fprintf@plt>
   2876c:	mov	r7, r5
   28770:	add	r5, r5, r9
   28774:	ldr	r6, [r4, -r8, lsl #2]
   28778:	sub	r8, r8, #1
   2877c:	cmp	r6, #0
   28780:	beq	28724 <__assert_fail@plt+0x16a24>
   28784:	cmp	r8, #0
   28788:	beq	2874c <__assert_fail@plt+0x16a4c>
   2878c:	mov	r0, r7
   28790:	mov	r1, r5
   28794:	mov	r2, r9
   28798:	bl	11ad8 <bcmp@plt>
   2879c:	cmp	r0, #0
   287a0:	bne	2874c <__assert_fail@plt+0x16a4c>
   287a4:	ldr	r4, [sl]
   287a8:	mov	r0, r6
   287ac:	bl	18c28 <__assert_fail@plt+0x6f28>
   287b0:	mov	r2, r0
   287b4:	mov	r0, r4
   287b8:	ldr	r4, [sp]
   287bc:	movw	r1, #45106	; 0xb032
   287c0:	movt	r1, #2
   287c4:	bl	11b08 <fprintf@plt>
   287c8:	b	28770 <__assert_fail@plt+0x16a70>
   287cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   287d0:	add	fp, sp, #24
   287d4:	mov	r4, r3
   287d8:	mov	r5, r2
   287dc:	mov	r7, r1
   287e0:	mov	r6, r0
   287e4:	ldr	r8, [fp, #8]
   287e8:	mov	r0, r1
   287ec:	mov	r1, r2
   287f0:	mov	r2, r3
   287f4:	mov	r3, r8
   287f8:	bl	28564 <__assert_fail@plt+0x16864>
   287fc:	mov	r2, r0
   28800:	cmn	r0, #1
   28804:	ble	28810 <__assert_fail@plt+0x16b10>
   28808:	mov	r0, r2
   2880c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28810:	ldr	r9, [fp, #12]
   28814:	mov	r0, r6
   28818:	mov	r1, r7
   2881c:	bl	2865c <__assert_fail@plt+0x1695c>
   28820:	mov	r0, r5
   28824:	mov	r1, r4
   28828:	mov	r2, r8
   2882c:	bl	286d8 <__assert_fail@plt+0x169d8>
   28830:	blx	r9
   28834:	mvn	r2, #0
   28838:	mov	r0, r2
   2883c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   28840:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28844:	add	fp, sp, #24
   28848:	ldr	r6, [r1]
   2884c:	cmp	r6, #0
   28850:	beq	288b4 <__assert_fail@plt+0x16bb4>
   28854:	mov	r4, r3
   28858:	mov	r7, r2
   2885c:	mov	r8, r1
   28860:	mov	r9, r0
   28864:	mov	r1, r2
   28868:	mov	r2, r3
   2886c:	bl	11ad8 <bcmp@plt>
   28870:	cmp	r0, #0
   28874:	beq	288ac <__assert_fail@plt+0x16bac>
   28878:	add	r7, r7, r4
   2887c:	add	r5, r8, #4
   28880:	ldr	r6, [r5]
   28884:	cmp	r6, #0
   28888:	beq	288b4 <__assert_fail@plt+0x16bb4>
   2888c:	mov	r0, r9
   28890:	mov	r1, r7
   28894:	mov	r2, r4
   28898:	bl	11ad8 <bcmp@plt>
   2889c:	add	r7, r7, r4
   288a0:	add	r5, r5, #4
   288a4:	cmp	r0, #0
   288a8:	bne	28880 <__assert_fail@plt+0x16b80>
   288ac:	mov	r0, r6
   288b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   288b4:	mov	r6, #0
   288b8:	mov	r0, r6
   288bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   288c0:	mov	r1, r0
   288c4:	sub	r2, r0, #65	; 0x41
   288c8:	mov	r0, #1
   288cc:	cmp	r2, #26
   288d0:	subcs	r2, r1, #97	; 0x61
   288d4:	cmpcs	r2, #26
   288d8:	bcs	288e0 <__assert_fail@plt+0x16be0>
   288dc:	bx	lr
   288e0:	sub	r1, r1, #48	; 0x30
   288e4:	cmp	r1, #10
   288e8:	movcs	r0, #0
   288ec:	bx	lr
   288f0:	mov	r1, r0
   288f4:	sub	r2, r0, #65	; 0x41
   288f8:	mov	r0, #1
   288fc:	cmp	r2, #26
   28900:	subcs	r1, r1, #97	; 0x61
   28904:	cmpcs	r1, #26
   28908:	movcs	r0, #0
   2890c:	bx	lr
   28910:	mov	r1, #0
   28914:	cmp	r0, #128	; 0x80
   28918:	movwcc	r1, #1
   2891c:	mov	r0, r1
   28920:	bx	lr
   28924:	sub	r1, r0, #9
   28928:	clz	r1, r1
   2892c:	lsr	r1, r1, #5
   28930:	sub	r0, r0, #32
   28934:	clz	r0, r0
   28938:	lsr	r0, r0, #5
   2893c:	orr	r0, r0, r1
   28940:	bx	lr
   28944:	mov	r1, r0
   28948:	mov	r0, #1
   2894c:	cmp	r1, #32
   28950:	bxcc	lr
   28954:	cmp	r1, #127	; 0x7f
   28958:	movne	r0, #0
   2895c:	bx	lr
   28960:	sub	r1, r0, #48	; 0x30
   28964:	mov	r0, #0
   28968:	cmp	r1, #10
   2896c:	movwcc	r0, #1
   28970:	bx	lr
   28974:	sub	r1, r0, #33	; 0x21
   28978:	mov	r0, #0
   2897c:	cmp	r1, #94	; 0x5e
   28980:	movwcc	r0, #1
   28984:	bx	lr
   28988:	sub	r1, r0, #97	; 0x61
   2898c:	mov	r0, #0
   28990:	cmp	r1, #26
   28994:	movwcc	r0, #1
   28998:	bx	lr
   2899c:	sub	r1, r0, #32
   289a0:	mov	r0, #0
   289a4:	cmp	r1, #95	; 0x5f
   289a8:	movwcc	r0, #1
   289ac:	bx	lr
   289b0:	sub	r1, r0, #33	; 0x21
   289b4:	cmp	r1, #93	; 0x5d
   289b8:	bhi	28b44 <__assert_fail@plt+0x16e44>
   289bc:	mov	r0, #1
   289c0:	add	r2, pc, #0
   289c4:	ldr	pc, [r2, r1, lsl #2]
   289c8:	andeq	r8, r2, r0, asr #22
   289cc:	andeq	r8, r2, r0, asr #22
   289d0:	andeq	r8, r2, r0, asr #22
   289d4:	andeq	r8, r2, r0, asr #22
   289d8:	andeq	r8, r2, r0, asr #22
   289dc:	andeq	r8, r2, r0, asr #22
   289e0:	andeq	r8, r2, r0, asr #22
   289e4:	andeq	r8, r2, r0, asr #22
   289e8:	andeq	r8, r2, r0, asr #22
   289ec:	andeq	r8, r2, r0, asr #22
   289f0:	andeq	r8, r2, r0, asr #22
   289f4:	andeq	r8, r2, r0, asr #22
   289f8:	andeq	r8, r2, r0, asr #22
   289fc:	andeq	r8, r2, r0, asr #22
   28a00:	andeq	r8, r2, r0, asr #22
   28a04:	andeq	r8, r2, r4, asr #22
   28a08:	andeq	r8, r2, r4, asr #22
   28a0c:	andeq	r8, r2, r4, asr #22
   28a10:	andeq	r8, r2, r4, asr #22
   28a14:	andeq	r8, r2, r4, asr #22
   28a18:	andeq	r8, r2, r4, asr #22
   28a1c:	andeq	r8, r2, r4, asr #22
   28a20:	andeq	r8, r2, r4, asr #22
   28a24:	andeq	r8, r2, r4, asr #22
   28a28:	andeq	r8, r2, r4, asr #22
   28a2c:	andeq	r8, r2, r0, asr #22
   28a30:	andeq	r8, r2, r0, asr #22
   28a34:	andeq	r8, r2, r0, asr #22
   28a38:	andeq	r8, r2, r0, asr #22
   28a3c:	andeq	r8, r2, r0, asr #22
   28a40:	andeq	r8, r2, r0, asr #22
   28a44:	andeq	r8, r2, r0, asr #22
   28a48:	andeq	r8, r2, r4, asr #22
   28a4c:	andeq	r8, r2, r4, asr #22
   28a50:	andeq	r8, r2, r4, asr #22
   28a54:	andeq	r8, r2, r4, asr #22
   28a58:	andeq	r8, r2, r4, asr #22
   28a5c:	andeq	r8, r2, r4, asr #22
   28a60:	andeq	r8, r2, r4, asr #22
   28a64:	andeq	r8, r2, r4, asr #22
   28a68:	andeq	r8, r2, r4, asr #22
   28a6c:	andeq	r8, r2, r4, asr #22
   28a70:	andeq	r8, r2, r4, asr #22
   28a74:	andeq	r8, r2, r4, asr #22
   28a78:	andeq	r8, r2, r4, asr #22
   28a7c:	andeq	r8, r2, r4, asr #22
   28a80:	andeq	r8, r2, r4, asr #22
   28a84:	andeq	r8, r2, r4, asr #22
   28a88:	andeq	r8, r2, r4, asr #22
   28a8c:	andeq	r8, r2, r4, asr #22
   28a90:	andeq	r8, r2, r4, asr #22
   28a94:	andeq	r8, r2, r4, asr #22
   28a98:	andeq	r8, r2, r4, asr #22
   28a9c:	andeq	r8, r2, r4, asr #22
   28aa0:	andeq	r8, r2, r4, asr #22
   28aa4:	andeq	r8, r2, r4, asr #22
   28aa8:	andeq	r8, r2, r4, asr #22
   28aac:	andeq	r8, r2, r4, asr #22
   28ab0:	andeq	r8, r2, r0, asr #22
   28ab4:	andeq	r8, r2, r0, asr #22
   28ab8:	andeq	r8, r2, r0, asr #22
   28abc:	andeq	r8, r2, r0, asr #22
   28ac0:	andeq	r8, r2, r0, asr #22
   28ac4:	andeq	r8, r2, r0, asr #22
   28ac8:	andeq	r8, r2, r4, asr #22
   28acc:	andeq	r8, r2, r4, asr #22
   28ad0:	andeq	r8, r2, r4, asr #22
   28ad4:	andeq	r8, r2, r4, asr #22
   28ad8:	andeq	r8, r2, r4, asr #22
   28adc:	andeq	r8, r2, r4, asr #22
   28ae0:	andeq	r8, r2, r4, asr #22
   28ae4:	andeq	r8, r2, r4, asr #22
   28ae8:	andeq	r8, r2, r4, asr #22
   28aec:	andeq	r8, r2, r4, asr #22
   28af0:	andeq	r8, r2, r4, asr #22
   28af4:	andeq	r8, r2, r4, asr #22
   28af8:	andeq	r8, r2, r4, asr #22
   28afc:	andeq	r8, r2, r4, asr #22
   28b00:	andeq	r8, r2, r4, asr #22
   28b04:	andeq	r8, r2, r4, asr #22
   28b08:	andeq	r8, r2, r4, asr #22
   28b0c:	andeq	r8, r2, r4, asr #22
   28b10:	andeq	r8, r2, r4, asr #22
   28b14:	andeq	r8, r2, r4, asr #22
   28b18:	andeq	r8, r2, r4, asr #22
   28b1c:	andeq	r8, r2, r4, asr #22
   28b20:	andeq	r8, r2, r4, asr #22
   28b24:	andeq	r8, r2, r4, asr #22
   28b28:	andeq	r8, r2, r4, asr #22
   28b2c:	andeq	r8, r2, r4, asr #22
   28b30:	andeq	r8, r2, r0, asr #22
   28b34:	andeq	r8, r2, r0, asr #22
   28b38:	andeq	r8, r2, r0, asr #22
   28b3c:	andeq	r8, r2, r0, asr #22
   28b40:	bx	lr
   28b44:	mov	r0, #0
   28b48:	bx	lr
   28b4c:	sub	r0, r0, #9
   28b50:	cmp	r0, #23
   28b54:	movhi	r0, #0
   28b58:	bxhi	lr
   28b5c:	bic	r0, r0, #-16777216	; 0xff000000
   28b60:	movw	r1, #31
   28b64:	movt	r1, #128	; 0x80
   28b68:	mov	r2, #1
   28b6c:	and	r0, r2, r1, lsr r0
   28b70:	bx	lr
   28b74:	sub	r1, r0, #65	; 0x41
   28b78:	mov	r0, #0
   28b7c:	cmp	r1, #26
   28b80:	movwcc	r0, #1
   28b84:	bx	lr
   28b88:	mov	r1, r0
   28b8c:	sub	r2, r0, #48	; 0x30
   28b90:	mov	r0, #1
   28b94:	cmp	r2, #22
   28b98:	bhi	28bb0 <__assert_fail@plt+0x16eb0>
   28b9c:	mov	ip, #1
   28ba0:	movw	r3, #1023	; 0x3ff
   28ba4:	movt	r3, #126	; 0x7e
   28ba8:	tst	r3, ip, lsl r2
   28bac:	bxne	lr
   28bb0:	sub	r1, r1, #97	; 0x61
   28bb4:	cmp	r1, #6
   28bb8:	movcs	r0, #0
   28bbc:	bxcs	lr
   28bc0:	bx	lr
   28bc4:	sub	r1, r0, #65	; 0x41
   28bc8:	cmp	r1, #26
   28bcc:	addcc	r0, r0, #32
   28bd0:	bx	lr
   28bd4:	sub	r1, r0, #97	; 0x61
   28bd8:	cmp	r1, #26
   28bdc:	subcc	r0, r0, #32
   28be0:	bx	lr
   28be4:	push	{r4, r5, r6, sl, fp, lr}
   28be8:	add	fp, sp, #16
   28bec:	mov	r4, r0
   28bf0:	bl	11a00 <__fpending@plt>
   28bf4:	mov	r5, r0
   28bf8:	mov	r0, r4
   28bfc:	bl	11904 <ferror@plt>
   28c00:	mov	r6, r0
   28c04:	mov	r0, r4
   28c08:	bl	11bbc <fclose@plt>
   28c0c:	cmp	r6, #0
   28c10:	beq	28c34 <__assert_fail@plt+0x16f34>
   28c14:	mvn	r4, #0
   28c18:	cmp	r0, #0
   28c1c:	bne	28c60 <__assert_fail@plt+0x16f60>
   28c20:	bl	11b20 <__errno_location@plt>
   28c24:	mov	r1, #0
   28c28:	str	r1, [r0]
   28c2c:	mov	r0, r4
   28c30:	pop	{r4, r5, r6, sl, fp, pc}
   28c34:	cmp	r0, #0
   28c38:	mov	r4, r0
   28c3c:	mvnne	r4, #0
   28c40:	cmp	r5, #0
   28c44:	bne	28c60 <__assert_fail@plt+0x16f60>
   28c48:	cmp	r0, #0
   28c4c:	beq	28c60 <__assert_fail@plt+0x16f60>
   28c50:	bl	11b20 <__errno_location@plt>
   28c54:	ldr	r0, [r0]
   28c58:	subs	r4, r0, #9
   28c5c:	mvnne	r4, #0
   28c60:	mov	r0, r4
   28c64:	pop	{r4, r5, r6, sl, fp, pc}
   28c68:	push	{r4, r5, r6, r7, fp, lr}
   28c6c:	add	fp, sp, #16
   28c70:	mov	r5, r1
   28c74:	mov	r4, r0
   28c78:	ldr	r0, [r0, #4]
   28c7c:	cmp	r0, r1
   28c80:	bcs	28cb4 <__assert_fail@plt+0x16fb4>
   28c84:	mov	r6, r3
   28c88:	cmp	r3, #0
   28c8c:	beq	28cc0 <__assert_fail@plt+0x16fc0>
   28c90:	mvn	r0, #0
   28c94:	udiv	r0, r0, r6
   28c98:	cmp	r0, r5
   28c9c:	bcs	28cc0 <__assert_fail@plt+0x16fc0>
   28ca0:	bl	11b20 <__errno_location@plt>
   28ca4:	mov	r1, #12
   28ca8:	str	r1, [r0]
   28cac:	mov	r0, #0
   28cb0:	pop	{r4, r5, r6, r7, fp, pc}
   28cb4:	str	r5, [r4]
   28cb8:	mov	r0, #1
   28cbc:	pop	{r4, r5, r6, r7, fp, pc}
   28cc0:	mul	r1, r6, r5
   28cc4:	ldr	r0, [r4, #8]
   28cc8:	cmp	r0, r2
   28ccc:	beq	28ce4 <__assert_fail@plt+0x16fe4>
   28cd0:	bl	1a350 <__assert_fail@plt+0x8650>
   28cd4:	mov	r7, r0
   28cd8:	cmp	r0, #0
   28cdc:	bne	28d14 <__assert_fail@plt+0x17014>
   28ce0:	b	28d24 <__assert_fail@plt+0x17024>
   28ce4:	mov	r0, r1
   28ce8:	bl	1a2bc <__assert_fail@plt+0x85bc>
   28cec:	cmp	r0, #0
   28cf0:	beq	28d24 <__assert_fail@plt+0x17024>
   28cf4:	mov	r7, r0
   28cf8:	ldr	r1, [r4, #8]
   28cfc:	cmp	r1, #0
   28d00:	beq	28d14 <__assert_fail@plt+0x17014>
   28d04:	ldr	r0, [r4]
   28d08:	mul	r2, r0, r6
   28d0c:	mov	r0, r7
   28d10:	bl	11928 <memcpy@plt>
   28d14:	str	r5, [r4]
   28d18:	stmib	r4, {r5, r7}
   28d1c:	mov	r0, #1
   28d20:	pop	{r4, r5, r6, r7, fp, pc}
   28d24:	mov	r0, #0
   28d28:	pop	{r4, r5, r6, r7, fp, pc}
   28d2c:	push	{r4, sl, fp, lr}
   28d30:	add	fp, sp, #8
   28d34:	sub	sp, sp, #264	; 0x108
   28d38:	add	r1, sp, #7
   28d3c:	movw	r2, #257	; 0x101
   28d40:	bl	28f60 <__assert_fail@plt+0x17260>
   28d44:	mov	r4, #0
   28d48:	cmp	r0, #0
   28d4c:	bne	28d8c <__assert_fail@plt+0x1708c>
   28d50:	add	r0, sp, #7
   28d54:	movw	r1, #45111	; 0xb037
   28d58:	movt	r1, #2
   28d5c:	mov	r2, #2
   28d60:	bl	11ad8 <bcmp@plt>
   28d64:	cmp	r0, #0
   28d68:	beq	28d8c <__assert_fail@plt+0x1708c>
   28d6c:	add	r0, sp, #7
   28d70:	movw	r1, #45113	; 0xb039
   28d74:	movt	r1, #2
   28d78:	mov	r2, #6
   28d7c:	bl	11ad8 <bcmp@plt>
   28d80:	mov	r4, r0
   28d84:	cmp	r0, #0
   28d88:	movwne	r4, #1
   28d8c:	mov	r0, r4
   28d90:	sub	sp, fp, #8
   28d94:	pop	{r4, sl, fp, pc}
   28d98:	push	{fp, lr}
   28d9c:	mov	fp, sp
   28da0:	bl	11b20 <__errno_location@plt>
   28da4:	mov	r1, #12
   28da8:	str	r1, [r0]
   28dac:	mov	r0, #0
   28db0:	pop	{fp, pc}
   28db4:	b	1a2bc <__assert_fail@plt+0x85bc>
   28db8:	cmp	r1, #0
   28dbc:	orreq	r1, r1, #1
   28dc0:	b	1a350 <__assert_fail@plt+0x8650>
   28dc4:	b	19f4c <__assert_fail@plt+0x824c>
   28dc8:	clz	r3, r2
   28dcc:	lsr	ip, r3, #5
   28dd0:	clz	r3, r1
   28dd4:	lsr	r3, r3, #5
   28dd8:	orrs	r3, r3, ip
   28ddc:	movwne	r1, #1
   28de0:	movwne	r2, #1
   28de4:	b	1a3a4 <__assert_fail@plt+0x86a4>
   28de8:	push	{fp, lr}
   28dec:	mov	fp, sp
   28df0:	mov	r0, #14
   28df4:	bl	11c10 <nl_langinfo@plt>
   28df8:	movw	r1, #41671	; 0xa2c7
   28dfc:	movt	r1, #2
   28e00:	cmp	r0, #0
   28e04:	movne	r1, r0
   28e08:	ldrb	r2, [r1]
   28e0c:	movw	r0, #45119	; 0xb03f
   28e10:	movt	r0, #2
   28e14:	cmp	r2, #0
   28e18:	movne	r0, r1
   28e1c:	pop	{fp, pc}
   28e20:	push	{r4, sl, fp, lr}
   28e24:	add	fp, sp, #8
   28e28:	mov	r4, #0
   28e2c:	adds	r0, r0, #16
   28e30:	adc	r1, r4, #0
   28e34:	rsb	r2, r1, #0
   28e38:	eors	r2, r2, r1
   28e3c:	movwne	r2, #1
   28e40:	cmp	r0, #0
   28e44:	bmi	28e64 <__assert_fail@plt+0x17164>
   28e48:	cmp	r2, #0
   28e4c:	asreq	r2, r0, #31
   28e50:	eoreq	r3, r0, r0
   28e54:	andeq	r2, r2, #1
   28e58:	eoreq	r1, r1, r2
   28e5c:	orrseq	r1, r3, r1
   28e60:	beq	28e6c <__assert_fail@plt+0x1716c>
   28e64:	mov	r0, r4
   28e68:	pop	{r4, sl, fp, pc}
   28e6c:	bl	11a54 <malloc@plt>
   28e70:	cmp	r0, #0
   28e74:	addne	r4, r0, #8
   28e78:	movne	r1, #8
   28e7c:	bfine	r4, r1, #0, #4
   28e80:	subne	r0, r4, r0
   28e84:	strbne	r0, [r4, #-1]
   28e88:	mov	r0, r4
   28e8c:	pop	{r4, sl, fp, pc}
   28e90:	push	{fp, lr}
   28e94:	mov	fp, sp
   28e98:	tst	r0, #7
   28e9c:	bne	28eb8 <__assert_fail@plt+0x171b8>
   28ea0:	tst	r0, #8
   28ea4:	popeq	{fp, pc}
   28ea8:	ldrb	r1, [r0, #-1]
   28eac:	sub	r0, r0, r1
   28eb0:	pop	{fp, lr}
   28eb4:	b	1a1ec <__assert_fail@plt+0x84ec>
   28eb8:	bl	11cc4 <abort@plt>
   28ebc:	push	{r4, sl, fp, lr}
   28ec0:	add	fp, sp, #8
   28ec4:	mov	r4, r0
   28ec8:	bl	118c8 <wcwidth@plt>
   28ecc:	cmn	r0, #1
   28ed0:	popgt	{r4, sl, fp, pc}
   28ed4:	mov	r0, r4
   28ed8:	bl	11994 <iswcntrl@plt>
   28edc:	clz	r0, r0
   28ee0:	lsr	r0, r0, #5
   28ee4:	pop	{r4, sl, fp, pc}
   28ee8:	push	{r4, r5, r6, sl, fp, lr}
   28eec:	add	fp, sp, #16
   28ef0:	mov	r5, r1
   28ef4:	mov	r4, r0
   28ef8:	ldr	r6, [r1], #16
   28efc:	cmp	r6, r1
   28f00:	bne	28f14 <__assert_fail@plt+0x17214>
   28f04:	ldr	r2, [r5, #4]
   28f08:	add	r6, r4, #16
   28f0c:	mov	r0, r6
   28f10:	bl	11928 <memcpy@plt>
   28f14:	str	r6, [r4]
   28f18:	ldr	r0, [r5, #4]
   28f1c:	str	r0, [r4, #4]
   28f20:	ldrb	r0, [r5, #8]
   28f24:	strb	r0, [r4, #8]
   28f28:	cmp	r0, #0
   28f2c:	ldrne	r0, [r5, #12]
   28f30:	strne	r0, [r4, #12]
   28f34:	pop	{r4, r5, r6, sl, fp, pc}
   28f38:	ubfx	r1, r0, #5, #3
   28f3c:	movw	r2, #45128	; 0xb048
   28f40:	movt	r2, #2
   28f44:	ldr	r1, [r2, r1, lsl #2]
   28f48:	and	r0, r0, #31
   28f4c:	mov	r2, #1
   28f50:	and	r0, r1, r2, lsl r0
   28f54:	cmp	r0, #0
   28f58:	movwne	r0, #1
   28f5c:	bx	lr
   28f60:	b	28f64 <__assert_fail@plt+0x17264>
   28f64:	push	{r4, r5, r6, r7, fp, lr}
   28f68:	add	fp, sp, #16
   28f6c:	mov	r6, r2
   28f70:	mov	r4, r1
   28f74:	bl	28ffc <__assert_fail@plt+0x172fc>
   28f78:	cmp	r0, #0
   28f7c:	beq	28fac <__assert_fail@plt+0x172ac>
   28f80:	mov	r7, r0
   28f84:	bl	11af0 <strlen@plt>
   28f88:	cmp	r0, r6
   28f8c:	bcs	28fc8 <__assert_fail@plt+0x172c8>
   28f90:	add	r2, r0, #1
   28f94:	mov	r0, r4
   28f98:	mov	r1, r7
   28f9c:	bl	11928 <memcpy@plt>
   28fa0:	mov	r5, #0
   28fa4:	mov	r0, r5
   28fa8:	pop	{r4, r5, r6, r7, fp, pc}
   28fac:	mov	r5, #22
   28fb0:	cmp	r6, #0
   28fb4:	beq	28ff0 <__assert_fail@plt+0x172f0>
   28fb8:	mov	r0, #0
   28fbc:	strb	r0, [r4]
   28fc0:	mov	r0, r5
   28fc4:	pop	{r4, r5, r6, r7, fp, pc}
   28fc8:	mov	r5, #34	; 0x22
   28fcc:	cmp	r6, #0
   28fd0:	beq	28ff0 <__assert_fail@plt+0x172f0>
   28fd4:	sub	r6, r6, #1
   28fd8:	mov	r0, r4
   28fdc:	mov	r1, r7
   28fe0:	mov	r2, r6
   28fe4:	bl	11928 <memcpy@plt>
   28fe8:	mov	r0, #0
   28fec:	strb	r0, [r4, r6]
   28ff0:	mov	r0, r5
   28ff4:	pop	{r4, r5, r6, r7, fp, pc}
   28ff8:	b	28ffc <__assert_fail@plt+0x172fc>
   28ffc:	mov	r1, #0
   29000:	b	11bec <setlocale@plt>
   29004:	mov	r1, #0
   29008:	mov	r2, #3
   2900c:	b	19fa0 <__assert_fail@plt+0x82a0>
   29010:	eor	r1, r1, #-2147483648	; 0x80000000
   29014:	b	2901c <__assert_fail@plt+0x1731c>
   29018:	eor	r3, r3, #-2147483648	; 0x80000000
   2901c:	push	{r4, r5, lr}
   29020:	lsl	r4, r1, #1
   29024:	lsl	r5, r3, #1
   29028:	teq	r4, r5
   2902c:	teqeq	r0, r2
   29030:	orrsne	ip, r4, r0
   29034:	orrsne	ip, r5, r2
   29038:	mvnsne	ip, r4, asr #21
   2903c:	mvnsne	ip, r5, asr #21
   29040:	beq	2922c <__assert_fail@plt+0x1752c>
   29044:	lsr	r4, r4, #21
   29048:	rsbs	r5, r4, r5, lsr #21
   2904c:	rsblt	r5, r5, #0
   29050:	ble	29070 <__assert_fail@plt+0x17370>
   29054:	add	r4, r4, r5
   29058:	eor	r2, r0, r2
   2905c:	eor	r3, r1, r3
   29060:	eor	r0, r2, r0
   29064:	eor	r1, r3, r1
   29068:	eor	r2, r0, r2
   2906c:	eor	r3, r1, r3
   29070:	cmp	r5, #54	; 0x36
   29074:	pophi	{r4, r5, pc}
   29078:	tst	r1, #-2147483648	; 0x80000000
   2907c:	lsl	r1, r1, #12
   29080:	mov	ip, #1048576	; 0x100000
   29084:	orr	r1, ip, r1, lsr #12
   29088:	beq	29094 <__assert_fail@plt+0x17394>
   2908c:	rsbs	r0, r0, #0
   29090:	rsc	r1, r1, #0
   29094:	tst	r3, #-2147483648	; 0x80000000
   29098:	lsl	r3, r3, #12
   2909c:	orr	r3, ip, r3, lsr #12
   290a0:	beq	290ac <__assert_fail@plt+0x173ac>
   290a4:	rsbs	r2, r2, #0
   290a8:	rsc	r3, r3, #0
   290ac:	teq	r4, r5
   290b0:	beq	29214 <__assert_fail@plt+0x17514>
   290b4:	sub	r4, r4, #1
   290b8:	rsbs	lr, r5, #32
   290bc:	blt	290d8 <__assert_fail@plt+0x173d8>
   290c0:	lsl	ip, r2, lr
   290c4:	adds	r0, r0, r2, lsr r5
   290c8:	adc	r1, r1, #0
   290cc:	adds	r0, r0, r3, lsl lr
   290d0:	adcs	r1, r1, r3, asr r5
   290d4:	b	290f4 <__assert_fail@plt+0x173f4>
   290d8:	sub	r5, r5, #32
   290dc:	add	lr, lr, #32
   290e0:	cmp	r2, #1
   290e4:	lsl	ip, r3, lr
   290e8:	orrcs	ip, ip, #2
   290ec:	adds	r0, r0, r3, asr r5
   290f0:	adcs	r1, r1, r3, asr #31
   290f4:	and	r5, r1, #-2147483648	; 0x80000000
   290f8:	bpl	29108 <__assert_fail@plt+0x17408>
   290fc:	rsbs	ip, ip, #0
   29100:	rscs	r0, r0, #0
   29104:	rsc	r1, r1, #0
   29108:	cmp	r1, #1048576	; 0x100000
   2910c:	bcc	2914c <__assert_fail@plt+0x1744c>
   29110:	cmp	r1, #2097152	; 0x200000
   29114:	bcc	29134 <__assert_fail@plt+0x17434>
   29118:	lsrs	r1, r1, #1
   2911c:	rrxs	r0, r0
   29120:	rrx	ip, ip
   29124:	add	r4, r4, #1
   29128:	lsl	r2, r4, #21
   2912c:	cmn	r2, #4194304	; 0x400000
   29130:	bcs	2928c <__assert_fail@plt+0x1758c>
   29134:	cmp	ip, #-2147483648	; 0x80000000
   29138:	lsrseq	ip, r0, #1
   2913c:	adcs	r0, r0, #0
   29140:	adc	r1, r1, r4, lsl #20
   29144:	orr	r1, r1, r5
   29148:	pop	{r4, r5, pc}
   2914c:	lsls	ip, ip, #1
   29150:	adcs	r0, r0, r0
   29154:	adc	r1, r1, r1
   29158:	tst	r1, #1048576	; 0x100000
   2915c:	sub	r4, r4, #1
   29160:	bne	29134 <__assert_fail@plt+0x17434>
   29164:	teq	r1, #0
   29168:	moveq	r1, r0
   2916c:	moveq	r0, #0
   29170:	clz	r3, r1
   29174:	addeq	r3, r3, #32
   29178:	sub	r3, r3, #11
   2917c:	subs	r2, r3, #32
   29180:	bge	291a4 <__assert_fail@plt+0x174a4>
   29184:	adds	r2, r2, #12
   29188:	ble	291a0 <__assert_fail@plt+0x174a0>
   2918c:	add	ip, r2, #20
   29190:	rsb	r2, r2, #12
   29194:	lsl	r0, r1, ip
   29198:	lsr	r1, r1, r2
   2919c:	b	291b4 <__assert_fail@plt+0x174b4>
   291a0:	add	r2, r2, #20
   291a4:	rsble	ip, r2, #32
   291a8:	lsl	r1, r1, r2
   291ac:	orrle	r1, r1, r0, lsr ip
   291b0:	lslle	r0, r0, r2
   291b4:	subs	r4, r4, r3
   291b8:	addge	r1, r1, r4, lsl #20
   291bc:	orrge	r1, r1, r5
   291c0:	popge	{r4, r5, pc}
   291c4:	mvn	r4, r4
   291c8:	subs	r4, r4, #31
   291cc:	bge	29208 <__assert_fail@plt+0x17508>
   291d0:	adds	r4, r4, #12
   291d4:	bgt	291f0 <__assert_fail@plt+0x174f0>
   291d8:	add	r4, r4, #20
   291dc:	rsb	r2, r4, #32
   291e0:	lsr	r0, r0, r4
   291e4:	orr	r0, r0, r1, lsl r2
   291e8:	orr	r1, r5, r1, lsr r4
   291ec:	pop	{r4, r5, pc}
   291f0:	rsb	r4, r4, #12
   291f4:	rsb	r2, r4, #32
   291f8:	lsr	r0, r0, r2
   291fc:	orr	r0, r0, r1, lsl r4
   29200:	mov	r1, r5
   29204:	pop	{r4, r5, pc}
   29208:	lsr	r0, r1, r4
   2920c:	mov	r1, r5
   29210:	pop	{r4, r5, pc}
   29214:	teq	r4, #0
   29218:	eor	r3, r3, #1048576	; 0x100000
   2921c:	eoreq	r1, r1, #1048576	; 0x100000
   29220:	addeq	r4, r4, #1
   29224:	subne	r5, r5, #1
   29228:	b	290b4 <__assert_fail@plt+0x173b4>
   2922c:	mvns	ip, r4, asr #21
   29230:	mvnsne	ip, r5, asr #21
   29234:	beq	2929c <__assert_fail@plt+0x1759c>
   29238:	teq	r4, r5
   2923c:	teqeq	r0, r2
   29240:	beq	29254 <__assert_fail@plt+0x17554>
   29244:	orrs	ip, r4, r0
   29248:	moveq	r1, r3
   2924c:	moveq	r0, r2
   29250:	pop	{r4, r5, pc}
   29254:	teq	r1, r3
   29258:	movne	r1, #0
   2925c:	movne	r0, #0
   29260:	popne	{r4, r5, pc}
   29264:	lsrs	ip, r4, #21
   29268:	bne	2927c <__assert_fail@plt+0x1757c>
   2926c:	lsls	r0, r0, #1
   29270:	adcs	r1, r1, r1
   29274:	orrcs	r1, r1, #-2147483648	; 0x80000000
   29278:	pop	{r4, r5, pc}
   2927c:	adds	r4, r4, #4194304	; 0x400000
   29280:	addcc	r1, r1, #1048576	; 0x100000
   29284:	popcc	{r4, r5, pc}
   29288:	and	r5, r1, #-2147483648	; 0x80000000
   2928c:	orr	r1, r5, #2130706432	; 0x7f000000
   29290:	orr	r1, r1, #15728640	; 0xf00000
   29294:	mov	r0, #0
   29298:	pop	{r4, r5, pc}
   2929c:	mvns	ip, r4, asr #21
   292a0:	movne	r1, r3
   292a4:	movne	r0, r2
   292a8:	mvnseq	ip, r5, asr #21
   292ac:	movne	r3, r1
   292b0:	movne	r2, r0
   292b4:	orrs	r4, r0, r1, lsl #12
   292b8:	orrseq	r5, r2, r3, lsl #12
   292bc:	teqeq	r1, r3
   292c0:	orrne	r1, r1, #524288	; 0x80000
   292c4:	pop	{r4, r5, pc}
   292c8:	teq	r0, #0
   292cc:	moveq	r1, #0
   292d0:	bxeq	lr
   292d4:	push	{r4, r5, lr}
   292d8:	mov	r4, #1024	; 0x400
   292dc:	add	r4, r4, #50	; 0x32
   292e0:	mov	r5, #0
   292e4:	mov	r1, #0
   292e8:	b	29164 <__assert_fail@plt+0x17464>
   292ec:	teq	r0, #0
   292f0:	moveq	r1, #0
   292f4:	bxeq	lr
   292f8:	push	{r4, r5, lr}
   292fc:	mov	r4, #1024	; 0x400
   29300:	add	r4, r4, #50	; 0x32
   29304:	ands	r5, r0, #-2147483648	; 0x80000000
   29308:	rsbmi	r0, r0, #0
   2930c:	mov	r1, #0
   29310:	b	29164 <__assert_fail@plt+0x17464>
   29314:	lsls	r2, r0, #1
   29318:	asr	r1, r2, #3
   2931c:	rrx	r1, r1
   29320:	lsl	r0, r2, #28
   29324:	andsne	r3, r2, #-16777216	; 0xff000000
   29328:	teqne	r3, #-16777216	; 0xff000000
   2932c:	eorne	r1, r1, #939524096	; 0x38000000
   29330:	bxne	lr
   29334:	bics	r2, r2, #-16777216	; 0xff000000
   29338:	bxeq	lr
   2933c:	teq	r3, #-16777216	; 0xff000000
   29340:	orreq	r1, r1, #524288	; 0x80000
   29344:	bxeq	lr
   29348:	push	{r4, r5, lr}
   2934c:	mov	r4, #896	; 0x380
   29350:	and	r5, r1, #-2147483648	; 0x80000000
   29354:	bic	r1, r1, #-2147483648	; 0x80000000
   29358:	b	29164 <__assert_fail@plt+0x17464>
   2935c:	orrs	r2, r0, r1
   29360:	bxeq	lr
   29364:	push	{r4, r5, lr}
   29368:	mov	r5, #0
   2936c:	b	2938c <__assert_fail@plt+0x1768c>
   29370:	orrs	r2, r0, r1
   29374:	bxeq	lr
   29378:	push	{r4, r5, lr}
   2937c:	ands	r5, r1, #-2147483648	; 0x80000000
   29380:	bpl	2938c <__assert_fail@plt+0x1768c>
   29384:	rsbs	r0, r0, #0
   29388:	rsc	r1, r1, #0
   2938c:	mov	r4, #1024	; 0x400
   29390:	add	r4, r4, #50	; 0x32
   29394:	lsrs	ip, r1, #22
   29398:	beq	29108 <__assert_fail@plt+0x17408>
   2939c:	mov	r2, #3
   293a0:	lsrs	ip, ip, #3
   293a4:	addne	r2, r2, #3
   293a8:	lsrs	ip, ip, #3
   293ac:	addne	r2, r2, #3
   293b0:	add	r2, r2, ip, lsr #3
   293b4:	rsb	r3, r2, #32
   293b8:	lsl	ip, r0, r3
   293bc:	lsr	r0, r0, r2
   293c0:	orr	r0, r0, r1, lsl r3
   293c4:	lsr	r1, r1, r2
   293c8:	add	r4, r4, r2
   293cc:	b	29108 <__assert_fail@plt+0x17408>
   293d0:	cmp	r3, #0
   293d4:	cmpeq	r2, #0
   293d8:	bne	293f0 <__assert_fail@plt+0x176f0>
   293dc:	cmp	r1, #0
   293e0:	cmpeq	r0, #0
   293e4:	mvnne	r1, #0
   293e8:	mvnne	r0, #0
   293ec:	b	2940c <__assert_fail@plt+0x1770c>
   293f0:	sub	sp, sp, #8
   293f4:	push	{sp, lr}
   293f8:	bl	29460 <__assert_fail@plt+0x17760>
   293fc:	ldr	lr, [sp, #4]
   29400:	add	sp, sp, #8
   29404:	pop	{r2, r3}
   29408:	bx	lr
   2940c:	push	{r1, lr}
   29410:	mov	r0, #8
   29414:	bl	11874 <raise@plt>
   29418:	pop	{r1, pc}
   2941c:	andeq	r0, r0, r0
   29420:	vmov	d6, r0, r1
   29424:	vldr	d7, [pc, #36]	; 29450 <__assert_fail@plt+0x17750>
   29428:	vldr	d5, [pc, #40]	; 29458 <__assert_fail@plt+0x17758>
   2942c:	vmul.f64	d7, d6, d7
   29430:	vcvt.u32.f64	s14, d7
   29434:	vcvt.f64.u32	d4, s14
   29438:	vmov	r1, s14
   2943c:	vmls.f64	d6, d4, d5
   29440:	vcvt.u32.f64	s15, d6
   29444:	vmov	r0, s15
   29448:	bx	lr
   2944c:	nop			; (mov r0, r0)
   29450:	andeq	r0, r0, r0
   29454:	ldclcc	0, cr0, [r0]
   29458:	andeq	r0, r0, r0
   2945c:	mvnsmi	r0, r0
   29460:	cmp	r1, r3
   29464:	cmpeq	r0, r2
   29468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2946c:	mov	r4, r0
   29470:	movcc	r0, #0
   29474:	mov	r5, r1
   29478:	ldr	lr, [sp, #36]	; 0x24
   2947c:	movcc	r1, r0
   29480:	bcc	2957c <__assert_fail@plt+0x1787c>
   29484:	cmp	r3, #0
   29488:	clzeq	ip, r2
   2948c:	clzne	ip, r3
   29490:	addeq	ip, ip, #32
   29494:	cmp	r5, #0
   29498:	clzeq	r1, r4
   2949c:	addeq	r1, r1, #32
   294a0:	clzne	r1, r5
   294a4:	sub	ip, ip, r1
   294a8:	sub	sl, ip, #32
   294ac:	lsl	r9, r3, ip
   294b0:	rsb	fp, ip, #32
   294b4:	orr	r9, r9, r2, lsl sl
   294b8:	orr	r9, r9, r2, lsr fp
   294bc:	lsl	r8, r2, ip
   294c0:	cmp	r5, r9
   294c4:	cmpeq	r4, r8
   294c8:	movcc	r0, #0
   294cc:	movcc	r1, r0
   294d0:	bcc	294ec <__assert_fail@plt+0x177ec>
   294d4:	mov	r0, #1
   294d8:	subs	r4, r4, r8
   294dc:	lsl	r1, r0, sl
   294e0:	orr	r1, r1, r0, lsr fp
   294e4:	lsl	r0, r0, ip
   294e8:	sbc	r5, r5, r9
   294ec:	cmp	ip, #0
   294f0:	beq	2957c <__assert_fail@plt+0x1787c>
   294f4:	lsr	r6, r8, #1
   294f8:	orr	r6, r6, r9, lsl #31
   294fc:	lsr	r7, r9, #1
   29500:	mov	r2, ip
   29504:	b	29528 <__assert_fail@plt+0x17828>
   29508:	subs	r3, r4, r6
   2950c:	sbc	r8, r5, r7
   29510:	adds	r3, r3, r3
   29514:	adc	r8, r8, r8
   29518:	adds	r4, r3, #1
   2951c:	adc	r5, r8, #0
   29520:	subs	r2, r2, #1
   29524:	beq	29544 <__assert_fail@plt+0x17844>
   29528:	cmp	r5, r7
   2952c:	cmpeq	r4, r6
   29530:	bcs	29508 <__assert_fail@plt+0x17808>
   29534:	adds	r4, r4, r4
   29538:	adc	r5, r5, r5
   2953c:	subs	r2, r2, #1
   29540:	bne	29528 <__assert_fail@plt+0x17828>
   29544:	lsr	r3, r4, ip
   29548:	orr	r3, r3, r5, lsl fp
   2954c:	lsr	r2, r5, ip
   29550:	orr	r3, r3, r5, lsr sl
   29554:	adds	r0, r0, r4
   29558:	mov	r4, r3
   2955c:	lsl	r3, r2, ip
   29560:	orr	r3, r3, r4, lsl sl
   29564:	lsl	ip, r4, ip
   29568:	orr	r3, r3, r4, lsr fp
   2956c:	adc	r1, r1, r5
   29570:	subs	r0, r0, ip
   29574:	mov	r5, r2
   29578:	sbc	r1, r1, r3
   2957c:	cmp	lr, #0
   29580:	strdne	r4, [lr]
   29584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29588:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2958c:	mov	r7, r0
   29590:	ldr	r6, [pc, #72]	; 295e0 <__assert_fail@plt+0x178e0>
   29594:	ldr	r5, [pc, #72]	; 295e4 <__assert_fail@plt+0x178e4>
   29598:	add	r6, pc, r6
   2959c:	add	r5, pc, r5
   295a0:	sub	r6, r6, r5
   295a4:	mov	r8, r1
   295a8:	mov	r9, r2
   295ac:	bl	11824 <pthread_mutex_unlock@plt-0x20>
   295b0:	asrs	r6, r6, #2
   295b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   295b8:	mov	r4, #0
   295bc:	add	r4, r4, #1
   295c0:	ldr	r3, [r5], #4
   295c4:	mov	r2, r9
   295c8:	mov	r1, r8
   295cc:	mov	r0, r7
   295d0:	blx	r3
   295d4:	cmp	r6, r4
   295d8:	bne	295bc <__assert_fail@plt+0x178bc>
   295dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   295e0:	andeq	r2, r1, ip, ror #18
   295e4:	andeq	r2, r1, r4, ror #18
   295e8:	bx	lr
   295ec:	ldr	r3, [pc, #12]	; 29600 <__assert_fail@plt+0x17900>
   295f0:	mov	r1, #0
   295f4:	add	r3, pc, r3
   295f8:	ldr	r2, [r3]
   295fc:	b	11b44 <__cxa_atexit@plt>
   29600:			; <UNDEFINED> instruction: 0x00012bb0
   29604:	mov	r2, r1
   29608:	mov	r1, r0
   2960c:	mov	r0, #3
   29610:	b	11c88 <__xstat64@plt>
   29614:	mov	r2, r1
   29618:	mov	r1, r0
   2961c:	mov	r0, #3
   29620:	b	119c4 <__fxstat64@plt>
   29624:	mov	r2, r1
   29628:	mov	r1, r0
   2962c:	mov	r0, #3
   29630:	b	11ce8 <__lxstat64@plt>

Disassembly of section .fini:

00029634 <.fini>:
   29634:	push	{r3, lr}
   29638:	pop	{r3, pc}
