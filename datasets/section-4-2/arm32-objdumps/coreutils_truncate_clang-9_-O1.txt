
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010d98 <.init>:
   10d98:	push	{r3, lr}
   10d9c:	bl	11058 <__assert_fail@plt+0x48>
   10da0:	pop	{r3, pc}

Disassembly of section .plt:

00010da4 <calloc@plt-0x14>:
   10da4:	push	{lr}		; (str lr, [sp, #-4]!)
   10da8:	ldr	lr, [pc, #4]	; 10db4 <calloc@plt-0x4>
   10dac:	add	lr, pc, lr
   10db0:	ldr	pc, [lr, #8]!
   10db4:	andeq	r6, r1, ip, asr #4

00010db8 <calloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #588]!	; 0x24c

00010dc4 <fputs_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #580]!	; 0x244

00010dd0 <raise@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #572]!	; 0x23c

00010ddc <strcmp@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #564]!	; 0x234

00010de8 <fflush@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #556]!	; 0x22c

00010df4 <free@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #548]!	; 0x224

00010e00 <_exit@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #540]!	; 0x21c

00010e0c <memcpy@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #532]!	; 0x214

00010e18 <mbsinit@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #524]!	; 0x20c

00010e24 <ftruncate64@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #516]!	; 0x204

00010e30 <dcgettext@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #508]!	; 0x1fc

00010e3c <realloc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #500]!	; 0x1f4

00010e48 <textdomain@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #492]!	; 0x1ec

00010e54 <iswprint@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e60 <__fxstat64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #476]!	; 0x1dc

00010e6c <fwrite@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #468]!	; 0x1d4

00010e78 <lseek64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #460]!	; 0x1cc

00010e84 <__ctype_get_mb_cur_max@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e90 <__fpending@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #444]!	; 0x1bc

00010e9c <ferror_unlocked@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ea8 <mbrtowc@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #428]!	; 0x1ac

00010eb4 <error@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ec0 <open64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #412]!	; 0x19c

00010ecc <malloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #404]!	; 0x194

00010ed8 <__libc_start_main@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #396]!	; 0x18c

00010ee4 <__freading@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #388]!	; 0x184

00010ef0 <__gmon_start__@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #380]!	; 0x17c

00010efc <getopt_long@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #372]!	; 0x174

00010f08 <__ctype_b_loc@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #364]!	; 0x16c

00010f14 <exit@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #356]!	; 0x164

00010f20 <bcmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #348]!	; 0x15c

00010f2c <strlen@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #340]!	; 0x154

00010f38 <strchr@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #332]!	; 0x14c

00010f44 <__errno_location@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #324]!	; 0x144

00010f50 <__cxa_atexit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #316]!	; 0x13c

00010f5c <memset@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #308]!	; 0x134

00010f68 <__printf_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #300]!	; 0x12c

00010f74 <fileno@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #292]!	; 0x124

00010f80 <__fprintf_chk@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #284]!	; 0x11c

00010f8c <strtoimax@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #276]!	; 0x114

00010f98 <fclose@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #268]!	; 0x10c

00010fa4 <fseeko64@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #260]!	; 0x104

00010fb0 <setlocale@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #252]!	; 0xfc

00010fbc <strrchr@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #244]!	; 0xf4

00010fc8 <nl_langinfo@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #236]!	; 0xec

00010fd4 <bindtextdomain@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #228]!	; 0xe4

00010fe0 <__xstat64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #220]!	; 0xdc

00010fec <strncmp@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #212]!	; 0xd4

00010ff8 <abort@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #204]!	; 0xcc

00011004 <close@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #196]!	; 0xc4

00011010 <__assert_fail@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #188]!	; 0xbc

Disassembly of section .text:

0001101c <.text>:
   1101c:	mov	fp, #0
   11020:	mov	lr, #0
   11024:	pop	{r1}		; (ldr r1, [sp], #4)
   11028:	mov	r2, sp
   1102c:	push	{r2}		; (str r2, [sp, #-4]!)
   11030:	push	{r0}		; (str r0, [sp, #-4]!)
   11034:	ldr	ip, [pc, #16]	; 1104c <__assert_fail@plt+0x3c>
   11038:	push	{ip}		; (str ip, [sp, #-4]!)
   1103c:	ldr	r0, [pc, #12]	; 11050 <__assert_fail@plt+0x40>
   11040:	ldr	r3, [pc, #12]	; 11054 <__assert_fail@plt+0x44>
   11044:	bl	10ed8 <__libc_start_main@plt>
   11048:	bl	10ff8 <abort@plt>
   1104c:	andeq	r5, r1, r4, ror r7
   11050:	andeq	r1, r1, r8, asr r4
   11054:	andeq	r5, r1, r4, lsl r7
   11058:	ldr	r3, [pc, #20]	; 11074 <__assert_fail@plt+0x64>
   1105c:	ldr	r2, [pc, #20]	; 11078 <__assert_fail@plt+0x68>
   11060:	add	r3, pc, r3
   11064:	ldr	r2, [r3, r2]
   11068:	cmp	r2, #0
   1106c:	bxeq	lr
   11070:	b	10ef0 <__gmon_start__@plt>
   11074:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11078:	ldrdeq	r0, [r0], -r8
   1107c:	ldr	r0, [pc, #24]	; 1109c <__assert_fail@plt+0x8c>
   11080:	ldr	r3, [pc, #24]	; 110a0 <__assert_fail@plt+0x90>
   11084:	cmp	r3, r0
   11088:	bxeq	lr
   1108c:	ldr	r3, [pc, #16]	; 110a4 <__assert_fail@plt+0x94>
   11090:	cmp	r3, #0
   11094:	bxeq	lr
   11098:	bx	r3
   1109c:	andeq	r7, r2, r0, lsr r1
   110a0:	andeq	r7, r2, r0, lsr r1
   110a4:	andeq	r0, r0, r0
   110a8:	ldr	r0, [pc, #36]	; 110d4 <__assert_fail@plt+0xc4>
   110ac:	ldr	r1, [pc, #36]	; 110d8 <__assert_fail@plt+0xc8>
   110b0:	sub	r1, r1, r0
   110b4:	asr	r1, r1, #2
   110b8:	add	r1, r1, r1, lsr #31
   110bc:	asrs	r1, r1, #1
   110c0:	bxeq	lr
   110c4:	ldr	r3, [pc, #16]	; 110dc <__assert_fail@plt+0xcc>
   110c8:	cmp	r3, #0
   110cc:	bxeq	lr
   110d0:	bx	r3
   110d4:	andeq	r7, r2, r0, lsr r1
   110d8:	andeq	r7, r2, r0, lsr r1
   110dc:	andeq	r0, r0, r0
   110e0:	push	{r4, lr}
   110e4:	ldr	r4, [pc, #24]	; 11104 <__assert_fail@plt+0xf4>
   110e8:	ldrb	r3, [r4]
   110ec:	cmp	r3, #0
   110f0:	popne	{r4, pc}
   110f4:	bl	1107c <__assert_fail@plt+0x6c>
   110f8:	mov	r3, #1
   110fc:	strb	r3, [r4]
   11100:	pop	{r4, pc}
   11104:	andeq	r7, r2, ip, asr #2
   11108:	b	110a8 <__assert_fail@plt+0x98>
   1110c:	push	{fp, lr}
   11110:	mov	fp, sp
   11114:	mov	r4, r0
   11118:	cmp	r0, #0
   1111c:	bne	1122c <__assert_fail@plt+0x21c>
   11120:	movw	r1, #22499	; 0x57e3
   11124:	movt	r1, #1
   11128:	mov	r0, #0
   1112c:	mov	r2, #5
   11130:	bl	10e30 <dcgettext@plt>
   11134:	mov	r1, r0
   11138:	movw	r0, #29024	; 0x7160
   1113c:	movt	r0, #2
   11140:	ldr	r2, [r0]
   11144:	mov	r0, #1
   11148:	bl	10f68 <__printf_chk@plt>
   1114c:	movw	r1, #22528	; 0x5800
   11150:	movt	r1, #1
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	bl	10e30 <dcgettext@plt>
   11160:	movw	r5, #28996	; 0x7144
   11164:	movt	r5, #2
   11168:	ldr	r1, [r5]
   1116c:	bl	10dc4 <fputs_unlocked@plt>
   11170:	bl	11270 <__assert_fail@plt+0x260>
   11174:	movw	r1, #22803	; 0x5913
   11178:	movt	r1, #1
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	bl	10e30 <dcgettext@plt>
   11188:	ldr	r1, [r5]
   1118c:	bl	10dc4 <fputs_unlocked@plt>
   11190:	movw	r1, #22853	; 0x5945
   11194:	movt	r1, #1
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	bl	10e30 <dcgettext@plt>
   111a4:	ldr	r1, [r5]
   111a8:	bl	10dc4 <fputs_unlocked@plt>
   111ac:	movw	r1, #22930	; 0x5992
   111b0:	movt	r1, #1
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	bl	10e30 <dcgettext@plt>
   111c0:	ldr	r1, [r5]
   111c4:	bl	10dc4 <fputs_unlocked@plt>
   111c8:	movw	r1, #23042	; 0x5a02
   111cc:	movt	r1, #1
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	bl	10e30 <dcgettext@plt>
   111dc:	ldr	r1, [r5]
   111e0:	bl	10dc4 <fputs_unlocked@plt>
   111e4:	movw	r1, #23087	; 0x5a2f
   111e8:	movt	r1, #1
   111ec:	mov	r0, #0
   111f0:	mov	r2, #5
   111f4:	bl	10e30 <dcgettext@plt>
   111f8:	ldr	r1, [r5]
   111fc:	bl	10dc4 <fputs_unlocked@plt>
   11200:	bl	112a0 <__assert_fail@plt+0x290>
   11204:	movw	r1, #23141	; 0x5a65
   11208:	movt	r1, #1
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	bl	10e30 <dcgettext@plt>
   11218:	ldr	r1, [r5]
   1121c:	bl	10dc4 <fputs_unlocked@plt>
   11220:	bl	112d0 <__assert_fail@plt+0x2c0>
   11224:	mov	r0, r4
   11228:	bl	10f14 <exit@plt>
   1122c:	movw	r0, #28992	; 0x7140
   11230:	movt	r0, #2
   11234:	ldr	r5, [r0]
   11238:	movw	r1, #22460	; 0x57bc
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10e30 <dcgettext@plt>
   1124c:	mov	r2, r0
   11250:	movw	r0, #29024	; 0x7160
   11254:	movt	r0, #2
   11258:	ldr	r3, [r0]
   1125c:	mov	r0, r5
   11260:	mov	r1, #1
   11264:	bl	10f80 <__fprintf_chk@plt>
   11268:	mov	r0, r4
   1126c:	bl	10f14 <exit@plt>
   11270:	push	{fp, lr}
   11274:	mov	fp, sp
   11278:	movw	r1, #23727	; 0x5caf
   1127c:	movt	r1, #1
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	bl	10e30 <dcgettext@plt>
   1128c:	movw	r1, #28996	; 0x7144
   11290:	movt	r1, #2
   11294:	ldr	r1, [r1]
   11298:	pop	{fp, lr}
   1129c:	b	10dc4 <fputs_unlocked@plt>
   112a0:	push	{fp, lr}
   112a4:	mov	fp, sp
   112a8:	movw	r1, #23802	; 0x5cfa
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10e30 <dcgettext@plt>
   112bc:	movw	r1, #28996	; 0x7144
   112c0:	movt	r1, #2
   112c4:	ldr	r1, [r1]
   112c8:	pop	{fp, lr}
   112cc:	b	10dc4 <fputs_unlocked@plt>
   112d0:	push	{r4, r5, r6, sl, fp, lr}
   112d4:	add	fp, sp, #16
   112d8:	sub	sp, sp, #56	; 0x38
   112dc:	movw	r0, #24640	; 0x6040
   112e0:	movt	r0, #1
   112e4:	add	r1, r0, #32
   112e8:	mov	r2, #48	; 0x30
   112ec:	vld1.64	{d16-d17}, [r1]
   112f0:	mov	r6, sp
   112f4:	add	r1, r6, #32
   112f8:	add	r3, r0, #16
   112fc:	vld1.64	{d18-d19}, [r0], r2
   11300:	vld1.64	{d20-d21}, [r3]
   11304:	vldr	d22, [r0]
   11308:	vst1.64	{d16-d17}, [r1]
   1130c:	add	r0, r6, #16
   11310:	vst1.64	{d20-d21}, [r0]
   11314:	mov	r0, r6
   11318:	vst1.64	{d18-d19}, [r0], r2
   1131c:	vstr	d22, [r0]
   11320:	ldr	r1, [sp]
   11324:	cmp	r1, #0
   11328:	movw	r4, #23332	; 0x5b24
   1132c:	movt	r4, #1
   11330:	beq	11358 <__assert_fail@plt+0x348>
   11334:	mov	r6, sp
   11338:	movw	r5, #23332	; 0x5b24
   1133c:	movt	r5, #1
   11340:	mov	r0, r5
   11344:	bl	10ddc <strcmp@plt>
   11348:	cmp	r0, #0
   1134c:	ldrne	r1, [r6, #8]!
   11350:	cmpne	r1, #0
   11354:	bne	11340 <__assert_fail@plt+0x330>
   11358:	ldr	r5, [r6, #4]
   1135c:	movw	r1, #24109	; 0x5e2d
   11360:	movt	r1, #1
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	bl	10e30 <dcgettext@plt>
   11370:	mov	r1, r0
   11374:	movw	r2, #23456	; 0x5ba0
   11378:	movt	r2, #1
   1137c:	movw	r3, #24132	; 0x5e44
   11380:	movt	r3, #1
   11384:	mov	r0, #1
   11388:	bl	10f68 <__printf_chk@plt>
   1138c:	cmp	r5, #0
   11390:	moveq	r5, r4
   11394:	mov	r0, #5
   11398:	mov	r1, #0
   1139c:	bl	10fb0 <setlocale@plt>
   113a0:	cmp	r0, #0
   113a4:	beq	113e4 <__assert_fail@plt+0x3d4>
   113a8:	movw	r1, #24172	; 0x5e6c
   113ac:	movt	r1, #1
   113b0:	mov	r2, #3
   113b4:	bl	10fec <strncmp@plt>
   113b8:	cmp	r0, #0
   113bc:	beq	113e4 <__assert_fail@plt+0x3d4>
   113c0:	movw	r1, #24176	; 0x5e70
   113c4:	movt	r1, #1
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	bl	10e30 <dcgettext@plt>
   113d4:	movw	r1, #28996	; 0x7144
   113d8:	movt	r1, #2
   113dc:	ldr	r1, [r1]
   113e0:	bl	10dc4 <fputs_unlocked@plt>
   113e4:	movw	r1, #24247	; 0x5eb7
   113e8:	movt	r1, #1
   113ec:	mov	r0, #0
   113f0:	mov	r2, #5
   113f4:	bl	10e30 <dcgettext@plt>
   113f8:	mov	r1, r0
   113fc:	movw	r2, #24132	; 0x5e44
   11400:	movt	r2, #1
   11404:	mov	r0, #1
   11408:	mov	r3, r4
   1140c:	bl	10f68 <__printf_chk@plt>
   11410:	movw	r0, #24042	; 0x5dea
   11414:	movt	r0, #1
   11418:	movw	r6, #24324	; 0x5f04
   1141c:	movt	r6, #1
   11420:	cmp	r5, r4
   11424:	moveq	r6, r0
   11428:	movw	r1, #24274	; 0x5ed2
   1142c:	movt	r1, #1
   11430:	mov	r0, #0
   11434:	mov	r2, #5
   11438:	bl	10e30 <dcgettext@plt>
   1143c:	mov	r1, r0
   11440:	mov	r0, #1
   11444:	mov	r2, r5
   11448:	mov	r3, r6
   1144c:	sub	sp, fp, #16
   11450:	pop	{r4, r5, r6, sl, fp, lr}
   11454:	b	10f68 <__printf_chk@plt>
   11458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1145c:	add	fp, sp, #28
   11460:	sub	sp, sp, #156	; 0x9c
   11464:	str	r0, [sp, #32]
   11468:	str	r1, [sp, #24]
   1146c:	ldr	r0, [r1]
   11470:	bl	12134 <__assert_fail@plt+0x1124>
   11474:	movw	r1, #24324	; 0x5f04
   11478:	movt	r1, #1
   1147c:	mov	r0, #6
   11480:	bl	10fb0 <setlocale@plt>
   11484:	movw	r4, #23460	; 0x5ba4
   11488:	movt	r4, #1
   1148c:	movw	r1, #23341	; 0x5b2d
   11490:	movt	r1, #1
   11494:	mov	r0, r4
   11498:	bl	10fd4 <bindtextdomain@plt>
   1149c:	mov	r0, r4
   114a0:	bl	10e48 <textdomain@plt>
   114a4:	movw	r0, #8268	; 0x204c
   114a8:	movt	r0, #1
   114ac:	bl	15778 <__assert_fail@plt+0x4768>
   114b0:	mov	r6, #0
   114b4:	movw	r4, #29000	; 0x7148
   114b8:	movt	r4, #2
   114bc:	movw	r8, #29012	; 0x7154
   114c0:	movt	r8, #2
   114c4:	mov	r0, #0
   114c8:	str	r0, [sp, #44]	; 0x2c
   114cc:	mov	sl, #0
   114d0:	movw	r9, #23365	; 0x5b45
   114d4:	movt	r9, #1
   114d8:	ldr	r5, [sp, #24]
   114dc:	ldr	r7, [sp, #32]
   114e0:	str	r6, [sp]
   114e4:	mov	r0, r7
   114e8:	mov	r1, r5
   114ec:	mov	r2, r9
   114f0:	movw	r3, #24528	; 0x5fd0
   114f4:	movt	r3, #1
   114f8:	bl	10efc <getopt_long@plt>
   114fc:	cmp	r0, #98	; 0x62
   11500:	ble	11788 <__assert_fail@plt+0x778>
   11504:	sub	r0, r0, #99	; 0x63
   11508:	cmp	r0, #16
   1150c:	bhi	11a7c <__assert_fail@plt+0xa6c>
   11510:	add	r1, pc, #0
   11514:	ldr	pc, [r1, r0, lsl #2]
   11518:	andeq	r1, r1, ip, asr r5
   1151c:	andeq	r1, r1, ip, ror sl
   11520:	andeq	r1, r1, ip, ror sl
   11524:	andeq	r1, r1, ip, ror sl
   11528:	andeq	r1, r1, ip, ror sl
   1152c:	andeq	r1, r1, ip, ror sl
   11530:	andeq	r1, r1, ip, ror sl
   11534:	andeq	r1, r1, ip, ror sl
   11538:	andeq	r1, r1, ip, ror sl
   1153c:	andeq	r1, r1, ip, ror sl
   11540:	andeq	r1, r1, ip, ror sl
   11544:	andeq	r1, r1, ip, ror sl
   11548:	andeq	r1, r1, r8, ror #10
   1154c:	andeq	r1, r1, ip, ror sl
   11550:	andeq	r1, r1, ip, ror sl
   11554:	andeq	r1, r1, ip, ror r5
   11558:	andeq	r1, r1, r8, lsl #11
   1155c:	movw	r0, #29008	; 0x7150
   11560:	movt	r0, #2
   11564:	b	11570 <__assert_fail@plt+0x560>
   11568:	movw	r0, #29009	; 0x7151
   1156c:	movt	r0, #2
   11570:	mov	r1, #1
   11574:	strb	r1, [r0]
   11578:	b	114e0 <__assert_fail@plt+0x4d0>
   1157c:	ldr	r0, [r4]
   11580:	str	r0, [r8]
   11584:	b	114e0 <__assert_fail@plt+0x4d0>
   11588:	bl	10f08 <__ctype_b_loc@plt>
   1158c:	mov	r5, r0
   11590:	ldr	r7, [r0]
   11594:	ldr	r6, [r4]
   11598:	ldrb	r0, [r6]
   1159c:	bl	11bbc <__assert_fail@plt+0xbac>
   115a0:	add	r1, r7, r0, lsl #1
   115a4:	ldrb	r1, [r1, #1]
   115a8:	tst	r1, #32
   115ac:	beq	115d8 <__assert_fail@plt+0x5c8>
   115b0:	add	r6, r6, #1
   115b4:	str	r6, [r4]
   115b8:	ldr	r7, [r5]
   115bc:	ldrb	r0, [r6], #1
   115c0:	bl	11bbc <__assert_fail@plt+0xbac>
   115c4:	add	r1, r7, r0, lsl #1
   115c8:	ldrb	r1, [r1, #1]
   115cc:	tst	r1, #32
   115d0:	bne	115b4 <__assert_fail@plt+0x5a4>
   115d4:	sub	r6, r6, #1
   115d8:	sub	r1, r0, #37	; 0x25
   115dc:	cmp	r1, #25
   115e0:	bhi	11678 <__assert_fail@plt+0x668>
   115e4:	mov	r0, #3
   115e8:	add	r2, pc, #0
   115ec:	ldr	pc, [r2, r1, lsl #2]
   115f0:	andeq	r1, r1, r8, asr r6
   115f4:	andeq	r1, r1, r8, ror r6
   115f8:	andeq	r1, r1, r8, ror r6
   115fc:	andeq	r1, r1, r8, ror r6
   11600:	andeq	r1, r1, r8, ror r6
   11604:	andeq	r1, r1, r8, ror r6
   11608:	andeq	r1, r1, r8, ror r6
   1160c:	andeq	r1, r1, r8, ror r6
   11610:	andeq	r1, r1, r8, ror r6
   11614:	andeq	r1, r1, r8, ror r6
   11618:	andeq	r1, r1, r0, ror #12
   1161c:	andeq	r1, r1, r8, ror r6
   11620:	andeq	r1, r1, r8, ror r6
   11624:	andeq	r1, r1, r8, ror r6
   11628:	andeq	r1, r1, r8, ror r6
   1162c:	andeq	r1, r1, r8, ror r6
   11630:	andeq	r1, r1, r8, ror r6
   11634:	andeq	r1, r1, r8, ror r6
   11638:	andeq	r1, r1, r8, ror r6
   1163c:	andeq	r1, r1, r8, ror r6
   11640:	andeq	r1, r1, r8, ror r6
   11644:	andeq	r1, r1, r8, ror r6
   11648:	andeq	r1, r1, r8, ror r6
   1164c:	andeq	r1, r1, ip, ror #12
   11650:	andeq	r1, r1, r8, ror r6
   11654:	andeq	r1, r1, r8, ror #12
   11658:	mov	r0, #5
   1165c:	b	1166c <__assert_fail@plt+0x65c>
   11660:	mov	r0, #4
   11664:	b	1166c <__assert_fail@plt+0x65c>
   11668:	mov	r0, #2
   1166c:	add	r1, r6, #1
   11670:	str	r1, [r4]
   11674:	str	r0, [sp, #44]	; 0x2c
   11678:	ldr	r7, [r5]
   1167c:	ldr	r6, [r4]
   11680:	ldrb	r0, [r6]
   11684:	bl	11bbc <__assert_fail@plt+0xbac>
   11688:	add	r1, r7, r0, lsl #1
   1168c:	ldrb	r1, [r1, #1]
   11690:	tst	r1, #32
   11694:	beq	116c0 <__assert_fail@plt+0x6b0>
   11698:	add	r6, r6, #1
   1169c:	str	r6, [r4]
   116a0:	ldr	r7, [r5]
   116a4:	ldrb	r0, [r6], #1
   116a8:	bl	11bbc <__assert_fail@plt+0xbac>
   116ac:	add	r1, r7, r0, lsl #1
   116b0:	ldrb	r1, [r1, #1]
   116b4:	tst	r1, #32
   116b8:	bne	1169c <__assert_fail@plt+0x68c>
   116bc:	sub	r6, r6, #1
   116c0:	cmp	r0, #45	; 0x2d
   116c4:	cmpne	r0, #43	; 0x2b
   116c8:	bne	116e0 <__assert_fail@plt+0x6d0>
   116cc:	mov	r9, #1
   116d0:	ldr	r0, [sp, #44]	; 0x2c
   116d4:	cmp	r0, #0
   116d8:	beq	116e4 <__assert_fail@plt+0x6d4>
   116dc:	b	11a84 <__assert_fail@plt+0xa74>
   116e0:	ldr	r9, [sp, #44]	; 0x2c
   116e4:	mov	r0, #0
   116e8:	movw	r1, #23424	; 0x5b80
   116ec:	movt	r1, #1
   116f0:	mov	r2, #5
   116f4:	bl	10e30 <dcgettext@plt>
   116f8:	mvn	r1, #0
   116fc:	str	r1, [sp]
   11700:	mvn	r1, #-2147483648	; 0x80000000
   11704:	str	r1, [sp, #4]
   11708:	movw	r1, #23410	; 0x5b72
   1170c:	movt	r1, #1
   11710:	str	r1, [sp, #8]
   11714:	str	r0, [sp, #12]
   11718:	mov	r0, #0
   1171c:	str	r0, [sp, #16]
   11720:	mov	r0, r6
   11724:	mov	r6, #0
   11728:	mov	r2, #0
   1172c:	mov	r3, #-2147483648	; 0x80000000
   11730:	bl	146d8 <__assert_fail@plt+0x36c8>
   11734:	str	r0, [sp, #40]	; 0x28
   11738:	str	r1, [sp, #36]	; 0x24
   1173c:	orr	r0, r9, #1
   11740:	mov	sl, #1
   11744:	cmp	r0, #5
   11748:	str	r9, [sp, #44]	; 0x2c
   1174c:	bne	114d0 <__assert_fail@plt+0x4c0>
   11750:	ldr	r0, [sp, #40]	; 0x28
   11754:	ldr	r1, [sp, #36]	; 0x24
   11758:	orrs	r0, r0, r1
   1175c:	str	r9, [sp, #44]	; 0x2c
   11760:	bne	114d0 <__assert_fail@plt+0x4c0>
   11764:	movw	r1, #23439	; 0x5b8f
   11768:	movt	r1, #1
   1176c:	mov	r0, #0
   11770:	mov	r2, #5
   11774:	bl	10e30 <dcgettext@plt>
   11778:	mov	r2, r0
   1177c:	mov	r0, #1
   11780:	mov	r1, #0
   11784:	bl	10eb4 <error@plt>
   11788:	cmn	r0, #1
   1178c:	bne	11a1c <__assert_fail@plt+0xa0c>
   11790:	ldr	r0, [r8]
   11794:	cmp	r0, #0
   11798:	mov	r1, r0
   1179c:	movwne	r1, #1
   117a0:	orr	r1, sl, r1
   117a4:	tst	r1, #1
   117a8:	beq	11a90 <__assert_fail@plt+0xa80>
   117ac:	movw	r1, #28984	; 0x7138
   117b0:	movt	r1, #2
   117b4:	ldr	r6, [r1]
   117b8:	cmp	r0, #0
   117bc:	beq	117d4 <__assert_fail@plt+0x7c4>
   117c0:	ldr	r1, [sp, #44]	; 0x2c
   117c4:	cmp	r1, #0
   117c8:	eoreq	r1, sl, #1
   117cc:	tsteq	r1, #1
   117d0:	beq	11b00 <__assert_fail@plt+0xaf0>
   117d4:	movw	r1, #29009	; 0x7151
   117d8:	movt	r1, #2
   117dc:	ldrb	r1, [r1]
   117e0:	mvn	r1, r1
   117e4:	orr	r1, sl, r1
   117e8:	tst	r1, #1
   117ec:	beq	11a9c <__assert_fail@plt+0xa8c>
   117f0:	cmp	r6, r7
   117f4:	bge	11ad4 <__assert_fail@plt+0xac4>
   117f8:	mvn	r1, #0
   117fc:	str	r1, [sp, #32]
   11800:	cmp	r0, #0
   11804:	beq	11840 <__assert_fail@plt+0x830>
   11808:	add	r1, sp, #48	; 0x30
   1180c:	bl	15790 <__assert_fail@plt+0x4780>
   11810:	cmp	r0, #0
   11814:	bne	11b5c <__assert_fail@plt+0xb4c>
   11818:	add	r0, sp, #48	; 0x30
   1181c:	bl	11bc0 <__assert_fail@plt+0xbb0>
   11820:	cmp	r0, #0
   11824:	beq	1184c <__assert_fail@plt+0x83c>
   11828:	ldr	r0, [sp, #100]	; 0x64
   1182c:	cmn	r0, #1
   11830:	ble	11b7c <__assert_fail@plt+0xb6c>
   11834:	mov	r2, r0
   11838:	ldr	r4, [sp, #96]	; 0x60
   1183c:	b	118ac <__assert_fail@plt+0x89c>
   11840:	mvn	r0, #0
   11844:	str	r0, [sp, #28]
   11848:	b	118e0 <__assert_fail@plt+0x8d0>
   1184c:	ldr	r0, [r8]
   11850:	mov	r1, #0
   11854:	bl	10ec0 <open64@plt>
   11858:	cmp	r0, #0
   1185c:	bmi	11b7c <__assert_fail@plt+0xb6c>
   11860:	mov	r9, r0
   11864:	mov	r0, #2
   11868:	str	r0, [sp]
   1186c:	mov	r0, r9
   11870:	mov	r2, #0
   11874:	mov	r3, #0
   11878:	bl	10e78 <lseek64@plt>
   1187c:	mov	r4, r0
   11880:	mov	r7, r1
   11884:	bl	10f44 <__errno_location@plt>
   11888:	mov	r5, r0
   1188c:	ldr	r8, [r0]
   11890:	mov	r0, r9
   11894:	bl	11004 <close@plt>
   11898:	mvn	r1, #0
   1189c:	subs	r0, r1, r4
   118a0:	sbcs	r0, r1, r7
   118a4:	bge	11b70 <__assert_fail@plt+0xb60>
   118a8:	mov	r2, r7
   118ac:	ldr	r5, [sp, #24]
   118b0:	ands	r0, sl, #1
   118b4:	ldr	r0, [sp, #36]	; 0x24
   118b8:	moveq	r0, r2
   118bc:	str	r0, [sp, #36]	; 0x24
   118c0:	ldr	r0, [sp, #40]	; 0x28
   118c4:	moveq	r0, r4
   118c8:	str	r0, [sp, #40]	; 0x28
   118cc:	mvn	r0, #0
   118d0:	moveq	r2, r0
   118d4:	str	r2, [sp, #28]
   118d8:	movne	r0, r4
   118dc:	str	r0, [sp, #32]
   118e0:	ldr	sl, [r5, r6, lsl #2]
   118e4:	movw	r0, #29008	; 0x7150
   118e8:	movt	r0, #2
   118ec:	ldrb	r0, [r0]
   118f0:	movw	r4, #2113	; 0x841
   118f4:	cmp	r0, #0
   118f8:	movwne	r4, #2049	; 0x801
   118fc:	cmp	sl, #0
   11900:	beq	11a0c <__assert_fail@plt+0x9fc>
   11904:	add	r0, r5, r6, lsl #2
   11908:	add	r7, r0, #4
   1190c:	mov	r5, #0
   11910:	b	11964 <__assert_fail@plt+0x954>
   11914:	bl	10f44 <__errno_location@plt>
   11918:	ldr	r5, [r0]
   1191c:	mov	r0, #0
   11920:	movw	r1, #23681	; 0x5c81
   11924:	movt	r1, #1
   11928:	mov	r2, #5
   1192c:	bl	10e30 <dcgettext@plt>
   11930:	mov	r6, r0
   11934:	mov	r0, #4
   11938:	mov	r1, sl
   1193c:	bl	13734 <__assert_fail@plt+0x2724>
   11940:	mov	r3, r0
   11944:	mov	r0, #0
   11948:	mov	r1, r5
   1194c:	mov	r2, r6
   11950:	bl	10eb4 <error@plt>
   11954:	mov	r5, #1
   11958:	ldr	sl, [r7], #4
   1195c:	cmp	sl, #0
   11960:	beq	11a10 <__assert_fail@plt+0xa00>
   11964:	mov	r0, sl
   11968:	mov	r1, r4
   1196c:	movw	r2, #438	; 0x1b6
   11970:	bl	10ec0 <open64@plt>
   11974:	cmn	r0, #1
   11978:	ble	119d8 <__assert_fail@plt+0x9c8>
   1197c:	mov	r8, r0
   11980:	ldr	r0, [sp, #32]
   11984:	str	r0, [sp]
   11988:	ldr	r0, [sp, #28]
   1198c:	str	r0, [sp, #4]
   11990:	ldr	r0, [sp, #44]	; 0x2c
   11994:	str	r0, [sp, #8]
   11998:	mov	r0, r8
   1199c:	mov	r1, sl
   119a0:	ldr	r2, [sp, #40]	; 0x28
   119a4:	ldr	r3, [sp, #36]	; 0x24
   119a8:	bl	11bdc <__assert_fail@plt+0xbcc>
   119ac:	mov	r9, r0
   119b0:	mov	r0, r8
   119b4:	bl	11004 <close@plt>
   119b8:	cmp	r0, #0
   119bc:	beq	11a00 <__assert_fail@plt+0x9f0>
   119c0:	bl	10f44 <__errno_location@plt>
   119c4:	ldr	r5, [r0]
   119c8:	mov	r0, #0
   119cc:	movw	r1, #23708	; 0x5c9c
   119d0:	movt	r1, #1
   119d4:	b	11928 <__assert_fail@plt+0x918>
   119d8:	movw	r0, #29008	; 0x7150
   119dc:	movt	r0, #2
   119e0:	ldrb	r0, [r0]
   119e4:	cmp	r0, #1
   119e8:	bne	11914 <__assert_fail@plt+0x904>
   119ec:	bl	10f44 <__errno_location@plt>
   119f0:	ldr	r0, [r0]
   119f4:	cmp	r0, #2
   119f8:	bne	11914 <__assert_fail@plt+0x904>
   119fc:	b	11958 <__assert_fail@plt+0x948>
   11a00:	eor	r0, r9, #1
   11a04:	orr	r5, r5, r0
   11a08:	b	11958 <__assert_fail@plt+0x948>
   11a0c:	mov	r5, #0
   11a10:	and	r0, r5, #1
   11a14:	sub	sp, fp, #28
   11a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a1c:	cmn	r0, #3
   11a20:	bne	11a6c <__assert_fail@plt+0xa5c>
   11a24:	movw	r0, #28904	; 0x70e8
   11a28:	movt	r0, #2
   11a2c:	ldr	r3, [r0]
   11a30:	movw	r0, #28996	; 0x7144
   11a34:	movt	r0, #2
   11a38:	ldr	r0, [r0]
   11a3c:	mov	r1, #0
   11a40:	movw	r2, #23470	; 0x5bae
   11a44:	movt	r2, #1
   11a48:	str	r2, [sp]
   11a4c:	str	r1, [sp, #4]
   11a50:	movw	r1, #23332	; 0x5b24
   11a54:	movt	r1, #1
   11a58:	movw	r2, #23456	; 0x5ba0
   11a5c:	movt	r2, #1
   11a60:	bl	14100 <__assert_fail@plt+0x30f0>
   11a64:	mov	r0, #0
   11a68:	bl	10f14 <exit@plt>
   11a6c:	cmn	r0, #2
   11a70:	bne	11a7c <__assert_fail@plt+0xa6c>
   11a74:	mov	r0, #0
   11a78:	bl	1110c <__assert_fail@plt+0xfc>
   11a7c:	mov	r0, #1
   11a80:	bl	1110c <__assert_fail@plt+0xfc>
   11a84:	movw	r1, #23372	; 0x5b4c
   11a88:	movt	r1, #1
   11a8c:	b	11adc <__assert_fail@plt+0xacc>
   11a90:	movw	r1, #23484	; 0x5bbc
   11a94:	movt	r1, #1
   11a98:	b	11b08 <__assert_fail@plt+0xaf8>
   11a9c:	movw	r1, #23575	; 0x5c17
   11aa0:	movt	r1, #1
   11aa4:	mov	r0, #0
   11aa8:	mov	r2, #5
   11aac:	bl	10e30 <dcgettext@plt>
   11ab0:	mov	r4, r0
   11ab4:	movw	r1, #23607	; 0x5c37
   11ab8:	movt	r1, #1
   11abc:	mov	r0, #0
   11ac0:	bl	13920 <__assert_fail@plt+0x2910>
   11ac4:	mov	r5, r0
   11ac8:	movw	r1, #23517	; 0x5bdd
   11acc:	movt	r1, #1
   11ad0:	b	11b34 <__assert_fail@plt+0xb24>
   11ad4:	movw	r1, #23619	; 0x5c43
   11ad8:	movt	r1, #1
   11adc:	mov	r0, #0
   11ae0:	mov	r2, #5
   11ae4:	bl	10e30 <dcgettext@plt>
   11ae8:	mov	r2, r0
   11aec:	mov	r0, #0
   11af0:	mov	r1, #0
   11af4:	bl	10eb4 <error@plt>
   11af8:	mov	r0, #1
   11afc:	bl	1110c <__assert_fail@plt+0xfc>
   11b00:	movw	r1, #23536	; 0x5bf0
   11b04:	movt	r1, #1
   11b08:	mov	r0, #0
   11b0c:	mov	r2, #5
   11b10:	bl	10e30 <dcgettext@plt>
   11b14:	mov	r4, r0
   11b18:	movw	r1, #23517	; 0x5bdd
   11b1c:	movt	r1, #1
   11b20:	mov	r0, #0
   11b24:	bl	13920 <__assert_fail@plt+0x2910>
   11b28:	mov	r5, r0
   11b2c:	movw	r1, #23524	; 0x5be4
   11b30:	movt	r1, #1
   11b34:	mov	r0, #1
   11b38:	bl	13920 <__assert_fail@plt+0x2910>
   11b3c:	str	r0, [sp]
   11b40:	mov	r0, #0
   11b44:	mov	r1, #0
   11b48:	mov	r2, r4
   11b4c:	mov	r3, r5
   11b50:	bl	10eb4 <error@plt>
   11b54:	mov	r0, #1
   11b58:	bl	1110c <__assert_fail@plt+0xfc>
   11b5c:	bl	10f44 <__errno_location@plt>
   11b60:	ldr	r4, [r0]
   11b64:	movw	r1, #23640	; 0x5c58
   11b68:	movt	r1, #1
   11b6c:	b	11b8c <__assert_fail@plt+0xb7c>
   11b70:	str	r8, [r5]
   11b74:	movw	r8, #29012	; 0x7154
   11b78:	movt	r8, #2
   11b7c:	bl	10f44 <__errno_location@plt>
   11b80:	ldr	r4, [r0]
   11b84:	movw	r1, #23655	; 0x5c67
   11b88:	movt	r1, #1
   11b8c:	mov	r0, #0
   11b90:	mov	r2, #5
   11b94:	bl	10e30 <dcgettext@plt>
   11b98:	mov	r5, r0
   11b9c:	ldr	r1, [r8]
   11ba0:	mov	r0, #4
   11ba4:	bl	13734 <__assert_fail@plt+0x2724>
   11ba8:	mov	r3, r0
   11bac:	mov	r0, #1
   11bb0:	mov	r1, r4
   11bb4:	mov	r2, r5
   11bb8:	bl	10eb4 <error@plt>
   11bbc:	bx	lr
   11bc0:	ldr	r0, [r0, #16]
   11bc4:	and	r0, r0, #53248	; 0xd000
   11bc8:	orr	r0, r0, #8192	; 0x2000
   11bcc:	cmp	r0, #40960	; 0xa000
   11bd0:	moveq	r0, #1
   11bd4:	movne	r0, #0
   11bd8:	bx	lr
   11bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11be0:	add	fp, sp, #28
   11be4:	sub	sp, sp, #132	; 0x84
   11be8:	mov	r9, r3
   11bec:	mov	sl, r2
   11bf0:	mov	r8, r1
   11bf4:	mov	r6, r0
   11bf8:	movw	r5, #29009	; 0x7151
   11bfc:	movt	r5, #2
   11c00:	ldrb	r0, [r5]
   11c04:	ldr	r7, [fp, #12]
   11c08:	ldr	r4, [fp, #16]
   11c0c:	cmp	r0, #0
   11c10:	bne	11c24 <__assert_fail@plt+0xc14>
   11c14:	cmn	r7, #1
   11c18:	bgt	11cd0 <__assert_fail@plt+0xcc0>
   11c1c:	cmp	r4, #0
   11c20:	beq	11cd0 <__assert_fail@plt+0xcc0>
   11c24:	add	r1, sp, #24
   11c28:	mov	r0, r6
   11c2c:	bl	157a0 <__assert_fail@plt+0x4790>
   11c30:	cmp	r0, #0
   11c34:	beq	11c7c <__assert_fail@plt+0xc6c>
   11c38:	bl	10f44 <__errno_location@plt>
   11c3c:	ldr	r5, [r0]
   11c40:	mov	r9, #0
   11c44:	movw	r1, #24348	; 0x5f1c
   11c48:	movt	r1, #1
   11c4c:	mov	r0, #0
   11c50:	mov	r2, #5
   11c54:	bl	10e30 <dcgettext@plt>
   11c58:	mov	r6, r0
   11c5c:	mov	r0, #4
   11c60:	mov	r1, r8
   11c64:	bl	13734 <__assert_fail@plt+0x2724>
   11c68:	mov	r3, r0
   11c6c:	mov	r0, #0
   11c70:	mov	r1, r5
   11c74:	mov	r2, r6
   11c78:	b	11fa8 <__assert_fail@plt+0xf98>
   11c7c:	ldrb	r0, [r5]
   11c80:	cmp	r0, #1
   11c84:	bne	11cd0 <__assert_fail@plt+0xcc0>
   11c88:	str	r8, [sp, #20]
   11c8c:	ldr	r0, [sp, #80]	; 0x50
   11c90:	mov	r1, #512	; 0x200
   11c94:	cmp	r0, #536870913	; 0x20000001
   11c98:	mov	r8, #512	; 0x200
   11c9c:	movcc	r8, r0
   11ca0:	cmp	r0, #0
   11ca4:	movle	r8, r1
   11ca8:	cmn	r8, #1
   11cac:	ble	11d7c <__assert_fail@plt+0xd6c>
   11cb0:	cmp	r8, #0
   11cb4:	beq	11f0c <__assert_fail@plt+0xefc>
   11cb8:	cmn	r9, #1
   11cbc:	ble	11ee0 <__assert_fail@plt+0xed0>
   11cc0:	asr	r3, r8, #31
   11cc4:	mvn	r0, #0
   11cc8:	mvn	r1, #-2147483648	; 0x80000000
   11ccc:	b	11d98 <__assert_fail@plt+0xd88>
   11cd0:	mov	r5, sl
   11cd4:	cmp	r4, #0
   11cd8:	beq	11f28 <__assert_fail@plt+0xf18>
   11cdc:	cmn	r7, #1
   11ce0:	ble	11d20 <__assert_fail@plt+0xd10>
   11ce4:	ldr	sl, [fp, #8]
   11ce8:	sub	r0, r4, #2
   11cec:	cmp	r0, #3
   11cf0:	bhi	11db0 <__assert_fail@plt+0xda0>
   11cf4:	add	r1, pc, #0
   11cf8:	ldr	pc, [r1, r0, lsl #2]
   11cfc:	andeq	r1, r1, ip, lsl #26
   11d00:			; <UNDEFINED> instruction: 0x00011dbc
   11d04:	andeq	r1, r1, r4, ror #27
   11d08:	andeq	r1, r1, r8, lsl #28
   11d0c:	mov	r4, r6
   11d10:	mov	r0, #0
   11d14:	subs	r1, r5, sl
   11d18:	sbcs	r1, r9, r7
   11d1c:	b	11dcc <__assert_fail@plt+0xdbc>
   11d20:	add	r0, sp, #24
   11d24:	bl	11bc0 <__assert_fail@plt+0xbb0>
   11d28:	cmp	r0, #0
   11d2c:	beq	11d44 <__assert_fail@plt+0xd34>
   11d30:	ldr	r7, [sp, #76]	; 0x4c
   11d34:	cmn	r7, #1
   11d38:	ble	11e90 <__assert_fail@plt+0xe80>
   11d3c:	ldr	sl, [sp, #72]	; 0x48
   11d40:	b	11ce8 <__assert_fail@plt+0xcd8>
   11d44:	str	r9, [sp, #20]
   11d48:	mov	r0, #2
   11d4c:	str	r0, [sp]
   11d50:	mov	r0, r6
   11d54:	mov	r9, #0
   11d58:	mov	r2, #0
   11d5c:	mov	r3, #0
   11d60:	bl	10e78 <lseek64@plt>
   11d64:	cmn	r1, #1
   11d68:	ble	11ecc <__assert_fail@plt+0xebc>
   11d6c:	mov	sl, r0
   11d70:	mov	r7, r1
   11d74:	ldr	r9, [sp, #20]
   11d78:	b	11ce8 <__assert_fail@plt+0xcd8>
   11d7c:	cmn	r9, #1
   11d80:	ble	11fc0 <__assert_fail@plt+0xfb0>
   11d84:	cmn	r8, #1
   11d88:	beq	11f0c <__assert_fail@plt+0xefc>
   11d8c:	asr	r3, r8, #31
   11d90:	mov	r0, #0
   11d94:	mov	r1, #-2147483648	; 0x80000000
   11d98:	mov	r2, r8
   11d9c:	bl	15508 <__assert_fail@plt+0x44f8>
   11da0:	subs	r0, r0, sl
   11da4:	sbcs	r0, r1, r9
   11da8:	bge	11f0c <__assert_fail@plt+0xefc>
   11dac:	b	11fe0 <__assert_fail@plt+0xfd0>
   11db0:	mov	r4, r6
   11db4:	mov	r0, r9
   11db8:	b	11e34 <__assert_fail@plt+0xe24>
   11dbc:	mov	r4, r6
   11dc0:	mov	r0, #0
   11dc4:	subs	r1, sl, r5
   11dc8:	sbcs	r1, r7, r9
   11dcc:	movwlt	r0, #1
   11dd0:	cmp	r0, #0
   11dd4:	movne	r9, r7
   11dd8:	movne	r5, sl
   11ddc:	mov	r3, r9
   11de0:	b	11f30 <__assert_fail@plt+0xf20>
   11de4:	mov	r4, r6
   11de8:	mov	r0, sl
   11dec:	mov	r1, r7
   11df0:	mov	r2, r5
   11df4:	mov	r3, r9
   11df8:	bl	15508 <__assert_fail@plt+0x44f8>
   11dfc:	subs	r5, sl, r2
   11e00:	sbc	r3, r7, r3
   11e04:	b	11f30 <__assert_fail@plt+0xf20>
   11e08:	mov	r4, r6
   11e0c:	mov	r0, sl
   11e10:	mov	r1, r7
   11e14:	mov	r2, r5
   11e18:	mov	r3, r9
   11e1c:	bl	15508 <__assert_fail@plt+0x44f8>
   11e20:	subs	r5, r5, r2
   11e24:	sbc	r0, r9, r3
   11e28:	orrs	r1, r2, r3
   11e2c:	moveq	r5, r1
   11e30:	moveq	r0, r1
   11e34:	mov	r9, #0
   11e38:	cmn	r7, #1
   11e3c:	mov	r1, #0
   11e40:	movwgt	r1, #1
   11e44:	adds	r5, sl, r5
   11e48:	adc	r3, r7, r0
   11e4c:	cmn	r3, #1
   11e50:	mov	r2, #0
   11e54:	movwgt	r2, #1
   11e58:	subs	r2, r1, r2
   11e5c:	movwne	r2, #1
   11e60:	cmn	r0, #1
   11e64:	mov	r0, #0
   11e68:	movwgt	r0, #1
   11e6c:	sub	r0, r1, r0
   11e70:	clz	r0, r0
   11e74:	lsr	r0, r0, #5
   11e78:	and	r0, r0, r2
   11e7c:	cmp	r0, #1
   11e80:	bne	11f30 <__assert_fail@plt+0xf20>
   11e84:	movw	r1, #24452	; 0x5f84
   11e88:	movt	r1, #1
   11e8c:	b	11e9c <__assert_fail@plt+0xe8c>
   11e90:	mov	r9, #0
   11e94:	movw	r1, #24410	; 0x5f5a
   11e98:	movt	r1, #1
   11e9c:	mov	r0, #0
   11ea0:	mov	r2, #5
   11ea4:	bl	10e30 <dcgettext@plt>
   11ea8:	mov	r5, r0
   11eac:	mov	r0, #4
   11eb0:	mov	r1, r8
   11eb4:	bl	13734 <__assert_fail@plt+0x2724>
   11eb8:	mov	r3, r0
   11ebc:	mov	r0, #0
   11ec0:	mov	r1, #0
   11ec4:	mov	r2, r5
   11ec8:	b	11fa8 <__assert_fail@plt+0xf98>
   11ecc:	bl	10f44 <__errno_location@plt>
   11ed0:	ldr	r5, [r0]
   11ed4:	movw	r1, #23655	; 0x5c67
   11ed8:	movt	r1, #1
   11edc:	b	11c4c <__assert_fail@plt+0xc3c>
   11ee0:	and	r0, sl, r9
   11ee4:	cmn	r0, #1
   11ee8:	beq	11f0c <__assert_fail@plt+0xefc>
   11eec:	mov	r0, #0
   11ef0:	mov	r1, #-2147483648	; 0x80000000
   11ef4:	mov	r2, sl
   11ef8:	mov	r3, r9
   11efc:	bl	15508 <__assert_fail@plt+0x44f8>
   11f00:	subs	r0, r0, r8
   11f04:	sbcs	r0, r1, r8, asr #31
   11f08:	blt	11fe0 <__assert_fail@plt+0xfd0>
   11f0c:	umull	r5, r0, r8, sl
   11f10:	mla	r0, r8, r9, r0
   11f14:	asr	r1, r8, #31
   11f18:	mla	r9, r1, sl, r0
   11f1c:	ldr	r8, [sp, #20]
   11f20:	cmp	r4, #0
   11f24:	bne	11cdc <__assert_fail@plt+0xccc>
   11f28:	mov	r4, r6
   11f2c:	mov	r3, r9
   11f30:	mov	r9, #0
   11f34:	rsbs	r0, r5, #0
   11f38:	rscs	r0, r3, #0
   11f3c:	mov	r6, #0
   11f40:	movwlt	r6, #1
   11f44:	cmp	r6, #0
   11f48:	moveq	r5, r6
   11f4c:	movne	r6, r3
   11f50:	mov	r0, r4
   11f54:	mov	r2, r5
   11f58:	mov	r3, r6
   11f5c:	bl	10e24 <ftruncate64@plt>
   11f60:	cmp	r0, #0
   11f64:	beq	11fb8 <__assert_fail@plt+0xfa8>
   11f68:	bl	10f44 <__errno_location@plt>
   11f6c:	ldr	r7, [r0]
   11f70:	movw	r1, #24487	; 0x5fa7
   11f74:	movt	r1, #1
   11f78:	mov	r0, #0
   11f7c:	mov	r2, #5
   11f80:	bl	10e30 <dcgettext@plt>
   11f84:	mov	r4, r0
   11f88:	mov	r0, #4
   11f8c:	mov	r1, r8
   11f90:	bl	13734 <__assert_fail@plt+0x2724>
   11f94:	mov	r3, r0
   11f98:	stm	sp, {r5, r6}
   11f9c:	mov	r0, #0
   11fa0:	mov	r1, r7
   11fa4:	mov	r2, r4
   11fa8:	bl	10eb4 <error@plt>
   11fac:	mov	r0, r9
   11fb0:	sub	sp, fp, #28
   11fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fb8:	mov	r9, #1
   11fbc:	b	11fac <__assert_fail@plt+0xf9c>
   11fc0:	asr	r3, r8, #31
   11fc4:	mvn	r0, #0
   11fc8:	mvn	r1, #-2147483648	; 0x80000000
   11fcc:	mov	r2, r8
   11fd0:	bl	15508 <__assert_fail@plt+0x44f8>
   11fd4:	subs	r0, sl, r0
   11fd8:	sbcs	r0, r9, r1
   11fdc:	bge	11f0c <__assert_fail@plt+0xefc>
   11fe0:	mov	r4, r9
   11fe4:	mov	r9, #0
   11fe8:	movw	r1, #24364	; 0x5f2c
   11fec:	movt	r1, #1
   11ff0:	mov	r0, #0
   11ff4:	mov	r2, #5
   11ff8:	bl	10e30 <dcgettext@plt>
   11ffc:	mov	r5, r0
   12000:	mov	r0, #4
   12004:	ldr	r1, [sp, #20]
   12008:	bl	13734 <__assert_fail@plt+0x2724>
   1200c:	str	sl, [sp]
   12010:	stmib	sp, {r4, r8}
   12014:	str	r0, [sp, #12]
   12018:	mov	r0, #0
   1201c:	mov	r1, #0
   12020:	mov	r2, r5
   12024:	bl	10eb4 <error@plt>
   12028:	b	11fac <__assert_fail@plt+0xf9c>
   1202c:	movw	r1, #29016	; 0x7158
   12030:	movt	r1, #2
   12034:	str	r0, [r1]
   12038:	bx	lr
   1203c:	movw	r1, #29020	; 0x715c
   12040:	movt	r1, #2
   12044:	strb	r0, [r1]
   12048:	bx	lr
   1204c:	push	{r4, r5, r6, sl, fp, lr}
   12050:	add	fp, sp, #16
   12054:	sub	sp, sp, #8
   12058:	movw	r0, #28996	; 0x7144
   1205c:	movt	r0, #2
   12060:	ldr	r0, [r0]
   12064:	bl	15074 <__assert_fail@plt+0x4064>
   12068:	cmp	r0, #0
   1206c:	beq	12094 <__assert_fail@plt+0x1084>
   12070:	movw	r0, #29020	; 0x715c
   12074:	movt	r0, #2
   12078:	ldrb	r0, [r0]
   1207c:	cmp	r0, #0
   12080:	beq	120b4 <__assert_fail@plt+0x10a4>
   12084:	bl	10f44 <__errno_location@plt>
   12088:	ldr	r0, [r0]
   1208c:	cmp	r0, #32
   12090:	bne	120b4 <__assert_fail@plt+0x10a4>
   12094:	movw	r0, #28992	; 0x7140
   12098:	movt	r0, #2
   1209c:	ldr	r0, [r0]
   120a0:	bl	15074 <__assert_fail@plt+0x4064>
   120a4:	cmp	r0, #0
   120a8:	subeq	sp, fp, #16
   120ac:	popeq	{r4, r5, r6, sl, fp, pc}
   120b0:	b	12124 <__assert_fail@plt+0x1114>
   120b4:	movw	r1, #24711	; 0x6087
   120b8:	movt	r1, #1
   120bc:	mov	r0, #0
   120c0:	mov	r2, #5
   120c4:	bl	10e30 <dcgettext@plt>
   120c8:	mov	r4, r0
   120cc:	movw	r0, #29016	; 0x7158
   120d0:	movt	r0, #2
   120d4:	ldr	r6, [r0]
   120d8:	bl	10f44 <__errno_location@plt>
   120dc:	ldr	r5, [r0]
   120e0:	cmp	r6, #0
   120e4:	bne	12100 <__assert_fail@plt+0x10f0>
   120e8:	movw	r2, #24727	; 0x6097
   120ec:	movt	r2, #1
   120f0:	mov	r0, #0
   120f4:	mov	r1, r5
   120f8:	mov	r3, r4
   120fc:	b	12120 <__assert_fail@plt+0x1110>
   12100:	mov	r0, r6
   12104:	bl	137d8 <__assert_fail@plt+0x27c8>
   12108:	mov	r3, r0
   1210c:	str	r4, [sp]
   12110:	movw	r2, #24723	; 0x6093
   12114:	movt	r2, #1
   12118:	mov	r0, #0
   1211c:	mov	r1, r5
   12120:	bl	10eb4 <error@plt>
   12124:	movw	r0, #28908	; 0x70ec
   12128:	movt	r0, #2
   1212c:	ldr	r0, [r0]
   12130:	bl	10e00 <_exit@plt>
   12134:	push	{r4, r5, fp, lr}
   12138:	add	fp, sp, #8
   1213c:	cmp	r0, #0
   12140:	beq	121d4 <__assert_fail@plt+0x11c4>
   12144:	mov	r4, r0
   12148:	mov	r1, #47	; 0x2f
   1214c:	bl	10fbc <strrchr@plt>
   12150:	cmp	r0, #0
   12154:	mov	r5, r4
   12158:	addne	r5, r0, #1
   1215c:	sub	r0, r5, r4
   12160:	cmp	r0, #7
   12164:	blt	121b8 <__assert_fail@plt+0x11a8>
   12168:	sub	r0, r5, #7
   1216c:	movw	r1, #24786	; 0x60d2
   12170:	movt	r1, #1
   12174:	mov	r2, #7
   12178:	bl	10fec <strncmp@plt>
   1217c:	cmp	r0, #0
   12180:	bne	121b8 <__assert_fail@plt+0x11a8>
   12184:	movw	r1, #24794	; 0x60da
   12188:	movt	r1, #1
   1218c:	mov	r0, r5
   12190:	mov	r2, #3
   12194:	bl	10fec <strncmp@plt>
   12198:	cmp	r0, #0
   1219c:	beq	121a8 <__assert_fail@plt+0x1198>
   121a0:	mov	r4, r5
   121a4:	b	121b8 <__assert_fail@plt+0x11a8>
   121a8:	add	r4, r5, #3
   121ac:	movw	r0, #28976	; 0x7130
   121b0:	movt	r0, #2
   121b4:	str	r4, [r0]
   121b8:	movw	r0, #28980	; 0x7134
   121bc:	movt	r0, #2
   121c0:	str	r4, [r0]
   121c4:	movw	r0, #29024	; 0x7160
   121c8:	movt	r0, #2
   121cc:	str	r4, [r0]
   121d0:	pop	{r4, r5, fp, pc}
   121d4:	movw	r0, #28992	; 0x7140
   121d8:	movt	r0, #2
   121dc:	ldr	r3, [r0]
   121e0:	movw	r0, #24730	; 0x609a
   121e4:	movt	r0, #1
   121e8:	mov	r1, #55	; 0x37
   121ec:	mov	r2, #1
   121f0:	bl	10e6c <fwrite@plt>
   121f4:	bl	10ff8 <abort@plt>
   121f8:	push	{r4, r5, r6, sl, fp, lr}
   121fc:	add	fp, sp, #16
   12200:	mov	r4, r0
   12204:	movw	r0, #29032	; 0x7168
   12208:	movt	r0, #2
   1220c:	cmp	r4, #0
   12210:	moveq	r4, r0
   12214:	bl	10f44 <__errno_location@plt>
   12218:	mov	r5, r0
   1221c:	ldr	r6, [r0]
   12220:	mov	r0, r4
   12224:	mov	r1, #48	; 0x30
   12228:	bl	144f0 <__assert_fail@plt+0x34e0>
   1222c:	str	r6, [r5]
   12230:	pop	{r4, r5, r6, sl, fp, pc}
   12234:	movw	r1, #29032	; 0x7168
   12238:	movt	r1, #2
   1223c:	cmp	r0, #0
   12240:	movne	r1, r0
   12244:	ldr	r0, [r1]
   12248:	bx	lr
   1224c:	movw	r2, #29032	; 0x7168
   12250:	movt	r2, #2
   12254:	cmp	r0, #0
   12258:	movne	r2, r0
   1225c:	str	r1, [r2]
   12260:	bx	lr
   12264:	movw	r3, #29032	; 0x7168
   12268:	movt	r3, #2
   1226c:	cmp	r0, #0
   12270:	movne	r3, r0
   12274:	ubfx	r0, r1, #5, #3
   12278:	add	ip, r3, r0, lsl #2
   1227c:	ldr	r3, [ip, #8]
   12280:	and	r1, r1, #31
   12284:	mov	r0, #1
   12288:	and	r0, r0, r3, lsr r1
   1228c:	and	r2, r2, #1
   12290:	eor	r2, r0, r2
   12294:	eor	r1, r3, r2, lsl r1
   12298:	str	r1, [ip, #8]
   1229c:	bx	lr
   122a0:	movw	r2, #29032	; 0x7168
   122a4:	movt	r2, #2
   122a8:	cmp	r0, #0
   122ac:	movne	r2, r0
   122b0:	ldr	r0, [r2, #4]
   122b4:	str	r1, [r2, #4]
   122b8:	bx	lr
   122bc:	push	{fp, lr}
   122c0:	mov	fp, sp
   122c4:	movw	r3, #29032	; 0x7168
   122c8:	movt	r3, #2
   122cc:	cmp	r0, #0
   122d0:	movne	r3, r0
   122d4:	mov	r0, #10
   122d8:	str	r0, [r3]
   122dc:	cmp	r1, #0
   122e0:	cmpne	r2, #0
   122e4:	bne	122ec <__assert_fail@plt+0x12dc>
   122e8:	bl	10ff8 <abort@plt>
   122ec:	str	r1, [r3, #40]	; 0x28
   122f0:	str	r2, [r3, #44]	; 0x2c
   122f4:	pop	{fp, pc}
   122f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122fc:	add	fp, sp, #28
   12300:	sub	sp, sp, #20
   12304:	mov	r8, r3
   12308:	mov	r9, r2
   1230c:	mov	sl, r1
   12310:	mov	r7, r0
   12314:	ldr	r0, [fp, #8]
   12318:	movw	r5, #29032	; 0x7168
   1231c:	movt	r5, #2
   12320:	cmp	r0, #0
   12324:	movne	r5, r0
   12328:	bl	10f44 <__errno_location@plt>
   1232c:	mov	r4, r0
   12330:	ldm	r5, {r0, r1}
   12334:	ldr	r2, [r5, #40]	; 0x28
   12338:	ldr	r3, [r5, #44]	; 0x2c
   1233c:	ldr	r6, [r4]
   12340:	add	r5, r5, #8
   12344:	stm	sp, {r0, r1, r5}
   12348:	str	r2, [sp, #12]
   1234c:	str	r3, [sp, #16]
   12350:	mov	r0, r7
   12354:	mov	r1, sl
   12358:	mov	r2, r9
   1235c:	mov	r3, r8
   12360:	bl	12370 <__assert_fail@plt+0x1360>
   12364:	str	r6, [r4]
   12368:	sub	sp, fp, #28
   1236c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12374:	add	fp, sp, #28
   12378:	sub	sp, sp, #156	; 0x9c
   1237c:	mov	r9, r3
   12380:	mov	r7, r1
   12384:	mov	r6, r0
   12388:	str	r2, [fp, #-80]	; 0xffffffb0
   1238c:	add	r0, r2, #1
   12390:	str	r0, [sp, #76]	; 0x4c
   12394:	ldr	r0, [fp, #12]
   12398:	and	r1, r0, #1
   1239c:	str	r1, [sp, #40]	; 0x28
   123a0:	and	r1, r0, #4
   123a4:	str	r1, [sp, #36]	; 0x24
   123a8:	ubfx	r4, r0, #1, #1
   123ac:	bl	10e84 <__ctype_get_mb_cur_max@plt>
   123b0:	str	r0, [sp, #44]	; 0x2c
   123b4:	ldr	r0, [fp, #24]
   123b8:	str	r0, [sp, #88]	; 0x58
   123bc:	ldr	r0, [fp, #20]
   123c0:	str	r0, [sp, #80]	; 0x50
   123c4:	ldr	r1, [fp, #8]
   123c8:	mov	r0, #0
   123cc:	str	r0, [sp, #84]	; 0x54
   123d0:	mov	r0, #0
   123d4:	str	r0, [fp, #-84]	; 0xffffffac
   123d8:	mov	r0, #0
   123dc:	str	r0, [fp, #-72]	; 0xffffffb8
   123e0:	mov	r0, #0
   123e4:	mov	r2, #0
   123e8:	str	r2, [fp, #-56]	; 0xffffffc8
   123ec:	mov	r2, #0
   123f0:	str	r2, [sp, #64]	; 0x40
   123f4:	mov	r2, #1
   123f8:	str	r2, [fp, #-48]	; 0xffffffd0
   123fc:	cmp	r1, #10
   12400:	bhi	1332c <__assert_fail@plt+0x231c>
   12404:	mov	sl, r7
   12408:	mov	r7, r1
   1240c:	add	r1, pc, #24
   12410:	mov	r8, #0
   12414:	mov	r2, #1
   12418:	mov	r3, #0
   1241c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12420:	mov	lr, r9
   12424:	mov	r5, r6
   12428:	ldr	pc, [r1, r7, lsl #2]
   1242c:	andeq	r2, r1, r0, lsl #10
   12430:	andeq	r2, r1, r0, asr #10
   12434:	andeq	r2, r1, r0, lsl r5
   12438:	strdeq	r2, [r1], -r8
   1243c:	andeq	r2, r1, r4, lsr r5
   12440:	muleq	r1, r4, r5
   12444:	andeq	r2, r1, r0, lsr #10
   12448:	strdeq	r2, [r1], -r0
   1244c:	andeq	r2, r1, r8, asr r4
   12450:	andeq	r2, r1, r8, asr r4
   12454:	andeq	r2, r1, r4, lsl #9
   12458:	movw	r0, #24876	; 0x612c
   1245c:	movt	r0, #1
   12460:	mov	r1, r7
   12464:	bl	13934 <__assert_fail@plt+0x2924>
   12468:	str	r0, [sp, #80]	; 0x50
   1246c:	movw	r0, #24878	; 0x612e
   12470:	movt	r0, #1
   12474:	mov	r1, r7
   12478:	bl	13934 <__assert_fail@plt+0x2924>
   1247c:	mov	r5, r6
   12480:	str	r0, [sp, #88]	; 0x58
   12484:	mov	r8, #0
   12488:	tst	r4, #1
   1248c:	str	r7, [fp, #-64]	; 0xffffffc0
   12490:	bne	124c8 <__assert_fail@plt+0x14b8>
   12494:	ldr	r0, [sp, #80]	; 0x50
   12498:	ldrb	r0, [r0]
   1249c:	cmp	r0, #0
   124a0:	beq	124c8 <__assert_fail@plt+0x14b8>
   124a4:	ldr	r1, [sp, #80]	; 0x50
   124a8:	add	r1, r1, #1
   124ac:	mov	r8, #0
   124b0:	cmp	r8, sl
   124b4:	strbcc	r0, [r5, r8]
   124b8:	ldrb	r0, [r1, r8]
   124bc:	add	r8, r8, #1
   124c0:	cmp	r0, #0
   124c4:	bne	124b0 <__assert_fail@plt+0x14a0>
   124c8:	ldr	r7, [sp, #88]	; 0x58
   124cc:	mov	r0, r7
   124d0:	bl	10f2c <strlen@plt>
   124d4:	mov	r5, r6
   124d8:	str	r0, [fp, #-72]	; 0xffffffb8
   124dc:	str	r7, [fp, #-84]	; 0xffffffac
   124e0:	mov	r2, #1
   124e4:	mov	r3, r4
   124e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124ec:	mov	lr, r9
   124f0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   124f4:	b	125f0 <__assert_fail@plt+0x15e0>
   124f8:	mov	r0, #1
   124fc:	b	12540 <__assert_fail@plt+0x1530>
   12500:	mov	r7, #0
   12504:	mov	r8, #0
   12508:	mov	r2, r0
   1250c:	b	125ec <__assert_fail@plt+0x15dc>
   12510:	tst	r4, #1
   12514:	bne	12540 <__assert_fail@plt+0x1530>
   12518:	mov	r2, r0
   1251c:	b	12568 <__assert_fail@plt+0x1558>
   12520:	mov	r0, #1
   12524:	str	r0, [fp, #-72]	; 0xffffffb8
   12528:	mov	r8, #0
   1252c:	mov	r7, #5
   12530:	b	125ac <__assert_fail@plt+0x159c>
   12534:	mov	r2, #1
   12538:	tst	r4, #1
   1253c:	beq	12568 <__assert_fail@plt+0x1558>
   12540:	mov	r1, #1
   12544:	str	r1, [fp, #-72]	; 0xffffffb8
   12548:	mov	r8, #0
   1254c:	mov	r7, #2
   12550:	movw	r1, #24878	; 0x612e
   12554:	movt	r1, #1
   12558:	str	r1, [fp, #-84]	; 0xffffffac
   1255c:	mov	r2, r0
   12560:	mov	r3, #1
   12564:	b	125f0 <__assert_fail@plt+0x15e0>
   12568:	mov	r8, #1
   1256c:	mov	r7, #2
   12570:	cmp	sl, #0
   12574:	movne	r0, #39	; 0x27
   12578:	strbne	r0, [r5]
   1257c:	movw	r0, #24878	; 0x612e
   12580:	movt	r0, #1
   12584:	str	r0, [fp, #-84]	; 0xffffffac
   12588:	mov	r0, #1
   1258c:	str	r0, [fp, #-72]	; 0xffffffb8
   12590:	b	125ec <__assert_fail@plt+0x15dc>
   12594:	mov	r7, #5
   12598:	tst	r4, #1
   1259c:	beq	125c4 <__assert_fail@plt+0x15b4>
   125a0:	mov	r0, #1
   125a4:	str	r0, [fp, #-72]	; 0xffffffb8
   125a8:	mov	r8, #0
   125ac:	movw	r0, #24874	; 0x612a
   125b0:	movt	r0, #1
   125b4:	str	r0, [fp, #-84]	; 0xffffffac
   125b8:	mov	r2, #1
   125bc:	mov	r3, #1
   125c0:	b	125f0 <__assert_fail@plt+0x15e0>
   125c4:	cmp	sl, #0
   125c8:	movne	r0, #34	; 0x22
   125cc:	strbne	r0, [r5]
   125d0:	mov	r8, #1
   125d4:	movw	r0, #24874	; 0x612a
   125d8:	movt	r0, #1
   125dc:	str	r0, [fp, #-84]	; 0xffffffac
   125e0:	mov	r0, #1
   125e4:	str	r0, [fp, #-72]	; 0xffffffb8
   125e8:	mov	r2, #1
   125ec:	mov	r3, #0
   125f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   125f4:	cmp	r0, #0
   125f8:	movwne	r0, #1
   125fc:	and	r1, r0, r3
   12600:	and	r1, r2, r1
   12604:	str	r1, [sp, #56]	; 0x38
   12608:	sub	r1, r7, #2
   1260c:	clz	r1, r1
   12610:	lsr	r1, r1, #5
   12614:	and	r1, r1, r3
   12618:	str	r1, [sp, #68]	; 0x44
   1261c:	str	r7, [fp, #-64]	; 0xffffffc0
   12620:	subs	r1, r7, #2
   12624:	movwne	r1, #1
   12628:	eor	r4, r3, #1
   1262c:	str	r4, [fp, #-88]	; 0xffffffa8
   12630:	orr	r4, r1, r4
   12634:	str	r4, [sp, #72]	; 0x48
   12638:	and	r1, r1, r2
   1263c:	and	r0, r0, r1
   12640:	str	r0, [fp, #-60]	; 0xffffffc4
   12644:	str	r3, [fp, #-76]	; 0xffffffb4
   12648:	orr	r0, r1, r3
   1264c:	eor	r0, r0, #1
   12650:	ldr	r1, [fp, #16]
   12654:	clz	r1, r1
   12658:	lsr	r1, r1, #5
   1265c:	orr	r0, r1, r0
   12660:	str	r0, [fp, #-68]	; 0xffffffbc
   12664:	str	r2, [sp, #92]	; 0x5c
   12668:	eor	r0, r2, #1
   1266c:	str	r0, [sp, #60]	; 0x3c
   12670:	mov	r7, #0
   12674:	cmn	lr, #1
   12678:	beq	12688 <__assert_fail@plt+0x1678>
   1267c:	cmp	r7, lr
   12680:	bne	12694 <__assert_fail@plt+0x1684>
   12684:	b	131a0 <__assert_fail@plt+0x2190>
   12688:	ldrb	r0, [ip, r7]
   1268c:	cmp	r0, #0
   12690:	beq	131a0 <__assert_fail@plt+0x2190>
   12694:	mov	r9, #0
   12698:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1269c:	cmp	r0, #0
   126a0:	beq	126d4 <__assert_fail@plt+0x16c4>
   126a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   126a8:	add	r4, r7, r0
   126ac:	cmp	r0, #2
   126b0:	bcc	126cc <__assert_fail@plt+0x16bc>
   126b4:	cmn	lr, #1
   126b8:	bne	126cc <__assert_fail@plt+0x16bc>
   126bc:	mov	r0, ip
   126c0:	bl	10f2c <strlen@plt>
   126c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   126c8:	mov	lr, r0
   126cc:	cmp	r4, lr
   126d0:	bls	126e0 <__assert_fail@plt+0x16d0>
   126d4:	mov	r0, #0
   126d8:	str	r0, [fp, #-52]	; 0xffffffcc
   126dc:	b	12724 <__assert_fail@plt+0x1714>
   126e0:	mov	r4, lr
   126e4:	add	r0, ip, r7
   126e8:	ldr	r1, [fp, #-84]	; 0xffffffac
   126ec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   126f0:	bl	10f20 <bcmp@plt>
   126f4:	cmp	r0, #0
   126f8:	mov	r1, r0
   126fc:	movwne	r1, #1
   12700:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12704:	orr	r1, r1, r2
   12708:	tst	r1, #1
   1270c:	beq	13274 <__assert_fail@plt+0x2264>
   12710:	clz	r0, r0
   12714:	lsr	r0, r0, #5
   12718:	str	r0, [fp, #-52]	; 0xffffffcc
   1271c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12720:	mov	lr, r4
   12724:	ldrb	r4, [ip, r7]
   12728:	cmp	r4, #126	; 0x7e
   1272c:	bhi	12c5c <__assert_fail@plt+0x1c4c>
   12730:	mov	r6, #1
   12734:	mov	r2, #110	; 0x6e
   12738:	mov	r0, #97	; 0x61
   1273c:	add	r3, pc, #4
   12740:	mov	r1, #0
   12744:	ldr	pc, [r3, r4, lsl #2]
   12748:			; <UNDEFINED> instruction: 0x00012abc
   1274c:	andeq	r2, r1, ip, asr ip
   12750:	andeq	r2, r1, ip, asr ip
   12754:	andeq	r2, r1, ip, asr ip
   12758:	andeq	r2, r1, ip, asr ip
   1275c:	andeq	r2, r1, ip, asr ip
   12760:	andeq	r2, r1, ip, asr ip
   12764:	andeq	r2, r1, r0, lsr sp
   12768:	muleq	r1, ip, sl
   1276c:	muleq	r1, r4, sl
   12770:	andeq	r2, r1, r8, lsr #21
   12774:	andeq	r2, r1, r4, asr #23
   12778:	andeq	r2, r1, ip, lsl #21
   1277c:	andeq	r2, r1, r4, lsr #21
   12780:	andeq	r2, r1, ip, asr ip
   12784:	andeq	r2, r1, ip, asr ip
   12788:	andeq	r2, r1, ip, asr ip
   1278c:	andeq	r2, r1, ip, asr ip
   12790:	andeq	r2, r1, ip, asr ip
   12794:	andeq	r2, r1, ip, asr ip
   12798:	andeq	r2, r1, ip, asr ip
   1279c:	andeq	r2, r1, ip, asr ip
   127a0:	andeq	r2, r1, ip, asr ip
   127a4:	andeq	r2, r1, ip, asr ip
   127a8:	andeq	r2, r1, ip, asr ip
   127ac:	andeq	r2, r1, ip, asr ip
   127b0:	andeq	r2, r1, ip, asr ip
   127b4:	andeq	r2, r1, ip, asr ip
   127b8:	andeq	r2, r1, ip, asr ip
   127bc:	andeq	r2, r1, ip, asr ip
   127c0:	andeq	r2, r1, ip, asr ip
   127c4:	andeq	r2, r1, ip, asr ip
   127c8:	andeq	r2, r1, r0, asr #20
   127cc:	andeq	r2, r1, r4, asr #20
   127d0:	andeq	r2, r1, r4, asr #20
   127d4:	andeq	r2, r1, ip, lsr #20
   127d8:	andeq	r2, r1, r4, asr #20
   127dc:	andeq	r2, r1, r4, asr #18
   127e0:	andeq	r2, r1, r4, asr #20
   127e4:	andeq	r2, r1, ip, asr #23
   127e8:	andeq	r2, r1, r4, asr #20
   127ec:	andeq	r2, r1, r4, asr #20
   127f0:	andeq	r2, r1, r4, asr #20
   127f4:	andeq	r2, r1, r4, asr #18
   127f8:	andeq	r2, r1, r4, asr #18
   127fc:	andeq	r2, r1, r4, asr #18
   12800:	andeq	r2, r1, r4, asr #18
   12804:	andeq	r2, r1, r4, asr #18
   12808:	andeq	r2, r1, r4, asr #18
   1280c:	andeq	r2, r1, r4, asr #18
   12810:	andeq	r2, r1, r4, asr #18
   12814:	andeq	r2, r1, r4, asr #18
   12818:	andeq	r2, r1, r4, asr #18
   1281c:	andeq	r2, r1, r4, asr #18
   12820:	andeq	r2, r1, r4, asr #18
   12824:	andeq	r2, r1, r4, asr #18
   12828:	andeq	r2, r1, r4, asr #18
   1282c:	andeq	r2, r1, r4, asr #18
   12830:	andeq	r2, r1, r4, asr #18
   12834:	andeq	r2, r1, r4, asr #20
   12838:	andeq	r2, r1, r4, asr #20
   1283c:	andeq	r2, r1, r4, asr #20
   12840:	andeq	r2, r1, r4, asr #20
   12844:	muleq	r1, r4, fp
   12848:	andeq	r2, r1, ip, asr ip
   1284c:	andeq	r2, r1, r4, asr #18
   12850:	andeq	r2, r1, r4, asr #18
   12854:	andeq	r2, r1, r4, asr #18
   12858:	andeq	r2, r1, r4, asr #18
   1285c:	andeq	r2, r1, r4, asr #18
   12860:	andeq	r2, r1, r4, asr #18
   12864:	andeq	r2, r1, r4, asr #18
   12868:	andeq	r2, r1, r4, asr #18
   1286c:	andeq	r2, r1, r4, asr #18
   12870:	andeq	r2, r1, r4, asr #18
   12874:	andeq	r2, r1, r4, asr #18
   12878:	andeq	r2, r1, r4, asr #18
   1287c:	andeq	r2, r1, r4, asr #18
   12880:	andeq	r2, r1, r4, asr #18
   12884:	andeq	r2, r1, r4, asr #18
   12888:	andeq	r2, r1, r4, asr #18
   1288c:	andeq	r2, r1, r4, asr #18
   12890:	andeq	r2, r1, r4, asr #18
   12894:	andeq	r2, r1, r4, asr #18
   12898:	andeq	r2, r1, r4, asr #18
   1289c:	andeq	r2, r1, r4, asr #18
   128a0:	andeq	r2, r1, r4, asr #18
   128a4:	andeq	r2, r1, r4, asr #18
   128a8:	andeq	r2, r1, r4, asr #18
   128ac:	andeq	r2, r1, r4, asr #18
   128b0:	andeq	r2, r1, r4, asr #18
   128b4:	andeq	r2, r1, r4, asr #20
   128b8:	andeq	r2, r1, ip, ror #20
   128bc:	andeq	r2, r1, r4, asr #18
   128c0:	andeq	r2, r1, r4, asr #20
   128c4:	andeq	r2, r1, r4, asr #18
   128c8:	andeq	r2, r1, r4, asr #20
   128cc:	andeq	r2, r1, r4, asr #18
   128d0:	andeq	r2, r1, r4, asr #18
   128d4:	andeq	r2, r1, r4, asr #18
   128d8:	andeq	r2, r1, r4, asr #18
   128dc:	andeq	r2, r1, r4, asr #18
   128e0:	andeq	r2, r1, r4, asr #18
   128e4:	andeq	r2, r1, r4, asr #18
   128e8:	andeq	r2, r1, r4, asr #18
   128ec:	andeq	r2, r1, r4, asr #18
   128f0:	andeq	r2, r1, r4, asr #18
   128f4:	andeq	r2, r1, r4, asr #18
   128f8:	andeq	r2, r1, r4, asr #18
   128fc:	andeq	r2, r1, r4, asr #18
   12900:	andeq	r2, r1, r4, asr #18
   12904:	andeq	r2, r1, r4, asr #18
   12908:	andeq	r2, r1, r4, asr #18
   1290c:	andeq	r2, r1, r4, asr #18
   12910:	andeq	r2, r1, r4, asr #18
   12914:	andeq	r2, r1, r4, asr #18
   12918:	andeq	r2, r1, r4, asr #18
   1291c:	andeq	r2, r1, r4, asr #18
   12920:	andeq	r2, r1, r4, asr #18
   12924:	andeq	r2, r1, r4, asr #18
   12928:	andeq	r2, r1, r4, asr #18
   1292c:	andeq	r2, r1, r4, asr #18
   12930:	andeq	r2, r1, r4, asr #18
   12934:	andeq	r2, r1, r0, lsl #20
   12938:	andeq	r2, r1, r4, asr #20
   1293c:	andeq	r2, r1, r0, lsl #20
   12940:	andeq	r2, r1, ip, lsr #20
   12944:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12948:	tst	r0, #1
   1294c:	bne	12978 <__assert_fail@plt+0x1968>
   12950:	ubfx	r0, r4, #5, #3
   12954:	ldr	r1, [fp, #16]
   12958:	ldr	r0, [r1, r0, lsl #2]
   1295c:	and	r1, r4, #31
   12960:	mov	r2, #1
   12964:	tst	r0, r2, lsl r1
   12968:	beq	12978 <__assert_fail@plt+0x1968>
   1296c:	mov	r0, r4
   12970:	mov	r1, r6
   12974:	b	1298c <__assert_fail@plt+0x197c>
   12978:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1297c:	cmp	r0, #0
   12980:	mov	r0, r4
   12984:	mov	r1, r6
   12988:	beq	12cc4 <__assert_fail@plt+0x1cb4>
   1298c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12990:	tst	r2, #1
   12994:	bne	13288 <__assert_fail@plt+0x2278>
   12998:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1299c:	subs	r2, r2, #2
   129a0:	movwne	r2, #1
   129a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   129a8:	orr	r2, r2, r3
   129ac:	tst	r2, #1
   129b0:	bne	129ec <__assert_fail@plt+0x19dc>
   129b4:	cmp	r8, sl
   129b8:	movcc	r2, #39	; 0x27
   129bc:	strbcc	r2, [r5, r8]
   129c0:	add	r2, r8, #1
   129c4:	cmp	r2, sl
   129c8:	movcc	r3, #36	; 0x24
   129cc:	strbcc	r3, [r5, r2]
   129d0:	add	r2, r8, #2
   129d4:	cmp	r2, sl
   129d8:	movcc	r3, #39	; 0x27
   129dc:	strbcc	r3, [r5, r2]
   129e0:	add	r8, r8, #3
   129e4:	mov	r2, #1
   129e8:	str	r2, [fp, #-56]	; 0xffffffc8
   129ec:	cmp	r8, sl
   129f0:	movcc	r2, #92	; 0x5c
   129f4:	strbcc	r2, [r5, r8]
   129f8:	add	r8, r8, #1
   129fc:	b	12d08 <__assert_fail@plt+0x1cf8>
   12a00:	cmp	lr, #1
   12a04:	beq	12a2c <__assert_fail@plt+0x1a1c>
   12a08:	mov	r6, #0
   12a0c:	cmn	lr, #1
   12a10:	bne	12a38 <__assert_fail@plt+0x1a28>
   12a14:	ldrb	r0, [ip, #1]
   12a18:	cmp	r0, #0
   12a1c:	beq	12a2c <__assert_fail@plt+0x1a1c>
   12a20:	mvn	lr, #0
   12a24:	mov	r9, #0
   12a28:	b	12944 <__assert_fail@plt+0x1934>
   12a2c:	mov	r6, #0
   12a30:	cmp	r7, #0
   12a34:	beq	12a40 <__assert_fail@plt+0x1a30>
   12a38:	mov	r9, #0
   12a3c:	b	12944 <__assert_fail@plt+0x1934>
   12a40:	mov	r1, #1
   12a44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a48:	cmp	r0, #2
   12a4c:	bne	12a64 <__assert_fail@plt+0x1a54>
   12a50:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a54:	tst	r0, #1
   12a58:	mov	r6, r1
   12a5c:	beq	12944 <__assert_fail@plt+0x1934>
   12a60:	b	13288 <__assert_fail@plt+0x2278>
   12a64:	mov	r6, r1
   12a68:	b	12944 <__assert_fail@plt+0x1934>
   12a6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12a70:	cmp	r0, #2
   12a74:	bne	12ca8 <__assert_fail@plt+0x1c98>
   12a78:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a7c:	tst	r0, #1
   12a80:	bne	13288 <__assert_fail@plt+0x2278>
   12a84:	mov	r9, #0
   12a88:	b	12cbc <__assert_fail@plt+0x1cac>
   12a8c:	mov	r0, #102	; 0x66
   12a90:	b	12d30 <__assert_fail@plt+0x1d20>
   12a94:	mov	r2, #116	; 0x74
   12a98:	b	12aa8 <__assert_fail@plt+0x1a98>
   12a9c:	mov	r0, #98	; 0x62
   12aa0:	b	12d30 <__assert_fail@plt+0x1d20>
   12aa4:	mov	r2, #114	; 0x72
   12aa8:	ldr	r0, [sp, #72]	; 0x48
   12aac:	tst	r0, #1
   12ab0:	mov	r0, r2
   12ab4:	bne	12d30 <__assert_fail@plt+0x1d20>
   12ab8:	b	13288 <__assert_fail@plt+0x2278>
   12abc:	ldr	r0, [sp, #92]	; 0x5c
   12ac0:	tst	r0, #1
   12ac4:	beq	12d4c <__assert_fail@plt+0x1d3c>
   12ac8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12acc:	tst	r0, #1
   12ad0:	bne	13288 <__assert_fail@plt+0x2278>
   12ad4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ad8:	subs	r0, r0, #2
   12adc:	movwne	r0, #1
   12ae0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12ae4:	orr	r0, r0, r1
   12ae8:	tst	r0, #1
   12aec:	bne	12b28 <__assert_fail@plt+0x1b18>
   12af0:	cmp	r8, sl
   12af4:	movcc	r0, #39	; 0x27
   12af8:	strbcc	r0, [r5, r8]
   12afc:	add	r0, r8, #1
   12b00:	cmp	r0, sl
   12b04:	movcc	r1, #36	; 0x24
   12b08:	strbcc	r1, [r5, r0]
   12b0c:	add	r0, r8, #2
   12b10:	cmp	r0, sl
   12b14:	movcc	r1, #39	; 0x27
   12b18:	strbcc	r1, [r5, r0]
   12b1c:	add	r8, r8, #3
   12b20:	mov	r0, #1
   12b24:	str	r0, [fp, #-56]	; 0xffffffc8
   12b28:	cmp	r8, sl
   12b2c:	movcc	r0, #92	; 0x5c
   12b30:	strbcc	r0, [r5, r8]
   12b34:	add	r0, r8, #1
   12b38:	mov	r6, #0
   12b3c:	mov	r9, #1
   12b40:	mov	r4, #48	; 0x30
   12b44:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12b48:	cmp	r1, #2
   12b4c:	beq	12f10 <__assert_fail@plt+0x1f00>
   12b50:	add	r1, r7, #1
   12b54:	cmp	r1, lr
   12b58:	bcs	12f10 <__assert_fail@plt+0x1f00>
   12b5c:	ldrb	r1, [ip, r1]
   12b60:	sub	r1, r1, #48	; 0x30
   12b64:	uxtb	r1, r1
   12b68:	cmp	r1, #9
   12b6c:	bhi	12f10 <__assert_fail@plt+0x1f00>
   12b70:	cmp	r0, sl
   12b74:	movcc	r1, #48	; 0x30
   12b78:	strbcc	r1, [r5, r0]
   12b7c:	add	r0, r8, #2
   12b80:	cmp	r0, sl
   12b84:	movcc	r1, #48	; 0x30
   12b88:	strbcc	r1, [r5, r0]
   12b8c:	add	r8, r8, #3
   12b90:	b	12944 <__assert_fail@plt+0x1934>
   12b94:	mov	r9, #0
   12b98:	mov	r4, #63	; 0x3f
   12b9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ba0:	cmp	r0, #5
   12ba4:	beq	12f18 <__assert_fail@plt+0x1f08>
   12ba8:	cmp	r0, #2
   12bac:	bne	12fc0 <__assert_fail@plt+0x1fb0>
   12bb0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bb4:	tst	r0, #1
   12bb8:	mov	r6, #0
   12bbc:	beq	12944 <__assert_fail@plt+0x1934>
   12bc0:	b	13288 <__assert_fail@plt+0x2278>
   12bc4:	mov	r0, #118	; 0x76
   12bc8:	b	12d30 <__assert_fail@plt+0x1d20>
   12bcc:	mov	r4, #39	; 0x27
   12bd0:	mov	r0, #1
   12bd4:	str	r0, [sp, #64]	; 0x40
   12bd8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12bdc:	cmp	r0, #2
   12be0:	bne	12d68 <__assert_fail@plt+0x1d58>
   12be4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12be8:	tst	r0, #1
   12bec:	bne	13288 <__assert_fail@plt+0x2278>
   12bf0:	ldr	r2, [sp, #84]	; 0x54
   12bf4:	cmp	r2, #0
   12bf8:	mov	r0, r2
   12bfc:	movwne	r0, #1
   12c00:	clz	r1, sl
   12c04:	lsr	r1, r1, #5
   12c08:	orrs	r0, r0, r1
   12c0c:	moveq	r2, sl
   12c10:	str	r2, [sp, #84]	; 0x54
   12c14:	moveq	sl, r0
   12c18:	cmp	r8, sl
   12c1c:	movcc	r0, #39	; 0x27
   12c20:	strbcc	r0, [r5, r8]
   12c24:	add	r0, r8, #1
   12c28:	cmp	r0, sl
   12c2c:	movcc	r1, #92	; 0x5c
   12c30:	strbcc	r1, [r5, r0]
   12c34:	add	r0, r8, #2
   12c38:	cmp	r0, sl
   12c3c:	movcc	r1, #39	; 0x27
   12c40:	strbcc	r1, [r5, r0]
   12c44:	add	r8, r8, #3
   12c48:	mov	r0, #0
   12c4c:	str	r0, [fp, #-56]	; 0xffffffc8
   12c50:	mov	r9, #0
   12c54:	mov	r6, #1
   12c58:	b	12944 <__assert_fail@plt+0x1934>
   12c5c:	ldr	r0, [sp, #44]	; 0x2c
   12c60:	cmp	r0, #1
   12c64:	bne	12d70 <__assert_fail@plt+0x1d60>
   12c68:	str	lr, [sp, #32]
   12c6c:	bl	10f08 <__ctype_b_loc@plt>
   12c70:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12c74:	ldr	r0, [r0]
   12c78:	add	r0, r0, r4, lsl #1
   12c7c:	ldrb	r0, [r0, #1]
   12c80:	ubfx	r6, r0, #6, #1
   12c84:	mov	r2, #1
   12c88:	ldr	r0, [sp, #60]	; 0x3c
   12c8c:	orr	r1, r6, r0
   12c90:	cmp	r2, #1
   12c94:	bhi	12fc8 <__assert_fail@plt+0x1fb8>
   12c98:	tst	r1, #1
   12c9c:	beq	12fc8 <__assert_fail@plt+0x1fb8>
   12ca0:	ldr	lr, [sp, #32]
   12ca4:	b	12944 <__assert_fail@plt+0x1934>
   12ca8:	mov	r9, #0
   12cac:	mov	r0, #92	; 0x5c
   12cb0:	ldr	r1, [sp, #56]	; 0x38
   12cb4:	cmp	r1, #0
   12cb8:	beq	12d30 <__assert_fail@plt+0x1d20>
   12cbc:	mov	r4, #92	; 0x5c
   12cc0:	mov	r6, #0
   12cc4:	cmp	r9, #0
   12cc8:	bne	12d00 <__assert_fail@plt+0x1cf0>
   12ccc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12cd0:	tst	r0, #1
   12cd4:	beq	12d00 <__assert_fail@plt+0x1cf0>
   12cd8:	cmp	r8, sl
   12cdc:	movcc	r0, #39	; 0x27
   12ce0:	strbcc	r0, [r5, r8]
   12ce4:	add	r0, r8, #1
   12ce8:	cmp	r0, sl
   12cec:	movcc	r1, #39	; 0x27
   12cf0:	strbcc	r1, [r5, r0]
   12cf4:	add	r8, r8, #2
   12cf8:	mov	r0, #0
   12cfc:	str	r0, [fp, #-56]	; 0xffffffc8
   12d00:	mov	r1, r6
   12d04:	mov	r0, r4
   12d08:	cmp	r8, sl
   12d0c:	strbcc	r0, [r5, r8]
   12d10:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12d14:	and	r0, r0, r1
   12d18:	str	r0, [fp, #-48]	; 0xffffffd0
   12d1c:	add	r8, r8, #1
   12d20:	add	r7, r7, #1
   12d24:	cmn	lr, #1
   12d28:	bne	1267c <__assert_fail@plt+0x166c>
   12d2c:	b	12688 <__assert_fail@plt+0x1678>
   12d30:	mov	r9, #0
   12d34:	ldr	r1, [sp, #92]	; 0x5c
   12d38:	tst	r1, #1
   12d3c:	mov	r6, #0
   12d40:	mov	r1, #0
   12d44:	beq	12944 <__assert_fail@plt+0x1934>
   12d48:	b	1298c <__assert_fail@plt+0x197c>
   12d4c:	mov	r4, #0
   12d50:	ldr	r0, [sp, #40]	; 0x28
   12d54:	cmp	r0, #0
   12d58:	mov	r9, #0
   12d5c:	mov	r6, #0
   12d60:	beq	12944 <__assert_fail@plt+0x1934>
   12d64:	b	12d20 <__assert_fail@plt+0x1d10>
   12d68:	mov	r6, #1
   12d6c:	b	12944 <__assert_fail@plt+0x1934>
   12d70:	mov	r0, #0
   12d74:	str	r0, [fp, #-36]	; 0xffffffdc
   12d78:	str	r0, [fp, #-40]	; 0xffffffd8
   12d7c:	cmn	lr, #1
   12d80:	bne	12d94 <__assert_fail@plt+0x1d84>
   12d84:	mov	r0, ip
   12d88:	bl	10f2c <strlen@plt>
   12d8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d90:	mov	lr, r0
   12d94:	ldr	r0, [sp, #76]	; 0x4c
   12d98:	add	r0, r0, r7
   12d9c:	str	r0, [sp, #24]
   12da0:	mov	r6, #1
   12da4:	mov	r2, #0
   12da8:	sub	r0, fp, #40	; 0x28
   12dac:	mov	r3, r0
   12db0:	str	r5, [sp, #28]
   12db4:	str	lr, [sp, #32]
   12db8:	b	12dfc <__assert_fail@plt+0x1dec>
   12dbc:	ldr	r5, [sp, #52]	; 0x34
   12dc0:	add	r5, r0, r5
   12dc4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12dc8:	bl	10e54 <iswprint@plt>
   12dcc:	cmp	r0, #0
   12dd0:	movwne	r0, #1
   12dd4:	and	r6, r6, r0
   12dd8:	sub	r0, fp, #40	; 0x28
   12ddc:	bl	10e18 <mbsinit@plt>
   12de0:	sub	r3, fp, #40	; 0x28
   12de4:	mov	r2, r5
   12de8:	ldr	lr, [sp, #32]
   12dec:	cmp	r0, #0
   12df0:	ldr	r5, [sp, #28]
   12df4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12df8:	bne	12c88 <__assert_fail@plt+0x1c78>
   12dfc:	str	r2, [sp, #52]	; 0x34
   12e00:	add	r0, r2, r7
   12e04:	add	r1, ip, r0
   12e08:	str	r0, [sp, #48]	; 0x30
   12e0c:	sub	r2, lr, r0
   12e10:	sub	r0, fp, #44	; 0x2c
   12e14:	bl	15358 <__assert_fail@plt+0x4348>
   12e18:	cmp	r0, #0
   12e1c:	beq	13194 <__assert_fail@plt+0x2184>
   12e20:	cmn	r0, #1
   12e24:	beq	13150 <__assert_fail@plt+0x2140>
   12e28:	cmn	r0, #2
   12e2c:	ldr	lr, [sp, #32]
   12e30:	beq	13158 <__assert_fail@plt+0x2148>
   12e34:	cmp	r0, #2
   12e38:	mov	r1, #0
   12e3c:	movwcc	r1, #1
   12e40:	ldr	r2, [sp, #68]	; 0x44
   12e44:	eor	r2, r2, #1
   12e48:	orrs	r1, r2, r1
   12e4c:	bne	12dbc <__assert_fail@plt+0x1dac>
   12e50:	ldr	r1, [sp, #52]	; 0x34
   12e54:	ldr	r2, [sp, #24]
   12e58:	add	r1, r2, r1
   12e5c:	sub	r2, r0, #1
   12e60:	b	12e70 <__assert_fail@plt+0x1e60>
   12e64:	add	r1, r1, #1
   12e68:	subs	r2, r2, #1
   12e6c:	beq	12dbc <__assert_fail@plt+0x1dac>
   12e70:	ldrb	r3, [r1]
   12e74:	sub	r3, r3, #91	; 0x5b
   12e78:	cmp	r3, #33	; 0x21
   12e7c:	bhi	12e64 <__assert_fail@plt+0x1e54>
   12e80:	add	r5, pc, #0
   12e84:	ldr	pc, [r5, r3, lsl #2]
   12e88:	andeq	r3, r1, r0, lsl #5
   12e8c:	andeq	r3, r1, r0, lsl #5
   12e90:	andeq	r2, r1, r4, ror #28
   12e94:	andeq	r3, r1, r0, lsl #5
   12e98:	andeq	r2, r1, r4, ror #28
   12e9c:	andeq	r3, r1, r0, lsl #5
   12ea0:	andeq	r2, r1, r4, ror #28
   12ea4:	andeq	r2, r1, r4, ror #28
   12ea8:	andeq	r2, r1, r4, ror #28
   12eac:	andeq	r2, r1, r4, ror #28
   12eb0:	andeq	r2, r1, r4, ror #28
   12eb4:	andeq	r2, r1, r4, ror #28
   12eb8:	andeq	r2, r1, r4, ror #28
   12ebc:	andeq	r2, r1, r4, ror #28
   12ec0:	andeq	r2, r1, r4, ror #28
   12ec4:	andeq	r2, r1, r4, ror #28
   12ec8:	andeq	r2, r1, r4, ror #28
   12ecc:	andeq	r2, r1, r4, ror #28
   12ed0:	andeq	r2, r1, r4, ror #28
   12ed4:	andeq	r2, r1, r4, ror #28
   12ed8:	andeq	r2, r1, r4, ror #28
   12edc:	andeq	r2, r1, r4, ror #28
   12ee0:	andeq	r2, r1, r4, ror #28
   12ee4:	andeq	r2, r1, r4, ror #28
   12ee8:	andeq	r2, r1, r4, ror #28
   12eec:	andeq	r2, r1, r4, ror #28
   12ef0:	andeq	r2, r1, r4, ror #28
   12ef4:	andeq	r2, r1, r4, ror #28
   12ef8:	andeq	r2, r1, r4, ror #28
   12efc:	andeq	r2, r1, r4, ror #28
   12f00:	andeq	r2, r1, r4, ror #28
   12f04:	andeq	r2, r1, r4, ror #28
   12f08:	andeq	r2, r1, r4, ror #28
   12f0c:	andeq	r3, r1, r0, lsl #5
   12f10:	mov	r8, r0
   12f14:	b	12944 <__assert_fail@plt+0x1934>
   12f18:	ldr	r0, [sp, #36]	; 0x24
   12f1c:	cmp	r0, #0
   12f20:	beq	12fc0 <__assert_fail@plt+0x1fb0>
   12f24:	add	r0, r7, #2
   12f28:	cmp	r0, lr
   12f2c:	bcs	12fc0 <__assert_fail@plt+0x1fb0>
   12f30:	add	r1, r7, ip
   12f34:	ldrb	r1, [r1, #1]
   12f38:	cmp	r1, #63	; 0x3f
   12f3c:	bne	12fc0 <__assert_fail@plt+0x1fb0>
   12f40:	ldrb	r1, [ip, r0]
   12f44:	sub	r2, r1, #33	; 0x21
   12f48:	cmp	r2, #29
   12f4c:	bhi	12fc0 <__assert_fail@plt+0x1fb0>
   12f50:	mov	r3, #1
   12f54:	movw	r6, #20929	; 0x51c1
   12f58:	movt	r6, #14336	; 0x3800
   12f5c:	tst	r6, r3, lsl r2
   12f60:	beq	12fc0 <__assert_fail@plt+0x1fb0>
   12f64:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f68:	tst	r2, #1
   12f6c:	bne	13288 <__assert_fail@plt+0x2278>
   12f70:	cmp	r8, sl
   12f74:	movcc	r2, #63	; 0x3f
   12f78:	strbcc	r2, [r5, r8]
   12f7c:	add	r2, r8, #1
   12f80:	cmp	r2, sl
   12f84:	movcc	r3, #34	; 0x22
   12f88:	strbcc	r3, [r5, r2]
   12f8c:	add	r2, r8, #2
   12f90:	cmp	r2, sl
   12f94:	movcc	r3, #34	; 0x22
   12f98:	strbcc	r3, [r5, r2]
   12f9c:	add	r2, r8, #3
   12fa0:	cmp	r2, sl
   12fa4:	movcc	r3, #63	; 0x3f
   12fa8:	strbcc	r3, [r5, r2]
   12fac:	add	r8, r8, #4
   12fb0:	mov	r7, r0
   12fb4:	mov	r4, r1
   12fb8:	mov	r6, #0
   12fbc:	b	12944 <__assert_fail@plt+0x1934>
   12fc0:	mov	r6, #0
   12fc4:	b	12944 <__assert_fail@plt+0x1934>
   12fc8:	add	r0, r2, r7
   12fcc:	str	r0, [sp, #52]	; 0x34
   12fd0:	mov	r2, #0
   12fd4:	ldr	lr, [sp, #32]
   12fd8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12fdc:	str	r1, [sp, #48]	; 0x30
   12fe0:	tst	r1, #1
   12fe4:	bne	130c0 <__assert_fail@plt+0x20b0>
   12fe8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12fec:	tst	r1, #1
   12ff0:	bne	13288 <__assert_fail@plt+0x2278>
   12ff4:	mov	r3, r0
   12ff8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ffc:	subs	r1, r0, #2
   13000:	movwne	r1, #1
   13004:	orr	r1, r1, r3
   13008:	tst	r1, #1
   1300c:	bne	13044 <__assert_fail@plt+0x2034>
   13010:	cmp	r8, sl
   13014:	movcc	r0, #39	; 0x27
   13018:	strbcc	r0, [r5, r8]
   1301c:	add	r2, r8, #1
   13020:	cmp	r2, sl
   13024:	movcc	r0, #36	; 0x24
   13028:	strbcc	r0, [r5, r2]
   1302c:	add	r2, r8, #2
   13030:	cmp	r2, sl
   13034:	movcc	r0, #39	; 0x27
   13038:	strbcc	r0, [r5, r2]
   1303c:	add	r8, r8, #3
   13040:	mov	r3, #1
   13044:	cmp	r8, sl
   13048:	movcc	r1, #92	; 0x5c
   1304c:	strbcc	r1, [r5, r8]
   13050:	add	r2, r8, #1
   13054:	cmp	r2, sl
   13058:	bcs	1306c <__assert_fail@plt+0x205c>
   1305c:	uxtb	r1, r4
   13060:	mov	r0, #48	; 0x30
   13064:	orr	r1, r0, r1, lsr #6
   13068:	strb	r1, [r5, r2]
   1306c:	add	r2, r8, #2
   13070:	cmp	r2, sl
   13074:	lsrcc	r1, r4, #3
   13078:	movcc	r0, #6
   1307c:	bficc	r1, r0, #3, #29
   13080:	strbcc	r1, [r5, r2]
   13084:	mov	r0, #6
   13088:	bfi	r4, r0, #3, #29
   1308c:	add	r8, r8, #3
   13090:	mov	r2, #1
   13094:	mov	r0, r3
   13098:	b	130e4 <__assert_fail@plt+0x20d4>
   1309c:	cmp	r8, sl
   130a0:	strbcc	r4, [r5, r8]
   130a4:	ldr	r1, [sp, #76]	; 0x4c
   130a8:	ldrb	r4, [r1, r7]
   130ac:	add	r8, r8, #1
   130b0:	mov	r7, r3
   130b4:	ldr	r1, [sp, #48]	; 0x30
   130b8:	tst	r1, #1
   130bc:	beq	12fe8 <__assert_fail@plt+0x1fd8>
   130c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   130c4:	tst	r1, #1
   130c8:	beq	130dc <__assert_fail@plt+0x20cc>
   130cc:	cmp	r8, sl
   130d0:	movcc	r1, #92	; 0x5c
   130d4:	strbcc	r1, [r5, r8]
   130d8:	add	r8, r8, #1
   130dc:	mov	r1, #0
   130e0:	str	r1, [fp, #-52]	; 0xffffffcc
   130e4:	and	r9, r2, #1
   130e8:	add	r3, r7, #1
   130ec:	ldr	r1, [sp, #52]	; 0x34
   130f0:	cmp	r1, r3
   130f4:	bls	13138 <__assert_fail@plt+0x2128>
   130f8:	cmp	r9, #0
   130fc:	movwne	r9, #1
   13100:	mvn	r1, r0
   13104:	orr	r1, r1, r9
   13108:	tst	r1, #1
   1310c:	bne	1309c <__assert_fail@plt+0x208c>
   13110:	cmp	r8, sl
   13114:	movcc	r1, #39	; 0x27
   13118:	strbcc	r1, [r5, r8]
   1311c:	add	r1, r8, #1
   13120:	cmp	r1, sl
   13124:	movcc	r0, #39	; 0x27
   13128:	strbcc	r0, [r5, r1]
   1312c:	add	r8, r8, #2
   13130:	mov	r0, #0
   13134:	b	1309c <__assert_fail@plt+0x208c>
   13138:	str	r0, [fp, #-56]	; 0xffffffc8
   1313c:	cmp	r9, #0
   13140:	movwne	r9, #1
   13144:	cmp	r9, #0
   13148:	beq	12ccc <__assert_fail@plt+0x1cbc>
   1314c:	b	12d00 <__assert_fail@plt+0x1cf0>
   13150:	mov	r6, #0
   13154:	b	13194 <__assert_fail@plt+0x2184>
   13158:	mov	r6, #0
   1315c:	ldr	r0, [sp, #48]	; 0x30
   13160:	cmp	r0, lr
   13164:	bcs	13194 <__assert_fail@plt+0x2184>
   13168:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1316c:	add	r0, ip, r7
   13170:	ldr	r2, [sp, #52]	; 0x34
   13174:	ldrb	r1, [r0, r2]
   13178:	cmp	r1, #0
   1317c:	beq	12c88 <__assert_fail@plt+0x1c78>
   13180:	add	r2, r2, #1
   13184:	add	r1, r7, r2
   13188:	cmp	r1, lr
   1318c:	bcc	13174 <__assert_fail@plt+0x2164>
   13190:	b	12c88 <__assert_fail@plt+0x1c78>
   13194:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13198:	ldr	r2, [sp, #52]	; 0x34
   1319c:	b	12c88 <__assert_fail@plt+0x1c78>
   131a0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   131a4:	eor	r0, r1, #2
   131a8:	orr	r0, r0, r8
   131ac:	clz	r0, r0
   131b0:	lsr	r0, r0, #5
   131b4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   131b8:	tst	r3, r0
   131bc:	bne	13288 <__assert_fail@plt+0x2278>
   131c0:	mov	r6, r5
   131c4:	subs	r0, r1, #2
   131c8:	movwne	r0, #1
   131cc:	orr	r0, r3, r0
   131d0:	tst	r0, #1
   131d4:	ldr	r2, [sp, #92]	; 0x5c
   131d8:	ldreq	r0, [sp, #64]	; 0x40
   131dc:	eoreq	r0, r0, #1
   131e0:	tsteq	r0, #1
   131e4:	bne	13224 <__assert_fail@plt+0x2214>
   131e8:	mov	r9, lr
   131ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   131f0:	tst	r0, #1
   131f4:	bne	132f0 <__assert_fail@plt+0x22e0>
   131f8:	ldr	r0, [sp, #84]	; 0x54
   131fc:	cmp	r0, #0
   13200:	beq	13224 <__assert_fail@plt+0x2214>
   13204:	mov	r0, #0
   13208:	str	r0, [fp, #-48]	; 0xffffffd0
   1320c:	mov	r1, #2
   13210:	cmp	sl, #0
   13214:	mov	r0, r2
   13218:	mov	r4, r3
   1321c:	ldr	r7, [sp, #84]	; 0x54
   13220:	beq	123fc <__assert_fail@plt+0x13ec>
   13224:	ldr	r1, [fp, #-84]	; 0xffffffac
   13228:	clz	r0, r1
   1322c:	lsr	r0, r0, #5
   13230:	orr	r0, r0, r3
   13234:	tst	r0, #1
   13238:	bne	13264 <__assert_fail@plt+0x2254>
   1323c:	ldrb	r0, [r1]
   13240:	cmp	r0, #0
   13244:	beq	13264 <__assert_fail@plt+0x2254>
   13248:	add	r1, r1, #1
   1324c:	cmp	r8, sl
   13250:	strbcc	r0, [r6, r8]
   13254:	add	r8, r8, #1
   13258:	ldrb	r0, [r1], #1
   1325c:	cmp	r0, #0
   13260:	bne	1324c <__assert_fail@plt+0x223c>
   13264:	cmp	r8, sl
   13268:	movcc	r0, #0
   1326c:	strbcc	r0, [r6, r8]
   13270:	b	132e4 <__assert_fail@plt+0x22d4>
   13274:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13278:	mov	lr, r4
   1327c:	b	13288 <__assert_fail@plt+0x2278>
   13280:	ldr	r5, [sp, #28]
   13284:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13288:	mov	r0, #0
   1328c:	ldr	r1, [fp, #12]
   13290:	bic	r1, r1, #2
   13294:	mov	r2, #2
   13298:	ldr	r3, [sp, #92]	; 0x5c
   1329c:	tst	r3, #1
   132a0:	movwne	r2, #4
   132a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   132a8:	cmp	r3, #2
   132ac:	movne	r2, r3
   132b0:	str	r2, [sp]
   132b4:	str	r1, [sp, #4]
   132b8:	str	r0, [sp, #8]
   132bc:	ldr	r0, [sp, #80]	; 0x50
   132c0:	str	r0, [sp, #12]
   132c4:	ldr	r0, [sp, #88]	; 0x58
   132c8:	str	r0, [sp, #16]
   132cc:	mov	r0, r5
   132d0:	mov	r1, sl
   132d4:	mov	r2, ip
   132d8:	mov	r3, lr
   132dc:	bl	12370 <__assert_fail@plt+0x1360>
   132e0:	mov	r8, r0
   132e4:	mov	r0, r8
   132e8:	sub	sp, fp, #28
   132ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132f0:	mov	r0, #5
   132f4:	str	r0, [sp]
   132f8:	ldr	r0, [fp, #12]
   132fc:	str	r0, [sp, #4]
   13300:	ldr	r0, [fp, #16]
   13304:	str	r0, [sp, #8]
   13308:	ldr	r0, [sp, #80]	; 0x50
   1330c:	str	r0, [sp, #12]
   13310:	ldr	r0, [sp, #88]	; 0x58
   13314:	str	r0, [sp, #16]
   13318:	mov	r0, r6
   1331c:	ldr	r1, [sp, #84]	; 0x54
   13320:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13324:	mov	r3, r9
   13328:	b	132dc <__assert_fail@plt+0x22cc>
   1332c:	bl	10ff8 <abort@plt>
   13330:	mov	r3, r2
   13334:	mov	r2, #0
   13338:	b	1333c <__assert_fail@plt+0x232c>
   1333c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13340:	add	fp, sp, #28
   13344:	sub	sp, sp, #36	; 0x24
   13348:	mov	r4, r2
   1334c:	str	r2, [sp, #24]
   13350:	mov	r5, r1
   13354:	mov	r6, r0
   13358:	str	r0, [sp, #20]
   1335c:	movw	r8, #29032	; 0x7168
   13360:	movt	r8, #2
   13364:	cmp	r3, #0
   13368:	movne	r8, r3
   1336c:	bl	10f44 <__errno_location@plt>
   13370:	str	r0, [sp, #28]
   13374:	ldm	r8, {r3, r9}
   13378:	ldr	r1, [r8, #40]	; 0x28
   1337c:	ldr	r2, [r8, #44]	; 0x2c
   13380:	ldr	r7, [r0]
   13384:	str	r7, [sp, #32]
   13388:	add	sl, r8, #8
   1338c:	cmp	r4, #0
   13390:	orreq	r9, r9, #1
   13394:	stm	sp, {r3, r9, sl}
   13398:	str	r1, [sp, #12]
   1339c:	str	r2, [sp, #16]
   133a0:	mov	r0, #0
   133a4:	mov	r1, #0
   133a8:	mov	r2, r6
   133ac:	mov	r3, r5
   133b0:	mov	r7, r5
   133b4:	bl	12370 <__assert_fail@plt+0x1360>
   133b8:	mov	r5, r0
   133bc:	add	r4, r0, #1
   133c0:	mov	r0, r4
   133c4:	bl	14244 <__assert_fail@plt+0x3234>
   133c8:	mov	r6, r0
   133cc:	ldr	r0, [r8]
   133d0:	ldr	r1, [r8, #40]	; 0x28
   133d4:	ldr	r2, [r8, #44]	; 0x2c
   133d8:	stm	sp, {r0, r9, sl}
   133dc:	str	r1, [sp, #12]
   133e0:	str	r2, [sp, #16]
   133e4:	mov	r0, r6
   133e8:	mov	r1, r4
   133ec:	ldr	r2, [sp, #20]
   133f0:	mov	r3, r7
   133f4:	bl	12370 <__assert_fail@plt+0x1360>
   133f8:	ldr	r0, [sp, #24]
   133fc:	ldr	r1, [sp, #32]
   13400:	ldr	r2, [sp, #28]
   13404:	str	r1, [r2]
   13408:	cmp	r0, #0
   1340c:	strne	r5, [r0]
   13410:	mov	r0, r6
   13414:	sub	sp, fp, #28
   13418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1341c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13420:	add	fp, sp, #24
   13424:	movw	r8, #28912	; 0x70f0
   13428:	movt	r8, #2
   1342c:	ldr	r4, [r8]
   13430:	movw	r5, #28916	; 0x70f4
   13434:	movt	r5, #2
   13438:	ldr	r0, [r5]
   1343c:	cmp	r0, #2
   13440:	blt	1346c <__assert_fail@plt+0x245c>
   13444:	add	r7, r4, #12
   13448:	mov	r6, #0
   1344c:	ldr	r0, [r7, r6, lsl #3]
   13450:	bl	15200 <__assert_fail@plt+0x41f0>
   13454:	add	r0, r6, #1
   13458:	ldr	r1, [r5]
   1345c:	add	r2, r6, #2
   13460:	cmp	r2, r1
   13464:	mov	r6, r0
   13468:	blt	1344c <__assert_fail@plt+0x243c>
   1346c:	ldr	r0, [r4, #4]
   13470:	movw	r9, #29080	; 0x7198
   13474:	movt	r9, #2
   13478:	cmp	r0, r9
   1347c:	movw	r7, #28920	; 0x70f8
   13480:	movt	r7, #2
   13484:	beq	13494 <__assert_fail@plt+0x2484>
   13488:	bl	15200 <__assert_fail@plt+0x41f0>
   1348c:	mov	r0, #256	; 0x100
   13490:	stm	r7, {r0, r9}
   13494:	cmp	r4, r7
   13498:	beq	134a8 <__assert_fail@plt+0x2498>
   1349c:	mov	r0, r4
   134a0:	bl	15200 <__assert_fail@plt+0x41f0>
   134a4:	str	r7, [r8]
   134a8:	mov	r0, #1
   134ac:	str	r0, [r5]
   134b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   134b4:	movw	r3, #29032	; 0x7168
   134b8:	movt	r3, #2
   134bc:	mvn	r2, #0
   134c0:	b	134c4 <__assert_fail@plt+0x24b4>
   134c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134c8:	add	fp, sp, #28
   134cc:	sub	sp, sp, #44	; 0x2c
   134d0:	mov	r7, r3
   134d4:	str	r2, [sp, #36]	; 0x24
   134d8:	str	r1, [sp, #32]
   134dc:	mov	r5, r0
   134e0:	bl	10f44 <__errno_location@plt>
   134e4:	cmp	r5, #0
   134e8:	bmi	13658 <__assert_fail@plt+0x2648>
   134ec:	cmn	r5, #-2147483647	; 0x80000001
   134f0:	beq	13658 <__assert_fail@plt+0x2648>
   134f4:	movw	r4, #28912	; 0x70f0
   134f8:	movt	r4, #2
   134fc:	ldr	r6, [r4]
   13500:	str	r0, [sp, #28]
   13504:	ldr	r0, [r0]
   13508:	str	r0, [sp, #24]
   1350c:	movw	r8, #28916	; 0x70f4
   13510:	movt	r8, #2
   13514:	ldr	r1, [r8]
   13518:	cmp	r1, r5
   1351c:	ble	13528 <__assert_fail@plt+0x2518>
   13520:	mov	sl, r6
   13524:	b	13594 <__assert_fail@plt+0x2584>
   13528:	str	r1, [fp, #-32]	; 0xffffffe0
   1352c:	mov	r0, #8
   13530:	str	r0, [sp]
   13534:	movw	r9, #28920	; 0x70f8
   13538:	movt	r9, #2
   1353c:	subs	r0, r6, r9
   13540:	movne	r0, r6
   13544:	sub	r1, r5, r1
   13548:	add	r2, r1, #1
   1354c:	sub	r1, fp, #32
   13550:	mvn	r3, #-2147483648	; 0x80000000
   13554:	bl	14320 <__assert_fail@plt+0x3310>
   13558:	mov	sl, r0
   1355c:	str	r0, [r4]
   13560:	cmp	r6, r9
   13564:	bne	13570 <__assert_fail@plt+0x2560>
   13568:	ldrd	r0, [r9]
   1356c:	stm	sl, {r0, r1}
   13570:	ldr	r1, [r8]
   13574:	add	r0, sl, r1, lsl #3
   13578:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1357c:	sub	r1, r2, r1
   13580:	lsl	r2, r1, #3
   13584:	mov	r1, #0
   13588:	bl	10f5c <memset@plt>
   1358c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13590:	str	r0, [r8]
   13594:	mov	r9, sl
   13598:	ldr	r6, [r9, r5, lsl #3]!
   1359c:	ldr	r4, [r9, #4]!
   135a0:	ldm	r7, {r0, r1}
   135a4:	ldr	r2, [r7, #40]	; 0x28
   135a8:	ldr	r3, [r7, #44]	; 0x2c
   135ac:	orr	r8, r1, #1
   135b0:	add	r1, r7, #8
   135b4:	stm	sp, {r0, r8}
   135b8:	str	r1, [sp, #20]
   135bc:	add	r0, sp, #8
   135c0:	stm	r0, {r1, r2, r3}
   135c4:	mov	r0, r4
   135c8:	mov	r1, r6
   135cc:	ldr	r2, [sp, #32]
   135d0:	ldr	r3, [sp, #36]	; 0x24
   135d4:	bl	12370 <__assert_fail@plt+0x1360>
   135d8:	cmp	r6, r0
   135dc:	bhi	13640 <__assert_fail@plt+0x2630>
   135e0:	add	r6, r0, #1
   135e4:	str	r6, [sl, r5, lsl #3]
   135e8:	movw	r0, #29080	; 0x7198
   135ec:	movt	r0, #2
   135f0:	cmp	r4, r0
   135f4:	beq	13600 <__assert_fail@plt+0x25f0>
   135f8:	mov	r0, r4
   135fc:	bl	15200 <__assert_fail@plt+0x41f0>
   13600:	mov	r0, r6
   13604:	bl	14244 <__assert_fail@plt+0x3234>
   13608:	mov	r4, r0
   1360c:	str	r0, [r9]
   13610:	ldr	r0, [r7]
   13614:	ldr	r1, [r7, #40]	; 0x28
   13618:	ldr	r2, [r7, #44]	; 0x2c
   1361c:	stm	sp, {r0, r8}
   13620:	ldr	r0, [sp, #20]
   13624:	add	r3, sp, #8
   13628:	stm	r3, {r0, r1, r2}
   1362c:	mov	r0, r4
   13630:	mov	r1, r6
   13634:	ldr	r2, [sp, #32]
   13638:	ldr	r3, [sp, #36]	; 0x24
   1363c:	bl	12370 <__assert_fail@plt+0x1360>
   13640:	ldr	r0, [sp, #28]
   13644:	ldr	r1, [sp, #24]
   13648:	str	r1, [r0]
   1364c:	mov	r0, r4
   13650:	sub	sp, fp, #28
   13654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13658:	bl	10ff8 <abort@plt>
   1365c:	movw	r3, #29032	; 0x7168
   13660:	movt	r3, #2
   13664:	b	134c4 <__assert_fail@plt+0x24b4>
   13668:	mov	r1, r0
   1366c:	mov	r0, #0
   13670:	b	134b4 <__assert_fail@plt+0x24a4>
   13674:	mov	r2, r1
   13678:	mov	r1, r0
   1367c:	mov	r0, #0
   13680:	b	1365c <__assert_fail@plt+0x264c>
   13684:	push	{r4, r5, r6, sl, fp, lr}
   13688:	add	fp, sp, #16
   1368c:	sub	sp, sp, #48	; 0x30
   13690:	mov	r4, r2
   13694:	mov	r5, r0
   13698:	mov	r6, sp
   1369c:	mov	r0, r6
   136a0:	bl	136c0 <__assert_fail@plt+0x26b0>
   136a4:	mov	r0, r5
   136a8:	mov	r1, r4
   136ac:	mvn	r2, #0
   136b0:	mov	r3, r6
   136b4:	bl	134c4 <__assert_fail@plt+0x24b4>
   136b8:	sub	sp, fp, #16
   136bc:	pop	{r4, r5, r6, sl, fp, pc}
   136c0:	push	{fp, lr}
   136c4:	mov	fp, sp
   136c8:	vmov.i32	q8, #0	; 0x00000000
   136cc:	mov	r2, #32
   136d0:	mov	r3, r0
   136d4:	vst1.32	{d16-d17}, [r3], r2
   136d8:	vst1.32	{d16-d17}, [r3]
   136dc:	add	r2, r0, #16
   136e0:	vst1.32	{d16-d17}, [r2]
   136e4:	cmp	r1, #10
   136e8:	strne	r1, [r0]
   136ec:	popne	{fp, pc}
   136f0:	bl	10ff8 <abort@plt>
   136f4:	push	{r4, r5, r6, r7, fp, lr}
   136f8:	add	fp, sp, #16
   136fc:	sub	sp, sp, #48	; 0x30
   13700:	mov	r4, r3
   13704:	mov	r5, r2
   13708:	mov	r6, r0
   1370c:	mov	r7, sp
   13710:	mov	r0, r7
   13714:	bl	136c0 <__assert_fail@plt+0x26b0>
   13718:	mov	r0, r6
   1371c:	mov	r1, r5
   13720:	mov	r2, r4
   13724:	mov	r3, r7
   13728:	bl	134c4 <__assert_fail@plt+0x24b4>
   1372c:	sub	sp, fp, #16
   13730:	pop	{r4, r5, r6, r7, fp, pc}
   13734:	mov	r2, r1
   13738:	mov	r1, r0
   1373c:	mov	r0, #0
   13740:	b	13684 <__assert_fail@plt+0x2674>
   13744:	mov	r3, r2
   13748:	mov	r2, r1
   1374c:	mov	r1, r0
   13750:	mov	r0, #0
   13754:	b	136f4 <__assert_fail@plt+0x26e4>
   13758:	push	{r4, r5, r6, sl, fp, lr}
   1375c:	add	fp, sp, #16
   13760:	sub	sp, sp, #48	; 0x30
   13764:	mov	r4, r1
   13768:	mov	r5, r0
   1376c:	movw	r0, #29032	; 0x7168
   13770:	movt	r0, #2
   13774:	add	r1, r0, #16
   13778:	mov	r3, #32
   1377c:	vld1.64	{d16-d17}, [r0], r3
   13780:	vld1.64	{d18-d19}, [r1]
   13784:	mov	r6, sp
   13788:	add	r1, r6, #16
   1378c:	vld1.64	{d20-d21}, [r0]
   13790:	vst1.64	{d18-d19}, [r1]
   13794:	mov	r0, r6
   13798:	vst1.64	{d16-d17}, [r0], r3
   1379c:	vst1.64	{d20-d21}, [r0]
   137a0:	mov	r0, r6
   137a4:	mov	r1, r2
   137a8:	mov	r2, #1
   137ac:	bl	12264 <__assert_fail@plt+0x1254>
   137b0:	mov	r0, #0
   137b4:	mov	r1, r5
   137b8:	mov	r2, r4
   137bc:	mov	r3, r6
   137c0:	bl	134c4 <__assert_fail@plt+0x24b4>
   137c4:	sub	sp, fp, #16
   137c8:	pop	{r4, r5, r6, sl, fp, pc}
   137cc:	mov	r2, r1
   137d0:	mvn	r1, #0
   137d4:	b	13758 <__assert_fail@plt+0x2748>
   137d8:	mov	r1, #58	; 0x3a
   137dc:	b	137cc <__assert_fail@plt+0x27bc>
   137e0:	mov	r2, #58	; 0x3a
   137e4:	b	13758 <__assert_fail@plt+0x2748>
   137e8:	push	{r4, r5, r6, sl, fp, lr}
   137ec:	add	fp, sp, #16
   137f0:	sub	sp, sp, #48	; 0x30
   137f4:	mov	r4, r2
   137f8:	mov	r5, r0
   137fc:	mov	r6, sp
   13800:	mov	r0, r6
   13804:	bl	136c0 <__assert_fail@plt+0x26b0>
   13808:	mov	r0, r6
   1380c:	mov	r1, #58	; 0x3a
   13810:	mov	r2, #1
   13814:	bl	12264 <__assert_fail@plt+0x1254>
   13818:	mov	r0, r5
   1381c:	mov	r1, r4
   13820:	mvn	r2, #0
   13824:	mov	r3, r6
   13828:	bl	134c4 <__assert_fail@plt+0x24b4>
   1382c:	sub	sp, fp, #16
   13830:	pop	{r4, r5, r6, sl, fp, pc}
   13834:	push	{fp, lr}
   13838:	mov	fp, sp
   1383c:	sub	sp, sp, #8
   13840:	mvn	ip, #0
   13844:	str	ip, [sp]
   13848:	bl	13854 <__assert_fail@plt+0x2844>
   1384c:	mov	sp, fp
   13850:	pop	{fp, pc}
   13854:	push	{r4, r5, r6, r7, fp, lr}
   13858:	add	fp, sp, #16
   1385c:	sub	sp, sp, #48	; 0x30
   13860:	mov	r7, r3
   13864:	mov	r5, r0
   13868:	movw	r0, #29032	; 0x7168
   1386c:	movt	r0, #2
   13870:	add	r3, r0, #16
   13874:	mov	r4, #32
   13878:	vld1.64	{d16-d17}, [r0], r4
   1387c:	vld1.64	{d18-d19}, [r3]
   13880:	mov	r6, sp
   13884:	add	r3, r6, #16
   13888:	vld1.64	{d20-d21}, [r0]
   1388c:	vst1.64	{d18-d19}, [r3]
   13890:	mov	r0, r6
   13894:	vst1.64	{d16-d17}, [r0], r4
   13898:	vst1.64	{d20-d21}, [r0]
   1389c:	mov	r0, r6
   138a0:	bl	122bc <__assert_fail@plt+0x12ac>
   138a4:	ldr	r2, [fp, #8]
   138a8:	mov	r0, r5
   138ac:	mov	r1, r7
   138b0:	mov	r3, r6
   138b4:	bl	134c4 <__assert_fail@plt+0x24b4>
   138b8:	sub	sp, fp, #16
   138bc:	pop	{r4, r5, r6, r7, fp, pc}
   138c0:	mov	r3, r2
   138c4:	mov	r2, r1
   138c8:	mov	r1, r0
   138cc:	mov	r0, #0
   138d0:	b	13834 <__assert_fail@plt+0x2824>
   138d4:	push	{fp, lr}
   138d8:	mov	fp, sp
   138dc:	sub	sp, sp, #8
   138e0:	mov	ip, r2
   138e4:	mov	r2, r1
   138e8:	mov	r1, r0
   138ec:	str	r3, [sp]
   138f0:	mov	r0, #0
   138f4:	mov	r3, ip
   138f8:	bl	13854 <__assert_fail@plt+0x2844>
   138fc:	mov	sp, fp
   13900:	pop	{fp, pc}
   13904:	movw	r3, #28928	; 0x7100
   13908:	movt	r3, #2
   1390c:	b	134c4 <__assert_fail@plt+0x24b4>
   13910:	mov	r2, r1
   13914:	mov	r1, r0
   13918:	mov	r0, #0
   1391c:	b	13904 <__assert_fail@plt+0x28f4>
   13920:	mvn	r2, #0
   13924:	b	13904 <__assert_fail@plt+0x28f4>
   13928:	mov	r1, r0
   1392c:	mov	r0, #0
   13930:	b	13920 <__assert_fail@plt+0x2910>
   13934:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13938:	add	fp, sp, #24
   1393c:	sub	sp, sp, #16
   13940:	mov	r4, r1
   13944:	mov	r5, r0
   13948:	mov	r7, #0
   1394c:	mov	r0, #0
   13950:	mov	r1, r5
   13954:	mov	r2, #5
   13958:	bl	10e30 <dcgettext@plt>
   1395c:	cmp	r0, r5
   13960:	beq	1396c <__assert_fail@plt+0x295c>
   13964:	sub	sp, fp, #24
   13968:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1396c:	bl	15320 <__assert_fail@plt+0x4310>
   13970:	mov	r6, r0
   13974:	mov	r8, #56	; 0x38
   13978:	mov	r0, #45	; 0x2d
   1397c:	stm	sp, {r0, r8}
   13980:	str	r7, [sp, #8]
   13984:	str	r7, [sp, #12]
   13988:	mov	r0, r6
   1398c:	mov	r1, #85	; 0x55
   13990:	mov	r2, #84	; 0x54
   13994:	mov	r3, #70	; 0x46
   13998:	bl	13a30 <__assert_fail@plt+0x2a20>
   1399c:	cmp	r0, #0
   139a0:	beq	139bc <__assert_fail@plt+0x29ac>
   139a4:	ldrb	r1, [r5]
   139a8:	movw	r2, #24880	; 0x6130
   139ac:	movt	r2, #1
   139b0:	movw	r0, #24884	; 0x6134
   139b4:	movt	r0, #1
   139b8:	b	13a00 <__assert_fail@plt+0x29f0>
   139bc:	mov	r0, #48	; 0x30
   139c0:	mov	r1, #51	; 0x33
   139c4:	str	r8, [sp]
   139c8:	stmib	sp, {r0, r1}
   139cc:	str	r0, [sp, #12]
   139d0:	mov	r0, r6
   139d4:	mov	r1, #71	; 0x47
   139d8:	mov	r2, #66	; 0x42
   139dc:	mov	r3, #49	; 0x31
   139e0:	bl	13a30 <__assert_fail@plt+0x2a20>
   139e4:	cmp	r0, #0
   139e8:	beq	13a10 <__assert_fail@plt+0x2a00>
   139ec:	ldrb	r1, [r5]
   139f0:	movw	r2, #24888	; 0x6138
   139f4:	movt	r2, #1
   139f8:	movw	r0, #24892	; 0x613c
   139fc:	movt	r0, #1
   13a00:	cmp	r1, #96	; 0x60
   13a04:	moveq	r0, r2
   13a08:	sub	sp, fp, #24
   13a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a10:	movw	r1, #24874	; 0x612a
   13a14:	movt	r1, #1
   13a18:	movw	r0, #24878	; 0x612e
   13a1c:	movt	r0, #1
   13a20:	cmp	r4, #9
   13a24:	moveq	r0, r1
   13a28:	sub	sp, fp, #24
   13a2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a30:	push	{r4, r5, r6, r7, fp, lr}
   13a34:	add	fp, sp, #16
   13a38:	sub	sp, sp, #16
   13a3c:	mov	r4, r3
   13a40:	mov	r5, r2
   13a44:	mov	r7, r1
   13a48:	mov	r6, r0
   13a4c:	mov	r0, r1
   13a50:	bl	15004 <__assert_fail@plt+0x3ff4>
   13a54:	ldrb	r1, [r6]
   13a58:	cmp	r0, #0
   13a5c:	andne	r1, r1, #223	; 0xdf
   13a60:	mov	r0, #0
   13a64:	cmp	r1, r7
   13a68:	bne	13aa0 <__assert_fail@plt+0x2a90>
   13a6c:	cmp	r7, #0
   13a70:	beq	13aa8 <__assert_fail@plt+0x2a98>
   13a74:	ldr	r0, [fp, #20]
   13a78:	ldr	r1, [fp, #16]
   13a7c:	ldr	r2, [fp, #12]
   13a80:	ldr	r3, [fp, #8]
   13a84:	str	r2, [sp]
   13a88:	str	r1, [sp, #4]
   13a8c:	str	r0, [sp, #8]
   13a90:	mov	r0, r6
   13a94:	mov	r1, r5
   13a98:	mov	r2, r4
   13a9c:	bl	13ab4 <__assert_fail@plt+0x2aa4>
   13aa0:	sub	sp, fp, #16
   13aa4:	pop	{r4, r5, r6, r7, fp, pc}
   13aa8:	mov	r0, #1
   13aac:	sub	sp, fp, #16
   13ab0:	pop	{r4, r5, r6, r7, fp, pc}
   13ab4:	push	{r4, r5, r6, r7, fp, lr}
   13ab8:	add	fp, sp, #16
   13abc:	sub	sp, sp, #8
   13ac0:	mov	r4, r3
   13ac4:	mov	r5, r2
   13ac8:	mov	r7, r1
   13acc:	mov	r6, r0
   13ad0:	mov	r0, r1
   13ad4:	bl	15004 <__assert_fail@plt+0x3ff4>
   13ad8:	ldrb	r1, [r6, #1]
   13adc:	cmp	r0, #0
   13ae0:	andne	r1, r1, #223	; 0xdf
   13ae4:	mov	r0, #0
   13ae8:	cmp	r1, r7
   13aec:	bne	13b1c <__assert_fail@plt+0x2b0c>
   13af0:	cmp	r7, #0
   13af4:	beq	13b24 <__assert_fail@plt+0x2b14>
   13af8:	ldr	r0, [fp, #16]
   13afc:	ldr	r1, [fp, #12]
   13b00:	ldr	r3, [fp, #8]
   13b04:	str	r1, [sp]
   13b08:	str	r0, [sp, #4]
   13b0c:	mov	r0, r6
   13b10:	mov	r1, r5
   13b14:	mov	r2, r4
   13b18:	bl	13b30 <__assert_fail@plt+0x2b20>
   13b1c:	sub	sp, fp, #16
   13b20:	pop	{r4, r5, r6, r7, fp, pc}
   13b24:	mov	r0, #1
   13b28:	sub	sp, fp, #16
   13b2c:	pop	{r4, r5, r6, r7, fp, pc}
   13b30:	push	{r4, r5, r6, r7, fp, lr}
   13b34:	add	fp, sp, #16
   13b38:	sub	sp, sp, #8
   13b3c:	mov	r4, r3
   13b40:	mov	r5, r2
   13b44:	mov	r7, r1
   13b48:	mov	r6, r0
   13b4c:	mov	r0, r1
   13b50:	bl	15004 <__assert_fail@plt+0x3ff4>
   13b54:	ldrb	r1, [r6, #2]
   13b58:	cmp	r0, #0
   13b5c:	andne	r1, r1, #223	; 0xdf
   13b60:	mov	r0, #0
   13b64:	cmp	r1, r7
   13b68:	bne	13b90 <__assert_fail@plt+0x2b80>
   13b6c:	cmp	r7, #0
   13b70:	beq	13b98 <__assert_fail@plt+0x2b88>
   13b74:	ldr	r0, [fp, #12]
   13b78:	ldr	r3, [fp, #8]
   13b7c:	str	r0, [sp]
   13b80:	mov	r0, r6
   13b84:	mov	r1, r5
   13b88:	mov	r2, r4
   13b8c:	bl	13ba4 <__assert_fail@plt+0x2b94>
   13b90:	sub	sp, fp, #16
   13b94:	pop	{r4, r5, r6, r7, fp, pc}
   13b98:	mov	r0, #1
   13b9c:	sub	sp, fp, #16
   13ba0:	pop	{r4, r5, r6, r7, fp, pc}
   13ba4:	push	{r4, r5, r6, r7, fp, lr}
   13ba8:	add	fp, sp, #16
   13bac:	mov	r4, r3
   13bb0:	mov	r5, r2
   13bb4:	mov	r7, r1
   13bb8:	mov	r6, r0
   13bbc:	mov	r0, r1
   13bc0:	bl	15004 <__assert_fail@plt+0x3ff4>
   13bc4:	ldrb	r1, [r6, #3]
   13bc8:	ldr	r3, [fp, #8]
   13bcc:	cmp	r0, #0
   13bd0:	andne	r1, r1, #223	; 0xdf
   13bd4:	mov	r0, #0
   13bd8:	cmp	r1, r7
   13bdc:	bne	13c00 <__assert_fail@plt+0x2bf0>
   13be0:	cmp	r7, #0
   13be4:	beq	13bfc <__assert_fail@plt+0x2bec>
   13be8:	mov	r0, r6
   13bec:	mov	r1, r5
   13bf0:	mov	r2, r4
   13bf4:	pop	{r4, r5, r6, r7, fp, lr}
   13bf8:	b	13c04 <__assert_fail@plt+0x2bf4>
   13bfc:	mov	r0, #1
   13c00:	pop	{r4, r5, r6, r7, fp, pc}
   13c04:	push	{r4, r5, r6, r7, fp, lr}
   13c08:	add	fp, sp, #16
   13c0c:	mov	r4, r3
   13c10:	mov	r5, r2
   13c14:	mov	r7, r1
   13c18:	mov	r6, r0
   13c1c:	mov	r0, r1
   13c20:	bl	15004 <__assert_fail@plt+0x3ff4>
   13c24:	ldrb	r1, [r6, #4]
   13c28:	cmp	r0, #0
   13c2c:	andne	r1, r1, #223	; 0xdf
   13c30:	mov	r0, #0
   13c34:	cmp	r1, r7
   13c38:	bne	13c5c <__assert_fail@plt+0x2c4c>
   13c3c:	cmp	r7, #0
   13c40:	beq	13c58 <__assert_fail@plt+0x2c48>
   13c44:	mov	r0, r6
   13c48:	mov	r1, r5
   13c4c:	mov	r2, r4
   13c50:	pop	{r4, r5, r6, r7, fp, lr}
   13c54:	b	13c60 <__assert_fail@plt+0x2c50>
   13c58:	mov	r0, #1
   13c5c:	pop	{r4, r5, r6, r7, fp, pc}
   13c60:	push	{r4, r5, r6, sl, fp, lr}
   13c64:	add	fp, sp, #16
   13c68:	mov	r4, r2
   13c6c:	mov	r6, r1
   13c70:	mov	r5, r0
   13c74:	mov	r0, r1
   13c78:	bl	15004 <__assert_fail@plt+0x3ff4>
   13c7c:	ldrb	r1, [r5, #5]
   13c80:	cmp	r0, #0
   13c84:	andne	r1, r1, #223	; 0xdf
   13c88:	mov	r0, #0
   13c8c:	cmp	r1, r6
   13c90:	bne	13cb0 <__assert_fail@plt+0x2ca0>
   13c94:	cmp	r6, #0
   13c98:	beq	13cac <__assert_fail@plt+0x2c9c>
   13c9c:	mov	r0, r5
   13ca0:	mov	r1, r4
   13ca4:	pop	{r4, r5, r6, sl, fp, lr}
   13ca8:	b	13cb4 <__assert_fail@plt+0x2ca4>
   13cac:	mov	r0, #1
   13cb0:	pop	{r4, r5, r6, sl, fp, pc}
   13cb4:	push	{r4, r5, fp, lr}
   13cb8:	add	fp, sp, #8
   13cbc:	mov	r5, r1
   13cc0:	mov	r4, r0
   13cc4:	mov	r0, r1
   13cc8:	bl	15004 <__assert_fail@plt+0x3ff4>
   13ccc:	ldrb	r1, [r4, #6]
   13cd0:	cmp	r0, #0
   13cd4:	andne	r1, r1, #223	; 0xdf
   13cd8:	mov	r0, #0
   13cdc:	cmp	r1, r5
   13ce0:	popne	{r4, r5, fp, pc}
   13ce4:	cmp	r5, #0
   13ce8:	beq	13cf8 <__assert_fail@plt+0x2ce8>
   13cec:	mov	r0, r4
   13cf0:	pop	{r4, r5, fp, lr}
   13cf4:	b	13d00 <__assert_fail@plt+0x2cf0>
   13cf8:	mov	r0, #1
   13cfc:	pop	{r4, r5, fp, pc}
   13d00:	push	{r4, sl, fp, lr}
   13d04:	add	fp, sp, #8
   13d08:	mov	r4, r0
   13d0c:	mov	r0, #0
   13d10:	bl	15004 <__assert_fail@plt+0x3ff4>
   13d14:	ldrb	r1, [r4, #7]
   13d18:	cmp	r0, #0
   13d1c:	beq	13d30 <__assert_fail@plt+0x2d20>
   13d20:	tst	r1, #223	; 0xdf
   13d24:	bne	13d38 <__assert_fail@plt+0x2d28>
   13d28:	mov	r0, #1
   13d2c:	pop	{r4, sl, fp, pc}
   13d30:	cmp	r1, #0
   13d34:	beq	13d28 <__assert_fail@plt+0x2d18>
   13d38:	mov	r0, #0
   13d3c:	pop	{r4, sl, fp, pc}
   13d40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d44:	add	fp, sp, #24
   13d48:	sub	sp, sp, #32
   13d4c:	mov	r4, r2
   13d50:	mov	r8, r0
   13d54:	ldr	r6, [fp, #12]
   13d58:	ldr	r7, [fp, #8]
   13d5c:	cmp	r1, #0
   13d60:	beq	13d88 <__assert_fail@plt+0x2d78>
   13d64:	mov	r5, r1
   13d68:	str	r4, [sp]
   13d6c:	str	r3, [sp, #4]
   13d70:	movw	r2, #24980	; 0x6194
   13d74:	movt	r2, #1
   13d78:	mov	r0, r8
   13d7c:	mov	r1, #1
   13d80:	mov	r3, r5
   13d84:	b	13da0 <__assert_fail@plt+0x2d90>
   13d88:	str	r3, [sp]
   13d8c:	movw	r2, #24992	; 0x61a0
   13d90:	movt	r2, #1
   13d94:	mov	r0, r8
   13d98:	mov	r1, #1
   13d9c:	mov	r3, r4
   13da0:	bl	10f80 <__fprintf_chk@plt>
   13da4:	movw	r1, #24999	; 0x61a7
   13da8:	movt	r1, #1
   13dac:	mov	r0, #0
   13db0:	mov	r2, #5
   13db4:	bl	10e30 <dcgettext@plt>
   13db8:	mov	r3, r0
   13dbc:	movw	r0, #2022	; 0x7e6
   13dc0:	str	r0, [sp]
   13dc4:	movw	r2, #25717	; 0x6475
   13dc8:	movt	r2, #1
   13dcc:	mov	r0, r8
   13dd0:	mov	r1, #1
   13dd4:	bl	10f80 <__fprintf_chk@plt>
   13dd8:	movw	r4, #24323	; 0x5f03
   13ddc:	movt	r4, #1
   13de0:	mov	r0, r4
   13de4:	mov	r1, r8
   13de8:	bl	10dc4 <fputs_unlocked@plt>
   13dec:	movw	r1, #25003	; 0x61ab
   13df0:	movt	r1, #1
   13df4:	mov	r0, #0
   13df8:	mov	r2, #5
   13dfc:	bl	10e30 <dcgettext@plt>
   13e00:	mov	r2, r0
   13e04:	movw	r3, #25174	; 0x6256
   13e08:	movt	r3, #1
   13e0c:	mov	r0, r8
   13e10:	mov	r1, #1
   13e14:	bl	10f80 <__fprintf_chk@plt>
   13e18:	mov	r0, r4
   13e1c:	mov	r1, r8
   13e20:	bl	10dc4 <fputs_unlocked@plt>
   13e24:	cmp	r6, #9
   13e28:	bhi	13e64 <__assert_fail@plt+0x2e54>
   13e2c:	add	r0, pc, #0
   13e30:	ldr	pc, [r0, r6, lsl #2]
   13e34:	andeq	r3, r1, ip, asr lr
   13e38:	andeq	r3, r1, r0, ror lr
   13e3c:	andeq	r3, r1, r0, lsr #29
   13e40:	andeq	r3, r1, r8, asr #29
   13e44:	strdeq	r3, [r1], -r0
   13e48:	andeq	r3, r1, r8, lsl pc
   13e4c:	andeq	r3, r1, r0, asr #30
   13e50:	andeq	r3, r1, r8, ror pc
   13e54:	andeq	r4, r1, r8, lsl r0
   13e58:	andeq	r3, r1, r0, asr #31
   13e5c:	sub	sp, fp, #24
   13e60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e64:	movw	r1, #25527	; 0x63b7
   13e68:	movt	r1, #1
   13e6c:	b	13fc8 <__assert_fail@plt+0x2fb8>
   13e70:	movw	r1, #25208	; 0x6278
   13e74:	movt	r1, #1
   13e78:	mov	r0, #0
   13e7c:	mov	r2, #5
   13e80:	bl	10e30 <dcgettext@plt>
   13e84:	mov	r2, r0
   13e88:	ldr	r3, [r7]
   13e8c:	mov	r0, r8
   13e90:	mov	r1, #1
   13e94:	sub	sp, fp, #24
   13e98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e9c:	b	10f80 <__fprintf_chk@plt>
   13ea0:	movw	r1, #25224	; 0x6288
   13ea4:	movt	r1, #1
   13ea8:	mov	r0, #0
   13eac:	mov	r2, #5
   13eb0:	bl	10e30 <dcgettext@plt>
   13eb4:	mov	r2, r0
   13eb8:	ldr	r3, [r7]
   13ebc:	ldr	r0, [r7, #4]
   13ec0:	str	r0, [sp]
   13ec4:	b	13fb4 <__assert_fail@plt+0x2fa4>
   13ec8:	movw	r1, #25247	; 0x629f
   13ecc:	movt	r1, #1
   13ed0:	mov	r0, #0
   13ed4:	mov	r2, #5
   13ed8:	bl	10e30 <dcgettext@plt>
   13edc:	mov	r2, r0
   13ee0:	ldr	r3, [r7]
   13ee4:	ldmib	r7, {r0, r1}
   13ee8:	stm	sp, {r0, r1}
   13eec:	b	13fb4 <__assert_fail@plt+0x2fa4>
   13ef0:	movw	r1, #25275	; 0x62bb
   13ef4:	movt	r1, #1
   13ef8:	mov	r0, #0
   13efc:	mov	r2, #5
   13f00:	bl	10e30 <dcgettext@plt>
   13f04:	mov	r2, r0
   13f08:	ldr	r3, [r7]
   13f0c:	ldmib	r7, {r0, r1, r7}
   13f10:	stm	sp, {r0, r1, r7}
   13f14:	b	13fb4 <__assert_fail@plt+0x2fa4>
   13f18:	movw	r1, #25307	; 0x62db
   13f1c:	movt	r1, #1
   13f20:	mov	r0, #0
   13f24:	mov	r2, #5
   13f28:	bl	10e30 <dcgettext@plt>
   13f2c:	mov	r2, r0
   13f30:	ldr	r3, [r7]
   13f34:	ldmib	r7, {r0, r1, r6, r7}
   13f38:	stm	sp, {r0, r1, r6, r7}
   13f3c:	b	13fb4 <__assert_fail@plt+0x2fa4>
   13f40:	movw	r1, #25343	; 0x62ff
   13f44:	movt	r1, #1
   13f48:	mov	r0, #0
   13f4c:	mov	r2, #5
   13f50:	bl	10e30 <dcgettext@plt>
   13f54:	mov	r2, r0
   13f58:	ldr	r3, [r7]
   13f5c:	ldmib	r7, {r0, r1, r6}
   13f60:	ldr	r5, [r7, #16]
   13f64:	ldr	r7, [r7, #20]
   13f68:	stm	sp, {r0, r1, r6}
   13f6c:	str	r5, [sp, #12]
   13f70:	str	r7, [sp, #16]
   13f74:	b	13fb4 <__assert_fail@plt+0x2fa4>
   13f78:	movw	r1, #25383	; 0x6327
   13f7c:	movt	r1, #1
   13f80:	mov	r0, #0
   13f84:	mov	r2, #5
   13f88:	bl	10e30 <dcgettext@plt>
   13f8c:	mov	r2, r0
   13f90:	ldr	r3, [r7]
   13f94:	ldmib	r7, {r0, r1, r6}
   13f98:	ldr	r5, [r7, #16]
   13f9c:	ldr	r4, [r7, #20]
   13fa0:	ldr	r7, [r7, #24]
   13fa4:	stm	sp, {r0, r1, r6}
   13fa8:	str	r5, [sp, #12]
   13fac:	str	r4, [sp, #16]
   13fb0:	str	r7, [sp, #20]
   13fb4:	mov	r0, r8
   13fb8:	mov	r1, #1
   13fbc:	b	14068 <__assert_fail@plt+0x3058>
   13fc0:	movw	r1, #25475	; 0x6383
   13fc4:	movt	r1, #1
   13fc8:	mov	r0, #0
   13fcc:	mov	r2, #5
   13fd0:	bl	10e30 <dcgettext@plt>
   13fd4:	mov	ip, r0
   13fd8:	ldr	r3, [r7]
   13fdc:	ldr	r0, [r7, #4]
   13fe0:	ldr	r1, [r7, #8]
   13fe4:	ldr	r6, [r7, #12]
   13fe8:	ldr	r5, [r7, #16]
   13fec:	ldr	r4, [r7, #20]
   13ff0:	ldr	r2, [r7, #24]
   13ff4:	ldr	lr, [r7, #28]
   13ff8:	ldr	r7, [r7, #32]
   13ffc:	stm	sp, {r0, r1, r6}
   14000:	str	r5, [sp, #12]
   14004:	str	r4, [sp, #16]
   14008:	str	r2, [sp, #20]
   1400c:	str	lr, [sp, #24]
   14010:	str	r7, [sp, #28]
   14014:	b	1405c <__assert_fail@plt+0x304c>
   14018:	movw	r1, #25427	; 0x6353
   1401c:	movt	r1, #1
   14020:	mov	r0, #0
   14024:	mov	r2, #5
   14028:	bl	10e30 <dcgettext@plt>
   1402c:	mov	ip, r0
   14030:	ldr	r3, [r7]
   14034:	ldmib	r7, {r0, r1, r6}
   14038:	ldr	r5, [r7, #16]
   1403c:	ldr	r4, [r7, #20]
   14040:	ldr	r2, [r7, #24]
   14044:	ldr	r7, [r7, #28]
   14048:	stm	sp, {r0, r1, r6}
   1404c:	str	r5, [sp, #12]
   14050:	str	r4, [sp, #16]
   14054:	str	r2, [sp, #20]
   14058:	str	r7, [sp, #24]
   1405c:	mov	r0, r8
   14060:	mov	r1, #1
   14064:	mov	r2, ip
   14068:	bl	10f80 <__fprintf_chk@plt>
   1406c:	sub	sp, fp, #24
   14070:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14074:	push	{r4, sl, fp, lr}
   14078:	add	fp, sp, #8
   1407c:	sub	sp, sp, #8
   14080:	mov	lr, #0
   14084:	ldr	ip, [fp, #8]
   14088:	ldr	r4, [ip, lr, lsl #2]
   1408c:	add	lr, lr, #1
   14090:	cmp	r4, #0
   14094:	bne	14088 <__assert_fail@plt+0x3078>
   14098:	sub	r4, lr, #1
   1409c:	str	ip, [sp]
   140a0:	str	r4, [sp, #4]
   140a4:	bl	13d40 <__assert_fail@plt+0x2d30>
   140a8:	sub	sp, fp, #8
   140ac:	pop	{r4, sl, fp, pc}
   140b0:	push	{r4, r5, fp, lr}
   140b4:	add	fp, sp, #8
   140b8:	sub	sp, sp, #48	; 0x30
   140bc:	mov	ip, #0
   140c0:	ldr	r4, [fp, #8]
   140c4:	add	lr, sp, #8
   140c8:	ldr	r5, [r4]
   140cc:	str	r5, [lr, ip, lsl #2]
   140d0:	cmp	r5, #0
   140d4:	beq	140ec <__assert_fail@plt+0x30dc>
   140d8:	add	ip, ip, #1
   140dc:	add	r4, r4, #4
   140e0:	cmp	ip, #10
   140e4:	bne	140c8 <__assert_fail@plt+0x30b8>
   140e8:	mov	ip, #10
   140ec:	str	lr, [sp]
   140f0:	str	ip, [sp, #4]
   140f4:	bl	13d40 <__assert_fail@plt+0x2d30>
   140f8:	sub	sp, fp, #8
   140fc:	pop	{r4, r5, fp, pc}
   14100:	push	{fp, lr}
   14104:	mov	fp, sp
   14108:	sub	sp, sp, #8
   1410c:	add	ip, fp, #8
   14110:	str	ip, [sp, #4]
   14114:	str	ip, [sp]
   14118:	bl	140b0 <__assert_fail@plt+0x30a0>
   1411c:	mov	sp, fp
   14120:	pop	{fp, pc}
   14124:	push	{fp, lr}
   14128:	mov	fp, sp
   1412c:	movw	r0, #28996	; 0x7144
   14130:	movt	r0, #2
   14134:	ldr	r1, [r0]
   14138:	movw	r0, #24323	; 0x5f03
   1413c:	movt	r0, #1
   14140:	bl	10dc4 <fputs_unlocked@plt>
   14144:	movw	r1, #25587	; 0x63f3
   14148:	movt	r1, #1
   1414c:	mov	r0, #0
   14150:	mov	r2, #5
   14154:	bl	10e30 <dcgettext@plt>
   14158:	mov	r1, r0
   1415c:	movw	r2, #25607	; 0x6407
   14160:	movt	r2, #1
   14164:	mov	r0, #1
   14168:	bl	10f68 <__printf_chk@plt>
   1416c:	movw	r1, #25629	; 0x641d
   14170:	movt	r1, #1
   14174:	mov	r0, #0
   14178:	mov	r2, #5
   1417c:	bl	10e30 <dcgettext@plt>
   14180:	mov	r1, r0
   14184:	movw	r2, #23456	; 0x5ba0
   14188:	movt	r2, #1
   1418c:	movw	r3, #24132	; 0x5e44
   14190:	movt	r3, #1
   14194:	mov	r0, #1
   14198:	bl	10f68 <__printf_chk@plt>
   1419c:	movw	r1, #25649	; 0x6431
   141a0:	movt	r1, #1
   141a4:	mov	r0, #0
   141a8:	mov	r2, #5
   141ac:	bl	10e30 <dcgettext@plt>
   141b0:	mov	r1, r0
   141b4:	movw	r2, #25688	; 0x6458
   141b8:	movt	r2, #1
   141bc:	mov	r0, #1
   141c0:	pop	{fp, lr}
   141c4:	b	10f68 <__printf_chk@plt>
   141c8:	b	141cc <__assert_fail@plt+0x31bc>
   141cc:	push	{r4, r5, r6, sl, fp, lr}
   141d0:	add	fp, sp, #16
   141d4:	mov	r4, r2
   141d8:	mov	r5, r1
   141dc:	mov	r6, r0
   141e0:	bl	153bc <__assert_fail@plt+0x43ac>
   141e4:	cmp	r0, #0
   141e8:	popne	{r4, r5, r6, sl, fp, pc}
   141ec:	cmp	r6, #0
   141f0:	beq	14204 <__assert_fail@plt+0x31f4>
   141f4:	cmp	r5, #0
   141f8:	cmpne	r4, #0
   141fc:	bne	14204 <__assert_fail@plt+0x31f4>
   14200:	pop	{r4, r5, r6, sl, fp, pc}
   14204:	bl	14590 <__assert_fail@plt+0x3580>
   14208:	push	{fp, lr}
   1420c:	mov	fp, sp
   14210:	bl	14ccc <__assert_fail@plt+0x3cbc>
   14214:	pop	{fp, lr}
   14218:	b	1421c <__assert_fail@plt+0x320c>
   1421c:	cmp	r0, #0
   14220:	bxne	lr
   14224:	push	{fp, lr}
   14228:	mov	fp, sp
   1422c:	bl	14590 <__assert_fail@plt+0x3580>
   14230:	push	{fp, lr}
   14234:	mov	fp, sp
   14238:	bl	152ec <__assert_fail@plt+0x42dc>
   1423c:	pop	{fp, lr}
   14240:	b	1421c <__assert_fail@plt+0x320c>
   14244:	b	14208 <__assert_fail@plt+0x31f8>
   14248:	push	{r4, r5, fp, lr}
   1424c:	add	fp, sp, #8
   14250:	mov	r4, r1
   14254:	mov	r5, r0
   14258:	bl	14cfc <__assert_fail@plt+0x3cec>
   1425c:	cmp	r0, #0
   14260:	popne	{r4, r5, fp, pc}
   14264:	cmp	r5, #0
   14268:	beq	14278 <__assert_fail@plt+0x3268>
   1426c:	cmp	r4, #0
   14270:	bne	14278 <__assert_fail@plt+0x3268>
   14274:	pop	{r4, r5, fp, pc}
   14278:	bl	14590 <__assert_fail@plt+0x3580>
   1427c:	push	{fp, lr}
   14280:	mov	fp, sp
   14284:	bl	152f0 <__assert_fail@plt+0x42e0>
   14288:	pop	{fp, lr}
   1428c:	b	1421c <__assert_fail@plt+0x320c>
   14290:	push	{fp, lr}
   14294:	mov	fp, sp
   14298:	bl	15300 <__assert_fail@plt+0x42f0>
   1429c:	pop	{fp, lr}
   142a0:	b	1421c <__assert_fail@plt+0x320c>
   142a4:	mov	r2, r1
   142a8:	mov	r1, r0
   142ac:	mov	r0, #0
   142b0:	b	141cc <__assert_fail@plt+0x31bc>
   142b4:	mov	r2, r1
   142b8:	mov	r1, r0
   142bc:	mov	r0, #0
   142c0:	b	14290 <__assert_fail@plt+0x3280>
   142c4:	mov	r2, #1
   142c8:	b	142cc <__assert_fail@plt+0x32bc>
   142cc:	push	{r4, r5, fp, lr}
   142d0:	add	fp, sp, #8
   142d4:	mov	r4, r1
   142d8:	ldr	r5, [r1]
   142dc:	cmp	r0, #0
   142e0:	beq	142f8 <__assert_fail@plt+0x32e8>
   142e4:	mov	r1, #1
   142e8:	add	r1, r1, r5, lsr #1
   142ec:	adds	r5, r5, r1
   142f0:	bcc	14310 <__assert_fail@plt+0x3300>
   142f4:	bl	14590 <__assert_fail@plt+0x3580>
   142f8:	cmp	r5, #0
   142fc:	bne	14310 <__assert_fail@plt+0x3300>
   14300:	mov	r1, #64	; 0x40
   14304:	udiv	r5, r1, r2
   14308:	cmp	r2, #64	; 0x40
   1430c:	addhi	r5, r5, #1
   14310:	mov	r1, r5
   14314:	bl	141cc <__assert_fail@plt+0x31bc>
   14318:	str	r5, [r4]
   1431c:	pop	{r4, r5, fp, pc}
   14320:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14324:	add	fp, sp, #24
   14328:	mov	r8, r1
   1432c:	ldr	r6, [r1]
   14330:	add	r1, r6, r6, asr #1
   14334:	cmp	r1, r6
   14338:	mvnvs	r1, #-2147483648	; 0x80000000
   1433c:	cmp	r1, r3
   14340:	mov	r5, r1
   14344:	movgt	r5, r3
   14348:	cmn	r3, #1
   1434c:	movle	r5, r1
   14350:	ldr	r4, [fp, #8]
   14354:	cmn	r4, #1
   14358:	ble	14380 <__assert_fail@plt+0x3370>
   1435c:	cmp	r4, #0
   14360:	beq	143d4 <__assert_fail@plt+0x33c4>
   14364:	cmn	r5, #1
   14368:	ble	143a8 <__assert_fail@plt+0x3398>
   1436c:	mvn	r7, #-2147483648	; 0x80000000
   14370:	udiv	r1, r7, r4
   14374:	cmp	r1, r5
   14378:	bge	143d4 <__assert_fail@plt+0x33c4>
   1437c:	b	143e4 <__assert_fail@plt+0x33d4>
   14380:	cmn	r5, #1
   14384:	ble	143c4 <__assert_fail@plt+0x33b4>
   14388:	cmn	r4, #1
   1438c:	beq	143d4 <__assert_fail@plt+0x33c4>
   14390:	mov	r1, #-2147483648	; 0x80000000
   14394:	sdiv	r1, r1, r4
   14398:	mvn	r7, #-2147483648	; 0x80000000
   1439c:	cmp	r1, r5
   143a0:	bge	143d4 <__assert_fail@plt+0x33c4>
   143a4:	b	143e4 <__assert_fail@plt+0x33d4>
   143a8:	beq	143d4 <__assert_fail@plt+0x33c4>
   143ac:	mov	r1, #-2147483648	; 0x80000000
   143b0:	sdiv	r1, r1, r5
   143b4:	mvn	r7, #-2147483648	; 0x80000000
   143b8:	cmp	r1, r4
   143bc:	bge	143d4 <__assert_fail@plt+0x33c4>
   143c0:	b	143e4 <__assert_fail@plt+0x33d4>
   143c4:	mvn	r7, #-2147483648	; 0x80000000
   143c8:	sdiv	r1, r7, r4
   143cc:	cmp	r5, r1
   143d0:	blt	143e4 <__assert_fail@plt+0x33d4>
   143d4:	mul	r1, r5, r4
   143d8:	mov	r7, #64	; 0x40
   143dc:	cmp	r1, #63	; 0x3f
   143e0:	bgt	143ec <__assert_fail@plt+0x33dc>
   143e4:	sdiv	r5, r7, r4
   143e8:	mul	r1, r5, r4
   143ec:	cmp	r0, #0
   143f0:	moveq	r7, #0
   143f4:	streq	r7, [r8]
   143f8:	sub	r7, r5, r6
   143fc:	cmp	r7, r2
   14400:	bge	144ac <__assert_fail@plt+0x349c>
   14404:	add	r5, r6, r2
   14408:	mov	r1, #0
   1440c:	cmp	r5, r3
   14410:	mov	r2, #0
   14414:	movwgt	r2, #1
   14418:	cmn	r3, #1
   1441c:	movwgt	r1, #1
   14420:	cmp	r5, r6
   14424:	bvs	14494 <__assert_fail@plt+0x3484>
   14428:	ands	r1, r1, r2
   1442c:	bne	14494 <__assert_fail@plt+0x3484>
   14430:	cmn	r4, #1
   14434:	ble	1445c <__assert_fail@plt+0x344c>
   14438:	cmp	r4, #0
   1443c:	beq	144a8 <__assert_fail@plt+0x3498>
   14440:	cmn	r5, #1
   14444:	ble	14480 <__assert_fail@plt+0x3470>
   14448:	mvn	r1, #-2147483648	; 0x80000000
   1444c:	udiv	r1, r1, r4
   14450:	cmp	r1, r5
   14454:	bge	144a8 <__assert_fail@plt+0x3498>
   14458:	b	14494 <__assert_fail@plt+0x3484>
   1445c:	cmn	r5, #1
   14460:	ble	14498 <__assert_fail@plt+0x3488>
   14464:	cmn	r4, #1
   14468:	beq	144a8 <__assert_fail@plt+0x3498>
   1446c:	mov	r1, #-2147483648	; 0x80000000
   14470:	sdiv	r1, r1, r4
   14474:	cmp	r1, r5
   14478:	bge	144a8 <__assert_fail@plt+0x3498>
   1447c:	b	14494 <__assert_fail@plt+0x3484>
   14480:	beq	144a8 <__assert_fail@plt+0x3498>
   14484:	mov	r1, #-2147483648	; 0x80000000
   14488:	sdiv	r1, r1, r5
   1448c:	cmp	r1, r4
   14490:	bge	144a8 <__assert_fail@plt+0x3498>
   14494:	bl	14590 <__assert_fail@plt+0x3580>
   14498:	mvn	r1, #-2147483648	; 0x80000000
   1449c:	sdiv	r1, r1, r4
   144a0:	cmp	r5, r1
   144a4:	blt	14494 <__assert_fail@plt+0x3484>
   144a8:	mul	r1, r5, r4
   144ac:	bl	14248 <__assert_fail@plt+0x3238>
   144b0:	str	r5, [r8]
   144b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144b8:	mov	r1, #1
   144bc:	b	144c0 <__assert_fail@plt+0x34b0>
   144c0:	push	{fp, lr}
   144c4:	mov	fp, sp
   144c8:	bl	14c78 <__assert_fail@plt+0x3c68>
   144cc:	pop	{fp, lr}
   144d0:	b	1421c <__assert_fail@plt+0x320c>
   144d4:	mov	r1, #1
   144d8:	b	144dc <__assert_fail@plt+0x34cc>
   144dc:	push	{fp, lr}
   144e0:	mov	fp, sp
   144e4:	bl	152fc <__assert_fail@plt+0x42ec>
   144e8:	pop	{fp, lr}
   144ec:	b	1421c <__assert_fail@plt+0x320c>
   144f0:	push	{r4, r5, fp, lr}
   144f4:	add	fp, sp, #8
   144f8:	mov	r4, r1
   144fc:	mov	r5, r0
   14500:	mov	r0, r1
   14504:	bl	14208 <__assert_fail@plt+0x31f8>
   14508:	mov	r1, r5
   1450c:	mov	r2, r4
   14510:	pop	{r4, r5, fp, lr}
   14514:	b	10e0c <memcpy@plt>
   14518:	push	{r4, r5, fp, lr}
   1451c:	add	fp, sp, #8
   14520:	mov	r4, r1
   14524:	mov	r5, r0
   14528:	mov	r0, r1
   1452c:	bl	14230 <__assert_fail@plt+0x3220>
   14530:	mov	r1, r5
   14534:	mov	r2, r4
   14538:	pop	{r4, r5, fp, lr}
   1453c:	b	10e0c <memcpy@plt>
   14540:	push	{r4, r5, fp, lr}
   14544:	add	fp, sp, #8
   14548:	mov	r4, r1
   1454c:	mov	r5, r0
   14550:	add	r0, r1, #1
   14554:	bl	14230 <__assert_fail@plt+0x3220>
   14558:	mov	r1, #0
   1455c:	strb	r1, [r0, r4]
   14560:	mov	r1, r5
   14564:	mov	r2, r4
   14568:	pop	{r4, r5, fp, lr}
   1456c:	b	10e0c <memcpy@plt>
   14570:	push	{r4, sl, fp, lr}
   14574:	add	fp, sp, #8
   14578:	mov	r4, r0
   1457c:	bl	10f2c <strlen@plt>
   14580:	add	r1, r0, #1
   14584:	mov	r0, r4
   14588:	pop	{r4, sl, fp, lr}
   1458c:	b	144f0 <__assert_fail@plt+0x34e0>
   14590:	push	{fp, lr}
   14594:	mov	fp, sp
   14598:	movw	r0, #28908	; 0x70ec
   1459c:	movt	r0, #2
   145a0:	ldr	r4, [r0]
   145a4:	movw	r1, #25764	; 0x64a4
   145a8:	movt	r1, #1
   145ac:	mov	r0, #0
   145b0:	mov	r2, #5
   145b4:	bl	10e30 <dcgettext@plt>
   145b8:	mov	r3, r0
   145bc:	movw	r2, #24727	; 0x6097
   145c0:	movt	r2, #1
   145c4:	mov	r0, r4
   145c8:	mov	r1, #0
   145cc:	bl	10eb4 <error@plt>
   145d0:	bl	10ff8 <abort@plt>
   145d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145d8:	add	fp, sp, #24
   145dc:	sub	sp, sp, #16
   145e0:	mov	r5, r3
   145e4:	mov	r6, r2
   145e8:	mov	r2, r1
   145ec:	mov	r8, r0
   145f0:	ldr	r0, [fp, #16]
   145f4:	str	r0, [sp]
   145f8:	add	r3, sp, #8
   145fc:	mov	r0, r8
   14600:	mov	r1, #0
   14604:	bl	146e0 <__assert_fail@plt+0x36d0>
   14608:	cmp	r0, #0
   1460c:	bne	146bc <__assert_fail@plt+0x36ac>
   14610:	ldr	r7, [sp, #8]
   14614:	ldr	r4, [sp, #12]
   14618:	subs	r0, r7, r6
   1461c:	sbcs	r0, r4, r5
   14620:	blt	14644 <__assert_fail@plt+0x3634>
   14624:	ldr	r0, [fp, #12]
   14628:	ldr	r1, [fp, #8]
   1462c:	subs	r1, r1, r7
   14630:	sbcs	r0, r0, r4
   14634:	ldrge	r0, [sp, #8]
   14638:	ldrge	r1, [sp, #12]
   1463c:	subge	sp, fp, #24
   14640:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   14644:	subs	r0, r7, #1073741824	; 0x40000000
   14648:	sbcs	r0, r4, #0
   1464c:	blt	1465c <__assert_fail@plt+0x364c>
   14650:	bl	10f44 <__errno_location@plt>
   14654:	mov	r1, #75	; 0x4b
   14658:	b	14678 <__assert_fail@plt+0x3668>
   1465c:	bl	10f44 <__errno_location@plt>
   14660:	mvn	r1, #0
   14664:	mvn	r2, #1073741824	; 0x40000000
   14668:	subs	r2, r2, r7
   1466c:	sbcs	r1, r1, r4
   14670:	movlt	r1, #34	; 0x22
   14674:	movge	r1, #75	; 0x4b
   14678:	str	r1, [r0]
   1467c:	ldr	r5, [fp, #24]
   14680:	ldr	r6, [fp, #20]
   14684:	bl	10f44 <__errno_location@plt>
   14688:	ldr	r4, [r0]
   1468c:	mov	r0, r8
   14690:	bl	13928 <__assert_fail@plt+0x2918>
   14694:	str	r0, [sp]
   14698:	subs	r1, r4, #22
   1469c:	movne	r1, r4
   146a0:	cmp	r5, #0
   146a4:	movweq	r5, #1
   146a8:	movw	r2, #24723	; 0x6093
   146ac:	movt	r2, #1
   146b0:	mov	r0, r5
   146b4:	mov	r3, r6
   146b8:	bl	10eb4 <error@plt>
   146bc:	cmp	r0, #1
   146c0:	beq	14650 <__assert_fail@plt+0x3640>
   146c4:	cmp	r0, #3
   146c8:	bne	1467c <__assert_fail@plt+0x366c>
   146cc:	bl	10f44 <__errno_location@plt>
   146d0:	mov	r1, #0
   146d4:	b	14678 <__assert_fail@plt+0x3668>
   146d8:	mov	r1, #10
   146dc:	b	145d4 <__assert_fail@plt+0x35c4>
   146e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146e4:	add	fp, sp, #28
   146e8:	sub	sp, sp, #20
   146ec:	cmp	r2, #37	; 0x25
   146f0:	bcs	14b08 <__assert_fail@plt+0x3af8>
   146f4:	mov	r9, r3
   146f8:	mov	r7, r2
   146fc:	mov	r6, r1
   14700:	mov	r4, r0
   14704:	ldr	sl, [fp, #8]
   14708:	bl	10f44 <__errno_location@plt>
   1470c:	mov	r5, r0
   14710:	mov	r0, #0
   14714:	str	r0, [r5]
   14718:	add	r8, sp, #16
   1471c:	cmp	r6, #0
   14720:	movne	r8, r6
   14724:	mov	r0, r4
   14728:	mov	r1, r8
   1472c:	mov	r2, r7
   14730:	bl	10f8c <strtoimax@plt>
   14734:	str	r1, [sp, #12]
   14738:	str	r0, [sp, #8]
   1473c:	ldr	r7, [r8]
   14740:	cmp	r7, r4
   14744:	beq	14770 <__assert_fail@plt+0x3760>
   14748:	ldr	r0, [r5]
   1474c:	cmp	r0, #0
   14750:	beq	147ac <__assert_fail@plt+0x379c>
   14754:	mov	r5, #4
   14758:	cmp	r0, #34	; 0x22
   1475c:	bne	14afc <__assert_fail@plt+0x3aec>
   14760:	mov	r5, #1
   14764:	cmp	sl, #0
   14768:	bne	147b8 <__assert_fail@plt+0x37a8>
   1476c:	b	14af0 <__assert_fail@plt+0x3ae0>
   14770:	mov	r5, #4
   14774:	cmp	sl, #0
   14778:	beq	14afc <__assert_fail@plt+0x3aec>
   1477c:	ldrb	r1, [r7]
   14780:	cmp	r1, #0
   14784:	beq	14afc <__assert_fail@plt+0x3aec>
   14788:	mov	r0, sl
   1478c:	bl	10f38 <strchr@plt>
   14790:	cmp	r0, #0
   14794:	beq	14afc <__assert_fail@plt+0x3aec>
   14798:	mov	r5, #0
   1479c:	str	r5, [sp, #12]
   147a0:	mov	r0, #1
   147a4:	str	r0, [sp, #8]
   147a8:	b	147b8 <__assert_fail@plt+0x37a8>
   147ac:	mov	r5, r0
   147b0:	cmp	sl, #0
   147b4:	beq	14af0 <__assert_fail@plt+0x3ae0>
   147b8:	ldrb	r4, [r7]
   147bc:	cmp	r4, #0
   147c0:	beq	14af0 <__assert_fail@plt+0x3ae0>
   147c4:	mov	r0, sl
   147c8:	mov	r1, r4
   147cc:	bl	10f38 <strchr@plt>
   147d0:	cmp	r0, #0
   147d4:	beq	14a0c <__assert_fail@plt+0x39fc>
   147d8:	sub	r0, r4, #69	; 0x45
   147dc:	mov	r1, #1
   147e0:	str	r1, [sp, #4]
   147e4:	mov	r6, #1024	; 0x400
   147e8:	cmp	r0, #47	; 0x2f
   147ec:	bhi	14908 <__assert_fail@plt+0x38f8>
   147f0:	add	r1, pc, #0
   147f4:	ldr	pc, [r1, r0, lsl #2]
   147f8:			; <UNDEFINED> instruction: 0x000148b8
   147fc:	andeq	r4, r1, r8, lsl #18
   14800:			; <UNDEFINED> instruction: 0x000148b8
   14804:	andeq	r4, r1, r8, lsl #18
   14808:	andeq	r4, r1, r8, lsl #18
   1480c:	andeq	r4, r1, r8, lsl #18
   14810:			; <UNDEFINED> instruction: 0x000148b8
   14814:	andeq	r4, r1, r8, lsl #18
   14818:			; <UNDEFINED> instruction: 0x000148b8
   1481c:	andeq	r4, r1, r8, lsl #18
   14820:	andeq	r4, r1, r8, lsl #18
   14824:			; <UNDEFINED> instruction: 0x000148b8
   14828:	andeq	r4, r1, r8, lsl #18
   1482c:	andeq	r4, r1, r8, lsl #18
   14830:	andeq	r4, r1, r8, lsl #18
   14834:			; <UNDEFINED> instruction: 0x000148b8
   14838:	andeq	r4, r1, r8, lsl #18
   1483c:	andeq	r4, r1, r8, lsl #18
   14840:	andeq	r4, r1, r8, lsl #18
   14844:	andeq	r4, r1, r8, lsl #18
   14848:			; <UNDEFINED> instruction: 0x000148b8
   1484c:			; <UNDEFINED> instruction: 0x000148b8
   14850:	andeq	r4, r1, r8, lsl #18
   14854:	andeq	r4, r1, r8, lsl #18
   14858:	andeq	r4, r1, r8, lsl #18
   1485c:	andeq	r4, r1, r8, lsl #18
   14860:	andeq	r4, r1, r8, lsl #18
   14864:	andeq	r4, r1, r8, lsl #18
   14868:	andeq	r4, r1, r8, lsl #18
   1486c:	andeq	r4, r1, r8, lsl #18
   14870:	andeq	r4, r1, r8, lsl #18
   14874:	andeq	r4, r1, r8, lsl #18
   14878:	andeq	r4, r1, r8, lsl #18
   1487c:	andeq	r4, r1, r8, lsl #18
   14880:			; <UNDEFINED> instruction: 0x000148b8
   14884:	andeq	r4, r1, r8, lsl #18
   14888:	andeq	r4, r1, r8, lsl #18
   1488c:	andeq	r4, r1, r8, lsl #18
   14890:			; <UNDEFINED> instruction: 0x000148b8
   14894:	andeq	r4, r1, r8, lsl #18
   14898:			; <UNDEFINED> instruction: 0x000148b8
   1489c:	andeq	r4, r1, r8, lsl #18
   148a0:	andeq	r4, r1, r8, lsl #18
   148a4:	andeq	r4, r1, r8, lsl #18
   148a8:	andeq	r4, r1, r8, lsl #18
   148ac:	andeq	r4, r1, r8, lsl #18
   148b0:	andeq	r4, r1, r8, lsl #18
   148b4:			; <UNDEFINED> instruction: 0x000148b8
   148b8:	mov	r0, sl
   148bc:	mov	r1, #48	; 0x30
   148c0:	bl	10f38 <strchr@plt>
   148c4:	cmp	r0, #0
   148c8:	beq	14908 <__assert_fail@plt+0x38f8>
   148cc:	ldrb	r0, [r7, #1]
   148d0:	cmp	r0, #66	; 0x42
   148d4:	cmpne	r0, #68	; 0x44
   148d8:	bne	148ec <__assert_fail@plt+0x38dc>
   148dc:	mov	r0, #2
   148e0:	str	r0, [sp, #4]
   148e4:	mov	r6, #1000	; 0x3e8
   148e8:	b	14908 <__assert_fail@plt+0x38f8>
   148ec:	cmp	r0, #105	; 0x69
   148f0:	bne	14908 <__assert_fail@plt+0x38f8>
   148f4:	ldrb	r0, [r7, #2]
   148f8:	mov	r1, #1
   148fc:	cmp	r0, #66	; 0x42
   14900:	movweq	r1, #3
   14904:	str	r1, [sp, #4]
   14908:	sub	r1, r4, #66	; 0x42
   1490c:	cmp	r1, #53	; 0x35
   14910:	bhi	14a0c <__assert_fail@plt+0x39fc>
   14914:	mov	r0, #0
   14918:	add	r2, pc, #0
   1491c:	ldr	pc, [r2, r1, lsl #2]
   14920:	andeq	r4, r1, r0, ror sl
   14924:	andeq	r4, r1, ip, lsl #20
   14928:	andeq	r4, r1, ip, lsl #20
   1492c:	andeq	r4, r1, ip, ror sl
   14930:	andeq	r4, r1, ip, lsl #20
   14934:	strdeq	r4, [r1], -r8
   14938:	andeq	r4, r1, ip, lsl #20
   1493c:	andeq	r4, r1, ip, lsl #20
   14940:	andeq	r4, r1, ip, lsl #20
   14944:	andeq	r4, r1, r0, lsr #20
   14948:	andeq	r4, r1, ip, lsl #20
   1494c:	andeq	r4, r1, r4, lsr sl
   14950:	andeq	r4, r1, ip, lsl #20
   14954:	andeq	r4, r1, ip, lsl #20
   14958:	muleq	r1, r0, sl
   1495c:	andeq	r4, r1, ip, lsl #20
   14960:	andeq	r4, r1, ip, lsl #20
   14964:	andeq	r4, r1, ip, lsl #20
   14968:	andeq	r4, r1, r8, asr #20
   1496c:	andeq	r4, r1, ip, lsl #20
   14970:	andeq	r4, r1, ip, lsl #20
   14974:	andeq	r4, r1, ip, lsl #20
   14978:	andeq	r4, r1, ip, lsl #20
   1497c:	andeq	r4, r1, r4, lsr #21
   14980:	andeq	r4, r1, ip, asr sl
   14984:	andeq	r4, r1, ip, lsl #20
   14988:	andeq	r4, r1, ip, lsl #20
   1498c:	andeq	r4, r1, ip, lsl #20
   14990:	andeq	r4, r1, ip, lsl #20
   14994:	andeq	r4, r1, ip, lsl #20
   14998:	andeq	r4, r1, ip, lsl #20
   1499c:	andeq	r4, r1, ip, lsl #20
   149a0:			; <UNDEFINED> instruction: 0x00014ab8
   149a4:	ldrdeq	r4, [r1], -r0
   149a8:	andeq	r4, r1, ip, lsl #20
   149ac:	andeq	r4, r1, ip, lsl #20
   149b0:	andeq	r4, r1, ip, lsl #20
   149b4:	strdeq	r4, [r1], -r8
   149b8:	andeq	r4, r1, ip, lsl #20
   149bc:	andeq	r4, r1, ip, lsl #20
   149c0:	andeq	r4, r1, ip, lsl #20
   149c4:	andeq	r4, r1, r0, lsr #20
   149c8:	andeq	r4, r1, ip, lsl #20
   149cc:	andeq	r4, r1, r4, lsr sl
   149d0:	andeq	r4, r1, ip, lsl #20
   149d4:	andeq	r4, r1, ip, lsl #20
   149d8:	andeq	r4, r1, ip, lsl #20
   149dc:	andeq	r4, r1, ip, lsl #20
   149e0:	andeq	r4, r1, ip, lsl #20
   149e4:	andeq	r4, r1, ip, lsl #20
   149e8:	andeq	r4, r1, r8, asr #20
   149ec:	andeq	r4, r1, ip, lsl #20
   149f0:	andeq	r4, r1, ip, lsl #20
   149f4:	andeq	r4, r1, r4, asr #21
   149f8:	add	r0, sp, #8
   149fc:	mov	r1, r6
   14a00:	mov	r2, #3
   14a04:	bl	14c2c <__assert_fail@plt+0x3c1c>
   14a08:	b	14ad0 <__assert_fail@plt+0x3ac0>
   14a0c:	ldr	r0, [sp, #8]
   14a10:	ldr	r1, [sp, #12]
   14a14:	strd	r0, [r9]
   14a18:	orr	r5, r5, #2
   14a1c:	b	14afc <__assert_fail@plt+0x3aec>
   14a20:	add	r0, sp, #8
   14a24:	mov	r1, r6
   14a28:	mov	r2, #1
   14a2c:	bl	14c2c <__assert_fail@plt+0x3c1c>
   14a30:	b	14ad0 <__assert_fail@plt+0x3ac0>
   14a34:	add	r0, sp, #8
   14a38:	mov	r1, r6
   14a3c:	mov	r2, #2
   14a40:	bl	14c2c <__assert_fail@plt+0x3c1c>
   14a44:	b	14ad0 <__assert_fail@plt+0x3ac0>
   14a48:	add	r0, sp, #8
   14a4c:	mov	r1, r6
   14a50:	mov	r2, #4
   14a54:	bl	14c2c <__assert_fail@plt+0x3c1c>
   14a58:	b	14ad0 <__assert_fail@plt+0x3ac0>
   14a5c:	add	r0, sp, #8
   14a60:	mov	r1, r6
   14a64:	mov	r2, #7
   14a68:	bl	14c2c <__assert_fail@plt+0x3c1c>
   14a6c:	b	14ad0 <__assert_fail@plt+0x3ac0>
   14a70:	add	r0, sp, #8
   14a74:	mov	r1, #1024	; 0x400
   14a78:	b	14acc <__assert_fail@plt+0x3abc>
   14a7c:	add	r0, sp, #8
   14a80:	mov	r1, r6
   14a84:	mov	r2, #6
   14a88:	bl	14c2c <__assert_fail@plt+0x3c1c>
   14a8c:	b	14ad0 <__assert_fail@plt+0x3ac0>
   14a90:	add	r0, sp, #8
   14a94:	mov	r1, r6
   14a98:	mov	r2, #5
   14a9c:	bl	14c2c <__assert_fail@plt+0x3c1c>
   14aa0:	b	14ad0 <__assert_fail@plt+0x3ac0>
   14aa4:	add	r0, sp, #8
   14aa8:	mov	r1, r6
   14aac:	mov	r2, #8
   14ab0:	bl	14c2c <__assert_fail@plt+0x3c1c>
   14ab4:	b	14ad0 <__assert_fail@plt+0x3ac0>
   14ab8:	add	r0, sp, #8
   14abc:	mov	r1, #512	; 0x200
   14ac0:	b	14acc <__assert_fail@plt+0x3abc>
   14ac4:	add	r0, sp, #8
   14ac8:	mov	r1, #2
   14acc:	bl	14b28 <__assert_fail@plt+0x3b18>
   14ad0:	ldr	r1, [r8]
   14ad4:	ldr	r3, [sp, #4]
   14ad8:	add	r2, r1, r3
   14adc:	str	r2, [r8]
   14ae0:	ldrb	r1, [r1, r3]
   14ae4:	orr	r5, r0, r5
   14ae8:	cmp	r1, #0
   14aec:	orrne	r5, r5, #2
   14af0:	ldr	r0, [sp, #8]
   14af4:	ldr	r1, [sp, #12]
   14af8:	strd	r0, [r9]
   14afc:	mov	r0, r5
   14b00:	sub	sp, fp, #28
   14b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b08:	movw	r0, #25781	; 0x64b5
   14b0c:	movt	r0, #1
   14b10:	movw	r1, #25819	; 0x64db
   14b14:	movt	r1, #1
   14b18:	movw	r3, #25835	; 0x64eb
   14b1c:	movt	r3, #1
   14b20:	mov	r2, #85	; 0x55
   14b24:	bl	11010 <__assert_fail@plt>
   14b28:	push	{r4, r5, r6, r7, fp, lr}
   14b2c:	add	fp, sp, #16
   14b30:	mov	r5, r1
   14b34:	mov	r4, r0
   14b38:	cmn	r1, #1
   14b3c:	ble	14b64 <__assert_fail@plt+0x3b54>
   14b40:	cmp	r5, #0
   14b44:	beq	14bc8 <__assert_fail@plt+0x3bb8>
   14b48:	ldrd	r6, [r4]
   14b4c:	cmn	r7, #1
   14b50:	ble	14b9c <__assert_fail@plt+0x3b8c>
   14b54:	asr	r3, r5, #31
   14b58:	mvn	r0, #0
   14b5c:	mvn	r1, #-2147483648	; 0x80000000
   14b60:	b	14b84 <__assert_fail@plt+0x3b74>
   14b64:	ldrd	r6, [r4]
   14b68:	cmn	r7, #1
   14b6c:	ble	14be4 <__assert_fail@plt+0x3bd4>
   14b70:	cmn	r5, #1
   14b74:	beq	14bc8 <__assert_fail@plt+0x3bb8>
   14b78:	asr	r3, r5, #31
   14b7c:	mov	r0, #0
   14b80:	mov	r1, #-2147483648	; 0x80000000
   14b84:	mov	r2, r5
   14b88:	bl	15508 <__assert_fail@plt+0x44f8>
   14b8c:	subs	r0, r0, r6
   14b90:	sbcs	r0, r1, r7
   14b94:	bge	14bc8 <__assert_fail@plt+0x3bb8>
   14b98:	b	14c04 <__assert_fail@plt+0x3bf4>
   14b9c:	and	r0, r6, r7
   14ba0:	cmn	r0, #1
   14ba4:	beq	14bc8 <__assert_fail@plt+0x3bb8>
   14ba8:	mov	r0, #0
   14bac:	mov	r1, #-2147483648	; 0x80000000
   14bb0:	mov	r2, r6
   14bb4:	mov	r3, r7
   14bb8:	bl	15508 <__assert_fail@plt+0x44f8>
   14bbc:	subs	r0, r0, r5
   14bc0:	sbcs	r0, r1, r5, asr #31
   14bc4:	blt	14c04 <__assert_fail@plt+0x3bf4>
   14bc8:	ldrd	r0, [r4]
   14bcc:	umull	r2, r3, r0, r5
   14bd0:	asr	r7, r5, #31
   14bd4:	mla	r0, r0, r7, r3
   14bd8:	mla	r1, r1, r5, r0
   14bdc:	mov	r0, #0
   14be0:	b	14c20 <__assert_fail@plt+0x3c10>
   14be4:	asr	r3, r5, #31
   14be8:	mvn	r0, #0
   14bec:	mvn	r1, #-2147483648	; 0x80000000
   14bf0:	mov	r2, r5
   14bf4:	bl	15508 <__assert_fail@plt+0x44f8>
   14bf8:	subs	r0, r6, r0
   14bfc:	sbcs	r0, r7, r1
   14c00:	bge	14bc8 <__assert_fail@plt+0x3bb8>
   14c04:	ldr	r0, [r4, #4]
   14c08:	mvn	r1, #-2147483648	; 0x80000000
   14c0c:	cmp	r0, #0
   14c10:	movmi	r1, #-2147483648	; 0x80000000
   14c14:	mvn	r2, #0
   14c18:	movwmi	r2, #0
   14c1c:	mov	r0, #1
   14c20:	str	r2, [r4]
   14c24:	str	r1, [r4, #4]
   14c28:	pop	{r4, r5, r6, r7, fp, pc}
   14c2c:	push	{r4, r5, r6, r7, fp, lr}
   14c30:	add	fp, sp, #16
   14c34:	cmp	r2, #0
   14c38:	beq	14c6c <__assert_fail@plt+0x3c5c>
   14c3c:	mov	r4, r2
   14c40:	mov	r5, r1
   14c44:	mov	r7, r0
   14c48:	mov	r6, #0
   14c4c:	mov	r0, r7
   14c50:	mov	r1, r5
   14c54:	bl	14b28 <__assert_fail@plt+0x3b18>
   14c58:	orr	r6, r0, r6
   14c5c:	subs	r4, r4, #1
   14c60:	bne	14c4c <__assert_fail@plt+0x3c3c>
   14c64:	mov	r0, r6
   14c68:	pop	{r4, r5, r6, r7, fp, pc}
   14c6c:	mov	r6, #0
   14c70:	mov	r0, r6
   14c74:	pop	{r4, r5, r6, r7, fp, pc}
   14c78:	clz	r2, r1
   14c7c:	lsr	r2, r2, #5
   14c80:	clz	r3, r0
   14c84:	lsr	r3, r3, #5
   14c88:	orrs	r2, r3, r2
   14c8c:	movwne	r1, #1
   14c90:	movwne	r0, #1
   14c94:	cmp	r1, #0
   14c98:	beq	14cc8 <__assert_fail@plt+0x3cb8>
   14c9c:	mvn	r2, #-2147483648	; 0x80000000
   14ca0:	udiv	r2, r2, r1
   14ca4:	cmp	r2, r0
   14ca8:	bcs	14cc8 <__assert_fail@plt+0x3cb8>
   14cac:	push	{fp, lr}
   14cb0:	mov	fp, sp
   14cb4:	bl	10f44 <__errno_location@plt>
   14cb8:	mov	r1, #12
   14cbc:	str	r1, [r0]
   14cc0:	mov	r0, #0
   14cc4:	pop	{fp, pc}
   14cc8:	b	10db8 <calloc@plt>
   14ccc:	cmp	r0, #0
   14cd0:	movweq	r0, #1
   14cd4:	cmn	r0, #1
   14cd8:	ble	14ce0 <__assert_fail@plt+0x3cd0>
   14cdc:	b	10ecc <malloc@plt>
   14ce0:	push	{fp, lr}
   14ce4:	mov	fp, sp
   14ce8:	bl	10f44 <__errno_location@plt>
   14cec:	mov	r1, #12
   14cf0:	str	r1, [r0]
   14cf4:	mov	r0, #0
   14cf8:	pop	{fp, pc}
   14cfc:	push	{fp, lr}
   14d00:	mov	fp, sp
   14d04:	cmp	r0, #0
   14d08:	beq	14d24 <__assert_fail@plt+0x3d14>
   14d0c:	cmp	r1, #0
   14d10:	beq	14d30 <__assert_fail@plt+0x3d20>
   14d14:	cmn	r1, #1
   14d18:	ble	14d3c <__assert_fail@plt+0x3d2c>
   14d1c:	pop	{fp, lr}
   14d20:	b	10e3c <realloc@plt>
   14d24:	mov	r0, r1
   14d28:	pop	{fp, lr}
   14d2c:	b	14ccc <__assert_fail@plt+0x3cbc>
   14d30:	bl	15200 <__assert_fail@plt+0x41f0>
   14d34:	mov	r0, #0
   14d38:	pop	{fp, pc}
   14d3c:	bl	10f44 <__errno_location@plt>
   14d40:	mov	r1, #12
   14d44:	str	r1, [r0]
   14d48:	mov	r0, #0
   14d4c:	pop	{fp, pc}
   14d50:	mov	r1, r0
   14d54:	sub	r2, r0, #65	; 0x41
   14d58:	mov	r0, #1
   14d5c:	cmp	r2, #26
   14d60:	subcs	r2, r1, #97	; 0x61
   14d64:	cmpcs	r2, #26
   14d68:	bcs	14d70 <__assert_fail@plt+0x3d60>
   14d6c:	bx	lr
   14d70:	sub	r1, r1, #48	; 0x30
   14d74:	cmp	r1, #10
   14d78:	movcs	r0, #0
   14d7c:	bx	lr
   14d80:	mov	r1, r0
   14d84:	sub	r2, r0, #65	; 0x41
   14d88:	mov	r0, #1
   14d8c:	cmp	r2, #26
   14d90:	subcs	r1, r1, #97	; 0x61
   14d94:	cmpcs	r1, #26
   14d98:	movcs	r0, #0
   14d9c:	bx	lr
   14da0:	mov	r1, #0
   14da4:	cmp	r0, #128	; 0x80
   14da8:	movwcc	r1, #1
   14dac:	mov	r0, r1
   14db0:	bx	lr
   14db4:	sub	r1, r0, #9
   14db8:	clz	r1, r1
   14dbc:	lsr	r1, r1, #5
   14dc0:	sub	r0, r0, #32
   14dc4:	clz	r0, r0
   14dc8:	lsr	r0, r0, #5
   14dcc:	orr	r0, r0, r1
   14dd0:	bx	lr
   14dd4:	mov	r1, r0
   14dd8:	mov	r0, #1
   14ddc:	cmp	r1, #32
   14de0:	bxcc	lr
   14de4:	cmp	r1, #127	; 0x7f
   14de8:	movne	r0, #0
   14dec:	bx	lr
   14df0:	sub	r1, r0, #48	; 0x30
   14df4:	mov	r0, #0
   14df8:	cmp	r1, #10
   14dfc:	movwcc	r0, #1
   14e00:	bx	lr
   14e04:	sub	r1, r0, #33	; 0x21
   14e08:	mov	r0, #0
   14e0c:	cmp	r1, #94	; 0x5e
   14e10:	movwcc	r0, #1
   14e14:	bx	lr
   14e18:	sub	r1, r0, #97	; 0x61
   14e1c:	mov	r0, #0
   14e20:	cmp	r1, #26
   14e24:	movwcc	r0, #1
   14e28:	bx	lr
   14e2c:	sub	r1, r0, #32
   14e30:	mov	r0, #0
   14e34:	cmp	r1, #95	; 0x5f
   14e38:	movwcc	r0, #1
   14e3c:	bx	lr
   14e40:	sub	r1, r0, #33	; 0x21
   14e44:	cmp	r1, #93	; 0x5d
   14e48:	bhi	14fd4 <__assert_fail@plt+0x3fc4>
   14e4c:	mov	r0, #1
   14e50:	add	r2, pc, #0
   14e54:	ldr	pc, [r2, r1, lsl #2]
   14e58:	ldrdeq	r4, [r1], -r0
   14e5c:	ldrdeq	r4, [r1], -r0
   14e60:	ldrdeq	r4, [r1], -r0
   14e64:	ldrdeq	r4, [r1], -r0
   14e68:	ldrdeq	r4, [r1], -r0
   14e6c:	ldrdeq	r4, [r1], -r0
   14e70:	ldrdeq	r4, [r1], -r0
   14e74:	ldrdeq	r4, [r1], -r0
   14e78:	ldrdeq	r4, [r1], -r0
   14e7c:	ldrdeq	r4, [r1], -r0
   14e80:	ldrdeq	r4, [r1], -r0
   14e84:	ldrdeq	r4, [r1], -r0
   14e88:	ldrdeq	r4, [r1], -r0
   14e8c:	ldrdeq	r4, [r1], -r0
   14e90:	ldrdeq	r4, [r1], -r0
   14e94:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e98:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e9c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ea0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ea4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ea8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eb0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eb4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eb8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ebc:	ldrdeq	r4, [r1], -r0
   14ec0:	ldrdeq	r4, [r1], -r0
   14ec4:	ldrdeq	r4, [r1], -r0
   14ec8:	ldrdeq	r4, [r1], -r0
   14ecc:	ldrdeq	r4, [r1], -r0
   14ed0:	ldrdeq	r4, [r1], -r0
   14ed4:	ldrdeq	r4, [r1], -r0
   14ed8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14edc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ee0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ee4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ee8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ef0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ef4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ef8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14efc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f00:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f04:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f08:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f0c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f10:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f14:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f18:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f1c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f20:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f24:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f28:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f2c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f30:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f34:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f38:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f3c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f40:	ldrdeq	r4, [r1], -r0
   14f44:	ldrdeq	r4, [r1], -r0
   14f48:	ldrdeq	r4, [r1], -r0
   14f4c:	ldrdeq	r4, [r1], -r0
   14f50:	ldrdeq	r4, [r1], -r0
   14f54:	ldrdeq	r4, [r1], -r0
   14f58:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f5c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f60:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f64:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f68:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f6c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f70:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f74:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f78:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f7c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f80:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f84:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f88:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f8c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f90:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f94:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f98:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f9c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fa0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fa4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fa8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fb0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fb4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fb8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fbc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fc0:	ldrdeq	r4, [r1], -r0
   14fc4:	ldrdeq	r4, [r1], -r0
   14fc8:	ldrdeq	r4, [r1], -r0
   14fcc:	ldrdeq	r4, [r1], -r0
   14fd0:	bx	lr
   14fd4:	mov	r0, #0
   14fd8:	bx	lr
   14fdc:	sub	r0, r0, #9
   14fe0:	cmp	r0, #23
   14fe4:	movhi	r0, #0
   14fe8:	bxhi	lr
   14fec:	bic	r0, r0, #-16777216	; 0xff000000
   14ff0:	movw	r1, #31
   14ff4:	movt	r1, #128	; 0x80
   14ff8:	mov	r2, #1
   14ffc:	and	r0, r2, r1, lsr r0
   15000:	bx	lr
   15004:	sub	r1, r0, #65	; 0x41
   15008:	mov	r0, #0
   1500c:	cmp	r1, #26
   15010:	movwcc	r0, #1
   15014:	bx	lr
   15018:	mov	r1, r0
   1501c:	sub	r2, r0, #48	; 0x30
   15020:	mov	r0, #1
   15024:	cmp	r2, #22
   15028:	bhi	15040 <__assert_fail@plt+0x4030>
   1502c:	mov	ip, #1
   15030:	movw	r3, #1023	; 0x3ff
   15034:	movt	r3, #126	; 0x7e
   15038:	tst	r3, ip, lsl r2
   1503c:	bxne	lr
   15040:	sub	r1, r1, #97	; 0x61
   15044:	cmp	r1, #6
   15048:	movcs	r0, #0
   1504c:	bxcs	lr
   15050:	bx	lr
   15054:	sub	r1, r0, #65	; 0x41
   15058:	cmp	r1, #26
   1505c:	addcc	r0, r0, #32
   15060:	bx	lr
   15064:	sub	r1, r0, #97	; 0x61
   15068:	cmp	r1, #26
   1506c:	subcc	r0, r0, #32
   15070:	bx	lr
   15074:	push	{r4, r5, r6, sl, fp, lr}
   15078:	add	fp, sp, #16
   1507c:	mov	r4, r0
   15080:	bl	10e90 <__fpending@plt>
   15084:	mov	r5, r0
   15088:	mov	r0, r4
   1508c:	bl	10e9c <ferror_unlocked@plt>
   15090:	mov	r6, r0
   15094:	mov	r0, r4
   15098:	bl	150f8 <__assert_fail@plt+0x40e8>
   1509c:	cmp	r6, #0
   150a0:	beq	150c4 <__assert_fail@plt+0x40b4>
   150a4:	mvn	r4, #0
   150a8:	cmp	r0, #0
   150ac:	bne	150f0 <__assert_fail@plt+0x40e0>
   150b0:	bl	10f44 <__errno_location@plt>
   150b4:	mov	r1, #0
   150b8:	str	r1, [r0]
   150bc:	mov	r0, r4
   150c0:	pop	{r4, r5, r6, sl, fp, pc}
   150c4:	cmp	r0, #0
   150c8:	mov	r4, r0
   150cc:	mvnne	r4, #0
   150d0:	cmp	r5, #0
   150d4:	bne	150f0 <__assert_fail@plt+0x40e0>
   150d8:	cmp	r0, #0
   150dc:	beq	150f0 <__assert_fail@plt+0x40e0>
   150e0:	bl	10f44 <__errno_location@plt>
   150e4:	ldr	r0, [r0]
   150e8:	subs	r4, r0, #9
   150ec:	mvnne	r4, #0
   150f0:	mov	r0, r4
   150f4:	pop	{r4, r5, r6, sl, fp, pc}
   150f8:	push	{r4, r5, fp, lr}
   150fc:	add	fp, sp, #8
   15100:	sub	sp, sp, #8
   15104:	mov	r4, r0
   15108:	bl	10f74 <fileno@plt>
   1510c:	cmn	r0, #1
   15110:	ble	15188 <__assert_fail@plt+0x4178>
   15114:	mov	r0, r4
   15118:	bl	10ee4 <__freading@plt>
   1511c:	cmp	r0, #0
   15120:	beq	1514c <__assert_fail@plt+0x413c>
   15124:	mov	r0, r4
   15128:	bl	10f74 <fileno@plt>
   1512c:	mov	r1, #1
   15130:	str	r1, [sp]
   15134:	mov	r2, #0
   15138:	mov	r3, #0
   1513c:	bl	10e78 <lseek64@plt>
   15140:	and	r0, r0, r1
   15144:	cmn	r0, #1
   15148:	beq	15188 <__assert_fail@plt+0x4178>
   1514c:	mov	r0, r4
   15150:	bl	15198 <__assert_fail@plt+0x4188>
   15154:	cmp	r0, #0
   15158:	beq	15188 <__assert_fail@plt+0x4178>
   1515c:	bl	10f44 <__errno_location@plt>
   15160:	ldr	r5, [r0]
   15164:	mov	r0, r4
   15168:	bl	10f98 <fclose@plt>
   1516c:	cmp	r5, #0
   15170:	beq	15180 <__assert_fail@plt+0x4170>
   15174:	bl	10f44 <__errno_location@plt>
   15178:	str	r5, [r0]
   1517c:	mvn	r0, #0
   15180:	sub	sp, fp, #8
   15184:	pop	{r4, r5, fp, pc}
   15188:	mov	r0, r4
   1518c:	sub	sp, fp, #8
   15190:	pop	{r4, r5, fp, lr}
   15194:	b	10f98 <fclose@plt>
   15198:	push	{r4, sl, fp, lr}
   1519c:	add	fp, sp, #8
   151a0:	mov	r4, r0
   151a4:	cmp	r0, #0
   151a8:	beq	151c0 <__assert_fail@plt+0x41b0>
   151ac:	mov	r0, r4
   151b0:	bl	10ee4 <__freading@plt>
   151b4:	cmp	r0, #0
   151b8:	movne	r0, r4
   151bc:	blne	151cc <__assert_fail@plt+0x41bc>
   151c0:	mov	r0, r4
   151c4:	pop	{r4, sl, fp, lr}
   151c8:	b	10de8 <fflush@plt>
   151cc:	push	{fp, lr}
   151d0:	mov	fp, sp
   151d4:	sub	sp, sp, #8
   151d8:	ldrb	r1, [r0, #1]
   151dc:	tst	r1, #1
   151e0:	beq	151f8 <__assert_fail@plt+0x41e8>
   151e4:	mov	r1, #1
   151e8:	str	r1, [sp]
   151ec:	mov	r2, #0
   151f0:	mov	r3, #0
   151f4:	bl	15228 <__assert_fail@plt+0x4218>
   151f8:	mov	sp, fp
   151fc:	pop	{fp, pc}
   15200:	push	{r4, r5, r6, sl, fp, lr}
   15204:	add	fp, sp, #16
   15208:	mov	r4, r0
   1520c:	bl	10f44 <__errno_location@plt>
   15210:	mov	r5, r0
   15214:	ldr	r6, [r0]
   15218:	mov	r0, r4
   1521c:	bl	10df4 <free@plt>
   15220:	str	r6, [r5]
   15224:	pop	{r4, r5, r6, sl, fp, pc}
   15228:	push	{r4, r5, r6, r7, fp, lr}
   1522c:	add	fp, sp, #16
   15230:	sub	sp, sp, #8
   15234:	mov	r5, r3
   15238:	mov	r6, r2
   1523c:	mov	r4, r0
   15240:	ldr	r0, [r0, #4]
   15244:	ldr	r1, [r4, #8]
   15248:	cmp	r1, r0
   1524c:	bne	15268 <__assert_fail@plt+0x4258>
   15250:	ldrd	r0, [r4, #16]
   15254:	cmp	r1, r0
   15258:	bne	15268 <__assert_fail@plt+0x4258>
   1525c:	ldr	r0, [r4, #36]	; 0x24
   15260:	cmp	r0, #0
   15264:	beq	15280 <__assert_fail@plt+0x4270>
   15268:	mov	r0, r4
   1526c:	mov	r2, r6
   15270:	mov	r3, r5
   15274:	sub	sp, fp, #16
   15278:	pop	{r4, r5, r6, r7, fp, lr}
   1527c:	b	10fa4 <fseeko64@plt>
   15280:	ldr	r7, [fp, #8]
   15284:	mov	r0, r4
   15288:	bl	10f74 <fileno@plt>
   1528c:	str	r7, [sp]
   15290:	mov	r2, r6
   15294:	mov	r3, r5
   15298:	bl	10e78 <lseek64@plt>
   1529c:	and	r2, r0, r1
   152a0:	cmn	r2, #1
   152a4:	beq	152c4 <__assert_fail@plt+0x42b4>
   152a8:	strd	r0, [r4, #80]	; 0x50
   152ac:	ldr	r0, [r4]
   152b0:	bic	r0, r0, #16
   152b4:	str	r0, [r4]
   152b8:	mov	r0, #0
   152bc:	sub	sp, fp, #16
   152c0:	pop	{r4, r5, r6, r7, fp, pc}
   152c4:	mvn	r0, #0
   152c8:	sub	sp, fp, #16
   152cc:	pop	{r4, r5, r6, r7, fp, pc}
   152d0:	push	{fp, lr}
   152d4:	mov	fp, sp
   152d8:	bl	10f44 <__errno_location@plt>
   152dc:	mov	r1, #12
   152e0:	str	r1, [r0]
   152e4:	mov	r0, #0
   152e8:	pop	{fp, pc}
   152ec:	b	14ccc <__assert_fail@plt+0x3cbc>
   152f0:	cmp	r1, #0
   152f4:	orreq	r1, r1, #1
   152f8:	b	14cfc <__assert_fail@plt+0x3cec>
   152fc:	b	14c78 <__assert_fail@plt+0x3c68>
   15300:	clz	r3, r2
   15304:	lsr	ip, r3, #5
   15308:	clz	r3, r1
   1530c:	lsr	r3, r3, #5
   15310:	orrs	r3, r3, ip
   15314:	movwne	r1, #1
   15318:	movwne	r2, #1
   1531c:	b	153bc <__assert_fail@plt+0x43ac>
   15320:	push	{fp, lr}
   15324:	mov	fp, sp
   15328:	mov	r0, #14
   1532c:	bl	10fc8 <nl_langinfo@plt>
   15330:	movw	r1, #24324	; 0x5f04
   15334:	movt	r1, #1
   15338:	cmp	r0, #0
   1533c:	movne	r1, r0
   15340:	ldrb	r2, [r1]
   15344:	movw	r0, #25913	; 0x6539
   15348:	movt	r0, #1
   1534c:	cmp	r2, #0
   15350:	movne	r0, r1
   15354:	pop	{fp, pc}
   15358:	push	{r4, r5, r6, r7, fp, lr}
   1535c:	add	fp, sp, #16
   15360:	sub	sp, sp, #8
   15364:	mov	r7, r2
   15368:	mov	r4, r1
   1536c:	add	r5, sp, #4
   15370:	cmp	r0, #0
   15374:	movne	r5, r0
   15378:	mov	r0, r5
   1537c:	bl	10ea8 <mbrtowc@plt>
   15380:	mov	r6, r0
   15384:	cmp	r7, #0
   15388:	beq	153b0 <__assert_fail@plt+0x43a0>
   1538c:	cmn	r6, #2
   15390:	bcc	153b0 <__assert_fail@plt+0x43a0>
   15394:	mov	r0, #0
   15398:	bl	153f8 <__assert_fail@plt+0x43e8>
   1539c:	cmp	r0, #0
   153a0:	bne	153b0 <__assert_fail@plt+0x43a0>
   153a4:	ldrb	r0, [r4]
   153a8:	str	r0, [r5]
   153ac:	mov	r6, #1
   153b0:	mov	r0, r6
   153b4:	sub	sp, fp, #16
   153b8:	pop	{r4, r5, r6, r7, fp, pc}
   153bc:	cmp	r2, #0
   153c0:	beq	153f0 <__assert_fail@plt+0x43e0>
   153c4:	mvn	r3, #0
   153c8:	udiv	r3, r3, r2
   153cc:	cmp	r3, r1
   153d0:	bcs	153f0 <__assert_fail@plt+0x43e0>
   153d4:	push	{fp, lr}
   153d8:	mov	fp, sp
   153dc:	bl	10f44 <__errno_location@plt>
   153e0:	mov	r1, #12
   153e4:	str	r1, [r0]
   153e8:	mov	r0, #0
   153ec:	pop	{fp, pc}
   153f0:	mul	r1, r2, r1
   153f4:	b	14cfc <__assert_fail@plt+0x3cec>
   153f8:	push	{r4, sl, fp, lr}
   153fc:	add	fp, sp, #8
   15400:	sub	sp, sp, #264	; 0x108
   15404:	add	r1, sp, #7
   15408:	movw	r2, #257	; 0x101
   1540c:	bl	15464 <__assert_fail@plt+0x4454>
   15410:	mov	r4, #0
   15414:	cmp	r0, #0
   15418:	bne	15458 <__assert_fail@plt+0x4448>
   1541c:	add	r0, sp, #7
   15420:	movw	r1, #25919	; 0x653f
   15424:	movt	r1, #1
   15428:	mov	r2, #2
   1542c:	bl	10f20 <bcmp@plt>
   15430:	cmp	r0, #0
   15434:	beq	15458 <__assert_fail@plt+0x4448>
   15438:	add	r0, sp, #7
   1543c:	movw	r1, #25921	; 0x6541
   15440:	movt	r1, #1
   15444:	mov	r2, #6
   15448:	bl	10f20 <bcmp@plt>
   1544c:	mov	r4, r0
   15450:	cmp	r0, #0
   15454:	movwne	r4, #1
   15458:	mov	r0, r4
   1545c:	sub	sp, fp, #8
   15460:	pop	{r4, sl, fp, pc}
   15464:	b	15468 <__assert_fail@plt+0x4458>
   15468:	push	{r4, r5, r6, r7, fp, lr}
   1546c:	add	fp, sp, #16
   15470:	mov	r6, r2
   15474:	mov	r4, r1
   15478:	bl	15500 <__assert_fail@plt+0x44f0>
   1547c:	cmp	r0, #0
   15480:	beq	154b0 <__assert_fail@plt+0x44a0>
   15484:	mov	r7, r0
   15488:	bl	10f2c <strlen@plt>
   1548c:	cmp	r0, r6
   15490:	bcs	154cc <__assert_fail@plt+0x44bc>
   15494:	add	r2, r0, #1
   15498:	mov	r0, r4
   1549c:	mov	r1, r7
   154a0:	bl	10e0c <memcpy@plt>
   154a4:	mov	r5, #0
   154a8:	mov	r0, r5
   154ac:	pop	{r4, r5, r6, r7, fp, pc}
   154b0:	mov	r5, #22
   154b4:	cmp	r6, #0
   154b8:	beq	154f4 <__assert_fail@plt+0x44e4>
   154bc:	mov	r0, #0
   154c0:	strb	r0, [r4]
   154c4:	mov	r0, r5
   154c8:	pop	{r4, r5, r6, r7, fp, pc}
   154cc:	mov	r5, #34	; 0x22
   154d0:	cmp	r6, #0
   154d4:	beq	154f4 <__assert_fail@plt+0x44e4>
   154d8:	sub	r6, r6, #1
   154dc:	mov	r0, r4
   154e0:	mov	r1, r7
   154e4:	mov	r2, r6
   154e8:	bl	10e0c <memcpy@plt>
   154ec:	mov	r0, #0
   154f0:	strb	r0, [r4, r6]
   154f4:	mov	r0, r5
   154f8:	pop	{r4, r5, r6, r7, fp, pc}
   154fc:	b	15500 <__assert_fail@plt+0x44f0>
   15500:	mov	r1, #0
   15504:	b	10fb0 <setlocale@plt>
   15508:	cmp	r3, #0
   1550c:	cmpeq	r2, #0
   15510:	bne	15534 <__assert_fail@plt+0x4524>
   15514:	cmp	r1, #0
   15518:	movlt	r1, #-2147483648	; 0x80000000
   1551c:	movlt	r0, #0
   15520:	blt	15530 <__assert_fail@plt+0x4520>
   15524:	cmpeq	r0, #0
   15528:	mvnne	r1, #-2147483648	; 0x80000000
   1552c:	mvnne	r0, #0
   15530:	b	155dc <__assert_fail@plt+0x45cc>
   15534:	sub	sp, sp, #8
   15538:	push	{sp, lr}
   1553c:	cmp	r1, #0
   15540:	blt	15560 <__assert_fail@plt+0x4550>
   15544:	cmp	r3, #0
   15548:	blt	15594 <__assert_fail@plt+0x4584>
   1554c:	bl	155ec <__assert_fail@plt+0x45dc>
   15550:	ldr	lr, [sp, #4]
   15554:	add	sp, sp, #8
   15558:	pop	{r2, r3}
   1555c:	bx	lr
   15560:	rsbs	r0, r0, #0
   15564:	sbc	r1, r1, r1, lsl #1
   15568:	cmp	r3, #0
   1556c:	blt	155b8 <__assert_fail@plt+0x45a8>
   15570:	bl	155ec <__assert_fail@plt+0x45dc>
   15574:	ldr	lr, [sp, #4]
   15578:	add	sp, sp, #8
   1557c:	pop	{r2, r3}
   15580:	rsbs	r0, r0, #0
   15584:	sbc	r1, r1, r1, lsl #1
   15588:	rsbs	r2, r2, #0
   1558c:	sbc	r3, r3, r3, lsl #1
   15590:	bx	lr
   15594:	rsbs	r2, r2, #0
   15598:	sbc	r3, r3, r3, lsl #1
   1559c:	bl	155ec <__assert_fail@plt+0x45dc>
   155a0:	ldr	lr, [sp, #4]
   155a4:	add	sp, sp, #8
   155a8:	pop	{r2, r3}
   155ac:	rsbs	r0, r0, #0
   155b0:	sbc	r1, r1, r1, lsl #1
   155b4:	bx	lr
   155b8:	rsbs	r2, r2, #0
   155bc:	sbc	r3, r3, r3, lsl #1
   155c0:	bl	155ec <__assert_fail@plt+0x45dc>
   155c4:	ldr	lr, [sp, #4]
   155c8:	add	sp, sp, #8
   155cc:	pop	{r2, r3}
   155d0:	rsbs	r2, r2, #0
   155d4:	sbc	r3, r3, r3, lsl #1
   155d8:	bx	lr
   155dc:	push	{r1, lr}
   155e0:	mov	r0, #8
   155e4:	bl	10dd0 <raise@plt>
   155e8:	pop	{r1, pc}
   155ec:	cmp	r1, r3
   155f0:	cmpeq	r0, r2
   155f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155f8:	mov	r4, r0
   155fc:	movcc	r0, #0
   15600:	mov	r5, r1
   15604:	ldr	lr, [sp, #36]	; 0x24
   15608:	movcc	r1, r0
   1560c:	bcc	15708 <__assert_fail@plt+0x46f8>
   15610:	cmp	r3, #0
   15614:	clzeq	ip, r2
   15618:	clzne	ip, r3
   1561c:	addeq	ip, ip, #32
   15620:	cmp	r5, #0
   15624:	clzeq	r1, r4
   15628:	addeq	r1, r1, #32
   1562c:	clzne	r1, r5
   15630:	sub	ip, ip, r1
   15634:	sub	sl, ip, #32
   15638:	lsl	r9, r3, ip
   1563c:	rsb	fp, ip, #32
   15640:	orr	r9, r9, r2, lsl sl
   15644:	orr	r9, r9, r2, lsr fp
   15648:	lsl	r8, r2, ip
   1564c:	cmp	r5, r9
   15650:	cmpeq	r4, r8
   15654:	movcc	r0, #0
   15658:	movcc	r1, r0
   1565c:	bcc	15678 <__assert_fail@plt+0x4668>
   15660:	mov	r0, #1
   15664:	subs	r4, r4, r8
   15668:	lsl	r1, r0, sl
   1566c:	orr	r1, r1, r0, lsr fp
   15670:	lsl	r0, r0, ip
   15674:	sbc	r5, r5, r9
   15678:	cmp	ip, #0
   1567c:	beq	15708 <__assert_fail@plt+0x46f8>
   15680:	lsr	r6, r8, #1
   15684:	orr	r6, r6, r9, lsl #31
   15688:	lsr	r7, r9, #1
   1568c:	mov	r2, ip
   15690:	b	156b4 <__assert_fail@plt+0x46a4>
   15694:	subs	r3, r4, r6
   15698:	sbc	r8, r5, r7
   1569c:	adds	r3, r3, r3
   156a0:	adc	r8, r8, r8
   156a4:	adds	r4, r3, #1
   156a8:	adc	r5, r8, #0
   156ac:	subs	r2, r2, #1
   156b0:	beq	156d0 <__assert_fail@plt+0x46c0>
   156b4:	cmp	r5, r7
   156b8:	cmpeq	r4, r6
   156bc:	bcs	15694 <__assert_fail@plt+0x4684>
   156c0:	adds	r4, r4, r4
   156c4:	adc	r5, r5, r5
   156c8:	subs	r2, r2, #1
   156cc:	bne	156b4 <__assert_fail@plt+0x46a4>
   156d0:	lsr	r3, r4, ip
   156d4:	orr	r3, r3, r5, lsl fp
   156d8:	lsr	r2, r5, ip
   156dc:	orr	r3, r3, r5, lsr sl
   156e0:	adds	r0, r0, r4
   156e4:	mov	r4, r3
   156e8:	lsl	r3, r2, ip
   156ec:	orr	r3, r3, r4, lsl sl
   156f0:	lsl	ip, r4, ip
   156f4:	orr	r3, r3, r4, lsr fp
   156f8:	adc	r1, r1, r5
   156fc:	subs	r0, r0, ip
   15700:	mov	r5, r2
   15704:	sbc	r1, r1, r3
   15708:	cmp	lr, #0
   1570c:	strdne	r4, [lr]
   15710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15718:	mov	r7, r0
   1571c:	ldr	r6, [pc, #72]	; 1576c <__assert_fail@plt+0x475c>
   15720:	ldr	r5, [pc, #72]	; 15770 <__assert_fail@plt+0x4760>
   15724:	add	r6, pc, r6
   15728:	add	r5, pc, r5
   1572c:	sub	r6, r6, r5
   15730:	mov	r8, r1
   15734:	mov	r9, r2
   15738:	bl	10d98 <calloc@plt-0x20>
   1573c:	asrs	r6, r6, #2
   15740:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15744:	mov	r4, #0
   15748:	add	r4, r4, #1
   1574c:	ldr	r3, [r5], #4
   15750:	mov	r2, r9
   15754:	mov	r1, r8
   15758:	mov	r0, r7
   1575c:	blx	r3
   15760:	cmp	r6, r4
   15764:	bne	15748 <__assert_fail@plt+0x4738>
   15768:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1576c:	andeq	r1, r1, r0, ror #15
   15770:	ldrdeq	r1, [r1], -r8
   15774:	bx	lr
   15778:	ldr	r3, [pc, #12]	; 1578c <__assert_fail@plt+0x477c>
   1577c:	mov	r1, #0
   15780:	add	r3, pc, r3
   15784:	ldr	r2, [r3]
   15788:	b	10f50 <__cxa_atexit@plt>
   1578c:	andeq	r1, r1, ip, asr r9
   15790:	mov	r2, r1
   15794:	mov	r1, r0
   15798:	mov	r0, #3
   1579c:	b	10fe0 <__xstat64@plt>
   157a0:	mov	r2, r1
   157a4:	mov	r1, r0
   157a8:	mov	r0, #3
   157ac:	b	10e60 <__fxstat64@plt>

Disassembly of section .fini:

000157b0 <.fini>:
   157b0:	push	{r3, lr}
   157b4:	pop	{r3, pc}
